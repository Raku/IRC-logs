[00:14] <mugwump> stevan, whereabouts do you live, out of interest?

[00:16] <autrijus> class Point {

[00:16] <autrijus>     has $.x;

[00:16] <autrijus>     has $.y;

[00:16] <autrijus>     method show () { say "Coordinate: ($.x, $.y)" }

[00:17] <autrijus>     method set ($x, $y) { $.x = $x; $.y = $y }

[00:17] <autrijus> }

[00:17] <autrijus> my $pt = Point.new(:x(10), :y(20));

[00:17] <autrijus> $pt.show;

[00:17] <autrijus> $pt.set(30, 40);

[00:17] <autrijus> $pt.show;

[00:17] <autrijus> This now works.

[00:17] <autrijus> committing.

[00:17] <mugwump> autrijus++ # you da man

[00:18] <mugwump> nothing else, though, I suppose?  Roles, isa, does, etc?

[00:18] <autrijus> nothing else.

[00:18] <autrijus> gotta get started somewhere :)

[00:19] <mugwump> yes, indeed.  Well, I guess I can do away with Hack::Instances soon, then

[00:19] <mugwump> Can I put defined Classes in method signatures?

[00:19] <autrijus> yes.

[00:19] <autrijus> and they will just work.

[00:19] <autrijus> (envClasses gets modified)

[00:20] <mugwump> FCKN@!   (this is a positive exclamation in case you were wondering)

[00:22] <mugwump> Gah, I wish I didn't have a major release due this week... suppose I'd better start on it :)

[00:29] <mugwump> hmm, I can't get to my freepan repos, nor ssh in

[00:29] <mugwump> oh, duh.  it's not svn.freepan.org

[00:30] <meppl> gute nacht

[00:31] <mugwump> tschuss

[00:32] * puetzk wonders if the "method set($.x, $.y)" works to make setters, or if that's only for constructors

[00:35] <sproingie> pugs now has real class i see :)

[00:35] <autrijus> yes. have fun. :)

[00:35] <autrijus> zzz &

[00:36] * autrijus is quite happy that both rules and oo has landed on the 100th day :)

[00:36] <sproingie> i've never seen anything so complex developed so fast

[00:36] <autrijus> that's anarchism for you :)

[00:36] <sproingie> i always thought perl6 would be beyond mere mortals

[00:36] <sproingie> then again ...

[00:36] * sproingie peers at ajitrus ... not sure about that mere mortal thing

[00:36] <sproingie> atrijus even

[00:37] <autrijus> nah. I'm a mere mortal, this I'm quite sure :)

[00:41] * Odin- scribbles an encircled A somewhere very visible.

[01:07] <stevan> autrijus++

[01:07] <stevan> real classes,.. 

[01:07] * sproingie sets up his 32 bit jail so he can compile ghc so he can do pugs

[01:07] <stevan> :)

[01:08] <sproingie> *grumblegrumble*

[01:08] <stevan> mugwump: hey

[01:09] <sproingie> grrrargh.  i still have the music from phantom brave stuck in my head

[01:09] <mugwump> hi

[01:09] <stevan> so is Hack::Instances obsolete now?

[01:09] <mugwump> quite possibly

[01:09] <sproingie> i must say, debian makes chroots drop-dead simple

[01:10] <mugwump> sproingie: got linux-vserver.org?

[01:11] <sproingie> mugwump: nope

[01:11] <sproingie> the chroot is working, don't want to mess with a vserver just yet

[01:11] <mugwump> jail your chroots!

[01:11] <sproingie> not planning on running anything hostile in them

[01:12] <sproingie> i just need a 32 bit chroot, not a jail

[01:12] <sproingie> besides, i want the chroot to talk to the same localhost as the 64 bit system

[01:12] <sproingie> so i can run x apps

[01:13] <sproingie> tho i suppose there's some kind of bridged interface support

[01:13] <mugwump> I'm not trying to convince you, just thought you might be interested ;)

[01:14] <sproingie> yah i'll probably run a vserver if i decide to start perl6nomic

[01:14] <sproingie> i was holding out for classes, and now they've landed

[01:14] <sproingie> unfortunately the regular perlnomic is meeting the same fate as all other nomics.  stagnancy leading to a dead game

[01:16] * sproingie has a de facto static ip like all the other cable modem folks, could probably take the traffic

[01:42] <stevan> mugwump: I got can() to work

[01:43] <stevan>         eval 'defined(&' ~ $method ~ ')' ?? eval '&' ~ $method :: 0; 

[01:43] <stevan> its an ugly ugly hack,... but then again, all of Hack::Instances is one :)

[01:46] <mugwump> hoice

[01:46] <mugwump> choice even

[01:46] <mugwump> so, where in the world are you, stevan ?

[01:46] <stevan> Northeast US

[01:46] <stevan> your in NZ right?

[01:46] <mugwump> I am

[01:47] <mugwump> must be small hours there now then

[01:47] <mugwump> no, what am I on about

[01:47] <mugwump> evening?

[01:47] <stevan> 9:46 om

[01:47] <stevan> pm

[01:48] <mugwump> ok, so you're 16 hours behind me at the moment, or 8 - 24 hours ahead 

[01:48] <stevan> it is tuesday here

[01:49] <stevan> I think you are ahead of me

[01:49] <mugwump> wednesday afternoon here

[01:49] <stevan> yeah

[01:49] <stevan> so have you played with the class support yet? 

[01:50] <mugwump> sadly I'm being distracted from my real work by my professional tasks

[01:50] <stevan> ah

[01:50] <stevan> where do you $work

[01:50] <sproingie> ARGH.  ghc won't build from cvs

[01:50] <sproingie> what version of ghc does pugs need?

[01:51] <stevan> sproingie: 6.4

[01:51] <sproingie> oh hey that's actually out now

[01:51] <mugwump> stevan: I'm the webmonkey for http://www.bnz.marketview.co.nz/

[01:51] <sproingie> i can just download a binary

[01:51] <sproingie> would be NICE if ghc actually built out of the box tho

[01:55] <mugwump> or apt-get -t experimental install ghc

[02:22] <sproingie> mugwump: got a sources.list line i can use for experimntal?

[02:22] <sproingie> i'll put it in sources.list this time, honest :)

[02:23] <mugwump> I just change "sarge" to "experimental" from my normal sources

[02:23] <sproingie> i use ubuntu

[02:23] <mugwump> ah

[02:23] <mugwump> deb http://ftp.nz.debian.org/debian experimental main contrib non-free

[02:23] <mugwump> you'll need to s/nz/$your_country/

[02:25] <sproingie> apt-get -t experimental install ghc doesn't give me anything newer than the other repos

[02:26] <sproingie> funny thing, apt-get update gives me a GPG error, and tells me to run apt-get update to fix it

[02:27] <sproingie> how do i install the gpg key for the experimental repo?

[02:27] * mugwump shrugs

[02:28] <mugwump> it worked for me :)

[02:29] <stevan> autrijus: how can I get $self with classes?

[02:29] <mugwump> actually, seems 6.4-3 is now in unstable, too.

[02:29] <sproingie> blean

[02:29] <stevan> (I know you are not on, but I figure you will see in the backlog)

[02:29] <sproingie> that means ubuntu is slower than sid

[02:29] <mugwump> you could add unstable uris to your sources.list too, but pin them to a really low priority so the ubuntu packages take priority...

[02:29] <stevan> mugwump: class support has some missing spots, but I am going to start converting Perl::MetaModel anyway

[02:30] <sproingie> mugwump: i'm at a complete loss as to how I'd do that ...

[02:30] <mugwump> stevan: great... hopefully I'll be finished with this week's work tomorrow

[02:30] <stevan> nice

[02:30] <mugwump> sproingie: http://jaqque.sbih.org/kplug/apt-pinning.html

[02:32] <sproingie> cool.  guess the worst that can happen is that i hose my system ... which is just a chroot

[02:32] <mugwump> sure.  and the best thing that could happen is that it works and you post a nice info page about how ubuntu users can easily pick up extra packages from debian when they're not in multiverse or whatever

[02:33] <mugwump> no pressure

[02:36] <sproingie> dammit.  same gpg error from unstable.  i'll have to ask #ubuntu

[02:38] <sproingie> jesus.  everyone there just bleats about how evil and wrong it is

[02:38] <sproingie> and if i ask #debian, they'll just scold me for using ubuntu

[02:45] <sproingie> ah, found one helpful soul

[03:06] <sproingie> yay, got darcs

[03:06] <sproingie> now for pugs

[03:07] <sproingie> argh,  the darcs repository on pugscode.org doesnt want to work

[03:07] <sproingie> has it moved primarily to subversion/svk now?

[03:08] <obra> it has, but it's regularly syncced to darcs

[03:08] <sproingie> yahbut the darcs url is all broked

[03:09] <sproingie> guess i can get svn

[03:13] <sproingie> ok, im an idiot with svn... how do i check out/update pugs with it?

[03:14] <stevan> sproingie: svn co http://svn.openfoundry.org/pugs

[03:14] <sproingie> kinda like cvs except with http.  nice

[03:14] <sproingie> svn update to update?

[03:14] <stevan> yes

[03:15] <stevan> svn help is actually very informative too

[03:16] <stevan> basically you can do svn help <command>

[03:16] <stevan> and this comes in handy too http://svnbook.red-bean.com/en/1.0/index.html

[03:18] <sproingie> cool

[03:18] <mugwump> sproingie: there's an appendix in the svnbook that explains the differences going from CVS -> Subversion.  Highly recommended.

[03:18] <sproingie> i know some cvs, but mostly i like pointy-clicky stuff like tortoisecvs

[03:19] <mugwump> so get tortoisesvn!  :)

[03:19] <sproingie> have it on the windows side

[03:19] <sproingie> wish like crazy there was some equivalent for konqueror

[03:19] <mugwump> yeah, cervisia isn't great

[03:21] <sproingie> whups.  guess i need to install parrot too

[03:21] <sproingie> what's this about hs-plugins?

[03:22] <mugwump> set pugs compiling while you get those installed; you don't *need* them for all features of pugs

[03:22] <mugwump> just PGE/yaml/etc

[03:22] <Khisanth> PGE seems rather significant though :)

[03:23] <sproingie> yah, i want it to produce parrot

[03:24] <sproingie> svk really excites me, because we used to use cvs, but the Big Borg Parent uses perforce

[03:25] <sproingie> i hate cvs, and my opinion of perforce is "meh", but a unified interface for them, very nice

[03:26] <sproingie> oif.  parrot configure fails

[03:26] <sproingie> does parrot not work with gcc-4?

[03:27] <dvtoo_> gcc4 almost doesn't work with itself ;)

[03:27] <sproingie> sadly, I get the exact same error with gcc-3.3

[03:28] <dvtoo_> what os/arch?

[03:28] <sproingie> ubuntu breezy, x86

[03:28] <sproingie> actually a 32 bit chroot on x86_64, but it's compiled everything else ok

[03:29] <sproingie> does Configure.pl leave a log?

[03:29] <dvtoo_> unsure, it's been a while since I looked

[03:29] <sproingie> aha

[03:29] <sproingie> it's looking for a "cc" command

[03:29] <sproingie> which doesnt exist

[03:30] <dvtoo_> odd.  there isn't one on solaris either, but it works fine there

[03:30] <dvtoo_> well, relatively

[03:30] <dvtoo_> it builds ;)

[03:36] <sproingie> guess i'll add the cc alias and try again

[03:36] <sproingie> already uninstalled gcc-4, but it's too bleeding edge anyway

[03:36] <sproingie> hope ghc doesnt require it

[03:38] <dvtoo_> I doubt it even works with 4.0.0 ;)

[03:40] <dvtoo_> you may not have noticed, but I'm not super impressed with the gcc4 or ghc build process, but that's probably due to how much I've been fighting with both of them lately ;)

[03:40] <sproingie> ghc failed to build for me, so i gave up and installed it from unstable

[03:40] <sproingie> which takes a little work since i run ubuntu

[03:40] <dvtoo_> yeah, this is on solaris ;)

[03:40] <sproingie> oy

[03:42] <sproingie> made a bunch of symlinks, seems to work ok now

[03:44] *** Lopo_ is now known as Lopo

[03:47] <f0rth> is pugscc with backend Pugs broken?

[03:55] <sproingie> yay, pugs works

[04:02] <sproingie> argh.  i can't compile hs-plugins.  no inline haskell for me

[04:03] <sproingie> hm.  looks like it might have built enough

[04:04] <sproingie> nope.  no evalhaskell

[04:17] <Khisanth> has there ever been anything on the ML regarding unloading modules?

[04:20] <sproingie> hs-plugins seems totally broken

[04:23] <sproingie> ahh, older snapshot seems to work all right

[05:05] <batkins_> will/does parrot support haskell?

[05:12] <mugwump> parrot supports anything that will compile to it!  :)

[05:15] <Khisanth> wasn't there someone working on a gcc frontend that would target parrot?

[05:16] * mugwump smokes some crack

[05:16] <mugwump> yeah, I can see it

[05:18] <mugwump> damn it's gone, and now all I feel like is more crack

[05:18] <batkins_> haha

[07:29] *** chady_ is now known as chady

[07:43] <pernod> MSN'e*

[08:20] <knewt> anyone got any ideas what this error when building hs-plugins is due to? [[ Rebuilding dependencies ... Could not find module `Data.List': ]]

[08:32] <knewt> hmm. snapshot from 20050424 works. that'll do.

[08:35] <knewt> aarrrggghhhh. hs-plugins is /not/ sane. not bloody DESTDIR support

[08:35] <knewt> s/not bloody/no bloody/

[09:05] <Juerd> 1=

[09:05] <Juerd> s/1=//

[09:14] <Juerd> Forgot my svn password :(

[09:15] <webmind> smart :)

[09:32] <gaal|work> Juerd, there's a send-password link on openfoundry.

[09:32] <Juerd> Oh, right. I forgot that it was linked to a site

[09:32] <Juerd> Thanks

[10:10] <JaffaCake> anyone tell me where the darcs repo of pugs is?

[10:13] <nothingmuch> JaffaCake: sure, one second

[10:13] <nothingmuch> but the darcs repo is not worth it... svk revisions are applied to the working dir, and then 'darcs record' is done, once a minute or so

[10:13] <nothingmuch> so any patch you submit will be a conflict

[10:13] <wolverian> whoa, OO. pugs++

[10:14] <JaffaCake> just want a quick way to download it, I don't have SVN installed

[10:14] <nothingmuch> ah

[10:15] <nothingmuch> hmm, it seems to have disappeared

[10:15] <nothingmuch> http://wagner.elixus.org/~autrijus/darcs/pugs/

[10:15] <nothingmuch> want me to rsync a copy of the repo to my website?

[10:15] <JaffaCake> that's what I thought, I wondered if it had moved

[10:15] <b6s> elixus' hosting is moving.

[10:16] <JaffaCake> not a big deal, I'm trying with 6.2.2 now (trying to reproduce a bug someone reported in GHC)

[10:53] <ajs> Well, I figured out where that Parrot error was coming from yesterday... now to see if I can figure out enough Haskell to formulate a patch ;-)

[10:53] <pdcawley> Heh.

[10:53] <pdcawley> Is anyone working on P6::DBI?

[10:54] <kungfuftr> pdcawley: don't believe so

[10:54] <ajs> Well, we don't have OO yet, so it's probably a bit early, unless you just want to do design.

[10:54] <pdcawley> Didn't OO just get announced?

[10:54] <kungfuftr> thought about DBI::PurePerl, but it uses a scary amount of perl5 foo

[10:54] <kungfuftr> ajs: OO is here

[10:54] <pdcawley> On the blog.

[10:54] <ajs> Heh, sorry I'm whole hours behind ;-)

[10:55] * pdcawley might half inch one of the Pure Ruby interfaces to MySQL. Not standard, but enough to get up and running.

[10:55] <pdcawley> I find myself thinking 'Perl6OnRails'

[10:57] <Juerd> pdcawley: Can't you use a trojan ponie to get that running?

[10:57] <pdcawley> Is ponie running?

[10:57] <pdcawley> Plus, where's the fun in that.

[10:57] <pdcawley> Perl 6 babie.

[10:57] <Juerd> Ponie exists and pugs can eval_parrot

[10:58] <Juerd> I'm no expert, but this ought to be enough to use ponie, right?

[10:58] * pdcawley doesn't know.

[10:58] <Juerd> pdcawley: Perl 6 programming is currently a hell of a job, with list context being broken

[10:58] <Juerd> There's no way without eval to simply add an array or hash reference to an array

[10:58] <Juerd> As references currently flatten :(

[10:58] <ajs> As for DBI... I think you want roles before formalizing P6 DBI. I imagine that one of the best things that could happen to DBI would be to slice off a bunch of "many, but not all databases consider this standard" stuff into roles that can be applied at run-time by using special constructors. That would reduce the footprint of DBI considerably

[10:59] <Juerd> Instead of push @foo, [], you have to do my $i = @foo.elems; eval "\@foo[$i] = []"

[10:59] <Juerd> Because a non-literal-integer expression in [] provides list context to the rhs, you can't just do @foo[@foo.elemes] = [] even

[11:00] <broquaint> Couldn't someone "just" write a Parrot DBI then call that from Pugs?

[11:00] <pdcawley> Juerd: Yikes!

[11:00] <Juerd> pdcawley: That's what I thought when I discovered this yesterday.

[11:00] <ajs> broquaint: yes, though that would still want P6 window-dressing.

[11:00] <Juerd> pdcawley: I really hoped/thought/assumed pugs would have had this fixed by now

[11:01] <Juerd> It can be that the current behaviour is intentional

[11:01] <Juerd> In that case, it's time to discuss list context again

[11:01] <pdcawley> Can you write 'sub pushref {...}' to handle that?

[11:01] <kungfuftr> pdcawley: Rosetta ?

[11:01] <pdcawley> Or does [] get flattened by the function call?

[11:01] <Juerd> pdcawley: It'd be a pushscalar, but yes.

[11:01] <ajs> what's the magic cookie that prevents agressive haskell optimizatioin and speeds up builds of pugs? I'm dying with these frequent updates :)

[11:02] <Juerd> pdcawley: No, a scalar parameter provides scalar context

[11:02] <pdcawley> unoptimized

[11:02] <ajs> is that a flag to Makefile.PL?

[11:02] <pdcawley> Are multimethods in?

[11:02] <broquaint> But isn't the hard part writing the DB interface, ajs?

[11:02] <ajs> NM, found it. Thanks for the poiunter!

[11:03] <ajs> broquaint: hrm... depends. Writing a P6 DBI (even given a Parrot under-layer) is challenging. P6's relationship with its OO system is not yet clear in terms of practical coding

[11:04] <broquaint> Surely by the time it's written perl6 will be finished anyhow ;)

[11:04] <ajs> Writing Parrot DBD modules should be trivial enough, since you can adapt much of the P5 DBDs

[11:05] <knewt> hmm # [[ Failed 27/249 test scripts, 89.16% okay. 80/4861 subtests failed, 98.35% okay. ]]

[11:05] <pdcawley> ISTM that attempting to write real apps in 6 is one of the things that'll supply Autrijus with loads of tests.

[11:05] <Juerd> I remember that hashrefs serialized as []

[11:05] <Juerd> eh

[11:05] <Juerd> arrayrefs as []

[11:05] <Juerd> hashrefs as {}

[11:05] <Juerd> They're both \() now. That's horrible to work with.

[11:05] <pdcawley> Juerd: When did that happen?

[11:05] <ajs> pdcawley: certainly, and taking a stab at something that might change with evolving usage isn't all bad

[11:06] <ajs> er, isn't *at* all bad, is what I meant

[11:06] <knewt> so, am i supposed to be seeing that many failing tests?

[11:06] <ajs> knewt: dunno. Haven't run a make test today

[11:07] <Juerd> pdcawley: I have no idea -- I haven't used pugs for weeks

[11:07] <pdcawley> Ah... it's a pugs thing, not a Larry thing?

[11:07] <kungfuftr> broquaint: there are DB's that don't require C... for example csv based databases... etc

[11:07] <Juerd> pdcawley: If it's not a bug, then we need a hundred extra operators to compensate for the loss in functionality.

[11:08] <Juerd> references in list context must absolutely never flatten, because you can then no longer pass references in a list.

[11:08] <broquaint> I would've thought a sqlite DBD would be fairly starightforward too, kungfuftr.

[11:08] <kungfuftr> broquaint: yup... dbd::sqlite is self-contained

[11:08] <ajs> Larry has changed his stance a few times on what refs do in list context, as I recall

[11:09] <Juerd> Auto-dereferencing must only occur in SPECIFIC contexts, never in list context, never in "Any" context

[11:09] * pdcawley notes that push's context should probably be 'multi scalar'

[11:09] <Juerd> pdcawley: Signatures have no way to provide an arbitrary number of scalar context items

[11:10] <pdcawley> ie: @foo = (); @bar = ('bar'); push @foo, @bar; # @foo = (['bar'])

[11:10] <broquaint> I wonder if anyone has written a Parrot interface to sqlite ...

[11:10] <luqui> Juerd: that's not true

[11:10] <Juerd> pdcawley: And simple literals must be possible. I was unable to create a matrix of a b c d e / f g h i j / k l m n o / p q r s t / u v w x y with nested [], because of the broken list context. I had to hard code indices :(

[11:10] <luqui> Larry has said it's something like *@foo is context(Scalar)

[11:10] * kungfuftr has noted that it's entirely possible to map perl6 objects and relationships directly into oracle and pgsql

[11:10] <Juerd> luqui: Oh. When was that?

[11:10] <luqui> it's in some of the blessed documents somewhere...

[11:10] <kungfuftr> if strictly typed that is

[11:10] <pdcawley> Need to do push @foo, *@bar to get @foo == ('bar')

[11:11] <knewt> kungfuftr: native class::dbi ?

[11:11] <Juerd> luqui: Then I think scalar context slurpy lists need to be the default, and well, list context can go away entirely.

[11:11] <kungfuftr> knewt: no, not class::dbi, more like tangram

[11:11] <luqui> pdcawley: you really think that push should have multiple scalar context?

[11:11] <knewt> kungfuftr: never really looked at tangram. maybe i should ;)

[11:11] <luqui> Juerd: why?

[11:12] <Juerd> luqui: List context that you don't encounter everywhere, especially if it flattens aggressively, is useless anyway, because you can do the same with **, explicitly.

[11:12] <pdcawley> luqui: Only if you can't otherwise distinguish between @foo and []

[11:12] <Juerd> I cannot imagine ANY occurrence of wanting aggressive flattening of literals

[11:12] <pdcawley> Though, thinking about it, even if you can.

[11:12] <luqui> Juerd: by agressive flattening, you're referring to the infinite dereferencing semantics?

[11:12] <Juerd> luqui: But I'd rather just have a list context that flattens only arrays and hashes, not references.

[11:13] <Juerd> luqui: No, flattening references.

[11:13] <Juerd> luqui: currently, ([],[],[],[]) is a 0 element list.

[11:13] <luqui> there's no context that does that...

[11:13] <pdcawley> @foo and %foo *are* references.

[11:13] <Juerd> pdcawley: No, they are not.

[11:13] <Juerd> pdcawley: @foo in list context is its elements, in scalar context it's referenced

[11:13] <luqui> Juerd: they are references that flatten themselves in flattening context

[11:13] <Juerd> pdcawley: If you want a reference in list context, use \@foo.

[11:14] <Juerd> pdcawley: This hasn't changed since Perl 5. @foo in scalar context just returns a ref instead of th enumber of elems

[11:14] <Juerd> luqui: Whatever description suits you :)

[11:14] <luqui> yeah, both descriptions work

[11:14] <Juerd> I prefer to think of @foo and %bar as "real" arrays and hashes

[11:14] <pdcawley> luqui: I rather think that 'flattening context' is a much better description of Perl 6 semantics as I understand them.

[11:14] <Juerd> while \@foo, [] are references

[11:14] <Juerd> That makes discussing things lots and lots easier

[11:14] <Juerd> Of course, everything internally is a reference if it has a name :)

[11:15] <Juerd> pdcawley: I've suggested changing the names of contexts (singular and plural), but it hasn't happened

[11:15] <Juerd> pdcawley: Other suggestions are: item versus slurpy (as implemented in pugs)

[11:15] <Juerd> pdcawley: And scalar versus flattening

[11:16] <Juerd> I like item versus slurpy

[11:16] <kungfuftr> Juerd: "steamroller context"!

[11:16] <luqui> I like the other two :-)

[11:16] <Juerd> kungfuftr: No, ** is the steamroller

[11:16] <pdcawley> scalar, flattening and steamroller contexts...

[11:16] <Juerd> kungfuftr: This is separate from list context

[11:16] <luqui> yeah, like this:  sub foo (**@_)

[11:16] <Juerd> luqui: Which other two?

[11:16] <luqui> the other two pairs of names

[11:16] <Juerd> luqui: Which names?

[11:17] <kungfuftr> *blink* there's actually a steamroller context!?

[11:17] <Juerd> luqui: Oh, nevermind. I understand now.

[11:17] <ajs> yes

[11:17] <Juerd> kungfuftr: Yes.

[11:17] <kungfuftr> fuck me#

[11:17] <Juerd> kungfuftr: And ** is the steamroller.

[11:17] <pdcawley> **$thing --> take this abitrary data structure and present it as a simple list.

[11:17] <luqui> kungfuftr: isn't it great learning about perl 6.  All your jokes are actually features

[11:17] <Juerd> pdcawley: aggressively, unlazying.

[11:17] <ajs> ** is like $$ but upside down

[11:18] <kungfuftr> luqui: yeah

[11:18] <pdcawley> Presumably composite classes will be able to declare how they decompose under a steamroller?

[11:18] <Juerd> luqui: Yesterday someone asked me in private: "Is yada yada yada really an operator?!"

[11:18] <luqui> yeah.

[11:18] <luqui> but I still say no to ??? and !!!

[11:18] <Juerd> I dunno

[11:19] <Juerd> I kind of like them

[11:19] <kungfuftr> no to proposition S29!

[11:19] <pdcawley> ??? and !!!?

[11:19] <Juerd> !!! if <assertion>;

[11:19] <luqui> they're like ..., but more agressive or something

[11:19] * pdcawley really should be writing the summary.

[11:19] * luqui is quite opposed to them

[11:19] <ajs> ooh, I like that

[11:19] <broquaint> Just c&p #perl6 logs, pdcawley ;)

[11:19] <pdcawley> !!! if ???

[11:19] <Juerd> pdcawley: ..., ??? and !!! are the same thing, but ??? warns, and !!! dies, while ... merely fails

[11:19] <pdcawley> broquaint: I think not.

[11:19] <Juerd> pdcawley: The behaviour of "fail" is configurable

[11:20] <luqui> Juerd: I thought ??? was the one that failed

[11:20] <kungfuftr> ah, nice

[11:20] <pdcawley> That much I knew. And in my modules it will throw an exception.

[11:20] *** chady is now known as chady_

[11:20] <Juerd> luqui: I think not. Let's see.

[11:20] <Juerd> The box on which I read mail is overloaded

[11:20] <Juerd> This can take a while.

[11:21] <Juerd> Reading /home/juerd/Mail/perl6-language... 2500 (59%)                           

[11:21] * pdcawley would far rather catch exceptions then spend his life checking return values.

[11:21] <pdcawley> At least truth is out of band now...

[11:21] <ajs> pdcawley: I hope you mean, "in my modules it will (by default) throw an excpetion," since clearly the user of your module might want consistency across their entire universe

[11:21] <Juerd> pdcawley: Me too. That's why I *love* the new "fail"

[11:21] <luqui> Juerd: you're right

[11:21] <Juerd> pdcawley: You can simply "use fatal" and all fails are dies

[11:21] <pdcawley> Juerd: I know.

[11:21] <Juerd> luqui: Just when I found the message! :)

[11:21] <Juerd> pdcawley: I still like the undef default

[11:22] <luqui> that's why it's configurable :-)

[11:22] <pdcawley> ajs: That's why I'll use fail not die. But all my modules will begin 'use fatal;'

[11:22] <Juerd> pdcawley: Because for throwaway scripts, which I write much more often, it saves you lots of evals

[11:22] <Juerd> trys.

[11:22] <Juerd> pdcawley: Hm

[11:22] <pdcawley> Juerd? Why try, just let the exception kill the script.

[11:22] <Juerd> pdcawley: "use fatal" turns fail into die, I thought

[11:22] * luqui has that message *'d, so that he can chew out Larry tomorrow

[11:22] <pdcawley> It does...

[11:23] <Juerd> pdcawley: Then if something else fails, you die, and if you fail, you merely fail.

[11:23] <pdcawley> But you just have to do CATCH ... {...} in an appropriate block, no need to try.

[11:23] <Juerd> pdcawley: I think we then need something that turns fail into double-fail.

[11:23] <ajs> pdcawley: hrm... doesn't that mean that your module will thrown exceptions regardless of the caller's wishes? Better to put that use fatal into your calling code.... 

[11:23] <luqui> double-fail?

[11:23] <pdcawley> ajs: No.

[11:23] <Juerd> luqui: like double-return

[11:23] <pdcawley> use is lexically scoped.

[11:23] <luqui> Juerd: which is?

[11:23] <ajs> yes, correct. It's scoped

[11:23] <pdcawley> Users of any module will get whatever fail behaviour they want.

[11:23] <Juerd> pdcawley: Yes, but die is globally killing the script.

[11:24] <Juerd> luqui: return not only from the current sub, but also from the calling sub

[11:24] <luqui> oh

[11:24] <Juerd> pdcawley: Not if the *module* uses fatal.

[11:24] <luqui> never had that need...

[11:24] <Juerd> pdcawley: If the module uses fatal, and uses another module or function that fails, the module dies, regardless of fatal.pm setting in the caller.

[11:24] <ajs> "use fatal" will set up exception behavior in your module, regardless of what any outer lexical scope desires

[11:24] <luqui> Juerd: nope

[11:24] <Juerd> pdcawley: That's why you'd need a double-fail instead.

[11:24] <luqui> It's caller based

[11:25] <luqui> oh

[11:25] * Juerd phone

[11:25] <luqui> I think I see what you're saying

[11:25] <pdcawley> use fatal; says "In this module, anything I call should die to fail"

[11:25] <pdcawley> If I then fail to catch that exception, it'll propagate out to my callers.

[11:25] <luqui> yep

[11:25] <pdcawley> But any 'fails' I throw will behave according to the pragmatic state of my caller.

[11:26] <luqui> Juerd wasn't saying what I thought he was

[11:26] <ajs> Example: no fatal; { use fatal; fail; }

[11:26] <luqui> ajs: that isn't a call

[11:26] <ajs> correct

[11:26] <wolverian> no fatal; class Foo { use fatal; sub bar { fail } } Foo.bar; # I don't want this to die

[11:26] <pdcawley> And it won't.

[11:26] <luqui> okay --- to get things straight:  "fail" depends on the "use fatal" setting of the CALLER ONLY

[11:27] <wolverian> ah, okay. how is that implemented, by the way? by walking caller()?

[11:27] <luqui> is it implemented?

[11:27] <Juerd> luqui: So "use fatal" doesn't just turn any fail of called subs into die, it turns them into double-fails

[11:27] <wolverian> well, I don't know. I was just wondering if it was some weird scoping rule instead.

[11:27] <Juerd> luqui: Which caller, that's the qusetion.

[11:27] <wolverian> (which one could use in other places)

[11:27] <pdcawley> That's the calling function right, not the calling package (cf 'warn'/'carp')

[11:27] <luqui> Oh, the caller of the thing that's calling fail

[11:27] <Juerd> luqui: caller of in fatal context, or top level caller?

[11:27] <ajs> So in that case, you pick up a lexical "use fatal" inside bar. The only way that "Foo.bar" doesn't choke is if "no fatal" implicitly wraps in a catch

[11:27] <luqui> the "double caller"

[11:28] <Juerd> luqui: Right. Then it's okay.

[11:28] <luqui> okay good

[11:28] <luqui> wow

[11:28] <pdcawley> Fail will always be a tail call...

[11:28] <Juerd> luqui: That's exactly what I meant :)

[11:28] <wolverian> ajs: right. that makes sense.

[11:29] <knewt> so how will "use fatal" propagate into coroutines? just on the initial call, or differently for each re-entry?

[11:29] <Juerd> knewt: Per re-entry, I presume.

[11:30] <ajs> knewt: It depends. If we have the implicit catching that pdcawley seems to be suggesting, then coroutines calls would be wrapped however each invocation desires.

[11:30] <luqui> knewt: uh... coroutines & continuations + exception handling = not thought about yet

[11:30] * pdcawley could be wrong about the implicit catching.

[11:31] <luqui> Yeah, I think each call into the coroutine could use a different fatal setting

[11:31] <ajs> Anyone mind if I formulate this as a P6L message? I find the question intriguing

[11:31] <Juerd> (localized sites with automatic, unoverrideable selection)--  # fuck you, drop dead, and more like that.

[11:31] <luqui> go for it

[11:31] <pdcawley> But it makes sense to me that any block can have CATCH blocks within it.

[11:31] * knewt considers repulling & recompiling pugs later today and seeing if he gets fewer test failures

[11:32] <pdcawley> It's currently refusing to link on this OS X box.

[11:32] <pdcawley> (Tiger)

[11:32] <pdcawley> whinging about an undefined symbol __DISCARD__

[11:32] <knewt> my computer spent all of last night building ghc packages for me :)

[11:33] <knewt> as far as pugs goes i'm getting 27/249 test script fails, and 80/4861 subtest fails

[11:33] <knewt> and 1 unexpectedly succeeded subtest

[11:34] <Juerd> Shouldn't a CATCH { } block imply use fatal?

[11:34] <pdcawley> No.

[11:34] <kungfuftr> Juerd: nope, lack of a CATCH block should imply fatal?

[11:34] <pdcawley> Something could still be explicitly die/throwing.

[11:34] <Juerd> That's clear.

[11:36] <kungfuftr> you might also have lots of nested blocks and want to do the die/throw at a much higher level

[11:38] <pdcawley> (That being rather the point of using exceptions in the first place...)

[11:40] <Juerd> You're right.

[11:41] <Juerd> Now I go to the office

[11:41] <Juerd> To see if there's work for me.

[11:44] <ajs> message sent to list on fail / use fatal. Please send any corrections to my summary of the quandry.

[11:45] <ajs> heh, last night's update changed the behavior of my Parrot/factorial bug. Now it just calculates the factorial wrong ;-)

[11:55] <gaal> hi there.

[11:59] <ajs> Got my test case down to a simple reproducer: ./pugs -BParrot -e 'sub a($x){$x} say a(1)+1'

[12:00] <ajs> Now to figure out where the off-by-one problem is in picking $P registers in the PIR output

[12:17] <ajs> I just love writing code in a langauge I don't know in order to debug... it's like using an ice pick to pick up eggs

[12:20] <pdcawley> Hhe.

[12:53] <Limbic_Region> There is more than 1 way to help!!! http://use.perl.org/comments.pl?sid=26466&op=&threshold=0&commentsort=0&mode=thread&pid=40310#40323

[13:02] <scook0> Hey, does anyone know how to add type annotations to Haskell functions?

[13:02] <scook0> (Using the inferred type)

[13:02] <integral> the :: things?

[13:02] <theorbtwo> Well, the format for adding a type annotation is funcname :: type

[13:02] * integral just puts nonsense for the type, then copies what the compiler says it should be

[13:02] <theorbtwo> If you just say funcname :: a, and follow the error messages, you'll get there eventually.

[13:03] <scook0> That's how you did it?

[13:03] <scook0> I'll try that...

[13:03] <theorbtwo> If you want to cheat, and the function is exported, you can do ghc --show-iface=path/to/foo.hi | less, and find the signature there.

[13:09] <scook0> Aha! If you go into ghci, then :load the module, you can use :t to find the type.

[13:18] <mj41> WinXP, r2962 -  780/4861 subtests failed, 83.95% okay. 16 subtests skipped.

[13:19] <Limbic_Region> http://perlmonks.org/index.pl?node_id=455979  # GET INVOLVED WITH PUGS!!!!

[13:21] <mj41> Anybody clever enough for adding "for @array.values -> $val is rw { $val++ }"  t/statements/for.t ?  More important than OO for me :-).

[13:21] <Juerd> In case you have been hiding under a rock since before February, the Pugs project is giving us the ability to write Perl6 today. 

[13:21] <Juerd> </quote>

[13:22] <Juerd> Even if you have not been hiding under a rock, the Pugs project is still giving us the ability to write Perl 6 today.

[13:22] <Juerd> Limbic_Region: Use a colon, not a comma :)

[13:22] * integral thought VIM did that :-P

[13:23] <Limbic_Region> mj41 - you sure that doesn't work now?

[13:23] * Limbic_Region is pretty sure it got added

[13:23] <Juerd> mj41: @array.values is spelled @array

[13:23] <Juerd> Limbic_Region: I thought the 100 days were rather long

[13:23] <Limbic_Region> heh

[13:24] <Limbic_Region> well the days themselves were long - but given what has been accomplished it took no time at all

[13:28] <mj41> ok 27 - for @list -> $num is rw { $num++ }

[13:28] <mj41> not ok 28 - for @list.values -> $num is rw { $num++ }

[13:28] <mj41> not ok 29 - for %hash.values -> $val is rw { $val++ };

[13:28] <mj41> not ok 30 - for %hash.kv -> $key, $val is rw { $val++ };

[13:30] * Limbic_Region wonders what for @list.values does that for @list doesn't mj41

[13:30] <Limbic_Region> you indicated it was more important to you than OO was

[13:31] <Limbic_Region> AFAICT, they would do the same thing if both worked but since 1 does why squawk about the other?

[13:31] <mj41> autrijus said something about lvalue sub,  %hash.kv is important too

[13:32] <Limbic_Region> the %hash.values thing makes sense to me

[13:32] <Limbic_Region> not the array though

[13:33] <Limbic_Region> but I am still interested in knowing why it is more important to you than OO?

[13:33] <Limbic_Region> was the @array.values just an example and you really want something else that is similar?

[13:34] <mj41> because I wrote code when it was working --- http://wiki.kn.vutbr.cz/mj/attach/pugs/fool/tut.p6

[13:34] <Limbic_Region> Juerd - A bug test is simple: write what do and what you expect first:

[13:35] <Limbic_Region> that doesn't make a lot of sense to me?

[13:35] <mj41> yes example, I want "%hash.kv -> $key, $val is rw"

[13:36] <Limbic_Region> hey merlyn - welcome

[13:36] <merlyn> In response to your PM posting. :)

[13:36] <Juerd> Limbic_Region: Why?

[13:36] <pmichaud> hello, merlyn

[13:36] <Juerd> Hey merlyn!

[13:36] <Limbic_Region> *grin* - already getting desired effect

[13:36] <merlyn> wow.  hangin' with the UberCoolCats

[13:36] <mj41> I used .kv is rw, but now it is broken. Sorry, my English is too bad. :-(

[13:37] <merlyn> I'm not worthy. :)

[13:37] <Limbic_Region> "write what do and" - that just doesn't parse right for me Juerd - but I am under-caffeinated ATM

[13:37] <Limbic_Region> mj41 - that makes sense - sorry I can't help with that though - I don't speak Haskell

[13:37] <Limbic_Region> yet

[13:37] <mj41> :-0

[13:39] <Juerd> Limbic_Region: What wolud parse right for you?

[13:40] <ajs> mj41: There is a serious problem if you're using the parrot back-end with the use of return values right now. I'm working on tracking it down, but the symptom is that $P{n} gets the return value, but later on, $P{n-1} is read.

[13:40] <Limbic_Region> Juerd - I guess "write what to do and..." makes more sense to me - but you probably speak better English than me ;-)

[13:40] <Juerd> Limbic_Region: No, it's not what to do.

[13:41] <Limbic_Region> *shrug* - I have read the sentence several times and it doesn't sound right but I guess it's just me

[13:42] <Juerd> Perhaps past tense makes it more clear?

[13:42] <Juerd> What you did, and what you expected

[13:42] <Limbic_Region> yes

[13:42] <Limbic_Region> perfect

[13:43] <Limbic_Region> but you notice what word you added that made it clear

[13:43] <Limbic_Region> it isn't the tense

[13:43] <Limbic_Region> it is the word "you"

[13:43] <Limbic_Region> write what "you" do and ... - would also have worked for me 

[13:44] <Juerd> That was already there.

[13:45] <Juerd> Oh, no, the word is missing indeed.

[13:45] * Limbic_Region even copy/pasted

[13:45] <Juerd> Yeah, I don't know why I misread the paste as well.

[13:52] <mj41> "for @list.kv -> $key, $val is rw { $val++; say "$key : $val" }" is more meaningful

[13:52] <integral> *argh* GHC did something impossible :-(

[13:53] <Juerd> mj41: Name it @array then

[13:53] <Juerd> The name "list" is sort of like a promise you don't have a permanent association between indices and values

[14:01] <mj41> I replicated t/statements/for.t  ... so "my @list = (0..5);" is wrong name?

[14:07] <stevan> Limbic_Region++ # champion of advocacy

[14:07] <Juerd> mj41: I personally think the word 'list' should never be used as an array identifier 

[14:08] <Juerd> mj41: Unless it is the single slurpy list of a general purpose function (*@foo)

[14:08] <Juerd> mj41: Like in map's (&block, *@list)

[14:09] <Juerd> mj41: This all to avoid any confusion with lists, which are not arrays.

[14:11] <mj41> Juerd: ok, I think I remember Pugs with my @list = (0,,1); say @list.ref; prints "List" :-)

[14:19] <mj41> so Can I fix all tests? supervised s/list/array/ 

[14:19] <mj41>     my @pop = (1, 2, 3, 4);

[14:19] <mj41> -    is(+@pop, 4, 'we have 4 elements in the list');

[14:19] <mj41> +    is(+@pop, 4, 'we have 4 elements in the array');   

[14:19] <mj41> ok?

[14:20] <Juerd> mj41: Yes

[14:20] <integral> NB: you may need to make clean after r2968

[14:20] <Juerd> mj41: Or simpler: The array has 4 elements

[14:23] <mj41> and plural form? lists -> arrays, is it?

[14:24] <Juerd> Yes

[14:34] <mj41> "my @result = grep { ($_ % 2) }, @list; " is ok?

[14:39] <mj41> my $array_ref1 = ("foo", "bar", "baz");

[14:39] <mj41> -  isa_ok($array_ref1, 'List');

[14:39] <mj41> + isa_ok($array_ref1, 'Array');   ?

[14:52] <stevan> Limbic_Region++ # champion of advocacy

[14:54] <stevan> iblechbot: you read my mind (i was going to move =:= to t/operators too)

[15:12] <mj41> say (401, 201, 1).ref;   # List

[15:12] <mj41> my @a = (401, 201, 1); 

[15:12] <mj41> say @a.ref;  # Array

[15:13] <stevan> mj41: you really should put this code into a test

[15:13] <stevan> t/pugsbugs/ is a good place for them (assuming they are really bugs)

[15:14] <mj41> Juerd is our expert :-)

[15:14] <stevan> mj41: isa_ok($array_ref1, 'List'); is ok

[15:15] <stevan> because Array is derived from List (IIRC that is)

[15:15] <mj41> I think they are good.

[15:15] <stevan> this might be a bug 

[15:15] <stevan> say (401, 201, 1).ref;   # List

[15:15] <stevan> although I don't know for sure

[15:19] <ajs> stevan: what would you have expected from that expression?

[15:25] <Corion> I would be careful about exchanging isa_ok($foo, 'List'); and isa_ok($foo, 'Array'); #in either direction.

[15:25] <Corion> ... at least with Perl5 there are important differences and I assume there are differences in Perl6 too.

[15:26] <mj41> multi sub al ( List @a ) {    say 'l' ~ @a; }

[15:26] <mj41> multi sub al ( Array @a ) {    say 'a' ~ @a; }

[15:26] <mj41> al( (1..3) ); my @a = (1..3); al( @a );

[15:26] <mj41> prints   l1 2 3  \n  a1 2 3

[15:27] <Corion> mj41: Which looks to me as if Perl5 semantics survive in Perl6 in this case.

[15:28] <stevan> ajs: I am not sure, but I suppose it would be "Array"

[15:32] * pdcawley could go with 'list' when it's actually describing: (a => (b => (c => undef)))

[15:33] <Corion> pdcawley: That's Pairs. And it tshould be pronounthed like thith.

[15:33] <pdcawley> It's a lisp (as in LISt Processing) style list.

[15:33] <pdcawley> So I'll go with 'list' when I'm using it as one.

[15:40] <stevan> pdcawley: I think the => in your example was confusing

[15:41] <stevan> (a : (b : (c : undef))) 

[15:42] <Corion> Dotted pairs 4 life, dawg!

[15:42] <stevan> :D

[15:43] <osfameron> I thought you could just do a=>b=>c=>undef ?

[15:43] <stevan> osfameron: those would end up being nested pairs

[15:43] <osfameron> ah, is that decided?

[15:43] <Corion> osfameron: We are reminiscencing on our time spent with Lisp :)

[15:44] <osfameron> I posted the question to p6l and it seemed that it would do the right, um, lispy thing

[15:52] <Corion> r2975 - 4794 ok, 84 failed - http://datenzoo.de/pugs/win2k.html # where do the 4 additional fails come from? Are these the unlink()/Win32 fails?

[15:52] <mj41> perlbot: nopaste

[15:52] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[15:53] <pasteling> "mj41" at 147.229.221.107 pasted "List vs. Array" (41 lines, 1.1K) at http://sial.org/pbot/10070

[16:00] * Corion restarts the smoke

[16:05] <Corion> C:/DOKUME~1/ADMINI~1/LOKALE~1/Temp/ghc1880.hc:3256: warning: implicit declaration of function `u_iswalpha'

[16:10] * wilx clubs Corion for he uses Administrator account for work.

[16:10] <Corion> wilx: Naah, it's for play :)

[16:11] <PerlJam> autrijus++ still quick on the implement.

[16:11] <autrijus> Juerd: your bug is fixed. sorry. :)

[16:11] <PerlJam> I just read Larry's message and I come here et voila, it's done!

[16:12] <autrijus> :)

[16:12] <autrijus> Juerd: however, I'm not so sure about this

[16:12] <autrijus> (1)[0]

[16:12] <autrijus> vs

[16:12] <autrijus> (1).[0]

[16:12] <autrijus> vs

[16:12] <autrijus> 1.[0]

[16:13] <autrijus> should all three be "1"? all three be castfail?

[16:13] <autrijus> or is ()[] a special syntax?

[16:13] <wilx> Hmm, aren't we just changing Perl5's dark corners for Perl6' dark corners? :)

[16:14] <autrijus> I sure hope we're not :)

[16:14] <PerlJam> wilx: We're always doing that.  hopefully perl6 has fewer though.

[16:14] <Juerd> autrijus: Thanks for this important fix :)

[16:14] <PerlJam> autrijus: If we keep the analogy that perl is like english, we must have dark corners *somewhere*  ;)

[16:14] <autrijus> np. I'm reverting (1)[0] to return 1, though

[16:14] <autrijus> instead of castfail

[16:14] <Juerd> autrijus: (1)[0] adds . because two bracketing operators hit eachother, 1.[0] is different

[16:15] <autrijus> how is (1) different from 1  again?

[16:15] <kungfuftr> Juerd: was it you who found Perl Medic disappointing?

[16:15] <wilx> Hmm, (1) makes a literate list/array?

[16:15] <autrijus> <- firmly of the "() is merely precedence fixer" camp

[16:15] <Juerd> autrijus: it's not

[16:15] <wilx> s/literate/literal/

[16:15] <Juerd> autrijus: (1,).[0] versus (1).[0]

[16:15] <autrijus> so (1) is always parsed as (1,) ?

[16:16] <PerlJam> wilx: I seem to recall that Larry was going the way of python on that one (i.e. you need a comma)

[16:16] <autrijus> right. so (1).[0] ought to be castfail

[16:16] <Juerd> autrijus: Without anything special, () just groups, right?

[16:16] <autrijus> and (1,).[0] is what one wants

[16:16] <autrijus> is that the idea?

[16:16] <Juerd> autrijus: Castfail, or perhaps be smart, because it can't mean anything else

[16:16] <autrijus> but if be smart, then 1.[0] needs to be smart as well

[16:16] <Juerd> Hm..

[16:16] <autrijus> (I'm arguing the be smart is probably the right choice, btw.)

[16:16] <kungfuftr> moo?

[16:17] <Juerd> autrijus: I can't choose

[16:17] <autrijus> rand(2)

[16:17] <Juerd> Please make that int rand 2 :)

[16:17] <Juerd> Otherwise there are still way too many possibilities ;)

[16:18] <autrijus> ;)

[16:18] <wilx> Hmm..

[16:18] <autrijus> but anyway. flattening.t was testing that

[16:18] <wilx> Writing 1.[0] to get 1 is odd.

[16:18] <autrijus> my @a = (1..10); @a[0][0]

[16:18] <autrijus> is undef

[16:18] <wilx> It should be error.

[16:18] <autrijus> that is patent nonsense.

[16:19] <autrijus> it should either throw an exception, or return 1, imho.

[16:19] <Juerd> autrijus: Isn't it so that postfix [] provides array context to its LHS, in which () becomes equivalent to []?

[16:19] <Juerd> And 1 is simply wrong?

[16:19] <autrijus> Juerd: ah but what about @a[0][0] ?

[16:20] <autrijus> and also, note that in lhs, it's currently just (Val (VInt 1))

[16:20] <autrijus> because that's what you get when you write (1)

[16:20] <Juerd> autrijus: @a[0] goes well, @a[0][0] is a type error, because 1 is not an array

[16:20] <autrijus> if you want the syntactic comma, (1,) is needed

[16:20] <Juerd> BUT - beware of a possible &Num::postcircumfix:<[ ]>

[16:20] <autrijus> sure. assuming it doesn't exist

[16:21] <autrijus> ok. so I gather you are favoring type error for both 1.[0] and @a[0][0]?

[16:21] <Juerd> I'm not sure "type error" is correct

[16:21] <Juerd> But error, yes

[16:21] <Juerd> I'm more thinking it should complain about !.can(pcf:<[ ]>)

[16:21] <autrijus> yeah sure

[16:21] <autrijus> that's what I mean. mmd failure etc.

[16:22] <Juerd> Oh, yeah, crap

[16:22] <Juerd> [] is multi, not method

[16:22] <Juerd> I still think that's a mistake :)

[16:22] <autrijus> *shrug* :)

[16:22] <autrijus> i.e. I sympathize but I can't see where it makes a difference

[16:23] <Juerd> In error reporting, and in syntax used to override.

[16:23] <Juerd> class MyArray is Array { ... }

[16:23] <Juerd> It would be nice if you could do all the overriding in the class, with methods

[16:23] <Juerd> Rather than methods in the class, and other things with multisubs

[16:23] <autrijus> I thought if you define methods, they get looked up first, then fallback to mmd

[16:23] <Corion> r2981 - http://datenzoo.de/pugs/win2k.html - 164 failed ... that's a lot ...

[16:23] <autrijus> i.e. invocant's method gets looked up first

[16:23] <autrijus> then multisubs

[16:24] <autrijus> Corion: yes, discussing that with juerd currently

[16:24] <Juerd> autrijus: For method syntax, but I don't know if the same behaviour is defined for postcircumfix operators

[16:24] <autrijus> Corion: lots of code depend on something equivalent to (1)[0]

[16:24] <Corion> Aaaah

[16:24] <autrijus> which has just been made illegal

[16:24] <autrijus> and which I'm not exactly sure is a good idea

[16:24] <Juerd> merlyn: You invented the list slice, right?

[16:24] <autrijus> Juerd: I think they need to be consistent on this...

[16:24] <Juerd> merlyn: What's your opinion about this?

[16:25] * Juerd tries to separate neodymium magnets

[16:25] <autrijus> fwiw, (1)->[0] in p5 means @1[0] in p6.

[16:25] <autrijus> I'm sure we don't need to keep _that_ behaviour.

[16:25] <autrijus> or at least, I sincerely hope

[16:26] <Juerd> I agree.

[16:26] <PerlJam> autrijus: I think that (1)[0] should DTRT (i.e. parse as if it were (1,)[0]

[16:26] <Juerd> I HAD THEM SEPARATED FOR A SECOND

[16:26] <Juerd> stupid magnets

[16:26] <autrijus> PerlJam: so () normally groups, but if followed by [] or .[], it magically constructs a list

[16:27] <PerlJam> autrijus: yes.  IMHO anyway

[16:27] <autrijus> what about (1){1} ?

[16:27] <Juerd> PerlJam: The consistent way to do that is to say every scalar does Array

[16:27] <PerlJam> that should carp

[16:27] <autrijus> Juerd: right. and then you get 1.[0][0][0] == 1

[16:27] <Juerd> PerlJam: Because () are no longer special syntax when not postcircumfix

[16:28] <Juerd> autrijus: Yes. Interestingly, if $/[0] is the entire match, then $/[0][0][0] 

[16:28] <autrijus> Juerd: I'm trying to choose between the three evils.

[16:28] <Juerd> autrijus: Yes. Interestingly, if $/[0] is the entire match, then $/[0][0][0] ~~ $/ much like how 1.[0][0][0] ~~ 1 :))

[16:28] <autrijus> 1. specialise ()[] to parse as (,)[]

[16:28] <autrijus> 2. scalars are singleton lists, so ()[] naturally works

[16:28] <Juerd> Allowing a single value to act like an array is useful

[16:28] <autrijus> 3. make (1)[0] die horribly.

[16:29] <Juerd> But I'm not sure wether it'd be annoying for error reporting perhaps

[16:29] <osfameron> 2 please!

[16:29] <PerlJam> autrijus: without a ruling from $Larry (or @Larry even) #3 is the safest  :-)

[16:29] <Juerd> autrijus: My current preference is 2

[16:29] <autrijus> 42 tests depend on #2.

[16:29] <Juerd> PerlJam: I don't think we should pick safest when safest isn't very useful

[16:30] <PerlJam> Juerd: I agree.

[16:30] <osfameron> what would be the reason for breaking #2 which works in P5 and has some uses ?

[16:30] <Juerd> PerlJam: Larry can overrule anyway, and even his own decisions, and waiting sucks.

[16:30] <Juerd> autrijus: That does kind of indicate it's the expected dwommery

[16:30] <autrijus> ok. anyone want to try summarising this to p6l to ask for confirmation?

[16:30] <autrijus> Corion: ok... 42 more tests pass now :)

[16:30] <Corion> autrijus: :))

[16:34] <PerlJam> osfameron: um ... what's the test case for #2 to work in perl5?

[16:34] <Juerd> grin

[16:34] <autrijus> PerlJam: print ((1)[0])

[16:35] <PerlJam> autrijus: um ...  that supports #1, but not necessarily #2

[16:35] * PerlJam scrolls back up to make sure he was reading right

[16:35] <autrijus> PerlJam: you was reading right indeed.

[16:36] <autrijus> try this then

[16:36] <autrijus> print (INC->[0])

[16:36] <autrijus> print('INC'->[0]) too.

[16:36] <autrijus> that is a twisted form of #2 :)

[16:36] <autrijus> (which I agree should die)

[16:36] <autrijus> now the question is, if anything should take its place.

[16:37] <autrijus> so perl5 currently do #1 and a twisted weird form of #2. perl6 can either keep this, or unify them into one of #1/#2/#3.

[16:38] <PerlJam> autrijus: I'll continue to vote #1 (so that when @Larry agrees, I can say "I told you so!"  ;-)

[16:38] <autrijus> PerlJam: do you have five minutes to write this up to p6l? :)

[16:39] <Juerd> I think #2 is the best for the language as a whole

[16:39] <PerlJam> autrijus: sure.

[16:39] <autrijus> PerlJam++

[16:39] <Juerd> sub foo (@bar) { ... }

[16:39] <Juerd> foo($config<foo>)

[16:40] <Juerd> BEGIN { $config = { map { ...; $key => (/\s/ ?? $val :: $val.split) } ... }; }

[16:40] <Limbic_Region> seen Jonathan

[16:40] <jabbot> Limbic_Region: Jonathan was seen 2 days 14 hours 46 minutes 35 seconds ago

[16:40] <Limbic_Region> seen Jonathan_

[16:40] <jabbot> Limbic_Region: Jonathan_ was seen 7 days 23 hours 32 minutes 5 seconds ago

[16:41] <Limbic_Region> autrijus et all - is there a known list of platforms that Pugs works on?

[16:41] <Limbic_Region> I got a question at the Monastery and would prefer to point to a reference

[16:41] <Corion> Win32 and Linux.

[16:41] <Corion> (and *BSD)

[16:41] <Corion> "Everywhere that GHC compiles to"

[16:41] <Limbic_Region> ok

[16:42] <Corion> (and it assumes that Perl5 is there as well, but Perl5 > GHC)

[16:42] <Corion> GHC 6.4

[16:42] <autrijus> http://haskell.org/ghc/docs/latest/html/building/sec-port-info.html

[16:42] <Juerd> Limbic_Region: Every platform that can run bochs, vmware, virtualpc, etc :P

[16:43] <autrijus> or, rather, http://haskell.org/ghc/contributors.html

[16:44] <stevan> works on Mac OSX too :)

[16:45] <Corion> stevan: OSX is merely the commercial decline of *BSD :)

[16:45] <stevan> Corion: true dat

[16:45] <Limbic_Region> thanks!

[16:46] * Limbic_Region is going to start taking bets as to how long it takes merlyn to stop lurking and start actively contributing

[16:46] <Juerd> Limbic_Region: A few hours

[16:47] <autrijus> merlyn is here? since when?

[16:47] <Limbic_Region> since I wrote the "Get Involved With Pugs" article

[16:47] <Juerd> 15:39 -!- merlyn [merlyn@blue.stonehenge.com] has joined #perl6

[16:47] <Juerd> 15:40 < Limbic_Region> hey merlyn - welcome

[16:47] <Juerd> 15:40 < merlyn> In response to your PM posting. :)

[16:47] <autrijus> wow, 3 hours ago

[16:47] <autrijus> Limbic_Region++

[16:48] <Limbic_Region> [09:36] <merlyn> In response to your PM posting. :)

[16:48] <Juerd> By the way - wtf? 3 hours? Time goes FAST

[16:48] <Corion> r2982 - http://datenzoo.de/pugs/win2k.html - 4757 ok, 122 failed

[16:48] <Corion> He just wants to hang out with all the cool people :)

[16:48] <stevan> Corion: not just cool,.. but uber-cool

[16:48] <Limbic_Region> Corion - that's why I started lurking too - now I am addicted

[16:48] <stevan> Juerd: time moves faster in #perl6

[16:49] * Limbic_Region still doesn't contribute that much but every little bit helps

[16:49] <Limbic_Region> it's called time dilation

[16:49] <Juerd> stevan: Apparently!

[16:49] <Corion> It's time we get Junctions working 100%, so we can work in multiple dimensions and get it done in constant time :)

[16:49] <Limbic_Region> it explains a lot ;-)

[16:50] <Limbic_Region> Corion - see http://perlmonks.org/index.pl?node_id=455283

[16:50] <autrijus> iblech: will fix * in a bit

[16:52] * Corion forgot about the steamroller operator. Cute operator names are important ;)

[16:52] <Juerd> autrijus, PerlJam: I just thought of ($aref)[0], which kind of rules out #1

[16:54] <Juerd> Unless we really want that to return just $aref, which means () for grouping is no longer working with postfix [], in that (something that returns an array reference)[0] will return the arrayreference, and not its first element

[16:54] <PerlJam> Juerd: yeah, I see that.

[16:56] <PerlJam> I'm not firmly in the camp of wait-and-see-what-@Larry-says  :)

[16:56] <PerlJam> s/not/now/

[17:01] <Juerd> We're all in that camp

[17:01] <Juerd> That doesn't mean we can't have personal preference

[17:01] * revdiablo notices the flattening bugs have been magically fixed

[17:01] <revdiablo> woo :)

[17:01] * autrijus thinks that "iblechbot" is a fitting nickname

[17:02] <autrijus> slurpy * fixed

[17:02] <Corion> I'm in the camp of "Implement, and see if it survives" :)

[17:03] <revdiablo> hmm, who's in charge of the debian/ files?

[17:03] <autrijus> scw

[17:04] <revdiablo> the version number is out of date...

[17:04] <revdiablo> I can commit the new changelog to fix it, just don't wanna step on any toes

[17:04] <autrijus> just fix it :)

[17:04] <autrijus> toestepping does not exist with a version control system

[17:06] <Corion> ... which reminds me, I should install svk ...

[17:06] <revdiablo> true, true. I'm still not used to it. :)

[17:06] <autrijus> revdiablo++

[17:07] <Limbic_Region> [13:04] <autrijus> toestepping does not exist with a version control system

[17:07] <Limbic_Region> true or not - that is the anarchist in him talking

[17:08] <autrijus> :)

[17:08] <revdiablo> autrijus: in your PM reply about the flattening, what's this corner case you speak of?

[17:08] <revdiablo> on p6l somewhere?

[17:09] <autrijus> revdiablo: PerlJam is supposed to write it up soonish

[17:09] <autrijus> revdiablo: it's about the semantics of (1)[0]

[17:09] <autrijus> oh, it's in http://www.nntp.perl.org/group/perl.perl6.language/21044

[17:09] <Juerd> autrijus: That's already been sent by PJ and has already received several responses

[17:10] * autrijus mumbles something about accelerated temporal movements

[17:10] * Corion sends the HypnoToad to put autrijus to sleep.

[17:10] <stevan> class Time::Space { method warp { ... } }

[17:12] * Limbic_Region hasn't watched TRHPS is some time

[17:14] <autrijus> iblech++ # dealing with the fallout

[17:14] <autrijus> smoke back to a more respectable 94

[17:15] <Limbic_Region> heh - let's turn failing smoke tests into a golf contents

[17:15] <ajs> that's an old topic. Larry had quite a bit to say about that WAY BACK when the semantics of , and => were first introduced for P6

[17:15] <Limbic_Region> s/contents/contest/

[17:15] <Limbic_Region> person fixing most failing tests resulting in lowest overal score wins

[17:15] <autrijus> ajs: ...yet it's not noted in A/S/E

[17:15] <autrijus> or, afaics

[17:16] <ajs> Let me go find the thread, and perhaps we can short-circut a lot of discussion. I recall it being very informative

[17:16] <autrijus> cool

[17:16] <autrijus> ajs++

[17:18] <knewt> anything since 2982 likely to get this looking better? [[ Failed 33/250 test scripts, 86.80% okay. 115/4873 subtests failed, 97.64% okay. ]]

[17:19] <autrijus> knewt: yes, iblech and I has been repairing them left and right

[17:19] <autrijus> r2987 is markedly better

[17:20] <autrijus> the $1->$0 change is large

[17:20] <knewt> heh, cool. another long build run then :)   although it doesn't take as long as ghc did

[17:20] <nothingmuch> autrijus++

[17:21] <knewt> my computer chugged away all night building ghc packages for me *g*

[17:21] <nnunley_> cd

[17:22] <revdiablo> to get the PGE, I need parrot, right?

[17:22] <autrijus> revdiablo: right.

[17:22] <ajs> Some info in http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/54a1135c012b97bf/98bcf09e00646b1b?q=comma&rnum=2&hl=en#98bcf09e00646b1b

[17:23] <Limbic_Region> revdiablo - shame on you - as long as I went on and on about Parrot advocacy in #perl you are just NOW installing it?

[17:23] <revdiablo> Limbic_Region: well, uh, er

[17:23] <Khisanth> heh

[17:24] <nnunley_> Blah.  Any reason why haskell wouldn't be able to find src/Eval

[17:24] <autrijus> nnunley_: you have old version of hs-plugins?

[17:24] <revdiablo> Limbic_Region: I built parrot a few times, but I couldn't find anything fun to do with it. unfortunately, PASM isn't quite as fun as Perl6 :)

[17:24] <Khisanth> Limbic_Region: so what is this Parrot you are refering to? new pet? ;)

[17:24] <nnunley_> How old is old?

[17:24] <autrijus> 20050410 or later

[17:25] <knewt> i couldn't get anything later than 20050424 of hs-plugins to build

[17:25] <autrijus> I've heard that hsplugins is broken for a few days

[17:25] <nnunley_> Mine is 20050424

[17:25] <autrijus> I'm on 0417

[17:26] * nnunley_ reinstalls hs-plugins, just to be sure.

[17:26] * nothingmuch tries to get up

[17:26] <knewt> Limbic_Region: i've built parrot, but currently have no idea how to do a DESTDIR equiv for it, so currently it's not installed and is just being used in building pugs

[17:26] <nnunley_> Bah.  I think darwinports tryed to help.

[17:26] <nnunley_> s/y/i/

[17:30] <ajs> This is a better refernece (and the one that I'm recalling) where Larry says that $a=(10) gets 10 because () isn't magial. http://groups-beta.google.com/group/perl.perl6.language/browse_frm/thread/24ef8f421548b806/f119fc38427f9f3b?q=comma+one+element&rnum=2#f119fc38427f9f3b

[17:31] <autrijus> so ok, (10) is not magical. what does 10.[0] do, then?

[17:37] <ajs> 10.[0] should be an error, I would think, since Int.whatever[]is:[] is undefined

[17:37] <ajs> Well, more to the point Any.whatever[]is:[] is undefined

[17:38] <ajs> But (10)[0] behaves according to context, and thus should work as you expect (resulting in 10)

[17:39] <ajs> ()'s (at least back then) were deemed to be very slightly magical in these cases: () - null list; (0) - dependent on context; (LIST) - simple precedence management, no other effect.

[17:44] <autrijus> (0) depends on context?

[17:44] <autrijus> so (2+3) too?

[17:44] <ajs> yeah, at least it did in 2002

[17:44] <autrijus> as does pretty much all (term) without comma in them?

[17:44] <clkao> autrijus: so are you in london yet?

[17:44] <autrijus> clkao: spiritually

[17:45] <ajs> so @a=(2+3) would be the same as @a=(5)

[17:45] <ajs> hey, this is just me trying to channel old $Larry posts. I'm sure I'm wrong ;-)

[17:46] <autrijus> no, actually that makes some kind of strange sense

[17:47] <Corion> Aieee - svn is unreachable again ;)

[17:48] <ajs> It's as if millions of voices... bah, you know the punch line ;-)

[17:48] <autrijus> yeah. and I'm afraid it's me who killed it ;)

[17:48] * autrijus curses NFS

[17:48] <autrijus> oh well. it will be back in, like, 7 hours

[17:49] * ajs returns NFS.bless($svn)

[17:49] <Corion> Ah, no worries - I'm not productive today anyway, and that gives me time to focus on other stuff. Like, sleep(). Or outside(). Or cook().

[17:49] <Corion> Mmmm. cook().

[17:49] <autrijus> right. or forme, work()

[17:50] <Corion> Perl6 should get a work() builtin. So we can say work and work and work and die.

[17:53] <autrijus> .lived() und .laughed() ant .loved() end left(); Forsin(). :)

[17:53] <Juerd> Corion: s/die/fail/. Upgrade yourself to 2005 :)

[17:54] <Juerd> Nowadays, it's no exception to fail at work :)

[17:54] <Corion> Juerd: work; fail; next work; fail; work; END { die }

[17:54] <Juerd> Hm

[17:54] <stevan> for (0 .. Inf) { .death and .taxes() } 

[17:54] <Juerd> "failure can be an exception"

[17:54] <clkao> svn dead

[17:54] <clkao> see, svk is still useful

[17:55] <Corion> clkao: :)

[17:55] <stevan> but it's written in perl :P

[17:56] <Limbic_Region> Khisanth - old pet actually, I stopped active involvement around late Nov early Dec

[17:56] <clkao> i share the same hate. but what else can you use it to boostrap the development of perl6?

[17:56] <PerlJam> autrijus:, Juerd: Craig DeForest's email puts me over in Juerd's camp now.  

[17:56] <Limbic_Region> revdiablo - pasm isn't quite as fun as Perl6 - are you nuts?

[17:57] <Khisanth> PerlJam: you're justo over there for the food

[17:57] <Limbic_Region> you don't take some kind of perverse pleasure in having an OO assembly language?

[17:57] <Juerd> PerlJam: I have a camp? NEAT!

[17:57] <revdiablo> Limbic_Region: oh, I definitely think it's cool, in theory

[17:57] <clkao> so i can rewrite it in perl6

[17:57] <stevan> PerlJam: watch out for the crazy guy who lives in the cabin on the lake

[17:57] <autrijus> clkao: we have OO now :)

[17:57] <PerlJam> Juerd: yeah, but you need to build a fire and get more tents

[17:58] <stevan> autrijus: speaking of OO, how do i get the invocant in a method?

[17:58] <Juerd> PerlJam: Pugs keeps us warm

[17:58] <stevan> you are burning Pugs?

[17:58] <Juerd> stevan: method ($self: $arg1, $arg2) { ... }

[17:58] <stevan> or using them as tents?

[17:58] <PerlJam> Juerd: friction from all of the patches as they are applied?

[17:58] <stevan> Juerd: that doesnt work currently though

[17:58] <Juerd> PerlJam: It's a warm community.

[17:58] <Juerd> stevan: Does any OO work then?

[17:59] <stevan> Juerd: sorta :)

[17:59] <Khisanth> Limbic_Region: never saw much reason to be excited about Parrot

[17:59] <Limbic_Region> autrijus - WRT what OO support currently exists in Pugs - using two modules with the same methods is no problem right? 

[17:59] <stevan> Juerd: I actually started cataloging what works and what doesnt

[17:59] <clkao> why does make test want to link pugs every time?

[17:59] <Limbic_Region> Khisanth - really?  Huh.  It has been producing working code for a long long time now

[17:59] <Juerd> stevan: In the repo?

[17:59] <autrijus> Limbic_Region: I think so

[18:00] <stevan> Juerd: no not yet, I had to do $work, so i got distracted

[18:00] <Corion> clkao: "make test" makes an optimized Pugs. I use "make unoptimized" together with prove.

[18:00] * Limbic_Region likes the fact that coroutines in Parrot do what he thinks unlike Perl6's 

[18:00] <clkao> oh nnunley told me because it's ingy-ware

[18:00] <Limbic_Region> ok autrijus - I might port a few more things to p6 now

[18:00] <Juerd> svn borked - great time to try svk

[18:00] <clkao> i meant even if i run make before make test, why does it want to link again

[18:00] <Juerd> Can someone tell me how to checkout?

[18:01] <clkao> only if you have mirrored it with svk?

[18:01] <Juerd> (i.e. the url or whatever it uses)

[18:01] <stevan> autrijus: method invocants?

[18:01] <Juerd> Oh, the server is dead entirely?

[18:01] <Corion> Juerd: I think autrijus killed the NFS

[18:01] <PerlJam> Khisanth: parrot is pretty neat.  I wrote a glob parser for PGE last night.  It went quite smoothly (and I hadn't really written pasm in probably close to a year)

[18:01] <clkao> it shuld be easy for mirroring from anyone who has mirrored

[18:02] <PerlJam> well, I wrote a first-draft glob parser anyway

[18:02] <clkao> (!)

[18:02] <knewt> ok, cool. with 2987 i'm down to 30 failed tests with 82 failed subtests

[18:02] <clkao> it seems so much fun

[18:03] <autrijus> Juerd: I'll give you somewhere else to checkout. a sec

[18:03] <Limbic_Region> problem with Parrot (or at least my problem) was that in addition to learning PASM I also had to improve my non-existant C fu

[18:03] <autrijus> I think PIR is nice enough, btw.

[18:03] * Juerd is going to try and get his matrix.p6 working

[18:03] * autrijus proceeds to commit some more .pir code into src/pge/

[18:04] <Juerd> Or at least have it build the rule. (64 kB regex in perl 5 - thus much larger even as a Perl 6 rule!)

[18:04] <PerlJam> Limbic_Region: Really?  I didn't think that at all (but then I probably already have the requisite C-fu)

[18:05] <Limbic_Region> PerlJam - I never bothered to develop in C so I didn't really get used to it

[18:05] <Khisanth> Limbic_Region: that fact it can run stuff isn't a reason to be excited about it :)

[18:05] <PerlJam> Khisanth: what would be a reason to get excited about it?

[18:06] <Limbic_Region> different strokes for different folks I guess

[18:06] <Limbic_Region> I guess I joined because I was a bit like merlyn - wanting to hang out with the kool kids

[18:06] <Limbic_Region> and just like Pugs - after seeing what was being done and how fast - I got addicted/excited

[18:06] <Juerd> I guess I joined because. Hm, I don't know. Things started with autrijus asking lots and lots of questions ;)

[18:06] <Juerd> That feels like years ago now.

[18:07] <Juerd> While it has been only months.

[18:07] <Limbic_Region> of course - with the disapearance of Dan and the squabbling on the list about how to proceed WRT Python support - I didn't have a hard time leaving

[18:07] <PerlJam> Juerd: welcome to our time dilation! :)

[18:07] <Juerd> PerlJam: But just a moment ago, time went fast. Now it has returned to slowness again? Oh dear.

[18:07] <PerlJam> Limbic_Region: squabbling on the list?  Wasn't it just sam and leo?

[18:07] <Khisanth> PerlJam: for Parrot in particular? hard to say didn't have much interest from the start and it never really moved

[18:07] <stevan> I started because wanted Perl6, and Ruby|Python|Java|C# was starting to look attractive

[18:08] <Khisanth> PerlJam: the fact that it was able to run everything except Perl for quite a while didn't really help the excitement :)

[18:08] <stevan> Juerd: maybe the svn server is the source of the time-distortion

[18:08] <Juerd> stevan: Are you trying to avoid Ruby? It's a nice language.

[18:08] <Limbic_Region> PerlJam - pretty much those two but it was really anyone and Leo

[18:08] <stevan> Juerd: I like it too

[18:08] <Limbic_Region> no offense to Leo - just a lot of people seemed to disagree with him

[18:09] <stevan> Juerd: but $work has plenty invested in perl and I really didnt want to switch if I didnt have to

[18:09] <Juerd> stevan: I think that during a day, things go fast. But everything more than 24 hours ago feels like three times as long ago as it really was.

[18:09] <PerlJam> Khisanth: parrot was interesting in an academic sort of way to me until I saw how quickly people wrote compilers and how easy it was.  now that we have pugs+pge I find it even more interesting because I now really believe it can accomplish its goal of being the platform for perl6 :)

[18:09] <Limbic_Region> PerlJam - and I am not sure how much of that was a communications problem anyway

[18:09] <stevan> Juerd: doppler effect :)

[18:11] <stevan> Juerd: basically if I have to re-write our codebase, I would rather do it in perl6

[18:11] <PerlJam> Limbic_Region: some communications problems, but also leo's goals seem to be different from other people's goals.

[18:11] <PerlJam> Limbic_Region: well, maybe not goals as much as priorities.

[18:11] <Limbic_Region> exactly

[18:11] <Limbic_Region> in any case - I think chip has things under control

[18:12] <Limbic_Region> seen chip

[18:12] <jabbot> Limbic_Region: chip was seen 32 days 23 hours 5 minutes 56 seconds ago

[18:12] <Limbic_Region> that doesn't sound right

[18:12] <PerlJam> Juerd: you should try staying away from pugs for more than a day and then coming back.  It's like a whole new universe was created while you were away. 

[18:12] <Juerd> PerlJam: I have, and it is.

[18:12] <Juerd> PerlJam: Imagine the feeling I had when trying pugs again after weeks.

[18:12] <Juerd> Even though I had been following developments.

[18:14] * Limbic_Region still laughs when he thinks about hardburn's excuse for not getting involved with Pugs

[18:14] <autrijus> hm?

[18:14] <Limbic_Region> Him:  "last time I checked, it didn't have feature X"

[18:14] <Limbic_Region> Me:  "When was the last time you looked"

[18:14] <Limbic_Region> Him:  "A couple of weeks ago I guess"

[18:15] <Limbic_Region> IIRC, that feature was OO

[18:15] <Limbic_Region> so now I will have to /msg him to stop making excuses

[18:15] <Juerd> I think it's a good idea to not think of OO as a single feature

[18:15] <Juerd> But who am I

[18:15] <ajs> Juerd: I firmly agree. OO is about 20 features, 3-5 of which are large

[18:16] <Limbic_Region> I shouldn't have used quotes there as it was a paraphrase

[18:16] <Limbic_Region> it is more likely he said "OO support" and not "feature X"

[18:16] *** Aankh|Clone is now known as Aankhen``

[18:16] <knewt> yay, i have pugs installed and running :)

[18:17] <Juerd> knewt: Congrats

[18:18] <knewt> Juerd: and down to only 82 failing subtests now :)

[18:18] * Limbic_Region wanders off for $work

[18:23] <knewt> heh, running sendmoremoney outputting to the terminal takes 4s for the 2nd calc, whereas redirecting to a file only takes 1s. shows how much the terminal output slows it down

[18:25] <Juerd> For a better test, redirect to /dev/null

[18:25] <Juerd> (NUL in dos)

[18:26] <knewt> ooh, i like the mandelbrot

[18:27] <autrijus> you're going to like it more running with -BParrot :)

[18:27] <knewt> pugs: cannot cast from VError "fnord" (NonTerm (MkPos "sendmoremoney.p6" 1 1 1 1)) to [Char]

[18:28] <knewt> that's trying to run sendmoremoney.p6 with -BParrot

[18:28] <knewt> heh. oh yes. mandelbrot with -BParrot is just a tad faster :)

[18:28] <autrijus> it's but a shadow of the speed of new parrot codegen :)

[18:29] <autrijus> but I'll probably have no time to work on it until the two weeks in Leo's house next month.

[18:29] <knewt> you're going to be at the Austrian Perl Workshop, right?

[18:29] <autrijus> yeah

[18:29] <autrijus> my hope is to get the codegen monad completely unified with evaluator in that two weeks

[18:29] <autrijus> so that whenever we support a new feature in interpreter, it gets reflected in compiler instantly

[18:30] <knewt> i'm (unless something happens) going to be there as well. need to find crash space still though

[18:30] <autrijus> cool

[18:30] <knewt> at worst i could possible crash at my relatives out there

[18:30] * Juerd so hates that he has three things he all three wants to attend, around june 10th

[18:30] <Juerd> Which is also my birthday

[18:30] <Juerd> Argh.

[18:31] <Juerd> There's one thing I'm required to go to, making the choice easy.

[18:34] <Juerd> Hm - if the thing juni 10th starts in the evening, which I think is likely, I can perhaps be crazy and drive to austria the 8th and back the 10th

[18:35] <Juerd> I wonder how long a drive it is

[18:35] <Corion> Juerd: Consider flying ;)

[18:35] <Juerd> 10 hours - no, that's madness

[18:36] <Juerd> Corion: Isn't that very expensive?

[18:36] * knewt is going by train. 12 hours worth of travel each way. ouch.

[18:36] <Corion> Juerd: Err, yes. Well, actually, it might be on par with the train. But still very expensive, yes.

[18:37] <Corion> Unless you find something like RyanAir, or EasyJet or whatever.

[18:37] <Aankhen``> Is the SVN server at openfoundry.org down?

[18:37] <autrijus> yes. I'm switching main repo for the next 7 hrs

[18:37] <autrijus> a sec.

[18:37] <Aankhen``> Alright.

[18:38] <Aankhen``> What's the URI for the new/alternate repository?

[18:38] <autrijus> it's the "mirror" listed in pugscode.org main page

[18:39] <Aankhen``> OK.

[18:43] <Juerd> Corion: None of the cheap ones go to austria

[18:43] <Juerd> hm, 600 euros. No, sorry, not this year :)

[18:49] <Juerd> Only 300 if I leave one day earlier

[18:49] <Juerd> Weird

[18:49] <knewt> ouch. i think the 190 euros to get from hamburg -> wien and back by train is bad enough

[18:49] <Juerd> I haven't looked at train options yet

[18:50] *** autrijus changes topic to: Fallback repos: http://svn.perl.org/perl6/pugs/trunk/ | pugscode.org <Overview Journal Logs> | pugs.kwiki.org

[18:51] <autrijus> can someone test if it builds clean there?

[18:51] <autrijus> esp with PGE

[18:51] <autrijus> I've deleted PGE-Hs.pbc and did lots of fixes

[18:51] <autrijus> ("there" means the fallback repo)

[18:52] * knewt wonders if he can svk mirror --relocate to the fallback

[18:52] <clkao> if they were mirrored from each other, then yes

[18:53] <knewt> bah. "uuid is different at ..."

[18:54] <clkao> hate

[18:54] <autrijus> just re checkout :-/

[18:55] <clkao> autrijus: how was the mirror created?

[18:55] <clkao> mirroring or smerging?

[18:56] <autrijus> clkao: smerging

[18:56] <clkao> then you cna't mirror --relocate. bt but you can just mirror that too

[18:57] <autrijus> that's what I did.

[18:57] * clkao <- talks to knewt 

[18:57] <knewt> hmm. i guess don't pull the history of the fallback then

[18:57] <autrijus> yeah. just the head

[18:57] <knewt> it'll all get merged back into the main repo when that's back up, right?

[18:58] <autrijus> sure.

[18:58] <autrijus> sm -I --verbatim

[18:58] <knewt> cool

[18:58] <autrijus> "What is the sound of SVK? Isn't it a wall that people stopped banging their head to?"

[18:59] * PerlJam hasn't yet used svk and doesn't recall banging his head upon a wall

[18:59] <autrijus> so I need to sleep. patches go to p6c as usual.

[18:59] <PerlJam> (but I guess that might be the braindamage ;-)

[19:00] <clkao> i used svn and cvs today and did bang my head

[19:00] <PerlJam> What were you using old obsolete technology like cvs for?  ;-)

[19:01] <PerlJam> autrijus: wait, don't sleep.

[19:02] <knewt> ok, building

[19:02] <autrijus> PerlJam: eh?

[19:02] <PerlJam> autrijus: my compile just finished and I get a fingerprint mismatch when trying to do pugs -e 'my $a = "foo"; $a ~~ /o/'

[19:02] <PerlJam> (yes, it's parrot 0.2.0 this time :-)

[19:03] <PerlJam> arrot VM: Can't unpack packfile run_pge.pbc.

[19:03] <autrijus> PerlJam: you have a src/pge/PGE-Hs.pbc?

[19:03] <autrijus> or a run_pge.pbc ?

[19:03] <autrijus> try svn up again (from the fallback repo)

[19:03] <autrijus> they should be gone

[19:03] <autrijus> like, excised

[19:04] <PerlJam> autrijus: still run_pge.pir and no src/pge/PGE-Hs.pbc

[19:04] <Limbic_Region> autrijus - http://perlmonks.org/index.pl?node_id=456112 # request for pugs/perl6/parrot articles for TPR

[19:05] <autrijus> PerlJam: .pir is fine

[19:05] <autrijus> PerlJam: I wonder why it ran run_pge.pbc

[19:05] <autrijus> PerlJam: there should be no mention of run_pge.pbc anymore

[19:05] <autrijus> PerlJam: does it still break?

[19:05] <PerlJam> Now it says Parrot VM: Can't locate PGE-Hs.pbc, code 2.

[19:06] <autrijus> ok, much better.

[19:06] <autrijus> fixing

[19:06] <nothingmuch> poor dogs

[19:06] <stevan> Limbic_Region: hmmm, a regular pugs column

[19:06] <autrijus> hey, fix run_pge.pir by hand and test it for me?

[19:06] <nothingmuch> why can't they invent silent fireworks, eh?

[19:06] <autrijus> PerlJam: that line should read

[19:06] <autrijus>     load_bytecode "PGE/Hs.pir"

[19:06] <autrijus> that should be all. no recompile needed

[19:07] <autrijus> see if it magically works

[19:07] <PerlJam> nope. Parrot VM: Can't locate PGE/Hs.pbc, code 2.

[19:07] <PerlJam> oh!

[19:07] <PerlJam> sorry, hold on.

[19:07] <PerlJam> ha, much better

[19:07] <PerlJam> er, ah

[19:08] * PerlJam needs to have his eyes checked or there need to be fewer p-things relating to perl6/pugs  ;-)

[19:08] <PerlJam> Anyway, thanks autrijus!  go get some sleep.

[19:08] <autrijus> so it works?

[19:08] <PerlJam> aye

[19:08] <autrijus> woot.

[19:08] <autrijus> ok, committing back

[19:10] <PerlJam> It sure would be neat if there were some CPAN-a-like for svn repositories such that if one were down, you'd automatically get sent to the next one

[19:11] <integral> like freepan?

[19:11] <PerlJam> freepan does svn?

[19:12] <PerlJam> and mirroring with the smarts to take you to a mirror that's up?

[19:13] <autrijus> zzz. :) & *wave*

[19:14] <PerlJam> integral: ah, *exactly* like freepan probably. (looking at the FAQ now)

[19:14] <PerlJam> I'd been ignoring freepan as I'd other things nearer the surface to deal with.

[19:14] * integral thinks the smarts should be client side

[19:15] <Juerd> Damn. Why is YAPC::Europe all the way in Portugal?

[19:15] <integral> the server shouldn't need to know that you prefer JANET and Demon over china

[19:15] <Juerd> I want to meet other Perl people, but this way this isn't going to happen any time soon

[19:16] <Corion> Juerd: Consider flying there ;) I'm "planning" (heh) a two-week vacation down there ...

[19:17] <Corion> Juerd: Also, consider the Dutch Perl Ws, UK Perl Ws and maybe German Perl Ws :)

[19:17] <Corion> (or French Perl Ws)

[19:17] <Juerd> Corion: I can never stay anywhere too long

[19:17] <Juerd> Corion: I went to both dutch perl workshops, but I want more :)

[19:17] <Corion> Juerd: Hmmm - that means you'll have to live with either quick travel or cheap travel, and lots of it.

[19:18] <Juerd> Corion: Things like Vianna and Braga are too expensive to travel to

[19:19] <Corion> Juerd: Yeah, they're both expensive to travel to

[19:19] <knewt> even from north germany travelling to vienna is expensive

[19:19] <Corion> Juerd: Consider browsing through http://megaflieger.de/ (or something similar)

[19:19] <Juerd> Corion: I have visited that kind of sites

[19:19] <webmind> Juerd, organise a perl thingie at wth? :)

[19:20] <Juerd> Corion: From .nl, you can get everywhere, as long as it's the united kingdom.

[19:20] <Juerd> Or Prague, or Kopenhagen

[19:20] <Juerd> That's about it.

[19:20] <integral> .nl -> .uk -> .fr -> .pt

[19:20] <Juerd> Everything else is very expensive.

[19:20] <webmind> buses are cheap.. just horrid to travel in

[19:21] <Juerd> webmind: And they never go the days you want to be somewhere

[19:21] <webmind> darn

[19:21] <knewt> for going to the uk on holiday my dad usually drives, going via .nl

[19:21] <webmind> and hitchiking is even more unstable :)

[19:21] <Juerd> webmind: I'd be happy to organize a Perl sub-event

[19:21] <Corion> Juerd: Or ask on the YAPC mailing list if anyone from (or near) .nl is driving down ...

[19:21] <Juerd> webmind: If it's the first day of WTH

[19:22] <webmind> Juerd, well if you can find enough  people you can open a village ?

[19:22] <Juerd> I don't grok the idea of the villages.

[19:22] <webmind> Juerd, what was it btw why you couldn't go the other days ?

[19:22] <webmind> grok ?

[19:23] <Juerd> webmind: I'm going to france the night between the 2nd and 3rd days

[19:23] <webmind> ah k

[19:23] <webmind> Juerd, the idea with villages is to create ubs-event

[19:23] <webmind> sub-events

[19:23] <webmind> but kinda specialised

[19:23] <webmind> such as a wireless village

[19:23] <Juerd> webmind: Yes, but 4 day sub events. It groups people in ways that I think is not good for an event like wth.

[19:24] <Juerd> BOF sessions are more useful.

[19:24] <webmind> well the idea is localisation

[19:24] <webmind> BOF sessions with 3000 people ?

[19:25] <webmind> that'll get big

[19:25] <Juerd> The problem with villages is that you can't easily be in multiple

[19:25] <webmind> the advantage of villages is it takes load of the organisation.. which wants to do as little as possible

[19:25] <webmind> hmm

[19:25] <Juerd> Yea, that much is obvious.

[19:26] <webmind> well I think you can.. but yes.. you have to place your tent somewhere

[19:26] <webmind> but you can visit events at multiple villages

[19:27] <webmind> although I think 4 days is a bit short

[19:28] <Juerd> It is, for something of this magnitude, where everyone has almost equal wishes

[19:28] <webmind> actually.. lots of people don't 

[19:28] <webmind> some people are just interested in security and maybe some code hacking

[19:28] <Juerd> I think a simple multi-track presentation scheme works better than this village thing

[19:28] <webmind> others more in creative issues

[19:29] <webmind> and some in legal issues regarding privacy and human rights

[19:29] <Juerd> webmind: I suspect most of the people who come to WTH care about all these things.

[19:29] <webmind> well there will be a multi track prtesentation scheme aswell

[19:29] <Juerd> Or at least most of these things.

[19:29] <webmind> well not everyone is interested in everything.. as for what the hack atleast

[19:30] <webmind> I'm not carring much about C code or buffer overflows

[19:30] <webmind> other don;t care about wireless things or voip

[19:30] <webmind> and some don't care about legal or rights issues

[19:30] <webmind> I wish they did thoguh

[19:31] <Juerd> We have a very different view of the people who visit wth

[19:32] <webmind> well maybe more diverse for me

[19:32] <webmind> because I know there will be loads of cool people

[19:32] <knewt> heh, pugs really manages well to push most of firefox out into swap during build-time :/

[19:32] <webmind> just not everyone

[19:32] <webmind> atleast.. that was for hal2001

[19:32] <Limbic_Region> stevan - you interested in writing one?

[19:33] <stevan> Limbic_Region: maybe

[19:33] <webmind> Juerd, but we'll see how the village things turns out

[19:34] <Limbic_Region> TPR is 1 x month right?

[19:34] <stevan> i think

[19:35] <Limbic_Region> actually http://www.theperlreview.com/

[19:35] <Limbic_Region> it looks quarterly

[19:35] <stevan> oh even bettet

[19:35] <stevan> s/bettet/better/

[19:35] <Limbic_Region> given that pugs has only been in existance for a little over 1 quarter - doesn't seem like an overwhelming task

[19:35] <stevan> yeah

[19:35] <stevan> although it may not make sense

[19:35] <stevan> article 1 - we started

[19:35] <stevan> article 2 - we are done

[19:36] <stevan> to much time in between :)

[19:36] <Limbic_Region> well - we are going to seriously run into the "we caught up to you @larry - waiting on further instructions"

[19:36] <Limbic_Region> looking at the Perl6::Bible - there are still a lot of chapters left to be spec'd out

[19:37] <stevan> Limbic_Region: that happens on a daily basis sometimes

[19:37] * Limbic_Region was sorely disapointed with the result of his coroutines question

[19:37] <Juerd> Limbic_Region: We already are

[19:38] <Limbic_Region> http://perlmonks.org/index.pl?node_id=332117 # Is a great reference guide

[19:40] <PerlJam> pugs only existing for such a short time is as it should be.

[19:40] <PerlJam> Design is the hard part and should take the bulk of the time.

[19:40] <PerlJam> Implementation is just a small bit of time.

[19:40] <PerlJam> And then Maintenance lasts forever :)

[19:40] * knewt giggles at FreepanContentRequirements: [[ Only Python modules under a proprietary licence are allowed. GPL and BSD licences are particularly forbidden. ]]

[19:41] <Limbic_Region> PerlJam - I agree though there is more to the story

[19:41] <Limbic_Region> separating the VM was a design decision that resulted in a very long implementation process

[19:42] <Juerd> The vm had to be rewritten anyway

[19:42] <Limbic_Region> it is just that the piece that many people focus on is the language

[19:42] <Juerd> Separated or not

[19:42] <Juerd> Sure, it's more work this way

[19:42] <Juerd> But don't think it would have been easy if it targeted *only* Perl 6

[19:42] <integral> hmm, considering the GHC's VM is much, much older than parrot,  pugs has had a pretty long implementation too :-)

[19:42] <Juerd> Easier, not easy.

[19:43] <Limbic_Region> what I mean Juerd is that there is a great deal of people not aware that implementatation has been going on for a long time

[19:43] <Juerd> You have to admit that parrot development isn't quite as rapid as Pugs

[19:43] <Limbic_Region> no - that's not what I am saying at all

[19:44] <Limbic_Region> I am replying to PerlJam's comment that implementation is just a small bit of time

[19:44] <Juerd> Implementation of the language is

[19:44] <Limbic_Region> in many respects I agree, but there is more to the story

[19:44] <Juerd> Parrot is not Perl 6

[19:44] <Limbic_Region> err - my last comment is to my last statement not to yours

[19:45] <Limbic_Region> and I would say "but p6 wouldn't exist without Parrot" - but I would be dead wrong wouldn't I 

[19:45] <Limbic_Region> ;-)

[19:45] <Juerd> Yes, you would

[19:45] * Limbic_Region hugs his pugs

[19:45] <Juerd> Perl 6 is a language, not a vm, not a program, not an library

[19:46] <Limbic_Region> I don't believe anyone here is disputing that

[19:46] <Juerd> So the people ignoring parrot are right

[19:46] <Juerd> Parrot is important for perl6, eventually

[19:46] <Juerd> But it's a sepearate project for many reasons

[19:47] <PerlJam> Juerd: eventually being now.

[19:47] <Juerd> And implementation of Perl 6 really has began only recently.

[19:47] <Juerd> PerlJam: Yes, because of PGE.

[19:47] <PerlJam> yep

[19:47] <Limbic_Region> hmmm - it is obvious that text only communication has a way of losing unspoken meaning

[19:47] <Juerd> Limbic_Region: You'll get used to it.

[19:48] <PerlJam> Perl6 implementation has only really been going on since Dec 2004 or so

[19:48] <Limbic_Region> Juerd - I don't think you got the conversation is my point

[19:48] <Limbic_Region> stevan made a mostly joke

[19:48] <Limbic_Region> PerlJam commented on it

[19:48] <Juerd> afk

[19:48] <Limbic_Region> I commented a little bit more seriously

[19:49] <Limbic_Region> and then we started down the path of disagreement

[19:51] <knewt> autrijus: ok, i don't know if the number of tests/subtests has gone up or not, but i don't have any more/less failures from the fallback 2968 than i did from main 2987. and i don't have an "unexpected success" message any more

[19:52] <stevan> knewt: we always seem to be hovering around 70-100 failing tests

[19:52] <stevan> lately that is

[19:52] <stevan> it fluctuates alot

[19:52] <knewt> Failed 30/250 test scripts, 88.00% okay. 82/4873 subtests failed, 98.32% okay.

[19:52] <knewt> why does it relink during the make install?

[19:53] <stevan> knewt: no idea, I hardly ever do a full make test anymore

[19:53] <stevan> takes too long :)

[19:54] <knewt> building is my main bit. not as bad as building ghc was though :)

[19:54] <knewt> my computer chugged away all last night building ghc packages for me

[19:54] <stevan> pre-built binaries ++

[19:56] <knewt> i didn't want to put sid binaries onto hoary, so did a binary install of 6.2, and then pulled in the source package for 6.4 from sid and built that, then upgraded to the newly built packages

[19:57] <integral> did you check out with svk, knewt?

[19:58] <integral> If so, there may be something which regenerates the svn revision number that runs that makes the relink happen

[19:58] <knewt> yep. well, svk.

[19:59] <integral> that's probably why

[19:59] <knewt> it's annoying as the link stage takes aaaaaaaaages

[19:59] <integral> I suppose Makefile.PL shoudl detect what kind of repository the code is from

[19:59] * integral is scared of Module::Install

[20:00] <knewt> the build of pugs kindly pushes firefox out into swap for me *g*

[20:00] <integral> only firefox? ;-)

[20:01] <knewt> most everything else i run is quite small in memory usage, so although it /might/ get swapped out it isn't that noticeable

[20:01] * integral normally sees GHC with 200MB vmem and 100MB resident

[20:02] <knewt> firefox on the other hand, once the pugs build has been going for a few minutes, often takes 10+ minutes for enough to be swapped back in whilst the build is still going

[20:04] <integral> are you on less than 256M of ram?   I can manage to do other stuff at that if I nice the build a bit

[20:04] <knewt> 512M ram, 512M swap

[20:05] <integral> oh, you're doing an optimized compile, right?   /me forgot about that

[20:05] <knewt> firefox is rather low at the moment with only having a 217virt/102res footprint

[20:06] <Juerd> If anyone wants to update my XML grammar generator and then try it out with our new rules support, please go ahead

[20:06] <Juerd> Don't wait for me to do it, I won't have the time.

[20:06] <knewt> but then i only have 21 firefox windows open right now, and i only restarted it 21 hours ago

[20:06] <ajs> I've tracked down a bug to src/Pugs/Compile/Parrot.hs, I don't know Haskell, so can't figure out exactly where. tempPMC is being called one too many times on storing the result of a subroutine call, but that's as far as I can get.

[20:08] <integral> possibly it's the compileWith on line 231?

[20:08] <Juerd> http://perlmonks.org/index.pl?node_id=179755

[20:08] <Juerd> (xml grammar)

[20:08] <Limbic_Region> knewt - 21 windows open?  How many tabs in each window?

[20:08] <Juerd> (needs to be updated to current spec, and tested)

[20:09] <Juerd> It's written in 2002's version of perl 6 rules

[20:09] <knewt> Limbic_Region: 1

[20:10] <knewt> Limbic_Region: i have tab support completely disabled

[20:10] <Limbic_Region> huh what?

[20:10] <Limbic_Region> I don't understand knewt

[20:11] * Limbic_Region assumes some good explanation

[20:11] <knewt> i use a tabbing window manager, so i've completely disabled firefox's internal tabs

[20:11] <knewt> means i don't have to use different keys to move between web pages than between any other window on my system

[20:11] <Limbic_Region> knewt - I bet your tabbing window manager doesn't have an "undo close window" feature

[20:12] <Limbic_Region> or a "disable JS in this window only" feature

[20:12] <Limbic_Region> *shrug* - whatever works for you I guess

[20:12] <autrijus> ajs: fixed. committing.

[20:12] <knewt> no, but i can cope with that. the uniformity of key control is worth it

[20:12] <autrijus> also fixing utf8ness in matches.

[20:12] <stevan> Juerd: if you write that grammer,.. I will write the XML::TreeBuidler part :)

[20:12] <autrijus> ajs++ # tempPMC is indeed called once too many

[20:12] <stevan> autrijus: coding in your sleep again :)

[20:12] <knewt> autrijus++ # can't possibly be a single person, much too productive

[20:12] <Limbic_Region> autrijus - Larry has spoken on the single item list thread

[20:13] <Juerd> Yeah, with a really weird reasoning

[20:14] <Juerd> And ignoring entirely that #1 rules out (something returning arrayref)[0]

[20:14] <Juerd> But -- I'm refraining from responding

[20:14] <Limbic_Region> Juerd - why?

[20:15] <autrijus> Juerd: I think larry is mistaken somehow

[20:15] <Juerd> I have my reasons, that I wish to not discuss at this moment

[20:15] <Limbic_Region> okie dokie

[20:15] <autrijus> I don't see how #2 leads to (@foo)[0] being different when @foo is (1) or (1,2)

[20:15] <autrijus> either way it will be @foo[0]

[20:15] <PerlJam> Juerd: see? I told you @Larry would side with me!  ;-)

[20:15] * PerlJam reads p6l

[20:16] <knewt> autrijus: i think he's seeing it as (@foo)[0] producing a list of length 1 containing @foo, and then returning that item

[20:16] <Juerd> autrijus: Yes.

[20:16] <knewt> but i could be wrong

[20:16] <autrijus> knewt: if so, he meant "can't be #1";)

[20:17] <Juerd> autrijus: I think Larry lives in a weird Perl 5-ish world, where () indicates a list, and thus list context, and thus has flattening.

[20:17] <Juerd> autrijus: But otoh he can't possibly be living there.

[20:17] <PerlJam> Juerd: can't be

[20:18] <Juerd> PerlJam: ?

[20:18] <PerlJam> Juerd: re Larry living in a weidr perl5-ish world.

[20:18] <autrijus> (I replied)

[20:18] <PerlJam> Juerd: well, it's time for you guys to step up and argue with Larry  :-)

[20:18] <Juerd> PerlJam: Not me, not now.

[20:18] <PerlJam> As apparently autrijus just did

[20:19] <wolverian> shouldn't (@foo)[0] return @foo?

[20:20] <Juerd> No

[20:20] <theorbtwo> No.

[20:20] <wolverian> why not? :) I mean. that's just the logical thing to me.

[20:20] <theorbtwo> [@foo][0] would.

[20:20] <Juerd> @foo[0] and (@foo)[0] must at all times be the same, because () *merely groups*

[20:20] <Juerd> theorbtwo: () groups, it doesn't DO ANYTHING, other than mess with precedence.

[20:20] <wolverian> right. is this what larry's post fights against?

[20:21] <theorbtwo> Juerd: Right.

[20:21] <wolverian> (making ()[0] mean (,)[0]?)

[20:21] <Juerd> theorbtwo: But -- #1 implies a change to this simplicity, which I strongly oppose to.

[20:21] <wolverian> this is python all over, except I guess one should just use [][]

[20:21] <Juerd> wolverian: No, Larry is actually blessing that "solution".

[20:22] <Juerd> It adds a HUGE special case

[20:22] <wolverian> Juerd: that's what I meant. 'fights against' () being just grouping there.

[20:22] <Juerd> Making some things terribly hard to do.

[20:22] <wolverian> s,grouping,precedence,

[20:22] <Juerd> wolverian: He'd be fighting against one of his own strong points of what Perl 6 should be like...

[20:22] <Juerd> I still don't comprehend Larry's response.

[20:22] <Juerd> My current thinking is that his "#1" is a typo, and he means "#2".

[20:23] <wolverian> or #3.

[20:23] <PerlJam> He definitely does not mean #3

[20:23] <wolverian> why not?

[20:23] <Juerd> No, nobody means #3

[20:24] <PerlJam> because it's wrong

[20:24] <Juerd> #3 is incredibly stupid.

[20:24] <wolverian> okay.

[20:24] <wolverian> it's logical to me, if there is no List there anywhere.

[20:24] <Juerd> #1 is less stupid, but only #2 really makes sense

[20:24] <knewt> Juerd++ # [[ ...so it isn't really useful. Let's turn it into something even less useful, I thought. ]]

[20:24] <wolverian> then (1)[0] would be the same as 1[0]

[20:24] <PerlJam> wolverian: I was of the #1 camp,  but I've been convinced that #2 would be most useful.

[20:24] <Juerd> wolverian: Yes!.

[20:24] <wolverian> Juerd: and that would be an error!

[20:24] <knewt> i'm in the #2 camp i think

[20:24] <theorbtwo> #3 is sounding better and better to me.

[20:25] <stevan> I like #4 ;)

[20:25] <wolverian> #3 sounds like the only logical choice, given that () merely sets precedenec

[20:25] <wolverian> precedence..

[20:25] <theorbtwo> Can't take an array element of a scalar!

[20:25] <wolverian> this is however a special case of (1)[0], and (@foo)[0] would certainly work.

[20:25] <wolverian> (that is, the dying thing. :)

[20:26] * Limbic_Region calls it a night

[20:26] <Juerd> wolverian: And with () setting precedence, why would ($aref)[0] be illegal?!

[20:27] <Juerd> circumfix (non-postcircumfix) () shouldn't have any special case in my very un-humble opinion.

[20:28] <theorbtwo> Juerd, I only meant to imply a special case in the error message.

[20:28] <Juerd> Oh

[20:28] <Juerd> But it shouldn't die

[20:28] <theorbtwo> "Method postcircimfix:«[ ]» not defined on Int" might be confusing for newbies who said (1)[0].

[20:29] <Juerd> It's stupid to disallow precedence grouping

[20:29] <Juerd> You must realise that [] is the same thing as .[]

[20:29] <PerlJam> theorbtwo: they can RTFM to better understand that error  :-)

[20:29] <Juerd> And thot you want to be able to call (somesub arg, arg, arg).[0]

[20:29] <Juerd> Which equals (somesub arg, arg, arg)[0]

[20:29] <theorbtwo> Of course, I do rather wonder why a newbie would write (1)[0].

[20:30] <theorbtwo> Yes, Juerd, I do.

[20:30] <PerlJam> theorbtwo: But the point is that it shouldn't error, but rather return the single scalar value

[20:30] <Juerd> Really only #2 allows this to work well

[20:30] <theorbtwo> If people wanted that question answered, they should have asked it, and not (1)[0].

[20:30] <wolverian> Juerd: it wouldn't. who said it would?

[20:30] <Juerd> wolverian: What wouldn't do what?

[20:31] <wolverian> Juerd: ($aref)[0] wouldn't be illegal.

[20:31] <wolverian> (sorry, girlfriend took a bit of my attention :)

[20:31] <theorbtwo> $aref knows how to postcircimfix:«[ ]».

[20:31] <Juerd> wolverian: If ($foo)[0] is made illegal, then ($aref)[0] is illegal too. This isn't something you can defer to runtime

[20:32] <Juerd> Well, you could

[20:32] <theorbtwo> That's exactly what I suggested, Juerd.

[20:32] <wolverian> Juerd: no! no! the #3 to me says that (1)[0] dies *because it means 1[0]* which is totally undefined

[20:32] <Juerd> But that'd suck greatly.

[20:32] <PerlJam> theorbtwo: given @a = (1,2,3), what should @a[0][0] do ?

[20:32] <Juerd> wolverian: (1)[0] or ($foo = 1)[0] -- there must be no difference

[20:32] <Juerd> wolverian: (1)[0] or ({ 1 }.())[0] -- again, same thing

[20:32] <theorbtwo> Die, PJ, when trying to take the first element of 1.

[20:32] <Juerd> wolverian: You can't know until runtime what the LHS will be

[20:33] <Juerd> wolverian: And having this error out during runtime kind of sucks if it can also do something rather useful.

[20:33] <knewt> Juerd: i'm not a grammer person; do you know what this comment means? [[ The comments in the text of the spec are normative, not the grammar ]]

[20:33] <Juerd> knewt: I have no idea

[20:34] <integral> it means the words are more important than the code samples.   Believe the words, the code might be wrong

[20:34] <PerlJam> knewt: The comments are what you should pat attention to.

[20:34] <PerlJam> s/pat/pay/

[20:35] <knewt> oh /that's/ a useful grammer then

[20:35] <Juerd> knewt: No, not really. I said so in my message to p6l.

[20:37] <wolverian> Juerd: yes, I agree.

[20:37] <wolverian> Juerd: that is; this must be a runtime decision.

[20:37] <wolverian> I guess #3 argues against that. I read it wrong. sorry.

[20:38] <Juerd> wolverian: Well, then you disagree, because I said it's better a compile time thing.

[20:38] <Juerd> afk

[20:38] <wolverian> oh. then I misread again!

[20:38] <wolverian> damn, I'm tired I guess.

[20:38] * PerlJam wonders if the dbi-in-parrot thing is still in the works.

[20:42] <theorbtwo> Is there any concise, current definition of how context propigates in p6?

[20:42] <stevan> Juerd: FYI

[20:42] <stevan> What works in OO right now: classes can be created; attributes can be created (public and private); smart match against class (ex: $foo ~~ Foo); .isa()

[20:42] <stevan> What does not work on OO right now: inheritance; setting the default value of attributes; setting traits for attributes (ex: has $.attr is rw); accessors are not autogenerated for attributes; .can()

[20:42] <theorbtwo> I feel like I'm missing something in this discussion.

[20:42] <stevan> but that was my list from this morning, so it may have changed (rebuilding right now)

[20:43] <theorbtwo> Why would (foo arg, arg)[2] not work under any of the proposed plans?

[20:43] <theorbtwo> (Esp plan 3.)

[20:45] * Shillo waves. SVN dead?

[20:45] <theorbtwo> What's wrong with saying that the invocant of postcircimfix:«[ ]» is always in List context?

[20:45] <stevan> Shillo: see the topic

[20:46] <knewt> Shillo: see topic

[20:46] <stevan> switched to perl.org for the next ~7 hours

[20:46] <Shillo> stevan: Just did. Problem is... how to switch to mirror?

[20:46] <stevan> with svn right?

[20:46] * Shillo nods.

[20:46] <autrijus> theorbtwo: what about {} ?

[20:46] <stevan> svn switch --relocate http://svn.openfoundry.org/pugs http://svn.perl.org/perl6/pugs/trunk/

[20:47] <autrijus> theorbtwo: and in any case, how do you mandate slurpy context on an invocant again?

[20:47] <stevan> and then just reverse it when it is back up

[20:47] <Shillo> stevan: Woah. That one is cool. :)

[20:47] <autrijus> theorbtwo: fwiw, you're talking about line 496 in Eval.hs

[20:47] <autrijus>         varVal  <- enterLValue $ enterEvalContext (cxtItem "Array") listExp

[20:47] <Shillo> svn: The repository at 'http://svn.perl.org/perl6/pugs/trunk' has uuid '3eb29b82-81e5-0310-bad4-b280dcad658b', but the WC has 'c213334d-75ef-0310-aa23-eaa082d1ae64'

[20:47] <Shillo> Hmm.

[20:47] <autrijus> if you change that (cxtItem "Array) into cxtSlurpyAny

[20:47] <autrijus> Shillo: you need to checkout again

[20:47] <stevan> Shillo: sorry

[20:48] <Shillo> Oif.

[20:48] <autrijus> theorbtwo: then it will work as you described.

[20:48] <stevan> Shillo: what autrijus said

[20:48] <autrijus> theorbtwo: the question is, why are we doing this?

[20:48] <autrijus> isn't the invocant a single lvalue?

[20:49] <stevan> autrijus: did clkao give you an endorsement deal :)

[20:49] <stevan> The svk team is pround to introduce svk 1.00, a distributed version control system that powers Autrijus' productivity. While you might not be as crazy as Autrijus, you can at least use the same tool.

[20:49] <integral> sub abc(*@foo: *@bar) just wrong?

[20:49] * Shillo will wait till tomorrow, then. :) Hmm, another thing, got a funny parting bug to report.

[20:49] <autrijus> stevan: he did ask me whether he can write that :)

[20:49] <PerlJam> heh

[20:50] <autrijus> theorbtwo: it's worth asking on p6l, though. I'm not entirely sure.

[20:50] <stevan> autrijus: I hope you at least got a free copy of svk out of it ;)

[20:50] <autrijus> theorbtwo: as it stands, (1,(2,3),4)[3] returns 4.

[20:50] <autrijus> stevan: lol

[20:50] <Shillo> autrijus: That's correct, though

[20:50] <autrijus> er I mean

[20:50] <autrijus> (1,(2,3),4)[2] returns 4.

[20:50] <autrijus> bad offbyone.

[20:51] <Shillo> Oh.

[20:51] <autrijus> because it's taken to mean [1,[2,3],4][2]

[20:51] <knewt> ah

[20:51] * Shillo found another one, lemme reproduce...

[20:51] <knewt> == 4 sounds right

[20:51] <autrijus> because .[] imposes CxtItem on lhs

[20:51] <autrijus> I'll ask on p6l.

[20:51] <Shillo> (1, 2, 3) >>+<< (1, 2, 3); # prints 3

[20:51] <Shillo> Er, prints (1, 2, 3), which is correct

[20:51] <Shillo> But...

[20:52] <Shillo> my @a = (1, 2, 3);

[20:52] <Shillo> @a >>+<< @a;

[20:52] <Shillo> *** Error: Hyper OP only works on lists: Val VUndef at <interactive> line 1, column 1-12

[20:53] * Shillo chatted a bit with pugs REPL yesterday. :)

[20:53] <putter> autrijus: ping

[20:53] <autrijus> putter: pong

[20:54] <autrijus> Shillo: test case

[20:54] * Shillo would commit a test but can't (for both possible reasons, no bit and no repo :) )

[20:54] <autrijus> not an excuse. send to p6c :)

[20:55] <putter> kudos should probably go to ghc's simonmar for 1 day turnaround on the ghc gc bug which was crashing pugs.  Caveat - I haven't tested it yet (cvs-ghc isnt building on amd64 just now).  Expectation is it will be in tomorrow's cvs snapshots.  We'll see.

[20:55] <theorbtwo> Also, what's your email address.

[20:55] <theorbtwo> Shillo +|= $committer

[20:56] <autrijus> putter: whoa.

[20:56] <autrijus> putter++ # nice.

[20:56] * autrijus waits eagerly for ghc 6.4.1

[20:56] * putter too.

[20:56] <autrijus> Shillo: "Miroslav Silovic"?

[20:56] <Shillo> Miroslav Silovic [email@hidden.address]
[20:57] <Shillo> Note, I can't simultaneously read mail to that address and commit (one is from work, commits from home. 'Complicated' ;) )

[20:57] <autrijus> that's fine.

[20:57] <autrijus> the email is just to send invitation (and lost password) to

[20:57] <autrijus> please still send test case to p6c

[20:57] <autrijus> will you? :)

[20:58] <Shillo> Sure.

[20:58] <Shillo> (will from Google)

[20:58] <autrijus> google groups?

[20:59] <autrijus> posting to google groups is an excellent way to ensure nobody can read it :)

[20:59] <autrijus> probably need to write to [email@hidden.address] or nopaste it here and somebody else will commit.

[20:59] <autrijus> but anyway... here you go

[20:59] <autrijus> * Hyper operators now works on arrays too. Reported by: Miroslav "Shillo" Silovic

[20:59] <autrijus> r2972

[20:59] <Shillo> No, will mail from Google email address. :)

[21:00] <autrijus> oh. good :)

[21:00] <Shillo> I know about one-way forwarding.

[21:00] <Shillo> Thanks! :)

[21:00] <autrijus> :)

[21:00] <Shillo> Oh. Regression test case, then...

[21:01] <autrijus> yeah.

[21:03] <autrijus> ahh. luqui is smart and I am Wahnsinnig

[21:03] <Shillo> Oh, @a >>+<< 1 works, too?

[21:04] <autrijus> should be, but I don't know, write a test :)

[21:05] <putter> i saw the off-by-one $/[1] vs $1 offset is gone.  yay!

[21:05] <stevan> autrijus: pugs -e 'class Foo::Bar {};'

[21:05] <stevan> *** Error: No compatible subroutine found: "&class" at -e line 1, column 1-18

[21:05] <stevan> I will write a test for it

[21:06] <stevan> autrijus: should I put it in t/pugsbugs or t/oo ?

[21:07] <autrijus> stevan: either way

[21:07] <stevan> ok

[21:08] <putter> is it just me, or does array aliases flattening capturing parens and capturing non-capturing parens seem unfortunate?

[21:09] <autrijus> putter: you lost me. code?

[21:09] <putter> (i appreciate it makes array aliases on subrules nicely consistent)

[21:11] <putter> "xy" ~~ ... @<a>:=(.(.)) vs @<a>=[.(.)]  yields @<a>[0] eq 'y'  vs @<a>[0] eq 'xy'.

[21:11] <putter> err, no.

[21:12] <putter> er, yes.  sigh.

[21:12] <merlyn> what's the svn command to get PUGS ?

[21:12] <autrijus> merlyn: for the next 4 hours:

[21:12] <autrijus> svn co http://svn.perl.org/perl6/pugs/trunk/

[21:12] <stevan> autrijus: patch of t/oo/ test sent to p6v

[21:12] <autrijus> after that:

[21:12] <autrijus> svn co http://svn.openfoundry.org/pugs/

[21:13] <merlyn> what happens if I do the latter one now?

[21:13] <autrijus> merlyn: likely timeout

[21:13] <stevan> nothing :)

[21:13] <merlyn> OK

[21:13] <theorbtwo> Then it'll time out.

[21:13] <merlyn> I'll just wait until tomorrow then. :)

[21:13] <Shillo> Mail sent. Hope the test itself isn't buggy. :)

[21:13] <autrijus> merlyn: nah, try it now :) 

[21:13] <autrijus> svn.perl.org should be faster for you anyway

[21:13] <autrijus> it's physically closer

[21:13] <merlyn> I have enough to do tonight.  I have to write a column for UnixReview

[21:13] <merlyn> "physically closer" to what?

[21:14] <autrijus> you can let it "svn co" in the background... :)

[21:14] <putter> the key quotes are "an array alias on a subpattern flattens and collects all nested subpattern captures within the aliased subpattern" and 

[21:14] <autrijus> svn.openfoundry.org is in .tw

[21:14] <putter> "If an array alias is applied to a quantified pair of non-capturing brackets, it captures the substrings matched by each repetition of the brackets into separate elements of the corresponding array.".

[21:14] <merlyn> ahh.  Yes, .tw is more distant than anything in the US.

[21:14] <putter> both from Damian's "capturing" post.

[21:14] <Shillo> autrijus: Is it possible to commit to the mirror?

[21:15] <theorbtwo> What was the switch command-line?

[21:15] <stevan> theorbtwo: it wont work, they are diff repos

[21:15] * Shillo isn't even sure it's doable with svn, mind you. :)

[21:15] <autrijus> Shillo: it is possible, sure

[21:16] * putter goes back to reversing the sense of all the array captures in Perl6::Rules t/*t...

[21:16] <Shillo> autrijus: Hmm, so it's fine to just switch to the mirror permanently... Hmm, lemme think about it.

[21:16] * Shillo runs make test, just so...

[21:18] <knewt> gah. hateful software.

[21:18] <knewt> not pugs btw

[21:18] <stevan> autrijus: a quick OO question if you have a moment

[21:18] <autrijus> stevan: sure. btw, qualified class names is fine now

[21:19] <autrijus> and larry killed #1. yay.

[21:19] <stevan> autrijus++ # so damn fast, it /must/ be the svk

[21:19] <autrijus> now it's either #2 or #3...

[21:19] <Shillo> Yep, hyper.t regularily croaks on my build. As it should.

[21:19] <stevan> autrijus: how can I get the invocant with a method? (currently in pugs of course)

[21:20] <autrijus> $?SELF

[21:20] <stevan> ah

[21:20] <autrijus> totally hacky. I guess $_ should also work

[21:20] <autrijus> but it currently doesn't... let me fix

[21:20] <stevan> autrijus: not as hacky as Hack::Instances, so I am fine with that

[21:20] <autrijus> I think I like "o" :)

[21:21] <PerlJam> stevan: not only must it be the svk, but it must be that autrijus works while asleep, because just a couple of hours ago, that's where he said he was going.

[21:21] <Shillo> One thing I kept wondering... can delegate get a reference to the instance that delegated? A12 never mentions.

[21:21] <autrijus> it is very easily explained by the hypothesis that autrijus is a consortium of hackers.

[21:21] <stevan> PerlJam: he works while sleeping, eating *and* showering 

[21:21] <Shillo> (that's p6l stuff, not p6c, of course)

[21:22] <PerlJam> autrijus: indeed. That's my working hypothesis at the moment

[21:22] <theorbtwo> Sounds reasonable to me.

[21:22] <knewt> autrijus: all of course working for IBM </sco-conspiracy-theory>

[21:22] <autrijus> lol

[21:22] <castaway_> .oO( Are they all attending the hackathon ? ) O o ... 

[21:23] <PerlJam> autrijus: either that or you've figured a way to clone yourself and have arranged schedules accordingly.

[21:23] <stevan> personally I think autrijus has some kind of time travel device,.. its a much more plausible explaination IMO

[21:23] <Shillo> Tests done. Failed 28/249 test scripts, 88.76% okay. 80/4854 subtests failed, 98.35% okay. (that's yesterday's build)

[21:23] <PerlJam> stevan: yes, that's another good theory except that it's very flawed.  If autrijus had a time-travel device, why wouldn't he just pop into the future and pick up a fully functional perl6?

[21:23] <PerlJam> s/perl6/pugs/ as to your taste

[21:23] <theorbtwo> Paradoxes?

[21:23] <stevan> PerlJam: and give away his secret? hell no

[21:24] <theorbtwo> It's not as much fun?

[21:24] <Shillo> stevan: It has other drawbacks. If you use time-travel device to create more time for yourself, you accelerate aging.

[21:24] <integral> PerlJam: that's what he's doing, but only svk merging a few changes a day

[21:24] <PerlJam> stevan: Ah, so he probably *has* a fully functional pugs and it just releasing it bit by bit.

[21:24] <stevan> PerlJam: exactly!

[21:25] <castaway_> clever!

[21:25] <Shillo> PerlJam: Hmm. Makes sense. ;)

[21:25] <theorbtwo> Very clever.

[21:25] <PerlJam> Shillo: if you travel fast enough, time slows down.

[21:25] <Shillo> PerlJam: But what you want is to speed up. For yourself, that is.

[21:25] <stevan> Shillo: autrijus is really 8 years old

[21:25] <Shillo> *grin*

[21:25] <theorbtwo> I'm not sure about accelerating aging, but it does remove free will.

[21:26] <Shillo> theorbtwo: Nah. You just avoid looking too closely into your own life. :)

[21:26] <PerlJam> Shillo: no, no, accelerated aging is counter-acted by local time dilation

[21:27] <PerlJam> In short, autrijus must live in a time bubble

[21:27] <Shillo> PerlJam: Umm... lemme start munging Lorentz transformation a bit, I'll get back to you on that one. :)

[21:28] <theorbtwo> Well, it was pretty obvious that he sometimes lives in his own little world...

[21:28] <PerlJam> theorbtwo: see?

[21:28] <Shillo> theorbtwo: OTOH, if PerlJam is right, and his bubble collapses, it may collapse into a black hole that will eat the Earth...

[21:28] <theorbtwo> Hm, I should make a test that checks if AUTHORS is in the correct format.

[21:28] <castaway_> heh

[21:28] <Shillo> theorbtwo: Hangman doubles as that. :)

[21:29] <theorbtwo> Doesn't check the sort-order, though.

[21:29] <theorbtwo> Or that there aren't any unlisted committers.

[21:29] <PerlJam> He just interfaces his multi-dimensional time bubble to various parts of the universe through the carbaceous life form we call autrijus.  In reality he's a transdimensional being who exists on all dimensions and in all times.

[21:29] <Shillo> Q.

[21:29] <theorbtwo> So he already knows how @Larry will answer his questions?

[21:29] <Shillo> Pugs is a practical joke, in other words. ;)

[21:30] <PerlJam> Shillo: that's one conclusion.

[21:31] <Shillo> And if we (the humanity) pass, he'll next sic Borg on us. ;)

[21:31] <PerlJam> Shillo: I don't think his black hole would engulf the earth.  It's not massive enough.  It would evaporate before it got the chance to eat us.

[21:32] <Shillo> PerlJam: 'Not massive enough'. They said the same thing about the iceberg.

[21:32] <PerlJam> Shillo: no, you need a black hole of several solar masses otherwise it doesn't hang around long enough to do damage.

[21:33] <PerlJam> Of course, I may be neglecting the transdimensional mass.  In our space-time he might be 80 kilos, but in the others, he could store gobs or mass (or energy)

[21:33] <Shillo> No, several solar masses is what you need to make one naturally. Once you have a blackhole, its stability grows with mass, but all you need is that is sucks more than it radiates.

[21:34] <Shillo> And that depends on the surrounding matter density. Inside Earth... frankly, I dunno the number.

[21:34] <PerlJam> Shillo: blackholes below a certain size evaporate *really* quickly.

[21:34] <Shillo> 80 killos might just be enough.

[21:34] <Shillo> Yeah, but that refers to quantum ones.

[21:34] <Shillo> 80 killos is macroscopic already.

[21:35] <theorbtwo> Quantum and normal black holes differ only in construction.

[21:35] <theorbtwo> (I think.)

[21:35] * mugwump will reserve judgement until he actually observes one

[21:35] <Shillo> Well, yeah. Quantum ones are bottom-up, normals are top-down. :) Problem is, collapsed time-travel devices are in neither category.

[21:36] <theorbtwo> My point is that once they're there, you can't tell the difference.

[21:36] <autrijus> stevan: this now works:

[21:36] <autrijus>     method set ($self: $x, $y) { $.x = $x; $.y = $y }

[21:38] <Shillo> theorbtwo: Well, I meant that in reference to size. 80 killos is a macroscopic blackhole. It doesn't live very long, but drop it in a bucket of matter, and it might be over-equillibrium suckage.

[21:38] <theorbtwo> Nod.

[21:38] <theorbtwo> And like any other 80kg object, it'll tend to fall downwards.

[21:39] <autrijus> working on $_ topicalising now

[21:41] <autrijus> done:

[21:41] <autrijus>     method set ($x, $y) { $_<x> = $x; $_<y> = $y }

[21:41] <autrijus> you can mix the $self: form with $_.

[21:46] <mj41> s/@list/@array/ patch attempt ... http://wiki.kn.vutbr.cz/mj/attach/pugs/patches/pugs-l-to-a.patch  ... g'night

[21:55] <Juerd> stevan: Thanks for the summaries

[21:56] <autrijus> mj41: thanks, applied

[21:57] <Juerd> I'm shocked to see that list slices go away.

[21:58] <theorbtwo> BTW, an 80kg black hole would have to eat 2.3e12 kg/s, by my quick approx.

[21:58] <Juerd> Arrays have always had much greater overhead than lists. How is this in Perl 6?

[21:58] <Shillo> theorbtwo: Hmm, I'm really curious about the method. Problem is, dunno how to estimate the evaporation speed.

[21:59] <PerlJam> theorbtwo: earth is what? about 6e24 kg? or something

[21:59] <Juerd> PerlJam: I don't think a big enough scale exists :P

[21:59] <mugwump> e30?

[22:00] * Shillo has to go, anyway. Later, folks! :)

[22:00] <PerlJam> oops, I've got to go pick up my kids. 

[22:00] <PerlJam> later all

[22:00] * PerlJam &

[22:00] <theorbtwo> http://en.wikipedia.org/wiki/Hawking_radiation gives a formula for the evap time of a black hole by initial mass.

[22:00] <mugwump> 5.9736x10^24 according to wikipedia

[22:00] <theorbtwo> (Assuming no input of matterenergy.)

[22:02] <theorbtwo> Ah, there's a way I can get a feel for times that short...

[22:02] <theorbtwo> An 80kg black hole would evaporate in 1 clock cycle of a 28GHz computer.

[22:03] <autrijus> accessors are there. committing.

[22:03] * knewt checks to make sure autrijus is human

[22:04] <theorbtwo> .oO(Or can pass the turing test.)

[22:05] <knewt> at this rate pugs will be able to pass the turing test by the end of the year

[22:05] <Juerd> ouch.

[22:07] <autrijus> mmm sentient language

[22:08] <theorbtwo> Hm, autrijus could be a time-traveling android, implemented in perl 6.2831853.

[22:09] <autrijus> nah. I'm not John Titor :)

[22:11] * Juerd thinks autrijus is on some drug that employers all over the world would love to get their hands on

[22:11] <Odin-> theorbtwo: Why would it have to be implemented in perl? By the time it's gone that far, I think Perl will spontaneously create an AI. ;)

[22:13] <castaway_> bro!

[22:14] <wolverian> hmm. it takes hours for my mails to p6l to appear there.

[22:14] <castaway_> then send them earlier

[22:14] <Juerd> wolverian: Are you subscribed?

[22:14] <Juerd> castaway++  # heh

[22:15] <wolverian> Juerd: yes.

[22:15] <integral> are you sending from the subscribed address?

[22:15] <wolverian> ..good point. I'm not sure.

[22:15] <Juerd> wolverian: What integral said, and add to that: is your envelope from what you think it is?

[22:15] <castaway_> you mean he forgot the stamp?

[22:16] <wolverian> Juerd: envelope?

[22:16] <wolverian> yes, the address is the same.

[22:16] <Juerd> wolverian: SMTP uses envelopes

[22:16] <Juerd> wolverian: The address used in MAIL FROM may be different from your From: header

[22:16] <wolverian> hmm. okay.

[22:16] <wolverian> would that be bad? :)

[22:16] <Juerd> The header should be meaningless to anything that is automated, including mailing lists.

[22:17] <Juerd> wolverian: Messages from unknown addresses are moderated

[22:17] <Juerd> (Though I have absolutely no idea who does this. It must be a really sucking job.)

[22:17] <wolverian> hmmmmm. maybe it's wolverian@localhost or something silly like that.

[22:17] <Juerd> wolverian: Can you receive bounces?

[22:17] <Juerd> If so, it's not anything@localhost :)

[22:18] <wolverian> okay.

[22:18] <wolverian> how would I see the MAIL FROM address?

[22:18] <theorbtwo> Juerd: Not that bad, I think.

[22:19] <Juerd> wolverian: Do you send mail using SMTP, or do you use something like sendmail?

[22:19] <Juerd> theorbtwo: Re what?

[22:19] <wolverian> Juerd: postfix.

[22:19] <theorbtwo> They get machine spam-filtered, /then/ human-filtered; addresses that send mail that passes both get whitelisted.

[22:19] <theorbtwo> Do an ethereal trace.

[22:19] <Juerd> wolverian: Then it is probably username@hostname

[22:20] <wolverian> hmm. I can't find any postfix logs. :) I guess they are off.

[22:20] <Juerd> wolverian: Send a message to a non-existing address on an existing domain, and see where the bounce is sent.

[22:20] <Juerd> Try, for example, [email@hidden.address]
[22:21] <wolverian> done. thanks for helping out, by the way. :)

[22:21] <wolverian> I'm a bit of a noob at mail.

[22:21] <Juerd> That was already obvious :)

[22:22] <Juerd> SMTP is a really simple protocol, though

[22:22] <Juerd> Knowing it helps understanding e-mail.

[22:22] <wolverian> hmm. /etc/mailname is 'sci.fi'

[22:22] <wolverian> I guess it could be [email@hidden.address] then.

[22:22] <wolverian> (which would be wrong.)

[22:22] <Juerd> wolverian: Try the bounce thing. Bounces are sent to the envelope from

[22:23] <theorbtwo> s/are/should be/

[22:23] <wolverian> yeah, I sent it. nothing back yet

[22:23] <Juerd> theorbtwo: If they're not sent to the envelope from, they're not bounces. :)

[22:23] <Juerd> theorbtwo: Then they are automated replies

[22:25] <theorbtwo> Hm, you have a certian point.

[22:26] <Juerd> I try to always have a point.

[22:27] <mugwump> what's the point of that?

[22:27] <Juerd> It itself is the point.

[22:27] <wolverian> still nothing back :(

[22:27] <Juerd> Where did you send it?

[22:27] <knewt> hmm, while we're mentioning email, qmail--

[22:27] <wolverian> the address you gave. :)

[22:28] <Juerd> wolverian: The bounce goes to [email@hidden.address] and sci.fi says the user is unknown

[22:28] <autrijus> has $.x is rw

[22:28] <autrijus> is supported.

[22:28] <Juerd> wolverian: So [email@hidden.address] is your envelope from, and you can never get correct error reports.

[22:28] <wolverian> Juerd: augh!

[22:28] <autrijus> that's pretty good for a day... see you :) *wave*

[22:28] <wolverian> how do I fix that? hmm. /etc/alias?

[22:28] <theorbtwo> G'night, autrijus.

[22:28] <Juerd> wolverian: Depends on your MTA

[22:28] <mugwump> /etc/email-addresses with exim

[22:28] <Juerd> wolverian: In general, your hostname shouldn't be someone else's.

[22:28] <castaway_> tell postfix what address to use, usually

[22:29] <Juerd> wolverian: Why do you have it set to sci.fi in the first place?

[22:29] *** broquaint_ is now known as broquaint

[22:29] <Juerd> Make sure you use a name that resolves to your actual IP.

[22:29] <castaway_> or set a real FQDN

[22:29] <wolverian> Juerd: I use fetchmail. that's my ISP's server.

[22:29] <castaway_> not to fetch, to send

[22:29] <Juerd> wolverian: Why the hell is it used for *outgoing* mail.

[22:29] <castaway_> (fetchmail is not an MTA)

[22:30] <Juerd> add a 7 above the ., so it is a ?.

[22:30] <Juerd> wolverian: echo $HOSTNAME

[22:30] <wolverian> noesis. :)

[22:30] <theorbtwo> fetchmail thinks it's an FTA.

[22:30] <theorbtwo> Er, MTA.

[22:31] <Juerd> theorbtwo: In a weird way, it is.

[22:31] <castaway_> no it forwards to your MTA

[22:31] <wolverian> Juerd: do you mean my MAIL FROM should be this computer's address?

[22:31] <Juerd> wolverian: If that computer can receive mail for you.

[22:32] <castaway_> more like viceversa..

[22:32] <theorbtwo> "Normally, fetchmail behaves like any other MTA would..."

[22:32] <Juerd> (Has port 25 accessible from the internet)

[22:32] <castaway_> (maybe I'm confusing MTA with MDA.. regardless, fetchmail is hardly the problme ,)

[22:32] <knewt> wolverian: you said sci.fi is your ISP? so you have an email account on their server?

[22:32] <Juerd> fetchmail is an MDA

[22:32] <theorbtwo> Your MAIL FROM [email@hidden.address] address should always be deliverable to.

[22:32] <wolverian> knewt: yes. and I'd rather have everything incoming go there.

[22:32] <Juerd> But it can play a limited MTA

[22:32] <knewt> wolverian: so what is the account?

[22:33] <wolverian> knewt: [email@hidden.address] 

[22:33] <Juerd> wolverian: Then change your username, or find a way to fool your MTA to use a forged envelope from.

[22:33] <knewt> ok, you should be using a MAIL FROM of that then

[22:33] <wolverian> right. I'll read postfix's docs then.

[22:33] <wolverian> thanks a lot, all.

[22:33] <Juerd> wolverian: Until you fix this, send no mail. You're violating the RFC.

[22:34] <wolverian> Juerd: right. thanks.

[22:34] <wolverian> (and sorry.)

[22:34] <Juerd> Heh

[22:34] * castaway_ suspects an awful lot of people are..

[22:34] <Juerd> it's not our problem - it's yours, mostly.

[22:34] <Juerd> castaway_: Yes.

[22:34] <theorbtwo> It's some of both.

[22:34] <Juerd> castaway_: But that's mostly because an awful lot of people use hotmail.

[22:35] <castaway_> If it were that terrible, then the MTA setups/config whatever should complain about it, but they dont

[22:35] * theorbtwo wonders if wolverian's local machine username matches the username of some sci.fi account, who has been getting wolverian's bounces.

[22:36] <Juerd> theorbtwo: No.

[22:36] <Juerd> castaway_: They have no way to know the setting is wrong.

[22:37] <castaway_> I'm sure it could if it really tried.

[22:37] <Juerd> castaway_: You can't tell without trying to send a normal message, that [email@hidden.address] is a valid address

[22:37] <Juerd> castaway_: And there ends the entire possibility of checking whether the envelope from makes sense.

[22:37] <castaway_> You could use VRFY

[22:37] <castaway_> (in theory)

[22:37] <Juerd> VRFY is not always implemented.

[22:37] <Juerd> It doesn't have to be.

[22:37] <castaway_> thats why its only a theory

[22:37] <theorbtwo> VRFY is normally not implemented.

[22:38] <Juerd> VRFY requires the SMTP daemon to know about users, which in practice often means it must run as root.

[22:38] <castaway_> anyway, it would be sending a mail to itself, effectively, so I dont see why it cant test

[22:38] <theorbtwo> (For the same reason that most hosts don't allow finger.)

[22:38] <Juerd> Nice for sendmail, which is insecure because of this, but not for most other smtpds.

[22:38] <castaway_> security thru obscurity

[22:38] <theorbtwo> Juerd: It pretty well has to anyway, no?

[22:38] <Juerd> castaway_: No, it doesn't have to be itself. The box could be a simple forwarder.

[22:38] <Juerd> theorbtwo: Run as root? Hell no.

[22:38] <theorbtwo> Security through obscurity is bad for certian reasons, which do not always apply.

[22:39] <theorbtwo> No, Juerd, know about users.

[22:39] <Juerd> theorbtwo: That neither.

[22:39] <castaway_> it could be, but that could/would require an extra config or some such, since most problem installs probably arent

[22:39] <Juerd> theorbtwo: It has to know about users to be able to fail at the RCPT TO point

[22:39] <wolverian> I'm only seeing local delivery aliases in postfix's docs.

[22:39] <Juerd> theorbtwo: But if it doesn't know about users, it can leave the error reporting up to the MDA, which can initiate a bounce.

[22:39] <theorbtwo> Hm, I suppose.

[22:39] <Juerd> theorbtwo: See how qmail is built.

[22:40] <theorbtwo> Waiting until that late to initate a bounce means more traffic, and more importantly, it means that the bounce can go to the wrong place.

[22:40] <castaway_> obscuring is useful for an extra layer, as long as its not the only one.

[22:40] <theorbtwo> Correct.

[22:40] <Juerd> theorbtwo: The smtpd knows absolutely nothing about the system. This way, it cannot, even if it would want to, hand out that information.

[22:40] <stevan> autrijus++ # i take the dog for a walk and you implement method invocants, $_ as invocant, has $.attr is rw; and autoaccessors

[22:40] <stevan> autrijus++ # for making my life much much easier 

[22:41] <castaway_> (still, it's a shame that finger disappeared.. )

[22:41] <wolverian> should I be looking at postfix's docs for this?

[22:41] <Juerd> theorbtwo: Yes, it means more traffic. No, it goes the right place. The place the sender indicated it wants to use for bounces. Sure, if the sender uses the wrong envelope from, things go wrong. But things go wrong equally in all other error cases.

[22:41] <theorbtwo> Also, it's a bad trade-off when it means that third parties can't review and fix your security.

[22:41] <castaway_> probably, wolverian 

[22:41] <stevan> mugwump: I am will finish the Hack::Instances removal tonight (sometime in the next 4 hours or so)

[22:42] <stevan> mugwump: hopefully by then openfoundry will be back too

[22:42] <wolverian> hrm. then maybe 'alias' isn't what I'm looking for.

[22:42] <Juerd> theorbtwo: qmail is secure because it was built to be secure. It has no security bugs. DJB is a weird guy with stupid licenses, but he really does know how to write good software.

[22:43] <castaway_> software without bugs does not exist ,)

[22:43] <Juerd> castaway_: It has bugs, but no security bugs.

[22:43] <Juerd> castaway_: And if you think it does, go find one and claim the $ 500 reward.

[22:43] <castaway_> anyone that claims such is asking for trouble IMO

[22:43] <wolverian> sender_canonical_maps. yay!

[22:44] <Juerd> http://cr.yp.to/qmail/guarantee.html

[22:44] * theorbtwo wonders if he can stretch the defintions enough to claim that if it delivers phishing mails, it has a security bug.

[22:44] <mugwump> software isn't good if no-one else can understand how to use it

[22:44] <castaway_> theres a huge difference between assuming bugs and actually caring to find them

[22:44] <knewt> Juerd: the fact that qmail doesn't know about users at smtp time is nasty and bad, since it means all you can do for invalid email addresses is drop the email

[22:44] <Juerd> mugwump: qmail was written very clearly and has consistent and thorough documentation. Its usage is very evidently simple.

[22:45] <Juerd> knewt: What do you mean?

[22:45] <Juerd> knewt: It isn't nasty, it isn't bad. It can be very inconvenient, yes.

[22:45] <Juerd> knewt: Try qpsmtpd if this bugs you.

[22:45] <mugwump> if it works for you, great.  However, I really can't excuse his Dickhead special license

[22:45] <Juerd> knewt: Qmail has a modular design. It doesn't care if you use a radically different smtpd.

[22:45] <mugwump> that's with a capital D.  Take note.

[22:45] <knewt> Juerd: nah, i just use exim

[22:46] <Juerd> mugwump: I'm not going to discuss the license -- I agree it sucks

[22:46] <Juerd> mugwump: And I ask you to not mention it further.

[22:46] <mugwump> fine

[22:46] <mugwump> horses for courses

[22:46] <Juerd> DJB's licensing is a source of endless debate in which all parties agree.

[22:46] <Juerd> I've seen it destroy IRC channels before

[22:47] <mugwump> I just really hate it when a "free" software author doesn't really open up development to all

[22:47] <wolverian> hmm. now I should test this.

[22:47] <castaway_> it's his right to do so.. shrug

[22:47] <Juerd> Development is open to all, as long as you distribute it as patches.

[22:47] <castaway_> testing++

[22:47] <Juerd> It's not free software by usual definitions.

[22:48] <wolverian> Juerd: was the server I sent earlier to yours?

[22:48] <Juerd> wolverian: Yes.

[22:48] <fitzzz> (ERROR) Cannot join channel: ##php (You are banned)

[22:48] <fitzzz> :(

[22:48] <wolverian> can I reuse the address to test this?

[22:48] <Juerd> wolverian: It runs qmail (with qpsmtpd), fyi

[22:49] <Juerd> wolverian: Yes

[22:49] <wolverian> sent.

[22:49] <Juerd> (I hate the license, but don't mind using this software. The simple fact is that qmail's design pleases me.)

[22:50] <Juerd> perl.org also uses qmail with qpsmtp by the way :P

[22:50] * castaway_ hands Juerd the drum.

[22:50] <Juerd> Drum?

[22:50] <wolverian> hm. bad filename. doesn't work.

[22:50] <castaway_> for banging on.

[22:50] <Juerd> castaway_: Explain?

[22:51] <castaway_> banging the drum is what you are doing - about qmail. (repeatedly attempting to "sell" it)

[22:51] <castaway_> I think we've got it now.

[22:52] <Juerd> I love qmail, and hate the stupid arguments I continue to hear about it. There's a lot of FUD. Almost everything about the license is true, almost everything about the technical side is false.

[22:52] <Juerd> Every sysadmin should decide for himself which MTA(s) he wants to use

[22:52] <mugwump> great, now we've sorted that out we can MOVE THE FUCK ON TIA

[22:52] * castaway_ noticed.

[22:52] <mugwump> :)

[22:52] <Juerd> And qmail is very probably ruled out by company policy, if there is any.

[22:53] <wolverian> hmm. mail.info log indicates it worked this time, if it indeed shows the envelope address.

[22:54] <Juerd> wolverian: Yep.

[22:54] <wolverian> yay! thanks for helping. 

[22:55] <Juerd> You're welcome

[22:55] <wolverian> bounce came in now. hooray.

[22:59] <Juerd> That must be the first bounce you get in a long time.

[22:59] <Juerd> I wonder how often people never received your message without anyone knowing :)

[23:04] <wolverian> I don't think that has happened. I only mail to mailing lists, I think. :)

[23:04] <wolverian> (so I see when my mail isn't delivered.)

[23:08] <meppl> gute nacht

[23:31] <Juerd> Wow.

[23:31] <Juerd> Someone dares to post with Lotus Notes

[23:35] <wolverian> http://hop.perl.plover.com/~alias/list.cgi?2:mss:120:200505:dghinmhgjlmjjicjnidf

[23:35] <wolverian> wow. that is bizarre.

[23:36] <wolverian> ah. it's fixed in perl5.9.

[23:38] <Juerd> Hm

[23:38] <Juerd> Can you explain what happens?

[23:38] <mugwump> the named sub declaration doesn't close over its scope

[23:39] <mugwump> so $prefix is out of scope and undef

[23:39] <Juerd> What is "close over scope"?

[23:39] <wolverian> http://hop.perl.plover.com/~alias/list.cgi?2:mss:136:200505:gnggkfjgjfjlcicgaoop "solution" (a link to the patch that fixes it)

[23:39] <wolverian> Juerd: as in a closure.

[23:40] <mugwump> ie, capture all the lexicals in its context

[23:40] <Juerd> The question is: why

[23:40] <Juerd> Obviously, $prefix is *declared* in its scope, because strict does not complain

[23:41] <wolverian> yes. it's a perl internals bug.

[23:41] <wolverian> as you can see in the patch. :)

[23:41] <Juerd> pugs does it right :)

[23:41] <wolverian> that is a bizarre thing though. I just used that kind of code as an example of closures to someone a few days ago.

[23:41] <wolverian> I don't think I ever tested if it actually worked. :)

[23:41] <Juerd> I think I use it all the time.

[23:41] <wolverian> but it doesn't work! 

[23:41] <Juerd> You'd think I would have encountered it many times already then.

[23:42] <Juerd> I wonder if there are preconditions for the bug

[23:42] <Juerd> s/use it/used it/

[23:42] <mugwump> normally you don't name closures like that, though

[23:43] <Juerd> I do...

[23:44] <wolverian> it's not naming a closure, it's naming a closure creator.

[23:44] <wolverian> (except in the sense that all subs are closures)

[23:45] <Juerd> Oh!

[23:45] <Juerd> Yea, I'd declare $prefix inside the sub.

[23:45] <wolverian> on another note. I wondered why '*foo = sub { 1 }; print foo' wasn't printing anything :)

[23:46] <Juerd> use strict.

[23:47] <wolverian> yes.

[23:47] <wolverian> actually, I was doing: '*closure = sub { sub { 1 } }; print closure->()'

[23:47] <wolverian> which almost worked. heh.

[23:48] <wolverian> it even passes strict.

[23:59] <putter> is there a time estimate on when svn checkin will be possible?

