[00:09] <clkao> ok.. hsould use -pgmc /usr/bin/gcc-3.3

[00:39] <autrijus> allison started journaling, hurray

[00:39] <autrijus> http://use.perl.org/~Allison/journal/25576 # with my comments

[00:40] <clkao> apple starts svk, hurray

[00:40] <autrijus> the apple team? not only tlaloc any more?

[00:40] <clkao> see #svk

[00:41] <autrijus> oh wow.

[00:41] <autrijus> next step: ship svk with XCode tools

[00:43] <wolverian> is allison he or she?

[00:43] * wolverian curious

[00:43] <autrijus> does it matter? :)

[00:44] <autrijus> I think she refers to herself as she.

[00:44] <wolverian> yes, since english doesn't have a real gender neutral pronoun to use

[00:44] <autrijus> (but then, so does ingy, sometimes)

[00:44] <wolverian> ah, right. thanks.

[00:44] <wolverian> I guess it's all assumption anyway, online :)

[00:44] <clkao> Pugs uses Perl.org (i.e. TPF) mailing lists and IRC servers

[00:44] <autrijus> offline too, nowadays.

[00:45] * clkao checks and see we are still on freenode

[00:45] <wolverian> autrijus: true enough.

[00:45] <autrijus> nowadays a poor black boy can grow to be a rich white woman.

[00:45] <autrijus> clkao: see my comment

[00:45] <wolverian> I actually wish it was easier.

[00:45] <meppl> cya autrjius

[00:45] <wolverian> (The Culture...)

[00:45] <autrijus> meppl: mm?

[00:46] <meppl> oh, sorry im drunken, o thougt you want to go away

[00:46] <meppl> because <autrijus> offline too, nowadays.

[00:46] <meppl> o=I

[00:46] <jdv79> what are you guys talking about - weird stuff

[00:46] <clkao> autrijus: leo is doing branched development, tell him about svk

[00:46] <meppl> silly statement :o)

[00:47] <meppl> my

[00:47] <autrijus> clkao: I did, and I converted chip, but leo somehow had not. he's in magnet #parrot if you'd like to play missionary

[00:47] <clkao> ENOTIME

[00:48] <autrijus> neither do I. I need to find food. bbiab &

[01:10] <svnbot6> r5300, clkao++ | Give -pgmc flag to ghc when CC is set.

[02:10] <rafl> Is there a perl6 specification in EBML or something similar available?

[02:13] <QtPlatypus> rafl: No

[02:15] <rafl> :-/

[02:21] <QtPlatypus> If you would like you can read the specifications and convert them to that form.

[02:22] <rafl> I surely won't like to do that. :-)

[03:34] *** cloudnine is now known as mungekruft

[05:18] <gaal> morning!

[05:19] <QtPlatypus> Morning

[05:24] <mugwump> evening!

[05:24] <mugwump> Or, should I say, Friday night!  :D

[05:26] * mugwump runs off to see http://www.johnbutlertrio.com/

[05:35] <imMute> still friday for another 25 minutes here

[05:35] <svnbot6> r5301, mugwump++ | End the horrid “field `_crypt_struct' has incomplete type” message!  Courtesy of Salvador Ortiz Garcia

[05:35] <gaal> cool!

[06:13] *** Maddingue__ is now known as Maddingue

[06:13] <svnbot6> r5302, autrijus++ | * add Salvador Ortiz Garcia to AUTHORS for the _crypt_struct fix.

[06:13] <svnbot6> r5302, autrijus++ | * a silly new retronym of Perl in README.  lwall said he like it.

[06:17] <gaal> lol # re: polyexirec-\s

[06:17] <autrijus> :)

[06:17] * autrijus runs to lunch

[07:21] <theorbtw1> Oooh, yey, no more _crypt_struct junk!

[07:21] <svnbot6> r5303, qtplatypus++ | Adding todo checks for "foo".trans()  code should follow

[07:21] <svnbot6> r5303, qtplatypus++ | shortly hopefully.

[07:24] <gaal> autrijus, can you direct me to an intro text on forall? can't seem to find one.

[07:25] <gaal> what i did find jump straight to rank-2 polymorphism, which i think is one rank above what i want :-)

[07:25] <QtPlatypus> I thought that forall is now spelt for, or are you talking about something else?

[07:25] <gaal> Qt, haskell :-)

[07:25] <QtPlatypus> Arh

[07:27] <gaal> ah! i think this may be useful: http://haskell.org/ghc/docs/latest/html/users_guide/type-extensions.html (sec. 7.4.1.4 especially)

[07:27] <gaal> but where's a basic explanation of the forall keyword?

[08:25] <nothingmuch> morning

[08:29] <gaal> hey nm

[08:36] <nothingmuch> cleanup time now

[08:39] <Darren_Duncan> what a late night it is

[08:40] <nothingmuch> gaal: m ward is ready

[08:41] <gaal> m ward?

[08:41] <gaal> where they keep monad-affected patients?

[08:41] <nothingmuch> http://nothingmuch.woobling.org/mward

[08:41] <nothingmuch> no, it's a name

[08:41] <nothingmuch> of an artis

[08:42] <nothingmuch> whose CD I said I would rip for you

[08:42] <gaal> kewl. :)

[08:42] <nothingmuch> i forgot to tell crippple to make it abr 160, so I have no idea what bitrate it is

[08:42] <nothingmuch> if it's too low, complain

[08:42] <nothingmuch> if not, deal

[08:43] <gaal> i doubt my shit ten-buck speakers can tell the difference

[08:43] <nothingmuch> i need to vaccum anyway

[08:43] <nothingmuch> ah, perfect =)

[08:47] <gaal> i'm off till much later. see y'all. &

[08:51] <theorbtw1> What sort of music, nm?

[08:56] <nothingmuch> theorbtw1: i think if you take tom waits

[08:56] <nothingmuch> and add a bit of a folkish/country attitude

[08:57] <nothingmuch> err, the subset of tom waits that is "normal" ;-)

[08:57] <nothingmuch> theorbtw1: try tracks 2 and 3, then 1... that pretty much covers the whole CD

[09:09] <wolverian> damn I hate downloading http directories

[09:09] <wolverian> I also hate nosebleeds

[09:09] * wolverian sleeps

[09:21] <nothingmuch> oh man!

[09:22] <nothingmuch> perl6 has so many features that are turning out sort of half baked

[09:22] <theorbtw1> Hmm?

[09:22] *** theorbtw1 is now known as theorbtwo

[09:23] <nothingmuch> now MMD is going down the usefulness drain

[09:23] <theorbtwo> Oh.

[09:23] <nothingmuch> it's just a generator for big given/when statements

[09:23] <nothingmuch> it's order sensitive

[09:23] <nothingmuch> which sucks unless you have a proper compiler taking care of that stuff

[09:24] <theorbtwo> NM: is C56E 126B C277 6DB7 237C 4A7C 542C 11C0 EBD2 7418 your correct fingerprint?

[09:24] <nothingmuch> it's not hard to define 5-6 simple, logical rules for 'specicifity' of MMD parameter thingies

[09:24] <nothingmuch> yes

[09:24] <nothingmuch> but that may be just what I'm seeing on my side

[09:24] <nothingmuch> it may have nothing to do with what you just typed

[09:24] <nothingmuch> DUM DUM DUM!!!!

[09:25] <nothingmuch> ... and for those 5-6 simple rules have order of definition be a tie breaker

[09:25] <theorbtwo> I'd prefer two simple rules:

[09:26] <theorbtwo> 1) The one with the shortest PIR wins.

[09:26] <nothingmuch> but have a *REVERSE* order of definition scheme when it's not defined in the same block of code

[09:26] <theorbtwo> 2) The one that was defined /latest/ wins.

[09:26] <nothingmuch> shortest PIR?

[09:26] <nothingmuch> i.e. "looks fastest"?

[09:26] <nothingmuch> or 'looks simplest'?

[09:26] <nothingmuch> or are you talking about the parameter stuff

[09:27] <theorbtwo> Looks simplest.

[09:27] <nothingmuch> hmm... i'm not sure about that

[09:27] <nothingmuch> a longer PIR may be a simplified version

[09:27] <theorbtwo> So $_ == 5 is presumably simpiler then $_ ~~ 5..10.

[09:27] <nothingmuch> because it doesn't call out to many other helpers

[09:27] <nothingmuch> oh, of the matching PIR?

[09:27] <theorbtwo> Yeah.

[09:28] <nothingmuch> not the body

[09:28] <nothingmuch> okay

[09:28] <nothingmuch> hmm... that may be unstable when the compiler changes

[09:28] <theorbtwo> I meant PIL, not PIR.

[09:28] <theorbtwo> Yes, it might.

[09:28] <theorbtwo> I'm OK with that.

[09:28] <nothingmuch> and you would need tests to make sure your dispatch really works like you meant

[09:28] <theorbtwo> Ambiguity there should be rare.

[09:28] <nothingmuch> hmm... but there can be weird surprises

[09:29] <nothingmuch> remember that lots of "simple" things in perl 6 are complicated concepts with a lot of sugar

[09:29] <theorbtwo> True enough, I suppose.

[09:29] <theorbtwo> I think a rule that is somewhat chaotic will encourage people not to rely on it.

[09:30] <nothingmuch> i dunno... i'm torn between the elegance of your heuristic.

[09:30] <nothingmuch> (damn . key)

[09:30] <nothingmuch> and the fact that it's a bit of a perl 5 ism

[09:30] <nothingmuch> (think of the tokenizer adding scores.. that's scary)

[09:30] <nothingmuch> plus I think that I would really really like to have reliance on MMD semantics

[09:31] <theorbtwo> Oh, for parsing variables vs end-of-string in regexes?

[09:32] <nothingmuch> i would say "for example"

[09:32] <nothingmuch> because i've only heard of this mess, haven't seen it with my own eyes

[09:33] <theorbtwo> I don't think it's as messy as you think it is.

[09:33] <theorbtwo> But yeah, it's a bit of a mess when there's ambiguity.

[09:37] <nothingmuch> lightstep: hackathon TLV, july 21-23

[09:37] <nothingmuch> gaal's house

[09:37] <nothingmuch> are you in?

[09:39] <nothingmuch> okay, I have some semantics

[09:39] <nothingmuch> i'll nopase

[09:40] <castaway_> what, who, where?

[09:40] <castaway_> hey nm

[09:41] *** castaway_ is now known as castaway

[09:42] <lightstep> nothingmuch, (sorry, netvision)

[09:42] <lightstep> nothingmuch, i'd love to, but i'm not really fluent in pugs any more. are there some papers to read to catch up?

[09:44] <nothingmuch> lightstep: i doubt it

[09:44] <theorbtwo> Try docs/talks/hw2005.{tex,txt}

[09:44] <nothingmuch> but come anyway

[09:44] <nothingmuch> oh, good suggestion

[09:44] <nothingmuch> there is lots of peripheral work too

[09:44] <nothingmuch> i think you should be very interested in PIL

[09:45] * castaway nudges nm.

[09:45] * nothingmuch gets nudged

[09:45] <castaway> (ooh, uni-muenchen)

[09:46] <theorbtwo> Hint: it's at gaal's house, where does gaal live?

[09:46] <pasteling> "nothingmuch" at 212.143.91.217 pasted "Order of definition tie breaki" (40 lines, 1.5K) at http://sial.org/pbot/11623

[09:46] <nothingmuch> Tel Aviv

[09:46] <nothingmuch> i don't exactly know where

[09:46] <nothingmuch> eek, i should have provided a summary

[09:46] <nothingmuch> the summary is "MMD ordering semantics"

[09:47] <nothingmuch> if anyone is grokking the width/height of junctions - please explain in your own words

[09:47] <nothingmuch> i'm not satisfied with my splain

[09:47] <broquaint> Is there no "standard" way to do MMD? Or does it vary from language to language?

[09:47] <nothingmuch> broquaint: even if there were, perl has too much more to add

[09:47] <nothingmuch> junctions

[09:47] <nothingmuch> roles

[09:48] <nothingmuch> where clauses

[09:48] <nothingmuch> (i forgot them, let me fix)

[09:48] <broquaint> But even still, I would've thought there'd be a standard model into which they could be incorporated, or am I hoping too much?

[09:49] <castaway> bro!

[09:49] <theorbtwo> quaint!

[09:50] <nothingmuch> broquaint: right now they are going with order is everything

[09:50] <nothingmuch> which i think really sucks

[09:50] <nothingmuch> so I'm proposing my own

[09:50] <broquaint> cast!

[09:50] <broquaint> orb!

[09:50] <broquaint> two!

[09:50] <broquaint> away!

[09:50] <lightstep> i heard CLOS also has mmd. what are the advantages of using definition-order over particularity-order?

[09:51] <theorbtwo> I think you're misinterpreting, and it's only order-wins within where clauses.

[09:51] <theorbtwo> lightstep: Ease of implementation when you can have arbitrarly complex where clauses.

[09:51] <theorbtwo> IE it's easier to not solve the halting problem.

[09:52] <broquaint> What do other MMD systems use?

[09:52] <wolverian> inexact booleans? 0.5 true :)

[09:52] <lightstep> CLOS looks for the most specific definition - the one with the closer superclasses for all parameters

[09:54] <theorbtwo> That's good, when we are talking about subclass/superclass-based MMD.

[09:54] <broquaint> I say we pass the decision off to a quantum calculation and let the universe decide!

[09:54] <theorbtwo> But that's only one of the methods of multi-method displatch.

[09:55] <castaway> displatch++

[09:56] <theorbtwo> Broquaint, if you haven't yet been told, Jess has already been snatched up for September, and I'd rather not have a 2-hour commute, so you should probably find other people to fill your empty desks.

[09:56] <nothingmuch> lightstep: particularity is desirable, but hard

[09:56] <nothingmuch> swith MI and stuff

[09:56] <nothingmuch> i put a proposal in docs/mmd_match_order.txt

[09:56] <nothingmuch> which defines some sense of particularity for perl6, which i think is sane

[09:56] <broquaint> Ok, theorbtwo :)

[09:57] <nothingmuch> svk pushing right now

[09:57] <wolverian> nothingmuch, are you going to mail p6l about it?

[09:57] <nothingmuch> wolverian: i'd like some pugs people feedback first

[09:57] <nothingmuch> preferably people who tried to write some MMD in their heads

[09:57] <nothingmuch> and who like parameter matching

[09:57] <nothingmuch> <plug>and whove read Class::Events</plug>

[09:57] <svnbot6> r5304, nothingmuch++ |  r5348@syeeda:  nothingmuch | 2005-07-08 12:54:53 +0300

[09:57] <svnbot6> r5304, nothingmuch++ |  proposal for mmd match order

[09:58] <nothingmuch> and who think AOP is scary, and we need some kind of better way to get some of it's benefits

[09:58] <nothingmuch> oops, karma whoring

[09:58] <jabbot> nothingmuch: whoring has neutral karma

[09:58] <nothingmuch> heh

[09:58] <castaway> what, he had empty desks??

[09:58] <nothingmuch> i wonderf if there is a way to get svk to not do that... it's very ugly too

[09:58] <nothingmuch> (by default)

[09:59] <theorbtwo> I don't like the idea of extending it from files to compilation units; I don't like the idea of things changing because you decided to compile more at one bite for better optimization.

[09:59] <theorbtwo> The junction thing seems complicated.

[09:59] <nothingmuch> theorbtwo: i don't think that it's an optimization

[10:00] <nothingmuch> i was trying to think up a scenario where a single block of source isn't the same file

[10:00] <theorbtwo> Can't we just say that the nonspecificty of a junction is the sum of the nonspecificty of the alternatives of the junction?

[10:00] <nothingmuch> and the junction thing is simple

[10:00] <nothingmuch> that's exactly it

[10:00] <theorbtwo> Oh.

[10:00] <theorbtwo> It seems like a very long way of saying it.

[10:00] <castaway> bro, which postcode is multimap in?

[10:00] <nothingmuch> ((5|6)&(7|8)) is more specific than (5|6|7|8)

[10:01] <nothingmuch> because the tree that the first one draws is dee

[10:01] <nothingmuch> p

[10:01] <nothingmuch> and the tree that the latter one darws is very shallow and wide

[10:01] <theorbtwo> Oh.

[10:01] <theorbtwo> I don't see why they should have different specificty.

[10:01] <nothingmuch> the first one is not even logical

[10:01] <nothingmuch> but it should try first and fail

[10:02] <nothingmuch> since it has an & in it

[10:02] <nothingmuch> the more &'s you have, and the more significant they are (higher in the heirarchy) the more "specific" the junction is, IMHO

[10:02] <theorbtwo> Oh, now I see why that makes sense.

[10:03] <nothingmuch> can you please try to rephrase

[10:03] <theorbtwo> Saying "I'll take 1 or 2" means that you'd accept either of 2 items.  Saying "I need something that is both 1 and 2" means that you only have half an alternative.

[10:03] <nothingmuch> and commit?

[10:03] <nothingmuch> right

[10:03] <nothingmuch> and this logic is nesting

[10:03] <nothingmuch> since there are parenthesis and junctions containing junctions

[10:03] <nothingmuch> okay, i have a better algorithm:

[10:03] <nothingmuch> each value in a junction is 1

[10:04] <theorbtwo> So the specificty of an or list is the sum of the specificties of it's elements.

[10:04] <nothingmuch> each junction in a junction is it's own score

[10:04] <nothingmuch> & is a sum

[10:04] <nothingmuch> | is an average

[10:04] <theorbtwo> I don't think you want average.

[10:04] <nothingmuch> sum / number of elems, no?

[10:04] <theorbtwo> 42 has a score of 1; 42|23 should have a score of 1/2, not 1.

[10:04] <nothingmuch> right

[10:05] <nothingmuch> okay, we need some sort of quantification for nesting

[10:05] <nothingmuch> i'm in a bit of a rush

[10:05] <nothingmuch> if you can think up an algorithm please add it

[10:05] <nothingmuch> i'll try to think up something, but the house is not getting cleaned

[10:05] <lightstep> i have another. weight of a value is 1, | is sum, & is min

[10:05] <nothingmuch> min?

[10:05] <theorbtwo> I think & wants to be 1/sum.

[10:06] <lightstep> minimum

[10:06] <nothingmuch> oh, and low score wins

[10:06] <lightstep> so (1|2)&(3|4) weighs 2

[10:06] <nothingmuch> okay

[10:06] <lightstep> since you only have 2 real options

[10:06] <nothingmuch> but arguably (1|2)&(3|4) is more particular than (1|2)&(any(-Inf..Inf)), but that's also 2

[10:07] <theorbtwo> (1|2) and (3|4) each weigh 2, so (1|2)&(3|4) would have a weight of 1/4.

[10:07] <nothingmuch> lightstep: you can use screen+irssi with your account on my machine

[10:07] <nothingmuch> and my junction causes a divide by zero error at runtime ;-)

[10:07] <nothingmuch> err, compile time

[10:08] <nothingmuch> anyway, we can find a nice algorithm

[10:08] <theorbtwo> nothingmuch, it doesn't.

[10:08] <nothingmuch> i was joking

[10:08] <nothingmuch> our algorithm needs to work on anything we throw at it, and it also needs to be very elegant

[10:08] <nothingmuch> we'll find one... nevermind

[10:09] <theorbtwo> 1|2 has a weight of 2 (again), any(-Inf..Inf) has a weight of 1/Inf, which is +NaN... hm, which isn't much better.

[10:09] <nothingmuch> any(-Inf..Inf) has a weight of Inf

[10:09] <nothingmuch> if | is sum

[10:09] <theorbtwo> erxz_paste, right, sorry.

[10:09] <theorbtwo> Err, right, sorry.

[10:10] <nothingmuch> lightstep: did you get my line about screen+irssi?

[10:10] <theorbtwo> The 1/inf doesn't come in until the next step: 1/(2+Inf)

[10:10] <lightstep> choosing lower weights is better for this reason. but i think maybe the weight (at least of numbers) should be a range

[10:10] <lightstep> nothingmuch, no' i'll backlog now

[10:10] <nothingmuch> ssh to pasta, type 'screen -U irssi'

[10:10] <nothingmuch> then type '/server freenode'

[10:10] <nothingmuch> then type '/join perl6'

[10:11] <nothingmuch> and every time your connection dies, ssh to pasta again, and type 'screen -U -d -r', it'll be the same irssi

[10:11] <castaway> .oO( -U ?)

[10:11] <lightstep> i have screen&irssi here, too

[10:11] <nothingmuch> castaway: unicode

[10:11] <nothingmuch> lightstep: but do you have a proper connection? ;-)

[10:11] <wolverian> what, your distro doesn't use it by default? :)

[10:11] <castaway> Oh, utf8 .. neat

[10:11] <nothingmuch> wolverian: maybe it does

[10:12] <nothingmuch> wolverian: but OSX doesn't, which is why I use it always

[10:12] <lightstep> nothingmuch, as i said, nietvision

[10:12] <nothingmuch> lightstep: right, but running screen on a box in IL won't be too slow

[10:12] <nothingmuch> but I do have a reliable connection

[10:12] <nothingmuch> i'm also in NV, so the lag shouldn't be noticable

[10:12] <nothingmuch> but I have a business line

[10:12] <theorbtwo> Tëst.

[10:12] <wolverian> nothingmuch, hmm, that's odd. isn't it utf8 on the gui level?

[10:13] <theorbtwo> Was that an e-umlout for everybody?

[10:13] <nothingmuch> anywho, lightstep, theorbtwo: i do think that a short circuiting junction scoring algo is not good enough

[10:13] <lightstep> irssi reconnects anyway

[10:13] <wolverian> theorbtwo, here it was

[10:13] <nothingmuch> wolverian: screen can fudge it down to ascii/isoxxxx if needed

[10:13] <castaway> gui? irssi is console

[10:13] <nothingmuch> theorbtwo: i saw the umlaut

[10:13] <theorbtwo> Short-circuiting?

[10:13] <theorbtwo> OK then.

[10:13] <nothingmuch> lightstep: but you don'

[10:13] <wolverian> castaway, yes, I was wondering about consistency between console and gui

[10:13] <castaway> ah, well mine appears to be supporting it anyway.. (after switching putty over ,)

[10:13] <theorbtwo> I don't need a -U when in a utf8 locale on debian.

[10:13] <nothingmuch> t get a consistent backlog

[10:13] <lightstep> oh, i get it. i'll do that

[10:14] <nothingmuch> you should also be able to use feather, but the link to it might be slow

[10:14] <castaway> who uses a gui, these days? :)

[10:14] <nothingmuch> anywho, i'm off

[10:14] <nothingmuch> castaway: what about those days?

[10:14] <theorbtwo> Have fun cleaning house.

[10:14] <castaway> :)

[10:14] * castaway whistles innocently

[10:15] <wolverian> castaway, hmm. I do, because I haven't been able to config ion3 to my liking. :) 

[10:15] <castaway> (green-screens, yeah :9

[10:22] <theorbtwo> Ah, good, 1/inf is 0 in Haskell.

[10:24] * theorbtwo boggles... when was our GPS 38 meters /below/ sea level?

[10:26] <castaway> Ummmmm

[10:26] <castaway> when it was on?

[10:26] <castaway> (ok silly question)

[10:27] <castaway> figure out where that is, maybe then you'll know ,)

[10:27] <castaway> Im going to guess canada

[10:27] <castaway> stuff the coords in google

[10:32] <theorbtwo> Northern germany.

[10:32] <theorbtwo> It's old enough that it's lost the time.

[10:32] <lightste1> castaway, you can't know the geographic position based on the latitude

[10:32] <theorbtwo> You can't?

[10:33] <theorbtwo> I have a latitude/longitude/altitude triple, that should pretty well cover it.

[10:33] <castaway> gimme the url? 

[10:33] <theorbtwo> http://maps.google.com/maps?ll=53.34219,10.73369

[10:33] <lightste1> oh, i didn't see the fist two (and i meant altitude)

[10:34] <castaway> hmm, that didnt pinpoint much

[10:34] <theorbtwo> Yes it did, you just have to hit + a lot.

[10:34] <theorbtwo> N53 20 31.9     E10 44 01.3     -38.3265380859 m altitude

[10:35] <castaway> thats in one of the saved trips?

[10:35] <theorbtwo> 16-June-01, the last point given.

[10:35] <castaway> June, hmm, wasnt Flensburg then

[10:35] <castaway> Must be.. whatsit..

[10:36] <rafl> Is operator overloading currently broken?

[10:36] <osfameron> $fh.pos = 10`bytes # cool, is n`units a general purpose thing?

[10:37] <theorbtwo> It's meant to be, osfameron.

[10:38] <osfameron> cool

[10:39] <broquaint> What's with the backtick in 10`bytes?

[10:40] <QtPlatypus> The units operator.

[10:40] <osfameron> where is it specced/discussed ?

[10:41] <QtPlatypus> In usenet discussions.

[10:43] *** lightste1 is now known as lightstep

[10:56] <autrijus> gaal: "Sexy types in action" or just google for "sexy types"

[11:05] <nothingmuch> autrijus: docs/mmd_match_order.txt

[11:05] <nothingmuch> very short

[11:09] <autrijus> lookin'

[11:09] <autrijus> nothingmuch: er

[11:09] <autrijus> Current defined semantics are: matches are tried in order of definition.

[11:09] <autrijus> this is not true

[11:10] <autrijus> it's _only_ order of defition for constraint types.

[11:10] <autrijus> that is "where" clauses

[11:10] <autrijus> including value-based MMDs

[11:10] <nothingmuch> ugh

[11:10] <nothingmuch> what about type distance

[11:10] <nothingmuch> this is getting too complicated

[11:10] <autrijus> er, no, just two things

[11:10] <nothingmuch> i mean unintuitive

[11:11] <autrijus> static (type-distance) checks are tried first

[11:11] <nothingmuch> even if sub foo (1) is sub foo (Int where { $_ == 1 }) behind the scenes, it's odd

[11:11] <autrijus> with duplicates rejected

[11:11] <autrijus> dynamic (value-based constraints) are then broken as caseof statements

[11:11] <autrijus> that's all

[11:11] <nothingmuch> could you look at the proposed semantics and see if the make sense

[11:12] <rafl> Is someone woring on an XML Parser in perl6?

[11:13] <nothingmuch> rafl: to the best of my knowlege no

[11:13] <rafl> OK. So I think I'll start with that now.

[11:13] <nothingmuch> i'd port XML::SAX to perl 6, and hook in a haskell XML parser to make it fast

[11:14] <nothingmuch> autrijus: 

[11:14] <nothingmuch> ?

[11:15] <nothingmuch> how far is it from my understanding of current type distance semantics, etc?

[11:15] <nothingmuch> because I have no idea where that is specced

[11:16] <nothingmuch> and I still think that order of definition for values is stupid

[11:16] <autrijus> k I'll look at it; I'll be back in a bit

[11:16] <nothingmuch> because if you are matching on a range, and on a value, then presumably the value in the range is a special case to simplify/optimize

[11:16] <nothingmuch> and you can't add optimization to other people's code, unless you edit it, this way

[11:32] *** Aragone is now known as Arathorn

[11:32] <svnbot6> r5305, nothingmuch++ |  r5350@syeeda:  nothingmuch | 2005-07-08 14:31:43 +0300

[11:32] <svnbot6> r5305, nothingmuch++ |  explain more about & and depth

[11:32] <nothingmuch> crap

[11:32] <nothingmuch> shell alias

[11:37] <masak> nothingmuch: i don't know if it matters much, but i would think mmd_match_order.txt belongs in docs/notes/

[11:41] * castaway kicks self.. the gps data from the canoe trip is gone

[12:08] <rafl> nothingmuch: Where's the code for your XML::SAX port?

[12:08] <autrijus> masak: I moved it to notes/.

[12:08] <autrijus> I am not sure where docs/SHOT_IN_THE_FOOT belongs. ideas?

[12:08] <autrijus> docs/misc/? docs/humour/? 

[12:09] <autrijus> if there's no better ideas I'll leave it in docs/

[12:09] <castaway> we can shoot ourselves in the foot with p6 already? :)

[12:11] * theorbtwo thinks that was implemented back on day 1.

[12:11] <autrijus> castaway: that's the plan according to mugwump

[12:11] <svnbot6> r5306, autrijus++ | * reorganize notes into notes/.  not sure what to do with SHOT_IN_THE_FOOT...

[12:11] <castaway> laudible goal :)

[12:13] <kolibrie> autrijus: welcome back to the land of the living

[12:13] <castaway> he was dead?

[12:13] <kolibrie> deep sleep

[12:13] <kolibrie> for days, it seems

[12:14] <Arathorn> lying on top of a mountain somewhere, waiting to be rescued by an eagle? O:)

[12:14] <kolibrie> something like that

[12:17] <autrijus> yeah :)

[12:17] <autrijus> kolibrie: I'm glad to be back :)

[12:17] <kolibrie> :)

[12:18] <kolibrie> we're glad to have you, and renewed and all that - white wizard or something

[12:18] <autrijus> I was autrijus the colorless. Now I'm autrijus the chromatic!

[12:18] <autrijus> er, probably not

[12:19] <Arathorn> i think chromatic might have prior art on that one ;)

[12:20] <Arathorn> autrijus the opaque, perhaps... or the translucent...

[12:20] * Arathorn waffles off to lunch

[12:24] <nothingmuch> rafl: i haven't ported XML::SAX

[12:24] <nothingmuch> it's just what I would have started with given the will to do it

[12:25] <rafl> nothingmuch: Oh, sorry. I didn't read careful enough.

[12:25] <nothingmuch> =)

[12:32] <Limbic_Region> does that mean chromatic can change colors too?

[12:33] <Limbic_Region> salutations all btw

[13:03] <rafl> Is there already a function in a Perl6 module that can give me the name of the directory a given file is in?

[13:03] <autrijus> rafl: splitpath in File::Spec?

[13:04] <Aankhen``> Hiya autrijus.

[13:04] <rafl> autrijus: Right, thanks.

[13:35] <nothingmuch> hola robkinyon 

[13:35] <robkinyon> heyla, nothingmuch

[13:35] <robkinyon> stevan told me about your crazy P6 plans

[13:35] <robkinyon> :-)

[13:36] <nothingmuch> what crazy plans?

[13:36] <nothingmuch> no, that didn't come out right

[13:36] <nothingmuch> which crazy plans? I have several =)

[13:37] <robkinyon> aren't you involved in the PIL -> P5 effort?

[13:37] <nothingmuch> yep, sort of

[13:37] <nothingmuch> i'm thinking in a diff direction now, and not writing code at the moment

[13:38] <robkinyon> wow, a hacker who stops and thinks

[13:38] <robkinyon> next, you're going to tell me that you're writing down a design or something!

[13:40] <svnbot6> r5307, nothingmuch++ | stupid sentance in mmd order notes

[13:40] <svnbot6> r5308, nothingmuch++ | CHange bullet formatting - it isn't substeps, it's just details of matching

[13:45] <nothingmuch> robkinyon: eh... =)

[13:45] <nothingmuch> robkinyon: i think I would like PIL trees to contain combinator objects, and leaf nodes

[13:45] <svnbot6> r5309, nothingmuch++ | I was overzealous with the bullets... Type matching *does* have substeps that

[13:45] <svnbot6> r5309, nothingmuch++ | define the matching of classes, superclasses and roles.

[13:45] <nothingmuch> leafnodes know how to stringify

[13:46] <nothingmuch> combinators know how to stringify a combination

[13:46] <nothingmuch> without a sort of big case statement for composing a tree - it's just plain old PIL

[13:46] <nothingmuch> this puts an emphasis on the polymorphic properties of the PIL structure, and should force us to implement the runtime better

[13:48] <robkinyon> you're actually speaking greek to me right now

[13:48] <robkinyon> i don't know anything about PIL other than it's a silver bullet to P6 parsing

[13:48] * robkinyon has been playing in JSland, not P6land. :-)

[13:49] <nothingmuch> jsland... eep

[13:49] <nothingmuch> js was alwayssufferring for me

[13:50] <robkinyon> with JSAN, that should change

[13:50] <robkinyon> www.openjsan.org

[13:50] <nothingmuch> i hope =)

[13:50] <robkinyon> Once it gets off the ground, it will be pretty amazing

[13:51] * nothingmuch is slowly getting used to his 'svk push --verbatim' alias

[13:51] <nothingmuch> robkinyon: if you want to get into a big bad wad of perl6 i'm nitpicking about: http://svn.openfoundry.org/pugs/docs/notes/mmd_match_order.txt

[13:51] <nothingmuch> support me on p6l ;-)

[13:52] <nothingmuch> wait, it hasn't finished pushing yet

[13:52] <nothingmuch> ok, now it's up

[13:56] * robkinyon is running out of available brainslots

[13:56] <svnbot6> r5310, nothingmuch++ | Word wrap, and explanation of what is a tie for roles in type matching

[13:58] <nothingmuch> parameter coercion also discussed

[13:58] <svnbot6> r5311, nothingmuch++ | Detailed process of MMD parameter coercion

[14:02] <nothingmuch> A

[14:03] * QtPlatypus watches the Tour and ponders implementing a verion of boids with bikecycles.

[14:11] <svnbot6> r5312, nothingmuch++ | further discussion of coercion semantics with 'is rw' trait

[14:14] *** cventers is now known as cventers_

[14:15] *** cventers_ is now known as cventers

[14:39] <svnbot6> r5313, fglock++ | Set::Functional::Span almost done

[14:54] <svnbot6> r5314, fglock++ | renamed some classes

[14:58] * Limbic_Region notes that even with the spaceship parsing bugs fixed there are more to do

[15:03] <Limbic_Region> ?eval my %hash = map { $_ => 1; } 1..12; %ball{4} = .9; my $res = [+] %hash{1..4} <=> %hash{5..8}; $res

[15:03] <evalbot6> Error: Undeclared variable: "%ball" 

[15:04] <Limbic_Region> ?eval my %hash = map { $_ => 1; } 1..12; %hash{4} = .9; my $res = [+] %hash{1..4} <=> %hash{5..8}; $res

[15:04] <evalbot6> \0 

[15:04] <Limbic_Region> those two things aren't equal

[15:04] <Limbic_Region> ?eval my %hash = map { $_ => 1; } 1..12; %hash{4} = .9; my $res = ([+] %hash{1..4} <=> [+] %hash{5..8}); $res

[15:04] <evalbot6> \0 

[15:05] <Limbic_Region> neither are those (helps when you fix the typo)

[15:05] <Limbic_Region> actually - it is the pugsbugs.t tests that are wrong - autrijus - you about?

[15:06] <Limbic_Region> I am trying to figure out if autrijus changed the tests so they would pass for the release or if he disagrees with what the results should be

[15:08] <Limbic_Region> grrrr

[15:09] <Khisanth> eh? it's suppose to round automatically?

[15:09] <Limbic_Region> no

[15:09] <Limbic_Region> I think autrijus misunderstood what the test results should have yielded

[15:09] <Limbic_Region> since they are still not parsing correctly

[15:10] <Limbic_Region> the tests were all originally -1 since the ball on the lhs had been made to be light

[15:10] <Limbic_Region> when autrijus "fixed" the bug, he changed the test to 0 (equal) - which they shouldn't be

[15:11] <Limbic_Region> so the bug isn't fixed but the tests pass

[15:11] <Arathorn> ?eval my %hash = map { $_ => 1 } 1..12; %hash{4} = 0.9; my $res = ( ([+] %hash{1..4}) <=> ([+] %hash{5..8}) ); $res

[15:12] <evalbot6> Error: cannot cast from VList [VInt 1,VInt 2,VInt 3,VInt 4,VInt 5,VInt 6,VInt 7,VInt 8,VInt 9,VInt 10,VInt 11,VInt 12] to Pugs.AST.Internals.VCode (VCode) 

[15:12] * Arathorn blinks

[15:12] <Arathorn> so much for that experiment, then

[15:12] <Limbic_Region> Arathorn - the ; in the map block is required

[15:12] <Arathorn> oh, ok - is that a feature?

[15:12] <Limbic_Region> and fwiw - that will work

[15:12] <Arathorn> ?eval my %hash = map { $_ => 1; } 1..12; %hash{4} = 0.9; my $res = ( ([+] %hash{1..4}) <=> ([+] %hash{5..8}) ); $res

[15:12] <evalbot6> \-1 

[15:12] <Limbic_Region> which is the way I have the code running now

[15:13] <Limbic_Region> see t/pugsbugs/parsing_spaceship.t for other examples of b0rk behavior

[15:13] <Arathorn> there's no way in hell i could wrap my head around the precedence of the [+]s without brackets anyway..

[15:13] * Arathorn looks

[15:14] <Limbic_Region> the outter parens aren't necessary btw

[15:14] <Limbic_Region> ?eval my %hash = map { $_ => 1; } 1..12; %hash{4} = .9; my $res = ([+] %hash{1..4}) <=> ([+] %hash{5..8}); $res

[15:14] <evalbot6> \-1 

[15:16] <Limbic_Region> I am hesitent to change the tests back since he added another test too which I am not sure how it should behave

[15:16] <rafl> How do I write a static method with perl6?

[15:17] <Arathorn> the [0] <=> [1] one?

[15:17] <Limbic_Region> yeah

[15:17] <Limbic_Region> he wrote the test and had the desired result as being equal

[15:17] <Limbic_Region> that doesn't seem right to me

[15:18] <Limbic_Region> if anything, I would think it should be -1

[15:18] <Limbic_Region> but if that creates an anon array

[15:18] <Limbic_Region> and you consider autoderefing

[15:18] <QtPlatypus> ?eval [0]

[15:18] <Limbic_Region> who knows

[15:18] <evalbot6> [0] 

[15:18] <QtPlatypus> ?eval [1]

[15:18] <Limbic_Region> helpful huh QtPlaytypus

[15:18] <evalbot6> [1] 

[15:19] <QtPlatypus> ?eval [0]<[1]

[15:19] <evalbot6> bool::false 

[15:19] <QtPlatypus> ?eval [0]>[1]

[15:19] <evalbot6> bool::false 

[15:19] <Limbic_Region> ?eval [0] == [1]

[15:19] <QtPlatypus> ?eval [0]==[1]

[15:19] <evalbot6> bool::true 

[15:19] <QtPlatypus> ?eval +[0]

[15:19] <evalbot6> 1 

[15:19] <QtPlatypus> ?eval +[1]

[15:19] <evalbot6> 1 

[15:19] <Limbic_Region> ok - well it still doesn't make any sense to me

[15:20] <QtPlatypus> Ok now it makes sence

[15:20] <QtPlatypus> ?eval [0,0] <=> [0]

[15:20] <evalbot6> 1 

[15:20] <QtPlatypus> ?eval [0] <=> [0,0]

[15:20] <evalbot6> -1 

[15:21] <Khisanth> this is comparing the size of the arrays?

[15:22] <QtPlatypus> looks like it

[15:22] <Limbic_Region> right QtPlatypus - I understood why it may work out that way

[15:22] <Limbic_Region> but that wouldn't have exposed the bug in the first place

[15:22] <Limbic_Region> IOW - there wasn't an issue when the two sides were equal

[15:22] <Limbic_Region> so I am confused as to why the test got added (in the state it did anyway)

[15:23] <Limbic_Region> perhaps autrijus found something else when he was bughunting - will have to wait to ask him

[15:25] <Limbic_Region> seen autrijus

[15:25] <jabbot> Limbic_Region: autrijus was seen 2 hours 21 minutes 16 seconds ago

[15:25] <Limbic_Region> well - he recently journaled

[15:30] * nothingmuch is an amazing ascii artist

[15:30] <nothingmuch> very patient

[15:30] <nothingmuch> tries over and over

[15:30] <nothingmuch> the output is not amazing, but the process is ;-)

[15:31] <Limbic_Region> nothingmuch - are you the guy who invented a programming language that involved crayons and scribbling?

[15:31] * Arathorn grins wryly at http://use.perl.org/comments.pl?sid=27415&cid=41722

[15:32] <nothingmuch> nope

[15:37] * Coke yawns

[15:40] <nothingmuch> thomas posted an interesting link

[16:04] <svnbot6> r5315, Stevan++ | Perl6::MetaModel - we now have proper SUPER:: calls, no more of that SUPER(method) stuff; changed all the tests to reflect as well; (in case anyone is wondering, look right above AUTOLOAD in Perl6::Object to see how this was done, really very simple actually);

[16:04] <svnbot6> r5316, fglock++ | Span passes some tests

[16:08] <nothingmuch> stevan: ping

[16:13] <stevan> hey

[16:14] <nothingmuch> hola

[16:14] <stevan> nothingmuch: back on your MMD soapbox I see :)

[16:14] * nothingmuch is thinking maybe a simple 'value' is median particularity for the junction case

[16:14] <stevan> FWIW, I agree with you (things rea too complex)

[16:14] <nothingmuch> ah

[16:14] <nothingmuch> but appearantly the cabal is going to simplify some aspects a lot more than I thought

[16:14] <nothingmuch> IMHO to the point of uselessness

[16:14] <stevan> if I cannot figure out which method MMD will choose, then its not worth it

[16:15] <nothingmuch> since value matches in MMD will be boiled down to a given/when, executed in order of definition

[16:15] <nothingmuch> you can figure it out

[16:15] <stevan> I am not sure I like the order of defintion thing

[16:15] <stevan> but I need to understand it more

[16:15] <nothingmuch> docs/notes/mmd_match_order.txt - my proposal

[16:15] <stevan> yes I saw

[16:16] <nothingmuch> larry's proposal:

[16:16] <nothingmuch> (to the best of my knowlege)

[16:16] <nothingmuch> type constraints are chosen using type distance

[16:16] <stevan> (that makes sense)

[16:16] <nothingmuch> (i hope my 4th step is incorperated, because anything more complex is not easily calculated)

[16:17] <nothingmuch> value constraints are taken in their order of definition

[16:17] <robkinyon> so, depending on how classes are loaded, MMD might change?

[16:17] <stevan> ok, let me read your proposal again

[16:17] <stevan> robkinyon: dont forget about the phase of the moon

[16:17] <nothingmuch> and they are simply matches using a big 'given / when' clause

[16:17] <stevan> oh and $larry[0]s whim as well :P

[16:17] <nothingmuch> robkinyon: yes, but not for type dispatch

[16:17] <nothingmuch> which is OK

[16:17] <stevan> the given/when thing is not okay IMO

[16:17] <robkinyon> anything that depends on order of load is inherently unstable

[16:17] <stevan> maybe as the last thing in a type breaker

[16:18] * stevan reads nothingmuch's proposal &

[16:18] <nothingmuch> i think it should be a tie breaker, but I have yet to find tye cases

[16:18] <robkinyon> Let me repeat ... "Anything that depends on order of load in any fashion is inherently unstable"

[16:18] <robkinyon> tie breaker or not, it's irrelevant

[16:18] <nothingmuch> except for 5 is better than 1..10, which I define as resolved by particularity

[16:19] <nothingmuch> robkinyon: i thik I agree

[16:19] <nothingmuch> there aren't enough ties to really matter, and if they are rare, they will be surprises, and should be errors

[16:19] <robkinyon> MMD should be able to pick the best case or fail dramatically

[16:19] <robkinyon> as in flashing lights and sirens

[16:20] <robkinyon> either way, i have to go eat lunch.

[16:20] * robkinyon waves

[16:22] <stevan> nothingmuch: in your proposal

[16:22] <stevan> I dont understand steps 1 - 3

[16:23] <nothingmuch> sub fun (5) { } is matched by the first step

[16:23] <stevan> ??

[16:23] <nothingmuch> sub fun (1 .. 10) { } by the second

[16:23] <stevan> WTF is sub foo (5) {}

[16:23] <nothingmuch> it defines the action 'foo' on parameters whose value is '5'

[16:23] <nothingmuch> sub factorial (1) { 1 }

[16:23] <nothingmuch> makes sense?

[16:23] <stevan> how is that useful?

[16:23] <stevan> oh

[16:23] <nothingmuch> brb

[16:23] <stevan> uhm

[16:24] <stevan> that makes sense, but that makes more sense as :

[16:24] <stevan> multi sub factorial ($num where { $num == 1 }) { 1 }

[16:24] <stevan> My "where" syntax is rusty 

[16:24] <stevan> but thats basically how I see that

[16:24] <stevan> you add a guard to it

[16:24] <stevan> like in ML or Erlang

[16:26] <stevan> fun factorial n = if n=0 then 1 else n * factorial(n-1)

[16:26] <stevan> that is one way to do it in ML

[16:26] <stevan> but the better way it to use the guard clause

[16:27] <stevan> fun factorial 1 = 1

[16:28] <stevan>   | factorial n = n * factorial(n-1)

[16:28] <stevan> my understanding of that is not that the first guard's arg is 1

[16:28] <stevan> but that it is sugar to hide some kind of where { $n = 1 } clause

[16:32] <nothingmuch> back

[16:32] <nothingmuch> right but if there is a 'where' clause then it's not assured to be specific

[16:32] <nothingmuch> and furthermore it's very very hard to optimize

[16:33] <nothingmuch> if you define sub factorial ($num where { $num ~~ 1 .. 10 }) { }, sub factorial ($num where { $num == 1 }) { }

[16:33] <nothingmuch> which is more specific?

[16:33] <nothingmuch> that is, in a way, indistinguishable from larry's proposal, which I don't like

[16:36] <stevan> hmm

[16:36] <stevan> ok

[16:36] <stevan> point taken there

[16:37] <stevan> I suppose for my purposes (which of course are the most important :P) I want type dispatching to be of the highest priority

[16:38] <nothingmuch> type dispatching is important, but when optimizing for simplicity or speed, you can have both

[16:38] <nothingmuch> and they work together well

[16:38] <nothingmuch> that's when values come in

[16:38] <nothingmuch> i doubt I will use them a lot

[16:38] <nothingmuch> but for when I do want them, this is a lifesaver

[16:38] <nothingmuch> dinner time

[16:39] <stevan> careful not so set the house on fire again :P

[16:40] <stevan> jabbot seen luqui?

[16:40] <Limbic_Region> seen luqui

[16:40] <jabbot> Limbic_Region: luqui was seen 4 days 14 hours 24 minutes 12 seconds ago

[16:41] <stevan> thank you Limbic_Region :)

[16:41] <Limbic_Region> walang anuman stevan

[16:41] <stevan> Luke is such a slacker :P

[16:45] * Limbic_Region has great admiration for mere mortals that continue to press for design decisions and argue for a specific direction to be chosen

[16:45] <Limbic_Region> admittedly I don't know much about language design but I find the whole process way too energy draining

[16:46] <stevan> Limbic_Region: that is how I thought on day one of the hackathin

[16:46] <stevan> s/thin/thon/

[16:46] <stevan> but by day 3 I suddenly found I had opinions :)

[16:46] <Limbic_Region> clear definitive answers are far and few between

[16:47] <stevan> Limbic_Region: this is the nature of @Larry

[16:47] <stevan> :)

[16:47] <Limbic_Region> and the propensity to lose sight of the original question in favor of some semi-related tangent is just too darn frustrating

[16:47] <stevan> Limbic_Region: design by highly chaotic committee :)

[16:47] <Limbic_Region> *shrug* - all it means is that there is 1 less worker bee in the mix

[16:48] <Limbic_Region> I have wanted to help - several times

[16:48] <stevan> Limbic_Region: this is why it was soo good that Larry came to the hackathon

[16:48] <stevan> autrijus could corner him :)

[16:48] <stevan> the first night was absolutely insane

[16:48] <Limbic_Region> stevan - and $larry has never been known to change his mind or misremember

[16:49] <Limbic_Region> I don't want to sound like I am complaining - I am very much in awe of the design team as well as the pugs team

[16:49] <Limbic_Region> it just means that "helping out" is inaccessible to me

[16:49] <stevan> Limbic_Region: you are complaining, but about something which more people *should* be complaining about

[16:49] <stevan> I think the design docs really need updating

[16:50] <Limbic_Region> I will stick to writing p6 code that breaks pugs and commit tests exposing the bugs

[16:50] <stevan> like ****REALLY****

[16:50] <stevan> :)

[16:50] <Limbic_Region> me too

[16:50] <Limbic_Region> I thought I had a good reference for stubbing them out

[16:50] <stevan> Limbic_Region: I think your advocacy efforts are good too

[16:50] <Limbic_Region> turns out that it wasn't

[16:50] <Limbic_Region> asked for more reference material - and found that it was in the collective @larry's head

[16:51] <stevan> eventually it might help turn up the one person crazy enough to sift through months of p6l and update the docs

[16:51] <Limbic_Region> oh - and advocacy - I am fairly effective at that

[16:52] <Limbic_Region> so when is the next hackathon that autrijus chip and larry will be at again together?

[16:53] <stevan> chip wasnt there

[16:53] <stevan> he couldnt make it, I think something related to the geeksunite.com stuff

[16:53] <ingy> hi stevan 

[16:53] <stevan> hey ingy 

[16:54] <stevan> Limbic_Region: I am not sure if autrijus is going to OSCON, but that would be the next likely place

[16:54] <stevan> hows tricks ingy?

[16:55] <Limbic_Region> OSCON is too soon for me to be able to go, but now that Jean is likely not to have any problems re-entering the country I am able to travel

[16:56] <ingy> pretty good. I'm in St Louis for boojum's bday

[16:56] <stevan> ingy: nice

[16:57] <stevan> Limbic_Region: I cant do OSCON either, YAPC::NA exhausted my brownie points with the wife :)

[16:59] <kolibrie> stevan: that's too bad

[17:00] <Ovid> obra:  you there?

[17:00] <obra> yes

[17:01] <Ovid> I'm working with HTTP::Server::Simple and it's causing a problem with another script when I kill that server:   "system $^X, $teardown" fails and returns with "No Child Processes".

[17:02] <Ovid> Essentially, I background that server and later kill 9 it, but a test script later on executes an unrelated system call that returns the No Child Processes message.  If I get rid of HTTP::Server::Simple, the problem goes away.

[17:02] <obra> "test script later" meaning something running under H::S::S?

[17:03] <obra> you know it forks, right? so you may need to be doing something from the parent, not the forked child.

[17:03] <Ovid> No.  HSS is run in one test scripts and then killed in that test script.  Later on, a program which calls the test script is getting that error message.

[17:04] <Ovid> Well, I have a $server->background command and later, in the parent, I issue a kill 9.  Is this wrong?

[17:04] <obra> somewhat

[17:04] <Ovid> (And thanks for HSS, by the way.  Great module)

[17:04] <obra> perhaps you want Test::HTTP::Server::Simple to cleanly kill the server ;)

[17:04] <obra> thanks. I'm glad you find it useful

[17:05] <Aankhen``> ?eval sub foo (::class) { ::class.new(10) }; foo(Int)

[17:05] <evalbot6> Error:  unexpected ")" expecting word character, "?", "*", "+", "++" or parameter name 

[17:05] <Aankhen``> ?eval sub foo (Any ::class) { ::class.new(10) }; foo(Int)

[17:05] <evalbot6> Error: No compatible subroutine found: "&new" 

[17:05] <Aankhen``> ?eval sub foo (Any ::class) { ::class }; foo(Int)

[17:05] <evalbot6> ::class 

[17:06] <Aankhen``> ?eval sub foo (Any ::class) { ::class.ref }; foo(Int)

[17:06] <Limbic_Region> kill 9 is almost never the right thing to do

[17:06] <evalbot6> ::Type 

[17:07] <Aankhen``> ?eval my %foo = (a => "b", c => "d"); gather { take ($k, $v) for %foo.kv -> $k, $kv; }

[17:07] <evalbot6> Error:  unexpected ">" expecting operator, ";" or "}" 

[17:07] <Aankhen``> ?eval my %foo = (a => "b", c => "d"); ($k, $v) for %foo.kv -> $k, $v

[17:07] <evalbot6> Error:  unexpected ">" or "-" expecting operator, ";" or end of input 

[17:08] <Ovid> Thanks for the help, obra.  I'll try that module.

[17:08] <Ovid> Limbic_Region: kill 9 seemed wrong, but that's what is being done in the tests for HTTP::Server::Simple.  I just used those as my guide.

[17:11] * nothingmuch announce his return frm doing the dishes

[17:12] <nothingmuch> stevan: ping

[17:12] <chip> seen autrijus 

[17:12] <jabbot> chip: autrijus was seen 4 hours 8 minutes 31 seconds ago

[17:12] <svnbot6> r5317, Aankhen++ | HTTP::Headers:

[17:12] <svnbot6> r5317, Aankhen++ | * made &BUILD a submethod.

[17:12] <svnbot6> r5317, Aankhen++ | * added &redirect (class method) as equivalent for &CGI::redirect.

[17:12] <Aankhen``> WB nothing_pasta.

[17:12] <Aankhen``> Er, nothingmuch.

[17:12] <chip> Anybody know offhand the way you're supposed to specify the difference between named parameters and pairs to be passed into e.g. a slurpy array?

[17:13] <Aankhen``> foo(a => "b", c => "d"); # named parameters

[17:13] <Aankhen``> foo(slurpy_array => (a => "b", c => "d")); # slurpy array

[17:13] <Aankhen``> Or, better:

[17:14] <Aankhen``> foo() <== (a => "b", c => "d");

[17:14] <chip> OK, thanks, but consider the case when the declaration of foo is not in scope

[17:14] <chip> Is the latter syntax guaranteed to work anyway?

[17:15] <chip> And given   sub foo($a,$b,$c)   is it even legal to say    foo(c=>3, 1)   ?  If so, what does it mean?

[17:15] <nothingmuch> chip: that assumes the parameter name slurpy_array, e.g. sub foo (*@slurpy_array)

[17:15] <Aankhen``> I'm lagging, so I'm not sure which one you mean by "the latter".  The <== form?

[17:16] <nothingmuch> i'm not sure

[17:16] <Aankhen``> chip >> foo(c=>3, 1) is not legal.

[17:16] <nothingmuch> maybe the pair is flattenned

[17:16] <Ovid> Test::HTTP::Server::Simple doesn't play well with Test::Class :(

[17:16] <chip> Aankhen``: yes, the <== form.  I assume it has to work even if sub foo isn't declared yet

[17:16] <nothingmuch> no, it probably isn't

[17:16] <Aankhen``> You have to specify parameters in this order: required parameters, optional parameters, and then named parameters.

[17:16] <obra> Ovid: how so?

[17:16] <nothingmuch> oh, <== is basically 'stuff these into the first slurpy thing'

[17:16] <nothingmuch> or maybe the only slurpy thing

[17:17] <chip> That implies that there is some way to name "the first slurpy thing" in the calling convention whether or not the declaration of &foo is available.  Probably not my (Parrot's) problem though.

[17:17] <Aankhen``> S06: "The variadic array of a subroutine call can be passed in separately from the normal argument list, by using either of the "pipe" operators: <== or ==>."

[17:17] <Ovid> It works with started_ok, but that has to go into the Test(startup) method, but that method is not allowed to have tests.  This causes the test script to fail even though all tests pass.

[17:17] <chip> Aankhen``: thanks

[17:17] <svnbot6> r5318, Aankhen++ | * made HTTP::Request compile.

[17:17] <Aankhen``> No prob.

[17:17] <Ovid> Test(startup) is called only once at runtime.

[17:17] <theorbtwo> Anybody with a paid LJ account?  http://livejournal.com/syn/, fill in http://use.perl.org/~leo/journal/rss/ in the form at the bottom.

[17:17] <obra> patches appreciated

[17:18] <Aankhen``> Hmm, strange... could anyone try tracking down the parsing bug in ext/libwww-perl/lib/HTTP/Response.pm?

[17:18] <Ovid> obra:  I don't know much about signals, hence my problem.  I'll keep digging, though.

[17:19] <Aankhen``> Err.

[17:19] <Aankhen``> Cancel that order!

[17:20] <stevan> nothingmuch: pong

[17:21] <nothingmuch> hey stevan

[17:21] <Aankhen``> Line 58 of HTTP::Status is a really nice replacement for concatenating strings of code and eval()ing them, IMHO.

[17:21] <nothingmuch> want to continue our discussion?

[17:21] <stevan> nothingmuch: sure

[17:21] <Aankhen``> (that, of course, assumes it will work as expected :-P)

[17:22] <stevan> nothingmuch: even better, how about we prototype stuff in the metamodel?

[17:22] <nothingmuch> that was what I was trying to make you do =)

[17:22] <stevan> the ::Method classes could use some work

[17:22] <nothingmuch> specifically the type based multimethod

[17:22] <stevan> nothingmuch: uhm

[17:22] <nothingmuch> i'll implement code signatures

[17:22] <stevan> nothingmuch: okay, we can do that

[17:25] <stevan> nothingmuch: why don't you sketch out the signature part first

[17:25] <stevan> I need to see what you are thinking 

[17:25] <nothingmuch> okay

[17:25] <nothingmuch> did you grok step 4?

[17:25] <stevan> yes

[17:26] <stevan> how/when do you want to measure type distance?

[17:26] <stevan> in other words, should I add something to the metamodel?

[17:26] <stevan> or the ::MetaClass to be exact

[17:26] <nothingmuch> this is easy

[17:26] <stevan> I know

[17:26] <nothingmuch> you just don't allow MI

[17:27] <stevan> but who's responsibility is it

[17:27] <nothingmuch> and type distance is the number of ISAs you traverse to get to the thing

[17:27] <stevan> you can still do it with MI

[17:27] <nothingmuch> uh, maybe the metamodel can have a 'link' method

[17:27] <nothingmuch> you can do that with MI

[17:27] <nothingmuch> but if you have a shortname

[17:27] <nothingmuch> let's look at this:

[17:27] <svnbot6> r5319, Aankhen++ | * HTTP::Response should `require` URI instead of `use`ing it.

[17:27] <nothingmuch> method bark (Animal) { print "moo" }

[17:27] <nothingmuch> method bark (Dog) { print "moo" }

[17:27] <nothingmuch> that's OK, Dog is a specification

[17:28] <nothingmuch> but let's say you have a Chiadog

[17:28] <nothingmuch> which also inherits Tree

[17:28] * chip . o O ( not "multi method"? )

[17:28] <nothingmuch> method bark (Tree)

[17:28] <Aankhen``> ?eval class Foo { method bar () { ./baz(); } method baz () { "&baz was called"; } }; Foo.new.bar

[17:28] <evalbot6> '&baz was called' 

[17:28] <nothingmuch> i don't write multi method as a political statement ;-)

[17:28] <stevan> :D

[17:29] <nothingmuch> anyway, if there was no 'bark' on 'Dog', only 'Tree' and 'Animal'

[17:29] <Aankhen``> ?eval class Foo { method bar () { .baz(); } method baz () { "&baz was called"; } }; Foo.new.bar

[17:29] <evalbot6> '&baz was called' 

[17:29] <Ovid> obra:  Test::HTTP::Server::Simple can work with Test::Class.  My bad.  Doesn't solve the problem, but at least it's cleaner than what I had.

[17:29] <nothingmuch> or in that sense, there were any two superclasses, from separate lineages, competing for an argument

[17:29] <nothingmuch> then this is an error

[17:29] <nothingmuch> if it can be detected by the compiler pre-resolving things, that's also good

[17:30] <stevan> ok

[17:30] <stevan> so $chiadog.bark() would likely hit Tree::bark() because it is a shorter distance

[17:30] <nothingmuch> type inferrence might make such errors/warnings possible

[17:30] <nothingmuch> and you could also just check MMD sigs against all compiled classes at the end of compilation, and generate warnings for things like that

[17:30] <nothingmuch> no, it's an error

[17:31] <stevan> no i understand that

[17:31] <stevan> but if it wasnt an error, that would happen

[17:31] <nothingmuch> oh

[17:31] <nothingmuch> uh, i don't know

[17:31] <nothingmuch> the lineage might be Tree -> SmallTree -> HousePlant -> ChiaPet -> ChiaDog

[17:31] <nothingmuch> and Animal -> Dog -> ChiaDog

[17:32] <nothingmuch> i usually won't remember writing code, which is why i want it to be an error =)

[17:32] <stevan> ok

[17:33] <stevan> I dont think that should be an error

[17:33] <svnbot6> r5320, Aankhen++ | * HTTP::Message: replace `.foo` with `./foo` where appropriate.

[17:33] <stevan> what is wrong with the distance thing?

[17:34] <nothingmuch> stevan: distance tends to be dangerous

[17:34] <nothingmuch> in the sense that you shouldn't really care about anything but the things you explicitly put in your ISA

[17:34] <nothingmuch> if someone refactored ChiaPet

[17:35] <nothingmuch> and made the SmallTree and HousePlant classes, suddenly Tree is much farther

[17:35] <nothingmuch> why should ChiaDog's code know?

[17:35] <nothingmuch> if you explicitly resolve this (by adding something to the call, like bark(Tree<$chia_dog>) or something

[17:35] <nothingmuch> then it's not an issue

[17:36] <stevan> ok

[17:36] <stevan> point taken

[17:36] <stevan> ($chiadog as Tree).bark()

[17:37] <stevan> ($chiadog as Dog).bark()

[17:38] <nothingmuch> .as is something else... i thought about it for a second, but then remembered =)

[17:38] <stevan> yes I know

[17:38] <svnbot6> r5321, Aankhen++ | HTTP::Request:

[17:38] <svnbot6> r5321, Aankhen++ | * replaced `.foo` with `./foo` where appropriate.

[17:38] <svnbot6> r5321, Aankhen++ | * used `given ($self)` properly.

[17:38] <svnbot6> r5322, Aankhen++ | * HTTP::Request: use `../foo` where appropriate.

[17:38] * stevan has to start karma whoring more with his commit messages :)

[17:39] <nothingmuch> use svk push --verbatim

[17:39] <stevan> karma Stevan

[17:39] <jabbot> stevan: Stevan has karma of 46

[17:39] <nothingmuch> jabbot punnished me for that today ;-)

[17:39] <stevan> karma stevan

[17:39] <jabbot> stevan: stevan has karma of 46

[17:39] <nothingmuch> karma nothingmuch

[17:39] <jabbot> nothingmuch: nothingmuch has karma of 76

[17:39] <nothingmuch> that i don't understand.. i haven't committed in ages

[17:39] <stevan> perlbot karma stevan

[17:39] <perlbot> Karma for stevan: 174

[17:39] <stevan> perlbot karma Stevan

[17:39] <perlbot> Karma for Stevan: 174

[17:39] <stevan> ok, so it's case insensitive, cool :)

[17:40] <nothingmuch> perlbot karma nothingmuch

[17:40] <perlbot> Karma for nothingmuch: 129

[17:40] <nothingmuch> ah, that is more to scale

[17:40] <nothingmuch> albeit disappointing ;-)

[17:42] <Limbic_Region> perlbot karma for Limbic_Region

[17:42] <perlbot> Karma for Limbic_Region: 44

[17:42] <Limbic_Region> so much for trying to keep my karma neutral

[17:43] <svnbot6> r5323, Aankhen++ | HTTP::Response:

[17:43] <svnbot6> r5323, Aankhen++ | * replaced `.foo` with `./foo` where appropriate.

[17:43] <svnbot6> r5323, Aankhen++ | * replaced `.SUPER::foo` with `../foo` where appropriate.

[17:43] <svnbot6> r5323, Aankhen++ | * fixed erroneous `if` condition.

[17:44] <nothingmuch> Limbic_Region-- # because you're such a nice guy

[17:45] <Limbic_Region> thanks nothingmuch

[17:45] <Limbic_Region> I have decided to stop waiting for autrijus and just modify the spaceship parsing bug tests to re-expose the bug

[17:45] * Limbic_Region hopes it was just an oversight on autrijus' part

[17:47] <Aankhen``> Whew... that was tedious.

[17:48] <svnbot6> r5324, Limbic_Region++ | Parsing spaceship operator is still broke so modified tests to reflect

[17:48] <svnbot6> r5325, Aankhen++ | HTTP::Headers:

[17:48] <svnbot6> r5325, Aankhen++ | * replaced `.foo` with `./foo` where appropriate.

[17:48] <svnbot6> r5325, Aankhen++ | * fixed &coerce:<as>.

[17:49] <Aankhen``> WB Mr. much.

[17:49] <nothingmuch> hola Aankhen`` 

[17:49] <Aankhen``> What's shakin'?

[17:49] * nothingmuch is trying to make irssi settings stick

[17:49] <Aankhen``> Ah.

[17:49] <nothingmuch> not much

[17:49] * nothingmuch is fussing over MMD in p6l

[17:50] <nothingmuch> aside from that just slacking

[17:50] <Aankhen``> I noticed. :-)

[17:50] <Aankhen``> nothingmuch++ # for trying to make sure MMD is done The Right Way (tm) ;-)

[17:50] <nothingmuch> is it the right way?

[17:50] <Aankhen``> I dunno, but apparently you seem to care enough. :-)

[17:50] <nothingmuch> sometimes I think I may be fussing too much over things I shouldn't fuss over

[17:50] <nothingmuch> that is, I care a lot

[17:51] <nothingmuch> but others don't seem to

[17:51] <nothingmuch> they don't make arguments against it, but they don't say 'yes' either

[17:51] <nothingmuch> brb

[17:51] <nothingmuch> woo! it's working

[17:52] <Aankhen``> Well, I personally have the feeling that I fuss too much over most things.

[17:52] <Aankhen``> (such as grammar)

[17:52] <Aankhen``> But the way I see it, someone has to care.  It might as well be me, since I am interested. :-)

[17:57] <nothingmuch> =)

[18:13] <masak> nothingmuch++ # for caring and fussing

[18:14] <nothingmuch> masak, Aankhen``: thanks... Help me by making a slightly bigger fuss on p6l?

[18:14] <stevan> masak++ # for encouraging him :P

[18:14] <stevan> *cough* warnocked *cough*

[18:14] <Aankhen``> nothingmuch >> I am wary of posting since I am not very knowledgeable about the subject.

[18:15] <stevan> Aankhen``: just say "Yeah, what he said" :)

[18:15] <Aankhen``> Heh.

[18:15] <Aankhen``> Shall I just +1 it?

[18:15] <nothingmuch> well, if you sound like an idiot, but make a big issue of the subject

[18:15] <nothingmuch> and I sound OK

[18:15] <nothingmuch> then we have both an opionion, and an issue

[18:15] <nothingmuch> =D

[18:15] <Aankhen``> Heh.

[18:16] <Aankhen``> Which thread of discussion should I kick up a fuss in?

[18:16] <masak> i'm not really aware of what fuss you're talking about :)

[18:16] <nothingmuch> Hackathon notes

[18:16] <masak> is it about mmd?

[18:16] <Aankhen``> The "Hackathon Notes" one?

[18:16] <Aankhen``> OK.

[18:16] <nothingmuch> masak: MMD semantics

[18:16] <nothingmuch> yes and yes ;-)

[18:16] <masak> :)

[18:16] <masak> explain to me what's important

[18:17] * masak is just seeing fuss

[18:17] <Aankhen``> I'm just saying +1.

[18:18] <nothingmuch> masak: we won't get any particularity semantics for anything but types

[18:18] <masak> for example...?

[18:19] <nothingmuch> that is 'sub foo (1 .. 10) {... }; sub foo (5) { die "i'm never called" }'

[18:19] <stevan> nothingmuch: you could put your shekels where you mouth is, and implement it in the metamodel :P

[18:19] <nothingmuch> since 1..10 is tried before 5, even though it isn't as particular

[18:19] <nothingmuch> stevan: will do, i'm fussing with irssi ATM.

[18:19] <stevan> nothingmuch: excuses, excuses

[18:20] <masak> :)

[18:20] <nothingmuch> yeah, but at least it's an honest excuse ;-)

[18:20] <masak> nothingmuch: most languages i know go by declaration order

[18:20] <masak> that seems to be the easy way out

[18:20] <stevan> masak: there is also static code analysis

[18:20] <stevan> but Perl wont do that

[18:21] <nothingmuch> masak: declaration order sort of sucks, because you can't append a method that deals with a special case

[18:21] <nothingmuch> you have to prepend it

[18:21] <nothingmuch> which means you need access to the original code

[18:21] <nothingmuch> which might not be there, since we're going to have real compilation

[18:21] <stevan> or in C++ where they just change the function names

[18:22] <nothingmuch> look at Class::Events

[18:22] <nothingmuch> it's my canonical example

[18:22] <masak> nothingmuch: you have a point there

[18:22] <nothingmuch> you bundle up code in a module

[18:22] <nothingmuch> it contains two classes - a subscription class, and a notification class

[18:22] <nothingmuch> the rest is handled by the generic code

[18:22] <nothingmuch> however, it's silly to filter a list of subscription for named events

[18:22] <nothingmuch> so the name package adds an MMD get_subscriptions to the Publisher role

[18:23] <masak> nothingmuch: but i think you need to make your solution as intuitive as possible, to show the advantages clearly

[18:23] <nothingmuch> which uses a hash insstead

[18:23] <nothingmuch> that example shows how the generic solution is unhindered by the extending code

[18:23] <nothingmuch> how the extending code can benefit from generic code that it doesn't change

[18:23] <masak> ah, ok

[18:23] <nothingmuch> and how everything can stay clean and very very simple

[18:23] <nothingmuch> but not inefficient

[18:23] <nothingmuch> it's about 200 lines altogether, with lots of whitespace

[18:24] <masak> there's some pattern matching in there somewhere, isn't there?

[18:24] <masak> at least you need to determine the relative specificity of expressions

[18:25] <nothingmuch> masak: type distance only, in Class::Events

[18:25] <masak> what's type distance?

[18:25] <nothingmuch> but this is useful also with values

[18:25] <nothingmuch> ChiaDog is Dog is Animal

[18:26] <nothingmuch> ChiaDog is Tree

[18:26] <masak> and in case of a tie?

[18:26] <nothingmuch> sub bark (Dog $dog) { }

[18:26] <nothingmuch> err, method

[18:27] <nothingmuch> method bark (Animal $dog){ print "moof" }

[18:29] <nothingmuch> sorry, , phone

[18:29] <nothingmuch> masak: basically it means that 'Dog' is more particular than 'Animal' in the case

[18:29] <nothingmuch> so $chiadog.bark() will use 'bark (Dog)'

[18:30] <nothingmuch> we have this this with types

[18:30] <nothingmuch> but we won't have it with values, unless we fuss

[18:31] <masak> what happens if no supertype is closer than the other(s)?

[18:32] * masak guesses that other precedence rules kick in

[18:33] <nothingmuch> that's what I'm trying to define

[18:33] <nothingmuch> basically we have 'uh, definition order counts'

[18:33] <nothingmuch> and 'type distance should solve that'

[18:33] <nothingmuch> that's it

[18:33] <masak> :)

[18:33] <masak> gotta go

[18:33] <nothingmuch> ciao

[18:33] <masak> nothingmuch: good luck with mmd

[18:35] <cwest> seen autrijus?

[18:35] <jabbot> cwest: autrijus was seen 5 hours 31 minutes 36 seconds ago

[18:35] <cwest> nothingmuch: Do you have bandwidth/space to host a JSAN mirror?

[18:36] <nothing_pasta> yes

[18:36] <nothing_pasta> for starters at least

[18:36] <cwest> Right.

[18:36] <nothing_pasta> 278 kilobits out

[18:36] <nothing_pasta> space is not an issue

[18:36] <nothing_pasta> and leeching is not a problem

[18:36] <cwest> cool.

[18:36] <cwest> I need to get some global mirroring going.

[18:36] <cwest> No multiplex yet.

[18:36] <cwest> Let me get some docs on the site and I'll point you to them.

[18:37] <cwest> This will be today.

[18:37] <cwest> Bottom line is 1) rsync 2) static website 3) needs to run from /

[18:37] <cwest> so host.domain.com or something.

[18:37] <nothingmuch> okay

[18:38] <nothingmuch> login?

[18:38] <cwest> nah

[18:38] <nothingmuch> jsan.woobling.org

[18:38] <cwest> Yeah, that'd be great.

[18:38] <cwest> I'll update you soon.

[18:41] <cwest> /usr/local/bin/rsync -avz rsync://openjsan.org/jsan /usr/local/apache/jsan

[18:41] <cwest> nothingmuch: That's it if you just want to start.

[18:41] <cwest> I'd keep it at 6/12 hour intervals, changes are made a coulpe times a day.

[18:41] <nothingmuch> rsync is cheap

[18:41] <nothingmuch> 6?

[18:43] <cwest> yeah, that's cool.

[18:43] <cwest> I may change the explicit host to be master.openjsan.org, we'll see.

[18:43] <cwest> Also, run with --delete and you won't keep cruft.

[18:44] <nothingmuch> it's pretty small

[18:44] <nothingmuch> want more frequent intervals?

[18:46] <cwest> If you want to go with 1h I'm cool.

[18:46] <cwest> I'm going to change the official host to be master.openjsan.org, I'll let you know when that happens.

[18:47] <nothingmuch> make it a mirror at the moment?

[18:49] <nothingmuch> jsan.woobling.org is up

[18:50] <cwest> nice

[18:50] <cwest> nothingmuch++

[18:52] <nothingmuch> does it need any directly listing options?

[18:52] <cwest> I prefer indexes on dist/

[18:52] <cwest> that's it

[18:52] <nothingmuch> okay

[18:52] <cwest> also, if you got a src/ dir, please run again with --delete.

[18:52] <cwest> I don't want to destribute that yet.

[18:52] <nothingmuch> i did that now

[18:53] <cwest> *nod*

[18:53] <nothingmuch> i was surprised at the deletes

[18:53] <cwest> heh

[18:53] <cwest> yeah.

[18:53] <nothingmuch> ok, rsync from cron is working

[18:53] <nothingmuch> making it hourly

[18:53] <cwest> there's some XSI problems with a 'browse dist' when javascript is involved.

[18:53] <cwest> You rock.

[18:55] * nothingmuch forgets his apache-config-fu every time

[18:57] <nothingmuch> okay, indexes enabled just on /dist/

[18:57] <cwest> you rock.

[18:58] <nothingmuch> i hope I can resist the surge of babes

[18:58] <nothingmuch> are mirror hosters popular?

[18:59] <cwest> heh

[18:59] <cwest> Not usually, if you mean traffic wise.

[19:00] <nothingmuch> no, i mean babe wise

[19:00] <nothingmuch> ;-

[19:00] <cwest> But if /. hits this DNS is going to CNAME all my mirror's asses in a flash.

[19:00] <nothingmuch> )

[19:00] <cwest> Oh.

[19:00] <cwest> Well, beats me. :-)

[19:00] <nothingmuch> hah

[19:00] <nothingmuch> i can take it, i have mod_deflate ;-)

[19:00] <cwest> I'm married so I solved that problem already.

[19:00] <nothingmuch> and traffic shaping too

[19:00] <cwest> Cool.

[19:01] <cwest> I should do some of that for the main site.

[19:01] <nothingmuch> yeah, limits HTTP so I still have 2k left for TCP acks

[19:01] <nothingmuch> wondershaper

[19:01] <nothingmuch> tis tres easy

[19:01] * cwest jots that down

[19:01] <nothingmuch> crap, i just realized you can't have umlauts if option is the meta key

[19:01] <nothingmuch> how do you run a js test suite?

[19:01] <nothingmuch> prove launches mozilla?

[19:01] <cwest> bah, freebsd is my king, probably won't work

[19:02] <nothingmuch> i wrote a trafic shaper for bsd fw

[19:02] <cwest> send it to me :-)

[19:02] <nothingmuch> one sec

[19:02] <nothingmuch> it's in perl, so you probably don't want to give it more than 100KBps ;-)

[19:02] <cwest> [email@hidden.address]
[19:03] <cwest> heh. I don't have that to spare so I think I'm safe.

[19:03] <nothingmuch> http://perlmonks.org/?node_id=296660

[19:03] <cwest> oh, even better

[19:04] <nothingmuch> oh crap, it's on code craft, so documentation is deliberately omitted ;-)

[19:06] <cwest> no worries. Could you change the rsync host to master.openjsan.org?

[19:06] <nothingmuch> cwest: ask Juerd to host you a mirror too

[19:06] <nothingmuch> yep

[19:06] <cwest> Where's he?

[19:06] <nothingmuch> seen Juerd 

[19:06] <jabbot> nothingmuch: Juerd was seen 2 days 22 hours 58 minutes 23 seconds ago

[19:07] <cwest> Oh, I meant physically :-)

[19:07] <nothingmuch> netherlands

[19:07] <nothingmuch> also ask pair.com, they are generous when it comes to donating boxes/bw

[19:07] <cwest> I am pair.com.

[19:08] <nothingmuch> and playboy.com - they host a cpan mirror, and I bet their websites have "active" content

[19:08] <cwest> They may be giving me a server for the master site. (My employer, they)

[19:08] <nothingmuch> ah

[19:08] <nothingmuch> so why do you need mirrors?!

[19:08] <cwest> Because their hosting is too expensive for me. ;-)

[19:08] <nothingmuch> hah

[19:08] <cwest> And because when /. overloads a server they just firewall the site off the intarweb.

[19:08] <nothingmuch> it's supposed to be free when you have both connections and a cause

[19:08] <cwest> I'd rather make dns adjustments to my mirrors, if/when that happens.

[19:08] <nothingmuch> okay

[19:08] <nothingmuch> fair enough

[19:09] <cwest> I hate the /. effect when it's "Hey look at that cool thing. Oh, I killed it. Pity."

[19:09] <nothingmuch> ping awwaiid, he has a non-profit (that is, you pay for the costs) hosting company

[19:09] <nothingmuch> epfarms

[19:10] <cwest> *nod*

[19:10] <cwest> I've got friends at a local isp, they gave me colo space.

[19:10] <cwest> So I'm good for now.

[19:10] <cwest> I may be good for all time.

[19:10] <cwest> But I want the mirrors for when people start building installers like cpanp and such.

[19:10] <cwest> Because eventually that'll happen.

[19:11] <nothingmuch> does the installer have to be written in JS?

[19:11] <cwest> your rsync from master. might fail.

[19:11] <cwest> dns was just set up.

[19:11] <nothingmuch> because if not, stevan and I made Verby for writing installers

[19:11] <cwest> it doesn't have to be :-)

[19:11] <nothingmuch> minutely crontab mails me result of -avz, we'll see when it starts working

[19:11] <cwest> The way I see it, an installer just reads META.yml for deps and puts lib/* into the PREFIX you choose.

[19:11] <cwest> I'll probably write one for myself not too long from now.

[19:12] <nothingmuch> so write it with Verby

[19:12] <nothingmuch> =D

[19:12] <nothingmuch> you have to look at it, or i'm taking jsan.woobling.org down randomly

[19:12] <cwest> hee

[19:13] <cwest> show me

[19:13] <cwest> and also I'm hoping autrijus shows up so I can get some east asian goodness from him.

[19:14] <nothingmuch> ask ingy who whosts tpe.freepan.org

[19:14] <cwest> *nod*

[19:16] <ingy> hola

[19:16] <cwest> heya

[19:16] <ingy> what is up?

[19:16] <cwest> nslookup master.openjsan.org

[19:16] <cwest> well anyway

[19:16] <nothingmuch> nslookup is depracated

[19:16] <cwest> ingy: want to host a JSAN mirror?

[19:17] <ingy> cwest: sounds cool

[19:17] <cwest> as soon as dns propigates, /usr/local/bin/rsync -avz --delete rsync://master.openjsan.org/jsan /usr/local/apache/jsan

[19:17] <ingy> need to talk to my peeps on #freepan

[19:17] <cwest> Should I do that?

[19:17] <ingy> no

[19:17] <cwest> okay

[19:18] <cwest> well it's easy, rsync once every (1|6|12|24) hours. It needs a vhost, and as I think I said it's all static.

[19:18] <cwest> no? well it's all static.

[19:19] <cwest> dns is on its way round the world, so when everything updates you can get from master.openjsan.or

[19:19] <cwest> s/or/org/

[19:19] <cwest> (sorry for messing up #perl6 with all this JS junk :-)

[19:20] <cwest> however, I must say, the rapid development of pugs was inspiring to me for this project

[19:27] <obra> cwest: are you signing md5hashes of all the dists?

[19:29] <cwest> no, maybe I should be

[19:29] <cwest> since we now have mirrors.

[19:30] <nothingmuch> right =)

[19:30] <obra> also, we should talk about bug tracking

[19:30] <nothingmuch> obra++

[19:30] <cwest> Yeah, I was going to set up RT but I'd like to do the per-dist RT thing, in a recent version.

[19:30] <robkinyon> obra: we need to talk about install procedures, first

[19:30] <nothingmuch> obra: do you set up rt sites like, for people, for free? ;-)

[19:30] <nothingmuch> people like me, for example?

[19:31] <fglock> how to test if 2 objects belong to the same class?

[19:31] <cwest> irc.perl.org/#jsan for further jsan stuff mkay?

[19:33] <obra> nothingmuch: for what project? ;)

[19:33] <obra> I have an intern who's about to start working on the new rt.cpan.

[19:34] <Limbic_Region> fglock - ref ?

[19:34] <obra> cwest: so, it'll be a matter of writing another import tool, I hope

[19:34] <fglock> i tried $a.isa( $b.meta ) but it complains

[19:34] <Limbic_Region> well - as in p5, I am not sure ref is the best way, but it should work in the majority of cases

[19:35] <fglock> thanks

[19:36] <Limbic_Region> walang anuman

[19:36] <fglock> although it may break on inheritance

[19:36] <Limbic_Region> I am sure there will be a better way if there isn't already

[19:37] <cwest> obra: cool

[19:37] * Limbic_Region really isn't up to speed on p6 OO and introspection

[19:39] <gaal> hi all

[19:40] <Limbic_Region> salutations gaal

[19:40] <gaal> hey l~r

[19:43] <Limbic_Region> out of curiosity - should tests for unimplemented features like t/builtins/strings/trans.t be eval'd or todo'd or something?

[19:43] <gaal> :todo<feature>

[19:43] <gaal> and sure, maybe eval_is too, if they don't parse

[19:43] <gaal> see t/README

[19:44] <Limbic_Region> they are marked todo

[19:44] <Limbic_Region> hmmm

[19:44] <svnbot6> r5326, luqui++ | Added a few more notes.

[19:44] <nothingmuch> obra: mostly for a personal TODO list + my projects

[19:45] <nothingmuch> for 50% of my project there's rt.cpan.org, but I don't use it that often

[19:45] <nothingmuch> i need it on my localhost

[19:45] <nothingmuch> but I also want it as a wiki

[19:45] <obra> what do you need out of it on localhost?

[19:45] <obra> and what about the wikiness do you want?

[19:45] <nothingmuch> so there's no authentication or processes, and that's where rt doesn't fit in the picture

[19:45] <obra> _no_ auth?

[19:45] <nothingmuch> because I want it fast and disconnected

[19:46] <obra> but also possibly visible to others?

[19:46] <nothingmuch> basically every bug, event, whatever is a wiki page

[19:46] <nothingmuch> completely open

[19:46] <obra> you're daring

[19:46] <nothingmuch> (in my scenario, there's just no auth, because it's just me)

[19:46] <obra> *nod*

[19:46] <nothingmuch> wiki pages have some keywords

[19:46] <nothingmuch> if you have an 

[19:46] <nothingmuch> 'event <<some_date>>' in the page

[19:46] <nothingmuch> it shows up on the calendar

[19:46] <obra> you've looked at backpack?

[19:46] <nothingmuch> if it's title contains 'BUG:' it's an issue

[19:47] <nothingmuch> if the first or last word is 'closed', it doesn't show up on the pending list

[19:47] <nothingmuch> if it has unidiffs attached it shows up eralier ;-)

[19:47] <nothingmuch> what's backpack?

[19:47] <obra> backpackit.com

[19:47] <obra> I don't think you want that much dwimmyness

[19:47] <nothingmuch> if it looks like a TODO i have an interface to check it off

[19:48] <obra> it leads to things being a little hard to use.

[19:48] <nothingmuch> right, that's the problem

[19:48] <nothingmuch> it's the kind of software you write for yourself

[19:48] <nothingmuch> and I won't get around to it ;-)

[19:48] <gaal> nothingmuch: you know, your MMD concerns would make a great Israel.pm talk if you want to give one sometime.

[19:49] <nothingmuch> hmm... i don't see how

[19:49] <gaal> present a problem

[19:49] <gaal> show approaches

[19:49] <gaal> explain why yours wins :)

[19:49] <nothingmuch> hah

[19:49] <stevan> fglock: $a.isa( $b.meta ) wont work, since .meta will return the metaclass, and not hte class name

[19:49] * gaal is hoping to finally understand it :-)

[19:50] * nothingmuch considers

[19:50] <stevan> fglock: $a.isa( $b.ref ) should work for now

[19:50] <stevan> fglock: $a.isa( $b.ref ) || $b.isa( $a.ref ) if you want to check "both ways"

[19:51] <nothingmuch> obra: baackpackit looks almost like what I want

[19:51] <obra> *nod*

[19:51] <stevan> gaal: it will likely be easier to understand when nothingmuch is finished with implementing it in the prototype metamodel

[19:51] <obra> nothingmuch: it may be worth trying it a bit

[19:51] <stevan> right nothingmuch ?? *hint* *hint*

[19:51] <gaal> wait, nothingmuch said moosish on p6-l. i think i'll undersatand everything from now on.

[19:52] <nothingmuch> stevan: uh, yes

[19:52] <nothingmuch> gaal++

[19:52] <gaal> moose++

[19:52] <nothingmuch> i didn't even notice i did that

[19:52] <nothingmuch> your brainwash is amazing

[19:52] <nothingmuch> obra: i need everything in one big system

[19:52] <nothingmuch> like 'call foo' becoming my front page when I put it in, and i haven't ticked it off for 3 days

[19:52] <nothingmuch> because the 'call name' pattern does that

[19:52] <nothingmuch> for example

[19:53] <nothingmuch> it's basically my life, but in a wiki

[19:53] <obra> nothingmuch: makes plenty of sense

[19:53] <obra> I want it too 

[19:54] <nothingmuch> let's get ingy to write it

[19:54] <nothingmuch> awwaiid promised me he'll do something like that

[19:54] <nothingmuch> and he did, to some extent

[19:54] <nothingmuch> but only for issue tracking

[19:55] * nothingmuch tries backpack

[19:56] <obra> what is it for issue tracking?

[19:56] <nothingmuch> he hacked up oddmuse wiki

[19:56] <nothingmuch> it basically has the issue aggregation stuff, with state keeping

[19:58] <Limbic_Region> out of curiosity - is anyone using "state" declared variables - at all?

[19:59] * nothingmuch hasn't used it yet

[19:59] <nothingmuch> i keep forgetting it existrs

[20:00] <Limbic_Region> in thinking about the problem of cache variables in p5 - I think it would be a nice improvement

[20:00] <nothingmuch> obra: backpack doesn't have one thing: automatic aggregation of pages into meaningful data

[20:00] <obra> nothingmuch: correct

[20:00] <Limbic_Region> you have a cache that belongs to a particular sub - you don't have to pass it in each time, or declare package level variable, or weird closure tricks

[20:00] <Limbic_Region> just declare it with state

[20:01] <nothingmuch> Limbic_Region: good point =)

[20:01] <nothingmuch> i think I wrote an email with an example sub that had a cache, but never really used one myself

[20:01] <nothingmuch> Limbic_Region++

[20:01] <nothingmuch> i'd like to be able to do one more thing

[20:01] <nothingmuch> create an aggregator page

[20:01] <Limbic_Region> well - I have several examples of p5 code that I jumped through hoops for that I was going to port to p6

[20:01] <nothingmuch> which instantiates certain aggregators

[20:01] <nothingmuch> that's how you wrap it all together, and organize, too

[20:02] <Limbic_Region> and while I was at it - I was going to contribute other examples if people had them

[20:02] <nothingmuch> i nodded off in the lightning talk about the wikiwikiweb stuff

[20:02] <nothingmuch> does anybody have slides/data/info?

[20:03] <nothingmuch> cwest: sorry, i forgot rsync on minutely... fixed

[20:06] <nothingmuch> stevan: okay, getting busy

[20:06] <stevan> nothingmuch: about time ... sheesh

[20:06] <nothingmuch> =D

[20:06] <stevan> nothingmuch: wanna SEE?

[20:07] <nothingmuch> sure

[20:07] <nothingmuch> one sec, i'll start up ingy's trick

[20:11] <nothingmuch> hmm

[20:14] <nothingmuch> GRR!

[20:17] <svnbot6> r5327, fglock++ | Span.pm passes more tests

[20:22] <Limbic_Region> nothingmuch - I posted a meditation on it http://perlmonks.org/index.pl?node_id=473561

[20:22] <Limbic_Region> depending on the responses - I will consolidate examples and create a state sub directory in examples to put all of them in

[20:23] <nothingmuch> stevan: ssh is annoying me.

[20:23] <nothingmuch> can you punch your NAT if you have one?

[20:24] <nothingmuch> Limbic_Region++ # nice post

[20:25] <nothingmuch> Alfred Brendel is demi god

[20:25] <nothingmuch> luqui - if you backlog you better get some

[20:28] * Limbic_Region notes the time and calls it a weekend

[20:29] <stevan> nothingmuch: why dont you sketch out the code first, then we can work on it

[20:29] <stevan> right now $work is calling me

[20:30] <nothingmuch> okay

[20:50] <nothingmuch> eep... how did I close this? /me doesn't remember doint that

[21:00] <svnbot6> r5328, fglock++ | added "Set::Infinite::Functional"

[21:10] *** knewt__ is now known as knewt_

[21:52] <cwest> seen nothingmuch

[21:52] <jabbot> cwest: nothingmuch was seen 1 hours 2 minutes 24 seconds ago

[22:09] * nothingmuch exposes himself

[22:10] <nothingmuch> oh come on, that's bound to get more attention than this

[22:10] * nothingmuch prods cwest ;-)

[22:10] * nothingmuch sighs and unexposes himself

[22:10] * Limbic_Region tells nothingmuch that it can't be called prodding with something THAT small

[22:11] <nothingmuch> =

[22:11] <nothingmuch> )

[22:11] <nothingmuch> at least someone is listening/getting my jokes

[22:11] <Limbic_Region> nothingmuch - did you read BrowserUk's reply to my state meditation?

[22:11] <Limbic_Region> http://www.perlmonks.org/?node_id=473561

[22:11] <nothingmuch> not yet

[22:12] <Limbic_Region> oh - it is official btw - Jean's approval letter came today - she can now come and go as she pleases (permanent residency visa - also knowns as green card)

[22:15] <nothingmuch> woot!

[22:15] <nothingmuch> are you guys working on a citizenship?

[22:16] <nothingmuch> Limbic_Region: i found that a bit of a pointless discussion... I think he was sort of straying

[22:16] <nothingmuch> brb

[22:17] <cwest> heya

[22:17] <cwest> I don't need you anymore

[22:17] <cwest> seen autrijus

[22:17] <jabbot> cwest: autrijus was seen 9 hours 13 minutes 47 seconds ago

[22:19] <Limbic_Region> nothingmuch well, the point of the meditation was to get people thinking about state variables and how they might be useful

[22:19] <Limbic_Region> I don't think BrowserUk undermined that - though it isn't the direction I was hoping for

[22:19] <Limbic_Region> his response boils down to - don't use state variables as a replacement for class variables when doing OO

[22:19] <Limbic_Region> that I agree with

[22:19] <Limbic_Region> the argument that it will be easy to make that mistake is false though - as p6 OO looks visually a lot different 

[22:20] <Limbic_Region> you won't confuse a method with a sub

[22:26] <nothingmuch> right

[22:27] <Limbic_Region> $larry replied btw

[22:27] * Limbic_Region is getting the desired response

[22:28] <nothingmuch> callooh, callay

[22:38] <dudley> Limbic_Region++ # Very tactful response to BrowserUK. Impressive social skills (for a hacker, anyway ;-) )

[22:40] <Limbic_Region> dudley - for the most part, we are pretty amicable at the Monastery

[22:40] <Limbic_Region> and even when we get pissy - we tend to forgive quickly

[22:41] <Limbic_Region> there are a few exceptions - but by and large it is a very synergetic community

[22:41] <Limbic_Region> oh, dudley is gone already

[22:55] <nothingmuch> http://www.crocuta.net/AtTheGayBar.mov

[23:02] <autarch> that's awesome

[23:04] <revdiablo> Limbic_Region++ # good Meditation

[23:05] <nothingmuch> more from the same blog: http://www.koreus.com/files/200502/hollowmen.html

[23:05] <nothingmuch> the blog: http://bigpicture.typepad.com/writing/music/

[23:10] <svnbot6> r5329, fglock++ | Set::Infinite::Funcional can do "union"

[23:23] <nothingmuch> wow, good questions on perlmonls

[23:24] <nothingmuch> err, perlmonks

[23:24] <nothingmuch> by good i mean fun to answer

[23:24] <Limbic_Region> PerlMonks rawks

[23:26] * nothingmuch can't resist the temptation of actually planning out a ??{ } based parser for this guy: http://perlmonks.org/?node_id=473596

[23:26] <nothingmuch> it should be pretty clean

[23:26] <nothingmuch> i'll have a go at it

[23:26] <nothingmuch> i've always wanted to use local in regexes =)

[23:27] <Limbic_Region> nothingmuch - I earmarked that one for tomorrow

[23:27] <Limbic_Region> I didn't have time to give a proper reply

[23:27] <Limbic_Region> but I was only going to suggest an approach

[23:27] <Limbic_Region> not a working implementation

[23:28] <Limbic_Region> though I very much look forward to yours

[23:28] <nothingmuch> this one was also nice: http://perlmonks.org/?node_id=462487

[23:28] <nothingmuch> well, i'll post it if you promise to upvote

[23:28] <nothingmuch> i'm whoring for sainthood

[23:28] <nothingmuch> ;-)

[23:37] * geoffb finally comes out from under huge IRC backlog

[23:37] <geoffb> wheee . . . 

[23:38] <geoffb> And on another note, it looks like I will be able to do OSCON in Portland (chromatic++ for making that possible) -- so who from in here will be there?

[23:39] * nothingmuch shifts uncomfortably

[23:39] <geoffb> ?

[23:39] <autarch> I'll be there

[23:39] <autarch> I am, like, _so_ there

[23:40] <nothingmuch> geoffb: won't be there

[23:40] <geoffb> autarch, you were one of the guys working on HTML::Mason, yes?

[23:40] <nothingmuch> autarch: i wanted to thank you for your modules

[23:40] <nothingmuch> you are a wonderful wonderful man

[23:40] <nothingmuch> thank you for saving the world so many man hours

[23:40] <autarch> heh, DateTime.pm is all fubared

[23:40] <autarch> mostly cause I tried to make something too simple that's inherently complex

[23:40] <geoffb> And BTW, DateTime in Perl 5 SAVED MY PROJECT at my last company.

[23:40] <autarch> geoffb: yes, I work(ed) on Mason

[23:40] <autarch> heh

[23:41] <autarch> just be careful about date math when the object's have a time zone

[23:41] <autarch> it's a little wonky

[23:41] <geoffb> Ah.  Two companies ago I worked for Jon Swartz, so I've been an H::M adherent ever since

[23:41] <autarch> geoffb: what company were you at then?  CMP?

[23:41] <geoffb> AvantGo -- before they got bought

[23:41] <autarch> oh right

[23:42] <geoffb> autarch, I hope you're referring to P6 DateTime having wonky time zone math, because the time zone math was a very large part of what I used DateTime *for* in P5.

[23:43] <autarch> no, P5

[23:43] <autarch> you'd have to do some pretty specific operations to uncover it

[23:43] <geoffb> oh, OUCH.

[23:43] * geoffb hopes fervently that I didn't trip those operations.

[23:43] <autarch> basically, I need to split up all the math stuff to force the user to pick between math on local datetime components, or UTC components

[23:44] <autarch> right now it kind of mixes them, which mostly works, except when it doesn't

[23:44] <geoffb> BTW, it didn't then, but have you since added to DateTime a constructor that can build a UTC DateTime object Really Damn Quick?  I had to subclass just to make a fast enough DateTime constructor for my project . . . 

[23:44] <autarch> this is mostly tickled by $dt1->subtract_datetime($dt2)

[23:44] <autarch> I could special case for UTC, I guess

[23:44] <autarch> I'm trying to use the P6 stuff to prototype a cleaner API which I may backport to P5

[23:44] <geoffb> (My code actually special-cased both UTC and 'floating', because the fastpath is the same)

[23:45] <geoffb> nodnod

[23:45] <autarch> almost the same

[23:45] <autarch> second => 60 is only valid for UTC, not floating

[23:45] * autarch really really really hates leap seconds

[23:45] <geoffb> It happened that in my case, that didn't matter, but point taken

[23:45] <autarch> if everyone would just use UTC, my life would be so much easier ;)

[23:45] <geoffb> heh

[23:46] <autarch> but everyone wants to give their _local_ time to a constructor, which makes for nightmares

[23:46] <geoffb> which is the one that's almost the same as UTC without leap seconds?  TAI?

[23:46] <autarch> yes, TAI

[23:46] <autarch> I sure as hell can't expect people to put that in the constructor, lovely as that would be

[23:46] <geoffb> I kept everything in UTC internally, and converted back and forth to user timezones on input and output

[23:47] <geoffb> but when I did a calendar year summary of events, all those conversions got SLOW

[23:47] <autarch> ah, the time zone conversion bits are all bug-free, AFAIK

[23:48] <autarch> it's basically isolated to the "what's the difference between these two datetimes" bits

[23:48] <geoffb> I believe I did all duration math in UTC.  That should work correctly, I hope?

[23:48] <autarch> yes

[23:48] <autarch> that's a very very good idea ;)

[23:48] <geoffb> good

[23:49] <autarch> the thing is that people want "2005-11-01T10:00:00 - 2005-08-01T10:00:00 = 3 months"

[23:49] <autarch> regardless of local time zone

[23:49] <autarch> but if you look at UTC it could be off by an hour because of DST changes in between two dates

[23:49] <geoffb> So for your Perl 6 version, I guess my biggest API wish is that there be a way to say "I've guaranteed elsewhere that my inputs are correct, please do construction and suchlike in the fastpath"

[23:49] <geoffb> semantically, at least

[23:49] <autarch> someone's working on that already

[23:50] <autarch> He came up with a DateTime::Diet module that'll do that

[23:50] <geoffb> someone++

[23:50] <geoffb> :-)

[23:50] <autarch> the trick is to let DateTime::Format::* modules use it

[23:50] <autarch> Rick Measham

[23:50] <geoffb> (Rick Measham)++ then

[23:50] <Darren_Duncan> I have a question regarding the common or proper terms of speech regarding continuations ...

[23:51] <autarch> It's actually a cute little trampoline.  It just blindly accepts your inputs and stores them.  It provides a small subset of the DT.pm methods, and then turns itself into a proper DT.pm object for methods it doesn't implement

[23:51] <Darren_Duncan> supposedly, with a continuation, receiving an argument and returning a value is exactly the same kind of thing

[23:51] <autarch> this is great if you know your data is valid, but would lead to all sorts of wacko late-appearing errors otherwise

[23:52] <geoffb> autarch, nice implementation concept.  Go Rick.

[23:52] <Darren_Duncan> as if there was no distinction between functions and procedures; a function's return value is simply an argument that can be written to

[23:52] <autarch> yeah, it's cool

[23:52] <Darren_Duncan> my question is ...

[23:52] <nothingmuch> ugh

[23:53] <Darren_Duncan> what is a good generic name for what 'foo' is if 'foo' can be either a value passed in or a value passed out of a routine

[23:54] <geoffb> So autarch will be at OSCON in Portland, and nothingmuch won't (sorry to hear that, BTW!).  Anyone else?

[23:54] <Darren_Duncan> I plan to be at OSCON in Portland

[23:55] <geoffb> (y)

[23:55] <Darren_Duncan> btw, geoffb, are you still looking for people to room with?

[23:56] <geoffb> Nope -- managed to convince my Dad to house me.

[23:56] <Darren_Duncan> so you have family in town ... nice

[23:56] <Darren_Duncan> how far from the convention center?

[23:56] <geoffb> Well, Lake Oswego, but he says its about 10 min from convention center

