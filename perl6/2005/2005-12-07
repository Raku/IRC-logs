[01:57] <autrijus> I'm in debby's talk about how much perl5 sucks from a teaching-it-to-undergrads point of view

[01:57] <autrijus> many many excellent points

[01:57] <Khisanth> teaching it sucks but grading it sucks even more!

[01:58] <autrijus> Khisanth++

[01:58] <Khisanth> imagine a young tybalt89 in your class ...

[01:59] <Khisanth> which conference are you at ?

[01:59] <autrijus> osdc.com.au

[02:03] <jdv79> is it really that bad?

[02:03] <jdv79> i'd like to see the slides on that one

[02:04] <autrijus> nod, will ask for it

[02:04] <autrijus> almost all of it it's addressed by p6

[02:05] <wolverian> what isn't? that's the interesting part..

[02:05] <autrijus> multiparadigm in particular

[02:07] <autrijus> completely different things look similar

[02:07] <autrijus> eg {...(hash)} vs {...(closure)} 

[02:08] <Khisanth> oO

[02:08] <wolverian> make hash { } enforced? :) 

[02:08] <Khisanth> the freepan wiki is a bit messed up ...

[02:12] <autrijus> debby said she'll make the slides available online and ping me about it

[02:12] <autrijus> apparently a lot of people want task and tag based navigation for cpan.

[02:12] <autrijus> (heck, I want it too :))

[02:13] <Khisanth> like the openjsan tag cloud?

[02:14] <autrijus> yup

[02:14] <Khisanth> nice, if the tags are accurate :)

[02:24] <autrijus> the author gets to decide and the tasklist people get to approve

[02:24] <autrijus> so probably going to be accurate to some degree

[02:49] <autrijus> oh wow. http://loveperl.com/

[02:50] <autrijus> maybe _that_ is the solution for cpan navigation

[02:51] <dduncan> that is funny

[03:15] <obra> autrijus: heh

[05:55] <what3> this doesn't seem to work: my $userinput = $*IN;

[05:55] <what3> is this supported?

[05:55] <what3> has anyone else tried it?

[05:58] <Khisanth> what3: my $userinput = =$*IN;

[05:59] <what3> thx that worked

[05:59] <what3> i don't understand the extra "=" though

[05:59] <Khisanth> the first is the assignment operator the second is the erm I forgot the name

[05:59] <Khisanth> I think the perl6 version of <>

[05:59] <what3> oh ok

[05:59] <Khisanth> unless there is a =<>

[06:00] <what3> yeah i was reading the equivalents of the reserved variables in the pugs docs but i didn't see that extra "=" in there

[06:00] <what3> maybe i missed it

[06:00] <gaal> unary = is "next", which is like readline on filehandles but more generally an iterator's next "thing".

[06:01] <what3> ah ok

[06:01] <what3> thx for the info guys

[06:02] <gaal> Khisanth: there's not a =<> directly; but it turns out eg. say =<somefile> acts like cat because <> is a quote operator, and = will open a file if it isn't opened yet.

[06:03] <Khisanth> like cat? but isn't = lazy?

[06:04] <gaal> but say isn't...

[06:05] <gaal> anyway it's a golf thing; <> quotes words so you can't say =<a filename with spaces>

[06:05] <gaal> or therefore generally =<<$filename>>

[06:06] <gaal> = is context dependent. fire up an interactive pugs and enter

[06:06] <gaal> =<AUTHORS>

[06:07] <gaal> you'll only get the first line, since pugs' interactive valuation imposes scalar context

[06:07] <gaal> no wait, that's not true.

[06:08] <gaal> you do get only one line, but I can't explain why :)

[06:09] <gaal> e.g. when you say

[06:09] <gaal> my @arr = <a b c>

[06:09] <gaal> you get the complete array, obviously not in forced scalar context.

[06:09] <gaal> perhaps there's DWIM code there.

[06:10] <gaal> $work &

[08:21] <nothingmuch> what does it mean for a method to be declared as 'type myName() const {  }' ?

[08:22] <wolverian> in what language?

[08:26] <nothingmuch> shit

[08:26] <nothingmuch> err, i thought i was posting in #c++

[08:26] <wolverian> :)

[08:30] <nothingmuch> dum dee dum la la al aaaaaaa

[09:08] <meppl> guten morgen

[09:09] <rafl> Good morning

[09:09] <rafl> kane_: I've got the repository layout into a good shape yesterday.

[09:10] <kane_> cool

[09:10] <kane_> did you commit that to S22?

[09:10] <rafl> Only some more explanations are missing. Then I'll push it.

[09:11] <rafl> should be done until 3pm.

[09:11] <rafl> Maybe you can hold yourself back from commiting to S22? Merging ascii art is pain.. :-)

[09:11] <kane_> neat, i'm looking forward to reading it

[09:12] <kane_> heh.. shouldn't it Just Work? as you're merely adding a section?

[09:13] <rafl> Yes. But I had that problem once with another project. I don't want to experience it again ;-)

[09:17] <rafl> Maybe I get it done a bit earlier. I'll have a practical course at 11.30 which mainly consists of waiting..

[09:18] <kane_> i'll hold off with commits then :) 

[09:19] <rafl> Thank you.

[09:19] * rafl runs to university

[11:39] *** nnunley_ is now known as nnunley

[14:58] <xinming> since PIL stands for Pugs Intermediate Language, How about PIR?

[14:58] *** stevan__ is now known as stevan

[15:03] <GeJ> Parrot Intermediate Representation

[15:04] <GeJ> according to : http://www.parrotcode.org/docs/intro.html

[15:32] <xinming> hm, by the way, will perl 6 use kwid format by default instead of pod?

[16:31] <masak> xinming: as for pod being default, I haven't heard anything suggesting that. my guess is that they well be about equally default :)

[16:36] <rafl> Doesn't say the perldoc synopsis draft something about that?

[16:38] <xinming> masak: I've read the S26, It's said that both pod and kwid will be supported by default. :-/

[16:39] <rafl> Why should we have a default at all?

[16:40] <rafl> It we recognize kwid syntax it's kwid, when we see some pod, it's pod.

[16:40] <xinming> rafl: hmm, default will make people switch, hmm, Maybe I think I should say suggest. :-P

[16:41] <rafl> What's the benefit of switching from A to B?

[16:41] <rafl> Both do the same thing.

[16:41] * pd wanders off to look up WTF a 'kwid' is

[16:42] <rafl> pd: Wee docs/AES/S26draft.pod

[16:42] <pd> aha, "KWiki Inline Documentation"

[16:42] <xinming> rafl: How about kernel 2.4 or 2.6 series of Linux? :-) they both do the same thing. making a system run.

[16:42] <rafl> Err, s/W/S/

[16:43] <xinming> well, In fact, I prefer the newer thing. As why It comes out is because of the lack of the old ones. though not to replace the old ones.

[16:44] <pd> hrm. Yep, I guess in theory I'd prefer pod, just because I like multi-line comment blocks better for such things.

[16:44] <rafl> xinming: The benefit of 2.6 about 2.4 is much clearer. What features does kwid have that pod doesn't have?

[16:46] <xinming> rafl: S26 give an example of nested list.

[16:46] <xinming> and said that in pod, it will be much longer

[16:47] <xinming> though we don't need nested list for every document. :-)

[16:47] <rafl> xinming: pod can do the same.

[16:47] <rafl> xinming: But linux 2.6 can do things that 2.4 can't do, so I think it's not a good comparison.

[16:48] <pd> rafl, how so, really...

[16:48] <rafl> pd: Err?

[16:48] <pd> rafl, linux 2.6 vs. 2.4

[16:48] <pd> it seems to me that they're broadly comparable

[16:49] <rafl> preemtive stuff for example.

[16:49] <pd> so they changed some locks around; userspace only notices that it's slightly more responsive when it works

[16:50] <pd> that'd be like saying that you can't compare any two flavors of Unix because one invariably has a different implementation

[16:50] <rafl> That's one of the features that 2.4 doesn't have. There are some more, of course.

[16:51] <pd> however, since flavors of Unix generally share the same functionally equivalent syscalls, you can in fact compare them

[17:22] <fglock> how do I 'push' a pair into a hash?

[17:23] <fglock> $h{$p.key}=$p.value looks too verbose

[17:24] <fglock> the pair comes from a function, so I would need a temporary variable to do this way

[17:38] <fglock> another question: how to slurp() from stdin?

[17:43] <cognominal> "42" ~~ rx| qw( 42 ) | crashes pugs :(

[17:45] <fglock> cognominal: you may have to use a newer pugs (it works here)

[17:45] <fglock> but you want "42" ~~ rx| 42 |

[17:50] <cognominal> now, I want to test a match on list or an array 

[17:51] <cognominal> that should work according to my underrstanding of the spec about the ~~ operator

[17:56] <fglock> do you mean: 42 ~~ any( @a )

[17:58] <fglock> I don't know if this helps - it returns a Junction (bool::false | bool::true) instead of bool::true

[17:59] <fglock> but this works: ?( 42 ~~ any(1,2,3,6,42) )

[18:02] <xinming> fglock: my $x = ~list(=$*IN);

[18:02] <xinming> fglock: for slurpy the stdin

[18:03] * xinming isn't so sure about this.

[18:03] <xinming> it seems that pugs have a bug with get value from stdin,

[18:04] <fglock> xinming: it works - thanks!

[18:05] <xinming> ?eval my $x = ~("haha\n","test\n"); $x.perl

[18:05] *** evalbot_8085 is now known as evalbot_8098

[18:05] <evalbot_8098> "\\\"haha\\n test\\n\"" 

[18:05] <xinming> hmm, I think I found another bug. :-P

[18:14] <xinming> ?eval my $x = ~("haha","test"); $x.perl

[18:14] <evalbot_8098> "\\\"haha test\"" 

[18:17] <xinming> fglock: my $x = ~list(=$*IN).as("%s",'');

[18:17] <xinming> fglock: this is the correct version, otherwise, pugs will add a space before each line except the first line.

[18:19] * xinming wonders if add line precedure should be disabled if the previous line ends with "\n"

[18:19] <xinming> s/add line/add space before line/

[18:48] <cognominal> fglock: S05 says # An interpolated array:

[18:48] <cognominal>      / @cmds /

[18:48] <cognominal> is matched as if it were an alternation of its elements:

[18:49] <cognominal> I agree that using any is somewhat equivalent

[19:39] <rafl> kane_: Sorry. No time for S22 during the day. Writing the explanation now.

[19:54] *** _SamB_ is now known as SamB

[20:33] <particle_> any feather users know if & where bison/yacc is installed?

[20:33] <particle_> ...where are my manners... hello all!

[20:33] <Limbic_Region> salutations particle_

[20:34] <Limbic_Region> if which yacc doesn't turn up anything and neither does man yacc I would say it is in a very non-standard directory if it is installed at all

[20:34] * Limbic_Region has a feather acct (and is using it to chat at this very moment) but doesn't have shell access from work

[20:34] <particle_> agreed.

[20:35] <particle_> should i install it locally, or request it for everyone? i have a feeling more than one parrot developer will be needing it

[20:53] <Limbic_Region> *shrug* I don't use feather for anything other than IRC access

[20:54] * particle_ emailed juerd

[20:57] <fglock> cognominal: re '/ @cmds /': this depends on PGE, which is still under implementation

[20:58] <fglock> (Parrot Grammar Engine)

[20:59] <particle_> interpolation of perl vars is not yet implemented in PGE's P6Rules compiler

[21:09] <kane_> rafl: no worries

[21:09] <fglock> what does 'Invert' means (in a PIL App node)

[21:11] <particle_> juerd++

[21:13] <fglock> ok, found it - it doesn't mean Invert, but Invocant :)

[21:19] <rafl> kane_: pushing.

[21:19] <rafl> kane_: I guess my phrases aren't very clear. Maybe you can improve it a bit.

[21:20] <rafl> (If you get my idea :-)

[21:29] <kane_> i'll take a peek tomorrow morning ;)

[21:33] <rafl> kane_: It's not that much? Maybe you can take a quick look now? If you're fine with it I'd do some more implementation work this night.

[21:37] <rafl> kane_: I like the JIB::Inst and JIB::Package::* stuff, btw.

[21:39] <rafl> kane_: That does almost everything that I wanted WRT different installation types.

[21:49] <kane_> rafl: i'll pull it now then

[21:49] <kane_> rafl: thanks, it took some working out, but i think it DTRT now

[21:53] <rafl> kane_: Don't spend to much time with looking at my ascii art. The principle is explained below it.

[21:59] <kane_> rafl: the design makes sense -- we'll have to pick a few configurations we think are useful.. if we did all of them, they're near infinite :)

[22:16] <rafl> kane_: Yes. Therefor I choose author, module name and language.

[22:16] <rafl> kane_: Do you have a better default?

[22:16] <kane_> rafl: nope, sounds good

[22:17] <kane_> it's author & module now for cpan, and that works pretty well

[22:17] <rafl> OK.

[22:17] * rafl starts JIB::Repository hacking again

