[01:45] <ImustDIE> has anyone had any luck getting perl 5 modules to work in pugs on windows?

[04:28] <stevan> hmmm, svn.openfoundry.org is still down?

[04:28] * stevan really needs to install svk

[06:37] <nothingmuch> morning

[06:38] <nothingmuch> chromatic: since you're always reading logs... ping ;-)

[09:35] <nothingmuch> our supermarket shipment has arrived

[09:35] <nothingmuch> we got this wonderful kind of chocolate

[09:35] <nothingmuch> "aerial" instead of "airy"

[09:35] <nothingmuch> =P

[10:05] *** Maddingue__ is now known as Maddingue

[10:47] <clkao> is openfoundry fucked again?

[10:47] <clkao> forunately most of you have svk now... 

[10:50] <nothingmuch> =D

[10:50] <nothingmuch> clkao++

[11:13] <masak> clkao: i don't grok svk yet

[11:13] <masak> i like it, but it's difficult

[11:14] <masak> my current project is to set up a local svk depot for personal use

[11:14] <clkao> see if http://svk.elixus.org/?VisualBook helps :) it's hot

[11:14] <masak> thx

[11:15] <masak> clkao++ # visual book looks very promising

[11:15] <masak> just what i needed

[11:15] <masak> lunch &

[11:49] <Aankhen``> SVN is down?

[11:50] <Aankhen``> That's it.

[11:50] <Aankhen``> SVK, here I come.

[11:50] <Aankhen``> Of course, I am completely ignorant of how that makes a difference, but it's as good an excuse as any. ;-)

[12:06] <nothingmuch> Aankhen``: http://svk.elixus.org/?VisualBook

[12:06] <nothingmuch> clkao just mentioned it an hour or so ago

[14:02] * nothingmuch makes moos sounds

[14:02] <nothingmuch> by moos i mean moose, ofcourse

[14:03] <QtPlatypus> Moos would be cow sounds.

[14:30] * masak makes mousse sounds

[14:31] <masak> i guess that means i'm silent

[14:33] <nothingmuch> http://www.squeak.org/

[14:35] * QtPlatypus amkes platypus sounds.

[14:35] <nothingmuch> is that the macos chime?

[14:36] <autrijus> (tropical cyclone)-- # likely to delay svn.openfoundry.org's revival

[14:36] <autrijus> (and also makes life less fun -- can't go outside for the next 48+ hours)

[14:37] <QtPlatypus> (This reminds me of the clasic OO example)

[14:37] <nothingmuch> autrijus: as if you would go outside on a nice day

[14:37] * autrijus stares at random nonhealty fridge food

[14:37] <autrijus> nothingmuch: oh, I would usually go outside for food.

[14:37] <nothingmuch> or diet coke =)

[14:37] <autrijus> that too.

[14:37] <nothingmuch> is it really bad? or just bad enough that you can't carry your laptop with you? ;-)

[14:37] <autrijus> but this one is the strongest in at least 5 years

[14:38] <autrijus> and taipei will be among the primary affected areas... it's landing in 2 hours iirc

[14:38] <autrijus> already the wind makes it very hard to walk on the street.

[14:38] <nothingmuch> so you've got 2 hours to stock up on food =)

[14:38] <autrijus> yeah, just did

[14:38] <nothingmuch> you are confusing

[14:39] <autrijus> hm?

[14:39] <nothingmuch> i thought you just said you are not going out

[14:39] <nothingmuch> but then you said you just did

[14:39] <autrijus> I thought _you_ are confusing -- I mean the confusing ranting on MMD in the typeclasses thread with dubious relevancy

[14:39] <nothingmuch> so i got confused

[14:40] <nothingmuch> it's very relevant

[14:40] <autrijus> I just returned to my place; I can't go out in the next 48 hours.

[14:40] <nothingmuch> well, that means you're bound to be more productive

[14:40] <nothingmuch> no time wasted walking where there is no place to sit and type

[14:40] <nothingmuch> =D

[14:40] <autrijus> oh and why would camels deny their lambda nature? that's even more confusing of you

[14:41] <nothingmuch> lambda camels in denial deny parts of perl 6, not their lambdaness

[14:41] <autrijus> that is a curious use of the word 'denial'

[14:41] <autrijus> but ok, that's less confusing :)

[14:41] <nothingmuch> nevermind, it was just a silly joke =)

[14:42] <nothingmuch> oh my, darcs uses preprocessor macros

[14:42] <nothingmuch> what the hell for?

[14:42] <autrijus> the line between silly jokes and serious realities in p6l is so blurred it's a fog

[14:42] <autrijus> mm, platform or ghc-version #ifdef maybe?

[14:42] <nothingmuch> why would someone need preprocessor macros for a functional language for anything except optional features?

[14:43] <nothingmuch> Subject: [darcs-devel] darcs patch: Rename bound variable in fromJust macro. 

[14:43] <nothingmuch> that doesn't sound like it

[14:43] <autrijus> aw. well, I guess TH is not popular enough yet

[14:43] <nothingmuch> #define fromJust (\m -> case m of {Nothing -> bug ("fromJust error at "++__FILE__++":"++show (__LINE__ : ....

[14:43] <nothingmuch> that doesn't look like it

[14:43] <autrijus> aha.

[14:43] <nothingmuch> and the commit message says:  Could we please use Lisp macros instead?  

[14:43] <autrijus> it's for adding positions of errors

[14:43] <nothingmuch> (presumably TH is good enough to fill this, right?)

[14:44] <autrijus> yes, as is the mundane "assert" feature of GHC.

[14:44] <autrijus> but maybe the contributor knows neither of this... maybe

[14:44] <nothingmuch> submit a patch and make darcs a little less hairy?

[14:44] <nothingmuch> Julisz is big on Haskell mojo, so unlikely

[14:44] <autrijus> well, then maybe it is considered cleaner

[14:44] <autrijus> (which in a way it is)

[14:44] <nothingmuch> i dunno

[14:45] <autrijus> I don't quite care. :)

[14:45] <nothingmuch> regardless, darcs has been getting a surge of patches lately, and git progress is nice... it's making me happy =)

[14:45] <autrijus> cool =)

[14:52] <nothingmuch> ".... but anyone who ever had a heart..."

[14:52] * nothingmuch pathologically avoids link errors on linux (which work on aix, and I haven't even tested on other platforms))

[14:53] <putter> 53m/s, yipes! http://www.cwb.gov.tw/V4e/typhoon/news/typhoon-news.htm

[14:53] <putter> (it's so nice to see weather info in m/s... happy sigh)

[14:54] <nothingmuch> our forcast where I live is: hot and dry

[14:54] <nothingmuch> a little hotter, just as dryu

[14:54] <nothingmuch> less hot, dry

[14:54] <nothingmuch> slight humidity (hot)

[14:54] <nothingmuch> then we get hamsin, which is wonderful weather

[14:54] <nothingmuch> sometimes sunlight becomes yellow, because of all the sand

[14:55] <nothingmuch> like, a real sick mustard type yellow

[14:55] <nothingmuch> then after that it's hot and dry

[14:55] <nothingmuch> then we get 2 months of winter

[14:56] <autrijus> 53m/s is nothing... it's expected to raise a lot more tomorrow

[14:56] <putter> (effect of typhoon at 10 Mm distance... bubkis;)

[14:56] <nothingmuch> 53m/s is nothing, I can take it

[14:56] <nothingmuch> =P

[14:57] <nothingmuch> how do the sky scrapers stay upright?

[14:57] <autrijus> by some engineering feat

[14:57] <autrijus> bubkis?

[14:57] <autrijus> the first google hit says "Bubkis --> can be used to explain Anything! It is a noun *and* an adjective! How exciting!"

[14:57] <putter> satphoto http://www.pagasa.dost.gov.ph/wb/tcupdate.shtml

[14:58] <autrijus> ooh nice.

[14:58] <nothingmuch> what a pretty page

[14:58] <putter> bubkis n. (Yiddish) Zero, nothing (s.a. nada). via American-Australian Slang Dictionary via OneLook.

[14:58] <nothingmuch> the bubkis one, that is

[14:58] <QtPlatypus> nothingmuch: They put moddel skyscrapers in wind tunnels.  Blow typhoon streanth winds at them.  The models that don't get blown away get built.

[14:59] <nothingmuch> QtPlatypus: right, but even with good design it seems difficult

[14:59] <putter> "The models which do get blown away get broken, so they have to build new models."

[14:59] <autrijus> lol

[15:00] * QtPlatypus nods "I worked with an aritecture department.  There was alot of maths involved"

[15:00] <autrijus> "Why do we speak in 'quotes'?"

[15:00] <nothingmuch> "... you know, i've seen every movie you've been in ..."

[15:01] <autrijus> "I get it! It's a form of 'masquerade' where we pretend to speak with the voice of someone else!"

[15:01] <putter> I intended "this a as a way of saying something with an alternate inflection"...

[15:01] <putter> yes

[15:01] <putter> :)

[15:02] <autrijus> ":-)"

[15:02] <putter> lol

[15:02] <nothingmuch> "i'm lou reed"

[15:05] <putter> pity you can just go up 10km.  cyclones are soooo flat. ;/

[15:05] <putter> s/can/cant/

[15:08] * nothingmuch changes to the grateful dead

[15:10] <putter> ok, putter's objective for the day (unless someone has something better):  extract pattern strings from Rules (Internals::foo: Rule->patternstring (easy?), Internals::bar: 'name'->Rule (less so)), then 

[15:11] <putter> Perl6::Grammar::Patterns: new(rxstring) -> hash of needed pattern strings

[15:12] <putter> as a prelude to a slow native rx engine.  So everytime people encounter a PGE coredump, they dont give up and go away.

[15:13] <putter> That's the thought, anyway.

[15:13] <autrijus> native as in p6 native?

[15:13] <putter> yes

[15:13] <autrijus> using pcre to parse rules?

[15:13] <putter> try/die backtrack so nicely :)

[15:14] <autrijus> nodnod

[15:16] <putter> re pcre... yes, I can do one of those (I actually have most of it already written...:) several times:(... and it's fast... but you get burned the minute you want left recursion (which the p6 version can handle, slowly, with a maxdepth), and you sometimes even get burned with right recursion (dunno why).  so...

[15:17] <putter> Thought it would be nice to have a version that is "fully correct, and no excuses".

[15:17] <autrijus> I think using pcre to do PGE style parsing is a very worthy goal.

[15:18] <autrijus> I mean, to do parsing of Perl 6 Rules, not with Perl 6 Rules .

[15:19] <nothingmuch> wow, automator is actually useful... http://www.macosxhints.com/article.php?story=20050529123343874

[15:19] <putter> k.  first step is getting pattern strings back out of rules.  (well, not really a prerequisite, but esthetically it makes more of a difference (vis "rulex "name" "pattern"") than I expected.  Grounding in a way.

[15:20] <stevan> morning guys

[15:20] <autrijus> you mean out of VRule structures?

[15:20] <autrijus> hey stevan-san

[15:20] <stevan> autrijus: I assume no release today :)

[15:20] <stevan> autrijus: many thanks for the papers links :)

[15:20] <putter> automater is... hypercard?

[15:20] <autrijus> stevan: no prob... I got quite a few more

[15:20] * QtPlatypus liked hypercard.

[15:20] <stevan> autrijus: I have 2 more to add to it on Method Resolution order

[15:20] <autrijus> stevan: *nod*... not with the svn down with typhoon

[15:21] <autrijus> I guess we need to suffer another 48 hours of withdrawal

[15:21] * stevan really really needs to install svk

[15:21] <autrijus> do it now! :)

[15:21] <putter> autrijus: yes.  though when I looked at it v.briefly a while back, getting from rule name to Rule was harder.  can just parse a "<" sigil :) (??)

[15:21] <stevan> autrijus: I got breadth first traversal working in the metamodel

[15:21] <autrijus> putter: huh? it's just a normal lookup

[15:21] <putter> s/was/seemed/ s/can/cant/ sigh

[15:21] <stevan> and I am going to try and implement the C3 MRO stuff today (if I have time)

[15:21] <autrijus> evalVar "<rulename"

[15:22] <putter> oooo.  putter goes to hack...

[15:22] <putter> hi stevan

[15:22] <stevan> hey putter

[15:22] <autrijus> it's currently all in the '<*' global namespace

[15:22] <autrijus> "<*foo" etc

[15:23] <autrijus> the < is sigil and * twigil

[15:23] <autrijus> see Prim.Match

[15:23] <nothingmuch>  < as a twigil is so weird

[15:23] <autrijus> < is a sigil not a twigil

[15:24] <autrijus> putter: once you read a (VRule rule) out, "rxRule rule" gets you the string back

[15:24] <autrijus> it's all in Pugs.Prim.Match.doMatch

[15:24] <putter> thanks!

[15:24] <autrijus> however, the hackathon has the < sigil removed

[15:24] <autrijus> it should be

[15:24] <autrijus> &rule:<foo>

[15:24] <autrijus> now

[15:24] <putter> rule:

[15:24] <autrijus> right

[15:25] <autrijus> but didn't get a round tuit.

[15:25] <nothingmuch> mmmmmm.... this is good music

[15:26] <putter> k.

[15:28] <autrijus> stevan: ooh (re: bfs traversal)

[15:28] <stevan_> autrijus: you gave me your round tuit

[15:29] <stevan_> then I gave it to nothingmuch 

[15:29] <autrijus> oh!

[15:29] <stevan_> so it is his fault :)

[15:29] <nothingmuch> i've gotten to many things, don't be an arse

[15:29] <stevan_> autrijus: I have not figured out the real value of BFS though

[15:29] <stevan_> it's neat, but thats about all

[15:30] <autrijus> nod

[15:30] <stevan_> it is very counterintuitive as a dispatch order

[15:30] <stevan_> the C3 stuff is cool though, it makes MI make sense :)

[15:30] <stevan_> Python 2.3 new style classes use it too

[15:30] <autrijus> MI? multiple inheritance?

[15:30] <stevan_> yes

[15:30] <autrijus> ah. *nod*

[15:31] <autrijus> I think I really should grok Scala

[15:31] <stevan_> I was actually reading about Scala the other day too

[15:31] <autrijus> it seemed to have thunk of lots of issues p6l only touched briefly

[15:31] <stevan_> it looks nice

[15:31] <stevan_> yes, traits being one of them

[15:31] <autrijus> it also has sane generics

[15:32] <autrijus> and it has case classes!

[15:32] <autrijus> aka tagged unions

[15:32] <stevan_> case classes?

[15:32] <stevan_> ah

[15:32] <stevan_> ok

[15:32] <autrijus> which is my #1 pet feature missing in p65 :)

[15:32] <autrijus> s/5//

[15:32] <autrijus> well, p5 too

[15:32] <stevan_> :D

[15:32] <autrijus> http://scala.epfl.ch/intro/caseclasses.html

[15:35] <stevan_> wow, that is kind of werid

[15:35] <stevan_> I like the decomposition though

[15:35] <stevan_> that is very nice

[15:35] <stevan_> reminds me of erlang's pattern matching

[15:36] <stevan_> how it can reach into the list and match

[15:36] <stevan_> but this reaches into the classes itself

[15:36] <stevan_> (assuming I am groking it correctly)

[15:36] <autrijus> yes.

[15:38] <autrijus> Scala seems to have a very rigorous syntax influenced primarily by ML and Java

[15:38] <autrijus> which is extremely different from perl 6's syntax

[15:38] <stevan_> yes, it does kinda of look like that

[15:39] <autrijus> but it's closest to p6 in terms of semantic model, as far as I've seen

[15:39] <stevan_> hmmm, Views are intersting too

[15:39] <stevan_> they almost look like anon classes with generics

[15:40] <autrijus> but the key with views is they are retroactive abstraction

[15:40] <autrijus> you can impose a view on random 3rd party code without their cooperation

[15:40] <stevan_> yes, first class adaptors is maybe a better term?

[15:40] <autrijus> right.

[15:41] <autrijus> which P6's Roles sort of should do

[15:41] <autrijus> but that part is again underspecced

[15:41] <stevan_> yes, but not as easy as this does

[15:41] <autrijus> nodnod.

[15:41] <stevan_> actually with the '$.foo handle ...' delegation and Roles it might not be too hard

[15:42] <stevan_> oh wait, I take that back

[15:42] <putter> (aside: btw, re MMD, goo uses mmd exclusively, and had (was going to have?) something which nicely boiled down the dispatch tables to something tiny.)

[15:42] <putter> hmmm, http://scala.epfl.ch/intro/views.html

[15:43] <stevan_> putter: the problem with creating dispatch tables is that it almost requires a closed class

[15:43] <stevan_> otherwise you have a lot of code to detect subtle changes and destroy caches

[15:43] <putter> or fast recalculation (goo)

[15:43] <autrijus> and it has junctive types :) http://scala.epfl.ch/intro/compoundtypes.html

[15:43] <putter> but yess, you still have the detection issue

[15:44] <stevan_> putter with fast dispatch, you never need to recalc or detect

[15:44] <stevan_> I think that will work best with Perl 6

[15:44] <stevan_> it spreads out the problem 

[15:45] * autrijus is playing the Scala mp3...

[15:45] <putter> hmm, so in p6, can one have lexically scoped views of the object graph?  { let Str is RubyStr; ... }

[15:45] <stevan_> mp3?

[15:45] <autrijus> it reminds me of the Slylandro music in Star Control 2

[15:45] <autrijus> " Music

[15:45] <autrijus> Our P+R department has recommended we popularize our language with a charts-compatible techno-dance-trance song. This has resulted in production of "Scala - genau!", which you can find here: "

[15:46] <autrijus> http://lamp.epfl.ch/~buraq/trax/scala_genau.mp3

[15:46] <autrijus> (in the "Community" page)

[15:46] <stevan_> thats just odd

[15:46] <stevan_> however, now Perl 6 needs a theme song

[15:47] <autrijus> larry gave one

[15:47] <stevan_> ??

[15:47] <putter> oh, boo, hiss.  views just create a distinct proxy object.

[15:48] <stevan_> putter: yes, they are just sugar

[15:48] <stevan_> but sweet sugar

[15:48] <autrijus> but it's kind of an antitheme

[15:49] * putter wants to tweak the _dispatch_, so o.foo;#->bar {use Hee; o.foo; #->hee}

[15:49] <autrijus> he used it in his 2003 state of onion as a anti-table-of-content

[15:49] <autrijus> o/~ We the unwilling, / led by the unknowing, / are doing the impossible / for the ungrateful. / We have done so much for so long with so little / We are now qualified to do anything with nothing o/~

[15:49] <putter> :)

[15:49] <stevan_> :D

[15:50] <stevan_> now all we need is a nice techno dance beat

[15:50] <stevan_> and we can sample larry's voice saying that

[15:50] <autrijus> right

[15:51] <stevan_> nothingmuch can lay down the bass track, and luqui can do the piano 

[15:51] <putter> there is an app... read the following, upload the mpg, get your own festival voice.

[15:51] <stevan_> nice

[15:51] <putter> (festival is open source voice synthesis system)

[15:51] <nothingmuch> stevan_: not now I can't

[15:52] <nothingmuch> my left arm is beat up

[15:52] <stevan_> ah yes, I forgot

[15:53] <stevan_> ok time for me to do things in the "real world"

[15:53] <putter> Is there a name for wanting to lexically mutate what the object graph appears to be?

[15:53] <stevan_> autrijus: good luck with the typhoon

[15:53] <stevan_> putter: insanity :P

[15:53] <nothingmuch> putter: see s06 about WANT

[15:53] <putter> ;)

[15:53] <stevan_> adios all &

[15:53] <putter> bye stevan_ ;-)

[15:53] <nothingmuch> ciao stevan_ 

[15:53] <autrijus> stevan_: ciao

[15:54] <autrijus> and I'll survive this :)

[15:56] <autrijus> LCamel++ # driving to svn.openfoundry.org to fix the machine

[15:57] <autrijus> LCamel++ # hopefully he'll get back before wind gets impossible

[15:57] <putter> Object graph "views" look like the could be a very nice feature.  "proxies without a second object".  Nicely weaken the coupling between a classes's semantics and syntactics (eg, method names).  Makes lots of things (versioning, alternate api's, DSL's without underlying object api's leaking in, etc) much easier.

[15:58] <putter> Ah well.  Perhaps just macro infix:<.>...

[15:58] <putter> yipes.  that's dedication.

[15:59] <autrijus> or madness. but yeah.

[15:59] <autrijus> LCamel: do take care of yourself... if it gets difficult don't push it

[16:00] <putter> Hey, every language needs myths... "The lone lambda camel, driving through...

[16:00] <autrijus> ooh, never thought of LCamel's nickname that way

[16:00] <putter> Seconded:  it's just a vcs.  It could all burn and we'd cope.  Injuries are real.

[16:03] <putter> The alaska iditerod(sp?) has a nice expression: "It's just a dog race."  In a dangerous environment, you have to keep your eye on what really matters (people, injury, death), and what really doesn't (everything else).  It's just really easy to confuse the former with the latter if its been a while since youve seen one of the latter.

[16:04] <autrijus> one of the former, you mean.

[16:05] <putter> oops.  yeah.

[16:07] <putter> nothingmuch: re want, that's not quite it.  that requires participation of the object.  the core idea is the object doesn't have to anticipate use.  client code can say {use DylanishHashes; ...} and suddenly all hash lookups, to whatever object, have a slightly different semantics (which I dont remember).

[16:07] <nothingmuch> huh?

[16:08] <putter> Exactly the same nitch as proxy objects, but without their cripling attribute of introducing a second object.

[16:08] <nothingmuch> http://webkit.opendarwin.org/ <-- yummy!

[16:08] <putter> You want to be able to pass around the single object, and simply have it look different when you want it to.

[16:09] <putter> clear, or no?

[16:09] <nothingmuch> are you sure you are passing the right continuation

[16:10] <putter> who, me?

[16:10] <autrijus> 23:54 < nothingmuch> putter: see s06 about WANT

[16:10] <autrijus> I think putter was invoking this CC

[16:11] <putter> re svk.elixus.org, <title> could use update (eg, "svk homepage")  random thought.

[16:11] <putter> yes

[16:12] <autrijus> clkao: change config.yaml for the kwiki page to say SVK not Kwiki maybe?

[16:12] <putter> want is something an object calls to inquire about its environment, and invoke some behavior it knows about.

[16:13] <putter> I want something lexically scoped which rewrites $obj.foo() calls, depending on $foo type.

[16:14] <putter> _runtime_ $foo type.

[16:14] <putter> Ie, I want to tweak object dispatch.

[16:16] <putter> Proxies get used for several things.  Sometimes, having a proxy object which is distinct from the proxied object is fine.  Eg, when using a proxy to access a remote resource.  The proxied object isnt something you are going to be dealing with directly.  But if the proxied object is in the same space as the proxy, they things get unfortunate.

[16:17] <putter> You create the proxy, and call something which really wanted a diffent proxy on the original, and it both calls something which wants the original, and something which wants a third flavor proxy on a forth flavor proxy of the original.  Just isnt going to happen.

[16:18] <nothingmuch> sorry, there is pizza

[16:18] <nothingmuch> you have been preempted

[16:18] <putter> ;)  priorities.

[16:19] <putter> For the backlogging...  you want a "proxy" appearance without sacrificing object identity.

[16:19] <autrijus> you want =:= for things that looks different but is actually the same?

[16:19] <putter> yes.

[16:20] <autrijus> a novel concept indeed

[16:20] <autrijus> so you want objects act as polymorphic functions

[16:20] <putter> you can do it with foo($o) calls.  just not (without simply a macro infix:<.>) for $o.foo() calls.

[16:20] <autrijus> that is what I mean.

[16:20] <autrijus> yes.

[16:21] <autrijus> I find this a curious concept. what is a use case?

[16:21] <putter> hmm... I think so.  teasing apart objects as identity and as storage from objects as dispatch participant.

[16:21] <putter> use cases...

[16:24] <autrijus> actually p5's OO model already has them teased apart; identity is of a reference address, storage can be managed in various ways (even Lexical::Attributes), and dispatching is handled strictly at runtime via function calls in the blessed package

[16:24] <putter> you're creating a DSL.  with multimentods, operators, etc, you have a lot of control over the language.  but each "external" objects you use wades in like a bull in a china shop with it's own arbitrary sublanguage (its methods/api).  Which is unlikely to fit, is likely to change (grow) to be an even poorer fit.

[16:25] <autrijus> but what's wrong with normal facade objects?

[16:26] <autrijus> oh, I see, you want real one-to-one correspondence that fools even =:= testing. but why's that useful?

[16:26] <autrijus> (one to one as in "external" object vs "internalized" proxy)

[16:26] <putter> if "everything is a dsl", then everything is constantly stripping and rebuilding facades.

[16:27] <autrijus> if all the informatino is static then we can compile them away like newtypes

[16:27] <autrijus> but yeah, in runtime there's going to be a performance hit.

[16:28] <putter> and everyone pays... simple sub calls f, gets back object, wants to know if its "different", has to strip/cannonicalize it to check.  rather than f simply tweaking how dispatch occurs in its scope.

[16:30] <autrijus> (I'm still thinking that this belongs to "hard things should be hard" category)

[16:30] <autrijus> (not in the sense of hard to write in, but in the sense of performance hit is acceptable)

[16:31] <autrijus> but maybe I've been brainwashed by the Class::* modules, which all makes everybody pay

[16:32] <putter> ah, but dealing with it addresses other issues.  like versioning.  I can have a single object, which appears to obey completely incompatible apiv1, apiv2.3, apivxx...

[16:33] <putter> user just says, {use FooApi3.2; ...} and all Foo's look right... and can be exchanged with other code written with different Foo api's in mind.

[16:34] <autrijus> so by "single object" you mean "single class"

[16:34] <autrijus> if so, adhoc views also deals with this, except via creation of dynamic proxy objects

[16:35] <autrijus> and with adhoc views we can even apply this in an object-by-object basis

[16:36] <putter> no no, my $foo = gimme_a_foo(); $foo.mumble("has Foo-7.12 semantics.");  {use FooApi3.2; $foo.mumble("you better have 3.2 semantics!!");} 

[16:37] <autrijus> and that is... lexical?

[16:37] <putter> yes!

[16:37] <putter> :)

[16:37] <autrijus> {use FooApi3.2; bar($foo)}

[16:37] <autrijus> bar gets a 7.12 object?

[16:38] <autrijus> this feels very fishy :)

[16:38] <putter> ah, that's the core point.  bar gets $foo.  $foo has some default appearance, but appearance isnt something that gets passed around.

[16:38] <autrijus> right

[16:38] <autrijus> I grok your point

[16:38] <putter> as it is with proxy objects

[16:38] <autrijus> well no, you can pass the proxy objects around

[16:39] <autrijus> and it will stick to the proxied interface

[16:40] <putter> yeah, but then either you play magical stripping games, or you get hairy "I gave my object to foo, and got it back, but it was wrapped with ten proxy objects !&!  a third of them undoing the effects of another third !?!"

[16:41] <autrijus> (nod, but we know that the magical stripping games can be sugared)

[16:41] <autrijus> but I think I know what you mean now. hrm

[16:41] <putter> another use case... CPAN...

[16:42] <autrijus> the "objects" here are like functions with implicit parameters

[16:42] <autrijus> that controls its dispatching, and where you can lexically modify them away

[16:42] <autrijus> it is really very far from the p5 model :)

[16:42] <putter> in cpan, you so often are faced with "well, I'm glad they wrote it, but gaahhhhh, some people just should be allowed to write apis".  or ...

[16:43] <putter> s/should/shouldn't/

[16:43] <autrijus> nod, see capitalization.pm

[16:44] <putter> nifty :)

[16:45] <autrijus> LCamel++ # it's baaack!

[16:46] <putter> with p6, doing {use F3; mumble($foo,"you get sematics 3!")} is a no-brainer.  and perhaps with macro infix:<.> it will be too.  but I think this will be an important pattern, so I mention it occasionally...

[16:46] <putter> # yay!

[16:48] <putter> so many languages with similar semantics regrettably fork of syntactics.  so many objects with ...

[16:48] <autrijus> it still bugs me to have modules that take effect lexically to begin with uppercase, but that's just me :)

[16:48] <putter> bleep.  s/fork of/fork on/

[16:49] <autrijus> but with p6 the line is very blurry

[16:49] <autrijus> because symbol imports are lexical by default

[16:49] <autrijus> but classes are global

[16:49] <putter> err, you mean  use Foo; vs use foo;?

[16:49] <autrijus> right

[16:50] <putter> ah.  one sideeffect of using rather too many languages is I've completely burned out any default expectation of what variable capitalization-pattern means.

[16:53] <putter> "dammit, that's a perfectly straightforward C function so why isn't that pattern binding the X var?  ohhhhhh.  oops"

[16:53] <putter> (true story.  it was late.)

[16:53] <svnbot6> r5641, Aankhen++ | HTTP::Cookies:

[16:53] <svnbot6> r5641, Aankhen++ | * implemented &add_cookie_header (almost completely :-).

[16:53] <svnbot6> r5641, Aankhen++ | * added commented out LWP::Debug stuff.

[16:53] <svnbot6> r5641, Aankhen++ | * fixed signature for &:normalize_path.

[16:55] * autrijus notes correlations between putter working late and fascinating stories

[16:55] <putter> lol

[16:56] <autrijus> Aankhen``: nice!

[16:58] * jhorwitz is rebuilding pugs for the first time in a month

[16:59] <Aankhen``> Thanks. :-)

[16:59] <autrijus> jhorwitz: hey there. sorry I never started with EaEP API

[16:59] <Aankhen``> What is the P6 equivalent of `while (...) { ... } continue { ... }`?  Same syntax?

[16:59] <jhorwitz> autrijus: n.p.  neither of us had the time.  :)

[17:00] <autrijus> Aankhen``:        There is no longer a "continue" block.  Instead, use a "NEXT" block

[17:00] <autrijus>        within the loop.  See below.

[17:00] <autrijus> (S04, unimplemented)

[17:00] <Aankhen``> Ah, thanks.

[17:00] <Aankhen``> S'okay, most of libwww-perl doesn't work yet. :-)

[17:00] <autrijus> we'll get there :)

[17:00] <Aankhen``> I know, that's why I'm working on porting it.

[17:01] <Aankhen``> There's a lot of modules in it, so I am not worried about stuff not working yet.  First I need to get everything ported in whole.

[17:02] * autrijus nods

[17:02] <Aankhen``> BDB is better than FSFS for Subversion repositories... riight?

[17:03] <autrijus> in the similar sense that FAT is better than NTFS for file storage...

[17:03] <Aankhen``> FAT is better? o_O

[17:03] <autrijus> no. neither is BDB :)

[17:03] <Aankhen``> Ah.

[17:03] <Aankhen``> Maybe I mixed them up.

[17:04] <Aankhen``> Weird

[17:04] <Aankhen``> C:\Documents and Settings\Aankhen>svk mkdir //pugs

[17:04] <Aankhen``> Waiting for editor...

[17:04] <Aankhen``> Can't spawn "cmd.exe": No such file or directory at C:/Development/SVK/site/lib/

[17:04] <Aankhen``> SVK/Util.pm line 204.

[17:04] <Aankhen``> Aborted: No such file or directory

[17:08] <autrijus> hrm, you don't have cmd.exe in path?

[17:08] <autrijus> also try

[17:08] <Aankhen``> I do.

[17:08] <autrijus> set EDITOR=notepad.exe

[17:08] <autrijus> set SVN_EDITOR=notepad.exe # or this

[17:09] <Aankhen``> I already have SVN_EDITOR set.

[17:09] <svnbot6> r5642, Stevan++ | Perl6::MetaModel

[17:09] <svnbot6> r5642, Stevan++ | * added :breadth dispatch order option 

[17:09] <svnbot6> r5642, Stevan++ |    - added tests for this

[17:09] <svnbot6> r5642, Stevan++ | * improved the class_precedence_list() method

[17:09] <svnbot6> r5642, Stevan++ |    - added tests for this as well

[17:09] <svnbot6> r5642, Stevan++ | * BUILD and DESTROY are now submethods again

[17:09] <svnbot6> r5642, Stevan++ |    - they use the force_call() method in ::SubMethod

[17:09] <svnbot6> r5642, Stevan++ | * t/07_A12_examples.t now uses next_METHOD() like in A12

[17:09] <autrijus> and svk failed to launch that

[17:09] <Aankhen``> system {$editor[0]} (@editor, $file)

[17:09] <Aankhen``> O_O

[17:09] <autrijus> the {} part is the name

[17:09] <autrijus> never mind that

[17:09] <autrijus> (see perldoc -f system)

[17:09] <Aankhen``> Doesn't work with notepad.exe either.

[17:09] <autrijus> strange.

[17:09] <autrijus> trace it a bit?

[17:09] <autrijus> this is the latest .exe binary?

[17:10] <Aankhen``> Ah, wait.

[17:10] <Aankhen``> I set EDITOR=notepad.exe but not SVN_EDITOR, so it was picking up SVN_EDITOR.

[17:10] <Aankhen``> Notepad works.

[17:10] * Aankhen`` goes to check other stuff.

[17:10] <Aankhen``> Dang, it doesn't work with Gvim. :-(

[17:11] <Aankhen``> Unless I specify the full path. ^_^

[17:11] <autrijus> well, then :)

[17:13] <Aankhen``> Er... how do I remove a dir I created using mkdir?

[17:13] <autrijus> rm

[17:14] <Aankhen``> Ah.

[17:14] <Aankhen``> `rmdir` didn't work, so I got confused.

[17:15] <Aankhen``> Thanks for the help. :-)

[17:17] <autrijus> np :)

[17:18] <Aankhen``> I'm running `svk up -s` from my working directory; is it supposed to suddenly commit a whole bunch of revisions?

[17:19] <Aankhen``> Hmm, okay, it's not committing to the main repository.

[17:19] <autrijus> right.

[17:19] <autrijus> have you seen svk-overview.png and svk-visual-guide.pdf?

[17:19] <Aankhen``> I saw svk-visual-guide.pdf

[17:19] <autrijus> # http://perlcabal.org/~autrijus/svk-overview.png

[17:21] <Aankhen``> Have I ever told you that you scare me?

[17:22] <Aankhen``> (in a good way :-)

[17:27] <Aankhen``> Hmm, Openfoundry should perhaps put commit messages in a <pre>...</pre> block, or expand all tabs and then replace spaces with non-breaking spaces...

[17:31] <autrijus> you mean in the rss view?

[17:32] <autrijus> it's SVK::Web... patches against that module welcome

[17:32] <putter> autrijus: re evalVar "<rulename",  evalVar?

[17:32] <autrijus> putter: er, sorry reduceVar

[17:32] <putter> ah, ok.

[17:32] <autrijus> I unified them

[17:33] <autrijus> and picked the longer name. very unlike me

[17:33] <putter> ;)

[17:35] <svnbot6> r5643, iblech++ | * Usual svn props.

[17:35] <svnbot6> r5643, iblech++ | * Added a (currently failing) test to t/statements/do.t.

[17:35] <svnbot6> r5643, iblech++ | * New test: t/operators/context_forcers.t, testing &prefix:<+>, &prefix:<?>,

[17:35] <svnbot6> r5643, iblech++ |   &prefix:<~>.

[17:35] <putter> am I missing something, or does exposing reduceVal require "structural" change.  export reduceVal, import Pugs.Eval in Pugs.Prim.

[17:36] <autrijus> evalExp (Var "<*foo")

[17:36] <autrijus> may be easier.

[17:36] <putter> ah, ok.  thanks again.

[17:37] <autrijus> np :_

[17:37] <autrijus> I mean, :)

[17:38] <putter> :)

[17:42] <svnbot6> r5644, iblech++ | PIL -> JavaScript compiler.

[17:42] <svnbot6> r5644, iblech++ | * Pugs.Compile: Modified the declaration of PApp to accept an invocant.

[17:42] <svnbot6> r5644, iblech++ | * Pugs.CodeGen.PIR: Minor changes because of change #1, pugs -BPIR still passes

[17:42] <svnbot6> r5644, iblech++ |   the sanity tests.

[17:42] <svnbot6> r5644, iblech++ | * New directory perl5/PIL2JS, containing various modules, a README, and

[17:42] <svnbot6> r5644, iblech++ |   pil2js.pl:

[17:42] <svnbot6> r5644, iblech++ |   $ pugs -CPIL -Ilib6 -MPrelude::JS -we 'say 2 + 3' | \

[17:42] <svnbot6> r5644, iblech++ |     ./pil2js.pl -html > /tmp/t.html

[17:42] <svnbot6> r5644, iblech++ | * t/01-sanity mostly pass! (see

[17:42] <svnbot6> r5644, iblech++ |   http://m19s28.vlinux.de/iblech/stuff/not_perm/pil2js-demo/)

[17:42] <svnbot6> r5644, iblech++ | * t/01-sanity/03-equal.t doesn't pass because of a bug in Pugs.Compile

[17:42] <svnbot6> r5644, iblech++ |   ("3 || 4" is compiled to "&infix:<||>(3, 4)" instead of "&infix:<||>(3, {4})"

[17:42] <svnbot6> r5644, iblech++ |   or something similar.

[17:42] <svnbot6> r5644, iblech++ | * See perl5/PIL2JS/README for a list of things which already work.

[17:42] <iblech> food &

[17:50] <putter> oh my.

[17:51] * Aankhen`` stares at iblech.

[17:51] <Aankhen``> Argh.  You just HAD to do it while SVK is syncing up 5,000 revisions, didn't you? :-P

[17:54] <autrijus> oh. wow. wow.

[17:54] * autrijus is shocked. _shocked_ I say

[18:13] <autrijus> mm gust at 63m/s

[18:14] <dudley> Hey, pugs hit the front page of LtU today

[18:14] <autrijus> yeah, proving that ltu has its own share of dupes

[18:14] <dudley> heh

[18:14] <Aankhen``> LtU?

[18:15] <dudley> lambda-the-ultimate.org

[18:15] <Aankhen``> Ahh.

[18:15] <autrijus> http://lambda-the-ultimate.org/node/view/593 http://lambda-the-ultimate.org/node/view/620

[18:15] <autrijus> there's some more

[18:18] <putter> when converting a datastructure in language A to language B, it is generally fastest to do everything native, ie, crawl A data in A, generating string of B code, which eval'ed in B, generates B data.  rather than every language writing -CPIL parsers...

[18:19] <putter> perl/ruby can share a rep, python gets its own, js, ocaml, scheme, ... ;)

[18:20] <putter> variants on Show?

[18:23] * autrijus mumbles something about YAML

[18:24] <putter> iblech: *very very broad grin*

[18:24] <autrijus> putter: actually PIL prettyprinter to Perl5, written in haskell or p6, is a good idea

[18:24] <autrijus> alternately use S-expr or YAML may not be bad idea either

[18:25] <autrijus> and there's always XML when we give up all hope

[18:26] * putter hopes he never has so little hope as that...

[18:27] <putter> so sexp, and yaml too.  actually, sexp can substitute for scheme.

[18:27] <putter> hmm, maybe.

[18:28] <putter> better yet, it looks like the backends are turning out simple enough that they don't need to wait on the PIL redesign, no?

[18:29] <autrijus> there's no need to wait anything :)

[18:29] <autrijus> hm, iblech has written a small parser combinator in PIL::Parser under PIL2JS/lib/

[18:29] <autrijus> it feelds very parsecish

[18:30] <autrijus> it looks like it's good enough to handle arbitary haskell structures with a bit tweak

[18:31] <autrijus> however for my PIL redesign I think I'll annotate each constructure with record syntax

[18:32] <autrijus> i.e. the constructor arguments will have names

[18:32] <autrijus> just so larry won't call me "lazy bastard" again

[18:32] <autrijus> (which he did upon his first glance at the unnamed PIL structure)

[18:34] <autrijus> iblech: the infix<3,4> thing is probably not a bug

[18:34] <autrijus> it should be a PThunk

[18:34] <autrijus> on the 4 position for ||

[18:34] <autrijus> which is different from {4}

[18:35] <autrijus> because of scope issues

[18:35] <autrijus> 3 || leave();

[18:35] <autrijus> 3 || { leave() };

[18:35] <autrijus> means very different things

[18:35] <iblech> Aankhen``: re. Sorry :D

[18:35] <iblech> autrijus: Right.

[18:36] <autrijus> iblech: and I wonder if we can get Parse::Combinator :)

[18:37] <autrijus> (i.e. generalizing PIL::Parser)

[18:37] <iblech> autrijus: Yeah, would be useful, I think :)

[18:38] <autrijus> iblech++ # mad props

[18:38] <autrijus> iblech++ # mad skills

[18:38] <iblech> (Perl 5)++ # better than we may be tempted to think :)

[18:38] <iblech> oh, and of course, PIL

[18:38] <iblech> oh, and of course, PIL++ :)

[18:39] <Aankhen``> iblech++

[18:39] <autrijus> Perl5 is very good

[18:39] <Aankhen``> # JS am cool

[18:39] <autrijus> it's perl5 I have problem with :)

[18:40] <iblech> :)

[18:40] <svnbot6> r5645, putter++ | Added Pugs::Internals::reduceVar, to lookup unparsable names, and Pugs::Internals::rule_pattern, to get the re string from rule objects.

[18:45] <autrijus> I probably should catch some sleep while the window-smashing sound is taking a respite

[18:45] <autrijus> see you tomorrow :)

[18:45] * autrijus waves

[18:45] <putter> &

[18:45] <iblech> Night :)

[18:47] <Aankhen``> Goodnight autrijus.

[18:58] <nothingmuch> i'm at work

[18:58] <nothingmuch> it's 21:58

[18:58] <nothingmuch> and other people are still delaying my two hour job

[18:58] <nothingmuch> =

[18:59] <nothingmuch> (

[18:59] * nothingmuch thinks he might be homew tomorrow

[19:27] <svnbot6> r5646, iblech++ | * Pugs.Compile -- &infix:<||>(foo, bar) is compiled as &infix:<||>(foo,

[19:27] <svnbot6> r5646, iblech++ |   PThunk(bar)) now.

[19:27] <svnbot6> r5646, iblech++ | * Pugs.CodeGen.PIR -- So Pugs.CodeGen.PIR doesn't have to do this change, as

[19:27] <svnbot6> r5646, iblech++ |   Pugs.Compile does it now.

[19:27] <svnbot6> r5646, iblech++ | * Pugs.Parser -- Filtered out &infix:<,> from list of user-overridable subs, as

[19:27] <svnbot6> r5646, iblech++ |   else even basic arglists use &infix:<,> if a &infix:<,> is defined (see

[19:27] <svnbot6> r5646, iblech++ |   comment).

[19:27] <svnbot6> r5646, iblech++ | * PIL2JS: Prelude::JS -- Proper support for ||, &&, etc.

[19:27] <svnbot6> r5646, iblech++ | * PIL2JS: README -- Minor cleanup.

[19:35] <cognominal> what is the state of PGE?

[19:37] <iblech> In latest leo-ctx5, it seems to work mostly again

[19:37] <cognominal> ha, when did they intend to merge?

[19:37] <iblech> Dunno

[19:56] <svnbot6> r5647, iblech++ | perl5/PIL2JS: README -- Added section about PIL2JS's internal design.

[21:03] <nothingmuch> bah! 00:05, and still at work

[21:03] <nothingmuch> someone, please feel my pain

[21:04] * nothingmuch is going to watch the numbers change to 500,000,000 on www.apple.com

[21:07] * Aankhen`` feels nothingmuch's pain.

[21:10] <Aankhen``> Now feel my pain: syncing 5,600 revisions when it aborts due to some sort of network error every 300 or 400...

[21:10] <nothingmuch> run it in a shell loop =)

[21:10] <nothingmuch> why do you need to mirror the entire history?>

[21:10] <Aankhen``> I have no idea.

[21:10] <nothingmuch> you can just mirror head, or the last 100 revs

[21:10] <Aankhen``> I just did an `svk up -s`

[21:10] <Aankhen``> .

[21:10] <Aankhen``> # in the working copy

[21:10] <nothingmuch> pugs rarely ever goes backwords in time =)

[21:10] <nothingmuch> ask around on #svk

[21:10] <nothingmuch> i'm not sure what you should do now

[21:11] * Aankhen`` shrugs.

[21:11] <Aankhen``> I'll just let it run.

[21:11] <mugwump> nothingmuch: ime, skipping revisions is fraught with difficulties

[21:11] <svnbot6> r5648, iblech++ | PIL2JS:

[21:11] <svnbot6> r5648, iblech++ | * Misc. bug fixes.

[21:11] <svnbot6> r5648, iblech++ | * README -- Improved section about PIL2JS's internal design.

[21:11] <svnbot6> r5648, iblech++ | * Proper stringification and numification ops.

[21:11] <svnbot6> r5648, iblech++ | * Refactored conversions from PIL2JS.Box objects to native JavaScript objects

[21:11] <svnbot6> r5648, iblech++ |   out into PIL2JS.Box.toNative.

[21:11] <svnbot6> r5648, iblech++ | * Should we port PIL2JS to Haskell (compiling Prelude::JS plus five lines of

[21:11] <svnbot6> r5648, iblech++ |   Perl 6 source takes 55s here...)?

[21:11] <nothingmuch> okay, nevermind =)

[21:11] * Aankhen`` has the wrong kind of laziness right now.

[21:12] <nothingmuch> if only i had the brainpower to actually do something fun

[21:12] <nothingmuch> i know, i'll finish the harrorth bootstrapping

[21:18] <iblech> Need to sleep now, I think :)

[21:18] <nothingmuch> me too!

[21:18] <nothingmuch> iblech++

[21:18] <nothingmuch> impressive work

[21:18] <iblech> Thanks :)

[21:18] <iblech> Night all

[21:18] <Aankhen``> G'night.

[21:18] <Aankhen``> Bleh.

[21:18] <putter> night iblech

[21:18] <putter> ;)

[21:23] *** ToniEisner is now known as [

[21:23] *** [ is now known as ToniEisner

[21:25] <Aankhen``> Yay, it's at r3072...

[21:35] <Aankhen``> G'night.

[21:35] <svnbot6> r5649, mugwump++ | Use svn keyword expansion in preference to reading internal svn state files or `svk info'

[21:38] <integral> mugwump: is that going to work?  Surely $Rev$ in that file will only change when that file gets changed, not when any change happens?

[21:43] <putter> belated "G'night".

[21:46] <mugwump> integral: ah, is that why it wasn't already like that

[21:47] <mugwump> I'll test

[21:47] * putter tosses pcre and p6 rx engines back on the shelf.  pge is too busted, even on leo-ctx5, to run the rx grammar to parse regular expressions.  (and I'm going back to bootstrap land when waiting a while might make the problem go away...)  blech.  sigh.

[21:47] <integral> yeah, I think we went over this months ago when this first got written,  but time flies around here :-)

[21:48] <putter> s/I'm going/I'm not going/  sigh

[22:05] <putter> &

[22:05] <svnbot6> r5650, putter++ | Minor edit of Perl6::Rx in modules/Grammars/rx_grammar.pl.  But PGE can't run it.

[22:08] <cognominal> ?eval say defined &match ?? 'defined' :: 'undefined' ;

[22:08] <evalbot6> Error: Undeclared variable: "&match" 

[22:09] <cognominal> defined is a special case that is not handled. is "defined" specced in Perl6?

[22:10] <svnbot6> r5651, iblech++ | PIL2JS: pil2js.pl: Support for precompiling the Prelude::JS (speeding up

[22:10] <svnbot6> r5651, iblech++ | further compilations by 100000% or so :)).

[22:10] <svnbot6> r5652, iblech++ | PIL2JS: pil2js.pl -- Very minor cosmetic fix (indentation of the JS Prelude).

[22:11] <cognominal> hum, I am confused  defined implies declared...

[22:11] <cm> "meow", makes the lambda

[22:15] <cognominal> ?eval say exists &say

[22:15] <evalbot6> Error: No compatible subroutine found: "&exists" 

[22:15] <cognominal> boy, I am running in deep existentail problems

[22:16] <cognominal> ?eval say  &say.exists

[22:16] <evalbot6> Error: No compatible subroutine found: "&exists" 

[22:23] <mugwump> ?eval [<1 2 3 4 5 6>].reverse.reverse

[22:23] <evalbot6> '1 2 3 4 5 6' 

[22:23] <svnbot6> r5653, mugwump++ | Back-out earlier change, add comment as to why this is done like this

[22:23] <mugwump> ?eval [<1 2 3 4 5 6>].reverse.join(",")

[22:23] <evalbot6> ',' 

[22:30] <mugwump> jabbot: seen gaal?

[22:30] <svnbot6> r5654, mugwump++ | Add cheating (.perl) version of is_deeply

[22:30] <jabbot> mugwump: gaal was seen 1 days 11 hours 44 minutes 39 seconds ago

[22:44] <nothingmuch> moose......

[22:44] <nothingmuch> 1:44

