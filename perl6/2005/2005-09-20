[00:00] *** xinming1983 is now known as xinming_BeiJing

[00:02] <stevan> luqui: re: graffle

[00:02] <stevan> no I think you can use a limited eval version

[00:02] <stevan> I bought it because I use it for work all the time

[00:10] <nothingmuch> mega luqui++ for fmap redux

[00:10] <nothingmuch> and mega luqui++ for theories

[00:11] <luqui> Arrr, thank ye

[00:11] <luqui> P-)

[00:12] <nothingmuch> Sep 19th is over here =)

[00:13] <xinming_BeiJing> Hi,all, Now I am in Laptop... Really happy for getting the first Laptop in my life.

[00:14] <luqui> not here

[00:14] <luqui> another six hours to go

[00:14] <xinming_BeiJing> hmm, Why doesn't pugs be updated these days please?

[00:14] <luqui> xinming_BeiJing: hmm?

[00:14] <xinming_BeiJing> It seems it's being lasting quite for 2 days...

[00:15] * luqui scampers off to gander TaPL

[00:16] <stevan> luqui: more theories stuff? where?

[00:16] <stevan> re: TaPL

[00:16] <stevan> I am still trying to grasp Church Numerals fully,.. that is some really really really cool stuff

[00:17] <luqui> use.perl

[00:17] <luqui> oh, what?

[00:17] <luqui> yeah, functions isomorphic to numbers is pretty sweet

[00:17] <stevan> I mean I "get" it, but my mind see it as being too simple to be true

[00:17] * luqui wrote increment/decrement/addition of church numerals in haskell

[00:17] <luqui> and they worked

[00:18] <luqui> (wikipedia's definition of subtraction is wrong though)

[00:18] <stevan> I was gonna write them in perl :)

[00:18] <luqui> er, multiplications

[00:18] <luqui> haskell is a bit cleaner in that domain, but have at it

[00:18] <luqui> see the lambda_calculus.p6 that was recently checked in

[00:18] <luqui> anyway, re: theory stuff

[00:19] <luqui> a role is a single-parameter theory that obeys a certain property

[00:19] <stevan> yes I saw that,.. I wanted to expand it with examples from TaPL

[00:19] <svnbot6> r7043 | putter++ | PIL-Run - fixed p6_to_a(), and \@INC.  A simple replacement Test.pm is again used for make test and smoke, as the real one currently fails with Perl6-Container/Perl6-Value errors (eg, is(1,1,'x') doesn't work).

[00:19] <luqui> aa soo

[00:22] <stevan> luqui: is there a way to do to the "next method" in C::MM::Pure?

[00:22] <luqui> er, no

[00:22] * luqui wonders how he would implement that

[00:22] * luqui wonders what the exact semantics are

[00:22] * stevan wonders how luqui will too

[00:22] <luqui> stevan, what exact semantics would be useful to you?

[00:22] <nothingmuch> before i nod off i'd like to raise my hat to stevan & luqui for making perl6 much more beautiful on the inside

[00:22] <stevan> next METHOD in multiple dispatch context is supposed to first try the next most appliable mulit-method

[00:22] <stevan> nothingmuch: thanks :)

[00:23] * luqui smiles bigly

[00:23] <luqui> thanks

[00:23] <stevan> nothingmuch: are you saying we are ugly on the outside?

[00:23] <nothingmuch> nope

[00:23] <nothingmuch> perl 6 was very much a handwavy fog on the inside

[00:23] <stevan> oh,.. that changed? 

[00:23] <nothingmuch> but WRT the metamodel, and theories, and type inferrence, and all that, I think we are making amazing progress

[00:24] <nothingmuch> towards a language that is designed to be much more balanced than anything else

[00:24] <nothingmuch> while reaching for both ends of the spectrum

[00:24] <nothingmuch> strong typing and dynamic typing

[00:24] * stevan blushes

[00:24] <nothingmuch> a good metamodel

[00:24] <nothingmuch> good functional support

[00:24] <nothingmuch> sound definitions of internals

[00:24] <nothingmuch> (sound == elegant + practical)

[00:25] <nothingmuch> these things are slowly mounting, and they aren't going away

[00:25] <nothingmuch> and I think that you two are responsible for a lot of it... so thanks =)

[00:25] <luqui> :-D

[00:26] <luqui> and to return the complement, I think I'd like to see nothingmuch in charge of a virtual machine someday

[00:26] <luqui> way cool ideas

[00:26] <stevan> here here

[00:26] <stevan> I second that

[00:27] <nothingmuch> neh

[00:27] <nothingmuch> my current obsession with the compilation process is just a manifestation of another love

[00:27] <nothingmuch> it'll go away soon

[00:27] <nothingmuch> what I really like is to see a good plan come together from end to end

[00:27] <stevan> of course it would be side gig from his real career as a porn star

[00:27] <luqui> haha

[00:27] <nothingmuch> and high level things that are useful and go all the way down to actually working is what is making me interested in VMs

[00:28] <nothingmuch> and yes, there's that

[00:28] <nothingmuch> then I'll go into politics

[00:28] <luqui> is there any other path?

[00:28] <nothingmuch> or start a wikipedia of my own

[00:28] <stevan> nothingmuch for president!!!!!

[00:28] <nothingmuch> (see also bomis.com)

[00:28] <stevan> oh wait,.. we alreayd have that here

[00:28] <luqui> stevan: lol

[00:29] * stevan praises local again,.. but this time with symbol tables :)

[00:29] <nothingmuch> http://en.wikipedia.org/wiki/Bomis

[00:29] <luqui> stevan, you'll be cursing local soon, when it refuses to let you do it to lexicals

[00:29] <nothingmuch> luqui: aye, that always depressed me about local =/

[00:29] <stevan> luqui: I only need it to rebind global

[00:30] <stevan> s

[00:30] <nothingmuch> as local is really scope of execution and my/our is scope of definition, which is why perl6's attitude towards these things is so much better

[00:30] <stevan> $?SELF, $?CLASS, $?ROLE, $?PACKAGE and now "next METHOD"

[00:30] <stevan> I was previously keeping my own stack,.. which was wasteful

[00:32] <stevan> I actually got the local rebinding idea from CLOS

[00:32] * luqui 's battery is going

[00:32] <luqui> my mind is going

[00:32] <stevan> part of the 'apply-method' function calls a 'add-function-bindings' which makes lexical binding for method execution

[00:32] <luqui> my mind is going

[00:33] <stevan> its a very cool approach, so I was happy to see it work in perl too

[00:47] <gantrixx> anyone here living in arizona?

[00:49] <svnbot6> r7044 | stevan++ | Perl6::MetaModel 2.0 - 

[00:49] <svnbot6> r7044 | stevan++ | * adding new example test (classic OO shapes)

[00:49] <svnbot6> r7044 | stevan++ | * making next_METHOD rebound for each dispatch, making it specific to  

[00:49] <svnbot6> r7044 | stevan++ |   it's execution context, this removed the need for manual mangement

[01:03] * stevan is amazed at how useful local and lvalue subs have proven to be in the metamodel

[01:03] <stevan> I have never found a good for use for them before this :)

[01:07] <svnbot6> r7045 | stevan++ | Perl6::MetaModel 2.0 -

[01:07] <svnbot6> r7045 | stevan++ | * changing opaque_instance_attrs($) into opaque_instance_attr($$) so that it will

[01:07] <svnbot6> r7045 | stevan++ |   fetch the label for you, making the opaque instance structure further opaque and

[01:07] <svnbot6> r7045 | stevan++ |   making way for some cool things with Roles (more on that later)

[01:19] <svnbot6> r7046 | putter++ | PIL/Run/PrimX.pm: a couple of new primitives, a bit of cleanup.

[04:02] <svnbot6> r7047 | putter++ | perl5/PIL-Run/lib6/Test.pm: more Test subs.  And :todo is now tolerated (but doesn't actually work), which unfortunately required...

[04:02] <svnbot6> r7047 | putter++ | perl5/Perl6-Value/lib/Perl6/Code.pm: short-circuited check_params().  It now always returns 1.  This is a work-around hack to let simple Test almost work, despite sub f(*%h){};f() currently failing.

[04:20] <svnbot6> r7048 | gaal++ | fatal.pm in Prelude. Exposes a bug in %*INC not being checked

[04:20] <svnbot6> r7048 | gaal++ | correctly before 'use'. It's interesting to see whether this

[04:20] <svnbot6> r7048 | gaal++ | module works correctly (once lexical pragmas do) since it does

[04:20] <svnbot6> r7048 | gaal++ | things that need to work in different calling contexts.

[05:08] <gaal> bug report: "pugs" on win32 doesn't work, because that OS doesn't have unix's automatic interpreted binary mechanism.

[05:08] <svnbot6> r7049 | putter++ | perl5/PIL-Run/lib6/P5Runtime/PrimP6.pm: statement_control:for now works with blocks of both arity 1 and 2.  But not > 2 (for no good reason).

[05:29] <Detonite> Good morning...

[05:33] <dduncan> good evening

[05:37] <Detonite> ?eval 5

[05:37] <evalbot_7049> 5 

[05:40] <revdiablo> ?eval 5**5

[05:40] <evalbot_7049> 3125 

[05:44] <nothingmuch> morning

[05:44] <Detonite> Morning

[05:52] <Detonite> ?eval ?

[05:52] <evalbot_7049> Error:  unexpected end of input expecting term 

[05:53] <putter> status report: perl5 backend PIL-Run: the current bottleneck is Perl6-Value and Perl6-Container.  Repair of Code.pm's support for slurpy array arguments is perhaps the most pressing.  But there is a lot which is not working.  PIL-Run's current role is to exercise metamodel and Perl6-Value/Container objects.  MM1 is working fine for now.  But the objects need work.  Fyi.

[05:58] <putter> a recent pilrun smoke was 41%.  if the test :todo's could be slurped and "# TODO"'ed, it would be over 50%.

[05:59] <putter> good night &

[06:32] <svnbot6> r7050 | Darren_Duncan++ | /ext/Locale-KeyedText : merge in the latest changes made to the Perl 5 version

[06:38] <svnbot6> r7051 | putter++ | perl5/PIL-Run/lib6/Test.pm: Now handles :todo's.  A temporary kludge - when argument passing works better, this will break.  And can then be replaced. (ie, use slurpy hash parameters, which currently don't exist/work)

[07:21] <svnbot6> r7052 | putter++ | PIL-Run - Removed obsolete TODO.  Created README with usage hints.

[07:21] * Detonite welcomes evalbot_7052

[07:22] <nothingmuch> 8192 would be nice

[07:22] <nothingmuch> it's a big number

[07:23] <webmind-> and a round number

[07:23] <Detonite> Aye, quite round.

[08:15] <svnbot6> r7053 | putter++ | PIL-Run - Added graphs() and codes().  string/length.t now mostly passes.

[09:27] <svnbot6> r7054 | putter++ | PIL/Run/EvalX.pm: improved temp()

[09:34] <nothingmuch> holy crap

[09:34] <nothingmuch> i have C

[09:36] <GeJ> nothingmuch: you have C? is it that bad? C is less fun than Perl6 for sure, but it's not _that_ bad, is it?

[09:36] <nothingmuch> i mean Blondie is compiling to C

[09:37] <GeJ> sounds sweet...

[09:37] <nothingmuch> shyte

[09:37] <nothingmuch> i can't Inline::C it though

[09:37] <nothingmuch> since my types conflict with it

[09:39] * nothingmuch does some yucky search and replace

[09:40] <nothingmuch> WOOT!

[09:40] <ods15> .....

[09:40] <nothingmuch> IT FUCKING WORKS! IT REALLY REALLY WORKS

[09:40] <ods15> if it's C, KEEP IT FRIGGIN C

[09:40] <ods15> C is good

[09:41] <GeJ> I think he means "IT'S ALIVE! ALIIIIIIIIIIIVE!!!!"

[09:41] * Detonite_ claps

[09:41] <ods15> bleh

[09:41] * ods15 bleh's at all

[09:41] <GeJ> nm++

[09:41] <pasteling> "nothingmuch" at 212.143.92.226 pasted "say(42) in C" (32 lines, 742B) at http://sial.org/pbot/13215

[09:41] <ods15> most of this channel seems to like perl6 more than C :/

[09:42] <nothingmuch> ods15: duh

[09:42] <nothingmuch> C is a headache

[09:42] <ods15> C is friggin awesom

[09:42] <nothingmuch> you shouldn't write in C, you should compile to it ;-)

[09:42] <ods15> typedef int IV; typedef FILE * GV; typedef char * PV;

[09:42] <ods15> wtf???

[09:42] <Detonite_> Feh. Pure binary is the only truth.

[09:42] <nothingmuch> ods15: quick hack to match to Cification of perl values

[09:43] <nothingmuch> in perl an IV is an SV that represents an integer

[09:43] <nothingmuch> it's really a struct

[09:43] <nothingmuch> since I'm doing static typing, i'm just using a real int instead

[09:43] <nothingmuch> PV is pointer to string

[09:43] <nothingmuch> GV is filehandle

[09:43] <ods15> Detonite_: i've done a bit of that actually

[09:43] <nothingmuch> you keep "wtf???"ing at stuff like we're idiot

[09:44] <nothingmuch> s

[09:44] <ods15> it was quite fun

[09:44] <ods15> nothingmuch: no, it just means wtf

[09:44] <nothingmuch> well, instead of saying "what the fuck" as if it's insane, you can say "please explain"

[09:44] <ods15> anyway, lol, that's some hilarious C code :)

[09:44] <nothingmuch> why is it hilarious?

[09:44] <ods15> the "leaks" :)

[09:45] <nothingmuch> fuck it, i'm not doing garbage collection

[09:45] <ods15> also, sizeof(char) is just funny :)

[09:45] <nothingmuch> ods15: you program C and yyou think that's funny?

[09:45] <nothingmuch> you are aware that char is not always 8 bits, right?

[09:46] <ods15> rofl, no, it IS, unless you're doing f'ed up typedefs/defines

[09:47] <nothingmuch> ods15: no, it ISN'T

[09:47] <ods15> it is garunteed by C standard that char is always 8 bits

[09:47] <nothingmuch> no, that's what it's guaranteed as the usable space

[09:47] <nothingmuch> it may be aligned to anything else

[09:47] <QtPlatypus> nothingmuch: Can't you use a poblically accessable garbage collector.

[09:47] <nothingmuch> in crays it's 256 values, but takes up 64 bits

[09:47] <nothingmuch> since crays can only address by memory words and not bytes

[09:48] <nothingmuch> QtPlatypus: i don't know of any, i'm not a C coder

[09:48] <nothingmuch> w

[09:48] <QtPlatypus> publically.

[09:49] <nothingmuch> e.g. http://www.hpl.hp.com/personal/Hans_Boehm/gc/ ?

[09:49] <QtPlatypus> Exactly

[09:51] <pjcj> as I recall sizeof(char) is defined as 1 in the C standard

[09:52] <nothingmuch> pjcj: even WRT allocation?

[09:52] <nothingmuch> well, whatever... the compiler will optimize that away

[09:52] <nothingmuch> i was always told never to hard code magic numbers anyway

[09:53] <nothingmuch> my well behaved alter ego, which was telling me that all along, kicks in when coding in unfamiliar territories

[09:54] <pjcj> well, the sizeof a struct may not equal the sum of the sizeof its members, but sizeof(char) will always be 1

[10:13] <clkao> peskky padding

[10:17] <pjcj> pwd

[10:17] <pjcj> bah

[10:45] <ods15> 12:47:23 <@ods15> ahem, sizeof(char) is ALWAYS 1, right?

[10:45] <ods15> 12:51:22 <@dalias> yes

[10:45] <ods15> 12:52:12 <@iive> ods15, no

[10:45] <ods15> 12:52:16 <@iive> it is at least 1

[10:45] <ods15> 12:52:24 <@dalias> iive, stfu and rtfm

[10:45] <ods15> 12:52:30 <@dalias> sizeof(char) is 1 by definition

[10:45] <ods15> 12:52:50 <@dalias> read the c standard or c.l.c faq if you don't believe me

[10:45] <ods15> pjcj: yup

[10:46] <ods15> and struct padding is a totally different thing

[11:02] <pjcj> of course, that doesn't mean 1 char is necessarily exactly 8 bits ...

[11:31] <nothingmuch> me leaves sizeof(char)

[11:31] <nothingmuch> don't feel like editing the file, because it really doesn't matter, and it helps me focus to see hints like that =)

[11:32] <nothingmuch> it allows me to reduce mental stack overflows when reading code i'm not 100% comfortable with

[11:33] <nothingmuch> oh god... not another bug in setup

[11:33] <nothingmuch> =(

[11:33] * nothingmuch does not like maintaining code which is other people's fault

[11:33] <nothingmuch> i'm not sure whether I want to minimize my interaction with the code, and fix things trivially, or whether I should actually work to improve it's robustness

[11:33] <nothingmuch> so that I get less bugs in the future

[11:35] <pjcj> the maintenance programmer's dilemma

[12:01] <QtPlatypus> nothingmuch: I suggest unit tests to solve that problem.

[12:01] <nothingmuch> QtPlatypus: this is absolutely not unit testable

[12:02] <QtPlatypus> THen you can you do robustness work without fear of introducing more bugs.

[12:02] <nothingmuch> just refactoring it from one giant heap into code that can actually be called by unit tests is going to take me forever

[12:02] <nothingmuch> and the reason I don't want to do robustness work is because I don't want to waste time ;-)

[12:03] <nothingmuch> the code parts (Qt UI, configuration management, wizardly behavior, installation logic, and probing) are about as coupled as it gets

[12:03] <nothingmuch> it's about 6000 lines

[12:03] <QtPlatypus> Ouch

[12:03] <nothingmuch> i think 3000 or so are dead

[12:03] <nothingmuch> it's filled with #ifdefs in places like parameter arguments

[12:03] <nothingmuch> e.g.

[12:04] <nothingmuch> int do_this ( foo param,

[12:04] <nothingmuch> #ifdef SOMEDDEF

[12:04] <nothingmuch> bar another,

[12:04] <nothingmuch> #endif

[12:04] <nothingmuch> );

[12:04] <nothingmuch> and then the calls to do_this also look like that

[12:04] <nothingmuch> it's OOP, but doesn't really know it

[12:04] <GeJ> ugly... :(

[12:04] <nothingmuch> things that should be instance data are passed around as parameters

[12:04] <nothingmuch> even the naming thing is all bad

[12:05] <nothingmuch> Config::setConfig or something like that does the full installation ;-)

[12:05] <nothingmuch> and since block comments for non working features are pretty much 50% of the code, it's completely unreadable too

[12:06] <nothingmuch> i resorted to using doxygen's function call graphs, so that could actually understand which code happens when and what parts of it are relevant

[12:06] <nothingmuch> as I see it the code base has no value. I could reimplement all the features with Verby in about 2-3 days

[12:06] <nothingmuch> then I can learn perl's Qt bindings and write a GUI in about 2 weeks

[12:06] <nothingmuch> or I could port Verby to C++ in slightly less, and then do Qt in C++ for another 2 weeks or so

[12:07] <nothingmuch> but i don't want to, it's not important enough

[12:19] * nothingmuch wwraps up his brain for the 40th time today

[12:40] <kolibrie> ?eval $pattern = rx /(5)/; say '123456789'.split($pattern).join(', ');

[12:40] <evalbot_7054> Error: Undeclared variable: "$pattern" 

[12:40] <kolibrie> ?eval my $pattern = rx /(5)/; say

[12:40] <evalbot_7054>  bool::true 

[12:41] <kolibrie> ?eval my $pattern = rx /(5)/; say '123456789'.split($pattern).join(', ');

[12:41] <evalbot_7054> 1234, 5, 6789 bool::true 

[12:41] <kolibrie> ?eval my $pattern = rx /5/; say '123456789'.split($pattern).join(', ');

[12:41] <kolibrie> ?eval my $pattern = rx /5/; say '123456789'.split($pattern).join(', ');

[12:41] <evalbot_7055> 1234, 6789 bool::true 

[12:42] <kolibrie> ?eval my $pattern = rx /5/; say '123456789'.split(rx /($pattern)/).join(', ');

[12:42] <evalbot_7055> 123456789 bool::true 

[12:42] <nothingmuch> kolibrie: this behavior has changed in P6, i think

[12:42] <nothingmuch> see S04

[12:43] <kolibrie> so how do I capture?

[12:43] <nothingmuch> captures are the same

[12:43] <nothingmuch> it's pattern interpolation that changed

[12:43] <nothingmuch> ?eval /5/

[12:43] <evalbot_7055> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[12:43] <nothingmuch> ?eval rx/5/

[12:43] <evalbot_7055> {rule} 

[12:43] <nothingmuch> ?eval ~ rx/5/

[12:43] <evalbot_7055> '<Pugs::Internals::VRule>' 

[12:43] <nothingmuch> i think your pattern is trying to match that string inside 123456789

[12:44] <nothingmuch> s05, not s04... sorry

[12:44] <kolibrie> so if I have a non-capturing rule

[12:44] <kolibrie> how do I pass it to split in such a way that it is captured?

[12:45] <nothingmuch> http://dev.perl.org/perl6/doc/design/syn/S05.html#Variable_(non-)interpolation

[12:46] <nothingmuch> ?eval my $pattern = rx /5/; say '123456789'.split(rx /(<$pattern>)/).join(', ');

[12:46] <evalbot_7055> *** Cannot parse PGE: :w::(<$pattern>) *** Error: PGE Parse error: invalid subrule name at offset 6 (found <<$>>)   123456789 bool::true 

[12:46] <svnbot6> r7055 | nothingmuch++ | Blondie:

[12:46] <svnbot6> r7055 | nothingmuch++ | - minimal compilation to C

[12:46] <svnbot6> r7055 | nothingmuch++ | - no symbolic unification of duplicate nodes (necessary for recursion)

[12:46] <svnbot6> r7055 | nothingmuch++ | - type safety issues need to be resolved for further progress

[12:46] <nothingmuch> =)

[12:46] <scook0> nothingmuch++ # asynchronous list-forcing

[12:46] <nothingmuch> i think that's how it'll work, but it's obviously not there yet

[12:47] <scook0> I was going to reply to your thread, but didn't get around to it... :(

[12:47] * nothingmuch would like feedback, so do get around to it

[12:47] <nothingmuch> ==)

[12:47] <nothingmuch> thanks

[12:47] <scook0> just to point out that all you need is &async_force, and everything else can be considered a shorthand for that

[12:48] <nothingmuch> ah... ofcourse =)

[12:48] <scook0> but I can see gather:async being clearer in many cases

[12:48] <kolibrie> nothingmuch: that could be the syntax, S05 skips that example

[12:49] <nothingmuch> kolibrie: around the middle of "Extensible meta syntax"

[12:49] <nothingmuch> A leading $ indicates an indirect rule. The variable must contain either a hard reference to a rule, or a string containing the rule.

[12:49] <kolibrie> ah yes, that makes sense now

[12:49] <nothingmuch> ingy: ping

[12:50] <kolibrie> so, can that be fixed in pugs, or is that a pge thing?

[12:50] <nothingmuch> i think pge doesn't support it yet, and after that'll make it in it's pge/pugs integration

[12:50] * nothingmuch finally finished doing this: http://search.cpan.org/~ingy/Inline-0.44/C/C-Cookbook.pod#Evaling_C

[12:51] * nothingmuch proudly claims to have "totally lost my marbles"

[13:17] *** ods15_ is now known as ods15

[14:02] <Limbic_Region> I just did a make clean, svn up, perl Makefile.PL, make, pugs -V for the first time in oh, about a month - anyone know why it says r6656?

[14:04] <PerlJam> Limbic_Region: I just did the same thing and I got r7055

[14:06] <Limbic_Region> this is odd then cause when I svn up I am at the proper rev level

[14:06] <Limbic_Region> *shrug*

[14:07] <PerlJam> perhaps you need to make clean or something

[14:07] <scook0> Limbic_Region: simple things: did you check that the build succeeded, and that you're running the right binary?

[14:07] <Limbic_Region> see step 1 in my list above PerlJam

[14:07] <Limbic_Region> scook0 - yep and yep

[14:08] <Limbic_Region> not a big deal - just wanted to play around with some higher order p5 code in p6 and see how much/little it changed

[14:08] <PerlJam> Limbic_Region: maybe you need to "make realclean" or "make distclean" or whatever the bleachy version of clean is.

[14:09] <Khisanth> realdistclean! :P

[14:09] <Limbic_Region> well - considering this box only has 256MB of ram and I can't even use all of it - I will wait until tonight to have another go at it

[14:11] <Limbic_Region> so has anyone been building any new/exciting projects with Pugs lately?

[14:11] * Limbic_Region hasn't checked the examples directory since the whole ?? :: --> ?? !! change

[14:13] <Khisanth> EH?!

[14:13] * Khisanth goes to check summary

[14:14] <Limbic_Region> you mean you weren't aware of the the ?? :: to ?? !! change?

[14:14] <Limbic_Region> that wasn't in this week's summary but the previous

[14:14] <Limbic_Region> which I believe was for 3 weeks

[14:14] <Limbic_Region> IIRC

[14:14] <Khisanth> hey autrijus is on perl.com :)

[14:15] <Limbic_Region> yeah - that article is a couple weeks old too

[14:15] <Limbic_Region> they apparently didn't post a new article as typically done on Thursday evenings

[14:18] <Khisanth> I haven't checked perl.com in a while so it's new to me!

[14:20] <Khisanth> odd are posts in google groups newest > oldest from top to bottom?

[14:20] * Limbic_Region checks more regularly now that he has gotten paid for writing an article published on perl.com

[14:20] <Limbic_Region> dunno - I let gmail do that for me

[14:32] * Limbic_Region wanders off to a doctor's appt

[16:04] <nothingmuch> any news from autrijus?

[16:45] <nothingmuch> i have a problem

[16:45] <nothingmuch> this problem happens from time to time

[16:45] <nothingmuch> if ($condition) { pre };

[16:45] <nothingmuch> unconditional middle;

[16:46] <nothingmuch> if ($condition) { post }

[16:46] <nothingmuch> i hate repeating conditional tests

[16:46] <nothingmuch> i hate repeating unconditional middle

[16:46] <nothingmuch> (even if it's just a single call)

[16:46] <nothingmuch> e.g. if ($condition) { pre; $self->foo; post } else { $self->foo } 

[16:47] <nothingmuch> can anyone think of a solution?

[16:47] <nothingmuch> higher order functions are ofcourse an option:

[16:47] <nothingmuch> my $uncond = sub { $self->foo };

[16:48] <nothingmuch> optional_wrapper($condition, sub { pre }, $uncond, sub { post });

[16:48] <nothingmuch> this can be beautified with prototypes, but it's still rather clunky

[17:03] <nothingmuch> method mk_symbol ($node) {

[17:04] <nothingmuch>     state %allocated will autotovivify {

[17:04] <nothingmuch>         my $type = $node.struct_equiv.type;

[17:04] <ods15> nothingmuch: bah, there's not much you can do about "split" conditional

[17:04] <ods15> not much to do about it :/

[17:05] <nothingmuch>         join("_", $type, ++%.counters{$type});

[17:05] <nothingmuch> }

[17:05] <ods15> i hate it too

[17:05] <nothingmuch> $allocated{$node};

[17:05] <nothingmuch> }

[17:05] <nothingmuch> ods15: there's not much. you can do right now

[17:05] <nothingmuch> but conceptually the logic flow is intuitive:

[17:06] <nothingmuch> pair up some code blocks

[17:06] <nothingmuch> and attach them to the same conditional

[17:06] <ods15> ?

[17:06] <nothingmuch> i'm asking for new syntax ideas

[17:06] <nothingmuch> something prettier than:

[17:06] <nothingmuch> my $cond = <test>;

[17:06] <nothingmuch> if $cond { pre }

[17:06] <nothingmuch> mid

[17:06] <nothingmuch> if $cond { post }

[17:06] <ods15> if the conditional is intense i sometimes use a condition variable with a nive name :)

[17:07] <ods15> nice* name

[17:07] <nothingmuch> that's not splitting it up

[17:07] <nothingmuch> here is an idea:

[17:07] <nothingmuch> label: if ($condition) { pre }

[17:07] <nothingmuch> mid

[17:07] <nothingmuch> label: { post }

[17:08] <nothingmuch> where label is the same

[17:08] <nothingmuch> it's much more "static" than making a new variable

[17:08] <ods15> i dont like it

[17:08] <Aankhen``> if ($condition) { pre; PAUSE { middle; }; post; }

[17:08] <Aankhen``> Seems strange when I write it out.

[17:08] <nothingmuch> Aankhen``: what I don't like about that is cuddling

[17:08] <Aankhen``> Basically, I'm thinking of "pausing" the condition.

[17:08] <nothingmuch> the nested block is under the if () { }

[17:08] <nothingmuch> so it's unintuitive to read it

[17:09] <Aankhen``> Yeah, I know, I don't like it either; just throwing out ideas./

[17:09] <nothingmuch> but I wanted something like that

[17:09] <nothingmuch> hmm

[17:09] <Aankhen``> s|/||

[17:09] <nothingmuch> maybe just like if else:

[17:09] <ods15> nothingmuch: find some other kind of parenthesis and reverse direction it

[17:09] <nothingmuch> if ($cond) { 

[17:09] <nothingmuch> } pause {

[17:09] <nothingmuch> mid

[17:09] <nothingmuch> } cont {

[17:09] <nothingmuch> }

[17:09] <nothingmuch> if ($condition) {

[17:09] <nothingmuch> } always {

[17:09] <ods15> anyway, i say give it up

[17:09] <nothingmuch> } conditional {

[17:09] <nothingmuch> }

[17:09] <nothingmuch> ods15: what do those comments help

[17:09] <Aankhen``> Hmm.

[17:10] <nothingmuch> if you have critique, share it

[17:10] <ods15> this feature accomplishes nothing imo, it's not more readable

[17:10] <nothingmuch> but there's no need to pessimize pointlessly

[17:10] <Aankhen``> if ($condition) { ... } but always({ ... })

[17:10] <Aankhen``> Ahh, that reads better than it functions. :-P

[17:10] <ods15> arno, because you need it in the middle

[17:10] <nothingmuch> Aankhen``: i'm reminded of while (...) { } contineu { }

[17:10] <ods15> heh

[17:10] <nothingmuch> s/eu/ue/

[17:11] <ods15> nothingmuch: well, the flaws are obvious :/ i'm thinking of solutions right now, and coming up empty

[17:11] <Aankhen``> Me too, but it seems a little complicated.

[17:11] <Aankhen``> (the if, always, conditional)

[17:11] <nothingmuch> ods15: so please avoid pointless bashing

[17:11] <Aankhen``> `if ($condition) { ... } pause { ... } resume { ... }` might make more sense there, BTW.

[17:11] <nothingmuch> hmm, i like that

[17:12] <Aankhen``> Just a little lengthy...

[17:12] <nothingmuch> i think we need to s/pause/$thesaurus.lookup("always").pick/;

[17:12] <Aankhen``> Indeed.

[17:13] <ods15> "default" heh no

[17:13] <Aankhen``> All of them are very lengthy...

[17:13] <nothingmuch> http://thesaurus.reference.com/search?q=unconditional

[17:13] <ods15> i'm thinking switch statement :)

[17:13] <nothingmuch> ods15: we have that too, but it doesn't apply

[17:13] <nothingmuch> lack of break in C can only move it downwards

[17:13] <nothingmuch> unless you add a goto or something

[17:13] <ods15> i wish switch supported this

[17:14] <Aankhen``> Heh, "surely"...

[17:14] <ods15> switch { case a: a_code; case b: b_code; case c: c_code; default: common code; }

[17:14] <nothingmuch> i think maybe 'uncond' instead of always/pause

[17:14] <ods15> as in, each runs for it's case, and one that runs for several cases :/

[17:14] <ods15> lol, "dead"

[17:15] <Aankhen``> ods15: given ($foo) { when 1 { ... }; when 2 { ... }; when 3 { ... }; common_code(); }

[17:15] <Aankhen``> That's the Perl 6 version, IIRC.

[17:15] <ods15> Aankhen``: not wquit'e though

[17:15] <ods15> quite*

[17:15] <ods15> i want even more

[17:15] <nothingmuch> ods15: when in perl 6 is pretty cool

[17:15] <nothingmuch> read in s04 it hink

[17:15] <ods15> switch { case a: a_code; case b: b_code; case c: c_code; abc_code; break; e_code: d_code: not_abc; }

[17:16] <nothingmuch> it's actually much simpler than it looks

[17:16] <ods15> get what i meant

[17:16] <Aankhen``> ods15: Yes; too lazy to figure it out in P6 right now though.

[17:16] <Aankhen``> nothingmuch: "uncond".chars == "always".chars

[17:16] <ods15> the 'common' code i can just put outside the switch if it was really common :)

[17:17] <nothingmuch> Aankhen``: so you want it shorter?

[17:17] <Aankhen``> nothingmuch: Yes.

[17:17] <nothingmuch> hmm

[17:17] <Aankhen``> I keep thinking of "yet".

[17:17] <nothingmuch> errm

[17:17] <nothingmuch> let's chuck this at p6l

[17:17] <Aankhen``> if ($cond) { ... } yet { ... } resume { ... }

[17:17] <Aankhen``> Mmm, TBH, it's not something which I'm dead set on.  I can do without it.  I'm just trying to give you suggestions. :-)

[17:18] <nothingmuch> fairy nuff

[17:18] <Aankhen``> Then again, if you do p6l it, I'll back you up: it should be fun. =)

[17:20] <Aankhen``> The most natural -- though sadly lengthy -- syntax would be: if ($cond) { ... } regardless { ... } again { ... }

[17:20] <Aankhen``> s/again/conditionally/

[17:20] <nothingmuch> http://thesaurus.reference.com/search?q=regardless

[17:21] <Aankhen``> Hehe... if ($cond) { ... } anyhow { ... } but_conditionally { ... }

[17:21] <Aankhen``> "but" is already taken, sadly.

[17:22] <Aankhen``> It's the only candidate.  The others are too lengthy.

[17:22] <nothingmuch> i don't like 'but' for this... it's too general

[17:22] <nothingmuch> i don't mind long either... else and elsif are about as long as 'uncond'

[17:22] <Aankhen``> I'm not suggesting we use it, just lamenting the unfortunate state of affairs.

[17:22] <nothingmuch> not to mention 'else if' which i really would prefer over 'elsif'

[17:23] <nothingmuch> i find typing the extra chars easier than remembering an arbitrary contraction

[17:23] <Aankhen``> Dude, I don't mind long stuff either, but if we propose this, I'm quite certain people will keep a beady eye on the length.

[17:23] <nothingmuch> phooey for them

[17:23] <nothingmuch> we'll see what happens ;-)

[17:23] <Aankhen``> Heh.

[17:24] <Aankhen``> Then `uncond` seems to be a good choice.

[17:24] <Aankhen``> if ($cond) { ... } uncond { ... } resume { ... }

[17:24] <nothingmuch> i don't like resume... here's why:

[17:24] <nothingmuch> uncond always happens

[17:25] <nothingmuch> if () { ... } happens 50% of the time, you would guess

[17:25] <nothingmuch> so it seems to mee like resume is continuing the uncond for no appearant reason

[17:25] <Aankhen``> Hmm, I see.

[17:26] <nothingmuch> recond sucks ;-)

[17:26] <Aankhen``> I was thinking of in terms of this: `uncond` "suspends the conditionality of the following statements", whereas `resume` resumes the "conditionality".

[17:26] <nothingmuch> is there a word for predicated maybe?

[17:26] <nothingmuch> yes, that makes sense, but from an execution perspective, not so much a linguistic one, i think

[17:26] <Aankhen``> Yeah, you're right.

[17:27] <nothingmuch> but let's use that for now

[17:27] <Aankhen``> What about `conditionally`, since length isn't a factor?

[17:27] <nothingmuch> that's too much

[17:27] <nothingmuch> ;-)

[17:27] <Aankhen``> Or, wait... just `cond`?

[17:27] <nothingmuch> yes, let's use that

[17:28] <Aankhen``> if ($cond) { may_happen(); } uncond { always_happens(); } cond { may_happen_too(); }

[17:32] <Aankhen``> Yay.  Only 8 hours to go for the first season of Beast Wars to finish downloading.

[17:33] * nothingmuch tries hard to finish the next big step in C compilation tonight

[17:33] <Aankhen``> C compilation?

[17:34] <nothingmuch> Blondie compiles to C

[17:34] <Aankhen``> Blondie?

[17:34] <nothingmuch> ah

[17:34] <Aankhen``> Sorry, I appear to be out of the loop.

[17:34] <nothingmuch> Blondie is an intermediate language AST

[17:34] <Aankhen``> I see.

[17:35] <dduncan> is there a Dagwood module to go with it?

[17:37] * Aankhen`` wanders off to play Condition Zero.

[17:39] <Aankhen``> Oh great, powercut.  BBL.

[17:39] * Aankhen`` hugs his UPS.

[17:40] <nothingmuch> that i'm playing around with

[17:40] <nothingmuch> which is supposed to be a preview of the Perl 6 compilation pipeline

[17:40] <nothingmuch> so far it has a perl backend and a C backend that successfully share a prelude

[17:40] <nothingmuch> and simply replace the parts of the prelude that is easiest for them to replace

[17:40] <nothingmuch> bah, cable modem died

[17:40] <nothingmuch> it has type inferrencing

[17:40] <nothingmuch> which is optional for the perl runtime, but required for C compilation

[17:40] <nothingmuch> (compilation goes down to bare metal types - no boxing whatsoever)

[17:41] <nothingmuch> dduncan: que es dagwood?

[17:46] <nothingmuch> gaal: ?!

[17:46] <gaal> aloha!

[17:47] <gaal> the army proves its stupidity yet again!

[17:47] <gaal> they canceled the mission i was called for, but somebody forgot to send out notices

[17:47] <nothingmuch> heh

[17:48] <gaal> so, that was a day wasted

[17:48] <gaal> now you know where your tax shekels are going

[17:49] <gaal> ooh, c!

[17:50] <gaal> what be "prel", nm?

[17:50] <nothingmuch> builtin prelude replacement

[17:51] <nothingmuch> perhaps it should be s/prel/builtin/

[17:51] <gaal> "native"?

[17:51] <nothingmuch> http://svn.openfoundry.org/pugs/perl5/Blondie/lib/Blondie/Backend/C/Builtins.pm

[17:51] <nothingmuch> sub prelude {

[17:51] <gaal> anyway, i need a nice long bath

[17:52] <gaal> or like the brits say when speaking of Jane Austen's favorite town, baaaaaath

[17:52] <nothingmuch> heh

[17:52] <gaal> very nice to see you :-)

[17:52] <gaal> but, later

[17:57] <nothingmuch> oops

[17:57] <nothingmuch> ciao

[18:21] <dduncan> nothingmuch, there is a well known newspaper comic strip called 'Dagwood', which is about a couple whose names are 'Dagwood' and 'Blondie'

[18:22] <dduncan> it sounded like you were naming your module after the wife

[18:22] <nothingmuch> oh

[18:22] <nothingmuch> nop

[18:22] <nothingmuch> e

[18:22] <dduncan> so I wondered if there was one named after the husband too

[18:22] <nothingmuch> abraxxa in #catalyst brought it up

[18:22] <nothingmuch> i asked for a name for a dumb intermediate language

[18:22] <nothingmuch> i thought of calling it DIL

[18:22] <dduncan> how about Dunce?

[18:23] <nothingmuch> too late

[18:23] <nothingmuch> but that is acctually a pretty nice name

[18:23] <nothingmuch> too bad I didn't ask you earlier ;-)

[18:24] <dduncan> now, I haven't RTFM yet, but what is Blondie to be used for ... or is it just a fun project?

[18:24] <nothingmuch> it's an experiment

[18:24] <nothingmuch> i'm trying out the compilation scheme I raised to p6l with a smaller language

[18:24] <nothingmuch> i'm trying to write multiple backends that reuse as much code as possible

[18:24] <dduncan> that's all I need to know

[18:24] <nothingmuch> but without limiting the possibility of optimizing any backend given enough time

[18:58] <PerlJam> nothingmuch: do you know of the book entitled Blondie24 ?

[19:28] <gaal> say, if I want to debug-print all Envs defined, can I? this probably is a nonsensical question from the pov of a pure language, but...

[19:35] * Aankhen`` goes to sleep.

[19:36] <Aankhen``> G'night.

[19:51] <svnbot6> r7056 | putter++ | PIL-Run - Create Code's less often (more correctly).  Minor other tweaks.

[20:02] <kolibrie> gaal: that's an Haskell question? # about Envs

[20:37] *** whiteg_ is now known as whiteg

[21:22] <gaal> kolibrie, yes: a pugs internals question, as i'm trying to debug a misplaced write to an env.

[23:04] <svnbot6> r7057 | putter++ | PIL-Run - Create Code's somewhat more often (more correctly;).

[23:35] * geoffb waves

[23:35] <geoffb> Hi everyone

[23:35] * geoffb has been buried in stabilizing his new system

[23:36] <geoffb> What's been going on of late?  STATUS and docs/journal are both about a week old . . . .

[23:38] <geoffb> rafl, ping

[23:38] <rafl> geoffb: pong

[23:40] <geoffb> I'm finally taking the time to learn how to use packages.qa.debian.org, because I want to know how long until pugs is in testing . . . but I'm not sure how to tell when something like gmp (needed for ghc6) will go in.

[23:40] <geoffb> When a package will break a whole bunch of packages (I assume for version dependencies), but lots of packages depend on it, what happens?

[23:40] <geoffb> Logjam?

[23:42] <geoffb> And from the perspective of a user, what's most likely to get me 'apt-get build-dep pugs' within the next few days?  Will just waiting do it, or do I need to a test/unstable hybrid?

[23:43] <rafl> geoffb: afaik they need to be recompiled for the latest gmp version. If that's done they go in all at once.

[23:43] * geoffb figures it's about time he became a good Debian citizen after all these years . . . starting with testing packages I need, I guess.

[23:44] <geoffb> rafl, so it's just an automated thing?  Or do the maintainers of all of those packages need to individually change their dependencies and reupload?

[23:45] <rafl> geoffb: The maintainers need to upload a new version that get's recompiled against the right version. Or somethimes other people do an NMU (non-maintainer-upload), as it happened for ghc6's gmp transition.

[23:47] <geoffb> rafl, OK, that sounds like the answer to my previous question is "Dependency forest is too thick -- probably need to go with a hybrid install"

[23:48] <rafl> geoffb: Installing gmp/pugs from sid into etch isn't a big problem. gmp isn't in etch yet because there are some problems on alpha.

[23:48] <rafl> Nothing that concerns you on i386, powerpc or whatever you're using.

[23:49] <geoffb> Oh, there really are alpha problems -- I had read the little thing that said "alpha gets blamed for everything because it's the first arch in the list", and I assumed that applied.

[23:49] <geoffb> i386, FWIW.

[23:51] <geoffb> If I go with a hybrid setup, how do I avoid wanting to install one package that happens to have a lot of dependencies, and finding myself suddenly with hundreds of sid packages?

[23:57] <rafl> You could pin to the etch release or only install the packages you want from sid by hand via dpkg (as I do)

[23:57] <rafl> (for those machines that don't run sid, most of my boxes are unstable)

