[00:10] <nothingmuch> stevan: ping

[00:50] <Juerd> dvzine.org++

[07:23] <gaal_> ?eval my @pats = /1/, /2/; say "MATCH" if 1 ~~ any @pats;

[07:23] *** evalbot_7981 is now known as evalbot_7982

[07:23] <evalbot_7982> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[07:23] <nothingmuch> morning gaal_ 

[07:24] <gaal_> ?eval my @pats = rx:Perl5/1/, rx:Perl5/2/; say "MATCH" if 1 ~~ any @pats;

[07:24] <evalbot_7982> OUTPUT[MATCH ] bool::true 

[07:24] <gaal_> hu

[07:24] <gaal_> hi

[07:24] <gaal_> ?eval my @pats = rx:Perl5/1/, rx:Perl5/2/; say "MATCH" if 77 ~~ any @pats;

[07:24] <evalbot_7982> undef 

[07:24] <gaal_> so far so good. but:

[07:24] <gaal_> ?eval my @pats = rx:Perl5/1/, rx:Perl5/2/; my $junc = any @pats; say "MATCH" if 1 ~~ $junc;

[07:24] <evalbot_7982> undef 

[07:25] <gaal_> bug? feature?

[07:26] <nothingmuch> i dunno

[07:26] <nothingmuch> looks like a bug

[07:26] <gaal_> Yeah, think so too :-/

[07:26] <nothingmuch> to bad pugs doesn't have real perl regex

[07:26] <gaal_> asking the list.

[07:26] <nothingmuch> then we could debug with ??{ }

[07:27] <gaal_> there's always gdb and the nearest mental institution.

[07:27] *** gaal_ is now known as gaal

[08:54] <pernod> Hello all.

[08:54] <pernod> Quick question?

[08:56] <pernod> To compile pugs on XP with nmake and mingw, I have to run the following on the Makefile generated from "perl Makefile.PL"

[08:56] <pernod> perl -i.bk -pe "s{cd \.\.}{cd \.\./\.\.}g" Makefile

[08:56] <pernod> (Replace "cd .." with cd "../..")

[08:57] <pernod> Any ideas how this can be fixed in Makefile.PL? My makemaker-fu is very weak ....

[09:10] <svnbot6> r7983 | Darren_Duncan++ |  r904@Darren-Duncans-Computer:  darrenduncan | 2005-11-22 01:05:30 -0800

[09:10] <svnbot6> r7983 | Darren_Duncan++ |  /ext/Rosetta-Incubator : added 2 new documentation files /docs/Overview and /docs/FAQ ... the FAQ is for you to write your questions in

[09:33] <gaal> pernod: it's been a while since I built with mingw, and I'm at $work now so I can't investigate... any idea *why* this is needed?

[09:35] <pernod> Oh, just to simplify things.

[09:35] <pernod> Having to manually munge an automatically generated Makefile seems a bit counter-intuitive to med :)

[09:35] <pernod> (me, even)

[09:37] <pernod> My steps for building pugs now is:

[09:37] <pernod> perl Makefile.pl

[09:37] <pernod> perl -i.bk -pe "s{cd \.\.}{cd \.\./\.\.}g" Makefile

[09:37] <pernod> Then nmake -> nmake install

[09:37] <pernod> That's not normal, is it?

[09:50] <dduncan> fyi, while the document set is incomplete, hopefully those of you interested in Rosetta will learn some things from the new Overview

[10:36] <gaal> sorry, was called away.

[10:37] <gaal> I meant, why is this substitution needed in mingw in the first place? How come the path is wrong there?

[10:45] <pernod> *back from lunch*

[10:45] <pernod> I have no idea, gaal.

[10:45] <pernod> Actually, I think it is nmake's fault.

[11:06] <Juerd> pernod: Don't escape . on the RHS. The RHS is a string, not a regex.

[11:07] <Juerd> pernod: s{cd \.\.}{cd ../..}g

[11:07] <pernod> Thanks Juerd :)

[11:07] <Juerd> It it makes you feel more comfortable to not escape it if it's in actual quotes, feel free to use s{cd \.\.}"cd ../../"g instead :)

[11:07] <Juerd> Eh, with a / less.

[11:07] <pernod> (Just a quick one liner, it did the job tho ...)

[11:07] <Juerd> Sure does.

[11:08] <Juerd> I'm picky because there's always someone who learns from what we do.

[11:10] <pernod> And you reminded me of something I had forgotten. Picky++.

[11:14] <masak> karma Picky

[11:14] <jabbot> masak: Picky has neutral karma

[11:19] <Juerd> karma foo

[11:19] <jabbot> Juerd: foo has neutral karma

[11:19] <Juerd> foo++

[11:19] <Juerd> karma foo

[11:19] <jabbot> Juerd: foo has neutral karma

[11:19] <Juerd> Borken.

[11:19] <wolverian> goddamn, Evolution has the worst key bindings I've ever seen.

[11:22] <Juerd> wolverian: Now that's a funny way to say you've never seen Emacs ;)

[11:23] <wolverian> er.. good point

[12:41] <svnbot6> r7984 | fglock++ | * /docs/notes/lazyness.txt - started Array/Hash internals

[12:55] <rafl> Juerd: CLT orga list says: "Das LPI ist an der Teilnahme zu den Chemnitzer Linux-Tagen interessiert,"

[13:28] <Juerd> rafl: Aber sollen sie da auch das LPIC-2 haben? Gewoehnlich nur das 1. LPIC... :)

[13:28] <Juerd> LPIC-1 hab' ich schoen gemacht.

[13:29] <Juerd> Eh, schon.

[13:29] <Juerd> Beide schoen und schon :)

[13:30] <Juerd> Ihre Sprache SAUGT :)

[13:30] <Juerd> Ebenso wie woertliche Uebersetzungen :P

[13:31] <Jooon> ich bin ein perliner

[14:20] <rafl> Juerd: Darueber sagt die Mail nichts.

[14:20] <rafl> Btw, are there tools to set up a local cpan mirror (especially the search interface and documentation viewing)?

[15:28] <integral> rafl: try kobesearch.cpan.org

[15:32] <rafl> integral: I actually want to install it locally to work offline.

[15:32] <integral> umm, that's what I mean.  See http://cpan.uwinnipeg.ca/htdocs/faqs/faq.html#11

[15:32] <integral> but there's also other things like CPAN::Mini, and podserver

[15:33] <rafl> OK, so I may can replace my old minicpan + pod extracing + swig search

[15:41] *** wilx`` is now known as wilx

[15:41] <svnbot6> r7985 | iblech++ | * Usual svn props.

[15:41] <svnbot6> r7985 | iblech++ | * t/operators/till.t: Incorporated Larry's answers from my p6l post:

[15:41] <svnbot6> r7985 | iblech++ |   http://www.nntp.perl.org/group/perl.perl6.language/24098

[15:41] <svnbot6> r7985 | iblech++ | * New t/oo/methods/topic.t: $_ is *not* self in methods by default.

[15:41] <svnbot6> r7985 | iblech++ |   You've to explicitly write (per update section of r6636 of A12)

[15:41] <svnbot6> r7985 | iblech++ |     method foo ($_: ...) {...}

[15:41] <svnbot6> r7985 | iblech++ | * t/oo/attributes/defaults.t:

[15:41] <svnbot6> r7985 | iblech++ |     has $.foo = { do_stuff_with($_); self.foobar };

[15:41] <svnbot6> r7985 | iblech++ |   $_ is the attribute being initialized, "self" refers to the object being

[15:41] <svnbot6> r7985 | iblech++ |   initialized (per S12).

[15:45] <gaal> so what is $_ set to in a random method?

[15:45] <GeJ> what is "Usual svn props." I see them pretty often, but never figured out what it means...

[15:46] <gaal> GeJ: a file in subversion can have some metadata about its encoding, lineendings etc.

[15:46] <gaal> when you add a file to pugs, you should usually run util/add-svn-props.sh on it to set the defaults.

[15:47] <gaal> often people forget, and often iblech remembers for them. ;-)

[15:47] <GeJ> huh, ok... 

[15:47] <GeJ> nice "reminder" ;)

[15:48] <integral> except if you're using svk, you have to cat the script, and manually run the commands ;-)

[15:48] <gaal> the practical use of this is that if I checkin a text file on Windows (say) and you pull it in linux, you get \n instead of \r\n lineendings.

[15:48] <gaal> integral: and the svk variats are? s/svn/svk/ simply?

[15:49] <Limbic_Region> heh

[15:49] <gaal> if so, i'll fix that in a jiffy.

[15:49] <Limbic_Region> and all this time I thought props meant something else

[15:49] <integral> gaal: yeah

[15:49] <GeJ> gaal: oki, thanks for the explanation.

[15:49] <gaal> np :)

[15:49] <integral> gaal: something like a --svk flag for the script?

[15:50] <gaal> no, DWIM.

[15:50] <gaal> huh? someone did that already.

[15:50] <integral> *shudder*.   I shudder after hacking the version_h script

[15:50] <integral> oh, ok, I'm showing my lack of contributions recently

[15:50] <gaal> chromatic and dduncan did.

[15:51] * gaal praises svn praise

[15:51] * gaal blames svn blame

[15:53] <GeJ> isn't that the same command?

[15:53] <GeJ> one being more team-friendly than the other?

[15:54] <Su-Shee> Hi.

[15:57] <gaal> GeJ: indeed so.

[15:57] <gaal> sadly they are huffmanized wrongly.

[16:02] <autrijus> gaal: I'd say $_ in a random method ought to be out-of-scope if it is out of scope

[16:03] <gaal> so, compile error?

[16:04] <autrijus> yup

[16:04] <Limbic_Region> autrijus - question came up at the Monastery the other day that you may be able to help answer as I haven't seen pmichaud around anywhere

[16:04] <autrijus> pm is usually on #parrot (but is currently not)

[16:04] <autrijus> url to the q?

[16:05] <Limbic_Region> isn't one - asked in the CB - going to repeat here

[16:05] <autrijus> 'k

[16:05] <Limbic_Region> someone who has more than a basic understanding of the p5 regex engine was concerned that a lot of the bad mistakes/decisions were going to be avoided in p6

[16:05] * Limbic_Region was just wondering how much pmichaud was familiar with the p5 regex engine

[16:06] <Limbic_Region> I explained that p6 rules were far more than just regexen though they contained them as a subset

[16:06] <Limbic_Region> but that if I could find an answer I would

[16:06] <autrijus> well, the design is jointly made by at least lwall, dconway with pm

[16:06] <autrijus> and lwall should know something about rx; dconway also should, having written Perl6::Rules in p5rx

[16:07] <Limbic_Region> heh

[16:07] <autrijus> also, p6rx is, as you said, a very much different beast, so it's hard to repeat mistakes even if you try

[16:07] <Limbic_Region> well, after looking at the pge status and readme I didn't find what I was hoping I was looking for

[16:08] <Limbic_Region> something along the lines of a - here's what worked and didn't work sorta thing

[16:08] <Limbic_Region> *shrug* - great minds are working on it, I am not sure why people can't just trust that

[16:08] <autrijus> that said, I don't know much about how pge's plan looks like for optimization -- ask on p6c? iirc pm is in the feature/defect driven mode still, not tuning

[16:09] <autrijus> "what worked and didn't work" sounds like exactly what compilers/pge/STATUS describes no?

[16:09] <Limbic_Region> everytime pmichaud has talked about optimization (that I have heard) - it has been that it isn't there yet and he doesn't plan on looking at doing that until the time is right

[16:09] <autrijus> yes, and I think it's sensible.

[16:09] * Limbic_Region reads it again to be sure

[16:10] <Limbic_Region> no, but I think we are talking past each other

[16:10] <Limbic_Region> demerphq (the person asking the question) was interested in implementation details

[16:10] <stevan> evening autrijus 

[16:11] <Limbic_Region> even after I explained that rules were not regexes

[16:11] <Limbic_Region> and that parrot was the p5 VM

[16:11] <Limbic_Region> and that by definition a lot of implementation would be different

[16:11] <Limbic_Region> he still didn't sound convinced

[16:11] <autrijus> stevan: yo!

[16:11] * Limbic_Region is glad of his skeptisism though

[16:12] <Limbic_Region> In areas where I have 0 competency I just take it on blind faith that people smarter than me will get it right

[16:12] <autrijus> Limbic_Region: if he'd like, a great exercise would be porting PGE/Rule.pir and PGE/Match.pir to p5.

[16:12] <autrijus> or better, p6. (or to C++, or to Java, or to whatever he feels like)

[16:13] <autrijus> that can make the design grokkable to him, I think

[16:13] <Limbic_Region> autrijus - I have given him the link to S05, to the p6.compiler group, and to the Status/readme in the repository

[16:14] <Limbic_Region> if that doesn't satiate him he will have enough info to dig further

[16:14] <Limbic_Region> and if he doesn't have the time/interest to dig further than he shouldn't be b1tching

[16:14] <autrijus> nodnod, but porting is a cute nice useful challenge, I think

[16:14] <Limbic_Region> ;-)

[16:15] <autrijus> people bitching is good... as long as it leads somewhere

[16:16] <Limbic_Region> yep yep

[16:16] <Limbic_Region> demerphq is busy with real stuff but I am sure he isn't just blowing hot air, I respect him a great deal

[16:16] <autrijus> stevan: so uhm, docs/interpreter.pl - care to talk a bit?

[16:16] * Limbic_Region has to wander off now

[16:16] <pasteling> "stevan" at 67.186.136.119 pasted "Sketch for Module/Signature DSL" (105 lines, 3.4K) at http://sial.org/pbot/14455

[16:16] <autrijus> ooh

[16:16] <stevan> autrijus: interpreter.pl is just silliness :)

[16:17] * stevan only has a few minutes to talk really,.. 

[16:17] <autrijus> ok, let's talk about dsl instead

[16:17] <stevan> I think I have been reading too much ML stuff

[16:17] <autrijus> your brain are being typed

[16:17] <stevan> LOL

[16:17] <stevan> yes it is

[16:18] <autrijus> type Opauqe = Opaque

[16:18] <stevan> so the core of what I want this to do is to provide another layer of abstraction over the core types/things which can be used as a bridge to user land

[16:19] <stevan> a signature can easily become a Role in userland

[16:20] <stevan> it also becomes easy to swap out faster/better implementations

[16:20] <stevan> because we never hard code the impl

[16:21] <autrijus> yup, it's just the abstract signature

[16:21] <stevan> I was thinking last night about maybe creating signatures for Class, Object, Package, Role, etc too

[16:21] <autrijus> how is BIT different from Bit?

[16:21] <stevan> BIT is the sig,.. Bit is the things created by the Functor 

[16:21] <stevan> Bit is concrete, BIT is abstract

[16:22] <autrijus> got it

[16:22] <stevan> so if I also wrap Class, Object, Package, etc,.. then those impl's too can be substituted

[16:22] <stevan> I am not sure if that makes sense though

[16:23] <autrijus> it amounts to provide explicit types to the primitives you have in Core

[16:23] <stevan> maybe allowing for Class to be written as native code rather than on top of the runtime

[16:23] <stevan> autrijus: yes, that is the goal :)

[16:25] * stevan has to run, but will be back in about 1 1/2 hours

[16:25] <stevan> will you still be up?

[16:27] * stevan &

[16:27] <autrijus> I hope :)

[16:28] <autrijus> maybe not -- will definitely checkback tomorrow though. last night's hotel doesn't have net and dialup sucked :/

[16:34] <fglock> autrijus: ping

[16:38] <autrijus> fglock: pong

[16:39] <fglock> autrijus: I'm trying to find out why there is a need for a "List" class. It looks like Array can do everything, and List is just an implementation detail

[16:41] <autrijus> I thought the idea of Arrays is that it manages storage for a collection of scalars

[16:41] <autrijus> so it's lvalue; list is rvalue

[16:43] <autrijus> so the list class would not support destructive updates; arrays handle that part

[16:44] <autrijus> in my mind lists only has read interface, and arrays handles push/pop/splice/etc by managing some data structure in memory that may be much more complex than a list, but you can tell it to yield a list using something like FETCHALL

[16:45] <fglock> my thought is that a read-only Array could be used in place of List

[16:46] <Juerd> autrijus: luqui explained to me yesterday that some people, including Larry, use the term "List" to mean what he describes as Tuple.

[16:46] <Juerd> autrijus: This is obviously not the same thing as what we call the things in li^H^Hslurpy context

[16:47] <Juerd> I think it's important to get terminology in stone soon :)

[16:47] <Juerd> It's hard to cooperate if we use different words for the same things...

[16:47] <autrijus> fglock: that's like saying using a read-only scalar in place of value

[16:47] <Juerd> And same words for diffgerent things.

[16:48] <Juerd> s/ffg/ff/

[16:48] <fglock> for example, in a parameter list: ($a,$b) - $a is Scalar, $b is Scalar, @_ is Array - the "List" is an implementation detail

[16:50] <autrijus> Juerd: indeed.

[16:51] <fglock> I'm trying to write down some definitions - I've read some discussions in the mail lists, but I don't have a conclusion yet

[16:52] <autrijus> fglock: in my mind, when you write (1,2), it constructs a List object, not a readonly Array object

[16:53] <Juerd> In my mind, List objects *do not exist*.

[16:53] <Juerd> And parens have nothing to do with lists.

[16:53] <autrijus> that last part I agree. infix:<,> however has everything to do with lists.

[16:54] <fglock> how is the List API different from r/o Array? (except that Array can be bound and tied)

[16:54] <autrijus> Juerd: so, List objects do not exist... how would you explain that (1,2)[0] is okay but (1,2).push(3) is not?

[16:55] <fglock> autrijus: because it is r/o?

[16:55] <autrijus> fglock: I'd argue Array API is taking List API and adding destructive update routines

[16:57] <autrijus> also, I recall that Lists are single dimensional

[16:57] <autrijus> and arrays may have 2+ dimensionality

[16:59] <autrijus> but as you said... we can treat all lists as "constant Array", or as something that only exists interimly at implementation level -- whenever you try to use it as an object, it gets promoted to an Array first

[16:59] <autrijus> I'd like to make the distinction only because:

[17:00] <autrijus> it makes it easier to subclass List

[17:00] <autrijus> without thinking about the destructive update part of Array

[17:01] <autrijus> but this may be a weak reason.

[17:03] <autrijus> (am I making some sense?)

[17:03] <fglock> I've been thinking of making Array just define the API, and let "Eager" and "Lazy" roles define the implementation. One could define other implementations. So if you want to make an implementation that fails() on push/pop you can.

[17:04] <autrijus> but I'd like .push/.pop to be compile time error

[17:05] <autrijus> it makes little sense to make the runtime error.

[17:05] <autrijus> $ perl -ce '(1,2)=3'

[17:05] <autrijus> Can't modify constant item in list assignment at -e line 1, at EOF

[17:05] <autrijus> -e had compilation errors.

[17:06] <fglock> yes, this makes sense

[17:08] <fglock> but then, you still don't need List in the runtime - only at compile/optimization phases - after that, you can treat everything as Array

[17:08] <autrijus> so then it makes sense to make what (1,2) produced to not be Array-but-fail-on-pop, but something else that does not have .pop altogether.

[17:09] <autrijus> well -- if we have List, you can use it in signatures -- for example

[17:09] <autrijus> my List @foo; # this would be an array that only contains readonly lists

[17:09] <autrijus> and that will change the semantic.

[17:10] <autrijus> I'm not entirely sure it's the Right Way to go, but something to consider

[17:12] <fglock> how do you populate this Array? if you push a List, it would push the Values instead, I think

[17:13] <fglock> please note I'm not against List - I'm just trying to figure things out

[17:14] <autrijus> *nod*

[17:15] <autrijus> thinking

[17:16] <autrijus> I don't have a good answer, really... because ArgList conflates with List.

[17:16] <autrijus> (brb)

[17:19] <fglock> bbiab too

[17:44] <fglock> (back)

[17:45] * stevan is back

[17:46] * geoffb is bak

[17:46] <geoffb> It's a party!

[17:46] <stevan> hey autrijus :)

[17:46] <autrijus> hey :)

[17:46] <geoffb> hey all!

[17:47] <stevan> so autrijus any thoughts on the DSL stuff?

[17:48] <autrijus> fglock: http://www.ruby-doc.org/core/classes/Range.html

[17:48] <autrijus> fglock: Range is of course just a small part of what List is

[17:50] <autrijus> fglock: I think to push a List into @foo you'd like to do @foo.push(List.new(1,2,3))

[17:50] <autrijus> instead of @foo.push(1,2,3)

[17:50] <autrijus> stevan: I think the DSL may better be a restricted set of p6

[17:51] <stevan> autrijus: good point

[17:52] <stevan> right now it is the bastard love child of Perl 6 and Standard ML :)

[17:53] <autrijus> I think p6 subsumes SML on that, and if it does not, it's borken

[17:56] <fglock> autrijus: I think it needs to be @foo.push( \List.new(1,2,3)) - assuming List doesn't auto-dereference - because Array.push can't tell the difference between this and push(1,2,3)

[17:57] <autrijus> fglock: it probably could, as the List.new form probably won't respond to slurpy context

[17:58] <autrijus> on the other hand, as Juerd suggested, because a rvalue List's item number is fixed

[17:58] <autrijus> maybe calling it a Tuple makes more sense.

[18:00] <autrijus> (1,4..Inf,9); # might be a Tuple(Int, Range[Int], Int)

[18:02] <autrijus> (I'm fine with calling it a Tuple to represent the fixedness of items)

[18:02] <autrijus> and that would explain the lack of .push.

[18:04] <fglock> right - I'm ok with that. Do we still need List?

[18:05] <autrijus> if we call it Tuple then no, we don't need a separate List.

[18:06] <fglock> does it need to handle argument-list attributes (named, slurpy, etc) or is this a separate thing?

[18:06] <autrijus> I think ArgList and SigList both subclasses Tuple.

[18:07] <autrijus> and in that sense Tuple::Argument and Tuple::Signature may be better names. not sure

[18:07] <autrijus> but the idea is that those things are not part of vanilla tuple

[18:07] <fglock> ok

[18:13] <autrijus> stevan: so... I think P6P6 would actually work, as we can test the validity with an existing parser/codegen

[18:13] <stevan> autrijus: cool

[18:13] <autrijus> but it's past 2 and I need to sleep :)

[18:14] <stevan> ok, I am fairly busy with $work at the moment anyway,.. so I will keep thinking and toying around

[18:15] *** Lopo_ is now known as Lopo

[18:15] <autrijus> k, cool. I'll keep toying around with prim objspace designs too

[18:16] <autrijus> not quite sure when will I hit the "enough design up front" spot

[18:16] <stevan> excellent :)

[18:16] <autrijus> but iterative stuff without pressure-to-code actually fits my brain well

[18:16] <autrijus> <- slowly being brainwashed by cc2e

[18:17] <autrijus> g'nite! &

[18:17] <stevan> nite :)

[18:23] *** GeJ_ is now known as GeJ

[20:20] <gaal> I'm surprised to find ~~/smartmatch.t/op2Match has so much :todo!

[20:20] <gaal> There's a comment in the code saying

[20:21] <gaal> -- XXX - need to generalise this

[20:21] <gaal> does anybody know what kind of generalization is in order there? there's certainly a lot of code right now, and only about a 1/4th of the features are covered...

[20:24] <gaal> also, eek, I only now noticed some matches are reversible and some aren't.

[20:25] <gaal> should some of the ~~ code be implemented in Prelude.pm? eg. Hash    Hash      hash keys identical      match if $_.keys.sort »eq« $x.keys.sort

[20:43] <r0nny> coyo

[20:44] <r0nny> any sucesses in adding meta objects ?

[20:49] <gaal> heya nm

[20:50] <nothingmuch> hola

[20:56] <gaal> hmmmm I can't pattern match against class instances in haskell?

[20:57] <gaal> nothingmuch: maybe you have an idea. please look at src/Pugs/Prim/Match.hs:84

[20:57] <gaal> the general sig is of course op2Match :: Val -> Val -> Eval Val

[20:57] <gaal> but I want to write the case e.g. for %h1 ~~ %h2

[20:57] <integral> you can't pattern match against types.  You pattern match against constructors

[20:57] <gaal> I don't have a constructor here

[20:58] <nothingmuch> gaal: i don't have pugs repo

[20:58] <gaal> If there were no other cases, I'd do

[20:58] <nothingmuch> my HD got corrupt in the weekend

[20:58] <integral> Val has no constructors? o_O    it would seem stupid for Val to be uninhabited

[20:58] <nothingmuch> hadn't had a chance to restore yet

[20:58] <gaal> you poor, poor fellow :(

[20:58] <gaal> integral: VHash doesn't

[20:59] <gaal> So I'd've wanted op2Match (VHash x, VHash y) => x -> y -> Eval Val

[20:59] <gaal> but of course I can't do that

[20:59] <gaal> because there are a million other cases for this function

[20:59] * nothingmuch is living w/o ghc/darcs/pugs/fun

[20:59] <nothingmuch> not that i've been working on pugs lately

[20:59] <integral> gaal: I have no idea what you think you're meaning,  but the VHash type is declared by "type VHash = Map VStr Val" in Ast.Internals

[21:00] <integral> umm, sorry, the type is Val, not VHash

[21:01] <integral> and Vals have a VRef constructor

[21:02] <gaal> so VRef for hashes and look from there? Iffy; the comment there says that's resolvable only at runtime?

[21:02] <integral> umm, yeah.  perl's dynamic so you don't know you've actually got a hash until runtime

[21:03] <gaal> but %h is not a referece.

[21:03] <integral> umm, perl6 automatically makes references of containers in item context I thought?

[21:04] <gaal> of course I can't tell the type of $x at compile time here: $x = rand > .5 ?? %h !! @a 

[21:04] <gaal> but I want %h ~~ %h2 to be able to do the right thing at compile time

[21:05] <integral> %h ~~ %h2; is different from: do { my $a = %h2; %h ~~ $a } ?

[21:05] <integral> of course, your op2Match isn't even called at compile time...

[21:06] <Juerd> autrijus: (1,2).push(3) should just work, IMHO

[21:06] <Juerd> autrijus: But I think any (,).normalmethod should warn.

[21:07] <gaal> integral: point. Then I don't understand why S04/"Smart matching" mentions compile-time at all.

[21:07] <Juerd> autrijus: Or die even, perhaps

[21:10] <Juerd> TBH, more and more I think commas in scalar context should just be forbidden.

[21:10] <Juerd> There are many features we could hang onto this syntax, and none of them is obvious or always non-surprising.

[21:10] <Juerd> I love the array-of-aliases, but this is might just be a little too subtle.

[21:11] <r0nny> i got a weird idea - how about supporting .net libs in perl6

[21:11] <Juerd> For that matter, I think a simple "alias" keyword would work better, returning in list context a list of aliases, in item context an array of aliases.

[21:11] <Juerd> r0nny: Not weird, not new, not controversial. Does this disappoint you? :)

[21:12] <r0nny> hmm

[21:12] <r0nny> yeah - i need to feed my brain, so i get weird, new and controversial ideas again

[21:12] <Juerd> Sorry ;)

[21:13] <r0nny> ;P

[21:14] <r0nny> hmm - just need to find a way to make .net more perl6-ish

[21:15] <r0nny> *afk*

[22:10] *** _SamB_ is now known as SamB

[22:33] *** lampus_ is now known as lampus

[22:48] *** knewt__ is now known as knewt

[23:05] <kgftr|konobi> damn... http://haskell.org/hawiki/Frag is just scary

[23:13] <integral> I guess no one told the author of Frag that you can't write games in functional languages ... :-P

[23:19] <wilx> Hey! Abuse uses Lisp for scripting the whole game. So it is not the first game that uses functional language.

[23:20] <SamB> wilx: well, that LISP is messed up

[23:20] <SamB> I tried to load it in CL and it couldn't handle the comments!

[23:20] <wilx> Heh.

[23:22] <SamB> (of course, it would have needed plenty of things defined, but I was not about to rip the reader apart and put it together again just to try and port Abuse to use a real LISP

[23:23] <Shillo> SamB: What do they use for comments?

[23:24] <SamB> Shillo: well, it evidently supports one or both of C and C++ style comments

[23:25] <Shillo> SamB: *Shriek!*

[23:26] <Shillo> SamB: C++ style is at least easy. Search/replace // with ;

[23:29] <ajs_> I've always thought that comments should be required to start in column zero, begin with "#;//*" and end with "*//;#"

[23:39] <Shillo> ajs_: Nah. They should start at column 0, and begin with '     C ' (remove quotes)

[23:40] <Shillo> Later, folks. :)

