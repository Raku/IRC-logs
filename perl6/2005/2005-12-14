[00:02] <clkao> seen ibleach

[00:02] <jabbot> clkao: I havn't seen ibleach, clkao

[00:03] <rafl> clkao: Do you mean iblech?

[00:03] <clkao> ya

[00:03] <rafl> clkao: aka Ingo Blechschmidt.

[00:03] <rafl> clkao: He's not that active on IRC but he answers mails in <24h normally.

[00:03] <clkao> ok, thansk

[00:04] <clkao> trying to find out how jsbackend returns a perl6 object

[00:05] <rafl> iblech is the right person to ask that, indeed.

[00:12] <q[Skud]> what's perl6's equivalent for $#array?

[00:13] <Alias_> @array.something

[00:13] <q[Skud]> i got that far :)

[00:13] <Alias_> ah

[00:14] <q[Skud]> it's not length, that's string-only

[00:14] <integral> eval: my @a = (1, 2, 3); $#a;

[00:14] <integral> ?eval my @a = (1, 2, 3); $#a;

[00:14] <q[Skud]> and i can't find anything in S29

[00:14] *** evalbot_8225 is now known as evalbot_8233

[00:14] <evalbot_8233> Error:  unexpected "#" expecting "::" 

[00:14] <buu> ?eval @x=1..4; @x.length

[00:14] <evalbot_8233> Error: Undeclared variable: "@x" 

[00:14] <buu> ?eval my @x=1..4; @x.length

[00:14] <evalbot_8233> Error: No such method: "&length" 

[00:14] <buu> ?eval my @x=1..4; @x.keys

[00:14] <evalbot_8233> (0, 1, 2, 3) 

[00:14] <buu> heh

[00:14] <rafl> elems?

[00:14] <buu> ?eval my @x=1..4; @x.elems

[00:14] <evalbot_8233> 4 

[00:14] <rafl> yay!

[00:14] <buu> eval: 1

[00:15] <buu> hrm

[00:15] <buu> Yay!

[00:15] <integral> ?eval my @a = (1, 2, 3); @a.end

[00:15] <evalbot_8233> 2 

[00:15] <integral> (the trick is to grep ../src/Pugs/Prim.hs for elems, then go up one line...)

[00:16] <stevan_> ?eval my @a = (1, 2, 3); +@a;

[00:16] <evalbot_8233> 3 

[00:16] <q[Skud]> ok, elems it is.

[00:16] <integral> q[Skud]: umm, that's not the same as $#a, @a.end is the same as $#a.

[00:16] <q[Skud]> oh, right.

[00:16] <q[Skud]> sorry. i am not quite awake here

[00:19] <q[Skud]> huh.

[00:19] <q[Skud]> here's a slightly wacky thing.

[00:20] <q[Skud]> say "Sorted: ", @animals.sort;

[00:20] <q[Skud]> say "Reversed: ", @animals.reverse;

[00:20] <q[Skud]> Sorted: aardvark bat bear cow dog zebra

[00:20] <q[Skud]> Reversed: zebraaardvarkcowdogbatbear

[00:20] <integral> heh

[00:21] <q[Skud]> i presume that's not meant to happen.

[00:21] <integral> it's something todo with arrays vs. lists

[00:22] <integral> the sort seems to be working with an array, but the reverse with a list

[00:22] <q[Skud]> yeah.

[00:24] <integral> curiously, ~@a.sort and ~@a.reverse produce a spaced string each

[00:26] <q[Skud]> ok, you'll have to excuse me if i kind of blink and go "duhhhh..." like i'm a bit short on neural function here, because i only started playing with this yesterday.

[00:26] <integral> np :-)

[00:27] <q[Skud]> just kinda starting as a "dumb user" and working through perlintro trying to figure out what each thing there is, in perl 6 idiom.

[00:28] <q[Skud]> errrr. how do i declare a hash and access one of the elements?  like, in perl5, it would be $days{'February'}

[00:29] <q[Skud]> ah, got it

[00:29] <q[Skud]> i hadn't quoted the key

[00:31] <integral> yeah, {} doesn't autoquote now.  You need to use <> or <<>> to get that: %hash<<$interpolated>>, %hash<notinterpolated>

[00:31] <integral> (<> and <<>> are like the old qw)

[00:32] <q[Skud]> ok, but i can still say %days{'February'}

[00:34] <integral> yes.

[00:34] <integral> it's so that {} is always more like a closure

[00:37] * clkao implmemented slurp

[00:45] <buu> Is there an ioctl function in pugs?

[00:46] <buu> ?eval ioctl

[00:46] <evalbot_8233> Error: No such sub: "&ioctl" 

[00:46] <rafl> buu: No. Not yet.

[00:47] <integral> if it's in System.POSIX, it should be a trivial exercise to add :-)  I think there was a tutorial on the wiki at one point

[00:47] <buu> Bummer =[

[00:59] <clkao> runjs is printing 1..0 for some reason

[00:59] <clkao> that looks like skipall

[01:07] <svnbot6> r8234 | skud++ | Some new stuff I encountered.

[01:09] <svnbot6> r8235 | skud++ | Errr, lots of new stuff.  Intro embiggened.  Differences likewise.  Moved p5 stuff into a 

[01:09] <svnbot6> r8235 | skud++ | subdir.

[01:14] <clkao> http://nopaste.snit.ch:8001/5868

[01:14] * clkao grins

[01:14] <svnbot6> r8236 | clkao++ | Implement slurp() with Perl5/IO::File.

[01:36] *** blm_ is now known as blm_work

[01:57] <svnbot6> r8237 | clkao++ | * Add --run to runjs.pl, supporting js, jspm, jssm.

[01:57] <svnbot6> r8237 | clkao++ | * Add --perl5 to runjs.pl, which initialises perl5 related

[01:57] <svnbot6> r8237 | clkao++ |   functions for jspm.

[01:57] <svnbot6> r8237 | clkao++ | * Move stuff from jsperl to PIL2JS/JSPM.

[02:23] <tewk> Does pugs support here docs?  can someone point me to a synopsis or test example?

[02:43] <meppl> gute nacht

[02:45] <buu> Stupid perl5

[02:45] <buu> Scary fucking vodoo magic.

[02:45] <sili_> what

[02:46] <meppl> its technic

[02:46] <meppl> no voodoo

[02:46] <buu> Lies.

[02:46] <sili_> just wait until i finish this parrot lisp.

[02:46] <buu> meppl: I'm trying to make C use perl file handles.

[02:47] <meppl> hm

[02:47] <meppl> i would like xs for perl6

[02:47] <meppl> have

[02:48] <meppl> but im very patient

[02:50] <meppl> for c++

[02:51] <meppl> *sleeping*

[03:32] <Andy> obra: I can't /msg you becaue I'm not registered.  See AIM.

[05:28] <sri_> audreyt: please increment the version of Module::Install::Admin in the next release, Catalyst has a prereq on M::I

[05:29] <gaal> morning all...

[06:12] <blm> morning gaal

[06:14] <avar> pugs -e 'my Num @a = 0..Inf; say @a[100]' takes forever;/

[06:14] <blm> Does perl 6 use lazy evaluation like Haskell?

[06:15] <blm> Sorry is it supposed to do lazy evaluation?

[06:17] <avar> it is

[06:17] <avar> which is why it shouldn't take forever

[06:17] <avar> (last I read the specs)

[06:21] <sili__> there was talk about laziness and Inf on the lists recently

[06:21] <sili__> i'm not sure how/what was implemented in pugs

[06:44] <blm> Is audrey around?

[06:45] <Alias_> Goddam it... PPI still leaking despite %PARENT hash being cleaned up properly

[06:45] <blm> Hi Alias_

[06:45] <Alias_> heya

[06:45] <blm> Is Audrey en route?

[06:45] <Alias_> hmmm about 20 megabytes per 25,000 documents

[06:45] <Alias_> Probably

[06:46] <blm> Do you know Module::Install?

[06:46] <Alias_> yep

[06:47] <blm> Trying to install it from CPAN and it seems to depend on Module::Scandeps.  When I try to install Module::Scandeps it seems to find the old version of M::I and bombs out "Can't locate method "_top" via package "PACK001"

[06:48] <Alias_> hmm... dunno

[06:48] <blm> at Module::Insall::Base line 52

[06:48] <Alias_> The system one or the bundled one

[06:48] <blm> Might move old Module::Install out of way.

[06:50] <blm> Get this error! says /usr/local/lib/perl5/site_perl/5.8.7/Module/Install/Base.pm line 52 and there is no dir /usr/local/lib/perl5.

[06:50] <blm> I don't like cygwin :-(

[06:51] <Alias_> Personally I'm putting my bets on PXPerl being sane

[06:52] <blm> What is PXPerl? (excuse my ignorance :-) )

[06:52] <Alias_> An attempt to write a sane Windows Perl install

[06:52] <blm> Excellent!

[06:52] <Alias_> One that doesn't rely on a proprietary PPM package

[06:53] <blm> You on win32 much?

[06:53] <Alias_> Win32 desktop, Linux server

[06:53] <avar> how do I access <obj:Time::Local> in perl6? doing pugs -e 'say for localtime'

[06:53] <blm> Does par work?

[06:54] <avar> perl -le 'print for localtime' would work

[06:54] <Alias_> Reasonably well for bundling applications

[06:54] <blm> Includes dependancies?

[06:54] <Alias_> I think so... 

[06:54] <blm> Cool

[07:32] <svnbot6> r8238 | tewk++ | Simple perl6 test harness for pil.

[07:47] <avar> how can I see which rfc's got accepted?

[07:48] <avar> http://dev.perl.org/perl6/rfc/39.html <- I like this one for example, but I don't think it got accepted;/

[07:49] <nothingmuch> avar: every apocalypse

[07:49] <nothingmuch> they list the RFCs which got considered

[07:49] <nothingmuch> as rejected or accepted

[07:50] <nothingmuch> but most RFCs were munged

[07:50] <nothingmuch> IMHO 'say' is much more parsable than >foo<, too

[07:50] <nothingmuch> and that mixes up with hyper operators and stuff

[07:50] <avar> select STDERR;

[07:50] <nothingmuch> you can define it though:

[07:50] <avar> say >"goes to -err and -out"<;

[07:51] <avar> I just thought it was neat as an inverse of <>

[07:51] <nothingmuch> &circumfix:{'>', '<'} ::= say;

[07:52] <avar> does that work in pugs?

[07:57] <nothingmuch> let's try

[07:57] <nothingmuch> ?eval &circumfix:{'>', '<'} ::= &say; >

[07:57] <nothingmuch> ?eval &circumfix:{'>', '<'} ::= &say; >"foo"<;

[07:57] <nothingmuch> ?eval "foo"

[07:57] <nothingmuch> hmm... i think it's dead

[07:57] *** evalbot_8233 is now known as evalbot_8238

[07:57] <evalbot_8238> Error:  unexpected ">" expecting ";", statements or end of input 

[07:57] <evalbot_8238> Error:  unexpected ">" expecting ";", statements or end of input 

[07:57] * nothingmuch is not really in touch with pugs lately

[07:57] <evalbot_8238> "foo" 

[07:57] <nothingmuch> been having a "useful" phase (as opposed to an "interesting" phase) - lots of Catalyst work

[07:58] <avar> nothingmuch: I tried, it was more of a "should it work or did I fuck anything up?" question;)

[07:59] <nothingmuch> avar: i guess the grammar isn't dynamic yet

[07:59] <nothingmuch> but it will work

[07:59] <nothingmuch> we have an internals lecture at work

[07:59] <nothingmuch> see you

[07:59] <avar> cya

[08:12] <Skud> evening pjf

[08:12] <PJF> Good evening Skud!  How are you this fine day?

[08:13] <svnbot6> r8239 | yiyihu++ | Renew the broken links in series of `01Overview.html`.

[08:26] <PJF> Good day, blm.

[09:37] <PJF> Skud:  Wow!  Lots more documentation.

[09:38] <Alias_> PPI 1.07 is uploaded!

[09:38] <Alias_> Now it can parse line noise!

[09:38] <wolverian> yay :) Alias++

[09:39] <Alias_> I leaks a bit still...

[09:39] <Alias_> 1k per document I think

[09:39] <Alias_> But I can certainly confirm it isn't me leaking circulars now

[09:39] <Alias_> So it's now someone else's problem

[09:41] <PJF> Congrats, Alias.

[09:41] <Alias_> At least it's editor-compatible now

[10:05] <Alias_> Which takes a surprisingly large load off my mind 

[10:07] <wolverian> editor-compatible?

[10:07] <Alias_> As in you can type any old shit and it won't crash the parser

[10:07] <wolverian> oh, okay. I think I see.

[10:07] <wolverian> right. :)

[10:07] <Alias_> Which is a big step

[10:07] <wolverian> so, where's the vim plugin?

[10:08] <Alias_> My queue now is basically, 1. Wait for PXPerl to release 2. Get PCE actually running 3. Write Perl::Editor 4. Then you can write a vim plugin

[10:08] <Alias_> The parser in it's standalone is surprisingly useless :)

[10:08] <wolverian> PCE?

[10:08] <Alias_> Editors need the next layer of support infrastructure too, caching and metrics and transforms, oh my!

[10:09] <Alias_> The cross platform pure Perl Wx+Scintilla Perl editor

[10:09] <Alias_> Which has some pretty big issues, but I'm helping the author to work through them, then I'm going to use it as my base platform for the refactoring Perl editor grant

[10:09] <Alias_> Anyways

[10:09] * Alias_ home

[10:10] <Alias_> (It also means you can now parse Perl 5 into pugs btw)

[10:10] <Alias_> audreyt: You want 1.107. It's over to you now.

[10:11] <wolverian> right. this is exciting :) Alias++

[10:38] <rafl> Is there a freenode server that listens to a port != 6667? My ISP seems to block that port..

[10:46] <avar> does perl6 have some quick way to create accessors like ruby?

[10:48] <wolverian> has $.foo;

[10:48] <wolverian> see S12

[10:57] <kane_> rafl: cgi:irc installations would work.. like this one: http://webchat.xs4all.nl/cgi-bin/ircnet/irc.cgi

[10:58] <integral> feather already runs a CGI:IRC :)

[10:58] <rafl> kane_: I actually don't want to use CGI:IRC but irssi and not on feather but on my host :-)

[10:58] <integral> rafl: most freenode boxes listen on a few ports around 6667, something like 6665-9 I think

[10:59] <rafl> integral: OK, I'll try that.

[10:59] <kane_> rafl: yeah, this was more 'last resort'

[10:59] <kane_> you could tunnel it via feather too btw

[11:00] <rafl> kane_: That's what came to my mind as well. But I'll try using IPv6 first.

[11:00] <kane_> bbl, off to the office

[11:00] <integral> 6to4++

[11:02] <rafl> integral: Do you know a good tunnel provider? sixx maybe?

[11:03] <integral> I don't.   I have decent 6to4 access so I just use that

[11:12] <avar> how do I call my own method within a class, self.mehod() doesn't work (as seen in S12)

[11:13] <wolverian> self.method or just .method if $_ =:= self (as is the default in methods)

[11:14] <wolverian> ?eval class Foo { method bar { "hi" } method baz { .bar } } Foo.new.baz

[11:14] *** evalbot_8238 is now known as evalbot_8239

[11:14] <evalbot_8239> "hi" 

[11:15] <PJF> ?eval class Foo { method bar {"hi"} method baz { self.bar } } Foo.new.baz

[11:15] <evalbot_8239> "hi" 

[11:15] <PJF> ?eval class Foo { method bar {"hi"} method baz { self.bar() } } Foo.new.baz

[11:15] <evalbot_8239> "hi" 

[11:16] <PJF> Good.  You had me worried for a moment there, avar. ;)

[11:17] <svnbot6> r8240 | asavige++ | Evil documentation plan (first cut based on Audrey caffeine free coke brain-dump)

[11:18] <avar> ?eval role P {method lang { "poo" }} class AE does P {method hello() { self.lang }} AE.new.hello

[11:18] <evalbot_8239> Error: No compatible subrountine found: "&lang" 

[11:18] <avar> ?eval class P {method lang { "poo" }} class AE is P {method hello() { self.lang }} AE.new.hello

[11:18] <evalbot_8239> Error: No compatible subrountine found: "&lang" 

[11:19] <avar> ?eval class AE is P {method lang() { "poo"} method hello() { self.lang }} AE.new.hello

[11:19] <evalbot_8239> Can't exec "./pugs": Permission denied at examples/network/evalbot//evalhelper.p5 line 46. 

[11:19] <avar> ?eval class AE is P {method lang() { "poo"} method hello() { self.lang }} AE.new.helloo

[11:19] <evalbot_8239> Can't exec "./pugs": Permission denied at examples/network/evalbot//evalhelper.p5 line 46. 

[11:19] <PJF> Oh my god!  You killed evalbot!

[11:19] <avar> ?eval class AE is P {method lang() { "poo"} method hello() { self.lang }} say AE.new.lang

[11:19] *** evalbot_8239 is now known as evalbot_8240

[11:19] <evalbot_8240> OUTPUT[poo ] bool::true 

[11:21] <pasteling> "avar" at 212.30.222.56 pasted "woo" (26 lines, 550B) at http://sial.org/pbot/14952

[11:21] <avar> *** No compatible subroutine found: "&self""

[11:31] <rafl> avar: my $langs = self.langs; looks wrong.

[11:32] <rafl> Huh.. no. It doesn't.

[11:47] <PJF> Good evening Andrew.

[11:48] <asavige> hi PJF Audrey left Sydney at 1:00 pm on China Airlines flight C152

[11:48] <asavige> should have just arrived in taipei about now

[11:48] <PJF> I have no doubt we'll see her active on IRC again shortly then. ;)

[11:49] <asavige> wow, skud has hit this channel like a ... skud missile ;-)

[11:49] <integral> and written lots of documentation!

[11:49] <asavige> she is putting me to shame (though I just uploaded Audrey's brain-dump evil plan)

[12:00] <PJF> Night all.  I seem to have landed myself with real work for the next couple of weeks, and have to sleep at awkward times as a result.  Happy hacking.

[12:09] <Odin-LAP> avar: Hmm. Ertu að elta mig? :p

[12:10] <avar> maður mætti spurja þig af því sama!

[12:10] <Odin-LAP> avar: Ég kom á undan. ;)

[12:11] <avar> viss? Ég hef ekki verið hérna í einhvern tíma

[12:11] <avar> ég mun hinsvegar aldrei elta þig á #emacs ;)

[12:11] <Odin-LAP> Haha.

[12:11] <Odin-LAP> Viss?

[12:12] <avar> haha

[12:12] <avar> já

[12:16] <avar> haha

[12:17] <avar> $ pugs -CParrot -e 'say "foo"'|wc -l

[12:17] <avar> 355

[12:17] <avar> 3558

[12:43] <meppl> guten morgen

[12:43] <GeJ> servus

[12:46] <clkao> nothingmuch: did you mention there's a tapmatrix diff util or something like tha?

[13:03] <meppl> good morning gej

[13:57] <nothingmuch> clkao: ?

[13:57] <nothingmuch> oh

[13:57] <nothingmuch> yes

[13:57] <nothingmuch> i have that

[13:57] <nothingmuch> i'll talk to you about it when I get home

[13:57] <nothingmuch> http://nothingmuch.woobling.org/Test-TAP-HTMLMatrix

[13:57] <nothingmuch> http://nothingmuch.woobling.org/Test-TAP-Model

[13:57] <nothingmuch> get those darcs repos

[13:57] <nothingmuch> they have working code

[13:58] <nothingmuch> (example.pl has dummy failures)

[13:59] <nothingmuch> i have to go pick up my mom from the univ

[13:59] <nothingmuch> ciao!

[14:03] <xinming> how to get a line from stdin, and process it, and get another line?

[14:17] * pd clocks pugs at less than 2000x slower than perl5, woo hoo!

[15:20] <avar> 1 for =<>; ?

[15:30] <gaal> process(=$*IN); $next = =$*IN;

[15:30] <gaal> process($^line) for =$*IN;

[15:31] <xinming> try it in pugs first please

[15:32] <gaal> ./pugs -e 'print ">>> $_" for =$*IN'

[15:32] <gaal> this works

[15:32] <gaal> but you may be Suffering from Buffering <tm>.

[15:33] <xinming> for =$*IN -> $line { print "myline: " ~ $line;}

[15:33] <Khisanth> that works

[15:33] <Khisanth> too :P

[15:34] <xinming> the problem is, It will hold all input in a "temperary" list, and after you enter EOF, it then process the list

[15:34] <Khisanth> eh?

[15:34] <xinming> Khisanth: You can save it in a file, and run it

[15:34] <Khisanth> well I guess laziness isn't implemented yet?

[15:34] <gaal> yes, IO buffering.

[15:35] <xinming> gaal: How to get rid out of this?

[15:35] <gaal> eval '$| = 1', :lang<perl5>

[15:35] <gaal> just kidding :-)

[15:36] <gaal> good question. I wonder if getContents or whatsits name can be configured to work in line buffered mode; I but it can, but there's a chance that requires POSIX :-(

[15:36] <Khisanth> mumbled $*OUT is autoflushed; ? :P

[15:37] <gaal> uh, the immediate answer for you though is, sorry I don't know.

[15:37] <pd> on perl5: "Perl does not support truly unbuffered output (except insofar as you can syswrite(OUT, $char, 1))." Heh.

[15:39] <gaal> pd, in this case linebuffered mode would be sufficient.

[15:39] <xinming> So, It's the problem of haskell. :-)

[15:39] <fglock> xinming: it's not a problem with buffering - this works: for 1..10 { print "myline: " ~ =$*IN } 

[15:40] <gaal> fglock: what is the problem then?

[15:40] <gaal> xinming: it's not Haskell's fault, probably, if that what's you mean.

[15:40] <fglock> I think it is a problem with laziness not being implemented yet - it is trying to construct the full =IN list before using it

[15:41] <gaal> ah, wonderful: http://haskell.org/ghc/docs/latest/html/libraries/base/System-IO.html#12

[15:41] <gaal> there are buffering operators including linemode in non-posix haskell io.

[15:41] <gaal> Oh. :-/

[15:42] <gaal> that is unfortunate. :(

[15:42] <avar> ?eval say​"boo"​if​1

[15:42] <evalbot_8240> OUTPUT[boo ] bool::true 

[15:42] <avar> harhar

[15:43] <gaal> if anyone wants to add simple buffering, btw, it's a nice and easy addition.

[15:43] <avar> ?eval say"boo"if1

[15:43] <evalbot_8240> Error:  unexpected "1" or "i" expecting term postfix, operator, ":", ",", postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[15:43] <avar> >;)

[15:43] <xinming> fglock: for your example, you have to write exit the for loop yourself

[15:45] <fglock> xinming: yes. I'll try with -Bperl5

[15:46] <avar> ?eval say​​1

[15:46] <evalbot_8240> OUTPUT[1 ] bool::true 

[15:46] <avar> ?eval say​1

[15:46] <evalbot_8240> OUTPUT[1 ] bool::true 

[15:46] <avar> ?eval say1

[15:46] <evalbot_8240> Error: No such sub: "&say1" 

[15:47] <gaal> parsefail if rand > .5; # wtf

[15:47] <pd> heh.

[15:47] <avar> doesn't that bot take ?eval in query?

[15:48] <gaal> hmm?

[15:48] <Khisanth> don't think so

[15:48] <gaal> fwiw I have an old r6995 lying about that doesn't exhibit this interesting behavior.

[15:48] <xinming> why the first `?eval say1` doesn't fail?

[15:48] <Khisanth> probably to avoid having people abuse it for various purposes

[15:49] <avar> xinming: because it's magical;)

[15:49] <gaal> avar: are you asking if eval works? yes, for p6 eval. not for other :langs.

[15:49] <gaal> ?eval say eval "hola"

[15:49] <evalbot_8240> OUTPUT[ ] bool::true 

[15:49] <gaal> ahem.

[15:50] <gaal> ?eval eval "hola"

[15:50] <evalbot_8240> undef 

[15:50] <gaal> er, yes i should learn perl.

[15:50] <Khisanth> heh

[15:50] <gaal> ?eval say eval "'hola'"

[15:50] <avar> is there anything in place to secure that bot?

[15:50] <evalbot_8240> OUTPUT[hola ] bool::true 

[15:50] <avar> ?eval "foo"

[15:50] <evalbot_8240> "foo" 

[15:50] <gaal> avar: yes, look into safe mode.

[15:51] <gaal> there are both pugs-specific and OS measures.

[15:51] <gaal> some prims are marked as "unsafe" so you can't do them from the bot:

[15:51] <gaal> ?eval open "/etc/passwd"

[15:51] <evalbot_8240> Error: No such sub: "&Pugs::Internals::openFile" 

[15:51] <xinming> ?eval $*IN

[15:51] <avar> ?eval fork while fork

[15:51] <evalbot_8240> \undef 

[15:51] <evalbot_8240> Error: No such sub: "&fork" 

[15:52] <gaal> and the thing that dispatches pugs in the bot uses a limit on CPU and time:

[15:52] <xinming> ?eval my $a = =$*IN

[15:52] <evalbot_8240> Error: Can't use readline() or getc() in safemode. 

[15:52] <gaal> ?eval 1 while 1

[15:52] <evalbot_8240> (no output)

[15:52] <gaal> also, there are limits on output size and RAM.

[15:52] <xinming> ?eval sub x { y }; sub y { x }; y

[15:52] <evalbot_8240> pugs: out of memory (requested 1048576 bytes) 

[15:52] <xinming> gaal: I think so

[15:53] <gaal> to which please join me in saying, iblech++ :-)

[15:53] <xinming> ?eval system "free"

[15:53] <evalbot_8240> Error: No such method: "&system" 

[15:54] <gaal> please see examples/network/evalbot/README.pod

[15:54] <xinming> ?eval say1

[15:54] <evalbot_8240> Error: No such sub: "&say1" 

[15:54] <avar> ?eval $x = 1; $x *= 2 while 0..Inf

[15:54] <evalbot_8240> Error: Undeclared variable: "$x" 

[15:54] <gaal> say "my".

[15:54] <avar> ?eval my $x = 1; $x *= 2 while 0..Inf

[15:54] <evalbot_8240> pugs: out of memory (requested 1048576 bytes) 

[15:54] * xinming wonders why avar's example works

[15:54] <gaal> xinming: he said "my".

[15:55] <avar> ?eval my $x = 1; $x *= 2 while 1

[15:55] <evalbot_8240> (no output)

[15:55] <xinming> avar ?eval say​​1

[15:55] <xinming> evalbot_8240 OUTPUT[1 ] bool::true

[15:55] <xinming> is there a "my" ? :-/

[15:55] <pd> ?eval say "what";

[15:55] <evalbot_8240> OUTPUT[what ] bool::true 

[15:56] <xinming> ?eval say"what"

[15:56] <evalbot_8240> OUTPUT[what ] bool::true 

[15:56] <xinming> ?eval say1

[15:56] <evalbot_8240> Error: No such sub: "&say1" 

[15:56] <avar> xinming: see, magic;)

[15:56] <pd> ?eval say 1;

[15:56] <avar> actually, it's not magic

[15:56] <evalbot_8240> OUTPUT[1 ] bool::true 

[15:56] <avar> you can use any unicode whitespace in perl6 to delimit tokens, including zero-width unicode whitespace

[15:56] <gaal> pfff

[15:57] <avar> (this should result in lots of clever code)

[15:57] <avar> "clever"

[15:57] <gaal> remind me to hack that out of the parser :-)

[15:57] <pd> ?eval sub say1 { say "what"; }; say1;

[15:57] <evalbot_8240> OUTPUT[what ] bool::true 

[15:57] <Khisanth> but it won't lower your golf score!

[15:57] <avar> Khisanth: maybe,

[15:57] <avar> Khisanth: not if you count it by bytes

[15:57] <avar> but if you count by characters...

[15:57] <avar> it'll be the same

[15:58] <avar> but less understandable

[15:58] <gaal> the possibilities for ACME::Bleach are interesting.

[15:58] <pd> Remind me to store data in UNICODE characters then.

[15:58] <gaal> *Anything* becomes a one-liner.

[15:58] <Khisanth> Acme::Onliner?

[15:59] <gaal> At least, I propose Acme::Bleach::Unary

[15:59] <gaal> which encodes your program in zero-width chars

[15:59] <gaal> the number of chars is a unary representation of the data

[15:59] <fglock> xinming: '=$*IN' is not implemented in -Bperl5 yet, so I can't test it

[15:59] <gaal> so the module needs not use pesky tabs, spaces, and newlines

[16:00] <gaal> and create programs that truly fit on one line!

[16:01] <gaal> I'm racing against myself here, see, because I fully intend to disallow this. I just don't know what I'll get to first.

[16:01] <xinming> the console need to be utf-8 compatible. :-)

[16:02] <gaal> brb

[16:02] <avar> gaal: acc. to the synopsis it's there on purpose

[16:17] <avar> ?eval 1<2

[16:17] <evalbot_8240> bool::true 

[16:17] <avar> ?eval 1>2

[16:17] <evalbot_8240> bool::false 

[16:18] <avar> ?eval my $x = "foo"; my $y := $x; $y = "bar; $x

[16:19] <evalbot_8240> Error:  unexpected "b" expecting block, "\\", "$/", "$", "$!", "\"", word character, "::", ".", ":", "=", subroutine name, array subscript, hash subscript or code subscript 

[16:19] <avar> ?eval my $x = "foo"; my $y := $x; $y = "bar"; $x

[16:19] <evalbot_8240> \"bar" 

[16:19] <avar> ?eval my $x = "foo"; my $y ::= $x; $y = "bar"; $x

[16:19] <evalbot_8240> \"bar" 

[16:19] <avar> ?eval my $x = "foo"; my $y ::= $x; $y = "bar"; \$x

[16:19] <evalbot_8240> \"bar" 

[16:19] <avar> ?eval my $x = "foo"; my $y ::= $x; $y = "bar"; $x =:= $y

[16:19] <evalbot_8240> bool::true 

[16:20] <avar> ?eval my $x = "foo"; my $y ::= $x; $y = "bar"; my $z = "bar"; $x =:= $z

[16:20] <evalbot_8240> bool::true 

[16:23] <avar> I have ¥ on my ibook keyboard somewhere, I just can't find where..

[16:30] <gaal> avar: Y works wherever ¥ does

[16:30] <svnbot6> r8241 | kane++ |  r484@coke:  kane | 2005-12-14 13:28:31 +0100

[16:30] <svnbot6> r8241 | kane++ |  * eliminate the use of one global $Obj for the config

[16:30] <svnbot6> r8241 | kane++ |  * it's still a singleton though

[16:30] <svnbot6> r8242 | kane++ |  r485@coke:  kane | 2005-12-14 17:29:25 +0100

[16:30] <svnbot6> r8242 | kane++ |  * make the installation variables in config.pm private

[16:30] <svnbot6> r8242 | kane++ |      * they are wrapped from Installation.pm

[16:30] <svnbot6> r8242 | kane++ |  * add ls_all_accessors that returns private accessors as well in config.pm

[16:30] <svnbot6> r8242 | kane++ |  * try and use path::class everywhere 

[16:31] <svnbot6> r8242 | kane++ |      * every dir/file returned by config.pm is a p::c object

[16:31] <svnbot6> r8242 | kane++ |  * rewrite all code to use the new installation wrappers rather than 

[16:31] <svnbot6> r8242 | kane++ |      the old config.pm accessors

[16:39] <rafl> kane++; #using Path::Class everywhere.

[17:20] <fglock> re minilang.subset(p6) - http://codespeak.net/pypy/extradoc/talk/oscon2003-paper.html - about the pypy project

[18:02] <avar> ?eval "x" x 3

[18:02] *** evalbot_8240 is now known as evalbot_8242

[18:02] <evalbot_8242> "xxx" 

[18:02] <avar> ?eval "x" xx 3

[18:02] <evalbot_8242> ("x", "x", "x") 

[18:02] <avar> ?eval "x" xx 3 ~ "x"

[18:02] <evalbot_8242> "x x xx" 

[18:03] <avar> ?eval ("x" xx 3) ~ "x"

[18:03] <evalbot_8242> "x x xx" 

[18:03] <avar> ?eval scalar "x" xx 3

[18:03] <evalbot_8242> Error: No such method: "&scalar" 

[18:03] <avar> ?eval scalar ("x" xx 3)

[18:03] <evalbot_8242> Error: No such method: "&scalar" 

[18:03] <avar> oh my

[18:10] <avar> ?eval scalar str("x" xx 3)

[18:10] <evalbot_8242> Error: No such method: "&scalar" 

[18:10] <avar> ?eval str("x" xx 3)

[18:10] <evalbot_8242> Error: No such method: "&str" 

[18:10] <avar> ?eval (str)("x" xx 3)

[18:10] <evalbot_8242> Error: No such sub: "&str" 

[18:27] <xinming> avar: In perl 6, I think scalar context is splited into Number context and String context

[18:28] <gaal> ?eval ~("x" xx 3)

[18:28] <evalbot_8242> "x x x" 

[18:28] <gaal> ?eval +("x" xx 3)

[18:28] <evalbot_8242> 3 

[18:28] <gaal> rehi btw

[18:28] <xinming> so, you can use ~ to force it into string context, and use + to force it into numberic context

[18:28] <gaal> ?eval ?("x" xx 3)

[18:28] <evalbot_8242> bool::true 

[18:28] <gaal> and boolean context :)

[18:28] <xinming> by the way, anyone here knows about m4?

[18:29] <xinming> how to supress the #!/usr/bin/m4 line if chmod a .m4 file into executable

[18:31] <integral> under linux you might be able to fiddle with binfmt_misc I suppose

[18:31] <integral> but a shebang line is standard to invoke a script

[18:31] * integral misses the point, oops

[18:32] <avar> xinming; gaal: thx;)

[18:32] <avar> I mostly know perl5, just typing stuff into pugs & evalbot while reading dev.perl.org

[18:32] <xinming> integral: yes, But the problem is, for m4, it will print the shebang line

[18:33] <integral> to be honest I didn't even know you could access @ARGV in m4 :)

[18:34] <xinming> #!/usr/bin/m4

[18:34] <xinming> foo here

[18:34] <xinming> xinming@Laptop:~/tmp$ cat asdf.m4

[18:34] <xinming> #!/usr/bin/m4

[18:34] <xinming> define(`foo', ``foo' here')

[18:34] <xinming> foo

[18:34] <xinming> I'd think using m4 as a cgi script would be fun. :-P

[18:55] <avar> ?eval reverse <a b c>

[18:55] <evalbot_8242> "c b a" 

[18:55] <avar> ?eval reverse ~(<a b c>)

[18:55] <evalbot_8242> "c b a" 

[18:56] <avar> ?eval reverse "abc"

[18:56] <evalbot_8242> "cba" 

[19:06] <gaal> avar: at this point please run your own pugs locally :-)

[19:21] <j0sephi> http://picasa.hu/1134587387-al.kaida.xmas.jpg ahaha idiots :):):) :)

[19:42] <gaal> oh, someone kick j0sephi already

[19:45] <svnbot6> r8243 | gaal++ | * docs/p6doc/ - a few small fixes to skud++'s notes

[19:50] <stevan__> fglock: the Object Space is very much inspired by PyPy (hell we even took their name :)

[19:52] <tewk> stevan__: I've got a very simple test harness, I'll paste a diff and get your comments

[19:56] <stevan__> tewk: did you commit it?

[19:56] <tewk> I'm about too.  An old version is in t/pil/simple.t   ./pugs t/pil/simple.t

[19:56] <tewk> I'

[19:57] <tewk> I've factored out the code to ext/Test/lib/TestPil.pm, but I don't know what to do with the build process.

[19:57] <tewk> I've been copying ext/Test/lib/TestPil.pm to blib6/lib manually.

[19:58] <tewk> I've also got a t/pil/bit.t ready to go.

[19:58] <stevan__> is it in p6? or p5?

[19:58] <stevan__> tewk: cool!

[19:58] *** stevan__ is now known as stevan

[19:59] <tewk> p6, but I can make it p5. The p6 stuff took me a while to come up to speed on, so I kept it simple to start.

[19:59] <stevan> tewk: simple is good, and p6 is good too

[19:59] <stevan> self-hosting++

[19:59] <tewk> so is t/pil a good place for tests, and do you have any guidance about the build process and what I need to do there?

[20:00] <tewk> If not I'll check in and ask for build process help.

[20:00] <stevan> t/pil is good yes

[20:00] <stevan> I think maybe it should be Test::Pil though, not TestPil

[20:00] <stevan> but thats a detail

[20:00] <stevan> we can easily change if we want too

[20:01] <tewk> Test::Pil I agree, I'm just getting comfortable with the pugs tree there are so many exts, blibs, libs, I'm a little lost.

[20:01] <tewk> Here it comes

[20:02] <stevan> tewk: ext is where this should go,.. and when people run the Makefile.PL it should get copied to the blib dir 

[20:02] <tewk> That what I though, I just haven't got it to work how I expect yet.

[20:03] <stevan> you can also do ./pugs -I ext/Test/lib t/pil/bit.t

[20:04] <svnbot6> r8244 | tewk++ | pil test code factored out to it's own module.

[20:04] <svnbot6> r8244 | tewk++ | tests for NativeBit not, and, and or operations

[20:04] <gaal> or export PERL6LIB=blib6/lib

[20:05] <gaal> hey stevan

[20:05] <stevan> hey gaal 

[20:06] <tewk> I found this on hack.pod at pugscode.org and have been using it,  export HARNESS_PERL=./pugs export PERL6LIB=blib6/lib

[20:07] <tewk> Where is the HARNESS_PERL used?

[20:08] <stevan> tewk++ # very nice stuff

[20:08] <gaal> by prove

[20:08] <tewk> ahh

[20:08] <gaal> tewk: prove is a p5 tool, but it can use pugs to generate TAP data

[20:09] <gaal> did anyone write a TAP module for other languages alredy? Java, C# etc?

[20:09] <gaal> *already

[20:09] <gaal> should be just a few days work, and then they can benefit from the matrix etc.

[20:10] <tewk> ?paste

[20:10] <gaal> perlbot nopaste

[20:10] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[20:11] <gaal> why isn't perlbot clever enough to s/<channel>/$channel/? :-)

[20:11] <stevan> gaal: I think there are some other TAP modules out there, there is a JS one I know, and IIRC someone on perl-qa mentioned a C/C++ one

[20:11] <gaal> whoa, a c one could have helped me a while ago

[20:11] <tewk> thanks, I have an idea for test descriptions, but I'm have p6 woes :) I'll paste in a minute

[20:12] <gaal> sure

[20:12] <gaal> c is hardly a language where TDD is fun though :)

[20:13] * stevan wonders what about C is fun at all :P

[20:13] * gaal finds it hard to express

[20:13] <gaal> certainly not strings :)

[20:14] <gaal> but some of the time I find a great elegance in it.

[20:14] <gaal> some of the time it's plain ridiculous though :)

[20:15] <gaal> GLib has some beautiful c.

[20:15] <stevan> I haven't had the benefit of a CS education, so the low level stuff you need to fiddle with in C is just frustrating to me 

[20:15] <stevan> I much more prefer higher level abstractions :)

[20:16] <stevan> I do see some beauty in C though

[20:16] <stevan> I used to read a lot of books on hard-real-time systems, and the C code written for that stuff is (usually) really nice compact and elegant code

[20:17] <stevan> I guess I can appreciate it, but can't ever see writing it :)

[20:17] <gaal> funny, I don't have a CS education either, and abstractions are often difficult for me. at least the first couple of years :)

[20:17] * stevan was a painting major, abstract painting mostly :)

[20:18] <stevan> I "see" code in my head visually, and I never could "see" C very well

[20:18] * gaal has a rothke reproduction he likes in the living room

[20:18] * stevan does too :)

[20:19] <stevan> gaal: which one?

[20:19] <gaal> it's not titled. Red, from 1956.

[20:19] * stevan wonders if we have the same one :)

[20:20] <gaal> :)

[20:20] <gaal> heh, i mixed him up with the poet

[20:21] <gaal> http://www.prints4all.com/cgi-bin/commerce.cgi?preadd=action&key=IMA3918

[20:23] <stevan> nope.... different ones

[20:23] <stevan> mine has more browns in it

[20:23] <stevan> have you ever seen his work in person

[20:23] <stevan> amazing stuff

[20:23] <stevan> I have gotten yelled at by many a MoMA guards for standing too close :)

[20:24] <gaal> Distinctly I remember a very magical half-hour in the Tate :-)

[20:25] <gaal> Might have been less. Anyway... we're spamming the channel :-)

[20:26] * stevan prefers to think of it as educating the masses,.. but okay ;)

[20:30] <pasteling> "tewk" at 71.32.232.64 pasted "Ugly Test::Pil, syntatic errors, but it has my ideas for test descriptions" (44 lines, 1.4K) at http://sial.org/pbot/14958

[20:30] <tewk> Now to try to get it to work :)

[20:32] <stevan> tewk: what is the need for generating the description?

[20:32] <stevan> as opposed to writing it with the test itself?

[20:34] <tewk> I have the benefit of a CS education, which has taught me to write dozens of lines to code to avoid typing a description for each test :)

[20:35] <stevan> LOL

[20:35] <tewk> I'm just trying to get up to speed on Perl6 and I'm laxy.

[20:35] <stevan> tewk: I am not sure we have lexical subs yet

[20:36] <tewk> Ah

[20:36] <stevan> although it should work anyway

[20:36] <stevan> just not define it lexically

[20:37] <tewk> Well that was what I was trying to do, I'll keep playing with it.  Maybe I should get back to writing test for PIL. :)

[20:37] * gaal giggles <for at by> tewk's benefit

[20:37] <tewk> I think I will just add an optional description arg and call it good. On to tests.  By the way how do you make an arg optional in Perl6?

[20:38] <gaal> sub X ($arg?)

[20:38] <gaal> sub X ($arg? = "default val")

[20:38] <tewk> thanx

[20:39] <tewk> gaal: your much faster then greping through docs and synopsis :)

[20:39] <gaal> #perl6 is a kind of an optimized grep

[20:39] <stevan> gaal is a storehouse of p6 knowledge... aka.. its an in-memory search :)

[20:40] <gaal> you give me waaay too much credit folks :)

[20:40] <gaal> Juerd & luqui are our resident perldocs

[20:40] <gaal> and I will NOT get into a drawing contest with audrey :)

[20:42] <tewk> stevan: Being CS educated, I'm very interested in the native mini-language and bootstrapping the ObjectModel.  I've got to run, but what are he next small tasks that need done.

[20:43] <stevan> tewk: mostly it is implementing the object meta-model using the mini-language,.. 

[20:43] <stevan> this is all based on the work in perl5/Perl6-ObjectSpace

[20:44] <tewk> I'll continue improveing TestPil.  Can I just move it to ext/Test/lib/Test/Pil.pm and change TestPil to Test::Pil ?

[20:44] <stevan> sure

[20:44] <stevan> I will probably add some tests later tonight myself

[20:44] <gaal> tewk: svn mv, in case you don't know it

[20:46] <tewk> thanks gaal: My perl5/6/haskell is pretty pretty pathetic :) but I know svn, C, etc

[20:49] <gaal> cool :) no offence I hope... impossible to tell what people know and don't know these days :)

[20:50] <tewk> No I appreciate the help, if fact I learn fast and I like suggestions, especially in reguards to my perl.

[20:51] <gaal> learning haskell is hard (for me) but extremely enjoyable when things click

[20:53] <tewk> I've played with python, ruby, scheme, haskell, etc.  So I get a lot of the concepts.  I just don't know perlism syntax very well, so I revert to evil C style syntax in perl, which usually gets the job done.  I want to learn though.

[20:54] <gaal> oh, in that case you're in luck cause learning perl is loads of fun :-)

[20:56] <sili__> tewk: just avoid c-style for loops and you'll be ok

[20:56] <sili__> cause those are the worstestest.

[20:58] * xinming thinks learning haskell is the biggest pain he ever encountered.

[20:58] <xinming> especially the moand, takes me 3 days to understand what the monads is.

[20:58] <svnbot6> r8245 | tewk++ | TestPil becomes Test::Pil

[20:59] <gaal> xinming: you are in great shape :-) It's taking me nine *months* and counting

[20:59] <xinming> frustrating me

[21:00] <xinming> gaal: I just understand what it is, But the problem is, I can't write without the the example. :-/

[21:11] *** stevan_ is now known as stevan

[21:54] <svnbot6> r8246 | stevan++ | ::Class.get_method_list should have no parameters ;)

[22:33] <gaal> where are the shiftTs that relate to the resetT in opEval (Pugs.Prim.Eval)?

[22:49] <gaal> why is position information omitted in failed evals? because $! isn't fully specced?

[22:49] <gaal> ?eval eval "asdfadf"; $!

[22:49] *** evalbot_8242 is now known as evalbot_8246

[22:49] <evalbot_8246> \undef 

[22:49] <gaal> ?eval eval "asdfadf"; say $!

[22:49] <evalbot_8246> OUTPUT[No such sub: "&asdfadf" ] bool::true 

[22:49] <gaal> contrast:

[22:50] <gaal> ?eval asdf

[22:50] <evalbot_8246> Error: No such sub: "&asdf" 

[22:50] <gaal> heh.

[22:50] <gaal> well on non-evalbot, that also prints coordinates.

[22:50] <gaal> but retEvalResult does only

[22:51] <gaal> err@(VError e _) -> do writeRef errSV e

[22:52] <gaal> ... on a different note:

[22:52] <gaal> opRequire, when a module was found in %*INC already:

[22:52] <gaal> opEval style pathName ""

[22:53] <gaal> why? why the call to opEval, just to possibly reset $!   ?

[22:53] * stevan wonders who gaal is talking to :)

[22:53] <svnbot6> r8247 | stevan++ | PIL.Native.* 

[22:53] <svnbot6> r8247 | stevan++ | - changed attribute names in PIL/Native/Eval.hs to include the 

[22:53] <svnbot6> r8247 | stevan++ |   twigils (%methods becomes %:methods, etc)

[22:53] <svnbot6> r8247 | stevan++ | - added src/PIL/Native/Bootstrap.pil, this is the skeleton of the 

[22:53] <svnbot6> r8247 | stevan++ |   meta-model bootstrap code, it needs a /LOT/ of work :)

[22:53] <svnbot6> r8247 | stevan++ | Perl6::ObjectSpace 

[22:53] <svnbot6> r8247 | stevan++ | - misc scribbles in the API_sketch.pod, nothing interesting really

[22:55] <stevan> audreyt: we need to chat when you get back online

[22:55] * stevan dinner &

[23:05] *** avarab is now known as avar

[23:17] <gaal> what does "VControl $ ControlEnv env" mean?

[23:17] <gaal> what does 'Syn "env" []' do?

[23:18] <gaal> eg. EvalResultEnv -> (`mergeStmts` Syn "env" [])

[23:19] <gaal> zzZZ &

[23:30] <meppl> gute nacht

