[00:00] <luqui> Perl is multicultural, which means people come from all sorts of backgrounds

[00:00] <luqui> some people would use hyphens, other underscores

[00:00] <dbrock> sure, but it would all mean the same thing

[00:00] <luqui> and that's not the kind of thing humans remember easily (did this module use a hyphen or an underscore?)

[00:00] <dbrock> people indent differently too

[00:00] <luqui> oh, you're proposing that _ and - are interchangable?

[00:00] <dbrock> that's exactly what I'm proposing

[00:01] <luqui> sub foo-bar ($x) { say $x }    foo_bar(42);  # says 42

[00:01] <dbrock> right

[00:01] <luqui> okay, well, that kills that concern

[00:01] <SamB> dbrock: I hope you don't propose that foo-bar_baz be allowed!

[00:01] <dbrock> SamB: in fact, I do

[00:01] <luqui> SamB, why not?

[00:01] <luqui> nobody would do it

[00:01] <dbrock> I sometimes use _foo-bar-baz myself

[00:02] <SamB> luqui: you have a point there

[00:02] <dbrock> (where the leading underscore usually means "internal" or something like that)

[00:02] <luqui> dbrock, well, as far as I can tell, the proposal seems harmless

[00:02] <luqui> but it's a taste issue, so you'll come up against a lot of opposition

[00:03] <dbrock> great, thanks for being open-minded :-)

[00:03] <luqui> also we probably wouldn't allow - to be the first character in the identifier

[00:03] <dbrock> that sounds sensible

[00:03] <luqui> because people like to crunch their unaries up against their names

[00:03] <dduncan> personally I think that no characters in ids should be substitutable for others

[00:03] <dduncan> if you're going to go that route, then you might as well make A = a as well

[00:03] <luqui> dduncan, that is another point.  canonicalization is a pain

[00:04] <dbrock> Lisps have been case-insensitive for, like, ever

[00:04] <luqui> Larry says "Lisp has all the visual appeal of oatmeal with fingernail clippings mixed in"

[00:04] <dduncan> lots of languages are case sensitive, and being case sensitive is more expressive

[00:04] <luqui> so you probably won't get anywhere arguing that Lisp did something syntactically

[00:04] <dduncan> SQL gives you a choice of being sensitive or insensitive

[00:05] <dduncan> bareword identifiers in SQL are insensitive, delimited identifiers are sensitive

[00:05] <dduncan> if you want to compare one of each type, then an insensitive matches as an uppercase sensitive

[00:06] <luqui> dduncan, but do you also think that we shouldn't have more than one way to print something to the screen?

[00:06] <dduncan> I don't want perl to be case insensitive for identifiers, by default

[00:07] <luqui> dduncan, you seem to have a lot of opinions.  please back them up :-)

[00:07] <dduncan> being able to print is a matter of a choice of what function you call ... 

[00:07] <dduncan> not whether pr_int is interpreted as pr-int or vice versa

[00:07] <dduncan> its a separate issue

[00:08] <dduncan> I don't like two different characters automatically being equivalent

[00:08] <luqui> dduncan, but you also have the choice of saying $foo.meth(arg) or meth $foo: arg

[00:08] <dduncan> not the same thing

[00:08] <luqui> how so?  they may feel different to you, but I really can't see much different

[00:09] <dduncan> if I declare my_func(), I don't want someone saying my-func() to result in that one's invocation

[00:09] <luqui> the latter form was introduced to help readability.  maybe in some situations hyphens are more readable than underscores

[00:09] <luqui> (for instance, I loathe writing BNFs with underscores)

[00:09] <dduncan> if the - is accepted, it should be a different function name

[00:09] <luqui> dduncan, that has many more problems

[00:09] <dduncan> as I recall, BNFs use dashes

[00:09] <luqui> exactly

[00:09] <luqui> but perl 6 has rules

[00:09] <luqui> and you have to use underscores in those :-)

[00:10] <dduncan> but BNFs also have delimited identifiers

[00:10] <dduncan> eg,

[00:10] <dduncan> <foo> ::= <bar-thing> BAZ

[00:10] <dduncan> identifiers have the <>

[00:10] <luqui> so do perl 6 rules

[00:10] <luqui> but you can't use - because it's an identifier

[00:10] <luqui> you can say rule foo {...}  and refer to &foo

[00:11] <dduncan> I should point out that people generally use underscores in place of "spaces"

[00:11] <dduncan> dashes likewise

[00:12] <dduncan> they are word separators, when whitespace isn't allowed inside an identifier

[00:12] <luqui> yeah

[00:13] <luqui> anyway, I think it's a bikeshed issue

[00:13] <dduncan> so if we're going to allow underscore and dash to be interchangeable, then the collection should be conceptually a space

[00:13] <dduncan> kind of like how several whitespace chars are conceptually a \n

[00:13] <luqui> dduncan, yeah

[00:14] <luqui> I think that's what dbrock is arguing for

[00:14] <dduncan> if we don't think of those as spaces, then simply dash for underscore seems to arbitrary to be accepted

[00:14] <dbrock> dduncan: in natural language, hyphens join words; identifiers are joined words

[00:14] <luqui> and it makes sense that they should be interchangable

[00:14] <dduncan> so maybe have a substitutable character class called word-joiner, which includes, dash, underscore, etc

[00:15] <luqui> because nobody seems to know how to use hyphens correctly

[00:15] <stevan> luqui: ping

[00:15] <luqui> did you really need to ping me?

[00:15] <stevan> yes :)

[00:16] <stevan> luqui: so I have been reading about SML Functors, which is makeing theory.pod seem less insane

[00:16] <luqui> what are SML functors?

[00:16] <stevan> and I am pondering some kind of Functor like device for the core Object Space stuff

[00:16] <stevan> Standard ML 

[00:16] <luqui> right, I don't know SML

[00:16] <stevan> hmm... 

[00:16] * stevan looks to see if he can find a link

[00:17] <stevan> they are basically the basis of SML's module system,... which is quite nice and very powerful

[00:18] <luqui> ack

[00:19] <dduncan> what causes all that, exactly?

[00:19] <dduncan> all the mass leave and join

[00:19] <luqui> maybe freenode is moving us around

[00:20] <dduncan> not all of us ... I wasn't told that I left and rejoined the room

[00:22] <dbrock> hmm, I didn't notice anything

[00:22] <dbrock> I guess my IRC client "conveniently" hides that stuff

[00:22] <dbrock> did you get the last two messages I adressed to you, dduncan?

[00:22] <dduncan> dbrock, my list says you were one of those 20-30 who left and rejoined

[00:23] <dbrock> okay

[00:23] <dbrock> dduncan: in natural language, hyphens join words; identifiers are joined words

[00:23] <dbrock> dduncan: do you think of "foo_bar" as "foo followed by underscore followed by bar", or do you just think of it as "foo followed by bar" and infer from context (Perl culture) that underscore is used to separate them

[00:23] <dduncan> not that that should matter

[00:23] <stevan_> luqui: sorry,... had to tuck the kids in

[00:24] <stevan_> luqui: SML's module system is basicall 3 components... signatures, structures and functors

[00:24] <dduncan> dbrock, as I wrote earlier, I consider both _ and - to both be word separators ... humans would use spaces

[00:24] <stevan_> signature are just that,.. signatures

[00:24] <stevan_> structures are basically a grouping of functions, datatypes, etc

[00:25] <dduncan> dbrock, see 13 mins ago, where I said that

[00:25] <stevan_> and functors (and I am still grokking them,... so I may be a little off here) are parametric structures

[00:25] <luqui> ahh

[00:25] <stevan_> they are very similar to your theory/model/etc

[00:25] <luqui> theory.pod is really modeled after Haskell's type classes, with more dynamism built in, but maybe we use ML's functors as an extension of parameterization to modules

[00:25] <dduncan> anyway, I've said what I wanted to on that subject

[00:26] <dbrock> dduncan: that's what I replied to

[00:27] <dbrock> so since you consider both of them to be word separators, doesn't it make sense for them to be synonymous?

[00:28] <dduncan> that's what I think they are conceptually, but I don't necessarily think Perl should consider them the same ...

[00:28] <dduncan> as I said, bring this matter up on p6l and see what they say

[00:29] <stevan_> luqui: so if you have a moment I would like to discuss how I see these functors, theories and roles fitting together

[00:29] <luqui> sure

[00:29] <dduncan> dbrock, suffice it to say that I'm willing to accept this change if @Larry endorse it, but I don't plan to propose it to them myself

[00:29] <luqui> I might be a bit laggy, as I'm pugs hacking too

[00:29] <dbrock> dduncan: I'm writing the post as we speak

[00:30] <stevan_> luqui: ok

[00:30] <dduncan> attaboy

[00:30] <dbrock> dduncan: okay, that's great

[00:30] <stevan_> so ,.. the ObjectSpace work has centered around getting a core set of "things" which are needed in order to bootstrap the metamodel

[00:30] <dduncan> strictly by myself, I'm on the fence on the issue

[00:31] <stevan_> it basically works, the only issue is that these core "things" are not meant for "userland"

[00:31] <luqui> mmk

[00:31] <stevan_> and the metamodel expects these "things" in it's method parameters and returns them from said methods as well  

[00:32] <stevan_> my initial thought was to wrap the metamodel post-bootstrap using Roles

[00:32] <stevan_> the Roles would then handle all the boxing/unboxing needed 

[00:32] <stevan_> but this feels ugly

[00:33] <stevan_> the next idea (which is actually robkinyon's idea) was to have two signatures,.. one for bootstrapping, the other for userland,.. and boxing/unboxing would probably be assumed to "just work"

[00:34] <stevan_> This felt like more work than I wanted to undertake

[00:34] <luqui> hmm

[00:34] <luqui> the role thing sounds very right to me, actually, but go on

[00:34] <stevan_> so my last thought.. is the Functors

[00:35] <stevan_> if I wrap all the core "things" in some kind of module signatures/functors, then I can program "to the interface" rather than the implementation

[00:36] <luqui> how is that different from roles?

[00:36] <stevan_> then we would provide some kind of "bridge" between the functors/signatures and Roles

[00:36] <stevan_> they are not all that different actually

[00:37] <stevan_> the key is to find a clean way to bridge the gap between core-runtime and userland

[00:37] <stevan_> of course,.. all this made me think about theory.pod again,.. hence why I am bugging you :)

[00:38] *** stevan_ is now known as stevan

[00:39] <luqui> to me, the native types in the metamodel are the unnamable "classes" of theory.pod

[00:39] <luqui> they do roles, and they have instances, but you can't actually talk about them

[00:39] <stevan> yes, but I am talking about one level deeper than that

[00:39] <stevan> the primative bit, num, str types which make up the metamodel

[00:39] <luqui> yeah

[00:39] <luqui> those are the classes

[00:40] <luqui> or am I misunderstanding something?

[00:40] <stevan> they are not classes, they are the building blocks which we use to make classes

[00:41] <luqui> I don't think we're on the same page

[00:42] <stevan> the unnameable classes thing I see as a language level issue,.. because even if p6 userland can't see them... the runtime must be able to

[00:42] <luqui> hm... the runtime

[00:42] <luqui> that's up to the runtime :-)

[00:43] <luqui> I was thinking that just because we use num and str to build classes that they can't themselves be classes

[00:43] <luqui> I mean, you could smack a vtable on to them and make them just like any other concrete thing

[00:43] <stevan> well I was seeing that as being roles

[00:44] <stevan> role Str { ... do things with str primitive ... }

[00:44] <stevan> so the Roles basically function as the Box in "boxed types"

[00:45] <stevan> does that make sense?

[00:45] <luqui> hmmm.... sortof, but not really

[00:45] <luqui> how can a role be a box

[00:45] <luqui> a role just defines the shape of a vtable

[00:45] <luqui> if you want to talk implementation level

[00:45] <stevan> vtable?

[00:45] <stevan> vtables are sooo C++ :P

[00:46] <luqui> vtables are soo fast

[00:46] <luqui> compared to string lookup like p5

[00:46] <stevan> so how exactly are you viewing the classes?

[00:46] <stevan> structurally?

[00:47] <luqui> you mean the bootstrappy primitive classes or the language concrete classes?

[00:47] <luqui> you must mean the latter

[00:47] <stevan> yeah

[00:47] <luqui> an opaque pointer

[00:47] <luqui> just some stuff behind a black box

[00:48] <luqui> and you can ask it for its role vtables

[00:48] <luqui> and then call the role vtable methods

[00:48] <luqui> (in Haskell, the compiler fills in the role vtables)

[00:48] <luqui> (so you don't even have to ask; but full type inference is not a luxury we have)

[00:49] <stevan> but vtables (IIRC) are really just compiled "caches" for method lookup

[00:49] <stevan> Perl 6 is far to dynamic for this IMHO

[00:49] <stevan> we would end up with more code dealing with the cache than it would take to deal with dynamic lookup on demand

[00:49] <luqui> don't think of a vtable like that

[00:49] <stevan> ok

[00:50] <luqui> a vtable is an object that specifies how some opaque thing does a role

[00:50] <stevan> ok

[00:50] <luqui> "this method is implemented here, that method is implemented there"

[00:51] <luqui> type classes (i.e. theories) provide a nice way to do that for multimethods

[00:51] <stevan> so all "classes" are an opaque pointer with an attached vtable which itself is just a set of pointers to functions somewhere

[00:51] <luqui> er, not quite

[00:51] <luqui> so, when I say Foo{^T}   # pretend ^T is some concrete type that we weren't allowed to name

[00:52] <luqui> I'm asking the compiler whether Foo is instantiated for ^T

[00:52] <stevan> ok

[00:52] <luqui> if the answer is no, then there's a type error (you can think of this stuff happening at runtime, too, though)

[00:52] <luqui> but if the answer is yes, it's not just a plain old yes

[00:53] <luqui> the answer is the vtable for *how* ^T does Foo

[00:53] <luqui> So there is a vtable for every (type,role) pair, as long as the type does the role

[00:53] <luqui> at least conceptually...

[00:53] <luqui> er, semiconceptually...

[00:53] <stevan> does the vtable have implementation? or just the signature?

[00:54] <luqui> the vtable is precisely the implementation

[00:54] <stevan> ok

[00:54] <luqui> (or it points to the implementation somewhere else)

[00:54] <stevan> I am not sure this is a good basis for the metamodel 

[00:54] <luqui> possibly not

[00:54] <luqui> hmm...

[00:54] <stevan> it sounds a lot like Java/C++ etc, which are not known for their flexibility/extensibility

[00:55] <luqui> well, this doesn't preclude looking up methods by name

[00:55] <stevan> and makes classes and roles into "things" which the runtime needs to supply

[00:55] <luqui> stevan, uh, didn't it have to do that anyway?

[00:55] <stevan> nope :)

[00:55] <luqui> or do you mean that the metamodel should provide them instead?

[00:56] <stevan> the metamodel only needs a basic opaque type

[00:56] <stevan> which has a pointer to it's "parent" (or class if you like), and room to hold some data

[00:57] <luqui> so this could be the opaque pointer...

[00:57] <stevan> that,.. along with a very basic sendmsg primative and you can build Classes and roles from it

[00:57] <stevan> yes, it could

[00:57] <stevan> but classes are just another instance

[00:57] <stevan> of Class

[00:57] <stevan> they are not anything special

[00:58] <luqui> well, perhaps the vtable view is still too high-level

[00:58] <stevan> the same building blocks could be used to build any metamodel (prototype if you like)

[00:58] <luqui> I don't think anything is saying that the vtable couldn't be implemented by some lower-level machinery within the metamodel

[00:58] <stevan> oh, it is implemented in the metamodel,.. but it is not attached to the opaque type (at least not as directly as I think you were talking about)

[00:59] <stevan> but actually ....hmmm

[00:59] <stevan> if we look at your vtables as being the "module signatures" I was talking about

[00:59] <stevan> this all fits together

[01:00] <luqui> side note, do you know how to force rebuilding of the precompiled prelude?

[01:00] <luqui> without recompiling the rest of pugs?

[01:00] <stevan> no idea,.. but i suspect make clean would do it

[01:00] <luqui> yeah, that kills the latter goal :-)

[01:00] <stevan> or delete the compiled code (if it exists seperately)

[01:01] <stevan> the vtables/module-signatures could be a primitive form of Roles

[01:03] <stevan> and if we apply them to the metamodel "things" as well as the core "things" as well, hmmm

[01:04] <luqui> could you try to explain a module signature again?

[01:05] <stevan> ok,.. a function has a signature,.. its parameters (and their types) and its return value (and it's type)

[01:06] <stevan> a module signature is basically like that, but for modules

[01:06] <stevan> so the module has the following functions in it, and here are thier signatures

[01:06] <stevan> then there is some mechanism by which the signature "hides" the implementation

[01:07] <stevan> think about downcasting in Java

[01:07] <luqui> downcasting?

[01:07] <stevan> or upcasting I forget which

[01:07] * luqui has so little Java experience... he is so proud

[01:07] <stevan> :D

[01:08] <stevan> ok,.. in java,.. you have a collection,. it returns items,.. those items are types as Object cause Java sucks

[01:08] <stevan> so you need to cast those Objects into the things you want them to be 

[01:08] <stevan> sometimes though it make sense to cast them into an interface instead,.. so you end up programming just to the interface, and not to the actual concrete impl

[01:08] <luqui> ahh.  that sounds like "downcasting" is the right word

[01:09] <stevan> ok

[01:09] <stevan> so,.. think of that in a non-OO sense

[01:09] <luqui> yeah, that makes sense

[01:09] <luqui> and actually, that is the basis for allomorphism, and it is a principle I hold quite dearly

[01:10] <stevan> :)

[01:10] <luqui> I don't think it should be possible to hard-code a particular implementation

[01:10] <stevan> you and chromatic both

[01:10] <stevan> me either

[01:10] <stevan> my other motivation for this is to be able to easily swap out runtimes like PyPy does

[01:10] <stevan> so have the FlowObjectSpace , etc etc

[01:11] <stevan> if I wrap all my primitive "things" into these signatures/interfaces/whatever then I program "to" them,.. and not the impl

[01:11] <stevan> make sense?

[01:12] <luqui> yep

[01:12] <stevan> good :)

[01:12] <stevan> does this fit closer to what you talking about in theory.pod?

[01:13] <luqui> I think so

[01:13] <stevan> I think the main difference is that I am not talking about multis here

[01:13] <luqui> I think we've been basically thinking the same thing all along, but just talking circles around it

[01:13] <stevan> of course :)

[01:13] <luqui> are you talking methods?

[01:13] <stevan> you say theory, I say functor,... 

[01:14] <stevan> I am not sure exactly what I am talking about re: multis & methods

[01:14] <stevan> you say model and I say modal

[01:14] <luqui> :-)

[01:14] <stevan> to-may-toe, to-mah-to

[01:14] <stevan> etc etc etc

[01:14] <luqui> I say toe-mah-two

[01:15] * stevan stops singing old jazz standards

[01:15] * luqui starts

[01:15] <luqui> damn you!

[01:15] <stevan> LOL

[01:16] <stevan> ok,.. you be Ella and i will be Louis

[01:16] <luqui> incidentally, I'm listening to Ella atm

[01:17] * stevan is listening to really great Joy Division bootleg,.. which doesn't match well with Ella/Louie really :) 

[01:17] <stevan> Ella++ though :)

[01:18] <stevan> ok,.. so I will mess around with this module sig thing and see what I get

[01:18] <stevan> then maybe we can shoehorn it into the theory.pod ideas

[01:18] <stevan> or vise versa

[01:18] <stevan> in the meantime I suggest you read up on ML's module system.. it may be very enlightening

[01:19] * stevan digs for a good link for luqui  

[01:19] *** Lopo_ is now known as Lopo

[01:19] * luqui will

[01:19] * luqui has been meaning to learn ML/OCaml for a while

[01:19] * stevan has always loved ML even though he has never programmed anything in it :)

[01:20] <luqui> it should be fairly easy to learn now that I'm comfortable with haskell

[01:20] <stevan> yes, Haskell "comes from" ML IIRC

[01:21] <luqui> it is about as related to ML as Perl is to C

[01:21] <stevan> yeah

[01:21] <stevan> on the same side though

[01:21] <luqui> Perl and C are fairly related...

[01:21] <stevan> the more dynamic side being LISP/Scheme, and the "typed" side being ML, Haskell, etc 

[01:22] <luqui> ahh, in that respect Perl isn't that close to C

[01:23] <stevan> luqui: http://www.diku.dk/users/tofte/publ/oregon/

[01:23] <luqui> *click*

[01:23] <stevan> grab the ps

[01:26] <luqui> what's with the circumflex on "secondary ro^le"

[01:27] <stevan> ?

[01:27] <luqui> on the first page

[01:28] <stevan> no idea

[01:28] <stevan> bad typesetting maybe

[01:29] <stevan> this is not bad,.. very high level  and doesnt cover functors -> http://www.dcs.ed.ac.uk/home/stg/NOTES/node95.html

[01:34] <luqui> ?eval multi sub foo ($x) { say "one" }  multi sub foo ($x, $y) { say "two" }  foo(3);  foo(3,4);

[01:34] * justatheory shoehorns steven.pod

[01:34] *** evalbot_7959 is now known as evalbot_7961

[01:34] <evalbot_7961> OUTPUT[one two ] bool::true 

[01:34] <justatheory> er,stevan.pod

[01:34] <stevan> :)

[02:46] <robkinyon> luqui: ping

[02:54] <luqui> robkinyon, pong

[02:55] <robkinyon> mind if I throw a few thoughts onto the fires of the metamodel/theory discussion you just had with stevan?

[02:55] <luqui> yes I mind!  Geez, what do you think, we're open minded or something!?

[02:55] <robkinyon> stevan didn't explain my thoughts very well (which isn't surprising because I didn't explain them to -him- very well)

[02:55] <robkinyon> LOL

[02:55] <robkinyon> Basically, my idea is that the runtime provides, at a minimum, one primitive - the opaque instance.

[02:55] <luqui> we were both having trouble explaining our thoughts

[02:56] <robkinyon> This instance provides two messages : get( primitive) -> primitive and set(primitive, primitive) -> primitive

[02:56] <robkinyon> with the guarantee that set( P, Q ) implies that get(P) -> Q

[02:56] <luqui> where primitive is like str or num or something?

[02:56] <robkinyon> anything you want

[02:56] <robkinyon> (Literally)

[02:57] <luqui> hmm

[02:57] <luqui> okay, go on

[02:57] <robkinyon> So, to get the metamodel, you need two other primitives - Block and Signature

[02:57] <robkinyon> Block is a unit of work (a la function/sub/method/etc), plus its associated lexical environment.

[02:57] <robkinyon> Block is a closure

[02:58] <luqui> the lexical environment can be simulated, but that's beside the point

[02:58] <robkinyon> Signature provides what it says - a list of types that can be accepted and a list of types that will be returned

[02:58] <luqui> or, I guess that would be the runtime's job to simulate it

[02:58] <robkinyon> My hands a waving a smidgeon

[02:58] <robkinyon> it's assumed that the runtime can and will provide these items

[02:58] <robkinyon> or, that a wrapper can be written between the metamodel and the runtime to fill in the gaps

[02:59] <robkinyon> (From the metamodel's perspective, the wrapper becomes the runtime)

[02:59] <robkinyon> So far so good?

[02:59] <luqui> I think so

[02:59] <luqui> go into a little more detail about "signature", please

[02:59] <luqui> that is, according to the runtime, what is a "type"?

[03:00] <robkinyon> According to the runtime, a type is a primitive

[03:00] <robkinyon> So, it's two lists of primitives

[03:00] <robkinyon> You'll see in 3 seconds why it needs to be a primitive 

[03:00] <robkinyon> so far so good?

[03:01] <luqui> okay

[03:01] <robkinyon> so, we have 3 mandatory primitives - Opaque, Block, and Signature

[03:01] <robkinyon> the runtime can now provide any number of optional primitives (string, int, float, bit, etc)

[03:01] <luqui> and Type

[03:01] <robkinyon> No - Type is not a primitive

[03:01] <luqui> robkinyon: According to the runtime, a type is a primitive

[03:02] <robkinyon> Ignore the current runtime

[03:02] <luqui> I was just quoting you, but okay

[03:02] <robkinyon> No - the runtime defines "type" to be "any primitive I know about"

[03:02] <robkinyon> sorry - i misspoke.

[03:02] <luqui> oh, okay

[03:03] <robkinyon> Now, the metamodel continues along its merry way as Stevan has handled it

[03:03] <robkinyon> attributes are easily handled - opaque.set( name, value ) and opaque.get( name )

[03:04] <luqui> what is "name" if you don't have string?

[03:04] <robkinyon> Whatever primitive you want it to be

[03:04] <robkinyon> this model doesn't do much if you don't provide other primitives

[03:04] <robkinyon> it just doesn't specify what other primitives you have to provide

[03:04] <robkinyon> So, if the runtime only provides Int, then all your names and values are Ints

[03:04] <luqui> .... oh...kay.  remember the goal is to implement perl 6 on top of this

[03:05] <robkinyon> Well, the Perl6 runtime will provide String, Int, Float, Bit, List, Hash ... and this model will simply handle them

[03:05] <robkinyon> The metamodel doesn't need to know about those primitives

[03:05] <robkinyon> (There's a userland on top of the metamodel, which enforces language policy.)

[03:06] <robkinyon> The userland is an important concept to keep in the back of your mind - we'll need it in about 5 minutes

[03:06] <luqui> okay

[03:06] <luqui> then continue

[03:06] <robkinyon> So, attributes are handled sanely

[03:06] <robkinyon> Methods are also handled sanely - opaque.get( methodname ) retrieves the Block

[03:06] <robkinyon> opaque.get( Block ) retrieves the Signature for that Block

[03:07] <robkinyon> So far so good?

[03:07] <luqui> yep

[03:07] <luqui> so opaque is kind of like a generic hash

[03:07] <robkinyon> Then, you just invoke the Block with the appropriate Signature and the method call occurs

[03:07] <robkinyon> opaque is whatever the runtime wants it to be, so long as it responds to set(primitive,primitive) and get(primitive) -> primitive

[03:08] <robkinyon> The metamodel doesn't want to know

[03:08] <luqui> robkinyon, think in terms of algebra

[03:08] <robkinyon> Ok ... ?

[03:08] <luqui> nobody cares what the real numbers are, as long as they satisfy all the properties that the real numbers do

[03:08] <robkinyon> exactly what I'm getting at

[03:08] <luqui> opaque *behaves* like a generic hash

[03:08] <robkinyon> fair nuff

[03:08] <robkinyon> yes - it behaves as a hash that can take any primitive as a key

[03:09] <robkinyon> there is no auto-conversion between the primitives - this is also important

[03:09] <robkinyon> If I set a key Int == 2 and another key Float == 2, they are different keys

[03:10] <luqui> alright

[03:11] <robkinyon> Now, the metamodel goes ahead and defines Class, class, Object, etc.

[03:11] <robkinyon> Just like it always has

[03:11] <luqui> it uses strings pretty prolifically IIRC

[03:12] <robkinyon> stevan's might have, and the final P6 one probably will as well, but that's userland policy, not a metamodel requirement

[03:12] <luqui> okay

[03:13] <robkinyon> Now, every primitive provided by the runtime, except for Opaque (and possibly Block and Signature), is boxed up by a class of the appropriate name

[03:13] <robkinyon> So, the String primitive is boxed by String, the int primitive by Int, etc.

[03:13] <robkinyon> Actually, Signature has to be boxed, as well.

[03:13] <robkinyon> It needs to be in order to handle the full range of P6 signatures

[03:14] <robkinyon> Another class Type is created, to handle the P6 types

[03:14] <luqui> Signature will probably be something completely different from the metamodel's Signature

[03:14] <robkinyon> The userland Signature will most definitely be different than the runtime Signature

[03:14] <luqui> so it's not so much "boxed" as "reimplemented".  anyway, continue.

[03:14] <robkinyon> However, it makes sense for the userland Signature to box the runtime Signature so that it can mediate between the two

[03:15] <robkinyon> yeah - boxing === reimplementation to some degree, in my mind

[03:15] <luqui> ... alright

[03:15] <robkinyon> So, now - when a method gets called, the metamodel checks the parameters passed against the userland Signature(s) for that method

[03:15] <robkinyon> if there's a problem, it throws an error right there - the runtime is never involved

[03:17] <robkinyon> So, type-checking P6 types is the responsability of the metamodel in conjunction with the userland.

[03:17] <robkinyon> They may be the same thing, or not - it's unclear which is the better approach

[03:18] <luqui> I seem to be unclear on something:

[03:18] <robkinyon> go on

[03:18] <luqui> what is the metamodel's responsibility?

[03:18] <luqui> what is it supposed to be implementing?

[03:19] <robkinyon> It implements the framework to handle classes/objects/method dispatch/etc.

[03:19] <robkinyon> everything stevan's was doing

[03:19] <luqui> yeah, I know, I just wasn't sure how far-reaching it is supposed to be

[03:19] <robkinyon> I don't think that was ever decided

[03:20] <luqui> "as much as we can cleanly theorize" :-)

[03:20] <robkinyon> "As much as makes sense for something else to not handle"

[03:20] <robkinyon> right now, i think it's the garbage pile

[03:20] <robkinyon> or that drawer in your kitchen that doesn't have a name

[03:20] <luqui> Isn't the garbage pile the responsibility of the garbage collector? :-)

[03:21] <robkinyon> LOL

[03:21] <robkinyon> it's the kitchen sink

[03:21] <robkinyon> stevan's started to discuss the idea of a userland which implements language policy, and i think that's a very important distinction to make

[03:21] <robkinyon> I'd argue that "userland" is really very close to PGE

[03:22] <robkinyon> and PGE (or whatever other grammar engine is used) may or may not convert everything into calls into the metamodel

[03:22] <robkinyon> Which is partly why i didn't want to agree that strings are very important - it may be useful to have a PGE extension that doesn't use strings as method names

[03:23] <luqui> by PGE you mean the compiler?

[03:23] <robkinyon> the compiler/lexer/semantic'er/etc

[03:23] <luqui> It's probably best to separate your concerns there

[03:23] <robkinyon> it's whatever facility will allow me to redefine the language at runtime

[03:24] <luqui> I don't think the parser has much at all to do with the metamodel

[03:24] <luqui> at runtime?

[03:24] <robkinyon> fair enough

[03:24] <robkinyon> it's the thing that converts my statements into useful P6 constructs

[03:24] <luqui> that's compile time, no?

[03:24] * robkinyon is a little fuzzy on some details

[03:24] <robkinyon> I thought I would be able to redefine syntax in a lexical scope

[03:24] <luqui> yeah, that's a compile time operation

[03:25] <robkinyon> ok

[03:25] <luqui> anyway, I guess that's not your area of expertise :-).   Go on with the metamodel.

[03:25] <robkinyon> well, i think that whatever-it-is is really close to the "userland" concept stevan and i are starting to bandy about

[03:25] <robkinyon> it enforces what constructs are legal from a language perspective

[03:26] <robkinyon> the metamodel provides constructs to the userland to be used as it sees fit

[03:27] <robkinyon> i'm not concerned with a lot of the metamodel constructs - that stevan's gig

[03:27] <robkinyon> my focus in this discussion is the mediation between the metamodel and the runtime

[03:28] <robkinyon> and how that percolates up to the userland

[03:28] <luqui> The details are fuzzy... and I have to go to bed.

[03:29] <luqui> I'd recommend creating a diagram or writing something up more formally

[03:29] <luqui> so you can cover your bases

[03:29] <robkinyon> ok

[03:29] <robkinyon> i'll see what i can come up with

[03:30] <luqui> night

[03:31] <luqui> thanks, btw.  we need more theorists 'round here; TSa, Stevan and I never fight about anything

[03:31] <robkinyon> LOL

[03:31] <luqui> which means we probably aren't doing the right thing

[03:31] <robkinyon> stevan's been pulling me into this kicking and screaming

[03:31] <robkinyon> i think he hired me just so he could bounce this stuff off of me

[03:32] <luqui> makes sense

[03:32] <luqui> sayonara

[04:51] <Khisanth> there is a typo in perl5/README :)

[04:53] <dbrock> can someone help me understand the humor in this quote?

[04:53] <dbrock>     "premature optimization is the root of all evil"

[04:53] <dbrock> - Tad McClellan in clpmisc, "Re: Whats the variable holding the dir seperator?"

[04:54] <Khisanth> why do you think there is humor in the quote?

[04:56] <rep> supposedly that quote is really from Donald Knuth

[05:01] <dbrock> Khisanth: because someone had it in their signature

[05:02] <dbrock> so, strictly speaking, we're not specifically looking for humour per se, but rather "reasons why someone would find the quote interesting enough to put in their signature file"

[05:03] <Khisanth> it is highly agreeable :)

[05:04] <dbrock> rep: oh, I thought it was Hoare

[05:05] <rep> dbrock http://www.cookcomputing.com/blog/archives/000084.html

[05:05] <dbrock> Khisanth: well, sure, but then why attribute the quote to a Tad McClellan in some newsgroup, specifying the exact topic under which he said it?

[05:06] <rep> so i guess you're right :)

[05:06] <dbrock> C.A.R. Hoare's name is Tony?

[05:07] <rep> uhm

[05:08] <dbrock> ah, the A is for Anthony :-)

[05:09] <dbrock> Sir Charles Antony Richard Hoare (Tony Hoare or C.A.R. Hoare, born January 11, 1934) is a British computer scientist, probably best known for the development of Quicksort, the world's most widely used sorting algorithm, in 1960. [...] <http://en.wikipedia.org/wiki/C._A._R._Hoare>

[08:31] * Cryptic_K is away

[08:31] * Cryptic_K is asleep!

[10:11] <svnbot6> r7962 | gaal++ | livecd fixes:

[10:11] <svnbot6> r7962 | gaal++ | * work around debian's magic db not having ext2(!?)

[10:11] <svnbot6> r7962 | gaal++ | * a few typos / better diagnostic messages

[10:11] <svnbot6> r7962 | gaal++ | * make a few more options configurable from the command line

[10:11] <svnbot6> r7962 | gaal++ | * bump up the size (should this be automated?)

[10:12] <rafl> gaal: WTF is Debian's magic db?

[10:13] <gaal> file some_file

[10:13] <gaal> somefile: text

[10:14] <gaal> file pugs

[10:14] <gaal> pugs: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), for GNU/Linux 2.2.0, dynamically linked (uses shared libs), stripped

[10:14] <gaal> file initrd.img

[10:14] <gaal> initrd.img:      # oops, ext2 isn't there :(

[10:32] *** Lopo_ is now known as Lopo

[11:27] <theorbtwo> file -sk /dev/hda1 # /dev/hda1: \012- Linux rev 1.0 ext3 filesystem data (needs journal recovery) (large files)

[11:27] <theorbtwo> Interestingly, without -k, it just gives me emptystring.

[11:27] <theorbtwo> (I don't have any plain ext2 around.)

[11:30] <wolverian> wow, file is _really_ verbose about NTFS filesystems

[11:41] <SamB> wolverian: heh

[13:15] <Juerd> How many tests does Pugs have?

[13:16] <Juerd> Is there a way to find out without running the entire suite?

[13:16] <rafl> Juerd: If all tests have a plan it isn't that hard.

[13:17] <Juerd> I don't know if they do.

[13:18] <rafl> I guess most of them do.

[14:08] <robkinyon> rafl: Run them - there should be a final count at the end.

[14:08] <robkinyon> Errr ... Juerd: Run them

[14:08] <robkinyon> it shouldn't take -that- long. :-)

[14:50] *** wolv is now known as wolverian

[14:56] *** PerlJam_ is now known as PerlJam

[15:02] <gaal> Juerd: you can look at existing smokes on smoke.pugscode.org

[15:03] <gaal> also, our Test.pm doesn't have no_plan, so yes, they all have a plan.

[15:03] *** whiteg_ is now known as whiteg

[15:06] <gaal> seventeen .ts (or so) have programmatically determined plans.

[15:07] <gaal> (that's only in t/.)  r7962 has 8663 tests (including ext/.)

[15:16] <gaal> also, since Test.pm has an explicit plan function and not something like Test::More tests => nnn, you could hack a version of it to do 'sub plan ($n) { say $n; exit }' and then run the whole test suite. That'd be pretty fast (especially if you precompile this hacky Test.pm . ;-)

[15:17] <Juerd> gaal: I've already had a look; There are more than 8000, and that's a number I can use :)

[15:17] <Juerd> I actually did a grep|perl

[15:20] <gaal> yup

[15:24] <svnbot6> r7963 | iblech++ | t/builtins/control_flow/die.t: Added tests for die() in primitive constrol

[15:24] <svnbot6> r7963 | iblech++ | structures (map,grep,for,etc.). (See

[15:24] <svnbot6> r7963 | iblech++ | http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2005-11/msg00189.html.)

[15:24] <svnbot6> r7964 | iblech++ | util/perl6.vim: min and max should be highlighted in the same way as

[15:24] <svnbot6> r7964 | iblech++ | map,grep,sort,reduce etc. are (consider min { abs $_ } @numbers).

[15:46] <Limbic_Region> am I the only one noticing that nmake realclean; svn up; perl Makefile.PL; nmake takes two tries to get through the build on Win32 cause GHC runs out of heap?

[16:03] <Limbic_Region> and the abyss was silent

[16:05] <Limbic_Region> well that, and has anyone notices that Pugs is S-L-O-W on Win32

[16:43] <svnbot6> r7965 | stevan++ | Perl6::ObjectSpace -

[16:43] <svnbot6> r7965 | stevan++ | * a rough sketch of the module/functor idea in API_sketch.pod

[16:43] <svnbot6> r7965 | stevan++ | * a basic (really badly done) code gen for the s-expr metamodel

[16:43] <svnbot6> r7965 | stevan++ | * added method::params and method::signature (they just inherit

[16:43] <svnbot6> r7965 | stevan++ |   from their closure counterparts)

[16:43] <svnbot6> r7965 | stevan++ |     - fixed the tests which deal with these 

[17:21] <r0nny> re

[17:31] <gaal> Limbic_Region: you can increase heap size in config.yml (perl Makefile.PL after editing it)

[17:31] <gaal> Limbic_Region: you can increase heap size in config.yml (perl Makefile.PL after editing it)

[17:32] <gaal> as for slowness, d'you think it's slower than on linux?

[17:32] <Limbic_Region> right - I saw that in the IRC log, was just relogging back in to say thanks

[17:33] <Limbic_Region> gaal - I can't get to feather from here, but it took a full 8 seconds to run a trivial piece of code

[17:33] * Limbic_Region really hates this client since when you get disconnected you have no way of knowing it

[17:35] <Limbic_Region> gaal - I haven't been keeping up with compiling pugs after every revision and testing its speediness but I would say that it is magnitudes slower then the last time I checked it

[17:35] * Limbic_Region needs to wander off

[18:59] *** theorbtwo is now known as one

[18:59] *** one is now known as theorbtwo

[19:50] *** Lopo_ is now known as Lopo

[21:14] <svnbot6> r7966 | autrijus++ | * remove unneccessary System.Process import in Pugs.Embed.Pugs.

[21:14] <svnbot6> r7967 | autrijus++ | * After "make install", do not warn about "make register"

[21:14] <svnbot6> r7967 | autrijus++ |   if it's actually implicitly done by the install target

[21:14] <svnbot6> r7967 | autrijus++ |   (as is the usual case for DESTDIR-less situations)

[21:32] <svnbot6> r7968 | autrijus++ | * oops, squash a redundant 'make register' message

[21:32] <svnbot6> r7968 | autrijus++ |   from pure_vendor_install target.

[22:24] *** ntgrl is now known as integral

[22:31] *** stevan_ is now known as stevan

