[01:45] *** cm_ is now known as cm

[01:54] * cm does the camel thing

[05:27] <nothingmuch_> *yawn*

[05:27] <gaal> Morning _

[05:29] <nothingmuch_> hola

[05:30] *** nothingmuch_ is now known as nothingmuch

[05:30] <nothingmuch> what's up with ::Model?

[05:31] <machack666> hey, is it clever or kludgy to implement some of pugs' features in perl?

[05:31] <gaal> nothing is, i said i won't be working on it $last_night.

[05:31] <gaal> machack666: if it's perl6, it's all good

[05:32] <gaal> i started doing that for various forms of open

[05:32] <gaal> but defered that since there's so much disagreement about it

[05:32] <machack666> do you just give a string to the Eval monad?

[05:33] <machack666> disagreement about p6 code, or about the various forms of open?

[05:33] <gaal> the latter

[05:33] <nothingmuch> gaal: i mean what is the plan

[05:33] <nothingmuch> . o O ( the surest way to forget that something exists is to put it in a toaster )

[05:34] <nothingmuch> . o O ( the only problem is that something will probably remind you later, and it won't be as pleasant )

[05:34] <gaal> m6: about whether open should be highly dwimmy like p5, or split to several separate calls like the underlying libs, or somewhere in the middle.

[05:38] <gaal> http://forum2.org/gaal/pugs/smoke-cygwin.html # where's the global unforcetodo switch now?

[05:40] <nothingmuch> gaal: want to update http://pugs.kwiki.org/?SmokedPugs with that URL?

[05:40] <gaal> oh, it isn't global :) shall i unforce everything?

[05:40] <gaal> sure

[05:42] <gaal> nm, commit your autosmoke script?

[05:45] <nothingmuch> it's not that generic

[05:45] <nothingmuch> should i commit and someone will edit?

[05:45] <nothingmuch> or maybe i should just nopaste?

[05:45] <gaal> sure, why not.

[05:45] <gaal> that works too.

[05:45] <gaal> anyway, i gotta run for work. see ya.

[05:46] <nothingmuch> perlbot nopaste

[05:46] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[05:46] <nothingmuch> same here actually

[05:46] <pasteling> "nothingmuch" at 212.143.91.217 pasted "shell test loop" (40 lines, 966B) at http://sial.org/pbot/9831

[05:47] <nothingmuch> make clean is probably not necessary for everyone, but sometimes incremental builds die on my box

[05:47] <gaal> yeah, mine too.

[05:48] <gaal> wait == teh clever

[05:49] <gaal> never occured to me /bin/sh could do that :)

[05:49] <gaal> oh, btw

[05:50] <gaal> make smoke can now automatically u/l results

[05:51] <gaal> modulo the actual u/ling that is. -- it has a %ENV<PUGS_SMOKE_UPLOAD> mech.

[05:51] <gaal> anyway, i gotta go. bye! &

[05:53] <gaal> (nm: is there a way to abort the smoke if it hangs?) &

[06:01] <nothingmuch> killall pugs?

[06:02] * nothingmuch looks at how make smoke uploads

[06:03] <skew> is util the right place to put little scripts for working on pugs?

[06:04] <nothingmuch> yep

[06:06] <skew> hmm, I suppose I should make a perl script

[06:06] <skew> right now it's just egrep '([1-9]00|[1-9]0|[1-9])\.[0-9][ ]+[^ ]+$'

[06:10] <skew> but it could be imporved

[06:11] <skew> that turns out to be enough for the filtering of the profiling output that I wanted

[06:11] <skew> does anybody want to show me how to turn that into perl so it has room to grow?

[06:11] <gaal> nm, killall is very unportable. on solaris it does something completely different. i was more worried about the alarm thogh; my sh-fu isn't that strong.

[06:12] <gaal> skew, naively that's perl -ne 'print if /that_regex/' in p5

[06:12] <skew> what does that look like as a .pl file?

[06:13] <gaal> #!/usr/bin/perl -n

[06:13] <gaal> print if /that_re/

[06:13] <gaal> work & # for real

[06:14] <skew> does that regexp work?

[06:14] <skew> that is, is there any way to do it much better?

[06:15] <gaal> that is a valid p5 re - but i don't know your data very well

[06:15] <gaal> gotta go now, back later.

[06:15] <skew> columns of floating point numbers, I want lines where the second from the last is at least 1

[06:15] <skew> well, some text earlier on the line

[06:16] <skew> is nobody else around?

[06:43] *** castaway_ is now known as castaway

[06:45] <castaway> Nope

[06:46] <jabbot> pugs - 2600 - * pugscc --pugs repaired! 

[06:46] <jabbot> pugs - 2601 - * This be Pugs, version 6.2.2.

[06:46] <jabbot> pugs - 2602 - Made util/*.pl and script/pugscc svn:exe

[06:46] <jabbot> pugs - 2603 - Skip /etc/shadow tests.

[06:46] <jabbot> pugs - 2604 - * This be Pugs 6.2.2 for real.

[06:46] <jabbot> pugs - 2605 - * nitpick

[06:46] <jabbot> pugs - 2606 - Updated svnlog2graph.pl to use a better 

[06:46] <jabbot> pugs - 2607 - * `system(Str: List)` and `exec(Str: Lis

[06:46] <jabbot> pugs - 2608 - eol-style => native on AUTHORS

[06:46] <jabbot> pugs - 2609 - add some (mostly failing) #line tests

[06:46] <castaway> good morning jabbot ,)

[06:55] <jabbot> pugs - 2610 - * make gaal's line_basic.t pass.

[07:13] <nothingmuch> gaal: yeah, i know killall is terribly broken on some platforms... /me did (aix|solaris|hpux|osf) sysop for a living up to a while ago

[07:14] <nothingmuch> i haven't really thought about what would work

[07:14] <nothingmuch> because i don't think it's really an issue

[07:14] <nothingmuch> i just kill the shell script

[07:15] <nothingmuch> you could have it write $$ somewhere, and then use that if you want it managable

[07:22] <gaal|work> it's not *broken*, it just means something else

[07:23] <gaal|work> but does killing the script kill the running smoke?

[07:23] <nothingmuch> eventually

[07:23] <gaal|work> why?

[07:24] <gaal|work> hey, trillian is smart! i just noticed it logged me in automatically with the last nick i'd used on this client.

[07:24] <nothingmuch> the child process receives a SIGFLKS

[07:24] <nothingmuch> ;-)

[07:24] <nothingmuch> i don't know

[07:24] <nothingmuch> i just kill till it's dead

[07:24] <nothingmuch> kill pugs kill make kill perl

[07:24] <nothingmuch> lots of ps | awk

[07:25] <nothingmuch> and everyone is happy

[07:25] <gaal|work> SIG fuck, lookslikemyparentdied?

[07:25] <nothingmuch> sig folks

[07:25] <gaal|work> no, you could have a manual make going on

[07:25] <gaal|work> ps|greps suck.

[07:25] <nothingmuch> right

[07:25] <nothingmuch> i don't do it blindly

[07:26] <nothingmuch> one thing i haven't looked into is process groups

[07:26] <nothingmuch> you could make it setsid

[07:26] <nothingmuch> but perhaps even just killing the process group that == pid of the parent is enough

[07:27] <nothingmuch> again, i haven't bothered with this stuff at all

[07:27] <skew> hi, how do I send a patch?

[07:27] <nothingmuch> skew: svn ci

[07:28] <nothingmuch> i can give you commit privs

[07:28] <skew> that should do it then

[07:28] <nothingmuch> okay, i'll just need an email

[07:29] <skew> I'm brandon

[07:29] <skew> hmm, let's use its.caltech.edu

[07:30] <nothingmuch> okay, sent

[07:33] <skew> I got it

[07:34] <nothingmuch> welcome aboard

[07:35] <jabbot> pugs - 2611 - Added a profiled-optimized (with synonym

[07:36] <castaway> (and dont forget to fill in AUTHORS)

[07:36] <skew> there we are

[07:36] <skew> I'm already in there, actually

[07:52] <mj> perlbot nopaste

[07:52] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[07:55] <pasteling> "mj" at 147.229.221.107 pasted "Are these "for is rw" tests right?" (14 lines, 566B) at http://sial.org/pbot/9833

[07:55] <nothingmuch> mj: looks good

[07:55] <nothingmuch> i'm not sure about the hash comparison though

[07:56] <nothingmuch> since hash order is not guaranteed the stringification might be different

[07:56] <nothingmuch> i would just test %hash<a>, 2, and then %hash<c>, 4

[07:56] <nothingmuch> but overall the test is good

[07:57] <nothingmuch> the name 'nothingmuch' is being taken by impostors!

[07:57] <nothingmuch> gmail, livejournal

[07:57] <nothingmuch> beh

[08:00] <mj> is( %hash_kv.sort, %kv.sort, ... or 

[08:00] <mj> is( %hash_kv<a>, 2, ...

[08:00] <mj> is( %hash_kv<b>, 3, ...  ?

[08:00] <nothingmuch> yup

[08:05] <jabbot> pugs - 2612 - for.t - "for @list.values -> $num is rw"

[08:08] <mj> t/statements/for.t  needed for new tutorial_gen. thanks :-)

[08:25] <gaal|work> http://forum2.org/gaal/pugs/smoke-cygwin.html # aiming for a two minute smoke

[08:26] <gaal|work> this time with aggressive concurrency i saw tests fail too because of contentions.

[08:26] <gaal|work> oops, why is the css screwed?

[08:26] <nothingmuch> gaal: where can scp something?

[08:27] <gaal|work> oh, it isn't inlined

[08:27] <gaal|work> nm, you want to send someitnhg to me?

[08:27] <nothingmuch> yep

[08:28] <gaal|work> i'm at work, so i'd rather pull, if possible.

[08:28] <nothingmuch> okay

[08:28] <nothingmuch> rsyncying to home

[08:28] <nothingmuch> ooh, 180k =)

[08:28] <gaal|work> that can go in email, even.

[08:28] <nothingmuch> no, i meant per second =)

[08:28] <gaal|work> gaal strudel sheernetworks.com

[08:29] <gaal|work> oh

[08:29] <gaal|work> cool

[08:29] <nothingmuch> http://nothingmuch.woobling.org/Karin%20Krog%20&%20Dexter%20Gordon%20-%20Some%20Other%20Spring%20-%2009%20-%20Ode%20To%20Billy%20Joe.mp3 - http://xrl.us/fxzf

[08:30] <gaal|work> decent uplink you have there.

[08:30] * nothingmuch pays good money for it

[08:31] * nothingmuch should rerip it

[08:31] <nothingmuch> as ogg this time

[08:31] <nothingmuch> this rip was for others at work

[08:31] <gaal|work> nm, this is just in time - now i have an excuse to stop the cowerkre's crummy stuff

[08:31] <nothingmuch> =)

[08:32] <nothingmuch> NHOP is amazing

[08:32] <gaal|work> NHOP?

[08:33] <nothingmuch> Nils-Henning-øøsomething-Pederson

[08:33] <nothingmuch> sorry, pedersen

[08:33] <nothingmuch> and Ørsted is the Ø bit

[08:33] <nothingmuch> and he's the bassist on that record =)

[08:35] <nothingmuch> more people refer to him as NHOP than by the full name though

[08:37] <nothingmuch> btw, this is the CD from poland

[08:37] <gaal|work> http://forum2.org/gaal/pugs/smoke-cygwin.html - updated css

[08:37] <nothingmuch> took it about a month and a half to get here, i think

[08:45] <jabbot> pugs - 2613 - print message when all chunks are comple

[08:49] <autrijus> hey.

[08:50] <autrijus> somebody added a profiled-optimized

[08:50] <autrijus> skew: is that you?

[08:50] <skew> yes

[08:50] <autrijus> problem being, since yesterday, our "make profiled" is already optimized.

[08:50] <autrijus> note the -O.

[08:50] <skew> oops

[08:50] <autrijus> please revert the change :)

[08:50] <skew> how does that go?

[08:51] <autrijus> in general, I think -O reads better than -O1, despite them being synonyms

[08:51] <autrijus> reverting?

[08:51] <skew> yes, I've never used svn before

[08:51] <autrijus> svn merge -r 2611:2610 .

[08:51] <autrijus> I'll revert it for you :)

[08:51] <nothingmuch> morning autrijus 

[08:52] <autrijus> hey nothingmuch.

[08:52] <skew> where are patches listed?

[08:52] <nothingmuch> skew: 'svn log'

[08:52] <skew> okay

[08:52] <autrijus> done

[08:52] <skew> does co describe the new patches?

[08:53] <autrijus> hm"

[08:53] <nothingmuch> like darcs, you mean?

[08:53] <autrijus> "svn up" is update

[08:53] <nothingmuch> no, it lists the files that changed

[08:53] <nothingmuch> and in 'svn co' it's probably all of them

[08:53] <autrijus> to see the new changes, use svn log or something

[08:53] <autrijus> if you want offline information about specific patches

[08:53] <autrijus> as well as patch dependency information

[08:53] <skew> svn log wants to show me everything that ever happened

[08:53] <autrijus> and patchset generation and contexts

[08:54] <autrijus> then you want svk, not svn :)

[08:54] <autrijus> svn is more... traditional

[08:54] <autrijus> it's basically the cvs model with much better internals

[08:55] <skew> I'd like to leave the little script, unless somebody already did that too

[08:55] <Juerd> moin!

[08:55] <autrijus> skew: I left that alone too

[08:55] <jabbot> pugs - 2614 - revert profiled-optimized because profil

[08:55] <nothingmuch> ooh, we're going out to lunch

[08:55] <autrijus> I only reverted Makefile.PL

[08:55] <autrijus> hey Juerd.

[08:56] <skew> oh, okay

[08:56] <nothingmuch> hola Juerd 

[08:58] <autrijus> bbiab. :)

[09:00] <skew> Is Context just someting internal to the interpreter, or can code directly manipulate the class tree in perl6?

[09:01] <skew> basically, can I just rewrite it or do I have to worry about exposing it to the interpreted code

[11:01] <decay> *g*

[11:01] <castaway> whose idea was this utf8 thing again? :)

[11:25] <jabbot> pugs - 2617 - More Haddocks (AST/Junc/Types)

[11:35] <jabbot> pugs - 2618 - Concurrency fixes in tests

[11:37] <castaway> pingpong, Odin

[11:57] *** greg is now known as drbean

[12:01] <nothingmuch> gaal: ping

[12:03] <Limbic_Region> did I misintrpet "#  for @a { say } is now parsed as for @a -> $_ is rw { say } " from yesterday's release notice?

[12:04] <Limbic_Region> I interpreted it to mean that for @foo { ... } now worked as for @foo -> $_ is rw { ... }

[12:04] <Limbic_Region> but that doesn't seem to work?

[12:04] <castaway> sounds like thats what it means.

[12:06] <Limbic_Region> I am doing a fresh checkout now, but it doesn't work for me

[12:06] <Limbic_Region> can someone please confirm?

[12:09] <castaway> do the tests run?

[12:09] * Limbic_Region didn't see a test for it

[12:10] <Limbic_Region> but then again - I have wiped out my build and starting from scratch

[12:10] <Juerd> Limbic_Region: No, it only works for arrays called @a ;)

[12:10] <nothingmuch> eh?

[12:10] <Limbic_Region> my @a = 1..5; for @a { $_ = 2 }; @a.say; # would be enough to test/verify for me

[12:13] <luqui>  there is a test for that, I believe

[12:13] <luqui> t/statement/for.t, four from the end or so?

[12:13] <Limbic_Region> I will look as soon as the compile is done

[12:13] <Limbic_Region> my guess is that I have found another bug

[12:13] <nothingmuch> why is it just for @a?

[12:13] <Limbic_Region> last worked too but not properly

[12:13] <luqui> I think that was a joke

[12:13] * Limbic_Region wonders if nothingmuch missed the smiley

[12:13] <nothingmuch> ah

[12:14] <nothingmuch> yes i did

[12:14] * nothingmuch was panicking for a second there

[12:15] <Limbic_Region> so if sub foo ( *@bar is rw ) { for @bar { $_ = 2 } @bar.say } foo( 2, 3, 5); # doesn't work - it is a bug?

[12:15] <jabbot> pugs - 2619 - Fixed some comments that were confusing 

[12:16] * Juerd grins

[12:16] <Juerd> nothingmuch: Yes, it was a joke :)

[12:17] <Juerd> Limbic_Region: Depends on your definition of "work"

[12:17] <Juerd> Limbic_Region: It shouldn't work as in assign 2 to any of 2, 3, 5, becuase literals are read only.

[12:18] <Limbic_Region> err - that was for the sake of brevity

[12:18] <Limbic_Region> imagine that foo( @list ) was what I had really said

[12:18] <Limbic_Region> and @list = (2, 3, 5)

[12:20] * Limbic_Region is nearly finished with the compile now

[12:25] <nothingmuch> Limbic_Region: look at http://pugs.kwiki.org/?SmokedPugs if you need Q&D results

[12:25] <nothingmuch> you can browse the test files themselves

[12:25] <nothingmuch> http://nothingmuch.woobling.org/pugs_test_status/ <-- t/statements/for.t fails two subtests

[12:25] <nothingmuch> s/two/three/

[12:26] <nothingmuch> that run is from around 20 minutes ago

[12:26] <nothingmuch> unsurpriisingly these are the is rw tests (mouse over the red boxes)

[12:27] <Limbic_Region> nothingmuch - it isn't a matter of not working under the right conditions

[12:27] <Limbic_Region> I think I found a bug in which it doesn't work when it should

[12:27] * Limbic_Region is building a test case now

[12:28] <nothingmuch> for @list_s -> { $_++ }; <-- does seem to work, btw

[12:29] <nothingmuch> and in your example i think it shouldn't work

[12:29] <nothingmuch> because it can't is rw what is constant

[12:29] <Limbic_Region> nothingmuch - they aren't constants

[12:29] <Limbic_Region> again, that was for brevity

[12:29] <Limbic_Region> the actual code sticks them in an array that is modifiable

[12:29] <nothingmuch> foo(1, 2, 3); # not constants?

[12:30] <nothingmuch> ah

[12:30] <nothingmuch> why are you splatting the array?

[12:30] <Limbic_Region> [08:22] <Limbic_Region> err - that was for the sake of brevity

[12:30] <Limbic_Region> [08:22] <Limbic_Region> imagine that foo( @list ) was what I had really said

[12:30] <Limbic_Region> [08:22] <Limbic_Region> and @list = (2, 3, 5)

[12:30] <nothingmuch> sorry, i'm having trouble concentrating =P

[12:30] <Limbic_Region> hang on - I am almost finished

[12:30] <Limbic_Region> ok - so the trouble appears to be with splatting the array

[12:31] * nothingmuch 's train of thought looks more like a train accident, things splatterred all over

[12:31] <Limbic_Region> perlbot nopaste

[12:31] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[12:31] <nothingmuch> say 'sub foo (@bar is rw) { }';

[12:31] <nothingmuch> btw, if you like, try the CLI

[12:32] <nothingmuch> i couldn't get used to it

[12:32] <nothingmuch> but maybe i should try again

[12:32] <pasteling> "Limbic_Region" at 69.250.48.119 pasted "Example of working and broken code" (22 lines, 290B) at http://sial.org/pbot/9837

[12:33] <Limbic_Region> so @bar is rw for the parameter definition works

[12:33] <nothingmuch> i don't think that's a bug

[12:33] <Limbic_Region> but *@bar is rw doesn't

[12:33] <Limbic_Region> and neither do I

[12:33] <Limbic_Region> now

[12:33] <nothingmuch> so add a test making sure it never works ;-)

[12:33] <nothingmuch> no sense in not using what you wrote

[12:33] <Limbic_Region> it took finding the smallest test case I could before the real issue identified itself

[12:34] <nothingmuch> especially since it's a very clear disambiguation of behavior

[12:34] * Limbic_Region is more interested in getting the code he was trying to write working first

[12:34] <nothingmuch> put it the sub parameter tests

[12:34] <nothingmuch> what were you trying to write?

[12:34] <Limbic_Region> an infinite lazy list

[12:35] <Limbic_Region> translation of a p5 piece of code 

[12:35] <Limbic_Region> needed for @foo -> $_ is rw { ... } first

[12:35] <Limbic_Region> saw that it got added

[12:35] <Limbic_Region> went to work

[12:35] <Limbic_Region> had same problem

[12:35] <Limbic_Region> got confused

[12:35] <nothingmuch> that works

[12:35] <Limbic_Region> the rest as they say is history

[12:38] <Limbic_Region> wow - it doesn't blow up now

[12:39] <Limbic_Region> it doesn't give the correct results, but it doesn't blow up

[12:57] <Limbic_Region> yay - it works

[12:58] <pasteling> "Limbic_Region" at 69.250.48.119 pasted "Infinite Lazy List" (23 lines, 588B) at http://sial.org/pbot/9838

[12:59] * Limbic_Region wanders off to eat some breakfast and will return to check in a test and an example

[13:02] <Shillo> Hullo!

[13:03] <shapr> bok Shillo 

[13:04] <shapr> autrijus: Hey, to which address should I forward the SPJ email?

[13:05] <Limbic_Region> nothingmuch ping

[13:08] <nothingmuch> pong

[13:08] <Limbic_Region> WRT to writing a test for failure

[13:08] <Limbic_Region> it is currently a parse fail

[13:09] <Limbic_Region> not sure how to construct a test that says "this shouldn't work"

[13:13] <Limbic_Region> any ideas?

[13:15] <jabbot> pugs - 2620 - Added infinite lazy list example

[13:16] <Limbic_Region> nothingmuch - if you think of how to add such a test, the example is still at http://sial.org/pbot/9837

[13:24] <Limbic_Region> http://perlmonks.org/?node_id=453215 # post about latest example

[13:38] <nothingmuch> sorry, i had to go do what i write down in the MS proj server as "internal support"

[13:39] <nothingmuch> what we normally do (see t/README) is comment that stuff out

[13:39] <nothingmuch> and then do fail("parse error", :todo), or maybe without the todo

[13:41] <Limbic_Region> nothingmuch - really - be my guess

[13:41] <Limbic_Region> errr guest even

[13:42] <gaal|work> rehi # internet blackouts make me jitter

[13:45] <nothingmuch> gaal|work: whats the current status quo of parsefails in tests?

[13:45] <nothingmuch> block comment + fail("parsefail")?

[13:45] <gaal|work> i think so, yes

[13:46] <nothingmuch> Limbic_Region: did you comit a broken test? i can fix it if you like

[13:47] <Limbic_Region> no 

[13:47] <Limbic_Region> I didn't commit at all

[13:47] <nothingmuch> so please do =)

[13:47] <Limbic_Region> because I didn't know how to say "this test should break"

[13:48] <Limbic_Region> and would just soon learn from example

[13:48] <Limbic_Region>  http://sial.org/pbot/9837

[13:48] <nothingmuch> Limbic_Region: make it into a test first

[13:48] <nothingmuch> is(@foo, @expected);

[13:48] <nothingmuch> ...

[13:48] <nothingmuch> one that doesn't even compile

[13:48] <nothingmuch> (use Test, plan x

[13:49] <Limbic_Region> you are almost as bad as stevan - you know that?

[13:49] <nothingmuch> then comit it, and we'll see what we can do about cleanup

[13:49] <Limbic_Region> alright alright

[13:49] <nothingmuch> hehe

[13:49] <nothingmuch> stevan and I think alike for the most part, i guess

[13:51] <stevan> hey, you guys talking about me?

[13:51] <nothingmuch> yeah, we were saying stuff about your mother

[13:51] <nothingmuch> but we took care to [off] that so it won't be logged

[13:52] <stevan> ok

[13:52] <stevan> good

[13:52] <stevan> mom is sensitive about people talking about about her on IRC :P

[13:53] <nothingmuch> there's a nice #bash quip about that

[13:53] <nothingmuch> =)

[13:54] <pasteling> "Limbic_Region" at 69.250.48.119 pasted "splatted parameters shouldn't be rw test for nothingmuch" (22 lines, 338B) at http://sial.org/pbot/9839

[13:55] <Limbic_Region> nothingmuch - there ya go

[13:55] <Limbic_Region> notice the 'Some Failure'

[13:55] <Limbic_Region> maybe it should even be in an eval_is() ?

[13:56] <nothingmuch> one second

[13:57] * Limbic_Region counts to at least 60

[13:58] <nothingmuch> metaphorical second please

[13:59] <drbean> Pugs.Parser is taking a long time to compile

[13:59] <Limbic_Region> drbean - if you want it to go faster, make unoptimized

[13:59] <Limbic_Region> optimized is the default build now - which takes longer

[14:00] <drbean> How long is long?

[14:01] <nothingmuch> drbean: on my ppc g4 around 10 mins

[14:01] <Limbic_Region> 15 on my 1.5ghz pentium with 512mb of ram

[14:02] <nothingmuch> ppc g4 = 1ghz (dual, but not that it matters when compiling), 1.25gb ram

[14:02] <Limbic_Region> hmmm

[14:02] <nothingmuch> okay, i'm with you LR

[14:02] <Limbic_Region> I should have mentioned that 15 minutes is for a 100% fresh build

[14:02] <nothingmuch> sorry, new sysadmin needed hand holding

[14:02] <nothingmuch> i think splatted + rw does not make sense at all

[14:02] <Limbic_Region> not just Pugs.Parser

[14:02] <nothingmuch> (same)

[14:02] <Limbic_Region> well, that's what the test says and does

[14:02] <nothingmuch> what kind of error does that file give you?

[14:03] <nothingmuch> i mean it should be a parse error, maybe

[14:03] <Limbic_Region> but not sure how to properly capture that

[14:03] <nothingmuch> in the future

[14:03] <nothingmuch> i would make it several parts

[14:03] <nothingmuch> let me try a bit

[14:04] <Limbic_Region> I was thinking it should be a catchable error that could be caught with eval

[14:05] <Limbic_Region> and that we would just need to check $@ (or whatever it is now)

[14:05] <Limbic_Region> but since we want to write a test before that functionality exists - not sure how it should look

[14:05] * Limbic_Region wanders off to put some clothes on

[14:06] <autrijus> hi.

[14:06] <autrijus> I bring you... eval_yaml().

[14:06] <nothingmuch> there's dies_ok, but that's for code refs

[14:06] <nothingmuch> autrijus++

[14:06] <autrijus> committing.

[14:07] <autrijus> done as r2621.

[14:07] <skew> autrijus: where is the class stuff for Context.hs specified?

[14:07] <nothingmuch> Limbic_Region: i can whip you up a dies ok for eval string... would that be good enough?

[14:08] <autrijus> skew: S06

[14:08] <Limbic_Region> nothingmuch - haven't got my pants on yet

[14:08] <Limbic_Region> explain to autrijus real quick 

[14:08] <Limbic_Region> come up with a consensus

[14:08] <Limbic_Region> and I will commit the test

[14:09] <nothingmuch> Limbic_Region: ?

[14:10] <Limbic_Region> about how to represent a test that should fail but with behavior we aren't sure of yet

[14:11] <Limbic_Region> or will the dies_ok not care about the string

[14:11] <nothingmuch> dum dee dum

[14:11] * Limbic_Region just needs an example

[14:11] <autrijus> so, anyone up for svn up to r2622

[14:11] <autrijus> and see if eval_yaml indeed works?

[14:12] <autrijus> the .yaml() emitter interface is easy too

[14:14] <autrijus> Limbic_Region: you have a curious habit of writing

[14:14] <autrijus> sub { ... }

[14:14] <autrijus> where

[14:14] <autrijus> { ... }

[14:14] <autrijus> will suffice and a bit more lightweight

[14:14] <Limbic_Region> autrijus - not curious - expected

[14:14] <Limbic_Region> I start with the p5 code

[14:14] <autrijus> ahh.

[14:14] <autrijus> that explains

[14:14] <Limbic_Region> and only change those things I know will break otherwise

[14:14] <Limbic_Region> feel free to change the example

[14:15] <Limbic_Region> I will change the Monastery post

[14:15] * Limbic_Region has finished dressing now

[14:15] <jabbot> pugs - 2621 - * `eval_yaml()` support.

[14:15] <jabbot> pugs - 2622 - * fix build.

[14:16] <shapr> "Actually, we're rather impressed at the sophistication of the programming techniques that Autrijus and you and the other Pugs folk are deploying.  Subcontinuations, GADTs, what next?" -- SPJ

[14:16] <Limbic_Region> autrijus - actually - dropping sub from the place where I think you mean breaks the code

[14:16] <Limbic_Region> my $by_n = sub { my ($n, $k) = (shift(@_), 0); return sub { @_[0] ?? $k += $n :: $k } };

[14:17] <Limbic_Region> dropping either "sub" breaks the code autrijus

[14:17] <autrijus> woot, eval_yaml(slurp("META.yml")) works

[14:17] <Limbic_Region> err - no

[14:17] <autrijus> shapr: wow?

[14:17] <autrijus> STMs of course :)

[14:17] <Limbic_Region> dropping the first one does

[14:17] <shapr> autrijus: yes, I thought about STM as soon I read that.

[14:18] <autrijus> Limbic_Region: yeah, because a block is not a proper sub

[14:18] <autrijus> hrm.

[14:18] <autrijus> wait, that makes no sense.

[14:18] * autrijus needs food to think coherently

[14:19] * shapr needs sleep to think coherently

[14:19] <shapr> Too bad it's not working.

[14:19] <elmex> the parrot backend of pugscc is experimental i guess?

[14:19] <autrijus> shapr: fwd me that mail? :)

[14:19] <autrijus> elmex: all of pugs is experimental

[14:19] <shapr> Sure, which address?

[14:19] <autrijus> but yes, --parrot doubly so

[14:19] <elmex> ;)

[14:19] <autrijus> shapr: autrijus at autrijus dot org

[14:19] <elmex> autrijus: ;)

[14:19] <shapr> ok

[14:19] <Limbic_Region> nothingmuch - I am afraid I am almost out of tuits this morning - need to go pick up my Dad from the airport RSN

[14:19] <autrijus> elmex: helps welcome -- it's in src/Compile/Parrot.hs

[14:20] <elmex> autrijus: my knowledge in imc/pasm is even less than in haskell

[14:20] <elmex> (heck, i know more MIXAL than IMC ;)

[14:21] <nothingmuch> Limbic_Region: okay then, i'll commit something partial

[14:21] <nothingmuch> or you can commit, and i can edit

[14:21] <autrijus> elmex: it's quite easy to learn actually :)

[14:21] <elmex> autrijus: i guess so

[14:21] <autrijus> imc is a sane assembly language

[14:21] <autrijus> as assembly goes

[14:23] <Limbic_Region> nothingmuch - I will make same deal with you as I did with stevan

[14:24] <nothingmuch> #!/usr/bin/pugs

[14:24] <nothingmuch> use v6;

[14:24] <Limbic_Region> check in http://sial.org/pbot/9839 however it needs to be to minimally do the right thing

[14:24] <nothingmuch> use Test;

[14:24] <nothingmuch> =kwid

[14:24] <nothingmuch> Splatted parameters shouldn't be rw even if stated as such

[14:24] <nothingmuch> =cut

[14:24] <nothingmuch> plan 2;

[14:24] <nothingmuch> # test splatted parameter for rw ability

[14:24] <nothingmuch> eval '

[14:24] <Limbic_Region> I will follow it up with investigation

[14:24] <nothingmuch>     sub should_fail ( *@list is rw ) {

[14:24] <nothingmuch>         @list[0] = 'failure expected'; 

[14:24] <nothingmuch>     }

[14:24] <nothingmuch>     my @test = 1..5;

[14:24] <nothingmuch> ';

[14:24] <nothingmuch> ok(defined($!), "trying to use an 'is rw' splat doesn't work out");

[14:24] <nothingmuch> eval '

[14:24] <nothingmuch> 	sub should_fail (*@list is rw) { }

[14:24] <nothingmuch> ';

[14:24] <nothingmuch> ok(defined($1), "trying to define an 'is rw' splat doesn't work either");

[14:24] <nothingmuch> shyte, sorry

[14:24] * Limbic_Region wonders why nothingmuch is pasting everything I nopasted

[14:24] <nothingmuch> i meant that to be: http://sial.org/pbot/9840

[14:24] <nothingmuch> nothingmuch--

[14:25] <nothingmuch> that's not what you nopasted, that's what I nopasted, and then also pasted

[14:25] <Limbic_Region> ahhh

[14:25] <Limbic_Region> ok - so check that in and I will follow up

[14:25] <nothingmuch> righty-o

[14:25] <nothingmuch> how should we call the test?

[14:25] <Limbic_Region> autrijus - I will also follow up with you about why 1 "sub" can be dropped but not the other

[14:25] <Limbic_Region> s/how/what/

[14:25] <Limbic_Region> splat_rw.t

[14:27] <nothingmuch> our internet is dying, look at all the packets that we send

[14:27] * nothingmuch looks for formaldehyde

[14:28] * shapr finds some informaldehyde

[14:28] <shapr> I guess that's when formaldehyde dresses down.

[14:31] <nothingmuch> Limbic_Region: r2623

[14:31] <nothingmuch> it has one fail

[14:32] <Limbic_Region> nothingmuch - I have about 10 minutes before I need to head to the airport which isn't enough time

[14:32] <Limbic_Region> will look at it tomorrow though

[14:32] <Limbic_Region> thanks

[14:32] <nothingmuch> it's just FYI, there's not much else to do for that test

[14:32] <nothingmuch> except maybe do a dies_ok on strings and refactor it to use it

[14:35] <jabbot> pugs - 2623 - Add limbic_regions' test with some modif

[14:54] *** wilx` is now known as wilx

[15:08] <gaal|work> yaml serializes perl5 regexps

[15:09] <gaal|work> it calls them perl/regexp

[15:09] <gaal|work> rather, !perl/regexp

[15:16] <castaway> seen theorbtwo

[15:16] <jabbot> castaway: theorbtwo was seen 18 hours 10 minutes 19 seconds ago

[15:19] <autrijus> hm.

[15:19] <autrijus> somebody wrote me to say that his sieve.p6 is too slow.

[15:19] <autrijus> running it on my computer yields 25s real time

[15:19] <autrijus> so I tweaked Types.Array a bit.

[15:20] <autrijus> now it runs in 5s.

[15:20] <autrijus> about to commit ;)

[15:21] <castaway> *g*

[15:21] <wilx> Diabolous.

[15:21] <shapr> haha

[15:22] <autrijus> but more importantly, it's now O(n) instead of O(n**2).

[15:25] <stevan> autrijus++ 

[15:26] <autrijus> tests++ # caught a implementation glitch

[15:26] <stevan> speed++ # moves me that much closer to ditching perl5 :)

[15:27] <autrijus> stevan: you saw we have eval_yaml now?

[15:27] <stevan> yes I did

[15:28] <autrijus> I'm quite excited. :) that moves me much closer to ditch perl5 too.

[15:28] <stevan> I wish I could test/play with it, but $work has been killing me lately

[15:28] <stevan> BTW- for the :todo<attr> idea

[15:28] <stevan> I thought maybe 3 levels

[15:28] <stevan> :todo<bug>

[15:28] <stevan> :todo<feature>

[15:28] <stevan> :todo<parsefail>

[15:28] <stevan> can you think of any more?

[15:29] <shapr> 9r 9r, what's your 10-20?

[15:29] <autrijus> probably that's enough

[15:29] <ninereasons> hi shapr :_)

[15:29] <stevan> maybe I should talkt o chromatic about this too?

[15:29] <autrijus> hardfail too

[15:29] * shapr waves a subcontinuation

[15:29] <autrijus> I have an idea

[15:29] <stevan> integrate into Test::Builder

[15:29] <autrijus> if it's :todo<hardfail>

[15:30] <autrijus> then we don't evaluate the condition at all

[15:30] <stevan> yes

[15:30] <autrijus> ok(core_dump(), :todo<hardfail>);

[15:30] <stevan> hardfail == uncatchable in pugs?

[15:30] <autrijus> yeah

[15:30] <stevan> ok

[15:30] <stevan> but parsable

[15:30] <autrijus> but parsable

[15:30] <stevan> :)

[15:30] <autrijus> you can implement that using the "is lazy" trait.

[15:31] <stevan> is that available ?

[15:31] <autrijus> sure

[15:31] <stevan> cool

[15:31] <stevan> ok($cond is lazy, ...

[15:31] <stevan> then how do I un-lazy-ify it?

[15:32] <autrijus> pugs> sub cond (Bool $cond, $true is lazy, $false is lazy) { $cond ?? $true :: $false }

[15:32] <autrijus> undef

[15:32] <autrijus> pugs> cond(1, 2, die(3))

[15:32] <autrijus> 2

[15:32] <autrijus> "is lazy" is param trait

[15:32] <stevan> very cool

[15:32] <stevan> so if I dont ask for it, it will never evaluate

[15:32] <autrijus> exactly.

[15:32] <autrijus> and you don't need to force it

[15:32] <stevan> *sniff* I love perl 6 

[15:32] <autrijus> it will just evaluate when needed

[15:33] <autrijus> I think @larry wants to rename it

[15:33] <autrijus> "is delayed" or something

[15:33] <autrijus> but anyway, the functionality is there

[15:33] <stevan> excellent

[15:33] <stevan> I will work on it after $work tonight 

[15:33] <autrijus> stevan++

[15:33] <stevan> autrijus++ 

[15:33] <shapr> C--

[15:34] <stevan> Pascal--

[15:34] <autrijus> C--++

[15:34] * shapr laughs

[15:34] <stevan> pcode++ # bootstraping rules

[15:34] <gaal|work> say, i was looking for a list of platforms parrot currently builds on. i couldn't find it :)

[15:34] <gaal|work> any idea where it's at?

[15:35] <jabbot> pugs - 2624 - * switch IArray implementation to IntMap

[15:39] <ninereasons> "is delayed" sounds less virtuous than "is lazy"

[15:39] <gaal|work> yeah, and "is lazy" makes you wonder what "is impatient" does.

[15:40] <castaway> heh

[15:41] <stevan> "lazy evaluation" is well known terminology I think

[15:41] <stevan> but hey,.. I dont design the things I just write tests for 'em 

[15:41] <shapr> non-strict vs strict

[15:42] <gaal|work> my $programmer is lazy is impatient is hubristik;

[15:42] <gaal|work> tic

[15:43] <stevan> my $programmer is delayed;

[15:43] <ninereasons> that makes me wonder if traits are additive

[15:43] <stevan> or junctive

[15:43] <shapr> My computer is a pile of junc!

[15:43] <stevan> my $programmer is lazy & impatient & hubristik

[15:44] <stevan> my $project is cheap | fast | good;

[15:44] <stevan> $project.pick()

[15:44] <gaal|work> My hovercraft is full of eels

[15:44] <gaal|work> it's pick two, no?

[15:44] <stevan> $project.pick()

[15:45] <stevan> of course you might get the same one :)

[15:45] <gaal|work> my smoke is insanely fast

[15:45] <gaal|work> must not be very good or cheap then

[15:45] <jabbot> pugs - 2625 - * eval_yaml now takes and emits UTF8 str

[15:45] <jabbot> pugs - 2626 - * preliminary checkin for ChangeLog lest

[15:54] <gaal|work> http://forum2.org/gaal/pugs/smoke-cygwin.html # looks like no concurrency problems now

[15:55] <jabbot> pugs - 2627 - * much faster pop/push implementation

[15:58] <nothingmuch> drop your panties sir william, i cannot wait till lunch time

[16:00] <gaal|work> i have a better idea for fixing the pugsrun/ concurency issues! expose open pipe already. hackage tonight.

[16:01] <gaal|work> or maybe that complicates the tests too much? what do you guys tihnk?

[16:01] <gaal|work> ie adds another fallible factor

[16:07] <stevan> gaal|work: how do I get the concurrency working?

[16:08] <gaal|work> env PUGS_TESTS_CONCURRENT=7 make smoke

[16:08] <gaal|work> you may want to use a lower value of 7 though.

[16:10] <gaal|work> home! bye.

[16:10] <nothingmuch> maybe we can buy CPU hours from that sun über cluster

[16:10] <nothingmuch> PUGS_TESTS_CONCURRENT=30

[16:11] <nothingmuch> they charge $1 per cpu hour

[16:11] <nothingmuch> perhaps we can get a charitable discount

[16:11] * nothingmuch goes home too

[16:12] <autrijus> gaal_: I think go for it.

[16:16] <autrijus> hey Corion.

[16:17] * Corion bows to autrijus-sama

[16:18] * autrijus ponders what to use the builtin yaml support for

[16:18] <autrijus> I also wonder if yaml emitting is important.

[16:18] <autrijus> $obj.yaml

[16:18] <PerlJam> autrijus: my gut says that it is or will soon be.

[16:19] <Odin-LAP> It'd be cool, at least.

[16:19] <Corion> autrijus: Please fix YAML so that newlines at the end of file don't break the import :)

[16:20] <Corion> autrijus: (or missing newlines, I forget which breaks YAML)

[16:20] <autrijus> Corion: try it yourself?

[16:20] <Corion> (Perl5 YAML, that is)

[16:20] <Corion> autrijus: I thought there is some holy spec to YAML?

[16:20] <autrijus> er, I mean

[16:20] <autrijus> eval_yaml()

[16:20] <autrijus> in pugs.

[16:20] <autrijus> it's available now

[16:20] <autrijus> only supports strings, arrays and hashes

[16:20] <autrijus> no pairs or native int yet

[16:20] <autrijus> but it's a start

[16:21] <Corion> autrijus: Supporting much more is overkill/useless anyway :)

[16:27] <autrijus> I think the newline bug is solved 

[16:27] <autrijus> in pugs

[16:27] <autrijus> or rather, in syck

[16:27] <autrijus> I wonder why we don't switch to syck for perl5 anyway.

[16:27] <autrijus> it has both parsing and emitting capabilities.

[16:28] <autrijus> and it will ensure interop with php ruby python ocaml haskell :)

[16:28] <autrijus> or and objc.

[16:28] <autrijus> s/or/oh/

[17:06] <autrijus> committing PGE as part of Pugs tree.

[17:06] <shapr> PGE?

[17:07] <autrijus> perl 6 rules parser thing.

[17:07] <theorbtwo> The Perl6 Rules Engine.

[17:07] <shapr> ohh

[17:08] <autrijus> lifting the :P5 requirement on Eval.hs

[17:08] <theorbtwo> autrijus: What are you working on for the next week or so?

[17:08] <autrijus> theorbtwo: no idea. :-/

[17:08] <autrijus> I should do $work.

[17:08] * shapr too

[17:09] * autrijus praises pattern guards

[17:10] <theorbtwo> Just wondering -- it sounds like you're going to be doing p6 rules, but I think more people are wanting objects.

[17:10] <theorbtwo> Hm, I can see that a p6 rules implementation might bring us closer to the point where we can start folding ourselves over to selfhosting.

[17:10] <autrijus> er, I'm not doing p6 rules :)

[17:11] <autrijus> I'm just committing PGE in the tree.

[17:11] <PerlJam> theorbtwo: autrijus won't be doing rules.  Pm is doing rules.

[17:11] <autrijus> yup.

[17:11] <autrijus> certain rumour says he'll deliver the promised revision

[17:11] <autrijus> in the next 8 hours.

[17:11] <theorbtwo> pmichaud is doing the glue too, or just the C bits?

[17:12] <PerlJam> theorbtwo: and you are correct.  Once pugs has perl6 rules, we are ready to start bootstrapping (unless someone can think of a showstopper that I can't)

[17:12] <autrijus> er.

[17:12] <autrijus> writing a compiler without using objects.

[17:12] <theorbtwo> Differing semantics between p6 rules and parsec?

[17:12] <theorbtwo> That too.

[17:12] <autrijus> not happy.

[17:12] <autrijus> so, objects still priority #1.

[17:14] <gaal_> rehi

[17:14] <PerlJam> autrijus: pmichaud also said that when he's done, he'll pop in here to give you guys a heads up.

[17:14] <theorbtwo> Allo, Gall of the Order of the Underscore.

[17:15] <gaal_> am i underscored? phew.

[17:15] *** gaal_ is now known as gaal

[17:15] <gaal> nickserv is bothering me again :(

[17:16] <theorbtwo> autrijus, is the theory to rewrite what we have into p6, or to write a haskell to p6 converter... that understands all the "interesting" features we're using, like GADT, TH, etc?

[17:17] <autrijus> theorbtwo: I think writing Grid -> PugsAST

[17:17] <autrijus> is the easiest rout.

[17:17] <autrijus> I mean Grin -> PugsAST

[17:17] <autrijus> and route.

[17:17] <PerlJam> "Grin"?

[17:17] <theorbtwo> Grin?

[17:17] <theorbtwo> Is this another name for Core?

[17:17] <autrijus> Grin is the intermediate code that JHC uses.

[17:17] <theorbtwo> Ah.

[17:17] <PerlJam> righto. 

[17:17] <obra> Is grin some weird smiley variant of ook?

[17:17] <autrijus> looks cleaner than Core

[17:18] <autrijus> alternatively

[17:18] <autrijus> Grin -> IMC

[17:18] <theorbtwo> Does jhc compile us?

[17:18] <autrijus> is possible, but then it won't be "bootstrapping"

[17:18] <autrijus> it will just be parrot-hosting

[17:18] <PerlJam> I was going to suggest that compiling haskell to PugsAST would be simpler than haskell to p6, but grin -> AST sounds even better

[17:19] <autrijus> theorbtwo: I don't know, not yet tried. jhc however supports lots of ghc extensions already

[17:19] <autrijus> and emits very fast code due to whole program analysis

[17:19] <autrijus> so in any case I think helping out jhc may prove more fruitful.

[17:19] <theorbtwo> Nod.

[17:19] <autrijus> but Core -> IMC or Core -> PugsAST isn't ruled out either.

[17:19] <autrijus> I still prefer -> PugsAST

[17:19] <autrijus> because then Pugs.Compile.Perl6 (aka deparse) can yield a p6 version of pugs.

[17:20] <shapr> I think grin is short for something like Graph Reduction Intermediate Notation

[17:20] <theorbtwo> Well, assuming we don't use features of PugsAST that cannot be expressed in p6...

[17:20] <theorbtwo> ...or create ways to express them.

[17:20] <autrijus> thing is, Grin is comparable in complexity with Pugs's Exp

[17:20] <PerlJam> autrijus: heh, do the same for p5 and obviate Larry's current work  ;-)

[17:20] <autrijus> that is, extremely simple

[17:20] <autrijus> PerlJam: based on PPI, or mandrake's Ocaml perl5 parser?

[17:21] <autrijus> because you know, doing it based on B::* is impossible without Larry's PPD work.

[17:21] <shapr> Grin - http://www.cs.chalmers.se/~boquist/ifl96-abstract.html from http://www.cs.chalmers.se/~boquist/ 

[17:21] <PerlJam> autrijus: yeah, and you'll need more annotation to get the exact source out that you put in as Larry has done with PPD

[17:22] <PerlJam> lots more annotation

[17:22] <autrijus> I sometimes wonder if Pugs should have Pugs.Compile.Grin.

[17:22] <autrijus> " Preliminary measurements look very promising: we are currently twice as fast as the Glasgow Haskell Compiler for some small programs. Our approach still gives us many opportunities for further optimisations (though yet unexplored)."

[17:22] <autrijus> PerlJam: you are welcome to do that or bribe people to do that :)

[17:22] <shapr> John also said a few days back that he found a paper that will likely solve even more of the speed issues of jhc.

[17:23] <autrijus> I think John is amazing.

[17:23] <shapr> Yeah, I agree.

[17:23] <shapr> Many people on both #haskell and #perl fall into that category.

[17:23] <shapr> er #perl6, I dunno #perl

[17:23] <autrijus> :)

[17:24] <PerlJam> shapr: Are you including yourself in that group? ;-)

[17:24] <shapr> I regularly amaze myself, both positively and negatively.

[17:24] <PerlJam> heh

[17:24] <autrijus> PGE segfaults on empty strings.

[17:25] <autrijus> I hope pmichaud solved that on his new release.

[17:25] <shapr> I like to hang out with people who know more than me, and can do more than me. I think it's a much faster way to improve than being a hermit.

[17:25] <PerlJam> autrijus: hopefully we'll find out later today

[17:25] <jabbot> pugs - 2628 - * Env is now constructed with MkEnv for 

[17:26] <obra> how old is the old release, autrijus?

[17:26] <autrijus> obra: several months

[17:26] <PerlJam> one of the cool things about pge-in-parrot is that we get unicode "for free"

[17:26] <autrijus> close to half a year or something

[17:26] <autrijus> ~very old

[17:26] * obra nods

[17:27] <theorbtwo> In pugs terms, that's dottering old age.

[17:27] <theorbtwo> OK, perhaps not quite.

[17:28] * theorbtwo wonders if there's a nice web view of svn log -v somewhere.

[17:29] <autrijus> theorbtwo: pugs.openfoundry.org

[17:29] <autrijus> click on "version control" table or something

[17:30] <autrijus> ok, PGE is now part of Pugs. watch this space to see if pmichaud would actually release something tomorrow :)

[17:30] * obra ponders poking gugod about designing a task-centric foundry interface

[17:30] <nothingmuch> evening

[17:31] <nothingmuch> how fast do we get rules? 2-3 days max? or are you planning on sleeping just a bit this week? ;-)

[17:31] <autrijus> also, I think a concrete PGE node representation in haskell will help

[17:31] <autrijus> because that will make a PgeExp based parser monad possible

[17:31] <autrijus> and someone can write a Parsec -> PgeExp engine.

[17:32] <autrijus> that will translate our existing Parsec primitives to Perl 6 Rules.

[17:32] <autrijus> that is not even very hard :)

[17:32] <autrijus> just port the .Prim and .Combinators.

[17:32] <autrijus> nothingmuch: no, it will take quite some time :)

[17:32] * nothingmuch thinks that could be a nice excercise

[17:32] <autrijus> certainly after objects.

[17:32] <autrijus> unless, of course, _you_ help :)

[17:32] <theorbtwo> Hm?  But parsec is smart infinite lookahead whereas perl6 rules are... um... not.

[17:32] <gaal> theorbtwo: <lj user=pugscode_svn>

[17:32] <autrijus> theorbtwo: actually they are isomorphic!

[17:33] <theorbtwo> Oooh, nifty?

[17:33] <autrijus> theorbtwo: the only difference being parsec commits by default, and p6rules tries by default.

[17:33] <autrijus> but that is a syntactic level difference.

[17:35] <shapr> What about arrow-style parsers? Any use here?

[17:35] <jabbot> pugs - 2629 - * PGE is now part of Pugs; :P5 restricti

[17:35] <jabbot> pugs - 2630 - * fix segfault

[17:37] <autrijus> not sure.

[17:40] * nothingmuch summons stevan

[17:49] <Corion> Ooops. Text.PGE is not included in the current build ?

[17:49] <Corion> (or should it be part of GHC ?)

[17:49] <pernod> Hi all.

[17:49] <nothingmuch> hola

[17:49] <pernod> Can anyone please tell me how I get make smoke to run on XP?

[17:50] <pernod> Mine says: "sorry, concurrency not supported on your platform"

[17:50] <pernod> Did I miss an Obvious Command Line Option?

[17:51] <gaal> don't set PUGS_TESTS_CONCURRENT

[17:51] <pernod> I don't :)

[17:51] <gaal> huh? looking.

[17:52] <pernod> c:\dev\fun\pugs>nmake smok

[17:52] <pernod> (+e)

[17:52] <gaal> oops, yes, a big. fixing.

[17:52] <Corion> gaal: Make the script smarter and force it to 1 if Win32 is detected maybe? :)

[17:52] <gaal> sure

[17:52] <autrijus> Corion: oops.

[17:52] <autrijus> added

[17:52] <Corion> ... this reminds me, I should really fix run_smoke.pl to use File::Spec instead of hardcoded ./pugs

[17:52] <gaal> (i did that at some point and must have moosed it up soemtime)

[17:53] <pernod> so "env PUGS_TESTS_CONCURRENT=1 nmake smoke" should work?

[17:53] <obra> is the build supposed to be broken right now?

[17:53] <autrijus> obra: svn up

[17:53] <obra> "Could not find module `Text.PGE'

[17:53] <obra> oh. am I on the wrong repository?

[17:54] * obra is on svn.openfoundry.org

[17:54] <obra> 2631

[17:54] <autrijus> no, that is the right one. r2632.

[17:54] <gaal> pernod, sec

[17:54] <obra> :P

[17:54] <pernod> No problem :)

[17:55] <autrijus> if tomorrow's PGE is what it claims to be, then I think full perl6 bootstrapping is definitely in sight this year.

[17:55] <jabbot> pugs - 2631 - * luqui noted that `for (@list): {block}

[17:55] <jabbot> pugs - 2632 - * Text.PGE

[17:56] <autrijus> (note: we don't need macros to bootstrap. :-))

[17:57] <gaal> pernod: svn up

[17:57] <pernod> (Ah. I'm on darcs ...)

[17:58] * pernod wanders off to install svn

[17:58] <theorbtwo> The darcs mirror doesn't update all that often, IIRC.

[17:58] <autrijus> there's a ~100sec lag.

[17:58] <pernod> Ok, no problem then :)

[17:59] <theorbtwo> Oh, not that bad.  I thought it mirrored at fixed times.

[17:59] <autrijus> if connection to svn.perl.org is slow though, as sometimes it, darcs will suffer a bit

[17:59] <autrijus> because I push to svn.perl.org first

[18:00] <theorbtwo> Hm, still lots of def w/o signature in the Lexer & Parser.

[18:00] * stevan runs off to fetch the package with his Haskell book in it :)

[18:01] <autrijus> theorbtwo: btw, work on the oo model needs a refactoring on the Val model

[18:01] <autrijus> currently everything but VRef, VOpaque, VError and VControl is "unboxed"

[18:01] <autrijus> which is Wrong

[18:01] <autrijus> because perl6 doesn't have unboxed handles

[18:01] <autrijus> (or unboxed "code")

[18:02] <autrijus> once that refactoring happens (i.e. use method calls for internal dispatch)

[18:02] <autrijus> OO is a matter of applying the metamodel and expose it to the syntax level

[18:02] <pernod> gaal: What's the revision number in question?

[18:03] <autrijus> but that refactoring is kind of hard... esp with the broken reference semantics we have

[18:03] <autrijus> to wit:

[18:03] <autrijus> my $x; $x = \$x;

[18:03] <autrijus> doesn't do what it should do.

[18:03] <autrijus> but again, I'm not sure if it doesn't infinite loop forever if invoked.

[18:03] <autrijus> my $x; $x = \$x; $x[0] = 1;

[18:03] <autrijus> this infinite loops. I thought it is a bug, so I "fixed" it

[18:03] <autrijus> but maybe it isn't a bug, it's a feature.

[18:03] <autrijus> anyone care to look up the bible and/or ask on p6l?

[18:04] <theorbtwo> BTW, that can be written as my $x=\$x; now; the scope for the new variable starts with the current statement, not the next one.

[18:05] <autrijus> yeah. that works in pugs too

[18:05] <theorbtwo> I don't see why $x[0]=1; would invoke the reference at all.

[18:05] <theorbtwo> Shouldn't it simply replace it?

[18:05] <autrijus> no.

[18:05] <jabbot> pugs - 2633 - graceful fallback on native win32

[18:06] <autrijus> my $y = (1); my $x = \$y; $x[0] = 1

[18:06] <autrijus> it needs to follow the reference

[18:06] <autrijus> my $y = (1); my $x = \\\\\$y; $x[0] = 1

[18:06] <autrijus> that too.

[18:06] <pasteling> "gaal" at 192.115.25.249 pasted "modest io proposal" (20 lines, 766B) at http://sial.org/pbot/9847

[18:07] <gaal> please comment. these two functions will use (the existing) Pugs::Internal::openFile and ::runInteractiveCommand internally, and the existing Prim open will be removed.

[18:07] <gaal> oh, also, we'll now have a way to open-pipe w/o using the shell.

[18:08] <gaal> also also, i am completely ignoring shell fd magic (dupes etc.)

[18:08] <gaal> i have no idea how to handle that :(

[18:09] <autrijus> looks sane.

[18:10] <theorbtwo> Looks sane to me.

[18:10] <autrijus> p6l it?

[18:10] <gaal> thanks. other than the pipes, i'll pick up the existing aliases (eg > == w and so on)

[18:10] <autrijus> (so Rod can include it)

[18:10] <obra> pugs appears 1/13th faster than when I tried it on friday

[18:10] <gaal> sure

[18:11] <theorbtwo> I'd handle dup as a method on an existing handle.

[18:11] <autrijus> obra: yeah, because the smoke test doesn't use much arrays.

[18:11] <autrijus> or rather, long arrays.

[18:11] <gaal> i want to implement it first though, so autrijus you can help with gluing it, so i can then remove the Prim open and fix all the tests :)

[18:12] <autrijus> you go ahead with Prim

[18:12] <autrijus> we'll see what we can do :)

[18:12] <gaal> if there's both a Prim open and a perl6 multi sub open, which gets called?

[18:13] <autrijus> eh?

[18:13] <gaal> (with no invocant)

[18:13] <autrijus> the Prim is merely dispached with the table below

[18:13] <autrijus> they are not really special

[18:13] <autrijus> and they are all multi subs underneath.

[18:14] <gaal> suppose i define, oh, multi sub time()

[18:14] <theorbtwo> gaal, I'd like to see an explicit encoding argument, with the default being "auto".

[18:14] <gaal> and somewhere do say time

[18:14] <theorbtwo> (Which notices a BOM if one is present, and defaults to ASCII if one is not.)

[18:14] <autrijus> er, I want perlIO layers :)

[18:15] <gaal> does pugs's haskell op0 time get called, or my p6 code?

[18:15] <gaal> yeah, i was afraid of that! :)

[18:15] <gaal> but you'

[18:15] <gaal> re right of course

[18:15] <gaal> layers oughta be in

[18:15] <gaal> i <3 IO::via::gzip autopop

[18:16] <theorbtwo> Do we need an explicit layers thing, and not just multiple classes that Does filehandle?

[18:18] <gaal> hmmm, should pipe() have encoding too? :/

[18:18] <gaal> it's three handles...

[18:18] <autrijus> gaal: try and see. flu is massacring my brain now

[18:18] <gaal> potentially

[18:18] <autrijus> so I really need to sleep. :)

[18:18] <theorbtwo> It should.

[18:18] <theorbtwo> Having just the one is probably OK for most purposes.

[18:19] <autrijus> journal up, btw.

[18:19] * autrijus waves &

[18:19] <theorbtwo> G'night.

[18:19] <gaal> feel well, autrijus

[18:20] <obra> night

[18:29] * pernod finally got the darcs synch

[18:29] <pernod> nmake smoke is ok. Thanks.

[18:30] <gaal> yay. thanks for the report :)

[18:30] <pernod> Is there something an aspiring lambda-camel can look into?

[18:31] <pernod> I'd like to try to contribute ... something.

[18:32] <castaway> look at the todo tests ?

[18:33] <pernod> Any specific areas that aren't too difficult to start with?

[18:33] * castaway has no idea

[18:33] <pernod> :)

[18:34] <gaal> pernod, another way to start is to port your favorite p5 module from cpan

[18:34] <theorbtwo> Adding missing prims was long considered an easy starter, but I think we mostly have them now.

[18:34] <gaal> as you go you might find missing features

[18:34] <gaal> then you have motivation to add them :)

[18:34] * pernod looks for Test::LectroTest

[18:36] <shapr> Oh, good choice.

[18:36] <pernod> Should be more than a little challenging ...

[18:49] * theorbtwo wonders if there's a better way to write Pugs.Rule.Char.CharParser from in src/Pugs/Lexer.hs (I can't find one).

[18:52] <gaal> to2, doesn't CharParser just work? see l 143

[18:52] <gaal> (i know that's a comment)

[18:52] <theorbtwo> Nope.

[18:52] <theorbtwo> Which is probably why it's a comment.

[18:53] <gaal> how does the compiler figure out the type though?

[18:53] <theorbtwo> --show-iface renders it as parens :: Pugs.Rule.Char.CharParser{1} st a -> Pugs.Rule.Char.CharParser{1} st a, but that doesn't work.

[19:00] <lightstep> you can import Pugs.Rule.Char (CharParser)

[19:23] <lightstep> what does the comment on line 429 in AST.hs mean?

[19:23] <lightstep>     | VList     VList -- Lists are lazy.

[19:23] <lightstep> that's that only non-strict constructor

[19:23] <lightstep> but VList is a lazy datatype anyway - so what does it matter?

[19:24] <theorbtwo> VList is a lazy datatype being modeled by a lazy datatype.

[19:24] <theorbtwo> The rest are strict datatypes being modeled by strict datatypes.

[19:24] <theorbtwo> (That's how I interpreted it, at least.)

[19:25] <lightstep> but type VList = [Val]

[19:25] <lightstep> a lazy list of values

[19:25] <lightstep> that doesn't mean that VList (the function) shouldn't be strict

[19:25] <theorbtwo> Donno.

[19:29] <autrijus> mind if I paste a 11 line poem? :)

[19:29] <gaal> :)

[19:29] <shapr> go for it!

[19:29] <pjcj> written in perl6?

[19:29] <autrijus> for $*Larry -> $Elbereth {

[19:29] <autrijus>     our Ship $pugs .= new(:of<mithril elven-glass>);

[19:29] <autrijus>     given $pugs {

[19:29] <autrijus>         $.prow does Shine;

[19:29] <autrijus>         Silver $.mast but none(Oar::Shaven, Sail);

[19:29] <autrijus>         Light  $.lantern := $*Silmaril;

[19:29] <autrijus>         Bright $.banner  := Flame.bless;

[19:29] <autrijus>         when $Elbereth.gleam {

[19:29] <autrijus>             .sail;

[19:29] <autrijus>         }

[19:29] <autrijus>     }

[19:29] <autrijus> }

[19:29] <autrijus> (see src/Main.hs)

[19:30] <autrijus> there's lots of room for improvement :)

[19:30] * clkao giggles at autrijus 

[19:30] <autrijus> I wonder where should I commit it, though :)

[19:31] <autrijus> PerlMonks, for sure.

[19:32] <autrijus> I tweaked it slightly... submitting to perlmonks

[19:32] <pjcj> examples/poetry ?

[19:33] <autrijus> mayybe.

[19:33] <autrijus> sure.

[19:33] <theorbtwo> Wern't you going to bed?

[19:35] <jabbot> pugs - 2634 - minor cosmetic changes

[19:38] <autrijus> true. :)

[19:38] * autrijus goes to sleep.

[19:38] <autrijus> r2635.

[19:38] <autrijus> &

[19:38] <lightstep> i wonder if there are rss subscribers for pugs updates

[19:39] <shapr> There's autrijus' journal.

[19:39] <gaal> lightstep, <lj user=pugscode_svn>

[19:39] <theorbtwo> livejournal.com/users/pugscode_svn, that is.

[19:39] <gaal> that's referentially transparent (for me at least :)

[19:40] <pasteling> "ninereasons" at 199.107.164.126 pasted "bug accessing pairs in subroutines" (16 lines, 391B) at http://sial.org/pbot/9849

[19:40] <theorbtwo> Thought I'd expand for those not in the know of the pointless style of LJ.

[19:40] <gaal> point free, i beg you :)

[19:42] <theorbtwo> @pointless foo = \x a b -> b a

[19:43] <theorbtwo> Oh, lambdabot isn't here.

[19:45] <jabbot> pugs - 2635 - * hopefully, the first Perl 6 poem.

[19:45] <jabbot> pugs - 2636 - add tests to illustrate a bug, accessing

[19:46] <theorbtwo> @botsnack

[19:46] <lambdabot> Unknown command, try @listcommands.

[19:47] <mauke> @type flip id

[19:47] <lambdabot> flip id :: forall b c. b -> (b -> c) -> c

[19:48] <mauke> yay

[19:48] <lightstep> when describing swing, one usually says (flip ($)) instead of (flip id), to confuse the crowd

[19:50] <shapr> I think ($) is idiomatic in Haskell.

[19:50] <shapr> Of course, so is id

[19:51] <ninereasons> @pointless

[19:51] <lambdabot> (line 1, column 1):

[19:51] <lambdabot> unexpected end of input

[19:51] <lambdabot> expecting white space, natural, identifier, lambda abstraction

[19:51] <lambdabot> or expression

[19:51] * theorbtwo wonders what a natural is.

[19:52] <theorbtwo> @type (->)

[19:52] <lambdabot> bzzt

[19:52] <lightstep> @kind (->)

[19:52] <lambdabot> (->) :: ?? -> ? -> *

[19:52] <ninereasons> @pointless 2+2

[19:52] <lambdabot> 4

[19:55] <jabbot> pugs - 2637 - * add "use v6;"

[19:59] * theorbtwo wonders why sometimes --show-iface shows a [Char] and sometimes a String.

[20:13] *** integral is now known as spelugx

[20:25] <jabbot> pugs - 2638 - Pugs.Lexer: Signatures.

[20:29] <metaperl_> $val = $_( 'next' ) if $val <= $last;

[20:29] <metaperl_> what does $_('next') do?

[20:30] <gaal> what does $_ contain?

[20:30] <gaal> if if contains Code, this is a call.

[20:31] <metaperl_> I was looking at this: http://perlmonks.org/?node_id=453215

[20:31] <gaal> though, interesting:

[20:31] <pasteling> "gaal" at 192.115.25.249 pasted "say $_-less" (4 lines, 151B) at http://sial.org/pbot/9851

[20:32] <metaperl_> gaal, you know what?

[20:32] <gaal> it's the same thing as $_->('next') in p5

[20:33] <gaal> or

[20:33] <metaperl_> I think <> is used for named parameter

[20:33] <gaal> &$_('next')

[20:33] <metaperl_> there is no such thing in p5....

[20:33] <metaperl_> $_->('next') ... oh yeah

[20:33] <gaal> that was p5

[20:33] <gaal> both

[20:33] <metaperl_> where is the "." for a method call

[20:33] <gaal> <x y z> is p6 for qw/x y z/

[20:33] <gaal> it's optional in this case.

[20:34] <gaal> see also $next() in that example

[20:34] <gaal> you can spell that $next.() too if you prefer.

[20:35] <metaperl_> gaal, I meant that named parameters can be passed using a <> syntax: http://dev.perl.org/perl6/doc/design/syn/S06.html

[20:35] <gaal> what section are you linking to? that's a long doc.

[20:35] <metaperl_> Named parameters

[20:35] <metaperl_> search for that

[20:36] <metaperl_> i'm just making a comment that <> has two uses and I got confused... I see what you are doing

[20:36] <gaal> oh, :justify<right> ? yes, that's like saying justify => 'right'

[20:36] <gaal> also useful in hash lookups

[20:37] <metaperl_> I dont see the point in having both syntaxes do you?

[20:37] <stevan> metaperl_: I added to that perlmonks post of L~Rs

[20:37] <metaperl_> I think this is an example currying isn't it: ./pugs -e '$_={say};$_(<asdf>)'

[20:37] * metaperl_ checks perlmonks

[20:37] <gaal> %ENV<PUGS_TESTS_CONCURRENT>

[20:38] <stevan> $_(<next>) should work

[20:38] <gaal> sure it does

[20:38] <gaal> metaperl, it's just like having qw in p5.

[20:38] <gaal> you can do things like

[20:39] <gaal> use strict qw(refs)

[20:39] <Juerd> metaperl_: <> is qw, but can also be used for hash subscripting.

[20:39] <Juerd> metaperl_: Which makes it useful for :pair{'subscript'} syntax and &infix:{'operator'} syntax

[20:40] <Juerd> Which you can now spell as :key<value" and &infix:<operator>

[20:40] <Juerd> Which you can now spell as :key<value> and &infix:<operator>

[20:40] <Juerd> Saves a lot of typing.

[20:40] <Juerd> And %hash<key>

[20:40] <Juerd> Instead of %hash{'key'}

[20:40] <Juerd> The difference is greater even when you have multiple values

[20:40] <gaal> ...because %hash{key} no longer works.

[20:41] <stevan> metaperl_: I updated my perlmonks post to use $sub(<next>)

[20:41] <stevan> cause it just looks cooler :P

[20:41] <Juerd> %hash{'first', 'second', 'third'}, :import{'get', 'post', 'head'}, &postcircumfix:{'[', ']'}

[20:41] <Juerd> %hash<first second third>, :import<get post head>, &postcircumfix:<[ ]>

[20:41] <metaperl_> Juerd, can you explain :import<get post head>

[20:42] <metaperl_> %hash<first second third> looks like a hash slice

[20:42] <Juerd> metaperl_: It is equivalent to import => [ 'get', 'post', 'head' ]

[20:42] <Juerd> It *is* a hash slice! neat, huh?

[20:42] <Juerd> .

[20:42] <metaperl_> oh I see

[20:43] <metaperl_> that's pretty neat

[20:43] <Juerd> :paths< /tmp /var/tmp ~/tmp >

[20:44] <Juerd> In general, key => 'value' is preferred syntax when building hashes

[20:44] <gaal> ...and you can magically later do

[20:44] <gaal> for $paths -> $path { ... }

[20:44] <Juerd> And :key(value) or :key<value> is preferred syntax when supplying modifiers/adverbs.

[20:45] <Juerd> And, as an extra FREE bonus!!!!! (gratis gratis gratis), you get a free 1 for every bare :pair

[20:45] <metaperl_> one more thing: &postcircumfix:<[ ]> # the colons are starting to get me mixed up

[20:45] <Juerd> That is, if you write :pair, you get pair => 1

[20:45] <Juerd> metaperl_: A colon in a sub name indicates a special sub.

[20:45] <metaperl_> special in what way?

[20:45] <Juerd> metaperl_: In this case, it's the [] operator you use after an array.

[20:45] <Juerd> metaperl_: postcircumfix is not something you can define yourself - it's a preset category.

[20:45] <metaperl_> Juerd are you learning p6 from the synopses? I'm starting to feel behind

[20:46] <Juerd> For all post-circumfix operators

[20:46] <Juerd> metaperl_: No

[20:46] <Juerd> metaperl_: I learn it from p6l, synopses, and by having followed the As and Es from the very beginning.

[20:46] <Juerd> metaperl_: Also, I read books and articles about Perl 6

[20:47] * gaal needs sleep - see y'all later

[20:47] <metaperl_> gnite gaal

[20:47] <gaal> (Juerd, ACK your sensible post to p6l about open, I just wish there was a decision already :)

[20:47] <Juerd> I want write|w, read|r, pipe|p

[20:48] <Juerd> And bidi|rw

[20:48] <gaal> oh, that bit i don't knwo about, since that means changing sigs

[20:48] <Juerd> And if there's a +$mode, let it please accept constants like O_WRCREAT

[20:48] <gaal> starting to look like Getopt...

[20:49] <Juerd> gaal: Again, a decision on the way to define short names would be fun

[20:49] <gaal> so you're tempted to define :append excludes :rw, or thing slike that

[20:49] <Juerd> gaal: Yes

[20:49] <gaal> well, have a ball with that, but that may take a little longer to get done :)

[20:50] <Juerd> Although, of course, rw+append SHOULD be possible.

[20:50] <gaal> anyway, i'm off. tomorrow i'll ci a *basic* version of this.

[20:50] <Juerd> gaal: fail "mutually exclusive arguments" if $foo and $bar;

[20:50] <Juerd> Which can perhaps somehow be a compile time thing

[20:51] <gaal> Juerd, I believe that's called r+append, not rw+append

[20:51] <gaal> anyway, night :)   &

[20:51] <Juerd> sub open (...) will test { ... } returns IO::Handle { ... }

[20:51] <Juerd> gaal: I thought there was some subtle difference in the initial tell()

[20:53] <wolverian> will test?

[20:53] <Juerd> made up.

[20:53] <wolverian> ah. what does it do?

[20:54] <wolverian> (by the way. I completely agree with you on the :r/< issue on p6l, and I think your mails are well written. thanks for standing up for me!)

[20:57] *** spelugx is now known as integral

[21:06] * theorb is surprised to find that he is still connected on here.

[21:07] * shapr is mentally disconnected

[21:34] *** khisanth_ is now known as Khisanth

[21:44] <Shillo> Hullo, all!

[21:44] * Shillo dances the Upgrade Dance. :)

[21:47] <lightstep> what are temp-ex-output.3813.126  temp-ex-output.5125.19

[21:47] <lightstep> ?

[21:49] <theorbtw1> lightstep: No clue.  Where, and what do they appear to contain?

[21:49] <lightstep> they both contain \('Hello', 'Pugs')

[21:49] <lightstep> probably a local artifact

[21:50] <theorbtw1> Oh, possibly the output of an example, from the examples-testing framework?

[21:51] <lightstep> yes

[21:57] <Shillo> What exactly is yaml? Spammed me with tons of warnings during compile.

[21:58] <mauke> yaml ain't a markup language

[21:58] * Shillo just changed CPU, MB and GPU. And pugs (and compilers, for that matter) seem to have stopped crashing randomly. For now... still running tsts.

[22:00] <theorbtw1> (Previously, YAML was Yet Another Markup Language, but then some bright soul looked up the def. of markup language, and realized it wasn't.)

[22:01] * Shillo svnups, rebuilds...

[22:04] <Shillo> Whoa. This machine is *fast*

[22:08] <Shillo> And stable. Finally! :)

[22:08] <theorbtw1> ++

[22:09] * Shillo tests Morrowind Bootloader (the last time I changed MB, it wouldn't. Boot. Or load)

[22:09] <Shillo> Laters! :)

[22:10] <theorbtw1> G'luck.

[22:34] <Shillo> Windows actually survived the hardware change. Of course, there's this minor matter of drivers. I just don't feel like spending 2 hours on that. :)

[22:35] <Shillo> Anyhow... now I have a devel machine. Yay.

[22:35] <theorbtw1> Yey indeed.  They're handy things to have around when developing.

[22:36] <Shillo> theorbtw1: Esp. the kind that doesn't corrupt data when it overheats.

[22:36] * Shillo had the -other- kind.

[22:36] * Shillo has high hopes for this thing. :)

[22:36] <theorbtw1> What are the specs.

[22:37] <Shillo> Athlon64 3000+ (sock 939), EPOX Nforce4 Ultra MB, 1 gig DDR400, Gigabyte 6600GT video card.

[22:37] <theorbtw1> Nice.

[22:37] * Shillo plans to use it for time-wasters other than devel. :)

[22:38] <Juerd> open no longer defaulting to $_

[22:38] <Juerd> Can anyone guess why?

[22:39] <theorbtw1> gaal was changing the interface earlier.

[22:39] <Juerd> No, I'm talking about Larry's preference.

[22:39] <Juerd> It amazes me  # understatement

[22:39] <theorbtw1> Oh, I haven't checked p6l lately.

[22:39] * Juerd found it a shocking statement.

[22:40] <theorbtw1> I've been shocked a lot by p6l of late.

[22:40] <Juerd> I'm of the opinion that every operator that has a main argument should be able to default to $_.

[22:41] <Shillo> Hmm, say so on the list? :)

[22:41] <Juerd> I first want to know why Larry wants this.

[22:41] <Juerd> He must have his reasons for it

[22:41] <Shillo> Honestly, I can't remember ever using argless open (or wanting to), so I just don't care either way. :)

[22:41] <Shillo> Yeah.

[22:41] <Juerd> Shillo: That's because in Perl 5, open doesn't return a filehandle

[22:41] <Shillo> You asked him privately?

[22:42] <Juerd> No

[22:42] <Juerd> Why would I do anything privately? The list is there to *use*.

[22:42] <Shillo> Juerd: Duh. Right.

[22:42] * theorbtw1 wonders if he should start really follwoing p6l again.

[22:42] <Shillo> Oh, umm, I just thought it was somehow implied, but guess I misunderstood you.

[22:42] <Shillo> (about not asking privately)

[22:42] <Juerd> theorbtw1: There's a highly visible 'BTW' in your name now

[22:43] * Shillo <-- confuzzled agent of primal chaos, most of the time.

[22:43] <Juerd> theorbtw1: In Dutch, that's belasting op de toegevoegde waarde -- internationally known as VAT

[22:43] <Shillo> :)

[22:43] <Juerd> theorbtw1: This tax cost me 1500 euros the past 3 months :(

[22:43] <Juerd> And you remind me of that :(

[22:43] <theorbtw1> It really feels like Larry has started to abandon some "hard things possibe" for a little bit of "easy things possible".

[22:43] *** theorbtw1 is now known as theorbtwo

[22:43] <Juerd> Thanks :)

[22:43] * Shillo just shelled >100E of PDV right today. :(

[22:43] <Shillo> Croatia has 22%.

[22:44] <Juerd> PDV?

[22:44] <Juerd> We're at 10%

[22:44] <Shillo> Oh, sorry. 'what we call VAT here.

[22:44] <Juerd> eh

[22:44] <Juerd> 19%

[22:44] <Juerd> typo

[22:44] <Shillo> Hehehe!

[22:44] <shapr> 25% here

[22:44] <Juerd> And because I run a company, I pay tax collector.

[22:44] <Shillo> (and no, here's not in EU yet, but it comes down to the same thing).

[22:44] <Juerd> s/pay/play/

[22:44] <Shillo> 25%?!

[22:44] <Shillo> shapr: Where are you?

[22:44] <shapr> And because I own my own company, I pay the tax collector twice in some cases.

[22:44] <shapr> Sweden, highest VAT in the EU.

[22:45] <Shillo> Woah.

[22:45] <Juerd> I have to add VAT to my invoices, and then collect that, and then pay the same amount to the tax bureau

[22:45] <Juerd> Which sucks.

[22:45] <Shillo> And here 22% nearly killed the economy.

[22:45] <Juerd> I hate VAT :)

[22:45] <Shillo> What sucks here is that courts don't function.

[22:45] <shapr> We work for clients in Germany, and they really don't like our extra 25% tax we're forced to charge.

[22:45] <theorbtwo> Here it's MwST, and I'm not sure what it's at, though I know there's at least two different rates.

[22:45] <Juerd> Shillo: You're both in the european union. You can sell at 0%

[22:45] <Shillo> So, your customers tend to be late with payments. So you pay VAT when you bill but get the money whenever.

[22:46] <Juerd> Shillo: Or, in fact, you should|must.

[22:46] <Shillo> Juerd: I'm not.

[22:46] <Juerd> Oh, sorry, confused shapr and you.

[22:46] <Juerd> Same first two letters.

[22:46] <Shillo> Juerd: Croatia's a candidate, so far.

[22:46] <Juerd> Shillo: Then it really sucks for the germans.

[22:46] <Juerd> Shillo: They have to pay 25% *and* never get it back

[22:46] <Juerd> While locally, they pay 16% and *get it back*

[22:47] <Shillo> theorbtwo: MWST is Austrian, or both Aus or German?

[22:47] <Juerd> afk

[22:47] <theorbtwo> It's likely the term in both Aus and DE.  I'm in DE.

[22:47] * Shillo works for Austrian company, so I visit Graz pretty often.

[22:48] <theorbtwo> (But I'm American, not German.)

[22:48] <Juerd> I thought it was MwSt

[22:48] <Juerd> Not MWST

[22:48] <Shillo> Hmm, and Vienna, on a not-so-regular basis. Guess I could say hi to Leopold sometime. ;)

[22:48] <Shillo> Juerd: To be honest, my German is... nonexistant. :)

[22:48] <Shillo> Juerd: Wouldn't know either way.

[22:49] <Juerd> Shillo: Hallo!

[22:49] * Shillo is slowly picking a word here, word there. :)

[22:49] <Juerd> Then it's not nonexistent

[22:49] <theorbtwo> I think MwST.

[22:49] <Juerd> theorbtwo: What does the T stand for?

[22:49] <Shillo> Juerd: Truthfullness of that comment depends on the definition of existence we're discussing. ;)

[22:50] <mauke> http://dict.leo.org/?search=mwst

[22:50] * Shillo tries to figure out if he can pass the basic test. Wo ist die toalette? <-- is this correct? ;)

[22:50] <mauke> s/toa/toi/

[22:51] <mauke> but it's phonetically correct

[22:51] <Shillo> Oh. Okay. Hmm. Juerd wins, it's not nonexistent, then. :)

[22:51] <Juerd> Shillo: es gibt keine Toilette! *evil grin*

[22:51] * theorbtwo wonders how it got to be MwSt, considering it's apparently all one word when spelled out.

[22:51] <Juerd> theorbtwo: Steuer is also a word of its own.

[22:51] <Shillo> Juerd: I'd get that one if I knew what 'es' is. :)

[22:52] <Juerd> Shillo: "it", and you still don't get it then.

[22:52] <mauke> "es gibt keine" = "there is no"

[22:52] <Juerd> afk, brb

[22:52] <theorbtwo> I suppose that makes some seance.

[22:52] <theorbtwo> Er, sense.

[22:52] <Shillo> :) Hm, most of my colleagues at work actually call it Marwehr (sp?)

[22:53] * Shillo is exposed to a lot of spoken German, so...

[22:53] <mauke> Mehrwert?

[22:53] <Shillo> Ah. Right.

[22:53] <Shillo> . o O (I guess)

[23:01] <Juerd> re

[23:02] <Juerd> Shillo: s/Right/Richtig/ :P

[23:02] * Juerd used to read that as right-ish.

[23:02] <Juerd> sort of right.

[23:04] <Shillo> Juerd: I know that one, actually. As well as Jawohl.

[23:04] <Odin-LAP> LINKS!

[23:05] <mauke> zwo?

[23:05] <Odin-LAP> Which would be 'left'.

[23:08] <Juerd> mauke: Why is that zwo, by the way, and not zwei?

[23:08] <Juerd> And if after links comes zwo, then why isn't it followed by dro?

[23:08] <mauke> good question.

[23:08] <mauke> probably to avoid confusion between "zwei" and "drei"

[23:09] * Juerd imagines German soldiers skipping the every second of four steps...

[23:09] <mauke> http://dict.leo.org/cgi-bin/dict/urlexp/20021217164424

[23:09] * Shillo knows the words arbeit, and morgen. And 'Die ist 1 Uhre' (although I'm not so sure about that one). :)

[23:10] <Shillo> So, later, folks! :)

[23:10] * Shillo will have to hunt down a new power supply in the morning. But so far things look good. :)

[23:10] * Juerd knows more German than he likes.

[23:12] <Juerd> mauke: How is it to be surrounded by German?

[23:12] <Juerd> I can tell you that Dutch sucks.

[23:12] <Juerd> (English would be worse though)

[23:12] <mauke> Dutch sounds funny

[23:12] <Juerd> "funny"?

[23:13] <mauke> I can't explain it :-)

[23:13] <Juerd> You could at least try.

[23:14] * Juerd thinks german sounds funny because they sort of *sing* when they talk.

[23:14] <Juerd> There's a lot of tone variation. 

[23:14] * Odin-LAP points in the general direction of Norway, and says that's nothing.

[23:15] <mauke> it has to do with how they speak this weird language with a totally straight face, as if it was normal

[23:15] <Odin-LAP> I maintain that norwegians take singing lessons before learning to speak.

[23:15] <Juerd> In a simple word like "Hallo" or even "Ja?", there can be an entire musical octave.

[23:16] <Juerd> We have the same words, but here they're pronounced much simpler.

[23:16] <Juerd> mauke: "weird"?

[23:17] <Odin-LAP> Juerd: "Simpler" is also known as 'more familiar'. "Weird" is also known as 'unfamiliar'.

[23:18] <Juerd> Nono, it's not just familiarity

[23:18] <Juerd> You can hear the accents when people of different languages speak esperanto

[23:18] <Juerd> Germans sing that too

[23:18] <Odin-LAP> Juerd: Indeed. That's because their language is that way, and it carries over. ;)

[23:18] <Juerd> And Americans have trouble accepting that the pronunciation of vowels is predictable and defined.

[23:19] <Juerd> Odin-LAP: One can say the same thing in their language without singing, yet they all (afai have heard) do sing it.

[23:19] <Juerd> Which is funny.

[23:19] <Odin-LAP> English-speaking folks have trouble accepting that there is a fixed pronunciation of anything at all.

[23:19] <Juerd> Odin-LAP: But Americans have more trouble with this than British.

[23:20] <Odin-LAP> Juerd: Sure. It's also possible to pronounce 'g' somewhere above your gut. The dutch don't, though. >;)

[23:20] <Juerd> Odin-LAP: We have many sorts of g

[23:20] <Odin-LAP> Hm. True. But the british aren't good, though.

[23:20] <Juerd> The 'hard g', the 'soft g', the 'foreign g'

[23:20] <Odin-LAP> Note the smiley. :)

[23:21] <Juerd> I want to know which g you were referring to :)

[23:21] <mauke> "herdenkings-plechtigheid" looks like some sort of nonsense German

[23:21] <Odin-LAP> Hm. Good question. I don't know dutch well enough to answer it ... unfortunately. :(

[23:22] <mauke> "vliegticket" could be children language

[23:22] <Juerd> mauke: No, that'd be herdenkungsplechtichkeit

[23:22] <Juerd> mauke: What do you think about stoomtrein?

[23:22] <Juerd> mauke: And hagelslag?

[23:23] <Juerd> mauke: Do you know what our word 'slim' means? :)

[23:24] <mauke> I don't know what stoomtrein means but it looks vaguely German; hagelslag looks like Hagelschlag; no

[23:25] <mauke> "difficult, sly, smart, cunning, inconvenient"?

[23:26] <Juerd> mauke: Of those, only smart.

[23:26] <Juerd> It gets funny when it's translated to German as Schlimm

[23:26] <mauke> hahaha

[23:26] <Juerd> And that happens.

[23:27] <Juerd> een slimme jongen => ein schlimmer jungen

[23:27] <mauke> ouch

[23:28] <Juerd> yeah.

[23:28] <Odin-LAP> Stoomtrein ... steam locomotive? :D

[23:29] <Juerd> Odin-LAP: trein is train - the entire train pulled by a steam locomotive is called stoomtrein...

[23:30] <Odin-LAP> Ahh. Okay. :)

[23:30] <theorbtwo> Damn, and there was me thinking it referred to storm troopers.

[23:30] <Juerd> heh

[23:30] <Odin-LAP> It's kinda like english with german orthography. ;)

[23:30] <crysflame> steam troopers!

[23:30] * crysflame blows hot air at theorbtwo

[23:30] <mauke> ah, like Dampfzug except that's not a word

[23:31] <Odin-LAP> Well, sometimes.

[23:31] <Juerd> mauke: hehehe, right :)

[23:31] <TreyHarris> is C<@list = (0..Inf)> legal?  Or must you say C<@list = (0...)>?

[23:31] <wolverian> it is legal.

[23:31] <theorbtwo> Both are legal, and equivlent.

[23:31] <TreyHarris> thanks

[23:31] <Juerd> TreyHarris: The parens are not needed.

[23:32] <Juerd> TreyHarris: .. in list context returns a list.

[23:32] <Juerd> Which has proven to be a great convenience.

[23:32] <theorbtwo> Didn't it always?

[23:32] <TreyHarris> yeah, but @list = 0..Inf; looks funny to me.  Maybe that's just my Perl 5 trainer intuition fighting with the new P6 gestalt :-)

[23:32] <Juerd> Yes, it has always done this.

[23:33] <Juerd> TreyHarris: If Perl 5 had Inf, it'd be valid Perl 5.

[23:33] <Juerd> TreyHarris: @array = 0..5;

[23:33] <mauke> "gestalt"? that's our word!

[23:33] <Juerd> TreyHarris: Don't call your array "list" - that's misleading and a stupid name anyhow.

[23:33] <Juerd> list of *what*?

[23:34] <Juerd> $data

[23:34] <Juerd> &does_something

[23:34] <Juerd> %mapping

[23:34] <mauke> # comment

[23:35] <theorbtwo> mauke: English has stolen a lot of German philosiphy and psychology words.

[23:35] <theorbtwo> OTOH, they don't always mean the same thing.

[23:35] <Juerd> theorbtwo: Freud's fault.

[23:35] <theorbtwo> Angst and anger are /not/ the same thing in English.

[23:35] <TreyHarris> Juerd: :-P  oh, shush.  i'm not going to put "@list" into real code.  i was asking a question about lists, so @list made perfect sense :-)

[23:35] <wolverian> TreyHarris: that's an array, not a list.

[23:35] <Juerd> theorbtwo: Angst isn't anger anyway.

[23:35] <Odin-LAP> Angst is fear, actually. :)

[23:35] <Odin-LAP> Ich habe Angst!

[23:35] <Juerd> TreyHarris: What is 'real code'?

[23:36] <theorbtwo> Er, right.  Whatever it is in German, it's not quite the same thing in English.

[23:36] <TreyHarris> wolverian: 0..Inf is an array, not a list?

[23:36] <wolverian> TreyHarris: no, @list is an array.

[23:36] <wolverian> TreyHarris: a list assigned to an array promotes to an array. magically!

[23:36] <TreyHarris> Juerd: code meant to do something, rather than code meant to gloss a syntactic concept in the language.

[23:36] <theorbtwo> If you put it in @somethingoranother, it's an array.

[23:37] <Juerd> Ich bin muede und soll eigentlich schlafen muessen

[23:37] <Juerd> (big guess)

[23:37] <Juerd> Gute Nacht, leuten!

[23:37] <mauke> Gute Nacht, und schlaf gut.

[23:37] <Odin-LAP> "should really have to sleep"?

[23:37] <theorbtwo> G'night, mauke.

[23:37] <theorbtwo> Er, G'night, Juerd.

[23:38] <Juerd> danke - gleichfalls

