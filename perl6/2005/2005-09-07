[00:24] *** hcchien_ is now known as hcchien

[01:10] <jakx> hello

[01:10] <rafl_> Hello.

[01:10] <jakx> where can i get pxperl

[01:13] <nothingmuch> suppsedly http://pixigreg.com/?pxperl

[01:13] <nothingmuch> but I get a lookup error

[01:13] <nothingmuch> maybe this can help: http://www.jwcs.net/~jonathan/perl6/

[01:21] <svnbot6> r6827 | Stevan++ | Perl6::MetaModel 2.0 - support for anon-classes

[02:30] <dudley> ugh. Hard drives suck.

[02:52] <dudley> shit. I lost my Scala PIL2 stuff when my hard drive crashed yesterday. fuck.

[03:51] <putter> Writing it the second time goes faster...?

[03:52] <putter> mmm, Scala...  could check it in under modules/...

[03:56] <putter> nothingmuch: are you still interested in hacking PIL trees?   either to compile to p5, or...  hmm, a forth to pil compiler?  having a second generator would help push pil clients to be language-neutral...  pilrun is largely a shell to support fglock and stevan... someone needs to write a real compiler...

[03:57] <putter> if not nothingmuch, anyone else?

[04:09] <putter> Hey, an Intel Press optimization book is going to use a couple of one-liners from my Principles of Computer System MisDesign as chapter epigraph.  :) :)  Optimize blindly. Tune first,  measure later.

[04:47] <putter> "Words to lose by" :)

[04:58] *** ChatUser is now known as archie

[04:58] *** archie is now known as oaklandarchie

[04:59] <oaklandarchie> hello world

[05:00] <putter> good night &

[05:10] <svnbot6> r6828 | gaal++ | add recommended formatting settings to syntax. use "setlocal" and not "set"

[05:10] <svnbot6> r6828 | gaal++ | to minimize creep.

[05:47] <Supaplex> a book not yet written, O'Reilly Practical Distaster Planning for Government Officials

[06:01] <QtPlatypus> Supaplex: "Practical Distaster Planning and Recovery" would make a very good ORA book.

[06:02] <Supaplex> yup

[06:02] <Supaplex> the origional title I made 20min ago was O'Reilly Practical Distaster Planning

[06:02] <QtPlatypus> Not just Government Officials

[06:02] <Supaplex> but I added the for Government Officials for a little more satire :)

[06:03] <QtPlatypus> Arh.

[06:04] <QtPlatypus> Infact if I knew anything about the topic I would be pitching it to ORA this second :D

[06:04] <Supaplex> you think they'd care for a suggested topic?

[06:04] <Supaplex> even if I don't write it, they can consider it for someone else who will :)

[06:05] <QtPlatypus> Just check there policy on pitching ideas.  I know some people avoid it for legal resons.

[07:34] <rindolf> Hi all!

[07:34] <rindolf> autrijus: here?

[07:37] <rindolf> Bah! He's been idle for 7 hours. Maybe he's sleeping.

[07:38] <dduncan> seen ingy

[07:38] <rindolf> .seen ingy

[07:39] <dduncan> that bot may simply be down

[07:40] <dduncan> fyi, following more Best Practices with my own modules, I'm trying to use 'version' and 'only' modules from CPAN; but, only fails some of its own tests on my machine ... ingy made that module

[07:41] <dduncan> that may not be of consequence for my usage, but anyway its late, so I'll look back into this tomorrow ...

[07:41] <dduncan> fyi, I'll add 'Module::Build' support at the same time for my distros

[07:41] <dduncan> good night

[08:12] <meppl> guten morgen

[08:59] <sperminator> whats the command in perl to send something into like /etc/passwd file ?

[09:01] <QtPlatypus> sperminator: In Perl 6 or Perl 5? 

[09:01] <sperminator> im not sure what version i have

[09:02] <sperminator> im using Suse linux 9.1

[09:03] <QtPlatypus> That would be perl verson 5.something ask in #perl

[09:03] <sperminator> for example like : print ("<account>") 'send it to' /etc/passwd

[09:04] <sperminator> ok

[09:04] <QtPlatypus> Could I ask you how you found this channel just out of curosity?"

[09:04] <sperminator> irc channel search

[09:04] <sperminator> on yahoo

[09:04] <sperminator> there's a search engine i found

[09:05] <QtPlatypus> ok thanks

[09:06] *** sperminator is now known as niakia`

[09:11] <GeJ> niakia`: it might be a bad idea to automatically write stuff to /etc/passwd for several reasons (the passwords not being stored in /etc/passwd comes to mind first). But anyway, this channel is focused on perl 6's development. You might have more chances to get an answer on the #perl channel.

[09:12] <GeJ> hint: you might ask on how to define a file handler and how to write into it

[12:49] <svnbot6> r6829 | iblech++ | * Usual svn props.

[12:49] <svnbot6> r6829 | iblech++ | * pugs::hack: s/emacs/Emacs/ (consistency) and reformatted dduncan++'s section

[12:49] <svnbot6> r6829 | iblech++ |   about space-loving settings for BBEdit to use POD's =over =item =back, so

[12:49] <svnbot6> r6829 | iblech++ |   pugs::hack looks good on search.cpan.org.

[13:02] <gaal|work> hey iblech, i was thinking of adding gzip to the pugs smoke server/client, since uploads can be slow and even time out.

[13:03] <gaal|work> you don't run it directly off an svn tree, do you?

[13:04] <rafl> Why not bz2?

[13:04] <gaal|work> bz2 also good :)

[13:04] <rafl> It's better!

[13:04] <gaal|work> anything that IO::via can do

[13:04] <gaal|work> sure

[13:04] <gaal|work> does it have autopop for the server side?

[13:05] * gaal|work checks

[13:05] <gaal|work> beh, no autopop. that's too bad.

[13:06] <gaal|work> so compression will have to be explicitly signalled in the protocol.

[13:06] <kgftr|konobi> autrijus: ping

[13:07] <gaal|work> (i like how with PerlIO::via::gzip you can open a stream with decompression and have it remove itself quietly if the stream doesn't look like it's compressed with gzip)

[13:21] <autrijus> kgftr|konobi: pong

[13:21] * autrijus is still at $work

[13:23] <kgftr|konobi> autrijus: quick question... any idea if anyone is currently working on VCP::Source::svk and VCP::Dest::CVS ?

[13:23] <autrijus> no idea at all. barries resurfaced a while ago 

[13:23] <autrijus> but I don't have track anymore

[13:24] <kgftr|konobi> #svk i suppose then?

[13:24] <kgftr|konobi> castaway: moo

[13:24] <autrijus> yeah

[13:28] <castaway> woof!

[13:51] <vkon> given that rules use Parrot's PGE, and it is currently limited (no ignorecase), how situation will improve? Wait for Parrot's PGE to improve, or there is another magical way?

[13:52] <PerlJam> vkon: you could hack PGE yourself.

[13:52] <QtPlatypus> Putter is working on something as well.

[13:53] <PerlJam> vkon: or, in lieu of that, just send a friendly email to PGE's author/maintainer.

[14:59] *** _meppl_ is now known as meppl

[15:55] * gaal|work lols at the latest larryism

[15:56] <gaal|work> "typeglobs are dead, dead, dead, dead, and dead, not necessariy in

[15:56] <gaal|work> that order."

[15:58] <rafl> :-)

[16:07] <geoffb> heh

[16:08] <castaway> *g*

[17:11] *** Aankh|Clone is now known as Aankhen``

[17:24] <PerlJam> cognominal: indeed 

[17:25] <rindolf> Hi all!

[17:25] <rindolf> autrijus: here?

[17:26] <Juerd> My greatest fear is that there will be a CGI module with all kinds of non-CGI crap in it

[17:26] <Juerd> In this I'm a little more strict than most others

[17:26] <Juerd> non-CGI crap doesn't just include HTML generation, it also includes uri-decoding

[17:27] <Juerd> And multipart/form-data decoding

[17:27] <Juerd> It's nice to have modules bundled, but there shouldn't be a big one that does everything by itself

[17:27] <integral> URI-decoding?  It should basically just provide an accessor for %ENV<QUERY_STRING>, but not parse it iself?

[17:28] <Juerd> It should use the uri decoding module.

[17:28] * PerlJam suddenly fears a CGI module that autoloads 50 other modules

[17:28] <integral> hmm, so what's the difference between it depending on a module, and just having that code in it?

[17:29] <Juerd> PerlJam: Do you dislike LWP::UserAgent for using HTTP::Headers, for example?

[17:29] <integral> or, if that's the case, it shouldn't just be two modules (CGI env access, and uri decoding), but *three* modules (env access, decoding, and then a wrapper)

[17:29] <Juerd> When written correctly and by the same team, lots of small modules WORK

[17:29] <Juerd> And work very well.

[17:30] <Juerd> There are very few things specific to CGI

[17:30] <Juerd> That the string is in STDIN or %ENV<QUERY_STRING> is CGI

[17:30] <Juerd> The string and the parsing of it, are not

[17:31] <integral> Juerd: but if CGI just loads URI::Decode, how does the user change what module is used for parsing?  Is there some parameterisation somewhere?

[17:31] <Juerd> Thus the CGI module, regardless of what it name will be, should pass the string (which may be lazily tied to a filehandle) to the module that parses

[17:31] <Juerd> The user doesn't have to change that module.

[17:31] <Juerd> That's needless configurability, if you ask me.

[17:31] <Juerd> It's not a database driver.

[17:32] <integral> but then surely the format of the string *has* been specified by CGI, so it *is* responsible for the parsing?

[17:32] <Juerd> The place of first specification is highly irrelevant

[17:33] <Juerd> We don't put MIME parsing under any Email namespace, do we?

[17:33] <Juerd> It's used in many places outside email nowadays

[17:34] <Juerd> As are strings of the application/x-www-form-urlencoded type.

[17:34] <integral> are we arguing the same thing?   Is what you're talking about just that the "decode_uri" method should be on the interface of URI(or something) not CGI?

[17:35] <Juerd> I think (hope) we agree that decode_uri or whatever the name will be, belongs in URI

[17:35] <Juerd> It's the place where the &=; splitting is done that I'm discussing now

[17:35] <Juerd> And the building of a hash or object from that

[17:37] <integral> And that ultimately happens under the control of CGI

[17:37] <Juerd> It shouldn't

[17:37] <integral> you invoke a CGI method, and it invokes the machinery to do the splitting and then object building

[17:37] <Juerd> Oh, right

[17:37] <Juerd> Yes.

[17:38] <integral> But it might as well call a "my sub uri_decode" were it not that should be factored out for the user to use elsewhere

[17:38] <Juerd> role MIME::URL does Hash does Array does HTML::Form { ... }

[17:39] <Juerd> $query.param('foo'), $query<foo>, $query[0]

[17:39] <Juerd> s/does HTML::Form//  # makes no sense

[17:40] <Juerd> But $query.as(HTML::Form) might

[17:40] <integral> that needs extra info like the URI though

[17:40] <Juerd> Not really

[17:40] <Juerd> It can assume urilessness

[17:40] <Juerd> It's lossy, sure, but it can be very useful

[17:41] <Juerd> my HTML::Form = $query;  # assuming coercion. if not: $query.as(HTML::Form)

[17:41] <Aankhen``> Hi.

[17:41] <integral> oh, ok,  some kind of implicit Maybe in certain fields,  like say this "undef" thing we've got... ;-)

[17:41] <Juerd> $form.action = '/cgi-bin/bar.cgi';

[17:41] <Juerd> $form.method = 'GET';

[17:41] <Aankhen``> Juerd: Have you seen HTTP::Request::CGI, by any chance?

[17:41] <Juerd> print $form

[17:41] <Juerd> integral: Forms do not need action, it defaults to the current URL. They do not need method, it defaults to GET

[17:42] <integral> Juerd: oh, forgetting that

[17:42] <Juerd> integral: This thing can assume every field is of type text.

[17:42] <integral> Juerd: not type hidden?

[17:42] <Juerd> Besides this, it's not the details I care about at this point

[17:42] <Juerd> God damnit, windows sucks

[17:43] <Juerd> I'LL RESTART LATER, WHEN THE IBM THINGY IS DONE BURNING THE 7 CD'S, { generate_profanity }, SO QUIT BUGGING ME

[17:44] <integral> Haskell++

[17:44] <Juerd> I'm off to mcdonald's for some emergency food.

[17:46] <rafl> Hm. What happended? Only a few commits today..

[18:43] *** typester is now known as typeout

[19:09] *** typeout is now known as typester

[19:39] * Aankhen`` goes to sleep.

[19:39] <Aankhen``> G'night.

[19:46] <masak> question: what are good ways in p5 and p6 respectively, to reverse a string?

[19:46] <masak> the easiest way i found in p5 was join '', reverse split // $string

[19:47] <masak> doesn't look very nice, now does it?

[19:47] <integral> *blink*

[19:47] <integral> $string = reverse $string

[19:48] <masak> nope

[19:48] <masak> doesn't work :(

[19:48] <masak> reverse only reverses lists... i think

[19:48] <PerlJam> masak: clearly you are insane.

[19:48] <integral> perl -le '$string = "abc"; $string = reverse $string; print $string'

[19:48] <integral> masak: the manual *clearly* explains all the stuff about context

[19:48] <integral> and the faq

[19:49] <PerlJam> masak: in perl6 it would be $string.=reverse probably.

[19:49] <masak> integral: your example worked, thx

[19:49] <masak> but nothing worked for me

[19:49] <masak> apparently i am insane :P

[19:49] <integral> no, you don't understand scalar context.  perl -le 'print scalar reverse shift' foobar

[19:49] <PerlJam> masak: you were probably saying "print reverse $string"

[19:50] <masak> no, but maybe something of the sort

[19:50] <masak> and that doesn't work, because...?

[19:50] <integral> masak: print's prototype is (@), ie list context.  It's a rightwards named list operator

[19:50] <PerlJam> masak: context.

[19:51] * masak thinks he sees it now

[19:51] <PerlJam> masak: perldoc -f reverse

[19:51] <masak> thx, integral and PerlJam

[19:51] <masak> PerlJam: I read the perldoc entry but apparently not carefully enough

[19:51] * masak reads it again

[19:51] <masak> ah

[19:52] <masak> "In scalar context, concatenates the elements of LIST and returns a string value with all characters in the opposite order."

[19:52] <masak> this somehow went past me as something i didn't want :/

[20:30] * rafl wants a new release..

[20:36] <Supaplex> doesn't everyone?

[20:53] <geoffb> perlbot, seen nothingmuch

[20:53] <geoffb> dang

[20:56] <masak> perlbot, seen perlbot

[20:56] <masak> :P

[20:58] <buu> perlbot doesn't do seen

[20:58] <buu> frogbot and seenserv do

[20:58] <geoffb> yeah, I was just checking . . . 

[20:58] <geoffb> we used to have a couple bots that did seen in here, but I think none now after all of the freenode mucking about.

[22:50] <renormalist> Hi! I'm trying to find out what "pick" does. I see it quite a lot in pugs/examples. Anyone with a hint?

[22:54] <luqui> renormalist, picks a random number from a list/junction

[22:54] <luqui> ?eval [1,2,3].pick

[22:54] <evalbot_6830> 2 

[22:54] <luqui> ?eval [1,2,3].pick

[22:54] <evalbot_6830> 2 

[22:54] <luqui> ?eval [1,2,3].pick

[22:54] <evalbot_6830> 2 

[22:54] <luqui> uh

[22:54] <luqui> ?eval [1,2,3].pick

[22:54] <evalbot_6830> 1 

[22:54] <luqui> there we go

[22:55] <renormalist> pick == "take any element of list" ?

[23:05] <Supaplex> ?eval [1,2,3,4,5].pick

[23:05] <evalbot_6830> 3 

[23:05] <Supaplex> ?eval [1,2,3,4,5].pick

[23:05] <evalbot_6830> 2 

[23:05] <Supaplex> ?eval [1,2,3,4,5].pick

[23:05] <evalbot_6830> 5 

[23:06] <Supaplex> knifty

[23:06] <rantanplan> ?eval (1..10).pick

[23:06] <evalbot_6830> 3 

[23:06] <rantanplan> Uh cool. :)

[23:07] <Supaplex> ?eval l=(1..10);l.pick;print l

[23:07] <evalbot_6830> Error:  unexpected "p" expecting block construct, ":", term, term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[23:07] <Supaplex> meh :P

[23:08] <Supaplex> my guess is that it does not pop/shift it out.

[23:08] <Supaplex> ?eval (1..10).grab

[23:08] <evalbot_6830> Error: No compatible subroutine found: "&grab" 

[23:08] <Supaplex> worth a guess hehe :)

[23:09] <luqui> Supaplex, you needed a $ or an @ in your test eval

[23:09] <renormalist> Where are such builtins documented/described? I couldn't find "pick" by myself.

[23:09] <luqui> oh, yeah, it doesn't splice it out

[23:09] <luqui> renormalist, in the source :-/

[23:09] <luqui> specifically, all of them are in src/Pugs/Prim.hs

[23:09] <luqui> but their documentation is written in Haskell :-(

[23:10] <renormalist> m'kay

[23:10] <Supaplex> ?eval $l=(0..9);$l.pick;print $l

[23:10] <evalbot_6830> Error: Undeclared variable: "$l" 

[23:10] <Supaplex> ?eval my $l;$l=(0..9);$l.pick;print $l

[23:10] <evalbot_6830> 0123456789bool::true 

[23:11] <Supaplex> ?eval my $l;$l=(0..9);$l.pick;print join(' ',$l);

[23:11] <evalbot_6830> 0 1 2 3 4 5 6 7 8 9bool::true 

[23:31] <_meppl_> gute nacht

[23:37] <rafl> Bye.

