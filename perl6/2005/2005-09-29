[08:00] <buu> http://erxz.com/log.pl

[08:00] <buu> or something

[08:02] <buu> Can't make the first day work, but is that what you had in mind?

[08:03] <spinclad> good enuf in a flood

[08:04] <spinclad> ^F is my friend

[08:04] * nothingmuch forgot what ^F is

[08:04] <nothingmuch> form feed?

[08:04] <buu> Find in firefox?

[08:04] <nothingmuch> oh

[08:04] <geoffb> Mozilla "find in page"

[08:04] <spinclad> yeh, that

[08:04] <buu> Ahah, fixy first page.

[08:04] * nothingmuch thought terminal

[08:04] <buu> s/page/day/

[08:04] <nothingmuch> http://colabti.de/irclogger/irclogger_log_search/perl6

[08:05] <buu> Interesting

[08:05] <autrijus> rehi

[08:05] <nothingmuch> hi ho

[08:05] <autrijus> so I was hacking here in the hallways

[08:06] <autrijus> and brendon just showed up suddenly

[08:06] <autrijus> and I gave him a T-shirt and talked for half an hour :-))

[08:06] <nothingmuch> brendon?

[08:06] <autrijus> the one guilty for javascript and spidermonkey 

[08:06] <nothingmuch> ah

[08:07] <spinclad> hi autrijus-san

[08:07] <autrijus> he mentioned they are investigating the Rhino continuations class for spidermonkey

[08:07] <autrijus> which would be lovely

[08:07] <nothingmuch> woot

[08:07] <autrijus> and also toying with the idea of having firefox work with system perl python ruby etc as XUL scripting

[08:08] <autrijus> ...and I updated him on parrot -- turns out their impression was still two yearsD ago

[08:08] <nothingmuch> that is local UI bindings, e.g. GTK, but based on the FF implementation

[08:08] <autrijus> nothingmuch: right

[08:08] <nothingmuch> s/$/?/

[08:09] <nothingmuch> âˆ† $parrot.at(Time::Piece->new("two years ago")), $parrot.now

[08:09] <geoffb> hi, autrijus, nothingmuch 

[08:09] <nothingmuch> hi ho geoffb 

[08:10] <nothingmuch> there's a unicode char called 'n-ary circled dot operator'

[08:10] <nothingmuch> perhaps that's hyper method call on boxed types?

[08:10] <geoffb> nothingmuch, I'd be interested in that delta as well

[08:10] <geoffb> autrijus, what did you tell them?

[08:11] <coral> ooo, XUL scripting :)  autrijus++

[08:11] <spinclad> (brendon++?)

[08:12] * nothingmuch was actually wrong, i inserted "Increment" instead of "Delta" because i found the triangle under "

[08:12] <nothingmuch> Mathematical Symbols" instead of the greek script

[08:12] <geoffb> looked close enough in my window . . . .

[08:13] <spinclad> i think you got it right by accident then

[08:13] <spinclad> difference == increment in a way

[08:13] <nothingmuch> really? why is it "increment"? I would have expected it to be named otherwise

[08:14] * nothingmuch should have gone with |$parrot.now - $parrot.then|

[08:14] <buu> Hrm. Can we have a 'then' operator?

[08:14] <spinclad> x1-x0 is what you increment x0 by to get the next

[08:14] <nothingmuch> btw, do we have circumfix:<| |>

[08:14] <nothingmuch> woh

[08:14] <nothingmuch> oh

[08:14] <nothingmuch> buu: please explain what it does

[08:15] <buu> nothingmuch: scalar comma operator

[08:15] <nothingmuch> ?

[08:15] <buu> || is to 'or' as , is to 'then'

[08:15] <nothingmuch> sub &infix:<then> ($lhs, $rhs) { ... }

[08:16] <buu> Excellent

[08:16] <nothingmuch> is this a cause and effect then, or a this after that then?

[08:16] <buu> 'this after that'

[08:16] <nothingmuch> oh, i see why i got confused =)

[08:16] <nothingmuch> ?eval my $x = 1, 2, 3; $x

[08:16] <evalbot_7198> [1, 2, 3] 

[08:16] <spinclad> i was thinking if..then, and thinking either ?? or !!

[08:16] <nothingmuch> errm

[08:16] <nothingmuch> ?eval my $x = scalar 1, 2, 3; $x

[08:16] <evalbot_7198> Error: No compatible subroutine found: "&scalar" 

[08:17] <buu> Dear god.

[08:17] <nothingmuch> ?eval my $x = +(1, 2, 3); $x

[08:17] <evalbot_7198> \3 

[08:17] <buu> ?eval $x=42,$y=53;

[08:17] <nothingmuch> why is it useful, btw?

[08:17] <evalbot_7198> Error: Undeclared variable: "$x" 

[08:17] <buu> nothingmuch: The same places we use scalar commas

[08:17] <nothingmuch> i don't know where we use scalar commas

[08:18] <geoffb> nothingmuch, '$broken++, next if /broken/;'

[08:18] <nothingmuch> that's void comma

[08:18] <buu> Same difference.

[08:18] <nothingmuch> does it behave the same?

[08:18] <spinclad> if do this then do that then do theother else do something else

[08:18] <nothingmuch> list and scalar comma behave the same in void context, don't they?

[08:19] <spinclad> EAMBIG

[08:19] <nothingmuch> ?eval sub &infix:<then> ($lhs, $rhs) { $rhs }; my $x = 4 then 2; $x

[08:19] <evalbot_7198> Error:  unexpected "&" expecting subroutine parameters, trait or block 

[08:19] <geoffb> Um, I think it's not so much that they behave the same but rather there would be no way to tell the difference

[08:19] <nothingmuch> ?eval sub infix:<then> ($lhs, $rhs) { $rhs }; my $x = 4 then 2; $x

[08:19] <evalbot_7198> \2 

[08:19] <geoffb> (so same by default)

[08:20] <nothingmuch> brb

[08:20] <buu> Apparently scalar commas behave differently now

[08:20] <buu> The main difference was the return values.

[08:21] <geoffb> (count of items v. last item, yes?)

[08:23] <buu> Er, no?

[08:23] <buu> I'm not sure what commas are doing in p6, apparently they create annonymous arrays

[08:26] <nothingmuch> buu: no

[08:27] <nothingmuch> it's that arrayish things, when assigned to a scalar become an array ref

[08:27] <nothingmuch> i think

[08:27] <nothingmuch> wait

[08:27] <nothingmuch> ?eval my $x = +(5, 6, 7); $x

[08:27] <evalbot_7198> \3 

[08:27] <nothingmuch> okay

[08:27] <nothingmuch> quick answer: there is no scalar comma

[08:27] <nothingmuch> maybe it's a pugs bug

[08:27] <nothingmuch> maybe not

[08:28] <nothingmuch> The scalar comma , now constructs a list reference of its operands. You have to use a [-1] subscript to get the last one.

[08:28] <nothingmuch> http://dev.perl.org/perl6/doc/design/syn/S03.html

[08:28] <nothingmuch> first hit for "comma"

[08:28] <nothingmuch> you were right

[08:28] <nothingmuch> ?eval my $x = (5, 6, 7)[-1]; $x

[08:28] <evalbot_7198> \7 

[08:28] <nothingmuch> anyway, for 99% of the cases it doesn't really matter

[08:28] <nothingmuch> I don't know of any use of the scalar comma as something you want to get a void out of

[08:29] <nothingmuch> for sequencing operations you can still use it (scalar or list comma - it doesn't matter) in void context (maybe there's even the void context comma, implemented exactly like the then operator i just gave above)

[08:30] <nothingmuch> but mose '$foo++, next if cond' can be redone as given/when

[08:30] <nothingmuch> for @list -> $x { given $x { when cond { $counter++ } } }

[08:34] <svnbot6> r7199 | Darren_Duncan++ | /ext/Locale-KeyedText : resync with final Perl 5 version 1.6.2, which is now on CPAN ... the next anticipated edits to this perl 6 version is to ensure it still compiles/executes correctly under the current Pugs

[08:35] <nothingmuch> amazing: http://www.perlmonks.org/?node_id=494663

[08:50] <buu> Perlmonks is powered by the souls of damned orphans.

[08:52] <geoffb> OK, I've been up way too damn long

[08:52] <geoffb> time to attempt sleep again

[08:53] <geoffb> g'night

[08:53] <spinclad> night geoff

[08:53] <spinclad> me too, soon

[08:55] <autrijus> geoffb: g'nite!

[08:55] <autrijus> sorry I was abducted by aliens

[08:55] <autrijus> or at least an earthling with an alien mind :)

[08:56] <spinclad> that tends to happen at some of these conferences

[08:56] <autrijus> geoffb: I told brendon, quite truthfully, about Dans' absence and the recent revival attempts

[08:56] <spinclad> but only the best ones

[08:56] <autrijus> shared runtime is still a win and they are still not at all comfortable with mono

[08:57] <autrijus> and python is not targetting spidermonkey2 any time soon

[08:57] <autrijus> so still a chance for parrot if pirate can somehow show concrete results.

[09:13] * nothingmuch somehow doubts parrot will get stuff soon

[09:13] <nothingmuch> it seems like it's doing maintenance jobs

[09:13] <nothingmuch> not really developing

[09:17] <spinclad> leo's branch has finally made trunk.  does that mean pugs could start targeting it again?

[09:17] <spinclad> (as if nobody had enough work already)

[09:19] <broquaint> Will parrot ever be finished?

[09:20] <pdcawley> Not if it keeps chasing performance before correctness.

[09:20] <pdcawley> Oops, hit return.

[09:20] <autrijus> spinclad: yes, it means we can restart targetting.

[09:20] <broquaint> Hrm, then it might be some time ...

[09:20] <autrijus> before then it was impossible -- the function calling convention keeps changing in a hourly basis

[09:25] <nothingmuch> TSa is silly

[09:25] <nothingmuch> "i would call intentional exceptions terrorism"

[09:25] <pdcawley> No!

[09:25] <pdcawley> WTF!

[09:25] <nothingmuch> me doesn't understand why he insists on calling errors exceptions

[09:25] <pdcawley> I'm not sure 'silly' begins to cover that.

[09:26] <nothingmuch> when the two, taken most literally, mean what they mean and not wha the wants them to mean

[09:26] <pdcawley> Thomas "Humpty Dumpty" Sandlass

[09:26] <pdcawley> Words mean precisely what he wants them to mean.

[09:26] <nothingmuch> heh

[09:26] <nothingmuch> so, have you forgiven me yet?

[09:27] <pdcawley> Nah. You're unforgiveable.

[09:27] <pdcawley> ; grins.

[09:27] <nothingmuch> is that the name of a pop song or something like that?

[09:27] <pdcawley> Oops, irc is not a mud. Muds are not irc.

[09:27] <pdcawley> Unbelievable.

[09:28] <nothingmuch> ttp://dictionary.reference.com/search?q=exception

[09:28] <spinclad> unforgetable

[09:28] <nothingmuch> One that is excepted, especially a case that does not conform to a rule or generalization.

[09:28] <pdcawley> Someone should do Unforgiveable as well.

[09:28] <nothingmuch> http://dictionary.reference.com/search?q=error

[09:29] <nothingmuch> The condition of having incorrect or false knowledge.

[09:29] <nothingmuch> when an error happens, an exception in the normal control flow is used to notify code which can make the decision of what to do next

[09:30] <scook0> so an erroneous situation causes an exception to normal control flow...

[09:33] <nothingmuch> yep

[09:39] <nothingmuch> there

[09:39] * nothingmuch hopes he's formalized it

[09:39] <nothingmuch> scook0: i've expanded a lot on that

[09:40] <nothingmuch> http://www.nntp.perl.org/group/perl.perl6.language/23276

[11:03] * spinclad happily backjournals amid the backlogging

[11:08] <nothingmuch> bah

[11:08] <scook0> huh?

[11:08] <nothingmuch> i wonder if TSa has actually used exceptions in code or not

[11:09] <nothingmuch> he seems to be very confused not about how they work, but how they save programmer time

[11:11] <scook0> to be honest, I rarely even try to understand what he's talking about any more

[11:12] <nothingmuch> in the use fatal err fail thread, he

[11:12] <nothingmuch> 's making some point

[11:12] <nothingmuch> which i think is wrong

[11:12] <nothingmuch> but come to think of it, i have no clue why he reached that point

[11:12] <wolverian> I agree that culturally, exceptions are more like errors than events

[11:13] <wolverian> I also agree that that is wrong. :)

[11:13] <wolverian> (so I agree with both of you, I think)

[11:14] <nothingmuch> wolverian: i'm not contradicting that

[11:15] <nothingmuch> all I'm saying is that till now exceptions have only been dealing with errors

[11:15] <nothingmuch> but exceptions are just a way of leaping up to known sanity, as a reaction to an event

[11:15] <wolverian> right.

[11:16] <nothingmuch> and the only events we're used to reacting to, with an exception, are errors

[11:17] <scook0> I still don't understand what point TSa is trying to make

[11:17] <nothingmuch> wrt 'return is two orthogonal things?'?

[11:17] <nothingmuch> err, take one ? out of there

[11:19] <scook0> not so much that bit

[11:19] <scook0> more the 'least thing that *defines* an exception'

[11:20] <nothingmuch> i think he's really confusing return value things

[11:21] <nothingmuch> perhaps I should explain the Either monad

[11:21] <nothingmuch> and fail

[11:21] <nothingmuch> vs return

[11:21] <nothingmuch> hi gaal 

[11:33] <cognominal> hum, what is this Blondie thing? What the difference of purpose with PIL?

[11:34] <cognominal> is this a PIL new generation?

[11:34] <wolverian> I think autrijus talked about it in a recent journal

[11:34] <scook0> I believe Blondie is its own little independent experiment

[11:35] <scook0> ask nothingmuch

[11:35] <wolverian> it is not PIL2

[11:35] <wolverian> right; it's nothingmuch's project

[11:35] <scook0> it's a sandbox for testing certain compilation techniques

[11:36] <cognominal> thunking, among other thing I have gathered...

[11:36] <wolverian> I just love how ./configure just has to check for Fortran support when I'm compiling a C IRC client

[11:36] <wolverian> we.hates-software.com, I guess, although it's an old hate.

[11:37] <cognominal> yea, the world of pure ideas is so confortable

[11:37] <cognominal> and code is so disgusting

[11:37] <cognominal> I hope Perl6 will mitigate that

[11:42] <gaal> hi nothingmuch

[11:43] <gaal> i want my brain back

[11:43] <nothingmuch> what happenned to it?

[11:43] <gaal> $work has been sucking it away, i feel depleted

[11:53] <spinclad> geoffb++  # good article, expresses much of my own happiness with how things are moving lately

[11:59] * nothingmuch actually has a comment on that, now that i'm thinking about it

[11:59] <nothingmuch> perl isn't taking all those features and assimilating the,

[11:59] <nothingmuch> it's doing something deeper

[11:59] <nothingmuch> the features are evaluated for usefulness

[11:59] <nothingmuch> and distilled

[11:59] <nothingmuch> such that perl is a very simple language

[12:00] <nothingmuch> with which we can implement a vast, useful core library

[12:00] <nothingmuch> with a cool language based on all the langauges listed in the article

[12:00] <nothingmuch> so that the result feels like the next perl, WRT perl 5

[12:02] <spinclad> i'm beginning to see perl6 and haskell sharing much core mechanism...

[12:04] <spinclad> these language cores are becoming community property

[12:04] <nothingmuch> oh, and i forgot: the result makes sure that it not only assimilates perl 5, but that it assimilates the practical features of the other languages too

[12:04] <spinclad> or especially the ideas and structures that make them up

[12:04] <nothingmuch> aye

[12:27] <kgftr|konobi> theorbtwo: oioi

[12:35] <cognominal> spinclad: "I'm beginning to see perl6 and haskell sharing much core mechanism..." I don't think there is a expliicit pattern matching system a la haskell in Perl6. Too bad, the more I learn haskell the more I like pattern matching

[12:39] <spinclad> well, not yet anyway, at least in the surface language.  i was actually thinking of the implementations;

[12:40] <draget> $new =~ s/\$number\n//;

[12:40] <draget> i've done something wrong, but can't work out what

[12:40] <draget> anyone know why that doesn't work?

[12:40] <spinclad> draget: perl5 or perl6?

[12:41] <draget> perl5, is their a channel for 5, I didn't see it in the list

[12:42] <cognominal> anyway, I find there is a similarity between regex and pattern matching.  regex deals with chars, amd pattern matching with types. I am note sure what to think about that parallelism

[12:43] <draget> basically i need a variables contents to be searched for and replaced with nothing

[12:43] <spinclad> draget: several, among them #perl, #perlhelp, #perlcafe, ##perl...

[12:44] <draget> hmmm Gaim didn't list them

[12:45] <QtPlatypus> cognominal: It is possable to make strings of things other then chars.  I wonder if its possable to make strings of types and use the regex engion to do pattern matching.

[12:46] <spinclad> draget: #perl6 is about perl6 development, which bears only somewhat more than a historical resemblance to perl5 these days

[12:46] <draget> oh, sorry, i'll find a different channel

[12:47] <cognominal> QtPlatypus: indeed 

[12:48] <cognominal> perl6 regexing is very much the explicit building of a tree

[12:48] <spinclad> cognominal: i expect pattern matching, type inference and such to be of great interest in p6l and implementation work

[12:48] <cognominal> and this potentially branches (no pu intended) on attribute grammars and so many things

[12:48] <spinclad> (and considering we have a goal of migrating the implementation to perl6, that calls for them in the language...)

[12:49] <cognominal> the apocalypse on regexen convinces me that Perl6 would be great.

[12:49] <spinclad> yeah, them too

[12:49] <spinclad> (AGs)

[12:50] <cognominal> but with these new insighst, may be we will see it only scratches the surface

[12:51] <spinclad> in any case it must pass @Larry, and seeing it at work will make a significant difference with that

[13:01] <nothingmuch> luqui: ping

[13:20] <Limbic_Region> I am sure everyone has already seen and read autrijus and luke's journal entries at use.perl - but if you haven't, do so - exciting stuff

[13:24] <cognominal> thx, Limbic_Region 

[13:51] <autrijus> :)

[13:51] * autrijus is soaking in mad techniques from GHC

[14:00] <PerlJam> nothingmuch++ (nice analogy :)

[14:21] <integral> hmm, is luqui's blog on one of the planets?  doesn't seem to be on planetsix

[14:30] <svnbot6> r7200 | fglock++ | * pil-run - Junction constructor accepts either Array or ARRAY

[14:30] <fglock> integral: http://use.perl.org/~luqui/journal

[14:36] <autrijus> integral: I just suggested to obra to add it

[14:47] <integral> thanks autrijus !

[14:48] <Limbic_Region> integral - planetsix?

[14:50] <Limbic_Region> if there is a planetsix, where is it and why isn't it listed in the planetarium at planetperl?

[14:52] <integral> Limbic_Region: there's: planet.perl.org, planetsix.perl.org and planet.parrotcode.org

[14:52] <Limbic_Region> I knew about 2 of the 3

[14:52] <autrijus> it should be more prominiently displayed.

[14:53] <Limbic_Region> and the middle one doesn't make sense - it should be planet.perl6.org

[14:53] <Limbic_Region> but I couldn't find it in the planetarium 

[14:54] <autrijus> www.perl6.org is owned by pair networks, Daniel Wright

[14:54] <Limbic_Region> so planet.perlsix.org

[14:55] <Limbic_Region> *shrug* - It doesn't look like it aggragates from any sources I am not already reading so

[14:56] <autrijus> er no, I mean writing daniel wright and/or pair to re-dns it

[14:56] <autrijus> *nod*

[14:56] <gaal> hi, need some more help with ast hacking

[14:56] <autrijus> gaal: yo

[14:56] <gaal> hey :)

[14:56] <gaal> re mergeStmts

[14:57] <autrijus> aye

[14:57] <gaal> remember the Label thingie? i don't see how it should go in

[14:58] <autrijus> mm perlsix.(org|net|com) is entirely unregistered

[14:58] <autrijus> okay...?

[14:58] <autrijus> we had two options; annotate Stmts with another field

[14:58] <autrijus> or invent a Label node to annotate stuff

[14:59] <gaal> we have ruleBlockBody, wher wanted to apply the Labels

[14:59] <gaal> yeah

[14:59] <gaal> first option:

[14:59] <gaal> so we have Stmts !Label !Exp !Exp

[15:00] <gaal> but then mergeStmts has to carry the current Label over to the next Exp

[15:00] <gaal> mergeStmts (Stmts x1 x2) y = mergeStmts x1 (mergeStmts x2 y)

[15:01] <gaal> that would lose Labe information, no?

[15:01] <gaal> unless something like

[15:02] <autrijus> mergeStmts (Stmts l1 x1 x2) y = mergeStmts x1 (mergeStmts l1 x2 y)

[15:02] <autrijus> is the form

[15:02] <autrijus> assuming y is not itself a Stmts

[15:02] <autrijus> which will be a separate case nayways

[15:02] <gaal> right, but ont the rhs, where does the label go?

[15:02] <gaal> for x1 that is

[15:04] <autrijus> I see.

[15:04] <autrijus> that suggests mergeStmts wants to be threading a Label with it

[15:04] <autrijus> :: Exp -> Exp -> Reader Label Exp

[15:04] <autrijus> or simply

[15:04] <autrijus> :: Label -> Exp -> Exp -> Exp

[15:05] <autrijus> the label argument would be the enclosing environment

[15:05] <autrijus> the pragmas in effect, so to speak

[15:05] <autrijus> and then some primitives to merge them.

[15:05] <autrijus> it's a bit hairy.

[15:06] <autrijus> I'll go back to my hotel now; be back in 30 mins; I've been havking all day and I'll hack some more after dinner :)

[15:07] <gaal> enjoy dinner :)

[15:07] <autrijus> :)

[15:07] <gaal> (funny being in the same timezone as you :)

[15:15] <gaal> does some thing like mergeStmts (Stmts l1 x1 x2) y = do { env <- getRuleEnv ; local (const env{ Label = l1 }) (mergeStmts l1 x1 (mergeStmts l1 x2 y))

[15:15] <gaal> make any sense?

[15:17] <gaal> .oO(it will when this is a Reader?)

[16:50] *** ods15_ is now known as ods15

[17:11] <putter> fglock: ping/pong?

[17:23] <autarch> seen clkao

[17:23] <jabbot> autarch: clkao was seen 6 minutes 25 seconds ago

[17:28] <wolverian> btw, is anyone planning a haskell implementation on perl6? :)

[17:33] <wolverian> another thought: do grammars have default parse rules, or so? grammar Foo { ... } Foo.parse(...);

[17:34] *** ods15_ is now known as ods15

[17:40] <fglock> putter: pong

[17:48] <putter> hi fglock.   hmm, deep recursion in chaos.  how poetic. :)  running smoke...

[17:50] <putter> how goes?

[18:01] <fglock_> putter: sorry for the delay

[18:01] <putter> np

[18:01] <putter> :)

[18:02] <fglock_> I implemented Junctions yesterday - I don't  know if this is related to the smoke problem

[18:02] <fglock_> I only ran small tests

[18:02] <putter> fglock++ # Junctions!! :)

[18:04] <putter> test/smoke had lots an lots of increment on undef errors.  they went away when I if(0)'ed the new versions of ++ in PrimP5.

[18:05] <putter> sorry :/

[18:05] <fglock_> I messed a bit with ++ and -- (may be my fault then)

[18:05] <fglock_> I was trying to fix String++

[18:07] <putter> did it break with mm2?

[18:08] <fglock_> it should not break - the problem may be elsewhere. OTOH - array slices is broken

[18:09] <putter> map too.  and... lots.

[18:09] <fglock_> it is nice that the Prim subs didn't have to reimplemented for Junction to work

[18:10] <putter> anything which explicity does a ref($x) eq 'Foo' needs  $x->isa('Foo')

[18:10] <putter> :)

[18:11] <fglock_> ok - I've already fixed some of those isa()

[18:13] <putter> hi nm

[18:13] <putter> fglock_++

[18:14] <putter> I love smokes which are already out of date by the time they finish. :)

[18:15] <putter> sense of rapid progress

[18:18] <putter> is misc_junctions.t supposed to run a long time (4+ minutes)?  lots of tests are currently non-terminating, so I'm wondering whether to kill it.  I don't know whether the non-terminations are due to the transition, or changes made since then.

[18:19] <putter> ah, it finished.

[18:20] <putter> perhaps I'm being too quick on the kill button.  perhaps things are just slower.  ??

[18:22] <fglock_> Junctions are slow - they need to call each sub multiple times

[18:22] <putter> ok

[18:22] <putter> np

[18:26] <putter> stevan: ping?

[18:27] <fglock_> it is possible to use threads, but it could be even slower, because the threads would be very short-lived

[18:27] <nothingmuch> evening

[18:27] <putter> evening nm

[18:27] <Limbic_Region> I haven't been paying attention, but are the junctions slow because of a recursive implementation?

[18:28] <Limbic_Region> Q::S changed to an iterative implementation some time ago fwiw

[18:28] <Limbic_Region> though Q::S is quite limited in functionality compared to junctions

[18:28] <putter> fglock_: threads in p5, eeep!  p5 threads are still the "clone the universe" monsters, yes?

[18:29] * nothingmuch wonders why his smokes suck so much

[18:29] <Limbic_Region> putter - COW is still in the works last I heard

[18:31] <putter> ;)

[18:32] <fglock_> Limbic_Region: I'm not sure if it qualifies as iterative or recursive

[18:32] <Limbic_Region> putter - see http://yapc.mongueurs.net/yapc/talk/?tid=85 for relavent information

[18:33] <Limbic_Region> fglock_ - well, unless it is in p5 I doubt I would be much help.  Was just noting that Q::S has an iterative implementation if necessary/interested

[18:33] <putter> Limbic_Region: tnx for link

[18:34] <Limbic_Region> it isn't the one I was looking for btw

[18:34] <Limbic_Region> the one I was thinking of was more recent and focused specifically on the threading model

[18:34] <Limbic_Region> *shrug*

[18:35] <putter> fglock, LR: so what is a short characterization of junctions (whatever their current state is) vs Quantum::Superpositions?

[18:36] <fglock_> Limbic_Region: yes, we are talking about the p5 implementation - perl5/Perl6-Value/lib/Perl6/Code.pm

[18:36] <Limbic_Region> dunno cause I don't know that the current state is

[18:37] <Limbic_Region> I have spent a fair amount of time under the hood of Q::S though

[18:37] <Limbic_Region> too bad binding isn't overloadable in p5

[18:37] <Limbic_Region> you can't do if any( @foo ) =~ /bar/ in Q::S

[18:38] <fglock_> the problem is, (1|2)==3 expands to (1==3)||(2==3) and takes twice the execution time - bigger Junctions take even longer, and if you have Junctions in both sides, the times multiply

[18:39] <Limbic_Region> fglock - I doubt seriously my understanding of Q::S is going to be much of a help to you without knowing more about the p6 junction specifications

[18:39] <Limbic_Region> and I stopped following that when I found out that

[18:40] <Limbic_Region> all( any(@foo) eq any(@bar)) wouldn't do what I wanted (out of the box)

[18:41] <Limbic_Region> and I know even less about MM1/2 then I do about p6 junctions

[18:42] <Limbic_Region> unless a lot more DWIMery has been added to the p6 junction specifications - I find them less then useful

[18:42] <Limbic_Region> s/then//

[18:43] <fglock_> just in case - Code.pm line 223 - the implementation takes just 20 lines (called from lines 252 and 367)

[18:44] <Limbic_Region> looking now

[18:44] <fglock_> it wraps the normal function call (the Code->do() function)

[18:44] <fglock_> s/function/method/

[18:45] <Limbic_Region> it isn't recursive but that doesn't mean it is necessarily optimized either

[18:46] <Limbic_Region> oh wait

[18:46] <Limbic_Region> it is recursive

[18:47] <Limbic_Region> I didn't see that exand_junctions calls do which calls expand_junctions

[18:47] <fglock_> yes - that's when you have 2 parameters that are junctions, for example

[18:48] <fglock_> it needs to call the subroutine (n * m) times

[18:48] <stevan> putter:pong

[18:49] <Limbic_Region> fglock_ - then Q::S should be able to help

[18:49] <Limbic_Region> it uses Class::Multimethods btw

[18:51] <Limbic_Region> hmmm - or maybe not

[18:51] <putter> stevan: are there any mm construction methods which can't be chained?

[18:51] <stevan> putter: not that I know of,.... but I have never tried it so hard to say

[18:51] <stevan> can you given an example?

[18:51] <putter> ie, ->new()->superclasses()->roles()->add_foo()->add_bar()...

[18:52] <stevan> k

[18:52] <stevan> lemme see whats up

[18:52] <putter> oh, no

[18:52] <putter> no known problem.  just checking on intent as I design something

[18:52] <stevan> ah

[18:52] <stevan> well lets see

[18:53] <stevan> new() will return a new thing of what you want

[18:53] <stevan> if it is Class, then one of these methods will work

[18:53] <kgftr|konobi> theorbtwo: moo?

[18:53] <stevan> but they do not allow further chaining becuase they accessor/mutators

[18:54] <stevan> superclasses returns the array of superclasses, etc

[18:54] <putter> ah.  ok.  tnx.

[18:55] <stevan> putter: BTW - endless recursion in chaos usually means that your method is recursing

[18:55] <stevan> it would say where it really is, except all method calls must pass through there

[18:56] <fglock_> Limbic_Region: there is also Perl6::Junction

[18:58] <nothingmuch> hola pdcawley 

[18:59] <putter> stevan: re recursion.  ok, tnx.  I have to run a smoke before the recent junction changes to see if it's the mm2 transition or a new problem.

[18:59] <pdcawley> hola.

[19:00] <Limbic_Region> fglock_ oh yeah, that is likely to be closer to the p6 junction specification then Q::S anyday

[19:01] <nothingmuch> hola gaal 

[19:13] <fglock__> putter: did the Junctions cause the recursion error?

[19:17] <putter> fglock__: no idea.  the smoke of current state is still running, and I haven't done any specific tests.  the test which recursed was...

[19:18] *** constant is now known as integral

[19:22] <putter> well, the first one was t/builtins/arrays/splice.t  .  but several failed, blowing memory or time limits.

[19:27] <fglock__> splice isn't working in pil-run - that's MM2 related, I think (it was working before that) - I'll take a look in the code

[19:31] <fglock__> putter: Array.pm line 356 (slice method) - 'if ( ref($list) ne 'Array' )' - this may be a problem

[19:32] <putter> yep.  !($list->isa('Array'))

[19:33] <putter> would you like to grep for all instances of ref(  or shall I? :)

[19:33] <fglock__> please do

[19:33] <putter> k

[19:35] <fglock__> !( ref($list) && $list->isa('Array') ) -- because $list may be a p5 thing

[19:35] <fglock__> bbiab

[19:47] <fglock__> back

[20:08] <putter> ok, let's see, ref's...

[20:15] *** autrijus_tw is now known as autrijus

[20:20] <fglock__> putter: UNIVERSAL::isa() doesn't work for MM2 too

[20:35] <putter> ok, that's next

[20:35] <nothingmuch> stevan: ping

[20:36] <nothingmuch> those germans don't seem to understand control flow at all ;-)

[20:37] * fglock__ is trying to find out how Quantum::Superpositions is different from Junctions

[20:38] <nothingmuch> i forgot how, but the answer is "subtly"

[20:38] <nothingmuch> please note: http://search.cpan.org/~cfranks/Perl6-Junction-1.10/Junction.pm

[20:38] <fglock__> Limbic_Regions said there are optimizations in Q::S that make it non-recursive

[20:39] <fglock__> s/Regions/Region/

[20:41] <svnbot6> r7201 | putter++ | Perl6::Value, Perl6::Container, PIL-Run - fix uses of ref() for mm2.  P6::Value and ApiX use separate p6v_isa and p6_isa because their requirements are different, and P6::V does not yet depend on ApiX.

[20:46] <fglock__> Perl6::Junction and Q::S implementations are much more complex than pil-run, because they have to overload p5 primitives. I think it is not very hard to apply Q::S optimizations to pil-run.

[20:48] <fglock__> I wonder what's the meaning of 'qbop' and 'qblop' method names

[20:50] <fglock__> 'quantize binary operation' and 'quantize binary logical operation' ?

[20:51] <stevan> nothingmuch: poing

[20:53] <fglock__> $self->poing() is a reflexive op

[20:53] <svnbot6> r7202 | putter++ | Perl6::Value, Perl6::Container, PIL-Run - fix uses of isa() for mm2. fglock++

[20:59] <svnbot6> r7203 | putter++ | Perl6::Value, Perl6::Container, PIL-Run - p6v_isa() bugfix. 'p6v_isa' -> 'Perl6::Value::p6v_isa'.

[21:04] <fglock__> putter: slices are working! putter++

[21:05] <fglock__> is @a[3|4] supposed to work?

[21:05] <svnbot6> r7204 | putter++ | PIL-Run/lib6/Test.pm: revert use of p6_isa.  Test.pm is p6, not p5.

[21:07] <putter> fglock_: sanity looks sane for the first time since mm2.  do you know of any unresolved mm2 problems, or shall I smoke to look for them,

[21:07] <fglock__> it looks fine to me so far

[21:07] <putter> ok.  smoking...

[21:08] <fglock__> pugs too doesn't accept @a[3|4]

[21:10] <fglock__> putter: do the tests expect true and false to stringify as 'bool::false' and 'bool::true'? I think the correct is '' and '1', but I don't remember where I saw this

[21:11] <putter> ?

[21:11] <fglock__> just in case you saw some failure related to this

[21:12] <putter> pugs behaves as you describe ('' '1')

[21:13] <fglock__> hey, that's right - if I type ~(1==1) it works

[21:13] <putter> and so does pugs -Bperl5.  :)

[21:13] <fglock__> but (1==1) prints bool::true

[21:14] <fglock__> I guess that's (1==1).perl

[21:14] <fglock__> :)

[21:14] * geoffb fades in

[21:14] <putter> the pugs repl shows .perl.  the pugs -Bperl5 repl is still showing .str.   which will change, but not until after mm2 transition.  hopefully today?

[21:14] <geoffb> spinclad, thanks for the kind words; nothingmuch, feel free to comment in the blog comments.  :-)

[21:15] <fglock__> geoffb: nice article

[21:15] <geoffb> fglock__, thanks

[21:18] <putter> fglock: re ->increment, is that speced somewhere?  there seem to be a lot of method names ->foo which seem like they should be ->FOO or ->_foo_ or something.  then again, ->id() is spec :(.

[21:20] <putter> anyone want to email p6l suggesting ->id() should be ->object_id() (ala ruby), as "id" is too useful to users to waste on such a little written method?

[21:20] <fglock__> these methods can be uppercased; increment is not specced

[21:20] <putter> k

[21:20] <fglock__> increment is used by $x++

[21:22] <putter> increment only came to mind because I had seen it recently.  which triggered a general "namespace clutter?" thought.

[21:25] <fglock__> yes, many things could actually be multisubs in prelude now

[21:25] <putter> hmm... $x=3; undefine($x);  isn't working.  complains undefine() is ... undefined.

[21:25] <fglock__> checking

[21:26] <nothingmuch> oh my, what a long post

[21:26] <nothingmuch> putter: yes, I agree

[21:27] <nothingmuch> i like $foo.id for e.g. primary key in a object relational mapper, or a domain specific attribute in my domain specific use for IDs

[21:28] <fglock__> $a.undefine works - I think it doesn't undertand that undefine is a method

[21:28] * geoffb joined p6l to be a Good List Citizen when posting, but already regretting it

[21:29] <nothingmuch> geoffb: it's addicting ;-)

[21:29] <nothingmuch> the first week i was like "fun! perl 6!"

[21:29] <nothingmuch> then i said to myself "uggh.. this is too much"

[21:29] <nothingmuch> now it is the only list that I really read almost fully

[21:29] <geoffb> wow, good for you I guess.

[21:30] <geoffb> I skipped #1, and now sit square at #2.

[21:30] <geoffb> I no longer read lists much, except for very low traffic (like 1-2/day), and even then only a couple of those

[21:30] <putter> fglock: tnx... that suggests a bigger problem (in ApiX)...

[21:30] <nothingmuch> i am subscribed to several lists

[21:30] <nothingmuch> but i mark-read-thread almost all

[21:31] <nothingmuch> the reason I read is that I like to keep watch for things that interest me

[21:31] <nothingmuch> for example the catalyst mailing list

[21:31] <nothingmuch> p6i

[21:31] <nothingmuch> darcs-users and darcs-devel

[21:31] <geoffb> I am beginning to make peace with the fact (albeit slowly) that too much interests me

[21:31] <nothingmuch> i don't post or even read those, and I am by no means a developer, but I still like to watch the subjects

[21:31] <nothingmuch> i think everyone here has that problem

[21:32] * nothingmuch is completely unable to cope with it

[21:32] <nothingmuch> look at harrorth

[21:32] <nothingmuch> i have so much I want to do with it

[21:32] <nothingmuch> but I feel that it's just ever so slightly lost the trend at which i learned from it

[21:32] <nothingmuch> so I naturally moved on, even though I really want to work on i

[21:32] <nothingmuch> t

[21:33] <geoffb> nodnod

[21:33] <putter> hmm.  (\@a).isa('Array')  is false?

[21:33] <geoffb> at least you had an open repo

[21:33] <geoffb> s/had/have/

[21:33] <nothingmuch> yes

[21:33] <nothingmuch> i'm all up for that now

[21:33] <nothingmuch> if i'm going to have these 60% projects I might as well share the unfinished work

[21:34] <nothingmuch> and not hide it waiting for the never reached release date ;-)

[21:34] <putter> fglock__: pugs says  (\@a).isa('Array') is true.  pilrun says not.  ?

[21:34] * geoffb finally just made a /dev/urandom section of his site to hold that stuff

[21:34] <nothingmuch> pdcawley_: do you have a paypal account?

[21:35] <nothingmuch> ah yes, I have a project that is supposed to make /dev/random into a tree automatically for my website

[21:35] <fglock__> putter: that's a problem in Ref.isa - Code.pm 325

[21:35] <nothingmuch> i know how it'll work, but it's too much to implement it right now

[21:35] * nothingmuch needs to quit his job, and be a student

[21:35] <fglock__> it should "auto-deref" Array and Hash

[21:35] <fglock__> just like it does with other methods

[21:36] <putter> can you fix?

[21:36] <fglock__> sure

[21:36] <nothingmuch> pdcawley_: anyway, at the rate I'm posting I guess I should support you & matt with $2 a month subscription payments... That way you can pay for the coffee it should take you to read through my mails ;-)

[21:37] <nothingmuch> shit, rindolf has a new project

[21:37] <putter> tnx :)

[21:38] <nothingmuch> http://perlmeme.org/

[21:40] <nothingmuch> "creating a simple cgi script" has the dillemas: "object oriented or not", makes you create a CGI object without knowing what it represents, talks about output without telling you what the CGI environment actually looks like, and encourages using the HTML generation features of CGI

[21:40] <fglock__> putter: done

[21:40] <nothingmuch> what an aweful example

[21:40] <fglock__> putter: there is a bug - tied Array and Hashes should not auto-deref - I'll fix this later

[21:40] <nothingmuch> there is absolutely no value, it's only merit is scaring the n00bs away so that they will go and do PHP

[21:42] <fglock__> bbiab

[21:43] <putter> ok.  thanks fglock.

[21:43] * nothingmuch goes to read and sleep

[21:46] <svnbot6> r7205 | fglock++ | * perl5/Ref - Ref to Array isa('Array')

[21:48] <putter> hmm.  so if an object has AUTOMETH, does that mean one can  userandomstringhere($o) to call it?

[21:49] *** flgr_ is now known as flgr

[23:20] <Juerd> Does anyone happen to know why feather is down, or since when it has been down?

[23:21] <rafl> The last time I was logged in was yesterday, IIRC.

[23:28] <rafl> Juerd: AFAIK evalbot ran on it. Maybe its part time can help

[23:28] <Juerd> Oh, heh, indeed it can

[23:28] <Juerd> And not just its

[23:28] <Juerd> 21:19 -!- chip [n=chip@194.145.200.126] has quit [Read error: 113 (No route to host)]

[23:28] <Juerd> 21:19 -!- Limbic_Region [n=81217719@p3m/member/Limbic-Region] has quit [Read error: 113 (No route to host)]

[23:28] <Juerd> 21:19 -!- fglock_ [n=c8115922@feather.perl6.nl] has quit [Read error: 113 (No route to host)]

[23:28] <Juerd> 21:19 -!- autrijus [n=autrijus@feather.perl6.nl] has quit [Read error: 113 (No route to host)]

[23:28] <Juerd> 21:21 -!- broquaint [n=broquain@ts3-126.twistspace.com] has quit [Read error: 113 (No route to host)]

[23:28] <Juerd> 21:21 -!- fglock [n=c8b690e6@feather.perl6.nl] has quit [Read error: 113 (No route to host)]

[23:28] <Juerd> 21:22 -!- evalbot_7200 [n=evalbot_@feather.perl6.nl] has quit [Read error: 113 (No route to host)]

[23:29] <Juerd> That's all feather, in different stages of reverse (wow, some people have been online for a long time!)

[23:29] <Juerd> Or rather, had been.

[23:29] <rafl> Yes. Any Idea what's wrong with feather?

[23:29] <Juerd> No

[23:29] <Juerd> All I know is that it's unreachable.

[23:30] <Juerd> I got an email from chip

[23:30] <Juerd> I can't stand though that I just got home from a place very nearby feather

[23:30] <Juerd> I briefly considered checking my email there

[23:30] <Juerd> And didn't

[23:30] <Juerd> Fuck.

[23:30] <Juerd> But - it'll have to wait until I've slept

[23:30] <Juerd> It's 0132 am here

[23:30] <rafl> Here as well.

[23:31] <Juerd> And as this box isn't making money, it can wait ;)

[23:34] <meppl> gute nacht

