[00:00] <autrijus> "A day may come when the hacking of humankind fails, when we forsake our keyboard and turn all programming to machines. But it is not this day -- this day we code!" :-)

[00:00] * nothingmuch really goes now... Ciao!

[00:00] <autrijus> see ya

[00:01] <theorbtwo> Later.

[00:01] <theorbtwo> autrijus++

[00:02] <knewt> autrijus: any idea when you'll be getting in to vienna?

[00:03] <autrijus> knewt: 8th 6am

[00:03] <knewt> ouch. that's early.

[00:03] <autrijus> yeah.

[00:03] <knewt> if i get the flight i'm looking at right now i'll be getting in at 3:10pm

[00:04] <svnbot6> r3621, nothingmuch++ | Clarify on what is a C<Syn>, where special case of thereof was confusingly described like it was any C<Syn>

[00:05] <autrijus> ...and so nothingmuch also learned the secret of working in his sleep.

[00:05] <knewt> no-one will ever beat /you/ at that trick though *g*

[00:06] <autrijus> :D

[00:06] <knewt> autrijus++ # i don't think i've ever seen anyone else write quite so much code whilst sleeping

[00:06] <elmex> elmex--

[00:06] <elmex> for being lame

[00:09] <wolverian> hmm. svk pull is slow.

[00:10] <eric256> why use svk instead of svn?

[00:10] <wolverian> curiosity.

[00:11] <wolverian> I guess pull is a bit redundant for me though.

[00:12] <eric256> lol. i just wondered if there was some cool svk feature i was missing out on

[00:12] <clkao> "Be Autrijus. Use the tool."

[00:13] <autrijus> heh.

[00:13] <wolverian> hmm. what is the difference between svk pull and svk up -sm?

[00:13] <autrijus> the first one is easier to type.

[00:13] <wolverian> :)

[00:20] <autrijus> I think I need to sleep now and punt journal until I wake up :)

[00:20] * autrijus waves &

[00:20] <clkao> lazy autrijus

[00:24] <autrijus> force me! evaluate me! reduce me to weak normal head form! ;)

[00:24] <theorbtwo> Weak normal head form?

[00:24] <clkao> [work] autrijus

[00:25] <autrijus> theorbtwo: http://foldoc.doc.ic.ac.uk/foldoc/foldoc.cgi?Weak+Head+Normal+Form

[00:26] <autrijus> as you can see, I dyslexed it too :)

[00:26] <autrijus> maybe weak head _is_ my normal form.

[00:29] <autrijus> today saw 90+ commits.

[00:29] <autrijus> crazy.

[00:30] <autrijus> I still remember when 40 was considered normal.

[00:30] <autrijus> and only 7 out of 90 is mine.

[00:32] <clkao> there's no exporter yet?

[00:32] <autrijus> is export

[00:32] <autrijus> sub foo () is export { ... }

[00:33] <autrijus> finer control from the user side is not yet implemetned

[00:41] <clkao> current build system for ext sucks

[00:42] <autrijus> please refactor away.

[00:42] <wolverian> are trivial (spelling) fixes to 02Internals.pod okay?

[00:42] <autrijus> wolverian: sure, nothingmuch explicitly said okay

[00:42] <wolverian> ah, right. thanks.

[00:42] <wolverian> now to figure out how to commit with svk :)

[00:44] <cognominal> wolverian: I did a commit than a push

[00:44] <cognominal> not pretending that the best way, that the one I found

[00:45] <wolverian> right. push keeps saying 'empty merge' to me. 

[00:45] <cognominal> yea, there is all sort of scary message

[00:45] <wolverian> I guess my svk is _old_ though

[00:46] <clkao> warn "hate" will give me terrifying *** Error: MSG

[00:50] <wolverian> hmm. that might have done it.

[00:51] <wolverian> I only had to give my openfoundry password thrice :)

[00:53] <theorbtwo> If your openfoundry username isn't the same as your local username, it can produce problems.

[00:53] <svnbot6> r3622, Stevan++ | tests for classes that are loaded with nested "use" statements; some more bugs in here

[00:53] <svnbot6> r3623, wolverian++ |  r224@chronoa:  wolverian | 2005-05-22 03:44:08 +0300

[00:53] <svnbot6> r3623, wolverian++ |  Spelling fixes to 02Internals.pod

[00:53] <clkao> it seems lives_ok { } are run in reverse order for me?

[00:53] <wolverian> theorbtwo: it is the same.

[00:54] <wolverian> theorbtwo: svk just did three merges, for some reason.

[00:54] <wolverian> svk also apparently inserted some extra stuff in the commit message. :)

[00:54] <clkao> youcan use smerge --verbatim -lf .

[00:54] <autrijus> you can also use push --verbatim

[00:55] <wolverian> ah. thanks!

[00:59] <svnbot6> r3624, autrijus++ | * sigh, theorbtwo was right.  Pugs.Compile.Haskell can't use a

[00:59] <svnbot6> r3624, autrijus++ |   signature for MainCC.

[01:01] <eric256> i'm guessing circumfix isn't implemented yet?

[01:01] <autrijus> you guessed right!

[01:01] <eric256> lol. okay

[01:02] <theorbtwo> Sorry, autrijus.

[01:02] <theorbtwo> (Hey, why didn't that theorbtwo get ++ed?)

[01:02] <autrijus> theorbtwo++

[01:03] <kelan> is that because MainCC is defined in TH?

[01:04] <autrijus> kelan: you know, you are right! I know how to fix!

[01:05] <kelan> well when i went to find out what TH is, the website lists "can't splice in types" as one of the current limitations

[01:05] <kelan> i remember theorbtwo asking about that a few days ago

[01:06] <autrijus> no, it's only because I specced the type from outside th

[01:06] <autrijus> should just do it in th.

[01:07] <theorbtwo> autrijus, when I tried that it made the impossible happen.

[01:07] <kelan> that was funny

[01:08] <autrijus> theorbtwo: you need Heart of Gold to leverage that.

[01:08] <autrijus> specifically, make clean.

[01:09] <autrijus> ((a sad excuse of) journal) up. 

[01:09] * autrijus waves and sleeps for real &

[01:09] <kelan> okay, the scene in the recent hitchhiker movie where the heart of gold makes them all out of fabric and string: best scene i've seen in a movie in a long time

[01:09] <svnbot6> r3625, autrijus++ | * kelan++ for inspiring me to figure out the problem with

[01:09] <svnbot6> r3625, autrijus++ |   Pugs.Compile.Haskell and missing signatures.

[01:09] <clkao> i have basic Benchmark.pm

[01:09] <clkao> now how do i do format prointing

[01:10] <clkao> autrijus: work more!

[01:10] <kelan> read A07!

[01:10] <clkao> ok

[01:10] <clkao> is it implmemented?

[01:10] <clkao> e07 i think

[01:10] <kelan> yeah, A07 just says: formats are out of the core. see damian.

[01:11] <kelan> theres a p5 module implementing p6 formats on cpan

[01:12] <clkao> i surely mean in pugs

[01:12] <eric256> hmmm using 'say' in a class method with no parameteres is calling it with the object as the paramter...

[01:12] <eric256> oh i bet say using $_ as a default parameter. 

[01:15] <svnbot6> r3626, autrijus++ | * reindent PA02's verbatim blocks.  Tab-indent in code segments

[01:15] <svnbot6> r3626, autrijus++ |   exceeded 80col, and Pugs source use 4-space indenting anyway.

[01:16] <wolverian> (4 space indenting)++

[01:17] * eric256 thought autrijus was sleeping.

[01:18] <eric256> is there a proper format for defaulting values of class attributes?

[01:18] <kelan> he codes in his sleep

[01:18] <kelan> thats how he can get so much done

[01:19] <wolverian> eric256: format?

[01:19] <kelan> something like `has $.foo = 3`?

[01:19] <kelan> not sure what hes asking

[01:19] <kelan> probably a semi-colon would be in order as well

[01:19] <wolverian> me neither. that's why I asked :)

[01:19] <eric256> has $.foo = 3 is rw;

[01:19] <eric256> or

[01:20] <eric256> has $.foo is rw = 3;

[01:20] <kelan> probably would have to be the second, i would think

[01:20] <wolverian> yes.

[01:20] <kelan> you're applying the `is rw` to the attribute, not the 3

[01:20] <wolverian> probably. maybe.

[01:21] <kelan> are class attributes ro by default? that seems inconvenient

[01:21] <eric256> hmm. neither parse in pugs yet so it doesn't matter. lol

[01:21] <wolverian> kelan: yes.

[01:22] <wolverian> however, you can declare your class as rw

[01:22] <wolverian> then the default switches around to rw. :)

[01:23] <kelan> is that strictly for generating accessors?

[01:23] <wolverian> I don't know. see 'Attributes' in S12. it doesn't mention other effects it might have.

[01:23] <kelan> so that if you refer directly to an attribute inside the class you don't need `is rw`?

[01:23] <wolverian> eric256: these are object attributes, by the way. class attributes are declared with 'my' or 'our'

[01:24] <wolverian> kelan: "Some traits are copied to the accessor method. The rw trait causes the generated accessor to be declared rw, making it an lvalue method. The default is a read-only accessor."

[01:24] <wolverian> kelan: I assume the variable itself is mutable by default.

[01:24] * kelan nods

[01:25] <kelan> that seems more sensible

[01:25] <wolverian> I guess one would do 'has $.foo is constant is rw = 3;' to make it mutable from outside but not inside. :)

[01:25] <wolverian> hmm. the accessor might fail though, since it's a constant now.

[01:27] * eric256 can't picture a circumstance where you would want it mutable by outside but not inside

[01:27] <wolverian> me neither. :)

[01:28] <wolverian> I guess that's a false dichotomy, anyway, as the variable is always changed inside the class (by the accessor methods)

[01:29] <eric256> i just found out i could start typing names and hit tab to let trillian finish then

[01:29] <eric256> them*

[01:30] <kelan> and in vim you can start typing variable names and hit ctrl-n to finish them

[01:30] <kelan> it even cycles if there is more than one variable with that prefix

[01:30] <kelan> don't let long variable names annoy you ever again!

[01:53] <Chewie[]> kelan: uhh. does that work? /me tries

[01:54] <Chewie[]> kelan: holy crap. and i thought i knew everything about good old Vim.

[01:55] <kelan> :)

[01:55] <kelan> ctrl-p cycles the other direction, whatever that means

[01:55] <kelan> but it also does the completion

[01:56] <kelan> so whichever is easier to hit

[01:56] <Chewie[]> kelan: hmm. it's greedy. completes tokens; not just variable names.

[01:56] * Chewie[] put _testing in a comment and it grabbed it.

[02:02] <vcv-> Ack. Is there anywhere to get a precompiled version of pugs for windows?

[02:06] <kelan> see this message for a possibility: 

[02:06] <kelan> hmm

[02:06] <kelan> http://www.mail-archive.com/perl6-compiler@perl.org/msg00723.html

[02:07] <vcv-> cool thanks

[02:08] <vcv-> wait..i compiled pugs already.. :)

[02:13] * scook0 realises that "find -name '*.hs' | xargs rm" was not a clever thing to do...

[02:46] <knewt> created my first pugs patch now :)

[02:46] <svnbot6> r3627, scook0++ | Fixed a comment that was confusing Haddock

[02:50] <ingy> holaa

[02:51] <ingy> http://pugs.kwiki.org was broken 

[02:51] <ingy> due to a bad symlink after I moved kwiki.org to a new faster server

[02:51] <ingy> my apologies

[02:51] <ingy> all fixed now.

[02:59] <AtnNn> is $*_ specific to pugs?

[03:12] <meppl> gute nacht

[03:12] <meppl> good night

[03:17] <knewt> autrijus: when you wake up... i've made my first pugs patch :)

[05:02] <nothingmuch> morning

[05:19] <nothingmuch> knewt: do you need commit accesss?

[05:20] <nothingmuch> because I can arrange that, as can stevan, theorbtwo, obra, hcchien...

[05:21] <nothingmuch> ping me back within a few minutes, but after that i'll be going to work, and need to run an errand before I get there

[05:23] <nothingmuch> either way please type your email in chat so that someone can send you an invitation

[05:24] <Qiang-zh> is schwern here ? 

[05:25] <knewt> nothingmuch: [email@hidden.address]
[05:26] <nothingmuch> Qiang-zh: occasionally, but I haven't seen him in a while

[05:26] <nothingmuch> knew or knewt?

[05:26] <Qiang-zh> nothingmuch: do you know how i can contact him ? 

[05:27] <nothingmuch> Qiang-zh: on two occasions I've mailed him and got back a reply

[05:27] <Khisanth> jabbot: seen schwern

[05:27] <jabbot> Khisanth: I havn't seen schwern , Khisanth

[05:27] <nothingmuch> since I don't know him personally I can't offer a better medium... =P

[05:27] <nothingmuch> jabbot: seen Schwern

[05:27] <jabbot> nothingmuch: Schwern was seen 5 days 2 hours 53 minutes ago

[05:27] <Qiang-zh> a friend of mine translating an article from him and he wanted to ask for a permission for that. but couldn't find his contact info..

[05:27] <knewt> nothingmuch: as an id? knew i think

[05:29] <nothingmuch> Qiang-zh: http://search.cpan.org/~mschwern/ has an email

[05:29] <nothingmuch> knewt: invite sent, welcome aboard!

[05:29] <Qiang-zh> nothingmuch: thx!

[05:30] <nothingmuch> Qiang-zh: btw, which article is it?

[05:30] <Khisanth> he was here a week ago ...

[05:30] <nothingmuch> if it's part of a package of sorts, then it's probably under the GPL/Artistic licenses, in which case you're allowed

[05:33] <Qiang-zh> nothingmuch:  this one . http://mungus.schwern.org/~schwern/papers/Why_I_Am_Not_A_Java_Programmer/why.html

[05:34] <knewt> nothingmuch: ta, got it and i

[05:34] <knewt> 'm in

[05:34] <Qiang-zh> translate it into chinese. we want to stop the java madness in china :D

[05:34] <nothingmuch> knewt: great!

[05:35] <nothingmuch> Qiang-zh: good luck... I wonder if an article can get a billion people to dump java ;-)

[05:35] <nothingmuch> anyway, i'm off to work

[05:35] <Qiang-zh> nothingmuch:   have a good day :)

[05:35] <nothingmuch> thanks

[05:35] <nothingmuch> see you all soon =)

[05:37] <knewt> [[ svk push --verbatim ]] to push back correctly from svk?

[05:38] <eric256> arg its flattening my lists. arg.

[05:38] <eric256> prompt ("Choose a weapon:",  

[05:38] <eric256>           [ [ 1, "Sword"],

[05:38] <eric256>         [ 2, "Spell"] ]);

[05:38] <eric256> is being treated like

[05:38] <eric256> Choose a weapon: 1 Sword 2 Spell :

[05:39] <eric256> i

[05:39] <eric256> i've got multi sub prompt (Str $prompt) { and

[05:39] <eric256> multi sub prompt (Str $prompt, @data) {

[05:39] <eric256> but it doesn't like me ;(

[05:46] <eric256> stupid meaningful space. nevermind

[05:47] <knewt> ok, fingers crossed this works properly...

[05:48] <knewt> dammit. it's asking me about my local username, even though i've put the remote username in the url. i wonder what i have to do

[05:52] <eric256> svn? or svk?

[05:52] <knewt> svk

[05:54] <knewt> i've never commited back to an http upstream before. only svn+ssh

[05:54] <knewt> if i change the USER var for the call i wonder if it'll then cache the correct credentials for me

[05:57] <knewt> gah. nope. still asking for a password for my local username

[05:57] <eric256> i don't know svk. with svn you just enter the user/pass on first commit and it remembers them from then on. svn++

[05:57] <eric256> perlbot karma svn

[05:57] <perlbot> Karma for svn: 2

[05:57] <eric256> lol

[05:58] <eric256> perlbot karma eric256

[05:58] <perlbot> Karma for eric256: 12

[05:58] <eric256> perlbot karma perlbot

[05:58] <perlbot> Karma for perlbot: 4

[05:58] <eric256> perlbot karma autrijus

[05:58] <perlbot> Karma for autrijus: 328

[05:58] <eric256> sorry had to play for a minute

[06:10] <nothingmuch> morning

[06:14] <knewt> yaaaay, it worked.

[06:14] <svnbot6> r3628, knew++ | * Added myself to AUTHORS

[06:14] <svnbot6> r3629, knew++ | * Made backend selection case-insensitive

[06:14] <svnbot6> r3629, knew++ | * And updated t/pugsrun/09-dash-uppercase-c.t to test it

[06:14] <eric256> night all

[06:15] <knewt> just had to press through the first request for password with my local username, after which it prompted me for a username choice. which it's now cached

[06:16] <nothingmuch> knewt++

[06:16] <nothingmuch> huraah!

[06:16] <nothingmuch> anywho, C++ time for me

[06:16] <nothingmuch> see you all after they release me from the asylum i'll end up in

[06:17] <knewt> heh. in a couple of days or so i think i'll go back to kernel-mode C for a little bit

[06:17] <nothingmuch> ah, kernels should be nice... too critical to be done incorrectly

[06:17] * nothingmuch got a funky (adjective denotes smell, not cool level) project

[06:17] <nothingmuch> which no one really cared about

[06:19] <knewt> debugging kernel drivers is certainly much nicer when you can boot up to the login prompt in about 5 seconds

[06:19] <svnbot6> r3630, eric256++ | Added baddies and rooms to wizard.p6

[06:20] <knewt> perlbot karma knew

[06:20] <perlbot> Karma for knew: 3

[06:20] <knewt> perlbot karma knewt

[06:20] <perlbot> Karma for knewt: 6

[06:20] <knewt> heh, cool. combined score of 9 already

[06:21] <nothingmuch> ook, that's silly

[06:22] <nothingmuch> this granola is soooo terrible

[06:22] <knewt> irc is virtually the only thing i use knewt on, and even then i don't use it on efnet (although that's just because someone else already uses it)

[06:23] <nothingmuch> so why don't you switch to 'knew'?

[06:23] <knewt> i use yet another id for shell accounts :)

[06:24] <knewt> i actually started out using knew on irc, but changed over to knewt one day on a whim and decided to keep it

[06:24] <nothingmuch> oh well =)

[06:25] <knewt> and although i haven't got round to doing anything with it yet, i've got a domain name  ingeknewity.net

[06:25] <knewt> with a newt as part of the logo

[06:26] <nothingmuch> so change all your other logins to 'knewt' ;-)

[06:26] <knewt> well, knew is actually derived from my name. knewt is just a nice play on words

[06:38] <nothingmuch> morning castaway 

[06:39] <nothingmuch> morning Aankhen`` 

[06:39] <Aankhen``> Morning nothingmuch. :-)

[07:36] *** brentdax_ is now known as brentdax

[08:02] <Aankhen``> 103/5586 subtests failed

[08:02] <Aankhen``> (Win32, MSVC++)

[10:31] <meppl> guten morgen

[11:52] <nothingmuch> my brain hurts! waaah!

[11:52] <nothingmuch> too much dynamic linking for my perlish background

[11:52] <nothingmuch> *sigh*

[12:09] * nothingmuch needs a hug and a shot

[12:09] <nothingmuch> hola iblech 

[12:21] <iblech> hi :)

[12:29] <nothingmuch> gah!

[12:30] <Aankhen``> Where is svnbot?

[12:30] <iblech> oh!

[12:30] <iblech> I'm restarting it

[12:30] <iblech> weird

[12:30] <AtnNn> it netsplit

[12:31] <Aankhen``> Ah.

[12:32] <Aankhen``> Mmm... how would you check if $foo is a reference?

[12:32] <Aankhen``> $foo.ref?

[12:32] <Aankhen``> (like Perl 5's `if (ref $foo eq "ARRAY")`)

[12:32] <iblech> if $foo ~~ Array {...}

[12:32] <Aankhen``> OK.

[12:32] <Aankhen``> Thanks.

[12:53] <wolverian> which does $foo.does(Array) behind the scenes 

[12:56] <iblech> And this does $foo.meta.does(Array) behind the scenes

[12:56] <svnbot6> r3634, Aankhen++ | * &CGI::header -- basic support for stringified cookies.

[12:56] <svnbot6> r3634, Aankhen++ | * renamed the "cookie" parameter to "cookies" to better reflect the workings of the code.

[13:08] <svnbot6> r3635, asavige++ | Added => ??:: precedence test to pairs.t

[13:08] <svnbot6> r3636, iblech++ | Added ".." as a shell command which outputs the AST unformatted.

[13:08] <svnbot6> r3637, iblech++ | FIRST { ...; undef } works now, too.

[13:08] <svnbot6> r3638, iblech++ | Added a test testing that FIRST { ...; undef } blocks really run only once.

[13:15] <Aankhen``> Hey iblech, is there any chance you could get the tests in t/oo/submethods.t to pass? :-D

[13:15] <svnbot6> r3639, adehohum++ | Tests: undef bugs, xx on lists, subrule captures

[13:16] <iblech> Aankhen``: :) submethods are tricky... Currently I'm working on INIT {...}

[13:17] <Aankhen``> Ah well, everyone has their priorities. ^_^

[13:18] <Aankhen``> Ooo, overloading fun!

[13:29] <iblech> Ok, I got INIT {...} in void context working

[13:29] <iblech> Now my $x = INIT {...}

[13:36] <iblech> Yeah, got it :)

[13:36] <iblech> Writing tests for it and then checking in...

[13:36] <Aankhen``> Could someone run t/oo/class/basic.t and see how many tests fail?

[13:37] <iblech> sure

[13:38] <iblech> 4-8 fail

[13:38] <Aankhen``> Well, I un-eval'd a lot of them, and now only 4, 6 and 8 fail.

[13:39] <iblech> ah!

[13:39] <Aankhen``> Should I commit?  Or is there a reason why eval_ok() was used instead?

[13:39] <iblech> yes

[13:39] <iblech> eval_ok('...') doesn't find the variables

[13:39] <iblech> commit

[13:39] <Aankhen``> Indeed.

[13:39] <Aankhen``> OK.

[13:40] <Aankhen``> Inheritance doesn't seem to be working.

[13:40] <Aankhen``> And eval() seems to create a whole new lexical -- that's not the right word, but it's the closest I could think of :-) -- context which doesn't include any variables or classes or anything.

[13:42] <iblech> The problem is: eval_ok(...) runs eval(...) in the scope of Test::eval_ok. If you write ok eval(...), the code is evaluated in the correct scope.

[13:42] <svnbot6> r3640, adehohum++ | Tests: loop {} while

[13:42] <svnbot6> r3641, Aankhen++ | * t/oo/class/basic.t: un-evaled a lot of tests.

[13:47] <stevan> Aankhen``: I have stoped using eval_* in favor of a lives_ok {} and is($val_from_lives_ok_block)

[13:47] <Aankhen``> OK.

[13:47] <stevan> it tends to give better error messages

[13:47] <stevan> it is longer to type though

[13:47] <Aankhen``> Heh.

[13:47] <stevan> ok I am starting the changelog, this is gonna be a big one :)

[13:48] <iblech> :)

[13:48] <stevan> and it's all your fault iblech ;)

[13:48] <iblech> :D

[13:51] <Aankhen``> $karma iblech

[13:51] <Aankhen``> Hrm.

[13:51] <autrijus> greetings!

[13:52] <Aankhen``> perlbot karma iblech

[13:52] <iblech> hi :)

[13:52] <Aankhen``> Hi autrijus. :-)

[13:52] <stevan> hey autrijus 

[13:52] <Aankhen``> Oh, right, no perlbot.

[13:52] <stevan> karma iblech

[13:52] <knewt> 'lo autrijus 

[13:52] <stevan> hmmm, the bots must have left with the freenode upgrade

[13:52] <svnbot6> r3642, autrijus++ | * I'm sorry but BOM <feff> must be excised from AUTHORS ;-)

[13:52] <svnbot6> r3643, autrijus++ | * s:globally// is now s:global//

[13:52] <svnbot6> r3643, autrijus++ | * To interpolate @a, @a[] is now needed

[13:52] <svnbot6> r3644, autrijus++ | * first step in making legible stack trace in error

[13:52] <svnbot6> r3644, autrijus++ |   messages -- VError now carries [Pos], not Exp

[13:52] <svnbot6> r3645, Aankhen++ | * cleaned up t/operators/operator_overloading.t

[13:52] <stevan> jabbot: you there?

[13:53] <Aankhen``> Not in the nicklist, at any rate.

[13:54] <stevan> ahh,..I didnt like that bot anyway :P

[13:54] <Aankhen``> LMAO.\

[13:56] <stevan> autrijus: I am going to add revision numbers to the Changelog

[13:56] *** autrijus changes topic to:  pugscode.org <Overview Journal Logs> | pugs.kwiki.org

[13:56] <autrijus> stevan: sure, if you think that reads better

[13:56] <autrijus> a change may be done over several checkins tho

[13:57] <stevan> no, sorry, I mean this "== Changes for 6.2.3 - May 12, 2005 - r3111

[13:57] <autrijus> like (#1234, #1235, #1236) ?

[13:57] <autrijus> ahhh.

[13:57] <autrijus> that makes more sense :) sure

[13:57] <autrijus> == Changes for 6.2.3 (r3111) - May 12, 2005

[13:57] <stevan> makes my life easier too ;)

[13:57] <autrijus> sure :)

[13:59] <iblech> Gonna implement CHECK {...}

[13:59] <svnbot6> r3646, iblech++ | * INIT {...} blocks in void context and as rvalues. :)

[13:59] <svnbot6> r3646, iblech++ | * Added a test for them (t/statements/init.t).

[13:59] <svnbot6> r3646, iblech++ | * Usual svn props added to t/rules/named_rule_capture.t.

[14:00] <Aankhen``> Does it make more sense to TODO all failing tests or leave them there for people to fix?

[14:00] <autrijus> Aankhen``: take a glance at them -- if they are regressions, let them fail

[14:00] <autrijus> if they are new tests and features, :todo<feature> them

[14:01] <Aankhen``> A'right.

[14:01] <clkao> hi autrijus

[14:01] <autrijus> greetings clkao san

[14:01] <autrijus> did you submit your talk?

[14:01] <clkao> no

[14:01] <clkao> working on it

[14:01] <clkao> can we get rusage in pugs?

[14:02] <clkao> like times in perl5

[14:02] <knewt> clkao: backend selection is now case-insensitive

[14:04] <clkao> knewt++

[14:05] <clkao> autrijus: do you want to be cospeaker

[14:05] <autrijus> clkao: sure, getProcessTimes can work

[14:06] <autrijus> not sure if System.Posix.Process.getProcessTimes is avail on win32 tho

[14:06] <autrijus> may need to Compat.hs it

[14:06] <autrijus> knewt: want to hack it in? :)

[14:07] <knewt> clkao: svk threw me for a bit in wanting to use my local username to authenticate with, but i eventually figured out that just hitting enter would prompt it to ask for a username. and of course it's cached now so won't be an issue again

[14:07] <autrijus> clkao: I can cospeak it, sure

[14:07] <autrijus> knewt: it's a svnauth thing... svn does the same

[14:07] <autrijus> the prompt may be improved though

[14:08] <knewt> lufthansa-- # when purchasing tickets online the credit card holder must be travelling

[14:09] <knewt> guess i'll try phoning them up tomorrow and see if ordering by phone is nicer

[14:11] <clkao> autrijus: btw, does warn "foo" has to be that annoying telling me Error?

[14:11] <autrijus> clkao: it no longer.

[14:11] <autrijus> you are using ancient pugs

[14:12] <iblech> "ancient" :)

[14:12] <clkao> right, 8 hrs ago = ancient

[14:12] <autrijus> yeah

[14:12] <autrijus> it's 28.8k seconds ago!

[14:12] <clkao> have you seen m$ office advertisement about dinosours?

[14:13] <autrijus> no. what is that?

[14:14] <clkao> very stupid everywhere in tube station

[14:14] <autrijus> ah. I see it now.

[14:14] <clkao> autrijus: http://www.microsoft.com/office/evolve/default.mspx

[14:15] <autrijus> I already played thru it

[14:16] <autrijus> I wonder if we should make an ad about radioactive-retroviral engineered mutant pugs

[14:19] <svnbot6> r3647, adehohum++ | Tests: instance methods calling other instance methods

[14:22] <knewt> i don't suppose there's a -commits list?

[14:22] <iblech> There is

[14:22] <clkao> mugwump has one

[14:23] <iblech> But I don't recall its address

[14:23] <iblech> http://rt.openfoundry.org/Foundry/Project/Source/index.html/pugs/log/ is nice

[14:24] <autrijus> knewt: mugwump's is http://lists.utsl.gen.nz/mailman/listinfo.cgi/pugs-commits

[14:24] <knewt> autrijus: yeah, just found it thanks to the searchable irc logs :)

[14:24] <autrijus> >1000 commits per month

[14:27] <knewt> oh damn. just realised that since i don't have a static i'd have to pull the email down anyway. so i might as well just put together a cronjob that runs every 5 or 10 minutes and triggers a sync whenever a threshold of new commits is reached

[14:28] <autrijus> clkao: got some time?

[14:28] <autrijus> clkao: I wonder if I can walk you thru in implementing times() ;)

[14:29] <autrijus> should take ~10min

[14:30] <clkao> evil autrijus

[14:30] <clkao> ok let's start

[14:30] <clkao> you have 10 min

[14:30] <autrijus> cool

[14:30] <autrijus> so first, add the times() function to Prim.

[14:30] <autrijus> open src/Pugs/Prim.hs

[14:31] <autrijus> go to line 1175

[14:31] <autrijus> copy that line

[14:31] <autrijus> change the return type from Num to List 

[14:31] <autrijus> happy?

[14:31] <clkao> ok

[14:31] <autrijus> now, you want to return a 4-tuple

[14:31] <autrijus> loop up "time"

[14:31] <clkao> btw times is not in s29

[14:31] <autrijus> right, so we need to ping that as well.

[14:32] <autrijus> anyway. add op0 "times"

[14:32] <autrijus> it ignores any input args

[14:32] <autrijus> so it's a const

[14:32] <clkao> just below time is alright?

[14:32] <autrijus> sure

[14:32] <autrijus> to return multiple values, use VList

[14:32] <autrijus> return $ VList [0,0,0,0]

[14:32] <autrijus> but that won't work, because 0 is not Val

[14:32] <autrijus> return $ VList [VNum 0, VNum 0, VNum 0, VNum 0]

[14:32] <autrijus> will do.

[14:33] <autrijus> now open another window and

[14:33] <autrijus> "make ghci"

[14:33] <autrijus> from pugs base path

[14:33] <autrijus> see if it compiles

[14:33] <autrijus> and type

[14:33] <autrijus> eval "times()"

[14:33] <autrijus> to see if it works

[14:33] <autrijus> if it does, commit it as phase 1.

[14:33] <clkao> hate

[14:33] <clkao>    Shared object "libparrot.so" not found, required b

[14:33] <autrijus> oh. do this

[14:33] <autrijus> perl Makefile.PL

[14:33] * clkao reruns makefile

[14:33] <autrijus> rm src/Pugs/Embed/Parrot.hs

[14:33] <autrijus> rm src/Pugs/Embed/Parrot.o

[14:33] <autrijus> and make ghci again

[14:34] <autrijus> i.e. do away with PUGS_EMBED

[14:34] <clkao> i know. :)

[14:34] <autrijus> now write a simple t/unspecced/times.t

[14:34] <clkao> Prelude> eval "times()"

[14:34] <clkao> <interactive>:1:0: Not in scope: `eval'

[14:34] <autrijus> did you "make ghci" ?

[14:34] <autrijus> not "ghci"

[14:34] <clkao> what?

[14:35] <autrijus> type "make ghci" in cmd line

[14:35] <autrijus> not "ghci"

[14:35] <clkao> yes.

[14:35] <clkao> oh it's because 

[14:35] <clkao> Could not find module `Pugs.Embed.Parrot':

[14:35] <autrijus> you need to type "make" first then

[14:35] <autrijus> after it deals with Embed.Parrot you can "make ghci" again

[14:35] <autrijus> this whole embed parrot thing is hateful because parrot has no .so form

[14:36] <autrijus> blame (someone else, not me)

[14:36] <clkao> ok.. slow slow slow

[14:36] <autrijus> "make unoptimised" too

[14:36] <autrijus> when you wait for that

[14:36] <autrijus> you can write t/unspecced/times.t

[14:36] <autrijus> nothing fancy, just assign the result to a 4-elem my ($x, $y, $z, $w...)

[14:36] <knewt> oh, while i think about it, autrijus++ # unoptimised as well as unoptimized

[14:37] <autrijus> and test that they are sane or something

[14:37] <autrijus> knewt: yeah, I've switched to the civilised form of spelling

[14:37] <autrijus> instead of the civilized form

[14:38] <knewt> command-line completion of makefile targets is really nice for noticing things like that

[14:38] <autrijus> clkao: now, after both are done, implement the real thing by opening Compat.hs

[14:38] <autrijus> go to line 31ish, its export list

[14:38] <autrijus> add getProcessTimes

[14:38] <knewt> me-- # pronouncing as zee-three rather than zed-three the other day

[14:39] <autrijus> and goto line 122ish, add this stub:

[14:40] <autrijus> getProcessTimes = failWith "times"

[14:40] <autrijus> we'll deal with win32 later.

[14:40] <autrijus> after that's done, type ":r" in the ghci prompt

[14:40] <autrijus> make sure it compiles, then commit it

[14:40] <autrijus> that's phase 2.

[14:40] <stevan> wow this is a big changelog :) ... 50+ lines and I am only 3/4 of the way through the svn log

[14:40] <stevan> lambdacamels++

[14:40] <autrijus> stevan++ # changelog

[14:41] <clkao> sloooow

[14:41] <stevan> iblech++ # I have lost count of how many revisions are his

[14:42] <autrijus> clkao: actually, come to think about it, we only need 4 of return value of the 5, so it's better to handle that in Compat.hs

[14:42] <autrijus> see http://www.haskell.org/ghc/docs/latest/html/libraries/unix/System.Posix.Process.html#t%3AProcessTimes

[14:42] <stevan> oh, autrijus when you are done with this, I found another OO bug related to the nested use

[14:42] <autrijus> clkao: but it's okay for a first cut... commit first

[14:42] <clkao> both seems to work

[14:43] <autrijus> as long as it compiles it's good to commit

[14:43] <autrijus> ok, commit then :)

[14:43] <autrijus> make sure the test fails!

[14:43] <jhorwitz> mornin

[14:43] <autrijus> you can introduce a sleep 1 and make sure the time elapsed is >0, for example

[14:43] <autrijus> hm, but only system time, it sleep

[14:44] <autrijus> ah. you can introduce a small loop to force elapsed user time.

[14:44] <autrijus> so you can test for the first two.

[14:44] <clkao> autrijus: the test doesn't fail

[14:44] <autrijus> clkao: ok. commit anyway!

[14:44] <clkao> ha i will make it fail

[14:44] <svnbot6> r3648, clkao++ | * Add the times() primitive.

[14:44] <svnbot6> r3648, clkao++ | * Export getProcessTimes.

[14:44] <autrijus> ok, you work on the test. I'll look at Compat

[14:46] <autrijus> heh, you added a semicolon

[14:46] <autrijus>     return $ VList [VNum 0,VNum 0,VNum 0,VNum 0];

[14:46] <autrijus> crazily, that is valid haskell.

[14:46] <autrijus> haskell++ # timtowtdi

[14:47] <stevan> iblech: you should write a bot to add svn properties for you :)

[14:47] <clkao> bah. i was using ok ()... 

[14:47] <knewt> stevan: from the beginning of the repo, the top 5 are: 1408 autrijus / 421 iblech / 323 Stevan / 176 corion / 116 nothingmuch

[14:47] <clkao> so it always okay'ed

[14:47] <clkao> fuck the gap

[14:47] <iblech> stevan: Yeah :)

[14:48] <stevan> knewt: that looks about right

[14:49] <iblech> stevan: Ii might not be that difficult really -- the bot just has to fire two svn commands and has to search for files not ending in \n

[14:49] <iblech> s/Ii/It/

[14:49] <clkao> it has been almost 20 mins... where's my times() ?

[14:49] <stevan> iblech: svnbot could fire that off for every commit

[14:50] <knewt> stevan: and a total of 79 different committers

[14:50] <svnbot6> r3649, clkao++ | More meaningful test for times().

[14:50] <autrijus> clkao: your times() is there

[14:50] <autrijus> r3650

[14:50] <stevan> knewt: I use this (which theorbtwo wrote) to check that info

[14:50] <stevan> * `next` now re-evaluates condition in `loop` constructs;

[14:50] <autrijus> but! it returns clock ticks

[14:50] <stevan> damn wrong pastboard :P

[14:50] <clkao> hte

[14:50] <autrijus> anyone knows how to turn clock_t to seconds?

[14:50] <clkao> it has child info too?

[14:50] <stevan> svn log | grep '^r[0-9]'| cut -d'|' -f2 | sort | uniq -c | sort

[14:50] <clkao> HZ iirc

[14:50] <clkao> HZ

[14:51] <clkao>  / HZ

[14:51] <knewt> stevan: for me, svk log -n0 //pugs/trunk | perl -ne 'print "$1\n" if /^r\d+ \(orig r\d+\):\s+(\S+)/' | sort | uniq -c | sort -nr

[14:51] <clkao> stupid client

[14:51] <autrijus> 1000000 ?

[14:51] <autrijus> 1000000 that is

[14:51] <clkao> it hsould be a constant defined somewhere

[14:51] <autrijus> ah, clocksPerSec

[14:52] <jhorwitz> autrijus: CLOCKS_PER_SECOND in time.h

[14:52] <clkao> CLOCKS_PER_SECs

[14:53] <autrijus> ok, done

[14:53] <autrijus> committing

[14:56] <clkao> yay test apssed

[14:56] <svnbot6> r3650, autrijus++ | * turn processTimes into Val.

[14:56] <autrijus> now write another test to make sure they are not out of proportion ;)

[14:56] <autrijus> i.e. should < 10 or something

[14:56] <clkao> i am lazy

[14:56] <stevan> wow,.. over 600 new tests have been added

[14:57] <autrijus> do it now! :)

[14:57] <stevan> (perl6 rules tests I assume)

[14:57] * autrijus is holding off commits until test is seen

[14:57] <stevan> ouch

[14:57] <clkao> aha

[14:57] <stevan> withholding implementation for tests :P

[14:57] <stevan> some tough-love from autrijus 

[14:57] <autrijus> stevan: I'm merely returning what I got from clkao in #svk

[14:58] <stevan> :D

[14:59] <clkao> can't use cmp_ok .. '>' ?

[14:59] <iblech> No, but you can use ok ... > ..., ...

[14:59] <stevan> clkao: you need to do &infix:[>] (if that works)

[15:00] <autrijus> er

[15:00] <autrijus> probably not.

[15:01] <autrijus> $ ./pugs -MTest -e 'cmp_ok(2,&infix:<<>,3)'

[15:01] <autrijus> this works

[15:01] <svnbot6> r3651, clkao++ | Test times for sensible increment.

[15:01] <autrijus> not very readable

[15:01] <autrijus> $ ./pugs t/unspecced/times.t

[15:01] <autrijus> 1..1

[15:01] <autrijus> ok 1 - something changed in times()

[15:01] <autrijus> ok 2 - sensible time spent

[15:01] <autrijus> # Looks like you planned 1 tests, but ran 2

[15:02] <autrijus> I'll fix this.

[15:02] <clkao> gr. 

[15:02] <autrijus> cmp_ok(@end[0] - @start[0], &infix:«<=», 10, 'sensible time spent');

[15:02] <autrijus> works

[15:02] <clkao> does it report properly when failed?

[15:03] <autrijus> I don't know, it should

[15:03] <clkao> it was getting got: undef, expectet: undef

[15:03] <autrijus> it should probe for &code.name or something

[15:03] <autrijus> ah. then it's borked. not too worried though

[15:03] <clkao> because cmp_ok doesn't give got and expected for proclaim

[15:03] <autrijus> you can fix it if you want :)

[15:04] <autrijus> so it took 30 minutes... sorry for that ;)

[15:04] <autrijus> but you did get times().

[15:05] <clkao> $compare_func.name doesn't owrk ?

[15:05] <autrijus> looking

[15:06] <autrijus> implemented. committing

[15:06] <svnbot6> r3652, autrijus++ | * readjust times() return values by clocksPerSec,

[15:06] <svnbot6> r3652, autrijus++ |   which seems to be defined as 1M by POSIX.

[15:06] <svnbot6> r3653, clkao++ | plan properly.

[15:06] <svnbot6> r3654, autrijus++ | * use the real <= for testing

[15:07] <autrijus> comt to think about it, I'll do .arity too

[15:08] <autrijus> both done

[15:08] <autrijus> r3655, enjoy

[15:09] <stevan> talk about moving target, 10 revisions have happened since i started the changelog ;)

[15:09] <autrijus> blame clkao and his Benchmark.pm ;)

[15:09] <clkao> poor stevan

[15:09] <autrijus> clkao: so you ready to commit Benchmark.pm for 6.2.4?

[15:09] <stevan> clkao: its fun :)

[15:11] <clkao> er, it depends

[15:11] <autrijus> you have ~24hrs.

[15:11] <clkao> cmp_ok fixed

[15:11] <autrijus> clkao++

[15:11] <clkao> things like:

[15:11] <clkao> #   Failed test (t/unspecced/times.t line 15, column 1-68)

[15:11] <clkao> #   Expected: '>= 10'

[15:11] <clkao> #        Got: '0.000069'

[15:11] <autrijus> ooh pretty

[15:12] <autrijus> lol

[15:12] <autrijus>     proclaim($test, $desc, $todo, $got, "{ $compare_func.name } $expected");

[15:12] <svnbot6> r3655, autrijus++ | * &code.name, &code.arity

[15:12] <svnbot6> r3656, clkao++ | Proper error failure when using cmp_ok.

[15:12] <autrijus> I would've written

[15:12] <clkao> why's that funny?

[15:12] <autrijus>     proclaim($test, $desc, $todo, $got, "$compare_func.name() $expected");

[15:12] <autrijus> but that's bikesheding

[15:12] <clkao> oh ok. i'm new to this bloody language

[15:12] <autrijus> it's funny because the new interpolation thing seems to be confusing the hell out of everybody

[15:12] <clkao> aha

[15:13] <clkao> it was confused yesterday so i make use of it today

[15:13] <iblech> autrijus: Is there a particular reason Main.doParse uses an emptyEnv and not tabulaRasa?

[15:14] <stevan> autrijus: ChangeLog done, got a second to look at my nested "use" class issue?

[15:14] <autrijus> stevan: sure

[15:14] <stevan> I already have tests :)

[15:14] <stevan> t/oo/class/nested_use.t

[15:14] <stevan> it fails to find the inherited methods

[15:14] <autrijus> iblech: I don't quite recall a reason

[15:15] <autrijus> lookin'

[15:15] <iblech> autrijus: Ok, I'll change it then, as it b0rks INIT and CHECK

[15:15] <autrijus> please do

[15:15] <autrijus> iblech++

[15:15] <autrijus> stevan: hrm, weird. seems like the opEval is not propagating Env up properly

[15:16] <autrijus> I'll attempt a fix... but shower first

[15:16] <stevan> autrijus: ok thanks, I need to shower too and run some errands. I will check in later :)

[15:16] <autrijus> =)

[15:16] <autrijus> stevan++

[15:16] <stevan> autrijus++ # cause I know he will fix it and commit from the shower :P

[15:17] <autrijus> talk about subtle nudge :)

[15:17] <svnbot6> r3657, Stevan++ | ChangeLog for 6.2.4

[15:17] <svnbot6> r3658, autrijus++ | * bikeshed patch to clkao++'s interpolation in Test.pm

[15:18] <stevan> it is "thanks in advance" :)

[15:18] <autrijus> ok :)

[15:20] <eric256> Prim.hs fails to compile! ;(

[15:21] <eric256> Constructor `ProcessTimes' should have 4 arguments, but has been given 5

[15:22] <autrijus> oops

[15:22] <autrijus> sorry. fixed, svn up 

[15:22] <eric256> thanks.

[15:22] <eric256> i just snuck an update in at the wrong time there?

[15:23] <eric256> 'svn up' sounds like a battle cry or something

[15:24] <Corion> Hmmm. Does Perl6 have a LIST version of qx ? I want to do system(LIST) but capture the output without doing ugly trickery ... Hmmm - maybe I should Just do the ugly trickery ...

[15:25] <autrijus> I've always wanted that

[15:26] <Corion> autrijus: What is the Perl6 qx syntax anyway? :)

[15:27] <autrijus> q:x

[15:27] <autrijus> iblech: r3660 has some style hints :)

[15:27] <svnbot6> r3659, autrijus++ | * oops, ProcessTimes stub was bad

[15:27] <svnbot6> r3660, autrijus++ | * clean up iblech++'s FIRST block code.

[15:27] <Corion> I think I'll simply create a second Perl6 file, which only runs the system(LIST), and "include" that file via q:x() then.

[15:27] <autrijus> ooh hacky.

[15:28] <Corion> resp. via system(STRING) :)

[15:28] <Corion> (because we don't have q:x yet, I think)

[15:28] <autrijus> we don't yet.

[15:28] <Corion> autrijus: I'm working on better tests for system(LIST), and it seems that Haskell is better there already than Perl5 (for Win32)

[15:28] <autrijus> cool

[15:29] <iblech> autrijus: Sure. BTW, style: Is there an easy way to foldl start_elem [elems] $ code? I.e. to place the code at the end of the list

[15:29] <autrijus> huh?

[15:29] <iblech> I have: foldl (\a b -> ...) start_elem [elems]

[15:30] <iblech> I want: xxx start_elem [elems] (\a b -> ...)

[15:30] <iblech> Because the lambda may be long etc.

[15:30] <autrijus> well...

[15:30] <Corion> iblech: foldl do_fold start_elem [elems] where do_fold = ...

[15:30] <autrijus> right.

[15:30] <autrijus> if you want it inline:

[15:30] <autrijus> (\f -> foldl f start_elem [elems]) $ \a b -> ...

[15:31] <autrijus> if you want to be very sick:

[15:31] <autrijus> flip (flip foldl start_elem) [elems] $ \a b -> ...

[15:31] <iblech> Ah :) Thanks, that's it

[15:31] <iblech> (Not the flip one :))

[15:31] <autrijus> whew :)

[15:39] <clkao> can't use >>-<< ? but >>+<< works?

[15:40] <autrijus> clkao: you can hack Parser and Prim for one line each

[15:40] <autrijus> to get >>-<<

[15:40] <autrijus> but the correct solution is to do what iblech did for [] metaoperators

[15:40] <clkao> huh?

[15:41] <clkao> * and / also works

[15:41] <clkao> why doesn't - ?

[15:41] <autrijus> clkao: Prim line 1314

[15:41] <clkao> ha

[15:41] <autrijus> Parser line 889

[15:41] <autrijus> commits welcome ;)

[15:41] <clkao> i thought >> op << is something generic

[15:41] <autrijus> yeah, just like [+]

[15:41] <autrijus> but only very recently iblech hacked in code for [...]

[15:41] <autrijus> I'm sure >>...<< will follow soon but it's not here yet

[15:42] <clkao> cool

[15:42] <autrijus> eric256: is win32 happy now?

[15:43] <clkao> i added >>-<, but it's not magically hooked to - ?

[15:44] <autrijus> hm? it should

[15:44] <autrijus> commit for us to see?

[15:44] <eric256> yep thanks

[15:45] <autrijus> cool, eric256++

[15:45] <autrijus> Corion: can you check if getProcessTimes is there or easily emulable on win32?

[15:45] <autrijus> if not, t/unspecced/times.t needs to be skipped entirely on win32

[15:45] <Corion> checking (but unlikely I think)

[15:45] <Corion> Let's see what Perl5 does

[15:45] <autrijus> nod. I'll bbiab

[15:46] <autrijus> Corion++

[15:46] <autrijus> &

[15:46] <Corion> Should be "easily" emulable as Perl5 knows it :)

[15:47] <Corion> Ah. GetProcessTimes() in the Win32 API.

[15:47] <Corion> GHC doesn't have it already?

[15:47] <autrijus> look at the module help index

[15:47] <clkao> autrijus: see hyper.t

[15:47] <autrijus> on unix we have

[15:47] <autrijus> file:///usr/local/share/doc/ghc6/libraries/unix/System.Posix.Process.html#t%3AProcessTimes

[15:48] <eric256> well there ever be a .perl for objects that produces code that can actualy recreate the object?

[15:48] <autrijus> eric256: possible. not sure

[15:49] <Corion> autrijus: If it's not already there, it should be easily written IMO

[15:49] * Corion syncs

[15:49] <svnbot6> r3661, clkao++ | Declare >>-<<.

[15:49] <autrijus> Corion: would you do so? that will make Benchmark.pm happy on win32

[15:50] <Corion> autrijus: Eh - where does times() live yet? Or has it not been written yet?

[15:50] <Corion> Ah - my tree was out of date :)

[15:51] <Corion> We should maybe propagate our Win32 enhancements upstream so the GHC folks have to worry about them instead of Pugs :)

[15:53] * Corion sets out to (re)implement getProcessTimes from the Win32 API

[15:54] * theorbtwo wonders who was talking about me.

[15:55] <autrijus> Corion: when you have time, mail glasgow-haskell mailing list to tell them to take a look at Compat.hs :)

[15:56] <Corion> autrijus: Yeah ;)

[15:56] <Corion> Ewww. Win32 API GetProcessTimes() takes reference parameters :(

[15:56] <Corion> So more buffer magic is needed ...

[15:57] <autrijus> clkao: r3662, enjoy

[15:58] <jroc> join /pugs

[15:58] <autrijus> greetings jroc.

[15:59] <jroc> hi! sorry 'bout the "join" noise

[15:59] * clkao happy

[16:00] <iblech> Yay, CHECK {...} implemented, cleaning up and writing a test...

[16:00] <autrijus> iblech++

[16:01] <autrijus> really bbiab :) &

[16:01] <svnbot6> r3662, autrijus++ | * >>-<< and Â»-Â«.

[16:01] <clkao> when is 6.28.0 coming

[16:06] <vcv-> hyperoperators work now??

[16:07] <theorbtwo> Ah, read the log (more or less).

[16:07] <vcv-> sweet

[16:07] * eric256 can't get into the grove working on his wizard.p6 project...anyone need some grunt work done anywhere?

[16:08] <Aankhen``> iblech++

[16:11] <eric256> guess i'll play prince of persian instead ;)

[16:11] <eric256> persia*

[16:13] <vcv-> either Pugs.AST.Internals is really big, or my command window is frozen

[16:13] <iblech> It's really big :)

[16:14] <vcv-> stilll.. it shouldnt take THAT long

[16:14] <vcv-> ah it did

[16:15] <knewt> hmm. did svnbot b0rk the utf8 in that last commit for anyone else, or is it just my config?

[16:16] <vcv-> its just you

[16:16] <iblech> kelan: svnbot, or more exactly "svn log" on the server svnbot runs on is b0rked

[16:16] <iblech> err, sorry kelan

[16:18] <svnbot6> r3663, iblech++ | * CHECK {...} in void context and as a rvalue works. :)

[16:18] <svnbot6> r3663, iblech++ | * Added a test for CHECK (t/statements/check.t).

[16:18] <svnbot6> r3663, iblech++ | * "." in interactive Pugs uses an prepared env now (tabulaRasa).

[16:18] <svnbot6> r3663, iblech++ | * Usual svn properties.

[16:19] <mrborisguy> can somebody help me with an operator...  i'm thinking of the 'x' operator, but does it just work with strings now?  what i want is @array = ("this") x 3, and @array.perl.say should be ("this","this","this"), but instead i get ("thisthisthis").  what operator should i be using?  i couldn't find it in the synopsis.

[16:19] <vcv-> prepared env?

[16:19] <vcv-> mrborisguy: easy!

[16:19] <vcv-> Except I don't know :)

[16:19] <pjcj> mrborisguy: xx I think

[16:19] <mrborisguy> haha, yeah, i was thinking it's gotta be easy!

[16:19] <iblech> mrborisguy: xx

[16:20] <vcv-> yeah, thats the one

[16:20] <mrborisguy> yep

[16:20] <mrborisguy> thanks!

[16:20] <vcv-> x is scalar context, xx is list :)

[16:20] <iblech> vcv-: Previously, the "." command in interactive Pugs used an emptyEnv, i.e. an env with no variables in it

[16:20] <iblech> vcv-: But that broke INIT and CHECK, as these push to the compiler array @?INIT and @?CHECK respectively

[16:21] <vcv-> gotcha :)

[16:21] <iblech> vcv-: Now "." uses the standard preparedEnv too, which contains these vars

[16:23] <vcv-> Awesome

[16:24] <Juerd> [~]++

[16:25] <Juerd> [~] @foo looks so much better than @foo.join('')

[16:25] <iblech> Yeah

[16:25] <Juerd> Take that, most other languages!

[16:26] <masak> *lol*

[16:26] <clkao> i wonder which topioc to put svk under. linux or emerging.. i guess not perl, its so unpopular :P

[16:30] <integral> do we have p6 SVN or SVK bindings yet? ;-)

[16:31] <clkao> integral: that depends on bridging parrot nci to native function

[16:32] <integral> hmm, maybe we need a Pugs/Perl6 NCI which can either use Parrot NCI or Haskell FFI

[16:32] <clkao> which will happen in 2 or 3 weeks maybe :)

[16:32] <clkao> *nod*

[16:33] <hcchien> 2 or 3 weeks for p6 SVK?

[16:33] <clkao> bridging parrot nci to native function

[16:33] <Juerd> Perl 6 needs a 99.97% speedup :)

[16:33] <iblech> Hmm... is >>[>>+<<]<< allowed?

[16:34] <iblech> Or rather, [>>+<<]<<

[16:34] <Juerd> iblech: No, [op] is prefix, not infix.

[16:34] <Juerd> iblech: That, should.

[16:34] <iblech> Ok

[16:37] <clkao> hyper operator makes Benchmark.pm so easy

[16:39] <Juerd> Why?

[16:39] <cognominal> hi, what is the meaning of @ in Haskell sources?

[16:39] <vcv-> hyperoperators, metaoperators, and context operators make me giddy

[16:39] <Juerd> (Perhaps this is a nice subject for a Perl Monks post, comparing 5 vs 6? Advocacy!)

[16:39] <clkao> because it needs to subtract realtime, usertime, cputime, child usertime, child cpuytime

[16:40] <clkao> which is stupidly hateful everywhere

[16:40] <integral> cognominal: you use it in a pattern to both bind a var to the thing being matched, and to match things inside that

[16:40] <Juerd> clkao: Do you have a code example, with its old counterpart?

[16:40] <clkao> i will soon

[16:40] <Juerd> Neat

[16:40] <iblech> cognominal: @ allows you to, um, specify an argument in more detail. For example: name@('I':_) would match only if the name begins with 'I'

[16:40] <integral> cognominal: eg.  v@(VStr str), that binds v to the (VStr _) value, and binds str to the value boxed in the VStr

[16:40] <Juerd> I love these practical examples

[16:41] <clkao> anyway

[16:41] <clkao>     for (my $i=0; $i < @$a; ++$i) {

[16:41] <clkao>         push(@r, $a->[$i] - $b->[$i]);

[16:41] <clkao>     }

[16:41] <clkao> was like this

[16:41] <clkao> so @a >>-<< @b.

[16:42] <Juerd> Oh, that *is* nice.

[16:42] <cognominal> do you know where is the documentation for that feature?

[16:42] <iblech> [Haskell] Is there a function like map, but of type (a -> [b]) -> [a] -> [b]?

[16:42] <integral> iblech: concatMap

[16:42] <iblech> integral: Thanks :)

[16:42] <integral> iblech: or >>= in a monad

[16:42] <integral> flip >>= :: (a -> m b) -> m a -> m b

[16:43] <vcv-> hyperoperators, metaoperators and context operators oh my!

[16:43] <vcv-> Hm. I've seen :: used in different contextes. what is that context for, integral?

[16:43] <integral> just declaring a type

[16:44] <vcv-> oh thats haskell, oops

[16:45] <vcv-> haskell still confuses me. im learning it very slowly :)

[16:50] <svnbot6> r3664, Juerd++ | add docs/quickref/reduction

[16:52] <vcv-> props to you guys for a painless build/install process for pugs on Win32 :)

[16:52] <Juerd> heh, [.] < Some::Class method method method >

[16:52] <Juerd> Some::Class.method.method.method

[16:54] <iblech> Hm... I think this should rather call "Some::Class".method.method.method

[16:54] <Juerd> Same thing.

[16:54] <iblech> To do want you want you've to write [.] Some::Class <method method method>

[16:54] <Juerd> A string value can be used in a class's name's stead.

[16:55] <Juerd> This doesn't mean "".method is valid syntax for that

[16:55] <Juerd> But $foo.method is, isn't it?

[16:55] <Juerd> Hm, never realised. It no longer CAN.

[16:55] <clkao> hyper uniary is too evil

[16:55] <svnbot6> r3665, Juerd++ | more reduction

[16:55] <iblech> Really? How does the compiler know which method to call in the following example: "SomeClass".method or SomeClass.method

[16:56] <Juerd> iblech: You're right.

[16:56] <iblech> (Class objects)++

[16:58] <Juerd> And if you love them individually: (Class objects)>>++

[16:58] <Juerd> :)

[16:59] <mrborisguy> vcv-: did you get pugs to install on Win32?

[16:59] <vcv-> Yes

[16:59] <iblech> Juerd: :)

[16:59] <mrborisguy> I couldn't get it to work... what version?  the latest released, or a snapshot of some sort?

[16:59] <vcv-> latest. i just now updated through svn and rebuilt

[16:59] <Corion> getProcessTimes for Win32 will be delayed - I don't know if I'll finish it today (that is, within the next 4 hours or so) ...

[17:00] <mrborisguy> did you use nmake?

[17:00] <vcv-> What's that do Corion? maybe i can help

[17:00] <ihb> is there any installation docs for pugs installation for Win32? i took a quick glance at pugscode.org and in the dist, but didn't find any. shall i go look again?

[17:00] <vcv-> yes mrborisguy

[17:00] <mrborisguy> huh... alright

[17:00] <Juerd> Why are so many programmers using Win32?

[17:00] <vcv-> i use vs.net2003 tools (cl and link), not the free toolkit though

[17:00] <vcv-> that may be why

[17:00] <Juerd> I'd expect more sanity.

[17:00] <Arathorn> is ^ still used as a prefix for hyperoperators?

[17:00] <Juerd> Arathorn: No

[17:00] <vcv-> Juerd: lets not get into this :)

[17:00] <Corion> Juerd: Just because you don't know it, Win32 isn't hard/ugly

[17:00] <vcv-> win32 is easier to program for, i would say

[17:00] <Juerd> Arathorn: It's >>+, >>+<<, +<<

[17:00] <Arathorn> it's 􏿽xBB and 􏿽xAB all the way now?

[17:01] <Arathorn> cool

[17:01] <Juerd> Corion: It's ugly and hard.

[17:01] <Corion> vcv-: It's a simple wrapper around the Win32 GetProcessTimes() call. The tricky thing about it is that it needs some buffers and I am lazy/not in the mood at the moment

[17:01] <Corion> Juerd: Bah

[17:01] <Juerd> Corion: I know Windows all too well. I've used it longer in my life than I've used other OSes, and I still see the result of its stupidity almost daily, in my work as sysadmin.

[17:01] <vcv-> Corion: ok, well would you mind if i took a stab? though you'd have to point me in the right direction in the pugs code. win32 api im good with though

[17:01] <integral> MFC isn't easy either

[17:01] <Corion> vcv-: In principle, it can be mostly cloned from the other stuff in src/Pugs/Compat.hs

[17:01] <vcv-> hm..

[17:01] <Corion> vcv-: Not at all - I'm pointing you in the direction ;))

[17:01] <vcv-> Juerd: lets not get into OS wars, please.

[17:02] <Juerd> vcv-: Why not?

[17:02] <vcv-> because its stupid

[17:02] <ihb> Juerd: not all programming is OS-close. :-)

[17:02] <Juerd> Why is it?

[17:02] <Khisanth> speaking of hyperops are there shorten forms of them? Like $a = $a + $b can be $a += $b, is there >>+<< version of that?

[17:02] <vcv-> ive been through it many times before.

[17:02] <vcv-> i get annoyed with people insult me for using windows

[17:02] <Corion> vcv-: getEnv is an ugly hack that allocates a string buffer. Did you see how getProcessTimes() is implemented in Perl5 ? win32/win32.c

[17:02] <integral> Khisanth: >>+=<< ?

[17:02] <vcv-> no i did not, ill take a look

[17:03] <Khisanth> integral: sorry I asked ...

[17:03] <Khisanth> that looks too horrible to be true!

[17:03] <autrijus> hm, >>+=<< is probably always the same as >>+<<=, tight?

[17:03] <Corion> vcv-: I plan on cloning the Perl5 implementation, basically - I'll nopaste what I currently have

[17:03] <vcv-> ok, cool :)

[17:03] <integral> Khisanth: you can slap the meta-operators on any appropiate op

[17:03] <Arathorn> >>+<<= seems intuitive...

[17:03] <autrijus> [+=] $a, $b, $c;

[17:03] <Juerd> autrijus: I don't think >>+<<= is valid.

[17:04] <autrijus> Juerd: yeah, I think so too

[17:04] <pasteling> "Corion" at 84.176.48.225 pasted "Implementation of getProcessTimes" (18 lines, 805B) at http://sial.org/pbot/10322

[17:04] <integral> that doesn't look right :-/

[17:04] <Juerd> Meta-ops play at different levels.

[17:04] <Juerd> First, = metas to +, then >><< to +=

[17:04] <vcv-> Juerd: just one thing i will say. for a contract i just finished, ihad to program for linux (debian). i hated it. its not even POSIX compliant, and its debugging tools are very poor.

[17:04] <Khisanth> Arathorn: >>+=<< would be more intuitive if you consider += to be an operator

[17:04] <autrijus> hm, that ends up as (($a += $b) += $c), which doesn't make much sense

[17:04] <Juerd> vcv-: I see.

[17:04] <integral> vcv-: hmm, which bit of POSIX did you find missing?

[17:05] <Corion> vcv-: That declaration should import GetProcessTimes() as win32GetProcessTimes, and the call already is there as well, all that's missing is some call to mallocBytes(), some pointer arithmetic (incPtr, decPtr) and you're done

[17:05] * Arathorn is trying to work out whether there's a way to calculate a dot-product on two vectors with a single hyperop

[17:05] <vcv-> integral: with pthreads

[17:05] <integral> Arathorn: [+] (@a >>*<< @b) ?

[17:05] <Corion> I'll be away for some time now, but mention any questions you have, I'll see them ;)

[17:05] <Arathorn> or do you have to just sum(@a >>*<< @b) with a reduction?

[17:05] <Juerd> vcv-: So would you say Win32 was any bit nearer to POSIX compliancy than Linux?

[17:05] <integral> vcv-: ah.   I never use threading :-)

[17:05] <vcv-> k, thanks :)

[17:05] <Arathorn> integral: ah, okay

[17:05] <vcv-> Juerd: no, but at least it doesnt claim to be

[17:06] <integral> Linux claims that it's been certified as POSIX compliant? 8-)

[17:06] <Juerd> vcv-: So in your world, is not-trying better than trying and fail?

[17:06] <Juerd> integral: No.

[17:06] <vcv-> grr. why are you being so so persistant about it? i dont think there is anything wrong with people using linux, why should you care if others use windows?

[17:07] <Juerd> vcv-: Well, I find it REALLY WEIRD that you let POSIX compliancy enter a discussion about linux vs win32, in windows's favour.

[17:07] <vcv-> not in windows favor at all

[17:07] <vcv-> that wasnt the point

[17:07] <Juerd> Then I probably agree.

[17:08] <Juerd> But i'm much more interested in windows versus rest of the world

[17:08] <vcv-> maybe its partly my fault, but when i was looking up information on pthreads, one site i found that had good info said it wa POSIX compliant

[17:08] <Juerd> Rest of the world including mac osx.

[17:08] <vcv-> so i went with that and wrote the code around that. then bam, i had issues, and turns out something involving child/parent threads wasnt posix compliant

[17:08] <vcv-> so i had to rewrite

[17:09] * integral would blame that more on the web spreading wrong information again

[17:09] <vcv-> BSD and OS X i admire. linux i do not

[17:09] <vcv-> right

[17:09] <vcv-> ubuntu is very nice though. i have that installed. but i still prefer windows as my desktop os.

[17:09] <Juerd> Note that Linux is usually described as *mostly* POSIX compliant.

[17:10] <vcv-> yeah. which is sort of stupid to me

[17:10] <Arathorn> hmm - is it a feature or a bug that the reduce op doesn't work on say( [+] (@a >>*<< @b) ~ "foo"); ?

[17:10] <Juerd> vcv-: Gnome sucks. Kubuntu is nicer, imnsho.

[17:10] <vcv-> juerd: i agree. havent tried kubuntu yet though

[17:10] <Arathorn> (r3633)

[17:10] <vcv-> is it updated in parallel to hoary?

[17:10] <Juerd> Arathorn: That's [+] $one_thing

[17:11] <Juerd> vcv-: Yes.

[17:11] <Juerd> vcv-: In fact, kubuntu is a meta-package, available in hoary's repository.

[17:11] <Juerd> vcv-: apt-get install kubuntu

[17:11] <Juerd> That changes an existing ubuntu installation into kubuntu.

[17:11] <vcv-> ah.

[17:11] <vcv-> ill try it.

[17:11] <vcv-> anyway, Juerd.. i do sort of understand why you're confused why people who like perl so much would also use Windows. linux is very similar to perl in a way. but personally, i want my os to just work and not have to dig into config files all the time, and compile stuff myself. you know?

[17:11] <Juerd> Do note that to really get kubuntu, you have to install some extra packages manually (like kmail) and remove the originals (evolution)

[17:12] <Juerd> vcv-: Then Mac OS X and Kubuntu are great alternatives.

[17:12] <stevan> autrijus: any progress on the nested "use" issue? no pressure, just checking :)

[17:12] <Juerd> Apart from the fact that the former doesn't work on non-ppc

[17:12] <Arathorn> ah - i see; the (@a >>*<< @b) gets autojoined in the scalar context for concatting with "foo"

[17:12] <Arathorn> and then there's only one thing to add up

[17:12] <Arathorn> cool

[17:13] <vcv-> right. which is why i do use ubuntu

[17:13] <vcv-> but im a windows programmer :)

[17:13] <Arathorn> (how come it gets autojoined with spaces in between, though?)

[17:13] <vcv-> and i still hate fonts on linux :)

[17:13] <Juerd> Arathorn: Array stringification is like that.

[17:14] <Arathorn> but @a=(1,2,3); say scalar(@a); # gives 123?

[17:14] <Juerd> It shouldn't

[17:14] <Juerd> Although perhaps say then returns an arrayref which it knows how to dereference.

[17:14] <Juerd> s/returns/gets/

[17:14] <Arathorn> and dereferencing doesn't get autojoined with whitespace?

[17:15] <Juerd> Any dereferencing done is done by say() itself.

[17:15] <vcv-> Now Juerd, dont question why I use Windows ever again ;)

[17:15] <Juerd> vcv-: Why the hell do you use Windows?

[17:15] <vcv-> :p

[17:15] <Juerd> That is, if for anything more than games.

[17:15] <iblech> Arathorn: And say() doesn't autojoin with whitespace. If you want to have spaces, you say ~@array

[17:15] <Arathorn> hang on, scalar() does still exist, right?

[17:15] <Juerd> Or Windows-specific development.

[17:15] <Arathorn> right

[17:16] <Juerd> Arathorn: It should

[17:16] <Arathorn> ~ being unary string concat, or forcing a stringy context?

[17:16] <Juerd> And say should not do anything with references except stringify and print.

[17:16] <vcv-> lots of reasons, but i dont like having to justify why i use it to other people

[17:16] <Juerd> scalar(@foo) is the same as \@foo

[17:16] <vcv-> like i said.. fonts is a big one :)

[17:16] <Juerd> Arathorn: Forcing stringy context. There is no unary string concat, except perhaps [~]

[17:17] <Juerd> vcv-: How, fonts?

[17:17] * Arathorn nods

[17:17] <Arathorn> okay - i need to go and revise my apocalypses, methinks ;)

[17:17] <Juerd> vcv-: I have a shitload of truetype fonts loaded in Linux. It works very well.

[17:17] <vcv-> Not as well as cleartype

[17:17] <Juerd> Arathorn: Synopses.

[17:17] <Juerd> vcv-: Oh, I *hate* cleartype.

[17:17] <vcv-> thats debatable i suppose, but cleartype looks MUCH better to my eyes

[17:17] <Juerd> It makes otherwise beautiful fonts into ugly bundles of over-smoothness.

[17:17] <vcv-> most people hate it because theyve never used the tweak tool

[17:18] <Juerd> That can only improve it so much

[17:18] <Arathorn> i thought truetype font hinting was still buggered under X because of Apple's patents?

[17:18] <Juerd> Not enough.

[17:18] <vcv-> it is Arathorn

[17:18] <vcv-> BCI is nice, but still not enough

[17:18] <Juerd> Arathorn: I have no idea, but I like freetype's anti aliasing much more than Windows's or Mac OS X's

[17:18] <Arathorn> eye of the beerholder and all that, i guess :)

[17:18] <vcv-> i like it the least

[17:19] <Juerd> Especially Apple makes the fonts too smooth, anti-aliasing even straight lines (Why? Hate my eyes, or something?)

[17:19] <vcv-> whats it matter what os i use anyways. we're all here for perl, thats all that matters. the one true language

[17:19] <Juerd> vcv-: Really? I'm here only to bash Windows and PHP

[17:19] <vcv-> :/

[17:19] <vcv-> i cant tell if you're being serious or not

[17:20] <vcv-> php i will bash with you though..

[17:20] <Juerd> A bigger problem is that I myself cannot tell either.

[17:20] <vcv-> All I ask is that you dont bring it up anymore.

[17:20] <Juerd> I can't promise you anything

[17:21] <vcv-> well if you do when im in abad mood, i will rant and tear linux apart :p

[17:21] <Juerd> Oh, go right ahead.

[17:21] <gaal> hi. anyone have any luck building parrot on msys?

[17:21] <vcv-> but im not kidding..if you keep doing it, im just straight out ignoring you

[17:22] <Juerd> Your ranting can't take down the numerous Linux based servers I admin, while my even looking at the enclosures can crash the few Windows ones.

[17:22] * Arathorn does the obligatory Jack Nicholson "why can't we all just get along" line from Mars Attacks

[17:22] <vcv-> alright.. fine

[17:22] <Arathorn> (nak nak nak)

[17:22] <Juerd> :)

[17:22] <vcv-> * Added Juerd!*@* to ignore list

[17:22] * stevan wonders why Juerd is trolling today?

[17:22] <Juerd> That's not fair. I read your ignoring thing after I typed that line :)

[17:23] * vcv- shrugs. he was nice to me before

[17:23] <Juerd> stevan: No more today than any other.

[17:23] <Juerd> vcv-: I'm still nice to you, just not to your platform of choice.

[17:24] * stevan thinks maybe Juerd got a bad cup of "coffee" at the local Coffee shop

[17:24] <vcv-> Sounds like it :/

[17:24] * Juerd deeply hates microsoft and windows.

[17:24] <vcv-> Probably someone who hasnt used windows since the 9x series :)

[17:24] <Juerd> stevan: I don't visit coffee shops. I don't like any of the stuff they sell, and I don't like the beverage they're named after either.

[17:25] * stevan does too, but cares so little about it he doesn't care to discuss it

[17:25] <Juerd> vcv-: I switched to Linux for my main platform after using Windows 2000 for a year. I've actively used Windows XP, and I very regularly use other people's Windows XP boxes.

[17:26] <vcv-> oh well. maybe ill take him off in a few days and he'll be in abetter mood

[17:27] <Juerd> My mood is alright, thank you.

[17:28] <japhy> what do I need to download/compile to start testing perl 6?

[17:28] <japhy> pugs?  parrot?  what...?

[17:29] <stevan> GHC

[17:29] <stevan> Pugs

[17:29] <stevan> then probably parrot if you want Rules

[17:29] <revdiablo> ghc 6.4 or higher

[17:29] <Juerd> japhy: Well, first, svn or svk :)

[17:29] <stevan> I think actually most of this is in README :)

[17:29] <Juerd> japhy: As Pugs *releases* lag too far behind to be a good target for development.

[17:29] <Arathorn> hm, I assume the hyper/reduction-metaops don't work with the parrot backend?

[17:29] <stevan> yes, svn/svk does help

[17:29] <japhy> what is svn/svk?

[17:29] <vcv-> svn is very simple too. and it doesnt like as bad as cvs

[17:30] <Juerd> japhy: Versioning tools.

[17:30] <vcv-> version control system

[17:30] <stevan> japhy: a better CVS

[17:30] <Juerd> japhy: Are you familiar with cvs?

[17:30] <japhy> yeah, a bit.

[17:30] <Juerd> japhy: It's much like that, but better. That's enough to know at this point :)

[17:30] <stevan> svn is really easy, you will like it

[17:30] <japhy> I'm not very concerned with that right now, though.  I just want a snapshot that I can play around with.

[17:30] <japhy> when I said "test", I meant "fool around with"

[17:30] * Arathorn has an $P15 = $P16 >>*<< $P17 in his AST which surely cannot be valid parrot...

[17:30] <stevan> japhy: best snapshot is from svn

[17:30] <Juerd> japhy: Go to the pugs homepage, there's a "svn co" command line to copy and paste.

[17:30] <japhy> my gf's not around for me to "test".

[17:30] <vcv-> does perl5 still use cvs, or svn now?

[17:31] <Juerd> japhy: That'll "check out" (download) the current version

[17:31] <stevan> japhy: here is a good svn book http://svnbook.red-bean.com/en/1.0/index.html

[17:31] <Juerd> japhy: To upgrade your local copy, run "svn up"

[17:31] <stevan> vcv-: I think perl is on svn now

[17:31] <svnbot6> r3666, iblech++ | Added [*], [//], [||], [,], and the usual svn properties to

[17:31] <svnbot6> r3666, iblech++ | docs/quickref/reduction.

[17:31] <svnbot6> r3667, Stevan++ | Perl::MetaModel - more work on the meta-meta-hierarchy document. I think I am starting to finally get this all into place (NOTE: its still pretty rough though)

[17:31] <Juerd> japhy: And to commit changes back to the central repository, use "svn commit" (if you add new files, use "svn add filename")

[17:32] <Juerd> japhy: Don't worry about making mistakes. Everything is revertible.

[17:32] <japhy> I wasn't going to be *changing* things

[17:33] <japhy> I just want a copy of perl6 so I can try it out.  get myself into the perl6 mindset.

[17:33] <Juerd> Oh, you will.

[17:33] <japhy> s/mind/operator/

[17:33] <Juerd> Because whenever you find a bug, you will be asked to write a very small test script :)

[17:33] <japhy> heh

[17:34] <Juerd> And explaining you how to use svn once is easier than copying and pasting your patches repeatedly

[17:34] <Juerd> For you too, I add :)

[17:34] <vcv-> for juerd, the man on ignore: 2os[Windows Server 2003 (5.2 - 3790)] 2uptime[66d 3h 52m 54s] 

[17:34] <Juerd> vcv-: Impressive.

[17:35] <revdiablo> ooh, color and dick measuring in one message!

[17:35] <vcv-> heh :p

[17:35] <vcv-> sorry about the coloring

[17:35] <japhy> ok.  once I get used to perl 6, I'll get into that whole SVN thing.

[17:35] <Juerd> vcv-: Does this mean you have neglected to install recommended critical security updates for over two months? Really?

[17:35] <Juerd> japhy: Okay

[17:35] <Juerd> japhy: Do you have GHC? You'll need a recent version (6.4 or later)

[17:35] <japhy> GHC is Haskell, I'm assuming...

[17:35] <Juerd> Yes

[17:36] <jroc> Juerd: why 6.4 or later?

[17:36] <japhy> right-o.  if I don't have it, I'll get it.

[17:36] <Juerd> japhy: See http://pugs.kwiki.org/?Perl6Nomenclature

[17:36] <revdiablo> pugs uses some features that only exist in ghc 6.4 and up

[17:36] <Juerd> jroc: Because Pugs uses some of the new features.

[17:36] <Juerd> jroc: This project isn't aimed at production code, so there's absolutely no motivation to waste time keeping things backwards compatible :)

[17:36] <jroc> Juerd: maybe this isn't the right place, but, examples of new features?

[17:37] <Juerd> jroc: I have no idea, sorry.

[17:37] <jroc> Juerd: no worries... just curious

[17:37] <Juerd> japhy: What platform do you use?

[17:38] <autrijus> Juerd: 

[17:38] <autrijus> undef<< @foo;

[17:38] <autrijus> is that legal?

[17:39] <autrijus> i.e. undef is a prefix op, isn't it?

[17:39] <Juerd> Yes, that should undef for @foo

[17:39] <japhy> ok, I'm downloading GHC 6.4 now.

[17:39] *** bd__ is now known as bd_

[17:39] <japhy> while I'm waiting...

[17:39] <Juerd> As should foo << @foo, given sub foo ($bar) { ... }

[17:40] <japhy> does %hash{@keys} >>++ do what I think it does?

[17:40] <Juerd> As "unary named ops" and "functions" are generally indistuinguishable.

[17:40] <autrijus> japhy: yes it should.

[17:40] <Juerd> japhy: Depends on what you think it does, really.

[17:40] <japhy> I expect it to act like:

[17:40] <japhy>   $hash{$_}++ for @keys;

[17:40] <Juerd> Yes, that it does.

[17:40] <japhy> awesome.

[17:40] <Juerd> Except it's %hash{$_} in Perl 6

[17:40] <Juerd> Sigils don't change anymore.

[17:41] <autrijus> Juerd: what about listops?

[17:41] <Juerd> $hash{$_} is short for $hash.{$_}, which is what was $hash->{$_} in Perl 5.

[17:41] <autrijus> do they get hyper form as well?

[17:41] <Juerd> autrijus: I hope so, just for overall consistency.

[17:41] <autrijus> say<< @blah;

[17:41] <japhy> I was showing Perl 5 code.

[17:41] <Juerd> japhy: Then disregard what I said.

[17:41] <Juerd> autrijus: The problem is having multiple arguments, of which you want only one hypered.

[17:42] <autrijus> Juerd: what about listfix?

[17:42] <Juerd> autrijus: Damian has been fighting all syntaxes for that, but I haven't read good explanation yet.

[17:42] <Juerd> autrijus: What's listfix?

[17:42] <vcv-> say << @blah; #<-- passes each item of @blah to say?

[17:42] <Juerd> vcv-: One by one, yes.

[17:43] <Juerd> vcv-: It's like (say(@blah[0]), say(@blah[1]), ...)

[17:43] <autrijus> Juerd: Y

[17:43] <autrijus> and chainops like eq

[17:43] <Juerd> autrijus: I don't know how that can be useful, so I have no answer ready

[17:43] <autrijus> >>eq<<

[17:43] <Juerd> eq should definitely be hyperable

[17:43] <autrijus> okie.

[17:44] <Juerd> As should ~~

[17:44] <vcv-> hm. i assume the answer is yes.

[17:44] <japhy> at the risk of asking a FAQ... why Haskell?

[17:44] <Juerd> japhy: Because it has the features.

[17:44] <vcv-> japhy: good for parsing

[17:44] <Juerd> japhy: And see what was possible in 100 days.

[17:44] <japhy> easier than lex/yacc?

[17:45] * japhy has never used Haskell

[17:45] <Juerd> japhy: Oh, much. See Parser.hs

[17:45] <Juerd> Neither have I. Using pugs doesn't require understanding of Haskell, fortunately.

[17:45] <autrijus> japhy: like, 1000 times easier than lex/yacc :)

[17:45] <japhy> hmm, cool.

[17:45] <japhy> juerd - Oh, I didn't think it did.

[17:46] <japhy> juerd - I'm just saying, I know nothing about it

[17:46] <vcv-> lex/yacc is nasty :)

[17:46] <jroc> how does Haskell compare with Common Lisp w.r.t to doing pugs?

[17:46] <autrijus> jroc: I havn't used common lisp, so I can't say anything about it

[17:46] <Juerd> jroc: Superficially, it has a much nicer set of operators :)

[17:47] <jroc> fair enough... I'm just trying to learn CL but perhaps I should switch to Haskell

[17:47] <Juerd> japhy: http://svn.perl.org/perl6/pugs/trunk/docs/01Overview.html

[17:47] <Juerd> japhy: Answers these faqs

[17:47] <autrijus> jroc: Haskell has this, more "research" feel about it.

[17:47] <japhy> wow.  I can understand Haskell.

[17:48] <autrijus> japhy: I suspect your brain is lambda shaped. :)

[17:48] <japhy> I don't exactly know the syntax, but just looking at the "aboutHaskell.html" page at haskell.org, I know exactly what it's doing.

[17:48] * Juerd doesn't understand how "apocryphos" is written with -n in English

[17:48] <Juerd> And how its plural "apocryphoi" got to be -a.

[17:48] <japhy> English sucks.

[17:49] <japhy> learn American. ;)

[17:49] <japhy> its much easier, and the syntax is loser.

[17:49] <jroc> blech American  :o)

[17:49] <Arathorn> crappy brits making greek nouns sound more like 3rd declension latin ones :)

[17:49] <japhy> [sic]

[17:49] <jroc> s/loser/looser/

[17:49] <japhy> jroc - [sic]

[17:49] <Juerd> jroc: "[sic]"

[17:49] <jroc> haha

[17:49] <autrijus> iblech: I did >>...<<! in 20 minutes! :)

[17:49] <japhy> note also the "its" which should be "it's"

[17:50] <autrijus> iblech++ # did the hard part for me

[17:50] <iblech> autrijus++ :)

[17:50] <Juerd> autrijus: Wow, hyper failure?!

[17:50] <autrijus> Juerd: no, hyper metaoperator

[17:50] <Juerd> Oh, for any op in ... :)

[17:50] <Juerd> I read yada :)

[17:50] <Juerd> Sweet.

[17:50] <autrijus> ∀ op. >>op<<

[17:51] <Juerd> autrijus: >>op and op<< too?

[17:51] <autrijus> Juerd: they are parsed, not yet executed

[17:51] <autrijus> you want those? :)

[17:51] <vcv-> oi oi oi

[17:51] <Juerd> autrijus: I have no special need for them

[17:53] <svnbot6> r3668, autrijus++ | * generalised hyper op handling landed.

[17:54] <vcv-> sheesh. why is it so difficult to find the perl5 source code

[17:54] <Juerd> vcv-: apt-get source perl

[17:54] <autrijus> vcv-: huh? http://search.cpan.org/dist/perl/

[17:54] <gaal> http://search.cpan.org/~nwclark/perl-5.8.6/

[17:54] <Juerd> vcv-: Or search.cpan.org

[17:55] <Juerd> vcv-: Or perl.com

[17:55] <Juerd> vcv-: Or... oh, this is useless. You're ignoring me still.

[17:55] <vcv-> thanks autrijus. google didnt give me that :)

[17:55] <autrijus> :)

[17:56] <autrijus> *Main> eval "sub infix:<Z> { 3 }; (1..5) >>Z<< (1..5)"

[17:56] <autrijus> (3, 3, 3, 3, 3)

[17:56] <Juerd> Wow, that's a wildly obfuscated way to write 3 xx 5 ;)

[17:56] <autrijus> :D

[17:57] <autrijus> but the important thing is it works :)

[17:57] <japhy> what was the file I was told to look at to see how much cleaner Haskell is?

[17:57] <japhy> "easier than lex/yacc?"

[17:57] <japhy> and then a file was mentioned...

[17:58] <iblech> Parser.hs

[17:58] <Juerd> japhy: Parser.hs

[17:58] <japhy> ok

[17:58] <japhy> thanks

[17:58] * Juerd waits for signs of utter amazement

[17:58] <gaal> anyone know if jonathan's binary parrot was built with msys or with msvc? and is 0.1.2 new enough?

[17:58] <japhy> AWWW.

[17:58] <japhy> ghc-6.4: out of memory (requested 1048576 bytes)

[17:58] <japhy> that's not cool.

[17:58] <integral> make unoptimised :-)

[17:58] <Juerd> Oh, yes, haskell is very memory hungry

[17:58] <svnbot6> r3669, autrijus++ | * hyperoperator for user-defined infix ops

[17:58] <Juerd> japhy: How much memory does your box have?

[17:59] <Juerd> I'd advise 512 or more

[17:59] <Juerd> (Or make unoptimized)

[17:59] <japhy> I don't know.  I'm on perlmonk.org

[17:59] <Juerd> japhy: In a shell, type free

[17:59] <integral> ouch, I wouldn't advise using ghc on a shared system

[18:00] <Juerd> japhy: It may be that more limits are imposed on users.

[18:00] <japhy> ah, ok.

[18:00] <japhy> well, it was a nice try.

[18:00] <Juerd> integral: I'm considering putting up a shell server for Perl 6 people

[18:00] * integral knows his local admins would hunt him down with crossbows

[18:00] <japhy> I'll find some other solution.

[18:00] <integral> ooh, yes.   Just needs ccache for haskell though

[18:00] <Juerd> integral: It's very expensive though, so I have to think this over a couple of times

[18:01] <japhy> ok, later folks.

[18:01] <japhy> thanks for the assistance.

[18:01] <Juerd> I'm thinking maybe my business can sponsor it.

[18:02] <Arathorn> gaal: it's built with MSVC iirc

[18:02] <vcv-> uh oh. msvc? watch out for juerd.

[18:02] <autrijus> 0.1.2 is definitely not new enough

[18:02] <autrijus> there's a rar build somewhere.

[18:02] <gaal> well, i'm sad to say that pugs essentially depends on msvc now on win32. :(

[18:03] <vcv-> sucks

[18:03] <autrijus> http://wiki.kn.vutbr.cz/mj/attach/parrot/binary/

[18:03] <autrijus> gaal: why?

[18:03] <vcv-> would be nice if it compiled on the intel compiler

[18:03] <gaal> autrijus, i've tried to build it with msys with three different snapshots, they all failed.

[18:03] <gaal> it == parrot

[18:03] <svnbot6> r3670, autrijus++ | * mention the RAR binary build.

[18:04] <autrijus> gaal: oh. then parrot depends on msvc, not pugs

[18:04] <autrijus> you can grab a binary from the url above I think

[18:04] <gaal> pugs doesn't harddepend on parrot yet..

[18:04] <gaal> but w/o rules...

[18:04] <gaal> i'll try that, thanks!

[18:04] <autrijus> =)

[18:04] <gaal> do i want the without-icu or the other one?

[18:04] <vcv-> without!

[18:05] <autrijus> without

[18:05] <autrijus> doesn't matter for now anyway

[18:07] <gaal> it wants icuuc32.dll

[18:08] <autrijus> even the -without one?

[18:08] <gaal> yes.

[18:09] <gaal> c'mon autrijus, port it to haskell, we know you it won't take a minute. :-p

[18:10] <autrijus> ;)

[18:10] <autrijus> you can download binary build of ICU ;)

[18:10] <gaal> pointer?

[18:11] <autrijus> icu.sf.net

[18:11] <gaal> oh, icu's that ibm unicode thing?

[18:11] <gaal> no wonder it soudned familiar.

[18:12] <gaal> i wonder, ibm

[18:13] <gaal> 's binaries are msvc, any chance of that working?

[18:13] <autrijus> sure, it just wants the dll visible

[18:13] <autrijus> I'm surprised that -without-icu still wants icuuc.

[18:13] <autrijus> this is too painful

[18:14] <gaal> yes.

[18:14] <gaal> if someone can tell me they tried coLinux and got it to work, i'll stop fighting msys :)

[18:14] <svnbot6> r3671, autrijus++ | * some more work for hyper prefix/postfix -- not there yet

[18:15] <autrijus> what's coLinux?

[18:15] <autrijus> # http://wiki.kn.vutbr.cz/mj/index.cgi?Build%20Parrot%20with%20MinGW

[18:15] <gaal> linux as a ring 0 process on windows.

[18:15] <autrijus> # http://wiki.kn.vutbr.cz/mj/index.cgi?MS%20Windows%20Parrot%20Binnary%20Download

[18:15] <autrijus> may be useful.

[18:16] <gaal> yes, but needs tweaking to work with networking.. and still in early dev so i'm not sure it's worth it

[18:16] <gaal> did i just say ring 0 process? silly me :)

[18:18] <gaal> yay, after tweaking PATH and stuff this works! autrijus++

[18:19] <autrijus> :D

[18:19] <svnbot6> r3672, autrijus++ | * change address to the wiki page

[18:21] <gaal> known?        src/Pugs/Compat.hs:73:0:     Warning: Definition but no type signature for `failWith'

[18:21] <gaal> (same for warnWith in the next line)

[18:22] <gaal> why is that a warning, anyway? aren't type sigs always optional?

[18:23] <autrijus> gaal: yeah, but somebody turned up the warning

[18:23] <autrijus> gaal: add sig for it?

[18:23] <gaal> sure.

[18:24] <mrborisguy> i installed subversion on my computer.  anybody mind telling me the simple way to get the latest pugs source using it?

[18:25] <mrborisguy> or better... have a good reference

[18:25] <revdiablo> mrborisguy: svn co http://svn.openfoundry.org/pugs

[18:25] <gaal> also, http://pugs.kwiki.org/?FrequentlyAskedQuestions

[18:25] <mrborisguy> revdiablo, gaal: thanks!

[18:32] <svnbot6> r3673, iblech++ | Unbreak eval_ok and make haddock.

[18:38] <autrijus> hm, I don't think I have tuits to finish op1HyperPrefix and op1HyperPostfix today

[18:38] <svnbot6> r3674, gaal++ | Add type signatures to three functions, eliminating warnings.

[18:38] <autrijus> iblech is certainly welcome to try though :)

[18:38] <iblech> Maybe :)

[18:40] <gaal> for pick.t:        pugs.exe: src/Pugs/Parser.hs:44:8-39: Irrefutable pattern failed for pattern Pugs.AST.Internals.Val (Pugs.AST.Internals.VList sublist)

[18:40] <gaal> known?

[18:41] <autrijus> gaal: iblech just fixed it

[18:41] <autrijus> and I fixed it independently

[18:41] <autrijus> but iblech's is better and he checked it in first :)

[18:41] <gaal> ah :)

[18:42] <iblech> autrijus: Just curious, how did you fix it?

[18:42] <gaal> i'd been away for a while, i forgot you guys always accomplish six impossible things before breakfast

[18:42] <gaal> irrefutable things, in this case.

[18:42] <autrijus> iblech: slapping a Syn "*" to the Var.

[18:42] <autrijus> Syn "*" [Var "@?CHECK"]

[18:42] <iblech> autrijus: ah, ok

[18:42] <autrijus> "Impossible things should be easy, irrefutable things should be trivial"

[18:43] <autrijus> iblech: t/pugsrun/04-dash-ce.t

[18:43] <autrijus> pugs: *** Undeclared variable: "@?CHECK" at -e line 1, column 1

[18:43] <autrijus> the -e form not handled?

[18:44] <iblech> pugs -we 'say CHECK { say "In CHECK"; 42 }; BEGIN { say "In BEGIN" }' works here fine

[18:44] <iblech> Will investigate

[18:47] <japhy> which document should I use as a base for Perl 6 rules?

[18:48] <japhy> apocolypse/exegesis, or some other source?

[18:48] <gaal> S05? Damian's draft on captures posted recently on p6-l?

[18:48] <japhy> I mean only so far as their syntax.  how they look.

[18:49] <gaal> Synopsis 5

[18:49] <japhy> ok

[18:49] <iblech> Fixed, I think, but I can't recompile ATM to check if it works as I've got a smoke running currently. Give me five minutes or so :)

[18:50] <japhy> thanks, gaal.

[18:50] <gaal> sure

[18:51] <iblech> pugs hang (hung?) at t/rules/named_rule_capture.t

[18:53] <gaal> iblech, golf.t is hanging for me too

[18:53] <Corion> Hmmm. Why is there withCWString() but not withAllocABytes() in Haskell ... Weird ...

[18:53] <gaal> hey Corion :)

[18:53] <Corion> Hi Gaal!

[18:54] <iblech> gaal: Hm, golf.t ran fine (6/10 tests failed, though)

[18:54] * iblech guesses it's some kind of external vs. embedded Parrot

[18:54] * iblech guesses it's some kind of external vs. embedded Parrot bug

[18:54] <gaal> oh, my bad, i forgot the crappy windows terminal XOFFs when you mouse in it.

[18:57] <gaal> btw, anyone look into the weird synchrinization issue for concurrent smoke while i was gone?

[18:57] <iblech> Ok, -c bug fixed, committing

[18:57] <iblech> weird synch issue?

[18:58] <gaal> yes, on windows at least, when you'd -j 3 the smoke test, sometimes the last batch wouldn't be waited for

[18:58] <gaal> so the harness would end without gathering all the test results

[18:59] <gaal> i *think* it may be a bizzarro cygwin issue, but i'nm not sure.

[18:59] <svnbot6> r3675, iblech++ | Unbreak -c.

[19:00] <iblech> gaal: Never happened here (Linux 2.6)

[19:00] <gaal> iblech, i couldn't reproduce it on linux myself either.

[19:00] <autrijus> I'm fixing named capture hanging

[19:01] <gaal> btw, it didn't hang on my box, autrijus.

[19:01] <gaal> cygwin.

[19:02] <iblech> Hangs here reproducible, external Parrot

[19:03] <gaal> pugs -V should say what parrot it has :)

[19:03] <gaal> i'll add that.

[19:06] <mrborisguy> Will pugs always depend on parrot for rules?  Or will that change sometime?

[19:07] <gaal> http://forum2.org/gaal/pugs/smoke-cygwin.html # r3674

[19:07] <svnbot6> r3676, iblech++ | Test fixes (mostly unEVALs).

[19:07] <Corion> Yay. unEVALs++

[19:07] <Corion> mrborisguy: Pugs will one day move onto Parrot.

[19:07] <Corion> So then, Pugs will depend on Parrot for everything.

[19:08] <Corion> (I hope that by that time, Parrot has become a single K&R C file that bootstraps the rest)

[19:09] <autrijus> So then, "in parrot mode", pugs will depend on parrot fe)

[19:09] <autrijus> So then, "in parrot mode", pugs will depend on parrot for everything :)

[19:09] <autrijus> <- still had not ruled out direct Perl6->(Non-PIR) possibilities

[19:09] <autrijus> it needs to share as much as code as possible, of course

[19:10] <autrijus> btw, named rules should be ok now

[19:10] <gaal> what's :t error "something"   ?

[19:11] <autrijus> gaal: forall a. a

[19:11] <autrijus> or just: a

[19:11] <gaal> thanks.

[19:11] <autrijus> np :)

[19:12] <autrijus> shower, bbiab

[19:12] <svnbot6> r3677, autrijus++ | * unbreak named rules for external parrot

[19:12] <svnbot6> r3678, gaal++ | Another stray missing signature added

[19:13] <gaal> (i asked ghci, but the sig i got was so surprising i concluded it must have been the wrong error :)

[19:16] <iblech> autrijus: Yep, named_rule_capture.t works now (2/2 fails)

[19:17] <Juerd> THEY CLOSED THE 24/7 GROCERIES ROBOT MACHINE THINGY

[19:17] <Juerd> The bastards!

[19:18] <Juerd> This must be part of some conspiracy against hackers.

[19:19] <pasteling> "Corion" at 84.176.48.225 pasted "How do I make "res" visible to GHC?" (39 lines, 1.4K) at http://sial.org/pbot/10330

[19:19] <Corion> Haskell Help Needed ;)

[19:20] <gaal> where is res even declared?

[19:20] <Corion> gaal: Nowhere - I guess that's my problem ;)

[19:20] <Corion> How do I declare a variable of a certain type?

[19:20] <autrijus> you just use it.

[19:20] <autrijus> return $ ProcessTimes 0 user kernel 0 0

[19:20] <autrijus> is the solution

[19:20] <Corion> That's what I tried, but I either tried it wrong or ghc doesn't want it that way ...

[19:20] <Corion> D'oh :)

[19:20] <Corion> autrijus: You make it seem so easy :)

[19:21] <autrijus> because it is :)

[19:21] <mrborisguy> haha

[19:21] <autrijus> (it's the learning part that's difficult)

[19:21] <Corion> I was stuck in the perlish way of hash handling instead of looking at the type as a list

[19:21] <Corion> autrijus: :))

[19:21] <gaal> hmmm, but that raises a question, can't i do that with named params?

[19:21] <autrijus> hm?

[19:21] <autrijus> return $ ProcessTimes

[19:21] <autrijus>     { elapsedTime = 0

[19:21] <autrijus>     , userTime = user

[19:21] <autrijus>    ...

[19:21] <autrijus>    }

[19:21] <Corion> I think one could do that somehow with named params, but I failed doing that ...

[19:21] <autrijus> er, misindent

[19:22] <Corion> Ah - like autrijus shows :))

[19:22] <autrijus> but sure, you can do that too

[19:22] <autrijus> you don't even need the $, I think

[19:22] <Corion> Ah - the golfer strikes again ;)

[19:22] <autrijus> lol

[19:22] <gaal> heh

[19:33] <Corion> Oooo. It Compiles Therefore It Must Be True!

[19:36] <gaal> latest smoke up at http://forum2.org/gaal/pugs/smoke-cygwin.html . good night!

[19:36] <svnbot6> r3679, iblech++ | util/livecd/splashscreen.txt -- Typo fixes

[19:36] <gaal> drats, "latest" does reamain true long around here :)

[19:38] <Corion> gaal: I'm about to commit another patch ;)

[19:38] <gaal> :) i'm off though. see 'ya! &

[19:39] <Corion> vcv-: You there? I just committed a version of getProcessTimes()

[19:42] <svnbot6> r3680, corion++ | getProcessTimes() implemented on Win32

[19:43] <iblech> gaal: FYI, the design of that smoke is borked (things aren't aligned left)

[19:44] <Corion> iblech: It's for me too, but simply changing the (generated) link to the old CSS fixes it all for me. It's a manual step tho'

[19:45] <Corion> Eh - no, that design looks much better than what brokenness happens in my smokes...

[19:45] <Corion> (I'm not sure if I don't cause that brokenness myself though)

[19:47] <iblech> I think it's because of the XHTML DTD, which doesn't allow inlined stylesheets or so. I remember having read something about this problem

[19:47] <Corion> iblech: Aaah - that could be a good explanation

[20:02] <gaal> the design is borked? tell that to the maintainer of HTMLMatrix! Oh crap, that'd be me. :)

[20:03] <gaal> good thing i'm not really here.

[20:03] <iblech> :)

[20:03] <Corion> Whooops. Perl5.t is an infinite loop I guess ...

[20:03] <Corion> ... it's running quite a while already ...

[20:03] <gaal> anyway, what browser, Corion?

[20:04] <Corion> gaal: FireFox

[20:04] <gaal> works great for me on ff1.04/win

[20:04] <Corion> gaal: Your version worksforme too, I was too hasty

[20:04] <Corion> gaal: My version is broken for me

[20:04] <gaal> ahhh

[20:04] <gaal> k

[20:04] <iblech> gaal: Your's is borken on FF 1.03

[20:05] <Corion> See http://datenzoo.de/pugs/win2k.html - the external link gets generated wrongly, and the inline CSS doesn't seem to catch

[20:05] <gaal> one day i should see why the build_info sucks when created on windows (\r\n)

[20:05] <Corion> FF1.04/win32 here

[20:05] <Corion> gaal: Cygwin problem I guess. Or YAML problem. But \r\n is the One True Linefeed Style :)

[20:06] <Juerd> No, it's the one true Carriage Return AND Line Feed style.

[20:06] <Juerd> Line Feed is LF is chr 10

[20:06] <gaal> Corion, what link do you see broken?

[20:06] <Juerd> And \r\n is dangerous, as \n itself can be CRLF, \r\n resulting in CRCRLF

[20:06] <gaal> looks good to me using your html

[20:06] <Juerd> s/can be/can be written back as/

[20:06] <Corion> gaal: The link to the CSS file is some absolute file:// link on my Win32 machine ;)

[20:07] <gaal> Juerd, can we fight about endianity instead? it's much more important.

[20:07] <iblech> Corion: perl5.t did not hang here, but did took long to execute

[20:07] <Corion> Looks all warped to me, unless I fix the link to the CSS to be nonbroken. iblech could be right about this one, and maybe it only happens with FF.

[20:08] <Corion> iblech: It took 1min CPU time, so maybe I was just impatient. I should take those V14gr4 that the email always tells me about.

[20:08] <gaal> i'm using ff and don't see breakage anywhere :(

[20:08] <Corion> They help against impatience I heard.

[20:08] <Juerd> gaal: Fine with me.

[20:08] <Corion> Maybe they introduced that with 1.04 ...

[20:08] <iblech> Corion: lol :)

[20:09] <Juerd> gaal: But first we have to establish that the correct word is endianness ;)

[20:10] <nothingmuch> brrr

[20:10] <nothingmuch> what a wonderful feeling

[20:10] <nothingmuch> good food

[20:10] <gaal> actually no, let's not fight. i'm off to bed. hi nm btw, and bye!

[20:10] <iblech> Prefix hyper ops implemented :)

[20:10] <nothingmuch> ciao!

[20:11] * Juerd is enjoying the wonderful feeling of autodrop pittigzoete sneker zoethoudertjes.

[20:11] <nothingmuch> fair amounts of alcohol, enough to still make sense out of speech

[20:11] <nothingmuch> iblech++

[20:11] <Corion> $^iblech++

[20:11] <nothingmuch> Juerd: what's that?

[20:11] <webmind> hmmm autodrop

[20:11] <webmind> het zou verboden moeten worden

[20:11] <Juerd> Good night, gaal

[20:11] <webmind> :)

[20:11] <Juerd> nothingmuch: A kind of drop

[20:11] <Juerd> nothingmuch: And drop is a kind of dutch candy

[20:12] <webmind> licorish

[20:12] <webmind> or something

[20:12] <Juerd> licorice

[20:12] <webmind> yes :)

[20:12] <Juerd> And no, it's not what most people think of when they hear that word.

[20:12] <webmind> although you have combinations

[20:13] <Juerd> licorice is zoethout, webmind 

[20:13] <Juerd> Now, obviously sneker zouthoudertjes have everything to do with that

[20:13] <Juerd> But drop in general much less so.

[20:14] <Juerd> s/zouthoudertjes/zoethoudertjes/

[20:14] <webmind> Juerd, ik dacht drop ?

[20:14] <Juerd> nee, drop in deze vorm bestaat nauwelijks in engelse landen

[20:15] <webmind> hmm

[20:15] <webmind> staat mij iets anders van bij

[20:15] <webmind> mgoe

[20:16] <Corion> Ooooo. I even got one unexpected success by implementing times() :)

[20:17] <iblech> :)

[20:17] <webmind> 2: a black candy flavored with the dried root of the licorice

[20:17] <webmind>           plant [syn: {licorice}]

[20:17] <Juerd> Yes, it's used for that, but it's inaccurate.

[20:18] <Juerd> It's an important ingredient, not the thing itself.

[20:18] <Juerd> Drop is sometimes called black licorice candy

[20:18] <svnbot6> r3681, iblech++ | Prefix hyper ops implemented.

[20:18] <svnbot6> r3681, iblech++ | But some don't seem to parse yet (++<< for example), and &::("prefix:+<<")

[20:18] <svnbot6> r3681, iblech++ | doesn't work yet, either.

[20:19] <Juerd> But most foreigners will only recognise that as those awful sweet things, while our typical salt candy isn't found there.

[20:19] <Corion> Aaah. I think I'm stupid. I think I know why perl5.t took so long - I was running the unoptimized version!

[20:19] <webmind> Juerd, wikipedia seems to also have a good english article on it? http://en.wikipedia.org/wiki/Liquorice

[20:19] <webmind> hmk

[20:19] <Juerd> Think of the black parts of engelse drop.

[20:19] <Juerd> That's what they think of. It has a very different taste.

[20:19] <Juerd> (It's rather tasteless)

[20:20] <Juerd> That's why I don't translate drop.

[20:20] <webmind> Juerd, hmm in scandinavia they have something with Liquorice in it.. sweet varient.. but still similar to the dutch stuff

[20:20] <webmind> chocolate covered drop

[20:20] <Juerd> yuch

[20:20] <Juerd> That's like mixing religions :)

[20:21] <webmind> no.. it's good.. just ask tuxje :)

[20:21] <webmind> Juerd, i know.. but it strangly tastes good

[20:21] <Juerd> I guess it must be overwhelmingly good. It's a combination of two of the world's greatest candies.

[20:21] <webmind> well it could be.. if it wasn't that the chocolate is really bad

[20:21] <Juerd> aw

[20:21] <Juerd> Hm

[20:22] <webmind> I don't think it could be sold as chocolate here anyway

[20:22] <Juerd> Let's melt some ourselves.

[20:22] <webmind> hmm

[20:22] <webmind> could try yes

[20:22] <Juerd> And try and recreate it, but with some sense of perfection added.

[20:22] <webmind> especially since I don't have any housemates left to complain about cooking experiments in the kitchen :)

[20:22] <Juerd> Grin.

[20:23] <Juerd> At least they weren't cafeine experiments anymore :)

[20:23] <webmind> no.. but I have a -very- evil one in the planning

[20:23] <webmind> thanks for reminding me btw.. I completely forgot..

[20:23] <Juerd> Like your famous asphalt/tar... thing.

[20:23] <svnbot6> r3682, corion++ | Promoted a :todo test for times()

[20:23] <svnbot6> r3683, iblech++ | Correctly parse +Â« (one char patch! :)).

[20:23] <webmind> busy weekend :)

[20:24] <webmind> Juerd, ah.. yes :)

[20:24] <webmind> Juerd, did you ever taste it?

[20:24] <iblech> [1,2,3]>>... should yield [1..., 2..., 3...], right?

[20:24] <Juerd> webmind: No, I have death planned in 2038

[20:24] <Juerd> And not before then.

[20:25] <Juerd> iblech: I think not.

[20:25] <webmind> 2038? is that defined by a site? or is there something special?

[20:25] <Juerd> iblech: It ought to work with lists, not references to arrays, I think.

[20:25] <iblech> Juerd: Ok, but when tr/[]/()/ it will work, right?

[20:25] <Juerd> iblech: Because otherwise you *can't* apply something to a list of references

[20:25] <Juerd> iblech: I think so.

[20:25] <iblech> Ok

[20:26] <Juerd> webmind: I usually don't write sites about the visionary future.

[20:27] <webmind> Juerd, good plan...

[20:27] <ingy> seen schwern

[20:27] * webmind noticed the future tents to change anyway

[20:27] <webmind> tends?

[20:27] <Juerd> tends.

[20:27] <Juerd> It has nothing to do with camping.

[20:28] <webmind> well I can see myself camping in the future.. ;)

[20:28] <nothingmuch> mmmm... camping

[20:29] <nothingmuch> my friends are so spineless. over the last 5 years i've tried so many times, never got them to go once.

[20:29] <nothingmuch> at least my family has character =)

[20:30] * webmind camped out last weekend... didn't bring anything to lay on...

[20:30] <webmind> it was -cold-

[20:30] <webmind> and not smart enough to take the ladies offer to share a tent :)

[20:31] <nothingmuch> hah

[20:31] <nothingmuch> the american south west was a hell of an experience in that respect

[20:31] <nothingmuch> we spent a night in arches national camp

[20:31] <nothingmuch> hot, dry desert,

[20:31] <nothingmuch> almost overwhelming

[20:31] <nothingmuch> and then we drove an hour and a half into colorado

[20:32] <nothingmuch> it was around 35° F at night

[20:32] <webmind> how much °C is that ?

[20:32] <nothingmuch> just over 0

[20:32] <webmind> ouch

[20:32] <webmind> well here it's still early.. and it rained aswell

[20:32] <webmind> so -cold- floor

[20:32] <webmind> and only had a crappy sleepingbag and a decent tent

[20:32] <nothingmuch> actually i was converting C to F for the sake of universality, on the assumption that most people here are american

[20:32] <webmind> hell of a lot of fun though... just -cold-

[20:33] <nothingmuch> actually, that's a pretty dumb assumption looking at the AUTHORS file

[20:33] <webmind> °C is more universal then °F

[20:33] <Juerd> qpsmtpd++

[20:33] <Corion> nothingmuch: I guess there aren't that many americans :)

[20:33] <Corion> (here, I mean)

[20:33] <nothingmuch> webmind: the interesting part was that it was the middle of july

[20:33] <webmind> nothingmuch, ah.. ok

[20:33] <nothingmuch> webmind: yep, C *is* more universal... but with english being the common tounge here, i tend to make too much of an effort

[20:33] <Juerd> nothingmuch: Let the people who choose to use weird standards be the ones converting ;)

[20:33] <svnbot6> r3684, iblech++ | Postfix hyper ops.

[20:34] <nothingmuch> Juerd: words I can live by. Let it be metric from now on then =)

[20:34] <webmind> indeed

[20:34] <Juerd> nothingmuch: megagood.

[20:34] * nothingmuch tries to write up a bit more of PA02

[20:34] <webmind> metric all the way

[20:35] <osfameron_> metric++

[20:35] <webmind> all these feet, inches and yards don't make any sense

[20:35] <nothingmuch> the only grudge I have with the metric system is dad's fault

[20:35] <Juerd> Yeah, what the hell is a "foot" if they don't specify the shoe size? :))

[20:35] <webmind> hm?

[20:35] <webmind> Juerd, heh

[20:36] <nothingmuch> but then he said that 12 actually makes much more sense

[20:36] <Juerd> And when someone mentions a number of gallons, then which of the many kind of gallons are they referring to?

[20:36] <webmind> Juerd, or yard.. if they don't specify the neighbourhood

[20:36] <nothingmuch> when I was 8 or so i asked him why the decimal system is in place

[20:36] <nothingmuch> he told me about fingers and all

[20:36] <nothingmuch> it's divisable by 1, 2, 3, 4, 6, goes well with 8, 9

[20:36] <nothingmuch> so on the whole it should have been easier to grok

[20:36] <Juerd> Well, the metric system works because we use the decimal system.

[20:37] <Juerd> If we were used to a duodecimal (base 12) system for numbers, then some imperial units would make more sense

[20:37] <nothingmuch> Juerd: btw, interestingly the "foot" in biblical hebrew is sort of equivelent to an "ama", or the part of the arm between the elbow and the wrist

[20:37] <nothingmuch> that's much more consistent

[20:37] <Juerd> Of a child? David? Goliath?

[20:37] <nothingmuch> especially with people counting lengths of fabric or string

[20:37] <webmind> Juerd, only a few

[20:38] <nothingmuch> Juerd: Most average adults are roughly the same

[20:38] <nothingmuch> around a foot ;-)

[20:38] <webmind> Juerd, I see little consistency in imperial units

[20:38] <Juerd> nothingmuch: For units, precision is preferred. And that asks for precise definition, where "most" can't have any place.

[20:38] <vcv-> Taking a break from outside. im too told for running around all day

[20:38] <svnbot6> r3685, autrijus++ | * prettify VError when propagating up.

[20:39] <Juerd> nothingmuch: I agree that in ancient times, body based units were perhaps more useful

[20:39] <nothingmuch> Juerd: well, in biblical times I guess percision was not very practical

[20:39] * webmind is going to get his tired head away from his laptop and fry some random contents of his fridge... cya

[20:39] <Juerd> nothingmuch: It is now, though.

[20:39] <Juerd> webmind: Have fun frying ice cream!

[20:39] <nothingmuch> Juerd: don't worry, I don't count rope lenghts with my arm

[20:39] <Juerd> Do you ever measure rope?

[20:39] <nothingmuch> nope =)

[20:40] <Juerd> I measure UTP quite often. But never rope.

[20:40] <nothingmuch> define: UTP

[20:40] <Juerd> unshielded twisted pair.

[20:40] <nothingmuch> ah

[20:40] <Juerd> The nowadays standard ethernet cable.

[20:40] * nothingmuch calls it cat-5

[20:40] <Juerd> The thing you terminate with RJ45 connectors

[20:40] <Juerd> I would, but it's cat 5*e*

[20:40] <webmind> Juerd, how do you know I have icecream in my fridge?

[20:41] <Juerd> And cat 5 can be STP or FTP as well.

[20:41] <nothingmuch> yep, yep

[20:41] <Juerd> webmind: I know where your house lives.

[20:41] <nothingmuch> what's FTP?

[20:41] <Juerd> nothingmuch: Foiled

[20:41] <nothingmuch> isn't that the std?

[20:41] <Juerd> No

[20:41] <webmind> Juerd, hmm you could have eaten it aswell.. I have little trust in cherry/chocote icecream

[20:41] <Juerd> UTP is just plastic.

[20:41] <webmind> but now gone

[20:41] <Juerd> No metal, except for the copper conductor

[20:42] <nothingmuch> most cables I cut had a foil, some nylon, a nlon thread, some grounding wire, and the 4 pairs

[20:42] <Juerd> nothingmuch: That's not UTP then :)

[20:42] <nothingmuch> i guess that's why I call it cat-5 =)

[20:42] <Juerd> UTP is much cheaper, and in most cases sufficient.

[20:42] <nothingmuch> Beer Sheva is technologically deprived

[20:42] <nothingmuch> and this stuff was the cheapest I found 

[20:43] <Juerd> For simple 100base-tx use, cat5e utp is already overkill.

[20:43] <Juerd> nothingmuch: What did it cost per meter?

[20:43] <nothingmuch> i don't recall

[20:43] * integral found the hard way that getting the twists right is the difference between GigE working and not

[20:43] * Juerd pays around EUR 40 per 305 meters (1000 ft... sigh...)

[20:43] <nothingmuch> probably about 20-30 euro cents

[20:44] <Juerd> My cable costs 13 cents :)

[20:44] <nothingmuch> 305 meters? what do you network?

[20:44] <Juerd> nothingmuch: Almost everything.

[20:44] <webmind> Juerd, imported from the empire /

[20:44] <Juerd> webmind?

[20:44] <webmind> Juerd, imperial?

[20:45] <Juerd> nothingmuch: It can be quite practical at lan parties and the like as well.

[20:45] <nothingmuch> Juerd: don

[20:45] <nothingmuch> 't have many of those

[20:45] <Juerd> I have a box of UTP in my car, standard.

[20:45] <nothingmuch> only at work, and we have a pretty good infrastructure

[20:45] <nothingmuch> oh my

[20:45] <Juerd> Many small companies don't have good infrastructure, and are housed in old buildings

[20:46] <nothingmuch> i just networked my house, and that's it

[20:46] <Juerd> That's where simpler cabling is nice to have.

[20:46] <Juerd> Oh, I networked house and office too

[20:47] <Juerd> In fact, there are 7 ethernet connections spare that don't get used

[20:47] * webmind networked without cable

[20:47] <webmind> much easier

[20:47] <Juerd> In my office that is

[20:47] <webmind> well 

[20:47] <webmind> at home

[20:47] <Juerd> Just because cable is cheap and opening up the ceiling is a lot of work, and messy too

[20:48] <Juerd> Ooh

[20:48] <Juerd> Yesterday was a profitable day, advertisement-income-wise

[20:49] <Juerd> $27 :)

[20:49] <Juerd> That's exceptional.

[20:49] <nothingmuch> What's your line of work?

[20:49] <Juerd> Computers in the broadest sence

[20:49] <Juerd> sense even

[20:49] <nothingmuch> so basically contract jobs for whoever pays you to do _?

[20:49] <Juerd> Yes

[20:50] <Juerd> I was originally going to create wonderful business software

[20:50] <Juerd> But then RSI came, fucking up those plans

[20:50] <nothingmuch> hehe

[20:50] <Juerd> Now I take all work I can get and handle.

[20:50] <Juerd> :(

[20:50] <stevan> autrijus: ping?

[20:51] <nothingmuch> I realized that software must be maintained

[20:51] <nothingmuch> for me it was much more pathetic, the realization that wasn't going to work out

[20:51] <Juerd> Of which I think I only really enjoy building and configuring servers

[20:51] <nothingmuch> sorry about the 'hehe', came before the 'RSI' comment. Didn't plan to sound like an arse

[20:51] <Juerd> I guessed that

[20:52] <nothingmuch> my work is actually pretty fun, on the whole. Lots of variation

[20:52] <Juerd> I'm stupid in my sysadmin work, though. I like doing it, but I use Debian, so the boxes need very little maintenance.

[20:52] <nothingmuch> "hey, do you think you could do this and that?"

[20:52] <Juerd> Oh, I get variation alright.

[20:52] <autrijus> stevan: pong -- sorry I got distracted

[20:53] <Juerd> One day I can be ridding a Win32 network of viruses, another trying to figure out a solution to spam floods, and the day after that I'm selling hardware.

[20:53] <stevan> autrijus: thats okay

[20:53] <Juerd> I wish there was more demand for Perl here. I'd love to teach.

[20:53] <Juerd> It's something I could do without using my hands, and it is much closer to my original plans.

[20:53] <stevan> autrijus: hyperops and such are much cooler :)

[20:53] <autrijus> exactly.

[20:54] <mugwump> moinmoin

[20:54] <autrijus> I just implemented ??? !!! ...

[20:54] <stevan> hola mugwump 

[20:55] <pjcj> do we have a !!!1!l!one operator?

[20:55] <Juerd> pjcj: That's just too many arguments for !!!.

[20:55] <Juerd> pjcj: it takes none.

[20:57] * nothingmuch goes back to formulating a PA02 sentance

[20:57] <Juerd> What is PA?

[20:58] <Juerd> A8n?

[20:59] <Juerd> (Just TRY and convince people that the plural for A8n is A7a :))

[20:59] <mugwump> pugs architecture?

[20:59] * Aankhen`` goes to sleep.

[20:59] <Aankhen``> G'night.

[20:59] <osfameron_> apocryphon iirc

[20:59] <Juerd> Good night, aankhenbacktickbacktick

[21:01] * mugwump notes that a8n could also be admonition, apparition or aspiration

[21:01] <Juerd> Thanks for that insight.

[21:01] <mugwump> np

[21:03] <nothingmuch> Juerd: docs/02Internals.pod

[21:03] <Juerd> So, yes, apocryphon.

[21:04] <Juerd> Line 32 is 81 characters

[21:04] <nothingmuch> fixed

[21:04] <Juerd> =pod and =cut are entirely redundant

[21:05] <nothingmuch> They are just a habit, I think

[21:05] <Juerd> =pod is always redundant before =anything, and =cut makes no sense in a .pod file

[21:05] <nothingmuch> removed

[21:05] <Juerd> Doesn't svn have a means of tagging the file with the latest revision?

[21:06] <autrijus> yes, $Id$

[21:06] <autrijus> I don't really use that though.

[21:07] <Juerd> I was thinking it could save a lot of work eventually for the "this document was last updated..." lines

[21:07] <nothingmuch> $Id$ is noise... =(

[21:07] <autrijus> Juerd: grammar fixes.

[21:07] <Juerd> Are revisions as well :)

[21:07] <nothingmuch> Juerd: I disagree... Someone might fix a typo, or change slightly, but it could remain out of date

[21:07] <autrijus> and will confuse people :)

[21:07] <Juerd> Okay.

[21:08] <nothingmuch> I think that comment will go away soon, too

[21:08] <nothingmuch> soon = when pugs is 2-3 times as old as it is now ;-)

[21:08] <Juerd> That's like, long time away.

[21:09] <nothingmuch> Only relatively =)

[21:09] * Juerd wonders if summer holidays will increase of decrease pugs development

[21:09] <autrijus> increase, I think.

[21:09] <svnbot6> r3686, autrijus++ | * ??? !!! ...

[21:09] <svnbot6> r3686, autrijus++ | * `fail_` should be fine outside subroutine too

[21:09] <svnbot6> r3687, autrijus++ | * minor cleanup to ChangeLog

[21:09] <ihb> Juerd: yeah, that could be interesting.

[21:10] <autrijus> but honestly I can't see anything decreasing pugs development in the coming months :)

[21:10] <autrijus> other than, say, me hitting by a bus

[21:10] <autrijus> (but even that will only decrease it temporarily)

[21:10] <Juerd> autrijus: Well, people go to far away places, with more sun than internet connection

[21:10] <stevan> you AND iblech getting hit by buses

[21:10] <stevan> *that* would be bad

[21:11] <autrijus> I'm sure integral Corion gaal and nothingmuch etc will carry on :)

[21:11] <stevan> slow but never stop :)

[21:11] <Corion> Ah, I will go to Braga, and thus won't be hacking on Pugs, at least not during the day for two weeks

[21:11] <ihb> yeah! keep up the fight!

[21:11] <ihb> oh, this isn't #politics. sorry.

[21:12] <Juerd> ihb: What makes you think that?

[21:12] <Corion> Oooo. ... is in ??? Yay !!!

[21:12] <ihb> the channel name says #perl6.

[21:12] <Juerd> ihb: How does that make you feel?

[21:12] * Juerd is the new eliza

[21:12] <ihb> Juerd: eliza bot mode?

[21:13] <ihb> haha

[21:13] <autrijus> Corion: touché

[21:13] <Juerd> Are you sure?

[21:13] <autrijus> now... what does the "Oooo" operator do?

[21:13] <autrijus> ;)

[21:13] <Corion> ;))

[21:13] <autrijus> it's a shorthand for capitalize()!

[21:14] <mugwump> forward the enclosing source file to Perlmonks?

[21:14] <Juerd> autrijus: Hm! Perl 6 can natively support OokOok if it has macros!

[21:14] <Juerd> Imagine this, INLINE OOKOOK

[21:14] <Corion> Juerd: You're thinking of COBOL again :)

[21:14] <Juerd> No, not cobol

[21:14] <autrijus> I wonder if there is a capitalise() form in addition to capitalize() 

[21:14] <autrijus> is this the first builtin that has the -ize suffix?

[21:14] <Juerd> http://www.dangermouse.net/esoteric/ook.html

[21:15] <Juerd> autrijus: I'd just call it caps.

[21:15] <nothingmuch> i think the most amusing esoteric language to me is beatnik: http://www.cliff.biffle.org/esoterica/beatnik.html

[21:15] <ihb> gah, do i have to spell that long anme? i want an operator!

[21:15] <Juerd> To also indicate that it adds multiple.

[21:15] <Corion> Bah. One must subscribe to glasgow-haskell-users. Is anyone subscribed to [email@hidden.address] and can forward my message?

[21:15] <mugwump> capitalise is the canonical form of course :)

[21:16] <mugwump> oh, actually I lie

[21:16] <Juerd> compared to uc, lc, lcfirst and ucfirst, capitali<[sz]>e is too long.

[21:16] <Juerd> caps is just about right, length wise, and wrt meaning

[21:16] <autrijus> why do we want that builtin anyway :)

[21:16] <autrijus> mugwump: hm? what is actually the canonical form?

[21:16] <Juerd> autrijus: For English and Americans who want their silly "title case"

[21:17] <Juerd> autrijus: Which this doesn't even properly implement.

[21:17] <autrijus> exactly!

[21:17] <Juerd> autrijus: In other words: I have absolutely no idea why anyone would use this, even if it were a module.

[21:17] <mugwump> autrijus: I was just looking at whether "capitalise" was ever 'correct' English, and given the results of putting 'capitalise' into askoxford.com, I don't think so

[21:17] * nothingmuch is disappointed that lazy context did not receive any feedback from @Larry

[21:17] <autrijus> mugwump: ah. well, the canonical form is 首字大寫 anyway

[21:18] <autrijus> ;)

[21:18] <ihb> there already exists such a module: Text::Capitalize -- capitalize strings ("to WORK AS titles" becomes "To Work as Titles")

[21:18] <clkao> 大首('orz')

[21:18] <ihb> (to Juerd)

[21:18] <autrijus> clkao: indeed! that makes the head bigger!

[21:18] <autrijus> clkao: talk about DWIM!

[21:18] <clkao> bwahaha

[21:18] <Juerd> ihb: Yes, but that's not what Perl 6's capitalize does

[21:19] <ihb> Juerd: oh, i thought you said it was used for titles.

[21:19] <Juerd> ihb: And, something that does title case should probably be rude and claim tc, to go with lc and uc

[21:19] <Arathorn> presumably p6's capitalize has no idea that prepositions shouldn't be capitalised...

[21:19] <autrijus> Juerd: I wonder who brought up .capitalize

[21:19] <mugwump> now that we've got unicode, should uc("ä") be "Ä" ?

[21:20] * mugwump bahs at encodings

[21:20] <Juerd> ihb: capitalize simply s/^|<after ws>./{ uc $/ }/'es

[21:20] <ihb> how often do you use ucfirst()/lcfirst(), btw?

[21:20] <Juerd> Often.

[21:20] <ihb> when?

[21:21] <autrijus> I often use the interpolation form.

[21:21] <Juerd> lcfirst never, ucfirst quite often

[21:21] * nothingmuch noticed he drifted very far away from those things

[21:21] <Juerd> Me too

[21:21] <clkao> oRZ

[21:21] <nothingmuch> it's been sooo long since i've done math in perl, more than basic addition/incrementing, or related arith

[21:21] <nothingmuch> or "pretty" string formatting

[21:21] <nothingmuch> except for progress reports

[21:21] <Juerd> ihb: capitalize simply s/[ ^ | <after ws> ]./{ uc $/ }/'es

[21:22] <Juerd> Sorry about the previous version. It was wrong.

[21:22] <ihb> i survive.

[21:23] <Arathorn> dude, you've got ^b's in your regexp... :)

[21:23] <Juerd> Of course, it's even clearlier written as s/<after ^|ws>./{ uc $/ }/

[21:23] <Juerd> Arathorn: Dude, your irc client must really suck ;)

[21:23] <Arathorn> hehe

[21:23] * Arathorn no comment

[21:25] <Juerd> ihb: In normal language, in a somewhat more grokkable world without chromatics and brian d foys, every sentence begins with a capital.

[21:26] <Arathorn> latin doesn't...

[21:26] <Juerd> ihb: So for titles in web pages, as entered by users, I often apply ucfirst because the users themselves are to stupid to remember to do this.

[21:26] <Corion> Example sentences: paris is in france. washington is in the US of A.

[21:26] <Juerd> Arathorn: LATINHASNOLOWERCASELETTERSANDITHASNOSPACESANDITHASNODIFFERENCEBETWEENVANDU

[21:26] <ihb> Juerd: haha, of course. yeah. i don't have to deal with stupid users :-)

[21:26] <Juerd> Arathorn: Real latin, that is :)

[21:27] <nothingmuch> atin-lay

[21:27] <Arathorn> carved latin, perhaps - cursive latin script had cases :)

[21:27] <Juerd> Corion: Thank you for the visual support :)

[21:27] <Corion> Juerd: Both sentences begin with a capital!

[21:27] <Juerd> Corion: And yet they don't! Whoa!

[21:27] <Corion> :)

[21:29] <mugwump> so.  ext/Perl-MetaModel/lib/Perl/Cxt.pm.  Succint translation of Haskell to Perl types or missing the point?

[21:29] <nothingmuch> autrijus: I forgot what doBind does

[21:29] <stevan> mugwump: can you svn up and take a look at docs/perl6_meta_meta_class_hierarchy.pod  

[21:29] <stevan> r3688

[21:30] <stevan> autrijus: if you could take a look too that would be cool 

[21:30] <svnbot6> r3688, Stevan++ | Perl::MetaModel - More diagrams, better pseudo code examples; I think this is getting close :)

[21:30] <stevan> and anyone else for that matter :)

[21:30] <autrijus> nothingmuch: it binds stuff.

[21:30] <autrijus> nothingmuch: and takes care of name shadowing in

[21:31] <autrijus> sub foo ($x, $y=$x)

[21:31] <autrijus> by special casing for Syn "default"

[21:31] <nothingmuch> ah

[21:31] <autrijus> it's the [ApplyArg] generator

[21:32] <Juerd> Is ($x = $y, $y) valid?

[21:32] <Juerd> How about ($x = $y, $y = $x)?

[21:32] <autrijus> Juerd: it's valid but does not mean what you think it means.

[21:32] <mugwump> stevan: why say, a Role is "flattened"?  Surely if you add behaviour to a role after attaching it to classes etc, you want those classes to be updated already?

[21:32] <Juerd> I'm not thinking much of it

[21:32] <autrijus> Juerd: the $y in ($x = $y) is an outer scope.

[21:32] <Juerd> I see

[21:33] <stevan> mugwump: hmmm, that is an interesting case

[21:33] <Juerd> I'm beginning to think it may be fruitful to separate arguments using semicolons, in signatures.

[21:33] <stevan> mugwump: however, roles are supposed to be flattened into the class

[21:33] <Juerd> This probably won't get broad support.

[21:33] <stevan> when a role is added at runtime it creates an anon class 

[21:33] <autrijus> Juerd: I'll support it.

[21:33] <nothingmuch> pascal traumas may surface

[21:34] <nothingmuch> i think it works well when the params are complex

[21:34] <mugwump> when it is added at runtime to a *variable* it creates a new anon class

[21:34] <nothingmuch> but that it's asymetric with:

[21:34] <stevan> I ended having to go back and read more about them and the Traits paper from which they were originally spawned

[21:34] <mugwump> aiui

[21:34] <Juerd> Currently, argument definitions look too much like expressions

[21:34] <nothingmuch> function(1, 2);

[21:34] <Juerd> Simply changing , to ; can fix that instantly.

[21:34] <nothingmuch> sub function ($one; $two);

[21:34] <stevan> mugwump: yes, to a variable

[21:34] <Juerd> nothingmuch: Yes, but it's already asymmetric with everything else in Perl, so that can't be a good reason.

[21:35] <stevan> however everything i read indicated that roles are composed/flattened at compile time

[21:35] <Juerd> Signatures are a mini language, like regexes

[21:35] <nothingmuch> Juerd: but this could be *really* confusing to newbies

[21:35] <Juerd> nothingmuch: All the better.

[21:35] <nothingmuch> better?

[21:35] <Juerd> Yes

[21:35] <Juerd> If there's one important lesson every newbie must learn, it's: don't guess, don't assume.

[21:36] <nothingmuch> rationalize please =)

[21:36] <stevan> mugwump: it is dangerous to think of Roles as being too much like classes

[21:36] <stevan> because they really are different

[21:36] <nothingmuch> i think that the common case, sub foo ($a, $b) should stay trivial

[21:36] <nothingmuch> because there's just too much context

[21:36] <Juerd> nothingmuch: The symmetry between foo(a, 3) and an ($a, $b) signature is dangerous.

[21:36] <nothingmuch> every language on earth does it that way

[21:36] <Juerd> nothingmuch: So I think breaking the symmetry is a good idea.

[21:37] <Juerd> nothingmuch: You can write foo($a, $b) and foo($a + 3, $b), but not have a signature of ($a + 3, $b).

[21:37] <Juerd> nothingmuch: Neither can you write my $a + 3 = 5;

[21:37] <wolverian> why not? :)

[21:38] <autrijus> indeed, why not. :)

[21:38] <autrijus> it has a very precise meaning.

[21:38] * nothingmuch doesn't have a real reason to go against ; in params except for asymetry

[21:38] <autrijus> my $a + 3 = 5;

[21:38] <autrijus> say $a; # 2

[21:38] <Corion> Because Pugs is not Prolog :)

[21:38] <Juerd> nothingmuch: I havo no real reason to go *for* ; except asymmetry.

[21:38] <mugwump> stevan: ok.. but is there a good reason, other than dispatch optimisation, that roles should be flattened?

[21:38] <autrijus> Corion: s/not/not yet/

[21:38] <nothingmuch> i think the mapping symetry brings is very useful

[21:38] <Corion> autrijus: ;)

[21:38] <Juerd> autrijus: That doesn't actually work like that, does it?

[21:39] <Corion> Ovid should port his WAM :)

[21:39] <autrijus> Juerd: in some languages it does.

[21:39] <nothingmuch> but dunno... p6l?.

[21:39] <Juerd> autrijus: Now, sqrt($x) = 4, $x == 16?!

[21:39] <Juerd> autrijus: Perl is not some languages in that respect

[21:39] <autrijus> Juerd: yeah.

[21:39] <stevan> mugwump: because they are meant to be reusable chunks, when we start dispatching then we begin to get into a whole mess of other things

[21:39] <autrijus> it would be kind of fun for it to do that via a module, though :)

[21:39] <Juerd> autrijus: This means every expression needs to be an lvalue, which ... makes my head spin.

[21:39] <autrijus> Juerd: Curry and Oz does that happily :D

[21:40] <clkao> e/win	23

[21:40] <nothingmuch> in p5 can overloaded operator methods be lvalue?

[21:40] <Juerd> just_make_it_so_that(sqrt($x) == 16);  # grin

[21:40] <wolverian> $a + $b = 5; $b = 2*$a; say $a;

[21:40] <stevan> mugwump: remember any reference to $?CLASS or $?SELF in a Role is deffered to runtime and is taken to mean "the class which implemented the role"

[21:40] <autrijus> Juerd: right, just_make_it_so_that is a primitive in those languages.

[21:40] <stevan> mugwump: that alone makes me think we should be flattening

[21:40] <Corion> autrijus: Are you subscribed to glasgow-haskell-users ?

[21:40] <mugwump> sure, this is the difference between is and does

[21:40] <autrijus> Corion: no

[21:40] <Juerd> autrijus: Not Perl, please.

[21:40] <autrijus> Juerd: not by default, sure :)

[21:41] <Juerd> This sort of thing doesn't work well with sequential execution, I think.

[21:41] <stevan> mugwump: yes it is, but it will get really hairy

[21:41] <Corion> Gah. So I'll have to subscribe to fire off that one message, and then unsubscribe again ...

[21:41] <autrijus> Juerd: neither does Rules, really...

[21:41] <stevan> mugwump: have you read the original Traits paper? and the Formal Trait model paper?

[21:42] <stevan> mugwump: they make a very good case for flattening

[21:42] <mugwump> can you summarise why that is more than an implementation detail?

[21:42] <stevan> mugwump: not easily :)

[21:43] <stevan> mugwump: Roles are all about composition

[21:43] <stevan> and to me composition makes more sense when we are flattening

[21:44] <stevan> mugwump: part of the problem I see with allowing runtime Role manipulation to affect classes 

[21:44] <stevan> is that you have to deal very specifically with conflicts 

[21:44] <stevan> and a change in a Role would require all classes which implement the Role to re-evaluate their relatioship

[21:44] <stevan> a Role conflict is a fatal error

[21:44] <stevan> (IIRC that is)

[21:45] <stevan> so by altering a Role at runtime and expecting Classes to update

[21:45] <mugwump> is that a problem?  if you play with stuff like that at runtime you expect a lot to happen

[21:45] <stevan> mugwump: well, if I played with a class like that

[21:45] <stevan> I would not expect it to die

[21:45] <stevan> I would expect weirdness

[21:45] <stevan> but not death

[21:46] <stevan> mugwump: what do you see as the advantage of being able to do this?

[21:47] <stevan> if it is useful, then I can see trying to make it work

[21:47] <stevan> but if it is just a black hole of problems waiting to happen

[21:47] <stevan> why support it?

[21:48] <kelan> because someones black hole of problems is someone else's useful?

[21:49] <mugwump> largely because I can't see the black hole yet.

[21:50] <stevan> kelan: I am not sure i agree with you in this case

[21:52] <stevan> mugwump: ok, thats fair

[21:52] <stevan> Let me explain what I see :)

[21:52] <mugwump> It is a good question, and I don't think we know enough yet to decide on it tbh

[21:53] <mugwump> stevan: have you tried using Umbrello before?

[21:53] <stevan> mugwump: no, i am not familiar with it

[21:54] <nothingmuch> good night

[21:54] <mugwump> it's just I think that this ascii art can be a little confusing with so many items

[21:54] <stevan> mugwump: I agree, however I am not on Linux

[21:54] <stevan> I have OmniGraffle for OS X though

[21:54] <mugwump> can it grok .xmi?

[21:55] <stevan> no idea, but I can check :)

[21:55] <mugwump> eg, docs/class/ducktyping.xmi

[21:55] <stevan> yes, thats what I was going for

[21:56] <stevan> no it cannot

[21:57] <mugwump> damn, and umbrello is kde as well

[21:57] <stevan> mugwump: looking for an xmi editor right now

[21:58] <stevan> mugwump: ever heard of Violet?

[21:58] <stevan> http://www.horstmann.com/violet/

[22:00] * mugwump starts violet

[22:01] * mugwump curses at crappy JVMs

[22:01] <svnbot6> r3689, iblech++ | ChangeLog -- Typo fixes and mention of `CHECK {...}`.

[22:02] <japhy> what namespace should I give my extension module of Regexp::Parser for parsing Perl 6 rules in Perl 5?

[22:02] <japhy> Perl6::Regexp::Parser?

[22:02] <japhy> or just Perl6::Regexp?

[22:03] <stevan> mugwump: it starts for me, but it's kinda clunky

[22:03] <mugwump> what about argouml?  apparently that one's quite developed

[22:03] <stevan> mugwump: I will give it a try

[22:03] <stevan> mugwump: however I want to go back to the Role thing

[22:04] <mugwump> ok

[22:04] <stevan> Part of what I see as the "good part" of Roles is that they are composed

[22:04] <stevan> if they were not composed, and just dispatched too, then they would really just be classes which cannot be instantiated

[22:05] <stevan> abstract classes or something

[22:05] <kelan> japhy: if its still a parser (which i'm guessing it is since you say it parses:) i would leave ::Parser at the end

[22:05] <stevan> the composition, and the tight rules for that composition make them "safer" in a way

[22:06] <mugwump> what way is that?

[22:06] <mugwump> in that you know at compile time rather than run time if there is a dispatch problem?

[22:06] <japhy> ok.

[22:06] <japhy> Perl6::Rules::Parser or Perl6::Regexp::Parser?

[22:06] <stevan> mugwump: yes, the compile time vs/ runtime knowledge is helpful

[22:07] <japhy> should I call it "Rules" since that seems to be the Perl6 word for "regexes" now?

[22:07] <stevan> mugwump: I cannot explain this well enough

[22:08] <stevan> I really suggest you read these papers....(links coming)

[22:08] <kelan> i would say yes, japhy. but maybe singular: Perl6::Rule::Parser

[22:08] <kelan> as the Perl 5 name is singular

[22:08] <japhy> oh, right-o.

[22:09] <stevan> http://www.iam.unibe.ch/~scg/cgi-bin/oobib.cgi?query=nathanael+traits+composable+units+ecoop

[22:09] <japhy> good deal.  thanks.  I know it's a minor thing, I just want to take care of the nits now, rather than later.

[22:09] <mugwump> I like the parallel you drew between roles being abstract classes.  this seems to work, as multiple inheritance can be used for roles-like things, and roles can be used for class-like things too

[22:09] <stevan> http://www.iam.unibe.ch/~scg/cgi-bin/oobib.cgi?query=Traits+the+Formal+Model

[22:09] <stevan> mugwump: but I think the power of roles is in that they are *not* just abstract classes

[22:09] <stevan> I have to take my dog out, bbiab

[22:12] <osfameron> violet-- # clunky and buggy

[22:12] <mugwump> 143 pages for the Ph.D thesis!

[22:13] <mugwump> heh, "millions of programmers".  yeh, right

[22:13] <Juerd> What paper size? Font size? Margins? Line and letter spacing?

[22:13] <Juerd> Pages are a bad unit for text size management :)

[22:16] <stevan> mugwump: its a dense 143 pages too

[22:19] <stevan> avoiding inheritance (or inheritance like things) means we can avoid some of the uglier mi issues

[22:20] <stevan> and the conflict resolution allows you too "fix" the others

[22:20] <mugwump> ok.  this description of traits is not the same as Perl roles, particularly wrt state

[22:20] <mugwump> as roles can and sometimes must have state

[22:20] <stevan> yes that is true

[22:21] <stevan> they (the traits researchers) are actually adding the ability to have state into Traits

[22:21] <stevan> I am looking over some of the newer papers now actually

[22:21] <mugwump> this flattening doesn't have to happen in the Model, ie SomeClass.meta, but must happen at the package level (ie, SomeClass)

[22:21] <mugwump> Whether this happens at runtime or compile time is a matter of whether the dispatch resolution is lazy or not

[22:21] <stevan> grab the "Traits: A Mechanism for Fine-grained Reuse" paper from here: http://www.iam.unibe.ch/~scg/Research/Traits/index.html

[22:22] <stevan> it looks like they have included state in that model

[22:22] <stevan> (I need to read this one myself actually)

[22:23] <mugwump> sheesh that Stephane likes to re-use the same content for multiple papers...

[22:23] <stevan> :P

[22:23] <stevan> I agree, it should not happen at the meta level, but at the user level

[22:23] <stevan> package level, whatever

[22:24] <stevan> but it is more than just dispatch resolution

[22:24] <mugwump> I was having some thoughts about the difference between the "SomeClass" object and the "SomeClass.meta" object

[22:24] <stevan> the act of composition requires you to do conflict resolution

[22:25] <mugwump> so, perhaps SomeClass.meta.ref =:= ::Class, and SomeClass.ref =:= ::ComposedClass

[22:25] <stevan> the rules for conflict resolution are different for Roles then they are for classes

[22:25] <stevan> mugwump: yes that makes sense (if I am understanding you correctly)

[22:26] <mugwump> Good.  So, we can keep the deep structure on the .meta objects, and flatten them in the "composed" class objects, which is effectively a cache of the dispatch resolution process

[22:27] <mugwump> very much like those odd stash entries you'll see in any package's stash after method dispatch in Perl 5

[22:27] <stevan> mugwump: yes

[22:27] <stevan> the does() heirarchy does not go away

[22:27] <stevan> it is just "cached" yes

[22:33] <mugwump> These are your .*::Behaviour objects?

[22:34] <stevan> The Behavior objects just implement the methods needed to compose Classes and Roles

[22:34] <stevan> addMethod() addRole() etc

[22:34] <stevan> I borrowed that from Smalltalk

[22:35] <stevan> otherwise we end up duplicating those methods in the MetaClass, the Class and the Role

[22:36] <mugwump> on the one hand we don't want to duplicate code, but on the other hand we can't have the implementation of the MetaMetaModel affecting how the MetaModel works

[22:36] <stevan> mugwump: well the way I have it implemented it wont

[22:37] <stevan> at least I think it wont, I need autrijus to fix an issue before I can really tell

[22:38] <stevan> The MetaMetaModel needs to be able to compose metaclasses out of properties, methods and roles

[22:38] <stevan> the MetaModel needs to be able to do the same

[22:38] <stevan> but not pass that ability on

[22:39] <stevan> down to the "user" layer

[22:39] * stevan wonders if he and mugwump have bored everyone else to sleep with all this meta-meta stuff

[22:40] <mugwump> Well, I think we have arrived at something that significantly alters at least perl6_meta_model.pod

[22:40] <stevan> yes

[22:40] <stevan> I recognize that :)

[22:40] <stevan> (and anguished over it)

[22:41] <stevan> but still I believe pretty strongly in this model now

[22:41] <stevan> which is not to say that I think it is perfect or 100% correct

[22:41] <stevan> or that it cannot stand improvement

[22:41] <mugwump> All we have to do with the MetaMetaModel is make it powerful enough to represent the data structures implied in the VCode.pm, Param.pm, etc

[22:43] <stevan> mugwump: yes, I purposfully ignored that part for now though

[22:43] <stevan> but I see no real reason it is not possible

[22:44] * stevan goes to check that for sure 

[22:45] <stevan> mugwump: yes, i see no reason why the MetaMetaModel cannot handle that

[22:46] <stevan> mugwump: I see no reason what the metaclass(Role) needs to be able to invoke a method, do you?

[22:47] <stevan> if you cannot instantiate it, you cannot invoke a method on it

[22:47] <stevan> unless we have Role methods, but I am not sure they make sense

[22:49] <stevan> I also think we definitely need some kind of meta-proxy object to be returned from .meta()

[22:49] <svnbot6> r3690, iblech++ | * &::("infix:<[+]>") and &::("prefix:Â«+<<Â»") and co. work now.

[22:49] <svnbot6> r3690, iblech++ | * Removed a wrong test from operator_overloading.t.

[22:51] <iblech> So one can assign to .meta, you mean?

[22:51] <stevan> iblech: no, because exposing the true MetaClass would be exposing the implementation

[22:52] <iblech> Ah, I understand

[22:52] <stevan> I see the .meta() method (according to s12) as providing read-only information

[22:53] <stevan> however I wonder (and I didnt see this in S12) if you would be able to create your own MetaClasses?

[22:54] <iblech> I hope this is allowed, although yet I don't really know what this would be good for, need to re-read your's and mugwump's docs :)

[22:54] <stevan> iblech: it is useful, but highly esoteric

[22:54] <svnbot6> r3691, Stevan++ | Perl::MetaModel - moved the invokeMethod from Role::Behavior to Class::Behavior; tests have been updated to the new namings

[22:54] <svnbot6> r3692, Stevan++ | whoops, arrow going the wrong way :)

[22:54] <stevan> but I can see where some things in S12 would be easier done with metaclasses

[22:55] * stevan is looking for an example

[22:58] <stevan> iblech: somewhere I saw something like "my $foo = Foo.new() is Persistent" or something to that effect

[22:59] <stevan> I could see that as being a runtime metaclass re-assignment

[23:00] <iblech> ...and the metaclass takes care of writing the stuff to disk?

[23:00] <stevan> iblech: yes

[23:00] <iblech> nice!

[23:00] <stevan> because the metaclass should have enough knowledge of the class implementation to do it

[23:04] <stevan> iblech: also the "class Foo is final {}" and "class Foo is open {}" would make sense to be implemented with metaclasses

[23:06] <iblech> Ok, then one should definitely be able to create own metaclasses, and subclass existing ones etc.

[23:06] <mugwump> is final() is only one bit on the metamodel, but the compiled versions may be wildly different

[23:06] <stevan> iblech: yes, the issue is how to change the metaclass, I think meta() should not be readonly though

[23:07] <stevan> mugwump: from A12/Classes ". As such, a role may only be composed into a class or into another role, never inherited from or delegated to. That's what classes are for."

[23:11] <mugwump> that just means you have to use "does" to use them, I think

[23:11] <mugwump> ie, a Role is not a Type.

[23:12] <stevan> yes

[23:12] <stevan> but the "Roles are not inherited from or delegated to" is important

[23:13] <stevan> A role is not a functioning "thing" it is totally abstract

[23:13] <mugwump> sure, it needs to be substantial to be delegated to

[23:13] <mugwump> or inherited from, and it is insubstantial

[23:14] <mugwump> if Dog is a role and you use `my Dog $spot', you are creating a new Type that .does(Dog)

[23:14] * stevan really has to read A12 again

[23:14] <stevan> mugwump: yes

[23:14] <stevan> anon class

[23:14] <mugwump> maybe that's not legal syntax, though

[23:15] <mugwump> maybe you can only use my $spot does Dog if it's only a Role

[23:15] <stevan> mugwump: I see no reason why it can't be legal

[23:15] <wolverian> it'd be symmetric with signatures

[23:15] <stevan> it just would be un-intutive to most

[23:15] <mugwump> it would also more clearly draw the line between substantial and insubstantial types

[23:16] <stevan> you are referring to "my $spot does Dog" right?

[23:16] <Juerd> does Dog does Cat does Kerberos does Minotaur

[23:16] <Juerd> Freaky creature.

[23:16] <mugwump> correct.  Basically, if a Role is not a Type, you cannot use it in a declaration where you must use a type

[23:17] <stevan> mugwump: yes

[23:17] <Juerd> Hm, I just started my laptop, but I see the battery's already dead

[23:17] <stevan> however, if we want to be evil we can make that just imply the anon class

[23:17] <Juerd> Guess I forgot to charge it

[23:17] <Juerd> 8 minutes left

[23:19] <Juerd> Ah well, I'll keep the juice for emergencies

[23:19] <Juerd> Good night!

[23:20] <iblech> 'nite

[23:31] <iblech> Ok, checking in improved hyper op code

[23:32] <stevan> mugwump: in A12 Larry does talk about not composing roles, but inserting them into the delegation hierarchy

[23:32] <stevan> however the details of that he says is a "implementation detail"

[23:32] <mugwump> ok

[23:33] <stevan> however i think that properties maybe will need to be copied into the composed class

[23:33] <stevan> because there needs to be an instance copy

[23:33] <stevan> s/instance copy/instance specific copy/

[23:34] <stevan> otherwise we would need to make Role instances of some kind

[23:35] <stevan> I actually think this will support your "changing a Role at runtime" idea

[23:35] <stevan> as long as  you are just changing the methods

[23:36] <stevan> unless of course we think of accessors as closures, and then make the properties bound to the closure, and not really a "part" of the object

[23:36] <svnbot6> r3693, iblech++ | * [+]<<, [+]<<<<, [+]<<<<<<, etc. will now work.

[23:36] <svnbot6> r3693, iblech++ |   Note: [+]Â« does not work (isn't parsed), but I must sleep now :)

[23:36] <svnbot6> r3693, iblech++ | * Moved a test of arrays_and_hashes/pairs.t to data_types/pair.t.

[23:36] <svnbot6> r3693, iblech++ | * EOLs at EOFs.

[23:37] <stevan> however then we force all access to properties through methods

[23:37] <stevan> which on the meta-level might not be a problem

[23:37] <iblech> Ok, sleep :)

[23:37] <stevan> nite iblech :)

[23:37] <iblech> Release tomorrow?

[23:37] <stevan> I assume we are

[23:38] <iblech> Ok :)

[23:38] <iblech> Nite &

[23:39] <stevan> mugwump: any thoughts?

[23:41] <vcv-> So..how do you call a private mutator method on each object in an array?

[23:43] <svnbot6> r3694, iblech++ | Added note about hyperops to ChangeLog.

[23:43] <mugwump> stevan: I've just tabulated the code examples in perl6_meta_model.pod, I think that a similar format could be used to explain what you mean..

[23:44] <stevan> mugwump: ok, commited yet?

[23:45] <mugwump> r3695

[23:46] <mugwump> So, our "compiled" classes+roles+whatever are types..

[23:48] <stevan> why is a Class not also an Object?

[23:49] <svnbot6> r3695, mugwump++ | First half of document updated with new insights on Class vs MetaClass vs Compiled classes (types)

[23:49] <mugwump> it's a type, not a value

[23:49] <stevan> what is a type? Object or Class?

[23:49] <mugwump> a class is a type, but a type is neither object nor class

[23:50] <mugwump> an object has a type

[23:50] <stevan> oh no... sorry I mean the metaclass

[23:50] <stevan> $meta level

[23:51] <stevan> I am not sure i understand/agree with all the does() statements

[23:51] <stevan> I think that is mixing roles and classes too much

[23:51] <stevan> can you explain further?

[23:51] <stevan> .does(Object) to me implies that Object is a Role

[23:51] <stevan> s/Role/role/

[23:52] <stevan> I think Object.does(Role), in that Object can do all the things a Role does (compose, etc)

[23:52] <mugwump> ok, svn up to 3696, put a question mark by each one you don't agree with, and commit

[23:53] <stevan> ok

[23:53] <mugwump> .does(Type $type) does not imply a role

[23:53] <mugwump> necessarily

[23:53] <stevan> ok

[23:54] <stevan> thats is where I am confused then

[23:54] <svnbot6> r3696, mugwump++ | add isa(Type) and does(Type) to table

[23:54] <stevan> does() is ducktyping right?

[23:54] <stevan> (the way you are using it)

[23:54] <mugwump> essentially, yes

[23:54] <stevan> ok

[23:54] <stevan> THAT makes sense

[23:54] <stevan> however it conflicts with the does() nomenclature

[23:54] <stevan> maybe we should use .quacks() :)

[23:54] <mugwump> dude, we're defining the nomenclature

[23:55] <stevan> uhm

[23:55] <stevan> well .does() is already been used though

[23:55] <stevan> I am not sure we are defining it *that* much

[23:55] <mugwump> is there a conflict with using it for the same thing?

[23:55] <stevan> A12 is actually much more specific than S12

[23:55] <stevan> well to me does(Something) implies that there is a Something role

[23:56] <mugwump> if ::Something is a role, yes

[23:56] <stevan> yes

[23:56] <stevan> while Roles and ducktyping are for the most part the same

[23:56] <stevan> I think duck typing does not imply roles

[23:56] <stevan> (wait, that doesnt make sense)

[23:57] <stevan> Roles is one way to do ducktyping

[23:57] <stevan> but not the only way 

[23:57] <stevan> (I think that make more sense, but I am still not sure)

