[02:12] <crysflame> a period after was not would be nea

[02:12] <crysflame> i don't think the comma is required, unless you're saying it like "That part of my car exploded, though, was not"

[02:12] <crysflame> as the commas are used to interjecct. was not isn't an interjection. yey elements of style.

[02:41] <Steve_p> heh, comma-talk continues :)

[02:42] <Odin-LAP> I thought comma had already been implemented? :D

[02:47] <crysflame> heh

[02:56] <autrijus> hey.

[03:02] <autrijus> hm. I should make it crystal clear that Pugs wants ActivePerl/MinGW's Perl

[03:03] <autrijus> and not CygPerl.

[03:05] <Odin-LAP> How strong of a REPL loop thingy is Pugs going to have? :>

[03:06] <autrijus> I'd like eventually to implement most of hugs commands :)

[03:06] <autrijus> see Shell.hs

[03:07] <autrijus> in particular, :l and :e will be helpful

[03:07] <autrijus> as would :b

[03:07] <autrijus> patches welcome :)

[03:07] <Odin-LAP> Hm.

[03:08] * Odin-LAP ponders going off on a (or yet another) tangent and learning Haskell...

[03:08] <autrijus> you can read a few pages of YAHT per day :)

[03:09] <Odin-LAP> Hm?

[03:10] <autrijus> see "Where can I learn more about Haskell?"

[03:10] <autrijus> http://svn.perl.org/perl6/pugs/trunk/docs/01Overview.html

[03:10] <crysflame> autrijus: hmm, yep.

[03:10] <autrijus> yaht = yet another haskell tutorial

[03:10] <crysflame> crystal clear.

[03:11] <autrijus> yeah. it now dies if $^O eq 'cygwin'.

[03:11] <crysflame> heh, neat

[03:11] <crysflame> why cygwin bad?

[03:11] <crysflame> ^is

[03:11] <autrijus> not bad, just lack of a porter for ghc

[03:11] <autrijus> hence, bitrotted

[03:11] <clkao> morning autrijus 

[03:12] <autrijus> ghc is more MinGW minded.

[03:12] <crysflame> ah.

[03:12] <autrijus> hi clkao.

[03:12] <crysflame> does ghc compile under cygwin?

[03:12] <autrijus> not sure. never tried. 

[03:20] <autrijus> going to airport now.

[03:20] <autrijus> hopefully resume network in a hour

[03:20] * autrijus waves &

[05:37] <scw> Hello, I've just maintioned that thet word 'Synopses' in home page and overview should be a miss-spelling of 'synopsis'?

[05:38] <obra> that's a plural, no?

[05:38] <mdiep> yes, synopses is plural of synopsis

[05:38] <scw> hmm... but, however, the url uses synopsis as well.

[05:41] <obra> and? the url points to a singular.

[05:41] <obra> scw: as a native speaker, it looks sane to me.

[05:41] <scw> obra: Oh! Then that's fine :)

[05:42] <obra> heh.  (you'll see that perl.org uses synopses in the text as well ;)

[05:44] <scw>  (It seems that I should be more concentrated in English class...)

[05:46] <obra> what's your native language, scw?  Do note that 'synopses' isn't very common, even for native speakers

[05:46] <scw> obra: Chinese, I'm from Taiwan.

[05:47] <obra> an. XD   will you be at yapc.tw?

[05:47] <mdiep> also, hypotheses is the plural of hypothesis

[05:47] <scw> obra: Sure! I've registered and payed!

[05:47] <obra> cool. I'll meet you there

[05:48] <scw> Are you one of the speakers?

[05:49] <obra> <- Jesse Vincent (yes)

[05:51] <scw> obra: Oh! You talked (and will talk) about RT! I participated YAPT.tw last year, too!

[05:53] <obra> ah :)

[05:53] <obra> Yes, RT is my baby

[06:06] <mugwump> young child more like ... it'l be a teenager before you know it

[06:14] <mugwump> so speaking of things in double digits, has anyone tackled pugs tests for Synopses 10+?

[07:31] <autrijus> rehi from HKG!

[07:32] <clkao> happy?

[07:32] <autrijus> the whitespace problem introduced by luqui's qwinv patch has been fixed.

[07:32] <autrijus> was very silly

[07:32] <autrijus> $x < $y > $z

[07:32] <autrijus> # parsed as $x{'$y'} $z

[07:33] <autrijus> chained comparison now works again.

[07:33] <autrijus> looking thru the test failures now

[08:05] <autrijus> sig, ($x-- + $x--) is calculated thrice.

[08:05] * autrijus moans the lack of referential transparency

[08:05] <autrijus> fixing.

[08:05] <autrijus> also, hi abstraction, edgewalk1r :)

[08:11] <abstraction> hey

[08:12] <autrijus> how did you find here?

[08:12] <autrijus> <- preparing 6.0.9 release now

[08:12] <abstraction> #perl

[08:12] <autrijus> ahh.

[08:13] * autrijus goes there

[08:14] <abstraction> so how much of the known perl6 syntax has been implemented in pugs?

[08:15] <autrijus> class and objects is missing; rules is missing

[08:15] <autrijus> the rest is pretty much all there

[08:15] <autrijus> but there's lots of corner cases.

[08:15] <autrijus> so we're porting perl5's unit tests here

[08:16] <autrijus> to ensure that we have a solid foundation

[08:16] <autrijus> and then build class/rules on them.

[08:16] <abstraction> good stuff

[08:16] <autrijus> oh, and "unpacking" in subroutine and := binding is not yet there.

[08:16] <autrijus> but will be soon :)

[08:16] <autrijus> yeah. it's fun.

[08:18] <autrijus> so, got time to help out?

[08:19] <autrijus> currently it's mostly porting $your_favourite_perl5_code to perl6, and/or write tests.

[08:19] <abstraction> I assume I'm going to know haskell?

[08:19] <autrijus> you don't have to if you don't want to :)

[08:19] <autrijus> you can just treat pugs as a black box that happens to run some perl6 code...

[08:19] <autrijus> ...and when it does not, yell it here so we can fix

[08:20] <autrijus> (see "Overview" in pugscode.org)

[08:20] <abstraction> sounds like a good way to get started with perl6 syntax

[08:20] <autrijus> I certainly hope so :)

[08:21] <abstraction> now we just need a haskell to pbc util :)

[08:21] <autrijus> see "Compiler backend" part in the overview :)

[08:22] <autrijus> but it's more important to be Correct in treatment of synopses at this moment.

[08:22] <autrijus> once the basic stuff is solid, we can then have a pretty good idea of how to generate parrot AST.

[08:22] <autrijus> and once that's done, pugs can be ported to perl6 and finish the bootstrap.

[08:23] <autrijus> (of course, if PGE/P6C is ready by then, we won't need to do the bootstrap here.)

[08:23] <autrijus> hi sorje.

[08:24] <theorbtwo> (Or we could bootstrap the other way, and make a haskell to parrot compiler.  More work, but could be interesting... at least to somebody that actually knows haskell.)

[08:24] <autrijus> yup. if people want to do that, look at GHC.Net

[08:25] <autrijus> Core->pasm is certainly interesting.

[08:25] <autrijus> (Core is GHC's internal language)

[08:25] <autrijus> it's far larger in scope though.

[08:26] <autrijus> it will also help if someone interested in C can look at parrot/ast/.

[08:27] <autrijus> and report back what can be done with it to make Pugs AST align with parrot AST

[08:27] <sorje> hi autrijus 

[08:27] <autrijus> hey.

[08:28] <autrijus> because it looks like parrot ast has a builtin ast->pasm compiler

[08:28] <autrijus> if that is the case, we may no longer have to write any compiler at all.

[08:28] <autrijus> just emit parrot ast and let parrot take over.

[08:38] <scw> autrijus: Hello, when I was writing Advanced calculus homework, some part of the overview was translated to Chinese XD

[08:38] <scw> autrijus: http://w.csie.org/~b92103/01Overview.zh.html

[08:39] <autrijus> ooh!

[08:39] <autrijus> viirya: coordinate! :)

[08:39] <autrijus> scw++

[08:39] <scw> autrijus: The translation is not very smooth, however...

[08:40] <autrijus> please translate "Apocryphon" as "外典", i.e. "Pugs 外典之一: Pugs 計劃概說"

[08:40] <scw> ok.

[08:42] <gugod> is this in only html format ? we could put it as a aprt of p610n

[08:42] <gugod> s/aprt/a part/

[08:42] <autrijus> gugod: POD can't handle named links

[08:43] <autrijus> gugod: if you will translate it to Kwid, I'd be very very grateful

[08:43] <gugod> right

[08:43] <autrijus> # http://svn.openfoundry.org/pugs/lib/Perl6/lib/perlkwid.kwid

[08:43] <gugod> that's actually my idea

[08:43] <autrijus> and once it's in kwid, then sure, it can be part of p6l10n

[08:43] <autrijus> *nod*

[08:44] <autrijus> gugod: HTML2Pod may be useful

[08:44] <autrijus> on cpan

[08:44] <autrijus> i.e. hack it a bit and let it emit kwid instead

[08:46] <gugod> right

[08:50] <autrijus> hm.

[08:50] <autrijus> can any Val be used as hash key?

[08:50] <autrijus> in p5 we stringify all keys

[08:50] <autrijus> can p6 use arbitary values?

[08:50] <autrijus> currently it is a problem because Int 2 and Num 2.0 and String '2' can point to different values

[08:50] <autrijus> which is clearly broken

[08:51] <jiing> scw: s/供獻/貢獻/

[08:52] <autrijus> I'll use Hash as Str keys only for now.

[08:53] <viirya> autrijus: hum?

[08:53] <autrijus> viirya: see scw's url above -- the text needs some work but would be a good start

[08:54] <autrijus> just don't want you two to duplicate work, that's all :)

[08:54] <autrijus> asked the hashkey question on p6l.

[08:54] <viirya> autrijus: I have done part of it. :)

[08:54] <abstraction> can p6 hash keys be anything? string, int, obj, etc? are are they supposed to be stringified?

[08:54] <autrijus> abstraction: I can't find it in the synopses.

[08:54] <autrijus> abstraction: pugs is currently Anything

[08:54] <autrijus> but it creates a problem because Str "2" and Int 2

[08:54] <autrijus> can point to different keys

[08:55] <autrijus> which is I think not what most people will accept

[08:55] <abstraction> but Str 2 and Int 2 are different

[08:55] <autrijus> they are.

[08:55] <abstraction> makes sense to me then

[08:55] <autrijus> my %hash = (1..4); %hash<1> # undef, wtf?"

[08:55] <autrijus> or, even worse

[08:56] <autrijus> my %hash = (1..4); %hash{1.0} # undef?

[08:56] <abstraction> p5 people aren't used to types

[08:56] <autrijus> so very true.

[08:57] <abstraction> but how often do you have a hash with various types?

[08:57] <abstraction> er mixed types

[08:57] <autrijus> well, in typed languages

[08:57] <autrijus> you can restrict the key type

[08:57] <abstraction> probably not very often

[08:57] <autrijus> so it's usually not a problem.

[08:57] <autrijus> but by default, keys are just Scalars

[08:57] <abstraction> ah

[08:58] <autrijus> maybe we can restrict hash keys to be unified type.

[08:58] <autrijus> it's slightly bizzare.

[08:58] <autrijus> well, very bizzare and radical.

[08:58] <abstraction> 1 type to rule them all.

[08:58] <autrijus> and that is the Scalar type? ;)

[09:14] <CDybedahl> Synopsis 9 says:

[09:14] <CDybedahl> To declare a hash that can take any object as a key rather than just a string, say something like:

[09:15] <CDybedahl> my %hash is shape(Any);

[09:15] <CDybedahl> Seems to me that means that hash keys are strings by default.

[09:17] <CDybedahl> I guess you could argue that if you ask for any sort of keys, you're also asking for "2", 2 and 2.0 to be treated as different.

[09:19] <autrijus> oh.

[09:19] <autrijus> is shape().

[09:19] <autrijus> okay, thanks!

[09:19] <autrijus> CDybedahl++

[09:19] <autrijus> string interpolation bug finally tracked down.

[09:19] <autrijus> luqui was using prefix:<~> to concat strings. fancy that :-)

[09:22] <autrijus> mm my passport was left on the plane.

[09:22] <autrijus> mm but they found it.

[09:22] * autrijus about to board to Beijing

[09:22] <autrijus> see you in ~3hrs, hopefully with 6.0.9 tarball :)

[09:22] * autrijus waves &

[09:23] <abstraction> later autrijus

[09:25] <CDybedahl> This command: pugs -e 'for (1..4) -> $i { if (($i%2)!=0) {say $i} }'

[09:25] <CDybedahl> ...prints 1, 3 and 4. Surely that's not right?

[09:25] <CDybedahl> If you change != to == it doesn't print anything at all.

[09:26] <abstraction> that't not right

[09:28] <luqui> poke autrijus

[09:29] <luqui> compare difference between: my @a = (1,2,3); "@a"

[09:29] <luqui> and my @a = (1,2,3); " @a"

[09:30] <luqui> re: changes in r325.  we need to give the whole string string context somehow...

[10:06] <viirya> autrijus: http://www.viirya.org/01Overview.zh.txt

[10:07] <viirya> autrijus: it's early translated version. I just do half of it. You could check first.

[10:08] <viirya> autrijus: If not urgent, I will finish the rest in next two days.

[13:44] * rgs makes an rpm of pugs

[13:46] <Juerd> At the DPW, pugs was mentioned a lot of times :)

[13:46] <rgs> it's a hot topic at fosdem too

[13:47] <Juerd> It's great to see that everyone's so up to date

[14:03] <scw> jiing: fixed, thanks :)

[14:05] <scw> viirya: WOW! Your translation is wonderful!

[14:07] <viirya> scw: thanks, just made half of it.

[14:15] <scw> viirya: In 'What is the Perl 6 bootstrapping problem?', you translated 'Perl 6 Rules' into 'Perl 6 規則' but leave the same word untranslated in 'Why did you choose Haskell?'

[14:18] <viirya> scw: I will corrent it, it should not be translated.

[14:19] <scw> viirya: It seems leave it untranslated is the best solution ^^"

[14:22] <viirya> scw: yes.

[14:46] <viirya> the error is updated, and a bit of translation added.

[14:46] <viirya> &

[14:53] <Steve_p> Hmmm...tests for pairs seem broken

[14:59] <autrijus> there's no wireless in the hotel :-/

[14:59] <autrijus> the latency is >2snd on dialup :-/

[15:00] <autrijus> >2seconds even

[15:00] <scw> autrijus: So svk rules? XD

[15:00] <autrijus> I'm afraid so

[15:03] <clkao> great open source conference venue

[15:11] <wolverian> autrijus: hey, I haven't yet asked that pattern question on p6l, I'll read the pattern guards paper before doing that. (just in case you were wondering)

[15:24] *** edgewalk1r is now known as edgewalker

[15:28] <autrijus> ok, cool

[15:28] <autrijus> clkao: conference begins tomorrow morning; then we'll have wifi

[15:28] <autrijus> hopefully will extend into the night... this is not even 14.4kbps

[15:28] <autrijus> about 9600 baud

[15:28] <shapr> Hey, did you send me the pdf already?

[15:28] * autrijus has a deja vu feeling of telix and trumpet windsock

[15:29] <shapr> haha, winsock :-)

[15:29] <shapr> Been a few years since I've used trumpet winsock.

[15:29] <shapr> Sure was a cool feeling the first time I got it working...

[15:31] <autrijus> shapr: http://aut.dyndns.org/tmp/01Overview.pdf

[15:31] <shapr> yay thanks!

[15:31] <autrijus> but you can also just convert from tml...

[15:31] <autrijus> I wonder if there is a way to translate html to pdf while preserving the hyperlinks.

[15:31] <autrijus> distiller maybe, but I don't have a copy of that.

[15:31] <autrijus> OOo certain ly doesn't do that.

[15:31] <shapr> I would very like that. I don't want to do latex again, I want wiki publishing with optional pdf/ps output.

[15:32] <autrijus> riiight. I have a PDF::FromHTML module on CPAN.

[15:32] <autrijus> but it doesn't grok hyperlinks yet.

[15:32] <autrijus> wolverian: sure, take your time. :) thanks!

[15:33] <autrijus> viirya++ # wonderful translation. i'm in no rush, so take your time :)

[17:00] *** metaperl_ is now known as metaperl

[17:09] <autrijus> ewwhew.

[17:09] <autrijus> All tests successful, 4 subtests skipped.

[17:09] <autrijus> Files=40, Tests=616, 26 wallclock secs ( 0.00 cusr +  0.00 csys =  0.00 CPU)

[17:09] <autrijus> commit takes forever...

[17:10] <autrijus> sigh. can't release  anything under this bandwidth

[17:10] <autrijus> will have to wait till tomorrow morning :-)

[17:14] <wolverian> dialup? people still use those? :/

[17:15] <autrijus> and this is supposed to be one of the better beijing hotels :-/

[17:15] <autrijus> (conference venue)

[17:17] <wolverian> vandalize the minibar in retaliation.

[17:18] <obra> how censored is your network?

[17:18] <autrijus> I don't know because I tunnel everything thru ssh

[17:18] <obra> I suppose you could do everything over ssh -C -D

[17:18] <autrijus> nor do I want to know, really :)

[17:18] <obra> heh

[17:26] * statico finds a censored internet kind of creepy

[17:27] <autrijus> journal up.

[17:27] <Khisanth> hmm

[17:27] <autrijus> see you tomorrow when I got more bandwidth :)

[17:27] <Khisanth> autrijus: why are there some funny letters comming up from some of your lines?

[17:28] <autrijus> Khisanth: extremely high latency renders control chars as literals

[17:28] <Khisanth> ah

[17:28] <autrijus> or, if you are talking about Big5 code, then they are big5 code.

[17:29] <autrijus> you can usually tell one from another by checking for double quotes around them :)

[17:29] <Khisanth> well it's erm 0x52 and 0x7F

[17:29] <autrijus> oh. so definitely control code

[17:30] <autrijus> 'nite! &

[17:31] <wolverian> good night!

[18:00] <integral> I can't seem to find how to read a single line from a while, S02 just mentions using * with for to read all the lines

[18:00] <integral> anyone know where I can be enlightened?

[18:01] <integral> s/while/file/

[18:05] <nnunley> integral: That would be how -- for *$handle { block is called for each line in file handle with $_ containing the current line }

[18:06] <nnunley> So... I would guess that $line = *$handle would only fetch a single line.

[18:07] <nnunley> Just as $line = <FILE> does, unless you've turn read mode slurpy.

[18:07] <integral> hmm, ok, but...

[18:08] <integral> also in S02, it mentions that the * unary op forces list context on its arg

[18:10] * nnunley reads.

[18:10] <nnunley> Might require reading A02

[18:12] <integral> ah, it says FHs are just iterators now

[18:59] <Steve_p> Ah!  Better.  

[18:59] * Steve_p hopefully provides an extinguisher for flames in ingy's journal

[19:00] <nnunley> steve_p:  You're steve_p on use.perl, too?

[19:01] <clkao> speters i guess?

[19:02] <Steve_p> yep

[19:12] <ingy> hola

[19:12] <ingy> I got flamed?

[19:13] <pjcj> 4/las ingy

[19:13] <pjcj> bah ...

[19:17] <statico> hi ingy

[19:19] <ingy> Steve_p: nice comment

[19:19] <ingy> hi statico 

[19:20] <ingy> sooo.... I finished and checked in perlkwid.kwid

[19:20] <ingy> anyone care to review it for me?

[19:21] <Steve_p> ingy, Ovid took offense

[19:22] <ingy> Steve_p: yeah, I think he was too wired into a particular mode

[19:22] <ingy> that's ok

[19:22] <clkao> because he manages grants?

[19:23] <ingy> Allison grokked me I think. So I'm not worried

[19:23] <statico> on kwid?

[19:23] <Steve_p> clkao, on money and being an open source developer with a family

[19:24] <ingy> statico: http://use.perl.org/~ingy/journal/23384

[19:24] <clkao> *nod*

[19:24] <ingy> statico: can you review my perlkwid spec?

[19:24] * clkao added pugs to ProjectsUsingSVK

[19:25] <Steve_p> I prefer the "Steal Money" method of grants

[19:25] <statico> ingy: sure

[19:29] * statico agrees with the ten points

[19:29] <Steve_p> ingy, did you kill .over or do I need to read more

[19:37] <ingy> Steve_p: .over is now .list

[19:38] <ingy> Kwid ends up being significantly different from Kwiki

[19:38] <ingy> In many ways it improves on Kwiki

[19:38] <ingy> In some ways it has to deal with Pod legacy

[19:39] <ingy> but Pod legacy isn't necessarily bad

[19:40] <ingy> Pod is a rather nice language, and Kwid makes it much nicer to read and work with

[19:41] <ingy> I really like the {*bold*} {/italic/} {`code`} constructs

[19:42] <ingy> as bullet proof versions of the common *bold* /italic/ `code`

[19:43] <integral> can you put unbalanced {s and }s in those?

[19:43] <ingy> sure

[19:43] <integral> :-)

[19:44] <ingy> the ending marker for '{`' is '`}'

[19:44] <integral> so can you put `} in there?

[19:44] <ingy> so anything else goes

[19:44] <ingy> {{``}`}} is one way

[19:44] <integral> ah, that's a good way

[19:45] <ingy> {`\``} is the other

[19:46] <ingy> a single backtick as code is {```}

[19:47] <ingy> oops

[19:47] <ingy> {`\`}`} is the other

[19:48] <ingy> :)

[19:48] <ingy> backticks for code is sooooo nice

[19:49] <ingy> also there is the '{ ', ' }' markers

[19:50] <ingy>  { don't *format* anything in /here/ }

[19:50] <ingy> aka the 'asis' format

[19:51] <ingy> (it also makes whitespace be non-breaking)

[19:51] <integral> sounds good :-)

[19:51] <ingy> Backslash at the end of a line overrides folding

[19:51] <ingy> which is logical

[19:52] <ingy> it is an escaped newline

[19:56] <ingy> Kwid comments are handy too

[20:44] *** edgewalk1r is now known as edgewalker

[20:44] <ingy> autrijus: I got your copy of Perl 6 Now

[20:44] <ingy> autrijus: hopefully it will be coffee stained and mangled by the time you get it

[20:50] <obra> oh, ingy, my flights changed. I'll be arrivign earlier by a couple days

[20:59] <ingy> obra: they changed, or you changed them?

[21:07] <wolverian> hm, okay, I think I finally understand pattern guards.

[21:08] <wolverian> new terminology makes simple things hard.

[22:07] <integral> hmm, seems someone's found the == problem

[22:07] <buu> Hrm. I need ghc

[22:08] <integral> buu: http://www.haskell.org/ghc/download_ghc_622.html#windows

[22:08] <buu> The pugs source doesn't need a C compiler does it?

[22:08] <buu> integral: It doesn't run under cygwin properly =/

[22:08] <integral> buu: on Intel GHC directly generates code

[22:08] <integral> buu: no, that's why you run it natively

[22:08] <buu> Yeah, but then it doesn't work with cygwin's perl

[22:08] <buu> Whic is just a pain

[22:09] <integral> well use your other perl

[22:09] <buu> I don't have two perl's at the moment

[22:09] <integral> oh

[22:14] <buu> great

[22:15] <buu> I installed ActivePerl, ran the makefile.pl, got a makefile, ran nmake and get 'invalid argument'

[22:15] <buu> Which version of nmake am I supposed to have?

[22:20] <buu> That's annoying =[

[22:39] <Juerd> How do people drive automatic cars and not fall asleep?

[22:39] <Juerd> And don't you terribly want something to do for your left foot?

[22:41] <mugwump> at least that means they both get stiff on a long drive not just the right foot

[22:41] <mugwump> s/foot/leg/

[22:42] <mugwump> need pedals down there to get some exercise while driving

[22:43] <wolverian> get a bike? :)

[22:43] <Juerd> mugwump: I don't care what the pedal's for, but let my left foot do something

[22:43] <Juerd> If even pump up the airbag

[22:43] <Juerd> Give it something to do

[22:43] <rgs> listen to some jazz and beat the rythm.

[22:43] <Juerd> For example

[22:43] <Juerd> This temporary replacement car doesn't have audio

[22:43] <Juerd> Which sucks

[22:44] <mugwump> I go mad without lots of breaks

[22:44] <rgs> ingy: your journal entry made me laugh. It's so you.

[22:49] <mugwump> tho if I don't have any good breaks a bit of trance or even D'n'B will suffice

