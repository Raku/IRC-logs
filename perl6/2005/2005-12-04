[00:09] <kane_> Khisanth: perldoc works fine for me, otherwise you Just Read It ;)

[00:21] <dduncan> ?eval try { die Object.new() }; say "got a '{$!.ref}' having '$!'"

[00:21] *** evalbot_8064 is now known as evalbot_8068

[00:21] <evalbot_8068> OUTPUT[got a 'Str' having '<obj:Object>' ] bool::true 

[00:22] <dduncan> so I just discovered this bug ...

[00:22] <dduncan> objects get stringified when used as a die argument

[00:22] <dduncan> but they should stay objects

[00:22] <dduncan> looking for existing test ...

[00:39] <Khisanth> so how is die defined?

[00:54] <Khisanth> wolverian: thegoo.org resembles a marketing gimmick for a movie

[00:54] <dduncan> still going to check on that, but first ...

[00:54] <dduncan> I'm wondering what the correct test is to see if a package has been loaded or not

[00:54] <wolverian> Khisanth, yes. the tour pdf is better :)

[00:55] <Khisanth> I mean it uses a lot of words to say nothing

[00:56] <dduncan> "return defined ::($module_name);", an analogue to Perl 5's "no strict 'refs'; return defined %{$module_name . '::'};", always returns 1, it seems

[00:56] <dduncan> so I'm wondering what to test to see if there was a previous "use/require Foo" or not

[00:56] <Khisanth> which is not a very good way to convince people to download a 20MB pdf file ...

[00:57] <wolverian> Khisanth, yes. you might want to submit a bug report. :) 

[00:57] <dduncan> or more specifically, I want to only "use Foo" if there wasn't already a Foo declared by an already loaded file

[00:57] <Khisanth> wolverian: that would require finding the correct location first (Note: I haven't downloaded the pdf)

[01:10] <svnbot6> r8069 | Darren_Duncan++ |  r1093@Darren-Duncans-Computer:  darrenduncan | 2005-12-03 17:08:32 -0800

[01:10] <svnbot6> r8069 | Darren_Duncan++ |  /ext/Rosetta-Incubator : fixed several bugs in Locale::KeyedText and its examples ... 2 known bugs still remain, but it otherwise works

[01:15] <dduncan> one of those 2 bugs is the test for existing package

[01:16] <dduncan> the other bug is that die stringifies its arg

[01:16] <wolverian> Khisanth, I don't know if the site itself is on CPAN, but Goo itself is. if you have the energy, the address should be there.

[01:16] <wolverian> (s,the,an,)

[01:17] <Khisanth> energy yes, interest no :)

[01:17] <dduncan> with the second one, I will search for and if necessary add a Pugs test for it

[01:17] <dduncan> the first one, I don't know what the correct syntax is

[02:23] *** kanru2 is now known as kanru

[02:38] <meppl> gute nacht

[02:38] <meppl> gute nacht

[08:24] <svnbot6> r8070 | Darren_Duncan++ |  r1097@Darren-Duncans-Computer:  darrenduncan | 2005-12-04 00:20:59 -0800

[08:24] <svnbot6> r8070 | Darren_Duncan++ |  added new test t/builtins/control_flow/die_arg_preservation.t, which checks that  gets what you pass to die() in pristine shape, with original value type, not cast as Str ... needed when using objects as exceptions

[08:27] <dduncan> fyi, I reported the corresponding bug here a few hours ago; see http://colabti.de/irclogger/irclogger_log/perl6?date=2005-12-04, time index 00:21

[08:29] <dduncan> I still have to look into the /src, but fixing this *may* be as simple as changing the signature of die() from taking a 'Str' arg to an 'Any' arg

[08:34] <dduncan> now, I found one source line that may not be *the* problem here, but it could be a problem of its own ...

[08:36] <dduncan> it is in /perl5/PIL-Run/lib/PIL/Run/PrimP5.pm ...

[08:36] <dduncan> line 408, says: MULTI SUB die (*@xxa) { die map{p6_to_s($_)}@xxa; };

[08:36] <dduncan> that appears to be an explicit cast to a string ...

[08:37] <dduncan> therefore, it should effectively say instead: MULTI SUB die (*@xxa) { die @xxa; };

[08:37] <dduncan> but that's only a parallel issue ...

[08:41] <dduncan> I think the actual problem I'm facing may be caused in ...

[08:42] <dduncan> src/Pugs/Internals.hs, lines 152... where "die" is declared

[08:43] <dduncan> the line "die :: (MonadIO m, Show a) => String -> a -> m b" suggests that it throws/returns a "String", and maybe that's what needs changing

[08:43] <dduncan> I'm not sure what to change it to, though, if that is the right place

[08:45] <dduncan> on the other hand ...

[08:46] <dduncan> there is src/Pugs/Prim.hs, lines 325...

[08:47] <dduncan> perhaps "fail (errmsg . concat $ strs)" is what is doing the string cast ...

[08:48] <dduncan> or specifically, the "concat"

[08:49] <dduncan> I wonder what Perl 5 does ... its die can take multiple args and concat them like this, but it can also pass objects unscathed ...

[08:50] <dduncan> maybe what's necessary here is to test the args contents ... if there is just one value in args then pass it as is without the string cast

[08:51] <dduncan> in any event, it will take me time to figure out the exact code to change to, but hopefully I've pointed out what line(s) need changing

[08:51] <dduncan> anyway, its late, so...

[08:51] <dduncan> good night!

[08:53] <dduncan> nothingmuch, if you want to backlog the last 20 mins, you may have comments ... or know whether I'm on the right track re what needs fixing

[08:53] <dduncan> fixing what the test in 8070 reports

[08:53] <nothingmuch> hola

[08:53] <nothingmuch> can't right now

[08:53] <nothingmuch> ETOOWRKOVERFLOW

[08:53] <nothingmuch> err

[08:53] <nothingmuch> EWRKOVERFLOW

[08:54] <dduncan> did you log in automatically?

[08:54] <nothingmuch> just came to ask someone on #catalyst to make sure a bug doesn't exist

[08:54] <nothingmuch> and when I launched irssi it connected to all my usual channels

[08:54] <dduncan> fyi, this is about the ability to use objects as exceptions ... I discovered and committed a test showing all die args are cast as Strs, but shouldn't be

[08:55] <nothingmuch> right

[08:55] <nothingmuch> that shouildn't be

[08:55] <dduncan> in the backlog, I searched and identified the 2-10 lines in the src that are probably what need tweaking

[08:55] <dduncan> but I'm not sure exactly what to change them to

[08:56] <dduncan> they are the definitions of die() in Internals.hs and Prim.hs

[08:56] * nothingmuch really can't do that right now

[08:56] <nothingmuch> i have a C++ memory allocation bug to chase

[08:56] <dduncan> that's fine ... hopefully what I wrote will help someone else with the tuits to fix it

[08:57] <nothingmuch> aye

[08:57] <nothingmuch> dduncan++

[08:57] <dduncan> now about that ...

[08:57] <dduncan> karma dduncan

[08:57] <jabbot> dduncan: dduncan has neutral karma

[08:58] <dduncan> now there's a bug

[08:58] <dduncan> it always says neutral

[09:01] <dduncan> good night

[12:33] <nothingmuch> autrijus: ping

[12:56] <elmex> nothingmuch: pong

[13:05] <nothingmuch> elmex: ?

[13:06] <elmex> nothingmuch: :)

[13:06] <elmex> never mind

[13:06] <nothingmuch> okay =)

[13:06] <nothingmuch> autrijus: i do you have HTML::FromANSI in a repository somewhere? if so, can I have it?

[13:09] <nnunley> nothingmuch:  It looks like it's in CPAN.

[13:12] <nothingmuch> nnunley: yeah, it's been there for a long while

[13:13] <nothingmuch> i'm now comaintainer, since I have a change for it

[13:13] <nothingmuch> Term::VT102::Boundless is more suitable than Term::VT102 for this specific taskl

[13:13] <nothingmuch> so now I was going to update it but I'd like to be versioned and stuff

[13:27] <nnunley> Got it.

[13:27] <nnunley> Misinterpreted the it as being the bundle, and not the repository.

[13:47] <svnbot6> r8071 | kane++ | * register installations

[13:47] <svnbot6> r8071 | kane++ |     * allow to write back installation information

[13:47] <svnbot6> r8071 | kane++ |     * add is_installed & write methods

[13:47] <svnbot6> r8071 | kane++ | * have package->install register it's installation

[13:47] <svnbot6> r8071 | kane++ | * pull meta info from .jib file

[13:47] <svnbot6> r8071 | kane++ | * add tests

[14:06] <rafl> kane_: ping

[14:07] <rafl> kane_: Object::Accessor confuses me. I do $obj->mk_accessors(qw( dirig )); and $obj->dir($dir) where $dir is 'foo' and checked using Params::Check.

[14:08] <rafl> kane_: But what I get back from $obj->dir() is JIB::Repository=HASH(0x83f89dc). Why?

[14:08] <kane_> show me some code -- it doesn't quite make sense like this :)

[14:09] <clkao> mad kane

[14:09] <rafl> kane_: http://nopaste.debianforum.de/1738

[14:10] <rafl> kane_: Line 18 outputs 'foo', line 20 ouputs 'JIB::Repository=HASH(0x...)'

[14:11] <kane_> rafl: interesting... let me check that -- it should Just WOrk

[14:13] <kane_> rafl: you must have a typo somewhere though -- it works for me:

[14:13] <kane_> http://nopaste.snit.ch:8001/5694

[14:15] <rafl> kane_: It doesn't work if Path::Class is loaded..

[14:16] <kane_> path::class is hijacking the dir() function?

[14:16] <rafl> D'OH.

[14:16] <kane_> yup, it is

[14:16] <kane_> naughty path::class

[14:18] <rafl> Indeed.

[14:18] <rafl> OK, everything works now.

[14:27] <rafl> kane_: Let's discuss the repository layout a bit.

[14:27] <kane_> sure, go ahead

[14:27] <rafl> kane_: I would like to have all .jibs in one directory ("pool", maybe split up alphabetically).

[14:27] <rafl> kane_: And the index files in another dir (I call it dists)

[14:28] <rafl> kane_: The dists directory should have various index files in various subdirectories. grouped by any meta information you want.

[14:28] <rafl> kane_: I want author, language and module, for now.

[14:29] <kane_> this sounds very much like what debian does, correct?

[14:29] <rafl> kane_: So I can select all modules of author a written in p6.

[14:29] <rafl> It goes beyond what Debian does.

[14:30] <rafl> Debian only has dists/{stable,testing,unstable}/{main,contrib,non-free}

[14:30] <kane_> the pool/dists thing i recognize -- the split up from 'just' Packages.gz to the subdirs is the 'beyond' part, right?

[14:31] <rafl> No. Debian also has subdirs in dists where the Packages.gz lives. That's the same way I thought about it for sixpan. But I would like to use every meta information available to group the packages files.

[14:31] <kane_> puts a bit of strain on the generation of them on updates, but that's about it when it comes to complexity right?

[14:31] <rafl> (Well, this should be possible at least. Your not forced to serve millions of index files, of course)

[14:32] <kane_> so there's one aggregated index on packages, and then subsets on $metainfo you find interesting?

[14:33] <rafl> Yes.

[14:33] <kane_> ok.. so that means the subsets are nothign more than a grep on the main index? 

[14:33] <kane_> so allow for that structure, stick iwth the main index for now?

[14:33] <rafl> Kind of, yes.

[14:33] <rafl> EPARSE

[14:34] <kane_> mm?

[14:35] <rafl> I didn't get that sentence:  so allow for that structure, stick iwth the main index for now?

[14:36] <kane_> for now, just use the main index, but allow for a repository structure that has sub-indexes

[14:38] * kane_ has to go afk for a while -- back in about an hour or so probably

[14:42] <rafl> kane_: Sorry.. feather was offline for some moments.

[14:42] <rafl> kane_: Well, OK.

[14:43] <Juerd_> Sorry 'bout that :)

[14:45] <rafl> Juerd_: Please alias 'ifconfig eth0 down' to 'slay juerd'

[14:48] <Juerd_> rafl: Hehe

[14:48] <Juerd_> rafl: It was the router

[14:48] <Juerd_> rafl: Unavoidable.

[14:49] <rafl> What did the router do?

[14:55] <Juerd_> Disable an interface on which part of the internet was no longer routable.

[14:55] <Juerd_> It then can take a few minutes before the entire chain, upto your provider, knows how to route the packets again.

[14:55] <rafl> Oh well.. :-(

[14:56] <rafl> Let's hope that doesn't happen during my GPW talk.

[14:56] <Juerd_> It can always happen

[14:56] <rafl> We're pretty much pissed if we don't have a box that run's pugs.

[14:56] <Juerd_> It's a mechanism that keeps thingsn running :)

[14:57] <Juerd_> For other people, feather had been offline for 10 minutes

[14:57] <Juerd_> And longer if this hadn't happened

[14:58] <rafl> Well, news wrt the european geek tour? :-)

[14:58] <Juerd_> No

[14:58] <Juerd_> But I have set aside some money to be able to go to 22c3

[14:59] <Juerd_> Need a little more, or else I'll have to do without food for a few days, but I think I'll manage

[14:59] <rafl> Great!

[14:59] <rafl> Maybe Sven can help out with some food for those four days. :-)

[14:59] <rafl> Traveling by train or car or plain?

[14:59] <Juerd_> Car

[14:59] <Juerd_> Traveling by car is cheaper, especially if I can find a passenger

[15:00] <Juerd_> It's approx. 90 euros per drive, based on German fuel prices.

[15:00] * rafl usually pays <5EUR for Chemnitz -> Berlin

[15:00] <Juerd_> LPG is even cheaper in .nl, so if I fill it up before the border, it'll be even cheaper :)

[15:01] <Juerd_> Amsterdam - Berlin costs approx. 165 

[15:01] <Juerd_> And Dordrecht - Amsterdam some 20

[15:01] <rafl> Hm, OK.

[15:02] * rafl needs to leave now.

[15:02] <Juerd_> OK, bye

[15:02] <Juerd_> BTW - will you also be staying at Sven's?

[15:03] <rafl> Yes.

[15:03] <Juerd_> Great :)

[15:03] * rafl nearly always sleeps at Sven's place when he's in Berlin.

[15:03] *** Lopo_ is now known as Lopo

[15:03] <rafl> There are big, fat cats that you can use as a pillow there.

[15:04] <Juerd_> Cats++

[15:04] <rafl> The big fat ones only. The small ones always bite me.

[15:04] <Juerd_> Note to self: bring extra duct tape to mend air bed.

[15:05] <rafl> :-)

[15:05] <rafl> Bye.

[17:03] <xgl> @y[$x++]++ <- is this legal?

[17:06] <xgl> ?eval my $x = 0; my @y = 1..9; @y[$x++]++; $x

[17:06] *** evalbot_8068 is now known as evalbot_8071

[17:06] <evalbot_8071> \3 

[17:06] <xgl> ?eval my $x = 0; my @y = 1..9; @y[$x++]++; @y

[17:06] <evalbot_8071> [1, 2, 2, 4, 5, 6, 7, 8, 9] 

[17:07] <xgl> ?eval my $x = 0; my @y = 1..9; ${@y[$x++]}++; $x

[17:07] <evalbot_8071> \1 

[17:07] <xgl> ?eval my $x = 0; my @y = 1..9; ${@y[$x++]}++; @y

[17:07] <evalbot_8071> [2, 2, 3, 4, 5, 6, 7, 8, 9] 

[17:07] <xgl> ?eval my $x = 0; my @y = 1..9; ++${@y[++$x]}; @y

[17:07] <evalbot_8071> [1, 2, 3, 4, 5, 6, 7, 8, 9] 

[17:07] <r0nny> xgl: u midded to add a loop

[17:07] <r0nny> eh missed

[17:08] <r0nny> ?eval my @foo=1..0;for @foo -> $bar { $bar++};@foo

[17:08] <evalbot_8071> [] 

[17:08] <r0nny> ops

[17:11] <xgl> ?eval my @foo = 1..9; for @foo -> $bar {$bar++}; @foo

[17:11] <evalbot_8071> Error: Can't modify constant item: VRef <Scalar> 

[17:11] <r0nny> ?eval my @foo=1..9;for @foo -> $bar is rw { $bar++};@foo

[17:11] <evalbot_8071> [2, 3, 4, 5, 6, 7, 8, 9, 10] 

[17:11] <r0nny> ?eval my @foo=1..9;for @foo -> $bar  { $bar++};@foo

[17:11] <evalbot_8071> Error: Can't modify constant item: VRef <Scalar> 

[17:12] <r0nny> ?eval my @foo=1..9;map{$_++}@foo

[17:12] <evalbot_8071> Error: Can't modify constant item: VInt 1 

[17:12] <r0nny> ?eval my @foo=1..9;for @foo -> $bar ia rw { $bar++};@foo

[17:12] <evalbot_8071> Error:  unexpected "f" expecting ";", statements or end of input reserved word 

[17:12] <r0nny> ?eval my @foo=1..9;for @foo -> $bar is rw { $bar++};@foo

[17:12] <evalbot_8071> [2, 3, 4, 5, 6, 7, 8, 9, 10] 

[17:13] <r0nny> ?eval my @foo=1..9;for @foo -> $bar is rw { $ar++ if $bar==5;};@foo

[17:13] <evalbot_8071> Error: Undeclared variable: "$ar" 

[17:13] <r0nny> ?eval my @foo=1..9;for @foo -> $bar is rw { $bar++ if $bar==5;};@foo

[17:13] <evalbot_8071> [1, 2, 3, 4, 6, 6, 7, 8, 9] 

[17:13] <xgl> so @y[$x++]++ should not be legal, because it applies '++' in list context?

[17:14] <r0nny> actually it is legal

[17:14] <r0nny> cause [] returns a object

[17:15] <xgl> but that object is an one-element list though, right?

[17:15] <r0nny> actually i dont know

[17:15] <r0nny> try it

[17:16] <xgl>  ?eval my $x = 0; my @y = 1..9; @y[5]

[17:16] <r0nny> no space in front of the ?

[17:16] <xgl> ?eval my $x = 0; my @y = 1..9; @y[5]

[17:16] <evalbot_8071> \6 

[17:16] <xgl> ?eval my $x = 0; my @y = 1..9; @y[$x]

[17:17] <evalbot_8071> \1 

[17:17] <r0nny> ?eval my $x = 0; my @y = 1..9; @y[5,7]

[17:17] <evalbot_8071> [6, 8] 

[17:17] <r0nny> ?eval my $x = 0; my @y = 1..9; @y[5..7]

[17:17] <evalbot_8071> [6, 7, 8] 

[17:17] <r0nny> ok

[17:17] <xgl> ?eval my $x = 0; my @y = 1..9; @y[$x++]

[17:17] <evalbot_8071> [1,] 

[17:17] <r0nny> if u supply a list of indexes, it returns a list

[17:18] <xgl> but if i apply a single index, it returns a scalar? what about that last expression .. @y[$x++] ... shouldn't that return a scalar instead of '[1,]?

[17:19] <r0nny> maybe a bug

[17:19] <r0nny> im not sure

[17:19] <r0nny> i dont know the effect $++ has in combination with the ++ op

[17:20] <r0nny> try ++$x

[17:20] <r0nny> ?eval my $x = 0; my @y = 1..9; @y[++$x]

[17:20] <evalbot_8071> [2,] 

[17:20] <r0nny> ?eval my $x = 0; my @y = 1..9; @y[(++$x)]

[17:20] <evalbot_8071> [2,] 

[17:20] <r0nny> ?eval my $x = 0; my @y = 1..9; @y[$x)]

[17:20] <evalbot_8071> Error:  unexpected "[" expecting word character, "::", term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[17:20] <r0nny> ?eval my $x = 0; my @y = 1..9; @y[$x]

[17:20] <evalbot_8071> \1 

[17:20] <r0nny> ?eval my $x = 0; my @y = 1..9; @y[$x++.scalar]

[17:20] <xgl> ok, i think the inconsistency between @y[$x] and @y[$x++] is probably a bug, but i'm not sure which behavior is canonically correct.

[17:20] <evalbot_8071> Error:  unexpected "[" expecting word character, "::", term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[17:20] <r0nny> ?eval my $x = 0; my @y = 1..9; @y[scalar $x++]

[17:21] <evalbot_8071> Error: No such method: "&scalar" 

[17:21] <r0nny> ?eval my int $x = 0; my @y = 1..9; @y[$x++]

[17:21] <evalbot_8071> [1,] 

[17:21] <r0nny> ?eval my int $x = 0; my @y = 1..9; @y[{$x++}]

[17:21] <evalbot_8071> Error: cannot cast from VCode (MkCode {isMulti = False, subName = "<anon>", subType = SubBlock, subEnv = Just (MkEnv {envContext = CxtSlurpy (mkType "Any"), envLValue = False, envLexical = MkPad (padToList [("$?1",[(<ref>,<ref>)]),("$_",[(<ref>,<ref>)]),("$__evalbot_print",[(<ref>,<ref>)]),("$code",[(<ref>,<ref>)]),("$lang",[(<ref>,<ref>)]),("$x",[(<ref>,<ref>)]),("&?BLOCK_EXIT",[(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>)

[17:21] <r0nny> oh

[17:21] <r0nny> nice to know ;P

[17:21] <xgl> ?eval my int $x = 0; my @y = 1..9; @y[${$x++}]

[17:21] <evalbot_8071> \1 

[17:22] <xgl> interesting ...

[17:22] <r0nny> Juerd_: any idea whats up with this

[17:24] <r0nny> anyway - need to solve some math problems

[17:24] <r0nny> laterz

[17:24] <xgl> thanx

[18:58] <Juerd_> r0nny: Up with what?

[18:58] <Juerd_> And why ask me?

[19:30] <rafl> Juerd_: He learned that you're the one to blame.

[19:31] <rafl> kane_: How about JIB::PackageSet?

[19:36] <Juerd_> But I'm not!

[19:36] <rafl> Of course!

[19:36] <rafl> You are. Who else should it be?

[19:37] <Juerd_> Saint Nicholas.

[19:37] <Juerd_> Be it Sinterklaas or Santa. I don't care.

[19:37] <rafl> There's no Saint Nicholas. But there's a Juerd_.

[19:38] <Juerd_> I'm not real

[19:38] <Juerd_> Do you still believe in me?

[19:44] <rafl> You sometimes say that you need money for food.

[19:45] <rafl> I guess no one who's not real does that.

[19:45] <rafl> Also I doubt that you would have reserved a place to sleep at Sven's place if you wouldn't even need one, because you don't exist.

[19:45] <rafl> And also typing would be hard without existing.

[19:51] <Juerd_> Who says that guy is me.

[19:51] <Juerd_> And that this line is typed.

[20:15] <xgl> ?eval my $x = 0; my @y = 1..9; @y[$x]

[20:15] <evalbot_8071> \1 

[20:15] <xgl> ?eval my $x = 0; my @y = 1..9; @y[$x++]

[20:15] <evalbot_8071> [1,] 

[20:16] <xgl> why the difference?

[20:16] <nothingmuch> autrijus: ping

[20:19] <Khisanth> slice vs. element?

[20:20] <nothingmuch> So, RorParams or Session::Flash ?

[20:20] <nothingmuch> vote on the next RoR feature to steal

[20:20] <nothingmuch> as I write Authentication::Credential::Htpasswd

[20:20] <nothingmuch> oh, wait

[20:20] <nothingmuch> wrong channel

[20:20] <xgl> sure, but why slice in one instance, but element in the other?

[20:21] <Khisanth> probably the operator

[20:22] <Khisanth> ?eval my $x = 0; my @y = 1..9; @y[$x+0]

[20:22] <evalbot_8071> \1 

[20:22] <Khisanth> hmm

[21:57] <autrijus> greetings from osdc.com.au!

[21:58] <autrijus> was without net access all of yesterday

[21:58] <obra> autrijus!

[21:58] <obra> how's osdc?

[21:58] <autrijus> hey obra

[21:58] <autrijus> just past reg, first welcome talk 'bout to start

[21:59] <obra> nice.

[21:59] <obra> svk pull on jifty and rm -rf all of RPS/web

[21:59] <autrijus> okay... they are now all autogenned?

[22:00] <obra> not autogenned. defautled.

[22:00] <obra> defaulted.

[22:00] <autrijus> excellent

[22:00] * obra is ajaxifying the "admin" templates now

[22:00] <autrijus> last year osdc didn't have wireless nor coffee... apparently this year they've fixed both for good

[22:01] <obra> heh

[22:01] <obra> also, all of our deps are now included. (pureperl + linux-686)

[22:01] <autrijus> very exciting

[22:02] <obra> :)

[22:02] <autrijus> also, going to work with Alias on fixing M::I::* seriously

[22:02] <autrijus> documenting the API along the way and add sensible tests

[22:02] <autrijus> sorry for the long delay but we're getting around to it :)

[22:02] <obra> nice

[22:07] * autrijus pulls parrot 040 and tests the usual pugs compat

[22:11] <nothingmuch> autrijus: is HTML::FromANSI on svn somewhere?

[22:12] <nothingmuch> obra: who do i complain to when I don't get mail from rt.cpan.org on bugs opening (just getting updated?)

[22:12] <autrijus> nothingmuch: no but you are free to create a openfoundry project...

[22:12] <nothingmuch> autrijus: naaah.... darcs is easier

[22:12] <autrijus> feel free to setup darcs for it

[22:12] <nothingmuch> i'll import from CPAN and make a release tomorrow

[22:12] <autrijus> please do

[22:12] <DesreveR> re

[22:12] *** DesreveR is now known as r0nny

[22:12] <autrijus> greetings r0nny

[22:13] * nothingmuch goes back to catalyst land

[22:13] <r0nny> yo autrijus 

[22:13] <nothingmuch> let's see hwo many plugins I can release today ;-)

[22:13] <autrijus> nothingmuch: go fer it :) I'm currently in Jifty land and may or may not come back to Cat later :)

[22:13] <autrijus> (I'm also rapidly running out of battery, so expect drop any time)

[22:13] <r0nny> Juerd_: there was something odd with list access

[22:14] <r0nny> ?eval my int $x = 0; my @y = 1..9; @y[$x++]

[22:14] <evalbot_8071> [1,] 

[22:14] <r0nny> why does this return a list ?

[22:14] <autrijus> ?eval my $x = 0; my @y = 1..9; @x[$x+1]

[22:14] <evalbot_8071> Error: Undeclared variable: "@x" 

[22:15] <autrijus> ?eval my $x = 0; my @y = 1..9; @y[$x+1]

[22:15] <evalbot_8071> \2 

[22:15] <r0nny> hmm

[22:15] <r0nny> odd

[22:15] <autrijus> fixing

[22:15] <r0nny> ?eval my int $x = 0; my @y = 1..9; @y[++$x]

[22:15] <evalbot_8071> [2,] 

[22:15] <autrijus> fixed

[22:15] <r0nny> hmm

[22:16] <r0nny> in svn ?

[22:16] <r0nny> atm i feel like updating parrot, and pugs

[22:16] <obra> nothingmuch: you complain to me

[22:16] <diotalevi> Hey, is that M::I::* that was mentioned earlier Module::Info of perl5? I'm doing some work to merge its forked B::Utils with the cpan B::Utils (and add tests n stuff)

[22:16] <obra> nothingmuch: what bug was it and when?

[22:16] <autrijus> diotalevi: Module::Install, sadly

[22:16] <autrijus> not ::Info

[22:16] <diotalevi> Oh. Nevermind then.

[22:17] <autrijus> r0nny: will commit after I run some tests (and if battery still up)

[22:17] <r0nny> hmm

[22:17] <r0nny> darn ;P

[22:17] <r0nny> guess i wont update this day

[22:17] <autrijus> hm? I'm committing already

[22:18] <autrijus> r0nny: can you write a test for it?

[22:18] <r0nny> yeah

[22:18] <obra> nothingmuch: I certainly get notifications when bugs are created. I'd be happy to check logs

[22:18] <autrijus> cool... see my commit log

[22:18] <autrijus> r9072

[22:18] <autrijus> er, r8072

[22:19] <autrijus> now I must drop... bbiab

[22:20] <nothingmuch> obra: can't remember when last bug was openend... IIRC ~ 2-3 weeks ago

[22:20] <nothingmuch> does it send to [email@hidden.address] ?

[22:20] <obra> if that's listed as the owner of the module, yes

[22:20] <r0nny> btw - is there a test for the broken method dispatcher ?

[22:20] <nothingmuch> owner of the module?

[22:20] <nothingmuch> isn't this in my pause account?

[22:21] <obra> yes, it's fed from pause

[22:21] <svnbot6> r8072 | autrijus++ | * r0nny pointed out that post/pre ++/-- doesn't impose scalar

[22:21] <svnbot6> r8072 | autrijus++ |   context by default:

[22:21] <svnbot6> r8072 | autrijus++ |     my $x = 0; my @y = 1..9; is(@y[++$x].perl, '\\2')

[22:21] <svnbot6> r8073 | autrijus++ | * My official english name is also changed on the passport...

[22:21] <svnbot6> r8073 | autrijus++ |   Reflect it in AUTHORS.

[22:21] <obra> and goes to your @CPAN.ORG address

[22:21] <nothingmuch> aye

[22:22] <nothingmuch> obra: i'll let you know if i suuspect this happenned again

[22:22] <obra> thanks

[22:23] <nothingmuch> i didn't get a mail for this one, for example: https://rt.cpan.org/NoAuth/Bug.html?id=15886

[22:24] <obra> November 17 is a bit far back in time for me to have logs for ;)

[22:25] <obra> (Nov 27 or so is the most recent I've got)

[22:25] <r0nny> odd

[22:26] <nothingmuch> okay

[22:26] <r0nny> ?eval my $x=0;my @foo=1..9;say @foo[++$x];

[22:26] *** evalbot_8071 is now known as evalbot_8073

[22:26] <evalbot_8073> OUTPUT[4 ] bool::true 

[22:27] <r0nny> wth?

[22:27] <r0nny> ?eval my $x=0;my @foo=1..9;say @foo[$x+1];

[22:27] <evalbot_8073> OUTPUT[2 ] bool::true 

[22:27] <r0nny> ?eval my $x=0;my @foo=1..9;say @foo[$x++];

[22:27] <evalbot_8073> OUTPUT[3 ] bool::true 

[22:27] <r0nny> ALLERT

[22:28] <r0nny> ++ op broke 

[22:28] <r0nny> ?eval my $x=0;my @foo=1..9;say @foo[$x+=1];

[22:28] <evalbot_8073> OUTPUT[4 ] bool::true 

[22:28] <r0nny> ?eval my $x=0;my @foo=1..9;say @foo[$x++];

[22:28] <evalbot_8073> OUTPUT[3 ] bool::true 

[22:28] <r0nny> ?eval my $x=0;my @foo=1..9;say @foo[$x+1];

[22:28] <evalbot_8073> OUTPUT[2 ] bool::true 

[22:28] <r0nny> ?eval my $x=0;my @foo=1..9;say @foo[$x];

[22:28] <evalbot_8073> OUTPUT[1 ] bool::true 

[22:28] <r0nny> ?eval my $x=0;my @foo=1..9;say @foo[$x++];

[22:28] <evalbot_8073> OUTPUT[3 ] bool::true 

[22:29] <r0nny> ?eval my $x=0;my @foo=1..9;say @foo[{$x++}];

[22:29] <evalbot_8073> Error: cannot cast from VCode (MkCode {isMulti = False, subName = "<anon>", subType = SubBlock, subEnv = Just (MkEnv {envContext = CxtSlurpy (mkType "Any"), envLValue = False, envLexical = MkPad (padToList [("$?1",[(<ref>,<ref>)]),("$_",[(<ref>,<ref>)]),("$__evalbot_print",[(<ref>,<ref>)]),("$code",[(<ref>,<ref>)]),("$lang",[(<ref>,<ref>)]),("$x",[(<ref>,<ref>)]),("&?BLOCK_EXIT",[(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>)

[22:29] <r0nny> ops

[22:34] <r0nny> n8

[23:21] <autrijus> it's a separate bug in t/pugsbugs/postincrement_in_subscripts.t

[23:21] <autrijus> will fix

[23:30] <autrijus> mm the first talk (what's new in python) is nice

[23:32] <autrijus> coros (&coro.next that passes value to yield()); new "functional" module that introduces currying

[23:32] <autrijus> setuptools (CPAN.pm shell like); 

[23:32] <autrijus> package support in indexer and much more metadata; everything moved to svn; 

[23:33] <autrijus> shared AST structure (macro exposed to python land) among Jython, PyPy and CPython

[23:33] <autrijus> all these coming to Python 2.5 (alpha1 next March)

[23:33] <integral> hmm, perl6 is missing quite a bit of that in spec form

[23:33] <autrijus> yup.

[23:34] <autrijus> the specific Syns still has some way to go compared to detailed PEPs.

[23:37] <wolverian> now they just need to get rid of the "parens are required when calling a function" thing

[23:37] <wolverian> :)

[23:38] <integral> and add {, }, and ;, and define layout as just adding appropiate ones ;-)

[23:39] <autrijus> :D

[23:40] * autrijus is reading up on Paste/WSGI

[23:40] <wolverian> I'm fine with whitespace, except when ruby makes it impossible to use .map and such nicely

[23:40] <autrijus> I'm... obviously biased in favor of optional layout :)

[23:41] <wolverian> also, I didn't realise ruby doesn't require ()s on if clauses. that's neat. (and somehow familiar.. ;)

[23:42] <integral> you can't write one-liners with mandatory layout

[23:43] <autrijus> http://pugscode.org/euroscon/haskell.xul?page=46 # updated to highlight layouts

[23:44] <autrijus> (also massively updated/reordered other places)

[23:44] <autrijus> Alias++ for suggesting http://pugscode.org/euroscon/haskell.xul?page=18

[23:45] <autrijus> (and the slide after that)

[23:45] <integral> heh

[23:46] <Jooon> I remember going OMGBBQ! when seeing that :)

[23:46] <autrijus> bbq?

[23:46] <Jooon> barbeque

[23:47] <autrijus> meaning fried brain?

[23:47] <Jooon> yes, even though I never thought of it like that :)

[23:48] <Jooon> I just like the "acronym" OMBWTFBBQ very much

[23:48] <Jooon> OMG*

[23:48] <Jooon> !!!11 :)

[23:58] <dduncan> g'day folks

