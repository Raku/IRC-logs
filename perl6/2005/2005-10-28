[00:30] <gaal> putter: except that we do have it working :) (well, not without some hack)

[00:30] <gaal> but i'm not here. zzZZZ &

[01:14] *** stevan__ is now known as stevan

[02:06] <stevan> any Bostonians around? In particular MIT people?

[02:07] <stevan> I am trying to find out information about the MIT Little Languages workshop this year

[02:09] <stevan> putter: if you backlog,.. IIRC that is your neck of the woods,.. maybe you know something :)

[02:09] <ingy> stevan: putter == MIT iirc

[02:09] <stevan> putter: If it is happening, and I go, we should meet up

[02:10] <stevan> ingy: yeah I think you are right,.. I know he is in Mass

[02:10] <ingy> he went to MIT

[02:10] <stevan> ah

[02:10] <ingy> at least he had an mit email addy once

[02:11] <ingy> Mitchell Charity. Know him from his many contributions to Inline

[02:11] <ingy> well never met him physicallt

[02:11] <ingy> y

[02:12] * stevan wonders how many people ingy *doesn't* know :)

[02:56] <buu> ME!

[05:05] <dduncan> ?eval @foo = [2,3]; @bar [10,20]; @foo >>+<< @bar

[05:05] <dduncan> ?eval 1

[05:08] <dduncan> whence goes evalbot?

[05:13] <QtPlatypus> I think it was lost in the last netsplit.

[06:31] *** peterson_ is now known as dhpeterson

[07:28] <dduncan> ?eval 1

[07:28] <evalbot_7755> 1 

[07:28] <dduncan> ?eval kick it

[07:28] <evalbot_7755> Error: No compatible subroutine found: "&kick" 

[08:01] <dduncan> evalbot came back, but svnbot didn't alas

[08:01] <dduncan> well, nightey night

[10:39] *** ods15_ is now known as ods15

[13:33] <r0nny_> yo

[13:33] <r0nny_> anyone alive ?

[13:33] <xinming> yes.

[13:35] <r0nny_> any new comments on the SixPanUtils ideas ?

[13:37] <xinming> r0nny_: Maybe, I am the worng person for you. :-P

[13:37] <r0nny_> hmm

[13:37] <r0nny_> maybe

[13:41] <r0nny_> anyone else any comment ?

[13:42] <xinming> r0nny_: what that is plesae?

[13:42] <r0nny_> http://sixpan.perl6.nl/sixpan/index.cgi?SixPanUtils

[13:42] <r0nny_> basically cpan utils for perl6

[13:43] <r0nny_> oh - and the module build utils

[13:45] <xinming> r0nny_: hmm, can we have a option to install module into ~/.perl/perl6/modules such kind of dir?

[13:45] <r0nny_> read - its allready there ..

[13:48] <r0nny_> Juerd: got some time ?

[13:49] <r0nny_> hmm - seems to be away

[13:50] <r0nny_> well - im going now - latter

[13:50] <xinming> r0nny_: hmm, can module be install into a specified dir?

[13:52] <r0nny_> xinming: should be easy to manage latter in the process - initial versions might be a bit unflexible about such stuff

[13:52] <r0nny_> first is to manage globla install, then add user-hope install wich basically should make it flexible enough to install anywhere

[13:53] <r0nny_> global ;P

[13:53] <xinming> how about multi versions of modules? just like can 1.0 co-exist with 2.0 ?

[13:53] <r0nny_> im not sure about this

[13:54] <r0nny_> casue it might create name-collisions

[13:55] <xinming> hmm, perl 6 can choose modules for you if you specify, so,I wanna the module can be co-exist. So that, some module upgrade won't break the whole program which need the module.

[13:55] <rafl_> Some debian users in here? I've got some parrot packages for you that should be tested.

[13:55] <xinming> perl6/modules/module-name/versions/module_files.

[13:57] <r0nny_> xinming: well - how do i tell it wich version to use ?

[13:57] <xinming> rafl_: I am using debian, I'll be glad to be the "laboratory animal"

[13:57] <rafl_> xinming: Great. Uploading it..

[13:58] <xinming> r0nny_: hmm, in perl 6, if you just specify the name of the module, choose the latest, if with version number is specified, then, choose that one...

[13:58] <r0nny_> hmm

[13:58] <r0nny_> then it should be no problem

[13:59] <rafl_> xinming: http://perlcabal.org/~rafl/debian/

[13:59] <r0nny_> how does perl manage if u use 2 different modules, and each of them uses a different incombatible version of the same module

[14:01] <xinming> r0nny_: hmm, why I wish to install to a specified location, is because, we might wish to be the project on a different partition, which is filled of projects, and you need `ln -s` all the modules to a project lib dir, maybe, lib/CPAN sometimes

[14:01] <xinming> rafl_: hold on plz

[14:01] <eric256_> juerd: ping

[14:02] <xinming> r0nny_: and the modules has a working version specified for the needed module...

[14:02] <xinming> r0nny_: and prefer to choose the latest if not found.

[14:03] <xinming> hmm, Just guess. :-P

[14:03] <xinming> parrot_0.3.0-1_i386.deb    

[14:03] <xinming> Is this one I should try?

[14:04] <rafl_> parrot-dev and parrot-doc as well.

[14:04] <xinming> s/this one/this the one/

[14:04] <xinming> ok

[14:04] <rafl_> It's not really 0.3.0, btw. It's a current svn snapshot.

[14:05] <Limbic_Region> for anyone interested - http://perlmonks.org/index.pl?node_id=503589 is a p6 related post on combinatorials and lazy evaluation and what not

[14:05] <Limbic_Region> first p6 specific post I have seen in a while

[14:05] <Limbic_Region> *hint hint*

[14:06] <xinming> rafl_: hmm, Do I have to upgrade to sid? :-(

[14:07] <rafl_> xinming: I don't know. They're at least built against sid.

[14:07] <xinming> rafl_: I can't install it on testing.

[14:08] <xinming> got the dependency problem.

[14:08] <rafl_> xinming: What does it complain about?

[14:08] <xinming> dpkg: dependency problems prevent configuration of parrot:

[14:08] <xinming>  parrot depends on libicu34; however:

[14:08] <xinming>  parrot depends on libstdc++6 (>= 4.0.2-3); however:

[14:08] <xinming>   Version of libstdc++6 on system is 4.0.2-2.

[14:09] <xinming> and, If I try to apt-get install libcstdc++6 or the needed module, I will also get the dependency problem

[14:09] <rafl_> Yes. Nevermind then..

[14:10] <xinming> rafl_ parrot-dev and parrot-doc as well.

[14:10] <xinming> xinming s/this one/this the one/

[14:10] <xinming> oops...

[14:10] <xinming> root@HomePc:/home/xinming# apt-get install -f

[14:10] <xinming> Reading package lists... Done

[14:10] <xinming> Building dependency tree... Done

[14:10] <xinming> Correcting dependencies... Done

[14:10] <xinming> The following extra packages will be installed:

[14:10] <xinming>   libicu34

[14:10] <xinming> The following packages will be REMOVED:

[14:10] <xinming>   parrot

[14:10] <xinming> The following NEW packages will be installed:

[14:10] <xinming>   libicu34

[14:11] <xinming> after I `dpkg -i parrot*`, that's what apt-get install -f will show

[14:17] <xinming> anyone here can tell me where to find the url for autrijus' journal?

[14:18] <Jooon> somewhere here http://use.perl.org/~autrijus/journal

[14:18] <xinming> Jooon: thanks.

[14:18] <Limbic_Region> there used to be a link on the pugs homepage

[14:18] <Limbic_Region> but now it links to planet pugs

[14:18] <xinming> Limbic_Region: No, It is removed...

[14:18] <Limbic_Region> errr

[14:18] <xinming> yes.

[14:19] <Limbic_Region> planet perl6

[14:19] * xinming wonders what autrijus do these days.

[14:19] <xinming> Limbic_Region: But, I have problem to access there.

[14:19] <Limbic_Region> err - pugs even # I was right the first time

[14:20] <Limbic_Region> confusing - the link implies pugs but the page says planet perl six

[14:20] <Limbic_Region> xinming - you using http://planetsix.perl-foundation.org/ ?

[14:20] <xinming> http://planet.pugscode.org/

[14:21] <Limbic_Region> that just forwards to the URL I provided

[14:21] <xinming> I can access http://planetsix.perl-foundation.org/

[14:21] <xinming> But, can't access planet.pugscode.org

[14:21] <Limbic_Region> so you are getting to where you wanted to go

[14:21] <Limbic_Region> it is a phantom URL anyway

[14:22] <xinming> The Great FireWall in China blocks too many sites. :-/

[14:22] <Limbic_Region> xinming - I don't understand, you are getting to the right place so why not cut out the middle man?

[14:25] <xinming> Limbic_Region: hmm, If I use planet.pugscode.org, I will get the documents contains no data, But If I use planetsix.perl-foundation,org It will opened correctly.

[14:25] <xinming> rewriting the world, What does rewriting here mean? rewrite most grammars of perl 6?

[14:28] <rafl_> autrijus: ping

[14:31] <Juerd> r0nny_: ?

[14:31] <Juerd> eric256_: pong

[14:32] <eric256_> hey. is there a timelimit on cron jobs?   make smoke, seems to die after 5 minutes, i wasn't sure if the smoke was broken or the server just shut it down

[14:32] <Juerd> There is no time limit

[14:32] <eric256_> okay. /me scans error log

[14:32] <Juerd> Which means that if you're not careful, the processes will overlap

[14:33] <eric256_> i only run the smoke every 6 hours

[14:33] <Juerd> ok

[14:33] <eric256_> should be okay.. might goto 12 dunno

[14:35] <eric256_> hehe it took too long and the pugs rebuild swiped the pugs executable out form under it

[14:35] <eric256_> any ideas?

[14:36] <Limbic_Region> xinming - as I said before planet.pugscode.org redirects to planetsix so there is NO content at planet.pugscode.org

[14:36] <Limbic_Region> forget that link and just go directly to planetsix

[14:36] <Limbic_Region> xinming - rewriting the world is meant to mean changing the world

[14:37] <xinming> Limbic_Region: Ok.

[14:41] <r0nny_> re

[14:41] <eric256_> Juerd...for now i'm creating a pugs-smoke checkout that  will build and smoke every 6 hours and just keep it seperate

[14:42] <r0nny_> Juerd: wanted to have a short talk about the development steps for the build sys and package manager

[14:47] <r0nny_> since it will be a bigger project and i hace no clue where to start since im used to think c++

[14:49] <r0nny_> well - i will write the basic steps i think will be good to the wiki

[14:56] <r0nny_> http://sixpan.perl6.nl/sixpan/index.cgi?SixPanDevelopmentPlan <- please edit

[15:19] * rafl_ wonders why pugs needs a parrot src dir to build.

[15:19] <rafl_> Shouldn't it be enough to have the headers?

[15:20] <eric256_> svn check

[15:20] <eric256_> is svn bot feeling okay today?

[15:20] <eric256_> hehe. he isn't even present... thats a crime! ;)

[15:20] <rafl_> eric256_: I don't think so..

[15:20] *** rafl_ is now known as rafl

[15:21] *** eric256_ is now known as eric256

[15:26] <nothingmuch> we should add a new pugs logo

[15:26] <nothingmuch> http://www.axis-of-aevil.net/archives/2005/10/selfcare.html

[15:27] * Limbic_Region chuckles

[15:28] <rafl> How to check if program foo is in path in perl5? Does a nice idiom or module exist?

[15:31] <Limbic_Region> define path

[15:31] <rafl> $ENV{PATH}

[15:31] <Limbic_Region> check to see if which has been ported in the PPT

[15:32] <Limbic_Region> it has

[15:32] <Limbic_Region> http://search.cpan.org/~cwest/ppt-0.14/

[15:32] <Limbic_Region> see which

[15:32] <Limbic_Region> http://search.cpan.org/~cwest/ppt-0.14/bin/which

[15:34] <Limbic_Region> rafl - does that do what you want or do you need something else?

[15:36] <sili> ppt makes me sad.

[15:37] <Juerd> r0nny_: Sorry, I'm not interested in the packaging thing enough

[15:37] <Limbic_Region> because?

[15:37] <sili> because you reusing the code that was written isn't really possible

[15:37] <sili> since each tool is its own script, basically

[15:38] <Juerd> r0nny_: Please discuss your ideas with the people who do care (rafl, kane)

[15:38] <sili> and ``... isn't pretty

[15:38] <r0nny_> Juerd: ok

[15:38] <rafl> r0nny_: I am. There's already some kind of prototype.

[15:38] <r0nny_> rafl: where ?

[15:38] <eric256> sili...port ppt to p6 and base them on a nice module ;)

[15:38] <r0nny_> want to take a look

[15:38] <sili> eric256: i wish i had the time

[15:38] <rafl> r0nny_: On my disk. Let me finish a quick hack and I'll upload it.

[15:39] <Juerd> rafl: Wow, you're quick

[15:39] <Limbic_Region> sili - ok but making it available inside a perl module wasn't a goal of the project

[15:39] <theorbtwo> I could have sworn there was a core module for PATH and friends, but I don't see it...

[15:39] *** brother_ is now known as brother

[15:40] <sili> Limbic_Region: maybe not, but it would have been so benefitial

[15:40] <rafl> Juerd: Well, kane wrote most of it. I only fixed the parts which required some deeper Debian knowledge.

[15:40] <r0nny_> it required debian knowdegde ?

[15:41] <r0nny_> well - need to go away for some time

[15:41] <rafl> Yes. It uses the .deb format from Debian and currently also the debian tools for that (dpkg, dpkg-deb) because there no perl equivalents for them yet.

[15:42] <r0nny_> rafl: omg - hope u get a rid of needing to use .deb soon ;P

[15:42] <rafl> r0nny_: Why?

[15:42] <rafl> r0nny_: It's really mature, flexible and does what we want.

[15:43] <r0nny_> well - i will discuss about this issue when im back

[15:43] <theorbtwo> Ah, File::Spec->path is what I was thinking.

[15:43] <rafl> r0nny_: Of course, preferably in the Wiki.

[15:43] <theorbtwo> Using .deb sounds completely reasonable to me.

[15:44] <rafl> To kane and me as well.

[15:44] <Limbic_Region> theorbtwo - does File::Spec->path tell you if a file exists in the path?

[15:44] <Limbic_Region> if not, I found a module that does

[15:44] <Limbic_Region> Env::Path has a whence method which will tell you if a file exists in the $ENV{PATH}

[15:45] <rafl> Limbic_Region: I solved it in another way which doesn't require a module.

[15:45] <rafl> Limbic_Region: I hope which is something we can assume to be there everywhere..

[15:45] <rafl> But I don't think so.. ;-)

[15:45] <Limbic_Region> which can't be assumed to be everywhere

[15:46] <Limbic_Region> Win32 for instance

[15:46] <rafl> Limbic_Region: OK then. How does windows solve that?

[15:46] <theorbtwo> Windows?  Solve something?  You must be joking...

[15:46] <rafl> Limbic_Region: Can you take a look at my recent commit to Makefile.PL and make it portable?

[15:46] <Limbic_Region> rafl - 1 question at a time

[15:47] <Limbic_Region> rafl - windows solves this by erroring out when it isn't in the path

[15:47] <theorbtwo> L~R, File::Spec->path only tells you what $ENV{PATH} is; it doesn't search for things in it.

[15:47] <Limbic_Region> AFAIK, native windows doesn't provide the ability to tell you where in the path - only if it is in the path

[15:47] <theorbtwo> I seem to recall that there is something in inc:: that's supposed to do that, but I think I remember that only because it was buggy.

[15:47] <Limbic_Region> if you want to know the location portably (Win32 and *nix) then use the "whence" method in Env::Path

[15:48] <Limbic_Region> second question, WRT Makefile.PL - I am not doing any Pugs hacking anymore but my last comment should help solve the problem

[15:49] * rafl goes home.

[15:52] <xinming> ?eval class A { has @.a; sub BUILD { @a = ( "a", "", '' )} }; ?A.new.a[0];

[15:52] <evalbot_7757> Error: Undeclared variable: "@a" 

[15:52] <xinming> ....

[15:53] <Limbic_Region> rafl - I think your change to Makefile.PL is b0rk

[15:53] <Limbic_Region> oh, you went home

[15:53] <Limbic_Region> hrmm

[15:54] <Limbic_Region> anyone who is listening and has an opinion - feel free to speak up

[15:54] <Limbic_Region> apparently knowing the location of a file in $ENV{PATH} is required for something to work correctly

[15:55] <Limbic_Region> the way to do this on Win32/*nix is to use Env::Path - which probably won't work on Mac, VMS, etc

[15:55] <Limbic_Region> not that I think Parrot works on VMS yet

[15:55] <Limbic_Region> anyway - copy/pasting the code from the module is fairly easy as it is compact which wouldn't require adding the module

[15:56] <Limbic_Region> but it still won't be 100% portable

[15:56] <Limbic_Region> the code could be adapted to combine the search routine and File::Spec which would be portable

[15:56] <theorbtwo> Sounds like a plan, Limbic.

[15:56] <theorbtwo> Does it properly handle extensions under win32?

[15:57] <xinming> how to test if a value is undefined?

[15:57] <Limbic_Region> theorbtwo - if File::Spec is providing the file names and paths then it doesn't matter

[15:57] <xinming> just if $a { true } else { false } ?

[15:57] <Limbic_Region> the question is then who is going to adapt the search code ;-)

[15:57] <Limbic_Region> xinming - defined

[15:58] <Limbic_Region> ?eval my $foo; say "undefined" if ! defined $foo;

[15:58] <evalbot_7758> undefined bool::true 

[15:58] <Limbic_Region> xinming - undefined didn't change behavior from p5 to p6

[15:59] <theorbtwo> It looks like no, from a quick read of the source (it is, indeed, quite short).

[15:59] <Limbic_Region> theorbtwo - so that means you are volunteering right ;-)

[15:59] <theorbtwo> What I meant is that if you're looking for a command called "foo" under win32, you really want foo.{exe,com,bat,cmd,pif}.

[16:00] <Limbic_Region> theorbtwo - that isn't needed for this specific problem

[16:01] <Limbic_Region> and besides - the whence routine allows for patterns not just exact file names

[16:01] <Limbic_Region> chomp(my $parrot_config = `which parrot-config.imc 2>/dev/null`);

[16:01] <Limbic_Region> that's the line that needs to be made portable

[16:01] <theorbtwo> Hm.

[16:02] <theorbtwo> OK.

[16:02] <theorbtwo> Sounds like Env::Path can do that.

[16:02] <Limbic_Region> and that is certainly doable by combining File::Spec and Env::Path

[16:02] <Limbic_Region> theorbtwo - it could if you didn't care about OSes other than Win32 and *nix

[16:02] <Limbic_Region> but I think we do 

[16:04] <theorbtwo> Oh, right -- the path might not be in $ENV{PATH}.

[16:04] * Limbic_Region notes the time and heads for lunch

[16:04] <theorbtwo> Have a good one.

[16:04] <Limbic_Region> actually - I think Perl makes $ENV{PATH} portable - that's not the problem

[16:04] <Limbic_Region> the problem is searching in $ENV{PATH}

[16:04] <Limbic_Region> delimiters and extensions and what not

[16:04] <Luna> hola

[16:05] <Limbic_Region> salutations

[16:05] <Limbic_Region> theorbtwo - if you read the source for Env::Path - it is doing some / and \ conversions prior to searching - that needs to be extended beyond Win32

[16:05] <Limbic_Region> and *nix

[16:06] <Limbic_Region> in any acct - I am off for lunch

[16:10] <rafl> Limbic_Region: b0rked in which way?

[16:12] <xinming> ?eval "asdfg/" ~~ rx:perl5{^(\w+)?/(\w+)?}; $1;

[16:12] <evalbot_7758> \MkMatch {matchOk = True, matchFrom = 0, matchTo = 0, matchStr = "", matchSubPos = [], matchSubNamed = {}} 

[16:12] <xinming> ?eval "asdfg/" ~~ rx:perl5{^(\w+)?/(\w+)?}; $1 ?? "true".say !! "false".say ;

[16:12] <evalbot_7758> true bool::true 

[16:12] <xinming> Is this the right behaviour?

[16:14] <rafl> I don't think so.

[16:15] <xinming> It seems, that it returned a null string with `but true`

[16:19] <xinming> eval? my $a; $a = "abc" ?? "bcd" !! $a = "false";

[16:19] <xinming> ?eval my $a; $a = "abc" ?? "bcd" !! $a = "false";

[16:19] <evalbot_7758> Error: Can't modify constant item: VStr "bcd" 

[16:20] <xinming> how about this?

[16:24] <nothingmuch> do roles have no instance data?

[16:24] <nothingmuch> xinming: ?? !! is lvalue

[16:25] <xinming> ?eval my $a; my $b; $a = "abc" ?? "bcd" !! $b = "false";

[16:25] <evalbot_7758> Error: Can't modify constant item: VStr "bcd" 

[16:25] <xinming> Do we have to write this using if statement?

[16:25] <xinming> nothingmuch: ??

[16:25] <nothingmuch> ?eval my $x = 0; my $y; my $z; $x ?? $y !! $z = "foo"; $y.perl ~ " " ~ $z.perl

[16:25] <evalbot_7758> "\\undef \\\"foo\"" 

[16:26] <nothingmuch> ?eval my $x = 1; my $y; my $z; $x ?? $y !! $z = "foo"; $y.perl ~ " " ~ $z.perl

[16:26] <evalbot_7758> "\\\"foo\" \\undef" 

[16:26] <nothingmuch> what you wantes is probably !! ($a = "foo")

[16:28] <xinming> thanks. :-)

[16:30] <nothingmuch> what were you trying to do, btw?

[16:30] <nothingmuch> ?eval my $x = 1; my $y; my $z; $x ?? $y !! $z = "foo"; ($y, $z)

[16:30] <evalbot_7758> (\"foo", \undef) 

[16:30] <nothingmuch> that's simpler ;-)

[16:32] <xinming> nothingmuch: hmm, I want to try if we can assign a value using $x ?? true !! false statement instead of if. ;-)

[16:32] <theorbtwo> Except the $y is being used in void context for some reason...

[16:32] <nothingmuch> yes, you can

[16:32] <theorbtwo> ?eval my ($x, $y); $x = $y ?? 'true' !! 'false'; $x

[16:32] <evalbot_7758> \"false" 

[16:32] <theorbtwo> ?eval my ($x, $y)=1; $x = $y ?? 'true' !! 'false'; $x

[16:32] <evalbot_7758> \"false" 

[16:32] <xinming> theorbtwo: hmm, I don't mean this.

[16:32] <nothingmuch> oh, that's what you're checking

[16:32] <theorbtwo> ?eval my ($x, $y)=(0,1); $x = $y ?? 'true' !! 'false'; $x

[16:32] <evalbot_7758> \"true" 

[16:33] <nothingmuch> ?eval my ($x, $y) = 1; ($x, $y)

[16:33] <evalbot_7758> (\1, \undef) 

[16:33] <nothingmuch> that's expected

[16:33] <xinming> ?eval my( $x, $y ) = 1..Inf; ($x, $y);

[16:33] <evalbot_7758> (\1.0, \2.0) 

[16:33] <xinming> ?eval my( $x, $y ) = 1..Inf by 3; ($x, $y);

[16:33] <evalbot_7758> Error:  unexpected "b" expecting term postfix, operator, "does", "but", "is", "^..^", "cmp", "<=>", "^..", "..^", "..", ";" or end of input 

[16:33] <xinming> hmm...

[16:34] <xinming> bbl

[16:34] <xinming> can we make a step?

[16:35] <xinming> Just like, 1, 5, 9, 13, 17, 21 such kind of list?

[16:36] <xinming> ?eval my( $x, $y ) = 1..Inf :by(3); ($x, $y);

[16:36] <evalbot_7758> Error:  unexpected ":" expecting term postfix, operator, "does", "but", "is", "^..^", "cmp", "<=>", "^..", "..^", "..", ";" or end of input 

[16:37] * theorbtwo wonders why it lists "operator" and several individual operators, and why he doesn't remember those ^..^ smiliey things.

[16:44] <ajs_> In S03 under new operators: The .. binary range operator has variants with ^ on either end to indicate exclusion of that endpoint from the range.

[16:44] <ajs_> So 1^..^3 would be (2)

[16:46] <xinming> amazing...

[16:47] <xinming> ?eval my( $x, $y ) = 1^..^Inf; ($x, $y);

[16:47] <evalbot_7758> (\2.0, \3.0) 

[16:47] <xinming> ?eval my( $x, $y ) = 1..^Inf; ($x, $y);

[16:47] <evalbot_7758> (\1.0, \2.0) 

[16:47] <xinming> ?eval my( $x, $y ) = 1..^..^..Inf; ($x, $y);

[16:47] <evalbot_7758> Error:  unexpected "^" expecting term 

[16:50] <nothingmuch> xinming: err, what are you trying to do?

[16:51] <xinming> nothingmuch: I wish I will be able to get a step for 1..Inf

[16:51] <xinming> Just like It will auto generate 1, 5, 9, 13, 17, 21, ... Inf

[16:56] <nothingmuch> ( grep { ($_ - 11) % 4 == 0 } .. Inf ))[1 .. 10)

[16:56] <nothingmuch> ?eval( grep { ($_ - 11) % 4 == 0 } .. Inf ))[1 .. 10]

[16:56] <evalbot_7758> Error:  unexpected ")" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[16:56] <nothingmuch> ?eval (grep { ($_ - 11) % 4 == 0 } .. Inf )[1 .. 10]

[16:56] <evalbot_7758> Error: cannot cast from VCode (MkCode {isMulti = False, subName = "<anon>", subType = SubBlock, subEnv = Just (MkEnv {envContext = CxtItem (mkType "Any"), envLValue = False, envLexical = MkPad (padToList [("$?1",[(<ref>,<ref>)]),("$_",[(<ref>,<ref>)]),("$code",[(<ref>,<ref>)]),("$lang",[(<ref>,<ref>)]),("&?BLOCK_EXIT",[(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>)]),("&break",[(<ref>,<ref>),(<ref>,<ref>)]),("&c

[16:56] <nothingmuch> eep, i'm drunk

[16:56] <nothingmuch> ?eval grep { ($_ - 1) % 4 == 0 } ... Inf 

[16:56] <evalbot_7758> Error:  unexpected "I" expecting operator, ":", ",", term postfix, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[16:56] <nothingmuch> ?eval grep { ($_ - 1) % 4 == 0 } 1 .. Inf 

[16:57] <nothingmuch> ?eval (grep { ($_ - 1) % 4 == 0 } 1 .. Inf)[0 .. 10]

[16:57] <nothingmuch> i think i fried it

[16:57] <xinming> you are drunk...

[16:57] <nothingmuch> is grep lazy?

[16:57] <evalbot_7758> (no output)

[16:57] <nothingmuch> ?eval (grep { ($_ - 1) % 4 == 0 } 1 .. 1000)[0 .. 10]

[16:57] <nothingmuch> (not spec grep, current prelude grep)

[16:58] <evalbot_7758> (no output)

[16:58] <evalbot_7758> [1, 5, 9, 13, 17, 21, 25, 29, 33, 37, 41] 

[16:59] * nothingmuch will do a haskell version with fold

[17:01] <nothingmuch> no, that doesn't work out well

[17:07] <Limbic_Region> rafl - b0rk in that it isn't portable

[17:08] <rafl> Limbic_Region: Yes, indeed. It only works on UNIX platforms. How to do that better?

[17:08] <Limbic_Region> you can immediately improve the portability by using 'whence' from Env::Path

[17:08] <Limbic_Region> that will cover *nix and Win32

[17:09] <Limbic_Region> the problem is supporting other platforms

[17:09] <Limbic_Region> to do that - you have to combine code from 2 modules - File::Spec and Env::Path

[17:09] <Limbic_Region> that is what I was discussing right before going to lunch

[17:10] <Limbic_Region> the code from Env::Path is quite small so modification shouldn't be that difficult

[17:11] <Limbic_Region> and theorbtwo was just about to volunteer

[17:12] <svnbot6> r7756 | eric256++ | Add doc links for several tests in /t/operators

[17:12] <svnbot6> r7757 | eric256++ | Fixed typo in last commit

[17:12] <svnbot6> r7758 | rafl++ |  r18808@ata:  rafl | 2005-10-28 17:44:31 +0200

[17:12] <svnbot6> r7758 | rafl++ |  * debian/control: Build-Depend on parrot-dev for parrot embedding.

[17:12] <svnbot6> r7758 | rafl++ |  * Makefile.PL: Some fixes for parrot header detection.

[17:13] <rafl> Limbic_Region: Commiting another possibility..

[17:15] * Limbic_Region sees what it takes to hack Env::Path's whence and File::Spec to make it work universally

[17:24] <svnbot6> r7759 | rafl++ |  r18815@ata:  rafl | 2005-10-28 19:24:35 +0200

[17:24] <svnbot6> r7759 | rafl++ |  * Make pugs detection a bit more portable.

[17:24] <svnbot6> r7759 | rafl++ |  * Embed parrot in the debian package as default.

[17:32] <Limbic_Region> rafl - I figured out how to make it portable without using Env::Path at all

[17:33] <Limbic_Region> and without invoking a shell

[17:33] <Limbic_Region> perlbot nopaste

[17:33] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[17:34] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "Fix the `which` portability issue" (15 lines, 304B) at http://sial.org/pbot/13992

[17:34] <Limbic_Region> Do you want me to update Makefile.PL or are you going to?

[17:34] <rafl> Please do it.

[17:34] <Limbic_Region> ok

[17:36] <Limbic_Region> I just need to know what to do if it isn't found in the PATH?

[17:39] <Limbic_Region> nevermind - I see an or die later on that should handle it

[17:41] <Limbic_Region> checking in now

[17:41] <Limbic_Region> hmm - this is taking a while

[17:42] <svnbot6> r7760 | iblech++ | PIL2JS: Prelude::JS::Proxy: Unbreak PIL2JS (forgot a +$var to :$var change).

[17:42] <Limbic_Region> grrr - update failed

[17:42] * Limbic_Region tries again

[17:45] <Limbic_Region> rafl - your attempt was also b0rk

[17:45] <Limbic_Region> PATH delimiter is not portable either - : on *nix and ; on Win32

[17:45] <Limbic_Region> I have checked in something that should be portable

[17:45] <Limbic_Region> please verify it actually works (I don't have Parrot on this machine)

[17:47] <Limbic_Region> actually - I think it is still b0rk but not because of the parrot-config.imc thing

[17:47] <svnbot6> r7761 | Limbic_Region++ | Made `which parrot-config.imc` portable

[17:48] <Limbic_Region> (-d $base and -e "$base/parrot-config.imc") isn't portable either

[17:48] <Limbic_Region> that needs fixing too

[17:48] <Limbic_Region> that whole section is non-portable

[17:48] * Limbic_Region goes to work 

[17:52] <svnbot6> r7762 | Limbic_Region++ | Corrected many more portability issues with parrot-config.imc

[17:52] <Limbic_Region> but still not all of them

[17:52] <eric256> "10 */6 * * * " in crontab should run every y6 hours at 10 after the hour right?

[17:53] <Limbic_Region> the more I look the more problems there are - is it because no one is running Pugs AND Parrot on anything other than *nix?

[17:57] <Limbic_Region> eric256 - huh?

[17:57] <svnbot6> r7763 | Limbic_Region++ | Corrected copy/paste error in adding portability

[18:00] <Limbic_Region> there are more unix only style paths in the PUGS_EMBED section but I am not sure why so I am not touching them WRT portability - anyone know what is going on?

[18:10] * eric256 wants to smack PerlMouse

[18:54] <webmind> evening

[19:04] <r0nny_> re

[19:04] <eric256> yea automated feather smoke worked ;)

[19:04] <r0nny_> rafl: ping?

[19:16] <r0nny_> rafl: ping2?

[19:31] <r0nny_> rafl: rofl - i had read how xactly deb files are made - dey definitive dont fit sixpan well - since all it needs is a tarball (preferable bz2 compressed)

[19:32] <Limbic_Region> eric256 - why do you want to smake PerlMouse?

[19:38] <eric256> smack...and i dunno. i think the wording he uses just grates on my nerves.

[19:38] <eric256> haven't you ever had someone you just didn't like and couldn't point to a reason. ;)

[19:40] * theorbtwo wonders who this perlmouse person is.

[19:40] <Limbic_Region> eric256 - I had my own run in with PerlMouse

[19:40] <eric256> hehe. just someone on perlmonks.

[19:41] <Limbic_Region> PerlMouse ended up being right but for the wrong reason

[19:41] <Limbic_Region> which kinda made the burn worse

[19:41] <Limbic_Region> fwiw - lazy evaluation also has the benefit of memory consumption

[19:41] <Limbic_Region> s/memory/efficient memory/

[19:41] <eric256> i don't mind being wrong. i don't mind being proven wrong, or argueing about right and wrong. with me it is more a tone issue, i need to focus on remembering that most people (including myself) arn't good at conveying emotions well in text. 

[19:42] <Limbic_Region> well, PerlMouse never made their case - japhy ended up doing it

[19:42] <eric256> a guy on pm awhile back ticked me off, and i decided to private message him about it, turned out english wasn't his first language and he had no idea that his tone held negative connotations.

[19:43] <Limbic_Region> I had shown that while I was right, I wasn't as right as I could have been

[19:43] <Limbic_Region> fwiw - never under-estimate the cost of compiling regular expressions un-necessarily

[19:44] <theorbtwo> Though for longer-running programs that tends to get amoritized out.

[19:45] <theorbtwo> Oh.  Unless I'm forgetting how often regexes get compiled, which is quite possible.

[19:45] <Limbic_Region> theorbtwo - not when they are in a loop that IS the body of a long running program

[19:46] * eric256 is still waiting for theorbtwo to help cross reference tests. ;) i'm doing a couple test files a day but its time consuming ;)

[19:46] <Limbic_Region> I followed the general rule - when there is a performance problem fix the algorithm and don't spend as much time on shaving individual ops

[19:46] <PerlJam> Limbic_Region: you were just guilty of a lapse in critical thinking.  You had tunnel vision.  No big deal; it happens.

[19:46] <Limbic_Region> in this case, the shaving outweighed changing the algorithm

[19:47] <Limbic_Region> and doing both outweighed either combined ;-)

[19:47] <theorbtwo> Rules of thumb are useful things, but don't forget about the rest of your fingers!

[19:52] <r0nny_> rafl: ping agin

[19:53] <Limbic_Region> so does anyone have any insight into the non-portability of the EMBED_PUGS stuff in Makefile.PL ?

[19:53] <Limbic_Region> I helped rafl out earlier with a specific issue and found that there was a whole lot of non-portable code

[19:53] <Limbic_Region> I started fixing it and then took a step back and wondered why it was that way (and stopped)

[19:54] <Limbic_Region> theorbtwo - fwiw, Env::Path was entirely unnecessary

[20:51] *** buu is now known as o

[20:52] *** o is now known as buu

[22:16] <meppl> gute nacht

[22:16] <nothingmuch> good night

[22:17] <meppl> ;)

[22:17] <Juerd> ja, goede nacht

[22:17] <meppl> ;)

[22:30] * nothingmuch goes to play violent computer games

[23:07] <rafl> r0nny_: pong

[23:30] <r0nny_> re

[23:30] <r0nny_> rafl: ping?

[23:32] <rafl> r0nny_: pong, again.

[23:33] <r0nny_> rafl: took a look at the wiki ?

[23:34] <r0nny_> os - i see

[23:35] <r0nny_> i know a tar file could contain the same scripts

[23:35] <rafl> The tools to extract/install debs and especially to extract meta data etc already exist.

[23:36] <rafl> It doesn't matter if it's a tarball or an ar achive.

[23:36] <r0nny_> its an ar archive of multiple tarballs

[23:36] <theorbtwo> And a magic file.

[23:37] <theorbtwo> However, like rafl said, it doesn't matter.

[23:37] <theorbtwo> That's nice to know if you need to deal with things on a low level, or without the proper tools.

[23:37] <rafl> A deb can contain arbitrary data, btw. Not only binary packages. You can also put a src package in with the according scripts to build it when installing.

[23:37] <theorbtwo> Most of the time, you don't.

[23:38] <r0nny_> well - cpan is about source installs - i dont see the need of all the stuff deb brings in

[23:38] <rafl> Most src packages on cpan only contain pure perl stuff. Let's say 80%. Why build packages that must be built to contain the same files afterwards?

[23:39] <theorbtwo> It brings in a well-defined set of metadata, with years of careful evolution.

[23:39] <r0nny_> well if u just install source modules - just make it copy

[23:40] <r0nny_> but i think perl6 will have binary modules

[23:40] <r0nny_> where a build process is usefull

[23:41] <rafl> It is, for 10% of all packages. Let's optimize for the default case and provide src pkg's for the rest.

[23:42] <theorbtwo> I think this is a really bad place to try the 90/10 game.

[23:42] <r0nny_> i want to compile all perl modules i install

[23:42] <r0nny_> with specieal optinations just for my system

[23:42] <rafl> r0nny_: Feel free to do. I don't want to.

[23:42] <rafl> r0nny_: Yeah.. --omg-optimized ;-)

[23:43] <theorbtwo> r0nny_: I bet you use gentoo, too.

[23:43] <rafl> theorbtwo: I didn't say we won't support src packages. I think it should be the default to provide binary packages for pure perl stuff and fall back to src packages when it's needed.

[23:43] <theorbtwo> Compiling perl modules with special optimizitaions just for you system doesn't make any freaking sense.

[23:43] <r0nny_> rafl: i just want to ensure the tools dont get to debinaish, casue the debian from shouce stuff feels horrible

[23:44] <r0nny_> eh source

[23:44] <theorbtwo> r0nny_: The second half of that sentance made no sense to me.

[23:44] <rafl> r0nny_: Debian is optimized for binary packages. We only adopt the package format.

[23:44] <r0nny_> even the package fromat is optimized for binary ...

[23:44] <r0nny_> they put stuff like archs in

[23:44] <theorbtwo> There are two completely different formats in deb -- one for binaries and one for source.

[23:45] <rafl> r0nny_: It isn't.

[23:45] <theorbtwo> Source ones aren't .deb at all -- they are .tar.gz, patch.gz, and .dsc.

[23:45] <rafl> r0nny_: Architecure is just one kind of meta information in the package. Evaluating and using it is left to the package management.

[23:45] <rafl> OK, I'll go to bed now. Let's discuss tomorrow or in the wiki. Bye!

[23:46] <r0nny_> ok

[23:47] <r0nny_> n8 then

[23:47] <r0nny_> need to sleep. too

[23:47] <theorbtwo> "nate then"?

[23:47] <r0nny_> night !

[23:48] <theorbtwo> Damn l33t idiots...

