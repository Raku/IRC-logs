[00:04] <kungfuftr> moo?

[00:07] <jabbot> pugs - 1118 - Ported CGI::Lite 2.02 (complete with doc

[00:20] <kolibrie> using the darcs repository, I'm getting ghc errors (which I don't see with the svn repository)

[00:20] <kolibrie> my eyes don't tell me what is wrong

[00:20] <kolibrie> /usr/bin/ghc --make -H200m -L. -Lsrc -Lsrc/pcre -I. -Isrc -Isrc/pcre  -i. -isrc -isrc/pcre -static  -Wall  -fno-warn-missing-signatures -fno-warn-name-shadowing  -o pugs src/Main.hs src/pcre/pcre.o src/UnicodeC.o

[00:20] <kolibrie> Chasing modules from: src/Main.hs

[00:20] <kolibrie> src/Main.hs:

[00:20] <kolibrie>     Can't find module `Compile'

[00:21] <kolibrie> anyone have insights as to what that means?

[00:21] <Alias_> So regular expressions work yet?

[00:23] <kolibrie> I'm pretty sure perl5 rx works

[00:23] <kolibrie> no perl6 rules yet

[00:25] * Alias_ wonders whether it's worth porting Config::Tiny to provide basic .ini-style config files

[00:30] <pjcj> looks lilek iblech already did it

[00:33] <pjcj> I'd guess the darcs repo didn't sync properly with the main svn repo.  That's one for autrijus I suppose.

[00:34] <kolibrie> when abouts is he active again?

[00:34] <pjcj> three or four hours, I'd guess

[00:35] <Alias_> It's about 8:30am Taipai time?

[00:39] <kolibrie> yep, that's what the Internet says

[01:08] <stevan> Alias_: we have basic regexp matches with rx:perl5{}

[01:09] <stevan> and we have subst regexp s:perl5{}{}

[01:09] <stevan> and optional g fla

[01:09] <stevan> g

[01:09] <Alias_> Take a look at http://search.cpan.org/src/ADAMK/Config-Tiny-2.01/lib/Config/Tiny.pm

[01:09] <stevan> s:perl5:g{}{}

[01:09] <Alias_> Tell me if you think current regex can support that

[01:09] <Alias_> in the method read_string

[01:10] <stevan> Alias_: iblech has already ported Config::Tiny

[01:10] <Alias_> he did?

[01:10] * Alias_ didn't quite get what pjcj meant earlier

[01:10] <stevan> http://svn.perl.org/perl6/pugs/trunk/modules/Config-Tiny/

[01:10] <Alias_> updating my svn now

[01:10] <stevan> of course it does not work yet

[01:10] <stevan> because we dont have OO yet

[01:10] <Alias_> :)

[01:11] <Alias_> Not to mention that Config::Tiny works a bit unusually...

[01:11] <Alias_> in that it is used like both an object and a hash

[01:11] <stevan> the only part of read_string that we could not support is the split with the regexp

[01:12] <kolibrie> welcome back from dinner, stevan

[01:12] <stevan> looks like iblech has implemented the hash part as a rw class attribute

[01:12] <kungfuftr> you can do split with pure regex though

[01:13] <stevan> kolibrie: thanks :), my belly is quite full

[01:13] <Alias_> wow, lots of new code since I last updated

[01:13] <stevan> Alias_: yes, iblech is our current mad-porter 

[01:13] <Alias_> oh dear... MIME::Lite?

[01:13] <stevan> he is responsible for most of whats in modules now

[01:13] <Alias_> The horror!

[01:13] <Alias_> :)

[01:14] <stevan> Alias_: you want to see horror ...

[01:14] <stevan> http://svn.perl.org/perl6/pugs/trunk/ext/FileSpec/

[01:14] <Alias_> ah, he's doing Email::Simple at least

[01:14] <stevan> a (mostly) working File::Spec 

[01:14] <Alias_> so ext is "new Perl6-specific modules"?

[01:14] <Alias_> and modules is "P5 modules ported to P6"\

[01:14] <stevan> Alias_: ext/ is working perl6/pugs stuff (can be haskell too)

[01:15] <stevan> yes

[01:15] <stevan> what is in modules will eventually serve a pseudo integration tests for pugs 

[01:15] <kungfuftr> is anyone working on rules engine stuff? or is it being left until someone else with more of an idea works on it?

[01:15] <kolibrie> stevan: I saw you were talking with autrijus about ghc 6.4 and inlining

[01:15] <stevan> because they will be modules with test suites

[01:15] <kolibrie> are there examples of that?

[01:15] <Alias_> stevan: Gotcha

[01:15] <stevan> kolibrie: talking about 6.4,.. not inlining

[01:16] <kolibrie> oh

[01:16] <stevan> kungfuftr: right now it's PCRE, I have no idea about future plans

[01:16] <stevan> kolibrie: what are you looking for? I may be able to point you there

[01:17] <kungfuftr> stevan: yar, i think only larry and damian actually understand the concept of the new rules system

[01:17] <kungfuftr> =0)

[01:17] <kolibrie> I'd really like to wrap up the cairo library

[01:17] <stevan> kungfuftr: I think you are right

[01:17] <stevan> cairo is haskell?

[01:17] * kungfuftr thought cairo was svg engine

[01:18] <theorbtwo> I think the idea is that perl6 rules will be implemented by integrating with the PGRE stuff that the p6 compiler pumpking was doing.

[01:18] <kolibrie> no cairo is C

[01:18] <kolibrie> it's a low-level drawing engine

[01:18] <kolibrie> http://www.cairographics.org

[01:18] <stevan> kolibrie: I think autrijus was using the haskell FFI to wrap PCRE (which is C)

[01:19] <stevan> IIRC he liked it (the Haskell FFI)

[01:19] <kolibrie> I wanted to write a wrapper in perl5, but I got lost in XS

[01:19] <stevan> kolibrie: at this point you will need to write a Haskell warpper

[01:20] <kolibrie> there is a haskell port already, I believe

[01:20] <stevan> kolibrie: then you are half way there :)

[01:20] <kolibrie> might have to learn haskell?

[01:22] <kolibrie> has @larry written anything about binding libraries from other languages?

[01:22] <stevan> nothing I have seen, I expect that is to be done in Parrot though

[01:22] <Alias_> parrot people are just starting on the structures for loading modules from multiple languages now (IIRC)

[01:23] <kolibrie> ok

[01:23] <Alias_> multiply dimensional namespaces, or some such

[01:23] <Alias_> [ language, lang-namespace, version ] or something

[01:23] <Alias_> I only saw it in passing

[01:24] <kolibrie> The haskell bindings are avilable via darcs: darcs get http://ofb.net/~abe/darcs/cairo

[01:31] <kolibrie> bbiab

[01:51] *** metaperl is now known as _metaperl

[02:00] <stevan> anyone know the Win32 equivalent of 'pwd'?

[02:00] <Alias_> 'cd' (no args)

[02:00] <Alias_> ?

[02:01] <stevan> I am looking to do something equivalent to Cwd?

[02:01] <stevan> for File::Spec

[02:01] <stevan> the Win32 one

[02:01] <kolibrie> been a long time since I used win32

[02:01] <stevan> me too

[02:03] <ninereasons> Alias_ has it.

[02:03] <Alias_> stevan: try just calling cd without any arguments

[02:03] <stevan> so system("cd") will work

[02:03] <ninereasons> ysp

[02:03] <Alias_> trim off trailing $stuff

[02:03] <stevan> ok, I have no windows box to test, so I will have to wing it

[02:03] <kolibrie> how scary - just seems like you'd go /home

[02:05] <Alias_> stevan: chomp($cwd = (`cd`)[0]);

[02:06] <Alias_> WORKSFORME

[02:06] <stevan> cool

[02:06] <Alias_> it isn't quoted though

[02:07] <Alias_> just raw

[02:07] <Alias_> quoted/escaped

[02:08] <kungfuftr> stevan: `chdir` is the win32 command

[02:09] <kungfuftr> C:\Documents and Settings\Scott>chdir

[02:09] <kungfuftr> C:\Documents and Settings\Scott

[02:09] <kungfuftr> =0)

[02:09] <ninereasons> equivalent to cd

[02:09] <theorbtwo> chdir and cd are synonymous.

[02:09] <kungfuftr> ah

[02:09] <Alias_> chdir returns nothing for me

[02:10] <Alias_> oh wait

[02:10] <Alias_> (was in perl shell at the time)

[02:10] <ninereasons> heh

[02:19] <ninereasons> it's very nice having the -I switch.  I never use it with perl, but it's sure handy for playing with pugs

[02:21] <Alias_> I've only ever used it for screwing around with test scripts for other people's modules

[02:25] <ninereasons> do other people have a problem building with Embedded Perl5?

[02:27] <kolibrie> haven't tried it

[02:31] <pasteling> "ninereasons" at 127.0.0.1 pasted "r1118: build fails when using Embed" (29 lines, 2K) at http://sial.org/pbot/8599

[02:47] <jabbot> pugs - 1120 - more work on File::Spec::Win32; I need s

[02:47] <jabbot> pugs - 1119 - re-adding the bug from a few days ago wh

[02:49] <Khisanth> adding bugs?

[02:53] <stevan> :)

[02:53] <stevan> readding bug report 

[02:53] <stevan> its getting late 

[02:58] *** scw_ is now known as scw

[03:07] <autrijus> greetings lambdacamels!

[03:08] <Alias_> hail phearless leader

[03:08] * Alias_ was pleased to see that Config::Tiny got ported without him even knowing

[03:08] <autrijus> the mad porter scares me :)

[03:09] <Alias_> Config::Tiny is probably quite a nice little regexp test

[03:09] <autrijus> aye

[03:09] <Alias_> at least for most of the basics

[03:09] <autrijus> I want PGE :-/

[03:09] <Alias_> PGE?

[03:09] <autrijus> the perl6 rules parser and compiler thing.

[03:09] <Alias_> ah

[03:10] <autrijus> pmichaud was saying last week that he is devoting the week to that

[03:10] <autrijus> and should show up with a working implementation... now or something

[03:10] <autrijus> because of the way our ext/ works now, if PGE is there, it can be turned into Rule.pm in no time

[03:10] <autrijus> and/or Rule.hs

[03:16] <theorbtwo> Oh, good-morning, autrijus.

[03:17] <autrijus> hey theorbtwo :)

[03:26] <ninereasons> I see that there's still a lot of perl5 in many of the modules.  to be expected at this stage, I'm sure.

[03:28] <autrijus> yes, pleas hack away.

[03:28] <autrijus> I'll bbiab :)

[03:37] <ingy> hola

[03:45] <kungfuftr> moo

[04:17] <jabbot> pugs - 1121 - * $*EXECUTABLE_NAME and $*PROG_NAME

[04:23] <chip> why not $*PROGRAM_NAME ?

[04:24] <chip> or $*EXEC_NAME?

[04:24] * chip anticipates "ask Larry"

[04:24] <kungfuftr> moo

[04:24] <autrijus> it's PROGRAM_NAME.

[04:24] <autrijus> I typo'ed in my commit log.

[04:24] <autrijus> I'm using perlvar.

[04:25] <chip> OK.  not to complain, I thought everyone was zzz

[04:25] <autrijus> nope, everyone just woke up :)

[04:26] <chip> where are you in meatspace, anyway?

[04:26] <autrijus> Taipei. YAPC::Taipei starts tomorrow, with me, obra, mugwump, acme, hcchien, clkao, ingy, miyagawa & go

[04:26] <autrijus> s/go/co/

[04:26] <chip> yowie

[04:26] <chip> (teh intarweb)++

[04:27] <kungfuftr> buggery... i'm going to be doing svn updates every 2 mins tomorrow

[04:27] <Alias_> autrijus: If you happen to encounter any bitching about lack of decent Perl jobs, you might casually mention for me that Sydney is currently in a decent Perl coder drought.

[04:27] <chip> just don't get carried away and declare independence from the P6 cabal

[04:28] <Alias_> autrijus: There were 7 senior "real" Perl jobs posted to the main jobs site here in March so far... by far a record

[04:28] <kungfuftr> Alias_: could do with some in oxford too

[04:28] <Alias_> So if anyone wants to move to Sydney for a while, it's a good time for it. They are mostly 3-6 month contracts

[04:29] <autrijus> chip: er. but pugs was never part of cabal...

[04:29] <autrijus> chip: although we maintain the "one perl6" policy firmly

[04:29] * chip alerts Larry to trigger the invasion

[04:29] * obra pondders the perl strait

[04:29] * chip calls to cancel

[04:29] <autrijus> it's one perl6, multiple teams

[04:30] <autrijus> please be vague on this soverignty issue and don't pass anti-separate-compilation laws

[04:30] <autrijus> otherwise we'll be forced to buy more weapon from the haskell camp!

[04:30] * autrijus grins

[04:31] <kungfuftr> autrijus: you now need inline BF!

[04:31] <Alias_> oh dear lord know... Human waves of first year university comp sci lecturers!

[04:31] <Alias_> s/know/no/

[04:31] * theorbtwo is glad things aren't as bad as CNN was making them out to be a week or so ago.

[04:32] * chip increases the Parrot budget

[04:32] <theorbtwo> .oO(Parrot has a budget?)

[04:33] *** mandarin is now known as Qiang

[04:34] <kungfuftr> i thought parrot just had a budgie... and had a hidious offspring called pugs

[04:34] * kungfuftr should really shutup when he's ill... make no sense at all

[04:34] <Odin-LAP> Hm. Didn't the ROC government drop its claims to mainland China at some point?

[04:34] <autrijus> yeah.

[04:35] <autrijus> not the reverse, sadly

[04:35] <Odin-LAP> Too bad, really. The duality was amusing. :D

[04:35] * Odin-LAP doubts the PRC is ever going to give up.

[04:36] <Odin-LAP> Too extensive bureaucracy. They'll never get all the forms filled out.

[04:36] <Alias_> China has always reformed as a single country. That is the way it has always been, for X thousand years... right?

[04:37] <mugwump> sans all the invasions afaik :)

[04:37] <kungfuftr> mugwump: hey sam mate

[04:37] <mugwump> heya scott

[04:38] <kungfuftr> mugwump: finally got there i see

[04:39] <theorbtwo> China has always been one conuntry!  Even if everybody else thought Tibet was a different country until 1907 or so.

[04:39] <theorbtwo> Er, 1950.

[04:39] <Odin-LAP> Heh.

[04:40] <Odin-LAP> The ROC also claimed Tibet, AFAIK.

[04:40] <theorbtwo> Reading the wikipedia article, there's hardly a clean history.

[04:40] <Odin-LAP> For China?

[04:40] * kungfuftr claims ireland in his own name... since GB keep fucking it up

[04:41] * Odin-LAP claims Russia, just for fun.

[04:41] <theorbtwo> In 1907, Brittian, China, and Russia recognized Tibet as being part of China... but the Chinese didn't actually control it until 1959.

[04:42] <Odin-LAP> theorbtwo: Yes. Note that the Tibetans didn't recognise that themselves. ;)

[04:42] <theorbtwo> Yes, well, my original specification was rather open -- "everybody else".

[04:43] <Odin-LAP> True.

[04:44] <Odin-LAP> But of course, the British are notorious for recognising things that are quite ... odd. Like granting Palestine to zionists in 1917. ;)

[04:44] <Odin-LAP> (A promise they broke, admittedly.)

[04:45] <theorbtwo> Well, the British had other things on their mind at the time.

[04:45] * kungfuftr still has to find a way he can revoke his british citizenship

[04:46] <theorbtwo> Why, kungfuftr?

[04:47] <Odin-LAP> kungfuftr: Eh ... make sure that doesn't leave you with no citizenship.

[04:47] <kungfuftr> theorbtwo: dual citizen... politics... much rather be irish

[04:47] <theorbtwo> Ah, didn't relalize you were irish/british dual.

[04:47] <Odin-LAP> Hm. Irish/British law prevent you from being both, then?

[04:48] <theorbtwo> Since both are part of the EU, I'd imagine there's little benifit.

[04:48] <Qiang> british is part of EU now ?

[04:48] <theorbtwo> And always has been.

[04:49] <theorbtwo> It's not part of the european monetary union, but is part of the EU.

[04:49] <Qiang> heh. i thought they try to stay back and watch

[04:49] <Qiang> oh. that's what i meant 

[04:49] <theorbtwo> For that matter, they every nearly became part of the EMU.

[04:49] <kungfuftr> Odin-LAP: Anglo-Irish agreement says that by law i am both an irish and british citizen. as far as i'm aware it's the only exception to the rule

[04:50] <Odin-LAP> kungfuftr: Huh. I see.

[04:51] <theorbtwo> The british lobbied hard for a country-specific-use section on Euro paper currency, and got it -- then decided not to become a part of the EMU.

[04:51] <theorbtwo> So should they ever do so, there's a nice spot on the bills for a picture of the Queen.

[04:51] <theorbtwo> (Or King, should they take that long.)

[04:52] * theorbtwo sighs... hey, I liked my #perl6 on-topic!

[04:52] <theorbtwo> We should take this to #emacs.

[04:52] <autrijus> :D

[04:52] <autrijus> it's all chip's fault.

[04:52] <chip> I heard that

[04:53] * theorbtwo ponders -- take on a project, or go to bed.

[04:53] <autrijus> both!

[04:53] <autrijus> go to bed and hack there.

[04:54] <theorbtwo> It's 6 AM, and I've been up since 1 yesterday; if I got to bed, I'm going to sleep.

[04:54] <autrijus> sleep then.

[04:55] <theorbtwo> (Yes, that's a somewhat short day; I'm like that.)

[04:55] <Odin-LAP> theorbtwo: Or even #ideologies!

[04:55] <Qiang> your brain shell won't rest on perl6 ;)

[04:55] <kungfuftr> get back to work minions!

[04:56] <Alias_> Sleep is for the genetically inferior, NOW KEEP CODING!!!

[04:57] <theorbtwo> G'night, people with names that need unicode to write correctly, and people that can't stop being british.

[04:57] <theorbtwo> Oh, and Alias_.

[04:57] <kungfuftr> caffeine glands... only $5... implanted for free

[04:57] <kungfuftr> nn

[04:57] <Odin-LAP> kungfuftr: I'd prefer amphetamine.

[04:58] <Odin-LAP> kungfuftr: Fewer side-effects.

[04:58] * Alias_ passes Odin the dex

[04:58] <kungfuftr> hhhmmm... fresh out i'm afraid... mugwump bought the lot

[04:58] * mugwump sniffs loudly

[04:59] <kungfuftr> mugwump: so how are we my crack-fuelled perl monkey friend?

[04:59] <Odin-LAP> Alias_: I think I have a bit of methylphenidate left, actually.

[04:59] <Alias_> I'll stick to what's legal for me, thanks

[04:59] <mugwump> mmm, good ... not even suffering any withdrawal !

[04:59] <mugwump> Depends which law you look at, Alias

[05:00] <Alias_> $local

[05:00] <mugwump> Given that the Magna Carta guarantees that the crown will never restrict traditional ways of life, I'd say that pretty much makes all plant ethenogens legal all over the empire

[05:01] <mugwump> finding a lawyer with the balls to push that in court is another matter :)

[05:01] <Odin-LAP> mugwump: Most of the Magna Carta is deprecated. :p

[05:01] <Alias_> except all new ones discovered since the MAgna Carta

[05:01] * mugwump &  # travelling to clkao's place

[05:02] <Odin-LAP> Eh. According to that, you could ban cocaine, but not chewing coca leaves.

[05:02] <Odin-LAP> Which, according to what I've read, would be quite reasonable. ;)

[05:12] <autrijus> stevan: asleep?

[05:59] <autrijus> stevan: your bug has been fixed

[06:07] <jabbot> pugs - 1122 - * s:perl5:g with captureing vars now wor

[07:38] <gaal> theorbtwo, are you awake?

[07:57] <jabbot> pugs - 1123 - add diag() info from tests

[08:07] <flw> whoami

[08:07] <flw> whois perl6

[08:07] <flw> whois perl6

[08:07] <lightstep> try / first

[08:08] <flw> thank lightstep

[08:16] *** kungfuftr changes topic to: 114/2907 subtests fail | pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m

[08:24] <lightstep> is there a reason to use fromMVal of readMVal instead of fromVal?

[08:27] <jabbot> pugs - 1124 - fix number of tests in t/builtins/grep.t

[08:31] <lightstep> and should @list.join($str) work, or should it be $str.join(@list) ?

[08:32] <Corion> The topic is wrong - on Win2k, I get 110/2913 subtests failed as of 1124

[08:33] <kungfuftr> lightstep: i would assume it would be a method on the list

[08:33] <kungfuftr> Corion: running 1124 now

[08:34] <lightstep> kungfuftr, i really wanted to ask if @list.join($str) should do join($str, @list)

[08:34] <Corion> BTW, what is the customary way to have in Haskell what I'd implment in Perl via local variables? Is there anything like a hash that I can pass to the recursive functions and set entries there?

[08:34] <lightstep> since the test assumes this

[08:34] <lightstep> Corion, you can use records

[08:34] <Corion> lightstep: I would assume this too, yes (but I don't know anything of the formalities of Perl6)

[08:34] <kungfuftr> lightstep: unless it's been stated somewhere, autrijus assumes perl5 behaviour

[08:35] <Corion> lightstep: Thanks - will search for that. Searching for "map" or "dictionary" with "Haskell" didn't produce too many useful results

[08:36] <Darren_Duncan> I just updated and tested Pugs again -- 104 test failures now, which is 10 fewer than the IRC header says

[08:36] <lightstep> Corion, but you can use `where' or `let' which lets you access the variables from the current scope

[08:36] <kungfuftr> Darren_Duncan: shush

[08:36] <Darren_Duncan> is it supposed to be a secret?

[08:36] <kungfuftr> Darren_Duncan: no, i just have a slower build machine

[08:36] <kungfuftr> =0)

[08:37] <Corion> lightstep: Hmmm - "current scope" - that's a nice idea - I could make all these recursive invocations local to a surrounding function and set the new values there (instead of passing them around all the time)

[08:37] <Corion> Darren_Duncan: Weird - I got 110/2913 subtests failed (win2k), so we have platform inconsistencies. Yay.

[08:38] <Darren_Duncan> my test is based on revision 1123

[08:38] <lightstep> how do i print an array in perl5?

[08:38] <gaal> print @array

[08:39] <Corion> Or print "@array", if you want the items separated with spaces

[08:39] <Darren_Duncan> my 104 failed is on Mac OS X 10.3.8

[08:39] <kungfuftr> i get 120/2913 here

[08:39] <gaal> print join ", " @array

[08:39] <Corion> (or set $" to separate with something other than spaces)

[08:39] <Corion> kungfuftr: Bah. I gotta go - I'll nopaste my test output

[08:39] <Darren_Duncan> out of 2907 here

[08:39] <Corion> nopaste?

[08:39] <Corion> nopaste

[08:39] <gaal> Hey win32 folks, please say what variant you're using - mingw, straight windows...

[08:39] <Corion> Grr - is the infobot not here?

[08:39] <gaal> perlbot nopaste

[08:39] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[08:40] <kungfuftr> Corion: http://paste.husk.org

[08:40] <Corion> Aah - it's not automatic...

[08:40] <Darren_Duncan> the build/test took awhile since I'm currently without my full RAM compliment, so don't plan to try again today ... i should bump the RAm back up in a couple days though

[08:40] <kungfuftr> i'm running on freebsd 4.11 here

[08:41] <Darren_Duncan> anyway, in case anyone's wondering about my SQL::Routine port progress ...

[08:41] <Darren_Duncan> I haven't started it yet ...

[08:41] <Darren_Duncan> but expect to have the whole thing done over 3-4 hours tomorrow

[08:41] * gaal summons nothingmuch

[08:41] <pasteling> "Corion" at 217.86.56.202 pasted "nmake test output on Win2k (Rev. 1124; 110/2913 subtests failed)" (37 lines, 2.4K) at http://sial.org/pbot/8606

[08:41] <kungfuftr> pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | FBSD_4.11:R1124(120/2913)

[08:42] *** kungfuftr changes topic to: pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | FBSD_4.11:R1124(120/2913)

[08:42] <Corion> Anyway - gotta run again - the extended command line handling will have to wait some more, but it really needs an overhaul.

[08:42] <Darren_Duncan> that's about 250K of code

[08:42] <gaal> Corion, when we get a chance we need to talk about the command line anyway

[08:42] <gaal> there were some ideas

[08:42] <autrijus> I just realized Perl 5 took almost 4 years.

[08:42] <gaal> last night i forgot.

[08:43] *** kungfuftr changes topic to: pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | FBSD_4.11:R1124(120/2913) win2k:R1124(110/2913)

[08:43] <gaal> s/5/6/; s/years/months/

[08:43] <Darren_Duncan> the port will be based on the yet unreleased 5v0.58

[08:43] <Corion> gaal: I (no)pasted my prototype yesterday night - maybe you can look at it - otherwise, I'll be back in about 6-8 hours

[08:43] <gaal> k

[08:44] <gaal> but the basic idea was to use perl to parse the pugs command line

[08:44] <Darren_Duncan> don't know if other people have different thoughts, but I started using a simple system to differentiate perl 5 and 6 versions of things in a terse fashion, especially as they both come to be updated in parallel

[08:44] <Darren_Duncan> simply put 5v or 6v in front of the version nums

[08:45] <Darren_Duncan> so I say in my common changelog, for example, that SQL::Routine 6v0.0.1 is a match to 5v0.58

[08:45] <lightstep> is there any casting going on before the primitive operators are called? or should each operator cast by itself?

[08:45] <Darren_Duncan> or that Locale::KeyedText 6v0.0.3 aligns with 5v1.03

[08:45] <Darren_Duncan> short and sweet

[08:46] <Darren_Duncan> shorter than saying "perl 6 version of ..." or etc

[08:46] <Corion> gaal: Ah, that would be a much more convenient solution, true!

[08:46] <Corion> (because I know Perl, but I don't know Haskell well enough)

[08:47] <Corion> ... still that means I should try to commit my todo_is patch for -e :)

[08:48] <gaal> tests are always welcome :)

[08:48] <Corion> ... still no workee

[08:49] <gaal> corion, i wrote a command line spec for perl5 with getopt::declare, which was the only *module* we could think of that could do it

[08:49] <lightstep> i don't understand Prim.hs: how are primitive operators like `sort' and `join' that get a value and a list differentiate between op(@list), op($val,@list) and @list.op($val)?

[08:49] <lightstep> s/are/should/

[08:49] <gaal> it's not finished yet -- i got distracted -- and maybe it's not even possible to use that w/o some minor hacking

[08:49] <gaal>  i should contact dconway about it i suppose

[08:50] <pasteling> "Corion" at 217.86.56.202 pasted "todo test for multiple -e switches" (40 lines, 735B) at http://sial.org/pbot/8607

[08:50] <Corion> gotta run now, see you later, all

[08:51] <Darren_Duncan> I will also away

[08:51] <kungfuftr> (IRC bots)-- # all made for interactions, not information

[08:53] * nothingmuch is summonned

[08:54] <nothingmuch> i have a lesson soon though, so be swift

[08:55] <kungfuftr> a lesson, at easter?

[08:55] <nothingmuch> bass lesson

[08:55] <nothingmuch> and we don't celebrate easter

[08:55] <kungfuftr> ah

[08:55] <nothingmuch> it's still holiday though

[08:55] <nothingmuch> purim ;-)

[08:55] <nothingmuch> gaal

[08:56] <gaal> ah, hello. i was making coffee

[08:56] <nothingmuch> so what did you summon me for?

[08:57] <gaal> i wanted to chat about the server side of the smoke tests.

[08:57] <nothingmuch> ah

[08:57] <nothingmuch> today i should have time

[08:57] <nothingmuch> we have delayed cleaning till tomorrow

[08:57] <kungfuftr> ah... smoke tests... man with a plan

[08:57] <nothingmuch> so i only have a bit of laundry

[08:58] <gaal> i won't :( anyway the output of the report is richer now

[08:58] <gaal> enough to start a demo implementation of the aggregator

[08:58] <nothingmuch> i'll shove in my hack to always print $?CALLER::POSITION in test output

[08:59] <nothingmuch> goody

[08:59] <nothingmuch> (nobody panic! it's only with a special env var)

[08:59] <nothingmuch> and then we can really link stuff up

[08:59] <gaal> i remember you mentioned you had a clear idea of the database side of things there, and i don't, so, well, moose.

[08:59] <nothingmuch> ok

[09:00] <nothingmuch> DB schemas are a bit of a hobby

[09:00] <nothingmuch> so i don't mind ;-)

[09:00] <nothingmuch> maybe we can slap a maypole frontend on the DB, just so people have access to the raw data

[09:00] <gaal> hobby eh? that's what they call it these days

[09:00] <gaal> no no no

[09:00] <gaal> don't say that word :)

[09:00] <nothingmuch> so just post sqlite db file?

[09:01] <gaal> well, to2 has a nice htmlizer for a single report

[09:01] <nothingmuch> is that stuff all checked in?

[09:01] <gaal> i don't knwo what arch you want to do for the server side, so it's prolly

[09:01] <gaal> yes

[09:01] <nothingmuch> ok, then i'll find it =)

[09:02] <gaal> ...prolly betst to be as decoupled from the web server and be a daemon

[09:02] <nothingmuch> yes, it'll be decoupled

[09:02] <nothingmuch> content will be static for the most part, too

[09:02] <gaal> whenever somebody POSTs a new report, the daemon aggregates it and generates a new agg report

[09:02] <nothingmuch> exactly

[09:03] <gaal> the apache -> smokerfilter bridge is simple enough

[09:03] <gaal> but i wasn't sure about the rules for aggregation. Unless we have some, this is Too Much Data

[09:03] <nothingmuch> i'll find something that is an ok balance

[09:04] <nothingmuch> and ofcourse

[09:04] <gaal> certainly for the user, who wants to see a bottom line,

[09:04] <nothingmuch> you guys are here for critique

[09:04] <nothingmuch> stevan is probably good at this stuff

[09:04] <gaal> and possibly for the smokefilter itself

[09:05] <gaal> (generating a single report for all of t/ brings the harness to about 10mb)

[09:05] <gaal> say we have 50 reporters, it becomes iffy - need to do things like collapse tests that everyboy agrees are OK

[09:06] <gaal> and just keep a set of failure messages with a reference to who saw those failures

[09:07] <gaal> is this talk ok on #perl6? should we move elsewhere?

[09:07] <kungfuftr> just report failures and work out the platform inconsistencies at the serverside?

[09:07] <nothingmuch> i think i'll try to whip up anomality detection

[09:07] <gaal> every reporter reports their entire test, sure

[09:07] <nothingmuch> if a test is failing everywhere, but suddenly passes somewhere

[09:07] <nothingmuch> it's interesting

[09:07] <nothingmuch> same vice versa

[09:08] <kungfuftr> true

[09:08] <nothingmuch> that way we can sort of graph the flow of pugs in terms of how tests change, across Rs and platforms

[09:08] <kungfuftr> but you would get that from the fact it wasn't reported, etc

[09:08] <gaal> the server side maintains a *set* of results, which should be normalized

[09:08] <nothingmuch> anyway, teacher should be here any moment

[09:08] <nothingmuch> so ciao

[09:09] <gaal> rock the house, nm

[09:17] <gaal> i want to add some build info to pugs -V. does svn have something like cvs $Id$ I can use for embedding revision number?

[09:17] <jabbot> pugs - 1125 - build fix for Eclipse

[09:19] <lightstep> gaal, see src/pugs_version.h

[09:19] <gaal> thanks

[09:22] <lightstep> is 1=>2=>3 equal to (1=>2)=>3 or to 1=>(2=>3) ?

[09:24] <lightstep> oh, nevermind, i found out it's right-associative

[09:36] <gaal> um, is there introspection in Haskell? I have Config.hs that exports N values, and i want to query all of it.

[09:37] <lightstep> gaal, yes and no. you'd better bundle them into a record or a procedure than use the broken introspection capabilities of haskell

[09:38] <gaal> hmm. but i don't want to break the existing code that uses it.

[09:39] <lightstep> you can have the inspector thingy on addition to the regular exports

[09:39] <gaal> i could have a record built that copies them (this file is autogenerated anyway), but that's butt ugly

[09:41] <gaal> hmm, looks like only Main and Run use these values anyway. maybe i could refactor them to use a record?

[09:42] <gaal> are autrijus and co at the conf already?

[09:42] <lightstep> why do you need it for?

[09:43] <hcchien> gaal: no, it is tomorrow

[09:43] <gaal> config info should be exposed to the perl6 user; and also to pugs -V

[09:44] <hcchien> and I guess we will announce the broadcast about tomorrow morning (GMT+8?)

[09:44] * gaal wishes his old teleporter weren't broken

[09:46] <lightstep> what's wong with the manual code in Run.hs and Main.hs?

[09:46] <gaal> so, lightstep, what does work in haskell introspection? i need something simple, really. just a way to access a var by its name, plus a list of names in a moudule

[09:46] <gaal> nothing

[09:46] <gaal> i just want to programmatically get all of the data in Config

[09:47] <gaal> so thinking in Perl terms, i'd have wished for there to be a %Config::Config

[09:47] <gaal> and not a $Config::config_somevar, $Config::config_some_other_var etc.

[09:48] <lightstep> you really don't want to use haskell introspection. there are modules for it - several packages. it requires lots of annotations on both sides of the code. you cound just convert all those variables to tntries in a Data.Map

[09:48] <gaal> that's what i was looking for (i don't know haskell yet - just read yaht :)

[09:49] <lightstep> Data.Map.fromList [("key", value), ...] is the syntax

[09:50] <gaal> okay, i'll take shot at this.

[09:58] <gaal> lightstep, there's a FiniteMap in Internals/Map, which seems to give an implementation even when it's missing in old haskells. should i use that rather than data.map?

[09:59] <lightstep> yes

[09:59] <gaal> k thanks

[10:01] <lightstep> why are there both SymVal and SymExp ?

[10:07] <gaal> lightstep, newbie layout question:

[10:07] <gaal> my list is long, so i wanted to break it out to pairs on separate lines

[10:08] <gaal> config = listToFM [

[10:08] <gaal>     ("key", val)

[10:08] <gaal> ]

[10:08] <gaal> this doesn't parse

[10:08] <lightstep> you need commas between the pairs

[10:08] <lightstep> (since liftToFM expects a list of pairs)

[10:09] <gaal> er, true

[10:09] <gaal> but is having ] on a line of its own ok

[10:09] <gaal> ?

[10:09] <lightstep> i guess so

[10:09] <lightstep> one common indentation is:

[10:09] <lightstep> var = fromList

[10:09] <lightstep>     [a

[10:09] <lightstep>     ,b

[10:10] <lightstep>     ...

[10:10] <lightstep>     ]

[10:10] <gaal> hmm, okay.

[10:10] <gaal> thanks :)

[10:18] <autrijus> hi Jouke :)

[10:19] <Jouke> hey autrijus

[10:20] <Jouke> yes, I'm really considering starting to get involved :)

[10:20] <autrijus> yay!

[10:20] <autrijus> read apocryphon, write tests, port modules, think of examples

[10:20] <autrijus> if you have extra time, learn haskell :)

[10:22] <Jouke> hehehe...well, I'll be concentrating on getting prerequisites for pVoice working...that probably gets me involved for quite some time since it uses a lot of modules

[10:22] <Jouke> I think that's good enough for now

[10:23] <autrijus> yup :)

[10:23] * _metaperl has Jouke and Juerd confused

[10:23] <Jouke> we're both dutch and have names from the same region in NL

[10:23] <Jouke> but Juerd is the absolute wizard, I'm nothing like that

[10:24] <gaal> how do i, uh, deal with VStr wanting a VStr, and my map lookup returning a Maybe v?

[10:24] <autrijus> fromMaybe?

[10:24] <gaal> tried using lookupWithDefaultFM, but it doesn't seem to work

[10:24] <gaal> not the weay i expeceted anyway :)

[10:25] <autrijus> I think you want fromMaybe :)

[10:25] <elmex> yaho

[10:25] <gaal> okay :)

[10:29] <gaal> it worked, but i don't understand what i was doing wrong when i tried lookupWithDefaultFM, which seems to be intended for the same sort of thing

[10:30] <Jouke> Are there modules that do inline-haskell/c stuff already or are there examples of such things?

[10:30] <autrijus> Jouke: there's only ext/SHA1/ for now

[10:30] <autrijus> that's a very new development.

[10:30] <lightstep> is there still a reason to keep VThunk? or should i remove it?

[10:30] <Jouke> ah...I was looking in /modules

[10:31] <autrijus> lightstep: eh, VThunk is used for short-circuiting ||

[10:31] <autrijus> lightstep: how would you like to remove it?

[10:31] <lightstep> oh. i thought it was only used for ::=

[10:32] <autrijus> err, := too

[10:32] <autrijus> it's also essential for the correct currying implementation

[10:32] <autrijus> and serializable continuation

[10:32] <autrijus> so unless you thunk of something better

[10:32] <autrijus> it's here to stay

[10:35] <gaal> autrijus, i'm changing Config.hs to use a Map instead of many values. it is acceptable to add an accessor Config.getConfig :: Str -> Str (I' hope i'm getting the terminology right)

[10:35] <autrijus> sure, go ahead

[10:37] <gaal> sorry if this is trivial: is it okay for this accessor to assume a "" default on things, rather than Nothing, seeing as the data is being generated from a perl script which curently never puts undef anywhere anyway?

[10:40] <Jouke> should I use darcs or svn to check out the code?

[10:41] <autrijus> gaal: sure.

[10:41] <autrijus> Jouke: svn.openfoundry.org is the main repo.

[10:41] <autrijus> you are free to use darcs

[10:41] <autrijus> but currently only svn accepts direct commits.

[10:41] <Jouke> ok, schwern says on the wiki that svn is not in sync

[10:42] <autrijus> that is incorrect. fix the wiki.

[10:42] <Jouke> k

[10:42] <_metaperl> I was looking for a free svn host. openfoundry did not appear to be soliciting new members

[10:42] <autrijus> _metaperl: applying a new project on openfoundry is like, instantly

[10:42] <autrijus> just go to your personal page

[10:42] <autrijus> click "register project"

[10:42] <_metaperl> personal page?

[10:42] <_metaperl> www.openfoundry.org is where I went

[10:43] <autrijus> http://rt.openfoundry.org/Foundry/Home/

[10:43] <autrijus> you want rt.openfoundry.org.

[10:43] <autrijus> www.openfoundry.org is beyond my control :)

[10:44] <autrijus> 18:43 < tsee_> autrijus: Is there a guide for module authors on how to port

[10:44] <autrijus>                their modules to P6? That might get you even more tests.

[10:44] <autrijus> 18:43 < autrijus> tsee_: darren has written a summary on p6c

[10:44] <autrijus> 18:43 < autrijus> but that's not a guide per se.

[10:44] <autrijus> maybe we want modules/README

[10:44] <autrijus> similar to t/README

[10:44] <_metaperl> omg, the user agreement in Chinese :)

[10:44] <_metaperl> I always hit accept anyway, but I hope I am not offering my testicles up for sacrifice

[10:45] <Jouke> :)

[10:47] <autrijus> _metaperl: that's a faq. :) http://wagner.elixus.org/~hcchien/termtouse.html

[10:47] <_metaperl> yes, a bit of a drawback is the project id cannot have dashes...

[10:47] <autrijus> oh? I thought we fixed that.

[10:48] <autrijus> hm, apparently not. weird policy.

[10:48] <_metaperl> no, I just attempted to submit dbix-dbh

[10:48] <_metaperl> and it kicked back with that error

[10:48] <autrijus> does dbix_dbh work?

[10:49] <_metaperl> * ID must be 3-15 characters of lower-case letters or digits, beginning with a letter

[10:49] <_metaperl> I will try

[10:49] <_metaperl> no

[10:49] <autrijus> well then. sorry for that policy :-/

[10:49] <autrijus> dbixdbh then

[10:49] <_metaperl> * ID must be 3-15 characters of lower-case letters or digits, beginning with a letter

[10:49] <_metaperl> ok

[10:49] <gaal> that looks like a product

[10:51] <autrijus> and it is

[10:51] <gaal> lol

[10:57] * Jouke is afraid he'll have to learn Haskell to achieve his goals

[10:57] <autrijus> haskell is easy and fun to learn

[10:57] <autrijus> and will make you write much better perl5 code :)

[10:57] <autrijus> some people likes haskell.org/tutorial/

[10:57] <autrijus> some people like YAHT mentioned in PA01

[10:58] <Jouke> I tend to have real problems learning new languages...I picked up Perl in '97 and haven't learned any new languages since

[10:58] <_metaperl> THe Algorithms book is really pretty good, but I'm buying Simon Thompson's book

[10:58] <autrijus> ah. you can start by hacking src/Prim.hs :)

[10:58] * Jouke has plenty of ideas for this weekend

[10:59] <_metaperl> so you still need the other math operators added there?

[10:59] <_metaperl> sin, cos ,etc?

[10:59] <Jouke> unless I'm very wrong, and unless I don't succeed learning a little bit of haskell, it won't be too hard to implement Win32::OLE using HaskellDirect

[11:00] <autrijus> right. you can do that easily.

[11:00] <autrijus> you can also try to see if you can do that on the parrot side.

[11:00] <autrijus> doing it at either side is sufficient.

[11:00] <Jouke> and it's one of the basic things I need, so I think I'll be concentrating on that first

[11:01] <Jouke> on the parrot side? 

[11:01] <autrijus> see parrot/examples/sdl/

[11:01] <autrijus> for a sdl binding

[11:01] <autrijus> if you do the OLE binding there

[11:01] <autrijus> (there may already be one)

[11:01] <autrijus> then pugs can just use that binding.

[11:01] <autrijus> the 3rd way is to use an embedded perl5 interpreter.

[11:02] <autrijus> so you can just use Win32::OLE.

[11:02] <autrijus> pugs has limited support for that.

[11:02] <nothingmuch> well

[11:02] <autrijus> but it's kind of not very clean.

[11:02] <Jouke> I'd rather go for a parrot or haskell implementation

[11:03] <autrijus> ok. then you can choose to learn a very very low level assembly that is PIR

[11:03] <autrijus> /PMC

[11:03] <autrijus> or a very very high level language that is Haskell :)

[11:03] <autrijus> surprisingly, writing C-level bindings in both are very easy.

[11:04] <autrijus> Haskell in particular already has Win32.DLL.*

[11:04] <autrijus> if you install GHC 6.4.

[11:04] <autrijus> and it has bindings to most of the APIs.

[11:04] <autrijus> it helps that GHC is developed by Microsoft Research.

[11:04] <Jouke> ok, ok, I'm convinced...I need to learn some Haskell first :)

[11:04] <autrijus> ok... lambdafolk first, birdfolk later :)

[11:05] <Alias_> autrijus: Does that mean what I think it means? We can do Perl6.NET relatively easily?

[11:05] <Jouke> sounds like it

[11:05] <autrijus> Alias_: er, it's one thing to be able to call NET and back

[11:05] <Alias_> I'm assuming of course, that MS Research has some form of Haskell.NET linkup for GHC

[11:05] <autrijus> it's another to compile to native NET

[11:05] <autrijus> the first is totally easy.

[11:05] <autrijus> the second is a bit trickier (you need to compile to F# perhaps)

[11:05] <autrijus> but totally doable.

[11:06] <autrijus> since F# is really just ML

[11:06] <autrijus> and Haskell<->ML is not hard.

[11:06] <Jouke> ML?

[11:06] <autrijus> ML is this metalanguage thing.

[11:07] <autrijus> it's the canonical eager functional language.

[11:07] <Jouke> ok...too advanced talk for me right now

[11:07] <autrijus> (while Haskell is the canonical lazy one)

[11:07] <rgs> F# ?

[11:07] <rgs> the functional side of C# ?

[11:07] <jabbot> pugs - 1126 - added the numeric functions which were e

[11:07] <pasteling> "gaal" at 192.115.25.249 pasted "low-level question about high-level language" (12 lines, 461B) at http://sial.org/pbot/8610

[11:08] <autrijus> rgs: F# is basically ML ported to .net

[11:08] <autrijus> rgs: it's a remarkably complete port.

[11:08] <rgs> wow

[11:08] <_metaperl> http://research.microsoft.com/projects/ilx/fsharp.aspx

[11:08] <rgs> cool languages which have full specs can be ported to cool environments.

[11:08] <nothingmuch> microsoft seems to invest a lot of effort in FP

[11:08] <rgs> Perl 5 can't :-(

[11:08] <_metaperl> they say it's Ocaml ported to .net

[11:09] <_metaperl> yes, they fund research on Haskell

[11:09] <gaal> can someone help me with the error nopasted above?

[11:09] <rgs> a coworker confirms that F# is ocaml

[11:09] <autrijus> right.

[11:09] <autrijus> only not full ocaml

[11:09] <autrijus> gaal: it worksforme on ghc 6.4

[11:09] <autrijus> gaal: typo.

[11:09] <autrijus> I think

[11:10] <rgs> this coworker once wrote a perl 5 parser in ocaml.

[11:10] <autrijus> I want that.

[11:10] <rgs> not as good as PPI though.

[11:10] <autrijus> doesn't matter :)

[11:10] <autrijus> convince that coworker to release it?

[11:10] <autrijus> that may give us Pugs.Parser.Perl5.

[11:10] <nothingmuch> awwaiid is an ocaml user

[11:10] <gaal> autrijus, what's the typo? i can't see it

[11:11] <autrijus> gaal: http://autrijus.org/test.hs

[11:11] <autrijus> $ runghc test.hs

[11:11] <autrijus> ["one: 1","two: 2"]

[11:11] <autrijus> worksforme.

[11:12] <rgs> autrijus: that's a kind of "lint" for perl sources. http://cvs.mandrakesoft.com/cgi-bin/cvsweb.cgi/soft/perl-MDK-Common/perl_checker.src/ (undocumented of course)

[11:12] <autrijus> danke!

[11:12] <autrijus> license?

[11:12] <rgs> GPL

[11:13] <gaal> thanks.. weird.

[11:13] <autrijus> can it be relaxed to perl? :)

[11:13] <autrijus> (otherwise I can't include it in pugs.)

[11:14] <nothingmuch> should so many p6 modules be in the core repo?

[11:14] <nothingmuch> right now it's still a convenience

[11:14] <autrijus> nothingmuch: no. we're working on it. :)

[11:14] <nothingmuch> but 10 modules from now i think it'd be hard

[11:14] <autrijus> yes.

[11:14] <nothingmuch> freepan is starting to happen?

[11:14] <autrijus> yes.

[11:14] <autrijus> we got bandwidth and machine and a roadmap

[11:14] <rgs> autrijus: there's a plan to turn it into a publicly releaseable shape.

[11:14] <nothingmuch> yay!

[11:14] <autrijus> need more hackings tomorrow

[11:14] <autrijus> rgs: yay.

[11:14] <rgs> it's (c) mandrakesoft, thus GPL

[11:15] <nothingmuch> autrijus: any help will be gladly offerred

[11:15] * nothingmuch used to sysop, so that stuff is all good

[11:15] <autrijus> nothingmuch: oh. cool. yay

[11:15] <autrijus> will keep you in touch

[11:15] <nothingmuch> will freepan be implemented in p6? ;-)

[11:15] <nothingmuch> sure thing

[11:15] <Alias_> freepan?

[11:16] <Alias_> Some sort of massive all-languages CPAN?

[11:16] <autrijus> Alias_: http://yapc.kwiki.org/taipei/index.cgi?FreepanProposal

[11:16] <autrijus> "Free Programming Archive Network"

[11:17] <Alias_> I see some dangerous things in that list

[11:17] <Alias_> Release via svn tag is dangerous

[11:17] <pasteling> "kcwu" at 61.70.142.187 pasted "let script/pugscc know $ENV{GHC}" (28 lines, 1K) at http://sial.org/pbot/8611

[11:18] <autrijus> Alias_: uh the idea is to use tools.

[11:18] <autrijus> not letting people using svn propset

[11:18] <Alias_> Sounds like a hack waiting to happen

[11:18] <autrijus> sure.

[11:19] <autrijus> kcwu: looks good, commit it

[11:19] <autrijus> welcome aboard!

[11:19] <integral> it sounds a bit harder to mirror too: harder than just rsyncing, and serving FTP/HTTP

[11:19] <Alias_> Part 2. Why do I have to use your repository? What about mine?

[11:19] <autrijus> integral: svn repo is also http repo.

[11:19] <autrijus> so that answers your question.

[11:19] <autrijus> Alias_: you can just use yours and send pings.

[11:19] <autrijus> the idea is that of blogspheres ;)

[11:19] <Alias_> My CVS repository doesn't do that...

[11:19] <autrijus> as long as your svn is publicly reachable.

[11:19] <Alias_> You mean I have to use svn?

[11:19] <autrijus> then you need a gateway.

[11:20] <autrijus> foundry can mirror svn from cvs.

[11:20] <autrijus> you'll just hand it an anon acccount.

[11:20] <autrijus> and a cvs :ext:/:pserver: line.

[11:20] <Alias_> But svn is such an old repository, everyone has moved on to NGVC (Next-Generation Version Control)

[11:20] <autrijus> and it figures out the rest.

[11:20] <integral> I always liked the separation between PAUSE, CPAN and search.cpan.org, seemed quite useful

[11:20] <f0rth> pugscc is perl5 powered?

[11:20] <autrijus> SVK is that NGVC.

[11:20] <autrijus> f0rth: yes.

[11:20] <autrijus> integral: right, and we intend to decentralize PAUSE

[11:20] <Alias_> eep

[11:21] <integral> hrm, but centralisation seems to be implied by a normal mirror system where each mirror talks to just one upstream

[11:21] <Alias_> No way in hell you want a decentralised module source

[11:22] <autrijus> I thought bloglines works pretty well.

[11:22] <Alias_> bloglines?

[11:22] <autrijus> bloglines.com

[11:22] <kolibrie> I'm getting this error on 'make':

[11:22] <kolibrie> src/Prim.hs:76:

[11:22] <kolibrie>     Could not deduce (Floating a) from the context (Num a)

[11:22] <kolibrie>       arising from use of `atan' at src/Prim.hs:76

[11:22] <Alias_> autrijus: That you want to design any technical system based on the structure of blogging scares me the most :)

[11:23] <kolibrie> src/Prim.hs:76:

[11:23] <kolibrie>     Could not deduce (Floating a) from the context (Num a)

[11:23] <kolibrie>       arising from use of `atan' at src/Prim.hs:76

[11:23] <autrijus> Alias_: pugs uses the structure of wiki :)

[11:23] <autrijus> for committers.

[11:23] <kolibrie> I'm getting this error on 'make':

[11:23] <autrijus> it seems to have worked.

[11:23] <kolibrie> src/Prim.hs:76:

[11:23] <kolibrie>     Could not deduce (Floating a) from the context (Num a)

[11:23] <kolibrie>       arising from use of `atan' at src/Prim.hs:76

[11:23] <kolibrie> src/Prim.hs:76:

[11:23] <kolibrie>     Could not deduce (Floating a) from the context (Num a)

[11:23] <kolibrie>       arising from use of `atan' at src/Prim.hs:76

[11:23] <autrijus> er.

[11:23] <Alias_> autrijus: pugs isn't important enough yet :)

[11:23] <autrijus> Alias_: neither is freepan :)

[11:23] <autrijus> I don't see a "atan".

[11:23] * autrijus syncs

[11:23] <Alias_> Sure, but you can easily tighten up the commit bits later

[11:24] <Alias_> Don't sommit to an architecture you can't control

[11:24] <Alias_> err commit

[11:24] <autrijus> talk to ingy not me :)

[11:24] <Alias_> The current structure of CPAN is ok, but the database and PAUSE itself are a mess

[11:24] <_metaperl> oh tath is my fault

[11:24] <autrijus> kolibrie: fixing

[11:24] <_metaperl> kolibrie, that is my fault

[11:25] <kolibrie> autrijus: thanks - and sorry I pasted that so many times, my buffer was stuck

[11:25] <autrijus> _metaperl: oh ok. will you fix it?

[11:25] <_metaperl> perlfunc has atan2

[11:25] <autrijus> _metaperl: basically don't use op2Numeric for Floating

[11:25] <autrijus> or you'd like me to do ti?

[11:25] <autrijus> it

[11:25] <_metaperl> i used op1Numeric

[11:25] <autrijus> right. same

[11:26] <autrijus> I fixed it.

[11:26] <kolibrie> autrijus: thanks for fixing the darcs repo, too.  Weird that "-r ." wasn't working

[11:29] <autrijus> _metaperl: (**) is not op1.

[11:29] <autrijus> anyway, committing

[11:29] <autrijus> please fix ** yourself :)

[11:29] <_metaperl> oh

[11:29] <autrijus> remember to make before commit :)

[11:30] <_metaperl> ok I will see what it is

[11:30] <_metaperl> ok

[11:30] <_metaperl> the bad ting about Haskell is I cannot grep for "sub op1Numeric" to find the definition of the function

[11:31] <autrijus> ^op1Numeric

[11:31] <autrijus> is much better.

[11:31] <_metaperl> ah yes

[11:33] <_metaperl> now I have merge conflicts

[11:34] <_metaperl> I want to just get the current repository version.it looks like you fixed it

[11:35] <gaal> useful Haskell resource: http://www.zvon.org/other/haskell/Outputglobal/index.html

[11:36] <_metaperl> paste?

[11:36] <gaal> perlbot nopaste

[11:36] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[11:36] <_metaperl> that thing isn't working for me

[11:36] <_metaperl> i'm using a different one

[11:36] <autrijus> &

[11:37] <gaal> works fine here, _metaperl. are you setting the channel?

[11:37] <_metaperl> yes, maybe firefox is having issues

[11:37] <_metaperl> anyway, my Prim.hs is borked

[11:37] <_metaperl> http://pastebin.com/262508

[11:37] <jabbot> pugs - 1130 - * fix building for math funcs

[11:37] <jabbot> pugs - 1129 - Config is now a FiniteMap; elaborate -V 

[11:37] <jabbot> pugs - 1128 - hopefully fixed atan issue

[11:37] <jabbot> pugs - 1127 - let script/pugscc know $ENV{GHC}

[11:38] <_metaperl> i'm removing Prim.hs and doing svn update

[11:38] <_metaperl> hallelujah.

[11:38] <_metaperl> back to normal

[11:45] <autrijus> tsee: it's fixed a few mins ago

[11:45] <autrijus> svn up?

[11:57] <gaal> if i'm in the middle of a list definition in haskell:   [ "1", "2", "3", >>I am here<<, "6", 7" ] -- what functional expression can replace '>> I am here<<' with several elements?

[11:58] <malaire> do you mean a sublist or what?

[11:59] <gaal> i don't want [ 1, 2, 3, [ 4, 5 ], 6, 7 ]

[11:59] <gaal> i want [ 1, 2, 3,4 , 5, 6, 7]

[12:00] <nothingmuch> gaal: [ "1", "2", "3" ] : (foo) : [ "6", "7" ]?

[12:00] <malaire> probably ++ not :

[12:00] <malaire> [1,2,3] ++ [4,5] ++ [6,7,8]

[12:01] <gaal> instead of [4,5] i have someFunc

[12:01] <nothingmuch> err, right

[12:01] <nothingmuch> malaire++

[12:01] <nothingmuch> no, it is also broken

[12:01] <nothingmuch> in my example you'd have to concat all that

[12:01] <malaire> [1,2,3] ++ someFunc ++ [6,7,8]

[12:01] <malaire> [1,2,3] ++ (someFunc with args) ++ [6,7,8]

[12:01] <gaal> [1,2,3] ++ (someFunc params) ++ [6,7] ok?

[12:01] <nothingmuch> yup

[12:01] <gaal> thanks, malaire++ :)

[12:02] <gaal> if i weren't allowed to throw in the ] and [, i'd have had no other way of doing it?

[12:02] <nothingmuch> well, you could splitAt the initial list

[12:02] <nothingmuch> twice

[12:02] <nothingmuch> and then concat it

[12:03] <nothingmuch> but that's probably not what you mean 

[12:03] <gaal> right 

[12:03] <nothingmuch> syntatically it doesn't make sense in the same way

[12:03] <nothingmuch> because every single thing inside a [] is a single element

[12:03] <nothingmuch> and every function returns a single element

[12:03] <nothingmuch> which could be a list

[12:03] <gaal> i guess i was looking for @{ }

[12:04] <nothingmuch> i don't there is such a concept in haskell

[12:04] <gaal> k

[12:04] <nothingmuch> you could foldr with a weird unwrapping ++ sort of thing

[12:04] <nothingmuch> to make [1, 2, 3, [4, 5], 6, 7] into [1 .. 7]

[12:05] <gaal> nah nah

[12:05] <gaal> i was just cleaning up my first haskell code

[12:11] <gaal> should we expose the Config data as %?CONFIG ? (why not? but it's not specced)

[12:12] <nothingmuch> larry has some weird ideas about that, i think

[12:17] <gaal> interesting, yes: http://groups-beta.google.com/group/perl.perl6.language/msg/5b4cf83a4c6e3f5f?q=perl.perl6.language+config&lr=&rnum=2

[12:17] <jabbot> pugs - 1131 - Ported URI::Find 0.15 and URI::Find::Sch

[12:26] <Jouke> for one who hasn't used subversion before and just installed svk... how do I checkout pugs?

[12:27] <gaal> http://pugs.kwiki.org/?FrequentlyAskedQuestions svn co http://svn.openfoundry.org/pugs

[12:27] * gaal isn't using svk though

[12:29] <Jouke> checking out now :)

[12:29] <Jouke> thx

[12:34] <Jouke> step 2: installing GHC :)

[12:34] <gaal> :) get version 6.4

[12:37] <Jouke> yup....was downloading that one

[12:37] <jabbot> pugs - 1132 - cleanup

[12:45] <dada> hi Jouke!

[12:47] <jabbot> pugs - 1134 - Ported URI::Find::Simple 0.7 (complete w

[12:47] <jabbot> pugs - 1133 - do we like point-free?

[12:48] <Jouke> hey dada

[12:48] <Jouke> have you ported Win32::API already dada? ;-)

[12:48] <dada> Jouke: errm...

[12:49] <Jouke> if you won't, I probably will after Win32::OLE

[12:49] <dada> oh, but Win32::API will probably die

[12:49] <dada> GHC has its own FFI library, and parrot too

[12:50] <Jouke> right, but that needs some Inline Haskell still I guess

[12:50] <dada> yes, but you can pack that Inline as a module, rather than rewriting Win32::API

[12:51] <dada> actually, I don't think pugs expose such functionalities

[12:52] <dada> are you really trying to implement Win32::OLE in pugs?

[12:52] <Jouke> I'll try to mimick the behaviour, probably mostly using Inline stuff to Haskell

[12:52] <Jouke> by using the same API, porting stuff will be much easier

[12:53] <dada> but

[12:54] <dada> I wouldn't spend *too* much time on it

[12:54] <dada> parrot has NCI, which will probably be _the_ way to write XS-like stuff in Perl6

[12:54] * Jouke will look at that

[12:55] <Jouke> damn...I first chose to get all revisions, which took too long, so I pressed ctrl-c, and now I can't check out anything anymore

[12:57] *** cnhackTNT|away is now known as cnhackTNT

[12:57] <Jouke> ahh...fixed

[12:58] <nothingmuch> oh my

[12:59] * nothingmuch is really ashamed of himself

[12:59] <nothingmuch> but we have little sup links to tests with regex skips

[13:02] <theorbtwo> Mornin.

[13:06] <nothingmuch> hola theorbtwo 

[13:06] <nothingmuch> html question:

[13:06] <nothingmuch> i have a <pre>

[13:06] <Jouke> mmm....win32 ghc doesn't have a ghc executable ... and thus pugs won't build... any ideas?

[13:06] <nothingmuch> which contains a table

[13:06] <nothingmuch> in the syns

[13:07] <nothingmuch> and i'm putting little <sup> links in there

[13:07] <nothingmuch> how would i cause it not to break the formatting too much?

[13:07] <theorbtwo> pre can't contain anything but text, by definition.  You'd have to end the pre, put in the sup, and close the pre.

[13:07] <nothingmuch> it does work

[13:07] <jabbot> pugs - 1135 - Continued porting MIME::Lite, now pendin

[13:07] <theorbtwo> (tt, OTOH, can contain anything...)

[13:07] <nothingmuch> i don't care about validity yet

[13:07] <nothingmuch> hmm

[13:08] <nothingmuch> so basically we want to have better syn htmls

[13:08] <Jouke> ah, never mind

[13:08] <nothingmuch> theorbtwo: is your SEE ok?

[13:08] <nothingmuch> i would like you to look over the sup insertion code

[13:09] <theorbtwo> No, my emulator is completely messed up, and seemacs isn't anywhere close to usable yet.

[13:10] <nothingmuch> either way, generating backlinked HTML for now

[13:10] <nothingmuch> bummer

[13:10] <nothingmuch> as a preview

[13:10] <nothingmuch> well, i'll do my best to clean it up, and then check in

[13:10] <theorbtwo> Great!

[13:10] <theorbtwo> Hm, can you upload some HTML somewhere for me to take a look at?

[13:10] <nothingmuch> yes, that's what i meant

[13:11] <theorbtwo> Oh, also, generating <a name>s in the test HTML would possibly be nice, so I could make the test runner link to them.

[13:11] <nothingmuch> test runner?

[13:11] <theorbtwo> Er, <a name>s from the test numbers or names.

[13:11] <nothingmuch> the top part of catalog_tests?

[13:11] <nothingmuch> i'll do that

[13:12] <theorbtwo> util/testgraph.pl

[13:12] <theorbtwo> One thing at a time, though!

[13:12] <nothingmuch> ah

[13:12] <nothingmuch> we'll have to rethink the 0+$link id generation thing though

[13:12] <theorbtwo> Not really; no OS I know of uses page 0 for user links, so the two won't collide.

[13:13] <nothingmuch> that's not what i mean

[13:13] <Jouke> does this error from nmake.exe make any sense to anyone:

[13:14] <Jouke> makefile(413) : fatal error U1087: cannot have : and :: dependents for same target

[13:14] <Jouke> Stop.

[13:14] <nothingmuch> there's no way to determine where to link from testgraph.pl without knowing what the link will be

[13:14] <nothingmuch> or looking

[13:14] <nothingmuch> so we could use sequences

[13:14] <nothingmuch> or something else

[13:14] <nothingmuch> we'll see

[13:14] <dada> Jouke: which nmake?

[13:14] <Jouke> 1.5

[13:14] <theorbtwo> That's what I said -- test numbers or test names.

[13:15] <Jouke> perl Makefile.PL detected I hadn't installed nmake yet, so it fetched it for me, then 'nmake' spit this out

[13:15] <nothingmuch> i think testgraph should link to the test file

[13:15] <nothingmuch> ah

[13:15] <nothingmuch> that doens't map

[13:15] <nothingmuch> run <-> code is not necessarily consistent

[13:15] <nothingmuch> anyway, later 

[13:15] <nothingmuch> halting problem and all that ;-)

[13:15] <nothingmuch> nothingmuch.woobling.org/pugs_test_status/

[13:15] <nothingmuch> search for 't:

[13:15] <nothingmuch> S02 has quite a few

[13:16] <gaal> nm, to2: question about the harness.

[13:16] <gaal> i want to capture stderr

[13:16] <gaal> so that if a test blows up hard, the info is at least stored somewhere.

[13:16] <gaal> (we already report diag())

[13:17] <gaal> but unfortunately this isn't captured by T:H:Straps

[13:17] <gaal> it isn'

[13:17] <gaal> t hard to hack up,

[13:17] <gaal> but has to be inside a long function. so my question...

[13:18] <gaal> patch Test::Harness locally? talk the Test::Harness people to apply my patch?

[13:19] <theorbtwo> Hmm, both?

[13:19] <gaal> what does it mean that T:H is in inc and not in ext/ ?

[13:19] <theorbtwo> ext is perl6 modules that we consider "core"; inc is perl5 modules needed to install pugs.

[13:20] <theorbtwo> (modules is perl6 modules that we don't consider "core", but don't yet have a better place to put.)

[13:20] <nothingmuch> theorbtwo: how would you express a range of content, in HTML::Element?

[13:21] <gaal> okay, q#2 then. i said "not hard to hack up", but i meant that i either depend on Test::Output for it, or slap on the part of Test::Output (T:O:Tie, really) that i need. Test::Harness being such an important module, i expect they wouldn't want to add a dep, but this is feature creep

[13:21] <theorbtwo> nm, I could have sworn that that wouldn't work, but it looks like it does.  As to breaking layout, I guess just rely on the person writing the link...

[13:21] <gaal> why do we need a p5 test::harness, actually?

[13:21] <theorbtwo> It's not really feature creep...

[13:22] <gaal> by the time we run the tests, we have p6

[13:22] <theorbtwo> Is pugs up to porting it?

[13:22] <Jouke> ah, don't try to install it in a directory containing spaces

[13:22] <nothingmuch> i could also s/\ {$num_of_chars_in_sub}\ //;

[13:22] <nothingmuch> out of the next bit of text

[13:22] <nothingmuch> but i don't want to do that yet

[13:23] * nothingmuch wants the synopses to have proper <divs>

[13:23] <gaal> how ready are the file io and redirection bits? i don't know t:h intimately - yet - but that's basically the hard stuff.

[13:24] <gaal> hmm, there's also platform stuff like Win32::GetShortPathName

[13:24] *** cnhackTNT is now known as cnhackTNT|away

[13:24] <gaal> so maybe pugs isn't up to it quite yet.

[13:25] <theorbtwo> Oh, pre doesn't have quite the semantics I thought it did.

[13:25] <gaal> that is, pugs is, but there are deps

[13:25] <scw> Wow, my pugs core dumped

[13:25] <theorbtwo> scw: OS, arch, GHC version?

[13:26] <theorbtwo> (We no longer support 6.2.2.)

[13:26] <scw> theorbtwo: Linux 2.6, i386, GHC 6.4

[13:26] <theorbtwo> Hm, odd.

[13:26] <scw> theorbtwo: Using shell of pugs and type '? say 12'

[13:28] <theorbtwo> Segfaults for me too.

[13:29] <scw> Err, what's up..

[13:29] <theorbtwo> Odd, ./pugs -e '? say 12' doesn't give a syntax error.

[13:30] <scw> no, '?' cast the result to boolean and say returns true?

[13:30] <theorbtwo> D'oh!

[13:31] *** Lynx_awy is now known as Lynx_

[13:33] <scw> But ? at the first charactor of the shell command should mean "evaluate the perl 6 expression and give me the debug info!"

[13:33] <theorbtwo> I know, scw.

[13:35] * Jouke is unable to build pugs with perl5 embedded :( no more time now, gotta work for $$$

[13:36] <Jouke> later people!

[13:49] <theorbtwo> Eeep: Can't use an undefined value as a HASH reference at util/yaml_harness.pl line 88, <FILE> line 2.

[13:50] <theorbtwo> 		$self->latest_event->{diag} .= $line if $Test::Harness::Verbose;

[13:50] <gaal> what test?

[13:50] <theorbtwo> t/examples/examples.t

[13:50] <gaal> i was afraid that might happen :)

[13:51] <gaal> but couldn't find sometihng that did it. apparently the test is dying early

[13:51] <gaal> hold on, i'll fix it

[13:52] <theorbtwo> Oh, looks like I need to make testgraph do something sane with non-test events.

[13:52] <gaal> yes, the fix i'm doing now is exactly for when that happens.

[13:53] <theorbtwo> Ah, yeah, the first line after the plan is "# Running under linux".  Are you going to put that on the top level, next to the filename of the t file?

[13:54] <gaal> yes, as diag elem in a node that isn't a test

[13:54] <theorbtwo> Oh, so not what I was thinking.

[13:54] <gaal> hmm, why does this still not break on my machine?

[13:54] <theorbtwo> Hmm... yeah, I think I see how to do it.

[13:55] <gaal> ah, of course, i wasn't -v'ing. silly me.

[13:55] <gaal> wait, you prefer it one node up the hierarchy?

[13:55] <gaal> i can do that too.

[13:56] <theorbtwo> No, actually, the way you were going to do it is better.

[13:56] <gaal> easier for me too :) one sec

[13:57] <jabbot> pugs - 1136 - Ported Email::Envelope 0.01 (complete wi

[13:58] <gaal> r1137 fixes it.

[14:07] <stevan> wow,.. iblech is going crazy!!!!

[14:08] <stevan> morning all

[14:08] <gaal> hey stevan!

[14:08] <stevan> hey gaal

[14:08] <stevan> I need to catch up to you guys on the yaml thing 

[14:09] <gaal> there's plenty more metadata now, and i'm wokring on catching stderr from dying scripts

[14:09] <stevan> autrijus++ # for adding $1 support to s:perl5

[14:09] <gaal> theorbtwo is ever making the html better

[14:09] <stevan> gaal: maybe we should fix those scripts to either just fail() or use eval

[14:09] <stevan> gaal++

[14:09] <stevan> theorbtwo++ 

[14:10] <gaal> nothingmuch said he'll work on the db+server side of this, but wanted to consult you for aggregation

[14:10] <nothingmuch> display, mostly

[14:10] <stevan> yes I saw that

[14:10] <stevan> nothingmuch: what did you have in mind?

[14:11] <nothingmuch> what I think would be cool:

[14:12] <nothingmuch> we have synopses, with links to tests

[14:12] <nothingmuch> we have tests, with links to synopses

[14:12] <nothingmuch> and with notes at the end of the line

[14:12] <nothingmuch> for pass, or fail

[14:12] <nothingmuch> with the number of the case

[14:12] <nothingmuch> in color

[14:12] <nothingmuch> like: todo_ok(blah blahb blah)    1, 4, 5

[14:12] <nothingmuch> the numbers are the cases, and they have the color codes

[14:12] <nothingmuch> then i'd like the graph to link to the line

[14:13] <stevan> so 1 is fail, 4 is pass and 5 is todos?

[14:13] <nothingmuch> as for smoked display

[14:13] <stevan> like that?

[14:13] <nothingmuch> i don't understand

[14:13] <nothingmuch> lets say the TAP outputed

[14:13] <nothingmuch> ok 1 (file.t at blah, column x)

[14:13] <nothingmuch> (i have a patch to Test.pm that does that if an env var is set)

[14:14] <nothingmuch> it will place a green 1 after line blah

[14:14] <gaal> stevan, re:fail/eval for dying tests: the problem is hard parsefails. maybe we shouldn't have any, but if they do happen, of course we'd like to know the error

[14:14] <nothingmuch> in the htmlized test

[14:14] <stevan> gaal: we can probably just use fail() and comment out the hardparsefail

[14:15] <stevan> nothingmuch: I understand now

[14:15] <stevan> (I think)

[14:15] <gaal> the author of the test could.. but what if it's not a parsefail for him, or wasn't when the test was written?

[14:16] <nothingmuch> gaal: then someone will commit a fix, i think

[14:16] <stevan> gaal: i think if it parsefails for me, it is very likely to parsefail for you

[14:16] <gaal> but what if it passes for you in r1000, but somebody b0rked it in r2000?

[14:17] <stevan> this brings me to my other idea

[14:17] <stevan> :)

[14:17] <nothingmuch> then r2000+x should fix it

[14:17] <gaal> :)

[14:17] <stevan> I made up that TODO list the other day foro autrijus 

[14:17] <stevan> i am sure it is out of date again

[14:17] <stevan> with all our test parsing

[14:17] <stevan> it would be nice to be able to create that TODO list automagically

[14:17] <jabbot> pugs - 1137 - handle diag messages occurring before an

[14:17] * nothingmuch really wants $?SUB in p56

[14:17] <stevan> if only just to provide a short list of failing testing and files

[14:17] <nothingmuch> s/6$//

[14:18] <gaal> grep -r todo_ t     ? :)

[14:18] <stevan> gaal: we un-TODOed them

[14:18] <stevan> they fail now

[14:18] <stevan> TODO is only for unimplemented features

[14:18] <gaal> so i'm not sure i understand

[14:19] <gaal> you want to retodo them because they were intenionally broken e.g. for a reimplementation?

[14:19] <stevan> no

[14:19] <stevan> all the failing tests serve as a TODO list

[14:20] <stevan> of things which should work, but dont

[14:20] <gaal> so far so good :)

[14:20] <stevan> I would like to use the YAML harness to generate a file (or email or something) 

[14:20] <stevan> which would list each file which had failures in it

[14:20] <stevan> use nothingmuch

[14:21] <stevan> 's patch to Test.pm

[14:21] <stevan> and list the line numbers for each failed test

[14:21] <gaal> actually the yaml should have a todo attrib on tests whether in verbose mode or not

[14:21] <stevan> so whenever anyone says "is there a TODO list??"

[14:22] <stevan> we can say "run the util/make_todo_list.pl"

[14:22] <stevan> or something like that

[14:22] <gaal> right. that's easy on my side of things. yuval, is your coordinate patch in?

[14:22] <scw> theorbtwo: seems the '?' in interactive mode has been renamed to '!'? It give me the result I want.

[14:22] <stevan> gaal: re: being easy; thats what I was hoping you would say :)

[14:22] <gaal> :)

[14:23] <stevan> I think I am going to write up a modules/README too 

[14:23] <stevan> autrijus mentioned it

[14:23] <stevan> and maybe have a chat with our mad porter :)

[14:24] <stevan> and get him to write a How-To

[14:24] <theorbtwo> :h lists both.

[14:25] * nothingmuch wants a mad prefix

[14:26] <gaal> does TAP define /# TODO/, or is that an ad-hoc way of telling a test is todo?

[14:26] <nothingmuch> it does

[14:27] <gaal> in that case

[14:27] <nothingmuch> it's like skip

[14:27] <gaal> svn up :)

[14:27] <jabbot> pugs - 1139 - todo property on todo tests.

[14:27] <nothingmuch> gaal: yaml thing

[14:27] <jabbot> pugs - 1138 - * Added test for the Proxy object.

[14:27] <gaal> nothingmuch, the mad prefix

[14:28] <nothingmuch> it should not have -v

[14:28] <nothingmuch> that should be the default

[14:28] <nothingmuch> yaml is data, not display

[14:28] <nothingmuch> and as much as possible of it should be available

[14:28] <gaal> true.

[14:29] <gaal> since typeglobs have gone away, perhaps you can use their ol' sigil, *nothingmuch.

[14:30] <nothingmuch> no

[14:30] <nothingmuch> that does not imply what i do,

[14:30] <nothingmuch> unless i'm 'the mad splatter'

[14:30] <nothingmuch> and i don't know what it does

[14:30] <gaal> no, the prefix itself is mad.

[14:31] <gaal> which is what you said you wanted. :p

[14:31] <nothingmuch> ok, i'll rephrase

[14:31] * nothingmuch wants to be called 'the mad %s', where %s is filled in by some cool quality he has

[14:31] <nothingmuch> ;-)

[14:31] <theorbtwo> the mad tester?

[14:32] <nothingmuch> actually i haven't written tests all week

[14:32] <nothingmuch> bzzt!

[14:32] <stevan> I think "the mad %s" is good

[14:32] <nothingmuch> next please

[14:32] <nothingmuch> beh

[14:33] <stevan> the mad ADD driven jack of all trades with insomnia?

[14:33] <stevan> nothingmuch: face it,.. you un-classifyable

[14:33] <stevan> (which is a good thing IMO)

[14:33] <nothingmuch> beh, fine, what ever

[14:33] <nothingmuch> *sob8

[14:34] * nothingmuch just can't find a clean way to do what he wants to HTML

[14:34] <nothingmuch> it's such a crappy format

[14:34] <gaal> you don't say :)

[14:34] <stevan> nothingmuch: let me try, i used to do HTML for a living

[14:35] <nothingmuch> stevan: see?

[14:36] <stevan> uhm

[14:36] <stevan> yeah let me re-install

[14:36] <nothingmuch> okay

[14:36] <theorbtwo> So did I; that simply leaves me with more creadance to say it's a bad format.

[14:36] <larsen> find ./ | xargs mail yoursister

[14:36] <larsen> oops 

[14:36] <stevan> ooh I can just run it off the dmg :)

[14:37] <larsen> sorry. wrong window

[14:37] <xerox> ahah

[14:37] <jabbot> pugs - 1140 - always be verbose

[14:38] <stevan> theorbtwo: I totally agree, however, in a sick way I like HTML

[14:38] <stevan> or at least parts of it

[14:38] <nothingmuch> theorbtwo: how do i get all the text content out of a HTML::Element tree?

[14:38] <stevan> nothingmuch: ready and waiting for see

[14:38] <theorbtwo> $tree->as_text;

[14:39] <nothingmuch> no, seperate

[14:39] <nothingmuch> i have a regex that matches $tree->as_text

[14:39] <nothingmuch> but does not match sub elems

[14:39] <nothingmuch> even though it really really should

[14:40] <nothingmuch> i'm trying to figure out who is at fault

[14:40] <nothingmuch> see://woobling.org

[14:41] <nothingmuch> stevan: i selected the icky part

[14:41] <stevan> ok

[14:41] <nothingmuch> the problem is that the if is not always working, when it shoul

[14:41] <nothingmuch> and i suspect the traversal is bad

[14:41] <nothingmuch> i think the next step is to rewrite it

[14:41] <nothingmuch> and not use ->traverse

[14:42] <nothingmuch> since the docs say it's bad anyway

[14:42] <nothingmuch> brb

[14:47] <jabbot> pugs - 1141 - Ported Algorithm::TokenBucket 0.2 (compl

[14:55] <theorbtwo> Oh, updated testgraph as r1143

[14:55] <theorbtwo> Forgot I hadn't uploaded it yet...

[14:57] <jabbot> pugs - 1143 - testgraph updates

[14:57] <jabbot> pugs - 1142 - Port of Algorithm::FloodControl 1.00 (co

[14:58] <gaal> yaml_harness's -v is retired; should it default '-o tests.yml -r t/' ?

[14:59] <gaal> ... -X Disabled     ?

[15:00] <theorbtwo> I think so.

[15:00] <theorbtwo> (Change testgraph to defualt to tests.yml instead of .yaml if you do.)

[15:01] <gaal> heh - i didn't realize you were using that :)

[15:01] <gaal> i'm saying .yml simply because that's what i saw on META.yml

[15:02] <schoch> autrijus you around

[15:02] <theorbtwo> Shrug.  This stuff is the first time I've ever used yaml.

[15:11] <gaal> gotta go for ~5hrs

[15:11] <gaal> bye&

[15:17] <jabbot> pugs - 1145 - forgot -X

[15:17] <jabbot> pugs - 1144 - better defaults for yaml stuff

[15:18] <nothingmuch> stevan: i have a small bug

[15:18] <nothingmuch> ci in 5 mins

[15:18] <stevan> ok

[15:18] <nothingmuch> the greedy <sub> appending is broken

[15:33] * theorbtwo pings autrijus.

[15:33] <schoch> anyone interested in a perl6 book developed in wiki?

[15:34] <theorbtwo> perlbot, seen autrijus?

[15:34] <jabbot> theorbtwo: autrijus was seen on Fri Mar 25 19:45:27 2005

[15:36] <PerlJam> schoch: Are you writing one or are you looking for some other kind of interest?

[15:37] <schoch> i'm interested in starting to hack up some perl6 but there isn't a good beginner guide, i read someone wrote a book with wiki and it worked out well

[15:37] <schoch> i suppose i'm thinking out loud a bit

[15:37] <jabbot> pugs - 1147 - Ported Algorithm::MarkovChain 0.06 (comp

[15:37] <jabbot> pugs - 1146 - eval{} -> try{}, not catch{}. Fixed.

[15:37] <schoch> but it would be nice

[15:37] <stevan> schoch: that is Scott Walters

[15:38] <stevan> schoch: he wrote Perl6 Now

[15:38] <schoch> ahhh, memory failed me on what the book was

[15:38] <stevan> and the wiki you are thinking of is http://www.perldesignpatterns.com (i think)

[15:39] <schoch> ya something like that but more pedestrian

[15:40] <schoch> and free

[15:40] <stevan> schoch: perldesignpatterns is free

[15:40] <schoch> PN6 isn't though

[15:40] <stevan> you could start here http://pugs.kwiki.org

[15:41] <stevan> make a "intro to perl6

[15:41] <stevan> page

[15:41] <ninereasons> seems like wiki is a good way to write a "beginners book" about a language that's still in gestation

[15:41] <schoch> i need to cut my teeth on the language a bit first :)

[15:42] <stevan> schoch: I recommend the synopsis

[15:42] <stevan> reading them that is

[15:42] <theorbtwo> I recommend the exgeises as well.

[15:43] <schoch> ya, i've taken a vacation from coding for about 6 months but reading all the developments has my attention.  

[15:47] <schoch> where does the wiki live?  it is a bit slow

[15:47] <stevan> schoch: I have no idea

[15:48] <schoch> fennel.oreillynet.com interesting

[15:49] <theorbtwo> pugs.kwiki.org

[15:57] <jabbot> pugs - 1149 - removing the author list from t/README, 

[15:57] <jabbot> pugs - 1148 - adding a modules/README

[16:09] <Corion> re

[16:17] <jabbot> pugs - 1151 - Backlink fixes.

[16:17] <jabbot> pugs - 1150 - Ported most of Algorithm::NaiveBayes 0.0

[16:18] <stevan> iblech++ # << the man is INSANE

[16:18] <stevan> iblech, if you are listening, email me

[16:18] <stevan> please :)

[16:23] <chip> who's doing all these ports anyway?

[16:25] <stevan> iblech

[16:25] <masak> :)

[16:25] <stevan> he is doing like 5+ a day

[16:27] <jabbot> pugs - 1152 - Started a "How to port Perl 5 modules to

[16:27] <stevan> nice

[16:30] <stevan> that last commit was the HOWTO i asked him to write :)

[16:30] <stevan> iblech++

[16:30] <stevan> iblech++

[16:30] <stevan> iblech++

[16:31] <stevan> schoch: if you are looking to learn perl6, in particular the OO stuff, I would look at iblech's work and modules/PORTING_HOWTO

[16:35] <Corion> 110/2935 subtests failed on Win2k on 1152

[16:35] <Corion> ... maybe I should set up an hourly smoke for Pugs/Win2k :)

[16:35] <stevan> Corion: sounds about right

[16:36] <stevan> Corion: nothingmuch, gaal, theorbtwo and working on some smoke testing stuff

[16:37] <Corion> stevan: Ah - cool. My "smoke testing" stuff would mostly consist of C<< svn up; nmake clean && perl Makefile.PL && nmake test > log >>  and some POE::Irc magic to send a new message about it :)

[16:37] <Corion> ... but if others implement it for me, all the better :)

[16:37] <stevan> Corion: they are working on something using YAML output from Test::Harness

[16:38] <Corion> stevan: Ah. Well - I would just run everything under TEST_VERBOSE, but I guess they also want to improve coverage/blame

[16:38] <stevan> I think that is part of the idea

[16:38] <stevan> I was in on it earlier, but have not been keeping up in the current plans

[16:39] <stevan> my $work got in the way

[16:40] <Corion> In theory, my openfoundry.org login should work for svn too, shouldn't it?

[16:40] <schoch> stevan thanks for the pointer

[16:40] <stevan> Corion: I have no idea

[16:40] <stevan> schoch: no problem

[16:40] <Corion> stevan: You're no committer?

[16:40] <stevan> schoch: reading the tests is also a good thing

[16:41] <stevan> Corion: I am, but I have been for a while, and to be honest I dont remember ever using a login for svn

[16:41] <Corion> stevan: Ah :)

[16:41] <stevan> try it,.. if it doesnt work, let me know

[16:41] <Steve_p> Corion, you have to have a loging the first time you commit

[16:42] <Steve_p> s/loging/login/

[16:42] <stevan> after that it never asks again ( did I mention how much I love SVN )

[16:42] <Corion> Steve_p: Yeah, except that it doesn't seem to work. But I'm now checking out the tree with my credentials, and maybe that is the magic I've been missing it :)

[16:43] <Steve_p> You don't need the password to checkout :)

[16:44] <Corion> Steve_p: But I need it for commit, but it still doesn't work. Oh well.

[16:44] <stevan> Corion, what is your openfoundry login>

[16:45] <Corion> stevan: corion

[16:45] <stevan> I am not seeing you on the list http://rt.openfoundry.org/Foundry/Project/?Queue=270

[16:46] <theorbtwo> Odd...

[16:47] <theorbtwo> Corion, did you do the registration process from the email?

[16:47] <theorbtwo> You still show with no username and status=unregistered from the admin screen.

[16:47] <Corion> theorbtwo: Yes, I did (I can even log in)

[16:47] <jabbot> pugs - 1153 - Finished porting Algorithm::NaiveBayes 0

[16:47] <stevan> Corion: you are listed as unregistered in the admin

[16:47] <Corion> Weird. I'll register again

[16:47] <stevan> for [email@hidden.address]
[16:48] <Corion> I have the "registration complete" email here. Aaaah - but I changed the email to [email@hidden.address] - that was my error I think!

[16:48] <Corion> [email@hidden.address] that is, even ...

[16:48] <theorbtwo> Oh, then I'll add that user to pugs.

[16:49] <stevan> theorbtwo: I got it, I am right htere

[16:49] <Corion> theorbtwo: I'm sorry for the confusion there - I didn't know the email address was tied to anything other than the point of contact :)

[16:49] <theorbtwo> Already done.

[16:49] <stevan> ok Corion try now

[16:49] <Corion> Yay! Thanks all! :)))

[16:50] <theorbtwo> Oh, well, apparently we both did it, but he is listed as a user now.

[16:50] <theorbtwo> Cool.  Put yourself in AUTHORS, please.

[16:50] <stevan> theorbtwo: its a John Woo moment

[16:50] <Corion> r1154, already done :)

[16:50] <theorbtwo> Nifty.

[16:50] <Corion> I guess putting oneself into the AUTHORS file is the intelligence test that everybody needs to pass when becoming committer :)

[16:51] <Corion> I want to add a subdirectory to t/ called "pugsrun" (like "perlrun"), in which I place my todo_is tests for the command line options (-e , -p and -n ) - any better ideas ?

[16:52] <theorbtwo> Not really.

[16:52] <stevan> sounds good to me

[16:52] <theorbtwo> Test also echo "? 12" | pugs, if you can figure out how.

[16:53] <Corion> theorbtwo: I cribbed most of the test set up from t/examples/examples.t, which uses system() and output redirection, which is OK at the moment I think

[16:57] <Corion> Ooops. Committed before doing a make test run ...

[16:57] <jabbot> pugs - 1155 - Added todo tests for multiple -e argumen

[16:57] <jabbot> pugs - 1154 - Added CORION to AUTHORS

[17:01] <chip> Perl6::Subs is on PAUSE (yay!) but hasn't propagated to CPAN just yet (boo!)

[17:01] <chip> anybody who wants it, msg me your address and I'll mail it

[17:02] <stevan> chip++

[17:04] <theorbtwo> chip++ indeed

[17:04] * theorbtwo wonders...

[17:04] <chip> C< sub foo ($a of Int where { $_ > 0 }, SomeClass +$b is required, OtherClass +$c) { ... } >

[17:05] <chip> yes, that works today

[17:05] <theorbtwo> Can it be used to progmatically generate signatures for funky things, like operators?

[17:05] <theorbtwo> C< sub circimfix:{'>><<'} ($a, $b is Operator, $c) { ... } > ?

[17:06] <chip> heh.  This is a Perl 5 source filter, so it can only implement the features that work in Perl 5

[17:06] <theorbtwo> Oh.

[17:07] <chip> I can imagine an extension of it where you can define operators and P6::Subs can create mangled names and generate the C<use overload> statement for you, though.

[17:07] <chip> theorbtwo: For example, you can have optional parameters or named parameters, but not both

[17:07] <theorbtwo> Hmm, that should be possible with p5... shouldn't it?

[17:07] <chip> optional-positional, rather.  Named parameters come in optional and required flavors.

[17:08] <chip> theorbtwo: where do you start grabbing pairs?

[17:08] <theorbtwo> Oh, but you can't figure out if it was foo => 'bar', or 'foo', 'bar'.

[17:08] <theorbtwo> Gotcha.

[17:08] <chip> yeah

[17:08] <chip> on the other hand, you can have named params with a slurpy hash for others, if you're inclined.

[17:09] <chip> method new ( $class: +$name, *%opts ) {}     is pretty much like    sub new { my ($class,%args) = @_; my $name = delete $args{name}; ... }

[17:12] <Corion> Ooops - in (current) Pugs, is C<< my @examples = ('foo bar', 'baz bar'); >> a syntax error?

[17:16] <theorbtwo> It shouldn't be...

[17:16] <theorbtwo> Works for me.

[17:17] <theorbtwo> H, util/yaml_harness.pl was missing a ;... naughty people, checking in without running it first!

[17:17] <jabbot> pugs - 1156 - * Beginning of a Pugs Class Metamodel, c

[17:19] <autrijus> mugwump++ # class metamodel.

[17:19] <autrijus> metametamodel, really.

[17:19] <stevan> very nice

[17:20] <theorbtwo> Hmm, actually, has more problems then that... gaal?

[17:23] <Corion> 110/2938 subtests failed on Win2k/r1157

[17:24] <theorbtwo> Look at the end of the /topic, Corion.

[17:25] <Corion> Ooops.

[17:26] <Corion> Hmm - I found where my error was - and I think it's a bug in Pugs.

[17:27] <jabbot> pugs - 1158 - * Change poetry for Prim.hs because it's

[17:27] <jabbot> pugs - 1157 - Added TODO test for -p

[17:27] <pasteling> "Corion" at 217.86.56.202 pasted "Syntax error with list parsing and trailing commas" (12 lines, 262B) at http://sial.org/pbot/8614

[17:28] <autrijus> training comma is a known todo. :)

[17:28] <Corion> Autrijus: Ah - good that I didn't work on a test for that then :))

[17:31] <autrijus> check if one is there :)

[17:32] <Corion> autrijus: Yep - in t/data_types/array.t (where I should have checked first ...)

[17:37] <autrijus> that's fine :)

[17:37] <jabbot> pugs - 1159 - Ported File::Basename 2.73 (complete wit

[17:38] <autrijus> Jouke: you can do NCI and pugs will be able to inline that NCI into haskell.

[17:38] <autrijus> or you can do Haskell FFI and I'll make Parrot call it via NVINCI.

[17:38] <autrijus> they are isomorphic.

[17:39] <stevan> iblech is at it again

[17:39] <autrijus> journal up. zzz &

[17:54] <dada> bye all

[17:56] <chip> Say ... if I use Lexical::Alias, I could implement C<is rw>

[17:56] <chip> urqe, but not for named

[17:58] <schoch> hey autrijus 

[17:59] <schoch> just wanted to say par++, what a great tool 

[18:04] <chip> Anybody know if C<is ro> is supposed to be allowed on parametes?  It's redundant with the default, but still....

[18:05] <stevan> chip: i think it is, but dont quote me on it

[18:07] <theorbtwo> I think so too...

[18:09] <chip> OK

[18:10] <chip> Lexical::Alias rocks .. and it occurs to me that I could use it to spell arrays as C<Array @a> even in Perl 5, that's cool

[18:10] <chip> too many hacks, too little time

[18:22] <ninereasons> it doesn't seem right that it works to say "my %h=<a 1 b 2> ; my @a = %h; say @a.keys;"

[18:22] <ninereasons> if it's not going to work to say "my @a=<a 1 b 2> ; say @a.keys;"

[18:38] <theorbtwo> http://tcts.fpms.ac.be/synthesis/mbrola.html is pretty good, combined with festival.

[18:46] <theorbtwo> Oh, wrong chan.

[18:49] * nothingmuch wonders how good/bad would a list context join be

[18:49] <nothingmuch> join(",", 1 .. 2) -> (1, ",", 2, ",", 3)

[18:51] <Corion> nothingmuch: Isn't that C<< zip( "," x @list, @list) >> ? Not really needed IMO, and you can write it like that.

[18:51] * nothingmuch wonders if you can hyper pair

[18:51] <theorbtwo> I can't think of a shorter way to write it when just writing the join...

[18:51] <Corion> nothingmuch: But it's convenient if you're reimplementing the HTML generation of CGI.pm :)

[18:52] <nothingmuch> map { *$_ } (@list >>=> ",")

[18:52] <nothingmuch> but then you have the dangling "," that I want to avoid

[18:53] <nothingmuch> zip("," x (+@list - 1); @list);

[18:53] <nothingmuch> (note greater list comma, since it's multi dim)

[18:54] * theorbtwo still wants to know what's so bad about join(',', 1..10)

[18:54] <Corion> theorbtwo: That doesn't return a list :)

[18:54] <nothingmuch> and if it theoretically returns a list, i know at least my code will break

[18:54] <nothingmuch> i use join in list context a lot

[18:54] <nothingmuch> since i know it's always scalar

[18:55] <nothingmuch> then again, join could always be translated to ~join

[18:55] <theorbtwo> Oh, I see what you mean.

[18:55] <theorbtwo> You want to create a list such that when you join it with '', you get '1, 2, 3, 4'

[18:56] <theorbtwo> I'm thinking that you really don't want to do that.

[18:56] <stevan> hey naddamucho, Dah-Orb Numbah 2

[18:56] <nothingmuch> ?

[18:56] <theorbtwo> Having a good Good Friday, are ya?

[18:56] <stevan> File::Spec is done :)

[18:56] <theorbtwo> Stevan++

[18:56] <nothingmuch> yay

[18:56] <nothingmuch> stevan++

[18:56] <stevan> theorbtwo: not yet

[18:56] <stevan> I am running make test right now to make sure all is well

[18:57] <stevan> and I talked to the mysterious mr. iblech

[18:57] <stevan> he is going to direct some of his boundless energy on the t/oo stuff

[18:58] * nothingmuch hopes iblech is not wasting vacation time or something like that on computers

[18:58] <stevan> yes he is :)

[18:58] <theorbtwo> Implementing it, or completing the tests?

[18:58] <stevan> he said he is going skiing next week though

[18:58] <stevan> theorbtwo: writing tests for it

[18:58] <rgs> chip: there is an idea floating in the air, about implementing lexical aliases in perl 5.10

[18:58] <stevan> I figure he knows as much about perl6 OO as the Damian/larry now

[19:01] <stevan> you know one thing I love about perl6

[19:01] <stevan> with function signatures, writing docs becomes so much eaiser

[19:01] <stevan> its practically self documenting at times

[19:02] <rgs> that's java all over again !

[19:02] <rgs> sorry.

[19:02] <stevan> rgs: kinda :)

[19:03] *** khisanth_ is now known as Khisanth

[19:03] <rgs> the PORTING_HOWTO is cool

[19:05] <chip> rgs: I remember ... I was one of the pushers.  I proposed making C<\$a> an lvalue.

[19:05] <rgs> chip: aah. like this: my (\$alias) = \$variable;

[19:05] <chip> rgs: yeah

[19:05] <rgs> send tuits :)

[19:05] <chip> my ($a,$b) = \(@_)

[19:06] <rgs> er, missing \ ?

[19:06] <rgs> my \($a, $b) = \(@_)

[19:07] <jabbot> pugs - 1160 - Added tests for subtypes.

[19:07] <chip> oopsie.  yes

[19:10] <nothingmuch> what is a nice way to split a string into chunks

[19:10] <nothingmuch> with the splitting done on numeric offsets?

[19:11] <nothingmuch> @offsets = (2, 4, 7); "the quick brown" -> "th", "e ", "qui", "ck brown";

[19:12] <Corion> nothingmuch: Unpack ?

[19:12] <nothingmuch> with unpack i can do 'th, 'the ', 'the qui', etc with backtracks and a$offset

[19:12] <nothingmuch> ofcourse, i could do this in a loop

[19:13] <nothingmuch> for (my $i = 1; $i < @offsets; $i++){

[19:13] <nothingmuch> unshift @offset, 0 first

[19:13] <Corion> nothingmuch: Ah, now I see ... Well, you could convert this into a sorted list and then use the differences between the items as length items to A.

[19:13] <Corion> unpack will become soo much better as we have Unicode chars as templates for pack/unpack :)

[19:14] <Khisanth> U?

[19:14] <theorbtwo> Or, for that matter, with substr.

[19:14] <Corion> Anybody can tell me how I match (in Haskell) in the function signature against a Named Field of a parameter passed in

[19:15] <Corion> (I'm passing around a "hash" (constructed out of named fields), and I want to test some values in the signature directly)

[19:16] <nothingmuch> errm?

[19:16] <Corion> nothingmuch: pasting ...

[19:17] <chip> nothingmuch: I think a for loop with substr will do it

[19:17] <jabbot> pugs - 1163 - making Makefile.PL into Makefile.PL.loca

[19:17] <jabbot> pugs - 1162 - * Submethod tests landed.

[19:17] <jabbot> pugs - 1161 - File::Spec is done, tests and all; howev

[19:17] <awwaiid> nothingmuch, in perl5 sub grab {if($_[2]){$a=shift; (substr($a,shift,$_[0]), grab($a,@_))}

[19:18] <chip> my $copy = $str; map { substr($str, $_, length($str), '') } reverse sort @positions

[19:18] <awwaiid> then call grab("my string here",0,5,7,10)

[19:18] <awwaiid> nice, chip

[19:18] <nothingmuch> $_[2]?

[19:18] <pasteling> "Corion" at 217.86.56.202 pasted "Using Named Fields in a function signature" (41 lines, 1.1K) at http://sial.org/pbot/8617

[19:18] <chip> make that sort { $b <=> $a } positions

[19:19] <awwaiid> third argument (in @_)?

[19:19] <Corion> I really like function signatures - they take out a lot of "if" cases. But they make the "program flow" harder to follow, as you now have to look across several functions to see the state machine behind it again...

[19:19] <gaal> good morrow

[19:20] <nothingmuch> oh, oops

[19:20] <nothingmuch> i see

[19:21] * nothingmuch didn't notice awwaiid recursed

[19:21] <nothingmuch> now if only i had a proper zip

[19:21] <nothingmuch> oh, well, it doesn't help either

[19:22] <Corion> gaal: Did the param-parsing in Perl go forward / is there anything to do ? I'm getting no love from Haskell there :-)

[19:22] <gaal> ah

[19:22] <gaal> er, no thanks for the nudge, i'll email thedamian

[19:23] <Corion> gaal: Heh - I got a small step forward with the parsing/reworking, but then I tried to generalize my small multiple-dash-e success and got caught up in this ugly Named Fields thing... And I'm looking at all the wrong documentation ...

[19:24] <nothingmuch> Corion: i don't see what you're trying to do

[19:25] <nothingmuch> but in general

[19:25] <nothingmuch> both must be changed to

[19:25] <nothingmuch> _run args env { oneliner = arg }; etc

[19:25] <nothingmuch> "values" in haskell are not raelly that

[19:25] <nothingmuch> they're immutable

[19:25] <nothingmuch> if you take env and pass it { oneliner = arg } then it returns an env which is the same, except oneliner = arg

[19:27] <Corion> nothingmuch: Yeah - that's what I want to do on the rhs. But I also want to check for a value of env{oneliner} on the lhs - I'm fine with copying stuff around :) In Perl I'd want C<$arg{oneliner} eq ''>

[19:27] <Corion> ... but how to do that on the Haskell side of things ?

[19:27] <nothingmuch> ah

[19:28] <nothingmuch> _run (("-e"):frag:rest) env | oneliner env = "" = foo| otherwise

[19:28] <nothingmuch> sorry

[19:28] <nothingmuch> | otherwise = bar

[19:28] <chip> Having read the translation of URI I have two comments.  First, :scheme is misspelled as :sheme in one place.  Second, I WANT TO USE THIS LANGUAGE.  

[19:29] <nothingmuch> | lets you put a case at the pattern matching level, sort of

[19:29] <Corion> nothingmuch: Ah - I'll stumble in that direction then :)

[19:29] <Corion> chip: Then kick the pumpking so he pushes the development further :)

[19:30] <Khisanth> but don't kick too hard or you might put him out of commision!

[19:30] <gaal> commandline = GetoptDeclare.parse <- getArgs :)

[19:30] <Corion> gaal: :))

[19:31] <nothingmuch> stevan: ping

[19:31] <stevan> nothingmuch: hey

[19:31] <chip> Corion: oh, right, like I need to speed Leo *up*

[19:31] <chip> er, yeah

[19:31] <Khisanth> gaal: Haskell?

[19:31] <nothingmuch> SEE session realy quick

[19:32] <stevan> nothingmuch: I am actually just heading off to lunch

[19:32] <gaal> Khisanth: embedded perl6 :)

[19:32] <stevan> really quick?

[19:32] <nothingmuch> i just want to show you what i ended up doing

[19:32] <stevan> ok

[19:32] <nothingmuch> and wanted to make sure it stayed sort of readable

[19:32] <stevan> one sec

[19:32] <Khisanth> gaal: if that snippet is perl6 ...

[19:32] <nothingmuch> but it's not that important

[19:33] <nothingmuch> Khisanth: that's not p6

[19:33] <gaal> yet

[19:33] <stevan> nothingmuch: 

[19:33] <nothingmuch> it's how autrijus wanted the haskell side of pugs to parse it's options

[19:33] <stevan> :P itchy trigger finger 

[19:34] <nothingmuch> stevan: ok, this is what's going on:

[19:34] <nothingmuch> for every synopsis we collect the backlinks

[19:34] <nothingmuch> find them with the regex

[19:34] <nothingmuch> remember where they matched

[19:34] <nothingmuch> and then only after we're done, destroy the text data

[19:34] <nothingmuch> splitting it up

[19:35] <nothingmuch> oops, wrong file

[19:37] <jabbot> pugs - 1165 - Fixed typo in call to Test::write_log

[19:37] <jabbot> pugs - 1164 - Added Roles tests.

[19:40] <nothingmuch> one last todo:

[19:40] <nothingmuch> make regexes match nested <code>

[19:40] <nothingmuch> and across pre, or whatever

[19:40] <stevan> I think we should not link to the code

[19:40] <stevan> only to the text

[19:41] <nothingmuch> see S06

[19:41] <nothingmuch> L<S06/"The &?BLOCK routine" /\$\?BLOCKLABEL contains the label of the current block, if any/>

[19:41] <nothingmuch> The &?BLOCK routine

[19:42] <nothingmuch> that won't ever match

[19:42] <nothingmuch> because it's <code>$?BLOCKLABEL</code> contains...

[19:42] * nothingmuch suddenly wants to listen to Lamb

[19:42] <stevan> I see

[19:42] <stevan> Lamb?

[19:42] <nothingmuch> What Sound

[19:42] <nothingmuch> google for it

[19:43] * nothingmuch will hand out mp3s if you promise that you buy it if you keep listening

[19:43] <stevan> lampstar.net?

[19:43] <nothingmuch> i don't think they're successful enough

[19:43] <stevan> s/p/b

[19:43] <nothingmuch> or heck, you can just decide if it's fair to buy

[19:44] * nothingmuch shouldn't allow himself to be so self-righteouous

[19:44] <nothingmuch> and yes, tr/p/b/ and the site is correct

[19:44] * stevan is listening to the clips on the site

[19:46] * stevan thinks its ok, but not his style so he goes back to listening to Public Enemy :)

[19:46] * nmcfarl is listening though

[19:46] <nmcfarl> lamb was a good idea

[19:47] <stevan> ok lunch time,.. 

[19:47] <jabbot> pugs - 1167 - missing semicolon, oops

[19:47] <jabbot> pugs - 1166 - * Added Traits tests.

[19:47] <stevan> have fun all &

[19:50] <nothingmuch> ciao stevan...

[19:51] <Khisanth> hmm "First, :scheme is misspelled as :sheme in one place." <- still the same old @EXPORT stuff?

[19:51] <nothingmuch> http://nothingmuch.woobling.org/pugs_test_status/

[19:51] <nothingmuch> superscripted regex skip backlinks

[19:52] <nothingmuch> r1168

[19:53] <Corion> Schmorp !? Hi :)

[19:53] <gaal> nothingmuch: it strips whitespace /indendtation?

[19:53] <nothingmuch> no

[19:54] <gaal> http://nothingmuch.woobling.org/pugs_test_status/t/builtins/undef.html

[19:54] <nothingmuch> ook

[19:54] <gaal> nothing's indented

[19:54] <nothingmuch> that code is theorbtwo's fault

[19:54] <gaal> <g>

[19:54] <nothingmuch> i think it needs to unexpand

[19:55] <gaal> "unexpand"?

[19:55] <nothingmuch> ... at 4 spaces, naturally

[19:55] <nothingmuch> ;-)

[19:55] <nothingmuch> errm, expand

[19:55] <gaal> oh, it's just matter of s/\t/" " x $ONE_TRUE_TAB_WIDTH/ ?

[19:55] <theorbtwo> Oh, there's some missing pre tags.

[19:56] <theorbtwo> I don't do anything special with tabs.  HTML4.01 suggests (but does not require), that they use 8-char line-up tabs.

[19:56] <gaal> nothingmuch: i don't believe that topic almost started on perl-il *again*!

[19:57] * nothingmuch hasn't read perl-il for a while

[19:57] <nothingmuch> migo vs. yuval?

[19:57] <gaal> in that case i'd suggest we do one of the following:

[19:57] <gaal> 1. recommend one tab style in t/README

[19:57] <jabbot> pugs - 1168 - Backlinks skip with regexes now. A few q

[19:57] <nothingmuch> the reason i use tabs is that it's less work on a stupid editor, that doesn't have indent/outdent

[19:58] <nothingmuch> and the reason i use 4 is that it's the default most places

[19:58] <nothingmuch> aside from that i don't care

[19:58] <gaal> 2. ask people to put in either cperl or vim  signatures of the tab style they like in their tests, and parse it

[19:58] <nothingmuch> so should it be 8?

[19:58] <nothingmuch> gaal: nay nay!

[19:58] <gaal> i think i prefer #2, if only to avoid having that discussion again

[19:58] <nothingmuch> too much metadata overhead

[19:59] <nothingmuch> maybe if we use Vim coloring it could obey it

[19:59] <nothingmuch> that's what i want to do to tests next

[19:59] <gaal> if we do, it would.

[19:59] <nothingmuch> ok, so that's for free

[19:59] <nothingmuch> and it'll do the default

[19:59] <nothingmuch> but for now i'm using Text::Tabs @ 4

[20:00] <gaal> fine by me, if only becaise that's my personal preference too :)

[20:00] <theorbtwo> Don't forget to put in the missing pre tags!

[20:00] <gaal> nm: what's the status of your test coordinates patch?

[20:01] <gaal> asking mostly out of curiosity, also wondering if i need the harness to do anything special to activate it

[20:10] <gaal> i'm doing a clean up of tests, replacing parsefails with clean fails(). what's the status of Dialects/perlego/sigilless? it's very todo, right?

[20:11] <gaal> ping Juerd

[20:11] <nothingmuch> test coordinates?

[20:11] <nothingmuch> his own perl6, that is differen

[20:11] <nothingmuch> Dialects is something Juerd is going to do

[20:11] <nothingmuch> maybe better

[20:12] <gaal> nm, i just parsefailed on your last four lines.

[20:12] <chip> Khisanth: "Same old export stuff"?  What's that?

[20:13] <Khisanth> chip: I mean is @EXPORT and @EXPORT_OK going to remain the ways things are exported?

[20:14] <chip> Oh, no, that's all C<is export> etc. now.   C< :foo > is Perl 6 for C< $self->_foo > if leading _ means "private"

[20:14] <gaal> Khisanth, see modules/README

[20:14] <gaal> er

[20:14] <gaal> moduiles_PORTING_HOWTO

[20:14] <gaal> i can't spell :)

[20:14] <theorbtwo> http://perlmonks.org/?node_id=442402

[20:14] <Khisanth> gaal: that is EXACTLY the reason I asked :p

[20:14] <gaal> lol

[20:15] <Khisanth> sometimes hunting that one error where you have two letters flipped is quite a pain

[20:15] <chip> I look forward to warnings on :missppelled

[20:16] * theorbtwo looks forward to a highly intelligent spell-checker for code.

[20:16] <nothingmuch> darn it

[20:16] <nothingmuch> aspell knows how to mind it's own business

[20:16] <theorbtwo> (One that knows that the name of a declared sub cannot be misspelled -- except in the declaration.)

[20:16] <gaal> Eclipse JDT is pretty good for JAva

[20:17] <nothingmuch> but won't work for runtogether words

[20:17] <chip> nothingmuch: "*its* own business"

[20:17] * nothingmuch uses apostrophe for his/her etc automatically

[20:17] <nothingmuch> hard to stop myself

[20:17] <nothingmuch> sorry

[20:18] <nothingmuch> theorbtwo: you fix it

[20:18] <nothingmuch> i don't know the semantics of tt

[20:18] <nothingmuch> and Text::Tabs isn't DWIMing in that context

[20:18] <nothingmuch> i'm too tired

[20:18] <nothingmuch> and set the charset to utf-8 while you're at it ;-)

[20:19] <theorbtwo> ci what you've got.

[20:19] <nothingmuch> 2 lines:

[20:19] <nothingmuch> err, 3

[20:19] <nothingmuch> use Text::Tabs;

[20:19] <theorbtwo> Er, wait a sec -- we're working with the .jmm. version, right.

[20:19] <nothingmuch> and then expand($text); and expand($rest);

[20:19] <nothingmuch> yep

[20:19] <theorbtwo> OK.

[20:20] <theorbtwo> We probably ought to do something about that, like rm'ing the other one and mv'ing the jmm one on top of it.

[20:20] <theorbtwo> But I'll leave that to people who care more.

[20:20] <theorbtwo> But .jmm. is rather inaccurate.

[20:20] <gaal> jmm?

[20:21] <theorbtwo> James Michael Mastros.  Me.

[20:21] <gaal> ah :)

[20:22] <theorbtwo> Anyway: sleep well.

[20:23] <nothingmuch> hola lightstep 

[20:23] * nothingmuch is not tired sleepy

[20:23] <theorbtwo> Ah.

[20:23] <nothingmuch> tired of sitting

[20:23] <nothingmuch> but thanks

[20:23] <nothingmuch> svn blame says about 40% is yours

[20:24] <nothingmuch> and i'd say lots of the lines that are mine are just modified

[20:24] <lightstep> good night

[20:26] <nothingmuch> theorbtwo: please do a code review

[20:26] <nothingmuch> last time my code was a bit too spaghetti for you

[20:26] <nothingmuch> i think this isn't much better

[20:27] * nothingmuch would like it better abstracted, perhaps

[20:28] <nothingmuch> anyway, i'm off to get cleaned up

[20:30] <gaal> r1169 makes all tests *run*, sticking to the "FIXME parsefail" convention

[20:31] <gaal> nm+to2+stevan, you're right about not needing to go through hoops to capture tests blowing up

[20:35] <theorbtwo> t_index/t/builtins/strings/length.html looks horrible, but that's because of the BIDI, I think...

[20:35] <nothingmuch> utf8 is your friend

[20:36] <gaal> what editor are you using?

[20:36] <gaal> looks fine to me

[20:36] <theorbtwo> The HTMLification, under firefox.

[20:36] <gaal> ah :/

[20:37] <jabbot> pugs - 1170 - Oops, missing parentheses. Fixed.

[20:37] <jabbot> pugs - 1169 - replaced all remaining hard parsefails w

[20:37] <theorbtwo> It looks... umm, acceptable... under xemacs.

[20:38] <gaal> um

[20:38] <gaal> http://nothingmuch.woobling.org/pugs_test_status/t/builtins/strings/

[20:38] <gaal> what is this showing?

[20:38] <gaal> hahaha

[20:38] <gaal> index.html

[20:39] <gaal> got me for a moment :)

[20:42] <Qiang> neat. perl2html ?

[20:44] <gaal> Qiang: t/catalog_tests.jmm.pl

[20:44] <gaal> s/t/util/ actually

[20:45] <theorbtwo> r1171 fixes some bugs in that.

[20:45] <theorbtwo> Allo, Qiang, lukhnos, lightstep.

[20:45] <lightstep> olla

[20:45] <Qiang> :)

[20:47] <theorbtwo> nm, whats your best guess as to what's causing all the regex L<>s that don't resolve?

[20:51] <nothingmuch> bad regexes

[20:51] <nothingmuch> title case is funny in synopses

[20:52] <theorbtwo> Anyone else working on it would have to have an interest extending from the insanity of Perl 5 parser internals all the way to various deep Perl 6 design issues, and I don't think anyone else besides me has the requisite multiple personality disorder.

[20:52] <theorbtwo> Oh.

[20:52] <nothingmuch> there's also my bad regex

[20:52] <nothingmuch> es

[20:52] <nothingmuch> in smartmatch

[20:52] <nothingmuch> there's "Pointy subs"

[20:52] <nothingmuch> which can't be linked

[20:55] <gaal> escape them?

[20:55] <nothingmuch> i tried that 

[20:55] <nothingmuch> didn't work naively

[20:55] <gaal> escape them, not naively?

[20:57] <jabbot> pugs - 1171 - yaml_harness: fix usage with no params

[20:58] <nothingmuch> gaal: errmm, later maybe

[20:58] <ninereasons> S29 is interesting. 

[20:58] <nothingmuch> s/later maybe/patches welcome/

[21:05] <gaal> nothingmuch: example of something that fails please?

[21:05] <nothingmuch> ?

[21:06] <gaal> do you have a failing test? :)

[21:06] <nothingmuch> colored test thingies?

[21:06] <gaal> no no

[21:06] <gaal> for the regexp

[21:08] <nothingmuch> uhm...?

[21:08] <nothingmuch> i don't get it

[21:08] <gaal> since i don't knwo the code you're talking about

[21:08] <gaal> can you supply me with a test case, so i can work on a patch

[21:08] <nothingmuch> ah

[21:08] <nothingmuch> errm

[21:09] <nothingmuch> t/data_types/anon_block.t

[21:09] <nothingmuch> it contains such a link

[21:10] <nothingmuch> the bix m{}x regex in util/catalog_tests.jmm.pl handles it

[21:11] <nothingmuch> s/bix/big/

[21:21] * nothingmuch goes to iron a shirt

[21:27] <jabbot> pugs - 1172 - Added tests for caller() and want().

[21:57] <jabbot> pugs - 1173 - set svn:ignore *.hi

[22:17] <jabbot> pugs - 1174 - Added tests for parameterized roles.

[22:27] <jabbot> pugs - 1178 - Found a bug in S12:

[22:27] <jabbot> pugs - 1177 - Added tests for roles conflict resolutio

[22:27] <jabbot> pugs - 1176 - Test correct "return value" of given.

[22:27] <jabbot> pugs - 1175 - documentation typos

[22:41] <chip> Any reason there's a %MY:: but not a %CALLER:: nor an %OUTER:: ?

[22:42] <autrijus> is there no %CALLER:: ?

[22:42] <autrijus> it's unspecced, true, but I always thought it's there.

[22:43] <autrijus> get larry to spec all three? :)

[22:43] <rgs> mmh %CALLER::. breaks scopes

[22:45] <crysflame> hi, autrijus

[22:46] <autrijus> hey.

[22:46] <chip> tied, presumptively

[22:46] <chip> or the moral equivalent

[22:46] <autrijus> rgs: $CALLER::var already breaks scope

[22:46] <stevan> hey autrijus 

[22:47] <autrijus> hey stevan. can you do me a big favor

[22:47] <autrijus> and do the impossibly difficult task that is ChangeLogs ?

[22:47] <stevan> I can if its quick or doesnt require me to do it right now 

[22:47] <stevan> autrijus: I can do that,.. when do you need them by?

[22:47] <autrijus> I need it in 30 hrs :)

[22:47] <autrijus> preferably 24

[22:47] <jabbot> pugs - 1179 - Added parameterized traits and delegatio

[22:47] <stevan> autrijus: I will get then to you in 15

[22:47] <stevan> :P

[22:48] <stevan> BTW - File::Spec is done

[22:48] <autrijus> my talk about it is 32 hours from now :)

[22:48] <stevan> and tested

[22:48] <autrijus> !!!

[22:48] <autrijus> er. like. wow.

[22:48] <stevan> its ugly

[22:48] <stevan> but it works

[22:48] <stevan> I talked to iblech too

[22:48] <autrijus> pugs are supposed to be like that :)

[22:49] <stevan> got him to direct some of that energy to t/oo/*

[22:49] <autrijus> good.

[22:49] <stevan> and maybe work with me to port File::basename

[22:49] <autrijus> I think I'll call 6.2.0 right after 6.0.14

[22:49] <stevan> I think that could work now

[22:49] <autrijus> yay

[22:49] <stevan> autrijus: I think that would work

[22:49] <autrijus> we're already reasonably complete

[22:49] <autrijus> I need to go thru your buglist after conference

[22:50] <stevan> also,.. nm, theorb and gaal made much progress on the test catalog and yaml harness

[22:50] <autrijus> I saw that :)

[22:50] * autrijus has read backlogs

[22:50] <stevan> at some point we are going to make you a TODO list maker

[22:50] <stevan> ah,.. didnt know how much you had read

[22:50] <autrijus> a TODO maker will be insanely great.

[22:51] <stevan> :)

[22:51] <stevan> do you want me to TODO all the tests as well?

[22:51] <stevan> for the release

[22:51] <autrijus> that'd be best.

[22:52] <stevan> oh, and something to tell ingy when you see him,.. the Makefile.PL in Test.pm installs to my /Library/perl directory on Mac OS X

[22:52] <stevan> which is why I didn't activate the File::Spec one, as it overwrites my perl5 install 

[22:53] <autrijus> ew, wow

[22:53] <autrijus> ok, will get him to fix it

[22:53] <autrijus> ideeally after his talk

[22:53] <stevan> ok

[22:53] <stevan> alright, dinner time here, I will do the changelog and TODO-ing tonight

[22:53] <stevan> later &

[22:54] <stevan> autrijus: when you have a second... look in t/oo/* 

[22:54] <stevan> iblech is unstoppable :)

[22:55] <stevan> and and he wrote that modules/HOW_TO as well,.. very nice

[22:55] <autrijus> how many persons is iblech anyway?

[22:55] <autrijus> is he a consortium? :)

[22:55] <stevan> one,.. on school vacation :)

[22:55] <stevan> he is the german equivilant of you

[22:55] <autrijus> that is amazingly cool.

[22:55] <autrijus> :D

[22:55] <stevan> ok gotta go now for real, before my wife has my head  :)

[22:55] <autrijus> . o O (One day he'll learn haskell and make those tests pass)

[22:55] <autrijus> stevan++ # thanks!

[22:56] <stevan> autrijus++ :)

[23:07] <jabbot> pugs - 1180 - Added enum tests.

[23:08] <autrijus> iblect++ # Unstoppable

[23:08] <autrijus> iblech++ # even

[23:12] <autrijus> 20 modules in 2 days and 212 OO tests.

[23:18] <Khisanth> only 7779 modules to go? :)

[23:18] <autrijus> only 79 to go before we have good idea how p5-to-p6 should look.

[23:19] <autrijus> the automatic translator thing :)

[23:20] <Khisanth> ah so it's not going to be p5 code->bytecode->some B:: module->p6 code? :)

[23:25] <gaal> hi, i exchanged emails with Damian about Getopt::Declare and here's a summary (in the hope Corion reads the backlog):

[23:26] <gaal> He thinks the module is technically capable but probably much too slow for anything but a prototype. He has something planned that sould be better, but is very busy in the near future.

[23:26] <gaal> technically capable of parsing the perl command line, that is

[23:29] <gaal> looks like we can try embedding the p5 version, if we want a proof of concept, but porting it to p6 might be a bit of a big job for something that won't keep :(

[23:34] <gaal> alternatively we could keep doing it in haskell, though that means we have to design it first :)

[23:35] <Limbic_Region> autrijus - why aren't you sleeping?

[23:35] <Limbic_Region> or have you woken up already?

[23:37] <jabbot> pugs - 1181 - Added tests for C<is build {...}> and C<

[23:47] <jabbot> pugs - 1182 - Added class and class|instance method te

