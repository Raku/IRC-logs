[01:12] <fridim_> hi

[07:26] <christopher> How do I disambiguate between class and instance attributes within a method definition?

[07:31] <gaal> christopher: you mean if they have the same name? not sure, but probably $foo means instance and $ThisClass::foo means class. $.foo and $!foo certainly mean instance vars.

[07:32] <gaal> (when I say "certainly" about language matters I usually mean "I would be quite surprised unless")

[07:33] <christopher> yeah, if they have the same name.  So I say: our $.x; to declare the class attribute, but $Foo.x inside one of the instance methods? (where $.x would shadow with

[07:33] <christopher> the instance attribute)

[07:34] <christopher> where Foo is the class name

[07:35] <gaal> I don't think you say our $.x

[07:35] <gaal> say either our $x or my $x for public/private class data.

[07:36] <gaal> hopefully I'll be corrected if I'm wrong about this.

[07:36] <christopher> 'our $.x' is in S12, if you search for the string 'class attr'

[07:37] <gaal> hmm

[07:38] <gaal> well, I don't know then. :-/

[07:40] <christopher> I haven't actually seen $Foo.bar written anywhere.

[07:40] <christopher> Foo.bar appears in t/oo/attributes/class.t, but that's for

[07:40] <christopher> the accessor by the same name, of course...

[07:42] <christopher> I suppose $::?CLASS.bar would be safe?

[07:43] <gaal> that would work if accessors had been created, that is if you declared it with a twigil.

[07:44] <christopher> I want to access the variable, not the accessor (which may not be an lvalue sub)

[07:44] <gaal> If not, $ThisClass::bar, for our vars at least.

[07:47] <gaal> Better ask Luke when he pops in.

[07:47] <christopher> You mean the . has to be replaced with :: to get past the accessor?

[07:47] <christopher> (since it doesn't work that way for instance attributes, I'm surprised.)

[07:47] <christopher> (I thought it was the leading sigil that determined whether you were

[07:47] <christopher> using an accessor.)

[07:48] <christopher> anyway, thanks!

[08:06] <christopher> Ah, it's illegal:

[08:06] <christopher> http://groups.google.com/group/perl.perl6.language/browse_thread/thread/d3d66e69aa3d5f6d/132aa650cd740395?q=class+instance&rnum=9#132aa650cd740395

[08:06] <christopher> (for there to be a conflict between instance and class attributes)

[09:59] <r0nny> yo

[11:18] <r0nny> yo

[11:18] <r0nny> does pugs support meta pbjects now ?

[11:19] <r0nny> ping?

[11:34] <broquaint> ?eval Object.new().meta.perl

[11:34] *** evalbot_7961 is now known as evalbot_7968

[11:34] <evalbot_7968> Error: No compatible subroutine found: "&meta" 

[11:34] <broquaint> I guess not.

[12:41] <raptorXXX> is there perldoc equivalent in haskell ?

[12:41] <rafl> haddock

[12:41] <raptorXXX> http://wiki.perlchina.org/main/show/haskell+workshop+2005

[12:41] <raptorXXX> this can be interesting...

[12:41] <raptorXXX> thanx

[12:42] <raptorXXX> where is this haddock?

[12:42] <raptorXXX> i cant seem there is such command .. ghc

[12:42] <raptorXXX> aaa i see

[12:42] <theorbtwo> 1: I'm not quite sure I'd call them equivelent.

[12:42] <raptorXXX> it is in a package

[12:43] <theorbtwo> 2: It comes sepperately.

[12:43] <raptorXXX> yep, thanx

[12:45] <gaal> raptorXXX: see also http://haskell.org/hoogle/

[12:45] <raptorXXX> :) thanx

[12:48] <raptorXXX> one more questions...is there any equivalent of a Hash and HoH,AoA..etc.. structures in haskel

[12:48] <raptorXXX> FiniteMap?!

[12:49] <SamB> raptorXXX: we usually use Data.Map since GHC 6.4

[12:49] <raptorXXX> aha..i see

[12:49] <raptorXXX> FiniteMap is depricated

[12:49] <SamB> raptorXXX: what is an AoA?

[12:50] <raptorXXX> Array of arrays, HoA, AoH ..etc 

[12:50] <SamB> raptorXXX: just nest the types...

[12:51] <raptorXXX> ok.. i will try ,tnx

[12:52] <SamB> so, like, Map String (Map String Int) or something like that

[12:52] <SamB> there are a bunch of array types, though

[12:54] <raptorXXX> this haskell seem very cool, perl6 will stole alot of things isnt it :))

[12:55] <GeJ> erm, I guess the word you're looking for is "borrow"... sounds better :)

[12:55] <raptorXXX> :)

[12:55] <theorbtwo> Or "steal", which has the correct tense.

[12:58] * SamB prefers "steal"

[12:59] <raptorXXX> i've read abit about Types in Haskell... do we have something like it in perl6

[13:00] <raptorXXX> roles ? may be ?

[13:02] <theorbtwo> I think haskell types map more or less onto perl6 types.

[13:02] <theorbtwo> Not completely sure about parameterization, though.

[13:10] <xinming> ?eval [+] [1..100]

[13:10] <evalbot_7968> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100] 

[13:10] <xinming> ?eval [+] (1..100)

[13:10] <evalbot_7968> 5050 

[13:11] <xinming> hmm, should [1..100] be deferenced?

[13:11] <theorbtwo> I don't think so.

[13:11] <rafl> ?eval [+] *[1..100]

[13:11] <evalbot_7968> 5050 

[13:11] <theorbtwo> It should possibly be nummified, but possibly not.

[13:12] <theorbtwo> (Since there was only one argument, the operator drops out, in one way of thinking.)

[13:24] <xinming> ?eval [~~] [1..10]

[13:24] <evalbot_7968> bool::true 

[13:24] <xinming> ?eval [~~] (1..10)

[13:24] <evalbot_7968> bool::false 

[13:24] <xinming> hmm

[13:25] <theorbtwo> Blink... when did we get a ~~ operator?

[13:26] * theorbtwo smacks his head.

[13:27] <theorbtwo> Um, like 3 years ago... I'm using a strange font, for me...

[13:30] <xinming> oops

[13:30] <xinming> ?eval [~] (1..10]

[13:30] <evalbot_7968> Error:  unexpected "(" expecting block construct, ":", digit, "_", fraction, exponent, term postfix, operator, "does", "but", "is", "^..^", "cmp", "<=>", "^..", "..^", "..", ")", postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[13:30] <xinming> ?eval [~] (1..10)

[13:30] <evalbot_7968> "12345678910" 

[13:31] <xinming> found perl 6 has many aspects which are the same as haskell

[14:59] <clkao> 6/win14

[17:27] <Juerd> kolibrie++  # dvorak :)

[17:27] <Juerd> kolibrie: Spread the word :)

[17:44] *** Aankh|Clone is now known as Aankhen``

[18:23] *** xandal is now known as orxy

[18:38] <kolibrie> Juerd: yes sir!

[18:40] <kolibrie> Juerd: my wife started your tutorial

[18:41] <Juerd> Good! We certainly need more female dvorak typists, because they tend to be much more succesful in convincing others. 

[18:41] <Juerd> :)

[18:42] <svnbot6> r7969 | yiyihu++ | Changed the value of lang attribute in <html> to "zh-cn" in file docs/zh-cn/01Overview.html

[19:08] <sdakota> Moo :)

[19:08] <sdakota> Hello guys :)

[19:10] <dduncan> and hello to you

[19:58] * Aankhen`` goes to sleep.

[19:58] <Aankhen``> G'night.

[21:50] <raptorXXX> how to use perl5 modules in pugs..? 

[21:50] <raptorXXX> #!/usr/bin/pugs     

[21:50] <raptorXXX> use DBI--perl5;

[21:50] <raptorXXX> is this correct..

[21:52] <PerlJam> raptorXXX: what happens when you try it?  :)

[21:52] <raptorXXX> pugs: *** Can't locate DBI.pm in @*INC (@*INC contains: /usr/lib/perl6/i686-linux /usr/lib/perl6 /usr/lib/perl6/site_perl/i686-linux /usr/lib/perl6/site_perl /usr/lib/perl6/auto/pugs/perl6/lib /usr/lib/perl6/site_perl/auto/pugs/perl6/lib .).

[21:52] <raptorXXX>     at <interactive> line 1, column 1

[21:53] <kolibrie> use perl5:DBI;

[21:53] <raptorXXX> But this is ok :---> 

[21:53] <raptorXXX> use perl5:DBI; my $dbh = DBI.connect('dbi:SQLite:test.db');

[21:53] <raptorXXX> i see

[21:53] <raptorXXX> so the second way is the correct one

[21:53] <kolibrie> :)

[21:56] <integral> did you find the "DBI--perl5" in a file in the pugs source?

[21:58] <integral> hmm, seems not :)

[22:00] <wolverian> integral, that was a suggestion on p6l - to put the perl version in the author field

[22:00] <gaal> it used to work that way when the bridge was first put up.

[22:01] <integral> hmm?  I know.  I was just wondering where raptorXXX found the old syntax.  I thought it might have been a presentation that was stored in the pugs tree.  If it was I was going to fix it :)

[22:01] <gaal> ahh ok

[22:01] <integral> it's in the 6.2.8 changelog :)

[22:02] <raptorXXX> no i read it

[22:02] <wolverian> integral, ah, okay.

[22:02] <xgl> 'darcs get' seems improbably slow -- is it a known issue?

[22:02] <integral> raptorXXX: where?

[22:02] <raptorXXX> in haskell-workshop-2005

[22:02] <raptorXXX> http://wiki.perlchina.org/main/show/haskell+workshop+2005

[22:03] <Khisanth> better to stick with the pugs docs :)

[22:03] <integral> except where pugs is behind the design :)

[22:04] <Khisanth> integral: doesn't matter then, I don't think you can run perl6 anywhere else ...

[22:04] <integral> hmm, that seems to just be a copy of autrijus' proposed paper for hw,  which iirc is in pugs svn?

[22:04] <raptorXXX> where i can see more info for class-name-definitions 'cause i saw weird syntax .. one moment to find it

[22:05] <Khisanth> raptorXXX: docs/quickref should have most of these things covered

[22:06] <raptorXXX> aha..

[22:24] <wolverian> ?eval 2**2

[22:24] *** evalbot_7968 is now known as evalbot_7969

[22:24] <evalbot_7969> 4/1 

[22:24] <wolverian> humm, what's up with the /1?

[22:27] <xgl> exit

[22:30] <geoffb> wolverian -- that's a Rat, but I'm not sure why int ** int -> rat, frankly.

[22:31] <geoffb> maybe a coersion back and forth from a floating point rep.

[22:32] <wolverian> is it int ** int?

[22:32] <wolverian> ?eval 2 ** 0.25

[22:32] <evalbot_7969> 1.189207115002721 

[22:32] <wolverian> right, no /1 there

[22:33] <wolverian> (yeah, I don't know enough haskell. :/)

[22:34] <SamB> well, if you do 0.25, doesn't that make it a float?

[22:34] <SamB> well, in Haskell it just makes it some instance of Fractional...

[23:12] <leo> rafl: (inline-threading) the paper describes also a lot of plain code rewriting, which is (as proof of concept) already inside src/pic.c

[23:14] * leo ponders about renaming .pbc to .pwc (.. word code)

[23:15] <leo> (but that belongs better to #parrot ...&)

