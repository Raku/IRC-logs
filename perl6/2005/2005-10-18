[00:00] <geoffb> Added a paragraph at the end of the kwiki page WRT CC licensing.

[00:01] <luqui> ?eval say $self

[00:01] <evalbot_7665> Error: Undeclared variable: "$self" 

[00:01] <luqui> ?eval my $self = 4 ; say $self

[00:01] <evalbot_7665> 4 bool::true 

[00:01] <geoffb> Wow, that was a short stay

[00:01] <mrborisguy> evalbot didn't want to stay around very log

[00:01] * coral blinks

[00:02] <coral> that's not the usual behavior

[00:02] <coral> luqui: the opengl firefox guy said he had no javascript bindings and isn't actively working on it

[00:02] <coral> i didn't push for source code, pending your thoughts

[00:02] <luqui> darn

[00:03] <luqui> evalbot will be back shortly

[00:03] <luqui> svnbot6 will tell you why he was absent shortly

[00:04] <luqui> ?eval say "Hi! long time no see"

[00:04] <evalbot_7666> Hi! long time no see bool::true 

[00:05] <stevan> luqui: I think svnbot is down too

[00:06] <svnbot6> r7666 | luqui++ | Fixed a bug where $self was being interpreted as ${self}.  That's the problem

[00:06] <svnbot6> r7666 | luqui++ | with bare syntactic synonyms.  I have a feeling that it should be parsed like

[00:06] <svnbot6> r7666 | luqui++ | a nullary function and then folded in.

[00:06] <stevan> horray !

[00:07] <Supaplex> yippie

[00:08] <Supaplex> so what we cheering for? ;)

[00:08] <stevan> svnbot is alive 

[00:08] * Supaplex bear hugs svnbot6 *SQUISH*

[00:11] <geoffb> Oh, I don't remember if I asked this before:  Are the new ?eval :js and ?eval :p5 subject to safe mode just like normal ?eval ?

[00:12] * luqui has no idea

[00:12] <luqui> that's probably iblech's territory

[00:12] <luqui> If I recall that he wrote it correctly...

[00:13] <luqui> ?eval :js say "booze"

[00:13] <evalbot_7666> *** Precompiled Prelude doesn't exist yet; precompiling...     (You can safely ignore the 'useless use of constant' warnings.) pugs: *** No compatible subroutine found: "&use"     at -e line 1, column 1 Use of uninitialized value in print at /home/fibonaci/devel/pugs-base/perl5/PIL2JS/lib/PIL2JS.pm line 142. *** Reading input from "/tmp/YPbHrqflnf"... *** Compiling PIL to JavaScript... Can't bless non-reference value at /home/fibonaci/devel/pugs-ba

[00:13] <geoffb> iblech: OK, when you're back, my previous question is for you.

[00:15] <Supaplex> nice hairball there evalbot_7666.

[00:35] *** UnderDawg is now known as CaptFudd

[03:41] <nothingmuch> good night

[03:46] <luqui> good morning

[03:50] <luqui> ?eval if 4 -> $x { say $x }

[03:50] <evalbot_7666> Error:  unexpected ">" or "i" expecting program reserved word 

[03:53] <luqui> ?eval class Foo { has $.bar }  Foo.new(bar => 42).bar

[03:53] <evalbot_7666> \42 

[03:59] <luqui> ?eval my ($x, $y) = (1,2);  say "$x ; $y"

[03:59] <evalbot_7666> 1 ; 2 bool::true 

[04:00] <luqui> ?eval min(1,2,3)

[04:00] <evalbot_7666> 1 

[04:17] <svnbot6> r7667 | luqui++ | Added a hand-written attribute grammar into examples.  It worked perfectly.

[04:17] <svnbot6> r7667 | luqui++ | Pugs++ (crossing fingers hoping for little frustration).

[04:28] <mrborisguy> luqui: do you expect $x to hold bool::true in 'if 4 -> $x { say $x }' ?

[04:30] <luqui> maybe

[04:30] <luqui> couldn't remember

[04:31] <luqui> I was wanting it to hold 4, especially since we outlawed = in "if"

[04:38] <mrborisguy> ?eval if ( $x = 4 ) { say $x }

[04:39] <evalbot_7667> Error: Undeclared variable: "$x" 

[04:39] <mrborisguy> ?eval my $x = 0; if ( $x = 4 ) { say $x }

[04:39] <evalbot_7667> 4 bool::true 

[04:39] <luqui> I don't thunk pugs outlaws it

[04:39] <mrborisguy> you're saying that will be illegal?

[04:42] <mrborisguy> I guess I have never had to do that before, but is what you were trying going to be legal then?

[06:03] <wolverian> luqui, boggle, outlaw = in if? that feels weird.

[06:37] *** brother_ is now known as brother

[06:55] <jql> hmm

[07:02] <autrijus> greetings!

[07:02] <jql> howdy

[07:02] <autrijus> I finished 1 slide out of 3! ;)

[07:02] <obra>  autrijus! hi!

[07:02] <obra> for what?

[07:03] <autrijus> (due in 2 hours)

[07:03] <autrijus> s/slide/talk/

[07:03] <obra> heh

[07:03] <Juerd> A three slide talk? Are those cinema screen slides on which you can put entire stories, or is it a lightening talk? :)

[07:03] <obra> I should start my talk for npw

[07:03] <Juerd> Oh, one talk :)

[07:03] <autrijus> please sanity check. http://perlcabal.org/~autrijus/tmp/vb.xul

[07:04] <Juerd> autrijus: I find the first slide rather scary.

[07:04] * Juerd clicks.

[07:04] <jql> it rocketh?

[07:04] <autrijus> (mock olde english)

[07:05] <Juerd> .oO( autrijus also began with basic. there's still hope for me! )

[07:05] <jql> I wonder if wikipedia.org has ever been entered into QBASIC before

[07:05] <autrijus> jql: that pic is from wikipedia.

[07:05] <autrijus> Juerd: larry just admitted thatyesterday at state of onion

[07:05] <jql> it seemed odd

[07:06] <Juerd> We're all a bunch of basic losers? This is upsetting news.

[07:06] <autrijus> lol

[07:06] <autrijus> no, it's just we are no longer denying our past :p

[07:06] <autrijus> childhood trauma and therapy and all that

[07:07] <Juerd> heh

[07:07] <jql> one of my co-workers would be traumatized by this presentation

[07:07] <Juerd> I've always _

[07:07] <Juerd> hated that in vb

[07:07] * jql downloads

[07:07] <autrijus> I hope the message is clear :)

[07:08] <autrijus> (which is all I can hope for in a controversial talk)

[07:08] <Juerd> What is the message?

[07:08] <Juerd> That MS is evil? :)

[07:08] <Juerd> They made basic un-basic.

[07:08] <autrijus> no, that it's evolve or die :)

[07:08] <Juerd> Oh

[07:09] <jql> even old dogs can learn new tricks

[07:09] <autrijus> (which is a point a certain Juerd raised +Inf times on p6l :))

[07:09] <Juerd> I did? :)

[07:09] <autrijus> iirc yes :)

[07:10] <Juerd> I've never said it this clearly though :)

[07:10] <autrijus> *nod*

[07:10] <Juerd> What was the first basic dialect you used?

[07:11] * jql wants inline SQL and XML, now

[07:11] <Juerd> I began with gwbasic, and did c64, c16, ibm a/c basic later (going backwards in time because I felt like it)

[07:11] <Juerd> jql: Inline SQL is neat, inline XML... evil.

[07:11] <autrijus> Juerd: GW or BASICA

[07:11] <autrijus> around the same time

[07:12] <autrijus> inline xml + query is very nifty.

[07:12] <autrijus> as it's based on desugaring

[07:12] <autrijus> not kludged in

[07:12] <Juerd> jql: macro select is parsed /<SQL::select>/ { ... }

[07:12] <jql> Juerd: inline xml is bad, DOM methods are worse

[07:12] <Juerd> autrijus: basica is ibm a basic :)

[07:12] <Juerd> "Advanced" basic :)

[07:13] <Juerd> Which it was, compared to IBM "Cassette" BASIC, which was found mostly in PC roms

[07:13] <Juerd> Remove harddrive, remove floppy, reboot, basic!

[07:14] <autrijus> I... remember that

[07:14] <autrijus> it's taught in our elementary school 2nd grade.

[07:14] * autrijus screams quietly

[07:14] <Juerd> ...

[07:14] <Juerd> Can't beat that :)

[07:15] <Juerd> I got taught in school, 3rd class (age 14), that the "space bar is the long unlabeled key"

[07:15] <Juerd> I tried to convince them that "property of Insula College" was in fact a label

[07:15] <Juerd> But they never listened...

[07:15] <autrijus> mariner.xul: http://perlcabal.org/~autrijus/tmp/mariner.xul

[07:16] <autrijus> it's missing one stanza + one para.

[07:16] <autrijus> help... welcome. but review of existing verse will help a lot too

[07:17] <Aankhen``> "\n+ and \w+" on slide 6 seems awkward...

[07:17] <Juerd> autrijus: basic slides look sane

[07:18] <autrijus> Aankhen``: reads: "lines and words"

[07:18] <Aankhen``> Ah.

[07:18] <Aankhen``> Mi bad.

[07:18] <autrijus> "comp.lang.perl" reads "CLP"

[07:18] <autrijus> nah :)

[07:18] <autrijus> (it's got a #comment in the pugs repo)

[07:21] * jql ponders the p6l graphics thread

[07:39] <geoffb> autrijus, ping

[07:41] <gaal> autrijus: s/that tarried/who tarried/

[07:42] <autrijus> geoffb: pong

[07:42] <autrijus> gaal: original:

[07:42] <autrijus> Eärendil was a mariner

[07:42] <autrijus> that tarried in Arvenien;

[07:42] <geoffb> autrijus, in VB slides, 9 is not a prime number.  :-)

[07:42] <autrijus> blame amanda :)

[07:42] <gaal> WELL TOLKEIN OBVISOULY DIDN'T KNOW ENGLISH. errr.

[07:42] <geoffb> amanda?

[07:43] <autrijus> geoffb: fixed

[07:43] <autrijus> geoffb: the woman among the \ninjas

[07:43] <geoffb> ah

[07:43] <coral> |greetings

[07:43] <geoffb> tease her.  :-)

[07:43] <autrijus> ;)

[07:43] <autrijus> should I still change it to "who tarried" ?

[07:43] <autrijus> probably a good idea

[07:43] <gaal> I still don't like the tall / Camel rhyme, but can't think of anything better :( 

[07:44] <geoffb> greetings, coral 

[07:44] <coral> enamel

[07:44] <gaal> yeah, considered that but it couldn't make it fit

[07:44] <coral> a smile of enamel, depending on the purpose for the rhyme

[07:44] <autrijus> (also, stanza 5 needs help :D)

[07:44] <gaal> what language is the Camel transation there, Polish?

[07:44] <coral> stanza 5 of

[07:44] <autrijus> # docs/talks/larry_mariner.txt line 64

[07:45] <coral> heh

[07:45] <autrijus> hopefully I'll find allison after this keynote session and get it done

[07:45] <autrijus> otherwise we'll be forced to drop that, which is sad, as I'd like to name lots of communities.

[07:45] <autrijus> (oh boy, on air in 90 mins)

[07:46] <gaal> rather minor, but the fixed-width and proportional fonts aren't exactly lined up (eg "blessed" is a little higher on the line)

[07:47] <autrijus> gaal: it worksforme here and I think it's going to be ok :)

[07:47] <gaal> "at least he came to Version Five" -> "at last", no?

[07:47] <geoffb> gaal, I was thinking the same thing

[07:47] <autrijus> "at last" is correct

[07:48] <gaal> "the comp.lang.perl"... would "and" work better than "the"?

[07:49] <autrijus> gaal++

[07:49] <svnbot6> r7668 | autrijus++ | * Finished the missing para in the last stanza

[07:49] <svnbot6> r7668 | autrijus++ | * contribs from #perl6

[07:49] <gaal> "of a fresh Community Rewrite", perhaps the "a" can be dropped for better scanning

[07:50] <gaal> "a-glimmer" can be spelled simply "aglimmer", I think

[07:50] <geoffb> .oO( Global Thermonuclear Talk Editing )

[07:50] <autrijus> gaal: done. a-glimmer is original, probably not going to change

[07:51] <gaal> I love the "tallied the RFCs" slide :)

[07:51] <gaal> OK

[07:53] <gaal> "till Code should fade, **an** gliding star"?

[07:54] <gaal> is it in the meaning of "and"? because archaic "an" means "if", not "and".

[07:54] <autrijus> fixed

[07:54] <gaal> if it's "and" then it oughta be spelled "an'"

[07:54] <autrijus> no, simply was "an orbed star"

[07:55] <gaal> is there mention of "we" in the original?

[07:55] <svnbot6> r7669 | autrijus++ | * s/the/and/ in CPAN stanza

[07:55] <svnbot6> r7669 | autrijus++ | * s/messy mess/noisy mess/

[07:55] <svnbot6> r7670 | autrijus++ | * s/of a fresh/of fresh/ in #7 to scan better.

[07:55] <svnbot6> r7671 | autrijus++ | * more grammos picked out by gaal

[07:55] <autrijus> nope.

[07:57] <gaal> Stanza 5 is good, but what's Tarmenel?

[07:58] <autrijus> it's this high heaven thing in Vanilor

[07:58] <gaal> (Tolkein reference? I don't remember that well enough)

[07:58] <autrijus> #5 is unadapted!

[07:58] <autrijus> (it's not in .xlu)

[07:58] <gaal> hahaha!

[07:59] <gaal> maybe leave it verbatim, but add images dickh style?

[07:59] <gaal> hard to do in xul though.

[08:00] <autrijus> not hard at all

[08:00] <gaal> i mean simultaneously with the text

[08:00] <gaal> so you don't break your pace

[08:01] <autrijus> sure, easily

[08:01] <autrijus> I'll try that.

[08:01] <autrijus> gaal++ # foundatin of good ideas

[08:01] <gaal> it's striking how well the original fits, but well, that's kind of the point :)

[08:02] <autrijus> :D

[08:02] <gaal> #8: "and OO tricks were sought from him." sought *from* him or *for* him?

[08:02] <autrijus> both works

[08:02] <geoffb> . . . thank $deity, just when I thought the new perl 5 build would *never* make it into testing . . . it just did, carrying a wave behind it

[08:03] <autrijus> I'd like a better word than "tricks" too

[08:03] <gaal> spells? let's see

[08:03] <autrijus> gaal: I'll go with "sought for"

[08:03] <autrijus> gaal: er no, something more "frames" "class tree"

[08:04] <gaal> k

[08:05] <gaal> "Classic trees" would not be understandable enough.

[08:05] <autrijus> nope.

[08:05] <gaal> If we keep "OO" we only have one syllable to work with. Golf.

[08:06] <gaal> (no, i

[08:06] <gaal> 'm not suggesting "OO Golf" :-)

[08:07] <autrijus> "tricks" is good enough

[08:08] <gaal> yeah

[08:08] <gaal> "we'll land at last on far-away shores" -> s/far-away/distant/ # scans better

[08:09] <gaal> the "we" sounds funny though. But ACK why it's there.

[08:10] <autrijus> distant is better.

[08:12] <autrijus> I adapted stanza 5.

[08:12] <gaal> "But on him mighty fate was laid"... "mighty boon" perhaps? to ring better with the original, but i'm not sure it's "correct" in context.

[08:12] <autrijus> investingating into flashpic

[08:12] <gaal> pulling

[08:13] <autrijus> boon is good.

[08:14] <autrijus> (commit is slow)

[08:14] <geoffb> gaal++ # excellent editing

[08:14] <autrijus> xul reuploaded

[08:14] <gaal> thanks :)

[08:15] <gaal> autrijus, when you come here i hope you'll get to visit one of our word game nights.

[08:15] <autrijus> sure!

[08:16] <gaal> Stanza 5 is showing up all as one block of text on my browser

[08:17] <gaal> in ghci, can't i make a data declaration?

[08:17] <autrijus> no, need separate compilation unit for that

[08:17] <svnbot6> r7672 | autrijus++ | * stanza 5 and more gaal fixes

[08:18] <gaal> yeah, i can understand why. but too bad :)

[08:18] <autrijus> I fixed the xul.

[08:18] <autrijus> scp'ed up

[08:19] <gaal> rafl: ping payload{ "can you do something about bug #319812 ?" }

[08:20] <gaal> s/otherworlds/other worlds/

[08:20] <autrijus> whew, it's looking good now

[08:20] <autrijus> #perl6++

[08:21] <gaal> hmm, syntax error. should be ping{ payload = .... }

[08:21] <gaal> autrijus++ :)

[08:22] <geoffb> autrijus, does OpenFoundry have a way to send an email to the staff of a project?

[08:22] <geoffb> (presumeably open to admins only or perhaps project team members only)

[08:22] <autrijus> geoffb: yes, creating a new ticket should do that

[08:23] <autrijus> you can also make a mailing list and subscribe [email@hidden.address]
[08:23] <gaal> funny how we never made use of a ticket system. # "t/pugsbugs is our ticket system!"

[08:24] <geoffb> autrijus, I think I may do the former.  I don't want to ever have to manually remember to add someone to the list, just know that it will get to everyone.

[08:25] <autrijus> nodnod.

[08:25] <autrijus> gaal: indeed... it's a much more tightly integrated ticketing system

[08:25] <autrijus> battery low... about to switch off in a bit

[08:25] <autrijus> and this Alan Cox talk is nice

[08:27] <gaal> see you later. I'm looking for improvements to s10

[08:28] <gaal> ("So cunning its assembly", cunning yes, scanning no)

[08:29] <autrijus> "assembly" pronounced as 4syl.

[08:29] <autrijus> as-sem-ble-ly

[08:30] <gaal> yeah, but after the previous line which also cheats a bit...

[08:30] <autrijus> ...makes it a piers contribution. yes.

[08:30] <autrijus> (he insisted we need to fit in "Continuation" at some point.)

[08:30] <gaal> "piers contribution"? ah :)

[08:31] <autrijus> suggestions welcome :)

[08:31] <gaal> if this were slightly less constraints, we could simply use enjambment:

[08:31] <gaal> Continuations!  What subtle / art! So cunning its assembly

[08:31] <gaal> but that won't work here i'm afraid.

[08:32] <gaal> s/constraints/constrained/

[08:32] <autrijus> aye.

[08:33] <autrijus> brb&

[08:33] <gaal> hexasyllabic words tend to throw off tetrameter :)

[08:33] <gaal> s/hexa/penta/

[08:33] <geoffb> autrijus, how do you create a new version for a project in OF, so it will appear in the RT ticket dropdowns?

[08:35] <gaal> geoffb: login, then do "New Project"

[08:36] <gaal> i think. but what is a new version of a project?

[08:36] <geoffb> gaal, I don't want a new project, I just want a new version, so that when I create an RT ticket, I can say that it is for version 1.20.6, for example.

[08:37] <geoffb> Right now, the dropdowns are empty, and the "Version" blurb in the left gutter says "No Releases"

[08:37] <gaal> ah, that kind of version :)

[08:37] <geoffb> AH!  Found it!

[08:37] <geoffb> It's under "Release Plans" in the left gutter menu

[08:38] <gaal> geoffb: Release Plans

[08:38] <gaal> oh

[08:38] <gaal> heh.

[08:38] <geoffb> It's taking me a while to get used to the new UI

[08:39] <geoffb> Aside from not having admin'ed a project in RT before . . . :-)

[08:39] <gaal> autrijus: I think the "What" can simply be omitted, and punctuation changed.

[08:39] <gaal> Continuations, subtle art

[08:40] <gaal> So cunning its assembly!

[08:40] <gaal> thought the "so" wants to be strengthened still.

[08:41] <gaal> oh, and s/its/in/

[09:05] <gaal> or

[09:05] <gaal> Assembled $padding cunningly

[09:11] <gaal> "the Î»-powered Pugs did fly" - this sounds like a line out of Jabberwocky

[09:12] <gaal> shower&

[09:20] <autrijus> Continuations -- subtle art,

[09:20] <autrijus> so cunning in its assembly!

[09:20] <autrijus> what about that?

[09:21] <autrijus> or

[09:21] <autrijus> Continuations -- subtle art!

[09:21] <autrijus> So cunning in its assembly!

[09:22] <lukhnos> Must it be in plural?

[09:22] <autrijus> nope

[09:22] <autrijus> singular works fine

[09:23] <lukhnos> So cunning art thou, subtle techne

[09:24] <lukhnos> Ye continuations in your assembly

[09:24] <lukhnos> s/art thou/ye disclose/

[09:25] <autrijus> lukhnos: that scaneth not

[09:25] <svnbot6> r7673 | autrijus++ | * Continuation is now even more subtle, thanks to gaal and lukhnos

[09:25] <autrijus> lukhnos: # http://perlcabal.org/~autrijus/tmp/mariner.xul

[09:26] <lukhnos> ah

[09:27] <lukhnos> autrijus: actually techne and assembly rhyme in English

[09:28] <autrijus> yeah, it rhymes, just not scans

[09:29] <lukhnos> autrijus: which meter are you using

[09:31] <clkao> lukhnos!

[09:31] <autrijus> lukhnos: 7-8 syl each sentence

[09:32] <lukhnos> mr. kao :)

[09:32] <autrijus> yours have 9

[09:32] <lukhnos> autrijus: so qudrameter ?

[09:32] <autrijus> aye

[09:34] <gaal> rehi

[09:35] <lukhnos> continuations alone takes 5

[09:36] <gaal> Maybe s/So cunning/cunning so/

[09:36] <svnbot6> r7674 | autrijus++ | * last-second checkin from

[09:37] <gaal> and normalize capitalizations of first words...

[09:37] <gaal> it's going live? good luck! :)

[09:38] <lukhnos> gaal: "Cunning so are ye" ?

[09:38] <gaal> i hope there's a vid capture.

[09:38] <gaal> lukhnos: he hasn't been using apostrophe in the rest of the poem, so i think not.

[09:45] <autrijus> going live now

[09:45] <autrijus> last-second allison checkin is sane I hope

[09:46] <gaal> Monger crew, no?

[09:52] <autrijus> gaal: fixed, please fix in the repo

[09:53] <gaal> k

[09:53] <gaal> committed

[09:54] <autrijus> gaal++

[09:54] <svnbot6> r7675 | gaal++ | s/Mongers/Monger/

[10:02] <autrijus> the vb one went very well!

[10:05] <gaal> yay! a good vb implies a bright future for clr pugs :)

[10:09] <acme__> was nice

[10:45] <gaal> is the vb talk online?

[10:48] <GeJ> I think autrijus posted it... hum...

[10:48] <GeJ> there it is: http://perlcabal.org/~autrijus/tmp/vb.xul 

[10:50] <gaal> cheers :)

[10:53] <gaal> who can identify the \-ninjas?

[10:54] <gaal> I think until I met autrijus I thought "Woot" was a syntax error in Basic.

[10:55] <gaal> what does the underscore mean? "select p _ from p in primes _"

[10:56] <GeJ> One of them is actually a kunoichi. Amanda is the name. <autrijus> blame amanda :) [...] <autrijus> geoffb: the woman among the \ninjas

[10:57] <gaal> #perl6 increasing wikipedia traffic..     thanks :)

[11:01] <GeJ> Well, if only wikipedia knew about this GADT guy you're all talking about. :)

[11:05] <gaal> http://haskell.org/hawiki/QuotesPage?action=highlight&value=gadt ;-)

[11:06] <GeJ> #perl6 increasing haskell.org's logfile since 2005... Thanks :)

[12:17] <autrijus> gaal: the _ means "continued at next line"

[12:17] <autrijus> it's what you get instead of semicolons.

[12:17] <autrijus> (the pugs talk just concluded -- it went pretty well.)

[12:17] <theorbtwo> Cool!

[12:17] <theorbtwo> The unicode abuse one?

[12:17] <autrijus> yeah

[12:18] <gaal> ah, so it's like \

[12:18] <gaal> but they wanted to save that to mean lambda in version 10

[12:19] <autrijus> no, lambda has no sigil there

[12:19] <autrijus> they are too smart

[12:19] <autrijus> \x -> x + 1

[12:19] <autrijus> in vb is just

[12:19] <autrijus> x => x+1

[12:20] <fglock__> autrijus: porting basic lazy array operations to pugs looks easy - now I'm trying to find out how to implement slices

[12:20] <autrijus> fglock__: ooooh

[12:20] <autrijus> "\x y -> x + y" becomes "x y => x + y"

[12:20] <theorbtwo> Wait... the joke about the VB team being taken over by crazy lambadites was ha-ha-only-serious?

[12:20] <gaal> yepsters.

[12:21] <autrijus> it is serious -- Erik Meijer is responsible (among other things) for HaskellDB, Parsec, HSP

[12:21] <fglock__> it would be nice if there were function names for slice operations

[12:21] <autrijus> fglock__: &circumfix:<[ ]>

[12:21] <gaal> theorbtwo: http://lambda-the-ultimate.org/node/view/967

[12:21] <theorbtwo> Wow.

[12:22] <autrijus> either amanda or paul is also a long time academician

[12:22] <fglock__> I'll try it - thanks

[12:22] <autrijus> fglock__: prolly won't work -- it's a Syn form in haskell runtime

[12:22] <autrijus> but that may work for PIL

[12:22] <autrijus> but we can fix the haskell runtime so it works

[12:23] <fglock__> it does work in PIL - we use it in pilrun

[12:23] <autrijus> I'll brb though, need to proc mudane things I ignored for ages

[12:23] <autrijus> nodnod

[12:35] * gaal wonders what "!!" (as opposed to "!") means in ghc --show-iface output for Strictness.

[12:35] <autrijus> unboxed and strict?

[12:35] <autrijus> (wild gues)

[12:38] <gaal> autrijus: could well be, since so far I'm only seeing it for Int fields.

[12:39] <autrijus> cool

[12:41] <gaal> um, I need a p5 re idiom, that splits but honors parens.

[12:41] <gaal> a b (c d e) (f (g h)) => 4 elements

[12:41] <gaal> can i get away with not using a modules for that?

[12:42] <gaal> s/a modules/Text::Balanced/

[12:43] <gaal> then again, T:B is core. nice.

[12:45] <fglock__> autrijus: re array slice - it looks like postcircumfix:[] is not redefinable - I tried: "multi postcircumfix:<[ ]> ( *@a ) { warn "SLICE" }"

[12:46] <autrijus> fglock__: ok, can you write a pugsbug for that

[12:47] <fglock__> sorry - you mean a test or a bug report?

[12:47] <autrijus> test

[12:47] <fglock__> k

[12:48] <autrijus> a test _is_ a bug report :)

[12:48] <fglock__> :)

[12:48] <gaal> hee

[12:53] <gaal> surely there is a better way to do what i want than this:

[12:53] <gaal> #  map { /^\(/ ? $_ : split } Text::Balanced::extract_multiple($string_to_parse, [ sub { Text::Balanced::extract_bracketed($_[0],"()") }, ] )

[12:54] <autrijus> you can import and stop using fully qualified functions :)

[12:54] <gaal> just looking at this makes me want to join a haskell monastery and grok Parsec already

[12:54] <autrijus> sure, you can take the baskell or harrorth code and run with it

[12:56] <gaal> it's kinda funny that i started out by thinking perl's just the tool to help hoogle get its lib data, and now i'm hankering for haskell.

[12:56] <gaal> maybe i should code this in Perl 6 instead?

[12:56] <autrijus> that can work too

[12:57] <gaal> we need Parlsec.pm

[12:57] <autrijus> then you can "import Pugs" and use it in hoogle ;)

[12:57] <autrijus> yeah, iblech has a small one in p5

[12:57] <autrijus> he used it to parse PIL2JS

[12:57] <autrijus> look at some back versions

[12:57] <autrijus> it's a partial clone of parsec

[12:58] <gaal> well, as soon as ghc-cvs gets fixed in debian i'm adding pugs to lambdabot :)

[12:58] <fglock__> does the name "t/data_types/array_multisub.t" makes sense?

[12:58] <autrijus> :D

[12:58] <autrijus> fglock__: sure thing

[12:58] <autrijus> fglock__: array_slice ?

[12:58] <autrijus> array_mmd?

[12:58] <autrijus> your works too

[12:59] <fglock__> array_mmd is ok

[13:14] <fglock__> redefining Array broke Test.pm - so I'm using plain say("ok") instead

[13:16] <svnbot6> r7676 | fglock++ | * added tests for Array method redefinitions: t/data_types/array_mmd.t

[13:24] <jp-autark> I'm playing around a bit with the embeded perl5 stuff, with hashes I can call both .keys and .values but not .kv - which files in the source tree should I be looking at to fix this?

[13:33] <fglock__> jp-autark: src/perl5/ - but I'm not familiar with these files, sorry

[13:33] <svnbot6> r7677 | fglock++ | * fixed t/data_types/array_mmd.t - uses Test.pm

[13:40] <jp-autark> fglock__: thanks, I was stuck in Pugs/Embed/Perl5.hs -- I'll have a look at the perl5/ dir and see if I can grook anything.

[14:43] <eric256> shouldn't passing named parameteres that arn't in the signature be an error?

[14:54] <eric256> i mean otherwise if you pass something with a name that overlaps an actual namein the sub would that break it?

[14:54] <eric256> ?eval sub x () { my $self = 5; return $self; };  x(self=>2);

[14:54] <evalbot_7677> Error: No compatible subroutine found: "&x" 

[14:55] <eric256> ?eval sub x ( @a ) { my $self = 5; return $self; };  x(self=>2);

[14:55] <evalbot_7677> Error: Insufficient number of required parameters: 0 actual, 1 expected 

[14:55] <eric256> ?eval sub x ( @a ) { my $self = 5; return $self; };  x(2);

[14:55] <evalbot_7677> \5 

[14:55] <eric256> ?eval sub x ( Pair *@a ) { my $self = 5; return $self; };  x(self => 5);

[14:55] <evalbot_7677> \5 

[14:55] <eric256> okay so it doesn't over right...but it doesn't exactly DWIM either...i dunno.

[15:04] <iblech> eric256: Yep, that's a bug (already tested for in t/subroutines/sub_named_params.t and partly in t/syntax/pairs.t)

[15:05] <iblech> geoffb: -BJS doesn't need a special safemode, as -BJS can't do *any* IO (except print, of course)

[15:05] <brother> ?eval sub x ( @a ) { my $self = 5; return $self; }; x (self=>2);

[15:05] <evalbot_7677> Error: Undeclared variable: "$?SELF" 

[15:06] <brother> ?eval sub x ( @a ) { my $self = 5; return $self; }; x(self=>2);

[15:06] <evalbot_7677> Error: Insufficient number of required parameters: 0 actual, 1 expected 

[15:06] <iblech> ?eval $?PUGS_VERSION

[15:06] <evalbot_7677> \"Perl6 User\'s Golfing System, version 6.2.10, October 10, 2005 (r7677)" 

[15:07] <iblech> ?eval my $self = 5; $self

[15:07] <evalbot_7677> \5 

[15:07] <iblech> ?eval (self => 3)

[15:07] <evalbot_7677> Error: Undeclared variable: "$?SELF" 

[15:07] <brother> besides the $?SELF-thingy. is the difference with og without a space between the functioname and the start parens intentional?

[15:09] <xerox> Yow!

[15:09] <iblech> Yep. foo (1,2) passes the array (1,2) to &foo, while foo(1,2) passes the two args 1 and 2 to &foo (see docs/quickref/control)

[15:10] <xerox> Where could I look for finding something unimplemented/to-be-fixed that a lambdafolk can implement/fix, without deep p6 knowlegde?

[15:11] <iblech> xerox: Hm... t/pugsbugs/*.t?

[15:12] * xerox looks

[15:17] <elmex> ???

[15:17] <eric256> iblech..is it a bug or just a missing error?  i guess a missing error could be considered a bug

[15:18] <iblech> eric256: It's not yet implemented

[15:18] <iblech> which brings me to...:

[15:18] <eric256> would it be impossible for a (*@) signature to accept named args as pairs?  so that trans could just be plain old .trans( [1..5]=>5);  i'm still working on fitting a knowledge of pairs into programming since we didn't have them before.. but it seems ti would be nice to accept pairs right in the arg list

[15:19] <iblech> xerox: sub foo (+$named_only_argument) {...}; foo() does work, while it should not. Want to fix? :)

[15:19] <xerox> Compiling pugs now, the system is a bit off of resources during the process :D

[15:20] <iblech> Not in the current proposal -- *@ only slurps up positional args. If you want to slurp nameds, you've to use *% (but I see that this a) stringifies the keys and b) mixes the ordering)

[15:20] <eric256> exactly

[15:21] <eric256> **@?? ;)

[15:21] <iblech> xerox: Err, thinko -- sub foo (+$named_only_argument) {...}; foo($this_is_passed_positionally) does work, while it should not

[15:22] <iblech> ;)

[15:22] <brother> method trans (Str $self; **@??inpairs) -- yikes

[15:23] <eric256> why the ?? oohhh.. .lol i meant **@    ?? ;)

[15:23] <eric256> method trans (Str $self: **@inpairs) { }';

[15:24] <svnbot6> r7678 | iblech++ | * Usual svn props.

[15:24] <svnbot6> r7678 | iblech++ | * t/oo/magical_vars.t: "self", outside of a method, shouldn't work.

[15:24] <svnbot6> r7678 | iblech++ | * Pugs.Parser: Removed special parsing for "self" (broke (self => 42))...

[15:24] <svnbot6> r7678 | iblech++ | * Pugs.Prim: ...and added &self, like luqui++ suggested.

[15:24] <xerox> iblech: what's the syntax for named arguments passing?

[15:24] <iblech> xerox: foo(named => "argument")

[15:24] <xerox> It doesn't work without names here.

[15:24] <iblech> (And it should only succeed if &foo has a signature of (+$named) or (++$named))

[15:24] <xerox> Oh, it does.

[15:24] <brother> Well, better get home and find another project to hack on.

[15:25] <iblech> ?eval sub foo (+$bar) {}; foo(42);  # works while it should not

[15:25] <evalbot_7677> undef 

[15:33] <nothingmuch> wow, the hitchhiker's guide to the galaxy movie absolutely sucks

[15:33] <eric256> nah. its just not the book

[15:33] * kolibrie decides not to go see it

[15:33] <nothingmuch> regardless of the book

[15:33] <eric256> but if you ever go to a moive about a book don't expect much ;)

[15:33] <nothingmuch> it's like "oh, that's cool, let's put it there, and then cut to another funny joke"

[15:33] <nothingmuch> there is absolutely no plot line

[15:33] <eric256> that is kind of like the books ;)

[15:34] <nothingmuch> the books have a nice way of progressing

[15:34] <nothingmuch> the movie goes nowhere

[15:34] <theorbtwo> Odd; Rozzalin liked it.

[15:35] <nothingmuch> also, i think the acting is really lousy

[15:35] <eric256> from what i remember of the books they often had very little plot too, but its been a while.  i still liked it.  anyone who goes to a movie expecting much plot these days is going to be a bit dissapointed ;)

[15:35] <theorbtwo> eric256, Rozallin.

[15:35] <nothingmuch> heh

[15:35] <theorbtwo> Grr.

[15:35] <theorbtwo>  er, Rozallin.

[15:36] <theorbtwo> irssi has the habit, of late, of replacing things matching ^([^ ])+, with a username.

[15:36] <eric256> see i thought that bad acting and cheesy everything went well with it.   didn't like some of the changes but they weren't that huge ;)

[15:39] <Eimi> On the whole I liked it, but it felt just a little to aware of how cheesy it was.  The books felt to me like most of the characters (aside from Arthur) didn't have any idea how silly it all was.  Matter-of-fact presentation of the absurd.

[15:44] <svnbot6> r7679 | iblech++ | t/builtins/strings/trans.t: Fixed test (with pairs being demagicalized now),

[15:44] <svnbot6> r7679 | iblech++ | parens around the pairs are needed now. Also added a test for <== (suggested by

[15:44] <svnbot6> r7679 | iblech++ | Larry), which would allow dropping the parens.

[15:50] <svnbot6> r7680 | iblech++ | PIL2JS: PIL, PIL::PVal: Implemented pre-generating constants, as described in

[15:50] <svnbot6> r7680 | iblech++ | http://www.sidhe.org/~dan/blog/archives/000433.html. Unfortunately, this

[15:50] <svnbot6> r7680 | iblech++ | optimization technique doesn't make a difference, so I'll revert this commit

[15:50] <svnbot6> r7680 | iblech++ | (just want to have it in the VCS).

[15:53] <svnbot6> r7681 | iblech++ | PIL2JS: PIL, PIL::PVal: Reverted r7680 as promised.

[16:02] * eric256 posted his proposal to p6l which will probably be shot down, but like autrijus said, a commited and revert is better than a noop ;)

[16:05] <cjb> Hello.  Does anyone happen to know if/where video of EuroOSCON talks is being published?

[16:09] <rafl> That would be great.

[16:12] <fglock__> cjb: this is from the YAPC: http://use.perl.org/article.pl?sid=05/09/29/0936235&from=rss - re OSCON, I only know of this: http://whytheluckystiff.net/starry/

[16:13] * eric256 wonders what rafl was refering too ;)

[16:14] <cjb> fglock__: I'm talking about EuroOSCON, which is happening now and which autrijus is speaking at, and not US OSCON.

[16:15] <autrijus> aye.

[16:15] <autrijus> cjb: I don't know of a video

[16:16] <cjb> autrijus: Aww.  Oh well.  Was really curious how the talk that went with your xul slides went.

[16:16] <autrijus> maybe you can convince claes and other NPW folks to take recording

[16:17] <cjb> Have you given the talk yet?  :)

[16:17] <autrijus> yup

[16:17] <autrijus> and hence much less stressed

[16:17] <autrijus> svn/svk/darcs/git/arch BOF going on in 13 mins

[16:17] <autrijus> after that the whole tomorrow is free

[16:17] <cjb> Heh.  Then there's not much point me convincing them now, is there?  :)

[16:17] <eric256> ?eval qx/date/

[16:17] <evalbot_7681> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[16:17] <autrijus> ...except _then_ I'd need to finish my haskell talk

[16:17] <eric256> ?eval my $x = qx/date/;

[16:17] <evalbot_7681> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[16:17] <autrijus> cjb: no, euroscon happened but I'll redeliver the talk at NPW

[16:17] <autrijus> and again at osdc

[16:18] <cjb> oh!  I see.

[16:18] <rafl> eric256: To cjb's question.

[16:18] <xerox> Haskell talk!  Haskell talk video!

[16:18] <autrijus> xerox: I still have to _write_ the talk...

[16:20] * xerox continues singing

[16:22] <brother> Hmmm, registraion for npw is still open

[16:23] <theorbtwo> Hm, could it be that evalbot doesn't support qx because it doesn't have parrot embedding?

[16:25] <chip> good day

[16:26] <eric256> theorbtwo i expected a saftey error of some sort...just reading S02 and thought i'd give it a shot

[16:27] <autrijus> isn't qx about system()?

[16:27] <wolverian> eric256, hmm, wouldn't *%pairs is shape(...) work? 

[16:27] <theorbtwo> Oh, right, nevermind...

[16:27] <eric256> wolverian that would still loose order

[16:27] <theorbtwo> qx certianly won't work, then, though I wouldn't expect it to get that error.

[16:27] <theorbtwo> Oh...

[16:27] <wolverian> eric256, hm, right. *%pairs is Hash::Ordered is shape(...) is getting long.

[16:28] <theorbtwo> ?eval sub qx ($a) {return 5}; qx(date);

[16:28] <evalbot_7681> Error: No compatible subroutine found: "&date" 

[16:28] <eric256> well as a signature its probably okay to be long. just neesd to be doable

[16:28] <theorbtwo> ?eval sub qx ($a) {return 5}; qx("date");

[16:28] <evalbot_7681> 5 

[16:28] <theorbtwo> It can't even parse it.

[16:28] <chip> autrijus: is %MY or %OUTER::MY intended to allow key insertion at runtime?

[16:28] <theorbtwo> ?eval this((does ((not ((parse

[16:28] <evalbot_7681> Error:  unexpected "t" expecting program 

[16:28] <theorbtwo> ?eval asdf/foo/

[16:28] <evalbot_7681> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[16:28] <theorbtwo> Right.

[16:28] <theorbtwo> ?eval 1+

[16:28] <evalbot_7681> Error:  unexpected end of input expecting end of input or term 

[16:29] <theorbtwo> Hm.

[16:29] <eric256> oddly theorbtwo that gives a different error in the pugs command line than the eval bot

[16:30] <iblech> chip: IIRC, %MY (and thus %OUTER::MY) is frozen at compile-time. Only %OUR can be changed at runtime

[16:33] <autrijus> chip: no and no

[16:39] <nothingmuch>  http://www.joelonsoftware.com/articles/Wrong.html

[16:39] <nothingmuch> this article has me thinking

[16:40] <nothingmuch> it's an adhoc type system, based on variable names

[16:40] <nothingmuch> there are two problems with it:

[16:40] <nothingmuch> the user maintains it

[16:40] <nothingmuch> and it's not inferred

[16:41] <nothingmuch> this is really better done with tainting

[16:41] <nothingmuch> compile time tainting, if possible

[16:41] <nothingmuch> does anybody have any additional thoughts?

[16:42] <chip> iblech, autrijus: figured as much.  Parrot has to allow for mutable %MY for some HLLs though (e.g. tcl)

[16:43] <nothingmuch> chip: perl 6 itself has made some interesting decisions in that respect

[16:43] <nothingmuch> for example, sub params are readonly by default

[16:43] <nothingmuch> it seems very balanced

[16:43] <iblech> and only vars declared "is env" are visible via %CALLER::

[16:43] <iblech> sub foo { say $CALLER::abc }; my $abc = 42; foo()  # dies

[16:44] <chip> nothingmuch: indeed, I really don't see the point of mutable %MY ... Tcl should never have done that.  If you need a mutable hash, just declare one.  Duh

[16:44] <iblech> sub foo { say $CALLER::abc }; my $abc is env = 42; foo()  # ok

[16:44] <nothingmuch> eep! since when does 'is env' apply?

[16:44] <chip> 'is env'?  *This* is new.

[16:45] <iblech> IIRC it came with an update to S02, approx. 1 month ago

[16:45] <nothingmuch> that is an odd change

[16:46] <nothingmuch> that really breaks the hack-fu of CALLER::

[16:46] <iblech> ($_, $! and $/ are always implicitly declared "is env")

[16:47] <chip> iblech: Oh wait, you may be missing something

[16:47] <nothingmuch> i always thought it's only purpose was subverting good behavior

[16:47] <chip> iblech: n/m, in p6 $_ does require declaration.  grr

[16:48] <chip> Soudns like Parrot can't implement CALLER any more

[16:48] <chip> at least, not in a generic way that will work for p6

[16:48] <iblech> chip: Hm? $_ is implicitly declared (as a lexical)

[16:48] <chip> iblech: oh, please just ignore that, it was a braino

[16:48] * nothingmuch wonders if you can do CALLER:: by force

[16:50] <chip> nothingmuch: &Perl6::caller_impl (or is that &Perl6.caller_impl?) could walk up through activation frames, find the appropriate %MY, and return the value iff the given variable is found to be 'is env'

[16:50] <nothingmuch> err, i don't mean implementation wise

[16:51] <nothingmuch> i mean as a language feature

[16:52] <chip> I think all Parrot _needs_ to provide is a non-recursive $activation_record.lexical_lookup($name)

[16:52] <chip> "by force"?

[16:52] <chip> %CALLER::MY{'$no_i_really_mean_it'}  could be what you want

[16:52] <nothingmuch> erm, i mean $CALLER::foo; # $foo in caller's lexical scope even if it's not 'is env'

[16:52] <nothingmuch> hmm, that makes sense

[16:53] <chip> so %MY is env

[16:53] <nothingmuch> i hope ;-)

[16:53] <chip> heh.  Actually I think that's an interesting point

[16:53] <chip> What is %MY{'%MY'}?

[16:54] <chip> More to the point, what is exists %MY{'%MY'}?

[16:55] <PerlJam> I would guess false

[16:55] <nothingmuch> how come false?

[16:55] <iblech> I would guess %MY<%MY> eqv %MY

[16:55] * eric256 worries as he hears a commercial for doggy camp/daycare....thats just scary

[16:55] <nothingmuch> ?eval my %hash; %hash<hash> = \%hash; \%hash;

[16:55] <evalbot_7681> {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash" => {("hash"

[16:55] <nothingmuch> see? that almost makes sense

[16:55] <chip> heh.  Garbage collection doesn't scare me, becuase I don't have to write it

[16:56] <PerlJam> nothingmuch: I've never thought of %MY as "living" in the same space as lexicals.

[16:56] <nothingmuch> how come? it's in the lexical scope

[16:56] <iblech> Hm, then maybe %MY should be named %?MY?

[16:56] <PerlJam> iblech: That's what I think

[16:56] <chip> what's with the '?'?

[16:56] <nothingmuch> yet, it should

[16:56] <chip> oh, right.  "Compiler feature"

[16:56] <nothingmuch> chip: special vars are e.g. $*OS and $?SUB - you know where they are by the prefix (global vs lexical)

[16:57] <PerlJam> chip: ? indicates stuff you can get at with static analysis.

[16:57] <iblech> Yep, Larry explicitly said that $? vars don't have to be accessible by $::("...") or %MY:: etc.

[16:58] <nothingmuch> hmm

[16:58] <chip> %?CALLER::?MY<> ... too many ?s

[16:59] <iblech> sorry, dinner &

[16:59] <PerlJam> not sure, but I  think the ? can be omitted.  It's only required for disambiguation.  (but I could be completely off base here)

[16:59] <PerlJam> so %MY == %?MY

[16:59] <PerlJam> or is that %MY eqv %?MY ?

[17:00] <PerlJam> Whatever the right equivalence operator is :)

[17:00] <eric256> i don't think so PerlJam...that doesn't make sense.  why have the ? at all then?

[17:02] <PerlJam> eric256: it's a similar thing to the ^ in $^vars.  When you say $^foo it actually makes a $foo.

[17:02] <PerlJam> but, like I said, I could be way off base.

[17:02] <eric256> http://dev.perl.org/perl6/doc/design/syn/S02.html

[17:03] <eric256> doesn't mention either of those...might not be up to date, or might be mentioned somewhere else.dunno

[17:03] <nothingmuch> PerlJam: there are several right equivalence operators ;-)

[17:03] * nothingmuch wonders if that mess will ever be resolved

[17:03] <eric256> it mentions them, it doesn't mention droping the ^ or ? ;)

[17:04] <eric256> nothingmuch: you don't think we need twelve equivalence operators?

[17:04] <nothingmuch> =)

[17:04] <PerlJam> eric256: but I know that $^foo implies $foo to be true however.

[17:04] <chip> WTF ... that says it's MY, not %MY

[17:04] <chip> So the whole conversation is moot

[17:05] <eric256> PerlJam.....how do you know that?

[17:06] <PerlJam> eric256: because I was puzzled by that implementation decision in pugs until autrijus pointed me at something that larry said.

[17:07] <eric256> hmmm. then it doesn't seem to have been folded into the docs. ...if you could find that agian it should probably be fixed in the docs../me contiues to search the docs

[17:08] <chip> there's no ? ... you can't have a twigil without a sigil, and MY has no sigil

[17:08] <PerlJam> Given the mutability of the language though, what I knew last week may not be valid this week :)

[17:09] <eric256> stupid google doesn't like to search on puncuation

[17:11] <PerlJam> chip: see the thread you started on p6l at http://groups.google.com/group/perl.perl6.language/browse_thread/thread/dab58d8e966b0804/98bb4fa1a3372569?q=%25MY&rnum=3#98bb4fa1a3372569

[17:11] <PerlJam> :-)

[17:11] <geoffb> iblech, fglock__, OK, so Haskell backend has a safemode, and JS backend doesn't need one.  What about P5 backend?

[17:12] <chip> PerlJam: gee whiz, I completely forgot that

[17:12] <chip> Great thing about ADD is you can enjoy the same conversation many times

[17:12] <PerlJam> Seeing how it was 3 years ago, I'm not surprised.

[17:13] <PerlJam> Still it might do for a rehash on p6l just to make sure the current version of perl6 reality meshes properly

[17:13] * Limbic_Region wonders if chip was making a general comment about ADD or his personal experience

[17:14] <chip> Limbic_Region: I'm sorry, what were we talking about?

[17:14] <Limbic_Region> you said the great thing about ADD is you can enjoy the same conversation many times

[17:14] <eric256> lol

[17:14] * chip rolls his eyes

[17:15] * eric256 watches L~R fall for the olds trick ;)

[17:15] <chip> Importing is a bitch

[17:15] * Limbic_Region was being serious

[17:15] <chip> sub import { caller(1).MY{'&foo'} = sub { ... } }

[17:17] <fglock__> geoffb: if safemode is a runtime thing it should be easy to add

[17:18] <geoffb> I don't know where it happens.  I just note that now that evalbot can call an arbitrary backend, we need to make sure they are as locked down as the haskell one is.  :-)

[17:19] <eric256> ?eval:p5 system('date');

[17:19] <evalbot_7681> Can't locate Scriptalicious.pm in @INC (@INC contains: /home/fibonaci/devel/pugs-base/perl5/PIL-Run/lib /home/fibonaci/devel/pugs-base/perl5/PIL-Run/.. /home/fibonaci/devel/pugs-base/perl5/PIL-Run/../Perl6-Value/lib /home/fibonaci/devel/pugs-base/perl5/PIL-Run/../Perl6-Container/lib /home/fibonaci/devel/pugs-base/perl5/PIL-Run/../Perl6-MetaModel /home/fibonaci/devel/pugs-base/perl5/PIL-Run/../Perl6-MetaModel/lib /etc/perl /usr/local/lib/perl/5.8.7 

[17:19] <eric256> well it doesn't work. ;)

[17:20] <eric256> i never see fibonaci around...it seems he is compiling pugs constantly too. figured we could just use the auto build on feather...

[17:20] <fglock__> most file operations are not implemented in p5 yet - so it's fine to add safemode to the TODO

[17:20] <eric256> ?eval:p5 print "hello";

[17:20] <evalbot_7681> Can't locate Scriptalicious.pm in @INC (@INC contains: /home/fibonaci/devel/pugs-base/perl5/PIL-Run/lib /home/fibonaci/devel/pugs-base/perl5/PIL-Run/.. /home/fibonaci/devel/pugs-base/perl5/PIL-Run/../Perl6-Value/lib /home/fibonaci/devel/pugs-base/perl5/PIL-Run/../Perl6-Container/lib /home/fibonaci/devel/pugs-base/perl5/PIL-Run/../Perl6-MetaModel /home/fibonaci/devel/pugs-base/perl5/PIL-Run/../Perl6-MetaModel/lib /etc/perl /usr/local/lib/perl/5.8.7 

[17:20] <eric256> lol. nm

[17:21] <geoffb> fglock__, fair enough.  Please do, since you know where it should go.  :-)

[17:22] <fglock__> ok

[17:22] <PerlJam> Limbic_Region: all of us computer-types suffer from some form of ADD I bet.

[17:22] <geoffb> PerlJam, or OCD

[17:22] <PerlJam> or RSI

[17:22] <PerlJam> or OCR

[17:22] <PerlJam> or ... wait, what were we talking about?

[17:22] <geoffb> heh

[17:22] <PerlJam> (I guess that one won't work twice ;-)

[17:23] <Limbic_Region> PerlJam - that wasn't the question I was asking though

[17:23] <eric256> or we suffer from laziness ;)

[17:23] <Limbic_Region> I was interested in faulty memory being associated with ADD

[17:24] <PerlJam> Limbic_Region: you actually didn't ask anything.  You wondered if chip were speaking from personal experience or just making a general comment.  I'd be willing to bet both :

[17:24] <PerlJam> er :)

[17:25] <Limbic_Region> *shrug*

[17:25] <chip> LR: In my experience, splitting my attention leads to difficulty with forming long-term memories of experiences

[17:25] <Limbic_Region> chip - ok, that makes a lot of sense

[17:25] <geoffb> Anyone know how to enter arbitrary unicode characters into xchat?

[17:26] <chip> On the other hand, hyperfocus is another part of the experience, and that leads to really good memory.  I still remember for example that "JMP 06CCH" is how you simulate hitting the reset button on a TRS-80 Model I with Level II BASIC

[17:27] <chip> It's not so much ADD as ACD - attention control disorder.  But I digress.  (Ironically)

[17:27] <Limbic_Region> right - I tend to hyperfocus when speaking/writing and can remember things almost verbatim but if you asked me anything else that was going on around me at the time I would be a total blank

[17:27] <chip> heh.  I resemble that remark

[17:28] <PerlJam> memory is a strange thing.

[17:29] <Limbic_Region> sure is - did a highschool science fair experiment on it

[17:29] <Limbic_Region> all the research was real - all the data was cooked

[17:29] <PerlJam> Once, after my parents moved, I tried to remember their new phone number.  I couldn't for the life of me do it no matter what tricks I tried.

[17:29] * eric256 can't remember phone numbers but can easily recal ip addresses and the password to his parents dialup account from 10+ years ago ;)

[17:29] <Limbic_Region> Kevin Trudeau's Mega Memory system - I did a statistical analysis on its effectiveness

[17:29] <PerlJam> Then one day several months after I'd given up, I wanted to call them and bam! the number was at the tip of my brain ready to be accessed.

[17:30] <PerlJam> Limbic_Region: how did it fare?

[17:30] <Limbic_Region> people often swap memory and recall interchangeabbly but they are really 2 different things

[17:30] <Limbic_Region> 1st prize local, 1st prize state - opted not to go to nationals

[17:30] <geoffb> Limbic_Region, there's some of that in anyone . . . there was a great experiment where the researches recorded basketball players (IIRC) practicing, and then asked subjects to count how many times the ball was held by players from each team.  Then at the end, they asked if the subject saw anything else of interest -- most said no.  Then the researcher rewound the tape to point out the man in an ape costume walk onto the court, pa

[17:30] <geoffb> use, wave at the camera, and walk off. 

[17:31] <Limbic_Region> figured I had pressed my luck far enough

[17:32] <Limbic_Region> In any case, chip's statements make perfect sense after clarification and are in alignment with my own personal experiences

[17:34] * PerlJam sends away for eidetic-memory-in-a-bottle and hopes it works

[17:36] <svnbot6> r7682 | fglock++ | * PIL-Run - emits a warning if the environment var PUGS_SAFEMODE is enabled

[17:44] <chip> geoffb: That's really funny ... if you could find a link to that I'd be obliged

[17:45] <geoffb> chip, wow, been a while.  I'd just be googling myself.

[17:46] <Limbic_Region> mind hacks chip

[17:46] <geoffb> OK, that came out wrong.  You know what I meant.

[17:46] <Limbic_Region> if you haven't seen the book, you might want to

[17:46] <chip> "Did you google her?" "I'm pretty sure she's too young."

[17:46] <chip> Limbic_Region: thanks

[17:46] <Limbic_Region> http://www.mindhacks.com/

[17:46] <Limbic_Region> I haven't read the whole thing but some of the experiments are definately fun

[17:48] <Limbic_Region> I have a problem reading any book that I can't hyperfocus on

[17:48] <Limbic_Region> but if I do - it is usually consumed in a day or two

[17:51] <Limbic_Region> I am sure everyone by now has seen the email instructing you to lift your right leg and start doing clockwise circles

[17:51] <Limbic_Region> then, while continuing the circles, try and draw the number 6 without having your leg change directions

[17:54] <geoffb> Limbic_Region, hadn't seen that email (thankfully), but it's an interesting experiment

[17:54] <Limbic_Region> I have had moderate success in "beating" it - it involves timing the circles such that they intersect at the top and bottom

[18:02] <chip> coordinated mirror action

[18:03] <chip> like mirror writing.  clever

[18:23] <geoffb> testing: â

[18:23] <geoffb> ah, ok, that seemed to work

[18:27] <autrijus> mm?

[18:28] <geoffb> Didn't know how to get unicode into xchat.  Finally just used Gnome's charmap utility.  But first I had to learn how to use *that*.  :-)

[18:29] <geoffb> oh, autrijus, how was the version control BOF?

[18:29] <autrijus> it's going on

[18:30] <autrijus> lots of svn weaknesses being identified out

[18:30] <autrijus> mostly O(n) problems

[18:30] <autrijus> like finding which files in which branches and tags

[18:31] <obra> what other systems were represented?

[18:32] <geoffb> autrijus, Are these things that other systems do better, or just that the talk has been very SVN-centered?

[18:35] <geoffb> Oh, nothingmuch, if you haven't seen it yet, a kind soul pointed me to: http://www.zenetics.com/camel/docs.html.  It's a series of articles about how to write a Forth interpreter, and apparently the resulting Forth is actually in use for various microcontrollers.

[18:37] <fglock__> autrijus: re lazy lists: can I use "if %ENV{PUGS_LAZY} { use xxx_test_implementation }" in Prelude, in order to not break existing programs?

[19:26] *** ods15_ is now known as ods15

[19:31] <chip> somebody point me to the implementation of 'is export'?

[19:35] <iblech> chip: It's somewhere in src/Pugs/Parser.hs

[19:36] * PerlJam can't help but read src/Bugs/Parser.hs for some reason

[19:36] <iblech> fglock__: Problem would be, of course, that changes to $PUGS_LAZY would not be effective, as the Prelude is precompiled...

[19:36] <eric256> looks like line 436 of Parser...

[19:37] <PerlJam> iblech: he could, of course, provide an alternate Prelude.

[19:37] <fglock__> iblech: defining "multi infix:<..>" in Prelude didn't work - I must be doing something wrong

[19:37] <fglock__> PerlJam - I'll try that

[19:38] <eric256> multi *infix:<..>

[19:38] <eric256> i think you need the star, but thast just a nagging memory of some fight with prelude.pm i had way back

[19:39] <spinclad> autrijus: "its syntax wrought with utmost care" maybe?

[19:40] <iblech> fglock__: That might be the old problem that exporting happens at parse time (i.e., prelude precompilation time) instead of use() time -- see autrijus's comment in t/pugsbugs/attribute_hash.t 

[19:41] <spinclad> (s/its/the/, natuerlich)

[19:43] <fglock__> I guess I just forgot "is export" - testing

[19:44] <spinclad> .oO ( a Came'l -- interesting wordstress)

[19:46] <spinclad> autrijus: "_One_ starless night in '94" perhaps?

[19:48] <spinclad> .oO ( flared through' mirrors' of Eff-You-net -- scans oddly )

[19:53] <autrijus> spinclad: please commit ahead :)

[19:53] <autrijus> "one" is good

[19:54] <autrijus> I got dconway signed on as pugs committer just so he can fix larry_mariner.txt

[19:54] <autrijus> (we'll be presenting that at osdc)

[19:54] <spinclad> ah... kin i have a token too?

[19:54] <autrijus> sure! mail?

[19:54] <autrijus> <- surprised spinclad is not yet

[19:54] <spinclad> [email@hidden.address]
[19:55] <autrijus> welcome aboard! add yourself to AUTHORS please

[19:55] <fglock__> autrijus: I can't find out how to make "multi infix:<..> ( $a, $b ){}" work in Prelude.pm - it works if I use it in a program.

[19:55] <autrijus> fglock__: ok, it works iff we change Eval.hs so that instead of Syn "..", it uses the real infix:<..>

[19:55] <spinclad> thankee kindly good sir -- i shall take most special care of it

[19:55] <autrijus> have fun :)

[19:55] * fglock__ will have to actually learn haskell some day

[19:56] <autrijus> fglock__: I hope to turn my talk thursday into something that, when finished, one can get hacking at pugs internals 

[19:56] <fglock__> will look at Eval.hs

[19:56] <fglock__> autrijus: great!

[19:57] <brother> t/builtins/list/*.t has a couple of :todo<bug> along the lines of ".min should not work on scalars" but min is also tested for a subroutine form. 

[19:57] <autrijus> fglock__: hmm, sec

[19:58] <brother> It can be fixed by movin min into List::min in Prims.hs and define sub min(*@elems) { @elems.min } in Prelude.pm

[19:58] <brother> Would that be the right way?

[19:58] <autrijus> ?eval multi *infix:<..> (Int $x, Int $y) { die 3 }; 1..10

[19:58] <evalbot_7682> Error: 3 

[19:58] <autrijus> brother: sure, that worksforme

[19:58] <autrijus> brother: you a committer yet?

[19:58] <brother> yup

[19:58] <gaal> aloha

[19:58] <autrijus> yo gaal

[19:58] <spinclad> brother can you paradigm?

[19:59] <eric256> why do you need the sub in prelude?

[19:59] <eric256> to handl the min @x form?

[19:59] <autrijus> actually min @x also works if @x has a method of min

[19:59] <autrijus> it's the

[19:59] <autrijus> min(1,2,3,4,5)

[19:59] <autrijus> form

[19:59] <autrijus> that is the problem

[19:59] <gaal> say, did the rubish juggler stop by since he was first here?

[19:59] * eric256 has never heard anyone say "can you paradigm", can you dance, can you sing..sure..but paradigm?

[20:00] <brother> spinclad: parse error?

[20:00] <autrijus> it's like "can you zeitgeist?"

[20:00] <eric256> ahh autrijus thanks

[20:00] <gaal> can you noun?

[20:00] <autrijus> gaal: mm?

[20:00] <eric256> ?eval my @x = (1..5); print shift @x, 'hello', @x;

[20:00] <evalbot_7682> Error: No compatible subroutine found: "&shift" 

[20:00] <brother> gaal: no bu I can verb a noun

[20:00] <eric256> shoudl that realy work? there is a test for it, but it seems wrong to me.

[20:00] <eric256> ?eval my @x = (1..5); print shift(@x), 'hello', @x;

[20:00] <evalbot_7682> 1hello2345bool::true 

[20:00] <gaal> autrijus: the Juggler fellow who met you in some con! who does ruby, who did the PoPoPo[..] thing

[20:01] <gaal> brother: that was already a verbed noun!

[20:01] <autrijus> anyway, I sent committer bits to illustrious hackers like artur bergman (sky), elizabeth mattijsen, damian, et al

[20:01] <gaal> whoor!

[20:01] <spinclad> brother: it also recalls 'brother, can you spare a dime?'

[20:01] <gaal> s/or/t/

[20:01] <theorbtwo> Brother: You can't verb zeitgeist or paradgim very well.

[20:02] <autrijus> oh schuyler too

[20:02] <autrijus> "If you don't zeitgeist your code, I'll paradigm you from our team!"

[20:03] <spinclad> from an earlier ... 'recession'

[20:04] <eric256> any thoughts on the shift question? ;)

[20:05] <theorbtwo> schuyler?  Towns in nebraska and virgina, and three notable people?

[20:07] <autrijus> theorbtwo: http://search.cpan.org/~sderle/

[20:07] <gaal> wow, liz is prolific

[20:09] <autrijus> and she is pleasantly surprised by the idea of STM

[20:09] <autrijus> which happily renders most of her modules obsolete (in a good way)

[20:09] <gaal> that happened to me once!

[20:09] <gaal> i blame yuval for that :) (Class::Accessor::Ref)

[20:09] <theorbtwo> Oh, is she still active outside the monistary?

[20:09] <theorbtwo> (Sniffle.)

[20:10] <gaal> (in a good way)

[20:11] <gaal> she's a memcached user, cool :)

[20:22] <Juerd> Who here is going to euroscon (I'm not)?

[20:44] <obra> liz of forks fame, autrijus?

[20:47] <nothingmuch> gaal: why am I to blame for C::A::R?

[20:47] <Juerd> obra: Assuming there is no other liz with that name, it must be

[20:48] <autrijus> obra: aye

[20:48] <obra> autrijus: neat

[20:48] <obra> . o  O { Can we get STM in perl5? }

[20:48] * obra wants perl5 to be perl6 before perl6 is

[20:48] <autrijus> yeah

[20:48] <autrijus> it's just internal hacking is prone to break things.

[20:49] <autrijus> as all porters are painfully aware.

[20:49] <autrijus> so, yes, possible, but I doubt anyone is going to have the huge tuits to do it.

[20:49] <geoffb> obra, I'm betting some of ponie's massive internals refactoring might help that

[20:49] <Juerd> http://search.cpan.org/~elizabeth/  # If even only a quarter of it would ever reach Perl 6, it would be great.

[20:49] * obra bites his tongue

[20:49] <geoffb> obra, what?  Do you work on ponie?

[20:50] <xerox> autrijus: any news from the xul side?

[20:50] <obra> <- junior parrot/pge/etc project manager

[20:50] <geoffb> obra, heh

[20:51] <geoffb> Juerd, wow, that is a pretty impressive list

[20:51] <Juerd> By the way, I asked for a prototype t-shirt and hope to have it by tomorrow or thursday

[20:51] <Juerd> ("s:g/5/6/;")

[20:52] <autrijus> yeah, liz mentioned she'd like to port some of them to perl6 -- but I mentioned she really want to talk with chip/leo -- but she doesn't seem to think parrot's threading stuff is healthy now -- so maybe the haskell runcore for now? not sure

[21:05] <gaal> nothingmuch: you're to blame for my realizing it's no longer needed

[21:05] * nothingmuch forgot how

[21:05] <gaal> fields

[21:05] <gaal> though i gotta admit, i never use 'em in perl 5 :)

[21:12] <cognominal_> BooK is speaking of porting Acme::Meta::Syntactic to Perl6!

[21:26] *** r0nny_ is now known as r0nny

[21:28] <brother> ?eval sub foo (*@list) { say "ping" } ; 42.foo

[21:28] <evalbot_7682> ping bool::true 

[21:51] <stevan> autrijus: I am commiting the explicit eigenclass/class methods are inheritable fix right now

[21:52] <autrijus> ooooh.

[21:52] <stevan> it for sure still needs some refactoring 

[21:52] <stevan> its about a 400% slowdown :)

[21:52] <stevan> class creation is much more expenisive

[21:53] <autrijus> mmmhm

[21:53] <autrijus> linear slowdown doesn't sound so bad :)

[21:53] <stevan> but this is the non-optimal version

[21:53] <stevan> this is the "it finally works without endless recursion" version :)

[21:54] <stevan> it has one very ugly "magic number" in it too

[21:54] <brother> I can't find any excuse for foo being used as a method in that eval

[21:55] <autrijus> brother: if meth lookup fails it tries to revert into bindings in scope.

[21:55] <autrijus> it's one of the less-specced corners.

[21:55] <stevan> autrijus: I will clean this up a little more tomorrow, hopefully it will help the speed a bit 

[21:56] <xerox> autrijus: could you repaste the pugs slides url?

[21:56] <stevan> but time for dinner now :) &

[21:57] <svnbot6> r7683 | stevan++ | Perl6::MetaModel - 

[21:57] <svnbot6> r7683 | stevan++ | * class methods are now inheritable

[21:57] <svnbot6> r7683 | stevan++ |     - altered all tests to account for this

[21:57] <svnbot6> r7683 | stevan++ | NOTE: this has caused approx a 400% slow-*down*, this is because

[21:57] <svnbot6> r7683 | stevan++ | every class now has explicit eigenclasses, and that is expensive.

[21:57] <svnbot6> r7683 | stevan++ | This should be though of as the "make it work" phase, the "make it right"

[21:57] <chip> autrijus: I wonder if you'd be willing to recreate your SVK::Commands::List hack from Herrnbaumgarten

[21:57] <svnbot6> r7683 | stevan++ | and "make it fast" phases are still TODO :)

[21:57] <geoffb> autrijus, would you mind journaling the info from the SCM BOF at some point

[21:57] * geoffb is interested in that sort of thing

[21:57] <chip> autrijus: a version of 'svk list' that prints relative path of local file rather than an indented basename

[22:01] <autrijus> chip: I sent patch to clk some time ago, not sure

[22:02] <autrijus> geoffb: you may better ask clkao as I joined them at the final 20 mins

[22:02] <autrijus> so maybe they talked about a lot of other things first

[22:02] <autrijus> stevan: cool! I'll check it out

[22:02] <autrijus> xerox: see my journal.

[22:02] <autrijus> http://blog.pugscode.org/

[22:02] <autrijus> ok, I gotta sleep.

[22:02] <autrijus> another long day ahead tomorrow :)

[22:02] * autrijus waves &

[22:03] <geoffb> clkao: same question I just sent to autrijus, namely, can you (or does someone) have notes on what came up in the SCM BOF?  Inquiring minds want to know.

[22:15] <clkao> geoffb: ya, kfogel promised to take notes

[22:16] <geoffb> clkao, thanks.

[22:16] <geoffb> Where would his notes be?  (no ~kfogel on use.perl.org)

[22:17] <gaal> the "arrow length" axis makes me giggle every time i see it

[22:17] <Shillo> Woof.

[22:17] <gaal> autr*: s/Parrotfolks/Parrotfolk/

[22:17] <justatheory> meow

[22:17] <Shillo> :)

[22:18] <gaal> (in pugs slides) (mm, too late actually, now)

[22:18] <Juerd_> Does it make sense to have @array.chars, @array.graphs, etc?

[22:18] <Juerd_> Doesn't that feel wrong without @array.uc, @array.int, @array.sprintf, etc?

[22:18] <Juerd_> Shouldn't we explicitly mention we want a sum of individual values, rather than having these methods?

[22:18] <gaal> Juerd_: what do they do? ([~] @array).chars?

[22:19] <Juerd_> Yes

[22:19] <Juerd_> Though sum(@array>>.chars) is probably more efficient

[22:19] <Juerd_> It makes no sense to me to have these methods on arrays

[22:19] <geoffb> clkao (sorry forgot to use your nick earlier), where would I look for kfogel's notes?

[22:19] <Juerd_> We have hypers to make it easy, and I don't think anyone will be using this more than a few times.

[22:20] <clkao> geoffb: i don't know, but i will let you know once it's available

[22:20] <gaal> wait didn't the .chars-returns-list proposal go in?

[22:20] <geoffb> clkao, thanks.

[22:20] <Juerd_> gaal: No... Larry's awfully quiet about that... Or I missed it.

[22:20] <Juerd_> gaal: Still, I think the point is valid regardless of chars semantics in list context

[22:21] <Shillo> Juerd_: Don't you need something like that for print @array?

[22:21] <Juerd_> Shillo: Why?

[22:21] <gaal> Yes, I see they are orthogonal.

[22:21] <Juerd_> Shillo: There's always sum(@array>>.chars) if you NEED the data. That is clear: what is wanted is explicitly written

[22:21] <Shillo> Hmm... Good question. Why did I say that.

[22:21] <Juerd_> @array.chars only raises questions

[22:22] <Shillo> I know I use flatten to string a lot in LISP.

[22:22] <Juerd_> Is it a sum? A list? A histogram?

[22:22] <Juerd_> An average, perhaps? Unlikely, but possible. 

[22:22] <Shillo> (meaning, flatten list of lists of lists... into string)

[22:22] <Juerd_> Characters as a property of an array makes no sense, so the answer isn't safely guessable.

[22:22] <dduncan> hello

[22:23] <Juerd_> Shillo: That's unrelated

[22:23] <Juerd_> Shillo: If you want to flatten, and then count, you can still do @array.concat.chars

[22:23] <Shillo> Mostly because it allows me to do sloppy functional programming - I do bunch of maps, conses, lists etc, then just pancake everything on output. Well, it's a useful thing for array to be able to do

[22:23] <Shillo> Esp. if you implement it correctly.

[22:23] <Juerd_> Shillo: As gaal's ([~] @array).chars, which is semantically equal, it's a bit inefficient in many cases :)

[22:24] <dduncan> question: is http://dev.perl.org/perl6/doc/synopsis.html the most up to date version of the synopsis, or is there a more up to date versions elsewhere?

[22:24] <Shillo> That is, determine the size, prealloc, fill with chars.

[22:24] <Juerd_> Shillo: @array.chars can never be lvalue for pre-allocation.

[22:24] <Juerd_> It can't know how to distribute.

[22:24] <Juerd_> And some of its elements may not even be strings (another reason for not having the method at all)

[22:24] <Shillo> Uh, why are you talking about lvalue?

[22:25] <dduncan> that one says last updated december 2004 for synopsis 12, for example

[22:25] <Juerd_> Pre-allocation in Perl is usually done by assigning to an lvalue that usually returns a count.

[22:25] <Shillo> I'd think array.chars would be implemented as low as necessary to make it fast.

[22:25] <Shillo> Er, at as low a level as necessary.

[22:25] <gaal> d'oh, the fib example in the pugs talk is wrong

[22:26] <Juerd_> Shillo: It can't be much lower than summing the individual .chars values

[22:26] <Juerd_> Shillo: As that will be required.

[22:27] <Shillo> So the implementation would be @tmp = @array>>.chars; $str = " " x [+] @tmp>>.count; copy the individual strings

[22:28] <Shillo> I assume strings are immutable, so this wouldn't really work - which is why lower level implementation (i.e. parrot level) would be necessary.

[22:29] <Shillo> But concatenate-array-quickly -is- useful.

[22:29] <Shillo> Hmm... reading above, did you mean that by @array.concat?

[22:30] <Juerd_> Yes.

[22:30] <Juerd_> @array.chars does not concatenate. It returns the sum of the numbers of characters in all the elements.

[22:31] * Shillo conveniently explains his thickness by sleep deprivation. :)

[22:31] <Juerd_> What does weight have to do with this?

[22:31] <Shillo> Hmm?

[22:32] <Juerd_> thickness?

[22:32] <Shillo> Oh, thick is another word for stupid. Took me a bit to catch on.

[22:32] <Juerd_> Oh.

[22:32] <Shillo> I get slow when I don't sleep. :)

[22:33] <Juerd_> Does this imply that fat people are perceived as stupid, where you live?

[22:33] * Shillo now whines. You killed my joke.

[22:33] <Shillo> Er, no.

[22:33] <Shillo> That's thick-headed.

[22:33] <Shillo> Purely English idiom.

[22:33] <Juerd_> Even if the rest of the body is fat too?

[22:33] <Shillo> Unrelated to body fat.

[22:33] <Juerd_> English is SO hard to grok.

[22:33] <Shillo> Refers to skull... er, thickness. :)

[22:34] <Shillo> Yer telling me. It's not my first language, either.

[22:34] <Juerd_> What is yours?

[22:34] <Shillo> Croatian.

[22:35] <Juerd_> I know absolutely nothing about croatian :)

[22:35] <Juerd_> Not even what script it uses

[22:35] <Shillo> And a friend of mine was telling me how difficult was for him to learn... umm, Netherlandish? :)

[22:35] <Juerd_> Dutch

[22:35] <Juerd_> Nederlands.

[22:35] <Shillo> Right.

[22:35] <Shillo> Dutch. I know that. Usually. When I've slept. And stuff.

[22:35] <Shillo> Croatian... Er, ISO-8859-2. That's Latin, with Eastern Europian extensions.

[22:35] <Juerd_> German (Deutsch, not Dutch) for Dutch is Niederlandisch

[22:36] <Shillo> No, I know it's called Dutch in English. Just had a brain-fart. :)

[22:36] <Juerd_> Okay :)

[22:36] <geoffb> Juerd_, thick-headed is I think directly related to "Can't you get that through your think skull?!?", as Shillo pointed out

[22:36] <Shillo> And only speak a few words of German. I understand a lot more, mostly from all the trips to Austria.

[22:37] <geoffb> er, thick skull, bah

[22:37] <Juerd_> geoffb: A thick skull could indicate extra brain mass, though :)

[22:37] <Shillo> :)

[22:37] <Shillo> Juerd_: Actually, it kinda refers to not enough space for the actual brain. :)

[22:37] <geoffb> Juerd_, in the same overall displacement, thicker skull == less room for brain.  :-)

[22:37] <Juerd_> Why would less brain require more protection? :)

[22:38] * Juerd_ concludes that both English AND biology make no sense.

[22:38] * Shillo groans and gives up. :)

[22:38] <geoffb> cro-magnons -- thicker fore-bones, less forebrain.

[22:38] <Shillo> Mind ya, I've been trying to learn Japanese for 5 years now. Keyword being -trying-. Now /that's/ a weird language.

[22:38] <coral> Juerd: too much room and it sloshes around

[22:38] <Juerd_> Aspie meets idioms... Always interesting.

[22:39] <coral> bangs up against the sides and all

[22:39] <Juerd_> coral: Heh

[22:39] <Juerd_> I think I have that. I can feel my brain mass moving when I shake my head :)

[22:39] <Shillo> Although, some Croatian idioms tend to weird out foreigners, too.

[22:40] <Juerd_> Or at least it feels like what I think moving brain mass would feel like.

[22:40] * Shillo edges away from Juerd slowly.

[22:40] <Juerd_> Shillo: Can you give funny examples of croation idioms?

[22:40] <Shillo> Hmm... Lemme think. :)

[22:41] <Shillo> Most foreigners have really -bad- problem with... uh... I think the English name for those is incomplete verbs.

[22:42] <Shillo> Er, complete verbs.

[22:43] <Shillo> In Croatian, all verbs come in two forms. One is incomplete, it denotes an action that goes on, but doesn't refer to its termination. The complete verbs denote actions that finished in some way.

[22:43] <Shillo> Now complete verbs are formed by prefixing the verb with preposition. Problem is, this changes the meaning of the verb.

[22:43] <Shillo> English has something similar. Hold vs behold vs withhold.

[22:44] <Shillo> In Croatian, it's completely pervasive, and you're actually allowed to use non-dictionary combinations - most people will intuitively understand what you meant.

[22:45] <Shillo> The resulting combinations tend to be very funny, but in ways I can't even begin to translate. :)

[22:45] <eric256> isn't german sort of like that too?

[22:46] <eric256> big-red-bar-on-the-corner type words ;)

[22:46] <Shillo> No, German abuses compound words instead. :)

[22:46] <Shillo> This is modified words. Not quite the same thing.

[22:46] <Shillo> Oh, did I mention 42 adjective forms (7 cases, 3 genders, 2 numbers)?

[22:47] <Shillo> And you can't even just avoid adjectives, because past tense is formed by turning verb into one? :)

[22:48] <Shillo> One consequence is that unlike in English, you can't talk at any length without referring to your own gender, and it's not allowed to be neuter. That kinda sucks if you're an SF writer.

[22:49] <juerd> My home line is out

[22:49] <juerd> Can someone please nopaste me what I've missed?

[22:49] <juerd> (I'm on good old reliable radio waves now)

[22:50] <juerd> (Through feather, because in practice, reliable it is not)

[22:50] <Shillo> juerd: What kind? I use GPRS as my primary net link :) )

[22:50] <juerd> edge

[22:50] <misc> juerd: since when ?

[22:51] <juerd> misc: Since I typed something like "My connection is dead again :(", but I reckon that's something you never saw

[22:51] <pasteling> "wolverian" at 80.221.10.245 pasted "what juerd missed" (21 lines, 1.9K) at http://sial.org/pbot/13775

[22:51] <juerd> misc: More useful will probably be the point where I asked shillo to give some funny examples

[22:51] <juerd> Thank you, wolverian

[22:51] <wolverian> you're welcome

[22:51] <Shillo> juerd: And I went through some weird bits of Croatian grammar instead. I'm too down to think of good funny examples right now. :)

[22:52] <misc> groumph, i was just scping to a website :/

[22:53] <juerd> Are these 7 cases like the cases in other languages?

[22:53] <Shillo> Yes. Like 4 cases in German.

[22:54] <Shillo> Only, Croatian has a lot more declinations, and those it has are a lot less regular.

[22:54] <juerd> (nom, voc, gen, dat, acc, abl)

[22:54] <Shillo> nom, gen, dat, acu, voc, loc, instr

[22:54] <Shillo> Er, acu=acc

[22:54] <juerd> What are loc and instr?

[22:54] <Shillo> So no ablative, but it has locative and instrumental.

[22:55] <juerd> instrumental: is that like "by train"?

[22:55] <juerd> "with a screw driver"?

[22:55] <Shillo> Yep.

[22:55] <juerd> And is locative to do with location?

[22:56] <Shillo> Also 'going out with my girlfriend' - and yes, this goes under silly idioms.

[22:56] <Shillo> Yep.

[22:56] <juerd> This sounds doable :)

[22:56] <Shillo> Problem is that adjectives have to match their nouns on gender.

[22:56] <juerd> Though prepositions are easier to learn, because they are always more consistent (no change per declination)

[22:56] <Shillo> So you have a small combinatorial explosion with adjectives.

[22:57] <juerd> I myself prefer Esperanto. :)

[22:57] <Shillo> Well, I've heard some horror stories about Dutch, too. :)

[22:57] <chip> jeepers, I'm glad my ancestors decided to head for the New World

[22:58] <juerd> It has nominative, accusative, prepositions and adverbs :)

[22:58] <Shillo> Mostly to do with r, g, and throaty g appearing next to each other in some words. :)

[22:58] <juerd> What's "throaty g"? Q)

[22:58] <juerd> Is that our standard g?

[22:58] <juerd> s.Q.:.

[22:58] <Shillo> No idea. :)

[22:58] <Shillo> That's second hand.

[22:59] <Shillo> Er, second hand info.

[22:59] <juerd> At least we have stable grammar

[22:59] <juerd> *cough* 14Not quite

[22:59] <Shillo> Yeah.

[22:59] <Shillo> I went through a grammar book on Croatian and counted about 30 declinations, once it listed all the unusual and exceptional types.

[22:59] <juerd> Dutch has very weird and indiscribable word order

[23:00] <Shillo> Croatian has free word order (mostly)

[23:00] <juerd> in het huis: in the hous

[23:00] <juerd> het huis in: into the house

[23:00] <juerd> s/hous$/house/

[23:00] <juerd> And lots of ambiguity

[23:01] <Shillo> In Croatian. it's 'u kuchi' and 'u kuchu' (ch is printed using C with ' on top of it)

[23:01] <Shillo> locative vs accusative

[23:02] <juerd> accusative for movement, I assume?

[23:02] <juerd> That's quite common among languages

[23:03] <Shillo> But problem is that in Croatian, 'Jedem crvenu jabuku', 'Crvenu jabuku jedem' and 'Jedem jabuku crvenu' are all allowed and mean the same thing (I'm eating a red apple)

[23:03] <juerd> I wish Dutch still had cases.

[23:03] <Shillo> Actually for near objects.

[23:03] <Shillo> Er, direct objects.

[23:03] <juerd> Yes, that's the main function of any accusative

[23:03] <juerd> But combined with a location, it indicates movement, right?

[23:04] <juerd> (into)

[23:04] <Shillo> You can also use dative instead of accusative, with without 'u'.

[23:04] <Shillo> Er, but without

[23:04] <Shillo> Yep.

[23:04] <Shillo> So you can say 'Idem u kuchu' and 'Idem kuchi', both mean 'I'm going into the house'

[23:04] <Shillo> The first stresses the actual entering, while the other stresses movement.

[23:05] <juerd> Esperanto has the forms 'mi iras en domon' and 'mi iras domen'

[23:05] <Shillo> If you want to say 'I'm going home', it'd always be 'Idem kuchi'

[23:05] <juerd> "en domon" is literally: into the house. Here, domon is accusative of domo

[23:06] <juerd> "domen" on the other hand is "dome", the adverb form  of domo, also modified to look like an accusative *(n)

[23:06] <Shillo> And you can also say 'Kuchi idem' when you want to say that you're actually going home and not somewhere else.

[23:06] <Shillo> (free word order rules :) )

[23:07] <juerd> "domen" would be: to the place that is at home

[23:07] <juerd> s/at home/the house/

[23:07] <juerd> at home is hejme,, not dome

[23:07] <Shillo> 'At home' is 'doma' in Croatian slang.

[23:07] <juerd> Shillo: The first word gets implicit stress?

[23:07] <Shillo> And yes, 'Idem doma' is accepted dialectism.

[23:08] <Shillo> Yep.

[23:08] <juerd> You probably don't find Yoda funny, if you're used to free word order :)

[23:08] <Shillo> Well, it's not /quite/ free.

[23:08] <Shillo> Some combinations are more weird than others.

[23:09] <juerd> (if used to free word order, you are, then find Yoda funny, you probably do not)

[23:09] <Shillo> Japanese word order (Which is what Yoda is using) is right out. :)

[23:09] <Shillo> :)

[23:09] <Shillo> For example, nouns commonly come after the adjectives. Switch is archaic, poetic, or for special stress.

[23:10] <juerd> I remember a fortune that goes like: If so strong in Yoda, the force is, then why construct proper sentences, he cannot?

[23:10] <Shillo> Heee!

[23:10] <juerd> Or something like it

[23:11] <juerd> 01:09 < Shillo> For example, nouns commonly come after the adjectives. Switch is archaic, poetic, or for special stress.

[23:11] <Shillo> BTW, I heard they actually translated English to Japanese, then back (but with preserving the word order). What I know of Japanese tends to corroborate this.

[23:11] <juerd> The same in Esperanto

[23:11] <Shillo> (for Yoda)

[23:11] <juerd> In Dutch, however, nouns have to be after their adjectives

[23:11] <Shillo> Well, in English, too.

[23:13] <Shillo> The weirdest word order I've ever seen is in Gaelic, though.

[23:13] <juerd> Shillo: Too consistenty structured, the sentences are, so hard to believe that mangled through Japanese, the sentences are, it is for me

[23:13] <Shillo> Nouns are always -before- the adjectives, and the sentence starts with a verb.

[23:13] <juerd> But it could be that Japanese has such consitency. I don't know.

[23:13] <Shillo> Japanese is almost perfectly consistent, yep.

[23:13] <juerd> Shillo: That must read like RPN :)

[23:14] <Shillo> And yes, it's almost purely RPN. Japanese, that is. Irish is its mirror image. :)

[23:15] <Shillo> Japanese word order is   Adverbs Topic Subject Objects (optionally more Adverbs) Predicate

[23:15] <Shillo> Topic doesn't have to match subject, for extra fun. :)

[23:16] <Shillo> English is  Adverbs Subject Predicate Direct object Other objects More adverbs.

[23:16] <juerd> That seems hard

[23:16] <juerd> In English, adverbs can come almost everywhere :)

[23:16] <Shillo> Well, one aspect of it sucks even for native speakers.

[23:16] <wolverian> Finnish is random.

[23:16] <juerd> wolverian: I KNEW IT!

[23:16] <wolverian> ;)

[23:17] <Shillo> In Japanese, kanji pronounciation can depend on the context. If that context is given by the predicate, and the kanji happens to be topic, you have to look at the end of the sentence to know how to pronounce the beginning.

[23:17] <Shillo> :)

[23:17] <juerd> So finnish people too have no idea what other finnish say?

[23:18] <wolverian> not quite that random. :)

[23:18] <juerd> Shillo: Strict word order, but still not optimized for single pass parsing

[23:18] <juerd> Shillo: Who the hell designed that? :)

[23:18] <Shillo> :)

[23:18] <wolverian> in fact, it's not random at all (it's a lot more structured than English, for an example), but word order is relatively free. that's nothing special, though.

[23:18] <Shillo> It kinda grew.

[23:18] <juerd> It's like positional arguments that do require names.

[23:19] <Shillo> You don't want to know what Japanese do with imported words (and it's a good bet that if something has been invented after 1800, Japanese will use the English name for it)

[23:19] <Shillo> wolverian: Yep, like Croatian.

[23:19] <Shillo> wolverian: Guess it goes with having a lot of cases.

[23:19] <wolverian> Shillo, yeah, seems like so. do the rarer word orders seem more poetic in Croatian?

[23:19] <Shillo> Yep

[23:19] <juerd> cases in general make a language much less dependent on word order.

[23:19] <wolverian> same here.

[23:20] <Shillo> I read a bit on Finnish grammar. Only 2 declinations. Wusses. ;)

[23:20] <geoffb> Shillo, OK, I'll bite, what *does* Japanese do with imported words?

[23:20] <juerd> Ahh... Yoda is a poet!

[23:20] <juerd> geoffb: (Thanks)

[23:20] <Shillo> geoffb: First, they spell them with their syllably.

[23:21] <Shillo> geoffb: Then if they end up with more than 3 syllables, they chop of the rest.

[23:21] <geoffb> woah

[23:21] <Shillo> geoffb: Or rather, drop a few syllables at random.

[23:21] <geoffb> ouch

[23:21] <Shillo> Japanese only has 47 (I think) valid syllables, so the words can be unrecognisable even after the first stem.

[23:21] <Shillo> Er, step

[23:22] <juerd> A friend witnessed this when he was in Japan

[23:22] <geoffb> Shillo, nod

[23:22] <Shillo> And Japanese native speaker will expect you to recognise the English words without explanation.

[23:22] <wolverian> Shillo, I'm sorry, what's a declination? I've forgotten all my language skills in the two years between high school and university :)

[23:22] <juerd> His Japanese friend needed to translate the real English into Japanese English before the local population understood.

[23:22] <Shillo> Words like shatsu, suripa, terebi.

[23:23] <geoffb> Shillo, which are?  I've got guesses, but .  .. 

[23:23] <juerd> It now occurs to me that  know what a declination is, but wolud have a hard time explaining it.

[23:23] <Shillo> wolverian: Set of case suffixes. Noun belongs to one declination, if you know which, you know all its cases. In Finnish, there are only 2, one for clear wovels, the other for umlauts.

[23:23] <Shillo> geoffb: Shirt, slippers, television.

[23:23] <juerd> Shillo: LOL

[23:23] <geoffb> Shillo, OK, I was completely wrong

[23:24] <wolverian> Shillo, ah, right. yes. 

[23:24] <wolverian> Shillo, logical++

[23:24] <wolverian> Swedish has four (or five?) declinations. horrible to learn even that few.

[23:24] <juerd> Shillo: So the first step is to pronounce the r as l?

[23:24] <juerd> When trying to understand thes ewords?

[23:25] <Shillo> doraiba is also funny.

[23:25] <juerd> Latin has 3, IIRC

[23:25] <Shillo> Screwdriver.

[23:25] <Shillo> Croatian has... bloody LOTS.

[23:25] <juerd> Shillo: Hard to order, I guess :)

[23:25] <Shillo> 3 genders, and each comes with several declinations.

[23:26] <juerd> Shillo: It's time for a language revolution.

[23:26] <juerd> You need a dictator obsessed with efficiency.

[23:26] <wolverian> Shillo, does Croation have future tense?

[23:26] <Shillo> wolverian: Well, Finnish has 16 cases. Kinda tall vs wide division. :)

[23:26] <wolverian> erm, Croatian

[23:27] <wolverian> Shillo, right. :) 

[23:27] <Shillo> wolverian: Yeah. Two of them.

[23:27] <juerd> Shillo: tentative and decided? :)

[23:27] <Shillo> juerd: You can tell Esperanto was designed by a Slavic, eh? ;)

[23:27] <wolverian> Shillo, two? why?

[23:28] <Shillo> wolverian: What Juerd said.

[23:28] <wolverian> ah, okay.

[23:28] <Shillo> 4 past tenses, 2 archaic.

[23:28] <Shillo> Except that these 2 archaic are becoming mainstream thanks to SMS messages. They're short. :)

[23:28] <wolverian> Finnish has tentative and decided but no future tense. it just relies on context telicity.

[23:29] <wolverian> erm, contact _and_ telicity

[23:29] <wolverian> ERM

[23:29] <wolverian> sorry but: asdhakjsdhakjsdhajkdasd

[23:29] <wolverian> time to sleep. 

[23:29] <Shillo> Well, in Croatian they're both future tenses.

[23:29] <juerd> Shillo: In some respects, yes

[23:29] <Shillo> You can also cheat and use present instead of the future tense (like in most other languages I know)

[23:30] <juerd> Shillo: But it's greekish in the word stem, and said to be japaneseish in its isolation

[23:30] <Shillo> juerd: Er, I meant, Crotian has 4 past tenses, 2 of which were, till recently, archaic. :)

[23:31] <juerd> 4 past tenses...

[23:32] <Shillo> Well, yeah, those 2 are redundant. :)

[23:32] <juerd> Well, there are always many ways to describe things past

[23:32] <juerd> (did, have done, have been doing, was doing, ...)

[23:32] <Shillo> Also, 2 verbal adjectives and 2 verbal adverbs.

[23:33] <Shillo> And yes, verbal adjectives suffer from cases. Like all other adjectives :)

[23:33] <juerd> Verbal adjectives... It sounds so wrong.

[23:33] <Shillo> Active and passive.

[23:33] <Shillo> Active is used for past tense.

[23:33] <Shillo> And passive is... passive.

[23:34] <juerd> The latter makes sense. :)

[23:34] <Shillo> If somebody was subjected to an action, you just attach the action as an adjective.

[23:34] <Shillo> Simoultaneity in past and present is expressed with past and present verbal adverbs.

[23:34] <Shillo> Er, simultaneity.

[23:34] <juerd> Like: the robbed man?

[23:34] <Shillo> Yep.

[23:35] <juerd> Would that be considered a correct *sentence*, were it croatian?

[23:35] <Shillo> Yes.

[23:35] <juerd> Weird :)

[23:35] <Shillo> Er, full sentence? No.

[23:36] <Shillo> You'd have to say 'The man is robbed'

[23:36] <juerd> Oh, okay

[23:36] <juerd> Still some sanity.

[23:36] <juerd> I'm going to bed

[23:37] <Shillo> Chovjek (man) je opljachkan. Zhena (woman) je opljachkana. Dijete (child, neuter gender) je opljachkano.

[23:37] <juerd> Thanks for the conversation. I always like to learn superficial language trivia :)

[23:37] <Shillo> Not as much sanity as you'd like. :)

[23:37] <juerd> Children are considered gender neutral? :)

[23:37] <Shillo> Yep.

[23:37] <juerd> That must be interesting in school.

[23:37] <Shillo> Unless you specify (boy or girl)

[23:37] <juerd> Good night :)

[23:38] <Shillo> Nah, boys and girls get the proper grammar treatment. :)

[23:38] <Shillo> Laters!

[23:38] <Shillo> Gotta go to sleep soon myself.

[23:38] <Shillo> Same timezone.

[23:38] <juerd> (Hm. Same applies to Dutch and German too: het kind, das Kind, both neuter)

[23:38] <juerd> afk

[23:38] <Shillo> :)

[23:38] <Shillo> Night, all!

[23:39] <juerd> Dijete

[23:39] <juerd> Is that pronounced much like deity? ;)

[23:39] <Shillo> Nope.

[23:39] <juerd> afk now :)

[23:39] <Shillo> :)

[23:45] <svnbot6> r7684 | Darren_Duncan++ | /ext/Rosetta-Incubator : officially converted all lib/*/L/en.pm files and lib/Rosetta/Validator.pm to modules; they are not supposed to be classes

