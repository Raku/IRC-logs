[01:05] <ajs_home> So, did anyone see a message about S29 from me on p6l today, or is my MTA being flakey?

[01:52] <svnbot6> r7685 | spinclad++ | (First commit!)

[01:52] <svnbot6> r7685 | spinclad++ | * Suggested tweaks for larry_mariner.txt; please review.

[01:52] <svnbot6> r7685 | spinclad++ | * AUTHORS.+=(self)

[01:52] <svnbot6> r7686 | spinclad++ | larry_mariner.txt: alternate suggestion.

[07:34] *** |uqu| is now known as luqui

[07:46] <luqui> ha'dy nothingmuch 

[07:47] <autrijus> yo.

[07:47] <Aankhen``> Mawnin'.

[07:48] <luqui> autrijus, how do you suggest I go about fixing lazy {} ?

[07:49] <autrijus> luqui: mmm, context?

[07:49] <luqui> my $c = 0; my $x = lazy { $c++; }  say $x;   say $c;  # 3

[07:50] <luqui> i.e., the block gets executed 3 times

[07:51] <autrijus> you need to make the thunk mark itself as used after first eval.

[07:51] <luqui> presumably throwing away the closure reference, replacing it with the value

[07:52] <luqui> but, er, I don't understand how I would do that within Eval?

[07:52] <autrijus> you can do that by creating a (TVar (Maybe Val))

[07:52] <autrijus> that holds the evaluated thing

[07:53] <luqui> how about (Either Thunk Val)  -- for the appropriate value of Thunk

[07:53] <luqui> TVar $ ~

[07:53] <autrijus> well, you need to hide some code into the thunk anyway

[07:53] <autrijus> so might as well use Maybe

[07:53] <autrijus> but Either would work too

[07:53] <luqui> huh?

[07:53] <autrijus> improvise :)

[07:54] <autrijus> op1 "lazy" = \v -> do

[07:54] <luqui> hide some code into the thunk?

[07:54] <autrijus>     sub <- fromVal v 

[07:54] <autrijus>     res <- liftSTM $ newTVar Nothing

[07:55] <autrijus>     let thunk = ... probe res, etc ...

[07:55] <autrijus>     return . VRef . thunkRef $ MkThunk thunk

[07:55] <autrijus> the "probe" part would do a liftSTM readTVar, and some maybeM stuff, and liftSTM writeTVar on first eval

[07:55] <luqui> oh, it's very important that the thunk's code be GC'd if possible

[07:56] <luqui> oh wait, I'm screwed anyway in that area

[07:57] <autrijus> it will be GCed if possible, I assure you.

[07:57] <autrijus> the exp, once non reachable, will be claimed

[07:57] * autrijus has complete trust in GHC-RTS's GC

[07:57] <luqui> because, in pugs currently:  my $closure = { my $x;  my $y;  -> { $x } };  # $y is not freed here, correct?

[07:57] <luqui> how is it no longer reachable?

[07:58] <luqui> that is, what happens that gets rid of it

[07:58] <autrijus> if there is nothing in the current env that lets you reach ti

[07:58] <autrijus> then it's gone

[07:59] <luqui> hm.

[07:59] <luqui> how about the $closure example?

[08:01] * luqui thinks he groks your code above now

[08:06] <autrijus> :)

[08:06] <autrijus> the closure example, once $closure is out of reach from envLexical

[08:06] <autrijus> and envOuter envLexical (recursively)

[08:06] <autrijus> it's not reachable

[08:06] <luqui> I'm asking about $y

[08:07] <luqui> which $closure is not referring to, but it is referring to the pad that $y is in

[08:07] <luqui> in Perl 5 in this case, $y would be freed immediately upon exiting that block

[08:07] <luqui> (and L::AG takes advantage of that fact)

[08:08] <autrijus> oh $y

[08:08] <autrijus> p5 closes over only directly referenced stuff

[08:09] <autrijus> my $x = sub { my $z = 3; sub { eval '$z' } };

[08:09] <autrijus> which is why this doesn't work in p5

[08:09] <luqui> Oh, it doesn't?

[08:10] * luqui checks

[08:10] <autrijus> ?eval  my $x = sub { my $z = 3; sub { eval '$z' } }; $x()()

[08:10] <autrijus> mm bot gone. this works in pugs

[08:10] <luqui> interesting

[08:11] <luqui> heh, ask and ye shall receive

[08:11] <luqui> I guess with CALLER:: you can't really help but close over the whole pad

[08:11] <luqui> except in really really trivial cases

[08:11] <luqui> darn.

[08:11] <autrijus> note that parrot does the same.

[08:12] <autrijus> (close over the whole pad)

[08:12] * luqui needs a new method to GC intermediate structures in L::AG

[08:12] <luqui> and in that case I guess I don't really care about lazy {}.  I'll try to fix it anyway

[08:13] <autrijus> please do :)

[08:13] <luqui> ?eval 42

[08:13] <evalbot_7686> 42 

[08:13] <autrijus> luqui++

[08:13] <autrijus> ?eval my $x = sub { my $z = 3; sub { eval '$z' } }; $x()()

[08:13] <evalbot_7686> \3 

[08:13] <autrijus> there's already a test in t/var/lazy.t

[08:13] * luqui saw that

[08:14] <luqui> ?eval so

[08:14] <evalbot_7686> Error: No compatible subroutine found: "&so" 

[08:15] <luqui> op0 "so"  = const (return $ VBool True)  -- ??

[08:16] <integral> luqui: so doesn't seem to appear in the big table

[08:17] <luqui> and the string "so" only occurs on that one line

[08:17] <integral> I hate Prim.hs

[08:18] <autrijus> <aol/>

[08:18] <autrijus> luqui: just kill that line

[08:35] <luqui> ?eval class Foo { submethod DESTROY { say "Bye" } }   Foo.new;  say "done"

[08:35] <evalbot_7686> done bool::true 

[08:35] <luqui> ?eval class Foo { submethod DESTROY { say "Bye" } }   say Foo.new;  say "done"

[08:36] <evalbot_7686> <obj:Foo> done bool::true 

[08:38] <luqui> ?eval class Foo { submethod DESTROY { say "Bye" } }   my $f = Foo.new; say $f;  say "done"

[08:38] <evalbot_7686> <obj:Foo> done bool::true 

[08:39] <luqui> hmm, evalbot doesn't spawn a new pugs it seems, as this is different from the command line

[08:40] <autrijus> aye

[08:40] <autrijus> I'll bbiab, keynote endeth

[09:17] <svnbot6> r7687 | luqui++ | Made lazy {} execute its closure at most once.

[09:17] <autrijus> luqui++

[09:18] <luqui> the last thing is to fix that last todo in that .t

[09:18] <luqui> make it so you can pass lazies around

[09:18] <luqui> any advice?

[09:19] <rafl_> Yeah.. be lazy. Pass it around. Let it do someone else.

[09:19] *** rafl_ is now known as rafl

[09:19] <autrijus> rafl++

[09:21] <gaal> heya

[09:22] <autrijus> luqui: looking

[09:22] <gaal> rafl: I haven't gotten to trying a ghc build yet, sorry

[09:22] <gaal> Can you look at http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=319812 ? It sounds like it should be simple to fix...

[09:23] <rafl> autrijus: I have a new problem with cabal and include-dirs. Isn't there a way to specify directories that should contain include files but which aren't needed to be available when registering the cabalized package?

[09:24] <luqui> seems that you can assign and bind lazies freely and they don't get evaluated, so some evaluation must be happening when you pass it to a sub

[09:24] <autrijus> ask on #haskell or syntaxninja or the cabal list? 

[09:25] <rafl> gaal: That's about ghc-cvs. ghc6 has already done it's gmp transition.

[09:25] <rafl> autrijus: I got ignored on #haskell twice. syntaxninja wasn't there, iirc. I'll try the list now..

[09:28] <nothingmuch> morning

[09:29] <luqui> morning nothingmuch 

[09:30] <nothingmuch> evening luqui 

[09:30] <nothingmuch> also morning pdcawley 

[09:30] <luqui> 3:30 am is evening?

[09:30] <nothingmuch> conceptually

[09:30] <autrijus> k...

[09:30] <autrijus> luqui: yes, I'm looking

[09:30] <nothingmuch> you are still awake, not already awake, right?

[09:31] <luqui> autrijus, thanks :-)

[09:31] * nothingmuch forgot how nice Nighthawks at the Diner is

[09:31] <luqui> I'm trying to chase it down myself, but it's slow-going because of my unfamiliarity with the source of course (of course)

[09:31] <luqui> nothingmuch, L::AG 0.07 is out.  backwards-incompatibl

[09:32] <luqui> e

[09:32] * nothingmuch_ reroutes through wifi instead of ethernet

[09:32] <pdcawley> Morning all

[09:34] <luqui> hiya pdcawley 

[09:35] <pdcawley> Well, EUOSCON's fun.

[09:36] * luqui wishes he were there

[09:36] <pdcawley> Oh, in that case, it's dull as ditchwater, you wouldn't enjoy it. Don't worry, you're not missing anything.

[09:37] <pdcawley> Like MS releasing some software under a BSD like license.

[09:37] <autrijus> yeah right.

[09:37] <luqui> what!?

[09:37] <rafl> It isn't even far from here. I just can't get there because it takes place just after semester started.. :-/

[09:37] * pdcawley grins.

[09:37] <pdcawley> Tim's blogged about it.

[09:37] <luqui> rafl, that was my biggest blocker too

[09:37] <autrijus> and they have extremely good licenses!

[09:37] <luqui> except, s/just/much/

[09:37] <autrijus> # http://www.microsoft.com/resources/sharedsource/licensingbasics/permissivelicense.mspx

[09:37] <pdcawley> That BSD like one's 3 paragraphs long. You don't have to scroll the browser.

[09:37] <rafl> luqui: One week earlier and it woudn't have been a problem.

[09:38] <autrijus> all of them are.

[09:38] <pdcawley> Yeah, even the 'look don't touch' one makes sense.

[09:39] * nothingmuch_ would like to take HPUX, put it on a surgical table, and then ram a large chainsaw up it's *$^!%

[09:39] <nothingmuch_> after which I will repeatedly remove and reinsert said large chainsaw several times

[09:39] <nothingmuch_> and then I would dump HPUX in an alley so that it can blead to death

[09:39] * pdcawley notes that the plan to make Office talk Opendoc might get a good deal easier...

[09:40] <autrijus> luqui: I see

[09:40] <autrijus> luqui: it's trying to get type information out of a thunk.

[09:40] <autrijus> and currently you can't know that without evaluting it.

[09:40] <autrijus> suggestions?

[09:40] <autrijus> I think we bundle type information with a thunk.

[09:40] <luqui> well, first, if the sub is untyped, don't try to get type information

[09:40] <luqui> s/sub/param/

[09:41] <autrijus> sure

[09:41] <autrijus> but in general case.

[09:41] <luqui> autrijus, yes, we could bundle type info with a thunk... but where do we get it?

[09:41] <autrijus> using evalExpType

[09:41] <autrijus> which does some inferencing

[09:41] <luqui> ahh

[09:41] * luqui didn't know pugs did that yet

[09:42] <autrijus> it's crude

[09:42] <autrijus> doesn't do two way propagation

[09:42] <luqui> the other question:  sub foo ($x where { $_ < 3 }) {...}

[09:42] <luqui> I guess we're forced to eval

[09:42] <luqui> of course

[09:42] <autrijus> yeah

[09:42] <luqui> no problem

[09:42] <autrijus> the "where" form is sugar

[09:43] <luqui> well, for starters, how can I get rid of eval for untyped params?

[09:43] <luqui> mostly so I know where to look

[09:48] <luqui> what the heck are we doing typechecking for?

[09:48] <luqui> ?eval sub foo(Int $bar) { say $bar }   foo("hello")

[09:48] <evalbot_7687> hello bool::true 

[09:48] <luqui> because it's not working

[09:49] <autrijus> er, we typecheck for mmd

[09:49] <autrijus> and coerce when we give up

[09:50] <luqui> so "hello" as Int eq "hello"?

[09:50] <autrijus> the cute thing is that we don't actually coerce the value ;)

[09:50] <autrijus> (as you must be aware, none of this behaviour is specced, so I just punted)

[09:51] <luqui> ahh right

[09:51] <autrijus> anyway, it's all in Eval.Var

[09:51] <autrijus> findSub and evalExpType

[09:51] <autrijus> I'll fix the thunk first.

[09:52] <luqui> and what aspect of the thunk are you fixing?

[09:52] <autrijus> data VThunk = MkThunk

[09:52] <autrijus>     { thunkExp  :: Eval Val

[09:52] <autrijus>     , thunkType :: VType

[09:52] <autrijus>     }

[09:52] <autrijus>     deriving (Typeable)

[09:52] <autrijus> this aspect.

[09:52] <luqui> okay

[10:08] * luqui is fading

[10:08] * luqui beds

[10:10] <autrijus> <- with sky in speaker's room

[10:10] <autrijus> trying to hack a PIL-Run based on heavily optimized perl5 opcodes

[10:13] <autrijus> also praising the sanity of var-reg-as-pad in new parrot

[10:17] <autrijus> lunch &

[10:25] <coral> autrijus: hi, sky!

[11:21] <Juerd_> Heuh, tehmaze :)

[11:21] <Juerd_> Hi :)

[11:21] <tehmaze> heya Juerd_ ;)

[11:21] <tehmaze> greets from Oscon

[11:22] <Juerd_> Heh, what brings you there?

[11:22] <tehmaze> my employer :p

[11:24] <Juerd_> Are you there with or without a mission?

[11:24] <tehmaze> no, I'm ought to find new collegues

[11:24] <Juerd_> (Or is that confidentian? ;))

[11:24] <Juerd_> s/ian/ial/

[11:25] <tehmaze> but I'm off for a python reading now, ttyl

[11:25] <Juerd_> Have fun

[11:25] <tehmaze> thanks

[11:25] <Juerd_> Watch out for the snake.

[11:25] <tehmaze> teh snake!

[11:25] <Juerd_> slangetje

[11:26] *** nothingmuch_ is now known as nothingmuch

[11:26] * theorbtwo wonders where tehmaze works.

[11:26] <theorbtwo> Allo, nm.

[11:28] <coral> http://tehmaze.nl/about/

[11:29] <nothingmuch> hola theorbtwo 

[11:29] <nothingmuch> we're getting el-cheapo rain here

[11:29] * nothingmuch is delighted

[11:31] <theorbtwo> Ah.  The netherlands.  A bit too far.

[11:32] <theorbtwo> Rain in the desert?  Sounds ++able.

[11:32] <theorbtwo> We're getting very-heavy rain, then no rain, on a loop.

[11:33] <Juerd_> tehmaze: Did my site inspire you on the blinking ascii art cursor? :)

[11:33] <tehmaze> Juerd_: hmm, not really :)

[11:34] <Juerd_> gmta then :)

[11:35] <Juerd_> (fsd)

[11:36] <coral> tehmaze: i nearly tried typing something at the command line.

[11:36] <coral> what with all the random dhtml sites these days

[11:36] <coral> i know eventually it'll work somewhere =)

[11:37] <tehmaze> coral: lol :)

[11:37] <Juerd_> heh

[12:09] <Juerd_> Hello, pdcawley 

[12:10] <pdcawley> Hi Juerd

[12:14] <tehmaze> pdcawley: you stole my ip, bastard! ;)

[12:16] <pdcawley> ?

[12:16] <pdcawley> I did?

[12:17] <tehmaze> j/k, where are you at ?

[12:17] <tehmaze> brb, next conference :p

[12:57] <metaperl> here's one place that usage of "." instead of "->" makes sense:  <uv><xsp:expr>$w->{uv}</xsp:expr></uv>

[12:58] <metaperl> already enough greater than signs without one coming from Perl

[12:58] <tehmaze> or get the variable out of the quotes

[12:59] <autrijus> yo

[12:59] * autrijus just handed a perl6 shirt to the ironpython guy

[13:00] <Juerd_> autrijus: You're evil in a very friendly way :)

[13:01] <autrijus> :D

[13:01] <Juerd_> tehmaze: Will you be at the post-oscon amsterdam.pm meeting tomorrow?

[13:02] <tehmaze> Juerd_: nope

[13:02] <Juerd_> http://amsterdam.pm.org/meetings/after_oscon.html

[13:02] <Juerd_> Oh, why not?

[13:03] <Juerd_> I haven't seen you since wth :)

[13:03] <Juerd_> Now, that's nothing special, as we usually only meet once a year (this time not at ne2000, though), but still :)

[13:03] <tehmaze> hehe

[13:03] <tehmaze> just not my cup of tea

[13:04] <Juerd_> How can it be that #perl6 is your cup of tea, but amsterdam.pm with a light technical perl6 related program is not? :)

[13:05] <coral> i do very badly with groups of perl people off of irc

[13:05] <tehmaze> Juerd_: I'm more interested in the parrot development than perl6 itself

[13:05] <Juerd_> Oh

[13:05] <Juerd_> coral: Why's that?

[13:05] <Juerd_> tehmaze: Then don't forget to also join irc.perl.org #parrot, if you haven't already

[13:05] <coral> Juerd: i don't like talking about perl when i'm not on irc, mostly :)

[13:06] <tehmaze> Juerd_: nooo, not yet another irc server :p

[13:06] <Juerd_> tehmaze: You use irssi and must not care.

[13:06] <coral> except for social politics and stuff :)

[13:06] <Juerd_> coral: Hm. You lead two separate lives?

[13:07] <tehmaze> Juerd_: I lead 3, anything wrong with that? :)

[13:07] <Juerd_> tehmaze: Three? I thought you had just one :)

[13:07] <coral> Juerd: this is the only perl irc channel i'm in.

[13:07] <tehmaze> Juerd_: nope

[13:07] <Juerd_> coral: I see

[13:07] <coral> no, you perl

[13:07] <Juerd_> tehmaze: Heh

[13:08] <coral> else you'd be in #c6 or something

[13:08] <coral> qed

[13:08] <Juerd_> coral: see ne c

[13:08] * coral grins

[13:08] <Juerd_> coral: And is this really what e.d.?

[13:08] <coral> ok, i'm going back to talking about perl now

[13:08] <Juerd_> :)

[13:08] <Juerd_> And I'm going to my office now

[13:08] <Juerd_> To see if there's anything for me to do.

[13:08] <Juerd_> afk

[14:00] *** rep is now known as r

[14:00] *** r is now known as rep

[14:15] <eric256> morning

[14:16] <autrijus> yo eric256 

[14:19] <eric256> talks went well?

[15:12] <ingy> seen autrijus 

[15:12] <jabbot> ingy: autrijus was seen 55 minutes 33 seconds ago

[16:08] <ajs_> I tried to send mail about S29 to the list yesterday, but it bounced. Seems that the list no longer accepts mail from residential MTAs (or some equally foolish reason for not accepting mail from by 10-year-old mail server.

[16:08] <ajs_> (reason: 550 Blocked. Contact [email@hidden.address] Include this in the subject: 24.61.76.204)

[16:08] <ajs_> Joy

[16:10] <ajs_> I'll continue to work on it. I guess when I'm done I can let the channel know, and put a draft up on my Web server.

[16:48] * nothingmuch is upset

[16:48] <nothingmuch> the bag I bought for my laptop was advertized as suitable for 17" laptops

[16:48] <nothingmuch> today it slipped as I was going out of the car

[16:48] <nothingmuch> and fell, from a short distance, on the pavement

[16:48] <nothingmuch> it hit a corner which was completely unprotected

[16:48] <nothingmuch> now it's dented

[16:49] <Juerd_> What has the 17" do do with this?

[16:49] <nothingmuch> and the two sides of the laptop have been compressed

[16:49] <nothingmuch> Juerd_: the laptop was too big to be protected by the backpack

[16:49] <Juerd_> Oh

[16:49] * eric256 thinks backpacks are for carrying, not for protecting in a fall

[16:49] <Juerd_> eric256: Mine is for both, but it was expensive

[16:49] <nothingmuch> while the sleeve covered it, and it seemed OK, in effect when you press down on that corner, nothing is stopping you from touching the corner of the laptop

[16:49] <nothingmuch> so was mine

[16:50] <nothingmuch> $70 or so

[16:50] <nothingmuch> which is not $200, but it still advertizes protection

[16:50] <Juerd_> hmm

[16:50] <Juerd_> Yea

[16:50] <nothingmuch> anyway, so now the mashed up side is scraping the plastic from the screen hinge

[16:50] <nothingmuch> and on the other side a connector is slightly deformed

[16:50] <nothingmuch> i need to open it up and bend it back from inside

[16:51] <nothingmuch> but the hardware store is already closed and all my screwdrivers are too big

[16:51] <nothingmuch> *sigh*

[16:51] <Juerd_> See if your insurance covers this before you open thi thing op

[16:51] <Juerd_> s/thi\b/this/; s/op$/up/

[16:51] <nothingmuch> i have no insurance =(

[16:51] <Juerd_> Oh

[16:51] <nothingmuch> i think

[16:52] <nothingmuch> there's the 1 year warranty, but it's not against that kind of stuff

[16:52] <Juerd_> True

[16:52] <Juerd_> Did you pay for it by credit card? Some cc companies provide insurance for all purchases

[16:53] <nothingmuch> hmm... i'll ask

[16:53] <nothingmuch> i did

[16:53] <nothingmuch> crap, no bottom cases on ebay

[16:54] <Juerd_> Hello, rzeronny

[17:04] <pasteling> "Xzanron" at 82.43.184.103 pasted "Code and Output" (21 lines, 513B) at http://sial.org/pbot/13792

[17:04] <r0nny> hoi

[17:04] <Xzanron> i'm having trouble with a scropt

[17:04] <r0nny> is Juerd_ a bot ?

[17:04] <Xzanron> i'm using CGI to try and create a webpage

[17:04] <Juerd_> No, I'm not

[17:04] <Juerd_> Xzanron: With Perl 6?

[17:05] <r0nny> then u are fast ;P

[17:05] <Xzanron> Hmm.. not sure

[17:05] <eric256> yea...we can't get him out of the room either

[17:05] <r0nny> script ?

[17:05] <Juerd_> Xzanron: Then you're probably not. Perl 6 is not finished yet.

[17:05] <Xzanron> ah ok..

[17:05] <Juerd_> Xzanron: You'd have known :)

[17:05] <Juerd_> Xzanron: Please visit #perl

[17:05] <Xzanron> is there a normal perl channel around?

[17:05] <Xzanron> ok.. couldn't find that in the list.. sorry :)

[17:05] <Juerd_> Xzanron: No problem :)

[17:05] <Juerd_> eric256: Oh.

[17:06] <eric256> lol

[17:06] <eric256> come on back man.  ;)

[17:07] <r0nny> btw - isi wish catalyst was allready ported

[17:07] <r0nny> -si

[17:08] <r0nny> laterz

[17:23] <Juerd_> Can I come back yet? :)

[17:29] <rep> sure

[17:35] <Juerd_> This channel is big!

[17:35] <Juerd_> I had never noticed :)

[17:35] <Juerd_> We have many lurkers

[17:36] <misc> wow, indeed 

[17:36] *** Juerd_ is now known as Juerd

[17:40] <eric256> yea 113 people, 4 who talk....and me babbling to myself

[17:40] <eric256> lol

[17:42] <tewk> how is the parrot target going, I haven't heard a status since leo merged, I'd like to start playing with mod_parrot and perl6 ?

[17:43] * tewk , A lurker makes asks his monthly question :)

[17:44] <mrborisguy> tewk:  I think it's progressing along nicely

[17:44] <mrborisguy> they released 3.0 not too long ago

[17:44] <mrborisguy> I don't follow it very well, but it seems to have lots of activity

[17:45] <tewk> I meant pugs targeting parrot, I follow parrot.

[17:45] <r0nny> re

[17:46] <mrborisguy> oh.  I can't go in depth on that, either.

[17:46] <mrborisguy> pugs can output pir based on perl6, but you probably know that.

[17:46] <r0nny> does anyone know a good lib for dynamic depency tracking ?

[17:55] <autrijus> woot

[17:55] <autrijus> gave David Heinemeier Hansson a Pugs shirt :)

[17:56] <autrijus> (and chatted a while about perl6 and continuations)

[17:56] <xerox> What kind of continuations? :-D

[17:56] <autrijus> serialized :)

[17:56] <xerox> Woot!

[17:57] <stevan> autrijus: automated visiolation of the metamodel :) http://perlcabal.org/~stevan/mm_viz/test.jpg

[17:57] <autrijus> stevan: oh wow

[17:57] <autrijus> this is visio?

[17:57] <stevan> graph viz

[17:57] <stevan> this is just the bare Perl6::MetaModel

[17:57] <autrijus> eggcellent! automated?

[17:57] <stevan> yes

[17:57] <autrijus> :D

[17:57] <stevan> 2 hour hack at this point

[17:58] <stevan> I am going to clean it up more

[17:58] <autrijus> nice

[17:58] <Juerd> What happened with graph viz?

[17:58] <autrijus> maybe I'll show that to david

[17:58] <xerox> Smells like reflection

[17:58] <stevan> you can also load any test file,... and see the structure it creates

[17:58] <Juerd> I remember it as something that makes ugly pictures

[17:58] <Juerd> This looks good.

[17:58] <stevan> Juerd: http://perlcabal.org/~stevan/mm_viz/test.jpg

[17:58] <stevan> xerox: yes, MM is very reflective

[17:58] <autrijus> stevan++ # crazy cool

[17:59] <xerox> The automation itself is written in p6?

[17:59] <pasteling> "stevan" at 67.186.136.119 pasted "the code to generate the graph viz models" (92 lines, 2.6K) at http://sial.org/pbot/13794

[17:59] <stevan> xerox: that is the code

[17:59] <mrborisguy> stevan: you may want to put a key on that if you're showing it to people

[17:59] <stevan> xerox: no it is still in p5 it is a prototype

[18:00] <stevan> mrborisguy: yes, I am working on cleaning it up right now

[18:00] <stevan> the basic key is this:

[18:00] <stevan> --- subclas of --->

[18:00] <stevan> ... instance of ....>

[18:00] <stevan> solid lines is does()

[18:01] <stevan> it just traverses down from Object

[18:01] <Juerd> What is an EigenClass?

[18:01] <xerox> JavaScript? :D

[18:02] <stevan> Juerd: it is a ruby thing (sort of) 

[18:02] <stevan> Juerd: it stores the class methods in it

[18:02] <stevan> so that the dispatcher is still generic

[18:02] <stevan> it is basically just an anon class inserted between Foo and Class

[18:03] <stevan> I will export another to show what I mean

[18:03] * xerox yummys some chestnuts

[18:04] <stevan> Juerd: look here http://perlcabal.org/~stevan/mm_viz/test2.jpg

[18:04] <stevan> EigenClass[Class]<13> holds the class methods for Point3D

[18:04] <stevan> and EigenClass[Class]<10> holds the class methods for Point

[18:06] <xerox> o_O

[18:06] <stevan> the code this represents is basically just class Point {} and class Point3d is Point {}

[18:06] <xerox> Is there an "Haskell's (.)" in p6?

[18:07] <mrborisguy> xerox: as in the compose operator?

[18:07] <xerox> Yep.

[18:08] <autrijus> david likes that :)

[18:09] <autrijus> also mentioned Matz loves the p6 -> but ruby people objected to that in rubyconf

[18:09] <autrijus> (david prefers the "def { ... }" form)

[18:09] <autrijus> which is just like "sub { ... }"

[18:10] * eric256 stares at stevans pictures...and stares and stares....someday hopefully i will learn enough by osmosis to understand. lol

[18:10] * eric256 presses his forhead agianst the screen to assit the osmosis. ;)

[18:10] <Juerd> stevan: I don't understand a thing of it, really. Sorry.

[18:10] <stevan> it needs a legend

[18:11] <stevan> and better coloring

[18:11] <Juerd> I probably lack the required background knowledge

[18:11] <stevan> which is what I am doing now

[18:11] <stevan> Juerd: probably a little yes

[18:11] <stevan> however, even when I explain it,.. it is still confusing :)

[18:11] <Juerd> autrijus: In *use*, -> is much like ruby's ||

[18:12] <Juerd> autrijus: Even though it does something else.

[18:12] <kolibrie> stevan: I find it easier if I know where to start, and can find a path to follow (initialization order)

[18:12] <Juerd> autrijus: Or, actually, it's not that different, as Ruby code blocks are also passed as arguments, eventually

[18:12] <stevan> kolibrie: yeah, its hard to get graphviz to cooperate on that 

[18:13] <Juerd> autrijus: Except that we first have something return a list and then foreach that, while Ruby lets the methods themselves do the iteration work

[18:14] <Juerd> object.method.each { |x| ... } versus for $object.method -> $x { ... }

[18:14] <Juerd> We could, in theory have $object.method(-> $x { ... }), but it'd be unperlish

[18:15] <Juerd> It is a bit weird though, that we go through a lot of trouble to have lazy lists, while Ruby doesn't even need them :)

[18:15] * stevan goes back to reading the graphviz documentation &

[18:43] <mrborisguy> can somebody clarify the '-> $x {...}' construct for me?

[18:44] <mrborisguy> is it basically like Haskell's (\x -> ... ) construct?

[18:44] <mrborisguy> somehwat like an anonymous sub?

[18:47] <Aankhen``> G'night.

[18:56] <ajs_> mrborisguy: still around?

[19:03] <eric256> mrborisguy - yes it is something like that

[19:03] <eric256> sub ($x) { }

[19:04] <masak> could someone explain to me more precisely what a "lispish macro" is?

[19:04] <masak> they're supposed to be much better than, say, c macros

[19:06] <masak> and perl6 is supposed to have them

[19:06] <masak> are they covered in any of the synopses?

[19:10] <kolibrie> masak: I'm no authority, but what I understand from that is that the macros change the AST, rather than text (which would have to then be parsed into AST)

[19:11] <masak> kolibrie: it sounds to me that such macros are functions, more or less

[19:12] <eric256> i think you could consider macros like inline functions...but don't quote me on that ;)

[19:12] <masak> eric256: yes, i was thinking of inline functions

[19:13] <masak> i see now that they discussed it a lot in a recent p6-lang thread

[19:13] <ingy> seen autrijus 

[19:13] <jabbot> ingy: autrijus was seen 1 hours 4 minutes 20 seconds ago

[19:16] <eric256> TSA replied to my post but i havn't a clue what he said....

[19:28] <eric256> http://www.perlmonks.org/?node_id=265209

[19:29] <eric256> that discusses the macros and refers to S06 for more info

[19:36] <luqui> ?eval macro foo () { }

[19:36] <evalbot_7687> undef 

[19:36] <luqui> ?eval macro foo () { "+1" }   3 foo

[19:36] <evalbot_7687> Error:  unexpected "f" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[19:36] <luqui> ?eval macro foo () { "1+" }   foo 3

[19:36] <evalbot_7687> Error:  unexpected "3" expecting "(", term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[19:37] <Eimi> ?eval macro postfix:foo () { "+1"}; 3 foo

[19:37] <evalbot_7687> Error:  unexpected "f" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[19:38] <eric256> i don't think macros are implemented yet

[19:38] <Eimi> Well, that would explain why it's hard to use them

[19:38] <luqui> :-)

[19:38] <eric256> ?eval macro foo () { "1" } ; foo;

[19:38] <evalbot_7687> 1 

[19:38] <eric256> ?eval macro foo () { "1+2" } ; foo;

[19:38] <evalbot_7687> 3 

[19:39] <eric256> or maybe they are. ;0

[19:39] <luqui> Hm

[19:39] <luqui> ?eval macro foo ($x) { "1+$x" }   foo "3"

[19:39] <evalbot_7687> "1+3" 

[19:39] <luqui> that looks like a sub call to me

[19:39] <luqui> but it's not *quite*, given your example

[19:39] <luqui> ?eval macro foo ($x) { "1+$x" }   foo 3

[19:40] <evalbot_7687> "1+3" 

[19:40] <luqui> ?eval macro foo ($x) { 1+$x }   foo 3

[19:40] <evalbot_7687> 4 

[19:40] <luqui> ?eval macro foo ($x) { "" }   1 + foo 3

[19:40] <evalbot_7687> 1 

[19:41] * luqui has no idea

[19:41] <luqui> ?eval macro foo ($x) { "$x+1" }   1 + foo 3

[19:41] <evalbot_7687> 5 

[19:41] <luqui> ack

[19:41] <luqui> this is weird

[19:50] <ajs_> To the question of LISP vs. other forms of macros: LISP macros are powerful because they directly manipulate code rather than pre-compiled text. I'll give you an example of why this is powerful:

[19:52] <ajs_> You have a macro that takes a list of functions as its parameter. Each function will start with a conditional. You check the conditionals in the macro and write an optimized switch that jumps into the correct function at the point after the conditional. You do all of this AT RUNTIME.

[19:52] <ajs_> er, that is AT COMPILE TIME

[19:54] <Juerd> http://juerd.nl/takahashi/icons.html  # first attempt :)

[19:56] <obra> juerd: what is that?

[19:56] <Juerd> A try

[19:57] <Juerd> Do you know the takahashi method of presentation?

[19:57] <obra> yeah.

[19:57] <obra> I guess "why all the icons"

[19:57] <obra> Or is this a refinement?

[19:57] <obra> "no words takahashi"

[19:58] <Juerd> It works great with japanese, it works less great with english... I thought maybe it could work with icons :)

[19:58] <tehmaze> what is it?

[19:58] <obra> cool

[19:58] * obra has takahashi-ed his talk for npw

[19:58] <Juerd> obra: This is a 30 second presentation, though :)

[19:58] <Juerd> Just trying it.

[19:59] <obra> Juerd: nice

[19:59] <tehmaze> what is takahashi, enlighten me please :)

[20:00] <obra> google 'takahashi method'

[20:00] <Juerd> The message basically is: takahashi method with icons / bullet slides / throw them away / takahashi had an idea / small letters suck / enlarge / instant clarity / takes time / makes people happy / japanese / other languages / everyone (understands) / this is an elephant / better!

[20:01] <tehmaze> lol :)

[20:01] <tehmaze> takahashi, 'huge characters'

[20:01] <Juerd> Actually

[20:03] <Juerd> The message basically is: takahashi method with icons / bullet (slides) / throw them away / (takahashi had an) idea / small letters (suck) / enlarge / (instant) clarity / (takes much) time (to prepare) / (but makes people) happy / (works well for) japanese / (not necessarily for) other languages / (but everyone on this) planet (understands) / (this is an) elephant / better!

[20:05] <Juerd> I hope that a normal takahashi presentation takes less time to prepare per 30 seconds, though :)

[20:05] <Juerd> This took me an hour

[20:05] <Juerd> (Finding icons and japanese for "I do not speak Japanese")

[20:08] <theorbtwo> An hour per 30 seconds of talk?

[20:10] <GeJ> never attended a takahashi presentation yet, but if you haven't been there, my feeling is that the slides are not so helpful unless you already know what it's talking about.

[20:11] <Juerd> theorbtwo: With icons, yeah, apparently :)

[20:49] <Shillo> Hullo. :)

[20:57] <eric256> hello

[21:10] <eric256> anyone know if there is a reason that pugs -V returns the wrong subersion number?

[21:10] <eric256> subversion (not the svk or svn but teh actual .28 portion)

[21:12] <PerlJam> ah, such confusing terminology

[21:12] <eric256> lol

[21:18] * Odin- subverts the terms.

[21:27] <stevan> Juerd: diagrams with some explainations http://perlcabal.org/~stevan/mm_viz/index.html

[21:28] <eric256> on the test 10 pages shouldn't the Point3D class somehow say that is inherits Point?

[21:29] <meppl> is anybody planing making a java-compiler for parrot?

[21:29] <stevan> eric256; yes :) changing now

[21:31] <stevan> eric256: fixed now,.. thanks 

[21:31] <PerlJam> meppl: Feel free to write one.

[21:31] <meppl> :D

[21:31] <meppl> perljam, i only was interested

[21:31] <eric256> np...is there a short 15 word or less example of why you want eignclasses?  if not thats okay ;) looks like it might have something to do with roles versus classes

[21:32] <stevan> parrot -e "perl -e 'javac @ARGV'"

[21:32] <stevan> eric256: it is to keep method dispatch consistent

[21:32] <PerlJam> eric256: The "work" of doing class-things needs to happen somewhere.

[21:33] <stevan> method dispatch looks at the class of an instance for methods

[21:33] <stevan> well Foo is an instance of Class, but class methods for Foo are not stored in Class

[21:33] <stevan> so the Eigenclass steps inbetween and can easily hold the class methods for Foo

[21:33] <eric256> gotcha...i think. ;) 

[21:34] <stevan> eric256: we directly stole it from Ruby,.. name and all

[21:34] <stevan> *cough* s/stole/borrowed/ *cough*

[21:36] <eric256> so class Foo declares an instance of class Class ?

[21:36] <eric256> and since its an instance it needs somewhere to exist?  kinda the jist of it?

[21:37] <stevan> class Foo is an instance of Class

[21:37] <stevan> Class being itself a class

[21:37] <eric256> alright...thats enough to keep my head busy for a while ;)

[21:37] <stevan> :)

[21:38] <eric256> at least now when i look at your pretty pictures they mean slightly more than before ;)

[21:38] <stevan> this used to keep me up at night,.. literally,.. the spinning.... 

[21:38] <eric256> you need like a Perl6 OO for newbs ;)

[21:39] <svnbot6> r7688 | stevan++ | Perl6::MetaModel - 

[21:39] <svnbot6> r7688 | stevan++ | * fixed naming of Eigenclasses

[21:39] <svnbot6> r7688 | stevan++ | * minor tweaks in a few tests

[21:39] <svnbot6> r7688 | stevan++ | * added GraphViz driven class grapher,.. see examples at

[21:39] <svnbot6> r7688 | stevan++ |   http://perlcabal.org/~stevan/mm_viz/index.html

[21:42] <GeJ> stevan: how much do you think the average Joe Sixperl should know about the MM? isn't all the EigenClass, Roles & co. too, hum... scary compared to the Class/Interface of let's say Java?

[21:42] <eric256> you don't actualy need to know about EigenClass's at all

[21:42] <eric256> btw...Java is terrifiying!!! madness i say madness!!!

[21:43] <stevan> GeJ: You will need to know about classes and roles

[21:43] <eric256> ?eval  my @x = (1..5); print shift @x, "hello", @x;

[21:43] <evalbot_7688> Error: No compatible subroutine found: "&shift" 

[21:43] <stevan> anything more is optional

[21:43] <Shillo> stevan: Hiya!

[21:43] <stevan> hey Shillo 

[21:44] <Shillo> I feel a bit guilty about being drawn into a completely abstract discussion on the mailing list. :)

[21:44] <stevan> GeJ: I expect it will be like symbol tables are in p5, some people use them, others avoid them, but in the right hands, they can be a powerful tool

[21:45] <stevan> Shillo: isnt that what p6l is for ;)

[21:45] <Shillo> :)

[21:47] <GeJ> stevan: ok... and for the EigenClass, as I see your diagram (Test30) it seems that there is an e-<ClassName> for every <ClassName> used. Won't that be a big overhead? 

[21:48] * GeJ nods at eric256... definitely a Perl6 00 for Dummies

[21:48] <stevan> GeJ: yes, it is a bit of overhead, however, they are fairly slim if you dont use them

[21:48] <stevan> and to add them in dynamically is very difficult because they must maintain the mirrored hierarchy

[21:48] <GeJ> they're 'auto-generated', right?

[21:49] <stevan> yes, when a class is created, an eigenclass is created for it

[21:49] <GeJ> oki

[21:49] <stevan> they are really just an implementation detail

[21:49] * GeJ can't wait to get a 6.28.0

[21:51] <obra> What's left?

[21:51] <stevan> for 6.28.0? the metamodel mostly

[21:51] <GeJ> $work and $life prevent me to get my feet wet yet --while I spend a pretty good amount of time looking at what's happening in the P6 world-- but once I get it, geez I want to play with that babe of yours guys :)

[21:51] <GeJ> PIL2 implementation wasn't part of it?

[21:52] <obra> How much metamodel work is left?

[21:52] <stevan> obra: I am not sure how far autrijus has gotten on the Haskell port

[21:52] <obra> *nodnod*

[21:53] <stevan> there are still some stones left unturned in the prototype, but I think we need to integrate with the container model and runtime to figure those out

[21:53] <stevan> and that is best done in Pugs itself

[21:55] <stevan> obra: also the metamodel is mostly based on A12, with some stuff added from recent discussions, but some of the more recent digressions have not been added/experimented with

[21:55] <svnbot6> r7689 | stevan++ | Perl6::MetaModel - cleaning up some junk at the end of the file

[21:56] <rafl> stevan: How much faster performs Chaos.pm compared with Chaos/Upoptimized.pm?

[21:57] <rafl> stevan: And why does the Unoptimized version get installed? Doesn't seem to be used. Let's delete it. It's still in the RCS...

[21:58] <stevan> rafl: Chaos.pm runs about 400% faster I think (something like that)

[21:58] <stevan> however the recent eigenclass stuff slowed everything down 

[21:59] <stevan> rafl: the unoptimized version is there for reference mostly, I think it worth keeping in RCS though

[22:00] <rafl> Even if you delete it, it's still in the RCS. History won't get deleted :-)

[22:00] <stevan> well this is meant to be a prototype, so keeping a clean readable version is useful I think 

[22:00] <stevan> at least until autrijus ports it to haskell

[22:01] <rafl> Do you still maintain it and put port the new changes from Chaos.pm?

[22:01] <stevan> rafl: yes

[22:02] <rafl> Great. Maybe butting it into a directory that doesn't get installed would be OK.

[22:02] <stevan> rafl: that works for me

[22:03] <rafl> Thanks.

[22:03] <stevan> rafl: I will move it to docs/

[22:04] <stevan> actually I will do it in a few hours, right now its time for dinner &

[22:04] <rafl> Bon appetit!

[22:15] *** joao is now known as bracaman

[22:15] *** bracaman is now known as joao

[22:16] <dduncan> fyi, I just posted to P6L a design problem I've been facing for awhile, and I appreciate feedback

[22:17] <dduncan> it concerns the combination of a pair of related classes that form a solution, and people that want to subclass that solution

[22:17] <dduncan> any replies should be on P6L, and I now have to leave for a few hours

[22:17] <dduncan> thanks

[22:27] <Juerd> stevan: It's confusing that there are subclasses of instances

[22:27] <Juerd> stevan: The only way I can read this as a coherent thing is to separate Class into two things :)

[22:28] <Juerd> stevan: (removing the cycle)

[22:28] <Juerd> stevan: Also, how something can be a subclass and an instance at the same time is beyond me :)

[22:28] <Juerd> stevan: This is all highly weird for an outsider

[22:28] <Juerd> stevan: I hope this is not the way things work in Perl itself?

[22:34] <Juerd> stevan: Why do paths end in the roles (test30)?

[22:35] <Juerd> My head hurts.

[22:39] <GeJ> Well, if you need a dummy to test-proof your documentation, I'd be more than willing to play this role... heck with my self esteem ;)

[22:42] <Juerd> GeJ: That's a good idea for all documentation. 

[22:43] <Juerd> GeJ: Do you have a few years of spare time?

[22:43] <Juerd> :)

[22:43] <Juerd> GeJ: You can start with Perl 5, and then move on to Perl 6.5 when you're done :)

[22:55] <GeJ> Juerd: interesting advice... let me consid... "no" :)

[22:55] <GeJ> with all due respect, of course :)

[22:59] <rafl> Juerd: squirremail on feather seems to be broken.

[23:00] <rafl> Warning: fsockopen(): unable to connect to localhost:143 in /usr/share/squirrelmail/plugins/login_auth/functions.php on line 128

[23:01] <rafl> Why don't we use a webmailer that's written in Perl? :-)

[23:01] <rafl> Juerd: I guess that happens because imap is disabled in favour of imaps.

[23:14] <Juerd> rafl: Because all webmailers written in Perl suck even more than squirrelmail. Please prove I'm wrong.

[23:14] <svnbot6> r7690 | juerd++ | A 2-level delegation test I just thought of

[23:14] <Juerd> rafl: imap should be enabled on localhost

[23:14] <rafl> Juerd: telnet localhost 143 doesn't say so.

[23:15] <Juerd> Indeed

[23:15] <Juerd> But see /etc/dovecot/dovecot.conf

[23:15] <Juerd> It is configured to listen on 127.0.0.1, and listen_ssl on feather.perl6.nl

[23:16] <rafl> Maybe a packet filter?

[23:16] <Juerd> The listen on feather.perl6.nl also does not work

[23:16] <Juerd> In fact, dovecot isn't running.

[23:17] <rafl> :-)

[23:17] <Juerd> Oct 20 01:16:47 feather dovecot: pop3-login: Can't load certificate file /etc/ssl/certs/dovecot.pem: error:25066067:DSO support routines:DLFCN_LOAD:could not load the shared library

[23:17] <Juerd> I wish I knew what this meant.

[23:18] <Juerd> > Apparently someone did a non-maintainer upload and botched something in the 

[23:18] <Juerd> > process.

[23:18] <Juerd> http://lists.alioth.debian.org/pipermail/pkg-openssl-devel/2005-October/000112.html

[23:18] <Juerd> Hurrah.

[23:19] <Juerd> Ah well, it's Debian sid for a reason

[23:20] <Juerd> (First in a long time that I have this kind of trouble, though)

[23:20] <Juerd> First time that I have this, not a long time that I have been having this, for the record.

[23:21] <integral> NMU means that someone other than the developer in charge released that version of the package.   Usually it's for urgent security fixes afaik

[23:21] <Juerd> integral: I know

[23:21] <integral> ah, I seem to have read your comments upside down :)

[23:22] <Juerd> heh

[23:22] <Juerd> Dowside up, then :)

[23:23] <rafl> Juerd: Well, (s|l)trace and try to find that lib to install it?

[23:25] <Juerd> I downgraded openssl

[23:26] <Juerd> There was an upgrade available, but this didn't fix.

[23:26] <Juerd> Dovecot is running again

[23:26] <Juerd> Hm

[23:26] <rafl> Great, thanks.

[23:26] <Juerd> No it's not

[23:26] <Juerd> My ps ax was to ofast

[23:29] <Juerd> Hm

[23:29] <Juerd> Then I have no idea what is causing it.

[23:30] <Juerd> Well, it must be libssl

[23:30] <Juerd> But I don't know precise enough what is wrong, so I cannot fix it :(

[23:32] <Juerd> Ahh

[23:32] <Juerd> Downgrading *dovecot* helped

[23:32] <Juerd> Trying 127.0.0.1...

[23:32] <Juerd> Connected to localhost.

[23:32] <Juerd> Escape character is '^]'.

[23:32] <Juerd> * OK Dovecot ready.

[23:38] <Juerd> Good night

[23:59] <stevan_> Juerd: actually it is (probably) how Perl 6 will work

