[00:35] *** Samhain is now known as efilnikufesin

[01:12] *** ben is now known as venk

[01:33] *** mugwump is now known as TPmG|mgwmp

[01:54] *** buu is now known as buubot

[01:55] *** buubot is now known as buu

[02:39] <svnbot6> r7294 | Darren_Duncan++ | /modules/Rosetta-Incubator : updated all 15 lib/*.pm files so that the file contents match the external file names rather than being generic templates; replaced all occurances of 'Foo' and '0.0.0' with correct class names and versions; filled in the correct NAME and VERSION and LICENCE AND COPYRIGHT documentation for each module

[02:42] *** brentdax__ is now known as brentdax

[04:05] *** brentdax__ is now known as brentdax

[06:08] <geoffb> putter or fglock, what % of test suite does PIL-Run pass?

[06:22] <svnbot6> r7295 | Darren_Duncan++ | /modules/Rosetta-Incubator : added new file /MANIFEST.SKIP

[06:25] <obra> seen autrijus 

[06:25] <jabbot> obra: autrijus was seen 7 hours 20 minutes 31 seconds ago

[06:41] <gaal> geoffb: ping

[06:42] <geoffb> gaal, pong

[06:42] <gaal> heya :)

[06:42] <gaal> see http://m19s28.vlinux.de/cgi-bin/pugs-smokeserv.pl

[06:42] <gaal> around 55% according to the latest smokes there.

[06:42] <geoffb> gaal, yeah, found http://smoke.pugscode.org/

[06:42] <gaal> oh wait, those are old, it seems

[06:43] <geoffb> autrijus++ # new easy to remember URL

[06:43] <gaal> whee

[06:43] <geoffb> putter, fglock, nevermind my last question, but please check STATUS (which I'm about to commit fixes for) to make sure PIL-Run status is reasonable

[06:45] <geoffb> OK, committed.

[06:46] <geoffb> Autrijus: I think I've mostly done the STATUS updates, but I might have dates or details wrong.  Please give it a looksee.

[06:46] <svnbot6> r7296 | geoffb++ | Extensive updates to STATUS

[07:02] * geoffb plays with a one-liner to determine the commit rankings . . .

[07:04] <geoffb> I'm impressed; 50% of 113 committers can claim 9+ commits; 25% can claim 24+; 10% can claim 150+.  Pretty well spread out.

[07:04] <geoffb> And even autrijus and iblech combined do not add up to 50%.

[07:05] <geoffb> Mmmm, well-rounded committing . . . .

[07:15] <geoffb> Make that 112 committers -- an oversimple regex had created a committer with a whitespace name with 14 commits.  :-)

[07:16] <coral> heh

[07:19] <geoffb> OK, time to attempt sleep

[07:19] <geoffb> & # sweet, sweet slumber

[07:33] <gaal> the open :w bug is very weird. I can't reproduce it; named arguments to Prelude's open seem not to be bound.

[07:34] <luqui> could have something to do with "is primitive"?

[07:34] <gaal> hmm, let's see.

[07:35] <gaal> wow, good guess

[07:35] <gaal> it indeed looks like it breaks named args.

[07:35] <gaal> luqui++

[07:37] * luqui has had problems with is primitive before

[07:40] <gaal> doExtract doesn't handle SubPrim, I wonder if that's the reason.

[07:40] <gaal> oops, it does

[07:40] <gaal> in the _ clause

[07:42] <gaal> do you see any effective difference between doExtract SubBlock and doExtract _

[07:42] <gaal> ?

[07:42] <gaal> Parser:309

[07:43] <gaal> doExtract _ formal body = (body, names', params)

[07:43] * luqui looks

[07:43] <brentdax> Hmm, I suppose I should implement a block cipher next.

[07:43] <gaal> is the repetition of 'body' bad?

[07:43] <gaal> brentdax: the masses want fortuna! ;-)

[07:44] <gaal> (there's no reference implementation though)

[07:44] <brentdax> gaal: Maybe once I finish with the ciphers.

[07:44] <gaal> yeah, that order does make sense :)

[07:45] <brentdax> (And fortunately, although there's no reference implementation, I happen to have just acquired a copy of /Practical Cryptography/, which defines Fortuna.)

[07:46] <luqui> gaal, yeah, I can see a difference

[07:46] <luqui> but I don't know quite what it means

[07:46] <luqui> what does extract do?

[07:47] <gaal> it's eventually used to populate env with subParams etc.

[07:48] <gaal> ruleSubDeclaration and retVerbatimBlock

[07:48] <gaal> er, not env

[07:48] <gaal> the actual sub

[07:49] <gaal> brentdax: there's a patch to linux that implements Fortuna for /dev/random, but it has a few kernelisms.

[07:50] <brentdax> I know.

[07:50] <brentdax> (We're also lacking hashing algorithms in pure Perl 6...)

[07:50] <gaal> Cipher::Digest?

[07:51] <brentdax> Nah, digests aren't ciphers.  I think they'd be under Digest::.  (I'm thinking about moving everything to be under Crypt::, though--Crypt::Cipher, Crypt::Digest, Crypt::Random...)

[07:52] <brentdax> (Although digests are used for more than cryptography.)

[07:53] <gaal> Oh, I tought your Cipher was to be a general crypto API.

[07:54] <brentdax> It's to be a general API for encryption algorithms.  Everything under Cipher:: should derive from or compose into the Cipher class; it doesn't make sense for hash algorithms and such to do so.

[07:55] <gaal> linux has the transform layer above that... what do they use it for?

[07:57] <brentdax> Dunno, I haven't looked at Linux's crypto in depth.  (I think Wikipedia linked to the Fortuna patch, though.)

[07:58] <brentdax> Oh...can you `does` a class, or do you have to `is` it?

[07:59] <gaal> you do a role, no?

[07:59] <luqui> under theories you `does` a class

[07:59] <gaal> happily, luke's here to answer that! :)

[07:59] <luqui> but currently you can only `is` classes

[08:00] <brentdax> Ah, okay.

[08:01] <brentdax> Oooh, TEA looks easy to implement.

[08:07] <gaal> 32 bit block, right?

[08:07] * luqui just learned RSA in school :-)

[08:14] <brentdax> 64-bit block, 128-bit key.  The "T" is for "Tiny", and it deserves the name.

[08:14] <brentdax> http://en.wikipedia.org/wiki/Tiny_Encryption_Algorithm

[08:17] <luqui> ooh, designed by David Wheeler

[08:17] <luqui> cool

[08:35] <brentdax> ?eval my @ary = 0..255; say @ary.splice(0, 16, []).perl; @ary.elems

[08:35] <evalbot_7296> 15 241 

[08:36] <brentdax> Hmm... $situations_where_i_would_like_autochaining_methods++;

[08:37] <luqui> ?eval my @a = 0..255;  say @ary but { .splice(0, 16); }.elems

[08:37] <evalbot_7296> Error: Undeclared variable: "@ary" 

[08:37] <luqui> ?eval my @a = 0..255;  say @a but { .splice(0, 16); }.elems

[08:37] <evalbot_7296> Error: No compatible subroutine found: "&elems" 

[08:37] <luqui> ?eval my @a = 0..255;  say (@a but { .splice(0, 16); }).elems

[08:37] <evalbot_7296> Error: No compatible subroutine found: "&elems" 

[08:37] <luqui> ?eval my @a = 0..255;  say @a but { .splice(0, 16) }

[08:37] <evalbot_7296> 16171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912012112212312412512612712812913013113213313413513613713813914014114214314414514614714814915015115215315415515615715815916016116216316416516616716816917017117217317417517617717817918018118218318418518618718818919019119219319

[08:37] <luqui> almost there

[08:38] <luqui> ?eval my @a = 0..255;  say elems(@a but { .splice(0, 16) })

[08:38] <evalbot_7296> Error: No compatible subroutine found: "&elems" 

[08:38] <luqui> ?eval my @a = 0..255;  say +(@a but { .splice(0, 16) })

[08:38] <evalbot_7296> 240 bool::true 

[08:38] <luqui> that's the ticket

[08:38] <brentdax> (In this case, I have to have block ciphers implement _zeroize, because Cipher::Block has state to zeroize too.)

[08:39] <luqui> zeroize?

[08:39] <brentdax> "Oh shit, the secret police are breaking in, delete everything now!"

[08:39] <brentdax> You overwrite all the keys and intermediate data with zeroes--hence, zeroize.

[08:40] <brentdax> (It's also a good behavior for a destructor.)

[08:40] <luqui> ahh

[08:40] <luqui> like shred, but in memory

[08:40] <brentdax> Yup.

[08:41] <brentdax> You can see why I'm asking for `is sensitive` on p6l.

[08:41] <gaal> won't randomize be more secure, assuming there's time?

[08:42] <gaal> "throw the deck in the air" in solitaire :)

[08:42] * luqui wonders how 'is sensitive' would be implemented given the high level of abstraction

[08:43] <brentdax> Heh.  Schneier actually recommends against throwing the deck in the air--apparently a lot of the order is retained when you do that.  He says you should just calmly shuffle the deck.

[08:43] <luqui> it might be tough to keep from accidentally making a cow copy somewhere or something

[08:44] <brentdax> You might have to disable a lot of magic like that, but if you're applying `is sensitive` you're already saying you care more about secrecy than speed.

[08:45] <gaal> i thought it takes seven shuffles to "really" randomize?

[08:45] <svnbot6> r7297 | gaal++ | pugsbugs for `is primitive` and named params

[08:46] <gaal> (this one's a showstopper since it breaks open)

[08:47] <brentdax> gaal: Yes, but you have to get by with what you can.

[08:49] <luqui> brentdax, yeah, but that kind of magic happens at the VM level

[08:49] <luqui> and, for instance, the JS backend would not be able to do anything about it

[08:49] <brentdax> True.  Hmm.

[08:49] <luqui> what would it take to write a parrot-specific module to do that?

[08:49] <luqui> i.e. is it modulable at all?

[08:53] <brentdax> I'm not sure you can hook into stings at low enough levels.  (e.g. you'd have to know when a string grows so you could zero over the old buffer.)  Meh.

[08:54] <brentdax> s/stings/strings/

[08:55] <brentdax> Hmm...is it a Good Thing or a Bad Thing when you know that adding documentation to a module will probably triple its length?

[08:56] * luqui likes that

[08:57] <svnbot6> r7298 | gaal++ | add test temp file to svn ignore list, these are sadly not removed automatically on Windows

[08:58] <brentdax> Okay, Cipher::Block and Cipher::TEA are written.  Now to get some test vectors.

[09:06] <autrijus> gaal: fixing

[09:07] <autrijus> ...except your test passes for me here. weird

[09:11] <autrijus> gaal: the bug might be because I turned off magical pair handling for primitives.

[09:11] <autrijus> because otherwise

[09:11] <autrijus> ~(x => 3)

[09:11] <autrijus> will not stringify

[09:12] <autrijus> gaal: but really, your test succeeds for me :-/

[09:14] <autrijus> there need to be a trait that says "positionals only" it seems.

[09:14] * autrijus ponders

[09:14] <autrijus> or just have ~() accept pairs.

[09:15] <autrijus> Pair.prefix:<~>

[09:15] <wolverian> you mean prefix:<~> (Pair)?

[09:15] <gaal> whoops, back

[09:15] <autrijus> yeah

[09:15] <gaal> i TODO'ed it, ja

[09:15] <wolverian> good, I thought I had missed something :)

[09:15] <autrijus> gaal: no, it unexpectedly passes.

[09:16] <gaal> hmm

[09:16] <autrijus> try it?

[09:16] <gaal> sec

[09:17] <gaal> silly windows shell, ^C does break...

[09:17] <autrijus> anyway, I attempted another kluge

[09:17] <autrijus> namely only real builtins accept all-positionals

[09:18] <autrijus> and user defined primitives still handles named

[09:18] <autrijus> it feels klugy, so better ideas welcome.

[09:21] <gaal> !

[09:21] <gaal> unexpected success here too. weird, because it did fail previously.

[09:21] <gaal> does io.t pass for you?

[09:22] <autrijus> I doubt so as open :w is shown to not work

[09:22] <gaal> t/builtins/io/io.t

[09:22] <autrijus> I'm recompiling, a sec

[09:22] <autrijus> it fails as expected.

[09:22] <luqui> autrijus, with that kludge, how do we get operator adverbs

[09:23] <luqui> ?eval say (1..10 :by(2))

[09:23] <evalbot_7298>  Error: cannot cast from VBool True to Pugs.AST.Internals.VCode (VCode) 

[09:23] <autrijus> luqui: we don't, so you better think of some way so we can safely demagicalize pairs

[09:23] <autrijus> oh wait, you already had.

[09:23] <autrijus> ;)

[09:23] <luqui> :-)

[09:23] <autrijus> int(x => 1)

[09:24] <autrijus> is there some way in &int's prototype to saw we don't want named on the first positional field, short of falling back to *@_ ?

[09:24] <autrijus> and *@_ is bad since we want item context

[09:25] <luqui> sub int((Item, Pair) $x) {...}

[09:25] <autrijus> ooh new syntax.

[09:25] <autrijus> what's the , ?

[09:25] <luqui> I think Larry went with that as a synonym (in type position) for (+)

[09:25] <autrijus> but how do I say, then, it demands Int context?

[09:25] <luqui> hmm

[09:26] <autrijus> sub int ((Item, Pair) $x is context(Int)) ?

[09:26] <luqui> that's getting pretty heavy

[09:26] <autrijus> it's also not what most people can intuit.

[09:26] <autrijus> me included.

[09:26] <luqui> I mean, you really want:  sub int (Int $x) { $x }

[09:26] <luqui> but a Pair is not an int, so it would never fit in there

[09:26] <autrijus> sub int (Int =$x)

[09:27] <luqui> ?

[09:27] <autrijus> sub int (Int $x is positional is coerced)

[09:27] <autrijus> or something like that.

[09:27] <autrijus> sub int (Any $x as Int) {}

[09:27] <autrijus> better?

[09:29] <autrijus> anyway, the prototype of ".." needs some thinking.

[09:29] <autrijus> I mean, signature.

[09:31] <svnbot6> r7299 | brentdax++ | Cipher API work-in-progress check-in:

[09:31] <svnbot6> r7299 | brentdax++ |   * Cipher::Block

[09:31] <svnbot6> r7299 | brentdax++ |   * Cipher::TEA

[09:31] <svnbot6> r7299 | brentdax++ | I haven't even tried compiling these, let alone making sure they work properly.  I'm particularly concerned about TEA and byte-order issues...

[09:31] <autrijus> gaal: io.t now still fails, albeit at a different place. please investigate

[09:31] <brentdax> And with that, it's time for bed.

[09:31] <luqui> sub infix:<..> (Int $left, Int $right, *%adverbs) {...}

[09:32] <autrijus> luqui: not +$by ? 

[09:32] * brentdax &

[09:32] <luqui> that works too

[09:32] <autrijus> luqui: and it's a multi for Int/Int for Str/Str ?

[09:32] <luqui> oh, that, right

[09:32] <autrijus> how does (1 .. '3') work?

[09:32] <autrijus> and how does (1 .. $pair) work?

[09:33] <luqui> autrijus, 1..'3' is an error unless Int does Str

[09:33] <luqui> how is 1..$pair supposed to work?

[09:33] <autrijus> which it does via coercion, no?

[09:33] <autrijus> say 1; # look works

[09:33] <luqui> (oh, what is a pair in item context?)

[09:33] <autrijus> luqui: exactly.

[09:33] <luqui> so in that case, Int does Str

[09:33] <gaal> autrijus: ack

[09:34] <luqui> which is something I've been saying all along

[09:34] <autrijus> I know, but not part of canon

[09:34] <autrijus> that, and demagical pairs

[09:34] <luqui> anyway, this comes back to the semantics of coersion

[09:34] <autrijus> namely, &coerce:<as>

[09:34] <luqui> which have definitely not been worked out

[09:35] <autrijus> and how compiler inserts those forms.

[09:35] <autrijus> *nod*

[09:35] <luqui> to me, &coerce:<as> takes a thing on its left side and a *context* (not a type) on its right

[09:36] <luqui> and then the compiler inserts coerce:<as> everywhere

[09:36] <svnbot6> r7300 | autrijus++ | * Repair open :w using a terribly kluge that tests the

[09:36] <svnbot6> r7300 | autrijus++ |   subroutine body for Primness, and if it's Prim, don't

[09:36] <svnbot6> r7300 | autrijus++ |   accept named arguments but use coercion instead.

[09:36] <svnbot6> r7300 | autrijus++ |   It's a horrible kluge -- we need something like that

[09:36] <svnbot6> r7300 | autrijus++ |   at language level!

[09:36] <luqui> but there is special support for when coerce:<as> is a no-op

[09:36] <luqui> that is, the compiler should know that

[09:36] <autrijus> by context, you mean

[09:37] <luqui> however we end up telling it...

[09:37] <autrijus> CxtClurpy Type | CxtItem Type | CxtVoid

[09:37] <autrijus> so it still carries a type

[09:37] <luqui> yeah

[09:37] <autrijus> then we have first-class contexts? ;)

[09:37] <autrijus> how lovely.

[09:38] <luqui> however, coerce:<as> is a really funny thing

[09:38] <luqui> in order to make that play well with the typecheck

[09:38] <luqui> er

[09:38] <luqui> all its logic pretty much has to be in its signature(s)

[09:39] <autrijus> aye.

[09:39] <luqui> i.e.  multi coerce:<as> (@array, Item of Num $cxt --> Int) {...}   # array becomes integer in numeric context

[09:40] <luqui> omitting the --> clause is unacceptable

[09:40] <autrijus> *nod*

[09:41] * autrijus feels a distinct need of formalization / visiolization.

[09:41] <svnbot6> r7301 | gaal++ | readline should not have used guardIO, go back to tryIO undef

[09:41] <gaal> when readline reaches EOF, it shouldn't raise an exception. but other read errors should probably fail loudly, no?

[09:42] * luqui agrees

[09:42] * luqui wonders if he's the one who should do it

[09:43] <autrijus> gaal: yes, you may need to have a guardIOwith form or something

[09:43] <autrijus> which would involve case-analyzing the ioError

[09:43] <autrijus> or 

[09:43] <autrijus> guardIOexcept

[09:43] <autrijus> guardIOexcept :: IOError -> IO a -> Eval a

[09:44] <autrijus> or even

[09:44] <gaal> [IOError] perhaps?

[09:44] <autrijus> guardIOexcept :: (IOError -> Maybe a) -> IO a -> Eval a

[09:44] <autrijus> the idea is using predicates to maybe catch it

[09:44] <autrijus> uncaught ones are thrown again

[09:45] <autrijus> or using data driven way:

[09:45] <autrijus> guardIOexcept :: [(IOError, a)] -> IO a -> Eval a

[09:45] <autrijus> or even

[09:45] <autrijus> guardIOexcept :: [((IOError -> Bool), a)] -> IO a -> Eval a

[09:46] <autrijus> guardIOexcept [(isEOFError, undef)] $ do ...

[09:46] <gaal> guardIOwithASieve

[09:46] <autrijus> the isEOFError predicate is convenient here

[09:46] <gaal> ah, yes, nice.

[09:46] <autrijus> anyway, improvise. I need to nap a bit more :)

[09:47] <gaal> enjoy

[09:47] <autrijus> luqui: I confirm your wondering :)

[09:47] <luqui> oh, we already do have first-class context, do we not?

[09:47] <luqui> ?eval say want

[09:47] <evalbot_7301> Scalar (Any), LValue bool::true 

[09:48] <autrijus> luqui: we do, except how it is defined is undefine

[09:48] <autrijus> d

[09:48] <autrijus> so I cheated with a Str.

[09:48] <gaal> can someone on linux please svn up and tell me if io.t crashes for them near the end?

[09:48] <autrijus> I wonder if we want tagged unions for that. or just a Context interface with Item/Slurpy classes.

[09:48] <gaal> trying to figure out if this failure is win32 specific.

[09:48] * luqui thinks it is probably just a union

[09:49] <autrijus> luqui: is tagged unions canon yet? ;)

[09:49] <luqui> most definitely.  no idea how they're spelled, but they're there

[09:49] <autrijus> or is MMD visitors so strong that we don't need the counterpart in the expression problem setting?

[09:49] <luqui> hmm?

[09:50] <luqui> elaborate

[09:50] <autrijus> luqui: with strong OO-MMD all functional visitors with tagged unions can be rewritten with roles

[09:50] <autrijus> hence there are people who argue we'd only need one or the other.

[09:50] <autrijus> Scala of course got both.

[09:51] <autrijus> gaal: fbsd

[09:51] <autrijus> # Looks like you planned 55 tests, but ran 52

[09:51] <autrijus> *** tempfile.3702.956: openFile: resource busy (file is locked)

[09:51] <autrijus>     at tmp-Prelude.pm line 310, column 18-61

[09:51] <luqui> Scala didn't get both, because scala forgot that case types are union types

[09:51] <luqui> if you have Foo = Bar | Baz, there is no guarantee in Scala  that there is not a Quux that is also a Foo

[09:51] <autrijus> so they are open like OCaml unions

[09:52] <autrijus> which may or may not be a feature :)

[09:52] <autrijus> but yeah, it's different from ordinary algebraic variant types.

[09:52] <gaal> autrijus: close doesn't :-(

[09:52] <luqui> it looks like it until you think about contravariant typing

[09:52] <autrijus> luqui: yup.

[09:53] <autrijus> but I really need to doze off. bbiab :) &

[09:53] * luqui thinks he will write up a coersion proposal

[09:53] <luqui> night

[09:56] *** brentdax__ is now known as brentdax

[10:03] <joao_> good $localtime

[10:06] <gaal> heya

[10:07] *** joao_ is now known as joao

[10:13] <gaal> $todo.add("make io fails appear to originate in calling code, not the prelude; or at least give a stack trace")

[10:22] <gaal> what's todo_fail been renamed to?

[10:22] <gaal> fail .. :todo?

[10:25] <gaal> (yes :)

[10:25] <kgftr|konobi> autrijus don't suppose you happen to know of any 'stemmers' for chinese (ie: for search engines) [OT i know, but damn freenode doesn't allow prvmsg]

[10:26] <svnbot6> r7302 | gaal++ | introduce guardedIO, which is like boolIO but fails on errors.

[10:26] <svnbot6> r7302 | gaal++ | use in close and soon other ops.

[10:28] <broquaint> win 5

[10:28] <broquaint> Dagnabbit.

[10:29] <gaal> hrm?

[10:30] <luqui> kgftr|konobi, freenode doesn't allow prvmsg?

[10:30] <gaal> you need to be identified by nickserv.

[10:32] <svnbot6> r7303 | gaal++ | fix test (this involved making sure files are closed before opening

[10:32] <svnbot6> r7303 | gaal++ | them again; should this really be needed?)

[10:35] <kgftr|konobi> last time i registered with freenode i got spammed with "please donate" etc, so never again

[10:36] <joao> registering gives you the possibility to identify yourself. that's the main reason, for me :-) And I don't remember to receive those messages

[10:36] <luqui> what?  never happened to me

[10:36] <broquaint> Oh no not spam!

[10:37] <broquaint> They have that on the internet now?

[10:37] *** joao is now known as jff

[10:37] *** jff is now known as joaoferreira

[10:38] <gaal> kgftr|konobi: spammed with /msgs or by email?

[10:38] <joaoferreira> sorry guys:

[10:38] <joaoferreira> [11:37] 	-NickServ-	Freenode is a service of Peer-Directed Projects Center, an

[10:38] <joaoferreira> [11:37] 	-NickServ-	IRS 501(c)(3) (tax-exempt) charitable and educational organization.

[10:38] <joaoferreira> [11:37] 	-NickServ-	For frequently-asked questions about the network, please see the

[10:38] <joaoferreira> [11:37] 	-NickServ-	FAQ page (http://freenode.net/faq.shtml).

[10:38] <joaoferreira> this is the message 

[10:38] <joaoferreira> where's the spam? :D

[10:38] *** joaoferreira is now known as joao

[10:38] <kgftr|konobi> gaal: e-mail

[10:38] <joao> oh

[10:39] <joao> They don't require the email, do they?

[10:39] <gaal> don't give them your email then :)

[10:39] <joao> :)

[10:39] <kgftr|konobi> they used to

[10:40] <gaal> don't now.

[10:40] <kgftr|konobi> oh... works now... yay!

[10:40] <joao> but I think you could provide the value: noemail

[10:40] <joao> (not sure, though)

[10:40] <gaal> (opt-out)--

[10:46] *** Lopo_ is now known as Lopo

[10:51] <theorbtwo> kgftr|konobi, mind if I hit you up for 802.11 configuration advice?

[10:55] <gaal> advice the first: close telnet :)

[10:56] <theorbtwo> orafu, of course, if anybody else wants to help, speak now and I'll spam the channel with off-topic stuff.

[10:57] <theorbtwo> Dammit, irssi completion is getting rather annoying.

[10:57] <theorbtwo> s/orafu/or/

[11:00] <luqui> ?eval sub f ($x) { say $x }  f { 1 }.()

[11:00] <evalbot_7303> 1 bool::true 

[11:00] <luqui> ?eval sub f (*@x) { say @x }  f { 1 }.()

[11:00] <evalbot_7303> <SubBlock(<anon>)> Error: cannot cast from VBool True to Pugs.AST.Internals.VCode (VCode) 

[11:00] <luqui> if anything that seems backwards

[11:00] <luqui> maybe it's a slurpy block thing

[11:00] <joao> ?eval 42.shift()

[11:00] <evalbot_7303> 42 

[11:01] <joao> what should be the error?

[11:01] <broquaint> ?eval ().shift

[11:01] <evalbot_7303> undef 

[11:01] <luqui> "shift: method not found"?

[11:01] <joao> ok, the usual

[11:02] <luqui> ?eval sub f (*@x, *&slurp) { say "args: @x[]; block: " . &slurp }  f { 1 }.()

[11:02] <evalbot_7303> Error:  unexpected "." expecting operator, ":", ",", term postfix, postfix conditional, postfix loop, postfix iteration, ";" or "}" 

[11:02] <luqui> heh, perl5+perl6)/2

[11:02] <luqui> ?eval sub f (*@x, *&slurp) { say "args: @x[]; block: " ~ &slurp }  f { 1 }.()

[11:02] <evalbot_7303> Error: Slurpy array followed by slurpy scalar: MkParam {isInvocant = False, isOptional = False, isNamed = False, isLValue = True, isWritable = False, isLazy = False, paramName = "&slurp", paramContext = CxtSlurpy (mkType "Code"), paramDefault = Noop} 

[11:02] <luqui> no silly, that's a slurpy block!

[11:03] <luqui> ?eval sub f (*&slurp, *@x) { say "args: @x[]; block: " ~ &slurp }  f { 1 }.()

[11:03] <evalbot_7303> args: ; block: <SubBlock(<anon>)> Error: cannot cast from VBool True to Pugs.AST.Internals.VCode (VCode) 

[11:03] <luqui> ?eval sub f (*@x, *&slurp) { say "args: @x[]; block: " . &slurp }  f({ 1 }.())

[11:03] <evalbot_7303> Error:  unexpected "." expecting operator, ":", ",", term postfix, postfix conditional, postfix loop, postfix iteration, ";" or "}" 

[11:03] <luqui> ?eval sub f (*@x) { say @x }  f({ 1 }.())

[11:03] <evalbot_7303> 1 bool::true 

[11:03] <luqui> ?eval sub f (*@x) { say @x }  f ({ 1 }.())

[11:03] <evalbot_7303> 1 bool::true 

[11:03] <luqui> ?eval sub f (*@x) { say @x }  say f {1}.()

[11:03] <evalbot_7303> <SubBlock(<anon>)> Error: cannot cast from VBool True to Pugs.AST.Internals.VCode (VCode) 

[11:03] <luqui> hm

[11:21] <svnbot6> r7304 | gaal++ | move some more Prims to guarded IO; guardIOexcept coming soon.

[11:25] <kgftr|konobi> theorbtwo: sure

[11:38] <theorbtwo> Ah, exelecent!

[11:38] <theorbtwo> Sorry I didn't notice you earlier -- three machines and several windows on this one is not condusive to noticing everything that's going on...

[11:40] <kgftr|konobi> =0P

[11:41] <theorbtwo> Bah, and my pcap is apparently in a borked half-upgraded state, need to reboot my router.

[11:42] <theorbtwo> Can you join #foobarbaz to avoid spamming this channel, and so that Jess can possibly fill you in while it's rebooting?

[11:47] *** theorbtw1 is now known as theorbtwo

[12:10] <nothingmuch> moose

[12:12] <gaal> elk!

[12:15] <svnbot6> r7305 | gaal++ | guardIOexcept, used in readline (where else do we need it?)

[12:16] * nothingmuch wonders how much it will be to make the type inferrencer's nullary ops become parametrized

[12:16] <nothingmuch> and then making the unification code behave like theorys

[12:16] <nothingmuch> theories

[12:17] <nothingmuch> seen luqui

[12:17] <jabbot> nothingmuch: luqui was seen 1 hours 13 minutes 33 seconds ago

[12:17] <nothingmuch> luqui: ping

[12:23] <luqui> nothingmuch, pong

[12:24] * luqui figures he should do some type inference exercises

[12:24] <luqui> to figure out how one might actually do it over theories

[12:26] <luqui> gnop

[12:26] <luqui> &

[12:33] <nothingmuch> que es gnop?

[12:33] <nothingmuch> i was meaning to ask how L::AG is progressing

[12:38] <luqui> 'gnop' eq reverse 'pong'

[12:39] <luqui> @Larry (notably al and pmichaud) and I are talking about the parrot port of L::AG

[12:39] <nothingmuch> what does it mean in the context?

[12:39] <luqui> unpong?

[12:39] <nothingmuch> what does pong mean in the context?

[12:40] <luqui> basically, pong respond to your ping, and then I realized that I had to go again, so I unresponded

[12:40] <luqui> heh

[12:40] <nothingmuch> ah

[12:40] <luqui> other than that L::AG is not coming

[12:40] <luqui> I'll have some reasonable hacking time come the weekend

[13:20] <nothingmuch> luqui: i have a problem

[13:20] <nothingmuch> type::operator::nary: layout($$) = { join(" ", $.name, map { layout($$) } @{ $.params }) }

[13:20] <nothingmuch> type::operator::binary: parenthesize($$) = { $$->isa("type::operator::pair") || level($$) }

[13:20] <nothingmuch> i can't inherit level to any child in $.params

[13:21] <nothingmuch> how could i hack in support for level(@.params) = { level($$) }

[13:21] <nothingmuch> and then say layout(@.params); # map { layout($_) } @{ $.params }

[13:24] <nothingmuch> luqui.ungnop

[13:37] <luqui> well, of course you could always build a cons list and do it that way

[13:37] <nothingmuch> eep

[13:37] <nothingmuch> that's not perl like =)

[13:37] <luqui> but as far as level(@.params) = ...

[13:38] <luqui> well, the current architecture will let you do that

[13:38] <luqui> (not hard to hack in)

[13:38] <nothingmuch> yeah, seing the code i figured it out

[13:38] <luqui> but once I switch to the memory-friendly version, it might not be so easy

[13:38] <nothingmuch> since attrdef = attr <perl_block ()>

[13:38] <nothingmuch> that's what i was really concerned about - that the next version should not lock this out

[13:39] <luqui> I think it's doable as long as @.params is uniformly typed

[13:39] <nothingmuch> that is an easy promise to make

[13:39] <luqui> uh huh

[13:39] <nothingmuch> that is, if @ISA is respected by L::AG

[13:39] <nothingmuch> they are all ->isa("type")

[13:40] <luqui> oh, by uniformly typed, I mean has the same set of attributes defined on it

[13:40] <nothingmuch> ah

[13:40] <nothingmuch> hmm

[13:40] <luqui> as in, they are all cases of the same nonterminal

[13:40] <nothingmuch> teh sux0r

[13:40] <luqui> I think your grammar is a single-nonterminal grammar anyway, so you don't have to worry

[13:40] <nothingmuch> que es nonterminal?

[13:40] <luqui> AGs come from CFG-land

[13:41] <nothingmuch> CFG?

[13:41] <luqui> context-free

[13:41] <nothingmuch> ah

[13:41] <nothingmuch> i dunno much about that 

[13:41] <luqui> nonterminal appears on the left side of the colon

[13:41] <luqui> so, traditionally, you have:

[13:41] <luqui> foo: bar baz | quux

[13:41] <luqui> each of the things on the right ("bar baz" and "quux") is a production

[13:42] <luqui> you associate a set of attributes for each *nonterminal*, whereas you provide different implementations for each *production*

[13:43] <luqui> you can also think of it this way:  data Foo = Bar | Baz

[13:43] <luqui> Foo is the nonterminal, Bar and Baz are the productions

[13:43] <luqui> so if you have a tree where every node can be anything, then that is a single-nonterminal grammar

[13:43] <nothingmuch> okay

[13:43] <luqui> and uniformedly-typedness is guaranteed

[13:43] <nothingmuch> so how does that help me? ;-)

[13:44] * nothingmuch fails to make the link

[13:44] <luqui> that means that, for your grammar, layout(@.params) will be possible

[13:44] <luqui> because @.params will all be cases of the same nonterminal

[13:45] <nothingmuch> but they won't

[13:45] <luqui> really?  your layout grammar has more than one nonterminal?

[13:45] <nothingmuch> list a has only one child in @.params

[13:45] <nothingmuch> it's type::operator::nary->new(list => type::variable::free->new);

[13:46] <nothingmuch> but you can parametrize types over N types

[13:46] <nothingmuch> that is, you can parametrize nary type operators over N type parameters

[13:46] <luqui> let me ask you this:  are there any types in your AG that have an attribute that another type doesn't?

[13:47] <nothingmuch> oh

[13:47] <nothingmuch> i thought that by the same attrs you meant same definition of attrs

[13:47] <nothingmuch> not same names

[13:47] <luqui> nononono, that wouldn't be useful at all

[13:48] <nothingmuch> right

[13:48] <nothingmuch> well, not now

[13:48] <nothingmuch> but that's only because some aren't used

[13:48] <nothingmuch> there is no reason not to have them

[13:48] <nothingmuch> (but it would be nice if they were auto generated ;-)

[13:49] <luqui> anyway, I'm going to take a nap.  Long day ahead, and haven't slept enough.  

[13:49] * luqui the sleep pussy &

[13:49] <nothingmuch> ciao

[13:58] * joao is surprised. These guys really sleep :)

[13:59] <nothingmuch> =)

[13:59] <nothingmuch> *fzzzzzzzzzzzzzzzz* went my brain

[14:00] <nothingmuch> when typing length :: list a -> int somehow an instantiated variable gets instantiated into itself

[14:05] <nothingmuch> oh, right

[14:05] <nothingmuch> since it remains generic it's the same var.

[14:05] <nothingmuch> doh!

[14:16] <bhoult> is there a way to get perl to log every program that it runs?

[14:16] <nothingmuch> bhoult: yes, but that is entirely un perl related

[14:16] <nothingmuch> what you need to do is create a C wrapper

[14:16] <nothingmuch> that logs argv to a file

[14:16] <nothingmuch> and then execs perl with the same args

[14:16] <nothingmuch> and then put that in place of perl

[14:17] <nothingmuch> and rename perl to perl_orig or something like that

[14:17] <QtPlatypus> bhoult: Perhaps you should ask on one of the #perl channels

[14:17] <bhoult> ok, thanks.

[14:17] <QtPlatypus> nothingmuch: Personally I would run perl under a truss and then look for the exec'es

[14:18] <nothingmuch> then you understood differently than I did

[14:18] <nothingmuch> i thought he wanted it to log every script that is run by perl

[14:18] <nothingmuch> and you thought he wanted it to log every command that a perl script runs

[14:19] <bhoult> I want it to log every script that perl runs.

[14:20] <nothingmuch> btw, QtPlatypus: http://search.cpan.org/~rclamp/Devel-System-0.01/lib/Devel/System.pm

[14:26] *** brentdax__ is now known as brentdax

[14:29] <nothingmuch> bzzt again

[14:37] <svnbot6> r7306 | autrijus++ | * listop was too eager in globbing up block arguments:

[14:37] <svnbot6> r7306 | autrijus++ |     f{1}.()

[14:37] <svnbot6> r7306 | autrijus++ |   should mean f({1}.()), not (f{1}).().  Thanks to Shillo

[14:37] <svnbot6> r7306 | autrijus++ |   for reporting it.

[14:40] <PerlJam> I find it really magical in a way that I can read about a bug on p6l and then when I look at #perl6 it contains comments to the effect that the bug has been fixed.

[14:40] <PerlJam> :-)

[14:41] <nothingmuch> oh moose!

[14:54] * eric256 continues his quest to learn haskell....this isn't soo bad realy once you start to get some understanding of it ;)

[14:54] <svnbot6> r7307 | iblech++ | * Usual svn props.

[14:54] <svnbot6> r7307 | iblech++ | * t/builtins/strings/length.t: chars "abcdef" > 4 should (and is) the same as

[14:54] <svnbot6> r7307 | iblech++ |   chars("abcdef") > 4.

[14:54] <svnbot6> r7307 | iblech++ | * t/pugsbugs/primitive_named_params.t: Fixed and unTODOed the test.

[14:55] <autrijus> eric256: the distance from 0 to 1 is larger than 1 to maxint :)

[14:55] <eric256> autrijus -> zen master

[14:56] <eric256> lol

[14:56] <autrijus> gaal: you made mkdir etc into guardedIO

[14:56] <autrijus> which means they raise exceptions

[14:56] <autrijus> but in perl5 they merely return false

[14:56] <autrijus> that's a change of semantics... I wonder if it's warranted.

[14:57] * nothingmuch tests his connection

[14:57] <autrijus> maybe it will push us into implementing fatalism properly

[14:57] * autrijus ponders.

[14:58] <autrijus> wow, TSa bowed out.

[14:58] <autrijus> the same moment as I rebilled the 6.2831 milestone into something more concrete ;)

[15:00] <svnbot6> r7308 | autrijus++ | * redefine "runtime role composition other features" in the

[15:00] <svnbot6> r7308 | autrijus++ |   6.2831 milestone as "type system and linking".

[15:03] <nothingmuch> bowed out of what?

[15:03] <eric256> he bowed out of the mailing ilst

[15:04] <eric256> of course then he also asked questions in his message ..... seemed kinda drama queen ish

[15:04] * nothingmuch will have a look

[15:06] <nothingmuch> i didn't even understand his goodbye

[15:06] <svnbot6> r7309 | nothingmuch++ | Blondie's milner.pl

[15:06] <svnbot6> r7309 | nothingmuch++ | * recursive functions, and generic recursive functions

[15:06] <svnbot6> r7309 | nothingmuch++ | * initial generic vars includes the ones from the prelude (silly me ;-)

[15:08] <kolibrie> wow # re TSa

[15:11] * nothingmuch wonders why so many people are wasting their time gauging and inspecting kwalitee

[15:13] <Limbic_Region> dunno

[15:14] <Limbic_Region> my one and only module is lacking pod coverage testing and dependency in another module

[15:14] <Limbic_Region> I am not going to worry about that

[15:14] <eric256> kwalitee?

[15:15] <nothingmuch> Limbic_Region: the problem is that instead of pod coverage they are testing for a test that tests pod coverage

[15:15] <nothingmuch> they are completely insane

[15:15] <nothingmuch> eric256: kwalitee is a measure of how good a module is

[15:15] <nothingmuch> based on some traits of the distribution

[15:16] <nothingmuch> "it sounds like quality, but it isn't exactly quality"

[15:16] <nothingmuch> they test every dist on cpan

[15:16] <nothingmuch> and make sure that:

[15:16] <nothingmuch> it expands properly, it has META.yml, it has a Makefile.PL or a Build.PL, it has a license, a README, a Changelog, etc

[15:16] <nothingmuch> which is, on the whole, OK

[15:17] <nothingmuch> but they're really getting carried away on the perl-qa list

[15:17] <nothingmuch> adding weird metrics for these things

[15:17] <nothingmuch> which make absolutely no sense

[15:17] <nothingmuch> and my grudge about it is that so much effort is going into it, when it could be wasted on actually improving a modules *interface*

[15:21] <gaal> autrijus: well, we have to hash out lexical pragmas for that....

[15:22] <gaal> and yeah, i wasn't sure aboubt semantics; i thought everything is fail-based now except when it obviously doesn't make sense (like readline)

[15:23] <nothingmuch> gaal.ping( efilnikufesin )

[15:24] <gaal> nothingmuch.pong(what!?)

[15:25] <nothingmuch> nay nay, efilnikufesin is someone you know

[15:25] <nothingmuch> ping him

[15:25] <gaal> is he!?

[15:25] <nothingmuch> yes

[15:25] <nothingmuch> the other yuval from israel.pm

[15:25] <efilnikufesin> yup

[15:26] <gaal> efilnikufesin: i'm glad irssi has nick completion. ping.

[15:26] <efilnikufesin> heh, sorry, freenode wouldn't let me use my regular nickname

[15:26] <nothingmuch> yeah, I hasn't read past 'efi' yet myself ;-)

[15:26] <efilnikufesin> SO I had to come up with an [not so] original one

[15:27] <gaal> and hi :)

[15:27] <gaal> (i have to go for a while in about 2)

[15:27] <efilnikufesin> it's an Anthrax song, nothingmuch :)

[15:27] <nothingmuch> i dunno who anthrax are

[15:28] <gaal> nothingmuch: won't your proposal for `is sensitive` be utterly slow?

[15:28] <gaal> gotta moose. later! &

[15:28] <nothingmuch> no

[15:29] <nothingmuch> type inferrence should figure out what types could any container possibly contian

[15:29] <nothingmuch> and generate code to raise events only for containers that could contain types with events

[15:30] <SamB> nothingmuch: you seem to expect an awful lot from type inference...

[15:30] <nothingmuch> yes

[15:31] <nothingmuch> i think it's the key to allowing dynamic languages to actually at all in the context of the dynamism that perl 6 will have

[15:31] <nothingmuch> now, ofcourse, if there is a balance, you don't need to invoke it

[15:32] <nothingmuch> for example, if you know there are no events for tainting

[15:32] <nothingmuch> or no slow thingies around

[15:32] <nothingmuch> then you don't need to infer types to make sure you are not doing slow things where you don't need to

[15:36] <svnbot6> r7310 | iblech++ | * Moved the now succeeding

[15:36] <svnbot6> r7310 | iblech++ |   t/pugsbugs/{parsing_hash,attribute_list,parsing_braces_in_rules}.t out of

[15:36] <svnbot6> r7310 | iblech++ |   pugsbugs/.

[15:36] <svnbot6> r7310 | iblech++ | * Note that map-and-sort-in-for.t and grep-and-sort-in-for.t would pass too,

[15:36] <svnbot6> r7310 | iblech++ |   if "grep { 1 } @array" parsed (it did, but probably the . precedence fix

[15:36] <svnbot6> r7310 | iblech++ |   broke it).

[15:44] <rafl> Is it possible to build a pugs shared library?

[15:45] <eric256> heheh my tutorial hit a part where they use a continuation to mimick a fold ..... but i wasn't realy friends with fold to start with. ;) and the \x  + function calling with no parans or commas left me a little lost. ;)

[15:46] <eric256> gonna try an reright the example with better variable names than x t and g .lol

[15:46] <nothingmuch> rafl: autrijus is working on it (the cabalization stuff relates to that)

[15:47] <rafl> nothingmuch: Ah, fine. Will it be part of 6.10?

[15:47] <rafl> Err, 6.2.10.

[15:47] <nothingmuch> i dunno

[15:47] <rafl> Who was that guy that wanted to port parrot to VMS? dudley_ maybe?

[15:47] <dudley_> Yeah, that was me

[15:48] <dudley_> That was back when I had a much more plentiful tuit supply, though

[15:51] * eric256 finds a typo in the example...that made a bid difference ;)

[15:52] <rafl> My dict doesn't know about tuit. What's that?

[15:52] <nothingmuch> you mean a big difference

[15:52] <eric256> that too

[15:52] <nothingmuch> rafl: when you get to it

[15:52] <nothingmuch> get tuit

[15:52] <nothingmuch> or get a round tuit

[15:52] <SamB> rafl: they come in round or square

[15:52] <nothingmuch> that means you have time

[15:52] <rafl> OK, thanks.

[15:52] <SamB> a round tuit == "around to it"

[15:53] <nothingmuch> when someone says they will do something when they get around to it

[15:53] <rafl> Ah, now it actually makes sense. :-)

[15:53] <nothingmuch> you can give them one of these: http://www.myrtlewoodgallery.com/get_a_round_tuit.htm

[15:53] <rafl> OK, does the cabal stuff already work? What's the prefered way of building pugs?

[15:54] <nothingmuch> autrijus: ping

[15:55] <rafl> Woo.. compiling the prelude seems to be broken.

[15:55] <rafl>     unexpected "j"

[15:55] <rafl>     expecting expression

[15:55] <rafl>     at tmp-Prelude.pm line 245, column 19

[15:56] <nothingmuch> the prelude is preprocessed?

[15:56] <eric256> haskell q:   can i add parans around functino calls to make them clearer?

[15:56] <eric256> tried making cfold' f z (x:xs) = f x z (\y -> cfold' f y xs) into cfold' f z (x:xs) = f( x z (\y -> cfold' f y xs)) but it gets mad and spews lots of errors

[15:57] <integral> eric256: you need to use them like in Lisp (f args), not f(args)

[15:58] <eric256> ahh. thanks

[15:58] <rafl> nothingmuch: It's precompiled for performance reasons, afaik.

[15:58] <integral> you can also use $ to chain functions together as it is very low precedence: f x $ \y -> ... === f x (\y -> ...)

[15:58] <nothingmuch> i know it's compiled, and then the hs code is preprocessed

[15:58] <nothingmuch> but tmp-Prelude.pm is kind of weird

[15:58] <eric256> (\y ) is a continuatino being passed to f in this case

[16:03] * nothingmuch wonders what happenned to iblech

[16:04] <autrijus> rafl: fixing

[16:04] <rafl> autrijus: Thanks.

[16:10] * eric256 beleives he finaly understands the continuations example....first time this guy picked realy bad variable names and reused the same names in different functinos for different uses....oiu

[16:10] <nothingmuch> eric256: what example is that?

[16:11] <svnbot6> r7311 | autrijus++ | * Fix prelude parsing; the last "fix" prevented the

[16:11] <svnbot6> r7311 | autrijus++ |     map { ... } @foo

[16:11] <svnbot6> r7311 | autrijus++ |   form, which is doubleplus nongood.  rafl++

[16:14] <eric256> nopaste

[16:14] <eric256> lol. i can never remember how to wake that bot up.

[16:14] <eric256> perlbot nopaste

[16:14] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[16:15] <pasteling> "eric256" at 66.102.136.70 pasted "Continuations with Folding" (4 lines, 118B) at http://sial.org/pbot/13477

[16:15] <eric256> one part still has em confused in the fourth line it does 

[16:16] <eric256> f x (g t)   -- what is happening with the g t there? 

[16:16] <eric256> i think they are being pass to x wich is a function at that point, but i'm not certain

[16:17] * nothingmuch 's brain starts fizzing and bubbling again

[16:18] <eric256> yea i don't think its the best example for a begginers tutorial. lol

[16:18] <qwr> eric256: g is probably a function and t is applied to it

[16:19] <qwr> eric256: f x returns function and (g t) result is applied to the returned value

[16:19] * rafl want's to check in a first version of his XML::SAX port. It doesn't do anything usefull currently, but I'd like to have some help because I run into somthing that seems to be a pugs bug.

[16:19] <rafl> checking it in seems a quite easy way so everyone can take a look at the code and play around with it.

[16:20] <qwr> eric256: together it's like two arguments to f (called currying)

[16:20] <eric256> thanks qwr...your right...i'd been looking at it from the wrong angle

[16:21] <eric256> somehow i forgot all about the recursive part of the fold...that makes nearly perfect sense now....not enough to rewrite the example coherntly but enough for the momemnt

[16:21] <eric256> mement.  thanks

[16:22] <gaal> rehi

[16:25] <svnbot6> r7312 | rafl++ |  r16678@ata:  rafl | 2005-10-05 18:24:00 +0200

[16:25] <svnbot6> r7312 | rafl++ |  * Added first bits of an XML::SAX port. Doesn't do anything useful yet.

[16:25] <svnbot6> r7313 | rafl++ |  r16679@ata:  rafl | 2005-10-05 18:24:40 +0200

[16:25] <svnbot6> r7313 | rafl++ |  * Removed some accidently checked-in auto-generated files.

[16:28] <rafl> Would someone please try to execute 'XML::SAX.load_parsers.perl.say' and tell me why the generated code doesn't contain the expressions captured in line 45? And why the generated code can't be evaled again.

[16:29] <rafl> Looks like a kind of pugsbug to me.

[16:39] <autrijus> looking.

[16:39] <stevan> hey autrijus :)

[16:40] <autrijus> yo stevan :)

[16:41] <autrijus> I need some brains to think about perl5/ installation problem

[16:41] <autrijus> as currently, when you "make install" pugs, "pugs -BPerl5 ..." does not work

[16:41] <autrijus> because metamodel etc are not installed.

[16:42] <kolibrie> eric256: which haskell tutorial are you following?  /me might try if it's working for you

[16:42] <autrijus> I can see two options; one is to move them /en masse/ into pugs's perl6 sitelib

[16:42] <autrijus> under perl5/ too

[16:42] <stevan> hmm

[16:42] <stevan> do we really need to install that stuff?

[16:42] <stevan> by default I mean?

[16:42] <autrijus> another option is to install them as regular CPAN modules; either bundling, or list them as optional dependency and release them separately to cpan.

[16:42] <autrijus> stevan: that's part of the question yes.

[16:43] <autrijus> "release them separately" means they are likely to be useful without pugs.

[16:43] <autrijus> if so, we can list a Bundle::Pugs and list them

[16:43] <autrijus> and they'd follow their own schedule

[16:43] <autrijus> if not, then install them all into p6 sitelib makes sense.

[16:43] <autrijus> ideas?

[16:44] <stevan> hmmm

[16:44] <stevan> thinking

[16:44] <autrijus> cool, I'm taking a cycle to look at XML::SAX

[16:44] <kolibrie> they'll only be needed for -BPerl5 once MM2 is haskelized?

[16:44] <stevan> when do you plan to release?

[16:44] <autrijus> stevan: in 48 hrs

[16:44] <nothingmuch> autrijus: i need advice

[16:44] <stevan> I think the shorter route is best then

[16:44] <autrijus> kolibrie: "they" means -BJS and -BPerl5

[16:44] <nothingmuch> i'm pondering implementing type::operator::typeclass

[16:44] <stevan> putting into lib/

[16:45] <autrijus> kolibrie: has nothing much to do with MM2/Haskell runcore

[16:45] <nothingmuch> and type::operator::oo

[16:45] <autrijus> nothingmuch: in p5 for blondie?

[16:45] <nothingmuch> in the milner script right now

[16:45] <autrijus> stevan: which lib? lib6?

[16:45] <nothingmuch> to be backported to plondie

[16:45] <nothingmuch> blondie

[16:45] <nothingmuch> typeclass is kind of trivial

[16:45] <autrijus> nothingmuch: okay. advice?

[16:45] <stevan> autrijus: whichever one is easier

[16:45] <kolibrie> autrijus: I thought "they" were the perl5 metamodel modules

[16:45] <nothingmuch> but how would OO be compiled to a lambda calculous?

[16:45] <nothingmuch> without losing information?

[16:46] <autrijus> kolibrie: that, and PIL2JS, and PIL-Run, and Perl6-*

[16:46] <nothingmuch> i guess i need to look at CLOS

[16:46] <stevan> I know I wont have enough tuits over the next 48 to put the MM up on CPAN seperately

[16:46] <autrijus> nothingmuch: you use recursive polymorphic record types.

[16:46] <nothingmuch> that sounds scary

[16:46] <autrijus> nothingmuch: see OCaml, or better TaPL, about featherweight java :)

[16:46] <nothingmuch> tapl hasn't arrived yet =(

[16:46] <nothingmuch> i wish it will

[16:46] <nothingmuch> this stuff would be *so* much easier

[16:47] <nothingmuch> essentially we have two record types

[16:47] <nothingmuch> for every two record types

[16:47] <nothingmuch> we have another type that is the set of keys which both share?

[16:47] <nothingmuch> that is their supertype?

[16:47] <autrijus> stevan: okay. in that case I'll install everything into perl6's sitelib as perl5/

[16:47] <autrijus> stevan: and we can figure out proper partition laterz

[16:48] <stevan> yes

[16:48] <stevan> I will need to chat with putter and fglock

[16:48] <autrijus> nothingmuch: usually OO needs subtyping.

[16:48] <kolibrie> (less work)++

[16:48] <stevan> re: p5 stuff

[16:48] <autrijus> nothingmuch: the could be nominal subtyping, where each type remembers its parents

[16:48] <autrijus> nothingmuch: or structural subtyping, where any record type can subtype another simply by containing the same fields.

[16:49] <autrijus> nothingmuch: perl6 is definitely nominal.

[16:49] <stevan> nothingmuch: OO in pure lambda calculus ,.. hmmm ;P

[16:49] <autrijus> nothingmuch: see O'Haskell page for further enlightenment

[16:49] <eric256> kolibrie - http://www.isi.edu/~hdaume/htut/ is the tutorial i'm following. working well for me

[16:49] <autrijus> (and my GHC hackery would help to bring them into reality)

[16:49] <nothingmuch> isn't theory.pod all about saying that perl 6 is nominal typing appearance in structural typing semantics?

[16:49] <autrijus> nothingmuch: http://www.cs.chalmers.se/~nordland/ohaskell/survey.html

[16:50] <autrijus> nothingmuch: yes.

[16:50] <autrijus> nothingmuch: it layers a structural (duck) foo on top of nominal (type) bar.

[16:51] <nothingmuch> duck?

[16:51] <autrijus> "if it can do such and such things it's naturally of this type"

[16:51] <autrijus> without predeclaration

[16:51] <kolibrie> eric256: thanks

[16:52] <nothingmuch> ah

[16:52] * nothingmuch will try to do typeclasses

[16:52] <nothingmuch> and then record types

[16:52] <nothingmuch> with simple nominal inheritence

[16:53] <nothingmuch> and then try to reimplement that with structural semantics

[16:53] * stevan has to $work &

[16:53] <nothingmuch> and then try to make it support OO better

[16:53] <nothingmuch> and then try to translate it all to theories

[16:53] <nothingmuch> luckily it's the holiday season

[16:53] <xinming_Beijing> autrijus: hmm, did you edit the overview please? hmm, I checked out the latest revision just now, and found overview has been updated. So, May I know where the modification is... So, I can update these information.

[16:53] <nothingmuch> i should have lots of vacation time in the next month

[16:53] <autrijus> xinming_Beijing: one single update, line 169:

[16:53] <autrijus>   <li>6.2831: 型别系统（type system）与链接（linking）。</li>

[16:54] <nothingmuch> anyway, dinnertime

[16:54] <nothingmuch> then I have to finish the rule translation

[16:54] <autrijus> xinming_Beijing: following the CUFP presentation, I've refined the 6.2831 milestone from the vague "random runtime features like role composition" into the more specific "type system and linking".

[16:54] <autrijus> nothingmuch: cool, much thanks

[16:55] <nothingmuch> autrijus: is the plan sensical? or am i missing too much knowlege?

[16:55] <xinming_Beijing> autrijus: hmm, the word "type" in Simplified Chinese, It's normally called "类型" or "型号", I will update it soon. :-)

[16:55] <autrijus> nothingmuch: it's sensical and I think you'll enjoy figuring out things

[16:55] <autrijus> xinming_Beijing: please do update it :)

[16:55] <autrijus> xinming_Beijing++

[16:55] <nothingmuch> alrighty

[16:56] <nothingmuch> luqui - i need $grammer->ammend('foo: ...') to add attribute defs to grammars

[16:56] <nothingmuch> i don't need it, but it would be nice

[16:56] * nothingmuch hates ACM more every time he reads the words "controlled feature"

[16:56] <autrijus> er, "amend"

[16:56] <nothingmuch> spelling was never my forte

[16:56] <nothingmuch> never will be

[16:56] <autrijus> xinming_Beijing: also, is "macros" "宏集"? I thought it's "宏"

[16:57] <autrijus> the milestone after that

[16:57] <nothingmuch> autrijus: yesterday or before you mentione "From ML Type Inference to Stratified Type Inference"

[16:57] <autrijus> nothingmuch: yes, two-phase inference.

[16:57] <nothingmuch> i can't find anywhere except acm

[16:57] <autrijus> nothingmuch: can't be.

[16:57] <nothingmuch> perhaps it's a slightly diff title?

[16:58] <nothingmuch> http://www.google.com/search?num=30&hl=en&lr=&safe=off&client=safari&rls=en&q=%22From+ML+Type+Inference+to+Stratified+Type+Inference%22&btnG=Search

[16:58] <autrijus> http://cristal.inria.fr/~fpottier/publis/pottier-regis-gianas-05.pdf

[16:58] <xinming_Beijing> autrijus: normally 宏

[16:58] <nothingmuch> grazie

[16:58] <xinming_Beijing> autrijus: If we use macros set, then 集 must be used.

[16:59] <autrijus> k

[17:02] <autrijus> but it's not a set

[17:02] <autrijus> it's just macros

[17:02] <xinming_Beijing> autrijus: hmm, But I will update it also, In fact, I can understand what macro mean. And 巨集 is also used from some old-days books, hmm, IIRC The earlier book also 软体. But now, all books use 软件

[17:02] <autrijus> so please fix as desired

[17:03] <autrijus> yeah. those are zh-tw words :)

[17:03] <xinming_Beijing> autrijus: then, It must be 宏

[17:03] <autrijus> cool

[17:03] <xinming_Beijing> I did a fix to it

[17:11] <svnbot6> r7314 | yiyihu++ | * Correct a translation for the word "macro"

[17:11] <svnbot6> r7314 | yiyihu++ | * Update the overview according to the modification.

[17:11] <rafl> autrijus: Found something out about that strange XML-SAX behaviour?

[17:18] <geoffb> nothingmuch, what does ACM mean by "controlled feature"?

[17:18] <geoffb> autrijus, did you get a chance to look over/correct my STATUS update from last night?

[17:19] <nothingmuch> geoffb: that i need to pay to read the article

[17:19] <geoffb> oh.  ewww.

[17:19] <geoffb> Hmmm.  How much does ACM membership cost?  Don't members get free access?

[17:19] <autrijus> rafl: I see Features 

[17:19] <autrijus> ('Features' => {.})

[17:19] <geoffb> (Not that I at all disagree that paying for basic CS knowledge is very, very sad . . . .)

[17:20] <autrijus> rafl: \Class.new(('known_parsers' => [{('Features' => {.}), ('Name' => MkMatch {matchOk = True, matchFrom = 1, matchTo = 19, matchStr = "XML::SAX::PurePerl", matchSubPos = [], matchSubNamed = {}})}, {('Features' => {.}), ('Name' => MkMatch {matchOk = True, matchFrom = 1, matchTo = 16, matchStr = "XML::SAX::Expat", matchSubPos = [], matchSubNamed = {}})}, {('Features' => {.}), ('Name' => MkMatch {matchOk = True, matchFrom = 1, matchTo = 25, matchStr = "

[17:20] <joao> nothingmuch, do you need ACM articles?

[17:20] <joao> ;)

[17:20] <nothingmuch> joao: not right now

[17:20] <PerlJam> geoffb: It used to be about $25/year for students and $100/year for non-students for ACM membership.  I don't know what it is these days.

[17:20] <rafl> autrijus: Yes, but Features should have a hash as its value.

[17:20] <nothingmuch> autrijus found something for me

[17:20] <joao> nothingmuch, if you need, I can try to get it...

[17:21] <nothingmuch> okay

[17:21] <nothingmuch> legally?

[17:21] <joao> Yes

[17:21] <joao> I have full access to the ACM portal

[17:21] <rafl> autrijus: Not something that is a syntax error when serialized using .perl.

[17:21] <geoffb> PerlJam, ah.  Not as bad as I expected

[17:21] <nothingmuch> so wait, they charge for the storage and retrieval? they don't have the copyright on the actual articles?

[17:21] <autrijus> geoffb: I did and it looks good. I think I need to transclude the "toward 6.28.0" plan from my journal to there

[17:21] <autrijus> geoffb: help welcome, or I can do it myself

[17:21] <joao> nothingmuch, but some articles that are listed there can't be downloaded

[17:21] <autrijus> rafl: oh, you think it's a .perl bug?

[17:22] <geoffb> autrijus, if it's just C&P, go for it.  If you have to think, I can take a look in a bit.

[17:22] <joao> nothingmuch, the have copyrights, I suppose

[17:22] <joao> nothingmuch, but they provide pdf's and html version of their papers

[17:22] <joao> to members

[17:22] <nothingmuch> anyway, i'll remember to bug you when i hit a wall the next time

[17:23] <joao> sure

[17:23] <PerlJam> geoffb: Ah, according to their website, it's $99/year for "professionals" and $198/year for professional membership plus ACM Digital library.

[17:23] <PerlJam> (and other stuff)

[17:23] <joao> If you need from other scientific resources I can try to get it too :)

[17:23] <joao> elsevier, ..

[17:23] <autrijus> geoffb: I have to think about the org, but I want your column more :)

[17:23] <joao> PerlJam, yes, but for students is cheaper

[17:24] <PerlJam> joao: yeah,  they have all sorts of different plans for students.  The cheapest appears to be about $20/year.

[17:24] <geoffb> PerlJam, so ~$200 to be able to read the articles.  Annoying but not horrible for a CS pro in the US, but pretty brutal for non-pros / non-US types

[17:24] <PerlJam> looks like $42/year for membership + digital library (for students)

[17:24] <geoffb> autrijus, OK, then article comes first.  Hope it lives up to the hype -- I've got sick head today.

[17:25] * geoffb rants uselessly about how much sinus infections suck

[17:25] <PerlJam> and $62/year if you want the subscription to Communications of the ACM

[17:25] <PerlJam> (as a student)

[17:25] <joao> yes

[17:25] <joao> that's it (I guess)

[17:25] * PerlJam hasn't been an active member of the ACM in almost 10 years.

[17:26] <rafl> autrijus: Yes. @config[-1]{"Features} seems to have the right content.

[17:35] <wolverian> PerlJam, our university provides access to the ACM digital library, which is nice

[17:35] <xinming_Beijing> hmm, what's the differences between `{}' and `do { }' are please?

[17:35] <PerlJam> wolverian: cool

[17:35] <PerlJam> xinming_Beijing: "do "

[17:36] <xinming_Beijing> closure seems to be a do command.

[17:37] <xinming_Beijing> does `do' here mean do immediately. and closure will "do" while you are calling it?

[17:37] *** noone2 is now known as mikemonster

[17:38] <joao> {} is not haskell valid syntax, is it? :)

[17:38] <autrijus> xinming_Beijing: do{} is an expression that evaluates the block; {} is just a block.

[17:39] <eric256> joao i think he meant in pugs

[17:39] <PerlJam> xinming_Beijing: {} makes a closure in some contexts,  do{} just executes the code in {}

[17:39] <joao> oh :)

[17:39] <joao> stupid me

[17:39] <nothingmuch> sub do (&code) { code() }

[17:40] <wolverian> xinming_Beijing, in void context closures are automatically run - I think they're equivalent to 'do { }' there

[17:40] <autrijus> rafl: got it. fixink

[17:40] <wolverian> I also seem to remember that they're run in 'sub foo { bar; { ... } }' automatically, which is somewhat bizarre

[17:41] <autrijus> wolverian: but if you want to return {}, you can write return {}.

[17:41] <wolverian> autrijus, right, but it makes no sense to me.

[17:41] <wolverian> I recall someone explained the logic to me last time, sorry if I'm bothersome :)

[17:42] <PerlJam> Perl6 just looks for a leading pair to distinguish {}-hash c'tor from {}-closure c'tor, right?

[17:42] <autrijus> rafl: "our" does not work yet, that's why.

[17:43] <autrijus> rafl: or maybe not, hm. still thinking

[17:56] <autrijus> rafl: turns out may be due to depth...

[17:56] <autrijus> the "." was abbreviated "..."

[17:56] <autrijus> I increased the depth. recompiling

[17:57] <autrijus> yup. increased so it dumps until level 1024.

[17:58] <autrijus> rafl: fixed. thanks!

[18:00] <gaal> yo. t/builtins/arrays_and_hashes/pairs.t:73 parsefails. should it?

[18:00] <gaal> $hash_of_1_pair.pairs.sort.map:{ .key~'='~.value }.join( ',' )

[18:03] <autrijus> aw, must be due to the new blockdot bug

[18:03] <svnbot6> r7315 | autrijus++ | * Increase .perl's recursion level so it won't turn into "..."

[18:03] <svnbot6> r7315 | autrijus++ |   until level 1024 -- in contrast to 10 before.

[18:03] <svnbot6> r7315 | autrijus++ | * Also, when it does reach there, output "{...}" instead of "{.}".

[18:03] <autrijus> I posted p6l for clarif

[18:03] <autrijus> s/bug/fix/

[18:04] <autrijus> s/fix/bug/

[18:04] <autrijus> anyway, I'm fixing the bug. or bugging the fix.

[18:04] <gaal> big flop operator, or flip bug

[18:04] <xinming_Beijing> hmm, In fact, after `$var ?? true :: false' 's changed into !!, I wonder if !! will be the specification, As Larry said to use it for a week. :-)

[18:09] <svnbot6> r7316 | gaal++ | getc, like readline, needs guardIOexcept [(isEOFError, undef)]

[18:15] <autrijus> gaal: you saw my comment re mkdir?

[18:15] <autrijus> btw, parser fix bugged, committing after test

[18:16] <gaal> autrijus, yes, sounds like a reason to push lexical pragmas in :)

[18:17] <nothingmuch> hmm

[18:17] <gaal> i don't mind reverting to undef in this release of course, if we won't make it

[18:18] <autrijus> I don't mind it being fatal either.

[18:18] <autrijus> anyway, the parsing fix is in.

[18:21] <svnbot6> r7317 | autrijus++ | * gaal reported the block parsing fix is still buggy, so now

[18:21] <svnbot6> r7317 | autrijus++ |   I made sure that adverbial blocks parse differently from

[18:21] <svnbot6> r7317 | autrijus++ |   nonadverbial ones:

[18:21] <svnbot6> r7317 | autrijus++ |     pugs> :d f{x}.z

[18:21] <svnbot6> r7317 | autrijus++ |     App &f (: App &z (Syn "sub" {sub {...}}: ))

[18:21] <svnbot6> r7317 | autrijus++ |     pugs> :d f:{x}.z

[18:21] <svnbot6> r7317 | autrijus++ |     App &z (App &f (: Syn "sub" {sub {...}}): )

[18:21] <nothingmuch> can anyone help with finding out what PGE emits for e.g. p6rule_like('abcdef', 'bcd', qr/0: <bcd @ 1>/, '$0 capture'); ?

[18:22] <nothingmuch> #parrot people are not responding

[18:22] <autrijus> ok, I'll shift to perl5 installation

[18:22] <autrijus> then back to cabalization

[18:22] <autrijus> nothingmuch: ...particle is handling it now

[18:22] <gaal> i gotta run for a bit... later! &

[18:23] <dduncan> goodbye and hello

[18:23] <dduncan> I understand that today's focus is getting the tests to work, for a 6.2.10 release, later today or so?

[18:25] <autrijus> dduncan: yes!

[18:25] <autrijus> dduncan: changelog too

[18:26] <dduncan> I hear you

[18:26] <svnbot6> r7318 | nothingmuch++ | Some [slightly broken] progress in milner.pl

[18:26] <svnbot6> r7319 | gaal++ | some TODOifications

[18:28] <joao> nothingmuch, which articles are you reading to make the implementation?

[18:29] <nothingmuch> joao: so far only the one mentioned in the comments

[18:29] <joao> let me see :)

[18:29] <nothingmuch> Basic Polymorphic Typechecking

[18:29] <nothingmuch> it was very nice

[18:31] <joao> thanks

[18:32] <svnbot6> r7320 | nothingmuch++ | Oh shit! The reason the test failed was that the wrong variable name was used (list_plus_ten or plus_ten)

[19:03] <svnbot6> r7321 | iblech++ | * Usual svn props.

[19:03] <svnbot6> r7321 | iblech++ | * Moved t/pugsbugs/{map-and-sort-in-for,grep-and-sort-in-for}.t out of

[19:03] <svnbot6> r7321 | iblech++ |   pugsbugs/, as grep { 1 } @array works again, autrijus++

[19:03] <svnbot6> r7321 | iblech++ | * t/statements/do.t: Should "do 42" work?

[19:03] <svnbot6> r7321 | iblech++ | * t/pugsbugs/{cast_undef_shortcircuit,parsing_if,attribute_of_return_value}.t:

[19:03] <svnbot6> r7321 | iblech++ | * unEVAL.

[19:03] <autrijus> iblech: blib6/lib/perl5/* .

[19:05] * autrijus also needs to list optional deps

[19:06] <obra> Somehow, I saw "optional sleep"

[19:07] <autrijus> I think you need mandatory sleep.

[19:07] <autrijus> :)

[19:07] <obra> :)

[19:09] <svnbot6> r7322 | autrijus++ | * copy perl5/ into blib6/lib/perl5/ for installation.

[19:19] * eric256 needs extended sleep ;)

[19:23] <dduncan> quick question: does the current pugs support an equivalent to Perl 5's concept of labels, such as one can use with a 'next' or 'last' or etc?

[19:23] <autrijus> eric256: you can get an extra-large dose of sleep :)

[19:23] <dduncan> attempting to use them like in perl 5 was a compile error; commenting them out made compile work

[19:23] <autrijus> dduncan: no, it's planned along with gaal's pragma work.

[19:24] <dduncan> so I'll commit with them commented out, then

[19:24] <autrijus> may or may not make the release; if not, then after the release

[19:24] <nothingmuch> GRR

[19:24] * nothingmuch is leaking closures somewhere

[19:24] <autrijus> nothingmuch: mm?

[19:24] <autrijus> p5 closures?

[19:24] <autrijus> you can trivially leak them ;)

[19:24] <nothingmuch> no, it's more than that

[19:25] <pasteling> "nothingmuch" at 82.81.247.180 pasted "the bad code" (16 lines, 358B) at http://sial.org/pbot/13483

[19:26] <eric256> haskell feels alot like pascal sometimes....keyword/module/pacakge wise. at least from what i remember of evil pascal

[19:26] <nothingmuch> for some reason $against gets 'abc' twice when it should be getting 'abc' and then 0

[19:26] * nothingmuch slaps eric256 

[19:26] <nothingmuch> don't you dare speak about haskell that way

[19:26] <eric256> lol

[19:26] * nothingmuch taught pascal recently

[19:27] <nothingmuch> it sucks so bad i'd prefer to be a wartime prostitute than a pascal programmar

[19:27] <eric256> LOL

[19:27] <eric256> and they insist on teaching it in school

[19:27] * autrijus mumbles something about fortran.

[19:28] <nothingmuch> haven't done that

[19:28] <autrijus> good, because you'd rather be a wartime soldier than a fortran programmer

[19:28] * dudley_ mumbles something about DEC BASIC

[19:29] <geoffb> .oO( VAX Assembly -- I got the last year of it, before my university switched to teaching MIPS )

[19:29] <xinming_Beijing> autrijus: hmm, How can we get the current time string using localtime please?

[19:29] <xinming_Beijing> `localtime time` doesn't work. :'(

[19:29] <autrijus> in p5?

[19:29] <xinming_Beijing> no pugs

[19:29] <xinming_Beijing> in pugs

[19:29] <nothingmuch> OMG!!!!!!!!!! I AM SUCH AN IDIOT

[19:29] * nothingmuch was programming bash in perl

[19:30] <nothingmuch> used $1 instead of $_[0]

[19:30] <nothingmuch> which was already shifted into $str anyway

[19:30] <autrijus> xinming_Beijing: or no, I'm not sure. look at src/perl6/Prelude.pm

[19:30] <autrijus> there's no stringification method there

[19:33] <svnbot6> r7323 | Darren_Duncan++ | /ext/Locale-KeyedText : corrected 2 files so that everything compiles; in KeyedText.pm, commented out any labels used with next/last (todo, uncomment when labels implemented); in t_LKT_Util.pm, corrected an actual syntax error

[19:34] <nothingmuch> woot!

[19:34] <nothingmuch> first ~150 tests programmatically ported to parrot

[19:34] <nothingmuch> no Test::Base yet

[19:34] <nothingmuch> but it's easy to split that up

[19:35] <xinming_Beijing> I will get {obj:Time::Local} for the function localtime, Is that the right behavior?

[19:35] <autrijus> xinming_Beijing: yes, but it really needs a good stringification method

[19:36] *** brentdax__ is now known as brentdax

[19:37] <xinming_Beijing> autrijus: hmm, so, IMHO, `localtime time` should return the current time "string"

[19:37] <autrijus> xinming_Beijing: under string context, yes.

[19:37] <xinming_Beijing> hmm, I don't mean the string itself, But just what pugs should print.

[19:37] <autrijus> yes.

[19:37] <autrijus> I totally agree.

[19:37] <autrijus> write a TODO test for it please.

[19:38] <autrijus> something that compares "{localtime}" against '{obj:Time::Local}' and see they don't match.

[19:38] <autrijus> :todo<feature>

[19:38] <nothingmuch> p6rule_is("xyz", '\By\B', 're_tests 138  (#168)');

[19:38] <nothingmuch> err, wrong channel

[19:39] <PerlJam> hey, today is wednesday isn't it?

[19:39] <autrijus> yes.

[19:40] <eric256> some places it is ;)

[19:40] <PerlJam> perl6cabal have their phone conferences on wednesdays.  autrijus, you should join in  :)

[19:40] <autrijus> PerlJam: should I. I'm not in the cabal, you know :)

[19:40] <PerlJam> autrijus: no, but you might as well be.  :)

[19:40] <autrijus> I was invited in the sketch

[19:41] <autrijus> but it's semipublic -- #parrotsketch on irc.perl.org -- transcripts are published, and all is welcome to observe

[19:41] <autrijus> (as in, +m)

[19:41] <eric256> sketch? cabal?

[19:41] <autrijus> but not the phone conference or the cabal list.

[19:42] <autrijus> eric256: I guess these should be in the FAQ...

[19:42] <eric256> hehe. 

[19:42] <autrijus> eric256: re sketch, see http://use.perl.org/~jesse/journal/26995

[19:42] <autrijus> re cabal, it's the sixperl list of perl six design team

[19:43] <autrijus> with weekly conference calls summarized by luqui

[19:43] <autrijus> # http://use.perl.org/~luqui/journal/

[19:43] <obra> all of this is syndicated to planetsix.perlfoundation.org

[19:43] <autrijus> right, which is the One True Portal to all your perl6 news!

[19:44] <obra> woot!

[19:44] <autrijus> (suggest new feeds as appropriate to obra.)

[19:44] <obra> thank god. perl6 has one true SOMETHING

[19:44] <eric256> i didn't even know that part. (about the one true portal, well actualy most of that)

[19:44] <autrijus> obra: ;)

[19:44] <autrijus> it also has one true operator.

[19:44] <autrijus> ?eval true 'ring'

[19:44] <evalbot_7312> bool::true 

[19:44] <autrijus> see?

[19:44] <obra> what? the hotsprings operator?

[19:44] <autrijus> it rings true

[19:44] * obra groans

[19:44] <autrijus> bad-joke-r-us

[19:47] <autrijus> eric256: anyway, the cabal's existence was not well publicized until this year

[19:47] <autrijus> eric256: but its members can be tracked at http://dev.perl.org/perl6/people.html

[19:47] <autrijus> which for some reason is missing obra and pmichaud.

[19:48] * eric256 feels as if he suddenly realized the world is run by secret clubs

[19:48] <autrijus> eric256: it's time for you to get illuminated

[19:49] <autrijus> you can begin by reciting "Hail Eris".

[19:50] <autrijus> eric256: anyway, so when you see @Larry, that is synonymous to cabal.

[19:51] <eric256> your such a wealth of information, if your not carefully they might have you wacked for spreading there secrets ;)

[19:51] <autrijus> that is why I am actually a committee

[19:51] <autrijus> you can't squash us all!

[19:52] * autrijus feeds eric256's paranoia some more

[19:53] <eric256> lol

[19:54] * eric256 suddenly has the image of a thousand tiny men inside of a Humanoid robot. ;)

[19:54] <wolverian> autrijus, except when cabal is the haskell release tool..

[19:54] <autrijus> we are actually a thousand humanoid robot inside a person

[19:54] <wolverian> (haskell, for discriminating oppressors?)

[19:55] <autrijus> we have a dream: one day children of silicon can join hands with children of carbon, and one will be judged by one's .chars instead of one's .elems...

[19:56] <wolverian> heh, I immediately thought "perl vs lisp"

[19:57] <dduncan> I've discovered an issue with the current pugs, which may be known, where testing a method argument for definedness returns true even when the arg is explicitly passed undef

[19:57] <autrijus> dduncan: write a test?

[19:58] <dduncan> I'm trying to recreate it outside of my module

[20:01] <nothingmuch> damnit

[20:02] <nothingmuch> there is some lossy data

[20:02] <autrijus> ok, perl5 installation done.

[20:02] <autrijus> whew.

[20:03] <Qiang> hi , autrijus. back to tw ? 

[20:03] <joao> obra, why obra?

[20:04] <autrijus> Qiang: no, in eu

[20:04] <svnbot6> r7324 | nothingmuch++ | partial conversion - currently non-refactored

[20:04] <svnbot6> r7325 | autrijus++ | * For perl5 helpers like -BPerl5 and -BJS, adjust the search path

[20:04] <svnbot6> r7325 | autrijus++ |   for the "perl5" library in the order of:

[20:04] <svnbot6> r7325 | autrijus++ |     '.', '../..', $installsitelib, $sourcedir

[20:04] <svnbot6> r7325 | autrijus++ |   that is mainly to facilitate debugging during development. 

[20:04] <Qiang> can never figure out where you are. hehe 

[20:05] <Qiang> finland ? 

[20:05] <obra> joao: totally random two syallable word. no relation to any real word

[20:05] <joao> obra, ok, it's a portuguese word :)

[20:05] <obra> Yep. I was at yapc.eu this year. I saw ;)

[20:05] <obra> Also spanish

[20:06] <joao> yaps, do you know what it means?

[20:06] <joao> I was at yapc.eu too :-)

[20:06] <autrijus> hm, what's wrong with ext/Getopt-Long/t ? maybe it should be moved as t_disabled as there is no code.

[20:06] <autrijus> I'll do exactly that

[20:06] <autrijus> Qiang: correct.

[20:07] <autrijus> Qiang: going to stockholm, then amsterdam, then stockholm

[20:07] * eric256 has a hard enough time affording staying in one place ;)

[20:07] <joao> autrijus, how much is a plain  ticket from "europe" to taipei?

[20:07] <Qiang> nice. hope you have a good time besides pugs :) 

[20:07] <autrijus> Qiang: in fact, yes, but pugs is the foreground :)

[20:07] <autrijus> going to places is, as you know, akin to changing desktop wallpapers to me.

[20:08] <autrijus> joao: usd$1k, if booked in advance.

[20:08] <joao> not cheap :)

[20:09] <Qiang> hhe. nice comparesion

[20:09] <autrijus> far from it.

[20:09] <autrijus> I mean, far from cheap.

[20:09] <svnbot6> r7326 | nothingmuch++ | nested groups in rules.t converter

[20:11] <Qiang> that's the advantage of not having to work full-time. but still how you can do the conference thing beyong my believe.

[20:12] <autrijus> that's the advantage of minimizing the Real World window :)

[20:12] <autrijus> the disadvantage is, of course, that you miss the ultra high resolution "physics" engine.

[20:12] <Qiang> you can always do that later  :)

[20:12] <Qiang> so when are you back to tw ?

[20:13] <autrijus> not sure there will be a reality around in a few decades, but one can hope.

[20:13] <autrijus> Qiang: in november

[20:13] <Qiang> err . :D 

[20:13] <autrijus> Qiang: I'll stay thru the lunar new year, then start wandering around europe indefinitely

[20:14] <Qiang> i haven't spend chinese new year for at least 5 years.

[20:14] <Qiang> europe will be too small for ya. 

[20:14] <svnbot6> r7327 | autrijus++ | * disable Getopt::Long tests because there is no code yet.

[20:15] <autrijus> Qiang: aye... so maybe also canada

[20:15] <dduncan> nevermind what I said before ... issue seems to be elsewhere

[20:15] <Qiang> if don't mind the winter here  :)

[20:16] <Qiang> but try vancouver anytime.

[20:16] <autrijus> can't be worse than scandanivia.

[20:16] <eric256> autrijus did you win the lottery or something? or just realy good at saving and living on nothing?

[20:16] <autrijus> eric256: the latter.

[20:16] <Qiang> autrijus: that's true. 

[20:16] <eric256> i'm assuming no wife and children? if it weren';t for them i'd be rich ;)

[20:17] <autrijus> eric256: and I don't start saving until my bank account hits $0 (minus this month's living expense)

[20:17] <Qiang> eric256, lol

[20:17] <autrijus> eric256: aye... vasectomy has its benefits, you know

[20:17] <eric256> i look back at before marriage and i'm just amazed at how cheap one man can live. ;)

[20:17] <Juerd> Does anyone use their @feather.perl6.nl e-mail address?

[20:18] <Juerd> It was a much requested feature, but I don't see any evidence of anyone actually using it :)

[20:18] <autrijus> Juerd: I do not

[20:18] <autrijus> if you start accepting delivery to @no.perlcabal.org  or @perlcabal.org (both pointed to the same machine) maybe it would become popular ;)

[20:19] <autrijus> (or not.)

[20:19] <Juerd> autrijus: I noticed by the amount of spam in your inbox :)

[20:19] <autrijus> lol.

[20:19] <Juerd> Oh, I can make it accept delivery on those domains if you want

[20:19] <autrijus> don't bother really :)

[20:19] <Juerd> Okay

[20:19] *** brentdax__ is now known as brentdax

[20:19] <Juerd> Hi Brent

[20:20] <brentdax> Hey.

[20:20] <Juerd> I'm off

[20:20] <Juerd> Should anyone wish to comment on feather's email system, please just do so

[20:21] <nothingmuch> eep!

[20:21] <Qiang> autrijus, your $work involve catalyst too ? 

[20:21] <vladtz> 7323 hangs in t/builtins/io/dir.t memory use is up to 400M and climbing...(Linux build)

[20:21] <autrijus> Qiang: a bit, yes

[20:21] <Qiang> er. xinming in beijing ? 

[20:21] <autrijus> vladtz: confirmed.

[20:21] <autrijus> fixing

[20:21] <Qiang> what's your view on it?  stable / good enough ? 

[20:22] <autrijus> Qiang: it's good enough, definitely.

[20:22] <autrijus> I'd not call it 'stable'.

[20:22] <nothingmuch> what nagative zero width subpattern assertions cannot be variadic in perl 5?

[20:22] <autrijus> "actively maintained and developed".

[20:22] <autrijus> nothingmuch: because perl5 is not PCRE.

[20:22] <nothingmuch> no, not why

[20:22] <nothingmuch> which

[20:22] <nothingmuch> all of them

[20:22] <nothingmuch> ?

[20:22] <autrijus> all of them

[20:22] <nothingmuch> =(

[20:22] <autrijus> er wait

[20:22] <autrijus> just behind

[20:22] <nothingmuch> okay

[20:23] <autrijus> ahead is fine

[20:23] <autrijus> you can fake variadic behind using multiple behinds

[20:23] <nothingmuch> no need

[20:24] <Qiang> i see. we have few people from perlchina have interest to learn and to introduce catalyst to others. 

[20:28] <autrijus> Qiang: cool. I do wonder how soon will there be a catalyst book

[20:29] <autrijus> it seems adequate during this autumn renaissance of perl books

[20:30] <Qiang> chunzi (a member) done some catalyst work (wrote member.perlchina.org)  and it looks promising. 

[20:31] <Qiang> look at how RoR taken off, perl's framework for webapp need a boost too. 

[20:31] <autrijus> I wonder how RoR had taken off really.

[20:31] <autrijus> it's mostly given the other languages a good shake of reality

[20:31] <autrijus> and make MVC cool again.

[20:32] <Qiang> well. least generated lots buzz. perl has been quite comparing to python/ruby  

[20:32] <autrijus> right. buzz.

[20:32] * autrijus ponders an everybody-blog-about-pugs campaign

[20:32] * autrijus decides it's a bad idea instantly

[20:33] * eric256 is confused by ovids email to the list. starts with a "roles shouldn't provide trust" and ends with "thats why i think roles shoudl be allowed to specify trust".......besides the fact that i have no idea how roles actualy help in his example

[20:33] <autrijus> vladtz: fixed. committing...

[20:34] <Qiang> heh. it should be done base on the real work.  it will attract people if it's good. 

[20:34] <Qiang> if it is good, then some PR doesn't hurt :) 

[20:34] <autrijus> right. appropriate PR for appropriate stages.

[20:35] * autrijus mumbles something about Dylan and PR deficiency.

[20:35] <obra> funny. I have friends who were big dylan snobs in the 90s

[20:35] <Qiang> hhe. if i didn't read your journal, i would have no idea about dylan (tho i still do , :)

[20:37] <autrijus> dylan is really pretty good. I shall spend more time playing with it.

[20:37] <svnbot6> r7328 | nothingmuch++ | better version of converter

[20:43] <svnbot6> r7329 | Darren_Duncan++ | some ChangeLog updates

[20:46] <dduncan> eric256, I think I understand what ovid wants, that a role can declare with 'trusts' that only certain other classes are allowed to call its private methods, just as a class can do the same with 'trusts'

[20:46] <dduncan> I think I want the same thing too

[20:47] <dduncan> where Perl itself enforces these things, and the called method doesn't have to use 'caller' etc to test who called it

[20:48] <dduncan> fyi, I was going to use a caller-based trick in the perl 5 versions of my classes to simulate the perl 5 private methods, ensuring no one but those classes I approve can call them

[20:48] <dduncan> I mean, simulate perl 6 private methods

[20:55] <svnbot6> r7330 | autrijus++ | * gaal accidentally broke readdir by deleting one random line.

[20:55] <svnbot6> r7330 | autrijus++ |   vladtz caught it right away.

[20:56] <wolverian> autrijus, I've heard dylan is "just a crippled lisp without s-expressions". then again, what language does that not match...

[20:56] <autrijus> wolverian: forth does not match.

[20:56] <autrijus> but indeed

[20:56] <nothingmuch> laundry time

[21:01] <nothingmuch> bicycle time

[21:05] * autrijus starts journaling

[21:05] <geoffb> Blog up: http://www.oreillynet.com/pub/wlg/7996

[21:06] <geoffb> *whew*

[21:06] <autrijus> woot!

[21:06] <geoffb> Time for some backlogging, and then $work

[21:06] <autrijus> I've been advertising for you all day

[21:06] <geoffb> heh

[21:06] <geoffb> I hope it meets expectations, then!

[21:06] <nothingmuch> http://nothingmuch.woobling.org/p.t

[21:06] <nothingmuch> intermediate parrot test stuff

[21:06] <rafl> autrijus: Thank you!

[21:06] <nothingmuch> if someone has debugging tips, that could help

[21:07] <nothingmuch> i'm off anyway

[21:10] <autrijus> geoffb: I feel... a bit embarrased I guess, but very grateful for the writeup.

[21:10] <autrijus> it's excellent.

[21:11] <geoffb> thanks

[21:11] <autrijus> geoffb++

[21:11] <geoffb> I had a choice to make you anonymous or not, I decided that people just plain like celebrities.  :-)

[21:11] <geoffb> thanks for the kind words

[21:11] <leo__> geoffb++

[21:11] <autrijus> geoffb: hence, the embarrasment

[21:11] <geoffb> and again.  :-)

[21:12] <autrijus> but I will celebrate your writeup in my euro oscon talks and shamelessly use them in the takahashi slides :)

[21:12] <geoffb> heh

[21:13] <leo__> $ ./parrot -Ofun examples/pasm/fact.pasm

[21:13] <leo__> # works

[21:13] <autrijus> excellent

[21:15] <autrijus> even better, it's strictly equivalent to

[21:15] <autrijus> $ ./parrot examples/pasm/fact.pasm

[21:15] <autrijus> hence proving parrot has its sense of fun as builtin

[21:15] <autrijus> (for some value of proving)

[21:16] <geoffb> heh

[21:18] <eric256> geoffb nice article

[21:18] <geoffb> thanks, eric256 

[21:20] <leo__> autrijus: it's of course optimized fun

[21:21] * joao wonders which is the best place to start blogging/journaling

[21:21] <geoffb> use.perl.org.  :-)

[21:21] <autrijus> joao: haskell sequence and use.perl are both easy to set up

[21:24] <gaal> rehi.

[21:24] <gaal> oops :)

[21:28] <joao> geoffb++ # great article :)

[21:28] <geoffb> Thanks, joao 

[21:29] *** autrijus changes topic to: geoffb's column: http://www.oreillynet.com/pub/au/2333 | Pugs 6.2.10 coming soon | pugscode.org | pugs.kwiki.org | paste: http://sial.org/pbot/perl6 | www.geeksunite.net

[21:30] <geoffb> thanks, autrijus 

[21:30] <autrijus> np :)

[21:42] *** joao_ is now known as joao

[21:52] <dduncan> I've decided to start smoking ... since it looks so easy now

[21:52] <autrijus> cool!

[21:52] * autrijus praises low entry of barrier to smoke.pugscode.org

[21:52] <eric256> man...just say no...don't you watch the commercials? don't submit to peer presure!!

[21:53] * autrijus further praises nothingmuch for bringing it over to smoke.parrotcode.org

[21:53] <eric256> oh...ummmm..hhmmmm....nevermind ;)

[21:53] <dduncan> also, I like that new smoke.pugscode.org page

[21:53] <fglock__> the pugs Marlboro men

[21:54] <eric256> ummm...the colums on that page have no headings.....

[21:55] <dduncan> yes, there is that problem

[21:56] <dduncan> on another note, I think the only runtime problem with /ext/Locale-KeyedText is also the same as what is causing t/builtins/arrays_and_hashes/pairs.t to fail

[21:57] <dduncan> once that test is made to work, my module probably will too

[21:59] <autrijus> eric256: they have tooltips

[22:10] <eric256> not for me

[22:10] <eric256> odd

[22:11] <autrijus> firefox here.

[22:11] <eric256> i would swear those werent there a minute ago. lol

[22:11] <eric256> firefox here too, but sometimes mine doesn't seem to like tool tips

[22:11] <autrijus> lol

[22:12] <eric256> shouldn't all the know fails be marked in some way so that you know when something breaks *more* tests?

[22:12] <eric256> or is there some easy way to tell if a new build is failing more tests?

[22:12] <autrijus> look at the numbers on the smoke page, mostly

[22:13] <autrijus> we are down to 191 fails. thank eris

[22:13] <autrijus> (but concretely, thank gaal)

[22:13] <gaal> but it's a good point. it'd be great if the smokeserver stored the yaml data too and diffed it

[22:13] <autrijus> it is.

[22:13] <gaal> you're very welcome

[22:13] <gaal> tomorrow (well, today) i'm giving a talk about pugs again

[22:13] <gaal> for my local pm group

[22:13] <eric256> how do you access the diffs?

[22:14] <autrijus> eric256: it's p5 hackery - util/smokeserv/smokeserv-server.pl

[22:14] <gaal> eric256: you don't, currently :)

[22:14] <eric256> ahh

[22:14] <autrijus> eric256: comparing two yaml records, using something like wikipedia's "diff between revs" ui

[22:14] <gaal> though i recall someone used to take the output of `make test` and put it on a wiki

[22:14] <eric256> blasphemy, the smoke server isn't writtin in perl6!!! what outrage

[22:14] <autrijus> you are welcome to port them!

[22:15] <eric256> did i say blasphemey? i mean ingenious. ;)

[22:15] <autrijus> roflmaohlagh

[22:15] <gaal> hahaha

[22:15] <eric256> (/me apologies now for any past and or future spelling errors )

[22:15] <dduncan> I just discovered ...

[22:15] <dduncan> as I'm attempting to get the smoke utility up and running ...

[22:16] <eric256> aplogizes....aplogize's...well you get the point

[22:16] <dduncan> that it has a half dozen CPAN distro dependencies that I didn't have installed yet, and some are large

[22:16] <dduncan> so porting all that is non-trivial

[22:16] <autrijus> dduncan: oh?

[22:16] <gaal> eric256: if you do try to diff tests.ymls, make sure you weed out 'time' :)

[22:16] * eric256 finaly reached gaurds in haskel....watch out i'll be hacking on something soon

[22:16] <autrijus> dduncan: I thought it's just LWP.

[22:16] <eric256> good point gaal

[22:16] <dduncan> I refer to 'make smoke'

[22:16] <autrijus> eric256: I look forward to it

[22:17] <autrijus> dduncan: ah. right. YAML, Test::TAP::Model, etc

[22:17] <eric256> yea dduncan i looked into porting Test way back and realized the same thing...but can't you use perl5 modules in pugs...so theoritcaly you could port them over slowly

[22:17] <autrijus> yes, but it is decidedly less fun that way

[22:17] <dduncan> yes, you could

[22:17] <gaal> Test::TAP::HTMLMatrix pulls in petal and stuff.

[22:18] <dduncan> and Petal pulls in stuff

[22:18] <autrijus> much more practical though.

[22:18] <eric256> its like 6 degrees of seperation from Test to every module on CPAN?? ;)

[22:18] * autrijus wonders if "p" in "perl" stands for "playful".

[22:18] <gaal> for `purrs`.

[22:18] <autrijus> eric256: modulo the islands, perhaps

[22:18] <autrijus> gaal++

[22:19] <autrijus> "purrs eyes rolls laughs"

[22:19] <autrijus> what a fine language.

[22:19] <eric256> hmm i wonder how hard it would be to map all the dependencies of cpan in some topographical way...could be interesting

[22:19] <autrijus> eric256: Alias did something like that some time ago

[22:19] <gaal> Module::ScanDeps!

[22:20] <autrijus> er, that too.

[22:20] <dduncan> I think I just installed all of these, for 'make smoke': Test-TAP-Model, Test-TAP-HTMLMatrix, URI, Petal, MKDoc-XML ... I already had YAML from before, so didn't have to pull that

[22:20] <eric256> wow... haskell gaurds are like multi methods on crack...this could get fun

[22:20] <gaal> all you need is to install Meta and then run it on that... *duck*

[22:20] <dduncan> about a half dozen dependencies, besides what Perl 5.8.7 bundles

[22:20] <autrijus> gaal: we already Model the Meta

[22:21] <autrijus> so we never meta model we didn't like.

[22:22] <gaal> dduncan: oh well, at least vanilla build doesn't require all that. if you *do* want to yamlsmoke, it's really just one command, `cpan Test::TAP::HTMLMatrix'.

[22:22] <gaal> We need more Acme:: modules!

[22:22] <dduncan> sure ... but I didn't do that

[22:22] <autrijus> gaal: it may be nice to adopt ExtUtils::AutoInstall for that I think

[22:22] <gaal> [tense mangling] so... did!

[22:23] <autrijus> saves some trouble for manual chasing

[22:23] <gaal> hey, i know the guy who wrote that!

[22:24] <autrijus> sounds like a sick fellow

[22:24] <autrijus> not as sick as a certain person who wrote inc::Module::Install, though

[22:25] <gaal> yeah, i just read the manpage and saw the "block" version of the module...

[22:25] <dduncan> it says I should create a .smoker.yml ...

[22:25] <gaal> you don't have to, dduncan

[22:25] <autrijus> I never did

[22:25] <dduncan> what good is it then

[22:25] <gaal> but if you do, your smokes on the server will have your name on them

[22:26] <dduncan> does anyone else do that?

[22:26] <autrijus> so you will get extra doses of fame and glory.

[22:26] <gaal> i think i'll add a 'homepage' field there so that googlegreedy people get tempted

[22:27] <dduncan> I'm only inclined to put my name on them if other people are ... not for privacy reasons, but so I don't look greedy

[22:27] <gaal> dduncan, it can be useful if for example you're messly like i am, and occasionally submit a smoke with local code variations from the tree

[22:27] <gaal> i do it, nothingmuch does it

[22:27] <dduncan> good enough for me

[22:28] <gaal> and i was joking about the homepage :)

[22:28] <eric256> i would run the smoke tests...but i'm betting someone on feather already does and that would be kinda pointless ;)

[22:28] <dduncan> but you and nothingmuch doing it already is enough impetus for me to

[22:28] <gaal> eric256, if you only build on feather then probably, yes

[22:29] <gaal> dduncan: what platform are you on?

[22:29] <dduncan> Mac OS X 10.3.9

[22:29] <gaal> wait, no, feather doesn't autosmoke

[22:29] <dduncan> I'm doing it on my own comp, not a server somewhere

[22:29] <gaal> yeah, most of us are. nothingmuch is on some mac too, but i don't know what version.

[22:30] <gaal> eric256: if you need a break from haskell there's one or two improvements in the build system - in fact making automatic smoke submission easier is one of them

[22:31] <eric256> i'm game

[22:31] <dduncan> my situation is different than nothingmuch, since I install pugs in a non-standard location ... I never put it in /usr/local ...

[22:31] <dduncan> likewise, I leave the systemperl alone and put my own in a non-standard location

[22:32] <gaal> great! grep -r for PUGS_SMOKE_UPLOAD: run-smoke uses it to optionally do something after the smoke

[22:32] <gaal> but it shouldn't do it that way, it should look for configuraion in config.yml

[22:33] <dduncan> curiously enough, the build info given at the top of the posted smoke files doesn't say what versions of the OS etc are being used

[22:33] <gaal> eric256++

[22:33] <dduncan> for nothingmuch, it simply says darwin-thread-multi-2level

[22:33] <eric256> grepping now.

[22:34] <gaal> that's $^O, i suppose?

[22:34] <gaal> dduncan: if you know a portable way to fix that, please do!

[22:34] <gaal> dduncan: also, i don't know if nothingmuch is installing at all (i for one never do)

[22:34] <dduncan> I don't immediately know

[22:34] <eric256> hmmm grep -r is gone and ....still gone...got a better idea where i'll find it at?

[22:35] <gaal> util/run-smoke.pl, but maybe a few loose scrips

[22:35] <gaal> and probably hack.pod too :)

[22:36] <dduncan> maybe he isn't ... I could have been confused by all the 'standard' paths listed, and absense of other paths, save 'blib6/lib'

[22:36] <gaal> i should really sleep, but i'm not sleepy

[22:40] <eric256> is there another util that is already reading the config file i can use as an example? or just hack something together for a start?

[22:42] <gaal> eric256: sure, Makefile.PL uses it

[22:43] <eric256> duh. lol

[22:43] <gaal> use PugsBuild::Config; PugsBuild::Config->lookup('ghc_heap_size');

[22:43] <dduncan> do you know if nothingmuch runs smoke from a cron job or manually?

[22:43] <gaal> cron i think; he updates all the time.

[22:43] <eric256> soo all i need is 'use PugsBuild::Config' ?

[22:44] <eric256> if so then yaml_harness.pl can be simplified too

[22:44] <dduncan> it is perhaps redundant if I do the default one, since he does it automatically and we may have the same system ... however, he doesn't do any other backends

[22:44] <gaal> eric256: that and add a defualt value for your filed

[22:44] <gaal> field

[22:44] <eric256> what is the defualt for that feild?

[22:45] * joao is going to sleep

[22:45] <gaal> plus update the templates...

[22:45] <gaal> sec, gotta see what my cat is up to

[22:45] * joao waves

[22:47] * eric256 looks at PugsConfig.pm but it says not to modify it because it was created with util/generate_config ... which doesn't seem to exist

[22:47] <gaal> not that one... sec

[22:47] <gaal> you want lib/PugsBuild

[22:48] <gaal> lookup raises an error on unknown values, possibly a wrong choice on my part (feel free to change if you think so) --

[22:48] <eric256> no such file here.../me starts to feel more like trouble than help

[22:49] <gaal> -- so it has to knwo what values are recognized

[22:49] <gaal> inc/PugsBuild/Config.pm

[22:49] <gaal> my bad

[22:49] <eric256> yea just found it

[22:49] <gaal> maybe i am sleepy a bit :)

[22:50] <eric256> okay so right below smoe_concurrent i'll add the default...and a resonable default?

[22:50] <gaal> but maybe deprecate the old way instead of removing it completely? i don't know who actually uses it

[22:50] <gaal> maybe just nm

[22:50] <gaal> yes, exactly

[22:51] <eric256> what is a reasonable default though?

[22:51] <gaal> not to upload, i think

[22:51] <gaal> so ~

[22:51] <gaal> which means undef in YAML

[22:52] <gaal> well in the perl code say undef

[22:53] <gaal> in the examlpe config.yml, util/config-template.yml, put a comment

[22:53] <gaal> then run-smoke.pl can look up the smoke server url, and if not null, send a smoke there.

[22:54] <eric256> k i think...its just running 

[22:54] <eric256> system("$ENV{PUGS_SMOKE_UPLOAD}" ) 

[22:54] <eric256> right now

[22:55] <gaal> ah, also i have a bug :) lookup, the fool, is checking for defindedness instead of existence

[22:56] <gaal> i should sleep

[22:56] <eric256> i have no idea what you are talking about. lol

[22:56] <gaal> i'll fix that then.

[22:57] <eric256> if ( defined $ENV{PUGS_SMOKE_UPLOAD} ) {   # that the line you mean?

[22:58] <gaal> nah, in the config.pm. committed.

[22:59] <svnbot6> r7331 | gaal++ | PugsBuild::Config should check for existence, not defindedness, of known

[22:59] <svnbot6> r7331 | gaal++ | lookup elements.

[22:59] <gaal> heh, that's 1337 spelled backwards. rawk

[22:59] <eric256> uhmmm my feather account can't make for some reason

[22:59] <eric256> no ghc found....thats just odd.

[23:00] <eric256> i gotta run now...can i commit what i've done? no chance to test it yet

[23:00] <gaal> maybe Juerd just apt-get dist-upgraded?

[23:00] <eric256> and if so how do i commit on svk? i'm used to svn

[23:01] <gaal> since i'm going to bed now and noone's around (i think? hello?) maybe you shouldn't unless you're sure it doesn't break the build

[23:01] <clkao> same. just recheckout

[23:01] <gaal> then again if noone's around...

[23:01] <eric256> hehe i'll set on it..and to it proper in the morning instead of rushing now...

[23:01] <gaal> hah, hello clkao, do you have a trigger on svk? :)

[23:02] <gaal> anyway, i'm off for real now

[23:02] <eric256> i'll even sit on it

[23:02] <eric256> later

[23:02] <gaal> good night!

[23:02] <clkao> busy making 1.05

[23:02] <gaal> clkao++ # making

[23:02] * gaal zzZZZ &

[23:06] <autrijus> g'nite gaal 

[23:07] <autrijus> I need to sleep too.

[23:07] <autrijus> journal up. see ya tomorrow :)

