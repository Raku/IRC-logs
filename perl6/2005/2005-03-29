[00:05] <kungfuftr> (perl medic)++ # good business reasons as well as technical

[00:58] <stevan> ingy? you still there?

[01:02] <Limbic_Region> seen ingy

[01:02] <jabbot> Limbic_Region: ingy was seen on Tue Mar 29 07:54:42 2005

[01:03] <stevan> damn the rotation of the earth

[01:03] <stevan> they sleep while we are awake, we sleep while they are awake

[01:03] <stevan> bah

[01:05] <stevan> thank L~R

[01:05] <Limbic_Region> walang anuman stevan

[01:06] <stevan> gahzuntight :P

[01:06] <Limbic_Region> the solution btw is to work on 26 hour days - you shift in an out of alignment with all 24 timezones ;-)

[01:06] <Limbic_Region> walang anuman = you're welcome in Tagalog (Philippines)

[01:07] <stevan> we need a perl6 jet which just circles the earth chasing the sun

[01:08] <Limbic_Region> what we really need is for me to win the lottery so I can personally fund the pugs/p6/parrot/ponie hackers around the world full-time in a central location

[01:09] <stevan> Limbic_Region: from your secret world headquarters high in the himalayas

[01:10] <stevan> where you can plan to take over the world one shell script at a time :P

[01:10] <stevan> (sorry, been a long day, the caffine is wearing off)

[01:13] * Limbic_Region was voted most likely to sit on a mountain top philosophizing (really) in highschool

[01:13] <stevan> s/philosophizing/plotting world domination/ :)

[01:13] <stevan> sounds cooler 

[01:13] <Odin-LAP> You mean those aren't synonymous?

[01:14] <stevan> Odin-LAP: good point

[01:25] <ingy> stevan: back

[01:25] <stevan> hey

[01:25] <stevan> so I was wondering how your Makefile battle went?

[01:25] <stevan> did you fix the Test.pm problem?

[01:25] <ingy> good I think

[01:25] <ingy> yes.

[01:25] <stevan> excellent

[01:26] <ingy> yes, sorry about that

[01:26] <stevan> do you think it is safe to turn on the File::Spec Makefile?

[01:26] <ingy> did it overwrite or shadow the Perl5 Test.pm

[01:26] <stevan> not sure I never use Test.pm :)

[01:26] <ingy> stevan: I can do it

[01:27] <ingy> I'll make sure it is safe

[01:27] <stevan> ingy: your a sweetheart :)

[01:27] <ingy> ^^ *you're*

[01:27] <stevan> yeah that

[01:28] * stevan has had a long day, and should really just go watch TV and vegetate, but is somehow drawn to Pugs

[01:30] <ingy> Installing /Users/ingy/local/lib/perl6/File/Spec.pm

[01:30] <ingy> Installing /Users/ingy/local/lib/perl6/File/Spec/Unix.pm

[01:30] <ingy> Installing /Users/ingy/local/lib/perl6/File/Spec/Win32.pm

[01:30] <ingy> :)

[01:30] <stevan> excellent

[01:30] <stevan> thanks much

[01:30] <stevan> ingy++

[01:37] <jabbot> pugs - 1292 - We can install File::Spec now that MakeM

[02:07] <jabbot> pugs - 1294 - more Pod::Stream::Parser work; added bet

[02:07] <jabbot> pugs - 1293 - adding Rule test to ref.t; adding variab

[02:17] <jabbot> pugs - 1295 - added File::Spec usage in the test; adde

[02:31] <kungfuftr> chip: yullo?

[03:30] <crysflame> File::Spec?

[03:30] <crysflame> in perl6?

[03:30] <crysflame> ingy++

[04:42] *** cnhackTNT|away is now known as cnhackTNT

[04:43] <joejiang> wait a minute 

[04:57] <jabbot> pugs - 1296 - add some tests on **,Inf,NaN

[05:09] *** cnhackTNT is now known as cnhackTNT|away

[05:36] * theorbtwo wonders if anybody is up.

[05:36] <simcop2387> no

[05:36] <simcop2387> Braccae tuae aperiuntur

[05:36] * theorbtwo wonders if there is English involved somewhere there.

[05:37] <simcop2387> its latin for "Your fly is open"

[05:37] <theorbtwo> Ah.

[05:37] <simcop2387> Quid agis, medice? i wish i could say that with the right accent

[05:37] <simcop2387> "What's up, doc?"

[06:49] <gaal> http://www.kimbly.com/blog/000402.html <- this, thankfully, isn't happenning to us

[06:49] <theorbtwo> Aaah, people are beginning to show up!

[06:49] <gaal> morning, theorbtwo :)

[06:50] <theorbtwo> ...that we know of, gaal.

[06:50] <gaal> for one thing, we aren't billing.

[06:50] <theorbtwo> True enough.

[06:50] <gaal> if par makes it to the core (it had better!) then deployment will be ever easier

[06:51] <gaal> most of the things in the top row are fixed by the open dynamics of the project

[06:52] <gaal> there was no mention of quality, but i think we're not skimping on that one

[06:53] <gaal> well, the recent talk on p6l makes me think of the system analyst pane :)

[06:53] <theorbtwo> Sadly, I missed it.

[06:53] <theorbtwo> I suppose I could have read the IRC log... in fact, IIRC, I read some of it...

[06:54] <gaal> deploying p5 in production environments is a *pain*.

[06:55] <gaal> to2, read p6-lang, thre's some talk about very weird new operators for units. they'll be hella powerful, but weird.

[06:56] <mugwump> yes, that's why there are so few production environments running p5

[06:57] <jabbot> pugs - 1297 - Locale::KeyedText update - completed syn

[07:03] <theorbtwo> Interesting, gaal.

[07:04] <sdtr443w> So how do I actually run PUGS after I install it?

[07:05] <gaal> the same way you run PERL

[07:06] <sdtr443w> Well ... uhh ... is there supposed to be a binary or something?

[07:06] <sdtr443w> A script?

[07:06] <scw> binary

[07:06] <gaal> there's a binary, sure. did you "make install"?

[07:06] <gaal> it's called pugs

[07:06] <sdtr443w> yes

[07:06] <sdtr443w> Well...

[07:06] <gaal> pugs -v

[07:06] <sdtr443w> I don't see it

[07:06] <sdtr443w> I'll try it one more time

[07:07] <gaal> how did you install, from sourec? binary package?

[07:07] <jabbot> pugs - 1298 - SQL::Routine update - this work was done

[07:07] <sdtr443w> Wow it's doing a lot now for whatever reason

[07:08] <sdtr443w> I gotta look at my history and make sure I really did run it twice before already

[07:08] <sdtr443w> (make install, that is)

[07:15] <sdtr443w> It was skipping a bunch of stuff so I have this feeling it got halfway through it and quit before

[07:16] <gaal> before you make install, please make test

[07:19] <mugwump> Anyone know who steven little @ iinteractive is on IRC?

[07:19] <gaal> stevan?

[07:19] <mugwump> oops, ye s:)

[07:20] * theorbtwo was looking through Parser.hs earlier...

[07:20] <mugwump> oh, duh, there's the AUTHORs file

[07:20] * theorbtwo grins.

[07:22] <sdtr443w> It seems to terminate while trying to compile AST in the make phase

[07:22] <gaal> error message?

[07:22] <sdtr443w> It had died earlier in Rule.Token

[07:22] <sdtr443w> nothing

[07:22] <sdtr443w> just "make: *** [pugs] Terminated"

[07:23] <gaal> welrd. do you have enough free memory / disk? sounds like a system problem to me.

[07:23] <gaal> what version of ghc are you using?

[07:23] <gaal> + OS

[07:24] <sdtr443w> It may be a system problem -- the computer sucks

[07:24] <sdtr443w> 128MB of RAM being the main constraint.  I have many GB of hard disk space free.

[07:25] <sdtr443w> I installed GHC 6.4; I'm running all this on 32-bit SuSE 9.2.

[07:25] <gaal> i'd try attaching strace to ghc and see if it dies from some signal

[07:26] <gaal> start make in one window; then in another, ps aux|grep ghc to get its pid

[07:26] <gaal> then do strace -o somefile -p that_pid

[07:27] <gaal> when make dies, tail -30 somefile

[07:27] <sdtr443w> Would you be interested in this now?  I wasn't expecting so much trouble and I intended to go to bed soon.

[07:27] <gaal> that might clue you in.

[07:27] <sdtr443w> But I'll be trying this tomorrow evening.

[07:27] <gaal> it's you who should be interested :) we're just here to help.

[07:27] <sdtr443w> Well, if it's interesting some people would likely want to know

[07:28] <sdtr443w> Though I dunno if this is the right hour for this kind of thing on this channel

[07:28] <gaal> this channel has no hours, or rather, has all hours

[07:28] <gaal> it's morning for me now, but if you want to pick this up later, feel free to come again later.

[07:29] <gaal> there are sure to be people here to help you then.

[07:30] <nothingmuch> sdtr443w: i think it might be worth to ask on #haskell about ghc issues like this

[07:30] <nothingmuch> i think i might be able to help

[07:30] <nothingmuch> but only with constant ping-ponging

[07:30] <nothingmuch> so you'd better bring this up again when you have more time

[07:31] <sdtr443w> Yeah well it may be a GHC thing since the machine I'm doing this on seems to sieze up when compiling AST

[07:31] <sdtr443w> I couldn't even get it to run ps

[07:31] <Juerd> food morning!

[07:31] <Juerd> eh

[07:31] <Juerd> good morning!

[07:31] <nothingmuch> there's a param to GHC in the Makefile

[07:31] <nothingmuch> -H200M i think

[07:31] <nothingmuch> it tells it to use 200M of memory to do some stuff

[07:31] <Juerd> Psychological typo - I do want food :)

[07:32] <gaal> "freudean sleep" :))

[07:32] <sdtr443w> Oh that would be relevant

[07:32] <Juerd> gaal: heh

[07:34] <sdtr443w> nothingmuch: I changed -H200 to -H100 wherever I found it in the Makefile.  It seemed to survive this time

[07:35] <sdtr443w> If it's assumed I will have 256MB of RAM, does this mean PUGS is going to crawl for me?

[07:35] <Juerd> Are you discussing Hyundai vans? :)

[07:35] <Juerd> (H100, H200)

[07:35] <sdtr443w> They make vans?

[07:35] <Juerd> Yes, the H100 and the H200 :)

[07:35] <Juerd> Perhaps more.

[07:35] <sdtr443w> Well I must have the "lite" version then.

[07:35] <theorbtwo> Anyway, I was wondering if there was a good reason that identifier `sepBy1` (try $ string "::") is spread all over the place, rather then being in some central location.

[07:35] <Juerd> My dad owned two H100 and has his second H200 now

[07:36] <sdtr443w> He must like them

[07:36] <Juerd> A comfortable turbo diesel, that current one

[07:36] <sdtr443w> I wish I had a turbo on mine

[07:36] <Juerd> Airco (uncommon here), and for a van, silent too.

[07:36] <sdtr443w> I have a short bus and it crawls sometimes haha

[07:37] <Juerd> My dad easily wins from my 1.6 Hyundai Lantra

[07:37] <sdtr443w> Oh grand -- the make command didn't find readline

[07:37] <Juerd> It's really shameful to see a van accellerate quicker

[07:37] <Juerd> With you flooring

[07:38] <gaal> readline is optional, sdt443w.

[07:38] <Juerd> Wow, gaal, do you type nicknames fully?

[07:38] <sdtr443w> well it caused ld to return 1 and then I get "make: *** [pugs] Error 1

[07:39] <sdtr443w> Now gaal didn't type it right

[07:39] <sdtr443w> Here's how you do it:

[07:39] <Juerd> heh.

[07:39] <sdtr443w> 1st -- type Rocko and realize all variants of it are in use.  Then run your left fist all over the left side of the keyboard, and hit enter.

[07:39] <sdtr443w> And then you get an enigmatic handle that everybody talks about.

[07:40] <Juerd> The s, d, t, r and w are all on the right side of good keyboards.

[07:40] <sdtr443w> Oh God here we go with the Dvorak

[07:40] <Juerd> I'm not God though

[07:41] <Juerd> I don't think God is particularly interested in Perl 6 development

[07:41] <sdtr443w> If you can get PUGs working for me, I'll worship you like one.

[07:41] <Juerd> As it'll eventually cause His unemployment

[07:41] <Juerd> :)

[07:41] <theorbtwo> Well, I'm a god, and I am.

[07:42] <Juerd> theorbtwo: Which one?

[07:42] <gaal> s.*, when you started make, did you get a message about readline not being found?

[07:42] <sdtr443w> This installer certainly treats readline like it's mandatory.  I do have it installed anyhow.

[07:42] <sdtr443w> lemme see

[07:43] <Juerd> theorbtwo: One of those deprecated Roman gods, or the all new and shiny ucfirst God?

[07:43] * theorbtwo is a perlmonks god of the semiactive sort.

[07:43] <sdtr443w> Well when I run it now I don't see a warning about it missing until the linker keels over.

[07:44] * Juerd sacrifices a piece of toblerone to theorbtwo 

[07:44] <sdtr443w> I've had to run make a few times and I don't have the first run anymore, if they did anything.

[07:44] <theorbtwo> tell sdtr443w about pastebot

[07:44] <theorbtwo> pastebot?

[07:44] <Juerd> pasteling?

[07:44] <Juerd> Or just use http://tnx.nl/scribble/

[07:44] <theorbtwo> perlbot, tell sdtr443w about pastebot

[07:44] <theorbtwo> perlbot, nopaste?

[07:44] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[07:45] <theorbtwo> Ahh, there it is.

[07:45] <theorbtwo> Anyway, now that we've introduced you to about ten million different services, use any of them to show us what you see when you do a make.

[07:46] <Juerd> bot/<channel>

[07:46] <gaal> s.*, the readline note comes only during configuration, ie at the first make after a make clean.

[07:46] <Juerd> argh.

[07:46] <gaal> brb

[07:46] <Juerd> DRAG AND DROP COPY AND PASTE? WHO THE HELL INVENTED THIS MADNESS?

[07:46] <theorbtwo> Microsoft, I think.

[07:47] <Juerd> Apple, but close

[07:47] <jabbot> pugs - 1299 - A possible Perldoc implementation strate

[07:47] <Juerd> But in a terminal

[07:47] <Juerd> Rather inconvenient.

[07:47] <q[acme]> i wish jabbot would give a few more characters

[07:48] <Juerd> q[acme]: gy

[07:48] <sdtr443w> OK I have a save of the original run when I configured it

[07:48] <brentdax> Does pugs just operate at :u0, or does it have some sort of Unicode support?

[07:48] <sdtr443w> It claims it can't find libreadline.so.4: No such file or directory.  That's interesting.

[07:48] <Juerd> q[acme]: :)

[07:48] <sdtr443w> Do you want a paste still?

[07:48] <sdtr443w> I did a locate and I see it in /lib

[07:48] <Juerd> brentdax: IIRC, everything's unicodeish

[07:48] <Juerd> brentdax: With no level specification

[07:49] <Juerd> u4 that is iirc

[07:49] <Juerd> But these *numbers* are terrible to remember.

[07:49] <brentdax> Hmm, okay, guess I'll leave it stubbed ot...

[07:49] <sdtr443w> But that must be GHC's problem

[07:49] <theorbtwo> Hmm...

[07:49] * brentdax is working on porting URI::Escape.

[07:49] <theorbtwo> perlbot, seen autrijus

[07:49] <jabbot> theorbtwo: autrijus was seen on Tue Mar 29 03:00:41 2005

[07:49] <theorbtwo> jabbot, what timezone?

[07:49] <jabbot> theorbtwo: Have you asked such questions before?

[07:50] <Juerd> brentdax: I still think all encoding/escaping should be abstracted and unified

[07:50] <obra> autrijus is on a train

[07:50] <theorbtwo> perlbot, seen theorbtwo

[07:50] <jabbot> theorbtwo: theorbtwo was seen on Tue Mar 29 15:49:52 2005

[07:50] <sdtr443w> Oh God scratch that.  That was from my original botched attempt before installing GHC.  Afterwards, I don't see any mention of readline

[07:50] <hcchien> obra: on a plane. :)

[07:50] <sdtr443w> I think I need a nap

[07:50] <obra> hcchien: oh!

[07:51] <theorbtwo> Aaah.  Know when he'll be on-channel again?

[07:51] * Juerd hands sdtr443w a nap

[07:52] <sdtr443w> Yeah I'm going to put this off until tomorrow.

[07:53] <brentdax> Wow, I'm slightly less than clever.  It's already been ported, although it's a straight port, not an idiomatic one.

[07:53] <hcchien> theorbtwo: more 1.5hrs, I guess.

[07:55] <theorbtwo> Hmm.  I want to hack on the parser a bit under his tootlage, but if I stay up another hour and a half, I'll be too asleep to do so.

[07:55] <clkao> seen autrijus

[07:55] <jabbot> clkao: autrijus was seen on Tue Mar 29 03:00:41 2005

[07:55] <obra> clkao: when should I pull to test that your fix fixes it all?

[07:56] <obra> er. mischan

[07:56] <theorbtwo> That's GMT+7, BTW.

[08:03] <scw> +0800, infact

[08:04] * nothingmuch has a go at prototyping that GC stuff

[08:28] <gaal> hey, vim users, add stuff to util/perl6.vim - i

[08:28] <gaal> ''ve been doing it as i go along

[08:33] <kungfuftr> morning all

[08:37] <jabbot> pugs - 1300 - add some more builtin types

[08:57] <jabbot> pugs - 1302 - 

[08:57] <jabbot> pugs - 1301 - Fixing perl6.vim: 0o123 and :key<val>

[08:58] <gaal> please put messages on your svn ci's :)

[09:05] <scw> That one is generated by svk and contains no changes..

[09:05] <scw> (except svk:merge property..)

[09:30] *** kungfuftr changes topic to: pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | FBSD_4.11:r1302(183/3383) win2k:r1284(118/3242) Linux:r1197(105/3116) MacOSX:r1197(105/3116)

[09:51] <brentdax> Can Pugs built-ins be implemented in Perl?

[09:51] <nothingmuch> not all

[09:51] <nothingmuch> or do you mean perl6?

[09:51] <nothingmuch> in that case not yet, perhaps

[09:51] <brentdax> Yeah, Perl 6.

[09:51] <nothingmuch> there is one boundry that's hard to cross

[09:51] <nothingmuch> system calls

[09:51] <nothingmuch> that has to be builtin, as some kind of interface

[09:52] <brentdax> I'd like to write part (which I backported to Perl 5), but I don't know Haskell.

[09:52] <nothingmuch> anything else is MMD dispatched

[09:52] <nothingmuch> the builtins are pretty simple, actually

[09:52] <nothingmuch> could you list a few? I might be able to help you start

[09:53] <nothingmuch> they are mostly wrappers for haskell functions

[09:53] <nothingmuch> except that they do a little castin

[09:53] <nothingmuch> g

[09:53] <nothingmuch> as for writing them in p6: we don't really have all the stuff in pugs yet

[09:53] * brentdax nods.

[09:53] <nothingmuch> but when perl 6 will be written in perl 6, it's only logical that they are implemented as perl 6

[09:53] <brentdax> Could probably be done by having a sort of default 'use', though..

[09:53] <nothingmuch> :w

[09:53] <nothingmuch> oops, wrong window

[09:54] <brentdax> vi user?

[09:54] <nothingmuch> yeah, but we don't have many required facilities

[09:54] * nothingmuch confesses

[09:54] <nothingmuch> no BEGIN { }, no type based MMD lookups

[09:54] <nothingmuch> from specific to generic

[09:55] <nothingmuch> no objects to represent many builtins (fhs)

[09:55] <nothingmuch> (or arrays, hashes, etc, for that matter)

[09:56] <brentdax> Can you construct an anonymous array, take and execute a coderef, and perform a for() loop?

[09:57] <nothingmuch> you mean, implement map, etc?

[09:57] <nothingmuch> i think that should be possible technically

[09:57] <brentdax> Yes.  part is not much different from map.

[09:57] <brentdax> http://search.cpan.org/src/BRENTDAX/List-Part-0.03/Part.pm --My Perl 5 version

[09:57] <nothingmuch> good module, i use it occasionally

[09:57] <nothingmuch> since for basically takes pointy subs

[09:57] <nothingmuch> i wonder if gather/take could be streched to make them be able to do part

[09:58] <nothingmuch> brentdax++

[09:58] * nothingmuch doesn't need it that often though

[09:58] <nothingmuch> if i go that far I usually need set operations, or nothing at all

[09:58] <brentdax> Neither do I, but when I need it, there's nothing better.

[09:58] <nothingmuch> you could write a test

[09:59] <nothingmuch> that tries to see if for can take code refs

[09:59] <nothingmuch> brb

[09:59] <brentdax> k

[10:03] <nothingmuch> ok, back

[10:03] <nothingmuch> but it's lunch time

[10:03] <nothingmuch> do you have commit access?

[10:03] <nothingmuch> hola lightstep 

[10:03] <nothingmuch> i'm prototyping various GC schemes, would you like to see later?

[10:04] <nothingmuch> i'm starting to think GC zones actually do make sense

[10:04] <brentdax> Me?  Not on Pugs, I've not done anything to it yet.

[10:04] <brentdax> (I assume autovivification is a pipe dream at this point?)

[10:05] <lightstep> yes

[10:05] <lightstep> but how can you implement gc in a gc'ed interpreter?

[10:05] <nothingmuch> lightstep: an object called 'memory'

[10:05] <nothingmuch> which is really a set of objects

[10:05] <lightstep> oh

[10:05] <nothingmuch> and an object called 'memory object'

[10:05] <nothingmuch> and some event generation

[10:06] <lightstep> but in an interpreter, memory blocks in the object language are usually memory blocks in the meta language?

[10:06] <nothingmuch> (object has ref taken of it, object is released, object refers other, object removes reference to other)

[10:06] <lightstep> (like pugs works now)

[10:06] <nothingmuch> i don't understand the terms

[10:06] <autrijus> good morning folks.

[10:06] <nothingmuch> (object is born)

[10:06] <obra> hi autrijus 

[10:06] <nothingmuch> hola autrijus 

[10:06] <nothingmuch> ack, i can't find my lunch slips

[10:06] <lightstep> object language = pugs, meta language = haskell

[10:07] <nothingmuch> ah

[10:07] <autrijus> "host language" too.

[10:07] <nothingmuch> i'm doing it in p5

[10:07] <jabbot> pugs - 1303 - More playing with the DOM

[10:07] <nothingmuch> and either way, it doesn't really matter

[10:07] <lightstep> the memory of the unref'ed objects won't be freed anyway until haskell gets to it

[10:07] <lightstep> oh

[10:07] <nothingmuch> since deletion is just moving the 'object' object to the 'deleted' space

[10:07] <nothingmuch> ah

[10:08] <nothingmuch> ok

[10:08] <nothingmuch> well, again, if it were freed i couldn't check that freeing was correct

[10:08] <nothingmuch> i plan to use full mark & sweep as the reference GC

[10:08] <nothingmuch> =)

[10:08] <nothingmuch> brentdax: can i have your email please?

[10:08] <lightstep> you can also create a noop gc module to test the prototype

[10:08] <brentdax> [email@hidden.address]
[10:09] <nothingmuch> autrijus's rule is that you have to comit tests first, though

[10:09] <nothingmuch> so do the for/cref thing

[10:09] <nothingmuch> and then try to hack it so it works

[10:09] <nothingmuch> or, test for 'part'

[10:09] <nothingmuch> and try to implement it in p6, and then in haskell

[10:09] <nothingmuch> invitation sent

[10:11] <brentdax> I assume the Chinese(?) legalese doesn't require me to give them my first-born child or something.

[10:12] <rgs> no, only the second one

[10:12] <brentdax> Oh, okay.  My family has a history of...interesting middle children anyway.

[10:13] <autrijus> # http://wagner.elixus.org/~hcchien/termtouse.html

[10:13] <autrijus> sf.net boilerplate

[10:14] <brentdax> Thanks.

[10:18] <brentdax> I guess I can just port over the List::Part tests...

[10:18] <autrijus> yup.

[10:19] *** obra changes topic to: pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | FBSD_4.11:r1302(183/3383) win2k:r1284(118/3242) Linux:r1302(193/3383) MacOSX:r1197(105/3116)

[10:21] <brentdax> We don't have is_deeply, do we?

[10:21] <autrijus> we don't but you can trivially implement it by comparing .perl

[10:21] <brentdax> Ah, cute...

[10:46] <ihb> perhaps a stupid question, but why are modules being ported to Perl 6? aren't you supposed to be able to use Perl 5 modules in Perl 6? (i can see some reasons, but i'd much rather have a good answer :-))

[10:46] <obra> ihb: eventually, sure. but there's no machine translation framework.

[10:46] <obra> it's currently possible to do some things using an embedded perl5 interpreter.

[10:47] <kungfuftr> autrijus: DBI::PurePerl has way too many Perl5 idiosyncraticies

[10:47] <jabbot> pugs - 1304 - test syntax about @=DATA etc.

[10:47] <obra> kungfuftr: that's a pity

[10:49] <kungfuftr> yup, is a pain

[10:49] <fayland_> jabbot: ya,it's from me. I think maybe I should add the "todo_fail("FIXME parsefail");"

[10:49] <jabbot> fayland_: That's quite interesting.

[10:49] <fayland_> jabbot: it runs wrong on my OS

[10:49] <jabbot> fayland_: Your OS?

[10:50] <fayland_> jabbot: yes. can u test it?

[10:50] <jabbot> fayland_: Why don't you tell me a little more about this.

[10:50] <obra> jabot++ # passes the turing test

[10:51] * gugod be proud

[10:51] * obra grins at gugod

[10:52] <fayland_> jabbot: did u test it?

[10:52] <jabbot> fayland_: That is interesting. Please continue.

[10:52] <gugod> fayland_: jabbot is a real robot, fyi

[10:52] <fayland_> o

[10:52] <fayland_> god save me

[11:17] <jabbot> pugs - 1307 - * cleanup on AUTHORS and ChangeLog

[11:17] <jabbot> pugs - 1306 - * support for variables in ~~ RHS

[11:17] <jabbot> pugs - 1305 - fix a small test file from me.

[11:27] <jabbot> pugs - 1308 - something new about POD Data object to P

[11:28] <Jonathan> Hmmm....is build broken (on Win32) for anyone else?

[11:29] <Jonathan> Fails for me at Spec.pm line 1, saying that Perl 6 is required.

[11:47] <hlafarge> hi everybody - i'm getting an 'impossible' error from GHC when compiling Main.hs on debian (GHC 6.4), any clue ?

[11:49] <pjcj> works fine for me - debian testing, self compiled ghc-6.4

[11:51] <autrijus> hlafarge: try check out again

[11:51] <autrijus> Jonathan: oh? hrm

[11:51] <hlafarge> pjcj: the exact error message is: ghc-6.4: panic! (the `impossible' happened, GHC version 6.4): \nMaybe.fromJust: Nothing

[11:51] <autrijus> Jonathan: check for your perl5 File::Spec

[11:51] <autrijus> perl -MFile::Spec

[11:51] <autrijus> see if it's overwritten

[11:51] <autrijus> hlafarge: yeah, I ran into that yesterday

[11:51] <autrijus> a fresh checkout worked

[11:51] <hlafarge> autrijus: you mean get rid of my old checkout and get a new one ?

[11:51] <autrijus> hlafarge: just

[11:51] <autrijus> rm -rf * ; svn up

[11:52] <autrijus> or "svk revert -R ."

[11:52] <hlafarge> autrijus: thanks, trying that right now ...

[11:58] <hlafarge> autrijus: wonderful, it works, thanks!

[11:58] <autrijus> :)

[11:59] * nothingmuch is having trouble conceptualizing

[11:59] <nothingmuch> without increasing usage complexity

[11:59] <nothingmuch> i hate this dilema

[12:01] <hlafarge> autrijus: btw, is the mirror at http://svn.perl.org/perl6/pugs still supposed to be kept up to date ?

[12:01] <hlafarge> autrijus: i'm mirroring that via svk and got no updates for a few days

[12:02] <autrijus> er, the syncer dies, sorry.

[12:02] <autrijus> restarted.

[12:04] * nothingmuch hates sysadmins who think their job is more important than the jobs of the users they support

[12:04] <hlafarge> autrijus: made my day ;-) you're my hero (already were anyway) autrijus++

[12:05] <autrijus> :)

[12:05] <nothingmuch> hlafarge: you can just use http://svn.openfoundry.org/pugs

[12:05] <autrijus> nothingmuch: sysadmins usually hate back :)

[12:05] * nothingmuch hates even more so, hacking into the US sites boxes because the sysadmin is sleeping and I need something done

[12:05] <nothingmuch> i don't hate him

[12:05] <nothingmuch> i hate his process

[12:05] <nothingmuch> he's soooo stubborn

[12:06] <nothingmuch> there's a firewall zone for nearly every machine over there

[12:06] <hlafarge> nothingmuch: that's what i'm using with subversion, but i also had an svk mirror, just in case ;-)

[12:06] <nothingmuch> so each time someone wants to copy a file i have to say 'ah, you have to pull, you can't push because Aaron is too paranoid'

[12:06] <autrijus> bbiab :)

[12:06] <nothingmuch> the reason i'm in ruining his security policy in the first place is that he placed some stupid cap on the mail message sizes

[12:06] <nothingmuch> so i couldn't send 30MB by email

[12:07] <jabbot> pugs - 1309 - * rename IMCC to IMC

[12:08] <pjcj> How do people mail word docs and excel files containing screen captures?!

[12:08] <obra> heh

[12:09] <nothingmuch> pjcj: are you asking how in the techincal sense, or the "dear god" sense?

[12:09] <pjcj> the latter, unfortunately

[12:10] <nothingmuch> oh crap

[12:10] <nothingmuch> now i have to play with his LVM settings

[12:10] <osfameron> Annoyingly, it seems to be the easiest way to mail a screen capture from windows

[12:11] <nothingmuch> can't you just paste it into outlook/thunderbird?

[12:12] <osfameron> Don't think you can paste any attachments into thunderbird.

[12:12] <osfameron> Can't remember re outlook, think no though.

[12:12] <nothingmuch> oh well

[12:12] * nothingmuch uses mutt or apple mail

[12:12] <nothingmuch> i expect that behavior from the latter

[12:13] <nothingmuch> and normally enjoy the lack of it in the former

[12:14] <osfameron> http://www.joelonsoftware.com/items/2005/03/28.html  has a comment on user-friendliness of print-screen

[12:30] <shapr> This place is growing fast.

[12:31] <autrijus> verily.

[12:34] <Odin-> Ya figure?

[12:34] <shapr> I reckon

[12:34] <shapr> Is that close enough?

[12:36] <autrijus> :)

[12:37] <autrijus> bbiab.

[12:37] * autrijus needs to write PA02 in a couple days.

[12:38] <Odin-> What'll that be about?

[12:38] <autrijus> technical architecture

[12:38] <autrijus> "how to start hacking pugs"

[12:38] <Odin-> Ah. :p

[12:39] <autrijus> explaining key concepts etc.

[12:39] <autrijus> & 

[12:47] <jabbot> pugs - 1310 - * Add a couple of common keywords

[12:47] * rgs continued to hack perl6.vim

[12:51] <Jonathan> Seems that the build process is choosing to use the copy of File::Spec in the Pugs blib folder rather than the one installed with Perl itself.

[12:52] <Jonathan> Perl 5, that is.

[12:53] <rgs> that's probably the Right Thing.

[12:54] <rgs> :q

[12:54] <rgs> unless you're speaking of the p6 port of File::Spec of course

[12:54] <Jonathan> Not really; that version of File::Spec requires Perl 6 which, until you've built pugs, you don't have.

[12:54] <Jonathan> Yeah, that's right.

[12:54] <rgs> but it should go in blib6 then

[12:56] * rgs doesn't see a File::Spec in blib*

[12:58] <Jonathan> I have the latest version, have done a make clean, run make and end up with a module starting "use v6;" in blib\lib\File.

[12:58] <rgs> \ ? you're on windows ?

[12:58] <Jonathan> Yes.

[12:59] <rgs> maybe a platform specific bug then. trying to reproduce.

[13:00] <kungfuftr> the IMC renaming seems to have broken building

[13:01] * kungfuftr has a peek

[13:02] <rgs> that's right

[13:02] <Jonathan> It does "cp lib/File/Spec.pm F:\Hacking\Pugs\blib\lib\File/Spec.pm"

[13:02] <rgs> here (on linux) it goes to blib6/lib/File/Spec.pm

[13:02] <rgs> which is right.

[13:03] <kungfuftr> anyone know when stevan usually gets onto irc?

[13:03] <nothingmuch> his afternoon to evening

[13:03] <kungfuftr> TZ?

[13:05] <shapr> stupid question, can I create new operators with limited semantics in Perl? Is there some way to generate always correct SQL from made-up database operators in Perl?

[13:05] <nothingmuch> shapr: you could use the given operators, and overload them, in p5

[13:06] <nothingmuch> or declare sub infix:<xxx> in p6

[13:06] <nothingmuch> see s13

[13:06] <shapr> and then it's an infix op?

[13:06] <pasteling> "Jonathan" at 82.133.67.25 pasted "My build problem" (62 lines, 3.4K) at http://sial.org/pbot/8714

[13:06] <nothingmuch> uhuh

[13:06] <shapr> nifty, thanks.

[13:06] <Jonathan> That's what I see on build.

[13:06] <nothingmuch> you can also to declare precedence

[13:07] <metaperl> I pointed shapr to Rosetta

[13:07] <metaperl> and all the SQL generators such as Class::DBI, Rose::DB, etc

[13:07] <nothingmuch> Jonathan: looks like the manifest for File::Spec is broken

[13:07] <nothingmuch> can you paste whatever was before that?

[13:08] <Jonathan> I just have the running of Makefile.PL

[13:08] <nothingmuch> i'd like to see it all... 'perl Makefile.PL; make'

[13:08] <Jonathan> I do get "Warning: prerequisite ExtUtils::MakeMaker 6.15 not found. We have 6.03."

[13:08] <nothingmuch> ah

[13:08] <kungfuftr> hhhmmm... distclean and make seems to have worked

[13:08] <Jonathan> Is that going to be it?

[13:09] <nothingmuch> that's one good reason for it to fail

[13:09] <Jonathan> Argh.

[13:09] <nothingmuch> 6.03 is from before i was born, i think

[13:09] <Jonathan> ActiveState's ppm happily doesn't have anything later than 6.03. :S

[13:09] <nothingmuch> yup

[13:09] <nothingmuch> perlwise i was born around 2002

[13:10] <nothingmuch> shortly before 6.05

[13:10] <nothingmuch> ;-)

[13:10] <kungfuftr> Jonathan: should be able to install directly from cpan instead of ppm

[13:11] <nothingmuch> booyakasha

[13:18] <Jonathan> Righty, that upgrade rids me of the warning.

[13:19] <pasteling> "Jonathan" at 82.133.67.25 pasted "Now I get this..." (21 lines, 717B) at http://sial.org/pbot/8717

[13:27] <hcchien> should I add the test for multidimensional array? or it exists already? # didn't see it.

[13:31] <kungfuftr> hcchien: t/data_types/multi_dimensional_array.t ?

[13:32] <Thomas_Yeh> hi Autrijus

[13:34] <mugwump> he's sleeping

[13:36] <Thomas_Yeh> mugwump: can you tell him to reply mail to danielnee of s-team, thanks

[13:38] <Limbic_Region> Does anyone know if p6 is supposed to allow this?  http://www.perlmonks.org/index.pl?node_id=443062

[13:38] <Limbic_Region> pdcawley used to do the weekly p6 summaries so I would have guessed he would know what he is talking about

[13:38] <Limbic_Region> though in a follow up he didn't sound so sure

[13:41] <hcchien> kungfuftr: oh, thanks. but it doesn't include the data type declare, like my num @nums is shape(2,4)?

[13:47] <kungfuftr> hcchien: add to that test then i'd reckons

[13:48] <hcchien> kungfuftr:ok, I will do.

[13:54] *** cnhackTNT|away is now known as cnhackTNT

[13:57] <jabbot> pugs - 1311 - Require a version of Test::More that kno

[13:58] <chip> kungfuftr: seeking me?

[14:03] * Limbic_Region was looking for a snack, but he really isn't fond of chips

[14:03] <shapr> Too bad, I have several chips on my shoulder.

[14:04] <kungfuftr> chip: yar, 2 secs

[14:04] <Limbic_Region> I'm glad to see you are using a use.perl journal chip - will be nice to see how all this Pugs development spills over into Parrot - thanks for putting on the hat

[14:04] <chip> Limbic_Region: thanks ... I'm pondering my own sanity, but I couldn't resist

[14:05] <Limbic_Region> getting Leo involved in IRC will be a huge boost I think

[14:05] <chip> My first issue is figuring out a basic architectural question of big register set vs. continuations.  It's ... fun

[14:05] <Limbic_Region> the man is phenominal, but he works vaccuously too much IMO

[14:05] * shapr cheers for continuations

[14:07] <kungfuftr> chip: my housemate has been looking for stuff to hack on in parrot, are there certain areas he should look towards?

[14:07] <jabbot> pugs - 1312 - More MetaClass musings...

[14:07] <Limbic_Region> I know Sam Ruby was getting just a tad bit frustrated and without our fearless leader (Dan was MIA at the time) no resolution was made

[14:09] * Limbic_Region volunteered to forward links to autrijus for any Pugs related questions that arose at the Monastery/use.perl - I can do the same for Parrot if you want chip

[14:13] <chip> kungfuftr: I'm not the guy to ask that question.  Leo is (among his other other roles) the traffic cop, and he's been occasionally posting to p6i with tasks in search of volunteers

[14:15] <chip> Limbic_Region: Yes, please, that'd be fine; I like much of the Monastery, but there are only so many minutes in a day

[14:19] <Limbic_Region> ok - you prefer email or /msg here in IRC?

[14:22] <Limbic_Region> chip - to give you an idea of the volume, there have been 4 specific related posts at the Monastery in the last month and a half

[14:23] <Limbic_Region> interestingly enough, one of them is titled "Parrot on a chip"

[14:26] <chip> bwa

[14:26] <chip> bwaha

[14:27] <chip> msg on irc is fine ... my screen session sees all

[14:27] <chip> thanks

[14:29] <Limbic_Region> shame on you chip - your away message is triple x-rated 

[14:30] <kungfuftr> chip: thanks

[15:05] *** Corion changes topic to: pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | FBSD_4.11:r1302(183/3383) win2k:r1312(185/3383) Linux:r1302(193/3383) MacOSX:r1197(105/3116)

[15:13] <elmex> hi

[15:13] <Limbic_Region> lo

[15:21] <Corion> la

[15:21] <Corion> ter

[15:50] *** PerlJam is now known as PerlPilot

[15:54] <nothingmuch> if anyone wants to see reference impls of ref counting and copy sweeping garbage collection: darcs get http://nothingmuch.woobling.org/gc

[15:54] <nothingmuch> i'm working on zoned GC

[15:54] <nothingmuch> and then I will script usage of a memory structure

[15:54] <nothingmuch> and then i will benchmark

[16:07] *** PerlPilot is now known as PerlJam

[16:18] <theorbtwo> Does anybody know if the hackathon around YAPC::NA is going to be before or after?

[16:21] <theorbtwo> Apparently not, sigh.

[16:46] <gaal_> to2, i recall autrijus said before, but search these logs to make sure.

[17:10] <Corion> Did anyone actually hack on %*CONFIG ? I only see mention of it by integral, gaal and me, and nobody mentioned it's been done...

[17:10] <Corion> (I'd "simply" expose the FMHash (or whatever it is) in Config.hs to the Perl side of life)

[17:11] <Corion> ... and all of that just to get -V:foo_bar to work :)

[17:37] <jabbot> pugs - 1313 - TODO test for %*CONFIG hash (tentative)

[17:44] <integral> Corion: I've got half the code done

[17:44] <integral> Also autrijus suggested that it should be %?CONFIG

[17:44] <integral> the issue I'm working on is that the FiniteMap in Config.hs uses Haskell rather than perl types

[17:44] <Corion> integral: Oooo - even cooler! I'm currently wondering about why %*ENV works and %*CONFIG doesn't compile (Haskell side)

[17:45] <Corion> integral: Aaah - maybe that's my problem too :-) Well - I'll change my tests to use %?CONFIG then :-)

[17:45] <integral> there's no actual patches on svn yet

[17:46] <Corion> integral: ... except my patches - I accidentially also committed my Run.hs which has a stub hash for %*CONFIG :-)

[17:46] <integral> ah

[17:46] <Corion> integral: But filling that hash with life is what doesn't work for me currently :)

[17:47] <integral> I'll send my patch to the Config.hs stuff

[17:47] <Corion> I'm undoing my Run.hs patch (resp. comment it out)

[17:57] <jabbot> pugs - 1316 - TODO test for pugs -V:foo

[17:57] <jabbot> pugs - 1315 - Add pugs_versnum, pugs_version, and pugs

[17:57] <jabbot> pugs - 1314 - Rename %*CONFIG to %?CONFIG

[18:17] <jabbot> pugs - 1317 - Added tests for unpacking array paramete

[18:24] *** Corion_ is now known as Corion

[18:25] <integral> *sigh* ghc eats so much ram :-/

[18:43] <Corion> Heh - I think I tricked Haskell into exporting %?CONFIG :-)

[18:48] <Corion> Heh - I think I tricked Haskell into exporting %?CONFIG :-)

[18:48] <Corion> Ooops - sorry :)

[18:49] <Corion> hi nothingmuch :)

[18:50] <nothingmuch> evening

[18:50] <nothingmuch> hola Corion

[18:50] <Corion> integral: ping ?

[18:57] * shapr sings cheerfully

[18:57] <shapr> I'm so happy there are inspirational projects in the world like pugs!

[18:57] <jabbot> pugs - 1318 - First draft of a 'working' %?CONFIG

[18:57] <shapr> see! jabbot thinks so too!

[18:59] <integral> Corion: pong

[18:59] <Corion> integral: I just fudged in my version of %?CONFIG (but I think I broke something) - are you still working on %?CONFIG ?

[19:00] <integral> yep, I'm still fiddling

[19:00] <Corion> integral: I hope your solution will be better than my fudging :)

[19:00] <integral> it's probably not :-)

[19:00] * integral looks

[19:00] <Corion> integral: I use     let confFM = listToFM $ [ (k, VStr v) | (k, v) <- fmToList config ]

[19:01] <integral> ah, that's what I'm using but with a map rather than a comp.

[19:01] <Corion> ... but I didn't test before committing, so I broke the build :(

[19:01] <Corion> Gaah - and another stupid thing committed before testing it :(

[19:02] <Corion> ... I should set me up a local repository and only commit when I've tested it all locally :(

[19:04] <integral> ./pugs -e'say "This is the %?CONFIG<pugs_version>"' # now works

[19:07] <jabbot> pugs - 1320 - Fixed all my stupid not-test-before-comm

[19:07] <jabbot> pugs - 1319 - I should test before commit :(

[19:08] <Corion> integral: Heh - I'm just hacking in -V:pugs_version :)

[19:09] <Corion> integral: What implementation did you use / is it similar to what I did ?

[19:09] <integral> It's exactly what you did

[19:10] <Corion> Yay. pugs -V:foo now works, at least for known foo :-))

[19:10] <integral> I just used map with (\(k,v)->(k,vStr v))

[19:10] <Corion> Ooops - except that I get path_sep: path_sep - which means I left out a FM lookup somewhere :-(

[19:12] <gaal> hey integral, Corion

[19:12] <Corion> integral: I went that way because the line above looks exactly the same :)

[19:12] <Corion> gaal!

[19:12] <integral> hmm, should revision be "r123" or just "123"?

[19:12] <nothingmuch> hola gaal 

[19:12] <gaal> sup? hey, cool, %CONFIG :)

[19:12] <gaal> hey there

[19:12] <nothingmuch> integral: IMHO just 123

[19:12] * integral hacks

[19:12] <nothingmuch> that's easier to pass around to svn

[19:12] <Corion> gaal: Close... My -V:foo stuff is broken, but otherwise it seems to work ;)

[19:13] * gaal svn ups

[19:14] <Corion> d'oh - reversing the parameters to lookupWithDefaultFM is stupid :)

[19:14] <gaal> wow, we have lots of tests

[19:14] <gaal> Corion, you know about the accessor, yes?

[19:14] <gaal> Config.getConfig

[19:14] <Corion> gaal: That one doesn't help me.

[19:14] <gaal> because it defaults to ""

[19:14] <gaal> oh

[19:14] <gaal> too bad :)

[19:15] <nothingmuch> is there a safe/efficient way to climb up two branches of a tree

[19:15] <nothingmuch> and find their parent?

[19:15] <Corion> gaal: It only looks up one value. And I want to use the same variable that is used for %?CONFIG :)

[19:15] <gaal> wow, we have hella lots of tests.

[19:15] <nothingmuch> lowest common parent

[19:15] <gaal> does each node know its depth from the root, nm?

[19:16] <nothingmuch> no

[19:16] <gaal> then i don't know :)

[19:16] <nothingmuch> otherwise i'd just level, and then climb a step at a time

[19:16] <gaal> true.

[19:16] <gaal> i only have answers to the easy questions. that's why i want to make everythign easy.

[19:16] <nothingmuch> i'm guessing I could climb all the way up, stack parents

[19:16] <integral> I remember seeing something like that in the type code,  iirc it just turned each node into it's path (top -> grandparent -> parent -> node), and pulled out the common prefix

[19:17] <nothingmuch> and then pop, till there's a split

[19:17] <Corion> Ah - a Perl6 question - should @array = ([1], [2,3]) work like in Perl5 or should it flatten ?

[19:17] <nothingmuch> the reason I want to avoid that is that i"m reeeaaaalllly afraid of latency

[19:17] <gaal> oh, no doubt there's a way to get the haskell or ocaml compilers to produce an error message that expresses a solution to this problem :)

[19:18] <Corion> (because Pugs flattens, and I'm not sure if that's a bug :) )

[19:18] <nothingmuch> i think that's a bug

[19:18] <gaal> i don't know, Corion, but I'd guess like p5.

[19:18] <nothingmuch> but it could be that what you really mean is '@array = (1; 2, 3)

[19:18] <gaal> what do the tests say?

[19:18] <Corion> nothingmuch: Would that create an array of two arrays ?

[19:18] <nothingmuch> yup

[19:19] <nothingmuch> in theory

[19:19] <nothingmuch> i'm not sure it's implemented

[19:19] <Corion> nothingmuch: Then I think I want that :)

[19:19] <nothingmuch> i think i want @array = ([1], [2, 3])

[19:20] <nothingmuch> because otherwise there's no real way to say @array = ($aref, $aref2);

[19:20] <kungfuftr> autrijus: yullo?

[19:20] * nothingmuch considers balanced zoning, a la btrees

[19:20] <nothingmuch> makes things simpler

[19:21] <nothingmuch> but also more complicated

[19:21] <Corion> What should become the equivalent to perl -V:unknown_option ? In Perl5 it is 'UNKNOWN'.

[19:22] <nothingmuch> i think unknown_option=undef;

[19:22] <nothingmuch> that means false in p5 %CONFIG

[19:22] <gaal> why not raise an exception on that kind of thing?

[19:22] <nothingmuch> but i don't think that's a good thing

[19:23] <nothingmuch> perl -Mfatal -V:unknown_option

[19:24] <Corion> nothingmuch: It must return a string to the command line (I'm talking about -V: , not about the internal value, which will be undef IMO)

[19:25] <gaal> if i'm doing low level io, and have a binary buffer, how do i substr off it w/o unicode semantics? i know there was some debate but has there been a bottom line?

[19:25] <gaal> in that case, UNKNOWN makes better sense than an empty string

[19:25] <nothingmuch> sh compatible?

[19:25] <nothingmuch> i think you want 'my str $buffer'

[19:26] <gaal> though stderr or some nonzero exit code might  be better

[19:26] <gaal> thanks, nm

[19:27] <jabbot> pugs - 1322 - -V:foo works for known values of foo

[19:27] <jabbot> pugs - 1321 - Change %?CONFIG{pugs_revision} to be jus

[19:27] <gaal> can i cast a probably unicode string onto that buffer?

[19:27] <gaal> my str $nonuni = "this contains unicode chars"?

[19:29] <Corion> Currently the output will be "\tfoo: \n" - ugly but "good enough" so far

[19:29] <gaal> that's like giving an empty string, Corion, if for other values you return "\tMoose: elk\n"

[19:30] <Corion> gaal: Yep. Not ideal, but good enough for a first try I think

[19:31] <gaal> sure, but i'd still prefer UNKNOWN :)

[19:33] <Corion> gaal: No problem - I'll put that in and it'll go in with the next commit :)

[19:33] <Corion> That way, it'll stick out in generated shell scripts or makefiles, true!

[19:34] <gaal> and there'll be a way to differentiate it between values that really are "".

[19:36] <Corion> Hmmm. As a side effect, "pugs -V foo"  works too. Is that good or bad ?

[19:37] <jabbot> pugs - 1323 - Unknown -V: options output the empty str

[19:45] <gaal> my Code $callback = smth. how do i invoke $callback?  $callback.(args)? $callback.call(args)?

[19:45] <kungfuftr> gaal: $callback() ?

[19:46] <gaal> i don't know, couldn'

[19:46] <gaal> t find it in the Syns.

[19:46] <kungfuftr> callback is just an anonymous closure, aye?

[19:46] <gaal> yes

[19:46] <kungfuftr> yeah... it's $callback()

[19:47] <gaal> $x.() makes sense to me, because in p5 i was a fan of $x->()

[19:47] <gaal> thanks, kungfuftr!

[19:50] <kungfuftr> gaal: hhhmmm.. it's not specific, but see about currying in S06

[19:52] <kungfuftr> gaal: ah ha! it's in S04 within "Relationship of blocks and declarations

[19:53] <gaal> thanks again :)

[19:54] <kungfuftr> np

[20:01] * kungfuftr has a crazy idea for pugs/perl6 in general

[20:03] <gaal> we're listening :)

[20:03] <kungfuftr> soz, coffee called

[20:04] <kungfuftr> translating "Learning Perl" directly into the perl 6 equivalent (ie: Learning Perl 6)

[20:05] <gaal> we certainly want docs and books, but you know, learning perl isn't in the public domain :)

[20:06] <kungfuftr> this is true, but oreilly might be up for it, especially since it's a format they already know and somewhat guarantees they'd be the first publisher to have a book

[20:06] <gaal> what about the author?

[20:07] <kungfuftr> i believe that the publisher gets nist if the rights

[20:07] <gaal> i mean, we can certainly start writing docs and tutorials

[20:07] <gaal> manpages

[20:07] <gaal> and you're free to write a book if you like

[20:07] <kungfuftr> heh

[20:24] *** Corion changes topic to: pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | FBSD_4.11:r1302(183/3383) win2k:r1324(187/3474) Linux:r1302(193/3383) MacOSX:r1197(105/3116)

[20:24] <Corion> Hmmm. OSX is falling behind :)

[20:24] <Corion> Should I promote the tests in unspecced/config.t from todo_is() to is() ?

[20:25] <gaal> if they pass :)

[20:26] <Corion> gaal: They pass, but it's uncharted country :)

[20:27] <gaal> that's why it's in unspecced...

[20:27] <jabbot> pugs - 1324 - -V: 'works now'

[20:27] <Corion> gaal: OK - I'll promote them then :)

[20:29] * Corion is amazed how far he gets with cargo-culting stuff

[20:31] <Corion> ... and I think I just had an idea how I can make the config parser work better and still keep the pattern matching of Haskell...

[20:31] <gaal> yay!

[20:33] <Corion> gaal: I think I'll first expand all clustering options (-dwl0e) and then regroup the stuff into nested arrays again, so I have [ [ "-e", fragment ], [ "-e", fragment2 ], ... ] which I can then sort with ease.

[20:33] <Corion> This will also make the -V: parsing less convoluted.

[20:33] <Corion> And all of this, just to get to -p and -n ...

[20:34] <gaal> Corion pwns

[20:34] <Corion> gaal: No - I'm just efficient at spotting stuff I copy-and-paste and where I then change a symbol to the symbol I need :)

[20:35] <theorbtwo> BTW, Corion: -I path/name/ does wierd things, last I looked.

[20:35] <Corion> theorbtwo: It's -I/path/name (no space)

[20:35] <Corion> theorbtwo: Err -Ipath/name (still no space)

[20:35] <Corion> theorbtwo: But a test case would be welcome ...

[20:36] <Corion> theorbtwo: Aaah - I think I should handle -I (nothing) as an error, then

[20:37] <Corion> Oh. Perl5 allows -I path/to/dir . So I should better allow that too. Feh. I hoped I could delay the move to my new schema. :(

[20:37] <Corion> First, let's add a (failing) test case :)

[20:37] <gaal> tdd++

[20:37] <gaal> say, does @_ include the invocant in method calls?

[20:38] <gaal> (i suppose so...)

[20:57] <jabbot> pugs - 1326 - -I path/to/dir does not work

[20:57] <jabbot> pugs - 1325 - Promoted t/unspecced/config.t from todo_

[20:57] <kungfuftr> gaal: =0)

[21:02] <Corion> Gah. These "Couldn't match `Char' against `String'" will be the death of me !

[21:02] <gaal> [[[[death]]]]

[21:02] <Corion> gaal: Indeed :)

[21:02] <Corion> But Haskell poetry has nothing on Perl poetry :)

[21:03] <gaal> yeah!

[21:05] <gaal> CATCH being inside the try takes getting used to.

[21:05] <Corion> Hah! Adding a judicious :[] makes Haskell understand what I mean :)

[21:06] <Corion> gaal: CATCH is inside try{} ? Ugh!

[21:06] <gaal> it's consistent. just not with other languages. :)

[21:07] <Corion> gaal: Its pattern matching takes some getting used to, yes - the last parameter always is a list. If you don't want that, specify a list after it :)

[21:09] <gaal> :)

[21:11] <gaal> in p5 /x-modified regexps, what's the idiomatic way to say "one space"? [ ] ? '\ ' ?

[21:13] <gaal> e.g. /this is an example of an unhappy regex/x

[21:13] <Corion> gaal: \s if you don't care, [ ] otherwise, I think.

[21:14] <gaal> i'll definitely use m:w in this particular p6 rx, then.

[21:14] <gaal> :)

[21:37] <gaal> does \0 mean NUL in a regexp like it did in p5?

[21:52] <nothingm1ch> http://nothingmuch.woobling.org/pugs_test_status is now updated automatically

[21:53] <gaal> nothinglikegoodolnicksmuch++

[21:53] * nothingm1ch is on the other comp =).

[21:54] <nothingm1ch> does vim know :TOhtml from the command line?

[21:54] <nothingm1ch> preferably to STDOUT?

[21:55] <gaal> yes, let me remember how

[21:55] <gaal> pass it the -c arg

[21:56] <gaal> don't remember if they chain. if so, vim -c :tohtml -c :q file

[21:56] <gaal> if not, you'll need a function, i guess

[21:57] <gaal> when i declare a method, is the first positional param always the invocant? or can i omit it if i don't nead it?

[21:57] <nothingm1ch> i think if it's omitted it goes somewhere special

[21:58] <nothingm1ch> i'm not sure where.

[21:58] <gaal> well, there's the debate over .meth and $_.meth and o.meth etc,

[21:58] <PerlJam> gaal: If you don't put a colon, then all of the required parameters are invocants.

[21:58] <gaal> er

[21:58] <gaal> no grok

[21:59] <nothingm1ch> to get what you asked for: sub foo (: $x, $y, $z)

[21:59] <nothingm1ch> invocant chucked

[21:59] <nothingm1ch> without the colon, $x, $y, $z are invocants

[21:59] <nothingm1ch> right, PerlJam?

[21:59] <gaal> hmm

[22:00] <gaal> that's not mentioned in t/Synopsis

[22:00] <gaal> i think

[22:01] <gaal> if i call my code like so somewhere in my class: $self.othermeth(1, 2)

[22:01] <gaal> and my othermeth is declared 'method othermeth($x, $y) { ... }

[22:01] <gaal> won't that silenty work?

[22:01] <PerlJam> nothingm1ch: um ... no, and yes.

[22:02] <PerlJam> method foo ($a,$b,$c)  { ... }  All of $a, $b, and $c are invocants.

[22:02] <PerlJam> method foo ($a: $b,$c) { ... }  Only $a is an invocant

[22:03] <PerlJam> or you can think of it as in the first case all of parameters participate in MMD determination, whereas in the second case, only the $a does.

[22:03] <gaal> PerlJam: and if i'm not doing mmd, and dont' need a 'this' in the method, what syntax would you recommend?

[22:04] <PerlJam> gaal: method foo ($a,$b,$c) { ... }

[22:05] <gaal> good :)

[22:06] <nothingm1ch> gaal: ideas for yaml harness:

[22:07] <nothingm1ch> it appends a whole YAML doc per run

[22:07] <nothingm1ch> to tests.yml

[22:07] <nothingm1ch> with only the revision

[22:07] <nothingm1ch> then you can run several tests at a time on SMP and you don't care

[22:07] <nothingm1ch> xargs -P

[22:07] <nothingm1ch> then we have pugs_info

[22:08] <nothingm1ch> which generates the big platform/r/-V yml

[22:08] <nothingm1ch> and smoke_report, which just posts the data to a webserver

[22:08] <nothingm1ch> the webserver reads the yml, and merges it

[22:08] <nothingm1ch> consolidation of results:

[22:09] <nothingm1ch> disagreement causes yellow

[22:09] <nothingm1ch> and onmouse over you see all reports

[22:09] <nothingm1ch> as platform: ok

[22:09] <nothingm1ch> .

[22:09] <nothingm1ch> if there is agreement, then there is agreement and we don't care

[22:10] <nothingm1ch> testgraph.pl will take in a slightly more complicated yml, of merged/sorted results

[22:10] <nothingm1ch> and someone will take care of generating that yml for it,

[22:10] <nothingm1ch> and that's it

[22:10] <nothingm1ch> good enough?

[22:12] <gaal> er, what manages contention against tests.yml?

[22:12] <nothingm1ch> some merge and sort script

[22:13] <nothingm1ch> either taking data in from sqlite, or from the ymls themselves

[22:13] <gaal> no, on the client side

[22:13] <nothingm1ch> ah

[22:13] <nothingm1ch> uhm

[22:13] <gaal> you can't just xargs -P and have everyone write to the same place

[22:13] <nothingm1ch> yes you can, you write for a short time

[22:13] <gaal> bleh :)

[22:13] <nothingm1ch> YAML probably has a lock mode

[22:14] <nothingm1ch> so it doesn't matter if locks block for a short while

[22:14] <gaal> well, okay.

[22:14] <gaal> (sorry i'm slow, i'm also just ciing something)

[22:14] <nothingm1ch> hmm, it doesn't

[22:14] <nothingm1ch> well, maybe ingy is nice enough to add that ;-)

[22:15] <gaal> i was just about to suggest that

[22:15] <nothingm1ch> either way, you can just flock

[22:15] <gaal> sure

[22:15] <gaal> ok

[22:15] <nothingm1ch> do what parts do you want to cover?

[22:15] <nothingm1ch> what parts do you want to leave to me?

[22:15] <nothingm1ch> and what should we spill on stevan?

[22:15] <gaal> i can do everything on the client side no problem

[22:16] <nothingm1ch> including http post?

[22:16] <gaal> it's a fair organization

[22:16] <nothingm1ch> we just have to agree on a URL

[22:16] <gaal> sure, why not

[22:16] <nothingm1ch> ok

[22:16] <nothingm1ch> pugs.woobling.org/smoke

[22:16] <nothingm1ch> it just uploads tests.yml, with normal cgi file upload wizardry

[22:17] <gaal> yeah, that's easy enough.

[22:17] <Limbic_Region> did autrijus forget to journal today?

[22:17] <gaal> i think the man deserves some sleep :)

[22:17] <gaal> you know, once a month

[22:17] <gaal> they say it's healthy

[22:18] <gaal> how do i un-svn-add a file?

[22:18] <nothingm1ch> svn revert?

[22:18] <gaal> (i didn't ci it yet)

[22:18] <nothingm1ch> exactly

[22:18] <nothingm1ch> svn revert tosses on ci'd changes

[22:18] <nothingm1ch> i'm guessing

[22:18] <gaal> yes, that workd. thanks :)

[22:19] <gaal> worked

[22:19] <gaal> i need sleep :)

[22:19] * Limbic_Region wasn't complaining - just inquiring

[22:19] <Limbic_Region> actually it was a concern for his lack of sleep that prompted the question - 

[22:19] <gaal> oh, i was kidding, mean :)

[22:19] <gaal> man

[22:19] <gaal> i can't type

[22:20] <Limbic_Region> as in - is he still up and just hasn't yet

[22:20] <gaal> esp when i'm asleep

[22:20] <Limbic_Region> no worries

[22:22] <gaal> ++ports; please review if you can. i'm off to bed

[22:22] <nothingm1ch> ciao

[22:23] <kungfuftr> gaal: merlyn++

[22:23] <gaal> kff: ? merlyn++ indeed but why do you mention it?

[22:24] <kungfuftr> gaal: llama book stuff

[22:25] <gaal> oh yes

[22:25] <gaal> i didn't learn from it, but i taught with it :)

[22:26] <kungfuftr> gaal: depending on confirmation with publisher... a companion guide fer perl6 is well possible... =0)

[22:27] <gaal> i'm sure, but it sounds to me like it's merlyn's job to write merlyn's books (actually, tom phoenix coauthored ed. 3 iirc)

[22:28] <gaal> anyway, i

[22:28] <gaal> 'm outtahere. night!

[22:28] <kungfuftr> yar, but that won't happen for a long while

[22:28] * gaal &

[22:28] <theorb> G'night, gaal.

[22:30] <nothingm1ch> ciao gaal 

[22:31] * nothingm1ch is not sure whether to leave the test reporting on his osx or linux box for now

[22:32] *** theorb is now known as theorbtwo

[22:33] <theorbtwo> Why not both?

[22:34] <theorbtwo> (BTW, discovered the obvious the other day: diffing two test run yaml files produces rather readable results.)

[22:35] <nothingm1ch> theorbtwo: because it isn't consolidated yet

[22:35] <nothingm1ch> human readable data is very good

[22:35] <nothingm1ch> lots of tools made to eat it over the years

[22:35] <nothingm1ch> diff, less, wc, grep, awk, sed

[22:36] <theorbtwo> Tools for eating human-readable data tend to be named with an initial capital...

[22:36] <nothingm1ch> ?

[22:36] <theorbtwo> James, Bob, Frank, Jess, Yuval, Autrijus...

[22:36] <nothingm1ch> ah

[22:37] <nothingm1ch> heh

[22:37] <jabbot> pugs - 1328 - Comment out STDERR prints

[22:37] <jabbot> pugs - 1327 - Perl6 port of Cache::Memcached

[22:38] <nothingm1ch> theorbtwo: think you can handle pod->html escaping madness, and folding of <code> in the synopses?

[22:38] <crysflame> memcache perl6?!

[22:39] * crysflame cheers

[22:39] <nothingm1ch> L<foo/"blah C<for> ding"> does not resolve

[22:39] <nothingm1ch> folding of <code> should also be done for reexes

[22:39] <nothingm1ch> but it's a bit tricky

[22:48] <theorbtwo> Nice use of the scalar ... operator.

[22:51] * nothingm1ch loves scalar .. and ...

[22:53] <nothingm1ch> i also couldn't manage to wrangle Text::VimColors

[22:53] <nothingm1ch> i'll try to run :TOhtml myself

[22:53] <nothingm1ch> since it's smarter

[22:53] <nothingm1ch> optionally, ofcourse

[22:53] <nothingm1ch> anyway, good night

[22:57] <jabbot> pugs - 1329 - oops, accidentally removed line

[22:57] <crysflame> can jabbot tell us who committed?

[22:57] <Darren_Duncan> question: anyone know what the semantic difference is between 'my $foo ::= 1;' and 'my $foo is constant = 1;' -- I'm using the former when declaring constants and wondering if I should use the latter instead

[22:58] <theorbtwo> Suggestions for improvements to jabbot should go to gugod.

[22:59] <crysflame> ok

[23:05] <Darren_Duncan> the reason I used '::=' for constants was because '::=' did compile-time binding and so thought that if the bound value was a literal, then the container on the left was effectively a constant declaration

[23:06] <Darren_Duncan> If they do mean the same thing, which one is easier to understand, the shorter or longer one

[23:06] <Darren_Duncan> all ?

[23:06] <theorbtwo> I'd say the longer one is easier to understand.

[23:07] <Darren_Duncan> thanks for one answer

[23:07] <Darren_Duncan> also, many of my constants are hashes of hashes of hashes etc ...

[23:07] <Darren_Duncan> would declaring the root 'is constant' mean that all sub-elements can't be modified too?  this is the desired effect

[23:07] <theorbtwo> I'm not sure.

[23:08] <Darren_Duncan> in any event, I'll convert to 'is constant' for readability

[23:08] <Darren_Duncan> (at the time I used '::=', I forgot that 'is constant' existed)

[23:13] <kungfuftr> you can also `constant $PI = 3.142;`

[23:14] <kungfuftr> iirc

[23:14] <Darren_Duncan> thanks kungfuftr, thats even better

[23:14] <Darren_Duncan> right now I'm looking for the synopsis that talks about this stuff ... started in S02

[23:14] <kungfuftr> you should read Perl 6 and Parrot essentials at some point... slightly neater format than the synopses

[23:15] <Darren_Duncan> I thought those were out of date

[23:15] <kungfuftr> yeah, bulk of it is correct though

[23:15] <Darren_Duncan> in any event, while I want one for each year, I only have the first edition, currently

[23:16] <kungfuftr> but if you think about it... `my Int $foo = blah;` so constant $foo seems reasonable to have a variable of 'constant' datatype

[23:16] <Darren_Duncan> now looking in A12

[23:16] <kungfuftr> anyways

[23:16] <Darren_Duncan> I mean S12

[23:21] * theorbtwo tunes out for a bit.

[23:27] <jabbot> pugs - 1330 - Reorder some text

[23:33] <Darren_Duncan> okay, change committed ... all '::=' changed to 'is constant =' in my modules ... seems every other module already does 'is constant'

[23:37] <jabbot> pugs - 1331 - constants declarations in LKT and SRT al

