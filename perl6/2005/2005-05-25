[00:01] <clkao> it's killing

[00:01] <svnbot6> r3839, autrijus++ | * unbreak again

[00:01] <autrijus> I need to get xsinit done

[00:01] <autrijus> otherwise the perl5 part doesn't have dynaloader

[00:01] <clkao> hang on

[00:01] <clkao> wrong macro

[00:01] <autrijus> and how much fun we can have without dynaloader? not much.

[00:02] <clkao> mine is Perl_eval_pv of course.

[00:02] <autrijus> !

[00:02] <autrijus> why?

[00:02] <clkao> what why what?

[00:02] <clkao> you didn't have proper macro included

[00:02] <autrijus> so in proto

[00:02] <autrijus> proto.h:565:PERL_CALLCONV SV*   Perl_eval_pv(pTHX_ const char* p, I32 croak_on_error);

[00:03] <autrijus> what's this PERL_CALLCONV?

[00:04] <clkao> doesn't mater

[00:05] <autrijus> ok, fixed

[00:05] <clkao> how?

[00:05] <clkao> Perl_

[00:05] <clkao> there should be proper macro

[00:05] <clkao> you need to include embed.h

[00:06] <clkao> does all the magic. otherwise something might not work

[00:06] <japhy> hey, rules question for anyone who can answer

[00:06] <svnbot6> r3840, autrijus++ | * change to Perl_eval_pv

[00:06] <japhy> m:foo{arg}/ rules... / is perfectly valid syntax

[00:06] <autrijus> ok, included it

[00:06] <japhy> it passes the closure {arg} to the user-defined modifier 'foo'

[00:07] <clkao> $ ab -clkao- [~/work/pugs] ./pugs -e 'say eval_perl5("1")'

[00:07] <clkao> /libexec/ld-elf.so.1: Shared object "libperl.so" not found, required by "pugs"

[00:07] <japhy> therefore, you'd have to write ->   m:w {...}

[00:07] <japhy> instead of m:w{...} correct?

[00:07] <japhy> because the lack of whitespace makes the {...} denote a closure, as an argument to :w, right?

[00:07] <clkao> you are not using ExtUtils::Embed

[00:08] <autrijus> clkao: no I'm not... because the linking options to perl is not grokked by ghc

[00:08] <autrijus> need the same sanitising thing jhorwitz did in Makefile.PL

[00:08] <autrijus> for parrot-config

[00:08] <clkao> hate

[00:08] <autrijus> I did say that.

[00:08] <clkao> you do want -Wl,-R/usr/local/lib/perl5/5.8.5/mach/CORE -Wl,-E 

[00:09] <mrborisguy> japhy: that sounds reasonable

[00:09] <autrijus> I'm getting segfaults. fun

[00:09] <autrijus> clkao: can you link libperl.so linked somehow?

[00:09] <autrijus> ./inc/Module/Install/Pugs.pm:<    $ghc_flags .= " -I$Config{archlib}/CORE -L$Config{archlib}/CORE -i$Config{archlib}/CORE -lperl"

[00:10] <autrijus> that line is the magic

[00:10] <japhy> boris - ok.

[00:10] <japhy> then that's a typo in syn05 ;)

[00:10] <clkao> which is not understood by ghc:

[00:10] <clkao>   -Wl,-R/usr/local/lib/perl5/5.8.5/mach/CORE -Wl,-E  -L/usr/local/lib /usr/local/lib/perl5/5.8.5/mach/auto/DynaLoader/DynaLoader.a -L/usr/local/lib/perl5/5.8.5/mach/CORE -lperl -lm -lcrypt -lutil -lc

[00:10] <mrborisguy> i sure wish somebody who knew something would pipe up about it though!

[00:10] <japhy> syn05 also doesn't clarify syntax for character classes.  at least, it's not thorough

[00:11] <mrborisguy> 'cause japhy, i really don't know... i think i've skimmed syn05 maybe twice at most

[00:11] <japhy> boris - very soon I'll have a listing of all rule tokens on p6l for learned people to pore over

[00:11] <mrborisguy> that'd be good

[00:12] <mrborisguy> where are you going to post it?

[00:12] <japhy> japhy.perlmonk.org/rules.txt, and then inform perl6-language of it

[00:13] <japhy> maybe add a perl6 directory there.

[00:13] <japhy> that'd make sense.

[00:13] <mrborisguy> a'ight, i'll be sure to watch for it

[00:13] <japhy> I think I'm done looking over apo5 and syn5, so it'll probably be posted in an hour or so

[00:13] <autrijus> clkao: set libperl.so to your LD_LIBRARY_PATH

[00:13] <autrijus> clkao: or ln it to /usr/local/lib

[00:13] <autrijus> (For now)

[00:14] <clkao> i know P

[00:23] <clkao> autrijus: now invoking anything returns 'Alarm clock' and then exit

[00:23] <svnbot6> r3841, clkao++ | Give proper ldopts to perl5 embed from ExtUtils::Embed.

[00:25] <japhy> ok, email has been sent to p6l.

[00:25] <japhy> time to screw around for the rest of the night

[00:25] <japhy> g'night all

[00:25] <mrborisguy> g'night

[00:34] <svnbot6> r3842, clkao++ | ccopts breaks the build.

[00:37] <clkao> dear autrijus, eval_perl65 always returns 1

[00:38] <clkao>  

[00:41] <autrijus> clkao: your change broke my build

[00:41] <autrijus> /tmp/ghc36081.hc:6:20: EXTERN.h: No such file or directory

[00:41] <autrijus> /tmp/ghc36081.hc:7:18: perl.h: No such file or directory

[00:41] <autrijus> the -Wl,-R is not enough to make ghc see -L

[00:42] <clkao> gah. still need ccopts

[00:42] <autrijus> you need to filter it

[00:42] <autrijus> see Makefile.PL for how

[00:42] <autrijus> oh you already saw

[00:43] <clkao> no i iddn't.. i just do it my way

[00:43] <clkao> ha

[00:43] <clkao> btw

[00:43] <autrijus> heh

[00:43] <clkao> eval_perl5 ("print 1") doesn't work

[00:43] <autrijus> I'm fixing the eval prototpye and xsinit

[00:43] <autrijus> try "warn 1"

[00:43] <autrijus> it worksforme

[00:43] <clkao> i'm confused. it worked again with ccopts

[00:44] <autrijus> it worksforme too

[00:44] <autrijus> what did you see?

[00:44] <mrborisguy> are you guys trying to make it so perl5 code can be included?

[00:44] <autrijus> some phantom thing?

[00:44] <clkao> no nothing

[00:44] <mrborisguy> will that mean i can include perl5 modules?

[00:45] <clkao> eval_perl5('sfaksfl;');

[00:45] <clkao> this returns 1 :)

[00:45] <autrijus> mrborisguy: yes

[00:45] <autrijus> mrborisguy: use DBI; # loads the p5 DBI if p6's DBI is not in path

[00:46] <autrijus> that's the idea.

[00:46] <autrijus> I think it's worth it.

[00:46] <mrborisguy> oh, i think it's incredibly worth it!

[00:46] <mrborisguy> p5 modules are the only reason i'm writing my current program in p5

[00:46] <autrijus> you speak for all of us CPAN authors :)

[00:47] <clkao> autrijus: ok, here's what i want

[00:48] * autrijus gets to port PAR's myldr/* to Haskell! fun!

[00:50] <clkao> autrijus: can you make embed.perl5's eval_perl5 not calling eval_pv ectly

[00:50] <clkao> but call to something like perl5_eval_pv, which is some c file hooked to the build system

[00:50] <autrijus> sure thing

[00:50] <clkao> then i can do s interesting stuff

[00:50] <autrijus> sure

[00:50] <clkao> (of course perl5_eval_pv is a stu calling evaL-pv for now

[00:51] <autrijus> let's call it pugs_perl5_eval() for now?

[00:51] <clkao> sure.

[00:51] <clkao> make it a c file

[00:51] <clkao> src/Pugs/Embed/Perl5.o(.text+0x12c): In function `r2HZ_info':

[00:51] <clkao> : undefined reference to `boot_DynaLoader'

[00:51] <svnbot6> r3843, autrijus++ | * init dynaloader; add ccopts back.

[00:51] <clkao> hate

[00:51] <autrijus> clkao: you need ccopts

[00:51] <autrijus> that will add back Dynaloader.a

[00:51] <autrijus> which is neccessary

[00:51] <autrijus> i.e. /usr/local/lib/perl5/5.8.6/mach/auto/DynaLoader/DynaLoader.a

[00:51] <clkao> you are not including embed.h

[00:51] <clkao> i have it.

[00:52] <clkao> it was a 'g' merge

[00:52] <autrijus> ok, add embed.h and commit then

[00:52] <clkao> i rerun makefile.pl

[00:52] <autrijus> ok. you are correct, we need a src/perl65/

[00:52] <autrijus> re

[00:52] <autrijus> src/perl5/

[00:52] <autrijus> just like how syck is dealt

[00:52] <autrijus> all C wrappers go there

[00:54] <clkao> ok. just make ithooke to the build system so i can play with

[00:55] <clkao> {-# INCLUDE <embed.h> #-}

[00:55] <clkao> this is not comment no?

[00:56] <clkao> p

[00:57] <autrijus> I'm fixing build system

[00:57] <autrijus> no it's not comment.

[00:58] <clkao> bah. it doesn't work. macro not resoled

[01:02] <clkao> commit is bloody slow

[01:02] <svnbot6> r3844, clkao++ | Make newXS work.

[01:06] <clkao> great, now i have Alarm clock again

[01:07] <autrijus> I'm fixing build system ;)

[01:08] <ijoyce_laptop> where do the parrot folks irc at?

[01:08] <autrijus> irc.perl.org

[01:09] <ijoyce_laptop> thanks

[01:09] <autrijus> $ ./pugs -e 'eval_perl5 "use DBI; print DBI->VERSION"'

[01:09] <autrijus> 1.48

[01:09] <autrijus> please tell me you're happy

[01:10] <ijoyce_laptop> fan-tastic

[01:10] <autrijus> ok. now onto marshalling so that eval_perl5 can return something :)

[01:10] <autrijus> btw, is it considered sane that under embed perl5, when pugs se

[01:10] <autrijus> see

[01:10] <autrijus> use DBI;

[01:10] <autrijus> it search for perl5 when perl6 DBI.pm is not found?

[01:11] <autrijus> i.e. we don't have another

[01:11] <autrijus> use_p5 DBI;

[01:11] <clkao> i think for now making it explicit is better

[01:11] <ijoyce_laptop> use p5DBI;

[01:11] <ijoyce_laptop> use p5:DBI;

[01:11] <autrijus> require_perl5('DBI');

[01:11] <autrijus> require_perl5('DBI.pm');

[01:12] <autrijus> that actually makes sense. I mean the .pm-less form

[01:12] <autrijus> I hate the path munging anyway

[01:12] <autrijus> so jusr module name

[01:13] <obra> just magically falling back to perl5 seems very nice for migration

[01:13] <clkao> now put eval_pv in c

[01:13] <autrijus> yeah, but it has this burden

[01:13] <svnbot6> r3845, autrijus++ | * src/perl5/ for perl5 wrappers

[01:13] <svnbot6> r3846, autrijus++ | * dynaloader build infrastructure landed

[01:13] <autrijus> of having CGI.pm6 shadowing of CGI.pm5

[01:13] <obra> actually, i wonder if there's a way to use the perl6 module path naming to make it clean

[01:13] <autrijus> and people will expect compat

[01:13] <autrijus> obra: good idea!

[01:13] <ijoyce_laptop> falling back without notice could cause fun debugging sessions

[01:13] <autrijus> use DBI-(Any)-Perl5;

[01:13] <autrijus> use DBI--Perl5;

[01:14] <autrijus> is that the idea?

[01:14] * obra nods

[01:14] <autrijus> use DBI-1.40-Perl5;

[01:14] <autrijus> that does make the "Perl5" thing magical tho

[01:14] <autrijus> whereas it's supposed to be uri

[01:14] <ijoyce_laptop> bridge DBI;

[01:14] <obra> it's supposed to be a URI? really

[01:14] <obra> ?

[01:14] <autrijus> I think. check the syns?

[01:14] <obra> wait. perl6 won't let me put a coderef in @INC?

[01:15] <autrijus> er, I don't know

[01:15] <obra> in the middle of a kwiki upgrade. it'll take a while

[01:15] <autrijus> I'm not sure I care

[01:15] <obra> so. if you can put a coderef in @INC, then you could make -Perl5 magic in a sane way

[01:15] <autrijus> clkao: you can put eval_pv in c :)

[01:15] <autrijus> clkao: I'll write the neccessary FFI in Perl.hs

[01:15] <autrijus> clkao: just write perl5_eval

[01:15] <autrijus> whatever way you like it to be

[01:15] <autrijus> in src/perl5/perl5.c

[01:15] <clkao> i'm still building

[01:15] <autrijus> (and .h)

[01:16] <obra> does that make sense?

[01:16] <autrijus> obra: fwiw that doesn't quite make sense to me

[01:16] <autrijus> obra: we are in a separate compilatino system.

[01:16] <autrijus> it's no longer scripting :)

[01:16] <autrijus> need to handle pugscc

[01:16] <clkao> cc

[01:17] <autrijus> let me do this typespace magic first. sec

[01:17] <autrijus> I believe I can get it to work.

[01:17] <autrijus> clkao++ # reduced trial-and-error by 100%

[01:17] * obra nods

[01:18] <clkao> what trial and error?

[01:18] <clkao> you mean all this briding

[01:18] <autrijus> clkao: getting the right embedding scheme figured out

[01:18] <clkao> ?

[01:18] <autrijus> right

[01:18] <clkao> :)

[01:19] <autrijus> I mean PAR's use case doesn't involve any marshal

[01:19] <autrijus> it's purely perl5-to-perl5

[01:19] <autrijus> and MzScheme's C part is too light

[01:19] <autrijus> so I'm clueless about how to get two way bridging to work

[01:20] <autrijus> clkao: here's a thought.

[01:20] <autrijus> all perl5 values are SV right?

[01:20] <autrijus> how about I make SV a native Pugs type?

[01:20] <clkao> if that helps for ffi callbacks

[01:20] <autrijus> I think it makes ~total sense

[01:20] <autrijus> because then I can do introspection

[01:21] <clkao> now

[01:21] <autrijus> on haskell side

[01:21] <clkao> foreign import ccall "perl5.h perl5_eval_pv"

[01:21] <clkao>     perl5_eval_pv :: CString -> Word32 -> IO ()

[01:21] <clkao> what should this return?

[01:21] <autrijus> () is void

[01:21] <autrijus> you can change its return type by changing ()

[01:21] <autrijus> I'm thinking having it retugning a Perl5SV

[01:21] <autrijus> is the best bet

[01:21] <autrijus> or just P5SV

[01:22] <autrijus> and then I can make it a first-class Val

[01:22] <clkao> ok... where to declare?

[01:22] <obra> autrijus: URI identifying the author (or

[01:22] <obra>        authorizing authority).

[01:22] <clkao> or you do that 

[01:22] <kelan> hmm. irc'ing with gaim

[01:22] <autrijus> I'll do that now

[01:22] <autrijus> then I'll make the SV stringify and numifyable

[01:22] <autrijus> that instantly solve marshalling for simple cases.

[01:22] <autrijus> then we move to SvHV and SvRV.

[01:23] <obra> . o O {   use DBI-1.40-perl5:/usr/bin/perl }

[01:23] <autrijus> use DBI-1.40-perl5;

[01:23] <obra> some sort of degenerate internal URI scheme seems not insane

[01:23] <autrijus> I think that works best.

[01:23] <svnbot6> r3847, autrijus++ | * require_perl5

[01:23] <obra> sure

[01:23] <obra> I actually like that

[01:23] <autrijus> then that is that.

[01:23] <obra> will there be a perl5 interpreter compiled in or just on the fly bound?

[01:24] <clkao> let's sort the internals out first

[01:25] <clkao> i have a simple wrapper

[01:25] <autrijus> clkao: PerlSV type is in

[01:25] <autrijus> obra: compiled in

[01:25] <autrijus> obra: we can't quite do on the fly bound without a NCI

[01:25] <autrijus> obra: clkao's layer is in pure C

[01:25] <autrijus> so future NCI can target that

[01:26] <autrijus> so it's not haskellish :)

[01:27] * obra nods

[01:27] <obra> Oh god. the new kwiki antispam is so much better

[01:31] <clkao> autrijus: ./pugs -e 'eval_perl5 ("print 1")'

[01:31] <svnbot6> r3848, autrijus++ | * PerlSV type for clkao.

[01:31] <svnbot6> r3849, autrijus++ | * add back boot_DynaLoader

[01:31] <clkao> this still doesn't work for me

[01:32] <autrijus> what's the werr? alarm?

[01:32] <clkao> nothing

[01:32] <autrijus> $ ./pugs -e 'say require_perl5 "DBI"'

[01:33] <autrijus> pugs: cannot cast from PerlSV 0x084464f4 to [Char]

[01:33] <clkao> ./pugs -e 'say eval_perl5 ("print 2")'

[01:33] <autrijus> yay! I'm only one step till done!

[01:33] <clkao> this printgs 1

[01:33] <autrijus> clkao: try trunk

[01:33] <autrijus> let me finish simple marshalling

[01:34] <clkao> ?? i am using trunk

[01:34] <autrijus> committing

[01:34] <autrijus> r3850

[01:35] <clkao> it's the print isn't got run

[01:35] <clkao> btw i have unspecced/p5/basic.t

[01:38] <clkao> laptop gets soooo hot

[01:38] <svnbot6> r3850, autrijus++ | * PerlSV is now a native Pugs type.

[01:38] <autrijus> cool

[01:38] <autrijus> try using warn

[01:38] <clkao> same

[01:38] <autrijus> then you're borked.

[01:39] <autrijus> probably initperl5 didn't get run

[01:39] <autrijus> trace it at perl5.c level?

[01:39] <clkao> fsck

[01:39] <autrijus> it works fine here btw.

[01:39] <autrijus> you can write perl5.c without running it I'm sure, too

[01:39] <clkao> pugs: cannot cast from PerlSV () to [Char]

[01:39] <clkao> ha

[01:39] <clkao> coool

[01:41] <autrijus> I've done the casting

[01:42] <clkao> no it's not called

[01:42] <clkao> what should i do?

[01:43] <autrijus> committing

[01:44] * sproingie swears up and down

[01:45] <sproingie> i swear, windows BOOTS faster than it responds to a damn delete keypress in explorer

[01:45] <clkao> autrijus: i put a fprintf in perl5_init.. not called 

[01:46] <autrijus> clkao: look at pugsconfig

[01:46] <autrijus> src/pugs_config.h

[01:46] <autrijus> make sure perl5 is defined

[01:46] <clkao> #undef PUGS_EMBED_PERL5

[01:46] <clkao> !*%#%

[01:46] <autrijus> ...

[01:47] <autrijus> !$#!$

[01:47] <autrijus> you did run makefile.pl one without the env right? ;)

[01:47] <autrijus> fix the config bah

[01:47] <clkao> it doesn't regen

[01:47] <clkao> ?

[01:47] <clkao> i did run it with the env

[01:47] <clkao> and i even make clean

[01:47] <autrijus> $ ./pugs -e 'say eval_perl5 "use DBI; DBI->VERSION"'

[01:47] <autrijus> 1.48

[01:48] <clkao> still the same :(

[01:49] <autrijus> hm? rm src/Pugs/Embed/Perl5.{o,hi}

[01:49] <autrijus> then make again

[01:49] <svnbot6> r3851, clkao++ | Basic tests for eval_perl5.

[01:49] <clkao> does the test pass for you now?

[01:49] <autrijus> 1..3

[01:49] <autrijus> ok 1 - number

[01:49] <autrijus> ok 2 - number

[01:49] <autrijus> Can't locate object method "perl6" via package "now" (perhaps you forgot to load "now"?) at (eval 4) line 1.

[01:50] <clkao> hahaha

[01:50] <autrijus> heh bad test

[01:50] <clkao> fix that

[01:50] <clkao> more quotes

[01:50] <autrijus> all pass!

[01:50] <autrijus> done

[01:50] <autrijus> amazing how fast we did this

[01:50] <autrijus> now moving to handle the "use" syntax and namespace numbing

[01:50] <clkao> :))

[01:52] <clkao> alarm clock for me again

[01:53] <clkao> right after perl5_init

[01:54] <autrijus> hrm.

[01:54] <svnbot6> r3852, autrijus++ | * SV stringification!

[01:54] <svnbot6> r3853, autrijus++ | * bad test

[01:54] <autrijus> I can't duplicate it at all

[01:55] <clkao> it's after perl5_init finsihes

[01:56] <clkao>  50929 pugs     PSIG  SIGALRM caught handler=0x82dd588 mask=0x0 code=0x0 50929 pugs     PSIG  SIGALRM caught handler=0x82dd588 mask=0x0 code=0x0

[02:01] <clkao> maybe it's becaues ghc is threaded but my perl5 isn't

[02:03] <autrijus> ah. that can be it

[02:03] <autrijus> you can remove -thread and try

[02:04] <autrijus> ok, "use" parsed

[02:04] <autrijus> class space initialised

[02:04] <clkao> WORKS

[02:04] <clkao> initialzied as?

[02:05] <clkao> you need a magic object for class method

[02:05] <autrijus> I did

[02:05] <autrijus> and yes I'm doing that

[02:08] <eric256> after reading the "Why aren't you using Perl6 yet?" post it seems that most people either don't understand pugs or are perfectly happy to let other people write the next progamming language for them....odd and slightly disheartening. until i joined pugs development i though perlmonks was pretty cutting edge and moving forward...now they seem like cavemen who run from the burning stick. ;)

[02:10] <autrijus> eric256: heh, no, it's perfectly reasonable to expect something usable in production before using it

[02:11] <autrijus> ok, now we need AUTOMETH.

[02:12] <eric256> i suppose before using it in production.  just seems like lots of people expect perl6 to materialize out of then air...i don't realy have the time for it, and all there reasons apply to me as well. but perl6 has enough new amazing features that i'd like to do whatever possible to help get it here now! lol. dinner either way.

[02:12] <eric256> later

[02:12] <clkao> why isn't freebsd building threaded perl by default?

[02:12] <autrijus> clkao: no idea

[02:14] <eric256> autrijus++ for pugs!

[02:14] <svnbot6> r3854, autrijus++ | * parse for `use DBI-1.40-Perl5`

[02:14] <svnbot6> r3855, clkao++ | Disable threads when embedding non-threaded perl5.

[02:14] <clkao> autrijus: so i guess what you will do is make sv convertable to obj that can invoke method. 

[02:15] <eric256> just thought i would throw that in there in case it wasn't assumed already ;)

[02:15] <clkao> and then you forge an object and link the invocation to perl5_call.. then i can take over (or you are not tired yet and want to see if c is adorable again :)

[02:15] <clkao> for now i am going to sleep

[02:17] <autrijus> enjoy

[02:17] <autrijus> I've already got the obj autoload done.

[02:17] <autrijus> I can now invoke arbitary p5sv's methods.

[02:17] <clkao> coooool

[02:17] <autrijus> the other way is gonna be harder.

[02:18] <clkao> if you can make some easier way to create pugs objects from c ..

[02:18] <clkao> anything better than eval

[02:19] <autrijus> trying to think if that makes sense actually

[02:19] <autrijus> I can export a seriest of casters

[02:19] <autrijus> int -> pugsval

[02:19] <autrijus> char* -> pugsval

[02:19] <autrijus> will that help?

[02:20] <clkao> hang on.

[02:20] <clkao> i just give you sv and it turns to pugsval

[02:25] <autrijus> to avoid class clash I'll use scalar space for now

[02:25] <autrijus> i.e. $DBI

[02:25] <autrijus> $*DBI actually

[02:26] <clkao> i take it's an SV pv ?

[02:26] <clkao> commit!

[02:28] <autrijus> committing

[02:28] <autrijus> * Full PerlSV object reification in Pugs space.

[02:28] <autrijus> r3856.

[02:29] <autrijus> $ ./pugs -e 'use DBI-1.41-Perl5; say $DBI.VERSION'

[02:29] <autrijus> *** Unimplemented unaryOp: Scalar::Perl5::AUTOLOAD at -e line 1, column 25-37

[02:29] <autrijus> fun not?

[02:29] <autrijus> now how do I implement that ;)

[02:30] <autrijus> need your callconv!

[02:30] <clkao> make it call perl5_call

[02:30] <autrijus> perl5_call (SV *sv, char *methname, SV**args)

[02:30] <clkao> make a stub entry to return "ping clkao"

[02:30] <autrijus> can we have that?

[02:30] <svnbot6> r3856, autrijus++ | * Full PerlSV object reification in Pugs space.

[02:30] <clkao> wtf SV**args?

[02:30] <autrijus> $DBI.foo($DBI, $DBI)

[02:31] <autrijus> or rather, just

[02:31] <clkao> AV *args?

[02:31] <autrijus> perl5_call(char *subname, SV**args)

[02:31] <autrijus> why AV? AV is a SV you know

[02:31] <autrijus> perl5_call(char *subname, int argc, SV**args)

[02:31] <autrijus> that make sense?

[02:31] <autrijus> that's easiest to me

[02:32] <autrijus> can you manufacture that? just push args to stack

[02:32] <autrijus> and call_pv subname

[02:32] <clkao> sure

[02:32] <autrijus> easy as pie

[02:33] <autrijus> k, please do that, I'll do haskell side

[02:33] <clkao> but i need to sleep now

[02:33] <clkao> make a stub!

[02:33] <autrijus> aww.

[02:33] <clkao> and a failed test

[02:33] <autrijus> nah. I'll just implement that ;)

[02:33] <clkao> bwah

[02:33] * autrijus is having too much fun to stop

[02:33] <clkao> don't take away my fun!

[02:33] <autrijus> ok ok ;)

[02:33] <clkao> actually you want a flag for CALL_METHOD or CALL_PV

[02:34] <clkao> call_pv ('VERSION', 'DBI') won't properly resolv

[02:34] <autrijus> I know. I'll use call_method

[02:34] <autrijus> with G_SCALAR

[02:35] <autrijus> <- actually read EaEP

[02:37] <autrijus> done 

[02:38] <autrijus> give it a sanity review if you can

[02:38] <autrijus> r3857

[02:38] <clkao> i will do a quick review

[02:39] <autrijus> foreign import ccall "perl5.h perl5_call" perl5_call :: CString -> CInt -> Ptr PerlSV -> IO PerlSV

[02:39] <autrijus> FFI++ # too easy!

[02:39] <clkao> refcount on POPi ?

[02:39] <clkao> er POPs i mean

[02:39] <autrijus> dunno how to do that properly

[02:40] <autrijus> _inc?

[02:40] <autrijus> please just fix away

[02:40] <clkao> can wait till a failed test :)

[02:41] <clkao> return sv not char*

[02:41] <autrijus> k.

[02:41] <autrijus> ah right.

[02:42] <autrijus> please fix away

[02:42] <autrijus> <- is already in haskell side

[02:43] * clkao -> sleep

[02:43] <svnbot6> r3857, autrijus++ | * add perl5 callconv

[02:46] <autrijus> ok. callconv passed. now linking to autoload

[02:46] <autrijus> will it work?

[02:48] <clkao> people must be curious

[02:48] <svnbot6> r3858, clkao++ | call returns SV *, not char *.

[02:49] <autrijus> it compiles...

[02:49] <autrijus> (ship it!)

[02:49] <clkao> ship it!

[02:49] <clkao> i mean, commit it XD

[02:51] <autrijus> committing

[02:52] <autrijus> ah. callconv need SPAGAIN

[02:52] <autrijus> fixing

[02:52] <eric256> what are you guys working on?

[02:52] <autrijus> eric256: use DBI from perl6

[02:52] <autrijus> we're very close.

[02:53] <eric256> all perl5 modules? or are you just focusing on DBI? i would guess getting it to work would get others to work

[02:53] <svnbot6> r3859, autrijus++ | * AUTOLOAD now links to callconv

[02:53] <autrijus> all perl5 modules.

[02:57] <autrijus> $ ./pugs -e 'use DBI-0.01-Perl5; say $DBI.VERSION'

[02:57] <autrijus> 1.48

[02:57] <autrijus> WE DID IT!

[02:57] <jql> impressive

[02:57] <autrijus> $ ./pugs -e 'use CGI-0.01-Perl5; say $CGI.header'

[02:57] <autrijus> Content-Type: text/html

[02:58] <clkao> :)

[02:59] <mrborisguy> YEAH!!!!

[02:59] <svnbot6> r3860, autrijus++ | * callconv fixed.

[02:59] * mrborisguy rejoices

[02:59] <autrijus> moving to typespace!

[03:01] * eric256 starts a new build

[03:05] <obra>  autrijus noce

[03:05] <obra> nice

[03:06] <autrijus> :)

[03:07] <Khisanth> you have libperl linked into pugs?

[03:08] <autrijus> yes.

[03:08] <autrijus> this time with dynaloader.

[03:08] <clkao> fix my test and you rule

[03:09] * clkao really tries to sleep

[03:11] <autrijus> typespace populated. filling in metaobj

[03:11] <svnbot6> r3861, clkao++ | Tests for p5 method calls.

[03:11] <autrijus> $ ./pugs -e 'use CGI-0.01-Perl5; say CGI.header'

[03:11] <autrijus> Content-Type: text/html

[03:20] <svnbot6> r3862, autrijus++ | * type space populated!

[03:31] <Khisanth> hrm

[03:31] <Khisanth> so pugs just acquired all of CPAN

[03:32] <jql> theives

[03:32] <Khisanth> hostile takeover :)

[03:32] <autrijus> ./pugs -e 'use Digest-0-perl5; my $md5 = Digest.MD5; $md5.add("Pugs!"); say $md5.hexdigest'

[03:32] <autrijus> f08bcb32d6eea3d3c9ec2f924ce33067

[03:33] <mrborisguy> i'm loving it!

[03:33] <jql> you can't have my modules

[03:33] <jql> :P

[03:33] <Khisanth> what is with the version numbers though?

[03:33] <autrijus> Khisanth: minimal version number thing

[03:34] <autrijus> I'm making it optional

[03:34] * jql waits for pugs to compile

[03:34] <autrijus> works

[03:36] * mrborisguy starts new build

[03:36] <crysflame> win move 5

[03:36] <autrijus> yo. :)

[03:36] <crysflame> i thought it was just quiet

[03:36] <svnbot6> r3863, autrijus++ | * string and integer parameter passing.

[03:36] <mrborisguy> am i supposed to reconfigure every time?

[03:37] <mrborisguy> or i guess, rerun Makefile.PL every time?

[03:37] * jql feels this sudden urge to get a faster computer

[03:38] <japhy> ignore that urge.  it's bad and wrong.

[03:38] <mrborisguy> i can hardly wait...  i wish i were running something faster too at the moment!

[03:38] <jql> yeah. pugs.parser just compiled, and the urge is diminished

[03:39] <Khisanth> heh compiling pugs does tend to cause an urge to get a faster computer

[03:39] <mrborisguy> i just may have to rewrite the entire program i just wrote in p6 now

[03:40] <autrijus> mrborisguy: no, just "make" is enough

[03:40] <jql> hell, with CPAN starting to work on P6, my desire to rewrite modules just went down

[03:40] * jql chuckles

[03:40] <autrijus> that's as expected :)

[03:41] <japhy> what will the Perl 6 interpreter be written in, ultimately?

[03:41] <japhy> is the Haskell just a prototype thing?

[03:41] <mugwump> forth

[03:41] <jql> prolog would be a natural

[03:42] <japhy> befunge!

[03:42] <kelan> malbolge

[03:42] <mrborisguy> autrijus: thanks

[03:42] <jql> Perl6#

[03:42] <japhy> intercal.

[03:42] <Khisanth> japhy: Perl 6 of course ;)

[03:42] <mrborisguy> isn't perl6 going to be written in python?

[03:43] <autrijus> japhy: the perl 6 interpreter will no longer exist

[03:43] <autrijus> japhy: there will be a perl 6 _compiler_ though :)

[03:43] <Khisanth> mrborisguy: only if they decide to kill the whole project :p

[03:43] <jql> C:\Perl6-Pugs-6.2.5>pugs -e "say 'Hello World!'"

[03:43] <autrijus> that takes a perl 6 program and emit some kind of assembly.

[03:43] <jql> Hello World!

[03:43] <jql> sweet

[03:43] <mrborisguy> Khisanth: haha

[03:43] <crysflame> hiya, japhy

[03:43] <autrijus> japhy: that "some kind" may be parrot assembly, or C, or C--, or LLVM, or god knows what.

[03:44] <autrijus> japhy: and the ultimate goal is for that compiler itself written in perl 6

[03:44] <autrijus> so itself can also run on parrot, or C, or C--, or LLVM, or god knows what.

[03:44] <japhy> hi crys

[03:44] <japhy> autri - ok, by "interpreter" I meant "parser and compiler"

[03:45] <japhy> my point is, you're using Haskell right now to interpret Perl 6 because it seems to be a natural fit for the job

[03:45] <autrijus> japhy: pugs can also emit parrot assembly from perl6 code :)

[03:45] <japhy> that's cool.

[03:45] <autrijus> ./pugs -BParrot examples/mandel.p6 # for example

[03:45] <japhy> I'm just curious how this isn't pulling yourself up by your bootstraps

[03:46] <autrijus> japhy: so the interpreter part is pluggable

[03:46] <autrijus> japhy: the next logical step is to make the parser to use rules

[03:46] <autrijus> japhy: the next logibal step is to port the codegen to perl6.

[03:46] <autrijus> that's all.

[03:46] <japhy> so you'd use pugs to temporarily support the work until you've used it to write the actual perl 6 compiler?

[03:46] <autrijus> that is one route.

[03:47] <autrijus> it is also possible to simply machine-translate pugs to PIR or to Perl6.

[03:47] <japhy> ok

[03:47] <autrijus> at least the codegen/parsing part.

[03:47] <mrborisguy> it seems really odd... but if you think about it, the C compiler is written in C too

[03:47] <autrijus> but one way or another it makes bootstrapping much simpler.

[03:47] <japhy> yeah.

[03:47] <autrijus> since at any time we have an interpreter to fallback to.

[03:47] <autrijus> so eg. BEGIN{...} can work for the first time

[03:47] <autrijus> otherwise it's very hard.

[03:48] <autrijus> have to essentially recompile for each BEGIN

[03:48] <japhy> interesting

[03:48] <japhy> one day I'll wrap my brain around this whole thing.

[03:48] <autrijus> :)

[03:48] <japhy> I'll just get back to working on that Perl 6 rule parser

[03:49] <mrborisguy> did you ever post your txt file?

[03:49] <mrborisguy> i couldn't find it, japhy

[03:49] <japhy> yeah.

[03:49] <jql> it's like trying to understand quines

[03:49] <japhy> http://japhy.perlmonk.org/perl6/rules.txt

[03:49] <mrborisguy> japhy.perlmonk.org/rules.txt?

[03:49] <japhy> no, I added perl6/ to it

[03:49] <mrborisguy> got it

[03:50] <japhy> I figure there'll be more than one perl6-related file I ever write ;)

[03:50] <japhy> already got a bit of feedback from J S Duff

[03:51] <mrborisguy> it looks good

[03:51] <mrborisguy> i'll have to really sift through it to give you any useful feedback

[03:51] <mrborisguy> yeah, i'm sure you'll write more

[03:52] <stevan> autrijus: so do we have perl5 in pugs now?

[03:52] * stevan backlogs in amazement

[03:53] <autrijus> stevan: yes.

[03:54] <mrborisguy> autrijus: i must admit, i'm rather amazed at how fast you guys did that!

[03:54] <stevan> very very very very cool

[03:54] <autrijus> use Digest--perl5;

[03:54] <autrijus> my $md5 = Digest.MD5;

[03:54] <autrijus> $md5.add('Pugs!');

[03:54] <mrborisguy> dd you do it all today?

[03:54] <autrijus> say $md5.hexdigest; # f08bcb32d6eea3d3c9ec2f924ce33067

[03:54] <autrijus> mrborisguy: yes, most of it.

[03:55] <autrijus> in 3 hours or so

[03:55] <mrborisguy> that's just unbelievable

[03:55] <crysflame> that's autrijus

[03:55] <autrijus> (and clkao.)

[03:55] <stevan> its the SVK :)

[03:56] <jql> Digest.MD5 can't be right, can it?

[03:56] <japhy> Digest::MD5.new, no?

[03:56] <japhy> or am I loopy?

[03:56] <jql> that's how it should be, yeah

[03:56] <stevan> isnt Digest the factory module

[03:56] <autrijus> perldoc Digest

[03:56] <japhy> WOW!  I KNOW PERL 6!

[03:56] <Khisanth> or we need to read up on perl6? :P

[03:57] <autrijus> "perldoc Digest" for enlightenment :)

[03:57] <japhy> pshaw.

[03:57] <jql> I will enlighten myself shortly

[03:57] <autrijus> there's lots of rough edges

[03:57] <svnbot6> r3864, autrijus++ | * config tweks for PUGS_EMBED=perl5

[03:57] <autrijus> but I'll fix them when I wake up.

[03:57] <japhy> I never knew they could be used like that.

[03:57] <autrijus> the bulk is all there.

[03:57] <japhy> err, s/they/it/

[03:58] <jql> interesting. I've only ever read the Digest::MD5/SHA1 pod, never the Digest pod

[03:58] <jql> didn't realize it was gonna play that way

[03:59] <jql> and Digest::MD5 says Digest::MD5->new :P

[03:59] <japhy> yeah, seriously.  I always just used the Digest::X module I needed

[03:59] <japhy> since I was never in need of a factory

[04:00] <autrijus> I posted to PM

[04:00] <autrijus> # http://perlmonks.org/?node_id=460233

[04:00] * jql checks to see if nmake test is done

[04:00] <Khisanth> I can usually hear if it is done :)

[04:00] <japhy> cool beans, autrijus.

[04:00] <jql> urge to upgrade computer... rising

[04:01] <jql> I'm in southern cali. fan is on, TV is on, can't hear hard-drive over that. :)

[04:01] * Khisanth flips jql's upgrade urge overflow bit

[04:02] <Khisanth> jql: I don't hear the hard drive, I hear the fan

[04:02] <Khisanth> this is a laptop

[04:02] <jql> ahh

[04:03] <stevan> autrijus: as always, I am utterly amazed

[04:04] * stevan edges ever closer to using Pugs in production :P

[04:04] <autrijus> :)

[04:05] <stevan> I am too sleepy to write tests now, but I am setting aside some tuits for tomorrow

[04:05] <jql> urge to link software with pugs... rising

[04:05] <stevan> so very very cool

[04:05] <jql> anyone written a gui with pugs, yet?

[04:05] <crysflame> if i were the borg, i would leave borg artifacts everywhere and wait for cultures to link to them

[04:06] <crysflame> at which point the culture would become a borg extension culture

[04:06] <mrborisguy> *** cannot cast from VUndef to ()

[04:06] <mrborisguy>     at ./dates.p6 line 6, column 11-21

[04:06] <f0rth> gui with hs-plugins and wxHaskell?

[04:06] * stevan wanders happily off to bed, to dream of dancing pugs :)

[04:06] <jql> <dalek>assimilate</dalek>

[04:06] <mrborisguy> line 6 is:  my $md5 = Digest.MD5;

[04:07] <mrborisguy> in the exact example autrijus gave

[04:07] <crysflame> maybe $md5= Digest--MD5.new;

[04:08] <autrijus> mrborisguy: you didn't build with embedding perl5

[04:08] <autrijus> mrborisguy: you need to do:

[04:08] <autrijus> env PUGS_EMBED=perl5 perl Makefile.PL

[04:08] <autrijus> rm src/Pugs/pugs_config.h src/Pugs/Embed/Perl5.o

[04:08] <autrijus> and make again

[04:09] <mrborisguy> oh, okay

[04:09] <mrborisguy> i'll try that

[04:09] <mrborisguy> thanks

[04:10] <autrijus> np :)

[04:10] <autrijus> now I sleep. &

[04:10] * autrijus waves

[05:10] <eric256> to embed perl do you need to be building perl5 from source?

[05:11] <gaal> i don't think so eric, but you probably need the same compiler as the one your perl5 was built with. or close enough.

[05:11] <mugwump> aiui you need dev. headers and libperl

[05:11] <eric256> well i have a ActiveState release soo that is probably not going to happen :)

[05:12] <gaal> eric, the other day i just happened to build my own perl on win32. it really wasn't all that bad, if you're up to d/ling about 250mb.

[05:13] <gaal> :)

[05:13] <eric256> is there a paste bot i can put my huge error on?

[05:14] <gaal> actually the prospect filled me with dread, since i hate the windows command line so much, but now that i have a working cpan it's such a relief.

[05:14] <gaal> perlbot nopaste

[05:14] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[05:14] <eric256> yea i don't realy feel like screwing with my perl5 install since it is all working and happy

[05:16] <pasteling> "eric256" at 69.234.109.88 pasted "Build Problems. ActiveState + Pugs ;) + EMBED_PUGS=perl5" (169 lines, 11.1K) at http://sial.org/pbot/10395

[05:16] <eric256> nmake and i arn't friends so i just included the whole nmake unoptimized out put.....i'm hoping someone can help me figure out why it failed ;)

[05:20] <gaal> hmm, it's working for me

[05:20] <eric256> with ActiveState?

[05:21] <gaal> no, my shiny own perl

[05:21] <eric256> yea i'm pretty sure its related to activestate...what compiler did you use with your perl?  cpan on windows would be nice

[05:21] <eric256> no more icky ppm

[05:22] <gaal> oh, you can use cpan with activeperl

[05:22] <gaal> if you do have a compiler.

[05:22] <gaal> (or even without one, if you don't need to compile XS)

[05:23] <eric256> yes.  if i had a compiler i wouldn't be using activeperl though

[05:23] <gaal> i used the free MS toolchain

[05:23] <eric256> toolchain?

[05:23] <eric256> free and MS in one sentence? you must me the diseas and not the company ;)

[05:23] <gaal> okay, it goes like this: Microsoft have a free version of their compiler plus build tools

[05:24] <Khisanth> well free as in beer anyway

[05:24] <gaal> it's mostly command line

[05:24] <gaal> and not the very newest.

[05:24] <gaal> but it works!

[05:24] <eric256> hmmm. seems like going over to the dark side. ;)

[05:24] <gaal> (and also, seems very fast.)

[05:24] <Khisanth> hmm

[05:25] <gaal> however, you need to gather bits and pieces a bit to make it useful

[05:25] <Khisanth> does ghc build with mingw?

[05:25] <eric256> where would i find this?  i've tried compiling perl with VC 6 a couple times with no luck.

[05:25] <gaal> it's build *with* msys, Khisanth.

[05:25] <gaal> msys ~~ mingw

[05:25] <eric256> mingw?

[05:25] <gaal> eric, okay, i gotta run to work unfortunately but the short of it:

[05:26] <gaal> - grab perl-5.8.6.tar.gz

[05:26] <Khisanth> www.mingw.org :)

[05:26] <gaal> - read README.win32

[05:26] <gaal> - d/l three kits from microsoft.com [1]

[05:26] <gaal> - set up paths

[05:26] <gaal> - cd perl-5.8.6/win32

[05:26] <gaal> - vi Makefile

[05:27] <ingy> anyone have knowledge about guid generation?

[05:27] <gaal> - nmake etc.

[05:27] <gaal> that's it; really

[05:27] <gaal> oh, there's a couple of things you have to build manually but it's in the README

[05:27] <Khisanth> what happened to Configure? 

[05:27] <ingy> is there a perl  module to generate generic guids?

[05:27] * eric256 is quite sure gaal left out all the hard things. lol. thanks

[05:27] <gaal> ingy, on p5 i think there's one on cpan

[05:29] <Khisanth> what is a guid?

[05:29] <gaal> eric, just remember, one of the three kits has many subfeatures you can choose from; two of them are necessary for building perl so don't leave them out. this is mentioned in the README.

[05:29] <gaal> oops, too late.

[05:29] <ingy> I suppose just taking an md5 of a hires time and a couple other unique vals would work

[05:29] <ingy> or sha1

[05:29] <gaal> for what, ingy?

[05:29] <obra> ingy: Data::UUID

[05:29] <ingy> mmm

[05:29] <gaal> ingy, you can call that from pugs now :)

[05:30] <ingy> cool!

[05:30] <ingy> thanks y'all

[05:30] * Khisanth renames pugs to frankenstein's monster and autrijus to dr. frankenstein

[05:31] <gaal> the frankensteins were fast and graceful?

[05:31] <Khisanth> it depends on the version

[05:32] <ingy> :)

[05:32] <ingy> obra: that's whatI was looking for

[05:33] <ingy> wow it's all XS and stuff

[05:33] <obra> though there's a pure perl version too

[05:34] <ingy> how does that work under pugs?

[05:34] <ingy> ah

[05:46] <svnbot6> r3865, autrijus++ | * new perl5_can API to test whether a method can be found

[05:46] <svnbot6> r3865, autrijus++ |   in perl5 land, or fallback to perl6.

[05:46] <svnbot6> r3866, autrijus++ | * bareword classes now stand for their metaobjects, not the

[05:46] <svnbot6> r3866, autrijus++ |   simple type literal. this makes class-level methods possible.

[05:46] <svnbot6> r3867, autrijus++ | * only look up AUTOLOAD when there is possibly a hit for AUTOLOAD.

[05:46] <svnbot6> r3867, autrijus++ | * therefore `DBI.connect` and `Digest::MD5.new` no longer refers to

[05:46] <svnbot6> r3867, autrijus++ |   the builtin prim `connect` and `new`, but rather to their Perl 5

[05:46] <svnbot6> r3867, autrijus++ |   space methods.

[05:59] <gaal> oops, i was wrong earlier when i told eric PUGS_EMBED works for me on win32 - i get the same error

[06:03] <gaal> looks like it may be a ghc issue :(

[06:04] <gaal> as its definition is wrapped in a defined(_MSC_VER) in HsBase.h

[06:04] <gaal> #if !defined(...)

[06:06] <gaal> oy, there's alsmost certainly a bug there, if i'm looking at the sources for the version i'm using.. but the cvs HEAD looks fixed

[06:07] <gaal> i'll try this later when i have tuits for it, for now it seems as though p5 embedding on win32 might require a newer ghc than 6.4

[06:12] * gaal -> $work &

[06:32] *** chady_ is now known as chady

[06:33] *** castaway_ is now known as castaway

[06:35] <castaway> mornin

[06:39] <x86> morn

[07:10] *** wolv is now known as wolverian

[07:47] <Aankhen``> Closure interpolation in an s/// doesn't work?

[07:49] <nothingmuch> write a test?

[07:49] <Aankhen``> OK.

[07:50] <Aankhen``> Where should it go?

[07:50] <Aankhen``> t/rules/s_perl5_closure.t?

[07:50] <nothingmuch> i think probably under quoting

[07:50] <Aankhen``> Ah.

[07:50] <Khisanth> shouldn't that be perl6?

[07:50] <nothingmuch> wait, should s:p5/// behave like normal s///?

[07:50] <Aankhen``> I guess so...

[07:50] <nothingmuch> if it wants to be compatible, then shouldn't the quoting work like it did before?

[07:51] <nothingmuch> or should the translator escape this stuff

[07:51] <Aankhen``> I think the :P5 only changes the interpretation of the pattern.

[07:51] <Aankhen``> # The new :perl5 modifier allows Perl 5 regex syntax to be used instead:

[07:51] <Aankhen``>     m:perl5/(?mi)^[a-z]{1,2}(?=\s)/

[07:51] <Aankhen``> (It does not go so far as to allow you to put your modifiers at the end.)

[07:52] <nothingmuch> okay, fair enough, since the substitution is just like quoted text

[07:52] <nothingmuch> i would put it in one of the quoting tests

[07:52] <Aankhen``> OK, I'm going to commit my changes to CGI.pm, then I'll write up a test for the closure thing.

[07:57] <nothingmuch> "If file does not graphic or documentation then backup it"

[07:57] <nothingmuch> readable comments... *sigh*

[07:57] <castaway> nice comment

[07:59] <nothingmuch> getHeaderNema

[07:59] <nothingmuch> it takes just as much effort to fix that where it's defined instead of use it this way

[07:59] <nothingmuch> gah!

[08:07] <Aankhen``> Wow, svnbot6 is slow at picking up commits today...

[08:07] <svnbot6> r3868, Aankhen++ | * rearranged parameters for &CGI::header to be more like P5 &CGI::header; made signature more specific.

[08:07] <svnbot6> r3868, Aankhen++ | * added support for extra headers in &CGI::header.

[08:07] <svnbot6> r3868, Aankhen++ | * fleshed out &CGI::redirect to support all parameters supported by P5 &CGI::redirect.

[08:07] <svnbot6> r3868, Aankhen++ | * updated header.t.

[08:07] <svnbot6> r3868, Aankhen++ | * added redirect.t to test &CGI::redirect.

[08:07] <svnbot6> r3869, Aankhen++ | * fixed a few tests broken by my previous commit.

[08:07] * Aankhen`` shuts up.

[08:08] <Aankhen``> OK, examples/memory_game/ doesn't seem to be using header() or redirect().

[08:08] <Aankhen``> nothingmuch >> Where do the quoting tests go?

[08:09] <nothingmuch> t/operators/quoting.t

[08:09] <nothingmuch> but that might not be 100% correct

[08:09] <Aankhen``> Ah.

[08:09] <nothingmuch> it might be better placed in t/syntax/string_parsing.t

[08:09] <nothingmuch> or t/rules/s_perl5

[08:09] <nothingmuch> oh, i dunno

[08:09] <Aankhen``> Hrm.

[08:10] <Aankhen``> I think this is mainly testing interpolation in regular strings.

[08:10] <Aankhen``> I'll add some in the rules section as well which specifically test manipulating and interpolating $0, $1, etc.

[08:10] <nothingmuch> look in those files to find tests similar to what you wrote

[08:10] <nothingmuch> and see if it fits there

[08:10] <nothingmuch> i didn't understand that sentac

[08:10] <nothingmuch> nce

[08:11] <Aankhen``> Which one?

[08:11] <nothingmuch> "I'll add some ..."

[08:11] <Aankhen``> Ah.

[08:12] <Aankhen``> I will add some tests to t/rules/s_perl5 (or whichever file is appropriate) which specifically test stuff like s:P5/foo(bar)/{ ucfirst(lc($0)); }/ and so on.

[08:12] <Aankhen``> But first... lunch. ;-)

[08:12] <Aankhen``> BBIAB.

[08:13] <nothingmuch> bon appetite

[08:54] <Aankhen``> Weird... "is export returns Str" won't work; you must use "returns Str is export".

[08:57] <vcv-> I'm sure autrijus had it fixed before you hit enter

[08:58] <clkao> *yawn*

[08:58] <clkao> now let's see if my p5 tests pass

[08:58] <Aankhen``> Heh.

[08:59] <Aankhen``> Is the latest trend to use try { ... } in place of eval_is()?

[08:59] <svnbot6> r3870, Aankhen++ | * &CGI::header: use method call interpolation to uppercase letters.

[08:59] <svnbot6> r3870, Aankhen++ | * re-added "returns Str" and "is export" traits for &CGI::escapeHTML and &CGI::unescapeHTML.

[09:01] <clkao> (VType (mkType "Class"),(mkType "Type"),(mkType "Class"))

[09:01] <clkao> debug message!

[09:01] <Aankhen``> I couldn't figure out why that appears.

[09:06] <nothingmuch>  Aankhen`` eval_is is for string eval

[09:06] <nothingmuch> as for try - i think lives_ok is a better choice

[09:06] <nothingmuch> unless the return value is needed

[09:07] <Aankhen``> Ah.

[09:07] <Aankhen``> Hrm.

[09:07] <Aankhen``> OK.

[09:08] <nothingmuch> wow!

[09:08] * nothingmuch wrote his first line of C++ code that actually worked like he wanted on the first try

[09:08] <nothingmuch> i think i'm starting to make progress

[09:08] <Aankhen``> Congrats!

[09:08] <Aankhen``> ;-)

[09:09] <castaway> grats nm!

[09:09] <nothingmuch> and this involved weird ifdefs and extern char * foo

[09:09] <nothingmuch> i hate lousy design... it's so permanent

[09:10] <Aankhen``> lives_ok takes a code block?

[09:10] <nothingmuch> afaik yes

[09:10] <nothingmuch> but i haven't used it

[09:10] <Aankhen``> OK.

[09:15] <castaway> lives_ok sounds fun :)

[09:15] <svnbot6> r3871, Aankhen++ | * actually added ext/CGI/t/redirect.t

[09:16] <vcv-> nothingmuch: wait until you write a 1000line library and have it work on the first try :p

[09:18] <nothingmuch> vcv-: i hope to have less C++ experience than that

[09:20] <vcv-> smart move

[09:28] <Juerd> http://fun.sdinet.de/pics/raid.jpg

[09:32] <Aankhen``> GODDANGIT

[09:34] <pasteling> "Aankhen``" at 61.246.35.93 pasted "Pugs going crazy" (22 lines, 323B) at http://sial.org/pbot/10402

[09:35] <Aankhen``> It was working perfectly fine... then I added tests for French quotes and it started giving errors.

[09:50] <Aankhen``> Bleh.

[09:50] <Aankhen``> Nevermind. -_-

[10:02] <svnbot6> r3872, Aankhen++ | * added t/builtins/lists/enum.t

[10:49] <clkao> autrijus: ping me if you are back

[11:05] <svnbot6> r3873, iblech++ | * EOL at EOF added to times.t.

[11:05] <svnbot6> r3873, iblech++ | * Usual svn properties added to src/perl[56] and t/pugsbugs/namespaces.t.

[11:05] <svnbot6> r3873, iblech++ | * Changed times.t to treat a diff of 0.0001 as 0.

[11:05] <svnbot6> r3873, iblech++ | * Added a diag() to sleep.t and removed n_ge and n_le in favor of &infix:Â«>=Â»

[11:05] <svnbot6> r3873, iblech++ |   and &infix:Â«<=Â».

[11:32] <svnbot6> r3874, iblech++ | hyper.t -- EVALed two tests and added two new ones.

[11:48] <svnbot6> r3875, iblech++ | * unTODO a succeeding test of oo/class/basic.t.

[11:48] <svnbot6> r3875, iblech++ | * Comment out the debugging message when creating objects using "new".

[12:24] <svnbot6> r3876, autrijus++ | * Fix eval_perl5 building on Mac OS X

[13:05] * Juerd is compiling a kernel

[13:05] <Juerd> for feather

[13:05] <svnbot6> r3877, scook0++ | * Minor English tweaks to PA02

[13:05] <svnbot6> r3877, scook0++ | * Fixed a comment that was confusing Haddock

[13:05] <Juerd> Installation so far went well

[13:05] <Juerd> I used this machine to test my new installation script, automating the procedure at juerd.nl/debianraid

[13:06] <Juerd> http://juerd.nl/files/raidthingy.pl

[13:06] <scook0> Juerd: so the name is chosen? I was having so much fun learning 'onion' in different languages... :)

[13:06] <Juerd> It was fun, but wildly off topic :)

[13:06] <scook0> aye

[13:06] <Juerd> I think that was the largest off topic subthread p6l has known so far :)

[13:07] <Juerd> (Oh, re raidthingy.pl, it's very messy - I blame my not having coded for a long time)

[13:08] <nothingmuch> Juerd: know how to combine raid 1 on root with LVM?

[13:09] <nothingmuch> as for a clean installer, when we have tuits stevan or I will release something we wrote for that

[13:10] <Juerd> I have no LVM experience yet

[13:10] <Juerd> I try to stay away from anything that makes a drive unreadable without tools

[13:11] <Juerd> scook0: Feel free to start a subthread of multilingual feathers :)

[13:14] <Juerd> feather boots!

[13:14] <Juerd> and works!

[13:14] <Juerd> woo.

[13:14] <Juerd> The first raidthingy-installed box is a fact.

[13:15] <nothingmuch> Juerd: if you're interested my C++ brain is fried, so I'll work on releng for Verby

[13:15] <nothingmuch> mostly documentation

[13:17] <Juerd> releng?

[13:17] <Juerd> verby?

[13:17] <Juerd> what are you talking about?

[13:17] <nothingmuch> verby is that installer framework i was talking about

[13:17] <nothingmuch> and releng is release engineering

[13:17] <nothingmuch> autrijus uses it here occasionally, so I thought it was well known

[13:22] <wolverian> Juerd: why are you compiling the kernel? the standard debian kernel didn't fit?

[13:22] <theorbtw1> (Compiling kernels)++

[13:27] <Juerd> Oh.

[13:28] <Juerd> wolverian: Standard linux kernels, not limited to debian, suck.

[13:28] <Juerd> wolverian: They are bloated and inefficient.

[13:28] <Juerd> And having the very core of a system be inefficient is stupid :)

[13:28] <wolverian> Juerd: hmm. okay. do you have any tips/urls for me to look at if I want to recompile my kernel? I do know _how_ to recompile, but I don't know what I should be optimising.

[13:28] <Juerd> Besides that, a moduleless kernel is much more secure, because almost every rootkit out there makes use of kernel modules

[13:29] <Juerd> wolverian: Just include everything you need, and exclude everything you don't. :)

[13:29] <wolverian> Juerd: right. :) reminds me of my FreeBSD days.

[13:29] <Juerd> wolverian: See step 15 at juerd.nl/debianraid for rough instructions

[13:29] <theorbtw1> wolverian: Make sure your CPU and memory size is set correctly, and if you need SMP or not.

[13:29] <dvtoo> it's not that hard to load modules with /dev/kmem ;)

[13:29] <Juerd> dvtoo: True.

[13:29] <dvtoo> if someone has local access to your box, you've already lost

[13:30] <theorbtw1> dvtoo: He's giving out ssh accounts; that's the point of the box.

[13:30] *** theorbtw1 is now known as theorbtwo

[13:30] <wolverian> Juerd: does grsecurity have any downsides currently?

[13:30] <dvtoo> oh, sorry, he's just kind of screwed then ;)

[13:33] <Juerd> wolverian: Restrictions often make users complain.

[13:37] <autrijus> jabbot: seen clkao

[13:37] <jabbot> autrijus: clkao was seen 1 hours 35 minutes 30 seconds ago

[13:38] <autrijus> rehi all :)

[13:39] <clkao> *yawn*

[13:40] <Limbic_Region> anyone seen chip?

[13:40] <Limbic_Region> salutations all btw

[13:41] <autrijus> clkao: how's life? perlembed working for ya?

[13:41] <theorbtwo> Is there a reason that PUGS_EMBED="perl5" isn't the default?

[13:41] <Juerd> one of these: gcc vim-perl zsh ghc-cvs ssh

[13:41] <Juerd> depends on X!

[13:41] <Juerd> argh. :)

[13:42] <Juerd> theorbtwo: You may not have libperl installed

[13:42] <clkao> bwah

[13:42] <clkao> autrijus: i want the vcode map to sv

[13:43] <autrijus> theorbtwo: no good reason except when the C compilers for GHC and Perl are not the same it'll break -- also what Juerd said -- but you can apply a similar probe like parrot's -- in that case might as well enable parrot by default when it's probed -- can you help hacking it in?

[13:43] <autrijus> clkao: you mean calling into p6?

[13:44] <autrijus> clkao: or exporting p5 funcs in p6?

[13:44] * theorbtwo tries it, and gets a bunch of syntax errors.

[13:44] <clkao> see my p5/method.t ?

[13:44] <nothingmuch> autrijus: what implications does perlembed have on perl from GHC?

[13:44] <nothingmuch> is the bridge very pugs specific?

[13:44] <autrijus> nothingmuch: no, the bridge is complete generic

[13:44] <autrijus> see src/perl5/*

[13:44] <nothingmuch> because i would *love* to use perl and haskell together

[13:45] <nothingmuch> this is an excuse to start coding that Pesto project

[13:45] <autrijus> and Pugs.Embed.Perl5

[13:45] <autrijus> both are not specific to pugs

[13:45] <autrijus> I mean they don't use any datatypes in AST

[13:45] <nothingmuch> how close is Inline::GHC?

[13:45] <gaal|work> shoudl PUGS_EMBED be perl5 or parrot? :)

[13:45] <autrijus> I was asking for opinions regarding whether to work on perlembed or ghcembed

[13:45] <autrijus> gaal|work: you can put both in -- separate by some isPunct

[13:46] <nothingmuch> autrijus: i'll try to add perl5 to embed later today

[13:46] <autrijus> nothingmuch: I was leaning to ghcembed aka Inline::GHC, but clkao showed up and proved that perlembed is trivial

[13:46] <autrijus> nothingmuch: cool

[13:46] <autrijus> nothingmuch: so I'm afraid I'm going with perlembed for now

[13:46] <nothingmuch> but it's lag baaomer, so no promises on tuits

[13:46] <autrijus> ghcembed can wait ;)

[13:46] <autrijus> that's fine

[13:46] <nothingmuch> it's not really lag baaomer

[13:46] <theorbtwo> Oh, at the least, we should make the messages at Makefile.PL time be more obvious -- since the p5 one says "containing", and the parrot one says "equal to"... IIRC.

[13:46] <nothingmuch> it's the work party for thereof

[13:46] * theorbtwo wonders what ghcembed is.

[13:46] <autrijus> theorbtwo: sure. fix away!

[13:46] <autrijus> theorbtwo: Inline::GHC

[13:46] <autrijus> via hs-plugins

[13:47] <gaal|work> perlbot nopaste

[13:47] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[13:47] <pasteling> "gaal" at 212.179.43.225 pasted "make errors / linux" (32 lines, 2.2K) at http://sial.org/pbot/10405

[13:48] <gaal|work> oh, does perl5_embed require hs-plugins?

[13:49] <autrijus> nope

[13:49] <autrijus> hm, seems ghc has different 64bitness than perl5

[13:49] <gaal|work> hmm. the crypt error is prolly some missing ssl lib / dev package, but i don' tknow about the others.

[13:49] <autrijus> are you compiling  both with the same gcc?

[13:49] <gaal|work> ghc-6.4 btw.

[13:50] <gaal|work> err, 6.5 snapshot actually

[13:50] <clkao> autrijus: so, if you can bind vcode into a cv

[13:50] <clkao> or some special bless sv

[13:51] <gaal|work> my perl5 is not 64bit. how do i check my ghc?

[13:53] <theorbtwo> I get similar errors, and I'm on an ia32 chip, so shouldn't be any 64-bittyness.

[13:53] <theorbtwo> (Unless you mean filesizes?)

[13:53] <gaal|work> my system gcc is 3.3.6-5; does 'ghc-cvs' on debian come with its own gcc like it does on msys?

[13:53] <nothingmuch> i think this is the largefile support complaining

[13:53] <gaal|work> dpkg -L ghc-cvs | grep gcc # it doesn't

[13:54] <gaal|work> well, i do have largefie in my p5.

[13:55] <svnbot6> r3878, iblech++ | Parse [+]«.

[13:55] <svnbot6> r3879, iblech++ | Main.hs -- die() should output correct utf-8.

[13:55] <svnbot6> r3880, iblech++ | Pugs.Prim -- readline() should read utf-8.

[13:55] <svnbot6> r3880, iblech++ | (This was the real reason why svnbot6 outputted funny chars instead of the

[13:55] <svnbot6> r3880, iblech++ | correct ones!)

[13:55] <Juerd> After unpacking 43.3MB of additional disk space will be used.

[13:55] <Juerd> and that's just emacs

[13:55] <Juerd> WHOA.

[13:56] <autrijus> iblech++ # svnbot6 

[13:56] <nothingmuch> as they say, emacs is a wonderful OS, it only needs a good editor

[13:56] <Juerd> When emacs is installed, I have all requested software there

[13:57] <autrijus> and mozilla is a wonderful OS, it only needs a good browser

[13:57] <Juerd> I like firefox

[13:57] <autrijus> ...which is called firefox, so it's no longer funny

[13:57] <Juerd> heh

[14:01] <gaal|work> googling suggests -DGNU_SOURCE etc., but we have that.

[14:07] <autrijus> clkao: ok, got it. will make it work

[14:11] <Limbic_Region> [plus plus] autrijus, clkao

[14:12] <Limbic_Region> that 3 hour hack yesterday gave me a lot of advocacy ammunition this morning

[14:12] <theorbtwo> For l~r: autrijus++ clkao++

[14:12] <Juerd> users are created

[14:13] * Juerd preps for the voyage to the data centre

[14:13] <Juerd> But first, let's see if pugs compiles with the currently installed tools

[14:14] <autrijus> Juerd: with embed_perl5 :)

[14:14] <autrijus> EMBED_PUGS=perl5 that is -- also check src/Pugs/pugs_config.h to see it's really set to 1

[14:14] <autrijus> Limbic_Region++ # advocacy

[14:16] <Juerd> real    1m12.981s

[14:16] <Juerd> unoptimized

[14:16] <Juerd> autrijus: Sorry, no time right now for extensive tests :)

[14:16] <autrijus> k :)

[14:16] <Juerd> autrijus: In a few hours you'll be able to test this yourself

[14:16] <autrijus> yup

[14:19] <Limbic_Region> the hyper derferencing tests still need a . added, will try to do that tonight (assuming I actually get the cable installed this time)

[14:27] <autrijus> bbiab.

[14:28] <q[merlyn]> so 6.2.5 still not working on OSX is known?

[14:28] <q[merlyn]> or does someone want a bug report?

[14:29] <theorbtwo> Uff -- if I do PUGS_EMBED="perl5" perl Makefile.PL; make (errors), then perl Makefile.PL; make -- it still errors (differently).

[14:29] <theorbtwo> I don't have time to track it down now, though.

[14:29] <theorbtwo> q[merlyn]: if this is tiger, search in the README for "tiger" -- there is a workaround.

[14:29] <Juerd> I'm off

[14:30] <theorbtwo> If it's not that problem, then AFAIK it's not a known problem.

[14:30] <Juerd> Bye!

[14:30] <Juerd> (feather will now travel to Schuberg Philis (http://www.schubergphilis.nl/)

[14:30] <Juerd> )

[14:30] <q[merlyn]> ahh.  gcc 3.x not 4.

[14:30] <q[merlyn]> darn it. :)

[14:31] * q[merlyn] types make all test install

[14:32] <Limbic_Region> q[merlyn] - out of curiosity, are you writing any p6 code or just verifying that it is building and trying out examples

[14:33] * PerlJam is continually shocked at just how much perl6 pugs understands.

[14:34] <Limbic_Region> yeah - you and me both

[14:34] <Limbic_Region> I find some piece of p5 code I have written and think - no way this will work

[14:34] <Limbic_Region> and other than working around bugs - it does

[14:35] <Limbic_Region> I am however waiting on a few features for my latest project

[14:35] <Limbic_Region> specifically hyper dereferencing

[14:38] <theorbtwo> Hm, Makefile.PL should possibly notice what version of GCC it is using.

[14:38] <clkao> autrijus: and you need to give me some example how to hold and use an pugs val in C

[14:39] <theorbtwo> (In the same way that it now notices what ghc it is using.)

[14:39] <theorbtwo> Or possibly just print a warning whenever $^O says we've got an OSX machine.

[14:39] <theorbtwo> (What is $^O on OSX?)

[14:40] <q[merlyn]> I'm mostly tracking it for now

[14:40] <q[merlyn]> I want to be more involved, but timing is bad

[14:41] * Limbic_Region was just an inquiring mind

[14:47] <nothingmuch> theorbtwo: 'darwin'

[14:49] <q[merlyn]> OK, selecting gcc 3.3 didn't help

[14:49] <q[merlyn]> still dies in samespot

[14:49] <q[merlyn]> right after "Compiling Main" during "Linking..."

[14:50] <theorbtwo> Thanks.

[14:51] <q[merlyn]> ahh.  it's picking up /opt/local/lib - how do I tell it to not do that?

[14:51] <Limbic_Region> q[merlyn] - perhaps nopaste the error

[14:52] <q[merlyn]> is there a nopaste here?

[14:52] <integral> http://sial.org/pbot/

[14:52] <Limbic_Region> perlbot nopaste

[14:53] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[14:53] <Limbic_Region> there is a perlbot q[merlyn] - it knows lots of stuff

[14:53] <pasteling> "q[merlyn]" at 200.179.244.157 pasted "Linking ... /usr/bin/ld: warni" (11 lines, 1.2K) at http://sial.org/pbot/10407

[14:53] <q[merlyn]> nothing in my env contains /opt/local/lib

[14:53] <q[merlyn]> so I don't know where that's set

[14:54] <q[merlyn]> Oh.  it's ghc

[14:54] <q[merlyn]> ghc is built in /opt/local

[14:54] <integral> you don't use the pre-build binaries?   They're /usr/local

[14:55] <q[merlyn]> so I have a libdl in /opt/local/lib and in /usr/lib

[14:55] <q[merlyn]> I try not to install prebuilt binaries

[14:55] <q[merlyn]> not when source is available

[14:55] <q[merlyn]> even then, it'd probably conflict

[14:56] <Limbic_Region> http://perlmonks.org/index.pl?node_id=460344 # plea for more better FMs

[14:56] <integral> hmm, ghc -v5 prints a lot of config info

[14:58] <q[merlyn]> Hmm.  my "port" command appears to be broken too

[14:58] <integral> hmm, you have a libdl in your /opt/local/lib ?

[14:58] <q[merlyn]> this is not good

[14:58] <q[merlyn]> Yeah, I built ghc from darwinports because fink didn't have it.

[14:59] * q[merlyn] reinstalls darwinports just in case

[15:00] <q[merlyn]> stupid "make isntall" doesn't do a "make"

[15:01] * q[merlyn] retries first with "make" again

[15:01] <q[merlyn]> (distros where make install breaks because "make" hasn't been done)--

[15:02] <q[merlyn]> mandatory makefile line: "install: all"

[15:02] <theorbtwo> Um, you did type "install" correctly, right?

[15:02] <q[merlyn]> Yes

[15:02] <q[merlyn]> and it bombed because something wasn't made that "make all" makes

[15:02] <Limbic_Region> YES - an advocacy victory

[15:02] <Limbic_Region> http://perlmonks.org/index.pl?node_id=460345

[15:03] <Limbic_Region> "Well that's amazing. I guess I have to check out Pugs now."

[15:06] <gaal|work> what platform is diotalevi on?

[15:07] <q[merlyn]> Hmm.  ports suggests that ghc 6.4 is stable, but 6.5 is devel

[15:07] <q[merlyn]> is that true?

[15:08] <Limbic_Region> gaal - I have asked several times and I don't remember

[15:08] <Limbic_Region> would you like me to ask again?

[15:09] <q[merlyn]> ahh.  ghc-devel doesn't depend on dlopen, so that will probably use the /usr/lib version

[15:10] <Limbic_Region> gaal|work - see my reply at http://perlmonks.org/index.pl?node_id=460347

[15:11] <theorbtwo> That's around right, merlyn.  Uses the same scheme as the linux kernel, more or less.

[15:12] * Limbic_Region wanders off

[15:12] <q[merlyn]> Oh, ghc-devel is trying to fetch something from cse.ogi.edu, and failing

[15:13] <q[merlyn]> I guess I'm back to 6.4

[15:14] <pdcawley> "Luke and Damian provided the sanity" <-- What's wrong with this sentence?

[15:17] <q[merlyn]> Hmm.  out of time to do more downloads etc.

[15:17] * q[merlyn] wanders off

[15:18] <PerlJam> pdcawley: Luke and Damian are on the wrong side of the sanity

[15:24] <Limbic_Region> gaal|work - I'm using NetBSD 2.0.2 (the latest) on an SMP Sparc. "sparc-netbsd-thread-multi"

[15:24] <Limbic_Region> that was diotalevi's reply

[15:24] <gaal|work> sorry, was away

[15:24] <gaal|work> interesting platform

[15:25] <Limbic_Region> no worries - I actually got it in a post at the Monastery so I won't have to keep bugging him about it

[16:15] <Limbic_Region> iblech ping

[16:22] * Limbic_Region likes "use:p5 Digest;" as a way of designated p5 module use

[16:23] <obra> if you're going to go that route, why not create a proxy 'perl5' module.

[16:23] <obra> use perl5 DBI;

[16:24] * Limbic_Region isn't going any route

[16:26] <clkao> *yawn*

[17:15] <Juerd> LADIES AND GENTLEMEN

[17:16] <Juerd> feather.perl6.nl is online!

[17:16] <gaal> yay!

[17:16] <Juerd> If you have requested an account, you may /msg me for your temporary password.

[17:16] <Juerd> (They are preset, and I expect you to change it immediately)

[17:16] <PerlJam> you didn't like carrot?

[17:16] <Juerd> I like it, but I like feather better

[17:19] <Boogie> Hey, it was my suggestion. :) As _I_ remember. ;)

[17:20] <knewt> Juerd: not requested an account yet, can i do that now?

[17:20] <gaal> logged in an password changed.

[17:21] <gaal> crazy npasswd :)

[17:21] <Juerd> knewt: By sending e-mail, yes

[17:21] <gaal> Thanks, Juerd!

[17:23] <PerlJam> Juerd: What are the specs on that machine again?

[17:23] <Juerd> p4 2.4 1024 80r1

[17:23] <Juerd> sata disks

[17:24] <wolverian> are we going to each build our own pugs?

[17:24] <PerlJam> wolverian: I'm sure you could setup an automated build to share with everyone if you like.

[17:25] <wolverian> oh, right. :) 

[17:25] <gaal> i'll just be posting smoke results there (nicely linked)

[17:25] <Limbic_Region> Juerd plus plus btw for pushing to get the community server

[17:25] <PerlJam> Juerd++ for L~R  :)

[17:25] <Juerd> pushing to get? That's one way to put it :)

[17:26] <wolverian> hmm. no svn, only svn-mirror? :)

[17:26] <gaal> Is L~R's keyboard broken?

[17:26] <Limbic_Region> no gaal

[17:26] <Juerd> wolverian: Well, I hope people will announce where their pugsies and parrots are

[17:26] <Limbic_Region> my client is

[17:26] <Juerd> wolverian: So others can use them

[17:26] <PerlJam> gaal: no, but his client eats +

[17:26] <gaal> lol

[17:26] <Juerd> wolverian: There will be a wiki eventually

[17:27] <gaal> you need a ++ bot

[17:27] <Limbic_Region> the only way I can be here from work is to use cgiirc 

[17:27] <wolverian> Juerd: sure, but building and testing pugs is fairly resource intensive, isn't it? it'd be better to have only one pugs. then again, I don't care that much, and it's your box :)

[17:27] <gaal> hmm, doesn't that read "pastebot" in haskell?

[17:27] <PerlJam> Juerd: why eventually?

[17:27] <Juerd> wolverian: You are right.

[17:28] <Juerd> PerlJam: Because I wanted the box online asap, and haven't arranged any documentation apart from the motd yet.

[17:28] <PerlJam> wolverian: Given that people will be using this server to do various things, one of those things might be to build a "special" version of pugs (i.e. testing a particular feature)

[17:28] <knewt> ah, there's a pastebot on this channel. that's good to know

[17:28] <wolverian> PerlJam: yes, of course. that shouldn't be disallowed, probably.

[17:28] <Juerd> wolverian: It may be best to simply symlink /usr/local/bin/pugs to a single pugs

[17:28] <Juerd> wolverian: Will you be building that one?

[17:28] <Juerd> wolverian: Or writing a script to build it periodically?

[17:28] <Juerd> etc.

[17:29] <wolverian> Juerd: I don't know if I have enough tuits for that. never done anything like this before.

[17:29] <Juerd> Ah, well, this is simply enough. I'll do it myself

[17:29] <PerlJam> wolverian: good a time as any to learn!  (screw work and family, you need to play with pugs! ;-)

[17:29] <wolverian> PerlJam: true enough. :)

[17:30] <Juerd> To skip the learning thing:

[17:30] <Juerd> It's a matter of using cron (crontab -e) to set a timer that svn ups and builds.

[17:30] <wolverian> in any case, as Juerd said, it's trivial. simply add a cron job to svn up, make all test install. if you want to get fancy, you'd redirect errors to /etc/motd or so, to let everyone know what is working and what is not

[17:30] <Juerd> nah, on error it simply doesn't make install.

[17:30] <Limbic_Region> cklao ping

[17:31] <PerlJam> Speaking of cklao .... Juerd, are you going to install svk for everyone?

[17:31] <PerlJam> (or delegate appropriately)

[17:32] <Limbic_Region> IIRC, cklao has written Benchmark.pm but hasn't released it yet

[17:32] <Juerd> PerlJam: I've installed whatever debian thinks svk is, system wide.

[17:32] * Limbic_Region really would like to have it to benchmark various solutions to his recent project

[17:32] <PerlJam> Juerd++

[17:32] <PerlJam> I may ask for an account yet.

[17:33] <Juerd> You may

[17:33] <Juerd> By e-mail.

[17:33] <PerlJam> (currently I just build on my box at work (lucky me no restrictions there))

[17:33] <PerlJam> though it is a tad annoying when the entire campus drops off the net for 15 minutes at a time (like it did to me last night in the middle of composing an email)

[17:34] <wolverian> sid's svk is up to date.

[17:39] <clkao> people

[17:39] <clkao> please learn to spell so my irssi client will hilite

[17:39] <clkao> Limbic_Region: what can i do for you?

[17:39] <clkao> i ugess you will want a shared mirror on the box

[17:39] <clkao> and just tell people to depot map to that one

[17:40] <Limbic_Region> clkao - I don't understand what you mean by "learn to spell so my irssi client will hilite"

[17:40] <clkao> let me know if i can be of any help.

[17:40] * clkao &

[17:40] <clkao> you typed cklao

[17:40] <wolverian> Limbic_Region: typing his nick correctly so that he will see the line in his awaylog

[17:40] <Limbic_Region> oh

[17:40] <clkao> anyway &

[17:41] * Limbic_Region wants Benchmark.pm clkao is all

[17:41] <clkao> ok ok i will try later tonight

[17:41] <Limbic_Region> http://perlmonks.org/index.pl?node_id=458728 # It is S-L-O-W

[17:41] <Limbic_Region> but since there are many ways to skin a cat, I want to see which ones are fastest

[17:42] <Limbic_Region> great - thanks clkao

[17:46] <gaal> feather users, please create a ~/README

[17:54] <gaal> wtf? the "struct dirent" still happens with ghc snapshot :(

[17:54] <gaal> uh, the __hscore_d_name problem that is.

[17:56] <revdiablo> Limbic_Region: thanks for lurking on that Meditation I posted, and replying to folks. I barely had the energy to read most of the replies, much less reply back to them. :)

[17:57] <q[merlyn]> weird.  installing ghc from ports is building Perl 5.8 from scratch.

[17:58] <japhy> the perl6 summary's links don't work :(

[17:58] <q[merlyn]> so now I'll have two copies of Perl 5.8 on my disk. :(

[17:58] * gaal dislikes link shorteners

[17:58] <q[merlyn]> purl?

[17:58] <Limbic_Region> revdiablo - I didn't do an exhaustive set of replies

[17:58] <Limbic_Region> just the ones I felt warranted a proper nudge

[17:58] <shapr> Purle: Permanent Uniform Resource Locator, a service of OCLC in Virginia

[17:58] <gaal> merlyn, i have five of 'em :(

[17:59] <revdiablo> Limbic_Region: yeah, but you replied some. I think it's helpful just to keep some activity up

[17:59] <q[merlyn]> wow

[17:59] <shapr> um, Purl

[17:59] * Limbic_Region wanders off to a meeting

[17:59] <q[merlyn]> hard to imagine why it would not recognize I have one already

[17:59] <gaal> actually, three p5.6.1 + 2 5.8.x

[18:00] <q[merlyn]> wow

[18:00] <q[merlyn]> "Perl - so good you'll want to install it 2, er, 3, er, 4, I mean 5 times!~"

[18:01] <gaal> actually, i just compiled one the other day, and i *thought* it was the 3rd instance -- but i just discovered ghc comes with its own perl

[18:01] <mauke> 5.6.1, 5.8.0, 5.8.1, 5.8.3, 5.8.4, 5.8.5, 5.8.6

[18:01] <mauke> I win

[18:01] <gaal> and its own gcc :)

[18:01] <q[merlyn]> heh

[18:01] <gaal> mauke wins :)

[18:01] <revdiablo> mauke always wins

[18:01] <mauke> oh, and perl1

[18:01] <gaal> but i have access to a machine with....

[18:01] <gaal> perl4 :

[18:01] <gaal> oy

[18:01] <gaal> ok ok ok

[18:01] <gaal> you WIN.

[18:02] <q[merlyn]> ugh!

[18:02] <q[merlyn]> p4!

[18:02] <q[merlyn]> I remember that

[18:02] <q[merlyn]> and p3... and p2... and p1.

[18:02] <gaal> i bet you do.

[18:02] <gaal> you remember p3?

[18:02] <q[merlyn]> Hell.  "I wrote the book" on p4. :)

[18:02] <mauke> I have access to a machine with p4, p5.002, p5.005 and p5.005_02

[18:02] <gaal> was there a p3?

[18:03] <mauke> I think it's interesting that p5.8.6 passes p1's test suite

[18:03] <gaal> lol

[18:03] <q[merlyn]> of course there was a p3

[18:03] <gaal> with warnings, i bet, about @ ?

[18:04] <mauke> no warnings

[18:04] <mauke> the tests don't "use warnings" :-)

[18:04] <gaal> sounds like a short test suite

[18:05] <gaal> ah :)

[18:05] <Juerd> feather is offline, temporarily, because its connectivity is somehow borked

[18:05] <Juerd> the fiber ring doesn't like this box.

[18:05] <mauke> perl1 doesn't even have -w

[18:05] *** orevdiabl is now known as revdiablo

[18:06] <gaal> eeek! eerk!

[18:06] <gaal> Found = in conditional, should be == at /usr/share/perl/5.8.4/File/Path.pm line 266. 

[18:06] <gaal> Bareword "getcwd" not allowed while "strict subs" in use at /usr/share/perl/5.8.4/File/Path.pm line 266. 

[18:07] <gaal> lose, lose

[18:08] <ninereasons> hi shapr

[18:08] <shapr> 9r 9r

[18:09] <ninereasons> I added a quote to your perlbash... er. Haskell quote page yesterday :)

[18:09] <shapr> Oh really?

[18:09] <shapr> Oh, that's a good quote.

[18:09] <shapr> It's not really my page, I just added 80% of the quotes.

[18:09] <ninereasons> :-)

[18:09] <shapr> All bad guys listen to Reason

[18:10] <shapr> That is an excellent quote.

[18:10] <ninereasons> yes, I thought so.

[18:10] <shapr> I don't often get in the way of depleted uranium slivers moving at a noticeable fraction of c.

[18:12] <shapr> I'm actually recruiting TMR authors for TMR3 right now, was wondering if any pugs people would like to write an article about their experiencese.

[18:13] <clkao> autrijus: *yawn* any news for me

[18:18] <clkao> autrijus: so, foreign export call invoke.. blablah ?

[18:25] * q[merlyn] continues to build ghc again, this time without dlopen

[18:25] <q[merlyn]> howver this time with its own private copy of Perl5.8.6

[18:26] <shapr> It would be fun to get Pugs booting on the bare metal via House.

[18:32] <q[merlyn]> & spending another day in rainy Rio De Janiero

[18:52] <wolverian> gaal: why a ~/README? as in, what do I put in it?

[18:52] <wolverian> what I'm doing? :)

[18:58] <gaal> yeah, in lieu of a .plan, i guess

[19:27] * Limbic_Region is trying not to get his hopes up but can't contain himself - the prospect of actually having net access from home is too much

[19:29] <clkao> summon autrijus

[19:29] <obra> hi clkao!

[19:29] <Limbic_Region> it's 3:30AM - he likely is having a cat nap

[19:30] <Limbic_Region> so you just need to speak a little louder

[19:30] <Limbic_Region> SUMMON autrijus

[19:37] <ninereasons> iblech, your sub step() in mklivecd.pl is a really nice idea

[19:43] <wilx> Somebody should add the http:// prefix to URIs in topic so that I can just click :)

[20:00] *** Limbic_Region changes topic to: 6.2.5 released! | Your opinions wanted: http://perlmonks.org/?node_id=459750 | http://pugscode.org <Overview Journal Logs> | http://pugs.kwiki.org

[20:00] <Limbic_Region> wilx - done

[20:00] <Limbic_Region> any reason you didn't do it yourself?

[20:08] <japhy> character classes are a source of grief...

[20:08] <svnbot6> r3881, Aankhen++ | * basic port of Perl 5 CGI::Util.

[20:09] <ninereasons> I also didn't realize that mortals could do that, Limbic_Region 

[20:09] <Limbic_Region> ninereasons - TIAS

[20:10] <Limbic_Region> perlbot TIAS

[20:10] <perlbot> Try It And See: the best way to learn if something works.

[20:10] <ninereasons> Limbic_Region, good advice :)

[20:11] <Limbic_Region> well - one should always apply a good dose of sanity first

[20:18] <Aankhen``> Does %hash.keys() return a sorted list?

[20:18] <Limbic_Region> TIAS

[20:19] <Limbic_Region> unless of course what you meant to say s/Does/Should/

[20:19] <Aankhen``> Same difference. :-P

[20:20] <stevan> Aankhen``++ # for taking over the CGI module and adding on to it

[20:21] <Aankhen``> Thanks. :-) I didn't really take it over though -- I'm just adding whatever I can, and hoping I don't collide with anyone else's changes.

[20:21] <stevan> Aankhen``: oh no,.. its your now :P

[20:22] * Aankhen`` 's shoulders sag under the responsibility.

[20:22] * stevan feels a little like Tom sawyer :P

[20:22] <clkao> i feel at home reading haskell tutorial

[20:22] <obra> dooom

[20:22] <osfameron> clkao: the haskell for c programmers?

[20:23] * obra waits for clkao to start hacking darcs

[20:23] <clkao> no, yaht

[20:23] <clkao> i'm lisp native, btw

[20:24] * PerlJam buries clkao under a pile of parentheses

[20:24] <gugod_> clkao: hello)))))

[20:24] <clkao> emacs helps

[20:25] <clkao> ya, so, it's like lisp without nails plus evil inference

[20:27] <theorbtwo> nails?

[20:27] <mauke> (clipped (finger (nails)))

[20:27] <obra> "it came before sails"

[20:28] <Aankhen``> Strange.

[20:29] <Aankhen``> I have: $string = q/bar"bar/; $string ~~ s:P5:g/"/&quot;/;

[20:29] <Aankhen``> And I get: *** Can't modify constant item: VUndef

[20:29] <clkao> i'm only 25% through

[20:29] <clkao> but dinner time

[20:29] <wilx> Hmm.

[20:30] <wilx> Lim...bah, he left.

[20:31] <Aankhen``> Ah, nevermind.

[20:31] <Aankhen``> I fixed it.

[20:31] <Aankhen``> "is rw" is a dangerous tool... ;-)

[20:32] <japhy> heh.

[20:32] <japhy> perl 6 rules are supposed to be one-pass-compiled, right?

[20:32] <japhy> as opposed to Perl 5 regexes which require two passes

[20:32] <theorbtwo> Yes.

[20:33] <japhy> das ist gud.

[20:33] <theorbtwo> (Though I don't think p5 REs strictly require two-pass parsing, they are presently parsed that way.)

[20:33] * theorbtwo wonders what to do.

[20:33] <japhy> they do, because backrefs and octal escapes are identical

[20:34] <japhy> and because, the way it's set up, the compiler needs to know the regex's size ahead of time

[20:34] <theorbtwo> Ah.  The first sounds like a good reason.

[20:35] <theorbtwo> (Octal escapes require a o in perl6.)  The second isn't a real requirement, it's just the way it's currently done.

[20:35] <japhy> yeah, I know about the second

[20:35] <japhy> octal escapes are \o... now?

[20:35] <japhy> didn't see that in ASE05 :(

[20:35] <theorbtwo> I think they are...

[20:35] <PerlJam> japhy: I believe the goals are one-pass with minimal lookahead and no backtracking if we can help it.  or something like that.

[20:36] <japhy> it's \0 in the docs I've seen, orb

[20:36] <Aankhen``> Octal escapes are \0123...

[20:36] <Aankhen``> Yeh.

[20:36] <Aankhen``> And you can use \0[123] for disambiguation.

[20:36] <japhy> perljam - there's only very little look-ahead needed.

[20:36] <PerlJam> perl6 won't have \1 \2, etc back refs

[20:36] * Aankhen`` ponders whether to shift url_encode and url_decode to CGI::Util.

[20:37] <japhy> the cases I can think of off the top of my head are '@array' vs '@array :=' and '<[abc]>' vs. '<[a-c]>'

[20:38] <Aankhen``> '^' vs. '^^'?

[20:38] <japhy> I need to know ahead of time if a variable is being "used" or "bound"

[20:38] <japhy> aanken - no, that's a separate issue, the way I parse

[20:38] <Aankhen``> OK.

[20:38] <japhy> and I need to know if a character in a character class is standalone or part of a range

[20:38] <japhy> oh, and the range is .. not -

[20:38] <japhy> oops

[20:38] <svnbot6> r3882, Aankhen++ | * added tests for CGI::Util.

[20:38] <svnbot6> r3882, Aankhen++ | * fixed svn:mime-type property for ext/CGI/lib/CGI/Util.pm

[20:38] <svnbot6> r3882, Aankhen++ | * fixed &CGI::Util::simple_escape

[20:40] <Aankhen``> Darn... porting &expires will require developing a familiarity with the time functions.

[20:42] <theorbtwo> I could have sworn we decided that numbers were 0o123, and the string escape was \o123...

[20:42] * theorbtwo sighs.

[20:43] <theorbtwo> Making a leading 0 octal is horrible huffmanisation -- it takes legal syntax for numbers, and steals it away for something very rarely used.

[20:43] <Aankhen``> Anyone feel like implementing gmtime()?

[20:43] <PerlJam> theorbtwo: I believe that $Larry ruled on that on p6l and that the answer was different than what's currently in the AESs

[20:44] * theorbtwo sighs -- somebody should start indexing these things.

[20:44] <PerlJam> Aankhen``: Actually, I felt like it earlier today, but then the feeling passed :)

[20:44] <theorbtwo> Otherwise nobody can tell what's going on without reading every message that goes through p6l.

[20:44] * Aankhen`` mumbles about doggone fickle programmers.

[20:46] * theorbtwo mumbles about doggone fickle language designers.

[20:46] <theorbtwo> Hm, "theorbtwo".chars == "Aankhen``".chars

[20:46] <Aankhen``> Indeed.

[20:47] <PerlJam> theorbtwo: http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/3630972c1f5fe7c3/7388cba408b399d0?q=octal&rnum=3&hl=en#7388cba408b399d0

[20:50] <theorbtwo> Ah, good.

[20:58] * theorbtwo wonders if L~R's internet is working at home.

[21:03] * wolverian wonders where Larry has disappeared

[21:04] <PerlJam> He's probably working to pay the rent and put food on the table etc.

[21:04] <wolverian> hm. yeah. sorry, I sounded stupid. 

[21:04] <japhy> what's with $Larry and @Larry?

[21:04] <wolverian> (I'm in a situation where I don't have to worry about such things, if that's any excuse.)

[21:04] <japhy> wolv - you're homeless?

[21:05] <wolverian> no, just unemployed. :)

[21:05] <japhy> heheh

[21:06] <PerlJam> japhy: $Larry is *the* Larry,  @Larry is the entire cabal (Luke, Chip/Dan, Pm, chromatic, Damian, etc.)

[21:07] <integral> Not that there *is* a cabal though...

[21:07] <japhy> ah, gotchya.

[21:07] <japhy>   push @Larry, 'japhy';

[21:07] * japhy disappears

[21:08] <japhy> I really should've gotten involved two years ago.  *sigh*

[21:09] * PerlJam wonders if chip participates in the weekly conference calls like Dan did (i.e. not at all :)

[21:09] <PerlJam> I wonder if chip even knows about the weekly calls.

[21:10] <theorbtwo> I think Dan considered his job more or less dissepperate from that of the rest of the cabal.

[21:10] <theorbtwo> That is, in a way, a real shame, but it's also quite interesting.

[21:10] <theorbtwo> One of the reasons that parrot has been so slow in being really visibly useful is because it has a very ill-defined mission.

[21:11] <theorbtwo> Pugs has always been written in a way that everything is supposed to be there to get perl6 working as quickly as reasonably possible.

[21:12] <wolverian> pugs has a lot easier job, yes.

[21:12] <theorbtwo> Parrot has always been written to be generally useful... (((and run perl6))) as almost an asside.

[21:12] <integral> a good virtual machine is somewhat different though, it does need more design than Pugs

[21:12] <PerlJam> theorbtwo: Are you on #parrot?

[21:12] * PerlJam looks

[21:12] <theorbtwo> Not at the moment.

[21:12] <wolverian> theorbtwo: asside :) (aside)

[21:12] <PerlJam> theorbtwo: but you have been in the past?

[21:12] <theorbtwo> Yes.

[21:12] <theorbtwo> Most of the time, it seemed very very quiet.

[21:13] <PerlJam> theorbtwo: freenode #parrot or magnet #parrot?

[21:14] <wolverian> hm, is magnet #parrot open to all? :)

[21:14] <theorbtwo> irc.perl.org parrot.

[21:14] <theorbtwo> There's a freenode #parrot?

[21:14] <wolverian> (that is magnet.)

[21:15] <PerlJam> theorbtwo: were you on earlier this week when chip was talking about how he views his mission?

[21:16] <Aankhen``> G'night.

[21:16] <theorbtwo> Nope, missed that.

[21:19] *** Arathorn is now known as Aragone

[21:19] <theorbtwo> Care to give me a hint?

[21:20] <PerlJam> theorbtwo: unfortunately I don't have it logged (I don't think I do anyway ... hold on ...)

[21:21] * integral wonders if pugs/parrot would be faster than p5 for processing his logs

[21:21] <PerlJam> oh good, chip does know about the weekly cabal calls.

[21:22] <PerlJam> theorbtwo: anyway, I wish I could paraphrase better but words are failing me at the moment.

[21:23] <AtnNn> since diamonds dont do globbing anymore, what does?

[21:23] <wolverian> glob(), I think.

[21:23] <PerlJam> theorbtwo: suffice to say that chip views his job not as "finishing parrot" as much as "continuing with the general plan even if it means bad things" 

[21:24] <PerlJam> where "bad things" could be scrapping loads of already done work (chip would not do this lightly of course)

[21:25] <PerlJam> the impression I got was that he feels slightly captive by earlier design decisions.

[21:25] <integral> is leo the only person currently coding on parrot?

[21:25] <theorbtwo> Ugh.

[21:25] <PerlJam> integral: define "coding on parrot" a little more :-)

[21:26] <integral> err, well writing C code, that gets checked into svn, and gets parrot closer to being "finished"

[21:26] <PerlJam> If you mean "writing C code to implement parrot", then he's certainly still the number one committer.

[21:26] <PerlJam> I don't think he's the only one though

[21:27] <integral> it seems a shame that such an exciting idea isn't really being hacked on

[21:28] <Juerd> connectivity problems disappeard magically

[21:28] <Juerd> feather's up again

[21:28] <Juerd> have fun!

[21:28] <integral> Juerd: have you emailed passwords to those who've asked for accounts?

[21:28] <Juerd> no

[21:28] <Juerd> irc people can /msg me

[21:28] <Juerd> other people will have to wait longer

[21:29] * integral decides to wait since he's got exams 8-)

[21:40] <clkao> sadly im learning pugs guts very quickly

[21:42] <PerlJam> in the last 100 revisions to parrot there have been 10 committers.  including pmichuad and autrijus

[21:42] <clkao> oh no! autrijus touches C code

[21:42] <clkao> that brings segfault!

[21:43] <eric256> i think the pugs website needs stats show like that....x commits in last day, x commites in last day, average commites / committer ;)

[21:43] <PerlJam> 40 revisions by leo, 20 by bernhard, 14 by autrijus, 9 by pmichaud, 9 by particle, the rest have < 4

[21:45] <theorbtwo> That sounds like a better spread then pugs.

[21:45] <svnbot6> r3883, autrijus++ | * change -DPUGS_EMBED_PERL5 to -DPUGS_HAVE_PERL5 to agree

[21:45] <svnbot6> r3883, autrijus++ |   with HSPLUGINS and PARROT; also remove the obsolete and

[21:45] <svnbot6> r3883, autrijus++ |   troublesome code in config_h.pl.

[21:45] <clkao> eek!

[21:46] <integral> particle?

[21:46] <theorbtwo> Of the last 100 revisions:

[21:47] <theorbtwo> 38  autrijus, 17  iblech, 9  Aankhen, 7  clkao, rest <= 5.

[21:47] <theorbtwo> svn log -r3783:3883 |grep '^r[0-9]'|cut -d'|' -f2|sort|uniq -c|sort -r

[21:47] <clkao> what, i'm on the list? you suck! more commits!

[21:47] <PerlJam> heh ... total revisions to the parrot tree:  leo:2632, dan:967, scog:476, mrjoltcola:450, sfink:332,simon:289,coke:259, etc.

[21:48] <PerlJam> theorbtwo: gosh your command line looks remarkably similar to mine :-)

[21:49] <clkao> theorbtwo: btw, you can use svk log -l 100

[21:49] <theorbtwo> I don't use svk, clkao.

[21:49] <clkao> i'm so old to look up HEAD and calculate minus 100 in mind.

[21:49] <PerlJam> clkao: Just use head!

[21:50] <clkao> what about HEAD-100 ?

[21:50] <PerlJam> svn log | grep '^r[0-9]' | head -100l | ...

[21:50] <clkao> ya, network is also cheap these days.

[21:51] <autrijus> greetings!

[21:52] <Juerd> feather has global pugs now

[21:52] <Juerd> rebuilt every 15 minutes

[21:52] <autrijus> clkao: so you've read PA02?

[21:52] <clkao> no not yet. i've skimming some code... i'm very sleepy today

[21:52] <autrijus> that's fine. what segfaulting C code did I introduce?

[21:52] <clkao> autrijus: so, export foriegn ccall should work?

[21:53] <clkao> was j/k :)

[21:53] <autrijus> clkao: "foreign export ccall"

[21:53] <autrijus> ahh.

[21:53] <integral> Juerd: how fast can it rebuild pugs (un)optimizede?

[21:53] <autrijus> but yeah it should work

[21:53] <clkao> so

[21:53] <clkao> export eval's apply function

[21:54] <autrijus> how do you construct Exp from C space?

[21:54] <autrijus> writing simple strings?

[21:54] <Juerd> integral: 1:12 minutes, if nobody else does anything

[21:54] <autrijus> and I can read in back using haskell Read?

[21:54] <autrijus> that I can do

[21:54] <clkao> and need some code to hide vcode and other Type in sv

[21:54] <Juerd> integral: without parrot and perl5

[21:54] <Juerd> integral: unoptimized

[21:54] <autrijus> Juerd++ # feather!

[21:55] <autrijus> is feather dyndns or staticip?

[21:56] <integral> that's very nice :-)

[21:56] <svnbot6> r3884, autrijus++ | * handle perl5-land AUTOLOAD.

[21:56] <autrijus> ok, try http://www.perlcabal.org/ ? :)

[21:57] <autrijus> perlcabal.org and no.perlcabal.org itself are CNAMEed to to feather as well.

[21:57] <autrijus> so we get http://perlcabal.org/~autrijus/ URLs :D

[21:58] <clkao> autrijus: so, little exercise. say we have a function in later.c. run_later(), takes vcode and args, returning an opaque object. and run_me() taking what run_later() returns and invoke that vcode. how would you do that?

[21:58] <Juerd> autrijus: see motd :)

[21:58] <Juerd> autrijus: Although that's no longer true, still use the hostname only.

[21:58] <autrijus> Juerd: what is my password again? :)

[21:59] <Juerd> autrijus: again? 

[22:00] <autrijus> Juerd: if it's not set yet, please set it to http://autrijus.org/tmp/id_dsa.pub

[22:00] <Juerd> You can do that yourself

[22:00] <autrijus> but I can't remove my password :)

[22:00] <autrijus> I mean, like, completely

[22:00] <autrijus> but that's fine

[22:00] <autrijus> thanks!

[22:01] * autrijus reads motd

[22:01] <autrijus> sure, I'm now using CNAMEs. strange how registerfly lets you use CNAME even for the domain itself

[22:02] <clkao> autrijus: tell me about the above before i fall asleep :P

[22:02] <Juerd> autrijus: set it to something complex that you won't remember.

[22:02] <autrijus> clkao: run_later will obviously just contain a struct to the vcode and args

[22:02] <autrijus> clkao: and run_me will feed them to apply

[22:03] <autrijus> Juerd: sure

[22:03] <clkao> ya, i mean how are they represented in c land?

[22:03] <clkao> if you can have that implemented i can make the final connect :)

[22:04] <autrijus> clkao: see

[22:04] <autrijus>  typedef void *HsStablePtr;  

[22:04] <autrijus> that's how all haskell stableptrs look at C land

[22:04] <autrijus> so I'll just use that.

[22:04] <autrijus> with

[22:04] <autrijus> newStablePtr :: a -> IO (StablePtr a)

[22:04] <autrijus> I can make any haskell type into a stableptr

[22:05] <autrijus> for you to put into C structs

[22:05] <autrijus> when they are called back, I can deref with

[22:05] <autrijus> deRefStablePtr :: StablePtr a -> IO a

[22:05] <autrijus> that's all. easy as pie

[22:05] <theorbtwo> Hmm...

[22:05] <theorbtwo> perlbot nopaste?

[22:05] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[22:06] <autrijus> clkao: also I'm already beginning to think about doing this without embed libperl

[22:06] <clkao> autrijus: how?

[22:06] <pasteling> "theorbtwo" at 84.245.186.159 pasted "Errors when compiling with perl5 support -- debian" (44 lines, 3.8K) at http://sial.org/pbot/10413

[22:07] <autrijus> clkao: I think almost all of the api can be emulated using socketpair

[22:07] <Juerd> Okay - had enough mcfood, enough hot chocolate

[22:07] <clkao> yuck!

[22:07] <autrijus> clkao: if you can load a SV by id

[22:07] <autrijus> almost everything else is trivial

[22:07] <Juerd> And I've been in these datacentra (both) more than enough for one day

[22:07] <autrijus> and I think that is solvable with Devel::Pointer or Pointer.pm or some such

[22:07] <Juerd> feather is up, connectivity is alright (should you manage to gain root access through some exploit, PLEASE DO NOT TOUCH THE AUTONEGOTIATION)

[22:08] <autrijus> theorbtwo: yeah, gaal reported same thing

[22:08] <theorbtwo> I saw the bottom half before, but not the top half.

[22:08] <autrijus> hm, Inappropriate ioctl for device at util/config_h.pl line 106

[22:08] <clkao> autrijus: you don't want to do that

[22:09] <autrijus> clkao: why not?

[22:09] <autrijus> having to embed perl is a pain, as theorbtwo observed ;)

[22:09] <clkao> autrijus: trust me. this will be more painful

[22:09] <autrijus> I mean, we already bridge external PGE that way

[22:09] <autrijus> ok... anyway we'll get the embed mode figured out first

[22:09] <clkao> oh, you know you want to use Acme::Ref

[22:10] <autrijus> er not really.

[22:10] <clkao> nevermind XD

[22:10] <autrijus> no, ingy's solution is best

[22:10] <autrijus> it is even pure perl

[22:10] <autrijus> Pointer.pm

[22:10] <clkao> so, if you feel bored, implement the above later stuff (with proper gc/refcnt). i can get the rest tomorrow

[22:11] <autrijus> I can handle haskell gc fine

[22:11] <ingy> oh no

[22:11] <ingy> Pointer.pm!

[22:11] <autrijus> I don't really understand refcnt but I can fake

[22:11] <autrijus> hi ingy!

[22:11] <ingy> it was a *joke* ;)

[22:11] * clkao trusts no ingry

[22:11] <autrijus> ingy: it is *invaluable*

[22:11] <ingy>  /kick clkao 

[22:11] <autrijus> ingy: it lets me write RPC perlembed code!

[22:12] * obra ponders ingrish

[22:12] <ingy> you are mad

[22:12] <ingy> mad i tell you

[22:12] <clkao> autrijus: make the run_later stub in a sample .c (maybe just in perl5).. so i can carry on

[22:12] <autrijus> I thought that's not news

[22:12] <autrijus> clkao: 'kay

[22:12] <ingy> :)

[22:12] <clkao> *sigh*

[22:12] <ingy> hi clkao 

[22:12] <autrijus> clkao: I think pugs guts will be quite transparent to your eyes... real PA02 sometime :)

[22:12] <ingy> clkao: still hate me?

[22:13] <clkao> mainly because of kwiki

[22:13] <autrijus> s/real/read/

[22:13] <clkao> autrijus: it's quite. i decided to make blutwurst from the pugs

[22:13] <autrijus> yeah. kwiki is so borderline. if it's worse, we won't feel compelled to suffer; if it's better, there won't be so much headache :)

[22:13] <autrijus> clkao: cool

[22:14] <obra> ingy's new despammy stuff makes life better

[22:14] <obra> I despammed a week's worth of spam in 5 minutes

[22:14] <clkao> anyway, get this done so i can implmement bin/svk in perl6 and at least one editor in perl6.

[22:14] <autrijus> yay!

[22:14] <autrijus> clkao++

[22:14] <autrijus> I'll get this done :)

[22:14] <clkao> autrijus++ # though you need no karma anymore :)

[22:15] <theorbtwo> autrijus, I think it's simply missing a header.  Ignore the 64-bit stuff it's whining about -- /usr/lib/perl/5.8/CORE/reentr.h:611: error: field `_crypt_struct' has incomplete type

[22:15] <autrijus> obra: hm, url to said despamming stuff?

[22:15] <autrijus> theorbtwo: that may be. I wonder if GHC is shadowing the .h somehow

[22:16] <ingy> clkao: what is wrong with kwiki?

[22:16] <clkao> it's ahteful

[22:16] <obra> autrijus: um. no url. Ingy hasn't released it yet, i think

[22:16] <clkao> internal server error when it's totally spammed

[22:16] <autrijus> or if it's because if the munging in line 174 inc/Module/Install/Pugs.pm

[22:16] <clkao> ::revisions plugin doesn't work with svk

[22:16] <ingy> clkao: you are a hatful of hollow

[22:17] <obra> basically, there's a mod to recent pages that takes you straight to page_info on the admin version of the kwiki

[22:17] <clkao> maybe someone needs to write a wiki in perl6.

[22:17] <obra> then there's a mod to PageInfo to reverse the listing.

[22:17] <autrijus> nice.

[22:17] <ingy> clkao: what obra say ^^

[22:17] <clkao> autrijus: so you will setup shared mirror depot for feather?

[22:17] <obra> ingy: that still doesn't stop the server error on spam

[22:17] <autrijus> clkao: thru local exploit? ;)

[22:17] <obra> it makes it easier to recover, though

[22:17] <clkao> autrijus: what local exploit?

[22:18] <autrijus> (meaning, there's no sudo on feather)

[22:18] <autrijus> how am I to setup shared depot thing?

[22:18] <clkao> oh

[22:18] <clkao> it's easy

[22:18] <clkao> i assume you are in same group?

[22:18] <clkao> fsfs handles that already

[22:18] <autrijus> so everyone link my .svk

[22:18] <autrijus> is that the idea?

[22:18] <clkao> get a mirror in /pugs/, which points to ~autrijus/pugs-=depot

[22:19] <clkao> and people map their default depot or /pugs/ to that repositroy

[22:19] <clkao> don't have to do SVKROOT=/home/autrijus/.svk, it's a bit annoying

[22:19] <autrijus> sounds yummy

[22:19] <autrijus> ok. then we put it to motd

[22:20] <autrijus> that will save lots of svn bandwidth

[22:20] <autrijus> svk++ # technology!

[22:20] <clkao> *nod*

[22:20] <clkao> and fscking disk space

[22:21] <clkao> did i tell you

[22:21] <autrijus> no you did not

[22:21] <clkao> at $work, the repository is 1.2G. svn co is 2.4G. svk co is 700M. 

[22:21] <clkao> so a mirror of the full history (36k revs) + checkout is fucking smaller than svn co

[22:21] <autrijus> are you using xdelta repo yet?

[22:21] <clkao> no

[22:22] <autrijus> I'm pondering a strategy of migrating foundry to that

[22:22] <clkao> why

[22:22] <autrijus> I especially want server side support for --limit

[22:22] <clkao> what for?

[22:22] <clkao> you dont want to hear me rant about it

[22:22] <theorbtwo> It will iff that svk repo is kept very up-to-date.  Otherwise it'll just be annoying.

[22:22] <clkao> IT DOESN"T WORK

[22:22] <clkao> oh, it's fixed for 1.2.1

[22:22] <autrijus> er.

[22:22] <clkao> theorbtwo: ? every commit will update it.

[22:22] <autrijus> that renders the rant less effective

[22:22] <clkao> theorbtwo: any time you do svk up -s

[22:22] <autrijus> theorbtwo: everyone can update it with svk pull

[22:23] <theorbtwo> Ah, of course.

[22:23] <theorbtwo> Nevermind then.

[22:23] <autrijus> :)

[22:23] <clkao> we use shared svk depot at work, proven to be very helpful and efficient.

[22:23] <clkao> never had out-of-date problem.

[22:23] <autrijus> wunderbar

[22:23] <clkao> so it's proven technology

[22:24] <clkao> s/proven/enterprise/

[22:24] <clkao> bwaha

[22:24] <knewt> clkao: btw, i'm seeing an "unexpected success" from the svk test suite

[22:24] <autrijus> clkao: so did you submit to euroscon?

[22:24] <clkao> knewt: oh? which one?

[22:24] <clkao> autrijus: yes, with help from obra :)

[22:24] <autrijus> do I get to see your submission?

[22:25] <autrijus> ooh.

[22:25] <clkao> autrijus: but i think i'll go anyway.

[22:25] <clkao> autrijus: http://nopaste.snit.ch:8002/2713

[22:25] <autrijus> greetings mrborisguy

[22:25] <knewt> clkao: 70symlink.t, [[ ok 50 - got svn:special # TODO revert overwritten symlink from file ]] 

[22:26] <clkao> knewt: interesting.

[22:26] <knewt> clkao: however, the following TODO subtest fails [[ not ok 51 - t/checkout/symlink/non.lnk.cp is symlink # TODO revert overwritten symlink from file ]]

[22:26] <clkao> ah, i must have fixed soemthing accidentally

[22:26] <clkao> knewt: would you like to be able to commit to svk?

[22:27] <autrijus> (accidental fix)++ # my favourite kind of fix

[22:27] * autrijus looks at #svk backlog and grins

[22:27] <clkao> autrijus: do you handle p5 returned arrahref/hashref yet?

[22:27] <autrijus> 03:00 < clkao> bad news. i like haskell

[22:27] <autrijus> clkao: planning to now

[22:28] <clkao> autrijus++

[22:28] <autrijus> clkao: and I'll do auto deRV!

[22:28] <clkao> COOL

[22:28] <knewt> clkao: heh, yeah, sure. run stuff by you first before actually committing anything?

[22:28] <autrijus> eval_perl5('@INC').[0]

[22:28] <autrijus> eval_perl5('\@INC').[0]

[22:28] <autrijus> will be the same thing.

[22:28] <knewt> autrijus: so can you embed both perl5 /and/ parrot at the same time?

[22:28] <autrijus> no more hateful cryptoreferencing

[22:28] <autrijus> knewt: yes, using PUGS_EMBED=perl5,parrot

[22:28] <autrijus> or parrot,perl5 if you prefer

[22:28] * q[acme] giggles

[22:29] <autrijus> or outer punctuation chars

[22:29] <knewt> autrijus: ah, ok. i tried doing PUGS_EMBED="perl5 parrot"

[22:29] <clkao> q[acme]!

[22:29] <autrijus> knewt: that should also do

[22:29] <knewt> hmm. didn't seem to when i tried it. of course, that was several days back now *g*

[22:29] <q[acme]> clkao: found your new project? ;-)

[22:30] <clkao> q[acme]: no, sadly i'm just going to stick with svk, but slowly port things to p6 piece by piece

[22:30] <mrborisguy> as added props for p6... it takes a lot less time to compile than 5.8.6

[22:30] <clkao> q[acme]: how are you party boy

[22:31] <autrijus> knewt: worksforme

[22:32] <autrijus> knewt: I can eval PIR defined in SVs

[22:32] <autrijus> it's not quite ponie, but it's still fun :)

[22:33] <theorbtwo> So long as there is a \b between them, it's all good.

[22:37] * q[acme] parties

[23:48] <drbean> The svn,svk tests for version in the Makefile are hanging the build on my machine

[23:49] <drbean> svk outputs a line about the base directory being not a checkout directory

[23:50] <drbean> this is printed when I run the pugs_version.pl script by itself

[23:51] <drbean> the line is not printed when run by make and the build hangs

[23:58] * Limbic_Region does a little dance as he is on the net from home again

[23:58] <theorbtwo> Congrats, Limbic~Region!

[23:58] <theorbtwo> Welcome to the wonderful world of connectivity!

[23:58] <Limbic_Region> well, not quite

[23:58] <Limbic_Region> only got digital cable - not HD

[23:58] <Limbic_Region> and haven't gotten my VoIP phone working yet

[23:58] <Limbic_Region> but getting there

