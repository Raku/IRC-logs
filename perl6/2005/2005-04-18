[03:01] <jabbot> pugs - 2049 - commiting the changelog

[03:51] <jabbot> pugs - 2050 - check in a comment generator for review 

[04:17] <crysflame> after reading HOP i now understand the whole currying/callback thing

[04:19] <ingy> :)

[04:51] <jabbot> pugs - 2051 - added dies_ok() and lives_ok(); added te

[04:51] <jabbot> pugs - 2052 - added edge cases and error cases to t/bu

[05:04] <scw> autrijus: Hello, it seems I didn't fix all the trailing-space eating problem of %h<a> and %h{'a'}

[05:05] <scw> autrijus: only those in string interpolating

[05:05] <scw> i.e. my %h = a => 1;  "%h<a> <b>"  becomes "1 <b>" instead of ""

[05:11] <jabbot> pugs - 2053 - some more test cleanup and edge/error ca

[05:21] <jabbot> pugs - 2054 -  r14182@not (orig r2126):  autrijus | 20

[05:31] <jabbot> pugs - 2055 - * some cleanup on changelog

[05:53] <autrijus> scw: it only matters there anyway

[05:53] <autrijus> afaik

[05:54] <autrijus> fixed changelog

[05:57] <crysflame> hi, autrijus.

[05:57] <autrijus> foundry is back... time to change /topic

[05:57] <autrijus> hi crysflame 

[05:58] *** autrijus changes topic to: pugscode.org «Overview Journal Logs»

[05:58] *** autrijus changes topic to: pugscode.org «Overview Journal Logs» | r1773/winxp: 587/4256 smoke/win2k (occasional): http://xrl.us/fqum (158/4302, r2032) | pugs.kwiki.org

[06:01] <jabbot> pugs - 2056 - * some more cleanup and clarification on

[06:07] * mugwump goes home to play with his FreeBSD laptop

[06:09] <scw> autrijus: no,  %h<a> < %h<b>   should not be parsed as %h{'a'}{'%h<b'}

[06:13] <autrijus> oh, that bug is still there?

[06:18] <scw> ya, :(

[06:18] <scw> and I cannot even find out who eat those spaces :(

[06:19] <autrijus> likely "rule"

[06:19] <autrijus> all "rule" eats spaces

[06:20] <autrijus> only "verbatimRule" does not

[06:20] *** b6s_ is now known as b6s

[06:20] <scw> :/

[06:21] <jabbot> pugs - 2057 - delete some of the sappier phrases

[06:21] <jabbot> pugs - 2058 - * bring Lexer uptodate to use "Cxt"; als

[06:21] <scw> Wow, I make my ghc panic :p

[06:48] *** castaway_ is now known as castaway

[06:51] <jabbot> pugs - 2059 - delete obsolete 'isnt' tests 

[07:11] <jabbot> pugs - 2060 - Add myself to AUTHORS

[07:12] * castaway flips jabbots off-switch ,

[07:21] <jabbot> pugs - 2061 - * clean up the nick part on pernod's UTF

[07:51] <jabbot> pugs - 2062 - Really fix the space-eating problem on %

[07:51] <jabbot> pugs - 2063 - Fix wrong test on string interpolation.

[08:10] * theorbtwo wonders who removed the trailing spaces in the AUTHORS file.

[08:16] <castaway> 2060 maybe?

[08:17] * theorbtwo shrugs.

[08:18] <castaway> why does it need trailing spaces?

[08:19] <theorbtwo> Because the trailing spaces are the clue to fixauthors that the utf8 names have already been added automatically and then removed manually.

[08:20] <theorbtwo> (Because fixauthors isn't smart enough to not add the utf8 name when it would be the same as the ASCII name.)

[08:21] <theorbtwo> (Both because I'm lazy and haven't made it check, and because it's not that simple -- I consider the name in the first column the same as the one in the third column even if the middle name has a representational change.)

[08:22] <castaway> Ah

[08:22] <castaway> Maybe you should add a note to the file that says that?

[08:25] <mj> pugs -e "require Test; ok(!(eval 'my $a = [ { 1 }, { 3 } ]; $a().ref; 1'), '');"

[08:26] <kungfuftr> moo

[08:26] <mj> how to catch this?

[08:26] <kungfuftr> $!

[08:27] <castaway> use not_ok, for starters ?

[08:27] <castaway> (assuming pugs' Test has one)

[08:27] <scw> why $a() ?

[08:27] <theorbtwo> I think you actually want ok_dies, or whatever it's called.

[08:28] <theorbtwo> dies_ok

[08:29] <theorbtwo> Morning, lightstep.

[08:30] <mj> pugs -e "require Test; plan 1; ok(!(eval ' my $a = [ { 1 } ]; say $a().ref; 1'), '');"

[08:33] <mj> dies_ok, eval  .... output is still "pugs: cannot cast from VList [VCode ( ..."

[08:33] <mj> scw: because $a = [ { 1 } ], say $a().ref  ... say Int

[08:35] <lightstep> good morning

[08:38] <scw> mj: IMHO, $a = [ { 1 } ] makes $a a reference of array whose first element is a subroutine

[08:39] <scw> to call it, shouldn't we use $a[0]()  ?

[08:39] <scw> Then,  my $a = [ { 1 }, { 2 } ]; $a[2]()  works fine

[08:39] <castaway> I think he's trying to test if it dies sanely

[08:40] <scw> Oh

[08:40] <castaway> (ie it should give a perl error, not a haskell one :)

[08:40] <mj> pugs -e "my $a = [ { 1 } ]; say join ' ', $a.ref, $a[].ref, $a[0].ref, $a[0]().ref, $a().ref;"

[08:40] <mj> Array Array Sub Int Int

[08:41] * castaway looks at mj for confirmation

[08:41] <castaway> allo nm!

[08:41] <theorbtwo> Do it, and then do an ok(1, 'We're still alive after trying to call an array ref')?

[08:42] <mj> pugs -e "my $a = [ { 1 }, { 2 } ]; say join ' ', $a.ref, $a[].ref, $a[0].ref, $a[0]().ref, $a().ref;"

[08:42] <mj> pugs: cannot cast from VList [V

[08:43] <mj> castaway ... yes it should dies

[08:43] <mj> IMHO

[08:44] <nothingmuch> hola

[08:44] * nothingmuch goes back to the doctor

[08:47] * nothingmuch wonders where corion is

[08:47] <mj> pugs -e "require Test; plan 2; ok(!(eval 'my $a = [ { 1 }, { 2 } ]; say $a().ref; 1'), ''); ok(1,1)"

[08:47] <mj> 1..2

[08:47] <mj> pugs: cannot cast from VList [VCode (Sub {isMulti = False, subName = "<anon>", s...

[08:47] <mj> pugs -e "require Test; plan 2; dies_ok( { my $a = [ { 1 }, { 2 } ]; say $a().ref; }, ''); ok(1,1)"

[08:47] <mj> 1..2

[08:47] <mj> pugs: cannot cast from VList [VCode (Sub {isMulti = False, subName = "<anon>", s ...

[08:49] * castaway wonders if mj can talk english as well as P6

[08:50] <castaway> It looks like it doesnt die_ok, so put that in the todo? (I dont quite see why we need it in the channel)

[08:50] <theorbtwo> Make a new test file in pugsbugs with just that test in it.

[08:51] <theorbtwo> Design it so that it succeeds and does 1..1\nok 1\n, or fails and does a 1..1\n and then vanishes.

[08:51] * nothingmuch wonders what test failed in this report: http://www.nntp.perl.org/group/perl.cpan.testers/199247

[08:52] <mj> castaway:  I am sorry about my English.

[08:52] <castaway> Which english? :)

[08:57] <mj> say $mj.speaks('English');  # Bool::false

[09:34] <mj> eval 'my $a = [ { 1 }, { 2 } ]; say $a().ref'; is a eval bug, is it?

[09:37] <theorbtwo> Looks like it to me.

[09:37] <theorbtwo> Well, not sure the bug is in eval and not elsewhere.

[09:37] <theorbtwo> But it is almost certianly a bug.

[09:45] <mj> And can I add

[09:45] <mj> my $a = [ in => { a => 1, b => 2 } ]; say join ' ', $a.ref, $a[0].ref; 

[09:45] <mj> to mixed_multi_dimensional.t ?

[09:51] <castaway> Why are you joining? Just test one after the other?

[10:12] <mj> sorry, problem is Hash of Hashes ...

[10:12] <mj> my %hash = ('key', 'value', 'key1', 'value1');

[10:12] <mj> my %hash2;

[10:12] <mj> %hash2<in> = %hash;

[10:12] <mj> say join ' ', %hash2.ref, %hash2<in>.ref;  

[10:12] <mj> # Hash Array::Slice

[10:12] <mj> probably similar to Hash of ... in mixed_multi_dimensional.t

[10:19] <castaway> hmm, interesting question.. if the first sigil now doesnt tell you what type of output you wanted, how does it know?

[10:29] <mj> Can pugs return two arrays from sub?

[10:33] <mj> stupid typo .... return (\a, \b); of course

[10:58] <Juerd> References are hard!

[10:58] <Juerd> And will be even harder in Perl6!

[10:59] <Juerd> Well, easier to use by accident, harder to use on purpose.

[10:59] <osfameron> ah, that didn't seem to be the original plan..

[11:01] <castaway> The best laid plans..

[11:27] * theorbtwo returns.

[11:27] <theorbtwo> mj, fix your AUTHORS file entry?

[11:28] <castaway> You were away?

[11:28] * theorbtwo was away.

[11:30] <theorbtwo> (AUTHORS now has nearly-empty lines for "gcomnz", "mattc", "ninereasons", "putter", "tobez", "roie_m", "rootmj", and "wolverian"), but on the upside it now includes entries for all commiters.)

[11:30] <castaway> nifty

[11:30] <wolverian> I can add my name of course.

[11:31] <jabbot> pugs - 2064 - AUTHORS file updates, and another tool t

[11:31] <theorbtwo> Ah, nifty.

[11:31] <wolverian> and thanks. :)

[11:33] * castaway reccommends theorbtwo have lunch.

[11:34] <theorbtwo> Oh, the guy I found googling that I wasn't sure was you was.

[11:41] <jabbot> pugs - 2065 - fixing my AUTHORS line; and thanks to th

[11:41] <jabbot> pugs - 2066 - fixing my AUTHORS line; small tutorial_g

[11:46] <theorbtwo> Um, rootmj, the bit in parens and allcaps is supposed to be your CPAN ID.

[11:52] <castaway> Is there a hint that says so?

[11:54] <Juerd> castaway: Common sense! :)

[11:55] <castaway> not everyone has it ,)

[11:55] <mj> muhehe

[11:55] <mj> http://wiki.kn.vutbr.cz/mj/attach/pugs/tutorial_gen/tut-output/test4.p6.html

[12:04] <nothingmuch> stevan: ping

[12:04] <nothingmuch> theorbtwo: roie_m has mailed p6c with his full name

[12:04] <nothingmuch> i can hebrewise it if he's not here

[12:09] * nothingmuch 's eyes hurt, taking break from puter

[12:11] <jabbot> pugs - 2067 - encode_entities for tutorial_gen and fix

[12:11] <jabbot> pugs - 2068 - fix my and TortoiseSVN fault

[12:11] <theorbtwo> Roie Marianer is Hebrew?

[12:11] <nothingmuch> yup

[12:11] <nothingmuch> רועי מריאנר

[12:11] <nothingmuch> רועי מרינר

[12:12] <nothingmuch> either of these should work and he can correct it later

[12:12] <gugod> what does that mean?

[12:12] <nothingmuch> מרינר is prolly a european type name

[12:12] <nothingmuch> i'm asking a friend named רועיwhat his name means

[12:13] <castaway> (hmm, none of that looks like language here ,)

[12:13] <nothingmuch> he says 'either shepherd or something else, can't remember'

[12:13] <nothingmuch> literally it could mean 'my shepherd'

[12:13] <mj> damm it, I need break and food

[12:13] <nothingmuch> i'll ci it into the AUTHORS

[12:14] <theorbtwo> Thanks; my emacs doesn't want to paste that as utf8.

[12:14] <nothingmuch> and then i'm really going

[12:14] <nothingmuch> are pugsbugs tests being deleted?

[12:21] <jabbot> pugs - 2069 - roiem in hebrew

[13:04] <Juerd> They say on #perl that 93 x 18 = 1674

[13:04] <Juerd> That's just not true.

[13:04] <Juerd> It's 939393939393939393939393939393939393.

[13:06] <Juerd> Besides, you can't assign to that.

[13:06] <castaway> ,)

[13:07] <stevan> nothingmuch: pong

[13:15] <boogie> stevan: ping-pong

[13:18] <stevan> boogie: :)

[13:19] <stevan> boogie: I responded to you on perl6-compiler regarding CGI

[13:20] <boogie> stevan: and I picked up your second idea and answered it.

[13:21] <boogie> "What, if the first param() function call would trigger the whole parameter decoding?"

[13:23] * boogie closed the IRC application

[13:24] * boogie is here again

[13:24] <stevan> boogie: but what if you have 20 parameters

[13:24] <stevan> and one of them tells you if you need to read the rest

[13:25] <stevan> if we decode the param() only when you ask for it, that would be not be a problem

[13:26] <boogie> and what if you would like to read a param more than once?

[13:26] <stevan> boogie: oh,.. good point :)

[13:27] <stevan> boogie: with your idea we only need one $IS_DECODED flag

[13:27] * boogie hesitates

[13:28] <boogie> yes, you're right.

[13:29] <stevan> ok, so the first call to param() will decode all the params, or will it load the params()

[13:29] <stevan> how lazy to we want to be :)

[13:29] <stevan> actually if we don't load the params until the first param() call we dont need a flag at all

[13:30] <stevan> unless %PARAMS.keys { load_params() }

[13:30] <stevan> that is all we would need

[13:30] <boogie> yes, that's all I think

[13:30] <stevan> (well not all we would need, but that is the idea)

[13:30] <stevan> we would still need to check the GET and POST code

[13:30] <stevan> boogie: would you like to make the change? Or should I?

[13:31] <boogie> stevan: I can do it, but as you prefer. :)

[13:32] <stevan> boogie: you can do it, I actually need to do some $work anyway :)

[13:32] * stevan grumbles about having to code in perl 5 again

[13:33] <boogie> stevan: it's the same for me, but I'll do it. ;)

[13:33] <nothingmuch> pong2

[13:33] <stevan> boogie: we can split the work if you like :)

[13:34] <stevan> nothingmuch: howdy 

[13:34] <boogie> stevan: how? ;)

[13:34] <nothingmuch> hi ho

[13:34] <boogie> stevan: it doesn't seems to be a big job...

[13:34] * nothingmuch wonders where corion is hiding

[13:34] <stevan> boogie: do as much as you can, and when you boss catches you,.. commit and I will finish :)

[13:34] <castaway> work, he usually only logs in when he gets home.. (from my observations)

[13:35] <castaway> he's probably listening to the CB though

[13:37] <boogie> stevan: no boss, that's me. but I'll do, and you check it?

[13:39] <stevan> boogie: sounds good to me

[13:49] * theorbtwo pings nothingmuch.

[13:49] <nothingmuch> pong

[13:50] * nothingmuch chimes

[13:50] <theorbtwo> My keyboard and mouse arrived -- mind helping me get my machine running?

[13:50] <nothingmuch> sure

[13:50] <theorbtwo> I know very little about macs...

[13:50] <castaway> (plug keyboard into hole marked 'keyboard' .. )

[13:50] <nothingmuch> so where have you gotten so far?

[13:50] <nothingmuch> ah

[13:50] <theorbtwo> When I just let it boot, I now get a dark grey apple log on a grey background, with a waiting thing at the bottom.

[13:51] <nothingmuch> ADB is daisy chainable

[13:51] <theorbtwo> After a while, the apple logo changes to a "no".

[13:51] <nothingmuch> that means it's booting

[13:51] <nothingmuch> oi

[13:51] <castaway> its mac prolog ?

[13:51] <nothingmuch> you can get verbose boot by booting up with cmd+v

[13:51] <nothingmuch> and single user boot with cmd+s

[13:51] <theorbtwo> When I do verbose I get the repeating "cant OPEN: ".

[13:53] <castaway> hmm, drives attached?

[13:53] <theorbtwo> Yes, drives are attached.

[13:54] <theorbtwo> I wouldn't expect to get the grey and grey color scheme if it wasn't seeing the CD rom, as that's an OSX thing.

[13:54] <theorbtwo> Yep, thought so.

[13:54] <stevan> theorbtwo: is OS X on the disk yet?

[13:54] * castaway wonders what its trying to open then

[13:55] <theorbtwo> cmd-s booting stays at the alternating black and white with rounded corners and a pointer.

[13:55] <stevan> boogie: do you have any idea what merlyn is talking about? (see perl6-compiler)

[13:55] <theorbtwo> Nope, stevan.

[13:55] <stevan> theorbtwo: hold down c and turn on the power

[13:55] <stevan> older macs need to be told to look in the CD drive

[13:55] <boogie> stevan: I'm still trying to decode.

[13:55] <stevan> boogie: so am I :)

[13:58] <theorbtwo> I assume rebooting with alt-power, then holding down c, will work?  It's not set up so I can power and immidately hold down a key.

[13:58] <nothingmuch> you can do cmd+ctrl+power

[13:58] <nothingmuch> to get a reboot

[13:59] * theorbtwo wonders why mac people do not refer to metakeys the way they are labled.

[13:59] <theorbtwo> crtl=apple key, right?

[14:00] <nothingmuch> no, ctrl = ctrl

[14:00] <nothingmuch> =)

[14:00] <nothingmuch> cmd is the little flower/apple button

[14:00] <theorbtwo> OK.

[14:00] <nothingmuch> depending on how old your keyboard is

[14:00] <nothingmuch> and alt was labeled alt starting 1998 or so

[14:00] <nothingmuch> IIRC

[14:00] <theorbtwo> Apple and thing-that-looks-like-#-with-rounded-corners.

[14:00] <nothingmuch> yes

[14:01] <nothingmuch> that's the apple key

[14:01] <nothingmuch> or command key

[14:01] <theorbtwo> Gotcha now.

[14:01] <theorbtwo> Fortnatly, my alt key is labeled with both "alt" and funky-bent-line-and-dash.

[14:01] <theorbtwo> Anyway, holding c gets me the black-and-white-plus-cursor.

[14:02] <theorbtwo> Perhaps I should try swapping the cd and hdd; I don't know which is supposed to be witch.

[14:02] <nothingmuch> black & white plus cursor?

[14:02] <nothingmuch> describe black and white

[14:03] <theorbtwo> alternating black pixel and white pixel, with the corners rounded off to black.

[14:05] <theorbtwo> Swapped them, now trying C boot again.

[14:06] <nothingmuch> okay

[14:06] <nothingmuch> that sounds like the preboot screen

[14:06] <nothingmuch> firmware sort of thing

[14:06] <nothingmuch> it happens before a boot disk is found

[14:06] <nothingmuch> rounded corners are always there at the top

[14:06] <nothingmuch> (historic reasons?)

[14:07] * stevan fondly recalls the day he spent in the ROM monitor trying to get his NeXT slab to work

[14:08] * theorbtwo wonders if it's time to try booting to the open firmware.

[14:09] <boogie> stevan: code checked in

[14:09] <boogie> stevan: it seems to work

[14:10] <stevan> boogie: I will take a look :)

[14:10] <boogie> stevan: I used $IS_PARAMS_LOADED, because it's possible that %PARAMS.keys is false

[14:11] <jabbot> pugs - 2070 - load_params on demand

[14:12] <theorbtwo> When trying to boot into open firmware I get a repeating "unrecognized Client Program fromatstate not valid".

[14:13] <nothingmuch> oi

[14:13] <nothingmuch> that is something i've never seen

[14:14] * theorbtwo tries a prom zap.

[14:14] <castaway> hmm, that worked with qemu, no?

[14:15] <castaway> http://www.sk.netbsd.org/Ports/macppc/faq.html#formatstate-not-valid

[14:16] <nothingmuch>  http://eshop.macsales.com/OSXCenter/XPostFacto/Framework.cfm?page=Compatibility.html

[14:17] <nothingmuch> talks about beige g3s

[14:17] <nothingmuch> and the fact that they supported pre-panther

[14:17] <castaway> The list I found said 10.1 -> 10.3 was supported on G3/266

[14:19] <theorbtwo> Hm, I could have sworn I checked, and panther supported /all/ g[345] machines.

[14:20] <stevan> beige G3s are different than blue/white G3s

[14:21] <nothingmuch> theorbtwo: there is a distinction between oldworld and newworld macs

[14:21] <nothingmuch> i think panther likes newworld only

[14:22] <nothingmuch> the distinction can be most reliably found on yaboot/bootx pages

[14:22] <theorbtwo> I wonder if I should try finding an older OSX, or using XPostFacto.

[14:22] <nothingmuch> SEE would like panther, IIRC

[14:22] <nothingmuch> you could be very witty

[14:22] <nothingmuch> and install linux ppc on the thing

[14:22] <nothingmuch> and then try OSX inside of mol

[14:23] <castaway> hmm, maybe I misreadthis, and the italics mean you need the XPostFacto tool: http://www.graphixmad.plus.com/mac_troubleshooter/macs+systems.html

[14:25] <theorbtwo> Oh, looks like you need an existing 9 install to use XPostFacto.

[14:25] <theorbtwo> Which I do not have.

[14:25] <theorbtwo> (I bought a mobo only.)

[14:25] <nothingmuch> oi vey

[14:25] <castaway> hmm, bah

[14:26] <nothingmuch> i'll go with mol for starters

[14:26] <castaway> whats mol?

[14:26] <theorbtwo> Mac on Linux.

[14:26] <nothingmuch> 4th on google

[14:26] <nothingmuch> http://www.maconlinux.org/

[14:26] <castaway> ah

[14:27] <castaway> sneaky

[14:29] <theorbtwo> How slow is MoL?

[14:29] <castaway> it says native on the page

[14:29] <castaway> or rather, "No CPU emulation" (which is what I took it to imply)

[14:34] * theorbtwo wonders: debian or yellowdog (or other).

[14:42] <nothingmuch> debian

[14:43] <nothingmuch> but actually gentoo

[14:43] <nothingmuch> it's supposed to be pretty fast

[14:43] <nothingmuch> yellowdog is like redhat

[14:43] <nothingmuch> the stench remains

[14:43] <nothingmuch> i've had some bad experiences with debian

[14:43] <nothingmuch> but it's supposed to have improved a lot in the past 2 years

[14:43] <castaway> (oooh, Corion is watching us.. :)

[14:45] <theorbtwo> Yeah, debian it is.

[14:45] <theorbtwo> 20 more minutes on the dl of the netinst.

[14:46] <Limbic_Region> yeah - he says if you really need him [nothinmuch], you know where to find him

[14:46] * Limbic_Region slaps himself on the wrist for thinking every chat window is the Chatter Box

[14:47] * castaway already mentioned that way back then :)

[15:01] <jabbot> pugs - 2071 - Minor indentation fix and removal of end

[15:04] <machack666> pugs -e 'my %hash=(1=>2,3=>4,5=>6); say %hash{%hash.keys}'

[15:04] <machack666> > undef

[15:04] <machack666> pugs -e 'my %hash=(1=>2,3=>4,5=>6); say %hash.keys'

[15:04] <machack666> (1,3,5)

[15:04] <machack666> pugs -e 'my %hash=(1=>2,3=>4,5=>6); say %hash{(1,3,5)}'

[15:04] <machack666> (2,4,6)

[15:05] <machack666> should this go in t/arrays_and_hashes/

[15:05] <machack666> or pugsbugs?

[15:05] * nothingmuch still can't see corion when he logs into pm

[15:05] <nothingmuch> i wonder if it's worth a /msg

[15:05] <nothingmuch> yeah, why not

[15:05] <castaway> he just went home, nm

[15:05] <nothingmuch> ah

[15:05] <nothingmuch> bummer for me

[15:05] <castaway> yup, too slow.. otoh he may turn up here soon

[15:07] <machack666> I'll create a new test category: t/hashes/slice.t

[15:11] <jabbot> pugs - 2072 - Added not yet finished German talk "Perl

[15:11] <autrijus> hey lambdacamels

[15:11] <stevan> happy birthday autrijus !

[15:12] <theorbtwo> Happy birthday autrijus!

[15:12] * Limbic_Region msg'd autrijus cause he thought he would be too busy today but it is turning out to be a slow morning so "Happy Bday" again autrijus

[15:12] <autrijus> hey

[15:12] <autrijus> thanks =)))

[15:13] <autrijus> ooh perl6 talk from iblech

[15:13] <autrijus> I'll add my perl6 now the ultimate to it too

[15:15] <nothingmuch> [1 .. 3] »+« (5|10)

[15:15] <stevan> great,.. now I need to learn Haskell, german AND chinese :)

[15:15] <nothingmuch> what should this be?

[15:15] <nothingmuch> i expected [6|11, 7|12, 8|13]

[15:15] <nothingmuch> but i am getting something i'm not sure is the same

[15:15] <nothingmuch> any(6 7 8,11 12 13)

[15:16] <autrijus> nothingmuch: I think that's right

[15:16] <ninereasons> happy 24th autrijus 

[15:16] <autrijus> not 100% sure though

[15:16] <autrijus> thanks

[15:16] <ninereasons> you are one year older than my oldest child, autrijus 

[15:16] <nothingmuch> @a[0] stringifies in an odd way

[15:16] <nothingmuch> @a[1] is nothing

[15:17] <nothingmuch> ninereasons: i think you are the oldest #perl6-er then =)

[15:17] <nothingmuch> we were competing the other way

[15:17] <nothingmuch> i don't recall your entry

[15:17] <ninereasons> autrijus*2

[15:18] <theorbtwo> Ninereasons, you should fix your AUTHORS entry.

[15:18] <nothingmuch> autrijus: it's a junction of lists

[15:18] <nothingmuch> i think that's not right

[15:18] <nothingmuch> say @a[0].pick;

[15:21] <jabbot> pugs - 2073 - * add my P6tU talk from YAPC::Taipei 200

[15:21] <jabbot> pugs - 2074 - Added hash slicing tests.

[15:21] <jabbot> pugs - 2075 - Add realname

[15:21] <nothingmuch> i'm doing an interview for perl.it on pugs:

[15:21] <nothingmuch> - What the coolest thing you can do with Perl6 that is already working in PUGS?

[15:21] <nothingmuch> i said hyper ops or junctions

[15:21] <nothingmuch> anybody else got an idea?

[15:22] <stevan> Junctions and MMD (although MMD is not totally done yet)

[15:26] <nothingmuch> perlbot nopaste

[15:26] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[15:26] <nothingmuch> my answer:

[15:27] <pasteling> "nothingmuch" at 212.143.91.217 pasted "cool pugs things" (13 lines, 544B) at http://sial.org/pbot/9451

[15:27] <pasteling> "gaal" at 192.115.25.249 pasted "pure perl alarm (again) - fails parse" (28 lines, 646B) at http://sial.org/pbot/9452

[15:27] <gaal> hey all - coming back to alarm(). any idea why this doesn't parse?

[15:28] <gaal> also, how to declare a critical section?

[15:29] <theorbtwo> Mm, you name &?SUB, but show &?BLOCK.

[15:29] <autrijus> gaal: 1. we don't have the int type

[15:29] <nothingmuch> oops, copied example from tests

[15:29] <autrijus> gaal: there's not 2. :)

[15:29] <gaal> ah :)

[15:30] <gaal> that does help, thanks.

[15:30] <nothingmuch> sleep should use Num

[15:30] <nothingmuch> i would like to sleep for floating seconds

[15:30] <theorbtwo> alarm should probably take a Num, like sleep.

[15:31] <theorbtwo> Of course, it's free to round it, but it should certianly /take/ it.

[15:31] <autrijus> gaal: critical sections are not exposed by default

[15:31] <nothingmuch> nononono, it shouldn't round it

[15:31] <autrijus> I think you can do it using QSem (quantity semaphores)

[15:31] <gaal> okay, this code actuall works!

[15:31] <autrijus> oh. wow.

[15:31] <autrijus> color me impressed

[15:32] <gaal> modulo sending a signal :) because i haven't figured out to get the SIGALRM enum from haskell yet.

[15:32] <autrijus> oh. it's easy

[15:32] <autrijus> it's sigALRM from System.Posix.Signals

[15:32] <autrijus> but I think you'll be sad

[15:32] <autrijus> because the same module provides

[15:32] <autrijus> scheduleAlarm :: Int -> IO Int

[15:32] <autrijus> :)

[15:32] <gaal> autrijus, this was the easy part, the hard part was kill() as you remmber from the weekend :)

[15:33] <gaal> heh

[15:33] <autrijus> so... :p

[15:33] <gaal> then ahain why does the haskell lib one take an Int and not a Num?

[15:33] <autrijus> because the underlying C lib takes a Int.

[15:33] <autrijus> (iirc.)

[15:33] <gaal> because it doesn'twant to give the impression it can do 

[15:33] <gaal> yeah

[15:36] <gaal> well, i think (a) we need to make the signal enum accessible anyway (b) *we* can give fractional second alarms if available

[15:36] <gaal> is a %SIG hash specced?

[15:36] <gaal> %*SIG

[15:36] <autrijus> it's not. but "when unspecced, assume p5"

[15:37] <gaal> okay; so the first thing i want is to make my p6 code reentrant

[15:37] <gaal> still assuming a global sigalarm

[15:37] <Corion> Are we preflight already? Or is there time to check in my new tests, that break different things? :)

[15:38] <gaal> also, this mechanism can be used to do something else instead of a SIGARLM -- like run a deferrered thread!

[15:38] <gaal> a thunk

[15:38] <autrijus> oh wow, larry raised .specs which never entered my brain.

[15:38] <nothingmuch> .specs?

[15:39] <autrijus> apocalypses are the sort of documents that the more you read, the more things are in there

[15:39] <gaal> you call my $id = alarm(3.14, { say "pi" }), and then you have some time to cancel it via $id

[15:39] <autrijus> nothingmuch: lwall uses that to spec "@f = (1..Inf); push @f, @f;"

[15:39] <nothingmuch> gaal++

[15:39] <autrijus> Corion: you're free to check in things :)

[15:39] <nothingmuch> autrijus: p6l? p6c? or unlogged?

[15:40] <Corion> autrijus: Yay ;) I'll check in my first (nonworking) stab at splice()

[15:40] <autrijus> nothingmuch: p6l

[15:40] <autrijus>  590     04/18 Larry Wall      (2.3K) Re: Push and Pop on Infinite lists

[15:40] <Corion> (plus some updated/upgraded tests, I think)

[15:40] * nothingmuch will look

[15:40] <nothingmuch> Corion: can you send me complete results of Test::TAP::HTMLMatrix fail?

[15:40] <Corion> nothingmuch: I'll mail you the output

[15:40] <nothingmuch> i don't see exactly what test failed in there

[15:40] <nothingmuch> thanks

[15:40] <gaal> is there a release today?

[15:41] <Corion> nothingmuch: CPAN::YACSmoke doesn't sent the complete test output, supposedly because of a bug in Test::Reporter, or so Barbie told me

[15:41] <nothingmuch> oh well

[15:41] <Corion> nothingmuch: You want a nopaste or a mail?

[15:41] <gaal> are there *any* "builtins" written in pure p6 now? or are they all in Prim?

[15:42] <nothingmuch> either or, Corion 

[15:42] <nothingmuch> maybe nopaste is better

[15:42] <nothingmuch> this code belongs to us, not me

[15:42] <autrijus> gaal: they are all in Prim.

[15:42] <autrijus> gaal: not sure how to arrange Prelude.pm

[15:42] <autrijus> gaal: suggestions welcome

[15:44] <Corion> Test::TAP::HTMLMatrix passes all its tests when run interactively.

[15:44] <gaal> autrijus, Prelude.pm shoud prolly follow S29, no? ie, Perl6::Lists etc.

[15:44] <Corion> (v0.02)

[15:45] <Corion> ... but I used the Makefile.PL, not the Build script now. I'll try the other.

[15:45] <autrijus> gaal: sure... the thing is it should probably be turned into AST form

[15:45] <autrijus> to save overhead on parsing

[15:45] <autrijus> so we need a "make" rule for it

[15:45] <autrijus> Pugs/Prelude.hs

[15:45] <autrijus> or something like that.

[15:45] <gaal> you mean precomiled into every pugs instance

[15:45] <autrijus> aye

[15:45] <gaal> *nod* unfortunately i don't think i can help with that :)

[15:45] <Corion> Weird. Build.PL also passes all tests. Maybe that was with Module::Build 0.2609, I've now upgraded to M::B 0.2610.

[15:46] <Corion> Too bad/weird.

[15:46] <gaal> isn't the interactive "." command reversible?

[15:46] <nothingmuch> ah

[15:46] <gaal> ie, String -> AST (or whatever the type is?)

[15:46] <nothingmuch> Build.PL wants a new build step

[15:46] <nothingmuch> 2.6 required IIRC

[15:46] <nothingmuch> oh, but 2.609 is also 2.6

[15:47] <autrijus> gaal: you mean Main.parse

[15:47] <autrijus> gaal: write a Pugs.Compile.Perl6

[15:47] <autrijus> akin to deparse

[15:47] <autrijus> then we'd have reversible parse

[15:47] <autrijus> it's actually not hard and interesting

[15:47] <gaal> doesn't grydon's talk mention that?

[15:47] <autrijus> grydon?

[15:48] <gaal> graydon, sorry. http://www.venge.net/graydon/talks/mkc/html/index.html

[15:48] <nothingmuch> that was a wonderful talk

[15:48] <gaal> it was, and i didn't understand most of it :)

[15:49] <ninereasons> to me, it makes sense that an infinite array is to have a finite part

[15:49] <autrijus> gaal: oh. well, no, not really, his compiler can't gen a Makefile back

[15:50] <autrijus> gaal: you can look at Compile.Parrot if you want to write Compile.Perl6

[15:50] <autrijus> it will be much easier to work on .Perl6

[15:50] <gaal> i thought there was a bit where the went back and forth between ast and object language

[15:50] <autrijus> aye, but not ast and _source_ language

[15:50] <gaal> autrijus, i won't have time for this unfortunately :(

[15:50] <autrijus> that's fine :)

[15:51] <gaal> this is my last day before Tomorrow, heh

[15:51] <gaal> autrijus, on my part i can just offer to start Perl6:: by submitting alarm

[15:52] <gaal> or help with the release if it's happening soonish

[15:52] <Corion> Is there an easy fix against: pugs: cannot cast from VError "unimplemented 3-ary op: splice" (App "splice" [Val (VRef <Array>),Val (VInt 8),Val (VList [VUndef])] []) to [Char]

[15:52] <Corion> ?

[15:52] <gaal> Corion, how come it's a 3-op?

[15:53] <Corion> gaal: I don't know, but that's not the problem (that's a deeper problem). I get that error in $!, but pugs dies on me before I can do anything with the error.

[15:53] <Corion> gaal: I'm doing a 3-op in an eval, and pugs doesn't promote it to a 4-op. But I want to catch the error for now.

[15:53] <gaal> do you perhaps have a forgotten line at the bottom of Prim?

[15:53] <gaal> oh

[15:54] <Corion> Anyway - I'll commit the "work" of the weekend now - prepare for sudden unexplained test changes :)

[15:55] <autrijus> ok :)

[15:55] <gaal> should i just create Perl6/ at the top level then? or in ext/? it seems natural to put in one place everything that will eventually be loaded by default into pugs, so maybe not ext

[15:55] * autrijus braces for impact

[15:55] <gaal> maybe call it Prelude in honor of Haskell

[15:56] <autrijus> gaal: src/Prelude/Prelude.pm ?

[15:56] <Corion> Maybe call it Foreplay , in an attempt of humor that doesn't translate well from German ;)

[15:56] <gaal> but is it really in one module? S29 stipulates quite a few namespaces

[15:56] <Corion> r2077 is all my fault now ;)

[15:56] <theorbtwo> Prelude.Prelude would seem to be a rather questionable haskell namespace.

[15:56] <gaal> (and doesn't define which one alarm is in, but i can use my imagination :)

[15:56] <Corion> Ooops. :( I also committed my locally patched run-smoke.pl :(

[15:57] <Corion> Can somebody with a non-broken/nonpatched util/run-smoke.pl overwrite my version please?

[15:57] <Corion> Or can I undo such a commit?

[15:59] <gaal> Corion, i think there's svn revert for that? (not sure) or worst case, you can svn up -r2076 util/run-smoke.pl

[15:59] <Corion> gaal: Ah, thanks!

[16:00] <autrijus> looking at Corion's commit now

[16:01] <jabbot> pugs - 2076 - Additional slicing tests: calculated val

[16:01] <jabbot> pugs - 2077 - Added first stab at splice - doesn't wor

[16:01] <jabbot> pugs - 2078 - Added svn properties:

[16:01] <gaal> okay, i'm going off to meet a friend, see you guys later!

[16:02] <autrijus> have fun!

[16:02] <gaal> thanks, youu too (happy birthday too!)

[16:04] <putter> hmm... $x = 3 , without a preceding declaration, gives an Undeclared variable error.  is this right, or should I add a test?

[16:04] <Corion> putter: use strict; is in full effect by default nowadays.

[16:04] <Corion> ... later, this will become optional for oneliners I guess.

[16:05] <putter> autrijus: happy birthday ;)

[16:05] <ninereasons> strict will be optional when running with -e

[16:05] <autrijus> putter: thanks :)

[16:06] <Corion> autrijus: Happy Birthday from me as well!

[16:09] <ingy> hola

[16:09] <autrijus> hihi ingy 

[16:09] * putter trying to bootstrap scheme in a half-page of non-scheme code wonders what to do next.  maybe frob the symbol table directly...

[16:09] <masak> autrijus: is it still your birthday over there? in that case, happy $_

[16:09] <autrijus> it was 9 minutes ago :)

[16:09] <wilx> Happy default scalar variable? :D

[16:10] <masak> autrijus: ouch! :)

[16:10] <masak> wilx: happy whatever the topic happens to be, i.e. birthday

[16:10] <wilx> Oh.

[16:11] <jabbot> pugs - 2079 - Added EOL at EOF to t/builtins/lists/sum

[16:11] <nothingmuch> we have some unexpected success: http://nothingmuch.woobling.org/pugs_test_status/

[16:11] <nothingmuch> see the little yellow tiles

[16:11] <nothingmuch> http://nothingmuch.woobling.org/pugs_test_status/t/general/atoms.html#line_60

[16:11] <nothingmuch> oh wait, that's not todo

[16:12] <nothingmuch> or maybe it is

[16:12] <nothingmuch> dunno

[16:12] <nothingmuch> can you set a css property such that a page is blank filled on the bottom?

[16:13] <nothingmuch> roie_m++; # looks like his fixes are doing this

[16:14] <autrijus> ok, i'll look into failures now

[16:14] <putter> ingy: I saw something go by about folks having difficulty finding things in the synopses.  Wanting indexing.  I've found it useful to merge the synopses into a single synopses.pod, and the a&e into another.  makes searching easy.  perhaps something to add to Bible?

[16:15] * nothingmuch always managed with grep -ri

[16:15] <autrijus> p6bible s

[16:15] <autrijus> p6bible -q keyword

[16:15] <autrijus> p6bible -f heading

[16:15] <nothingmuch> and windows folks that might not have grep have google desktop

[16:15] <nothingmuch> so they should stop their whyning

[16:15] <Corion> nothingmuch: Windows folks also have F3.

[16:16] <Corion> nothingmuch: body { background-color: 7FF; } /* fills the page to the bottom */

[16:17] <Corion> Do optional lists (like ?List) work at all currently ?

[16:17] <theorbtwo> putter: Fix your AUTHORS entry, please.

[16:18] <crysflame> does google index the svn repo?

[16:18] <autrijus> Corion: I very much doubt it

[16:18] <Corion> autrijus: Ah ;)

[16:20] * cognominal just received  ATTaPL. This seems to be a great book. It apparently thread together papers that independantly did not made sense to me . paper so specialized I could place them in the larger contect due to lack of prerequisite knowledge by myself)

[16:21] <cognominal> It seems less scholar and more concrete too.

[16:21] <autrijus> cognominal: yeah. I'm happy it helps :)

[16:21] <autrijus> <- having just read Wadler's revised effects typing paper and Epigram team's dependent type paper

[16:22] <autrijus> mugwump: the latter I think is your cup of tea

[16:22] <Corion> theorbtwo: ping

[16:22] <theorbtwo> Pong.

[16:22] <autrijus> mugwump:  http://www.cs.nott.ac.uk/~txa/publ/ydtm.pdf

[16:24] <ingy> putter: yeah, sounds good

[16:24] <putter> "the arrival of GADTs in Haskell is a joy and a relief." - ydtm  :)

[16:25] <autrijus> that's why I jumped on it :)

[16:25] <autrijus> it is indeed a joy and a relief.

[16:29] <putter> ingy: re pod names: s.pod, so "p6bible s" works, seems nice.  not sure what to call the combined a&e.  I use "historical.pod"... blech.  anyway, I've a hack pod combiner if a real one doesnt exist out there...

[16:31] <jabbot> pugs - 2080 - Cleaned up splice.t to have less tests, 

[16:31] <autrijus> p6bible ae

[16:31] <autrijus> p6bible aieeeee

[16:31] <putter> theorbtwo: ok.

[16:31] <putter> autrijus: ;)

[16:33] <cognominal> autrijus: this paper is still hot from the oven

[16:35] * ingy has now lost 20.5lbs in 13 days

[16:35] <autrijus> cognominal: right, that's the great thing about type theory researches :)

[16:35] <autrijus> instant turnaround from paper to code

[16:35] <ingy> 6.5lbs to go

[16:37] <autrijus> alright... lots of rx broken

[16:38] <autrijus> "abc" ~~ rx:perl5/^abc$/ && $0

[16:38] <autrijus> this breaks

[16:38] <autrijus> basically every rx that has trailing $ breaks

[16:41] <jabbot> pugs - 2081 - updated entry for putter in AUTHORS

[16:41] <Corion> I didn't do it! :)

[16:41] <Corion> (or so I hope)

[16:41] <autrijus> I think it's roie_m.

[16:41] <Corion> Let's blame roie_m 

[16:42] <autrijus> I further thinks that's worth delaying 6.2.1 some more to get it fixed

[16:42] <autrijus> instead of forcing todos

[16:42] * autrijus finds even more rx qq bugs

[16:44] <autrijus> ok. I think we won't realistically hit preflight tonight :)

[16:44] <autrijus> I'll try to get tree in a healthier state now

[16:44] <autrijus> and we'll see if a monday release is possible

[16:46] * putter wonders if folks will start thinking about time in gmt as non-local communication becomes an increasingly significant part of their lives...

[16:46] <autrijus> we'll probably form tribes :)

[16:46] <autrijus> as in Eastern Standard Tribe

[16:47] <Corion> I think of gmt as almost local communication. But then, I usually communicate relative time units, like "in 8 hours" instead of "tomorrow".

[16:48] <crysflame> putter: one of my favorite things to do on irc is to respond to a 12-hour-old conversation

[16:49] <crysflame> presuming their clients are configured effectively, the people i address in response will receive it.. eventually

[16:49] <Corion> r2080 - http://datenzoo.de/pugs/win2k.html (even though it claims r2020, I think that's when somebody broke the automagic update9

[16:51] <putter> ... 30 hr/day drifting tribes...  "day of year mod 2 = 0" alternating all-nighter tribes...

[16:52] <Corion> Hah. I think I know why the svn version doesn't update anymore - likely the Makefile gets generated in a broken way that refers to the file before The Great Renaming.

[16:52] <Corion> Yep - looks like it in util/version_h.pl

[16:53] <autrijus> cool. please fix :)

[16:53] <autrijus> I'm fixing this annoying segfault in the interactive shell.

[16:54] * theorbtwo wasn't too wonderful careful about that.

[16:54] <Corion> I'm looking if my "fix" works

[16:55] <Corion> Yay. Seems like 'include "src/pugs_version.h"' in Help.hs seems to do what I want.

[16:55] <Corion> committed

[16:55] <Corion> r2082

[16:56] <autrijus> thx

[16:58] <Corion> autrijus: How do I do side-effects from Haskell onto a passed-in array? I need to do that for splice() - what should I read/where should I steal/cargo-cult code from?

[16:58] <Corion> Choosing the right cult is important before cargo-culting!

[17:00] <crysflame> ha

[17:00] <autrijus> lol

[17:00] <cognominal> you don't choose, the particular cargo is bestowed upon you.

[17:00] <autrijus> Corion: you want to call doArray with splice.

[17:01] <autrijus> Corion: there is a builtin splice method to arrays.

[17:01] <autrijus> just invoke it.

[17:01] <jabbot> pugs - 2082 - Make Pugs mention the svn version again

[17:01] <Corion> autrijus: Oh - I looked for that but didn't find it. Will look and use that one then, just like push/pop do.

[17:01] <Corion> thanks

[17:01] <autrijus> np :)

[17:01] <autrijus> splice is also nontested

[17:02] <autrijus> so it's fully possible that it's broken

[17:02] <autrijus> in that case, either repair it in src/Types/Array.hs

[17:02] <autrijus> or just for IArray in src/AST.hs

[17:02] <autrijus> or just punt to me

[17:03] * putter notices 4 "Looks like you planned N tests, but..." messages in a 1+ hour old build.

[17:10] <Corion> Should we have eval_is warn if the eval is not fatal, as that's somewhat unexpected?

[17:10] <autrijus> sure!

[17:10] <autrijus> also eval_is is not lexical really

[17:11] <autrijus> my $x = 3; eval_is('$x', 3) would fail

[17:11] <jabbot> pugs - 2083 - * the interactive shell no longer segfau

[17:11] <jabbot> pugs - 2084 - Promoted all tests from eval_is() to is(

[17:11] <autrijus> that annoys me

[17:11] <Corion> I'm hunting down (meanwhile) useless / unnecessary use of eval()

[17:11] <autrijus> can someone think of a p6esque implementation of eval_is?

[17:11] <autrijus> it doesn't matter if pugs can't run it; it matters that it's p6ish and preferably okayed by @larry

[17:11] <stevan> autrijus: thats what I was trying to do with throws_ok

[17:11] <stevan> but that wont catch parsefails

[17:12] <autrijus> there shouldn't be any parsedfails that can't be caught by eval :-/

[17:14] <autrijus> jabbot: seen roie_m 

[17:14] <jabbot> autrijus: roie_m was seen on Sun Apr 17 17:26:37 2005 GMT

[17:14] * theorbtwo wonders if we can make PUGS_HAVE_HSPLUGINS reflect to perl6, so I can test it properly.

[17:15] <autrijus> theorbtwo: sure... I wonder if you can make it into a regular util/config_h thing.

[17:15] <autrijus> theorbtwo: and in any case, I'd be fine with a $?PUGS_HAVE_HSPLUGINS

[17:15] <theorbtwo> Cool.

[17:15] <theorbtwo> Wouldn't that be $* ?

[17:16] <autrijus> $* then.

[17:17] <putter> autrijus: ok, that was a fun paper.  thanks!  anyone: volunteers to do an LtU entry?

[17:18] <stevan> autrijus: well all we need for throws_ok is for that t/pugsbugs/code_blocks_as_sub_args.t to run

[17:18] <autrijus> putter: shapr pointed me to it. not sure whether he'll LtU it or not

[17:18] <stevan> I figure I can smartmatch the $expected_error arg, which should cover Str, Rule and Class comparisons (IIRC)

[17:19] <gaal> heya

[17:19] <Corion> Hmmm. No, too many false alarms for automagic _eval_  removal.

[17:21] <gaal> autrijus: on the reversible parse idea, i think it would be hella rad if we have an option for a fully reversible AST, which yields the exact source at it came from the compilation unit. this is very useful for large refactoring tools, eg IDEs

[17:21] <stevan> Corion: false alarsm?

[17:21] <Corion> stevan: I was trying to automate weeding out unnecessary eval_is and eval_ok calls by doing a diag() if the eval didn't die.

[17:21] <autrijus> gaal: preserving comments and whitespaces?

[17:21] <gaal> yes

[17:21] <autrijus> gaal: that would require annotations at each token level

[17:21] <Corion> But that doesn't always work, as some stuff doesn't parse, yet still works within an eval :)

[17:22] <autrijus> gaal: I think it's ~much easier to just attach each token with the "span" of line/column

[17:22] <autrijus> just like GHC 6.4 does

[17:22] <autrijus> we do it at statement level now, but it can be finer grained.

[17:22] <theorbtwo> ...which is also useful for error messages.

[17:22] <gaal> we already need to keep strings around for Perldoc

[17:22] <autrijus> gaal: right, I think it's a good idea.

[17:23] <theorbtwo> Boggle -- it worked the first time.

[17:23] <autrijus> try to think out some TODO tests?

[17:23] <autrijus> or start writing S20?

[17:23] <gaal> of course in production code all this shouldn't necessarily have to go in; and the AST can already contain optimizations

[17:24] <gaal> which one is S20?

[17:24] <autrijus> "debugging"

[17:24] <gaal> oh, didn't nothingmuch start on that?

[17:25] <autrijus> that's A20

[17:26] <gaal> Corion has a point up there, we'd love to have partially parsable compilation units. Eclipse does it already for Java... no idea how though.

[17:26] <Corion> I have a point where?

[17:27] <gaal> where you say some stuff doesn't parse, and some stuff is in eval

[17:27] <gaal> or is that crosstalk? :)

[17:27] <gaal> Corion++; # no matter, you have a point anyway

[17:28] <gaal> this reminds me of polyglot poems, someone just brought that up recently

[17:35] <Corion> Aaah - I think I see now where the problem is. Some errors (like method lookup errors) don't set $!

[17:36] * Corion goes to write a test to confirm that

[17:39] <autrijus> good read:

[17:39] <autrijus> http://www.intertwingly.net/blog/2005/04/13/Continuations-for-Curmudgeons

[17:40] <autrijus> (via LtU)

[17:41] <Corion> Ah. Yes - if the method itself exists, but the signatures fail to match, $! doesn't get set. Where should that test go? Into magicals/ for $! ? Into subs/ ?

[17:42] <autrijus> magicals I think

[17:44] <Corion> should I name the test dollar-underscore.t ? :)

[17:47] <Corion> Hmmm. No, seems like I just don't understand how signatures interact. Anyway - I wrote five tests that check $!. That's good too :)

[17:56] * autrijus is impressed by Corion's attention to details

[17:56] <Corion> s!attention!obsession!, but what exactly did impress you?

[17:56] <autrijus> just looking thru your commit diffs :

[17:56] <autrijus> :)

[17:56] * castaway ruffles Corion

[17:57] * Corion boings

[17:57] <autrijus> obsession is clearly the correct term here

[17:57] <Corion> autrijus: I feel more like a chainsaw there, than doing detail work :)

[17:57] <theorbtwo> Try to keep it down, Corion.

[17:57] <theorbtwo> .oO(Or at least in your pants.)

[17:58] <autrijus> that's ok... we are building a swiss army nuke anyway

[17:58] <Corion> I thought today was no-pants day?

[17:58] <castaway> eh?

[17:58] <castaway> shame, seems I missed it

[18:06] <Corion> Hmm. If I have sub foo($a is rw) { $a++ }; and then call it with foo(19); # that should die, and set $!, correct?

[18:07] <castaway> why?

[18:08] <Corion> castaway: Because it tries to write to $a. IMO, that is an error....

[18:08] <Corion> (because $a is the constant number 19)

[18:08] <castaway> oh, right

[18:08] <castaway> I was stuck looking at the "rw" bit

[18:09] <theorbtwo> "is rw" is the perl 5 model.

[18:11] <theorbtwo> sub foo {$_[0]++} foo(19)

[18:11] <Corion> Weird. Singled out the tests work, but in other settings, $! does not get set... But I'm too tired at the moment to pursue this further ...

[18:11] <Corion> &

[18:12] <castaway> later C

[18:12] <theorbtwo> Later, Corion.

[18:12] <theorbtwo> May your pause be refereshing!

[18:20] <boogie> somebody can tell me, if I could write a file in pugs?

[18:21] <jabbot> pugs - 2085 - Added tests for $!

[18:21] <jabbot> pugs - 2086 - Backed out my eval-checks out of Test.pm

[18:21] <jabbot> pugs - 2087 - math/log.t doesn't need eval() anymore

[18:21] <jabbot> pugs - 2088 - chr.t doesn't need eval() anymore

[18:21] <jabbot> pugs - 2089 - ord.t doesn't need eval() anymore

[18:21] <jabbot> pugs - 2090 - Added test for modifying a constant

[18:21] <autrijus> my $fh = open(">file");

[18:21] <autrijus> $fh.say(...)

[18:22] <boogie> autrijus: thx :) 

[18:26] <autrijus> np :)

[18:27] <autrijus> hey, would people find my() useful?

[18:27] <autrijus> as opposed to toplevel my()

[18:27] <autrijus> but rather inline

[18:27] <autrijus> ($x, my ($y), $z) = 1..3;

[18:28] <theorbtwo> Hm?

[18:28] <castaway> ummm

[18:28] <theorbtwo> That doesn't already work?

[18:28] <stevan> yuk

[18:28] <autrijus> theorbtwo: that doesn't. all var decl is currently stmt-level only

[18:28] <autrijus> which I think is quite limiting

[18:29] <autrijus> but hey, nobody ever complained :)

[18:29] <stevan> while (my $line = =$fh) would be nice though

[18:29] <theorbtwo> It doesn't exactly lead to clear code.

[18:29] <theorbtwo> But it is useful from time to time.

[18:29] <theorbtwo> Also, it's specced, I think.

[18:29] <ninereasons> "useful" is the operative word, I think.

[18:29] <theorbtwo> stevan: foreach =$fh $line -> {} would be the normal way to do it.

[18:30] <autrijus> for =$fh -> $line {}

[18:30] <theorbtwo> But the way you wrote should work, if only for compatability with the fingers of p5 programmers.

[18:30] <theorbtwo> Er, right, for, not foreach.

[18:30] <stevan> theorbtwo: very true

[18:31] <hlen> i really don't like the look of unary =

[18:31] <hlen> but oh well

[18:32] <theorbtwo> Neither do I, hlen.

[18:32] <autrijus> hlen: you can always write readline().

[18:37] <ninereasons> stevan, may I msg you?

[18:37] <theorbtwo> jabbot, seen nothingmuch?

[18:37] <jabbot> theorbtwo: nothingmuch was seen on Mon Apr 18 16:15:28 2005 GMT

[18:40] * theorbtwo wonders if there's anybody about who might be nice enough to point me to a .iso of an OSX 10.2 (Jaguar) CD, or any older MacOS CD.

[18:46] <stevan> ninereasons: sure

[18:48] <stevan> theorbtwo: 10.2?

[18:50] * castaway nods.

[18:50] <theorbtwo> 10.2 would be wonderful.

[18:51] <stevan> uhm,...ok

[18:51] <stevan> I got the physical CDs (there are 2), and a powerbook,.. how do I make you an image?

[18:52] <theorbtwo> Start disk tool, should be an option to make an image out of a disk, I think.

[18:53] <stevan> ok,.. gimme a moment :)

[18:53] * stevan putters around his hard drive looking for the right tools

[18:53] <theorbtwo> Ah, dd if=/dev/disk1s0 bs=2k of=jaguar-1.iso

[18:55] <theorbtwo> Allo, pdcawley.

[18:58] <stevan> theorbtwo: read-only, compressed or DVD/CD master?

[19:00] <stevan> and it seems to want to make a .dmg

[19:00] <theorbtwo> Try using dd if=/dev/disk1s0 bs=2k of=jaguar-1.iso, then bzipping the file.

[19:01] <jabbot> pugs - 2091 - * "uniq" not yet implemented ==> un-un-e

[19:01] <jabbot> pugs - 2092 - normalized the few tests which said plan

[19:01] <jabbot> pugs - 2093 - Added note to self to not forget to incl

[19:01] <jabbot> pugs - 2094 - a couple more phrases

[19:01] <theorbtwo> Otherwise, try "compressed"; I think I can find something to deal with dmg files.

[19:01] * autrijus stares at the huge flow of commits

[19:02] * autrijus submits an Euro OSCON talk.

[19:02] <Corion> autrijus: I'm not the only one suffering from commit-withdrawal

[19:02] <autrijus> Corion: I have this feeling that summarizing them at this moment would amount to solving the halting problem.

[19:03] * theorbtwo tries to remember to fix AUTHORS before release this time.

[19:07] <boogie> stevan: are you there?

[19:07] <stevan> boogie: yes

[19:07] <mj> parsedfails example that can't be caught by eval?

[19:07] <mj> pugs -e "eval 'my $a = [ { 1 }, { 2 } ]; say $a().ref';"

[19:07] <boogie> stevan: CGI.pm has a header sub, and as I see, it has a bug.

[19:08] <stevan> boogie: what's the bug?

[19:08] <boogie> stevan: sorry, no bug, I just misunderstood the code :D

[19:08] <stevan> :)

[19:08] <autrijus> hrm. I try to tie the "Boot camp" image with "Perl 6 Bootstrapping" together in my talk title and fails

[19:08] <autrijus> "Perl 6 Bootstrapping Camp"?

[19:09] <autrijus> "Perl Rebooted"?

[19:09] <theorbtwo> Note to self: hit the body of the tab, not the little x.

[19:09] <boogie> stevan: it's strange, that you don't put \n after location or content-type, just at the "return"

[19:09] <theorbtwo> Nah, Rebooting Perl 6 is what we're doing right now.

[19:09] <theorbtwo> Getting it out of it's rut.

[19:10] <theorbtwo> Remember that you want \cM\cJ, and not just \n.

[19:10] <Corion> Hmmm. Upgrade to Firefox 1.03 went seamless and it even kept all bookmarks and plugins it seems.

[19:10] <castaway> grats Corion

[19:10] <theorbtwo> Cool.

[19:10] <theorbtwo> I'd expect nothing less; it's a minor secuirty flaw update.

[19:10] <Corion> (this was from 1.0pre)

[19:10] <theorbtwo> Oh.

[19:11] <Corion> yep :)

[19:11] <jabbot> pugs - 2095 - Oops! s/foreach/for/

[19:11] <theorbtwo> In that case, I would have expected much less, very cool.

[19:11] <Corion> I also didn't expect it, but it's very nice indeed.

[19:11] <stevan> boogie: that is so that the $charset variable is supported

[19:13] <boogie> stevan: yes, it's OK now. :) I just wanted to insert a set-cookie header (only as a hack not yet extending the CGI.pm) exactly before the return and I didn't find where is that "\n"

[19:15] <stevan> boogie: I think that Location or Content-Type are supposed to be the last headers (but I may be wrong)

[19:15] <theorbtwo> HTTP headers should be mostly order-independent.

[19:16] <boogie> Yes, as I know, order doesn't matter.

[19:21] <jabbot> pugs - 2096 - added end-of-file newlines to .hs files 

[19:23] <nothingmuch> can i splat an idea on the chat (For a talk at YAPC::NA)

[19:23] <nothingmuch> and get some feedback?

[19:23] <autrijus> sure!

[19:23] <theorbtwo> Shoot.

[19:24] <nothingmuch> it's called "Safe sex in the 70s - robustness, KISS and the waterbed complexity theory"

[19:24] <nothingmuch> therein is discussed:

[19:24] <nothingmuch> where are bugs more "nasty"

[19:24] <nothingmuch> which code needs to be more free of bugs

[19:24] <nothingmuch> that KISS lowers bugs

[19:25] <nothingmuch> but the waterbed theory makes them go up eventually

[19:25] <nothingmuch> and what I normally do to keep things balanced

[19:25] <nothingmuch> with a bit of perl 6 thrown in at the end

[19:25] <nothingmuch> and how I think it will help

[19:25] <autrijus> that looks disorganized :)

[19:25] <nothingmuch> explain

[19:26] <theorbtwo> Hm, it looks pretty interesting to me.

[19:26] <autrijus> basically it's about complexity management

[19:26] <nothingmuch> autrijus: yes, but a naive perspective into it

[19:26] <autrijus> I'm not sure how waterbed fits here

[19:27] <nothingmuch> it introduces the 70s to the title ;-)

[19:27] <autrijus> because KISS is about "chopping off" the going up part

[19:27] <autrijus> and only keeping the low part

[19:27] <autrijus> so explain the waterbed?

[19:27] <nothingmuch> well, in the last 3 things I wrote i've managed to get far more KISS by raising the complexity a bit

[19:27] <nothingmuch> for example, making a script into 3 pipelined scripts required:

[19:28] <nothingmuch> locking, transactions, and a protocol

[19:28] <autrijus> right, that's called modular design, but that still doesn't quite explain the waterbed :)

[19:28] <nothingmuch> but eventually made things work out much better

[19:28] <nothingmuch> another example: anticipated growth of project is in a series of modular objects

[19:28] <nothingmuch> interacting with one object

[19:28] <nothingmuch> how complexity was moved from N space to constant space

[19:29] <nothingmuch> by making the one object a bit too big for XP heads maybe

[19:29] <nothingmuch> but keeping the N objects very lean and maintainable

[19:29] <nothingmuch> the one object was refactored mercilessly

[19:29] <nothingmuch> but still has about 500 lines of code

[19:29] <nothingmuch> and the objects that support it directly are another 500 or so

[19:29] <nothingmuch> but the hard parts are each no more than 100

[19:30] <autrijus> ok, so focus on that

[19:30] <nothingmuch> which work reliably, even in flakey situations (like relying on rsh)

[19:30] <nothingmuch> what do you mean? focus on examples?

[19:30] <autrijus> yes

[19:30] <nothingmuch> or focus on N -> 1 conversion?

[19:30] <nothingmuch> ah, ofcourse

[19:30] <autrijus> focus on how one can practically refactor the problem space

[19:30] <nothingmuch> examples are the means to convey the message

[19:31] <nothingmuch> but i would like to identify to in the talk: where KISS fit in

[19:31] <nothingmuch> what was the cost of forcing KISS

[19:31] <autrijus> sure, but I mean, stress in your abstract that this will be a "from the trenches" talk

[19:31] <nothingmuch> or what I had to do to allow more KISS (by pulling up the waterbed)

[19:31] <nothingmuch> hmm, good point

[19:31] <nothingmuch> any more tips?

[19:31] <autrijus> where it will be much easier to get accepted

[19:31] <autrijus> because otherwise you'll sound like another XP theorist

[19:31] <nothingmuch> ah... nope

[19:31] * nothingmuch has never gotten along well with XP

[19:32] <nothingmuch> mainly because i haven't yet worked in teams

[19:32] <autrijus> I think you can drop the waterbed really.

[19:32] <autrijus> waterbed is about "complexity is a constant in a problem space"

[19:32] <autrijus> which clearly doesn't apply

[19:32] <autrijus> because complexity grows in your case

[19:32] <theorbtwo> Well, no, it doesn't.

[19:32] <nothingmuch> i keep getting shoved in for quick ninja jobs

[19:32] <nothingmuch> but then i won't have the 70s ;-)

[19:32] <nothingmuch> hmm

[19:33] <nothingmuch> i remembered complexity is: you shove it down here, it bulbs up there

[19:33] <nothingmuch> that's why i liked the metaphor

[19:33] <autrijus> that may be true when you are designing general-purpose tools (like perl 6)

[19:34] <autrijus> but I think for specific projects, like the one you are discussing, good modeling really kills the complexity

[19:34] <autrijus> not only shoving it under the carpet

[19:34] <autrijus> which the waterbed theory would suggest

[19:34] <putter> complexity reduction _and_ relocation

[19:34] <autrijus> so in my mind your talk is more like

[19:34] <nothingmuch> what I will propose as solutions on case by case basis

[19:34] <autrijus> "KISSing the unsighty frog"

[19:35] <nothingmuch> (safe sex while dieting - ask ingy!)

[19:35] <autrijus> "refactoring seemingly impossibly complex problems into managable ones"

[19:35] <nothingmuch> hmm, i don't think it's seemingly impossible

[19:35] <nothingmuch> anywho, the ideas I want to bring up as silver bullets: forcing overmodularization when you find nothing else to do

[19:35] <autrijus> ok, then "divide and conquer complexity as it increases"

[19:36] <nothingmuch> raking down knowlege to the lower hierarchies in the object connectivity graph, as a rule of thumb

[19:36] <theorbtwo> The sexy army theory: Divide, conquer, and KISS.

[19:36] <autrijus> theorbtwo: ooh

[19:36] <nothingmuch> heh

[19:37] <autrijus> but, the thing is, I (as a hacker) is very interested in hearing your real world stories and the Kata you formed

[19:37] <autrijus> but any overabstraction is an instant turnoff :)

[19:37] <autrijus> that may just be me, though.

[19:37] <nothingmuch> it's more of a joke really

[19:38] <theorbtwo> Aye.

[19:38] <theorbtwo> It can really go either way.

[19:38] <theorbtwo> Too much of either leaves me with a "well, duh" feeling.

[19:38] <autrijus> true that.

[19:38] <autrijus> although I like the Kata imagery.

[19:38] <nothingmuch> maybe if we shove 'post-mortum' in the begining of the premise somehow then it will be obvious that this is "real"

[19:38] <nothingmuch> yeah

[19:38] <nothingmuch> 1 minute of theory

[19:38] * nothingmuch has a turnoff from all those 'testing is cool, xp says so'

[19:38] <nothingmuch> and then 'here's how you write a test file'

[19:39] <nothingmuch> 20 minutes of examples

[19:39] <nothingmuch> i like to see a little of both:

[19:39] <nothingmuch> find a problem, or some related problems in the real world

[19:39] <nothingmuch> try to think of them as related by abstracting a bit

[19:39] <nothingmuch> figuring out what the problem really is

[19:39] <nothingmuch> and then reapplying to reality

[19:39] <autrijus> yeah, that works pretty good. try to work that into your talk abstract, perhaps?

[19:40] <nothingmuch> sure will

[19:40] <nothingmuch> ooh, 'complexity water-bed' is an interesting google

[19:40] * nothingmuch wonders when he started using google like a verb

[19:41] * putter still trying to nail core idea...  "proper placement of simplicity"?

[19:42] <putter> eg, "KISSing the _right_ frogs"

[19:42] <nothingmuch> http://64.233.183.104/search?q=cache:bRhp4J6Xz4MJ:www.lohutok.net/talks/p6design.pdf+water-bed+complexity&hl=en&start=2&client=safari

[19:42] <nothingmuch> putter++

[19:43] <nothingmuch> and then "but you still had the same amount of water in the mattress" http://www.garbett.org/?q=node/3

[19:44] <autrijus> "Princess 101: Kissing the right frogs"

[19:44] <nothingmuch> but he sort of contradicts it in a logical way

[19:44] <nothingmuch> complexity is not decreased

[19:44] <nothingmuch> it's simply spread out

[19:44] <nothingmuch> but if it's spread out to thin, then it kicks back

[19:45] <nothingmuch> i.e., you want something to be both shallow, and not too broad

[19:45] <nothingmuch> but you can't

[19:45] <nothingmuch> what I think i sort of learned to do from those things is to choose where I want it shallow

[19:45] <nothingmuch> because being broad in a limited space is OK

[19:45] <nothingmuch> versus where I prefer that it's deep

[19:45] <nothingmuch> the rationale is: it's easier to read shallow code

[19:45] <nothingmuch> but it's harder to piece it together

[19:46] <nothingmuch> if there are too many chunks of shallow code, then you grow too broad to fit in memory

[19:46] <nothingmuch> and even exposé can't help you

[19:46] <nothingmuch> i think the ideas are supposed to help you organize breadth

[19:47] <nothingmuch> so that you can be shallow, but broad in an expected way

[19:47] <nothingmuch> and have bunches of shallow and bunches of deep interacting with each other

[19:47] <nothingmuch> so that it's shallow in bits at a time

[19:47] <nothingmuch> that's why the waterbed theory of complexity popped up initially

[19:47] <nothingmuch> does it make sense?

[19:48] <theorbtwo> How to choose where you want the lumps in your waterbed?

[19:49] <putter> Techniques for kissing on the waterbed.

[19:49] * castaway is all lost.

[19:49] <nothingmuch> lumps in the waterbed

[19:49] <nothingmuch> ick

[19:50] <Khisanth> castaway: go geta water bed? :)

[19:50] <castaway> no thanks, they're all so wobbly

[19:50] <Khisanth> nothingmuch: that just means the AC is turned too high

[19:51] <jabbot> pugs - 2097 - Added EOLs at EOFs.

[19:51] <jabbot> pugs - 2098 - Added SVN properties in t/:

[19:51] <nothingmuch> Khisanth: you think i have the money for an AC /and/ a shag carpet?

[19:52] <Khisanth> a what carpet?

[19:52] <castaway> shag!

[19:53] <nothingmuch> dude, like, the thing you put in your van

[19:54] <nothingmuch> xrl.us is being slow

[19:55] <nothingmuch> http://xrl.us/fs6c

[19:56] <putter> iblech: beat me to it.  there are still a few left (files wo EOLs at EOF).  are you going to do them?

[20:00] <putter> nothingmuch: Princess 101: Choosing which frogs to KISS, and where to lie on the waterbed.

[20:00] * nothingmuch sort of prefers 'safe sex in the 70s'

[20:00] <nothingmuch> i think it sums it up well ;-)

[20:01] <nothingmuch> quick poll: you are going to attend the talk because:

[20:01] <nothingmuch> it's interesting

[20:01] <nothingmuch> you don't want to be impolite and not come

[20:01] <nothingmuch> you're not going to anyway

[20:02] <castaway> you missed "theres nothing else on right now"

[20:02] <autrijus> what castaway said

[20:02] <autrijus> but, 4am!

[20:02] <nothingmuch> those are both your choices? how rude!

[20:02] <castaway> I cant tell what Ill go to and what not, until I see the entire plan

[20:02] * autrijus sleeps. *wave* &

[20:02] <nothingmuch> ciao autrijus!

[20:02] <castaway> nope I didnt chose one, just said you missed it

[20:02] <nothingmuch> ah

[20:02] <nothingmuch> =)

[20:03] * castaway currently has no idea what its about ,)

[20:03] <castaway> night autrijus 

[20:05] <nothingmuch> well, i'll submit what we've got

[20:06] <castaway> my order of picking things goes "interesting subjects" and then "I know that guy" (and sometimes vice versa ,)

[20:06] * nothingmuch 's too

[20:06] <putter> g'night.

[20:11] <jabbot> pugs - 2099 - Cleanups of the HTTP and HTML of http-se

[20:11] <jabbot> pugs - 2100 - Added EOLs at EOFs and appropriate svn:m

[20:11] <jabbot> pugs - 2101 - Added a small README to examples/network

[20:13] * putter wonders just how hostile "waterbed" talk sounds in radically genderskewed groups...

[20:13] <nothingmuch> define genderskewed

[20:14] <nothingmuch> mostly male?

[20:15] <putter> yes.  especially of a two orders of magnitude to one flavor.

[20:15] <PerlJam> putter: to those people that know perl, there is no hostility.

[20:15] <PerlJam> (no matter the gender)

[20:16] <theorbtwo> Part of the point of YAPC is that it's supposed to be laid back.

[20:16] <castaway> but not *that* laid back ,)

[20:16] <theorbtwo> But from looking about last year, less then 1/4 of those attending are female.

[20:16] <Khisanth> there are people hostile towards waterbeds? wouldn't that be ... abit messy?

[20:16] * nothingmuch wonders how much it would cost to shag-carpet the event place

[20:16] <nothingmuch> location, rather

[20:16] <Khisanth> nothingmuch: too much :)

[20:17] <theorbtwo> I doubt the 98 chestnutters would like it.

[20:17] <nothingmuch> that would make it very laid back though

[20:17] <nothingmuch> we could put those space chairs

[20:17] <nothingmuch> and light the place with lava lamps

[20:17] <castaway> :)

[20:17] * nothingmuch so wanted to grow up in that era

[20:18] <nothingmuch> perhaps i still do

[20:19] <wolverian> porting my recent p5 module to p6 feels nice. I can really appreciate gather/take more now. :)

[20:19] <nothingmuch> wait till it bites you

[20:19] <wolverian> it wouldn't do that. :/

[20:19] <nothingmuch> it shouldn't have been lazy, or at least if it was, it should be all or nothing kind of lazy

[20:20] <nothingmuch> it should be great for OBFus though

[20:20] <nothingmuch> generate the elements of an array in a gather/take

[20:21] <nothingmuch> and modify the index accessing them in the block

[20:21] <nothingmuch> with modulu arithmetic

[20:21] <nothingmuch> use that to de-shuffle a shuffled split //, "Just another Perl hacker"

[20:21] <nothingmuch> blammo, readability flattenned with a steam roller

[20:22] <wolverian> heh.

[20:23] * stevan wonders if nothingmuch has gotten into Larry's blue ice cubes or not

[20:23] <Khisanth> he replaced the sugar with ice?

[20:23] <wolverian> how useful is using a 'Str' type in a signature? I mean, just about everything stringifies, no? :)

[20:24] <nothingmuch> i reckon it would force stringification

[20:24] <wolverian> I guess I want that, then. maybe. hmm. ok.

[20:24] <stevan> Khisanth: if it's blue I dont think it matters what its made out of :)

[20:29] <nothingmuch> stevan: yup, that's a good analysis

[20:29] <nothingmuch> things that are blue and have the same effect:

[20:29] <nothingmuch> cheese

[20:29] <nothingmuch> popsicles

[20:29] <nothingmuch> uhm

[20:29] <nothingmuch> i can't think of any valid blue food

[20:32] <osfameron_> blue M&Ms ?

[20:33] <nothingmuch> good point

[20:34] <theorbtwo> blueberries?

[20:34] <gaal> blue cheese?

[20:34] <nothingmuch> blueberries are purple

[20:34] <nothingmuch> and blue cheese is dangerous

[20:35] <nothingmuch> gaal: i have elidel

[20:35] <nothingmuch> it burns so far

[20:35] <nothingmuch> in the face

[20:35] <nothingmuch> but it's helping with the elboes

[20:35] <nothingmuch> w

[20:35] <gaal> yes, it can do that at first. /msg?

[20:35] <nothingmuch> sure

[20:38] <mj> my %conf = ( each => 0 );

[20:38] <mj> say %conf{'each'}.ref ~ ' ' ~ %conf<each>.ref;

[20:38] <mj> Int Array::Slice ... r2061

[20:41] <jabbot> pugs - 2102 - added #!/usr/bin/pugs to a couple of tes

[20:47] <theorbtwo> G'night, pugsers.

[20:47] <putter> G'night, theorbtwo.

[20:49] <Qiang> blue screen

[20:54] <mj> Array to hash?   for @prep_index -> $key { %index{$key} = 1; }

[20:54] <PerlJam> ick.

[20:54] <PerlJam> %index{@array} >>= 1   # or whatever the operator du jour is.

[21:00] <Corion> r2097 - http://datenzoo.de/pugs/win2k.html ... good night!

[21:01] <mj> thanks, but not with Pugs yet

[21:01] <mj> I was thinking about %index = hash reverse @index.kv;, but index 0 corrupts it.

[21:02] <gaal> so >>+<< 1 it :)

[21:02] * gaal zzz&

[21:06] <mj> gaal: %index? how?

[21:09] <ninereasons> mj, are you just trying to say "my %hash = hash @array.reverse;

[21:17] <nothingmuch> thinking more, i think i want to make a c2.com page: BadBreath

[21:17] <nothingmuch> a subset of CodeSmell that make KISSing hard

[21:17] <nothingmuch> =D

[21:22] <mj> no, I am trying for @index -> $key { %index{$key} = 1; }  .. for $some exists in @index testing

[21:22] <mj> next if %index{$some};

[21:22] <mj> push @index, $some

[21:31] <ninereasons> perl5ish would be something like "map{ %index{$_} ++} @array"  mj

[21:31] <ninereasons> that might work

[21:32] <ninereasons> but what PerlJam said is the preferrable idiom, IMO

[21:33] * putter putter wonders if there is a p6 idiom list somewhere...

[21:33] <ninereasons> :) you're building it, I think, putter

[21:34] <putter> ;)

[21:34] <mj> g'night ... see some Pugs r2061 outputs .... http://wiki.kn.vutbr.cz/mj/attach/pugs/tests/tut-output/test03.p6.html

[21:35] <ninereasons> night, mj

[21:38] <putter> mj: nifty...

[21:41] <putter> is anyone doing automatic html-ification of pugs?  specifically, pod2html'ing examples/?

[21:42] <stevan> putter: look at examples/tutorial-generator (or something like that)

[21:45] <putter> neat.  is anyone running a webserver which serves html'ified copies of the assorted pods in pugs?

[21:57] <crysflame> putter: i think ingy wrote a kwiki that uses pod as its backend once

[21:59] <ingy> aye

[21:59] <ingy> I think it is down at the moment

[22:01] <jabbot> pugs - 2103 - find other src files, some minor fixes a

[22:02] <putter> crysflame: thanks.  i was also using pods on the parrot vm twiki.  and it provided a pod2htmlified view of cvs source and doc files.  but the twiki was cracked, my domain was smashed, and i'm still not really back on the air.  or i'd do it for pugs in a second. :(

[23:21] <machack666> what is the expected result of comparing junctions?

[23:21] <mugwump> any(true,false,maybe)

[23:22] <machack666> $j = (6|7);

[23:22] <machack666> $j == $j

[23:22] <mugwump> well, any of (6,7) == any of (6,7), so true

[23:22] <machack666> > ((bool::false | bool::true))

[23:22] <machack666> that's what I'm currently getting

[23:23] <machack666> I would expect a true value

[23:23] <mugwump> my tongue-in-cheek answer was closer to the truth than I thought!

[23:23] <machack666> I guess it's saying that some of the elements match some of the other elements

[23:23] <machack666> which some elements do not match

[23:23] <machack666> s/which/while/

[23:23] <machack666> sounds like a maybe to me

[23:24] <machack666> we can also construct some logically implausible junctions.

[23:24] <machack666> $j = 6&7

[23:24] * crysflame watches with interest

[23:25] <machack666> obviously, this is only useful when comparing againns other juctions

[23:25] <machack666> as a normal scalar is never 6 and 7 at the same time

[23:25] <machack666> (that's actually how I got on the tangent above)

[23:26] <machack666> (6&7) == (6&7)

[23:26] <machack666> > ((bool::false | bool::true))

[23:26] <crysflame> 6&7 means.. 6 or 7?

[23:27] * crysflame tries to follow (6|7) vs (6&7) and fails

[23:27] <crysflame> given all(6,7) == all(6,7), 50% of the results are false and 50% are true

[23:27] <mugwump> 6&7 is the same as all(6,7)

[23:27] <crysflame> 6==6, 6==7, 7==6, 7==7

[23:27] <crysflame> which collapses to what pugs says, i guess

[23:27] <crysflame> cool

[23:27] <mugwump> 6|7 is the same as any(6,7)

[23:28] <machack666> ok, so the all case I can see why it breaks down

[23:28] <machack666> but what about the any case

[23:28] <machack666> shouldn't that just return a bool::true?

[23:28] <crysflame> any(6, 7) == any(6, 7)

[23:29] <mugwump> in bool context, yes

[23:29] <crysflame> hmm

[23:29] <machack666> what about in scalar context?

[23:30] <machack666> is that the "maybe" refered to above? ;)

[23:30] <machack666> or just true, but indeterminant

[23:30] <machack666> (or irrelevant)

[23:30] <mugwump> yes, it's irrelevant

[23:31] * mugwump nods sagely to make it look like he knows more than nothing

[23:31] * machack666 needs to feed his rugmonkeys

[23:31] <machack666> that sounds bad, actually...

[23:31] <machack666> :D

[23:33] <mugwump> ok, I think I understand why $j = (6|7); $i = ($j == $j) makes $i a superposition of true/false

[23:33] <mugwump> so that this works:

[23:34] <mugwump> if ($j == $j) { say "Ok" }

[23:35] <mugwump> if (!($j == $j)) { say "Ok" }

[23:35] <mugwump> if $j is any(6,7), both should OK

[23:35] <mugwump> if $j is all(6,7), neither should OK

[23:36] <mugwump> pugs> (6&7) == (6&7)

[23:36] <mugwump> ((bool::false & bool::true))

[23:36] <mugwump> pugs> (6|7) == (6|7)

[23:36] <mugwump> ((bool::false | bool::true))

[23:36] <mugwump> pugs> 

[23:37] <mugwump> It might not seem to make sense that the return value of a comparison is not a simple bool, but if what you're comparing isn't tangible either, that's what you get :)

[23:37] <crysflame> oh, that makes sense

[23:37] <crysflame> any(false, true) vs all(false, true)

[23:38] <crysflame> ow my head

[23:38] <crysflame> it doesn't make sense anymore :(

[23:39] <mugwump> in a SQL query, when you define a table alias, you're defining an entity which is a superposition of all the tuples in the table.

[23:39] <mugwump> So, when you use the expression (mytable.val = "SomeValue"), the "value" of that expression is a filter, not a boolean

[23:39] * machack666 returns to the discussion

[23:43] <machack666> pugs> $j = 1 ^ 2 ^ 3;

[23:43] <machack666> (1 ^ 2 ^ 3)

[23:43] <machack666> pugs> $j == $j

[23:43] <machack666> ((bool::true ^ bool::false ^ bool::false) ^

[23:43] <machack666>  (bool::true ^ bool::false ^ bool::false))

[23:43] <machack666> let's decipher this one

[23:45] <crysflame> ^?

[23:50] <machack666> so in boolean context, a junction is true if it has some degree of truth?  i.e., bool::true is on of the junctive arguments in the result?

[23:50] <machack666> or is that over simplifying?

[23:51] <jabbot> pugs - 2104 - quote generator: read in from file, chan

[23:51] <machack666> using the SQL analogy, if we retrieve any rows with our filter, it's true.

[23:53] <machack666> hmm... junctive combining is only working left-associatively.

[23:53] <machack666> or it is to sayis working differently than the right.

[23:53] <machack666> pugs> (1 | 2 | 3)

[23:53] <machack666> (1 | 2 | 3)

[23:53] <machack666> pugs> ((1 | 2) | 3)

[23:54] <machack666> (1 | 2 | 3)

[23:54] <machack666> pugs> (1 | (2 | 3))

[23:54] <machack666> ((1 | 2) | (1 | 3))

[23:55] <machack666> while those are equivalent, they should collapse to the same junction, according to S09

[23:56] <mugwump> sure.  make a failing test for that last bit if you like :)

[23:56] <machack666> I'm trying to figure out how to stringify a junction

[23:57] <machack666> "$j" just gives me a junction back...

[23:57] <machack666> that's not a lot of help... :D

[23:57] <mugwump> there's a .values method

