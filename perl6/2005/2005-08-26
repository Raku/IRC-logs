[00:33] <luqui> ?eval 41+1

[00:33] <evalbot_6496> 42 

[00:36] <geoffb> luqui, will evalbot rename itself continually to the current rev?

[00:37] <luqui> well, no

[00:37] <luqui> because I'm manually starting him

[00:38] <luqui> I don't have the constant recompilation hooks that whoever ran evalbot before did

[00:38] <geoffb> too bad, that

[00:39] <luqui> but the number will always reflect the revision that he's running

[00:39] <luqui> that's why I did that

[00:39] <luqui> because that revision may be 200 revs behind, which would indicate that he needs to be restarted

[00:39] <luqui> (after a recompile by me)

[00:39] <geoffb> it's a good idea anyway, even if you do get the recompile hooks running

[00:43] <geoffb> OK, let's see if I can build current pugs with optimization off, and precompile off.  If I suddenly fall off the channel, it's because I ran out of mem.  sigh.

[00:43] <luqui> geoffb, how much mem do you have?

[00:43] <geoffb> Sadly, this box only has 192 MB real plus 400 MB swap.

[00:44] <luqui> too bad ghc guzzles memory so badly

[00:44] <geoffb> It's on my list to buy a new box, but that hasn't happened yet, sigh.

[00:44] <svnbot6> r6497 | luqui++ |  r359@feather:  fibonaci | 2005-08-26 02:41:32 +0200

[00:44] <svnbot6> r6497 | luqui++ |  Take off the private message restriction from evalbot.  See why in

[00:44] <svnbot6> r6497 | luqui++ |  a comment in the file.

[01:06] <geoffb> OK, was able to compile with opt off, precompile off, parrot embed off, and perl5 embed off.

[01:06] <geoffb> Now to try with settings 0 0 0 1

[01:11] <luqui> geoffb, good

[01:11] <luqui> I compile with 0101 ususally

[01:12] <geoffb> My last 0101 OOMed, sigh

[01:12] <justatheory> seen autrijus

[01:12] <jabbot> justatheory: autrijus was seen 3 days 21 hours 38 minutes 13 seconds ago

[01:12] <justatheory> pity

[01:13] <geoffb> Though I think it actually might have succeeded had I ever gotten around to fixing the make targets to run ghc link as a separate pass from ghc compiles

[01:13] <justatheory> the svnbot doesn't seem to be on #jsan anymore. Anyone got any control over that?

[01:27] <luqui> justatheory, have you tried inviting it?

[01:27] <luqui> what was its name?

[01:28] <justatheory> no idea.

[01:32] <luqui> ?eval sub flatten(&code, *@args) { if &code.arity == 0 { &code() } else { flatten(&code.assuming(@args[0]), @args[1...]) } } sub foo($x, $y) = { $x * $y }  my @a = (3,4);  flatten(&foo, @a)

[01:32] <evalbot_6497> Error:  unexpected "=" expecting bare trait, trait or block 

[01:32] <luqui> ?eval sub flatten(&code, *@args) { if &code.arity == 0 { &code() } else { flatten(&code.assuming(@args[0]), @args[1...]) } } sub foo($x, $y) { $x * $y }  my @a = (3,4);  flatten(&foo, @a)

[01:32] <evalbot_6497> 0 

[01:32] <luqui> ?eval sub flatten(&code, @args) { if &code.arity == 0 { &code() } else { flatten(&code.assuming(@args[0]), @args[1...]) } } sub foo($x, $y) { $x * $y }  my @a = (3,4);  flatten(&foo, @a)

[01:32] <evalbot_6497> 0 

[01:32] <luqui> hmm

[01:32] <luqui> ?eval sub flatten(&code, @args) { if &code.arity == 0 { &code() } else { flatten(&code.assuming(@args[0]), @args[1...]) } } sub foo($x, $y) { "$x,$y" }  my @a = (3,4);  flatten(&foo, @a)

[01:32] <evalbot_6497> ',' 

[01:56] <nothingmuch> http://www.steelskies.com/coverflow/HomePage.html

[02:48] *** autark is now known as jp-autark

[02:56] <landover> interesting

[02:56] <landover> http://www.cnn.com/2005/TECH/internet/08/25/hackers.china/index.html

[02:57] <landover> wow seems to me the us f guys have some issues.............

[02:59] <landover> ah i say we just open source all govs.....

[08:47] <luqui> ?eval 7*2**2

[08:47] <evalbot_6497> 28 

[08:48] <luqui> 7*3*2

[08:48] <luqui> ?eval 7*3*2

[08:48] <evalbot_6497> 42 

[08:48] <ods15> 42!

[08:48] <luqui> you're almost faster than evalbot

[08:49] <luqui> ?eval 1^3^5 < 2

[08:49] <evalbot_6497> bool::false 

[08:49] <luqui> uhmmmmm

[08:49] <luqui> ?eval 1^3^5 < 4

[08:49] <evalbot_6497> bool::true 

[08:49] <luqui> yikes, that's wrong

[08:50] <ods15> ?eval 1^3^5

[08:50] <evalbot_6497> 1 

[08:50] <ods15> this is binary xor or something?

[08:50] <luqui> evalbot cannot print junctions correctly

[08:50] <luqui> it is a one() junction

[08:50] <ods15> ?

[08:50] <ods15> ?eval 3^5

[08:50] <evalbot_6497> 3 

[08:50] <ods15> ?eval a^2

[08:50] <evalbot_6497> Error: No compatible subroutine found: "&a" 

[08:50] <ods15> ?eval 1^2

[08:50] <luqui> but evalbot cannot print junctions correctly

[08:50] <evalbot_6497> 1 

[08:50] <ods15> ?eval 2^2

[08:50] <evalbot_6497> 2 

[08:51] <luqui> eval (2|3).perl

[08:51] <ods15> i don't understand

[08:51] <luqui> ?eval (2|3).perl

[08:51] <evalbot_6497> '(2 | 3)' 

[08:51] <luqui> there we go

[08:51] <luqui> ?eval (1^3^5).perl

[08:51] <evalbot_6497> '(1 ^ 3 ^ 5)' 

[08:51] <ods15> ?eval (2^2)

[08:51] <evalbot_6497> 2 

[08:51] <luqui> :-)

[08:51] <luqui> you know what a junction is?

[08:51] <ods15> no

[08:52] <luqui> have you seen Quantum::Superpositions?

[08:52] <ods15> no

[08:52] <luqui> oh good, then you're in for a treat

[08:52] <ods15> no

[08:52] <ods15> bleh, hungy

[08:52] <ods15> hungry

[08:52] * ods15 checks if kitchen is open yet.. should be...

[08:52] <ods15> bbl

[08:54] <ods15> grr, no :(

[08:55] <luqui> ?eval 3 > 2 | 4   # equiv. to 3 > 2 || 3 > 4

[08:55] <evalbot_6497> bool::false 

[08:55] <luqui> too bad they seem to be broken

[08:59] <luqui> ahh, they're not broken

[08:59] <luqui> ?eval ?(3 > 2 | 4)   # equiv. to 3 > 2 || 3 > 4

[08:59] <evalbot_6497> bool::true 

[08:59] <luqui> it's just that goddamn parsing issue again

[09:04] <ods15> what would be the most "elegant" way to take a field out of a "table" outputted by a program

[09:05] <ods15> best i can think of is    |perl -pe '$_ = split(/\s+/)[4];'

[09:05] <luqui> perl -ale 'print $F[4]'

[09:06] <luqui> oh, for every line

[09:06] <luqui> perl -nale 'print $F[4]'

[09:06] <ods15> no not for every line

[09:06] <ods15> and, heh, wow, neat

[09:07] <luqui> just for the first line?

[09:07] <ods15> yes

[09:07] <ods15> there's only one line anyway

[09:07] <luqui> oh, then the latter of those two should work

[09:07] <luqui> (the former doesn't, I think)

[09:07] <luqui> if you want to be sure, you could put a ;exit on the end of it

[09:07] <ods15> yes, '-nae' is enough

[09:08] <ods15> and, heh, good idea, it'll save me the '|head'

[09:08] <ods15> heh i can actually even save myself the greps!

[09:08] <ods15> last -i G still G ods15 H -1 |perl -nae 'print $F[2]'

[09:08] <ods15> i'll turn that into

[09:08] <luqui> (you have G aliased to "|grep"?)

[09:08] <ods15> |perl -nae '/still/ && /ods15/ && exit print $F[2]'

[09:09] <ods15> :D

[09:09] <ods15> luqui: and H into |head, and L into |less ....

[09:09] <luqui> that's a good idea

[09:09] <luqui> I type |grep -i enough

[09:09] <ods15> ya

[09:09] <ods15> yey

[09:09] <ods15> `last -i |perl -nae '/still/ && /ods15/ && exit print $F[2]'`

[09:10] <ods15> much more sanitized than the klunky mess i had before

[09:10] <luqui> as far as your "exit print $F[2]"

[09:10] <luqui> you are an evil bastard

[09:10] <luqui> if you don't want an erroneous exit status

[09:10] <luqui> you could be less evil by saying perl -nae '/still/ && /ods15/ && print $F[2] && exit'

[09:10] <luqui> hmm, that last && might need to be "and"

[09:10] <ods15> i like being evil

[09:10] <ods15> i don't care about the return code...

[09:11] <ods15> i only care about the output

[09:11] <luqui> okay, be evil

[09:11] <luqui> I guess for perl that is quite mild

[09:11] <ods15> whats evil about it?

[09:11] <luqui> well, you're passing something as an argument to a function for the sole purpose of getting the side effect of evaluating the argument

[09:11] <luqui> but... well... again, it's quite mild

[09:12] <luqui> it just threw me off a little

[09:12] <ods15> i'm used it. i tried out for the ioccc :D

[09:12] <luqui> ods15, what was your submission?

[09:12] <ods15> see my work... hold on

[09:13] <ods15> http://rafb.net/paste/results/tVyBWk41.html

[09:13] <ods15> i haven't sent it yet, gonna send it next year

[09:13] <luqui> yummy

[09:13] <ods15> i'll probably not win, but it was fun making it

[09:14] <ods15> just like you said, i did a lot of "work" in return codes

[09:14] <luqui> err, how do I use it

[09:14] <ods15> functions which are nothing but 'return ...;' where all the work is there...

[09:14] <ods15> well, compile it, run it, and feed it 81 numbers to stdin

[09:15] <luqui> oh cool!  it does a bus error!

[09:15] <luqui> (I'm on amd64 if you do anything on that level)

[09:15] <luqui> seq 1 81 | ./a.out

[09:16] <ods15> oh, yes, its a known bug, due to int to pointer cast amd64 wont work :(

[09:16] <ods15> http://rafb.net/paste/results/Ii1Vju65.html

[09:16] <ods15> those are nicely meaningful numbers...

[09:16] <ods15> nice thing 'seq', never knew about it

[09:16] <ods15> and you can't give it numbers bigger than 9

[09:17] <luqui> what do the numbers mean?

[09:17] <ods15> well, run it and you'll understand, to fix your casting bug, change this line...

[09:18] <ods15> line 13

[09:18] <ods15> 9     +j%    3*3     +a/3*9     +a%     3 ;     } T o(     m,n     ) {     u(

[09:18] <ods15> into

[09:18] <ods15> 9     +j%    3*3     +a/3*9     +a%     3 ;     } T o(     const void*m,const void*n     ) {     u(

[09:18] <luqui> that line starts with a *

[09:19] <ods15> ah, yes, i missed it in the copy/paste

[09:19] <ods15> tell me if there are any bugs in it except that... (not including input tolerance - 81 numbers, all between 0 to 9)

[09:20] <luqui> it looks like it worked

[09:20] <luqui> you are insane

[09:20] <ods15> yeah, exit code should be zero unless it failed

[09:20] <ods15> nah, other ioccc entries are way more insane

[09:20] <luqui> wait... what does it do

[09:20] <ods15> look at the output

[09:20] <luqui> I thought it generated magic squares, but these are not magic at all

[09:20] <ods15> it's pretty easy to understand/guess

[09:21] <ods15> no, but that's pretty close

[09:21] <luqui> ahh it's those thingies

[09:21] <luqui> every row and every column and every box have all nine numbers

[09:21] <luqui> unless you don't give it an equal number... then what?

[09:22] <luqui> it must be sums

[09:23] <luqui> no, it's not sums

[09:23] <luqui> wtf is it?

[09:23] <luqui> the only time I understood it is when I gave it "yes 0"

[09:24] <ods15> ?

[09:24] <ods15> lol

[09:24] <ods15> no, you were right the first time

[09:24] <ods15> 12:21:43 <luqui> every row and every column and every box have all nine numbers

[09:24] <luqui> but that's not true

[09:24] <ods15> what do you mean an equal number?

[09:24] <ods15> if the exit code is zero, it should be true

[09:24] <ods15> if it's not, it means the board is basically unsolvable

[09:24] <luqui> ahhhhh exit code

[09:25] <ods15> well it obviously can't solve an unsolveable board, what did you expect?

[09:26] <luqui> shouldn't it be able to solve perl -le 'print for (1..9)x9'

[09:27] <ods15> no, that's not a valid board

[09:27] <ods15> look at it

[09:27] <ods15> all the rows are all 1's, all 2's, all 3's, etc.

[09:27] <luqui> so, um, how does it "solve" it?

[09:27] <luqui> it has to rearrange things somehow?

[09:27] <luqui> right?

[09:27] <ods15> it fills in the missing 0's

[09:27] <ods15> no

[09:27] <luqui> ohkay

[09:28] <luqui> it fills in missing 0s

[09:28] <ods15> the 0's are blanks

[09:28] <luqui> gotcha

[09:28] <ods15> the rest are "consts"

[09:28] <ods15> it's called sudoku, some silly game recently very popular where i live

[09:29] <ods15> yey, i think i've finished adding caching when streaming mp3's from home to army...

[09:29] <ods15> there's one big problem left though, if i stop the song in the middle...

[09:30] <ods15> ssh -o StrictHostKeyChecking=no -T $IP " cd /home/ods15/mdf/temp; ( if [ -e '$MD5' ]; then exec cat '$MD5'; else exec tee '$MD5'; fi ) | mplayer -cache 1000 -cache-min 0 -quiet -

[09:30] <ods15> "

[09:30] <luqui> geez, it's hard to get solvable boards

[09:30] <ods15> seems to work

[09:30] <ods15> luqui: yes, quite

[09:30] <ods15> which is why you can use my program to make solvable boards

[09:30] <luqui> perl -le 'print int(rand 2)*int(rand 2)*int(rand 10) for 1..81'

[09:31] <ods15> i made a randomizer.c, which uses the solver as a "library"

[09:31] <luqui> tried it quite a few times with no success

[09:31] <ods15> try 10,000

[09:31] <ods15> using that method you'll get a solveable board about 1 every 10,000

[09:31] <ods15> probably less, since you used quite a silly method :)

[09:31] <luqui> if I cut it by another factor of 2?

[09:31] <luqui> well yeah

[09:32] <ods15> my randomizer outputs a max (actually, EXACTLY) 24 numbers

[09:32] <luqui> just random numbers with a nice high likelihood for 0

[09:32] <ods15> throws it at random places, and gives it to my program

[09:32] <ods15> that gave me a working board 1 every 10,000 or so

[09:33] <ods15> so i made it "smarter", making it not throw the random number if it doesn't meet the contraints

[09:33] <luqui> anyway, cool program. I ought to get to bed

[09:33] <ods15> cya

[09:33] * luqui &

[09:34] <luqui> Oh, I'm getting quite a few solvable boards with three int(rand 2)s in there

[09:34] <luqui> admittedly, there are an awful lot of zeroes in the output

[09:34] * luqui & # really

[09:40] <scook0> ods15: nice program

[09:52] <ods15> thanks

[09:52] <ods15> ok, i got a problem

[09:52] <ods15> i got a controlling program (frontend), and a personalized backend i wrote

[09:53] <ods15> when the frontend (which i didnt write) wants to kill the backend, it sends SIGINT to the etnire process group

[09:53] <ods15> the backend, written in bash, has some 'cleanup' to do, so i did 'trap '...' 2' to do the cleanup

[09:54] <ods15> the problem is, when the frontend kills the entire process group, even though it's trapped by bash, the programs IN the 'trap' are ALSO signalled to death

[09:54] <ods15> thus killing my cleanup

[09:54] <ods15> what should i do...

[09:59] <ods15> scook0: it has some nice algos too.. try to figure them out, they are mostly the defines

[11:21] <kvakke> seen masak

[11:22] <kvakke> seen jabbot

[11:22] <kvakke> ;(

[11:32] <smith100> hi im trying kml, with 2.6.12.5, whenever i run something in /trusted i get the following error, Unable to handle kernel NULL pointer dereference at virtual address 0000001c, tried google

[11:32] <smith100> ajs

[11:50] <pjcj> smith100: I'm not sure this is the best channel fro your question.  You might get an answer, but I wouldn't count on it.

[11:50] <pjcj> or does "ajs" mean you knew that?

[12:34] <ods15> someone reminds me how i 'dup' in perl?

[12:35] <ods15> oh, 'open stdin <&somefilehandle' ?

[12:48] <ods15> ah, good, this works as expected...

[12:48] <ods15> /still/ && /ods15/ && ($ip = (split ' ')[2]) && last for (`last -i`);

[13:09] *** yinjieh_ is now known as yinjieh

[14:05] <ods15> someone remind me how the hell do i use cpan

[14:05] <ods15> like, i type 'perl -MCPAN -e 'install something'' ?

[14:05] <ods15> hmm

[14:05] <fglock> just type 'cpan'

[14:06] <QtPlatypus> perl -MCPAN -e 'shell'

[14:11] <broquaint> perl -MCPAN -e 'install q[Module::Name]' # Should work, ods15.

[14:11] <ods15> yeah just typing 'cpan' did the trick

[14:16] <broquaint> Even better.

[14:18] <ods15> wow i hate cpan...

[14:18] <ods15> how is it possible to get a zombie child if you're not completely stuck or ignoring sigchld?

[14:22] <fglock> it is possible if you have a zombie wife 

[14:22] <ods15> har har

[14:23] <ods15> interestingly, unix is unisex :)

[14:47] *** _SamB_ is now known as SamB

[14:52] <SamB> any idea why I would have gotten an email entitled 專案開發網站新服務功能－「人才資料庫」 from OSSF [email@hidden.address]
[14:52] <elmex> whoa, utf8 :)

[14:52] <elmex> 人!

[14:54] <SamB> elmex: of course! you think I'm gonna use SHIFT_JIS?

[14:55] <elmex> ;)

[14:57] <hcchien> SamB: I guess it might be some kind of reminder of ossf's new service.

[14:57] <SamB> why japanese?

[14:59] <hcchien> it's chinese

[14:59] <SamB> oh, sorry, my bad

[14:59] <elmex> 功

[14:59] <SamB> I can't tell the difference, nevermind read either

[14:59] <elmex> i thought that that was hiragana

[14:59] <ods15>   PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND

[14:59] <ods15> 15515 root      25   0  7364 4120 4376 R 98.8  0.8  11:27.64 perl

[15:00] <ods15> that sounds bad

[15:00] <ods15> trying to install this cpan module, it's been stuck on make test for 11 minutes already

[15:00] <hcchien> The Japanese uses some Han words. :)

[15:00] <ods15> have i mentioned how much i hate cpan

[15:01] <broquaint> Which CPAN module, ods15?

[15:01] <ods15> Net::SSH::Perl

[15:01] <ods15> i'm not even done with the dependencies yet

[15:01] <broquaint> Just skip it.

[15:01] <ods15> the make test that got stuck is... Math::Pari

[15:01] <broquaint> Or force install it.

[15:01] <broquaint> Ah, it's probably because it's doing some bastard hard math(tm).

[15:01] <ods15> looks like its ok now.. i think...

[15:02] <broquaint> Or it's stuck in an infinite loop of doom.

[15:02] <ods15> no, still seems stuck.. i think...

[15:02] <broquaint> Just kill it, force install and move on.

[15:02] <ods15> the number in the make test is advancing, so i guess thats good

[15:02] <ods15> t/01-dh.........ok 12/18

[15:02] <ods15> it was stuck on 4 before

[15:03] <SamB> why does Net::SSH::Perl require PARI/GP?

[15:03] <ods15> yey 13...

[15:03] <broquaint> Just kill it. Tests are just there for politeness.

[15:03] <ods15> SamB: its probably for one of the crypt modules

[15:03] <ods15> Crypt::DH

[15:03] <broquaint> It does bastard hard math(tm), SamB.

[15:03] <ods15> i think

[15:04] <SamB> what in the world would anyone want with crypto so intensive that it requires a CAS to do? that has got to be slow...

[15:06] <ods15> now it's stuck on 15 for quite a while... sigh

[15:06] <ods15> whats CAS?

[15:06] <SamB> a Computer Algebra System

[15:07] <ods15> heh

[15:09] <ods15> well i did force install, looks like it works now

[15:09] <ods15> have i mentioned how much i hate cpan

[15:10] <broquaint> Do you hate CPAN or do you hate the CPAN interface, ods15? Because hating CPAN is like a crime against humanity.

[15:10] <ods15> i dunno

[15:11] <broquaint> The answer is you don't hate CPAN because that's wrong and we won't be having it in these parts.

[15:11] <ods15> bleh

[15:12] <ods15> great, the module doesn't work, looks like it didn't install math::pari after all

[15:12] * ods15 sighs

[15:12] <ods15> have i mentioned how much i hate cpan

[15:12] <broquaint> Ad nauseum, ods15.

[15:12] <ods15> ?

[15:13] <broquaint> !

[15:13] <ods15> good thing the friggin thing didn't just dl me all of glibc and compile it from scratch

[15:13] <ods15> tbh even that would still be faster than this hell

[15:15] <ods15> oh yey

[15:16] <ods15> now it works, but when actually using the module, perl hangs

[15:16] <ods15> NOW i remember why when i first tried out this module i decided to just use the ssh client instead.. that was quiet a while ago

[15:22] <ods15> wow, it actually works

[15:22] <ods15> it's not "stuck", it's just REALLLLLLLLLLLLY slow

[15:23] <ods15> that's insane... it took it about 30 seconds to log in

[15:38] * masak wonders why autrijus' journal hasn't been updated in a week

[15:38] <masak> is he ill? or just very busy with $WORK?

[15:39] <masak> anyway, I miss the journals a bit. they are my window into the pugs world...

[15:39] <hcchien> masak: I guess it is the senond one. :)

[15:39] <PerlJam> masak: I'd guess work

[15:39] <masak> yes, hopefully, if those are the options :)

[16:08] <autrijus> $work is it.

[16:09] * autrijus mumbles something about quicksand-shaped specs.

[16:09] <autrijus> I used to think that perl6 always > $work at quicksandness

[16:09] <autrijus> but perl6's is stabilizing and $work is not ;)

[16:09] <kolibrie> welcome back, autrijus 

[16:10] <autrijus> greetings.

[16:10] <autrijus> I'm seeing lots of progress on pilrun... need a whole day tomorrow to catchup

[16:10] * autrijus praises weekends

[16:13] <kolibrie> how do I associate .p6 with filetype perl6 in my .vimrc?

[16:13] <autrijus>     autocmd BufNewFile,BufRead *.p6         setf perl6

[16:14] <kolibrie> autrijus: thanks

[16:15] <autrijus> np :)

[16:18] * autrijus waves and crashes to sleep... &

[16:26] * Supaplex decorates autrijus's face with copious amounts of shaving cream

[16:43] <masak> Supaplex: careful, he's asleep :)

[16:44] <Supaplex> that's the idea :)

[17:22] <rindolf> autrijus: here?

[17:22] <rindolf> Hi all!

[17:39] <geoffb> rindolf, I think autrijus is sound asleep right now -- he popped in for about 10 minutes, and that was it

[17:40] <rindolf> geoffb: OK. Thanks.

[17:42] <iblech> luqui: WRT automagic recompilation of evalbot -- evalbot spawns a new instance of evalhelper.p5 upon each ?eval, and evalhelper starts a new pugs, so you don't have to restart evalbot if you upgrade pugs

[17:55] <fglock> putter: ping

[18:15] <svnbot6> r6502 | fglock++ | * perl5/ Value - Ref - implemented .str()

[18:15] <svnbot6> r6503 | fglock++ | * PIL-Run - postfix ++/-- partially fixed

[18:15] <svnbot6> r6504 | fglock++ | * PIL-Run - rand($x)

[18:15] <geoffb> welcom back, svnbot6 

[18:16] <fglock> svnbot missed some commits

[18:16] <fglock> perl5/Array now supports rw slices

[18:17] <fglock> bbiab &

[18:17] <geoffb> go fglock

[18:21] <fglock> hi geoffb

[18:21] <geoffb> hey there

[18:25] * geoffb decides to see if cygwin's experimental glx actually works . . .

[19:01] * autrijus tries again to irc in sleep

[19:01] <autrijus> that seems to work

[19:02] <geoffb> yes, but do you see surreal images floating past your monitor?

[19:03] <autrijus> right, like the mind game thing in ender's game

[19:04] <geoffb> did they make a movie out of that?  I've only ever read the book (and it's been awhile)

[19:04] <autrijus> Ender's Game, 2007

[19:04] <autrijus> Directed: Wolfgang Petersen

[19:04] <geoffb> whee

[19:04] <autrijus> whee indeed

[19:05] <autrijus> good, give me something to look forward after Serenity

[19:05] <geoffb> But first: Serenity.  Can't wait.

[19:05] <geoffb> heh

[19:05] <autrijus> jinx

[19:09] <autrijus> rehi sri_ :)

[19:10] <obra> hey autrijus 

[19:10] <obra> where are you moving to?

[19:11] <autrijus> tamsui

[19:11] <autrijus> the place you stayed

[19:11] <autrijus> the same room, actually

[19:12] <autrijus> I got iChat and SEE flawlessly on my asus laptop. thus endeth the PearPC nightmares

[19:13] <autrijus> s/(?=flawlessly)/working /

[19:15] <obra> wow. 

[19:15] <obra> what did it take?

[19:15] <obra> SEE on my Toshiba is sllllow

[19:15] <autrijus> it took two hours

[19:16] <autrijus> and http://wiki.osx86project.org/

[19:16] <autrijus> but it's all working natively now :)

[19:16] <obra> not using pear?

[19:16] <autrijus> osx86.

[19:17] <autrijus> XCode works and Rosetta works on SSE2 with mobile pentium.

[19:20] <dudley> ooh, cool. Maybe I can convince my wife to let me install it on her Gateway...

[19:22] <leo_> autrijus: hi - and wow - now the apple logo on the laptop isn't in vain

[19:23] <autrijus> leo_: right, although with my win32+flyakite and osx-metacity theme I often can't tell which of the 3 OSs I'm in

[19:23] <autrijus> the controls are all mapped identical ;)

[19:23] <autrijus> and the boot screen too -- although OSX has that rotating clock thing

[19:23] <leo_> *g*

[19:24] <leo_> maybe uname -a helps ;-)

[19:24] <autrijus> lol

[19:33] <svnbot6> r6505 | iblech++ | PIL2JS: sleep!

[19:33] <svnbot6> r6505 | iblech++ | * PIL::Subs: Make subs defined by the "sub" keyword ordinary rw containers,

[19:33] <svnbot6> r6505 | iblech++ |   same for &exit in PIL2JS.js.

[19:33] <svnbot6> r6505 | iblech++ | * PIL::PPad: Not only restore the value, but the container as well of a

[19:33] <svnbot6> r6505 | iblech++ |   variable backuped by temp or let.

[19:33] <svnbot6> r6505 | iblech++ | * Prelude::JS::Continuations: Implemented &sleep using continuations and

[19:33] <svnbot6> r6505 | iblech++ |   window.setTimeout -- Algorithm::TokenBucket runs under PIL2JS!

[19:34] <autrijus> iblech++ # sleep!

[19:34] <autrijus> next we'll be running svnbot6 in Javascript.

[19:56] * xinming will be to beijing for staying with a friend of mine for a month, xinming will miss all people here.

[19:56] <autrijus> xinming: ooh. have fun!

[19:56] * xinming will try to come here as soon as possible.

[19:56] <autrijus> no net in friend's place?

[19:57] <xinming> autrijus: Didn't you finish the 6.2.8.0 version of pugs? :-)

[19:57] <xinming> autrijus: lol, well, Don't know when you come, :-)

[19:57] <autrijus> xinming: no, I'm earning my plane ticket money :)

[19:57] <autrijus> meaning: working a lot.

[19:58] <xinming> autrijus: hmm, I will try to come. My friend's house get Windows installed.

[19:58] <xinming> autrijus: well, No hurry on Pugs. :-)

[19:59] <autrijus> :)

[20:19] <svnbot6> r6506 | iblech++ | * New test: t/unspecced/connect.t -- but skip_rest unless

[20:19] <svnbot6> r6506 | iblech++ |   %*ENVV<PUGS_TESTS_ALLOW_NETWORK>.

[20:19] <svnbot6> r6506 | iblech++ | * util/perl6.vim: "autocmd BufNewFile,BufRead *.p6 setf perl6", autrijus++

[20:24] <putter> iblech: ping

[20:24] <svnbot6> r6507 | putter++ | PIL-Run - assorted tweaks.

[20:24] <svnbot6> r6507 | putter++ | PrimP5.pm: MACRO renamed MACROP5.  require() now pretends not-yet-existant @INC is (".",$FindBin::Bin).

[20:24] <svnbot6> r6507 | putter++ | EvalX.pm: Added hack to avoid Deep recursion in expand().  Improved warnings, and appearance of generated code.

[20:24] <putter> fglock: ping

[20:26] <putter> err, fglock: pong

[20:28] <fglock> putter: ping pong

[20:28] <putter> :)

[20:30] <fglock> you wrote you were storing a Ref to Array into Scalar?

[20:32] <putter> yes.  p6_set checks for 1st arg ref() Scalar and 2nd arg ref() Array.  if so, $1st->store(p6_new(Ref => $2nd))

[20:33] <dduncan> seen mugwump

[20:33] <fglock> this should be done automatically by Scalar->store - you might be doing extra work

[20:34] <putter> ah, ok.  will yank.

[20:37] <putter> done. 6508.

[20:39] <fglock> there is something strange - @a[1]=2 works, but @a=(1,2,3) doesn't

[20:40] <putter> nor (the last time I checked) @a = @b.   note that $array_a now has a real Array, rather than a Scalar.  so Array::store, $array_a->store($array_b), is now being called when before it wasnt.

[20:41] <putter> hi stevan

[20:41] <stevan> hey putter

[20:41] <kolibrie> greetings stevan 

[20:41] <svnbot6> r6508 | putter++ | ApiX.pm: p6_set no longer worries about Ref()ing Arrays assigned to Scalars.  Thats the metamodels job.

[20:41] <stevan> hola kolibrie 

[20:42] <fglock> stevan: how about integrating Value/Code with MM methods? I've added basic parameter binding and multi subs

[20:43] <fglock> maybe move Code.pm into the MM

[20:43] <stevan> fglock: sure, we can do that

[20:43] <stevan> the Perl6::Method module is basically just a closure factory

[20:44] <stevan> I think it should be pretty simple

[20:44] <kolibrie> any way to do 'temp' in p5?

[20:45] <putter> In lue of the metamodel having a Macro, could I  package Macro;@ISA=(Sub);  and not break things?

[20:46] <putter> kolibrie: do you mean 'local'  (the p5 equivalent of p6's temp)?  or does the PIL-Run p5 backend support temp()? (not yet)

[20:46] <stevan> fglock: my tuits are in very short supply untill this $work project is over which should be in about a week

[20:47] <kolibrie> putter: well, I mean I have a lexical variable, and I want to temp it for the block, rather than turn it into a global and 'local' it

[20:47] <fglock> stevan: how about circular dependencies between modules? Type checking needs Value, Method needs Code, which needs MM ...

[20:47] <stevan> hmm

[20:47] <stevan> fglock: that could be an issue

[20:48] <stevan> however, I think it is easily overcome

[20:48] <stevan> if we insist that all the lower level MM modules have a sig of *@_

[20:48] <stevan> then we can just use regular perl 5 subs

[20:48] <stevan> and those dont need to use Code

[20:48] <stevan> then once the model is bootstrapped

[20:48] <stevan> all classes built can use Code

[20:49] * stevan is not 100% sure that is sane

[20:51] <fglock> putter: I'll check what Array->fetch/store is doing

[20:53] <fglock> if you have time, take a look at Container/t/array-boxed.t - 'slicing'

[20:57] <fglock> putter: Array-to-Array copy was not implemented - I'll work on it

[21:01] <putter> ok. will do.  currently trying to figure out why in builtins/arrays/push.t , its trying to call a postcircumfix:[] p5 method on Array...

[21:11] <xinming> bed&

[21:12] <buu> ?eval $x=@y;

[21:12] <evalbot_6497> Error: Undeclared variable: "$x" 

[21:12] <buu> =[

[21:12] <buu> ?eval my $x= my @y;

[21:12] <evalbot_6497> Error: Undeclared variable: "@y" 

[21:12] <buu> Why does that happen?

[21:14] <xinming> buu: I think that's because pugs can't handle multi declaration in one "statement"

[21:14] <buu> =[

[21:15] <buu> ?eval my @x; my $x; $x = @x;

[21:15] <evalbot_6497> [] 

[21:15] <xinming> ?eval my $a = my $b;

[21:15] <evalbot_6497> Error: Undeclared variable: "$b" 

[21:15] <xinming> buu: I mean "statement" not closure. hmm,

[21:15] <xinming> ?eval my $a = { my $b };

[21:15] <evalbot_6497> \sub {...} 

[21:15] <xinming> maybe term, Sorry for my poor English.

[21:16] <xinming> Just wish you to understand what I mean. :-)

[21:16] <xinming> my $a; my $a;

[21:16] <xinming> ?eval my $a; my $a;

[21:16] <evalbot_6497> undef 

[21:16] <xinming> hmm, this shouldn't be allowed. a "bug" need to be fixed.

[21:17] <xinming> really sleepy now, bye.

[21:18] <fglock> @b=@a works now

[21:19] <putter> !:)

[21:20] <fglock> however, I think the copy must be a bit deeper - testing ...

[21:20] <svnbot6> r6509 | fglock++ | * perl5/ Array - whole array fetch/store

[21:21] <fglock> if a cell in @a is bound, the bind must be broken, I think

[21:21] <ods15> ?eval my $a; $a = my $b;

[21:21] <evalbot_6497> Error: Undeclared variable: "$b" 

[21:21] <ods15> ?eval my $a; $a = (my($b));

[21:21] <evalbot_6497> Error: Undeclared variable: "$b" 

[21:21] <ods15> ?eval chomp(my $b = "hello");

[21:21] <evalbot_6497> Error: No compatible subroutine found: "&my" 

[21:22] <ods15> ?

[21:22] <ods15> ?eval my $b = "hello\n"; chomp $b;

[21:22] <evalbot_6497> 'hello' 

[21:22] <putter> fglock: what am I looking for in array-boxed.t?  all oks.  and an Inf redefinition warning.

[21:22] <ods15> ?eval my $b = "hello\n";

[21:22] <evalbot_6497> \'hello ' 

[21:22] <ods15> ?eval my $b = "hello\n"; $b

[21:22] <evalbot_6497> \'hello ' 

[21:22] <ods15> ?eval my $b = "hello\n"; "$b"

[21:22] <evalbot_6497> 'hello ' 

[21:23] <fglock> I wanted to show you the new slicing - in the end of the file - but you can see it in PIL-Run already - @a[2,3]=(4,5) should work now

[21:23] <putter> fglock: why the binding restriction?

[21:24] <putter> ooo!  looking...

[21:24] <fglock> because if @a[2] := $b, you don't want @b[2] := $b, right? 

[21:27] <putter> well, $a1 := $a2;  $a2 := $a3; ... $a10231 := $a10232;  $a10232 = 31;  no?

[21:27] <fglock> but if you do @b=@a, and then @b[2]=99, then you get @a[2]==99 - I think this is unexpected

[21:31] <putter> I dont know what spec is.  (I dont find it surprising, but either way)

[21:31] <putter> hmmm...

[21:31] <putter> @a = (2,3,4,5); @a[1,2] = (8,9); @a    yields 2, 3, 4, 5, 8, 9

[21:32] <fglock> mm bugs

[21:36] <fglock> Array->slice is not being called at all - it needs some work in PrimP5

[21:39] <fglock> testing

[21:41] <putter> I notice p6_to_l seems to destroy the array it's called on?!?   $a_obj->shift

[21:44] <fglock> use p6_to_a for arrays - p6_to_l is supposed to be called on files, queues etc that must be read with shift

[21:45] <putter> ahh.  but, err, p6_to_a does the same thing...?

[21:46] <putter> the while ( ... )  also needs to wrap p6_to_n(...) , unless Int has some magic boolean/number overload()ing.

[21:46] <fglock> maybe - if you want to preserve the original array you can pass a copy using @{[ @a ]}

[21:47] * putter is trying to get push(@a,3,4) to work...

[21:50] <putter> I dont think that works.  Unless Array has @{} overloading?  p6_to_a is called from p5, to whom Array is an opaque object.  If a copy is truely necessary, then p6_to_a has to make the copy (and then mutate only the copy).

[21:50] <svnbot6> r6510 | fglock++ | * PIL-Run - implements postcircumfix:<[ ]> using Array::slice

[21:50] <putter> Hmm... if p6_to_l is inherently mutating, I'm tempted to rename it p6_to_l_mutating(), just so it stands out vis the other p6_to_mumbles.

[21:53] <fglock> how about $Array->push( $OtherArray->unboxed ) ?

[21:53] <putter> MULTI SUB push ($xx0,$xx1) { $xx0->push( $xx1 ) };  should be something more like  MULTI SUB push (@xx0,*@xxa) { $xx0->push( p6_to_l($xxa) ) };

[21:53] <putter> that would do it. :)

[21:54] <putter> oh, wait.

[21:54] <fglock> that will fail with lazy lists - infinite while loop

[21:55] <putter> then p6_to_a($a) should be { $a->unboxed }

[21:55] <putter> how were you thinking of handling lazy lists perl-side?

[21:56] <fglock> using Perl6::Container::Array and Perl6::Value::List

[21:56] <fglock> these are p5 classes

[21:56] <putter> wait a sec,

[21:58] <putter> MULTI SUB push (@xx0,*@xxa) { $xx0->push( p6_to_l($xxa) ) }... the $xxa is the "had better be finite because its code" list of arguments to push().  if one of them is a lazy/infinite list, thats something for $xx0 aka @xx0 to worry about.

[22:00] <fglock> I can handle unboxing on the Array object - the you can just call push( $xxa )

[22:01] <fglock> push @a,(1..1000000000) is working for me

[22:01] <putter> sub p6_to_a($o) { [ p6_to_l($o) ] }   sub p6_to_l($o) { $o->unboxed }   if unboxed wants to scream it cant (lazy, or inifinte) fine.  though it could also return a tied p5 proxy array.

[22:02] <putter> and  push @a,1,2

[22:02] <putter> ?

[22:03] <putter> push is currently a 2-ary func.

[22:03] <fglock> push @a,(3..4) works, push @a,(3,4) doesn't

[22:04] <putter> and @b=(2,3,4); push(@a,@b); +@a should probably be 1;

[22:04] <fglock> @a.push(@b) works

[22:04] <fglock> push @a,@b works too

[22:06] <fglock> only @a.push(1,2) fails

[22:06] <tene> what about @a.push((1,2)); ?

[22:06] <fglock> works

[22:17] <putter> ok, I fixed the push() and unshift() signatures, and implementations to match.

[22:17] <putter> oh, no I havent.  need to fiddle with svn a bit...

[22:18] <fglock> storing lazy slices is not trivial :(

[22:19] <fglock> things like @a = (2,3,4,5); @a[1,2] = @a[0,3] but using lazy slices

[22:19] <putter> in 6511.

[22:20] <fglock> putter++

[22:21] <putter> right.  though that turned out not to be an issue for push()...  p6_to_X shouldnt have to care, and for push(), shouldnt have had to be called anyway with the new mm-based Sub.

[22:21] <putter> MULTI SUB push (@xx0,*@xxa) { $xx0->push( @xxa ) };

[22:22] <putter> re lazy not trivial... why?  oh, you mean lazy slices?

[22:22] <svnbot6> r6511 | putter++ | PrimP5.pm: push() and unshift() now work.

[22:23] <svnbot6> r6511 | putter++ | ApiX.pm: simplified p6_to_a() and p6_to_l().

[22:24] <putter> @a = (1..1000000000);  @b = @a[3...];  ?

[22:26] <fglock> this can be implemented easily with splice - but slices use a proxy array

[22:27] <putter> k

[22:48] <svnbot6> r6512 | putter++ | PrimP5.pm: die() fixed.  Some direct mm use changed to ApiX calls.

[22:57] <putter> fglock: +@a  #=> 11669344 ?

[22:57] <putter> iblech: ping?

[22:58] <fglock> Array->int is not defined yet - is it elems?

[22:58] <putter> yes

[23:03] <fglock> @a.num == 3 - @a.int == 'unimplemented' - +@a == 142419272

[23:03] <svnbot6> r6513 | fglock++ | * perl5/Array - implemented Array.num Array.int

[23:04] <fglock> I think it is a problem in the implementation of coerce:as - it doesn't know about 'Array'

[23:08] <fglock> done

[23:08] <fglock> wait - svn problem

[23:19] <fglock> ok, everything seems to be working:  @a = (2,3,4,5); @a[1,2] = @a[0,3]; say @a; say +@a

[23:20] <svnbot6> r6514 | fglock++ | * PIL-Run - fixed coerce:as Array -> int

[23:20] <svnbot6> r6515 | fglock++ | * perl5/Array - non-lazy array slices are supported,

[23:20] <svnbot6> r6515 | fglock++ |   only some cases of lazy slices are supported.

[23:21] <fglock> good night &

[23:36] <putter> fglock++

[23:42] <putter> good night &

[23:42] *** autark is now known as jp-autark

[23:44] *** autark is now known as jp-autark

[23:56] <luqui> hola stevan 

[23:57] <stevan> hey luqui 

