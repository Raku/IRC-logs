[00:35] *** nothingmuch_ is now known as nothingmuch

[00:39] * nothingmuch â™¥ Set::Object

[00:42] *** sekimura_off is now known as sekimura

[02:27] <nothingmuch> *yawn*

[02:27] * nothingmuch goes to sleep

[02:33] * mugwump tucks nothingmuch in

[02:33] * nothingmuch changes his mind actually

[02:33] <nothingmuch> mugwump: Class::ISA isn't necessary in the spork fix

[02:33] <nothingmuch> we only need to traverse one namespace level

[02:34] <mugwump> ok, well that makes it a lot simpler :)

[02:34] <nothingmuch> indeed =)

[02:34] <nothingmuch> otherwise i'd have used Devel::Symdump->rnew(ref $self)

[02:34] <nothingmuch> btw, if Spork want Spiffy and Spoon and Kwiki and whatnot

[02:34] <nothingmuch> why not Devel::Symdump too?

[02:35] <mugwump> only a probably irrational tendency to see a module name like that and think "that's for development, not 'production' code" :)

[02:35] * nothingmuch agrees that it's wrongly named

[02:35] <nothingmuch> it should be Symbol::Traverse

[02:37] <mugwump> Yes - introspection isn't development only

[02:43] * nothingmuch ponders writing Class::Methods::Suicidal

[02:43] <nothingmuch> methods that happen once per instance

[02:43] <nothingmuch> and then then call SUPER::

[02:55] * nothingmuch really goes to sleep

[04:06] <gantrixx> so I'm just starting to fool around with Perl6

[04:06] <gantrixx> I've downloaded and build parrot

[04:06] <gantrixx> how do I get Perl6?

[04:08] <gantrixx> this channel has a lot of people not talking

[04:08] <mugwump> we're thinking

[04:09] <obra> we're also sleeping

[04:09] <obra> gantrixx: www.pugscode.org

[04:09] <gantrixx> so is there a daily build I can dowload?

[04:10] <mugwump> we're not doing binary releases of pugs yet... after 6.28, perhaps

[04:10] <mugwump> some people are though

[04:11] <mugwump> gantrixx: you'll also need ghc 6.4 or newer

[04:12] <gantrixx> ghc?

[04:12] <gantrixx> I don't even know what that is

[04:12] <gantrixx> Here is my concern folks

[04:12] <gantrixx> I've been using perl for a long time

[04:13] <gantrixx> I love perl, but ther is a stong move toward python advocacy

[04:13] <gantrixx> I believe that Perl6 will address all the shortcommings of perl5 and hopefully will obsolete python

[04:14] <obra> gantrixx: perl6 is still in the early development phase. It has a way to go.

[04:14] <obra> a long way, even

[04:14] <gantrixx> I'm getting ready to start a contract with a 10 year development cycle and I have to make an arguement to the powers that be to stick with perl5/6 and not use python

[04:14] <mugwump> gantrixx: that's a fairly long cycle :)

[04:14] <gantrixx> DoD, c'est la vie

[04:15] <obra> do you expect to switch languages midstream?

[04:15] <obra> (perl5 to perl6)

[04:15] <gantrixx> so they don't want to invest in a lot of perl development if in 5 years everyone is using python and perl5 is not supported

[04:15] <gantrixx> yes, I do expect to start off in perl5 and then migrate to perl6

[04:16] <mugwump> hmm, start in ruby perhaps.

[04:17] <mugwump> ruby -> perl 6 will be easier (IMHO) than perl 5 -> perl 6

[04:17] <mugwump> Sure, Larry's doing his Perl 5 to Perl 6 converter and all, but I think it will suffer from the same problem as the shell to Perl converter

[04:18] <gantrixx> if it can't be done in C/C++, Perl, and HTML then I don't think it needs to be done

[04:18] <mugwump> sure, I understand that.

[04:18] <gantrixx> I'm tired of relearning the tools of the profession every 3 years

[04:20] <gantrixx> so do I spend my time learning Perl6 or Python

[04:20] <gantrixx> because there are a lot of the software engineers that are advocating python

[04:21] <mugwump> That choice is a no brainer really, after all...

[04:21] <obra> It does have a big advantage over perl6.

[04:21] <gantrixx> I guess they are trying to predict 5 years in the future

[04:21] <mugwump> "Not having a choice streamlines the thought process" -- GvR

[04:21] <obra> It exists now.

[04:21] <gantrixx> seriously?  you would choose Python over Perl6?

[04:22] <obra> If I had to write production code in the next six months? Hell, yes.

[04:22] <gantrixx> that is why I'm investigating Perl6 now to see if I should stick with the Perl advocates or jump in with the Python guys

[04:22] <obra> I'd prefer perl5, but if I was asked to pick one or the other.

[04:22] <obra> perl6 is a development project. Autrijus runs pugs in production.  But he's special ;)

[04:22] <gantrixx> well of course we would use Perl5 now, but 5 years from now we would be writting in Perl6

[04:23] <mugwump> there are lots of programming constructs that can't be expressed simply in python due to GvR's insistence not to include any higher order stuff

[04:25] <gantrixx> so do you think Perl6 will really be ready Q3 2005?

[04:25] <gantrixx> or is this another mozilla project?

[04:25] <mugwump> gantrixx: have a look at the pugs codebase and examples, a serious amount of the language is already working

[04:30] <obra> gentrixx: how much time can you volunteer to help perl6 along?

[04:34] <gantrixx> They will allow me to donate some of my Perl6 work on the job back to the community

[04:34] <gantrixx> "some"

[04:34] <gantrixx> it is a DoD contract

[04:34] <gantrixx> but if I write an snmp module that is generic, they don't mind if I donate that back to the community

[04:35] <mugwump> the challenge will be writing the Perl 5 code in a way that can be easily ported to Perl 6

[04:35] <mugwump> And making sure your test suite is *comprehensive* enough to spot interpreter bugs

[04:35] <gantrixx> well, to be honest, it isn't uncommon to completely rewrite some stuff so I'm not that worried about it

[04:37] <gantrixx> what is the glasgow haskel compiler?

[04:37] <stevan> gantrixx: Pugs is written in Haskell

[04:37] <mugwump> haskell is a functional language, a dialect of ML

[04:38] <stevan> so you need it to compile pugs

[04:38] <gantrixx> why not, we are short on reinvented wheels

[04:39] <stevan> gantrixx: I think you will have a hard time future-proofing a 10 year project

[04:40] <mugwump> For instance, if you were to use Class::Tangram as an accessor generator package, it would be fairly trivial to mechanically convert the Class::Tangram class definitions to Perl 6 Class definitions

[04:40] <stevan> and I would be surprised if you didn't re-write major portions of it regardless of the language you use

[04:40] <mugwump> (not to say that Class::Tangram is as comprehensive as Perl 6 Classes,Roles,etc)

[04:40] <gantrixx> perl5 will be obsolete by the time this thing goes live, so the question is will Perl6 be the way to go or is it Python

[04:41] <stevan> gantrixx: when is it going live?

[04:41] <stevan> perl5 will be around for many years to come

[04:41] <stevan> perl 5.005 is still on many prod machines

[04:41] <gantrixx> the development will be done in like 5 years or so

[04:41] <gantrixx> but it doesn't actually reach full maturity for 10 years

[04:42] <gantrixx> at least that is what the "plan" says

[04:42] <gantrixx> I worked on Iridium too and in 10 years when we delivered it, it was already obsolete

[04:42] <gantrixx> so the plug could be pulled, hell this will span 2 more presidential administrations

[04:42] <stevan> gantrixx: that is a rather long schedule

[04:43] <gantrixx> so was putting a man on the moon

[04:43] <gantrixx> it's a 10 year contract, what else can I say

[04:44] <stevan> gantrixx: thats a good thing, I am just not used to anything that long

[04:44] * stevan tends to work in months or weeks

[04:44] <gantrixx> DoD stuff is like that

[04:44] <gantrixx> they will spend 5 years testing it

[04:44] <stevan> gantrixx: I won't ask you any details,.. top secret and all

[04:44] <gantrixx> probably part of that contract is the initial maintainance phase

[04:44] <gantrixx> then they usually bid out continued maintainance

[04:45] <gantrixx> it does require a clearance

[04:45] <gantrixx> and believe it or not the DoD is very accepting of open source technology

[04:45] <autrijus> rehi.

[04:46] <stevan> well if you prototyped in perl5, with an eye towards perl6 ... 

[04:46] <stevan> by the time you were ready Perl6 might be done

[04:46] <stevan> morning autrijus :)

[04:46] <gantrixx> I think they are tired of companies going out of business and being left with no support

[04:46] <autrijus> I just read the backlog of yesterday :)

[04:46] <stevan> gantrixx: it makes a lot of sense

[04:46] <autrijus> it's curious how NathanJY happened to stop speaking altogether when I joined the channel :)

[04:47] <gantrixx> I wish I could tell you some of the stuff that is out there and the old old unsupported technology it is built on

[04:47] <autrijus> stevan: btw, great work on force_todo

[04:47] <stevan> gantrixx: my father worked for the DoD, I am familiar with how messed up in can get :)

[04:47] <stevan> autrijus: thanks :)

[04:47] <stevan> I actually think it is speeding things up (or maybe it is my imagination)

[04:47] <autrijus> that may very well be the case

[04:47] <gantrixx> it can be a mess of inefficiency and red tape, but my experience is that that is the maintainance part

[04:48] <autrijus> since there's no extra fileread/processing for each test

[04:48] <gantrixx> the development part is pretty much a ball buster

[04:48] <stevan> autrijus: yes, what bothered me was that the greatest penalty was for files which did not use it

[04:49] <stevan> gantrixx: I can imagine, I recently read about FAA dev standards, crazy stuff

[04:49] <gantrixx> oh now that is something I can talk about 

[04:49] <gantrixx> I've done some work for the FAA too

[04:49] <stevan> autrijus: I am also in the process of removing the todo_* functions, and added a todo named param

[04:49] <stevan> it should slim down Test.pm a bit more

[04:49] <autrijus> stevan: yup, I saw that. great

[04:49] <autrijus> I'm fixing parsefails left and right

[04:50] <stevan> autrijus++

[04:50] <autrijus> but the cxt/typ patch looks like a keeper

[04:50] <stevan> good

[04:50] <mugwump> is that the GADT-based parser change, autrijus ?

[04:50] <gantrixx> there are strict requirements on mission critical parts on an airplane.  now adays much of "parts" are software, so the FAA requires that all code be hand reviewed by and outside group

[04:50] <stevan> gantrixx: I have always been interested in embedded work, but my C skills are pretty sad

[04:51] <gantrixx> so companies like Honeywell that write autopilots subcontract this obligation out a bunch of flunkies

[04:51] <autrijus> mugwump: no actually... it's a separation of Cxt (context) and Type from String

[04:51] <autrijus> mugwump: previously I got them all messed up. Juerd enlightened me

[04:52] <autrijus> mugwump: one good thing from this is that we cleanly support junctive types

[04:52] <stevan> junctive types... mmmmm

[04:52] <stevan> I still need to find a place to use them,... maybe somewhere in hangman,  just to be gratuitous

[04:53] <mugwump> junctive types, is that like 1`Oz|1`m|1`orange|etc ?

[04:53] <autrijus> mugwump: no, more like

[04:53] <mugwump> or just junctions

[04:53] <gantrixx> nice talking to you guys

[04:53] <stevan> sub foo (Str|Bool $bar)

[04:53] <autrijus> sub foo (Int|Str $a)

[04:53] <gantrixx> I have to go

[04:53] <autrijus> ciao gantrixx :)

[04:54] <autrijus> sub phash (*@a) returns Array&Hash { ... }

[04:54] <stevan> autrijus: I didnt get that haskell book, I decided to just order Algorithms instead

[04:54] * autrijus shudders at the thought of phash

[04:54] <autrijus> stevan: cool

[04:55] <autrijus> stevan: hm, I'm seeing

[04:55] * mugwump has a little moment stomaching that concept

[04:55] <autrijus> $ ./pugs -MTest -e 'ok(1)'

[04:55] <autrijus> ok 1 - pugs: cannot cast from VRef <Scalar::Const> to [Char]

[04:55] <autrijus> fixing

[04:56] <stevan> autrijus: it worked for me (I think I have the latest code too)

[04:57] <stevan> hmm, even with this: pugs -I ext/Test/lib/  -e 'require Test; ok(1)'

[04:57] <autrijus> that works for you?

[04:57] <stevan> yes

[04:58] <autrijus> weird.

[04:58] <stevan> but you know,.. I may not have the latest build

[04:58] <stevan> either way I have to go to sleep as I am starting to see double

[04:58] <autrijus> that's fine... I'll figure it out

[04:58] <autrijus> see you :)

[04:59] <stevan> be back in ~8 hours :)

[05:06] <bsb> Is phash pronounced /fash/?  If so, I'll shudder too

[05:06] <autrijus> bsb: it's pronounced "pseudohash"

[05:07] <bsb> or p6opaque?

[05:07] <autrijus> one of the gravest peril known to camelkind

[05:07] <bsb> I get it now, Array&Hash

[05:13] <bsb> If I make pugs segfault, how do it tell?

[05:13] <bsb> s/how/who/

[05:13] <autrijus> me

[05:13] <autrijus> do you have a one-line test case?

[05:13] <bsb> pugs> ?

[05:13] <bsb> Segmentation fault

[05:14] <bsb> is there and out of band way to send build info and context?

[05:14] * mugwump points bsb at nopaste.snit.ch:8001

[05:14] <autrijus> bsb: is this 6.2.0?

[05:14] <bsb> yes

[05:14] <autrijus> bsb: it's a known issue that has since been resolved 

[05:15] <bsb> great

[05:17] <obra> Hey glasser

[05:18] <Huskie> Hi I need some help with some parsec code

[05:19] <bsb> Another one: pugs> none(1).pick  # returns 1

[05:20] <autrijus> bsb: do you have svn installed?

[05:20] <Huskie> any lambda folks that could help me..thx

[05:20] <autrijus> bsb: and may I make you a committer so you can add the failing test to t/junctions? :)

[05:20] <autrijus> Huskie: yes?

[05:21] <Huskie> how can i paste code to show u

[05:21] <autrijus> perlbot: nopaste

[05:21] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[05:23] <Huskie> pasted to http://sial.org/pbot/9574

[05:23] <Huskie> my ? is how i would call my eval function on the AST

[05:24] <bsb> yeah to svn, I'm rebuilding.  Ok, I'll fix the test

[05:25] <autrijus> bsb: are you a committer? if not, can you give me your email addr so I can send an invitation to you?

[05:25] <Khisanth> given the rate of change is there actually a reason to use pugs releases instead of from SVN? :)

[05:26] <bsb> bsb at bereft dot net

[05:26] <bsb> What prodecure do I follow to ensure I'm not making things worse?  just make test?

[05:27] <Huskie> autrijus, do you see my pasted code? The last line is what I would like to use but gives me an error

[05:27] <autrijus> bsb: you can't possibly make things worse. but yes, "make test" works; after "make install" you can also simply run pugs on selected tests

[05:27] <autrijus> Huskie: what's the error msg?

[05:27] <autrijus> Khisanth: yes, the trunk may occasionally receive huge patches that kills the tree :)

[05:28] <Huskie> Couldn't match the rigid variable `a' against `CT'

[05:28] <Huskie>   `a' is bound by the type signature for `run'

[05:29] <Khisanth> chainsaw patches

[05:31] <autrijus> Huskie: your signature should not be

[05:31] <autrijus> Parser a

[05:31] <autrijus> it should be

[05:31] <autrijus> Parser CT

[05:31] <autrijus> Huskie: when in doubt, remove the signature and let GHC figure it out for you

[05:32] <autrijus> bsb: invitation sent. welcome barod!

[05:32] <autrijus> err, welcome aboard!

[05:33] <Huskie> thanks a lot autrijus! It solves the problem.

[05:33] <Huskie> and thanks for the inspiration with your work

[05:34] <autrijus> no prob :)

[05:58] *** chady_ is now known as chady

[06:03] <Huskie> autrijus, any pointers on how to output code from an AST

[06:04] <autrijus> Huskie: depends on your target code

[06:04] <autrijus> target language, rather

[06:05] <Huskie> I have an idl compiler that successfully builds an AST and i need to generate stub C code from it

[06:05] <Huskie> for ex, interface { int func(int a); }

[06:06] <autrijus> oh. you need to write an AST reduction module

[06:06] <autrijus> look at src/Pugs/Compile/Parrot.hs for an examples

[06:07] * autrijus needs to run. bbiab

[06:08] <Huskie> cool.. looks like i have to understand PrettyPrint

[06:13] <bsb> What should "(sub {3} | sub {2})()" produce in scalar context?

[06:13] <bsb> Warnocked on p6l...

[06:19] <bsb> .. warnocked, everywhere .. :(

[06:22] <autrijus> bsb: put it in as a test.

[06:23] <bsb> OK.  is( (sub {3} | sub {2})(), (3|2))   and fix if the answer changes

[06:23] <autrijus> not sure if you can compare junctions using is

[06:23] <autrijus> probably flatten both sides using .values or something.

[06:24] <bsb> yeah, that's what the other tests do

[06:25] <autrijus> add yourself to AUTHORS too, if you're not

[06:25] <autrijus> already there

[06:25] <autrijus> * `(sub {3} | sub {2})()` implemented.

[06:25] <autrijus> enjoy.

[06:25] <autrijus> work &

[06:27] <bsb> implemented faster than the test, ++

[06:37] *** castaway_ is now known as castaway

[07:04] <gaal> kungfuftr: awake?

[07:16] <ingy> hola

[07:17] * ingy just finished a flippin sweet test framework module

[07:18] <gaal> hey ingy

[07:18] <gaal> i'm cleaning up the makefile a bit

[07:18] <gaal> i was bothered by how 'make smoke' tried building the targets again and again

[07:18] <gaal> my findings:

[07:18] <ingy> http://pause.perl.org/incoming/Test-Chunks-0.12.tar.gz

[07:19] <gaal> 1. the smoke target depended on util/run-smoke.pl, that looks bogus to me

[07:19] <gaal> 2. that script always runs make explicitly :)

[07:19] <ingy> ouch

[07:19] <ingy> do you need help or something/

[07:20] <gaal> 3. 'make optimized' and 'make unoptimized' are what the lovely manual call "double colon" rules, whcih basically means "always run this rule (even if its deps are fulfilled)".

[07:20] <gaal> http://www.gnu.org/software/make/manual/html_chapter/make_4.html#SEC50

[07:20] <gaal> i love GNU docs. not.

[07:21] <gaal> anyway, run-smoke should probably no longer be a script; it should be entirely a make target. rihgt?

[07:21] <ingy> well I haven't looked at the Makefile in sometime

[07:21] <gaal> question is, is there any reason for the double colons? i wonder who instated them.

[07:21] <ingy> double colon rules are for when you want two or more rules with the same target

[07:21] <ingy> foo :: this

[07:22] <ingy> foo :: that

[07:22] <gaal> they just waste time relinking, for me, because they also rerun the rule always.

[07:22] <ingy> double colons are crucial

[07:22] <gaal> well, they aren't used that way for the (un)?optimized targets.

[07:22] <ingy> to be able to add on to rules genned by makemaker

[07:23] <gaal> aha!

[07:23] <ingy> :)

[07:23] <gaal> i knew there was a reason i was asking you :)

[07:23] <ingy> otherwise just use single colons for non MM targets

[07:23] <ingy> =)

[07:23] <ingy> I need to port Test::Chunks to Perl6

[07:24] <gaal> okay, i'll finish fixing this up then.

[07:26] <gaal> other than environment, is there a way to pass an option to a rule? e.g. the smoker script used to 'make optimized' hardcodedly; i want it to choose the pugs target in a saner way.

[07:53] <autrijus> gaal: "make smoke TARGET=optimized" ?

[07:53] <gaal> yes, that's what i ended up doing.

[07:53] <gaal> i hope it's portable though :/

[07:55] <gaal> actually i was doing something slightly different; because if you do the above you can't omit the TARGET setting (i think?)

[07:57] <gaal> i added an ifdef in the $pugs target to check $(PUGS_OPTIMIZE), expecting 1, 0, or no def at all;  and build -O1, -O2, or nothing from it.

[08:14] <gaal> r2208 - i hope i didn't break anything :)

[08:17] <mj> WinXP, r2207 - 159/4468 subtests failed, 96.44% okay.

[08:27] <autrijus> gaal: you broken everything ;)

[08:27] <autrijus> ifdef is a GNUism.

[08:27] <gaal> that's too bad :)

[08:27] <autrijus> please fix :)

[08:28] <gaal> sorry, reverting.

[08:28] <autrijus> no prob

[08:30] <gaal> is there a preferred svn command for reverting a patch? or should i just svn up -r2207 and ci the old versions?

[08:30] <autrijus> gah, that again

[08:30] <autrijus> src/Pugs/Eval.hs:226:48: My brain just exploded.

[08:30] <autrijus> gaal: you can apply the reverse change via svn merge 

[08:30] <autrijus> gaal: but just svn up -r2207, cp somewhere, svn up, mv somewhere back, ci

[08:33] <gaal> done as r2209. now to figure out how to do this portably.

[08:34] <autrijus> :)

[08:43] <kungfuftr> gaal: moo?

[08:43] <gaal> moose!

[08:43] <kungfuftr> lo

[08:44] <gaal> i was doing some changes to the smoke target, but they turned out to depend on non-portable features of gnu make.

[08:44] <gaal> that is,

[08:44] <gaal> the way i did it depended etc.

[08:44] <kungfuftr> ah

[08:44] <gaal> i'm sure it can be done in an even uglier and more portable way.

[08:45] <kungfuftr> $^O is horrible, but handy

[08:45] <gaal> the thing is, make smoke relinks pugs needlessly.

[08:45] <gaal> no, the unportability was in make itself.

[08:45] <gaal> there is one improvement i'd like y'all to try though.

[08:46] <gaal> can you edit your Makefile.PL and change "optimized :: " to "optimized :" ?

[08:46] <gaal> (remove one colon)

[08:46] <gaal> on my systems that alone is a big win :)

[08:46] <gaal> ..after doing that rebuild the makefile and do make smoke.

[08:47] <gaal> it shouldn't relink pugs if you alreadt had it built.

[08:47] <kungfuftr> um... it'd have to be in a few hours time... have to do urgent work on search engine indexer

[08:48] <gaal> k later.

[08:55] <pasteling> "bsb" at 203.214.67.82 pasted "has_ghc_package using $ENV{GHC_PKG} || $ENV{GHC}" (20 lines, 710B) at http://sial.org/pbot/9581

[08:55] <bsb> does that patch look reasonable?

[08:56] <bsb> I'm trying to get started here, bear with me

[08:57] <autrijus> I'd suggest to use

[08:57] <autrijus> /\bghc(?=[^\\\/]*)/

[08:58] <autrijus> in the

[08:58] <autrijus> +        $ghc_pkg =~ s/^ghc/ghc-pkg/  # ghc-6.5 => ghc-pkg-6.5

[08:58] <autrijus> line

[08:58] <autrijus> err

[08:58] <autrijus> /\bghc(?=[^\\\/]*$)/

[09:02] <magnetic> hi

[09:04] <autrijus> yo magnetic 

[09:04] <bsb> ok. svn ci comes next, here we go

[09:04] <autrijus> I wonder if I should spend any time replying to BrowserUK on perlmonks.

[09:05] <gaal> autrijus, what thread?

[09:05] <autrijus> gaal: http://www.perlmonks.org/?parent=448319;node_id=3333

[09:05] <gaal> he's quite the intelligent/thoughtful person; in my experience discussions with him were always worthwhile.

[09:05] <autrijus> gaal: shuffling was one of the few cases that GHC performs much much better than perl.

[09:06] <gaal> that doesn't mean he's always right :)

[09:07] <nothingmuch_> good evening

[09:07] <gaal> now i'm interested in how to do this efficiently in haskell myself :)

[09:08] <gaal> so i hope you do reply :)

[09:11] <autrijus> maybe you can write it as an exercise :)

[09:12] <gaal> :)

[09:12] <autrijus> I replied.

[09:12] <gaal> autrijus++

[09:19] <nothingmuch_> autrijus: some guy came in here yesterday, demanding that we switch to C and scrap parrot

[09:19] <nothingmuch_> maybe we can meet in the middle?

[09:19] <nothingmuch_> we could implement with only the most monadic C like constructs, and everyone is happy

[09:19] *** nothingmuch_ is now known as nothingmuch

[09:20] <autrijus> nothingmuch: the joke is no longer funny :)

[09:20] <nothingmuch> beh!

[09:21] <nothingmuch> so how is everyone?

[09:21] <castaway> nm!

[09:21] * gaal is listening to Abbey Road and pondering Autrijus' challenge.

[09:21] <nothingmuch> si!

[09:22] <castaway> Happy Friday!

[09:22] <nothingmuch> happy friday to you too!

[09:22] <autrijus> I'm just fine :) trying to get more infinite loops fixed

[09:22] <nothingmuch> huraah

[09:23] <gaal> at some level, obviously we can do in-place shuffle because we operate on perl types in place.

[09:23] <gaal> so waht i need it sems is to wrap a haskell array in monadic.. thingie,

[09:23] <gaal> and shuffle that.

[09:23] <gaal> my problems are straightforward so far:

[09:24] <gaal> 1. how to wrap the arr^H^H^Hlist in a monadic thingie

[09:24] <integral> an array of IORefs?

[09:24] <castaway> :)

[09:24] <gaal> 2. how to unwrap it afterwards

[09:24] <gaal> 1.5. how to shuffle elements in it.

[09:24] <gaal> integral: IORef is in the language? or is that a pugsish type?

[09:25] <integral> it's in the language

[09:25] <integral> GHC also has Data.Array.IO and Data.Array.ST

[09:25] <nothingmuch> darcs get http://nothingmuch.woobling.org/Algorithm-Dependency-Objects

[09:25] <gaal> trick is to do it w/o copying over the whole list.

[09:26] <gaal> otherwise we didn't win much.

[09:26] <nothingmuch> tests are not fully converted yet though

[09:26] <autrijus> gaal: try to think it this way

[09:26] <nothingmuch> but it may be useful for someone

[09:26] <autrijus> gaal: you read a bunch of Bugs wBufs via readBuf

[09:26] <autrijus> gaal: you read a bunch of Bufs via readBuf

[09:26] <autrijus> each is a Ptr

[09:26] <autrijus> then you shuffle those Ptrs randomly

[09:26] <autrijus> then you print them out.

[09:27] <autrijus> the easiest way is perhaps to read the entire file into mem as a CString

[09:27] <gaal> well, okay, but then i have to have had my data in a particular format, not a native @array.

[09:28] <autrijus> gaal: uh, you are doing this in pugs?

[09:28] <autrijus> not haskell as I thought?

[09:28] <gaal> no, in haskell; i'm thinking of the comparison to perl that BrowserUk was making.

[09:29] <gaal> though i guess in that case we can take the problem on his terms and indeed read the file *as* anything we like.

[09:29] <autrijus> well, you can do the naive thing and see how slow it is.

[09:29] <autrijus> use getLine repeatedly until eof

[09:29] <autrijus> into IO [String]

[09:29] <autrijus> err, I mean [IO String]

[09:29] <gaal> of course it'll be slow, that was his point, no?

[09:30] <nothingmuch> not IO [String]?

[09:31] <autrijus> hrm.

[09:31] <autrijus> http://okmij.org/ftp/Haskell/perfect-shuffle.txt

[09:34] <autrijus> try merging it with the most naive 

[09:34] <autrijus> lines . getContents

[09:34] <autrijus> I think it will be sufficiently fast.

[09:34] <autrijus> just try it and see :)

[09:36] <Juerd> GOOD MORNING EVERYONE

[09:36] <Juerd> :)

[09:36] <autrijus> hey Juerd-san

[09:37] <Juerd> Hello

[09:37] <Juerd> What is -san?

[09:37] <castaway> Good nearly-midday Juerd

[09:37] <autrijus> Juerd: -san is like Mr.

[09:37] <Juerd> autrijus: In what language?

[09:38] <Juerd> In any case, hello autrijus-san :)

[09:38] <Juerd> castaway: That is what is so good about this morning - it's already almost over.

[09:39] <kungfuftr> (search indexing)-- # takes too long and too many resources

[09:39] *** joepurl_ is now known as joepurl

[09:40] <castaway> Juerd, not mine Im afraid, I'm running out of time, and I actually wanted to go home early.. 

[09:41] <Juerd> I'm going to the office late

[09:41] <castaway> lucky

[09:41] <Juerd> That works much better than going home early

[09:41] <autrijus> Juerd: in japanese :)

[09:41] <Juerd> It's one of the benefits of not having an employer telling you the times to work

[09:42] <Juerd> autrijus: I see

[09:44] <castaway> I dunno, I prefer to relax when its over and done, and not before I get started .)

[09:44] <Juerd> I prefer to jump right into bed after work ;)

[09:45] <castaway> each their own :)

[09:45] * castaway goes back to DB grumbling

[09:45] <Juerd> My addiction won't let me though

[09:45] * Juerd now has domed labels with his company logo

[09:45] <Juerd> hurrah

[09:45] <Juerd> Let the name branding begin.

[09:46] <Juerd> They made the 1" x 1" ones 22mm x 22m, so those are useless.

[09:46] <Juerd> But the rectangular ones are just the perfect size.

[09:46] <bsb> Reading from L<S03/"Junctive operators"/"Junctions are specifically unordered">

[09:47] <castaway> domed ?

[09:47] <Juerd> castaway: A layer of plastic, as on computer case badges

[09:48] <Juerd> It makes the labels look a little like Mac OS X aqua buttons :)

[09:48] <kungfuftr> Juerd: do we get free ones?

[09:48] <bsb> test:   for all(@foo) { %got{$_}; };   

[09:48] <Juerd> kungfuftr: What would you do with labels that have my logo on it? :)

[09:49] <Juerd> bsb: Do junctions in list context flatten, then?

[09:49] <kungfuftr> Juerd: use them as rubber feet for my desktop unit

[09:49] <kungfuftr> =0)

[09:49] <Juerd> Didn't you mean to say for all(@foo).values { ... }?

[09:49] <Juerd> kungfuftr: Heh, they were a bit too expensive to be used out of sight :)

[09:49] <Juerd> But they'd work well as rubber anti-slip feet.

[09:49] <bsb> Juerd: Don't think so

[09:50] <bsb> I'm going from L<S03/"Junctive operators"/"Junctions are specifically unordered">

[09:50] <bsb> Which seems to be saying something unusual

[09:50] <bsb> Trying to check my reading of it

[09:52] <gaal> autrijus, the doc you linked to still doesn't do in-place ordering, does it? if you have a list in memory it won't shuffle it in place. if you have the data on disk, you read it into a tree and extract a shuffled list, which is a copy of the data - sure you could do a list of pointers to the data, but you stil have to allocate a new list.

[09:52] <gaal> s/ordering/shuffling/

[09:52] <castaway> oh, nifty

[09:53] <bsb> It looks like `for all(1,2) { ... }` can run the block in parallel

[09:53] <Juerd> bsb: Could be made to run the block in parallel.

[09:53] <autrijus> gaal: uh, not sure what you mean.

[09:53] <autrijus> gaal: sure it doesn't do inplace ordering

[09:54] <autrijus> if you want inplace ordering, try IOArray :)

[09:54] <gaal> think of it from the perl starting point. you have an @array, and you can do shiffle \@array.

[09:54] <autrijus> IOArray of String

[09:54] <gaal> looking up....

[09:54] <autrijus> sure; if you have an IOArray, you can shuffle IORef IOArray

[09:54] <autrijus> it's in Data.Array.IO

[09:54] <gaal> Data.Graph.Inductive.Monad.IOArray ?

[09:55] <autrijus> no, IOUArray in Data.Array.IO

[09:55] <autrijus> IOU is extremely fast

[09:55] <bsb> Juerd: Yes, so in the non-parallel case should `for all(1,2) { %got{$_} = 1; };` set %got{1}=1

[09:55] <autrijus> because it's unboxed, so is quiv. with raw C code

[09:55] <gaal> they should have named it EFArray then.

[09:55] <bsb> ?

[09:55] <autrijus> gaal: heh.

[09:55] <autrijus> IO means it's in the IO monad; U means it's unboxed

[09:55] <autrijus> but STUArray is probably enough for you.

[09:55] <autrijus> STU may or may not be even faster

[09:56] <gaal> that's for STUpendously fast (maybe) array, yes? (just checking)

[09:57] <autrijus> you can use Data.Array.MArray as the interface code.

[09:57] <autrijus> no... ST means it's in the ST monad.

[09:57] <autrijus> ST monad maintains state, but does not do input/output.

[09:58] <Juerd> bsb: I don't know how for $junc should behave.

[09:59] <bsb> Anyone else?  for all(1,2) { %got{$_} = 1; };  

[10:00] <bsb> It's not clear in s03

[10:00] <gaal> I want... MArray (STUArray s) (Ptr a) (ST s)  ?

[10:01] <autrijus> gaal: something like that

[10:01] <autrijus> gaal: instead of Ptr, use CStringLen

[10:02] <autrijus> I think a STUArray of CStringLen is probably fast enough.

[10:02] <autrijus> you can read the entire file as a [CStringLen], convert it to a STUArray, sort it in place, then output it

[10:03] <autrijus> s/sort/shuffle/

[10:03] * castaway waves at broquaint.

[10:03] <autrijus> still I don't think inplace shuffling is the best way to go

[10:03] * broquaint waves back

[10:03] <autrijus> I think just randomising the indexes is good enough.

[10:03] <gaal> autrijus, that depends on what you're trying to do, of course

[10:04] <autrijus> gaal: I thought we are optimising for speed

[10:04] <gaal> yes--

[10:04] <Juerd> bsb: +all(1,2) is 1

[10:04] <gaal> but maybe the thingie receiving the shuffle needs an actual list and can't be changed?

[10:05] <Juerd> Oh, no it's not.

[10:05] <gaal> oops, i downmoosed one of my favorite bands. yes++ then.

[10:06] <autrijus> gaal: hm?

[10:06] <gaal> suppose you have some function you dontcontrol that 

[10:06] <gaal> wants an ordered list

[10:07] <gaal> you can't change the api; you have data and you want to feed it to that function.

[10:07] <autrijus> sure; so you just pass it to sort()

[10:08] <gaal> sort? shuffle() you mean?

[10:08] <autrijus> I'm confused

[10:08] <autrijus> 18:07 < gaal> wants an ordered list

[10:09] <Juerd> autrijus: Why with %hash{all(4,5,6)}, is all(4,5,6) a string?

[10:10] <autrijus> Juerd: that is a bug.

[10:10] <autrijus> write a test and commit it?

[10:10] <bsb> Juerd: it seems like for handles Junctions specially in s03

[10:10] <gaal> i meant it expects a list where the order matters, not that it expects sorted input

[10:10] <gaal> brb

[10:11] <Juerd> I don't know what it should do - stringify as ~all(...) does, or use the junction, or result in all(%hash{4,5,6})

[10:11] <autrijus> Juerd: I'm of the opinion that it should autothread.

[10:11] <autrijus> deref is just conceptually a method call

[10:13] <autrijus> gaal: I think I'll speak with code :)

[10:13] <autrijus> brb too

[10:15] <Juerd> autrijus: What does autothread mean for a hash key? :)

[10:18] <autrijus> %hash.circumfix<{}>(all(4,5,6));

[10:18] <autrijus> same as

[10:18] <autrijus> all(%hash{4}, %hash{5}, %hash{6})

[10:18] <autrijus> I'm pretty sure that's the way to go

[10:18] <Juerd> Ok.

[10:18] <autrijus> &

[10:18] <Juerd> And how does assignment to a junction work?

[10:19] <Juerd> Since %hash{$conjunc}++ is kind of likely to be used, I think.

[10:19] <Juerd> Assign to each of the elements, and autothread around that again?

[10:19] <Juerd> all(%hash{4} = 1, ...)

[10:22] <broquaint> So does %hash{4,5,6} (hash slice?) behave the same as %hash{all(4,5,6)} (junction of a hash slice?) ?

[10:23] <broquaint> Not quite, I guess.

[10:38] <nothingmuch> hola theorbtwo 

[10:38] <theorbtwo> Hola, nothingmuch!

[10:39] <nothingmuch> what's new?

[10:39] <theorbtwo> Not too much.

[10:39] <theorbtwo> My eyesight is starting to go bad.

[10:39] <nothingmuch> in which sense?

[10:40] <castaway> too much looking at computer screens .. 

[10:40] <broquaint> Get a projector?

[10:41] <nothingmuch> projectors are hard to read from

[10:41] <theorbtwo> My monitor looks very fuzzy.

[10:41] <castaway> .. and find your glasses..

[10:41] <nothingmuch> theorbtwo: LCD monitors help

[10:41] * theorbtwo hmms.

[10:41] <nothingmuch> very sharp

[10:41] <nothingmuch> so you can lower brightness a bit

[10:41] <nothingmuch> good contrast

[10:41] <theorbtwo> Yes, but are an expense we presently cannot afford.

[10:41] <castaway> nothingmuch: you donating one?

[10:41] * nothingmuch has one on his el-cheapo laptop

[10:42] <nothingmuch> and one on my desk at work

[10:42] <nothingmuch> also, i'd like to note that IMHO health comes before see hacking, etc ;-)

[10:42] <theorbtwo> I haven't been doing much SEE hacking, that's mostly Jess.

[10:43] <theorbtwo> I should probably up my resolution and take breaks and all that jazz.

[10:43] <castaway> (and thats stalling on lack of decent ways to test it atm)

[10:43] <theorbtwo> Er, lower my resolution I mean.

[10:43] <nothingmuch> breaks are important

[10:43] * nothingmuch coughs

[10:51] * castaway sighs and mutters "zealots" .. 

[10:53] <theorbtwo> BRB, restarting X.

[10:53] <Odin-> castaway: What sort?

[10:54] <castaway> the annoying sort (daft convo about what "free" means, just because I quoted "db2 is free for personal use")

[10:56] <Odin-> Ah.

[10:56] <Odin-> The sort I hang around. ;)

[10:57] <castaway> feel free to join #eamcs :)

[10:59] * Odin- agrees that some people take it too far, but you can see where they're coming from, can't you? :>

[11:00] <castaway> yes, and no.. to survive in this society, you need to learn to figure out people mean, without correcting them all the time.. (since 99% of the time, its actually quite clear)

[11:00] <castaway> being picky wont fix anything :)

[11:01] * castaway wonders if he's given up :)

[11:01] <Odin-> True.

[11:01] <Odin-> Which is what I meant by taking it too far. ;)

[11:02] * castaway nods.

[11:06] * castaway smooches theorbtwo

[11:07] <theorbtwo> Miss me so soon?

[11:08] <castaway> yup

[11:08] * theorbtwo wonders what happened to his panel.

[11:09] * castaway hasnt got it

[11:11] <castaway> I paid for my muffin with the 19 5-cent pieces today, and he didnt even blink an eye, twas most disappointing..

[11:11] <castaway> (didnt count them either, though :)

[11:12] <kungfuftr> (binary)-- # not human readable

[11:13] <kungfuftr> can perl6 make binary readable please?

[11:13] <kungfuftr> =0)

[11:14] <theorbtwo> pugs -e 'print 0b1001110'

[11:14] <theorbtwo> Er, s/print/say/

[11:15] <kungfuftr> theorbtwo: heh, having to debug binary search index files, very fun

[11:16] <kungfuftr> anywhos

[11:17] <castaway> sounds like great fun

[11:23] <cognominal> arf, I used reply to p6l in mutt and I forget to delete the In-Reply-To and change the subjet.  Not using aliases was false lazyness :(

[11:23] <cognominal> sorry about that

[11:26] <Juerd> cognominal: [email@hidden.address] is not that much typing.

[11:26] <Juerd> I don't use aliases.

[11:27] <nothingmuch_> stevan: ping

[11:31] <kungfuftr> ($shit,$voodoo) := ("perl6","php");

[11:31] * kungfuftr hides

[11:32] <kungfuftr> bah, wrong usage

[11:32] <kungfuftr> Juerd: i'm incorrect in usage... right?

[11:33] <Juerd> Yes, Perl 6 isn't shit.

[11:33] <castaway> :)

[11:33] <Juerd> Apart from that, I wouldn't know why the syntax would be wrong.

[11:33] <kungfuftr> Juerd: swap melarky

[11:33] <Juerd> As binding to a string literal makes sense, and probably makes it kind of like the "is const" thing.

[11:34] <kungfuftr> $shit = "perl6"; $voodoo = "php"; ($shit,$voodoo) := ($voodoo,$shit); # more likely correct

[11:35] <kungfuftr> again, could be wrong

[11:36] <kungfuftr> Juerd: wrong?

[11:36] *** chady is now known as chady_

[11:36] <nothingmuch_> ?

[11:36] *** nothingmuch_ is now known as nothingmuch

[11:38] <Juerd> kungfuftr: It'd be easier if you said what the hell you want it to do.

[11:38] <wolverian> language!

[11:38] <kungfuftr> Juerd: it's to do with swapping the names of the variables without the copying... end result... $voodoo is perl6 and $shit is php

[11:38] <theorbtwo> Anglais, por favor.

[11:39] <kungfuftr> theorbtwo: voulez-vous couchez avec ta mere, ce soir?

[11:39] <theorbtwo> .oO(Huh?)

[11:40] <castaway> say no :)

[11:40] <theorbtwo> No.

[11:41] <castaway> I *think* "Do you want to have sexs with my mother, this evening"

[11:42] <kungfuftr> castaway: "will you sleep with your mother this evening?"

[11:42] <castaway> oh "your" .. even worse ;)

[11:42] <kungfuftr> =0)

[11:42] <castaway> ah well, right answer anyways..

[11:43] <cognominal> kungfuftr: either   "voulez-vous coucher avec votre mère" or  "veux-tu coucher avec ta mère?"

[11:43] <cognominal> you can't mix "vous" et "ta"

[11:43] <castaway> good point cognominal 

[11:44] <castaway> ,)

[11:44] <castaway> (language discussions on #gaia, btw :)

[11:48] <kungfuftr> cognominal: you can mix them, since you might be talking to more than one person

[11:48] <kungfuftr> etc.

[11:48] <kungfuftr> hhhmmm... though

[11:51] <cognominal> that would be "voulez-vous coucher avec votre mère"  then :)

[11:52] <cognominal> btw you are welcome on grou.ch #perlfr if you want to speak French. There is  a #perlfr on freenode, but they are lamers

[11:53] <nothingmuch> stevan: gong

[11:53] * nothingmuch wishes he'd wake up

[11:53] * nothingmuch tries to speak french occasionally

[11:54] <nothingmuch> i started learning twice

[11:54] <nothingmuch> and forgot nearly all twice

[11:54] <nothingmuch> =(

[11:56] * kungfuftr speaks far better french if he spends a day or so in paris, etc.

[11:58] <cognominal> if you do come to visit the mongueurs...

[11:59] <cognominal> or come to Marseille for the French Perl Workshop

[12:02] <Juerd> kungfuftr: ($a, $b) := ($b, $a) swaps without copying.

[12:02] <Juerd> kungfuftr: When there's no repetetion on the RHS, you can't speak of swapping.

[12:09] <nothingmuch> kungfuftr: what is your opinion on that test model doc?

[12:12] <kungfuftr> nothingmuch: which one

[12:13] <nothingmuch> http://nothingmuch.woobling.org/test_result_model.pod

[12:13] <kungfuftr> Juerd: ah ha! so $voodoo would be "perl6"

[12:18] <kungfuftr> nothingmuch: not bad, though there should be no computated data within the model.

[12:19] <theorbtwo> Hm?

[12:19] <theorbtwo> How do you figure / why not?

[12:19] * kungfuftr & # lunch!

[12:20] <kungfuftr> theorbtwo: ie: ratio... just give total, passed, failed, etc.... and to the computation elsewhere... would allow for weighting, etc.

[12:21] <theorbtwo> If you want to compute it differently, you can compute yourself.

[12:22] <nothingmuch> i've thought about that long and hard

[12:22] <nothingmuch> and thought that perhaps it is a good idea

[12:22] <nothingmuch> because the model must appear inconsistent in a simple way

[12:22] <nothingmuch> if it is inconsistent

[12:22] <nothingmuch> one could argue that a protocol with missing plan members has such cases which are failed

[12:22] <theorbtwo> If you don't, the default is easy to use and good for most uses.

[12:22] <nothingmuch> and a protocol could stub that

[12:22] <nothingmuch> i think that it's a simple concept

[12:22] <nothingmuch> and could be centralized into the model

[12:22] <nothingmuch> and the model would have the 'default' interface, which has stubs

[12:22] <nothingmuch> and perhaps a purer base class

[12:22] <nothingmuch> or a purer set of methods

[12:22] <nothingmuch> that don't stub

[12:22] <nothingmuch> but i think stubbing is very important for writing good display tools easily

[12:22] <theorbtwo> So do I.

[12:22] <nothingmuch> kungfuftr: you don't have to use ratio

[12:22] <nothingmuch> it's just that even Test::Harness gets it wrong some times

[12:23] <nothingmuch> these computations should be standardized

[12:23] <nothingmuch> and be put in one place

[12:23] <nothingmuch> and should be available by default

[12:23] <theorbtwo> There's nothing wrong with having both an ->expected and ->unexpected method, which are defined to be the negation of each-other.  There's a reason perl has both if and unless.

[12:25] <nothingmuch> ... and that reason is readabilty

[12:25] <nothingmuch> it's easier to read something that sounds more like english

[12:25] <nothingmuch> and there's a reason why people make fun of double negatives in english

[12:25] <nothingmuch> OTOH english has many logical ambiguities

[12:33] <kungfuftr> nothingmuch: http://pugs.kwiki.org/?TestModel *shrug*

[12:34] <nothingmuch> sort of

[12:35] <nothingmuch> why are you against computations, btw?

[12:35] <kungfuftr> nothingmuch: blame mugwump... he enstilled a sense of pure data modelling into me

[12:35] <nothingmuch> hmm

[12:36] <nothingmuch> normally I agree

[12:36] <nothingmuch> and I think that a pure data model *should* be accessible

[12:36] <nothingmuch> but i think that normally it shouldn't be the case

[12:36] <kungfuftr> nothingmuch: a method to do it would be nice, but the actual data be pure?

[12:36] <nothingmuch> yes, the underlying data is pure

[12:36] <kungfuftr> ah... k

[12:36] <nothingmuch> Test::Model isa Test::Model::Pure

[12:37] <nothingmuch> and Test::Model has data query methods that append or mark sub objects

[12:37] <nothingmuch> after taking them from the Test::Model::Pure superclass

[12:37] <kungfuftr> yar, sounds good... encapsulation++

[13:27] <autrijus> rehi

[13:27] <Limbic_Region> lo

[13:27] <autrijus> so I wasted some time writing shuffle.hs ;)

[13:28] <Limbic_Region> autrijus - the last smoke Corion did showed 178 or so tests still failing - any idea what the number is now?

[13:28] <Limbic_Region> Additionally, did the refactor of context parsing raise any bizarre edge cases of non-dwymery?

[13:28] <autrijus> Limbic_Region: something around that.

[13:29] <autrijus> Limbic_Region: yes, lots and lots of.

[13:29] <Limbic_Region> those cases reported to p6.l ?

[13:30] <clkao> autrijus: want to help make win32 build for beta2?

[13:30] <theorbtwo> Allo, autrijus!

[13:30] * Limbic_Region was just hoping to get a summary

[13:31] <autrijus> Limbic_Region: uh no, so far it's been cleared up by lwall and juerd

[13:31] <autrijus> so, nothing language-shaking per se.

[13:31] <autrijus> although I did find out some weird cases with := semantics. still thinking about it

[13:32] <theorbtwo> <autrijus> That doesn't look right.  <larry> But it is!

[13:32] <autrijus> :D

[13:32] <Limbic_Region> right - what I meant by cases of non-dwymery were rules that made sense at first and second glances but given situation X made no sense at all

[13:34] <kungfuftr> autrijus: that operators/binding.t ?

[13:35] <autrijus> kungfuftr: yeah, it fails, I'm investigating

[13:35] <kungfuftr> autrijus: proabably the ($x, $y) := ($y, $x) i added

[13:37] <Juerd> http://juerd.nl/filesize.png  # I sometimes *love* KDE 

[13:38] <Juerd> (Not going to show you my pr0n archive, but I know now exactly which parts to clean up (hm, dubious))

[13:39] <theorbtwo> Autrijus, I'm starting to look at a more perlish (IE return whatever you want) eval_haskell, and I'm not sure how to implement it, and I'm also not sure I understand your Evallable design from http://meme.b9.com/cview.html?channel=haskell&date=050416.

[13:41] <theorbtwo> I was looking at possibly a largish valFromDynamic function, that takes a Dynamic (which is required to be a Typeable already) and makes it into a Val.

[13:41] *** stevan changes topic to: pugscode.org <Overview Journal Logs> | r1773/winxp: 587/4256, smoke/win2k (occasional): http://xrl.us/fqum (214/4453, r2198) Mac OS X (160/4483, r2216) | pugs.kwiki.org

[13:41] *** theorbtwo changes topic to: pugscode.org <Overview Journal Logs> | r1773/winxp: 587/4256, smoke/win2k (occasional): http://xrl.us/fqum (214/4453, r2198), Mac OS X (160/4483, r2216) | pugs.kwiki.org

[13:42] <stevan> nothingmuch: BANG!!

[13:42] <autrijus> theorbtwo: that looks promising enough

[13:43] <autrijus> theorbtwo: the Evalable design is orthogonal

[13:43] <autrijus> it's designed to make

[13:43] <autrijus> eval_haskell "'x'"

[13:43] <autrijus> eval_haskell "return 'x'"

[13:43] <autrijus> both work.

[13:43] <autrijus> by essentially adding the proper amount of lifting

[13:44] <theorbtwo> Right.  You could do that in valFromDynamic -- one is a Char, the other is an IO Char.

[13:44] <theorbtwo> If you've got an IO a, then unsafePerformIO it, and get an a, and then do the normal thing on that.

[13:44] <theorbtwo> (Well, from a Dynamic IO a to a Dynamic a, hopefully.)

[13:45] <theorbtwo> (This assumes, of course, that I can figure out how to do that... I think it's dynApp, but I'm not sure, and dynApp seems to be undocumented.)

[13:45] <autrijus> uh, valFromDynamic should probably not unsafePerformIO it.

[13:46] <autrijus> valFromDynamic :: Dynamic -> Eval Val

[13:46] <theorbtwo> Oh, that also makes a lot of sense.

[13:46] <autrijus> you can do typecasing based on typeOf.

[13:47] <theorbtwo> Righ.

[13:47] <theorbtwo> Right.

[14:15] <autrijus> perl5 shuffle:

[14:15] <autrijus> 4.619u 1.010s 0:05.89 95.4%     10+79736k 0+0io 0pf+0w

[14:15] <autrijus> GHC shuffle:

[14:15] <autrijus> 3.007u 0.038s 0:03.10 97.7%     323+359k 0+0io 0pf+0w

[14:15] * autrijus proceeds to reply to BrowserUK

[14:19] <Juerd> And pure perl 6 shuffle? :)

[14:20] <autrijus> I don't know :)

[14:20] <autrijus> maybe we should compile it to parrot :)

[14:20] <autrijus> it may be even faster.

[14:21] <Juerd> What do you think of Bool +$read|r to allow both the name 'read' and the name 'r'?

[14:21] <Juerd> :read and :r

[14:21] <Juerd> Same thing.

[14:21] <Juerd> It doesn't play nice with precedence in the signature, but normal precedence plays no role there anyway.

[14:22] <autrijus> I think it's a weird idea.

[14:22] <Limbic_Region> apparently gcc 4.0 has a brand new optimizer - wonder if that would affect the Parrot results *grin*

[14:22] <autrijus> Bool +$read|$r  maybe?

[14:22] <autrijus> I know!

[14:22] <Juerd> autrijus: I had that before, and then I didn't like the redundant $ :)

[14:22] <Juerd> But I agree that it looks much more natural

[14:22] <autrijus> hm

[14:22] <autrijus> what happens if the user gives both

[14:23] <Juerd> Same thing as when the same name was used twice.

[14:23] <Juerd> :read :read

[14:23] <Juerd> :read :r

[14:23] <Juerd> :r :read

[14:23] <autrijus> k.

[14:23] <Juerd> All exactly the same thing

[14:23] <autrijus> I think the extra sigil is a win.

[14:23] <Juerd> (And I don't know what happens then :P)

[14:24] <Juerd> autrijus: The problem with it is that aesthetically (because of precedence), I want to repeat the + too there

[14:24] <Juerd> And that leaves you with +$read|+$r, which is a lot of typing and linenoise

[14:24] <Juerd> And begs for +$read|?$r, which is impossible to work with :)

[14:24] <Juerd> But perhaps it's just my sense for aesthetics that needs adjustment

[14:25] <autrijus> can you have

[14:25] <autrijus> +$read|@r

[14:25] <autrijus> ?

[14:31] <Juerd> I'd have no idea how to interpret that

[14:31] <Juerd> This is a good reason to either not repeat the sigil, or to enforce that it is the same

[14:32] <Juerd> s:2nd/ to//

[14:34] <autrijus> gaal: http://perlmonks.org/?node_id=450426

[14:41] <Limbic_Region> print rand 10, $/ for 1..1_000_000; # succinent

[14:44] <autrijus> yeah, and I could've used perl -wle or something :)

[14:45] <autrijus> it's a bit of stretch to call the haskell version as a "port" though.

[14:46] * Limbic_Region just realized who he was suggesting a shorter version too

[14:46] <autrijus> because instead of sorting string refs, it sorts offsets

[14:46] * Limbic_Region hangs his head since his golf'ing handicap is astronomical

[14:46] <autrijus> but problem is perl5 doesn't even have that option; substr() into a multi-megabyte string is not a win 

[14:57] <theorbtwo> Hometime already, Corion?

[14:58] <theorbtwo> Oh, I guess it is.

[14:58] * theorbtwo doesn't have a clock on his screen at present.

[14:59] * castaway sighs

[15:01] * Corion waves from home.

[15:10] <Corion> Another bad job well done. Cpansmoking can be such fon

[15:10] <Corion> s!fon!fun!

[15:11] <Corion> pugs.exe: cannot cast from VList [] to Handle -- I think I remember that bug ... It happens in t/pugsrun/02-dash-n.t and 03*.t - they both try to read from =<>

[15:13] <autrijus> indeed. fixing

[15:13] <autrijus> fixed

[15:14] <autrijus> ok, infinite loop gone.

[15:15] <autrijus> may I request another round of smoke?

[15:15] <autrijus> (r2217)

[15:16] <Corion> Just smoked

[15:16] <Corion> r2216 - http://datenzoo.de/pugs/win2k.html

[15:17] <autrijus> cool. then no need to

[15:17] <Corion> (and no infinite loop there, although abs.t still looks weird :) )

[15:21] <autrijus> ok. I think Pair wants to be Pair objects.

[15:21] <autrijus> instead of VPair.

[15:29] <autrijus> sadly I need to crash now. gotta wake up real early tomorrow. :/

[15:30] <autrijus> aiming for a weekend release, then

[15:30] * autrijus waves &

[15:31] <Corion> good night then :)

[15:37] <Corion> Yay. async() and system() now work together it seems!

[15:37] <Corion> So there is little preventing me from writing a small HTTP::Proxy and testing it via subprocesses. Except that I don't have time this weekend :)

[15:44] <Corion> nothingmuch: BTW, if a test crashes, it would be nice to have the remaining (planned) tests not as plain fails but somehow as different fails. A darker red, for example :)

[16:02] <nothingmuch> Corion: that can be done

[16:02] <nothingmuch> want to patch? it's a simple fix

[16:02] <Corion> nothingmuch: No hurry - just an idea :)

[16:02] <nothingmuch> i just can't do it right now

[16:03] <nothingmuch> what needs to be done to the model, to do it cleanly:

[16:03] <Corion> nothingmuch: np - I won't be at home for the next few hours either

[16:03] <nothingmuch> grep -r for 'stub'

[16:03] <nothingmuch> find the code that generates them

[16:03] <nothingmuch> and add a property

[16:03] <Corion> I only wanted to dump the idea before I lose it again ;)

[16:03] <nothingmuch> then make a proper method for it

[16:03] <nothingmuch> and a css class for the display

[16:03] <nothingmuch> and add knowlege about the class to Test::TAP::Model::Subtest::Visual

[16:03] <nothingmuch> okay

[16:04] <Corion> bbl

[16:36] <kungfuftr> http://kungfuftr.com/pugs-smoke.html - back fer now

[16:53] <cognominal> Larry has answered my mail about functional extension to Perl6. I don't get these two lines about already supported/speced  features

[16:53] <cognominal>  autogenerating arrays

[16:53] <cognominal>     [] pattern matching arguments

[16:53] <cognominal> is the first, only our classic map and grep?

[16:54] <cognominal> where is the second specced?

[17:23] <nothingmuch> autogenerating arrays: anything infinite, i think

[17:23] <nothingmuch> and much more flexibly: gather { take }

[17:23] <nothingmuch> i think that it will pause when taking

[17:23] <nothingmuch> and then when a new element is needed it continues after the take()

[17:23] <nothingmuch> and reiterates the gather block

[17:24] <nothingmuch> or the nested loops inside it, more accurately

[17:54] <nothingmuch> anyone here a getopt guru?

[17:54] <nothingmuch> i need some advice

[18:02] <cognominal> I still don't get what he means by  "[] pattern matching arguments"

[18:08] <crysflame> context?

[18:09] <PerlJam> cognominal: sub foo ([$head,@tail], $second_arg) { ... }

[18:09] <PerlJam> cognominal: foo would be called as foo(@array,$blah);

[18:09] <PerlJam> nothingmuch: I'm not a guru but I can play one on IRC.  :-)  What advice do you need?

[18:10] <ingy> all I know is that every programmer writes their own version of getopt at some point

[18:11] <PerlJam> ingy: indeed. That was one of the first things I wrote in python when learning the language.

[18:16] <cognominal> Perl_jam: thx, this is indeed a form of pattern matching

[18:16] <cognominal> boy, I will love Perl6

[18:18] <PerlJam> cognominal: You don't love it now?  ;)

[18:20] * PerlJam notes that perl5 was released 2 years before it was stable enough to be generally useful.  (give or take)  I imagine that perl6 will be the same.

[18:20] <nothingmuch> sorry, back

[18:20] <nothingmuch> sister was exploiting my licensed status

[18:21] <nothingmuch> PerlJam: Is there a fun module that lets me convert args to something Params::Validate might like to eat?

[18:21] <nothingmuch> basically, i want @ARGV to be treated as a positional + flag + named param list

[18:21] <nothingmuch> and I want to name positionals and flags myself

[18:21] <nothingmuch> and be able to say $config->field();

[18:21] <nothingmuch> and get the CLI value

[18:22] <castaway> GetOpt::Long ?

[18:22] <PerlJam> nothingmuch: Getopt::Declare perhaps?  (I don't really know, but look on CPAN in the Getopt:: namespace)

[18:22] <nothingmuch> castaway: i am sort of hoping to do it without writing code

[18:22] <nothingmuch> and guessed someone might have something for the job

[18:22] <castaway> pigs may fly ;)

[18:22] <nothingmuch> castaway: tsk tsk

[18:22] <nothingmuch> reminds me of yet another discordian quote:

[18:22] <PerlJam> castaway: hey, that's not an unreasonable expectation.  Almost everytime I think to do something cool, I find that someone has already done it.

[18:23] <nothingmuch> "Eagles may soar, but cows don't get sucked into jet engines"

[18:23] * nothingmuch wonders what shapr is doing instead of appreciating my references

[18:23] * nothingmuch feels guilty all of a sudden

[18:24] <nothingmuch> i just realized that I make about 300-400 queries a day on search.cpan.org

[18:24] <nothingmuch> i should donate something

[18:24] <nothingmuch> http://search.cpan.org/~abw/AppConfig-1.56/lib/AppConfig/Getopt.pm <-- hmm

[18:27] * nothingmuch thinks the only sort of sportish thing he can do better than others, aside from throwing knives, is running up the stairs with coffee

[18:27] <nothingmuch> for some reason it never ever spills

[18:29] <crysflame> nothing: fwiw, google site:search.cpan.org works

[18:31] <nothingmuch> crysflame: usally i type http://search.cpan.org/perldoc?Some::Module

[18:31] <nothingmuch> i do this a lot for modules I don't have installed

[18:32] <nothingmuch> or for modules with long doc pages

[18:32] <nothingmuch> where the terminal doesn't give me enough perspective

[18:32] <nothingmuch> (no scroll bars)

[18:41] <ingy> nothingmuch: have you seen my new baby, Test::Chunks?

[18:41] <nothingmuch> nope

[18:41] * ingy is a proud mother

[18:42] * castaway wonders whether it needs Spiffy/Spoon/IO::All ,)

[18:42] <nothingmuch> hmm... looks very useful

[18:43] <ingy> castaway: :p

[18:43] <nothingmuch> ingy: you're good at speccing things

[18:43] <castaway> SCNR ;)

[18:43] <nothingmuch> http://nothingmuch.woobling.org/test_result_model.pod

[18:43] <ingy> nothingmuch: how so

[18:43] <nothingmuch> the model isa Test::Results::Model::Pure

[18:43] <nothingmuch> ingy: YAML is pretty good, kwid is pretty good

[18:44] <nothingmuch> Kwiki is fun to work with (except in hebrew, that was a pain)

[18:44] <ingy> I didn't write the YAML spec

[18:44] <nothingmuch> (but then again, CamelCase is not possible in hebrew)

[18:44] * nothingmuch thought ingy was part of the spec

[18:44] <nothingmuch> anyway, so kwid is pretty good

[18:44] <nothingmuch> and that's it

[18:44] <ingy> I helped

[18:44] <nothingmuch> but despited the fact that you suck at speccing

[18:44] <ingy> but Oren did most of it

[18:44] <nothingmuch> i'd like you to look at that pod ;-)

[18:45] <nothingmuch> s/despited/despite/;

[18:45] <ingy> ok

[18:46] <nothingmuch> is the 'all' target the default for makefiles?

[18:46] <nothingmuch> i.e., is that what's implied when you run make with no args?

[18:46] <castaway> think so

[18:46] <ingy> nothingmuch: we should talk about this at the hackathon

[18:47] <nothingmuch> ingy: hackathon is far away

[18:47] <nothingmuch> gaal wants to do Test::Harness in p6

[18:47] <nothingmuch> i said it should be split up

[18:47] <ingy> it fits well with my sidelined babeltest framework

[18:47] <nothingmuch> because IMHO Test::Harness sucks for reusability

[18:47] <nothingmuch> babeltest?

[18:47] <ingy> it is a descendant of Ward Cunningham's fit testing

[18:48] <ingy> a defined object model would be really useful

[18:48] <ingy> a well defined one

[18:48] <ingy> babeltest has an adhoc object model

[18:48] <ingy> but it is a object tree based testing system

[18:49] <nothingmuch> what is FIT?

[18:49] <ingy> have you ever looked at FIT?

[18:49] <nothingmuch> no

[18:49] <ingy> guess not

[18:49] <nothingmuch> 10 word limit ;-)

[18:49] <ingy> it is very cool

[18:49] <nothingmuch> boy, you're wasteful

[18:49] <ingy> you should check it out

[18:50] <ingy> I have a Test::Fit on CPAN

[18:50] <ingy> ?

[18:50] <nothingmuch> 40% of what FIT is by that def is 'very cool'

[18:50] <nothingmuch> if you consider the 10 word limit

[18:50] <ingy> I'm not considering it though :P

[18:51] <ingy> I never  really finished Test::FIT

[18:51] <nothingmuch> yeah yeah

[18:51] <nothingmuch> http://fit.c2.com/ <-- good enough start?

[18:51] <ingy> FIT is cross language testing framework

[18:51] <ingy> yes

[18:51] <ingy> you can spec a project with FIT and implement in any language

[18:52] <nothingmuch> hmm

[18:52] <nothingmuch> is it sort of like a test plan

[18:52] <nothingmuch> and the second argument to is()?

[18:52] <ingy> Babeltest is my fork of it

[18:52] <ingy> you should read about it

[18:52] <ingy> before comparing it to Test::Harness

[18:52] <nothingmuch> okay

[18:52] <nothingmuch> i'll do that

[18:53] <ingy> I actually made Test::Fit output Test::Harness output

[18:53] <nothingmuch> my grand scheme is that Test::Result::Model is generic enough to be useful

[18:53] <nothingmuch> so that most test protocols can fit into it

[18:53] <nothingmuch> and those that can't should easily be modded

[18:53] <ingy> it should be programming lanuage independent

[18:53] <nothingmuch> or are just too dumb, and that's their problem

[18:53] <nothingmuch> it is

[18:53] <ingy> good

[18:53] <nothingmuch> i'm already using Test::TAP::Model for a C++ framework

[18:53] <nothingmuch> with modified TAP output

[18:54] <nothingmuch> so the Test::Result::Model should have an interface through which it can be constructed easily

[18:54] <nothingmuch> it should know to subscribe to a standard event parser interface

[18:54] <nothingmuch> and then you have Test::TAP::Parser

[18:54] <nothingmuch> so you smudge the two together

[18:55] <nothingmuch> you can also subscribe to Test::TAP::Parser if you want to display running results, for example

[18:55] <nothingmuch> but the point is that after words, for aggregated display

[18:55] <nothingmuch> you have a very stable

[18:55] <nothingmuch> very standardized object model

[18:55] <nothingmuch> that you can feed in a cross language way to display tools

[18:55] <nothingmuch> if it's in p6 then theoretically through parrot this is shared

[18:55] <ingy> I haven't looked at TAP yet

[18:55] <nothingmuch> so reporting tools in ruby could use it

[18:56] <ingy> do you think  test chunks could benefit from TAP integration?

[18:56] <nothingmuch> tap is nice

[18:56] <nothingmuch> but i think a bit too flat

[18:56] <nothingmuch> base it on Test::Builder

[18:56] <ingy> base what?

[18:57] <ingy> Test::Chunks

[18:57] <nothingmuch> yup

[18:57] <ingy> it is already built over Test::More, so yeah

[18:57] <cognominal> I try to compile hs-plugins and I get : ./Plugins/ParsePkgConfCabal.hs:280:49: Not in scope: `hugsOptions'

[18:57] <nothingmuch> ah, okay

[18:57] <nothingmuch> so it is integrated

[18:57] <ingy> you can use it just like test more

[18:58] <ingy> I did one cool trick... it adds strict and warnings to your test files automatically

[18:58] <ingy> stole that from Spiffy

[18:58] <nothingmuch> source filters? aaaah!

[18:59] <ingy> yeah, why not. just forget about it

[18:59] <ingy> it is truly useful

[19:00] <nothingmuch> =)

[19:00] <ingy> the test suite for Test::Chunks is mighty clean

[19:00] <nothingmuch> does it use Test::Chunks?

[19:00] <ingy> but I got bit by not using strict

[19:01] <theorbtwo> cognominal: Try asking in #haskell?

[19:01] <ingy> anyway a test model sounds lovely

[19:01] <ingy> let me know when it gets more formal

[19:01] <nothingmuch> i wish I had more time to code it

[19:01] <nothingmuch> but Test::TAP::Model is a good start

[19:02] <nothingmuch> what I would like to do is purify it a little

[19:02] <ingy> I'll study that

[19:02] <nothingmuch> reimplement Test::Harness::Straps so that it's not so icky to work with

[19:02] <Juerd> http://www.guardian.co.uk/online/news/0,12597,1465973,00.html

[19:02] <Juerd> This means that in reality, we're even much smarter!

[19:02] <nothingmuch> make Test::TAP::Model not be isa Test::Harness::Straps just because that saved me some coding

[19:02] <crysflame> nothingmuch: hmm, nice.

[19:02] <Juerd> (Weird how it can differ 10 "iq points", as IQs are normally-distributed quotients...)

[19:03] * nothingmuch cannot mentally perform on marijuana

[19:03] <nothingmuch> i slow down

[19:03] <nothingmuch> to a point where I'm too lazy to formulate sentances

[19:04] <ingy> my idea for babeltest.org was to have a wiki where anyone can add tests to define a project. and then implementors can use the test specs against their project in their language of choice. and the community could always see what tests pass.

[19:04] <cognominal> Juerd: every month, psys find a new addiction to enlarge their line of business

[19:04] <ingy> which is what fit really should have been

[19:05] <ingy> but ward is concentrated on business not open source

[19:05] <nothingmuch> ingy: this reminds me of wheat

[19:05] <ingy> and then ward went to work for M$ and fell off the planet

[19:06] <ingy> wheat?

[19:06] <crysflame> ingy: whoah!

[19:06] <crysflame> ingy++ # community testing wiki

[19:06] <nothingmuch> and how do you do complex tests?

[19:06] <ingy> make them simpler ;)

[19:06] <nothingmuch> http://www.wheatfarm.org/

[19:06] <nothingmuch> ingy: simpler might mean rewriting

[19:07] <nothingmuch> i think a test with loops is better than a test that is completely imperative

[19:07] <nothingmuch> if the loops can save some writing

[19:07] <nothingmuch> i normally write tests with 0 control flow

[19:07] <nothingmuch> so that they are always the same

[19:10] <ingy> nothingmuch: what do you think of this style of test? http://www.rafb.net/paste/results/eO2TDJ84.html

[19:10] <ingy> Juerd: are you behind http://www.rafb.net/paste/ ?

[19:11] <nothingmuch> why is the second run where it is?

[19:11] <nothingmuch> i don't really understand

[19:11] <mauke> no, unless Juerd is really Jacob Cohen

[19:11] <ingy> the 2nd run?

[19:12] <nothingmuch> after __END__ there is the data

[19:12] <nothingmuch> oh

[19:12] <nothingmuch> it's just text

[19:12] <nothingmuch> silly me

[19:12] <ingy> just a piece of text

[19:12] <ingy> happen to be lying around ;)

[19:12] <nothingmuch> so how does $chunk->(decoded|encoded) know to compare?

[19:13] <nothingmuch> i like the fact that you don't "intelligently guess" the plan but leave it for the user

[19:13] <ingy> the 'encoded' chunks are given a base64 filter

[19:13] <nothingmuch> lets backtrack

[19:13] <ingy> ok

[19:13] <nothingmuch> the test is supposed to test a base64 decoder?

[19:14] <ingy> the test is testing that the base64 filter feature of Test::Chunks works properly

[19:14] <nothingmuch> or is base64 encoding an integral part of Test::Chunks

[19:14] <nothingmuch> ah

[19:14] <nothingmuch> pretty

[19:14] <ingy> you can specify any number of filters on a test chunk

[19:14] <ingy> normalize and trim are the defaults

[19:15] <castaway> Juerd is the tnx.nl one

[19:15] <ingy> er, norm and trim I think

[19:15] <nothingmuch> ingy: sounds very useful

[19:15] <ingy> you can turn it off with

[19:15] <nothingmuch> ingy++

[19:15] <ingy> --- foo -norm base64 whatever

[19:16] <ingy> you can concentrate on one test with the pseudochunk

[19:16] <ingy> --- ONLY

[19:16] <ingy> that's why I base my plan on chunks

[19:16] <nothingmuch> are 'decoded' and 'encoded' arbitrary names?

[19:16] <ingy> yes

[19:17] <ingy> and they become methods of the Test::Chunk object

[19:17] <nothingmuch> Algorithm::Dependency's test suite could use this mapping

[19:17] <nothingmuch> want to have a go at translating? ;-)

[19:17] <nothingmuch> it has a big matrix every once in a while

[19:17] <nothingmuch> and i'm too lazy to finish the suite for Algorithm::Dependency::Objects

[19:17] <nothingmuch> (http://nothingmuch.woobling.org/Algorithm-Dependency-Objects)

[19:19] <Juerd> ingy: No, I have nothing to do with rafb.net

[19:19] <ingy> oh ok. it looked somewhat like a pastebot you used I thought...

[19:20] <castaway> http://tnx.nl/scribble.plp ?

[19:20] <ingy> I found it by typing 'nopaste' in the firefox location area

[19:20] <castaway> bookmarks++

[19:20] <Juerd> ingy: I own the domain pastebot.org

[19:20] <Juerd> ingy: But didn't create pastebot

[19:20] <Juerd> And don't maintain the pastebot linked to that domain.

[19:20] <castaway> ah

[19:21] <Juerd> tnx.nl is also mine

[19:21] <Juerd> Which I still like a lot for its lack of length.

[19:21] <ingy> I love typing free text as urls in firefox. it will usually dwim

[19:21] <Juerd> Oh, I completely forgot I was going to add [AES]\d\d shortcuts.

[19:21] <Juerd> ingy: Google loves you.

[19:21] <Juerd> For Great Statistics

[19:22] <ingy> rafb's paster lacks a couple polishing features though

[19:22] <ingy> at least someone loves me

[19:22] <theorbtwo> (Crack for Statisticians!)

[19:26] <cognominal> for my slides I want colorized perl6. I am thinking of using vim for that to generate colorized html.

[19:27] <cognominal> do you know the correct invocation from a script? or a better way?

[19:29] <Juerd> My experience is that vim's highlighting sucks for Perl 6.

[19:31] <castaway> highlighting perl6 sounds like a nightmare ;)

[19:31] <cognominal> this is not for every day use, just for generating a few slides. I will not use exotic quoting...

[19:32] <Juerd> cognominal: It fails for more trivial stuff than that too.

[19:32] <Juerd> You'll see

[19:32] <cognominal> what I see so far is good enough

[19:32] <Juerd> http://tnx.nl/S03 now works, btw

[19:32] <castaway> cool

[19:32] <cognominal> I just want to automate the generation of slides

[19:33] <Juerd>  /bind meta-- insert_text http://tnx.nl/

[19:33] <Juerd> in irssi

[19:33] <PerlJam> castaway: hilighting perl6 will be *easy* if we have the perl6 rule engine and the grammar at our disposal.

[19:33] <Juerd> then it's alt+- S03

[19:33] <castaway> hmm?

[19:33] <castaway> where does that insert what to?

[19:34] <Juerd> castaway: It makes alt+- a shortcut for typing http://tnx.nl/

[19:34] <Juerd> http://tnx.nl/http://tnx.nl/http://tnx.nl/http://tnx.nl/http://tnx.nl/http://tnx.nl/ :)

[19:34] <castaway> ah, I see

[19:34] <Juerd> So if I want to point someone to perlop, I just type alt+- perlop, resulting in http://tnx.nl/perlop

[19:34] <castaway> nifty

[19:34] <Juerd> Or for suffering from buffering, http://tnx.nl/sfb

[19:34] <cognominal> I just want a quick fix, not a general solution...

[19:35] <Juerd> Or when someone has problems with understanding Perl 6 operators and rules, http://tnx.nl/S03,S05

[19:35] <Juerd> Etcetera :)

[19:35] <castaway> PerlJam: build those into elisp ;)

[19:35] <castaway> sorry cog, wrong $EDITOR

[19:35] <PerlJam> castaway: sure  ... as soon as I have a parrot backend to elisp.

[19:36] <cognominal> castaway, I would not mind an emacs solution

[19:36] * castaway grins at cognominal 

[19:36] <castaway> I dont have one handy tho, sorry

[19:37] <cognominal> btw. are the synopsis on dev.perl.org up to date? or should are I trust the Perl6::Bible instead?

[19:37] <ingy> the bible is up to date

[19:37] <PerlJam> cognominal: the synopses are the most up-to-date official docs by the cabal

[19:37] <ingy> 0.15

[19:38] <cognominal> PerlJam: yes, but are the synopsis online on dev.perl.org up to date?

[19:38] <obra> c1;dev.perl.org should be current as of last night.

[19:38] <obra> and that should always be true.

[19:38] <PerlJam> ingy: is the bible generated from the svn repo?

[19:39] <obra> dev.perl.org pulls nightly from the canonical svn repo

[19:39] <cognominal> so why the last modified so out of date?

[19:39] <ingy> PerlJam: yes

[19:39] <PerlJam> ingy: excellent.

[19:39] <cognominal>   Last Modified: 9 Dec 2004

[19:39] <cognominal>   Number: 5

[19:40] <cognominal> that convey the wrong message

[19:40] <obra> cognominal: when was syn5 last updated?

[19:41] <cognominal> obra: I don't know. my understanding was that it was recently updated

[19:42] <castaway> "21:38 < theorbtwo> echo foo | md5sum will sum the trailing newline that echo pugs there" :) (pugs on te brain..)

[19:45] <PerlJam> cognominal: it had some minor updates in Feb I think, but hasn't been changed since.

[19:45] <PerlJam> But the last major change was in Dec.

[19:46] <obra> svn log  http://svn.perl.org/perl6/doc/trunk/design/syn/S05.pod

[19:46] <obra> there have been what appear to be typo fix class updates in feb, yeah.

[19:46] <obra> actually

[19:47] <obra> given those dates, I think that's the date it was loaded from cvs

[19:48] <PerlJam> obra: still, there are no modifications since that date (that have been checked into svn)

[19:48] <obra> PerlJam: right

[19:49] <obra> cognominal: what changes did you think there were?

[19:50] <cognominal> I thougt you were just talking changes, so I was alarmed to see the changed date on dev.perl.org. so my questions?

[21:00] <nothingmuch> oh crap: Set::Object::_(self, ...)

[21:00] <nothingmuch> prepend: Usage: 

[21:01] <nothingmuch> from the likes of:  my $found ( @prospects ) {

[21:01] <nothingmuch>          if ( -f $found && -x _ ) {

[21:01] * nothingmuch pulls mugwump up by the ear

[21:02] <nothingmuch> what time is it there? around morning, no?

[21:10] <Qiang> 5pm here. weekend starts :)

[21:11] <stevan> uh oh,.. someone went to sleep and broke the build :)

[21:13] <theorbtwo> Odd, most people do it the other way around.

[21:14] <stevan> hmmm I wonder if src/Pugs/Types/Object|Pair.hs are on autrijus's machine

[21:15] <stevan> and he forgot to svn add them

[21:15] <stevan> I commented out the imports and so far it is compiling

[21:15] <theorbtwo> It'd hardly be the first time somebody made that mistake.

[21:15] <stevan> we shall see

[21:15] <stevan> :)

[21:15] <stevan> I do it all the time too :P

[21:15] <stevan> sleep deprivation has that effect 

[21:16] <theorbtwo> I don't have that excuse, though.

[21:16] <stevan> theorbtwo: do you want me to make that OS 9 image?

[21:16] <theorbtwo> Yes.

[21:16] <theorbtwo> Thanks.

[21:16] <stevan> BTW _ I realized that I already threw out the jaguar images

[21:17] <theorbtwo> Do you have rsync?

[21:17] <stevan> no idea

[21:17] <stevan> never used it

[21:18] <theorbtwo> Do "which rsync" from a command line?

[21:19] <stevan> got it

[21:20] <theorbtwo> OK, now I have to figure out how to do this.

[21:21] <stevan> ok

[21:29] <theorbtwo> Pick a username.

[21:29] <theorbtwo> stevan?

[21:29] <stevan> yup

[21:48] *** BigBear is now known as BigBear_hiding_o

[21:59] * castaway hugs Limbic_Region 

[22:01] <theorbtwo> stevan, can you put the jaguar 1 CD in your drive, then do "sync --progress -vz --rsh='ssh -p2222' /dev/cdrom desert-island.dynodns.net:/usr/src/mac/jaguar-1.iso" please?

[22:01] <theorbtwo> Er, s/sync/rsync/

[22:03] * Limbic_Region hugs castaway and apologizes for not reciprocating sooner

[22:03] <castaway> no worries

[22:05] <castaway> hows tricks over the pond?

[22:06] <Limbic_Region> pretty good

[22:06] <castaway> nifyt

[22:06] <Limbic_Region> just found out the original closing cost estimate was inflated

[22:06] <Limbic_Region> $5200 versus $700

[22:07] <nothingmuch> apropos prices, castorbway: did you guys find some proper flights?

[22:07] <castaway> proper?

[22:07] <castaway> no.. getting-from0a-to-b flights, yes (more or less)

[22:08] <QMario> How do I make Perl print out random numbers in a certain range?

[22:08] <castaway> perl6 ?

[22:08] <theorbtwo> (Low closing costs)++

[22:08] <nothingmuch> proper like not too expensive

[22:09] <Khisanth> castaway: perl5 but since he got banned from #perl I guess he is trying here :)

[22:09] * castaway grins

[22:09] <QMario> How do you know that, Khisanth?

[22:10] <castaway> print rand(6) -> random number from 1 to 6, I think

[22:10] <castaway> perldoc -f rand

[22:10] <QMario> Thank You.

[22:10] <nothingmuch> QMario: perl -ne 'BEGIN { $/ = \1 }; $_ = unpack("L", $_); print "$_\n" if $_ > $min and $_ < $max'

[22:10] <nothingmuch> perl -ne /dev/random

[22:10] <mauke> haha, nice

[22:10] <mauke> castaway: you're wrong, btw :-)

[22:10] <castaway> nothingmuch: in perl6 pls!

[22:10] <nothingmuch> err, $/ = sizeOf, ofcourse

[22:11] <Khisanth> QMario: because I was around when you decided to go preaching religion in the wrong place

[22:11] <nothingmuch> say rand(6);

[22:11] <theorbtwo> From 0 to 6, including 0 but not including 6.

[22:11] <castaway> (please dont bring it here, hatever it was)

[22:11] * castaway was close!

[22:14] * Limbic_Region wonders why BrowserUk made this statement http://www.perlmonks.org/?node_id=450588 ?

[22:14] <castaway> he needs a reason?

[22:14] <Khisanth> Limbic_Region: ask him/her!

[22:14] <Limbic_Region> Khisanth - I was wondering if there was something obvious that I was missing

[22:15] <Limbic_Region> that they were comparing apples and oranges or something

[22:15] <Limbic_Region> that autrijus cheated 

[22:15] <Limbic_Region> dunno

[22:16] <castaway> presumably he was thinking that haskell was inline in perl there? and not underneath

[22:16] * castaway shrugs

[22:16] <QMario> How do i print random numbers as integers(whole numbers).

[22:16] <QMario> ?

[22:16] <nothingmuch> how childish

[22:16] <nothingmuch> that's haskell

[22:16] <Limbic_Region> QMario - this is NOT #perl or #perlhelp

[22:16] * nothingmuch had much more respect for BrowserUK 5 minutes ago

[22:17] * Limbic_Region asked the question in a /msg

[22:17] <theorbtwo> QMario, it isn't perlmonks.org either.

[22:17] <castaway> QMario: first you get a perl book .. 

[22:17] <nothingmuch> QMario: my code would do that

[22:17] <nothingmuch> it reads data from /dev/random

[22:17] <QMario> Can you send it to me?

[22:17] <nothingmuch> and then unpacks it as a long

[22:17] <castaway> or you do perldoc -f int

[22:17] <nothingmuch> i pasted it here

[22:17] <nothingmuch> perl -ne 'BEGIN { $/ = \1 }; $_ = unpack("L", $_); print "$_\n" if $_ > $min and $_ < $max' /dev/random

[22:17] <mauke> QMario: do you know what perl6 is?

[22:18] <nothingmuch> just set $min and $max

[22:18] <QMario> I don't think pastebot works for me?

[22:18] <nothingmuch> it's not very efficient though

[22:18] <QMario> No.

[22:18] <QMario> That was for you ,mauke.

[22:18] <mauke> nothingmuch: hmm, don't you need $/ = \4?

[22:18] <Khisanth> Limbic_Region: well judging from that person's post, he doesn't seem very familiar with Haskell so ...

[22:18] <nothingmuch> mauke: yes

[22:18] <nothingmuch> sorry, i mentioned that, but didn't fix this paste around

[22:19] <nothingmuch> anyway, it will take (4 * (2**32))/abs($max-$min)/2 bytest on average

[22:19] <Limbic_Region> Khisanth - well, I am pretty oblivious myself to Haskell and only a margine more educated about Perl internals - so that's why I asked (I figured I was just being dumb)

[22:19] <nothingmuch> depending on how fast your /dev/random is, it might take about a minute

[22:19] <castaway> ;)

[22:19] <nothingmuch> to read the GB or so of entropy

[22:19] <castaway> QMario: type: perldoc -f int

[22:19] <QMario> Okay.

[22:20] <nothingmuch> however, if you read from /dev/urandom, it will be faster, but the numbers won't be as cool

[22:20] <castaway> and perldoc perlfunc, for all the other functions you may need somewhen 

[22:20] <QMario> Thank You.

[22:21] <QMario> What is perl6 for?

[22:21] <nothingmuch> like perl 5 was for system administrators

[22:21] <stevan> QMario: to replace perl5 :)

[22:21] <castaway> its the next version after perl5, eventually

[22:21] <nothingmuch> perl 6 is for farmers

[22:21] <nothingmuch> it's got all sorts of features to simplify the language

[22:21] <nothingmuch> like junctions, and chaining comparisons

[22:21] * castaway laughs

[22:22] <QMario> So you guys are just getting ready for it?

[22:22] <theorbtwo> No, we're creating it.

[22:22] <Juerd> Oh, we're ready

[22:22] <castaway> creating it, kind of

[22:22] <Juerd> I know I am

[22:22] <Juerd> Perl 6 will magically solve all problems in my life.

[22:22] <Limbic_Region> Juerd - that's not true

[22:23] <Limbic_Region> it still won't get you laid

[22:23] <QMario> Have you made any useful programs so far, Juerd?

[22:23] <Limbic_Region> :P

[22:23] <Juerd> Limbic_Region: Then what do you think the dwim operator does?

[22:23] <stevan> QMario: we have an implemenation of hangman

[22:23] <Juerd> QMario: No, never.

[22:24] <theorbtwo> It's all about the yaddayaddayadda operator.

[22:24] * castaway gggles

[22:24] <theorbtwo> Every program can be written as #!/usr/bin/perl6 -e '...'

[22:24] <Juerd> QMario: The only thing I made that's semi useful is a program that prints a line on a matrix printer every time a certain mailbox receives new mail, so the rattling of the pinwriter indicates new mail. It's somewhat more comforting than a dingdong sound or beep.

[22:24] <castaway> ah, thats "every program" reduced o its sigle bug, right?

[22:25] <theorbtwo> Exactly!

[22:25] <Limbic_Region> every program reduced to a single line containing at least 1 bug

[22:25] * Juerd reports numerous bugs for yadayadayada and dwim().

[22:26] * nothingmuch replies to BrowserUK

[22:26] <Juerd> A recent PM thread makes me wonder

[22:27] <Juerd> How old are you, on average?

[22:27] <Juerd> My average age is 10.

[22:27] * castaway is an average of 8.

[22:27] <nothingmuch> eh?

[22:27] <nothingmuch> what is 'old' in this context?

[22:27] <castaway> (oh, actual calculation?)

[22:27] <Juerd> nothingmuch: What's your average age? :)

[22:27] <castaway> mental age

[22:27] <nothingmuch> behavioral like?

[22:27] <Juerd> sum(@ages) / +@ages

[22:28] <Juerd> And then the int of that

[22:28] <Limbic_Region> Juerd - depends on if you say your average age at your first birthday is .5 or not (0 years old is valid or not)

[22:28] <theorbtwo> Nah, she's an average of around 18, but it's on a binormal distribution.

[22:28] <nothingmuch> Limbic_Region: in the first year of our lives i think we exist

[22:28] <Juerd> Limbic_Region: 0 years is an age, so it counts.

[22:28] <nothingmuch> is there some kind of reference table?

[22:28] <nothingmuch> i don't know what to say

[22:28] <Limbic_Region> nothingmuch - then it is real easy 

[22:29] * Limbic_Region likes his reply in that thread better anyway

[22:29] <nothingmuch> sometimes i feel like i'm 12

[22:29] <nothingmuch> when i'm being annoying because i'm bored

[22:29] <nothingmuch> and i only realized i'm annoying because i'm bored after a while

[22:29] <nothingmuch> at times i feel like i'm 6, if i'm really enjoying myself on something stupid

[22:29] <Juerd> use List::Util qw(sum); int(sum(0..$current_age)/$current_age+1)

[22:29] <Juerd> Perl 5 feels so primitive

[22:30] <nothingmuch> at work i feel 30, because everyone else is

[22:30] <nothingmuch> with friends i feel +=5 because they're pretty goofy

[22:30] <nothingmuch> ah

[22:30] <castaway> Juerd: you mean p6 would DWIM on the $current_age bit?

[22:30] <Juerd> Average age has nothing to do with feeling

[22:30] <Juerd> castaway: Haha

[22:31] <nothingmuch> 11

[22:31] <Juerd> castaway: No, get rid of List::Util and have all that built in

[22:31] <nothingmuch> i thought that's what you guys meant

[22:31] <castaway> ;)

[22:31] * castaway thinks the result is as meaningless as ones actual age

[22:32] <Limbic_Region> Juerd - no need

[22:32] <Juerd> castaway: Duh, it's based on that and only that :)

[22:32] <Limbic_Region> sum of all numbers is (n^2 + n) / 2

[22:32] <castaway> exactly.

[22:33] <Juerd> Limbic_Region: I'm writing it like this so that someone who skipped a certain age can more easily modify the code to match his circumstances.

[22:33] <Juerd> I always code with maintenance in mind.

[22:33] <Limbic_Region> or someone who is 29 multiple years in a row?

[22:33] <Limbic_Region> ;-)

[22:33] <theorbtwo> So when you write difficult-to-maintain code it's on purpose?

[22:33] <Juerd> Or other weird ages lists.

[22:34] <Juerd> theorbtwo: Yes.

[22:34] * nothingmuch goes to make tea, and then hack some spork

[22:34] <Juerd> I don't use complex mathematical solutions, like Limbic_Region does, just because they happen to match the current data ;)

[22:34] * castaway wonders how to skip an ag ;)

[22:34] <castaway> Jued++

[22:34] <castaway> oops +r

[22:35] <theorbtwo> .oO(Hey Jued...)

[22:36] <Juerd> castaway: I hope I find out before I'm almost 30, because that's one age I'd like to skip entirely.

[22:36] <Limbic_Region> 25 was the big one for me

[22:36] <Juerd> castaway: When I do find out, I'll let you know.

[22:36] <castaway> It wasnt all that bad, iirc ;)

[22:36] <Limbic_Region> quarter of a century

[22:36] <castaway> BTDT

[22:36] <Limbic_Region> 1/3 of your life

[22:36] <Juerd> btdt?

[22:36] <Juerd> Limbic_Region: optimist ;)

[22:36] * Limbic_Region doesn't think 30 will bother him at all

[22:36] <castaway> only going to survive to 75, Limbic?

[22:36] <theorbtwo> I'm going to be a quarter-century soon.

[22:36] <castaway> Been There, Done That

[22:37] * castaway is 31

[22:37] <Limbic_Region> castaway - more or less

[22:37] * theorbtwo is planning on living to 120.

[22:37] <castaway> but feel free to relate your impressions once you get there

[22:38] <Limbic_Region> well - I plan on trading this body in so 75 is a high end estimate

[22:39] <theorbtwo> As in reincarnation or as in brain transplant?

[22:39] * Limbic_Region forgets that theorbtwo is jewish

[22:39] <Limbic_Region> neither of those two

[22:39] <castaway> limbic, you forumla gets me 496 !?

[22:40] <castaway> what are the alternatives?

[22:40] <Limbic_Region> castaway - that's the sum - you still need to divide by the number of elements (current age) to get the average

[22:40] <castaway> oh, you didnae say that!

[22:40] <castaway> 16!

[22:40] <Limbic_Region> castaway - I didn't say the n^2 + n / 2 formula was how to get average age, I said it was how to get the sum

[22:41] * castaway cant read obviously ;)

[22:45] <Juerd> re

[22:45] <theorbtwo> L~R, still don't know what you mean by trade it in.

[22:46] <Juerd> 00:41 < Limbic_Region> castaway - that's the sum - you still need to divide by the number of elements (current age) to get the

[22:46] <Juerd>                        average

[22:46] <Juerd> No, not current age...

[22:46] <Juerd> Current age plus one

[22:46] <Juerd> By code was wrong because it had precedence wrong. Sorry.

[22:46] <Limbic_Region> Juerd - again, that depends on if you consider 0 a valid age

[22:46] <Juerd> (Wow - such a simple thing and we're both getting it wrong)

[22:47] <Juerd> Limbic_Region: Unless you skipped it, it should be counted.

[22:47] <Limbic_Region> in my code I caveat the 0 so I'm not wrong :P

[22:47] <Juerd> In that case you were 1 when you were born, I think.

[22:47] <Juerd> Limbic_Region: You were wrong by saying one still needs to devide by the current age.

[22:47] <Limbic_Region> no, it means your age doesn't begin until you reach 1

[22:47] <Juerd> No, I think 0 is a valid age.

[22:47] <Limbic_Region> and that's your right

[22:48] <Juerd> I know the first year of living has age 0 in some databases. Not NULL, but 0.

[22:48] <Limbic_Region> but for the purposes of my code it isn't - and I said so - so I am not wrong

[22:48] <Limbic_Region> you may disagree with me all day long

[22:48] <Juerd> That's another 23:10

[22:48] <Juerd> No thanks.

[22:49] <Limbic_Region> heh

[22:49] <Limbic_Region> all I mean is that given my stated assumptions the code is correct - the assumptions themselves may be invalid/incorrect, but they are in agreement with each other

[22:49] <castaway> *g*

[22:50] <Juerd> The code is correct, but your explanation involving the code was not.

[22:50] * theorbtwo shrugs.

[22:50] <theorbtwo> I think that 0 is a valid age.

[22:50] <nothingmuch> the code may be correct, but argument is redundant

[22:50] <Juerd> And I repeat that your code is only correct for objects that have never skipped an age or had a certain age twice.

[22:50] <Juerd> Although if you have the same age twice in a row, I don't know if it then counts as one.

[22:51] <theorbtwo> If you ask someone "how old is your (son|daughter)", then you will often get ages 0 > $n >= 1.

[22:51] <nothingmuch> . o O ( the same age twice in arrow? )

[22:51] <Juerd> It certainly counts as one if I have a certain age today and the same tomorrow, but I don't know how this goes if the age of an age is more than one.

[22:52] <theorbtwo> Counting each discrete year only once is a good estimate.

[22:52] <Juerd> So if your age is 10 for two years in a row, it counts twice?

[22:53] <Juerd> You know - normally, this is the area of biologists

[22:53] <Juerd> But we programmers are expected to know everything

[22:53] <Juerd> For otherwise we couldn't create programs except programming languages.

[22:53] <theorbtwo> And note that I am not the same age as I was yesterday -- I am one day older.

[22:54] <Juerd> Age, in this discussion, is strictly measured in years, rounded down.

[22:54] <theorbtwo> So my average age during the year from my 10th birthday to my 11th birthday is 10.5.

[22:54] <Juerd> I should have mentioned that.

[22:54] <castaway> depends how granular you want to go ;)

[22:54] <castaway> ah ok

[22:54] <Juerd> theorbtwo: Yes, but the average age in turn is int()ed, as you see in my example code.

[22:55] <Juerd> Hm, from age 9 to age 11, my average age was 10. It's 10 now too. I didn't age in 10 years!

[22:56] <theorbtwo> You're only 20?

[22:56] <Juerd> Even though I was neither 21 nor 20 at age 10.

[22:56] <sorje> weeeh, revision 2222 :-)

[22:56] <Juerd> Weird.

[22:56] <Juerd> theorbtwo: 21.

[22:56] <Juerd> sorje: Congrats :)

[22:57] <Juerd> Hi, broquaint 

[22:57] <Juerd> broquaint: What is your average age?

[22:57] <broquaint> Hey, Juerd.

[22:58] <broquaint> I don't have an average age as such.

[22:58] <Juerd> broquaint: perl -MList::Util=sum -le'my $current_age = shift; print int(sum(0..$current_age)/($current_age+1))'

[22:58] <Juerd> Oh. An interesting new possibility.

[22:58] <Juerd> broquaint: Are you skipping every single age, then?

[22:58] <nothingmuch> Juerd: how old are you, unaveraged?

[22:59] <Juerd> nothingmuch: Still 21, as I said and was 3 minutes ago.

[22:59] <Limbic_Region> Juerd - you count years how you want, I count them like the calendar  4, 3, 2, 1, -1  (there is no 0)

[22:59] <broquaint> I try, Juerd, I try.

[22:59] <nothingmuch> oops, sorry

[22:59] * nothingmuch is not really into chat

[22:59] <broquaint> Apparently that code isn't favoured by the windows command line.

[22:59] <nothingmuch> with all this fascinating discussion going on

[22:59] <Juerd> broquaint: Sorry - In geek channels I always assume sane shells.

[22:59] <castaway> bro!

[23:00] <theorbtwo> Hm, Limbic, interesting... you are -1 from birth until your first birthday?

[23:00] * theorbtwo thinks you are 0.

[23:00] <theorbtwo> If you ask a proud new parent how old their child is, they will often answer something like "8 months".

[23:00] <theorbtwo> Back-extrapolate.

[23:00] <broquaint> Hey, c :)

[23:00] * Limbic_Region wanders off

[23:00] <Juerd> Limbic_Region: Hm - I never really gave this much thought, but this does mean the proverbial "year 0" never existed, doesn't it?

[23:01] <theorbtwo> Between AD and BC?  Nope.

[23:01] * Juerd read AC and DC. Hm.

[23:01] <theorbtwo> If an event lasted from Jan 1, 1 BC to Dec 31, 2 AD, it lasted 3 years.

[23:02] <theorbtwo> (Approx.)

[23:02] <Juerd> theorbtwo: Why the inconsistency in that, by the way?

[23:02] <broquaint> Assumption is the mother of all fuck ups, according to the bad guy in Under Seige.

[23:02] <Juerd> Before christ, but anno domino...

[23:02] <Juerd> (assuming that is what AD stands for)

[23:03] <theorbtwo> Histerical Rasons.

[23:03] <broquaint> It would seem my average age is 11.

[23:03] <theorbtwo> In east-asia, it's common to consider someone 1 at birth.

[23:03] <Juerd> broquaint: You're only one year older than I am, on average :)

[23:03] <Juerd> theorbtwo: Then east-asians have a somewhat higher average age (or lower, based on equality of current ages)

[23:03] <theorbtwo> Somebody in my HS got their driver's license after having been out of the womb only 15 years because of that.

[23:04] <Juerd> theorbtwo: That at first read is funny for someone who lives in a country where driving age is 18 :)

[23:05] * theorbtwo grins.

[23:05] <theorbtwo> I'm American, and more specifically Pensylvanian.

[23:05] <theorbtwo> Also, I can't spell.

[23:06] <nothingmuch> where in Penn?

[23:06] <theorbtwo> Lancaster -- Manheim Township.

[23:07] * nothingmuch doesn't know it

[23:07] <nothingmuch> couldn't bother with geography when there was Sim City 2000 and the great outdoors

[23:07] <nothingmuch> oh well, i was young and wreckless

[23:07] <nothingmuch> reckless?

[23:07] * nothingmuch used to live in Pittsburgh

[23:08] <castaway> ooh

[23:08] <theorbtwo> Oh, I lived in Pittsburgh for a while as well.

[23:08] <castaway> so did he

[23:08] <theorbtwo> When were you there?

[23:09] * nothingmuch has very fond memories

[23:09] <nothingmuch> 93-94

[23:09] <theorbtwo> Oh, well before me.

[23:09] <nothingmuch> no, sorry

[23:09] <nothingmuch> 94-96

[23:09] * theorbtwo has some fond memories and some not so much.

[23:09] <nothingmuch> 93-94 was in Princeton

[23:10] <broquaint> Doing what?

[23:10] <theorbtwo> Going to Pitt.

[23:10] <nothingmuch> mum and dad were on subsequent sabbaticals

[23:10] <nothingmuch> i think those were approx. their post doc years

[23:10] <theorbtwo> Well, mostly being enrolled in Pitt and not going.

[23:11] <broquaint> Cool.

[23:11] * nothingmuch has never been on the Pitt campus, even though mom tought there

[23:11] <nothingmuch> CMU was very nice though

[23:11] <nothingmuch> the robot tracks were cute

[23:11] <nothingmuch> i always wanted to see one in action but never got the chance

[23:20] <Juerd> Wow, I received spam on a domain that hasn't existed for at least 2 years.

[23:20] <Juerd> Some dns cache they use.

[23:21] <Juerd> (And perhaps I should remove that domain from my server... :))

[23:22] <broquaint> What was the average age thing about?

[23:23] <Juerd> Inspired by perlmonks

[23:23] <Juerd> It was a very interesting conversation about the possibilities surrounding ages.

[23:23] <Juerd> We take too much for granted.

[23:24] <broquaint> Of course we do, we're civilised. FSVO civilised ...

[23:25] <Juerd>   civilised

[23:25] <Juerd>        adj 1: having a high state of culture and development both social

[23:25] <Juerd>               and technological; "terrorist acts that shocked the

[23:25] <Juerd>               civilized world" [syn: {civilized}] [ant: {noncivilized}]

[23:25] <Juerd> If social development is a requirement, I'm not civilised.

[23:25] <broquaint> Although it doesn't state what civilised need be applied to ..

[23:26] <Juerd>        2: marked by refinement in taste and manners; "cultivated

[23:26] <Juerd>           speech"; "cultured Bostonians"; "cultured tastes"; "a

[23:26] <Juerd>           genteel old lady"; "polite society" [syn: {civilized}, {cultivated},

[23:26] <Juerd>            {cultured}, {genteel}, {polite}]

[23:26] <Juerd> Even more vague.

[23:26] <nothingmuch> ingy: ping

[23:27] <broquaint> Ah the dictionary, is there anything it won't tiptoe around?

[23:28] <ingy> nothingmuch: pong

[23:29] <nothingmuch> i want to subclass Sprok::Slides

[23:29] <nothingmuch> ingy: want to SEE some spork hackings?

[23:29] <nothingmuch> i need a bit of hand holding

[23:29] <nothingmuch> and make Spork::S5 produce with class="inc"

[23:30] <ingy> SEE is fine

[23:30] <ingy> location?

[23:30] <nothingmuch> see://woobling.org

[23:30] <Limbic_Region> nothingmuch - BrowserUk replied

[23:32] <Juerd> Good night

[23:32] <Juerd> zz

[23:32] <castaway> morning juerd

[23:32] <nothingmuch> good reply

[23:33] <nothingmuch> ingy: one sec, it's pointing to the ether ip

[23:33] <ingy> nothingmuch: seem to be having troubles connectinf

[23:33] <nothingmuch> i'm on the wifi

[23:33] <nothingmuch> try again

[23:39] <revdiablo> Limbic_Region: heh, it seems like B-Uk's reply just changed the subject, rather than addressing the meat of the post

[23:39] <nothingmuch> revdiablo: but he doesn't bite

[23:39] <nothingmuch> he explains he prefers it

[23:39] <nothingmuch> instead of arguing pointlessly

[23:40] <revdiablo> nothingmuch: *nod* but he could have at least acknowledged that his earlier assertions were wrong

[23:40] <theorbtwo> What is the correct device name, BTW?

[23:40] <nothingmuch> true that

[23:40] <nothingmuch> theorbtwo: eh?

[23:40] <Limbic_Region> well - his mistake was associating Haskell with a pure FP language

[23:40] <theorbtwo> For the whole CD-ROM drive.

[23:40] <Limbic_Region> but I for one make mistakes like that all the time

[23:41] <theorbtwo> It is, but it redefined "pure".

[23:41] <theorbtwo> Well, at least it's mostly pure.

[23:42] <Limbic_Region> *shrug* - he should have just replied with s/Haskell/side-effect free language/g and been done with it

[23:43] <revdiablo> Limbic_Region: everyone makes mistakes, but some people don't ever seem to admit it. they just change the subject. :)

[23:45] <theorbtwo> I like his last post.

[23:46] <theorbtwo> 450609, that is.

