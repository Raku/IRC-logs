[00:01] <autrijus> theorbtwo: also if you are working on Cgen, misc/Blondie/ may be inspirational

[00:02] <autrijus> RTS = runtime system, which carries the ability to eval string

[00:02] <theorbtwo> That'd be... hard.

[00:02] <theorbtwo> I was thinking that'd be pretty well dead last -- is it needed for simple stuff?

[00:03] <theorbtwo> Right now, I'm at can't-start-yet stage, because I can't get PIL for Prelude.pm.

[00:05] <autrijus> hm.

[00:05] <theorbtwo> Yeah, I probably shouldn't consider this a blocker yet.

[00:05] <autrijus> try taking the FIRST away and desugar it?

[00:10] <theorbtwo> Odd; there's only one FIRST and I just changed it, but I still get the same error.

[00:11] <autrijus> did you rebuild pugs?

[00:11] <autrijus> I think it's taking its own compiler space FIRST

[00:11] <autrijus> since prelude is inlined

[00:11] <autrijus> now it really shouldn't do that.

[00:11] <theorbtwo> Oh.  I modified a copy of prelude.

[00:12] <theorbtwo> Hold on a sec, let me try another trick or two first.

[00:13] <theorbtwo> OK, renaming the file and changing the module declaraton at the top don't help, will try editing the main copy and recompiling.

[00:13] <theorbtwo> Oh -- I'm not using a quite-current SVN snap; should I change to the fallback repo?

[00:13] <svnbot6> r6477 | autrijus++ | * Squash an empty import warning for precompiled preludes.

[00:13] <autrijus> change to fallback please

[00:13] <autrijus> I may have a fix for you in a bit

[00:13] <autrijus> (shower, bbiab)

[00:14] <dduncan> actually, what I think I'll do first is ...

[00:14] <dduncan> an in-memory database that can be dumped to and reloaded from disk in the form of perl code

[00:15] <dduncan> it won't be very fast, but it should be suitable as a proof of concept

[00:15] <theorbtwo> Eh, dduncan?

[00:15] <dduncan> the perl code wouldn't be very complicated, just hashes of arrays of ...

[00:16] <dduncan> I'm just saying what I'll probably do prior to writing a MySQL client

[00:16] <theorbtwo> Oh!

[00:16] <theorbtwo> I forgot that you were writing a DBI.

[00:16] <dduncan> the easiest thing to do in my mind is just make a database in perl

[00:16] <dduncan> talking to other ones can come after this is known to be working

[00:17] <dduncan> Pugs' testing needs should be largely met either way

[00:18] <Juerd> Will it be a straight port, or are interface suggestions welcome?

[00:18] <Juerd> If the latter, please study DBIx::Simple

[00:19] <dduncan> suggestions are always welcome, though I have an idea what I want to do ... it will be influenced by existing things but not be a straight port of them

[00:20] <theorbtwo> Allo, scook0.

[00:20] <dduncan> the native interface will be a SQL AST, so I don't have to parse SQL internally, but a SQL parser can be wrapped around it for people that prefer that way of doing things

[00:20] <scook0> hi

[00:21] * dduncan away to the mailbox ...

[00:21] <theorbtwo> dduncan: I'm not sure if that'd mean more work or less.

[00:22] <theorbtwo> I suspect that means many backends are going to have to put the AST back down into actuall SQL.

[00:23] <autrijus> theorbtwo: I have a fix for you now. will commit in a bit

[00:24] <theorbtwo> How do you svn switch from the native repo to the perl.org one?  Plain switch wants to contact the original repo, --relocate complaigns about mismatching uuids...

[00:24] <autrijus> svn can't do that -- need svk

[00:25] <theorbtwo> Oh.

[00:25] * theorbtwo just rm -rfs the directory, and will reget from the right repo with svk.

[00:26] <dduncan> just to clarify, my very first perl 6 database related thing that works will be completely self-contained; it *is* the back-end ...

[00:26] <dduncan> for very simple relational databases, coding up an implementation is actually quite easy, easier than interfacing to other dbs

[00:27] <dduncan> mainly this is a proof of concept, to test that a front end works correctly, while limiting the number of points of possible failure, for testing

[00:28] <autrijus> theorbtwo: you can get svk with just syncingc the [h]ead

[00:28] * dduncan off to the mailbox

[00:30] * theorbtwo feels like a rank n00b.

[00:30] <svnbot6> r6478 | autrijus++ | * theorbtwo notes that FIRST {} blocks did not

[00:30] <svnbot6> r6478 | autrijus++ |   desugar into anything that passes PIL compilation,

[00:30] <svnbot6> r6478 | autrijus++ |   as it's useing a Stmt in LValue position.

[00:30] <svnbot6> r6478 | autrijus++ |   Fixed by desugaring using ternary if.

[00:30] <theorbtwo> HTTP Path Not Found: REPORT request failed on '/perl6/!svn/bc/1/pugs/trunk': '/perl6/!svn/bc/1/pugs/trunk' path not found

[00:30] <autrijus> this is with [h]?

[00:30] <theorbtwo> Yep.

[00:30] <autrijus> very weird.

[00:30] <autrijus> maybe try -3 or something

[00:31] <theorbtwo> First-time using, took defaults for everything.

[00:31] <autrijus> default is [a]

[00:32] <theorbtwo> Well, everything except that.

[00:32] <theorbtwo> Hitting up-enter from the shell prompt is now working, though.

[00:32] <autrijus> mm, can't reproduce it here :/

[00:32] <autrijus> ok...

[00:32] <autrijus> then svk pull from it

[00:33] <autrijus> to get the latest change

[00:33] <autrijus> that should fix prelude comp for you

[00:33] <theorbtwo> (Didn't ask me how much to get, though, and seems to be getting everything.)

[00:33] <autrijus> I'll go shower for real :)

[00:33] <theorbtwo> Have fun.

[00:40] <nothingmuch> autrijus: ping

[00:47] <autrijus> no	pong

[00:47] <autrijus> (about to sleep, so try to be brief :))

[00:56] <autrijus> ...timeout?

[00:56] <autrijus> oh well. good night lambdacamels, see you tomorrow :)

[00:56] * autrijus waves &

[00:57] <nothingmuch> not yet

[00:57] <theorbtwo> Goodnight, autrijus.

[00:58] <autrijus> nothingmuch: for pads chip is the guy you want to ask

[00:58] <nothingmuch> one short thing

[00:58] <nothingmuch> i skimmed the doc and wasn't sure

[00:58] <autrijus> I merely confirm the sanity, and the ability for codegen to gen it

[00:58] <nothingmuch> are they statically resolved? or dynamically at runtime by hashing?

[00:58] <nothingmuch> because if they could be made into an offset table, that would be performance happy

[00:58] <autrijus> you are asking impl, not spec, then

[00:59] <autrijus> the spec doesn't say really what :outer will be turned to by PIR

[00:59] <nothingmuch> just whether the spec seems to be vague enough to allow it

[00:59] <autrijus> yeah

[00:59] <nothingmuch> ah, ok

[00:59] <autrijus> impl is leo's domain.

[01:03] <autrijus> &

[02:00] * rafl_ wants to comment on S22 but is too lame to check out yet another repository.. :-/

[04:36] <rafl_> autrijus: Could Module::ScanDeps be extended to give me the required version if a script does 'use Foo::Bar 1.00;'?

[05:06] *** rafl_ changes topic to: '-Ofun: http://xrl.us/hxhk | pugscode.org | pugs.kwiki.org | paste: http://paste.lisp.org/new/perl6 or http://sial.org/pbot/perl6'

[05:50] <nothingmuch> obra: ping

[05:51] <nothingmuch> obra: what size delay should I expect from replies to rt.cpan.org? please answer with my nick so I can backlog

[05:54] <obra> hey

[05:55] <obra> nothingmuch: we greylist. so at least 5 minutes. but depends on your MTA

[05:55] <obra> nothingmuch: also, we go through perl.org for spamfiltering

[05:55] <nothingmuch> ah

[05:56] <nothingmuch> in that case i won't suspect failure yet

[05:56] <nothingmuch> thanks =)

[05:56] <nothingmuch> good night

[06:03] *** rafl_ is now known as rafl

[06:41] <dduncan> well, it appears that the usual server is up again

[08:19] <geoffb> *yawn*

[08:22] <gaal> say "Hello, world!"

[08:36] <xinming> ?eval multi sub infix:<+> ( $a, $b ) { "$a $b" }; "good"+"afternoon";

[08:36] <evalbot_7842> "good afternoon" 

[10:36] <christopher> Why can't I write [=] ($a, $b, $c) 3; to initialize a whole array?

[10:41] <svnbot6> r6479 | autrijus++ |  r7891@not (orig r7842):  rafl | 2005-11-05 07:02:24 +0100

[10:41] <svnbot6> r6479 | autrijus++ |   r19201@ata:  rafl | 2005-11-05 06:53:22 +0100

[10:41] <svnbot6> r6479 | autrijus++ |   * My ideas on S22.

[10:41] <svnbot6> r6479 | autrijus++ |   r19202@ata:  rafl | 2005-11-05 07:01:46 +0100

[10:41] <svnbot6> r6479 | autrijus++ |   * Some more S22 thoughts.

[10:47] <christopher> sorry, that should be [=] $a, $b, $c, 3;   same question.

[10:50] <autrijus> iblech: svnbot6 can point back to openfoundry

[10:50] <autrijus> christopher: because assignment is not (yet) an infix operator.

[10:50] <autrijus> hm, wait, but it is :)

[10:51] * autrijus looks

[10:52] <autrijus> looks like an easy fix... fixing

[10:52] <christopher> autrijus: so it's not wrong; just a bug?  or unimplemented?

[10:53] <autrijus> fixed

[10:53] <autrijus> will commit in a bit

[10:53] <autrijus> christopher: write a test for it?

[10:54] <autrijus> in t/operators/reduce-metaop.t

[10:54] <autrijus> christopher: do you have a committer bit?

[10:55] <christopher> cool, thanks.  No, I can't commit.

[10:55] <autrijus> okay, your email addr please

[10:56] <autrijus> (for sending the committer bit)

[10:57] <christopher> autrijus: malon at mit dot edu

[10:57] <autrijus> sent. welcome aboard :) the svn repo at svn.openfoundry.org/pugs is back -- please add yourself to AUTHORS and commit a metaop.t

[10:58] <christopher> Do you recommend [=] ($a, $b, $c)>>.foo 3 to initialize member variables at once?

[10:59] <autrijus> other than the slight problem of >>.method not yet implemented, sure, why not

[10:59] <autrijus> though the vanilla

[10:59] <autrijus> .foo = 3 for ($a, $b, $c)

[10:59] <autrijus> is maybe more readable

[11:00] <svnbot6> r7841 | stevan++ | Perl6::ObjectSpace : me--

[11:00] <svnbot6> r7842 | rafl++ |  r19201@ata:  rafl | 2005-11-05 06:53:22 +0100

[11:00] <svnbot6> r7842 | rafl++ |  * My ideas on S22.

[11:00] <svnbot6> r7842 | rafl++ |  r19202@ata:  rafl | 2005-11-05 07:01:46 +0100

[11:00] <svnbot6> r7842 | rafl++ |  * Some more S22 thoughts.

[11:00] <svnbot6> r7843 | autrijus++ | [Massive backport from svn.perl.org now openfoundry is back]

[11:01] <autrijus> :D

[11:01] <autrijus> (excess flood)++ # spared the channel of a total replay

[11:07] <svnbot6> r7845 | renormalist++ | Emacs Mode for Perl6:

[11:07] <svnbot6> r7845 | renormalist++ |   The formerly forked "cperl6-mode.el" is now reintegrated

[11:07] <svnbot6> r7845 | renormalist++ |   into cperl-mode.el based on its latest version 5.10.

[11:15] <rafl> Hello renormalist 

[11:23] <nothingmuch> obra: ping

[11:24] <rafl> autrijus: Was it intentional to remove my thoughts on S22 or did that happen by mistake?

[11:26] <autrijus> rafl: it happened by mistake

[11:26] <autrijus> I did a co --import from svn.perl.org

[11:26] <autrijus> so it overwrote the only openfoundry change meanwhile

[11:26] <autrijus> mea culpa, fixing

[11:27] <autrijus> done :) thanks for noticing

[11:27] <rafl> Thank you

[11:29] <svnbot6> r7846 | autrijus++ | * rafl's thoughts on S22, accidentally removed during merge from svn.perl.org.  Sorry.

[11:30] <renormalist> hi rafl

[11:30] <renormalist> I just have to go with my wife and child around the block. Will be back in 1h. :-)

[11:30] <rafl> renormalist: OK, see you.

[11:34] <svnbot6> r7847 | renormalist++ | - Forgot contact and usage. (cperl-mode)

[11:40] <svnbot6> r7848 | autrijus++ | * Parse for [=] per request from christopher.

[11:40] <svnbot6> r7848 | autrijus++ |   However, the lvalue context is not properly restored, so

[11:40] <svnbot6> r7848 | autrijus++ |   it does not currently work yet.

[11:44] <theorbtwo> So [=] $a, $b, $c, 5 would set $a..$c to 5?

[11:44] <christopher> why not just $a?

[11:44] <christopher> sorry, I was going on to the next question.

[11:44] <christopher> yes.  But if you did ([=] $a, $b, $c, 5) = 3; then $a alone would become 3.

[11:45] <autrijus> that is correct.

[11:45] <autrijus> though this borders on obfu :)

[11:45] <theorbtwo> The last one certianly does, at least.

[11:46] <autrijus> brb... *ponders more about PIL2 *

[11:52] <svnbot6> r7849 | iblech++ | Usual svn props.

[11:53] <gaal> ?eval sub foo(Int $p1) { } foo("this should be an error, not a coercion, right?")

[11:53] <evalbot_7848> Can't exec "./pugs": Permission denied at examples/network/evalbot//evalhelper.p5 line 46. 

[11:54] <gaal> ?eval sub foo(Int $p1) { } foo("this should be an error, not a coercion, right?")

[11:54] <evalbot_7849> undef 

[11:54] <gaal> ?eval sub foo(Int $p1) { say "got: $p1" } foo("this should be an error, not a coercion, right?")

[11:54] <evalbot_7849> got: this should be an error, not a coercion, right? bool::true 

[11:54] <gaal> That can't be right.

[11:56] <gaal> What *ought* to happen?

[11:58] <svnbot6> r7850 | malon++ | Tests for assignment as a reduction operator [=]

[12:00] <gaal> ?eval sub foo($p1) { say "alive" } foo(1, 2, 3)

[12:00] <evalbot_7850> Error: No compatible subroutine found: "&foo" 

[12:00] <gaal> good.

[12:01] <gaal> ?eval sub foo($p1) { say "alive" } foo(1) # sanity

[12:01] <evalbot_7850> alive bool::true 

[12:22] <theorbtwo> Woo, prelude PIL (p5), pretty-printed.  (Thank you, demerphq, for data-dump-streamer, which BTW gets deep recrusion warnings dumping that.)

[13:33] <autrijus> gaal: this is same as

[13:33] <autrijus> my Int $p := "Foo";

[13:33] <autrijus> I'm pretty sure that it triggers coerce:<as>

[13:34] <autrijus> and as such should be a warning and 0

[13:34] <autrijus> not "Foo"

[13:35] <autrijus> otoh until the "types" milestone, I don't really have a rigorous understanding of static vs runtime typing rules :)

[13:35] <autrijus> theorbtwo: nice to hear!

[14:10] <svnbot6> r7851 | autrijus++ | * Repair PIR codegen; use "new .Continuation" instead of

[14:10] <svnbot6> r7851 | autrijus++ |   the old style "newsub" op.  Suggested by Leo.

[14:12] <Juerd> One thing I've noticed is that once non-Perl6 things start taking time again, it's very hard to follow development, even superficially...

[14:13] <Juerd> I skip most of the p6l discussion, the irc chatter, the commit logs..

[14:13] <Juerd> Thank God (That's Autrijus) there's Autrijus's journal

[14:14] <autrijus> :D

[14:15] <autrijus> to be fair, luqui and obra and allison has all been blogging as well.

[14:15] <autrijus> # planet.pugscode.org

[14:15] <Juerd> I know, but:

[14:16] <Juerd> - I'm mostly interested in non-technical updates, as I don't understand things anyway, at the current level

[14:16] <autrijus> nodnod

[14:16] <Juerd> - Luke's journal is hard to grok because it's almost verbatim (I read it sometimes, but not much stays in my head)

[14:17] <Juerd> - IRC logs are nice for archival, not for reading :)

[14:17] <Juerd> This leaves your journal as my favourite way of staying more-or-less up-to-date

[14:20] <autrijus> :)

[14:20] <autrijus> there's the weekly summary, though

[14:20] * theorbtwo wonders if anybody has created a livjournal feed from that yet.

[14:21] <Juerd> autrijus: They're hardly summaries.

[14:21] <Juerd> TBH, one can learn almost as much by looking at Subject: lines

[14:21] <theorbtwo> Nope.

[14:21] <autrijus> I don't know... it helps me a lot :)

[14:22] <Juerd> They used to be very good. Now, they read more like indexes than summaries

[14:23] <theorbtwo> I'm off for a walk; later.

[14:24] <Juerd> Me too

[14:29] <autrijus> same, actually :)

[14:31] <rafl> renormalist: ping

[14:34] <svnbot6> r7852 | autrijus++ | * inline Continuation support is broken on switch and CGP cores

[14:34] <svnbot6> r7852 | autrijus++ |   in Parrot -- dies with "Illegal register number"; switch to

[14:34] <svnbot6> r7852 | autrijus++ |   computed goto core for -B Parrot.

[15:20] <r0nny_> yo

[15:33] *** wilx` is now known as wilx

[15:34] <Steve_p> Hey...where might the most up to date docs for say() be?

[15:35] <Steve_p> Perl6::Bible?

[15:36] <masak> Steve_p: well, &say is just &print with a newline thrown in

[15:36] <masak> i'm not sure if there's anything more to document :)

[15:37] <Steve_p> There's a bit more to how it works with objects, especially IO-based object IIRC

[15:39] <masak> Steve_p: I can't find it in S29

[15:39] <Steve_p> Hmmm

[15:40] <Steve_p> OK, I'll follow what's in Perl6::Say

[16:01] <r0nny_> ping? - is there a wiki for duscussion of special perl6 module collections ?

[16:02] <rafl> What are special perl6 module collections?

[16:02] <r0nny_> casue i got a nice idea for a data serialisation/deserialisation framework should be cappable of handling multiple languages

[16:02] <r0nny_> languages as in xml, yaml and so on

[16:04] <rafl> Isn't yaml already a language that's suitable to serialize almost anything?

[16:04] <r0nny_> yeah

[16:04] <r0nny_> but xml is widely used, too

[16:04] <r0nny_> also it should be cappable of replacin the .perl method

[16:04] <rafl> You can serialize xml with yaml.

[16:05] <r0nny_> where is the need of serializing xml with yaml, if the app needs xml ???

[16:06] <r0nny_> and in webstuff they use xml for async comunication

[16:06] <r0nny_> so a serializer cappable of xml isnt the worst idea

[16:07] <r0nny_> even if xml is bad vodoo, its common (unfortunately)

[16:07] <rafl> Where is the need of serializing something with xml when the app needs yaml?

[16:07] <r0nny_> there is ne need

[16:07] <r0nny_> so u dnet need to use this posibility

[16:08] <r0nny_> u just need to be cappable to do

[16:08] <r0nny_> bacasue the next gerneration of web will massively use xml

[16:09] <Khisanth> hmm is throwing gasoline on yourself and setting yourself on fire really a good idea just because it is popular to do so? :)

[16:09] <rafl> So what's special now? Simply write an XML serializer.

[16:09] <r0nny_> Khisanth: i know what u mean

[16:10] <Khisanth> yes, what makes it special?

[16:11] <r0nny_> pecial as in give the people forced to put themself on fire  fire-resistent clothes

[16:13] <rafl> Is that desirable?

[16:14] <r0nny_> u dont need to give it to people put themsolf on fire by their own will

[16:15] <Khisanth> but it doesn't make it special

[16:15] <r0nny_> well - if u do next-gern webapps, u have to deal with xml - so i'd like to see different ways of serializing data with the same api

[16:15] <r0nny_> hmm

[16:15] <rafl> I don't see why an XML serializer is good for that. But well.. simply write it and check it in. Lets see what it can do afterwards.

[16:15] <r0nny_> maybe special just was the wrong word

[16:16] <r0nny_> it should be one of the modules shiped directly with perl6

[16:18] <rafl> Write it and ask those guys who are responsible for the Perl 6 distribution.

[16:19] <r0nny_> ok

[16:19] <Khisanth> that sounds like a pretty far off discussion to take place

[16:19] <r0nny_> then im going to investigate how to use perl6 to get informations on its data structures

[17:26] *** dbrock`` is now known as dbrock

[18:07] <Juerd> Today I bought and read (skimmed) Perl Best Practices

[18:07] <Juerd> Most of the rules I already practice

[18:07] <Juerd> Some I find very silly or even a bad idea

[18:08] <Juerd> Some inspired me and will probably change how I code

[18:08] <Juerd> And there are some rules that I find contradictory

[18:08] <Juerd> But it's a good book, anyway

[18:12] <geoffb> Juerd, I think you just had the Standard PBP Response (tm).  :-)

[18:18] <Juerd> I'm a bit afraid that people who have read this book will never love Attribute::Property because it breaks at least 3 rules on the outside and at least a dozen on the inside

[18:19] <Juerd> But none of the arguments for the rules it breaks apply... (That is, the outside rules. The source could be much clearer, of course.)

[18:23] <geoffb> ?eval my ($q, $r) = (10 / 7, 10 % 7);

[18:23] <evalbot_7852> (\10/7, \3) 

[18:23] <geoffb> ?eval my ($q, $r) = (int(10 / 7), int(10 % 7));

[18:23] <evalbot_7852> (\1, \3) 

[18:23] <geoffb> ?eval my ($q, $r) = (int(10 / 7), int(10 % 7)); "$q $r"

[18:23] <evalbot_7852> "1 3" 

[18:24] <geoffb> ?eval my ($a, $b) = (10, 7); my ($q, $r) = (int($a / $b), int($a % $b)); "$q $r"

[18:24] <evalbot_7852> "1 3" 

[18:24] <geoffb> ?eval my ($a, $b) = (10, -7); my ($q, $r) = (int($a / $b), int($a % $b)); "$q $r"

[18:24] <evalbot_7852> "-1 -4" 

[18:24] <geoffb> ?eval my ($a, $b) = (-10, 7); my ($q, $r) = (int($a / $b), int($a % $b)); "$q $r"

[18:24] <evalbot_7852> "-1 4" 

[18:25] <geoffb> ?eval my ($a, $b) = (-10, -7); my ($q, $r) = (int($a / $b), int($a % $b)); "$q $r"

[18:25] <evalbot_7852> "1 -3" 

[18:26] <geoffb> good, at least that matches P5 . . . 

[19:27] <svnbot6> r7853 | autrijus++ | * Parrot 0.3.1 doesn't allow set_addr for Closure, so use

[19:27] <svnbot6> r7853 | autrijus++ |   newclosure instead.

[19:37] <r0nny_> how can i get the hash conains the list of member-name=>menber-value ? and the data-type ?

[19:38] <autrijus> elaborate?

[19:39] <r0nny_> it tells it doesnt know this one

[19:39] <autrijus> post some code example?

[19:40] <r0nny_> http://rafb.net/paste/results/FRdIwR73.html

[19:42] <r0nny_> whad did i wrong ?

[19:43] <r0nny_> anyone ?

[19:43] <autrijus> er

[19:44] <autrijus> I did not mean ".elaborate"

[19:44] <autrijus> you want to dump the attributes

[19:44] <autrijus> is that the idea?

[19:44] <r0nny_> yeah

[19:44] <autrijus> say $baz.perl;

[19:44] <autrijus> is one

[19:44] <autrijus> if you want it in hash notation

[19:44] <autrijus> say %$baz.perl

[19:44] <r0nny_> i want them in another way

[19:44] <autrijus> is another

[19:45] <autrijus> if you want to control it

[19:45] <autrijus> for %$baz.for %$baz.kv -> $k, $v { say "$k: $v" };

[19:45] <autrijus> err

[19:45] <autrijus> for %$baz.kv -> $k, $v { say "$k: $v" };

[19:45] <autrijus> something like that

[19:45] <r0nny_> i want to try writing a generic data serialisation framework can read/write perl data, yaml, yml, and so on

[19:45] <autrijus> try the "for" above

[19:45] <gaal> souldn't $baz.kv work too?

[19:46] <gaal> s/s/sh/

[19:46] <r0nny_> it wont do

[19:46] <r0nny_> ok - how can i get the data type ?

[19:47] <autrijus> gaal: no, that would be calling kv on the obj

[19:47] <autrijus> which doesn't have such method

[19:47] <autrijus> the % is a cast

[19:47] <autrijus> r0nny_: you can use .ref

[19:47] <r0nny_> direct method ?

[19:47] <gaal> oh it's an *object*

[19:47] <gaal> ok

[19:48] <autrijus> r0nny_: yeah, like $v.ref

[19:49] <r0nny_> hmm

[19:49] <r0nny_> now i need to find a way to deal with cyclic data

[19:52] <rafl> I guess you can use =:= for that.

[19:52] <r0nny_> =:= ?

[19:53] <rafl> See S03

[19:55] <r0nny_> nice

[19:58] <gaal> I found two amusing ROT-13 pairs today. One is amusing because it's English: "irk".rot13 => "vex"

[19:58] <gaal> the other is amusing because it's Perl: "gnat".rot13 => "tang" :-)

[19:59] <r0nny_> hmm

[20:00] <r0nny_> does anyone know a good way to find cyclic data structures ?

[20:01] <Khisanth> there are a module or two that does that

[20:01] <r0nny_> wich ones ?

[20:02] <r0nny_> (and are they perl6)

[20:02] <Khisanth> http://search.cpan.org/~lds/Devel-Cycle-1.04/lib/Devel/Cycle.pm

[20:04] <rafl> r0nny_: Simply remember all things you've seen so far and use =:= to check whether the underlying variable is the same. Then you can replace that with a reference to the first occurence. This doesn't discover cycles, but it breaks them up.

[20:05] <r0nny_> hmm

[20:06] <r0nny_> i think i will take a look at the perl5 modules, and port them

[20:09] <masak> i have leafed through A05 again, and (again) i realize that perl6 rules are way cool

[20:09] <masak> is there an implementation somewhere?

[20:09] <masak> (even a half-finished one)

[20:09] <r0nny_> afaik the recent pugs version is cappable of them

[20:10] <r0nny_> (if u use a recent parrot)

[20:10] <masak> r0nny_: ok, i'll give it a try

[20:11] <rafl> Look at t/rules

[20:23] <rafl> What is the 'but' keyword for?

[20:25] <autrijus> S12

[20:26] <autrijus> "does" is destructive mutator, "but" is the nondestructive (functional) one

[20:30] <svnbot6> r7854 | autrijus++ | * Accomodate Parrot trunk's PGE::Hs change (r9802)

[20:30] <svnbot6> r7854 | autrijus++ |   to capture the PGE_String form in Matches.

[20:31] <autrijus> PGE shift/reduce parser support is now in Pugs.

[20:31] <obra> ooh

[20:31] <Khisanth> but is it in Parrot yet? :P

[20:31] <autrijus> sure is, because that's where we got it from :)

[20:32] <autrijus> pugs> ('a*' ~~ /<p6rule>/)<p6rule><expr><type>

[20:32] <autrijus> "postfix:*"

[20:32] <autrijus> ('a*' ~~ /<p6rule>/)<p6rule><expr>[0]<value>

[20:32] <autrijus> "a"

[20:32] <autrijus> etc

[20:32] <autrijus> you can walk the tree in p6

[20:33] <autrijus> just as in PIR

[20:33] <Khisanth> oO

[20:34] <Khisanth> what is ('a*' ~~ /<p6rule>/)<p6rule><expr><type> suppose to mean?

[20:34] <autrijus> the match object returned by matching the string 'a*'

[20:34] <autrijus> against the builtin named rule <p6rule>

[20:34] <autrijus> is a match object that has a named "p6rule"

[20:35] <autrijus> which contains an expr submatch, of type "postfix:*"

[20:35] <autrijus> with one positional part, a literal "a"

[20:35] <autrijus> the <p6rule> matches a perl6 rule string :)

[20:39] <Khisanth> well I was mainly confused by the <p6rule><expr><type> part :)

[20:39] <Khisanth> now it just looks like it's accessing a hash?

[20:39] <autrijus> yeah

[20:40] <autrijus> that's exactly what it is

[20:40] <autrijus> ?eval 1 ~~ /1/

[20:40] <evalbot_7853> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[20:44] <frederico> ? say "test";

[20:45] <liz6> frederico: you mean:

[20:45] <liz6> ?eval say "test";

[20:45] <evalbot_7853> test bool::true 

[20:45] <liz6> ?

[20:45] <frederico> yes

[20:45] <frederico> liz6, I'm only want to see the bot working. thanks

[21:19] <svnbot6> r7855 | autrijus++ | * Much improved pretty printing for VMatch objects.

[21:19] <svnbot6> r7855 | autrijus++ |   This allows a convenient dump of a Match tree in the

[21:19] <svnbot6> r7855 | autrijus++ |   Pugs interactive shell.  Try this for some AST fun:

[21:19] <svnbot6> r7855 | autrijus++ |     pugs> 'ab*|c' ~~ /<p6rule>/

[21:19] <svnbot6> r7855 | autrijus++ |   pmichaud++ for doing all the shift/reduce parser work

[21:19] <svnbot6> r7855 | autrijus++ |   behind this feature. :)

[21:26] <autrijus> hmm, L~R broken Makefile.PL

[21:26] <autrijus> by introducing File::Spec ;)

[21:27] <autrijus> oh well, I guess I'll still keep those.

[21:31] <svnbot6> r7856 | autrijus++ | * Parrot embedding was broken by Limbic_Region's File::Spec

[21:31] <svnbot6> r7856 | autrijus++ |   change in Makefile.PL -- repaired the confusion between dot

[21:31] <svnbot6> r7856 | autrijus++ |   and commas, although File::Spec is still kept.

[21:31] <autrijus> okay, PGE and eval PIR on both embed parrot and external parrot passed

[21:32] <autrijus> just in time for Parrot's monthly release :)

[21:33] <svnbot6> r7857 | gaal++ | Article for The Perl Review (WIP).

[21:33] <svnbot6> r7857 | gaal++ | Your suggestions are welcome! My intended audience: Perl 5 programmers who

[21:33] <svnbot6> r7857 | gaal++ | haven't necessarily been following the Perl 6 process. The main focus is

[21:33] <svnbot6> r7857 | gaal++ | getting people interested with things that work now, without overwhelming

[21:33] <svnbot6> r7857 | gaal++ | theoretical discussion.

[21:34] <rafl> autrijus: Great. parrot packages for Debian are also ready so I can release the next pugs in Debian with perl5 and parrot embedding. :-)

[21:36] <autrijus> rafl: wonderful :)

[21:36] <autrijus> ooh, gaal article

[21:37] <liz6> where in the tree can I find that article?

[21:37] <eric256> ?eval 'ab*|c' ~~ /<p6rule>/ 

[21:37] <autrijus> apparently docs/articles/tpr.pod

[21:37] <autrijus> eric256: I don't think evalbot is running on a machine with rules support

[21:37] <autrijus> ?eval 'ab*|c' ~~ /<p6rule>/

[21:37] <evalbot_7857> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[21:38] <eric256> how do i get rules support on feather?  i manage the build there

[21:38] <liz6> hmmm.. I don't seem to have a docs/articles...

[21:38] <autrijus> liz6: svn up

[21:38] <autrijus> eric256: perlcabal.org/~autrijus/tmp/tmp.txt for output

[21:38] <autrijus> eric256: you need trunk parrot

[21:39] <rafl> eric256: Ah, good. How about migrating from 'make; make install' to the Debian packages of pugs and parrot?

[21:39] <autrijus> accessible somewhere in PATH

[21:39] <autrijus> that's all

[21:39] <autrijus> oh right, feather is debian, talk to rafl, never mind me :)

[21:39] <eric256> lol

[21:39] <autrijus> liz6: svk pull, even

[21:39] <eric256> rafl are the debian packages avail every 15mins?

[21:40] <autrijus> there's a debian/ file in pugs

[21:40] <autrijus> directory, even

[21:40] <rafl> eric256: No, but it's not a problem to migrate your compile scripts to compile and install Debian packages. Where can I find them?

[21:42] <gaal> hi

[21:43] <eric256> but if Debian packages aren't up to date then whats the point of converting the scripts?

[21:43] <eric256>  /home/eric256/auto

[21:44] <gaal> please tell me I'm not the only one who accidentally selects an entire web page in the browser because I hit ^AA to switch to a shell...

[21:44] <svnbot6> r7858 | autrijus++ | * wizards.p6 - optional params are now ($param?), not (?$param).

[21:45] <geoffb> eric256, I believe rafl is saying "build fresh debian packages during build cycle, and install them"

[21:45] <eric256> ahh. that would make more sense.

[21:45] <geoffb> eric256, :-)

[21:47] <svnbot6> r7859 | gaal++ | ?$optional -> $optional? in tpr.pod too

[21:47] <eric256> looks like i just needed to export the path to parrot.. so i tried that and we'll see how it works out next build ;)

[21:47] <autrijus> gaal: I never did that because firefox interprets "A" as a search for me

[21:48] <autrijus> (and sometimes I have the autoselect extension on)

[21:48] * eric256 gets impatient and forces a build. ;)

[21:49] <autrijus> mugwump: you okay if I rm docs/class/ ?

[21:49] <autrijus> it's a wonderful start, but by this time it's outdated

[21:49] <eric256> so how does  'ab*|c' ~~ /<p6rule>/ generate and object anyway?  and does that mean we can make rules that build objects somehow?

[21:49] <gaal> I should just map ^Aa to alt-tab or something. or better, raise the shell window. 

[21:50] <autrijus> eric256: yes and yes.

[21:50] <autrijus> it generates and object by running PGE in parrot land, which yields parrot objects, which are serialized, which are then imported to pugs land

[21:50] <gaal> autrijus: what's outdated?

[21:50] <autrijus> gaal: docs/class/

[21:50] <gaal> ah

[21:50] <autrijus> eric256: however we are currently only treating parrot objects as hash

[21:50] <autrijus> which is just as well -- we don't yet have obj meth call support in embed anyway

[21:51] <rafl> eric256: Yes, that's what I mean. Where are those scripts?

[21:51] <autrijus> fortunately, pmichaud's design has it so all attributes are straight data

[21:51] <autrijus> so it's not that hard to walk the generated hash

[21:52] <rafl> eric256: We don't need to use the packages if you don't like that, but fresh packages for Debian every 15mins are a good thing though.

[21:52] <autrijus> eric256: to write a rule that builds object, write a method that returns objects -- but this requires either a working parrot embedding with objcall support (like we did for p5)

[21:52] <autrijus> or a working parrot target backend (which depends on lexpad)

[21:52] <autrijus> or porting PGE to perl6

[21:52] <autrijus> (or to hs, that is)

[21:52] <eric256> ralf that would be fine i think. as long as they don't take too long to build.  its on feather at /home/eric256/auto  

[21:53] <autrijus> all are interesting directions, but I'll do them after OO/PIL2 :)

[21:53] <rafl> eric256: They take approximately as long as a normal build and install plus some seconds to put everything in packages and install them.

[21:53] <eric256> autrijus...sounds cool . like we'll be able to right a dataformat rule and just matching it will build the object or hash at least

[21:54] <autrijus> eric256: yes. although with rules alone you can only build object trees, not walk or transform them

[21:55] <eric256> still sounds cool. alot different than just straigh old regexp

[21:56] <autrijus> to do the walk/transform part, luqui ported the hs UUAG system to perl5 on CPAN as Language::AttributeGrammar -- he also started porting it to p6, and allison ported it to parrot

[21:56] <autrijus> to me, as an avid XML::Twig user, AG feels like Anything::Twig ;)

[21:56] <eric256> ?eval 'ab*|c' ~~ /<p6rule>/ 

[21:56] <evalbot_7859> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[21:56] <eric256> why is that error different than the interactive one?

[21:56] <autrijus> ?eval 1 ~~ 2

[21:56] <evalbot_7859> bool::false 

[21:57] <autrijus> ?eval 1 ~~ //

[21:57] <evalbot_7859> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[21:57] <autrijus> ?eval 1 ~~ m:p5//

[21:57] <evalbot_7859> pugs: *** cannot cast from VUndef to Handle (VHandle)     at Prelude.pm line 197, column 24-45        Prelude.pm line 221, column 13-25        Prelude.pm line 278, column 5-54        Prelude.pm line 61, column 30-59 

[21:57] <autrijus> ?eval 1 ~~ m:p5://

[21:57] <evalbot_7859> Error:  unexpected ":" expecting word character, block construct, term postfix, operator, ">>=:=<<", ">>eqv<<", ">>!=<<", ">>==<<", ">><=<<", ">>>=<<", ">>~~<<", ">>!~<<", ">>eq<<", ">>ne<<", ">>lt<<", ">>le<<", ">>gt<<", ">>ge<<", ">><<<", ">>><<", "\187=:=\171", "\187eqv\171", "\187!=\171", "\187==\171", "\187<=\171", "\187>=\171", "\187~~\171", "\187!~\171", "\187eq\171", "\187ne\171", "\187lt\171", "\187le\171", "\187gt\171", "\187ge\171", "\18

[21:57] <autrijus> sigh

[21:57] <autrijus> I think the rx_ macros putter made in Prelude.pm is somehow not working in evalbot

[21:57] <autrijus> it seems to be an evalbot thing not a pugs thing

[21:57] <eric256> how do i tell if it has parrot linked (or whatever you call it)

[21:58] <autrijus> you can use ldd

[21:58] <eric256> autrijus i get the same error on the command line in interactive mode

[21:58] <autrijus> but either way should work -- we don't really need embed parrot

[21:58] <eric256> ohh you just need it in the path while running..i  though i needed it in the path while building

[21:59] <eric256> parrot executable is in the path on feather

[22:00] <eric256> whooo... feather pugs is at 7755...100 commits behind?

[22:00] <eric256> ?eval $?PUGS_VERSION

[22:00] <evalbot_7859> \"Perl6 User\'s Golfing System, version 6.2.10, October 10, 2005 (r7859)" 

[22:00] <rafl> autrijus: Do we have an svk mirror parrot on feather?

[22:01] <autrijus> rafl: we do

[22:01] <autrijus> see http://perlcabal.org/~autrijus/

[22:01] <rafl> "Let me know if you'd also like mirrors for ponie, perl 6 design repo, and/or parrot."

[22:01] <autrijus> er sorry.

[22:02] <autrijus> p6 design repo is //mirror/p6

[22:02] <autrijus> I don't think we have parrot, no. maybe just use svn for that?

[22:03] <eric256> eval bot isn't running the general pugs build on feather../me goes to investigate

[22:03] <rafl> I think it would be useful to have a parrot mirror. Some users have parrot svn copies in their homes.

[22:04] <autrijus> okay.

[22:04] <eric256> hmm svk on it locked for somereason

[22:04] <autrijus> I'll set one up

[22:04] <rafl> autrijus: 4 as far as I see. I'd be the 5th.

[22:04] <autrijus> eric256: sync.pl updates every 60 secs

[22:04] <rafl> autrijus: Thanks.

[22:06] <eric256> autrijus: on the autobuild co svk said locked, i had to do svk cleanup, now it should work

[22:06] <autrijus> that's fine... I'm downloading parrot svk boot

[22:06] <autrijus> eta 2min -- brb

[22:10] * eric256 just realizes...does that mean i could pass a perl6 file to that rule and get something cool and usefull back?

[22:10] <Juerd> Poll:

[22:10] <Juerd> Given an email link and a contact form, which would you use?

[22:11] <liz6> s/and/or/ ?

[22:11] <eric256> contact form

[22:11] <Juerd> liz6: No, both are an option

[22:11] * eric256 hates email links because they always open outlook instead of gmail.. ;)

[22:12] <Juerd> eric256: ...

[22:12] <Juerd> eric256: Get Firefox and the extension that uses gmail for mailto: links

[22:12] <Juerd> Your vote is counted regardless, though :)

[22:12] <liz6> contact form

[22:13] <eric256> i especial hate when they are label "contact us" but its an email link

[22:13] <liz6> eric256: agree

[22:13] <Juerd> Okay, thanks for your votes. Any specific reasons?

[22:13] <Juerd> Why does a contact form feel better?

[22:13] <liz6> because it will guide you in your question

[22:13] <liz6> and feels more "professional" to me...

[22:15] <eric256> i just don't like having my browser open an external program without asking.. and like liz is suggesting when it does i just stare at it with no idea what exatcly to say (most the time).

[22:15] <Juerd> It's funny, though, that most people say they prefer contact forms (I don't), while in my own experimentation, I've received more feedback providing just an email address.

[22:15] <eric256> of course maybe thats a problem with my browser and not the link. dunno. ;)

[22:15] <rafl> eric256: Why aren't the pugs modules installed on feather?

[22:15] <eric256> pugs modules?

[22:16] <Juerd> rafl: Just the binaries are copied.

[22:16] <liz6> juerd: providing an email address is always good

[22:16] <eric256> providing an email adress.. and proving a mailto: linke are differnt, i don't mind the former

[22:17] <Juerd> liz6: Certainly. But the question here was which one you'd use, if both options were present.

[22:17] <gaal> Juerd: I always prefer an email, which I use with my mail client to send the message. This way I have a copy for future reference.

[22:17] <Juerd> So far, it's almost 50/50 across channels

[22:17] <rafl> eric256: FindBin.pm, etc.

[22:17] <rafl> Juerd: I know. I want to know the reason for that.

[22:17] <Juerd> So I think it's safe to say that anyone who has a professional website should have both.

[22:17] <autrijus> eric256: you can, once we transcribe Pugs.Parser into something PGE understands

[22:17] <Juerd> rafl: I didn't want to pollute the system without packages

[22:17] <eric256> Juerd: definitly

[22:18] <liz6> juerd: yep

[22:18] <autrijus> eric256: although, pmichaud says he'll have the basic expressions done in a couple weeks

[22:18] <autrijus> in which case you can do "'some p6' ~~ /<perl6>/'

[22:18] <eric256> oh so p6rule isn't complete yet?

[22:18] <autrijus> p6rule is complete

[22:18] <autrijus> but it only matches a "rule"

[22:18] <autrijus> not a "perl 6 program"

[22:18] <Juerd> rafl: The debian packages weren't there yet when I built this script. I'm sure that patches are welcome, but remember that it must be automated.

[22:18] <eric256> ohh.. /me thought p6rule = rule to parse p6

[22:18] <eric256> but that makes since

[22:18] <autrijus> yeah, it's a bit confusing :)

[22:19] <dduncan> so, unless there are any major commits pending in the next hour, I'll smoke the current Pugs now

[22:19] <Juerd> Perl 6 Rules!

[22:19] <Juerd> That alone sounds MUCH better than "Perl 6 Regexes!"

[22:19] <eric256> dduncan FYI... feather smokes every 6 hours

[22:19] <autrijus> "Perl 5 already Regexed the world.  Perl 6 will Rule the world"

[22:19] <dduncan> is it a darwin box

[22:20] <rafl> Juerd: OK.

[22:20] <eric256> nope ;)

[22:20] <dduncan> then this isn't completely redundant

[22:20] <dduncan> anyway, its possible that all the darwin smokes over the last couple weeks were me ... I've been doing it every 2 days or so, including last night

[22:20] <eric256> dduncan. definitly not. just wanted to make sure you knew. since it takes quite a while

[22:20] <Juerd> rafl: eric256 can get sudo access to dpkg if needed

[22:21] <dduncan> smoke takes about 50 mins on my machine

[22:21] <Juerd> I have no idea how sudo would work non-interactively, though

[22:21] <dduncan> now that it seems to be precompiling Test and/or using both cpus

[22:21] <dduncan> before that, it took about 100 mins

[22:21] <eric256> both cpus...show off

[22:21] <dduncan> more likely its just the prelude though ...

[22:22] <rafl> Juerd: It will. I don't use interactive questions using debconf or somethng like that. Even if I would it could be told to use the defaults and not to ask.

[22:22] <rafl> Juerd: I only need to wait for the parrot mirror..

[22:22] <dduncan> last I checked, despite setting number of CPUs to 2 in the config, top only showed a single Pugs running at once

[22:22] <dduncan> I will recheck that now

[22:23] <dduncan> right, it is smoking now ...

[22:23] <dduncan> and top shows two perl processes but only a single pugs process running

[22:24] <dduncan> is setting cpus to 2 in the config supposed to do 2 pugs processes?

[22:24] <svnbot6> r7860 | rafl++ |  r19238@ata:  rafl | 2005-11-05 23:21:11 +0100

[22:24] <svnbot6> r7860 | rafl++ |  * Debian: build-depend on libparrot-dev instead of libparrot$(SOVERSION)-dev to

[22:24] <svnbot6> r7860 | rafl++ |    have less work on new parrot releases.

[22:26] <dduncan> smoke killed and will restart ... not due to that commit though

[22:26] <dduncan> but it will be included

[22:29] <dduncan> I meant, when smoke_concurrent=2, are there supposed to be 2 pugs processes?

[22:29] <dduncan> smoke begun again ...

[22:31] <rafl> Juerd: Hm. How can we install packages using sudo non-interactively?

[22:31] <Juerd> rafl: That's for whoever wants to do it, to find out

[22:31] <r0nny_> rafl: sudo can be set up, not to ask for a password

[22:32] <Juerd> r0nny_: That won't happen, though.

[22:32] <rafl> Indeed.

[22:32] <Juerd> rafl: An alternative is to use a suid binary, catered to a specific need, limited to a specific group.

[22:32] <rafl> Juerd: How about allowing eric or me to use only 'dpkg -i' without a pw?

[22:33] <Juerd> rafl: I wouldn't know how. If you do, make it happen :)

[22:39] <rafl> User_Alias AUTOBUILDERS = eric256, rafl \n Cmnd_Alias DEBINSTALL = dpkg -i \n AUTOBUILDERS ALL = DEBINSTALL should work

[22:39] <eric256> if regexs..i mean rules.. build these objects isn't that going to severly slow down the process?

[22:39] <rafl> Juerd: Not sure if Cmnd_Aliases can have whitespaces

[22:40] <rafl> Juerd: Oh, a NOPASSWD: DEBINSTALL at the end is missing.

[22:40] <rafl> Juerd: Look at /usr/share/doc/sudo/examples/sudoers

[22:48] <svnbot6> r7861 | autrijus++ | * Work around PGE's bug in not grokking zero-width rules

[22:48] <svnbot6> r7861 | autrijus++ |   (reporte to p6[ic]), by special casing that // matches

[22:48] <svnbot6> r7861 | autrijus++ |   always at position 0 with length 0.  It's useful anyway

[22:48] <svnbot6> r7861 | autrijus++ |   because split(//, $string) can be fast without launching

[22:48] <svnbot6> r7861 | autrijus++ |   Parrot.

[22:48] <svnbot6> r7861 | autrijus++ | * Also, fix m:g// and m:P5:g// support so they won't loop

[22:48] <svnbot6> r7861 | autrijus++ |   on zero-width matches.  (Previously s:g// and s:P5:g//

[22:48] <svnbot6> r7861 | autrijus++ |   was fixed in the same fashion.)

[22:50] <autrijus> (monthly release)++ # forces me to fix parrot interop bugs every month

[22:54] <Juerd> rafl: No, sorry, I'm not really into looking at things right now. If you have root access and can make things happen, please do so. I'll learn what you did when you've done it

[22:54] <rafl> Juerd: OK.

[22:57] <autrijus> rafl: svk ls /parrot/mirror/trunk

[22:57] <autrijus> of course, you need to cp or ln-s ~autrijus/config to your ~/.svk/

[23:02] <rafl> autrijus: Thank you.

[23:04] * rafl installed parrot Debian packages and removes /usr/local/bin/parrot if there are no objections.

[23:07] <rafl> autrijus: /parrot/mirror/truk

[23:08] <rafl> autrijus: Err. path /parrot/mirror/trunk does not exist.

[23:08] <rafl> D'OH. Typo.

[23:08] <autrijus> ...

[23:08] <autrijus> :)

[23:24] <rafl> pugs depend on drift now, doesn't it?

[23:26] <autrijus> no it does not.

[23:26] <rafl> autrijus: This happens on svk pull when using your svk mirror, btw for parrot or pugs: Permission denied: Can't open '/home/autrijus/.svk/parrot/db/revprops/9765.tmp': Permission denied

[23:26] <autrijus> rafl: fixing

[23:26] <Juerd> autrijus: What do you use tcpxd for?

[23:26] <autrijus> Juerd: SubEthaEdit

[23:27] <Juerd> ok

[23:27] <autrijus> Juerd: see://perlcabal.org/ works iff that happens

[23:27] <autrijus> so I leave it running

[23:27] <Juerd> I can't run mac osx inside linux for some reason

[23:27] <Juerd> And my new Linux installation is so shiny and stable that I don't want to reset the uptime :)

[23:29] <autrijus> we can do gobby instead :)

[23:29] <autrijus> which only requires one single port

[23:29] <autrijus> much easier to forward

[23:29] <Juerd> Oh, I don't mind about the tcpxds

[23:29] <Juerd> Just wondered

[23:29] <Juerd> What is gobby?

[23:30] <autrijus> subethaedit for gtk that works.

[23:30] <autrijus> gobby.0x539.de

[23:30] <autrijus> ?eval 0x539

[23:30] <evalbot_7861> 1337 

[23:30] <autrijus> ;)

[23:30] <Juerd> Is it not compatible with see?

[23:30] <autrijus> no, because see shuffles serialized objc objects

[23:31] <autrijus> or was it cocoa objects.

[23:31] <Juerd> Ah

[23:31] <Juerd> Are there reasons to stick to see?

[23:31] <Juerd> It's a bit platform limited :)

[23:32] <autrijus> well, for one, see has cursor highlighting in scrollbar and edit area

[23:32] <rafl> autrijus: I get this error when running /usr/bin/perl -Iinc util/drift.pl src/Pugs/PIL2.hs-drift > src/Pugs/PIL2.hs:

[23:32] <autrijus> for another, gobby/osx is very hard to build

[23:32] <rafl> runhugs: Error occurred

[23:32] <rafl> ERROR - Unable to open file "/home/rafl/autobuild/pugs/util/../../DrIFT/src/DrIFT.hs"

[23:32] <autrijus> rafl: svk up

[23:32] <autrijus> r7862 should cure that

[23:32] <Juerd> autrijus: Ok

[23:32] <autrijus> also, permission problem should be fixed now

[23:35] <rafl> autrijus: Works, thanks.

[23:35] <svnbot6> r7862 | autrijus++ | * regen PIL1/PIL2 using latest DriFT.

[23:37] <autrijus> cool

[23:38] * autrijus discovers properly idented AST tree is a good way to inflate journal's length

[23:38] <autrijus> (just posted today's)

[23:40] * autrijus praises caffeine-free sugar-free coke

[23:40] <autrijus> I wish they have that in taiwan :)

[23:41] <svnbot6> r7863 | autrijus++ | * VICTUALS: note that caffeine-free diet coke is preferred

[23:41] <svnbot6> r7863 | autrijus++ |   over caffeineful ones for me.

[23:43] <geoffb> . . . known as 'CFDC' amongst those overwhelmed by so many coke variants (I can currently think of nearly a dozen variants . . . and I may be missing some)

[23:51] <rafl> feather is soo slow currently.. :-(

[23:52] <rafl> autrijus' darcs and eric's ghc are stealing both cpu power and memory from me.. :-)

[23:52] <svnbot6> r7864 | autrijus++ | * When generating precompiled prelude, strip away comments

[23:52] <svnbot6> r7864 | autrijus++ |   and doc sections while preserving number to speed up parsing.

[23:53] <autrijus> rafl: renice :)

[23:54] <rafl> I thought about apt-get install slay :-)

[23:54] <autrijus> oh wow, very useful bofh tool

[23:54] <rafl> Indeed. One of my favourites..

[23:55] <geoffb> autrijus, in r7864 comment, did you mean "while preserving *line* number"?

[23:55] * autrijus steps away, very slowly, from rafl

[23:55] <geoffb> heh

[23:55] <autrijus> geoffb: yes, oops

[23:55] <geoffb> ok, cool.

[23:57] <autrijus> brb, shower

