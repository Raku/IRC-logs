[00:21] * nothingmuch makes noises

[00:21] * buu shoots nothingmuch 

[01:58] <Alejandro> seen autrijus

[01:58] <jabbot> Alejandro: autrijus was seen 5 hours 51 minutes 55 seconds ago

[02:00] <Alejandro> connect elixus.org

[05:13] <planetcall> hello

[05:14] <planetcall> when perl6 is out there then why perl5 is continuing ?

[05:18] <Khisanth> because migration doesn't happen overnight

[05:18] <hexmode> perl6 is out?

[05:18] <Khisanth> do YOU think you can learn perl6 overnight?

[05:18] <Khisanth> hexmode: note the "when" :)

[05:18] <hexmode> ah

[05:19] <hexmode> got excited for a bit

[05:19] <hexmode> I'll go back to throwing coffee cups

[05:31] <planetcall> which one would you suggest for a "new to perl" programmer to begin with

[05:32] <Khisanth> ...

[05:32] <Khisanth> perl6 doesn't quite exists yet

[05:32] <wolverian> planetcall, the one that actually has a complete implementation.

[05:33] <wolverian> (that is, perl5. :)

[05:33] <wolverian> if it feels like too old for you, learn ruby and then move to perl6 when it comes out.

[05:33] <wolverian> (a lot of ruby experience can be directly applied to perl6, which is a bonus.)

[05:34] <Khisanth> ruby isn't all that young either :)

[05:34] <planetcall> does ruby has a wide support as perl ? I dont have had much acquaintance with ruby

[05:34] <Khisanth> but then you could learn Lisp and apply a lot to perl6 too :)

[05:36] <planetcall> it has been very recent I have migrated to the open community driven languages.......I really like perl though never got time to delve into deep

[05:36] <Khisanth> Perl seems like mostly a love it or hate it language :)

[05:36] <planetcall> why hate it?

[05:37] <Khisanth> beats me

[05:39] <planetcall> surprisingly many languages are moving towards their own virtual machines.....

[05:39] <planetcall> even perl

[05:39] <wolverian> planetcall, no, ruby isn't quite as well supported. especially things like mod_ruby are either woefully underdocumented or just plain unstable/hard to install.

[05:39] <wolverian> perl is a _lot_ more mature in that respect.

[05:41] <planetcall> was java first to have its own virtual machine and IL code ?

[05:42] <planetcall> The vision for Perl 6 is more than simply a rewrite of Perl 5. By separating the parsing from the compilation and the runtime, we're opening the doors for multiple languages to cooperate. You'll be able to write your program in Perl 6, Perl 5, TCL, Python, or any other language that there's a parser written for. Interchangable runtime engines let you interpret your bytecode or convert it to something else (e.g., Java, C, or even back to Perl). 

[05:43] <wolverian> I'm pretty sure there are virtual machines from 1960 :)

[05:43] <wolverian> and in the end, everything new is old news to LISP.

[05:47] <wolverian> good morning :)

[05:49] <autrijus> hi :)

[05:49] <autrijus> mm old news to LISP.

[05:49] <autrijus> "Computer Science is merely the post-Turing decline in formal systems theory."

[05:53] <wolverian> we need to tear down the establishment and create a more humane science

[05:54] <wolverian> (I'm typing randomly. never mind.)

[06:03] <autrijus> :)

[06:27] <gantrixx> anyone here?

[06:27] <gantrixx> is there anyone here working on Perl6 development?

[06:27] <wolverian> yes. I'm not sure if anyone is awake, though. :)

[06:28] <gantrixx> When do you think Perl6 will be ready for general use?

[06:28] <gantrixx> when do you think Perl6 will have good support from the Perl community?

[06:29] <wolverian> I don't know.

[06:29] <buu> Christmas.

[06:29] <wolverian> right. :)

[06:29] <gantrixx> That wouldn't be to bad

[06:29] <gantrixx> here is the problem

[06:29] <wolverian> gantrixx, there are too many components that have to be finished, each of them having their own developers and schedules and such

[06:30] <wolverian> it is not possible to really say when perl6 will be out.

[06:30] <gantrixx> What I worry is that Perl is loosing market share to Python

[06:30] <gantrixx> I'm involved with a situation like this at work right now

[06:30] <wolverian> "losing". why does that worry you? python is a fine language.

[06:30] <autrijus> yo.

[06:31] <gantrixx> There is a lot of automation they are planning to write and they are in the process of choosing if it will be done in Perl or Python

[06:31] <gantrixx> It worries me because there doesn't need to be Perl, Python, Ruby

[06:31] <gantrixx> there only needs to be one

[06:31] <wolverian> what kind of automation are we alking about?

[06:31] <wolverian> s,alk,talk,

[06:31] <gantrixx> corporations like to have standardized technologies

[06:32] <autrijus> gantrixx: it's nice that they had not standardized on Cobol already

[06:32] <autrijus> er I mean Java.

[06:32] <gantrixx> It's for a communication system using satellites and stuff

[06:33] <gantrixx> Well, you see they have been burned in the past by writting things in Ada.  Now they have to pay big bucks to the last 2 Ada programmers on the planet to maintain the systems.

[06:33] <wolverian> the world is rarely perfect. just be glad it's not java, as autrijus said.

[06:33] <gantrixx> I think it is a great step forward that they realize the value of open-source and open-standards

[06:33] <gantrixx> but now they want a standard "scripting" language

[06:33] <gantrixx> not a free for all

[06:34] <gantrixx> and they want to bet on a winning horse

[06:34] <wolverian> python and perl are both fine languages. don't worry. be adaptive. there is no silver bullet.

[06:34] <gantrixx> In some of these meetings they talk about Perl falling by the way side

[06:34] <autrijus> gantrixx: fact is... all are winning horses.

[06:34] <autrijus> gantrixx: once thing that's sort of a central tenet of perl6 is that you can write

[06:35] <autrijus> use perl5:DBI;

[06:35] <autrijus> use jsan:DOM;

[06:35] <gantrixx> Can you imagine practicing law if all the laws in the country changed every 5 years

[06:35] <autrijus> use python:Zope;

[06:35] <arubin> gantrixx: uh

[06:35] <arubin> they pretty much do

[06:35] <arubin> especially things like tax law

[06:35] <autrijus> gantrixx: not all the laws, but new laws, sure :)

[06:35] <arubin> at least as much as perl 5 to 6

[06:36] <gantrixx> Yes but then every lawyer has to know the old and the new laws

[06:36] <gantrixx> This is unrealistic

[06:36] <autrijus> ...which is the case right now :)

[06:36] <autrijus> at least the code is open for lawyers ;)

[06:36] <gantrixx> It is unrealistic to expect a programmer to be an expert in C/C++, Java, C#, Perl, Python, Ruby, and PHP

[06:36] <gantrixx> to be good you have to focus on a smaller set of skills

[06:37] <arubin> yes, skip C# and PHP

[06:37] <autrijus> that's right, so what's why cross-language interop is important and healthy

[06:37] <gantrixx> And if you spend a year working on a C/C++ project, your Java skills fall and you aren't familiare with the latest Java stuff

[06:38] <autrijus> ...and why we are compiling perl6 to native code, javascript, parrot and perl5. :)

[06:38] <gantrixx> why is it that we waste so much redesigning the tools to do our job only to not be proficient at using them

[06:38] <gantrixx> look, I didn't come here to argue

[06:39] <gantrixx> but if you are a Perl6 developer, you might find it interesting to know what your customers are thinking

[06:39] <arubin> and what would that be?

[06:39] <arubin> kill off other languages?

[06:39] <autrijus> long-term survival, is what I heard

[06:39] <gantrixx> If you are improving Perl simply to make yourself happy then that is fine, but if you truly believe that Perl6 is superior language then you should want to see it adopted and used

[06:40] <arubin> autrijus: sounds better than the existing plan of mass suicide in 3 years

[06:40] <gantrixx> If Perl6, Python, and Ruby are pretty much all just as good as one another, why do we need all three

[06:40] <autrijus> arubin: I certainly hope so

[06:40] <gantrixx> should everyone just use one, then focus on making better software?

[06:41] <arubin> gantrixx: you do realize that the Perl people have no control over other languages?

[06:41] <Khisanth> don't know about Ruby but Perl6 and Python definitely doesn't seem equal

[06:41] <autrijus> gantrixx: on the other hand, if all libraries from those languages can call each other

[06:41] <autrijus> gantrixx: so each person can write in a language that fits her brain best

[06:41] <gantrixx> I don't program in Python, but it looks like I maybe soon

[06:41] <autrijus> gantrixx: then I'd prefer that :)

[06:41] <gantrixx> I think you are missing the point.  Companies don't want a system that is composed of 10 different syntaxes

[06:42] <wolverian> gantrixx, again, there is no single best language. the best we can do is work on interoperability.

[06:42] <Khisanth> besides Perl has always been philosophically different from Python:)

[06:42] <gantrixx> they want to pick a couple

[06:42] <autrijus> gantrixx: that's true, but there are more than one company out there :)

[06:42] <autrijus> I mean, Amazon standardizes on Perl, Yahoo on PHP, Google on Python.

[06:42] <Khisanth> companies just want to use languages with the most hype, if the wrong person at the company happens to be making that decision :)

[06:43] <autrijus> (for their scripting needs, respectively)

[06:43] <autrijus> I don't think that's a bad thing for them to do that.

[06:43] <gantrixx> again, I think you are failing to see it from the customers point of view.  People don't always get to program in the language they want to program in because they like it.  They are told what language the system will be built in and that decision is made often by non programmers for different reasons

[06:43] <gantrixx> reasons like, long term maintainability of the system

[06:43] <arubin> gantrixx: I think you are completely missing the point

[06:43] <wolverian> autrijus, and Yahoo provides API examples for all of those languages, I think.

[06:43] <gantrixx> support for the technology it is built in

[06:43] <arubin> no one can make anyone else stop developing different languages

[06:43] <autrijus> right, so the main takeaway is long-term survival.

[06:44] <autrijus> in term of support base and install base.

[06:44] <autrijus> I assure you that the p6 design is centered on that value. :) it's said at the first synopsis/apocalypse.

[06:44] <gantrixx> so when the suits start creating more jobs for Python programmers, that is when Perl becomes simply a hobbyist language

[06:44] <arubin> your logic is a little flawed

[06:44] <gantrixx> And I'm not the one missing the point, the people making the decisions are

[06:45] <gantrixx> this is a project that will probably employ 300 developers

[06:45] <gantrixx> for the next 10 years

[06:45] <Khisanth> and how exactly is a non programmer well suited to be deciding what is and isn't good for long term maintainability?

[06:45] <gantrixx> most will be C/C++ programmers

[06:45] <arubin> Ruby, PHP, Python and Perl are all used for professional development now

[06:46] <gantrixx> but a portion will be Perl or Python programmers also

[06:46] <gantrixx> so to work 8 hrs a day for the next 10 years on Python, means much less use for Perl

[06:46] <arubin> at your company

[06:46] <gantrixx> now I realize this is just one company, but what if other large corporations think the same way

[06:46] <arubin> this doesn't signal the end of Perl

[06:47] <arubin> guess what, Python is widely used for large projects now

[06:47] <autrijus> gantrixx: *nod*. so, what will help most to influence your managers in favour of perl?

[06:47] <arubin> see Google and ILM

[06:47] <Khisanth> ugh "what if" can lead all over the place

[06:47] <arubin> autrijus: I think he wants a psychic

[06:47] <gantrixx> Khisanth: in corporate america many decisions are made by people far removed from the technical task itself.  you can argue for utopia, but this is the way it is

[06:48] <Khisanth> hardly utopia

[06:48] <gantrixx> autrijus: when will Perl6 be available, when will it have good community support, when will Perl5 loose community support

[06:48] <Khisanth> having qualified people do their job is asking for too much? :)

[06:48] <autrijus> gantrixx: ok. perl5 won't lose commmunity support in at least another decade.

[06:49] <autrijus> perl4 enjoyed support for that long, and perl5's base is even larger.

[06:49] <gantrixx> autrijus: OK, my job is now to convince the decision makers of that

[06:49] <wolverian> gantrixx, CPAN is a juggernaut that can't be stopped.

[06:49] <autrijus> gantrixx: perl6 is available as a prototype now; you can write in it to get a taste of how it looks like; there is a growing body of examples.

[06:49] <wolverian> perl5 isn't going away.

[06:50] <gantrixx> the decision makers are under the impression that if we went the Perl route, Perl6 may be available in 6 months or so.  We could easily rewrite 6 months of Perl5 in Perl6.

[06:50] <autrijus> gantrixx: I estimate it to have reasonable community support with we can compile perl6 to run with existing perl5 modules.

[06:50] <gantrixx> And my concern is that they are already leaning toward Python

[06:51] <arubin> writing Python is not the end of the world

[06:51] <arubin> you could be writing VB

[06:51] <wolverian> gantrixx, perl6 won't be available as a production system in six months.

[06:51] <autrijus> gantrixx: you can talk to them that python does not offer a way to statically type your program the way C++ does.

[06:51] <gantrixx> I'd hate to see Perl die....or at least be pushed aside for a younger prettier girl....this Perl6 extreme make-over needs to get completed.

[06:51] <arubin> autrijus: how does that push them towards Perl?

[06:52] <wolverian> maybe you should bring up Haskell with them.

[06:52] <autrijus> arubin: er, if they write perl5 now, then the transition to an incrementally typed perl6 will be less painful?

[06:52] <arubin> autrijus: it's possible Python 3 will have some typing as well

[06:53] <autrijus> arubin: I'd like to see the spec of the said python 3.

[06:54] <gantrixx> The other thing is that, until Perl6 is bundled with Solaris and RedHat, they are hesitant to accept it.

[06:54] <arubin> autrijus: there is nothing set in stone

[06:54] <autrijus> perl6 isn't in any way a mature design, but it's better than a set of mailing list discussions :)

[06:54] <arubin> http://www.python.org/peps/pep-3000.html

[06:54] <arubin> I've read a lot of talk of static typing

[06:54] <arubin> not that I think static typing is a good thing

[06:54] <gantrixx> Otherwise the SA's have to install teh haskel compiler, parrot and all that stuff.  It's a hassle

[06:54] <autrijus> gantrixx: okay. you can talk to them that my current plan is that perl6 will be cross-compiled to perl5.

[06:55] <autrijus> gantrixx: so anywhere that runs perl5 can run perl6.

[06:55] <buu> autrijus: Really? How?

[06:55] <autrijus> it may become as simple as "use pugs; ...start writing perl6 code ..."

[06:55] <autrijus> buu: oh, the same way we currently compile perl6 to javascript.

[06:56] <Khisanth> heh Python isn't all that much younger or prettier, beauty is in the eye of the beholder afterall

[06:56] <autrijus> buu: build a simple glue that's the runtime and object model in Perl5, then output perl 5 code from perl6.

[06:56] <gantrixx> what I really wish some of tehse corporations would do is actually pick a technology that they feel strongly about and donate some developers to work on it.

[06:56] <autrijus> buu: http://svn.openfoundry.org/pugs/docs/notes/plan

[06:57] <gantrixx> then maybe they could insure a long life of one particular technology

[06:57] <gantrixx> rather than hanging back to see what happens

[06:57] <gantrixx> or trying to predict the future

[06:57] <arubin> gantrixx: already happens

[06:57] <Khisanth> gantrixx: but there ARE companies that do that

[06:57] <gantrixx> yes some

[06:58] <autrijus> actually, I'd say the majority of CPAN modules are contributed by people who use them in work.

[06:58] <gantrixx> but any modules I write on company time, they don't let me upload to CPAN.  They view it as proprietary material

[06:58] <autrijus> Acme::* notwithstanding.

[06:58] <Khisanth> well that is really between you and your company's lawyers ...

[06:59] <gantrixx> what I do is go home and write stuff on my own time

[06:59] <gantrixx> I leave teh specific stuff for work

[06:59] <gantrixx> then at least I can reuse my own modules on other projects

[06:59] <autrijus> gantrixx: you got a CPAN ID?

[07:00] <gantrixx> Anyway, they are about 6 months away before they start writing this automation so even if they make a decision now, they still have time to change it before 6 months

[07:00] <gantrixx> and I will be working at a different company for that 6 months doing development in Perl5

[07:00] <gantrixx> no I don't have a CPAN ID

[07:01] <gantrixx> All the generic modules that I have written I just keep for my personal use

[07:01] <autrijus> ah. I wonder if you'd be interested in playing with porting those generic modules to perl 6

[07:01] <gantrixx> Actually yes

[07:01] <autrijus> just to see if the new code is cleaner and more suited to your brain

[07:02] <gantrixx> I mean, if I don't spend my spare time learning Python

[07:02] <gantrixx> I've tried to write some stuff in Perl6 the last time I took a look at it

[07:02] <autrijus> then you can give an accurate description of how it is to write in p6

[07:02] <gantrixx> but I had a hard time getting even the examples to run

[07:02] <autrijus> oh. how long ago is this?

[07:02] <gantrixx> I could not get the simple code that I wrote to work

[07:03] <gantrixx> maybe 4 months ago

[07:03] <gantrixx> I have a vested interest in Perl

[07:03] <autrijus> ah... running it in parrot or in pugs?

[07:03] <gantrixx> hang on, I'll have to refresh my memory

[07:03] <gantrixx> let me check

[07:04] <gantrixx> parrot

[07:05] <autrijus> sure. if you can paste the code to http://sial.org/pbot/perl6 we can see how it runs now

[07:05] <autrijus> also, if you'd like to start porting some of your generic, personal use modules to perl6, I'd like to know your email address so I can send a committer invitation to you

[07:05] <autrijus> so you can commit some code into pugs's examples/ and ext/ directories, and maybe help on the tests etc.

[07:05] <autrijus> ah. no wonder ;)

[07:06] <gantrixx> OK, let me do this....I'll have to refamiliarize myself with Perl6

[07:06] <autrijus> gantrixx: invitation sent. welcome aboard! you can check out the latest source with "svn co http://svn.openfoundry.org/pugs" and commit from the same checkout directory.

[07:06] <autrijus> if you do so, add yourself to the AUTHORS file.

[07:06] <gantrixx> after that I can dig up some perl5 modules that I wrote for fun and port them to Perl6

[07:07] <autrijus> that'd be great.

[07:07] <Aankhen``> ?eval class Foo { sub bar (::?CLASS $self: ) { "bar" } }; Foo.new().bar()

[07:07] <evalbot6> 'bar' 

[07:07] <autrijus> I'll brb

[07:08] <gantrixx> OK, it's midnight here.  I'm going to bed

[07:08] <Aankhen``> Night.

[07:08] <autrijus> see you around here again soon :)

[07:08] <gantrixx> rest assured I am fighting for Perl on this project with Gen Dyn

[07:08] <gantrixx> but I have a 6 month project with another company to do first

[07:09] <autrijus> nod. I'll try my best to make your life easier :)

[07:09] <Aankhen``> autrijus: How's the new runcore coming along?

[07:10] <autrijus> Aankhen``: lots of dead trees ;)

[07:10] <Aankhen``> :-o

[07:10] * Aankhen`` rushes off to hug the trees!

[07:10] <autrijus> Aankhen``: the current Parser's Exp form is not adequate

[07:11] <autrijus> I'm working to reformulate it so each special form gets its own node

[07:11] <autrijus> not reusing the horribly overloaded Syn node

[07:11] <autrijus> so I'm branching off src/Pugs/* into src/PIL/*

[07:11] <autrijus> temporarily you'd need "make pil" and 'make pili" to play with new runcore.

[07:11] <autrijus> a Syn parser, a type annotator and the metamodel need to work together

[07:12] <Aankhen``> OK.

[07:12] <autrijus> I already got intrinsics and container types figured out.

[07:12] <Aankhen``> Yay!

[07:12] <wolverian> autrijus, did you know that "pili" is a childish term for "penis" in finnish? :)

[07:12] <Aankhen``> Hi wolverian. :-P

[07:12] <wolverian> hello, Aankhen`` :)

[07:12] <autrijus> wolverian: every word is a childish term for genitals in some language

[07:12] <autrijus> I'm not surprised :)

[07:12] <wolverian> autrijus, that's probably true.

[07:40] <svnbot6> r6223 | Aankhen++ |  r6288@tef-base:  Aankhen | 2005-08-13 12:35:51 +051800

[07:40] <svnbot6> r6223 | Aankhen++ |  * HTTP::Message: don't specify value for $:headers.

[07:40] <svnbot6> r6224 | Aankhen++ |  r6289@tef-base:  Aankhen | 2005-08-13 12:37:58 +051800

[07:40] <svnbot6> r6224 | Aankhen++ |  * HTTP::Message: removed a todo item.

[09:05] *** _jql is now known as jql

[10:57] *** autark is now known as jp-autark

[11:18] <TheMaaaa> does anyone know where I can get nmake.exe 7 for compiling Pugs?

[11:21] <wilx> In MS Visual Studio.

[11:22] <wilx> Alternatively it should be possible to use MinGW/MSYS.

[11:22] <TheMaaaa> ok, thank you very much

[11:24] <wolverian> nmake is available at microsoft.com downloads as well.

[13:02] *** Maddingue__ is now known as Maddingue

[13:11] <dudley> http://theory.csail.mit.edu/~iandc/

[13:11] <dudley> as if I didn't have a long enough reading backlog

[13:12] <dudley> back issues of Information and Computation are available (gratis) dating back to 1995

[14:35] * autrijus is massively yak shaving ;)

[14:35] <autrijus> perlbot: seen iblech

[14:35] <jabbot> autrijus: iblech was seen 1 days 16 hours 29 minutes 59 seconds ago

[15:07] <autrijus> I think I need three more hackathons to make this all happen

[15:07] * autrijus ponders staying with dconway, iblech and leo for a while respectively

[15:08] <gaal> who was that mathematician who traveled to people's places and stayed with them, helping them with their stuff?

[15:09] <gaal> like, stay with someone, helped him write a paper or solve a problem, moved on

[15:09] <gaal> not exactly a hackathon; more like mathathon.

[15:09] <autrijus> gaal: I explicitly said I will start Erdösing from 2006 :)

[15:10] <gaal> ah, erdos, of course

[15:10] <TheMaaaa> autrijus: iblech will be here in 60 minutes or so

[15:10] <autrijus> TheMaaaa: oh cool. thanks

[15:10] <TheMaaaa> autrijus: (I'm a friend)

[15:10] <TheMaaaa> autrijus: np

[15:11] <gaal> hey, cool, like a reverse jabbot.

[15:11] <TheMaaaa> lol

[15:11] <autrijus> lol

[15:11] <TheMaaaa> ;)

[15:11] <gaal> willsee gaal

[15:11] <gaal> gaal will be seen on spetember 4

[15:11] <autrijus> gaal: gaal will be here in -0.5 minutes

[15:12] <gaal> willsee perl6    # faq

[15:12] <gaal> you: perl 6 will be ready on christmas

[15:12] <autrijus> nah, perl6 will appear right away

[15:12] *** autrijus is now known as perl6

[15:12] *** perl6 is now known as is

[15:12] <gaal> heh

[15:12] * is here today!

[15:13] *** is is now known as autrijus

[15:13] <autrijus> freenode didn't like frequence nick changing tricks ;)

[15:14] <autrijus> so the /nick here and /nick today part was forever lost

[15:18] <autrijus> oh well.

[15:18] * autrijus goes back hacking YAML.

[15:20] <autrijus> gaal: hm, do you think TelAviv.pm can possibly host me for a month or so?

[15:21] <gaal> with great pleasure!

[15:21] <autrijus> good to hear!

[15:21] * autrijus ticks a box on the map

[15:22] <gaal> yay! any time in mind?

[15:23] <autrijus> I don't know, when will you folks be most active for long hacking sessions?

[15:23] <autrijus> (like, off-school)

[15:24] <gaal> YAPC will probably be in february, gabor (and, well, everyone) will be delighted if you could talk there

[15:24] <autrijus> and that'd be a good time for you and others to hack 

[15:24] <autrijus> ?

[15:25] <gaal> you are very much invited to stay at my place any time you want (after early september), let me check when the academic year starts

[15:25] <gaal> (i haven't been in school in a while, and anyway here it's different every year)

[15:27] * clkao giggles at autrijus

[15:27] <gaal> TAU begins the fall semester on 2005-10-30, other universities may differ by a week or so

[15:28] <gaal> any time is good for me to hack :) i do have to work part time though.

[15:28] <autrijus> when does fall semester end?

[15:29] <autrijus> clkao: Erdosing is fun... come to think about it you did that a couple years ago too

[15:29] <gaal> 2005-02-03

[15:29] <gaal> last day of the semester

[15:29] <autrijus> 2006 you mean.

[15:29] <clkao> autrijus: are you starting?

[15:29] <gaal> er, yes

[15:30] <clkao> autrijus: sure i did :) and i also draw nice ascii maps

[15:30] <autrijus> clkao: yeah, will first be off 2005-09-22 ~ 2005-11-15

[15:30] <gaal> semester 2 starts 2006-03-05 

[15:30] <clkao> autrijus: where?

[15:31] <gaal> so february might be a great choice.

[15:31] <autrijus> and then 2006-02 ~ 2006-06 hopefully

[15:31] <autrijus> clkao: .es, .fi, .dk, .nl for the first trip -- maybe more

[15:31] <autrijus> not sure about .uk ;)

[15:31] <clkao> you can use london as hub transitting.. lots of cheap flights

[15:31] <autrijus> riight.

[15:32] <clkao> and i have couchbed

[15:32] <gaal> once in continental europe, trains are probably more fun than planes

[15:32] <autrijus> the second trip is maybe .il, .de, .au -- I'd like to visit .se and .fr as well if possible.

[15:32] <clkao> you mean .at

[15:33] <autrijus> er I mean .at.

[15:33] <autrijus> damn similiar country names.

[15:33] <clkao> you are planning far ahread. that's very bad for erdosing

[15:33] <autrijus> no, I'm merely dreaming far ahead.

[15:33] <autrijus> big difference.

[15:33] <clkao> ..

[15:33] <autrijus> (as in, no committments yet except for .es .nl)

[15:33] <autrijus> but .il sounds like fun

[15:34] * gaal bounces

[15:34] <clkao> come for 2 weeks and we can rewrite svk in perl6

[15:34] <autrijus> right.. that could happen right after p6-to-p5vm

[15:34] <autrijus> gaal: when will www.perl.org.il/YAPC/2006/ go up usually?

[15:35] <autrijus> as in dates etc

[15:35] <autrijus> if it's mid-feb I think I can manage it

[15:35] <gaal> i'll talk with gabor about it.

[15:35] <autrijus> cool.

[15:35] <autrijus> gaal++

[15:36] <clkao> didn't gabor want to write svk gui

[15:36] <gaal> yes, he's working on it AFAIK

[15:36] <clkao> autrijus: you will see shlomi then!

[15:37] <autrijus> clkao: well, that'd be cool too

[15:37] <gaal> he helped me make some good pizza

[15:46] <iblech> autrijus: pong

[15:46] <autrijus> iblech: yo!

[15:46] <autrijus> iblech: I'm de-GADTing PIL1

[15:46] <autrijus> and working on yaml serialization

[15:46] <autrijus> and PIL2 will use the same schema

[15:46] <iblech> Great! :)

[15:46] <autrijus> I think I'll use hash for record type

[15:47] * nothingmuch joins the rejoicing

[15:47] <autrijus> and scalar for nullary constructor

[15:47] <autrijus> and array for basic algebraic types

[15:47] <iblech> All fine with me

[15:47] <autrijus> good good.

[15:48] <clkao> yaml? isn't json the new thing

[15:48] <nothingmuch> clkao: json isa yaml

[15:48] <gaal> json is yaml isn't it? :)

[15:48] <autrijus> json (<=) yaml

[15:48] <autrijus> clkao: look, conclusively proved by three-people-makes-a-tiger rule

[15:48] <clkao> lol

[15:48] <nothingmuch> autrijus: if you come to israel, would you like to see stuff in reality?

[15:48] <nothingmuch> like sounds, and landscapes?

[15:49] <autrijus> nothingmuch: not terribly interested

[15:49] <iblech> (BTW, manually parsing the PIL takes ~~50% of the total time needed to compile a .pil to .js, so -PYAML will greatly speed up PIL2JS :))

[15:49] <nothingmuch> gaal: see?

[15:49] <autrijus> but if you are convinced something is particularly good, maybe

[15:49] <autrijus> iblech: woot

[15:49] <autrijus> iblech: even more gain if you revamp YAML::Parser::Syck a bit

[15:49] <clkao> get a life! hack in beautiful places!

[15:49] <autrijus> since we can link against src/syck/

[15:49] <clkao> rather then toliet!

[15:49] <autrijus> clkao: tamsui isn't ugly either

[15:49] <clkao> s/then/than

[15:50] <autrijus> iblech: also, you're @ bavaria.de, right?

[15:50] <iblech> autrijus: Unfortunately, I don't have much C-fu and no XS-foo...

[15:50] <iblech> autrijus: Right

[15:50] <nothingmuch> bavarian hacking works

[15:50] <nothingmuch> ;-)

[15:50] <autrijus> iblech: how close are you to München?

[15:51] <iblech> autrijus: 60km, 1h

[15:51] <autrijus> oh, pretty close

[15:51] <autrijus> iblech: so, I wonder whether you'll have some time in 2006 to hack with me to p6 really happen :)

[15:52] <autrijus> as in, host me for a month

[15:52] <autrijus> s/p6/make p6/

[15:52] <iblech> I'd have to ask my parents :)

[15:52] * iblech asks

[15:53] <autrijus> if I can find someone nearby to host me, that's possible too.

[15:53] <autrijus> worst case we'll just fine a conference and stay for a week :)

[15:53] <autrijus> s/fine/find/ # fruedian slilp

[15:53] <iblech> They can't say for sure, but think it might work

[15:53] <iblech> :)

[15:53] <putter> hi folks

[15:53] <nothingmuch> hi putter 

[15:54] <iblech> Hi :)

[15:54] * jhorwitz found his own pugs mascot

[15:54] <jhorwitz> http://www.smashing.org/gallery/album01/100_0443

[15:54] <gaal> hee

[15:54] <autrijus> iblech: cool. I don't really need to commit to anything right now -- but some idea of when (as in which months) is more convenient would be nice

[15:54] <jhorwitz> http://www.smashing.org/gallery/album01/100_0445

[15:54] <autrijus> jhorwitz: cool!

[15:55] <autrijus> iblech: do you make use of PPos currently?

[15:55] <autrijus> it's the only existential used in the GADT, so I'm thinking maybe I'll disable it for now

[15:55] <iblech> autrijus: Mid June - Mid August would fit best

[15:55] <iblech> autrijus: Yep, $?POSITION is updated

[15:56] <autrijus> oh ok

[15:56] <autrijus> hm.

[15:56] <autrijus> maybe one different PPos form at each level then.

[15:56] <iblech> autrijus: But np if we remove that

[15:56] <autrijus> if you can pick one node to annotate

[15:56] <autrijus> which one would you like?

[15:56] <autrijus> the Expression level?

[15:56] <autrijus> (PExp)

[15:56] <iblech> PStmt

[15:56] <autrijus> ah. right.

[15:56] <autrijus> okay, PStmt it is.

[15:57] <autrijus> so still

[15:57] <autrijus> PPos pos exp (PStmt ...)

[15:57] <autrijus> (PStmt pos exp ...) is maybe too unwieldy

[15:57] <iblech> Both fine with me

[15:58] <autrijus> k

[15:59] <putter> re yaml on p5, for speed, I suggest -CYAMLp5 , which generates p5 code which can simply be eval()ed.  The 

[16:00] <autrijus> putter: I think we measure speed after benchmarking :)

[16:00] <putter> (oops) p5 path is worth a fastpath.  Can also read yaml, just to validate -CYAML.  -CPILp5?

[16:00] <autrijus> I have a hunch that p5+syck will be no much slower than full eval.

[16:01] <autrijus> syck is after all lightning fast at what it does.

[16:01] <putter> re benchmark-before-tweak, oh, yesss, please. :)

[16:01] <autrijus> a plus is that we can write yaml transformers at binding level

[16:01] <autrijus> so we get fully blessed objects back.

[16:02] <putter> But outputing p5 is likely comparable in difficulty to getting a new non-trivial XS module debugged.

[16:02] <putter> That's my main observation.

[16:02] <autrijus> outputting p5 is trivial. :)

[16:02] <autrijus> because we are just dealing with fixed types.

[16:02] <autrijus> otoh, YAML::Parser::Syck is not a new module.

[16:03] <autrijus> it exists now etc :)

[16:03] <putter> err, putter starts the day confused... there was talk of XS coding...

[16:04] <putter> s/comparable/easier than/

[16:04] <autrijus> the syck binding needs some tweaking to have it build against src/syck/

[16:04] <autrijus> that's all :)

[16:04] <putter> ah.

[16:19] <svnbot6> r6225 | putter++ | hack.pod: added vcs web browser links.

[16:33] <autrijus> deGADT complete

[16:33] <svnbot6> r6226 | putter++ | docs/SEEALSO: added link to YAPC Apocalypse_Now on pugscode.org.

[16:33] <autrijus> refactoring is really impossibly easy with this language ;)

[16:34] <autrijus> iblech: 

[16:34] <autrijus>     { pilMain = (PStmts {pStmt = PNoop, pStmts = PStmts {pStmt = PPos {pPos = (MkPos "-e" 1 1 1 6), pExp = App (Var "&say") Nothing [Pos (MkPos "-e" 1 5 1 6) (Val (VInt 1))], pNode = PStmt {pExpr = PExp {pLV = PApp {pCxt = TTailCall TCxtVoid, pFun = PExp {pLV = PVar {pVarName = "&say"}}, pInv = Nothing, pArgs = [PLit {pLit = PVal {pVal = VInt 1}}]}}}}, pStmts = PNil}})

[16:34] <autrijus> iblech: I don't think I can push this back in good conscience before I work out an alternative to you :)

[16:35] <autrijus> iblech: so... your p5 classes are based on the variant tags

[16:35] <autrijus> right?

[16:35] <autrijus> as in, PBind gets a class

[16:35] <autrijus> but PLvalue does not

[16:36] <iblech> autrijus: oooh, nice :)

[16:36] <iblech> Currently, both get a class

[16:36] <iblech> but PBind is bless [...] => "PIL::PBind" and

[16:36] <iblech> Infinity (e.g.) is bless [] => "PIL::Infinity"

[16:36] <autrijus> ooh very clever.

[16:37] <autrijus> but I take you'd rather work with $bind->{LHS}

[16:37] <autrijus> instead of $bind->[0]

[16:37] <autrijus> right?

[16:37] * autrijus ponders pseudohashes

[16:37] <iblech> very much so

[16:37] <autrijus> ok.

[16:37] <autrijus> then install DrIFT :)

[16:37] <autrijus> I'll take a stab.

[16:38] <autrijus> you'll be able to use Pugs.CodeGen.Perl5

[16:38] <autrijus> but to hack it you'll need DrIFT.

[16:38] <iblech> ok

[16:39] <autrijus> (and haxml too, while you are at it :D)

[16:39] <autrijus> (that's plan B if yaml doesnt work out)

[16:41] * putter makes daily pilgrimige to nothingmuch's smoke, hoping for a real report on rules... but the gods are silent...

[16:44] <stevan> autrijus: what no .us in your travel plans?

[16:44] * stevan is feeling left out

[16:47] <autrijus> stevan: well, if the airport insecurity thing can be fixed...

[16:47] <autrijus> then maybe :)

[16:48] <gaal> stevan, come to .il! :)

[16:48] * autrijus doubt the fingerprinting + mugshot + rude search thing will be fixed in the next 2~3 years somehow

[16:49] <autrijus> stevan: but I'll happily meet you in .ca... or .cu :D

[16:49] <gaal> too bad airport security isn't refactorable haskell.

[16:49] <autrijus> yeah, isn't it.

[16:49] <gaal> can americans come to .cu ?

[16:49] <gaal> ...and not guatanamo?

[16:49] <autrijus> via nonamerican transport means, I think

[16:49] <autrijus> rofl

[16:50] <autrijus> let's _not_ hold a hackathon at guantanamo.cu.

[16:51] <gaal> actually there's part of the bay that's guantanamo*.cu* i think

[16:51] <gaal> jose ...something, i forget, wrote a poem that made it into a famous song..

[16:51] <gaal> "hujira ganatanamera" - means country girl from guantanamo.

[16:52] <gaal> (jose santiago maybe?)

[16:52] <autrijus> yeah, good song

[16:52] <autrijus>  José Martí

[16:53] <autrijus> o/~ Yo soy un hombre sincero / De donde crecen las palmas o/~

[17:02] <svnbot6> r6227 | putter++ | STATUS: added section on rules.  renormalist++

[17:12] <autrijus> now writing DrIFT instances...

[17:12] <svnbot6> r6228 | putter++ | STATUS: shorten section on rules.

[17:18] <stevan> autrijus: I will try to work on the airport insecurity thing, but since our votes don't really count it is kind of hard ;)

[17:18] * stevan has long pondered moving to .ca anyway ....

[17:19] <stevan> ok, gotta go do real-world stuff &

[17:19] <gaal> autrijus, where will you be arriving to .il from?

[17:23] <autrijus> gaal: I don't know yet.

[17:24] <autrijus> maybe .tw, maybe .at, maybe other places.

[17:24] <autrijus> woot, I accidentally wrote a generic dump-any-haskell-expression-to-perl5-objects thing

[17:24] <autrijus> should be useful for other projects as well

[17:24] <Aankh|Clone> :-o

[17:24] <gaal> okay, i'll provide you with travel tips as it becomes closer

[17:24] <gaal> hee!

[17:24] <Aankh|Clone> I wish I had accidents like that...

[17:24] *** Aankh|Clone is now known as Aankhen``

[17:25] <autrijus> Aankhen``: you'll note that most of my pugs development efforts happened by accident :)

[17:25] <Aankhen``> Heh.

[17:37] *** _SamB_ is now known as SamB

[17:38] <putter> lol

[18:29] <gaal> reading through the haskell prelude, i saw this:

[18:29] <gaal> unzip            =  foldr (\(a,b) ~(as,bs) -> (a:as,b:bs)) ([],[])

[18:29] <gaal> what's "~" ?

[18:29] <gaal> (the Report implementation, http://haskell.org/onlinereport/standard-prelude.html )

[18:30] <gaal> hmm, better ask on #haskell...

[18:50] <ods15> ~ is binary NOT

[18:50] <ods15> atleast in C it is :P

[18:51] <gaal> ods15, i found my answer in #haskell

[18:51] <gaal> it isn't binary not :)

[18:51] <gaal> fwiw, section 4.4 here: http://www.haskell.org/tutorial/patterns.html

[19:14] <autrijus> iblech: ping

[19:14] <iblech> autrijus: pong

[19:14] <autrijus> iblech: I have done DrIFTing. may I mercilessly break your code?

[19:14] <iblech> autrijus: Sure :)

[19:14] <autrijus>  ./pugs -CPerl5 -e 'print f(3); sub f { $_ - 10}'

[19:14] <autrijus>     pilMain => bless({pStmt => bless({pPos => bless({posName => "-e",posBeginLine => 1,posBeginColumn => 1,posEndLine => 1,posEndColumn => 11} => 'MkPos'),pExp => (undef),pNode => bless({pExpr => bless({pLV => bless({pCxt => bless(['TCxtVoid'] => 'TTailCall'),pFun => bless({pLV => bless({pVarName => "&print"} => 'PVar')} => 'PExp'),pInv => (undef),pArgs => [bless({pLV => bless({pCxt => bless([bless(["Any"] => 'MkType')] => 'TCxtItem')

[19:14] <autrijus> etc :)

[19:15] <autrijus> perl5 likes it.

[19:15] <autrijus> I _think_ it's the best form available to you

[19:15] <autrijus> feel free to tweak the production rules if it isn't

[19:16] <clkao> yuck!

[19:16] <autrijus> also you can continue to parse the old "Show" format

[19:16] <autrijus> but it's now all record types

[19:16] <autrijus> so you'd need to deal with that

[19:16] <autrijus> -CPIL still works

[19:16] <autrijus> as does -CPIR and friends

[19:16] <autrijus> DrIFT++ # supremely powerful

[19:17] <iblech> Right. I'll probably port PIL2JS to -CPerl5 tomorrow then :)

[19:17] <autrijus> iblech++

[19:17] <autrijus> the class name in particular needs some work

[19:17] <iblech> autrijus++ # You did -CPerl5 :)

[19:17] <autrijus> but I'm sure you can figure it all out.

[19:17] <autrijus> :))

[19:17] <iblech> Yep :)

[19:22] <autrijus> -CPerl5 is faster than -CPIL, amazingly. I wonder how is it possible.

[19:22] <svnbot6> r6229 | autrijus++ | * de-GADT PIL structure -- likely to break all PIL2JS work

[19:22] <svnbot6> r6230 | autrijus++ | * The "Perl5" code generator backend is upon us!

[19:22] <svnbot6> r6230 | autrijus++ |     ./pugs -CPerl5 -e 'say "Hello, World!"' | perl -MO=Deparse -

[19:22] <autrijus> and perl5 likes Test.pm

[19:22] <autrijus> compiled to perl5

[19:22] <autrijus> hurray.

[19:22] <autrijus> nb. "compiled to perl5 data structure", not "compiled to perl5 code"

[19:22] <autrijus> but now a naive perl5 runtime for PIL classes may not be that hard :)

[19:23] * autrijus dreams on

[19:24] <putter> woot!

[19:24] <putter> autrijus++ 

[19:24] <autrijus> :)

[19:25] <autrijus> putter: in particular, the naive perl5 runtime you worked on is made much easier

[19:26] <autrijus> it takes 0.1sec to load in the compiled Test.pm on perl5

[19:26] <putter> Could someone summarize the difference between tests run under make test and via ./pugs -Iblib6/lib t/foo.t?  Does make test check exit code or stderr?  I'm getting failures under make test I dont see directly. :/

[19:26] <autrijus> same time needed to load the Test::More perl5 module

[19:27] <autrijus> it checks exit code

[19:27] <putter> ah, thanks.

[19:27] <putter> re runtime, yes. :)

[19:42] <putter> I mostly did my "perl5 runtime in a day" because, well, it was on your (interview) near-term todo list, and I wanted to show that it was easier, and a more immediate option, than some folks were thinking of it as.  iblech then went amazing with the JS backend.  we didnt need two backends pushing the envelope, so I dropped p5.  anyone should feel free to pick it up.  and overhaul or toss the existing code.

[19:42] <svnbot6> r6231 | putter++ | perl5/PIL-Run/TODO: updated.

[20:08] <iblech> autrijus: svk add src/Pugs/CodeGen/Perl5.hs? :)

[20:08] <svnbot6> r6232 | putter++ | t/rules/rules.t: todo'ed many tests.  All tests now pass when run standalone, but _not_ when run by make test.  The choice of :todo<bug> vs <feature> was semiarbitrary.  And some of the tests are no doubt incorrect.

[20:10] <iblech> ("Could not find module `Pugs.CodeGen.Perl5'")

[20:49] <fglock_> hi

[20:49] <putter> hi fglock.

[20:50] <fglock_> hi putter

[20:50] <fglock_> i've a few questions on the metamodel

[20:52] <putter> oy.  three tests in subrule.t are currently failing with embedded parrot, but not with external.  a PGE parse failure, unknown rule mumble.  so create a pugsbug test.  only... the contents of the test documentation _pod_ can toggle the bug on and off.  arg!  sigh.

[20:52] <fglock_> the metamodel it is the infrastructure that the runtime will use to create objects, right?

[20:52] * putter is almost certainly not the right person to ask...

[20:53] <fglock_> :)

[20:53] <fglock_> i'm a newbie here

[20:54] <integral> the metamodel in .../src/PIL/MetaModel.hs for the haskell PIL evaluator at least

[20:55] <fglock_> integral: I'm writing a runtime library - I'm supposed to use the metamodel to create my objects, right?

[20:56] <iblech> Hm, FWIW, PIL2JS does not use the MetaModel to store the builtin types (Int, Num, Str, etc.)

[20:56] <integral> *a* metamodel :-)   You'll need to port it to the target system.   eg.  there's metamodels written in perl5 and javascript

[20:57] <iblech> In PIL2JS, the MetaModel is used only for user-defined methods and for dispatching -- i.e. you can still write a method acting on Num, and your call will be correctly dispatched, even though there're no Num objects

[20:57] <integral> err, is the build broken for others?

[20:58] <iblech> It is, apparently autrijus forgot to checkin src/Pugs/CodeGen/Perl5.hs

[20:58] <integral> ah

[20:58] <putter> there are a few flavors of metamodel around.  describing both how objects should behave, and various ways to bootstrap the object system.  obviously, your runtime's behavior should conform, but you can use a different bootstrap if you like.  eg, if your runtime is lazy, some things get easier.

[21:00] <fglock_> I mean, is there any use to write a "hash" runtime library to Perl5, for example?

[21:00] <fglock_> except for having the object system "right"

[21:00] <putter> long term, you should be able to just implement a functional non-oo core, and then just load an oo system written in p6.  but that doesnt exist yet.

[21:01] <fglock_> putter: ok, I get it

[21:02] <fglock_> so you only implement in the non-oo core the things you don't have natively

[21:11] <fglock_> why do I get "::Rat" for floating number refs, instead "::Num" in Pugs?

[21:14] <iblech> ?eval (1/3).ref

[21:14] <evalbot6> ::Rat 

[21:14] <iblech> ?eval sqrt(2).ref

[21:14] <evalbot6> ::Num 

[21:15] <iblech> ?eval (1/3).isa(Num)

[21:15] <evalbot6> bool::true 

[21:15] <fglock_> ok. I guess it takes 1.345 == 1345/1000

[21:16] <iblech> yep

[21:16] <iblech> ?eval 1.34500000000000000000000000000000000000000001

[21:16] <evalbot6> 1.345 

[21:16] <iblech> ?eval 1.34500000000000000000000000000000000000000001.ref

[21:16] <evalbot6> ::Rat 

[21:16] <iblech> ?eval 1.345000000000000000000000000000000000000000000000000000000000000000000000000000001.ref

[21:16] <evalbot6> ::Rat 

[21:16] <iblech> ok :)

[21:19] <fglock_> ?eval int(Inf)

[21:19] <evalbot6> 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216 

[21:22] <fglock_> Pugs has 3 types of values - Item, List, Control - what is "Control"?

[21:22] <svnbot6> r6233 | putter++ | t/pugsbugs/rules_with_embedded_parrot.t: created.  'Cannot parse PGE: <?once>' errors can result from pods and comments, elsewhere in the file, having or not having random alphanumeric text.  But only with embedded, not external, parrot.  Parser instablility???  I'm baffled.

[21:25] <putter> Creating that test file was like working with magic.  Try describing the problem in the pod... without the description making the problem go away.  Eeep.

[21:27] <iblech> Control is what, for example, exit returns

[21:28] <iblech> I.e., exit returns a Control, and the runcode calls Haskell's exit if it sees an appropriate Control

[21:28] <iblech> s/runcode/runcore/

[21:29] <coral> wtf

[21:29] * coral looks at "int(Inf)"

[21:29] <coral> out of curiosity what *is* that number

[21:29] <fglock_> coral: I think it is "maxint"

[21:29] <iblech> ?eval 2**1024

[21:29] <evalbot6> 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216 

[21:29] <coral> ok

[21:30] <iblech> ?eval int(-Inf)

[21:30] <evalbot6> -179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216 

[21:30] <coral> ?eval int(Inf) == Inf

[21:30] <evalbot6> bool::true 

[21:30] <coral> ?eval 1+Inf == Inf

[21:30] <evalbot6> bool::true 

[21:30] <iblech> ?eval 1+int(Inf)

[21:30] <evalbot6> 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137217 

[21:30] <coral> heh!

[21:31] <iblech> hrm

[21:31] <coral> ?eval 1+int(Inf)-Inf

[21:31] <evalbot6> NaN 

[21:31] <putter> ?eval 3+int(Inf)

[21:31] <evalbot6> 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137219 

[21:31] <putter> ;)

[21:31] <iblech> ?eval int(Inf)*int(Inf)

[21:31] <evalbot6> 323170060713110073007148766886699519604441026697154840321303454275246551388678908931972014115229134636887179609218980194941195591504909210950881523864482831206308773673009960917501977503896521067960576383840675682767922186426197561618380943384761704705816458520363050428875758915410658086075523991239303855219143333896683424206849747865645694948561760353263220580778056593310261927084603141502585928641771167259436037184618573575983511523016459044036

[21:31] <fglock_> I guess it uses bigints

[21:32] <coral> but not biginfs :)

[21:32] <putter> "I'll see your infinity, and raise you one." ;)

[21:32] <putter> lol

[21:32] <coral> ?eval 1+int(Inf) > int(Inf)

[21:32] <evalbot6> bool::true 

[21:32] <coral> ?eval 1+int(Inf) > Inf

[21:32] <evalbot6> bool::true 

[21:33] <fglock_> ?eval  +(int(Inf) ~ int(Inf))

[21:33] <evalbot6> Inf 

[21:33] * coral blinks

[21:33] <coral> ?evanl -1+int(Inf)

[21:33] <coral> ?eval -1+int(Inf)

[21:33] <evalbot6> 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 

[21:33] <coral> ?eval int(Inf)-1

[21:33] <evalbot6> 179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137215 

[21:34] <putter> ?eval int(Inf-Inf)

[21:34] <evalbot6> -269653970229347386159395778618353710042696546841345985910145121736599013708251444699062715983611304031680170819807090036488184653221624933739271145959211186566651840137298227914453329401869141179179624428127508653257226023513694322210869665811240855745025766026879447359920868907719574457253034494436336205824 

[21:35] <iblech> ?eval int(NaN)

[21:35] <evalbot6> -269653970229347386159395778618353710042696546841345985910145121736599013708251444699062715983611304031680170819807090036488184653221624933739271145959211186566651840137298227914453329401869141179179624428127508653257226023513694322210869665811240855745025766026879447359920868907719574457253034494436336205824 

[21:37] <jql> interesting

[21:37] <jql> and, seemingly, wrong

[21:38] <jql> I find is especially fascinating that int(Inf)*int(Inf) > int(Inf)

[21:38] <putter> ?eval NaN.as("%d")

[21:38] <evalbot6> \'-269653970229347386159395778618353710042696546841345985910145121736599013708251444699062715983611304031680170819807090036488184653221624933739271145959211186566651840137298227914453329401869141179179624428127508653257226023513694322210869665811240855745025766026879447359920868907719574457253034494436336205824' 

[21:39] <putter> ?eval NaN.as("%f")

[21:39] <evalbot6> \'NaN' 

[21:39] <putter> ?eval NaN.as("%x")

[21:39] <evalbot6> \pugs: Ix{Integer}.index: Index (-269653970229347386159395778618353710042696546841345985910145121736599013708251444699062715983611304031680170819807090036488184653221624933739271145959211186566651840137298227914453329401869141179179624428127508653257226023513694322210869665811240855745025766026879447359920868907719574457253034494436336205824) out of range ((0,15)) 

[21:40] * jql chuckles at the idea of C<undef but Inf>

[21:41] <putter> lol

[21:41] <putter> chr(Inf)

[21:41] <putter> ?eval chr(Inf)

[21:41] <evalbot6> '

[21:41] <jql> my unicode doesn't go that high, clearly

[21:41] <putter> ?eval chr(Inf).bytes

[21:41] <evalbot6> 1 

[21:41] <putter> ?eval ord(chr(Inf))

[21:42] <evalbot6> 0 

[21:42] <jql> evalbot sent \0 to the server? no wonder the closing quote was lost

[21:43] <jql> ?eval Inf > -Inf

[21:43] <evalbot6> bool::true 

[21:43] <jql> ?eval 0 > -0

[21:43] <evalbot6> bool::false 

[21:44] <jql> okay, haskell isn't totally wacked out crazy

[21:51] <fglock_> see you later

[21:53] <Aankhen``> Yeesh.

[21:53] <Aankhen``> Crazy spammers. :-P

[21:55] <putter> re unicode, looks like 1114111 is the largest $n for which ord(chr($n)) == $n... :)

[21:58] * Aankhen`` goes to sleep.

[21:59] <iblech> Night :)

[21:59] <putter> g'night!

[21:59] * iblech goes to sleep, too

[21:59] <putter> g'night iblech!

[21:59] <Aankhen``> G'night.

[22:00] <putter> << >> .pop .push rx:bytes/^(.)(.)(.)/

[22:00] <putter> (probably got the shift operators wrong though...)

[22:02] <putter> rx:bytes:3x/(.)/

[22:47] <jql> not quite the same... ^

[22:47] <jql> err

[22:47] <jql> wtf am I saying?

[22:48] * jql kicks himself in the thinking part

[22:57] <dbrock> what do you mean? is it the same?

[23:00] <putter> the only way rx:bytes/(.)/ can fail is if .bytes (ie, length) < 1.  in which case rx:bytes/^(.)/ will fail too.

[23:02] <dbrock> oh, right, and if it matches, it will always match at the start of the string

[23:04] <putter> right

[23:28] <putter> Ok, I have some rules tests which (1) work when run ./pugs -Iblib6/lib t/foo.t, (2) fail in make test and harness, (3) still fail with ok(eval('...')...).  Any suggestions other than skip those (200+) tests?

[23:30] <wilx> Yeah, fix the cause of the failures :)

[23:32] <putter> ;)   Unfortunately, that's likely to take several people a month or few.

[23:33] <putter> Well, depends on the people of course.  It might just be a few days of intense hack-attack.

[23:35] <putter> Hmm, I realize I've been potentially unclear about :todo status.  for example, the following modified line from rules.t

[23:36] <putter> is(eval('("a]" ~~ /a]/ && $<>)'), "a]", 're_tests 96/0 (#126)', :todo<bug>);

[23:36] <putter> shows up TODO when run standalone, but is recorded as a test failure under make test.

