[00:03] <svnbot6> r4930, mugwump++ | Don't ship Date yet - tests not even failing gracefully

[00:03] <svnbot6> r4931, theorbtwo++ | Better errors for cast failures (via the joys of copy-and-paste -- I'm sure

[00:03] <svnbot6> r4931, theorbtwo++ | there's a better way, but this way worked.)

[00:07] <clkao> oom issues?

[00:12] <clkao> autrijus: Agent Tang's ticket has be handed over stig

[00:13] <autrijus> clkao: yup, understuud. thanks!

[00:13] <clkao> have fun!

[00:13] <clkao> and produce something useful before i come back townm

[00:19] <autrijus>  I try, I try :)

[00:25] <theorbtwo> Autrijus: give me a good todo that doesn't involve hacking makefiles?

[00:25] <svnbot6> r4932, luqui++ | Fixed a very small bug.

[00:27] <autrijus> theorbtwo: sure... investigate failing cases from smoke -- :todo<feature> or :todo<bug> the non-regressions, and see if you can repair some obvious hardfails

[00:27] <autrijus> http://192.168.0.123/smoke.html

[00:28] <mugwump> nice url

[00:28] <autrijus> is a sort of up to date graph -- you can ignore the exists.t and array/has/h tests for now; I'm working on that

[00:31] * autrijus shuts down dereferencing and suddenly get unexpected successes

[01:28] <Darren_Duncan> back later

[01:35] <mugwump> is it just me, or are all the links in this fortnight's perl6 summary broken?

[01:35] <svnbot6> r4933, luqui++ | Ze estrippa vorks.

[02:02] <autrijus> mugwump: all Date tests are currently broken

[02:02] <svnbot6> r4934, autrijus++ | * Instead of implicitly derefercing and evaluating in rvalue

[02:02] <svnbot6> r4934, autrijus++ |   context when deriving reference types, we now simply look

[02:02] <svnbot6> r4934, autrijus++ |   at the refType for constant scalar references.  This means that

[02:02] <svnbot6> r4934, autrijus++ |     sub foo ($x) { $x.ref } my %y; foo(%y);

[02:02] <svnbot6> r4934, autrijus++ |   no longer evaluates to List, but to Hash now.

[02:02] <svnbot6> r4934, autrijus++ | * Also cleaned up related tests.

[02:02] <autrijus> mugwump: can you look into it? I'd like to enter preflight if possible

[02:07] <mugwump> autrijus: I added ext/Date to MANIFEST.SKIP

[02:09] <mugwump> is that ok?  I can tidy them up to fail gracefully if that's not good enough...

[02:09] <mugwump> I'm getting a weird error building pugs w/perl5 embedding atm, too

[02:09] <mugwump> /usr/lib/perl/5.8/CORE/reentr.h:611: error: field `_crypt_struct' has incomplete type

[02:10] <mugwump> I'm sure this is something simple...

[02:11] <mugwump> Do you think it's work shipping a module that only consists of an untested API?

[02:11] <theorbtw1> mugwump: Is that the only error?

[02:11] <theorbtw1> Also, what distro are you on?

[02:11] <mugwump> theorbtw1: that's the middle of a big long failure ... I'll nopaste it

[02:11] <mugwump> jabbot: nopaste?

[02:11] <jabbot> mugwump: nopaste is http://irc.csie.org:8888/

[02:12] <theorbtw1> mugwump: I recognoze it.

[02:12] <theorbtw1> It's nasty, and AFAIK, nobody has figured out WTF is up with it.

[02:12] <mugwump> it's very strange, actually - I only got it after purging my wc and re-building

[02:13] <theorbtw1> Odd.

[02:15] <autrijus> mugwump: if you have some cycles, please mark them so they fails gracefully

[02:15] <autrijus> (just so ext/ don't become the old modules/ again)

[02:16] <autrijus> mugwump: maybe perl and ghc were built with different gccs?

[02:16] * mugwump hmms

[02:16] <mugwump> the errors' http://irc.csie.org:8888/110 if you haven't seen it already

[02:17] <theorbtw1> autririjus: I'd expect very different errors there.

[02:17] <theorbtw1> Link errors or segfaults, possibly...

[02:18] <autrijus> I seem to remember it has something to do with cc/dlflags from EU::Embed

[02:19] <theorbtw1> That seems mildly possible.

[02:20] <theorbtw1> The odd part is that if you try to force the ifdef that makes _crypt_struct be defined, it still doesn't work.

[02:48] <svnbot6> r4935, autrijus++ | * lvalue comma was broken from the vCast change; it's now fixed.

[03:25] <svnbot6> r4936, autrijus++ | * Chinese (traditional) for Main.hs poem for this release.

[03:25] <svnbot6> r4937, autrijus++ | * fix .isa to use .ref; unTODO a passing test

[03:26] <Darren_Duncan> there and back again

[03:37] *** theorbtw1 is now known as theorbtwo

[03:49] <autrijus> theorbtwo: http://192.168.0.123/smoke.html

[03:49] <autrijus> theorbtwo: please download and cache it locally :)

[03:50] <jql> laf

[03:50] * jql admits he clicked it

[03:50] * jql puts on the dunce cap

[03:51] <theorbtwo> Being behind the same firewall)++

[03:51] <theorbtwo> (Having a cell phone on the other end)--

[04:24] <svnbot6> r4938, theorbtwo++ | t/builtins/arrays_and_hashes/pairs.t: correct buggy test.

[05:26] <sili_> unf

[05:37] <mugwump> right, I'm off ... should get a chance to get those Date tests into line before Sunday my time (GMT+12), probably committing Saturday night.  Otherwise the MANIFEST.SKIP will withold them from the distribution and they can come another release...

[05:57] <pasteling> "p]" at 210.83.203.100 pasted "http://sial.org/pbot/perl6" (1 line, 28B) at http://sial.org/pbot/11317

[06:18] <gaal_> inflammable pizza huh?

[06:20] <sili_> mmm

[06:24] <svnbot6> r4939, Darren_Duncan++ | updated test arg_ref_type_preservation.t : commented out all the 'control' tests that used a temp var (most failing as-is as they may be wrong now), leaving just the core 8 tests that don't use a temp var; 6 succeed, 2 fail

[06:27] <Darren_Duncan> I notice that referencing private attributes is now broken in the current build of plain no-Parrot Pugs

[06:27] <Darren_Duncan> I assume this is due to work in progress so I'll not mention it further now

[06:29] <Darren_Duncan> but if you weren't expecting it, well now you know : example death is seen when running ext/Locale-KeyedText/t/LKT_20_TrnProps.t

[06:30] <Darren_Duncan> good night

[08:40] <steveq> Anyone know what to do to clean up the wiki?

[08:40] <steveq> It seems to have been spammed badly on the frontpage

[08:40] <gaal_> *sigh* happens a lot :-(

[08:40] <steveq> yeah

[08:40] <gaal_> go to Revisions, find the last good version, and Save it

[08:43] <steveq> gaal_: done

[08:43] <steveq> Looks like they only spammed the frontpage

[08:46] <gaal_> cool

[08:46] <gaal_> well, not cool

[08:46] <gaal_> but you get my drift :/

[08:47] *** gaal_ is now known as gaal

[10:49] <wilx> Compiling Emit.PIR         ( src/Emit/PIR.hs, src/Emit/PIR.o )

[10:49] <wilx> ghc-6.4: could not execute: /usr/local/lib/ghc-6.4/ghc-asm

[10:49] <wilx> *** Error code 1

[12:11] <nothingmuch> good morning

[12:25] <coral> e l , v t m n o

[12:25] <coral> oops, off by one error

[12:25] <coral> oh well

[12:32] <autrijus> for ('a') -> $letter { is( $_ ,'a', :todo<clarification>) }

[12:32] <autrijus> I seem to remember damian saying something about methods no longer set $_

[12:32] <autrijus> as invocant

[12:33] <autrijus> I wonder if the same applies to pointy now

[12:33] * autrijus decides to ask lwall/luqui when they're up

[12:36] <broquaint> IFCP in perl6?

[12:37] <Nattfodd> broquaint: in parrot assembly 

[12:38] <broquaint> Isn't the F in IFCP "functional"?

[12:38] <autrijus> it's icfp

[12:38] <autrijus> and perl6 is functional :)

[12:38] <autrijus> (but, to answer your question, icfp does not place a limit on the type of language)

[12:39] <broquaint> Madness.

[12:40] <broquaint> How does one "win" this contest? Isn't it subject to the judges opinions?

[12:40] <autrijus> indeed. if the problem this year is unfit for p6, then the opportunity cost is too high and maybe I'll give up and just continue the hackathon on p6

[12:40] <autrijus> broquaint: there's always a quantifieable metric. see previous year's.

[12:40] <autrijus> google for icfp 2004 contest etc

[12:41] <malaire> http://icfpc.plt-scheme.org/past-contests.html

[12:44] <broquaint> Hmm, not many PHP entries, I wonder why that is ...

[12:44] <broquaint> Surely nothing to do with its quality as a language and the community that surrounds it ...

[12:45] <awwaiid> hey don't knock PHP... as they continue to adopt more features of perl they are improving :)

[12:46] <awwaiid> besides... would you really want all those folks of whom you speak hanging out in perlmonks?

[12:47] <broquaint> They wouldn't even get that far.

[12:48] <QtPlatypus> awwaiid: Though it is in urgent need to make its builtins consistent.

[12:48] <awwaiid> indeed

[12:48] <broquaint> It is in urgent need to stop sucking in general.

[12:48] <broquaint> But I guess it's not really relevant to the discerning hacker.

[12:48] <awwaiid> :)

[12:49] <cognominal> do Perl6 and its parrot backend supports non boxed types?

[12:49] <QtPlatypus> broquaint: I don't think thats a helpfull comment.  Understanding why it sucks, and how it can be improved.

[12:49] <QtPlatypus> cognominal: That is what is intended.

[12:49] <cognominal> I note that most signatures use Int where int would do

[12:49] <autrijus> cognominal: perl6 does. parrot does. pugs doesn't :)

[12:49] <broquaint> This is IRC, QtPlatypus, hardly the place for helpful comments.

[12:49] <cognominal> hu, I meant Pugs,

[12:51] <coral> QtPlatypus: while people on irc may often be helpful, it is not guaranteed.

[12:52] <coral> for instance i'm usually indirectly helpful

[12:53] <wolverian> autrijus: methods don't alias $_ to invocant?

[12:55] <autrijus> wolverian: damian said so in a p6l post last week. I'm not sure whether it's normative or not.

[12:55] <autrijus> will ask.

[12:56] <QtPlatypus> coral: Just because there are unhelpfull people doesn't mean that we shouldn't strive to be helpfull ourselves.

[12:57] <wolverian> autrijus: thanks!

[12:57] <wolverian> QtPlatypus: helpful

[12:59] <cognominal> howdy, BooK

[13:02] <coral> QtPlatypus: striving to be helpful all of the time results in burnout and a lack of focus on the essential needs of self

[13:02] <coral> see also #perl topic (efnet variant)

[13:03] <wolverian> (efnet #perl)++

[13:03] <coral> with a bunch of people there's often at least one person in the mood to be helpful, which can be enough to carry the day

[13:03] <QtPlatypus> coral: True.

[13:04] <coral> and for those unable for whatever reason to be helpful (lack of clue, lack of coherency, lack of energy, ...?) there is still reason to participate

[13:04] <coral> <--

[13:04] <wolverian> coral: lack of time

[13:04] <coral> i replaced time with coherency and subsumed that into energy

[13:04] <coral> mod at will

[13:05] <wolverian> well, there's still some limit to how much energy you can spend per second

[13:05] <wolverian> :)

[13:05] <wolverian> but now it's time for me to go to the beach with girlfriend and maybe get some tan

[13:05] <wolverian> (read: burn myself)

[13:05] <wolverian> cheers

[13:05] <coral> 'second' is defined partly by velocity

[13:05] <wolverian> no, it's defined by the speed of light

[13:05] <coral> relative to those being helped

[14:02] <autrijus> nothingmuch: http://icfpc.plt-scheme.org/spec.html

[14:02] <svnbot6> r4940, autrijus++ | * more regenging... this time we hack &return() so it won't

[14:02] <svnbot6> r4940, autrijus++ |   flatten hash/arrayrefs ever again, even at slurpy context.

[14:06] <autrijus> very... complex

[14:10] <Nattfodd> autrijus: yes

[14:10] <Nattfodd> and very tricky, too

[14:15] <wolverian> wow. that is pretty hard.

[14:15] <obra> 'morning

[14:17] <wolverian> morning

[14:41] <PerlJam> so ... is anyone attempting the icfp contest in perl6?

[14:42] * QtPlatypus is pondering it.

[14:45] * PerlJam bets the future modification will be something like the robbers act together rather than the cops

[14:46] <svnbot6> r4941, autrijus++ | * pairify const pair-derived arrayref.

[14:50] <theorbtwo> I think the modification will be adding extra cop headquarters, or possibly making pedestrian-only streets.

[14:51] <theorbtwo> Adding multiple robbers that act together would be a large change.

[14:51] <PerlJam> or some combination of all of the above

[14:53] <autrijus> right.

[14:54] <autrijus> it looks like somewhat trivial to come up with a reasonable implementation that can survive the regular season

[14:54] <autrijus> but then will probably be mercilessly murdered during playoff

[14:55] <Limbic_Region> theorbtwo - I don't see pedestrian only streets as being a difficult minor change - cars already have to check if they can enter a street because some are 1-way

[14:55] <Limbic_Region> you wouldn't need 24 hours to change that

[14:55] <theorbtwo> True.

[14:56] <theorbtwo> We do have 1/3rd as long to addapt to the change as to write the initial implementation.... in theory.

[14:56] <obra> w/in 4

[14:56] <obra> sorry

[14:58] <Limbic_Region> I am guessing the change(s) will be more substantive in how you adapt to game play

[14:58] <Limbic_Region> IOW - cops can now smell you 3 blocks away - how does that affect your strategy as a robber

[14:58] <theorbtwo> Having multiple robbers that do not communicate seems about the right level.

[15:09] <malaire> in first stage, map seems to be allways the same - so change could also be a different map

[15:13] <BooK> well, the rules say that the change is subtantial enough that the code must be well-written enough to survive it (i.e. not recode the whole game logic because of this change)

[15:14] <BooK> so I guess it's bigger than making pedestrian-only streets

[15:17] <broquaint> I'm guessing the addition of a love triangle involving a beautiful seductress-bot which both the cop-bots and robber-bots love but neither sure of her true identity which is that she is a secret-agent-bot working for an external power seeking to gain advantage from the situation, whatever the outcome.

[15:17] <malaire> Bots could be written to take advantage of the fact that map is fixed, but these would suffer horribly should the map be changed. On the otherhand it's harder to give bots better AI, but that probably would be easier to adapt to a new map.

[15:20] <Odin-LAP> Hmm.

[15:20] <Odin-LAP> What about a vigilante-bot?

[15:20] <Odin-LAP> With some of the copper features, and some of the robber features? :>

[15:21] <Odin-LAP> That'd maybe be "too much". :p

[15:21] <Arathorn> mixins... :)

[15:22] <Odin-LAP> Arathorn: ;)

[15:28] <svnbot6> r4942, autrijus++ | * pointy binds $_ again... at least now...

[15:28] <svnbot6> r4942, autrijus++ | * more test skips

[15:43] <spinclad> [06/23 20:27] <autrijus> http://192.168.0.123/smoke.html

[15:44] <spinclad> autrijus, would you have another address for that? 192.168.x.x is local...

[15:50] <theorbtwo> spinclad: It also denies my connection.

[15:50] <svnbot6> r4943, autrijus++ | * make the usual things that takes Pair arguments recognise pairs.

[15:51] <spinclad> it's an unroutable address range, no access outside of local net

[15:51] <theorbtwo> I know.  He's sittingon the coutch next to me.

[15:52] <theorbtwo> It's last night's smoke, anyway.

[15:53] <spinclad> ah, i thought it was a site for regular reports.  NM, then.

[16:11] <wolverian> why is it that I'm so tempted to write an RPG engine in perl6?

[16:11] * wolverian suspects it's the QBasic coder in him

[16:11] * pdcawley_ is tempted to write all sorts of things in perl 6.

[16:12] <wolverian> well. me too.

[16:12] <wolverian> it's just that the role-based OO is so directly compatible with RPGs, I guess. :)

[16:12] <Limbic_Region> mmmm - I love the smell of smoldering monitors in the early afternoon

[16:12] <wolverian> ouch.

[16:12] <pdcawley_> I keep wondering about writing a debugger.

[16:12] <Limbic_Region> guess I won't be using this machine to be doing any data analysis ;-)

[16:13] <kungfuftr> pdcawley_: yar... should be easier with things like .wrap

[16:13] <pdcawley_> Which means I should probably take a look at Deve::ebug

[16:13] <wolverian> you don't have a neural cannula?

[16:14] <pdcawley_> Is .wrap implemented yet?

[16:14] <theorbtwo> Check prims.hs?

[16:15] * pdcawley_ grins, get in early and rejig sub/method/class/etc to do instrumentation tricks and you're laughing. Or at least smiling giddily to yourself.

[16:23] <theorbtwo> Coolo, pdc.

[16:24] <theorbtwo> (That was a typo, not an attempt to be 80s, BTW.)

[16:24] <sili> i thought it was spanish.

[16:31] <pdcawley_> Have we got macros that I can use to rewrite sub yet?

[16:31] <svnbot6> r4944, luqui++ | A little backslashy test.

[16:32] <Arathorn> gah

[16:32] <pdcawley_> Actually, a better bet might be to extend ::Block

[16:32] <Arathorn> talk about smouldering monitors

[16:32] <Arathorn> the EHT just sparked over in this thing

[16:32] <pdcawley_> ?eval 1

[16:32] <theorbtwo> pdc: Not implemented, and their existance is somewhat under question.

[16:32] <theorbtwo> EHT?

[16:33] <Arathorn> the line output voltage

[16:33] <theorbtwo> Ouch.

[16:33] <Arathorn> thunderstorm just started so humidity's gone crazy, and so the voltage arced somewhere and collapsed

[16:33] <Arathorn> lightning outside & inside the office

[16:33] <pdcawley_> What are we calling them now? I understand they're just a special case of 'pointy', but I can't remember what class a pointy is.

[16:33] * Arathorn returns to writing an incremental cvs-mirror script in p6 :)

[16:37] <theorbtwo> PDC: Read autrijus' last journal entry.

[16:37] <pdcawley_> Ooh... '-> $x {1}()' is actually parsed..

[16:38] <pdcawley_> I think I already did.

[16:38] <theorbtwo> I think it's "Block" unless it has a spelled-out (multi)?(sub|method)

[16:38] <pdcawley_> Yeah.

[16:39] <pdcawley_> I just found that '::Block.new' doesn't seem to return the same kind of referency thing as -> {...}

[16:39] <theorbtwo> Oh, you want the name, not the actuall class?  I think it's still named "pointy".

[16:39] <theorbtwo> Hm.  That's possibly a bug.

[16:40] <pdcawley_> When you do '::Block.new' running in a 'bare' pugs you get {obj:Block} as your output.

[16:40] <pdcawley_> When you do -> {...}, you get sub {...}

[16:40] <theorbtwo> Possibly it's not... what would you expect it to do when called?

[16:40] <theorbtwo> Oh.  That's a bug, I think, as they don't have the same signature, I think.

[16:40] <pdcawley_> Well, I expect 'em both to give you the same sort of thing.

[16:41] <theorbtwo> -> {}.perl should be -> {}, ans sub {} should perlify to sub {}... I think.

[16:41] <pdcawley_> Point is, I want to be able to wrap ::Block::BUILD or ::Block::new or whatever.

[16:41] <theorbtwo> I'm somewhat confused by it.

[16:41] <pdcawley_> Yeah, blocks perlifying to subs is definitely wrong.

[16:42] <theorbtwo> Hm, that shoulsounds like it should work, but i'd certianly expect it to not work in current pugs.

[16:42] <sili> hmm

[16:42] <sili> i thought blocks are supposed to perlify to subs

[16:42] <pdcawley_> Well, if we can get it to work, it enables a whole bunch of interesting debugger possibilities.

[16:43] <theorbtwo> Yeah, it does.

[16:43] <pdcawley_> sili: But blocks and subs have different return semantics.

[16:43] <sili> ah.

[16:43] * castaway_ thunk pointys and subs are both just ways to write subs

[16:43] <pdcawley_> It might be possible to *promote* blocks to subs (and get sub return semantics), but vice versa could well be difficult.

[16:43] <broquaint> use Enable :mode('I am an evil coder and I shall do as I please');

[16:44] <broquaint> s/evil/smart/whatever/

[16:44] <pdcawley_> castaway: Down that line of thought lies interesting confusion when you look at for 0..10 -> {return "Found it!" when 4}

[16:45] <castaway_> s/thunk/remembers from reading S04 

[16:46] <theorbtwo> Possibly sub foo (...) is Pointy would do.

[16:46] <pdcawley_> Yikes! &?CALLER_CONTINUATION perlifies to sub {...} does it...

[16:47] <pdcawley_> 'does it'? Don't ask me what I meant.

[16:48] <pdcawley_> Is there any way of inspecting a running pugs to find out what classes it knows about?

[16:48] <svnbot6> r4945, autrijus++ | * there's no List type anymore... let's call it Array.

[16:51] <theorbtwo> Try ./pugs -e 'my $Foo::Bar=1; sub foo{ %CALLER::.perl}; say foo'

[16:59] <geoffb> autrijus, safe to pull pugs now, without tests exploding?

[17:00] <pdcawley_> Is %:: still our symbol table?

[17:01] <theorbtwo> Yes, but I'm not sure you can mention it directly, without a %MY::, %CALLER:, etc.

[17:01] <theorbtwo> (%MY:: is not implemented.

[17:02] <pdcawley_> So you have to look at %CALLER::?

[17:02] <theorbtwo> Yeah.

[17:02] <pdcawley_> Doesn't do what I want.

[17:02] <theorbtwo> Also, the %:: code seems to miss things.

[17:03] <pdcawley_> Yeah. In perl5 you can see every package loaded by inspecting %::

[17:03] <pdcawley_> Which is global of course... what's a global variable look like? %*:: ?

[17:05] <theorbtwo> Possibly.

[17:06] <theorbtwo> * is a twigil, not a (psudo)package, though, so my %:: code won't work with it.

[17:06] * pdcawley_ grins. Right, I shall go read the appropriate apocalypses and take a look back at my perl 5 magic and write some tests shall I?

[17:06] <pdcawley_> Because if I can have symbol table introspection, a working wrap and working continuations, I can get a good long way to writing a debugger. I think.

[17:06] <theorbtwo> Would be nice.

[17:07] <theorbtwo> Great!

[17:07] <theorbtwo> (I need to figure out a better way to work...)

[17:07] <pdcawley_> And if I can show a proof of concept debugger, I can maybe get some TPF funding to build one :)

[17:21] <Limbic_Region> pdcawley_ - just hope that no Klingons sit on the TPF board of approvals

[17:21] <Limbic_Region> http://www.klingon.org/resources/klingon_code.html

[17:23] <pdcawley_> Nice!

[17:23] <pdcawley_> (And not Mice! as I initially typoed)

[17:24] <Limbic_Region> that was a link in the interview Damian recently did with brian d foy

[17:24] <pdcawley_> Ah. Not read that yet.

[17:24] <Limbic_Region> want that link too?

[17:24] <pdcawley_> Right. I'm going to search for food.

[17:24] <Arathorn> anyone know where you report pm spam to on freenode?

[17:24] <Limbic_Region> http://theperlreview.com/Interviews/damian-bpp-20050622.html?up

[17:25] <Arathorn> (if anywhere?)

[17:25] * Limbic_Region heads off to a meeting now

[17:25] <theorbtwo> Ara: There's instructions on the web site, IIRC.

[17:26] * Arathorn checks it out

[18:01] *** Arathorn is now known as Aragone

[18:36] <nothingmuch_> autrijus: http://colabti.de/irclogger/irclogger_log/perl6?date=2005-04-28,Thu#l753

[18:37] *** nothingmuch_ is now known as nothingmuch_____

[18:53] <Darren_Duncan> it appears that the openfoundry went down in the last half-hour

[18:53] <Darren_Duncan> I can't update or commit ... but could update a half hour or hour ago

[18:54] <Darren_Duncan> but I am pleased to say that last night's Pugs updates fixed the bug exposed by t/subroutines/arg_ref_type_preservation.t ...

[18:55] <Darren_Duncan> and the bug exposed by t/builtins/arrays_and_hashes/pairs.t

[18:58] <Darren_Duncan> meanwhile, the bug exposed in exists.t is not broken and moved TODO, but it occurs to me that it should be possible to work around this bug meanwhile, by copying an entire hash to another temp hash -- then reading from the second one shouldn't erroneously add a key to the first

[18:58] <Darren_Duncan> so I'll try employing said work-around to get my module tests to pass

[19:01] <Darren_Duncan> openfoundry is still down

[19:04] <acme_> autrijus: icfp-ing?

[19:10] <Darren_Duncan> seen autrijus

[19:10] <jabbot> Darren_Duncan: autrijus was seen 4 hours 15 minutes 55 seconds ago

[19:15] <castaway_> he's here somewheres..

[19:15] <castaway_> (that is, sat on couch across the room from me)

[19:16] <PerlJam> castaway_: who all is at the hackathon?

[19:16] *** castaway_ is now known as castaway

[19:16] <castaway> Autrijus, Luke, Ingy, Larry, Stevan, theorbtwo, John MacDonald and me

[19:16] <castaway> (so far.. apparently Patrick is turning up today)

[19:18] <PerlJam> castaway: ah, excellent.  You guys should get alot accomplished.

[19:18] <castaway> well not so much me, but the rest seem to be doing well.. see Autrijus' journal from yesterday

[19:18] <PerlJam> If nothing else, a face-to-face should get people fired up and get some ideas flowing

[19:19] <castaway> indeed, its quite enlightening

[19:20] <PerlJam> whenever patrick shows up tell him I said "hi and happy hacking"  :)

[19:20] * castaway nods

[19:23] <Darren_Duncan> that's great to hear

[19:24] <castaway> oops, I missed out nothingmuch, who is also here

[19:26] <Darren_Duncan> so do you do a lot of 'over the shoulder' programming there, several people on one screen?

[19:27] <Darren_Duncan> also, how do you get by without openfoundry?

[19:27] <Darren_Duncan> do you have your own repository you can sync to openfoundry later?

[19:27] <castaway> you're asking the wrong person, Darren ,)

[19:28] <castaway> they were certainly using svn earlier to check stuff in

[19:28] <Darren_Duncan> it went down a good hour ago

[19:28] <Darren_Duncan> are you resting now

[19:28] <castaway> most of it seems to get discussed across the room, with sometimes resorting to paper or laptop.. (Which makes it hard to follow at times)

[19:28] <castaway> no, I dont hack pugs/haskell

[19:29] * castaway is more of a taxidriver here

[19:29] <Darren_Duncan> I will try to participate in a hackathon in the future ; minor regret at missing this one

[19:29] <castaway> were discussing chompedness just now, tho I missed the conclusion

[19:30] <castaway> afaik, autrijus cant fix of even if he notices when its down

[19:30] <Darren_Duncan> are some of you taking photos and/or video of the hackathon ... I want to watch it some time

[19:30] <Darren_Duncan> too bad

[19:30] <castaway> no photos that Ive noticed at all (I would, but my camera didnt get brought, its dead)

[19:31] <castaway> I'm not sure it would be all that entertaining, just in pictures

[19:31] <Darren_Duncan> should help with good memories for the participants, though

[19:31] <castaway> hmm

[19:32] <PerlJam> When openfoundry goes down the typical reaction is to switch repositories to the perl.org one temporarily.

[19:33] <Darren_Duncan> openfoundry seems to go down frequently ... might it be reasonable to switch semi-permanently?

[19:33] <PerlJam> (the only thing is that not everyone has commit access to the perl.org one)

[19:33] <PerlJam> I'm sure though that it would be reasonable for the hackathon to have a local repository that they commit to and then periodically sync that to openfoundry or perl.org or whatever

[19:34] <Darren_Duncan> while autrijus can't fix openfoundry, is there someone he can contact who can, or does he have to wait for them to notice on their own?

[19:35] <PerlJam> dunno.  Past outages have been noticed rather quickly (within a couple of hours) but still slow to fix (probably due to the nature of the outage)

[19:35] <castaway> afafir, one just has to wait

[19:35] <Darren_Duncan> fortunately I also have perl 5 stuff to do, and that isn't dependent on openfoundry

[19:36] <castaway> PJ, yeah, it might have been clever.. ,) (also a proxy server, given we're all conncted over the same cell phone ,)

[19:36] <whiteg> it's not easy to find someone dealing with openfoundry's outage.

[19:36] <whiteg> it's weekend now...

[19:36] <PerlJam> castaway: the only network connection there is via cellphone?

[19:37] <castaway> correct

[19:37] <PerlJam> Bummer.

[19:37] <Darren_Duncan> too bad ... I know some hosts have procedures to maintain 24/7 uptime

[19:37] <castaway> (its running at about 11kbit/s I think

[19:37] <castaway> oops, 115kbit

[19:37] <castaway> its not that bad

[19:38] <PerlJam> well that's good then

[21:25] <Shillo> Uh.. svn.openfoundry.org is gone x.x ?

[21:30] <Darren_Duncan> yup

[21:31] <Darren_Duncan> down for 3-4 hours now

[21:45] <integral> SVK to the rescue! :-)

[23:08] <sili> integral: noob

[23:47] <Limbic_Region> is the normal depot out of commision ATM?

[23:49] <Darren_Duncan> yes it is

[23:49] <Darren_Duncan> and has been for about 5 hours now

[23:53] <castaway> eep, nm is taking pictures

[23:53] * castaway hides

[23:55] <Odin-LAP> Do so. Or alternatively, destroy the camera.

[23:55] *** knewt__ is now known as knewt_

[23:59] <Darren_Duncan> oh come on ... embrace the camera ... you don't get these chances very often

