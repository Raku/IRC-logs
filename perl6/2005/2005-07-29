[06:48] *** Boogie_ is now known as Boogie

[06:59] *** castaway_ is now known as castaway

[08:43] *** _jql is now known as jql

[08:56] *** Maddingue__ is now known as Maddingue

[09:14] <svnbot6> r5884 | iblech++ | * Usual svn props.

[09:14] <svnbot6> r5884 | iblech++ | * PIL2JS:

[09:14] <svnbot6> r5884 | iblech++ |   * Cleaned up assignment rewriting rules (i.e. my $scalar = @array).

[09:14] <svnbot6> r5884 | iblech++ |   * my @b = @a; @b[...] = ... changed the original @a, fixed.

[09:14] <svnbot6> r5884 | iblech++ |   * my %h = $scalar did only work if $scalar was a Pair; now it works with all

[09:14] <svnbot6> r5884 | iblech++ |     scalars.

[09:14] <svnbot6> r5884 | iblech++ |   * Prelude::JS::Operators -- Added &abs.

[09:14] <svnbot6> r5884 | iblech++ |   * Prelude::JS::Array -- &min and &max (but doesn't work yet correctly).

[10:05] <svnbot6> r5885 | iblech++ | PIL2JS:

[10:05] <svnbot6> r5885 | iblech++ |   * PIL2JS.js -- Fixed bind cycle detection rules (@a[1] := $b; $b := @a[1]).

[10:05] <svnbot6> r5885 | iblech++ |   * Prelude::JS::Array -- Fixed &min and &max, all tests pass:

[10:05] <svnbot6> r5885 | iblech++ |     http://m19s28.vlinux.de/iblech/stuff/not_perm/pil2js-demo/t/builtins/lists/minmax.t.html

[10:05] <svnbot6> r5886 | iblech++ | PIL2JS: Prelude::JS::Array -- Fixed map { [...] }, all tests of

[10:05] <svnbot6> r5886 | iblech++ | flattening_in_map.t now pass:

[10:05] <svnbot6> r5886 | iblech++ | http://m19s28.vlinux.de/iblech/stuff/not_perm/pil2js-demo/t/builtins/lists/flattening_in_map.t.html

[10:21] <wilx> Heh. Looks like iblech is really serious about this :)

[10:21] * theorbtw1 wonders if he'll be able to do the interesting bits of google maps hacking in p6 any time soon.

[10:21] *** theorbtw1 is now known as theorbtwo

[10:26] <Aankhen``> wilx: I should think so... the JS backend is the most advanced out of all the backends supported by Pugs.

[10:27] <castaway> shouldnt it be a parrot backend/whatsit?

[10:27] <Aankhen``> castaway: ?

[10:27] <theorbtwo> No, parrot is a backend.

[10:31] <castaway> Hmm, parrot only runs bytecode, it doesnt turn it into other things? (I guess not, what was I thinking of..)

[10:31] <theorbtwo> It does also turn it into other things... but only as a side-effect, mostly.

[10:33] <theorbtwo> It will turn pasm into x86 asm, for example, but only because it does that anyway, in order to get it to run fast on x86es -- packaging it up into an executable after that was easy, so it does it.

[10:34] <castaway> I see

[10:34] <castaway> (I think)

[10:34] <castaway> I was actually just thinking one can create parrot bytecode from JS, but thats a different problem 

[10:35] <theorbtwo> That's a very different problem.

[10:36] <castaway> right

[10:41] <svnbot6> r5887 | iblech++ | * New test: t/builtins/lists/undef_in_map.t

[10:41] <svnbot6> r5887 | iblech++ |   +map { () } @foo should be 0 (works in normal Pugs, but does not in PIL2JS).

[10:41] <svnbot6> r5887 | iblech++ | * New test: t/builtins/lists/mutating_listops.t

[10:41] <svnbot6> r5887 | iblech++ |   map { $_ = ... }, grep { $_ = ... }, for @foo { $_ = ... } should all work.

[10:41] <svnbot6> r5887 | iblech++ |   Does not work in normal Pugs, passes 5/5 in PIL2JS :):

[10:41] <svnbot6> r5887 | iblech++ |   http://m19s28.vlinux.de/iblech/stuff/not_perm/pil2js-demo/t/builtins/lists/mutating_listops.t.html

[10:41] <svnbot6> r5887 | iblech++ | * PIL2JS: Prelude::JS::ControlFlow, Prelude::JS::Array --

[10:41] <svnbot6> r5887 | iblech++ |   &statement_control:<for>, &map, and &grep all support modifying the array

[10:41] <kgftr|konobi> castaway++ # JS on parrot

[10:41] <svnbot6> r5887 | iblech++ |   they're iterating over now.

[10:43] <castaway> eh, what, me?

[10:44] <castaway> (note to self: the longer the svn commit texts are, the more karma one gets..)

[10:44] <theorbtwo> Yep.

[10:44] <theorbtwo> You even get karma for the blank lines in there.

[10:45] <castaway> nifty, no?

[10:55] <wilx> It works but it is slow.

[10:55] <wilx> Somebody should push the Mozilla guys to make their JS implementation faster :)

[10:57] <castaway> mebbe JS needs a bytecode form too

[10:58] <coral> that'd be nice

[10:58] <theorbtwo> No reason the bytecode form of JS can't be pbc.

[10:58] <coral> castaway: heh!

[10:59] <castaway> pbc?

[10:59] <theorbtwo> Parrot Byte Code.

[11:00] <wilx> @karma iblech

[11:00] <wilx> ?karma iblech

[11:00] <wilx> Hmhm.

[11:00] <castaway> karma iblech

[11:00] <jabbot> castaway: iblech has karma of 337

[11:00] <theorbtwo> top karma

[11:00] <theorbtwo> karma highest

[11:00] <jabbot> theorbtwo: highest has neutral karma

[11:00] <theorbtwo> jabbot, help

[11:00] <jabbot> theorbtwo: Tell me more about that.

[11:00] <castaway> hmm, get Moz to be a parrot vm?

[11:01] <Odin-> That would be interesting.

[11:01] <theorbtwo> ...but at least socialy difficult.

[11:01] <castaway> well except that there are "other browsers" too :)

[11:01] <theorbtwo> No idea how technically difficult.

[11:05] <Aankhen``> perlbot top 10 karma

[11:05] <perlbot> The top 10 karma entries: C: 57, iblech: 19, Yaakov: 11, gaal: 10, stevan: 9, C/C: 9, japhy: 8, putter: 8, integral: 7, autrijus: 7

[11:05] <Aankhen``> jabbot, top 10 karma

[11:05] <jabbot> Aankhen``: Does talking about this bother you?

[11:05] <Aankhen``> Ah well, 'twas worth a shot. ;-)

[11:28] <Aankhen``> Hmm... can I create a class that behaves like a hash, sigil and all included?  Something that works along the lines of: "my %foo = Foo.new();"

[11:31] * Aankhen`` wonders if this might be achieved by passing a different representation name to `CREATE`, as mentioned somewhere in A12.

[11:31] <Aankhen``> ?eval class Foo { method new (*%_) { return ::?CLASS.bless(%_); } }; Foo.new(:a<b>, :c<d>)

[11:32] <Aankhen``> Bleh.

[13:46] * masak has just read chromatic's "Porting Test::Builder to Perl 6" on perl.com

[13:46] <masak> would it be too early to build a pugs Test::Base module?

[13:48] <castaway> is it ever too early? :)

[13:48] <masak> i have no idea, that's the point :)

[13:48] <masak> i would like to see a Test::Base for pugs

[13:49] <masak> (and autrijus would too, i seem to remember)

[13:49] <castaway> well go for it then :)

[13:49] <masak> but i don't know if it's feasible yet

[13:49] <masak> maybe the easiest way to find out is just to try...

[13:50] <masak> i imagine it would be a cross between chromatic's new Test::Builder and ingy's perl5 Test::Base somehow

[13:50] <masak> or rather a rewrite of the latter using the former :)

[15:06] <integral> hmm, is svnbot6 not working?

[15:06] <svnbot6> r5888 | bsmith++ | Added grouping and ranking of nodes to util/importgraph.pl.

[15:06] <svnbot6> r5889 | bsmith++ | Deleting Pugs.Compile.Pugs2 as it is unused, and little more than a skeleton.

[15:06] <svnbot6> r5889 | bsmith++ | It is also obsolete since the new PIL system is now used for compiling.

[15:06] <integral> ah, there is is :-)

[15:06] *** khisanth_ is now known as Khisanth

[15:08] <autrijus> I'll sleep now. :) feedback welcome on the type inferencing proposal before I put it to action tomorrow :)

[15:08] <autrijus> # http://www.nntp.perl.org/group/perl.perl6.language/22519

[15:09] <autrijus> &

[15:16] <integral> that seems nice and comprehensive

[15:38] <masak> every aspect of perl6 seems like a feature slightly too good to be true/too complicated to implement

[15:38] <svnbot6> r5890 | bsmith++ | Added export lists to lots of haskell files.

[15:38] <masak> but OTOH, here's pugs doing most of it already :)

[16:32] <svnbot6> r5891 | bsmith++ | Moved getLibs from Pugs.Prim.Eval to Pugs.Run.

[16:32] <svnbot6> r5891 | bsmith++ | Removed some extra references to Pugs.AST.Internals where Pugs.AST is already

[16:32] <svnbot6> r5891 | bsmith++ | imported.

[16:34] <bline> Pugs.Prime.Evil

[16:59] <brentdax> bline: That's the Python implementation, right?

[16:59] <svnbot6> r5892 | bsmith++ | Added parseNatOrRat function to Pugs.Parser.Number.

[16:59] <svnbot6> r5892 | bsmith++ | Added module exports to Pugs.Parser so only it needs to be imported.

[18:29] <Aankhen``> ?eval class Foo { has $.bar; sub baz () { $.bar = "quux"; $.bar } }; Foo.new.baz

[18:29] <evalbot6> Error: No compatible subroutine found: "&baz" 

[18:29] <Aankhen``> ?eval class Foo { has $.bar; sub baz () { $.bar = "quux"; $.bar } }; Foo.new.baz()

[18:29] <evalbot6> Error: No compatible subroutine found: "&baz" 

[18:29] <Aankhen``> Oops.

[18:29] <Aankhen``> ?eval class Foo { has $.bar; method baz () { $.bar = "quux"; $.bar } }; Foo.new.baz()

[18:29] <evalbot6> \'quux' 

[18:29] <Aankhen``> Hrm.

[18:30] <Aankhen``> Is an attribute without `is rw` still rw for all methods in that class?

[18:32] <Darren_Duncan> it should be

[18:32] <Aankhen``> OK.

[18:32] <Darren_Duncan> I believe is rw is default for attributes

[18:32] <Aankhen``> Ah.

[18:33] <Darren_Duncan> whereas the opposite is default for methods

[18:33] <Aankhen``> Yeh.

[18:33] <Darren_Duncan> if you think about it, attributes are meant to hold data different for each object, so making them read-only by default doesn't make sense

[18:33] <Aankhen``> I guess so.

[18:34] <Aankhen``> But then are they rw outside the class too?

[18:49] <autrijus>     my subtype Duck

[18:49] <autrijus>         has $.half_life

[18:49] <autrijus>         can doom:()

[18:49] <autrijus>         can quake:(() returns Wolfenstein);

[18:49] <autrijus> mmm pretty. :)

[18:50] <Aankhen``> Wha... my last merge altered . for no reason...

[18:50] <autrijus> with svk?

[18:51] <Aankhen``> Yes.

[18:51] <svnbot6> r5893 | Aankhen++ | * HTTP::Headers: fixed small mistake in &:sorted_field_names.

[18:51] <svnbot6> r5894 | Aankhen++ | * HTTP::Message: consistent indentation, more specific declaration of $:headers.

[18:51] <svnbot6> r5895 | Aankhen++ | HTTP::Request::CGI:

[18:51] <svnbot6> r5895 | Aankhen++ | * updated documentation.

[18:51] <svnbot6> r5895 | Aankhen++ | * added $.PARSE_ARGV variable to control whether command-line parameters should be parsed.

[18:51] <svnbot6> r5895 | Aankhen++ | * replaced $:query_string and &query_string with single $.query_string.

[18:51] <svnbot6> r5895 | Aankhen++ | * made declaration for $.query more specific.

[18:51] <Aankhen``> The root directory, rather.

[18:51] <autrijus> svk writes merge tickets as props to .; that's fine (I think)

[18:51] <Aankhen``> OK.

[18:51] <Aankhen``> As long as I didn't break anything. :-P

[18:51] <Aankhen``> That was my first commit from a branch. :-D

[18:52] <autrijus> right, which is I think the only time svk does that

[18:53] <Aankhen``> Works for me.

[18:53] <Aankhen``> Sky seems to be staying up, so I guess that's alright.

[18:54] <autrijus> cool

[18:56] <dudley> what does the colon in foo:() mean?

[18:56] <Aankhen``> dudley: Picks a particular variant of a sub, AFAIK.

[18:56] <Khisanth> adverb?

[18:56] <autrijus> dudley: it's the long name syntax

[18:56] <autrijus> it's usually written as &doom:()

[18:57] <autrijus> come to think about it I should've written that instead.

[18:57] <autrijus> but maybe I should've just written

[18:57] <autrijus> my subtype Duck

[18:57] <autrijus>     method doom () {...}

[18:57] <autrijus> etc

[18:57] <autrijus> not sure. anyway the surface syntax is not the point

[18:58] <autrijus> the point is a way to encode the fact that people often write UNIVERSAL::can() checks in p5 instead of UNIVERSAL::isa()

[18:58] <autrijus> and somehow give .can the same static checking status as .isa

[18:59] <autrijus> (or .does)

[18:59] <dudley> oh, I know, I've just seen it a couple of times before and was curious

[18:59] <autrijus> ah. then yes... &infix:<*>:(Int, Int) selects the variant that can instantiate this signature

[19:00] <Aankhen``> Is the long name notation supported in Pugs?

[19:01] <autrijus> not yet

[19:01] <Aankhen``> OK.

[19:02] <Aankhen``> Can I create a variant of a sub by assigning to that variant, like a normal sub assignment?  Example: &foo:() = &bar; &foo:(Int,Int) = sub (Int $foo, Int $bar) { ... };

[19:02] <svnbot6> r5896 | Aankhen++ | * expanded documentation for HTTP::Query (SYNOPSIS and DESCRIPTION) and HTTP::Request::CGI (SYNOPSIS).

[19:02] <Aankhen``> Gurk.

[19:02] * Aankhen`` bangs forehead on wall.

[19:03] <Aankhen``> I really should check out my changes before I check them in...

[19:06] <autrijus> Aankhen``: I suppose the lhs will fail to lookup first before you attempt to assign to it

[19:07] <Aankhen``> OK.

[19:07] <autrijus> Aankhen``: the canonical way to do that is a "multi" :)

[19:07] <Aankhen``> Yeh, I know.

[19:07] <Aankhen``> It's just that I'd rather replace `multi sub foo () { return bar(); }` with a direct assignment, the same way you alias subs normally.

[19:08] <Aankhen``> s/assignment/binding/

[19:09] <autrijus> nod, as I suspect assigning into &foo is as fun as assiging into \$bar.

[19:14] <svnbot6> r5897 | Aankhen++ | * really expanded DESCRIPTION for HTTP::Query.

[19:16] <Aankhen``> Rest break. &

[19:30] <Aankhen``> ?eval role Foo { ... }; class Bar does Foo { ... };

[19:30] <evalbot6> *** ... - not yet implemented     at <eval> line 1, column 12-16 

[19:30] <Aankhen``> ?eval role Foo { }; class Bar does Foo { ... };

[19:30] <evalbot6> *** ... - not yet implemented     at <eval> line 1, column 36-40 

[19:31] <Aankhen``> ?eval role Foo { }; class Bar does Foo { };

[19:31] <evalbot6> undef 

[19:36] <Aankhen``> How is a slurpy List denoted in the long name of a sub?

[19:43] <svnbot6> r5898 | Aankhen++ | * HTTP::Query: rewrote &param (rw version).

[20:01] <svnbot6> r5899 | Aankhen++ | * HTTP::Request::CGI: changed $r in &BUILD to $self for consistency.

[20:01] <svnbot6> r5899 | Aankhen++ | * HTTP::Request::CGI: small formatting changes; more flexible implementation of &BUILD.

[20:01] <svnbot6> r5900 | iblech++ | PIL2JS:

[20:01] <svnbot6> r5900 | iblech++ |   * PIL::Parser, PIL::Nodes -- Added basic support for Inf, -Inf, and NaN.

[20:01] <svnbot6> r5900 | iblech++ |   * Prelude::JS::Operators  -- Implemented &sqrt, &sign, &abs, &log, &log10,

[20:01] <svnbot6> r5900 | iblech++ |     &int, and &rand. Tests mostly pass:

[20:01] <svnbot6> r5900 | iblech++ |     http://m19s28.vlinux.de/iblech/stuff/not_perm/pil2js-demo/t/builtins/math/

[20:15] <wilx> Heh, interesting, rounding errors in action:

[20:15] <wilx> #   Expected: '1.6094379124341005'

[20:15] <wilx> #        Got: '1.6094379124341003'

[20:15] <wilx> log.t.html

[20:26] <svnbot6> r5901 | Aankhen++ | * added more fields to list of request headers in HTTP::Request::CGI.

[20:27] * Aankhen`` pokes wolverian.

[20:36] <svnbot6> r5902 | Aankhen++ | HTTP::Request::CGI:

[20:36] <svnbot6> r5902 | Aankhen++ | * added $.remote_host and $.remote_addr.

[20:36] <svnbot6> r5902 | Aankhen++ | * updated documentation.

[20:37] <Aankhen``> Has `read` been implemented?

[20:41] <putter> iblech: ping?

[20:45] <Aankhen``> Anyone up for a large porting job? =)

[20:45] <Aankhen``> Well, it's a large distribution, I would only need part of it.

[20:48] <geoffb> A) Porting what to what, B) does this involve large sums of money?  :-)

[20:49] <Aankhen``> The answer to B) is no.

[20:49] <Aankhen``> I can tell you A) in private so that I don't hurt people's sensibilities.

[20:49] <geoffb> ok . . . 

[20:49] <Aankhen``> Hm.

[20:49] <Aankhen``> Actually, nevermind.

[20:49] <Aankhen``> It's not needed after all.

[20:49] <geoffb> :-)

[20:50] <Aankhen``> Though if you're up for it, I'd appreciate ports of Compress::Zlib, Compress::Bzip2 and MIME::QuotedPrint... =)

[20:51] <geoffb> Not that I don't agree, but is `use perl5:...` not acceptable?

[20:52] <Aankhen``> Considering the fact that I am unable to link Perl 5 into Pugs... no.

[20:52] <geoffb> that's odd . . . oh, are you on Win32?

[20:52] <Aankhen``> Yep.

[20:53] <geoffb> sigh

[20:53] <geoffb> I keep trying to make peace with Win32, and it keeps giving me reasons to hate it.

[20:53] <svnbot6> r5903 | iblech++ | * t/builtins/strings/string_interpolation.t: unEVAL.

[20:53] <svnbot6> r5903 | iblech++ | * PIL2JS:

[20:53] <svnbot6> r5903 | iblech++ |   * Prelude::JS::Str -- Made the third argument to &substr optional and made

[20:53] <svnbot6> r5903 | iblech++ |     &substr work with the third argument being negative.

[20:53] <svnbot6> r5903 | iblech++ |   * Prelude::JS::Str -- Implemented &lcfirst, &ucfirst, &chars (of course,

[20:53] <svnbot6> r5903 | iblech++ |     &chars is only a wrapper for JavaScript's "string".length, so it probably

[20:53] <svnbot6> r5903 | iblech++ |     doesn't return the num of chars, but the num of bytes/whatever), &index,

[20:53] <svnbot6> r5903 | iblech++ |     &rindex, &chomp.

[20:53] <Aankhen``> You shouldn't even try.

[20:53] <svnbot6> r5903 | iblech++ |   * Prelude::JS::Operators -- Implemented &chr and &ord.

[20:53] <svnbot6> r5903 | iblech++ |   * t/builtins/strings/ tests mostly pass:

[20:53] <svnbot6> r5903 | iblech++ |     http://m19s28.vlinux.de/iblech/stuff/not_perm/pil2js-demo/t/builtins/strings/

[20:54] <geoffb> Well, I'm trying to make room in my psyche for other things I need to feel strongly about.

[20:54] <geoffb> s/need/would rather/

[20:54] <Aankhen``> Do you use Windows?

[20:55] <geoffb> Occasionally.  Long time ago I was a windows sysadmin.  I came by my hatred honestly.

[20:55] <Aankhen``> Then ignore Windows.

[20:56] <geoffb> Oh, but see, everyone else is using it, so consequently any time I could normally just recommend a simple solution to someone's problem, I always have to deal with the "But I'm using Windows, so that won't work" issue.

[20:57] <Aankhen``> Ah, you have to interact with it, indirectly.

[20:57] <geoffb> When I started writing my Perl/OpenGL articles, the single largest feedback group was "It doesn't work on Win32!"

[20:57] <geoffb> And remaining a publishable author is predicated on lack of negative feedback . . . .

[20:57] <geoffb> nodnod

[20:58] <Aankhen``> Welp, I use Windows everyday.

[20:58] <Aankhen``> I content myself with the knowledge that by this time next year, I won't have to.

[20:58] <Aankhen``> (then I can just use it for games)

[20:58] <geoffb> Oh?  What's changing?

[20:58] <Aankhen``> My family is moving abroad.

[20:58] <Aankhen``> Hence a new computer.

[20:59] <geoffb> one of your choice, I take it?

[20:59] <Aankhen``> Oboyoboyoboy I drool everytime I think of hardware-based virtualization.

[20:59] <geoffb> heh

[20:59] <Aankhen``> Yeah, we'll each get individual laptops, plus I get a desktop.

[20:59] <Aankhen``> Gonna work out pretty expensive.

[20:59] <geoffb> Aankhen`` is clearly not short of cash . . . 

[20:59] <geoffb> nod.

[20:59] <Aankhen``> Believe it or not, this comes under "necessities".

[21:00] <geoffb> ?!?  Family of computer consultants?

[21:00] <Aankhen``> Each member of my family -- that is my mother, my sister and me -- has something or the other that is important and has to be done on the computer.

[21:00] <Aankhen``> Right now, we have one desktop, which basically belongs to all of us, and one laptop, which was gifted to my mother.

[21:01] <Aankhen``> The way it works is, my mother's not particularly keen on using the laptop for now, so my sister uses the laptop and I use the desktop.

[21:01] <Aankhen``> However, my mother has work coming up which will require the laptop extensively.

[21:01] <Aankhen``> So once again, the flames are going to fly.

[21:01] <geoffb> wheee

[21:02] <Aankhen``> Aaanyway.

[21:02] <Aankhen``> I want it to be 2007 right now.

[21:02] <obra> why?

[21:03] <Aankhen``> Four-core processors from AMD with hardware-based virtualization. =)

[21:05] <Aankhen``> I just need two quad-core processors, with three monitors and six graphics cards, and appropriate storage & memory.  Is that so much to ask?

[21:05] <geoffb> three cards and six monitors?

[21:05] <geoffb> or are you going to SLI each pair?

[21:05] <svnbot6> r5904 | iblech++ | * Usual svn props.

[21:05] <svnbot6> r5904 | iblech++ | * PIL2JS:

[21:05] <svnbot6> r5904 | iblech++ |   * Prelude::JS::Operators -- Implemented &hex, all tests pass:

[21:05] <svnbot6> r5904 | iblech++ |     http://m19s28.vlinux.de/iblech/stuff/not_perm/pil2js-demo/t/builtins/hex.t.html

[21:05] <svnbot6> r5904 | iblech++ |   * Now most tests in t/builtins/ pass, except io/, of course. Pondering using

[21:05] <svnbot6> r5904 | iblech++ |     JSAN's HTTP.Request or so to fake simple things like file-open, slurp, etc

[21:05] <svnbot6> r5904 | iblech++ |     (slurp "foo" would GET http://cur_server/cur_path/foo then)...

[21:05] <Aankhen``> SLI.

[21:06] <Aankhen``> Though actually, I could make do with "just" four. :-P

[21:06] <Aankhen``> Assuming those processors have Pacifica, I could run Gentoo, Windows and OS X simultaneously.  One monitor for each, one graphics card for each (two for Windows since it has all the games).

[21:07] <geoffb> Dare to dream, Aankhen``, dare to dream.

[21:07] <Aankhen``> Oh, I do. :-D

[21:09] <geoffb> Hmmm, very few Debian testing updates hitting my boxen recently -- I'm guessing somethings getting backed up, and I'm going to come back from OSCON to find that every box needs to install 200 updated packages.

[21:09] <Aankhen``> Heh.

[21:10] <autrijus> I can't believe I spent 3 hours on journaling :-/

[21:11] <Aankhen``> Is it up?

[21:11] <Aankhen``> Oho!

[21:11] <autrijus> it's 5am now... really need to sleep. journal finally up, yes.

[21:11] <Aankhen``> o_O

[21:11] <Aankhen``> Sleep well.

[21:11] <geoffb> good night, autrijus, sleep well

[21:11] <autrijus> :)

[21:11] <Aankhen``> Mmm, I need to sleep soon too.

[21:15] *** Limbic_Region_ is now known as Limbic_Region

[21:19] <brentdax> I am somehow unsurprised that Autrijus is the most active committer in open source.

[21:19] <geoffb> Where did you see this stat, brentdax

[21:19] <geoffb> ?

[21:20] <Aankhen``> Whoa.

[21:20] <brentdax> CIA.

[21:20] <Aankhen``> The cleanest places on Earth are IC manufacturing facilities.

[21:20] <brentdax> http://cia.navi.cx/

[21:21] <Aankhen``> s/manufacturing facilities/fabrication plants/

[21:21] <brentdax> Hey, every other geek environment is littered with soda cans and Twinkie wrappers, we have to make up for that somewhere.

[21:21] <Aankhen``> Apparently an IC fabrication plant is 10,000 times cleaner than a hospital operating room.

[21:28] <Aankhen``> G'night.

[21:29] <Juerd> Greetings from What The Hack, in Liempde, the Netherlands.

[21:30] <brentdax> Greetings, Juerd.

[21:30] <Juerd> It's really great here; lots of really interesting conversations and presentations

[21:30] <brentdax> (From a house in Southern California with broken air conditioning.  Argh.)

[21:31] <Juerd> We're experiencing heavy showers outside

[21:31] <Juerd> I'm in a big tent.

[21:31] <Juerd> It's more a hall than a tent.

[21:31] <brentdax> Hmm...if I rename that method with the weird problem, it goes away.  Does "resolve" have any special meaning to Pugs?

[21:32] <brentdax> (or rather, if I rename the method it's calling so they don't share a name.)

[21:32] <Juerd> There is one bit of sad news, though, everyone here I've spoken with about Perl, thinks that Perl is practically dead.

[21:32] <Juerd> That's not a good start for Perl 6, the name staying the same.

[21:32] <Juerd> Perl 6 probably has a greater chance of survival with a better name. "Perl" is unfortunately tainted.

[21:34] <Limbic_Region> . o O ( Topaz2 )

[21:34] <brentdax> Unlike the language whose acronym originally expanded to "Pretty Home Pages"?

[21:34] <Limbic_Region> Juerd - you at the "What the hack" conference?

[21:35] <Limbic_Region> nevermind, me reads back a bit and sees that Juerd already said this

[21:36] <Juerd> Limbic_Region: Yes.

[21:36] <brentdax> I think people are thinking of Perl 6 as vaporware, if they know about it at all.  A release will change their mind.

[21:36] <Juerd> brentdax: No, I've met only a few PHP enthousiasts

[21:36] <Juerd> brentdax: We're clueful people here.

[21:36] <brentdax> Heh.

[21:36] * Limbic_Region wonders if Juerd is in a hammock too - http://www.cnn.com/2005/WORLD/europe/07/29/what.the.hack.ap/index.html

[21:37] <Juerd> brentdax: No, people are actually fairly confident that it will eventually happen and be a good language. It's just that Perl now has a VERY bad reputation amongst the hackers here, which will have its effect on Perl 6 too.

[21:37] <geoffb> OOC, what has a good rep?

[21:40] <geoffb> Wow, pugs REALLY doesn't like heredocs in a big program -- it goes to 100% CPU and seems to hang

[21:40] <Juerd> Ruby and Python have high karma

[21:40] <geoffb> Heh.

[21:41] <Juerd> Limbic_Region: No, I haven't found an available hammock yet :)

[21:41] <brentdax> Ruby, at least, deserves its karma.

[21:41] <Juerd> Python unfortunately has higher

[21:42] <geoffb> sigh,  no accounting for taste

[21:43] <Juerd> But it really did surprise me to learn how low exactly people think of Perl

[21:44] <Juerd> And contrary to what I'm used to on IRC, people actually have good argumentation

[21:44] <geoffb> So what are these good arguments?

[21:44] <Juerd> We all know they're right, and that's why Perl 6 is being bilt. But still, the name "Perl" carries bad karma :(

[21:44] <Juerd> s/bild/build/

[21:45] <Khisanth> we do?

[21:45] <Juerd> Yes. We're not building Perl 6 because 5 suffices.

[21:45] <Juerd> Perl 5 does not suffice

[21:45] <Juerd> geoffb: Let me try and formulate that later, when I get back from France in a week

[21:45] <Juerd> geoffb: It's too much for now, over a very slow link

[21:45] * Khisanth agrees that there is always room for improvement

[21:46] <geoffb> Juerd, fair enough

[21:46] <geoffb> I'll hold you to that.  :-)

[21:46] <Juerd> Yes, but when there is already a language that does things better, there's not just ROOM for improvement, you're' expected to actually improve. And quickly too.

[21:47] <Juerd> This is the main problem, as Perl 5 does not allow for quick improvements to keep up with the other dynamic languages

[21:48] <Juerd> But still, the most often heard argument is that Perl is ugly and requires too highly educated people, which is very (too) expensive for many companies.

[21:48] <brentdax> Switch.pm would not be such a Herculean effort in Perl 6.  (I mean, besides the fact that it'll be built in anyway.)

[21:49] <Khisanth> that last argument sounds very silly without expanding

[21:49] <geoffb> Ugly -- I know people who feel that way, I don't agree, but whatever.  Requiring too highly educated people so its expensive?  Well that's just being completely clueless about the value of smart people.

[21:49] <Juerd> I do agree that Perl is ugly. Ugly in the way that lots of interpunction is needed without it actually making it more elegant

[21:49] <brentdax> The value of a hacker is...the square, maybe the cube, of their skill level.

[21:49] <Khisanth> ugly or not is an opinion :)

[21:50] <Juerd> Do note that people here do use Perl a lot.

[21:50] <brentdax> Whereas the price of a hacker rises more or less linearly with skill.

[21:50] <geoffb> I cannot help that companies think that it is cheaper to higher unskilled labor, but I find it as silly as Paris fashion.

[21:50] <Juerd> They just can't use th^H^Hit at their jobs

[21:50] <Juerd> Except the lucky few who do system administration

[21:51] <Juerd> Perl isn't used much for building applications, or even web based applications

[21:51] <geoffb> The last two web-related jobs I had were done in Perl -- HTML::Mason, as a matter of fact; Amazon runs on Mason, etc.  What more do these people want?

[21:52] <Juerd> How many NEW application projects are built with Perl?

[21:52] <Juerd> And how many in Python and PHP?

[21:52] <Juerd> The sad fact is that "we"'re losing the battle. 

[21:53] <geoffb> Honestly, I dunno -- but certainly enough to keep CPAN bulging at the seams.  And using PHP and Python because they are the new things is like using Java a few years ago.

[21:53] <Juerd> Perl 6 can be a great comeback, but people I spoke with fear that it will be seen as a new version of the language that has a bad name

[21:53] <obra> See also rails.

[21:53] <geoffb> fair enough

[21:53] <integral> the BBC use it,  their single-signon web app was new

[21:53] <Juerd> While when "marketed" as a *new* language, it would have a great change^H^Hce of surviving

[21:53] <Juerd> Well, CPAN is nice, but crap.

[21:54] <brentdax> Crap how?

[21:54] <obra> evalbot, start a flame war

[21:56] <geoffb> ?eval '*dons flame-retardant outfit*  FLAME ON!'

[21:56] <evalbot6> '*dons flame-retardant outfit*  FLAME ON!' 

[21:58] <Juerd> brentdax: The modules themselves are

[21:58] <Juerd> bre	Of course, I'm now generalizing

[21:58] <Juerd> People don't know well enough that CPAN is an open system

[21:59] <Juerd> And many people expect quality, because it all looks so official, documentation being available in a central place and all.

[21:59] <Juerd> Some even wonder why the Perl modules are so diverse in API and see a relation to PHP in that respect.

[21:59] <brentdax> So people don't look in the FAQ, therefore CPAN sucks.

[22:00] <geoffb> <clkao>pugs sucks, it misplaces error messages for loops with parsefail contents</clkao>

[22:00] <Juerd> I've tried very hard to explain how it works, and was able to get the message across, but I am quite pessimistic because I have to admit that in general, people think badly about perl :(

[22:00] <geoffb> brentdax, sadly, people don't read

[22:00] <Juerd> brentdax: Peolp edon't read. That's something we, as the Perl community, have to get used to.

[22:01] <Juerd> We're no longer in the world with only RTFM'ing hackers. Only references are still used much. :(

[22:01] <Juerd> Right here, at the WTH infodesk, we experience the same thing

[22:01] <integral> hmm, does perl need to move out of that world though?  Doesn't it work very well where it is,  and Java and Python very well where they are in the world of non-manual readers?

[22:02] <Juerd> We have many signs with lots of different information. There are at least 40 diifferent pages stuck to the walls.

[22:02] <Juerd> People no longer read them, because it's way too much, and asking is easier.

[22:02] <Juerd> In other words: our attempt to answer FAQs on paper, really did fail.

[22:02] <Juerd> integral: It works very well,  but not if we want it to compete (unquote) with the other languages

[22:03] <integral> why do we want it to compete?

[22:03] <integral> Does any of the "quality" of CPAN comes from the fact that there's not a wider audience using it?

[22:03] <Juerd> Several reasons

[22:06] <Juerd> I'm not sure what quality you're referring to

[22:06] <Juerd> CPAN has some really brilliant and great modules, of course.

[22:07] <Juerd> But the majority is not much better than the available PHP copy-and-paste repositories :)

[22:09] <Juerd> And stuff like magic ARGV using 2-arg open is really hyped as very insecure here

[22:09] <Juerd> And well, of course they're right

[23:45] * brentdax wages a protracted battle against apathy.

[23:50] <ayrnieu> Don't fight it.  Just make sure you're apathetic about the right things.

[23:50] <brentdax> My SoC project is not one of the right things, unfortunately.

