[00:00] <mugwump> it's still early in Taiwan

[00:00] <putter> ;)

[00:00] <putter> time to read the traits paper...

[00:43] *** _metaperl_ is now known as _metaperl

[00:59] *** _metaperl_ is now known as _metaperl

[01:14] <_metaperl> my perl mongers talk on hangman.p6 will commence in 46 minutes: http://www.metaperl.com/talks/p6/hangman-elucidated/

[01:22] <mugwump> nice looking talk, _metaperl 

[01:22] <_metaperl> mugwump, thanks

[01:29] <stevan> _metaperl: I agree w/ mugwump

[01:29] <stevan> :)

[01:29] <_metaperl> :) great. glad to help out the p6 movement in my own way

[01:31] <revdiablo> if anyone's interested, I made a greasemonkey script to re-sort the www.nntp.perl.org post listings

[01:31] <revdiablo> makes it sort of threaded, at least easier to follow the threads than it was

[01:55] <stevan> horray,.. openfoundry is back

[01:57] <wilx> ~_~

[01:57] <wilx> I forgot to turn off my speakers befire I went to sleep and my mIRC beeps on notice.

[01:57] <wilx> It woke me up :/

[01:58] <stevan> sorry

[01:58] <wilx> 0357

[01:58] <wilx> Heh.

[01:58] <stevan> shhhhh wilx is sleeping :)

[01:58] <wilx> np

[01:58] <wilx> My fault.

[02:01] *** autrijus changes topic to: OpenFoundry back, commit at will | pugscode.org <Overview Journal Logs> | pugs.kwiki.org

[02:02] <autrijus> hopefully stevan will still have enough sanity to update ChangeLog :)

[02:03] <stevan> TEst::Builder now parses :)

[02:03] <stevan> autrijus++ # cant stop him

[02:03] <autrijus> that's not saying it works :)

[02:03] <stevan> I know

[02:03] <stevan> but its closer then it was before

[02:04] <stevan> :)

[02:04] <autrijus> :)

[02:04] <stevan> I have a test for you too

[02:04] <stevan> I am going to commit once this build finishes

[02:04] <stevan> method chaining

[02:04] <stevan> $foo.bar().baz() was not working

[02:04] <stevan> could not find &baz was the error

[02:05] <autrijus> right. I even know why

[02:05] <stevan> cool

[02:05] <autrijus> basically invs needs to be reduced before findSub.

[02:05] <autrijus> otherwise can't know the exact type of $foo.bar() to lookup baz with

[02:06] <autrijus> but it's a nontrivial change -- and not at all sure what needs to happen when there are two .baz imposing different context to its inv

[02:06] <stevan> ok

[02:06] <autrijus> hm. maybe we can do away by declaring the correct return type in ".bar" 

[02:06] <stevan> well I will commit the test

[02:06] <autrijus> then use that type in the mmd

[02:06] <autrijus> but yeah, just commit the test

[02:07] <stevan> I dont /need/ it

[02:07] <stevan> I would just /like/ it :)

[02:07] <autrijus> :)

[02:09] <stevan> so how useful to you is this Meta-Model stuff mugwump and I are doing

[02:09] <autrijus> extremely

[02:09] <stevan> ok

[02:09] <stevan> good

[02:09] <stevan> its fun

[02:09] <stevan> meta-meta-hacking :)

[02:09] <autrijus> :)

[02:10] <stevan> I actually now have a reason to read my metaclass book

[02:10] <autrijus> without it I can't delta with parrot and nudge leo to fix things :)

[02:10] <autrijus> and I'll probably backport it to Class.hs 

[02:11] <autrijus> down to 66 failed, 7 unexpected success

[02:21] <crysflame> heh

[02:21] <crysflame> you woke wilx up

[02:21] <crysflame> that's just.. cool

[02:21] <crysflame> not for wilx but still :)

[02:25] <stevan> it must have sounded like wilx's computer was going nuts too

[02:26] <stevan> all those notices one after the other :)

[02:27] <stevan> oh autrijus, one other request if you please :)

[02:27] <stevan> I need some way to identify objects as unique

[02:27] <stevan> =:= would be nice

[02:27] <stevan> but baring that

[02:27] <stevan> maybe some kind of hex address like perl5 does

[02:28] <stevan> and if thats not possible, I can hack something myself for now 

[02:30] <crysflame> should all instances of a singleton object identify as the same unique object?

[02:30] <stevan> yes

[02:30] <stevan> that is the definition of a singleton really

[02:31] * stevan goes off to read more of his metaclass book :) 

[02:31] <stevan> autrijus++

[02:31] <stevan> autrijus++

[02:31] <stevan> autrijus++

[02:32] * stevan dreams of a day when he can code /only/ in perl6 :)

[02:35] <mugwump> and Haskell!  :)

[02:40] <autrijus> stevan: chaining.t should now pass. I'm smoking to make sure I didn't break things before I commit

[02:44] <mugwump> chain smoking!

[02:45] * crysflame remembers the [email@hidden.address] debate fondly

[02:45] <mugwump> summary, crysflame ?

[02:45] <mugwump> or a case of "you had to be there sitting on the sidelines" ?  :)

[02:46] <crysflame> "smoking is bad"

[02:46] <crysflame> "it's a pun, laugh

[02:46] <crysflame> "no! i refuse to laugh"

[02:46] <crysflame> end summary

[02:47] <crysflame> http://use.perl.org/article.pl?sid=01/02/19/1321228

[02:47] <crysflame> "After a small dispute over the naming scheme, the 'smokers' list was renamed to 'daily-build' instead. 'smokers' was retained as an alias, however. "

[02:48] <crysflame> "Of course, as with all good ideas, it was nearly drowned out by lots and lots of trivial bickering. Schwern had called the mailing list [email@hidden.address] and the smoke testing software SmokingJacket. This produced objections from non-smokers and recovering smokers, and started a long and tedious objection - counterproposal cycle. Eventually, the list was given an alias of [email@hidden.address]
[02:48] <crysflame> officially, the list is daily-build with an alias smokers@.

[02:49] <mugwump> I love the title of that use.perl.org article - "Help Smoke Camels"

[02:53] * mugwump is a sucker for|of clove cigarettes

[02:58] <autrijus> stevan: you could've used 

[02:58] <autrijus> $_foo3 =:= $_foo2 =:= $_foo1 =:= $foo

[02:58] <autrijus> and anyway, =:= is there now.

[02:58] <autrijus> committing

[03:00] <mugwump> so, does 7 =:= 7 ?

[03:00] <autrijus> sure.

[03:00] <autrijus> all pure values are identical to themselves.

[03:01] <mugwump> this implies some distinction between pure things and complex things

[03:01] <autrijus> sure. one can be written to.

[03:01] <mugwump> the reason I ask is it makes an important difference when writing the Set class

[03:02] <mugwump> but does "7" =:= 7, say?

[03:02] <autrijus> woot, chaining.t all passes

[03:02] <autrijus> pugs> "7" =:= 7

[03:02] <autrijus> bool::false

[03:02] <autrijus> you can try it for yourself :)

[03:02] <mugwump> :P

[03:02] * mugwump svn up's

[03:03] <mugwump> So, anyway, I was contemplating the difference between a Hash and a Map

[03:03] <autrijus> in haskell, Hash is destructive, Map is not

[03:04] <mugwump> thinking, a Hash is a Map where the keys must be stringifyable, and no two objects that stringify to the same thing can be used for different keys

[03:04] <mugwump> Whereas a Map is where the object's uniqueness is the key

[03:04] <mugwump> ie, Map is to =:=, as Hash is to ==

[03:04] <mugwump> or eq

[03:06] <mugwump> Which leads me to ponder whether a Map *can* be implemented in terms of a Hash

[03:07] <autrijus> hm. Map requires Ord

[03:07] <autrijus> (which implies Eq)

[03:07] <autrijus> and Hash requires a (key -> Int32)

[03:07] <mugwump> You sort of need that Map-ness to implement a set..

[03:08] <autrijus> (which doens't imply anything)

[03:08] <mugwump> ok, so a hash only requires a hashing method, not stringify?

[03:08] <autrijus> right.

[03:09] <mugwump> Then it could still use =:= on the key

[03:09] <mugwump> And just like you can have two entries in a hash that hash to the same value, you could have two keys that stringify to the same value if they are unique objects

[03:09] <autrijus> sure.

[03:10] <autrijus> but you need a general (Object -> Int32) thing first

[03:10] <mugwump> However, that raises the issue of how you refer to those entries.  You can't just pull them by string anymore

[03:10] <mugwump> Object -> int32 is easy, just use the pointer address and don't tell anyone (or some other useless identifier)

[03:10] <autrijus> well then, you can pull them out by their memory address ;)

[03:11] <mugwump> no, because that's the hash value, which is useless for pulling values out from a user interface point of view

[03:12] <mugwump> This has the implication of losing one trick - returning strings that are actually objects with a stringify method

[03:12] <mugwump> as used by, say, URI

[03:12] <mugwump> You would have to explicitly stringify the use

[03:13] <autrijus> right.

[03:15] <mugwump> so, what about tacking 'out of band' stuff onto strings

[03:15] <mugwump> eg my $foo = '0' but true;

[03:15] <mugwump> is that a pure and simple scalar, or a deviant?

[03:16] * mugwump starts up his shiny new pugs build

[03:17] <mugwump> or is it simply a syntax error

[03:17] * mugwump hmms

[03:18] <autrijus> "0 but true" is always an Int object

[03:18] <autrijus> unlike "0" which is an int value

[03:19] <mugwump> right

[03:22] * mugwump makes a start on t/operators/identity.t

[03:28] <putter> Hi folks.  I've been porting the Perl6::Rules test files to (current) p6.

[03:28] <putter> It's time for a checkin.  Other eyes, time passing, and not sure I'll be able to work on it tomorrow.

[03:30] <putter> But I can't actually run any of it.  My cvs-ghc HEAD simply isnt building, so rules are still a nogo.

[03:30] <autrijus> check them into t/rules/Disabled first?

[03:30] <putter> So I was thinking of t/rules/Disabled/from_perl6_rules.  Comments?

[03:30] <putter> ;)

[03:31] <autrijus> sure, that worksforme

[03:31] <putter> will do.

[03:31] <autrijus> we're close to 5000 tests :)

[03:31] <putter> :)

[03:32] <putter> well, here come another 5k, though almost all of that is unicode.

[03:32] <autrijus> wow.

[03:33] * autrijus { for -> $impact {} }

[03:34] <putter> unfortunately, it was ancient (apr '04), so the p6... wasn't.

[03:37] <autrijus> we're down to a respectable 32 failures in 11 tests

[03:39] <crysflame> happy r3000

[03:40] <autrijus> :)

[03:41] <stevan> autrijus: should I update the changelog?

[03:41] <stevan> or wait a little longer 

[03:42] <autrijus> stevan: please do update it

[03:42] <autrijus> no major features is planned before 6.2.3.

[03:43] <autrijus> we already delayed for one week to get classes and rules in :)

[03:43] <stevan> excellent

[03:43] <autrijus> what's left is fixing the 7 or so regressions

[03:43] <autrijus> and ship :)

[03:43] <putter> the tests required extensive rewriting.  I expect some of them are buggy. ah well.

[03:44] <autrijus> putter: it's important to get started :)

[03:44] <putter> *nod*

[03:44] <autrijus> stevan: also, if you have some time, try look into why golf.t is failing

[03:44] <autrijus> it may be the golf script themselves are bad.

[03:44] <autrijus> not sure.

[03:44] <autrijus> bbl. :) &

[03:45] <stevan> ok

[03:45] * stevan just ate a handful of chocolate covered espresso beans :)

[03:45] <stevan> I should be good for a few hours

[03:47] <putter> ok, thanks folks.  good night.

[03:47] <stevan> 'night putter

[03:58] <f0rth> hello

[03:58] <stevan> hullo

[03:58] <crysflame> hi, f0rth

[03:59] <stevan> crysflame: should that be f0rth, hi

[03:59] <stevan> :)

[03:59] <crysflame> heh

[04:00] <f0rth> switched to wrong channel to test bot ^^"

[04:03] <stevan> autrijus: oh, I almost forgot

[04:03] <stevan> classes seems to be file scoped

[04:04] <mugwump> ouch

[04:04] <stevan> so class defined in MyClass.pm is not available when you use MyClass;

[04:04] <stevan> mugwump: yeah, its a bugger

[04:05] <stevan> mugwump: BTW - my metaclass book is proving helpful,... although they are only talking about meta-classes,.. not meta-meta classes

[04:05] <stevan> but it is helping me get my head around this more

[04:09] <mugwump> the great thing is that we can actually start at either the M3 or M2 layer

[04:09] <stevan> mugwump: I would like to get what we have already done into real objects

[04:10] <stevan> then maybe see what we have

[04:10] <mugwump> ok.  I'm just in the process of releasing this site I've been working on today and yesterday, should clean up this week's professional work :)

[04:10] <stevan> btw - are you planning on building a set class?

[04:10] <mugwump> yes

[04:10] <stevan> ok

[04:10] <stevan> good

[04:11] <scw> revdiablo: thanks for updating debian/ :) I was totally occupied these days

[04:13] <revdiablo> scw: no problem, I only built the debian package 10 times before noticing. :)

[04:25] <stevan> autrijus: changelog updated :)

[04:53] <stevan> hmmm, it seems like objects are destroyed a little too quickly at times

[04:53] <stevan> writing a test

[04:57] <stevan> actually maybe not

[04:57] <stevan> hmmm

[05:01] <crysflame> write the test anyways

[05:01] <stevan> crysflame: its not the issue

[05:01] <stevan> its very hard to isolate this

[05:02] <stevan> however @array_of_foo_objects[0].bar() does not work

[05:02] <stevan> but I suspect that is a known issue

[05:03] <crysflame> huh

[05:03] <stevan> it is probably related to the method chaining issue

[05:03] <stevan> (which is mostly fixed)

[05:04] <stevan> it is not easy to know what @array_of_foo_objects[0] will be,... and therefore hard to find the compatible &bar method

[05:08] <Khisanth> in "- return map {.4.} sort {.3.} grep {.2.} map {.1.}" from http://svn.openfoundry.org/pugs/modules/PORTING_HOWTO what are all those .s for?

[05:17] * mugwump umms and ahhs about whether to use junctions or hashes to implement the Set class

[05:33] <stevan> mugwump: junctions would be cooler, but hashes might be easier

[05:33] * stevan goes off to sleep, back in ~8 hours &

[05:37] <f0rth> and now ext/Set/Makefile.PL is broken?

[05:46] <mj41> *** Error: Can't locate Perl6/MakeMaker.pm in @INC

[05:59] <mj41> f0rth: r3051 fixed?

[06:01] <f0rth> yes, fixed :D

[06:43] *** chady_ is now known as chady

[07:28] <gaal> ./pugs.exe -e 'my @a = <1 2 3 4>;map { $_ += 1 }, (@a)'

[07:28] <gaal> *** Error: Can't modify constant item: VNum 2.0 at -e line 1, column 25-33

[07:28] <gaal> this is a bug, isn't it? map's $_ should be rw like for's, no?

[07:46] *** Aankh|Clone is now known as Aankhen``

[08:30] <osfameron> (Jonathan Worthington)++ # Win32 pugs build

[08:45] <osfameron> yay, pugs interpreter doesn't interpret each statement in an eval!

[08:45] <osfameron> my $x=123

[08:45] <osfameron> say $x;   # still 123

[08:58] <mj41> congratulations ... 737/4914 subtests failed, 85.00% okay.

[08:58] <mj41> WinXP, r3051

[09:03] <mj41> history ... r1600 - 1308/4135 subtests failed, 68.37% okay.

[09:04] <osfameron> Hmmm, tried to build pugs (WinXP nmake, GHC 6.4 binary, no parrot) and get

[09:04] <osfameron> makefile(414) : fatal error U1087: cannot have : and :: dependents for same target

[09:09] <Juerd> Perhaps try cygwin, with a real make?

[09:10] <mj41> my nmake is ok .... http://xrl.us/ff9b

[09:10] <osfameron> Juerd: you don't want pugs to run on Windows natively?

[09:11] <Juerd> I personally don't really care :)

[09:15] <osfameron> GNU Make version 3.78.1 also fails with makefile:307: *** multiple target patterns

[09:18] <mj41> parrot only with mingw32-make and pugs only with nmake :-)

[09:18] * osfameron curses his lack of make-fu

[09:18] <osfameron> ah

[09:32] <f0rth> I am playing Net::IRC and found that 'normalize (split " ", $event<rest>)[0]' on line 147 is incorrect now

[09:32] <Juerd> f0rth: [...][0]

[09:32] <f0rth> normalize((split " ", $event<rest>)[0]) is ok

[09:33] <Juerd> Oh, wow, did that break?

[09:33] * Juerd upgrades

[09:33] <Juerd> I'll have pugs built an an hour :)

[09:35] <f0rth> build 7 times today until now  :p

[09:43] <f0rth> a question from logbot.p6, the result of rx:P5/^\001ACTION (.*)\001?$/ includes the last \001, is that correct?

[09:44] <f0rth> or removing the "?"?

[09:45] <Juerd> It is correct, I think

[09:46] <Juerd> CTCP is enclosed in \cA\cA, but the second is sometimes not sent by stupid clients

[09:47] <f0rth> so that's the reason, thanks :)

[09:52] <f0rth> the second one is always printed now

[10:05] <autrijus> f0rth: want committer bit to fix this?

[10:11] <f0rth> I always generate C-like code :)

[10:11] <autrijus> that's fine :)

[10:12] <Juerd> f0rth: Let fixing that up to others then :)

[10:12] <Juerd> A simple "XXX - restyle" is a good indicator

[10:12] <autrijus> fixed, btw.

[10:13] <Juerd> autrijus: Why do arrayrefs .perl-ize as \()?

[10:14] <autrijus> Juerd: no good reason at all

[10:14] *** broquaint_ is now known as broquaint

[10:14] <Juerd> autrijus: Can it be []? That's somewhat (a lot) easier to read, especially when combined with () :)

[10:15] <webmind> ([7,8,0], [4,5,6], [1,2,3]); ?

[10:16] <Juerd> rather than (\(7,8,0), \(4,5,6), \(1,2,3))

[10:16] <autrijus> Juerd: I can do that, but you have to fix the failing tests that tests .perl for me :)

[10:17] <Juerd> autrijus: Sure

[10:17] <Juerd> autrijus: { x => $x + $dx, y => $y + $dy } is parsed as a sub - on purpose, or bug?

[10:19] <autrijus> a bug. tested, even

[10:19] <Juerd> There are exactly two occurrences of \() with .perl, in tests

[10:19] <Juerd> So that's doable :)

[10:19] <autrijus> x => 3+4  currently parses a (x=>3)+4

[10:19] <Juerd> Ahh

[10:19] <Juerd> So adding parens to ($x+$dx) oughta do the trick for now?

[10:19] <autrijus> yeah

[10:20] <Juerd> (I'm avoiding "hash" now)

[10:20] <autrijus> and ($y+$dy)

[10:20] <autrijus> ok, [] prettification is in

[10:20] <autrijus> r3056

[10:20] <Juerd> hash is .perl-ized as \(..., ...)  # stub?

[10:20] <Juerd> Thanks

[10:22] <autrijus> np

[10:22] <Juerd> Hm, no, it's not the hash that's .perl-ized like that. Weird.

[10:22] <Juerd> autrijus: Same suggestion for hashes: {} :)

[10:22] <Juerd> And pairs: =>

[10:23] <Juerd> So that .perl is actually perl code :)

[10:23] <autrijus> ok, ok.

[10:23] <Juerd> I'm currently mixing arrays, hashes and pairs

[10:23] <Juerd> And only the past few minutes I've began to understand that the output isn't wrong at all :)

[10:23] <Juerd> Just a little surprising

[10:24] <Juerd> (Though I don't know if an arrayref can be used as pair or hash)

[10:24] <autrijus> all done. committing

[10:24] <autrijus> (you'll have much more to fix!)

[10:27] <autrijus> r3057. please fix away :)

[10:29] <Juerd> Will do

[10:29] <Juerd> autrijus: I'm getting weird results for nested loops - any attempt to shorten the code unbreaks the code

[10:30] <Juerd> Or, perhaps not

[10:30] <Juerd> While you're fixing stuff, fix my brain too please :)

[10:30] <autrijus> sure, send the source of your brain to p6c

[10:30] <autrijus> I'll see what I can do

[10:36] <Juerd> autrijus: I have a case of nested for loops, the inner body being { say ...; ... and next; }, somehow the say isn't executed

[10:37] <Juerd> Ahh

[10:37] <Juerd> autrijus: if I have 4 nested for loops, "next" in the 4th operates on the 3rd

[10:38] <autrijus> .. wtf?

[10:38] <autrijus> check in a test please :)

[10:38] <Juerd> First I'm recompiling pugs and fixing existing tests

[10:38] <autrijus> "make unoptimised" is your friend, btw.

[10:39] <Juerd> ok

[10:40] <Juerd> ./pugs -e'for 1..3 -> $a { say "a = $a"; for 1..3 -> $b { say "b = $b"; next } }'

[10:42] <Juerd> Wow

[10:42] <Juerd> There isn't a single test that tests hashes or arrays based on .perl's output

[10:42] <Juerd> There's one occurrence of \(, and that's for a junction

[10:53] <autrijus> Juerd: fixed... the bug is caused by one less indentation level than needed

[10:53] <autrijus> a simple >> in vim fixed it ;)

[10:53] <autrijus> isn't significant whitespace great?

[10:57] <Juerd> No!

[10:57] <Juerd> Well, significant whitespace is okay. Significant indentation is not :)

[10:59] <autrijus> and next.t now passes :)

[11:00] <Juerd> Yep :)

[11:03] <Juerd> a[f[k[p<[ulqv]>?|g<[blchm]>?|l<[qhmr]>?|q<[uvmrw]>?]?|b[g<[lchm]>?|c<[hdi]>?|h<[lmdin]>?]?|g[l<[pqhmr]>?|c<[hdi]>?|h<[mdin]>?|m<[qrins]>?]?|l[p<[uqv]>?|q<[uvmrw]>?|h<[cmdin]>?|m<[rins]>?|r<[vwnsx]>?]?]?|b[g[k<[plq]>?|l<[pqhmr]>?|c<[hdi]>?|h<[mdin]>?|m<[qrins]>?]?|c[h<[lmdin]>?|d<[iej]>?|i<[mnejo]>?]?|h[l<[kpqmr]>?|m<[qrins]>?|d<[iej]>?|i<[nejo]>?|n<[rsjot]>?]?]?|g[k[p<[ulqv]>?|l<[qhmr]>?|q<[uvmrw]>?]?|l[p<[uqv]>?|q<[uvmrw]>?|h<[cmdin]>?|m<[rins]>?|r<[vwnsx]>?]?|c[

[11:03] <Juerd> YEEHAW

[11:03] <Juerd> First part works.

[11:03] <Juerd> Now to create 25 of these

[11:04] <Juerd> How dependent one can be on not-flattening, working next and handy debugging tools (pretty .perl) amazes me

[11:04] <autrijus> ah. right. charclass now works in Pugs's bundled pge

[11:04] <Juerd> The same thing 2 days ago didn't work *at all*

[11:05] <autrijus> :)

[11:06] <Juerd> I had to recode some parts to avoid gather/take though

[11:06] <Juerd> (I had written this months ago)

[11:06] <autrijus> say, is gather/take coro-like, or not?

[11:06] <Juerd> Not really

[11:06] <Juerd> gather returns a list

[11:06] <Juerd> A list of whatever inner "take" collected

[11:07] <Juerd> @foo = gather { for 1..5 { take } }

[11:07] <Juerd> equals @foo = 1..5

[11:07] <Juerd> This way you can avoid my @foo; for 1..5 { push @foo, $_ }

[11:07] <Juerd> Which has @foo redundant

[11:07] <Juerd> Which for some people, including me, feels unclean

[11:07] <wolverian> it's certainly a coroutine (take is just a yield)

[11:08] <Juerd> wolverian: It doesn't have more than one entry or exit point

[11:08] <Juerd> 'take' simply pushes

[11:08] <Juerd> It doesn't terminate anything

[11:08] <Juerd> Every gather block has an implicit array, onto which take pushes

[11:08] <wolverian> hmm. but it can be implemented as such. after taking, gather would yield itself back to the user code.

[11:09] <wolverian> s,after taking,after each take,

[11:09] <Juerd> It shouldn't do that.

[11:09] <Juerd> If you want that, use a coro.

[11:09] <wolverian> I don't see a practical difference.

[11:09] <Juerd> This is for building lists. A way to use statements instead of expressions

[11:09] <autrijus> luqui seems to want gather/take vs Lazy list to act as coro.

[11:10] <autrijus> i.e. gather is a generator

[11:10] <wolverian> that seems sensible.

[11:10] <Juerd> `gather` is a `map` that has no input list, and can take more than once

[11:10] <Juerd> autrijus: When did pugs start, by the way?

[11:10] <wolverian> Juerd: I know what it is, and what I described implements that, with coroutine semantics.

[11:10] <wolverian> at least as far as I can see. :)

[11:10] <autrijus> Juerd: 100 days ago

[11:10] <wolverian> (which isn't really far at all.)

[11:10] <Juerd> wolverian: Then I don't understand coroutines well enough

[11:10] <Juerd> autrijus: Was that before or after feb 4?

[11:11] <autrijus> feb 1st

[11:11] <Juerd> I wrote the script I'm refitting that day

[11:11] <Juerd> It's close to its first run ;)

[11:12] <wolverian> Juerd: right. both the { ... } given to gather and gather itself are coroutines, to be exact. when the user code calls take, execution returns to gather, which pushes the arg (think of take as a return) to the list being gathered. (er, array..) then gather yield()s back to the user code doing the take; the execution continues immediately after the take.

[11:13] <Juerd> Ah

[11:13] <Juerd> I don't see why that's useful

[11:14] <Juerd> It seems more complex than simply pushing onto an implicit array :)

[11:14] <wolverian> sure. I don't know either, except maybe take() can be implemented more cleanly this way.

[11:28] <Juerd> It's taking a hell of a lot of time, but it appears to WORK :)

[11:28] * Juerd restarts it | tee rule

[11:28] <Juerd> Don't want to wait for building the rule more than once (takes .5 seconds in p5)

[11:30] <Juerd> autrijus: How can it build a huge rule, recursively, with constant memory usage?

[11:30] <Juerd> H

[11:30] <Juerd> m

[11:31] <Juerd> I'm probably better off using an optimized build for these

[11:31] <Juerd> this

[11:34] <Juerd> I just realised that in Perl 6, you don't have to prebuild the rule

[11:34] <Juerd> And can even go into unlimited depth of words to be found

[11:34] <Juerd> But that's an exercise for much later

[11:40] * Juerd wonders how join.t was wrong

[11:42] <autrijus> join("|", [1,2,3])

[11:42] <autrijus> that [] doesn't flatten, no?

[11:42] <autrijus> please don't say it flattens now :)

[11:42] <autrijus> oh btw:

[11:42] <autrijus> * (a => 3+4) is now parsed as (a => (3+4)), not (a => 3)+4.

[11:42] <autrijus> r3068

[11:43] <Juerd> autrijus: No

[11:43] <autrijus> so that's how it was wrong

[11:43] <autrijus> it was assuming *[1,2,3]

[11:44] <Juerd> autrijus: Although it's entirely possible that join, the function itself, flattens arrayrefs

[11:44] <Juerd> I don't think there's spec on this

[11:44] <autrijus> it's not specced as such in Rod's, iirc

[11:44] <Juerd> I'm not asking p6l either. Flatless is good here.

[11:45] <Juerd> And flattening with join, but not other functions, leads to surprises

[11:46] <autrijus> down to 14 fails.

[11:47] <Juerd> Wow

[11:47] <Juerd> impressive, autrijus 

[11:47] <Juerd> autrijus++

[11:47] <autrijus> 13 now.

[11:47] <autrijus> in 4 tests

[11:49] <Juerd> I wonder if when this matrix.p6 fun is finished, I have the largest Perl 6 rule ever created ;)

[11:49] <Juerd> If it ever finishes, that is :)

[11:51] <scook0> autrijus: may I pick your brain for a bit?

[11:51] <autrijus> scook0: yes?

[11:51] <scook0> I have a bunch of pugs-internals questions that I've been accumulating...

[11:51] <scook0> about Pads:

[11:52] <ajs> morning all. Juerd, do you ever sleep? :)

[11:52] <scook0> they map from names to /lists/ of refs, right?

[11:52] <Juerd> ajs: Yes. Think timezones.

[11:52] <scook0> is that for multisubs, where the same sub name maps to multiple sub objects?

[11:56] <Juerd> Office time :(

[11:56] <autrijus> scook0: yes and yes.

[11:56] <scook0> autrijus: cool, that's what I thought

[11:56] <autrijus> scook0: I'm been thinking to split a Pad entry into single and multiple variants

[11:57] <autrijus> MkPad !(Map Var ([(TVar Bool, TVar VRef)]))

[11:57] <autrijus> becomes

[11:57] <scook0> yeah, the whole list thing is a bit confusing if it only gets used for one purpose

[11:58] <autrijus> data Pad = MkPad !(Map Var PadEntry)

[11:58] <autrijus> data PadEntry = MkEntry (TVar Bool, TVar VRef) | MkEntryMulti [(TVar Bool, TVar VRef)]

[11:58] <autrijus> yeah. but it's not critical, so is low priority

[11:58] <Juerd> I HAVE THE RULE

[11:58] <autrijus> down to 3 failing tests.

[11:58] <scook0> well, if I start feeling confident about /writing/ Haskell I might give it a try sometime

[11:58] <autrijus> Juerd: YOU RULE

[11:59] <autrijus> has $.source is rw;

[11:59] <scook0> actually, that reminds me of another question about confusing lists

[11:59] <scook0> I'm not sure why SlurpLimit needs to be a list

[12:00] <Juerd> http://juerd.nl/bigrule.txt

[12:00] <Juerd> firefox cowardly refuses to display a 71995 character line.

[12:00] <scook0> if I'm not mistaken, SlurpLimits are never given more than one entry

[12:01] <scook0> SlurpLimits are only used for subs with a finite number of slurpy scalars and no slurpy array, right?

[12:01] <Juerd> autrijus: I'll check in matrix.p6, though it's far from completion or prettiness

[12:01] <wolverian> Juerd: it displays it fine here.

[12:02] <autrijus> scook0: .assuming will impose multiple limits

[12:02] <wolverian> Juerd: what does that rule do? :)

[12:02] <autrijus> because you can assume (curry) multiple times

[12:02] <scook0> ah

[12:02] *** chady is now known as chady_

[12:02] <autrijus> mmm

[12:02] <autrijus> "Pugs now powers the Matrix"

[12:02] <scook0> I'll have to write that in the docs then

[12:03] <scook0> Am I correct in that they only apply to subs that take a finite number of slurpy scalars?

[12:04] <Juerd> wolverian: See svn commit comment that will appear soonish

[12:04] <scook0> Slurpy array params seem to nuke the SlurpLimit

[12:04] <Juerd> autrijus: Should it run faster with parrot?

[12:04] <scook0> because slurpy arrays can take any number of args

[12:05] <Juerd> wolverian: 3070

[12:05] <wolverian> waiting for svnbot6 to pick it up.

[12:06] <Juerd> If it displays the comment verbatim entirely, it'll flood the channel :)

[12:07] <autrijus> scook0: yes, and yes.

[12:07] <Juerd> It does.

[12:07] <scook0> autrijus: thanks

[12:08] <scook0> autrijux: My next question is: what's the difference between (Syn "=>" ... ) and (App "&infix:=>" ... ) ?

[12:08] <scook0> is the Syn form obsolete?

[12:09] <wolverian> Juerd: how long does it take perl5 to generate the rule?

[12:10] <wolverian> oh. the second includes that time.

[12:11] <Juerd> imcc_compile_file: couldn't find 'library/Data/Escape.imc'

[12:11] <autrijus> scook0: no, both are in use

[12:11] <autrijus> scook0: I think we should unify to one of them, though

[12:11] <autrijus> there's no difference.

[12:11] <Juerd> wolverian: svn up to see matrix.p6

[12:11] <Juerd> eh

[12:12] <Juerd> wolverian: svn up to see matrix.p5

[12:13] <autrijus> Juerd: should be fixed now; try again

[12:13] <Juerd> I have to go to the office now, for real :(

[12:13] <Juerd> I'll try later

[12:14] <Juerd> (Though you can try it yourself too if you want)

[12:14] <autrijus>  k.

[12:15] <Limbic_Region> morning all - was just catching up on what looked like an exciting day on p6.l

[12:16] <scook0> autrijus: At the moment, if you call a sub that has multiple slurpy arrays, Pugs deliberately binds the first one normally, and makes all the rest empty

[12:17] <scook0> Is this proper behaviour, or is it just a quirk of the current implementation?

[12:17] <autrijus> no, that's specced.

[12:17] <autrijus> i.e. correct

[12:17] <scook0> ok

[12:18] <scook0> actually, are slurpy hash params supposed to be working?

[12:18] <scook0> I ask this because they appear to be implemented, but they don't seem to actually work

[12:18] <scook0> Is this just because there aren't any tests for them?

[12:20] <autrijus> pugs> sub foo (*@_, *%x) { say %x } foo( c => 3 )

[12:20] <autrijus> c 3

[12:20] <autrijus> worksforme

[12:20] <autrijus> er, or not.

[12:20] <autrijus> probably not.

[12:21] <autrijus> yeah, it's very broken. tests welcome :)

[12:21] <autrijus> mark them as :todo<bug> for now

[12:21] <scook0> ok

[12:23] <scook0> autrijus: I think that's all the questions I had written down -- thanks :)

[12:26] <autrijus> :)

[12:26] <autrijus> ok. in that case... preflight will start in a few minutes!

[12:35] <cognominal> autrijus: is this difficult to support the   sub prefix:<OPNAME>    syntax in pugs?

[12:36] <autrijus> cognominal: it's quite trivial

[12:36] <autrijus> but I'm in preflight. :) write tests

[12:37] <cognominal> I am still in larval stage ofr haskell :(

[12:40] <autrijus> tests doesn't need haskell-fu :)

[12:44] <cognominal> haskell-fu?

[12:47] <Shillo> Hullo, folks!

[12:48] *** Hoppy is now known as [nz]Hoppy

[12:51] <autrijus> please "make test" :)

[12:51] <autrijus> preflight #1: http://pugscode.org/Perl6-Pugs-6.2.3-pre1.tar.gz

[12:51] *** autrijus changes topic to: Preflight #1: http://pugscode.org/Perl6-Pugs-6.2.3-pre1.tar.gz | pugscode.org <Overview Journal Logs> | pugs.kwiki.org

[13:01] <autrijus> http://autrijus.org/tmp/changes-6.2.3.html # primitive changelog

[13:13] <stevan> *sniff* *sniff* 

[13:13] <stevan> ahh I love the smell of smoking Pugs in the morning

[13:16] <autrijus> hey stevan. :)

[13:18] <stevan> hey autrijus 

[13:18] <stevan> I see we are in preflight 

[13:19] <autrijus> yes.

[13:19] <stevan> I am building now

[13:19] <autrijus> Config-Tiny doesn't pass tests

[13:19] <stevan> ok

[13:19] <stevan> I will look at it

[13:23] <autrijus> stevan: also please check:

[13:23] <autrijus> t/10_unix_test.t               101   10   9.90%  41 82-90

[13:23] <autrijus> t/20_win32_test.t              165    1   0.61%  4

[13:23] <autrijus> (that's File::Spec)

[13:23] <stevan> ok

[13:24] <autrijus> aw

[13:24] <autrijus> t/entities.t                9    3  33.33%  2-4

[13:25] <autrijus> and LWP::Simple:

[13:25] <autrijus> *** Error: Unhandled/unknown proxy settings: "": NonTerm (MkPos "/home/autrijus/work/dist/pugs/blib6/lib/LWP/Simple.pm" 169 7 169 76): NonTerm (MkPos "/home/autrijus/work/dist/pugs/blib6/lib/LWP/Simple.pm" 62 13 62 48) at t/live.t line 77, column 14-24

[13:25] <autrijus> t/getprint.t    1   256     3    0   0.00%  ??

[13:25] <autrijus> t/live.t        1   256    29   54 186.21%  3-29

[13:26] <autrijus> and your P::E::P:

[13:26] <autrijus> t/basic.t         1   256     5    6 120.00%  3-5

[13:26] <autrijus> t/basic_html.t    1   256     3    2  66.67%  3

[13:26] <autrijus> t/complex.t       1   256     3    2  66.67%  3

[13:33] <autrijus> that's all there is

[13:33] <stevan> ok, build donw

[13:33] <stevan> i will attack these right now

[13:36] <autrijus> stevan++

[13:36] <autrijus> I'll brb

[13:37] <stevan> oh, very odd

[13:40] <Juerd> autrijus: Should fixed pugsbugs tests be moved to pugsbugs/fixed?

[13:42] <autrijus> Juerd: no, they should be moved to other t/ directories

[13:42] <stevan> autrijus: this is one of the Config::Tiny errors

[13:42] <stevan> pugs -e '"hello " ~~ rx:perl5/^(.*?)\s(.*)$/; my %h; %h{$0} = $1; say %h.keys; say %h<hello> ?? "true" :: "false";'

[13:42] <stevan> prints: hello \n true

[13:43] <stevan> %h<hello> is the match (\MkMatch {matchOk = True, matchFrom = 6, matchTo = 6, matchStr = "", matchSubPos = [], matchSubNamed = {}})

[13:44] <Juerd> autrijus: ok

[13:44] <stevan> autrijus: is that correct behavior? 

[13:45] <stevan> hey nothingmuch :)

[13:45] <nothingmuch> hola

[13:50] <stevan> autrijus: Config::Tiny has been fixed

[13:50] <stevan> moving onto File::Spec

[14:03] <stevan> guten morgen iblech

[14:05] <iblech> Should new tests be TODOed currently?

[14:09] <stevan> iblech: what do you mean new tests?

[14:09] <iblech> stevan: I wanted to write a test for %*ENV.exists(), as it doesn't work ATM

[14:09] <iblech> stevan: Should I TODO it?

[14:10] <stevan> hmmm, I would say yes since we are in preflight

[14:10] <iblech> ok

[14:10] <stevan> but i will leave the final descision to autrijus 

[14:11] <iblech> :todo<bug>?

[14:11] <cognominal> how comes  "my $x; my $x" succeed in intereactive pugs but  fails in a test?

[14:11] <cognominal> anyway it should fail because , "it's illegal to declare $x twice in the same scope."

[14:12] <PerlJam> cognominal: is it illegal?  If so, why?

[14:13] <autrijus> iblech: no, don't todo it.

[14:13] <autrijus> because it's, like, fixed.

[14:13] <autrijus> committing

[14:13] <iblech> autrijus++ :)

[14:13] <cognominal> # L S<o4/The Relationship of Blocks and Declarations>

[14:13] <stevan> autrijus++

[14:13] <stevan> iblech++

[14:13] <cognominal> it is stated verbatim there

[14:14] <autrijus> cognominal: yes, I noticed. write a test with todo<bug>

[14:14] <PerlJam> cognominal: ah, so it is.

[14:14] <PerlJam> I was thinking the perl5 behavior would continue on that one

[14:14] <autrijus> env.t all passes :)

[14:17] <stevan> File::Spec passes

[14:17] <autrijus> woot

[14:17] <iblech> FYI, I'm fixing LWP::Simple ATM

[14:18] <stevan> I tried to fix the Win32 abs2rel bug, but I have not yet had enough coffee, so I left it TODO

[14:18] <autrijus> k.

[14:18] <stevan> moving onto P::E::E

[14:18] <stevan> s/E$/P/

[14:22] <iblech> Hm... connect $h, 8086 works fine, but connect $h, $p (where $p == 8086), does not ("pugs: connect: does not exist (Connection refused)")

[14:23] <iblech> That's weird, as I use variables for the port numbers in Net::IRC, too, and there, they work fine...

[14:24] <autrijus> it worksforme.

[14:25] <iblech> Yeah, and it works in the interactive shell, too, w/o problems

[14:26] <iblech> But not in _send_request of LWP::Simple... investigating

[14:26] <nothingmuch> iblech: apropos _send_requst, shouldn't that be 'http_proxy' and not 'HTTP_PROXY'? or at least both?

[14:27] <iblech> nothingmuch: I didn't write the original code, but you're certainly right. Fixing

[14:28] <nothingmuch> oh crap, now I se what my problem is

[14:28] <nothingmuch> svn up loop was broken

[14:28] <autrijus> iblech: I know.

[14:29] <autrijus> fixing.

[14:29] <iblech> excellent. :)

[14:29] <nothingmuch> time for parrot to be installed too

[14:29] <cognominal> autrijus: http://wagner.elixus.org/~autrijus/svk-overview.png ==> 404

[14:29] <stevan> autrijus: did you see my note about the match?

[14:30] <autrijus> stevan: yeah, same problem

[14:30] <autrijus> cognominal: mv to http://autrijus.org/svk-overview.png

[14:31] <autrijus> the reason is

[14:31] <autrijus> $0 is a match obj

[14:31] <autrijus> match obj numifies to number of submatches

[14:31] <autrijus> I'm making $0 etc into stringified match obj now.

[14:31] <nothingmuch> oi, parrot won't make -j3

[14:31] <autrijus> not sure if it's according to spec

[14:31] <nothingmuch> *sigh*

[14:32] <autrijus> but certainly less painful

[14:32] <autrijus> committed. please test to see that it works now

[14:33] <autrijus> stevan: you may not need "$foo" anymore; $foo would do

[14:33] <autrijus> food &

[14:33] * nothingmuch goes to get pita + labane while things are building

[14:34] <Limbic_Region> mmmm food

[14:36] <cognominal> what are all these empty merges when I do a svk push?

[14:37] <iblech> autrijus: connect() works now :)

[14:37] <clkao> eek

[14:39] <stevan> Pod::Event::Parser fixed (that pesky $0 again)

[14:41] * Limbic_Region wonders if we will jump from version 6.28 to 6.2831 since pmichaud has already given us rules and grammars

[14:43] <kungfuftr> where's the roadmap again?

[14:45] <PerlJam> kungfuftr: http://svn.perl.org/perl6/pugs/trunk/docs/01Overview.html

[14:45] <iblech> kungfuftr: docs/01Overview.html

[14:45] <PerlJam> search for "roadmap"

[14:45] <PerlJam> Limbic_Region: nah, I don't think so ... rules and grammars hasn't been vetted enough

[14:45] <kungfuftr> ta

[14:46] <stevan> Limbic_Region: we also dont have full classes and traits

[14:46] <stevan> (we dont have traits at all actually)

[14:46] <stevan> (or rather Roles)

[14:48] <iblech> cognominal: There's no local() in Perl 6, it's called temp() instead, and one is allowed to use temp() on a variable multiple times

[14:49] <cognominal> my bad

[14:49] <cognominal> are you sure about the "multiple times"?

[14:49] <iblech> yes

[14:49] <PerlJam> cognominal: you *must* be able to temp multiple times.

[14:49] <cognominal> I am sure multiple times are not allowed on lexicals

[14:49] <PerlJam> That's the prime benefit

[14:50] <cognominal> on the same scope?

[14:50] <PerlJam> cognominal: sure you can temp a lexical multiple times

[14:50] <PerlJam> Unless this is one of the behaviors that will *really* surprise me with perl6

[14:51] <Limbic_Region> stevan - think I wasn't clear

[14:52] <Limbic_Region> 6.28 to 6.2813 implied that we did get full classes and traits

[14:52] <Limbic_Region> we would just be skipping over 6.281 (rules and grammars)

[14:53] <cognominal> PerlJam: so I am sure that "my $x; my $x" is an error, but currently it does not parse as a test, but it works on interactive pugs

[14:53] <Limbic_Region> or rather, was what I was trying to imply

[14:53] <PerlJam> cognominal: It doesn't say in the synopses whether or not you can temp a var multiple times in the same scope.  I can't even find an example that implies it.

[14:53] <cognominal> how should I test.

[14:53] <iblech> cognominal: That's because you wrote $x in the test description, which was double quoted. (Fixed.)

[14:54] <cognominal> PerlJam:  in S04:  (It's illegal to declare $x twice in the same scope.)

[14:55] <PerlJam> cognominal: temp isn't a declaration

[14:55] <cognominal> but the only example given is a lexical declaration

[14:56] <PerlJam> state $x; state $x should be an error too (I haven't looked if there's a test or not)

[14:57] <iblech> PerlJam: It's tested in cognominal++'s t/var/var.t

[14:59] <cognominal> how much of smart matching is implemented?

[15:00] <iblech> IIRC $str ~~ rx/.../ and $object ~~ Class (but maybe other things, too)

[15:03] <Juerd> My local repository is very fucked up

[15:03] <Juerd> I'm starting over

[15:03] <Juerd> (svn--  # refuses to let me correct mistakes)

[15:10] * cognominal notes thhat iblech has a ipv6 address

[15:11] <iblech> cognominal: Yes :) See http://tunnelbroker.as8758.net/

[15:12] <iblech> BTW, it'd be great if I could connect() to IPv6 hosts *hint* :)

[15:12] <iblech> (Actually, POE::Component::IRC has the same problem last I checked, therefore iblechbot is still IRCing over IPv4.)

[15:13] <autrijus> stevan: so, module tests all work now?

[15:15] <kungfuftr> iblech: you need an IPv6 server to connect to?

[15:16] <iblech> kungfuftr: First, I need a tunnel broker, which gives me an IPv6 address. Then I can connect to the IPv6net :)

[15:16] <kungfuftr> iblech: ah, you need a tunnel... you in the UK?

[15:16] <iblech> kungfuftr: No, Germany. My tunnel broker is http://tunnelbroker.as8758.net/.

[15:16] <ingy> hola

[15:17] <ingy> gugod++

[15:17] <stevan> autrijus: yes I think so

[15:17] <ingy> gugod++

[15:17] <ingy> gugod++

[15:17] <autrijus> cool... rolling preflight #2

[15:17] <iblech> autrijus: Just checked, yes, all ext/* pass

[15:17] <autrijus> iblech++ stevan++

[15:17] <kungfuftr> iblech: i have native ipv6 from here: http://ipv6.glbx.net/

[15:18] <kungfuftr> iblech: ah, they blocking 6667?

[15:18] <iblech> kungfuftr: Native!

[15:19] *** autrijus changes topic to: Preflight #2: http://pugscode.org/Perl6-Pugs-6.2.3-pre2.tar.gz | pugscode.org <Overview Journal Logs> | pugs.kwiki.org

[15:19] <iblech> kungfuftr: Yes, but not 7000, which Freenode's IRC server listen on, too :)

[15:19] <kungfuftr> iblech: yup, native

[15:22] <autrijus> in that preflight, var.t will fail, that's expected

[15:22] <autrijus> already fixed in trunk

[15:23] <autrijus> will still release if that's the only failure seen

[15:23] <autrijus> (instead of pre3, that is)

[15:26] <iblech> autrijus: t/magicals/env.t fails 7, 10, 11 here (Linux)

[15:27] <putter> re pre2, SIGNATURE?

[15:27] <putter> find . |xargs grep SIGNA

[15:27] <putter> ./README:    cpansign -v         # optional; see SIGNATURE for details

[15:27] <putter> .

[15:27] <iblech> Oh and BTW, do you know that interactive Pugs forgets class declarations?

[15:27] <autrijus> putter: oh. it's unsigned. will fix in final

[15:27] <putter> k

[15:28] <autrijus> iblech: no, I don't. aww.

[15:28] <iblech> It does work when the class declaration and the use of the class is on the same line, e.g. 'class A {} my $a = A.new'

[15:28] <autrijus> iblech: hm, failing 7 means you don't have ./pugs

[15:28] <autrijus> usually

[15:28] <autrijus> can you investigate?

[15:29] <iblech> will do

[15:30] <cognominal> iblech: getting an ipv6 address was painless

[15:31] * kungfuftr will see about offering tunneling

[15:34] <iblech> autrijus: env.t fixed as r3096 (the vars SHLVL and _ were set by bash, and they didn't compare to the env expected, so those two tests failed)

[15:34] <iblech> But the %*ENV.exists("...") bug is still there

[15:34] <autrijus> hm, it always returns true?

[15:35] <iblech> yes

[15:36] <autrijus> attempted another fix.

[15:36] <autrijus> r3097

[15:38] <iblech> Still doesn't work. If it helps you, defined %*ENV<does_not_exist> works (i.e., returns false)

[15:39] <autrijus> hm. did you touch src/Pugs/AST/Internals.hs and rebuild?

[15:39] <iblech> No, will do.

[15:39] <autrijus> please do. :)

[15:39] <Forth_> I've svk sync so~ many times today...

[15:39] *** Forth_ is now known as Forth

[15:39] <iblech> Still doesn't work. :(

[15:40] <iblech> No, wait a sec

[15:40] <iblech> works! :)

[15:40] <iblech> autrijus++

[15:40] <autrijus> good. :)

[15:40] <autrijus> anyone else running a test on preflight #2?

[15:40] <putter> yes.

[15:41] <autrijus> cool. win32?

[15:41] <autrijus> probably need a win32 confirmation before flying

[15:41] <stevan> autrijus: the class in the interactive shell issue iblech is talking about

[15:41] <stevan> it also shows up with use My::Class;

[15:41] <putter> sorry.  FedoraCore3 x86_64.

[15:41] <autrijus> ah. that's cool too. :)

[15:41] <autrijus> stevan: yeah, I noticed

[15:41] <stevan> ok

[15:41] <stevan> cool

[15:42] <stevan> where is the link for preflight #2 BTW

[15:42] <iblech> http://pugscode.org/Perl6-Pugs-6.2.3-pre2.tar.gz

[15:42] <stevan> nvermind found it

[15:42] <stevan> thanks iblech :)

[15:43] <autrijus> I think envClasses needs to be a TVar to avoid this kind of problem

[15:43] <autrijus> basically the env changed by use"" won't propagate back to the caller unless it's a TVar

[15:43] <autrijus> (because it'd be lexical otherwise)

[15:44] <autrijus> but it's not for 6.2.3 :)

[15:44] <iblech> autrijus: Found another env bug: Deleting an env var does not propagate to subprocesses (but setting does)

[15:45] <autrijus> what about setting it to '' ?

[15:45] <Forth> Is there a way to specify the output encoding writing to file or stdout?

[15:45] <iblech> autrijus: Forget, it does work perfectly fine :)

[15:45] <autrijus> iblech: eh. :)

[15:46] <autrijus> Forth: no... we don't yet have encoding support

[15:46] <autrijus> suggestions welcome

[15:46] <autrijus> we can link against *gasp* ICU

[15:46] <autrijus> or iconv.

[15:49] <iblech> Ok, 4927 ok, 0 failed, 708 todo, 13 skipped and 0 unexpectedly succeeded on Linux

[15:52] <autrijus> cool. I'm booting to win32 to test.

[15:52] <Forth> i am running test but not pre2.....

[15:53] <autrijus> Forth: on win32?

[15:53] <Forth> yes

[15:53] <autrijus> oh. cool

[15:53] <autrijus> then I won't need to

[15:57] * putter imagines everyone doing "make unoptimized" to save time, and simple "make" not being tested...

[15:58] <Juerd> I use optimized make more often than unoptimized make.

[15:58] <Juerd> Most of the time, I am in no hurry

[15:58] <Juerd> 2;0 juerd@sxark:~/project/pugs$ ./pugs -BParrot examples/matrix.p6

[15:58] <Juerd> pugs: Cannot compile: Syn "{}" [Var "%had",Pos (MkPos "examples/matrix.p6" 26 10 26 17) (App (Var "&infix:~") [Var "$y",App (Var "&infix:~") [Val (VStr "/"),App (Var "&infix:~") [Var "$x",Val (VStr "")] []] []] [])]

[15:58] <Juerd> What does that mean?

[15:59] <putter> pre2 results (FC3 amd64, unoptimized, external parrot):

[15:59] <putter> Failed 3/253 test scripts, 98.81% okay. 5/4921 subtests failed, 99.90% okay.

[15:59] <putter> t/magicals/env.t                      11    2  18.18%  7 10

[15:59] <Juerd> And the other 3?

[15:59] <Corion> I'm compiling the latest svn snapshot on Win32

[15:59] <putter> t/unspecced/eval_yaml.t  254 65024     2    4 200.00%  1-2

[15:59] <putter> t/var/var.t                            5    1  20.00%  2

[15:59] <Corion> (Justin Case)

[15:59] <Juerd> Hm

[15:59] <putter> eval_yaml failure is a ghc amd64 bug.

[15:59] <Juerd> Corion: There are a lot of justins here

[16:00] <Corion> Juerd: :)

[16:00] <Juerd> Corion: Time and Case are the most mentioned

[16:01] <Forth> oh no~ I forget I don't have parrot install at home

[16:01] <osfameron> hmmm, I see r3098 in scrollback

[16:01] <osfameron> but http://svn.perl.org/perl6/pugs/  is at 3005 ?

[16:02] <osfameron> aha, that's a mirror

[16:02] <iblech> osfameron: svn.perl.org is mirrored from the real repository http://svn.openfoundry.org/pugs

[16:02] <osfameron> ta

[16:04] <Forth> Failed 2/253 test scripts, 99.21% okay. 9/4921 subtests failed, 99.82% okay.

[16:04] <Forth> from the latest svn

[16:04] <Corion> unlink.t fails with 2 fails (as expected, but should be :todo for Win32

[16:06] <ninereasons> you could add ':todo<Win32>' to those tests, Corion :)

[16:06] <autrijus> Corion: ok, please skip them for win32

[16:06] <Limbic_Region> Corion - is that even after it has been closed

[16:06] <Forth> and the last line is NMAKE : fatal error U1077: 'C:\WINDOWS\system32\cmd.exe' : return code '0xff' Stop.

[16:06] <autrijus> putter: how does t/unspecced/eval_yaml.t fail?

[16:06] <Limbic_Region> ?

[16:07] <putter> internal error: adjustor creation not supported on this platform

[16:07] <Corion> Will fix unlink.t for Win32

[16:07] <putter> allegedly (fully or partially fixed) in current cvs-ghc... which doesn't build for me at the moment.

[16:08] <putter> (or didn't build for me yesterday... trying again)

[16:08] <osfameron> oooo, pugs is building r3098...

[16:09] <autrijus> putter: ok... I'm going to let it fail for x8664

[16:10] <putter> k

[16:12] <Corion> Committed unlink.t fix (r3100)

[16:12] <Corion> resmoking

[16:13] <autrijus> I guess pre3 is warranted after all ;)

[16:13] <Corion> Gah. I was too eager... My fix put too much on :todo :(

[16:14] * autrijus waits for Corion's fix fix

[16:14] <Corion> r3101

[16:14] <Corion> Oh. And undef.t dies, according to http://datenzoo.de/pugs/win2k.html ...

[16:15] <Corion> but other than that, we're ready to fly :)

[16:15] <autrijus> Corion: you don't have parrot in path, right :)

[16:15] <Corion> Is anybody "fixing" undef.t ?

[16:15] <Corion> autrijus: Nope, no parrot here.

[16:15] <autrijus> ok. I'm "fixing" it now

[16:19] <ninereasons> that's a tidy way to handle it, Corion++ # todo => $win32

[16:19] <Forth> pugscc won't create .exe anymore?

[16:20] <autrijus> Forth: I thought it would. what's the error msg? did you "nmake install" first?

[16:20] <Corion> I never do "nmake install"

[16:20] <stevan> autrijus: I got 4 errors

[16:20] <stevan> t/builtins/undef.t            1   256    66   14  21.21%  60-66

[16:20] <stevan> t/magicals/env.t                         11    2  18.18%  7 10

[16:20] <stevan> t/unspecced/eval_haskell.t                4    1  25.00%  2

[16:20] <stevan> t/var/var.t                               5    1  20.00%  2

[16:20] <Corion> (at least not with Pugs)

[16:21] <Corion> stevan: You don't have Parrot? :)

[16:21] <iblech> autrijus: FYI, on Linux, pugscc only works with --parrot, not with --pugs and --haskell

[16:21] <stevan> rather, 11 errors, in 4 tests

[16:21] <autrijus> stevan: how does t/unspecced/eval_haskell.t fail?

[16:21] <stevan> Corion: I never managed to get it to work

[16:21] <stevan> autrijus: looking

[16:21] <Corion> stevan: That accounts for t/builtins/undef.t :)

[16:21] <stevan> failed test 2

[16:21] <stevan> eval_haskell.t that is

[16:22] <autrijus> stevan: you have an old version of hs-plugins perhaps.

[16:22] <stevan> autrijus: quite likely

[16:22] <stevan> Corion: yes, undef.t (something about not finding parrot)

[16:23] <autrijus> undef.t shoudl be fixed

[16:23] <autrijus> please test.

[16:23] <stevan> ok

[16:24] <autrijus> iblech: try pugscc again

[16:24] <autrijus> Forth: svn up and try pugscc again?

[16:24] <iblech> autrijus: --runpugs and --runparrot work now :), --runhaskell not

[16:25] <Forth> autrijus: sure, building now

[16:27] <autrijus> stevan: so I'll let old hs-plugins fail for this release... you can update to something around or after 20050417 too

[16:27] <stevan> ok

[16:29] <autrijus> iblech: try r3105

[16:29] <autrijus> $ perl script/pugscc --runhaskell -e 'say 1'

[16:29] <autrijus> 1

[16:29] <autrijus> how's undef.t for parrotless folks?

[16:30] <iblech> autrijus: All --run[parrot|pugs|haskell] work now :)

[16:30] <autrijus> good.

[16:31] <Corion> autrijus: good

[16:31] <autrijus> pre3!

[16:31] <Corion> autrijus: Does not crash anymore and fails one (TODO) test

[16:31] *** autrijus changes topic to: Final check: http://pugscode.org/Perl6-Pugs-6.2.3-pre3.tar.gz | pugscode.org <Overview Journal Logs> | pugs.kwiki.org

[16:31] <autrijus> Corion: that's good to hear

[16:32] <autrijus> final call before boarding :)

[16:32] * Corion starts a (final|full) smoke from svn

[16:32] * autrijus starts writing release announcement

[16:33] <autrijus> # http://pugscode.org/Perl6-Pugs-6.2.3-pre3.tar.gz

[16:38] <Juerd> 2;1 juerd@sxark:~/project/pugs$ ./pugs -BParrot examples/matrix.p6

[16:38] <Juerd> pugs: Cannot compile: Syn "{}" [Var "%had",Pos (MkPos "examples/matrix.p6" 26 10 26 17) (App (Var "&infix:~") [Var "$y",App (Var "&infix:~") [Val (VStr "/"),App (Var "&infix:~") [Var "$x",Val (VStr "")] []] []] [])]

[16:38] <Juerd> What does it mean?

[16:38] <autrijus> Juerd: that means that parrot codegen doesn't do PerlHash.

[16:38] <Juerd> Oh

[16:38] <Juerd> That's unfortunate

[16:38] <autrijus> Juerd: really, please wait until after APW :)

[16:38] <Juerd> What's APW?

[16:38] <autrijus> the parrot codegen will get rewritten during my stay with Leo

[16:39] <Juerd> I see - when is that?

[16:39] <autrijus> and hopefully unified with the Eval monad

[16:39] <autrijus> that's ~1month from now

[16:39] <Juerd> ok

[16:39] <Juerd> Are there other ways of speeding up execution?

[16:39] <autrijus> will try to cram stuff into parrot 0.2.1 to support things

[16:39] <ajs> A *month* ... in pugs time, that's like 10 years!!! ;-)

[16:39] <autrijus> Juerd: make things optimised...

[16:39] <Juerd> It segfaults after a while, when trying to match the rule

[16:39] <Juerd> autrijus: Doing so already

[16:40] <Juerd> I'd add a test for the segfault, but it takes way too long for that :)

[16:41] <autrijus> Juerd: I have this feeling that you're looking at a PGE problem :)

[16:42] <autrijus> Juerd: send the rule to p6c to pmichaud?

[16:42] <Juerd> It might very well be

[16:42] <Juerd> It's hard to send it as e-mail

[16:42] <Juerd> Because it exceeds the line length, and mailing lists don't accept attachments

[16:42] <autrijus> why? just .gz it

[16:42] <Juerd> No attachments.

[16:42] <autrijus> oh. then send a url

[16:42] <Juerd> That's a good idea

[16:42] * autrijus praises the technology known as URL

[16:43] <autrijus> so, pre3 all clean here

[16:43] <autrijus> how's it going for others?

[16:44] <stevan> undef.t is good for me

[16:45] <_metaperl> hangman.p6 had a syntax error in it...

[16:45] <Juerd> done

[16:45] <_metaperl> I found out during my presentation last night :)

[16:45] <autrijus> _metaperl: huh? it worksforme :)

[16:45] <_metaperl> ok I will try again... maybe its my pre-ghc6.4 pugs

[16:47] <Forth> the result of test http://irc.csie.org:8888/115

[16:47] <autrijus> Forth: what version is this?

[16:48] <Forth> r3106

[16:48] <autrijus> really.

[16:48] <autrijus> run t\entities.t by hand and see what are the errors?

[16:48] <_metaperl> anyone want to help guess the p6-authors name? sorry to interrupt

[16:49] <autrijus> _metaperl: uh. what?

[16:49] <Juerd> _metaperl: If you want people to cooperatively play the game, just make it an irc bot.

[16:49] <_metaperl> wild idea Juerd

[16:49] <Corion> r3105 is go on Win32 btw

[16:50] <autrijus> Forth: I suspect you are running against an old copy

[16:50] <Corion> Hmmm. What is the easy way to get Parrot/Win32 ?

[16:50] <autrijus> Corion: read README

[16:50] <Corion> Oh.

[16:50] <_metaperl> here are my guesses so far: http://pastebot.nd.edu/802

[16:51] <autrijus> _metaperl: botify it :)

[16:51] <_metaperl> is that easy? it sounds involved

[16:51] <Forth> autrijus: http://irc.csie.org:8888/116

[16:52] <Forth> is that my environment's problem?

[16:53] <autrijus> Forth: I remember that stevan fixed that a while ago

[16:53] <autrijus> unless I'm terribly mistaken

[16:54] <stevan> autrijus: that was Ovid's module actually,... I never touched it

[16:54] <autrijus> Forth: I have no idea why it fails for you...

[16:54] <autrijus> oh ok.

[16:54] <iblech> HTML::Entities's tests work fine here (as do all the other ext/* tests)

[16:55] <Forth> i have no idea, too. it's a clean build

[16:55] <autrijus> ok. I'll investigate

[16:55] <Forth> i should try it again first :)

[16:55] <autrijus> no, duplicated here.

[16:56] <stevan> I would offer to help, but I really need to pay attention to $work  :)

[16:56] <stevan> sorry

[16:57] <autrijus> that's fine :)

[16:57] <Forth> previous test is ok on that

[16:58] <Juerd> work always gets in the way of productivity

[16:58] <Juerd> It's an universal rule of open source

[17:03] <autrijus> fixed.

[17:03] <autrijus> committing

[17:03] <autrijus> Forth++

[17:04] <stevan> Juerd: $work is open source (to a certain degree)

[17:04] <stevan> just not /all/ of it

[17:04] <Juerd> Cool

[17:06] <putter> my test run looked good.

[17:06] <autrijus> Forth: please retest HTML::Entities

[17:06] <autrijus> r3110

[17:06] <autrijus> if it works for you, I'm ready to fly

[17:08] <Forth> go fly :)

[17:08] <Forth> http://irc.csie.org:8888/117

[17:11] <autrijus> ok. :)

[17:12] <Juerd> Yay

[17:12] <Limbic_Region> . o O ( fly like an eagle )

[17:12] <autrijus> 6.2.3 is airborne! | pugscode.org <Overview Journal Logs> | pugs.kwiki.org

[17:12] <Limbic_Region> . o O ( leaving in on a jet plane - ain't coming back to this rev level again )

[17:13] <autrijus> http://pugscode.org/dist/Perl6-Pugs-6.2.3.tar.gz

[17:14] <autrijus> enjoy! :)

[17:14] * autrijus cheers

[17:14] <autrijus> release announcements etc will be up shortly

[17:14] <autrijus> bbiab.

[17:14] <putter> woo hoo!

[17:14] *** autrijus changes topic to: 6.2.3 is airborne! | pugscode.org <Overview Journal Logs> | pugs.kwiki.org

[17:15] <putter> hey everybody -- just awesome. ;)

[17:18] <stevan> whoa.. flying Pugs,.. watch out below :P

[17:18] <_metaperl> first there was Air Jordan. And now... Air Pugs

[17:19] <_metaperl> winning slam dunk contests everywhere

[17:20] <wilx> :)

[17:24] <stevan> Money it's gotta be the Haskell!

[17:25] <_metaperl> Forget Sleepy Floyd... forget Sleepy-eyed Tracy mcGrady... it's Lazy Evaluation's time to shine

[17:28] <boogie> Somebody can tell me, how can I test rules with Pugs? It seems, that everybody can test it, but me. :) I have the latest Pugs and the latest Parrot, and got error if I run an easy regexp test...

[17:28] <autrijus> boogie: what's the error?

[17:29] <boogie> pugs: user error (*** Running external 'parrot' failed:

[17:29] <boogie> error:imcc:op not found 'concat' (concat<2>)

[17:29] <autrijus> latest parrot?

[17:29] <autrijus> 0.2.0-release?

[17:29] <boogie> trunk

[17:29] <autrijus> is the parrot in your path also trunk?

[17:30] <boogie> yes, both parrot and pugs is the latest svn version.

[17:31] <kolibrie> boogie: does 'which parrot' point to the right one?

[17:31] <_metaperl> perl5 to perl6 question

[17:31] <_metaperl>  my ($width,$height) = split(/x/, $banner->{size}); 

[17:31] <_metaperl>   $xpad = defined($xpad) ? $xpad : 40 ; 

[17:31] <autrijus> boogie: cd into src/pge

[17:31] <_metaperl> I could write this as $xpad //= 40 ;

[17:31] <autrijus> in pugs tree

[17:31] <autrijus> run this

[17:31] <autrijus> $ parrot run_pge.pir  123 123

[17:31] <autrijus> PGE_Match 0 3 [] []

[17:32] <autrijus> _metaperl: that's right

[17:32] <_metaperl> wonderful

[17:32] <autrijus> boogie: I'm pretty sure both parrot trunk and 0.2.0 works with our bundled pge

[17:32] <boogie> kolibrie: that's the problem... 

[17:33] <ingy> _metaperl: freepan  accout set up

[17:33] <ingy> http://tpe.freepan.org/repos/metaperl/

[17:34] <ingy> please testit

[17:34] <boogie> Thanks for your help... ;)

[17:34] <kolibrie> boogie: :)

[17:35] <autrijus> :)

[17:35] <autrijus> but if you want to use rules in real programs, I'd recommend embedded parrot

[17:35] <autrijus> spawning a process for each rule match could be slow

[17:36] <boogie> autrijus: I've tried that too, but I got error when compiled it.

[17:37] <boogie> autrijus: I give it a try again, maybe it will work. The environment variables were right, but who knows.

[17:37] <autrijus> I'd be grateful if you can show me the error msg.

[17:38] <boogie> OK, I've started compiling it.

[17:38] <kolibrie> autrijus++ # helping everyone with debugging

[17:39] <autrijus> everyone++ # helping me with debugging

[17:39] <kolibrie> :)

[17:40] <autrijus> I still remember the early 6.0.x days... without TAP matrix, automatic smoke runs, or a channel full of lambdacamels...

[17:40] <autrijus> it's a miracle that I managed to get anything at all done back then ;)

[17:41] <kolibrie> ah, pioneering

[17:42] <autrijus> "madness" is more like it

[17:42] <kolibrie> I didn't say that

[17:42] <autrijus> :)

[17:43] * boogie thinks, that Compiling Pugs.AST.Internals takes long time. :)

[17:43] <wilx> So...are there any Perl6 tutorials yet?

[17:43] <wilx> It seems the time it starts to be worth learing has come.

[17:43] <_metaperl> 3 talks: metaperl.com/talks/p6

[17:43] <autrijus> there's a examples/tutorial_gen/

[17:43] <boogie> wilx: read the tests, and check the doc dir

[17:44] <autrijus> also the very-old-but-still-somewhat-useful exegeses

[17:45] <autrijus> boogie: "make unoptimised" will make it fast(er)

[17:45] <autrijus> but yeah, more refactor-into-small-chunks is needed on that

[17:45] <autrijus> or we can rename it to Pugs.AST.TakesReallyLongToCompilePleaseBePatientOrAbortNowAndMakeOptimisedByHittingCtrlC

[17:46] <boogie> it's the same with Pugs.Parser. :) But I want to get an optimized and fast version for my CGI experiments. :)

[17:46] <autrijus> ahh :)

[17:49] * boogie got error message

[17:49] <boogie> Linking ...

[17:49] <boogie> /usr/local/lib/ghc-6.4/libgmp.a(set_str.o): In function `digit_value_in_base':

[17:49] <boogie> /playpen/ghc/nightly/STABLE-cam-02-unx/i386-unknown-linux/ghc/rts/gmp/mpz/set_str.c:44: undefined reference to `__ctype_b_loc'

[17:49] <boogie> /usr/local/lib/ghc-6.4/libgmp.a(set_str.o): In function `__gmpz_set_str':

[17:49] <boogie> /playpen/ghc/nightly/STABLE-cam-02-unx/i386-unknown-linux/ghc/rts/gmp/mpz/set_str.c:77: undefined reference to `__ctype_b_loc'

[17:49] <boogie> /playpen/ghc/nightly/STABLE-cam-02-unx/i386-unknown-linux/ghc/rts/gmp/mpz/set_str.c:149: undefined reference to `__ctype_b_loc'

[17:50] <boogie> collect2: ld returned 1 exit status

[17:50] <boogie> make: *** [pugs] Error 1

[17:50] <autrijus> mm ghc nightly?

[17:50] <wilx> Hmm, examples/sendmoremoney.p6, in the =kwid section, the second one line paragraph ends in half of the sentence.

[17:51] <wilx> -- The `exhaustive' solution...etc.

[17:52] <boogie> autrijus: I don't remember, but it's possible. Should I try the latest nightly build?

[17:52] <autrijus> boogie: no, it looks like something weird with ctype.h. hm.

[17:52] <autrijus> it's possible that ghc was built with a different ctype than parrot.

[17:53] <boogie> ctype belongs to gcc?

[17:53] <autrijus> I think so

[17:54] <pmichaud> ummm, I think ctype probably belongs to glibc

[17:54] <autrijus> oh well. at least fork is fast on linux :)

[17:54] <autrijus> ah. that's right.

[17:54] <autrijus> __ctype_b_loc, specifically.

[17:54] <boogie> then I try to recompile GHC now.

[17:54] <pmichaud> and I noticed that glibc doesn't match the C Standard Library as far as ctype goes

[17:54] <Limbic_Region> autrijus - when I fork I like it to last a while

[17:54] <pmichaud> at least, it doesn't match the version in the Plauger book

[17:54] <autrijus> pmichaud: I've never had the occasion to deal  with glibc 

[17:54] <boogie> I mean glibc, too. :) I never knew these C libs. ;)

[17:55] <autrijus> so all knowledge of it is purely hearsay

[17:55] <autrijus> s/all/all my/

[18:07] * iblech compiles Pugs 6.2.3 live cd...

[18:08] <Limbic_Region> iblech - how do I play?

[18:08] <iblech>  ?game starts a new game, ?guess char guesses, ?show shows the name again (covered, of course)

[18:09] <_metaperl> wow

[18:09] <_metaperl> ?game

[18:09] <autrijus> oh. wow. hangman bot.

[18:09] <Limbic_Region> has it joined the channel?

[18:09] <iblech> _metaperl: You first have to start the bot ;)

[18:09] <Limbic_Region> and if not - why not?

[18:09] <iblech> okok I start it ^^

[18:10] <autrijus> iblech++ # madness

[18:10] <iblech> thanks :)

[18:10] * boogie agree with autrijus :)

[18:10] <iblech> my Pugs is still compiling (optimized this time, for the live cd)...

[18:12] *** ChanServ sets mode: +o autrijus

[18:13] *** autrijus sets mode: -o autrijus

[18:13] <iblech> :)

[18:13] <Corion> We got ops? Yay! That means we can kick people! :)

[18:13] <Corion> Bah. :(

[18:13] <iblech> ?game

[18:13] <Limbic_Region> ?game

[18:13] <iblech> ?guess i

[18:13] <Limbic_Region> heh

[18:13] <autrijus> eh.

[18:13] <_metaperl> ?guess e

[18:13] <wilx> ?guess a

[18:13] <Limbic_Region> ?guess m

[18:13] <_metaperl> ?guess r

[18:13] <wilx> ?guess u

[18:13] <Limbic_Region> ?guess t

[18:13] <wilx> ?guess Y

[18:13] <Limbic_Region> ?guess s

[18:13] <_metaperl> ?guess p

[18:13] <wilx> ?guess w

[18:13] <Limbic_Region> ?guess o

[18:13] <wilx> :))

[18:13] <autrijus> fun!

[18:13] <iblech> :)

[18:13] <Corion> THE MACHINE WINS! YES! :)

[18:13] <Odin-> Hm.

[18:14] <autrijus> ?game

[18:14] <Limbic_Region> wow

[18:14] <_metaperl> ?guess e

[18:14] <Corion> iblech: The bot should gloat a bit more :)

[18:14] <Odin-> Those don't appear as channel messages.

[18:14] <Limbic_Region> ?guess t

[18:14] <_metaperl> ?guess p

[18:14] <autrijus> ?guess o

[18:14] <_metaperl> ?guess a

[18:14] <Limbic_Region> ?guess a

[18:14] <autrijus> ?guess y

[18:14] <_metaperl> ?guess b

[18:14] <iblech> Odin-: They're NOTICEs, as the IRC RFCs mandate

[18:14] <autrijus> ?guess s

[18:14] <_metaperl> ?guess n

[18:14] <Limbic_Region> ?guess m

[18:14] <Odin-> iblech: Mandate?

[18:14] <autrijus> lol

[18:14] <Limbic_Region> ok - this is going to wreak hell on the irc logger coherency

[18:15] <iblech> Corion: Feel free to fix this, /me lacks the vocab

[18:15] <Corion> Maybe somebody should start #perl6_games :)

[18:15] <boogie> Corion: :))

[18:15] * autrijus aborts the bot :)

[18:15] <iblech> Odin-: ...as the IRC RFCs recommend bot writers

[18:15] <autrijus> iblech++ # lots and lots of fun

[18:15] <Odin-> iblech: Interesting.

[18:15] <Corion> This is so the bots don't get caught up in a feedback loop

[18:15] <Odin-> iblech: And annoying. ;)

[18:16] <Limbic_Region> iblech  

[18:16] <Limbic_Region> grr - iblech plus plus even

[18:16] <iblech> Odin-: Yes... Somebody posted an URL to a page describing the necessary steps to let those NOTICEs get displayed nicer

[18:16] <putter> no svn commit notes in irc log :( :(

[18:17] <autrijus> wow. icfp'05 contest is the same day as yapc::na

[18:17] <autrijus> must... let... Perl 6 win icfp'05

[18:18] <iblech> putter: True. And the beep of the NOTICEs woke wilx up today ;)

[18:18] <autrijus> # http://icfpc.plt-scheme.org/

[18:18] <wilx> Hehe.

[18:18] <wilx> Yeah.

[18:18] <wilx> I usually turn off speakers but I forgot last night :)

[18:18] <Odin-LAP> Much fun, then?

[18:19] <putter> ;)

[18:19] <iblech> Ok, then I convert the NOTICEs to PRIVMSGs

[18:19] <wilx> :/

[18:19] <wilx> No good either.

[18:19] <Odin-LAP> Normal messages are PRIVMSG...

[18:20] <iblech> ?quit Shutting svnbot6 down for a minute (convert to PRIVMSGs)

[18:25] * iblech is uploading the new live cd :)

[18:26] <svnbot6> r3113 (iblech) -- NOTICE -> PRIVMSG for svnbot.p6 and hangmanbot.p6.

[18:27] <Odin-LAP> Hmm.

[18:27] <autrijus> iblech: announce the live cd separately on p6c please :)

[18:27] <integral> hmm, now irssi highlights this window for every commit :-(

[18:27] <Odin-LAP> Noticeably better. :)

[18:27] <iblech> autrijus: Ok :)

[18:28] <Limbic_Region> ?game

[18:28] <Limbic_Region> oh - did the bot go away?

[18:28] <Limbic_Region> yep

[18:28] <autrijus> Guess! _i_b_c_R_g_o

[18:28] * Limbic_Region goes back to $work

[18:33] <svnbot6> r3114 (autrijus) -- * typo

[18:33] <Khisanth> pugs livecd?

[18:33] <Khisanth> PerlOS? :)

[18:34] <eric256> hello... could someone explain why the example uses my $y = =$*IN; ... i don't understand where the second = comes from.

[18:35] <stevan> eric256: it is basically equivalent to readline

[18:35] <integral> = is for reading from an iterator

[18:35] <stevan> my $y = readline($*IN) is the same thing

[18:35] <eric256> ahhh. cool. thanks.

[18:35] <stevan> :)

[18:35] <eric256> and so i begin to learn. ;)

[18:35] <autrijus> :)

[18:36] <Limbic_Region> advocacy at work

[18:37] <eric256> i love the new classes. that is probably the only thing that i'm totaly excited about so far.. hopefully more will come

[18:37] <autrijus> I love the lack of @{${[]}} :)

[18:37] <eric256> do we still need to chomp input .... and is there an easy way to do that all i none step?

[18:37] <Limbic_Region> meant to mention to you in the chatterbox - if you haven't already - install Perl6::Bible

[18:38] <Limbic_Region> eric256 is chomped isn't implemented yet

[18:38] <Limbic_Region> but there should be a way to autochomp - yes

[18:38] <Limbic_Region> just as there is a way to auto-linefeed output

[18:38] <Limbic_Region> say versus print

[18:38] <eric256> cool

[18:38] <Limbic_Region> s/should be/will be/

[18:39] <eric256> chomp IS implemented

[18:39] <Limbic_Region> right - just not autochomp

[18:39] <eric256> oh gotcha...whats the Perl6::Bible give me?

[18:39] <Limbic_Region> but don't make the mistake of opening up your file as rw AND turning on autochomp (when it becomes available) unless you really know what that will do ;-)

[18:40] <Limbic_Region> all the As Es and Ss

[18:40] <Limbic_Region> at your fingertips

[18:40] <autrijus> hm where is autochomp specced?

[18:40] <Limbic_Region> autrijus - it isn't as far as I know

[18:40] <autrijus> I see adverbial form of slurp :chomp in Perl6::Slurp

[18:40] <Limbic_Region> it has been thrown around several times though

[18:40] <autrijus> but nothing about autochomping

[18:40] <Odin-LAP> Limbic_Region: And what would that do?

[18:41] <Odin-LAP> You'd suppose it does 'chomp' automatically on each line fed in..?

[18:41] <Limbic_Region> dunno

[18:41] <autrijus> @lines = io("file").chomp.slurp;

[18:41] <autrijus> (if we go with the IO::All api)

[18:42] * autrijus likes the IO::All api, btw, except maybe for the overloading bit

[18:43] <Limbic_Region> autrijus - great thing about Perl6::Bible is it makes grep'ing for something easy (though building it into p6bible would be nicer)

[18:43] <eric256> why not just $person.name = =$*IN.chomp; ??

[18:43] <Limbic_Region> autrijus - for example, I have already found $*ARGS is chomped;

[18:43] <Limbic_Region> so it must be in there somewhere - looking closer

[18:44] <autrijus> eric256: well, you can use the perl5 idiom

[18:44] <autrijus> class Person { has $.name }

[18:44] <autrijus> my $me = Person.new;

[18:44] <autrijus> ($me.name = =<>).chomp;

[18:44] <Limbic_Region> looks like E02 autrijus

[18:44] <autrijus> that works in pugs just fine

[18:44] <autrijus> Limbic_Region: hmm E is nonnormative

[18:45] <autrijus> (as it's not added with "Update" markers)

[18:45] <autrijus> maybe it'd be fun to update it, though

[18:45] <autrijus> based on current pugs/p6l understandings

[18:45] <autrijus> that will make a good tutorial

[18:46] <eric256> any reason they didn't change chomp to return the chomped string like every sane person expects?

[18:46] <Limbic_Region> autrijus - well, I know it has also been mentioned on p6.l the same way as the "Biting off less so you can chew" section of E02

[18:46] <Limbic_Region> might just take a confirmation email to the list

[18:46] <autrijus> sure.

[18:47] <Limbic_Region> ok - will do

[18:47] <autrijus> eric256: hm, maybe chomp should then be nonmutating

[18:47] <autrijus> and you use

[18:47] <autrijus> $foo .= chomp;

[18:47] <autrijus> if you want destructive chomp

[18:47] <autrijus> iirc it's been proposed by Juerd.

[18:50] <autrijus> eric256: so, send a patch/suggestion to Rod's S29

[18:50] <autrijus> # http://www.rodadams.net/Perl/S29.html

[18:50] <autrijus> "chomp" is not defined there, so just define it

[18:50] <autrijus> and make it either only destructive under void context, or never destructive at all

[18:51] <autrijus> eric256: send off to p6l and, see if it can be made into S29 -- once it is, I'd be happy to implement it in pugs and/or walk you thru on how to implement it

[18:51] <autrijus> btw, you can patch against Pugs's docs/S29draft.pod

[18:51] <autrijus> bbiab.

[18:52] <Limbic_Region> message sent

[18:52] * eric256 just knows it seems crazy as is.

[18:53] <eric256> am i getting myself invovled in yet another project that i don't have time for? although admitidly this is a much more interesting project than any before. ;)

[18:54] <Limbic_Region> eric256 - I don't have any time for it either but you would be surprised how a lot of people contributing a little bit adds up

[18:55] <Limbic_Region> besides - even if you don't get into the Haskell side of the house (I haven't) - you still get to learn p6

[18:55] <kolibrie> and hang out with uber-cool folks

[18:55] <Limbic_Region> imagine the XP you will get when everyone starts using it and you are able to answer questions faster and better than the p5 experts

[18:55] <eric256> very true. i looked into haskell a bit but i think i'll stick to learning p6

[18:55] * Limbic_Region never thought he would resort to using XP as a marketing strategy

[18:56] <eric256> lol

[18:57] <eric256> okay. i stumbled on something.... say "hello" & "wow"; prints each on its own line... new magical meaning of &?

[18:57] <pmichaud> & is a junction

[18:58] <eric256> hmmm. so it causes say to be called twice? once for each element in the junction? 

[18:58] <pmichaud> but it should probably generate a "cannot print junction" error and not print both

[18:58] <pmichaud> at least, that's what Damian claims

[18:58] * Limbic_Region feels that it shouldn't unless you ask it to

[18:58] <pmichaud> but yes, a junction would be a scalar that holds multiple values and a relationship among them simultaneously

[18:59] <Limbic_Region> IOW - provide for a short cut to for all( stuff ) { say }

[18:59] <Limbic_Region> but don't make it just be say all( stuff )

[18:59] <Limbic_Region> hmmm - I have convinced myself I don't like that idea

[19:00] * Limbic_Region shuts up now and leaves the design to the experts

[19:00] <eric256> which idea? so is this a bug or feature at this point? lol

[19:00] <svnbot6> r3115 (iblech) -- Added Makefile.old to the svn:ignore of ext/Test-Builder.

[19:00] <eric256> or undefined as yet?

[19:00] <pmichaud> I haven't fully followed the meaning of    for all ( stuff ) { say }    yet

[19:00] <integral> reify { say reflect "hello & wow" } maybe

[19:01] <autrijus> eric256: it's undefined.

[19:01] <eric256> hmm i. say("this" | "that") also prints both which doesn't seem right

[19:01] <pmichaud> okay, just got for all(stuff) { ... } from S03

[19:01] <Limbic_Region> pmichaud - I am kind of frustrated with the way junctions are currently spec'd so I don't know myself

[19:02] <pmichaud> eric256:  are you specifically interested in junctions?  Or are you trying to test && and || ?

[19:02] <autrijus> eric256: so, foo("this" | "that") actually means

[19:02] <autrijus> foo("this") | foo("that")

[19:02] <pmichaud> say(  "this" | "that" )    ==>   say  any("this", "that" )

[19:02] <autrijus> so foo will be called twice no matter what juctive combinator you use

[19:02] <autrijus> junctive, even

[19:02] <pmichaud> as long as foo accepts junctive scalars

[19:03] <autrijus> that's right.

[19:03] <eric256> autrijus: ohhh. pmichaud i just stumbled on the behavior by accident. i mean ~...don't ask how i hit the & lol

[19:03] <autrijus> :D

[19:03] <pmichaud> in particular, it doesn't do the autothreading if foo(...) accepts a list

[19:04] <autrijus> hm? where is that said?

[19:04] <pmichaud> S09

[19:04] <pmichaud> "In any scalar context not expecting a junction of values, a junction produces automatic parallelization of the algorithm."

[19:04] <autrijus> oh. you mean "accepts a list" as in "imposing a plural context"

[19:04] * Limbic_Region still wants to be able to do all( any(@foo) eq any(@bar)) and have the result be all the matches and not a boolean true/false

[19:04] <pmichaud> autrijus: right

[19:04] <autrijus> that's right then

[19:05] <PerlJam> pm: btw, did you implement & in PGE?

[19:05] <pmichaud> pj: not yet

[19:05] * eric256 has to goto lunch now before his head explodes or possibly implodes

[19:05] <pmichaud> limbic:  so, define the special eq operator I discussed :-)

[19:06] <autrijus> so will == be special as well?

[19:06] <autrijus> ~~? =:=? curious minds wants to know! :)

[19:06] <pmichaud> i.e., define an eq operator that returns the equivalent value instead of a boolean true/false, and you can get   any(@foo) myeq @bar  

[19:07] <Limbic_Region> pmichaud - and as I said, I don't necessarily need to see it in the core but it should be readily available in a generic form as one of the first p6 modules

[19:07] <Limbic_Region> I just don't have the appropriate fu yet

[19:07] <autrijus> use Junc::Util;;

[19:07] <pmichaud> Oh, I suspect it'll end up being    use Sets;  :-)

[19:08] <Limbic_Region> either Sets or Junc::Util is fine by me

[19:09] <Limbic_Region> grrr - real $work 

[19:09] * Limbic_Region wanders off

[19:11] <revdiablo> ok, I really need to build parrot now.

[19:12] <integral> it builds refreshingly faster than pugs ;-)

[19:12] <revdiablo> I wonder if dh_make_perl can handle it nicely

[19:12] <revdiablo> ... or at all

[19:16] <Limbic_Region> looks like volunteers for finishing S29 are being asked for autrijus

[19:16] <autrijus> pmichaud: ping

[19:16] <Limbic_Region> eric256 - perfect opportunity to plunge in head first

[19:16] <autrijus>     if 'localhost:80' ~~ /^(.+)\:(.+)$/ {

[19:16] <autrijus>         my $socket = connect($0, $1);

[19:16] <autrijus>     }

[19:16] <autrijus> pmichaud: assume that $1 is evaluated in Int context.

[19:16] <autrijus> pmichaud: what does it evaluate to? 80? 0?

[19:17] <pmichaud> 1

[19:17] <autrijus> right, 1.

[19:17] <autrijus> but hey, isn't that just killing one of the idioms?

[19:17] <pmichaud> use $1

[19:17] <pmichaud> er

[19:17] <pmichaud> use ~$1

[19:17] <autrijus> and why is it 1 when it has no submatches?

[19:18] <pmichaud> a match object returns 1 if it successfully matched

[19:18] <revdiablo> argh, dh-make-perl is looking for modules, not just any CPAN distribution

[19:18] <autrijus> should it not be 0 (as in, no submatches)

[19:18] <autrijus> er, I thought the numeric context stands for number of submatches

[19:18] <pmichaud> no, I think it's going to be the number of successful matches

[19:18] <autrijus> or is that for quantified capture only?

[19:18] <autrijus> ah ok.

[19:18] <autrijus> so if (xx)+ matches 3 times

[19:18] <pmichaud> it's always 1,  unless :g is specified in which case it may increase

[19:18] <autrijus> $0 would numifiy to 3?

[19:19] <pmichaud> nope

[19:19] <autrijus> still 1?

[19:19] <pmichaud> as far as I know -- that's what Damian's post says

[19:19] <pmichaud> to get 3 one would typically use @{$0}

[19:19] <pmichaud> or maybe +@{$0}

[19:20] <autrijus> ok

[19:20] * pmichaud notes that he didn't write the spec (or have much hand in it) -- he just implements it

[19:21] <pmichaud> hmmm, how do I explain the difference to Aaron (on p6l)?

[19:23] <autrijus> ooh S29 pumpking wanted on p6l

[19:23] <autrijus> pmichaud: thanks for the explanation -- so my understanding was right -- but I think that's very inconvenient

[19:24] <autrijus> sent to p6l for further deliberation

[19:24] <pmichaud> it may indeed be inconvenient, I don't know that anyone had come across that particular issue yet

[19:24] <autrijus> it broke quite a few of our tests :)

[19:24] <elmex> p6 tends to become inconventient in not so few places

[19:25] <autrijus> elmex: hm?

[19:25] <pmichaud> it may be that we decide that match objects in numeric context become the numified version of the string value

[19:25] <autrijus> that would be nice.

[19:25] <pmichaud> that's probably more important and useful than having it be the number of successful matches

[19:25] <pmichaud> which we can always get via a method on the match object

[19:25] <autrijus> yeah.

[19:25] <autrijus> yup.

[19:25] <autrijus> .matches, that is.

[19:26] <Limbic_Region> autrijus - [15:16] <Limbic_Region> looks like volunteers for finishing S29 are being asked for autrijus

[19:26] <autrijus> oh. didn't see that :)

[19:26] <Limbic_Region> I followed it up with 

[19:27] <Limbic_Region> [15:16] <Limbic_Region> eric256 - perfect opportunity to plunge in head first

[19:27] <autrijus> right!

[19:27] <Limbic_Region> I didn't get a reply though

[19:27] * Limbic_Region might have scared him

[19:27] * autrijus hopes not

[19:30] <PerlJam> autrijus: did you see larry's reply regarding  split /(..)*/, 1234567890   ?

[19:30] <autrijus> PerlJam: yes, implemented as such.

[19:30] <autrijus> committing

[19:30] <PerlJam> magic!

[19:30] <autrijus> tests welcome

[19:30] <PerlJam> will do

[19:32] <autrijus> pmichaud: 

[19:32] <svnbot6> r3116 (ninereasons) -- skip a segfaulting test

[19:32] <PerlJam> Hrm.  Is the first arg to split always a RE in perl6?

[19:32] <Limbic_Region> PerlJam - unless it is something else ;P

[19:32] <autrijus> hm, nvm, it's my fault :)

[19:32] <pmichaud> autrijus: glad to help :)

[19:32] <autrijus> :D

[19:33] <autrijus> I forgot that (..)* always matches.

[19:34] <PerlJam> Limbic_Region: in perl5, it's always a regular expression even if you do  split "foo+bar",$string  (i.e. that + is a quantifier not a literal +)

[19:34] <PerlJam> Is perl6 the same?

[19:34] <elmex> why does (..)* always match?

[19:34] <PerlJam> elmex: * means zero or more

[19:34] <PerlJam> elmex: you can always match zero times

[19:35] <elmex> PerlJam: hm....

[19:35] <elmex> k

[19:39] <autrijus> anyone have parrot 0.2.0-release installed?

[19:39] <svnbot6> r3117 (bsmith) -- Added export lists to Pugs.AST.Internals, Pugs.Eval and Pugs.Lexer.

[19:39] <Limbic_Region> PerlJam - I was being silly^h^h^h^h^hunhelpful

[19:40] <integral> hmm, pugs uses the same AST structure to compile and run the code?   I mean there's always Pads with VRefs attached, even at just compile time?

[19:40] <autrijus> integral: yes.

[19:41] <autrijus> the notion of "compile time" in perl is weird

[19:41] <autrijus> the compiler itself is a perl runtime

[19:41] <integral> hmm, it's awkward

[19:41] <autrijus> it is.

[19:41] <autrijus> it's also fun.

[19:41] <integral> it looks like it's the main reason AST.Internals is so big too

[19:41] <autrijus> it's like how TH2 let you run IO in the Q stage.

[19:42] <integral> hmm

[19:42] <autrijus> it's the same idea

[19:42] <integral> But then when the Q bit has run, you're just left with a static AST

[19:42] <autrijus> that is right

[19:42] <autrijus> the static AST is then fed to codegen

[19:42] <integral> that's the bit that perl doesn't have then?

[19:43] <autrijus> perl5 by default doesn't do that

[19:43] <autrijus> it just walks the tree in memory, like pugs does

[19:43] <autrijus> but perl6 will codegen to PIR

[19:43] <autrijus> by default

[19:43] <integral> hmm, another idea: the IVar uses these ScalarClass things,   maybe something similar for Var(?) ?

[19:44] <autrijus> hm?

[19:44] <integral> and in walking the tree it hangs pads etc off the same tree, rather than another?

[19:45] <autrijus> where is this "another"?

[19:45] <svnbot6> r3118 (autrijus) -- * sync pge

[19:45] <svnbot6> r3119 (autrijus) -- * split// now attaches the submatches themselves to the

[19:45] <svnbot6> r3119 (autrijus) --   resulting list.

[19:45] <autrijus> the compiler and runtime shares the same tree that is envExp

[19:45] <autrijus> the parser too

[19:45] <integral> ok,  but do they have to?

[19:46] <autrijus> not sure what the gain would be if they don't

[19:46] <autrijus> but I think theoretically yes

[19:46] <integral> well it means that the Exp tree wouldn't contain Pads, surely?

[19:47] <integral> hmm,

[19:47] <autrijus> you still need the Pad to close the closures over, no?

[19:47] <integral> but you don't have closures until you run code...

[19:47] <autrijus> ...which is what the compiler has to do

[19:47] <autrijus> consider:

[19:48] <autrijus> my $x; BEGIN { $x = 3 }; say $x

[19:48] <autrijus> here the BEGIN{} happens at parsetime

[19:48] <autrijus> even before say is parsed

[19:48] <integral> hrm, I see now

[19:48] <autrijus> we're dealing with a clearly insane language :)

[19:48] <pmichaud> created by clearly insane people.  Nice, that.

[19:48] <pmichaud> :)

[19:48] <autrijus> :)

[19:48] <integral> hmm, but when it comes to separate compilation the value of $x is going to be serialised anyway

[19:48] <autrijus> sure

[19:49] <autrijus> so that's why I say you can use two Exp

[19:49] <autrijus> but the first one (the compile time one)

[19:49] <autrijus> still needs its own pads

[19:49] <autrijus> and all

[19:49] <Odin-LAP> autrijus, pmichaud: Any non-perler could've told you that several years ago.

[19:49] <autrijus> it needs to be a full environment

[19:49] <Odin-LAP> (re: sanity)

[19:49] <autrijus> that's right.

[19:49] <integral> hang on, what does: sub foo { my $x; BEGIN { $x = 3 }; say $x } do?

[19:50] <autrijus> it's the same as

[19:50] <autrijus> sub foo { my $x ::= 3; say $x }

[19:50] <autrijus> er, no

[19:50] <autrijus> it's not the same

[19:50] * Limbic_Region throws in a state() or two just to make it crazier

[19:50] <autrijus> what it does is that it creates a Pad for foo with $x in it

[19:50] <autrijus> that pad has a value of 3 on entry

[19:50] <integral> at the moment sub foo { my $x; BEGIN { $x = 3 }; say $x } foo; foo; foo; prints "3\n\n\n"

[19:51] <_metaperl> Limbic_Region, what is state()?

[19:51] <autrijus> fortunately, this we can check with p5.

[19:51] <Limbic_Region> like static in C

[19:51] <Limbic_Region> only gets initialized once

[19:51] <autrijus> $ perl -le 'sub foo { my $x; BEGIN { $x = 3 }; print $x } foo; foo; foo;'

[19:51] <autrijus> 3

[19:51] <autrijus> \n\n\n

[19:51] <autrijus> same behaviour.

[19:51] <Limbic_Region> let me see if I can find the exmple

[19:51] <autrijus> i.e. the pad with 3 on entry is scratched on reentrance.

[19:51] <integral> personally I say this is weird.   It creates a new pad the other two times, but not the first

[19:51] <autrijus> to not scratch it, you use state()

[19:52] <kolibrie> _metaperl: like my(), except that it is still there the next time the block is entered

[19:52] <Limbic_Region> _metaperl - see http://svn.openfoundry.org/pugs/examples/cashiers.p6

[19:52] <autrijus> integral: line 287 in Eval does that.

[19:52] <autrijus> the reduction rule for

[19:52] <autrijus> reduce (Pad SMy lex exp) = do

[19:52] <autrijus> is clearly doing just that

[19:52] <_metaperl> i see. thanks kolibrie and Limbic_Region

[19:52] <integral> ugg, I really don't like this bit of perl

[19:52] <autrijus> integral: I agree that is weird. I also think it's useful.

[19:53] <autrijus> perl's idea of a lexical scope is much more.. dynamic

[19:53] <autrijus> (it's also much more error prone.)

[19:53] <integral> wouldn't it be an idea to solve then? ;-)

[19:53] <integral> hmm, is this behaviour already spec'ed?

[19:53] <autrijus> I'm not sure on how to "solve" this once you allow BEGIN{}.

[19:53] <autrijus> integral: I think it's supposed to be just like p5 in this regard

[19:53] <integral> I'd say that the $x wasn't visibile to the BEGIN

[19:53] <autrijus> but no, it's not in any of synopsis

[19:54] <integral> (because it doesn't exist until you enter the lexical scope of the sub)

[19:54] <autrijus> I agree it's far saner, but also note that perl's use Module; is specced as

[19:54] <autrijus> BEGIN { require Module; }

[19:54] <autrijus> and it needs to see its lexical scope even if inside a named subroutine

[19:55] <autrijus> in order for pragma modules to work

[19:55] <autrijus> viewing from any angle, it's a huge hack... but taken together it makes an eerie kind of sense.

[19:55] <integral> hmm

[19:55] <autrijus> it's one of those Autostereogram things

[19:56] <wolverian> p6l++ # 22 new posts to read

[19:56] <integral> hrm, one might think that my $x if 0 makes sense too :-/

[19:56] <pmichaud> wolverian: the number will only continue to increase for some time, methinks :-)

[19:57] <pmichaud> I've got a couple of nearly-warnocked posts still outstanding :)

[19:57] <autrijus> pmichaud: I implemented your suggestion in pugs for now

[19:57] <autrijus> it's saner than the kluge I use

[19:57] <integral> would p6l be the right place to ask if this is right?

[19:57] <autrijus> integral: yes.

[19:57] <pmichaud> anytime there's a question about what the language *should* do, it generally belongs on p6l

[19:58] <autrijus> integral: and hey, if you can get @Larry to agree that closure entrance is not created during BEGIN time, I'd be surprised -- but it makes writing compilers much easier

[19:58] <autrijus> ;)

[19:58] <pmichaud> I'm pretty sure $Larry already knows the answer to this puzzle

[19:59] * integral modifies his view slightly: $x should be visible, but as some kind of "prototype" variable, that you can't really assign to

[19:59] <autrijus> mmm single-assign perl6

[19:59] <autrijus> j/k

[20:00] <autrijus> integral: but if $x is visible, you can also rebind it

[20:00] <autrijus> and it will also kill the pad

[20:00] <autrijus> unless you mandate that the pad is read-only during BEGIN time

[20:00] <autrijus> but then, the entire module is inside a BEGIN{} block

[20:00] <autrijus> when use'd

[20:00] <integral> hmm

[20:01] <svnbot6> r3120 (autrijus) -- * implement pmichaud's suggestion of numifiing

[20:01] <svnbot6> r3120 (autrijus) --   match objects using its string value.

[20:01] <Limbic_Region> just change used modules to a sourcefilter 

[20:01] <autrijus> cf. "Variable will not stay shared" fiasco

[20:01] <Corion> bbl (firefox upgrade)

[20:01] <pmichaud> autrijus: if p6l comes back and agrees with my suggestion, then it'll end up being the same in PGE itself.  FWIW.

[20:02] <eric256> what method should be used for defaulting class properties? is that what the BUILD method is for? and if i define a build method will i loose the ability to pass properties as part of .new ?

[20:02] <autrijus> pmichaud: sure, cool

[20:02] <eric256> s/properity/attribute/ i guess

[20:02] <autrijus> eric256: see Test::Builder :)

[20:02] <autrijus> ext/Test-Builder/

[20:03] <autrijus> note that pugs doesn't yet run it (but hopefully soon)

[20:03] <autrijus> once pugs run it, though, it will be the reference of OO semantics for some time.

[20:03] <Limbic_Region> chromatic wrote that right?

[20:04] <autrijus> right, with help from dconway and luqui

[20:04] <autrijus> iirc

[20:04] <Limbic_Region> grrr - I want to know who broke the Monastery

[20:05] <_metaperl> ?game

[20:05] <Limbic_Region> the bot left _metaperl

[20:05] <_metaperl> oh... it was a lot of fun while it lasted

[20:05] <autrijus> you can run it too ;)

[20:05] <Limbic_Region> probably needs to /msg by default

[20:06] <Limbic_Region> or at least remember who started what game

[20:07] <Limbic_Region> autrijus - out of curiosity, is there a way to determine what rev you are on straight from the pugs executable?

[20:07] <Limbic_Region> pugs -V doesn't have it

[20:07] <eric256> reading its source doesn't seem to help me.  i can tell how to default method parameters...but not class attributes....unless making a BUILD methods with the right parameters defaulted is what i need...which i guess it kind of is.

[20:07] <integral> Limbic_Region: ./pugs -V:pugs_revision

[20:07] <Limbic_Region> it always says 0

[20:07] <integral> oh, you're on svk?

[20:08] <autrijus> eric256: it is. you can also use

[20:08] <autrijus> has $.foo = 4;

[20:08] <autrijus> which, although legal, is not yet supported in pugs

[20:08] <integral> someone should fix util/version_h.pl so it groks SVK too

[20:08] <Limbic_Region> integral - I am getting binary Win32 builds from Jonathan

[20:08] <Limbic_Region> http://www.jwcs.net/~jonathan/perl6/

[20:08] <integral> hmm, he mustn't be using svn I suppose

[20:09] <eric256> okay. so i'll just wait on that then ;)

[20:09] <pmichaud> eric256:  did you look at S12?

[20:09] <pmichaud> All classes inherit a default C<new> constructor from C<Object>.

[20:09] <pmichaud> It expects all arguments to be named parameters initializing attributes

[20:09] <pmichaud> of the same name.  You may write your own C<new> to override the

[20:09] <pmichaud> default, or write constructors with any other name you like. 

[20:09] <Limbic_Region> oh well - at least he does daily builds - I can't be more than what - say 60 or 70 revisions behind each morning

[20:12] <autrijus> so, if anyone is using parrot 0.2.0-release

[20:12] <autrijus> please try pge with trunk

[20:12] <eric256> crap. i didn't read down it far enough.

[20:12] <autrijus> and see if you can still match anything

[20:12] <autrijus> i.e. if it just curls up and die :)

[20:13] <pmichaud> the latest versions of pge won't run with parrot 0.2.0-release

[20:13] <pmichaud> 0.2.0 doesn't have the find_cclass and find_not_cclass ops

[20:13] <autrijus> oh. ok. aw.

[20:13] <pmichaud> those were just added yesterday

[20:13] * autrijus ponders what to do

[20:14] <PerlJam> quick!  Release parrot 0.2.1 

[20:14] <autrijus> demand trunk parrot? :)

[20:14] <autrijus> PerlJam: nah, parrot's release schedule is up to 4x slower than ours

[20:14] <PerlJam> 4x?  I think it's much slower than that  :)

[20:14] <autrijus> it's now monthly.

[20:14] <autrijus> chip++

[20:14] <Limbic_Region> 1xmonth versus 1xweek

[20:15] <pmichaud> autrijus:  well, I can't imagine anything in pge that will require more from parrot.  It might be worthwhile to get a pugs-parrot release

[20:15] <pmichaud> i.e., just build the equivalent of a release for distribution with pugs until the next official parrot release

[20:15] <pmichaud> it ought to be a one-time thing

[20:15] <autrijus> pmichaud: mayyybe.

[20:15] <Corion> Hmmm. While browsing the tests, I found # FIXME tests that were commented out. Should these be converted into skip() tests, so we find them easier? Or is grep -l FIXME Good Enough?

[20:15] <autrijus> need to talk with leo about that

[20:15] <Corion> I've grown fond of the HTML view of things

[20:15] <pmichaud> I don't believe I'm going to need anything new from parrot to fill out PGE

[20:16] <pmichaud> but I definitely needed find_cclass and find_not_cclass

[20:16] <PerlJam> pmichaud: famous last words ;)

[20:16] <pmichaud> and they just didn't get added in time for 0.2.0

[20:16] <_metaperl> is PGE supposed to add PCRE for any language compiling to Parrot?

[20:16] <pmichaud> _metaperl: that's my vision

[20:16] <Limbic_Region> P6CRE right

[20:16] <PerlJam> PGE adds PGE for any language compiling to parrot  :-)

[20:17] <pmichaud> yeah, it's more than just regular expressions :-)

[20:17] <Limbic_Region> right

[20:18] <autrijus> actually we have Inline::Parrot :)

[20:18] <autrijus> in CPAN

[20:18] <autrijus> so maybe Regexp::PGE?

[20:18] <autrijus> or call it... *gasp* Perl6::Rules

[20:18] <pmichaud> heh

[20:20] * Limbic_Region can't imagine an anarchist wanting to follow "the rules"

[20:20] <pmichaud> it's a verb, not a noun :-)

[20:20] <autrijus> nah. "rules" as in "anarchism rules"

[20:20] <autrijus> right.

[20:22] <boogie> autrijus: ghc compiled (today's 6.4 snapshot). just another bug

[20:22] <svnbot6> r3121 (autrijus) -- * revert last change for now as it breaks parrot 0.2.0

[20:22] <svnbot6> r3122 (bsmith) -- Now tries to use the svk "Mirrored from" revision number if it's not a svn

[20:22] <svnbot6> r3122 (bsmith) -- checkout.

[20:22] <boogie> Linking ...

[20:22] <boogie> /usr/local/lib/ghc-6.4.20050506/libHSrts_thr.a(Schedule.thr_o): In function `schedule':

[20:22] <boogie> Schedule.thr_o(.text+0x1a7): undefined reference to `awaitEvent'

[20:22] <boogie> collect2: ld returned 1 exit status

[20:24] * boogie going to bed. it was enough for him today...

[20:24] <autrijus> boogie: link without threads

[20:24] <autrijus> you can fix it in Makefile.PL

[20:24] <autrijus> that should work

[20:24] <autrijus> i.e. remove -threads in Makefile

[20:28] <svnbot6> r3123 (corion) -- Changed a test from ok(eval(...)) to eval_ok()

[20:28] <PerlJam> pm: I was just looking at the characater class stuff in P6Rules ... Is there some reason you didn't make the charclass and charmatch stuff part of the constructor for PGE::Exp::CharClass?

[20:29] <Corion> I'm moving stuff out of t/pugsbugs/ if it now works ;)

[20:29] <autrijus> Corion++

[20:29] <Limbic_Region> Corion plus plus

[20:29] <autrijus> Corion: thoughts on championing S29?

[20:29] <autrijus> Corion: we can all maintain it under docs/S29Draft.pod

[20:29] <pmichaud> pj: yes

[20:29] <Corion> "championing" ? Like, taking it over?

[20:29] <pmichaud> there's not any constructor methods for the subclass, only for the base class

[20:29] <autrijus> Corion: yeah, http://www.nntp.perl.org/group/perl.perl6.language/21097

[20:29] <Limbic_Region> Rod asked for volunteers

[20:30] <Corion> Hmmm - I don't have much time, resp. want-need to spend it on other stuff too ... But I can try, wiki-style :)

[20:30] <pmichaud> more to the point, at present in parrot there's no way to get a subclass to be able to call a superclass' method

[20:30] <autrijus> Corion: I think maintaining it under docs/S29Draft.pod is a good idea, but we still need an editor :)

[20:30] * Limbic_Region notes the time and heads homewards

[20:30] <autrijus> pmichaud: uh, what?

[20:30] <Corion> autrijus: I'm good at cleaning up stuff ;)

[20:30] <autrijus> pmichaud: you mean like ->SUPER:: ?

[20:30] <PerlJam> pm: Oh I see.  So you'd have to duplicate all of the logic were you to do that?

[20:30] <pmichaud> pj: right

[20:30] <boogie> autrijus: you mean that '-threaded' should go to ghc, or should I remove it? :)

[20:31] <autrijus> boogie: remove it will likely solve the link error

[20:32] <pmichaud> autrijus:  what is ->SUPER:: ?

[20:32] <autrijus> pmichaud: it's this $self->SUPER::method()

[20:32] <autrijus> I was not sure what you're talking about that parrot doesn't do

[20:32] <PerlJam> If I can keep the wife and kids happy without my attention, I may add character class support to Glob.pir tonight.  Otherwise it'll have to be on the weekend.

[20:32] <pmichaud> oh, you mean from perl.  In Parrot, as far as I know there's not a way for a subclass to dispatch to an overridden method in the superclas

[20:32] <pmichaud> s

[20:33] <Corion> btw, is :todo now invalid? I got an error in a commented-out line which I could fix (resp. change into another error) by making it into "todo => 1"

[20:33] <autrijus> huh?

[20:33] <pmichaud> pj:  okay, just be aware that the interface/attributes for the ::CharClass object are likely to change

[20:33] <autrijus> Corion: it should be ok. weird -- but I'm doing $work, no time to investigate yet

[20:33] <Corion> np

[20:34] <pmichaud> autrijus: http://www.nntp.perl.org/group/perl.perl6.internals/29323

[20:34] <svnbot6> r3124 (ninereasons) -- todo<bug> a failing test

[20:34] <svnbot6> r3125 (corion) -- Pugsbugs cleanup: Move now working tests to their resp. directories, change parsefailing tests to new (but still failing) valid syntax

[20:34] <PerlJam> pm: sure. But the method that's there now works right?

[20:34] <autrijus> pmichaud: thanks!

[20:34] <pmichaud> pj : yes

[20:34] <PerlJam> good enough for me :)

[20:34] <pmichaud> autrijus: super class method calls are certainly to be added in Parrot -- afaik they aren't there yet

[20:35] <pmichaud> there's certainly nothing in the docs about them, and when I asked leo about them last week they weren't available yet and leo is looking for comments

[20:36] <PerlJam> you know, I asked the dbdi-dev mailing list if they were still alive and I bet the ability to call super's methods is one of the features they're missing (and thus partly why the list is in hibernation)

[20:36] <pmichaud> yes, I was surprised by it as well.  But at present I've just worked around it in PGE

[20:36] <autrijus> ok... in that case I think we don't need to create a special parrot-pge-pugs snapshot :)

[20:37] <autrijus> we'll just demand people to use parrot trunk ;)

[20:37] <autrijus> because codegen won't work reasonably on 0.2.0-release as well

[20:37] <autrijus> without short attribute names, etc

[20:37] <PerlJam> autrijus: at pugs' rate of development that's not an unreasonable demand

[20:38] <autrijus> true :)

[20:39] <nothingmuch> lambdacamels: how would you name an object that has arbitrary fields with accessors, can inherit data fields from others like it, and push data fields upwards to those it inherits from?

[20:39] <svnbot6> r3126 (corion) -- More tests moved out of t/pugsbugs/

[20:40] <autrijus> "push data field upwards"?

[20:40] <Corion> nothingmuch: "generic" ?

[20:40] <nothingmuch> Corion: eh?

[20:40] <autrijus> "classless"?

[20:40] <Corion> nothingmuch: Your description could be all or nothing :)

[20:40] <nothingmuch> think of it as a hash

[20:40] <Corion> "prototyped" or "hierarchical" could be good names as well

[20:41] <nothingmuch> where you have all the keys from the hashes you derive from

[20:41] <Corion> (mostly synonymous with "classless")

[20:41] <Corion> nothingmuch: Ah. "classless" it is. Like in JavaScript.

[20:41] <integral> (Self or Class::Prototyped)

[20:41] <nothingmuch> and you can also push your own keys upwards to your parents

[20:41] <nothingmuch> wait wait wait

[20:41] <Corion> nothingmuch: That's an ugly idea.

[20:41] <Corion> nothingmuch: You don't want propagation in both directions.

[20:41] <Corion> (at least I don't want that)

[20:41] <nothingmuch> one is inheritence, and defaultness

[20:41] <nothingmuch> this is not an object system

[20:42] <nothingmuch> Corion: yes I do

[20:42] <Corion> because if you push values upstream, they propagate downstream through the whole tree again

[20:42] <nothingmuch> that's exactly the point

[20:42] <Corion> Ugh.

[20:42] <nothingmuch> =)

[20:42] <nothingmuch> nevermind, it works

[20:42] <Corion> Maybe you have a use case for it, but why not simply modify the parent.

[20:42] <nothingmuch> i just need a name

[20:42] <nothingmuch> because the object modifying the child does not get to decide whether the parent sees it's changes

[20:43] <nothingmuch> it really is simply modifying the parent, except that it's in two steps

[20:43] <autrijus> ok, I've decided: pugs will no longer bundle PGE; people who want rules need parrot trunk at all times; all PGE checkins happen at parrot tree.

[20:43] <Corion> autrijus: One day, Pugs and Parrot should be one bundle ... That makes it easier for lazy people like me ;)

[20:43] <autrijus> Corion: that day may be sooner than you think :)

[20:44] <autrijus> (and ponie too)

[20:44] <nothingmuch> so! anybody got a nice name? Hierarchal is too long to type, methinks. It's not classes. Generic and Prototyped don't mean anything to me

[20:44] <integral> ponie now uses svn:external thingies

[20:44] <autrijus> yup, I asked for that :)

[20:44] <jhorwitz> autrijus: trying to return exit code from system() but getting a type error.  can you take a real quick look at a paste?  probably really stupid...

[20:45] <autrijus> sure.

[20:45] <eric256> are junctions working? because my $choice; until ($choice == 'a' | 'b' | 'c') {} always gets skipped

[20:45] <pasteling> "jhorwitz" at 216.52.77.2 pasted "for autrijus -- system() type error" (24 lines, 909B) at http://sial.org/pbot/10095

[20:46] <Corion> nothingmuch: I think there was some Config:: module that does Just What you need recently

[20:46] <eric256> nm i;'m dumb

[20:46] <autrijus> jhorwitz: that reads "liftIO"

[20:46] <autrijus> rv <- liftIO $ system cmd

[20:46] <nothingmuch> Corion: we've looked at a whole lot of these, around two weeks ago... is it that new?

[20:46] <eric256> string eq not ==....so fucused on all the new stuff

[20:47] <autrijus> it's a great way to ensure that this won't happen in an atomic{} block :)

[20:47] <Corion> nothingmuch: Hmmm. Around last week should have been it, yes.

[20:47] <jhorwitz> autrijus: will try that.  need to learn all these new things...  :)

[20:47] <autrijus> jhorwitz: you're in the Eval monad; to do IO things in an Eval monad, you need to lift it, that's all

[20:47] <nothingmuch> http://search.cpan.org/~mgraham/Config-Context-0.08/lib/Config/Context.pm ?

[20:47] <autrijus> also see liftSTM elsewhere for in-memory operations

[20:49] <Corion> autrijus: Should I send a mail to p6l regarding S29 or do we simply take over? I don't want to subscribe to p6l as I [dw]on't read it.

[20:49] <nothingmuch> Corion: ?

[20:49] <jhorwitz> autrijus: that did the trick.  getting another error in the return, but i think i can handle it.  :)

[20:50] <autrijus> cool :)

[20:51] <autrijus> (effect typing & dependent typing)++ # damn good idea

[20:51] <autrijus> Corion: er. sure, send a mail to rod, ccing p6l, about the plan

[20:51] <Corion> nothingmuch: Aaah, I now get it - that URL was to me ;) Yes, that's the one I thought about I think.

[20:51] <Corion> nothingmuch: Maybe "Templated" or something like that is also a good name for your stuff.

[20:52] <nothingmuch> Corion: in that case, that thing is cool, but more than what we need for some things, and doesn't really work well with this hierarchal model progressing

[20:52] <nothingmuch> the tree changes over time

[20:53] <jhorwitz> autrijus: maybe a BOF at YAPC for those of us not going to the hackathon?

[20:53] <autrijus> jhorwitz: sure -- talk to rdice, not me :)

[20:53] <autrijus> I'm fine with BOFs

[20:54] <autrijus> I'll also stay around in the city for a while after the conf

[20:54] <autrijus> so if you want even more hacking, I'm fine with that too

[20:54] * nothingmuch 's flight is late at night the day after YAPC ends

[20:54] <nothingmuch> so I can be available too

[20:55] <autrijus> cool

[20:55] <autrijus> I hear this year's going to be 500+ people

[20:55] <nothingmuch> is that a lot or a little?

[20:55] <ingy> autrijus: good job with release

[20:55] <autrijus> nothingmuch: that is huge, for a yapc

[20:55] <autrijus> ingy: thanks :)

[20:56] <nothingmuch> really? nice to know =)

[20:56] <autrijus> ingy: I want the io() primitive, seriously :)

[20:56] <nothingmuch> YAPC::Israel averaged around 110 people

[20:56] <autrijus> (along with everything that comes with it)

[20:56] <ingy> I checked Perl6::Bible and seems up to date

[20:56] <ingy> autrijus: what is the status of io() primitive?

[20:56] <autrijus> ingy: it's OK'ed but not implemented yet.

[20:56] <ingy> I was going to write about IO::All to p6l

[20:56] <autrijus> ingy: first we need to write it into S29.

[20:57] <autrijus> which require a new champion for s29

[20:57] <pmichaud> and it needs p6l's blessing

[20:57] <autrijus> pmichaud: Larry blessed it a while ago

[20:57] <ingy> just to clarify my thoughts

[20:57] <autrijus> except the < and > bits

[20:57] <autrijus> (replaced with <== and ==>)

[20:57] <ingy> right

[20:57] <ingy> I need to reread and make some points to the list

[20:57] <pmichaud> autrijus: ah, I must've missed that.  thanks.  Then yes, we just need an S29 champion.  I'd do it but prefer to spend my energies elsewhere -- another volunteer would be good

[20:57] <autrijus> ingy++

[20:58] <autrijus> pmichaud: exactly me thoughts :)

[20:58] <autrijus> s/me/my/

[20:58] * PerlJam hears Queen playing in the background

[20:59] <PerlJam> must be my imagination ... ;)

[20:59] <pmichaud> "where are the champions...?"

[20:59] <Corion> Oh. And I just volunteered for S29, and the mail just went out  ...

[20:59] <pmichaud> "no time for losers... cuz we need a champion... yay!"

[20:59] <PerlJam> Corion++

[20:59] <pmichaud> corion++

[20:59] <Corion> While I'm not really fond of io()

[21:00] <PerlJam> Corion: why not?

[21:00] <pmichaud> corion:  I can request commit privs for you to the perl6 repository

[21:00] <pmichaud> so you can maintain s29.pod directly in the repository

[21:00] <Corion> PerlJam: Perl5 open "|rm -rf" was a bad idea, and so is much of IO::All

[21:00] <Corion> pmichaud: I thought S29 was in the Pugs repository?

[21:01] <pmichaud> corion:  pugs has been maintaining a separate draft for the time being

[21:01] <ingy> autrijus: I can write io() into S29

[21:01] <pmichaud> but it properly belongs in perl6/doc/trunk/syn

[21:01] <ingy> or give it a shot at least

[21:01] <Corion> (as the default. It's convenient if you know-what-you're-doing, but as the default, users don't know that)

[21:01] * ingy is a champion

[21:01] <pmichaud> I offerred commit access to rod, but he preferred to maintain it on his own site rather than learn svn

[21:01] <pmichaud> or something like that

[21:01] <Corion> pmichaud: Hmmm. Oh well. So I'll have to get yet-another-login/password ...

[21:01] <Corion> as long as it's svn that's OK.

[21:02] <pmichaud> corion:  you're welcome to maintain it wherever you wish

[21:02] <Corion> maybe I should install svk locally

[21:02] <ingy> pmichaud: I'll email Rod about it

[21:02] <PerlJam> Corion: It's not a bad idea, just a tool to be used with care.  At least in perl6 open() won't be that tool anymore.

[21:02] <pmichaud> ingy:  well, if corion will take over S29 then it all works out I think :)

[21:02] <Corion> PerlJam: ??? If instead of open() you now say io(), people will use that as a backdoor

[21:03] <ingy> oh ok. i missed that

[21:03] <Corion> PerlJam: If io() starts a webserver, that's a huge security hole. the file/directory traversal part of io() is cool, the rest is a bad idea.

[21:03] <Corion> ingy: Feel free to take S29 instead of me - I'm not really sure I should be doing this :)

[21:03] <Corion> ingy: It would also get io() much more power :)

[21:03] <PerlJam> Corion: perl's job is to provide options.  It's the community's job to come up with best practices or other means of preventing people from shooting themselves in the foot.

[21:03] <ingy> Corion: I'll give io() a first draft

[21:04] <ingy> I don't want all of S29 btw :p

[21:04] <Corion> PerlJam: It took Perl5 up to 5.6.x to get the three-arg-open(). I don't want this problem in Perl6.

[21:04] <meppl> guten abend

[21:04] <Corion> ingy: Bah ;)

[21:04] <pmichaud> *nobody* wants S29 :-)

[21:04] <pmichaud> what we really need is someone to champion it and farm out specs to others

[21:04] <pmichaud> or coordinate patches

[21:05] <PerlJam> meppl: guten tag :)

[21:05] <pmichaud> I'll be glad to coordinate patches to S29, I just don't want to be writing the contents

[21:05] <ingy> pmichaud: an S29 Pumpking!

[21:05] <pmichaud> actually, I'll coordinate patches to any design document :-)

[21:05] <Corion> PerlJam: io() opens a giant load of security holes if it opens server ports. Client ports are convenient, but not really necessary either in the sense of DOS attacks.

[21:05] <meppl> nett .

[21:05] <ingy> a  dubious title indeed :)

[21:06] <Corion> ingy: If we have persons in charge of the ~~ operator, we can also have Pumpkings in charge of S29

[21:06] <ingy> heh

[21:06] <ajs> I can take S29... what's the worst that can happen, right? ;-)

[21:06] <pmichaud> well, if Rod is stepping down as S29 coordinator, and if there's no immediate replacement, I'm probably going to just take the existing S29 and put it in the perl6/docs repo

[21:07] <ajs> pmichaud can tell me where I get it wrong :)

[21:07] <pmichaud> and I'll take patches from there.  It would help me to see them all as they come in :)

[21:07] <ingy> lunch &

[21:07] <meppl> guten abend perljam

[21:07] <meppl> so

[21:07] <meppl> good evening perljam

[21:07] <autrijus> how about this -- ajs collects suggestions and new checkins

[21:08] <autrijus> and hand them to pmichaud for perl6/docs/

[21:08] <autrijus> once it hits there, it's considered to be the current consensus :)

[21:08] <pmichaud> that's perfect

[21:08] <pmichaud> others can send me patches directly, and I'll either forward them to ajs or check them in directly as appropriate

[21:08] <autrijus> cool

[21:08] <pmichaud> but ajs can be the point person for it :)

[21:09] <autrijus> and pmichaud can ensure its sanity

[21:09] <autrijus> (or lack thereof)

[21:09] * Corion feels relieved :)))

[21:09] <pmichaud> or at least point out the seemingly insane parts 

[21:09] <autrijus> Corion: :)

[21:09] <pmichaud> corion:  you're not off the hook, you still have to submit patches :)

[21:09] <autrijus> but at least he won't feel compelled to read the p6l firehose :)

[21:10] <pmichaud> indeed.  All of the lists have been quite a firehose lately, and I suspect it will get bigger throughout the summer

[21:10] <Corion> indeed :)

[21:11] <Corion> I can sit back and snipe at everybody :)

[21:11] <PerlJam> just wait until we have a "real" perl6 compiler

[21:11] <PerlJam> "pugs says this, but perl6 says this.  Who's correct?"

[21:11] <ajs> pugs was here first :)

[21:11] <Corion> PerlJam: I don't see any "real perl6 compiler" in the near future

[21:11] <ajs> or does the homesteading thing not work :-)

[21:12] <PerlJam> Corion: I do.

[21:13] <Odin-LAP> Hmm.

[21:13] <Corion> PerlJam: Once the run time library is native (to the "real" Perl6 compiler) that maybe starts to happen, but writing a (cross-platform, native) runtime library is hard even if you steal from Perl6

[21:13] <Corion> err - steal from Perl5

[21:13] <Odin-LAP> What is really needed is a way to transport pugs from Haskell to Perl6...

[21:13] <autrijus> Corion: don't underestimate the parrotfolks :)

[21:13] <PerlJam> Corion: pm has said there will be an alpha perl6 compiler before the end of the third quarter this year.  I think he's a little optimistic, but I think than an alpha perl6 compiler is defeinitely doable this year.

[21:13] <Odin-LAP> And essentially turn it into the "real" compiler...

[21:13] <Corion> autrijus: Yeah, maybe I underestimate them

[21:14] <autrijus> I see three bootstrapping routes from here; the good thing is, all three routes complement each other

[21:14] <autrijus> and can work in a concert

[21:14] <Corion> Heh. 1 unexpected success in r3126 - http://datenzoo.de/pugs/win2k.html

[21:14] <wolverian> autrijus: could you explain them? :) 

[21:14] <autrijus> Redundant Array of Insane Hackers

[21:14] <PerlJam> autrijus: 3?  which are they?

[21:16] <autrijus> PerlJam: #1 is writing a PugsAST/PIR backend for Jhc/GHC, so we can compile Pugs itself to P6/PIR

[21:16] <autrijus> (and from there, use Pugs's Perl6->Parrot codegen)

[21:17] <pmichaud> pj:  I'm more optimistic about it than ever

[21:17] <pmichaud> not only do I think we'll have a parrot p6 compiler by Q3 this year, I'm really hoping for OSCON

[21:18] <autrijus> #2 is to use Pugs's Perl6->Parrot codegen monad and AST, but instead of compiling haskell to pir/p6, we translate the generating parts by hand into pir/p6.

[21:19] <autrijus> this assumes that the parser is already in p6 rules.

[21:20] <pmichaud> and of course, there's the pure p6/parrot bootstrap, which is the direction I'm still heading (no reflection on pugs)

[21:20] <autrijus> and also that we can compile the translated p6 code to pir

[21:20] <autrijus> yes. #3 is writing the codegen and ast transformer in perl6.

[21:20] <autrijus> or writing them in pir, and backtranslate to p.

[21:20] <autrijus> or writing them in pir, and backtranslate to perl6.

[21:20] <wolverian> did you just try to tab-complete 'perl6'? :)

[21:20] <autrijus> no :)

[21:21] <Juerd> 20:51 < autrijus> $foo .= chomp;

[21:21] <Juerd> 20:51 < autrijus> if you want destructive chomp

[21:21] <Juerd> 20:51 < autrijus> iirc it's been proposed by Juerd.

[21:21] <svnbot6> r3127 (corion) -- Match capture variables $1 ... now reset after a failed match. Also promoted a hardfail() to eval_ok()

[21:21] <svnbot6> r3126 (corion) -- More tests moved out of t/pugsbugs/

[21:21] <Juerd> Yes, but there was no discussion about non-method chomp

[21:21] <autrijus> pmichaud: there needs to be a "lifting" stage anyway... if you write parser, codegen etc in PIR, there still needs to be a PIR->Perl6 compiler or hand translation

[21:21] <autrijus> that is not entirely different from Haskell->Perl6 :)

[21:22] <pmichaud> hand translation, likely

[21:22] <Juerd> .= has been blessed, but as far as I know, there has been no specific ruling on the consistency of non-.= methods

[21:22] <autrijus> yeah. and whenever there's hand translation, there's potential difference in semantics

[21:22] <Juerd> I want them to consistently not-mutate, though.

[21:22] <pmichaud> but yes, there's a lifting stage no matter what

[21:22] <autrijus> and that's where our 7000 tests come into play :)

[21:23] <PerlJam> autrijus: And which of the 3 will you be working on? :)

[21:23] <autrijus> PerlJam: likely all 3

[21:23] <PerlJam> I think #2 probably has the best chance

[21:23] <Juerd> 7000 already

[21:23] <autrijus> PerlJam: the beauty is that they can _all_ work at th same time  :)

[21:23] <PerlJam> unless pm takes that as a challenge and steps up #3 just to spite me :)

[21:24] <Juerd> Are there statistics about the number of tests, over time?

[21:24] <Juerd> I wonder if there's some moore-like law to be found :)

[21:24] <autrijus> if all three works, we get, a parrot-native haskell compiler, a codegen that can compile perl6 to PIR, C#, C--

[21:24] <Juerd> "the number of tests doubles every $x days"

[21:24] <pmichaud> pj:  I did say that I already have a bottom-up parser in PIR :)

[21:24] <pmichaud> right now I'm working on the operation subroutine specs

[21:24] <autrijus> and crazy two-way round tripping between various ASTs

[21:25] <autrijus> well, not that crazy

[21:25] <autrijus> scheme people had that, like, forever

[21:25] <Corion> round-tripping is important for compiler regression testing - if the second round of round-trips changes anything, you've got bugs.

[21:25] <autrijus> but it'd be new to perl :)

[21:25] <pmichaud> so far I'm able to handle  prefix:, infix:, postfix:, postcircumfix:, circumfix:, and term: into the parser

[21:25] <pmichaud> I'm basically missing the metas and coerce:

[21:26] <ajs> autrijus: Has CL gotten past that stage yet? ;-)

[21:26] <autrijus> ajs: sadly I know nothing about CL :)

[21:26] <svnbot6> r3127 (corion) -- Match capture variables $1 ... now reset after a failed match. Also promoted a hardfail() to eval_ok()

[21:26] * ajs works in a CL shop, but not a CL guy... it's on the list

[21:27] <autrijus> PerlJam: also, re: which parts will I be working on... I'll use whatever that works :)

[21:27] <Juerd> pmichaud: Does statement: fit in that list, or is it parsed more sub-like?

[21:27] <pmichaud> I'm planning that statement: will be handled top-down

[21:27] <pmichaud> statement: and statement-modifier: are likely to be the interface between the top-down and bottom-up parsing regimes

[21:28] <autrijus> PerlJam: however, I don't see codegen and reduction logic going away from Haskell to PIR or P6 any time soon

[21:28] <pmichaud> autrijus:  unfortunately, I can never be sure what "not soon" means when you say it :-)

[21:28] <autrijus> PerlJam: the correctness guarantee offered by GADT is not easily replaced -- not until we make sure P6 offers something like that :)

[21:29] <ajs> pmichaud: where do I get my hands on the current state of S29?

[21:29] <Corion> We simply port GHC to Perl6

[21:29] <autrijus> Corion: that's #1 :)

[21:29] <autrijus> pmichaud: it means, I think, at least a couple months

[21:29] <pmichaud> well, I'll answer with a reverse-question -- what's the status of the S29 that's living in the pugs repo?

[21:30] <wolverian> maybe someone should ask about perl6's equivalent of GADTs on p6l.

[21:30] <pmichaud> Rod's latest draft is in http://www.rodadams.net/Perl/S29.pod

[21:30] <wolverian> (someone that understands them, that is. which is not me.)

[21:31] <autrijus> pmichaud: no difference.

[21:31] * eric256 has nearly completed an OO mini RPG for pugs. ;)

[21:31] <autrijus> well, three empty newlines :)

[21:31] <autrijus> eric256: oh. wow!

[21:32] *** knotty_ is now known as knotty

[21:32] <pmichaud> well, ajs, if they're both the same, then you can use either one for now.  Just send me one when you're ready and I'll replace it in the syn tree

[21:32] <pmichaud> and we'll call it official then

[21:36] <autrijus> fwiw, I don't think I like the idea of Pugs and Perl6 having different semantics, really :)

[21:36] <autrijus> I'd much rather to share all of <grammar codegen ast> :)

[21:37] <autrijus> and simply solve intermediate technical problems that prevents sharing, by eg. embedding and extending

[21:37] <pmichaud> I don't think Pugs and Perl6 should have different semantics either, and yes, we can share wherever we can :)

[21:38] <autrijus> and where translation absolutely must happen, write compiler instead of translate by hand :)

[21:38] <autrijus> (because hand-translation lose semantics)

[21:38] <autrijus> but that's just my preference. :)

[21:38] <PerlJam> automate automate automate

[21:39] <pmichaud> we just want to make sure we don't end up with a piece that we only have in a compiled form with no way to rebuild it

[21:39] <autrijus> right. and we do that by keeping the master source is the current most readable/writable form

[21:39] <Juerd> Aw, so I can't go and write bytecode by hand? :(

[21:39] <autrijus> and compile it down to other representations as needed :)

[21:40] <pmichaud> exactly

[21:40] <autrijus> from that POV, P6 should be the master source (provided no semantic is lost)

[21:40] <PerlJam> autrijus: so ... the source will be in XML?  :>

[21:40] <autrijus> PerlJam: no, in EBCDIC UTF-9

[21:41] <autrijus> encoded as aperiodic Wang tiling patterns

[21:44] <eric256> does map still work the same or do i need to go relearn map? ;)

[21:44] <autrijus> not exactly the same

[21:44] <autrijus> map foo($_), @bar; # no longer works

[21:44] <autrijus> need to write

[21:44] <autrijus> map { foo($_) } @bar

[21:44] <autrijus> or

[21:44] <autrijus> @bar.map:{ foo($_) }

[21:44] <autrijus> in other words, implicit closure form is verboten

[21:47] <ajs> pmichaud: the only difference between those two versions is the one in the repository has a "=for review" around line 143

[21:50] * integral wonders what uses Show Pad

[21:51] <eric256> hehe i started with junctions and a given but they have been refactored out. lol ;(

[21:53] <eric256> map seems to be flattening into a string....

[21:59] <autrijus> integral: the compiler used to use that, but no longer

[21:59] <autrijus> integral: so it's there just so Env can be Show sensibly

[21:59] <autrijus> integral: feel free to raze it!

[21:59] <integral> YAY!

[21:59] <autrijus> found a spot to attack finally? :)

[22:00] <integral> just a few bits, unfortunately

[22:00] <integral> it's seeing the structure that's hard

[22:03] <clkao> *yawn*

[22:03] <pmichaud> ajs: (sorry for delay) -- okay, I'll just copy S29.pod into the repository then -- will have to do it a bit later

[22:05] <eric256> if i do $person.weapons{'a'} = Weapon.new(:name("sword"), :power(5) );

[22:05] <eric256> how would i then access that ?  $person.weapons{'a'} right?

[22:07] <autrijus> I imagine so, yes

[22:07] <pmichaud> ummm, wouldn't you want   %person.weapons{'a'}  there ?

[22:07] <autrijus> see Set.pm for a working example

[22:07] <autrijus> hm?

[22:07] <autrijus> sigil is invariant, no?

[22:07] <autrijus> $person is the object

[22:07] <autrijus> $person.weapons is the accessor

[22:08] <pmichaud> ah, okay, I was misreading it

[22:08] <eric256> so then i have

[22:08] <eric256> $self.weapons.keys.map:{ "\t" ~ $_ ~ "-attack with " ~ $self.weapons{$_}.name ~ "\n"};

[22:08] <autrijus> oh btw.

[22:08] <autrijus> you can write

[22:08] <eric256> but the $self.weapons{$_}.name doesn't like me at all.

[22:08] <autrijus> "\t$_-attack with $self.weapons{$_}.name\n"

[22:09] <autrijus> eric256: check in your code under examples/ so we can see you?

[22:09] <autrijus> eric256: your email please -- I'll make you a committer :)

[22:09] <pmichaud> what is .name there?

[22:09] <pmichaud> does it need to be .name() ?

[22:09] <eric256> [email@hidden.address]
[22:09] <autrijus> .name() yes.

[22:09] <eric256> .name is an attribute of the Weapon class

[22:09] <autrijus> inside strings, that is

[22:09] <eric256> ohhh

[22:10] <autrijus> outside strings, I think .name should still work, no?

[22:10] <pmichaud> outside strings .name should work, yes

[22:10] <pmichaud> method accessors inside strings always require after the last one

[22:10] <eric256> *** Error: No compatible subroutine found: "&name":

[22:10] <pmichaud> s/require/require ()/

[22:10] <eric256> and if i put it all in the string i get "s-attack with <obj:Person>.weaponss.name"

[22:11] <autrijus> oh. hm

[22:11] <autrijus> try

[22:11] <clkao> 6.2.3 coming out?

[22:11] <autrijus> .weapons(){$_}

[22:11] <autrijus> clkao: already

[22:11] <clkao> autrijus++

[22:11] <clkao> autrijus++ # while i was partying

[22:11] <autrijus> eric256: ah. I see why.

[22:12] <autrijus> our MMD was not dealing with untyped Hash

[22:12] <autrijus> so you probably need to say

[22:12] <autrijus> my $weapon = $.weapons{$_};

[22:12] <autrijus> ... $weapon.name ...

[22:12] <autrijus> btw, $self.weapons can be written as $.weapons

[22:12] <autrijus> or, even better

[22:12] <autrijus> my Weapon $weapon = $.weapons{$_};

[22:13] <autrijus> $weapon.name;

[22:13] <autrijus> that's a bug... but you can't yet specify 

[22:13] <autrijus> has Weapon %.weapons;

[22:13] <Juerd> Even better: s/=/:=/ :)

[22:13] <autrijus> well it can, but wouldn't work

[22:13] <autrijus> yeah, := too

[22:13] <autrijus> hierarchical types gives me headaches

[22:13] <autrijus> so will probably need to wait a while

[22:13] <autrijus> a while being a few weeks

[22:13] <eric256> i'm now completly lost. ;)

[22:13] <Juerd> There's enough to do to take weeks

[22:14] <eric256> i'll rewrite then to not use a map and use some temp variables?

[22:14] <autrijus> something like that.

[22:14] <autrijus> commit the code? :)

[22:15] <autrijus> (invitation has been sent to your gmail account)

[22:15] <autrijus> as examples/some_rpg_game_name_here/ or examples/games/some_rpg_game_name_here/ 

[22:15] * eric256 waits for invite

[22:16] <Juerd> 101 days

[22:16] <Juerd> 101 people in AUTHORS

[22:16] <autrijus> cool

[22:16] <Juerd> Yea

[22:17] <eric256> can i commit thru SVN?

[22:17] <autrijus> yes

[22:18] <autrijus> just "svn ci"

[22:18] <autrijus> you may need to "svn add" first

[22:18] <autrijus> welcome aboard, btw :)

[22:18] * eric256 crosses his fingers and hopes

[22:19] <eric256> added as wizard.p6 in examples/games

[22:19] <autrijus> nice!

[22:19] <eric256> of course this is the now broken version. ;)

[22:19] <autrijus> that's fine. I'll boot to freebsd now to haxx0r on that

[22:19] <autrijus> brb.

[22:19] <pmichaud> well, all, gotta run for a while.  bbt

[22:22] * eric256 has to run for a while... later

[22:22] <svnbot6> r3128 (eric256) -- Wizard RPG game based sort of on the one from Perl Monks

[22:32] <stevan> I just had a MetaModel "ah-ha" moment :)

[22:32] <stevan> I will try and record it later

[22:32] <stevan> mugwump: ping me when you wake up

[22:33] <mugwump> ok

[22:33] <mugwump> I'll let you know... still haven't had my morning coffee yet

[22:33] *** sbkhh is now known as Odin-

[22:33] <mugwump> autrijus++  # fixing Set.pm

[22:37] <autrijus> eric256: fixed.

[22:37] <autrijus> it uncovered two bugs:

[22:37] <svnbot6> r3129 (autrijus) -- * wizard.p6 runs.

[22:37] <svnbot6> r3128 (eric256) -- Wizard RPG game based sort of on the one from Perl Monks

[22:37] <autrijus> 1. "$obj.method() foo" will eat the space between ) and f

[22:38] <autrijus> 2. "when (1|2) { ... }" doesn't work.

[22:38] <autrijus> i.e. always match fails against junctions

[22:38] <autrijus> tests welcome for both of them.

[22:38] * autrijus killed the Army of Frogs multiple times

[22:39] <crysflame> heh!  gotos dont kill people, stupid programmers do

[22:39] <crysflame> seen elsewhere

[22:39] <jabbot> crysflame: I havn't seen elsewhere , crysflame

[22:39] <crysflame> oh

[22:39] <crysflame> this is #perl6.

[22:39] * crysflame curses yet again and switches two windows leftward.

[22:41] <cognominal>  my @a = <<  %ENV<PATH>  >>  # can someone explain?

[22:42] <cognominal> I would expext it to be an array containing the current PATH

[22:42] <mnic> I really don't like the trinary operator in 6. I mean, why must say '??' and '::'. Larry's explanation doesn't satify me.

[22:42] <autrijus> mnic: hm? || and // etc shortcuts

[22:42] <svnbot6> r3129 (autrijus) -- * wizard.p6 runs.

[22:42] <svnbot6> r3130 (autrijus) -- * minor fixups

[22:43] <autrijus> i.e. they may cause its operand to not evaluate

[22:43] <autrijus> unlike almost all other operators

[22:43] <clkao> tha really looks like lots of autrijus--

[22:43] <obra> autrijus: we missed you today

[22:43] <autrijus> obra: :)

[22:43] <clkao> the bot needs ot make author++

[22:43] <autrijus> you had fun?

[22:43] <autrijus> clkao: sure, fix it? it's in examples/network/svnbot.p6

[22:44] <autrijus> you are, incidentally, a committer now.

[22:44] <autrijus> Welcome aboard :)

[22:45] <autrijus> mnic: but anyway. ?? and :: looks like || and // to denote short circuiting

[22:45] <mnic> ok

[22:45] <autrijus> and frees ? for boolification and : for adverbs

[22:45] <autrijus> so I think that's a win

[22:45] <autrijus> $person.weapons<a> = Weapon.new(:name<sword>, :power(5) );

[22:45] <autrijus> that looks quite neat thanks to the : :)

[22:46] <mnic> okay, i will look into it more.

[22:47] <mnic> I just use stuff like this all the time: my $var = ($a == 10) ? $a : $b;

[22:47] <mnic> And I don't like changing that to: my $var = ($a == 10) ?? $a :: $b;

[22:47] <mugwump> where are adverbs described?

[22:47] <autrijus> mugwump: all over the place

[22:48] <autrijus> there's adverbial pairs, adverbial blocks, adverbial parameters

[22:48] <autrijus> and more

[22:48] <cognominal> I don't see Pair as a native type in S06.pod. Is this a shortcoming?

[22:48] <cognominal> also, I am surprised to see

[22:49] <cognominal> pugs>  ref  (a => 'b')

[22:49] <cognominal> ::Scalar

[22:49] <cognominal> I would expect ::Pair as a result

[22:50] <knewt> jesus. 42 commits since i last synced up to trunk. (although some of those will be from when mainline was down, so i will have seen them on the fallback)

[22:50] <autrijus> 42 is normal :)

[22:50] <knewt> sorry. 142

[22:50] <autrijus> cognominal: literals are flattened, I think

[22:50] <autrijus> aw.

[22:50] <autrijus> pugs> my $x = :a<b>; $x.ref

[22:50] <autrijus> ::Pair

[22:50] <Shillo> Hullo!

[22:50] <knewt> autrijus: 142, not 42 *g*

[22:50] <autrijus> cognominal: but I'm not exactly sure.

[22:51] <clkao> why is svnbot so slow

[22:51] <clkao> to get on irc

[22:51] <autrijus> clkao: sleep 300

[22:51] <autrijus> also you need to pass it various parameters

[22:52] <clkao> have to invite

[22:52] <clkao> i have no op!

[22:52] *** ChanServ sets mode: +o autrijus

[22:52] *** autrijus sets mode: +o clkao

[22:52] <clkao> doesn't work!

[22:53] <autrijus> what's the bot name?

[22:53] <clkao> svntest

[22:54] <autrijus> it worksforme.

[22:54] <clkao> eek

[22:54] <autrijus> the log reads

[22:54] <autrijus> » Got an invitation from "autrijus!~autrijus@220-132-132-105.HINET-IP.hinet.net" to join channel "#perl6".

[22:54] <autrijus> » Joined channel "#perl6".

[22:55] <clkao> i don't get that log 

[22:57] <clkao> commit something!

[22:57] <autrijus> ...

[22:59] <svnbot6> r3131 (clkao) -- for svnbot.p6:

[22:59] <svnbot6> r3131 (clkao) -- * Increase karma for author that commits.

[22:59] <svnbot6> r3131 (clkao) -- * Accept additional repository ARGV so you dont need a svn wc.

[22:59] <svnbot6> r3132 (autrijus) -- * reformat VICTUALS a bit

[23:00] <clkao> oh it's per-line! 

[23:00] <clkao> karma autrijus

[23:00] <svntest> r3131 (clkao++) -- for svnbot.p6:

[23:00] <svntest> r3131 (clkao++) -- * Increase karma for author that commits.

[23:00] <svntest> r3131 (clkao++) -- * Accept additional repository ARGV so you dont need a svn wc.

[23:00] <svntest> r3132 (autrijus++) -- * reformat VICTUALS a bit

[23:00] <jabbot> clkao: autrijus has karma of 145

[23:01] * clkao grins

[23:01] <clkao> and i don't need svn wc to run that.

[23:02] <obra>    clever

[23:03] <clkao> obra++ # autrijusized

[23:03] <autrijus> clkao++ # writing p6!

[23:03] <autrijus> now let's just get http://svn.perl.org/ponie/trunk/ going a bit

[23:03] <autrijus> and the entire svk can be converted bit by bit to p6!

[23:03] * clkao giggles

[23:03] <obra> autrijus: we were discussing it with nichloas

[23:03] <clkao> if you can do the io layer crap

[23:04] <obra> one of the issues is the lack of support for svn:externals in svk right now

[23:04] <autrijus> clkao: the support is there already ParrotIOLayer

[23:04] <clkao> we'll sort out proper way for him to do venodr branch

[23:04] <clkao> autrijus: but in perl6 land i need!

[23:04] <clkao> if you can demostrate perlio::via::dynamic

[23:04] <autrijus> clkao: right... write tests ;)

[23:04] <clkao> but if shouldn't require that magic for that

[23:05] <clkao> which synopsis is for that?

[23:05] <clkao> "it's like perl... but less hateful!"

[23:05] <autrijus> clkao: perlio? I think it ties to the io() primitive

[23:06] <autrijus> clkao: Larry ok'ed IO::All in core

[23:06] <clkao> (!)

[23:06] <autrijus> clkao: so work with ingy to get that section written

[23:06] <clkao> but layers?

[23:06] <clkao> i refuse to

[23:06] <autrijus> IO::All has layers

[23:06] <clkao> that will keep reminding me storable in cookie

[23:06] <autrijus> but hey, just design it the way you see fit

[23:07] <clkao> so there's no explicit synopsis for layered io yet?

[23:07] <autrijus> $handle.layers.push(':utf8');

[23:07] <clkao> oh.

[23:07] <autrijus> clkao: http://svn.perl.org/perl6/doc/trunk/plans/design_docs.pod

[23:07] <autrijus> it's on the list next to threading

[23:07] <autrijus> so pretty high priority

[23:08] <clkao> as in to be documented?

[23:08] <autrijus> yeah

[23:08] <autrijus> or as in to be OK'ed

[23:08] <clkao> alright. so it's wild land

[23:08] <autrijus> when presented with sane designs

[23:08] <autrijus> it is :)

[23:09] * autrijus notes that PerlIO is also a wild land thing

[23:09] <autrijus> it's less than 3 years old :)

[23:09] <autrijus> (the layers as we know it)

[23:09] <clkao> grr

[23:10] <autrijus> but really, read pdd01 :)

[23:11] <autrijus> in particular, in parrot you have

[23:11] <autrijus> $P0 = open "http://svk.elixus.org/", "<:utf8"

[23:12] <clkao> YUCK!

[23:12] <clkao> that in parrot?

[23:12] <clkao> do you mean that the vm speaks http?

[23:12] <clkao> WTF

[23:12] <autrijus> the vm speaks URI.

[23:12] <autrijus> how it is handled depends on scheme registers.

[23:12] <clkao> and how does it callback?

[23:12] <clkao> phew

[23:12] <clkao> ok

[23:12] <autrijus> registered scheme handlers, that is.

[23:13] <misc> autrijus: it could potentially use "open irc://..." :) 

[23:13] <autrijus> yes :)

[23:14] <clkao> ok i need to do something interesting tomorrow or i'll die

[23:14] <obra> clkao: we'll find things

[23:14] <clkao> good

[23:21] <rindolf> Does anyone here has op on #perl?

[23:21] *** autrijus sets mode: -o autrijus

[23:21] <rindolf> autrijus: here?

[23:21] <autrijus> rindolf: yes?

[23:21] <autrijus> I'm not #perl op.

[23:22] <rindolf> autrijus: that's OK.

[23:22] <rindolf> autrijus: someone was spamming #perl.

[23:23] <eric256> 10autrijus01: did i see you say that you fixed the issue with my code ;) your amazing! ;)

[23:23] <rindolf> He no longer does.

[23:23] <revdiablo> anybody know what CEST timezone is in relation to GMT?

[23:25] <revdiablo> +2 hours?

[23:25] <mugwump> isn't CEST a junction of timezones?

[23:26] <revdiablo> listed as Central European Summer Time

[23:26] <revdiablo> http://www.timeanddate.com/library/abbreviations/timezones/

[23:26] <revdiablo> I just googled it :)

[23:26] <mugwump> TZ=CET date

[23:27] * eric256 begines to recompile ;) guess i should make some tests for that case ehh? 

[23:28] <autrijus> eric256: the fix is just in the .p6 -- no need to recompile :)

[23:28] <autrijus> also, if compilation is slow, "make unoptimised" will help

[23:29] <eric256> cool. ohh i thought you fixed the code. so the bug is still there. you just bypassed it in the .p6.  thanks!

[23:29] <autrijus> yup :)

[23:30] <eric256> if/else works in a given?

[23:30] <autrijus> now would be an excellent time to commit into t/ :)

[23:30] <autrijus> sure, given is not special

[23:30] <autrijus> given just sets $_

[23:30] <autrijus> and set scope for when exit

[23:30] <autrijus> that's all it does

[23:30] <autrijus> so you can use it freely without when{}

[23:31] <eric256> ohh. didn't know that.. cool.

[23:31] <mugwump> ah, no, it's all<CDT CST EDT EST> that are junction timezones

[23:33] <mugwump> ie, CDT refers to one<+10:30 -5:00>, CST to one<+9:30 -6:00>, etc

[23:33] <svnbot6> r3133 (revdiablo) -- fixed debian/changelog datestamp lines to conform to parsechangelog's regular expression

[23:33] <svntest> r3133 (revdiablo++) -- fixed debian/changelog datestamp lines to conform to parsechangelog's regular expression

[23:34] <mugwump> svntest, svnbot6, duke it out

[23:34] <eric256> so when is different than if how?

[23:36] <revdiablo> the only difference is svntest increments the karma for each commit?

[23:37] <autrijus> revdiablo: svnbot6 will do that after a restart

[23:37] <autrijus> eric256: when topicalises $_

[23:37] <autrijus> when 3 { ... $_ is now 3 ... }

[23:37] <autrijus> if 3 { ... always true ... }

[23:37] <autrijus> er sorry

[23:37] <autrijus> I thought given {}

[23:37] <autrijus> when {} is smart match against $_.

[23:37] <autrijus> when FOO { ... } 

[23:37] <autrijus> is like

[23:37] <autrijus> if ($_ ~~ FOO) { ... }

[23:38] <eric256> lol. okay. so you can use it outside of given blocks. the two just work together to make a pretty case like statment

[23:38] <autrijus> yes.

[23:38] <autrijus> I'll bbl

[23:38] <autrijus> &

[23:39] <ninereasons> stevan, should all the 'force_todo' s be changed to per-line :todo<reasons> ?

[23:42] <mugwump> I think so, ninereasons 

[23:43] <ninereasons> me too, mugwump.  I think I'll go do some of that.

[23:44] <eric256> okay so i'm righting a test that i know it fails right now... where should i put it? or how should i mark it?

[23:44] <mugwump> ninereasons: eg, commit 3083 does that

[23:45] <mugwump> also r2762

[23:45] <mugwump> (searchable commit messages)++

[23:46] <mugwump> eric256, you meen "writing", presumably, "righting" would be "to make right", or correct

[23:47] <mugwump> put :todo<feature>, :todo<bug>, etc at the end of the is()/ok()/... arguments

[23:47] <eric256> yes writing...it's like 80 degrees at my desk ;)

[23:48] <eric256> ok($pass == 1, 'when', :todo <bug>);

[23:48] <mugwump> jabbot, (80 - 32) * 5 / 9

[23:48] <jabbot> mugwump: But your desk.

[23:48] <eric256> liek that?

[23:49] <mugwump> looks right to me, though I'd write that as

[23:49] <mugwump> is($pass, 1, "when", :todo<bug>);

[23:50] <revdiablo> how do I get pugs to build with embedded parrot? I have to tell pugs where parrot is, or something?

[23:51] <eric256> i was then doing 'pugs junction_any_pick.t' to run it but it yells at me.  is there some other way i can run the test to make sure it behaves?

[23:51] <mugwump> eval_ok() is the normal way for correct code which doesn't parse yet

[23:52] <eric256> but it is the :todo part that is not parseing yet.

[23:52] <mugwump> um... :todo<> definitely works :)

[23:53] <eric256> *** Error: No compatible subroutine found: "&todo": NonTerm (MkPos "junction_any_pick.t" 55 23 55 33) at junction_any_pi

[23:53] <eric256> ck.t line 55, column 1-34

[23:53] <eric256> runs fine without the :todo <bug> part

[23:53] <mugwump> drop the space?

[23:53] <eric256> aha!

[23:54] <mugwump> this is Perl, it's only whitespace insensitive when the whitespace doesn't make the code look different ;)

[23:54] <autrijus> revdiablo: yes. read README and run Makefile.PL? :)

[23:54] <eric256> thanks...now to find a better file to house this test in...any_pick is not right

[23:55] <obra> autrijus: did you hack SetupSessionCookie to deal with chinese rtnames?

[23:55] <autrijus> revdiablo: set PUGS_EMBED env to 'parrot' and PARROT_PATH to source of a completed parrot build dir

[23:55] <autrijus> obra: no, I outlawed them

[23:56] <eric256> [autrijus] any idea where a good home for the when test would be?

[23:56] <autrijus> not sure if I merged back though; although a good utf8-happy cookie is generally useful

[23:56] <autrijus> eric256: I don't know, improvise!

[23:56] <autrijus> merge into t/statements/given.t perhaps

[23:56] <autrijus> but other ways are fine too

[23:56] <autrijus> just improvise :)

[23:57] <eric256> i just don't want to tick someone off. ;) i figure i would right some test cases for junctions/given and just didn't know where to stick it. so i guess i'll hunt around and stick it where i want! (:

[23:58] <mugwump> if someone doesn't like it they can just move it

[23:59] <autrijus> right.

[23:59] <autrijus> think wikipedia. it's impossible to accidentally tick other people off...

