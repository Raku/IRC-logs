[00:00] <Odin-LAP> But those may have been a factor -- however, there's also indication that it was for natural reasons.

[00:00] <Odin-LAP> Activity increased slightly after an earthquake in 2000, I recall.

[00:00] * theorb calls it time to get off the computer.

[00:00] <ninereasons> the author of that page lists as "destroyed" any geyser that's been tapped for geo-thermal power. 

[00:01] <Odin-LAP> WTF?

[00:01] <Odin-LAP> Is he using geyser synonymously with 'hot spring'?

[00:01] <ninereasons> perhaps a partial explanation there, for his belief that Geysir was damaged by people

[00:02] * Odin-LAP wonders how he feels about the blue lagoon, then.

[00:03] <ninereasons> anything that was tapped at Rykir, he calls "destroyed"

[00:03] <ninereasons> http://www.wyojones.com/destorye.htm

[00:03] <Odin-LAP> My intarweb isn't working. :/

[00:03] <ninereasons> that's the gist, anyway.

[00:31] <Juerd> How the hell can one get a literal [ in Kwiki?

[00:31] <Juerd> As in @foo[5]

[00:34] <Juerd> [=@foo[5]]

[00:34] <ninereasons> isn' it with =verbatim or something like that?

[00:35] <Juerd> http://pugs.kwiki.org/?Perl6Nomenclature

[00:35] <Juerd> Feel free to add!-

[00:37] <Juerd> Oh, wow, for something using bracketed delimiters, [=...] is pretty STUPID

[00:37] <Juerd> [=@foo[5]] gets rendered as <tt>@foo[5</tt>]

[00:38] <Juerd> Ah well, working around this is too much work.

[00:43] <wolverian> spelling fixes

[00:43] <Juerd> wikis++

[00:45] <Juerd> kwiki--  # no diffs

[00:45] <wolverian> yes.

[00:45] <wolverian> s,lamba,lambda,g 

[00:45] <wolverian> now, sleep calls. bye. :)

[00:46] <Juerd> Bye

[01:17] <mugwump> jabbot: who made you, and where is your source?

[01:17] <jabbot> mugwump: We were discussing you -- not me.

[01:17] * mugwump slaps jabbot 

[01:21] * mugwump finds autrijus' SVN::Notify::Config

[01:24] <mugwump> bah, I can't put a hook script in my OpenFoundry repo

[01:24] <obra> that would be a nice security hole

[01:24] <obra> (and one that sf.net supported unitl recently)

[01:24] <mugwump> heh

[01:24] <obra> mugwump: jabbot was created by gugod)

[01:25] <mugwump> ok, so ideally, I'd just like to go to a page on rt.openfoundry.org and set up an address to receive commit messages

[01:26] <mugwump> but without either of these options, I'll need to write something to periodically check for new versions then run the appropriate diff commands

[01:26] <mugwump> actually, will svk run post-commit hooks etc?

[01:26] <mugwump> maybe that "something" could just be "svk sync"

[01:28] <mugwump> Is there an irc channel / rt queue for OpenFoundry?

[01:29] * mugwump finds http://rt.openfoundry.org/Foundry/Project/Tracker/?Queue=125

[04:06] <pasteling> "revdiablo" at 66.218.36.163 pasted "more extensive tests of weird flattening/subscripting behavior" (55 lines, 1.8K) at http://sial.org/pbot/9904

[04:07] <revdiablo> any thoughts on these?

[04:08] <revdiablo> dunno if I'm duplicating anything that already exists, but I just wanted to get down all the behavior we were seeing earlier

[04:09] <revdiablo> maybe I should check this into t/pugsbugs/flattening.t? or somewhere else?

[04:17] <revdiablo> ok, I'll take the silence as a yes. :)

[04:25] *** simcop2387-vnc is now known as simcop2387

[04:25] <jabbot> pugs - 2667 - test some broken flattening behavior

[04:47] <machack666> fg

[04:59] <gaal_> http://forum2.org/gaal/pugs/smoke-cygwin.html # eval_yaml causes segfault

[05:05] <jabbot> pugs - 2668 - a few tests illustrating a .kv bug

[06:34] *** castaway_ is now known as castaway

[06:40] *** chady_ is now known as chady

[06:49] <nothingmuch> oh my

[06:49] <nothingmuch> i just saw a banner: "write 10,000 lines of code in 10 minutes"

[06:50] <nothingmuch> generating code is evil

[06:50] <nothingmuch> why isn't the runtime smart enough to do this stuff?

[06:51] <castaway> ugh

[06:51] <castaway> mornin nm

[06:51] <nothingmuch> morning

[06:51] <nothingmuch> worst of all, to actually get your app to do what you want you have to write something

[06:52] <nothingmuch> reading 10,000 lines of code does not take 10 minutes

[06:52] <nothingmuch> and without reading what you have, how do you know what to add?

[06:52] <nothingmuch> *sigh*

[06:55] <castaway> depends..

[06:55] <castaway> stuff like GUI designers do a fair bit of behin the scenes coding, that isnt all bad

[06:55] <castaway> "behind"

[06:59] <castaway> (at least IMO)

[07:07] <nothingmuch> i'm not going to trust a system i don't know to generate N thousands of lines for me

[07:07] <nothingmuch> ever

[07:07] <nothingmuch> =/

[07:07] <nothingmuch> even if i know what it's supposed to generate

[07:08] <nothingmuch> unless i'm forced into it, in which case i will learn what it generates (probably not going to save me time)

[07:08] <nothingmuch> or write one myself

[07:08] <nothingmuch> (not bloody likely, i'd rather do this stuff at runtime)

[07:11] <castaway> hmm, but you trust compilers to translate to machine code, and lots of other things

[07:11] * castaway shrugs

[07:12] <castaway> 10,000 seems several orders of magnitude too many, but still, i like code generation for quick stuff.. VB works pretty well for its field, for example

[07:14] <castaway> (If you dont trust things you dont know, how do you ever do anything? :)

[07:23] <mugwump> the lambda calculus of true knowledge can never be reduced to a normal form

[07:42] <nothingmuch> castaway: compilers take something that's mine and makes it into something else

[07:43] <nothingmuch> code generation of an entirely new web app

[07:43] <nothingmuch> with DB connectivity

[07:43] <nothingmuch> and other goodness

[07:43] <nothingmuch> at 10,000 slocs, in 10 minutes

[07:43] <nothingmuch> is not very transparent

[07:43] <nothingmuch> i have no real place to specify input... You just can't sum 10,000 slocs in 10 minutes of any form of conveyance (english, perl, whatever)

[07:44] <nothingmuch> there has to be some large void defaultness that just doesn't make sense to be that big

[07:45] <jabbot> pugs - 2669 - Remove second instance of self.

[07:46] <castaway> yeah, I said that number was overdoing it mightly.. 

[07:47] <nothingmuch> so we are in agreement =)

[07:47] <castaway> GUI designers do the same tho, take what you pick as design elements, and turn it into code

[07:47] <nothingmuch> but that's known input

[07:48] <castaway> right

[07:48] <castaway> it seems so, yes :)

[07:48] <nothingmuch> i say "make me some code that impelements the interface to respond to that widget"

[07:48] <nothingmuch> and you get a bajillion tubs

[07:48] <castaway> what are these 10k-lines-of-code things proposing to do?

[07:48] <nothingmuch> s/tubs/stubs/

[07:49] <castaway> lines of code are pointless unless they have some directed purpose :)

[07:49] <nothingmuch> a "web application which features: db connectivity, err, something else, high perfomance, no bugs"

[07:49] <nothingmuch> oh, 'stunning graphics'

[07:49] <castaway> ah :)

[07:50] <misc_> nothingmuch: "b2b capability

[07:50] <castaway> sounds like one to toss right in the bin

[07:50] <arcady> why not just have a metaclass that does the code generation for you?

[07:50] <castaway> or, just very bad advertising

[07:50] <arcady> buzzword bingo!

[07:50] <castaway> right

[07:50] <nothingmuch> arcady: for this purpose see also (Catalyst|Maypole|RubyOnRails)

[07:50] <castaway> If it implemented that stuff as widgets, with a nice interface to allow use, it would make sense, but generating the code seems crazy

[07:51] <castaway> (I should get around to using zApp someday)

[07:51] <nothingmuch> misc_: i don't understand

[07:51] <arcady> if you have to generate code, it's generally because you need a better language

[07:51] * nothingmuch agrees

[07:51] <misc_> nothingmuch: just a buzzword to add :)

[07:52] <castaway> right

[07:52] <nothingmuch> i even have the same view about snippets

[07:52] <nothingmuch> ah =)

[07:52] <misc_> nothingmuch: for "something else"

[07:53] <nothingmuch> http://xrl.us/fysk <-- content type screwey. it's a gif

[07:54] <nothingmuch> that's the banner

[07:54] <nothingmuch> this is where the banner links to: http://www.ironspeed.com/products/DownloadNow.aspx

[07:55] *** rob__ is now known as rob_

[07:56] <castaway> $1995 !?

[07:57] <arcady> hey, it's a good deal!

[07:57] <castaway> sale, enterprise edition for just $3145 !

[07:57] <castaway> no thanks :)

[07:57] <arcady> look how many lines of code you can write!

[07:57] <arcady> perl and ruby programmers suck, they write so many fewer lines of code

[07:57] <castaway> of gobbledegook? lots :)

[07:57] <arcady> that's so much less productive : )

[07:59] <castaway> *g*

[08:01] <lightstep> omg, i can't wait for the video to load

[08:02] <castaway> video?

[08:03] <mugwump> http://lists.utsl.gen.nz/mailman/listinfo.cgi/pugs-commits  # for those interested, svn commit messages from pugs repo

[08:03] <lightstep> yes, where they show how to build an app in 5 minutes (actually, the video is 6:19)

[08:03] <castaway> ah

[08:03] <lightstep> http://ironspeed.com/products/ProductVideo.aspx

[08:11] <lightstep> examples/shuffle.p6 is broken

[08:11] <castaway> then fix it, dear lisa, dear lisa.. :)

[08:11] <lightstep> i don't understand the problem

[08:12] <lightstep> that's sumething with the `sub' syntax

[08:13] <lightstep> oh, it's not that

[08:22] *** metaperl_ is now known as metaperl

[08:25] <jabbot> pugs - 2670 - fix examples/shuffle.p6

[08:55] <bsb> nothingmuch around?

[08:55] <jabbot> pugs - 2671 - * Implement (rvalue only) `%hash.pick`, 

[09:20] *** integral1 is now known as integral

[09:51] <bsb> Does this cause anyone else trouble:  my $s = 'a'; sub eg { $s .= 'b' }

[09:51] * luqui tries

[09:52] <luqui> geez

[09:52] <bsb> Internal error?

[09:52] <luqui> every time I want to try something I have to recompile everything

[09:52] <luqui> because there's so much progress on pugs

[09:52] <bsb> Ok, let me know in 20 minutes

[09:52] <luqui> haha

[09:53] <bsb> I get: Internal error while running expression: unexpected "s" expecting ";" or end of input

[09:53] <luqui> I always find it disconcerting when I install build a new piece of software and see "no rule to make target test"

[09:53] <luqui> I think the best thing Perl has done to software development is to make test suites culturally mandatory

[09:54] <bsb> What's missing test?

[09:55] <luqui> rosegarden

[10:03] <castaway> umm, isnt it somethihng other than .= these days?

[10:03] <luqui> ahh that would be the problem

[10:03] <luqui> ~=

[10:03] <castaway> ~= .. right

[10:03] <arcady> .= would be an odd operator indeed

[10:04] <luqui> it exists

[10:04] <nothingmuch> bsb: pong

[10:04] <castaway> (unless you're writing some odd looking method stuff

[10:04] <bsb> ah!

[10:04] <bsb> no, just p5 thinking

[10:04] <nothingmuch> try a \n between the semi colon and the sub decl

[10:05] <nothingmuch> it looks to me like parser smell

[10:05] <luqui> I think he wants to call the 'b' method (quotes and all) on the string 'a' and assign it back into $s

[10:05] <nothingmuch> i think the error happens before that

[10:06] <luqui> there really is an error?

[10:06] <nothingmuch> bsb: I get: Internal error while running expression: unexpected "s" expecting ";" or end of input

[10:06] <bsb> nothingmuch: in t/subroutines/splat_rw.t there's a test for *@list is rw , what's the source?

[10:06] <nothingmuch> bsb: that's l~r's test

[10:06] <luqui> no error here

[10:06] <nothingmuch> he was making sure that splatting and is rw don't make sense when used together

[10:07] <luqui> oh

[10:07] <bsb> S06/Perl5ish  has sub swap (*@_ is rw)

[10:07] <bsb> is it a special case?

[10:07] <nothingmuch> oh well =P

[10:08] <nothingmuch> it's either a bug in the test or the design ;-

[10:08] <nothingmuch> )

[10:08] <luqui> design

[10:08] <nothingmuch> so how do you do assign to an arbitrary number of args

[10:09] <nothingmuch> i think it's bad sstyle

[10:09] <nothingmuch> but it might be useful

[10:09] <luqui> there's something going on there like sub swap (*@_ is context(rw)), for a 'context' ne 'context'

[10:13] <bsb> I'm not getting the 'context'

[10:13] * castaway wonders if someone needs to go thru Pugs and try out "Perl5 syntax" stuff, and make it give sensible errors

[10:13] <luqui> that would be very wise for "real" perl 6

[10:14] <luqui> so it might be a good exercise

[10:14] <nothingmuch> in "real" perl 6 wont you have to say 'use v6' to make it p6?

[10:14] <bsb> Aren't we trying to say @_ contents are rw?

[10:14] <luqui> yeah, but people are still going to make p5 brainfarts

[10:14] <luqui> all the time

[10:14] <bsb> I can vouch for that

[10:15] <luqui> no, *@_ contents shouldn't be rw

[10:15] <luqui> well, unless it's declared without a signatue at all

[10:15] <luqui> then they are

[10:15] <luqui> and the implicit declaration is the one that's tripping us up

[10:15] <jabbot> pugs - 2672 - $1 now $! in eval test

[10:16] <castaway> nothing, yes.. but my point is that you might forget halfway thru programming, and you'll get those lovely "internal errors" instead of "you idiot, use '~=' instead of '.=" :)

[10:17] <luqui> right

[10:17] <luqui> call them the YIEs

[10:17] <castaway> YIE?

[10:17] <broquaint> Or PIEs.

[10:17] <luqui> or LIEs

[10:17] <luqui> "Legacy Idiocy Errors"

[10:17] <castaway> ,)

[10:21] <luqui> redhat needs to be overthrown, and gentoo needs to get easy to install so that it can overthrow it

[10:21] <castaway> gentoo is hard to install?

[10:21] <luqui> last time I checked

[10:21] * castaway just followed the instructions

[10:22] <luqui> pretend you'd never seen a shell command before

[10:22] <castaway> ah, well

[10:22] <castaway> It could do with a frontend, yes

[10:22] <luqui> plus, the net drivers don't always work (which is why I'm on fedora)

[10:23] <castaway> and something better than those fugly python (?) scripts ,)

[10:23] <luqui> haha

[10:23] <luqui> yeah, dood, get with the times, OSX uses perl for everything!

[10:23] <luqui> for various definitions for everything

[10:23] <castaway> really all that annoys me there is that ctrl-cing out of most of them gets a whole page of python errors

[10:23] <castaway> its a little shocking at first

[10:24] <luqui> I think larry wants that for perl to some extent

[10:24] <castaway> the errors?

[10:24] <luqui> don't know what to think

[10:24] <luqui> yeah

[10:24] <castaway> eh?

[10:24] <luqui> eh?

[10:24] <castaway> really, its much nicer to have to apply a commandline arg to get more error text, than the other way around

[10:25] <luqui> the question is, what if you have trouble reproducing your error

[10:26] <luqui> and we'd rather not leave dump files lying around

[10:27] * castaway shrugs

[10:27] <castaway> I'd like for the user to have a clear way to do things..

[10:27] <castaway> preferably with no errors when genuinely just trying to close an app :)

[10:28] <luqui> maybe ^Z; kill -SEGV %

[10:28] <luqui> then you can have your pretty ^C

[10:28] <castaway> icky :)

[10:28] <luqui> maybe perl can intercept SIGQUIT to do an icky exit

[10:28] <luqui> so ^C: clean exit; ^\ icky exit

[10:29] <castaway> for example

[10:29] <castaway> I dont really care how.. I just hate those error screens.. :)

[10:38] <nothingmuch> C+ +, oh how i loath thee

[10:38] <nothingmuch> well, MFC really

[10:38] <nothingmuch> *sigh*

[10:47] <bsb> "control exceptions" in a block are redo, last, next and the like, right?

[10:48] <broquaint> Yep.

[10:50] <bsb> Thanks

[10:55] <jabbot> pugs - 2673 - test pointy subs

[11:10] <nothingmuch> hola theorbtw1 

[11:10] <nothingmuch> ~~

[11:14] <gaal|work> luqui, there-p?

[11:15] <jabbot> pugs - 2674 - * `$thread.kill`, `$thread.detach`, `$th

[11:15] <jabbot> pugs - 2675 - * minor tweaks on cashiers.p6 syntax

[11:15] <jabbot> pugs - 2676 - :todo<feature> added

[11:16] <castaway> ooh, threads?

[11:17] <theorbtwo> Allo, nothingmuch.

[11:17] <nothingmuch> castaway: yeah, we've had them for a while =)

[11:18] <castaway> hmm, irssi shouldnt care on /msg, what server someone is using

[11:21] <nothingmuch> don't messages get sent to your server, and from there to someone's server, and from there to someone?

[11:21] <luqui> gaal|work: #t

[11:21] <castaway> right, but Im on slashnet and freenode at the same time

[11:22] *** chady is now known as chady_

[11:22] <nothingmuch> oh

[11:23] <nothingmuch> so it doesn't know what network, not what server?

[11:23] <nothingmuch> but the user name is unambiguous? yeah, that is silly... ={

[11:23] <nothingmuch> tr/{/(/;

[11:23] <castaway> umm, yeah

[11:23] * castaway isnt into IRC jargon

[11:24] <nothingmuch> it's not jargon, it's structure ;-)

[11:24] <nothingmuch> in p2p jargon: an IRC server is an über-peer in a p2p network

[11:24] <nothingmuch> only that it's überpeer friends are known in advance

[11:25] <nothingmuch> and, err, that's it =)

[11:26] <theorbtwo> We've had threads for a while now, castaway.

[11:26] <castaway> I guess I missed them.. are they specced?

[11:32] <nothingmuch> i think not

[11:32] <nothingmuch> grep -r 'async' t examples

[11:32] <lightstep> revision 2676 doesn't compile

[11:33] <lightstep> some ugly code makes a mess

[11:33] <lightstep> is autrijus on it, or should i look?

[11:34] * nothingmuch hasn't seen him in a while

[11:38] <gaal|work> luqui - just thought it's worth mentioning how java dumps a stack trace for the thread list when you enter ctrl-break on the console.

[11:39] <nothingmuch> death should not include a stack trace though

[11:40] <gaal|work> this does not require death, nothingmuch

[11:40] <nothingmuch> it really hinders user friendlyness when trying to first run a program, the error message for "component foo is missing" is part of a page long dump

[11:40] <luqui> we'll probably do something like that by default

[11:40] <theorbtwo> IRC isn't very p2p, even if you ignore the clients.

[11:40] <luqui> overridable, of course

[11:40] <nothingmuch> gaal|work: yeah, i reckoned =)

[11:40] <theorbtwo> It requires centralized planning; otherwise you get loops in the network structure.

[11:41] <nothingmuch> theorbtwo: well, that's true... but the message passing itself is a bit like p2p

[11:41] <nothingmuch> but in that sense SMTP is also p2p

[11:41] <gaal|work> then again the developer is always glad if errors include a stack trace :)

[11:41] <gaal|work> ^error reports

[11:41] * luqui loves firefox

[11:41] <nothingmuch> gaal|work: that should be easy to add

[11:42] <lightstep> funny thing (hebrew): http://www.tapuz.co.il/tapuzforum/main/Viewmsg.asp?forum=247&msgid=52154687

[11:42] <theorbtwo> SMTP is very much p2p.

[11:42] <luqui> now all we need is a way to embed pugs in it

[11:42] <lightstep> the nazis used fluorine, how can the state of israel put it in water?

[11:42] <luqui> <script language="perl">...</script>

[11:43] <gaal|work> luqui, activestate perl did that

[11:43] <luqui> really?

[11:43] <luqui> cool

[11:43] <luqui> probably didn't catch on...

[11:43] <castaway> sure, perlscript++

[11:43] <gaal|work> called activescript, i think

[11:43] <castaway> well it only works on win

[11:43] <gaal|work> perlscript, thatis' it

[11:43] <gaal|work> luqui: on another note, see XUL::Node on CPAN

[11:43] <castaway> AND with activestate installed.. Id assume thats not really a popn worth targettin

[11:44] <luqui> woah

[11:44] <luqui> WOAH

[11:44] <castaway> hmm?

[11:44] <luqui> I've been wanting this forEVER

[11:45] * castaway kept meaning to try it and never did

[11:45] <castaway> it works in anything that vbscript and jscript etc works in, on win.. irrc (WSH)

[11:45] <luqui> I expect this is how gmail does its thang

[11:45] <castaway> yet you never looked?

[11:45] <nothingmuch> the XUL/rails demo was very impressive

[11:45] <luqui> XUL isn't exactly a descriptive name

[11:49] <castaway> well thats also browser specific

[11:56] <luqui> mornin' folks, good night

[12:05] <jabbot> pugs - 2677 - fix type error

[12:35] <jabbot> pugs - 2678 - Cosmetic fix to t/builtins/arrays_and_ha

[12:46] <jabbot> pugs - 2679 - Added svn:ignores to src/.

[12:55] <jabbot> pugs - 2680 - Added tests for state().

[12:55] <jabbot> pugs - 2681 - Added usual svn properties to t/.

[12:55] <jabbot> pugs - 2682 - Cosmetic fix to t/var/state.t.

[13:00] <Limbic_Region> greetings and salutations all

[13:05] <jabbot> pugs - 2683 - * svn:ignored "tests.yml" in /.

[13:07] <Limbic_Region> http://www.perlmonks.org/index.pl?node_id=453821 # Adventures in multilingualism (p5, python, p6)

[13:11] <Limbic_Region> out of curiosity - do coroutines work in pugs yet ( yield ) ?

[13:14] <nothingmuch> the problem with pugs is that if you have taken an 8 hour mental break

[13:14] <nothingmuch> the quickest way to check for these things is grep -r t/ examples/

[13:14] <nothingmuch> and then figure out if it's todo or not

[13:14] <nothingmuch> like, say, you went to sleep

[13:14] <nothingmuch> then you're no longer up to date

[13:14] <puetzk> nothingmuch: svn log -rBASE:HEAD is a really nice feature :-)

[13:15] <Limbic_Region> nothinmuch - I just about fell out when hardburn told me the reason why he wasn't using Pugs was because it didn't have a feature he wanted

[13:15] <Limbic_Region> I asked him when was the last time he checked

[13:15] <Limbic_Region> he replied - "a couple of weeks ago"

[13:15] <nothingmuch> hah

[13:15] <nothingmuch> what was the said feature?

[13:15] <jabbot> pugs - 2684 - Added tests for temp().

[13:16] <Limbic_Region> I don't remember exactly but it was something to do with OO

[13:16] <Limbic_Region> something that could be done now even without full OO implementation though

[13:16] <Limbic_Region> IIRC

[13:17] <nothingmuch> ooh well

[13:17] <Limbic_Region> I keep poking and prodding him

[13:17] <Limbic_Region> he is another very smart young man

[13:17] <nothingmuch> later he might blame you for addicting him

[13:18] <Limbic_Region> hmmm - he probably would take offense to that

[13:18] <Limbic_Region> nothingmuch - that's probably true

[13:20] <Limbic_Region> so since I am using a binary distribution that doesn't include the t/ directory - you mind grepping for "yield" for me?

[13:22] <Limbic_Region> nothing in the examples directory that I see

[13:22] <autrijus> Limbic_Region: where is said that perl6 will have yield()?

[13:23] <autrijus> we have yield() for threads

[13:23] <autrijus> (yielding control)

[13:23] <Limbic_Region> autrijus - I am not sure I saw "yield" specifically, but coroutines for sure

[13:23] <autrijus> where exactly?

[13:23] * Limbic_Region will look for references

[13:23] <autrijus> I see nothing about coroutines in synopsis

[13:23] <autrijus> except in a passing reference in lazy gather/take 

[13:24] <autrijus> which is not quite the same.

[13:24] * puetzk has seen some coroutine discussion for parrot, though that doesn't mean perl6 will expose it

[13:25] <autrijus> sure, parrot has coro

[13:25] <Limbic_Region> puetzk - that's probably my problem

[13:25] <autrijus> but I need concrete syntax and semantics to implement this sort fo thing :)

[13:25] * Limbic_Region spent so long not paying attention to p6.l and only paying to p6.i that I think my boundaries are getting blurred

[13:25] <jabbot> pugs - 2685 - Added OO aspects of temp() to t/var/temp

[13:26] <autrijus> I think we can trivially do coroutines with lightweight share-everything threads.

[13:26] <autrijus> in the interpreter core, that is

[13:27] <autrijus> but not sure at all how to expose it at the language layer.

[13:27] * Limbic_Region is still looking

[13:28] <lightstep> or as a perl6 library with reified continuations?

[13:29] <lightstep> like the examples in scheme

[13:29] <autrijus> lightstep: sure, that works too

[13:30] <Limbic_Region> autrijus - found it

[13:30] <Limbic_Region> but it hasn't been written yet

[13:31] <Limbic_Region> http://www.perlmonks.org/index.pl?node_id=332117 # Perl6 Timeline By Apocalypse

[13:31] <Limbic_Region> chapter 17 

[13:31] <autrijus> well, write it!

[13:31] <autrijus> docs/s17.pod

[13:32] <Limbic_Region> that means I would have to read all the RFCs and see what Larry has said about them right?

[13:32] <Limbic_Region> 17 talks about threads, asyncronous I/O - theres a lot more there than just coroutines

[13:33] <lightstep> where is the perl6 timeline picture that was inspired by "wearing the hair shirt"?

[13:33] <autrijus> lightstep: http://haskell.org/hawiki/AutrijusTang has one

[13:34] <Limbic_Region> autrijus - how about I post to p6.l with a specific coroutine question

[13:34] <Limbic_Region> I don't think I am qualified to write S17

[13:35] <autrijus> Limbic_Region: sure..

[13:37] *** sbkhh is now known as Odin-

[13:43] <puetzk> somehow that made me think of http://www.frozenreality.co.uk/comic/bunny/index.php?id=91

[13:43] <puetzk> but hopefully not :-)

[13:44] <puetzk> perhaps given the pace of recent development, something more along the lines of http://www.frozenreality.co.uk/comic/bunny/index.php?id=44

[13:44] <Odin-> Bunny is crazy.

[13:44] <puetzk> indeed

[13:48] <Limbic_Region> autrijus - message sent

[13:52] <clkao> Writing Makefile for PAR

[13:52] <clkao> The 'Autrijus' method does not exist in the 'inc' path!

[13:52] <clkao> Please remove the 'inc' directory and run Makefile.PL again to load it.

[13:52] <clkao> Autrijus method!

[13:53] <lightstep> Makefile.PL worked here a few revisions ago, and hasn't changed since then

[13:53] <Limbic_Region> clkao - the Autrijus method is well defined "trade test for feature"

[13:53] <gaal|work> Juerd++; # two-dimensional zip example in p6-l - lol

[14:01] * autrijus faints

[14:01] <autrijus> http://www.nntp.perl.org/group/perl.perl6.language/20827

[14:06] <Limbic_Region> autrijus - does that make your life easier or harder?

[14:08] <lightstep> compiling pugs really is no fun

[14:12] <theorbtwo> I think Larry is going insane.

[14:12] <theorbtwo> Er, insaner.

[14:21] <autrijus> Limbic_Region: I think I'll have a LarryWhim.hs

[14:21] <autrijus> that defines the "knobs"

[14:21] <theorbtwo> Just make it change behavior on rand > .5?

[14:22] <autrijus> MkLarryWhim { unlimitedDereference = False, ... }

[14:22] <nnunley_> 15:01 < autrijus> http://www.nntp.perl.org/group/perl.perl6.language/20827

[14:22] <nnunley_> Doh.

[14:22] <autrijus> lightstep: "make unoptimised"

[14:22] <lightstep> autrijus, but then it's no fun

[14:23] <autrijus> eh? :)

[14:23] <autrijus> fwiw, I mostly just use "make ghci"

[14:23] <lightstep> if the wow, cool

[14:23] <lightstep> s/ if the//

[14:24] <Limbic_Region> autrijus - so far I haven't gotten any answer expect WRT coroutines

[14:24] <autrijus> there's two answers

[14:24] <autrijus> but not from @larry

[14:24] * Limbic_Region thought luke was in @larry ?

[14:24] <autrijus> oh, he is

[14:25] <autrijus> had not see his mail yet

[14:25] <Limbic_Region> he was the one with the gather/take answer

[14:25] <Limbic_Region> which isn't at all what I was asking

[14:25] <autrijus> actually gather/take isn't a _bad_ answer

[14:25] <autrijus> because lazy list is a form of coroutine

[14:26] <autrijus> but problem is the interleaving semantics may or may not be the same as a traditional coroutine is

[14:26] <autrijus> esp. when there are other lazy lists involved

[14:26] <autrijus> in the computation

[14:27] <autrijus> http://haskell.org/hawiki/PythonGenerator maybe related.

[14:30] <Limbic_Region> and now Luke and I are accidently having a discussion off-list

[14:30] <scook0> I just realised why my 'make optimised' was taking so long

[14:31] <scook0> Somebody had put "unoptimised :: optimized" in the Makefile

[14:31] <scook0> Fixed now

[14:31] <autrijus> danke

[14:31] <scook0> s/make optimised/make unoptimised/

[14:38] <Limbic_Region> heh - that's one way to skew the numbers *grin*

[14:38] <Limbic_Region> off-list to on-list discussion has been restored - I see Luke's point and don't disagree with it - I am asking questions not making suggestions

[14:39] <autrijus> Limbic_Region: fwiw, I see Luke's point too.

[14:39] <autrijus> it's just he is simplifying stuff a bit.

[14:39] <autrijus> because when there are multiple Lazy lists involved

[14:39] <autrijus> in each other's production

[14:39] <autrijus> and at least one of it involved external IO

[14:40] <autrijus> then a python generator's behaviour does not neccessarily agree with a lazy list based generator.

[14:41] <autrijus> but maybe we can explicitly define the lazy list generator's semantics as a coroutine.

[14:41] <autrijus> that may be the way to go.

[14:41] <Limbic_Region> did my last reply come through?

[14:41] <autrijus> i.e. a gather{} always saves control stack

[14:41] <Limbic_Region> I hope so

[14:42] <Limbic_Region> basically I said I am not indicating behavior I would like to see only asking if a decision has been made so I can write tests

[14:42] <Limbic_Region> and then I say, ok - I lied - I do have an opinion (not on behavior but syntax) - it should at least resemble coroutines in other languages

[14:43] <autrijus> I believe iblech offered a reformulatin.

[14:45] * Limbic_Region is catching up 

[14:45] <Limbic_Region> I spent a fair amount of time with Luke getting our entire conversation back on-list

[14:48] <Limbic_Region> so gather/take is the only ruled on stuff at this point

[14:48] <Limbic_Region> *shrug*

[15:02] <gaal|work> nothingmuch, ping

[15:02] <nothingmuch> pong

[15:03] <gaal|work> hey. remember http://sial.org/pbot/9831 ? that bare 'svn' in the doc stanza, it's not supposed to be there is it?

[15:04] <nothingmuch> svn up

[15:04] <gaal|work> but you're already after an svn up.

[15:29] <Juerd> Hey, freenode's back

[15:29] <Juerd> Neat.

[15:29] <gaal|work> hey Juerd.

[15:30] * Limbic_Region didn't know freenode went missing

[15:42] <wolveria1> irssi-- # what do you mean can't call my ->new()? 

[15:42] <jhorwitz> autrijus: ping

[15:42] <autrijus> jhorwitz: pong

[15:43] <autrijus> perlbot: nopaste

[15:43] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[15:43] <jhorwitz> if you can eval an IMC buffer, will you still need to be able to read .imc files?

[15:44] <autrijus> no

[15:44] <autrijus> evalling a buffer is enough

[15:44] <jhorwitz> that's the answer i was looking for.  ;-)

[15:44] <pasteling> "autrijus" at 220.132.132.105 pasted "for jhorwitz" (24 lines, 1.1K) at http://sial.org/pbot/9919

[15:44] <autrijus> ok. I need to run for dinner 

[15:45] <autrijus> that nopaste may or may not be useful to you -- I think you may already have it figured out 

[15:45] * autrijus eagerly waits for eval_parrot()

[15:45] <autrijus> be back in a bit... &

[16:03] *** nnunley_ is now known as nnunley

[16:40] <Limbic_Region> ok - hash versus junctions question - if you want to only add items to an array if they are not already in the array, would you prefer push @foo, $value if $value eq none(@foo) or the standard if ! exists $seen{$value} ?

[16:49] <Juerd> Limbic_Region: Hash, for great justice, ehm, efficiency.

[16:49] <Juerd> Limbic_Region: I'd probably create a type that does both Array and Hash, where the hash uses reverse logic: give the value, get back the index

[16:51] <Limbic_Region> Juerd - I thought about it right after I wrote it and smacked forehead

[16:51] <Juerd> Limbic_Region: This can be a repeated linear search as with $value eq none(@foo), but when needed optimized to use a hash internally

[16:51] <Limbic_Region> if it was a one shot deal it is up in the air for me

[16:51] <Juerd> Limbic_Region: Abstraction's good.

[16:51] <Limbic_Region> if you are going to keep doing it is silly to use a junction

[16:51] <lightstep> /quit

[16:51] <Limbic_Region> Juerd - will share with you why I was asking

[16:51] <Juerd> Limbic_Region: Parse error

[16:52] <Juerd> 18:54 < Limbic_Region> if you are going to keep doing it is silly to use a junction

[16:52] <Juerd> I don't know what that means

[16:52] <Limbic_Region> http://perlmonks.org/index.pl?node_id=453774

[16:52] <Limbic_Region> meaning if the push @array, $value was only going to be executed one time then performance really isn't a concern

[16:53] <Limbic_Region> if you are going to test each time you add an element and you expect that to be a number of times it is silly to use the junction

[16:53] * Limbic_Region realized that right after he wrote it

[16:53] <Juerd> I find your perl style funny, with the whitespace within ().

[16:54] <Limbic_Region> Juerd - I started doing that with single argument/parameters but not with multiple - haven't really decided if I like it yet

[16:54] <Juerd> If it helps you decide, know that I don't :)

[16:55] <Juerd> I use whitespace in brackets that construct

[16:55] <Juerd> Not in brackets that group

[16:55] <Juerd> Or in subscripting brackets

[16:55] <Juerd> (1, 2)

[16:55] <Juerd> [ 1, 2 ]

[16:55] <Juerd> foo(1, 2)

[16:55] <Limbic_Region> I know you are very particular about your style

[16:55] <Juerd> @foo[1, 2]

[16:56] <Limbic_Region> I am still quite maleable

[16:56] <Limbic_Region> given the way I used to code in BASIC - "I've come a long way baby"

[16:56] <Juerd> Now comes the funny example: foo(( 1, 2 ), 3)

[16:56] <Juerd> But that should have been written as foo([ 1, 2 ], 3) anyway.

[16:57] <Juerd> Limbic_Region: I come from BASIC too and have learned to not use that as an excuse :)

[16:57] <Limbic_Region> I'm not using it as an excuse - just as a reference point for relativity

[16:57] <Juerd> Same thing

[16:58] <Juerd> :)

[16:58] <Limbic_Region> not at all

[16:59] <Limbic_Region> if you are going to evaluate where you believe someone is on a path to where you feel they should be - to judge their progress you need to know where they started

[17:00] <Juerd> In where people start, I choose to ignore the BASIC part entirely

[17:00] <Juerd> As that's too different from Perl.

[17:00] <Limbic_Region> brb - helping diotalevi with a Pugs/GHC issue at the Monastery

[17:03] <Limbic_Region> Juerd - I am still not sure you are seeing my point though I am not sure it is worth trying to make

[17:03] <nothingmuch_> ooh! diotalevi is coming on board?! HURAAH!

[17:03] <Limbic_Region> trying very hard nothingmuch

[17:04] <nothingmuch_> (you can lure him by saying he will already have positive karma, before even showing up!

[17:04] <nothingmuch_> Limbic_Region++

[17:04] <nothingmuch_> diotalevi++

[17:04] <Limbic_Region> right now his problem is knowing if he built GHC right (wants to know if there is a test suite) since he can't find or doesn't believe there is a binary build for Sparc/NetBSD

[17:05] <nothingmuch_> pugs is a good enough test suite, methinks =)

[17:06] <Limbic_Region> nothinmuch - would you mind joining the CB and helping him

[17:06] <Limbic_Region> I need to run to a meeting

[17:06] <nothingmuch_> sure

[17:06] <nothingmuch_> should I pretend to be naive?

[17:06] <nothingmuch_> ah, nevermind

[17:07] *** nothingmuch_ is now known as nothingmuch

[17:07] <Limbic_Region> Juerd - I think anyone who uses what they used to do as an excuse for not moving forward is just that - an excuse - someone that is willing/trying to move forward but explaining past influences to help others appreciate the relative progress isn't making excuses

[17:07] <Limbic_Region> and on that note - I am off

[17:09] <nothingmuch> stevan: bonk

[17:09] <nothingmuch> (which is more violent than ping)

[17:13] <nothingmuch> kill CONT => pidof(stevan);

[17:18] *** wolveria1 is now known as wolverian

[17:37] <Juerd> Today's a very busy day on p6l

[17:37] <Juerd> Over 60 messages already

[17:55] <Juerd> afk

[18:16] <Corion> r2697 - http://datenzoo.de/pugs/win2k.html - 4741 ok, 51 failed

[18:19] <ninereasons> What are the svn repository targets for perl6_doc and Perl6-Bible ?

[18:19] <ninereasons>  (alluded to in http://sial.org/pbot/9831)

[18:20] <nothingmuch> see the top of util/catalog_tests.pl

[18:20] <nothingmuch> and delete the line with just 'svn'

[18:20] <nothingmuch> it's bullshit

[18:20] <ninereasons> thank you nothingmuch 

[18:21] <nothingmuch> =)

[18:21] <nothingmuch> please note that my machine is SMP

[18:21] <ninereasons> heh, I mean, "thank you much, nothingmuch" 

[18:21] <nothingmuch> you might not want to do parallel testing, etc

[18:22] * nothingmuch thinks of smoking his weekly cigarette

[18:26] <ninereasons> is the perl6_doc the "official" set of AE&S , nothingmuch ?

[18:27] <nothingmuch> yep

[18:27] <nothingmuch> from svn.perl.org

[18:43] <Corion> Heh. Seems like I got $*PID working on Win32 now ...

[18:44] <Corion> ... so I can now hunt down some other stuff that needs Win32 API interaction. I'm not sure if my code is good, because I couldn't get it to compile with an "unsafe" sprinkled in.

[18:50] <Corion> Whoops - the build broke, because I left a syntax error in ... :(

[18:53] <lightstep> here is breaks at Pugs/Compat.hs

[18:53] <Corion> lightstep: Yep - just committing the fixed version, sorry

[18:53] <Corion> r2700

[18:55] <lightstep> funny, it's not clear what the error is

[18:56] <Corion> lightstep: It is the "unsafe". Once that gets removed, it compiles.

[18:56] <Corion> ... not that I'm not sure if the "unsafe" would be significant. But as the pid doesn't change during the course of the program, I don't care much.

[18:57] <lightstep> unsafe is the default

[18:58] <lightstep> but i get a warning on line 47, and then make exits with "Error 1"

[18:59] <Corion> lightstep: Weird - with r2700 ?

[18:59] <lightstep> yes

[18:59] <Corion> Aiieeee - and now I get a segfault from Pugs.

[18:59] <Corion> lightstep: Then maybe my #ifdef magic is broken ...

[18:59] <Corion> you're not using Win32, are you?

[18:59] <lightstep> it probably is

[19:00] <lightstep> oh, wait, not

[19:00] <lightstep> but pugs_config.h is strange

[19:00] <Corion> lightstep: I haven't touched that ... I hope ...

[19:01] <lightstep> i took a look at it, and it still says PUGS_VERSION "6.2.0" PUGS_DATE "April 13, 2005"

[19:03] <Corion> lightstep: That's weird. Kill it and start fresh?

[19:04] <lightstep> tried it

[19:04] <lightstep> apparently, you should remove the import of System.Posix.Internals

[19:04] <lightstep> that fixed it here

[19:05] <lightstep> or, alternatively, move it to the non-posix part (if it needs it)

[19:06] <Corion> lightstep: Ah - that's a leftover of my wild goose chase... Sorry!

[19:12] <Corion> (fixed in r2701)

[19:12] <lightstep> yeah, i saw

[19:13] <Corion> lightstep: I mentioned it for the convenience of the backloggers :)

[19:14] <lightstep> it's really bothering there're no regular smoke tests

[19:15] <Corion> lightstep: Well, it would bother me more to have my Win32 box run all the time. But yes, an automated message onto irc with the smoke results would be nice

[19:21] <jhorwitz> autrijus: ping

[19:38] <ninereasons> wiping out and then replacing the src/ directory sometimes makes weird problems go away.

[19:39] <lightstep> probably when Makefile changes too much that make clean isn't effectivy any more?

[19:40] <ninereasons> or perhaps a few Haskell artifacts from previous builds do not really go away with make clean;

[19:41] <Corion> I think some .o aren't getting cleaned out properly, but I always wipe src/ and check out fresh whenever that happens instead of investigating

[19:47] <mj41> r2700, WinXP,  -todo 933/4790 subtests failed, 80.52% okay.

[19:50] <mj41> 80.52 percent Perl6. Nice work. 

[19:50] <mj41> Any volunteers for t/statements/for.t  (  30    3  10.00%  28-30  ) ? 

[19:52] <mj41> 'for @list.values -> $num is rw { $num++ }' and such

[19:53] <lightstep> the `for' implementation is a little long

[19:53] <lightstep> lines 315-339

[19:55] <nothingmuch> autrijus++

[19:55] <nothingmuch> i just realized pugs has made me a more effective programmer, due to exposure to haskell

[19:55] <nothingmuch> even though I don't know haskell yet

[19:55] <ninereasons> competence by osmosis ?

[19:56] <nothingmuch> yes, you could say that =)

[19:56] <nothingmuch> althought his is not so much competence

[19:56] <Juerd> nothingmuch: Can you give a real world example of what you did now and what you would otherwise have done?

[19:56] <nothingmuch> i could do this stuff before

[19:56] <nothingmuch> it's just nowI'm doing it nicer

[19:56] <nothingmuch> Juerd: plentiful recursion to clean structure up is coming out much more naturally

[19:56] <nothingmuch> i didn't think of using the more functional way that often before

[19:56] <nothingmuch> being an OOP head

[19:57] <Juerd> I see

[19:57] <Juerd> OO is harmful if it's the only tool you have

[19:57] <nothingmuch> but a bit of hacking in haskell forced me to get used to it

[19:57] <nothingmuch> it's not the only tool I had, it's just the one i used most naturally, but I agree

[19:57] <nothingmuch> i don't feel harmed by my preference

[19:57] <Juerd> You said it was less effective

[19:58] <nothingmuch> my previous preference

[19:58] <nothingmuch> you could s/effective/elegant/

[19:58] <nothingmuch> maybe not maintainable

[19:58] <nothingmuch> but actually I agree, and I shouldn't argue

[19:58] <lightstep> what is cxtSlurpyAny ?

[19:58] <Limbic_Region> nothingmuch - how did things with diotalevi go?

[19:58] <nothingmuch> although I don't agree with OOP being the only tool I had ;-)

[19:58] <nothingmuch> Limbic_Region: he is bold, and I have no time

[19:58] <nothingmuch> he's bootstrapping by the docs

[19:59] <nothingmuch> and I have to get real work done

[20:01] <Limbic_Region> nothingmuch - his claim is that there is no binary build of GHC for Sparc/FreeBSD 

[20:01] <nothingmuch> i have no idea if that's true or not

[20:01] <nothingmuch> but he's bootstrapping

[20:03] <Limbic_Region> yeah - I told him I didn't know how to help him either because of the bootstrapping problem

[20:04] <Limbic_Region> he said what problem (being bold)

[20:04] <Limbic_Region> that's about the time I had to go to a meeting

[20:44] <Corion> Pugs/Compat.hs is mostly evolving into Pugs/Compat/Win32.hs - should this be split up one day, or should this be kept in Compat.hs for the time being?

[20:49] <Juerd> I HAVE A NEW DOMAIN NAME

[20:49] <Juerd> AND I LIKE IT VERY MUCH

[20:49] <Juerd> I HAVE NO IDEA WHAT TO DO WITH IT THOUGH

[20:49] <Juerd> It is perl6.nl

[20:50] <Corion> Juerd: You can alias it to pugscode.org for the time being :-))) Or set up a nopaste handler for #perl6 :)

[20:50] <Juerd> The problem with aliases is that they create expectations

[20:51] <Juerd> I want it to be its own site

[20:51] <Juerd> That can be a single page with a link

[20:51] <Juerd> You see, I want to keep the possibility of using it for commercial purposes when perl6 is released

[20:52] <webmind> like what ?

[20:52] <Juerd> Like a listing of dutch perl professionals who can help learn and/or migrate to perl6

[20:53] <webmind> give it some what generic perl6 related content that'll fit with a purpose you might have later for it ?

[20:53] <Juerd> Duh :)

[20:53] <Juerd> The content is the hard part.

[20:54] <Juerd> I could make it a wiki

[20:54] <Juerd> But that'd require finding one that doesn't suck first

[20:56] <Corion> Juerd: CGI::Wiki is a decent wiki toolkit IMO. There is also mojomojo, which has fancy features.

[20:56] <Corion> (like "live preview")

[20:57] * Arathorn likes moinmoin, if you can swallow the .py medicine..

[20:57] <integral> write a perl6 wiki...

[20:57] <Juerd> integral: Hm, nice idea

[20:57] <Juerd> A pugs based web server with a tiny wiki

[20:58] <Juerd> I quite like the sound of that

[20:58] <Juerd> Do we have HTTP::Daemon yet? :)

[20:58] <Arathorn> wasn't one of the first perl wikis only about a 40 line CGI?

[20:58] <Juerd> I don't want it to be CGI

[20:58] <Juerd> Only self-hosting is enough showing off

[20:59] <obra> Juerd: irc there is an http::server::simple in there somewhere

[21:00] <Juerd> Let's see if I can find it

[21:00] <Juerd> There's only HTTP::Headers so far

[21:00] <obra> maybe I'll port it tonoght

[21:00] <obra> tonight

[21:00] <Juerd> And a server example, non-modular

[21:00] <obra> http::server::simple is easy ;)

[21:01] <Juerd> Good enough for what I want though :)

[21:01] <obra> s/easy/trivial

[21:01] <Juerd> obra: It'd be great if you ported this

[21:01] <Juerd> Hm, that HTTP server is VERY simplistic :)

[21:02] <Juerd> It ignores the request and has hard coded output :)

[21:02] <obra> Juerd: noted.

[21:02] * obra has customer stuff. but after that will try

[21:04] * Corion discovers http://haskell.org/hawiki/FfiCookbook

[21:21] <Corion> Hmmm. we don't have t/builtins/system.t ... :)

[21:22] <Corion> I'll hack my test into t/magicals/env.t for the rw support of %*ENV

[21:22] <theorbtwo> Corion, what can system() portably to test it?

[21:23] <Corion> theorbtwo: system('pugs','-e','say %*ENV<FOO>'), for example

[21:23] <theorbtwo> OK, works for me.

[21:23] <theorbtwo> Don't your pugsrun tests cover that?

[21:24] <Corion> theorbtwo: No, they don't. (and it's from the wrong side, there)

[21:24] <Corion> theorbtwo: But in a sense, yes they cover that too, by using it.

[21:24] <Corion> But I prefer explicit tests over implicit assumptions of working features

[21:24] <theorbtwo>  /metoo

[21:51] <cwest> url

[22:00] <meppl> guten abend

[22:09] <meta_perl> guten abend

[22:09] *** meta_perl is now known as _metaperl

[22:13] <meppl> good evening meta_perl

[22:21] <_metaperl> good evening

[22:27] <Corion> mpeppl!

[22:28] <Corion> Hmmm. does undef %ENV{PATH} # enter an endless loop for anybody or did I break my build?

[22:28] <Corion> Err - delete %*ENV{PATH} # typoe

[22:29] <Corion> Gah. delete %*ENV<PATH> # is what I really meant

[22:30] <ninereasons> r2696 hangs on that, Corion 

[22:30] <Corion> ninereasons: Thanks. So it's a bug and not caused by me. That's somewhat good.

[22:32] <ninereasons> in fact, all the way back since r1876, pugs has exhibited this behavior

[22:33] <ninereasons> an old bug, Corion 

[22:33] <Corion> ninereasons: I just stumbled on it now, as I'm trying to make %*ENV work on Win32 :)

[22:34] <ninereasons> i'm looking at Linux and FreeBSD here, fwiw

[22:59] <Jonathan_> Hmmm....Pugs segfaults (on WinXP) while running t/unspeced/eval_yaml

[23:00] <Jonathan_> Don't have time to look into it right now.

[23:07] <Corion> Jonathan_: Segfaults here as well (Win32/Win2k) - I think it's a bug in the C code.

[23:10] <Jonathan_> Yeah, makes sense. Should I post it on the list, or will someone notice it here?

[23:12] <Corion> Jonathan_: Autrijus also reads the logs here, so he (or whoever put the YAML C code in) will notice here

[23:15] <Jonathan_> OK, cool. :)

