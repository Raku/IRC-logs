[01:29] <nothingmuch> evening

[01:56] <dduncan> evening

[02:00] <svnbot6> r8010 | Darren_Duncan++ |  r959@Darren-Duncans-Computer:  darrenduncan | 2005-11-25 17:38:38 -0800

[02:00] <svnbot6> r8010 | Darren_Duncan++ |  /ext/Rosetta-Incubator : reverted version nums on 4 modules to 0.1.0 from 0.10.0, since they never had any X.YY versions

[06:07] <svnbot6> r8011 | autrijus++ | * transcribe some random thoughts re PIL2 before I

[06:07] <svnbot6> r8011 | autrijus++ |   accidentally erase it again ;)

[06:25] <luqui> autrijus, ping

[06:26] <autrijus> luqui: pong

[06:26] <autrijus> luqui: glad to see you are getting lambdaminded by the day :)

[06:27] <luqui> yeah.  I'm getting quite frightened to be honest.

[06:27] <luqui> "oh", I think, "I just need an RWS monad"

[06:27] <luqui> What?  How do I know that?!

[06:27] <luqui> anyway...

[06:27] <luqui> about the notes you just checked in

[06:27] <autrijus> yes?

[06:27] <luqui> A PIL tree is merely an (unordered!) set of static declarations;

[06:27] <autrijus> (as you can see I'm in a more imperative mood.)

[06:28] <luqui> Why not let the PIL tree be the definitinion of the "IMPORT" function

[06:28] <luqui> or, rather, a wrapper around that, but with the same purpose

[06:29] <autrijus> I don't quite get it.

[06:29] <autrijus> eval 'say 3'

[06:29] <autrijus> this "say 3" gets compiled with a IMPORT?

[06:29] <autrijus> please elaborate

[06:30] <luqui> well, that was just an idle thought.  It just feels wrong to let the tree be definitions at the top level

[06:30] <luqui> instead of something that is executed

[06:30] <autrijus> but the definition is expressed as a set of calls to the underlying runtime engine

[06:30] <autrijus> see example of "say Hello World" below

[06:30] <luqui> ahh, yes, I hadn't finished reading them

[06:30] <luqui> I'll get back to you

[06:30] <autrijus> the unorderness is merely noting that we'd like to go thru one level of indirection for sym lookups

[06:31] <autrijus> so that the order of executing those definition-statements won't matter

[06:31] <autrijus> it'd be much easier to express with code :) but sure, do finish reading them

[06:32] <luqui> anyway, I read and grokked "colored local type inference"

[06:32] <autrijus> excellent. that will come in handy.

[06:32] <luqui> grokked being the important part.  so now I get to design a calculus for perl 6 that is inferrable.

[06:32] <autrijus> good. then you need to somehow specify the annotatedness required for union types.

[06:32] <luqui> probably taking some linear combination of their colored F<: and PIL2

[06:32] <autrijus> that's a Very Interesting research problem.

[06:33] <autrijus> (and intersection types.)

[06:33] <luqui> oh, yeah, right, union types (as in Foo|Bar), as opposed to tagged unions

[06:33] <autrijus> yup

[06:33] <luqui> I'm hoping I can finesse them out of the core calculus

[06:34] <luqui> that is, still let you write Foo|Bar, but only in a limited set of circumstances

[06:34] <autrijus> right, the quest is to define the limit

[06:34] <luqui> make it a pattern matching problem rather than a typing problem

[06:34] <luqui> okay.. well, it'll be fun

[06:34] <luqui> er, "fun"

[06:35] <autrijus> may be of use is Semantic Typing in http://www.cduce.org/papers.html

[06:35] <autrijus> B.Pierce noted we need to grok that if we are to include union/intersection typing.

[06:35] <autrijus> have "fun" :)

[06:42] <sky__> *yawn*

[06:43] <autrijus> hi sky :)

[06:43] <luqui> heh, re: KISS.  I've found that when designing ASTs KISS works in reverse

[06:43] <autrijus> mmm?

[06:43] <autrijus> you want to maximize node types?

[06:44] <luqui> you want to get as few nodes as possible, so you overengineer to do so

[06:44] <luqui> keeping it simple involves putting in a special case node where one *might* not be needed

[06:44] <autrijus> Keep It Simple, Smart

[06:45] <autrijus> but yeah, I see your point

[06:47] <sky__> hi autrijus 

[06:48] <sky__> I am debating wheter I should fly to taiwan over christmas

[06:48] <autrijus> that'd be cool

[06:48] <autrijus> I'll be back from .au on 14th

[06:51] <hcchien> christmas. :)

[06:52] <autrijus> .tw president just yesterday proposes to make christmas a off-work holiday

[06:52] <autrijus> but probably wouldn't make it on time this year ;)

[06:57] <obra>    autrijus! hello!

[06:58] <autrijus> obra: greetings!

[06:58] * autrijus is @ taipei.pm meeting

[06:58] <autrijus> listening gugod's talk on the much improved, certainly impressive Catalyst 5.57

[07:00] <hcchien> obra: did you see my flickr?

[07:02] <Khisanth> autrijus: am I going nuts or did one of your journal entry disappear?

[07:02] <autrijus> Khisanth: you are not going nuts -- I had a minor crisis and accidentally rmed bunch of stuff -- don't ask :/

[07:02] <geoffb> *yawn*  Hey all . . . .

[07:03] <Khisanth> hmm almost 2am

[07:03] <Khisanth> my cousin was right, this DOES feel like a sunday :(

[07:06] <dduncan> greetings all

[07:07] <autrijus> hey dduncan 

[07:08] <obra> hcchien: no! where?

[07:08] <dduncan> I notice things have been quiet with you lately ... lots of reading?

[07:08] <hcchien> obra: http://www.flickr.com/photos/hcchien/

[07:09] <obra> that RT looks a lot like trac

[07:09] <hcchien> yup. haha

[07:10] <autrijus> dduncan: yeah, cc2e mostly, and pbp

[07:10] <obra> how much of RT is tracced?

[07:10] <autrijus> pbp is like a fractal - more you read into it more you find - not surprising coming from dconway

[07:11] <dduncan> I've read every page of pbp as of a few weeks ago

[07:11] <hcchien> obra: about 5 or 6 template pages now

[07:11] <dduncan> there's even a new email list for discussing it now ...

[07:11] <dduncan> its [email@hidden.address]
[07:11] <obra> hcchien: cool

[07:12] <autrijus> yeah, and automatic refactorers -- I bought 4 copies to give to taipei.pm

[07:12] <dduncan> started under a week ago

[07:12] <autrijus> .tw only had 15 available copies and oreilly.com.tw isn't going to translate it :/

[07:12] <geoffb> I wonder why ...?  Seems like it would sell like hotcakes in any language.

[07:13] <autrijus> comparing cc2e and pbp side-by-side is very enlightening

[07:13] <geoffb> autrijus, do tell . . . .

[07:13] <autrijus> mostly, the parts they agree tend to be about programming

[07:13] <autrijus> the parts they disagree tend to be about C++/Java/VB vs Perl

[07:13] <dduncan> does anyone know if there will be another YAPC in Canada any time soon, like the Toronto one? ... 'twould be interesting to meet autrijus in person

[07:13] <autrijus> and by focusing on things they agree on, the respective bias can be avoided

[07:14] <autrijus> dduncan: next hackathon is YAPC::Israel on Feb

[07:14] <dduncan> I can't afford to travel that soon ... summer at the earliest

[07:14] <geoffb> autrijus, makes sense

[07:14] <autrijus> geoffb: people who read advanced computer books prefers English normally

[07:14] <autrijus> and "perl books doesn't sell except for cookbook/llama" according to ora.com.tw

[07:14] <geoffb> Kinda makes you want equivalent books from other language groups, like a Prolog version.

[07:15] <autrijus> indeed

[07:15] <geoffb> I need to pick up Thinking Forth again, I have the feeling it will have a lot of that "best practices" kind of thing as a side effect.

[07:16] <geoffb> Hmmm, I thought PBP was doing quite well . . . didn't realize it was still far behind the cookbook.

[07:17] <obra> It's also brand new

[07:18] <obra> It has had no time to build up a mythos

[07:18] <obra> hcchien: what are you doing the RTrac for? also, when will it be ready?

[07:20] <hcchien> obra: just for fun. ui rules. some ppl in .tw love trac, but I think if rt got the frondend like trac, it would be more popular. :)

[07:20] <obra> cool

[07:20] <obra> lots of people love trac

[07:20] <obra> I've been working on something new to make it easy to build lightweight apps.

[07:21] <obra> We'll be releasing the first dev version on Christmas

[07:25] <hcchien> is it on svn repository?

[07:38] <obra> hcchien: not yet. still secret

[07:38] <obra> still writing demos ;)

[07:38] <autrijus> movie! movie!

[07:39] <obra> :P

[07:39] <obra> code sample?

[07:40] <obra> http://fsck.com/~jesse/JiftyWiki.tgz

[07:40] <autrijus> movie as in: http://rawmode.org/~gabbana/movie_title.png

[07:41] <obra> right. no movies yet.

[07:41] <obra> certainly not until after the first developer release ;)

[07:41] <sky__> I HATE MOVIES

[07:41] <sky__> they are useless

[07:41] <sky__> you can't fucking copy and paste from a movie :)

[07:41] <obra> we'll be lucky if we manage more than two sample apps

[07:41] <sky__> nor can you skim them

[07:41] <obra> movies are great marketing material

[07:41] <sky__> or search them

[07:41] <sky__> I disagree

[07:42] <sky__> good night :)

[07:57] <hcchien> obra: what is the JiftyWiki?

[08:00] <hcchien> a wiki in RT?

[08:04] <obra> no. it's a wiki in Jifty, our new framework

[08:14] <obra> that code has everything you need for fastcgi and standalone servers, database setup, etc

[08:37] <hcchien> autrijus just present it. :p

[08:39] <autrijus> obra: I presented your NPW slides :D

[08:39] <autrijus> _right_ after gugod's catalyst talk

[08:39] <autrijus> for maximum dramatic effect

[08:40] <hcchien> obra: so will the rt be rewitten? 

[09:02] <autrijus> luqui: rehi... I gotta run, be back in ~30min :)

[09:35] <dduncan> sky__, who says you can't copy and paste from a movie?  it's just a data file like any other

[10:28] <gaal> whoa, is that movie actually available for viewing somewhere?

[10:36] <nothingmuch> movie?

[10:49] <gaal> nothingmuch: you're the star: http://rawmode.org/~gabbana/movie_title.png (well, your bass-kickin' fingers are)

[10:52] <nothingmuch> oh, that one

[10:52] <nothingmuch> err... =(

[10:52] <nothingmuch> merlyn backed out

[10:52] <nothingmuch> we're waiting for others to finish audio

[10:53] <r0nny> morning

[10:54] <r0nny> did anyone try to do a pugs plugin for irssi ?

[10:54] * nothingmuch goes to visit his grandma

[14:25] <r0nny> hello

[14:26] <r0nny> are atomic mehtods atomic per instance, or global atomic ?

[14:27] <r0nny> (and how to check if one of them allready runs)

[14:28] <r0nny> anyone ?

[15:05] <rafl> Juerd_: Will you be at 22c3? Still need something to sleep? Write [email@hidden.address] and say I already asked for a place to sleep for you.

[16:00] <malverian> autrijus: ping

[19:48] <DesreveR> yo

[19:49] <DesreveR> is there any perl6 thing can search files ?

[19:51] <DesreveR> anyone ?

[19:55] <revdiablo> File::Find

[19:55] <revdiablo> I don't know how good it is, or up to date, but it's in Pugs' ext/File-Find

[19:56] <revdiablo> Looks pretty nice

[19:58] <DesreveR> they made it a object

[20:00] <revdiablo> Yeah, the interface looks a bit cleaner than File::Find (don't you just love understatement?)

[20:02] <DesreveR> i'd like ta use it kinda like map

[20:02] <DesreveR> find{ regex }==>sort==>@queue;

[20:05] <revdiablo> Write an alternate interface

[20:05] <DesreveR> hmm

[20:05] <revdiablo> Someone would probably give you a commit bit and let you add it to the project

[20:06] <DesreveR> hmm

[20:06] <DesreveR> im far from understanding perl6 good enough to do so

[20:07] <DesreveR> well - i will do a sub can be used with array redirection

[20:09] <DesreveR> btw - can i limit the types of a member var in a subclass ?

[20:10] <DesreveR> hmm

[20:12] *** gaal_ is now known as gaal

[20:14] <DesreveR> rofl

[20:15] <DesreveR> i just realized i can do the insane thing to interpret autofoo files from my build system

[20:35] *** DesreveR is now known as r0nny

[20:48] <Aankh|Clone> G'night.

[21:52] <Juerd_> rafl: How soon do I have to decide? I may be in a much better position to do so in a week (re 22c3)

[22:14] <r0nny> yo

[22:14] <r0nny> how do i pass a local variable as param to a eval'd function call call ?

[22:17] <dduncan> why is the function call eval'd ... what part is generated code?

[22:17] <dduncan> if no code is generated and you just want to catch exceptions, use a try-block

[22:18] <r0nny> no

[22:18] <r0nny> i got something where i need to generate a function-name at runtime

[22:19] <dduncan> is this function package-qualified or object oriented?

[22:19] <r0nny> package-qualified

[22:19] <dduncan> is the package name constant or generated?

[22:19] <r0nny> basically i need to generate a special kind of object depending on a variable

[22:19] <r0nny> its generated

[22:20] <r0nny> read from a config file

[22:20] <dduncan> is the function name constant or generated?

[22:20] <dduncan> what about the arg list ... constant or generated?

[22:20] <dduncan> fyi, I have a working example in Locale-KeyedText where the package name comes from a config variable, but everything else is constant ...

[22:21] <dduncan> this example works without 'eval' ...

[22:21] <r0nny> can i look at it ?

[22:21] <dduncan> if anything but the package name is generated, an eval may be needed

[22:21] <dduncan> its in /ext

[22:21] <dduncan> er, its in /ext/Rosetta-Incubator

[22:22] <r0nny> where exactly

[22:22] <dduncan> the line says: $text = &::($module_name)::get_text_by_key( $msg_key );

[22:22] <dduncan> line 229

[22:23] <dduncan> the $module_name is a package name from a config var, everything else is constant

[22:24] <r0nny> hmm

[22:25] <Khisanth> ?eval 0... ==> @;foo

[22:25] *** evalbot_8004 is now known as evalbot_8011

[22:25] <evalbot_8011> Error:  unexpected ">" expecting term 

[22:26] <dduncan> I'll be going outside in a minute, ...

[22:30] <r0nny> darn

[22:30] <r0nny> i got a problem loading a package with a generated name

[22:31] <r0nny> darn

[22:31] <dduncan> I have to go out for a bit, but if you quickly post the code that isn't working (use nopaste if more than 1-3 lines), I may be able to help you

[22:32] <r0nny> mom

[22:32] <r0nny> there are multiple files

[22:33] <dduncan> to put it in perspective, Locale::KeyedText works by invoking modules whose package names are supplied by the user but that otherwise have a known interface

[22:34] <dduncan> it tries to invoke the known function on a var-supplied package name, first loading the package if necessary

[22:34] <dduncan> the line I showed you assumes package already loaded

[22:34] <r0nny> http://rafb.net/paste/results/kCoS2w20.html

[22:36] <r0nny> i think i did something wrong on the call

[22:36] <dduncan> so you have a compile problem in a different file ... unless the one you pasted is Builder.pm

[22:37] <dduncan> nevermind

[22:37] <r0nny> p pasted both files

[22:37] <r0nny> found the problem

[22:37] <dduncan> good

[22:37] <r0nny> space betwen function name and op ()

[22:37] <dduncan> if I were you, I would break up line 20 into more lines

[22:38] <r0nny> well - i will do now

[22:38] <dduncan> eg. slurp into a variable before evaling it

[22:38] <r0nny> im going to use my eyml sub

[22:39] <dduncan> then make sure the variable contains valid perl code by printing out its contents ... eval requires valid perl code as input methinks

[22:39] <dduncan> a yaml file isn't perl code

[22:39] <r0nny> btw - it use just a value from the file

[22:40] <r0nny> so it genrates the package name

[22:40] <dduncan> also I'll warn you that CATCH isn't working yet ... or wasn't last week, but checking the value of $! like in perl 5 (check $@) does work

[22:40] <r0nny> wont it die if it cant catch ?

[22:40] <dduncan> no, because you have a try block

[22:41] <dduncan> a try block without a catch is a no-op when exception thrown

[22:41] <dduncan> see the Locale-Keyedtext code again for what I refer to

[22:41] <dduncan> it comments out the CATCH solution and uses the other for now

[22:42] <r0nny> hmm

[22:42] <dduncan> if the file slurp results in a package name, you usually first have to 'use' it before invoking a function

[22:43] <r0nny> i do allready

[22:43] <dduncan> good

[22:44] <dduncan> anyway, I have to go out now for a bit ... yard work

[22:51] <r0nny> hf

[23:15] *** SamB is now known as stupid_2d_gamepl

[23:15] *** stupid_2d_gamepl is now known as sidescrolling

[23:15] *** sidescrolling is now known as SamB

[23:25] <svnbot6> r8012 | fglock++ | * /docs/notes/laziness.txt - "List" vs "Tuple"; 

[23:25] <svnbot6> r8012 | fglock++ |   reorganization of sections.

