[00:00] <autrijus> like ovid said, you have to really try to do that :)

[00:00] <obra> clkao++

[00:00] <obra> clkao++ # might do charts on the rt front page.

[00:00] <autrijus> but now, really sleep. 8am. :) &

[00:01] <clkao> it looks prettyuy!

[00:02] <crysflame> mm, sleeep

[00:02] <svnbot6> r3134 (eric256) -- Added tests to show junction bug

[00:03] <clkao> run the new bot and do karma

[00:04] <eric256> adios all.  feels good doing my little part. ;) 

[00:08] <revdiablo> autrijus: thanks, I guess I should have thought to check the README :)

[00:16] <drbean> pugs requires parrot for rules, but parrot-0.2.0 has no Makefile.PL

[00:18] <drbean> It appears I have to run perl Configure.pl first

[00:20] <clkao> is there Makefile.PL in perl ?

[00:21] <clkao> you have to run Configure.sh, not even .pl

[00:23] <drbean> In parrot, you mean?

[00:24] <drbean> I tried to install parrot with CPANPLUS, but failed

[00:25] <revdiablo> running Configure.pl by hand works for me, drbean

[00:27] <drbean> Yeh, it seems to be being built, running by hand.

[00:27] * merlyn builds the PUGS release in another window

[00:29] <merlyn> hey - is this s aknown problem - ld: warning multiple definitions of symbol _BC

[00:29] <merlyn> and if so, can I ignore it?

[00:29] <merlyn> that's for _BC and _UP and _PC

[00:29] <Juerd> I've not seen it before.

[00:29] <merlyn> looks like it's curses related

[00:29] <drbean> clkao: I don't see any Configure.sh, just Configure.PL

[00:29] <drbean> s/PL/pl/

[00:30] <merlyn> 6.2.3 built and installed!

[00:30] <Juerd> merlyn: Great!

[00:31] <Juerd> merlyn: Now you can start writing Learning Perl 6 ;)

[00:31] <revdiablo> pugs it up, baby.

[00:31] <merlyn> Eventually sure

[00:31] <merlyn> I gotta finish alpaca 23d first

[00:31] <merlyn> 2ed

[00:31] <merlyn> due out in november

[00:31] * Juerd still has to read it

[00:31] <merlyn> probably start writing in june or july

[00:31] <Juerd> But I promised myself not to read any book until I finish HOP

[00:32] <Juerd> I never finish books :(

[00:32] <Juerd> And this time I really want to.

[00:33] <Juerd> merlyn: As long as it's in stores by christmas (when Perl 6.0.0 is released), any schedule suffices :)

[00:33] <Odin-LAP> Ever the optimist...

[00:34] <merlyn> of course, which christmas.

[00:34] <Juerd> Odin-LAP: I didn't say which christmas... :)

[00:34] <merlyn> correct. :)

[00:34] <mugwump> it will be all our christmasses coming at once!

[00:34] <Odin-LAP> Juerd: 2106 sound reasonable?

[00:34] <Juerd> Odin-LAP: No.

[00:35] <merlyn> 2106 in what base?

[00:35] <Juerd> Odin-LAP: The world ends in 2037, so it must be before then or all our efforts were meaningless

[00:35] <Odin-LAP> merlyn: Hexadecimal, of course.

[00:35] <merlyn> the world ends dec 23, 2013

[00:35] <merlyn> so say the mayans!

[00:35] <merlyn> and look where they are... dead!

[00:35] <mugwump> 2012 actually

[00:35] <merlyn> right

[00:35] <merlyn> sorry

[00:36] <Juerd> merlyn: The mayans obviously don't use unix time stamps.

[00:36] <merlyn> apparently not.

[00:36] <Juerd> They end january 2038

[00:36] <merlyn> for the last few months, I've been sending out x-mayan-date: headers. :)

[00:36] <Juerd> And we humans always try to solve problems before they occur

[00:36] <Juerd> So we'll have to kill the planet before 2038

[00:36] <merlyn> thansk to gnu emacs. :)

[00:37] <mugwump> "significant" astronomical events on or around that date include: Sol's passing through the equatorial plane of the galaxy, and the precession of the earth's Equinox into Aquarius

[00:37] <merlyn> o/~ the dawning of the age of aquarius ... o/~

[00:37] <Juerd> I expect perl 6.0.0 by christmas 2006 now

[00:38] <Juerd> But I have been too optimistic in the past :)

[00:38] <merlyn> it's also merely a rollover in their calendar too

[00:38] <merlyn> they believed 13 major cycles was enough

[00:38] <obra> Juerd: which xmas?

[00:38] <merlyn> and that' weve been through 5 of those long sets of 13

[00:38] <merlyn> or something like that

[00:38] <merlyn> wikipedia knows more than I do

[00:39] <Juerd> obra: 2006

[00:39] <merlyn> baktuns - there it is

[00:39] <obra> Juerd: which xmas 2006? Orthodox or Catholic?

[00:39] <Juerd> obra: Mine, and I'm neither.

[00:39] <Juerd> http://perlmonks.org/?node_id=204115

[00:40] <Juerd> I guessed 2003-07-05 before :)

[00:41] <Odin-LAP> obra: The distinction can be traced to julian/gregorian calendars. So it's not just the catholics, but also protestant churches...

[00:41] <obra>  Odin-LAP sure.

[00:43] <merlyn> sorry.  we're in the 4th long day.  the 5th begins dec 21 2012, or maybe dec 23 2012.

[00:43] <merlyn> hard to tell which

[00:43] <merlyn> thanks to the catholic church burning all the writings of the priests who visited the mayans

[00:43] <merlyn> (catholic church)-- continually wanting us to live in darkness

[00:44] <Odin-LAP> merlyn: Hmm. Confirmed burned, or possibly in the papal archives?

[00:44] <merlyn> well, same net effect.

[00:44] <merlyn> but from what I understand, confirmed destroyed

[00:44] <merlyn> what little we still now have is from the memory of the priests who wrote the originasl

[00:44] <Odin-LAP> Hm. That sucks.

[00:45] <merlyn> at least, that's what I recall from visiting central america a few months ago

[00:45] <merlyn> when I started adding my mayan date. :)

[00:45] <Odin-LAP> (As does the catholic church and most of organised religion, but that's another story.)

[00:45] <Juerd> It'd really suck if they turn out to be right, though.

[00:45] <merlyn> just like the catholic church really trying to supress copernicus

[00:45] <merlyn> etc.

[00:45] <merlyn> it's all about control bay-bee.

[00:45] <merlyn> just like the republican party right now.

[00:46] <merlyn> turnign the US into their own playground

[00:46] <Odin-LAP> Bah.

[00:46] <Juerd> All politics and religion are about control.

[00:46] <ajs_home> I'm about to send out a follow-up to the "we'll take S29" mail, letting peopel know to send mail to me with suggestions, etc. Anything anyone wants in that message?

[00:46] <mugwump> right now?  it's been going for a LONG time merlyn :)

[00:46] <merlyn> true.  dems have troubles on the other side.

[00:46] <merlyn> getting the populus depedent on government

[00:46] <Odin-LAP> Western "democracy" is a sham. A ploy to hide the powerplaying by various people.

[00:47] <merlyn> Yeah, the closest I label myself is a libertarian, and even that has troubles

[00:47] <mugwump> it's a great way to excuse the need for consensus on any issue

[00:47] <Juerd> Democracy can work

[00:47] <Odin-LAP> merlyn: Libertarianism is yucky too, IMO.

[00:47] <ajs_home> Ok, sending

[00:47] <Juerd> merlyn: It's funny how america's left wing is considered right wing in the netherlands

[00:47] <Juerd> we go lefter! :)

[00:47] <merlyn> someone put it nicely.  you want to have a debate that gets about 49% of the people on each side.

[00:47] <merlyn> so you slide the argument left and right until that happens.

[00:47] <merlyn> then that aargument can be a lightning rod to keep people from asking about real issues

[00:48] <Odin-LAP> The U.S. only has a right wing. It's got an extremist right, and a far-extremist right.

[00:48] <mugwump> that's 49% of the people who vote, too

[00:48] <merlyn> apparenly, the current axis debates are on gay marriage and such

[00:48] <merlyn> that's apparently a 49% split issue

[00:48] <merlyn> like abortion was a few years ago

[00:49] <Juerd> It quite schocked me when a few days again I learned that in the US, 1 out of every 150 or so people is in prison.

[00:49] <merlyn> and a child is beaten every 14 seconds.  poor kid. :)

[00:50] <merlyn> why wouldn't you believe that 1 of every 150 people are so below average (6 sigma deviants) that they deserve to be locked up? :")

[00:50] <merlyn> that makes sense to us. :)

[00:51] <Odin-LAP> Nobody deserves to be locked up.

[00:51] <Juerd> merlyn: Is that 6? I'd guess around 4.

[00:51] <Odin-LAP> Have you heard of the Stanford prison experiment?

[00:51] <Juerd> Probably less, 3.1?

[00:51] <Juerd> merlyn: Yeah - that it makes sense is the scary part. It's normal for you.

[00:52] <merlyn> we convict on a curve in the US. :)

[00:52] <mugwump> prisons are just as bad as western hospitals, functionally.  ie, they work sometimes but generally are going about it all wrong..

[00:52] <merlyn> there's no absolute wrong, just relatively bad enough to look really wrong by comparison

[00:52] <Odin-LAP> merlyn: I'm sure that's of comfort to ODESSA.

[00:53] <merlyn> well - I figure it's how I got convicted.

[00:53] <mugwump> if they released the 75% of people in prison for drug crimes and started selling them through pharmacies to undermine the gangs that would be a good start

[00:53] * Juerd wouldn't want to live in, or visit, the US

[00:53] <merlyn> I was an easy target. "looking whre the light's good"

[00:53] <merlyn> legallizing most vice crimes would proabbly eliminate 60% of the prisons

[00:53] <merlyn> but that'll never happen here

[00:53] <Odin-LAP> merlyn: Of course. If they were to start looking where there's no light, they might have to actually spend some effort!

[00:53] <Juerd> "soft" drugs will eventually be legal here

[00:53] <mugwump> shit, I thought this was perl.org #perl for a moment.

[00:53] <Juerd> It has to go that way.

[00:54] <Odin-LAP> Juerd: Hm. For the whole country, then?

[00:54] <Juerd> mugwump: Why does that matter?

[00:54] <merlyn> I'm still trying to figure out where I'd rather live though.

[00:54] <Juerd> Odin-LAP: It can't be legal for only a part of it.

[00:54] <merlyn> We still enjoy relatively more freedom than almost any other country.

[00:54] <merlyn> everythign taken as a whole.

[00:54] <Juerd> Odin-LAP: We have a single law system for the entire (small) country.

[00:54] <Odin-LAP> Juerd: I understand the Amsterdam police are quite liberal with their interpretation..?

[00:55] <merlyn> it is indeed time to garbage-collect the case-law of the US

[00:55] <Juerd> Odin-LAP: All are, all are.

[00:55] <merlyn> as in hit the big reset button

[00:55] <Juerd> Odin-LAP: Amsterdam just likes to benefit from the extra tourism :)

[00:55] <Juerd> And Amsterdam is the only place where a tourist can easily find the "coffee" shops.

[00:55] <merlyn> I suspect I'll marry a mexican, and move there.

[00:55] <merlyn> that seems like the easiest path out.

[00:55] <Odin-LAP> Juerd: Hmm. I see.

[00:56] <Juerd> (To a dutchman, a "coffee shop" is not a place where you get coffee. Remember this if you ever visit our country.)

[00:56] <merlyn> oddly enough, they want to marry me to get to the US. :)

[00:56] <Odin-LAP> merlyn: Sure. Just so long as NAFTA doesn't screw them too much...

[00:56] <merlyn> maybe I'll meet a great girl in brazil.

[00:56] <merlyn> gonna be there for two weeks

[00:56] <Odin-LAP> Juerd: Heh.

[00:56] <Juerd> Too many foreigners enter these pot houses thinking they can get a cup of coffee. It's not even funny anymore.

[00:56] <merlyn> got my visa a few days ago, being on edge the entire time.

[00:57] <merlyn> but done deal.

[00:57] <merlyn> time to go finish some more beer.

[00:57] <merlyn> & beer 30

[00:58] <mugwump> huh?  I've bought coffee in an Amsterdam coffeeshop before :)

[00:58] <mugwump> with a piece of space cake on the side

[00:59] <Juerd> http://www.xs4all.nl/~tluif/Humor_bestanden/Hollanders.html

[01:00] <svnbot6> r3135 (ninereasons) -- convert force_todos to per-line :todo, and fix a broken example

[01:00] <Juerd> Most of it is true.

[01:00] <obra> amsterdam++ #Good eetcafes

[01:00] <Juerd> obra: You're not picky enough then :P

[01:00] <obra> Juerd: no. I spent three days looking and finally found a couple very nice ones

[01:03] <Juerd> Okay :)

[01:04] * Juerd never spent three days in amsterdam

[01:04] <Juerd> I don't like that city.

[01:10] *** ninereasons is now known as mkmcconn

[01:13] <drbean> Netherlands seems to be a great place for perl, but although Guido 

[01:13] <drbean> is also from there, is python as big there?

[01:17] <Juerd> Nah

[01:18] <Juerd> Though python attracts more new programmers than perl does

[01:19] <Juerd> nite!

[01:19] <Juerd> afk

[01:44] <f0rth> version_h.pl hates svk ._.

[01:47] <f0rth> because my svk installation speaks Chinese

[02:08] <svnbot6> r3136 (eric256) -- Fixed up some, actualy does damage and ends.

[02:09] * eric256_ realizes that commit comment doesn't make much sense out of context

[02:12] <mugwump> http://lists.utsl.gen.nz/pipermail/pugs-commits/2005-May/000467.html makes sense, though :)

[02:19] <eric256_> that is spefiy.  the bot should provide that link ;)... to bad IRC doesn't realy have a link sending protocol. 

[02:40] <meppl> gute nacht

[02:55] <svnbot6> r3137 (jhorwitz) -- * return proper exit codes from system()

[04:55] <svnbot6> r3138 (Stevan) -- Tree - changed from Tree::Simple to Tree; it works too

[04:55] <svnbot6> r3139 (Stevan) -- Tree - moved Tree::Simple completely to Tree

[05:19] * mugwump & # weekend

[05:46] <Khisanth> hcchien: did you notice the misspelling of MultiDaysEvent? :)

[05:46] <svnbot6> r3140 (mugwump) -- Add union/different/etc operators to Set

[05:52] <hcchien> Khisanth: maybe not? can you give me a hint? :)

[05:53] <hcchien> oh, I saw that. :/

[05:54] * Khisanth was just looking for some calendar generating module

[05:54] <Khisanth> what exactly is a pugs live cd?

[06:15] <svnbot6> r3141 (Stevan) -- Tree - More methods and tests added/converted

[06:45] *** chady_ is now known as chady

[07:07] <mj> morning

[07:21] <svnbot6> r3142 (scook0) -- Haddocks for Monads.hs

[07:21] <svnbot6> r3143 (scook0) -- Tests for slurpy hash params

[07:44] <Aankhen``> Yey, no more notices... :-)

[08:16] <svnbot6> r3144 (scook0) -- Updated Haddocks to reflect Autrijus's answers to my questions

[08:22] <svnbot6> r3145 (scook0) -- Fixed & added Haddocks for Bind.hs

[08:25] <tphyahoo> Hello.  This is my first time using irc.  I hang around perlmonks, am interested in pugs, and just thought I would check this out.

[08:27] <tphyahoo> clear

[08:27] <tphyahoo> All right, I've got to go.  Will check back in later. :)

[09:23] <f0rth> is it ok to replace "grep /Mirrored From/" with "grep /https?/" and "/Rev\. (\d+)/" with "/ (\d+)$/" in util/version_h.pl to work with non-english svk?

[09:24] <clkao> f0rth: reset the LC_* env before invoking svk

[09:25] <f0rth> and windows?

[09:26] <f0rth> having tried that morning on win32 but not working

[09:27] <clkao> ah. bah

[09:50] <gaal> has anyone had any luck building the latest snapshot parrot on either msys or cygwin?

[10:37] <Daniel_Nee> Dear Autrijus: could you please check your email, I need your help on Monday or Tuesday afternoon, Thanks a lot.

[10:53] <Aankhen``> Assuming the Parrot source has been checked out into C:\Development\parrot -- and built there, of course -- what would PARROT_PATH need to be set to?

[10:53] <Aankhen``> Just setting it to C:\Development\parrot doesn't seem to work.  It complains about a lot of .lib files.

[10:53] <Aankhen``> (I verified that it only happens when I set PUGS_EMBED to "parrot")

[10:55] * Aankhen`` wanders off and hopes he'll come back to an answer.

[11:11] <iblech> Khisanth: The Pugs Live CD is a small bootable cd which boots directly into Pugs

[11:12] *** chady is now known as chady_

[11:15] <iblech> Khisanth: I plan to add Parrot to it, and some example programs, and networking support, etc.

[11:25] <autrijus> f0rth: yes, please fix the version_h 

[11:25] <autrijus> f0rth: you're a committer now, btw. welcome aboard!

[11:59] <nothingmuch> gugod: ping

[12:47] <Limbic_Region> http://perlmonks.org/index.pl?node_id=456696 # pugs examples being used as a reference source at the Monastery

[12:47] <svnbot6> r3146 (autrijus) -- * Partially revert jhorwitz's change on `system()`.

[12:47] <svnbot6> r3146 (autrijus) --   Perl 6's `system()` actually returns true on success and

[12:47] <svnbot6> r3146 (autrijus) --   false on failure.  We can, though, set $! as the exit code.

[12:47] <svnbot6> r3147 (autrijus) -- * "make haddock" should clean up after itself.

[12:47] <svnbot6> r3148 (autrijus) -- * minor cleanup.

[12:47] <autrijus> Forth: I've implemeted your suggestion. You may wish to add your chinese name to AUTHORS

[12:47] <svnbot6> r3149 (autrijus) -- * fix pugs_version.h generation for svk users, as suggested

[12:47] <svnbot6> r3149 (autrijus) --   by Forth.

[12:47] <svnbot6> r3150 (autrijus) -- * add Forth to AUTHORS.

[12:47] <Limbic_Region> holy cow svnbot going nuts

[12:48] <Limbic_Region> http://www.perlmonks.org/index.pl?node_id=456587 # P6 wizard game by our newewst convert eric256

[12:51] <Juerd> What's with this www. thing?

[12:51] <Juerd> Do you hate your hands?

[12:54] <Limbic_Region> Juerd - heh, it is called a bookmark

[12:54] <Limbic_Region> 1 click beats all those key strokes

[13:02] <Limbic_Region> hey eric256

[13:03] <eric256> hey

[13:03] * Limbic_Region is glad to see you were easily swayed to the dark side

[13:03] <Limbic_Region> muhahahahaha

[13:03] <eric256> lol

[13:04] <eric256> so when %.weapons (where weapons is a hash) should pass if $_ is a key in %.weapons?  that seems to be what juerd is saying

[13:07] <nothingmuch> ingy: spoon revision r2148 seems to have broken Kwiki::Installer

[13:11] * kungfuftr wonders if there is a nice way of doing chained accessors in perl6

[13:12] <eric256> what do you mean?

[13:12] <iblech> kungfuftr: given $obj { .foo = 3; say .bar; .baz = 42 }   (assuming the current ". without explicit invocant" semantics)

[13:14] <kungfuftr> given My::Class->new() { .bar("hehe"); .foo("haha"); .baz("hoho"); } ?

[13:15] <eric256> My::Class->new(:bar<hehe>, :foo<haha>, :baz<hoho>)  would also work (i'm just playing with the quoteing ;)

[13:15] <iblech> if you s/My::Class->new/My::Class.new/, then, yes

[13:17] <eric256> that -> to . is going to get me forever....the . to ~ works just fine for me though, ~ is actualy a lot nicer. ;)

[13:19] <stevan> eric256++ # nice game :)

[13:20] <Juerd> Limbic_Region: You probably typed it once in your life at least.

[13:20] <stevan> Limbic_Region++ # for getting eric256 to come over

[13:20] <stevan> Juerd: I always do www :)

[13:20] <kungfuftr> eric256: does that do modification on the attribute, or actually call the mutator/accessor?

[13:20] <Juerd> eric256: Re Any~~Hash, yes, that does %Hash.exists($Any)

[13:21] <eric256> hey juerd...that doesn't seem to be working in Pugs yet then

[13:21] <iblech> kungfuftr: I *assume* the accessors/mutators are called. I'm actually pretty sure of thart

[13:21] <Juerd> eric256: t/ :)

[13:22] <eric256> and the givens work. but I currently have to put $_. instead of just . 

[13:22] <Juerd> Which is short for: "it would be really nice&great of you if you would want to write a test for that, and commit it under a sensible name somewhere in pugs' t/ directory hierarchy."

[13:23] <eric256> yea i guessed as much...me and when tests seem to be friends already anyhow

[13:23] <eric256> lol

[13:23] <Juerd> That's terrific :)

[13:23] <eric256> not sure how to test for the given $object { .method } though....so if someone else would like to right those tests! ;)

[13:24] <Juerd> Write a simple class, with one method that returns a true value

[13:24] <Juerd> Then given $o { ok(.method, "...") }

[13:24] <Khisanth> iblech: btw, mklivecd.pl seems to have slight bug, --help prints the help text twice

[13:24] <Juerd> If .method is a parse error, use eval

[13:25] <Juerd> given class { method foo { 1 } } { ok(.foo, "...") } 

[13:25] <Juerd> But perhaps that's stretching it too far :)

[13:26] <iblech> Khisanth: Ah, thanks... I'm not at my development computer ATM, but will fix it when I get home

[13:26] <iblech> eric256: FWIW, I like that I've to put "$_." in front of it, because then we can leave off the $self in methods

[13:26] <Khisanth> at first I thought I was having a memory problem :)

[13:27] <iblech> eric256: But Larry's decision of this week is that ".method" always calls $_.method

[13:27] <iblech> (and not $?SELF.method)

[13:27] <eric256> ahh but pugs is still looking for $?SELF ...the error makes much more sense now..

[13:28] <jhorwitz> autrijus: ping

[13:29] <Juerd> iblech: Current .default is $_.default

[13:29] <Juerd> Oh, you said so yoursellf to

[13:29] <Juerd> Something's wrong with ths keyboard

[13:29] <iblech> ?quit Shutting down svnbot6 for a minute to integrate the karma thing of today

[13:29] <Juerd> s/yoursellf to/yourself too/

[13:30] <Juerd> iblech: Please make it understand all bracketed forms

[13:30] <Juerd> iblech: ''++ ""++ <>++ []++ {}++ ()++

[13:30] <Juerd> iblech: Perhaps even q//++ :)

[13:30] <autrijus> jhorwitz: pong

[13:31] <Juerd> iblech: Or .++, and find a matching . somewhere on its left

[13:31] <ajs> so what's the karma thing? I've seen people putting plusplus after names, but had no idea why

[13:31] <Juerd> ajs: It's hard to explain

[13:31] <autrijus> Juerd: as implemented, .default in pugs is $?SELF.default, btw.

[13:31] <autrijus> Juerd: I forgot what the consensus was.

[13:31] <jhorwitz> autrijus: thx for p6-izing my system() change.  i often forget that p6 != p5.  ;-)

[13:32] <Juerd> autrijus: That's currently wrong then

[13:32] <autrijus> jhorwitz: that's fine :)

[13:32] <Juerd> ajs: (something I like)++ (something I dislike)--

[13:32] <autrijus> Juerd: so what was the resolution vs .default and $.foo ?

[13:32] <Juerd> ajs: (something I like)++  # reason for liking it

[13:32] <iblech> Juerd: No, the thing I referred to was that the author name is always displayed as "nick++". This was because of a svn checking earlier today

[13:32] <Juerd> autrijus: $_.default, $.foo works on $self

[13:32] <Juerd> iblech: oh

[13:33] <autrijus> and how do I access to the implicit self?

[13:33] <autrijus> I used $?SELF because I need something like that

[13:33] <iblech> autrijus: And &.method always calls $?SELF.method, IIRC

[13:33] <ajs> Juerd: oh ok, so it's just a social convention, and has nothing to do with anything automatic?

[13:33] <Juerd> autrijus: IIRC, $?SELF.method and ^method 

[13:33] <autrijus> iblech: you need the ()

[13:33] <Juerd> ajs: It's a social convention, that can exist because it's actually counted in some channels

[13:33] <autrijus> Juerd: is the ^ accepted?

[13:33] <Juerd> ajs: But the counters are meaningless

[13:33] <Juerd> autrijus: I'm not sure

[13:33] <iblech> autrijus: er, yes

[13:33] <Juerd> autrijus: I think so

[13:34] <iblech> ^ is not in the synopsis, last I checked

[13:34] <Juerd> synopses lag too much :(

[13:34] <iblech> yes...

[13:34] <Juerd> karma for autrijus 

[13:34] <jabbot> Juerd: for autrijus  has neutral karma

[13:34] <Juerd> Either the bot is broken, or the bot is broken.

[13:35] <osfameron> karma autrijus

[13:35] <jabbot> osfameron: autrijus has karma of 146

[13:35] <Juerd> ORRR... it thinks the whitespace was significant

[13:35] <Juerd> Which would really suck :)

[13:35] <osfameron> (for autrijus)++

[13:35] <osfameron> karma for autrijus

[13:35] <jabbot> osfameron: for autrijus has karma of 1

[13:35] <Juerd> karma for autrijus

[13:35] <jabbot> Juerd: for autrijus has karma of 1

[13:35] <Juerd> Hm

[13:35] <Juerd> That's un#perlish!

[13:35] <eric256> committed another test ;)

[13:35] * Juerd is used to purl

[13:35] <Juerd> eric256++

[13:36] <ajs> speaking of synopses, I've finished colating everything outstanding for S29 except the string stuff that Rod mentioned having somewhere. I have to check to see where he said that was. Next I need to review how all of these colated things relate

[13:36] <autrijus> ajs++

[13:37] <autrijus> Juerd: write tests for .foo and ^foo?

[13:37] <Juerd> autrijus: Will do if there are none by tonight. Just got a call and now have to go fix a server

[13:37] <Juerd> (If someone else writes them, let me know, so we don't do double work)

[13:37] <autrijus> eric256: so your

[13:37] <autrijus>                     .attack($enemy, $.weapons{$_});

[13:37] <Juerd> afk

[13:37] <autrijus> needs to say

[13:37] <autrijus>                     ^attack($enemy, $.weapons{$_});

[13:38] <autrijus> now

[13:38] *** nnunley_ is now known as nnunley

[13:38] <autrijus> because .attack would mean $choice.attack

[13:38] <autrijus> in the given block

[13:38] <autrijus> I fixed it for you

[13:38] <autrijus> welcome to the quicksand of perl 6 syntax changes

[13:39] <eric256> lol

[13:39] <eric256> so ^ always means $?SELF. while . can be taken differently depending on its context but probably means $_. 

[13:39] <autrijus> yeah.

[13:40] <autrijus> bbiab

[13:40] <svnbot6> r3151 (eric256++) -- Added test to make sure .method calls default to $_ not $?SELF

[13:40] <svnbot6> r3152 (autrijus++) -- * From Juerd:

[13:40] <svnbot6> r3152 (autrijus++) --     .method     # $_.method

[13:40] <svnbot6> r3152 (autrijus++) --     ^method     # $?SELF.method

[13:40] <svnbot6> r3152 (autrijus++) -- * Also fix wizard.p6 to reflect this change.

[13:40] <iblech> I think I've to get used to this... (liked the . w/o explicit invocant meaning $?SELF.method better)

[13:40] <osfameron> ooo, you get a ++ every time you commit !

[13:42] <Juerd> osfameron: No, for every line in the commit message. So flood away!

[13:42] <osfameron> heh

[13:42] <Juerd> afk  # wish me luck

[14:11] <svnbot6> r3153 (iblech++) -- Fixed mklivecd.pl to print the help only once when started with --help.

[14:13] * eric256 peeks at the Pugs source and then remembers he doesn't speak/read/comprehend haskel and runs off

[14:34] *** Aankh|Clone is now known as Aankhen``

[14:50] <wolverian> eric256: no, .foo() always means $_.foo()

[14:50] <wolverian> (by the way, ^foo and $^foo clash somewhat, to me. I wonder if that is a problem.)

[14:50] <pmichaud> actually, isn't this still under discussion?

[14:50] <pmichaud> or did that get decided?

[14:51] * eric256 begins to wonder if anything is truly decided yet. ;)

[14:51] <wolverian> pmichaud: well, yes, but if we're going with ^, that's the only useful behaviour. (that was re: autrijus and eric about ^ vs .)

[14:51] <eric256> what would $^ bee?

[14:51] <PerlJam> eric256: an error

[14:51] <PerlJam> :-)

[14:51] <eric256> i meant in his $^foo example.

[14:51] <PerlJam> eric256: it's one of the implicit parameters 

[14:52] <wolverian> eric256: @array.sort:{ $^a <=> $^b }; # $^a is @_[0], $^b is @_[1] (alphabetic order)

[14:52] <eric256> and soo $^foo would be???? what?

[14:52] <eric256> lol

[14:52] <PerlJam> @reds = map { $^a ~~ 'red' } @colors   is the same as if you'd used $_ instead of $^a

[14:53] <eric256> ohh... /me slaps head

[14:53] <PerlJam> wolverian: s/alphabetic/unibetic/

[14:53] <wolverian> PerlJam: right. :)

[14:53] <wolverian> also, is $_ aliased to @_[0], and if so, when?

[14:53] <eric256> you just mean $^{something or other}. it seems $^a and ^a are different enough not to conflict

[14:54] <wolverian> I guess. it just seems $.foo might be then a property on $_, and $^foo a property on $?SELF :)

[14:56] <PerlJam> pmichaud: And I think that Larry had a strongish leaning in one direction regarding the meaning of .foo() but I don't remember what that direction was (I think it was a wolverian said though)

[14:57] <wolverian> I think the last message from larry in that thread was that .foo() would always mean $_.foo() and we should find some other character to mean $SELF

[14:57] <wolverian> I don't remember him picking one.

[14:57] <pmichaud> I don't think one has been picked yet

[14:57] <wolverian> that's good.

[14:57] <wolverian> I don't like ^.

[14:58] <PerlJam> I know!  Let's use colon!  :-)

[14:58] <PerlJam> or *  :)

[14:58] <wolverian> or #

[14:58] <PerlJam> or `

[14:58] <pmichaud> pj:  actually, damian proposed colon :-)

[14:59] <pmichaud> pj: but it completely destroyed the option-pair syntax

[14:59] <wolverian> and calling a private method on self would be '::foo'

[14:59] <wolverian> which is a type 

[15:00] <drbean> Miyazawa notes pugs and parrot are hooked up at http://blog.bulknews.net/mt/archives/001696.html

[15:01] <PerlJam> I wonder if we could use make one of these work (to mean $SELF.foo()) :    ,foo()  ;foo() 'foo() 

[15:01] <pmichaud> , is bad

[15:01] <pmichaud> semi is bad

[15:01] <PerlJam> They're all bad!

[15:01] <pmichaud> $a + ,foo()  

[15:01] <pmichaud> or even

[15:01] <pmichaud> [ 1, 2, ,foo(), 3 ]

[15:01] <PerlJam> But without going unicode I don't see much good.

[15:02] <pmichaud> at some point it just makes better sense to declare invocants as $o  and then use $o.foo()

[15:03] <PerlJam> personally, I'm probably going to go with making $o always be $SELF or something  $o.foo() isn't a hardship.

[15:03] <PerlJam> wow

[15:03] <PerlJam> great minds *do* think alike

[15:03] <PerlJam> :-)

[15:03] <PerlJam> pm: besides that's what I tend to do in perl5 now.  $o is the object, $c is the class

[15:04] <pmichaud> well, larry has proposed   o.foo() and c.foo()   a couple of times, so $o and $c aren't a stretch

[15:06] <PerlJam> I'm not so sure o.foo() would interpolate in double quotish strings, while $o.foo() certainly would

[15:07] <PerlJam> Those sigils are quite useful

[15:08] <pmichaud> argggh, luke is misreading my rule also ... :-|

[15:11] <eric256> could do ..foo()  ;)

[15:11] <pmichaud> looks a lot like  1..foo()  :-)

[15:11] <PerlJam> eric256: that would work too.  we'd need a whitespace rule to make sure that it didn't get confused with rnages

[15:12] <pmichaud> I dunno if a whitespace rule is needed there, since ..foo()  occurs when a term is expected while .. occurs where an operator is expected

[15:13] <eric256> .-foo ? two character codes give a lot more options .= .- 

[15:13] <pmichaud> unfortunately, .. reminds me of the parent directory in filesystem paths.   So, how about   ./foo()  for the invocant?  ;-)

[15:13] <Juerd> rehi!

[15:13] <eric256> was that a name?

[15:13] <Juerd> Has consensus re ^foo and .foo changed since 2 hours ago?

[15:14] <PerlJam> eric256: two chars is fine but if we have to shift we might as well just use $o.foo()

[15:14] <Juerd> pmichaud: Not bad. I mean that. 

[15:14] <PerlJam> so that limits the chars a bit

[15:14] * pmichaud points out that $o.foo() is three chars.

[15:14] <Juerd> pmichaud: ./pugs is pugs in the current directory -- classes can be seen as directories

[15:14] <Juerd> pmichaud: But then ../method must call in the super class. This may just work.

[15:14] <pmichaud> I wasn't here two hours ago, what was the consensus on ^foo and .foo ?

[15:15] <Juerd> pmichaud: .foo is $_.foo, ^foo is $?SELF.foo

[15:15] <Juerd> I promised autrijus to write tests

[15:15] <pmichaud> do we run into a conflict with &infix:<^>  ?

[15:15] <Juerd> But I saw you discussing things alike, so I thought I'd inquire before writing them

[15:15] <PerlJam> pmichaud: another whitespace rule  :)

[15:15] <Juerd> pmichaud: I wouldn't know how 

[15:16] <pmichaud> i dunno either, I'm just askin :-)

[15:16] <Juerd> PerlJam: termies don't clash with oppies

[15:16] <PerlJam> $foo^^bar()  looks a wee odd

[15:16] <Juerd> PerlJam: That's $foo xor bar anyway.

[15:16] <pmichaud> pj: that would be  $foo ^^ bar()

[15:16] <PerlJam> oh right.

[15:17] <PerlJam> $foo^^^bar() then  :)

[15:17] <Juerd> PerlJam: Now $foo^^^bar() looks odd. But how often do you expect that'll happen? :)

[15:17] <Juerd> Not to mention $foo^^+^^bar()

[15:17] <Juerd> Which is $foo ^^ +^ ^bar()

[15:17] <Juerd> I see new opportunities for the obfu people.

[15:18] <Juerd> And no practical  limitation whatsoever.

[15:18] <PerlJam> Juerd: add hypers and we're all line noisy

[15:18] <Juerd> Okay, then I now write tests

[15:18] <Juerd> After updating and recompiling.

[15:19] <PerlJam> I think I'll just stick with $o.foo()

[15:19] <Odin-LAP> What was that six-character operator someone used ... [»+^«]?

[15:20] <eric256> wasn't the concern with ^foo that attribute access would then be $^foo which is taken?

[15:21] <PerlJam> eric256: attributes of  the current object will still be $.foo and $:foo

[15:21] <Juerd> Odin-LAP: If you count >> as 2 characters, it's more :)

[15:22] <PerlJam> Juerd: I call that operator "reduction to madness"

[15:22] <Odin-LAP> Juerd: Well, I don't. ;)

[15:22] <wolverian> eric256: my concern is that they look similar, that's all.

[15:22] <eric256> thats confusing.  .foo is $_.foo but $.foo is $SELF.foo

[15:22] <Juerd> Odin-LAP: I have no idea how to interpret a reducing >><< though.

[15:22] <Juerd> Odin-LAP: Unless it's used on a list of arrays. Hm, funny.

[15:23] <Juerd> Still, too confusing :)

[15:23] <Odin-LAP> It's possible ... but a bit mindboggling.

[15:23] <Juerd> eric256: Yes, but $ is not .

[15:23] <Juerd> eric256: :foo is also not $?SELF:foo or $:foo

[15:24] * eric256 is now very confused. lol

[15:24] <Juerd> eric256: $:foo is a private attribute

[15:24] <Juerd> eric256: $.foo is public

[15:24] <Juerd> eric256: :foo is a pair

[15:24] <Juerd> eric256: .foo is $_.foo

[15:25] <Juerd> Don't look for half consistencies

[15:25] <Odin-LAP> Ooooo. Learning Perl6 will be a true joy for newbies. ;)

[15:25] <eric256> okay.i think i'm gonna need a book ;)

[15:26] <Juerd> Hm

[15:26] <Juerd> Perhaps it's time for a series of Perl 6 articles

[15:26] <Juerd> "All uses of ... the colon"

[15:26] <wolverian> and .:foo is a private method call

[15:26] <Juerd> "All uses of ... the dot"

[15:26] <Juerd> "All uses of ... the circumflex"

[15:26] <eric256> someone should start a quick reference for Perl6

[15:26] <Juerd> eric256: I'll try to whip something up

[15:26] <Odin-LAP> Juerd: Didn't you have one at some point?

[15:26] <Juerd> eric256: It'll be a hell of a lot more complex than perlcheat though :)

[15:27] <Juerd> Odin-LAP: Several

[15:27] <Odin-LAP> Heeh. A Perl6 "cheat sheet" would fit on ... say, A0?

[15:27] <Odin-LAP> Maybe A1. If we're lucky.

[15:27] <pmichaud> with small enough type it'll fit anywhere :-)

[15:27] *** knewt_ is now known as knewt

[15:28] <pmichaud> I bet I can fit it on a DVD :-)

[15:28] <Odin-LAP> pmichaud: Sure. I'm thinking of something legible, of course.

[15:28] <Juerd> Shall we write a quickref set together?

[15:28] <Juerd> In pugs' svn repo?

[15:28] <Juerd> wiki-style?

[15:28] <Juerd> (but plain text!)

[15:29] <Juerd> All in the form of:

[15:29] <Juerd> code example         # what it does

[15:29] <Juerd> like:

[15:29] <Juerd> .method           # shorthand for $_.method

[15:34] <eric256> sounds like a plan juerd

[15:34] <eric256> might need a shortcut reference

[15:36] <pmichaud> btw, juerd, that is one mean nasty rule expression you posted yesterday :-)

[15:36] <eric256> and then a type reference one, and a class reference one....pretty soon you'll need a quick reference quick reference to find the right quick reference. ;)

[15:37] <Juerd> pmichaud: It's very straight forward! No embedded code, even! :)

[15:37] <pmichaud> Juerd: well, the problem is that it's not getting past the rule compiler

[15:37] <Juerd> pmichaud: It works very well in Perl 5

[15:37] <Juerd> pmichaud: Ruby even refuses to compile a regex this big :)

[15:37] <pmichaud> i'm not sure why yet -- I'm going to have to break it down and take a look at it piecemeal to find out where it's failing

[15:38] <Juerd> pmichaud: You can play with matrix.p6 to generate your own

[15:38] <Juerd> pmichaud: Look at the outer build_re call. Isolate that and call it once instead of 25 times, and you get one part instead of 25... :)

[15:39] <Juerd> pmichaud: Reduce the todo argument, and you get a much shorter (exponentially) rule as a result

[15:39] <Juerd> pmichaud: This will allow you to build up to the critical point

[15:39] <Juerd> It's probably smarter to use matrix.p6 to generate the rule though 

[15:39] <Juerd> That'll save you hours :)

[15:39] <Juerd> Eh

[15:39] <Juerd> matrix.p5

[15:40] <PerlJam> What does matrix.p[56] do exactly?

[15:40] <PerlJam> (besides generate a pge-breaking re)

[15:43] <Juerd> Use the rule against words, to find matching candidates

[15:43] <Juerd> Then sort those in order of score, based on a simple scoring table

[15:59] <Juerd> There's now pugs/docs/quickref

[15:59] <svnbot6> r3154 (Juerd++) -- First steps for a set of cheat sheets. It's a wiki, people, so contribute! :)

[15:59] <svnbot6> r3155 (Juerd++) -- First document, far from finished. Feel free to add or correct stuff.

[16:10] <broquaint> Hey Corion.

[16:10] <Corion> Hi broquaint 

[16:11] <broquaint> Have you successfully adopted S29?

[16:12] <Corion> broquaint: Luckily not :) ajs has adopted it :)

[16:12] <Corion> (or that's what I think we ended up last night)

[16:12] <Corion> ... with ...

[16:12] <Corion> I get to snipe from the sides

[16:12] <broquaint> Nice one :)

[16:13] <broquaint> BTW, has caller() et al been implemented yet?

[16:13] <Corion> broquaint: Yep. $?CALLER

[16:13] <Corion> broquaint: I think under t/magicals

[16:13] <broquaint> But the function caller() hasn't, right?

[16:14] <kolibrie> don't think caller() is around yet

[16:15] <Corion> Will there be the function caller() ? I thought that $?CALLER and $?CALLER::* and $CALLER_CONTINUATION took care of it all?

[16:15] <Corion> (I may be wrong)

[16:15] <broquaint> There should be.

[16:15] <broquaint> Just for a simpler way to access contextual information about the sub and its callers.

[16:16] <Corion> broquaint: Hmmm - aaah - yeah, a dynamic way to walk up the caller chain would be useful, true.

[16:16] <kolibrie> S06 "The caller function"

[16:16] <Corion> broquaint: You could implement it in Perl6 with a loop that walks up $?CALLER:: :)

[16:16] <Corion> (or steal the code implementing it)

[16:16] <broquaint> I'd certainly abuse ... er ... use it :)

[16:16] <Corion> ... but I welcome tests for it :)

[16:17] <broquaint> Do we have any perl6 functions implemented in perl6?

[16:17] <Corion> Having something like caller() is important. Even JS has it! :)

[16:17] <broquaint> Most of the 'functions' are in Eval.hs, right?

[16:17] <Corion> broquaint: Unfortunately not. Well, one half-implemented "function" - the split-on-whitespace behaviour of %hash<...> is implemented as AST

[16:17] <Corion> (which was taken from dumping a Perl6 expression)

[16:18] <Corion> (or was it the split-on-whitespace behaviour of @array = <...> ?)

[16:19] * broquaint looks into implementing caller() ...

[16:19] <Corion> Yay! ;)

[16:22] <broquaint> Although there is a test for it so maybe someone got there ahead of me ...

[16:22] <eric256> is there a timeline/schedule somehwere?  i'm curious about when we will see class inheritance in Pugs... ;)

[16:22] <integral> "soon"...

[16:23] <eric256> soon is always good

[16:23] <Corion> eric256: There is the Pugs development plan, detailed in one of autrijus' early journals

[16:23] <Corion> ... which explains the version number convergence, together with the features

[16:23] * eric256 wanders off to search the journal then

[16:23] * integral finds it amazing that he can go for 3 hours and find 10 commits

[16:24] <svnbot6> r3156 (ninereasons++) -- give clearer mesg to proclaim() in 'isnt'

[16:24] <Corion> ... no timing is mentioned. But as #perl6 warps space-time, you can stick around and wait :)

[16:25] <eric256> what is zip? in the quick ref you have Y # zip ??

[16:25] <integral> take N arrays.   Take the first element from array 1, ..., take the first element from array N, take the 2nd element from array 1, ... etc

[16:26] <broquaint> It "zips" lists together i.e (1,2,3) Y (a,b,c) becomes (1,a,2,b,c,3)

[16:26] <integral> hmm, is Y associative?

[16:26] <broquaint> How do you mean "associative"?

[16:27] <integral> @a Y @b Y @c == zip(@a, @b, @c) or zip(zip(@a,@b), @c); #or the same but for Right assoc

[16:27] <Juerd> integral: It's chaining

[16:27] <Juerd> integral: former

[16:27] <integral> ah, neato :-)

[16:27] <Juerd> integral: ==, eq, <, etcetera are chaining too now.

[16:27] <Juerd> 3 < $x < 5

[16:28] <broquaint> Everything will chain and it will be good!

[16:28] <Corion> r3155 - http://datenzoo.de/pugs/win2k.html - 4909 ok, 20 failed, 695 todo # win2k, so something is weird with the newly introduced fails

[16:28] <broquaint> Except, the things that don't.

[16:28] <integral> yeah, I knew about hose ones.   Chainign is a really neat feature

[16:28] <integral> I suppose = could be chaining too: $x = 5 = $y; :-P

[16:28] <Juerd> integral: What would that mean?

[16:29] <integral> it sets all the non-constant things to the single constant thing, or the right-most non-constant thing

[16:29] <Juerd> Then simple $foo = $bar fails

[16:29] <Juerd> No, let's not change =

[16:29] <eric256> chaining sounds cool

[16:29] <integral> no, that's covered by the bit after the comma juerd

[16:30] <Corion> Can somebody confirm the unexpected success in t/statements/given.t (last test) ?

[16:30] <broquaint> Sure, just let recompile ...

[16:31] <Juerd> integral: Oh, right, but still, = can be used as chainingly as you want already

[16:31] <Juerd> = being right associative and returning an lvalue are both very useful.

[16:31] <integral> sure, but you can't say: 3 = $foo;

[16:31] <Juerd> You shouldn't want to.

[16:31] <integral> Just think of the obfuscation value! :-P

[16:31] <integral> sheesh, it's not a serious idea

[16:32] <broquaint> People need to be careful with casedness in filenames as Motd.pm just collided with MOTD.pm on this windows box with case-insensitive FS wickedness.

[16:33] <Juerd> Can't you even mount something case sensitively when you want to in win32?

[16:33] <broquaint> I believe so, but I'm no windows guru.

[16:33] <Corion> Juerd: No. Win32 / FAT32 / NTFS is case-preserving but case-insensitive

[16:34] * broquaint points to Corion's reply ^

[16:34] <Juerd> Corion: Yes, but if you mount any of those in linux, the result is case INsensitive

[16:34] <Juerd> Corion: Can't windows mount ext2 or another more sane fs?

[16:34] <Corion> Juerd: Not natively, but there are drivers for that.

[16:34] <eric256> corion that test fails here (rev3135)

[16:34] <Juerd> It couldn't do this in 2000 when I stopped using it

[16:35] <Juerd> Wonderful, how Microsoft just won't cooperator or invent

[16:35] <Corion> Juerd: But I'd expect the drivers to map to case-preserving / case-insensitive as well, that is, to refuse to create/open foo.pl if there is foo.PL

[16:35] <Corion> (why should they cooperate with a hippie OS?)

[16:36] <Juerd> Because it's the only way to get rid of the hippies.

[16:36] <Juerd> It's in MS' best interest if they would support ext2. It would cause people to dual boot more often than they switch completely

[16:37] <Corion> Juerd: What should they dual boot to? (you seem to be missing the point - anyone who dual-boots is already lost anyway)

[16:37] <Juerd> No

[16:38] <Juerd> They're not lost

[16:38] <Juerd> Well, idioligically, they're lost

[16:38] <Juerd> But not commercially.

[16:39] <Corion> eric256: Weird ... I'll update and rebuild then - what platform do you run? With parrot or without?

[16:40] <eric256> WinXP Pro no parrot ....hmmmm i've checked out rev3135, but it appears to be running 1241 agian....arg. i'm running an old one...arg

[16:40] <Juerd> 1241? That's prehistoric.

[16:40] <eric256> no kidding...and i don't know where it came from, yestarday i was running on a recent build..i've got something screwy going on

[16:41] <Corion> eric256: No, that's the svk info

[16:41] <Corion> The svk and svn rXXXX are wildly out of sync

[16:42] <Corion> (and currently, the svk info gets picked up while the svn info only displays in Test::TAP::HTMLMatrix I think

[16:42] <eric256> hmmm...so how can i make sure that the executable is the newest version?

[16:43] <Corion> svn up && nmake clean && perl Makefile.PL && nmake

[16:43] <Corion> :)

[16:43] <eric256> well i just set out on a holy crusade to delete all pugs.exe's (of which there were several)...now lets get this right...rebuilding.

[16:44] <eric256> nmake clean?  would that have been screwing me up? because i've never done that. ;)

[16:44] <Corion> eric256: It should wipe all the leftovers. But if you need a make clean, most likely deleting src/ is better anyway.

[16:44] <Corion> (and then check out again)

[16:47] <eric256> corion it passes that test now... looks like someone fixed it ;)

[16:48] <Corion> eric256: Heh ;)

[16:49] * Juerd just discovered that he does want a symbolic alias for 'scalar'

[16:49] <Juerd> Is there a special reason we can't just use $ for that?

[16:50] <eric256> shall i remove the :todo<bug> on that test then?  since they seem to have fixed it

[16:50] <Juerd> eric256: If something's fixed, it's no longer todo :)

[16:51] <Corion> eric256: Yes please

[16:52] <eric256> done...there is a test being run....but i don't see it in the code...and it has no label

[16:52] <Corion> A heisentest ?

[16:53] <eric256> ehh?

[16:54] <Corion> A test that gets run only if you don't look at it :)

[16:54] <eric256> lol

[16:57] <eric256> hmm... test passes and yet my game code still failes....

[16:57] <svnbot6> r3157 (eric256++) -- un-todod a test. '.' shortcut in given works now

[17:00] <broquaint> The last test of t/statements/given.t succeeds here, Corion, although a bunch of others fail.

[17:00] <Corion> broquaint: Yeah. I wonder what's up with the breakage, as "svn blame" didn't tell (me)

[17:02] <broquaint> Although all the failed tests are marked as TODO (so why aren't they called as TODO tests?), so I guess that makes sense.

[17:03] <eric256> if <code>$_.pass<a> = 1</code>works inside a given then shouldn't <code>.pass<a> = 1</code> work as well?

[17:03] <eric256> hmmm code tags arn't realy usefull here. lol

[17:03] <pmichaud> only if $_.pass is rw, perhaps?

[17:04] <eric256> it is rw.

[17:06] <eric256> looks like every class definition is creating a test...?

[17:07] <eric256> lol. i'd called my temp attribute pass...which i'm guessing is a test sub?  it was in double qoutes and getting interpolated...

[17:07] <svnbot6> r3158 (Stevan++) -- Perl::MetaModel - added document about Meta-Meta-Classes in an attempt to clarify the subject for myself, ... and purge these demons from my mindsvn status! :)

[17:09] <PerlJam> pm:  PGE doesn't yet do <<alpha>+<digit>> does it?

[17:09] <pmichaud> no, not yet, and based on Larry's last post it may end up being <+alpha+digit>

[17:09] <pmichaud> (at least I hope it is)

[17:09] <PerlJam> Excellent.

[17:09] <pmichaud> but you can always do \w for now if you don't mind underscores :)

[17:10] <PerlJam> Is the leading <[-+]> required?

[17:10] <pmichaud> yes, except with <[xyz]>

[17:10] <PerlJam> so all character classy things start with <[, <- or <+  

[17:10] <pmichaud> well, yes and now

[17:10] <pmichaud> now

[17:11] <pmichaud> no

[17:11] <pmichaud> (argh)

[17:11] <pmichaud> <alpha>  will still exist, but it's a capturing subrule

[17:11] <pmichaud> so  <alpha>+   can be a bit expensive on the captures :)

[17:11] <PerlJam> right, the CC is only on indirect

[17:12] <pmichaud> <+alpha> will be calling a subrule as if it's a CC

[17:12] <PerlJam> Hrm.

[17:12] <pmichaud> and for things like alpha, digit, upper, lower, etc.,  PGE can optimize them whenever there's no overriding subrule in the scope

[17:12] <PerlJam> How does that play with rule foo { a*b }  ... m/<+alpha+foo>/  ?

[17:13] <pmichaud> see Larry's post:   "But then it's not entirely clear how character class set theory works.          Another thing we have to work out."

[17:14] <pmichaud> also:

[17:14] <cognominal> how do I access the trait of a function?

[17:14] <pmichaud> Hmm, well, positive matches can be defined to traverse whatever the

[17:14] <pmichaud> longest sequence matched is, even if it's actually multiple characters

[17:14] <pmichaud> by some reckoning or other. 

[17:14] <pmichaud> (from Larry's post)

[17:19] <cognominal> do you know the API to get at the value of a trait?

[17:19] <svnbot6> r3159 (eric256++) -- added test for .attribute access to hash

[17:21] * eric256 wanders off to find food

[17:45] * Limbic_Region needs to put his computer together as he is getting highspeed internet tomorrow (along with VoIP phone and digital cable)

[17:45] <svnbot6> r3160 (ninereasons++) -- add highlighting for ATTN FIXME, etc, in POD and comments.

[17:45] <Limbic_Region> (consolidated services and bills) plus plus

[17:52] <cognominal> I ask my question again because I have not yet found an answer in the synopsis: is there an API for trait/property getter/setter?

[17:52] <stevan> autrijus: if you are around,.. I found (what I hope is) a small bug

[17:52] <stevan> pugs -e 'class Foo::Bar { method baz returns Foo::Bar { Foo::Bar.new() } }'

[17:53] <stevan> it seems to choke on the C<returns Foo::Bar> part

[17:55] <ajs> I don't think it groks the :: notation there. Make the class Foo, and it works

[17:55] <stevan> ajs: yes, but I need the :: notation :)

[17:55] <ajs> cognominal: not sure

[17:56] <ajs> stevan: oh, well then, that's broken :-)

[17:58] <ajs> cognominal: I never fully grokked traits in A/S12...

[18:00] <cognominal> sent a mail to p6l ml...

[18:01] <ajs> cognominal: Ok, here's my theory: A trait is a role, applied by the use of either a property or trait verb. Thus, you should be able to do normal "role stuff" to sense its taint

[18:02] <ajs> cognominal: that includes "$obj ~~ sometrait"

[18:02] <ajs> cognominal: no, I'm wrong. That includes "?($obj does sometrait)

[18:02] <ajs> "

[18:03] <ajs> I think... ask p6l ;-)

[18:05] <ajs> Ah, but your p6l mail is a different question. You can apply traits without an eval. Just remove the eval and quotes from your example and it should work fine.

[18:05] <svnbot6> r3161 (Juerd++) -- quickref/op: near completion; please sanity-check

[18:09] <revdiablo> anybody have any idea why examples/phonewords.p6 is so slow? it takes 25 minutes to complete, compared to 5 seconds in perl5... is that just standard pugs slowness, or is something weird going on?

[18:10] <Juerd> revdiablo: Because pugs is just very slow, and perl 5 is just very fast

[18:10] <autrijus> that's right!

[18:10] <autrijus> and if you write .{} codegen for parrot it will be faster :)

[18:10] <Juerd> revdiablo: I have a script that finishes within a second in perl 5, but takes half an hour in pugs. It's something thatfor now, we must learn to live with

[18:10] <svnbot6> r3162 (ninereasons++) -- add highlighting for '=for COMMENT' region

[18:10] <svnbot6> r3163 (autrijus++) -- * wikification! :)

[18:11] <autrijus> Juerd++ # damn good idea, that quickref

[18:11] <Juerd> Thank you

[18:11] <Juerd> Not entirely my idea

[18:11] <Juerd> Well, not today

[18:11] <Juerd> I had parts of op around already though

[18:12] <revdiablo> Juerd: yeah, what I figured. but thought I'd check to make sure. maybe there's something that sticks out as slowing it down a lot

[18:13] <autrijus> Juerd: I kwidified it; the good thing is that it still needs no escaping :)

[18:13] <autrijus> the indent makes it easier on my eyes

[18:13] <Juerd> I'm not entirely happy with that

[18:13] <Juerd> But okay.

[18:14] <autrijus> thanks for your understanding. I don't quite care about how to mark the headings... =head2 NAME or [NAME] also works for me

[18:14] <autrijus> I just want it somewhat indented :)

[18:14] <Juerd> That's the thing that bothers me

[18:14] <autrijus> how does it bother you?

[18:15] <Juerd> But now that I see this, I do find it easier to read.

[18:15] <autrijus> oh. :)

[18:15] <Juerd> It bothers me because it eats away 4 characters of my terminal

[18:15] <Juerd> I'm un-kwidding it though

[18:15] <autrijus> that's fine

[18:15] <svnbot6> r3164 (autrijus++) -- * oops, leftover

[18:15] <Juerd> The risk of non-verbatim paragraphs is too high

[18:15] <autrijus> just kill the "== "

[18:16] <autrijus> stevan: fixing your bug

[18:17] <ajs> I'm concerned about type "Char"... I think type conversion overhead is going to be stunningly awful

[18:23] <autrijus> where is this "Char" type?

[18:23] <svnbot6> r3165 (autrijus++) -- * UI cleanup on wizard.p6

[18:23] <svnbot6> r3166 (Juerd++) -- unkwid (s/^== //, .=lcfirst for @headings)

[18:23] <svnbot6> r3167 (autrijus++) -- * Stevan reported that `returns Foo::Bar` didn't work. Fixed.

[18:23] <svnbot6> r3168 (ninereasons++) -- better regexp for '=for COMMENT'

[18:23] <svnbot6> r3169 (Juerd++) -- add reduce meta-op to quickref/op

[18:23] <svnbot6> r3170 (Juerd++) -- update README

[18:26] <gaal> is $_ supposed to be ro in map?

[18:26] <gaal> ./pugs -e 'my @a = <123>;my @b = map {$_+=1} @a'

[18:26] <gaal> Error: Can't modify constant item: VNum 124.0

[18:26] <gaal> (funny error message, too.)

[18:27] <gaal> i meant: @a = <1 2 3>  :-)

[18:30] <eric256> you can't modify the original @a array so i would assume it is r and not rw

[18:30] <eric256> pugs -e "my @a = <1 2 3>;my @b = map {$_+1} @a;print @b.perl" 

[18:30] <eric256> behaves well

[18:30] <gaal> compare with for (@a) { $_ ++ }

[18:31] <gaal> "autoextracted" $_ in for is rw by default.

[18:31] <gaal> i think it sohuld be in map too

[18:31] <gaal> or at least, is copy.

[18:32] <gaal> there has to be a nice way to avoid the map { s/// } p5 pitfall...

[18:32] <eric256> hmm . dunno. when would you use map like that though?  i mean most times you want to modify wouldn't you use for instead?

[18:32] * autrijus sides with eric256 :)

[18:33] <gaal> is copy at least could be nice. if there's a way to make that COW... that's grand.

[18:34] <autrijus> I've just heard that in parrot, cloning a string is guaranteed a O(1) operation :)

[18:34] <eric256> i see. copy would be slow but copy on write would only slow it down if they actualy modify it?  what was the map { s///} pitfall you where refering too

[18:35] <eric256> copy can take longer than O(1)?

[18:35] <gaal> @basenames = { s,.*/,, } @pathnames

[18:35] <svnbot6> r3171 (ninereasons++) -- clear screen

[18:35] <gaal> that's a bug in p5

[18:36] <gaal> because you wanted to return the modified $_, not the return value of the s///, whcih is 1 or 0

[18:39] <ajs> hmmm... the more I think about it, the more I like the idea of a gcc back-end ;)

[18:39] <ninereasons> (although karma (both + and -) messes with my head and I try to ignore it) someone might want to know that svnbot is not granting karma as she seems to think she is

[18:40] <eric256> that isn't a bug. that is just a bad side effect of s/// returning the number of values replaced.

[18:40] <gaal> it's not a bug in perl5, of course. it's a user pitfall.

[18:43] <gaal> ah, punctuation. above i meant to write: "that's a bug, in p5" :)

[18:45] <eric256> either way that is a problem you have with the semantics of s/// not map, unless you want map to pass in a copy and place the final value of that copy in  the new array, which i don't think is going to happen. ;)

[18:45] <svnbot6> r3172 (gaal++) -- cleanup temporary files in tests; add some more nonces

[18:49] <gaal> assuming for a moment that s/// returns the substituted value, why not?

[18:50] <eric256> why not what? if s/// returns the substituted value then map does what you want now.   i think we lost each other somewhere

[18:53] <gaal> you can't s/// on $_ now.

[18:54] <gaal> (in a map that is.)

[18:56] <svnbot6> r3173 (ninereasons++) -- sp

[18:58] <eric256> ohh. gotcha.  i was confused because that is unrelated to your s/// 'bug' in p5....lines got crossed

[19:01] <Juerd> gaal: I have asked for non-mutating s/// several times. Never really got a useful answer.

[19:01] <gaal> btw: map { s/// } is not something i advocate or anything. it's just that from observing people for a while i know it does tend to happen a lot. s/// is very often better done as m// anyway.

[19:01] <svnbot6> r3174 (iblech++) -- * EOL at EOF added to unlink.t.

[19:01] <svnbot6> r3174 (iblech++) -- * Usual svn properties added to docs/quickref, ext/Tree, and examples/.

[19:01] <Juerd> gaal: s/// has little to do with boolean stuff, so I'd say break with ~~, and make s a method, from which flow . for non-mutating and .= for mutating

[19:02] <eric256> well the current ro $_ makes s/// an error. ;)

[19:02] <gaal> Juerd, what do you think about 'is copy' map?

[19:02] <Juerd> eric256: map -> $_ is rw { ... }, @foo

[19:02] <Juerd> gaal: possible but inefficient.

[19:03] <eric256> is map functioning correctly in Pugs? and is it suppose to flatten to a string in some cases?

[19:03] <Juerd> Does anyone know what the correct behaviour is? Are there tests?

[19:03] <Juerd> Methods and functions need specification badly

[19:04] <gaal> hmm, "old" note by larry on this. http://perlmonks.org/index.pl?node_id=435596

[19:05] <gaal> i don't understand the mechanism of mutator methods mentioned there though.

[19:05] <eric256> me likes the ability to do (1..10).map:{$_+1}.join(",");

[19:05] <eric256> now that is OO DWIM goodness

[19:05] <gaal> (it's a nice perlmonks thread btw, if you don't know it.)

[19:07] <gaal> imagining it would work, wouldn't (1..10).map:{$_++}.join(",") look as natural?

[19:07] <cognominal> does someone remember how to get french quotes in emacs?

[19:07] <gaal> (is it ruby that doesn't have ++ for ideological reasons?)

[19:08] <gaal> cog, ^k >>  in vi, sorry :/

[19:09] <Limbic_Region> stevan ping

[19:12] <cognominal> arf, that was ~< in iso-accent-mode.

[19:15] <gaal> can't 'given' be an rvalue? $res = given $x { ... }

[19:16] <PerlJam> gaal: it should be able to function as an rvalue.

[19:17] <gaal> this parsefails. ./pugs -e 'my $x = given 1 { when /1/ { "asdfadsf" }; when 2 {"aa"}; }'

[19:19] <PerlJam> oh, pugs has the correct behavior.

[19:19] <PerlJam> from S04 "Statement-level constructs may start only where the parser is expecting the start of a statement. To embed a statement in an expression you must use something like do {...} or try {...}"

[19:19] <PerlJam> and given is a statement-level construct

[19:19] <gaal> hmm.

[19:19] <gaal> thanks,

[19:19] <gaal> i'll go with that.

[19:20] <gaal> do isn't implemented yet though. :)

[19:20] <gaal> and rvalue try doesn't seem to work.

[19:21] * Juerd sighs at perlmonks

[19:21] <Juerd> I made the same mistake the what, third time now?

[19:21] <autrijus> Juerd: hm?

[19:21] <Limbic_Region> which mistake is that?

[19:21] * Juerd assumed open mindedness

[19:21] <Juerd> I assumed that a bare idea, without implementation details, could lead to a useful discussion and perhaps implementation

[19:21] <PerlJam> Juerd: surely the opposite assumption is the safe one for humans in general

[19:22] <PerlJam> (and perlmonks is a nice collection of general humans)

[19:22] <Juerd> As L~R said in his pugs advocacy, planting the seed can often be fruitful

[19:22] <Juerd> But not on PM, not when you "touch" the site. Not when you suggest a feature there. It just can't happen. PM is too much like p5p in that respect.

[19:23] <Limbic_Region> Juerd - a term I have used with management is "jedi mind trick", making someone believe what you want to happen is their idea

[19:23] <Juerd> I'm not good at mind tricks

[19:24] <Juerd> I absolutely hate social politics, especially when people activate unnecessary force fields

[19:24] <PerlJam> Limbic_Region++ that's exactly how it has to happen IMHO

[19:24] <svnbot6> r3175 (ninereasons++) -- move motd

[19:25] <Juerd> p6l is a positive contrast, as is this channel

[19:25] <Juerd> Here, an idea can enter at any time, and it is discussed and often quickly specced and sometimes even implemented

[19:25] * Limbic_Region mostly agrees with Juerd's sentiment

[19:26] <Limbic_Region> WRT site changes at the Monastery

[19:26] <PerlJam> Juerd: time to build perl6monks where discussions like that can happen!  ;)

[19:26] <Juerd> I'm too upset right now (upset because I was wrong believing things could have had changed), so I'm going to take a walk

[19:26] <Juerd> afk

[19:32] <nmcfarl>  /msg NickServ IDENTIFY nmcfarl

[19:33] <eric256> opps

[19:33] <eric256> you might want to change that password now

[19:33] <nmcfarl> yeppers

[19:33] <nmcfarl> it needed to go any how

[19:36] <gaal> has there been a decision on how qx// is spelled now?

[19:38] *** broquaint_ is now known as broquaint

[19:38] <svnbot6> r3176 (iblech++) -- Usual svn properties added to examples/advocacy, too.

[19:40] * eric256 curses at his keyboard...then realizes he set a book on a second keyboard attatched to the same system....teach me to screw around in the future

[19:40] <gaal> ouch! getting many undef references (s2gb5_slow) with a simple pugscc attempt on linux. parrot-0.2.0, but i'm actually using the pugs backend.

[19:41] <Corion> gaal: I think it's rx:P5//

[19:41] <Corion> err - I was thinking of qr// obviously

[19:41] <Corion> It's still spelled system<> :)

[19:41] <gaal> :)

[19:43] <gaal> eval_perl5 ( use Test::Output; output_from($cmd) }, yeah.

[19:44] <gaal> oh, the parrot backend works ok.

[19:45] * Limbic_Region wonders what preverse thing gaal is using the backend of a parrot for

[19:45] * Limbic_Region ducks

[19:45] <gaal> wow, i've been outsillied!

[19:45] <gaal> this calls for a drink :)

[19:46] <Limbic_Region> it is Friday afterall

[19:46] <gaal> yeah

[19:46] <eric256> so by compliing parrot i get rules support?

[19:47] <kolibrie> yeppers

[19:47] <eric256> but there is no Makefile.PL .... /me searches for readme

[19:47] <Limbic_Region> with a couple of options - linking against the lib or the external executable

[19:48] <gaal> perl Configure.pl

[19:48] <Limbic_Region> eric256 - perl Configure.pl <options>; make; make test; etc

[19:48] <Limbic_Region> gaal was faster on the keys

[19:48] <gaal> if rules work well i'll take a stab at porting this, heh heh. http://www.forum2.org/gaal/lj/fool-pretty.pl

[19:48] <fagzal> hail

[19:48] <Limbic_Region> salutations

[19:48] <eric256> what options would i want?

[19:49] <Corion> Hmmm - taking a script from stdin seems broken currently...

[19:49] <kolibrie> eric256: I didn't use any options, and mine works great...

[19:49] <fagzal> Erm... anybody could tell me where I can find some info on "what's going to be implemented in Pugs approximately when" :-) Actually I tried my $a = "a" _ "b"; and it did not work out ;-)

[19:49] <gaal> Corion, as does interactive mode on windows

[19:49] <gaal> it's because of that terminal thing, remember?

[19:49] <Corion> gaal: Hmmm. Why that?

[19:49] <Corion> What terminal thing?

[19:49] <eric256> string concatenation is now ~ not _

[19:50] <Limbic_Region> eric256 - you might want some of the optimization options but for now just get it to work

[19:50] <Limbic_Region> was string concatenation ever _ ?

[19:50] <fagzal> eric256: ouch... I was looking at some old docs then :-/ Sorry 'bout that.

[19:50] <eric256> it was in the docs. it still is in one set of docs

[19:50] <Limbic_Region> fagzal - see http://dev.perl.org/perl6

[19:50] <gaal> Corion: hIsTerminalDevice lies, on msys at least.

[19:50] <Limbic_Region> or better yet - install Perl6::Bible

[19:50] <Corion> gaal: Ah. Ugh.

[19:51] <gaal> Corion, so Main.hs:88 doesn't do the right thing.

[19:51] <eric256> limbic those installed ones wont stay up to date though

[19:51] <Corion> So we'll have to look if we can ask the Win32 API instead.

[19:51] <Limbic_Region> eri256 - assuming you keep them up to date they will

[19:51] <gaal> personlally i'm not sure interactive mode shoudl start w/o params.... but that's just me.

[19:51] <fagzal> Thanx! I'll RTFM now :-)

[19:51] <Limbic_Region> ingy makes a new release everytime one changes (or so he lead me to believe)

[19:52] * eric256 wonders if all the warnings going by should worry him..

[19:52] <gaal> brb

[19:52] <Corion> gaal: But GHCi does that, so Pugs does too.

[19:52] <gaal> so offer a pugsi

[19:52] <gaal> brb really

[19:53] <eric256> beigns make test and sees yet more warnings...

[19:53] <Limbic_Region> eric256 - I wouldn't be worried too much - parrot compiles quite noisily 

[19:53] <Limbic_Region> hmmm - I don't remember make test being to squaky though

[19:54] <eric256> soo its done....but i don't see an exe or anything...how do i test it?

[19:54] <Corion> gaal: Pugsi sounds cute

[19:54] <Limbic_Region> eric256 - you compiled Parrot on windows using which compiler?

[19:55] <svnbot6> r3177 (iblech++) -- Added a (sucessful :)) test testing state() inside the substitution part of

[19:55] <svnbot6> r3177 (iblech++) -- regular expressions.

[19:55] * Limbic_Region only ever did Parrot on Cygwin for Win32

[19:55] <eric256> by compiled....i just did perl Config.pl....then nmake, then nmake test

[19:55] <gaal> you can call it pigs too, if you like.

[19:55] <eric256> i haven't done anything else besides download it....and i have VC++ installed.

[19:56] <stevan> autrijus++ # for fixing my returns Foo::Bar problem :)

[19:56] <Limbic_Region> *shrug* - I would have expected a parrot.exe to end up in the directory you did the nmake in

[19:56] <stevan> Limbic_Region: pong

[19:56] <gaal> eric, cool! it didn't workforme earlier today :(

[19:56] <eric256> not sure thats a reason to celebrate! lol.

[19:57] <gaal> well i didn't use msvc

[19:57] <eric256> just once i would like these things to say "Completed succefully" or even something spelled right

[19:57] <Limbic_Region> gaal - mingw?

[19:57] <eric256> i dunno if i used it or not. it never asked

[19:57] <autrijus> pugs> say do { if 1 { 3 } else { 4 } }

[19:57] <autrijus> 3

[19:57] <gaal> l~r, yes, also tried multi

[19:57] <autrijus> (r3178)

[19:57] <gaal> s/multi/cygwin/

[19:57] <gaal> eric, it figured it all out from whatever perl you used.

[19:58] <eric256> well i have activestate perl...so 

[19:58] <ninereasons> compilation seems to be using src/Pugs/pugs_version.h; which hardcodes the svn version to 1241 

[19:59] <autrijus> ninereasons: that manes util/version_h.pl isn't doing what it should be doing

[19:59] <ninereasons> ah

[19:59] <Limbic_Region> gaal - I can tell you 101 things that could go wrong with compiling Parrot on Cygwin

[19:59] <autrijus> try rm pugs_version.h and make again

[19:59] <Limbic_Region> not sure if anyone picked up the torch as resident Parrot on Cygwin weenie after I dropped it late November

[20:00] <ninereasons> will do, autrijus ; thanks

[20:00] <svnbot6> r3178 (autrijus++) -- * do {...} literal.

[20:00] * eric256 guesses he doesn't need rules right now. ;)

[20:01] <Limbic_Region> gaal - what were the Cygwin problems (if you remember)

[20:01] <gaal> L~R, maybe you should tell them to p6-c, so some  <ESC>dd aah, you said *parrot*.

[20:01] <gaal> undefined rerferences to _assert and stuff.

[20:01] <gaal> s/_/__/; # make that extra magic

[20:02] <gaal> eric, try make install! :)

[20:02] <autrijus> eric256: parrot.exe needs to be in your path

[20:02] <autrijus> that's all

[20:06] <ninereasons> do wee need to say 'PUGS_EMBED=parrot' anymore, now that parrot is more or less required for a fully working pugs ?

[20:06] <svnbot6> r3179 (Stevan++) -- Set - making things work again, slight issue with some methods

[20:06] <eric256> but i need to have a parrot.exe

[20:09] *** Qiang_ is now known as Qiang

[20:12] <svnbot6> r3180 (iblech++) -- Added some more submethod tests.

[20:12] <svnbot6> r3181 (ninereasons++) -- oops (take out a debug line)

[20:13] <Limbic_Region> oh - so every commit results in a karma upvote?

[20:13] <Limbic_Region> where is the karma whore bot?

[20:13] <ninereasons> it doesn't seem to work, though, Limbic_Region 

[20:13] <eric256> is the svnbot programmed in perl6?

[20:14] <ninereasons> or someone has mercifully exempted me from being karmalized

[20:14] <Limbic_Region> perlbot karma for ninereaons

[20:14] <perlbot> ninereaons doesn't have any karma

[20:15] <Limbic_Region> perlbot karma for ninereasons

[20:15] <perlbot> Karma for ninereasons: 2

[20:15] <Corion> Does anyone know where in Perl5 the -X tests are implemented?

[20:15] * eric256 read taht caramelized. :)

[20:15] <eric256> perlbot karma for me

[20:15] <perlbot> Karma for me: -1

[20:15] <Limbic_Region> ninereasons - it is probably because of the parens

[20:15] <Corion> (and/or what the name of -T is)

[20:15] <eric256> perlbot karma for eric256

[20:15] <perlbot> Karma for eric256: 2

[20:15] <ninereasons> prob'ly so, Limbic_Region 

[20:15] <eric256> eric256--

[20:15] <eric256> perlbot karma for eric256

[20:15] <perlbot> Karma for eric256: 1

[20:15] <eric256> ohh ;(

[20:15] <eric256> lol

[20:16] <eric256> eric256++++

[20:16] <perlbot> What kind of idiot karmas himself?  Your kind of idiot!

[20:16] <Limbic_Region> when something with a space needs to be karma'd you put  it in inside the parens and the upvotes on the outside

[20:16] <eric256> lol

[20:16] <eric256> eric256++

[20:16] <perlbot> What kind of idiot karmas himself?  Your kind of idiot!

[20:16] <gaal> Corion: op/filetest.t

[20:16] <eric256> hehe

[20:16] <Limbic_Region> that will result in a karma loss too

[20:16] <Limbic_Region> perlbot karma for eric256

[20:16] <perlbot> Karma for eric256: -1

[20:16] <eric256> i'm not too concerned

[20:16] <ajs> hmmm ....

[20:16] <ajs> ajs--

[20:16] * Limbic_Region prefers to have neutral karma

[20:16] <ajs> doh!

[20:16] <Corion> gaal: That are the tests. I need the C side.,

[20:16] <ninereasons> karma does funny things to my mind

[20:16] <jabbot> ninereasons: does funny things to my mind has neutral karma

[20:17] <ninereasons> he

[20:17] <Corion> gaal: But "filetest" was the good word to search on, thank!

[20:17] <Corion> s

[20:19] <svnbot6> r3182 (iblech++) -- Added a small additional test to t/builtins/fail.t.

[20:19] <ninereasons> it's like rep in Perl Monks.  It made me worry about things that don't matter (e.g. that my rep is too low) and in the end demotivated me from participation.  I must be a psycho.

[20:23] <eric256> i like sharing my game...but someone else changed it..lol. i'm not sure i like that.....

[20:25] <ninereasons> that slightest whiff of anarchy, eric256 

[20:25] <eric256> it was you! lol

[20:25] <ninereasons> :-)

[20:26] <Limbic_Region> eric256 - I really like the changes people have made to my examples

[20:26] <eric256> at least make clear screen a sub instead of putting that ugly $OS stuff around. ;)

[20:26] <eric256> i'm still learning to share Limbic...its scary coming back to your code after a couple hours and having it be different

[20:27] <ninereasons> as you wish, eric256 ; it will take a minute

[20:28] <autrijus> hey, anyone have parrot 0.2.0-release?

[20:28] <autrijus> I'd like to know if rules still works with the latest pugs

[20:28] <eric256> i just did it down' worry

[20:28] <eric256> actualy i must admit i kind of like the way it works

[20:29] <eric256> frankly i was just shocked to see a system command in there and it took me a minute to realize what had happened

[20:29] <Limbic_Region> oh wow

[20:30] <Limbic_Region> it is officially the weekend

[20:30] <eric256> not here

[20:30] <Limbic_Region> and I might even be connected to the net sometime tomorrow

[20:30] <PerlJam> autrijus: works in what fashion?  I just did a little test and it doesn't appear to die :)

[20:30] <svnbot6> r3183 (autrijus++) -- * trans_charset.

[20:30] <svnbot6> r3184 (ninereasons++) -- attempt to unless the karma

[20:30] <svnbot6> r3185 (ninereasons++) -- put cls in a sub

[20:30] <Limbic_Region> if not - see everyone on Monday

[20:30] <Limbic_Region> TTFN

[20:30] <autrijus> PerlJam: ok, that's good enough

[20:30] <autrijus> PerlJam++

[20:30] <autrijus> Limbic_Region: see ya

[20:30] <ninereasons> s/unless/unleash/

[20:31] <PerlJam> well,  that's was with r3184 ... no telling *what* happens with 3185  ;-)

[20:31] <autrijus> heh. the change that matters is r3183

[20:32] <eric256> whats trans_charset?

[20:32] <autrijus> eric256: it's a parrot op code that translates a string from a character set to another

[20:33] <autrijus> I've been hacking proper utf8 support to parrot

[20:33] <eric256> ahh

[20:33] <eric256> can i put my classes in a seperate file?  do i need package? does it work in pugs yet? 

[20:34] <autrijus> you can put it in separate files, yes.

[20:34] <autrijus> currently there's a small bug in that classes defined in external files must be addressed with ::

[20:34] <autrijus> like

[20:34] <autrijus> use Foo;

[20:34] <autrijus> ::Foo.new()

[20:34] <eric256> ohhh.

[20:34] <autrijus> this is expected to be fixed soon

[20:34] <eric256> that explains it

[20:34] <ninereasons> so much perl6 goodness does work, though.

[20:34] <autrijus> (but that syntax is still legal)

[20:35] <svnbot6> r3186 (iblech++) -- Cleaned up Net::IRC a bit and added some IRC commands to it.

[20:36] <iblech> ninereasons: I think we should test what the karma bot accepts...

[20:36] <ninereasons> yes

[20:36] <iblech> r1234, somedev++: description

[20:36] <iblech> karma somedev

[20:36] <jabbot> iblech: somedev has neutral karma

[20:36] <iblech> r1234, somedev++ description

[20:36] <iblech> karma somedev

[20:36] <jabbot> iblech: somedev has karma of 1

[20:36] <iblech> r1234, somedev++ --> description

[20:36] <ninereasons> yay!

[20:36] <iblech> karma somedev

[20:36] <jabbot> iblech: somedev has karma of 2

[20:36] <iblech> ok :)

[20:36] <iblech> I'll fix svnbot

[20:37] <iblech> ?quit Restarting svnbot

[20:37] <PerlJam> autrijus

[20:38] <PerlJam> <+uri> PerlJam: i doubt energy will be wasted on both. the goal of pugs is to bootstrap p6 compiling itself. once that is done, pugs should fade away

[20:38] <PerlJam> what say you to that?

[20:38] <autrijus> that is correct.

[20:38] <autrijus> pugs either _becomes_ perl6

[20:38] <autrijus> or is replaced by real perl6.

[20:38] <PerlJam> Then it's a good thing I didn't bet uri the other way  ;-)

[20:39] <autrijus> either way, pugs as we know it will fade away.

[20:39] <autrijus> that is why I can go with this crazy version scheme.

[20:39] <autrijus> you don't think we'll stay with 6.283185.99 for long, right?

[20:40] <PerlJam> well, "long" is the word I'm having problems with.  Long relative to what?

[20:40] <eric256> can you do @array.any.pick() by any chance? ;)

[20:40] <autrijus> isn't it @array.pick?

[20:41] <autrijus> (it's already there)

[20:41] <PerlJam> any isn't a method of any object is it/

[20:41] <autrijus> @array.any.pick, incidentally, works too.

[20:41] <ninereasons> see examples/hangman.p6 eric256 

[20:41] <autrijus> but only because that gets invoked as any(@array).pick.

[20:41] <iblech> hm... but [1,2,3].any.pick, does not

[20:42] <eric256> .pick on a regular array picks what?

[20:42] <autrijus> iblech: it works for me

[20:42] <iblech> a random element

[20:42] <autrijus> it's the same as any([1,2,3]).pick

[20:42] <autrijus> because any is not a method on array

[20:42] <autrijus> pugs> [1,2,3].pick

[20:42] <autrijus> 2

[20:42] <autrijus> but .pick is.

[20:42] <iblech> yes, but [1,2,3].any.pick always returns "(1, 2, 3)" here

[20:42] <autrijus> and that is as expected

[20:42] <autrijus> because any([1,2,3]) is just [1,2,3].

[20:42] <svnbot6> r3187, iblech++ --> Fixed svnbot to output the committer's names in a karma-bot compatible way.

[20:42] <iblech> oh yes

[20:42] <iblech> of course

[20:43] <autrijus> :)

[20:43] <autrijus> ew.

[20:43] <autrijus> can I change --> to | ?

[20:43] <autrijus> (in svnbot)

[20:43] <iblech> of course. :)

[20:43] <iblech> ?quit Shutting down svnbot

[20:44] <autrijus> done

[20:44] <iblech> ok

[20:51] <ajs> autrijus: any([1,2,3]) is [1,2,3] because the array is not flattened?

[20:51] <svnbot6> r3189, ninereasons++ | any(@ar).pick to @ar.pick

[20:51] <ninereasons> although I deleted  src/Pugs/pugs_version.h and ran make again, my final pugs is still Version: 6.2.3 (r1241)

[20:51] <autrijus> ajs: array refs are never flatteneed

[20:52] <autrijus> ninereasons: does pugs_version.h say 1241 still?

[20:52] <ninereasons> yep

[20:52] <ajs> Ok thanks.... though is a junction of one not a junction? Could that ever end up causing problems?

[20:53] <ninereasons> I wonder where it got that from. 

[20:54] <PerlJam> ninereasons: I just noticed the same thing

[20:54] <PerlJam> ajs: a junction is a junction is a junction.

[20:55] <ninereasons> must depart && /quit bye

[20:56] <ajs> PerlJam, then isn't any([1,2,3]) actually NOT [1,2,3] ?

[20:56] <PerlJam> depends on the flattening (or lack there of)

[20:56] <svnbot6> r3190, iblech++ | Delete empty directory t/kwid as its contents have moved (in r374!).

[20:56] <svnbot6> r3191, Stevan++ | Test - adding tests for isa_ok() with classes

[20:58] <ajs> PerlJam: see context above. autrijus was saying that it doesn't flatten therefore, any([1,2,3]) is same as [1,2,3], but I'm saying that a single array ref is not the same as the any-junction of that one array ref... I'm not 100% sure about that, though

[21:00] <PerlJam> ajs: no, they are not the same.  One is a Junction, the other is an Array

[21:00] <eric256> cool.ios there a descructive pick? or a .shuffle.pop ;)

[21:02] <Corion> Hah. GetFileType in the Win32 API should be a reliable way to implement -t

[21:02] <eric256> ajs i think he measn like $this = 1; any($this) = 1; $this = [1,2,3]; any($this) = [1,2,3];  because $this is realy a ref to [1,2,3]

[21:05] <eric256> no shuffle.pop :( .... can we program new .method's for arrays and stuff?

[21:06] <PerlJam> does anyone happen to know the URL for the dbdi repos on svn.perl.org?

[21:14] <autrijus> PerlJam: http://svn.perl.org/parrot-modules/dbdi/

[21:14] <autrijus> it's empty.

[21:17] <PerlJam> thanks.

[21:23] <cognominal> I thought that synopsis where the reference but I realize that for object the synopsis scratches only the surface.

[21:25] <cognominal> for my question on trait/properties setters/getters, indeed one must read A12 to get an answer

[21:31] <Corion> Anyone know if there is a way to get from a Haskell (file) Handle to the file handle number?

[21:31] <Corion> I want/need to pass it on to a Win32 API function, that wants an Int

[21:32] *** wilx` is now known as wilx

[21:33] <autrijus> System.Posix.IO.handleToFd

[21:33] <autrijus> not sure if you have it

[21:37] <stevan> autrijus: does C<has Type $.attr;> work yet?

[21:37] <svnbot6> r3192, Stevan++ | Set - adding some tests for class inserting and removing

[21:37] <autrijus> stevan: it's parsed

[21:37] <autrijus> but has no effect yet

[21:37] <stevan> ok

[21:37] <stevan> thats explains it :)

[21:38] <stevan> I was trying to do $.attr.method() and it was complaining

[21:38] <stevan> hmm, any thoughts on how to get around that?

[21:39] <autrijus> is it tested?

[21:39] <stevan> i think so, but if not, i will write one 

[21:40] <stevan> especially now that I know what is happening and I am not just going crazy :)

[21:41] <Juerd> re

[21:41] <Juerd> Driving in reverse sucks

[21:41] <Juerd> Driving in reverse in the dark sucks

[21:41] <Juerd> Driving a kilometer in reverse in the dark sucks

[21:41] <Juerd> Or, put differently: fallen trees suck.

[21:44] <Corion> Too bad - System.Posix.IO.handleToFd doesn't exist on Win32

[21:46] * eric256 wonders how a fallen tree translates into driving a mile in reverse...why didn't you jsut turn around?

[21:46] <autrijus> stevan: got a test?

[21:47] <stevan> autrijus: working on it

[21:48] <stevan> several of the tests in t/oo/attributes.t work, but eval_ok() does not :)

[21:50] <stevan> lives_ok {} gives better diagnostics as well

[21:50] <stevan> so I am fixing them first

[21:50] <stevan> then I will add the test

[21:56] <stevan> wow

[21:56] <stevan> a lot of these tests work

[21:56] <stevan> just eval_ok sucks!

[22:03] <stevan> autrijus: test added (t/oo/attributes/methods_on_typed_attrs.t)

[22:03] <svnbot6> r3193, Stevan++ | adding test for methods called from typed attributes

[22:03] <stevan> I am going back to cleaning up t/oo/attributes.t :)

[22:06] <stevan> submethod BUILD($.bar, $.baz, $:hidden) {} works

[22:06] <stevan> nice!

[22:06] <stevan> autrijus++ 

[22:11] <_metaperl> stevan, ping?

[22:11] <autrijus> stevan: the test is flawed

[22:11] <stevan> _metaperl: pong

[22:11] <stevan> autrijus: whats wrong?

[22:11] <autrijus> my $foo = Foo.new(:bar($bar));

[22:11] <autrijus> should be that, no?

[22:11] <autrijus> otherwise you don't have an obj

[22:12] <stevan> oh

[22:12] <stevan> :)

[22:12] <stevan> sorry, yes that is correct

[22:12] <autrijus> fixed

[22:12] <autrijus> and implemented.

[22:12] <stevan> nice

[22:12] <stevan> BTW - about 20 more tests pass in t/oo/attributes.t now

[22:12] <autrijus> cool... 2 more :)

[22:12] <stevan> eval_ok should be officially discouraged

[22:13] <stevan> oh yes

[22:13] <autrijus> wizards.p6 fixed to take advantage of this

[22:13] <stevan> I use a longer lives_ok {} and is() combination which gives better diagnostics too

[22:13] <autrijus> cool

[22:14] <stevan> autrijus: did you see my meta-meta-class document?

[22:15] <autrijus> no, sounds scary

[22:15] <autrijus> looking now

[22:15] <stevan> it is scary

[22:15] <svnbot6> r3194, Stevan++ | fixing several t/oo/attributes.t tests; eval_ok() does not work very well, I think we should stop using it; ~20 more tests pass now

[22:15] <svnbot6> r3195, autrijus++ | * MMD now deals with many more cases of expressions; in particular,

[22:15] <svnbot6> r3195, autrijus++ |   $.chained.attr.methods works.

[22:15] <svnbot6> r3196, autrijus++ | * change wizards.p6 now typed method dispatch works

[22:15] <stevan> it may not make much sense

[22:16] <stevan> but a sanity check would be appreciated

[22:16] * stevan realizes he is asking for a sanity check from autrijus, that may not be sane :)

[22:17] <autrijus> stevan: have you seen my wikipedia user page?

[22:17] <stevan> not in a while

[22:17] <autrijus> it has been like that for months

[22:17] <autrijus> # http://en.wikipedia.org/wiki/User:Autrijus

[22:18] <stevan> nice

[22:18] <stevan> sanity is very overrated, and not much fun IMHO :)

[22:23] <autrijus> stevan: looks good

[22:23] <stevan> cool

[22:33] <svnbot6> r3197, Stevan++ | adding some more submethod BUILD tests to t/oo/attributes.t

[22:34] <Juerd> eric256: Well, one doesn't turn on a narrow dyke with just enough room for a car to pass, and a fence on both sides.

[22:56] <nmcfarl>  /quit  

