[00:02] <elmex> new?

[00:02] <theorb> my $self = bless {}, $class;

[00:17] <nothingmuch> that is what I'm doing, but it's, sysiphic, sort of

[00:17] <nothingmuch> use base qw/Object::Boring/; # provides a new that does just that

[03:04] <stevan> so I am trying to implement throws_ok into Test.pm

[03:05] <stevan> and I ran into this bug

[03:05] <stevan> pugs -e 'sub foo (Sub $code, Str $a, Str ?$b) { ref($a).say }; foo -> { "test" }, "test", "test2";'

[03:05] <stevan> prints: List

[03:06] <stevan> I also tried a number of other versions of this as well

[03:06] <stevan> this one is the only one which works:

[03:06] <stevan> pugs -e 'sub foo (Sub $code, Str $a, Str ?$b) { ref($a).say }; my $block = { die "test" }; foo $block, "test", "test2";'

[03:06] <stevan> it prints: Str

[03:06] <stevan> I am writing a t/pugsbugs/ test for this now :)

[03:07] <stevan> it will be t/pugsbugs/code_blocks_as_sub_args.t

[03:07] <stevan> (but since we are still on svn.perl.org I can't commit yet)

[04:07] <stevan> here is another fun one :)

[04:07] <stevan> pugs -e 'my @a = 0 .. Inf; push @a, 10;'

[04:07] <stevan> I think this should probably throw an error. 

[04:08] <stevan> or we can just go with the policy that if you do something stupid you deserve whatever you get.

[04:08] <kelan> i vaguely remember larry saying that was fine

[04:08] <kelan> you just couldnt get the 10 back again

[04:14] <stevan> kelan: and it will take forever :)

[04:15] <kelan> there was discussion on that

[04:15] <kelan> that maybe perl wouldnt need to calculate the actual list

[04:15] <stevan> autrijus: when next you have tuits, the MMD on types needs some work

[04:16] <kelan> in this case anyway, it could just turn the push into a noop

[04:16] <stevan> kelan: so it just pushes into some kind of inter dimensional portal where you can never get it back :)

[04:17] <kelan> right

[04:17] <kelan> here we go: http://www.mail-archive.com/perl6-all@perl.org/msg39891.html

[04:19] <stevan> kelan: thanks, this actually helps me write the tests :)

[04:20] <kelan> no problem:) i knew lurking on p6l would come in handy some day

[04:22] <ingy> hola

[04:23] <stevan> hey ingy

[04:24] * stevan has to reboot to finish the 10.3.9 install

[04:33] <kelan> whats the 10.3.9 install?

[04:33] <stevan> kelan: Mac OS X

[04:33] <stevan> actually it was an upgrade not install really

[04:34] <kelan> ah. whats this one called? ocelot? ;)

[04:34] <kelan> that should be the codename for the next one

[04:34] <stevan> Tiger :)

[04:34] <kelan> it sounds cool

[05:17] <brothers> puma, clearly

[05:18] <nothingmuch> morning

[05:18] <nothingmuch> i think puma was the first one

[05:20] * nothingmuch hopes apple will make a MacOS X $n - Tabby soon

[05:20] <brothers> nothingmuch: i stand corrected

[05:21] <brothers> Tiger. Apple has also registered the trademarks Lynx, Cougar, and Leopard for future use.

[05:21] <brothers> -wikipedia

[05:21] <nothingmuch> they're so silly that way

[05:21] <nothingmuch> anyway, /me must do hygene stuff

[05:36] * nothingmuch heads off to work

[06:44] <nothingmuch> morning

[07:12] *** rob___ is now known as rob-

[07:22] <autrijus> hey. 'hat trick' fixed.

[07:23] <autrijus> assignment to negative array indice now works. iblech++

[07:23] <autrijus> I wonder who did this, though ;) http://en.wikipedia.org/wiki/Autrijus_Tang

[07:31] <Corion> A good morning! (backlogging)

[07:31] <autrijus> hey Corion-san

[07:31] <Corion> Hi autrijus! I've promoted lots of skipped/todo tests, but can't commit! I think I have commit-addiction!

[07:32] <autrijus> bwahaha. are you using svn?

[07:32] <Corion> autrijus: But I got a new bug for you - pugsbugs golf: pugs -e "=<>"

[07:32] <Corion> Yep - I'm using svn and not svk :)

[07:32] <autrijus> Corion: in that case you are doomed and must repent

[07:32] <autrijus> err, wrong personality

[07:32] <autrijus> in that case, please run "svn diff -u" and sent patches my way

[07:33] <Corion> autrijus: Ah no - I can wait until "monday" (that is, monday for you :), which is sunday evening for me, I think :)

[07:33] <autrijus> alright.

[07:34] <Corion> autrijus: You survived without IP packets for a day, so I can survive without commits too!

[07:34] <Corion> I'll be strong!"

[07:34] <autrijus> good kid :p

[07:35] <autrijus> I see the reason.

[07:35] <autrijus> I intended <f> to be a string

[07:35] <autrijus> not a list of strings

[07:36] <autrijus> but since we are now using spli

[07:36] <autrijus> split

[07:36] <autrijus> it's now always a list.

[07:36] <Corion> autrijus: Ah, so it's an internals bug, and not a parser bug

[07:36] <autrijus> yeah.

[07:36] <Corion> autrijus: "Not always" ? I would think it is always a list.

[07:36] <autrijus> and the reason I intended <f> to be a string is that

[07:36] <Corion> Aaah - "Now", not "Not". I need to read ...

[07:36] <autrijus> %x<f> = foo();

[07:36] <autrijus> should give scalar cxt to foo

[07:36] <autrijus> like

[07:36] <Corion> autrijus: Yeah ...

[07:36] <autrijus> %x{'f'}

[07:36] <autrijus> but unlike

[07:36] <autrijus> %x{'f',}

[07:37] <Corion> autrijus: Then what about @list = %x<foo bar baz> ?

[07:37] <autrijus> but maybe there's better way to achieve that.

[07:37] <Corion> (ugly)

[07:37] <autrijus> %x<foo bar> is %x{'foo', 'bar'}

[07:37] <autrijus> clearly a list

[07:37] <autrijus> the idea is for <string_without_whitespace> to be a string

[07:37] <autrijus> and <string whitespace> a list

[07:37] <Corion> autrijus: Yeah, that makes sense

[07:38] <autrijus> exactly I'm not at all sure whether it makes sense :)

[07:38] <autrijus> maybe what should be done is for %x<foo> to special case.

[07:38] <Corion> autrijus: So consider making the [App "&list:", ... ] dependent on rx:perl5/\s/ maybe?

[07:38] <Corion> (in qLiteral, I mean)

[07:39] <autrijus> we'll deal. sec

[07:39] <autrijus> your bug is fixed.

[07:39] <autrijus> now I need to think about %foo<bar>.

[07:41] <Corion> autrijus: You mean, you exchanged one bug for the other :)

[07:42] <Corion> Maybe we should collect these two cases in one test file, and post that test to p6l for clarification, and link the thread from the test? :)))

[07:42] <autrijus> no I didn't exchange one bug for another ;)

[07:42] <autrijus> I just fixed the "=" operator.

[07:43] <autrijus> strangely... it still works

[07:43] <autrijus> woot.

[07:43] <autrijus> roie++ # sensible implementation

[07:44] <autrijus> it turns out that %x<> is handled by a different thing

[07:44] <autrijus> not by split

[07:44] <autrijus> so the <> in that case and the <> as subscript are gramatically different things.

[07:44] <Corion> autrijus: :)

[07:44] <autrijus> that's good, and it now works.

[07:44] * autrijus spreads some flowers

[07:45] <Corion> ... anyway - I'm away from the keyboard now anyway, and when I get back, svn will be fixed, I hope :)

[07:46] <Corion> Eh. If %x<foo> is not handled by split/qLiteral, does it have the same bugs that I fixed in <foo bar baz> ?

[07:48] <autrijus> leading space?

[07:48] <Corion> autrijus: Yes, and tab/ \r / \n

[07:48] <autrijus> seems it's free of such errors.

[07:48] <autrijus> it just calls haskell 'words'

[07:49] <Corion> autrijus: Hmmm. "words" does split on \x20 and nothing else from what I remember

[07:49] <Corion> ... or maybe I remember wrongly

[07:49] <autrijus> you did remember wrongly

[07:49] <Corion> ... need to run now, sorry, can't investigate

[07:49] <Corion> cool

[07:49] <autrijus> see ya :)

[08:37] <nothingmuch> hola autrijus 

[08:43] <autrijus> yo nothingmuch 

[08:47] <castaway_> hawo nm, autrijus 

[08:48] *** castaway_ is now known as castawa

[08:55] *** castawa is now known as castaway

[09:03] * nothingmuch is back

[09:03] <castaway> hey nm

[09:04] <nothingmuch> how are things?

[09:04] <castaway> not bad.. hows yerself?

[09:04] <autrijus> just fine. I'm going to lunch :)

[09:04] <autrijus> I mean, breakfast

[09:04] <autrijus> err. I mean dinner.

[09:05] * castaway laughs

[09:05] <autrijus> that's the problem of living in a state without a bio clock :p

[09:05] <castaway> what time is it there?

[09:05] <autrijus> 5pm... it's 3hrs after I wake up

[09:05] <autrijus> and it is my first meal.

[09:05] <castaway> sounds like breakfast to me

[09:05] <nothingmuch> bon apetite

[09:05] <autrijus> breakfast then

[09:06] <castaway> have a good one

[09:06] * castaway is making beans on toast for breakfast

[09:06] <castaway> nm, is SEE running?

[09:06] <autrijus> schweinshaxe++

[09:06] <autrijus> &

[09:06] <nothingmuch> i think not

[09:06] * nothingmuch will try to fix

[09:09] <nothingmuch> nope, sorry

[09:13] <castaway> someone reboot it again? ;)

[09:14] <castaway> yay, schweinshaxe++

[09:14] <nothingmuch> prolly

[09:14] <nothingmuch> i don't use that box often

[09:14] <nothingmuch> didn't check uptime this time

[09:15] * castaway nods

[09:16] <roie_m> Corion: the %a<> notation should be handled by the same thing that plain <> does (I'm doing it now)

[09:16] <roie_m> Oh, he's not here, is he?

[09:17] <nothingmuch> nope

[09:17] * nothingmuch mumbles something about an asian mafia taking over pugs

[09:17] <roie_m> Oops.

[09:18] * nothingmuch wonders if gaal got around to kill

[09:21] * theorb wonders if jabbot got upgraded.

[09:21] <gugod> yes, per-channel encoding support

[09:22] <theorb> Cool.

[09:27] <gugod> jabbot: utf8?

[09:27] <jabbot> gugod: utf8 is all about seeing the hot-spring symbol ( â™¨)

[09:34] <theorbtw1> Hm, did somebody just /msg me?

[09:34] *** theorbtw1 is now known as theorbtwo

[09:38] <roie_m> Anyone here understand Pugs.AST?

[09:39] <nothingmuch> roie_m: I understood little bits a while ago

[09:39] <theorbtwo> I've mostly avoided looking at it for fear that it will melt my brain.

[09:39] <roie_m> theorbtwo: I completely understand.

[09:39] <nothingmuch> Pugs.AST? how?

[09:40] <nothingmuch> ;-)

[09:40] <roie_m> :-)

[09:40] <roie_m> Can you tell me if this makes sense?

[09:40] <roie_m> cxtOfExp (Syn "cxt" (Val(VStr c):_)) = c

[09:41] <roie_m> For some reason Syn "cxt" "List" was interpreted as a scalar somewhere

[09:41] <nothingmuch> too much for me =P

[09:41] <nothingmuch> autrijus should be back from breakfast soon, though

[09:42] <roie_m> OK, thanks

[09:42] <nothingmuch> it looks ok superficially

[09:42] <nothingmuch> but i really don't know enough

[09:42] <nothingmuch> (just extracts the string that is the context out of the exp structure, right?)

[09:42] <roie_m> Yeah, and report that as the context of the expression

[09:43] <roie_m> But it's weird that it wasn't there before

[09:43] <nothingmuch> what wasn't there before? the whole function?

[09:43] <roie_m> It's like Syn "cxt" didn't really change the context...

[09:43] <nothingmuch> ah

[09:43] * nothingmuch wonders where cxt is propagated

[09:43] <nothingmuch> Eval.hs tacks it on to exprs?

[09:44] * nothingmuch is tempted to have a look but knows it's not the right thing to do at work

[09:45] <roie_m> Something like that, I guess. It's in Eval.hs

[09:45] <roie_m> Another brain-melter

[09:45] <mj> Pugs r1959

[09:45] <mj> my $a = [ { a => 1, b => 2 } ];

[09:45] <mj> say join ' ', $a.ref, $a[0].ref, $a[0].kv;   # Array Pair a 1

[09:46] <nothingmuch> ooh

[09:46] <nothingmuch> interesting

[09:46] <nothingmuch> it's as if { } didn't exist

[09:46] <nothingmuch> mj: did you commit a test?

[09:48] <mj> no, i am not test guru. could you do it?

[09:48] <mj> and my old one

[09:48] <mj> my $a = [ { 1 } ]; say $a().ref; # Inf

[09:48] <mj> my $b = [ { 1 }, { 2 } ]; say $b().ref; # pugs: cannot cast from VList [VCode...

[09:52] <roie_m> It only happens when you assign to a variable.

[09:52] <roie_m> [ { a => 1, b => 2 } ] .[0] .ref # Hash

[09:54] <mj> and 

[09:54] <mj> my $a = [ { { a => 1, b => 2 } } ]; say $a[0].kv; 

[09:54] <mj> is interesting too

[09:54] <nothingmuch> oh wait, is openfoundry still down?

[09:54] <nothingmuch> sure

[09:55] <nothingmuch> looks like it... does anybody have perl.org commit access?

[09:57] <mj> autrijus said "send patch to p6c"

[09:58] <roie_m> mj: what does that do on your machine?

[10:00] <mj> $a[0].kv ... eating memory

[10:00] <mj> probably loop

[10:01] <roie_m> almost crashed my bloody computer

[10:02] <roie_m> It should fail on the single key in the hash, right?

[10:06] <mj> my $a = [ { { a => 1, b => 2 } } ]; 

[10:06] <mj> say $a[0]().kv;  # a1b2

[10:06] <mj> seems ok

[10:08] <mj> say $a[0].ref; # Sub

[10:08] <mj> Sub.kv is not defined, IMHO

[11:19] <mj> sub ta () {

[11:19] <mj> my @a = <a b>;

[11:19] <mj> my @b = <1 2>;

[11:19] <mj> return @a, @b;

[11:19] <mj> }

[11:19] <mj> my ( @a, @b ) = ta(); say 'a: ' ~ @a; say 'b: ' ~ @b;

[11:19] <mj> # a: a b 1 2

[11:19] <mj> # b:

[12:23] <castaway> back from breakfast? ;)

[13:25] <nothingmuch> woo! boss OK'd vacation time for YAPC + hackathon

[13:32] <theorbtwo> Yey!

[13:34] <autrijus> yay!

[13:34] <autrijus> rejoices!

[13:34] <nothingmuch> now all i need is to book a flight

[13:34] <nothingmuch> or rather, for a flight to get booked for me

[13:35] <nothingmuch> s/for/get a/

[13:35] <theorbtwo> Get a flight booked for you?

[13:35] <nothingmuch> mom's travel agent

[13:35] <nothingmuch> she's pretty good

[13:35] <autrijus> cool

[14:24] *** Limbic_Region_ is now known as Limbic_Region

[15:14] * castaway looks for a func that says "$x is between 0 and $y"

[15:15] <castaway> (in p5 ,)

[15:16] <autrijus> define one?

[15:16] <castaway> bah

[15:16] <Limbic_Region> castaway - you mean something like 0 <= $x <= $y; 

[15:17] <Limbic_Region> or just between($x, 0, $y); ?

[15:17] <castaway> it needs to work both sides of zero

[15:18] <theorbtwo> sign($x)==sign($y) and abs($x)<abs($y)

[15:18] * Limbic_Region doesn't see why either of the two things he posted wouldn't work on both sides of zero

[15:18] <Limbic_Region> well - except perhaps because of the <= might want to be just <

[15:19] <theorbtwo> 0 <= -5 <= -50

[15:19] <Limbic_Region> theorbtwo - that would work by moving things around

[15:19] <Limbic_Region> so I guess what castaway is saying is that she doens't want to need to know the order

[15:19] <castaway> well between I've not heard of

[15:19] * Limbic_Region just invented it and was going to write it for you if that's what you wanted

[15:21] <castaway> right, but by moving things around, I need to write it twice, so yes, the 2nd makes more sense

[15:21] <castaway> s/I/I'd/

[15:21] <Limbic_Region> ok

[15:21] <castaway> anyway s/func/builtin func/

[15:22] * castaway can write it, otherwise

[15:24] <Limbic_Region> perlbot paste

[15:24] <perlbot> Paste your code and #perl will be able to view it: http://sial.org/pbot/perl http://dragon.cbi.tamucc.edu:8080 http://erxz.com/pb

[15:25] <pasteling> "Limbic_Region" at 69.250.48.119 pasted "between()" (9 lines, 192B) at http://sial.org/pbot/9414

[15:25] <Limbic_Region> only it has a typo

[15:25] <pasteling> "Limbic_Region" at 69.250.48.119 pasted "between()" (9 lines, 190B) at http://sial.org/pbot/9415

[15:25] <Limbic_Region> fixed

[15:26] * theorbtwo hmms.

[15:26] <theorbtwo> I'm not actually sure you want the test you're thinking about here.

[15:27] <Limbic_Region> well - then I must be assuming something that isn't correct

[15:28] <theorbtwo> No, I mean that I'm not sure in this context that between checking is sane.

[15:28] <theorbtwo> Mm, probably.

[15:28] <castaway> hmm?

[15:28] <theorbtwo> Probably is good to check in this case.

[15:28] <theorbtwo> Well, so long as they add up correctly, it's OK to make a positive and negitive pair.

[15:28] <theorbtwo> (And not just two positives or two negitives.)

[15:29] <Limbic_Region> for brevity, I like this better though 

[15:29] <Limbic_Region> sub between { return (sort {$a <=> $b } @_)[1] == $_[0] ? 1 : 0 }

[15:29] <castaway> eh?

[15:29] <castaway> you missed the shift there

[15:29] <Limbic_Region> no need to shift

[15:30] * castaway is confused

[15:30] <Limbic_Region> it sorts them in numerical order and checks to see if the first element passed is in the middle

[15:30] <theorbtwo> No need for the ? 1 : 0.

[15:30] <Limbic_Region> theorbtwo - that's correct - habit

[15:30] <castaway> between 1,0,3 -> 1 == 0 ?

[15:30] <Limbic_Region> no

[15:31] <castaway> you have a == in there

[15:31] <Limbic_Region> right

[15:31] <Limbic_Region> so it would be 0,1,3 -> 1 == 0

[15:31] <Limbic_Region> which is false

[15:31] <theorbtwo> between($a, $b, $c) checks if $a is between $b and $c.

[15:31] <Limbic_Region> it can be broken though if either end point is equal to the target

[15:32] <castaway> sneaky

[15:32] <Limbic_Region> which is why I didn't paste the brevity example

[15:32] <Limbic_Region> it is cool but easily broken - the longer version can still be broke but not as easily

[15:32] <Limbic_Region> non numerical arguments, not enough arguments, etc

[15:33] <theorbtwo> Nonnumerics should be treated as 0.

[15:33] <castaway> non numeric gives a 0, no

[15:33] <theorbtwo> It's the Perl Way.

[15:33] <Limbic_Region> my point being is it does error handle 

[15:34] <Limbic_Region> or rather, it only gives accurate results when it is passed 3 numeric args

[15:34] <theorbtwo> Hello, roie_m.

[15:34] * Limbic_Region wanders off to take Jean to church

[15:35] <roie_m> Hi, theorbtwo

[15:35] <theorbtwo> .oO(Church at 11:30?)

[16:03] * nothingmuch loaths methods that return refs when the structure need not be mutable

[16:13] <castaway> ?

[16:18] <Corion> re

[16:18] <autrijus> hey Corion

[16:19] <Corion> roie_m: Interesting - so in theory %a<\tfoo> # should simply work now. That means that autrijus has to work around it a bit.

[16:19] <Corion> hi autrijus :)

[16:19] * Corion returns from a day of fruitful motocycling

[16:19] <Corion> I guess I'll work on creating/fixing/un-todo-ing even more tests :)

[16:19] <autrijus> what should I work around what?

[16:20] <Corion> autrijus: If roie_m is correct about %a<foo> using the same code as <foo>, then %a<foo> will also always get a list, even if it's just one element.

[16:20] <Corion> I think that was what you said was tripping =<> up

[16:20] <Corion> (or =<foo>

[16:20] <Corion> )

[16:21] <autrijus> roie_m: huh? %a<foo> does not use the same code as <foo>

[16:21] <Corion> autrijus: I thought I saw something like that in the backlog ...

[16:21] * Corion goes looking again

[16:21] <autrijus> ruleHashSubscriptQW = do exp <- angleBracketLiteral return $ \x -> Syn "{}" [x, exp]

[16:21] <autrijus> so %a<foo> uses angleBracketLiteral

[16:22] <Corion> http://colabti.de/irclogger//irclogger_log/perl6?date=2005-04-17 - 9:17 - roie_m said (s)he was doing it now, so it might be done, or not.

[16:22] <autrijus> while it's qLiteral

[16:22] <autrijus> oh.

[16:22] <autrijus> so roie_m is working on that

[16:22] <autrijus> I'm fine, I can deal either way

[16:22] <autrijus> I do wonder however why we need to use a split

[16:22] <Corion> I might be confusing things anyway :)

[16:22] <autrijus> instead of calling words at haskell level

[16:23] <theorbtwo> .oO(Millions of peaches, peaches for free.)

[16:23] <Corion> autrijus: Dunno. I wouldn't use split() anyway, but either match on /(\S+)/g. I don't know if there is Unicode whitespace we need to be afraid of

[16:24] <Corion> Also, does Haskell words() properly ignore \r \t \n ?

[16:24] <theorbtwo> \S and \s should be unicode-aware.

[16:24] * Steve_p throws millions of peaches at theorbtwo

[16:24] <Corion> Err - yes, it does - it uses isWhite

[16:24] * theorbtwo Looks Out!

[16:24] <Corion> err - isSpace

[16:24] <autrijus> Corion: it does

[16:24] <Juerd> Every time I look here, there is some discussion about whitespace going on.

[16:24] <autrijus> and our isSpace is the special power UnicodeC one

[16:24] <autrijus> Juerd: because perl 6 is WhiteSpace SensiTive and we are not yet used to that

[16:25] <Corion> Juerd: I bring it up, again and again ;)

[16:25] <Juerd> Perl 5 is whitespace sensitive too, but less.

[16:25] <autrijus> perl5 does a good job hiding its whitespace sensitivity.

[16:25] <autrijus> hmm I discovered my old Language::Haskell on CPAN

[16:26] <autrijus> I should probably rename it to Language::Hugs

[16:26] <autrijus> to make room for Language::GHC

[16:27] <stevan> hey autrijus :)

[16:27] <Corion> autrijus: Language::Haskell::Hugs / Language::Haskell::GHC ?

[16:27] <Corion> Or, even worse, Language::Haskell::Haskell98::Hugs

[16:28] <autrijus> hey stevan. got time to do changelog? :)

[16:28] <Corion> :-)))

[16:28] * autrijus still plans on a release tomorrow or something

[16:28] <autrijus> would be tonight, but svn.openfoundry is out

[16:28] <stevan> autrijus: I have a little time right now,.. and more later this evening

[16:28] <stevan> so yes :)

[16:28] <autrijus> stevan: cool. mostly I think the multiple infinite loops in 6.2.0 warrants a point release

[16:28] <stevan> ok

[16:28] <autrijus> nice. if svn is back in 9 hours as it should, please commit away, else mail to p6c

[16:29] <autrijus> stevan++

[16:29] <autrijus> I think svn.perl.org has all the logs

[16:29] <stevan> BTW - did you see my bug reports in the log regarding sub parameters?

[16:29] <Corion> Heh. I should set up a cronjob that will commit my test fixes in 9 hours :))

[16:31] <autrijus> Corion: L::H::* is a good suggestion. I'll go from there

[16:31] <Corion> ...

[16:32] <autrijus> stevan: t/pugsbugs/code_blocks_as_sub_args.t  ?

[16:32] <Corion> autrijus: I'm usually quite bad with naming things, so you might want to listen to other suggestions :)

[16:32] <autrijus> stevan: is the test somewhere?

[16:32] <stevan> autrijus: yah I need to mail that to you

[16:32] <autrijus> do that (to p6c) then

[16:35] <Corion> Is there a peer-to-peer version of svn? Or is svk that? So we can easily/conveniently share the patches even if openfoundry is down?

[16:36] <Corion> (or is SEE our peer-to-peer cvs ? :) )

[16:36] <autrijus> svk is that.

[16:36] <stevan> autrijus: pugsbug sent

[16:37] * stevan needs to run after his kids bbiab

[16:37] <autrijus> k, thx

[16:37] <Corion> autrijus: Ah. So I'll have to look into getting svk to work on Win32. Or on Debian, and then how to access it from Win32. Later :)

[16:37] * Corion runs outside to find something to eat.

[16:37] <Corion> bbl

[16:37] * theorbtwo notes that svk is packaged for debian.

[16:38] <theorbtwo> Strange: src/Main.hs: unknown flags in  {-# OPTIONS #-} pragma: _GHC

[16:38] <theorbtwo> (I don't see any whitespace there...)

[16:38] <autrijus> theorbtwo: you are running it with ghc 6.2.

[16:38] <autrijus> don't do that :)

[16:39] * theorbtwo wonders how that happened.

[16:41] <roie_m> autrijus: It does on this side of the continent. I changed angleBracketLiteral to use qLiteral internals

[16:41] <autrijus> roie_m: I'd be happy if you can post that patch to p6c so I can apply it :)

[16:41] <roie_m> That way we get interpolation

[16:41] * theorbtwo wonders if .il and .tw count as the same continent.

[16:42] <autrijus> .tw is not continental at all :)

[16:42] <roie_m> I will, but I was wondering why you said that not having them use the same thing was  good thing this morning.

[16:42] <nothingmuch> theorbtwo: il is usually either asia or europe depending on who you aswk

[16:42] <nothingmuch> i think for DNS it's europe

[16:43] <autrijus> roie_m: it's just cxtOfExp in AST.hs

[16:43] <pjcj> .il won the eurovision song contest a few years back ;-)

[16:43] <roie_m> Corion: %a<\tfoo> shouldn't work in any case, because <> doesn't interpolate \t

[16:43] <autrijus> it needs to be fixed to correctly identify <foo> as a scalar

[16:43] <autrijus> i.e. same as {'foo'}

[16:43] <autrijus> not as {'foo',}

[16:43] <autrijus> as the naive implementation would suggest

[16:43] <autrijus> roie_m: I think Corion means a tab not a literal \t

[16:44] <roie_m> That makes sense

[16:44] <roie_m> but how can that be done in runtime?

[16:45] <autrijus> %h<<$foo>> when $foo is a scalar

[16:45] <roie_m> considering that <<$foo>> can interpolate to one word or many

[16:46] <autrijus> it is a good question that I have no answer to.

[16:46] <autrijus> I suspect we can count the element numbers.

[16:46] <autrijus> I further suspect you should raise it to p6l :)

[16:46] <autrijus> $h{'foo'} = want(); # Scalar

[16:47] <autrijus> $h{'foo',} = want(); # List

[16:47] <autrijus> $h<foo> = want(); # Scalar

[16:47] <autrijus> $h<foo bar> = want(); # List

[16:47] <autrijus> $h<<$foo>> = want(); # ???

[16:49] <roie_m> OK, I'm sending it off in a moment

[16:49] <nothingmuch> beh

[16:49] <nothingmuch> beat up friend #2 now has to put all the numbers in his new cell phone

[16:50] <nothingmuch> poor thing

[16:50] <theorbtwo> #2?

[16:50] <nothingmuch> they were 4 in the car

[16:50] <nothingmuch> one got out, got run over

[16:50] <nothingmuch> his girlfriend went out after him, and so did the driver and the other guy

[16:50] <nothingmuch> driver is #2

[16:50] <nothingmuch> he got beat up to

[16:50] <nothingmuch> o

[16:50] <theorbtwo> Ah.

[16:51] <nothingmuch> anyway, ride is here

[16:51] <nothingmuch> ciao everyone

[16:51] <autrijus> ciao

[16:51] <theorbtwo> Later!

[17:04] <stevan> do we have tests for negative indexing in Inf lists?

[17:05] <autrijus> what does that test test?

[17:05] <stevan> I am reading this thread (http://www.mail-archive.com/perl6-all@perl.org/msg39891.html) right now

[17:05] <stevan> because I wrote some tests for (0 .. Inf).pop() 

[17:06] <stevan> but they are discussing that

[17:07] <stevan> it tests insanity really :)

[17:08] <stevan> anyway back to chasing kids around... 

[17:08] <stevan> be back in a few hours

[17:09] <roie_m> autrijus: how do I generate diffs to post to p5c? "svn diff"?

[17:10] <autrijus> roie_m: svn diff -u

[17:12] * theorbtwo wonders why hs-plugins uses AltData instead of Data... it means that I can't implement a Typeable a => a -> Val without uglyness.

[17:12] <theorbtwo> (I think...)

[17:13] <theorbtwo> Hm, I may be able to do it inside of Embed.Haskell if I create another -boot file.

[17:13] <autrijus> that's fine with me.

[17:14] <autrijus> roie_m++ # working out lots and lots of corner cases

[17:15] <roie_m> what svn client are you using? mine doesn't like -u...

[17:15] <roie_m> thanks, I was afraid I was just being an ass with my questions

[17:15] <autrijus> er sorry, just "svn diff"

[17:15] <autrijus> roie_m: no, you are massively improving the s/n ratio of p6l.

[17:15] <roie_m> I use cvs at work too

[17:16] <autrijus> I'm using svk as the svn client, hence the confusion

[17:17] <roie_m> Oh. I thought diff -u was CVS syntax (that's probably where it came from)

[17:17] <autrijus> err. never mind me

[17:17] <autrijus> svk doesn't support diff -u as well.

[17:17] <autrijus> I was thinking in darcs terms.

[17:17] <autrijus> ETOOMANYVCS

[17:19] <clkao> orz

[17:20] <Ovid> Isn't the command to switch to a different subversion repository "svn switch http://svn.perl.org/perl6/pugs/trunk"?

[17:20] <autrijus> yes it is

[17:22] <Ovid> Is there any alternate syntax?  That keeps giving me an error, the last line of which is "svn: PROPFIND of '/pugs': could not connect to server (http://openfoundry.dyndns.org)"

[17:22] <autrijus> hm, mumble, no idea

[17:22] <autrijus> just do another svn co

[17:22] <autrijus> it will be fixed in 8 hours :)

[17:23] <autrijus> "svk switch" works, but I think "svn switch" need to connect to the old repo

[17:23] <Ovid> OK, doing the co now.  Thanks.

[17:24] <roie_m> autrijus: One last question before I send the patch: does this make sense?

[17:24] <roie_m> +cxtOfExp (Syn "cxt" (Val(VStr c):_)) = c

[17:25] <autrijus> roie_m: you are patching against an old tree... Syn "cxt" is now Cxt

[17:25] <roie_m> I couldn't really wrap my brain around AST.hs, and neither could anyone who was in the chatroom this morning (you were out to breakfast)

[17:25] <autrijus> and I've added that to cxtOfExp already

[17:26] <autrijus> cxtOfExp (Cxt cxt _) = cxt

[17:26] <autrijus> but send the patch anyway, I can merge

[17:26] <autrijus> (but, to answer your question, sure, it makes a lot of sense.)

[17:26] <roie_m> Oh, darn. I'll get the new version from the other repo, then.

[17:29] * Corion reappears with a somewhat filled stomach

[17:29] <autrijus> greetings Corion-san

[17:29] <theorbtwo> Allo, Corion.

[17:29] <Corion> autrijus: I just had a weird idea - maybe Benchmark.pm should be ported :)

[17:29] <Corion> ... so we can track progress :)

[17:30] <autrijus> makes sense :)

[17:30] <autrijus> and once chromatic ports over Test::Builder

[17:30] <autrijus> we can then work on Test::Harness :)

[17:38] <nothingmuch> evening

[17:38] <autrijus> yo

[17:39] * nothingmuch sits down and earns his YAPC

[17:43] <elmex> cats

[17:43] <nothingmuch> moose

[17:43] <nothingmuch> (meese?)

[17:44] <theorbtwo> mouse!

[17:50] <Corion> eek

[17:50] <theorbtwo> mousse?

[17:55] <castaway> yummy

[17:58] <theorbtwo> Allo, Corion_.  How's Corion doing?

[17:58] <Corion_> theorbtwo: I'm too lazy to ghost him

[18:00] * theorbtwo figured.

[18:00] <theorbtwo> But I'm bored and apparently in the mood to make bad jokes.

[18:01] <autrijus> so... journal up

[18:01] <autrijus> and I sleep. going back to @family tomorrow

[18:01] <castaway> night autrijus 

[18:01] <theorbtwo> G'night.

[18:01] <theorbtwo> See you tommorow (or the day after?)

[18:03] <autrijus> tomorrow I think

[18:03] * autrijus waves &

[18:30] <elmex> *grmbl*

[18:35] <elmex> i love bugs...without bugs the life would be so boring

[18:37] <castaway> indeed

[18:40] <Corion_> Huh ? splice() doesn't exist yet? Weird ! :)

[18:59] <Corion_> Hmmm. To implement splice(), I will need to write the four incarnations of splice, correct ? The op1, op2, op3 and op4 (for the one through 4 arg versions, as defined by perldoc -f splice) ?

[18:59] <Corion_> ... of which the splice1 version is the easiest :)

[19:00] <Corion_> ... and Perl5 doesn't even test for is( (splice @a), [], "single-arg splice() works")

[19:01] <Corion_> ... not that the one-arg form of splice makes sense IMO.

[19:07] <Corion_> gaal: You've been implementing some internals, correct? Is it possible to have the same builtin as an op1 and an op2 ? I'm looking at implementing the four forms of splice()

[19:18] *** Corion_ is now known as Corion

[19:23] <gaal> whoops, sorry was away

[19:23] <gaal> i don't think you can do that, you need to use the ? syntax and then handle the different forms in once place

[19:23] <gaal> not sure, but that's the code i did see.

[19:25] <gaal> take a look at op2 "exp" as an example

[19:38] <Corion> gaal: np ;) I went with the op4 thing. It doesn't work, but I'll nopaste my code for the lambdawizards to correct ;)

[19:38] <gaal> if i understand things correctly, you should be able to check each value with defined.

[19:39] <gaal> see substr, that's 4-op too

[19:40] <gaal> there's a chance you need some extra code in the parser too? i dunno

[19:40] <gaal> probably nor sice the op is defined "pre".

[19:40] <gaal> (the op==substr)

[19:43] <theorbtwo> You probably will have to do something odd if you want to implement the lvalue style.

[19:43] <gaal> oh, right, there's that too.

[19:43] <gaal> but substr should be a good model for that.

[19:44] <theorbtwo> Aye.

[19:44] <pasteling> "Corion" at 217.234.103.30 pasted "Rough, nonworking implementation of splice()" (56 lines, 2.2K) at http://sial.org/pbot/9423

[19:45] <theorbtwo> And the perldoc -f is confusing, anyway.

[19:45] <theorbtwo> There is /always/ a replacement list, and the replacement is always done.

[19:45] <theorbtwo> If you don't specify anything there, it's an empty list.

[19:45] <Corion> substr() seems to be quite what I want, at least I modeled the code after it. It doesn't work, but that's about it.

[19:45] <theorbtwo> Of course, that may not hold in p6...

[19:45] <Corion> theorbtwo: True, at least that's how I set my defaults.

[19:45] <Corion> theorbtwo: Well, as we currently define Perl6, that's up to the implementation ;))

[19:46] <Corion> I'm getting lost in all the monads, I guess. But I'm too hazy/tired to understand it at the moment, so I punt, and come back to it tomorrow, with a fresh mind.

[19:47] <Corion> theorbtwo: And while I see you, Tanktalus has asked to get access to the pmdev server - can you add him to the user group? I guess he doesn't even have an account there %-)

[19:48] <Corion> (he's already pmdev on pm)

[19:51] <gaal> Corion, what's the signature (at the bottom of Prim)?

[19:52] <Corion> gaal: No signature yet - I wanted to add that as soon as I get to compiling it :)

[19:52] <gaal> ah :)

[19:52] <Corion> gaal: Baby steps ;)

[19:53] <theorbtwo> All done, Corion, and the pass /msg'd.

[19:53] <gaal> 'let (pre,rest) = splitAt start arr' makes things better.

[19:54] <Corion> yay theorbtwo!

[19:54] <gaal> working on the next problem

[19:54] <Corion> gaal: Gah! let ... not <- ... some day, I'll learn the difference ... <- is for monads, right?

[19:54] <gaal> yes

[19:54] <gaal> what do you want to doArray?

[19:54] <theorbtwo> Use <- when the thing being assigned has a Monad m => m a type.

[19:54] <theorbtwo> Use = when it doesn't.

[19:55] <Corion> gaal: Now it compiles for me, yay! :)

[19:55] <gaal> 'result <- doArray res' doesn't compile for me

[19:55] <theorbtwo> (I think...)

[19:55] <Corion> gaal: I thought that doArray would be the equivalent to doString, but I didn't look if there _is_ a doArray :)

[19:55] <gaal> there is, yes, but it has a different signature

[19:55] <Corion> ... I assume that doArray packs a Haskell array into a Pugs array.

[19:56] <Corion> Hmmm. No wonder it compiles for me. I commented the whole block out :)))

[19:56] <gaal> :)

[19:56] <Corion> Yeah - now I see the type conflict as well :)

[19:56] <gaal> where do you see doString?

[19:56] <gaal> (i don't see it)

[19:57] <Corion> gaal: I found it in substr, I think

[19:57] <gaal> that's doSubstr :)

[19:57] <Corion> Ah, no, that was doSubstr, which is defined directly below it

[19:57] <gaal> not below, in

[19:57] <gaal> it's a local funtion.

[19:57] <gaal> what are you trying to do in that line?

[19:58] <Corion> gaal: I try to cast res into a VList / VArray... But now I see that doArray is used to perform Haskell array modifications, and not container conversion

[19:59] <gaal> I think that's just VList res

[19:59] <Corion> ah. let result = VList res works

[19:59] <Corion> gaal: Yes :)

[20:00] <Corion> Now I just need to get to grips with VRef vs. the real array ...

[20:00] <gaal> so you can just return $ VList res

[20:00] <Corion> (as writeRef seems to want a VRef and not an array, understandably)

[20:00] <Corion> gaal: Yep

[20:00] <Corion> But I wonder how I do the inplace modification of the original array ...

[20:10] <castaway> 4/away bed

[20:10] <Corion> 4 ? I thought you were two ...

[20:11] <clkao> i/win	24

[20:12] <Corion> gaal: Yay! Now my splice() at least returns something (not the final result yet).

[20:12] <gaal> how did you solve the writeRef thing? I'm still playing with it.

[20:13] <Corion> gaal: I commented that part out, to see if the result itself works (and that seems to work)

[20:13] <gaal> it should... just no rw

[20:14] <gaal> actually, that's committable stuff

[20:14] <Corion> gaal: I would commit, if svn was up ;)

[20:15] <gaal> ah, right, there's that :(

[20:15] <Corion> Hmm - no, seems like some index is wrong, as it doesn't completely work yet

[20:15] <Corion> gaal: I'll nopaste my current incarnation

[20:16] <gaal> weird, when i try that code i get three wartnings about unused vars, plus an error wi th no message.

[20:16] <pasteling> "Corion" at 217.234.103.30 pasted "Updated splice() code, no-side-effects version" (26 lines, 973B) at http://sial.org/pbot/9426

[20:17] <Corion> gaal: Yep, I commented the unused stuff out. See the nopaste

[20:17] <Corion> but according to t/builtins/arrays/splice.t, it returns "green blue" where "blue" is expected. Let's look if the test is wrong, maybe :)

[20:18] <Corion> Hah. The test is wrong. :))

[20:18] <gaal> :)

[20:18] <Corion> Ah. No. The test is not wrong. The idea is that in scalar context, splice() returns the last element spliced.

[20:18] <Corion> Bah.

[20:18] <gaal> i need to go do some other stuff now - good luck :)

[20:19] <Corion> gaal: np - have fun! And thanks for your help!

[20:19] <Corion> Bah. The other tests all rely on the previous test succeeding. That's really ugly. I'll write my own second set of tests into the file.

[20:19] <gaal> sure!

[20:23] <Corion> Hmmm... Something more for the pixies - I get an "unimplemented 3ary op splice()", even though I've declared splice() as 4ary op with 3 optional arguments, just like substr.

[20:57] <Corion> good night!

