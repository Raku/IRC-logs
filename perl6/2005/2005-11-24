[00:11] *** wolv is now known as wolverian

[00:20] *** _meppl is now known as meppl

[02:05] <svnbot6> r8003 | fglock++ | * /docs/notes/laziness.txt - got Array/List difference

[02:05] <svnbot6> r8003 | fglock++ |   sorted out, I think

[02:29] <svnbot6> r8004 | fglock++ | * /docs/notes/laziness.txt - correction on the example

[02:29] <svnbot6> r8004 | fglock++ |   of what a flattened List looks like (a Lazy Array slice

[02:29] <svnbot6> r8004 | fglock++ |   has a Generator that generates bounded Scalars)

[06:30] <geoffb> autrijus, I know you're tanking, but what are you tanking *about*?

[08:17] <nothingmuch> seen luqui?

[08:17] <jabbot> nothingmuch: luqui was seen 2 days 16 hours 1 minutes 16 seconds ago

[08:28] <luqui> hello

[08:28] <lisppaste3> devin pasted "Why does my Pugs build fail?" at http://paste.lisp.org/display/13960

[08:29] * luqui dunnos

[08:30] <luqui> nothingmuch, thanks, I've bookmarked the article

[08:31] <luqui> I'll get to it after my latest experiment *maniacal laugh*

[08:39] *** integral_ is now known as integral

[08:39] *** integral is now known as integral_

[08:40] *** integral_ is now known as integral

[08:56] <nothingmuch> =)

[08:56] <nothingmuch> btw, ragdoll kung fu rocks

[08:56] <nothingmuch> thanks

[09:01] <nothingmuch> luqui: ping

[09:01] <luqui> pong

[09:01] <nothingmuch> rdkf rucks

[09:01] <nothingmuch> rock

[09:01] <nothingmuch> s

[09:01] <nothingmuch> err..

[09:01] <luqui> haha, "rucks", can't decide?

[09:01] <nothingmuch> you said you were expecting it

[09:01] <nothingmuch> it was out when you said that, methinks

[09:01] <luqui> well, I didn't have a PC at that point, I think

[09:02] <nothingmuch> ah

[09:02] <nothingmuch> anyway, thanks for the great reccomendation

[09:02] * nothingmuch has been playing on computers at friends houses & work

[09:02] <luqui> sure.  I bought it too, and I've played it a little, but haven't had time to really explore it

[09:12] *** integral is now known as integral_

[09:14] *** integral_ is now known as integral

[09:40] <nothingmuch> gaal: ping

[13:16] <luqui> hooray, my type inferencer is working!

[13:16] <luqui> it does factorial correctly

[13:38] <nothingmuch> luqui: share

[13:44] <luqui> http://svn.luqui.org/svn/misc/luke/work/code/haskell/typist

[13:45] <luqui> working on polymorphism, so you can have if Bool Int Int and if Bool Bool Bool in the same program :-/

[13:46] <svnbot6> r8002 | iblech++ | Finished the svn mv lazyness.txt laziness.txt fglock++ begun.

[13:46] <svnbot6> r8003 | fglock++ | * /docs/notes/laziness.txt - got Array/List difference

[13:46] <svnbot6> r8003 | fglock++ |   sorted out, I think

[13:46] <svnbot6> r8004 | fglock++ | * /docs/notes/laziness.txt - correction on the example

[13:46] <svnbot6> r8004 | fglock++ |   of what a flattened List looks like (a Lazy Array slice

[13:46] <svnbot6> r8004 | fglock++ |   has a Generator that generates bounded Scalars)

[13:53] <gaal> nothingmuch: pong

[13:53] <nothingmuch> gaal: i had a hackathonian question, buyt forgot it

[13:55] <gaal> oaky

[13:55] * gaal rolls his eyes at c and praises glib/gtk

[13:59] <masak> ?eval { say; say } (0..4)

[13:59] *** evalbot_8000 is now known as evalbot_8004

[13:59] <evalbot_8004> OUTPUT[  ] bool::true 

[14:00] <masak> this should be a syntax error according to $larry

[14:00] <masak> how do i write a test for something that should be a syntax error? :)

[14:17] <xunxin> seen autrijus 

[14:17] <jabbot> xunxin: autrijus was seen 1 days 1 hours 23 minutes 10 seconds ago

[14:17] <xunxin> seen autrijus

[14:17] <jabbot> xunxin: autrijus was seen 1 days 1 hours 23 minutes 49 seconds ago

[14:18] <xunxin> ?eval 1+2+3;

[14:18] <evalbot_8004> 6 

[14:18] <xunxin> ?eval "hello,world".say 

[14:18] <evalbot_8004> OUTPUT[hello,world ] bool::true 

[14:19] <xunxin> say "hello"

[14:20] <luqui> hello

[14:20] <xunxin> say "nihao\n"

[14:20] <luqui> nihao\n

[14:21] <luqui> :-)

[14:21] <luqui> did you mean to say ?eval

[14:22] <xunxin> o , I only test 

[14:31] <gaal> masak: put it in a stringy eval and check $!

[14:47] <Su-Shee> Hi.

[14:48] <luqui> hi

[15:09] <masak> ?eval my $a = 5; given $a { when $_ < 4 { say "lower than four" } }

[15:09] <evalbot_8004> undef 

[15:09] <masak> ?eval my $a = 5; given $a { when $_ < 4 { say "lower than four" }  default { say "higher than or equal to four" } }

[15:09] <evalbot_8004> OUTPUT[higher than or equal to four ] bool::true 

[15:09] <masak> this seems wrong to me

[15:10] <dada> why?

[15:10] <masak> oh, sorry. bad example :)

[15:10] <masak> maybe i'm just confused

[15:10] * masak goes back to testing

[15:10] <dada> ?eval my $a = 3; given $a { when $_ < 4 { say "lower than four" }  default { say "higher than or equal to four" } }

[15:10] <evalbot_8004> OUTPUT[higher than or equal to four ] bool::true 

[15:10] <dada> mmm

[15:11] <dada> _this_ seems wrong

[15:11] <masak> ?eval my $a = 24; given $a { when $_ < 30 { say "lower than thirty" } }

[15:11] <evalbot_8004> undef 

[15:11] <masak> this too

[15:14] <luqui> yeah, that seems pretty wrong

[15:14] <luqui> ?eval my $a = 24;  given $a { say $_;  when $_ < 30 { say "lower than thirty" } }

[15:14] <evalbot_8004> OUTPUT[24 ] undef 

[15:14] <luqui> ?eval my $a = 24;  given $a { say ($_ < 30);  when $_ < 30 { say "lower than thirty" } }

[15:14] <evalbot_8004> OUTPUT[1 ] undef 

[15:15] <luqui> ?eval my $a = 24;  given $a { when ({$_ < 30}) { say "lower than thirty" } }

[15:15] <evalbot_8004> OUTPUT[lower than thirty ] bool::true 

[15:15] <luqui> oh, come to think of it, that might actually be correct

[15:15] <luqui> 24 != True, IIRC

[15:16] <luqui> You could make True a pattern that always returns True, but then you lose: given $a { when True {...} when False {...} }

[15:16] <luqui> but maybe that's a worthwhile trade-off

[15:22] <masak> luqui: so ordinary comparisons have to be surrounded by ({ ... })?

[15:23] <luqui> yeah

[15:23] <luqui> except...

[15:23] <luqui> ?eval my $a = 24;  given $a { when ({$^x < 30}) { say "lower than thirty" } }

[15:23] <evalbot_8004> OUTPUT[lower than thirty ] bool::true 

[15:23] <luqui> ?eval my $a = 24;  given $a { when ({$^x < 20}) { say "lower than thirty" } }

[15:23] <evalbot_8004> undef 

[15:24] <luqui> yeah, you're actually defining an anonymous predicate sub

[15:24] <luqui> and then testing $sub($_)

[15:25] <masak> yikes

[15:56] <pmurias> ?eval my $a = 24;given $a { if $ < 30 {say "lower than thirty"} }

[15:56] <evalbot_8004> Error:  unexpected "{" expecting operator, ":", ",", term postfix, postfix conditional, postfix loop, postfix iteration, ";" or end of input reserved word 

[15:56] <pmurias> ?eval my $a = 24;given $a { if $_ < 30 { say "lower than thirty"} }

[15:56] <evalbot_8004> OUTPUT[lower than thirty ] bool::true 

[15:57] <luqui> is the nly thingyou changed that space after the brace?

[15:57] <luqui> woah, what happened to my fingers while I was typing that?

[15:57] <luqui> that shouldn't be a syntax error

[15:57] <luqui> ?eval if 1 {say "hi"}

[15:58] <evalbot_8004> OUTPUT[hi ] bool::true 

[15:58] <luqui> oh, no, you missed the _ in $_

[15:58] <luqui> good

[16:05] <pmurias> ?eval my $a = 24;given $a { when {$^x < 30} { say "lower than thirty"} }

[16:05] <evalbot_8004> Error: No compatible subroutine found: "&when" 

[16:09] <pmurias> ?eval my $a = 24;given $a { when sub {$^x < 30} { say "lower than thirty"} }

[16:09] <evalbot_8004> Error: No compatible subroutine found: "&when" 

[16:33] <vkon> $?PUGS_VERSION

[16:33] <vkon> ?$?PUGS_VERSION

[16:34] <vkon> :?$?PUGS_VERSION

[16:34] <svnbot6> r8005 | vkon++ | make Pugs compilable with latest GHC as well (starting from november2005 they give an error 'No context is allowed on a GADT-style data declaration')

[16:35] <vkon> well, go read eval bot documentation...

[16:35] <integral> ?eval $?PUGS_VERSION

[16:35] <evalbot_8004> \"Perl6 User\'s Golfing System, version 6.2.10, October 10, 2005 (r8004)" 

[16:35] <integral> but there's a slight clue in the bot's name now :)

[16:36] <vkon> thanks!

[16:42] <masak> speaking of which, what remains until pugs 6.28 ships?

[16:57] <Su-Shee> Wie kann mich der Client offline anzeigen, wenn mich der Client online anzeigt?

[16:57] <Su-Shee> Ich hasse gaim.

[17:01] <vkon> ni men hao! wo men yi qi bian cheng ba!

[17:04] <Su-Shee> vkon: wo hao. ;)

[17:05] <Su-Shee> vkon: sorry, just wrong window. 

[17:06] <vkon> Su-Shee: good... I only understand very-very basics of Chinese, as now I am watching educational program on CCTV9 :):)

[17:11] <Su-Shee> vkon: Me too, but I find it incredible interesting. But I have no time. :/

[17:18] <vkon> Su-Shee: I happen to convert video lessons to pocketPC compatible format and watching AVIs while at traffic jams, or while waiting for something... 

[17:19] <vkon> Su-Shee: can freely share; see for example http://vkonovalov.ru/chinese-related/2x-25mar-goodshopping.avi (not the best their lesson, but I have plenty of them :)

[17:42] <luqui> "colored type inference" is quite powerful, now that I've had the time to mull over it

[17:43] <integral> that's the one where colour marks the direction the info is propagating in?

[17:43] <luqui> yeah

[17:43] <luqui> because that's the biggest trouble with subtyping: you don't know which subtype (or supertype) to pick for your variables

[17:44] <luqui> so it makes that illegal in the type system, which is cool :-)

[17:45] <integral> so it tells you when you should be narrowing the type, and when you should be widening it.   So: $a := Foo.new; would narrow $a's type to Foo,  but f(5), f("foo") would make f's type something like (Int|Str) -> (forall a. a)

[17:47] <luqui> hmm... that union type thingy is difficult

[17:47] <luqui> no, variables in the context (like f here, apparently) are always synthesized

[17:47] <luqui> so you wouldn't be inferring f's type

[17:47] <luqui> you'd only be checking that 5 and "foo" are subtypes of whatever f's argument was, not constructing the argument type

[17:48] <luqui> however, in the face of lambda, I'm not sure how that works

[17:48] <integral> is that because we're not doing whole program analysis?

[17:48] <integral> surely there you'd want to work out the glb of f's type so you can optimise it appropiately?

[17:48] <luqui> probably.  okay, it needs more mulling :-)

[17:49] <luqui> you mean the lub?

[17:49] <luqui> no, wait

[17:49] <integral> probably, I'm not sure of the direction :)

[17:49] <luqui> covariant

[17:49] <luqui> damnit

[17:49] <luqui> thinking is hard

[17:49] <luqui> :-)

[17:49] <luqui> *arguments* are contravariant, *returns* and variables are covariant

[17:50] <luqui> I recently had to switch those two in my head

[19:01] <svnbot6> r8006 | autrijus++ | * Pugs.Lexer - finish refactoring into maybeVerbatimBrackets.

[19:45] *** GeJ_ is now known as GeJ

[19:56] * Aankhen`` goes to sleep.

[19:57] <Aankhen``> G'night.

[21:08] *** Lopo_ is now known as Lopo

[21:44] <pmurias> why does pugs use a custom version of parsec?

[21:50] <nothingmuch> http://lambda-the-ultimate.org/node/view/1134

[21:50] <nothingmuch> make that: "luqui: http://lambda-the-ultimate.org/node/view/1134"

