[04:48] <geoffb> OK, there's something just disturbing about no traffic on this channel for hours on end.

[04:49] <autrijus_> indeed.

[04:49] <geoffb> One comment from clkao in the last 7+ hours

[04:49] * autrijus_ just woke up

[04:49] <geoffb> Didn't expect you to be around, autrijus_ !

[04:49] <geoffb> Ah, early there then.

[04:49] <autrijus_> quite. before 7am

[04:50] <geoffb> Get to see the dawn today?

[04:50] <autrijus_> no, not a chance :)

[04:50] <autrijus_> although it's alraedy daylight saving time

[04:50] *** autrijus_ is now known as autrijus

[04:51] <autrijus> but anyway. today's the hard deadline of hw2005

[04:51] <autrijus> which means I better write down the pugs->parrot compilation strategy we discussed yesterday

[04:52] <geoffb> So earlier this week (before family came to visit), I went to write some tests for pugs . . . but I couldn't get them to work because of Test limitations . . . and I couldn't work around those because of pugs bugs . . . and recurse.

[04:52] <geoffb> So I was wondering -- does pugs still need exhaustive tests of the "simple stuff", like space handling in expressions and compliance with Perl 6 invariances, and so on?

[04:52] <autrijus> which Test limitations?

[04:53] <autrijus> yes, definitely so

[04:53] <geoffb> As I recall, I wanted fails_ok to take a string, or somesuch . . . don't recall for sure.

[04:53] <geoffb> I figured rather than writing tests for bleeding edge stuff, perhaps my time would be better spent fleshing out the basic test core.

[04:54] <autrijus> yes.

[04:54] <autrijus> that'd be much appreciated.

[04:55] <geoffb> OK, after family leaves (Sunday), I'll try to scrape together my tuits in that direction.

[04:56] <autrijus> danke.

[04:56] <geoffb> de rien

[04:57] <geoffb> good luck with hw2005, it's pretty good so far.

[04:58] <autrijus> glad to hear that. :))

[05:02] <Khisanth> hrm

[05:02] <autrijus> hey Khisanth 

[05:02] <autrijus> I'll brb -- shower &

[05:05] <geoffb> So the rumors of autrijus ircing in the shower appear to be false . . . .

[05:05] <geoffb> or maybe he just lurks, with the laptop right outside the curtain.

[05:09] <autrijus> yup.

[05:09] <autrijus> that's usually the case.

[05:09] <autrijus> to avoid damaging the keyboard I usually type with a toothbrush or so.

[05:10] <geoffb> LOL

[05:10] <crysflame> oof

[05:10] <crysflame> chopsticks are great for that i hear

[05:11] <autrijus> hey lightstep, crysflame.

[05:11] <lightstep> hoy

[05:14] <geoffb> autrijus, a couple days ago I managed to produce a few lines that would work correctly if saved to a file, but would error if pasted into pugs interactive mode.  Is there a difference between the parsing in those two cases?  If so, why?

[05:15] <geoffb> For reference, the four lines are:

[05:15] <geoffb> #!/usr/bin/pugs

[05:15] <geoffb> use File::Basename--perl5;

[05:15] <geoffb> our &basename := File::Basename.can('basename');

[05:15] <geoffb> say basename('/this/is/a.test');

[05:21] <autrijus> the interactive mode's idea of continuity between lines is flawed.

[05:22] <autrijus> in this case I think it's the class cache -- try ::File::Basename.can('basename'); ?

[05:22] <autrijus> (btw, nice use of .can)

[05:22] <autrijus> can you help updating examples/perl5/cpan-upload.p6 to reflect this infinitely better style? :)

[05:26] <geoffb> 1) ah.  2) will try.  3) thanks, you suggested it. :-)  4) Will do.

[05:28] <geoffb> ::File::Basename.can('basename') no workie.

[05:28] <geoffb> (either in a file, or in interactive mode)

[05:33] <geoffb> What is this workaround for:

[05:33] <geoffb> my &POST := eval_perl5 'sub { my $url = shift; &HTTP::Request::Common::POST($url, {@_}) }';

[05:34] <geoffb> Why not just call POST with ($url, $hashref) directly?

[05:41] <geoffb> OK, is it supposed to be the case that when you dereference an array ref with {'string'}, it treats the array as a hash with alternating odd and even being key and value?

[05:41] <geoffb> If not, cpan-upload.p6 is just wrong

[05:42] <geoffb> er, at line 258

[05:49] <geoffb> OK, assuming I'm right, and just committing what I think was meant by the screwy lines in cpan-upload.p6

[05:49] <svnbot6> r4524, geoffb++ | cpan-upload.p6: clean up perl5 import workaround syntax; clean up ugliness with hashref arg to POST

[05:49] <geoffb> afk

[05:49] <autrijus> you're right. thanks :)

[05:58] <gaal> please review: Prelude bypass strategy

[05:58] <gaal> sometimes we want to load pugs faster, bypassing the Prelude. (or sometimes in development we break the prelude and want to wait before fixing it) 

[05:58] <gaal> to tell pugs not to call initPrelude, set PUGS_BYPASS_PRELUDE in the environment to a true value.

[05:58] <gaal> to load an alternate Prelude, do that and specify -MPrelude on the command line, it will be loaded like a regular module via @*INC

[05:59] <gaal> what think? 

[05:59] <autrijus> worksforme.

[05:59] <gaal> btw, initPrelude is confused about Pos when the prelude breaks, citing ludicrous coordinates

[06:00] <gaal> good, i'll add that then

[06:00] <gaal> though i wonder if it isn't getting good time to organize all our env vars together :)

[06:02] <autrijus> we can start documenting it at least

[06:02] <autrijus> in the form of pugsrun.pod and friends

[06:02] <autrijus> or is it pugs::run?

[06:03] <gaal> many of them are only for development now (controllign smoke tests, there are at least three or four)

[06:04] <autrijus> sure, but getting it documented is still nice

[06:04] <gaal> okay, will start that.

[06:05] <autrijus> 'kay. I think lib/pugs/run.pod is an okay place

[06:05] <autrijus> better suggestions welcome too

[06:05] <gaal> i'll start there. svn++; # 'mv'

[06:09] <gaal> ooh, the hash interface from haskell is... interesting :)

[06:10] <gaal> you generate a getter per hash, right?

[06:13] <geoffb> bak

[06:13] <autrijus> gaal: a getter per hash?

[06:14] <autrijus> each hash as an associated implementation object

[06:14] <gaal> autrijus, i see code like fetch <- doHash somehash hash_fetchVal

[06:14] <gaal> and then you apply fetch with a key

[06:14] <autrijus> oh. right. that's because hash_fetchVal is polymorphic over the hash type

[06:15] <autrijus> all you know is that somehash is a Val

[06:15] <autrijus> but it may be a VRef to a VHash

[06:15] <autrijus> or a PerlSV

[06:15] <autrijus> or a VMatch

[06:15] <autrijus> or something else entirely

[06:15] <autrijus> so doHash is used to unpack the Val via typecasing

[06:16] <gaal> i'm happy i chose to use the hash and not peek in the environment myself :)

[06:16] <autrijus> (well, not really typecasing)

[06:16] <gaal> wouldn't have learned all this if i did it the hacky way :)

[06:16] <autrijus> true :)

[06:17] <autrijus> yay, other people are up. I'll bbiab, breakfast etc

[06:18] <gaal> bon breakfast

[06:19] <gaal> beh, Run.hs doesn't have findVar and i'm not sure i want to add a dep there

[06:19] <gaal> i'll figure something out :)

[06:29] <autrijus> :)

[06:30] <gaal> what i figured was that i needed readVar :)

[06:44] <geoffb> bed time, g'night

[06:44] <gaal> night geoffb

[06:47] <gaal> I have a Val and want to force it to a VBool. how?

[06:48] <gaal> by Prim's "?" and "!" it looks like VBool var should have done the trick, but i get type errors with that.

[06:48] <Aankhen``> Shout at it till its spirit is crushed and it obeys all your commands?

[06:50] <gaal> tempting :) but no

[06:50] <Aankhen``> :-(

[07:05] <scook0> gaal: tried 'VBool (vCast var)'?

[07:07] <gaal> not yet - but looking around at other aspects of this problem, i realized that since i needed to unsafePerformIO anyway, i might as well skip the hash interface and getEnv directly :/

[07:07] <gaal> it was fun while it lasted :)

[07:13] * gaal praises GHC's pragma syntax that urges locality

[07:31] <svnbot6> r4525, gaal++ | allow bypassing Standard Prelude when PUGS_BYPASS_PRELUDE is set in the environment

[07:31] <svnbot6> r4525, gaal++ | to load an alternate Prelude.pm (from @*INC), use -MPrelude explicitly

[07:49] <svnbot6> r4526, autrijus++ | * hw2005 - Embedding Haskell.

[07:59] <svnbot6> r4527, autrijus++ | * hw2005.txt - minor fixes

[08:10] <Aankhen``> ?eval "foo".ref

[08:10] <evalbot6> ::Str 

[08:11] <Aankhen``> ?eval "foo".ref.new()

[08:11] <evalbot6> {obj:Str} 

[08:11] <Aankhen``> ?eval "foo".ref.new("bar")

[08:11] <evalbot6> {obj:Str} 

[08:11] <Aankhen``> ?eval ~("foo".ref.new("bar"))

[08:11] <evalbot6> '<obj:Str>' 

[08:11] <Aankhen``> ?eval class Foo { ... } my $foo = Foo.new(); $foo

[08:11] <evalbot6> *** ... - not yet implemented     at <eval> line 1, column 13-17 

[08:12] <Aankhen``> ?eval class Foo {  } my $foo = Foo.new(); $foo

[08:12] <evalbot6> \{obj:Foo} 

[08:12] <Aankhen``> ?eval class Foo {  } my $foo = Foo.new(); $foo; $foo.ref.new();

[08:12] <evalbot6> {obj:Foo} 

[08:13] <Aankhen``> ?eval class Foo {  } my $foo = Foo.new(); $foo; my $bar = $foo.ref.new();

[08:13] <evalbot6> \{obj:Foo} 

[08:19] <Aankhen``> Yeesh.

[08:19] <svnbot6> r4528, Aankhen++ | * bumped up version number for URI::Escape.

[08:19] <svnbot6> r4529, Aankhen++ | * URI::Escape now uses the C<module { ... }> form.  iblech++

[08:20] <Aankhen``> mod_perl2's tests take less time than Pugs's tests. :-P

[08:23] <crysflame> heh

[08:25] <svnbot6> r4530, gaal++ | pugs::run documentation

[08:28] <Aankhen``> ?eval 0 but true

[08:28] <evalbot6> Error:  unexpected end of input expecting term 

[08:28] <Aankhen``> ?eval true

[08:28] <evalbot6> Error:  unexpected end of input expecting term 

[08:28] <Aankhen``> Shouldn't C<true> and C<false> be automatically imported so that stuff like C<0 but true> can be used?

[08:28] <Aankhen``> (instead of, say, C<0 but bool::true>)

[08:33] <gaal> ?eval 0 but bool::true

[08:33] <evalbot6> Error: Unknown syntactic construct: Syn "but" [Val (VInt 0),App (Var "&bool::true") Nothing []] 

[08:33] <gaal> heh.

[08:33] <Aankhen``> ?eval 0 is true

[08:33] <evalbot6> Error:  unexpected end of input expecting term 

[08:33] <Aankhen``> ?eval 0 is bool::true

[08:33] <evalbot6> undef 

[08:33] <Aankhen``> ?eval 0 is true

[08:33] <evalbot6> Error:  unexpected end of input expecting term 

[08:33] <Aankhen``> :-\

[08:34] <gaal> ?eval (0 is bool::true) ?? "true" :: "false"

[08:34] <evalbot6> 'false' 

[08:34] <gaal> i think this language feature isn't really implemented yet ;-)

[08:35] <Aankhen``> Yea, but it wouldn't hurt to have C<true> and C<false>. :-)

[08:36] <gaal> i'll add them to the prelude

[08:36] <gaal> but my working copy is not intentionally broken

[08:37] <gaal> so remind me later :)

[08:37] <Aankhen``> Heh, okay.

[08:37] <Aankhen``> gaal++

[08:37] <gaal> "now" intentionally broken

[08:37] <gaal> now "intentionally" broken

[08:37] <gaal> now intentionally "broken"

[08:37] <gaal> ah, scare quotes.

[08:38] <Aankhen``> ?eval sub foo () { 42 }; &bar ::= &foo; bar();

[08:38] <evalbot6> Error: Undeclared variable: "&bar" 

[08:38] <Aankhen``> ?eval sub foo () { 42 }; my &bar ::= &foo; bar();

[08:38] <evalbot6> 42 

[08:38] <Aankhen``> ?eval sub foo () { 42 }; our &bar ::= &foo; bar();

[08:38] <evalbot6> 42 

[08:39] <Aankhen``> ?eval module Foo { sub foo () { 42 }; our &bar ::= &foo; }; Foo::bar();

[08:39] <evalbot6> Error: No compatible subroutine found: "&Foo::bar" 

[08:39] <Aankhen``> ?eval module Foo { sub foo () { 42 }; our &bar ::= &foo; }; Foo;

[08:39] <evalbot6> \{obj:Class} 

[08:39] <Aankhen``> ?eval module Foo { sub foo () { 42 }; our &bar ::= &foo; }; ::Foo;

[08:39] <evalbot6> \{obj:Class} 

[08:39] <Aankhen``> ?eval module Foo { sub foo () { 42 }; our &bar ::= &foo; }; ::Foo::bar;

[08:39] <evalbot6> ::Foo::bar 

[08:39] <Aankhen``> ?eval module Foo { sub foo () { 42 }; our &bar ::= &foo; }; ::Foo::bar();

[08:39] <evalbot6> pugs: cannot cast from VType (mkType "Foo::bar") to Pugs.AST.Internals.VCode 

[08:39] <Aankhen``> o_O

[08:39] <Aankhen``> BBIAB.

[08:44] <gaal> another => bug:

[08:44] <gaal> ?eval my %h = ( sub => <yellow> )

[08:44] <evalbot6> Error:  unexpected "=" expecting subroutine parameters or block 

[08:45] <gaal> ?eval my %h = ( <sub> => <yellow> )

[08:45] <evalbot6> {('sub' => 'yellow')} 

[08:45] <gaal> at least, i think it's a bug?

[08:45] <gaal> brb

[09:00] <Aankhen``> ?eval my %h = { sub => [<yellow>] }

[09:00] <evalbot6> Error:  unexpected "=" expecting subroutine parameters or block 

[09:00] <Aankhen``> ?eval my %h = ( sub => [<yellow>] )

[09:00] <evalbot6> Error:  unexpected "=" expecting subroutine parameters or block 

[09:00] <Aankhen``> Ah.

[09:00] <gaal> it's the "sub" being interpreted as a subroutine dec

[09:00] <Aankhen``> I see what you mean.

[09:01] <gaal> i'm pretty sure it has to do with => precedence, but i'll leave it to autrijus to fix :)

[09:52] *** Aankh|Clone is now known as Aankhen``

[09:54] * Aankhen`` wonders if mod_perl for P6 will simply build upon mod_parrot, or whether it's not needed at all...

[10:49] <nothingmuch> autrijus: ping

[10:55] <nothingmuch> Anyone interested in meta models and dancing might want to look at chapter 7 of the harrorth mess

[10:55] <nothingmuch> wherein is detailed the way forth words compile forth words

[10:56] <nothingmuch> and you can learn a bit of assembley too

[10:56] <nothingmuch> by the way, I need an editor for this stuff

[10:56] <nothingmuch> any volunteers?

[10:56] <nothingmuch> i'll buy you a beer at YAPC

[10:59] <nothingmuch> okay, 2 beers

[11:05] <lightstep> "At the lowest level we need [...] conditional branches [...] provided for by haskell". but the view of the rest of the document is running forth on a sequential machine, while haskell uses a graph reduction model

[11:27] <Aankhen``> nothingmuch >> An editor of what sort?

[11:27] <svnbot6> r4531, iblech++ | lib/pugs/run.pod -- More PODification.

[11:27] <svnbot6> r4532, iblech++ | Pugs.Run  -- use $PERLLIB if $PERL6LIB is not set.

[11:27] <svnbot6> r4532, iblech++ | pugs::run -- Remove "[make true]" notice about $PERLLIB.

[11:27] <Aankhen``> A technical editor

[11:27] <Aankhen``> ?

[11:28] <Aankhen``> Or just someone to fix grammar/punctuation/spelling mistakes?

[11:34] <gaal> hah, iblech++; # self-fulfilling documentation

[11:49] * Aankhen`` pokes nothingmuch.

[11:49] <svnbot6> r4533, iblech++ | Pugs.Eval -- Fixed Haddock-confusing Haddocks.

[11:56] <Aankhen``> ?eval class Foo { multi sub *infix:<==> ($self, $other) { "$self (" ~ $self.ref ~ "), $other (" ~ $other.ref ~ ")" } }; Foo.new() == "a"

[11:56] <evalbot6> '<obj:Foo> (Foo), a (Str)' 

[11:56] <Aankhen``> ?eval class Foo { multi method *infix:<==> ($self: $other) { "$self (" ~ $self.ref ~ "), $other (" ~ $other.ref ~ ")" } }; Foo.new() == "a"

[11:56] <evalbot6> Error: Wrong number of invocant parameters: 0 actual, 1 expected 

[11:58] * nothingmuch gets poked

[11:59] <nothingmuch> Aankhen``: an editor for the harrorth documentation

[11:59] <nothingmuch> that is: an english language editor, a technical editor

[11:59] * Aankhen`` volunteers for the former.

[11:59] <nothingmuch> in that case, read Harrorth end to end, and darcs send some patches which need no discussion

[12:00] <nothingmuch> i'll read them and pay better attention to the errors next time

[12:00] <nothingmuch> and discuss more substantial changes, and we will decide together what to do

[12:00] <Aankhen``> darcs?  Bleh.

[12:01] <nothingmuch> okay, unidiffs =)

[12:01] <nothingmuch> or english diffs: "this was bad, make it "Foo""

[12:01] <nothingmuch> dad just zonked my brain with ackerman

[12:01] <Aankhen``> Heh.

[12:01] <Aankhen``> Nah, I need to get around to reinstalling it anyway.

[12:02] <nothingmuch> how come?

[12:02] <nothingmuch> lightstep: ping

[12:02] <Aankhen``> Just.

[12:02] <Aankhen``> One question.

[12:02] <Aankhen``> What is Harrorth?

[12:02] <nothingmuch> ah

[12:02] <nothingmuch> http://feather.perl6.nl/~nothingmuch/harrorth/

[12:02] <nothingmuch> it's my learn-haskell project

[12:02] <nothingmuch> i'm learning haskell forth and parrot (no parrot yet) by writing a forth compiler in haskell

[12:03] <nothingmuch> which will eventually target parrot

[12:03] <Aankhen``> OK.

[12:03] <Aankhen``> Sounds cool.

[12:03] <nothingmuch> now, the catch is that i'm documenting my progress like a tutorial

[12:03] <nothingmuch> so that people like me, who can get through the monad tuts and whatever but don't feel they've actually learned anything useful might find a purpose

[12:03] <Aankhen``> Sooo, where do I see the documentation?

[12:04] <nothingmuch> but I can't assume any knowlege, since I don't know much more than the reader at any given point in time

[12:04] <nothingmuch> the link i gave you has a doc subdir

[12:04] <Aankhen``> Oops, sorry.

[12:04] <Aankhen``> I missed that while looking for Harrorth.

[12:05] * Aankhen`` goeth to inshtall darcsh.

[12:05] <lightstep> nothingmuch, pong

[12:06] <Aankhen``> I hate it when a "Building with Microsoft Windows" section starts with "You need MinGW, MSYS, and...".

[12:06] <nothingmuch> read chapter seven please =)

[12:06] <nothingmuch> you are my forth guru #2, so i'd appreciate comments

[12:07] <lightstep> sorry, i only got to the spot i quoted (right before the assembly thingy), and then i slid off to manga. i'll return to it now.

[12:07] <nothingmuch> oh, i didn't notice you quoted

[12:08] <nothingmuch> lightstep: i've screwed up a bit in the intro

[12:08] <nothingmuch> and i've also forgot a paragraph

[12:08] <nothingmuch> but the point is that we'll be focusing on a strategy for doing this in a haskellish manner in the next chapter

[12:08] <lightstep> my point is, usually IF is implemented as an immediate work that pushs a JNZ or something, which isn't at all possible in haskell

[12:09] <nothingmuch> what I plan to do is put the whole "Rest of the word" in the place of the address

[12:09] <nothingmuch> and make the jump a continuation to the interpretation of that thing

[12:10] <lightstep> so you need a parser

[12:11] <nothingmuch> i'm not really what I need yet, we'll see when I start writing the code

[12:12] <lightstep> ok

[12:12] <nothingmuch> darcs pull btw

[12:14] <nothingmuch> lightstep: here's a mini plan, i think i'm going to try and follow it:

[12:15] <nothingmuch> a "cell" in haskell is either a primitive, a literal, or more AST

[12:15] <nothingmuch> something like a branch has two choices

[12:15] <nothingmuch> two continuations, one for each condition

[12:16] <nothingmuch> the THEN word derives a version of the word currently being compiled

[12:16] <nothingmuch> with a filled in branch

[12:16] <nothingmuch> the two choices eventually meet to the same AST, but they don't know it

[12:16] <nothingmuch> you have a jump which is a cont, and a call which is a recusrive call

[12:18] <lightstep> are the cells organized in a sequence, or does every cell contain a jump to the next cell?

[12:18] <nothingmuch> i'm not sure, i think it depends on what's easier to code

[12:18] <nothingmuch> or what's harder to code, but turns out more elegant ;-)

[12:19] <lightstep> btw, i've no idea how to use darcs (i only used the web interface till now). i'll be glad if you tell me how to start

[12:19] <Aankhen``> nothingmuch >> Do I use `darcs push` to commit changes?

[12:19] <lightstep> maybe init, then register, then tag? or whatever the names are?

[12:20] <nothingmuch> "darcs get http://feather.perl6.nl/~nothingmuch/harrorth" gets you a harrorth in pwd

[12:20] <Aankhen``> I got it.

[12:20] <Aankhen``> I'm talking about committing my changes.

[12:20] <nothingmuch> when you cd into it "darcs pull" updates the repo with changes

[12:20] <nothingmuch> Aankhen``: that was for lightstep

[12:20] <Aankhen``> Oh, sorry.

[12:20] <Aankhen``> Confusion, heh.

[12:21] <Aankhen``> Er, wait... do I use `darcs record` or `darcs push`?

[12:21] <nothingmuch> Aankhen``: you can darcs push 'feather:~nothingmuch/harrorth', but I need to chmod it first

[12:21] <nothingmuch> or you can darcs send

[12:21] <nothingmuch> and put in my email

[12:21] <nothingmuch> or you can send -o or something, and that gets put into a file, which you can put somewhere

[12:21] <Aankhen``> Which would be?

[12:21] <nothingmuch> or email

[12:21] <lightstep> whoa, cool. much nore than arch.

[12:21] <nothingmuch> ah

[12:21] <nothingmuch> darcs record does that

[12:21] <nothingmuch> if you've made a change to the working dir you must make a patch out of it

[12:21] <Aankhen``> OK.

[12:21] <nothingmuch> once you have a patch you can move it around, and it's dependencies get dragged along with it

[12:22] <Aankhen``> I'll use `darcs send` later.

[12:22] <nothingmuch> so you can 'push' or 'send' or 'pull' it

[12:23] <nothingmuch> also, there's a notion of a "default repo"

[12:23] <nothingmuch> if you push to the ssh path of the repo, subsequent 'darcs pulls' will use that

[12:23] <nothingmuch> IIRC

[12:23] <nothingmuch> which is slower

[12:24] <nothingmuch> so you should --no-set-default

[12:24] <nothingmuch> and you can also put that in a config file, so that no-set-default is assumed every time you say 'darcs push'

[12:48] <svnbot6> r4534, autrijus++ | * hw2005 - Section 6 (basically) done!  Only one section to go!

[13:05] <Aankhen``> nothingmuch >> How do I send you the patch by e-mail?

[13:05] <Aankhen``> I can't `darcs send`, since apparently that will end up using Microsoft Exchange or something.

[13:09] <Aankhen``> ?eval "<URL: http://www.pugscode.org/>" ~~ s/^\<[URL: ]?(.*)\>$/$0/

[13:09] <evalbot6> Parrot VM: PANIC: Out of mem! C file src/memory.c, line 45 Parrot file (not available), line (not available)  We highly suggest you notify the Parrot team if you have not been working on Parrot.  Use parrotbug (located in parrot's root directory) or send an e-mail to [email@hidden.address] Include the entire text of this error message and the text of the script that generated the error.  If you've made any modifications to Parrot, please describe them

[13:10] <Aankhen``> O_O

[13:11] <QtPlatypus> Aankhen``: evalbot's regex engion is broken

[13:11] <svnbot6> r4535, iblech++ | autrijus++'s hw2005 -- Grammar and typo fixes.

[13:11] <Aankhen``> Ah.

[13:11] <Aankhen``> Even for P5 regexen?

[13:11] <QtPlatypus> Its been that way for a while

[13:11] <iblech> QtPlatypus: Is it? I think it's only because evalhelper.p5 limits the available memory

[13:12] <Aankhen``> Dangit, now I have to build Parrot. :-(

[13:13] <iblech> ?eval "hi" x 100000000; 5   # shouldn't work

[13:13] <evalbot6> 5 

[13:13] <iblech> ?eval "hi" x 100000000000; 5   # shouldn't work

[13:13] <evalbot6> 5 

[13:13] <iblech> ?eval "hi" x 1000000000000000; 5   # shouldn't work

[13:13] <evalbot6> 5 

[13:13] <iblech> ?eval "hi" x 100000000000000000000; 5   # shouldn't work

[13:14] <evalbot6> 5 

[13:14] <iblech> beh

[13:14] <Aankhen``> LMAO.

[13:14] <iblech> ?eval bytes("hi" x 100000000000000000000); 5   # shouldn't work

[13:14] <evalbot6> pugs: out of memory (requested 8388608 bytes) 

[13:14] <iblech> ha! :)

[13:14] <Aankhen``> Yey!  Finally!

[13:14] <iblech> Seems like Haskell has pretty good optimizations for strings

[13:16] <Aankhen``> Yup.

[13:16] <Aankhen``> ?eval bytes("foo")

[13:16] <evalbot6> 3 

[13:16] <Aankhen``> ?eval bytes("foobar")

[13:16] <evalbot6> 6 

[13:16] <Aankhen``> Ah.

[13:16] <Aankhen``> ?eval "foobar".bytes

[13:16] <evalbot6> 6 

[13:16] <Aankhen``> That bytes().  Heh.

[13:16] <Aankhen``> "foobar".chars

[13:16] <Aankhen``> ?eval "foobar".chars

[13:16] <evalbot6> 6 

[13:17] <QtPlatypus> I wonder if haskal is cheeting and your "hi" x 100000000000000000000 just doesn't get run due to lazyness

[13:18] <Aankhen``> ?eval "foobar".graphs

[13:18] <evalbot6> 6 

[13:18] <Aankhen``> ?eval "foobar".codes

[13:18] <evalbot6> 6 

[13:19] <QtPlatypus> ?eval "??".chars

[13:19] <evalbot6> 2 

[13:20] <iblech> FYI, .graphs is currently a synonym to .chars

[13:20] <Aankhen``> OK.

[13:22] <iblech> QtPlatypus: In pure Haskell: for sure -- (concat $ replicate 10000000 "Hi") will return immediately. But I wonder why that's the case in Pugs, too, as we explicitely disable laziness in the appropriate places, so we match Perl's behaviour...

[13:24] <QtPlatypus> iblech: It could be a bug.  Though I expect not an majour one.

[13:26] <Aankhen``> ?eval our <$foo $bar $baz>;

[13:26] <evalbot6> Error:  unexpected "<" expecting qualified identifier, variable name or "(" 

[13:26] <Aankhen``> ?eval our (<$foo $bar $baz>);

[13:26] <evalbot6> Error:  unexpected "<" expecting variable name, "undef" or ")" 

[13:26] <Aankhen``> Ah well.

[13:26] <Aankhen``> I had to try. :-)

[13:27] <svnbot6> r4536, iblech++ | ChangeLog -- Add note about pugs::run.

[13:27] <Aankhen``> ?eval my $foo = "bar\\n"; $foo;

[13:27] <evalbot6> \'bar\\n' 

[13:28] <Aankhen``> ?eval my $foo = "bar\n"; $foo;

[13:28] <evalbot6> \'bar ' 

[13:28] <Aankhen``> ?eval my $foo = "bar\\n"; $foo;

[13:28] <evalbot6> \'bar\\n' 

[13:28] <Aankhen``> ?eval my $foo = "bar\\n"; "\Q[$foo]";

[13:28] <evalbot6> 'Q[bar\\n]' 

[13:28] <iblech> ?eval our ($foo, $bar, $baz);   # works

[13:28] <evalbot6> undef 

[13:28] <Aankhen``> iblech >> Yeh, I know.

[13:28] <Aankhen``> I was just wondering whether through any manipulation of parsing <...> would work. :-)

[13:29] <Aankhen``> ?eval my $foo = "bar\\n"; quotemeta($foo);

[13:29] <evalbot6> Error: No compatible subroutine found: "&quotemeta" 

[13:30] <iblech> Ah. But I don't think it could work, as our() expects variables ($foo), not variable names ('$foo').

[13:30] <Aankhen``> Yeah, I know.

[13:31] <Aankhen``> Like I said, I was just wondering. :-)

[13:32] <iblech> wondering++ :)

[13:33] <Aankhen``> Hehe.

[13:33] <Aankhen``>     # XXX: Hopefully uri CLASS will return CLASS.

[13:33] <Aankhen``>     # See L<S06/"Currying"/"subroutines/methods/etc. simultaneously:">.

[13:33] <Aankhen``>     $impclass ||= .:implementor($scheme) ||= use URI::_foreign;

[13:33] <Aankhen``> Do you think you could explain that?

[13:34] <Aankhen``> (I read the relevant section in S06, but I don't quite understand)

[13:36] <iblech> s/uri/use/ in the first line of the comment

[13:36] <iblech> use(Class) should evaluate to Class

[13:36] <Aankhen``> Ahh.

[13:37] <iblech> (That was my understanding of the AES, if not, one would have to write ...||= do { use URI::_foreign; URI::_foreign }

[13:37] <Aankhen``> OK.

[13:38] <Aankhen``> Is there any reason why ||= should be used there instead of //=?

[13:38] <iblech> No, probably just habit. //= is fine and more clear

[13:38] <Aankhen``> Okey dokey!

[13:39] <Aankhen``> Ah, I would dearly love to have subtypes and C<where> clauses.

[13:44] <Aankhen``>   method :init(::?CLASS $class: Str $str, Str $scheme) {

[13:44] <Aankhen``> That looks for an invocant of type URI?

[13:45] <Aankhen``> I mean, wouldn't that make more sense as $self or something of the sort?

[13:45] <Aankhen``> Hrm, wait.

[13:45] * Aankhen`` re-reads.

[13:45] <iblech> :init is a class method

[13:46] <iblech> No, wait, it isn't...

[13:46] <Aankhen``> It is, apparently.

[13:46] <Aankhen``> return $impclass.:init($uri, $scheme);

[13:46] <Aankhen``> That's how it's called.

[13:46] <iblech> It *should* be a class method, but isn't in my port

[13:46] <iblech> Yep

[13:47] <Aankhen``> So it ought to be Class $class, right?

[13:47] <iblech> The proper translation is method :init(Class $class: ...)

[13:47] <iblech> Yep

[13:47] <Aankhen``> Yeh.

[13:47] <Aankhen``> Heh.

[13:47] * Aankhen`` edits.

[13:50] <Aankhen``> C<< bless $class: foo => "bar" >> is a synonym for C<< $class.bless(foo => "bar") >>?

[13:51] <iblech> Yep

[13:51] <Aankhen``> OK.

[13:51] <Aankhen``> iblech++ # patient as always

[14:03] <svnbot6> r4537, iblech++ | Pugs.Help -- Minor cosmetic fix.

[14:03] <svnbot6> r4537, iblech++ | pugs::run -- Wrote section about Pugs' command line flags.

[14:03] <svnbot6> r4538, gaal++ | fix mention of yaml_harness

[14:03] <svnbot6> r4539, iblech++ | Pugs.Help -- Put link to pugs::run.

[14:06] <gaal> iblech, do you think pugs::run should be svn mv'ed to end with .pm? if so please go ahead

[14:07] <iblech> Don't see anything wrong with .pod

[14:08] <gaal> k, i just nocticed you called it .pm somewhere. never mind :)

[14:08] <iblech> Ah, typo

[14:08] <svnbot6> r4540, gaal++ | add =item for PERLLIB

[15:01] <kelan> jabbot: nopaste

[15:01] <jabbot> kelan: I'm not sure I understand you fully.

[15:01] <kelan> perlbot: nopaste

[15:01] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[15:16] <Aankhen``> Wow, TortoiseSVN rocks.

[15:32] <gaal> Wow, Close to the Edge rocks. (just sayin')

[15:32] <Aankhen``> Yes rocks.

[15:33] <gaal> Yes++; progrock++

[15:34] <gaal> (that feeling of listeining to an album you love after a while you didn't listen to it, only to discover it's still amazingly excellent)++

[15:35] <Aankhen``> (listening to a shuffled, 5000 song library over time and therefore discovering new music everyday)++

[15:35] <Aankhen``> (parents who listen to music you like)++

[15:36] <gaal> cofee!

[15:36] <gaal> wow, this is bad spell day.

[15:55] *** Boogie_ is now known as Boogie

[16:07] *** iblech_ is now known as iblech

[16:34] *** Aankh|Clone is now known as Aankhen``

[17:45] <putter> autrijus: is there anything we can do to help you meet deadline?

[17:46] * putter notes svn.openfoundry.org is off the air.  A hw2005.txt ci with minor grammar tweaks will have to wait...:(

[18:18] <autrijus> putter: heya

[18:18] <autrijus> putter: please nopaste it here

[18:18] <autrijus> putter: or just paste it here

[18:22] <Limbic_Region> how goes the hackathon autrijus?

[18:37] <autrijus> Limbic_Region: very well!

[18:37] <autrijus> figured out the compilation strategy

[18:37] <autrijus> I'm still finishing up hw2005 (due in 3.5 hours)

[18:38] <Limbic_Region> you'll make it

[18:38] <autrijus> lots of blatant obsoleted and misleading statements in parrot PDDs removed

[18:38] <autrijus> learned TeX (but not bibtex yet)

[18:39] <integral> .oO( ParrotTeX )

[18:42] <iblech> autrijus: If you have a sec -- is there a way to use Pugs.Eval.findVar from Pugs.Parser.Unsafe?

[18:43] <gaal> autrijus: in the "Tied" section: consider

[18:43] <gaal> -objects".  If yes, Perl then calls the "STORE" method on those objects, passing

[18:43] <gaal> +objects".  If they are, Perl then calls the "STORE" method on those objects, passing

[18:44] <iblech> Currently I'm using "unsafeEvalExp $ Var "varname"", but this 1) dies if varname wasn't found and 2) seems a bit too heavy to me, as I just want to resolve varname

[18:44] <gaal> iblech, can't you readVar ?

[18:44] <gaal> oh you'tr in the parser, no matter

[18:46] <iblech> ...And findVar has special logic for &vars (i.e. automatically creating &prefix:<[+]> etc.), which I'd rather not like to replicate in Pugs.Parser.Unsafe

[18:47] <autrijus> greetings

[18:48] <autrijus> iblech: I think readVar is the way to go.

[18:49] <autrijus> if you want the value, that is

[18:49] <autrijus> iblech: you can duplicate readVar's logic

[18:49] <autrijus> or generalise it for all MonadEval class.

[18:50] <autrijus> gaal: gaal thanks, fixed

[18:51] <iblech> But it seems that readVar doesn't have special logic for &vars, so readVar won't find "&prefix:<[+]>", right?

[18:52] <autrijus> right. so you need to move the logic there

[18:52] <autrijus> and reuse it

[18:52] <gaal> actually: also ..."on them", not "on those objects", since we are already in the Deict monad. 

[18:52] <iblech> Ok, I'll try that

[18:53] <autrijus> gaal: k

[18:53] * autrijus started writing out PIR grammar

[18:53] <autrijus> after 20 constructors

[18:53] <autrijus> I found there's still 40 to go

[18:55] <autrijus> if I still had any doubt about the craziness of generate PIR directly from the parsed Exp, with any chance of optimisation, then there's no more

[18:55] <autrijus> it's clearly a way of madness

[18:55] <autrijus> instead I've written out the PAST grammar which has only seven node types, so we can optimise the hell out of it :)

[18:55] <autrijus> even for the Eval monad itself

[18:55] <autrijus> so expect some more 200% speedups down the road :)

[18:56] <autrijus> iblech: hey, you grok TeX right?

[18:57] <iblech> autrijus: If you mean LateX, then yes

[18:57] <iblech> Don't have a clue of pure TeX

[18:57] <gaal> :)

[18:58] <autrijus> :)

[18:59] <iblech> :)   # 3 smileys, can we top that? :)

[18:59] <autrijus> iblech: cool. I'm having problems distinguishing

[18:59] <autrijus> \texttt{}

[18:59] <autrijus> \code{]

[18:59] <autrijus> and other constructs

[18:59] <autrijus> during the conversion of .txt to .tex

[18:59] <gaal> we can do a moose smiley. }:)

[19:00] <crysflame> :X

[19:00] <autrijus> iblech: do you have a feather account?

[19:00] <autrijus> in ~autrijus/hw2005/pugs.tex

[19:00] <autrijus> that's my current formatted source

[19:00] <autrijus> I'd be happy if you can sanity check a bit to see if there's some outrageous errors

[19:00] <autrijus> (typing "make" in there should produce a pugs.ps)

[19:01] <iblech> autrijus: No, please cp that to public_html or how it's called

[19:01] <iblech> autrijus: Sure

[19:01] <autrijus> and/or help fixing the usage of things like {tree"} nad turn "libperl.so" to \texttt{libperl.so} (or something like that)

[19:02] <autrijus> iblech: http://perlcabal.org/~autrijus/hw2005.tgz

[19:02] <autrijus> danke sehr

[19:03] <iblech> Kein Problem

[19:05] <nothingmuch> Aankhen``: did you figure darcs out?

[19:07] <putter> back... pasting...

[19:07] <iblech> autrijus: Hm, you defined \code to mean the same as \texttt, so what's the exact problem?

[19:08] <autrijus> iblech: the exact problem is that I did none of that definition XD

[19:08] <autrijus> iblech: it's all copy-paste of hs-plugins.tex

[19:08] <autrijus> I have no idea what is defined to what

[19:08] <autrijus> so if \code just means \texttt... then wonderful

[19:08] <autrijus> thanks for telling me that :)

[19:09] <autrijus> also I noticed the source code <pre> things

[19:09] <autrijus> doesn't break

[19:09] <iblech> autrijus: :) It's at the top: \newcommand{\code}[1]{\texttt{#1}} -- "define the new command "\code", which takes 1 arg (which can be later referred to by #1), and let it expand to \texttt{#1}"

[19:09] <pasteling> Someone at 66.30.119.55 pasted "hw2005.txt: minor grammar tweaks." (25 lines, 1K) at http://sial.org/pbot/10953

[19:10] <nothingmuch> autrijus: any opinions on chapter 7?

[19:11] <autrijus> nothingmuch: Leo says your journal is the best text he've found about Haskell

[19:12] <autrijus> and that he can actually grok one chapter at a time without head exploding or something

[19:12] <nothingmuch> =D

[19:12] <nothingmuch> there's a saying in judaism

[19:12] <nothingmuch> saving one life is like saving the whole world

[19:12] <nothingmuch> scaled down to saving a head from exploding

[19:12] <autrijus> I think ch7 is wonderful -- I never grokked how compile-time words relate to BEGIN until you wrote that

[19:12] <nothingmuch> just that makes me overjoyed =)

[19:13] <autrijus> of course the BEGIN is nestable?

[19:14] <autrijus> you can do compile-time-inside-compile-time?

[19:14] <nothingmuch> i'm not 100% sure

[19:14] <nothingmuch> i haven't played around 

[19:14] <nothingmuch> in theory yes

[19:14] <nothingmuch> though I suspect it depends on your impl

[19:14] <nothingmuch> : just puts stuff on the stack

[19:14] <nothingmuch> or maybe it doesn't, i'm not sure

[19:15] <autrijus> nod.

[19:15] <nothingmuch> you might preallocate some data

[19:15] <nothingmuch> the way a word's definition is linear

[19:15] <nothingmuch> or make sure to jump around the nested word

[19:15] <nothingmuch> food time... see you soon!

[19:15] <autrijus> ciao

[19:20] <Aankhen``> nothingmuch >> I figured out darcs somewhat, but I need to figure out how I send you a particular patch by e-mail; I can't use `darcs send` as it tries to send using Microsoft Exchange.

[19:21] <gaal> a.*, darcs send -o file.patch

[19:22] <autrijus> mugwump: hey, you know if there's a pod2kwid somewhere?

[19:22] <Aankhen``> Like I said, `darcs send` doesn't work...

[19:22] <autrijus> chip's asking

[19:22] <Aankhen``> Or rather, it's not an option.

[19:22] <gaal> -o file writes it to a file

[19:23] <Aankhen``> Oh.

[19:23] <autrijus> maybe PDDs won't take up that much vertical space when it's converted to kwid :)

[19:24] <autrijus> hmm Pod::Simple::DumpAsKwid

[19:24] <Aankhen``> Thanks, gaal. :-)

[19:24] <gaal> sure :)

[19:28] <pasteling> "iblech" at 80.81.17.181 pasted "autrijus: pugs.tex fixes" (120 lines, 5.6K) at http://sial.org/pbot/10954

[19:28] <autrijus> iblech++ xx inf

[19:30] <autrijus> iblech: h

[19:30] <autrijus> iblech: hm, can't apply

[19:30] <autrijus> iblech: can you just put the entire .tex somewhere?

[19:30] <autrijus> I'll adapt

[19:30] <iblech> Sure, a sec

[19:31] <iblech> http://m19s28.vlinux.de/iblech/.pugs.tex

[19:32] <nothingmuch> Aankhen``: probably the simplest way for you to work is by just pushing to the repo on feather

[19:32] <nothingmuch> keep your own repo there

[19:32] <nothingmuch> by darcs getting to your home dir

[19:32] <nothingmuch> (it's cheap, too, hardlinks and all that)

[19:32] <putter> autrijus: I assume you saw the paste.  Is pugs.tex supposed to be A4 or Letter.  I note some of the code sticks out far enough to overlap adjacent columns, or be clipped by A4 printing.

[19:32] <nothingmuch> and then push to your repo, where I can pull from

[19:34] <kelan> anyone want to help me understand harrorth chapter 6? :)

[19:34] <nothingmuch> kelan: sure =)

[19:34] <nothingmuch> but blame autrijus ;-)

[19:34] <kelan> heh

[19:34] <nothingmuch> i think that in a later stage in the project i will try to move it down the chronology

[19:34] <autrijus> putter: indeed... I don't know why is it the case

[19:34] <autrijus> maybe I should investigate linebreaks

[19:35] <kelan> well i get most of it, but i can't figure out how the simplified `interpret` is evaluating correctly

[19:35] <autrijus> it's for A4

[19:35] <autrijus> http://www.cs.uu.nl/~daan/hw2005/

[19:35] <autrijus> but deadline is in 90 minutes :)

[19:35] <autrijus> so I'll focus on the content

[19:35] <autrijus> almost there

[19:35] <kelan> this line (line 225): interpret ast = doExp (head ast) >>= \i -> return i

[19:35] <kelan> with the simplified `doExp` that just returns an empty interp

[19:35] <iblech> autrijus: Listings don't auto-break, one has to put breaks manually in them

[19:36] <autrijus> iblech: :-/

[19:36] <kelan> it doesnt seem like it should work to me

[19:36] <autrijus> iblech or putter: do you have time to investigate A4 breaks for me?

[19:36] <kelan> so apparently i'm misunderstanding something

[19:36] <nothingmuch> how is the vienna hackathon proceeding?

[19:36] <autrijus> and perhaps update the .pugs.tex file again

[19:36] <iblech> Will do

[19:36] <autrijus> nothingmuch: it's extremely fruitful thus far

[19:36] <autrijus> nothingmuch: got Pugs->Parrot compilation strategy figured out largely

[19:36] <iblech> autrijus: Should I use the same .tex? Or do you have an updated version of it?

[19:37] <nothingmuch> with the meta compilation thingamabob?

[19:37] <autrijus> iblech: just use the same .tex

[19:37] <autrijus> I'll deal

[19:37] <autrijus> nothingmuch: yeah

[19:37] <iblech> autrijus: Ok

[19:37] <nothingmuch> is this going to be a 10 day thing? WOW!

[19:37] <pasteling> "kelan" at 68.101.16.64 pasted "what's wrong in my evaluation understanding?" (169 lines, 2.9K) at http://sial.org/pbot/10955

[19:37] <autrijus> nothingmuch: yeah... also leo has got some notes on how to get STM on parrot

[19:37] <nothingmuch> =D

[19:38] <autrijus> and serialised conts

[19:38] <kelan> thats a bit long, because i wrote out all of the steps

[19:38] <autrijus> so the two big things can be made portable

[19:38] <autrijus> now we just have to make parrot link libperl

[19:38] <autrijus> and then there's nothing stopping the entire examples/ to be compiled to parrot

[19:40] <nothingmuch> what what what?

[19:40] <nothingmuch> i don't see the connection between libperl and examples

[19:41] <putter> iblech: another option is to reduce the explicit indentation in the lstlisting's which are too long... sacrificing consistency for "dont have to rewrite code".

[19:41] <autrijus> nothingmuch: examples/perl5/cpan-upload.p6!

[19:41] <nothingmuch> ah!

[19:41] <putter> autrijus: references?

[19:41] <autrijus> putter: I failed to grok bibtex.

[19:41] <nothingmuch> kelan: sorry, i missed the nopaste... reading now

[19:41] <kelan> nothingmuch: ok thanks

[19:41] <autrijus> putter: so I guess I can use some help in googlescholaring

[19:42] <gaal> please keep in mind that we don't have perl5 embedding in win32...

[19:42] <autrijus> gaal: but parrot is no ghc

[19:42] <autrijus> gaal: parrot can survive link with perl more easily

[19:43] <gaal> ah! wonderful

[19:43] <putter> is there a list of papers you intend to reference somewhere...?

[19:43] <nothingmuch> kelan: i think you got it right

[19:43] <kelan> nothingmuch: but the end result is a function, not an empty interp

[19:44] <nothingmuch> oh wait... one sec

[19:44] <kelan> you would need to apply that function to another interp to get the empty one back

[19:44] <nothingmuch> think of it this way

[19:44] <autrijus> putter: "Monadic framework for subcontinuations"... the GADT paper from SPJ... hs-plugins paper... the STM paper...

[19:44] <nothingmuch> f <- doExp ...

[19:44] <autrijus> putter: any paper about parrot, I have no idea...

[19:44] <autrijus> putter: that's pretty much it

[19:44] <nothingmuch> local f (interpret exps);

[19:45] <nothingmuch> ignore the rest of the stuff for now

[19:45] <kelan> i don't know what `local` does, which is why i was trying with the simplified `interpret`

[19:45] <nothingmuch> this function will return a Reader with a function that will give an interpreter to X, take the result, and send it to local

[19:45] <nothingmuch> chain it

[19:45] <nothingmuch> and that's basically it

[19:45] <nothingmuch> the details is just a triple inversion

[19:45] <nothingmuch> well, double inversion

[19:46] <nothingmuch> try expanding >>= first

[19:46] <nothingmuch> i think it will make more sense

[19:46] <nothingmuch> oh wait, that's what you did

[19:46] <nothingmuch> =)

[19:46] <kelan> :)

[19:46] <autrijus> brb

[19:46] <nothingmuch> in that case, stop there, then evaluate the external runReader

[19:46] <kelan> it seems like there needs to be another application somewhere to get a real result

[19:47] <nothingmuch> yes, the details are hard... i spent like 2 hours reading the source to Reader again and again and again

[19:47] <nothingmuch> as I said before, I think it will make a wonderful obfu in p5

[19:47] <pasteling> "iblech" at 80.81.17.181 pasted "autrijus: line break fixes" (155 lines, 6.7K) at http://sial.org/pbot/10956

[19:47] <nothingmuch> i've never seen 10 lines confuse me so much

[19:48] <iblech> autrijus: The only two lines which are a little bit too long are two example lines of async { atomically {

[19:48] <autrijus> ok.

[19:52] <nothingmuch> kelan: i think that maybe >>= is incorrect

[19:53] <kelan> the one i used?

[19:53] <nothingmuch> the expansion

[19:53] <kelan> i used the version from the Prelude because it expands easier, but it should be the same

[19:54] <kelan> i'll look over my expansion

[19:54] <nothingmuch> hmm

[19:54] <nothingmuch> i'm not sure

[19:54] <nothingmuch> what I remember most distinctly:

[19:54] <nothingmuch> doExp returns a lambda

[19:55] <nothingmuch> eventually there's very little parameter passing, which is quite transparent

[19:55] <nothingmuch> between the lambda returned by runReader (interp ast) and that lambda

[19:55] <kelan> i thought doExp returns a Reader

[19:56] <nothingmuch> yes it does, a lambda in a Reader

[19:56] <kelan> right

[19:56] <nothingmuch> ignore the Reader for a second, it's just glue =)

[19:56] <kelan> but the Reader is where the problem is for me

[19:56] <kelan> because the lambda inside it is never applied 

[19:56] <nothingmuch> i mean at the principal level

[19:56] <nothingmuch> the lambda inside is supposed to get the external `e` i think

[19:57] <nothingmuch> let me try to carry on the second reduction of runReader

[19:57] <nothingmuch> i would have done it differently

[19:57] <nothingmuch> i'll nopaste in a sec

[19:58] <kelan> does `runReader (return $ \interp -> interp{ stack = []})` evaluate to `\_ -> (\interp -> interp{ stack = []})` ?

[19:58] * putter is not making good progress...

[19:59] <kelan> because if so, the external `e` is going into the `_` parameter, so it doesnt get to the inner lambda

[19:59] <nothingmuch> right, which is silly

[20:00] <nothingmuch> the error is before what I started with

[20:00] <nothingmuch> because in another reduction i get the same thing

[20:01] <autrijus> chip: when you have the next spare moment

[20:01] <autrijus> chip: please rescue me from my room, thanks, much appreciated :)

[20:02] <autrijus> (my room in leo's place has a knob only on one side of the door.)

[20:02] <autrijus> (so if I go into the room without unpacking the knob and taking it with me inside, then I'm effectively locked within)

[20:02] <autrijus> (because it can only be opened from outside)

[20:03] <chip> autrijus: LOL ok

[20:03] <kelan> hmm. closets usually only have knobs on the outside, don't they ;)

[20:03] <kelan> leo stuck you in a closet!

[20:03] <chip> autrijus: Leo's on the way!

[20:03] <autrijus> cool

[20:03] * chip is amused that this message passed through .nl if not .us to get about 30 meters

[20:04] <kelan> nothingmuch: maybe i should give up on this part and just try to understand the real version that uses `local`?

[20:05] <nothingmuch> i think so

[20:05] <nothingmuch> but not yet

[20:05] <nothingmuch> try reducing runReader (interpret []) initInterp

[20:05] <kelan> ok

[20:05] <nothingmuch> oh right! i see why,

[20:05] <nothingmuch> doExp needs returns something to be used by local, in most situations

[20:06] <nothingmuch> i think that using it as the left side of a bind that does an ask is not 100% correct

[20:06] <nothingmuch> but i'm not sure

[20:06] <nothingmuch> i'm too tired from doing silly things all day long

[20:08] <jhorwitz> yo lambdacamels.  back from vacation.  i'm sure i missed, well, everything.  :)

[20:08] <autrijus> yo jhorwitz!

[20:09] <nothingmuch> kelan: i'll try to reduce stuff for you, and append it to harrorth

[20:09] <autrijus> jhorwitz: leo chip me among other friends figured out ways to do Exp->PAST->PIR->PBC!

[20:09] <nothingmuch> that way you can check if you got it right when you finish

[20:09] <kelan> nothingmuch: ok, thanks

[20:09] <jhorwitz> autrijus: ooooooh

[20:09] <autrijus> jhorwitz: also figured out VObj in ParrotObject land

[20:09] <jhorwitz> autrijus++ 

[20:09] <autrijus> and generational GC

[20:09] <jhorwitz> in europe now?

[20:10] <nothingmuch> and if it's not right, i was probably wrong =)

[20:10] <autrijus> and plans for STM and serialised conts

[20:10] <autrijus> and stuff.

[20:10] <autrijus> (all within the last 18 hours)

[20:10] <autrijus> jhorwitz: yeah, in Leo's place

[20:10] <jhorwitz> i wouldn't expect any less in 18 hours from you guys.  :)

[20:10] <autrijus> jhorwitz: but I have 50 mins to finish this paper :)

[20:10] <autrijus> (oh I also recorded some of this into the paper.)

[20:10] <jhorwitz> off with you.  ;-)

[20:11] * jhorwitz is now anticipating his next svn up

[20:13] <putter> autrijus: when is the deadline?

[20:14] <nothingmuch> kelan: interpret [] finished  - darcs pull

[20:15] <autrijus> putter: midnight london time today

[20:15] <putter> which is now+?

[20:15] <autrijus> +45

[20:15] <autrijus> min

[20:15] <autrijus> I'm in Conclusions

[20:15] <nothingmuch> midnight london time? it's midnight in 45 mins here

[20:15] <nothingmuch> and it's GMT+3

[20:16] <jhorwitz> 4:15 here, and i'm GMT+5

[20:16] <jhorwitz> i think you have more time than you think

[20:16] <autrijus> right

[20:16] <Aankhen``> 1:45 AM here; GMT+5.5

[20:16] <autrijus> I counted backwards.

[20:16] <autrijus> so still 2:45.

[20:16] <Aankhen``> (just thought I'd add to the time lists :-P)

[20:16] <autrijus> but I can't stay up anymore :)

[20:16] <jhorwitz> eek, i'm GMT -5

[20:16] <jhorwitz> plus, minus...minor details

[20:16] <nothingmuch> autrijus: cold shower == minimum 30 minutes of alertness

[20:18] <integral> midnight london time?   That's not for 2h40 ...

[20:18] * integral is brain lagged

[20:19] <crysflame> central

[20:21] <chip> London is -1 from us, as we're Greenwich+1 (which is not to say GMT+1, what with summer)

[20:22] <chip> s/us/Hernnbaumbarten/

[20:22] <chip> s/Hernnbaumbarten/Herrnbaumgarten/ # geez, spelling German is hard

[20:23] <integral> hmm?  you're GMT+1?  Isn't that what we are?

[20:23] <integral> s/we/London/

[20:25] <chip> Um, that's exactly what I said we aren't.

[20:25] <chip> "which is not to say GMT+1"

[20:25] <integral> uh, so by "greenwich" you didn't mean GMT, you meant London time ...

[20:26] * integral goes back to hacking continuations to fix his brain ;-)

[20:26] <autrijus> so it's just GT, not mean :)

[20:26] <gaal> UTC or Z come in handy :)

[20:30] <putter> iblech: e' in tex?

[20:30] <iblech> putter: ?

[20:31] <kelan> probably wants é

[20:31] <nothingmuch> kelan: done!

[20:32] <kelan> i'm not:)

[20:32] <putter> yes

[20:32] <nothingmuch> interpret [Push 1] and interpret []

[20:32] <nothingmuch> have fun =)

[20:32] <kelan> ok thanks

[20:32] <nothingmuch> i'm off to do laundry/shower etc

[20:32] <nothingmuch> under misc/

[20:32] <putter> andré

[20:32] <kelan> nod

[20:33] <iblech> putter: Don't know for sure, try 'e, `e, e', e`, "e, e"

[20:33] <nothingmuch> this is what I finish with: ( \e' -> e'{ interpStack = (1:) (interpStack e') } ) initInterp

[20:33] <nothingmuch> ( \e' -> e'{ interpStack = 1:(interpStack e') } ) initInterp

[20:44] <Odin-LAP> GMT is absolutely and completely equivalent to UTC. UTC is just the new name for GMT. ;)

[20:45] <gaal> true; but it was given that name to remove possible confusion against london time.

[20:45] <Odin-LAP> Heh. :p

[20:45] <Odin-LAP> England is GMT+DST.

[20:47] <iblech> Yay! We have rudimentary macro support! :)

[20:47] <autrijus> iblech: !?

[20:47] <autrijus> oh wow.

[20:47] <Odin-LAP> Riddle me this. Is there something specced somewhere which says alphabetic operators have to be seperated from operands by space?

[20:47] <Odin-LAP> Hmmm.

[20:47] <iblech> pugs> macro test ($x) { say "macro"; "100$x" }

[20:47] <iblech> undef

[20:47] <iblech> pugs> sleep 1; say 2; test 3

[20:47] <iblech> 2

[20:47] <iblech> macro

[20:47] <iblech> '1003'

[20:48] <autrijus> iblech++

[20:48] <Odin-LAP> iblech: How rudimentary? :>

[20:48] <Aankhen``> iblech++

[20:48] <iblech> But not the whole parsing thing, only the compile-time evaluation thing

[20:48] <autrijus> right, but that's fine

[20:48] <Odin-LAP> Heeh. :p

[20:48] <autrijus> because I plan to compile rules into parsec prims anyway

[20:48] <autrijus> but that's for 6.28.x

[20:48] <iblech> Odin-LAP: t/macros/*, with small modifications, pass :)

[20:48] <autrijus> this is so nice

[20:48] <autrijus> iblech++

[20:48] <Aankhen``> Parsing would need to wait till we have better rules support anyway, wouldn't it?

[20:49] <autrijus> Aankhen``: yes

[20:49] <iblech> That's enough, thanks :)

[20:49] <Odin-LAP> karma iblech

[20:49] <jabbot> Odin-LAP: iblech has karma of 337

[20:49] <autrijus> in other news, I believe I just finished the first draft.

[20:49] <autrijus> like, complete, text

[20:49] <autrijus> only problem now is no references.

[20:49] <Aankhen``> ?eval module Foo { }

[20:49] <evalbot6> undef 

[20:50] <autrijus> http://perlcabal.org/~autrijus/hw2005.tex

[20:50] <autrijus> http://perlcabal.org/~autrijus/hw2005.pdf

[20:50] <iblech> Aankhen``: Do you think it should return the type/module/class object Foo?

[20:50] <Aankhen``> iblech >> IMHO, having C<use module;> return the module/class is enough...

[20:51] <iblech> Aankhen``: Ok

[20:51] <Aankhen``> I figure if C<module Foo { }> returns the module, the only use would be to have anonymous modules... is there a need for that?

[20:52] <iblech> autrijus: On the last page, in the bottom left, the definition of RelOp is a little bit too long

[20:52] <autrijus> iblech: fixed already

[20:52] <autrijus> reuploaded

[20:52] <Aankhen``> ?eval "foo".trans([<f o>] => [<F O>])

[20:52] <evalbot6> Error: No compatible subroutine found: "&trans" 

[20:52] <Aankhen``> ?eval "foo" ~~ tr/a-z/A-Z/

[20:52] <evalbot6> Error:  unexpected "A" expecting term postfix, operator, ",", ":", ">>=:=<<", ">>!=<<", ">>==<<", ">><=<<", ">>>=<<", ">>~~<<", ">>!~<<", ">>eq<<", ">>ne<<", ">>lt<<", ">>le<<", ">>gt<<", ">>ge<<", ">><<<", ">>><<", "\187=:=\171", "\187!=\171", "\187==\171", "\187<=\171", "\187>=\171", "\187~~\171", "\187!~\171", "\187eq\171", "\187ne\171", "\187lt\171", "\187le\171", "\187gt\171", "\187ge\171", "\187<\171", "\187>\171", "=:=", "!=", "==", "<=", ">=", "~

[20:53] <autrijus> oh wow.

[20:53] <autrijus> (re the error message)

[20:53] <Aankhen``> Heh.

[20:53] <Aankhen``> Hrm.

[20:53] <nothingmuch> my god, you go for 10 minutes, and pugs gets macros

[20:54] <autrijus> nothingmuch: such is the pre-singularity age of accelerated acceleration

[20:54] <Aankhen``> ?eval multi sub *infix:<==> ($first, $second) { $first ~ "1" eq $second ~ "2" }; "a" == "b"

[20:54] <evalbot6> bool::false 

[20:54] <Aankhen``> ?eval multi sub *infix:<==> ($first, $second) { $first ~ "1" eq $second ~ "2" }; "a" == "a"

[20:54] <evalbot6> bool::false 

[20:54] * Aankhen`` snickers.

[20:54] <Aankhen``> ?eval multi sub *infix:<==> ($first, $second) { $first ~ "1" eq $second ~ "2" }; 1 == 

[20:54] <evalbot6> Error:  unexpected end of input expecting term 

[20:54] <Aankhen``> ?eval multi sub *infix:<==> ($first, $second) { $first ~ "1" eq $second ~ "2" }; 1 == 1

[20:54] <evalbot6> bool::true 

[20:54] <Aankhen``> D'oh.

[20:55] <nothingmuch> everyone, we need to make a petition to iblech's school so that they will let him go to the hackathon this week

[20:55] * Aankhen`` un-snickers.

[20:55] <Aankhen``> ?eval multi sub *infix:<==> ($first, $second) { ("$first, $second", $first ~ "1" eq $second ~ "2") }; 1 == 1

[20:55] <evalbot6> bool::true 

[20:55] <Aankhen``> Bah.

[20:56] * autrijus decides to just mail the current version to Daan.

[20:56] <Aankhen``> ?eval multi sub *infix:<+> ($first, $second) { ("$first, $second", $first ~ "1" ~ $second ~ "2") }; 1 + 1

[20:56] <evalbot6> 2 

[20:57] <Aankhen``> ?eval my $foo; $foo = "foo"; my $bar ::= $foo; $bar = "bar"; $foo;

[20:57] <evalbot6> \'bar' 

[20:57] <nothingmuch> Aankhen``: btw, what did you do with the darcs patch?

[20:57] <Aankhen``> nothingmuch >> I tried e-mailing it to you, but failed...

[20:57] <nothingmuch> push it to feather then

[20:57] <Aankhen``> What was your e-mail address?

[20:57] <Aankhen``> I'm scared of doing that.

[20:57] <nothingmuch> ssh feather; darcs get ~nothingmuch/harrorth;

[20:57] <nothingmuch> then push to feather:harrorth

[20:58] <Aankhen``> Would that require an account on feather?

[20:58] <nothingmuch> yes, it would

[20:58] <nothingmuch> [email@hidden.address]
[20:58] <nothingmuch> or you can have an account on pasta (my box)

[20:58] <nothingmuch> you can also nopaste a patch

[20:58] <nothingmuch> or put a txt one somewhere

[20:58] <Aankhen``> It's kinda long; I'll e-mail it.

[20:59] <Aankhen``> woobling?  Not wobbling?

[20:59] <nothingmuch> no, woobling

[20:59] <Aankhen``> Ah.

[20:59] <Aankhen``> That'd be my mistake, then.

[20:59] <nothingmuch> like what the swedish chef says when he does the coconut thing

[21:00] <Aankhen``> Sent.

[21:00] <nothingmuch> grazie!

[21:00] <nothingmuch> mplayer http://woobling.org/coconut.mp4

[21:00] <Aankhen``> NP, sorry it got delayed.

[21:02] <Aankhen``> When you use a Proxy object on an C<is rw> sub/method, does it actually create a new object each time?

[21:04] <chip> could be a different method every time.  &aliasing := &bites

[21:05] <Aankhen``> Er... I'll take that as a yes.

[21:05] <pasteling> "putter" at 66.30.119.55 pasted "a first rough cut at bibtex" (35 lines, 1.1K) at http://sial.org/pbot/10957

[21:05] <chip> I can't answer for sure, I'm just guessing

[21:05] <Aankhen``> OK, thanks.

[21:06] <putter> autrijus: are these the papers you have in mind?  any others? (I didn't see any papers for parrot.  just talks).

[21:06] <chip> Who is responsible for svnbot6?

[21:06] <autrijus> putter: oh wow.

[21:06] * chip uses the Professor Mind Trick

[21:06] <Aankhen``> chip >> iblech, I think...

[21:06] <chip> "These are not the papers you're looking for.  You can go about your grad work."

[21:06] <autrijus> putter: yes, those are those.

[21:07] <chip> iblech: ping

[21:07] <iblech> chip: Yes?

[21:07] <putter> ok, I'll do a quick cleanup pass...

[21:07] <autrijus> putter: how do I integrate it with http://perlcabal.org/~autrijus/hw2005.tex ?

[21:07] <autrijus> putter: cool! please just give me a url of tarball or something I can download and resend to Daan, then

[21:07] <chip> iblech: since you've set up and are running the bot already, could you watch parrot and send commit messages to irc.perl.org #parrot?

[21:08] <iblech> chip: Sure

[21:08] <Aankhen``> Aha!  I was right!  Mwahahhaahahahaahahaha!

[21:08] <chip> iblech: thanks!  https://svn.perl.org/parrot

[21:08] * Aankhen`` accidentally chokes.

[21:09] <autrijus> er

[21:09] <autrijus> actually

[21:09] <autrijus> iblech: http://svn.perl.org/parrot/trunk/

[21:09] <autrijus> is a better url

[21:09] * Aankhen`` recovers and takes on a dignified air.

[21:09] <Aankhen``> autrijus++ # I second that

[21:09] <chip> what, only the truck?

[21:09] <chip> trunk?

[21:09] <Aankhen``> # (remind me not to `svn co http://svn.perl.org/parrot/` ever again, even by mistake)

[21:10] <chip> heh

[21:10] <chip> could be worse.  Robert didn't bring over the repo copy of icu

[21:10] <Aankhen``> The whole checkout crashed somewhere around tags/RELEASE_0_1_0/.

[21:10] <Aankhen``> Then I suddenly realised that last time I did it, I only checked out the trunk.

[21:10] <Aankhen``> Ah sweet, sweet trunk...

[21:11] <Aankhen``> iblech++ # svnbot6

[21:13] <Aankhen``> Hmmm...

[21:14] <Aankhen``> iblech >> Is there a reason why Net::IRC isn't a proper class, aside from the primitive nature of Pugs OO at the time it was written?

[21:15] <putter> ok, pasting first working draft, connection info...

[21:15] <Aankhen``> s/primitive/relatively primitive/

[21:15] <nothingmuch> -and returns an `IO Interp`. WTF?

[21:15] <autrijus> putter: ping me when you're done

[21:15] <nothingmuch> +and returns an `IO Interp`. WTH?

[21:15] <nothingmuch> silly!

[21:15] * Aankhen`` blushes.

[21:15] <iblech> Aankhen``: No. There's a real OO in ext/Net-IRC/lib/Net/IRC-OO.pm, but I haven't tested the OO ver

[21:15] <Aankhen``> iblech >> OK.

[21:16] <Aankhen``> nothingmuch >> I just went with my spellchecker. :-)

[21:16] <nothingmuch> in that case i'll unspellcheck some stuff =)

[21:16] <Aankhen``> ?eval "foo " ~~ m/ $/

[21:16] <evalbot6> Parrot VM: PANIC: Out of mem! C file src/memory.c, line 45 Parrot file (not available), line (not available)  We highly suggest you notify the Parrot team if you have not been working on Parrot.  Use parrotbug (located in parrot's root directory) or send an e-mail to [email@hidden.address] Include the entire text of this error message and the text of the script that generated the error.  If you've made any modifications to Parrot, please describe them

[21:16] <Aankhen``> Bah!

[21:16] <pasteling> "putter" at 66.30.119.55 pasted "first working draft of bibliography" (42 lines, 1.2K) at http://sial.org/pbot/10958

[21:16] <Aankhen``> Oops.

[21:17] <Aankhen``> Right, no pattern matching for evalbot6.

[21:17] <iblech> s/\.$/, because parrot exceeds the RAM limit/

[21:18] <Aankhen``> Yeh, I did the same thing earlier.

[21:18] <Aankhen``> My memory is a fascinating thing.

[21:19] <Aankhen``> Are all your modules on freepan for P6?

[21:19] <svnbot6> r8304, autrijus++ | * bump pdd04 to version 1.5.

[21:19] <svnbot6> r8305, bernhard++ | At the Austrian Perl Workshop it was reported, that the 'bc' config test

[21:19] <svnbot6> r8305, bernhard++ | hangs on Win32. So this check is now only performed on linux, as the output

[21:19] <svnbot6> r8305, bernhard++ | of the will only be used in a future 'languages/bc'.

[21:19] <svnbot6> r8306, mdiep++ | Start an extend.pod.

[21:20] <iblech> Err?

[21:21] <putter> autrijus: I'm just going to do a double check.  "S.P.Jones" ok, etc.  will ping.

[21:22] <Aankhen``> ?eval role Foo { }

[21:22] <evalbot6> undef 

[21:23] <Aankhen``> ?eval role Foo { method bar { 42 } }

[21:23] <evalbot6> undef 

[21:23] <autrijus> putter: I think I can stay up for maybe 38 more minutes :)

[21:23] <Aankhen``> ?eval role Foo { method bar { 42 } }; my $foo is Foo; $foo.bar

[21:23] <evalbot6> Error:  unexpected "i" expecting "=", ":=", "::=", ";" or end of input 

[21:23] <Aankhen``> ?eval role Foo { method bar { 42 } }; my $foo does Foo; $foo.bar

[21:23] <evalbot6> Error:  unexpected "d" expecting "=", ":=", "::=", ";" or end of input 

[21:23] <Aankhen``> ?eval role Foo { method bar { 42 } }; my $foo; $foo does Foo; $foo.bar

[21:23] <evalbot6> Error: Unknown syntactic construct: Syn "does" [Var "$foo",Var ":Foo"] 

[21:23] <Aankhen``> Darn.

[21:27] <chip> You can't just say C<$foo does Foo>, can you?

[21:28] <chip> maybe C<my $foo of Any does Foo>

[21:28] <chip> eval role Foo { method bar { 42 } }; my $foo of Any does Foo; $foo.bar

[21:28] <Aankhen``> G'night.

[21:28] <chip> ?eval role Foo { method bar { 42 } }; my $foo of Any does Foo; $foo.bar

[21:28] <evalbot6> Error:  unexpected "o" expecting "=", ":=", "::=", ";" or end of input 

[21:28] <chip> hm.

[21:29] <chip> ?eval role Foo { method bar { 42 } }; class Bar does Foo {}; my Bar $foo; $foo.bar

[21:29] <evalbot6> Error: No compatible subroutine found: "&bar" 

[21:30] <chip> ?eval role Foo { method bar { 42 } }; class Bar { does Foo }; my Bar $foo; $foo.bar

[21:30] <evalbot6> Error: No compatible subroutine found: "&does" 

[21:30] <chip> thought not

[21:30] <chip> the Any thing is silly

[21:34] <chip> iblech: ping

[21:34] <iblech> chip: Pong

[21:35] <chip> Hm.

[21:35] <chip> I was about to make a feature request: only one karma bump per commit.

[21:35] <chip> But now I wonder ... maybe it's a good idea to encourage long commit messages.  :-,

[21:36] <chip> so ... n/m

[21:36] <chip> thanks

[21:37] <iblech> We had the same discussion here :) Our arguments for leaving it as it is were 1. long commit messages bonus, 2. vertical alignment (even if we s/\+\+/  /, the commit messages won't vertically align when seen in a proportional font)

[21:38] <putter> autrijus: pasted.  I yanked the month from subcontinuations because two seem to be in use (Feb and July).

[21:38] <autrijus> 'k

[21:38] <autrijus> pasted?

[21:39] <putter> pastling seems slow... http://sial.org/pbot/10961

[21:39] <autrijus> putter: how do I use this?

[21:39] <autrijus> save it to pugs.bib

[21:40] <autrijus> that's all?

[21:40] <autrijus> do I need to say \cite or some such?

[21:40] <putter> \cite{*} just above the \bibliography

[21:40] <putter> oops,

[21:40] <putter> \nocite{*}

[21:40] <kelan> nothingmuch: thanks for your help. i understand how `interpret` with `local` is working 

[21:41] <putter> complete:

[21:41] <putter> \nocite{*}

[21:41] <putter> \bibliography{pugs2}

[21:42] <putter> assuming paste is in a new file pugs2.bib.  it didnt look like pugs.bib was being used.

[21:42] <putter> k?

[21:43] <nothingmuch> kelan: goody!

[21:43] <nothingmuch> oh wow! i get to do 3 way diff-merge!

[21:43] <autrijus> putter: I went for direct citing

[21:44] <nothingmuch> Herkamire from #forth helped maked chapter 7 more grokkable, and Aankhen fixed some spelling errors

[21:44] <autrijus> works beautifully!

[21:44] <autrijus> putter++ !

[21:44] * putter would have chosen better ids... ;)

[21:44] <putter> weee.  that was fun. ;)

[21:45] <autrijus> =)

[21:45] <nothingmuch> hola lightste1 

[21:45] <autrijus> re-uploaded everything

[21:45] <autrijus> putter: check to see if it makes sense?

[21:46] <putter> I used the tar file you created... dont have feather access...

[21:46] <autrijus> oh oh

[21:46] <autrijus> check my journal

[21:46] <putter> k

[21:48] <putter> oh, note the tar'ed Makefile didn't automagically update ps and pdf... dont accidentally submit the wrong version! .)

[21:48] <autrijus> ok :)

[21:50] <nothingmuch> wow, darcs is so cool

[21:50] <xerox> Indeed!

[21:51] <nothingmuch> i love the way it handles conflicts

[21:51] <nothingmuch> with merge patches really being that

[21:51] * putter wonders why \keywords and \terms got trailing {} which werent in the sigplanconf template...

[22:05] <autrijus> putter: because I adopted this with the old hs-plugins tex

[22:06] <autrijus> but looks like it's still okay

[22:06] <autrijus> anyway. I'll sleep now

[22:06] <autrijus> happily we beat the deadline

[22:06] <autrijus> #perl6++

[22:06] <nothingmuch> ciao!

[22:06] <nothingmuch> huraah!

[22:06] <autrijus> I'll finally return to coding ;)

[22:06] <autrijus> two weeks is a bit too long

[22:06] <nothingmuch> sleep coding?

[22:06] <autrijus> I mean from tomorrow on

[22:06] <nothingmuch> sure...

[22:06] <autrijus> (although I think hw2005 really forced me to think things thru, so it was still worth it)

[22:07] <nothingmuch> where and when is hw going to be, btw?

[22:07] <autrijus> nothingmuch: http://www.cs.uu.nl/~daan/hw2005/

[22:08] * autrijus waves... &

[22:10] <putter> good night autrijus.

[22:11] <iblech> http://m19s28.vlinux.de/iblech/pugs-macros.patch # As OpenFoundry is still down

[22:11] <iblech> Ok, work done, gonna sleep, too :)

[22:11] <iblech> Night #perl6

[22:11] * putter thinks "macros !?!" O.O ;)

[22:12] <iblech> Yeah, and the tests pass! :)

[22:12] <iblech> Anyway, sleep &

[22:15] <wolverian> whoa iblechbot 

[22:15] <wolverian> er

[22:15] <wolverian> iblech++

[22:16] <putter> something for the infinite todo list... an emacs p6 mode which hides sigils, colorizing symbols instead.

[22:17] <chip> putter: down that path lay ColorForth.  just make sure you've left a will.

[22:17] * Boogie_ at home & going to bed. :)

[22:18] <nothingmuch> forth... MMM!

[22:18] <nothingmuch> otoh, colorforth and emacs share some qualities

[22:19] <putter> I noticed my ruby code is better abstracted than my p6, my p6 than my p5.  It appears I'm using visual complexity as a proxy for semantic complexity... so things dont get refactored as much.

[22:19] <nothingmuch> like being an OS with a language, an IDE, a UI, etc ... all at the same time

[22:19] <nothingmuch> putter: identify what parts of ruby give you that, and post to p6l?

[22:26] <Khisanth> there is also other things to consider, do you know p6 as well as ruby? :)

[22:26] <putter> yes, ColorForth was... amusing.

[22:28] <putter> nothingmuch: I think they are all known issues.  I wouldn't buy simpler syntax at the cost of simpler semantics.

[22:29] <putter> Though I expect p6 will get dialects which, for instance, try to make barewords scalars.  I almost never use explicitly name nonscalar variables anymore...

[22:29] <putter> Hmm, that may be a case of perl huffman encoding perhaps beginning to lag use...?

[22:31] <putter> Khisanth: re groking p6 vs ruby, true.  Also, I find myself pugs defensive.  If something misparsed without parens, even months ago, I use parens...

[22:33] <putter> An alternative to colorized idents might simply be less visually significant sigils.  Hmm, maybe perl-mode will let me use a different face for the sigils themselves.

[22:34] <putter> Though I've been burned a couple of times on ./foo vs .foo.  That could be nice in color, so i could see the patterns of usage within a class...

[22:35] <putter> aside from the cookbook, I wonder if we could use a style guide?

[22:37] <putter> nothingmuch: btw, I've really been enjoying harrorth.  Thanks! ;)

[22:40] * nothingmuch returns from shower

[22:40] <nothingmuch> barewords - i think I agree for module code

[22:40] <nothingmuch> but $foo is still highly identifyable to me (awk, bash, perl)

[22:40] <nothingmuch> so i'd actually like to keep it in "my" perl  6

[22:40] <nothingmuch> and in scripts i do find myself using @ a lot

[22:41] <nothingmuch> as for harrorth - that's wonderful news! appearently autrijus is enjoying it from a mentor perspective, and you, kelan and even leo are avid readers

[22:41] <nothingmuch> =)

[22:42] <putter> :)

[22:43] <nothingmuch> comments are very welcome, by the way

[22:43] <nothingmuch> feel free to swamp me with grammer fixes, semantic fixes, or suggestions for future directions

[22:50] <putter> 'k

[23:15] <nothingmuch> anyone quick: http://nothingmuch.woobling.org/pugs_test_status/ <-- not updated because openfoundry is down?

