[00:26] <nothingmuch> geoffb: pong

[00:26] * geoffb waggles his eyebrows:

[00:27] <geoffb> : BETWEEN DO I . LOOP ;

[00:27] <geoffb>  OK

[00:27] <geoffb> 10 0 BETWEEN

[00:27] <geoffb> 0 1 2 3 4 5 6 7 8 9  OK

[00:27] <geoffb> It bloody works

[00:27] <geoffb> FINALLY

[00:27] * wolverian installs goo

[00:28] <geoffb> I figured you might appreciate that, nothingmuch :-)

[00:34] <nothingmuch> ouch

[00:34] * nothingmuch didn't want to implement do/loop

[00:34] <nothingmuch> begin/while were working so well that I thought they were enough ;-)

[00:35] <geoffb> :-)

[00:35] <nothingmuch> anyway, sleepy time

[00:35] <geoffb> do/loop are actually quite a pain

[00:35] <geoffb> g'night

[00:48] *** f0rth_ is now known as forth

[00:51] <Alias_> autrijus: ping?

[00:54] <autrijus> Alias_: pong

[00:54] <Alias_> You are on the list of "naughty presenters that haven't registered for OSDC"

[00:54] <Alias_> Wanna go register, and I'll confirm you to the mailing list

[00:54] <autrijus> but I already did!

[00:55] <Alias_> ok, will let them know

[00:55] <autrijus> danke

[01:01] *** Lopo_ is now known as Lopo

[01:01] <Alias_> autrijus: There are no records of you registering, please re-register

[01:04] <Khisanth> would setting ghc_heap_size to 200m be ok?

[01:04] <autrijus> Alias_: that can't be :/

[01:04] <autrijus> a sec

[01:05] <autrijus> Alias_: I fwd'ed you the system mail

[01:06] <Alias_> ok

[01:06] <autrijus> (I finished the registration upon receiving Scott's prodding, so that's within 1 hour)

[01:07] <autrijus> maybe it takes some time to propagate?

[01:08] <Alias_> So it's done in the last hour?

[01:08] <geoffb> Hey, autrijus, welcome back!

[01:47] <stevan> autrijus: ping

[01:47] <Alias_> autrijus: osdc list says thanks

[01:56] <svnbot6> r8049 | fglock++ | * misc/Parser-Mini/parser.p6 - 'pugs parser.p6 parser.p6' works

[01:57] <stevan> fglock++ # very nice

[01:57] <fglock> stevan: that was the easy part

[01:58] <fglock> integrating with the runtime looks really tough

[01:58] <stevan> fglock: I started some of that with the Perl6-ObjectSpace work

[01:59] <fglock> I was reading it other day - maybe I can use that as a starting point

[01:59] <stevan> look at the metamodel implementation

[01:59] <fglock> but I'm trying to program in p6 instead of p5

[01:59] <stevan> hmmm

[01:59] <stevan> thats trickier,.. 

[02:00] <stevan> although I suppose the P6ObjectSpace could be ported to a simplified version of p6

[02:00] <stevan> that was one of the things autrijus and I talked about

[02:01] <fglock> I think I'll not use pugs's objects - maybe something like perl5/Perl6-Container, but in p6

[02:02] <stevan> fglock: we could program like it was the late 70s, and use ADTs and modules :)

[02:02] <stevan> p6objectspace is based on your p6 container work too

[02:03] <stevan> I tried to determine the smallest set of "things" I would need to create the metamodel

[02:06] <fglock> does parrot need a metamodel? it already handles objects

[02:06] <stevan> I am not sure the Parrot object model will support all the features that p6 needs

[02:06] <stevan> not to mention ruby, python, etc

[02:06] <stevan> I think it can serve as a base, but there will need to be a metamodel atop it for each language

[02:07] <leo> fglock: parrot should support a lot of p6 objects (it's designed for it)

[02:07] <stevan> leo: what about roles?

[02:08] <leo> that's up to the compiler (+ parrot to put parts together probably)

[02:08] <stevan> leo: yes, that is what I was thinking,.. but we will need some runtime support for roles as well

[02:09] <stevan> do you envision the p6 runtime to be purely parrot? 

[02:09] <leo> sure - we need some more interface defintion, which isn't there yet, I think

[02:10] <stevan> so there will be no p6 runtime, it will all be compiled down to parrot then

[02:10] <fglock> p6 = compiler + runtime. It looks like we can have a very simple parser if the runtime is "fat" enough.

[02:11] <fglock> the division between compiler and runtime is not much clear to me

[02:11] <leo> different parts will compile down to different levels (a lot to parrot) 

[02:11] <stevan> my concern is that without a p6 runtime which lives on top of Parrot, we will not have the enough object reflection and introspection capabilities

[02:11] <leo> there is for sure a p6 runtime too

[02:11] <stevan> oh,.. ok :)

[02:12] <stevan> but implemented on parrot (PIR, PMC, or some other 3 letter acronym)  

[02:12] <leo> it's just a problem of: how much does the compiler know about the runtime and then use that

[02:13] <stevan> I always saw the compiler as doing a lot of "desugaring" of the more complex p6 syntax

[02:13] <stevan> and then the runtime would not need bear that complexity

[02:13] <leo> sure, but you can desugar down to SKI or some such

[02:13] <stevan> SKI?

[02:15] <leo> http://en.wikipedia.org/wiki/Unlambda

[02:16] <leo> also in parrot languages

[02:16] <stevan> this would fit nicely with my idea of a metamodel in pure lambda calc

[02:17] <leo> yes but you might have a look at execution times ;-)

[02:17] <stevan> :)

[02:17] <stevan> leo: I stumbled on this recently, it might interest you : http://www.coyotos.org/docs/bitc/spec.html

[02:18] <stevan> it is a scheme like dialect which is meant to be as low level as C

[02:18] <stevan> might be an interesting parrot language

[02:18] <leo> such theories and abstractions are really nice, but run some benchmarks with the abstract model

[02:20] <leo> stevan: BitC has a formal semantics, static typing, ...

[02:21] <leo> that's neither perl6 nor parrot nor other clients of parrot

[02:21] <stevan> yes, but could parrot support it possibly?

[02:22] <stevan> or is that low-level of access not possible 

[02:22] * stevan is not very familiar with parrot past the mailing lists and O'Reilly books

[02:23] <leo> when ypu compile down that low-level you are at c-- or assembler or such

[02:23] <stevan> ah,.. okay

[02:24] <leo> parrot with objects, closures, continuations, exceptions, ... and unicode string support is far above that low-level stuff

[02:24] <stevan> true :)

[02:25] <fglock> translating p6 runtime to Parrot looks like a good idea, but I wonder how difficult it would be to maintain it

[02:25] <stevan> hmmm,,.. trying to sync two moving targets at once,.. 

[02:26] <leo> well, we are always trying to have a stable PIR interface, but we aren't at 1.0 yet

[02:27] <stevan> leo: the movement of the p6l end is more the problem at this point 

[02:27] <leo> OTOH and e.g. I wrote a PIR presentation program for YAPC::Paris, which still is running (ok - after chaning one line)

[02:28] <leo> stevan: exactly

[02:28] <stevan> the movement on that end makes even slight movements on the parrot end seem bigger

[02:28] <leo> p6l should take a freeze, really

[02:28] <stevan> :)

[02:28] <leo> and define the language, which is necessary to be name 6.00

[02:28] * stevan thinks maybe language design is just too much fun

[02:29] <leo> well they can define 6.1.0 then

[02:29] <obra> leo: send that to me along with why it'll help you get more work done

[02:29] <leo> or in the meantime

[02:29] <stevan> switch to ruby?

[02:30] <leo> obra: this doesn't parse for me at 3,5 am

[02:30] <stevan> obra: you mean to freeze the language design?

[02:31] <fglock> stevan: how about targetting Ruby? Are the runtimes reasonably compatible/fast?

[02:32] <stevan> fglock: no, I mean switch from p5 to Ruby for everyday usage

[02:32] <Khisanth> hmm

[02:32] <leo> obra: I don't have much problem with it *yet* - pugs has it or any other implementation

[02:32] <Khisanth> ?eval 1 == any( 1, 2, 3, 4 )

[02:32] *** evalbot_8048 is now known as evalbot_8049

[02:32] <evalbot_8049> bool::false 

[02:32] <Khisanth> hrm

[02:32] <stevan> fglock: there is a RubyVM out there which presents an interesting target

[02:32] <Khisanth> ?eval 1 eq any( 1, 2, 3, 4 )

[02:32] <evalbot_8049> bool::false 

[02:33] <stevan> I don't recall the name though

[02:33] <Khisanth> ?eval any(1,2,3,4,5)

[02:33] <wolverian> Khisanth, evalbot still has problems with junctions

[02:33] <evalbot_8049> 1 

[02:33] <stevan> fglock: http://www.atdot.net/yarv/

[02:33] <fglock> I mean, emit Ruby from the compiler

[02:34] <Khisanth> wolverian: oh right I think it's always collapsing them or something

[02:34] <stevan> fglock: emitting YARV instructions might easier 

[02:34] <wolverian> it always takes the smallest value or something like that

[02:34] <wolverian> what that is in boolean logic don't ask me

[02:34] <wolverian> ?eval 3 > any 2,3,4,5,6

[02:34] <evalbot_8049> bool::false 

[02:34] <stevan> fglock: the instruction table is quite nice http://www.atdot.net/yarv/insnstbl.html (only the first 50 are relevant, the rest are optimizations)

[02:35] <wolverian> ?eval 3 > 2,6

[02:35] <evalbot_8049> (bool::true, 6) 

[02:35] <wolverian> erm.

[02:35] <wolverian> I'll go sleep :)

[02:35] <leo> stevan: have a look at lua opcodes

[02:36] <stevan> leo: no I havent

[02:36] <leo> you don't need much indeed

[02:38] <leo> see ya & #bed

[02:38] <stevan> nite

[02:39] * stevan is signing off as well &

[02:40] <fglock> nite all

[02:40] <fglock> ?eval ( 1 == all(1..5) ).values

[02:40] <evalbot_8049> (bool::false, bool::true) 

[02:41] <fglock> ?eval ( 1 == any(1..5) ).values

[02:41] <evalbot_8049> (bool::false, bool::true) 

[03:35] <buu> I like how it returns false and true

[03:35] <buu> So you can take your pick.

[03:40] <Khisanth> hmm I am glad . will no longer be used for string concat

[03:40] <Khisanth> can never be sure if there is a . or if it's dirt on my screen :/

[05:06] *** Emacs is now known as b00t

[06:15] *** khisanth_ is now known as Khisanth

[06:33] <svnbot6> r8050 | Darren_Duncan++ |  r1064@Darren-Duncans-Computer:  darrenduncan | 2005-12-01 22:27:11 -0800

[06:33] <svnbot6> r8050 | Darren_Duncan++ |  /ext/Rosetta-Incubator : updated Locale::KeyedText version to 1.71.0, as 1.70.0 was released

[08:17] <Khisanth> ?eval my $foo = "foo bar"; my @foo = <<$foo>>;

[08:17] *** evalbot_8049 is now known as evalbot_8050

[08:17] <evalbot_8050> ["foo", "bar"] 

[08:18] <GeJ> ?eval my $foo = "foo bar"; my @foo = 􏿽xAB$foo􏿽xBB;

[08:18] <evalbot_8050> ["foo bar",] 

[08:19] <Khisanth> I don't think the eval bot likes unicode

[08:19] <devin> why trailing comma in the [] ?

[08:19] <devin> (and that wasn't unicode, it was iso-8859-1)

[08:19] <GeJ> Well, I can get that, but in theory, aren't those supposed to be the same?

[08:45] <Khisanth> GeJ: yes

[08:50] <GeJ> devin: I think Khisanth meant not in the ASCII 7 bits chars

[08:51] * Khisanth has his encoding set to utf8

[08:51] <Khisanth> regardless it's hard to tell what encoding someone is using just by the characters :)

[08:51] <GeJ> did anyone get news from The Man? did he get at the Aussies yet?

[09:25] <r0nny> yo

[09:43] <autrijus> GeJ: I'm going to be in the airport in 1hr

[09:44] <autrijus> then checkback after ~20 hours

[09:44] <autrijus> finally free from $job, thank $deity

[09:46] <autrijus> that's the good news... bad news is I havn't even started pacing.

[09:47] <autrijus> packing, even.

[09:47] <obra>  pacing?

[09:47] * autrijus goes packing.

[09:47] <obra> ah

[09:47] <obra> go pack

[09:48] <GeJ> autrijus: well, enjoy the flight and don't watch the same movie 4 times. :)

[09:49] <autrijus> ok :)

[10:01] *** davidra is now known as jp-autark

[15:54] <xerox> Hi.

[15:55] <r0nny> re

[15:55] <xerox> Do you remember that video of that guy doing some presentation in takashi style?

[15:55] <xerox> It was about... a new kind of "identity" which could run on many site or something.

[15:59] <xerox> autrijus: don't you remember?

[16:03] <xerox> Ah!

[16:03] <xerox> identity.

[17:26] * stevan just discovered seaside (http://www.seaside.st/)

[17:26] <stevan> very nice stuff

[17:57] <nothingmuch> yeah, it's cool

[18:11] <fglock> parser.p6 doesn't run in Parrot - "error:imcc:syntax error, unexpected INTC, expecting '('"  :(

[18:41] <r0nny> yo

[20:17] <stevan> leo: ping

[20:18] <leo> stevan: pong

[20:22] <stevan> leo: what is the best resource for PIR 

[20:23] <leo> docs and existing code 

[20:23] <stevan> ok, any recommendations on what code to read?

[20:23] <leo> generally or regarding a specific topic?

[20:24] <stevan> generally

[20:24] <leo> I'd start with docs/compiler_faq.pod

[20:25] <leo> then for some existing code to get a feeling about it: examples/pir/sudoku.pir

[20:26] <leo> the latter of course only, because I've written it ;-)

[20:27] <stevan> :)

[20:28] <leo> or compilers/pge/*.pir

[20:28] <leo> or compilers/tge/*.pir

[20:28] <stevan> what is TGE?

[20:28] <leo> tree grammar engine 

[20:29] <leo> L::AG in pir

[20:29] <stevan> cool

[20:29] <stevan> is the O'Rielly book (2nd edition) good.,.. or hopelessly out of date?

[20:30] <leo> it's good when it's about basics and philosphy ... 

[20:30] <stevan> ok

[20:30] <stevan> does PIR have lists? 

[20:30] <leo> PASM & PIR basics still apply though

[20:30] <leo> define list ;-)

[20:31] <stevan> something akin to Perl 5's @arrays

[20:31] <leo> sure - a lot of these *<type>Array

[20:32] <stevan> k

[20:33] <leo> see classes/*.pmc

[20:34] <stevan> oh nice

[20:37] <stevan> is there a place where the APIs for the classes/*.pmc are documented?

[20:37] <stevan> my C fu is weak

[20:49] <leo>  perldoc docs/pdds/clip/pdd02_vtables.pod 

[20:50] <leo> or just perldoc classes/<which>.pmc

[20:51] <DesreveR> yo

[20:51] <leo> but from PIR you don't deal with PMCs directly, you are using them via opcodes

[20:51] <leo> e.g.

[20:52] <leo> ar = new  .FixedPMCArray

[20:52] <leo> ar = 5 # set size

[20:52] <leo> ar[0] = b

[20:52] <DesreveR> yo

[20:52] <DesreveR> i got a problem with method-dispatching on pugs

[20:53] <leo> stevan: more on #parrot (irc.pobox.com)

[20:53] <DesreveR> http://rafb.net/paste/results/x1U6eP49.html <- allways fails

[20:56] <DesreveR> anyone got an idea?

[20:59] <DesreveR> -_-

[21:01] <Khisanth> perhaps not yet implemented?

[21:06] <DesreveR> ?

[21:10] <DesreveR> how to get it work ?

[22:36] <luqui> stevan, ping

[22:37] *** khisanth_ is now known as Khisanth

[23:01] <Khisanth> ?eval class foo { has $.baz; method doit() { if $counter++ < 10 { $.baz.doit } } } my foo $t1.=new;

[23:01] <evalbot_8050> \foo.new(); 

[23:01] <Khisanth> oO that is a weird syntax

[23:01] <Khisanth> ?eval class foo { has $.baz; method doit() { if $counter++ < 10 { $.baz.doit } } } my foo $t1.=new; $t1.perl

[23:01] <evalbot_8050> "\\foo.new();" 

[23:02] <luqui> the semicolon especially

[23:02] <Khisanth> I mean the .=

[23:02] <luqui> oh

[23:02] <Khisanth> which semicolon were you refering to?

[23:02] <luqui> ?eval class foo { }  my foo $t1 .= new;  $t1

[23:02] <evalbot_8050> \foo.new(); 

[23:02] <luqui> ?eval class foo { }  my foo $t1 .= new;  [3,$t1]

[23:02] <evalbot_8050> [3, foo.new();] 

[23:02] <luqui> that one!

[23:02] <luqui> fixing

[23:03] <Khisanth> heh yeah that is an odd one

[23:04] <Khisanth> btw, have you ever gotten an error message about system call interrupted while doing a "make unoptimized" ?

[23:04] <Khisanth> after which the build fails

[23:04] <luqui> nope

[23:26] <svnbot6> r8051 | luqui++ | There should not be a semicolon in dumped structures  (Fixed for

[23:26] <svnbot6> r8051 | luqui++ | Foo.new.perl).

[23:29] <Khisanth> hmm

[23:30] <Khisanth> ?eval class foo { has $.baz; method doit() { if $counter++ < 10 { $.baz.doit } } } my foo $t1.=new; $t1.baz.perl

[23:30] *** evalbot_8050 is now known as evalbot_8051

[23:30] <evalbot_8051> "\\undef" 

[23:30] <Khisanth> ?eval class foo { has foo $.baz; method doit() { if $counter++ < 10 { $.baz.doit } } } my foo $t1.=new; $t1.baz.perl

[23:30] <evalbot_8051> "\\undef" 

[23:31] <Khisanth> hrm so what was DesreveR testing for?

[23:31] * luqui doesn't think he was here when that happened

[23:39] <svnbot6> r8052 | luqui++ | It seems that svnbot6 would only correctly report to a single channel.  

[23:39] <svnbot6> r8052 | luqui++ | Fixed (untested).

[23:43] <Khisanth> luqui: http://rafb.net/paste/results/x1U6eP49.html that

[23:44] <luqui> ahh, that code was infinite looping

[23:44] <luqui> it was calling doit() on self instead of $.baz

[23:45] <luqui> ?eval my $counter = 0; class foo { has $.baz;  method doit() { if $counter++ < 10 { $.baz.doit } } } say foo.new.doit();  say $counter

[23:45] *** evalbot_8051 is now known as evalbot_8052

[23:45] <evalbot_8052> OUTPUT[ 11 ] bool::true 

[23:45] <luqui> and that bug still exists

[23:45] <luqui> it seems...

[23:46] <luqui> ?eval my $counter = 0; class foo { has $.baz;  method doit() { if $counter++ < 10 { $.baz.doit } } } say foo.new(baz => 42).doit();  say $counter

[23:46] <evalbot_8052> Error: Can't modify constant item: VUndef 

[23:46] <luqui> interesting

[23:47] <luqui> ?eval my $counter = 0; class foo { has $.baz;  method doit() { if $counter++ < 10 { $.baz.doit } } } say foo.new(baz => undef).doit();  say $counter

[23:47] <evalbot_8052> OUTPUT[ 11 ] bool::true 

[23:48] <luqui> 42.doit

[23:48] <luqui> ?eval 42.doit

[23:48] <evalbot_8052> Error: No such method: "&doit" 

[23:49] <Khisanth> why would that be calling it on self?

[23:50] <luqui> bug?

[23:51] <Khisanth> but what is $.baz.doit() expected to call?

[23:52] <luqui> "no method found: undef.doit"

[23:54] <luqui> man, if I have to look at findSub again, I think I'll go blind

[23:55] <luqui> is there a way to tell unix sort to sort in place?

[23:56] <luqui> yes :-)

