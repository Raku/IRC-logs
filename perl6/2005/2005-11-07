[01:56] <christopher> Is the new piping operator <== really a no-op?  Added for symmetry with ==> ?

[02:08] <dduncan> fyi, I'm now using svk for the first time, to develop pugs ... to cut down on server load for now, I'm just syncing from r7520 (release 6.2.10) to the present, especially if I want to retry differently later ... when I'm more solid with svk, maybe in a month, I'll wipe the local and sync over all revs, so I have the whole thing long term

[02:35] <christopher> I think piping for things that don't return the lvalues they modify (e.g. chomp) would be more interesting.

[07:21] <dduncan> seems svnbot is out of commission ... who runs it?

[07:33] <dduncan> fyi, that was my first commit->push using svk ... svk seems to work fine so far

[07:35] <Khisanth> hmm where did svnbot go?

[07:35] <dduncan> my question also

[07:35] <dduncan> but evalbot_7891 is the result of my said push

[07:36] <Khisanth> jabbot: seen svnbot6

[07:36] <jabbot> Khisanth: svnbot6 was seen 13 hours 8 minutes 1 seconds ago

[07:36] <dduncan> oh the humanity!

[07:40] <dduncan> actually, 7892

[07:40] <dduncan> was a bug fix to previous

[08:51] <svnbot6> r7890 | stevan++ | Perl6::ObjectSpace 

[08:51] <svnbot6> r7890 | stevan++ | * &add_attr added to opaque to support adding new attributes to an existing object

[08:51] <svnbot6> r7890 | stevan++ | * Bootstrap now includes Module and Package as well

[08:51] <svnbot6> r7890 | stevan++ |     - added some tests related to these additions

[08:51] <svnbot6> r7891 | Darren_Duncan++ |  r373@Darren-Duncans-Computer:  darrenduncan | 2005-11-06 23:17:22 -0800

[08:51] <svnbot6> r7891 | Darren_Duncan++ |  /ext/Rosetta-Incubator : added shell for Rosetta::Engine::Native, a self-contained reference implementation of a Rosetta Engine, that implements an ACID-compliant relational database in pure perl

[08:51] <svnbot6> r7892 | Darren_Duncan++ |  r377@Darren-Duncans-Computer:  darrenduncan | 2005-11-06 23:39:11 -0800

[08:51] <svnbot6> r7892 | Darren_Duncan++ |  /ext/Rosetta-Incubator : oops, forgot to up the test count

[09:36] <azuroth> evening

[09:37] <dduncan> evening

[09:38] <azuroth> what's up?

[09:39] <dduncan> well, for one thing I have made my first successful commit ... to 2 repositories ... using svk ... prior to that, it was all svn

[09:39] <svnbot6> r7893 | Darren_Duncan++ |  r725@Darren-Duncans-Computer:  darrenduncan | 2005-11-07 01:35:53 -0800

[09:39] <svnbot6> r7893 | Darren_Duncan++ |  /ext/Rosetta-Incubator : minor adjustments

[09:39] <dduncan> hopefully the switch in clients should ease my development from now on, though installing svk was trickier than installing svn

[09:39] <dduncan> viva offline commits!

[09:40] <azuroth> oh, cool

[09:40] <dduncan> and otherwise having a local copy of the change history is good too

[09:41] <dduncan> that's the most important thing for me today ... what I actually committed (revs 7891..3) and what they mean is less important

[09:41] <dduncan> the good stuff should come over the next week

[09:43] <azuroth> what's ACID compliance like?

[09:43] <azuroth> I mean... is it like, SQL, joins and stuff?

[09:43] <dduncan> it means that either all of the statements in a transaction succeed, or no lasting effects are made, and a successful commit guarantees data is saved ... etc

[09:43] <azuroth> ahh

[09:43] <dduncan> ACID is all about the reliability promise

[09:44] <azuroth> cool

[09:44] <r0nny> morning

[09:44] <dduncan> morning

[10:28] <r0nny_> yo

[10:28] <azuroth> hey

[10:29] *** r0nny_ is now known as r0nny

[11:12] <r0nny> anyone here ?

[11:13] <r0nny> i want to write a function gets a parameter in c++ template-stlye - kinda foo<bar>(baz)

[11:13] <r0nny> how to do ?

[11:16] <azuroth> hmm

[11:17] <azuroth> post circumflex style?

[11:17] <r0nny> cirumflex ??

[11:18] <azuroth> () <> {} etc

[11:18] <azuroth> I think?

[11:18] <azuroth> or maybe I'm mad

[11:18] <dbrock> circumfix :-)

[11:18] <azuroth> ahh

[11:19] <azuroth> so yeah, have foo<blah> return a Sub?

[11:19] <dbrock> though calling foo<bar> "postcircumflex" is pretty funny :-)

[11:20] <r0nny> i want to create Data::Dumper and Data::Loader

[11:20] <r0nny> and they should be cappable of multipme languages

[11:20] <dbrock> the caret (^) is often called "circumflex"

[11:20] <r0nny> and the :lang<foo> syntax of eval is horrilbe

[11:20] <azuroth> ahh

[11:21] <theorbtwo> r0: Get used to it.

[11:21] <r0nny> theorbtwo: eval<lang> foo would look much nicer *think*

[11:21] <dbrock> uh, then where do you put the code to be evaluated?

[11:21] <theorbtwo> How about eval=>'lang'?

[11:22] <r0nny> net really - this is pari/hash notation

[11:23] <theorbtwo> You mean 'pair'?

[11:23] <r0nny> oh yeah

[11:23] <theorbtwo> :eval<lang> and eval=>'lang' are the same thing.

[11:23] <r0nny> not :eval<lang !!!!

[11:23] <r0nny> eval<lang> !!

[11:23] <r0nny> c++ style

[11:24] <theorbtwo> r0nny: If you want C++, you know where to find it.

[11:24] <azuroth> I'm sure I _did_ see something about post circumfix at some stage. maybe I'm dreaming.

[11:25] <theorbtwo> Otherwise, feel free to write something to do it yourself.

[11:25] <theorbtwo> postcircimfix is the correct term for things like .[] .

[11:26] <azuroth> like @a[5] ? if that returned a curried sub, you'd be half there?

[11:26] <theorbtwo> As a matter of fact, you'd be all the way there.

[11:27] <theorbtwo> Hm, I think you want a normal circimfix function, though, named eval<...>.

[11:27] <r0nny> well load or dump in my case

[11:27] <r0nny> can u gove me a protype ?

[11:28] <azuroth> hmm. you might need to use $eval instead of eval though, with postcircumfix?

[11:29] <theorbtwo> r0nny: I'm not going to spend any effort looking through documentation for someone who won't spend any effort with me to type proper English.

[11:29] <r0nny> hmm

[11:29] <theorbtwo> Try searching for the term "postcircumfix" in the synopsies.

[11:30] <theorbtwo> I don't mind that your spelling is bad.  I do mind that you can't be bothered to type the word "you".

[11:31] <theorbtwo> ...and also that you seem to be saying "I don't like foo, it /must/ be bar" a lot, when foo is not clearly better or worse then foo, and seem unwilling to put forth any effort into fixing your own problem.

[11:31] <theorbtwo> (And I'm in a bad mood today due to having to get up early.)

[11:31] <r0nny> oh

[11:31] <dbrock> r0nny: what is your code going to look like?

[11:32] <dbrock> I assume you're not writing another eval

[11:32] <r0nny> in writing Data::Dumper and Data::Loader

[11:33] <dbrock> right, I don't know those modules, so could you just show me an example?

[11:33] <r0nny> then u will use $foo = Load<lang> $str or say Dump<lang> $foo

[11:33] <dbrock> I see

[11:33] <r0nny> actually they aren written yes

[11:33] <r0nny> yet

[11:34] <theorbtwo> Why do you want that, instead of load('lang', $str)?

[11:34] <theorbtwo> Or load_lang($str)?

[11:34] <azuroth> oh by the way, probably a stupid question, but is the svn broken?

[11:34] <r0nny> 5 minutes ago it wasnt

[11:37] <azuroth> hmm. I wonder what's up with my checkouty thing then

[11:37] <r0nny> after reading in the quickref i think its best to do it eval style atm

[11:48] <r0nny> is there a way, to have a random amount of parameters before a named parameter ?

[11:50] <azuroth> like, ($a, $b, ?$c, ?$d, +$e) ?

[11:52] <r0nny> kinda like `foo $foo, $bar, $baz, :param<val>`

[11:54] <azuroth> how random does the amount of parameters have to be? ;-p

[11:54] <r0nny> range from 1 to as much as the user wants to

[11:55] <azuroth> nah, slurpy always goes after named paras I think

[11:55] <azuroth> wait... maybe not

[11:56] <r0nny> btw - how does the param-list thread a pair at the end ? - i could use unshift

[11:57] <r0nny> hmm

[11:57] <r0nny> darn - no way to set a default param

[11:58] <azuroth> thread a pair at the end?

[11:58] <r0nny> we-- how is it handled

[11:59] <azuroth> of a sub with no signature..? hmm, I'm not sure

[12:00] <r0nny> stilis there a way to have a slurpy array, and a named param with default value ?

[12:02] <azuroth> you could probably use //= in the body for default value

[12:03] <r0nny> .//= ??

[12:04] <azuroth> ?eval sub foo(+$para) { $para //= "blue"; say $para; }; foo; foo :para("red");

[12:04] <evalbot_7893> Error:  unexpected "+" expecting formal parameter, ":" or ")" 

[12:04] <azuroth> eek. maybe not

[12:04] <azuroth> well //= is like... basically, if it's not defined, set it to equal this

[12:06] <r0nny> btw- what dos the + in  foo(+$para) mean

[12:06] <azuroth> I'd better not say too much though, because someone else will come along and tell me how wrong I am

[12:06] <azuroth> I thought it meant it was named, and not positional at all

[12:07] <r0nny> they have : for this

[12:07] <r0nny> read quickref/sub

[12:07] <azuroth> hmm, ok. I must be reading the old stuff

[12:08] <azuroth> ?eval sub foo(:$para) { $para //= "blue"; say $para; }; foo; foo :para("red");

[12:08] <evalbot_7893> Error: Can't modify constant item: VUndef 

[12:08] <azuroth> aww.  I guess : makes more sense, anyway

[12:09] <r0nny> ?eval sub foo(:$para="blue") { say $para; }; foo; foo :para("red");

[12:09] <evalbot_7893> blue parared bool::true 

[12:09] <r0nny> ?eval sub foo(:$para="blue") { say $para.perl; }; foo; foo :para("red");

[12:09] <evalbot_7893> \"blue" ("para" => "red") bool::true 

[12:09] <r0nny> odd

[12:10] <azuroth> ?eval sub foo(:$para) { $para = $para // "blue"; say $para; }; foo; foo :para("red");

[12:10] <r0nny> ?eval sub foo(:$para='blue') { say $para.perl; }; foo; foo :para<red>;

[12:10] <evalbot_7893> Error: Can't modify constant item: VUndef 

[12:10] <evalbot_7893> \"blue" ("para" => "red") bool::true 

[12:10] <azuroth> ?eval sub foo(:$para) { my $para2 = $para // "blue"; say $para2; }; foo; foo :para("red");

[12:10] <evalbot_7893> blue parared bool::true 

[12:10] <azuroth> ahh

[12:11] <r0nny> ?eval sub foo(:$para="blue") { say $para.perl; }; foo; foo :para("red");

[12:11] <evalbot_7893> \"blue" ("para" => "red") bool::true 

[12:11] <r0nny> why does it this stuff ?

[12:11] <r0nny> (the pair)

[12:11] <azuroth> I'm not sure

[12:14] <r0nny> ?eval sub foo(Str :$para="blue") { say $para.perl; }; foo; foo :para("red");

[12:14] <evalbot_7893> \"blue" ("para" => "red") bool::true 

[12:14] <r0nny> ?eval sub foo($foo, Str :$para="blue") { say $para.perl; }; foo 1; foo 1, :para("red");

[12:14] <evalbot_7893> \"blue" \"red" bool::true 

[12:14] <r0nny> ?eval sub foo(*@foo, Str :$para="blue") { say $para.perl; }; foo 1; foo 1, :para("red");

[12:14] <evalbot_7893> Error: Slurpy array followed by slurpy scalar: MkParam {isInvocant = False, isOptional = True, isNamed = True, isLValue = True, isWritable = False, isLazy = False, paramName = "$para", paramContext = CxtItem (mkType "Str"), paramDefault = Pos (MkPos "<eval>" 1 27 1 33) (Val (VStr "blue"))} 

[12:15] <r0nny> ?eval sub foo(@foo, Str :$para="blue") { say $para.perl; }; foo 1; foo 1, :para("red");

[12:15] <evalbot_7893> \"blue" \"red" bool::true 

[12:15] <r0nny> ?eval sub foo(@foo, Str :$para="blue") { say $para.perl; }; foo 1,2; foo 1,2 :para("red");

[12:15] <evalbot_7893> \2 Error: No compatible subroutine found: "&foo" 

[12:16] <r0nny> ?eval sub foo(@foo, Str :$para="blue") { say $para.perl; }; foo 1,2; foo (1,2) :para("red");

[12:16] <evalbot_7893> \2 \"red" bool::true 

[12:16] <r0nny> intresting

[12:17] <r0nny> so i can have Dump ( random vars ) :lang<foo>

[12:17] <r0nny> whould u guys like this syntax ?

[12:17] <azuroth> hmm... not particularly

[12:18] <wolverian> I have always hated Data::Dumper::Dump(er)'s capitalisation with a passion

[12:19] <azuroth> I mainly wouldn't because your signature looks like "sub Dump(@vars, :$lang)" and you need to read... more... to see what vars is like

[12:19] <r0nny> so u want dump small ?

[12:19] <r0nny> hmm

[12:19] <r0nny> i think it would be nice this way

[12:19] <wolverian> why do we need a dump() when there's already .perl?

[12:20] <r0nny> .perl is a hack

[12:20] <wolverian> why?

[12:21] <wolverian> it should probably be .dump:lang<perl> or some such, instead of putting various languages' names directly into the class's namespace

[12:21] <r0nny> its a pugs-only thing

[12:21] <wolverian> I think larry contemplated that on p6l some month(s) ago

[12:21] <theorbtwo> I'm fairly certian .perl is a specified part of the language.

[12:21] <r0nny> really ?

[12:21] <theorbtwo> I think so.

[12:22] <wolverian> I've certainly seen larry discuss it on p6l. I'm not sure if it's in AES

[12:22] <wolverian> ah, it is. S02

[12:22] <r0nny> well - its output still sucks, and it cant deal with anything else, like dumping to yaml

[12:22] <wolverian> yes. feel free to resurrect the p6l thread, or start a new one.

[12:23] <theorbtwo> I'd certianly do that before I go around reinventing parameter passing for no reason.

[12:23] <wolverian> .dump:lang<perl> seems ok to me, or even .lang<perl> 

[12:23] <r0nny> hmm

[12:27] <r0nny> need to go to inuversity - cu later

[12:27] <azuroth> seeya

[13:25] <r0nny> re

[13:25] <r0nny> now im in class

[13:26] <theorbtwo> You got a laoptop?

[13:26] <theorbtwo> laptop?

[13:26] <wolverian> anyone here have experience with nemerle and/or boo?

[13:26] <theorbtwo> Anyway, I'm off.

[13:27] <Limbic_Region> PerlJam ping

[13:27] <wolverian> I'm off too. bye!

[13:34] <r0nny> no laptop

[13:34] <r0nny> putty in my home dir

[13:34] <r0nny> practical classes are nice

[14:02] *** Aankh|Clone is now known as Aankhen``

[14:07] *** gbel is now known as gbel-fud

[14:28] <renormalist> http://www.perl-worksHi all! There is a CfP for the German Perlworkshop 2006 at http://www.perl-workshop.de/en/2006/docs/cfp.htm. If you are interested in giving a talk about some current Perl or Perl6/Pugs topic it would be nice to see your proposal. We also think about organising hack sessions and infrastructure (eg., a Pugs-ified machine) where you can convert your CPAN module to Perl6/Pugs, poteentially together with others. If you are

[14:28] <renormalist> interested or have more ideas, mail us at wsorga@perl-workshop.de.

[14:48] <svnbot6> r7894 | kane++ |  r106@coke:  kane | 2005-11-07 15:42:43 +0100

[14:48] <svnbot6> r7894 | kane++ |  * whitespace fixes

[14:48] <svnbot6> r7894 | kane++ |      * wrap lines to 78 chars

[14:48] <svnbot6> r7894 | kane++ |      * no tabs, just spaces, thanks

[14:48] <svnbot6> r7894 | kane++ |  * added editor directives at the bottom

[14:54] <svnbot6> r7895 | kane++ |  r108@coke:  kane | 2005-11-07 15:49:25 +0100

[14:54] <svnbot6> r7895 | kane++ |  * minor layout tweaks

[14:54] <svnbot6> r7895 | kane++ |  * update change date

[14:59] <svnbot6> r7896 | iblech++ | S17draft: "is copy" or "my $x := $OUTER::x" inhibit param rebinding.

[15:11] <svnbot6> r7897 | iblech++ | * t/unspecced/siglist.t:

[15:11] <svnbot6> r7897 | iblech++ |   * Added some more complex tests.

[15:11] <svnbot6> r7897 | iblech++ |   * &sub.signature should return a Siglist object.

[15:11] <svnbot6> r7897 | iblech++ | * New t/unspecced/sub_application.t: Tests for overriding .postcircumfix:<( )>.

[15:13] *** whiteg_ is now known as whiteg

[15:14] <wolverian> heh, is postcircumfix:<( )> called even when you don't actually use ()s in the call?

[15:23] <svnbot6> r7898 | iblech++ | * New t/unspecced/assignment.t:

[15:23] <svnbot6> r7898 | iblech++ |   * $foo = 42 is sugar for $foo.infix:<=>(42).

[15:23] <svnbot6> r7898 | iblech++ |   * ($a,$b) = (23,42) is sugar for ($a,$b).infix:<=>(42), which in turn is

[15:23] <svnbot6> r7898 | iblech++ |     sugar for infix:<,>($a,$b).infix:<=>(42) -- &infix:<,> returns an

[15:23] <svnbot6> r7898 | iblech++ |     appropriate rw proxy.

[15:24] <svnbot6> r7898 | iblech++ | * t/unspecced/sub_application.t:

[15:24] <svnbot6> r7898 | iblech++ |   * Minor fixes.

[15:24] <svnbot6> r7898 | iblech++ |   * .postcircumfix:<( )> is called even when you don't actually use ()s to

[15:24] <svnbot6> r7898 | iblech++ |     call (reminded by wolverian++).

[15:24] <wolverian> iblech++ # productive!

[15:25] <wolverian> shouldn't that be .postfix:<=>?

[15:34] *** gbel-fud is now known as gbel

[15:42] <Juerd> wolverian: Postfix =?

[15:42] <Juerd> wolverian: It'd then be postprefix, which we call infix ;)

[15:43] <Juerd>  

[15:44] <Juerd> postfix, prefix, circumfix, they're all unary. Combine two and you can get binary.

[15:44] <Juerd> The combinations are postcircumfix and infix

[15:44] <Juerd> You could see the reduce ops as precircumfix, I guess :)

[15:47] <wolverian> lhs.infix 

[15:47] <wolverian> .. just seems odd

[15:48] <svnbot6> r7899 | iblech++ | * t/unspecced/assignment.t:

[15:48] <svnbot6> r7899 | iblech++ |   * .infix:<=> should return lvalues (think ($a = $foo) = $bar).

[15:48] <svnbot6> r7899 | iblech++ |   * .infix:<=> should not be able to assign to constants.

[15:48] <svnbot6> r7899 | iblech++ | * PIL2JS: Prelude::JS::Operators:

[15:48] <svnbot6> r7899 | iblech++ |   Implemented .infix:<=> on scalars (trivial:

[15:48] <svnbot6> r7899 | iblech++ |     method infix:<=> (Item $a is rw: $b) is rw { $a = $b }

[15:48] <svnbot6> r7899 | iblech++ |   (with PIL2, this will infloop, of course, as $a = $b will call $a.infix:<=>.

[15:48] <svnbot6> r7899 | iblech++ |   But in PIL1, assignment is still a special form.))

[17:42] * autrijus safely arrived to .fi... now going to dinner. bbiab

[17:42] * autrijus ponders going to .de perl workshop after the .il one

[17:42] <obra> autrijus: will you be at the sketch?

[17:42] <leo> autrijus: meeting

[17:43] <leo> *g*

[17:43] <autrijus> ghc's simon peyton-jones at http://cdc.ioc.ee/tfp-icfp-gpce05/photos-tarmo/IMG_1588.JPG

[17:43] <autrijus> er wow. how many hours from now?

[17:43] <obra> 16 minutes, no?

[17:43] <leo> nix hours :)

[17:43] <clkao> pesky timezone

[17:43] <autrijus> okay, I'm going to take the cpan meeting instead ;)

[17:44] <autrijus> have fun at the sketch - I'm not blocking on anything else than lexpad (which is sane), and I can write PIL2->PIR using the spec (without verifying it works) anyway.

[17:45] <obra> autrijus: ok.

[17:45] <autrijus> also, need to talk about parrot obj interop seriously

[17:45] <autrijus> but doesn't have to be this week

[17:45] * PerlJam ponders peeking in on the sketch and adding yet another distraction to his day

[17:46] <autrijus> PerlJam: it'd be fun :)

[17:46] <PerlJam> I'm getting no where fast today so it won't impact my work at all  ;)

[17:47] <obra> autrijus: what should we tell/ask chip about threads?

[17:47] <gaal> liz6: thanks for the comments! I only saw them now, integrating.

[17:49] <autrijus> obra: I don't know... sanity check S17 and see how many models parrot would like to provide?

[17:49] <autrijus> dan's old "thread level" kind of breaks down with STM

[17:49] <autrijus> so needs a rethink at parrot runcore level

[17:49] <autrijus> but I'm not quite qualified to say how to start the rethinking - consult leo for more ideas

[17:52] <rafl> autrijus: Why doesn't the lazy list example from your euroscon talk work?

[17:53] <gaal> extremely low-priority style question: in function signatures, should there be a space between the routine name and the parens of the arg spec? Prelude.pm is quite inconsistent about this.

[17:54] <rafl> autrijus: That's the @fib one.

[17:55] <autrijus> rafl: it doesn't work because lazylist is currently only impled in p5runtime and nowhere else

[17:56] <autrijus> gaal: I prefer yes, but I'm not known as a style enforcer :)

[17:56] <autrijus> dinner, bbl &

[17:56] <gaal> liz6: > (EM) Maybe source code examples should adhere to PBP - did you mean something in addition to the space?

[17:56] <gaal> heh

[17:57] <gaal> what about calls?

[17:58] <gaal> liz6: > (EM): maybe mention that "Y" is the same as "¥"for the unicode challenged? - there's a sidebar to deal with that, I'll make sure the editor puts them on the same page and will add a reference.

[18:02] * PerlJam wanders off to watch the #parrotsketch

[18:06] <gaal> is zip short- or long-tempered this week? (ie is 1..2 Y 1..5 four or ten elements long?)

[18:06] <xerox> ?eval 1..2 ¥ 1..5

[18:06] <evalbot_7899> Error:  unexpected "\\" expecting operator, "does", "but", "is", "^..^", "cmp", "<=>", "^..", "..^", "..", postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[18:06] <xerox> *boom*

[18:07] <gaal> and, just to make sure: if it's ever specced to be long-tempered, if the shorted list came in the form of an array, it isn't resized, is it?

[18:07] <gaal> xerox: i was asking about the spec

[18:07] <gaal> though that's bad :)

[18:07] <gaal> ?eval (1..2 Y 1..5)

[18:07] <evalbot_7899> (1, 1, 2, 2, undef, 3, undef, 4, undef, 5) 

[18:07] <gaal> ?eval 1..2 Y 1..5

[18:07] <evalbot_7899> (1, 1, 2, 2, undef, 3, undef, 4, undef, 5) 

[18:08] <gaal> huh? unicode threw it off?

[18:08] <gaal> ?eval (1..2 ¥ 1..5)

[18:08] <evalbot_7899> Error:  unexpected "\\" expecting operator, "does", "but", "is", "^..^", "cmp", "<=>", "^..", "..^", ".." or ")" 

[18:08] <gaal> seems so.

[18:08] * gaal goes off to look at smoke.pugscode.org

[18:11] <gaal> latest autosmoke says it should work. though...

[18:11] <gaal> eric256: http://feather.perl6.nl/~eric256/t_index/t/builtins/lists/zip.html doesn't match the TODO coloring of the matrix.

[18:12] <gaal> (that is, different tests are marked green on the matrix)

[18:45] <gaal> man, i started showing the p5 equivalent of @differences = map { $^x - $^y }, @Xs ¥ @Ys;

[18:45] <gaal> it's a pageful, if you don't have map2, zip, and max!

[18:46] <gaal> though i can probably shorten it a bit if I assume I only need zip2.

[18:46] <gaal> plus, of course, the p5 version is rather less efficient because it isn't lazy.

[18:57] <wolverian> it's only one line with reduce

[18:57] <wolverian> er, or not.

[18:59] <gaal> no multi-arity map, no zip

[18:59] <wolverian> right.

[18:59] <wolverian> it's not that hard to do on one line, I think, but the closures will have to reference the arrays by name

[19:01] <wolverian> or maybe that's just if you use your own zip. maybe you can do it some other way too. I'm too tired.

[19:01] *** Lopo_ is now known as Lopo

[19:01] <gaal> actually, to avouid growing the shorter array if there is one, it does get quite tedious.

[19:01] <gaal> it's easy if they're assumed to be of the same length.

[19:01] <wolverian> right.

[19:01] <gaal> though not *nice*.

[19:02] <xerox> map2 being.. 

[19:02] <xerox> ?

[19:04] <svnbot6> r7900 | iblech++ | * docs/talks/README: Extremely minor cosmetical fixes.

[19:04] <svnbot6> r7900 | iblech++ | * PIL2JS: state() vars! FIRST {...} blocks!

[19:04] <svnbot6> r7900 | iblech++ |   * Thanks to autrijus++ fixing the PIL compilation of state declarations,

[19:04] <svnbot6> r7900 | iblech++ |     I was able to make them work in PIL2JS.

[19:04] <svnbot6> r7900 | iblech++ |     (Also, some tests which previously failed to compile can be run now.)

[19:04] <svnbot6> r7900 | iblech++ |   * With state() working, FIRST {...} blocks come for free (as you can think

[19:04] <svnbot6> r7900 | iblech++ |     of FIRST {...} as being sugar for

[19:04] <svnbot6> r7900 | iblech++ |       { state $result; exists $result ?? $result :: $result = ... }()

[19:04] <svnbot6> r7900 | iblech++ |   * PIL2JS passes 11/11 of first.t and 9/10 of state.t (the single failing

[19:04] <svnbot6> r7900 | iblech++ |     test tests state in regular expressions).

[19:05] <gaal> xerox: hacky map that takes two elements every time.

[19:06] <xerox> ala lisp! not bad.

[19:10] <gaal> bad, bad, believe me. :) to get maplike syntax i needed to use prototypes, which means the sub must be defined before it's used.

[19:11] <xerox> I mean, the concept isn't so bad :)

[19:11] <gaal> implicit aritization a la perl 6 takes that

[19:11] <gaal> any day

[19:11] <gaal> with its eyes closed

[19:12] <gaal> and arms tied behind its back

[19:12] <gaal> standing

[19:12] <gaal> no, hopping

[19:12] <gaal> on one foot

[19:12] <gaal> on a tightrope.

[19:15] <gaal> anyway now that i've written and debugged this, i kinda don't want to throw it away though i'm not sure it's *too* long for the article! oh well, that's what editors are for! *glee*

[19:39] <svnbot6> r7901 | iblech++ | * t/builtins/numify.t: Added Larry's testcase posted to p6c (link to

[19:39] <svnbot6> r7901 | iblech++ |   nntp.perl.org included in the test).

[19:39] <svnbot6> r7901 | iblech++ | * t/var/caller.t: "my $a is env" is spelled "env $a" now, according to latest S02 (r6537).

[19:39] <svnbot6> r7901 | iblech++ | * Pugs.Parser: "+" is a valid twigil now.

[19:39] <svnbot6> r7901 | iblech++ | * Pugs.AST.Scope, Pugs.Lexer: Added SEnv.

[19:39] <svnbot6> r7902 | gaal++ | integrated suggestions by liz6++. The map-zip example provided fertile

[19:39] <svnbot6> r7902 | gaal++ | grounds for a comparison with p5; more passes required on this section

[19:39] <svnbot6> r7902 | gaal++ | to bring the subtleties (of why p6 rocks) to full light. Although arguably

[19:39] <svnbot6> r7902 | gaal++ | the 25:1 compression ratio speaks for itself.

[20:11] <gaal> ?eval %h = (a=>1, b=>2); %h:<b>

[20:11] <evalbot_7902> Error:  unexpected ":" expecting word character, "::", term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[20:11] <gaal> ?eval %h = (a=>1, b=>2); :%h<b>

[20:11] <evalbot_7902> Error:  unexpected ":" expecting ";", statements or end of input 

[20:13] <xinming> ?eval %h = { a =>1, b => 2}; %h<b>;

[20:13] <evalbot_7902> Error: Undeclared variable: "%h" 

[20:13] <xinming> ?eval my %h = { a =>1, b => 2}; %h<b>;

[20:13] <evalbot_7902> \2 

[20:13] <xinming> ?eval my %h = { a =>1, b => 2}; :%h<b>;

[20:13] <evalbot_7902> Error:  unexpected ":" expecting ";", statements or end of input 

[20:14] <raptorXXX> hi.. in the past there was discussion of the array slice syntax, is there any document on it ? also about lazy evaluation an so on...

[20:14] <gaal> er, yeah, i forgot the `my`... was testing the new %h:<key>   ==> pair syntax

[20:15] <gaal> raptorXXX: array slice is just putting a list in the subscript.

[20:15] <gaal> ?eval my @l = <a b c d e>; @l[1, 3]

[20:15] <evalbot_7902> ["b", "d"] 

[20:16] <raptorXXX> there was something in the lines @l[:2]

[20:16] <raptorXXX> every second element

[20:16] <raptorXXX> something like that

[20:19] <gaal> :by(2) i think.

[20:19] <raptorXXX> aha.. i see... thanx

[20:19] <gaal> L<S09/Subscript and slice notation>

[20:20] <gaal> i doubt it's pugsified though.

[20:25] <wolverian> gaal, hum, where's that syntax specified?

[20:27] <wolverian> reading the p6l post now :)

[20:48] <svnbot6> r7903 | iblech++ | docs/articles/tpr.pod:

[20:48] <svnbot6> r7903 | iblech++ | * Fixed a typo ([2] instead of [1]).

[20:48] <svnbot6> r7903 | iblech++ | * Added C<> tags where needed.

[20:49] <svnbot6> r7904 | iblech++ | * t/data_types/pair.t: => should not bind its .value to the RHS, according to

[20:49] <svnbot6> r7904 | iblech++ |   Larry on p6l: http://www.nntp.perl.org/group/perl.perl6.language/23984

[20:49] <svnbot6> r7904 | iblech++ | * PIL2JS:

[20:49] <svnbot6> r7904 | iblech++ |   * Prelude::JS::Pair: Implemented Larry's ruling. pair.t passes 96/97 (the one

[20:49] <svnbot6> r7904 | iblech++ |     failing test is unrelated).

[20:49] <svnbot6> r7904 | iblech++ |   * Prelude::JS::Keyed: Modified .pairs to accomodate for =>'s changed

[20:49] <svnbot6> r7904 | iblech++ |     semantics (previously, PIL2JS's => was like Larry's proposed =:>).

[20:49] <svnbot6> r7904 | iblech++ |     pairs.t passes 30/30.

[20:53] <gaal> iblech, thanks :)

[21:14] <r0nny> re

[21:59] <gaal> anyone here have access to dev.perl.org? i just noticed that some html sequences are all wrong there

[21:59] <gaal> eg http://dev.perl.org/perl6/doc/design/exe/E03.html "the &sum; of all our fears"

[22:00] <gaal> # "sum is obviously far too long a name for so fundamental an operation; it really should be &sum;"

[22:00] <obra> gaal: email [email@hidden.address]
[22:00] <gaal> that only makes sense if there's a literal sigma there

[22:00] <gaal> thanks

[22:00] <obra> it'll go to robrt

[22:02] <gaal> sent.

[22:05] <gaal> zzZZZ &

[22:13] <svnbot6> r7905 | gaal++ | tpr.pod: a bit more on operators

[22:14] <theorbtwo> "sum" isn't, AFAIK, a HTML entity name; it's called &Sigma;.  That'd do it.

[22:26] <r0nny> autrijus: wich haskell file is for thread operations ? - i want to read more about the threads

[22:33] <liz6> ev'ning pierce!

[22:36] <theorbtwo> G'evening, Liz.

[22:36] <liz6> ev'ning theorbtwo!

[23:38] <rafl> What happened to eric256?

[23:38] <rafl> Haven't seen him today.

[23:40] <leo> obra (but not only of course): new journal entry http://use.perl.org/~leo/journal/ 

[23:45] <dduncan> maybe its a temporary bug, but I found that my smoke reports did not include the revision num after I moved to svk, and hence on upload they don't appear on the site

[23:46] <dduncan> 'scuse me a minute ... have to disconnect ... will backlog web if necessary

