[00:02] *** sili-underscore is now known as sili

[00:23] <malenfant> does anyone have a vim syntax conf file for Perl 6 (I'm using Perl 5.8 with the Perl6:: modules)?

[00:29] *** erg_ is now known as erg

[00:40] <Khisanth> malenfant: there is one in the repo

[00:41] <Khisanth> util/perl6.vim

[00:42] <malenfant> Khisanth: thanks... is it perl6 only, or designed to be used in conjunction with perl5 syntax?

[00:42] <Khisanth> don't know but that seems doubtful

[00:42] <malenfant> ok, thanks

[00:44] <svnbot6> r7209 | Darren_Duncan++ | /modules/Rosetta-Incubator : added new docs/ folder and docs/OSCON2005LightningTalk.txt ... now the perl 5 and 6 project versions are in sync

[00:51] *** erg_ is now known as erg

[01:01] <brentdax> Should this work?  `ord<< $string.split`

[01:21] <scook0> brentdax: as a hyper op?

[01:22] <scook0> I know luqui proposed `foo(»$x«)`

[01:22] <scook0> (it's not in pugs though, AFAIK)

[01:28] <flgr> for applying arbitrary methods as hyperops?

[01:29] <scook0> flgr: yeah

[01:29] <flgr> ah, interesting

[01:30] <scook0> there's also `'foo'.split('').map:{ord}`

[01:31] <scook0> i.e. `$x.map:{foo $_}`

[01:31] <scook0> but I think the hyper form would be clearer in many cases

[01:32] <scook0> and you could say things like `foo(»@xs«, $y, »@zs«)`

[02:00] <rafl> geoffb: pong

[02:03] <rafl> geoffb: Hurry up, I'll go to bed in about 5 minutes.

[02:07] <rafl> Too late. Bye!

[03:26] <brentdax> ?eval class X {} ::Y := ::X

[03:26] <evalbot_7209> Error: Undeclared variable: ":Y" 

[03:26] <brentdax> ?eval class X {} our ::Y := ::X

[03:26] <evalbot_7209> Error:  unexpected ":" expecting qualified identifier, variable name or "(" 

[03:26] <brentdax> ?eval class X {} class ::Y := ::X

[03:26] <evalbot_7209> Error: No compatible subroutine found: "&class" 

[03:26] <brentdax> Hmm.

[05:08] <putter> masak: my tongue-in-cheek (aka sloppy - misused Luddites) comment wasn't so much technological optimism, as noting that that "risks the world" is a less useful metric than it might seem.  bootstrapping a 10+Bperson civ with unprecidented tech and info access already unavoidably tosses the world in the air.  only question now is what increases the odds of catching it.

[05:10] <putter> night &

[05:42] *** erg_ is now known as erg

[05:46] <svnbot6> r7210 | stevan++ | Perl6::MetaModel 2.0 -

[05:46] <svnbot6> r7210 | stevan++ | * Added memoization to the method dispatch routines, 

[05:46] <svnbot6> r7210 | stevan++ |   this resulted in ~20% speed increase (from 21 sec. to 17 sec.)

[05:46] <svnbot6> r7210 | stevan++ | * changed how next_METHOD is handled, this actually makes calling

[05:46] <svnbot6> r7210 | stevan++ |   it more expensive, however not calling it is cheaper now

[05:46] <svnbot6> r7210 | stevan++ | * expanded the next_METHOD test 

[06:43] <geoffb> stevan, ping

[07:15] <masak> putter: I like, and agree with, your reply

[07:38] <brentdax> ?eval class X { sub foo { 'bar' } } X::foo()

[07:38] <evalbot_7210> 'bar' 

[07:57] *** erg_ is now known as erg

[08:01] <^conner> On the off chance that there is an SVK hacker ak... is there a way of emulating svnversion on a SVN checkout without shelling out to svnversion?

[08:16] <wilx> Tried #svk?

[08:53] <spinclad> ?eval $?PUGS_VERSION

[08:53] <evalbot_7210> \'Perl6 User\'s Golfing System, version 6.2.9, August 3, 2005 (r7210)' 

[08:54] <spinclad> yay!  it's up to rev!

[08:55] <brentdax> ?eval multi sub x(byte $y) { say "byte" } multi sub x(str $y) { say "str" } x("foo"); x(1);

[08:55] <evalbot_7210> byte byte bool::true 

[08:56] <brentdax> That makes amazingly little sense.

[08:57] <brentdax> ?eval multi sub x(int $y) { say "int" } multi sub x(str $y) { say "str" } x("foo"); x(1);

[08:57] <evalbot_7210> int int bool::true 

[08:57] <brentdax> ?eval multi sub x(Int $y) { say "int" } multi sub x(Str $y) { say "str" } x("foo"); x(1);

[08:57] <evalbot_7210> str int bool::true 

[08:57] <brentdax> ?eval multi sub x(Byte $y) { say "byte" } multi sub x(Str $y) { say "str" } x("foo"); x(1);

[08:57] <evalbot_7210> str str bool::true 

[08:58] <brentdax> Hmm.

[09:01] <autrijus> "byte" is not a close; unboxed types are not supported.

[09:01] <autrijus> s/close/class/

[09:01] <brentdax> Ah, okay.

[09:03] <brentdax> I'm having fun thinking about how to design a Cipher:: heirarchy for Perl 6.  I'd like to have the ciphers themselves be classes with a uniform interface, with things like block cipher modes supported by composing roles into the cipher objects.

[09:08] <brentdax> (But with procedural and somewhat-functional approaches included too--in particular, I'm thinking about a function that returns a function which will encrypt a piece of data, keeping whatever state is involved handy for the next one.)

[09:10] <autrijus> *nod*

[09:13] <brentdax> I'm working with Cipher::Caesar (a.k.a. rot13 with certain settings) to test it out.

[09:13] <autrijus> cool!

[09:20] <brentdax> ?eval ceil(1.1)

[09:20] <evalbot_7210> Error: Undeclared variable: "&do_ceil" 

[09:22] <brentdax> Any idea why that's happening?  I can see a do_ceil defined in Prelude...

[09:33] <autrijus> looking

[09:33] <autrijus> apparently it's not seeing the do_cell in scope

[09:33] <autrijus> ?eval floor(1.10)

[09:33] <evalbot_7210> Error: Undeclared variable: "&do_floor" 

[09:34] <autrijus> somehow the subs declared in prelude failed to call each other

[09:37] <brentdax> Yeah, they seem to need to be prefixed with Num::.  I'm doing that in my copy of Prelude--should I commit it that way, or is there some underlying fix I should wait for?

[09:42] <autrijus> please commit that way

[09:42] <autrijus> I'll investigate an underlying fix but that's no excuse of delay :)

[09:54] <brentdax> Committed.

[09:54] <svnbot6> r7211 | brentdax++ | Temporary fix to make ceil, floor, round work.

[09:58] <brentdax> Impressive... "pugs: src/Pugs/Prim.hs:1327:13-36: Non-exhaustive patterns in lambda"

[09:58] <brentdax> I'm not sure what it means, but it sounds kinda cool.

[10:15] <brentdax> Nor can I work out what that section could possibly be doing, since I don't know Haskell from Intercal.

[10:15] <brentdax> Other than that it seems to have something to do with a binary operator.  Maybe.

[10:18] <brentdax> Hmm, seems to have something to do with the unary dot...

[10:26] <brentdax> Added in a bunch of $selfs, and now it works.  And the four rot13 tests pass.

[10:32] <wolverian> autrijus: nice journal entry. I always enjoy reading about such great productivity and fun :)

[10:48] *** typester is now known as typeout

[10:55] <nothingmuch> morning

[10:56] <nothingmuch> is there any attempt yet at implementing luqui's tuple type from the theory stuff?

[12:19] * nothingmuch 's plans for the next incarnation of Blondie are getting formulated

[12:19] <nothingmuch> first: a bit more lambda calculousish - application is implicit, parameter less application is just the value

[12:19] <nothingmuch> that makes things slightly simpler

[12:20] <nothingmuch> second: full polymorphic type inferrence

[12:20] <nothingmuch> with luqui's complicated tuple type

[12:20] <nothingmuch> later versions of Blondie 2 will have the ability to disable, delay or subvert the type system

[12:20] <nothingmuch> all the context of static compilation

[12:34] <masak> ?eval my $a="hi\n"; chomp $a; $a.chars

[12:34] <evalbot_7211> 3 

[12:34] <integral> nothingmuch: does Blondie have a concrete syntax, or is it all just specifying ASTs directly for now?

[12:34] <masak> is this correct behaviour?

[12:34] <nothingmuch> it'll never have a concrete syntax... too much work, too little benefit, IMHO

[12:34] <nothingmuch> think of Blondie as PIL's little brother

[12:35] <nothingmuch> it supports less features

[12:35] <nothingmuch> and that makes it easier to check how to make PIL behave under the big handwaving that static perl 6 is right now

[12:36] <masak> ah, never mind...

[12:36] <integral> ah, ok.

[12:41] <nothingmuch> integral: another reason I'm not using PIL is that the issue with environments is not yet 'linker' like enough

[12:41] <nothingmuch> the process of synthesizing a single AST from an AST and an env is not quite there yet

[12:43] <integral> yeah

[13:47] * nothingmuch committed some new tests for L::AG

[14:37] <gaal> yo

[14:38] <rafl> geoffb: What's up?

[14:41] <nothingmuch> hi ho

[14:42] * rafl want's liqui back

[14:42] <nothingmuch> liqui?

[14:42] <nothingmuch> is that luke's evil twin?

[14:43] <rafl> I mean Luke, of course.

[14:44] <nothingmuch> back from where?

[14:46] * nothingmuch really hates microsoft

[14:46] <nothingmuch> my sister asked me to open her an msn account

[14:46] <nothingmuch> part of their license agreement is e.g. i agree to receive periodical targeted advertizement

[14:47] <nothingmuch> oh well.. at least i own the mail server. If she had a hotmail account I bet she wouldn't even be allowed to mark it as spam

[14:59] <stevan> geoffb: ping

[14:59] <stevan> morning guys :)

[15:00] <dudley> morning, stevan 

[15:00] <stevan> hey dudley :)

[15:00] * stevan had an epiphany about method dispatch while taking the dog out to crap

[15:01] <dudley> ooh, a poo-related epiphany. Those are the best :)

[15:01] <dudley> so, enlighten us...

[15:01] <stevan> BTW - if anyone is remotely interested in meta-stuff,. The Art of the MetaObject Protocol is such an excellent book I cannot recommend it enough

[15:02] <stevan> dudley: well, my problem is that I want to make a real-world usable version of the MM

[15:02] <dudley> naturally

[15:02] <stevan> so I done have to do any more p5 OO 

[15:02] <dudley> Can't say I blame you for that :)

[15:02] <stevan> the biggest hurdle is getting around the p5 method dispatch

[15:03] <stevan> I wrote Class::C3, which just 'caches' the right methods in the packages local namespace

[15:03] <nothingmuch> hi ho

[15:03] <stevan> it does the trick,.. but it doesnt smell right

[15:03] <stevan> then I benchmarked AUTOLOADing every method

[15:03] <stevan> its ~500% slower than normal dispatch

[15:03] <stevan> which is not okay :)

[15:04] <stevan> then... when I was taking the dog out,.. it hit me

[15:04] <stevan> no need to penalize everyone,.. 

[15:04] <stevan> so this is my plan

[15:04] <stevan> regular local dispatch is done as normal

[15:04] <stevan> but I store my own superclasses

[15:04] <stevan> no @ISA

[15:05] <stevan> then I install an AUTOLOAD in each class which will handle any dispatching to superclasses

[15:05] <stevan> at this point,..I can control the dispatch to use C3 instead of depth-first

[15:05] <stevan> and it shouldnt be too hard to do method caching

[15:05] <stevan> or at a minimum memoization of the method lookup

[15:06] <rafl> nothingmuch: Back from wherever he is. I want to talk to him, but I'm too lame to write a mail.

[15:07] <nothingmuch> rafl: when you find him, make him svk pull from his repo

[15:08] <rafl> nothingmuch: OK, why?

[15:08] <nothingmuch> because i added a bunch of tests to L::AG

[15:08] <rafl> Ah, please exand L::AG. :-)

[15:08] <gaal> fe

[15:08] <nothingmuch> Language::AttributeGrammar

[15:09] <rafl> Ah, fine.

[15:09] <nothingmuch> http://svn.luqui.org/svn/misc/luke/work/code/perl/modules/Language-AttributeGrammar/t/

[15:09] <nothingmuch> basic.t and errors.t

[15:09] <dudley> stevan: is that in Class::MetaModel or whatever your module is called?

[15:09] <stevan> dudley: yes, it will go in there

[15:10] <nothingmuch> stevan++; # that sounds like a very nice plan

[15:10] <stevan> thanks :)

[15:10] <nothingmuch> you've got to give perl 5 OO the credit of being minimal enough to be able to do all this crap, though =)

[15:10] <stevan> oh yeah,.. p5 OO is a great reseach tool

[15:11] <stevan> I am continually amazed at the silly crap I can do

[15:11] * stevan is also planning a pure lambda calculus version of the mini-meta-model, .. but he needs to read more TaPL for that :)

[15:12] <nothingmuch> eeeep

[15:12] <nothingmuch> please waste your time more constructively ;-)

[15:12] <nothingmuch> new parrot is out

[15:12] <stevan> this coming from the man who wrote Blondie ;P

[15:12] <nothingmuch> hey! Blondie is useful

[15:12] <stevan> *cough* crachhead *cough*

[15:13] * nothingmuch learned a *lot* from blondie

[15:13] * stevan learned a lot from writing fp::lambda

[15:13] <nothingmuch> errm, church integer stuff?

[15:14] <nothingmuch> ;-)

[15:14] <stevan> not that so much as the list implementation

[15:14] <nothingmuch> okay okay

[15:14] <nothingmuch> i'll shutup =)

[15:14] <stevan> church numeral are a little bit silly :)

[15:14] <stevan> no no,.. i'll shutup :)

[15:14] <nothingmuch> no, please... i'll shut up

[15:14] <stevan> no no,.. I insist

[15:14] <nothingmuch> shutup! i'll shutup!

[15:15] <stevan> :P

[15:15] * dudley is a step ahead of nothingmuch and stevan for once

[15:15] <nothingmuch> ?

[15:15] <dudley> I shut up a while ago

[15:15] <nothingmuch> ah

[15:15] <nothingmuch> dudley++

[15:17] <nothingmuch> http://en.wikipedia.org/w/index.php?title=Administrative_Normal_Form&action=edit

[15:17] <nothingmuch> can someone please fill this in?

[15:23] * stevan is off to do $real_world @chores &

[15:46] *** typeout is now known as typester

[16:51] * nothingmuch goes to visit a friend

[17:58] *** bd__ is now known as bd_

[18:11] <putter> stevan: re mm optimization, note that P6::Value/Container lack a number of simple optimizations.  so optimizing mm may not be the right thing.  eg, there are isa methods which just call ::next method.  which give caching additional payoff, but really just need to be removed.

[18:12] <putter> that said, stevan++ ;)

[18:12] <putter> &

[18:18] <putter> stevan: oh, and most of the AUTOLOAD usage should really be removed.  eg order-100 line AUTOLOAD wrapping a bunch of things which should be separate methods.  looks like a historical development artifact.

[18:19] <autrijus> greetings lambdacamels.

[18:19] * autrijus notices a bouncing putter

[19:28] * Aankhen`` goes to sleep.

[19:28] <Aankhen``> G'night.

[19:43] *** typester is now known as sleepster

[20:17] <rafl> Do we have an svk mirror of parrot on feather?

[20:54] <rafl> Are there recordings of some talks some lamdacamels gave about p6/pugs?

[21:02] <fglock> rafl: there is docs/talks, and there is http://www.perl.org/yapc/2002/movies/themovie/

[21:04] <rafl> fglock: Already seen docs/talks, but it's hard to follow the talk while only seeing the slides. Especially those of iblech, imho.

[21:04] <rafl> flgr_: Thanks for the movies link. I'll look at it tomorrow. Looks a bit outdated, though.

[21:09] <fglock> rafl: there's a Pugs movie link here: http://use.perl.org/~autrijus/journal/26035

[21:11] <rafl> fglock: Well, funny, but not that informative. :-)

[22:18] <svnbot6> r7212 | Darren_Duncan++ | /modules/Rosetta-Incubator : set svn:mime-type and svn:eol-style properties on all 3 files

[22:33] <nothingmuch> evening

[22:33] <nothingmuch> irssi is stupid

[22:33] <nothingmuch> it thinks it's 00:33, but it's 1:33

[23:06] <putter> stevan: Method (superclasses) not found for instance (#<Role=(14)>) at ../pugsxpl2/perl5/Perl6-MetaModel2.0/lib/chaos.pl line 438

[23:07] <putter> oh.  doh.

