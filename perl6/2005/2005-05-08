[00:57] <robkinyon> any lamda'ers around?

[00:59] <Juerd> I'd pretend to be one, but I think you'd notice the difference very quickly.

[00:59] * robkinyon is dragonchild, fyi

[00:59] <robkinyon> i am trying to fix a cygwin bug

[00:59] <Juerd> How about epsilon?

[00:59] <robkinyon> i think i know how to do the haskell changes, but i'm leery

[01:00] <Juerd> Heh - I hadn't noticed before that kinyon == dragonchild.

[01:00] <Juerd> Funny. :)

[01:00] * robkinyon arghs

[01:00] <robkinyon> be back soon (wife called)

[01:00] <Juerd> Why not just change and commit, by the way?

[01:00] <Juerd> If it's wrong, it can be reverted.

[01:01] <Juerd> That's the most important of version control wonders :)

[01:01] <Juerd> 3am here

[01:01] <Juerd> Time to get some sleep

[01:01] <Juerd> Good localtime!

[01:01] <Juerd> afk

[01:02] <stevan> robkinyon: how big is the change?

[01:11] <meppl> gute nacht

[03:17] <stevan> I hate it when I do something cool, and no one is awake to share it with 

[03:17] <stevan> for anyone who is awake,... I just got inside out objects to work :)

[03:17] <stevan> horray for OO without OO :)

[03:17] <stevan> see ext/Tree-Simple

[03:19] <stevan> although since I cannot bless anything, it kind of fragile 

[03:19] <stevan> (my "opaque" object is an Int)

[03:21] <robkinyon> what did you do?

[03:21] <stevan> LOL

[03:21] <stevan> hey Rob

[03:21] <robkinyon> heyla

[03:21] <stevan> inside out object :)

[03:21] <robkinyon> still haven't fixed my doesFileExist to work with cygpath yet

[03:21] <robkinyon> the change will be like 4 lines

[03:21] <robkinyon> to Prim.hs

[03:21] <stevan> line number?

[03:22] <robkinyon> lemme make sure my copy is latest

[03:22] <stevan> ok

[03:22] <robkinyon> just search for doesFileExist

[03:22] <robkinyon> there's three instances

[03:22] <robkinyon> look for the one in the op for require

[03:23] <robkinyon> line 204

[03:23] <stevan> ok

[03:23] <robkinyon> I think I can add a line before it that looks something like:

[03:23] <jabbot> pugs - 2842 - adding Tree::Simple inside-out object; H

[03:24] <robkinyon> if ( $OS eq 'cygwin' ) then pathanem <- cygpath pathname

[03:24] <robkinyon> where cygpath is some function that calls out to the cygpath program

[03:24] <robkinyon> s/pathanem/pathname/

[03:25] <robkinyon> but, i have no idea how to make that work.

[03:25] <robkinyon> and, since this bug is preventing the test suite from running, i can't verify my change

[03:26] <stevan> well line 309 ( the system() built in ) should give you the code to call out

[03:26] <stevan> boolIO system "cygpath" 

[03:26] <stevan> maybe?

[03:26] <stevan> (BTW - I am totally cargo culting here)

[03:26] <robkinyon> basically, i need to convert the following to haskell:

[03:27] <robkinyon> chomp( $pathname = `cygpath $pathname` ) if $^O eq 'cygwin';

[03:27] <robkinyon> everywhere in src/* that doesFileExist is used.

[03:28] <robkinyon> (I'm pretty sure other functions beside doesFileExist will need that treatment, but that's as far as I've gotten.)

[03:28] <stevan> Pugs/Compat.hs is I think where stuff like that goes

[03:29] <robkinyon> ok.

[03:30] * robkinyon reads Compat.hs

[03:30] <stevan> getConfig "osname"

[03:30] <stevan> that seems to get the value put into $?OS

[03:31] <stevan> line 206 of Eval.hs

[03:31] <robkinyon> Ok ... I should be able to do something like os <- fromVal =<< readvar "$?OS" ... right?

[03:31] <stevan> uhm

[03:31] <stevan> sure

[03:32] <stevan> only one way to find out :)

[03:32] <robkinyon> that how incs is done on line 196 of Prim.hs

[03:32] <robkinyon> stevan - I. Don't. Have. A. Test. Suite.

[03:32] <stevan> robkinyon: if it compiles, then you know you are closer then nothing :)

[03:32] <robkinyon> *laughs*

[03:33] <stevan> if you really want, you can nopaste and I can try

[03:33] <stevan> but it wont tell you if cygwin worked :)

[03:33] <robkinyon> i'll try it

[03:33] <robkinyon> TIAS and all that

[03:38] <robkinyon> here goes nuthin

[03:38] * robkinyon sets the elevator music timer for 20 min.

[03:39] <stevan> :)

[03:52] <stevan> good luck robkinyon, time for me to go to sleep  

[03:52] <stevan> adios &

[03:53] <jabbot> pugs - 2843 - improved the inside out instance; it now

[03:54] <gaal> good morning.

[03:55] <robkinyon> gargh

[03:56] <gaal> hi, rob. i encountered the weirdest of bugs the other day.

[03:57] <robkinyon> what's up, gaal?

[03:57] <gaal> a little out of things recently :/

[03:58] <gaal> do you happen to have more than one cpu on your box?

[03:59] <robkinyon> nope.

[03:59] <robkinyon> i barely have a complete hamster inside the thing

[03:59] * robkinyon is giving up

[04:00] <gaal> oh, you've been doing cygpat in haskell? i can imagine that's tiring :/ what have you tried?

[04:00] <gaal> btw you might make use of Pugs::Internals::runCommand which is in Prim.

[04:01] <robkinyon> how I do convert the following Perl?!?

[04:01] <robkinyon> if ( $^O eq 'cygwin' ) { $pathName = `cygpath $pathName` }

[04:01] <robkinyon> that's literally the whole change on line 206 of Prim.hs

[04:03] <jabbot> pugs - 2844 - changing $instance to $self because its 

[04:04] <gaal> first separate it to newpath =  $*OS ~~ 'cygwin' ?? "moose" :: oldpath

[04:04] <gaal> so you know you got the basic if syntax right

[04:05] <gaal> do you know trace? took me a while before i heard about it?

[04:05] <robkinyon> nono - not in P6

[04:05] <gaal> yes i understand

[04:05] <robkinyon> I'm fixing a bug within Pugs

[04:05] * robkinyon is confused

[04:05] <gaal> trace in haskell is for debug printing. helps some. :)

[04:05] <gaal> look for example usage in Eval.hs

[04:06] <robkinyon> ok ...

[04:07] <robkinyon> i think i'll come back to it tomorrow

[04:07] <robkinyon> thanks for the tip

[04:07] <gaal> can you nopaste what you do have? i'll see if i can get it in.

[04:08] <gaal> perlbot nopaste

[04:08] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[04:08] <robkinyon> what i have doesn't compile

[04:08] <gaal> that's okay

[04:08] <robkinyon> no - i've spent an hour trying to get that P5 snippet I showed you to compile in Haskell

[04:08] <robkinyon> I haven't gotten past "if then x = y"

[04:09] <gaal> welcome to the club :)

[04:09] <stevan> isnt haskell fun :)

[04:09] <gaal> you don't have x = y in haskell. variables are immutable.

[04:09] <robkinyon> immutable

[04:10] <gaal> yeah, which makes the name variables, uh, interesting!

[04:10] <robkinyon> i can't just replace the value stored in the variable?

[04:10] <gaal> not with usual vars, no

[04:10] <robkinyon> gaah!

[04:11] <robkinyon> i really need to just go to sleep now, before I do something to the stupid Prim.hs i'll regret.

[04:11] <gaal> "that does put a damper on our relationship", as another Rob would put it.

[04:12] <robkinyon> oh, well.

[04:12] <robkinyon> there's always tomorrow

[04:12] <gaal> sec, before you leave

[04:12] <gaal> you wanted to cygpathify "pathName", right?

[04:13] <robkinyon> yah?

[04:13] <robkinyon> yes

[04:13] <gaal> right after the let? or only if ok is false?

[04:13] <robkinyon> actually, i need to cygpathify anything that gets send to doesFileExist

[04:13] <robkinyon> i don't care when it happens

[04:13] <gaal> okay.

[04:14] <gaal> (we should probably assimmilate cypath into pugs, really.)

[04:14] <gaal> (but that's step #3)

[04:14] <robkinyon> i have pugscc "working"

[04:14] <gaal> cool!

[04:14] <robkinyon> (insofar as pugscc actually calls the right stuff)

[04:14] <robkinyon> it still crashes, but I think that's cause of other cygwin issues

[04:14] <robkinyon> i just want to get "use Test;" to work before going anywhere else

[04:15] <gaal> sounds like a good idea :)

[04:15] <robkinyon> does this mean you'll patch doesFileExist?

[04:15] <gaal> i thinki i'll change

[04:16] <gaal> let pathName =

[04:16] <gaal> to pathName <- cypath $ ....

[04:16] <gaal> where cypath is a noop on non-cywin platforms.

[04:16] <robkinyon> could you change doesFileExist instead?

[04:16] <robkinyon> or, rather, wrap it?

[04:16] <robkinyon> and have something in Compat.hs to DWIM

[04:17] <robkinyon> actually, ALL the filetest actions need to be wrapped in Compat.hs

[04:17] <robkinyon> for example, "-e /tmp/foo" will fail unless cygpath-ified

[04:17] <gaal> shelling out to cygpath all the time is insane though :(

[04:17] <robkinyon> and it's the only solution GHC provides

[04:17] <gaal> but as i said, step #3.

[04:18] <robkinyon> cygwin users expect a 20-50% slowdown in everything they do, anyways

[04:18] <robkinyon> apache, mysql, perl ... it's all slower on cygwin

[04:18] <robkinyon> if pugs were different, you'd be giving people conniption fits! :-)

[04:19] <gaal> :)

[04:19] <robkinyon> cool - thanks gaal

[04:19] <robkinyon> i appreciate it

[04:20] <gaal> sure thang. i'm a novice haskeller though - i only think i know what i'm doing :)

[04:20] <robkinyon> heh

[04:21] <robkinyon> g'nite

[04:21] * robkinyon waves

[04:21] <gaal> bye.

[05:02] *** saorge_ is now known as saorge

[05:09] <gaal> i just realized this cygwin compat thing can't happen at compile time :( this is not good - it means a runtime hit on all platforms, or at least we can limit it to all windows platforms, with some ugliness.

[05:11] <gaal> also, the current $*OS is wrong.

[05:11] <gaal> it is what should be in $?OS.

[05:12] <gaal> and now i have to go to $work :/

[05:27] <xinming> anyone here can tell me where to get online doc for perl6 please?

[05:28] <revdiablo> http://search.cpan.org/~ingy/Perl6-Bible-0.16/

[05:32] <xinming> revdiablo: thanks

[05:41] <xinming> I've download the archive. could you please tell me how to use it? :-S I extracted it, But seems nothing useful. :-S

[05:41] <xinming> ./updater doesn't work

[05:45] <Khisanth> probably install it and then use perldoc

[05:57] <bsb> Hi, can anyone tell me if the "-- #include <sys/types.h>" in src/RRegex/PCRE.hs is a pragma or just a comment?

[07:31] <integral> bsb: I'm pretty sure that's a comment

[07:36] <bsb> Thanks integral, haddock thinks it's a directive

[07:44] <jabbot> pugs - 2845 - haddock compatibility tweaks

[07:44] <jabbot> pugs - 2846 - change cut-n-pasted test comment

[07:56] <nothingmuch> i love good uptime

[07:56] <nothingmuch> unminimizing windows you opened a week ago is a nice way to continue where you left off

[08:10] <ingy> hola

[08:36] <Corion> Hmmm. I don't understand the backlog about cygpath. From how I understand cygwin/cygpath, any (cygwin-)native application can use /tmp and /etc and /whatever directly, and the cygwin1.dll translates. If Pugs is compiled under cygwin, there should be no need to munge any paths further, unless the cygwin setup is wrong.

[08:40] <gaal|work> Corion, a cygwin pugs doesn't depend on cgdwin.dll

[08:41] <gaal|work> it uses the msys ghc and all

[08:41] <gaal|work> just before work today i realized we got $*OS all wrong for cygwin.

[08:42] <gaal|work> the main advantage of building with cygwin and not msys is that you have a reasonble perl(5) around.

[08:42] <Corion> gaal|work: Still, the path things should Just work

[08:42] <Corion> What's the matter with $*OS on cygwin?

[08:42] <gaal|work> but you get the same pugs you'd get building under msys.

[08:43] <gaal|work> $*OS should be the one you're running on, not the one you built on.

[08:43] <Corion> gaal|work:Oh. Yes.

[08:43] <gaal|work> actually $*OS is wrong everywhere.

[08:43] <Corion> Well, partly. If you're built for cygwin, you'll always be cygwin, even if you run on Win32

[08:44] <gaal|work> it just happens to be accidentally right alsmot everywhere too.

[08:44] <Corion> (because on Win32, /tmp has no meaning, while on cygwin, it has)

[08:44] <gaal|work> Corion, no: a cygwin pugs is not really a cygwin pugs.

[08:45] <gaal|work> it's the same as an msys pugs.

[08:45] <Corion> gaal|work: Ah, it was merely built on cygwin, but is "native", as ghc outputs non-cygwin code?

[08:45] <gaal|work> yes.

[08:45] <Corion> Ugh.

[08:45] <Corion> So we should ditch cygwin. I don't want to deal with the cygprefix stuff.

[08:46] <gaal|work> see http://www.haskell.org/ghc/docs/5.04/html/building/winbuild.html and http://www.reed.edu/~carlislp/ghc6-doc/users_guide/x11221.html

[08:46] <Corion> (what good is building on cygwin, if you don't get a cygwin executable?)

[08:46] <gaal|work> its significantly less sucky perl5.

[08:46] <gaal|work> ("less sucky" than msys')

[08:46] <Corion> Hmmm. ActiveState has a good enough Perl for building Pugs :)

[08:47] <Corion> If you're end up with a native Win32 executable anyway, why not go all-native?

[08:47] <gaal|work> i don't know that they do, Corion. Does the smoke toolchain have no XS dependencies at all?

[08:48] <Corion> Not that I know of. But then, these are all transparent to me, as I have a working C compiler setup here... But thinking about it, the fanciest thing the build uses is Module::Install, which isn't XS

[08:49] <gaal|work> petal requires mkdoc::xml or something like that

[08:49] <gaal|work> i don't remember if it's xs.

[08:49] <gaal|work> htmlmatrix wants petal

[08:49] <gaal|work> make smoke wants htmlmatrix.

[08:49] <Corion> Hmm, that's true - Petal also is fancy

[08:49] <gaal|work> if someone ports petal to p6, great.

[08:49] <Corion> ... and mkdoc might be ugly. It's been a long time since I installed it ;)

[08:50] <gaal|work> but that isn't easy.

[08:50] <Corion> True, we should get a templating system ported ;)

[08:50] <Corion> Well, it would be easier if we had rules (as Petal needs a compiler anyway :) )

[08:50] <gaal|work> don't we almost have them already?

[08:51] <gaal|work> i've been out of things lately.

[08:51] <Corion> I don't know, I've been out of things as well (or rather, into different things)

[08:53] <gaal|work> the latest mention is http://use.perl.org/~autrijus/journal/24571 (6 May)

[08:53] <gaal|work> looks like the ball is in pm's hands

[08:54] <gaal|work> but it's not like i'm running off to port petal myself right when that's done.

[08:54] <gaal|work> so: you're right, cygwin isn't really a target platform at all. it is, however, useful to be able to build pugs on.

[08:55] <Corion> True... But I want the path munging in one central place, and I'm not even sure it should happen in Haskell... Fudging @*INC at BEGIN time (or Just before it) should be enough ...

[08:56] <gaal|work> well, dragonchild was missing -e </tmp/x>; and the pugscc script is broken..

[08:56] <gaal|work> anyway, i'm off to lunch.

[08:57] <gaal|work> see you later :)          &

[09:44] <jabbot> pugs - 2847 - * EOLs at EOFs in ext/.

[10:16] * nothingmuch has a vegetable overdose

[10:24] <jabbot> pugs - 2848 - mklivecd.pl now copies our Perl 6 module

[10:34] <jabbot> pugs - 2849 - Changed LWP::Simple to use HTTP/1.0 inst

[11:44] <jabbot> pugs - 2850 - * Added svnbot.p6, a bot which informs #

[11:47] <iblech> ?uptime

[11:49] <iblech> :)

[11:51] * scw pulling 504 revisions

[11:53] <gugod> heh

[11:54] <jabbot> pugs - 2851 - This is a dummy commit to test if svnbot

[12:00] <lightstep> is svnbot really fast?

[12:03] <iblech> it checks for new revisions every 240s (but you can change it using @*ARGS). *But*: Because readline() is blocking, svnbot6 has to wait for server input before it can check for new revisions

[12:04] <lightstep> so why not immediately? that's cause it to block until there's a new revision

[12:04] <iblech> Therefore, I sent it to #enrc.wikipedia, too, as that's a channel with high traffic

[12:05] <iblech> It has to control two things -- the IRC socket and svn. In the IRC handling code of Net::IRC there's a readline(), which'll block until the server says something. svn_check() is called after each readline()

[12:05] <iblech> In Perl 5, I'd solve this problem by either using POE or by using %*SIG<ALARM> (but %*SIG doesn't work yet in Pugs)

[12:07] <lightstep> stm can be used to solve this. but i don't know is autrijus exposed the stm primitives to pugs

[12:08] <iblech> he did not yet, IIRC

[12:09] <lightstep> sequence . repeat $ readIRC >>= handleCommand `orElse` waitForSvn >>= showRev

[12:28] <meppl> guten morgen

[12:49] <Juerd> moin

[13:13] <iblech> ?uptime

[13:14] <jabbot> pugs - 2852 - More Haddocks for Bind

[13:17] <scook0> svnbot6++ :)

[13:52] *** chady__ is now known as chady

[14:07] <luca32> hi everyone there!

[14:08] <luca32> how long it will take to perl6?

[14:08] <sorje> 20 minutes ;-)

[14:08] <luca32> come on!

[14:08] <luca32> really

[14:08] <luca32> what's the status of parrot

[14:08] <luca32> and of pugs?

[14:09] <misc_> pugs works

[14:09] <luca32> is it complete?

[14:09] <misc_> luca32: see svnbot6 , a perl6 irc bot

[14:09] <luca32> cool!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

[14:10] <sorje> have a look at http://svn.openfoundry.org/pugs/examples/

[14:10] <luca32> how many people will join tha austrian acaton

[14:11] <luca32> and parrot??

[14:11] <luca32> i guess perl6 is becoming the best language

[14:11] <luca32> it will superceed c#

[14:11] <luca32> and java

[14:12] <luca32> autrijus is he online now?

[14:12] <luca32> how can i contribute?

[14:12] <luca32> i have very strong skills in c,c++

[14:13] <luca32> plus some skill in perl5

[14:13] <misc_> luca32: you need some skill in haskell

[14:13] <luca32> and strong skills in .net and c#

[14:13] <misc_> luca32: or write doc, and test

[14:13] <luca32> well

[14:13] <luca32> actually i don't have time to learn haskell

[14:13] <luca32> everyone here knows haskell

[14:13] <luca32> ?

[14:13] <gaal|work> misc_, hi, sorry about the disappearing act from yesterday. did you manage to get the smoke running?

[14:14] <misc_> gaal|work: no

[14:14] <misc_> gaal|work: but it hink the problem comes from my side

[14:14] <gaal|work> got tuits to try now?

[14:14] <gaal|work> luca32: not everybody knows haskell

[14:14] <misc_> ok

[14:14] <misc_> luca32: but you can write doc and test

[14:15] <pjcj> or hack on parrot

[14:15] <skew> luca32: with embed_haskell you'll have to learn it eventually if you want to know all of perl6 :)

[14:18] <luca32> what's the state of parrot

[14:18] <luca32> whish it was 2003

[14:19] <luca32> i believe parrot is a too mature project right now

[14:19] <luca32> it would be interesting to start instead a parrot.NET

[14:19] <luca32> port

[14:19] <gaal|work> misc_, the problem still happens for me on my (SMP) work machine, but i'd be glad if you could confirm this.

[14:20] <skew> I'm not sure if that's really in the standard, though Larry Wall promised inline Haskell while Perl 5 was being developed: http://www.dcs.gla.ac.uk/~partain/haskerl/wall-1.html

[14:21] <gaal|work> look at the date :)

[14:23] <misc_> gaal|work: i still have problem with cpan install Test::TAP::HTMLMatrix, even if i managed to make it work as simple user

[14:23] <misc_> no, maybe i didn't managed to use it as simple user :/

[14:23] <gaal|work> i wonder if that might be a bug in Module::Build :)

[14:25] <misc_> i am starting from scratch on a nother server

[14:27] <gaal|work> oh, crap - now it happens even w/o the UPLOAD command thing.

[14:29] <misc_> gaal|work: still doesn't work, give the same type of error :

[14:29] <misc_> t/comprehensive....Operation `eq': no method found,

[14:35] <gaal|work> did installing the Model module work?

[14:35] <misc_> Test::Model ?

[14:35] <gaal|work> test tap model

[14:36] <misc_> Test::TAP::Model doesn't install on the two server i tested

[14:36] <gaal|work> oh, in that case the htmlmatrix for sure won't work.

[14:36] <gaal|work> why doesn't it install thoguh?

[14:38] <misc_> gaal|work: http://pastebin.com/281282

[14:40] <gaal|work> misc_, just so i'm sure we're on the same subtest here, could you please run from the command line:

[14:40] <gaal|work> prove -vl t/comprehensive.t

[14:41] <gaal|work> you have to be at the base dir of Test::TAP::Model for this.

[14:41] <misc_> test 22 fails

[14:42] <misc_> http://pastebin.com/281284

[14:42] <misc_> gaal|work: it is a amd64 server without smp this time, but i doubt it change something

[14:42] <gaal|work> no, this bit i don't think has anything to wiht smp.

[14:43] <gaal|work> (btw, 22 is passing; 23 is dying.)

[14:44] <gaal|work> oh

[14:44] <gaal|work> weird

[14:44] <gaal|work> i'm getting it too now

[14:44] <gaal|work> hmm

[14:44] <gaal|work> well, that makes it easier to debug at least :)

[14:50] <hcchien> seen autrijus 

[14:50] <jabbot> hcchien: autrijus was seen 1 days 12 minutes 21 seconds ago

[15:21] <Juerd> Let's put sigils at the *end*!

[15:22] <Juerd> It solves all the sigil-part-of-the-name problems, and it's retro-ish (think BASIC)

[15:22] <Juerd> :P

[15:23] <lightstep> some scheme systems have those

[15:34] <jabbot> pugs - 2853 - * Added more documentation to Net::IRC.

[15:42] <Juerd> I'm seeing double

[15:42] <Juerd> I like svnbot's mentioning of the username

[15:42] <Juerd> I like jabbot's using a normal privmsg

[15:42] <Juerd> Can that be combined into one bot?

[15:43] <Juerd> (And reduce waste of screen estate, s/ --//)

[15:43] <iblech> Juerd: Bots should always use NOTICE, not PRIVMSG, according to RFC 1459 (the IRC RFC)

[15:44] <jabbot> pugs - 2854 - Added more comments to svnbot.p6.

[15:44] <iblech> (But if we want to change, it's a matter of changing one "notice" to "privmsg".)

[15:45] <lightstep> http://haskell.org/hawiki/LambdaBot_2fNotices

[15:45] <Juerd> I know the RFC

[15:45] <lightstep> this page contains solutions

[15:45] <Juerd> And prefer in this case to radically ignore it.

[15:45] <Juerd> Oh, and I like that svnbot.p6 is more realtimeish

[15:46] <Juerd> iblech: I think it's wise to follow the de facto standard rather than the 12 year old official one

[15:46] <Juerd> iblech: Note too that bots have become more user-ish over time

[15:47] <Juerd> iblech: While at the time rfc1459 was written, bots were for channel management only, not for providing information

[15:48] <iblech> Juerd: FWIW, RFC 2812 ("Internet Relay Chat: Client Protocol") was released April 2000, and says the same.

[15:49] <iblech> Juerd: But I don't have a very strong opinion on this.

[15:49] <Juerd> Also, it is said to be like this to avoid infinite loops

[15:50] <Juerd> Which is a problem only if the automated message was in reply to an IRC event 

[15:50] <iblech> True.

[15:51] <lightstep> there could be a cycle (perhaps svn listening to irc?)

[15:52] <Juerd> lightstep: I think we have to rule out that possibility for sanity's sake.

[15:52] <iblech> Or a bot which commits something when it sees certain svn events.

[15:52] <iblech> But as you say, Juerd, sanity :)

[16:01] <iblech> ?quit Moving svnbot6 to a 24/7-online machine

[16:02] <Juerd> autrijus: You asked for registration of my slides or talk

[16:03] <Juerd> autrijus: I'm afraid the only thing available is a photograph: http://amsterdam.pm.org/meetings/reports/20050503/.f00951f1a955.html

[16:03] <Juerd> :)

[16:03] <Juerd> I believe that the page shown was the fifth

[16:08] <gaal|work> a bot that commits a fix every time someone reports a bug?

[16:09] <Juerd> Now that would come in handy.

[16:09] <Juerd> You write it

[16:10] <gaal|work> easy. someone just spec 'use DWIM' first.

[16:11] <Juerd> It's going to be a builtin, not a module

[16:11] <Juerd> dwim();

[16:14] <jabbot> pugs - 2855 - Oops! Because of a too early return(), $

[16:14] <Juerd> Yay for parrot 0.2.0

[17:01] <robkinyon> hey gaal - did you make that fix for cygwin we talked about?

[17:13] <ingy> hola

[17:15] <ingy> gaal|work: I got your email. Adding your test to the suite which I am currently refactoring.

[18:24] <jabbot> pugs - 2856 - Net::IRC will now discover the bot's use

[18:32] <iblech> BTW, lambdafolks, it'd be cool to be able to connect() to IPv6-hosts, too

[18:34] <iblech> FYI, if svnbot6 goes crazy, please stop it by MSGing "?quit"

[18:44] <jabbot> pugs - 2857 - * compile sub calls with no arguments to

[18:52] <theorbtwo> Allo, all!

[18:53] <Juerd> Hi

[20:16] <luca32> autrijus is here?

[20:16] <luca32> are y here?

[20:16] <luca32> is there someone who has news about the parrot hack event in Vienna?

[20:17] <luca32> how many people have already booked?

[20:18] <pjcj> I don't think it's generally open.  It seems to be sort of semi official at Leo's house.  But I might be completely wrong.

[20:18] <luca32> it's open

[20:19] <luca32> there is also a website about it

[20:19] <luca32> it's only necessary to subscribe

[20:19] <luca32> who's leo?

[20:19] <pjcj> OK, then I am completely wrong.

[20:19] <pjcj> Leo is the release manager for parrot.

[20:19] <luca32> i have not decided yet

[20:19] <luca32> so i would like to know if i am still in time

[20:20] <luca32> leo is austrian?

[20:20] <pjcj> yes

[20:20] <pjcj> where is the website?

[20:20] <luca32> i have to take a loojk at my gmail account

[20:23] <luca32> There will be a Parrot/PUGS Hack-a-thon at the Austrian Perl Workshop, which

[20:23] <luca32> > takes place on 9th and 10th June in Vienna, Austria.

[20:24] <luca32> http://conferences.yapceurope.org/apw2005

[20:25] <pjcj> Ah yes.  In that case I refer the right honourable gentleman to my previous answer.

[20:26] <pjcj> But maybe you should contact the conference organisers.

[20:26] <luca32> pjcj are u involved in parrot/pugs?

[20:27] <pjcj> I mostly lurk on irc and mailing lists.

[20:27] <luca32> :P

[20:27] <luca32> k

[20:27] <luca32> are u austrian?

[20:27] <pjcj> Wating for my supply of appropriately shaped tuits.

[20:27] <pjcj> No, I'm English.

[20:27] <luca32> k

[20:28] <luca32> must code something

[20:28] <luca32> i am going

[20:28] <luca32> see ya

[20:28] <luca32> by the way

[20:28] <pjcj> tchuss

[20:28] <luca32> i am a phd in computer science

[20:28] <luca32> right now i work for a multinational consulting firm

[20:28] <luca32> which business is MS oriented

[20:28] <pjcj> I suggest looking into parrot.

[20:28] <luca32> but my roots are in unix systems

[20:28] <pjcj> No need to be coy ;-)

[20:29] <luca32> during my spare time i enjoy doing some real engineering stuff

[20:29] <luca32> and not IT 

[20:29] <luca32> :P

[20:29] <pjcj> parrot 0.2.0 was just released today

[20:29] <pjcj> electronic engineering?

[20:29] <luca32> now i am coding a plug in for lightwave that does mesh unfolding

[20:29] <pjcj> or the real real stuff

[20:29] <luca32> hope to release soon it

[20:30] <luca32> after i finish this i would like to be involved in some other challenging project

[20:30] <luca32> i was thinking about a .net port of parrto

[20:30] <luca32> parrot

[20:30] <pjcj> as in parrot running on .net or the other way around?

[20:31] <luca32> parrot running on .net

[20:31] <pjcj> interesting - are you on the parrot mailing list?

[20:31] <luca32> maybe someone could be interested in stuff like this

[20:31] <luca32> yeah

[20:31] <luca32> but never posted

[20:31] <pjcj> there were some people who were into .net, but I don't remember them posting recently

[20:32] <pjcj> (or their names, I'm afraid)

[20:33] <pjcj> actually, they were mono people, but it's all the same stuff, right?  ;-)

[20:34] <luca32> more or less

[20:34] <pjcj> I'm currently chasing a bug in XS code, but I'm about to give it up for the night.

[20:35] <luca32> k

[20:35] <pjcj> good luck with parrot, if you decide to work on it

[20:35] <luca32> k

[20:36] <luca32> but i won't approach it before 1 and a half months

[20:36] <luca32> now i am begging to lurk

[20:36] <pjcj> I'm sure it'll still be there ...

[20:37] <luca32> sure

[20:37] <luca32> good night

[20:37] <pjcj> night

[21:07] * Corion reads the backlog and wonders ...

[21:08] <theorbtwo> Allo, Corion.

[21:08] <Corion> Hi theorbtwo ! Back from the UK already?

[21:09] <theorbtwo> Yep.

[21:09] <theorbtwo> Got in this morning.

[21:09] <theorbtwo> Touchdown was around... 12:30, local.

[21:10] <theorbtwo> We're sick, though.

[21:10] <Corion> theorbtwo: Ah, so you've been back some time already.

[21:10] <Corion> Ugh - why that? The british cuisine?

[21:11] <theorbtwo> The London weather had more to do with it, I think, but some of that too.

[21:12] <crysflame> what is "boiled frog treatment"?

[21:12] <Corion> Oh - so you've brought a cold back ... I thought you had visited castaways sister? Or is she in London?

[21:12] <crysflame> er, hello #perl6

[21:12] <theorbtwo> Two of castaway's sisters live in greater london, but we didn't see either of them.

[21:14] <theorbtwo> We went to a london.pm social, and met broquaint, and did a lot of walking about the city.

[21:15] <theorbtwo> We almost stopped in at the work of one of her sisters, but callled and found out that she's at castaway's parents for the weekend.

[21:16] * clkao waves at theorbtwo 

[21:16] <theorbtwo> Allo, clkao.

[21:18] <clkao> don't think we actually met in the social :P

[21:19] <Corion> Ah - I didn't know she had two - I only knew of the one that recently married. But you met a lot of people, that's nice!

[21:19] * Corion goes to bed now.

[21:19] <Corion> Get well soon theorbtwo (and castaway too! )

[21:21] <theorbtwo> Hmm, I don't remember...

[21:21] <theorbtwo> There were a lot of people at the social, though, and I'm not very good at being social with large groups of strangers.

[21:22] <theorbtwo> ...and it was very noisy; I had problems hearing.

[21:22] <theorbtwo> But I had lots of fun anyway.

[21:23] <theorbtwo> Oh, you aren't in AUTHORS.  What's your real name, clkao?

[21:23] <clkao> i write svk

[21:27] <mugwump> ah, is that the literal translation of "kao chialiang"?  :)

[21:28] <clkao> umm :p

[21:29] <mugwump> theorbtwo: just call the hotsprings operator on him; http://pugs.kwiki.org/?PugsOperators

[21:32] <mugwump> stevan: around?

[21:39] <autrijus> How are you lambdacamels!

[21:39] <mugwump> morning autrijus !  Up early/late?

[21:39] <autrijus> early.

[21:39] <mugwump> nice

[21:39] <autrijus> I'm dayshifting to a sleep-at-8pm, wake-at-5pm cycle

[21:39] <autrijus>  er.

[21:39] <autrijus> s/5pm/5am/

[21:40] <mugwump> that must be close to sunrise

[21:41] <autrijus> yup

[21:41] <gaal> hey all

[21:41] <lightstep> 9 hrs is lotsa fun

[21:41] <gaal> ingy: thanks :)

[21:41] <gaal> robkinyon: ping

[21:43] <clkao> actually i'm in pugs AUTHORS.. i wonder why

[21:54] <elmex> hmpf

[21:57] <autrijus> clkao: maybe because you reported three bugs, all of which resolved? :)

[21:57] <clkao> oh did i

[21:58] <clkao> i was only complaining

[21:58] <clkao> :)

[21:58] <clkao> howdy autrijus. is svk.elixus.org slow for you?

[21:58] <autrijus> bearably so

[21:58] <autrijus> i.e. I'm fine

[21:58] <clkao> i found i was added at r32

[21:59] <Juerd> autrijus: Seen the "slide"?

[21:59] <autrijus> Juerd: no. url?

[21:59] <Juerd> 18:06 < Juerd> autrijus: I'm afraid the only thing available is a photograph: 

[21:59] <Juerd>           http://amsterdam.pm.org/meetings/reports/20050503/.f00951f1a955.html

[22:01] <autrijus> heh cool!

[22:01] <autrijus> Juerd++

[22:01] <autrijus> ok, so, release plan for 6.2.3.

[22:01] <autrijus> I propose we wait until this Sunday, that is 6 days from now.

[22:01] <autrijus> because I want to get rx// and object support in :)

[22:02] <autrijus> and the tree had not been stabilised enough to make an easy snapshot release.

[22:02] * autrijus checks regressions

[22:03] <autrijus> hm. my impression was wrong, we only have 6 or so regressions

[22:03] <mugwump> object support!

[22:04] <autrijus> let me take a look to see if I can fix them quickly

[22:04] <mugwump> there is a plan for this?  I saw the closure state `hack'

[22:05] <autrijus> mugwump: there's a plan for this, based on your Class.hs

[22:06] <autrijus> but I want rx// support first (because it's easier) :)

[22:06] <mugwump> via PGE?

[22:06] <autrijus> aye

[22:06] <mugwump> awesome

[22:07] <autrijus> what's more, rx// support will be there even if you don't build against libparrot!

[22:07] * autrijus cackles evilly

[22:07] * autrijus hacks that in

[22:07] <mugwump> pulling another IMC?

[22:07] <autrijus> no, running external bin/parrot

[22:07] <autrijus> ;)

[22:08] <mugwump> oh, evil

[22:28] <obra> hello

[23:08] *** hawkalooogie is now known as hawkaloogie

[23:24] <jabbot> pugs - 2858 - * New, improved, parrot-based PGE

[23:27] <stevan> mugwump: pong

[23:27] <autrijus> rx// support rsn.

[23:28] <stevan> autrijus: hello :)

[23:28] <stevan> rx// requires parrot though right?

[23:28] <obra> hey autrijus 

[23:30] <autrijus> yo obra 

[23:30] <autrijus> stevan: an installed parrot, not libparrot

[23:30] <autrijus> it will be faster (no system() overhead) if you link against libparrot.

[23:31] <stevan> ok

[23:31] * stevan goes to download/install parrot

[23:31] <mugwump> hey stevan, I was just reading your message re: .isa on built-ins and thought that perhaps it would be a good idea to prototype the behaviour

[23:32] <stevan> mugwump: what are you thinking? write some tests?

[23:32] <stevan> or prototype it in perl5?

[23:32] <mugwump> well, we've got 'objects' of sorts, implemented by closures in Pugs, right?

[23:33] <stevan> mugwump: and I hacked some inside-out invocant based object stuff last night too

[23:33] <mugwump> coo, is that in pugs?

[23:33] <stevan> ext/Tree-Simple/

[23:33] <stevan> since we dont have proper namespaces or bless, it is a little delicate

[23:34] <stevan> basically new() returns a random string, which is the hash key to an %INSTANCES hash inside the package

[23:35] <stevan> it does work though, and even for recursive data-types like Trees

[23:38] <mugwump> is the trick used in http://svn.openfoundry.org/pugs/examples/cashiers.p6 not ok?

[23:38] <mugwump> oh, it's using hash subscript rather than .

[23:38] <stevan> autrijus: are there instructions for building libparrot?

[23:39] <stevan> mugwump: either one is fine with me, I did the inside out object things as a proof of concept

[23:40] <mugwump> sure.  I'd prefer an interface that doesn't require me to call 'methods' with <> though :)

[23:40] <stevan> mugwump: yes it makes it more future-proof too

[23:40] <stevan> although I didn't figure out inheritance with it yet

[23:41] <stevan> it would have to be pretty manual

[23:41] <mugwump> For these purposes it doesn't matter

[23:42] <stevan> ok

[23:42] <autrijus> stevan: set the PUGS_EMBED env to parrot

[23:42] <autrijus> stevan: maybe write it up on Makefile.PL or README or somewhere

[23:43] <mugwump> right, well what I'll start on is translating the Class.hs into Tree::Simple-style OO ... to at least have a prototype metamodel in Perl 6

[23:43] <stevan> mugwump: I have not looked at Class.hs

[23:44] * stevan goes to look right now

[23:44] <stevan> autrijus: I will document my parrot experience somewhere

[23:44] <stevan> probably README

[23:44] <stevan> mugwump: src/Pugs/Class.hs?

[23:45] * mugwump nods

[23:47] <Juerd> autrijus: I had to "make clean" in order for the procedure to pick up that I wanted parrot embedded

[23:47] <autrijus> Juerd: nod

[23:48] <autrijus> mugwump: ooh! that will r0x0r

[23:48] <mugwump> ok, how does ext/Perl/MetaClass.pm sound for a location?  :)

[23:49] <stevan> mugwump: how about ext/Perl-MetaClass/lib/Perl/MetaClass.pm

[23:49] <stevan> then we can add tests and such

[23:49] <stevan> mugwump: Class.hs goes /way/ over my head

[23:49] <stevan> but I will help out any way I can

[23:50] <stevan> tests are what I am good at :)

[23:50] <stevan> I can grok how to use things, and how they should be used, but the underlying theory is not my thing

[23:51] <mugwump> this is basically the schema for those .meta objects mentioned in S12

[23:53] <stevan> actually the further down i get, the more I understand :)

[23:53] <mugwump> excellent!

[23:55] <mugwump> how does the MMD know that the '$self' you return is a Tree::Simple object in Tree::Simple?

[23:55] <stevan> it doesnt

[23:55] <stevan> thats the fragile part

[23:55] <stevan> we have no proper namespaces

[23:55] <mugwump> right, so these methods are all clobbering each other for now

[23:56] <stevan> potentially

[23:57] <mugwump> ok, so what about possibilities with 'magic types' ... 

[23:57] * mugwump looks for MMD typing tests

[23:57] <stevan> what do you mean 'magic types'?

[23:57] <stevan> blessed ?

[23:58] <stevan> mugwump: I think MMD would work in some cases

[23:58] <mugwump> ie, returning some 'unusual' or non-sensical type that is used for MMD

[23:58] <mugwump> (on the invocant)

[23:58] <stevan> multi sub foo ($self: Int $id)

[23:58] <stevan> multi sub foo ($self: Str $id)

[23:59] <stevan> that should DWIM

[23:59] <mugwump> sure, but sort of like:

[23:59] <mugwump> multi sub foo ($self: Str $id where exists %INSTANCES<id>)

[23:59] <stevan> mugwump: $self actually is the key into %INSTANCES

