[00:02] <mugwump> I think the key point is... VM?  How can it be virtual, there is no machine ... they're all just ... functions

[00:04] <Alias_> in the sense that "machine" language controls a "machine"?

[00:04] <Alias_> and thus a "virtual machine" a like a chip... but not hardware

[00:08] <miyagawa> hi there

[00:09] <mugwump> hi miyagawa ... you in toronto yet?

[00:09] <miyagawa> just arrived 

[00:09] <Darren_Duncan> how's the air down there?

[00:09] <miyagawa> it's 8pm, but is still shiny :)

[00:10] <miyagawa> the weather is very comfortable

[00:10] <Darren_Duncan> are you going to visit the hackathon?

[00:10] <miyagawa> during the conference, yes

[00:10] <miyagawa> but not after the conf

[00:11] <Darren_Duncan> I mean before the conference; it has already been going on for several days

[00:11] <miyagawa> No, if you mean it 

[00:11] <miyagawa> because I just arrived now

[00:11] <clkao> hey miyagawa

[00:11] <miyagawa> hi clkao

[00:11] <miyagawa> (where's the yapc channel if any?)

[00:15] <Alias_> There's no YAPC channel

[00:15] <Alias_> Of course, there's a "Not at YAPC" channel :)

[00:16] <miyagawa> lol

[00:17] <Darren_Duncan> now that Subversion is up, I intend to fix Locale-KeyedText so it passes its main test suite without any workarounds in the test suite to make that work

[00:18] <Darren_Duncan> should commit in about 1 hour

[02:08] <luqui> stevan?

[02:08] <luqui> seen stevan?

[02:08] <jabbot> luqui: stevan was seen 4 hours 42 minutes 14 seconds ago

[02:08] <stevan> luqui: hello

[02:08] <stevan> luqui: where are you?

[02:09] <luqui> i'm in autrijus's and ingy's room

[02:09] <stevan> ok

[02:09] <stevan> and that is?

[02:09] <luqui> I reasoned with them

[02:09] <luqui> well, I guess I just need to know your room

[02:09] <stevan> 940

[02:09] <stevan> where is the mini-hackathon?

[02:10] <luqui> we're figuring that out now

[02:10] <luqui> one moment

[02:10] <stevan> ok, well my room is open

[02:10] <luqui> mmk

[02:11] <ingy> hola

[02:11] <stevan> heya Ingy

[02:11] <luqui> hi

[02:12] <luqui> so we should just do it here?

[02:12] <stevan> ok

[02:12] <stevan> where is here

[02:12] * luqui doesn't think it's a good idea

[02:12] <ingy> obra is haviong a hackathon in 1242

[02:12] <stevan> ah

[02:12] <stevan> ok, so when ?

[02:13] <stevan> I will be there with laptop in hand, ready to hack

[02:13] <ingy> stevan: you are welcome to come to 1414 temporarily

[02:13] <ingy> but no entourage please

[02:13] <stevan> I will leave my poose behind

[02:13] <luqui> poose :-p

[02:14] <stevan> my posse's got velocity :P

[02:14] <stevan> ok, I will be there in a moment

[02:24] <Alias_> Can someone ask obra how hard it would be to set up an equivalent to rt.cpan for rt.openfsan.org?

[02:24] <svnbot6> r5011, Darren_Duncan++ | Locale-KeyedText : removed the workaround in the LKT_*.t files involving temp vars; all LKT_*.t files are now pristine; removed most workaround cludges in KeyedText.pm, but added new workaround that all class attributes made public, since new Pugs bug precludes privates working, and new workarounds related to Hashes; updated t_LKT_Util.pm to change+add a workaround re Hashes; all pristine test suites now pass except for 30 which is on

[02:24] <Darren_Duncan> committed Locale-KeyedText, and for the first time test suites 10 and 20 pass

[02:24] <Alias_> And see cwest if it's doable

[02:24] <Darren_Duncan> but new Pugs bugs discovered in the process

[02:25] <Darren_Duncan> most glaring is that privates don't seem to work

[02:25] <miyagawa> hola ingy

[02:25] <ingy> hi miyagawa 

[02:25] <ingy> are you here?

[02:25] <miyagawa> yeah

[02:25] <miyagawa> 1038

[02:25] <Darren_Duncan> eg, declaration of "has $:foo" works, but referencing it gives an error of "subroutine :foo can't be found"

[02:25] <ingy> oh nice

[02:25] <miyagawa> where shall I go now?

[02:26] <ingy> you can come by 1414 for a bit

[02:26] <miyagawa> okay

[02:27] * Darren_Duncan away for a bit

[02:43] <obra> where are people?

[02:43] <svnbot6> r5012, luqui++ |  r6@Queen-of-Hearts:  luqui | 2005-06-26 18:17:55 -0400

[02:43] <svnbot6> r5012, luqui++ |  Begin to push Perl5 codegen logic into the metamodel.

[02:43] <obra> seen ingy

[02:43] <jabbot> obra: ingy was seen 17 minutes 29 seconds ago

[02:43] <obra> seen autrijus 

[02:43] <jabbot> obra: autrijus was seen 18 hours 24 minutes 43 seconds ago

[02:43] <ingy> obra: ping

[02:44] <obra> ingy: got kidnapped for dessert. back now

[02:44] <obra> are you guys settled? do you want to come by?

[02:45] <luqui> hi

[02:45] <obra> hey luke

[02:46] <luqui> yeah, well, autrijus is asleep, and yuval is going home

[02:46] <obra> ah. nod.

[02:46] <luqui> so that leaves stevan and me

[02:46] * obra nods. 

[02:46] * obra is also looking for ingy and cwest

[02:47] <luqui> ingy is here

[02:47] * luqui hasn't seen cwest

[02:47] <obra> ah. cool. where are you guyd^Hs?

[02:47] <luqui> 1414

[02:47] <obra> should we wander down?

[02:47] <luqui> who's "we"?

[02:47] <luqui> but no, because autrijus must sleep

[02:48] <obra> at the moment, me, dave rolsky who is looking for ingy and my minion dave. hm. get ingy to look at irc?

[02:48] <luqui> what's your room?

[02:50] <autrijus> greetings.

[02:51] <ingy> obra: I need your phone

[02:51] <ingy> where are you

[02:52] <ingy> obra: ping ping

[02:52] * autrijus goes back to sleep

[02:53] <ingy> obra: I'm heading to 1242 to get your cell phone

[03:02] <Darren_Duncan> hello autrijus

[03:02] <autrijus> heya darren. sorry for being essentialy away

[03:02] <Darren_Duncan> no prob ... you still got a lot done

[03:03] <autrijus> the new perl5 targetting is really exciting.

[03:03] <Darren_Duncan> indeed

[03:03] <autrijus> somehow it's much more exciting than pir tagetting :)

[03:03] <Darren_Duncan> my last commit has all the Locale-KeyedText 10+20 tests passing

[03:03] <autrijus> ooooh.

[03:03] <Darren_Duncan> but there are still cludges

[03:04] <autrijus> (and yes, I know the private var accessors)

[03:04] <Darren_Duncan> the other thing is that Hashes seem to change into other things like Array::Const

[03:05] <Darren_Duncan> shades of the old List problem, though still a great improvement

[03:06] <autrijus> nod. and those usually go away if you use `is rw` I think

[03:06] <Darren_Duncan> meanwhile, I'll see if I can get the pristine #30 tests passing on the current Pugs, even if cludges are needed

[03:06] <autrijus> I had not implemented luqui's transparent reference proposal; once that's in, the Array::Const etc will be gone

[03:06] <Darren_Duncan> the Const isn't the problem; the Array is the problem

[03:06] <autrijus> I know.

[03:07] <Darren_Duncan> question: is there supposed to be a Pair object type returned by pairs (each element of its output)?

[03:07] <Darren_Duncan> pairs seems to return Array::Const or something

[03:07] <Darren_Duncan> could be related to the other thing

[03:07] <Darren_Duncan> I'll wait for the proposal you mentioned to be implemented, if thats the plan

[03:10] <obra> hi

[03:10] <Darren_Duncan> hi

[03:14] <autrijus> the pair thing is unfortunate

[03:14] <Darren_Duncan> yes

[03:14] <autrijus> for %hash.pairs -> Pair $x { ... }

[03:14] <autrijus> must be explicit

[03:14] <autrijus> otherwise it's taken as named binding

[03:14] <autrijus> because lwall ruled that pairs always engage in named binding

[03:15] <autrijus> unless the param list is expecting a Pair

[03:15] <autrijus> (or Any, but I ddin't get around to that yet)

[03:16] <Darren_Duncan> my problem is that if we say an arg is an Any, and we want to do something different with it depending on whether it is a Pair or a Hash or an Array or a scalar ...

[03:16] <Darren_Duncan> the serialization function being an example, would output a => vs a ','

[03:16] <Darren_Duncan> or a {} vs a []

[03:16] <Darren_Duncan> depending on what it can determine the input type is

[03:19] <autrijus> then you typecase it

[03:19] <autrijus> given $x { when Array { .. } }

[03:21] <Darren_Duncan> I had been using, on a forum suggestion, "given $x { when does(Array) { ... } }" ...

[03:21] <Darren_Duncan> but sometimes that didn't work, so I had to do something like "given $x { when .ref eq 'Array' { ... } }"

[03:22] <autrijus> the (when Class) form should work consistently now

[03:22] <Darren_Duncan> is there a non-given form of this?

[03:23] <Darren_Duncan> perhaps wrongly, I had been using a ?? :: expression

[03:23] <Darren_Duncan> see ext/Locale-KeyedText/t/lib/t_LKT_Util.pm for the context

[03:26] <autrijus> if $x.does(Array) { ... }

[03:26] <Darren_Duncan> okay

[03:27] <Darren_Duncan> I will test something ...

[03:40] <Darren_Duncan> greetings

[03:40] <svnbot6> r5013, autrijus++ | Implemented a wonderful little error message for the default new() that dies if you call it with

[03:40] <svnbot6> r5013, autrijus++ | positional arguments.

[03:40] <svnbot6> r5017, autrijus++ | * Emit.PIR.ParrotObject -- Reified PIR nodes as Parrot Objects!

[03:41] <Darren_Duncan> that's curious ... how svnbot6 doesn't spit revision notices in sequence

[03:41] <luqui> yeah

[03:41] <luqui> the error message hack was done at 4:00 am yesterday

[03:41] <autrijus> but was just pushed

[03:41] <luqui> oh

[03:41] <luqui> makes sense

[03:41] <luqui> autrijus: sleep

[03:42] <autrijus> which part of "I'm sleeping" do you not understand again :)

[03:42] <Darren_Duncan> if you're sleeping, how come you are responding to IRC ... normally, sleeping means ignore computer

[03:42] <Darren_Duncan> or does it make a special sound every time you are mentioned?

[03:43] <autrijus> the screen lights up

[03:43] <luqui> your eyes do too

[03:43] <luqui> :-p

[03:43] <Darren_Duncan> if that bothers you, you could change it

[03:51] <autrijus> journal up.

[03:51] <svnbot6> r5018, autrijus++ | * fix type codegen on pir.pir

[03:51] <autrijus> please continue to think about the p5-targetting strategy :)

[03:51] * autrijus waves &

[03:52] <Darren_Duncan> I'll wait until the hash thing is fixed and then worry about the Pairs thing

[03:52] <mugwump> 'night!

[03:57] * theorbtw1 finds out that he just missed autrijus.

[03:58] <theorbtw1> Allo, all.

[03:58] <stevan> hey theorbtw1 

[03:58] *** theorbtw1 is now known as theorbtwo

[03:58] <Darren_Duncan> hey, don't mention that name or you'll wake him up!

[03:58] <theorbtwo> I'm not sure he's been sleeping with his laptop at the hackathon.

[03:59] <stevan> theorbtwo: yes he has

[03:59] <stevan> it was either under the bed or in the bed with him

[03:59] <Darren_Duncan> the new journal entry says 3 hours last night

[03:59] <stevan> its a wonder he didnt break it

[04:00] <theorbtwo> OK then.

[04:00] <theorbtwo> There's lots of apple laptops and they all look more or less the same.

[04:00] <Darren_Duncan> I've heard those were popular

[04:01] <Darren_Duncan> if they're the modern ones, they all look white, like porcelain

[04:02] <theorbtwo> Not quite like porcelain, but not too far off.

[04:02] <Darren_Duncan> I just mean shinyish white

[04:02] <Darren_Duncan> not beige

[04:03] <mugwump> cd autr_ijus; pugs -e 'my $field = "空"; while 1 { $field ~= "羊"; my $count; $field.split("").grep:{ /羊/ && $count++ }; say "有".($count)."隻綿羊" }'

[04:03] <theorbtwo> R6cight.

[04:03] <theorbtwo> Right.

[04:04] <mugwump> (counts sheep ;))

[04:04] <Darren_Duncan> one sheep ... two sheep ... three sheep ...

[04:05] <theorbtwo> There's one gray-with-white-logo there, the rest are all plain white, in various sizes.

[04:05] <Darren_Duncan> oy

[04:09] <Darren_Duncan> if I were bringing a laptop, it would be an apple ... but I don't got a laptop

[04:09] <Darren_Duncan> I hope that attending OSCON without a laptop won't be a serious detriment

[04:10] <Alias_> just bring a small blanket to keep your lap warm that way

[04:18] <Khisanth> keeping a laptop on your lap would probably leave you with burns anyway

[04:20] <mugwump> as well as a low sperm count

[04:37] <gaal> hello

[04:37] <gaal> In Emit.PIR, argVal:

[04:37] <gaal> argVal MkArgFlatten      = 0x08

[04:37] <gaal> argVal MkArgSlurpyArray  = 0x08

[04:37] <gaal> is it correct that they should have the same value?

[04:40] *** scook0_ is now known as scook0

[04:43] <stevan_> there is very few things as satisfying as doing a "guts" level refactor, and having the tests pass the first time :)

[04:54] <Darren_Duncan> indeed

[05:01] <Darren_Duncan> question ... are labels implemented yet?

[05:01] <Darren_Duncan> or alternately, how do I specify which of several nested loops to leave?

[05:02] <Darren_Duncan> synopsis 4 mentioned labels, but the examples seemed incomplete

[05:03] <Darren_Duncan> never mind, I got further along

[05:06] <Darren_Duncan> but that didn't work ... I'll come back to it another time

[05:36] <svnbot6> r5019, Darren_Duncan++ | Locale-KeyedText : uncommented translate_message() in KeyedText.pm and fixed it so it would compile and execute without crashing (though it currently returns the wrong answers), un-todod LKT_30_TrnMsg.t and it fails 18/34 tests due to the wrong answers ... this is the last thing in Locale-KeyedText to get working before the module's done ... labels don't seem to be implemented in Pugs

[05:42] <Darren_Duncan> another Pugs bug that I noticed is that "my $foo = 'Bar'; require $foo;" fails with a "can't locate Bar ..." while a plain "require Bar;" does work

[06:03] <svnbot6> r5020, Darren_Duncan++ | Locale-KeyedText : added a code comment to translate_message() that explains the main Pugs bug that is causing it to fail ... 'require'.

[08:38] *** scook0_ is now known as scook0

[12:13] <autrijus> rehi.

[12:13] <autrijus> "my $foo = 'Bar'; require $foo;"

[12:13] <miyagawa> autrijus: good morning

[12:13] <autrijus> is exactly the same thing as p5

[12:14] <autrijus> i.e. it needs $foo to contain 'Bar.pm'

[12:14] <autrijus> which I never liked, but there's not specced either... or is it?

[12:14] <autrijus> ohaio miyagawa-san

[12:21] * Limbic_Region tried all weekend to get Pugs running at home so he could file some bug reports but kept having it blow up - any known Win32 issues ATM?

[12:22] <autrijus> no... define blow up?

[12:22] <Limbic_Region> Prim.hs - exiting with error code something or other

[12:22] <Limbic_Region> I think I can find the nopaste in the logs if you want

[12:24] <Limbic_Region> hmmm - the logs seem to be unavailable ATM

[12:33] <Nattfodd> autrijus: did you submit something for the ICFPC ?

[12:34] <autrijus> Nattfodd: no. I sort of wanted to, and stevan was quite motivated, but we were unable to convince nothingmuch and other people

[12:34] <Nattfodd> hum

[12:34] <Nattfodd> pity

[12:34] <Nattfodd> ocaml will have to win again this year :)

[12:34] <autrijus> so it turns out perl6 is much more exciting :)

[12:35] <autrijus> again? last year is not ocaml's 

[12:35] <Nattfodd> judge's prize was ocaml

[12:35] <autrijus> ah. right

[12:35] <autrijus> but anyway... I need to afk a bit. bbiab

[12:35] <Nattfodd> with a submission from the language creator himself...

[12:37] <acme_> icfpc is quite interesting

[12:37] <Nattfodd> this year's task is not that much interesting, I think

[12:38] <Nattfodd> there can't be very funny strategies

[12:39] <acme_> i quite enjoy seeing my little bots scrabble around

[12:39] <kungfuftr> evalbot still dead?

[12:42] <autrijus> ?eval 1+2

[12:42] <evalbot6> 3 

[12:45] <kungfuftr> ?eval "mwuahahahha".say

[12:45] <evalbot6> mwuahahahha bool::true 

[12:45] <QtPlatypus> ?eval /a/ ~ "a";

[12:45] <evalbot6> '<Rule>a' 

[12:45] <QtPlatypus> ?eval /a/ ~~ "a";

[12:45] <evalbot6> bool::false 

[12:46] <QtPlatypus> That doesn't look right?

[12:47] <autrijus> ?eval 'a' ~~ /a/

[12:47] <evalbot6> pugs: src/events.c:270: init_events_first: Assertion `rc == 0' failed. 

[12:47] <autrijus> ?eval 'a' ~~ rx:P5/a/

[12:47] <evalbot6> MkMatch {matchOk = True, matchFrom = 0, matchTo = 1, matchStr = "a", matchSubPos = [], matchSubNamed = {}} 

[12:50] <pdcawley_>  ?eval (1 == 1).type

[12:50] <pdcawley_> d'oh

[12:50] <pdcawley_> ?eval ref(1==1)

[12:50] <evalbot6> ::Bool 

[12:51] <pdcawley_> ?eval ::Bool.getmethods

[12:51] <evalbot6> Error: No compatible subroutine found: "&getmethods" 

[12:52] <pdcawley_> ?eval (1==1).getmethods

[12:52] <evalbot6> Error: No compatible subroutine found: "&getmethods" 

[12:55] <broquaint> ?eval ::Bool.perl

[12:55] <evalbot6> '\\{obj:Class}' 

[12:55] <broquaint> Dang.

[12:56] <pdcawley_> ?

[12:56] <pdcawley_> ?eval Bool.perl

[12:57] <evalbot6> '\\{obj:Class}' 

[12:57] <Limbic_Region> ?eval my $foo = .1 * 3; $foo

[12:57] <evalbot6> Error:  unexpected "." expecting expression 

[12:58] <Limbic_Region> ok - so that's still a bug

[12:58] <pdcawley_> ?eval +".1"

[12:58] <evalbot6> 0.0 

[12:58] <pdcawley_> Wow.

[12:58] <Limbic_Region> if you want to work around the bug for now

[12:58] <pdcawley_> ?eval +"0.1"

[12:58] <evalbot6> 0.1 

[12:59] <Limbic_Region> ?eval my $foo = 0.1 * 3; $foo

[12:59] <evalbot6> \0.3 

[12:59] <pdcawley_> \0.3?

[12:59] <Limbic_Region> ignore the \

[12:59] <Limbic_Region> I have a handful of bugs I have been waiting to write tests against until I had a working Pugs

[13:00] <Limbic_Region> but I can't get it to compile on Win32 and Jonathan's repository is MIA

[13:00] <pdcawley_> feather account?

[13:00] <Limbic_Region> s/repository/binary distribution/

[13:00] <pdcawley_> + emacs + tramp

[13:00] <Limbic_Region> can't use anything other than http and https from work - though I should have logged into feather over the weekend just to get the bugs filed

[13:01] <pdcawley_> I wonder if we coule get Juerd to put an sshd instance up on 443...

[13:02] <Limbic_Region> I doubt even that would work - I have to go through a proxy on top of that

[13:02] <pdcawley_> Ick.

[13:02] <Limbic_Region> and besides - it isn't a matter of getting around a technical problem - it is policy which means I could get the axe by not playing nice

[13:02] * Limbic_Region works for the US Government

[13:03] <Limbic_Region> anyway - Juerd was nice enough to host CGI::IRC for me and patched a bug so that it worked correctly

[13:03] <Limbic_Region> I guess I could give someone else the list of bugs with tuits to verify 

[13:04] <kungfuftr> ?eval #{ hello }#

[13:04] <evalbot6> undef 

[13:05] <kungfuftr> ?eval #{ hello }#.say

[13:05] <evalbot6> undef 

[13:05] <kungfuftr> =0)

[13:05] <kungfuftr> ?eval #{ hello }#; 1.say;

[13:05] <evalbot6> undef 

[13:05] <Limbic_Region> parsed as a comment

[13:05] <Limbic_Region> ?

[13:05] <Limbic_Region> ?eval 1.say

[13:05] <evalbot6> 1 bool::true 

[13:05] <kungfuftr> Limbic_Region: yar... nm... need to post to p6l at some point

[13:06] <Limbic_Region> interesting - I thought evalbot outlawed say

[13:06] <QtPlatypus> ?eval say "Me too"

[13:06] <evalbot6> Me too bool::true 

[13:07] <Limbic_Region> ? for 1..10 -> $foo { say $foo }

[13:07] <Limbic_Region> ?eval for 1..10 -> $foo { say $foo }

[13:07] <evalbot6> 1 2 3 4 5 6 7 8 9 10 undef 

[13:08] <kungfuftr> oh... that's a bit funky

[13:10] <Limbic_Region> not really

[13:10] <Limbic_Region> ?eval for 1..10 -> $foo { say $foo } my $foo = 'bar'; $foo

[13:10] <evalbot6> 1 2 3 4 5 6 7 8 9 10 \'bar' 

[13:10] <Limbic_Region> last evaluated expression thingy

[13:12] <Limbic_Region> ?eval my %foo = map { $_ => $_; } 1..10; [+] %foo{1..5} <=> [+] %foo{6..10}

[13:12] <evalbot6> -1 

[13:12] <Limbic_Region> that's going to be an interesting bug to hunt

[13:17] <QtPlatypus> ?eval my %foo = map { $_ => $_; } 1..10; [+] %foo{1..5}

[13:17] <evalbot6> 15 

[13:18] <QtPlatypus> ?eval my %foo = map { $_ => $_; } 1..10; [+] %foo{6..10}

[13:18] <evalbot6> 40 

[13:18] <QtPlatypus> ?eval 15 <=> 40

[13:18] <evalbot6> -1 

[13:21] <Limbic_Region> QtPlatypus - I didn't demonstrate the bug

[13:21] <Limbic_Region> the bug happens to be a parse bug where that line won't work depending on the presense or absense of a line that precedes it

[13:22] <Limbic_Region> I can nopaste it if you want - it is a bit too big for evalbot

[13:23] <QtPlatypus> go ahead

[13:51] <Limbic_Region> perlbot nopaste

[13:51] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[13:52] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "Removing the say "balancing group A and B"; line should make the following snippet break - adding it back will make it work again" (22 lines, 551B) at http://sial.org/pbot/11375

[13:52] <Limbic_Region> QtPlatypus - sorry, had to step AFK

[13:53] <Limbic_Region> there is the snippet that works but only if there is a statement preceding the [+] %hash{ .. } <=> [+] %hash{ ... } line

[13:53] <autrijus> ingy: I lost my bet right there

[13:53] <autrijus> :-(

[13:53] * QtPlatypus has a look at it.

[13:55] <QtPlatypus> Odd.

[13:56] <autrijus> (sorry, during lwall's talk, will not be able to look into this in 30 mins)

[13:57] <Limbic_Region> QtPlatypus - I found another one a while back similar - only it wouldn't work if something preceded it

[13:59] <QtPlatypus> Does say fix it?  Or any statement?

[13:59] <Limbic_Region> any statement AFAICT

[13:59] <Limbic_Region> I used say because I wanted it to make a bit of sense 

[13:59] <QtPlatypus> How about a comment?

[14:00] <Limbic_Region> I haven't tried that (and can't ATM)

[14:00] <Limbic_Region> be my guest

[14:00] <Limbic_Region> fwiw - the other weird parse bug has been boiled down to http://svn.openfoundry.org/pugs/t/pugsbugs/return_with_trailing_stuff.t

[14:01] * QtPlatypus nods

[14:01] <Limbic_Region> though when I first found it - it was in a much larger code snippet

[14:08] <Limbic_Region> QtPlatypus - if you have the tuits, I would appreciate it if you could boil this last bug I just posed down to a small test case

[14:08] <Limbic_Region> if you don't, I will log into feather at home (since I can't seem to get it working on my local Win32 machine) and play tonight

[14:09] * QtPlatypus will hit it with as meany tuits as I have.

[14:14] <Limbic_Region> not sure if this is a bug or not, but putting parens around it makes it error out even with the preceding "say ..." line

[14:15] <Limbic_Region> IOW - my $result_1 = ([+] %ball{1..4}) <=> ([+] %ball{5..8}); # why would this cause an error I wonder?

[14:15] <QtPlatypus> What verson of pugs are you using?

[14:17] <Limbic_Region> I don't have Pugs installed at all

[14:17] <Limbic_Region> that's the problem

[14:17] <Limbic_Region> and some of the bugs I noticed late last week (Thurs/Friday) may no longer be there

[14:17] <Limbic_Region> ?eval my $foo = .1 * 3; $foo

[14:17] <evalbot6> Error:  unexpected "." expecting expression 

[14:17] <Limbic_Region> that bug still exists though - not sure what version evalbot6 is running

[14:22] <Limbic_Region> everyone else must be listening to Larry

[14:23] <QtPlatypus> With pugs r4939 I can't replicate your error

[14:26] <Limbic_Region> which one - the parens, the .1, or the requirement of a preceding statement?

[14:29] <QtPlatypus> The requirement of the preceding statement

[14:30] <QtPlatypus> The .1 error is still there.

[14:32] <Limbic_Region> ok - cool

[14:32] <Limbic_Region> what about the parens then?

[14:36] <QtPlatypus> cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode)

[14:37] <QtPlatypus> Thats what I get with the parens

[14:39] <Limbic_Region> ok - that looks like it is also a bug to me

[14:39] <Limbic_Region> ?eval (3) <=> (4)

[14:39] <evalbot6> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[14:39] <Limbic_Region> maybe not

[14:40] * QtPlatypus wonders what is happening there.

[14:40] <QtPlatypus> ?eval 1 <=> (4)

[14:40] <Limbic_Region> I don't know - I want to try 1 more thing

[14:40] <evalbot6> -1 

[14:40] <QtPlatypus> ?eval (1) <=> (4)

[14:40] <evalbot6> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[14:40] <QtPlatypus> ?eval (1) <=> 4

[14:40] <evalbot6> Error:  unexpected "4" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[14:40] <Limbic_Region> ?eval (3 ?? 3 :: 4) <=> (0 ?? -1 :: 4)

[14:40] <evalbot6> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[14:41] <Limbic_Region> it is a bug

[14:41] <QtPlatypus> ?eval 1 <=> 4

[14:41] <evalbot6> -1 

[14:41] * QtPlatypus nods

[14:41] <Limbic_Region> ok - so 2 out of 3

[14:42] <QtPlatypus> My other one looks like a bug as well.

[14:42] <QtPlatypus> (1) <=> 4 that is

[14:43] <QtPlatypus> ?eval (1) ~ 4

[14:43] <evalbot6> '14' 

[14:44] <Limbic_Region> ?eval (1) ~ (4)

[14:44] <evalbot6> '14' 

[14:44] <QtPlatypus> Seems to be a pecularaty of the space ship operator

[14:50] <iblech> Ah... it seems the (1) <=> (4) is parsed as 1<=>.(4) -- i.e. get the key "=" out of the "hash" 1, treat it as a coderef, and call it using 4 as parameter

[14:50] <Limbic_Region> well - the last bug I haven't been able to isolate yet

[14:50] <Limbic_Region> but it has to do with nested given/when/default 

[14:51] <Limbic_Region> so possibly 3 out of 4 are still present

[14:51] <Limbic_Region> iblech++

[14:51] <iblech> (:d in the interactive shell)++ :)

[14:52] <Limbic_Region> ok - so what about

[14:52] <Limbic_Region> ?eval my $foo = .1 * 3; $foo

[14:52] <evalbot6> Error:  unexpected "." expecting expression 

[14:53] <iblech> Currently, you have to add the 0 in front of the .1. This is a lexing bug I tried to fix some time ago, but failed

[15:19] <mugwump> I couldn't find fork() in pugs; was looking for a popen() to make a quicker test harness; anyone know anything more

[15:19] * mugwump <== on his way to bed

[15:19] <mugwump> ?

[15:19] <gaal> mugwump, Pipe.open in Prelude.pm

[15:19] <gaal> note though that it isn't specced.

[15:20] <gaal> and also, that right now there's only a shell open; if you want a more direct execute process you need to also hack Prim.hs (very easy in this case)

[15:21] <svnbot6> r5021, mugwump++ | bah.  can't pass GLOBs through ;).  Anyone got a hack for popen?  I'm thinking a mini-harness would really rip through the tests, despite the lack of LL(1) refactoring/excessive backtracking

[15:21] <mugwump> great, thanks.  -EMUSTSLEEP, but my spare cycles may go that way shortly

[15:22] <autrijus> gaal: you have an idea about how to precompile Prelude?

[15:22] <autrijus> gaal: I noticed that on luqui's computer the "loading Prelude" time is almost half a minute

[15:23] <gaal> hmmm. dump the ast? :)

[15:23] <autrijus> which is a significant loss of productivity over the pre-Prelude releases

[15:23] <autrijus> right. :)

[15:23] <autrijus> you want to look into that? :)

[15:23] <gaal> well, if you don't *need* prelude code, you can %ENV<PUGS_BYPASS_PRELUDE>...

[15:24] <gaal> i'd love to, but i'm leaving for the army in half a day :(

[15:24] <Limbic_Region> gaal - as in bootcamp?

[15:24] <mugwump> can't you tell them you're gay or something?

[15:25] <mugwump> or is that not a reasonable excuse to serve the nation these days

[15:25] <Limbic_Region> mugwump - not in the US Army - being gay isn't enough anymore

[15:25] <mugwump> blast

[15:25] <autrijus> but maybe if you tell them you're lesbian...

[15:25] <gaal> http://www.livejournal.com/users/gaal/159292.html

[15:25] <Limbic_Region> basically have to say that I am gay and it is going to prevent me from doing my job (I am in love with my commanding officer for instance)

[15:25] <gaal> (this is the second time around)

[15:26] <Limbic_Region> gaal - oh, well then - nevermind the "are you crazy - always go to basic in the winter cause it is tooo damn hot to be doing drill exercises in the heat"

[15:26] <gaal> and is the reason i'm not in YAPC now :-(

[15:26] <autrijus> :/

[15:26] <autrijus> alright, I'll look into it

[15:27] <autrijus> but first... let me look into the literals

[15:27] <gaal> autrijus, though: if compiling the prelude takes 30 sec on his machine....

[15:27] <gaal> doesn't compiling anything else take as long too?

[15:27] <autrijus> stevan_: please commit ahead to lib/Perl6/MetaModel*

[15:27] <autrijus> or lib/Perl6/Runtime*

[15:27] <gaal> sounds like he made unoptimized.

[15:27] <autrijus> or something like that.

[15:27] <autrijus> gaal: no... optimised

[15:27] <autrijus> prelude is long

[15:27] <autrijus> most small scripts are short

[15:28] <autrijus> so parsing an oneliner takes maybe 2 or 3 secs

[15:28] <gaal> true. well, the workaround is to bypass it, which works now :(

[15:28] <autrijus> but then as we move more things to Prelude.pm

[15:28] <autrijus> the problem will get worse

[15:28] <autrijus> and you can't getaround by not using it

[15:28] <autrijus> because most funcs will be in prelude

[15:28] <gaal> long eh? open my $prelude, ":gzip", "...." :-p

[15:29] <autrijus> ;)

[15:30] <gaal> when i joined LJ, i still had dialup and i wanted a way to write entries offline and send them when i connect. by the second day of my LJhood i hacked the perl client to let me :)

[15:30] <gaal> it's something like this, conceptually

[15:30] <autrijus> stevan_: I think the core issue is that any Parrot-targeting language has to use an existing Parrot language to write the stage1 compiler

[15:30] <autrijus> just like you can use VB.Net to use the C# tools

[15:30] <autrijus> and people use C# just because it's the sanest of all .net languages

[15:31] <autrijus> so if people consider python more sane, then just use python to drive tools written in perl6 and/or other languages

[15:31] <autrijus> but you know... having thunk about that, I will divert my energy toward running on the perl5 vm for now ;)

[15:35] <autrijus> the the literal bug is fixed btw.

[15:36] <Khisanth> p6 on p5?

[15:36] <autrijus> Khisanth: yeah

[15:36] <autrijus> that's one of the major focus of the hackathon

[15:36] <svnbot6> r5022, autrijus++ | * parse for fractional number literals starting with a leading dot:

[15:36] <svnbot6> r5022, autrijus++ |     .1

[15:36] <svnbot6> r5022, autrijus++ |     -.1

[15:36] <Khisanth> sounds like a backwards ponie :P

[15:36] <autrijus> right :)

[15:36] <autrijus> I'm interested in a formal PIL evaluator in Haskell

[15:36] <gaal> btw autrijus this localmorning i noticed argVal in Emit.PIR has two things that eval to 8. is that ok?

[15:36] <autrijus> for operational semantics

[15:37] <autrijus> and a codegen from PIL to Perl5 for production use

[15:37] <autrijus> gaal: sure, one is caller site one is sub param site

[15:37] <Khisanth> but this also means that we be p6 even if parrot doesn't work out :)

[15:37] <autrijus> those are derived from parrot include eaders

[15:37] <autrijus> Khisanth: exactly !

[15:38] <autrijus> personally I think parrot makes a lot of sense; however if we get p6-on-p5 or p6-on-mono or p6-on-jvm etc then we get more p6 hackers

[15:38] <autrijus> who will eventually want a VM that is more fitting for p6

[15:38] <autrijus> and hence get more parrot hackers

[15:39] <pdcawley> So p6 becomes the mother of all source filters?

[15:39] <mugwump> because soon they will have forgotten how to even tell which VM they are using!

[15:39] * mugwump laughs evilly

[15:39] <gaal> :)

[15:39] * Khisanth could easily see that turning into "meh who needs Parrot these aren't great but good enough"

[15:39] <autrijus> heh no... they'll notice.

[15:40] <autrijus> eg. tailcall on p5 is going to be expensive

[15:40] <pdcawley> ?eval class Integer is extended { method foo { 'foo' }}; 1.foo()

[15:40] <Khisanth> that aspect of p5 can't be changed? ;)

[15:40] <evalbot6> Error: No compatible subroutine found: "&foo" 

[15:40] <autrijus> but anyway... as pmichaud said, egg, basket, etc.

[15:40] <autrijus> mmm it's "extended" for today?

[15:40] <autrijus> and "Integer" but not "Int"?

[15:40] <pdcawley> Is it extended?

[15:40] <autrijus> I don't know, lwall had not ruled

[15:41] <autrijus> you think `is extended` makes sense?

[15:41] <pdcawley> He did say in the apo that it would be *something* if memory serves.

[15:41] <pdcawley> Gawd knows.

[15:41] <autrijus> right, "augmented" etc

[15:41] * Khisanth hopes someone is busily writing up perldocs for what all these things mean :)

[15:41] <pdcawley> augmented is probably better.

[15:42] <autrijus> lwall ruled "reopened"

[15:42] <svnbot6> r5023, iblech++ | * ext/Test/bin/test-many.p6 -- Usual svn props.

[15:42] <svnbot6> r5023, iblech++ | * Eval.Var -- Fixed Haddock-confusing double-comma.

[15:42] <pdcawley> ?eval class Int { method foo { 'foo' }}; 1.foo

[15:42] <evalbot6> 'foo' 

[15:42] <pdcawley> Ruled, but not implemented :)

[15:42] <autrijus> (he's sitting on the same table)

[15:43] <pdcawley> Hi Larry.

[15:43] <autrijus> :)

[15:43] <pdcawley> Have we got symbol table introspection specced out yet?

[15:43] <Odin-LAP> autrijus: Ask him what medication he forgot to take, resulting in Perl?

[15:44] <Khisanth> Odin-LAP: not enough time for the full list!

[15:44] <autrijus> pdcawley: it's %MY::, %OUR:: pseudopackages

[15:44] <pdcawley> And can I wedge into the grammar yet?

[15:44] <autrijus> as well as hashes

[15:44] <Odin-LAP> Khisanth: Heh. :p

[15:44] <autrijus> you can wedge into the compiled presentation

[15:44] <Odin-LAP> Oh, yeah. That's the obvious answer. Hash!

[15:44] <autrijus> see ext/Perl-Compiler/ for the obj structure

[15:45] <autrijus> which is how we do macros

[15:45] <autrijus> but you can't yet change the grammar

[15:45] <pdcawley> Will that let me walk the symbol table from the top like I could with %:: in Perl 5?

[15:45] <autrijus> yes.

[15:45] <pdcawley> Implemented?

[15:45] <pdcawley> Can't change the grammar, but can change the PIL that's produced from that grammar?

[15:45] <autrijus> right.

[15:46] <autrijus> ?eval my $x = 4; { my $y = 3; { %OUTER::.kv } }

[15:46] <evalbot6> ('$?1', 'my $x = 4; { my $y = 3; { %OUTER::.kv } }', '$_', 'perl6', '$code', 'my $x = 4; { my $y = 3; { %OUTER::.kv } }', '$lang', 'Perl6', '$x', 4, '$y', 3, '%_', (), '&?BLOCK', sub {...}, '&?BLOCK_EXIT', sub {...}, '&break', sub {...}, '&continue', sub {...}) 

[15:46] <pdcawley> Hmm... I think that's probably enough for (at least) a trace thing...

[15:47] <pdcawley> ?eval package Foo { sub foo {...}}; %OUR::.kv

[15:47] <evalbot6> Error: Undeclared variable: "%OUR::" 

[15:48] <pdcawley> One of the nice tricks in Perl 5 was being able to find what packages were known about by inspecting %::

[15:54] * pdcawley notes that, given symbol table introspection it becomes possible to write quite a few 'meta' methods directly in Perl 6.

[15:56] <autrijus> new just-in-time ruling

[15:56] <autrijus> * `$OUTER::x` now means whatever `$x` is visible in the immediate

[15:56] <autrijus>   outer scope, unlike `$MY::x` which is strictly this lexical scope.

[15:56] <autrijus>   `$CALLER::x` similarily means whatever `$x` is visible in the

[15:56] <autrijus>   immediate caller scope.  Same applies exactly to the pseudopackages.

[15:56] <pdcawley> $OUTER::OUTER::x is legal?

[15:56] <autrijus> yes.

[15:57] <autrijus> so you get PadWalker for free

[15:57] <autrijus> for some reason

[15:57] <pdcawley> $MY::OUTER::x?

[15:57] <autrijus> sure, although that means same as $OUTER::x

[15:57] <autrijus> if you think about it :)

[15:57] <pdcawley> $OUTER::CALLER::x?

[15:57] * pdcawley grins, "I know, just wanted to know it was legal"

[15:57] <autrijus> that is going to be the saming thing as $CALLER::x if your outer scope is within the same routine

[15:57] <gaal> $MY::MY::THIS::IS::FUN

[15:57] <autrijus> if not, it is "erroneous".

[15:58] <autrijus> which is just a way of saying as the compiler writer I can trigger a `rm -rf ~` at that point

[15:58] <gaal> yeah, like a l33t compiler when your source code has no letters in it! it's actually in the spec :)

[15:58] <autrijus> (i.e. behaviour is undefined. probably fails with "CALLER::" not available in OUTER::)

[15:59] <pdcawley> sub {... ; for 0..10 -> { $OUTER::CALLER::x }}

[15:59] <pdcawley> I *think* that in that context $OUTER::CALLER is distinct from CALLER::OUTER

[15:59] <autrijus> pdcawley: that is exactly the same as $CALLER::x.

[15:59] <pdcawley> Because the pointy is called from for.

[15:59] <autrijus> pointies does not remember the caller (I think)

[15:59] <chip> my lexicals are innies

[15:59] <pdcawley> or does CALLER propagate into the caller.

[16:00] <autrijus> caller means the thing you are "return"ing to.

[16:00] <autrijus> if you return from inner of pointy

[16:00] <autrijus> then you return on behalf of sub

[16:00] <autrijus> so your CALLER is exactly the same as OUTER::CALLER.

[16:01] <autrijus> (hint: write tests)

[16:01] *** Boogie_ is now known as Boogie

[16:02] <pdcawley> Can that work when you return from a pointy by throwing an exception?

[16:02] <pdcawley> Ah.. no, because you populate CALLER when the pointy closes over stuff.

[16:02] <pdcawley> Which happens before the pointy is called.

[16:03] <autrijus> right.

[16:03] * pdcawley is in 'stating the obvious mode' here.

[16:03] <autrijus> that's fine :)

[16:03] <autrijus> that's what "operational semantics" means.

[16:03] <pdcawley> Just making sure it's obvious :)

[16:04] <autrijus> please be patient while we rehaul pugs to take advantage of those recursive lambdas :)

[16:05] <pdcawley> ?eval class Foo { method foo {...} }; ref %Foo::foo

[16:05] <evalbot6> Error: Undeclared variable: "%Foo::foo" 

[16:05] <autrijus> ?eval class Foo { method foo {...} }; ref &Foo::foo

[16:05] <evalbot6> ::Method 

[16:05] <pdcawley> ?eval class Foo { method foo {...}}; ref %Foo::{'&foo'}

[16:05] <evalbot6> Error: Undeclared variable: "%Foo::" 

[16:05] <pdcawley> Hmm... how do I get Foo's symbol table?

[16:06] <autrijus> ?eval class Foo { method foo {...} }; %Foo::

[16:06] <evalbot6> Error: Undeclared variable: "%Foo::" 

[16:06] <autrijus> eh, weird, it's in Pugs.Eval.Var before

[16:06] <autrijus> please write tests or see if there are already tests

[16:06] <autrijus> I'll take a look :)

[16:07] <pdcawley> Okay. %OUR:: should have various '::Foo' keys in for 'packages available to the image' right? Or are they in %MY::?

[16:08] <autrijus> no, %MY:: is strictly this lexical pad

[16:09] <pdcawley> So is %:: going to be the default symbol table in the same way as in Perl 5?

[16:10] <autrijus> I think it's %*:: that contains all other symbol tables

[16:10] <autrijus> but it's unruled... I can ask for a ruling in a bit

[16:11] <pdcawley> %*:: makes sense, it's global after all.

[16:11] <autrijus> yup

[16:11] <pdcawley> Is ::Foo.meta returning an actual object yet?

[16:12] * pdcawley is giving himself a test shopping list here.

[16:13] <autrijus> not in pugs, but it should.

[16:13] <autrijus> make it a :todo<feature>

[16:13] <pdcawley> Or implement it in Perl6 and make it dependent on the symbol table intro :)

[16:14] <autrijus> heh :)

[16:14] <pdcawley> Which is, I think possible.

[16:14] <autrijus> commits... welcome

[16:14] <pdcawley> (Possibly with some help from extra code in PIL...)

[16:14] <autrijus> right.

[16:14] <pdcawley> Lemme get the tests written first. Once I know what behaviour it's reliant on I might be able to do the next bit.

[16:16] <pdcawley> Also, is there going to be a 'Runtime' object -- like the Ruby Kernel obj, the bit that lets you write things like Runtime.for_all_objects: -> $obj {...}

[16:16] <pdcawley> Or is that the sort of thing that brave fools implement in CP6AN?

[16:17] <autrijus> meep meep

[16:18] <pdcawley> ?

[16:18] <autrijus> meaning, I have no idea at all

[16:18] <pdcawley> Ah well, I shall have to play at implementing it, see what comes of it.

[16:18] <autrijus> I think it should be possible.

[16:19] <pdcawley> Oh, it's possible, the question is what's the best way of doing it : )

[16:20] <Limbic_Region> autrijus, what bet did you lose and with whom?

[16:20] <autrijus> no, I mean if you are running on different runtimes, they are going to provide different introspection capabilities

[16:21] <autrijus> Limbic_Region: I bet with ingy that lwall will not mention my name during his keynote talk, because lwall usually doesn't do that -- but lwall did that almost at the very beginning of the talk, and again later

[16:21] <pdcawley> autrijus: Not if you write the introspection right. Just wedge into 'class', 'method', 'sub', etc...

[16:22] <autrijus> pdcawley: right. what I need is API

[16:22] <autrijus> please design it :)

[16:22] <Limbic_Region> ok - so what were the terms of the bet - inquiring minds want to know

[16:22] <autrijus> (or find people who do)

[16:22] <autrijus> Limbic_Region: the losing side needs to give the winning side a kiss... chocolate.

[16:23] <pdcawley> Wilco. I'll investigate and post something to the list. If anyone reading this feels like pinging me in a week if there's been nothing, I'd be grateful.

[16:23] <pdcawley> But I hope it'll happen before then.

[16:23] <Limbic_Region> so how much Haskell has he learned?

[16:25] <stevan_> I have a question for the group :)

[16:25] <autrijus> stevan_: yes?

[16:25] <stevan_> pdcawley in particular

[16:25] *** Maddingue__ is now known as Maddingue

[16:25] <stevan_> should the metaclass handle the accessor generation? or should the meta-model constructor do it?

[16:26] <autrijus> Limbic_Region: I don't know. I know he can read data type declarations :)

[16:26] <stevan_> (the meta-model constructor being the thing which itself creates the metaclass instance :)

[16:27] <pdcawley> stevan: Personally, I think it should be constructed by whatever implements 'has'

[16:27] <autrijus> stevan_: start a cargo cult cult to hand out cult cargo!

[16:27] <stevan_> pdcawley: that would likely be the meta-model constructor then 

[16:27] <stevan_> thanks

[16:28] <stevan_> that was my suspicion 

[16:28] <stevan_> i just needed someone else to agree with me to validate my own thoughts :)

[16:28] <pdcawley> Consider having the meta-model constructor tell the class that it's about to add an attribute, and again that it *has* added the attributed.

[16:28] <stevan_> BTW - nothingmuch says hello to the group

[16:28] <pdcawley> Same for methods, submethods, subs etc.

[16:28] <stevan_> his computer died

[16:29] <stevan_> pdcawley: shouldnt the actions just be atomic (or as close to atomic as possible)

[16:30] * PerlJam sets up an agreeable bot just for stevan_ that agrees with everything he says  ;)

[16:30] <autrijus> I just introduced The Matrix to chromatic

[16:30] <autrijus> (Test::TAP::HTMLMatrix)

[16:30] <pdcawley> Not sure, just copping something from NSBindings. Ask the class "Can I add this thing?", then tell the class that you did add the thing.

[16:30] <pdcawley> They're used for two different purposes.

[16:31] <autrijus> he mentioned something about perl.com artible

[16:31] <Limbic_Region> PerlJam - by definition it would be flawed

[16:31] <autrijus> er, article

[16:31] * autrijus wonders if nothingmuch would be up to it

[16:31] <Limbic_Region> consider "I am completely wrong on this aren't I"

[16:31] <pdcawley> Class wants to be able to say "No, I don't want that new attribute, I've already got it, or whatever reason class decides"

[16:31] <pdcawley> Then, once the class has had the attribute added, it needs to ferret through all its instances changing their internal structure.

[16:32] <luqui> does pugs support object-subscripted hashes

[16:32] <pdcawley> And if the class is going to be able to get at all its instances, we need some 'weak' way of referring to objects, or garbage collection is completely up the pole.

[16:32] <autrijus> $obj<attr> ?

[16:32] <autrijus> or $obj{$obj} ?

[16:32] <luqui> no, %hash{Foo.new}

[16:32] <autrijus> that currently stringifies it because we don't do shapes yet.

[16:32] <autrijus> which was because the confusion over the Hash role

[16:33] <luqui> mmkay

[16:33] <luqui> I can implement this without that

[16:33] <stevan_> pdcawley: I see

[16:33] <pdcawley> (Or do we just say to the garbage collector "Gimme all the objects in the live set" and grep through them?

[16:33] <pdcawley> )

[16:33] <autrijus> but that was ruled: Hash is a role, PerlHash is class that parameterised Hash with [returns=>Any, shape=>Str]

[16:33] <autrijus> or something like that

[16:33] <stevan_> however metamodel 0.0.1 will not be that complex

[16:33] <stevan_> but I think 0.0.2 will surely include it

[16:33] <pdcawley> Personally, I lean towards asking the garbage collector, because, dammit, some things *should* be slow.

[16:34] <stevan_> although I am not sure if you can add attibutes dynamically, but thats another discussion altogether

[16:34] <stevan_> ok back to metaclass hacking &

[16:34] <pdcawley> I hope you can.

[16:34] <pdcawley> But I want to write an image based IDE, so I would say that wouldn't I?

[16:35] <stevan_> pdcawley: I will be checking the cleaned up perl5 (prototype) metamodel code into Pugs in a few hours actually

[16:35] <stevan_> you are welcome to join in the metamodel hacking if you like

[16:35] <pdcawley> Great. I shall have a look once it's there.

[16:36] <autrijus> pdcawley: 18:28 <@leo> FYI:  lt@feather:~$ parrot sudoku.pir --nc

[16:36] * stevan_ has to clean up all the hackishness he did when he thought no one was going to *actually* us this thing

[16:36] <pdcawley> I'd like to come to the Portugal hackathon, but funds are lacking

[16:36] <autrijus> oh wait, you're in #parrot.

[16:36] <pdcawley> I am, but I hadn't noticed.

[16:36] <autrijus> ok. leo has implemented that

[16:36] <pdcawley> The sudoku solver works?

[16:36] <pdcawley> woohoo!

[16:36] <pdcawley> How slow is it?

[16:36] <svnbot6> r5024, autrijus++ | * correct do.t and mark my.t as todo

[16:37] <autrijus> yeah, he says that needs work still... but if you are interested find him in #yapcna or #parrot

[16:38] <pdcawley> On this network? Or the other?

[16:38] <autrijus> ircperlorg

[16:39] <pdcawley> Hmm... when I do /j #yapcna I end up in a little world all of my own...

[16:40] <pdcawley> On the irc.perl.org server. Ah well.

[16:42] *** Maddingue is now known as saper

[16:44] <pdcawley> ?eval sub foo { 'foo' }; &foo = sub { 'bar' }; foo()

[16:44] <evalbot6> Error: Can't modify constant item: VCode (MkCode {isMulti = False, subName = "&main::foo", subType = SubRoutine, subEnv = Just (MkEnv {envContext = CxtItem (mkType "Code"), envLValue = True, envLexical = MkPad {"$?1":=[(<ref>,<ref>)],"$_":=[(<ref>,<ref>)],"$code":=[(<ref>,<ref>)],"$lang":=[(<ref>,<ref>)],"%_":=[(<ref>,<ref>)],"&?BLOCK_EXIT":=[(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>)],"&break":=[(<ref>,<ref>),(<r

[16:45] <iblech> ?eval sub foo { 'foo' }; &foo := sub { 'bar' }; foo()

[16:45] <evalbot6> 'foo' 

[16:45] <iblech> ?eval sub foo { 'foo' }; my &baz = sub { 'bar' }; baz()

[16:45] <evalbot6> 'bar' 

[16:45] <iblech> ?eval sub foo { 'foo' }; BEGIN { &foo := sub { 'bar' } } foo()

[16:46] <evalbot6> 'foo' 

[16:47] <pdcawley> ?eval sub foo {'foo'} ; my &saved_foo = &foo; &foo := sub {'bar'}; say foo(); &saved_foo()

[16:47] <evalbot6> foo 'foo' 

[17:32] <xinming> anyone here("alive") ?

[17:33] * Khisanth checks pulse

[17:33] <Khisanth> "maybe"

[17:34] * Odin- does the same.

[17:34] <Odin-> Nope.

[17:36] <xinming> Khisanth: Can you speak Chinese please?

[17:38] <autrijus> rehi

[17:42] <Khisanth> "speak" hehe yes, "write" no :)

[17:43] <stevan_> suprisingly it is much easier to design a meta-model when you are refactoring an ugly hack then it is when you are designing from scratch

[17:43] <xinming> Khisanth: 能不能看到我打的字？

[17:44] <Khisanth> also can't read!

[17:44] <whiteg> chinese...

[17:54] <xinming> Ok, I just wish to ask "if you can see what I wrote."

[17:55] <xinming> hmm, I have a question, I wanna know if <<Perl 6 Essentials>> is too old to read.

[17:57] <whiteg> xinming: I can see what you wrote

[17:58] <xinming> whiteg: 请问一下，就是perl6 的语法是不是已经确定了？

[17:59] <xinming> Perl6 Essentials 那本书我看了一下，不过不知道那个里面介绍的东西是不是都已经过时了

[18:00] <Odin-LAP> O_o

[18:00] <xinming> Odin-: >_<

[18:00] <xinming> Odin-: close your eyes... please ... >_<

[18:00] <xinming> :-)

[18:00] * whiteg think it's not a good idea typing Chinese here..^^

[18:00] <whiteg> xinming: how about i msg you?

[18:01] <xinming> whiteg: well, as your wish. :-)

[18:01] <autrijus> xinming: your question was, is perl6's syntax fully defined.

[18:01] <autrijus> and the answer is no.

[18:01] <autrijus> the things you read in P6Essentials is about 50% outdated.

[18:01] <xinming> autrijus: :-S

[18:01] <autrijus> problem is you can't easily tell which 50%.

[18:01] <autrijus> fortunately, the synopsis files are kept reasonably up to date.

[18:01] <xinming> autrijus: that's exactly what I want to know.

[18:02] <autrijus> see dev.perl.org/ for the synopses.

[18:02] <autrijus> those are only 5% or so outdated.

[18:02] <autrijus> and we can update them easier than paper books.

[18:02] <autrijus> finally, you can look into t/* in the pugs tree to see the currently accepted syntaxes.

[18:02] <autrijus> that's about it :)

[18:03] <autrijus> the syntax will keep changing until the 6.0 release.

[18:04] <autrijus> which is quite some time away

[18:04] <autrijus> so during the meantime you can join the fun and help shaping the language :)

[18:04] <autrijus> it's a limited-time offer!

[18:04] <xinming> hmm, I am not clever as you. :-)

[18:05] <autrijus> xinming: nah, you need just to try using pugs and complain about bugs :)

[18:05] <autrijus> (or inconvenient syntax)

[18:05] <autrijus> stevan_: you're not in irc.perl.org #yapcna? someone just praised your DBD::Mock

[18:06] <stevan_> ah

[18:07] <stevan_> yapcna?

[18:07] <stevan_> I am the only on there :)

[18:07] <stevan_> wrong yapcna I assume

[18:07] <stevan_> oh well

[18:07] <xinming> autrijus: I've install pugs. In fact, I use debian, and I always prefer using testing rather than unstable. But for install pugs. I choose unstable. :-)

[18:07] <autrijus> cool :)

[18:08] <autrijus> er sorry #yapc

[18:08] <autrijus> thinko

[18:08] <stevan_> thanks

[18:13] <stevan_> is there any place to plug in

[18:13] <stevan_> I am running out of battery

[18:13] <autrijus> yes... right behind me

[18:14] <autrijus> those are two-holes

[18:14] <stevan_> didnt work

[18:16] <stevan_> horray

[18:16] <stevan_> I am saved 

[18:16] <Darren_Duncan> hello folks

[18:16] * autrijus loads stevan_

[18:16] <stevan_> thank you autrijus-san

[18:16] <autrijus> :)

[18:17] <autrijus> Darren_Duncan: unhashify is fixed

[18:17] <svnbot6> r5025, autrijus++ | * move do.t from unspecced to specced

[18:17] <Darren_Duncan> sounds great

[18:17] <Darren_Duncan> I still have to update from yesterday ... will get back to you

[18:17] <autrijus> sure, take your time... I'll just go on with releng

[18:18] <Darren_Duncan> now updated to 5026

[18:19] <velcro> is this the right place to ask about parrot 0.2.1 not building

[18:19] <autrijus> irc.perl.org #parrot is the canonical place

[18:19] <autrijus> or [email@hidden.address]
[18:20] <velcro> thanks

[18:21] <gaal> say, lwall's keynote speech isn't online yet somewhere, is it?

[18:23] <svnbot6> r5026, autrijus++ | * fix unhashify.t - testing .does/.isa/smartmatch on a reference

[18:23] <svnbot6> r5026, autrijus++ |   should not deref it.

[18:24] <autrijus> I have an older copy: http://perlcabal.org/~autrijus/larry-communitybuilding.ppt

[18:24] <autrijus> (the one lwall used in russia)

[18:24] <gaal> shukran, ya autrijus!

[18:24] <autrijus> I didn't spot a difference

[18:25] <PerlJam> greets pm

[18:25] <autrijus> greetings pmichaud-san

[18:25] <pmichaud> greets, pj

[18:25] <PerlJam> autrijus: lwall is the master of laziness ;)

[18:25] <pmichaud> greetings, autrijus

[18:28] <PerlJam> autrijus: hmm.  what's with all of the cairns on lwall's slides?

[18:28] <pmichaud> pj:  the first slide of rocks represented "geeks"

[18:28] <autrijus> community structure

[18:29] <pmichaud> the second slide represented linux, with Linus on top, lieutenants beneath, and the rest of the Linux users as the ground ("dirt")

[18:29] <PerlJam> we're a pile of rocks?  That cuts many ways ;-)

[18:29] <pmichaud> the other rock piles were different structures

[18:30] <pmichaud> pj: guess you should've been here :-)

[18:31] <Khisanth> hmm the users are dirt?

[18:32] <autrijus> "in that particular metaphor of linux community"

[18:32] <pmichaud> metaphors often bring about interesting suggestions :-)

[18:32] <autrijus> ...but sometimes a camel is just a camel

[18:43] <Darren_Duncan> seems to be a new bug with Test.pm and/or Pugs ...

[18:44] <Darren_Duncan> when using isa_ok, it fails with a 'expected' and 'got' being reported the same value

[18:44] <autrijus> Darren_Duncan: just fixed

[18:44] <Darren_Duncan> okay

[18:48] <svnbot6> r5027, autrijus++ | * `$hashref.does(Hash)` now returns true

[18:48] <svnbot6> r5027, autrijus++ | * more test cleanups

[18:59] <PerlJam> what's with all the joining?

[18:59] <pmichaud__> I dunno, I keep getting disconnected :-(

[19:00] <autrijus> me too

[19:00] <PerlJam> Someone should have sprung for one of those satellite connections to keep you up always  ;)

[19:00] <obra> I'm on yapc-8 and it's been happy

[19:00] <autrijus> stevan / iblech: ext/Config-Tiny/t/basic.t

[19:00] <autrijus> I'm on _1 with mode 11b

[19:00] <autrijus> switching to 11g makes it randomly not get packets

[19:01] <autrijus> Config::Tiny is failing one test 

[19:01] <autrijus> #        Got: '[ newsection section]

[19:01] <svnbot6> r5028, autrijus++ | * fix Test/t/3-output.t when running from pugs root path.

[19:01] <autrijus> not sure which side is the bug

[19:08] *** pmichaud___ is now known as pmichaud

[19:09] <Darren_Duncan> the Test.pm problem is gone

[19:14] <Darren_Duncan> question ...

[19:14] <svnbot6> r5029, autrijus++ | * `pugs -CPIL -e 'say 123'` for dumping PIL from code

[19:14] <pmichaud> autrijus++

[19:14] <Darren_Duncan> if I have 2 functions, one wrapping the other, where both take a scalar argument holding a hash ref ...

[19:15] <Darren_Duncan> what is the best way to ensure that the inner function receives a 'Hash' and not a 'Scalar'?

[19:16] <Darren_Duncan> in other words, Perl 5 like behaviour where, when you copy a variable containing a reference, saying 'ref' or 'does' on the original and the copy yield the same answer?

[19:17] <Darren_Duncan> reducing problem ...

[19:17] <Darren_Duncan> ?eval 1+1

[19:17] <evalbot6> 2 

[19:20] <dudley> How out of date is docs/02Internals.pod? It says it was last updated 6/03/05. Three weeks in pugs time is about thirty years of real time, isn't it?

[19:22] <Darren_Duncan> ?eval sub foo ( $arg ) { return "foo got a '{$arg.ref}'" } sub bar ( $arg ) { return "bar got a '{$arg.ref}', "~foo($arg) } bar( hash() );

[19:22] <evalbot6> 'bar got a \'Hash\', foo got a \'Scalar::Const\'' 

[19:23] <Darren_Duncan> the question is, how do I get foo() and bar() to receive the same thing?

[19:30] <autrijus> ...you wait until Scalar::Const is made transparent :-/

[19:30] <svnbot6> r5030, autrijus++ | * include prelude bindings in PIL output.

[19:30] <svnbot6> r5031, Darren_Duncan++ | Locale-KeyedText : simplified t_LKT_Util.pm because Pugs now handles hashref.does(Hash) properly

[19:30] <autrijus> luqui and I has identified the bug with the default `is constant`

[19:30] <autrijus> you can negate it with `is rw`

[19:30] <autrijus> I will implement transparent refs

[19:30] <Darren_Duncan> okay, so that's in progress

[19:31] <autrijus> yup

[19:31] <Darren_Duncan> any time frame?

[19:31] <autrijus> it's a design bug

[19:31] <autrijus> yes... I think after my talk tomorrow ;)

[19:31] <autrijus> I still had not done any slides

[19:31] <pdcawley>  Yikes.

[19:31] <Darren_Duncan> are you trying to make your slides now?

[19:31] <pdcawley> 3 hours?

[19:31] <autrijus> yup.

[19:31] <autrijus> Darren_Duncan: don't ask :-/

[19:31] <pdcawley> (Yikes)**2

[19:32] <Darren_Duncan> right, I'll put off further questions until after the talk

[19:33] <Darren_Duncan> sorry about the slides question

[19:35] <iblech> ?eval my %h = (a => 1, b => 2, c => 3); for grep {1} sort keys %h -> $k { say $k }

[19:35] <evalbot6> abc undef 

[19:35] <iblech> ?eval my %h = (a => 1, b => 2, c => 3); for sort keys %h -> $k { say $k }

[19:35] <evalbot6> a b c undef 

[19:35] <iblech> autrijus: That's the reason why Config::Tiny can't write new .inis currently

[19:36] *** pmichaud_ is now known as pmichaud

[19:38] <masak> iblech: where does the undef come from?

[19:38] <autrijus> Darren_Duncan: nah, don't be sorry -- I'm just cranky

[19:38] <Darren_Duncan> gotcha

[19:39] <iblech> masak: It's the thing the last statement evaluated to

[19:39] <Darren_Duncan> in any event, I'm trying the 'is rw' workaround for now ...

[19:40] <masak> iblech: in other words, that's not what's important, the spaces are, right?

[19:40] <iblech> masak: Yep

[19:40] <Darren_Duncan> and it worked, too

[19:40] <masak> iblech: any idea where they come from?

[19:41] <masak> looks to me grep is all the difference

[19:41] <iblech> masak: No... it seems to be because of grep {...} sort. Only sort and only grep work, but not those two together... writing a test

[19:42] <masak> iblech++

[19:43] <autrijus> iblech++

[19:43] <autrijus> iblech: I'm working on the slides for the next few minutes -- if you got tuit please investigate the guts :)

[19:43] <autrijus> (but otherwise a test is fine)

[19:44] <masak> i was just about to go home and sleep

[19:44] <masak> but this is too exciting, now i'm staying

[19:45] <iblech> autrijus: Unfortunately, I have to go off in a minute -- school and test tomorrow (but, good news: vacation in four weeks or so :))

[19:45] <svnbot6> r5032, iblech++ | * Usual svn props added to PIL.hs.

[19:45] <svnbot6> r5032, iblech++ | * Config::Tiny -- Worked around pugsbug, Config::Tiny passes all tests now

[19:45] <svnbot6> r5032, iblech++ |   again.

[19:45] <svnbot6> r5032, iblech++ | * Filed new test for this bug: t/pugsbugs/grep-and-sort-in-for.t

[19:45] <svnbot6> r5032, iblech++ | * POE -- Skipped tests, *much* work still to be done.

[19:45] <nothingmuch> hola camelmonks

[19:46] <iblech> Ok, gotta go &

[19:46] <masak> nothingmuch: hola

[19:46] * nothingmuch 's computer died

[19:46] <nothingmuch> everyone cry please

[19:46] *** Boogie_ is now known as Boogie

[19:47] <Darren_Duncan> waaaa

[19:47] <wilx> Died?

[19:47] <wilx> How do computers die?

[19:47] <nothingmuch> they stop booting

[19:47] <wilx> Interesting.

[19:48] <nothingmuch> now i'm franticly trying to buy a new one

[19:48] * masak cries

[19:48] <PerlJam> nothingmuch: buy me one too while you're at it  :)

[19:48] <Darren_Duncan> is the old one not fixable?

[19:48] <nothingmuch> Darren_duncan - not enough tim

[19:48] <nothingmuch> e

[19:48] <nothingmuch> masak - my current problem is with payments

[19:49] <nothingmuch> canadian and israeli credit card systems work out very differently

[19:49] <nothingmuch> luqui - i'm on stevan's laptop... want to work on PP5?

[19:49] * castaway_ hugs nothingmuch 

[19:49] <castaway_> (poor compy)

[19:49] <luqui> yeah..

[19:49] <nothingmuch> castaway!

[19:49] <nothingmuch> where are you?

[19:50] <nothingmuch> (luqui, that is)

[19:50] <castaway_> lancaster

[19:50] <nothingmuch> actually, where are you two?

[19:50] <nothingmuch> ah!

[19:51] *** castaway_ is now known as castaway

[19:51] <nothingmuch> how was your flight?

[19:51] <nothingmuch> or was it flights?

[19:51] <nothingmuch> wait, aren't you supposed to reach germany via amsterdam and all that?

[19:51] <luqui> oh, me

[19:51] <luqui> i'm in ingy's talk

[19:52] <luqui> but I want to go to black magic... maybe

[19:52] <nothingmuch> oh, i'm just outside

[19:52] <castaway> nono, we drive back to lancaster, we're still in the country til friday

[19:52] <nothingmuch> black magic sounds liek a fun talk

[19:52] <nothingmuch> wait, lancaster is in US?

[19:52] <nothingmuch> it sounds like a british name for a place

[19:52] <castaway> James wants to know if there was anything interesting in the keynote

[19:52] <castaway> yes

[19:52] <nothingmuch> uh - keynote - no

[19:52] <castaway> it came from there. as many US place names did

[19:53] <luqui> I found the keynote interesting

[19:53] <nothingmuch> oh wait, i read that as "new"

[19:53] <luqui> autrijus - poke

[19:53] <nothingmuch> well, it was an interesting talk

[19:53] <nothingmuch> but not much to say about it

[19:53] <nothingmuch> it was larryisms, mostly

[19:54] <luqui> it's like trying to summarize an instrumental

[19:54] <castaway> ;)

[19:56] <autrijus> luqui: peek

[19:56] <autrijus> I'm still in the golfing talk

[19:56] <castaway> hey autrijus 

[19:56] <autrijus> heya castaway

[19:57] <obra> how's the golfing talk?

[19:57] <autrijus> just started. it's fun

[19:58] <obra> hm. perhaps i'll pop over

[19:58] <Limbic_Region> castaway ping

[19:59] <castaway> hey Limbic

[19:59] * Limbic_Region was AFK

[19:59] <Limbic_Region> being Superman as it were

[19:59] <Limbic_Region> what's up?

[20:00] <autrijus> just handed commit bit to particle

[20:01] <theorb> So nobody announced anything nifty at YAPC, like pugs being blessed?

[20:01] <svnbot6> r5033, Darren_Duncan++ | Locale-KeyedText : added 'is rw' to all method/sub args as temp workaround to 'transparent refs' problem, uncommented input-check test in Message.new()

[20:01] <svnbot6> r5034, luqui++ |  r30@Queen-of-Hearts:  luqui | 2005-06-27 15:58:34 -0400

[20:01] <svnbot6> r5034, luqui++ |  Checkin and so forth.

[20:02] <theorb> With Larry and Allison and Patrik all being there, I halfway expected that to happen.

[20:02] <autrijus> theorb: uh, no, I think pugs will stay pugs for quite a while longer :)

[20:02] <autrijus> read my journal for why.

[20:02] <theorb> OK.

[20:02] <autrijus> (in Day 142)

[20:05] <theorb> Ah, that.

[20:06] <autrijus> yeah, that.

[20:07] <autrijus> I don't really care about the name though :)

[20:07] <autrijus> <- optimising for fun

[20:09] <nothingmuch> oof!

[20:09] <meppl> what does "oof" mean?

[20:10] <theorb> Think of the sound one makes when picking up something heavy.

[20:10] <meppl> *hehe

[20:10] <theorb> Oh, is there a release yet?  I'm guessing not.

[20:11] <nothingmuch> meppl: it's a sound people make they are frustrated

[20:11] <autrijus> theorb: not yet. depends on my slidemaking I may or may not get there tomorrow

[20:11] <theorb> OK.

[20:11] <autrijus> this release could have been the most heavily regressing one ever

[20:11] <autrijus> though we're doing well on damage control :)

[20:11] <obra> autrijus: RT bof tonight/msg autrijus RT bof tonight sometime

[20:11] <obra> er. sorry

[20:11] <theorb> Probably won't have a new make system I think is ready to check in before then anyway.

[20:12] <autrijus> obra: k

[20:12] <autrijus> ooh.

[20:12] <autrijus> theorb: you can check in anyway just don't enable it

[20:12] <obra> ah. 4:45

[20:12] <autrijus> right after talk?

[20:13] <theorb> I'd prefer it not be an enable/disable thing, as that means leaving both ways to do it around.

[20:13] <autrijus> theorb: er, once the new sys works we just kill the old sys

[20:13] <autrijus> "disabled" meaning it's work in progress, but more visible

[20:13] <obra> autrijus: yeah, I didn't schedule it

[20:16] <autrijus> hrm, I may need to crash and nap a bit

[20:17] <autrijus> :-/

[20:17] <autrijus> how long is the bof?

[20:18] <obra> no fucking clue

[20:18] <autrijus> :-/

[20:26] <autrijus> hrm. my head is spinning :-/

[20:27] * autrijus heads back to the room to rest a bit

[20:27] <castaway> intensive brain expansion going on ;)

[20:32] <svnbot6> r5035, masak++ | * Filed new test, similar to the one iblech++ found:

[20:32] <svnbot6> r5035, masak++ | t/pugsbugs/map-and-sort-in-for.t

[20:33] * masak has been looking at the ugly-print step-by-step output of pugs re this bug

[20:33] <masak> it seems an extra set of parentheses is added in the "grep {1} sort" case

[20:33] <masak> and also "map {1} sort"

[20:34] <masak> it looks like this: "((a, b, c))"

[20:34] <masak> whereas when using only sort, or only grep, it doesn't

[20:34] <masak> hth

[20:36] <masak> (i tried looking at src/Pugs/Prim/List.hs where I believe the bug is, but unfortunately Haskell still only looks like advanced mathematical cursing to me)

[20:36] <masak> 'nite

[20:36] <masak> &

[21:04] <autrijus> the ./foo bug is fixed.

[21:04] <autrijus> (it was parsed as 0 / foo)

[21:04] <autrijus> thanks luqui for reporting it and successfully prevented my sleep :)

[21:06] <svnbot6> r5036, autrijus++ | * fix `./method` parsing so it won't mean `0 / method`.

[21:06] <svnbot6> r5037, autrijus++ | * `use Module--perl5` in docs and examples are now `use perl5:Module`.

[21:07] <meppl> looks better :-P

[21:11] <PerlJam> "use perl5:Module"?

[21:11] <PerlJam> that doesn't quite fit into my "syntax that follows from other stuff that I know"

[21:13] <geoffb> The generalization that for any language foo you can say 'use foo:Module' makes me happy, actually.

[21:13] <geoffb> Much less hackish than "perl5 is an author's name"

[21:13] <theorb> Aye.

[21:13] <Khisanth> so ....

[21:14] <theorb> That's what you get for sitting Larry in an accessable coutch where you can ask questions of him directly.

[21:14] <Khisanth> use C:perl; ? :)

[21:14] <theorb> Except that C doesn't have the concept of modules.

[21:14] <Khisanth> I was thinking libraries

[21:14] <theorb> use C:stdio.h is somewhat more likely.

[21:15] <Khisanth> then how do you indicate which .so to use?

[21:15] <Khisanth> use C:foo.h(some.so)?

[21:15] <geoffb> theorb, I was thinking about the XS prefix stuff -- so that using a module in C would actually load the library that had the right prefixes (gl/GL_, etc.)

[21:16] <geoffb> How to define the mapping is a good question . . . 

[21:16] <theorb> I think this is a job for something other then a use C:whatever;.

[21:17] <geoffb> I'm sure ingy would have some ideas . . . .

[21:19] <PerlJam> use C++:foo; 

[21:19] <Khisanth> use Person:PerlJam;

[21:19] <PerlJam> use <suspend the normal rules of perl6 syntax> <some stuff here>

[21:20] <PerlJam> is how that reads to me really

[21:20] <PerlJam> And really it's beyond that.  Are these foreign language modules searched for in @INC?

[21:20] <PerlJam> Why not in the language-specific version of @INC?

[21:21] <Khisanth> they are searched in their own version of @INC of course!

[21:21] <integral> eg. for Haskell via Cabal

[21:21] <theorb> I suspect if there's a language specified, it's up to the thing that handles the language.

[21:21] <Khisanth> perl6 will be all knowing :)

[21:21] <theorb> IE, the rule for foo:bar should be what a foo programmer expects, which doesn't neccessarly bare much relation to what a perl6 programmer would expect.

[21:21] <integral> is there anything spec'ed for this feature beyond the syntax?

[21:21] <geoffb> perl6.ask('What is the answer to life, the universe, and everything?')

[21:21] <svnbot6> r5038, geoffb++ | Added hack.pod entries for ext/Perl-Compiler/ and ext/WTemplate

[21:22] <theorb> integral: No.

[21:22] <Khisanth> theorb: it should do what a Perl programmer would expect

[21:22] <geoffb> integral, I think it was an on-the-fly ruling

[21:22] <Khisanth> rather, Perl should do what a Perl programmer would expect :)

[21:22] <PerlJam> It still begs for a quoting operator in my mind.

[21:22] <theorb> AFAIK, even the spec isn't much of a spec, just a larry-on-the-couch ruling.

[21:23] <PerlJam> use Foreign 'language' => 'module';  (or something like that)

[21:23] <geoffb> PerlJam, no reason that use language:module couldn't be sugar for that

[21:24] <PerlJam> geoffb: what happens when the : gets in the way?  How do you circumvent it?

[21:24] <geoffb> PerlJam, how can it get in the way?

[21:24] <integral> use inline "haskell" => "import Data.Map", :wrap_all;

[21:24] <PerlJam> geoffb: If the language name ends in a colon.  If the module name begins with a colon.

[21:24] <geoffb> PerlJam, hmmm, unless there is a language that likes to start module names with a single colon . . . .

[21:25] <geoffb> Otherwise, I don't think it's ambiguous.

[21:25] <geoffb> PerlJam, that's theoretically true -- but are there any currently existing languages that do that?

[21:26] <geoffb> And if so, we can always disambiguate with whitespace, I suppose

[21:26] <geoffb> Anyway, I think that's edge enough to be fixed when it's actually needed

[21:26] <geoffb> (by somebody who didn't just create a language like that to annoy us)

[21:27] <Darren_Duncan> question: is there anything hyper-operator like that will do a cross-join of array arguments; eg, a hyperlike-stitch can take ['a','b'] and ['c','d'] and return ['ac','ad','bc','bd']?  ... or should I be using a 'map' to do this?

[21:28] <theorb> Hm, you want some combination of yen and join.

[21:28] <Darren_Duncan> by contrast, the existing hyper-stitch would return ['ac','bd']

[21:28] <integral> join '', any<a b>, any<c d> ?

[21:29] <Darren_Duncan> will try those ...

[21:29] <PerlJam> integral: I don't think that would work

[21:29] <Darren_Duncan> ?eval join '', any<a b>, any<c d>

[21:29] <evalbot6> 'any(VStr "a",VStr "b",VStr "c",VStr "d")' 

[21:29] <theorb> I don't think you want an any.

[21:29] <integral> *sigh* I still hate junctions

[21:29] <Darren_Duncan> didn't think so

[21:30] <theorb> Junctions have very little in the way of order gaurnetees.

[21:30] <geoffb> Darren_Duncan, there's always the stuff in examples/nested_loops that you could reuse

[21:30] <Darren_Duncan> essentially, I want to replace a double-for-loop with an elegant single for loop

[21:30] <Darren_Duncan> I have a nested loop already

[21:30] <integral> do { a <- ["a", "b"]; b <- ["c", "d"]; return a ++ b } :: String

[21:30] <Darren_Duncan> wanted to see if there was a single option

[21:30] <integral> s/String/[String]/

[21:30] <Darren_Duncan> will try some tests

[21:31] <PerlJam> map { $_  >>~<< <c d> } <a b>

[21:31] <Darren_Duncan> I thought of using map already ... just seeing if there was a way to avoid it

[21:32] <Darren_Duncan> still, I guess I'll just use map for now, since I know how to use it

[21:32] <geoffb> Don't just use it directly, define a new op for it that we can all use.  ;-)

[21:33] <Darren_Duncan> that's a matter for p6l me thinks

[21:35] * geoffb tries for the first time building pugs with both Perl 5 and Parrot embedding turned on

[21:35] <geoffb> This should be interesting

[21:35] <integral> use Monads; [<a b>] >>= -> $a { [<c d>] >>= -> $b { $a ~ $b } }

[21:38] <Darren_Duncan> ?eval <a b>.map:{ $_ »~« <c d> }

[21:38] <evalbot6> Error:  unexpected ":" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[21:39] <Darren_Duncan> ?eval [<a b>].map:{ $_ »~« [<c d>] }

[21:39] <evalbot6> Error:  unexpected ":" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[21:39] <arcady> ?eval <a b>.map { $_ »~« <c d> }

[21:39] <evalbot6> Error:  unexpected "{" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[21:40] <Darren_Duncan> ?eval [<a b>]

[21:40] <evalbot6> ['a', 'b'] 

[21:40] <Darren_Duncan> ? eval [<a b>].map:{ $_ }

[21:41] <Darren_Duncan> ? ='eval [<a b>].map:{ $_ }

[21:41] <Darren_Duncan> ?eval [<a b>].map:{ $_ }

[21:41] <evalbot6> ('a', 'b') 

[21:41] *** Limbic_Region_ is now known as Limbic_Region

[21:41] <Darren_Duncan> ?eval [<a b>].map:{ $_ »~« 'z' }

[21:41] <evalbot6> Error:  unexpected ":" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[21:42] <Darren_Duncan> ?eval [<a b>].map:{ $_ ~ 'z' }

[21:42] <evalbot6> ('az', 'bz') 

[21:42] <Darren_Duncan> ?eval [<a b>].map:{ $_ >>~<< 'z' }

[21:42] <evalbot6> Error: Hyper OP only works on lists 

[21:42] <arcady> right

[21:42] <Darren_Duncan> ?eval [<a b>].map:{ $_ >>~<< ['z' ]}

[21:42] <evalbot6> ('az', 'bz') 

[21:43] <Darren_Duncan> ?eval [<a b>].map:{ $_ >>~<< [<y z>] }

[21:43] <evalbot6> ('ay', 'az', 'by', 'bz') 

[21:43] <Darren_Duncan> so the Unicode ... or other encoding issue was part of the problem

[21:44] <Darren_Duncan> ?eval [<a b>].map:{ $_ >>~<< [<c d>] }

[21:44] <evalbot6> ('ac', 'ad', 'bc', 'bd') 

[21:44] <Darren_Duncan> ?eval [<a b>].map:{ $_ »~« [<c d>] }

[21:44] <evalbot6> Error:  unexpected ":" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[21:45] <theorb> (Evil Encoding Issues)--

[21:46] <Darren_Duncan> problem is IRC specific, since my local pugs handles that one

[21:50] <Limbic_Region> theorb - your better half about?

[21:52] <geoffb> ..oO( I love it when album shuffle brings up something I haven't listened to in months )

[21:54] * castaway is

[22:01] <lightstep> waiting is

[22:03] <geoffb> Note to Linux kernel:  When a compile causes the OOM killer to go on a rampage, the proper process to kill is the compile, NOT THE X SERVER.

[22:03] <geoffb> *huff*

[22:05] <geoffb> Speaking of which, while I can build pugs just fine with just perl 5 embedding, pugs + perl 5 + parrot OOM's during link.

[22:05] <castaway> heh

[22:05] <geoffb> That seems . . . bad

[22:06] <integral> the link is quite intensive 8-)

[22:06] <geoffb> Just rebooted fresh, going to see if I can link without any cruft in mem.  After that, I could try doing 'init 1' before linking.  ;-)

[22:07] <integral> adding more swap from a file might be enough to do it

[22:09] <geoffb> Man, been a while since I used a swapfile.  Not a bad thought, though

[22:10] <integral> from what I remember 768MB is probably the least VM you'd want when compiling pugs

[22:11] * geoffb coughs

[22:11] <geoffb> OUCH

[22:11] <integral> but having said that I can't have that much on my 64MB box, but that was a minimum link

[22:11] <geoffb> I've got around 590MB of VM.

[22:11] <geoffb> Didn't expect that to be an issue

[22:14] <wilx> Hmm...pugs compilation doesn't take much more than 120 MB for ghc iirc.

[22:15] <geoffb> GHC is slow, but that's not the killer.  It's the link.

[22:15] <geoffb> s/slow/excruciating/, actually

[22:16] <wilx> Ah. I have noticed that xmms starts cutting the sound during pugs' link time.

[22:17] <wilx> I always blamed it on FreeBSD's stupid scheduler.

[22:17] <geoffb> yeah, it's pretty brutal.  Before the damn thing killed X, everything got REALLY unresponsive, despite it being a 2 CPU box

[22:17] <wilx> Some priority inversion sort of thing I thought.

[22:18] <Darren_Duncan> I finally got the last Locale-KeyedTest suite to pass all its tests ... but the workaround to do it is NASTY

[22:19] <Darren_Duncan> its nasty in that test suite files are hard-coded into the modle

[22:19] <Darren_Duncan> file names

[22:19] <geoffb> ?!?

[22:19] <Darren_Duncan> because "require $foo" doesn't work in Pugs right now

[22:19] <Darren_Duncan> only "require Foo" works

[22:20] <geoffb> I thought you just needed to do "$foo = 'Bar.pm'; require $foo" -- i.e., the '.pm' was required for indirect require

[22:20] <geoffb> Or is that unimp?

[22:21] <Darren_Duncan> if you think adding a ".pm" will make it work, then I'll try that ...

[22:21] <Darren_Duncan> the details ... when a plain "require Bar;" works, a "my $foo = 'Bar'; require $foo;" fails with a "Can't locate Bar.pm in @*INC" error.

[22:21] <geoffb> ghc peaked at 131 MB virtual memory

[22:21] <Darren_Duncan> testing ...

[22:22] <geoffb> linking now, ld is at 133 MB and climbing 

[22:22] <geoffb> whoot! LINK SUCCESSFUL

[22:22] <theorb> Odd.

[22:23] <Darren_Duncan> confirmed that problem still exists (I last checked it yesterday) ... will try the '.pm' thing now

[22:23] <geoffb> Darren_Duncan, I hadn't tried it myself, I just thought I read something about it being the same behavior as P5.

[22:23] <geoffb> nod

[22:23] <Darren_Duncan> on that note, Perl 5 doesn't work either

[22:23] <geoffb> It also could be s/being/supposed to be/, of course

[22:23] <Darren_Duncan> I had to do a string eval in perl 5 to make it work whereas a block eval should work

[22:24] <geoffb> With or without the PM?

[22:24] <geoffb> er, .pm

[22:24] <Darren_Duncan> always without

[22:25] <pjcj> Have you read perldoc -f require?

[22:25] <Darren_Duncan> I think the .pm addition worked

[22:26] <geoffb> pjcj, I was just about to make the same recommendation.  ;-)

[22:31] <Darren_Duncan> okay, so while the ".pm" addition works for require, I have another outstanding issue ... invoking a subroutine in that newly required file

[22:31] <geoffb> Lemme guess . . . import fails?

[22:31] <Darren_Duncan> invoking $template_module_name::get_text_by_key( 'foo' ) gives an Undeclared variable message

[22:32] <geoffb> ah

[22:32] <geoffb> Well, it's a bit hackish, but you could bind them manually:

[22:32] <Darren_Duncan> the '.' form, which is incorrect anyway as it isn't a class, says no compatable subroutine on the latter half

[22:33] <geoffb> our &get_text_by_key := $template_module_name::can('get_text_by_key')

[22:33] <geoffb> or somesuch, lemme check

[22:33] <Darren_Duncan> last time I tried to use 'can' it was unimplemented ... maybe not now though

[22:33] <geoffb> s/::/./

[22:34] <geoffb> But again, haven't tried it with a variable instead of a bareword classname

[22:34] <pjcj> are you looking for the equivalent of ${template_module_name}::get_text_by_key ?

[22:35] <Darren_Duncan> sort of

[22:35] <Darren_Duncan> a minute ...

[22:35] <geoffb> You know, pugs parsing seems oddly fragile.  Like the feel I get from stuff that has lots of special cases, rather than a few rules that get combined out the wazoo.  And yet it's an FP thing to do simple stuff combined widely, so I have some dissonance going here

[22:36] <geoffb> WTF?  Half of my message just disappeared

[22:36] <Darren_Duncan> in Perl 5, a bare "$text = $template_module_name->get_text_by_key( $msg_key );" works

[22:36] <Darren_Duncan> I wanted the Perl 6 equivalent

[22:37] <Darren_Duncan> btw, I will try using the new ".pm" thing I learned with my Perl 5 code and see if it works there ... then I can ditch my string evals

[22:38] <geoffb> You also have to do s,::,/,g

[22:38] <geoffb> But that's all in perldoc -f require

[22:39] <Darren_Duncan> that's nasty

[22:39] <geoffb> Sugar on top of sugar

[22:40] <geoffb> (Ingredients: dextrose, sucrose, fructose, galactose, sucralose, . . . )

[22:40] <Darren_Duncan> I would expect 'require' to work the same regardless of whether the class name is a bareword or in a variable, meaning with :: and no .pm

[22:40] <Darren_Duncan> I only expect 'do' to need that stuff

[22:40] <geoffb> The /../...pm version is the real one.  The :: bareword is sugar

[22:40] <Darren_Duncan> I see

[22:41] <geoffb> It's The Perl 5 Way.  ;-)

[22:41] <Darren_Duncan> and yet all the perl 5 docs and examples I've seen say to do it the :: way

[22:41] <Darren_Duncan> and I've been using the language since 1998

[22:41] <geoffb> Yep, because only in the case that you want to load a dynamically-chosen module will you ever notice the difference.

[22:41] <geoffb> So why confuse people with the facts?

[22:42] * geoffb is only half serious, BTW

[22:42] * geoffb also has writer's block, bah

[22:42] <Darren_Duncan> that probably explains why modules like 'DBI' are doing the same string-eval that I've been doing even though they may know what you've been saying

[22:43] <Darren_Duncan> there must be some impetus to prefer that form ... you keep the sugar

[22:43] <geoffb> I guess

[22:44] <geoffb> The only thing I can think is at some point maybe there was a platform that Perl ported to that didn't emulate the unix filesystem as needed

[22:44] <geoffb> For some years now, I think just about every Perl port has done so, but perhaps something early didn't

[22:44] <geoffb> (Not that I have touched OpenVMS or goodness willing ever will)

[22:44] <Darren_Duncan> another thing is, doesn't the "::" form also check the include paths?  That's what I want in this case

[22:45] <Darren_Duncan> otoh, the .pm form seems to as well

[22:45] <geoffb> (For that, I'd honestly have to check the docs)

[22:45] <Darren_Duncan> since the module in question is in an include path, but it works anyway

[22:45] <geoffb> good.

[22:46] <nothingmuch> hola!

[22:46] <nothingmuch> autrijus: i have a new laptop!

[22:46] * geoffb is thankfully everything isn't just sugar over a Turing Machine implementation

[22:46] <geoffb> nothingmuch, yay!

[22:46] <nothingmuch> i need to copy everything from the old disk

[22:46] <geoffb> Wadja get?

[22:46] <nothingmuch> do you have a 2.5" thingy we could use?

[22:46] <nothingmuch> geoffb: a powerbook 17"

[22:46] <geoffb> Mmmm, had one of those at my last job.

[22:47] <nothingmuch> it is very very very very yummy

[22:47] <geoffb> Hated the sharp edge of the handrest area, tho

[22:47] <nothingmuch> they're not that sharp

[22:47] <autrijus> nothingmuch: woot!

[22:47] <autrijus> nothingmuch: the ./ thing is fixed

[22:47] <geoffb> Plugged in an external KB to avoid giving my wrists fits

[22:47] <nothingmuch> or at least I haven't noticed yet

[22:47] <nothingmuch> hoorah!

[22:47] <nothingmuch> i can start working again

[22:47] <nothingmuch> and this time even compile locally (just finished installing xcode, ghc is next)

[22:48] <geoffb> But I do recall the display was just gorgeous

[22:48] <nothingmuch> are you at the hotel?

[22:48] <geoffb> Get enough RAM to do the link in mem?  ;-)

[22:48] <geoffb> nothingmuch, are you asking me that?

[22:48] <geoffb> (If so, no -- can't afford to go to the conferences these days)

[22:48] <nothingmuch> 1gb

[22:48] <nothingmuch> no, i'm asking autrijus

[22:49] <Darren_Duncan> ?eval my $foo = 3; $foo.can( 'bar' );

[22:49] <evalbot6> Error: No compatible subroutine found: "&can" 

[22:49] <nothingmuch> Darren_Duncan: i have a new mac!

[22:49] <Darren_Duncan> great

[22:49] <autrijus> nothingmuch: yes but I'd like you not coming over

[22:49] <Darren_Duncan> I have a 3-yr-old Mac

[22:49] <autrijus> unless you want to write my slides for me

[22:50] <nothingmuch> hah

[22:50] <autrijus> at which point you're welcome

[22:50] <nothingmuch> do you have any way to connect a 2.5" disk to another computer

[22:50] <Darren_Duncan> but its a desktop, not a portable

[22:50] <nothingmuch> via firewire, tcp/ip, or whatever?

[22:50] <Darren_Duncan> don't you mean 3.5"?

[22:50] <geoffb> Writing English outside of IRC seems to make autrijus cranky.  :-)

[22:50] <Darren_Duncan> or do you mean a hard disk?

[22:50] <nothingmuch> yep

[22:50] <nothingmuch> no, a laptop disk

[22:50] <Darren_Duncan> ah

[22:50] <Darren_Duncan> hard disk

[22:51] * coral moves forward approximately one day of scrollback, still 2 days behind

[22:51] <geoffb> nothingmuch, if your old laptop is a Mac, even if it won't be able to boot normally, you might be able to boot it into "Firewire Target" mode, and firewire link the too

[22:51] <nothingmuch> no, i tried that

[22:51] <geoffb> :-(

[22:52] <Darren_Duncan> whether you can boot from firewire depends on your firmware being up to date

[22:52] <Darren_Duncan> on the drive

[22:52] <nothingmuch> Darren_Duncan: the laptop is completely dead

[22:52] <Darren_Duncan> so you want to take the drive out of there then?

[22:52] <nothingmuch> yep

[22:53] <Darren_Duncan> if you can't fit the drive in a computer, you could get an external enclosure for it and/or some temporary connection

[22:54] <nothingmuch> someone is bringing one tomorrow so i can do that

[22:54] <nothingmuch> but i'd like to copy ASAP

[23:21] <svnbot6> r5039, Darren_Duncan++ | Locale-KeyedText : this module is now complete, passing all of its tests, and updated to version 1.5.0 to match its Perl 5 version 1.05; the Translator.translate_message() method was largely rewritten; a NASTY hack still exists in that function preventing it from working except with the test suite, due to Pugs not supporting module_name::bar() yet ... fix that and module should be generally useful

[23:22] <autrijus> oh no, darren is talking to me in the commit logs

[23:22] <Darren_Duncan> not specifically

[23:23] <autrijus> ?eval module Foo; sub bar { 3 }; module main; Foo::bar

[23:23] <Darren_Duncan> your name wasn't in it so I shouldn't have woken you from your sleep

[23:23] <evalbot6> 3 

[23:23] <autrijus> what wasn't working?

[23:23] <Darren_Duncan> try it with $bar = 'Foo'

[23:23] <autrijus> ?eval module Foo; our $bar = 'Foo'; module main; say $Foo::bar

[23:23] <evalbot6> Error: Undeclared variable: "$Foo::bar" 

[23:23] <autrijus> ?eval module Foo; our $bar = 'Foo'; module main; $Foo::bar

[23:24] <evalbot6> Error: Undeclared variable: "$Foo::bar" 

[23:24] <autrijus> ?eval package Foo; our $bar = 'Foo'; module main; $Foo::bar

[23:24] <evalbot6> Error: Undeclared variable: "$Foo::bar" 

[23:24] <Darren_Duncan> that's the problem

[23:24] <pdcawley> ?eval package Foo {...}; our $Foo::bar = 1; $Foo::bar

[23:24] <evalbot6> *** ... - not yet implemented     at <eval> line 1, column 14-17 

[23:24] <Darren_Duncan> the non-hack line is commented out in my module ... if that or an equivalent can be made to run, its what is needed

[23:25] <pdcawley> ?eval module Foo { our $bar = 'Foo' }; $foo::bar

[23:25] <evalbot6> Error: Undeclared variable: "$foo::bar" 

[23:26] <pdcawley> ?eval module Foo { our $bar = 'Foo' }; $Foo::bar

[23:26] <Darren_Duncan> the wider context is "my $foo = 'Bar'; require $foo~'.pm'; my $baz = $foo->abc( 'def' );"

[23:27] <Darren_Duncan> incidentally, it would be nice if the '.pm' wasn't required

[23:27] <Darren_Duncan> Bar declares a module and abc is a sub

[23:27] <Darren_Duncan> the same module and sub work when $foo is replaced by a bareword

[23:29] <Darren_Duncan> the specific line I want to work is ... $text = $template_module_name::get_text_by_key( $message.msg_key );

[23:42] <Darren_Duncan> will try "module Foo { our $bar = 'Foo' }; $Foo::bar" once make is done

[23:46] <Darren_Duncan> ?eval module Foo { sub abc { return 'def' } }; Foo::abc();

[23:46] <evalbot6> 'def' 

[23:46] <Darren_Duncan> ?eval module Foo { sub abc { return 'def' } }; my $z = 'Foo'; $z::abc();

[23:46] <evalbot6> Error: Undeclared variable: "$z::abc" 

[23:47] <Darren_Duncan> ?eval module Foo { sub abc { return 'def' } }; my $z = 'Foo'; ${$z}::abc();

[23:47] <evalbot6> Error:  unexpected ":" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[23:47] <Darren_Duncan> ?eval module Foo { sub abc { return 'def' } }; my $z = 'Foo'; &{$z}::abc();

[23:47] <evalbot6> Error:  unexpected ":" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[23:48] * Darren_Duncan not sure why pdcawley's last comment appeared in bold ... an IRC bug perhaps? ...

[23:50] <vcv--> i assume he put the bold character there whether acidentally or intentionally

[23:51] <pdcawley> Accidentally.

[23:51] <autrijus> yo Darren_Duncan.

[23:51] <Darren_Duncan> hello

[23:51] <autrijus> fixed. committing

[23:51] <clkao> autrijus!!

[23:52] <Darren_Duncan> so, was that a real bug, or my not calling it correctly?

[23:52] <autrijus> a bug.

[23:52] <autrijus> qualified names was improperly installed.

[23:52] <autrijus> Foo::$bar  # this do us no good

[23:53] <autrijus> it should be $Foo::bar; and in some cases not even the Foo:: was even missing.

[23:53] <autrijus> totally my thinko.

[23:53] <autrijus> r5040.

[23:53] <putter> ?eval module Foo { sub abc { return 'def' } }; my $z = 'Foo'; &::($z)::abc();

[23:53] <evalbot6> 'def' 

[23:54] <Darren_Duncan> now making 5040

[23:54] <putter> ?eval module Foo { sub abc { return 'def' } }; my $z = 'Foo'; &($z)::abc();

[23:54] <evalbot6> Error:  unexpected "(" expecting "::" 

[23:54] <Darren_Duncan> ?eval module Foo { sub abc { return 'def' } }; my $z = 'Foo'; $z::abc();

[23:54] <evalbot6> Error: Undeclared variable: "$z::abc" 

[23:54] <obra> hey people

[23:54] <clkao> hi obra

[23:54] <Darren_Duncan> hey

[23:55] <obra> where are folks?

[23:56] <putter> Darren_Duncan: embedded name interpolation is paren'ed: ...("foo")...

[23:56] <Darren_Duncan> ?eval module Foo { sub abc { return 'def' } }; my $z = 'Foo'; ($z)::abc();

[23:56] <evalbot6> Error:  unexpected ":" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[23:57] <autrijus> yay. I'm feeling much better.

[23:57] <Darren_Duncan> come again?

[23:58] <Darren_Duncan> putter, can you edit the line I ran as you indicated; my edit didn't seem to work

[23:58] <svnbot6> r5040, autrijus++ | * qualified names was misinstalled; we now reparse the sigil

[23:58] <svnbot6> r5040, autrijus++ |   part and explicitly install it into envPackage again.

[23:58] <autrijus> <- just sent allison/lwall a mail to apologise if I've misled them into thinking "pugs is 80%-90% there" in the state of carrot

[23:58] <putter> ::foo::bar::("hee")::($haw)::zork

[23:58] <putter>  ?eval module Foo { sub abc { return 'def' } }; my $z = 'Foo'; $::($z)::abc();

[23:58] <autrijus> it's more like less than 30% ;)

[23:58] <putter> ?eval module Foo { sub abc { return 'def' } }; my $z = 'Foo'; $::($z)::abc();

[23:58] <evalbot6> Error: Undeclared variable: "$Foo::abc" 

[23:59] <putter> hmm...

[23:59] <obra> autrijus: are poeple hacking somewhere?

[23:59] <putter> oh,

[23:59] <putter> ?eval module Foo { sub abc { return 'def' } }; my $z = 'Foo'; &::($z)::abc();

[23:59] <evalbot6> 'def' 

[23:59] <autrijus> obra: no, I'm in my room working on slides. ingy I think is scheduling a kwiki hackathon somewhere

[23:59] <obra> autrijus: what percentage of perl6 syntax do you think pugs parses?

[23:59] <Darren_Duncan> okay, will try that

[23:59] <autrijus> I have done three slides!

[23:59] <obra> autrijus: ah. 

[23:59] <obra> irc--

[23:59] <autrijus> obra: "parses into noop" counts?

