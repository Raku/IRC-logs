[02:23] <rafl> 19:32 < autrijus> is that going to need ghc team's help on ghc 6.4.1, or is it strictly a ghc maintainer's issue in the debian side?

[02:24] <rafl> Amnesiac: I think the ghc team needs to support gcc-4.0 properly.

[02:24] <rafl> Err.

[02:24] <rafl> autrijus: I think the ghc team needs to support gcc-4.0 properly.

[02:30] * mugwump still doesn't understand why MMD is a fundamentally different problem to SMD dispatch order

[02:58] <svnbot6> r5713, putter++ | Added Rule::pattern() to Prelude.pm

[03:00] <QtPlatypus> mugwump: MMD has a larger number of possable matches.

[03:03] <geoffb> OK, so now having caught up on a week of #perl6 backlog, I've got a question or two.

[03:03] <geoffb> What is the origin of the 'moose' jokes?

[03:04] <geoffb> And does anyone know if there is a site (wiki, perhaps) that has lists of "recognized classic" books on various topics of computer science?

[03:05] <geoffb> Like Knuth's Art of Computer Programming for mathematical underpinnings, or Foley & van Dam for general computer graphics . . . .

[03:07] <stevan> geoffb: I think "moose" is a private joke between nothingmuch and himself :)

[03:08] <geoffb> I keep seeing people mentioning various books in a way that suggests they are topic classics, but I've never heard of.  Which made me think, where do people learn what is good reading, outside of just hearing someone mention them?

[03:08] <geoffb> stevan, thx

[03:09] <mugwump> QtPlatypus: sure, but SMD also can be ambiguous; in fact in Damian's example I don't see what difference it makes having the first invocant there or not

[03:10] <mugwump> nor why changing the program structure in the way that he has, that the results are somehow meaningful

[03:10] <stevan> geoffb: what are you looking for in particular?

[03:10] <stevan> what subjects

[03:12] <stevan> mugwump: have you ever read/heard about generics functions in CLOS?

[03:13] <stevan> they looks quite interesting

[03:13] <stevan> kind of a weird variant of MMD

[03:13] <mugwump> is there enough metamodel there to being prototyping these schemes?

[03:13] <dudley> geoffb: I've often asked the same question. If you find some, add them to READTHEM.

[03:13] <geoffb> stevan, well let me put it this way -- the bookshelves in my office contain my college textbooks, a few shelves of books on graphics and Perl, and a few more on various technology topics, such as HTML, TCP/IP, 386 assembly, and so on.  But really not much in the well rounded theory area.

[03:13] <stevan> mugwump: you mean the MMD stuff? I have no been following the discussion

[03:14] <mugwump> right.  Well, let me try

[03:14] <mugwump> Luke is primarily concerned about the empty subclass test.  ie, deriving a class should not change which subs get called due to dispatch order weighting

[03:14] <stevan> mugwump: please do it as an extension to the metamodel right now

[03:14] <stevan> I am in the throws of a refactor

[03:14] <mugwump> sure ... this is 10,000 mile stuff

[03:15] <geoffb> Basically I'd like to be able to get a list of CS books that I could work through and have a pretty good grounding in most of CS, beyond just the stuff I *need* for work and hobbies.  Type Theory for instance (though of course this is one that READTHEM probably already covers)

[03:15] <stevan> geoffb: what type of theory?

[03:15] <stevan> geoffb: I used to buy old computer books off ebay

[03:15] <stevan> got many "classics" for really cheap

[03:15] <stevan> but it all depends on what you are interested in 

[03:15] <mugwump> Damian's position appears to be that this Manhattan distance metric, which weighs up the "best" one to call based on lots of factors, but this includes the number of specialisations

[03:15] <stevan> geoffb: also, many of the classics are not as valid as they used to be

[03:16] <mugwump> ... is the best of them.  and he claims to have done his homework

[03:16] <geoffb> stevan, cost is always annoying with CS books, but the bigger issue is just knowing what's worth reading, and what's crap.

[03:16] <stevan> for instance the "dragon" book on compiler design is a good book, but outdated

[03:17] <stevan> geoffb: thats whats great about the ebay thing, I got some really good stuff for cheap and some real crap for just as cheap

[03:17] <geoffb> stevan, point taken of course, but some books become "classics" the first year they are in print.  A modern dragon book would be a wonderful thing.

[03:17] <mugwump> however, including the number of specialisations as a metric sounds like it breaks the "empty subclass" test, but Damian is adamant that the alternatives do, too.  I tried hard and don't follow it.

[03:17] <mugwump> End of summary.

[03:17] <stevan> mugwump: I will read the thread if I get a chance

[03:18] <geoffb> (And while I'm wishing, it would be good to know which books were better in older editions than new ones, which sadly applies to a few in my library)

[03:19] <geoffb> Anyway, I can't imagine that this hasn't been asked and answered thousands of times already . . . it's just a matter of finding the site that recorded everyone's collective book wisdom.

[03:19] <stevan> geoffb: a great cheap way to learn some of this stuff is to hunt down papers on the net

[03:19] <stevan> geoffb: if you give me a topic list, I can try to compile something for you based on what I have and know

[03:20] <stevan> it by no means comprehensive knowledge, but I can tell you what I know/like

[03:21] <geoffb> I don't even know the topics I'm missing.  :-)  But how about this.  I'll list the ones I have and consider classic, and you can do the same, and we'll compare and maybe feed to READTHEM.

[03:21] <stevan> ok

[03:22] <geoffb> Compilers: The dragon book (yes, I know, dated): Aho, Sethi, Ullman: Compilers: Principles, Techniques, and Tools

[03:23] <geoffb> Queueing Theory: Tanner: Practical Queueing Analysis

[03:24] <geoffb> Algorithm Implementation: Sedgewick: Algorithms in C (1st Ed.)

[03:24] <geoffb> Team/project management: McConnell: Rapid Development

[03:25] <geoffb> Cryptography: Schneier: Applied Cryptography

[03:25] <stevan> Practical Cryptography is a good one too

[03:25] <stevan> I think that is also schiener

[03:25] <geoffb> Mathematical Basis of CS: Knuth: Art of Computer Programming

[03:26] <geoffb> Assembly Language Thinking: Abrash: Zen of Assembly Language and Zen of Code Optimization (details are dated, but concepts less so)

[03:27] <stevan> yuk assmebly :P

[03:27] <geoffb> Graphics Intro: Foley, van Dam, Feiner, Hughes: Computer Graphics: Principles and Practice

[03:27] <stevan> Concurrent Programming in Erlang # totally changed how I think of programming

[03:28] * stevan is trying to recall from his head since he is upstairs and the books are down

[03:28] <geoffb> Graphical Design: Tufte: The Visual Display of Quantitative Information

[03:28] <geoffb> :-)

[03:28] <stevan> Tufte Rules :)

[03:29] <geoffb> Game Design: Koster: A Theory of Fun for Game Design

[03:29] <stevan> The Pattern on the Stone : Daniel Hillis # not just CS, but really interesting stuff

[03:29] <stevan> The Invisible Computer : Donald Norman 

[03:29] <geoffb> Computer Architecture: Hennessey and Patterson: Computer Architecture: A Quantitative Approach

[03:30] <stevan> The Humane Interface : Jef Raskin # chages the way I think about UIs

[03:30] <stevan> ML for the Working Programmer : Paulson # I am still working my way through this book

[03:31] <geoffb> Raw Unix Coding: Stevens: Advanced Programming in the UNIX Environment

[03:31] <stevan> The Pragmatic Programmer # a modern classic IMO

[03:31] <geoffb> TCP/IP Fundamentals: Comer & Stevens: Internetworking with TCP/IP 

[03:31] <stevan> ANSI Common Lisp : Paul Graham

[03:31] <stevan> geoffb: I was going to say that one too :)

[03:31] <geoffb> TPP: agreed

[03:31] <geoffb> heh

[03:32] <stevan> Smalltalk 80: Golberg and Robinson # a must have for understanding pure OO

[03:32] <jdv79> you guys opening a library or something?

[03:33] <stevan> :)

[03:33] <geoffb> Advanced C++: Meyers: Effective C++/More Effective C++ (these books actually are why I won't program in C++ :-)

[03:33] <geoffb> jdv79, see scrollback

[03:34] <geoffb> Pragmatism: Bentley: Programming Pearls and More Programming Pearls

[03:34] <jdv79> oh wow - put it on a wiki

[03:35] <geoffb> Regex: Friedl: Mastering Regular Expressions

[03:35] <geoffb> jdv79, READTHEM at a minimum, Wiki if someone knows a good place.  :-)

[03:35] <stevan> Reusable Software : The Base Object-Oriented Component Libraries : Bertrand Meyer # this book is really really really good book about writing good large scale APIs

[03:36] * stevan has to take the dog out, bbiab

[03:37] <geoffb> stevan, nod

[03:37] <mugwump> ?eval my @suggestions=<this that t'other>; {any($_)&all($_)}(@suggestions)

[03:37] <evalbot6> 't\'other' 

[03:37] <geoffb> Perl 5 & Networking: Stein: Network Programming with Perl

[03:38] <geoffb> It's sad how many books on my shelf I haven't actually read enough of to make a good recommendation

[03:39] <geoffb> Perl 5 Stretching: Dominus: Higher-Order Perl and Conway: Object Oriented Perl

[03:41] <geoffb> Numerical Analysis: Conte and De Boor: Elementary Numerical Analysis: An Algorithmic Approach

[03:41] <stevan> The Art of the MetaObject Protocol # just came today, but I can already tell it will be a classic

[03:41] <stevan> ok, thats as good as I can do for now, more later &

[03:42] <geoffb> stevan++ # thanks for your input!

[03:42] * geoffb has more than a half dozen books on firewalls and internet security and can't remember which ones were any good . . . .

[03:49] <geoffb> #haskell has a few suggestions (perhaps already covered in READTHEM):

[03:49] <geoffb> Abelson, Sussman, Sussman: Structure and Interpretation of Computer Programs

[03:50] <geoffb> Pierce: Types and Programming Languages

[03:51] <geoffb> Fowler: Analysis Patterns

[03:53] <geoffb> "Richard P. Gabriel's writings for software engineering"

[03:55] <geoffb> Van Roy & Haridi: Concepts, Techniques, and Models of Computer Programming

[04:16] <geoffb> This is getting interesting . . . The shapr on #haskell has given me a number of places to look for lists . . . so now I'm chasing those . . . .

[04:23] <geoffb> Hmmm,  I've now gone from a lack of info to an embarrasment of riches.

[04:24] <geoffb> What I need now is to categorize

[04:25] * geoffb ruminates and masticates thoughtfully

[04:33] <dudley> I was already complaining about the size of my books-to-read stack. This certainly isn't helping.

[04:33] <geoffb> heh.  And it will get worse.

[04:33] <geoffb> All though I think categorization and some mild prioritization will help

[04:33] * dudley considers growing an extra head

[04:33] <geoffb> and believe me, I KNOW HOW YOU FEEL

[04:51] <castaway> You need my virtuallibrary site.. ;)

[04:53] <geoffb> castaway, do tell

[04:54] <castaway> well its still in the making.. but the point is a site where you can list your own library, look at those of others, discuss books / categories of books, add notes to items, create your own categorisations, etc etc

[04:55] <castaway> see http://theorbtwo.perlmonk.org/kwiki/index.cgi?VBFAQ

[04:58] <castaway> (and I'm looking for helpers, if you want another project to work on ,)

[04:58] <geoffb> like I need a few more things to do . . . 

[04:58] <geoffb> :-)

[04:58] <castaway> heh

[04:59] <geoffb> I'll think about it, but I've got too much on my plate as it is.

[05:00] <geoffb> I am right now actively thinking about great book categorization, so that may be useful to you at some point

[05:00] <geoffb> (or not)

[05:02] <castaway> cool

[05:06] * castaway needs more hours in the day to work on this ,)

[05:07] * geoffb needs more hours in the day period

[05:07] <castaway> indeedy

[05:16] * geoffb is creating a mini-database of information about the "great CS books" he has on hand, to get a feel for categorization and such

[05:18] <castaway> have fun ;)

[05:18] <geoffb> actually, it is.

[05:18] * castaway nods

[05:18] <geoffb> And a nice break from harder things.  :-)

[05:18] <castaway> I'm still squeezing the bugs out of my book importing mechanism :(

[05:20] <castaway> its odd, the entire import code fails without telling me why, sticking bits in subs and calling them works fine *sigh*

[05:20] <geoffb> bleah

[05:20] <castaway> yeah, its beginning to really annoy me

[05:34] <autrijus> greetings λ camels

[05:34] <geoffb> greetings, autrijus 

[05:35] <coral> autrijus: surviving the storm?

[05:36] <autrijus> yup.

[05:36] <geoffb> And there was much rejoicing.  :-)

[05:36] <autrijus> :)

[06:00] <masak> autrijus: is the cyclone still... cycloning?

[06:01] * masak has no cyclones outside, just regular bad weather

[06:01] <masak> ...ideal for programming

[06:02] <autrijus> no... it fizzled now

[06:02] <autrijus> which means I get to go outside for food

[06:02] <autrijus> bbiab

[07:07] <masak> i think in everything one does one has the choice to err on the side of being correct or on the side of being pragmatic

[07:08] <masak> what i like about perl is that the language doesn't make that choice for me

[07:08] <geoffb> oh yes, definitely

[07:08] * masak is programming java presently

[07:08] <masak> java makes that choice for me

[07:08] <geoffb> painfully so

[07:08] <masak> :(

[07:09] <masak> i can't sneeze in java without unintentionally defining ten classes

[07:11] <masak> and, oh, tracing the cause of a NullPointerException in the servlet logs is not as exciting as it may sound

[07:12] * masak likes perl where the errors are mostly caused by bugs, not by language design

[07:12] <geoffb> so agree with you there

[08:26] *** Aankh|Clone is now known as Aankhen``

[09:14] <pasteling> Someone at 69.110.115.185 pasted "A concept for finding great" (75 lines, 1.3K) at http://sial.org/pbot/11869

[09:17] <geoffb> dangit

[09:17] <geoffb> castaway, ping

[09:18] <masak> neat nopaste

[09:18] <geoffb> well, for anyone who's interested, here's the correct nopaste (that last one was premature):

[09:18] <pasteling> "geoffb" at 69.110.115.185 pasted "A concept for finding great books to read" (82 lines, 1.5K) at http://sial.org/pbot/11870

[09:19] <geoffb> thanks, masak 

[09:19] <castaway> pong?

[09:20] <geoffb> Thought you might be interested in that paste, castaway 

[09:20] * castaway looks

[09:21] <pasteling> "geoffb" at 69.110.115.185 pasted "A concept for finding great books to read" (95 lines, 1.9K) at http://sial.org/pbot/11871

[09:21] <geoffb> oh, forgot to include help text before, see most recent paste

[09:21] <castaway> heh. and the code?

[09:22] <geoffb> It's ~200 lines of perl 5.

[09:22] <geoffb> I'll commit a p6 version hopefully tomorrow, if I'm awake enough.

[09:22] <castaway> plus how you get the info in there in the first place :)

[09:22] <geoffb> Right now, I'm pretty tired

[09:22] <castaway> okiedokie

[09:22] <geoffb> YAML.  And manual entry.  :-)

[09:24] <geoffb> Book suggestions came from this channel (stevan, mostly), #haskell (shapr), and the c2.com wiki book lists

[09:24] <geoffb> many still to be added to the YAML, of course -- I got quite a few suggestions

[09:25] <castaway> nifty, anyhoo :)

[09:25] <geoffb> thx.

[09:25] <geoffb> And a fun few hours of hacking

[09:25] <castaway> hopefully that'll be possible on the library when I'm done (sometime next century..)

[09:25] <castaway> indeedy

[09:25] <geoffb> heh

[09:28] <geoffb> OK, time to annoy wife by coming to bed at 2:30 AM

[09:28] <castaway> oh, and add in a 'pick one at random' command .)

[09:28] <castaway> g'night :)

[09:28] <geoffb> castaway++ # good idea!

[09:28] <geoffb> g'night to you too

[09:29] *** Aragone is now known as Arathorn

[09:36] <pasteling> "geoffb" at 69.110.115.185 pasted "The pick command (castaway++)" (42 lines, 808B) at http://sial.org/pbot/11872

[09:36] <geoffb> Must . . . leave . . . keyboard

[09:38] <castaway> heh, get to bed!

[09:51] <masak> geoffb++ # neat program

[11:55] <nothingmuch> this is fun:.

[11:55] <nothingmuch> i have a test suite to run forth code

[11:55] <nothingmuch> with ingy's Test::Base

[11:55] <nothingmuch> i run it against gforth

[11:56] <nothingmuch> when it starts passing I know my tests are OK

[11:56] <nothingmuch> then I switch the backend to harrorth

[11:56] <nothingmuch> when they pass again I know harrorth is OK

[11:57] <wilx> O_O

[11:57] <wilx> P6 Forth backend?

[11:57] <nothingmuch> actually perl 5 forth 

[11:57] <nothingmuch> but it's only an intermediate impl

[11:57] <nothingmuch> i'm really doing forth in haskell

[11:57] <castaway> funky!

[11:57] <nothingmuch> to learn haskell

[11:57] <castaway> you're just crazy :)

[11:58] <nothingmuch> and the perl5 one is supposed to help me define the minimal prelude

[11:58] <nothingmuch> such that most of my forth machine is actually written in forth itself

[11:58] <nothingmuch> with 3 levels of bootstrapping:

[11:58] <nothingmuch> the primitives, which are provided by the system

[11:58] <nothingmuch> and then the words to get the ':' and ';' words

[11:58] <nothingmuch> they are compiled via a bootstrapper

[11:59] <nothingmuch> and then the rest of the prelude words are compiled using ':' and ';'

[11:59] <nothingmuch> castaway: actually I think this is very sane =)

[12:01] <castaway> where do you get time to do all this?

[12:05] <nothingmuch> well, i'm babysitting compilations right now

[12:05] <nothingmuch> as the day will progress I will become busier and busier

[12:07] * castaway usually feels quite guilty about fiddling with toy projects at work, even if the work computer is busy..

[12:07] <nothingmuch> well, i really have nothing to do

[12:07] <nothingmuch> when everybody goes home at 20:00-21:00 (hard week), then I can really start working

[12:07] <nothingmuch> because they will need results for tomorrow

[12:07] <nothingmuch> based on their work today

[12:08] <castaway> I see

[12:09] <stevan> morning nothingmuch, castaway :)

[12:09] <nothingmuch> hola stevan 

[12:10] <castaway> hey stevan

[12:12] * castaway nudges Limbic

[12:13] <nothingmuch> wow, my forth backend is more complete than I thought =D

[12:13] * Arathorn wonders if he's got himself caught in a second-degree warnock on p6l

[12:14] <wilx> warnock?

[12:14] <osfameron> that sounds like something out of the rules of Mornington Crescent..

[12:14] * Limbic_Region falls over at the nudging, hits the floor, and promptly falls back asleep in a more comfortable position

[12:14] <Arathorn> http://en.wikipedia.org/wiki/Warnock

[12:15] * osfameron pushes Limbic_Region down a treacle well

[12:15] <Arathorn> treacle treacle treacle treacle...

[12:15] <stevan> Arathorn: which post?

[12:15] <castaway> Hrrmm

[12:16] <Arathorn> the most recent one from [email@hidden.address] trying to grapple with Larry's commentary on ::

[12:16] <Arathorn> i'm just being impatient, tho' (or i'm worried that I wrote the mail too late last night for it to make any coherent sense at all ;D)

[12:17] <Arathorn> the most amusing thing about playing Mornington Crescent is how deserted the station is irl... i can only assume that people tend to get caught out in Warnock Dilemmas and Register Alligators in the outer reaches...

[12:17] * Arathorn waffles off

[12:23] <nothingmuch> me reads mail after not having done so for about 24 hrs

[12:29] <Arathorn> nothingmuch: you're sending mails from 24 hours ago, fwiw

[12:30] <castaway> ,)

[12:31] <nothingmuch> ?

[12:31] <nothingmuch> oh, right

[12:31] <nothingmuch> postfix died

[12:31] <nothingmuch> queue was full

[12:31] <nothingmuch> =)

[12:31] <Arathorn> ah - fair enough

[12:31] <nothingmuch> mutt hasn't finished opening

[12:31] <Arathorn> was trying to piece together whether they were just old or misdated

[12:32] <nothingmuch> they are old

[12:32] <nothingmuch> i replied to luke, i think

[12:32] <nothingmuch> can't remember what else

[12:59] <wilx> Huh.

[12:59] <wilx> Could somebody post somewhere some examples of P6 compiled into JS? 

[13:00] <wilx> I'd really like too see it but I do not have Pugs and I kinda am not able to build it on Windows.

[13:01] <osfameron> tried PxPerl ?

[13:01] <osfameron> autrijus posted link to http://m19s28.vlinux.de/iblech/stuff/not_perm/pil2js-demo/05-sub.t.html on his journal

[13:01] <Arathorn> wilx: http://m19s28.vlinux.de/iblech/stuff/not_perm/pil2js-demo/mandel.p6.html

[13:01] <wilx> Nope, what is it?

[13:02] <osfameron> wilx: PxPerl is a windows binary of Pugs

[13:02] <osfameron> FireFox-- # a script on this page is causing Mozilla to run slowly popup

[13:02] <osfameron> (which you can't cancel)

[13:02] <wilx> Yup, same here.

[13:03] <Arathorn> i can cancel it, fwiw - but i think iblech has breaking the main CPU-intensive loop into a background thread in his pipeline

[13:04] <osfameron> oh, actually, I can cancel it but then it asks me again

[13:04] <osfameron> for fuck's sake, I told you to piss off already you stupid bag of shite

[13:04] * osfameron considers going back to Opera

[13:04] <castaway> tsktsk

[13:04] <castaway> Opera++

[13:05] <castaway> (took 3min40 but didnt complain ,)

[13:05] <osfameron> wilx: PxPerl is at http://www.pixigreg.com/

[13:06] <Arathorn> my opera was miles faster than firefox, weirdly

[13:06] <Arathorn> (under opera 8)

[13:06] <Arathorn> must see how Safari 2 runs with its new JS engine...

[13:06] <wilx> Hmm, it doesn't seem to work, the mandel example, under IE6.

[13:07] <Arathorn> works fine for me

[13:07] <Arathorn> what does the javascript console say?

[13:08] <Arathorn> bear in mind that it'll take a few minutes to draw ;)

[13:08] <Arathorn> (and IE's buffering's a bit bashful)

[13:08] <nothingmuch> omfg, quicksilver is absolutely insane

[13:08] <svnbot6> r5714, iblech++ | * PIL2JS: Renaming: Former PIL2JS.Box.Proxy is now PIL2JS.Box

[13:08] <svnbot6> r5714, iblech++ |   to better reflect their behaviours.

[13:08] <svnbot6> r5714, iblech++ | * PIL2JS: Repaired/fully implemented &infix:<=:=>.

[13:08] <svnbot6> r5714, iblech++ | * PIL2JS: my @a = (0, 1, 2); @a[1] = 42 works now (was dieing:

[13:08] <svnbot6> r5714, iblech++ |   "cannot modify constant").

[13:08] <svnbot6> r5714, iblech++ | * PIL2JS: Binding improved:

[13:08] <svnbot6> r5714, iblech++ |   * "3 := 4" is now a real error (and not a silent JavaScript error).

[13:08] <svnbot6> r5714, iblech++ |   * "my $a; my $b := $a; $a := $b" is an error now, too

[13:08] <svnbot6> r5714, iblech++ |     ("cannot create a bind cycle").

[13:08] <svnbot6> r5714, iblech++ |   * Binding array and hash elems really work now.

[13:09] <nothingmuch> if you type a URL, and you ask for it's subitems, it gets the page, takes it apart, and gives you the interesting bits

[13:09] <nothingmuch> without ever opening the browser

[13:11] <Arathorn> . o O ( wget -r )

[13:11] <nothingmuch> o I hear perl6? http://lambda-the-ultimate.org/node/view/852

[13:11] <nothingmuch> Arathorn: quicksilver is like a launchbar thing

[13:11] <nothingmuch> you hit a hot key

[13:11] <nothingmuch> type some text

[13:11] <nothingmuch> and it guesses what item you mean

[13:12] <nothingmuch> if it's a URL, you can open it

[13:12] <nothingmuch> or you can view it's subitems in it, by pressing the right arrow

[13:12] <Arathorn> ah, cool

[13:13] <nothingmuch> do you hav OSX?

[13:13] <nothingmuch> http://quicksilver.blacktree.com/

[13:13] <Arathorn> i have a mac mini buried in my desk somewhere

[13:13] <nothingmuch> install it then... it's lots of fun

[13:13] * Arathorn will give it a whirl next time he's feeling fruity :)

[13:13] <nothingmuch> i've mapped it to the fn key

[13:14] <nothingmuch> when I just press it it launches, if I press and hold it doesn't get in the way

[13:14] <castaway> buried *in* your desk?

[13:14] <osfameron> quicksilver and subethaedit are the 2 main reasons I wanted to try OSX

[13:14] <Arathorn> yeah, i wanted it for subethaedit and omnigraffle

[13:14] <nothingmuch> i tried it a while ago (qs), but it didn't support hebrew

[13:14] <Arathorn> (and quartz composer)

[13:14] <nothingmuch> now it does

[13:14] <osfameron> though I found the rest of it annoying enough that I haven't really bothered

[13:14] * castaway mutters something about SEE

[13:14] <nothingmuch> Arathorn: omnigraffle isn't as good as visio (ack) IMHO

[13:14] <nothingmuch> not that i've used anything other than these two

[13:14] <Arathorn> visio *still* can't do wretched dropshadows

[13:14] <Arathorn> because it's stuck with 1996-vintage GDI

[13:15] <nothingmuch> oh, the pretty factor

[13:15] <nothingmuch> i don't know about the looks, i must admit i never really cared

[13:15] <Arathorn> well, unfortunately the pretty factor is often quite important for public-facing diagrams

[13:15] <osfameron> Visio also sometimes decides that though you explicitly moved smart connectors, it's now going to put them back to its default path-finder algorithm path

[13:16] <Arathorn> omnigraffle 4 is a big improvement over 3, too

[13:16] <Arathorn> (although i don't dispute that visio has much better stencil libraries)

[13:17] * nothingmuch doesn't use those programs often

[13:17] <nothingmuch> i'd rather sketch and scan

[14:08] <svnbot6> r5715, iblech++ | PIL2JS: New file runjs.pl (compiles Perl 6 to JavaScript and runs it):

[14:08] <svnbot6> r5715, iblech++ | perl5/PIL2JS/runjs.pl t/01/01-tap.t

[14:25] <autrijus> iblech: I made runjs.pl happier to invoke

[14:25] <svnbot6> r5716, autrijus++ | * runjs.pl - allow it to be invoked from any directory,

[14:25] <svnbot6> r5716, autrijus++ |   using FindBin.pm to find the location of prelude etc.

[14:25] <svnbot6> r5716, autrijus++ | * Also, `--` is no longer mandatory -- this should Just Work:

[14:25] <svnbot6> r5716, autrijus++ |     % perl runjs.pl -e "say 'Hello, World'"

[14:25] <cventers_> ?eval say $?PUGS_VERSION

[14:25] <evalbot6> Perl6 User's Golfing System, version 6.2.8, July 13, 2005 (r5715) bool::true 

[14:25] <iblech> autrijus: Sure, thanks :)

[14:25] <autrijus> iblech++ # idea==>iblech==>code

[14:26] <iblech> autrijus: :pil.yaml my %hash = (a => 1) -- look at the context of &infix:<,>, it's TCxtVoid. That's a bug, right?

[14:26] <autrijus> must be a bug, yes

[14:26] <autrijus> I noticed it a while ago

[14:27] <nothingmuch> perl runjs.pl

[14:27] <nothingmuch> that's 3 languages in one system

[14:27] <nothingmuch> =D

[14:29] * autrijus is still doing relatively uninteresting PDF::Template hackery for $work

[14:30] * iblech (tries to) implement context in PIL2JS :)

[14:31] <autrijus> in old parrot, Cxt is an extra implicitly-passed param to each sub

[14:32] <autrijus> in new parrot, Cxt is deduced from the signature of the return continuation.

[14:32] <autrijus> the new parrot had not yet come to pass, though

[14:32] <autrijus> but there is a lot in favour of unifying Params and Cxt into the same struct

[14:32] <nothingmuch> autrijus: darcs pull harrorth

[14:32] <autrijus> Dan likes that, and I think lwall is happy too

[14:33] <autrijus> nothingmuch: god it

[14:33] <autrijus> s/god/got/

[14:34] <nothingmuch> autrijus: under mis is a new distribution like thing

[14:34] <nothingmuch> if you feel like playing with Forth, write some tests ;-)

[14:34] <Arathorn> morning autrijus: further to lwall's response to my post on p6l, i'm concluding that variables in the default namespace should be $*Main::foo (also can be written as $*::Main::foo and $::('*')::Main::foo - but not as $::Main::foo) - does that sound sane to you?

[14:34] <autrijus> Arathorn: yes.

[14:34] <Arathorn> woo

[14:35] <autrijus> but I agree with lwall that this is very hard to explain ;)

[14:35] <autrijus> I'd rather we had used three different symbols :)

[14:35] * Arathorn nods.

[14:36] <Arathorn> especially the assymetry of $::('*::Main')::foo being valid, but $::*::Main::foo being invalid

[14:36] <Arathorn> and the latter not actually having any welldefined meaning currently

[14:36] <autrijus> yeah. I think if you can think of a saner treatment, there's a good chance that it will be adopted

[14:36] <autrijus> the current situation is messy.

[14:36] * Arathorn hopes that lwall will decree that $::foo is dead, or actually a way of deferencing a type-space object, or just equivalent to $::('foo')

[14:37] <nothingmuch> do anonymous classes have a sigil?

[14:37] <Arathorn> having $::foo as an alias for $main::foo as in p5 would be utterly horrible.

[14:38] <autrijus> nothingmuch: do anonymous closures have a sigil?

[14:38] <nothingmuch> i don't know

[14:38] <autrijus> Arathorn: actually I wouldn't mind it meaning $*Main::foo...

[14:38] <nothingmuch> they can either fit in a scalar ($foo) or a function name (my &moose = sub  { }), right?

[14:38] <autrijus> right.

[14:39] <nothingmuch> and in $foo they are a code ref

[14:39] <autrijus> so you can have

[14:39] <autrijus> my $bar = class {}

[14:39] <autrijus> or

[14:39] <autrijus> my ::bar = class {}

[14:39] <nothingmuch> and ::bar is a relative namespace, that exists (or rather, is findable) just for the duration of the current scope, right?

[14:39] <autrijus> yes.

[14:39] <Arathorn> autrijus: but wouldn't $::('foo') being so different to $::foo be *really* counterintuitive?

[14:39] <nothingmuch> hmm

[14:40] <autrijus> Arathorn: I think $::() is the horrible party.

[14:40] <nothingmuch> what's the clash between :: as a sigil and :: as a namespace separator?

[14:40] <nothingmuch> ::::somepackage::class?

[14:40] <autrijus> nothingmuch: no clash just messy

[14:40] <Arathorn> well, the 'correct' way to do it would be to then have :: as a trailing sigil after the interpolation construct, no?

[14:40] <autrijus> trailing sigil?

[14:41] <Arathorn> i.e. $($foo)::bar (rather than $::($foo)::bar

[14:41] * nothingmuch ponders a horrible change: the # sigil

[14:41] <Arathorn> if that wasn't then completely ambiguous

[14:41] <nothingmuch> #class = ...

[14:41] <nothingmuch> # class = ...  (this is a comment)

[14:41] <nothingmuch> doe

[14:41] <nothingmuch> s the opaque type have a sigil?

[14:42] <autrijus> opaque type?

[14:42] <nothingmuch> yep, an object

[14:42] <nothingmuch> you can have a blessed hash ref in an object.

[14:42] <nothingmuch> or an opaque

[14:42] <nothingmuch> or ...

[14:42] <nothingmuch> i assume that $?SELF contains a reference

[14:42] <nothingmuch> what is opaque's sigil?

[14:42] <nothingmuch> or is it by design unsigillable?

[14:43] <Arathorn> ?eval $foo="foo"; $($foo);

[14:43] <evalbot6> Error:  unexpected "(" expecting "::" 

[14:43] <autrijus> I think it is unsigilable.

[14:44] <autrijus> ?eval $foo="foo"; $::($foo);

[14:44] <evalbot6> Error: Undeclared variable: "$foo" 

[14:44] <autrijus> ?eval my $foo="foo"; $::($foo);

[14:44] <evalbot6> \'foo' 

[14:44] <autrijus> there you go

[14:44] * Arathorn nods

[14:44] <autrijus> ?eval my $foo="foo"; say $::($foo);

[14:44] <evalbot6> foo bool::true 

[14:44] <nothingmuch> what about a unicode sigil?

[14:44] <Arathorn> but, what ambiguities would be introduced by using $($foo):: instead?

[14:44] <autrijus> nothingmuch: you need an ascii version for it anyway.

[14:44] * nothingmuch goes to look at his pallette

[14:44] <nothingmuch> autrijus: $@!^ or something like that ;-)

[14:45] <Arathorn> i.e. is $($something) a valid alternative syntax for $$something ?

[14:45] <autrijus> I don't think $@!^ would work.

[14:45] <nothingmuch> autrijus: i was just bashing my keyboard, please don't try to parse it =)

[14:46] <autrijus> nothingmuch: ah. please keep bad ideas like that to yourself :)

[14:46] <nothingmuch> hehe

[14:46] <autrijus> Arathorn: I suspect it can work. at least that's one :: less

[14:47] <nothingmuch> we have some unused parenthesis

[14:47] <Arathorn> thing is, that :: is still a prefix for disambiguating PackageNames, right?

[14:47] <nothingmuch> ⎩

[14:47] <Arathorn> turning $::($foo) into $($foo):: and ::PackageName into PackageName:: just so that $::foo is free to be $*Main::foo again seems rather wrong :/

[14:47] <nothingmuch> ‰ ‱  =)

[14:47] <nothingmuch> those two look sigilized

[14:48] <autrijus> Arathorn: the thing is that &Foo and ::Foo can both be referred to as Foo

[14:48] <Arathorn> sure

[14:48] <autrijus> Arathorn: and as such each need one sigil

[14:48] <autrijus> also I think the proposal is to turn $::($foo) into $($foo)

[14:48] <autrijus> ::PackageName would still exist as ::PackageName

[14:49] <Arathorn> okay - but then you get the contradiction that ::PackageName is a disambiguated package name - but $::PackageName is actually $*Main::PackageName

[14:49] <Arathorn> which is counterintuitive too.

[14:49] <autrijus> yes. now if we adopt the ^ sigil for packages

[14:49] <autrijus> ^PackageName would mean the package

[14:49] <autrijus> and there is much less ambiguities

[14:49] <Arathorn> and :: would only ever be a trailing separator/prefix for typespace

[14:49] <Arathorn> s/prefix/suffix/

[14:49] <Arathorn> (gah)

[14:50] <autrijus> ^Foo::Bar  then is the Bar type in the Foo namespace

[14:50] <Arathorn> $client on phone - brb

[14:50] <autrijus> I don't know, but this might be sane

[14:50] <autrijus> however it clashes with $^x ;)

[14:51] * autrijus stops speculating about mere sytnax

[14:55] * Arathorn fumes at $client

[14:56] <Arathorn> i really like ^ (or something), fwiw

[14:56] <Arathorn> $Foo="Foo"; ^($Foo)::Bar then makes a whole lot more sense

[14:56] <Arathorn> as does $($Foo)::Bar

[14:57] <Arathorn> and $::foo is free to be $*Main::foo (or perhaps $OUR::foo?) again

[14:57] <chip> anybody around who's familiar with the parameter unpacking rules?

[14:58] * Arathorn will try suggesting an alternative typespace sigil than :: to lwall if his p6l response gets dewarnocked

[14:58] <chip> e.g.  sub quicksort ( [ $pivot, *@data ], ?$reverse, ?$inplace ) {...}

[14:59] <nothingmuch> what is ... defined as?

[14:59] <nothingmuch> sub &nofix:<...> { die "yada yada" }; # ?

[15:00] <nothingmuch> hola chip... how's paypal coming along?

[15:00] * Arathorn has no clue about parameter unpacking, sorry :/

[15:00] <nothingmuch> chip: slightly

[15:00] <chip> nothingmuch: Something else to draw donations is pending.  I'll give a hint: It's the most powerful force in the universe

[15:00] <autrijus> nothingmuch: no, "fail" not "die"

[15:01] <nothingmuch> are you going to nuke all your cash to create fusion-dough ?

[15:01] <nothingmuch> autrijus: err, yep... but what about nofix: ?

[15:01] <chip> nothingmuch: Is the full parameter semantic available inside the unpacking?   sub foo ( [ $a, ?$b, +$c, *%x, *@y ], $foo )

[15:01] <autrijus> nothingmuch: it is just a nullary prefix, silly.

[15:01] <nothingmuch> autrijus: so how do i write that? sub nullarry:<...> ?

[15:01] <autrijus> no

[15:01] <nothingmuch> chip: i would think that no

[15:01] <autrijus> sub term:<...> {}

[15:01] <autrijus> see A12

[15:01] <nothingmuch> oh

[15:01] <chip> nothingmuch: which is NOT to say I don't need the paypal contributions, by the way!

[15:01] <nothingmuch> perhaps optionality

[15:02] <nothingmuch> but not namedness

[15:02] <chip> nothingmuch: "Help Save The World" by spreading the word

[15:02] <nothingmuch> brb, i need to save someone

[15:02] <chip> nothingmuch: S6 only shows optionality, so I guess you're right

[15:02] <autrijus> chip: unpacking hash gives positional bindings.

[15:02] <autrijus> err

[15:02] <chip> autrijus: hello!

[15:02] <autrijus> chip: unpacking an array gives positional bindings.

[15:03] <autrijus> unpacking a hash gives named bindings.

[15:03] <autrijus> I don't think you can have both

[15:03] <autrijus> chip: hey :)

[15:03] <chip> autrijus: are the array and hash bindings required to work left-to-right in the overall function signature?

[15:03] <chip> autrijus: is this legal:   sub foo ( [ $x ], ?$y = $x )

[15:03] <autrijus> I think it is.

[15:04] <autrijus> although if you have powerful arguments for disabling it

[15:04] <autrijus> then I think lwall will consider that :)

[15:04] <chip> well, it's just that name binding is looking less and less like something I want to address.  That's just putting a cap on it.

[15:05] <chip> i.e. get_params will probably never be aware of the lexical pad

[15:05] <autrijus> sure. we can deal.

[15:05] <autrijus> iblech has perl 6 named bindings implemented in JavaScript of all things. ;)

[15:05] <chip> autrijus: JS is the flavor of the month, isn't it?  *sigh*

[15:06] <autrijus> chip: until ctx5 is back to business, I'm afraid nothing much we can do on PIR targetting :)

[15:06] <Arathorn> it's actually kind of cool, though, as complementary to parrot stuff

[15:06] <autrijus> "back to business" as in "usurps as the new trunk"

[15:06] <chip> Does P6 (or Pugs) have any need to specify the specific PMC to be used for *@a or *%b?

[15:06] <chip> autrijus: I see.  Well, I'll be reviewing the differences soon then.

[15:06] <autrijus> chip: hm? the user can request a PMC.

[15:07] <autrijus> sub foo (FooBarArray *@a) {...}

[15:07] <Arathorn> (unless you're planning to persuade macromedia to embed parrot in Flash Player rather than ECMAScript, or persuade M$ to replace JavaScript in IE with it...)

[15:07] <chip> sub foo (MyArrayType *@a) ... ?

[15:07] <autrijus> I suspect so

[15:07] <autrijus> I'm fine if you'd like to disallow that too

[15:07] <autrijus> I don't think it will be used often.

[15:08] <chip> It's OK with me if the :slurpy PMC has to be pre-created, but leo's gonna have to change something

[15:08] <chip> he likes to have the get_params be the very first opcode in the sub.  Oops.

[15:08] <autrijus> I'm fine with the PMC being dynamically created too.

[15:14] <Khisanth> hmm p6 no longer has glob() ... I guess that does get rid of one problem

[15:17] <Arathorn> autrijus: were you surprised by lwall saying that $OUR::foo is the right way to do package MyPackage; $MyPackage::foo="foo"; say $OUR::foo # if you don't happen to know what namespace scope you're currently in

[15:18] <Arathorn> despite $foo not having been declared as a lexically-scoped global using 'our', but a package-variable style symbol table entry?

[15:18] <autrijus> no, not at all. OUR:: is a hackathon addition.

[15:18] <autrijus> and it was designed to do that.

[15:19] <Arathorn> ah, I was wondering why it wasn't in the AES's at all

[15:19] <Arathorn> isn't it really weird to put non-lexically-scoped variables in something called OUR::, though? :/

[15:20] * Arathorn was expecting PACKAGENAME:: or ::($?PACKAGENAME)::

[15:20] <autrijus> sure you can also do that.

[15:20] <Arathorn> right

[15:23] * Arathorn has a cassandraesque vision of legions of future newbies all doing perl6 -e '{ $*Main::foo = "foo"; } say $OUR::foo' and getting suitably confused about OUR:: including non-lexicals, but 'our' defining lexicals only

[15:23] <osfameron> me has a cassandraesque ision of doing the same thing himself

[15:24] * autrijus purrs.

[15:25] * osfameron strokes autrijus's ears

[15:25] <Arathorn> . o O ( is that a catbert purr, or a right-now-it's-easier-to-be-feline purr? )

[15:25] * autrijus meows happily

[15:26] <autrijus> Arathorn: anyway, our's scope is lexical but the thing it points to is packagewide

[15:26] <autrijus> whilst my's scope is lexical but the thing it points to is lexical

[15:26] <Arathorn> okay, i do understand it correctly then

[15:27] * Arathorn will plaintively try asking that OUR:: gets called PACKAGENAME:: or something if it's going to contain packagewide variables rather than just lexical globals

[15:27] <Arathorn> in a preemptive strike against the strife of newbies & not-so-newbies to come.

[15:28] <chip> wtf is "*Main::" ?

[15:28] <autrijus> chip: it is the new name of main::

[15:28] <autrijus> I have no idea why larry changed main to Main.

[15:28] <autrijus> the * indicates toplevelness, that's fine

[15:29] <chip> * is toplevel _and_ global?

[15:29] <autrijus> the two are the same thing.

[15:29] <Arathorn> *Main is a specialcase shorthard for *::Main

[15:29] <chip> autrijus: / is Unix fs toplevel, but / isn't implicitly in everyone's $PATH

[15:29] <Arathorn> if that makes it any clearer

[15:29] <chip> toplevel isn't automatically global

[15:30] <autrijus> chip: right. to clarify: in perl6 "/" is always the end of your $PATH.

[15:30] <autrijus> better?

[15:30] <chip> clear but disturbing.  Grr.

[15:30] <Arathorn> which allows most builtins to live in /, presumably

[15:30] <autrijus> yes.

[15:30] <autrijus> which is I presume the idea.

[15:31] <autrijus> chip: in p5 it's called CORE if I'm not mistaken

[15:31] <autrijus> which is sort of like /bin/

[15:32] <chip> autrijus: for hysterical raisins, all of CORE::, CORE::GLOBAL::, and UNIVERSAL:: have aspects of *

[15:32] <autrijus> yes.

[15:32] <Arathorn> i guess that's why it's been normalised, then..

[15:32] <autrijus> I'm aware of the hysterical raisins... that's why we are raised as hystericals...

[15:32] <chip> "Why Be Normal"

[15:32] <autrijus> "A B Normal"

[15:33] <chip> SQL bumper sticker: "Why Be Normalized?"

[15:33] * Arathorn is a bit askeered of people going and using $Main::foo, and then getting royally shot in the foot if they happen to be enclosed in another namespace scope called Main

[15:34] <chip> Arathorn: well, anybody who creates a namespace C<My::Own::Main> is just asking for trouble anyway.

[15:34] <Arathorn> true.

[15:35] <Arathorn> peeps will prolly all go and use $Main::foo and forget about it, then - and it does make sense to ucfirst main, to fit in with all the other ucfirst typespace names

[15:39] * Arathorn is perfectly normal... orthogonal, in fact :/

[15:39] * Arathorn sighs and returns to actionscript-infused $work :|

[15:40] <integral> hmm, why Main and not MAIN?

[15:41] <autrijus> because p6 refuses to use ALLCAPS...

[15:41] <Arathorn> are there any uc'd typespace identifiers in p6?

[15:41] <autrijus> not afaics

[15:41] <integral> autrijus: except for MY, CALLER, OUR, etc I thought?

[15:41] <Arathorn> Capitalised Nouns look more teutonic and reliable, whereas SHOUTING looks like COBOL..

[15:41] <Arathorn> oh, true.

[15:42] <Arathorn> (but they're really-really-special-cases, whereas Main is just another normal package scope?)

[15:42] <autrijus> integral: those are pseudopackages

[15:43] <autrijus> you can't enter them

[15:43] <autrijus> package MY; # boom

[15:43] <integral> ah

[15:43] <autrijus> package Main; # just fine

[15:43] <integral> so it's not just a tied package? :-P

[15:46] <autrijus> mmm tied package ;)

[15:48] <pasteling> "putter" at 66.30.119.55 pasted "[PATCH] parrot: creates t/p6rules/rx_grammar.t" (76 lines, 3.4K) at http://sial.org/pbot/11880

[15:49] <autrijus> putter: ?

[15:49] <putter> Hi all.  Could someone with parrot commit bits add http://sial.org/pbot/11880  ?  Thanks.  All PGE's tests are passing... can't have that...

[15:50] <putter> rx_grammar.t is a failing (as in segfault) test.

[15:50] <putter> It's an incomplete grammar for p6 regexps.  Once it runs, PGE will give us a regexp parse tree in the form of a Match tree.

[15:51] <putter> Which can then be used to generate... whatever.

[15:52] <putter> Sound plausible?

[15:54] <autrijus> yes. are you on irc.perl.org #parrot?

[15:54] <autrijus> if not, try bringing it there to chip+leo and ask for a commit bit

[15:54] <autrijus> :)

[15:54] <autrijus> (chip is here in #perl6; leo isn't)

[15:54] <putter> Not at the moment.  Tried there last night, but (almost) noone around, and nothing seems to have happened.

[15:55] <autrijus> oh. it's at this moment a very happening place :)

[15:55] * putter desperately trying to avoid having a parrot commit bit again.  silly, I know.

[15:56] <putter> ok, will try there now.  tnx.

[15:57] <autrijus> np :)

[16:12] <Limbic_Region> http://moon.google.com/ # maximum magnification for a chuckle

[16:16] <putter> putter maligned PGE.  fixed grammar works!  :)  backporting to rules...

[16:21] <autrijus> nice!

[16:45] <stevan> hola autrijus 

[16:46] <stevan> question on the metamodel bootstrapping when you have a sec

[16:47] * putter spoke too soon... (wasn't entering grammar at root)  looks like there is still a pge issue...

[16:47] <stevan> hey putter :)

[16:48] <autrijus> sure... I'm chipping with chip in #parrot about the insanity of by-value Pair binding

[16:48] <autrijus> you know, the one that makes    for %h.pairs -> $_ { ... } broken

[16:48] <stevan> fun

[16:49] <autrijus> (my proposal on p6l (subj: Strange interaction between pairs and named binding) is that untyped Block params should be Any not Item)

[16:49] <autrijus> supports welcome 

[16:51] <stevan> with Any it allows for Pair right? 

[16:51] <stevan> in that case

[16:52] <stevan> so, I was trying to represent ::Method and ::Attribute objects in the metamodel

[16:52] <autrijus> yes.

[16:52] <autrijus> ok

[16:53] <stevan> but this of course presents a metacircularity issue

[16:53] <autrijus> right

[16:53] <stevan> but I am thinking maybe that doesnt make sense, maybe those should be pseudo-primatives anyway

[16:54] <autrijus> I think the question boils down to how much datatypes you want out of your host

[16:54] <autrijus> s/much/many/

[16:54] <autrijus> and what their (static, never extended) methods are

[16:55] <stevan> ok

[16:55] <stevan> because I have boiled Perl6::Object down to meta(), can(), isa() and AUTOLOAD

[16:55] <stevan> meta to return the meta object

[16:55] <stevan> can just dispatches to AUTOLOAD

[16:55] <stevan> and so does isa

[16:56] <autrijus> right.

[16:56] <stevan> and AUTOLOAD just catches method invocation

[16:56] <autrijus> you need host to provide function calls with invocant

[16:56] <autrijus> for ::Method

[16:56] <autrijus> yup

[16:57] <stevan> ok, well I think I will hold off on any more bootstrapping until I read more of book

[16:59] <autrijus> cool. nice to see you have timeslices for your work -- i.e. reading the book :)

[16:59] <stevan> yes, but $work is getting a little CPU starved ;)

[17:09] <iblech> Hm... Test::is's signature is: (Str $got, Str $expected, Str +$desc, +$todo, +$depends)

[17:09] <iblech> But, according to S06, args which have a "+" in front of them (i.e. $desc) may *only* be passed by name

[17:09] <autrijus> aye.

[17:10] <autrijus> so drop the +

[17:10] <autrijus> :)

[17:10] <iblech> :) PIL2JS found a bug :)

[17:10] <autrijus> good :)

[17:12] <stevan> what is the current layout for sub types? Sub is Code is Block?

[17:13] <iblech> Both Block and Sub are Code, I think

[17:13] <iblech> But Sub is not a Block

[17:13] <stevan> ok

[17:13] <stevan> so Code is an executable chuck of expressions and statements

[17:14] <stevan> and sub is a named version of that

[17:14] <stevan> and Block is unnamed

[17:14] <stevan> does that sound right?

[17:14] <autrijus> no.

[17:14] <iblech> No, subs can be unnamed to (sub ($foo) {...})

[17:14] <stevan> ah yes

[17:14] <autrijus> you can't return from a Block.

[17:14] <autrijus> that's the primary difference :)

[17:14] * stevan slaps forhead

[17:14] <autrijus> everything else is secondary.

[17:14] <stevan> ok

[17:14] <iblech> Well you can't, but you'll return from the surrounding Sub, right?

[17:14] <autrijus> yup.

[17:15] <autrijus> and the main program thing is Code

[17:15] <autrijus> but not Block nor Sub

[17:15] <autrijus> so you can't write

[17:15] <autrijus> pugs -e '&?BLOCK(...)'

[17:16] <stevan> now what about parameters, does Sub has-a Parameters?

[17:16] <autrijus> no, Code has-a Params

[17:17] <autrijus> actually I think it's called Signature

[17:17] <stevan> ah yes, parameterized blocks

[17:17] <stevan> ok

[17:17] <autrijus> even bare can be parameterised.

[17:17] <autrijus> $_ and $^x

[17:18] <stevan> so the Signature is comprised of Params, Returns

[17:18] <stevan> anything else?

[17:19] <autrijus> actually I'll say that

[17:19] <autrijus> Code has-a two slots

[17:19] <autrijus> both of Signature type

[17:19] <autrijus> one is the Signature it accepts, $.params

[17:19] <autrijus> one is the Signature it returns, $.returns

[17:20] <autrijus> but if you unify them into a single Singature type I'm fine with that too.

[17:20] <autrijus> if so, then

[17:21] <autrijus> class Signature { has ($.params, $.returns) is Array of Param;}

[17:21] <autrijus> they are isomorphic so both is fine

[17:22] <stevan> ok

[17:22] <stevan> I am going to rough this stuff out

[17:22] <autrijus> woot

[17:22] <stevan> nothingmuch: and I might work on MMD this weekend

[17:22] <stevan> I am a virtual participant in the Tel-Aviv Hackathon :)

[17:23] <stevan> all this MMD arguing and nobodys got any code to show

[17:23] <wolverian> you _can_ return from a Block, it's just not called returning, right?

[17:23] <stevan> I figure a prototype is in order

[17:23] <autrijus> wolverian: right it's called leaving.

[17:23] <iblech> wolverian: Yes. &leave returns from the innermost block

[17:24] <wolverian> yay, for once I remembered something right :)

[17:24] <wolverian> oh, I might have tuits today to code URI more 

[17:24] <putter> hey stevan :)

[17:25] <stevan> ok, I am going to take my metamodel break from $work now thanks autrijus, iblech :)

[17:25] <stevan> hey putter 

[17:26] <autrijus> :)

[17:28] <iblech> What should happen if I return() inside a try block? -- sub foo { try { return }; say "still there" }; foo() -- Should "still there" be printed or not?

[17:28] <autrijus> nope, a return is a return.

[17:28] <wolverian> no, that's a bare block.

[17:29] <lightstep> some languages model returns as exceptions

[17:29] <iblech> Ok. Pugs has that wrong then

[17:29] <iblech> lightstep: For example PIL2JS :)

[17:29] <wolverian> is try { } a statement?

[17:29] <autrijus> and PIL2PIR :)

[17:30] <autrijus> no, try is ordinary sub

[17:30] <wolverian> oh. hm. why? since we have the neat do syntax now :)

[17:30] <autrijus> because eval{} was expr.

[17:30] <svnbot6> r5717, iblech++ | * Test: Changed various +$foos in sub signatures to ?$foos. Tests now have an

[17:30] <svnbot6> r5717, iblech++ |   actual chance of passing.

[17:30] <svnbot6> r5717, iblech++ | * PIL2JS: Beginning of context handling:

[17:30] <svnbot6> r5717, iblech++ |   * All subs take a PIL2JS.Context object as first parameter.

[17:30] <svnbot6> r5717, iblech++ |   * When calling native functions, the context object obviously has to be

[17:30] <svnbot6> r5717, iblech++ |   * excluded.

[17:30] <svnbot6> r5717, iblech++ | * PIL2JS: Better error messages (thanks to new variable $CUR_SUBNAME),

[17:30] <svnbot6> r5717, iblech++ |   beginning of callchain support.

[17:31] <autrijus> iblech: the thing is try{} should catch error exception not control exceptions

[17:31] <autrijus> but pugs's try{} currently catches both.

[17:31] <wolverian> autrijus, and I always hated it for being an expr. :) am I really the only one?

[17:31] <iblech> autrijus: Right.

[17:31] <rindolf> Hi all!

[17:31] <autrijus> greetings rindolf.

[17:31] <PerlJam> hello rindolf 

[17:31] <rindolf> autrijus: hi

[17:31] <autrijus> wolverian: I don't hate it

[17:31] <rindolf> perlbot: hi

[17:31] <perlbot> hi rindolf

[17:31] <rindolf> nothingmuch: here?

[17:31] <rindolf> PerlJam: hi. 

[17:32] <wolverian> autrijus, it just feels inconsistent, both in perl5 and 6.

[17:32] <wolverian> I know you're not who I should be complaining to :)

[17:32] * autrijus nods and points to the implementation monkey hat

[17:33] <wolverian> has this been specced and put in stone yet?

[17:33] <autrijus> yes and yes :)

[17:33] * putter tries to picture the implementation monkey hat...

[17:33] <autrijus> but stones have half life of 7 days on p6l.

[17:34] <Khisanth> putter: it's very ugly :)

[17:34] <putter> :)

[17:34] <wolverian> autrijus, was it on p6l? I just want to read the thread :)

[17:34] <autrijus> wolverian: no, i mean in syn

[17:34] <wolverian> ah. thanks. reading now.

[17:34] <autrijus> not sure about p6l.

[17:40] * autrijus posts a strange patch on p6c ;)

[17:41] <PerlJam> indeed.

[17:41] <autrijus> it is, however, I think neccessary.

[17:41] <PerlJam> don't want to answer that question?

[17:41] <PerlJam> or denying that it's frequently asked?

[17:41] <autrijus> I don't think it's answerable by me

[17:42] <autrijus> if @Larry has an updated answer, that's cool

[17:42] <wolverian> hmm. I decided it's probably not an issue, since all blocks can have CATCH, and it's just consistent with do { }

[17:42] <autrijus> but the current answer is bad :)

[17:42] <PerlJam> Well, what was there was a pretty good guess (maybe).  But someone should post the real answer.

[17:42] <autrijus> as in, actively bad.

[17:42] <autrijus> huh, Q3 2005 release a good guess, based on the incoherent 2004 synopses?

[17:42] <autrijus> that's probably not a good guess :)

[17:43] <autrijus> it might be, not anymore.

[17:43] <PerlJam> autrijus: sure it was. p6 devel has come a long way making the Q3 2005 seem even more likely

[17:43] <PerlJam> (the key word is "seem" ;-)

[17:44] <autrijus> Q3 2005 is in 2 months away :)

[17:44] <autrijus> and pugs was never based on the 2004 synopses :)

[17:44] <PerlJam> Look mister miracle worker, don't tell me you don't believe in miracles  ;)

[17:44] <autrijus> nah. it says the 6.0.0 production compiler

[17:45] <autrijus> which is beyond my control anyway, and I don't think pugs can make it in 2 months.

[17:45] <PerlJam> Pm has told me several times that he's still targetting a Q3 2005 release for the first alpha perl6 compiler.  (I keep telling him that he's crazy though)

[17:45] <autrijus> (neither was that the goal.)

[17:45] <autrijus> Pm's compiler can't yet parse nested expressions.

[17:45] <autrijus> so, not likely :)

[17:46] <PerlJam> Well, next time I ask him. I'll be sure to remind him of the insanity again  ;)

[17:46] <autrijus> (I'm talking about the expression parser that is yet to be finished)

[17:46] <integral> pm has a compiler?

[17:46] <PerlJam> Pm's problem is another one of those N > 1 masters again.

[17:47] <autrijus> integral: well, a plan for one, based on PGE and a shift/reduce bottom-up parser.

[17:47] <autrijus> languages/punie/ is a prototype compiler based on that approach

[17:47] <integral> ah, I thought you meant he was beyond that :-)

[17:47] <integral> oh, punie uses that stuff?  neato :-)

[17:47] <PerlJam> autrijus: he has an actual implementation that does ... stuff (I'm not sure as he hasn't shown it to me beyond the first baby steps a while ago)

[17:47] <autrijus> yeah. except the s/r parser isn't available

[17:48] <autrijus> so it can't handle 1+2+3 yet.

[17:48] <autrijus> PerlJam: right, I saw that in hackathon, but at that time it can't handle parens.

[17:48] <autrijus> so maybe 1+2+3 but not 1+(2+3).

[17:48] <PerlJam> heh

[17:48] <autrijus> in any case... to go from that to full production 6.0.0 compiler in 2 months time is. well. er. 

[17:48] <PerlJam> well, I'll continue to prod Pm and be optimistic anyway  :)

[17:49] <autrijus> :)

[17:49] <autrijus> anyway, I don't think it's fair to put the Q3 time pressure on pm.

[17:49] <PerlJam> pm built a full fledged pascal compiler with optimizations in about 4 days when he was a grad student.

[17:49] <autrijus> which is part of the reason why I submitted that patch.

[17:50] <autrijus> not using parrot tools :)

[17:50] <PerlJam> granted.

[17:50] <autrijus> and my position was always that that was the critical bottleneck.

[17:50] <PerlJam> If we could just nail down that parrot flux, we'd be good 

[17:50] <autrijus> but anyway... that's neither here or there.

[17:51] * PerlJam hatches a plan to prod chip now ;-)

[17:51] <autrijus> the thing is that promising the 2004 snapshot is actively harmful :)

[17:51] <autrijus> and Q3 2005 is equally actively harmful.

[17:51] <PerlJam> yeah, I agree with you.  I'm just being ornery

[17:51] <autrijus> :)

[17:52] <lightstep> why not always promise to deliver in the next quarter? like todo_ in pugs

[17:53] <autrijus> todo_ in pugs never carries a time promise...

[17:53] <PerlJam> lightstep: why not promise to deliver it by some future unspecified christmas?

[17:53] <autrijus> right.

[17:53] <autrijus> "Perl 6 will be announced by Christmas."

[17:53] <autrijus> "we reserve the right of deciding which Christ."

[17:54] <Arathorn> lol

[17:57] <PerlJam> I like Simon's likening the "by christmas" release to the second coming  

[17:57] <PerlJam> (though a tad depressing when you think about it)

[17:57] * autrijus suppresses an inappropriate multiorgasmic joke.

[17:58] <PerlJam> heh

[17:58] <PerlJam> so *that's* what they were talking about wrt MMD!

[17:58] <PerlJam> ;-)

[17:59] <chip> well, I *do* experience a little death whenever I read the Perl 6 documents

[18:00] * Arathorn rushes an answer to p6l about wretched namespace hierarchis and sprints to frisbee

[18:00] *** Arathorn is now known as Aragone

[18:00] * stevan suppresses equally inappropriate crucifixion jokes

[18:32] <autrijus> sigh, need to wake up early for $work tomorrow too

[18:33] * autrijus skips journal for tonight and sleeps

[18:33] * autrijus waves &

[18:33] <putter> &

[18:38] <mj41> Synopsis 2 :  for *$handle :prompt('$ ') { say $_ + 1 } .. is it correct?   or  =$handle ?

[18:49] <putter> ?

[18:50] <stevan> putter, iblech: care to take a look at my first draft of Code/Sub objects?

[18:52] <putter> sure...

[18:52] <svnbot6> r5718, Stevan++ | Perl6::MetaModel - first rough cut at Sub/Code/Block, Signature objects

[18:53] <stevan> perl5/Perl6-MetaModel/t/80_Code.t

[18:53] * putter keeps forgetting how breathtakingly _large_ the regexp language has become...

[19:05] <putter> stevan: it looks vaguely plausible to me.  I'm sure others could give better feedback - I haven't looked closely at p6 call semantics (except to worridly note that it seems to be one corner where p6 is not following the policy "be powerful enough to subsume everything anyone else is doing").

[19:06] <putter> progress!

[19:07] <stevan> putter: ok

[19:07] <stevan> it does not need to be the "true" version, but just enough to prototype some MMD stuff

[19:07] <putter> k

[19:08] <stevan> so vaguely plausible is good :)

[19:08] <putter> :)

[19:09] <putter> it will be sooooo nice to have objects.

[19:12] <putter> mmm, mmd prototype... stevan++

[19:17] <iblech> stevan: re. Looks sane :) Questions:

[19:18] <iblech> In the introduction, you speak of $.params and $.returns, but in the actual code there's only one signature

[19:19] <iblech> And you'll need an own &return later (i.e. not Perl 5's one), right?

[19:21] <iblech> And BTW, the code is very readable :)

[19:24] <stevan> iblech: $.returns is :todo :)

[19:24] <stevan> not entirely sure how to procede with that

[19:25] <stevan> my thought is to capture the return value, check it's container_type against wantarray maybe

[19:26] <stevan> iblech: yes, I think in some ways I need to own return

[19:26] <stevan> but I am blurring over those details for now ;)

[19:28] <kolibrie> um, should $canidate be spelled $candidate?

[19:29] <stevan> kolibrie: it is a special case of candidate :)

[19:29] <kolibrie> :)

[19:29] <kolibrie> just nit-picking, like iblech says, your code is very readable

[19:30] <stevan> thanks 

[19:30] <stevan> yeah, my spelling is pretty bad, I blame it on Phonics :)

[19:31] <stevan> is http://svn.openfoundry.org/pugs/src/Pugs/Types/Code.hs relevant?

[19:31] <stevan> or is something else used?

[19:49] *** shantanoo is now known as dhoomketu

[19:52] <cventers_> ?eval class bob { };

[19:52] <evalbot6> undef 

[19:52] <cventers_> odd

[19:53] <cventers_> pugs> class bob { };

[19:53] <cventers_> 'Perl6 User\'s Golfing System, version 6.2.8, July 13, 2005 (r5718)'

[20:00] *** dhoomketu is now known as shantanoo

[20:06] <svnbot6> r5719, putter++ | Another cm of progress on the Perl6::Rx grammar.  Quite a way to go.  Failing PGE test submitted to parrot.

[20:08] <putter> &

[20:29] * Aankhen`` goes to sleep.

[20:29] <Aankhen``> G'night.

[20:29] <svnbot6> r5720, Stevan++ | Perl6::Sub - more tests and refactoring

[20:29] <chip> Anybody know if the AES docs are state of the art on colons and MMD?

[20:32] <geoffb> chip, I don't know, but I find it highly unlikely they are, since there have been discussions here over the past days about both,

[20:32] <geoffb> and I gather that has leaked to p6l (though I don't sub to the lists yet)

[20:34] <iblech> stevan: re. Ok then :) /me looks forward of integrating Perl6-MetaModel into PIL2JS :)

[20:35] <svnbot6> r5721, iblech++ | * Usual svn properties.

[20:35] <svnbot6> r5721, iblech++ | * "sub foo { try { return }; say 42 }" should return from &foo and not print

[20:35] <svnbot6> r5721, iblech++ |   42, added a test for this bug to t/builtins/control_flow/try.t (FWIW, PIL2JS

[20:35] <svnbot6> r5721, iblech++ |   behaves correctly :)).

[20:35] <svnbot6> r5721, iblech++ | * Pugs.Compile -- Emit &prefix:<*> for Syn "*" so I can implement *(...) in PIL2JS.

[20:35] <svnbot6> r5721, iblech++ | * PIL2JS: Fixed &die (but it's actually a bug in Pugs' Parser, will write a

[20:36] <svnbot6> r5721, iblech++ |   test tomorrow).

[20:36] <svnbot6> r5721, iblech++ | * PIL2JS: New builtins: &Code::arity, &Array::push, &Array::shift, &try,

[20:36] <svnbot6> r5721, iblech++ |   &statement_control:<for> (works with n-ary subs)

[20:36] <svnbot6> r5721, iblech++ | * Updated PIL2JS/README and added PIL2JS to pugs::hack.

[20:36] <iblech> Night all :)

[23:02] *** frodo72 is now known as poletti

