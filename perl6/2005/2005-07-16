[00:41] <stevan> osfameron: ask $Larry # delegation :)

[00:42] <Khisanth> not @Larry?

[00:42] <Khisanth> probably should be %Larry :)

[00:49] <stevan> Khisanth: %Larry<lwall> :)

[00:50] <nothingmuch> package Stevan { @larry handles <AUTOMETHO> }

[00:51] <cm> what does that do?

[00:55] <Khisanth> 9 character limit?

[00:56] <cm> 8 and the dot :D

[00:57] <nothingmuch> oopsm sorry

[00:57] <nothingmuch> errm, handles is delegation

[00:58] <cm> all functions in Stevan are delegated to larry?

[00:58] <nothingmuch> it should have been 'has @larry handles <AUTOMETHOD> }{

[00:58] <nothingmuch> where the method AUTOMETHOD is defined as 'method AUTOMETHOD { @larry>>.AUTOMETHOD(*@_) } sort of

[00:58] <nothingmuch> except that it's magical

[00:59] <cm> magick.

[00:59] <stevan> dont ask me, I dont know :)(

[01:00] <stevan> and I am lazy, so I am a bad delegator

[01:00] <cm> that makes you a good one, actually ;)

[01:00] <stevan> no lazy in the wrong way :)

[01:01] <Khisanth> you don't delegate until uneccessary? :)

[01:01] <cm> :)

[01:02] <stevan> nah, I ignore it and let someone else ask

[01:02] <stevan> or I confuse the person until they just go to p6l themselves :)

[01:03] <nothingmuch> cm: AUTOMETHOD is like AUTOLOAD

[01:03] <nothingmuch> ons that aren't defined (that stevan doesn't know), are delegated

[01:03] <nothingmuch> brian_d_foy is annoying

[01:04] <nothingmuch> he always disagrees with me on stupid issues

[01:04] <nothingmuch> and he's never nice

[01:04] <cm> i could use AUTOCHARGE which catapults my laptop's battery power back to 100% right now..

[01:18] * kolibrie grabs svk for home

[02:39] <svnbot6> r5629, Stevan++ | Per6::MetaModel - 

[02:39] <svnbot6> r5629, Stevan++ | * much work on Dispatcher

[02:39] <svnbot6> r5629, Stevan++ |     - added tests for it

[02:39] <svnbot6> r5629, Stevan++ |     - moved Dispatcher to seperate file

[02:39] <svnbot6> r5629, Stevan++ | * stub test for attribute handles

[02:39] <svnbot6> r5629, Stevan++ | * 'next METHOD' implemented as next_METHOD()

[02:39] <svnbot6> r5629, Stevan++ |     - tests for this

[02:39] <svnbot6> r5629, Stevan++ | * WALKMETH and WALKCLASS iterators implemented

[02:39] <svnbot6> r5629, Stevan++ |     - not formally tested, but Object and next_METHOD() use it

[03:24] *** brentdax_ is now known as brentdax

[04:32] <putter> autrijus: what is the difference between blib6/lib and blib/lib? If it's p6 vs p5, then I note that yesterday someone on #perl6 was having trouble with ./pugs -Iblib6/lib t/mumble, but succeeded with -Iblib/lib.  Which might mean that if they did  make install ... So perhaps we still have a problem.

[04:33] <stevan> howdy putter 

[04:33] <stevan> p5ugs looks pretty cool

[04:34] <autrijus> putter: oh? I don't remember seeing that. the p6/p5 distinction is iirc only broken during that single night

[04:47] <stevan> autrijus: if you find yourself with some free time, I could use a sanity check on design of the MetaClass::Dispatcher work

[04:47] <svnbot6> r5630, putter++ | Moved PIL-Run/lib/PIL/Run/Root/P5Runtime to PIL-Run/lib6/P5Runtime.  Expanation to follow.

[04:48] <autrijus> stevan: ok, will do!

[04:48] <stevan> muchas gracias 

[04:48] <autrijus> np :) I'm still in reading-a-lot-of-papers-before-writing-PIL-evaluator mode

[04:49] <stevan> Perl6::Object is in desperate need of a refactor too, I will get to that this weekend

[04:49] <autrijus> but I expect this phase to end in a couple days at most. then I'll be back to hack mode for linking PIL and object space together

[04:49] <autrijus> cool!

[04:49] <stevan> that VB guys paper was pretty good 

[04:49] <autrijus> yeah, isn't it.

[04:49] <stevan> It made me go back and pick up my ML book again

[04:50] * autrijus notes the most fun of pugs development is the constant cycle of 1)learn amazing new stuff and 2)make it happen

[04:50] <stevan> agreed :)

[04:58] <putter> howdy stevan

[04:58] <stevan> heya putter :)

[04:58] <stevan> finally,.. real Submethods :)

[04:59] <putter> :)

[04:59] <stevan> I only had to implement a dispatcher, WALKMETH and next METHOD to get them 

[05:00] <putter> sigh, looks like my last svn mv director to anotherdirectory confused svn.  Even a clean checkout wont let me create a new perl5/PIL-Run/lib/PIL/Run/Root/README.  Gives me a

[05:00] <putter> svn: '.../pugs/lib/PIL/Run' is not a working copy

[05:01] <putter> so progress, _and_ progress! ;)

[05:01] <stevan> :)

[05:01] <stevan> thats the great thing about VCS

[05:01] <stevan> cd ../; rm -rf pugs; svn co http://svn.openfoundry.org/pugs

[05:02] <putter> did.  didn't help. :(

[05:05] <putter> note the bogus path name in the error message. :(

[05:05] <svnbot6> r5631, Stevan++ | Perl6::MetaModel -

[05:05] <svnbot6> r5631, Stevan++ | * real honest to goodness submethods (as speced by $Larry)

[05:05] <svnbot6> r5631, Stevan++ |     - tests are now active again and passing

[05:05] <svnbot6> r5631, Stevan++ |     - had to do some hacks around BUILD and DESTORY which I will 

[05:05] <svnbot6> r5631, Stevan++ |       try and fix this weekend 

[05:06] <stevan> putter: removing the entire directory and doing a fresh check out still didnt work??

[05:08] <stevan> night folks :)

[05:08] <stevan> &

[05:08] <putter> correct.  suggesting the underlying vcs is borked.

[05:08] <putter> good night. &

[05:10] * autrijus mumbles something about svk iirc has this fixed

[05:14] <masak> seen nothingmuch

[05:14] <jabbot> masak: nothingmuch was seen 4 hours 10 minutes 30 seconds ago

[05:14] <svnbot6> r5632, putter++ | Trying to get svn unbroken.

[05:16] <masak> i was going to ask nothingmuch about the phrase "gay camels in denial" in one of his recent emails

[05:17] <masak> i parsed it as he must have intended, but did a double take on it afterwards

[05:18] <autrijus> hm?

[05:19] <masak> thing is, what are the camels in denial about?

[05:19] <masak> being camels, or being gay?

[05:19] <autrijus> he must have intended the latter

[05:19] <svnbot6> r5633, putter++ | Trying to get svn unbroken.

[05:19] <masak> :)

[05:20] * masak pictures a camel coming out of a closet

[05:21] <Khisanth> big closet

[05:21] <masak> or small camel

[05:25] <Darren_Duncan> that comment didn't make sense to me either

[05:25] <svnbot6> r5634, putter++ | Trying to get svn unbroken.

[05:26] <Darren_Duncan> I just updated to 5634 ... so far svn seems to work with it

[05:27] <Darren_Duncan> (my previous post was re nothingmuch' email)

[05:27] <masak> :)

[05:27] <masak> it made sense to me, it was only later that i saw the ambiguity

[05:28] <Darren_Duncan> I just don't see what gay has to do with programming

[05:28] <masak> gay can mean happy too

[05:28] <Darren_Duncan> yes

[05:28] <masak> i think that was his intended meaning

[05:28] <Darren_Duncan> in fact, thats the original meaning

[05:29] <Darren_Duncan> it's too bad the word was perverted

[05:29] <putter> Darren_Duncan: could you try editing a file, say something trivial like adding a newline, and checking it in.  I can create a README with out attributes, but not with, nor edit or add attributes to it once it exists.  All with clean checkouts inbetween. svn--

[05:29] <Darren_Duncan> no longer can someone say "let's have a gay old time"

[05:29] <masak> sure you can

[05:29] <masak> but not without risking being misunderstood

[05:29] <Darren_Duncan> that's the point

[05:29] <masak> i read nothingmuch's phrase as "joyous perl-writers who do not admit that they are now functional programmers"

[05:30] <masak> and later as "homosexual camels who refuse to admit being homosexual"

[05:32] <masak> Darren_Duncan: i wouldn't go so far as saying that the word "gay" was perverted. it was hijacked, that's all

[05:32] <svnbot6> r5635, putter++ | Trying to work around svn brokenness.

[05:32] <masak> happens a lot to positively connotated words

[05:32] <Darren_Duncan> both of those words mean 'used differently' in a broader sense

[05:33] <Darren_Duncan> putter, I just updated the ChangeLog and committed it; you should see a new section for 6.2.9 on top ... no errors seen yet

[05:34] <masak> Darren_Duncan: both of what words?

[05:34] <Darren_Duncan> both of 'perverted' and 'hijacked'

[05:34] <masak> ah

[05:35] <autrijus> lunch, bbiab

[05:35] <masak> and they both have a sort of negative ring to them

[05:35] <Darren_Duncan> putter, so that change was actually useful, but served to show that svn seems to be behaving normally

[05:35] <masak> but in different ways

[05:36] <Darren_Duncan> and of course, we all know another hijacked word ... 'hacker'

[05:36] <Darren_Duncan> much closer to home that one

[05:36] <putter> Darren_Duncan: thank you for your help.  appreciated.  turned out I was confused.

[05:36] <Darren_Duncan> care to explain ... or not?

[05:38] <masak> 'perverted' means 'immoral', 'aberrant', 'polluted' (i.e. relating to morality), whereas 'hijacked' means 'annexed', 'stolen', 'swiped' (relating to theft)

[05:38] <svnbot6> r5636, Darren_Duncan++ | testing that the server works ... added a 6.2.9 template to the ChangeLog

[05:38] <svnbot6> r5637, putter++ | Moved the p5 runtime's p6 code from lib/PIL/Run/Root to a new lib6/.  Left a README behind.  PIL::Run::Root is the _private scratch space_ for the runtime.  It's not a place to put files.  Svn is fine - putter was confused.  svn ci -m message, single quoted, had possessive quote-s.  svn error messages resulted in some odd way from rest of message body.

[05:39] <putter> coming up in commit message.  was commit message.  ci -m'...runtime's ... lib/PIL/Run/Root ...' became the svn ci error  svn: 'absolutepath.../pugs/lib/PIL/Run' is not a working copy

[05:40] <putter> strong hint from the universe that it's time to sleep.  putter thanks universe, but observes he knew that 1 hr of svn fiddling ago. :(

[05:40] <Darren_Duncan> yup

[05:40] <putter> sigh ;)

[05:41] <masak> Darren_Duncan: in other words, i wouldn't say 'gay' has been morally perverted as a word, just stolen by lobbyists to mean something different

[05:41] <Darren_Duncan> what you say is true

[05:42] <putter> putter-- putter-- putter-- putter-- # normalizing karma.

[05:42] <Darren_Duncan> and there's lucky #100

[05:43] <masak> putter: don't be so hard on yourself. putter++

[05:43] * Darren_Duncan remembers a joke about a karma and a dogma

[05:44] <Darren_Duncan> you've probably heard it already, but ask if not ... its a pun

[05:44] <putter> rapl, anyone who understands perl5 installation, see note 1hr10min ago to autrijus... "does the make install smashing user's p5 lib/ problem still exist?".

[05:44] <putter> masak: ;) tnx.

[05:44] <Darren_Duncan> smashing!

[05:45] <putter> good night all. & ;)

[05:45] <Darren_Duncan> and good night to you also

[05:45] <masak> good night

[05:45] <Darren_Duncan> and we're back to 99 bottles

[05:45] <masak> Darren_Duncan: I think I sense the punchline of the pun, but tell anyway

[05:46] <Darren_Duncan> it's the simple phrase, substitute people to flavor: your karma ran over my dogma

[05:46] <masak> ah

[05:46] * masak smiles

[05:47] <Darren_Duncan> I think its well known over here, but I don't know about other places

[05:47] <Darren_Duncan> still, puns are simply by nature, easy to invent, easy to discover or share

[05:47] <masak> the whole perl6 community is saturated with in-jokes

[05:47] <Darren_Duncan> s/simply/simple/

[05:47] <Darren_Duncan> that joke's origin has nothing to perl though, fyi

[05:47] <masak> true

[05:48] <masak> it must be older than that

[05:48] <Darren_Duncan> I'm sure it could be used though, since lots of people on forums talk about karma

[05:48] <Darren_Duncan> especially slashdot

[05:48] <masak> :)

[05:49] <Darren_Duncan> and just a few minutes ago I found the word is connected with what all that '++' I see here is about

[05:49] <masak> yes

[05:49] <Darren_Duncan> before I simply thought it was short hand for "good for you"

[05:50] <Darren_Duncan> aka "good job"

[05:50] <masak> it probably was at first

[05:50] <masak> then someone put a bot here for keeping score

[05:50] <masak> i'm surprised the system isn't misused

[05:50] <Darren_Duncan> ah bots ... can't live with them, can't live without them

[05:50] <masak> lol

[05:51] <Darren_Duncan> I'm aware of the 'eval' and the 'seen' and the commit-reporter, but that's about it

[05:51] <Darren_Duncan> there's a new one

[05:51] <masak> but think about it, it's impressive that nobody has abused the karma system to get lots of karma

[05:51] <Darren_Duncan> so how do you query the bot to see the current score?

[05:51] <masak> karma Darren_Duncan

[05:51] <jabbot> masak: Darren_Duncan has neutral karma

[05:52] <Darren_Duncan> so no numbers given then

[05:52] <masak> Darren_Duncan++ # you need karma

[05:52] <masak> karma Darren_Duncan

[05:52] <jabbot> masak: Darren_Duncan has neutral karma

[05:52] <Darren_Duncan> karma masak

[05:52] <jabbot> Darren_Duncan: masak has karma of 11

[05:52] <masak> karma autrijus

[05:52] <jabbot> masak: autrijus has karma of 574

[05:52] <masak> :)

[05:52] <masak> he must be #1 on the karma list

[05:52] <Darren_Duncan> frankly, I don't recall ever getting anything but '++', and seem to have gotten about a dozen of them

[05:52] <Darren_Duncan> nothing major but nothing zero

[05:53] <Darren_Duncan> still, I'm not worried about it ... don't bother with artificial inflation

[05:53] <masak> maybe the underscore in your name ruins the regex matching

[05:53] <Darren_Duncan> mayhaps

[05:53] <Darren_Duncan> actually, including my commits, it should be up to 30 at least

[05:54] <Darren_Duncan> lets see what putter did to himself a few mins ago ...

[05:54] <Darren_Duncan> karma putter

[05:54] <jabbot> Darren_Duncan: putter has karma of 35

[05:54] <Darren_Duncan> still positive

[05:54] <masak> don't bother with artificial inflation?

[05:54] <masak> ?eval "masak++" xx 20

[05:54] <evalbot6> ('masak++', 'masak++', 'masak++', 'masak++', 'masak++', 'masak++', 'masak++', 'masak++', 'masak++', 'masak++', 'masak++', 'masak++', 'masak++', 'masak++', 'masak++', 'masak++', 'masak++', 'masak++', 'masak++', 'masak++') 

[05:54] <masak> :P

[05:54] <masak> ?eval "masak--" xx 20

[05:54] <Darren_Duncan> karma masak

[05:54] <jabbot> Darren_Duncan: masak has karma of 11

[05:54] <evalbot6> ('masak--', 'masak--', 'masak--', 'masak--', 'masak--', 'masak--', 'masak--', 'masak--', 'masak--', 'masak--', 'masak--', 'masak--', 'masak--', 'masak--', 'masak--', 'masak--', 'masak--', 'masak--', 'masak--', 'masak--') 

[05:54] <masak> phew

[05:55] <Darren_Duncan> it didn't change from before

[05:55] <Darren_Duncan> was 11 last time

[05:55] <Darren_Duncan> so, how big a number beside xx until the evalbot gets kicked for flooding?

[05:56] <masak> good question

[05:56] <Darren_Duncan> you going to test it?

[05:56] <Darren_Duncan> just not with my name

[05:56] <masak> another funny one: can you put a delay on evalbot, and have it say strange things hours later?

[05:56] <Darren_Duncan> I wonder if 'sleep' is disabled as unsafe?

[05:57] <masak> ?eval sleep 8

[05:57] <evalbot6> Error: No compatible subroutine found: "&sleep" 

[05:57] <Darren_Duncan> I know that 'say' is

[05:57] <Darren_Duncan> seems so

[05:57] <masak> yep

[05:57] <Darren_Duncan> so it won't be easy to do what you suggest

[05:57] <masak> maybe a heavy calculation to slow it down

[05:57] <Darren_Duncan> another option, unless disabled, is to register a signal handler

[05:58] <Darren_Duncan> or unless that isn't supported by Pugs yet

[05:58] * Darren_Duncan switching tasks ... ping if you want my attention

[05:59] <masak> ?eval my $a = 0; for 1..100000 { $a++; $a-- } "boo!"

[05:59] <evalbot6> (no output)

[05:59] <masak> :(

[06:02] <Juerd> Use a lower 100_000

[06:02] <Juerd> Like, ehm, 15.

[06:17] <masak> Juerd: but i want evalbot to stall for a while. preferable a few hours

[06:17] <masak> s/ble/bly/

[06:24] <masak> hm. maybe such behaviour could be useful instead of "abuseful"

[06:25] <masak> like, say, a rememberbot.p6 that keeps track of when people are asking a question to absentees

[06:26] <masak> and later, when that other person shows up, passes on the question

[06:26] <masak> the syntax could be something like:

[06:27] <masak> rembot, ask nothingmuch about the gay camels

[06:27] <masak> and when nothingmuch shows up, rembot says "nothingmuch: masak has a question about the gay camels"

[06:36] <Aankhen``> Morning.

[06:48] <autrijus> greetings Aankhen``.

[06:48] <Aankhen``> autrijus :-D

[06:48] <Aankhen``> What's shakin'?

[06:49] <Juerd> masak: It's protected against that, IIRC

[06:50] <autrijus> Aankhen``: nothing much

[06:51] <Aankhen``> Hrm, I don't see him here...

[06:51] <Aankhen``> :-P

[06:52] <autrijus> I'm reading way too many papers

[06:52] <Aankhen``> Ahh.

[06:52] <autrijus> all of them interesting but not all of which useful

[06:52] <gaal> autrijus, hey. any thoughts about arranging the hooks for eval.p6?

[06:52] <Aankhen``> Heh.

[06:52] <gaal> you mentioned a debugger on the horizon....

[06:52] <autrijus> gaal: why, yes, write something that rebinds envEval

[06:52] <gaal> (morning all :-)

[06:52] <Aankhen``> Hola gaal++.

[06:52] <autrijus> gaal: envEval can be hooked to some user defined funs

[06:52] <autrijus> simply by reifying Exp somehow

[06:53] <autrijus> I'm not sure it pays to do that now rather than do it as part of PIL evaluator

[06:53] <autrijus> but the basic idea is simple

[06:53] <autrijus> since all of our evalExp first looks up envEval

[06:53] <autrijus> once you rebind it you have effectively enabled a different interpreter, lexically

[06:53] <autrijus> (or rather, dynamically)

[06:54] <autrijus> eg this prim: sub runwith (Code &evaluator, Code &code) { }

[06:54] <autrijus> which simply does a

[06:54] <autrijus> local (\e -> e{ envEval = (envEval e =<<) . evaluator }) evalExp code

[06:54] <autrijus> or something like that.

[06:55] <autrijus> am I making some sort of sense?

[06:55] <gaal> a scary sort.

[06:55] <gaal> :)

[06:55] <autrijus> oh. good.

[06:55] <autrijus> it's not unlike &DB::DB.

[06:56] <autrijus> (assuming you already know what that is)

[06:56] <gaal> i think i understand why this has to be dynamically scoped

[06:57] <gaal> the evaluation happens when control reaches runwith

[06:57] <gaal> i'll look into DB::DB

[06:58] <gaal> hmm, first i should really finish the build prefs thing

[06:58] <gaal> much easier :)

[06:58] <autrijus> yes :)

[06:59] <autrijus> DB::DB is explained in perldebguts and maybe perldeb

[06:59] <autrijus> perldebug I mean

[06:59] <autrijus> as well as other places

[06:59] <gaal> i read the source code once but purely for entertainment purposes.

[07:00] <gaal> (of... perldebug.pl was it?)

[07:01] <gaal> my terminal emulator (putty) has started doing something very weird: it drops random characters.

[07:01] <gaal> it didn't use to do that

[07:02] <gaal> i'm trying to remember if it started after i dist-upgraded or not

[07:05] <gaal> oh it looks like this screen session is at fault

[07:05] <gaal> too bad, i think it's open for over a hundred days

[07:07] <autrijus> does a ^A Z  help?

[07:07] <gaal> doesn't that suspend screen?

[07:08] <gaal> it's definitely screen and not putty though - when i shell out with that sequence, the bug disapperears.

[07:08] <autrijus> big Z is reset

[07:08] <gaal> ah!

[07:08] <gaal> no :(

[07:08] <autrijus> :(

[07:09] <autrijus> see you again soon then

[07:09] <autrijus> ;)

[07:09] <gaal> echo '^V^A' doesn't help either (that's reset also, isn't it?

[07:09] <gaal> )

[07:10] <gaal> i mean, of course it is, but it's the *same* one i think?

[07:10] <autrijus> likely

[07:10] <gaal> brb

[07:10] <autrijus> I'm afraid there's nothing much you can do then

[07:20] <gaal> "Utmp slot not found - not removed" :-(

[07:20] <gaal> this fascination with uptimes is funny and silly at once

[07:21] <gaal> the machine itself will celebrate day 200 of uptime this week

[07:21] <gaal> at $work years ago we had a 400 day linux box

[07:21] <gaal> then some technitian pulled the plug

[07:21] <gaal> it's totally meaningless, but of course it was very sad

[07:22] <autrijus> this is not very unlike tamagotchi.

[07:23] <autrijus> :)

[07:23] <autrijus> forutnately I've never played tamagotchi.

[07:23] <gaal> though in screen sessions, there's actually some value lost; shell histories, scrap files, vi open on the first line of a story i want to some day complete...

[07:24] <gaal> it's unzen to fret about that - but it's also impossible to work with constant interruptions

[07:24] <gaal> therefore, i will now keep quiet for a bit :-)

[07:24] <autrijus> mu :)

[07:33] <cwest> autrijus: I just got JSAN on CIA this evening. We're tied on the leader board. :-)

[07:33] <cwest> But of course I'm going to sleep very very soon.

[07:34] <autrijus> url to the leader board? :)

[07:34] <autrijus> oh. you want svnbot6?

[07:35] <cwest> No, I'm going to get CIA's bot on #jsan

[07:35] <autrijus> ok

[07:35] <cwest> let someone else do the hard work.

[07:35] <cwest> http://cia.navi.cx/

[07:35] <autrijus> sure thing

[07:35] <cwest> "Most active authors today"

[07:35] <autrijus> congrats :)

[07:35] <cwest> Some of that was testing the gateway, the python programmer who wrote ciabot_svn.py broke it.

[07:36] <cwest> So I had to fix it, which means I had to add Python to the "list of technologies I never want to know anything about, but do anyway."

[07:37] <cwest> But this is all off-topic and as I said, I must sleep. By the way, anarchistic project management is a dream come true. Thanks for proving it works. :-)

[07:38] <autrijus> go sleep, you mad rhinocamel :)

[07:38] <autrijus> I forsee a great deal of fun in your future. :)

[07:42] <autrijus> well, I'll just be anarchistic on you and unleash svnbot on #jsan :)

[07:42] <autrijus> ...done

[07:42] <cwest> :-)

[07:42] <cwest> I love solutions.

[07:43] * cwest & # sleepink da

[07:45] <gaal> say, is it correct for the 'ghci' target in Makefile not to have the same dependencies as $pugs / optimimzed / profiled etc.?

[07:45] <autrijus> probably not.

[07:46] <gaal> also shouldn't the interactive pugs also have precompiled prelude, at least optionally?

[07:46] <autrijus> yes.

[07:46] <autrijus> so by all means improve that :)

[07:47] <gaal> okay, so i'm factoring out all the targets that build a pugs to a p5 script that does the yaml/env thing.

[07:47] <autrijus> lubly.

[07:51] <Khisanth> gaal: doesn't it have that already? O_O

[07:51] <gaal> doesn't it have what?

[07:52] <Khisanth> <gaal> also shouldn't the interactive pugs also have precompiled prelude, at least optionally < that

[07:52] <gaal> oh. no.

[07:53] <Khisanth> hmm so something else is making it start much faster?

[07:53] <gaal> the fact that it has no prelude at all? :)

[07:53] <gaal> oh

[07:53] <gaal> i meant the ghci version

[07:53] <gaal> not pugs w/o any params

[07:54] <gaal> THAT interactive pugs does have the prelude.

[07:54] <gaal> :)

[07:54] <autrijus> also I noted that when I started make ghci with bypass prelude

[07:54] <autrijus> I end up with something that has no prims at all

[07:54] <autrijus> but anyway... it should by all means agree with regular pugs

[07:54] <gaal> yup.

[07:55] <gaal> i don't see where the default make target gets set to something that builds pugs

[07:55] <gaal> there's no explicit 'default'

[07:55] <gaal> and the first 

[07:55] <gaal> aahh

[07:55] <gaal> (double colons)--

[07:55] <gaal> multiple "pure_all" definitions ;)

[08:00] <Khisanth> gaal: it was just make and the ./pugs

[08:00] <Khisanth> that is the one I am refering to

[08:01] <gaal> yes, i see now. i was referring to 'make ghci'.

[08:10] <gaal> i never wanted a portable command-line-armored perl hash serialization format before in my life. hmm.

[08:11] <gaal> migo, hey. are you coming to the hackathon?

[08:31] <gaal> autrijus, is MiniYAML.pm moved up from Config/ on purpose?

[08:34] <gaal> also: i need Perl6::Pugs::Config at build time. okay to 'use lib' in my script? or should that be parametized with MM stuff to take it from blib6?

[08:37] <autrijus> gaal: no, it's not, feel free to move it back

[08:38] <autrijus> 'use lib' is fine. if this is only build time, move to inc/

[08:38] <autrijus> if it's used in both buildtime and postinstall runtime, use lib lib is fine.

[08:40] <gaal> inc it is then, though that probably means i should avoid the Perl6::Pugs part of the namespace to avoid confusion

[08:42] <gaal> this stuff is just a little too big to be put in util/, and a little too hacky to be an independent set of modules :)

[08:50] *** knewt__ is now known as knewt_

[09:43] <gaal> is there any sense at all in leaving in the old inlining mechanism? the one that includes a quoted source prelude and evals it on pugs load.

[09:44] <gaal>  currently it's dead code, but if anyone sees the use of it i can make it optional.

[09:45] <gaal> it removes the requirement of pugscc always working :) but i'm not sure if that's a pro.

[10:06] <autrijus> just ditch it :)

[10:06] <gaal> k

[10:21] <gaal> is IPC::Open2 core in 5.6? remind me again where the core module list lives?

[10:22] <Maddingue> IPC::Open2  was first released with perl 5.000

[10:23] <gaal> good enough for us, thanks.

[10:23] <Maddingue> for the core modules list, Module::CoreList, which installs the command corelist

[10:24] <gaal> great, thank you :)

[10:26] <Maddingue> no problem :)

[10:33] <gaal> autrijus, is Pugs.CodeGen.PIR.Prelude.hs still active?

[10:34] <gaal> i wasn't aware that src/gen_prelude was handling that

[10:36] <integral> Pugs.Compile.Pugs2 might also be removed as it's not hooked into Pugs.CodeGen

[10:38] <gaal> integral, please remove it then. i don't know that part of the source tree

[10:39] * integral doesn't really know that module either

[10:41] <gaal> um, its svn log is only two commits long.. frozen lead?

[10:43] <integral> hmm, must be, I'll just remove it then :-)

[10:44] <gaal> hmmm, it looks like CodeGen.PIR is indeed using a source-inlined prelude.

[10:45] <gaal> so we're stuck with src/gen_prelude :)

[10:50] <svnbot6> r5638, gaal++ | drop source-inlined Prelude from build (but note that src/gen_prelude

[10:50] <svnbot6> r5638, gaal++ | is still used for by Pugs.CodeGen.PIR.Prelude)

[10:56] <Aankhen``> ?eval ('a', 'b', 'c', 'd').sort:{ $^b cmp $^a }

[10:56] <evalbot6> ('d', 'c', 'b', 'a') 

[10:57] <Aankhen``> ?eval time

[10:57] <evalbot6> 174826629.213414 

[10:57] <Aankhen``> ?eval int(time)

[10:57] <evalbot6> 174826641 

[10:57] <Aankhen``> ?eval my $now = time; ($now, int($now))

[10:57] <evalbot6> (\174826661.209474, 174826661) 

[10:59] <Aankhen``> ?eval while (1..10) { $_ }

[10:59] <evalbot6> (no output)

[10:59] <Aankhen``> ?eval my $i = 0; while (1..10) { next } continue { $i++ }; $i++

[10:59] <evalbot6> (no output)

[11:00] <Aankhen``> ?eval my $i = 0; while (1..10) { next } continue { $i++ }; $i

[11:00] <evalbot6> (no output)

[11:09] *** Aankh|Clone is now known as Aankhen``

[11:20] <Aankhen``> ?eval sub foo { @_ }; my $quux = "hahahaha"; foo(:bar<baz>, :quux($quux))

[11:20] <evalbot6> [] 

[11:21] <Aankhen``> ?eval sub foo ($bar, $quux) { ($bar, $quux) }; my $quux = "hahahaha"; foo(:bar<baz>, :quux($quux))

[11:21] <evalbot6> (\'baz', \'hahahaha') 

[11:26] <QtPlatypus> ?eval sub foo (*@bar) { (@bar) }; foo ("A"=>"pair");

[11:26] <evalbot6> [] 

[11:26] <QtPlatypus> ?eval sub foo (*@bar) { (@bar) }; foo ("A","pair");

[11:26] <evalbot6> ['A', 'pair'] 

[11:26] * QtPlatypus wonders if thats the correct responce.

[11:27] <Aankhen``> I think that's a little messed up...

[11:27] <wolverian> maybe *%_ is implicit?

[11:28] <Aankhen``> Hmm...

[11:28] <Aankhen``> ?eval sub foo (*@bar) { *%_ }; foo (:A<pair>);

[11:28] <evalbot6> Error: Undeclared variable: "%_" 

[11:28] <Aankhen``> ?eval sub foo (*@bar) { @bar }; foo (:A<pair>);

[11:28] <evalbot6> [] 

[11:29] <Aankhen``> I love the LOTR soundtrack.

[11:30] <Aankhen``> ?eval index('foo', 'fo')

[11:30] <evalbot6> 0 

[11:30] <Aankhen``> ?eval index('foo', 'o')

[11:30] <evalbot6> 1 

[11:30] <Aankhen``> ?eval 'foo'.index('oo')

[11:31] <evalbot6> 1 

[11:34] <QtPlatypus> ?eval my $i=0;my @lazy = given { for (1..10) { $i++;take $_ } };($i,shift @lazy,$i);

[11:34] <evalbot6> Error: No compatible subroutine found: "&given" 

[11:34] <Aankhen``> ?eval my $i=0;my @lazy = gather { for (1..10) { $i++;take $_ } };($i,shift @lazy,$i);

[11:34] <evalbot6> (\10, 1, \10) 

[11:34] <QtPlatypus> ?eval my $i=0;my @lazy = gather { for (1..10) { $i++;take $_ } };($i,shift @lazy,$i);

[11:34] <evalbot6> (\10, 1, \10) 

[11:34] <QtPlatypus> ?eval my $i=0;my @lazy = lazy {gather { for (1..10) { $i++;take $_ } }};($i,shift @lazy,$i);

[11:34] <evalbot6> (\10, 1, \10) 

[11:35] <masak> why is the $i a ref to 10?

[11:35] <Aankhen``> ?eval my $foo = 10; $foo

[11:35] <evalbot6> \10 

[11:36] <masak> does that explain it? :)

[11:36] <wolverian> ?eval my $foo = 10; +$foo

[11:36] <evalbot6> 10 

[11:36] <wolverian> it's a ref until you don't want it to be.

[11:36] <masak> ok

[11:36] <masak> why a ref from the beginning?

[11:36] <Aankhen``> [17:06:00] <masak> does that explain it? :) # it was supposed to :-P

[11:36] <masak> why would i ref 10?

[11:37] <QtPlatypus> masak: varables in a scaler context return refs to themselves.

[11:37] <masak> yes...

[11:37] <masak> but usually to things stored somewhere

[11:37] <masak> 10 is just an abstraction

[11:38] <masak> like "love" or "justice"

[11:39] <masak> :)

[11:40] <masak> my point is, i think, that in p5 land backspace returns the reference to a piece of data

[11:40] <masak> which is stored in memory somewhere

[11:40] <masak> the natural numbers are not stored in memory somewhere

[11:41] <masak> so where does the reference go?

[11:44] <QtPlatypus> Its a pointer to the box that $foo uses to store 10 (I think)

[11:46] <masak> QtPlatypus: is there only one box with a 10 in it, or can there be several?

[11:47] <QtPlatypus> ?eval sub odd (Code $code) {...};sub odd(Int $code) {...}; odd(1);odd {1};

[11:47] <evalbot6> *** ... - not yet implemented     at <eval> line 1, column 23-26 

[11:47] <QtPlatypus> ?eval sub odd (Code $code) {2};sub odd(Int $code) {2}; odd(1);odd {1};

[11:47] <evalbot6> 2 

[11:47] <QtPlatypus> ?eval sub odd (Code $code) {2};sub odd(Int $code) {3}; odd(1);odd {1};

[11:47] <evalbot6> 2 

[11:48] <QtPlatypus> ?eval sub odd (Code $code) {2};sub odd(Int $code) {3}; odd {1};

[11:48] <evalbot6> 2 

[11:48] <QtPlatypus> ?eval sub odd (&code) {2};sub odd(Int $code) {3}; odd {1};

[11:48] <evalbot6> 2 

[11:48] <QtPlatypus> ?eval sub odd (&code) {2};sub odd(Int $code) {3}; odd(2);

[11:48] <evalbot6> 3 

[11:48] <QtPlatypus> ?eval sub odd (&code) {2};sub odd(Rule $code) {3}; odd /a+/;

[11:48] <evalbot6> 3 

[11:49] <QtPlatypus> Ok, that a bug that must have been solved since my last version.

[11:49] <QtPlatypus> masak: I don't have any clue.

[11:49] <QtPlatypus> ?eval my @code = (1,2,3);@code;

[11:49] <evalbot6> [1, 2, 3] 

[11:58] *** Aankh|Clone is now known as Aankhen``

[12:03] <Limbic_Region> ?eval my @code = 1...; @code;

[12:03] <evalbot6> pugs: out of memory (requested 1048576 bytes) 

[12:03] <Limbic_Region> heh

[12:04] <Limbic_Region> ?eval my @code = 1...; @code[42];

[12:04] <evalbot6> pugs: out of memory (requested 1048576 bytes) 

[12:04] <Limbic_Region> definately not lazy

[12:11] <masak> is there any way to write a backslash as a single backslash within a string in perl6?

[12:11] <coral> what's the syntax for an OR junction?

[12:12] <masak> coral: `|`

[12:12] <coral> ?eval my @code = 1..3;@code;

[12:12] <evalbot6> [1, 2, 3] 

[12:12] <coral> ?eval my @code = (0|1)..(3|4);@code;

[12:12] <evalbot6> [(((0, 1, 2, 3) | (0, 1, 2, 3, 4)) | ((1, 2, 3) | (1, 2, 3, 4)))] 

[12:13] <coral> ?eval my @code = (0|1)..10;@code;

[12:13] <evalbot6> [((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) |   (1, 2, 3, 4, 5, 6, 7, 8, 9, 10))] 

[12:13] <coral> thanks

[12:13] <QtPlatypus> Thats an incredably powerfull/dangerious tool.

[12:13] <masak> impressive.

[12:14] <coral> ?eval my @code = 0 x 3;

[12:14] <evalbot6> ['000'] 

[12:14] <coral> so to make that a listop i probably append or surround it..

[12:14] <QtPlatypus> ?eval (a|b|c) x 3

[12:14] <evalbot6> Error: No compatible subroutine found: "&a" 

[12:14] <QtPlatypus> ?eval ("a"|"b"|"c") x 3

[12:14] <evalbot6> 'aaa' 

[12:15] <coral> ?eval (0|1) >>x<< 3

[12:15] <evalbot6> Error: Hyper OP only works on lists 

[12:15] <coral> heh

[12:15] <coral> i guess a junction technically isn't a list

[12:15] <coral> ?eval (0|1)

[12:15] <evalbot6> 0 

[12:20] <coral> ?eval sub decision () returns Int { (0|1) } decision x 3

[12:20] <evalbot6> '000' 

[12:20] <coral> ?eval sub decision () returns Int { (0|1) } decision for 1..10

[12:20] <evalbot6> undef 

[12:21] <coral> ?eval sub decision ($length) returns Int { (0|1) for 1..$length } decision(10)

[12:21] <evalbot6> undef 

[12:21] * coral reads more

[12:23] <QtPlatypus> coral: Your missing a ";"

[12:23] <coral> ?eval sub decision ($length) returns Int { (0|1) for 1..$length; } decision(10);

[12:23] <evalbot6> undef 

[12:23] <coral> hmm.

[12:23] <coral> sub {}; # ?

[12:24] <QtPlatypus> I ment between } and decision

[12:24] <coral> ?eval sub decision ($length) returns Int { (0|1) for 1..$length; }; decision(10);

[12:24] <evalbot6> undef 

[12:25] <coral> ?eval sub decision ($length) returns List { (0|1) for 1..$length; }; decision(10);

[12:25] <evalbot6> undef 

[12:29] <coral> ?eval sub decision (Int $length) returns List { map:{ (0|1) } 1..$length; }; decision(3);

[12:29] <evalbot6> Error:  unexpected "1" expecting adverbial block, term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or "}" 

[12:30] <coral> ?eval sub decision (Int $length) returns List { map -> { (0|1) } 1..$length; }; decision(3);

[12:30] <evalbot6> () 

[12:30] <coral> erg, can't privmsg it. sorry for the noise.

[12:30] <QtPlatypus> ?eval sub decision (Int $length) returns List { map { (0|1) } 1..$length} decision(3);

[12:30] <evalbot6> ((0 | 1), (0 | 1), (0 | 1)) 

[12:31] <coral> oh, duh. ok

[12:31] <coral> QtPlatypus++

[12:31] * QtPlatypus mmms 

[12:31] <QtPlatypus> ?eval sub decision (Int $length) returns List { map { (0|1) } 1..$length}; [|] decision(3);

[12:31] <evalbot6> Error: Cannot reduce() using a unary or nullary function. 

[12:32] <QtPlatypus> !!!

[12:32] <coral> ?eval sub decision (Int $length) returns List { map { [|] (0|1) } 1..$length} decision(3);

[12:32] <evalbot6> Error: Cannot reduce() using a unary or nullary function. 

[12:32] <coral> ?eval sub decision (Int $length) returns List { map { "" _ (0|1) } 1..$length} decision(3);

[12:32] <evalbot6> Error:  unexpected "{" expecting operator, postfix conditional, postfix loop, postfix iteration, ";", "}", ":" or term postfix 

[12:32] <QtPlatypus> ?eval [|] (1,2,3,4,5)

[12:32] <evalbot6> Error: Cannot reduce() using a unary or nullary function. 

[12:32] <coral> heh, nope.

[12:33] <masak> ?eval my @a; push @a, ["." xx 3] for 1..3; @a[any(0..2)][any(0..2)] eq "."

[12:33] <evalbot6> Error: cannot cast from VJunc any(VInt 0,VInt 1,VInt 2) to Double (VNum) 

[12:33] <masak> does anyone know if the above should work?

[12:33] <masak> i think it should

[12:34] <QtPlatypus> ?eval my @a; push @a, ["." xx 3] for 1..3;any(@a[0..2][0..]) eq ".";

[12:34] <evalbot6> Error:  unexpected "a" expecting ";", statements or end of input 

[12:34] <QtPlatypus> ?eval my @a; push @a, ["." xx 3] for 1..3;any(@a[0..2][0..2]) eq ".";

[12:34] <evalbot6> bool::false 

[12:35] <QtPlatypus> That's not right.

[12:35] <masak> no

[12:35] <coral> ?eval sub decision (Int $length) returns List { map -> { (0|1) } 1..$length; }; map { "$_" } decision(3);

[12:35] <evalbot6> () 

[12:36] <QtPlatypus> ?eval my @a; push @a, ["." xx 3] for 1..3;@a

[12:36] <evalbot6> [('.', '.', '.'), ('.', '.', '.'), ('.', '.', '.')] 

[12:36] <coral> aha!

[12:36] <coral> ?eval (0|1) xx 3

[12:36] <evalbot6> (0, 0, 0) 

[12:36] <coral> ?eval (0|1) xx 10

[12:36] <evalbot6> (0, 0, 0, 0, 0, 0, 0, 0, 0, 0) 

[12:36] <masak> huh?

[12:36] <masak> bug?

[12:37] * QtPlatypus nods "I think so"

[12:37] <QtPlatypus> Two bugs.

[12:37] <QtPlatypus> Coral's bug and Masak's one.

[12:37] * masak doesn't like junction bugs

[12:37] <masak> they're hard to write tests for

[12:37] <coral> ?eval sub decision (Int $length) returns List { map -> { (0|1) } 1..$length; }; decision xx 3;

[12:37] <evalbot6> Error: No compatible subroutine found: "&xx" 

[12:38] <coral> ?eval sub decision (Int $length) returns Int { (0|1) }; decision xx 3;

[12:38] <evalbot6> Error: No compatible subroutine found: "&xx" 

[12:38] <QtPlatypus> And my reduce bug.

[12:38] <coral> ?eval sub decision (Int $length) returns Int { (0|1) }; (decision) xx 3;

[12:38] <evalbot6> Error:  unexpected ")" expecting term 

[12:38] <masak> so, three bugs

[12:39] <coral> ?eval sub decision (Int $length) returns Str { (0|1) }; my @a; push @a, decision for 1..10; @a

[12:39] <evalbot6> Error:  unexpected "d" expecting block construct, term, ":", term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input reserved word 

[12:40] <coral> ?eval sub decision (Int $length) returns Str { (0|1) }; my @a; push @a, &decision() for 1..10; @a

[12:40] <evalbot6> Error: No compatible subroutine found: "&decision" 

[12:40] <masak> ?eval my @a; push @a, ["." xx 3] for 1..3; @a[any(0..2)][any(0..2)]

[12:40] <evalbot6> Error: cannot cast from VJunc any(VInt 0,VInt 1,VInt 2) to Double (VNum) 

[12:40] <coral> ?eval sub decision () returns Str { (0|1) }; my @a; push @a, &decision() for 1..10; @a

[12:40] <evalbot6> [(0 | 1), (0 | 1), (0 | 1), (0 | 1), (0 | 1), (0 | 1), (0 | 1), (0 | 1), (0 | 1), (0 | 1)] 

[12:40] <coral> half the battle

[12:40] <masak> ?eval my @a; push @a, ["." xx 3] for 1..3; @a[any(0..2)]

[12:40] <coral> ?eval sub decision () returns Str { (0|1) _ ".0" }; my @a; push @a, &decision() for 1..10; @a

[12:40] <evalbot6> Error: cannot cast from VJunc any(VInt 0,VInt 1,VInt 2) to Double (VNum) 

[12:40] <evalbot6> Error:  unexpected "_" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or "}" 

[12:40] * QtPlatypus humms.

[12:41] <masak> ?eval my @a = ('a', 'b', 'c'); @a[any(0..2)]

[12:41] <evalbot6> Error: cannot cast from VJunc any(VInt 0,VInt 1,VInt 2) to Double (VNum) 

[12:41] <QtPlatypus> ?evam my $junc = (0,1); $junc |= $junc for (0..4);

[12:41] <QtPlatypus> ?eval my $junc = (0,1); $junc |= $junc for (0..4);

[12:41] <evalbot6> undef 

[12:42] <QtPlatypus> ?eval my $junc = (0|1); $junc |= $junc for (0..4);

[12:42] <masak> hm. "my @a = ('a', 'b', 'c'); @a[any(0..2)]" i think that's my minimal test case

[12:42] <evalbot6> undef 

[12:42] <coral> ?eval 0+(0|1)

[12:42] <evalbot6> 0 

[12:42] <coral> ?eval 0+(0|1)

[12:42] <evalbot6> 0 

[12:42] <QtPlatypus> ?eval my $junc = (0|1); $junc |= (0|1) for (0..4);

[12:42] <evalbot6> undef 

[12:42] <coral> ?eval sub decision () returns Str { (0|1) }; my @a; push @a, 0+&decision() for 1..10; @a

[12:42] <evalbot6> [(0), (0), (0), (0), (0), (0), (0), (0), (0), (0)] 

[12:42] <masak> ?eval 'a'|'b'|'c'

[12:42] <QtPlatypus> ?eval my $junc = (0|1); $junc |= (0|1);$junc

[12:42] <evalbot6> 'a' 

[12:42] <evalbot6> \(0 | 1) 

[12:42] <masak> huh?

[12:43] <masak> oh, that's coral's bug again :)

[12:43] <QtPlatypus> ?eval my $junc = (0|1); $junc |= (0|1) for (0..5);$junc

[12:43] <evalbot6> \(0 | 1) 

[12:43] <coral> ?eval sub decision () returns Str { ('early'|'later'|'later2'|'later3') }; my @a; push @a, 0+&decision() for 1..10; @a

[12:43] <evalbot6> [(0), (0), (0), (0), (0), (0), (0), (0), (0), (0)] 

[12:43] <coral> ?eval sub decision () returns Str { ('early'|'later'|'later2'|'later3') }; my @a; push @a, &decision() for 1..10; @a

[12:43] <evalbot6> [('early' | 'later' | 'later2' | 'later3'), ('early' | 'later' | 'later2' | 'later3'), ('early' | 'later' | 'later2' | 'later3'), ('early' | 'later' | 'later2' | 'later3'), ('early' | 'later' | 'later2' | 'later3'), ('early' | 'later' | 'later2' | 'later3'), ('early' | 'later' | 'later2' | 'later3'), ('early' | 'later' | 'later2' | 'later3'), ('early' | 'later' | 'later2' | 'later3'), ('early' | 'later' | 'later2' | 'later3')] 

[12:43] <masak> ?eval 0|1|2

[12:43] <evalbot6> 0 

[12:43] <masak> hmm, maybe not a bug, by the way

[12:43] <coral> ?eval map { (0|1) } 1..10

[12:43] <evalbot6> ((0 | 1), (0 | 1), (0 | 1), (0 | 1), (0 | 1), (0 | 1), (0 | 1), (0 | 1), (0 | 1), (0 | 1)) 

[12:43] <coral> isn't there a verb for collapsing a junction?

[12:44] <masak> "collapsing" :)

[12:44] <QtPlatypus> coral: What do you mean by collapsing?

[12:44] <coral> ?eval my $a = (0|1); say $a;

[12:44] <evalbot6> any(VInt 0,VInt 1) bool::true 

[12:44] <coral> oh, gee

[12:44] <coral> heh

[12:45] <coral> is there any method for picking one state from the junction?

[12:45] <QtPlatypus> Test it against a predicate.

[12:46] <coral> ?eval my $a = (0|1); $a == 1;

[12:46] <evalbot6> bool::false 

[12:46] <coral> ?eval my $a = (0|1|2|3|4|5|6|7); $a > 0;

[12:46] <evalbot6> bool::false 

[12:46] <coral> reading more

[12:47] <QtPlatypus> ?eval my $a = any (0,1,2,3,4,5,6,7); $a >0;

[12:47] <evalbot6> bool::false 

[12:47] <QtPlatypus> ?eval my $a = all (0,1,2,3,4,5,6,7); $a >0;

[12:47] <evalbot6> bool::false 

[12:47] <QtPlatypus> ?eval any (0,1,2,3,4,5,6,7) >0;

[12:47] <evalbot6> bool::true 

[12:47] <QtPlatypus> ?eval my $a = all (0,1,2,3,4,5,6,7); $a >=0;

[12:47] <evalbot6> bool::true 

[12:48] <coral> ?eval map { any(0,1) > 0 } 1..10;

[12:48] <evalbot6> ((bool::false | bool::true), (bool::false | bool::true), (bool::false | bool::true), (bool::false | bool::true), (bool::false | bool::true), (bool::false | bool::true), (bool::false | bool::true), (bool::false | bool::true), (bool::false | bool::true), (bool::false | bool::true)) 

[12:48] <coral> d'oh

[12:48] <QtPlatypus> Damn, it looks like the junctions loose there juntive nature when there assigned.

[12:48] <QtPlatypus> ?eval any (0,1,2,3,4,5,6,7);

[12:48] <evalbot6> 0 

[12:48] <QtPlatypus> Or for some other reson.

[12:49] <masak> they're completely un-juncted

[12:49] <coral> ?eval ^(0|1)

[12:49] <evalbot6> Error:  unexpected "^" expecting program 

[12:50] <masak> ?eval all(0,1,2,3,4,5,6,7)

[12:50] <evalbot6> 0 

[12:50] <coral> ?eval one((0|1))

[12:50] <evalbot6> 0 

[12:50] <coral> ?eval one((0|1))

[12:50] <evalbot6> 0 

[12:50] <coral> ?eval one((1|0))

[12:50] <evalbot6> 0 

[12:50] <QtPlatypus> ?eval all(1,2,3,4)

[12:50] <evalbot6> 1 

[12:50] <masak> it just picks the first one all the time

[12:51] <coral> i see synopsis 9

[12:51] <coral> but no exe or apoc :(

[12:51] <coral> synopsis 9 hints at one() 

[12:51] <coral> ?eval one(1,5,6,56,6,6,5,54,4,4,0)

[12:51] <evalbot6> 4 

[12:51] <QtPlatypus> !!!

[12:52] <masak> huh?

[12:52] <coral> ?eval map { one(0,1) == 0 } 1..3

[12:52] <evalbot6> ((bool::false ^ bool::true), (bool::false ^ bool::true), (bool::false ^ bool::true)) 

[12:52] <coral> haha

[12:53] <masak> ?eval 1^2^3^0

[12:53] <evalbot6> 0 

[12:53] <coral> ?eval (1^2^3^4^5^6^7)

[12:53] <evalbot6> 1 

[12:53] <QtPlatypus> 6> 0 

[12:53] <coral> ?eval (7^1^2^3^4^5^6)

[12:53] <evalbot6> 1 

[12:53] <coral> righto

[12:54] * coral walks over to an alcove and turns into a dusty hunk of armor

[12:54] <masak> junctions are weird

[12:54] <QtPlatypus> I think the junctions are broken at the moment.

[12:54] <coral> ?eval say one(0,1)

[12:54] <evalbot6> one(VInt 0,VInt 1) bool::true 

[12:54] <masak> where does the bool::true come from?

[12:54] <QtPlatypus> ?eval say all(1,2,3,4)

[12:54] <evalbot6> all(VInt 1,VInt 2,VInt 3,VInt 4) bool::true 

[12:55] <QtPlatypus> From say

[12:55] <masak> ah

[12:55] <masak> ?eval all(1,2,3,4)

[12:55] <evalbot6> 1 

[12:55] <masak> ?eval say one(1,2,3)

[12:55] <evalbot6> one(VInt 1,VInt 2,VInt 3) bool::true 

[12:56] <masak> ?eval @a=(0,1,2); say @a[any(0,1,2)]

[12:56] <evalbot6> Error: Undeclared variable: "@a" 

[12:56] <masak> oops

[12:56] <masak> ?eval my @a=(0,1,2); say @a[any(0,1,2)]

[12:56] <evalbot6> Error: cannot cast from VJunc any(VInt 0,VInt 1,VInt 2) to Double (VNum) 

[12:56] <masak> that's my test!

[12:57] <masak> it should stringify to "any(0,1,2)" :)

[12:57] * masak writes test

[12:58] <QtPlatypus> I don't think its a stringification issue

[12:59] <coral> perl5 Quantum::Entanglement discusses the 'Observational operators'.

[12:59] <coral> "Whenever you perform an operation on an entangled variable which should increase your level of knowledge about the value of the variable you will cause it to collapse into a single state or set of states."

[12:59] <coral> i'm looking for a way to trigger that 'collapse' in perl6 junctions

[13:01] <masak> ?eval my $j = (1 | 2 | 3); ref($j)

[13:01] <evalbot6> ::Junction 

[13:01] <masak> that's good

[13:28] <masak> seen svnbot

[13:28] <jabbot> masak: I havn't seen svnbot, masak

[13:28] <svnbot6> r5639, masak++ | Committed test for @a[any(0..2)] bug

[13:28] <masak> jabbot, sorry. i meant svnbot6

[13:28] <jabbot> masak: Apologies are not necessary.

[13:28] <masak> great

[13:29] <masak> nevertheless

[13:29] <masak> just for kicks:

[13:29] <masak> jabbot, have you seen svnbot6 ?

[13:29] <jabbot> masak: You're not really talking about me -- are you?

[13:30] <masak> jabbot, no

[13:30] <jabbot> masak: Why not?

[13:30] <masak> lol

[13:30] <masak> seen svnbot6

[13:30] <jabbot> masak: svnbot6 was seen 1 minutes 56 seconds ago

[13:30] <masak> jabbot, now was that so hard?

[13:30] <jabbot> masak: I'm not sure I understand you fully.

[13:30] <masak> i see

[14:02] <nothingmuch> damnit

[14:02] <nothingmuch> i reinsalled the OS, and safari STILL crashes on the jsan website

[14:32] <masak> nothingmuch: maybe safari is at fault, not the OS

[14:35] <nothingmuch> masak: installing the OS == installing everything, including safari

[14:40] <masak> what i mean is that it might not help to reinstall your OS, if there really is a bug in safari

[14:41] <nothingmuch> masak: others can't reproduce it

[14:43] <stevan_> nothingmuch: what is broken about jsan?

[14:44] <nothingmuch> stevan_: safari loads 2-3 pieces of the site

[14:44] <nothingmuch> then i'm guessing JS kicks in

[14:45] <nothingmuch> and it does a pizzaball freeze

[14:45] <stevan_> ah

[14:45] <nothingmuch> yup

[14:45] <nothingmuch> if I disable js it doesn't crash

[14:45] <nothingmuch> *sigh*

[14:45] <stevan_> it works fine for me (safari but not Tiger)

[14:45] <stevan_> use firefox maybe?

[14:45] <nothingmuch> it  works fine for cwest too

[14:45] <nothingmuch> firefox is not responsive

[14:45] <nothingmuch> clicks are delayed by like 2 seconds

[14:45] <nothingmuch> i hate it

[14:46] <stevan_> nothingmuch: maybe you computer is broken?

[14:46] <nothingmuch> stevan_: no clue

[14:46] <stevan_> I think maybe you need a bigger screen

[14:46] <nothingmuch> yeah, that might be it

[14:47] <nothingmuch> any 22" inch laptops ?

[14:47] <stevan_> 30" would be better

[14:47] <stevan_> however, then you would need to upgrade your lap

[14:47] <nothingmuch> it'll need to fold on 3 axes

[14:48] <stevan_> nothingmuch: if you find yourself bored, can you please look over the MetaClass::Dispatcher code

[14:48] <stevan_> perl5/Perl6-MetaModel/lib/Perl6/MetaClass/Dispatcher.pm

[14:49] <stevan_> and if you are really bored implement a post-order traversal

[14:49] <nothingmuch> hold on, need to reinsall svk

[14:50] <stevan_> *sigh* it's always something :P

[14:50] * stevan_ is using irssi for the first time, it is actually kinda nice

[14:54] <nothingmuch> very nice

[14:54] <nothingmuch> get the growl script

[14:54] <nothingmuch> and get a billion other scripts from the irssi scripts repo

[14:54] * nothingmuch types ümlauts

[14:55] <nothingmuch> and עבריתץ

[14:55] <nothingmuch> almost works for hebrew

[14:55] <stevan_> almost

[14:55] <stevan_> it is running on feather right now, cause I am on my wife's computer :)

[14:56] <dudley> nothingmuch: Just to not be helpful at all, jsan worksforme on tiger.

[14:58] <stevan_> nothingmuch: maybe you should reinstall the last few system update

[14:58] <stevan_> s

[14:58] <nothingmuch> stevan_: that's what I'm doing right now

[14:58] <stevan_> then whatever it was you broke will be fixed :)

[14:58] <stevan_> nothingmuch: :)

[14:58] <nothingmuch> stevan_: get it through darwinports for OSX if you like it

[14:59] <stevan_> what? irssi?

[15:03] <stevan_> autrijus: would you mind posting a list of the papers you are currently reading (and finding interesting) somewhere? the wiki perhaps?

[15:08] <nothingmuch> yes, irssi

[15:08] <stevan_> oh, nothingmuch I think masak was wondering about your "gay camels in denial" comment

[15:09] <stevan_> I dont think many people know how gay lambda is 

[15:09] <masak> nothingmuch: yes, backlogging to find what i was wondering

[15:10] <masak> ah, here it is:

[15:10] <masak> 'i was going to ask nothingmuch about the phrase "gay camels in denial" in one of his recent emails'

[15:10] <masak> ' i parsed it as he must have intended, but did a double take on it afterwards'

[15:10] <nothingmuch> i had a little link in that email

[15:10] <nothingmuch> pointing to lambda.org

[15:10] <masak> yes, yes

[15:10] <masak> ' thing is, what are the camels in denial about?  '

[15:11] <masak> ' being camels, or being gay?'

[15:11] <nothingmuch> camels is the other part

[15:11] <nothingmuch> and the in denial refers to people like Juerd and myself, who keep beating dead horses which are dead for the wrong reasons

[15:11] <masak> so the camels are in denial about being lambda, correct?

[15:12] <stevan_> no, they are in denial about their effectiveness in the perl6 design process

[15:12] <masak> about whose effectiveness?

[15:12] <masak> the lambdas?

[15:12] <stevan_> nothingmuch wants everything to be MMD and Juerd wants ./method

[15:13] <stevan_> and everyone thinks they are gay for wanting it

[15:13] <masak> that's a rather strange use of "gay"

[15:13] <stevan_> masak: I am only kidding :)

[15:13] <masak> good :)

[15:13] <stevan_> nothingmuch is a lesbian though

[15:14] <masak> yes, but that surely has nothing to do with wanting everything to be MMD

[15:14] <stevan_> thats what you think ;)

[15:14] <masak> lol

[15:15] <stevan_> masak: it all depends on what MMD really means

[15:15] <stevan_> right nothingmuch ?

[15:15] <nothingmuch> =)

[15:15] <nothingmuch> bah! network issues

[15:16] <nothingmuch> if MMD is homogenic, then.... ;-)

[15:16] * masak will never be able to hear "MMD" without blushing from now on

[15:20] <stevan_> masak: its a good thing it doesn't come up regularly in polite converstation then

[15:21] <masak> stevan_: true. unless you're at a perl conference

[15:21] <stevan_> masak: yes, but I said "polite" converstaion :)

[15:22] <masak> stevan_: :)

[15:24] <stevan_> ok, time to go hang out with the kids, bye all

[15:53] <clkao> t/builtins/arrays/shift............................pugs: *** Can't locate Test.pm in @*INC (@*INC contains: /Users/clkao/work/pugs/blib6/lib /System/Library/Perl6/darwin-thread-multi-2level /System/Library/Perl6 /Library/Perl6/darwin-thread-multi-2level /Library/Perl6 .).

[15:53] <clkao> why do i still get this?

[15:56] <clkao> killing all stupid pm_to_blib files does the trick

[16:25] <nothingmuch> stevan: ping

[16:42] <stevan> nothingmuch: pong

[16:43] <stevan> what can I do for you my friend

[16:51] <nothingmuch> sorry, confusion

[16:51] * nothingmuch is being driven up the wall by unidentifiable reasons

[16:51] <nothingmuch> anywho, i don't know what you meant by post order traversa

[16:51] <nothingmuch> l

[16:52] <nothingmuch> try the last class in the ISA tree?

[16:52] <nothingmuch> or superclasses first?

[16:52] <stevan> instead of traversing down the tree

[16:52] <stevan> you go back up

[16:52] <nothingmuch> and I also don't see how it makes sense =)

[16:52] <stevan> you process the children first

[16:52] <stevan> then the parents

[16:52] <stevan> in pre-order, you process the parents first, then the children

[16:52] <stevan> thats what I have right now

[16:53] <stevan> but AS12 specifies that the dispatcher should handle many diff types of traversal

[16:53] <stevan> pre and post being two of them

[16:53] <stevan> breadth first being another

[16:53] <stevan> least derived first, most derived first

[16:53] <stevan> etc

[16:53] <stevan> just a sanity check on the current code would be nice too ;)

[16:54] <nothingmuch> pre order is not parent first

[16:54] <stevan> sorry

[16:54] <stevan> parent is wrong in that context

[16:55] <nothingmuch> it's left to right

[16:55] <nothingmuch> and post is right to left

[16:55] <nothingmuch> and neither makes sense for class hierarchies

[16:55] <stevan> process the current class first, then all it's super classes 

[16:55] <nothingmuch> i think we want transparently recursive lookups:

[16:55] <nothingmuch> sub can {

[16:56] <stevan> that would be least derived

[16:56] <nothingmuch>     gather { for @superclasses { take if .can($meth) } }

[16:56] <nothingmuch> }

[16:56] <stevan> you forgot about the current class

[16:56] <nothingmuch> err, something along those lines, only not so wrong

[16:56] <nothingmuch> right

[16:56] <nothingmuch> you start with the current class, if it can't, you go to the parents, and try them one by one

[16:56] <nothingmuch> and this process is recursive

[16:56] <stevan> well, maybe pre/post-order is not the correct terms in this context

[16:57] <nothingmuch> you don't need to make it recursive, since lookup on the parent just works ajnyway

[16:57] <stevan> nothingmuch: thats what I have in Dispatcher

[16:57] <stevan> the dispatcher is basically a stack of stateful closures

[16:57] <stevan> so it can be resumed easily

[16:58] <stevan> cause next METHOD needs to be able to do that

[16:59] <stevan> but it only does least-derived order

[17:00] <stevan> (normal OO dispatch order)

[17:00] <stevan> I need to figure out how to do most-derived order as well

[17:00] <stevan> think of it this way

[17:00] <stevan> most-derived is how BUILD runs

[17:00] <stevan> and least-derived is how DESTORY runs

[17:01] <stevan> http://search.cpan.org/~ingy/Perl6-Bible-0.19/lib/Perl6/Bible/A12.pod#WALKCLASS_and_WALKMETH_Caching

[17:01] <stevan> doh

[17:01] <stevan> that is backwards

[17:01] <stevan> DESTORY is most-derived, BUILD is least-derived

[17:19] <pdcawley>  DESTORY? *nice* typo.

[18:08] <svnbot6> r5640, Stevan++ | Perl6::MetaModel - 

[18:08] <svnbot6> r5640, Stevan++ | * MetaClass->class_precedence_list now uses the dispatcher (it should use WALKCLASS really)

[18:08] <svnbot6> r5640, Stevan++ |     - added some tests for this as well

[18:08] <svnbot6> r5640, Stevan++ |     - fixed the metaclass tests which this work broke (now it is right, before it was wrong)

[19:43] <stevan> hmm, dare I say it... but Python 2.3's method resolution order is very nice (http://python.org/2.3/mro.html)

[19:43] <stevan> of course they stole it from Dylan

[19:43] <stevan> and now we will steal it from them 

[19:43] <stevan> muhahhahahaha

[19:53] <dudley> --- svn.openfoundry.org ping statistics ---

[19:53] <dudley> 25 packets transmitted, 0 packets received, 100% packet loss

[20:45] <Aankhen``> G'night.

[20:57] <stevan> dudley: if you want you can use http://svn.perl.org/perl6/pugs/trunk/ but it is read only (unless you have an account there)

[21:21] <masak> autrijus complains in his blog about the lyf being so short

[21:22] <masak> i wish i had half of his paper grokking speed, though, that would make the craft less longe to lerne

[21:37] <rafl> Hm. pugs was rejected by the Debian FTP masters. We need to wait for ghc6 to be built against libgmp3c2 until pugs can go into the archive.

