[00:04] * Khisanth grabs an aluminum bat and heads for autrijus' current location

[00:13] <Limbic_Region> autrijus - I taught myself how to turn off my internal dialog.  It doesn't always work because as soon as you start to relax into sleep it jumps right back in.  Usually need a combination of turning off the dialog along with no mental activity 2 hours prior to sleep

[00:14] <meppl> why is in the examples no  ~~ m/bla/  ?

[00:14] <meppl> only   m:perl5/.../

[00:15] <autrijus> meppl: the rules support depends on (currently) trunk parrot (which will become 0.2.2 soon)

[00:15] <meppl> oh, okay

[00:15] <autrijus> but you are entirely free to commit examples/rules/

[00:15] <autrijus> that'd be helpful

[00:16] <Limbic_Region> speaking of which - I assume you aren't planning another release until you are back to being on the other side of the world?

[00:16] <autrijus> I was initially planning another release, but my brain state doesn't seem to allow for it

[00:17] <meppl> okee

[00:22] <clkao> the perl5 stuff seems to be broken badly

[00:22] <clkao> segfault on array.t

[00:22] <clkao> but startup seems to be faster.. preludeis compiled now?

[00:40] <stevan> pdcawley: the metamodel you refactored seems to be an older version

[00:41] <stevan> the newest version was checked in last night (which is probably your early yesterday morning maybe)

[00:42] <stevan> pdcawley: however, i will review the refactoring you did, and try to incorporate it

[00:42] <stevan> pdcawley: as for "how much can I refactor", my usual answer is "as much as you like, as long as all the tests still pass" :)

[00:58] <autrijus> nothingm1ch: back from the walk?

[01:21] <autrijus> nothingm1ch is really impossible. :)

[01:22] <autrijus> he misremembered his flight date -- it is actually taking off in less than 2 hours, instead of tomorrow this time

[01:22] <autrijus> so he's now scrambling to pack and chase the plane.

[01:22] * autrijus wonders if the plane will wait for him

[01:22] <obra> oh shit.

[01:22] <autrijus> indeed

[01:23] <obra> what's the flight #?

[01:23] <autrijus> no idea... I don't think he's in the mood of answering that

[01:23] <autrijus> I'm glad I was double-checking my plane ticket, which seemed to prompt him doing the same

[01:23] <obra> *nod*

[01:23] <autrijus> (my flight, on the other hand, takes off in 11 hours)

[01:23] <obra> (Was thinking it might make sense to see if the flight is delayed)

[01:24] <autrijus> Malev 97

[01:24] <autrijus> (flight number)

[01:24] <obra> *nod*

[01:54] <spinclad> bonne chance et bon voyage -- i hope he's safely out the door.  customs to go through?

[02:00] <autrijus> I think he'll do fine

[02:00] <autrijus> he said he'll ping back at #perl6 in Budapest airport 

[02:01] <autrijus> (and commit in new html matrix code that lets us do revision diffs)

[02:01] <autrijus>  (and platforms diffs)

[02:01] * spinclad *whews*

[02:03] <spinclad>    (and other higher-dimensional functors on the code)

[04:07] <nothingmuch> bah

[04:08] <sili_> bah bah black sheep have you got any wool

[04:08] <nothingmuch> my flight was overbooked

[04:08] <nothingmuch> the moral of the story is: airlines will do anything to make you happy

[04:08] <nothingmuch> instead of a connection through budapest i have a direct flight tomorrow

[04:08] <nothingmuch> first classx

[04:09] <nothingmuch> and i got $665 cds

[04:09] <nothingmuch> cdn

[04:09] <nothingmuch> just for 'agreeing' to stay

[04:09] <nothingmuch> i get to israel in normal people time

[04:09] <nothingmuch> and the flight is more convenient

[04:09] <autrijus> ...and he also got to wake me up from sleep and force me to sign his openpgp key

[04:09] <nothingmuch> and i'm getting paid back almost the full price of the flight

[04:09] <nothingmuch> yeah, i remembered I needed to do that

[04:09] <autrijus> and then promptly dumped me back to sleep while he get to show off in #perl6

[04:10] <nothingmuch> autrijus said "i can just find the fingerprint on the wiki"

[04:10] <nothingmuch> so much for security, eh?

[04:10] * autrijus mumbles something about karma and fate etc and went back to sleep

[04:10] <nothingmuch> grr

[04:10] <nothingmuch> now my plane will crash because of autrijus

[04:18] <QtPlatypus> Has someone written out the grammer for Perl6 in the form of Perl6 rules?

[04:36] <nothingmuch> seen chip

[04:36] <jabbot> nothingmuch: chip was seen 4 days 12 hours 36 minutes 50 seconds ago

[04:52] <obra> nothingmuch++ # social engineering

[04:59] <nothingmuch> obra: thanks =)

[04:59] * QtPlatypus is attempting to write some of pugs/examples/cookbook "I'm trying to follow the 'Perl Cookbook' but some of it doesn't make sence in Perl6, should I rephrase the requirement in the way that makes sense in perl6?

[04:59] <nothingmuch> not that I did anything..

[04:59] <nothingmuch> =

[04:59] <nothingmuch> )

[04:59] <nothingmuch> i just seemed a bit worried, so they were extra persuasive

[04:59] <nothingmuch> and then I made sure I had a direct flight, and not the same connection

[05:28] <cwest> So I need to know. What is the status of Perl 6 rules via pugs?

[05:31] <QtPlatypus> cwest: In what sence?

[05:31] <Khisanth> cwest: I think you want #parrot on perl.org :)

[05:32] <cwest> do I?

[05:32] <cwest> I want to know if I can write Pelr 6 rules using pugs so I can build a parser that targets parrot via perl 6.

[05:32] <cwest> or can I throw grammars right at parrot?

[05:33] <Khisanth> well I don't think you will be able to use anything not yet implemented in PGE :)

[05:34] <cwest> I was hoping for an easy answer. It sounds like you're trying to say that pugs has not implemented that.

[05:35] <cwest> Which is cool.

[05:35] <cwest> My javascript parser will just target perl 5 for today.

[05:36] <Khisanth> not sure what you mean by that but you can use the rules through PGE if you also have parrot

[05:36] <cwest> What I need is to use the source.

[05:39] <nothingmuch> cwest: you're a javascript dude, right?

[05:39] <cwest> I'm becomming one. :-)

[05:39] <nothingmuch> maybe you can help me with some DOM crap?

[05:39] <cwest> Soon I'll be one of you though.

[05:39] <nothingmuch> =).

[05:39] <nothingmuch> damn . key

[05:39] <cwest> Ah, I'm not that good, but I'll give it a go.

[05:40] <Khisanth> hmm trying to use the rules right causes a segfault :/

[05:40] <cwest> heh

[05:40] <Khisanth> err right now

[05:40] <Khisanth> get_pmc_keyed() not implemented in class 'String'

[05:40] <cwest> I was thinking that I could get my code to PIL really easy by running rules, which would also make a parser easy.

[05:40] <nothingmuch> i need to have a <tr>...</tr>

[05:41] <nothingmuch> which represents a single line of smoke results

[05:41] <nothingmuch> like in http://nothingmuch.woobling.org/pugs_test_status

[05:41] <QtPlatypus> The big thing that isn't working is closures in rules.

[05:41] <nothingmuch> a single line can contain multiple rows of test cells - they are in a nested table

[05:41] <nothingmuch> anywho, upon clicking some little javascript button, the two cells on the left are rowspan=n

[05:41] <Khisanth> QtPlatypus: "a" ~~ /<[a-z]>/ works for you?

[05:42] <nothingmuch> and then there are n rows, with a line of cell-tables per each one

[05:42] <nothingmuch> for some cases the "expanded" view is the default

[05:42] <QtPlatypus> No but

[05:42] <QtPlatypus> "a" ~~ /<[a..z]>/ does

[05:43] <cwest> huh

[05:44] <cwest> I do not see any expanded views.

[05:44] <cwest> Nor do I see a way to create them. :-/

[05:45] <nothingmuch> that's what i'm working on right now =)

[05:45] <cwest> oh right.

[05:46] <Khisanth> QtPlatypus: which revision?

[05:46] <cwest> so you need to get at the dom to do this.

[05:46] <nothingmuch> right

[05:46] * QtPlatypus tried to do something by doing. /(<[a..z]>) {something($/[0])}/  but it doesn't work for me

[05:46] <nothingmuch> and I don't even know how to generate the HTML

[05:47] <cwest> Do you have an example of the extended entry anywhere?

[05:47] <nothingmuch> let me try to hack something... 3 mins

[05:47] <QtPlatypus> r5117 with 0.2.1 Parrot

[05:47] <cwest> and do you have control of the thing that is generating this current html?

[05:48] <Khisanth> QtPlatypus: I was trying with r5084

[05:49] <QtPlatypus> Khisanth: Make sure you have checked out the most recent Parrot.  pug's rules are implemented via the PGE.

[05:49] <QtPlatypus> Which comes with Parrot.

[05:50] <Khisanth> QtPlatypus: heh see scrollback ;)

[05:50] <nothingmuch> http://nothingmuch.woobling.org/example.html

[05:51] <cwest> nothingmuch: minor nit, align the text in the Test file row(s) to the top.

[05:51] <cwest> okay, so we could do this I think.

[05:52] <cwest> One way to do it is to also embed the table full of extended rows in the Test cases table cell.

[05:52] <cwest> Then toggle the view of either of them with the +/- links.

[05:53] <nothingmuch> that is, have an expanded row version, and a collapsed row version of each thing?

[05:53] <nothingmuch> i like that, let me hack it in

[05:53] <cwest> yes

[05:53] <nothingmuch> btw, is there any way to group several rows?

[05:53] <nothingmuch> reload the example

[05:53] <QtPlatypus> Has perl6's grammer been written in perl6 grammer yet?

[05:54] <cwest> Now, when you hack that in you need to keep an iterator and add id='' attributes to each of the tables.

[05:54] <QtPlatypus> Has perl6's grammer been written as a perl6 grammer yet?

[05:54] <nothingmuch> you see in 'dummy.t', which is inconsistent, because some tests fail in one version but not in the other, there's a border around the box

[05:54] <cwest> So for example, 'extended-006' and 'collapsed-006'

[05:54] <nothingmuch> and also one inside the box

[05:54] <nothingmuch> okay, makes sense

[05:54] <cwest> right, we could do that. we just need to be creative.

[05:55] <cwest> So you have either pass, fail, or parital states for a test run.

[05:55] <nothingmuch> uh, that's scary ;-)

[05:55] <nothingmuch> say again?

[05:55] <cwest> Right.

[05:55] <cwest> Either you have 100% pass, 100% fail or something in between.

[05:56] <cwest> The something in between "all good" and "all bad" is what you want to set appart.

[05:56] <cwest> er, apart.

[05:56] <nothingmuch> oh, no, not exactly

[05:56] <cwest> so generate a class="inconsistent" for each <tr> row that is inconsistent.

[05:56] <nothingmuch> this is supposed to display multiple reports in the same file

[05:57] <nothingmuch> where test files that don't agree between reports

[05:57] <nothingmuch> that is, test case 10 of file cwd.t failed on windows

[05:57] <cwest> Okay

[05:57] <nothingmuch> it's a sort of diff of test reports

[05:57] <cwest> So in what condition do you want t/dummy.t to be highlighted?

[05:58] <nothingmuch> can I say '<tr><td rowspan=2>...</td></tr><tr>...</tr>' and because the first tr doesn't have all the required <tds> it gets displayed on the same line?

[05:58] <nothingmuch> in the current example, one test randomly failed - the first one

[05:58] <nothingmuch> in one version

[05:58] <nothingmuch> but everything passed in the first version

[05:58] <nothingmuch> of dummy.t

[05:59] <nothingmuch> on the other hand path.t fails the same way

[05:59] <nothingmuch> so it's consistent

[05:59] <nothingmuch> consistent cases get folded

[05:59] <nothingmuch> inconsistent ones are expanded

[05:59] <cwest> Okay, so anything with yellow on the far right is inconsistent?

[05:59] <nothingmuch> nope =)

[05:59] <nothingmuch> look at paths.t

[06:00] <nothingmuch> it's consistent

[06:00] <cwest> okay (sorry)

[06:00] <cwest> okay, because the failures line up?

[06:00] <nothingmuch> right

[06:00] <cwest> Bingo

[06:00] <cwest> alright.

[06:00] <cwest> When generating a row for a test file, do you know this state ahead of time?

[06:01] <nothingmuch> yes

[06:02] <cwest> excellent, then you can use that to set a class='inconsistent' attribute on the table row containing your test file information.

[06:02] <nothingmuch> yup

[06:02] <nothingmuch> my problem is mainly with structure

[06:03] <nothingmuch> oh wait, I have an idea on how to simplify

[06:03] <cwest> okay, in that case I would suggest that in the table sell after the OK/FAILED/SKIPPED cell, just put both tables.

[06:03] <cwest> Both the expanded and collapsed tables.

[06:03] <cwest> One right after the other.

[06:04] <nothingmuch> one table is hidden, and 'toggle' just swaps table rows with the same index?

[06:04] <cwest> yes exactly

[06:04] <cwest> http://openjsan.org/js/DOM/Display.js -- this class will get your javascript most of the way there.

[06:05] <cwest> It may be a little heavy but it's well encapsulated.

[06:05] <nothingmuch> goody

[06:05] <cwest> also, uncomment the first commented line. if you aren't using my JSAN library that's a bug.

[06:06] <cwest> (oops)

[06:07] <nothingmuch> okies

[06:07] <cwest> So if you go one further and use <noscript> tags to give headings to each table, this will make your testing system look really sexy to non-js browsers.

[06:07] <cwest> They'll get both outputs but it'll be very understandable.

[06:09] <cwest> But honestly, who uses that old crap anymore?

[06:10] * QtPlatypus waves his hand.

[06:11] * QtPlatypus uses lynx rather then javascript.

[06:11] * QtPlatypus uses lynx rather then a javascript enabled browser.

[06:12] <cwest> no, you're just playing devil's advocate. :-)

[06:12] <cwest> Anyway, it'll work is the poing (and links has js support)

[06:13] <cwest> s/poing/point/

[06:14] * QtPlatypus uses it because he mostly hits text heavy sites and I can run it under screen.

[06:14] <QtPlatypus> I hate being forced to use a graphical browser.

[06:15] <cwest> that's okay, I hate testing javascript in a browser

[06:21] <nothingmuch> hmm.....

[06:21] <nothingmuch> reload... some progress

[06:24] * cwest & # on sec

[06:25] <cwest> what would you put in some_text?

[06:26] <nothingmuch> something that distinguishes the result sets

[06:26] <nothingmuch> like 'Windows, perl version', or  whatever

[06:26] <cwest> okay

[06:27] <nothingmuch> now I'm workiong on omitting the expanded view when there's nothing to show

[06:28] * cwest is hacking the js for you

[06:29] <nothingmuch> ooh lah lah

[06:30] <nothingmuch> cwest: do you use darcs?

[06:30] <cwest> I've never done.

[06:31] <cwest> but why not start.

[06:31] <nothingmuch> =)

[06:31] <nothingmuch> go fetch a binary from http://darcs.net

[06:31] <nothingmuch> then do 'darcs get http://nothingmuch.woobling.org/Test-TAP-Model'

[06:31] <nothingmuch> and 'darcs get http://nothingmuch.woobling.org/Test-TAP-HTMLMatrix'

[06:32] <Khisanth> hmm

[06:32] <nothingmuch> (you can browse these URLs without darcs)

[06:32] <cwest> okay

[06:32] <Khisanth> QtPlatypus: still segfaults with 5137

[06:35] <QtPlatypus> Khisanth: Odd.  Latest parrot check out?

[06:35] <nothingmuch> cwest: to get example.html working I run: perl -Ilib -I ../Test-TAP-Model/lib  example.pl && open example.html

[06:36] <Khisanth> yes

[06:36] <nothingmuch> example.pl will run the test suite foor Test-TAP-HTMLMatrix, once normally, and once with $ENV{TEST_FAIL_RANDOMLY}

[06:36] <nothingmuch> which causes t/dummy.t to spew out failures

[06:37] <nothingmuch> whenever the class of the rows is 'normal' it should be collapsed by default

[06:37] <nothingmuch> and whenever it's 'diff' it should be expanded by default

[06:38] <QtPlatypus> Khisanth: Thats odd.  Did you embed parrot or run it indepentely?  Also how much memory do you have?  I've noticed that with some of my more complex rules PGE's memory usage explodes.

[06:39] <nothingmuch> cwest: i'm tired, and you should also be

[06:39] <nothingmuch> want to continue tomorrow?

[06:39] <nothingmuch> stevan: darcs pull for initial consolidated view

[06:39] <Khisanth> <[a-z]> is complex? :)

[06:40] <Khisanth> QtPlatypus: hmm embeded

[06:41] <QtPlatypus> Khisanth: It isn't.  Have you tried <[a..z]> ?

[06:41] <Khisanth> also segfaults

[06:41] <Khisanth>  Rev. 8489 of parrot

[06:41] <cwest> http://caseywest.com/code/tap.html

[06:41] <cwest> That shows the toggles (I just grabbed your source)

[06:41] <cwest> only working on dummy.t

[06:42] <nothingmuch> cwest++; # you rock!

[06:42] <QtPlatypus> Odd.

[06:42] <nothingmuch> i'll integrate and generalize tomorrow before my flight

[06:42] <nothingmuch> stevan: check out http://caseywest.com/code/tap.html and http://nothingmuch.woobling.org/example.html

[06:43] <cwest> nothingmuch: If you look at the inline <script> you can see that I defaulted to the collapsed but I'm sure you can see that the templates could default based on the logic the generator knows.

[06:44] * cwest is working out the darcs thing now

[06:44] <gaal> morning!

[06:45] <cwest> *nod*

[06:46] <cwest> [cwest@espresso code]$ darcs get http://nothingmuch.woobling.org/Test-TAP-Model

[06:46] <cwest> dyld: Library not loaded: ../GMP.framework/Versions/A/GMP

[06:46] <cwest>   Referenced from: /usr/local/bin/darcs

[06:46] <cwest>   Reason: image not found

[06:46] <cwest> Trace/BPT trap

[06:46] <cwest> this would happen to me

[06:48] * cwest also need ghc

[06:48] <cwest> I'm behind I guess. :-)

[06:56] <nothingmuch> morning gaal 

[06:56] <nothingmuch> cwest: your diagnosis that you need a ghc is correct

[06:56] <nothingmuch> cwest: as for defaultness - yup

[06:59] <gaal> nm: cool story about the flight, i hope you're not too flustered though!

[07:00] * cwest installs ghc package

[07:00] <QtPlatypus> ?eval my Int $anint = +"Not a number, not even NaN";$anint

[07:00] <evalbot6> \0.0 

[07:02] <cwest> Copying patch 4 of 49...

[07:02] <cwest> darcs failed:  Failed to download URL http://nothingmuch.woobling.org/Test-TAP-HTMLMatrix/_darcs/patches/20050501165716-e79bd-d85b32f11f6bd16d1c4b13045f2aaa7ee793aa9f.gz

[07:02] <cwest> libcurl: HTTP error (404?)

[07:02] <cwest> ?

[07:03] <nothingmuch> uh, odd

[07:03] <nothingmuch> i'll zap that repo and repush

[07:03] <cwest> yeah, after four, consistently.

[07:03] <cwest> okay

[07:04] <nothingmuch> try now

[07:04] <nothingmuch> ok, we're getting there... reload example.

[07:05] <nothingmuch> (no js yet, but we have IDs)

[07:05] <cwest> cool.

[07:05] <cwest> Once I get this stuff I think it'll be a quicky.

[07:06] <cwest> Plus this is giving me time to read the darcs manual. ;-)

[07:06] <cwest> okay, got it all.

[07:06] <nothingmuch> heh =)

[07:08] * cwest is installing deps

[07:08] <nothingmuch> hmm... new direction:

[07:08] <nothingmuch> walk the table

[07:08] <nothingmuch> no multiple 'var toggle00x'

[07:08] <nothingmuch> just set it

[07:08] <nothingmuch> and then supply two functions.

[07:08] <nothingmuch> makes sense?

[07:09] <cwest> yeah. walk each child, getAttribute('id') for the table rows, getAttribute('class').split(/\s+/) for finding the diff class.

[07:09] <cwest> I think it's pretty doable.

[07:10] <nothingmuch> okay

[07:10] <cwest> Are you doing this or just giving me suggestions?

[07:10] <nothingmuch> i'm googling for this stuff

[07:10] <nothingmuch> i'll have a go

[07:10] <cwest> ah, of course.

[07:10] <cwest> cool

[07:10] <nothingmuch> if i don't have something in 10 minutes I'll delegate =)_

[07:10] <cwest> mkay

[07:13] <nothingmuch> how do i compare strings in JS?

[07:14] <cwest> ==

[07:15] <gaal> nm, your monad-fu requested at http://sial.org/pbot/11479

[07:15] <cwest> hrm, I can't get my local copy to get the [+]/[-] stuff output, even though I know that I can see it in template.html

[07:17] <nothingmuch> gaal: okay, one sec

[07:17] <nothingmuch> hmm..... maybe i didn't check in enough changes

[07:17] <gaal> there's another error about no instance for (Functor  TVar)

[07:18] <nothingmuch> cwest: give me 2-3 mins, and i'll slap everything together, and recommit

[07:18] <cwest> cool

[07:19] <nothingmuch> uh, my Run.hs is not 546 lines long...

[07:19] <nothingmuch> what's the enclosing function's type signature?

[07:19] <nothingmuch> i also can't find ^glob in there

[07:19] <gaal> true. this code is from the output of pugs -CPugs src/perl6/Prelude.pm, which i had more or less slapped there

[07:19] <nothingmuch> ah

[07:20] <nothingmuch> so can you show me the full signature of glob?

[07:20] <gaal> hmmm, no :) it isn't generated

[07:20] <nothingmuch> eep

[07:20] <gaal> but i'll see if i can figure it out

[07:21] <gaal> ooooofff, pugscc itself doesn't work on win32, what a pain in the ass

[07:21] <cwest> (I like darcs now, btw :-)

[07:22] <nothingmuch> cwest: it's very nice =)

[07:22] <nothingmuch> the UI is wonderful

[07:22] <nothingmuch> it's like SVK, but for dumdums

[07:22] <nothingmuch> gaal: eep... i think this is too much for me... i can't infer all that myself

[07:23] <nothingmuch> autrijus's taxi leaves in 3 hours

[07:23] <nothingmuch> maybe he can help

[07:23] <cwest> if course this now means I'm using darcs, svn, and cvs all at the same time. I have an editor problem like that too, using emacs, vim, and textwrangler all at various times.

[07:23] <gaal> he looks like he can use some rest :)

[07:24] <gaal> but if you can tell him to take a look at it, well, cool

[07:27] <nothingmuch> cwest: why are there numerous toggle00x objects?

[07:27] <nothingmuch> gaal: he is during deep power cycling

[07:27] <nothingmuch> (asleep right now)

[07:28] <cwest> nothingmuch: each one represents a group of things to be toggled.

[07:28] <gaal> figured

[07:28] <nothingmuch> i think he slept around 20+ hours since he left the hotel

[07:28] <cwest> nothingmuch: However that was the KISS model.

[07:28] <nothingmuch> cwest: oh

[07:28] <nothingmuch> i need to reread your code

[07:28] <cwest> It may not /need/ to be improved but it can be.

[07:28] <cwest> Yeah, it's just the dummy.t records

[07:29] <nothingmuch> does .split(regex) return a list/

[07:29] <cwest> I added <tbody> tags for each *group* (1 collapsed + 1 expanded), and the <script> tags to set up the DOM.Display objects.

[07:29] <cwest> yes it does.

[07:29] <nothingmuch> yeah, i used tbody

[07:29] <nothingmuch> var elems = id.split('_')

[07:30] <nothingmuch> if (elems[0] == 'collapsed')

[07:30] <nothingmuch> ?

[07:30] <cwest> yes

[07:30] <cwest> exactly

[07:31] <nothingmuch> how do i concat a string?

[07:31] <nothingmuch> +?

[07:31] <sili_> yes

[07:31] <cwest> yes

[07:32] <cwest> and if you're going there, .join() *returns* an object with two strings joined on a delimiter.

[07:34] <nothingmuch> okay

[07:34] <nothingmuch> can i query a toggle for whether an element is hidden or shown?

[07:35] <nothingmuch> i guess I could write toggle() function that just swaps the bits

[07:36] <cwest> no

[07:36] <cwest> add this to the class def

[07:36] <cwest>     isShown: function (id) {

[07:36] <cwest>         var elem = document.getElementById(id);

[07:36] <cwest>         if (elem.style.display == "none") return false;

[07:36] <cwest>         return true;

[07:36] <cwest>     }

[07:36] <cwest> (sorry for not using nopaste)

[07:37] <nothingmuch> i think i have a simpler solution

[07:37] <cwest> okay

[07:37] <nothingmuch> how do i enumerate a register?

[07:37] <cwest> I did conceed that DOM.Display could be overkill here. ;-)

[07:37] <nothingmuch> no, it's pretty convenient

[07:37] <cwest> for (var i in register.properties)

[07:38] <cwest> there is an example in the definition of showOnlyElement

[07:38] <cwest> also

[07:40] <nothingmuch> hmm

[07:40] <nothingmuch> debug help

[07:40] <nothingmuch> reload example.html

[07:40] <spinclad> btw i usually have js turned off in my browser (mozilla 1.7.8), which tends to die fairly quickly if i have it on.

[07:41] <nothingmuch> spinclad: the js is quite optional

[07:41] <nothingmuch> all the data is there otherwise

[07:41] <nothingmuch> i'll add an option to make it prerendered, so that there's no JS at all

[07:41] <nothingmuch> but then you can't have access to all the data, but it does look pretty

[07:41] <spinclad> sure, i heard.  just another data point for an old question.

[07:41] <cwest> s/.properties// in your for loop.

[07:42] <cwest> also, a comma after the function declaration for registerElement.

[07:42] <cwest> That might do it.

[07:42] <cwest> And I'm stealing that for myself. ;-)

[07:44] <spinclad> and thanks

[07:44] <nothingmuch> toggleDisp() is not being called... I don't get any alert.... odd.

[07:44] <cwest> you have a parser error

[07:44] <cwest> at least in the version on nm.woo...

[07:45] <nothingmuch> i'll upload the revised one

[07:45] <nothingmuch> how do I see parse errors in browser foo?

[07:45] <nothingmuch> nevermind

[07:48] <cwest> okay

[07:48] <cwest> I'm fixing a bunch of stuff.

[07:48] <nothingmuch> getElemById => what is the real method name?

[07:48] <cwest> you may want to diff/patch off of http://caseywest.com/code/exmaple.html

[07:48] <cwest> getElementsById

[07:48] <nothingmuch> oh, element

[07:48] <cwest> class is a reserved word.

[07:49] <nothingmuch> yeah, i got that far =)

[07:49] <cwest> You were writing perl 6 or java or something. ;-)

[07:49] <cwest> var i = 0; instead of int i = 0;

[07:49] <cwest> or C

[07:49] <nothingmuch> C i guess

[07:49] <nothingmuch> 404

[07:49] <cwest> so you need ot run this stuff inside of an onload function.

[07:50] <cwest> sorry, here: http://caseywest.com/code/tap.html

[07:50] <nothingmuch> i do that

[07:50] <nothingmuch> reload 

[07:51] <nothingmuch> wait, not yet

[07:51] <nothingmuch> okay

[07:51] <cwest> heh, okay

[07:51] <nothingmuch> getChildNodes is appearantly bull

[07:51] <nothingmuch> i wonder where I googled that off

[07:52] <cwest> I'm looking this up

[07:52] <cwest> childNodes

[07:52] <cwest> which is a list

[07:52] <cwest> so you can just copy it

[07:53] <cwest> var bodies = matrix.getChildNodes;

[07:53] <nothingmuch> yep

[07:53] <cwest> er, crap

[07:53] <cwest> matrix.childNodes;

[07:53] <nothingmuch> and then bodies.length and bodies[i]

[07:53] <nothingmuch> ?

[07:53] <cwest> yes

[07:53] <nothingmuch> "matrix.childNodes is not a function"

[07:54] <cwest> no, do not use ()

[07:54] <nothingmuch> ah

[07:54] <nothingmuch> C++

[07:54] <nothingmuch> =)

[07:54] <cwest> :-)

[07:54] <cwest> "Once you know one, you know them all..." -- bull

[07:54] <nothingmuch> too many languages == confusion

[07:54] <nothingmuch> once you know em all they all become one

[07:54] <nothingmuch> and then you know a part of each

[07:54] <cwest> yep

[07:55] <nothingmuch> getAttribute is now not a function... does it have a nicer name?

[07:55] <nothingmuch> 	var elm_cls = body.getAttribute('class');

[07:55] <sili_> ya like i know the php and the other day i tried to s/re_for_line_at_end_of_string//

[07:56] <cwest> I'm told there is an .attributes method

[07:56] <cwest> or accessor

[07:56] <cwest> perhaps .attributes[id]

[07:56] <nothingmuch> eek

[07:56] <cwest> s/id/class/

[07:56] <nothingmuch> oh wait, that's not magic

[07:56] <nothingmuch> that's an associative array

[07:56] <nothingmuch> i forgot that [] is really an operator

[07:57] <nothingmuch> body.attributes has no properties

[07:57] <nothingmuch> maybe body is a reserved word too?

[07:57] <cwest> attributes["class"].nodeValue.split(/_/)

[07:57] <cwest> give that a go

[07:57] <nothingmuch> as a method of body?

[07:58] <cwest> yes

[07:58] <nothingmuch> same

[07:59] <cwest> bah

[07:59] <cwest> so what happens if you alert(body.attributes.length); as a first debug step?

[08:00] <cwest> oh, and I think you want var body = bodies[i];

[08:00] <nothingmuch> i did say that

[08:01] <nothingmuch> which makes it very odd

[08:01] <cwest> and bodies.length in the for condition

[08:01] <cwest> I think you weren't reading dom docs but perhaps actually IE docs.

[08:02] <nothingmuch> oh

[08:02] <nothingmuch> =)

[08:03] <cwest> getId probably should not work either.

[08:05] <nothingmuch> right

[08:05] <nothingmuch> body.className works

[08:07] <cwest> cool

[08:09] <cwest> so getAttribute() should totally work onw

[08:09] <cwest> s/onw/now

[08:11] <nothingmuch> how do i check for definedness?

[08:11] <cwest> == undefined

[08:11] <cwest> != undefined

[08:11] <cwest> but sadly some things can be null

[08:11] <cwest> you may want to check first

[08:12] <cwest> I have confirmed getAttribute('id') will work.

[08:12] <cwest> So does .id

[08:12] <cwest> body.id

[08:13] <nothingmuch> i'm using body.id

[08:13] <cwest> rock

[08:13] <cwest> must be close

[08:16] <nothingmuch> hmm

[08:17] <cwest> ?

[08:17] <nothingmuch> reload

[08:17] <nothingmuch> i don't know why this isn't working now

[08:19] <cwest> body.id is either undfined or empty

[08:19] <nothingmuch> eek

[08:19] <nothingmuch> that's weird, i had an alert there, and it usually displayed OK

[08:19] <cwest> or collapsed_N

[08:20] <nothingmuch> i think you're right

[08:20] <cwest> you need to skip certain node types

[08:20] <nothingmuch> 			if (split_id[0] == 'expanded') {

[08:20] <nothingmuch> 				alert('got a body with id ' + elm_id);

[08:20] <nothingmuch> that alerts properly

[08:20] <cwest> so body.nodeType == 1; // this is an element

[08:21] <cwest> you are getting other types like text

[08:21] <nothingmuch> oh

[08:21] <cwest> if (body.id && body.nodeType == 1) {

[08:22] <nothingmuch> yup

[08:22] <nothingmuch> doesn't work yet

[08:22] <cwest> but I am not getting the toggle either

[08:23] <nothingmuch> oh! i think i got it

[08:24] <cwest> oh

[08:24] <nothingmuch> yes1

[08:24] <cwest> hideElement(body.id)

[08:24] <nothingmuch> right

[08:24] <cwest> same for the showOnly one, but I'm sure you got htat

[08:24] <nothingmuch> now to see why toggleOnly

[08:25] <nothingmuch> doesn't work

[08:25] <cwest> you need

[08:25] <cwest>         var elem = document.getElementById(id);

[08:25] <cwest> at the top of toggleHidden

[08:25] <nothingmuch> oh, because registry contains ids

[08:26] <cwest> and the function should accept (id)

[08:26] <cwest> (still doesn't fix links)

[08:26] <cwest> but I got the initial collapsing working

[08:27] <nothingmuch> wait, why does the function need to accept (id)?

[08:27] <cwest> oh, no, you're right

[08:28] <cwest>             var elem = document.getElementById(i);

[08:28] <cwest> inside the for loop

[08:28] <nothingmuch> the register iteration thing is not working

[08:28] <nothingmuch> 		for (var id in this.register) {

[08:28] <nothingmuch> 			alert('i got ' + id + ' from the regiser');

[08:28] <nothingmuch> no alerts when clicking

[08:28] <nothingmuch> or invoking manually using javascript: scheme

[08:29] <cwest> bah

[08:29] <nothingmuch> what is the {} structure called?

[08:29] <cwest> showOnlyElement works, I know that for sure.

[08:29] <cwest> That's an object.

[08:29] <nothingmuch> cute =)

[08:29] <nothingmuch> i'm assuming a copy of the root object?

[08:30] <gaal> nothingmuch, is autrijus up?

[08:30] <cwest> if by that you mean new Object() then yes

[08:30] <nothingmuch> gaal: nope.... try again in 1 hour

[08:30] <cwest> I could have said: register: new Object(),

[08:30] <nothingmuch> okay

[08:30] <nothingmuch> how is this.register an associative array? [] on object does arbitrary property access?

[08:31] <gaal> thanks. i got past the compilation problems, but now i have env problems. they're essentially Reader questions, maybe you can help!

[08:31] <cwest> nothingmuch: yes it does

[08:31] <gaal> i managed to inline the precompiled prelude (manually, so far), and have it actually run when pugs loads

[08:31] <gaal> problem is (i think) it gets its own env

[08:31] <nothingmuch> hmm... i wonder why it's not actually doing anything

[08:31] <nothingmuch> gaal: i'll let him know

[08:32] <nothingmuch> if i am not 100% zonked when he wakes me up

[08:32] <gaal> so i need to do some "local" magickery for the results of the evaluation to actually stick

[08:32] <nothingmuch> right

[08:33] <gaal> but i'm not in the Eval monad

[08:33] <gaal> so i don't know how to do that.

[08:33] <nothingmuch> err, where are you?

[08:33] <gaal> do you know prepareEnv? Run.hs

[08:33] <nothingmuch> nopd

[08:33] <nothingmuch> nope

[08:34] <nothingmuch> i'm afraid I'm not in a state of mind where i'm useful though

[08:34] <cwest> nothingmuch: good question. can you alert(this.register) ?

[08:34] <nothingmuch> it's very late

[08:34] <gaal> hmm, that's hte nice function that sets up the standard symbols and stuff, then calls initPrelude

[08:34] <gaal> never moose, i'll keep hacking myself

[08:34] <nothingmuch> hmm... nothing

[08:35] <cwest> ds

[08:35] <nothingmuch> oh, i'm not calling it right

[08:35] <cwest> var toggle = toggles[idx] = new DOM.Display();

[08:35] <cwest> Does that work?

[08:35] <nothingmuch> 	toggles[elem].toggleHidden();

[08:35] <cwest> oh, yes

[08:35] <cwest> otherwise you get code back :-)

[08:36] <cwest> Thyat's it!

[08:36] <nothingmuch> yep =)

[08:36] <nothingmuch> () is the function app op?

[08:36] <cwest> yep

[08:37] <cwest> It's gonna be great trying to emulate that when calling the DBI from JS. ;-)

[08:38] <nothingmuch> woot! it works!

[08:38] <nothingmuch> reload

[08:39] <gaal> cwest++ nothingmuch++

[08:39] <cwest> rock

[08:40] <cwest> So, at least in my browser, if you s/... expanded view:/Detail/ you don't get the funky resize stuff.

[08:40] <nothingmuch> fixed =)

[08:41] <cwest> cool

[08:41] <cwest> I like it

[08:41] <cwest> nothingmuch++

[08:41] <nothingmuch> cwest++

[08:41] <cwest> (Not it's 4:45am, I'm going to get some sleep)

[08:41] <nothingmuch> eek

[08:42] <spinclad> nothingmuch++ cwest++

[08:42] <nothingmuch> safari invents some borders that firefox doesn't

[08:42] <nothingmuch> spinclad: i promise you some javascript-free stuff tomorrow

[08:42] <nothingmuch> but it really is 4:45am, and I also need sleep

[08:42] <cwest> This will look nice even without javascript.

[08:42] <spinclad> no hurry

[08:43] <gaal> i hope autrijus pops by before he leaves

[08:43] <nothingmuch> cwest: email?

[08:43] <nothingmuch> cwest: without js it's just the same, but no [+] and [-]

[08:43] <cwest> [email@hidden.address]
[08:43] <gaal> it *almost* works! code is evalled but apparently symbols are not installed

[08:44] <gaal> or maybe they're installed in the wrong place

[08:44] <gaal> more likely.

[08:44] <nothingmuch> is it ok to mention the email in module docs?

[08:44] <cwest> yeah, no worries

[08:44] <nothingmuch> btw, do you have pugs committership?

[08:44] <cwest> I have to commit something first right? Then not yet.

[08:45] <cwest> I'm on my way since I'm got this crazy idea of making parrot the new js engine for mozilla. ;-)

[08:45] <nothingmuch> darcs pull

[08:45] * cwest does so

[08:46] <nothingmuch> cwest: check mail

[08:46] <nothingmuch> (you are now a comitter)

[08:46] <nothingmuch> anyway, sleep

[08:46] <cwest> cool

[08:47] <nothingmuch> release TTH tomorrow

[08:47] <cwest> you too

[08:47] <nothingmuch> oh wait, sorry

[08:47] <nothingmuch> darcs pull *now*

[08:47] <cwest> y

[08:47] <nothingmuch> (i thought I did push -a but I was wrong)

[08:48] <cwest> heh, I was wondering

[08:48] <cwest> sleepy sleepy :-)

[08:48] <nothingmuch> thanks so much, cwest

[08:48] <nothingmuch> you've been very very useful

[08:48] <cwest> np, and thanks

[08:49] * cwest &

[08:51] <gaal> autrijus, two items on the agenda for getting precompiled Prelude in (i'm typingaheading):

[08:52] <gaal> 1. pugsy: things are getting run, but apparently not in the correct env

[08:53] <gaal> 2. (haskell/makey): for now i'm assuming it's okay to modify Run.hs on the fly. very very hacky, but avoiding that would require (i think) boot files, which we can clean up after the release.

[08:54] <pasteling> "gaal" at 192.115.25.249 pasted "current initPreludePC" (7 lines, 346B) at http://sial.org/pbot/11485

[08:57] * gaal discovers OPTIONS_GHC -cpp and realizes #2 can be made much better.

[09:46] <autrijus> gaal: I got the backlog with me.

[09:46] <gaal> yay! i've hacked a gen_prelude.pl that mangles the -CPugs output, testing it now

[09:46] <autrijus> ok. my cab leaves in 10 minutes

[09:47] <autrijus> please check in whatever you have, since toronto airport has no wireless

[09:47] <autrijus> I'll check back in... 20 hours :)

[09:47] <gaal> i will, though i'm wary of breaking tests (i will be removing the old prelude)

[09:48] <gaal> thing that bugs me is that i bet it's just some "local" one-liner fix :(

[09:48] <autrijus> you can alternatively nopaste the patch

[09:48] <autrijus> or commit and then revert again

[09:48] <autrijus> both worksforme

[09:48] <gaal> heh, cool. okay

[09:49] <gaal> have a great trip!

[09:49] <autrijus> thanks!

[09:50] <autrijus> ...so, are you committing or nopasting? :)

[09:50] <gaal> oh! now?

[09:50] <gaal> sorry :))

[09:50] <gaal> sec

[09:52] <gaal> errr, there's some junk in this commit (pugscc changes are all bogus) but it's already transmitted

[09:52] <gaal> committed as r5138; i'll revert it now

[09:52] <autrijus> good then. have fun

[09:52] <autrijus> I got r5138

[09:52] <autrijus> &

[09:52] <gaal> thanks, you too

[09:53] <autrijus> :)

[09:53] <masak> have a good trip, autrijus

[09:56] <gaal> wtf? svn merge -r5138:5137 http://svn.openfoundry.org/pugs

[09:56] <svnbot6> r5138, gaal++ | precompiled Prelude (WIP)

[09:56] <gaal> svn: Use --force to override this restriction

[09:56] <gaal> svn: 'pugs' is not under version control

[09:56] <gaal> what's that mean?

[11:47] <QtPlatypus> ?eval grammer Foo { rule bar {bar}}; "bar" ~~ /<Foo::bar>/

[11:47] <evalbot6> Error: No compatible subroutine found: "&grammer" 

[11:48] <gaal> grammat

[11:48] <gaal> r

[11:48] <QtPlatypus> ?eval grammar Foo { rule bar {bar}}; "bar" ~~ /<Foo::bar>/

[11:48] <evalbot6> pugs: src/events.c:270: init_events_first: Assertion `rc == 0' failed. 

[11:48] <QtPlatypus> ?eval grammar Foo { rule bar {bar}}; "bar" ~~ /<Foo:bar>/

[11:48] <evalbot6> pugs: src/events.c:270: init_events_first: Assertion `rc == 0' failed. 

[11:48] <QtPlatypus> ?eval grammar Foo { rule bar {bar}}; "bar" ~~ /bar/

[11:49] <gaal> plus, i probably broke pugs with my last commit - but for some reason it can't be reverted. please use 5137

[11:49] <evalbot6> pugs: src/events.c:270: init_events_first: Assertion `rc == 0' failed. 

[11:49] * QtPlatypus nods to gaal

[11:52] * QtPlatypus tries it in an earler pugs.  "How does one say 'rule from grammar foo'"

[11:52] <gaal> i would guess <foo::rule> ?

[11:53] * QtPlatypus nods "Doesn't seem to be implemented yet"

[12:05] <QtPlatypus> The cookbook is for stuff that currently works in pugs, for stuff that works in perl6?

[12:06] <QtPlatypus> (That commer is infact an "or")

[12:06] <gaal> hmm, that's a good intersection, though for things that are more or less final p6 but not implemented too i'd say go ahead and include 'em but be nice and mark them that way.

[12:08] <gaal> make unoptimized is so fun! i keep being reminded.

[12:55] <masak> make unoptimized is really fast! what's the catch?

[12:55] <svnbot6> r5139, gaal++ | makefile side of precompiled prelude, plus some other scaffolding work (still WIP)

[12:55] <gaal> runtime hit. big one.

[12:56] <gaal> oh! darn it, my code is correct! it's pugs -CPugs that's broken

[12:56] <gaal> this is both good and bad news :)

[12:56] <QtPlatypus> Handy hint site:http://dev.perl.org/perl6/doc/design/ in google allows you to search the Apocalypse's Exegesis and Synoposises.

[13:02] * QtPlatypus looks confused. "I was told that given was as expression so you couldn't do something like..."

[13:02] <gaal> ?

[13:03] <QtPlatypus> $result = given $digit {when "T" { 10 };when "E" { 11 };default  { $digit }}

[13:03] <gaal> oh, i think this oughta work but isn't in pugs yet.

[13:03] <QtPlatypus> But its In A04 as being possable.

[13:03] <QtPlatypus> Arh!

[13:03] <gaal> i wanted it in some code i wrote already.

[13:04] <QtPlatypus> Me too.

[13:05] <gaal> in only associatively related moose, did you know that ? : can work on the LHS of an assignment in perl 5? lots of fun.

[13:05] <QtPlatypus> when doesn't act like c's switch.  Its more like pascal's case.

[13:05] <QtPlatypus> Right?

[13:05] * QtPlatypus nods to gaal.

[13:05] <gaal> i don't remember pascal

[13:06] <gaal> it doesn't fallthrough, if that's what you mean

[13:06] <QtPlatypus> Thats what I mean.

[13:06] <gaal> yeah, something Java got wrong and P6 right.

[13:13] <QtPlatypus> If I wished to get commit something how would i go about getting a commit bit and what are the documents for the proccess?

[13:13] <gaal> any metacommitters about?

[13:14] <gaal> Qt: you just have to send your email to one of the metacommitters; none seem to be around atm but they'll happily sign you up.

[13:14] * QtPlatypus nods.

[13:15] <gaal> then you just svn ci your stuff and it'll prompt you for authenticaltion, which you will be able to provide by the welcome email you will have gotten by that stage.

[13:15] * QtPlatypus nods.

[13:16] <gaal> once you do that, in your fist commit you can add yourself to AUTHORS.

[13:16] <gaal> that's more or less it :)

[13:18] * QtPlatypus nods

[13:27] <QtPlatypus> Hi Drbean

[13:29] <drbean> Platypus: Hey

[13:35] <iblech> gaal: Did you forget to svn add src/Pugs/PreludePC.hs-null? ("installing null prelude... can't open null prelude")

[13:36] <gaal> oops, sorry; sec

[13:36] <iblech> QtPlatypus: (<- metacommitter) What's your mail address? :)

[13:37] <iblech> QtPlatypus: Invitation sent :)

[13:37] <gaal> iblech++ thanks; r5140

[13:38] <QtPlatypus> Thanks.

[13:38] <gaal> but note that since pugscc is broken, you'd better use 5137

[13:38] <gaal> unless you can fix pugscc :) which woudl be grand

[13:40] <iblech> gaal++ # Pugs starts **fast** with the precompiled Prelude :)

[13:40] <gaal> heh, partially because the environment is pretty empty :)

[13:45] <svnbot6> r5140, gaal++ | add missing PreludePC.hs-null + svn props

[13:51] <gaal> um, btw that "hello world" you're seeing if you run r5138+ is a marker that the inlining did in fact take place. i'll remove it asap :)

[13:53] <iblech> Yep, saw that, np. I'm moving the declaration of %*INC from Prelude to Pugs.Run currently so the tests don't die

[13:53] <gaal> well, many will, of course

[13:54] <gaal> if we want we can have them 'use Prelude.pm' in the interim

[13:54] <gaal> hey, is Prelude.pm installed by make install? it oughta be...

[13:55] <gaal> hmm, it is, but not in @*INC, so 'use Prelude' won't work.

[13:58] <gaal> what influences MakeMaker in building pm_to_blib?

[14:03] <svnbot6> r5141, qtplatypus++ | Adding a new entry for the cookbook. Valid number detection.

[14:08] <QtPlatypus> Rules are so more readable then perl5 regexs.

[14:14] <svnbot6> r5142, iblech++ | Added section about the usual SVN props to pugs::hack and removed old

[14:14] <svnbot6> r5142, iblech++ | docs/other/development_tips.

[14:14] <svnbot6> r5143, iblech++ | * Moved declaration of %*INC from Prelude to Pugs.Run, so not all tests die.

[14:14] <svnbot6> r5143, iblech++ | * Added check for %*ENV<PUGS_BYPASS_PRELUDE> to util/gen_prelude.pl and removed

[14:14] <svnbot6> r5143, iblech++ |   the old (commented) Pugs.Run.initPrelude.

[14:14] <svnbot6> r5143, iblech++ | * Added PreludePC.hs to svn:ignore of src/Pugs.

[14:14] <svnbot6> r5143, iblech++ | * Usual svn props added to new files, QtPlatypus++.

[14:16] <gaal> iblech, thanks for the gen_prelude celanups!

[14:16] <gaal> cleanups even.

[14:17] <meppl> <gaal> iblech, thanks for the gen_prelude celanups!

[14:17] <meppl> <gaal> cleanups even.

[14:17] <meppl> --> iblech (~iblech@2001:8e0:abcd:14d:2e0:7dff:fee5:bff) has joined #perl6

[14:18] <gaal> (soon we can remove the old src/gen_prelude.hs and Prelude.hs)

[14:18] <malaire> hmm.. should r5143 compile or not? I'm getting error "Installing precompiled prelude... Can't exec "pugs": No such file or directory at util/gen_prelude.pl line 42."

[14:18] <iblech> meppl: Thanks

[14:18] <iblech> gaal: Right

[14:18] <iblech> malaire: It should

[14:18] <iblech> malaire: Probably you don't have pugs in your $PATH

[14:19] <gaal> hmm, but if 

[14:19] <gaal> yeah

[14:19] <gaal> that's broken

[14:19] <gaal> but changing the makefile to just say ./pugs won't work (because of windows)

[14:19] <gaal> beh.

[14:20] <gaal> sec, i'll fix that.

[14:27] <gaal> malaire: thanks for the note, please try 5144.

[14:27] <svnbot6> r5144, gaal++ | fix to use local pugs; add PreludePC.hs to cleanlist

[14:33] <malaire> gaal: r5144 works, thanks!

[14:33] <gaal> great

[15:03] *** rafl_ is now known as rafl

[15:50] <Limbic_Region> theorbtwo - I assume you are safely back in Deutchland?

[16:37] <gaal> hmmm, very weird:

[16:37] <svnbot6> r5145, gaal++ | make sure first pass compilation always compiles Run, for added reliability

[16:37] <gaal> ./pugs-nop.exe -MPrelude -e 'say "hi"'

[16:37] <gaal> hello, world!

[16:37] <gaal> hi

[16:38] <gaal> ("-nop" is the no-precompiled-prelude pugs)

[16:38] <gaal> But:

[16:38] <gaal> ./pugs-nop.exe -MPrelude t/builtins/undef.t

[16:38] <gaal> hello, world!

[16:38] <gaal> ....and nothing more.

[16:38] <gaal> that is, the module is loaded, but the file isn't.

[16:39] <gaal> anyone with a pre-5138 pugs that can test if this happened there too?

[16:40] <gaal> beh, yes, it happens there too.

[16:41] <gaal> -M is somehow buggy; i guess that means the canonization in Pugs.Run.Args is wrong

[16:51] <putter> QtPlatypus: there is the beginning of a grammar for regexs in modules/Grammar.  It would be nice to have it fleshed out...;)

[16:55] <cwest> that would be cool

[16:55] <cwest> is it possible to take grammars and convert them to PIL? (I'm unfamiliar with any of this.)

[17:03] <putter> Currently pugs hands the patterns off to PGE (written in (sigh, everything starts with P) PIR), which parses the patern and generates PIR, creating the matcher.

[17:04] <putter> There has been talk of teaching pugs to parse regexps itself, and perhaps evaluate them, in which case I assume they would be added to PIL, but nothing done that I know of.

[17:07] <putter> I've been hoping someone will flesh out the regexp grammar.  There is a fuzziness currently, with incomplete implementations of a spec spread across documents and emails.  I'm hoping having something concrete, a cannonical grammar{}, will seed progress.

[17:10] * QtPlatypus nods to putter "Thanks"

[17:12] <QtPlatypus> putter: Wouldn't teaching pugs to parse regexes be a step backwards?

[17:13] * castaway notes putter is volunteering ;)

[17:15] * castaway hugs nothingmuch 

[17:16] <QtPlatypus> Is there anyway to say define a range with steps other then 1?

[17:17] <QtPlatypus> (remove the stray say in that sentence)

[17:17] <gaal> Qt: :by, but i dont' think it's in, and not actualyl sure it's finalized.

[17:18] <gaal> ?eval 1 .. 10 :by 2

[17:18] <evalbot6> *** No compatible subroutine found: "&eval"     at -e line 8, column 5-38 

[17:18] <castaway> theres a way to loop with other stepsyes

[17:18] <gaal> ?eval 1 .. 10 :by<2>

[17:18] <evalbot6> *** No compatible subroutine found: "&eval"     at -e line 8, column 5-40 

[17:18] <wolverian> ?eval 1

[17:18] <evalbot6> *** No compatible subroutine found: "&eval"     at -e line 8, column 5-19 

[17:18] <wolverian> haha.

[17:18] <gaal> i forgot, i broke evalbot.

[17:18] <castaway> ?1

[17:18] <gaal> damn: )

[17:18] <castaway> grats ;)

[17:18] <gaal> iblech, ping?

[17:20] <gaal> (just need to use the prelude explicitly to be fixed)

[17:27] <putter> QtPlatypus: pugs currently depends on PGE (or pcre for rx:perl5/.../) to handle regexps.  so if you say generate javascript from PIL... you still need to drag parrot along just for the regexps.

[17:29] <putter> castaway: but only in a low key, encourage others to do it first, kind of way. ;)

[17:30] <cwest> Interestingly I plan to drag parrot along to do just that. ;-)

[17:34] <QtPlatypus> Given that almost every lang has libaries to give it "perl5" style regexes.  Packaging parrot and the PGE as a libary to give langs "perl6 style rules" would be an easy way to accelarate the installation and distrabution of parrot.

[17:40] <putter> Interesting idea.  Could be.   My other thought is...

[17:42] <putter> Haskell might be a better language than PIR to write the thing in.  Right now we have a simple parser, parse tree, codegen, and engine bits.  All written in PIR.  Which is good in avoiding C's unicode issues, but...

[17:44] * QtPlatypus thought that pugs did lazy lists but "for (1...) -> $a {say $a}" blows up.

[17:46] <putter> We are going to need analysis and optimization too.  And I suspect for performance we are eventually going to want hybrid engines.  And for convenience, some degree of automated grammar transformation.  Writing that in PIR... would be non-trivial.

[17:50] <putter> Could write it in p6... ;)

[17:52] <integral> no one's tried a core/stg to pil translator yet?

[17:55] <theorbtwo> Limbic -- yeah.

[17:58] <putter> Actually, could write it in p6, compile it to PIR, and still do the parrot-based  "perl6 style rules" senario...

[18:01] <putter> hey QtPlatypus.  while you were briefly gone, "Actually, could write it in p6, compile it to PIR, and still do the parrot-based  "perl6 style rules" senario...". ;)

[18:02] * QtPlatypus nods

[18:03] <QtPlatypus> I think it would get compiled to PIR by default just for the speed boost.

[18:03] <svnbot6> r5146, putter++ | MatchX now sort of almost works.

[18:09] <QtPlatypus> putter: What does MatchX do?

[18:16] <putter> Hmm, it doesnt have any documentation, does it.  Sigh.  The current Match class has some properties which get in the way of implementing regexp engines.  MatchX is intended as a temporary alternative.  Being p6 rather than a primative, it is easier to tweak.  But as type coersion, stringification, etc, dont work too well, neither does that aspect of MatchX.

[18:17] <putter> The biggest thing is Match is immutable.

[18:17] * QtPlatypus thinks that the grammer that matches Perl6 rx should be called Perl6::rx rather then rx

[18:18] <putter> Much better.

[18:23] <QtPlatypus> Damn I should be asleep

[18:23] <svnbot6> r5147, Stevan++ | Perl6::MetaModel - adding a TODO list for the MetaModel; adding an unofficial Synopsis 12.5 document to track the design of the Metamodel;

[18:37] <putter> bye all.  QtPlatypus, I added a doc line to MatchX, but didnt get a chance to change the grammar name - feel free.  Thanks for your help. :)

[18:38] <svnbot6> r5148, putter++ | Brief MatchX documentation added. QtPlatypus++

[19:46] <svnbot6> r5149, stevan++ | Perl6-MetaModel - more docs and more TODOs

[19:50] <geoffb> stevan++ # impressive progress recently!

[20:15] <geoffb> Afternoon, Limbic_Region 

[20:18] <Limbic_Region> salutations geoffb

[20:19] <geoffb> how have you been?

[20:19] <Limbic_Region> tired

[20:19] <Limbic_Region> you 

[20:19] <Limbic_Region> ?

[20:19] <geoffb> ditto, and fighting a rather persistent head cold, bleah

[20:19] <geoffb> Recovering from family visit all last week

[20:21] <geoffb> Writing my article while listening to loud music is helping immensely

[20:47] <meppl> lalala

[21:34] <svnbot6> r5150, qtplatypus++ | All the self hosting grammars should be called Perl6::foo

[21:34] <svnbot6> r5150, qtplatypus++ | So Rx becomes Perl6::Rx

[21:58] <integral> wow, pugs is very fast now.  ++ all of those who did that :-)

[22:10] <cognominal> what means ANF in Pugs/Compile.hs?

[22:13] <clkao> Failed 167/350 test scripts, 52.29% okay. 1704/6131 subtests failed, 72.21% okay.

[22:13] <clkao> lots of failures

[22:15] <dudley> It looks like &eval is broken

[22:16] <geoffb> That's one way to get faster.  ;-)

[22:30] <Chewie[]> Perl 6 needs something to split by line. Something like <<\nfoo\nbar>>.

[22:30] <Chewie[]> Heredoc-like.

[22:30] <Juerd> Needs?

[22:31] <Juerd> What about:

[22:31] <Juerd> my @foo = q:to'XYZZY'.lines;

[22:31] <Juerd> first

[22:31] <Juerd> second

[22:31] <Juerd> third still third

[22:31] <Juerd> XYZZY

[22:32] <Chewie[]> You could also do <<'END'.lines # Hmm.

[22:32] <Juerd> Sure.

[22:32] <Chewie[]> Or is that the replacement for heredocs, q:to?

[22:46] *** sili_ is now known as sili

[23:18] * luqui believes that <<'END' is gone

[23:18] <luqui> in favor of q:to

[23:36] * theorbtwo wonders if scalar .foos vs list .foos is too cryptocontexty.

[23:42] <geoffb> theorbtwo, if you mean getting a count versus getting the actual items, that seems to be a good portion of the point of being able to act polymorphically based on context . . . .

[23:43] <geoffb> Now that forcing scalar context is a single character, I'm even happier with that WTDI

[23:43] <luqui> it's just that $length = @list.lines doesn't give you a count

[23:43] <luqui> it gives you a ref

[23:43] <luqui> so you need +@list.lines

[23:43] <geoffb> I don't mind +@list.lines.

[23:44] <theorbtwo> Hmm, it doesn't?

[23:44] <theorbtwo> $x = foo doesn't run foo in list context anymore?

[23:44] <luqui> uh...

[23:44] <luqui> never did

[23:44] <luqui> did you mean s/list/scalar/ ?

[23:45] <theorbtwo> erxz_paste, yes, I did.

[23:45] <geoffb> Of course, I personally hate auto-reference magic, because I think it is just as confusing for beginners as morphing sigils, and is likely to mess up experts who really care about whether something is a reference or not and get the hand-waving slightly wrong

[23:45] <theorbtwo> err, yes, I did.

[23:45] <luqui> no, it runs it in scalar context, but scalar context no longer gives you the length

[23:46] <geoffb> Note the very fact that the two of you are having this discussion . . . .

[23:46] <luqui> you have to run in *numeric* context, indicated by an "int" on the var, or a + in front of the call

[23:46] <theorbtwo> But the .lines method can care what context it's being run in.

[23:46] <theorbtwo> Ah.

[23:46] <theorbtwo> I'd like the idea a lot better if general scalar context worked.

[23:46] <theorbtwo> (Even though it messes with people who don't know the difference between a reference and a variable.

[23:47] <luqui> yeah, but the auto-enreferencing has its advantages

[23:47] <luqui> for instance, in `push @foo, 2`, push needn't have a special parsing form

[23:47] <luqui> I'm of mixed feelings on that decision, so I figure I'll just get used to it

[23:48] * geoffb thought it was cool at first, and has steadily soured on it

[23:48] <theorbtwo> In general, it is good.

[23:48] <theorbtwo> In some specific cases, it is not good.

[23:49] <theorbtwo> This is one of the cases where it is not good, and probably not good enough to warrant (apparently) breaking the general rule.

[23:49] <geoffb> My souring has come mostly from watching people struggling in here with the number of places it is decidely not good.

[23:49] <geoffb> I'm very glad infinite deref was killed

[23:49] <luqui> for example...?

[23:49] <luqui> no kidding

[23:49] <theorbtwo> The rule isn't really broken, because the more general rule is that things can do what they want to in whatever context they are run in.

[23:50] <geoffb> I guess I shouldn't have said "decidedly not good" but rather "decidedly confusing"

[23:50] <luqui> okay.  for example...?

[23:50] <geoffb> the infinite deref was clearly bad, though . . . .

[23:52] <geoffb> Well, the fact that for various builtins will by default treat scalar context as auto-ref rather than numeric is at the very least confusing

[23:52] <geoffb> But moreso I watched Darren_Duncan struggling with passing things as desired to LKT,

[23:53] <geoffb> and autrijus et al trying to get pugs to do the right thing,

[23:53] <Darren_Duncan> you rang?

[23:53] <Darren_Duncan> or not

[23:53] <geoffb> and thought "Gee, if smart people are having this much trouble, this seems too confusing"

[23:53] <geoffb> Just using your name in vain, Darren_Duncan.

[23:53] <Darren_Duncan> 'vain' is the wrong word to describe that

[23:54] <geoffb> Gee, not going to accept the mantle of godhood?

[23:54] <geoffb> s/using/taking/

[23:54] <Darren_Duncan> fyi, I'll probably release a major Rosetta perl 5 update today ... or tomorrow

[23:54] <geoffb> or whatever it is the Christians say . . . .

[23:55] <geoffb> Anyway, I extrapolated from the general channel issues to the beginning Perl programmers I knew, and thought to myself,

[23:55] <geoffb> "And Larry thought sigil morphing was too confusing?  This one will really screw people up."

[23:55] <geoffb> Did that all make sense to you, luqui?

[23:55] <geoffb> Sorry I'm rambling a bit, but I'm writing in another window, so my brain is in "spew words" mode

[23:56] <Darren_Duncan> the context of what you refer to is people saying things like "you hurt me, so may God strike you down" ... invoking God's name from a context of anger or hate etc

[23:56] <Darren_Duncan> still that is all off topic

[23:56] <geoffb> ah.  noted.

[23:57] <Darren_Duncan> that's what "God's name in vain" means, as I understand it

[23:57] <geoffb> fair enough.

[23:57] <Darren_Duncan> regarding the original comment, I understand that autrijus et al are working on changing something called transparent references ...

[23:58] <geoffb> I thought it was a reference to those who believe you should never refer to their deity by name.

[23:58] <Darren_Duncan> once that's done, the kind of stuff I wanted to do should be a lot easier and intuitive

[23:58] <luqui> geoffb: just got back to my keyboard, commensing reading

[23:58] <Darren_Duncan> it's not so much about refering to a deity by name, its refering to one in anger

[23:59] <Darren_Duncan> a more common version of the 'vain' thing is every time people say stuff like "Christ, why did you do that?"

[23:59] <geoffb> ah!

