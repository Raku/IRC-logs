[00:47] *** coral is now known as everything

[00:47] *** everything is now known as coral

[02:18] <scook0> iblech++ # for fixing named-args with non-bareword LHSs

[02:18] <scook0> (of course, `foo( ($lhs) => $rhs )` is still broken, but I don't see an easy fix for that)

[02:18] <scook0> and it's something we can live with for now

[03:43] <svnbot6> r7636 | scook0++ | * Tests for problems in current demagicalized-pair implementation

[03:43] <svnbot6> r7636 | scook0++ | (Unfortunately, two of these inexplicably hard-parsefail.)

[03:46] <pasteling> "putter" at 66.30.119.55 pasted "summary of basic -CPerl5 status" (56 lines, 3.5K) at http://sial.org/pbot/13722

[03:47] <putter> fyi.

[03:48] <putter> very basic - did -CPerl5 have any output, did it eval() ok, and did pugs complain.

[03:51] <putter> it would be nice to have a pil-uncompiler, ie, a pil->p6 emitter.  the generated p6 would then be run under test/smoke instead of the original p6.  providing a roundtrip test of pil generation.

[03:53] <putter> anything test which failed on the roundtrip, but not under normal pugs, would indicate a bug in pil or pil->p6.

[03:54] <putter> of course, as pil2js comes to have coverage equal to hs pugs, it could serve this role.  but a pil->p6 would be much simpler (no runtime), and thus less ambiguous.

[03:54] <putter> cheers &

[06:07] <gaal> Juerd: it isn't available through debian, unfortunately, and I can't be sure it won't break future upgrades (though I don't see why it should), so I'm not installing it for now.

[06:08] <gaal> rafl_: could you please give the complete one-or-three-liner I need to test this from scratch? Just apt-get source and the dpkg command you mentioned?

[07:25] <brother> Is svn down or is it just my connection?

[07:34] <scook0> brother: all of openfoundry seems to be down :(

[07:37] <r0nny> hoi

[07:41] <scook0> hi r0nny

[07:46] <brother> Ehmmm

[07:47] <brother> ? sub foo (*%named, Pair *@pairs) { say "hash"; say %named.perl; say "list"; for @pairs -> Pair $p { say $p.perl } } ; foo('a' ..'c' => 'ABC')

[07:47] <brother> ?eval  sub foo (*%named, Pair *@pairs) { say "hash"; say %named.perl; say "list"; for @pairs -> Pair $p { say $p.perl } } ; foo('a' ..'c' => 'ABC')

[07:47] <evalbot_7636> hash {("a b c" => "ABC")} list undef 

[07:47] <brother> ?eval sub foo (*%named, Pair *@pairs) { say "hash"; say %named.perl; say "list"; for @pairs -> Pair $p { say $p.perl } } ; foo ('a' ..'c' => 'ABC')

[07:47] <evalbot_7636> hash {} list (("a", "b", "c") => "ABC") undef 

[07:48] <brother> Is that difference intended?

[07:52] <nothingmuch> heh, /me did 'dd .... bs=1024x1024x1024' by accident

[07:53] <nothingmuch> by the time I realized what was going on it was too late ;-)

[09:24] <nothingmuch> http://ask.slashdot.org/comments.pl?sid=165444&cid=13801120

[09:24] * nothingmuch thinks this works:

[09:24] <nothingmuch> choose a leader

[09:24] <nothingmuch> all other prisoners also get k switches

[09:24] <nothingmuch> they switch randomly, like the king

[09:25] <nothingmuch> the leader prisoner waits for (n+1)k states he wasn't responsible for

[09:25] <rafl> Can someone please tell me when I parted this channel the last time before 11am CEST?

[09:25] <nothingmuch> rafl: use the logger?

[09:25] <rafl> nothingmuch: Where is the logger?

[09:26] <nothingmuch> http://irc.pugscode.org/

[09:26] <rafl> Thank you.

[09:28] * nothingmuch realizes he was wrong

[09:28] <nothingmuch> because the game might be stuck with all the prisoners running out of k before the leader gets his situations

[10:05] <nothingmuch> do we need a list context and?

[10:06] <nothingmuch> ($var ?? (key => $var) !! ());

[10:06] <nothingmuch> i find myself doing that a lot in arg lists lately

[10:06] <nothingmuch> i hope the touple type can get rid of it

[10:06] <nothingmuch> but i'm not sure

[10:06] <autrijus> hi from stockholm airport

[10:06] <nothingmuch> hi from omer industrial park

[10:06] <autrijus> boarding in... 20 min

[10:06] <nothingmuch> headed to the nordic perl workshop?

[10:07] <autrijus> but network may stop any time now

[10:07] <autrijus> journal up (a bit)

[10:07] <autrijus> no euro oscon

[10:07] <nothingmuch> ah

[10:08] <nothingmuch> autrijus: what do you think wrt list context && ?

[10:08] <nothingmuch> maybe a prefix operator on pairs

[10:08] <nothingmuch> what would a maybe operator look like?

[10:08] <autrijus> you can define it yourself... maybe :)

[10:08] <nothingmuch> right, it's nto hard

[10:09] <nothingmuch> sub maybe (Pair $x) { $x.v ?? $x :: () }

[10:09] <nothingmuch> lunchtime

[10:11] <wolverian> heh.

[10:11] <wolverian> autrijus, hey, you're almost near me! :)

[10:11] <autrijus> mmmnm?

[10:12] <wolverian> I know because I feel unusually energetic.

[10:12] <wolverian> (I'm in helsinki)

[10:13] <autrijus> :D

[10:13] <autrijus> I was in helsinki.

[10:13] * autrijus ponders the Amulet of Yendor effect

[10:14] <joao> wolverian: heh

[10:14] <integral> there's always the risk you got the fake one mixed up

[10:15] <autrijus> mm cheap plastic copy of autrijus

[10:15] <autrijus> about 30% finished slides is on http://perlcabal.org/~autrijus/tmp/pugs.xul

[10:16] <autrijus> it should be obvious that I'm in Unicode abuse mode.

[10:18] <wolverian> about time someone abused Unicode and not the reverse..

[10:19] <wolverian> use fp;?

[10:20] <xerox> autrijus: impressive!!!

[10:21] * wolverian agrees

[10:22] <xerox> autrijus: Unicode abuse mode is great.

[10:23] <wolverian> heh. what's erdosing? I think I missed that sometime ago :)

[10:36] <theorbtwo> Aww... I can't display slide 44 correctly!

[10:39] <scook0> grr, openfoundry still down? :(

[10:52] <nothingmuch> autrijus: what is "our feature presentation" going to be?

[11:11] *** Grrrr is now known as Gruber

[12:34] <rafl> Hrm.. what's up with openfoundry? RA layer request failed: PROPFIND request failed on '/pugs': PROPFIND of '/pugs': could not connect to server (http://svn.openfoundry.org)

[12:34] <gaal> rafl: autrijus mentioned it "got its weekend shutdown" just as his mailbox got full

[12:35] <gaal> did you see my ~threeliner request?

[12:35] <rafl> gaal: I can remember it roughly. Would you please repeat it, though?

[12:36] <rafl> btw, pugs 6.2.10 was accepted by the FTP masters and will go into Debian sid today.

[12:36] <gaal> yaya

[12:36] <rafl> 6.2.8 is in testing since yesterday.

[12:36] <gaal> rafl: you said ghc builds for you in a clean chrooted environment. how do i attempt the same?

[12:38] <rafl> apt-get install pbuilder; pbuilder create --distribution sid --mirror http://the.nearest/mirror; apt-get source ghc6; pbuilder build ghc6*.dsc

[12:38] <rafl> Maybe you also need to install cdeboostrap to make the pbuilder create work.

[12:40] <gaal> thanks, i'll try that later on today if i have time

[13:28] <rafl> gaal: btw, which version do you use? 6.4-4.1 or 6.4.1-1?

[13:28] <gaal> rafl: whatever ghc6 is on unstable :)

[13:28] <rafl> gaal: Yesterday it was 6.4-4.1. Today it's 6.4.1-1.

[13:29] <gaal> okies. can't try anything right now anymoose.

[13:29] <rafl> OK.

[13:45] <rafl> Why doesn't the pugs binary link against the haskell interface? It's still such a huge binary..

[13:57] *** r0nny_ is now known as r0nny

[14:02] *** ods15_ is now known as ods15

[14:04] <rafl> Who wrote the yaml_harness and config.yml/smoker.yml stuff?

[14:10] <svnbot6> r7637 | stevan++ | Perl6::MetaModel -

[14:10] <svnbot6> r7637 | stevan++ | * added a simplistic parser for class syntax (see tests for examples)

[14:10] <svnbot6> r7637 | stevan++ |    - added a number of tests for this as well

[14:12] <svnbot6> r7638 | rafl++ |  r17178@ata:  rafl | 2005-10-16 15:45:31 +0200

[14:12] <svnbot6> r7638 | rafl++ |  Debian:

[14:12] <svnbot6> r7638 | rafl++ |  * Configure with DESTDIR=/usr/lib/haskell-packages/ghc6/ so the paths in the

[14:12] <svnbot6> r7638 | rafl++ |    generated cabal file are correct.

[14:12] <svnbot6> r7639 | rafl++ |  r17179@ata:  rafl | 2005-10-16 16:01:18 +0200

[14:12] <svnbot6> r7639 | rafl++ |  Debian:

[14:12] <svnbot6> r7639 | rafl++ |   * Updated ghc6 dependency for libghc6-pugs-dev.

[14:12] <svnbot6> r7639 | rafl++ |   * Added perl dependency for libghc6-pugs-dev.

[14:12] <svnbot6> r7639 | rafl++ |   * Some minor description improvements.

[14:12] <svnbot6> r7640 | rafl++ |  r17180@ata:  rafl | 2005-10-16 16:03:57 +0200

[14:12] <svnbot6> r7640 | rafl++ |  debian/copyright:

[14:12] <svnbot6> r7640 | rafl++ |   * Added two spaces in front of the pugscode url to prevent some broken tool to

[14:12] <svnbot6> r7640 | rafl++ |     do a wrong line-wrapping.

[14:12] <svnbot6> r7640 | rafl++ |   * Added full text of the BSD license because the BSD license of

[14:12] <svnbot6> r7640 | rafl++ |     src/syck/COPYING differs from the original BSD license.

[14:12] <svnbot6> r7641 | rafl++ |  r17181@ata:  rafl | 2005-10-16 16:08:45 +0200

[14:12] <svnbot6> r7641 | rafl++ |  * debian/rules: various cleanups.

[14:14] *** GeJ_ is now known as GeJ

[14:18] <svnbot6> r7642 | iblech++ | * Usual svn props.

[14:18] <svnbot6> r7642 | iblech++ | * docs/quickref:

[14:18] <svnbot6> r7642 | iblech++ |   * control: Subroutines, named args, positional pairs etc.

[14:18] <svnbot6> r7642 | iblech++ |   * data: Minor fix to the use of that hash() sub.

[14:24] <svnbot6> r7643 | iblech++ | Fixed some tests in t/builtins/ WRT pairs now being demagicalized.

[14:24] <svnbot6> r7644 | iblech++ | * Renamed examples/slurpy-list-parms to slurpy-list-params.

[14:24] <svnbot6> r7644 | iblech++ | * examples/japh/* and examples/output/slurpy-list-params/* are now tested

[14:24] <svnbot6> r7644 | iblech++ |   by t/examples/examples.t.

[15:24] <svnbot6> r7645 | autrijus++ | * larry_mariner.txt: Stanza 3

[15:42] <svnbot6> r7646 | stevan++ | Perl6::MetaModel -

[15:42] <svnbot6> r7646 | stevan++ | * some more work on the parser

[15:42] <svnbot6> r7646 | stevan++ |     - handles very simple parameter lists

[15:42] <svnbot6> r7646 | stevan++ |     - now allows . method invocation and ~ string concat 

[15:42] <svnbot6> r7646 | stevan++ | NOTE: this is still not very robust, mostly just a toy project at

[15:42] <svnbot6> r7646 | stevan++ | this point, however some of this might be adaptable to using PIL

[15:42] <svnbot6> r7646 | stevan++ | output to construct classes

[15:49] *** stevan_ is now known as stevan

[15:53] <spinclad> autrijus: no idea if anyone else has mentioned this...

[15:55] <spinclad> autrijus: in haskell4.xul, p30: parseTest expr "1*2|-3 or 'A'": the -3 shows up as 3 below...

[15:55] <autrijus> thanks, fixed

[15:56] <spinclad> :)

[15:57] <autrijus> spinclad++

[15:57] * autrijus catches up

[15:57] <autrijus> ooh scook0++ # demagicalizing pairs

[16:12] <autrijus> dinner &

[16:49] <svnbot6> r7647 | iblech++ | * Usual svn props.

[16:49] <svnbot6> r7647 | iblech++ | * Misc. test fixes:

[16:49] <svnbot6> r7647 | iblech++ |   * var/autoref.t: Minor test description fix.

[16:49] <svnbot6> r7647 | iblech++ |   * pugsbugs/topic_in_map.t: Test fix (one-char patch) and moved out of

[16:49] <svnbot6> r7647 | iblech++ |     pugsbugs/ as the test passes now.

[16:49] <svnbot6> r7647 | iblech++ |   * pugsbugs/cast_undef_shortcircuit.t: Fixed test expectations,

[16:49] <svnbot6> r7647 | iblech++ |     PIL2JS passes this test now.

[16:49] <svnbot6> r7647 | iblech++ |   * pugsbugs/parsing_bool.t: Test fix (s:g/err/or/)

[16:49] <svnbot6> r7647 | iblech++ |   * pugsbugs/value_alias_readonly.t: Added another test for the readwrite-ness

[16:49] <svnbot6> r7647 | iblech++ |     of $pair.values.  XXX: Should (key => $value).value =:= $value? (See the

[16:49] <svnbot6> r7647 | iblech++ |     test for details).

[16:49] <svnbot6> r7647 | iblech++ |   * pugsbugs/return_in_anonymous_subs.t: Fixed the test (passes under PIL2JS now).

[16:52] <geoffb> *yawn*

[16:53] <geoffb> Morning, all

[16:57] <spinclad> autrijus, would you want Erd{\''o}sing (that is, the acute-umlaut accent) as long as we're abusing Unicode?

[16:57] <spinclad> (please forgive that i haven't tracked down how to type it properly myself!)

[16:57] <integral> "Erdösing"

[16:59] <spinclad> isn't that a simple umlaut?  in hungarian i believe it's a long ö, which they spell with double-acutes

[16:59] <integral> oh, good point, they look too similar too often.  (/me &)

[17:02] <spinclad> what finns would happily spell öö

[17:04] <spinclad> (which is easier to type in latin-1)

[17:13] <svnbot6> r7648 | putter++ | pugs -CPerl5 representation of VRat changed from (2/3) to [2,3].

[17:13] <svnbot6> r7648 | putter++ | So backends can decide how to represent rationals.

[17:13] <svnbot6> r7648 | putter++ | Tweaked PIL2JS to work with the new rep.

[17:13] <svnbot6> r7648 | putter++ | [2,3] was chosen over 2,3 to avoid creating a unique two-part PIL value.

[17:13] <svnbot6> r7648 | putter++ | Example: bless([[2,3]],"VRat")

[17:14] <theorbtwo> Well, in theory, it's o+umlout+accute.

[17:15] <theorbtwo> o􏿽xCC􏿽x88􏿽xCC􏿽x81

[17:15] <theorbtwo> Hm, that didn't work quite right.

[17:16] <theorbtwo> ?eval say "o\x{308}\x{301}";

[17:16] <evalbot_7647> o\x308\x301 bool::true 

[17:16] *** Lopo_ is now known as Lopo

[17:31] <svnbot6> r7649 | putter++ | t/rules/perl5.t broken into 9 bitesized 100-test pieces.

[17:31] <svnbot6> r7649 | putter++ | It is supposed to be a rules test, not to be avoided because it is

[17:31] <svnbot6> r7649 | putter++ | stress testing parser backtracking and backend memory handling.

[17:31] <svnbot6> r7649 | putter++ | PIL2JS code generation now works on all nine files.  Three still

[17:31] <svnbot6> r7649 | putter++ | cause an uncomfortably large bin/js (maybe 4,5 and 8?).  One could

[17:31] <svnbot6> r7649 | putter++ | add backend-specific skips to those files.  Or ideally, figure out

[17:31] <svnbot6> r7649 | putter++ | which specific expressions are blowing up and skip/fix those.

[18:08] * Aankhen`` goes to sleep.

[18:08] <Aankhen``> G'night.

[18:19] <geoffb> Oddly quiet here today.

[18:21] <Juerd> .oO( figlet LOUD ENOUGH? )

[18:25] <geoffb> heh

[18:26] <geoffb> Normally it takes me a couple hours just to read the log from when I go to bed to when I wake up.  I just read two days of logs in an hour and a half . . . .

[18:27] <Juerd> Wow, you read all of it?

[18:27] <Juerd> Admirable

[18:28] * putter toots on horn.  shouldnt be quiet on a weekend at this hour.  toot.

[18:29] * putter forgot key pugs design objective recently.  -Ofun.  nice autrijus slides reminded.

[18:29] <geoffb> Juerd, as long as I've been away no more than 2-3 days (depending on my mood after such a break)

[18:29] <putter> tnx ;)

[18:29] <geoffb> putter, :-)

[18:35] <Juerd> Why does the operating system I wanted to love suck so much?

[18:35] <geoffb> Juerd, ?

[18:35] <coral> it's got the wrong shade of blue as the default color?

[18:36] <Juerd> As I'm cleaning up my Mac mini's hard drive for the partition to be resized and the rest of the drive to be filled with Linux stuff, I wonder why I had so great hopes for OS X

[18:36] <Juerd> I bought a Mac because I had wanted it for years. I wanted to use OS X.

[18:36] <Juerd> And less than a year later, I'm going to install Linux on it because KDE is so much better in many respects.

[18:37] <Juerd> And Debian is so much better at managing a system (esp. upgrades)

[18:41] <rafl> And it always has an up-to-date pugs! 8-)

[18:41] <Juerd> I haven't even compiled anything on my mac yet

[18:41] <putter> rafl++

[18:41] <Juerd> It's too much trouble to get all the pieces in place before doing so

[18:42] <Juerd> I ssh to linux boxes all the time

[18:42] <Juerd> Because the shell environment Apple gives you is so limiting, and I'm too lazy to change that

[18:43] <putter> hmm.. what is infix:^^ ?  (<-- more noise:)

[18:43] <Juerd> putter: logical xor, high precedence

[18:44] <geoffb> Juerd, why is that not ?^ ?

[18:45] <geoffb> Or does logical implicitely get all doubled forms?

[18:45] <Juerd> geoffb: That would be boolean, not logical, although for xor it's probably the same in all respects.

[18:45] <Juerd> $foo ?& $bar evaluates to true or false

[18:45] <Juerd> $foo && $bar evaluates to $bar or false

[18:46] <Juerd> I think ^^ is there for symmetry with && and ||

[18:46] <geoffb> Ah, right, been too long since I reviewed that AES

[18:46] <Juerd> It was missing in Perl 5.

[18:46] <putter> Juerd: thanks :)   http://search.cpan.org/dist/Perl6-Bible/lib/Perl6/Bible/S03.pod  http://dev.perl.org/perl6/doc/design/syn/S03.html

[18:46] <Juerd> I prefer short URLs :)

[18:46] <Juerd> http://tnx.nl/S03

[18:55] <stevan> putter: ping

[18:58] <putter> ponnnnnggg!

[18:59] <stevan> hey putter :)

[18:59] <putter> hey stevan!

[18:59] <stevan> we keep missing one another

[18:59] <putter> adding sugar i see! :)

[18:59] <putter> :(

[18:59] <stevan> yes, kinda sugar,.. just an idea I have had

[19:00] <putter> I'm playing regexp games with my new p5 backend spike.  but only in a controlled environment (a complete prelude)

[19:00] <stevan> nice

[19:01] <putter> kind of painful.  unpack, then repack as something that looks like pil, then unpack that... :(

[19:01] <stevan> ouch

[19:01] <putter> ah well.  makes it much easier to massage the prelude.

[19:02] <stevan> I was going to experiment with parsing PIL structures into classes... any advice?

[19:02] <stevan> I want to make sure it can be folded into PIL-Run

[19:02] <putter> hmm... lets see, think I had some memos for you...

[19:03] <putter> PIL-Run is dead.  long live Perl6::Run::OnPerl5::X1 !  ;)  not really.

[19:03] <stevan> I basically want to help get the MM more integrated into PIL-Run, but I need to come at it from the MM side

[19:03] <putter> right

[19:03] <stevan> LOL

[19:03] <stevan> ok

[19:03] <stevan> P6::R::OP5::X1 it is 

[19:04] <putter> bottom line, pil doesnt have the data to do oo.  lossy.  I tried adding annotations pugs-side, but that proved painful and limiited.  so my best guess is

[19:06] <putter> one should regexp the code before handing it to pugs, add informational annotations on stuff that gets lost in something which doesnt (ie, method _hint_does_xxencodedclassxx(){}) and

[19:07] <stevan> I am not sure I get what you mean

[19:07] <putter> then massage the resulting pil back to something more plausible.  probably want to ignore some bits that pugs does generate, like accessors.

[19:08] <stevan> hmmm, and when is PIL2 supposed to hit the shelves?

[19:09] <putter> the pil for 'class A{does B}'  doesnt mention does'ing or B.  so given p6 code, one regexp's the does'es, and adds an extra  "method _im_a_hint_does_B(){}" which will make it out in the pil, and can be interpreted as "oh, there's a does() going by".

[19:10] <stevan> ah

[19:10] <stevan> I see now

[19:10] <putter> stevan: re when, no idea.  completely no idea.

[19:10] <stevan> autrijus: ping

[19:10] <stevan> (he was around earlier, maybe he is in flight)

[19:11] <mrborisguy> may I ask what PIL stands for?

[19:12] * putter tries to remember...

[19:12] <putter> Pugs Intermediate Language?

[19:12] <stevan> Pugs Intermediate Languages

[19:12] <stevan> yes

[19:12] <mrborisguy> thanks

[19:12] <autrijus> stevan: pong

[19:12] <putter> think "scheme with sematics".  a "kernel language" for pugs.

[19:12] <autrijus> stevan: I'm in amsterdam, but may have to sleep soon

[19:13] <putter> err, s/scheme with/scheme with more/

[19:13] <autrijus> very early (8:30am) tutorial tomorrow

[19:13] <putter> hi autrijus.  liked slides.  looking forward to movie. ;)

[19:13] <autrijus> of RoR... looks intriguing. probably not going to skip

[19:13] <autrijus> putter: sadly I didn't get time to record, maybe I'll have to recycle the oscon one.

[19:13] <mrborisguy> putter: I've never even looked at scheme.

[19:14] <autrijus> the main problem is my two lightning talk (the least well prepared) are the _first_.

[19:14] <autrijus> on the first day morning

[19:14] <mrborisguy> looks like a form of lisp?

[19:14] <stevan> autrijus: you are ahead of schedule as usual :P

[19:14] <stevan> autrijus: we were wondering about PLI2

[19:15] <stevan> autrijus: did you see my recent toy class parser ?

[19:15] <autrijus> I only checked the tests, not the imp, looks healthy

[19:16] <putter> mrborisguy: the core idea is that the user and the compiler want different things from a language (richnesss vs simplicity-even-if-it-costs-clarity).  so one takes the surface langauge (p6), and convert it to a "kernel" language, with just a few orthogonal constructs, which is much easier for compilers and such to deal with.

[19:16] <stevan> I would like to switch it over to PIL, but according to putter OO support in PIL is not there yet

[19:16] <putter> autrijus: eep

[19:16] <mrborisguy> putter: okay... that makes sense.  Thanks for the explanation.

[19:17] <autrijus> there is fake support of OO in PIL, that of course needs to go

[19:18] <putter> my create_class or whatever it was hack can be immediately pulled out.  proved to hard to go down that path (having pugs add annotations), so it's unused.

[19:21] <putter> good night autrijus.  (hint;)

[19:21] <stevan> autrijus: the impl is not as healthy, its one of my quick-n-dirty stream parsers

[19:21] * autrijus smiles

[19:21] <autrijus> yeah, sleep deprivation probably means I shouldn't do this now

[19:21] <stevan> LOL

[19:22] <putter> sucks _starting_ a conference already burned out

[19:22] <stevan> ok, well anytime you want to, I would love to talk PIL2 OO stuff

[19:22] <autrijus> though the idea is instead of BDUF'ing PIL2, instead implement the serialize-BEGIN-time-object thing first

[19:22] <nothingmuch> evening all

[19:22] <stevan> hey nothingmuch 

[19:22] <autrijus> so that a class is composed at begin time

[19:22] <autrijus> and serialized -- as all opaque objects that does not involve external resources can -- into PIL tree

[19:22] <stevan> autrijus: that makes sense

[19:22] <autrijus> for the runtime to pick up even before INIT

[19:22] <putter> in the BEGINing... there was Chaos.pm... and ...

[19:22] <autrijus> putter++

[19:23] <autrijus> and I got some proof of concept sketches

[19:23] <autrijus> but I think I should listen to putter

[19:23] <stevan> yes, you should :)

[19:23] <autrijus> and sleep instead of working it out as I tend to go on :)

[19:23] <putter> I too look forward to a PIL2 conversation.  but clearly not tonight!

[19:24] <nothingmuch> autrijus: you should make some responsible persons ops, so that they can temp-ban you when you need sleep ;-)

[19:24] <putter> lol

[19:24] <autrijus> rofl

[19:24] * nothingmuch needs that too

[19:24] <nothingmuch> let's make a bot

[19:24] <nothingmuch> we'll call it sleep bot

[19:24] * stevan regularly ignore nothingmuch  without the help of a bot ;)

[19:24] <nothingmuch> individuals can opt in to be banned, and opt out

[19:24] <putter> ?nannybot cut me off in 1/2 hour

[19:25] <putter> putter: yes dear

[19:25] <nothingmuch> whenever they mention sleep deprevation, etc

[19:25] <nothingmuch> the bot starts to count down time

[19:25] <nothingmuch> the more frequent the mentions the less time the person has left

[19:25] <nothingmuch> eventually it starts warning the user

[19:25] <nothingmuch> and then it sends him off to bed

[19:25] <nothingmuch> whatdya say?

[19:26] <theorbtwo> nm: Careful, or you'll get voted off the island.

[19:26] <nothingmuch> voted off the island

[19:26] <nothingmuch> ?

[19:26] <stevan> we would need another one for people who talk abotu the $work they should be doing

[19:26] <nothingmuch> aye

[19:26] <nothingmuch> nannybot: i need to work

[19:27] <nothingmuch> nannybot: i need to sleep

[19:27] <nothingmuch> these opt in to "categories"

[19:28] <nothingmuch> anyway, i'm off cycling

[19:28] <nothingmuch> autrijus: good night

[19:28] <theorbtwo> Have fun, nothingmuch.

[19:28] <nothingmuch> grazie, theorbtwo!

[19:29] <putter> then there's the ever useful "tell me what you've done in the 20 minutes since I last asked." ... "now, has that been worth losing 20 minutes of sleep for?" ...

[19:29] <putter> nothingmuch &

[19:30] <putter> are  nor  and infix:!!  gone?  I don't see them in S03.

[19:32] <gaal> whoa, you guys are having fun

[19:32] <autrijus> nite people... at least I got the journal up :) *wave*

[19:33] <stevan> nite

[19:33] <gaal> hi a, bye a.

[19:33] <autrijus> hi g, bye g.

[19:35] <gaal> ?eval %*ENV.perl; # I wonder if this is safe?

[19:35] <evalbot_7649> "\\undef" 

[19:35] <gaal> heh.

[19:39] <theorbtwo> infix:!! ?

[19:39] <putter> ?

[19:39] <gaal> no such op, i think.

[19:39] <putter> once upon a time must have been in Prim.hs.

[19:40] <theorbtwo> I thought so as well, which is why I was surprised that putter expected it in S03.

[19:40] <gaal> In Perl5 it's more or less equivalent to P6's "?". :)

[19:40] <putter> ;)

[19:40] <theorbtwo> That's prefix:!!, gaal...

[19:40] <putter> hmm... putter goes to check if its a prefix/infix transcription error...

[19:40] <gaal> hmm, indeed.

[19:41] <theorbtwo> Was there an infix !! standing in for half of the trinary ?? !!

[19:42] <putter> no, predates that.

[19:42] <gaal> it meant... xor or something?

[19:42] <putter> is/was there a prefix:<!!> ?   (ok, putter goes off to check Prim.hs)

[19:43] <theorbtwo> AFAIK, it's just a double application of prefix !.

[19:43] <putter> not there now.  fine.   commented out.

[19:44] <Juerd> Well, !! is part of ?? !!

[19:44] <Juerd> And very probably without ??, !! should be disallowed, to avoid terrible confusion.

[19:44] <Juerd> This does not take away a feature, because booleanification can now be done with ?

[19:55] <revdiablo> And using !! for booleanification is borderline obfu anyway, even if it's a common idiom

[20:02] * putter wonders if the perl6 "periodic table of operators" has been updated recently...

[20:20] <wolverian> what do private instance variables look like nowadays? $:foo or $_foo or $._foo?

[20:23] <gaal> $:

[20:27] <wolverian> and private methods are _foo? (I thought Larry was thinking that)

[20:28] <gaal> don't know

[20:29] <wolverian> okay, thanks

[20:36] <wolverian> http://chronoa.dy.fi/~wolverian/hq9+.perl6.txt (wikipedia for HQ9+ if you're not familiar with it :)

[20:36] <wolverian> comments welcome

[20:37] <wolverian> (particularly the run method looks like java)

[20:38] <rafl> Heh :-)

[20:40] <gaal> heheh.

[20:41] * wolverian wonders why everyone is chuckling

[20:41] <gaal> "Following the principle of information hiding, it is not possible to access this object."

[20:42] <gaal> this reminds me of an old April issue of Dragon

[20:42] <gaal> it had a compendium of useless spells

[20:42] <wolverian> right - maybe I should add a HQ9++ subclass

[20:42] <gaal> my favorite: "Undetectable Runes"

[20:42] <wolverian> could this go as an example into pugs, or does it need to run?

[20:42] <wolverian> (I can remove the typing and a few other things and it will run)

[20:42] <theorbtwo> Don't remove things from the examples so that they run.

[20:43] <theorbtwo> Add features to the compiler so that they run instead.

[20:43] <gaal> you know, when my mind was on esoteric languages i wanted to write an Interpreter role

[20:44] <gaal> to unify the basic stuff for l33t and Mondrian and ZT

[20:44] <gaal> (etc.)

[20:44] <wolverian> gaal, that sounds like a good idea - although maybe it needs a role hierarchy if they don't all fit into one rough role category?

[20:44] <gaal> you can, for example, implement the first debugger for HQ9+.

[20:44] <wolverian> theorbtwo, good point.

[20:45] <gaal> could be :)

[20:45] <gaal> but I'm off to sleep now :)

[20:45] <gaal> bye bye!

[20:45] <wolverian> gaal, heh :) well, sketch out the interface and I'll make HQ9Plus conform

[20:46] <wolverian> oh, and good night

[20:47] <gaal> zzZZZ &

[20:56] <svnbot6> r7650 | iblech++ | t/syntax/pairs.t: Guarded a test by try{} (necessary because otherwise, PIL2JS

[20:56] <svnbot6> r7650 | iblech++ | would abort early (as it respects the + in a (+$foo) subroutine signature)).

[21:02] <svnbot6> r7651 | iblech++ | * Usual svn props.

[21:02] <svnbot6> r7651 | iblech++ | * Added the usual she-bang lines to the non-trivial examples and non-JAPHs etc.

[21:02] <svnbot6> r7651 | iblech++ |   of examples/.

[21:02] <svnbot6> r7651 | iblech++ | * examples/cookbook/01strings/01-03exchanging-values.p6:

[21:02] <svnbot6> r7651 | iblech++ |   Answered the question "could ::= be used here"?

[21:19] <putter> &

[22:12] * theorbtwo ponders...

[22:12] <theorbtwo> What's the status of perl6's webish libraries?

[22:13] <theorbtwo> How hard is it to mix with good continuations?

[22:13] <theorbtwo> Hmm, I need to continue with filehandles, too...

[22:13] <theorbtwo> Perhaps I need some sort of client-server thing going on even at that level.

[22:13] * theorbtwo wonders if anybody but him is awake.

[22:18] <joao> theorbtwo: hello

[22:18] * joao smiles

[22:18] <theorbtwo> Hello, joao.

[22:19] <theorbtwo> I'm considering writing a web-based frontend to nethack.

[22:19] <joao> I don't know how to answer, sorry :)

[22:20] <integral> hmm, need a perl6 level for nethack ;-)

[22:21] <coral> theorbtwo: there's a port of the door game LoRD to the web somewhere that might offer some useful code to work with

[22:21] <coral> legend of the green dragon, i think it was called

[22:21] <coral> a key-controlled ascii art game translated to Web/JS stuff

[22:22] <theorbtwo> Well, I can use nethack-lisp's modifications to nethack, so I don't have to write my own.

[22:22] <coral> oh, neat

[22:22] <theorbtwo> (I have to parse it's mostly-lisp output, but that should be easy.)

[22:22] <coral> nethack-lisp has a webui?

[22:23] <theorbtwo> I'm just wondering how to do it as a repeatedly-called CGI.

[22:23] <theorbtwo> nothingmuch, nethack-lisp outputs something that's mostly lisp, and expects some simple input.

[22:23] <theorbtwo> Damn broken autocompletion!

[22:23] <theorbtwo> I typed no comma, not nothingmuch comma.

[22:24] <theorbtwo> I can attach to that with perl6 and make whatever I like.

[22:24] <theorbtwo> What I wonder is how to keep the end-user talking to the same game across multiple requests.

[22:25] <coral> to avoid duplicate keystrokes out of place with state

[22:25] <coral> you have to include a uuid

[22:25] <theorbtwo> Oh, that's not the problem I'm wondering about.

[22:25] <coral> o

[22:25] <coral> when the user requests the cgi, do they then display the returned content?

[22:27] <theorbtwo> How do I pass the fh pair to the nethack-lisp process from the one CGI to the next?

[22:27] <theorbtwo> That's my thinking, coral, more or less.

[22:27] <coral> hmmmmmm.

[22:27] <coral> because it's not efficient to save and resume the game each time

[22:27] <integral> screen?

[22:28] <coral> keep a local daemon with a bunch of nethack process fh's

[22:28] <coral> and then have the cgi communicate keystrokes to and request new updates from the process associated with the user's uid

[22:28] <theorbtwo> integral: Talking with screen is a huge mess.  That was my last abandonded project.

[22:29] <coral> if you implement ncurses in js you can just record the raw tty output of nethack after each keystroke and then send it to the browser

[22:29] <integral> ah.  well you want something like that.  I remember the expect book from o'reilly had one years ago

[22:29] <theorbtwo> Yeah, coral, that was my first thought.  I was wondering if there might be a simpiler method.

[22:29] <coral> alternately, instead of passing fh you can name sockets on disk by uuid and then communicate directly with them

[22:29] <integral> if you implement parrot in js, and get a c->parrot compiler going, you can just run nethack in the browser... :-P

[22:29] <theorbtwo> Hm, I could implement my own simple web server.

[22:29] <theorbtwo> Hm, that's an idea.

[22:30] <theorbtwo> Coral's, I meant.

[22:30] <coral> yeah, with th eoption to compile parrot to JS you've got all sorts of nifty stuff open to you

[22:30] <coral> does the OS support detaching/reattaching to FHs?

[22:31] <svnbot6> r7652 | wolverian++ | Add an HQ9+ example implementation to examples/

[22:31] <theorbtwo> coral: No, I don't think so...

[22:31] <theorbtwo> I really don't understand sockets and named pipes and psudottys, and all that jazz...

[22:32] <coral> pseudottys are addressable on filesystem

[22:32] <theorbtwo> I seem to recal years ago having what seemed like a good book that had that sort of thing, but I don't have it anymore...

[22:32] <coral> sockets and named pipes differ in the sense that one has a filename

[22:32] <coral> pseudottys have the additional benefits of being tty sockets and not just normal sockets, which doesn't mean anything to me

[22:33] * coral knows not of this stuff

[22:33] <integral> ttys support termio ioctls, are isatty, and can be set as the controlling tty for POSIX process control

[22:33] <integral> but once the master side closes, you can't reconnect.  you'd need a daemon which held that open, and then passed the FD over a LOCAL/UNIX/POSIX domain socket to whoever wanted to use it

[22:34] <integral> (or proxied, between a FIFO/socket and the tty)

[22:34] <coral> if cgis called a socket open function that routed all socket open calls through the master process

[22:34] <coral> then you could have the webserver control all sockets and handle IO requests by the CGI processes that way

[22:34] <theorbtwo> integral, where did you learn this stuff?

[22:35] <integral> hmm, _Advanced Programming In The Unix Environment_ got me started,  but for the intricaces of the POSIX process control stuff I ended up source diving on Linux

[22:35] <integral> *intricacies

[22:36] <joao> integral++

[22:36] <joao> :)

[22:36] <integral> and I've only seen passing FDs over sockets once in a paper on using FDs as capabilities, to build a capability system over UNIX.

[22:39] <theorbtwo> Do you have a suggestion for the implementation?

[22:40] <integral> I guess I'd just go with a UNIX domain socket or a FIFO to listen for the CGI script, one daemon process managing 1 or more nethacks

[22:41] <integral> (does p6 have anything as easy to use for this as POE::Wheel::Run?)

[22:47] <theorbtwo> integral: Since my only clients are also written by me, and I don't think I need to worry about terribly slow nethack processes, I think I'm OK doing it the more or less obvious way.

[22:47] <integral> *nod* it'll be fun, and the perl6 bit will run the slowest :-)

[22:59] * theorbtwo wonders if pugs has that many docs that pugs-doc is worth it as a seperate package.

[23:00] *** joao is now known as bracaman

[23:00] *** bracaman is now known as joao

[23:03] <theorbtwo> apt-get++

[23:03] <joao> :)

[23:16] <Juerd> theorbtwo: Seperability is a good reason for separation.

[23:17] <Juerd> s/per/par/

[23:18] <rafl> theorbtwo: 1.7MB of architecture independent data. 17MB if they were in the arch-dep packages.

[23:18] <rafl> theorbtwo: I think that justifies a seperate package.

[23:19] <theorbtwo> OK.

[23:19] <rafl> (~10Archs currently in Debian)

[23:20] <theorbtwo> I didn't consider that multiplier.

[23:21] <rafl> theorbtwo: Beside that: Maybe someone only want's to use pugs for an application or so. Then he won't need the docs and will not be forced to install them.

[23:21] <Juerd> I installed kubuntu on my mac today

[23:21] <Juerd> It feels good to have something with apt-get instead of that osx crap

[23:22] <Juerd> For now: zz

[23:22] <Juerd> Good night

[23:22] <rafl> Bye Juerd 

[23:24] <theorbtwo> Hm, I'm going to wander off for a bit, and hope a map coeleses in my mind.

[23:42] <geoffb> nothingmuch, ping

[23:42] <geoffb> rafl, good choice to separate doc into separate package, btw.

[23:42] <ingy> seen autrijus

[23:42] <jabbot> ingy: autrijus was seen 4 hours 9 minutes 42 seconds ago

[23:43] <rafl> Well, modules are also seperated to keep the archive small.

[23:43] <geoffb> ingy, aut* is trying to get some shut-eye, because he is burnt and has to give 2 unprepared lightning talks first thing tomorrow morning

[23:43] <geoffb> rafl, nodnod

[23:44] <rafl> geoffb: Mostly stolen from the perl package, though.

[23:44] <geoffb> rafl, ?

[23:44] <geoffb> oh, following the same decisions, you mean?

[23:45] <rafl> geoffb: Yes. the perl source package produces: libperl5.8, perl-base, perl-modules, libcgi-fast-perl, perl-suid, perl-doc, perl-debug, libperl-dev, perl. We don't need pugs-base because it's not needed for the Debian base installation (yet :-) and no -suid or -debug version.

[23:46] <geoffb> nodnod

[23:46] <rafl> geoffb: The libperl* stuff is in libghc6-pugs-dev in our case.

[23:46] <geoffb> rafl, gotcha

[23:47] * rafl reduces the output of non-helpful information

[23:49] <ingy> geoffb: thx

[23:49] <geoffb> ingy, np

[23:50] <geoffb> rafl, do you understand the m68k comment under "Testing Status" on http://packages.qa.debian.org/p/perl.html ?

[23:50] <geoffb> Does that mean that out of date on m68k will not prevent a move to testing?

[23:51] <rafl> That's also what I thought. But I don't know about that fact. http://bjorn.haxx.se/debian/testing.pl?package=perl also doesn't mention it.

[23:52] <rafl> I think m68k is still preventing it from entering testing.

[23:52] <geoffb> ARM has been holding it back for a long time.

[23:53] <rafl> And not only perl.

[23:53] <rafl> m68k and arm are known to be major blockers for lots of packages.

[23:55] * geoffb is conflicted: I love that Debian and NetBSD push OSS authors to be very portable.  I *HATE* that m68k and ARM slow down Debian's progress

[23:56] <rafl> Well, can the development progress in Debian really be slower? :-)

[23:56] <geoffb> I dunno.  But without this block, it could be faster.  :-)

[23:56] <rafl> I still think that it's a good thing to support lots of arches. But lots of them will be droped until or after etch anyway..

[23:57] <rafl> I think it will be focused on i386, ppc, amd64, ia64 officially. Other's will be not official but get support and stuff. They just won't be released at the same time as the other "official" archs.

[23:58] <geoffb> rafl, do tell.  I've not been able to keep up with Debian news of late.

[23:58] <rafl> At least if I remember it right.

[23:58] <geoffb> Oh, the staggered release idea was approved?

[23:59] <rafl> I'm not sure. But I think it will if it isn't already.

