[00:01] <rep> why?

[00:01] <Juerd_> It spasm

[00:01] <Juerd_> spams too

[00:02] <Juerd_> This is why I hate the oplessness of freenode channels.

[00:02] <Juerd_> It doesn't encourage spreading op-rights to cover multiple time zones

[00:02] <Khisanth> well it usually isn't truely opless, just appears that way

[00:02] <Juerd_> And when something happens, nobody knows who is able to handle it.

[00:03] <Juerd_> Khisanth: I know that.

[00:03] <Juerd_> But there are very practical reasons to have ops carry a visible mark.

[00:03] <Juerd_> I know that these advantages do come with disadvantages

[00:04] <Juerd_> But having been an op in several channels for almost a decade, I have only experienced such denial of service attacks at most five times.

[00:04] <Juerd_> So I don't really see how this single pro can outweigh the huge cons

[00:06] <Khisanth> that pro is irrelevant with cloaks anyway

[00:06] <Juerd_> That's true too

[00:06] <Juerd_> Then I see no remaining reasons to hide opness

[00:13] <Juerd_> afk  # z

[00:59] *** knewt_ is now known as knewt

[01:29] <buu> Juerd_: Er, my understand behind the op hiding is that is discourages users from attempting to provoke ops, treating them differently, and so on

[02:03] <Khisanth> buu: you forgot cower in fear

[02:07] <buu> Khisanth: Or that, I suppose.

[04:17] *** SamB is now known as Melchior

[04:17] *** Melchior is now known as SamB

[07:05] <geoffb> Good $time, nothingmuch 

[07:07] <nothingmuch> hola

[07:08] <nothingmuch> que pasa?

[07:08] <geoffb> hacking on gjbforth

[07:08] <geoffb> and you?

[07:12] * geoffb smacks his virtual forehead: split and splice are *not* the same, duh ...

[07:15] <nothingmuch> err, sorry, didn't notice activity

[07:15] <nothingmuch> lots of catalyst work lately

[07:16] <nothingmuch> rewrote session and authentication stuff

[07:16] <nothingmuch> making a movie

[07:16] <geoffb> So I've seen . . . congrats

[08:08] * geoffb mumbles something about "cursed DO LOOPs" and wanders off to bed

[08:19] *** Aankh|Clone is now known as Aankhen``

[08:47] <Juerd_> buu: Exactly treating ops differently is a good thing, not a bad thing.

[08:48] <Juerd_> buu: And provoking ops is a problem that solves itself, because the op gets angy and rids the channel of the provoker.

[08:49] * integral suggests that the lack of ops is not a result of the hiding policy, but rather

[08:49] <integral> that people who only have op powers can't give more people op powers

[08:50] <Juerd_> It's a combination.

[08:51] <Juerd_> If someone wants to complain about the channel, they should talk to ops. An often heard complaint is that there are no ops in a certain time span. This is then fixed by spreading +o bits.

[08:52] <Juerd_> However, both the complaining and the raising of power are impossible here.

[08:52] <Juerd_> Complaining because the average visitor has no idea who to turn to.

[08:52] <integral> hrm, I don't really understand complaints

[08:52] <Juerd_> And in fact, even analysis of the problem is impossible, because one doesn't *know* if there are any ops around in a certain time.

[08:53] <integral> actually it's totally false that you can't get a list of the ops.

[08:53] <Juerd_> Enlighten me

[08:53] <integral> just ask chanserv for the access list

[08:53] <Khisanth> autrijus, hcchien and obra :)

[08:54] <integral> who all have the power to make more ops :)  So looks like it's their fault...

[08:54] <Juerd_> So

[08:54] <Juerd_> If this is possible, then why the fuck is it hidden in IRC-land?

[08:55] <integral> because this isn't IRC-land!  That's why it's all run with services, rather than traditional IRC mechanisms

[08:55] <Juerd_> I hate freenode.

[08:55] <Khisanth> :)

[08:55] <integral> this isn't a traditional IRC network, blah blah, it's your fault for being too traditional, blah blah, lilo is God, blah blah :) </summary>

[08:55] <Juerd_> fscking morons.

[08:56] <GeJ> what a weird name for a mount point...

[08:56] <Juerd_> Lilo should be keelhauled the very next time he sends a global message that wasn't necessary.

[09:09] <buu> hahaha

[09:10] <buu> I agree, every time lilo sends an unecessary global message, at least 3 electrons lose their lives.

[09:10] <buu> integral: (just a note, it's impossible to get a list of ops in, say, #perl, for example)

[09:11] <integral> I know :)  I was just hoping everyone else didn't ;)

[09:11] <buu> Heh

[09:17] <gaal> is $=POD specced (or however it's spelled)?

[09:22] <Khisanth> seems to be the only one like that

[09:24] <r0nny> moin

[09:41] <r0nny> yo

[09:41] <r0nny> i got a problem with the metod dispatcher

[09:42] <r0nny> for some reason it puts itdelf into a endless loop, where it should call a method of a class attribute, wich got a method with the same name

[09:47] <r0nny> anyone got an idea how to deal with this ?

[10:22] <r0nny> amyome ?

[11:16] <r0nny> does pug have a way, to ask for the full path of the actual script 

[11:29] <scook0_> r0nny: not that I'm aware ... I assume $?FILE is not good enough for your needs

[11:31] <scook0_> (you could theoretically append $?FILE to pugs' initial working-directory, as a hacky solution)

[11:31] *** scook0_ is now known as scook0

[11:32] <scook0> r0nny: btw, are you still having dispatch troubles?

[11:33] <r0nny> re

[11:33] <r0nny> scook0: yeah

[11:33] <r0nny> atm i tryed to solve them with method renaming

[11:33] <scook0> have you checked the parse tree, to make sure it's parsing correctly?

[11:34] <scook0> (I ran into parsing-related method-call problems a while back...might still be some bugs)

[11:37] <scook0> also, AFAIK pugs just uses the relative file path internally (if one is given), so you would need to reconstruct the full path on the inside anyway

[11:38] <r0nny> hm

[11:38] <r0nny> btw - is it possible, to make parrot run haskell code ?

[11:46] <scook0> r0nny: well, I imagine it should be possible to make Haskell functions callable from C using FFI, then use whatever FFI Parrot has to call these functions

[11:46] <scook0> but I'm not an expert on any of these topics :|

[11:47] <r0nny> it might be usefull to have pugs itself run in parrot, and then slowly migrate from the haskell implementation to the perl6 implementation

[11:49] <r0nny> btw - does parrot support c++ bindings ?

[11:51] <scook0> I don't know ... you could always try asking #parrot

[11:54] <SamB> r0nny: you could do what Haskell users do

[11:54] <SamB> and write C-callable wrappers

[11:54] <scook0> I think other people have had similar ideas about migration -- what with the Prelude being written in P6 and all

[11:54] <r0nny> SamB: writing c-callable wrappers for komplex stuff is HUGE paine

[11:55] <SamB> r0nny: which is why you autogenerate them

[11:56] <r0nny> there are generators ?

[11:56] <scook0> although interfacing with c++ directly can be painful too

[11:57] <r0nny> scook0: jep - there is written huge paine in the inside of name manglers, and uncatched exceptions

[11:58] <scook0> because those things aren't as stable/portable as plain C calling conventions, right?

[11:58] <r0nny> they are not as portable

[12:03] *** bradb_ is now known as bradb

[12:34] <pmurias> there has been some talk about swig and parrot on perl6-internals in the past

[12:36] * fglock writes a p6 parser in p5

[12:36] <fglock> just for fun

[12:38] <pmurias> fglock:What tools are you using?

[12:40] <fglock> pmurias: it's a barebones thing - just plain perl

[12:42] <fglock> I'm looking for examples of the difficult parts - will look at t/

[12:43] <r0nny> re

[12:44] <pmurias> re == regular expresions ?

[12:51] <r0nny> pmurias: re just means im back

[13:06] <GeJ> pmurias: regular expressions do not exist. They never existed. Rules is what you're looking for.</jedimindtrick>

[13:08] <nnunley> r0nny:  Haven't gotten the rest of the story, but I believe there's a PMC in parrot called NCI (native call interface)

[13:14] <pmurias> GeJ: is there a two letter [acronim?] for rules, like rx is for 'regular' expressions

[13:24] <scook0> pmurias: well, I believe the syntax for a rule literal is `rx/.../`

[13:25] <scook0> (see the relevant Synopsis -- the expansion is 'rule expression' IIRC)

[13:49] <fglock> I have a working parser - I wonder if it belongs to /misc (there is a message there about moving things to freepan)

[14:38] <autrijus> fglock: that message is gone

[14:38] <autrijus> it does belong in misc -- extra points for a new ext/ README

[14:39] <autrijus> er I mean a misc/README

[14:39] <autrijus> (just committed a ext/README)

[14:39] * autrijus finally finished the three $job assignments... plane to .au is tomorrow

[14:41] <svnbot6> r8026 | autrijus++ | * Throw away throw_away/ now parrot/t/compilers/pge/p5regexp is there.

[14:41] <svnbot6> r8027 | autrijus++ | * Remove the no-longer-relevant misc/PORTING_HOWTO.

[14:41] <svnbot6> r8028 | autrijus++ | * Moves misc/README to ext/ and reword it significantly;

[14:41] <svnbot6> r8028 | autrijus++ |   misc/ will need its own README too...

[14:41] <fglock> autrijus: thanks

[14:41] <autrijus> g'nite for now... tomorrow would be the massive backlogging day :)

[14:41] <autrijus> fglock: np :) 

[14:45] <rafl> Juerd: ping

[14:52] <rafl> ingy_: ping

[15:10] <svnbot6> r8029 | kane++ | * add open issues

[15:16] <svnbot6> r8030 | kane++ | * damn you rangerrick

[15:23] <Juerd> rafl: pong

[15:24] <rafl> Juerd: I will do a perl 6 hacking workshop on GPW. Can we use feather as the hack box?

[15:24] <Juerd> rafl: Of course

[15:24] <Juerd> rafl: Just realise it won't handle more than three compiles at the same time :)

[15:24] <Juerd> Normally, timezones fix this ;)

[15:24] <rafl> Juerd: May I add accounts for the participants during the workshop? I'll remove them afterwards.

[15:24] <rafl> Juerd: We want to use pugs, not compile it.

[15:25] <rafl> We want to do perl 6 in practice. Port modules of the participants to p6, etc.

[15:25] <Juerd> rafl: Under the usual terms: I need realname and mail address

[15:25] <Juerd> rafl: And they can of course keep them after the GPW if you want.

[15:26] <Juerd> rafl: If everything goes according to plan, I'll be at th egpw myself, and perhaps I can do a short talk about feather before your workshop

[15:26] * kane_ waves at vasi

[15:26] <Juerd> Then they know what they're using, and are hopefully already motivated to request an account

[15:26] <vasi> hi again kane :-)

[15:26] <kane_> w00t, my first stalker :)

[15:26] <rafl> Juerd: OK.

[15:26] <rafl> Hello kane_, vasi.

[15:26] <vasi> heh

[15:26] <Juerd> rafl: Are you a GPW organizer?

[15:27] <Juerd> rafl: Or should I mail someone?

[15:27] <kane_> vasi: more p6 people here, and by proxy sixpan folks (like rafl)

[15:27] <rafl> Juerd: I organize it.

[15:27] <Juerd> rafl: Then hereby I submit this talk idea ;)

[15:27] <rafl> Juerd: Hm..

[15:27] <rafl> Juerd: Please do that at the beginning of my workshop.

[15:28] <Juerd> Whatever fits in the schedule. I'm very flexible :)

[15:28] <rafl> Juerd: Well, it's a bit late for new talk submissions, btw.

[15:28] <kane_> vasi: adding all your rantings to the S22 draft now :)

[15:28] <Juerd> I think at the beginning of your workshop is a good time, because then they can *immediately* put it to use :)

[15:28] <vasi> kane, so yeah anyhow i'm not saying the naive approach is a bad start

[15:28] <vasi> just that you have to be very very careful that you don't get stuck with it

[15:28] <rafl> Juerd: And they need it for the workshop. We don't have a local server that can be used as hack box.

[15:29] <kane_> vasi: our current dependendy engine (cough) already takes roughtly the arguments it should for the smart version too

[15:29] <rafl> I doubt that binary modules will be used very much, btw.

[15:29] <vasi> kane, i have a module as part of Fink that does a bit of the basic "here's a system state, what's wrong with it?" work

[15:29] <rafl> It's a good thing, though.

[15:30] <kane_> vasi: point me at the code?

[15:30] <vasi> yup, doing that

[15:30] <vasi> http://cvs.sourceforge.net/viewcvs.py/fink/fink/perlmod/Fink/SysState.pm?rev=1.6&view=auto

[15:30] <Juerd> I need a power outlet.

[15:30] * Juerd wants power-over-wifi :)

[15:30] <vasi> it's not well tested, and doesn't do much resolution, just detects problems

[15:31] <vasi> and it's dpkg-specific

[15:31] <kane_> vasi: it's the thought that counts :)

[15:31] <rafl> Juerd: I order 10 of them if you've developed it.

[15:31] <vasi> kane, well i built it just to play around with different dep engine ideas

[15:31] <vasi> so i could have an algorithm do some operations, see what broke

[15:31] <Juerd> rafl: You're on the list now ;)

[15:32] <rafl> Juerd: On the top of it, I hope! :-)

[15:32] <svnbot6> r8031 | kane++ | * add vasi's suggestions about the dep engine

[15:32] <kane_> vasI; a sane start surely... 

[15:32] <vasi> the only actual resolution is in 'resolve_install', to work around a dpkg bug

[15:32] <kane_> oh god, you are watching me!

[15:32] <Juerd> rafl: I use *IRO

[15:32] <Juerd> Any way in, random out.

[15:33] <vasi> it's complicated compared to the naive approach, but simplistic compared to a real dep engine :-)

[15:33] <vasi> kane, i also highly recommend you take a look at the code for smart.pm

[15:33] <vasi> SmartPM

[15:33] <vasi> whatever :-)

[15:33] <kane_> the python one, right?

[15:33] <Juerd> rafl: "I've added you to the set" doesn't sound wel :)

[15:33] <vasi> it's in python, and it's badly documented

[15:33] <rafl> Juerd: What did Sven say, btw?

[15:33] <vasi> but it's still worth looking at

[15:33] <kane_> vasi: tbh, i'm happy with a minimal approach that Works (tm) and have teh people with clue fixing up the parts Real Good

[15:33] <vasi> i think it was transaction.py or policy.py that had the basic stuff

[15:33] <Juerd> rafl: "yep... you're already on my list!"

[15:34] <vasi> kane, yeah just something to be aware of as you move forwards

[15:34] <rafl> Juerd: Great. Any news from your client?

[15:34] <kane_> vasi: *nods* adding all this stuff to the pod, as you'll seen in a few mins :)

[15:34] <Juerd> rafl: And he mentioned traveling by train, but I'm not too comfortablewith that, because I don't like trains

[15:35] <rafl> Juerd: You can hack while driving. That's hard by car.

[15:35] <vasi> yeah, so all i'd do at this point is have a _dep.pl with an opaque API, to make sure you don't introduce ugly side effects

[15:35] <kane_> vasi: anything else in the prototype that made youw onder? :)

[15:35] <Juerd> rafl: No - I sent the first reminder yesterday. Next one tuesday, phonecall friday.

[15:35] <vasi> kane, looking

[15:36] <Juerd> rafl: I know it's practical to move by train -- except for baggage (I should not carry heavy stuff)

[15:36] <rafl> Juerd: OK. Let's hope you get your money until chrismas.

[15:36] <Juerd> It'd be nice to have it before christmas. Otherwise, no presents for family.

[15:36] <rafl> Juerd: Well, a laptop and coffein is enough for *C3.

[15:36] <kane_> damn, time's flying

[15:36] <kane_> 4:30 already

[15:36] <Juerd> rafl: air mattress

[15:37] <rafl> Juerd: A sleeping bag is enough. But with enough coffein you won't need that.

[15:37] <svnbot6> r8032 | kane++ | * add vasi's comments about a 'smart' dependency engine

[15:37] <vasi> where's the alternatives code at?

[15:38] <kane_> hardcoded in install.pl/uninstall.pl

[15:38] <kane_> this is 'perl-style', not debstyle btw

[15:38] <Juerd> rafl: In any case, there are still other reasons for avoiding the train - some of which I won't mention, because they're overly silly.

[15:38] <rafl> Come on.. entertain us with silly reasons..

[15:40] <Juerd> Heh

[15:40] <vasi> it doesn't really deal with changing alternatives or anything yet

[15:40] <kane_> vasi: it does, 'perl-style'

[15:40] <kane_> see =head1 Alternatives in the pod file

[15:41] <vasi> uh, unless i'm missing something, install.pl is just unconditionally linking them?

[15:42] <kane_> see install.pl line 95 and 105

[15:42] <kane_> and 117 -- which will cancel linking if needed

[15:43] <vasi> yeah, my brain must be damaged today, yeesh

[15:43] <rafl> kane_: I'll start with porting the current prototype to something more modular and pluggable now, OK?

[15:43] <kane_> ralf: sure.. i'm not fast enough today i think :)

[15:44] <kane_> i'll code on a meta.inf -> perl-object thing onw.. that's fast and easy

[15:44] <rafl> s/ralf/rafl/ :-)

[15:44] <kane_> flrarghn!

[15:44] <rafl> "meta.inf -> perl-object" -v

[15:44] <kane_> oh, no ugly hashes that can't be verified, but a decent object that can be extendend and queried

[15:45] <rafl> OK

[15:45] <vasi> hmm...so if a package isn't 'preferred' at install time, it just doesn't register alternatives at all?

[15:46] <kane_> exactly

[15:46] <Juerd> Wha - traveling to Berlin by train (and back) costs EUR 167.80

[15:46] <rafl> Wow..

[15:47] <vasi> kane, that doesn't sound right, unless i'm confused as to what alts are supposed to be about

[15:47] <kane_> vasi: there should probably be an 'update alternatives' script that can do this Later One

[15:47] <vasi> seems very assymetrical

[15:47] <kane_> vasi: alts are different from debian alts.. did you check the pod?

[15:47] <svnbot6> r8033 | fglock++ | * misc/Parser-Mini - experimental 'thin' p6 parser

[15:47] <svnbot6> r8034 | kane++ | * add dir structure

[15:47] <svnbot6> r8034 | kane++ | * touch Meta.pm file

[15:48] <vasi> kane, i see that the rules are different

[15:48] <vasi> ie: the flow chart

[15:48] <vasi> but i'm not sure WHY

[15:48] <kane_> vasi: we allow multiple versions of a package to be installed

[15:48] <kane_> they both will probably come with teh same script, at least the same manpage

[15:48] <vasi> yeah, that's ok

[15:48] <kane_> but only one can be the 'official' version to the OS

[15:49] <vasi> but shouldn't they all at least be registered as providers of the alt?

[15:49] <kane_> so we link that one to /usr/bin and /usr/man

[15:49] <vasi> and then the policy engine chooses from all the providers

[15:49] <kane_>                             ### XXX this should be a policy test!

[15:49] <kane_> i think that's what hte comment says :)

[15:50] <vasi> oh i see why we're confused, your idea of 'registering' an alternative is very different from mine

[15:50] <vasi> for this system, alts are ONLY for different versions of the same package

[15:50] <kane_> who was it again taht said (overloaded terminology)++ ? :)

[15:50] <kane_> exactly

[15:50] <vasi> ok, i thought that was IN ADDITION

[15:50] <kane_> which means we probably need another name

[15:50] <rafl> kane_: What will your META.pm do? I currently want to write JIB::Config which also deals with META info a bit.

[15:51] <kane_> rafl: translates the contents of META.info to a queryable object

[15:51] <kane_> rather than a stupid hash

[15:51] <rafl> kane_: OK. You will need the JIB::Config for that, won't you?

[15:52] <kane_> rafl: don't think so.. but maybe i misunderstand your purpose

[15:52] <vasi> kane, alright looks pretty good otherwise, at least to my cursory inspection :-)

[15:52] <kane_> vasi: thanks for your stamp of approval :)

[15:52] <kane_> vasi: and if you want a comitter bit for the dep engine... ;)

[15:53] <rafl> kane_: Do you deal only with META.info contents or also with opening the files, etc?

[15:53] <vasi> heh, got enough work on my plate at the moment :-/

[15:53] <kane_> rafl: opening the file too.. given file location of META.info, feed it to yaml, parse, evaluate, sanity check, etc

[15:54] <vasi> kane, is the next version (modularized, what you're working on now) intended for use?

[15:54] <kane_> vasi: yes

[15:54] <rafl> kane_: OK, so you won't need the META.info filename. No need for JIB::Config first.

[15:54] <vasi> kane, great

[15:54] <kane_> rafl: i think so too.. basic parts first -- we need a config too obviously :)

[15:54] <rafl> So I'll do JIB::Config now.

[15:54] <vasi> i eagerly await the chance to break it :-)

[15:55] <kane_> vasi: eh.. thanks.. i guess ;)

[15:57] <kane_> rafl: i'm adding basic files like JIB.pm for $version and a makefile.pl too

[15:57] <rafl> kane_: Hm. The current config does a lot wrt dep handling/package name parsing, etc. I think that should be JIB::Package.

[15:57] <rafl> kane_: OK.

[15:58] <rafl> kane_: My config will only export some fixed values. The rest will be in another package.

[16:00] <kane_> sec, phone

[16:05] <rafl> kane_: What's files.list for?

[16:10] <lollan> hello

[16:10] <rafl> Hello lollan 

[16:10] <lollan> :)

[16:11] <svnbot6> r8035 | rafl++ |  r22573@ata:  rafl | 2005-12-01 17:10:06 +0100

[16:11] <svnbot6> r8035 | rafl++ |  * Added a first JIB::Config version.

[16:11] <lollan> so the new version of perl is out !

[16:11] <lollan> i did'nt know since know

[16:11] <lollan> lol

[16:11] <svnbot6> r8036 | rafl++ |  r22574@ata:  rafl | 2005-12-01 17:10:47 +0100

[16:11] <svnbot6> r8036 | rafl++ |  * Fixed a syntax error

[16:11] <lollan> !tutorial

[16:13] <rafl> lollan: Actually perl 6 isn't out yet.

[16:14] <PerlJam> lollan: The current implementation of perl6 is called pugs and it's mostly a proof-of-concepts implementation in haskell.

[16:14] <lollan> ok

[16:14] <PerlJam> lollan: pugs is not *the* perl6 compiler

[16:14] <lollan> ok

[16:15] <rafl> But it's a nice toy, though.

[16:15] <lollan> thanks everibody

[16:15] <PerlJam> but if you want to play with perl6 stuff now, pugs is it.

[16:15] <lollan> ok

[16:15] <lollan> what is a haskell ?

[16:15] <rafl> A pure functional programming language.

[16:15] <lollan> ok

[16:16] <Limbic_Region> perlbot haskell

[16:16] <perlbot> http://www.haskell.org/ - a purely Functional, Strongy Typed Programming Language that is used for Pugs - the Perl 6 Compiler

[16:17] <lollan> thanks

[16:29] <kane_> rafl: sorry, long phone call -- should be documented in _inc.pl i think it's the list of installed files

[16:29] <kane_> $Fileslist      = 'files.list';                     # .packlist equiv

[16:46] <svnbot6> r8037 | rafl++ |  r22577@ata:  rafl | 2005-12-01 17:45:28 +0100

[16:46] <svnbot6> r8037 | rafl++ |  * Added a first JIB::Package prototype.

[16:50] <svnbot6> r8038 | kane++ | * add first JIB::Meta

[16:50] <svnbot6> r8038 | kane++ | * add dummy meta file

[16:50] <svnbot6> r8038 | kane++ | * add basic tests

[16:51] <kane_> rafl: mind if i simplify package.pm a little bit?

[16:53] <rafl> kane_: Go ahead. I actually haven't done much perl coding in the last months. I hope to get used to it again soon.

[16:53] <kane_> rafl: np -- it's good we get code done... if we can see ways to make it easier, that's secondary ;)

[16:54] <kane_> btw, i'm adding some vim/emacs directives at the bottom that make your <tab> expand to 4 spaces.. that would make my editor a lot happier ;)

[16:55] <svnbot6> r8039 | rafl++ |  r22579@ata:  rafl | 2005-12-01 17:52:00 +0100

[16:55] <svnbot6> r8039 | rafl++ |  * Added ability to export all the config vars in JIB::Config.

[17:01] <svnbot6> r8040 | kane++ | * add editor directives

[17:13] <svnbot6> r8041 | kane++ | * make JIB::Package use object::accessor

[17:13] <svnbot6> r8041 | kane++ | * steal regex implementation from CPANPLUS::Module

[17:13] <svnbot6> r8041 | kane++ | * add basic tests

[17:14] <kane_> rafl: what are you coding on now?

[17:14] <rafl> kane_: I coding my evening meal.

[17:14] <kane_> rafl: heh ;)

[17:15] <kane_> ralf: how about we make the config OO too? saves variable exportation

[17:15] <rafl> Yes. A singleton?

[17:16] <kane_> i think so

[17:16] <rafl> OK, I'll do that.

[17:16] <kane_> k

[17:17] <kane_> and speaking of evening meal, i should do that too

[17:17] <kane_> bbl &

[17:19] <svnbot6> r8042 | kane++ | * metafile is called 'meta.info' not 'info.info' ;)

[17:25] <pmurias> perlbot help

[17:25] <perlbot> Syntax: (fact) :: tell (who) about (what) :: (who) > (what) :: learn (what) as (info) :: relearn (fact) as (info) :: phone (phone number) :: shorten (url) :: shorten it :: search (module) :: docs (module) :: perldoc -f (function) :: jargon (term) :: math :: fortune ::  flip :: host (type) (record) ::rot13 :: roll (die) :: tempconv (temp) :: scramble (text) :: 8ball :: slap :: diss :: what time is it :: top/bottom (number) karma :: geoip (ip)

[17:35] <dada> geoip 62.149.230.90

[17:35] <dada> perlbot: geoip 62.149.230.90

[17:35] <perlbot> Record for 62.149.230.90: Italy

[17:35] <dada> wow, it works

[17:38] <svnbot6> r8043 | fglock++ | * misc/Parser-Mini - can parse '/examples/algorithms/attrgrammar.p6';

[17:38] <svnbot6> r8043 | fglock++ |   - emits a tree using Data::Dumper

[17:44] <svnbot6> r8044 | kane++ | * make JIB::Package use params::check and Object::Accessor

[17:44] <svnbot6> r8044 | kane++ | * update tests

[17:45] <ingy_> rafl: pong

[17:46] <rafl> ingy_: I'm the new Debian maintainer for YAML.pm. Please take a look at this: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=305526

[17:55] <ingy_> rafl: awesome...

[17:55] <ingy_> I'm pretty far into a new release

[18:02] <svnbot6> r8045 | kane++ | * update JIB::Package docs

[18:02] <svnbot6> r8045 | kane++ | * update tests for ->package allow handler

[18:02] <svnbot6> r8046 | rafl++ |  r22589@ata:  rafl | 2005-12-01 19:02:02 +0100

[18:02] <svnbot6> r8046 | rafl++ |  JIB::Config is a singleton now.

[18:02] * rafl leaves till this evening. Bye!

[18:35] <fglock> research idea for misc/Parser-Mini - plug it into the perl5 runtime and see if it works

[18:45] <stevan> fglock++ # nice stuff

[18:51] <fglock> thanks stevan!

[18:53] <fglock> I'm reading about rules and macros - let's see to what is possible to implement

[18:54] <fglock> s/to//

[18:54] <stevan> nice

[18:58] <fglock> macros are basically subs that execute at compile time (that's easier than I thought)

[19:00] <stevan> fglock: yeah,.. but they operate on the AST 

[19:01] <stevan> macros take an AST as an arg, and return an AST

[19:01] <stevan> at least LISP style macros do

[19:02] <fglock> no problem, my AST is perl data - not unlike what PIL-RUN executes

[19:02] <stevan> cool

[19:05] * stevan curses $work and returns to writing HTML templates :( &

[19:05] <fglock> now trying to find out how to plug Rules into this - maybe using Inline::Parrot and PGE

[19:05] <fglock> bye stevan

[19:29] * Aankhen`` goes to sleep.

[19:29] <Aankhen``> G'night.

[19:32] * fglock needs a lightweight metamodel to make tests

[19:37] <fglock> actually, I need a p6 metamodel written in p6

[19:42] *** _SamB_ is now known as SamB

[20:02] <svnbot6> r8047 | fglock++ | * misc/Parser-Mini/parser.p6 - p6 version (doesn't compile yet);

[20:02] <svnbot6> r8047 | fglock++ |   - first attemp to make a parser that parses itself

[20:15] <fglock> oops - no Data::Dumper in p6 yet?

[20:16] <wolverian> fglock, that isn't very perl6-ish, btw. 

[20:16] <wolverian> or is it pugs-ish? :)

[20:17] <fglock> I guess .perl() is ok - I'll try

[20:21] <DesreveR> the .perl multimethod still got no handling of cyclic structures

[20:26] <fglock> how do I read a line from stdin in pugs?

[20:27] <fglock> ok, found it

[20:27] <fglock> .perl() worked fine :)

[20:38] <stevan> fglock: autrijus and I were discussing a mm in p6 recently,.. although @work has kept us both from anything more than talking 

[20:50] <fglock> stevan: cool!

[20:50] <fglock> I'll try to do something simple in the meanwhile

[20:52] <fglock> m:perl5/.../ didn't work as expected :(

[20:57] <fglock> what is the p6 version of how to write 'split( /\b/ )'

[20:59] <fglock> (sorry for the english - pressed enter before fixing)

[21:05] <wolverian> .split(/\b/) 

[21:06] <Khisanth> hmm the m is always required now?

[21:07] <Khisanth> split rx:perl5/\b/ ?

[21:07] <wolverian> I think that's only in pugs

[21:07] <wolverian> (the rx:perl5 thing)

[21:07] <fglock> wolverian: I tried $a.split( m:perl5{\b} ) - but it splits on every char - it should keep words together

[21:07] <PerlJam> any time you use a modifier, you need to use m (or rx)

[21:08] <fglock> ?eval 'aaa bbb'.split( m:perl5{\b} )

[21:08] *** evalbot_8024 is now known as evalbot_8047

[21:08] <evalbot_8047> ("a", "a", "a", " ", "b", "b", "b") 

[21:08] <wolverian> that certainly looks wrong.

[21:09] <Khisanth> so much for PC!

[21:09] <Khisanth> ?eval 'aaa bbb'.split( m:perl5{} )

[21:09] <evalbot_8047> ("a", "a", "a", " ", "b", "b", "b") 

[21:09] <Khisanth> heeeey ...

[21:11] <Khisanth> ?eval 'aaa bbb'.split( m/\b/ )

[21:11] <evalbot_8047> *** Cannot parse PGE: :w::\b *** Error: end of file ("aaa bbb",) 

[21:12] <Khisanth> whatever that is suppose to mean ...

[21:16] <fglock> m:g:perl5{(\w+|\s+|.+?)} - it is ugly but it does what I need

[21:17] <Khisanth> ?eval 'aaa bbb'.split( m:perl5{(?<=\w)(?=\W)|(?<=\W)(?=\w)} )

[21:17] <evalbot_8047> ("a", "a", "a", " ", "bbb") 

[21:18] <Khisanth> hrm

[21:19] * geoffb is overjoyed: I finally managed to write a working interpreter for a non-trivial language!  Now maybe I can contribute code to pugs, instead of just docs and tests . . . .

[21:19] <Khisanth> ok so either PCRE doesn't really work or pugs is parsing things incorrectly

[21:21] <fglock> ?eval [ 'aaa bbb' ~~ m:g:perl5{(\w+|\s+|.+?)} ].join('|')

[21:21] <evalbot_8047> "aaa| |bbb" 

[21:27] <Khisanth> isn't pugs simply passing everything in between the delimiters to PCRE?

[21:28] <geoffb> nothingmuch, ping

[21:39] <svnbot6> r8048 | fglock++ | * misc/Parser-Mini/parser.p6 - some bugs fixed, but can't parse itself yet

[21:41] <DesreveR> yo

[21:41] <DesreveR> anyone using the latest svn parrot ?

[21:42] <fglock> DesreveR: no

[21:43] <DesreveR> darn

[21:43] <DesreveR> it wont build

[21:43] <leo> make realclean

[21:44] <fglock> &

[21:48] <Limbic_Region> . o O ( what's this about the flip-flop operator being renamed till? )

[21:50] <Limbic_Region> eval? my @foo = 1..10; @foo[-1]

[21:50] <Limbic_Region> ?eval my @foo = 1..10; @foo[-1]

[21:50] *** evalbot_8047 is now known as evalbot_8048

[21:50] <evalbot_8048> \10 

[21:50] <Limbic_Region> I guess I need to read the latest S03

[21:51] <DesreveR> DARN

[21:51] <Limbic_Region> DesreveR - still not building after make realclean?

[21:52] * Limbic_Region is happy to see that .. is a range operator and till is a flip flop operator which makes way more sense

[21:52] <DesreveR> now it installed

[21:52] <DesreveR> DARN IT

[21:53] * DesreveR bangs his head on the table for not reading the complete error message portage threw at him

[21:53] <DesreveR> btw - recent svn parrot seems to do a broken MAINFEST file

[21:54] <Limbic_Region> there is a -nomanicheck flag (though that might not be what it is really called)

[21:54] * Limbic_Region hasn't done Parrot in over a year

[21:55] <DesreveR> i redo parrrot all 2-3 days

[21:55] <DesreveR> allways recent svn

[21:55] <DesreveR> doesnt hurt much

[21:55] <DesreveR> portage does all the work

[21:56] <integral> I guess a broken MANIFEST is why they were discussing that on #parrot tonight =)

[21:57] <leo> DesreveR: I don't see any problem with parrot's MANIFEST

[21:57] <Khisanth> DesreveR: I am not USING latest parrot but I just built it a few minutes ago

[21:57] <integral> I just built it fine too

[21:58] <Khisanth> revision 10298

[21:58] <leo> DesreveR: irc.pobox.com #parrot

[21:59] <Khisanth> hmm window snapping is nice

[22:08] <DesreveR> darn it - the recent version fail too - its MANIFEST line 243 - missing [] at the end of line

[22:17] <ColombianoPereir> ola...

[22:19] <leo> DesreveR: r10300 - thanks for the description of the problem

