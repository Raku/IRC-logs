[03:51] <stevan> autrijus: nothingmuch helped me golf WALKMETH down even further,. you will like this one

[03:51] <stevan> my $dispatcher = shift;

[03:51] <stevan> { ($dispatcher->() || return)->get_method(@_) || redo }

[03:51] <stevan> thats all of it,.. it just works ;)

[03:52] * stevan wanders off to sleep &

[03:54] <svnbot6> r7180 | stevan++ | Perl6::MetaModel 2.0 -

[03:54] <svnbot6> r7180 | stevan++ | * further distillation of WALKMETH thanks to nothingmuch++

[03:54] <svnbot6> r7180 | stevan++ |   it has now been golfed down to just 2 lines:

[03:54] <svnbot6> r7180 | stevan++ |   my $dispatcher = shift;

[03:54] <svnbot6> r7180 | stevan++ |   { ($dispatcher->() || return)->get_method(@_) || redo }

[03:55] <guorke> hi,can you see "" ?

[03:57] * QtPlatypus can see

[03:58] <guorke> i download a patch,let mirc can display chinese words

[04:00] * QtPlatypus just sees double quote, double quote, space, questionmark

[04:03] <guorke> oh, maybe it can not covert GBK to utf-8

[04:15] * masak sings 'can you see the "" tonight?'

[04:18] <guorke> ?

[05:57] <nothingmuch> morning

[05:57] <nothingmuch> but ciao

[05:58] <geoffb> heh

[05:58] * nothingmuch 's ride to work is *finally* getting here soon

[05:58] <nothingmuch> (it's 9am already, which means i'll be at work around 9:45, and the std here is 8:15-8:30)

[05:58] <geoffb> rideshare?

[05:59] <nothingmuch> aye, either with someone who makes a big commute daily or with the folks

[05:59] <nothingmuch> the problem is that folks aren't teaching right now - it's between semesters

[05:59] <nothingmuch> so they are slacking

[05:59] <geoffb> What do your parents teach?

[05:59] <nothingmuch> degenerates

[05:59] <geoffb> *smirk*

[06:00] <nothingmuch> dad: http://www.math.bgu.ac.il/~kojman/

[06:00] <nothingmuch> and mom: http://profiler.bgu.ac.il/site/public_site/Show_User.cfm?user_id=1045

[06:01] <geoffb> Interesting pairing

[06:01] <nothingmuch> aye

[06:02] <geoffb> Though I can completely see math + language = CS

[06:02] <geoffb> (genetically speaking)

[06:02] * nothingmuch wants to study math & linguistics

[06:02] <nothingmuch> and some compsci for the hobby aspect

[06:03] <nothingmuch> *poof*

[06:03] <nothingmuch> see you soon

[06:03] <geoffb> sys

[06:33] <nothingmuch> luqui: ping

[06:33] <nothingmuch> two things:

[06:33] <nothingmuch> a. go to sleep young man

[06:33] <nothingmuch> b. can you open up the repo for L::AG?

[06:34] <luqui> the repo is already open

[06:34] <nothingmuch> so can you point me to it?

[06:34] <luqui> http://svn.luqui.org/svn/misc/luke/work/code/perl/modules/Language-AttributeGrammar

[06:34] <nothingmuch> goody

[06:34] <nothingmuch> http://blog.moertel.com/articles/2005/09/27/the-oddities-of-floating-point-arithmetic

[06:35] <nothingmuch> i think perl 6 should truncate upwards when the number is 409.999999994

[06:35] <nothingmuch> anyway, off to work... finally

[06:35] * luqui (and one of my friends) thinks that perl should have a builtin round() function

[06:35] <luqui> to complement int()

[06:36] <luqui> er, *his* friends :-)

[06:36] <nothingmuch> yes, we should

[06:36] <geoffb> That does a proper round, not just +.5 / trunc

[06:36] <nothingmuch> but we should also have a truncate that also DWIMs around 0.99999

[06:37] <luqui> oh nothingmuch 

[06:37] <nothingmuch> while 'float::int()' will do the bare metal truncate

[06:37] <luqui> if you want to commit to the repo, you should give yourself a commit bit at luqui.org/svn-adduser

[06:37] <nothingmuch> okies

[06:37] <geoffb> Anyone specifying rules for floating point math should be forced to take classes with Prof. W. Kahan first

[06:38] <luqui> agreed, for various values of Prof. W. Kahan

[06:39] <geoffb> The value I'm thinking of was one of the guys behind the IEEE FP design, wrote the transcedental microcode for early Intel processors, and spends his days writing papers about how incredibly bad the tiniest FP errors are.

[06:39] <geoffb> Crazy, but Real Damn Smart

[06:42] <geoffb> Funny how often those go hand in hand

[06:43] <Aankhen``> Normal people aren't smart.  You have to go beyond normality if you are to be smart.

[06:43] <geoffb> valid point

[06:44] <Khisanth> and creative/inventive :)

[06:44] <Aankhen``> Indeed.

[06:44] <Khisanth> if you are normal any thing you thought of is likely to have been thought of by other people already!

[06:45] <luqui> but the converse is not necessarily true

[06:45] <luqui> smart people can have pedestrian ideas, but the genius/hubris to actually do them :-)

[06:45] <Aankhen``> Heh.

[06:45] <geoffb> I would argue that even the smartest people are so strongly influenced by past creations that it's unrealistic to think that anything is "completely new"

[06:46] <luqui> "shoulders of giants" and whatnot

[06:46] <geoffb> nodnod

[06:46] <Aankhen``> Too bad being smart and being creative don't go hand in hand.

[06:47] <Khisanth> but even while standing on the shoulders of giants you still have to know which way to look!

[06:47] <geoffb> heh

[06:50] <Aankhen``> ROTFLMAO.  GameSpot has a countdown to the release of the F.E.A.R. (ugh) Multiplayer Demo.  Time left?  NaN hours: NaN minutes: NaN seconds.

[06:51] <geoffb> LOL

[06:51] <geoffb> Sorta like seeing a blue screen on a kiosk

[06:51] <Aankhen``> It's the little, thoughtful touches like this which make me loath GameSpot. :-D

[06:52] <Khisanth> geoffb: or an atm

[06:53] <geoffb> Khisanth, nodnod, though that just kinda worries me.  "You're handling my money using Windows?  Are you INSANE?!?"

[06:53] <Aankhen``> Heh.

[06:53] <Aankhen``> LMAO.

[07:15] <autrijus> yo :)

[07:15] <geoffb> yo, boyee

[07:17] <geoffb> From 1984: "... newer processors handle 32-bit addressing, allowing unimaginably large programs."

[07:18] <luqui> 32 bit in 1984?

[07:18] <luqui> man, I need to catch up on my history

[07:18] <geoffb> I can't remember if the 386 was '84 or '85, but certainly the VAX was around by then

[07:20] <nothingmuch> hah

[07:20] <nothingmuch> the rails team is teh sux0r

[07:20] <geoffb> ?

[07:20] <nothingmuch> http://weblog.rubyonrails.com/archives/2005/09/24/rails-commit-team-jumps-to-12-members

[07:20] <nothingmuch> after 6 months rails core team members finally got commit bits

[07:21] <nothingmuch> ... from 4 to 8 (!!!)

[07:21] <nothingmuch> uh, there were 4, 8 new ones got acess

[07:22] <Khisanth> pugs has what? over 100? in 7/8 months? :)

[07:22] <nothingmuch> let me check

[07:22] <dduncan> yes

[07:22] <geoffb> "Anarchy with an audit trail"

[07:23] <autrijus> :D

[07:23] <nothingmuch> 127

[07:23] <Khisanth> that :D is slightly disturbing

[07:24] <QtPlatypus> 2^x -1 

[07:25] <autrijus> we need to find 128 others

[07:25] <autrijus> and jump to 255 in a run

[07:26] * nothingmuch tried recruiting people on perlmonks

[07:26] <nothingmuch> only Detonite came

[07:27] <nothingmuch> we can try #perl

[07:29] <Khisanth> that would not be a good idea

[07:30] <dduncan> isn't #perl more a newbie channel? ... I don't know, never went there

[07:30] * Khisanth is starting to hate modern software

[07:30] <nothingmuch> Khisanth: hate hate hate

[07:30] <Khisanth> newbie? not really but it is partially a help channel

[07:30] <geoffb> Welcome to the club, Khisanth 

[07:30] <nothingmuch> what are you hating?

[07:30] <geoffb> And is clkao involved?

[07:30] <dduncan> doesn't have to be anything ...

[07:31] <dduncan> just the standard 2 minutes of hate

[07:31] <Khisanth> the fact that compiling this thing seem to require over 300MB of space ... SO FAR!

[07:31] <dduncan> I noticed

[07:31] <nothingmuch> ever tried openoffice?

[07:31] <nothingmuch> 2GB

[07:31] <nothingmuch> =(

[07:31] <Khisanth> what the hell is it doing that it's generating that much data?

[07:32] * geoffb literally bought his new machine because compiling Pugs became untenable on the old one

[07:32] <dduncan> I think its just GHC

[07:32] <nothingmuch> geoffb++

[07:32] <Khisanth> I didn't know openoffice was written in Haskell ...

[07:32] <dduncan> GHC has to do a lot of work to optimally convert functional constructs to the procedural ones that machines use

[07:32] <nothingmuch> no, it isn't

[07:32] <autrijus> Khisanth: is it all in Pugs.Run?

[07:32] <dduncan> probably lots to keep in memory and cross check, etc

[07:32] <nothingmuch> Khisanth: you can complain to spj et all

[07:32] <Khisanth> or the xorg X server :)

[07:32] <nothingmuch> they had a survey

[07:32] <autrijus> nothingmuch: the space behaviour is indeed better on 6.4.1 here

[07:33] <Khisanth> autrijus: ah this isn't pugs

[07:33] <autrijus> eh heh ;)

[07:33] <autrijus> okay then :)

[07:33] <nothingmuch> oh, then what is it?

[07:33] <dduncan> by the way, is 6.4.1 in release status, or still pre-release?

[07:33] <Khisanth> pugs just eats up several hundred MB while compiling

[07:33] <dduncan> s/release/stable/

[07:33] <autrijus> dduncan: it's full released

[07:33] <Khisanth> or was it the linking ...

[07:33] <dduncan> then I'll have to go get it some time

[07:34] <dduncan> I think the linking is minimal; the compiling is the big memory eater

[07:34] <geoffb> Don't know if it's still true (haven't checked), but one of the problems was that the makefile had GHC run the compile and link in a single pass -- so at one point, both GHC and LD are taking piles of VM

[07:34] <Khisanth> I think top indicated around 500MB that one time I checked and I have 256MB of ram so you can imagine how often I build pugs :)

[07:34] <autrijus> geoffb: indeed... cabalize would fix that

[07:34] <autrijus> I think

[07:35] <geoffb> Don't sell the link short -- I hit 200+ MB in ld at one point, IIRC

[07:35] <geoffb> autrijus, cool

[07:36] <nothingmuch> memory?

[07:36] <nothingmuch> or disk?

[07:36] <nothingmuch> what was Khisanth complaining about?

[07:36] <Khisanth> nothingmuch: the 500MB? that was memory

[07:36] <nothingmuch> the 300?

[07:36] <geoffb> I was talking about VM

[07:37] <Khisanth> nothingmuch: xorg

[07:37] <nothingmuch> oh!

[07:37] <nothingmuch> hehe

[07:37] * nothingmuch wonders whether he should have a lambda tatooed on his forehead

[07:37] <nothingmuch> that would make me look as if I know haskell and stuff

[07:37] * Khisanth says no

[07:38] <Khisanth> nothing wrong with the lambda but forehead just doesn't seem like a good choice

[07:38] <nothingmuch> ass?

[07:38] * luqui wants a lambdacamel tattoo, or if I'm feeling like a wimp, shirt

[07:38] <nothingmuch> i know i know

[07:38] <nothingmuch> palm

[07:38] <Khisanth> hrm

[07:38] <geoffb> The only proper forehead tattoo is "Poor Impulse Control"

[07:38] <luqui> :-)

[07:38] <Khisanth> nothingmuch: across your right eye! :)

[07:39] <luqui> mmm eyelid tattoos.  That could be really creepy

[07:39] <luqui> especially if it's a lambda

[07:39] <nothingmuch> http://images.google.com/images?q=lambda+camel

[07:39] <luqui> it would have to be the left (for lambda) eye

[07:39] <nothingmuch> we need to hack something up

[07:39] <Khisanth> heh contacts with a lambda in the middle :)

[07:39] <luqui> uh yes, that's what I think of when somebody says "lambdacamel"

[07:40] <nothingmuch> if you goodle images for lambda you get a lot of pictures of wannabe-gangstars

[07:42] <Khisanth> http://frmb.org/images/lambda.gif or that!

[07:42] <nothingmuch> http://digital.library.mcgill.ca/fishstein/imagegallery.php?catname=POLAND&catsub1=11I

[07:43] <Khisanth> lambda the storm trooper?

[07:45] <nothingmuch> hello Administrator 

[07:46] <Administrator> hoi :/

[07:46] <Administrator> damn

[07:46] <Administrator> wrong nick

[07:46] *** Administrator is now known as r0nny

[07:47] * autrijus hops on taxi toward the conferece, bbiab &

[07:49] <geoffb> g'night all

[07:50] <nothingmuch> night

[07:53] <nothingmuch> darn... i can't type a lambda into gimp!

[07:53] <nothingmuch> that's what you get for not pirating expensive software, eh?

[07:53] <luqui> that's odd

[07:54] <luqui> gimp ought to have truetype ability

[07:54] <nothingmuch> it's because it's under osx's x11, and i guess that doesn't get along very well

[07:55] <nothingmuch> nope, not working

[07:55] <nothingmuch> fsck it

[07:56] <nothingmuch> back to unit testing

[07:56] <nothingmuch> can anyone send me a gimp file with a lambda in it, doesn't matter what font, so that I can merge with this file?

[07:56] <luqui> what about the lambdacamel picture?

[08:54] *** r0nny is now known as r0n|-_-

[09:50] <Aankhen``> GHC 6.4 blows up when building Pugs, 6.4.1 blows up politely.  Wonderful.

[10:11] <clkao> agent autrijus, are you on holiday, there hasn't been updates from you

[10:26] <wilx> Got caught why spying, convicted of treason and executed, in some less-than-deocratic republic.

[10:26] <wilx> while

[10:26] <wilx> Err.

[10:42] <broquaint> The Republic of Paskalovia - The Land of Imperative Righteousness!

[10:44] <autrijus> rehi!

[10:45] <autrijus> Aankhen``: politely how

[10:45] <autrijus> ?

[10:47] <autrijus> er I mean, blow up how?

[10:47] <broquaint> How's the conferencing going, autrijus?

[10:48] <autrijus> broquaint: very well -- nonstop hacking

[10:48] <broquaint> Hacking and listening? Skills!

[10:49] <autrijus> darcs hackers invented a domain specific language for patch merging, resolution, commuting

[10:49] <autrijus> verified by the type system so the implementation can be verified at compile time

[10:49] <autrijus> very cool stuff

[10:50] <broquaint> Nifty! What's the most interesting thing (to you) to come out of the conference?

[10:50] <autrijus> there's too many to list... but mostly that people seem to regard Pugs quite positively

[10:50] <autrijus> and Dylan is the true perl6-without-advertising, not Ruby

[10:51] <clkao> oh oh

[10:52] <broquaint> Have you managed to recruit any more suck^Whackers to Pugs?

[10:55] <autrijus> yes... SyntaxNinja is helping me cabalising pugz

[10:55] <autrijus> and there's many discussions on more efficient compilation and making PIL2 more expressive

[10:56] <autrijus> also I'm now hacking GHC core to make some features Pugs want from GHC available on GHC 6.6

[10:56] <broquaint> You're hacking GHC for Pugs? Madness!

[10:56] <autrijus> it's not bad at all

[10:58] <broquaint> So you're hacking 6.6 features into 6.4?

[10:59] <clkao> http://www.pugvillage.com/ten_healthy.htm

[11:00] <wolverian> autrijus, cabalising?

[11:05] <autrijus> turn things to cabal

[11:05] <autrijus> but I'm now going to hack with spj some more so bbiab &

[11:05] <wolverian> okay, bye :)

[11:08] <autrijus> :))

[11:08] <autrijus> wolverian: see Pugs.cabal

[11:08] <autrijus> or rather pil.cabal

[11:08] <wolverian> ah, thanks

[11:08] <wolverian> time to go check these linear algebra (really) assignments, though

[11:09] <wolverian> bbl &

[11:43] <autrijus> rehi

[11:45] <knewt> autrijus: do you have a moment? had a problem with Module::Install yesterday

[11:46] <autrijus> knewt: sure

[11:46] <autrijus> what is it?

[11:55] <autrijus> knewt: mm?

[11:56] <broquaint> What does SPJ think of Pugs, autrijus?

[11:59] <autrijus> broquaint: he thinks it's very cool

[11:59] <autrijus> also for some reason he thought it has been around for far longer than it had.

[11:59] <autrijus> so he was quite positively surprised that it's less than a year old.

[12:00] <broquaint> It has made quite a lot of progress, compared to say, most other languages.

[12:01] <autrijus> :) also he said Pugs exercises several GHC features no-one was exercising to that degree

[12:01] <autrijus> (darcs in comparison was very mild in using GHC extensinos)

[12:01] <autrijus> so he'd be delighted to help making Haskell-as-extended-by-GHC more friendly to Pugs development

[12:02] <broquaint> Nice :)

[12:02] <autrijus> which is the reason of this spanned-through-four-days hackathon with simon and simon :)

[12:02] <broquaint> That's a lot of Haskell!

[12:03] <autrijus> <- learning through osmosis about how GHC handles parsing, typechecking, syntax, etc

[12:03] <autrijus> and the driving design rationales for them

[12:03] <autrijus> it's fascinating stuff :)

[12:04] <broquaint> learning++ # Makes doing other stuff easier.

[12:05] <autrijus> indeed

[12:05] <knewt> autrijus: it doesn't detect properly that it has write permissions to the cpanp cache directory

[12:07] <autrijus> are you using the latest EU::AI?

[12:07] <autrijus> I think it's a EUAI problem already solved and released

[12:08] <autrijus> ycheng_: hi! long time no see

[12:14] <knewt> autrijus: EU::AI 0.63, M::I 0.37

[12:14] <autrijus> knewt: ok... mail the transcript to me -- or better, nopaste it here

[12:16] <autrijus> knewt: if you want to help debugging, it's in EUAI, look for "-w"

[12:16] <autrijus> or the errormsg

[12:19] <knewt> ah. yeah. found it. would that pick up write permissions granted by group only using a supplemental group?

[12:20] <autrijus> I'm at mercy of perl's -w implementation

[12:20] <autrijus> maybe you want to change to an operational check?

[12:20] <autrijus> i.e. actually try to do some empty things

[12:20] <autrijus> writing $$ in it as a filename and unlink it

[12:20] <autrijus> not sure -- improvise

[12:28] <knewt> ah, wait a mo. when i first ran Module::Install, EU::AI wasn't installed, so it used it's provided version, which is only 0.61. -w /does/ pass for my cpanp cache path, i've checked

[12:29] <autrijus> good.

[12:29] <autrijus> there's no good way out of this

[12:29] <autrijus> I toyed with the idea of having M::I _compare_ the included EU::AI version with the user machine's

[12:29] <knewt> maybe a new version of Module::Install with an updated included version of EU::AI ?

[12:30] <autrijus> thing is that M::I and EU::AI are currently separate

[12:30] <autrijus> I guess this argues pretty strongly that I should either merge the dist

[12:30] <autrijus> or make M::I depend on the latest EU::AI

[12:30] <autrijus> which would be less intrusive, since not all EUAI users want M::I

[12:30] <autrijus> that makes sense to you?

[12:30] <knewt> yep

[12:30] <autrijus> good. can you make that change?

[12:31] <knewt> yeah, sure. you want a patch sent to rt?

[12:31] <autrijus> no, you are a committer :)

[12:31] <knewt> oh, it's in the same repo?

[12:31] <autrijus> http://svn.openfoundry.org/modinstall/

[12:31] <autrijus> what's your openfoundry id?

[12:32] <knewt> knew

[12:32] <autrijus> ok, you should be able to simply commit

[12:32] <autrijus> to both EUAI and M::I

[12:32] <autrijus> when you're done and want me to look/release let me know

[12:32] <autrijus> it's just like pugs :)

[12:32] <knewt> heh. cool. will do

[12:32] <autrijus> knewt++

[13:06] <wolverian> wow, interesting paper: http://psyche.cs.monash.edu.au/v2/psyche-2-05-stapp.html

[13:06] <integral> the real reason for junctions!

[13:07] <wolverian> haha.

[13:12] <geoffb> learning heavily -> brain working hard -> insomnia -> AAAAUUUGGHH

[13:34] <nothingmuch> msdev is frustrating

[13:38] <autrijus> switch to eclipse? :)

[13:38] <nothingmuch> deep vendor lockin

[13:39] <nothingmuch> we're using vc++ 6.0

[13:39] <autrijus> :-/

[13:39] <autrijus> sounds deep

[13:39] <nothingmuch> tell me about it

[13:39] <nothingmuch> and the thing is that to compile on UNIX we have an entirely independant build system using makefiles

[13:39] <nothingmuch> that assumes so much about how UNIX works that we can't even compile with the makefiles under cygwin

[13:40] <geoffb> ewww

[13:40] <nothingmuch> so there is absolutely no code being shared between the two build systems

[13:41] <geoffb> .oO( No, cat, just because I'm awake does not mean it's time for your breakfast )

[13:41] <nothingmuch> our dog is even worse than that =)

[13:41] <nothingmuch> she thinks that food is provider dependant

[13:41] <nothingmuch> so she is sure she deserves one serving of food per human per mealtime

[13:41] <geoffb> That kind of problem was why at a previous company I ported the entire build system to Perl . . . .

[13:41] <nothingmuch> and the thing is, she's got a dramatic talent

[13:42] <geoffb> heh

[13:42] <nothingmuch> geoffb: i guess we could use a decent system that is portable... maven is prolly good enough

[13:42] <geoffb> Our cats will try that with all sincerity too

[13:42] <nothingmuch> for portability's sake even ant will work

[13:42] <nothingmuch> the makefiles are also reasonably well written

[13:42] <nothingmuch> just not portably enough to work on windows

[13:42] <nothingmuch> without too much effort being wasted

[13:43] <geoffb> nodnod

[13:43] <nothingmuch> and also, the integration that msdev as a UI which everyone likes has with itself as a build system is pretty good

[13:43] <nothingmuch> and no one wants to throw that out the window

[13:44] * nothingmuch is pleasantly surprised at the backup ability of his home dir

[13:44] <geoffb> ?

[13:44] <nothingmuch> i thought there were heaps of unnecessary crap

[13:44] <geoffb> ah

[13:44] <nothingmuch> but turns out that if i filter simple things: movies, music, comics i am down to 3-4 CDs

[13:45] <nothingmuch> if i then remove the work src dir, which has VCS (and I normally work via remote desktop or rsh anyway) then that's another 350MB down

[13:45] <nothingmuch> application and browser caches, and IMAP mirror are another 2gb or so

[13:45] <nothingmuch> so now i'm down to less than 2 cds for a full backup

[13:46] <nothingmuch> i'll prolly backup my music to DVD since it doesn't need to be as fault tolerant

[13:47] <geoffb> how is DVD less fault tolerant than CD?

[13:47] <kgftr|konobi> print to paper is the best backup mechanism

[13:47] <geoffb> Have you seen how bad OCR still is?  :-)

[13:48] <kgftr|konobi> i never said anything about restoring the backup

[13:48] <kgftr|konobi> =0)

[13:50] <geoffb> A few years back I heard that a good chunk of old (mid-last-century) scientific data is being lost forever because the tapes are degrading faster than the tape readers can transfer the data to new media

[13:56] <PerlJam> geoffb: Have you heard of the longnow foundation?

[13:57] <geoffb> nope

[13:58] <PerlJam> geoffb: see http://longnow.org/10klibrary/library.htm

[14:02] <geoffb> interesting

[14:04] <geoffb> Reminds me of a project that is trying to keep rare languages from dying by creating modern-day rosetta stones, microprinted with parallel translations in hundreds of languages.

[14:05] <nothingmuch> given networking i think that article is moot

[14:06] <nothingmuch> and given open standards, ofcourse

[14:07] <Khisanth> not really moot and it might give sneaky corporations some ideas

[14:08] <Khisanth> "we don't have bad record keeping! the records just deteriorated!"

[14:08] <svnbot6> r7181 | fglock++ | * pil-run - say 3|4 "works"

[14:08] <nothingmuch> the problem is with corporate idiots

[14:08] <nothingmuch> that control managorial idiots

[14:08] <PerlJam> geoffb: the longnow foundation started that project

[14:09] <geoffb> The article points out one networking problem -- dead hyperlinks.  Good thing there's an internet archive now; of course, that doesn't help anything that's not linked into the publicly accessible internet

[14:09] <geoffb> PerlJam, oh.  Well, cool then.

[14:09] <geoffb> I guess I had heard of them but had just forgotten the name.

[14:11] <PerlJam> geoffb: see http://longnow.org/10klibrary/libIdeas.htm

[14:11] <PerlJam> :-)

[14:12] <nothingmuch> seems like a nice philosophy, though

[14:12] * PerlJam wonders if programming languages count as "human languages"

[14:13] <PerlJam> I also wonder how they intend to preserve unwritten languages.

[14:17] <SamB> micro-phonographs!

[14:42] <geoffb> Memory failing -- what's the term for a special value used in a data structure to make algorithmic loops have simpler termination conditions?

[14:43] <geoffb> It's right on the tip of my brain, and I can't get it

[14:43] <geoffb> sentinal?

[14:43] <geoffb> hmmm

[14:44] <PerlJam> geoffb: sentinel, yes.

[14:44] <geoffb> thx

[14:51] *** Jooon_ is now known as Jooon

[14:53] <Limbic_Region> geoffb - would you like to see an example of sentinals?

[14:53] <geoffb> Um . . . unless you're about to make a joke, no.  I know what they are and how to use them, I'm just losing memory from insomnia

[14:53] <geoffb> So I couldn't remember the word

[14:54] <Limbic_Region> heh

[14:54] <Limbic_Region> no, wasn't a joke. 

[14:54] <Limbic_Region> knowing a term conceptually isn't always enough

[14:55] <Limbic_Region> sometimes people need examples and I just recently came across one 

[14:55] <geoffb> Well, if it's cool, paste a link . . . I'm always up for cool code

[14:58] <Limbic_Region> k - just a sec

[14:58] <geoffb> .oO( Thinking Forth has some nice microoptimization tricks )

[14:58] <Limbic_Region> http://perlmonks.org/index.pl?node_id=487200

[14:59] <Limbic_Region> Spiriling Integers

[14:59] <Limbic_Region> It is possible more than one implementation used sentinels - I didn't disect them all, but demerph's did

[15:00] <Limbic_Region> mine was pure math btw

[15:05] <nothingmuch> anyone got an example of sentinal variables? i'm not sure how obvious this is

[15:05] <nothingmuch> so i'm not 100% on the concept

[15:07] <geoffb> Perl people use them all the time without even realizing it -- ye olde undef at the end of the array trick

[15:07] <geoffb> (or undef at end of iterator or filehandle or ...)

[15:08] <geoffb> Limbic_Region, interesting stuff.

[15:08] <Khisanth> err undef at the end of an array seems somewhat dangerous

[15:09] <geoffb> Khisanth, implicit, not explicit.

[15:09] <geoffb> i.e. definied shift @array

[15:09] <geoffb> er defined, sheesh

[15:10] <geoffb> In any case, my point was that Perl surrounds data sources with sentinel values (undef, in particular) implicitely, so that the programmer need not even know what a sentinel is to use it

[15:10] <geoffb> mmmm, tea

[15:11] <nothingmuch> ah

[15:11] <nothingmuch> i thought this was a manual thing

[15:11] <nothingmuch> a micro optimization of sorts

[15:11] <geoffb> In most languages, it is

[15:11] <geoffb> C is where I first learned it

[15:12] <nothingmuch> can I have an exmaple of how this would be done in say C?

[15:12] <Limbic_Region> sorry geoffb - was chatting in the Monastery chatterbox

[15:12] <nothingmuch> kind of like the \0 at the end of strings?

[15:12] <geoffb> Limbic_Region, is it just the stuff you forward, or is PerlMonks chock full of little puzzles?

[15:12] <geoffb> nothingmuch, yes, exactly.

[15:13] <nothingmuch> so it's a programmer optimization, not a performance one, right?

[15:13] <Limbic_Region> geoffb - I pay particularly close attention to the neat and interesting problems which I would say is 10-15%

[15:13] <geoffb> nothingmuch, actually, it's both.

[15:13] <geoffb> See Sedgewick's _Algorithms in C_ for some nice examples

[15:13] <nothingmuch> how does \0 make things faster as opposed to a <int, char[x]> ?

[15:14] <geoffb> Because 0 is false in C (and asm) also.

[15:14] <geoffb> So lots of string manip stuff becomes while loops, that don't need to waste a (used to be precious) register on a loop counter

[15:14] <nothingmuch> e.g. for strlen, or strcat

[15:14] <nothingmuch> oh, i see

[15:15] <nothingmuch> heh, intel really fucked up everything 20 years, ago, didn't they?

[15:15] <geoffb> YES

[15:15] * geoffb omits several nasty comments about IA32

[15:15] <Limbic_Region> I won't digress for the worthwhile conversation anymore other than to say that I plan on making a collection of all the puzzles and interesting problems I have encountered at the Monastery and elsewhere geoffb

[15:15] * nothingmuch wonders how much longer the std c lib will live before needing reimplementation in terms of this stuff

[15:15] <nothingmuch> to make it more suitable for modern processors

[15:16] <nothingmuch> nowadays with another register it's probably faster, more secure, and safer to store a length next to a  buffer instead of a buffer with a marker at the end

[15:16] <geoffb> Some stuff was just brilliant, but some of the IA32 decisions sucked the dog dick of Anubis (*cough* obscure movie reference *cough*)

[15:16] <geoffb> Definitely more secure.

[15:17] <nothingmuch> can I have an example of brilliant stuff?

[15:17] <geoffb> As far as faster, well, that depends.  But it's at least not guaranteed slower

[15:18] <nothingmuch> well, stcat should just put the string right there

[15:18] <geoffb> Hmmm . . . It's been a long time since my 8088 -> 80386 days

[15:18] <nothingmuch> no need to find the ned of a string

[15:18] <nothingmuch> no need to smash the stack with an unnecessary buffer if the string is very long

[15:18] <geoffb> oh, certainly, having strlen be O(1) would be a HUGE difference for bad code everywhere.

[15:19] * nothingmuch conciously uses stlen instead of cachine

[15:19] <nothingmuch> caching

[15:19] <nothingmuch> i perform for programmer efficiency =)

[15:19] <geoffb> Unfortunately a portion of libc pretty much has to do implicit strlen's because the API is borken

[15:19] <nothingmuch> perform optimizations

[15:19] <nothingmuch> aye

[15:19] <nothingmuch> i don't know my way around std c lib... what other parts are starting to show age?

[15:20] <geoffb> actually, a LOT of it

[15:20] <geoffb> There are replacements for large chunks, but not all C programs use even the ones invented a decade ago, let alone recent stuff

[15:21] <nothingmuch> what about STL in C++?

[15:21] <geoffb> Personally, I recommend just using something like glib (not glibc, the GTK thing) to handle as much of the low level API as possible.  They get to deal with making the headaches sane.

[15:22] <geoffb> I know less about STL, other than that people sometimes call it "the good part of C++".  I don't use it, because I hate C++.

[15:22] * nothingmuch hates C++, but uses it work

[15:22] <nothingmuch> however, i've only done maintenance programming, so I'm not really familiar with STL either

[15:23] <mauke> what about the stl?

[15:23] <geoffb> I learned to hate C++ by reading Meyers's books

[15:24] <nothingmuch> the reason i hate C++ is that it's so obvious it's faking everything it makes you want to cry

[15:24] <geoffb> When books purporting to teach you the deep stuff about a language just end up making you go EWWWW, that's a bad sign.

[15:24] <nothingmuch> IMHO it's not much more than sugared C

[15:24] <geoffb> What was the original C++ compiler called?  cfront?  

[15:25] <nothingmuch> and C is not much more than well sugared assembler, with easy function calls

[15:25] <mauke> yep

[15:25] <geoffb> It actually *was* just sugared C

[15:25] <nothingmuch> objective C is also sugared C

[15:25] <nothingmuch> much more than C++ is

[15:25] <qwr> if you try to write C or java in C++, its of course awful ;)

[15:25] <mauke> then C++ is a lot more sugar then C

[15:25] <geoffb> Better sugar, from what I hear

[15:25] <mauke> arhg, *than

[15:25] <nothingmuch> but it doesn't feel as ugly

[15:25] <geoffb> I meant Objective C

[15:25] <sili_> http://www.cnn.com/2005/LAW/09/27/prisoner.abuse.england.ap/index.html omg. america is great. you don't even have to take responsibility for your own actions

[15:25] <sili_> at least "lightly"

[15:26] <qwr> but its quite good for doing some stuff

[15:26] <geoffb> sili_, unfortunately, those of us in the U.S. who have half a brain have unfortunately been in an unhappy place of late

[15:27] <geoffb> qwr, for example?  (And no fair saying "game programming" because they're only using C++ out of ignorance.)

[15:28] <nothingmuch> geoffb: what alternative is there for game programming?

[15:28] <nothingmuch> shit! my thumb-drive thingy died

[15:29] <geoffb> nothingmuch, actually using more than one language in the game.   In particular, one very high level one (like Perl, say), and one dead fast one for core optimization (C or even assembly)

[15:29] <qwr> geoffb: fast data manipulation - only problem being, that ocaml or haskell is almost always better than c++ for that

[15:30] <geoffb> The last few years have been filled with papers written about how to build your own scripting engine for games, and the engines they produce suck ASS, because most of the implementers haven't used a real dynamic language

[15:31] <geoffb> qwr, exactly my point.  As far as I know, all domains C++ serves are better served by other languages.

[15:31] <geoffb> It is unfortunately just barely good enough at a few things that people try to hit every fastener with the C++ hammer.

[15:31] <nothingmuch> geoffb: the problem is that the really hard parts (fast AI code, fast graphics code, fast data unpacking, fast networking, etc) is so big that the only thing you can really write in an "easy" language is the UI and the options menu

[15:32] <geoffb> nothingmuch, do you believe that, or do you *know* it?

[15:32] <geoffb> *cough* loaded question

[15:32] <nothingmuch> believe

[15:32] <nothingmuch> admittedly

[15:32] <geoffb> And therein lies the problem.

[15:32] <nothingmuch> but I can't think up of any single part that doesn't benefit from being ultra-fast-cool-stuff in game programming

[15:33] <SamB> well, the blit code, sure

[15:33] <SamB> probably in ASM or C with OpenGL...

[15:33] <geoffb> nothingmuch, that's what APIs are for

[15:33] <SamB> the AI, though

[15:33] <nothingmuch> geoffb: err?

[15:33] <SamB> ... is probably better not done in C.

[15:33] <geoffb> As SamB says, any fast graphics you need, that's OpenGL's job.  (The programmer's job is not to use OpenGL badly.)

[15:34] <nothingmuch> okay, fair enough =)

[15:34] <SamB> though OpenGL is not very fast without a working 3d accelerator...

[15:34] <geoffb> I've benchmarked Perl doing OpenGL . . . using the API well, it's really not that slow

[15:35] <geoffb> SamB, It's been a while since you could buy a non-accelerated computer

[15:35] <SamB> you can still buy them used

[15:35] <SamB> and I got mine a while ago...

[15:35] <geoffb> And I would posit that AI is best done in a domain-specific language, or at worst a good dynamic language

[15:35] <SamB> and it used to be that my Voodoo 3 worked, but then X dropped it for only having 16 MB VRAM

[15:36] <geoffb> . . . with kernels such as influence maps done in C or ASM under an API

[15:36] <autrijus> rehi

[15:36] <geoffb> rehi, autrijus 

[15:36] <nothingmuch> hi ho

[15:36] * nothingmuch would like to try coding a game some time

[15:36] * autrijus is having dinner... some african restaurant

[15:36] <autrijus> looks promising

[15:36] <nothingmuch> sounds promising

[15:37] <nothingmuch> or at least interesting

[15:37] <geoffb> Now mind you, I'm biased.  I believe (and intend to prove sometime this decade) that a good modern game can be written in Perl.

[15:37] <SamB> personally, I think a DSL is a good idea, though you probably want to implement at least the parser in something other than C...

[15:37] <nothingmuch> http://www.projectoffset.com/

[15:38] <geoffb> SamB, yes, there is the used hardware problem -- but the CPU on such a beast will probably not be up to even doing collision handling for a modern 3D game, let alone the graphics

[15:39] <geoffb> So those boxen are probably best used for 2D

[15:39] <geoffb> And I recognize the Voodoo problem,

[15:39] * nothingmuch wonders how useful GPUs can be for general applications

[15:39] <SamB> geoffb: I don't care about the modern commercial 3D games really.

[15:39] <geoffb> which I think sucks, really

[15:39] <SamB> I'd just like to be able to play the simple stuff

[15:41] <geoffb> nodnod

[15:41] <geoffb> nothingmuch, what about project offset caught your eye?

[15:41] <nothingmuch> the graphics

[15:41] <geoffb> The joys of being able to assume HDR support

[15:41] <nothingmuch> i think there is no way they are that much more efficient than anyone else

[15:41] <nothingmuch> HDR support?

[15:42] <SamB> so basically I just play stuff that uses software for graphics

[15:42] <nothingmuch> what I suspect about them is that they really have a deep understanding of where they can fake it

[15:42] <geoffb> High Dynamic Range pixel values -- basically floating point brightness

[15:42] <nothingmuch> ah

[15:42] <geoffb> SamB, fair enough

[15:43] <nothingmuch> isn't there a practical limit of about 3 stops?

[15:43] <nothingmuch> in presentation?

[15:43] <geoffb> nothingmuch, HDR has a MASSIVE effect on believability, because the world is HDR, and our eyes are tuned to it.  The only reason 0-255 has lasted is that monitors are non-linear, I suspect

[15:44] <geoffb> nothingmuch, post-processing -- bloom, motion blur, etc.

[15:44] <nothingmuch> oh, logically you mean

[15:44] <geoffb> Or even, changing stop and having the color balance remain the same

[15:44] <geoffb> nothingmuch, yes

[15:44] <nothingmuch> still, you cannot display on any monitor a difference of more than 3 stops or so, right?

[15:44] <nothingmuch> okay

[15:45] <SamB> so you change the range being displayed, right?

[15:45] <nothingmuch> SamB: with real monitors you truncate two sides, yes

[15:45] <geoffb> Good monitors are in the range of several hundred to one dynamic range.  Which in itself is actually more precise than 8 bits on a linear scale -- hence 10 and 12 bits per channel on high end workstation systems

[15:46] <nothingmuch> slide film at it's best (e.g. fuji velvia) can store about 4.5 stops

[15:46] <nothingmuch> but you can't print that on anything

[15:46] * geoffb doesn't remember the stop conversions off the top of his head

[15:46] <nothingmuch> hybrid ink/light display systems can give significantly more than that, but they are expensive

[15:46] <nothingmuch> geoffb: 1 stop is 2x more light

[15:47] <geoffb> Um . . . then a good monitor is like 9-12 stops

[15:47] <SamB> so like you adjust the conversion depending on whether the scene is in a building or outside in the bright sunlight?

[15:47] <nothingmuch> that doesn't make sense

[15:47] <geoffb> yeah, hence my confusion.

[15:47] <nothingmuch> i think maybe it interpolates to around 4 maybe, from 12 bits

[15:48] * geoffb is used to thinking entirely in terms of linear dynamic range . . . .

[15:48] <nothingmuch> stops is a physical measuremeant

[15:48] <geoffb> nothingmuch, yes, I know.

[15:49] * nothingmuch has done a lot of spot metering lately

[15:49] <nothingmuch> gives a lot of perspective on things

[15:49] <geoffb> I meant, 500:1 contrast (real, not advertized crap), means darkest colors and brightest colors seperated by ~ 2^9

[15:49] <nothingmuch> but that is not literally the ratio of the amount of photons leaving the screen, is it?

[15:50] * nothingmuch wonders if high responsiveness digital ink + brighter lights will make screens do more than they do today

[15:50] <geoffb> Hmmm, I thought it was . . . but I could be wrong.  I do know that the mapping of pixel values to photons is a mapping of ^2.2 or so

[15:51] * nothingmuch is too tired to do the math

[15:51] <geoffb> nod

[15:51] * geoffb too

[15:51] <geoffb> How did we get on this discussion, anyway?

[15:51] <geoffb> Oh right, C++

[15:51] <nothingmuch> WRT game design:

[15:52] <nothingmuch> i think what I would like to do is make a multi threaded approach to things

[15:52] <nothingmuch> separate the aspects

[15:52] <geoffb> Modern processors would be happy with that.  :-)

[15:52] <nothingmuch> with one smart core in a HLL, that decides how much work each thread can do

[15:53] <nothingmuch> so, for example, if the scene is high movement, lots of action, the user is moving fast, and it's a FPS perspective, far away detail can just be blurred nicely, to pretend there is detail

[15:53] <geoffb> c.f. http://www.broadwell.org/graphics/pigge/docs/trends.html

[15:53] <nothingmuch> wheras in a birds eye view, other interpolations could be made

[15:53] <nothingmuch> this is just beceause fog really pisses me off

[15:53] <geoffb> And http://www.broadwell.org/graphics/pigge/docs/opt-notes.html , which I've been adding to this morning

[15:54] * nothingmuch wonders if some day assmebler will be a dependency tree

[15:54] <nothingmuch> this is a really nice concept for cell oriented processing

[15:54] <geoffb> nothingmuch, yeah, overdone fog just blows

[15:55] <autrijus> new discovery today: a well-written, complete CodeGen interface to .Net 1.0

[15:55] <autrijus> in haskell under bsd3 license :)

[15:55] <geoffb> oooh

[15:55] <nothingmuch> http://www.vision.net.au/~peter/pdspc/cradle%20mountain.jpg

[15:56] <nothingmuch> given a scene like this, i'd interpolate it so that the the mountian is in simple polygons, but appears to blernd

[15:56] <nothingmuch> it's slow movement WRT the user means that it can be panned instead of really implementing perspective

[15:56] <autrijus> actually, it's for ILX, so it's somewhat like between 1.0 and 2.0

[15:56] <autrijus> "2.0 without generics" etc

[15:56] <nothingmuch> the sky has to be non white

[15:56] <geoffb> What level is Mono at these days

[15:56] <nothingmuch> but the hue it is in this image

[15:57] <nothingmuch> the trees and stuff apear to be color blobs from a distance, so they should have lots of interpolation to make sure they don't look like they're sort of moving all the time

[15:57] <autrijus> Mono 1.2 is .Net 2.0 I think

[15:57] <geoffb> k

[15:57] <nothingmuch> nearby objects like the push obviously have to be made 3d-ish with great care

[15:57] <nothingmuch> because as the player moves the change of perspective in these things makes a huge difference

[15:59] <nothingmuch> nowadays all i see from game engines is "fade it till it's white, the user won't notice", and changing the shape of simple objects like trees

[15:59] <nothingmuch> into simpler ones, at a certain threshold

[16:12] <svnbot6> r7182 | fglock++ | * pil-run - when a sub is called with a junction argument, it returns a junction

[16:30] <svnbot6> r7183 | iblech++ | * Usual svn properties.

[16:30] <svnbot6> r7183 | iblech++ | * t/unspecced/evaluation_order.t: More subtests and test fixes.

[16:30] <svnbot6> r7183 | iblech++ | * PIL2JS: PIL::PAssign, PIL::PBind: Evaluate the LHS first, then eval the RHS

[16:30] <svnbot6> r7183 | iblech++ |   in assignment and binding.

[16:30] <svnbot6> r7183 | iblech++ |   (This means evaluation_order.t passes 9/10 now.)

[16:31] <vladtz_> hi

[16:32] <vladtz_> I just redefined a sub (not a multi), shouldn Pugs throw a fit on that?

[16:33] <Khisanth> heh has that part been implemented yet? :)

[16:35] <vladtz_> Just noticed that redefining a sub just gives me the latest one

[16:37] <geoffb> heh: '... the notion of a “typical development cycle” makes

[16:37] <geoffb> as much sense as a “typical noise.”'

[16:37] <nothingmuch> dinner

[16:41] * Khisanth stares at the funny looking quotes

[16:42] <geoffb> Khisanth, which?  Mine?

[16:42] <Khisanth> yes

[16:42] <geoffb> Just using different quoting around a cut-and-paste that used "

[16:43] <geoffb> oh wait, that's odd

[16:43] <geoffb> Hmmm, the paste must have included some odd quote

[16:43] <vladtz_> properly nested I might add

[16:59] * autrijus starts integing mm2 into hs

[17:00] <geoffb> autrijus++

[17:00] <geoffb> Now for iblech . . . 

[17:20] <stevan> autrijus: mm2 intergration? 

[17:22] <stevan> autrijus: let me know if you have any questions,.. I am around today,..

[17:42] <svnbot6> r7184 | fglock++ | * pil-run - fixed junction stringification

[17:51] <geoffb> Someone took a hash definition from my Perl source code, imported it into Excel, and made changes there.

[17:51] <geoffb> How could that possibly be the right thing to do?

[17:53] * geoffb does "save as text, answering several lame warning dialogs, write Perl script to strip off MS stupidity, manually paste result back into original source file

[17:53] <geoffb> BAH

[17:53] <Juerd> Did you hard code something that the user wanted to edit?

[17:54] <geoffb> We're merging data sources.  In this case, we're changing keys from his system to mine.

[17:55] * geoffb generally hates "Excel is a text editor" mentality

[17:57] <geoffb> The ugly thing is that instead of setting the import options so that at least the keys and values were in separate columns, he imported the entire hash definition into one column.

[17:57] <geoffb> So fields contain stuff like "    key  => 'value',"

[18:00] <svnbot6> r7185 | fglock++ | * pil-run - Junction.values() 

[18:00] <svnbot6> r7185 | fglock++ |   - this doesn't work yet, because it tries to call values() in the Junction elements

[18:33] <Juerd> geoffb: I hate it with Word... Fortunately, I haven't encountered that people use Excel for editing text yet.

[19:06] <svnbot6> r7186 | fglock++ | * perl5/Value - remove duplicates from junctions such as (0|1|1|1|2)

[19:27] <geoffb> Juerd, lucky you.  :-)

[19:30] <svnbot6> r7187 | luqui++ | Fixed the covariant problem on the union type expansion.

[19:30] <svnbot6> r7187 | luqui++ | There's still a little inconsistency with factories: unions

[19:30] <svnbot6> r7187 | luqui++ | don't really define factories.  Either we need to redefine

[19:30] <svnbot6> r7187 | luqui++ | factory, or we need to kill the abstraction, because it

[19:30] <svnbot6> r7187 | luqui++ | just ceases to be useful anymore.

[19:31] <fglock> putter: ping

[19:52] <nothingmuch> every time i think i get a grip on just how lazy haskell is, something new comes in and shows me to what extent it really is

[19:52] * nothingmuch just resolved listing two from http://www.haskell.org/tmrwiki/WhyAttributeGrammarsMatter in his head

[20:01] <svnbot6> r7188 | fglock++ | * new journal

[20:07] <svnbot6> r7189 | fglock++ | * perl5/Code - added Junction support to multisubs

[20:09] <fglock> implementing Junctions was amazingly easy - about 60-80 lines across various modules

[20:09] <fglock> I hope it is correct

[20:14] * Aankhen`` goes to sleep.

[20:15] <Aankhen``> G'night.

[20:48] <dduncan> seen ingy

[20:48] <jabbot> dduncan: ingy was seen 35 days 18 hours 52 minutes 6 seconds ago

[20:49] <dduncan> ping ingy ... about your only.pm module

[21:00] <nothingmuch> dduncan: once you catch him, tell him i want the patch to Test::Base committed

[21:00] <nothingmuch> and that if he ++s me about it again i'll kick him on the nose... he should just commit it instead of giving me karma

[21:01] <dduncan> in my case, I have issues that his only.pm hasn't been updated since last spring, and seems to have problems, failing its own tests etc

[21:01] <nothingmuch> did you post a bug in RT?

[21:01] <dduncan> that's another discussion item

[21:02] <dduncan> there are already bugs there, all marked 'new' ... he seems to be ignoring them

[21:02] <dduncan> they range in age from a few weeks to 2 years

[21:02] <nothingmuch> hmm

[21:02] <nothingmuch> maybe his mail address is misconfigured

[21:03] <nothingmuch> i'd try to find a socialtext email address

[21:03] <nothingmuch> it's more likely he won't ignore that

[21:03] <dduncan> what do you mean by 'socialtext'? ... is that an email he normally talks to people with?

[21:03] <nothingmuch> it's his job

[21:04] <nothingmuch> and since his work is mostly network based, i bet he has to read it to communicate with his coworkers

[21:04] <nothingmuch> autrijus might also know how to get him

[21:13] <svnbot6> r7190 | autrijus++ |  r7196@not:  autrijus | 2005-09-28 11:04:59 +0300

[21:13] <svnbot6> r7190 | autrijus++ |  r7197@not:  autrijus | 2005-09-28 11:28:35 +0300

[21:13] <svnbot6> r7190 | autrijus++ |  * beginning of the main pugs cabal file

[21:13] <svnbot6> r7190 | autrijus++ |  r7198@not:  autrijus | 2005-09-28 12:36:41 +0300

[21:13] <svnbot6> r7190 | autrijus++ |  * some more metadata for Pugs.cabal.

[21:13] <svnbot6> r7190 | autrijus++ |  r7211@not:  autrijus | 2005-09-28 21:27:14 +0300

[21:13] <svnbot6> r7190 | autrijus++ |  * releng: normalize and todoize tests.

[21:13] <svnbot6> r7190 | autrijus++ |  r7221@not:  autrijus | 2005-09-29 00:05:29 +0300

[21:13] <svnbot6> r7190 | autrijus++ |  * Remove the unreferenced Pugs.AST.Types.

[21:13] <svnbot6> r7190 | autrijus++ |  * Move the ill-named Pugs.Context back inside Pugs.Types.

[21:13] <svnbot6> r7190 | autrijus++ |  * Reuse its Tolkien quote for the underquoted Pugs.Version.

[21:13] <svnbot6> r7191 | fglock++ | * perl5/Junction - fixed boolean junctions such as ?(1|0)

[21:14] <nothingmuch> heh

[21:30] <autrijus> finally got some network

[21:30] <autrijus> journal up. :)

[21:30] <svnbot6> r7192 | fglock++ | * perl5/Scalar - fixed Scalar->isa() when the content is unboxed

[21:34] <stevan> hey autrijus, any MM 2 hacking today?

[21:35] <autrijus> stevan: yes, mostly on the reading part

[21:35] <stevan> ah

[21:35] <autrijus> ...but then promptly sidetracked into comparing it with dylan

[21:35] <stevan> dylan++ # the language and Bob

[21:36] <stevan> how does it compare to dylan?

[21:36] <autrijus> Bob++

[21:36] <dduncan> so you hacked GHC itself ... did they say when 6.6 would be stable?

[21:36] <autrijus> dduncan: yes, end of this year

[21:36] <stevan> C3 is actually from Dylan originally

[21:36] <autrijus> they want to have a faster release cycle

[21:36] <autrijus> for 6.6, due to the SMP feature

[21:36] <dduncan> and at that time, presumably 6.6 will be a new minimum requirement for Pugs?

[21:36] <autrijus> multiprocessor GHC plus STM is gotta rock

[21:36] <stevan> some of the MRO test suite actually uses some examples from the oroginal Dylan c3 paper

[21:37] <autrijus> dduncan: sure

[21:37] <stevan> autrijus: nice bpierce was there

[21:37] <autrijus> stevan: favourably, I'd say, except we don't have singleton methods

[21:38] * stevan has been hacking up all the untyped lambda calculus examples from TaPL today

[21:38] <autrijus> aka per-object methods

[21:38] <autrijus> aka eigenclasses

[21:38] <stevan> autrijus: yes, I have been giving that some thought

[21:39] <stevan> nothing has come to mind yet, other than the obvious solution of augmenting the instance type

[21:39] <autrijus> the rest I think I have a good grasp on

[21:39] <autrijus> but I'm still struggling a bit to grok psyche

[21:39] <stevan> but it seems to me there is a better solution out there

[21:39] <stevan> autrijus: its very simple

[21:39] <stevan> Role is an instance of a Class

[21:39] <stevan> obviously

[21:40] <autrijus> sure, I understand the concept

[21:40] <autrijus> the drawing

[21:40] <autrijus> so explain FETCH to me

[21:40] <stevan> which one?

[21:40] <stevan> in ::Package

[21:40] <autrijus> in psyche

[21:40] <autrijus> for ::Role

[21:40] <autrijus> afte 

[21:40] <autrijus> # TODO ... implement the package interface

[21:40] <stevan> oh,.. one sec,...

[21:41] <stevan> ah,.. this is the same as the ::Class FETCH

[21:41] <svnbot6> r7193 | fglock++ | * perl5/Junction - added support for "if", as in:

[21:41] <svnbot6> r7193 | fglock++ |   if all(1..3)==(1|2) { say "ok" } else { say "not ok" }

[21:42] <stevan> for the most part at least

[21:42] <stevan> all FETCH is, is the way to get at the symbol table

[21:42] <dduncan> the journal is very interesting as usual ... thanks for sharing

[21:42] <autrijus> so FETCH is the pkg spec

[21:42] <stevan> ::Package just grabs right from the %:namespace attribute

[21:42] <autrijus> dduncan: no prob :) I think I'm getting more journaling slices of time

[21:42] <stevan> and ::Class must also attempt to fetch methods and attributes

[21:43] <autrijus> ahhhh.

[21:43] <autrijus> that's the link I'm missing

[21:43] <stevan> this is per @Larry[0]

[21:43] <stevan> see my recent Package, Module Class thread I think

[21:43] <autrijus> k

[21:44] <autrijus> so the only differnece is

[21:44] <autrijus> Roles doesn't need the "for" key

[21:44] <stevan> for?

[21:44] <autrijus>     $params->{for} = 'instance' if not exists $params->{for};

[21:45] <autrijus> since the "role methods" doesn't exist as such

[21:45] <autrijus> is that the idea?

[21:45] <stevan> the type of the method in a role is irrelevant

[21:46] <stevan> only the class cares because it has to put them in the proper tables

[21:46] <stevan> s/tables/method dispatch tables/

[21:46] <stevan> Role just holds onto them until they are put into the class

[21:47] <autrijus> k. got it completely.

[21:47] <autrijus> I think I can implement it tomorrow :)

[21:47] <autrijus> will ask more questions as they come by

[21:48] <stevan> one key think to keep in mind is that Role as implemented in the metamodel is more permissive than is speced

[21:48] <stevan> it is more like how Scala does Roles (which they call traits)

[21:48] <stevan> so all classes can be treated as Roles

[21:48] <autrijus> stevan++ # nice concise formulations

[21:48] <autrijus> right, it's more natural to my brain anyways

[21:48] <stevan> cool

[21:48] <stevan> :)

[21:48] <autrijus> and I think larry is also leaning that way

[21:48] <autrijus> gradually and one bit at a time, but nevertheless

[21:48] <stevan> those restrictions should be in the metamodel anyway

[21:48] <autrijus> aye

[21:49] <stevan> they should be in the language

[21:49] <autrijus> you mean it's up for compiler to enforec those.

[21:49] <autrijus> I'm inclined to agree :)

[21:49] <stevan> yes

[21:49] <autrijus> but then

[21:49] <autrijus> that means at runtime you can wreck all havoc.

[21:49] <autrijus> since no compiler will protect you then

[21:49] <stevan> no, we just dont expose it to the user

[21:49] <autrijus> ...which is probably a feature

[21:49] <autrijus> ah. hm.

[21:49] <stevan> it is not part of the protocol

[21:49] <autrijus> okay... so no runtime reroling

[21:49] <stevan> so if you do it,.. undefined results

[21:50] <stevan> most of this functionality would involve the &resolve method

[21:50] <stevan> and that should not be in the public MOP

[21:50] <stevan> the compiler should call that

[21:51] <stevan> if that is not exposed, I think control can be easily retained

[21:51] <autrijus> ok. so the protocol is not yet laid out?

[21:51] <stevan> that is docs/s12.5.pod

[21:51] <autrijus> er, I mean in code.

[21:51] <stevan> it will document what the user will have access too

[21:51] <stevan> no... the MOP is just a documented API to the metamodel

[21:51] <autrijus> ok... I can see that

[21:52] <autrijus> that's fine with me

[21:52] <stevan> we can choose to enforce what is exposed to the user level or just tell them "it is here, but dont touch it"

[21:53] <stevan> this is how CLOS is,.. because they had to allow for all sorts of insanity,.. they left some parts open,.. but did not document in the CLOS MOP spec

[21:53] <stevan> so if you were brave enough,.. you could do anything you wanted

[21:53] <stevan> but no guarantee on the results of it

[21:53] <autrijus> maybe we can prefix all such things with unsafe ;)

[21:53] <autrijus> unsafeReblessRoles

[21:53] <stevan> yes

[21:53] <autrijus> unsafeAddMethod

[21:53] <stevan> addmethod shoudl be safe

[21:53] <autrijus> true

[21:54] <autrijus> unsafeRemoveMethod

[21:54] <stevan> that too

[21:54] <autrijus> hm.

[21:54] <stevan> not sane.. but safe

[21:54] <stevan> you are only affecting classes

[21:54] * autrijus tries to look at it from the runtime pov

[21:54] <stevan> once a class is composed (all the roeles are flattened into it), you can do anything you want

[21:54] <autrijus> mmm yeah. sorta. I think you are correct.

[21:55] <stevan> the thing with roles is to remember that once they are consumed by the class,.. changes to the role do not propagate back

[21:56] <autrijus> right

[21:56] <stevan> I am interested to see how this gets integrated into the runtime

[21:57] <stevan> putter and I had many discussions about that,. and I was never really sure how it would all fit together

[21:57] <autrijus> I've spent lots of time thinking about container types and MMs and the symbol table and the environment

[21:58] <autrijus> I'm now leaning toward swapping out the runtime en masse but keep the old Exp data type

[21:58] <svnbot6> r7194 | fglock++ | * pil-run - small fix in junction constructor

[21:59] <autrijus> since preserving Eval is important

[21:59] <autrijus> but so is getting the OO part correct

[21:59] <autrijus> but I think I want a release first soon

[21:59] <stevan> so will things like arrays, hashes, scalar, code be implemented as primatives?

[21:59] <autrijus> stevan: yes, exactly, since the current semantics in Types.* and autoderef is just broken

[21:59] <stevan> then later wrapped by the metamodel

[21:59] <autrijus> (not thru our fault)

[21:59] <autrijus> anyway, the release is due to Parrot 0.3.0 and GHC 6.4.1

[21:59] <autrijus> need to work with both

[22:00] <autrijus> mm, 1am now

[22:00] <autrijus> I should probably catch some sleep if I'm to learn anything about Curry tomorrow

[22:00] <stevan> :)

[22:01] <stevan> I need to go eat dinner myself

[22:01] <stevan> good to talk to you again,. it has been a while :)

[22:01] <autrijus> k. see you tomorrow :)))

[22:01] <stevan> night 

[22:01] <autrijus> yeah, it's been a very long month and half

[22:01] <autrijus> good to see that pugs was still in very good hands :)

[22:02] <autrijus> zzz &

[22:02] <dduncan> night

[22:04] <nothingmuch> woot!

[22:04] <nothingmuch> exceptuations seem like they've been accepted

[22:11] <ingy> hi nothingmuch 

[22:11] <nothingmuch> ingy!

[22:11] <nothingmuch> please commit Test::Base

[22:11] <nothingmuch> err, the patch to thereof

[22:12] <nothingmuch> and fix dduncan 's bug in only

[22:12] <dduncan> hi ingy

[22:13] <dduncan> I was just about to write into RT, but I'll tell you here first

[22:13] <ingy> ok...

[22:14] <ingy> nothingmuch: where is the patch?

[22:14] <nothingmuch> i forget now... but it's against 0.43 =(

[22:14] <nothingmuch> one second, i'll find it

[22:14] <dduncan> with the newest only.pm, and when using a module whose version is 0.12 old-style, saying "use only 'Foo' => '0.13-'" does not produce an error

[22:14] <nothingmuch> do you mind doing integration?

[22:15] <dduncan> however, saying either '0.130-' or '0.13' does produce an error

[22:15] <dduncan> while '0.130-' would have the desired effect, one should be able to match the version format they are used to, and that your documentation shows, which is plain '0.13-'

[22:16] <dduncan> on separate matters with only.pm, your test suite fails most of its tests, and all the RT items for it seem to have been ignored

[22:17] <xinming_Beijing> make: *** No rule to make target `src/Pugs/Context.hs', needed by `pugs'.  Stop.

[22:17] <xinming_Beijing> Is it the right action for command `svn update && make` right now?

[22:17] <dduncan> my specific situation is that List::MoreUtils 0.12 fixed a bug in 0.11, and I want to require '0.12-', but I'm not confident that only.pm will enforce my dependency in its current state

[22:19] <geoffb> xinming_Beijing, have you made clean recently?

[22:19] <geoffb> aut* just merged that file into another

[22:20] <nothingmuch> http://www.cs.uu.nl/groups/ST/Projects/ehc/current-ehc-src.tgz

[22:20] <nothingmuch> bah

[22:20] <nothingmuch> http://nothingmuch.woobling.org/test_base.patch

[22:20] <nothingmuch> Test::Base 0.43

[22:21] <nothingmuch> adds support for post filter skip/todo

[22:21] <nothingmuch> and prints out a plan

[22:22] <nothingmuch> http://feather.perl6.nl/~nothingmuch/harrorth/misc/Forth/t/07_gforth_style_recursion.t

[22:22] <nothingmuch> http://feather.perl6.nl/~nothingmuch/harrorth/misc/Forth/t/lib/Forth/Interp/Test.pm

[22:22] <nothingmuch> as you can see, the skip filter will check if the currently used backend is in the skip list

[22:22] <nothingmuch> and it will set skip to be a true value

[22:22] <nothingmuch> if not, skip becomes false

[22:23] <geoffb> stevan, is there anything relevant to understanding MM2 that is outside perl5/Perl6-MetaModel2.0/ ?

[22:23] <dduncan> the following line is a test ...

[22:23] <dduncan> seen ingy

[22:23] <jabbot> dduncan: ingy was seen 9 minutes 22 seconds ago

[22:23] <dduncan> seems right

[22:23] <nothingmuch> dduncan: i think jabbot was missing for a long time

[22:23] <dduncan> so it really was over 30 days since last checkin

[22:23] <nothingmuch> not necessarily

[22:23] <xinming_Beijing> geoffb: hmm, In fact, I didn't, never do this. :-)

[22:24] <dduncan> seen asfdafdasfds

[22:24] <jabbot> dduncan: I havn't seen asfdafdasfds, dduncan

[22:24] <geoffb> There's probably a workaround, but I would consider just make clean if I were you

[22:25] <nothingmuch> http://colabti.de/irclogger/irclogger_log/perl6?date=2005-09-14,Wed#l408

[22:25] <xinming_Beijing> geoffb: hmm, Ok, I did just now

[22:25] <geoffb> And did a subsequent make do the trick?

[22:25] <dduncan> ingy, when testing your only.pm changes, also make sure you're up to the newest version.pm ; it was updated several times since the last only.pm release; the current one is 0.48, released sept 14

[22:25] <geoffb> I guess it would take a while to know . . . 

[22:26] <nothingmuch> ingy: ping

[22:33] <stevan> geoffb: re: mm2.0 please note the docs are slightly out of date

[22:34] <stevan> geoffb: other than that familiarity with the concept of object metamodels and perl 6's object model should be the only req.

[22:34] * stevan dinner &

[22:34] <geoffb> stevan, OK, understood.  When they are fixed, would you mind making that clear in the commit log?

[22:35] <geoffb> That way I can just watch svnbot to know when it is best to go diving into the docs.

[22:35] <geoffb> :-)

[22:35] * geoffb has been promising himself to study stevan's MM work in more depth for a while now

[22:35] <nothingmuch> geoffb: just dive in

[22:35] <nothingmuch> it's simpler than it seems

[22:36] <geoffb> MM 2 being folded into both P5 and Haskell backends is the kick I needed

[22:36] <nothingmuch> start with the mini metamodel

[22:36] <geoffb> nothingmuch, I have to balance that particular studying opportunity with all the other stuff I am currently studying.

[22:36] <geoffb> And then there's $work . . . .

[22:37] <nothingmuch> well, i doubt the docs can make it much simpler - the code is readable

[22:37] <nothingmuch> very readable (stevan++)

[22:37] <geoffb> I like to time task switches with things being all happy when I get there.  Lazy, I know.  :-)

[22:37] <geoffb> nothingmuch, nodnod, fair enough.

[22:37] <nothingmuch> and the concept is very clean - unlike many other metamodels it really clicks in your brain

[22:38] <geoffb> That's good to hear.  Means stevan probably has it Right.

[23:36] <nothingmuch> i think we care about this: http://archive.cs.uu.nl/pub/RUU/CS/techreps/CS-2002/2002-031.pdf

[23:36] <nothingmuch> autrijus: please read when you wake up

