[00:05] <Corion> Grrr. The build is broken, at least at r2222

[00:05] <Corion> Could not find module `Pugs.Types.Pair':

[00:05] <Corion> ... but then, it's bedtime for me anyways :)

[00:07] * Corion goes to sleep

[00:08] <theorbtwo> G'night, all.

[00:30] * nothingmuch sighs

[01:12] <nothingmuch> does anybody know how to debug javascript?

[01:12] <nothingmuch> i'm causing s5's js to freeze

[01:12] <nothingmuch> fudging spork templates

[01:23] *** sbkhh is now known as Odin-

[01:25] <stevan> nothingmuch: ping

[01:26] <nothingmuch> PONG

[01:26] <stevan> debugging JS

[01:27] <stevan> are you using Safari?

[01:29] <nothingmuch> safari crashed

[01:29] <nothingmuch> switched to moz

[01:29] <nothingmuch> but solvee

[01:29] <nothingmuch> d

[01:29] <stevan> ok

[01:29] <nothingmuch> it was an old version of a the .js by accident

[01:29] <stevan> yeah Safari has horrible JS debugging

[01:29] <nothingmuch> couldn't handle the DOM

[01:29] <stevan> you have to activate the Safari debug menu, and then it logs exceptions to console

[01:29] <stevan> but not very good errors 

[01:30] <stevan> Firefox's JS console is much better

[01:48] <nothingmuch> wooo! spork can now make proper s5

[01:48] <nothingmuch> with class="incremental" and all

[02:21] *** metaperl__ is now known as metaperl_

[02:37] <nothingmuch> good night

[02:50] *** khisanth__ is now known as Khisanth

[03:05] <autrijus> sorry for breaking the tree. it's now repaired.

[03:05] <autrijus> family &

[03:08] <ingy> nothingmuch: ping

[03:09] <ingy> nothingmuch: I got your email, but no  patch

[03:11] *** metaperl__ is now known as metaperl_

[03:11] <autrijus> also: http://perlmonks.org/?node_id=450638

[03:11] <autrijus> &

[06:16] *** castaway_ is now known as castaway

[07:07] <masak> morning

[07:46] <Corion> A good morning!

[07:47] <cls_bsd> B good afternoon

[08:07] <Corion> r2224 - http://datenzoo.de/pugs/win2k.html

[08:07] *** Corion changes topic to: pugscode.org <Overview Journal Logs> | r1773/winxp: 587/4256, smoke/win2k (occasional): http://xrl.us/fqum (175/4315, r2224), Mac OS X (160/4483, r2216) | pugs.kwiki.org

[08:22] * masak is stuck in a compulsive svn up/compile loop

[08:22] <masak> does anyone know where to get good info on kwid?

[08:32] <Corion> masak: Punch Ingy

[08:40] <masak> corion: ok

[08:57] *** Corion changes topic to: pugscode.org <Overview Journal Logs> | r1773/winxp: 587/4256, smoke/win2k (occasional): http://xrl.us/fqum (156/4334, r2227), Mac OS X (160/4483, r2216) | pugs.kwiki.org

[09:02] <masak> is the following correct behaviour?

[09:03] <masak> bash-3.00$ pugs -e 'my $a = [1, 2, 3]; say $_ for $a' # prints 1

[09:07] <gaal> Can anyone explain Prim.hs:993 and around, where ther'es special treatment for unary ops?

[09:07] <gaal> looks like a breakout kinda deal, where a unary can in fact be n-ary? Is that for someop @array?

[09:24] <Corion> Hmmm. Should there be any difference in sub foo(Array @got) { ... }; foo(splice(...)); # and my @res = splice(...); foo(@res); ?

[09:24] <Corion> From what I think I see, @res = splice() # propagates list context to the splice() call, but foo(splice(...)) doesn't.

[09:25] <Corion> Is that a bug? Is that a feature? Where would it be described, and where are the context calls tested?

[09:33] <autrijus> greetings.

[09:34] <autrijus> I've eliminated the context call code... give me a sec to check it in

[09:34] <autrijus> jhc is progressing rapidly. I think we can and should steal its code ;)

[09:35] <autrijus> (jhc = another haskll compiler written in haskell, and in some case generate far more optimized code than ghc)

[09:35] <autrijus> and it's also written by someone as his second haskell project :)

[09:36] <Corion> autrijus: Ah - so I should revert my changes to the test that removed the dependency on the context? Should we write a test that checks the context propagation for foo(bar()) ?

[09:36] <Corion> autrijus: The people actually writing Haskell by choice (and not by force) seem to be competent :)

[09:37] <Corion> ... Haskell doesn't seem to reward idiotic coding behaviour as much as Perl does :-)

[09:37] <Corion> S06 doesn't talk about context and how it is propagated :(

[09:37] <autrijus> but I have pretty good idea of it now :)

[09:38] <autrijus> basically, if an operator has a slurpy signature, it imposes slurpy context on the arguments in those positions

[09:38] <Corion> autrijus++

[09:38] <autrijus> otherwise it imposes item context.

[09:39] <autrijus> that's all. yaya

[09:39] <Corion> autrijus: So, should I think about how to infer context without using want() ? Or should the context testing simply use want() ?

[09:39] <autrijus> I think using want() is probably good enough for now

[09:40] <Corion> autrijus: Are you aware of anything existing that explicitly tests the context behaviour? I didn't find anything below t/subroutines/ to that regard... Or should that go into t/builtins/want.t ?

[09:41] * Corion jots down a small test that checks for the identity of @res = foo(); bar(@res) and bar(foo())

[09:43] <masak> i get unexpected results when iterating over an arrayref

[09:43] <masak> pugs -e 'my $a = [1, 2, 3]; say $_ for $a' # prints 1

[09:44] <autrijus> I think that's correct.

[09:45] <autrijus> hrm

[09:45] <autrijus> no

[09:45] <autrijus> it should've printed the strigified [1,2,3]

[09:45] <autrijus> sec.

[09:45] <masak> oki

[09:45] * autrijus is fixing list association parsing

[09:45] <masak> it also only prints one element when iterating over nested arrayrefs

[09:46] <masak> pugs -e 'my $a = [[1,2],[3,4]]; say $_ for $a' # prints 1

[09:47] <masak> very strange

[09:49] <autrijus> the comma was broken. apologies

[09:51] <Corion> Hmmm. I think I have some new interesting tests in want(), and maybe a bug in splice, but I'm not sure. I'll commit now ;)

[09:53] *** integral is now known as integral|ZzZzz

[09:54] * autrijus praises parsec

[09:55] <autrijus> landed!

[09:56] <autrijus> r2230

[09:57] <Corion> Ah. I think I found a bug in splice() - in scalar context it should return the last result of the result-list and not of the original array, shouldn't it ?

[09:57] <autrijus> I'd think so.

[09:57] <Corion> ... at least my test results point in the direction that there is a bug :)

[09:57] <autrijus> good :)

[09:57] <autrijus> care to run another round of smoke for r2230?

[09:58] <autrijus> I _think_ it won't break everything.

[09:58] <Corion> autrijus: Just committing and now starting a smoke session

[09:59] <autrijus> ok. I'm fixing abs.t bug, orthogonal to other things

[09:59] <Corion> Bwahahah :) jhc is, again, using Perl :)

[10:00] <Corion> They should simply embed Perl! :)

[10:00] <Corion> autrijus: r2231 builds and is now smoking

[10:00] <autrijus> haskelldirect does embed perl :)

[10:00] <autrijus> although I think Inline::GHC will make it even easier

[10:01] <autrijus> I think there is a distinct advantage in mixing the most practical and the most elegant languages together :)

[10:01] <autrijus> that neatly kills the waterbed complexity problem.

[10:01] <autrijus> "everything becomes trivial"

[10:02] <autrijus> because each one is, from the other one's side of view, making "hard things easy and easy things possible"

[10:02] <Corion> autrijus: You mean, just put everything into the RunPerl monad! :)

[10:02] <autrijus> yes!

[10:02] <Corion> err - Eval

[10:02] <Corion> :)

[10:02] <autrijus> :)

[10:02] <autrijus> (but we can safely ignore the two 'easy things possible' bits)

[10:04] <autrijus> abs.t fixed

[10:09] <Corion> Ooops - pugs: src/Pugs/Eval.hs:324:12-33: Irrefutable pattern failed for pattern [Pugs.AST.Var name, exp]

[10:09] <Corion> in t/operators/binding.t

[10:09] *** castaway is now known as theorbtwo

[10:10] <autrijus> yeah, that's parenthesized binding

[10:10] * theorbtwo wonders if he should be worried about the poliferation of symbolic references.

[10:10] <theorbtwo> (Probably not.)

[10:10] <autrijus> symbolic references?

[10:10] <autrijus> the bindings things worries me.

[10:10] <theorbtwo> Var is the name of a variable.

[10:11] <autrijus> theorbtwo: you'd like to somehow use unique id generators?

[10:11] <autrijus> that is little win at the AST level I think.

[10:11] <autrijus> $x := $x; # this is no-op or infinite loop?

[10:11] <theorbtwo> So long as they don't end up leaking across scopes.

[10:11] <autrijus> $x := $x + 2; # what about this?

[10:12] <autrijus> theorbtwo: you can't put a Var into a Val

[10:12] <autrijus> theorbtwo: neither can you deref it as part of AST

[10:12] <theorbtwo> OK then.

[10:12] <autrijus> so we are safe. I can see the case of MkVar just to make things clear.

[10:12] <autrijus> (just like MkType)

[10:12] <autrijus> newType Var = MkVar String deriving (Show, Eq, Ord)

[10:12] <autrijus> err, newtype Var = MkVar String deriving (Show, Eq, Ord)

[10:12] <autrijus> then fix all type errors

[10:12] <autrijus> you up for it? :)

[10:13] <autrijus> (that will eliminate accidentally mixing the Var type with Strings)

[10:13] <theorbtwo> $x := $x is a nop -- "$x now refers to the variable formerly known as $x."

[10:13] <autrijus> what about functional application then.

[10:13] <autrijus> $x := fun($x)

[10:13] <theorbtwo> Possibly later; right now I'm hacking at Jess's CSS.

[10:13] <autrijus> sure.

[10:14] <theorbtwo> Not sure what happens when you have an expr on the RHS of the := operator.

[10:14] <autrijus> yet we allow

[10:14] <autrijus> $x := @a[0][2][3]

[10:14] <theorbtwo> Possibly make it a nonlazy thunk?

[10:14] <theorbtwo> /always/ compute the /current/ value of @a[0][2][3]?

[10:14] <autrijus> or does that it autovivify @a[0][2][3] immediately?

[10:14] <autrijus> aha.

[10:14] <theorbtwo> rvalue never autovivs.

[10:14] <autrijus> well, but does it autovivify or not?

[10:15] <autrijus> then it is conceptually a thunk.

[10:15] <autrijus> $x := @a[0]   is no diff from

[10:15] <autrijus> $x := deref(@a, 0)

[10:15] <autrijus> and is very diff from

[10:15] <autrijus> $x := $a

[10:15] <autrijus> this inconsistency is bad.

[10:15] <theorbtwo> Not very different; either way you always get the current value of the thing on the right hand side.

[10:15] <autrijus> no, not really.

[10:15] <theorbtwo> (Using the pad in effect at the time the RHS was written.)

[10:16] <autrijus> $x := $a; $a := $z;

[10:16] <autrijus> $x = 3; 

[10:16] <autrijus> should $z change?

[10:16] <autrijus> 18:16 < autrijus> $x := $a; $a := $z;

[10:16] <autrijus> 18:16 < autrijus> $x = 3;

[10:16] <autrijus> should $z change?

[10:16] <theorbtwo> No, $x became the variable fomerly known as a.

[10:16] <autrijus> but!

[10:17] <autrijus> $x := $a[0]; $a := $z;

[10:17] <autrijus> $x = 3;

[10:17] <autrijus> $z[0] changes.

[10:17] <autrijus> or does it?

[10:17] <theorbtwo> Ooof.

[10:17] <autrijus> it has to change, or $a[0] needs to vivify.

[10:17] <autrijus> I don't see a third option

[10:18] <theorbtwo> The reference in the thunk needs to be a hard reference.

[10:18] <autrijus> if it changes, that := is very different from the former :=

[10:18] <autrijus> but you can't hard reference to something that wasn't there.

[10:18] <autrijus> $x := $a[0]; $x = 3; # error!?

[10:18] <theorbtwo> Mm.

[10:18] <theorbtwo> OK, I'm offically confused.

[10:18] <autrijus> good. I am too.

[10:18] <autrijus> I will take the "always thunking" interpretation

[10:18] <autrijus> and outlaw ($x, $y) := ($y, $x)

[10:18] <autrijus> and write p6l.

[10:19] *** theorbtw1 is now known as castaway

[10:20] <castaway> $x := $a[0] looks like an error to me

[10:20] <autrijus> I wush.

[10:20] <autrijus> wish.

[10:20] <autrijus> S06:

[10:20] <autrijus> my $pivot := shift @data;

[10:21] <autrijus> (who => $name, why => $reason) := (why => $because, who => "me");

[10:21] <castaway> where @data didnt exist previously?

[10:21] <autrijus> better, s09

[10:21] <autrijus>  @b := @a[0...:by(2)]

[10:21] <autrijus> explain that? :)

[10:21] <machack666> I was wondering about the adverbs and range ops myself

[10:22] <autrijus>  my $endpos := $string.chars;        # $endpos == 3

[10:22] <machack666> I assume that the range op is a function to which the adverb is passed as an additional parameter at the end

[10:22] <autrijus> (a12)

[10:22] <castaway> is the word "binding" described anywhere ?

[10:23] <machack666> isn't it just a variable alias

[10:23] <autrijus> castaway: yes, s02.

[10:23] <autrijus> but it does not explain

[10:23] <autrijus>     my $endpos := $string.chars;

[10:23] <autrijus> which is very troubling.

[10:23] <theorbtwo> Are there any examples where it gets called more then once?

[10:24] <castaway> http://tnx.nl/S02 (lazy typist)

[10:24] <autrijus> castaway: cool

[10:24] <theorbtwo> my $pivot := shift @data would seem like an odd thing to do under the always thunk interp.

[10:24] <autrijus> theorbtwo: $endpos?

[10:24] <autrijus> in a12 $endpos is called multiple times.

[10:24] <castaway> except its not dwiming..

[10:24] <machack666> is it bound to the chars array in scalar context, i.e., when the size of the array changes, the variable is automatically updated?

[10:25] <machack666> I don't know if it is bound to the array, or bound to the method call...

[10:25] <theorbtwo> I was taking the interpretation that there wasn't a variable there to update, only the thunk.

[10:25] <Corion> r2231 - http://datenzoo.de/pugs/win2k.html

[10:26] <masak> my @a = (1..Inf); @a := @a[0...:by(2)] # ouch :)

[10:26] <Corion> (next smoke starting)

[10:26] <theorbtwo> "... if you bind to a position rather than assign, it tracks the string in question"

[10:27] <theorbtwo> That sounds like always thunk.

[10:27] <theorbtwo> Sadly, in the example he uses, I can't think of a way that it wouldn't always be 3.

[10:27] <machack666> is there a link for what thunks are?

[10:27] <machack666> or a quick description?

[10:28] <autrijus>     my ($x, @a);

[10:28] <autrijus>     $x := @a[-1];

[10:29] <autrijus> machack666: thunks are closure functions that takes no arguments.

[10:29] <castaway> that endpos example seems fairly clear to me

[10:29] <autrijus> castaway: clear in the sense that it is thunking?

[10:29] <autrijus> then

[10:30] <autrijus> $x := $x; # should then be infinite loop

[10:30] <castaway> It shows that $endpos gets set to 3, but changes to the string var will cause $endpos to change

[10:30] * castaway has no idea what thunking is

[10:30] <autrijus> castaway: thunking means that the variable is linked to an expression

[10:30] <autrijus> not a storage location

[10:30] <autrijus> that is like saying

[10:30] <machack666> so the question is whether the closure is recalled each time we access the bound variable, or if it is initialized to the value of the variable or expression assigned to

[10:31] <autrijus> $endpos = mkProxy(sub { $string.chars });

[10:31] <autrijus> and all read and write to $endpos will be read and write to the thing yielded by evaluating that sub.

[10:31] <castaway> (fun, it looks like an elisp marker, btw)

[10:31] <castaway> isnt it vice versa?

[10:32] <theorbtwo> Here's another fun one -- if it's an always-thunk, then unoptimizables can be passed around willy-nilly all the time.

[10:32] <machack666> so is there an implicit lvalue returned from the mkProxy?

[10:32] <autrijus> machack666: if you use it as lvalue then it calls that closure using lvalue context

[10:32] <autrijus> theorbtwo: what is unoptimizables?

[10:33] <autrijus> castaway: uh, I was explaining the thunking, not the storage location

[10:33] <theorbtwo> Things you can't do common subexpr optimizations on, because they might change value while you aren't looking.

[10:34] <castaway> I'm going to say its not thunking.. just for the hell of it. how would it calc its current status, at all?

[10:34] <castaway> (also, for bonus points, hows it get set to anywhere in the middle of the string, and not just the end/beg pos?)

[10:34] <autrijus> theorbtwo: ah.

[10:35] <Corion> castaway: I would assume that middle position needs an "absolute" thing, while only "-1" can be relative.

[10:35] <theorbtwo> $x = instr('x', $foo);

[10:35] <Corion> Even "0" has no way of discerning if it's meant to be relative or absolute

[10:36] <theorbtwo> $foo='10 x 3'; #$x now 4.

[10:36] <Corion> (all negative indices will be "absolute" from the end of the string)

[10:36] <castaway> it would be had you used :=

[10:36] <theorbtwo> $foo='4x4'; # $x now 2.

[10:36] <theorbtwo> Er, make that $x := instr...

[10:38] <castaway> ok, making it be instr makes sense, because you can run that expr everytime, and get the right answer

[10:39] <castaway> but Larrys example in A12 does something different

[10:39] <castaway> $endpos doesnt always point to the end of $string, so it cant just run .chars everytime

[10:39] <castaway> it points to where that particular part of the string ends.. (thus the second half of the example sets it to 2, not 5)

[10:39] <castaway> so, as I just asked, what expr would it be linked to there?

[10:41] <machack666> if the chars array is the same for the variable and is just grown/shrunk for additions/reassignments, binding to the array itself would have the impact of returning the current length, would it not?

[10:41] <machack666> that doesn't help with the relative indicies, but it explains the endpos.

[10:42] <machack666> positive indices would be bound in a fixed location

[10:43] <theorbtwo> When you call .chars, .instr, etc, you don't get an integer, just something that nummifies when forced.

[10:43] <theorbtwo> (IE with the == operator.)

[10:44] <castaway> machack666: that made no sense to me

[10:44] <autrijus> I have worked it out!

[10:44] <theorbtwo> Woo!  Tell us all about it?

[10:44] <machack666> not surprised; I've only had 10 hours of sleep in the last 4 days

[10:45] <Corion> r2232 - http://datenzoo.de/pugs/win2k.html

[10:45] * castaway copies a chunk of the elisp manual on positions into A12 .)

[10:46] <Corion> castaway: Yep - that stuff surely sounds like it's from (or for) a text editor. But it's a useful concept to have :)

[10:46] * theorbtwo wonders if Larry was simply crazy trying to use := (which tends to change things behind your back) with position objects (which tend to change behind your back).

[10:46] <Corion> So now, Perl can also claim to have stolen from Emacs and vi, in addition to programming languages :)

[10:47] *** Corion changes topic to: pugscode.org <Overview Journal Logs> | r1773/winxp: 587/4256, smoke/win2k (occasional): http://xrl.us/fqum (81/4418, r2227), Mac OS X (160/4483, r2216) | pugs.kwiki.org

[10:47] <theorbtwo> Emacs isn't a programming language?

[10:47] <broquaint> How? It sounds crazy, in a good way.

[10:47] *** Corion changes topic to: pugscode.org <Overview Journal Logs> | r1773/winxp: 587/4256, smoke/win2k (occasional): http://xrl.us/fqum (81/4418, r2232), Mac OS X (160/4483, r2216) | pugs.kwiki.org

[10:47] <castaway> elisp most certainly is one

[10:47] <castaway> (and vi's plugin lang sounds like one)

[10:48] <machack666> castaway: what I mean is if there is a fixed memory location for the underlying character string, and binding is just like keeping another pointer around, then changing the data structure referred to at that pointer will be reflected in the bound value.

[10:48] <broquaint> I hope none of vi's syntax has been borrowed, or Emacs macros for that matter ...

[10:48] * theorbtwo still wants to know what it is that Autrijus figured out.

[10:48] <Corion> broquaint: rx:Perl5// :)

[10:49] <castaway> umm.. (ick, pointers ;)

[10:49] <theorbtwo> .oO(Inline::TECO?)

[10:49] <broquaint> No comprende amigo ;)

[10:49] <machack666> I don't know about the haskell world for the implementation ... I'm coming from a C background

[10:49] <broquaint> pointers++ # the power! the pooowweeeerr!

[10:50] <Corion> broquaint: The regular expression syntax is close to vi syntax ;)

[10:50] * machack666 has learned from the error of his ways

[10:50] <autrijus> haskell has plusPtr too :)

[10:50] <machack666> :)

[10:50] <autrijus> it even has castPtr :)

[10:50] <autrijus> Ptr a -> Ptr b

[10:50] <autrijus> the horrors

[10:50] * Corion moves outside. maybe later.

[10:50] <Corion> &

[10:50] <machack666> nothing beats (void*)0 = 1

[10:50] <machack666> :D

[10:50] <castaway> machack666: me no haskell either..

[10:50] <machack666> i'm learning

[10:50] <autrijus> so, I've worked things out

[10:50] <autrijus> need to run now

[10:50] <theorbtwo> machack666: What's really scary is when that doesn't segfault, but actually does something.

[10:50] <autrijus> see the latest p6l post

[10:51] <castaway> hey unfair

[10:51] <theorbtwo> Eeep!  The suspense!

[10:51] <machack666> yaht was good, as was the 2 dozen short lessons

[10:51] * machack666 has a garage sale to go prepare.  Oh, and a place to collapse somewhere

[10:51] <gaal>  http://forum2.org/gaal/pugs/smoke-linux.html # r2231 linux

[10:51] <machack666> ok bye

[10:51] <autrijus> http://www.nntp.perl.org/group/perl.perl6.language/20536

[10:52] <castaway> ah, thanks

[10:52] * castaway found yaht icky ;)

[10:52] <autrijus> bbl &

[10:56] <nothingmuch> morning!

[11:04] <castaway> 				allo nm

[11:04] <nothingmuch_> hola!

[11:06] *** nothingmuch_ is now known as nothingmuch

[11:06] <Juerd> rehi

[11:09] <nothingmuch> mugwump: ping

[11:15] *** TUBAN is now known as Smokin

[12:03] *** castaway is now known as theorbtw1

[12:04] *** theorbtwo is now known as castaway

[12:04] *** theorbtw1 is now known as theorbtwo

[12:04] * castaway keyboard dances

[12:04] <Juerd> It was scary to see you morph into eachother

[12:04] <Juerd> Do you do that often?

[12:04] <theorbtwo> Aaaah, much better keyboard.

[12:04] <castaway> *g*

[12:04] <castaway> not too often

[12:05] * theorbtwo doesn't like her keyboard, browser, or window manager.

[12:05] <theorbtwo> So no.

[12:05] <castaway> but I poked him into looking at my CSS this morning..

[12:05] * castaway sticks her tongue out at theorbtwo 

[12:05] * Juerd got new glasses today. Well, we just picked frames, and in a week they're getting me a new prescription.

[12:05] <castaway> nifty

[12:06] <theorbtwo> Cool.

[12:06] <Juerd> It's a neat thing that has sunglasses that attach to the normal frame with magnets.

[12:06] <theorbtwo> Thick frames, or really good magnets?

[12:06] <Juerd> There are magnets in both the normal frame and the sun front.

[12:07] <Juerd> And no, not thick frames

[12:07] <Juerd> Whehehehehe

[12:07] <Juerd> "readme.rtfd"

[12:09] <castaway> d= ?

[12:12] <Juerd> I don't know

[12:12] <Juerd> But I read it as read the fucking documentation

[12:13] <Juerd> The first few seconds, rich text format D-something didn't even occur to me :)

[12:13] <Odin-LAP> ;)

[12:24] <castaway> bah, silly when the HTML editor has better/different CSS support to the actual browsers

[12:30] <theorbtwo> IE.

[12:30] <theorbtwo> And worse.

[12:56] <theorbtwo> Would some Hebrew-speaker please tell Jess how to pronounce "sigil"?

[12:57] <castaway> siggle!

[12:57] <theorbtwo> Oh, it's from Latin, so I'm possibly asking on the wrong channel.

[13:07] <castaway> Corion!

[13:07] <Corion> re

[13:07] <theorbtwo> Hm, this is not as easy as Autrijus made it out to be, and apparently a Var can be an Exp.

[13:09] <Corion> castaway: "sidjil"

[13:09] <castaway> siggle!

[13:09] <theorbtwo> cxtOfExp :: Exp -> Eval Cxt has as a case cxtOfExp (Var (c:_))

[13:16] <cognominal> sigil seems a common word in role playing

[13:17] <theorbtwo> Unsurprising: A sigil is a magic sign.

[13:17] <cognominal> I wonder if Larry got it from there or from reading other litterature

[13:18] <cognominal> I did not know the word before Perl

[13:18] <castaway> hmm, basic had them, but I dont remember if the docs called them that

[13:18] <theorbtwo> I'm not sure if I did or not; I'm well-versed in perl and mildly versed in various schools of the occult.

[13:19] <theorbtwo> (IE enough that I know the magical connotations of the word sigil, but can't draw any from memory.)

[13:20] * castaway can draw musical siggles

[13:20] <cognominal> sigils is proof enough that Perl is about black magic.

[13:20] <cognominal> and with Perl6, we got double plus black magic with secondary sigils

[13:20] <theorbtwo> Indeed.

[13:21] <Corion> It's just like D&D 2nd rev. - we now got good/neutral/evil and chaotic/???/lawful

[13:21] <Corion> err - 2nd Ed., not 2dn rev.

[13:21] <theorbtwo> ??? also eq neutral.

[13:21] * theorbtwo is good neutral.

[13:22] <Corion> ... so Perl6 steals from Wizards of the Coast too, and not only from Wizards of the Ivory Towers

[13:22] * Corion is chaotic neutral.

[13:22] <theorbtwo> Er, neutral good?

[13:22] <theorbtwo> You're chaotic?  I hadn't noticed.

[13:22] <Corion> Now, is @ = lawful, $ = neutral, % = chaotic ? # at least for order of keys :)

[13:23] <Corion> theorbtwo: Nah, I guess I'm more lawful

[13:24] <theorbtwo> For hackers, the easiest way to tell is generally one's attitude toward copyright infringement.

[13:25] <Corion> theorbtwo: Hmmm. Well - do you mean "do you download DivX, or do you prefer complete DVDRips" ?

[13:26] <Corion> Ah. I think I've found out why all my tests can't seem to reproduce the erratic behaviour of splice() - lazy evaluation actually cares only about what the result is used for, and none of this "intermediate" stuff... So if I ever stringify stuff, I should do that front-up...

[13:27] <theorbtwo> A lawful won't steal software, or will do so but feel bad about it.

[13:27] <theorbtwo> A chaotic will steal all sorts of stuff, even though they have no purticular use for it, just to steal.

[13:27] <Corion> theorbtwo: No. A lawful person has exact rules that are to be followed, and feels bad if these rules are violated

[13:27] <Corion> theorbtwo: A chaotic person needs/knows no rules

[13:28] <Corion> theorbtwo: Lawful/chaotic are more approaches - good/neutral/evil are the ends.

[13:28] <Corion> For example, a chaotic good might download a DivX from the internet, if it helps to educate children about teen pregnancy.

[13:29] <theorbtwo> I thought the lawful-evil axis was generally about following the rules of society at large, and not one's own personal rules.

[13:29] <Corion> ... and a lawful evil person prefers complete DVDRips, because then all is in orderly fashion.

[13:30] <Corion> theorbtwo: Lawful/evil is not an axis

[13:30] <theorbtwo> Er, lawful-chaotic.

[13:30] <Corion> theorbtwo: good/neutral/evil vs. lawful/neutral/chaotic

[13:30] <Corion> theorbtwo: IMO, it's the means you choose to reach your goals

[13:30] <Corion> (like, either, do whatever fits the situation, or have a predetermined way of doing things)

[13:31] <Corion> ... but I never really played DnD :)

[13:31] <theorbtwo> Neither have I.

[13:31] <Corion> ... and arguing about DnD rules pretty much puts me in the lawful evil camp

[13:31] <theorbtwo> Why evil?

[13:32] <Corion> theorbtwo: Because arguing about rules is evil! :)

[13:32] <theorbtwo> Ah.

[13:32] * castaway grins

[13:33] <Corion> &

[14:12] <stevan> nothingmuch: ping

[14:13] <nothingmuch> pong

[14:54] <autrijus> greetings!

[14:55] <autrijus> bindings is fully implemented and committed.

[14:55] <autrijus> any smokers around?

[14:55] <autrijus> well, I'll just smoke a round and go to shower.

[14:57] <Corion> A smoke is just running

[14:58] <Corion> r2234 though.

[15:01] <autrijus> r2235 is the fix :)

[15:02] <Corion> cancel+restart :)

[15:02] *** sbkhh is now known as Odin-

[15:02] <Corion> (because time is somewhat limited atm)

[15:02] <autrijus> that's fine, I'm about to finish my run

[15:02] <autrijus> so not really needed... although a comparison on win32 could not hurt

[15:05] <autrijus> hm, that fix killed multidimensionality.

[15:05] <autrijus> but I also see a UNEXPECTED SUCCESS

[15:16] *** Odin_ is now known as Odin-LAP

[15:18] <stevan> autrijus: I will start a smoke run

[15:19] <Corion> r2335 - http://datenzoo.de/pugs/win2k.html

[15:19] <Corion> &

[15:19] <autrijus> stevan: there's no real need to now :)

[15:19] <autrijus> Corion++ # thanks!

[15:19] <stevan> autrijus: ok

[15:20] <autrijus> stevan: you can, however, help on changelog (again)

[15:20] <autrijus> it looks like tonight may be it.

[15:20] <stevan> autrijus: ok how long do i have?

[15:20] <autrijus> I don't know... a couple hrs? 3 hrs?

[15:20] <stevan> just placed the order for Algorithms :)

[15:25] <Aankhen``> Hi.

[15:26] <autrijus> (is rw) implemented.

[15:26] <autrijus> hey Aankhen`` 

[15:26] <stevan> everywhere?

[15:26] <Aankhen``> Hola.

[15:26] <Aankhen``> Are there any tests which are expected to fail on Win XP?

[15:27] <autrijus> Aankhen``: 127 are expected to fail

[15:27] <autrijus> but the value varies greatly now.

[15:28] <Aankhen``> Ah.

[15:28] <Aankhen``> OK.

[15:28] <Aankhen``> Just checking, since I seem to have failed a couple from builtins/arrays/splice

[15:28] * Aankhen`` goes to eat dinner while the rest of the tests run.

[15:28] <Aankhen``> See y'all in a bit.

[15:28] <autrijus> sure

[15:29] <wolverian> I am having too much fun with my new electric drumset. :(

[15:29] <autrijus> wolverian: that's cool

[15:32] <autrijus> hey jhorwitz, Huskie.

[15:32] <jhorwitz> morning..

[15:33] <wolverian> autrijus: yes. I can now practice at home. 

[15:34] <wolverian> it is however taking away time from coding.

[15:34] * Juerd hopes the ..foo thing can bring Larry back to sanity (sanity being defaulting to $_ and $_ only.)

[15:34] <autrijus> I ignored that insane thread.

[15:35] <Juerd> It's a very sane thread :)

[15:35] <autrijus> it... is?

[15:35] <Juerd> The current latest suggestion is to use ..foo to mean OUTER::OUTER::$_.foo

[15:35] <Juerd> Keeping $_ as an alias for $self

[15:36] <Juerd> (Note that Larry still writes $OUTER::OUTER::_, which does not at all play well with the statement that the sigil is now part of the name)

[15:36] <autrijus> I want $OUTER::OUTER::_.

[15:36] <autrijus> I don't think OUTER::OUTER::$_ makes any sense.

[15:36] <autrijus> (just fwiw.)

[15:36] <Juerd> I think it makes a lot of sense

[15:36] <autrijus> I think it breaks the purpose of sigils.

[15:36] <Juerd> Because OUTER::OUTER:: is the namespace, and $_ is the variable in that namespace

[15:36] <autrijus> you might as well as drop the sigils if you write that.

[15:37] <Juerd> The entire purpose of sigils is already broken in Perl 6, as far as I'm concerned.

[15:37] <autrijus> I think we are actually in vehement agreement.

[15:37] <Juerd> Again?

[15:37] <autrijus> yeah.

[15:41] <stevan> autrijus: r2239 ChangeLog commited

[15:41] <stevan> its a big one this time :)

[15:42] <stevan> you might want to look over it once, some stuff I was unsure of whether to put in Bugs or Pugs Internals

[15:42] <autrijus> sure is :) lots of things happened

[15:42] <autrijus> sure

[15:42] <autrijus> I'm particularly happy that the Types.Object introduction worked

[15:43] <autrijus> that means the shift to OO core is at hand

[15:43] <autrijus> currently it only handles .ref method

[15:43] <autrijus> but more to come.

[15:43] <stevan> autrijus++ :)

[15:43] <autrijus> #perl6++ :)

[16:17] <cognominal>  OUTER::OUTER::$_ does not make sense to me

[16:17] <cognominal> sigil starts variables

[16:18] <autrijus> yeah. otherwise we kill interpolation

[16:18] <autrijus> and other syntactic constructs.

[16:20] <autrijus> Juerd: maybe you can answer this :)

[16:20] <Limbic_Region> autrijus - did you get a definitive answer on thunking ?

[16:20] <cognominal> he probably sees $_ as insecable

[16:20] <autrijus> sub foo (@x) { say "@x[]" }; foo(reverse(123));

[16:20] <autrijus> I argue it should say "123".

[16:20] <autrijus> and not "321".

[16:22] <autrijus> so I coded it that way.

[16:22] <autrijus> Limbic_Region: no, but I will assume thunking.

[16:22] <cognominal> excpet if you split '', 123

[16:22] <autrijus> fwiw, X ::= Y is just

[16:22] <autrijus> BEGIN {X := Y}

[16:22] <cognominal> s/excpet/expcept/

[16:22] <autrijus> or rather, 

[16:22] <cognominal> arf :(

[16:22] <autrijus> X := BEGIN {Y}

[16:23] <autrijus> split('', 123) should surely give @x as (1,2,3)

[16:23] <autrijus> I can see the rules very clearly now :)

[16:24] <autrijus> *@x -- slurpily consume expressions, *and* evaluate them slurpily

[16:24] <autrijus> @x -- only accept one expression item, but evaluate slurpily

[16:24] <autrijus> *$x -- slurpily consume one expression, evaluate it as an item

[16:24] <autrijus> $x -- accept one expression item, evaluate it as an item

[16:24] <autrijus> "slurpily" == "list context" and "as an item" == "scalar context"

[16:25] <Juerd> 18:20 < autrijus> yeah. otherwise we kill interpolation

[16:25] <Juerd> 18:20 < autrijus> and other syntactic constructs.

[16:25] <Juerd> 18:22 < autrijus> Juerd: maybe you can answer this :)

[16:26] <Juerd> It's a simple matter of including :: in interpolation:

[16:26] <Juerd> "My name is ::OUTER::OUTER::$_"

[16:26] <Juerd> Or using a closure:

[16:26] <Juerd> "My name is { OUTER::OUTER::$_ }"

[16:26] <Juerd> Don't forget that the sigil for classes is ::, optionally.

[16:26] <autrijus> say "Your options are: ::CGI::$OPTIONS"

[16:27] <autrijus> somehow not seeing it as nice.

[16:27] <autrijus> mkdir "::FindBin::$Bin/tmp";

[16:27] <Juerd> One shouldn't be interpolating variables from other packages *anyway*.

[16:27] <autrijus> disagreed.

[16:27] <autrijus> I interpolate $FindBin::Bin all the time

[16:27] <autrijus> not seeing the harm of it.

[16:28] <Juerd> Because that's the ugly way one currently does that thing

[16:28] <Juerd> I see it as a hack, though.

[16:28] <autrijus> I rest my case :)

[16:28] <Juerd> Purely to be interpolateable, it's a variable :)

[16:28] <Juerd> But with closures, that's no longer needed...

[16:29] <autrijus> Juerd: so, you happy with the *@a @a *$a $a rule above?

[16:29] <cognominal> how I understand juerd points now, the sigil is part of the unqualified name

[16:30] <cognominal> so when you qualify it you got ::CGI::$OPTIONS

[16:30] <Juerd> autrijus: I'll have to read it first... :)

[16:31] <Juerd> 18:26 < autrijus> *$x -- slurpily consume one expression, evaluate it as an item

[16:31] <Juerd> No

[16:31] <Juerd> It has to evaluate the expression in slurpy context and then use one of its elements.

[16:31] <autrijus> right.

[16:31] <autrijus> but it evaluates /that element/ in item context.

[16:31] <Juerd> autrijus: It's not expression separator separated, when it comes to slurpiness

[16:31] <Juerd> That element is not evaluated.

[16:31] <autrijus> yeah. I should've been more clear.

[16:32] <Juerd> It just is.

[16:32] <autrijus> huh?

[16:32] <autrijus> sub foo (*$x) { ... }; foo((), (), (), want())

[16:32] <autrijus> surely the 'want' here is bound to $x under item context?

[16:33] <autrijus> actually no. 

[16:33] <autrijus> I'm smoking some bad crack. you are entirely correct.

[16:33] <autrijus> *$x is just is.

[16:33] <autrijus> incidentally that's also what pugs does.

[16:34] <autrijus> pugs> sub foo (*$x) { say $x }; foo((), (), (), want())

[16:34] <autrijus> List (Any)

[16:34] <autrijus> I assume that's right

[16:34] <Juerd> So do I.

[16:34] <autrijus> cool :)

[16:34] <Juerd> And if you used a function that returned multiple elements, the call would be a runtime error.

[16:35] <autrijus> oh?

[16:35] <cognominal> so, back to the sigil, who is right?

[16:35] <Juerd> Too many arguments...

[16:35] <autrijus> I thought all uncaught slurps are into *@_.

[16:35] <autrijus> actually I'm pretty sure of that.

[16:35] <Juerd> Only one argument can be bound. There's no implicit *@_ when there's any explicit signature, AFAIK

[16:35] <Juerd> *@_ is default, but not implicitly appended.

[16:36] <Juerd> Just like how "say" assumes $_ if there are no arguments, but it doesn't add $_ to its list when you "say $foo".

[16:36] <Juerd> There's a *%_ in method constructors, or something like that, but that's unrelated.

[16:36] <Juerd> s*method*object*

[16:37] <autrijus> ah.

[16:37] <autrijus> you are entirely correct. and I was entirely confused

[16:37] <Juerd> It's like the default imaginary (@) prototype on Perl 5 subs

[16:37] <autrijus> anyone up to write a test?

[16:37] * autrijus fixes it

[16:37] <Juerd> It doesn't make ($) automatically ($@)

[16:37] <autrijus> right. *@_ is there iff it's signatureless.

[16:38] <Juerd> I'm not in coding health. I'm fighting myself to even be involved in discussions

[16:38] <autrijus> yeah, that's why I asked "anyone" :)

[16:38] <Juerd> (I hate myself for doing this, but either you care about something and it becomes an addiction, or you'd have to somehow stop caring...)

[16:48] <gaal> (running smoke of 2245/linux)

[17:00] <autrijus> ok, added "Too many arguments" checking

[17:00] * autrijus tries to test

[17:04] <elmex> perl6 does tail recursion? does it optimize it?

[17:17] <autrijus> I have no idea if perl6 does tail recursion or not.

[17:19] <wolverian> &func.goto(@args)

[17:19] <wolverian> although there is probably a trait for subs to do that automatically

[17:19] <wolverian> (still looking.)

[17:21] <gaal> hi all, i added haskell support to exuberant ctags. anyone interested? (i'm sending a patch to the authors of course, but i figure people might want it before the next ctags release :)(

[17:21] <gaal> also, i think i understand why the current 'make ctags' is broken

[17:22] <gaal> er, make tags, that is. --

[17:22] <gaal> vim at least wants it sorted, with all uppercase letters coming before the lowercase ones.

[17:22] <autrijus> we probably all use hasktags.

[17:22] <autrijus> :)

[17:23] <autrijus> but exctags support would be cool.

[17:23] <autrijus> (note "make tags" in pugs)

[17:23] <gaal> autrijus, did that work for you with vim? didn't for me.

[17:23] <autrijus> hm? it used to work at least

[17:23] <gaal> yes, which didn't work for me.

[17:25] <autrijus> then I want your exctags patch :)

[17:28] <gaal> perlbot nopaste

[17:28] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[17:29] <pasteling> "gaal" at 192.115.25.249 pasted "haskell tags. patch against exuberant-ctags-5.5.4" (84 lines, 2.6K) at http://sial.org/pbot/9604

[17:34] <gaal> it's pretty simple, doesn't e.g. support whatchamacallits, subtypes, err, type constructors, but is a start.

[17:36] <autrijus> *** Error: Too many slurpy arguments for &foo: 2 actual, 1 expected

[17:36] <autrijus> good.

[17:37] <autrijus> anyone care to add this as a dies_ok test? :)

[17:37] <autrijus> sub foo (*$x) { say $x } foo(reverse(1,2))

[17:37] <autrijus> should die as a catchable runtime error

[17:38] <gaal> smoke for 2245 available at http://forum2.org/gaal/pugs/smoke-linux.html

[17:39] <gaal> autrijus, remember the Prelude idea? got time to start me up on that?

[17:39] <autrijus> Prelude in perl6?

[17:40] <gaal> yes, the builtins that are written in perl6 and compiled at pugs build time, and are loaded in memory right when a pugs instance starts.

[17:41] <autrijus> right... I think just keep it in Prelude.pm and add an automagic -MPrelude for now.

[17:41] <gaal> this is halfway between a pure perl Perl standard library and a pure hasekll standard perl library :)

[17:41] <gaal> we have a Prelude.pm?

[17:42] <gaal> you mentioned you had an idea for keeping around a parsed AST

[17:43] <gaal> i think.

[17:43] <gaal> 4500 test cases. wow.

[17:44] <autrijus> yeah, I had that, but we can do that when we actually ahve a Prelude.pm

[17:45] <gaal> okay: i have a few things to put there. one is alarm(), which will probably get another name

[17:45] <gaal> the other is open()

[17:45] <gaal> which needs some parsing for the magical form

[17:45] <gaal> and is easier to write in perl

[17:45] <gaal> e.g. there's already support for parsing open ">>logfile"

[17:46] <gaal> but not for open "ls |"

[17:46] <Juerd> There is support for a single argument open that can append? That is bad.

[17:46] <stevan> autrijus: where should I put dies_ok test? for the sub

[17:46] <autrijus> stevan: no idea... improvise :)

[17:46] <gaal> also, i needed some help hiding the tuple (stdin, stdout, stderr, pid) for the pipe open.

[17:46] <stevan> autrijus: what is it testing? sub args?

[17:47] <autrijus> gaal: ok. just make a src/Prelude.pm and starts there

[17:47] <autrijus> stevan: slurpy args are now bounded

[17:47] <autrijus> yeah

[17:47] <Juerd> bound

[17:47] <Juerd> Or really bounded?

[17:47] <Juerd> In that case, what does it mean in this context?

[17:47] <autrijus> bounded.

[17:47] <autrijus> it means that we now properly throws "too many arguments"

[17:47] <Juerd> Oh, the parameters as a collection are bounded

[17:47] <autrijus> yes.

[17:48] <Juerd> I was trying to think of a way how they could be individually

[17:48] <autrijus> no implicit *@_

[17:48] <gaal> okay. i need a cheat way to call internal haskell prims; there's no convention for naming those, is there?

[17:48] <Juerd> That's great, autrijus 

[17:48] <autrijus> gaal: nope. improvise

[17:49] <gaal> OK.

[17:51] <stevan> autrijus: r2249  t/subroutines/sub_arg_errors.t

[17:51] <autrijus> stevan++

[17:51] <autrijus> stevan++

[17:51] <stevan> it can be a catch-all for misc errors

[17:51] <stevan> I was going to start removing all the todo_* tests and replacing them with the todo named param

[17:51] <stevan> anyone want to help?

[17:52] <Juerd> stevan: Isn't that a question of s/todo_// && s/;/ :todo;/ ?

[17:52] <Juerd> (per line)

[17:52] <Juerd> To at least get the most done automatically...

[17:53] <stevan> Juerd: thats a thought

[17:53] <stevan> I was basically going to do that with my IDE :)

[17:53] <Juerd> Are you sure you're a nerd? :)

[17:55] <stevan> Juerd: uh,.. I,.. uh,.. mean, .. yeah ,.. gonna do it all in sed,... 

[17:56] <Juerd> sed?!

[17:58] <stevan> sorry I mean assembler :P

[17:59] <stevan> Juerd: in all seriousness, since many people have coded these tests

[17:59] <stevan> we have so many varying styles, that its very difficult to do s/// for things like this

[18:04] <pjcj> If only we had a language with rules to determine its structure which we could use to parse and modify programs.

[18:10] <autrijus> whew.

[18:10] <autrijus> * "is rw" and "is copy" implemented in full.

[18:10] <autrijus> do we have tests for them?

[18:10] <autrijus> stevan: also please update changelog :)

[18:11] <theorbtwo> autrijus, two problems, though one of them may be outdated.

[18:11] <theorbtwo> One is that Var is apparently sometimes used as an Exp.

[18:11] <autrijus> huh.

[18:11] <autrijus> Var :: Var -> Exp

[18:11] <autrijus> it's just like

[18:11] <autrijus> Val :: Val -> Exp

[18:12] <autrijus> pugs uses the scheme of same-named constuctor as promotion

[18:15] <theorbtwo> But earlier you said that a Var can't be used as an Exp.

[18:18] <autrijus> hm?

[18:18] <autrijus> I thought I said Var can't be used as a Val.

[18:18] <autrijus> and you can't deref a Var using other Exp constructs

[18:18] <autrijus> other than Var Var itself.

[18:20] <theorbtwo> Ah.

[18:20] <theorbtwo> I still feel like I'm not getting something, but I'm not clear on what.

[18:23] <stevan> autrijus: updating changelog now

[18:29] <theorbtwo> Oh, the other is that I can't figure out how to make a manual instance of Typeable that works like the derived one (AltData.Typeable is sadly not derivable).

[18:31] <autrijus> theorbtwo: oh. ho hum.

[18:31] <autrijus> I have no idea. ask dons?

[18:33] <autrijus> aha. I found a way to cheaply put Rule in Eval.

[18:33] <theorbtwo> Hm.

[18:33] <theorbtwo> Oh, for implementing p6 rules with?

[18:43] <stevan> YAPC::NA & Hackathon travel is all confirmed now 

[18:43] <autrijus> no, BEGIN

[18:43] <stevan> and my $work is paying for it

[18:43] <Juerd> ARGH

[18:43] <stevan> (cool bosses)++

[18:43] <obra> huh. I should plan YAPC::NA + travel

[18:43] <Juerd> Someone on a (closed) forum is trying to convince the geeks on that forum that they should use their real name instead of the nicknames they use everywhere.

[18:43] <obra> The biggest question: Do I drive?

[18:43] <Juerd> I so hate it when an outsider tries to change culture.

[18:43] <stevan> orba: where are you located?

[18:44] <obra> stevan: Boston

[18:44] <obra> 8 hour drive or so

[18:44] <stevan> orba: you should have said something, we could have carpooled, I am in CT

[18:44] <Juerd> stevan: I think it should be rather doable to s/// most of them, leaving only the multi line ones that need manual labour.

[18:44] <obra> heh

[18:44] <obra> my dates are going to be weird.

[18:44] * obra is likely only appearing for a dayish of the hackathon to make trouble

[18:44] <stevan> Juerd: its all done now :) just running a make test to weed out the straglers

[18:54] <stevan> anyone know what the pass/fail ratio on the current rev is?

[18:54] <stevan> or have the most recent smoke?

[18:54] <gaal> stevan, i just started a smoke on 2255 but it'll take a while.

[18:55] <gaal> there's one of 2245 if you backlog a bit.

[18:55] <stevan> gaal: ok, we can compare notes when your done

[18:55] <stevan> I want to make sure I didnt break anything I shouldnt have

[18:58] <gaal> i just noticed that after 'make clean', make skips UTF8, Unicode, and RRegex. weird, no?

[18:58] <gaal> ....or are those not regular source files?

[19:03] <gaal> Is MMD with constraints, e.g. http://www.nntp.perl.org/group/perl.perl6.language/20519 , officially in? (even if the particular mms mentioned there aren't)?

[19:25] <gaal> http://forum2.org/gaal/pugs/smoke-linux.html - r2255/linux

[19:25] <gaal> man, a smoke cycle takes 30 minutes :(

[19:26] <gaal> i wonder, does ghc do cross-compilation?

[19:28] <stevan> gaal: perfect,.. my numbers match your numbers :)

[19:28] <gaal> :)

[19:29] <stevan> pugs -e 'require Test; todo_ok(1);'

[19:29] <stevan> 1..0

[19:29] <stevan> No compatible subroutine found: &todo_ok

[19:29] <stevan> App "&todo_ok" [] [Val (VInt 1)]

[19:29] <stevan> its a beautiful thing :)

[19:29] <stevan> commiting now

[19:34] <wolverian> gaal: it is in. the 'could' in the phrase there refers to this particular usage scenario.

[19:35] <gaal> wolverian, thanks. (took me a moment to realize you were answering my q about mmd :)

[19:37] <wolverian> sorry. :)

[19:38] <gaal> hey, anything quicker than a smoke run is fair game. :p

[19:41] <stevan> r2257 - No more todo_* 

[19:41] * autrijus cries

[19:41] <autrijus> why does larry have to do this?

[19:41] <obra> hm?

[19:42] <autrijus> here I am, thinking I can release 6.2.1 tonight and be done with it

[19:42] <autrijus> having just committed a 600ish lines change that implements the thunking semantics of bindings correctly

[19:42] <autrijus> including snapshotting of RHS pad

[19:43] <autrijus> which is functionally a superset of the call-by-value approach

[19:43] <autrijus> but this: http://www.nntp.perl.org/group/perl.perl6.language/20543 

[19:43] <autrijus> destroyed all hope of it

[19:43] <autrijus> so I'm now back at square one.

[19:45] <Juerd> I think the big problem with Perl is -again- lack of specification.

[19:45] <Juerd> The synopses aren't clear enough to build an interpreter around.

[19:45] <obra>      :/

[19:45] <obra> Juerd: that's improving

[19:45] * autrijus is in a sad, sad mood and should probably sleep now.

[19:45] <obra> and nobody is deluded enough to think they're complete yet

[19:46] <obra> autrijus: or hack on fun other things!

[19:46] <autrijus> obra: right, like paying $work.

[19:46] * autrijus cries some more

[19:46] * castaway comforts autrijus 

[19:46] <theorbtwo> Uff.

[19:47] * obra pets autrijus

[19:47] <Juerd> autrijus: Paying work? Isn't work supposed to pay you?

[19:48] <Juerd> Or do you live in soviet russia? :)

[19:48] <stevan> we could always fork the project and call our new language Paskell :P

[19:48] <obra> noooooooooooooooooo

[19:49] <stevan> Haskerl?

[19:49] <theorbtwo> Man, the #haskellers didn't take the bait.

[19:50] <theorbtwo> (21:36:51) ***SamB wonders how you would know the mapping

[19:50] <theorbtwo> (21:36:55) SamB: for @docs, I mean

[19:50] <theorbtwo> (21:37:08) SamB: well, @index is probably even harder

[19:50] <theorbtwo> (21:37:14) theorbtwo: Hmm?

[19:50] <theorbtwo> (21:37:20) theorbtwo: I could do it in Perl pretty easily.

[19:50] <Juerd> theorbtwo: Don't troll in friendly territories... :)

[19:51] <Juerd> theorbtwo: Try #php or #python.

[19:52] <stevan> ok I have done enough damage for one day, bye all

[19:52] <Juerd> Bye and thanks for today's damage!

[19:52] <theorbtwo> I wasn't actually trolling.

[19:52] <theorbtwo> Much.

[19:53] <stevan> autrijus: dont fret too much, Larry may change his mind? If not, you can have Ingy arm wrestle him at the hackathon

[19:54] <autrijus> damnit.

[19:54] <autrijus> I implemented larry's semantics.

[19:55] <autrijus> bindings.t still all passes.

[19:55] <autrijus> commented out full thunking for future reference.

[19:55] * theorbtwo nods.

[19:55] <Juerd> autrijus: Just to avoid that it takes you a long time again before you read an answer: I replied to your message :)

[19:56] <Juerd> It may of course be overruled, but I wouldn't know how the other answer would fit in with Perl logic.

[19:58] <autrijus> Juerd: I replied to yours :)

[19:58] <autrijus> so please sanity check and reply to me.

[19:59] <autrijus> anyone want to run a smoke for me? :)

[19:59] * autrijus praises monadic composition for swiftly responding to drastically shifting specs

[20:00] <obra> heh

[20:00] <obra> autrijus: I'll smoke

[20:00] <autrijus> cool. just "make smoke"

[20:00] <autrijus> and post smoke.html somewher.e

[20:01] <obra>   only 40 revs behind

[20:01] <Juerd> autrijus: I'm going to upgrade and make pugs first, so it may take a while longer than five minutes

[20:01] <autrijus> Juerd: that's fine, I'll wait for obra :)

[20:01] <gaal> autrijus, make smoke started, but ETA 30 minutes (r2260)

[20:01] <Juerd> What is a smoke, precisely?

[20:01] <obra> 30 minutes to smoke these days?

[20:02] <autrijus> I'm surprised too

[20:02] <autrijus> it's 5~10min here

[20:02] <gaal> from make clean, on my slower machine... i'm not make cleaning this time though

[20:02] <castaway> ouch

[20:02] <autrijus> gaal: ouch. I think one smoker (obra) is sufficient

[20:02] <Juerd> fsck

[20:02] <Juerd> Last time I compiled pugs as root

[20:02] * castaway wont try then

[20:02] <Juerd> Now I can't do it as non-root because of permissions.

[20:02] <Juerd> me--

[20:03] <castaway> then change the permissions ;)

[20:03] <gaal> i think i just don't have enough RAM and the machien starts swapping.

[20:03] <castaway> chown -R

[20:03] <Juerd> castaway: That sounds like work.

[20:03] <castaway> nah

[20:03] <castaway> its one command

[20:03] <autrijus> sudo chown -R juerd .

[20:03] <Juerd> castaway: Not if you count the mount --binds I have :)

[20:03] <obra> jesus. so much churn

[20:04] <Juerd> linking...

[20:04] <Juerd> (as root ;-))

[20:04] <obra>  Juerd is beating me

[20:05] <gaal> i have a faster machine, but it doesn't have the modern modules, so i can only 'make test' on it. that's my primary incentive for porting the test moduels to p6 :)

[20:05] *** integral is now known as integral|ping

[20:06] *** integral|ping is now known as integral

[20:06] * theorbtwo sees the integral.

[20:06] * castaway watches a fuzzy white baby camel on TV.. cute!

[20:07] * obra is Compiling Pugs.Bind

[20:07] <Juerd> autrijus: 3/3, 100%.

[20:08] * theorbtwo sighs, tries a Makeish project on the theory that it should be something I can handle.

[20:08] <castaway> Makeish?

[20:09] <theorbtwo> (Converting the build from ghc --make to makefile-based, so that it can take advantage of make -j2.)

[20:10] <autrijus> Juerd: 3/3 100%?

[20:10] <autrijus> Juerd: you didn't "make smoke"?

[20:10] <gaal> theorbtwo, prolly better to add -j2 caps to ghc --make

[20:10] <obra> there seems to be a missing dep on Test::TAP::Model

[20:10] * obra is installing it

[20:11] <gaal> because that has lots of smarts to it.

[20:11] <obra> it just failed to run since the module was missing, rather than doing something friendly

[20:12] * obra is in t/magical/pid.t

[20:12] <gaal> obra, what would you suggest it do?

[20:12] <autrijus> gaal: in "make smoke" check for existence of Test::TAP::Model and bail out with appropriate msg

[20:12] <autrijus> that is, in run-smoke.pl

[20:12] * obra nods

[20:12] <obra> t/subroutines/subroutine.t

[20:12] <obra> pugs: List.genericDrop: negative argument

[20:13] <obra>  are you expecting 100% passing right now?

[20:14] <autrijus> fixed.

[20:14] <obra> t/syntax/symbol_table.t

[20:14] <theorbtwo> We try to keep compatable to any make including GNU, not-GNU, and nmake, right?

[20:14] <obra> I'll let this smoke finish ;)

[20:14] <autrijus> no, I'm not. I expect ~100 failure.

[20:14] <obra> ok

[20:14] <autrijus> you'll see a smoke.html. post it :)

[20:14] <autrijus> it is beautiful to see.

[20:14] <obra> t/syntax/list_*

[20:15] <autrijus> genericDrop fixed.

[20:15] <obra> are there any large sections after t/statements?

[20:15] <autrijus> prolly not

[20:16] <autrijus> rules is the largest

[20:16] <obra> thank god clkao doesn't have this big a test suite.

[20:16] <Juerd> autrijus: No. What is make smoke?

[20:16] <obra> Or we'd need to find him a dual-core laptop.

[20:16] <autrijus> nearly 5000 tests ;)

[20:16] <Juerd> autrijus: 3/3, 100% was re your mail.

[20:16] <autrijus> Juerd: oh. cool.

[20:16] <autrijus> Juerd: make smoke is a prettier "make test".

[20:16] * Juerd aborts make test and runs make smoke instead

[20:17] <gaal> r2263 adds early death on missing Test::TAP::prereqs.

[20:17] <Juerd> It's recompiling and relinking :)

[20:17] <obra> t/var/default_scalar.t

[20:17] <obra> pugs: cannot cast from VHandle {handle: tmpfile} to [Char]

[20:17] <obra> t/junction/junction_functions.t

[20:17] <Juerd> And telling me it wants a module.

[20:17] <gaal> i got errors on want.t 

[20:18] <obra> t/junction/misc_junctions.t

[20:18] <obra> # Looks like you planned 47 tests, but ran 35

[20:18] <obra> # Looks like you failed 18 tests of 35

[20:18] <obra> Can't modify constant item

[20:18] <obra> Val (VJunc all(any(4,5),any(5,6)))

[20:19] * obra wonders if he'll run out of battery before or after the test finishes

[20:19] * obra should have done this on the big machine

[20:19] <castaway> ;)

[20:20] <Juerd> http://perlmonks.org/?node_id=450780  # I love it when assumptions of many languages come together in one thread.

[20:20] <gaal> t/builtins/want....FAILED tests 11-14, 16

[20:20] <gaal> (msys)

[20:21] <gaal> t/data_types/mixed_multi_dimensional....FAILED tests 17, 19, 21-25, 29-30

[20:21] <gaal> t/data_types/nested_arrays....FAILED tests 1, 3-4, 6                         

[20:21] <gaal> t/data_types/multi_dimensional_array....FAILED tests 1, 3-5, 10-16, 21-25, 29-31

[20:22] <gaal> t/pugsbugs/subscripts_and_context....FAILED tests 1-2                        

[20:22] <gaal> (this is for r2260)

[20:22] <autrijus> gaal: smoke.html :)

[20:22] <gaal> soon :)

[20:22] <Juerd> !@#$^%$##$%%%%%%%%%%%%%%%$$#!@%@#%!@#$%$$$

[20:22] <autrijus> Juerd: ?

[20:23] <Juerd> CPANPLUS--  # Why are you checking signatures all of a sudden? And ignoring force for them?

[20:23] <castaway> cos its broke.

[20:23] <castaway> (my CPANPLUS usd to work til I upgraded it :( )

[20:23] <Juerd> Developers everywhere, don't change the defaults if that means things stop working without further configuration!

[20:23] <Juerd> damnit!

[20:23] <Juerd> castaway: Same here, for the nth time.

[20:23] <autrijus> what!?

[20:23] <autrijus> kane turned on sigs checking silently?

[20:23] * castaway should go back to 0.4999

[20:23] <obra> whoa! debian ghc-cvs is 20050331

[20:24] <Juerd> autrijus: I never did, so I assume he did.

[20:24] <autrijus> wtf. :(

[20:24] <Juerd> And now it fails in more spectacular ways. I'm switching to CPAN.pm

[20:24] <autrijus> good call.

[20:24] * castaway sighs.

[20:25] <Juerd> (You know, not-programming SUCKS and sometimes I want to die. I haven't used either CPAN or CPANPLUS on my home linux box for over 5 months!)

[20:28] <obra> the new detection doesn't work if I have Test::TAP::Model but not Test::TAP::HTMLMatrix

[20:28] <Juerd> I don't find 'make smoke's output specifically pretty so far...

[20:28] <autrijus> Juerd: the smoke.html will be pretty.

[20:29] <Juerd> Ah!

[20:29] * obra is into the rules tests

[20:29] <Juerd> lists/

[20:29] <gaal> obra, weird, looking into it.

[20:29] <autrijus> and I think I fixed 80% of failures.

[20:29] <gaal> http://forum2.org/gaal/pugs/smoke-msys.html r2260

[20:29] * obra starts a second smoke on the fast box

[20:29] <obra> autrijus: should I stop the new smoke and svnup?

[20:29] <autrijus> obra: right

[20:29] <autrijus> danke

[20:30] <autrijus> Juerd: 

[20:30] <autrijus>     my $c = (1,2,(3,4));

[20:30] <autrijus> what's +$c?

[20:30] <obra> autrijus: resmoking

[20:31] <autrijus> I think it's 3 at all times.

[20:31] <autrijus> so the test is wrong

[20:31] <Juerd> autrijus: I think it's 4.

[20:31] <autrijus> explain.

[20:31] <cognominal> autrijus: is it 4 ou ref to array?

[20:31] <obra> pugs-- # only using one cpu for tests

[20:31] <autrijus> I thought "," never flattens its operands when running in item cxt

[20:31] <autrijus> or it always does?

[20:32] <wolverian> () are the list constructors, afaik, and lists flatten in plural context

[20:32] <cognominal>     my $c = (1, 2, [ 3, 4 ] ); print +$c  # 3

[20:32] <wolverian> (unlike arrays)

[20:32] <Juerd> I thought it always would...

[20:32] <cognominal>     my $c = (1, 2, ( 3, 4 ) ); print +$c  # 4

[20:32] <gaal> obra, the new detection did in fact work for me in exactly the situation you mentioned...

[20:32] <Juerd> wolverian: No, comma is the list constructor

[20:32] <wolverian> Juerd: hmm. I thought I read larry's posts lately on p6l to say otherwise, or at least to say that ()s aren't simple grouping anymore

[20:32] <autrijus> hm, it always does.

[20:33] <autrijus> that's news to me.

[20:33] <wolverian> but I might have confused the issue.

[20:33] <obra> gaal: hm. it didn't for me :/

[20:33] <autrijus> ok, let's suppose it always does. thanks juerd!

[20:34] <gaal> what do you mean by not work? what are you expecting?

[20:34] <cognominal> I think that if you assign a list to a scalar , it becomes a ref to an array

[20:35] <Juerd> autrijus: I think lists in lists flatten. Only the topmost level that has context does not.

[20:35] <obra> gaal: the error says I need either one module or the other

[20:35] <obra> gaal: and it failed out when I had one but not the other

[20:35] <obra> or did I misread the error?

[20:35] <autrijus> Juerd: does list pass slurpy context to its operands?

[20:35] <autrijus> Juerd: or it preserves the outer context?

[20:35] <cognominal> so "my $c = [1, 2 ]" is equivalent to "my $c = (1, 2)"

[20:35] <Juerd> autrijus: i.e., in foo( (1,2,(3,4),(5,6) ), with foo (Str $foo), the stringification of a 6 element array is passed.

[20:35] <gaal> ah, yes; should it say exactly which is missing? i can do that :)

[20:36] <Juerd> autrijus: I don't know, but I think it'd be wise to pass slurpy context

[20:36] <obra> gaal: so it needs both modules?

[20:36] <gaal> yes, it does

[20:36] <autrijus> Juerd: I'm surprised.

[20:36] <autrijus> Juerd: I think only pass slurpy context when we are in rvalue

[20:36] <obra> thhen yes, it should tell you what you're missing

[20:36] <autrijus> right?

[20:36] <obra> wow. new smoke is fast

[20:36] <gaal> obra: i make do with only the ::Model, and run the htmlmatrix on another mahcine that has it.

[20:36] <Juerd> autrijus: TBH, I'm not AT ALL sure about how lists in lists in scalar context should behave.

[20:37] <gaal> you can do that too eith 'perl -w util/yaml_harness.pl'

[20:37] <Juerd> autrijus: lists in scalar context are new to me, and as comma is infix and chained, I don't see how it can force any context onto its operands, while it'll have to to make anything valid syntax.

[20:37] <Juerd> autrijus: And in that respect, keeping item context may even make more sense than flattening.

[20:37] <autrijus> Juerd: so I'll make it context-propagating.

[20:37] <autrijus> as is the case now.

[20:38] <autrijus> does a reference to a junction autothread?

[20:38] <autrijus> my $x = \\\(1|2); my $y = $x + 3

[20:39] <obra> is there a way to find out pugs' coverage?

[20:39] <autrijus> obra: not currently

[20:39] <autrijus> obra: oh but we have synopses coverage

[20:39] <autrijus> just not haskell code coverage

[20:39] * obra nods

[20:39] <autrijus> Juerd: 

[20:39] <autrijus> my $x = (1|'2'); $x.ref

[20:39] <autrijus> currently it gives

[20:39] <autrijus> ('Int' | 'Str')

[20:40] <autrijus> should it be 'Junction'?

[20:40] <Juerd> Yes!

[20:40] <Juerd> But according to Larry, NO.

[20:40] <Juerd> According to Damian, Yes.

[20:40] * obra tries to figure out why Test::Harness doesn't sort the files it runs

[20:40] <autrijus> wtf?

[20:40] <Juerd> Larry wants it to be invalid to assign a junction to a variable.

[20:40] <autrijus> what according to you?

[20:40] <autrijus> what is defined(1|undef) ?

[20:40] <Juerd> Unless you "use Junctions;", to enable the feature (oh come on.)

[20:41] <obra> fsck.com/~jesse/smoke.html

[20:41] <Juerd> autrijus: I cannot answer your question

[20:41] <autrijus> obra++

[20:41] <autrijus> ok. :)

[20:41] <autrijus> I'll just keep it from regressing

[20:41] <Juerd> autrijus: I think it must be 'Junction', but that has to mean Junction is part of Any, which it is not, because autothreading is default.

[20:41] <autrijus> obra: uh, I want css too

[20:42] <obra> 11 minutes for a smoke, I think

[20:42] <autrijus> obra: care to upload fsck.com/~jesse/util/testgraph.css ?

[20:42] <gaal> obra: upload util/testgraph.css

[20:42] <Juerd> autrijus: any<Int Str> would be more consistent with other junction semantics...

[20:42] <obra> you only told me to copy smoke.html ;) 

[20:42] <obra> hang on

[20:42] <gaal> on some servers, that won't work and you have to inline it in the html :(

[20:42] <autrijus> gaal: I like inlining by default

[20:42] <autrijus> makes little sense to me to not inline

[20:42] <gaal> this used to be automated with the -e option, but nothingmuch broke it :)

[20:43] <autrijus> not fun :)

[20:43] <obra> now?

[20:43] <gaal> subscripts_and_context.t still fails on msys at r2267 btw.

[20:43] <Juerd> operators/eq.t

[20:44] <Juerd> Where do all these tests come from? Last time I ran make test, it took less than a minute! :)

[20:44] <Juerd> (That was when I still wrote tests.)

[20:44] <obra> 4422 ok 60 failed

[20:44] *** obra changes topic to: pugscode.org <Overview Journal Logs> | r1773/winxp:  587/4256, smoke/win2k (occasional): http://xrl.us/fqum (81/4418,

[20:44] <gaal> there used to be 4500 earlier today :)

[20:44] <obra> gah. botched the topic.

[20:45] <obra> my paste foo is losing

[20:45] <gaal> r1773? that's a bit old :)

[20:45] <Juerd> obra: Irssi? /topic <tab>

[20:45] <obra> and I'm out of battery. (stretched too long for the smoke)

[20:45] <gaal> filetest.t

[20:46] *** obra changes topic to: pugscode.org <Overview Journal Logs> | r1773/winxp:  587/4256, smoke/win2k (occasional): http://xrl.us/fqum (81/4418, r2232), Mac OS X (160/4483, r2216), Linux (60/4482, 2267) | pugs.kwiki.org

[20:46] * obra waves 

[20:46] <autrijus> see ya

[20:46] <theorbtwo> Oh, later, autrijus.

[20:46] <gaal> new smoke in a coupla minutes.

[20:47] <Juerd> Another module I don't have.

[20:47] <Juerd> Bye obra 

[20:47] <theorbtwo> er, oh, later, obra.

[20:50] <gaal> http://forum2.org/gaal/pugs/smoke-msys.html r2267

[21:05] <obra> back

[21:06] <gaal> t/statements/return.t broke.

[21:07] <gaal> oh, plenty of breakages in 2269 :( smoke eta 8 min.

[21:21] <gaal> t/builtins/lists/grep.t and map have errors too

[21:22] <gaal> making fresh smok 2271, be a while.

[21:31] <obra>         http://fsck.com/~jesse/smoke.html

[21:31] <obra> 2269

[21:31] <gaal> '71 ready in a bit.

[21:39] <gaal> http://forum2.org/gaal/pugs/smoke-msys.html 2271 msys

[21:40] <gaal> if you call testgraph.pl with -e, it'll inline css again.

[21:40] <theorbtwo> Grr.

[21:40] <gaal> ?

[21:40] <theorbtwo> How do people debug mac problems?

[21:41] <theorbtwo> I'm flying blind the whole time.

[21:48] <autrijus> r2278 should return the tree to sanity.

[21:49] <theorbtwo> Sanity?  Pugs, sane?

[21:50] <gaal> r2275 smoke up; '78 running.

[21:51] <autrijus> I'm running a round of '78 smoke now too

[21:51] <autrijus> I think it's safe to call it preflight.

[21:51] <autrijus> anyone up to look at the last 25 changes

[21:51] * gaal starts a smoke on linux too

[21:51] <autrijus> and update ChangeLog?

[21:51] * gaal is

[21:51] <autrijus> danke

[21:54] <autrijus> hm no, still failures

[21:55] <autrijus>  4482 test cases: 4461 ok, 21 failed, 908 todo, 24 skipped and 3 unexpectedly succeeded 

[21:56] <gaal> on balance, that isn't bad :)

[21:56] <autrijus> much better than I have a reason to hope :)

[21:57] <gaal> r2261 ("hash stringification works again") - is this a bugfix against the last release, or just against a breakage that happened this week?

[21:57] <autrijus> this week.

[21:57] <autrijus> ok. every failure is now junction related.

[21:58] <autrijus> fixing that.

[21:59] <gaal> i think i can't help much with the changelog - anything not trivial and i'm not sure if it's from this week or not :(

[22:00] <gaal> perhaps we need a convention in svn ci messages? + for new, ! for fix?

[22:00] <autrijus> k

[22:00] <theorbtwo> Or individual checkers-in should modify the changelog when they write something changelog-worthy?

[22:01] <autrijus> that too

[22:01] <gaal> that's a good idea

[22:02] <gaal> r2257 is the last ChangeLog update, Autrijus. my guess is only a few of these commits should be mentioned in the changelog - sorry i can't help much more than that :(

[22:05] <gaal> http://forum2.org/gaal/pugs/smoke-msys.html 2278

[22:05] <autrijus> no prob at all.

[22:05] <autrijus> thanks a lot

[22:05] <nothingmuch> evening

[22:05] <gaal> t/statements/given.t

[22:05] <gaal> pugs.exe: Prelude.head: empty list

[22:05] <gaal> and still problems with junctions

[22:05] <gaal> hey nothingmuch!

[22:06] <nothingmuch> heya

[22:06] <nothingmuch> stevan: ping

[22:06] <autrijus> given.t is fixed

[22:06] <autrijus> I'm resmoking now -- you don't need to do that yet

[22:06] <gaal> k

[22:07] <gaal> nothingmuch, hey. i noticed that testgraph.pl now warns about renaming the css file -- twice every time it's run. proabay a bug? anyway, i've ci'ed a hack to revive the inlining of the css, and there's a feeling it should be on by default. care to look into it?

[22:08] <nothingmuch> sure

[22:08] <nothingmuch> want to patch HTML::Matrix to allow inline CSS?

[22:08] <nothingmuch> should be pretty easy

[22:08] <gaal> if you walk me through the darcs commands :)

[22:08] <nothingmuch> sure

[22:09] <nothingmuch> that way we can kill N birds with M<N stoned

[22:09] <nothingmuch> s

[22:09] <nothingmuch> stoned... ;-)

[22:10] <gaal> insufficient RAM--

[22:10] <nothingmuch> ram++

[22:10] <nothingmuch> damn, there's a fly in here, it's driving me nuts

[22:19] <gaal> http://forum2.org/gaal/pugs/smoke-msys.html 2280

[22:27] *** NathanY- is now known as NathanJY

[22:28] <nothingmuch> yay! NathanJY is back!1

[22:29] <autrijus> cutting a preflight now.

[22:32] <autrijus> preflight #1

[22:32] <autrijus> http://wagner.elixus.org/~autrijus/Perl6-Pugs-6.2.1.tar.gz

[22:32] <autrijus> 732535 bytes

[22:33] <gaal> http://forum2.org/gaal/pugs/smoke-msys.html 2283

[22:34] <autrijus> good. that means preflight should be clean to you

[22:34] <gaal> bytes still in transit.

[22:35] <Juerd> http://juerd.nl/smoke.html

[22:35] <nothingmuch> 		<style petal:cond="page/has_inline_css" petal:content="page/inline_css" type="text/css">

[22:35] <Juerd> 4486 test cases: 4356 ok, 130 failed, 890 todo, 27 skipped and 1 unexpectedly succeeded

[22:38] <nothingmuch> you should have one from me too at some point

[22:40] <autrijus> I think I'm good to fly as soon as gaal finishes smoking the preflight.

[22:40] <autrijus> anybody else smoking?

[22:40] <Juerd> autrijus: It's a bit older than the preflight, but see url xx:37

[22:40] <Juerd> On UTC+xx02

[22:40] <autrijus> Juerd: yeah, it's ancient now :)

[22:40] <Juerd> Sorry

[22:40] <autrijus> no prob at all!

[22:41] <autrijus> appreciated

[22:41] * autrijus writing release announcement

[22:41] <Juerd> Have no time for another smoke

[22:41] <autrijus> that's fine

[22:41] <nothingmuch> ld: Undefined symbols:

[22:41] <nothingmuch> _PugsziAST_zddmshow2_closure

[22:41] <nothingmuch> ....

[22:41] <autrijus> nothingmuch: rm src/Pugs/AST.o and remake

[22:41] <gaal> nm, try make clean, *real* clean

[22:41] <autrijus> actually just kill AST.o will probably do

[22:41] <nothingmuch> no AST.o

[22:42] <nothingmuch> and made clean before it

[22:42] <castaway> make squeaky_clean?

[22:42] <nothingmuch> trying again

[22:42] <autrijus> nuke the tree?

[22:42] <theorbtwo> make clean is pretty clean.

[22:42] <nothingmuch> there's a make squeaky_clean?

[22:43] <nothingmuch> this fly is as big as a stork

[22:44] <theorbtwo> Jess was joking.

[22:44] <gaal> nothingmuch needs a big cat in the house

[22:45] <gaal> t/builtins/io/io_redirect_to_scalar.t

[22:45] <gaal> c:\MinGW\bin\perl.exe: *** WFSO timed out

[22:45] <autrijus> WFSO?

[22:45] <gaal> no idea :)

[22:46] <nothingmuch> gaal: i have 3

[22:46] <autrijus> ok, that's fine, continue :)

[22:46] <nothingmuch> ok, rm -rf

[22:46] <nothingmuch> make purge

[22:46] <nothingmuch> rm -rf stc

[22:46] <nothingmuch> grr

[22:46] <nothingmuch> src

[22:46] <nothingmuch> and trying again

[22:51] <autrijus> gaal: how's the smoke going?

[22:52] <nothingmuch> autrijus: with no make optimized it seemed to have worked

[22:52] <gaal> just after rules

[22:52] <nothingmuch> finishing builtins right now

[22:52] <gaal> i forgot to make optimized, so it was slow :(

[22:52] <autrijus> that's fine :)

[22:52] <autrijus> so far so good?

[22:52] <autrijus> except for the io_redirect_to_scalar

[22:52] * theorbtwo sighs.

[22:53] <theorbtwo> Time for bed.

[22:53] <gaal> yes. uploading.

[22:53] <autrijus> night theorbtwo!

[22:53] <autrijus> ok, fly!

[22:53] * autrijus waits for gaal's url :)

[22:54] <gaal> http://forum2.org/gaal/pugs/smoke-msys.html 6.2.1 preflight

[22:54] <gaal>  224 files        4512 test cases: 4512 ok, 0 failed, 903 todo, 37 skipped and 0 unexpectedly succeeded       100.00%

[22:54] <autrijus> looks very good.

[22:55] <autrijus> r2288 is 6.2.1-final.

[22:55] <autrijus> it's on PAUSE now.

[22:55] <nothingmuch> goody goody gumdrops

[22:55] * gaal cheers

[22:55] <autrijus> gaal++

[22:55] <autrijus> gaal++

[22:55] <autrijus> gaal++

[22:55] <autrijus> #perl6++

[22:55] <gaal> autrijus**

[22:55] <gaal> autrijus**

[22:55] <gaal> autrijus**

[22:55] <obra> wow. make optimized is slow :)

[22:56] <gaal> it pays off, obra.

[22:56] <gaal> in make test.

[22:56] <obra> gaal: sure.

[22:56] <obra> my non-optimized make test is 9 minutes 

[22:56] <obra> will see what this is

[22:57] <gaal> autrijus, can we / should we perhaps make make optimized the default from no on?

[22:58] <autrijus> gaal: I don't know :)

[22:58] <autrijus> maybe "make test" should imply "make optimized"

[22:58] <autrijus> and "make" is just "make"

[22:58] <obra> why _not_ build optimized?

[22:59] <autrijus> and maybe "make test" always generates smoke.html when there's Test::TAP::Model.

[22:59] <gaal> is make w/o -O == -O0?

[22:59] <autrijus> gaal: no, it's -O on strategic modules

[22:59] <autrijus> obra: because it's much slower to build

[22:59] <autrijus> but yeah, I can see it being the default

[22:59] <gaal> autrijus, when we have the new harness framework that'll definitely happen

[23:00] <obra> autrijus: slower to build but results in a more positive impression of pugs.

[23:00] <gaal> make test will emit the same output as it does today, but acummulate data in the model too

[23:00] <gaal> smoke.html needs HTMLMatrix, and if it's found, the matrix will be generated.

[23:01] <autrijus> obra: sure, I agree. between you and gaal I trust you will commit the neccessary fix :)

[23:02] <autrijus> journal up. sleep now

[23:02] <autrijus> 7am!

[23:02] * autrijus waves &

[23:02] <nothingmuch> ciao!

[23:02] <gaal> night!

[23:03] <obra>  night autrijus 

[23:04] <obra> gaal: I've never touched the build system. how likely are you to be able to dtrt?

[23:05] <gaal> that's a trick question, seeing as i committed someitnh that broke the build not so long ago :)

[23:06] <obra> hah

[23:06] <obra> yeah. 6:30 for an optimized build

[23:07] <obra> http://fsck.com/~jesse/smoke.html for my smoke on latest

[23:07] <obra> 1 failure

[23:07] <gaal> i wonder, how does one influence the environment for a dependency, before actually entering a rule? that looks like what autrijus suggested, but i don;t think make can do that (w/o some crazy hack).

[23:07] <nothingmuch> t/operators/arith.t

[23:07] <nothingmuch> # Looks like you failed 1 tests of 177?

[23:07] <obra> yeah

[23:08] <nothingmuch> it's been failing all week for me

[23:08] <gaal> oh, the NaN is platform dependent.

[23:08] <gaal> i think perhaps that test should be *made* to depend on $*OS

[23:08] <nothingmuch> =/

[23:08] <gaal> because it doesn't fail for me.

[23:09] <nothingmuch> bummer

[23:09] <gaal> well, either that or rewrite arithmetic not to depend on the haskell primitives. as if

[23:09] <nothingmuch> gaal: yaml_harness should probably inline css by default, btw

[23:10] <gaal> yes, i know :)

[23:10] <nothingmuch> or rewrite GHC to not depend on platform values ;-)

[23:10] <nothingmuch> how is it coming along?

[23:10] <gaal> getting kinda late now, though

[23:10] <nothingmuch> if i can darcs pull your change from some webspace i can see if my template change is good enough, and release

[23:10] <nothingmuch> blah blah blah

[23:10] <nothingmuch> it's holiday

[23:10] <nothingmuch> you can do it ;-)

[23:10] <gaal> heh

[23:11] <gaal> k k k

[23:17] <gaal> beh! i hate scms with versions of the fiels inside my view. i keep editing those by mistake :(

[23:17] <gaal> (which reminds me:

[23:17] <gaal> set grepprg=grep\ -n\ -r\ --exclude=\*.svn\*\ --exclude=\*.o\ --exclude=\*.hi

[23:17] <gaal> .)

[23:22] <nothingmuch> versions of the files inside what view?

[23:23] <gaal> i was editing ./_darcs/current/lib/Test/TAP/HTMLMatrix.pm by mistake

[23:25] <nothingmuch> oi

[23:25] <gaal> adding tests now, anyway

[23:25] <gaal> don't know whether to depend on Storable though.

[23:26] <nothingmuch> storable?

[23:26] <gaal> actually, it wonr; help much.

[23:26] <nothingmuch> why?

[23:27] <nothingmuch> because of the example?

[23:27] <gaal> for dclone, but never mind

[23:27] <nothingmuch> dclone?!

[23:27] <gaal> wont' help here much

[23:27] <nothingmuch> what are you cloning?

[23:27] <gaal> calm down :)

[23:27] <gaal> instead of a fixture

[23:28] <jabbot> pugs - 2281 - * fix a hardcoded 'head' in continue()

[23:28] <jabbot> pugs - 2282 - * revert cxt propagation for ,

[23:28] <jabbot> pugs - 2283 - * fix incorrect fix to s09eg.t

[23:28] <jabbot> pugs - 2284 - * none().pick is always undef.

[23:28] <jabbot> pugs - 2285 - * comma does propagate its context.

[23:29] <jabbot> pugs - 2286 - * repair parrot compiler

[23:29] <jabbot> pugs - 2287 - * preflight!

[23:29] <jabbot> pugs - 2288 - * This be Pugs, version 6.2.1.

[23:29] <jabbot> pugs - 2289 - * nuke redundant line

[23:29] <jabbot> pugs - 2290 - * typo

[23:37] <crysflame> hello 6.2.1

[23:39] <gaal> nm, how do i negate a condition in petal?

[23:39] <nothingmuch> i did that already

[23:40] <machack666> junctive variables also do not do as you expect in terms of expressions.

[23:40] <nothingmuch> just check in the code

[23:40] <nothingmuch> it's ok if it's broken

[23:40] <nothingmuch> this is darcs

[23:40] <nothingmuch> you can amend record

[23:40] <nothingmuch> and unpull

[23:40] <nothingmuch> and unrecord

[23:40] <nothingmuch> and whatnot

[23:41] <machack666> case in point, when running the $j ** 100 vs $j * $j * $j ... (100 x) I had a total system halt due to completely used swap space

[23:41] <gaal> tov how do i ci in this fancy darcs of yours? :)

[23:41] <nothingmuch> darcs w -ls <-- svn status

[23:41] <nothingmuch> darcs record

[23:42] <nothingmuch> interactive prompt

[23:42] <machack666> the point is, if you don't know that a variable is a junction and it can hide behind the normal mathematical expressions, then even a simple expression can bring down the system

[23:42] <machack666> = bad

[23:42] <nothingmuch> will ask you per hunk whether to inclue or not

[23:42] <nothingmuch> and then you give it the name

[23:42] <nothingmuch> annd blammo

[23:42] <nothingmuch> after that, darcs init a repo somewhere on webspace

[23:42] <nothingmuch> and darcs push to it

[23:43] <gaal> how do i restore my meessed up fiel in the darcs secret dir?

[23:43] <gaal> don't feel like couting again.

[23:43] <machack666> that kind of behavior should be explicitly requested by the programmer, and not inherently a sinkhole which could trip up anyone not expecting it.l

[23:44] <nothingmuch> darcs secret dir?

[23:44] <nothingmuch> ah

[23:44] <nothingmuch> i'd say darcs get again from http://nothingmuch.woobling.org/...

[23:44] <Juerd> machack666: Try **(1..Inf)

[23:45] <gaal> 2:44. i'll get you for this :)

[23:45] <Juerd> machack666: Perl is known for not keeping people from shooting themselves in the feet

[23:45] <gaal> what's the fuill path again?

[23:45] <nothingmuch> and then just replace the old _darcs/current with the new _darcs/current

[23:45] <nothingmuch> Juerd: i thought perl 6 is supposed to fix this

[23:45] <Juerd> machack666: A programmer should know his data - always.

[23:45] <nothingmuch> no safer way

[23:45] <nothingmuch> http://nothingmuch.woobling.org/Test-TAP-HTMLMatrix/

[23:45] <Juerd> nothingmuch: No, if you want to do stupid things, Perl will let you.

[23:45] <machack666> true, but I'm not sure where this behavior is desirable beyond what you can accomplish with hyperops

[23:46] <machack666> other than perhaps combinametrics

[23:46] <gaal> Juerd, i think nm was talking to me, and it's darcs that let me do stupid things :)

[23:46] <nothingmuch> Juerd: there's a diff between giving you enough rope to hang yourself with and giving you a noose.

[23:46] <Juerd> machack666: my $acceptable = SomeClass | SomeOtherClass;

[23:46] <Juerd> machack666: ...

[23:46] <nothingmuch> gaal: eh?

[23:46] <Juerd> machack666: when $acceptable { ... }

[23:46] <nothingmuch> what stupid things did darcs let you do

[23:47] <machack666> hmm...

[23:47] * nothingmuch thinks the way junctions are headed

[23:47] <nothingmuch> that is, you can pass them around your control structure

[23:47] <machack666> DBI->connect($scalar____or_is_it);

[23:47] <machack666> it could come in handy... :D

[23:47] <nothingmuch> in a std var

[23:47] <nothingmuch> but then if you send them into a function it magically changes execution by autothreading

[23:47] <nothingmuch> even if it's completely insane to autothread the target function

[23:48] <machack666> as long as it is requested, I think it's fine, but it makes it too easy for a poorly written module to misbehave for the entire system

[23:48] <Juerd> nothingmuch: I dislike implicit autothreading.

[23:48] <nothingmuch> because it might be $complex_object->do_dangerous_activity($input_from_parent);

[23:48] <nothingmuch> perhaps not input from parent

[23:48] <Juerd> nothingmuch: I agree that with implict autothreading, disallowing assignment of junctions is a good default

[23:48] <Juerd> nothingmuch: But I think both should be toggled.

[23:48] <nothingmuch> i think autothreading is very useful

[23:48] <Juerd> Yes, it is

[23:49] <nothingmuch> but only explicitly

[23:49] <Juerd> But it should have syntax.

[23:49] <Juerd> Exactly.

[23:49] <Juerd> And then it's okay to put junctions in variables

[23:49] <nothingmuch> it should have both a syntax as a param to a junction

[23:49] <nothingmuch> that is Any|Junction is stupid

[23:49] <nothingmuch> it should be Any&Autothread

[23:49] <Juerd> Any must include Junction or not be called Any.

[23:49] <Juerd> Just consider that lcfirst any CREATES a junction :)

[23:50] <machack666> should there be a runtime flag to know if autothreading is currently enabled?

[23:50] <nothingmuch> and you should be able to have a junction flattenning op

[23:50] <nothingmuch> that autothreads the expression it happens in

[23:50] <nothingmuch> like sub_call($a, $b, »*«$junction);

[23:50] <machack666> define junction flattening

[23:50] <Juerd> Please rewrite with texas quotes

[23:50] <Juerd> My terminal sucks.

[23:51] <nothingmuch> >>*<<$junction <-- just silliness

[23:51] <machack666> me too

[23:51] <machack666> </aol>

[23:51] <Juerd> Ah

[23:51] <nothingmuch> anyway, you should have the ability to define both:

[23:51] <nothingmuch> subroutine params that want to be autothreaded

[23:51] <gaal> nm, recorded. now whay?

[23:51] <Juerd> I wonder why sub_call($a, $b, >>$junction<<) isn't used.

[23:51] <nothingmuch> (And return values perhaps rejunctioned)

[23:51] <nothingmuch> and also a way to dejunction from the caller perspective

[23:52] <nothingmuch> gaal: darcs pull from form2.org or something

[23:52] <nothingmuch> or even just rsync the repo over there

[23:52] <gaal> pull *from* forum2.org?

[23:52] <nothingmuch> or darcs send

[23:52] <nothingmuch> yep

[23:52] <nothingmuch> or darcs push to forum2.org

[23:52] <gaal> i'm not familiar with the syntax and it's late. can you just give me a command that works pleasE?

[23:52] <nothingmuch> either action requires darcs on the other side

[23:52] <nothingmuch> do you have darcs on formu2.org?

[23:52] <gaal> no.

[23:52] <nothingmuch> okay

[23:53] <gaal> let me just email you a patch :)

[23:53] <nothingmuch> rsync -avz ./ [email@hidden.address]
[23:53] <nothingmuch> in that case 'darcs send'

[23:53] <nothingmuch> it uses sendmail

[23:53] <nothingmuch> and it will know my email

[23:53] <nothingmuch> because it takes the email setting from defaultrepo

[23:54] <gaal> er, why is p6-compiler the default to: address on this?

[23:54] <nothingmuch> ah

[23:54] <nothingmuch> good point

[23:54] <nothingmuch> that's what i set the email to

[23:54] <nothingmuch> because it's not my module per se

[23:54] <Juerd> see Message-ID: [email@hidden.address]
[23:54] <Juerd> Took a while for me to find it :)

[23:56] <gaal> ah, now i can't even diff against the version i co'ed. good night.

[23:57] * gaal zzz&

[23:57] <Juerd> nn

[23:57] * Juerd sleepy too

[23:57] <nothingmuch> ciao

[23:59] <nothingmuch> Juerd: good post

