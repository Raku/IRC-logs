[00:13] <Limbic_Region> what is the p6 way to get the index of the last element of an array (in p5 $#array) ??

[00:16] <mugwump> @array.count or something

[00:18] <Limbic_Region> you mean @array.elems ?

[00:18] <mugwump> sure, or +@array

[00:18] <Limbic_Region> either way - it doesn't sound like $#array

[00:18] <Limbic_Region> my $last = @array.elems - 1; # seems wrong

[00:19] <mugwump> hmm, wouldn't that be:

[00:19] <mugwump> my $last = @array[+@array-1]

[00:20] <mugwump> or just:

[00:20] <mugwump> my $last = @array[-1]

[00:21] <Limbic_Region> no - don't want the value of the last element

[00:21] <Limbic_Region> want the index

[00:21] <Limbic_Region> p5's $#array

[00:21] <mugwump> ok

[00:21] <Limbic_Region> what I am using right now is my $last = @array.elems - 1; # seems wrong

[00:22] <mugwump> @foo.end

[00:22] <mugwump> from S02

[00:23] <Limbic_Region> salamat

[00:24] * mugwump pulls the latest pugs version to see if .end is in it

[00:24] <Limbic_Region> doesn't appear to be implemented yet

[00:25] <mugwump> care to add a test for it?

[00:25] <mugwump> I'll try my hand at the implementation

[00:25] <Limbic_Region> mugwump - as soon as I am finished writing my purty code

[00:25] <mugwump> ok

[00:25] <Limbic_Region> theres another thing that doesn't quite work right yet either

[00:25] <Limbic_Region> my @foo = grep defined, @bar;

[00:25] <Limbic_Region> my @foo = grep { defined } @bar;

[00:25] <Limbic_Region> those two don't work

[00:26] <Limbic_Region> my @foo = grep { defined $_ } @bar; # does work

[00:27] <Limbic_Region> on the other hand

[00:27] <Limbic_Region> my @foo = grep defined(), @bar; # appears to be working

[00:29] <mugwump> add a test for it somewhere, if you can

[00:29] <Limbic_Region> mugwump - just installed Pugs for the first time - my very first p6 program - give me a chance to catch up

[00:29] <Limbic_Region> :P

[00:30] <mugwump> cool.  sure, take your time.

[00:34] <wolverian> Limbic_Region: grep EXPR, LIST; is invalid in perl6

[00:34] <wolverian> Limbic_Region: the only form is grep BLOCK LIST; (and the method form of course)

[00:35] <Limbic_Region> thanks wolverian

[00:35] <Limbic_Region> now what about array slices?

[00:36] <wolverian> what about them?

[00:36] <mugwump> Detailed in S06

[00:36] <mugwump> oops, not 6

[00:37] <mugwump> S09

[00:37] <wolverian> (if grep defined(), @bar; works in pugs, it's a bug)

[00:37] <Limbic_Region> appeared to work - it didn't

[00:38] <wolverian> ah, good.

[00:49] <gantrixx> will the final implementation of perl6 be written in Haskell?

[00:51] <wolverian> no. it will be written in perl6.

[00:51] <wolverian> see http://svn.perl.org/perl6/pugs/trunk/docs/01Overview.html

[00:53] <gantrixx> OK, so let me understand something....when it says "The Perl 6 compiler needs to be written in Perl 6 itself", I assume they mean Parrot=Perl6 compiler, correct?

[00:53] <mauke> no, parrot is the perl6 interpreter

[00:53] <wolverian> no.

[00:53] <wolverian> parrot is the VM.

[00:53] <stevan> gantrixx: we are using haskell to bootstrap the perl6 compiler

[00:54] <gantrixx> OK, I see

[00:54] <wolverian> (and JITter)

[01:06] <Limbic_Region> should last if defined @subset[ $pos ];

[01:06] <Limbic_Region> work?

[01:07] <Limbic_Region> mugwump - you still around?

[01:08] <Limbic_Region> mugwump ping

[01:12] <scw> autrijus: did I do that? @@ # 03:59 < autrijus> scw: why did you remove output/fp/fp.

[01:13] <Limbic_Region> http://perlmonks.org/index.pl?node_id=451398  # YEAH, my first p6/pugs code

[01:13] <mugwump> Limbic_Region: pong

[01:13] <scw> autrijus: I'll check..

[01:13] <Limbic_Region> mugwump - going to write the @array.end test - should I email it to you?

[01:13] <Limbic_Region> I don't have commit access

[01:14] <Limbic_Region> I also need to know if:  last if defined @subset[ $pos ]; # should work?

[01:16] <scw> autrijus: r2316.. I don't remember doing that, might be some missuse of svk, i think

[01:17] <ninereasons> Limbic_Region, I believe that that's proper p6, but 'if' occuring in that pattern is broken right now.

[01:17] <Limbic_Region> also - while ( my @combo = $next() ) { # doesn't appear to work

[01:18] <Limbic_Region> I have to do:  my @combo;  while ( @combo = $next() ) { # to get it to work

[01:19] <ninereasons> if rewritten "if defined @subset[ $pos ] { last } # this will work, I think.

[01:19] <ninereasons> and the second one will probably be written "while $next() -> @combo {...} " # look equivalent?

[01:19] <Limbic_Region> that's what I did ninereasons

[01:20] * Limbic_Region didn't think of that - let me try it

[01:20] <Limbic_Region> choked on that too ninereasons

[01:23] <Limbic_Region> ok - so the 3 things I found is no @array.end,  last if defined @array[ $index ], and while ( my @array = $ref() ) { ... }

[01:23] <stevan> Limbic_Region: I can set you up with commit access :)

[01:23] <stevan> Limbic_Region: next, and redo dont work yet I was thinking of writing tests for them myself, but you can if you want :)

[01:24] <stevan> oh wait,.. misread your comment

[01:24] <Limbic_Region> stevan - not tonight

[01:24] <stevan> while (my @array ... wont work because my currently is only suppoted outside of expressions

[01:24] <Limbic_Region> yeah - I worked around it

[01:24] <stevan> Limbic_Region: want commit access though? it only takes a second

[01:25] <stevan> and doesnt hurt at all 

[01:25] <Limbic_Region> no - because then I will be responsible for checking stuff in

[01:25] <Limbic_Region> let me ease into this

[01:25] * Limbic_Region just installed Pugs and wrote his first p6 program tonight

[01:25] <stevan> LOL

[01:25] <Limbic_Region>  http://perlmonks.org/index.pl?node_id=451398

[01:25] <stevan> do you have SVN

[01:25] <Limbic_Region> svk

[01:25] <stevan> then checking in is very simple :)

[01:26] <stevan> I would like you to check in this code to examples 

[01:26] <Limbic_Region> alright

[01:26] <stevan> email addy?

[01:26] <Limbic_Region> you tell me how and I will be much obliged

[01:26] <Limbic_Region> [email@hidden.address]
[01:26] <stevan> Limbic_Region: I would be glad too 

[01:27] * Limbic_Region is known meatspace as Joshua Gatcomb btw

[01:28] <stevan> whoops looks like someone tripped over the ethernet cord at castorbaways house :)

[01:28] <Limbic_Region> heh

[01:29] <stevan> Limbic_Region: your invite is in the mail

[01:30] * stevan goes to see how to checkin with svk now :)

[01:31] <stevan> looks like you just mv the file into examples/

[01:31] <stevan> then svk add examples/<filename>

[01:32] <Limbic_Region> I will be prompted for user/pass?

[01:32] <stevan> then 'svk ci' to commit locally, and 'svk push' to send it up to openfoundry

[01:32] <stevan> Limbic_Region: yes, I think it will ask when you try to commit

[01:32] <stevan> (at least that is how SVN works)

[01:32] <Limbic_Region> alright - should it just go under examples?

[01:32] <stevan> sure

[01:33] <stevan> and dont forget to add yourself to the AUTHORS file

[01:35] <Limbic_Region> do I add a comment - I got a notepad window up

[01:35] * Limbic_Region assumes it is for the log

[01:35] <stevan> yes, anything you like :)

[01:35] <stevan> yup, for the log

[01:36] <Limbic_Region> goes before the === Targets to commit line?

[01:37] <stevan> I am not sure i understand what you are asking?

[01:37] <Limbic_Region> not working WRT to username 

[01:37] <Limbic_Region> don't worry about it - I will figure it out

[01:37] <stevan> ok

[01:39] * Limbic_Region assumes USERNAME is taken from ENV and just fakes it for now

[01:39] <stevan> probably a good assumption, but I cannot say since I use SVN and not SVK

[01:39] <stevan> although I have been meaning to get around to using SVK

[01:40] <Limbic_Region> grrr - bad assumption

[01:41] <mugwump> it should prompt you for a username once the first try fails

[01:41] <Limbic_Region> ;-)

[01:42] <ninereasons> that's what happens in svn, anyway. 

[01:42] <Limbic_Region> ok - it appears svk ci did more than commit locally

[01:42] <Limbic_Region> can someone tell me if it worked

[01:42] <Limbic_Region> ;-)

[01:43] <ninereasons> svk log ?

[01:43] <stevan> Limbic_Region: it worked

[01:43] <Limbic_Region> cool

[01:44] <stevan> but you didnt add yourself to AUTHORS

[01:44] <Limbic_Region> but I forgot to add myself to the AUTHORS file

[01:44] <stevan> :)

[01:44] <stevan> feel free to write your name in Tagalog too :)

[01:46] <ninereasons> stevan, is the while loop going to use an arrow for assingment, just like the for loop does? 

[01:46] <mugwump> while loop using arrow for assignment?  eh?  :)

[01:46] <stevan> ninereasons: not sure

[01:46] <mugwump> you mean the -> $x {  } block syntax?

[01:46] <stevan> mugwump: I think he means topicalization

[01:47] <ninereasons> yes, mugwump 

[01:47] <ninereasons> right.

[01:47] <ninereasons> toc

[01:47] <Limbic_Region> ok - well, that's it for me tonight

[01:47] <stevan> Limbic_Region: welcome aboard :)

[01:47] <Limbic_Region> I will summarize the things I want that don't currently work and possibly write tests for them tomorrow

[01:47] <mugwump> Limbic_Region: did you commit a test for .end?

[01:47] <Limbic_Region> no mugwump - I asked you about it earlier - no response

[01:48] <Limbic_Region> and then stevan conned me into get commit access

[01:48] <jabbot> pugs - 2347 - Generate lists powerset in progressive o

[01:48] <jabbot> pugs - 2348 - Forgot to update AUTHORS file

[01:48] <Limbic_Region> but I am out of time now

[01:48] <mugwump> sure... be sure to commit it when you can!  :)

[01:49] <Limbic_Region> I will likely make it available here for someone else to commit since I won't be able to from work

[01:49] <Limbic_Region> so it would have to wait until tomorrow evening

[01:49] <Limbic_Region> and tomorrow evening is busy - final walk through (closing on house on Wednesday)

[01:51] <stevan> Limbic_Region: what better way to celebrate your new home then by commiting tests to Pugs :)

[01:55] <Limbic_Region> http://use.perl.org/~Limbic%20Region/journal/24371 # summary of tests that I am going to attempt to write tomorrow

[01:55] <Limbic_Region> and on that note - TTFN all

[01:56] <ninereasons> what do you think, mugwump ? is it going to be "while (my $var = something() ) { ... } " ; or will it sometimes make sense to say, while something() -> $var { ... } ; ?

[01:57] <wolverian> for something -> $var { ... }, I'd say 

[01:58] <mugwump> but, that will only call something() once

[01:58] <jabbot> pugs - 2349 - 

[01:58] <jabbot> pugs - 2350 - implement @array.end

[01:59] <wolverian> and lists are lazy..

[02:01] <mugwump> ok, from S04:

[02:01] <mugwump> for =something() -> $foo {  }

[02:02] <mugwump> a nice little higher order for loop for you :)

[02:03] <ninereasons> there, I see it: " while =$*IN -> $line {...}"

[02:03] * mugwump nods

[02:04] <mugwump> looks like both for and while can be used like that

[02:05] <ninereasons> I like that.  the arrow is very "act upon" implying

[02:05] <mugwump> very ruby-esque

[02:06] <mugwump> (not the arrow, but the form)

[02:06] <ninereasons> I wouldn't know.  but there I hear that there is much to admire in ruby.

[02:06] <ninereasons> s/there//

[02:07] <mugwump> indeed

[02:07] * mugwump & # meeting

[02:07] <ninereasons> s/to admire/to steal/

[02:07] <ninereasons> :-)

[02:30] <obra> autrijus++

[02:30] <obra> autrijus++

[02:30] <obra> autrijus++

[02:30] <obra> make smoke: real    4m37.942s

[02:30] <obra> genuinely 50% faster than 48 hours ago

[02:31] <stevan> obra: what revision are you running?

[02:32] <stevan> I am getting seg faults for everything

[02:32] <stevan> (I just rm-ed src

[02:32] <stevan> so that might help)

[02:33] <obra> stevan: head

[02:34] <stevan> hmm, ok maybe I had some bad stuff in src/ 

[02:35] <ninereasons> I also was getting segfaults in everything until I removed the src/ directory, stevan

[02:36] <stevan> ninereasons: good to know :)

[02:36] <stevan> I think make clean is not cleaning up enough

[02:40] *** metaperl__ is now known as metaperl_

[02:43] <mugwump> Gosh, BrowserUk on perlmonks is so full of shit

[02:44] <Khisanth> the guy that can't admit he is wrong? :)

[02:44] <mugwump> his mind is as open as a amish woman's legs

[02:45] <mugwump> s/a /an /

[02:46] <Khisanth> are you sure you know amish women well enough?

[02:46] <mugwump> heh.  Well, I don't "know" any ;)

[03:28] <jabbot> pugs - 2351 - remove non-working sub

[03:38] <jabbot> pugs - 2352 - more refactoring for the tic-tac-toe

[03:55] <gantrixx> so, is pugs a compiler?

[03:55] <mugwump> yes

[03:56] <mugwump> and an interpreter.

[03:56] <mugwump> what are you really asking?  :)

[03:56] <gantrixx> pugscc is the compiler and pugs is the interpreter?

[03:56] <gantrixx> I'm wondering how I can write perl6 code

[03:57] <gantrixx> I assumed I would be able to #!/usr/bin/perl6 and it would be automatically compiled and interpreted by parrot

[03:57] <gantrixx> or I was hoping

[03:57] <mugwump> you'll need to set up a symlink for that to work

[03:58] <gantrixx> I see what was installed, but I don't understand how to use pugs

[03:58] <mugwump> `pugs' can be used like `perl'

[03:58] <mugwump> actually running via parrot (rather than just pugs) is an `experimental' option of pugscc

[03:59] <gantrixx> ok, great

[04:00] <gantrixx> so when I use pugs, it's not using parrot at all?

[04:00] <mugwump> not yet / by default

[04:01] <gantrixx> but I can compile into parrot with pugscc --parrot ?

[04:01] <mugwump> yes, that should leave you with parrot bytecode

[04:02] <gantrixx> ok, let me figure out how to get parrot to interpret it

[04:10] <gantrixx> ok, so out of pugscc, am I expecting a source.pasm file?

[04:11] <gantrixx> I get an .imc file

[04:15] <mugwump> oh, ok.  maybe imcc will give you the .pasm or .parrot file

[04:15] <mugwump> I'm not sure, I thought that "just worked", looking at the pugscc script

[04:16] <gantrixx> sorry guys, I feel like an idiot asking all these questions

[04:16] <gantrixx> well I get a .imc file, but it is 0 length

[04:16] <gantrixx> but I was able to get the #!/usr/bin/pugs thing to work

[04:17] <mugwump> ok.  does pugscc --runparrot work for you?

[04:17] <gantrixx> let me try

[04:17] <gantrixx> I still get a 0 length .imc file

[04:18] <mugwump> it must be failing without raising an error, then :(

[04:18] <jabbot> pugs - 2353 - * avoid name clash by renaming fp/ into 

[04:18] <jabbot> pugs - 2354 - * point-free the .end implementation for

[04:19] <gantrixx> I've done pugscc --run --parrot test.p6, pubscc --runparrot test.p6

[04:19] <gantrixx> both result in a 0 length test.imc

[04:19] <gantrixx> should the output be an .imc file?

[04:19] <ninereasons> pugscc --runparrot -e 'say "hello"' # gives me a.pir

[04:20] <ninereasons> parrot a.pir # prints "hello"

[04:20] <gantrixx> I get a.imc

[04:20] <gantrixx> and it is 0 length

[04:21] <gantrixx> I have pugs 6.2.0

[04:21] <ninereasons> mine is r2350;  maybe that's it

[04:21] <ninereasons> 6.2.1

[04:32] <ninereasons> gantrixx, I had some cleaning out of my own to do;  I now get a *.imc file when I run pugscc

[04:32] <gantrixx> ok, well now I get a non-0 lenght .imc file

[04:32] <ninereasons> pugscc --run --parrot examples/mandel.p6; # produces mandel.imc

[04:32] <gantrixx> but it it only compiles a simple "hola mundo" program

[04:34] <mugwump> not all pugs AST nodes have IMC written for them yet

[04:34] <gantrixx> pugs: Cannot compile: App "&elems" [Var "@array"] []

[04:34] <gantrixx> this is the error I get

[04:34] <gantrixx> so maybe that corresponds to what you said

[04:35] <ninereasons> pugs -e "my @a = 1..3; say @a.elems " ; # what do you get if you say this at the command line

[04:36] <gantrixx> 3

[04:37] <gantrixx> In my program I simply have "my @array = ( "red", "blue", "green", "white", "black" ); print "There are " ~ @array.elems ~ " elemements\n"; "

[04:38] <gantrixx> it works if I use #!/usr/bin/pugs

[04:38] <gantrixx> but I can't compile it with pugscc

[04:39] <ninereasons> sorry - i was distracted; you answered my next question

[04:40] <ninereasons> are you able to run the mandel.p6 example, gantrixx ?

[04:40] <gantrixx> when I do a #!/usr/bin/pugs it is actually compiling it first and then feeding it to the pugs interpreter, right?

[04:40] <gantrixx> let me try the fractal example

[04:41] <gantrixx> mandlebrot seems to work

[04:42] <gantrixx> and I can do a "parrot mandel.imc" and it works fine also

[04:43] <ninereasons> you can see how much faster parrot is than pugs, by running that script with pugs for comparison

[04:43] <gantrixx> ok, let me mimic some of the stuff in the mandel.p6 script

[04:43] <gantrixx> and see if I can get my little test to work

[05:03] *** joepurl_ is now known as joepurl

[05:56] *** chady_ is now known as chady

[06:16] *** metaperl__ is now known as metaperl_

[06:37] <Khisanth> I really hope perl6 is going to be easier for highlighters ... at the very least for text editors written in perl6

[06:39] <castaway1> ,)

[06:39] *** castaway1 is now known as castaway

[06:52] <nothingmuch> i think it's going to be much harder

[06:52] <nothingmuch> macros are no fun

[06:52] <nothingmuch> new infix ops that affect parsing

[06:53] <nothingmuch> i think an editor without an embedded p6c couldn't do it

[06:53] <nothingmuch> that aside: good morning

[06:53] <nothingmuch> by new infix ops - i mean ones the user defines

[06:56] <castaway> mornin nothingmuch 

[07:12] *** wilx` is now known as wilx

[08:08] <osfameron> eek!

[08:08] <osfameron> foo (3) + 4;    # foo(7)

[08:09] <osfameron> where is the rtfm that explains why this is a good idea?

[08:10] <castaway> (3) is just a mathematical expression that reduces to 3, would be my guess

[08:10] <castaway> (ie its being clever in context)

[08:11] <castaway> hm, although I suppose its a question of precedence

[08:12] <osfameron> the counter example is: 

[08:12] <osfameron> foo(3) + 4;    # foo(3)

[08:12] <pjcj> that's always been slightly dodgy ground in perl5

[08:12] <osfameron> where because there's no whitespace the parens surrounds the function's arguments entirely

[08:13] <osfameron> I think I've converted to javascripty () for arglists ;-)

[08:15] <castaway> hmm, significant whitespace is indeed somewhat odd

[08:18] <Khisanth> unavoidable

[08:20] <castaway> It isnt, just make people add parens where the meaning is ambiguous, like in math

[08:20] <castaway> foo (3) + 4 -> foo(3); foo (3+4) -> foo(7)

[08:22] *** chady is now known as chady_

[08:22] <Khisanth> what is foo (3+4) + 4? :)

[08:24] <Khisanth> castaway: having significant whitespace is not as bad as having exceptions to rules

[08:24] <Juerd> castaway: No, those are both foo(7) 

[08:24] <Juerd> Khisanth: foo(11)

[08:25] <Juerd> castaway: The () for function calls is not the same () you use for precedence grouping

[08:25] <Juerd> castaway: The () that is part of the sub call syntax works like subscripting [] or {}

[08:25] <Khisanth> we need a bigger keyboard with more brackets :)

[08:26] <Juerd> castaway: whitespace disallowed, unless you add a dot

[08:27] <Juerd> castaway: The rules change consistently from Perl 5 to Perl 6: in Perl 5 you could use whitespace with all three of postcircumfix (), [] and {}.

[08:27] <castaway> Juerd, that was just my opinion of how it would make sense to me

[08:27] <osfameron> is the reason for this documented somewhere?

[08:27] <Juerd> osfameron: I don't know. It's easier to re-explain than to find it in the docs

[08:28] <osfameron> ah!

[08:28] <Juerd> osfameron: for @foo { ... } needs whitespace

[08:28] <Khisanth> the problem with "add parens where the meaning is ambiguous" is that it leads to lisp :)

[08:28] <Juerd> osfameron: And given $foo{ ... } is incomplete, needs a block, because $foo is used as a hashref

[08:28] <Juerd> osfameron: So the rules for subscripting need to change to disallow whitespace

[08:29] <osfameron> ok, I'm fairly happy with the subscripting stuf

[08:29] <Juerd> osfameron: This applies to postcircumfix () as well, which is syntactically just subscripting

[08:29] <osfameron> oh

[08:29] <Khisanth> Juerd: what would @foo{...} get mistaken for?

[08:29] <Juerd> osfameron: Which finally makes it newbie-friendly

[08:29] <osfameron> Juerd: `foo (3+4) + 5` is not osfameron-friendly

[08:29] <Juerd> (And Juerd-friendly, because it will now behave the way I had always expected... The problem is that different people expect different things from this. Some expect Perl 5 behaviour, some want the Perl 6 way)

[08:30] * castaway hmms and shrugs, cos she doesnt generally put spaces between funcnames and parens anyway

[08:30] <Juerd> Khisanth: hash deref on @foo

[08:30] <Juerd> Khisanth: It's entirely okay to implement a postcircumfix {} operator for arrays if you want to.

[08:30] <Khisanth> oh that is going to make for some fun mistakes that work even though it wasn't intended

[09:13] * castaway struggles to build PAR .. anyone ever try that on HP-UX ?

[09:32] <Juerd> castaway: I get the feeling HPUX was never meant to be used :)

[09:32] <castaway> hmm, according to the docs its supposed to work on HP

[09:33] <castaway> regardless of your feelings, people use it.

[09:37] <Juerd> It's that way with many things

[09:37] <Juerd> Like bondage SM

[09:37] <Juerd> I think it's not human and can't possibly be pleasant, but there are indeed people who practice it.

[09:39] <draven_> Juerd: you are weird :p

[09:40] <bsb> Anyone run pugs under ghci?

[09:41] * Juerd whips draven_

[09:42] <Juerd> Do you like that?

[09:42] * draven_ jizzes on juerd.

[09:42] <Juerd> Don't do that.

[09:42] <draven_> :D

[09:42] <draven_> you started it :p

[09:43] <draven_> actually, I'm not into submission

[09:43] <draven_> <g>

[09:43] * castaway concludes shes running the wrong ld, since it doesnt like the options that perl -V suggests were used on build

[09:43] <Juerd> Then this beautiful leather dog collar is not for you.

[09:44] <Juerd> No {J} for you.

[09:44] <draven_> Juerd: guess not.

[09:44] <Juerd> draven_: But your nice is lcfirst.

[09:44] <Juerd> draven_: Don't mislead people like that.

[09:44] *** draven_ is now known as Draven

[09:44] <Draven> better?

[09:45] <Juerd> Draven: Well, if you're dominant, it suits better.

[09:45] <Draven> mhm

[09:45] <Draven> Juerd: for someone who doesn't understand why people would like it, you sure know alot about it :)

[09:45] <Juerd> I've hosted an IRC server for some bdsm channels

[09:45] <Juerd> Learned quite a lot about their customs :)

[10:14] <pasteling> "bsb" at 203.214.67.82 pasted "hasktags Makefile.PL patch" (21 lines, 609B) at http://sial.org/pbot/9660

[10:14] <bsb> does that patch look harmless?

[10:14] <bsb> I don't want to make a mess

[10:21] <theorbtwo> Looks good to me, bsb.

[10:22] <bsb> happy day

[10:22] <bsb> ghci -isrc src/Main.hs ./src/pcre/pcre.o src/UnicodeC.o

[10:23] <bsb> isn't going to work tonight so I'll leave that

[10:25] <theorbtwo> Try make ghci.

[10:28] <bsb> GHCi runtime linker: fatal error: I found a duplicate definition for symbol

[10:28] <bsb>    blkcmp

[10:28] <bsb> whilst processing object file

[10:28] <bsb>    src/UnicodeC.o

[10:28] <jabbot> pugs - 2355 - $ENV{HASKTAGS} override

[10:28] <theorbtwo> Nod, didn't think that'd work either.

[10:28] <theorbtwo> But it was worth a try.

[10:29] <bsb> ta

[10:29] *** Aragone is now known as Arathorn

[12:02] * nothingmuch just helped someone install ubunto on top of colinux

[12:02] <nothingmuch> with a rootless xwin

[12:02] <nothingmuch> trés cool

[12:02] <nothingmuch> works very well

[12:19] <castaway> whats colinux ?

[12:21] <decay> castaway: http://www.colinux.org/

[12:22] * castaway can talk in urls too :)

[12:28] <decay> castaway: not much more to say about it, it works quite ok

[12:29] <castaway> well, you could give a brief synopsis for lazy people :)

[12:29] <decay> think of a user mode linux running on windows

[12:30] <castaway> hmm, interesting.. I wonder how/why they got further than plex86, who seem to have given up

[12:33] <decay> well, it's not a virtual machine if i understand that correctly

[12:34] <castaway> I'm not at all sure what "cooperatively alongside" means..

[12:36] <theorbtwo> It looks very nifty.

[12:36] <theorbtwo> Your real machine runs both windows and linux at the same time.

[12:37] <theorbtwo> It's somewhere inbetween a virtual machine like vmware, qemu, etc, and a dual-boot computer.

[12:38] <decay> it's more like the uml linux kernel which runs in userland

[12:38] <decay> i think they do not 'emulate' a machine in there.

[12:38] <castaway> what does "at the same time" mean?

[12:38] <decay> castaway: it runs as a process

[12:39] <castaway> I mean, I understand the text, but it doesnt sound possible

[12:39] <castaway> a Windows process?

[12:39] <decay> castaway: sure

[12:39] <theorbtwo> Apparently it is.

[12:39] <castaway> (a kernel process, a cpu process ?)

[12:39] <decay> castaway: we have some boxes here running 32 uml linux kernels in userland

[12:39] * castaway has never been to userland :)

[12:40] <decay> castaway: a process as seen by windows xp, a program

[12:40] <castaway> ah, so it is running "under" windows

[12:40] <decay> yes

[12:40] <castaway> Ok, I wouldnt define that as "alongside"

[12:41] <decay> castaway: if you're interested in that you might take a look at xen

[12:42] <decay> castaway: which runs them 'alongside', though it's specially adapted OS versions/kernels running where with support for virtualized hardware

[12:42] <Limbic_Region> ok - so after stevan rooked me into commit access, I need to write some tests for some features I found lacking

[12:42] <Limbic_Region> any guide to writing tests?

[12:42] <castaway> Test::Tutorial ? or p6 ones in particular ?

[12:43] <Limbic_Region> p6 ones specifically

[12:43] <Limbic_Region> like for instance - @array.end is missing - where do I add it

[12:44] <gaal_> t/README

[12:44] <gaal_> and welcome :)

[12:44] <castaway> I think thats mostly up to intuition, I dont think theres a roadmap

[12:44] <Limbic_Region> thanks gaal - did you see my powerset in progressive order example?

[12:45] <gaal_> no, i wasn't around most of today - where is it?

[12:45] <Limbic_Region> there is also one thing I forgot to add to the list in my journal of things that didn't work as I expected.  my $foo = sub returns List { ... }

[12:45] <Limbic_Region> examples/progressive_powerset.p6 or powerset_progressive.p6 - not sure which

[12:46] <Limbic_Region> you can assign an anonymous sub to a scalar but you can indicate what it returns (currently)

[12:46] * castaway guesses "t/builtins/arrays

[12:46] <Limbic_Region> thanks castaway

[12:46] * Limbic_Region hugs castaway

[12:48] <castaway> and possibly 'end.t' since strings/ has a whole bunch of files named after operations that can be done on them

[12:49] <Limbic_Region> .end isn't for arrays only?

[12:49] * Limbic_Region had already planned on naming the test end.t btw

[12:49] <castaway> :)

[12:50] <castaway> no idea, but looking at the t/ layout, if it turns up in multiple places, you eitehr create 2, or make something like arrays_and_hashes

[12:50] <castaway> (although that may be interaction-of, not shared-funcs

[12:51] * castaway could also be FOS ,)

[12:58] <Limbic_Region> ok - so can I email t/builtins/arrays/end.t to someone with commit access - I can't commit from work

[12:58] <autrijus> why?

[12:58] <autrijus> this is HTTP port 80

[12:58] <autrijus> your company isn't DAV aware?

[12:58] <autrijus> rehi lambdacamels, btw.

[12:58] <castaway> its an autrijus!

[12:58] <Limbic_Region> autrijus - company = U.S. Government

[12:59] <autrijus> Limbic_Region: hm. so, it's a policy problem, not a technical one?

[12:59] <Limbic_Region> and I forgot to burn a copy of GHC/Pugs/svk to bring in this morning anyway

[13:00] <autrijus> you can always DAV mount using Win32 web folder and just copy your files there... :)

[13:00] <autrijus> but sure, nopaste the code and I'll commit for you

[13:00] <Limbic_Region> autrijus - all HTTP traffic goes through a proxy that is monitored

[13:00] <Limbic_Region> perlbot nopaste

[13:00] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[13:01] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "t/builtins/arrays/end.t" (34 lines, 662B) at http://sial.org/pbot/9662

[13:03] <autrijus> Limbic_Region: committed (and it all passes)

[13:03] <autrijus> thanks!

[13:03] <Limbic_Region> walang anuman

[13:03] <Limbic_Region> so it is already implemented?

[13:04] <autrijus> sure

[13:04] <autrijus> I think mugwump did it

[13:04] <autrijus> right after your request

[13:04] <autrijus> which is usual around here

[13:04] <Limbic_Region> out of curiosity, what does @foo.end return if all of the elements are shifted off (i.e. does it give -1)

[13:04] <autrijus> -1 surely

[13:04] <autrijus> pugs> ().end

[13:04] <autrijus> -1

[13:04] * Limbic_Region should have included that as a test

[13:05] <castaway> You didnt? :)

[13:05] <autrijus>     my @array = ();

[13:05] <autrijus>     is(@array.end, -1, 'we have an empty list');

[13:05] <autrijus> I think it's good enough

[13:05] <Limbic_Region> castaway - I wrote a test for initializing empty - not returning to empty

[13:06] <Limbic_Region> autrijus - did you get a chance to see http://use.perl.org/~Limbic%20Region/journal/24371

[13:06] <Limbic_Region> beyond the 4 that I mentioned, my $foo = sub returns List { ... }; # doesn't work either

[13:07] <Limbic_Region> was wondering which would be considered low hanging fruit so that I could write some more tests

[13:08] <autrijus> ok...

[13:08] <autrijus> I think I fixed your #2

[13:08] <autrijus> would be wonderful if there's a test

[13:08] <jabbot> pugs - 2356 - C* @array.end tests, from Limbic_Region

[13:10] <Limbic_Region> autrijus - run http://perlmonks.org/index.pl?node_id=451398 and tell me if it works - if so, it worked for sure

[13:11] <autrijus> looking

[13:11] <Limbic_Region> I will start looking at any existing tests for last and supplement in the interim

[13:12] <autrijus> Limbic_Region: it works

[13:13] <Limbic_Region> good ;-)

[13:13] * Limbic_Region thinks about p5 behavior WRT to last in a subroutine and wonders if the behavior in p6 has been defined

[13:14] <theorbtwo> Larry's example code uses the p5ish behavior to next to the next canidate in something like multimethod dispatch, IIRC.

[13:16] <Limbic_Region> theorbtwo - what I mean is when you f'up and put last to exit a sub (p5 let's you do it but issues warnings)

[13:17] * Limbic_Region still hasn't found any existing last tests

[13:17] <autrijus> Limbic_Region: I'm not sure that

[13:17] <autrijus> while (my $foo = ...) { ... $foo ... }

[13:17] <autrijus> works

[13:17] <autrijus> can someone find a reference?

[13:18] <jabbot> pugs - 2357 - * `last if foo` is now parsed always as 

[13:18] <jabbot> pugs - 2358 - * much better error messages overall.

[13:18] <jabbot> pugs - 2359 - * remove mention of DynamicLoader

[13:18] <Limbic_Region> autrijus - the alternative would be while ( $ref() -> @foo ) { ... } right

[13:19] <autrijus> huh?

[13:19] <autrijus> no

[13:19] <Limbic_Region> like a for loop?

[13:19] <autrijus> my $foo; while $foo = blah() { ... }

[13:19] <autrijus> or

[13:19] <autrijus> while my $foo = blah() { ... };

[13:20] <Limbic_Region> so things like while ( my $line = <FH> ) { ... } # won't work anymore either?

[13:20] <autrijus> but never

[13:20] <autrijus> while (my $foo = blah()) { ... };

[13:20] <autrijus> er nvm

[13:20] <autrijus> () is not {}

[13:20] <autrijus> so it does work

[13:20] <autrijus> but it doesn't work like you think it does

[13:20] <Limbic_Region> doesn't

[13:20] <autrijus> because the my() scope extends to outward

[13:20] <Limbic_Region> ok - so educate me

[13:20] <autrijus> sub bar { while (my $foo) {...} ; say $foo }

[13:20] <machack666> @array.end == -1 seems like bad behavior to me, or at least unexpected behavior

[13:20] <autrijus> is legal!

[13:21] <autrijus> machack666: 

[13:21] <autrijus> $ perl -e 'die $#array'

[13:21] <autrijus> -1 at -e line 1.

[13:21] <machack666> perhaps it should return undef

[13:21] <Limbic_Region> machack666 - p5 behavior

[13:21] <machack666> never used @#array

[13:21] <machack666> :)

[13:21] <autrijus> Limbic_Region: the point is there's no implicit blocks

[13:21] <castaway> autrijus: can I bug you about some of your p5 modules? :)

[13:21] <autrijus> so the my() always terminates to the next }

[13:21] <machack666> I fuess if there's a precident

[13:21] <autrijus> castaway: sure

[13:21] <autrijus> Limbic_Region: as such, talking about my() in while () conditions is likely to be not very precise

[13:22] <Limbic_Region> autrijus - I am fine with learning new syntax

[13:22] <autrijus> see p6bible s04

[13:22] <autrijus> grep for "while my"

[13:22] <Limbic_Region> ok

[13:22] <Limbic_Region> will do

[13:22] <castaway> The first is Module::ScanDeps.. which is supposed to not list Core modules per default, yes? I'm using 5.6.1 and its listing Storable, and MIME::QuotedPrint .. 

[13:22] <castaway> .. on HP-UX11 .. any idea why?

[13:23] <Juerd> p6l++, especially luqui++

[13:23] <Juerd> # clear and useful answers

[13:23] <castaway> It's also listing XML::Parser which I'm fairly cerain I'm not using (but am using XML::Simple and XML::SAX)

[13:23] <machack666> perl -e '$ar[$#ar]=1;print @ar'

[13:23] <machack666> Modification of non-creatable array value attempted, subscript -1 at -e line 1.

[13:23] <autrijus> castaway: 

[13:23] <autrijus> Storable  was first released with perl 5.007003

[13:24] <autrijus> MIME::QuotedPrint  was first released with perl 5.007003

[13:24] <autrijus> so.

[13:24] <broquaint> IIRC, while my $foo = bar() { ... } still works as expected since while will be a funky statement/macro dealie so that $foo is scoped to the block.

[13:24] <autrijus> broquaint: s04 contradicts with you :)

[13:24] * castaway goes back to check

[13:24] <broquaint> Damn synopses ;)

[13:24] <autrijus> (The "while"’s declaration of $line con‐ tinues to be visible past the end of the block.  Remember, no implicit block scopes.)

[13:25] <castaway> well I suppose that explains that bit, I'm just daft..

[13:25] <Limbic_Region> so the bottom line is that it requires additional typing

[13:25] <castaway> any idea about the XML::Parser one?

[13:27] * broquaint hopes placeholders will replace loop variables in terms of programming practices

[13:27] <autrijus> I think it does recursive dep

[13:27] <autrijus> and XML::Simple depend on ::Parser

[13:27] <Limbic_Region> autrijus - know a reference off the top of your head that says no implicit block scopes?  I am ashamed to admit that other than an initial read on release, I am not overly familiar with the As/Es/Ss

[13:27] <autrijus> Limbic_Region: install Perl6::Bible

[13:27] <autrijus> and "p6bible s04"

[13:28] <autrijus> read "The Relationship of Blocks and Declarations

[13:28] <castaway> no, it doesnt depend on it

[13:28] <castaway> It likes XML::Parser if present, if not, then not

[13:28] <castaway> (and I'm using XML::SAX as the parser)

[13:28] <castaway> or do: http://tnx.nl/S04

[13:28] <Limbic_Region> autrijus - thanks - I just needed to search for implicit in s04

[13:29] <autrijus> oh. scandeps has no notion of optional dependency.

[13:29] <castaway> hmm, damn

[13:29] <castaway> so attempting to 'par' that up would fail ?

[13:29] <autrijus> hm?

[13:30] <autrijus> if your system has no XML::Parser, par will just ignore that

[13:30] <castaway> par uses ScanDeps to figure out what to pack, no?

[13:30] <autrijus> and hope you know what you're doing

[13:30] <castaway> well it does, but I dont want it :)

[13:30] <autrijus> oh.

[13:30] <Limbic_Region> autrijus - so there should be a way to declare formal parameters and achieve the same thing as my right?

[13:30] <Limbic_Region> while $ref() -> @foo { ... }

[13:30] <castaway> I'm attempting to figure out what a customer machine would need, and the fact that our internal dev machine has XML::Parser in its site_perl is irrevelant

[13:31] <castaway> In theory I'd like to say 'use perls std path but my site_perl only'

[13:31] <machack666> Is "closure traits" the terminology for ENTER {...}, PRE {...}, POST {...}, etc?

[13:31] <castaway> anyway, since my other problem is that PAR is failing to compile, thats partly irrelevant too :)

[13:31] <theorbtwo> autrijus: Are you interested in an alternative to ScanDeps that does live dependencies?

[13:32] <theorbtwo> It's fairly easy to write using coderefs in @INC.

[13:32] <machack666> me: yes

[13:32] <Juerd> Limbic_Region: Interesting syntax

[13:32] <Limbic_Region> or rather while = $ref() -> @foo { ... }

[13:32] <Juerd> Huh?

[13:32] <Limbic_Region> Juerd - looking at S4

[13:32] <Juerd> I could follow the previous syntax - it puts the condition into @foo

[13:32] <Juerd> But this?

[13:32] <Limbic_Region> the closest example of what I want is

[13:33] <machack666> What is the support status of the various closure traits?

[13:33] <Limbic_Region> while =$*IN -> $line {...}

[13:33] <Juerd> Limbic_Region: $ref() now returns an iterator?

[13:33] <Juerd> Limbic_Region: And isn't it rather weird to have a sub return the same iterator more than once?!

[13:33] <Limbic_Region> Juerd - no, it returns a list

[13:33] <autrijus> theorbtwo: 

[13:33] <autrijus> scandeps has that mode.

[13:33] <Juerd> Limbic_Region: while's condition is executed before each iteration

[13:33] <autrijus> scandeps -c 

[13:33] <autrijus> scandeps -x

[13:34] <autrijus> using perl -c and perl, respectively

[13:34] <Limbic_Region> right 

[13:34] <theorbtwo> Oh.

[13:34] <Juerd> Limbic_Region: So it returns a new list each time, which each time is converted to an iterator, which you kick only once.

[13:34] <Limbic_Region> Juerd - see http://www.perlmonks.org/index.pl?node_id=451398 

[13:34] <Limbic_Region> I am trying to get my cake and eat it to (like I did in p5)

[13:34] <Limbic_Region> while ( my @foo = $ref->() ) { ... }

[13:35] * Juerd never gets the cake references

[13:35] <machack666> machack666: no support for BEGIN {...}, so I'd guess that none are supported.

[13:35] <Juerd> Limbic_Region: That should work,

[13:35] <Limbic_Region> not according to autrijus and possible S4

[13:35] <Juerd> Limbic_Region: I think your mistake is calling your iterator "next". That's misleading.

[13:35] <Limbic_Region> no implicit block scopes

[13:35] <Juerd> Or assuming that iterators are coderefs

[13:35] <autrijus> Limbic_Region: it works

[13:36] <Limbic_Region> as of when?

[13:36] <autrijus> I'm just saying that the @foo will be visible post the {...}

[13:36] <autrijus> which is likely bad

[13:36] <Limbic_Region> didn't work last night when I was trying it

[13:36] <autrijus> i.e. not what you expect

[13:36] <Limbic_Region> no autrijus - it didn't work at all

[13:36] <autrijus> er. I was donning my p6l hat.

[13:36] * autrijus switches to the p6c hat

[13:37] <autrijus> it's not yet implemented, but if you write a test, sure, it will work in a matter of minutes!

[13:37] <castaway> -c and -x seem to compile&inspect %INC .. AND do static scanning.. which is not v. useful IMO

[13:37] <autrijus> castaway: patches.... welcome :)

[13:37] <Limbic_Region> well what I am really interested in is figuring out how to do it properly in p6

[13:37] <castaway> autrijus: no time :)

[13:37] * castaway points at theorbtwo 

[13:37] <autrijus> (it fits my use case)

[13:38] <Limbic_Region> basically, loop until the function being called each time returns undef

[13:38] <autrijus> if you are using PAR

[13:38] <autrijus> try

[13:38] <autrijus> pp --exclude XML::Parser

[13:38] <autrijus> and see if that works

[13:38] <autrijus> it may or may not.

[13:38] <castaway> autrijus: that was the pther problem: par wont compile for me, I get ld errors

[13:38] <Limbic_Region> put the result of that function in a formal parameter or whatever so that I can use it inside the loop

[13:38] <autrijus> I think it does, but that part of my code

[13:38] <autrijus> castaway: really. platform?

[13:38] <castaway> HP-UX11

[13:39] <autrijus> that's a new one.

[13:39] <autrijus> try [email@hidden.address]
[13:39] <castaway> I have a sneaking feeling its a wrong ld tho, it chokes on options that perl -V claims to have used.

[13:39] <castaway> but the fun bit is the:

[13:39] <Limbic_Region> do you have to be subscribed to p6.l to post to it?

[13:40] <castaway> ld: Unsatisfied symbols:

[13:40] <castaway>    $global$ (data)

[13:40] <castaway> mm, could do that.. 

[13:42] <Juerd> Limbic_Region: Nafaik

[13:42] <Juerd> Limbic_Region: It's common for Perl lists that you can post to them and read them without being subscribed

[13:42] <autrijus> but then you will wait for moderation

[13:42] <xerox> 

[13:42] * castaway asks the same question for [email@hidden.address] (subscribe compulsory?)

[13:43] <Juerd> 	

[13:43] <autrijus> castaway: no, I don't think so

[13:43] <autrijus> all @perl.org follows the same process

[13:43] <Juerd> autrijus: That's strange, as my messages appear almost instantaneously and I send mail from another address than is subscribed

[13:43] <autrijus> afaict

[13:48] <Limbic_Region> ok - email sent to p6.l

[13:49] <Limbic_Region> I am off for a bit, will write some more tests later - thanks everyone

[13:51] * castaway sends a mail full of make output and perl -V to [email@hidden.address] ..

[13:51] <Limbic_Region> oh - before I go, if someone wants to ping me with the location of any existing tests for "last", I will supplement them with the changes autrijus made to make last if defined @array[ $index ]; work

[13:52] * castaway goes back to doing things my hand (darn HP-UX)

[13:54] * autrijus purrs

[13:54] <autrijus> I hear HP-UX is even deader than AIX

[13:55] <castaway> heh, everyone says that whenever I mention it

[13:55] <castaway> still, customers are still picking it

[13:58] <castaway> So this is an odd form of "dead"

[13:58] <autrijus> undead then

[13:59] <autrijus> the undead OS that roams the earth

[13:59] <castaway> Personally, from this perspective, it looks alive and kicking.

[13:59] <theorbtwo> That's one awful big zombie process, autrijus.

[14:00] <autrijus> :D

[14:00] <Arathorn> i thought irix was the undead OS that roams the earth..

[14:01] <stevan> Limbic_Region: ping

[14:01] <stevan> morning all :)

[14:01] <Limbic_Region> pong

[14:01] <stevan> Limbic_Region: there was some next and last tests in t/data_types/array.t

[14:02] <stevan> but I removed them last night because they were a little odd

[14:02] <stevan> I was thinking of doing some of that today

[14:02] <stevan> but you can if you like :)

[14:02] <Limbic_Region> no - go for it

[14:02] <Limbic_Region> I will supplement if you miss the ones I am thinking of

[14:03] <stevan> Limbic_Region: oh wait,.. sorry it was in t/statements/for.t

[14:03] <stevan> Limbic_Region: if you want to paste your thoughts, that might help me get started :)

[14:03] <Limbic_Region> well - last shouldn't be tied to a specific control block

[14:03] <Limbic_Region> two thoughts

[14:04] <Limbic_Region> last if <condition>;

[14:04] <Limbic_Region> <condition> and last;

[14:04] <Limbic_Region> last <label>;

[14:04] <stevan> (i figured once I got for.t done, i would do while.t, loop.t etc

[14:04] <Limbic_Region> i.e. variations of last where it isn't the only statement on the line

[14:04] <Limbic_Region> and then last from a sub

[14:05] <stevan> from a sub?

[14:05] <Limbic_Region> in p5 it will let you do it but issue warnings - not sure what the p6 behavior should be

[14:05] <Limbic_Region> right - it is a mistake and probably shouldn't be supported

[14:05] <Limbic_Region> but WTF am I to make that call

[14:05] <stevan> I think last, next, redo are only allowed in loops, but I will check the syns

[14:05] <stevan> if ever you are in doubt, read your bible (perl6::bible that is)

[14:05] <Limbic_Region> ok - so I am off again, I will look at anything you come up with and supplement if needed

[14:06] * autrijus joins the bible thumping

[14:06] <stevan> Praise @larry!!!

[14:06] <stevan> can I get a witness!!!!

[14:06] <autrijus> Hosanna!!

[14:06] <autrijus> hmm

[14:06] <autrijus> BEGIN{} is only allowed as rhs?

[14:07] <autrijus> $ perl -e 'BEGIN { $_ } = 3'

[14:07] <autrijus> syntax error at -e line 1, near "} ="

[14:07] * Limbic_Region doubts his email is going to make it to p6.l without being subscribed as it is probably being held for approval or was filtered as spam (that happens a lot from his yahoo account)

[14:07] <stevan> autrijus: thats just weird code IMHO

[14:07] <theorbtwo> Limbic_Region: I talked to Ask about this once -- the first time you post from any given address, if it is not subscribed, it will be human-filtered, but then it goes on a domain-wide whitelist.

[14:08] <autrijus> yes.

[14:08] <theorbtwo> autrijus, what would the semantics of BEGIN as a LHS be?

[14:08] <autrijus> theorbtwo: I don't know.

[14:08] <autrijus> so I'm coding it as rhs only

[14:08] <autrijus> we need BEGIN to properly support a number of things

[14:08] <autrijus> say foo(); sub foo { 3 }

[14:08] <autrijus> being one

[14:08] <autrijus> although personally I don't use that often

[14:25] <Arathorn> probably a silly question, but: has anyone thought about accessing the Apache API through pugs?

[14:25] <Arathorn> i.e. mod_pugs, i guess

[14:26] <jhorwitz> arathorn: mod_parrot will handle it for you once the parrot compiler backend is complete

[14:27] <stevan> there is also mod_haskell IIRC

[14:27] <Arathorn> that makes sense, i guess

[14:27] <stevan> do we have labeled blocks in perl6? I cant seem to find them in the Synopsis

[14:27] <Arathorn> would be slightly surreal to have to compile your perl down to bytecode before it runs

[14:28] <jhorwitz> arathorn: mod_parrot won't require you to do that

[14:28] <Arathorn> it'll automatically compile up the bytecode on demand, a la a servlet container?

[14:29] <jhorwitz> assuming there's a registered compiler for the language.  i imagine there will not be one for pugs to begin with, but certainly for perl6.

[14:30] <Arathorn> sexy, then :)

[14:30] <jhorwitz> fyi, http://losser.st-lab.cs.uu.nl/mod_haskell -- looks like it's been collecting dust for a few years.

[14:32] * Arathorn browses view-cvs for mod_parrot

[14:33] <jhorwitz> arathorn: make sure you're looking at the right one -- http://www.smashing.org/mod_parrot

[14:33] <jhorwitz> ask's old version can sometimes pop up on google

[14:34] * Arathorn is flicking through http://svn.perl.org/viewcvs/parrot-modules/mod_parrot/trunk/

[14:34] <Arathorn> which looks like your handiwork :)

[14:34] <jhorwitz> ya  :)

[14:34] <Arathorn> (at least judging by the Author column)

[14:35] <Arathorn> have you thought much about how parrot would work with the threading fun & games for the more exotic Apache 2 models?

[14:35] <Arathorn> (apologies if this is more #parrot related)

[14:37] <jhorwitz> parrot's model is one interpreter per thread, which is fairly straightforward to deal with.

[14:39] <jhorwitz> so like mod_perl, we pick from a pool of available parrot interpreters

[14:39] * Arathorn nods

[14:39] <autrijus> woot!

[14:39] <Arathorn> would those parrot interpreters share any bytecode memory footprint?

[14:39] <autrijus> jhorwitz: so, all syms has to be explicitly shared via pmcs

[14:39] <autrijus> which is a good thing

[14:40] <autrijus> bwahaha

[14:40] <autrijus> I implemented BEGIN{} in no time

[14:40] <autrijus> out-of-sequence sub{} coming right along

[14:40] <autrijus> "BEGIN" -> do

[14:40] <autrijus>     env <- getState

[14:40] <autrijus>     return . Val . unsafePerformIO $ do

[14:40] <autrijus>         (`runReaderT` env) $ (`runContT` return) $ resetT $ do

[14:40] <autrijus>             evl <- asks envEval

[14:40] <autrijus>             evl (Syn "()" [Val code, Syn "invs" [], Syn "args" []])

[14:40] * autrijus praises unsafePerformIO

[14:42] * jhorwitz has a memory lapse and tracks down answers for autrijus

[14:43] * Arathorn reads up on how mod_perl2 works before trying to understand mod_parrot :)

[14:46] <Arathorn> ah, so only mutable data is duplicated between the parent & clone interpreters in mod_perl2

[14:46] <Arathorn> very cool

[14:47] <autrijus> it's also very slow on win32 ;)

[14:47] <Arathorn> because perl_clone() doesn't work properly?

[14:48] <Arathorn> i guess that screws up lazy-evalling tricks like the ones TT3 uses (iirc), too

[14:48] <autrijus> stas has proposed a CLONE2 method

[14:48] <jhorwitz> autrijus: yes, PMCs must be explicitly shared.  can't find a definitive answer on bytecode.  need to read more about interpreter cloning.

[14:48] <autrijus> old pugs:

[14:48] <autrijus> $ pugs -e 'say foo(); sub foo { 3 }'

[14:48] <autrijus> No compatible subroutine found: &foo

[14:48] <autrijus> App "&foo" [] []

[14:48] <autrijus> as of 10 seconds ago:

[14:48] <autrijus> $ ./pugs -e 'say foo(); sub foo { 3 }'

[14:48] <autrijus> 3

[14:49] <theorbtwo> Woo!

[14:50] <autrijus> turns out we don't need the costly refactor of Rule into Eval monad ;)

[14:51] <autrijus> because you can freely enter that monad by saying something like

[14:51] <autrijus> unsafePerformIO . runContT . runReaderT

[14:51] <autrijus> or some other order

[14:53] <Arathorn> hm, 15,632 unread mail in Lists.mod_perl - i've been away too long :\

[14:55] <petdance> Can I come in here?  I don't know Haskell.

[14:55] <theorbtwo> Certianly, petdance.

[14:56] <theorbtwo> ...and we can work on fixing that oversight.

[14:56] <jhorwitz> petdance: join the club. ;-)

[14:56] <autrijus> greetings petdance!

[14:56] <autrijus> if you don't know haskell

[14:56] <autrijus> you need to know unit testing!

[14:57] <autrijus> I don't think we need to fix _that_ for you :)

[14:57] <petdance> I'm REALLY interested in Parrot's internals. 

[14:57] <petdance> the C code behind it.

[14:57] <autrijus> oh. irc.perl.org has a #parrot

[14:57] <autrijus> featuring Leo occasionally

[14:57] <autrijus> who is more qualified than anyone here to talk about parrot internals :)

[14:58] <petdance> I just wnana make sure the C code is happy and consted.

[14:58] <petdance> like I've been doing with the p5 guts.

[14:58] <jabbot> pugs - 2360 - * BEGIN blocks now works!

[14:58] <petdance> and, really, autrijus++ Bravo for all the JFDI you've managed to corral.

[14:59] <autrijus> =)

[15:00] <autrijus> consted?

[15:00] <q[acme]> petdance: i haven't really been following, but is this so that the C compiler can pick up bugs?

[15:04] * Steve_p pets petdance

[15:04] <stevan> Steve_p: did I see you were going to take on Test::Tutorial??

[15:06] <stevan> morning petdance :)

[15:06] <Steve_p> stevan, yes, I be starting to revise it shortly.  First pass is to get what's there working.

[15:06] <stevan> Steve_p: you are a brave soul :) 

[15:07] <autrijus> $ pugscc --parrot -e 'BEGIN { say "Compiling!" }; say "Running!"'

[15:07] <autrijus> *** Using the 'Parrot' backend.

[15:07] <autrijus> Compiling!

[15:07] <autrijus> *** Generated output: a.imc

[15:07] <autrijus> $ ./a.imc

[15:07] <autrijus> Running!

[15:07] <stevan> weird, but very cool :)

[15:08] <autrijus> :)

[15:08] <autrijus> so, BEGIN{} is now freely usable

[15:08] <autrijus> I'll implement "use" now.

[15:08] <stevan> autrijus: maybe you know this, do we have labels in perl6? I cant find it in the synopsis?

[15:08] <autrijus> stevan: no idea

[15:09] <stevan> I will keep searching then, and if all else fails go to p6l

[15:09] <broquaint> Do we know if use/require behave like their p5 counterparts and interpret magic in @INC?

[15:09] <autrijus> k.

[15:09] <autrijus> broquaint: I don't know.

[15:10] <broquaint> I think it's to be defined in a future Apoclaypse ...

[15:10] <broquaint> Yah, looks like it.

[15:11] <Steve_p> stevan, I love the footnote "The first number doesn't really mean anything, but it has to be 1. It's the second number that's important."

[15:11] * jhorwitz wants subs for the parrot backend, but haskell IQ is too low.  :(

[15:13] <stevan> Steve_p: :)

[15:14] <stevan> Steve_p: all due respect to the Schwern, but that tutorial just confused me the first time I read it

[15:15] <stevan> Steve_p: IMHO it should just start with Test::More and leave historical Test.pm and Test::Simple as footnotes

[15:15] <stevan> hey boogie 

[15:15] <gaal_> hey all

[15:15] <boogie> hi stevan. :)

[15:15] <stevan> hey gaal_ 

[15:16] <gaal_> stevan, hola.

[15:16] <stevan> boogie: with all the pugs speedups in the past few days, your CGI will likely work much smoother

[15:16] <boogie> stevan: yes, I'm checking it now. :)

[15:16] <autrijus> gah

[15:16] <autrijus> *Main> eval "my $x; BEGIN { say $x }"

[15:16] <autrijus> this breaks

[15:16] * gaal_ smokes a pug

[15:16] <autrijus> so I broke everything :-/

[15:17] <autrijus> gaal_: it will be 100% fail

[15:17] <autrijus> no need to

[15:17] * gaal_ puts out the smoke

[15:17] * autrijus rethinks the strategy

[15:17] * autrijus concludes there's no way around that bug except to do everything correctly

[15:17] <autrijus> i.e. properly implement the pads for parser

[15:18] <boogie> stevan: do you know something about why CGI/examples/test.p6 fails? it seems to me, that after sending the form, it's going to an endless loop

[15:18] <boogie> stevan: it's the same with the memory game, too.

[15:18] <jabbot> pugs - 2361 - * separate lhs from rhs closure traits

[15:18] <broquaint> Don't think like that, autrijus, there's a hack for *everything* ;)

[15:18] <stevan> boogie: to be honest, I haven't looked at CGI in a little while

[15:18] <petdance> q[acme]: Yes, so the C compiler knows "That pointer's contents are not modified"

[15:19] <boogie> stevan: then I'm going to debug it. ;)

[15:19] <petdance> For instance, if you have   int strlen( char *str )

[15:19] <petdance> then the C compiler doesn't know that the contents of str don't get modified.

[15:19] <petdance> So char *p = NULL; strlen( p ); looks to C like you could be initiliazing it

[15:19] <petdance> OTOH, if it's int strlen( const char *p );

[15:20] <Steve_p> stevan, I don't want to get too complex and skip Test::Simple.  To be honest, people get confused with Test::More.  Unless you are an alpha geek, I don't want to push them.

[15:20] <petdance> then char *p; strlen( p ); is obviously a problem.

[15:20] <petdance> How do people get confused w/test::more?

[15:20] <stevan> Steve_p: I wonder if you introduce it right, it might not be an issue

[15:20] <Steve_p> For example, I explained to a guy yesterday how to install modules by hand.  He's been programming with Perl for three+ years

[15:21] <stevan> Steve_p: how has he been doing it? CPAN?

[15:21] <Steve_p> Oh, I'll introduce along the lines of "See how all your ok()'s work fine with Test::Simple.  OK, just change that to Test::More now :)"

[15:22] <Steve_p> ...and then explain what more they can do with Test::More

[15:22] <Steve_p> stevan, only with CPAN.  

[15:22] <stevan> Steve_p: I wonder if that is not more confusing though? Because you have to do backflips with Test::Simple::ok to tests anything complex

[15:23] * stevan queues turns up "Dog and Pony Show" so petdance can hear too 

[15:25] * Limbic_Region got impatient and subscribed to p6.l from his seldom used gmail account

[15:28] <petdance> stevan: I have a swell live version of it from last year's ATP.

[15:28] <petdance> I'd like to get rid of the Test::More/Test::Simple distinction.

[15:29] <Steve_p> So just start with Test::More

[15:29] <stevan> thats my vote :)

[15:33] <autrijus> ok. the fix is in

[15:33] <autrijus> r2362

[15:33] <autrijus> any smokers?

[15:33] <autrijus> this has the effect of moving all declarations to compile time

[15:34] <autrijus> $ ./pugs -e 'use Test; ok 1'

[15:34] <autrijus> ok 1

[15:34] <autrijus> 1..1

[15:34] <autrijus> it works now

[15:35] <autrijus> if that is verified as working

[15:35] <autrijus> please someone do a global s/require Test/use Test/

[15:35] <autrijus> thanks!

[15:37] <autrijus> $ ./pugs -e 'ok(1); require Test'

[15:37] <autrijus> *** Error: No compatible subroutine found: &ok at -e at line 1, column 1

[15:37] <autrijus> $ ./pugs -e 'ok(1); use Test'

[15:37] <autrijus> ok 1

[15:37] <autrijus> 1..1

[15:38] <jabbot> pugs - 2362 - * repair pad declarations... that makes 

[15:38] <jabbot> pugs - 2363 - * use() now happens at BEGIN time.

[15:39] <stevan> autrijus: I will take care of the require Test -> use Test

[15:39] <stevan> autrijus: will use work in an eval? In other words can I implement a proper use_ok()?

[15:40] <autrijus> yes, and yes

[15:40] <autrijus> lol

[15:40] <autrijus> $ perl -e 'eval "use Test"; ok(1)'

[15:41] <autrijus> ok: plan before you test! at -e line 1

[15:41] <autrijus> I stared at it for a few seconds

[15:41] <autrijus> unable to make any sense

[15:41] <autrijus> then I rememberd:

[15:41] <autrijus> $ pugs -e 'eval "use Test"; ok(1)'

[15:41] <autrijus> ok 1

[15:41] <autrijus> 1..1

[15:41] <stevan> :)

[15:41] <autrijus> it's scary how the availability of the "use" statement suddenly makes pugs much more perllike in my mind.

[15:42] <Juerd> grin

[15:42] <Juerd> Does it have "no" yet?

[15:42] <gaal_> preluding Test would speed up the smoke somewhat

[15:43] <gaal_> r2363 smoke in progress

[15:43] <autrijus> gaal_: actually, no, we need compilation

[15:43] <autrijus> storing a Test.imc alongside Test.pm

[15:43] <gaal_> for test rteliability?

[15:43] <autrijus> gaal_: no, "pre" compilation :)

[15:43] <gaal_> am i gaal_?

[15:43] <autrijus> or even a Test.pbc

[15:43] *** gaal_ is now known as gaal

[15:44] <gaal> great, now there are two of me.

[15:44] * theorbtwo wonders if require should really import "is export" subs.

[15:45] <autrijus> theorbtwo: currently "is export" is ignore 

[15:45] <autrijus> as we don't have namespaces yet ;)

[15:45] * boogie says: I've found a strange bug in Pugs...

[15:45] <autrijus> i.e. it's merely future proofing

[15:45] <gaal> heh :)

[15:45] <boogie> it will run forever with the latest SVN version:

[15:45] <gaal> autrijus, any thought on hackarounding runInteractiveCommand's usage of an opaque process handle?

[15:45] <boogie> sub test2 ($param) { return $param; }

[15:46] <autrijus> gaal: huh?

[15:46] <boogie> sub test1 { my ($key); $key = test2($key); }

[15:46] <boogie> test1;

[15:46] <gaal> i want open-pipe to give a pid

[15:46] <gaal> but runInteractiveCommand returns the tuple (stdin, stdout, stderr, prochande)

[15:46] <gaal> where the last element is not a pid :)

[15:46] <autrijus> boogie: verified. take away the return() and you're fine

[15:47] <autrijus> why do you want a pid

[15:47] <gaal> p5 open| returns one

[15:47] <boogie> autrijus: is it a bug?

[15:47] <autrijus> boogie: yes

[15:47] <autrijus> gaal: I say we return an opaque object.

[15:47] <autrijus> called a Process or something

[15:48] <autrijus> that supports .kill

[15:48] <gaal> i'm not sure the haskell Process handle supports kill - unless i'm mistaken that's only available in System.Posix..Process

[15:48] <gaal> and runInteractiveCommand(/Process) is in System.Process

[15:49] <gaal> and there's no way to extract a pid - no way that i foudn in the docs at least

[15:49] <gaal> didn't dive into the soureces yet.

[15:50] <gaal> anyway, int he unix world it makes perfect sense to have a pid

[15:50] <gaal> even if it's not as encapsulated as a handle, that's what everything *is* eventually

[15:50] <autrijus> hm you can terminateProcess

[15:51] <gaal> and i can imagine some applications actually needing it

[15:51] <autrijus> yeah.

[15:51] <gaal> what abotu arbitrary signalProcess? you can't do that.

[15:51] <gaal> it's true that on win32 you want a process handle which isn't a pid...

[15:52] <autrijus> yeah.

[15:52] <autrijus> cross platformness is a pain :-/

[15:52] <gaal> perhaps we should indeed return an opaque handle, and add deep ugly methods that meddle with the haskell internals on each platform.

[15:52] <gaal> ....to return a pid when you want one

[15:52] <gaal> etc.

[15:52] <autrijus> *nod*

[15:53] <autrijus> at the worst case

[15:53] <autrijus> you can write the neccessary C code by hand

[15:53] <autrijus> to emulate platform specific behaviour

[15:53] <autrijus> and inline them via FFI

[15:53] <autrijus> that's how pugs swapped out its entire Char class

[15:53] <autrijus> via Unicode.hs

[15:54] <gaal> for the whole thing (eg replace runInteractiveCommand), or just the pid accessors?

[15:54] <autrijus> the pid accessors

[15:54] <autrijus> and before you know, your code will be in GHC core :)

[15:54] <gaal> :)

[15:54] <autrijus> (like Unicode.hs now is)

[15:54] <gaal> pugs.exe: examples/fp/fp.p6: openFile: does not exist (No such file or directory)

[15:55] <autrijus> fixed

[15:55] <gaal> smoke up in a minute

[15:55] <autrijus> hopefully not too red

[15:55] * autrijus braces for impact

[15:56] <gaal> anyone have any luck compiling  p5.8 on msys btw? it's really sad having 5.6.1 w/o cpan :(

[15:57] <gaal> http://forum2.org/gaal/pugs/smoke-msys.html

[15:57] <gaal> my network setup has begun sucking, so i can't actually view that myself :)

[15:57] <autrijus> 10 unexpected successes!

[15:58] <gaal> ah, a firefox restart helped.

[15:58] <autrijus> must be doing something correct

[15:58] <autrijus> help me untodo?

[15:58] <autrijus> I'll investigate the red

[15:58] <jabbot> pugs - 2364 - * fix example path

[15:58] <gaal> what color is unex success? :)

[15:58] <gaal> nm, i'll peek in the yaml

[15:58] <autrijus> yellow

[15:59] <gaal> k, i'll do that, sed.

[15:59] <gaal> s/d/c/

[16:04] <gaal> funny, in undef.t, when using prove, the two yellow tests fail.

[16:04] <stevan> gaal: did you make install? it might be using an old version?

[16:04] <autrijus> yup

[16:04] <gaal> i never made install :)

[16:06] <gaal> oh! but it is some funny path issue, because from a different shell it works as expected.

[16:06] <stevan> a fresh 'make optmized' pugs makes me sooo happy :)

[16:08] <stevan> the require -> use change seems to be working fine, so I will be commiting it once this test run is done

[16:08] <stevan> then i /have/ to do some perl5 work :(

[16:08] <gaal> t/syntax/lf_in_list.t in particular is happy :)

[16:13] <gaal> r2365 += 10 passing tests

[16:14] *** integral changes topic to: pugscode.org <Overview Journal Logs> | smoke/win2k (occasional): http://xrl.us/fqum (4537/8, r2343), Mac OS X (62/4506, r2362), Linux (60/4482, 2267) | pugs.kwiki.org

[16:15] <Arathorn> are thoughts on threading in pugs completely on hold under @larry pitches up with some stone tablets on the subject for parrot?

[16:15] <autrijus> well we have async {}

[16:15] * Arathorn is trying to imagine how much data would get shared (if at all) between threaded parrot VMs in a mod_parrot + Apache2 Worker MPM situation

[16:15] <autrijus> if you want a set of semantics

[16:16] <autrijus> please write up a synopsis draft

[16:16] <autrijus> check in under docs

[16:16] <gantrixx> is there a problem with the ghc yum repository?

[16:16] <gantrixx> it seems to lock up on me when I try to install

[16:16] * Arathorn will go check out async {} then :)

[16:16] <Arathorn> thanks

[16:16] <autrijus> ch.17

[16:16] <autrijus> # http://svn.perl.org/perl6/doc/trunk/plans/design_docs.pod

[16:16] <autrijus> if you want to work on S17 :)

[16:16] * Arathorn nods.

[16:16] <autrijus> Arathorn: we are using 5005 model now

[16:16] <autrijus> that will change.

[16:17] <Arathorn> oh, okay

[16:18] <jabbot> pugs - 2365 - unTODO unexpectedly passing tests

[16:21] <autrijus> lexical context is now restored!

[16:21] <autrijus> we may finally have some semblance of context

[16:21] <autrijus> r2366. resmoke?

[16:21] <gaal> on it

[16:21] <autrijus> danke

[16:23] <stevan> r2367 - require Test -> use Test

[16:25] <stevan> autrijus: I just encountered a very odd bug

[16:26] <stevan> pugs -e 'my $x = 0; say "before $x"; for 1 .. 5 { next if $_ > 3; $x = $_; } say "after $x";'

[16:26] <stevan> dies with Error: cannot next() outside a loop

[16:27] <autrijus> next() is utterly broken.

[16:27] <autrijus> we don't have that yet.

[16:27] <autrijus> neither redo().

[16:27] <autrijus> both are TODO

[16:27] <stevan> ok

[16:27] <stevan> well the odd things is it worked when I evaled it

[16:28] <stevan> (I am trying to get a command line test to work)

[16:28] <jabbot> pugs - 2366 - * restore lexical context.

[16:28] <jabbot> pugs - 2367 - changing all occurences of require Test 

[16:28] <stevan> perlbot nopaste

[16:28] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[16:29] <gaal> autrijus, i want to return four values from a prim. it's an internals-use-only prim, so i'm okay doing it positional, at least for now. my question is just, how do i return a perl-boxed version of a haskell ProcessHandle?

[16:29] <gaal> sorry, you didn't need the whole introduction to that Q :)

[16:29] <pasteling> Someone at 67.186.136.119 pasted "This fails: stevan% pugs -e 'm" (24 lines, 551B) at http://sial.org/pbot/9671

[16:30] <stevan> that paste is mine :)

[16:31] <autrijus> gaal: look at AST.hs

[16:31] <autrijus> see VSocked

[16:31] <autrijus> VSocket 

[16:31] <xerox> ve

[16:31] <autrijus> and VThread

[16:31] <gaal> ....of course, we can keep a global map inside pugs and onlty return a key :)

[16:31] <xerox> Whoops, sorry.

[16:31] <autrijus> then cargo cult

[16:31] <gaal> most of my haskell is cargo cult ;)

[16:32] <autrijus> stevan: error did not propagate up for.

[16:32] <autrijus> I mean, `for`.

[16:32] <autrijus> ./pugs -e 'for 0..10 { 1/$_ }'

[16:33] <stevan> strange :/

[16:33] <autrijus> no, it's just a bug :/

[16:33] <autrijus> let me add a trapVal

[16:33] <stevan> ok

[16:35] <gaal> http://forum2.org/gaal/pugs/smoke-msys.html r2367

[16:36] <gaal> ooh, 1 more unexok!

[16:37] <autrijus> and a lot more successes

[16:38] <autrijus> stevan: oh, no that is not the prob

[16:39] <autrijus> there is no bug her

[16:39] <autrijus> here

[16:39] <autrijus> stevan: next() was simply not invoked.

[16:39] <autrijus> when $_ is <= 3.

[16:40] <gaal> autrijus, why did you need to implement instance Ord VSocket? where are sockets ordered?

[16:40] <autrijus> stevan: your sweeping 'use' change overwrote some of my fixes.

[16:40] <autrijus> gaal: all Val must be ordered because they can be in an array

[16:40] <autrijus> and we need to sort it.

[16:41] <adehohum> Hi guys, is there an FAQ on how to submit new tests? I'm sure there's going to be something on the NNTP archive somewhere...

[16:41] <autrijus> gaal: this req will go away when we move to opaque obj

[16:41] <autrijus> adehohum: yes, read t/README :)

[16:41] <gaal> autrijus, then how come VThread doesn't do that? a bug?

[16:42] <autrijus> gaal: I think thread already derive ord

[16:42] <gaal> ah

[16:42] <gaal> ok, i think i see.

[16:44] <adehohum> OK, it doesn't say in the 6.2.1 readme, presumably the implication is that I should get the latest out of svn and read a more recent readme...

[16:44] <adehohum> actally it says more or less "ask on #perl6" :)

[16:45] <autrijus> yes :)

[16:45] <adehohum> ok doke will do, thank you!

[16:45] <autrijus> so, you begin by announcing what tests you are doing 

[16:45] <autrijus> then give me your mail addr

[16:45] <autrijus> and I'll make you a committer

[16:45] <autrijus> then you check in the test using svn or svk

[16:45] <autrijus> that's all :)

[16:45] <adehohum> I have had a go at subroutine parameter traits

[16:46] <adehohum> so I've made t/subroutine/sub_parameter_traits.t (original huh)

[16:46] <adehohum> and I'm [email@hidden.address]
[16:47] <stevan> autrijus: so is the error propagating correctlly?

[16:47] <stevan> ah, I see , the error is in $!

[16:48] <stevan> ok I will  re-think my tests after lunch :)

[16:49] <autrijus> stevan: so be sure to svn up

[16:49] <autrijus> I reverted your time travels

[16:49] <autrijus> r2368

[16:50] <stevan> time travels?

[16:50] <stevan> ahh, I see

[16:50] <autrijus> stevan: your sweeping require->use change brought tests to several revisions ago

[16:50] <autrijus> which would be a minor disaster if I don't have svk :)

[16:50] <autrijus> but fortunately I do, so that's all fine

[16:51] <stevan> thats odd, I svn uped right before I did it

[16:51] <autrijus> weird. maybe you somehow touched the files in .svn

[16:51] <stevan> oh, i see

[16:51] <autrijus> adehohum: invitation is on its way to you

[16:51] <stevan> I got r2365 then committed, which landed as r2367

[16:51] <autrijus> welcome aboard!

[16:52] <autrijus> no, that is not it

[16:52] <autrijus> anyway, don't worry 

[16:52] <stevan> odd. ok, I will just rm -rf pugs and svn up to be sure

[16:52] <adehohum> cool, thanks autrijus

[16:54] <gaal> autrijus, heh, ProcessHandle really wants to be opaque: in the ghc implementation, it's ifdeffed as either a CPid or a Word32. in any case, it doesn't... uh, implement Show, so how do I get it to do Ord and even Eq?

[16:55] <gaal> ...without hacking ghc itself of course

[16:56] <autrijus> uh

[16:56] <autrijus> type VProcess = ProcessHandle

[16:56] <autrijus> instance Show VProcess where show _ = "{process}"

[16:57] <autrijus> instance Ord VProcess where compare _ _ = EQ

[16:57] <gaal> a hardcoded string?

[16:57] <autrijus> how else?

[16:57] <gaal> doesn't that make all PHs equal?

[16:57] <autrijus> only for sorting purposes

[16:57] <gaal> hm

[16:57] <autrijus> or you can say

[16:57] <autrijus> compare _ _ = LT

[16:57] <autrijus> or something. improvise

[16:58] * gaal happily improvises. i hope sorting algos terminate though inlight of things that never sort :)

[16:58] <jabbot> pugs - 2368 - * revert Stevan's time travel.

[16:59] <autrijus> sure they do :)

[16:59] <autrijus> (pugs uses mergesorting)

[17:00] <autrijus> yo

[17:00] <Corion> autrijus!

[17:00] <gaal> (wasn't there a segfault in perl once when user-defined comparators didn't satisfy some basic invariant?)

[17:00] * Corion backloggeth

[17:00] <autrijus> Corion: many exciting news!

[17:00] <autrijus> use, BEGIN, last if 1;

[17:00] <Corion> Yay. BEGIN is there!

[17:00] <autrijus> gaal: that was when it's qsort

[17:02] <Corion> BTW, there was a short idea of renaming LWP(::Simple) to something like Network:: or whatever. I'm bad at naming and don't think it's such a good idea, but others might have good ideas

[17:02] <gaal> there's sure to be something better than LWP.

[17:02] * Corion starts a smoketest

[17:02] <gaal> what's bad about Network, anyway?

[17:02] <Corion> gaal: I'm not convinced that Network:: is such a good name, especially for file:// URLs :)

[17:03] <autrijus> file:// is also on the network.

[17:03] <autrijus> I think Net:: is fine too, really

[17:03] <autrijus> Network:: looks... haskellish

[17:03] <Corion> But after I've read URI::URL, I wonder if Pugs shouldn't use file:// instead of File::Spec anyway... The smoke matrix generator still messes up links to synopses somewhere

[17:03] <autrijus> Network:: System:: Control:: Data::

[17:04] <Corion> I find that having Net:: and Network:: as two competing namespaces would be bad

[17:04] <autrijus> nod.

[17:04] <Corion> ... and Network:: just for LWP-stuff is also not good IMO

[17:04] <Corion> ... because there will be other network stuff that does not fit well with LWP

[17:05] <gaal> quick syntax Q: when i say data ... deriving ( ..), it's to *limit* what i derive, right?

[17:05] <metaperl_> Limbic_Region, I just saw your pm post of powersets... good job

[17:05] <wilx> Hmm, iirc if you don't say that you don't derive anything.

[17:06] <wilx> So it imho it is to enumerate what you derive.

[17:07] <autrijus> gaal: no.

[17:07] <autrijus> gaal: there are some derivable classes.

[17:07] <autrijus> if you say deriving(), you automagically gain those instances.

[17:07] <autrijus> but you can add more instances by using the `instance` directirve

[17:08] <autrijus> you also need to add `instance Show Foo` by yourself if you want to customize how Foo is shown

[17:08] <autrijus> `deriving (Show)`  means "somehow generate a Show instance for me"

[17:08] <jabbot> pugs - 2369 - * add a line saying that smoke.html is s

[17:08] <Corion> Aaah. That reminds me - I have to add another test for 1 % $x, where $x is not a VRat, but a VProxy pointing to a VRat. How do I create a VProxy in Pugs?

[17:09] <Arathorn> ajs's mail on p6l in the 'thunking semantics of :=' thread is rather illuminating about p6 threading assumptions

[17:09] <Arathorn> i guess ithreads are here to stay - but much lighter in parrot (at any rate)

[17:11] <PerlJam> anything but pthreads

[17:14] <wilx> What's wrong with POSIX threads? :)

[17:14] <autrijus> Corion: my $x := rat

[17:15] <Limbic_Region> thanks metaperl_ - it is all stevan's fault

[17:15] <metaperl_> one question: is "Ref" mean coderef?

[17:15] <metaperl_> you sub returns Ref

[17:16] <Corion> metaperl_: It returns a reference then, obviously

[17:16] <metaperl_> you know multi subs might've been cleaner than a hash indexed by numbers

[17:16] <Corion> "Code" would be a reference to code. "Ref" would be a reference to a reference.

[17:16] <Corion> ... at least that's what Perl5 does.

[17:19] <Corion> r2369 - http://datenzoo.de/pugs/win2k.html

[17:19] <Corion> ... some new failures, something seems to have broken compilation of some examples.

[17:21] <Corion> Hah. My test code exhibits the bug, just as I suspected :( Where should I put number handling for VProxy objects ? Is there any central point that already handles this? Like op2Num ?

[17:21] <Limbic_Region> metaperl_ - I thought about using multi methods, but the point was to show how easy it was to transition p5 to p6

[17:21] * Limbic_Region is currently only half paying attention btw

[17:22] <Limbic_Region> the returns <type> isn't even necessary btw - just showing off a bit 

[17:22] <gaal> argh, VProcess wants to do Typeable, but how do i get it to do that?

[17:24] * Limbic_Region wanders off to get lunch

[17:24] <autrijus> gaal: just deriving Typeable

[17:25] <gaal> but it's a type, not a data .. er.. constructor

[17:25] <autrijus> you can only derive classes for types.

[17:25] <autrijus> in haskell, types belong to classes

[17:25] <autrijus> not data

[17:26] <gaal> should i do what's done for VRule?

[17:26] <autrijus> yeah.

[17:26] <gaal> k

[17:26] <autrijus> well, you can also do

[17:26] <autrijus> newtyp VProcess = MkProcess ProcessHandle

[17:26] <autrijus> newtype VProcess = MkProcess ProcessHandle

[17:26] <autrijus>     deriving (Show, Typeable)

[17:27] <autrijus> or just derive typeable

[17:27] <gaal> how do i then make it derive Typeable?

[17:27] <gaal> ah ok

[17:27] <autrijus> I think it gets done automagically.

[17:28] <jabbot> pugs - 2370 - * add the "Pad" type to carry lexical pa

[17:28] <jabbot> pugs - 2371 - * repair parrot

[17:28] <jabbot> pugs - 2372 - * to get eval to work, use our() not my(

[17:29] *** metaperl__ is now known as metaperl_

[17:33] <autrijus> Corion: oh, just to say: async.t worksforme

[17:33] <autrijus> Corion: so I made the todo conditional to platform

[17:34] <Corion> autrijus: Ah - I don't know if it worksforme now, but we'll see. I think async.t worksforme too, but async-sleep.t doesn't, which is no surprise.

[17:35] <Corion> (smoke currently running)

[17:38] <jabbot> pugs - 2373 - * repair die.t by giving out sensible $!

[17:38] <jabbot> pugs - 2374 - * async.t worksforme, so assume it's a w

[17:46] <Corion> ah, no - async.t "correctly" fails for me on Win32, as Haskell/GHC does seem to differentiate between userspace and OS threads there.

[17:46] <Corion> r2373 - http://datenzoo.de/pugs/win2k.html

[17:53] <autrijus> Corion: I wonder if you change forkOS to forkIO

[17:53] <autrijus> whether it would work

[17:53] * Corion goes looking

[17:54] <Corion> The code already does: (if rtsSupportsBoundThreads then forkOS else forkIO) -- so that's why it does work for you and doesn't for me ;)

[17:55] <autrijus> right, so try forkIO for all

[17:55] <Corion> autrijus: Just trying that ;)

[17:55] <Corion> Hmmm. Still failing

[17:55] <autrijus> keep it that way then

[17:55] <autrijus> may be a win32 deficiency

[17:55] <autrijus> does system+ithreads on win32 work?

[17:56] <autrijus> in p5

[17:56] <autrijus> I thought it blocks as well

[17:56] <Corion> autrijus: I never tried/looked. Win32 has real threads, so iThreads should/could work. But who knows ...

[17:56] * Corion reverts to rtsSupportsBoundThreads

[17:57] <autrijus> I don't think it'd work... you can try with fork()

[17:57] <autrijus> they are the same thing

[17:57] <autrijus> so on win32, try fork, system() from one, and see if it blocks parent

[17:58] <jabbot> pugs - 2375 - * fix a misuse of $in

[18:00] <gaal> okay, i did some copycatting, but now saying "VProcess phand" to try and convery a ProcessHandle to a VProcess doesn't work:

[18:00] <gaal> Couldn't match `VProcess' against `ProcessHandle'

[18:00] <gaal>       Expected type: VProcess

[18:00] <gaal>       Inferred type: ProcessHandle

[18:01] <autrijus> gaal: VProcess is a newtype?

[18:01] <gaal> how to i actually implement the cast?

[18:01] <gaal> yes

[18:01] <autrijus> you use MkProcess

[18:01] <autrijus> VProcess (MkProcess phand)

[18:02] <gaal> Is that a convention? by analogy, i'm looking for the definition of MkThunk and not finding it.

[18:02] <gaal> unless it's instance Thunk.Class VThunk where force (MkThunk c) = c

[18:03] <autrijus> src/Pugs/AST.hs:newtype VThunk = MkThunk (Eval Val)

[18:04] <autrijus> here MkThunk constructor has typ

[18:04] <autrijus> MkThunk :: Eval Val -> VThunk

[18:08] <autrijus> oh btw.

[18:08] <autrijus> if someone is looking for small Parsec task

[18:08] <autrijus> implementing #line would be fun

[18:08] <jabbot> pugs - 2376 - * make progressive_powerset use some new

[18:08] <autrijus> just parse for #line at Statement level

[18:08] <autrijus> and use setPosition. that's all

[18:09] <pasteling> "gaal" at 192.115.25.249 pasted "wtf suddenly started happening? right after make clean" (6 lines, 322B) at http://sial.org/pbot/9672

[18:10] <autrijus> gaal: no idea. (!)

[18:10] <autrijus> try a clean build?

[18:10] <gaal> i did!

[18:10] <gaal> will clean-mightily the tree.

[18:12] <gaal> oh: i see. 'make' w/o optimized is broken again.

[18:13] <autrijus> you can't mix optimized with unoptimized.

[18:13] <autrijus> but. journal up.

[18:13] <autrijus> I'll sleep now. see ya!

[18:13] <gaal> no, i just did 'make' w/o anything.

[18:13] <gaal> night.

[18:13] <gaal> thanks for the help!

[18:14] <autrijus> &

[18:14] <autrijus> gaal++

[18:14] <theorbtwo> G'night, autrijus.

[18:17] <gaal> src/Pugs/AST.hs:1:0:

[18:17] <gaal>     Data constructor `Pugs.AST.Pad' is defined in the hs-boot file, but not in the module

[18:18] <gaal> am i the only one gettign this?

[18:18] <gaal> i'm hacking on AST but i don't think my changes relate to this.

[18:18] <gaal> ah, sorry, actually they do

[18:18] <gaal> cancel that

[18:18] <gaal> :)

[18:24] <nothingmuch> anyone with windows around?

[18:24] <gaal> me

[18:24] <nothingmuch> could you reload that page, see that the PNG of the logo isn't fubar?

[18:24] <gaal> it's not the same color as the rest of the banner, if that's what you meant

[18:25] <nothingmuch> lighter? darker? white?

[18:25] <gaal> you might wanna alpha-channel its background to avoid caring about that

[18:25] <nothingmuch>  i did, but IE displays it white

[18:25] <gaal> it's lighter than the wine-red.

[18:25] <gaal> ah, right, i forgot, ie sucks.

[18:25] <castaway> yup

[18:25] <castaway> oh, too slow

[18:26] * castaway gives nm a linux-ie

[18:26] <gaal> do the site in flash :-p

[18:26] <gaal> what's a linux-ie?

[18:26] <gaal> a linux that drinks stout? :)

[18:26] <nothingmuch> fsck

[18:26] <nothingmuch> gaal: or SVG (That's what the logo is in)

[18:26] <nothingmuch> opera

[18:26] <nothingmuch> why can't they properly support pngs?

[18:26] <nothingmuch> i think i'll go for the javascript/png alpha hacks

[18:26] <castaway> crossover office and IE

[18:27] <gaal> ahhh

[18:27] <nothingmuch> okay, back to alpha

[18:28] <nothingmuch> looking good with khtml + ff

[18:28] <gaal> no, have your page-generating script imagemagick the bg to the same color as the bg.

[18:28] <nothingmuch> gaal: i did that, but then in one browser (i forget which) it's too dark

[18:28] <gaal> yes, looking good now for me too (ff/win)

[18:28] <nothingmuch> so then i came back to you, and you said 'too light'

[18:28] <nothingmuch> so i checked with the other, and indeed it was

[18:28] <gaal> urr? then don't pngcrush the image

[18:28] <castaway> and opera ?

[18:28] <nothingmuch> maybe someone is doing color "correction"

[18:28] <nothingmuch> opera is for weenies

[18:28] <nothingmuch> ;-)

[18:29] <nothingmuch> could you guys check the png alpha stuff with opera/msie?

[18:29] <gaal> you *could*, of course, make the whole banner an image :)

[18:29] * castaway thwaps nm. ;)

[18:29] <nothingmuch> eek

[18:29] <castaway> url ?

[18:29] <nothingmuch> i want alpha

[18:29] <gaal> white on msie.

[18:29] <nothingmuch> http://nothingmuch.woobling.org/kelaa/demo/who_we_are.html.he

[18:29] <nothingmuch> white... peh

[18:29] <gaal> (View This Page in MSIE)++

[18:30] <nothingmuch> okay, i'll copy a fix that tells msie to load it with the alpha blending image loader

[18:30] <gaal> i have the weirdest bug in ff now, though.

[18:30] <gaal> opening a new tab, the focus gets left behind in the last tab

[18:30] <gaal> eg in an edit box

[18:30] <gaal> instead of popping up to the location bar.

[18:31] <gaal> also, quicksearch broke.

[18:31] * gaal hates computers

[18:31] <castaway> address unavailable

[18:31] <nothingmuch> oi

[18:33] <nothingmuch> gaal: could you reload with msie?

[18:33] <nothingmuch> castaway: what does that mean?

[18:33] <castaway> no route to host, generally

[18:33] <gaal> i see no image at all now :)

[18:33] <nothingmuch> huraah! problem solved

[18:33] <castaway> *g*

[18:34] <gaal> what, you just punt on the image for msie? that effectively means nobody will see it, you know

[18:35] <castaway> ah, got it.. what am I looking for?

[18:35] <nothingmuch> ok, how about now?

[18:35] <nothingmuch> castaway: the logo on the top left

[18:35] <nothingmuch> is it blended well into the red?

[18:36] <gaal> ff good, msie white

[18:36] * gaal looks for food. bbiab

[18:36] <castaway> Im gonig to say yes, not that I know what that means : the background of it is all the same red as the top stripe

[18:36] <nothingmuch> damnit

[18:36] <nothingmuch> what msie?

[18:37] <nothingmuch> castaway: yes, that is good

[18:37] <nothingmuch> is the layout ugly somewhere?

[18:37] <castaway> nope, looks lovely

[18:37] <castaway> (Opera 8.0)

[18:37] * nothingmuch likes it when browsers behave

[18:37] * castaway too

[18:40] <nothingmuch> gaal: http://homepage.ntlworld.com/bobosola/pngtest.htm

[18:41] <gaal> 6.0smth

[18:41] <nothingmuch> does the solution fix the problem on that page?

[18:43] <gaal> ah, it's js

[18:43] <gaal> blocking that in msie

[19:03] <gaal> ./pugs.exe -e 'my @r=Pugs::Internals::runInteractiveCommand("ls"); @r[1].readline.say' # works

[19:04] <gaal> ./pugs.exe -e 'my @r=Pugs::Internals::runInteractiveCommand("cat"); say @r[0]: "moose"; @r[0].close; @r[1].readline.print' # also works

[19:22] <cognominal> print my $a; # does not work. I would expect 'my' to work like a function as it does in Perl5

[19:23] <gaal> cognominal: there's a comment in AST i think about how my should not be statement level :)

[19:23] <cognominal> ho, I remember now. I already have raised the question.

[19:24] <cognominal> sorry 

[19:24] <cognominal> cool, "print %ENV" works now

[19:26] <gaal> btw better call it %*ENV usually

[19:26] <nothingmuch> gaal: did enabling js fix it?

[19:26] <gaal> though %ENV ought to work too.

[19:26] <gaal> nm, dunno, i didn't want to get sidetracked - it was disabled for a reason :)

[19:26] <gaal> maybe there's someone else on windows online now?

[19:27] <cognominal> only a obfuscator would define a package based %ENV...

[19:27] <cognominal> in fact I would like a pragma to forbid that.

[19:27] <gaal> gee, i wonder if there are any camelfolks who are also obfuscators :)

[19:27] <nothingmuch> anybody with IE+JS want to be a guinea pig?

[19:27] <gaal> "folks"? i can't type :)

[19:30] <Jonathan_> Obfuscation is fun. :)

[19:31] <cognominal> Jonathan_: I know that, I maintain with BooK http://paris.mongueurs.net/aplusplus.html

[19:31] <cognominal> I accept Perl6 submissions...

[19:32] <gaal> asavige already has something amazing

[19:32] <gaal> did you see it? it's somewhere in examples/

[19:32] <cognominal> madgolfer.p6?

[19:32] <gaal> yeah

[19:33] <gaal> it's not an $A++ but it's still insane :)

[19:33] <cognominal> :)

[19:34] <cognominal> Andrew Savige is the auther of this $A++ :          $A-=$----$----$----$----$----!$-;

[19:34] <Jonathan_> Well, maybe I'll have to have a go at some..*after* the exams.

[19:37] <Jonathan_> BTW, my daily Pugs Win32 builds have been running smoothly for a few days now along with daily WinXP smoke testing results being put up.

[19:37] <Jonathan_> http://www.jwcs.net/~jonathan/perl6/

[19:37] <gaal> cool

[19:38] <Jonathan_> Not sure if there's a list of smokes anywhere that it should go on or anything.

[19:39] <gaal> see the /topic :)

[19:39] <gaal> also, feel welcome to make sucha a list in the wiki

[19:39] <gaal> actually, there *is* a list, but it's prolly out of date.

[19:39] <gaal> feel free to update it then :)

[19:40] <Jonathan_> OK.

[19:41] <jhorwitz> nothingmouch: still need that guinea pig?

[19:41] <gaal> anyone here run make test on a machine with HT?

[19:41] <nothingmuch> http://xrl.us/fv4x <-- add this too

[19:41] <gaal> pugs doesn't go over 50% but i don't know if that means anything.

[19:41] <nothingmuch> jhorwitz: yah

[19:42] * gaal dislikes shortened URLs

[19:42] <nothingmuch> http://nothingmuch.woobling.org/kelaa/demo/who_we_are.html.he

[19:42] <nothingmuch> is the PNG displayed properly when the js is fixed

[19:42] <nothingmuch> Jonathan_: if you want to feed my ego place them in chronological order ;-)

[19:43] <Jonathan_> Am I missing something, or is the Pugs wiki not linked to from pugscode.org?

[19:44] <jhorwitz> nothingmuch: white background

[19:44] <nothingmuch> damnit

[19:44] * nothingmuch curses microsoft for existing

[19:44] <nothingmuch> ok, one more trial

[19:44] <gaal> hard to curse something for not existing

[19:44] <nothingmuch> ...

[19:45] <nothingmuch> reload

[19:47] <gaal> nm: is there any use for keeping a timestamp on every test in the tests.yml? just notices all this info

[19:47] <gaal> makes it hard to diff

[19:47] <nothingmuch> gaal: kungfuftr asked for that

[19:47] <nothingmuch> i can take it out, make it optional, whatever

[19:48] <nothingmuch> jhorwitz: any change?

[19:49] <jhorwitz> nothingmuch: bingo

[19:51] * nothingmuch utters "finally"

[19:53] * Limbic_Region looks at lukes response to the while blocks and formal parameters question and tries really hard to understand but fails to do so

[19:54] <gaal> just got the sleepies, so i ci'ed what i have

[19:55] <gaal> if anyone wants to write tests for p5-like pipe open, or also open with explicit mode, please do so

[19:55] <gaal> the implementation of both will be in perl6 on top of the new prims of r2377

[19:55] * nothingmuch goes to write more money making projects =(

[19:55] <nothingmuch> sowwy

[19:55] <gaal> also if anyone wants to write an open3 wrapper... :)

[19:56] <gaal> k, i'm off to bed. night all!

[19:56] <nothingmuch> .... or better yet: port IPC::Run, and give it good pty support

[19:56] <nothingmuch> ciao!

[19:57] <nothingmuch> and write Expect, implemented with IPC::Run

[19:57] <gaal> nm, tell me more, i''ll se about implementinf that

[19:57] <gaal> oh

[19:57] <gaal> maybe not :)

[19:57] <gaal> later. zzz&

[19:57] <nothingmuch> so that no one ever ever gets it wrong later

[19:57] <nothingmuch> heh =)

[19:57] <Jonathan_> Added my tinder to the Wiki...any objections to me adding a link to my Win32 Pugs build on the PugsDownload page, provided I maintain it properly this time? :)

[19:57] <nothingmuch> i think you can do it

[19:57] <nothingmuch> ciao!

[19:57] <Jonathan_> bye gall

[19:58] <nothingmuch> Jonathan_: yah, it's a wiki

[19:58] <nothingmuch> do as you please =)

[19:58] <nothingmuch> the more content the merrier, as long as it's not too much per page

[19:58] <jabbot> pugs - 2377 - runInteractiveCommand and openFile primi

[20:04] <Jonathan_> Cool, it's in.

[20:10] <mj> today test-diff http://wiki.kn.vutbr.cz/mj/index.cgi?diff_revision=1.7&action=Diff&page_id=Pugs+on+MS+Windows+-+actual+test+results&current_revision=1.8&last_revision=1.8

[20:11] <nothingmuch> mj++; # pretty

[20:11] <nothingmuch> want to implement it a Test::TAP::Model visualizer?

[20:11] <nothingmuch> Test::TAP::HTMLDelta?

[20:14] <mj> diff plugin is old Kwiki best feature

[20:14] <mj> no free time for Pugs this week, :-(

[20:15] <mj> Wikipedia diff is the best, IMO.

[20:17] <ninereasons> since somewhere around r2361, the shell version of pugs has not been working.

[20:17] <ninereasons> sub hello ($x) { return "hello $x"; }

[20:17] <ninereasons> say hello 'world'

[20:17] <ninereasons> *** Error: No compatible subroutine found: &hello

[20:18] <ninereasons> the same thing at the commandline works fine

[20:18] <ninereasons> (or in a script, etc.) only broken in the shell.

[20:19] <nothingmuch> probably related to autrijus's work today

[20:19] <nothingmuch> can you try to test it with gaal's patch?

[20:19] <nothingmuch> open pipe to pugs

[20:19] <nothingmuch> and then play with it's shell?

[20:20] <ninereasons> nothingmuch, what/where is gaal's patch?

[20:20] <nothingmuch> see backlog

[20:20] <nothingmuch> i don't know the details

[20:20] <ninereasons> ok, thanks.

[20:20] <nothingmuch> but he asked for tests

[20:21] * nothingmuch can't really look into it now =(

[20:22] <ninereasons> that's okay, I'll take do the work :-)

[20:25] <Corion> Grrr. People renaming files should check if they break some tests by it!

[20:26] <nothingmuch> hola Corion 

[20:27] <Corion> Hi nothingmuch 

[20:29] <cognominal> http://rafb.net/paste/results/QihgyN66.html  # this is weird; a two dimensional array seems to be garbaged on return

[20:30] <cognominal> I can probably simplify it more

[20:32] <mj> http://test.wikidev.net/Pugs_tests_result_diff_test?title=Pugs_tests_result_diff_test&diff=0&oldid=766

[20:33] <cognominal> also what is the routine used to print in the read eval loop. It is better than a straight print

[20:33] <cognominal> pugs> my @b = [ < 1 2 3 4 > ],  [ 5 ];

[20:33] <cognominal> (('1', '2', '3', '4'), (5))

[20:33] <cognominal> pugs> print @b

[20:33] <cognominal> 12345bool::true

[20:34] <theorbtw1> print @b.perl

[20:35] <cognominal> thx

[20:37] <cognominal> poblem is that (('1', '2', '3', '4'), (5)) evaluates in a flat array...

[20:37] <cognominal> bug!

[20:38] <jabbot> pugs - 2378 - fp/ was renamed to functional/

[20:38] <jabbot> pugs - 2379 - VProxy variables can cause a Haskell err

[20:40] *** theorbtw1 is now known as theorbtwo

[20:43] <Corion> Is there any Sxx or Axx or Exx about $?CALLER::POSITION?

[20:44] <Corion> ... I'm especially interested in the line/column position, as it seems to be one item off.

[20:44] <nothingmuch> S06 i think

[20:44] <nothingmuch> but not about POSITION

[20:44] <nothingmuch> it's about CALLER::

[20:44] <nothingmuch> $?POSITION is, afaict a pugs ext

[20:44] <Corion> Ah...

[20:45] <Corion> Anyway - some more failing tests committed, including one against the interaction between #line and $?CALLER::POSITION

[20:45] <Corion> ... another smoke run whilst I'm away :)

[20:48] <jabbot> pugs - 2380 - Added tests for $?CALLER::POSITION again

[20:55] <mj> g'night, http://test.wikidev.net/Pugs_tests?action=history

[21:00] <Corion> ... and somebody, again, broke the automatic retrieval of the svn version into the Pugs build.

[21:02] <mugwump> witchhunt time!

[21:02] <mugwump> hey ingy_ 

[21:02] <mugwump> was it you?

[21:02] <ingy_> nosir

[21:13] <mugwump> ingy, I've got some more perldoc stuff, but I can't commit any more, I think because I never had an svn.kwiki.org account

[21:21] <ingy> mugwump: msg me a passwd entry

[21:22] <ingy> I'll give you commit access for Perldoc

[21:24] <QMario> Can someone tell me how I can get a value out of a hash?

[21:24] <QMario> How do I use <STDIN> to get a value out of a certain hash?

[21:25] <ingy> QMario: you can't. hashes are write only in Perl6

[21:25] <ingy> just kidding ;)

[21:26] <QMario> What do you mean?

[21:27] <QMario> What I want to do is to create a program that stores a "phone book" in a hash. Then I want to ask th person who is looking through the phone book, who they want using <STDIN>. How do I do that?

[21:27] <QMario> Can any of you ask this question in #perl for me?

[21:27] <mauke> hahaha

[21:27] <mauke> why?

[21:28] <QMario> Heh, I'm banned.

[21:28] <mauke> why?

[21:28] <QMario> For standing up for Christ. :-D

[21:29] <mauke> well, that's your problem

[21:29] <mauke> sounds like homework anyway

[21:29] <QMario> For me?

[21:30] <nothingmuch> my cat is crazier than autrijus

[21:30] <nothingmuch> he likes halva

[21:30] <nothingmuch> and ice cream (but not frozen yoghurt)

[21:32] <obra>   

[21:33] <obra> This channel really has nothing to do with perl5, qmario

[21:33] <nothingmuch> QMario: i think you should learn to separate between perl 5, perl 6, and religeon

[21:34] <nothingmuch> and for the mean while, till your ban is lifted, either use #perl on irc.perl.org, or something like perlmonks.org (website), or [email@hidden.address] (mailing list)

[21:34] <nothingmuch> sorry, wrong mailing list address

[21:35] <nothingmuch> http://lists.perl.org/showlist.cgi?name=beginners

[21:36] <nothingmuch> you could also get one of Randal Schwartz's books, for perl beginers

[21:36] <nothingmuch> or Simon Cozens' one, which is available online

[21:36] <nothingmuch> "Begining Perl" or something like that

[21:37] <nothingmuch> are you listening?

[21:37] <mauke> Beginning Perl: http://learn.perl.org/library/beginning_perl/

[21:43] <Corion> #perl bans people according to the rules of irc:

[21:43] <Corion> 1) Somebody is drunk

[21:44] <Corion> 2) Somebody took the wrong drugs

[21:44] <nothingmuch> does 1) apply to the op or the banned person?

[21:44] <Corion> nothingmuch: Any person. Need not be on irc.

[21:44] <cognominal> blue cubes from the fridge are ok, I suppose

[21:44] * nothingmuch bans corion because someone in ireland *must* be drunk ATM

[21:45] <Corion> nothingmuch: You're free to try on #perl6 :)

[21:45] <nothingmuch> =)

[21:45] <nothingmuch> i like the fact that anarchy seems to actually work for this project

[21:45] <nothingmuch> in all it's aspects

[21:48] <Corion> Even NathanYJ left us :)

[21:48] <nothingmuch> yeah

[21:48] <Corion> (and I've mostly shut up about my more extreme viewpoints too :) )

[21:48] <Corion> (... but I'm still waiting for my chance to push URI::File as the way to handle filenames in Pugs/Perl6)

[21:49] <nothingmuch> i think we should have a grand unified resource manager

[21:49] <nothingmuch> URI

[21:49] <nothingmuch> File::Spec

[21:49] <nothingmuch> IO::AtomicFile

[21:49] <nothingmuch> that knows to be:

[21:49] <Corion> nothingmuch: Stop that J2EE / P5EE talk :)

[21:49] <nothingmuch> it's not that it's all of them at the same time

[21:49] <nothingmuch> it's just a big hub of convenience that knows to connect them all for you

[21:49] <mauke> like IO::All?

[21:50] <nothingmuch> sort of

[21:50] <nothingmuch> but less drunk

[21:50] <mugwump> heh

[21:51] <Corion> The IO::All magic is too powerful by default.

[21:51] <nothingmuch> my grudges with IO::All is that it's a bit too dwimmy

[21:51] <nothingmuch> and it is not 100% flexible

[21:51] <nothingmuch> or at least doesn't seem to be

[21:54] <nothingmuch> actually, you know what mauke, reading more carefully (and not just seeing examples) i think IO::All is saner than I initially thought

[21:56] <Corion> nothingmuch: The File/Directory abstraction as a lazy tree is nice. The implicit spawning of a (http) server is incredibly dangerous

[21:56] <nothingmuch> true

[21:56] <nothingmuch> ,

[21:59] <mugwump> no http server, just a socket server

[21:59] <mugwump> That one-line http server in the docs isn't exactly standards compliant ;)

[21:59] <nothingmuch> i'd like an IO::All::Safe thingy

[22:00] <Corion> mugwump: Still bad enough :)

[22:00] <nothingmuch> that can only read things

[22:00] <mugwump> IO::Few

[22:00] * nothingmuch would like a way to just open $fh, $user_input; without worrying ever

[22:00] <nothingmuch> (if read permissions aren't a problem"

[22:00] <nothingmuch> without a file like "foo|" being a problem

[22:00] <nothingmuch> and with http://foo.org/blah working

[22:01] <nothingmuch> and so on and so forth

[22:01] * nothingmuch looks

[22:01] <nothingmuch> E_NO_SUCHMODULE IO::Few

[22:02] <nothingmuch> mugwump: what was it we talked about a while ago?

[22:02] <nothingmuch> i remember having something to tell you, but i can't recall the context

[22:16] <ingy> nothingmuch: I'm working on a strict mode for IO::All

[22:16] <nothingmuch> ingy++

[22:17] <ingy> use IO::All -strict;

[22:17] <ingy> it simply exports a constructor that creates objects that have the strict attribute set

[22:18] <ingy> and then all operations check that attribute for whether to be  strict.

[22:18] <ingy> I will likely have a way to force all IO::All objects to be strict

[22:19] <ingy> but module authors should not set that

[22:19] <ingy> so the strictness is sort of lexically scoped

[22:20] <ingy> of course operations that gen new IO::All objects will inherit the strictness bit

[22:21] <ingy> so it's not really lexical, but it should give you enough rope to do what you need

[22:22] <ingy> Dave Rolsky (autarch) gave me that idea. It's a good approach I think

[22:37] <Limbic_Region> stevan ping

[22:37] <QMario> Sorry for not responding in a long time.

[22:43] <Limbic_Region> question - if you were porting a p5 piece of code to p6 that required regex support (that could easily be done with junctions instead) - would you show off the power of junctions or use p5 regexen?

[22:43] <Limbic_Region> keeping in mind it is purely for others to be exposed to all the great work of Pugs

[22:48] <nothingmuch> junctions =)

[22:48] <ihb> If i have a Perl 5 class, can i use that as a base class for a Perl 6 class?

[22:48] <nothingmuch> ihb: my understanding is that yes, unless you want to have opaque type goodness

[22:48] <nothingmuch> p6 will still support blessing

[23:21] <mugwump> There's no real reason why it can't be possible for an object to be both a blessed hash and have opaque properties...

[23:22] <nothingmuch> good point, actually

[23:22] <nothingmuch> but it's likely to cause some confusion

[23:23] <nothingmuch> mugwump: backlog up a bit

[23:24] <mugwump> I'm not sure what we were talking about, nothingmuch.  Maybe someone's logging this channel?  :)

[23:24] <nothingmuch> p'raps

[23:25] <nothingmuch> i mean, yes

[23:25] <nothingmuch> p'raps i can find it

[23:26] <mugwump> maybe you found some cheap copies of Infected Mushroom CDs?  :)

[23:26] <nothingmuch> nope, sorry

[23:26] <mugwump> blast.

[23:26] <nothingmuch> haven't been in a cd store for ages

[23:27] <nothingmuch> damnit, i can't remember what I wanted to say

[23:27] <nothingmuch> but i remember i worked hard trying to say it

[23:28] <nothingmuch> oh!

[23:28] <nothingmuch> Set::Object has a weird bug

[23:28] <nothingmuch> i'm not exactly sure how it surfaces

[23:29] <nothingmuch> but when you '-x _' after another test, some Set::Object sub is invoked

[23:29] <nothingmuch> and says that blah blah blah is not a Set::Object

[23:30] <nothingmuch> try to run S::O and IPC::Run in the same script

[23:36] <Limbic_Region> ok - I need some junction help

[23:36] <Limbic_Region> if I have any( @foo ) eq any( @bar ) to start from and the answer is true, how can I find out which item matched?

[23:36] <nothingmuch> Limbic_Region: you can't

[23:36] <nothingmuch> afaik

[23:37] <Limbic_Region> not even with another junction?

[23:37] <nothingmuch> in a boolean at least

[23:37] <Limbic_Region> forget the test

[23:37] <Limbic_Region> that was to start from

[23:37] <nothingmuch> i would like to say ($j = all(@foo) eq all(@bar));  but i'm not sure that works

[23:37] <nothingmuch> from there you can call junction methods on $j

[23:37] <nothingmuch> i forget their names

[23:37] <nothingmuch> lets read some tests in t/junctions

[23:37] <Limbic_Region> yeah

