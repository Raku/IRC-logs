[01:17] <wolverian> hah. nice bug with shift()

[02:01] <ingy> back

[02:05] <stevan> ingy: do you know if open() and readline() was working?

[02:06] <ingy> stevan: I don't thinkso

[02:06] <ingy> I didn't see any tests or other code using file input

[02:07] <ingy> I need it for my Kwid test harness

[02:08] <wolverian> creating a filehandle seems to work to some extent, but it is always closed

[02:08] <wolverian> that is, I can't hGetLine or hPutStr.

[02:08] <ingy> I want to port IO::All to pugs

[02:08] <stevan> wolverian: I can write to a file, but not read it

[02:09] <stevan> thats enough to do a test though

[02:09] <stevan> I can just eval the read tests

[02:10] <wolverian> stevan: how?

[02:10] <wolverian> oh, > works.

[02:10] <stevan> yeah

[02:10] <wolverian> < is a unknown mode. :)

[02:10] <stevan> yup

[02:10] <wolverian> s/a/an/

[02:11] <stevan> actually from what I can gather form the Haskell, read mode is ""

[02:11] <stevan> so open("file") defaults to read

[02:11] <wolverian> but it doesn't work.

[02:11] <stevan> yeah it doesnt :)

[02:11] <stevan> but broken stuff has not stopped me from writing tests yet :P

[02:11] <wolverian> hehe.

[02:12] <stevan> write will also create the file too

[02:28] <wolverian> it's neat how irrational I can be about programming languages. I just don't feel comfortable coding python, even though I consider it a very good language. (just as good as perl, or ruby, and in many cases better.)

[02:31] <wolverian> also, ruby would be my favourite language if not for the Proc/block separation.

[04:14] <stevan> r404 and we are up to 926 test

[04:14] <stevan> my goal is 1000+ tests by the end of the week ;-)

[04:14] <nnunley> ;)

[04:14] <nnunley> No problem.

[04:15] <nnunley> 2 days.  80 tests.

[04:15] <stevan> shouldnt be a problem, thats about the average lately anyway

[04:17] <stevan> nice! http://rt.openfoundry.org/Foundry/Project/Source/index.html/pugs/log/

[04:17] <stevan> I only just saw this :P

[04:19] <nnunley> stevan: I realized there was another path towards testing the pretty printing...  We could export a function into pugs that pretty prints an evaled statement.

[04:19] <nnunley> Into a string.

[04:19] <nnunley> And then use 'is' testing.

[04:19] <stevan> nnunley: that would work

[04:20] <stevan> although I was considering learning Haskell to write that test 

[04:20] <stevan> but realistically if I can do it in perl, it will get done much quicker

[04:20] <nnunley> stevan: If at least 1 of us learns enough of QuickCheck to start testing the haskell core, then we can ensure some really nice coverage.

[04:20] <nnunley> Preferably 2.

[04:21] <stevan> nnunley: isn't QuickCheck the specification based testing tool?

[04:21] <nnunley> stevan: Exactly.

[04:21] <stevan> tmoertel's LectroTest is based on that 

[04:22] <stevan> hmmmmmm

[04:22] * nnunley nods.

[04:22] <nnunley> And shapr has a standing offer to help us with groking its usage.

[04:22] * stevan looks for that YaHT PDF he downloaded yesterday

[04:24] <stevan> I need file test operators too

[04:24] <stevan> to round out the tests t/op/io.t

[04:24] <stevan> *sigh*

[04:25] <wolverian> does an infix:<foo> declaration work yet? :)

[04:25] <Steve_p> shapr's mentioned he's done qite a bit with QuickCheck

[04:25] <buu> wolverian: 

[04:25] <buu> wolverian: I seriously doubt it=]

[04:25] <nnunley> Steve_p: Yeap.  He's got a TDD version of QuickCheck.

[04:25] <stevan> wolverian: doubt it, i was just reading Prim.hs and didnt see anything that looks remotely like it

[04:26] <wolverian> stevan: right. it doesn't seem to work.

[04:26] <buu> infix:<Z> { zip(@_) }

[04:26] <buu> wolverian: What is the full syntax for those declarations anyways?

[04:26] <wolverian> I'd like to infix is()

[04:26] * stevan drools at the idea of creating my own infix operators

[04:26] * nnunley nods at wolverian.

[04:27] <wolverian> buu: sub infix:<foo> (...) { ... }

[04:27] <buu> Oh

[04:27] <nnunley> foo is bla because "I said so"

[04:27] <buu> Simple enough.

[04:28] <buu> I thought there already was an infix 'is'

[04:28] * nnunley nods

[04:28] <buu> for @x -> $_ is rw { }

[04:29] <nnunley> Actually, it's adverbial.

[04:29] <nnunley> IIRC.

[04:29] <buu> Perl6, why are you so scary

[04:29] <nnunley> sub infix:<foo> is parsed /(.*)foo(.*)/ {...}

[04:30] <buu> !

[04:30] <buu> Oh god

[04:30] <buu> #writing sub languages in perl is bad idea

[04:30] <stevan> uh oh I think buu's head is going to explode again

[04:31] * nnunley grins.

[04:31] <buu> Too late =[

[04:31] <nnunley> buu:  And there will be rabbits, too.

[04:32] <buu> nnunley: Oh goody.

[04:32] <buu> Do I get my own rabbit?

[04:32] <wolverian> nnunley: doesn't that need to be a macro?

[04:32] <wolverian> (since it needs to parse the code itself, so it needs to do it at compiletime.)

[04:33] <wolverian> (I think.)

[04:33] <wolverian> buu: heh, I forgot that. :)

[04:33] <mauke> sub infix:<IsNot> is patented {...}

[05:09] <tmoertel> stevan: did you have questions about QuickCheck?

[05:09] <stevan> tmoertel: no, not yet, still working on Haskell itself

[05:31] <stevan> nnunley: r405 and up to 969 tests

[05:31] <stevan> :)

[05:32] <nnunley> Slow down, man... Save some for the rest of us. ;)

[05:32] <nnunley> stevan++

[05:32] <stevan> nnunley: no doubt there will be plenty more needed

[05:32] <stevan> we dont even have classes yet

[05:32] <stevan> and forget about reg-exps

[05:33] * nnunley nods

[05:33] <nnunley> And rules

[05:33] <stevan> yup

[05:34] <nnunley> I'm guessing that rules might come next... With them and PGE, we very close to bootstrap.

[05:35] <stevan> nice

[05:35] <stevan> although I have to admit, I want to try out the classes more

[05:35] * nnunley nods.

[05:37] <stevan> ok,.. off to sleep for me, later all

[05:37] * nnunley waves.  "Sleep well."

[05:37] <tmoertel> 'night

[07:06] <ingy> hola

[07:07] <ingy> autrijus: ping

[07:12] <buu> HALLO

[07:13] <ingy> hi buu 

[07:14] <buu> Hi ingy! I recruited someone else to make fun of kwid

[07:14] <ingy> what is your deal?

[07:15] <buu> um

[07:15] <buu> 3 queens and a two

[07:15] <buu> I pass

[07:15] <ingy> later

[07:34] <viirya_> yyyy

[07:35] <ingy> viirya_: do you know haskell?

[07:35] <Khisanth> the syntax looks scary

[07:40] <viirya_> ingy: a bbit

[07:47] <viirya_> weridly, making pugs causes very high loading now.

[07:47] <viirya_> what's wrong

[07:49] <buu> Fine for me

[07:50] <ingy> autrijus: hihi

[07:50] <autrijus_> greetings lambdacamels

[07:50] <ingy> autrijus_: too

[07:50] * autrijus_ @ AOSS "Standards" working group

[07:50] <ingy> I am transcribing YAHT to Kwid

[07:51] <autrijus_> oooh.

[07:51] <ingy> while waiting for you to show up

[07:51] <autrijus_> I fixed the open"<" bug; working on open some mor

[07:51] <autrijus_> e

[07:51] <ingy> I have a simple haskell question

[07:51] * autrijus_ sees many new tests committed

[07:51] <autrijus_> sure?

[07:51] <ingy> you++

[07:51] <autrijus_> (also, #haskell is a good place to have simple haskell questions answered)

[07:51] <ingy> I have an array of strings

[07:52] <ingy> and I want to listify it

[07:52] <autrijus_> you mean, a list of strings

[07:52] <autrijus_> but go ahead

[07:52] <autrijus_> hmm?

[07:52] <ingy> well I want to use the list where strings are expected

[07:53] <ingy> btw, I am sitting on a very nice patch

[07:53] <autrijus_> you can use "concat"

[07:53] <ingy> just need this to finish it

[07:53] <ingy> actually it is done

[07:53] <autrijus_> concat ["1","2","34"] -- "1234"

[07:53] <ingy> no

[07:53] <autrijus_> write code, not words :)

[07:54] <ingy> I want "1", "2", "3", "4"

[07:54] * autrijus_ understands code better than words

[07:54] <autrijus_> you want to join them with comma?

[07:54] <ingy> ok...

[07:54] <Khisanth> heh just got up to that part in YAHT :)

[07:54] <ingy> hold on

[07:55] <ingy> I am using unlines

[07:55] <ingy> which takes a list of strings

[07:55] <autrijus_> and join them with "\n"

[07:55] <autrijus_> that's correct

[07:56] <ingy> let me try something

[07:56] <viirya_> why new pulled code hard to build?

[07:56] <viirya_> making high loading, and in slow scramble.

[07:57] <ingy> foo = ["1", "2"]

[07:57] <ingy> unlines [foo, "3", "4"]

[07:58] <ingy> I want foo to list its contents

[07:58] <ingy> because the above is invalid

[08:00] <viirya_> just unlines $ foo ++ ["3","4"]

[08:01] <viirya_> guess what you need is that.

[08:01] <ingy> that works

[08:02] <ingy> I tried it without the $

[08:02] <ingy> why is the $ needed?

[08:02] <viirya_> unlines (foo ++ ["3","4"]) works too.

[08:03] <ingy> oh I see now

[08:03] <viirya_> unlines don't know what's foo ++ ["3","4"]

[08:03] <ingy> I would think ++ binds tighter

[08:04] <ingy> thanks, it works

[08:04] <ingy> pugs now has -V

[08:04] <autrijus_> woot

[08:04] <ingy> which comes from the new Config.hs

[08:04] <autrijus_> no, function application always binds tightest

[08:04] <autrijus_> can't have any operator that binds tighter than function application in haskell

[08:05] <clkao> autrijus_: yo, come around #svk

[08:05] <autrijus_> however useful it may be

[08:06] <ingy> cool

[08:06] <ingy> it is a pitiful -V

[08:06] <ingy> but it's a start

[08:08] <buu> ingy: I can parse text, verbatim and .verbatim!

[08:08] <autrijus_> ooh!

[08:08] <buu> Yeah =/

[08:08] <buu> But I think I finally have a clean design to expand to the rest of kwid.

[08:08] <ingy> buu: cool

[08:09] <buu> yeah

[08:09] <cls_bsd> ok, make nightly build again

[08:09] <cls_bsd> svk up -s ; perl Makefile.PL; make

[08:09] <autrijus_> cls_bsd: you are holding nightly builds

[08:09] <autrijus_> ?'

[08:09] <buu> ingy: =header is invalid, right? It has to be: = header; ?

[08:10] <viirya_> compiling in turtle speed...

[08:10] <autrijus_> sorry, I'm involved in the conf right now, discussing revisions for the PO format

[08:11] <ingy> buu: correct

[08:11] <ingy> (and documented)

[08:11] <buu> Yeah yea.

[08:11] <buu> You were closer.

[08:11] <ingy> you should carefully read perlkwid at least once

[08:12] <buu> I did.

[08:12] <ingy> maybe twice :p

[08:12] <buu> Well yeah

[08:13] <buu> I keep re-reading secitons

[08:13] <buu> But while I'm asking you questions, should: =foo; be an error or just plain text?

[08:14] <ingy> plain text

[08:14] <cls_bsd> sudo pkg_delete /var/db/pkg/bsdpan-Perl6-Pugs-6.0.9/ ; sudo make install clean

[08:14] <cls_bsd> hmm

[08:14] <cls_bsd> always doing this

[08:14] * cls_bsd considering about make pugs in ports even when pugs is still alpha

[08:16] <viirya_> give up compilation

[08:17] <buu> ingy: Is there any particular reason you made *foo*,*bar*,*baz not bold?

[08:18] <ingy> it is too problematic imo

[08:18] <buu> Well, I can see stuff like foo* bar* baz;

[08:18] <ingy> *foo*, *bar*, *baz* is bold

[08:18] <buu> Good point.

[08:19] <ingy> and you can always {*foo*},{*bar*},{*baz*}

[08:19] <buu> Well yes

[08:20] <buu> ingy: line 190 "If you start ith bullets or numbers, stick with them, as formatters use the first "=item" type to decide how to format the list"

[08:20] <buu> Should that be there?

[08:20] <theorbtwo> Question: What is $foo{`clear`} ?

[08:21] <theorbtwo> I'd insert a "may".

[08:21] <ingy> buu: I'll fix that

[08:21] <buu> theorbtwo: Er, kwid doesn't have =item tags =]

[08:21] <theorbtwo> Oh.  Right.

[08:22] <buu> ingy: And inside a .list region, is there any difference between - and * thingies?

[08:22] <ingy> yes

[08:23] <ingy> - foo()

[08:23] <ingy> blah blah

[08:23] <ingy> it is just like the diff between

[08:23] <ingy> =item foo()

[08:23] <ingy> and

[08:24] <ingy> =item *

[08:24] <buu> Er, sorry, I'm not following

[08:24] <buu> oh

[08:24] <buu> "- for things that look nothing like bullets or numbers"

[08:24] <ingy> :)

[08:24] <buu> I see. 

[08:24] <ingy> pod has 3 list types

[08:24] <autrijus_> ingy: ooh http://xliff-tools.freedesktop.org/wiki/Projects/XliffPoTools

[08:25] <buu> So if I was rendering - foo; as html

[08:25] <autrijus_> ingy: you may or may not like that, but it looks sensible

[08:25] <buu> Would I use <li>, despite the bullet?

[08:25] <ingy> bulleted, numbered and worded

[08:25] <ingy> buu: html has nothing to do with parsing

[08:25] <buu> ingy: Right.

[08:25] <buu> I was just curious

[08:27] <ingy> buu: you can use whatever you want

[08:27] <buu> heh

[08:27] <ingy> you can have multiple html formatters

[08:27] <buu> Well yeah

[08:28] <ingy> look at what various pod2html formatters do

[08:30] <theorbtwo> I'd use li, certianly.  If you really want a certian sort of bullet, use CSS or the type= parameter.

[08:30] * buu shrugs

[08:30] <buu> Just an idle curiosity.

[08:31] <ingy> autrijus_: Config stuff checked in 

[08:31] <ingy> you should take a look

[08:31] <theorbtwo> Semantic markup is the most important sort, IMnsHO; use CSS if your semantic markup doesn't make the browser display what you want.

[08:32] <autrijus_> ok, updating

[08:32] <ingy> Next step is to rework the installation of modules into the perl6 paths

[08:32] <autrijus_> woot.

[08:32] <autrijus_> mmm bin/

[08:33] <autrijus_> can I move it to script/ ?

[08:33] <ingy> I did some clever heuristics to make perl6 module directories

[08:33] <autrijus_> to agree with makemaker convention

[08:33] <buu> theorbtwo: I need some way to use kwid as xml =[

[08:33] <autrijus_> and to avoid clashing with the haskell/eclipse conventino of putting executables produced to bin/

[08:33] <ingy> um

[08:33] <ingy> it's not an installed script

[08:34] <ingy> it's part of the build process

[08:34] <autrijus_> then util/

[08:34] <ingy> sure

[08:34] <autrijus_> is a better idea

[08:34] <autrijus_> please do so if you can :)

[08:34] <ingy> ok

[08:34] * autrijus_ is entangled is weird ISO stuff

[08:37] <autrijus_> hi nothingmuch!

[08:37] <autrijus_> nothingmuch++ # donor

[08:37] <nothingmuch> =)

[08:37] <autrijus_> nothingmuch++ # paypal'ing me for the cause

[08:37] <autrijus_> nothingmuch: I've synced darcs repo

[08:37] <nothingmuch> autrijus_:  grazie

[08:38] <nothingmuch> say

[08:38] <nothingmuch> yesterday i tried my first hours or so with pugs and stuff

[08:38] <theorbtwo> Allo, nothingmuch!

[08:38] <autrijus_> cool.

[08:38] <nothingmuch> hola, orb!

[08:38] <nothingmuch> stevan said I should try testing the open op

[08:38] <autrijus_> the fatal error in eval"open()" is fixed

[08:38] <autrijus_> will commit soon

[08:38] <nothingmuch> so i did

[08:38] <ingy> autrijus_: bin->util done

[08:39] <nothingmuch> but i didn't get far at all

[08:39] <autrijus_> ingy: danke

[08:39] <nothingmuch> i'd like to get a sort of handle on what is available, language wise

[08:40] <autrijus_> nothingmuch: the bottom of Prim.hs

[08:40] <ingy> night all...

[08:40] <autrijus_> nothingmuch: and grep for todo_ in t/

[08:40] <nothingmuch> for example, my $handle = eval { open "non_existing_file" }; didn't work well for me

[08:40] <autrijus_> should give a pretty good idea

[08:40] <autrijus_> there is no eval {}

[08:40] <nothingmuch> right

[08:40] <autrijus_> yet

[08:40] <autrijus_> there's only eval ""

[08:40] <autrijus_> because in p6 it's try{} now.

[08:40] <nothingmuch> but it "worked", in that it didn't complain much

[08:40] <autrijus_> gone was the punning

[08:40] <nothingmuch> i tried try first

[08:40] <nothingmuch> but that didn't work at all

[08:40] <autrijus_> yeah, and try{} is not there :)

[08:40] <autrijus_> you want it?

[08:40] <autrijus_> I can code it up :)

[08:40] <nothingmuch> so buu suggest eval {}, and it gave the impression that it was working

[08:41] <nothingmuch> i'll make deal

[08:41] <nothingmuch> if you give me try and catch, with throwable stuff

[08:41] <nothingmuch> i'll give you tests

[08:41] <nothingmuch> ;-)

[08:42] <autrijus_> uh... the norm here is the other way around :)

[08:42] <autrijus_> tests first etc

[08:42] <nothingmuch> anywho, i shouldn't get carried away

[08:42] <nothingmuch> test & code simultaneously

[08:42] <autrijus_> but sure, considering your generosity, I can try to get try working

[08:42] <nothingmuch> i'll do it this afternoon

[08:42] <nothingmuch> well, no, bass lesson. This evening

[08:42] <autrijus_> cool!

[08:42] <nothingmuch> don't rush it

[08:42] <buu> nothingmuch: I have no idea what's actually working.

[08:42] <nothingmuch> it will take me long

[08:42] <buu> I was just randomly guessing.

[08:42] <nothingmuch> spreading disinformation, huh?

[08:43] <nothingmuch> anywho, i just dropped in to give buu a link (http://www.findinglisp.com/blog/2005/03/darcs-and-arch-revisited.html)

[08:43] <nothingmuch> so now i have to go back to real work

[08:44] <nothingmuch> ciao!

[08:44] <autrijus_> Can't locate Spiffy.pm in @INC (@INC contains: C:/perl/lib C:/perl/site/lib .) a

[08:44] <wilx> I just updated pugs.

[08:44] <wilx> Chasing modules from: Main.hs

[08:44] <wilx> Main.hs:

[08:44] <wilx>     Can't find module `Config'

[08:44] <autrijus_> ingy: thou shalt not pollute the tree

[08:44] <wilx> Oh, now I get it.

[08:44] <wilx> Geez, do I really need to configure?

[08:44] <wilx> :/

[08:44] <ingy> ?

[08:44] <ingy> wilx: rerun perl Makefile.PL

[08:45] <ingy> autrijus_: ?

[08:45] <autrijus_> ingy: nvm, fixed

[08:45] <wilx> Yeah, but that would mean installing Win32 Perl :/

[08:45] <wilx> Oh well...

[08:45] <ingy> ?

[08:45] <wilx> Never mind.

[08:45] <autrijus_> and you did not escape stuff correctly

[08:45] <autrijus_> also fixing

[08:45] <ingy> ?

[08:46] <ingy> explain all this

[08:47] <ingy> sorry about the Spiffy thing

[08:47] <ingy> did you fix that?>

[08:47] <autrijus_> yeah

[08:47] <autrijus_> I also fixed escapgin

[08:47] <ingy> what escaping?

[08:47] <autrijus_> see r410

[08:47] <autrijus_> $value =~ s{\\}{\\\\}g;

[08:49] <ingy> nice, thanks

[08:50] <ingy> how do single quotes work in haskell?

[08:50] <ingy> are they for single chars?

[08:51] <autrijus_> yup, just like a certain C language

[08:51] <autrijus_> but haskell has no interpolation

[08:51] <ingy> I C

[08:51] <autrijus_> so just escaping \\ and \n is enough

[08:51] <autrijus_> and I truse Config.hs will have no \n

[08:51] <ingy> nope

[09:24] <ingy> finished YAHT intro -> Kwid

[09:24] <ingy> ok zzzzzzz for real &

[09:24] <buu> 75 tests

[09:25] <buu> Matches inline listy items.

[09:29] <beth> enlighten me, buu

[09:29] <buu> Pugs is the new religion.

[09:30] <buu> svn.perl.org/perl6/pugs/trunk

[09:30] <beth> http://web.mit.edu/dyezone/www/images/Bolton%20Remodel/Tired%20Pugs.JPG  ?

[09:30] <buu> I doubt it, but I can't see that link

[09:30] <buu> svn.perl.org/perl6/pugs/trunk/docs/01Overview.html

[09:30] <beth> showing me where to get it is not the same as saying what it is!

[09:30] <buu> ^

[09:30] <beth> I am SO not enlightened

[09:30] <beth> ok

[09:30] <buu> Read!

[09:32] * beth re4dx0rz

[09:33] <beth> damn you buu, I'm going to have to look at this now

[09:33] <beth> didn't you know I'm already busy and stuff?!

[09:44] <buu> hahaha

[09:44] <buu> Yo're welcome.

[09:47] <theorbtwo> beth, autrijus has cleared out many of his paying customers to work on this.  It's kind of addictive.

[09:47] <theorbtwo> Even I'm getting into it.

[09:48] <buu> hrm

[09:48] <buu> I think this is the first time I've seen you on irc.

[09:48] <buu> Well, today and all.

[09:50] <theorbtwo> I tend to lurk on here more then I talk.

[09:52] <buu> I noticed

[09:52] <buu> I see you a lot on the chatter box though

[09:52] <buu> But this is the first time I've really spoken to you

[09:52] <buu> If we can all this speaking

[09:54] <theorbtwo> Heh.

[10:14] <pjcj> Do your lips move as you type?

[10:16] <theorbtwo> Rarely.

[10:17] <theorbtwo> I also often don't get jokes over IRC/AIM/etc that "work" because the punchline sounds like something else.

[11:16] <metaperl> does anyone understand the arguments to the value constructor ApplyArg?

[11:16] <metaperl> in src/Junc.hs

[12:56] <theorbtwo> Hm, hat doesn't like pugs, and it looks like ghc's inbuilt profiling stuff isn't as detailed as I want.

[12:57] <cls_bsd> ok, time to translate synopsis

[13:02] <autrijus_> metaperl: you were looking for me?

[13:03] <metaperl> well, what is the collapse field of ApplyArg used for?

[13:03] <metaperl> data ApplyArg = ApplyArg 

[13:03] <metaperl>     { argName       :: String 

[13:03] <metaperl>     , argValue      :: Val 

[13:03] <metaperl>     , argCollapsed  :: Bool 

[13:03] <metaperl>     } 

[13:03] <metaperl>     deriving (Show, Eq, Ord) 

[13:04] <metaperl> in Junc.hs

[13:04] <cls_bsd> oh, will pugs become perl6? or just a aim to archive?

[13:05] <autrijus_> argCollapsed controls whether that arg avoids junctive autothreading

[13:05] <metaperl> autrijus, that was my question?

[13:05] <autrijus_> if argCollapsed is true, it means it's not a junction, or it was a junction used in a nonautothreading context (typically Bool)

[13:06] <autrijus_> cls_bsd: it is not my place to answer that question :)

[13:06] <autrijus_> if the C-based team came forward with a working compiler before Pugs does, then that will become perl6

[13:06] <autrijus_> if however, by the time we completed the bootstrap, we are the only team around

[13:06] <autrijus_> then there is the possibility that pugs will be the perl 6.

[13:07] <metaperl> and which synopsis covers junctions?

[13:07] <autrijus_> S09?

[13:07] <metaperl> yes it does, thanks

[13:08] <autrijus_> :)

[13:10] <theorbtwo> Allo, Joshua.

[13:13] <Limbic_Region> morning James

[13:14] <Limbic_Region> guess it is early afternoon over there

[13:14] <theorbtwo> Aye; 2.

[13:17] <cls_bsd> hmmm

[13:17] <cls_bsd> so there exists an perl6 contest :p

[13:24] <autrijus_> not really a contest :)

[13:24] <autrijus_> a context, maybe, not a contest

[13:25] <cls_bsd> good point

[13:40] <autrijus_> pugs ported to GHC 6.4.

[13:41] <autrijus_> mmm much faster code.

[13:41] <autrijus_> (but ghc 6.4 had not been really released yet.)

[13:45] <Limbic_Region> buu - you about yet?  Ready and willing to help.

[13:45] <Limbic_Region> evening autrijus_

[13:46] <autrijus_> hi Limbic_Region 

[13:52] <autrijus_> mm BOF finished

[14:30] <autrijus> scw: thanks a lot on implementing pick()

[14:30] <autrijus> I rescinded dump() though; in perl6, dump() is known as perl()

[14:30] <autrijus> and works on all data types

[14:30] <theorbtwo> Nifty!

[14:31] <theorbtwo> Does it produce p6 code, or p5 code?

[14:31] <rgs> ub perl5, dump() is known as CORE::dump()

[14:31] <rgs> s/^ub/in/

[14:32] <autrijus> it produces p6 code.

[14:32] <autrijus> rgs: uh. the context is Data::Dumper::Dump ;:)

[14:47] <Coke_> hey, autrijus.

[14:55] <Limbic_Region> grrr - I hate it when this client flakes as I don't know it has

[14:56] <Limbic_Region> buu - you around?

[15:06] <Juerd> 15:34 < rgs> ub perl5, dump() is known as CORE::dump()

[15:06] <Juerd> Which I think has no place in P6

[15:07] <integral> serialisable continuations otoh...

[15:08] <autrijus> yeah, serialisable continuation is just a fancy term for dump/undump ;)

[15:08] <Juerd> ehh :)

[15:09] <Juerd> I hope the dumps will be a bit fancier than core dumps :)

[15:09] <autrijus> it will be core dumps... it's not jthe C core ;)

[15:09] <theorbtwo> If dump works on all data types, then $?CURRENT_CONTINUATION must be one of those data types.

[15:09] <integral> hmm, it'd be very neat for post-mortem debugging

[15:09] <Juerd> theorbtwo: Isn't that just $?CONTINUATION?

[15:09] <theorbtwo> Quite possibly.

[15:09] <Juerd> As with $?SUB, which isn't $?CURRENT_SUB (unless I have not been paying attention well enough)

[15:10] * Juerd expects continuation to be abbreviated as cont, as subroutine is sub

[15:10] <theorbtwo> I think it was supposed to have a long name so people weren't tempted to use it friviously.

[15:10] <Juerd> Why not use it much?

[15:11] <autrijus> uh. &?CALLER_CONTINUATION makes sense

[15:11] <autrijus> &?CURRENT_CONTINUATION makes less sense.

[15:11] <Juerd> autrijus: Why not? Serialize it, store it, exit()

[15:11] <autrijus> which dynamic scope is "current"?

[15:11] <autrijus> 4 + &?CURRENT_CONTINUATION + 10;

[15:12] <autrijus> basically continuations only makes sense on dynamic lscope boundaries

[15:12] <autrijus> s/lscope/scope/

[15:12] <Juerd> Oh

[15:12] <integral> it's a bit like a return instruction you can save a copy of to call in another scope

[15:14] <autrijus> yeah. it's just \&return;

[15:14] <autrijus> except more magical

[15:26] <nnunley> Hrm.  Problems with the ext/Kwid tests.  The harness is attempting to run the tests with perl5, rather than perl6

[15:34] <autrijus> yeah.

[15:34] <autrijus> weird, HARNESS_PERL should be set.

[15:37] <malaire> where can I read about &?CURRENT_CONTINUATION ? synopsis, etc..?

[15:38] <PerlJam> malaire: It's a pugism

[15:38] <autrijus> malaire: escape continuation support is I think mentioned by larry informally

[15:39] <autrijus> but not part of synopses

[15:39] <malaire> ok

[15:39] <autrijus> &?CALLER_CONTINUATION is my interpretation on that

[15:39] <autrijus> but it's a pugism, as perl	 said

[15:39] <autrijus> PerlJam, even.

[15:40] <malaire> so, what is it?

[15:40] <autrijus> it is a function that, when invoked, returns on behalf of your caller.

[15:41] <autrijus> you can also pass that function around and, when anywhere, returns on behalf of the original caller.

[15:51] <autrijus> nnunley: Pretty for Value types must be eval-roundtrippable

[15:51] <autrijus> because that is what ".perl" uses

[15:51] <autrijus> I've fixed it

[15:51] <autrijus> r418

[16:01] <nnunley> autrijus:  Didn't realize there was a fixpoint contract there. :)

[16:01] <autrijus> feel free to add it as a comment

[16:01] <autrijus> sorry; I should've write it down myself

[16:01] <autrijus> but journal up; I need to sleep now :)

[16:02] <clkao> autrijus: take a look at svk/win32 before sleep? 

[16:03] <clkao> autrijus: or put the instructions on wiki and i can ask matthewd to do that

[16:23] <ingy> hola

[16:23] <Steve_p> bonjour

[16:23] <ingy> are there any tests for junctions

[16:23] <nnunley> ingy: One in 03operators.t that I know about.  And the borken sendmoremoney.t

[16:35] <ingy> yow!

[16:36] <ingy> my $osnames = any( 'darwin' | 'linux');

[16:36] <ingy> is($?OSNAME, $osnames, "Test \$?OSNAME == $?OSNAME");

[16:36] <ingy> runs 2 test!!

[16:36] <ingy> that is freaky

[16:36] <ingy> surreal

[16:36] <Steve_p> heh

[16:36] <ingy> I'm on darwin

[16:36] <ingy> ones test passes, one fails

[16:37] <ingy> This works fine though:

[16:37] <ingy> my $osnames = any( 'darwin' | 'linux');

[16:37] <ingy> ok($?OSNAME eq $osnames, "Test \$?OSNAME == $?OSNAME");

[16:38] <nnunley> ingy:  Unless you force a binary collapse in the type signature, it will run both branches.

[16:38] <nnunley> Err... boolean.

[16:38] <integral> welcome to the evil world of auto threading.   junctions thread as early as possible

[16:38] <ingy> nnunley: yes, it appears so. but it still blows my mind

[16:39] <ingy> integral: interesting

[16:39] <nnunley> Test::ok used to run each of the junctive branches before I changed its signature from $cond (implicit Any) to Boolean $cond

[16:39] <integral> ingy: yep.  personally I support the other side ;-)

[16:40] <ingy> the cool thing is that the code actually ran and the test harness was fine with the output etc

[16:40] <nnunley> I really, really want junctive narrowing.  But that's because I'd like to use it for non-deterministic solving.

[16:40] <theorbtwo> Junctive narrowing?

[16:40] <ingy> I mean... if they are threads, there could have been interspersed output, no?

[16:40] <nnunley> theorbtwo: Chaining conditions such that I've narrowed a large junction into a much narrower set of states.

[16:41] <theorbtwo> Oh, throw away the false ones, keep the true ones?

[16:41] <nnunley> Right.

[16:42] <ingy> anyway, I got my cute test using junctions working :)

[16:42] <nnunley> ingy++

[16:42] <Limbic_Region> ingy - I had volunteered to help buu with his kwid parser last night with work commencing today - haven't seen him - do you know where his work in progress is?

[16:42] <ingy> and pugs now has $?OSNAME

[16:42] <ingy> Limbic_Region: no

[16:43] <Limbic_Region> ok - to be honest it didn't seem like a fun thing to do anyway

[16:43] <ingy> hehe

[16:43] <ingy> Limbic_Region: kwid parsing or working with buu? ;)

[16:43] <Limbic_Region> little of both

[16:43] <ingy> :)

[16:43] <Limbic_Region> buu and I don't always see eye to eye

[16:44] <ingy> aye and aye

[16:44] <Limbic_Region> but he is writing a custom parser and not going with a grammar/lexer/parser approach

[16:44] <PerlJam> Limbic_Region: Why don't you track down the bug in examples/hanoi.p6 for me :-)

[16:44] <ingy> Limbic_Region: that seems sad

[16:44] <PerlJam> er, the bug is in pugs, the exposition is examples/hanoi.p6

[16:44] <integral> Limbic_Region: would you have used yapp?

[16:45] <Limbic_Region> after having read through the kwid definition - likely

[16:45] <Limbic_Region> that's easy to say without getting your hands dirty though

[16:45] <jaap> hi; I'm having some trouble compiling parrot; specifically, it complains "blib/include/unicode/ucnv.h" is missing, and I do indeed not see anything called blib in the source tree

[16:45] <Limbic_Region> once your knee deep in mud with shrapnel overhead - you do what works even if it means sucking mud 

[16:46] <integral> jaap: you'd probably get an answer out of [email@hidden.address] if you asked there

[16:47] <jaap> integral: thanks.  i s'pose i'll also try the tarball, maybe the CVS happens to be in a non-working state

[16:47] <abstraction> jaap, use latest cvs

[16:47] <Limbic_Region> PerlJam - if there is something I can do in p5 without needed to know/learn Haskell/p6 - let me know

[16:48] <jaap> abstraction: that's I've been doing, got it about 20 minutes ago

[16:48] <Coke_> hurm? what steps did you go through to compile parrot, and what's your OS?

[16:49] <Coke_> (anything in "blib" should be generated, IIRC)

[16:49] <jaap> Linux stein 2.6.8-1-686 #1 Thu Nov 25 04:34:30 UTC 2004 i686 GNU/Linux

[16:49] <jaap> get cvs; then "perl Configure.pl"; then "make"

[16:49] <Coke_> how old is your cvs distro?

[16:49] <PerlJam> Limbic_Region: somehow I think you're in the wrong place if you don't want to know/learn haskell/perl6  ;-)

[16:50] <Limbic_Region> jaap - my recommendation would be to get ICU directly and build that before attempting Parrot

[16:50] <Limbic_Region> Parrot is now mostly smart enough to detect a system ICU and use that

[16:50] <jaap> coke_: updated to the latest debian/testing a few hours ago; claims to be cvs 1.12.9

[16:50] <Coke_> I thought blib was a perl thing, not an ICU thing, lr.

[16:50] <jaap> o wait

[16:50] <jaap> that's obviously not what you're asking

[16:50] <Limbic_Region> PerlJam - didn't say I didn't want to learn - just not offering up my time during paid work hours to do it

[16:50] <Coke_> (just make sure if you did an update, you do a -dP)

[16:53] <Limbic_Region> Coke_ blib from a Parrot sense is a Parrot thing is it not?  That's just where Parrot puts things before linking IIRC - and ICU is one of those things

[16:53] <Limbic_Region> of course, I haven't worked on Parrot since late November

[16:54] <pjcj> has anyone? </troll>

[16:54] <abstraction> what does ICU stand for?

[16:54] <jaap> Limbic_region: i did apt-get icu, it installed fine, i ran configure.pl again, as well as cvs update, it doesnt complain, still get same error on build

[16:54] <jaap> something with unicode, i take it

[16:54] <integral> jaap: wouldn't you want something like icu-dev?

[16:55] <Limbic_Region> jaap - Dan's unicode patch is probably in by now - so I am likely talking out my @$$

[16:55] <theorbtwo> International Components for Unicode

[16:55] <abstraction> his string pathc is in

[16:55] <theorbtwo> http://www-306.ibm.com/software/globalization/icu/index.jsp

[16:55] <abstraction> that sounds painful

[16:56] <Limbic_Region> http://icu.sourceforge.net/

[16:56] <abstraction> more pain

[16:56] <theorbtwo> It is, but it's mostly "somebody needs to do it" sort of things.

[16:56] <integral> haven't read anything about the icu dep being dropped though

[16:56] <abstraction> better now than later...

[16:56] <Limbic_Region> well, the plan was not to drop it from CVS but to make it completely optional when building

[16:56] <jaap> integral: i do, indeed; it's called icu-data; i installed it; doesnt help; thanks though

[16:57] <theorbtwo> icu-data includes the shared library?

[16:57] <Limbic_Region> Dan originally said Parrot will ship with the ability to do Unicode - period.  The installer can choose not to if they want

[16:57] <jaap> it seems like it wants a header file that has to be within the parrot source tree, though, since it says make: *** No rule to make target `blib/include/unicode/ucnv.h', needed by `src/string_primitives.o'.  Stop.

[16:57] <jaap> [weel@stein] /home/weel

[16:57] <Limbic_Region> He has been known to change his mind - and I haven't followed the list since late November either

[16:58] <nnunley> Limbic_Region:  Did they decide to do their own unicode implementation?  Last time I bothered paying attention, that seemed to be the jist of the conversation.

[16:59] <theorbtwo> I think the idea is to avoid unicode more often, and consider it just another encoding.

[16:59] * nnunley nods.

[17:00] <Limbic_Region> nnunley - my understanding was that Dan's big patch was to allow a standard interface for unicode libraries so ANY unicode library that played nice with the interface could be used

[17:00] <nnunley> Good.

[17:00] <Limbic_Region> that ICU was "it" for now, but that we should consider our own

[17:00] <Limbic_Region> and that until an alternative was available, Parrot would ship with ICU source

[17:00] <theorbtwo> ...so if your input is big5, and your output is shift-jis, you may never go through Unicode in the middle.

[17:00] <Limbic_Region> though using it would be optional

[17:01] <Limbic_Region> and that's where I leave the story

[17:01] <theorbtwo> Of course, Larry has said that Unicode is a hard requirement for p6, so a parrot compiled without unicode support may well not be able to run p6, which rather spoils the point.

[17:02] <jaap> the tarball seems to somehow magically not have the same problem, so I think I'll stop bugging you guys ;-)

[17:02] <Limbic_Region> not really theorbtwo

[17:02] <integral> just ignore Larry ;-)

[17:02] <Limbic_Region> if I want the VM for a reason other than p6 where Unicode isn't needed, why should I be forced to use it

[17:02] <Limbic_Region> my point being that I think it is a "good thing" that Parrot and P6 are divorced

[17:03] <PerlJam> indeed

[17:03] <theorbtwo> I agree.

[17:04] <PerlJam> theorbtwo: Were you saying that parrot without unicode spoils the point of parrot-as-perl6-VM ? 

[17:04] <theorbtwo> Yes.

[17:04] <PerlJam> but it's perfectly fine for parrot-as-XXX-vm where XXX is almost anything else :)

[17:04] <theorbtwo> Ja.

[17:06] <theorbtwo> But while parrot is designed to be a general purpose VM, or at least general purpose for highly dynamic languages, the only large project really considering using it is p6.

[17:07] <jaap> I think there's quite some interested from  more academic circles for doing e.g. Scheme in Parrot

[17:07] <theorbtwo> That'd be very nifty.

[17:07] <Limbic_Region> and nothing about what I described as my interpretation of Dan's plan for Parrot/Unicode spoils that

[17:07] <Limbic_Region> the hooks are there - let the installer choose to use/not use them

[17:08] <Limbic_Region> IIRC, nothingmuch was looking at doing Scheme in Parrot as an academic exercise

[17:08] <PerlJam> theorbtwo: So you don't think that efforts to BASIC, PHP, Python, etc. with parrot are important or valid or something?

[17:08] <PerlJam> s/to/to use/

[17:08] <integral> hmm, I thought the python one could be important if it actually ran faster

[17:08] <jaap> well, the thing about Scheme is that it has been implemented about 30 times by now; it is not at all like the major scripting languages that are dominated by 1 or two implementations

[17:09] <jaap> but I'm off to breakfast now; cheers all

[17:10] <theorbtwo> I think that while using it for PHP, Python, etc, have been much discussed, they don't look purticularly like they're going to happen.  BASIC has happened, but only a very old dialect.

[17:11] <Limbic_Region> theorbtwo I think Python will happen if Dan returns to overule Leo - or someone else takes over - there's a pretty smart Python guy working that problem though I can't remember the handle ATM

[17:12] <theorbtwo> Oh!  That's great news.

[17:12] <Steve_p> Sam Ruby?

[17:12] <theorbtwo> "Dan returns"?  He left?

[17:12] <Limbic_Region> theorbtwo - Dan has/had been out of the loop for some time

[17:12] <Limbic_Region> one of the reasons why I stopped following Parrot

[17:12] <Khisanth> Limbic_Region: I always thought we were more likely to get a python on parrot than perl6 on parrot :)

[17:12] <Limbic_Region> Sam Ruby sounds right Steve_p - but it has been several months since I followed the list

[17:13] <theorbtwo> That's horrible news.

[17:13] <PerlJam> yes, it's sam ruby who's working on the snake eating bird.

[17:13] <Limbic_Region> he (Dan) re-emerged for a short time but his rl job sucked him back in

[17:13] <Steve_p> He has his fingers in *many* pies though

[17:13] <theorbtwo> Sam Ruby was working on it last I payed attention.  That was quite a while ago, though.

[17:14] <PerlJam> And rubys is *actively* working on it though.  (at least the last time I looked at #parrot (last week))

[17:14] <theorbtwo> (It always confused me -- Ruby/Python mental discouninuity.)

[17:14] <Limbic_Region> my point being that he was making lots of headway and the stumbling blocks were issues he couldn't get resolved between just him and Leo

[17:15] <Limbic_Region> so I don't think Python on Parrot is a pipe-dream

[17:15] <theorbtwo> Great!

[17:16] <Limbic_Region> I should be able to dive in head deep in the 3 ps in June (we will have closed/moved into the new house) 

[17:16] <Limbic_Region> where the 3 ps are p6, pugs, parrot

[17:17] <PerlJam> Check http://groups-beta.google.com/group/perl.perl6.internals .  There have been messages about python on parrot even today.

[17:17] <PerlJam> Limbic_Region: excellent

[17:19] <PerlJam> Limbic_Region: I'm treating pugs as the perl6 reference implementation and possible bootstrap.  I talked with Pm yesterday and it appears that he's working more on PGE, so it's a race to see who implements the better bootstrap first :-)

[17:19] <Limbic_Region> for now, I am working a full-time job, part-time job, in the process of buying a house, closely following his wife's paperwork to become permanent resident/citizen, and also making things happen so she can drive

[17:20] <Steve_p> Yes, I thought the majority of Python had been implemented already

[17:20] * PerlJam DCCs some luck and congratulations and general warm fuzzies to Limbic_Region 

[17:20] <Limbic_Region> PerlJam - forgetting long term benefits, pugs has some very real tangible RIGHT-NOW benefits

[17:20] <Limbic_Region> it is getting the community excited about p6, it is getting other communities interested

[17:20] <PerlJam> Limbic_Region: indeed.  I can't tell you the thrill I get from writing and *running* actual perl6 code :)

[17:21] <Limbic_Region> it is helping iron out the synopsises where things aren't exactly clear

[17:21] <Limbic_Region> it is letting people start seeing real-world working p6 code

[17:21] <Limbic_Region> if it ends up not being the p6 bootstrap of choice - I think no one would be overly disapointed

[17:22] <theorbtwo> I think pugs can be not just a reference implementation or a bootstrap, but the real thing.

[17:22] <PerlJam> I really think that pugs will make a better bootstrap too.  PGE is focused on the "rules" syntax, pugs is focused on basically everything else.  As soon as you add rules to pugs, you've got a perl6 suitable for implementing perl6.

[17:22] <PerlJam> theorbtwo: I don't think so. 

[17:22] <Limbic_Region> to me it doesn't matter - honestly - when is friendly competition not a good thing?

[17:22] <PerlJam> yep!

[17:23] <PerlJam> theorbtwo: ghc is not as widely ported as it would need to be for pugs to be the real thing.

[17:23] <theorbtwo> I think the best path is to do a straight port of pugs from haskell to p6.

[17:24] <theorbtwo> ...but perhaps I simply don't understand Hasell well enough to know why this is impossible.

[17:24] <Steve_p> Hmmm...Haskell on Parrot?

[17:24] <PerlJam> theorbtwo: it's not impossible, just highly unlikely  :)

[17:25] <integral> easier to port STG to parrot?

[17:25] <theorbtwo> STG?

[17:25] <integral> spineless tagless G-machine, GHC's virtual machine

[17:25] <theorbtwo> Ah.

[17:25] <PerlJam> integral: now *there's* an idea that has some potential

[17:26] * Limbic_Region notes the time and realizes he hasn't eaten yet

[17:26] * Limbic_Region wanders off

[17:26] <integral> possibly not hard either.   Just write a PMC for the G-machine closure, and GHC already does most of the rest

[17:27] <Steve_p> Exactly.  Let the G-Machine generate the bytecode or imcc.  Very intoxicating :)

[17:27] <theorbtwo> Virtual virtual machines...

[17:28] <Steve_p> heh

[17:28] <theorbtwo> Now run the whole thing inside of qemu, running inside of vmware!

[17:58] <Limbic_Region> Virtual virtual machines - reminicent of "The 13th Floor"

[17:58] <Limbic_Region> http://www.imdb.com/title/tt0139809/

[17:58] <nnunley> The fix-point virtual machine...

[17:59] <nnunley> Turtles all the way down.

[18:07] <Limbic_Region> perlbot karma for autrijus

[18:07] <perlbot> Karma for autrijus: 1

[18:08] <Limbic_Region> heh

[18:08] <rjbs> perlbot: autrijus++

[18:11] <Limbic_Region> no need for perlbot

[18:11] <Limbic_Region> just autrijus   works fine

[18:11] <Limbic_Region> except my client eats plus symbols

[18:12] <pjcj> autrijus += 2pi

[18:13] <theorbtwo> perlbot, journal is http://use.perl.org/~autrijus/journal/

[18:13] <perlbot> added journal to the database

[18:13] <theorbtwo> perlbot, journal?

[18:13] <perlbot> http://use.perl.org/~autrijus/journal/

[18:15] <theorbtwo> When did we get a perlbot?

[18:16] <Limbic_Region> the other day

[18:16] <Limbic_Region> I asked why purl wasn't here

[18:16] <Limbic_Region> the response was that it wasn't easy to get purl to join another network

[18:17] <Limbic_Region> buu (in #perl) asked Chris62vw to invite perlbot here

[18:17] <Limbic_Region> perlbot forget journal

[18:17] <perlbot> removed journal from the database

[18:18] <Limbic_Region> perlbot learn autrijus journal as http://use.perl.org/~autrijus/journal/

[18:18] <perlbot> added autrijus journal to the database

[18:18] <Limbic_Region> hmmm - should that have been possesive?

[18:21] <jdv79> maybe the reason i haven't been here yet is because parrot has my attention more than p6 lately

[18:22] <nnunley> perlbot learn pugs revisions log as http://rt.openfoundry.org/Foundry/Project/Source/index.html/pugs/log/

[18:22] <perlbot> added pugs revisions log to the database

[18:23] <Limbic_Region> for those who don't know, perlbot was written by Chris62vw whose database spans all channels it is connected to (which currently also includes #perl)

[18:24] <Limbic_Region> perlbot help

[18:24] <perlbot> Syntax: (fact) :: tell (who) about (what) :: (who) > (what) :: learn (what) as (info) :: relearn (fact) as (info) :: facts (search term) :: shorten (url) :: shorten it :: search (module) :: docs (module) :: perldoc -f (function) :: math :: fortune :: flip :: host (type) (record) :: rot13 :: roll (die) :: tempconv (temp) :: scramble (text) :: 8ball :: slap :: diss :: what time is it :: highest karma  :: lowest karma

[18:25] <Limbic_Region> perlbot .ca

[18:25] <perlbot> .ca is Canada

[18:26] <Limbic_Region> 8ball will pugs beat pge as the p6 bootstrapper?

[18:26] <Limbic_Region> perlbot 8ball will pugs beat pge as the p6 bootstrapper?

[18:26] <perlbot> Magic 8ball says: Yes

[18:26] <theorbtwo> roll 10d3.14159

[18:27] <Limbic_Region> you need to say perlbot

[18:27] <theorbtwo> perlbot roll 10d3.14159

[18:27] <Limbic_Region> when all else fails - ask Chris62vw in #perl

[18:27] <Khisanth> or

[18:28] <Khisanth> perlbot: source

[18:28] <perlbot> check out my insides: http://chrisangell.com/incoming/chrisbot/v3

[18:28] <Khisanth> :P

[18:31] <jdv79> haha, how did buu get into that article:  http://www.perl.com/cs/user/print/a/908

[18:33] <theorbtwo> Hm, I don't like the lack of prefix on chromatic's lines.

[18:33] <jdv79> it is written by him...

[18:33] <jdv79> his name's at the top

[18:34] <nnunley> Hrm.  So, is grammar ~= module ?  Other than stating that it's creating a grammatical module?

[18:35] <jdv79> "but thing quickly went out of control" - best quote so far

[18:37] <Khisanth> jdv79: because the whole interview thing was done in here

[18:38] <theorbtwo> There was some side stuff that chromatic clipped.

[18:38] <theorbtwo> But it's a useful question.

[18:38] <jdv79> oh wow, i missed a good time!

[18:39] <theorbtwo> I only read it via the archive.

[18:47] <Limbic_Region> Apparently, M$ does Perl - http://www.microsoft.com/technet/scriptcenter/scripts/perl/default.mspx

[18:52] <Limbic_Region> is there a way to browse pugs test suite on-line?

[18:56] <theorbtwo> I wonder... is it possible to make the parsec bit automagically create examples?

[18:56] <stevan> Limbic_Region: http://svn.perl.org/perl6/pugs/trunk/t/

[18:56] <Limbic_Region> thanks stevan

[18:56] <stevan> Limbic_Region: your welcome 

[18:57] <rjbs> Limbic_Region: haha. hungarian notation in Perl

[18:58] <Limbic_Region> there have been some interesting problems in p5 at the Monastery recently - I was thinking about writing p6 solutions and seeing if Pugs was up to the challenge yet

[18:58] <jdv79> like what?

[18:58] <stevan> Limbic_Region: remember that Pugs does not have classes yet, or multi-dimensional arrays (they all flatten)

[18:59] <stevan> AFAIK, pairs are the old nested data structure possible at the moment

[18:59] <Limbic_Region> no need for classes, but complex data structures would be a "good thing"

[18:59] <stevan> Limbic_Region: you can always write an example and eventually it will run :)

[19:00] <stevan> hanoi.p6 does not run yet 

[19:00] <Limbic_Region> that's the point stevan

[19:00] <stevan> Limbic_Region: go for it them

[19:00] <stevan> s/them/then/

[19:41] <metaperl_> can anyone get this junction example to work? http://nomorepasting.com/paste.php?pasteID=33301

[19:43] <PerlJam> Perl5's ?: operator is now spelled  ?? ::

[19:44] <PerlJam> And I think you need the parens on the call to any

[19:44] <metaperl_> PerlJam, thanks

[19:44] <PerlJam> oh, and you'll need to my @color, otherwise pugs will complain

[19:47] <metaperl_> PerlJam, the working example is committed as rev 422

[19:47] <metaperl_> in pugs/examples/junctions/1.p6

[19:48] <PerlJam> cool.

[19:48] <PerlJam> More "real world" examples of junctions are needed however.

[19:49] <metaperl_> yes, I am moving slowly but surely

[19:49] <metaperl_> I want to present at our perl mongers meeting on junctions next wednesday

[19:49] <metaperl_> how do you read from STDIN in pugs?

[19:50] <metaperl_> my $x = <STDIN>; # assigns the string STDIN to $x

[19:54] <integral> =$*IN

[19:54] <theorbtwo> Is that working now?

[19:54] <integral> somewhat

[19:55] <integral> pugs -e'say =$*IN' behaves strangely

[19:55] <stevan> reading and writing of files is working

[19:55] <stevan> t/op/io.t 

[19:56] <theorbtwo> Great!

[19:56] <stevan> actually I take that back, the readline support is not all there yet

[19:57] <stevan> but creating, writing and appending files is

[19:59] <stevan> metaperl_: I usually check Prim.hs to see what is working and what is not

[20:00] <stevan> metaperl_: line 169 is the unary '=' and autrijus has a big block commented out there

[20:00] <metaperl_> oh ok

[20:02] <metaperl_> should this work?

[20:02] <metaperl_> my $x = $*IN; 

[20:02] <metaperl_>  

[20:02] <metaperl_> print $x; 

[20:02] <metaperl_> the print is failing not the reading from STDIN

[20:03] <stevan> try say() instead of print()

[20:03] <metaperl_> my $x = $*IN; 

[20:03] <metaperl_>  

[20:03] <metaperl_> say $x; 

[20:03] <metaperl_> fails

[20:03] <metaperl_> Fail: <stdin>: hPutStr: illegal operation (handle is not open for writing)

[20:03] <PerlJam> As it should.

[20:03] <stevan> yeah I am getting the same thing

[20:03] <metaperl_> perhaps I need to specify where to write it

[20:04] <Coke_> it looks like you're trying to print something to STDIN...

[20:04] <PerlJam> you need to use unary = to actually read from stdin

[20:04] <metaperl_> unary =

[20:04] <metaperl_> meaning what?

[20:04] <PerlJam> my $x = =<$*IN>;

[20:04] <Coke_> (wow, that's ugly =-)

[20:04] <metaperl_> holy god jesus christ

[20:04] <theorbtwo> Umm, both = and <...>?

[20:04] <metaperl_> i know, for such a common thing

[20:04] <PerlJam> well, I'm not sure about the <>

[20:04] <theorbtwo> I thought it was my $x = =$*IN

[20:05] <theorbtwo> ...which also looks like shut.

[20:05] <PerlJam> I know that =<> is the replacement for magic <> as in perl5

[20:05] <theorbtwo> shit.

[20:05] <stevan> I think <...> stuff is not valid perl6

[20:05] <sorje> Oh bummer, hyper ops aren't implemented yet

[20:05] <PerlJam> (this week)

[20:05] <theorbtwo> Er, s/s..t/junk/.

[20:05] <stevan> although I can't remember where I saw that

[20:05] <Khisanth> EWW I hope that isn't the only way, the double = looks rather ugly :p

[20:06] <PerlJam> anyway $*IN.readline or somesuch should work too (once we get objects in pugs)

[20:06] <theorbtwo> That looks /much/ better.

[20:06] <PerlJam> Khisanth: you should know by now that there is no such thing as "the only way" in perl :)

[20:06] <theorbtwo> Though .rl would be nice.

[20:06] <stevan> PerlJam: that should work pre-object actually

[20:06] <Limbic_Region> well, once objects...

[20:06] <PerlJam> stevan: Are you sure?

[20:06] <Khisanth> PerlJam: true for most things but ...

[20:06] <stevan> PerlJam: the filehandle works as the invocant

[20:06] <Limbic_Region> yeah - you can do fh.method once that's implmented it will look cleaner

[20:07] <stevan> $*IN.readline == readline($*IN)

[20:07] <stevan> AFAIK that is

[20:07] <PerlJam> stevan: yeah, yeah, you're right.  But is it implemented? 

[20:07] <stevan> t/op/io.t shows it

[20:07] <stevan> PerlJam: readline is currently not complete

[20:08] <stevan> PerlJam: but $fh.print works

[20:09] <stevan> actually readline works for files

[20:09] * stevan wrote t/op/io.t late last night and his memory is failing

[20:10] <stevan> http://svn.perl.org/perl6/pugs/trunk/t/op/io.t

[20:12] <ingy> Larry is so hardcore: http://www.nntp.perl.org/group/perl.perl6.language/19468

[20:12] <metaperl_> how do you chomp your input read from $*IN

[20:15] <theorbtwo> You get in chomped, unless you ask for it unchomped, IIRC.

[20:16] <Steve_p> ingu, so you got your answer ;)

[20:16] <Limbic_Region> and when you print you automatically get "\n" added on unless you ask for it not too, IIRC

[20:18] <ingy> Steve_p: no :(

[20:18] <ingy> there is no support for objects at all yet, right?

[20:18] <ingy> and pugs is a practical project

[20:19] <metaperl_> theorbtwo, can anyone get revision 423? I am typing in something but it apparently is not chomped

[20:19] <ingy> so I'll just have to wing it to accomplish my evil goals

[20:19] <metaperl_> pugs/examples/junctions/2.p6

[20:19] <theorbtwo> Er, no, L~R, that's the difference between say and print.  (Of course, it's not an accident that say is shorter...)

[20:22] <Limbic_Region> theorbtwo - depends on how you parse what I said, I didn't say "use print", I said print - meaning what I was thinking was correct but I wasn't specific enough in what I typed

[20:27] <Limbic_Region> nothinmuch - correct me if I am wrong, but weren't you considered Scheme on Parrot a while back as an academic exercise?

[20:27] <nothingmuch> no

[20:27] <nothingmuch> i don't even know scheme, sadly

[20:27] <nothingmuch> i'm learning lisp from the sicp lectures on line

[20:27] <nothingmuch> they are wonderful

[20:27] <stevan> Limbic_Region: I think Peirs had something to do with that

[20:27] <nothingmuch> very fast paced

[20:28] <nothingmuch> my other limitation is that i don't know parrot

[20:28] <qmole> heh

[20:28] <nothingmuch> and my third one is that i have time for neither =)

[20:28] <nothingmuch> so,

[20:28] <nothingmuch> L~R->correct

[20:28] <Limbic_Region> hmmm - I know it was a monk, but don't remember which one - fairly certain the monk I am thinking of wasn't Piers

[20:28] <nothingmuch> stevan - remember the patch from yesterday?

[20:29] <stevan> nothingmuch: the Test::Mockobject

[20:29] <nothingmuch> yup

[20:29] <nothingmuch> i glued Test::Deep to it

[20:29] <stevan> ??

[20:29] <nothingmuch> for argument verification

[20:29] <stevan> Test::Deep rules :)

[20:29] <nothingmuch> (Test::MockObject also records arguments, so now you can declare them as part of the script and verify that)

[20:29] <nothingmuch> it so does

[20:29] <nothingmuch> especially for this

[20:30] <nothingmuch> superset of is 100% correct

[20:30] <nothingmuch> anywho

[20:31] <nothingmuch> i can't decide on a reasonable way to make it optional, but unambiguous

[20:31] <nothingmuch> right now, if you remember, steps in the script are like [ set_true => "foo" ]

[20:32] <stevan> nothingmuch: the only way I can see to make it optional is to implement the validation yourself

[20:32] <nothingmuch> i mean interface wise

[20:32] <stevan> nothingmuch: or leave it out all together 

[20:32] <nothingmuch> i did all the logic

[20:32] <nothingmuch> right now if the last element of that array is an array ref, or a bless object whose class =~ /^Test::Deep

[20:33] <nothingmuch> then it is assumed it's an argument list

[20:33] <nothingmuch> at that point it tries to require Test::Deep and dies violently if you don't have it

[20:33] <nothingmuch> but if you don't want to validate args, it's not required

[20:33] <stevan> nothingmuch: wait I am not sure I am understanding you

[20:33] <stevan> nothingmuch: can I see the updated patch?

[20:34] <nothingmuch> my problem is what do i do when someone says something like [ set_always => "blah", [ ] ]; when they want blah to return an array ref?

[20:34] <nothingmuch> sure

[20:34] <nothingmuch> unified diff? or should I darcs record?

[20:34] <stevan> unified is fine, I speak diff :)

[20:36] <nothingmuch> ok, the patch is on http://nothingmuch.woobling.org/Test-MockObject

[20:36] <nothingmuch> and it depends on the script patch being applied too

[20:37] <nothingmuch> the test is very self explanatory

[20:37] <nothingmuch> it's the last part of the diff

[20:39] <stevan> nothingmuch: what did chromatic think about adding Test::Deep ?

[20:40] <nothingmuch> i don't know, i just got a reply from him about the original patch

[20:40] <nothingmuch> he is considering whether it's better placed in a subclass or not. With Test::Deep and argument validation, i reckon it is

[20:40] <nothingmuch> even though it's pretty tightly coupled to the internals

[20:41] <nothingmuch> without it, I think it's a compact enough change, but it's up to him to decide

[20:41] <stevan> nothingmuch: I think he might have a point actually

[20:41] <stevan> I did something similar to this in DBD::Mock, i called it DBD::Mock::Sessions

[20:41] <stevan> but DBD::Mock is highly aware of DBD::Mock::Session objects, so they are tightly coupled

[20:42] <nothingmuch> i considered it at first

[20:43] <nothingmuch> but i didn't want to release something this small without checking if he wants to integrate it beforehand

[20:43] <nothingmuch> i'll be happy either way

[20:43] <nothingmuch> (although happier if i'm not the maintainer ;-)

[20:43] <stevan> nothingmuch: I actually think you could expand this more :)

[20:43] <nothingmuch> how?

[20:43] <stevan> Test::MockObject::Scripts

[20:43] <nothingmuch> i tend to be spooked out of advanced features

[20:44] <nothingmuch> the optional argument validation param is already starting to feel not right for me

[20:44] <nothingmuch> even though it's a feature I need, the interface needs work

[20:44] <stevan> nothingmuch: the first thought that comes to mind is reading a script from a config file

[20:44] <nothingmuch> complicating it further is not something i think i want to do

[20:44] <nothingmuch> ah, in that case

[20:44] <nothingmuch> just store YAML in your __DATA__ and unserialize that

[20:44] <nothingmuch> a script is an array of array refs, is all

[20:44] <stevan> nothingmuch: yeah something like that

[20:45] <stevan> nothingmuch: I kind of see it as a way to automate Test::MockObject

[20:48] <stevan> r424 just commited, we now have 1003 tests in the suite :P

[20:50] <nothingmuch> sorry, back

[20:51] <stevan> ingy: you still around??

[20:52] <stevan> I have a kwid question 

[20:55] * Limbic_Region wonders how buu got on with his kwid parser

[20:55] <jdv79> he still didn't finish his search.cpan replacement

[20:59] <Limbic_Region> he asked me to help him last night

[20:59] <Limbic_Region> I offered to help today

[20:59] <Limbic_Region> he hasn't pinged me

[21:00] <Limbic_Region> to be honest, I don't think a custom parser is the way to go given the grammar definition - but he asked

[21:01] * stevan kinda likes POD actually

[21:02] * stevan will give KWID a try though

[21:02] <jdv79> yeah, what's wrong with POD?

[21:02] <stevan> jdv79: ask ingy :)

[21:02] <Limbic_Region> blame Ingy

[21:04] <wolverian> POD is not semantic enough.

[21:05] <ingy> hola

[21:05] <jdv79> i don't think it was meant to be

[21:05] <ingy> nothing is wrong with POD

[21:05] <ingy> Kwid is just much nicer

[21:05] <stevan> ingy: whats the status of the kwid parser/converter stuff?

[21:06] <stevan> I was going to document Test.pm, and I figured it best to use kwid (if that is the official PUGS format that is)

[21:06] <ingy> I'm still working on the systems to install it

[21:06] <ingy> stevan: go ahead

[21:06] <ingy> it is easy to convert between the two

[21:07] <ingy> or do it in POD

[21:07] <jdv79> lossy though i guess

[21:07] <stevan> ingy: didnt you and autrijus hack a kwid -> HTML converter?

[21:07] <ingy> not lossy

[21:07] <ingy> stevan: yes, but it doesn't really work yet ;)

[21:08] <ingy> patience perl6 programmer

[21:08] <stevan> ingy: ok, I will just wing it then :)

[21:09] <stevan> ingy: http://rt.openfoundry.org/Foundry/Project/Source/index.html/pugs/revision/?rev=426

[21:10] <ingy> stevan: cool. I think you will really enjoy writing Kwid. I do.

[21:11] <ingy> did you see docs/yaht.kwid?

[21:11] <ingy> jdv79: read lib/Perl6/lib/perlkwid.kwid 

[21:12] <ingy> it is a transcription of perlpod.pod

[21:12] <ingy> as such it really pushes the language

[21:12] <Limbic_Region> . o O ( with little white lies )

[21:12] <ingy> ;)

[21:14] <Limbic_Region> I was going to ask buu if he had many examples to test against but he hasn't shown up - in the off chance I still agree to help him - where should I look for examples ingy?

[21:17] <ingy> Limbic_Region: grep the pugs source for kwid files

[21:17] <metaperl> the YAHT is writtein kwid

[21:17] <metaperl> pugs/docs

[21:17] * metaperl returns to work

[21:17] <metaperl> (which means leaving home, where he is now)

[21:18] * mugwump puts on a cheesy grin

[21:18] <mugwump> "Try my new documentation formatting system.  I think you might like it!"

[21:18] * mugwump drinks a glass of cranberry juice

[21:37] <stevan> ingy: r428 has the Test.pm kwid doc in it, can you tell me if it looks okay?

[21:39] <ingy> sure

[21:39] <jdv79> is he modeling this after his POD parser?

[21:40] <ingy> you mean me?

[21:40] <ingy> :P

[21:40] <jdv79> buu i meant

[21:40] <ingy> ah

[21:40] <jdv79> he wrote a POD parser a few weeks ago

[21:40] <stevan> is he writing it in perl5?

[21:41] <jdv79> the POD one was

[21:42] <ingy> created docs/src/Junc.kwid for metaperl 

[21:42] <ingy> trivial

[21:42] <ingy> but so much nicer to read

[21:43] <metaperl_> I dont want to work in kwid

[21:43] <buu> heh

[21:43] <ingy> why not?

[21:43] <jdv79> yeah

[21:43] <jdv79> is your Kwid parser gona be like the POD one you did?

[21:45] <ingy> stevan: looks ok

[21:45] <metaperl_> jdv79, i dont follow your comments about the POD parser... what POD parser are you talking about?

[21:45] <ingy> stevan: the authors section will word wrap though

[21:46] <ingy> gotta run&

[21:46] <metaperl_> ingy, if autrijus says all docs in kwid, then so be it

[21:46] <metaperl_> but we need one format, be it POD, kwid or whatever and then we all use it

[21:46] <jdv79> buu wrote a POD parser a montth or 2 ago.  now i hear he is gonna buld a kwid parser.  i'm wondering if they are going to be similar.

[21:46] <metaperl_> I like head1 head2 head3 better than = == ===

[21:47] <metaperl_> autrijus is not around today is he? where is he physically these days?

[21:47] <stevan> metaperl: autrijus is sleeping now (i assume)

[21:47] <buu> I return!

[21:47] <metaperl_> is he in Taiwan?

[21:48] <metaperl_> well anyway, I think we need to have a collaborative decision on kwid vs. pod

[21:48] <buu> jdv79: Technically speaking, I didn't really write a parser, I just wrote a wrapper around Pod::Parser

[21:48] <metaperl_> with autrijus' vote being authoritiative

[21:48] <jdv79> buu, punk2

[21:49] <buu> =[

[21:49] <metaperl_> i'm gong to post the RFC on pugs docs to perl6.compiler... ok?

[21:49] <obra> autrijus may still be in the PRC for a conference

[21:50] <clkao> yes he is.

[21:50] <metaperl_> oh, that's why he was in a hotel, etc.

[21:50] <metaperl_> I see

[21:50] <clkao> there's going to be a mini perl lunch today i belive

[21:53] <stevan> metaperl: I agree that POD is not quite enough, but I am not sure of kwid either

[21:54] <mugwump> this is because deep down, something about wikiformat makes your gut wrench :)

[21:55] <stevan> my problem with wiki format is that every wiki seems to do it slightly differntly

[21:55] <stevan> much like every POD parser

[21:55] <buu> stevan: Kwid obviously needs some kind of formatter guidelines.

[21:55] <mugwump> I think that POD should look a bit like Perl

[21:55] <buu> As for Kwid, how would you specify an item / definition list so it would be very easy to parse?

[21:55] <buu> As in, perlfunc, or perlvar

[21:56] <metaperl_> what is wrong with POD?

[21:56] <metaperl_> we all know it, for one

[21:56] <buu> Ask ingy.

[21:56] <buu> I kind of like kwid better, just for formatting text.

[21:56] <stevan> metaperl: it does have it's limits, and depending upon which parser you are using it can be very unforgiving

[21:57] <mugwump> POD fills a gap fine, in that it is deliberately simple and so easy to make work with editors, parse, etc

[21:57] <mugwump> kwid looks like a refinement of POD based on experience on Wikis

[21:57] <theorbtwo> Mmm... I don't much care for kwikd, and like POD much more.

[21:57] <metaperl_> what did the perl6 community decide would be the doc format for perl6?

[21:58] <edgewalker> I don't particularly like kwid

[21:58] <metaperl_> SGML? :)

[21:58] <theorbtwo> I think POD just needs a bit of a cleanup with L<> semantics.

[21:58] <theorbtwo> But I also think it's my bedtime.

[21:58] <edgewalker> what theorbtwo says

[21:58] <stevan> metaperl: I dont think the perl6 community has decided

[21:58] <buu> metaperl_: The perl community rarely decides these things, if you haven't noticed

[21:58] <edgewalker> also, POD needs some cleanup with regards to list markup

[21:58] <metaperl_> POD needs a CPAN tag or something like that (like you were saying about L<>)

[21:58] <mugwump> the perl community is not a sentient being

[21:58] <stevan> metaperl: I think autrijus  and ingy decided

[21:58] <buu> metaperl_: What would cpan do?

[21:59] <mugwump> it is a collective, so you can't talk about what "it" decides :)

[21:59] <buu> stevan: I think ingy made it up and convinced autrijus =]

[21:59] <stevan> buu: I think you are probably right

[21:59] <theorbtwo> I think the perl community should just steal PM's bracket-link code.

[21:59] <buu> theorbtwo: Dude, did you read kwid?

[21:59] <edgewalker> I think the final decision for Perl6-the-Real-Thing is going to be with Larry and crew

[21:59] <stevan> I think we should just all use XML :P

[21:59] <buu> edgewalker: I doubt it. I suspect the final decision will be determined by how many use what.

[21:59] <mugwump> p6l would be the place to discuss I guess

[21:59] <buu> stevan: I was seriously considering it =[

[21:59] <stevan> buu: if only to drive ingy more crazy right?

[22:00] <Coke_> pod is mentioned in one of the apocolypses that it will be treated in APOC 23 or some such, which is no where in site.

[22:00] <metaperl_> I think we should Microsoft Word

[22:00] <buu> stevan: =]

[22:00] <stevan> Wordstar !!!!!

[22:00] <metaperl_> that's my final offer

[22:00] <edgewalker> LyX

[22:00] <metaperl_> Printshop Pro

[22:00] <buu> brainfuck.

[22:00] <stevan> and write the parser in BASIC

[22:00] <Coke_> I find kwid seems to be easier than POD for what I use POD for.

[22:00] <buu> Coke_: That's because you don't have to parse it =[

[22:01] <stevan> I just wrote a kwid doc for the Test.pm module, 

[22:01] <stevan> its not bad, my hands wanted to type POD though

[22:01] <theorbtwo> Everybody should just learn HTML already.  ;)

[22:01] <theorbtwo> Really, bedtime.

[22:01] <buu> theorbtwo: Well, yeah.

[22:01] <rgs> pod with kwid extensions ?

[22:01] <stevan> Javadoc??

[22:01] <rgs> python doc strings.

[22:02] <stevan> I actually think POD could be re-worked and be fine

[22:03] <rgs> iirc that was The Plan

[22:03] <stevan> just clean up the ugly corners

[22:03] <stevan> I once tried to mix XML and POD, but that got really ugly

[22:04] <metaperl_> i have emailed autrijus and asked for a final decision

[22:04] <edgewalker> well, what we really should be using is markdown, but that's another story

[22:04] <stevan> metaperl: this might really be an issue for p6l

[22:04] <buu> edgewalker: Mark down?

[22:04] <edgewalker> buu: google it

[22:04] <stevan> and then again, there is nothing to say PUGS can't support POD and KWID (it currently does)

[22:05] <buu> edgewalker: I'm playing war3 =[

[22:05] <metaperl_> I have used Text::Template to inline Perl code without manually pasting it into pod files.. Most of Parse::RecDescent::FAQ is done by text-template loading things in from outside files

[22:06] <edgewalker> buu: then google it when you're done with war3. it's basically wiki "markup" on steroids, heavily influenced by the formatting of email, and reads as well in plaintext form as it does as HTML

[22:06] <buu> Sounds like kwid.

[22:07] <Coke_> (don't have to parse it) ... so? It should be easy for the person WRITING it, not the person parsing it. =-)

[22:07] <buu> Coke_: Well, yeah, I'm bitter.

[22:07] <edgewalker> buu: except it's about 10x better than kwid

[22:08] <edgewalker> or any other wiki markup for that matter

[22:11] <edgewalker> anyway, the only complaints I have with POD: lists with many short items are awkward; L<> semantics are underspecified; and fixed width text can either have formatting *or* be prewrapped, but not both

[22:11] <edgewalker> other than those I like it better than most wiki markup; incl kwid

[22:13] <edgewalker> markdown is an order of magnitude more readable and writable, but markdown is also complex to parse

[22:13] <edgewalker> of course if Perl6 ships with a really good module for manipulating whatever documentation format is settled on, then the parsing complexity issue is moot

[22:23] <metaperl_> markdown, textile. there are a few out there

[22:28] <edgewalker> textile is really nothing but a sparser way to write HTML

[22:28] * Limbic_Region kicks buu hard

[22:29] <buu> limbic!

[22:29] <Limbic_Region> I asked since 8AM EST for you/about you to help you with your kwid parser

[22:29] <edgewalker> markdown is written with HTML in mind as well, but the markdown markup itself isn't HTML specific

[22:29] <Limbic_Region> and you were no where around

[22:32] <metaperl_> in revision 430, does anyone have time to look at pugs/examples/junctions/3.p6? it isn't working as I expected

[22:36] <buu> Limbic_Region: I was asleep =./

[22:36] <buu> Limbic_Region: Sorry.

[22:45] <Limbic_Region> sleep is a "good thing"

[22:45] <buu> heh

[22:45] <buu> I have odd hours.

[22:45] <Limbic_Region> in any acct, having read more of the spec - I think a proper grammar/lexer/parser is more appropriate

[22:45] <Limbic_Region> but - if you still want to roll your own - I am willing to help

[22:46] <buu> Limbic_Region: Well, I kind of agree about the proper grammar thing, but I have my reservatios about it. Anyways, What I have so far:

[22:47] <jdv79> yaccin' it? 

[22:48] <Limbic_Region> I was thinking yapp

[22:48] <Limbic_Region> but yeah

[22:48] <buu> http://erxz.com/pugdoc.zip

[22:48] <buu> Note t/

[22:48] <jdv79> YAPP!

[22:49] <buu> heh

[22:49] <jdv79> i've only heard of yacc

[22:49] <Limbic_Region> is that link semi-static or should I forward myself a copy to work as well?

[22:49] <jdv79> isn't that your server buu?

[22:49] <buu> It'll be there for a tleast a month

[22:49] <buu> yes

[22:49] <buu> until I forget what it is

[22:49] <buu> and delete it

[22:50] <jdv79> someone has buu.com

[22:50] <jdv79> ugh

[22:50] <buu> YES

[22:50] <Limbic_Region> jdv79 - see Parse::Yapp 

[22:50] <buu> they've fucking had it for like 7 years

[22:50] <buu> and they did fuck all with it

[22:50] <jdv79> i hate that

[22:50] <buu> It used to be this like one page about a health club

[22:50] <jdv79> took me 3 years and almost $500 to get my lastname domain

[22:51] <buu> =[

[22:51] <jdv79> PITA

[22:51] <buu> No wait, that was buu.org

[22:51] <theorbtwo> Somebody bought mastros.com about 3 hours before my father finally decided to buy it.

[22:51] <buu> buu.com is being scalped

[22:51] <buu> They've been wanting like 3 grand for it for 5 years now

[22:51] <jdv79> hahaha

[22:51] <jdv79> i got off cheap

[22:51] <theorbtwo> So he's mastros.biz, and printed off all sorts of busniess cards, stationary, etc.

[22:51] <buu> heh

[22:52] <buu> Reasonable

[22:52] <theorbtwo> ...and of course, mastros.com becomes available again a year later.

[22:52] <buu> Your tale is one of woe and tragedy

[22:53] <theorbtwo> Actually, my tale is one of "eh, whatever".

[22:53] <buu> Limbic_Region: If you really care I can set up a svn server

[22:55] <Limbic_Region> no - just will likely do most of any work I contribute during the day and not in the evenings

[22:56] <Limbic_Region> I can't sleep if I am doing programming of any complexity after 7pm

[22:56] <buu> heh

[22:56] <jdv79> Parse::Rec... isn't good Limbic_Region?

[22:56] <buu> Maybe I should consider that

[22:57] <Limbic_Region> jdv79 - there isn't anything wrong with P::RD

[22:57] <Limbic_Region> well, other than it is slow

[22:57] <Limbic_Region> but some grammars are more suited for different kinds of parsers

[22:58] <buu> Limbic_Region: The basic structure of Parser.pm should be fairly obvious

[22:58] <Limbic_Region> yeah - it is a lot cleaner then you lead me to believe

[22:58] <buu> Well, I thought about it for a whilke

[22:58] <buu> My next problem is how to deal with .list. regions

[22:59] <Limbic_Region> well, like I said - not going to play with it until tomorrow

[23:00] <buu> Eh, well, ok

[23:00] <Limbic_Region> one thing I would like to do if possible is determine which regex to apply and apply it in only two steps

[23:00] <jdv79> is it really worth rolling it like that?

[23:00] <buu> Yes!

[23:00] <Limbic_Region> a la dispatch table - instead of for looping over all of them

[23:01] <buu> Limbic_Region: Er, how?

[23:01] <Limbic_Region> well - you need to join all those regexes together with capturing parens

[23:01] <buu> hrm

[23:01] <Limbic_Region> and then use whatever is captured as the key

[23:01] <Limbic_Region> but the trouble is it isn't fixed key still

[23:01] <buu> I have to go do an errand, I'll be back in 10.

[23:02] * Limbic_Region won't

[23:02] <Limbic_Region> oh - 10 minutes

[23:02] <Limbic_Region> not 10pm

[23:04] <Limbic_Region> The dispatch table is still a possibility but probably shouldn't try and pursue it until more of the grammar is covered since it might not fit in as easily

[23:05] <buu> Limbic_Region: Yeah. Maybe.

[23:06] <buu> I see what you're getting at, but I'm not sure it's worth it.

[23:06] <buu> Anyways, dropping sister off, we shall discuss in a bit.

[23:26] *** edgewalk1r is now known as edgewalker

[23:42] * Limbic_Region notes that he will give buu another 15 minutes before wandering off himself

[23:48] <Limbic_Region> http://www.perlmonks.org/index.pl?node_id=431364

[23:48] <Limbic_Region> for instance

[23:49] <Limbic_Region> grrr - wrong channel - sorry

[23:59] * Limbic_Region wanders off

