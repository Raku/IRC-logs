[00:03] *** elmex_ is now known as induktivgehaerte

[00:17] <Darren_D1ncan> ping autrijus

[00:17] <Darren_D1ncan> wtf

[00:18] <Darren_D1ncan> re this irc thing

[00:19] <autrijus> huh.

[00:22] <Darren_Duncan> autrijus, I was trying to figure out why I kept getting messages saying you changed the topic

[00:22] <Darren_Duncan> but also, my nick inexplicably changed for the second time

[00:22] <autrijus> something is not right with your irc client

[00:23] <Darren_Duncan> the former doesn't appear on the web log, so it may be something at my end

[00:23] <Darren_Duncan> a few minutes ago there was a brief dns name server outage, which may be related

[00:25] <Darren_Duncan> besides that, I have no idea ... my client has behaved well for as long as I've had it

[00:31] <QtPlatypus> ?eval "a" ~~ /a+/

[00:31] <evalbot6> pugs: src/events.c:270: init_events_first: Assertion `rc == 0' failed. 

[00:40] <QtPlatypus> rule b { \( <-[()]>+  <b>? <-[()]>+  \) }

[00:40] <QtPlatypus> rule b { \( <-[()]>+  <b>? <-[()]>+  \) }

[00:40] <QtPlatypus> Sorry for the double paste

[00:41] <QtPlatypus> Should the above rule recurses infinitly?  And should it cause a bus error?

[00:41] <autrijus> mm left recursion, fun

[00:41] <autrijus> I can see it recurse, but bus error is intolerable

[00:41] <autrijus> report on p6i/p6c?

[00:42] <QtPlatypus> Will do.

[00:43] * QtPlatypus thought that the recursion should be finitie as every step the string as reduced in length by at least 4 chars.

[00:44] <autrijus> more importantly, it will be reduced by one character to the left.

[00:45] <autrijus> two characters, even

[00:45] <autrijus> ( and whatever follows

[00:45] <autrijus> what did you match it to?

[00:46] <autrijus> I tried "(zz)" and it works fine

[00:46] <autrijus> (parrot 0.2.2-release)

[00:47] <autrijus> "(zz(yy)xx)" works too

[00:47] <QtPlatypus> "(a)"

[00:48] <QtPlatypus> I'm using the same release on OSX.

[00:48] <autrijus> it fails correctly for me.

[00:48] <autrijus> fbsd, external parrot

[00:48] <QtPlatypus> Oh I'm using embedded parrot.

[00:48] <autrijus> that may be it. 0.2.2's embparrot pge worked for me on trivial cases

[00:48] <autrijus> but I didn't test it thoroughly at all

[00:48] <QtPlatypus> Lets see what happens when I unembeded it.

[00:48] <autrijus> nod.

[01:12] <QtPlatypus> Also is there a way of actually using want?  It seems to return the context that want is called in, rather then the context that the sub lives in.

[01:44] <autrijus> QtPlatypus: er. right. fixing

[01:45] <autrijus> write a test?

[01:45] <autrijus> or is there one?

[01:45] <autrijus> fixed

[01:48] <autrijus> (r5857)

[01:48] <svnbot6> r5857 | autrijus++ | Changed paths:

[01:48] <svnbot6> r5857 | autrijus++ | * &want should return the context of its caller, not of itself.

[01:48] <svnbot6> r5857 | autrijus++ |   This is likely a regression in 6.2.8; reported by QtPlatypus.

[05:11] <brentdax> ...odd.

[05:11] <brentdax> Oh, colon is a regex metacharacter now, duh.

[05:27] <Khisanth> yes it is

[05:27] <Khisanth> :: is much nicer than (?>) :)

[05:28] <brentdax> Quite so.  I just couldn't quite figure out why I was getting "can't parse" errors...

[05:29] <Khisanth> heh

[05:30] <Khisanth> I just realized the other day what [a..b] meant :)

[05:38] * Khisanth crosses fingers and hopes pugs will be built when he wakes up

[05:40] <putter> A question for later:  are adverbs allowed before a parenthesized arg list, or only within and after?  eg, sub foo(+$x){}  foo:x(3)(); ?

[05:41] <putter> thanks.

[05:41] <putter> g'night &

[05:41] <Khisanth> hmm don't the adverbs for s/// and m// basically come before?

[05:43] <brentdax> Yeah, but that's only possible because ( is banned as a starthing character for a regex.  I think it would be too ambiguous.

[05:43] <brentdax> *starting

[05:44] <Khisanth> heh m(())

[07:14] <GeJ> Hello all.

[07:15] <GeJ> I've been following the P6, Pugs and Parrot growth from the distance, and I must say that everytime I read the summarizers' mails, I get a huge headache.

[07:16] <coral> summarizers mails?

[07:16] <GeJ> Piers Cawley and Matt Fowles (I think), the weekly emails...

[07:16] <coral> oh, pdc is still doing that. cheers to him for it.

[07:17] <pdcawley> Why thank you.

[07:17] <coral> whoah

[07:17] <coral> speak and ye shall be praised

[07:17] <coral> where do i sign up for those emails incidentally

[07:17] <pdcawley> [email@hidden.address] is the mailing list, can't remember the subscribe incantation.]

[07:18] <coral> erk

[07:18] <pdcawley> But it's mailman...

[07:18] <coral> how about pugs

[07:18] <pdcawley> That gets the pugs announcements too.

[07:18] <coral> heavy traffic?

[07:18] <pdcawley> Nah.

[07:18] <GeJ> I couldn't agree more. The summarizers' job is awesome. It makes me think I can understand everthing... until I follow the links to the google groups... and then, the headaches come back.

[07:18] <pdcawley> Unless Autrijus is on *fire*

[07:19] <coral> which he always is

[07:19] <pdcawley> There's also parrot release announcements, but they're monthly.

[07:19] <pdcawley> Pugs releases are more frequent, but not insanely so.

[07:20] <svnbot6> r5858 | chromatic++ | Changed paths:

[07:20] <svnbot6> r5858 | chromatic++ | Added spaces to all escaped output in Test::Builder::Output.

[07:20] <svnbot6> r5858 | chromatic++ | Pass test numbers to new tests in Test::Builder::Test (oops).

[07:20] <svnbot6> r5858 | chromatic++ | Create tests properly in Test::Builder.

[07:20] <svnbot6> r5858 | chromatic++ | Added diag() to Test::Builder until "handles" works.

[07:20] <svnbot6> r5858 | chromatic++ | Fixed diag() documentation in Test::Builder.

[07:20] <GeJ> I guess I lack some knowledge on the "concepts" raised in the discussions. (the first ones that come to mind are MMD, Monads, Junctions, and so many others...)

[07:20] <svnbot6> r5858 | chromatic++ | Minor cosmetic fixes to t/010_Test_Builder.t.

[07:22] <GeJ> Would you have any hint/advice for me to find more on these? Maybe somewhere in the svn repository is there already some doc about all these?

[07:22] <coral> those sound like haskell terms

[07:22] <coral> i have some links on that

[07:23] <pdcawley> I don't know what a monad is frankly....

[07:23] <coral> http://www.cs.uu.nl/~afie/haskell/tourofsyntax.html http://www.cs.uu.nl/~afie/haskell/tourofprelude.html#map

[07:23] <coral> those are all i have

[07:23] <coral> um

[07:23] <coral> someone else who's more active here should have better links than i do for your questions

[07:23] <coral> autrijus: ping

[07:24] <coral> the pugs kwiki (see topic url) should be of great assistance to you actually, probably lots of good starting stuff there

[07:24] <GeJ> good, good... I'm going to have a look at it. thanks a lot. 

[07:24] <coral> nod

[07:24] <coral> try again at another time of day

[07:25] <coral> the participation here fluctuates wildly

[07:25] <GeJ> And I think it's true what they say : "There's only one thing better than having one autrijus on the project, it's having two autrijuses on the project."

[07:25] <coral> yes

[07:25] <brentdax> Anybody know why Pugs's error messages appear in my server's error log with one character per line?

[07:25] <coral> heh!

[07:26] <coral> "my server's"?

[07:26] <brentdax> Well, Apache, running on my laptop.

[07:26] <coral> pugs cgi or mod_pugs?

[07:26] <brentdax> Pugs CGI.

[07:27] <brentdax> A mod_pugs supervisor will make a great project *after* September 1.  ;^)

[07:28] <brentdax> (where a supervisor is the chunk of code that interfaces with the web server's API, and September 1 is the due date for Summer of Code projects.)

[07:30] <coral> heh

[07:30] <svnbot6> r5859 | chromatic++ | Changed paths:

[07:30] <svnbot6> r5859 | chromatic++ | Bumped up version numbers.

[07:30] <svnbot6> r5859 | chromatic++ | Added Test::Builder::Tester and t/050_Test_Builder_Tester.t.

[10:07] <nothingmuch> wmorning

[10:33] * castaway tickles nothingmuch 

[10:40] <masak> nothingmuch is apparently not very ticklish

[10:41] <nothingmuch> actually I am, i'm just not seeing anything

[10:41] * nothingmuch gets tickled retroactively

[10:41] <nothingmuch> (irssi's display broke - everything was black)

[10:43] <castaway> ,)

[10:45] <kgftr|konobi> http://use.perl.org/~sri/journal/25919 - intresting read

[10:46] <nothingmuch> que konobi?

[10:48] <castaway> not particularly interesting..

[10:48] <nothingmuch> oops, thread got deleted

[10:50] <castaway> thread deleted?

[10:50] <nothingmuch> the link didn't show anything

[10:50] <nothingmuch> in the archives

[10:50] <nothingmuch> or maybe it just didn't load right?

[10:50] <nothingmuch> hmmm.....

[10:52] <castaway> maybe, should be in my inbox somewhere tho.. 

[10:54] <nothingmuch> yeah, mine too

[10:55] * castaway giggles insanely at [email@hidden.address] (messageid)

[11:12] <castaway> hmm, odd, I cant find those msgs either.. is cdbi moderated?

[11:19] <QtPlatypus> Is there some way to get the equiverlent of $/.keys ?

[13:29] <nothingmuch> i think perl 6 is really starting to need a higher order "Type" type

[13:29] <nothingmuch> that can express relationshipts

[13:29] <nothingmuch> (x of OtherType)

[13:29] <nothingmuch> containment (a special case of 'of')

[13:29] <nothingmuch> reference

[13:29] <nothingmuch> delegation

[13:29] <nothingmuch> and so on and so forth

[13:30] <nothingmuch> we are trying to fit a type system with N dimentions which are completely orthogonal into a flat namespace

[13:30] <nothingmuch> and it's just not working

[13:30] <nothingmuch> haskell's type parametarization is closer to what we need, but still not good enough since we have more than one type of containment

[13:31] <nothingmuch> and also touples suck in haskell.

[13:31] <nothingmuch> (The type declaration, that is... there is an infinite amount of touple types, (a,a), (a,a,a) ... (a, ..., a)

[13:31] <integral> "tuple"

[13:33] <spinclad> [a]

[13:34] <spinclad> a => [a]

[13:34] <integral> I suppose this is relevant for arrows, where there's standard things to combine two into (a (b,c) (d,e)), but not three into (a (b,c,d) (e,f,g)), you have to cope with (b,(c,d))

[13:37] <spinclad> haskell makes a:[a] easy (shift/unshift) but not [a]:a (push/pop)

[13:38] <spinclad> and nm, i think i've heard you complain of not knowing a way to declare [Any], as it were.

[13:42] <spinclad> i certainly agree with perl6 needing more type algebra.

[13:53] <nothingmuch> integral: oops... =)

[13:53] <nothingmuch> spelling is not my strong side

[13:54] <nothingmuch> spinclad: think of lists as streams coming out of nowhere

[13:54] <nothingmuch> e.g. - don't try doing push/pop unless you absolutely really need it

[13:54] <nothingmuch> and then you can use map instead

[13:54] * nothingmuch has to go

[14:04] * nothingmuch returns

[14:06] <nothingmuch> spinclad: well, i gues i could implement my own type class Any

[14:06] <nothingmuch> and make a dummy function

[14:07] <nothingmuch> something like 'id' or somesuch

[14:07] <nothingmuch> and then just implement it for the types i'm interested in

[14:07] <nothingmuch> maybe I can even glue 'deriving' into that

[14:07] <nothingmuch> but i don't really want Any in haskell, that subverts many things

[14:07] <nothingmuch> i would like union types, and I'm not sure you can get them

[15:21] <obra> seen fglock

[15:21] <jabbot> obra: fglock was seen 12 days 22 hours 48 minutes 59 seconds ago

[15:47] *** Aankh|Clone is now known as Aankhen``

[16:08] * nothingmuch feels like kicking something

[16:08] <geoffb> why?

[16:09] <nothingmuch> annoying quaterly meeting

[16:09] <nothingmuch> i misunderstood an email

[16:10] <nothingmuch> (i want to get an ipod shuffle for someone's birthday present, with an itatu thing, but getting them to print one includes a $150 initial setup fee)

[16:10] <geoffb> bleah

[16:11] <nothingmuch> i also feel crappy

[16:11] <nothingmuch> since I forgot my cream at home, and my face is about to burst

[16:11] <nothingmuch> dermatitis is annoying

[16:11] * nothingmuch can't blink properly

[16:11] <nothingmuch> i think I want to buy a boxing back for work... this should resolve some issues.

[16:11] <geoffb> that sounds nasty

[16:12] <nothingmuch> oh - there's also a major annoyance with grep on cygwin WRT dos/unix line endings

[16:12] <geoffb> "Cygwin: Close, But No Cigar."

[16:12] <geoffb> replace gnu grep with perl grep

[16:12] <nothingmuch> i wish

[16:13] <nothingmuch> i want to rewrite our whole test system in perl

[16:13] <nothingmuch> we have such a wad of crap right now

[16:13] <geoffb> so why don't you?

[16:13] <nothingmuch> people are taking result tables out of human-optimized tools

[16:13] <nothingmuch> they are fudging the output to remove english sentances so that only data is left

[16:13] <geoffb> Oh god, the dreaded "I keep all that in an Excel spreadsheet" syndrome?

[16:13] <nothingmuch> then they make a 4 line pipeline with grep, awk, sed, cut, etc

[16:13] <nothingmuch> and then they compare the resulting text files to a defacto result file with diff

[16:14] <geoffb> oh dear.

[16:14] <nothingmuch> instead of just having a real perl table, and using Test::Deep

[16:14] <geoffb> That's . . . awful, but sadly normal

[16:14] <nothingmuch> the only problem is that the QA department is doing too omuch fire fighting at the moment to even think of big changes

[16:14] <nothingmuch> and so although everyone wants a big change to make life better, no one can commit to making the effort needed for it

[16:15] <nothingmuch> and since I'm the guy who has to make things work, i need to get this fixed

[16:15] <nothingmuch> a.s.a.p, too

[16:16] <geoffb> Well, that leaves two choices (aside from drastic measures like quitting): deal with suckage, or JFDI.  In my career, I've chosen both options many times.  They both suck.

[16:17] <geoffb> But "better to ask forgiveness than permission" seems to stand me in good stead.

[16:21] <svnbot6> r5860 | Stevan++ | Changed paths:

[16:21] <svnbot6> r5860 | Stevan++ | Perl6::MetaModel (p5)

[16:21] <svnbot6> r5860 | Stevan++ | * added private methods (currently using '_' instead of ':' as a marker)

[16:21] <svnbot6> r5860 | Stevan++ |     - added test file for this

[16:21] <svnbot6> r5860 | Stevan++ | * moved the last of the private methods of MetaClass into it's MetaClass instance

[16:21] <svnbot6> r5860 | Stevan++ |   so now only new() and add_method() are needed to bootstrap :) 

[16:22] <geoffb> OK, I've been away from the source tree for a couple weeks -- is there a status document now, other than Autrijus' journal?

[16:24] * nothingmuch goes home

[16:24] <nothingmuch> geoffb: this is not a big issue for me

[16:24] <nothingmuch> i don't need to quit

[16:24] <nothingmuch> it's just a single event

[16:24] <nothingmuch> most of my work is fun

[16:24] <nothingmuch> i just complain about the bad parts =)

[16:24] <nothingmuch> anyway, adios, i'm getting picked up

[16:40] <svnbot6> r5861 | geoffb++ | Changed paths:

[16:40] <svnbot6> r5861 | geoffb++ | docs/notes/plan: minor spacing and typo cleanups; also no longer state that JS backend is unstarted and less important

[16:40] <svnbot6> r5862 | geoffb++ | Changed paths:

[16:40] <svnbot6> r5862 | geoffb++ | READTHEM: point out partial KWID transcription of YAHT

[16:40] <geoffb> What is this "Changed paths:" crap?

[16:40] <putter> geoffb: re status document - no, unfortunately, care to write one? :)

[16:40] * Aankhen`` was wondering too.

[16:40] * putter too

[16:40] <geoffb> Yes, I'd be happy to -- I just didn't want to repeat someone else's work

[16:41] <dudley> I think iblech made svnbot report which files had been changed in a given revision

[16:41] * geoffb is in "doc fix mode" today

[16:41] <geoffb> . . . except it doesn't seem to work

[16:41] <putter> how not?

[16:41] <geoffb> It never shows any files (or at least, I never see such)

[16:42] * putter is confused

[16:42] <geoffb> putter, iblech's Changed paths thing for svnbot6.  I'm saying it's broken, because it does not in fact display the changed files

[16:42] <dudley> geoffb: did you put the filenames in your commit messages?

[16:42] <geoffb> Just the header

[16:42] <putter> ahh

[16:43] <geoffb> dudley, yes, I almost always do (if I forget, that's a bug in my brain)

[16:43] <putter> err, why not just use the svn log...?

[16:43] <dudley> ah, well then yes, it doesn't seem to work.

[16:44] <Aankhen``> I'm taking a look at it.

[16:44] <geoffb> putter, because I'm ircbot-friendly:  This allows people to keep a basic idea of what is changing by reading the backlog

[16:44] <geoffb> (And I got used to it working on projects where you may have a big merge and want to describe what the various parts do.)

[16:45] <geoffb> (checkin buddies)++

[16:45] <geoffb> When you can't have anarchy, check buddies are a close second, and you pretty much have to be good about commit messages if you want that to work

[16:46] <geoffb> Well, work remotely, at least -- I suppose if you can physically sit next to someone, that's even better, but who gets that nowadays?

[16:47] <putter> ok, so svnbot does use the log to get changed paths, and the "Changed paths:" structure in the revision description provides optional annotation?

[16:47] <Aankhen``> Yes.

[16:47] <putter> :)

[16:47] <Aankhen``> I am confirming it. :-P

[16:49] <svnbot6> r5860 | Stevan++ | Perl6::MetaModel (p5)

[16:49] <svnbot6> r5860 | Stevan++ | * added private methods (currently using '_' instead of ':' as a marker)

[16:49] <svnbot6> r5860 | Stevan++ |     - added test file for this

[16:49] <svnbot6> r5860 | Stevan++ | * moved the last of the private methods of MetaClass into it's MetaClass instance

[16:49] <svnbot6> r5860 | Stevan++ |   so now only new() and add_method() are needed to bootstrap :) 

[16:49] <svnbot6> r5861 | geoffb++ | docs/notes/plan: minor spacing and typo cleanups; also no longer state that JS backend is unstarted and less important

[16:49] <svnbot6> r5862 | geoffb++ | READTHEM: point out partial KWID transcription of YAHT

[16:49] <geoffb> Who did the config.yml thing for the builds?

[16:49] <Aankhen``> Builds?

[16:50] <Aankhen``> Er, did I latch onto the wrong part of it as significant?

[16:50] <geoffb> make, I mean

[16:50] <geoffb> yes.  :-)

[16:50] <Aankhen``> Heh.

[16:50] * geoffb does svk blame

[16:50] <Aankhen``> I believe it was gaal.

[16:50] <Aankhen``> Not quite sure though.

[16:50] <geoffb> oh, OW, that made svk pause

[16:52] <geoffb> Looks like gaal.

[16:52] <geoffb> gaal: if you backlog -- INSTALL needs to be fixed to match your machinations

[16:55] <putter> I've a Parser.hs puzzle.  anyone up for it?

[16:59] <putter> autrijus: ping?

[17:03] <putter> Sigh.  I almost have adverb parsing working, but two lookAhead's are having sideeffects I just dont understand... :(

[17:03] <Aankhen``> putter++

[17:04] <brentdax> Side effects?  In Haskell?  Horrors!

[17:04] <putter> ok, say "behavioral concequences" ;)

[17:04] <geoffb> .oO( "No, we don't have side effects, we have monads!" )

[17:04] <Aankhen``> putter: Are you using t/operators/adverbial_modifiers.t as a reference or something else?

[17:05] <putter> a rather enlarged adverbial_modifiers.t

[17:06] <Aankhen``> Welp, heads up... :-)

[17:07] <Aankhen``> Stupid svnbot6 doesn't know its cue. :-P

[17:07] <svnbot6> r5863 | Aankhen++ | * t/operators/adverbial_modifiers.t: fixed mistakes relating to quoted vs. unquoted named arguments.

[17:07] <Aankhen``> Oh great, NOW it decides to wake up.

[17:08] <putter> ooo... putter goes to look...

[17:08] <Aankhen``> ?eval sub foo (Int $bar) { $bar + 2 }; foo(:bar<2>)

[17:08] <Aankhen``> Bah.

[17:09] <Aankhen``> Well, it seems it would have worked anyway.

[17:12] <putter> ok, makes sense.   hmm...  with sub f(Int i){}  does f("2")  work (coerce) or fail?

[17:13] <Aankhen``> pugs> sub f (Int $i) { $i }; f("2")

[17:13] <Aankhen``> '2'

[17:13] <Aankhen``> Appears to.

[17:13] <Aankhen``> Er.

[17:13] <Aankhen``> Appears to work.

[17:13] <Aankhen``> Not coerce.

[17:14] * putter wonders what is spec...

[17:17] <putter> In Parser.hs, parseNoParenParamList, could someone walk me through this line:   formal <- (`sepEndBy` symbol ":") $ fix $ \rec -> do 

[17:17] <putter> ?

[17:20] * geoffb decides to try his haskell skills.

[17:20] <svnbot6> r5864 | Aankhen++ | * HTTP::Request::CGI: made $.query_string read-only.

[17:21] <geoffb> Lessee, the (`sepEndBy` symbol ":") is creating a slice, so the thing to the right will actually become the first argument to sepEndBy,

[17:21] <geoffb> (er, right of the first $)

[17:23] <geoffb> formal <- (fix $ \rec -> do <...stuff..>) `sepEndBy` symbol ":"

[17:23] <geoffb> formal <- sepEndBy (fix $ \rec -> do STUFF) symbol ":"

[17:24] <geoffb> formal <- sepEndBy (fix ( \rec -> do STUFF )) symbol ":"

[17:24] <geoffb> Does that look right so far to the real lambdafolk?

[17:25] <putter> ahhhhh.  and sepEndBy repeated invokes the fix....  

[17:25] <putter> geoffb++  Thank you! :-)

[17:25] <geoffb> You're welcome, I hope I got that right!

[17:28] <putter> Well, I pretty sure I understand where I went down the wrong track.  Now just have to backtrack and try again... :)

[17:28] <geoffb> :-)

[17:54] <brentdax> Is there an example of how a Pugs module/set of scripts can be distributed outside Pugs itself?  i.e. how it should install itself and so on?

[18:08] <geoffb> Wow, the 3 variations of the metamodel in perl5/ are nearly 10K lines.

[18:08] <geoffb> stevan++ # cause, DAMN

[18:11] <brentdax> "*** Cannot cast into Hash: VRef <Thunk>"  <-- What does that usually indicate?

[18:21] <svnbot6> r5865 | geoffb++ | Remove no-longer valid stuff from ext/Set-Infinite/README; delete empty lib/Perl6/Pugs dir

[18:21] <svnbot6> r5866 | geoffb++ | Bring source map in lib/pugs/hack.pod vaguely up to date, and fix a couple XXXX while in there

[18:22] <putter> brentdax: re distribution, have you looked at freepan?

[18:30] <svnbot6> r5867 | iblech++ | PIL2JS:

[18:30] <svnbot6> r5867 | iblech++ |   * libjs/PIL2JS.js -- Added a small comment explaining the autorefification in

[18:30] <svnbot6> r5867 | iblech++ |     my $scalar = @array.

[18:30] <svnbot6> r5867 | iblech++ |   * PIL::Nodes -- Better error messages, as now $?POSITION is updated *before*

[18:30] <svnbot6> r5867 | iblech++ |     doing the parameter checking in subroutines (i.e., before: "Required

[18:30] <svnbot6> r5867 | iblech++ |     parameter "$x" not passed", now: "Required parameter "$x" not passed at

[18:30] <svnbot6> r5867 | iblech++ |     line ...").

[18:30] <svnbot6> r5867 | iblech++ |   * Prelude::JS::Array -- Fixed (with a small hack) &sort. All 16 tests pass now:

[18:30] <svnbot6> r5867 | iblech++ |     http://m19s28.vlinux.de/iblech/stuff/not_perm/pil2js-demo/t/builtins/lists/sort.t.html

[18:31] <putter> anyone happen to know of something with the same type as  symbol "x"  but which is a no-op?  I'm looking at (lookAhead (satisfy (\c -> True))) but it doesn't quite typecheck...

[18:33] <iblech> putter: return "x" should have the same type as symbol "x"

[18:35] <putter> ah, so   return ""  is a noop?

[18:35] <iblech> Yep.

[18:36] <putter> oh well.  there goes that bug hypothesis.  Thanks! :)

[18:37] <iblech> :)

[18:44] <svnbot6> r5868 | iblech++ | PIL2JS: Prelude::JS::Hash -- my %hash = (a => 1, "b", 2, "c") (i.e. mix between

[18:44] <svnbot6> r5868 | iblech++ | pairs and normal lists) works now, causing

[18:44] <svnbot6> r5868 | iblech++ | http://m19s28.vlinux.de/iblech/stuff/not_perm/pil2js-demo/t/builtins/lists/map_function_return_values.t.html

[18:44] <svnbot6> r5868 | iblech++ | to pass.

[19:24] <svnbot6> r5869 | geoffb++ | Add a blurb about testing to pugs::hack, with terse details about prove to deal with FAQ

[19:25] <svnbot6> r5870 | iblech++ | * Usual svn props.

[19:25] <svnbot6> r5870 | iblech++ | * t/builtins/lists/reduce.t -- Moved the &reduce tests to the beginning and the

[19:25] <svnbot6> r5870 | iblech++ |   [...] reduce metaoperator tests to the end (so PIL2JS has a chance of passing

[19:25] <svnbot6> r5870 | iblech++ |   more than two tests).

[19:25] <svnbot6> r5870 | iblech++ | * PIL2JS:

[19:25] <svnbot6> r5870 | iblech++ |   * PIL::Nodes -- sub foo {...}; say &foo.arity works now (again)

[19:25] <svnbot6> r5870 | iblech++ |   * Prelude::JS::Array -- Implemented &reduce (capable of working with n-ary

[19:25] <svnbot6> r5870 | iblech++ |     subs).

[19:25] <svnbot6> r5870 | iblech++ |   * Prelude::JS::Operators -- Basic ops (+, <, etc.) now correctly obey Perl's

[19:25] <svnbot6> r5870 | iblech++ |     numification rules, i.e. undef + 3 is now 3 instead of NaN.

[19:29] <brentdax> Someone's defaced the FreePAN wiki...

[19:34] <putter> :(

[19:35] <autrijus> greetings.

[19:35] <putter> the pugs wiki was getting hit quite frequently, but cleaned up quickly.

[19:35] <autrijus> putter: pong. Parser.hs?

[19:35] <putter> greetings :)

[19:35] <putter> figured out, I think.  testing...

[19:36] <autrijus> I'm almost ready to do PIL2 now, based on F<:, Scala and intersectional object calculi :D

[19:36] <putter> iblech++ geoffb++ for assistance.

[19:36] <autrijus> I'm glad I survived the paper hell

[19:36] <putter> brain feel healthily scrubbed?

[19:37] <autrijus> brentdax: 02:12 < brentdax> "*** Cannot cast into Hash: VRef <Thunk>"  <-- What does that usually indicate?

[19:38] <autrijus> brentdax: this usually means you wrote {a=>1;} where you should've written {a=>1} or something

[19:38] <autrijus> i.e. hash composition did not kick in

[19:38] <brentdax> I see...

[19:39] <integral> will PIL2 (as a haskell type) not be type-indexed?  there's a comment above the PIL type that the type-indexing is "a bit too baroque"

[19:39] <autrijus> putter: well, yeah, except I now more fully grok perl6's immense craziness

[19:39] <putter> quite woot of tests passing.  one would think that having a quite long edit-test cycle would provide time for careful quality analysis.  but instead it seems I'm just slower... ;)

[19:39] <putter> s/quite/quiet/

[19:39] <autrijus> integral: yeah, I concluded type index doesn't help, and regular algebraic types would do. the reason is that type index really only associate it with one internal language, namely PIR

[19:39] <autrijus> integral: while everything else need to be second-class with type classes

[19:40] <integral> yeah,  I suppose one way around is to create types to use just as indices

[19:40] <geoffb> wow, I look away for a couple minutes, and suddenly the channel goes wild.  Hi, autrijus!

[19:40] <autrijus> you mean phantom types in TIP?

[19:40] <autrijus> hi geoffb

[19:40] <integral> err, probably =)

[19:40] <autrijus> integral: type-indexed products is nifty... but I'm thinking far more mundanely, i.e. just give different constructs different levels

[19:41] <autrijus> really, all GADT buy us is (compile :: PIL a -> Comp a)

[19:41] <integral> mundane is nice too :-)

[19:41] <brentdax> You're right... %.attributes is being assigned a thunk.  I wonder where...

[19:41] <integral> it also reminds me a bit of subtyping, but badly crippled

[19:42] <autrijus> well, not neccessarily badly crippled, but it's inconvenient to use as a general subtyping mechanism

[19:43] <autrijus> integral: anyway. the same treatment that enables CodeGen.PIR to say

[19:43] <autrijus> instance (Typeable a) => Translate (PIL a) a where

[19:43] <autrijus> can be replaced with

[19:43] <autrijus> instanace Translate PIL.Lit PIR.Literal where

[19:43] <autrijus> et ceteral

[19:43] <autrijus> via typical type-directed translation

[19:44] <putter> there's a breathtaking task - to fully grok perl6's immense craziness.

[19:44] <integral> hmm, that would make things much tidier

[19:44] <autrijus> putter: I don't claim "fully" :)

[19:44] <putter> bridging the messy p6 kitchen sink, with the world of crystaline type theory, just sounds so... improbable.

[19:44] <autrijus> although I do wish @Larry could reply to ``The meaning of "returns"'' eventually

[19:44] * justatheory types crystalinely

[19:45] <putter> re "fully", yes, I noted your "more fully".  quality_qualifiers++

[19:46] <autrijus> putter: the key is to find that there's actually a lot of research already into junctive types, generic roles, container classes, polymorphic parameter types, etc etc

[19:47] <autrijus> just not usually taken together, and almost never in a dynamic/soft typing setting

[19:47] <geoffb> Perl++ # "We are borg..." / "All your concept are belong to us."

[19:48] <autrijus> <lwall> That's odd, thought I. Why should it be, that the Sedulous Bead of Regular Expressions, when bonded together with the Shellacious Bead of Gnostic Interpolation, and the Awkward Bead of Simple Data Typology, should produce more Magic, pound for pound, than they do when strung out on strings? I said to myself, could it be that the beads can exchange power with each other because they no longer have to commune with each other thro

[19:48] <autrijus> <lwall> So I melted that larger bead together with a few more of my favorite beads, and the same thing happened, only more so. It was practically a combinatorial explosion of potential incantations: the Basic Bead of Output Formats and the Lispery Bead of Dynamic Scoping bonded themselves with the C-rationalized Bead of Operators Galore, and together they put forth a brilliant pulse of power that spread to thousands of machines through

[19:48] <autrijus> (foreword, Learning Perl, 1st edition)

[19:49] <geoffb> :-)

[19:49] <autrijus> (although I support the "on something" conjecture more)

[19:51] * autrijus wonders when will chromatic's article be up on perl.com

[19:51] <brentdax> What's he writing about?

[19:52] <autrijus> brentdax: the invention of perl http://www.unix.org.ua/orelly/perl/learn32/prf1_01.htm

[19:52] <autrijus> oh.

[19:52] <autrijus> chromatic.

[19:52] <autrijus> ext/Test-Builder/.

[19:52] <Darren_Duncan> greetings

[19:52] <autrijus> heya Darren_Duncan

[19:53] <autrijus> how's life?

[19:54] * autrijus syncs up on the pil2js work by the iblech machine 

[19:55] <Darren_Duncan> I'm trying to get more stuff done than I have time for

[19:55] <Darren_Duncan> it gets frustrating

[19:55] <Darren_Duncan> one can only snip so much from the schedule

[19:56] <Darren_Duncan> my concern is that I won't have Rosetta functional before OSCON

[19:56] <brentdax> Ah, okay.

[19:56] <Darren_Duncan> and there's still packing for the trip, doing backups, etc to do

[19:57] <Darren_Duncan> and imaging the iBook I borrowed to take along

[19:57] <brentdax> Y'know, it'd be kinda nice if a value would capture the call stack as it existed when it was created.

[19:58] <Darren_Duncan> also ... I'm thinking, just after OSCON, of putting Rosetta into a version control system like Pugs to make it easier for others to participate in its development ... but I have no experience in running such a system

[19:58] <autrijus> brentdax: $val.carp?

[19:58] <autrijus> or rather .confess

[19:59] <osfameron> gah, does 'carp' still exist in p6?

[19:59] <^conner> Darren_Duncan, don't waste your time trying to setup and manage a SCM, there's a number of website that will do that for you (SF, Savanah, etc.)

[19:59] *** Boogie_ is now known as Boogie

[20:00] <Darren_Duncan> so, any recommendations for specific ones ... it should support the svn + svk way of doing things, rather than cvs

[20:01] <Darren_Duncan> in fact, if svk allows for every person to be their own repository, thats what I prefer

[20:01] <autrijus> Darren_Duncan: you can use rt.openfoundry.org, which has a committer-invitation invitation system to svn, but the occasional downtime is irksome. for casual hosting with simple management UI I prefer https://opensvn.csie.org/

[20:01] <brentdax> Something like that.  It would probably be turned off by default, but it'd be dead useful for debugging.  (Especially if it also recorded mutations.)

[20:01] <autrijus> Darren_Duncan: svk is strictly client side thing

[20:01] <autrijus> brentdax: write a t/unspecced/ :)

[20:01] <putter> That is quite the nifty larry intro.  tnx.  :)

[20:01] <autrijus> or if the idea is not that solid yet, post to p6l

[20:02] <^conner> Darren_Duncan, I'm not sure about svn, maybe tigris

[20:02] <Darren_Duncan> one thing I will want is that committers are by invite only

[20:04] <^conner> Darren_Duncan, aww ha, http://subversion.tigris.org/project_links.html look towards the bottom of the page

[20:04] <Darren_Duncan> I also want a system where all of the version history in the repository is also on my client computer, so if the repository goes down for good, all the version info is not lost

[20:05] <geoffb> Darren_Duncan, that would be svk

[20:05] <geoffb> (assuming you mirror all revs)

[20:05] <^conner> Darren_Duncan, or arch, or monotone, or darcs

[20:05] <Darren_Duncan> it occurs to me, then, that I should start using svk now with Pugs and get used to it, over svn

[20:05] <putter> ?eval 3

[20:05] <^conner> Darren_Duncan, or (ack) bitkeeper, or even git

[20:05] <geoffb> ^conner, he had specifically mentioned SVN, so . . . :-)

[20:06] <geoffb> Darren_Duncan, oh, definitely

[20:06] <^conner> geoffb, well svk != svn

[20:06] <geoffb> svk = client for svn

[20:06] <geoffb> (that also mirrors rev history, has local branches, has a smarter merge algo, etc.)

[20:07] <Darren_Duncan> in brief, any issues/problems I should be aware of that svk has and svn doesn't?

[20:07] <osfameron> ask clkao

[20:08] <^conner> Darren_Duncan, svk is an improvement over svn... branching and merging with svn isn't more better than cvs

[20:08] <geoffb> svk has several advantages (faster after first checkout, better merge, offline work, etc.), but watching #svk I notice that edge cases often find buglets.  Usually workaroundable, but there nonetheless

[20:08] <osfameron> as in: if you use svk, the maintainer is on channgel, which is kinda cool...

[20:08] <geoffb> Average use seems to Just Work

[20:08] <Darren_Duncan> so switching shouldn't gain me any new problems then?  that's what I wanted to know

[20:09] <geoffb> not that I know of, but osfameron is right -- ask clkao on #svk if you're really nervous

[20:09] <^conner> Darren_Duncan, I have a huge ammount of respect for svk but you should really think about how much 'faith' your going to put in a SCM, svk isn't completely mature

[20:10] <autrijus> although it's 1)in perl5 and 2)easy to hack :)

[20:10] <osfameron> but it did 1.0 recently, no?

[20:10] <Darren_Duncan> well, currently I don't use an automated version control at all ... nightly tarballs and CPAN releases are my 'checkins'

[20:10] <^conner> autrijus, don't get me wrong, I think svk is amazing

[20:11] <autrijus> ^conner: sure, and it's just a client, it's hard to get completely borked with a client

[20:11] <autrijus> the svn server is very robust by this point

[20:11] <^conner> autrijus, I'm both a programmer and a systems admin.... the sysadmin part of me is always nervous about new software in the hands of users

[20:11] * PerlJam started using svk last night.

[20:11] <Darren_Duncan> an unrelated question ...

[20:11] <geoffb> heh

[20:12] <^conner> autrijus, valid point

[20:13] <Darren_Duncan> autrijus, do you hold the copyright to the Pugs core (what isn't in /ext) by yourself, such that other committers have signed their work over to you implicitly, or does each committer retain the copyright on their part?  what do you prefer to be the case?

[20:13] <geoffb> OK, just added a STATUS doc to root dir (r5871).  I could use some help filling in more sections, and fixing any details I just plain misremembered.

[20:14] <^conner> autrijus, I can confirm that README is correct about GHC on amd64... GC is definately hosed but the suggested work about seems to work

[20:19] <autrijus> ^conner: woot

[20:19] <svnbot6> r5871 | geoffb++ | First cut of STATUS doc, to let people know what's up with various parts of the pugs world

[20:20] <autrijus> Darren_Duncan: No, license declarations in ext/ automatically override the one in README

[20:20] <autrijus> Darren_Duncan: if you are concerned, reflect this in ext/README or in README itself

[20:20] <autrijus> ooh, geoffb++

[20:21] <geoffb> :-)

[20:22] <theorbtw1> DD: At least in the US, copyright cannot be signed over implicitly, it takes a written declaration to do so.

[20:23] <theorbtw1> That's one reason I try to keep people's real names in AUTHORS -- each of those people can be assumed to have some copyright interest in Pugs.

[20:23] *** theorbtw1 is now known as theorbtwo

[20:28] <putter> I've noticed pugs is currently fudging a lot of copyright issues.  For instance, some folks may have "employer owns shower songs" IP contracts at work.  Which is why gnu requires(?) "employer says its ok" notes, even for stuff done on ones own.

[20:29] <theorbtwo> pugs is rather deliberatly a low-administrative-overhead project.

[20:30] <theorbtwo> This does, of course, increase the likelyhood that somebody's employer will sooner or later do something obnixious of that sort.

[20:30] <theorbtwo> Of course, it also keeps the patches rolling in.

[20:31] <PerlJam> So far I think that pugs is completely withing fair-use territory anyway.

[20:31] <PerlJam> Until someone decides to use it in a production environment.

[20:32] <^conner> autrijus, are you going to OSCON this year?  I don't think I say you on the speaker's schedule

[20:32] <^conner> s/say/saw/

[20:32] <dada> ^conner: neither did I saw Larry Wall, but he's there too

[20:33] <^conner> dada, Larry's not listen as a keynote speaker thou

[20:33] <^conner> dada, I wonder if he's not feeling well again

[20:33] <dada> dunno

[20:33] <^conner> I've had trouble with my stomach too, it's miserable

[20:33] <putter> re low overhead, yes.  and happily so.  but there will have to be a normalization at some point.  for which will need something heavyweight for everyone who has created a large body of code, even the final version only has a derivative of it.

[20:36] <putter> PerlJam: err, IANAL, but commercialness is only one component of fair use.  If iblech say has an unfortunate employment contract, then we are already in trouble.

[20:37] <PerlJam> putter: perhaps.

[20:37] <PerlJam> It's good that pugs is only a bootstrapping effort then  ;)

[20:38] <autrijus> ^conner: I prefer going to .eu nowadays :)

[20:38] <autrijus> ^conner: so I'll be in euroscon but not the portland one

[20:38] <putter> Of course, the biggest threat would be autrijus signing an employment contract with an unfortunate IP clause. ;)

[20:38] * clkao giggles at autrijus

[20:38] <clkao> i know you love me!

[20:38] <clkao> but don't say that to everyone!

[20:38] <autrijus> heh.

[20:39] <^conner> autrijus, going to .eu confernece is a ton of paperwork for me... i'll be going to portland ;)

[20:39] <autrijus> ^conner: ingy will be there to speak as my proxy

[20:39] <clkao> ^conner: are you from dodgy country that requires hateful visa work like me?

[20:39] <^conner> autrijus, ingy is your minion now? does he know?

[20:39] <autrijus> putter: nah, past licensing = irrevocable

[20:39] <clkao> and sky/acme will be my proxy speaking at oscon

[20:40] <^conner> clkao, no, I'm a state employee and international travel requires a pound of flesh

[20:40] <autrijus> ^conner: sure, and we both were damian minions. it's turtles all the way down

[20:40] <clkao> a pound money or a pound weight?

[20:40] <^conner> autrijus, rofl

[20:40] <clkao> i can easily sponsor you a pound money flesh

[20:41] <autrijus> clkao: you can as easily sponser a pound of other animal's flesh too

[20:41] <^conner> autrijus, everybody who's met damian becomes his minion ;)

[20:41] <clkao> autrijus: ya, but i guess i can't post them to the us.

[20:41] * autrijus is composing a relevant but hard-to-word post to p6l

[20:42] <clkao> autrijus: i need to wire with your brain in eurooscon

[20:42] <^conner> Damian's p6 talk series in 2000 is what really turned me on to perl in the first place

[20:43] <geoffb> pdcawley, ping

[20:47] <autrijus> clkao: sure

[20:47] <^conner> clkao, flesh

[20:48] <svnbot6> r5872 | gaal++ | documentation for config.yml (per geoffb's suggestion)

[20:52] <ingy> ^conner: autrijus is actually *my* minion. He wrote my oscon talk. :p

[20:54] <PerlJam> minions++

[20:54] <gaal> well you know the full title of the pope

[20:54] <gaal> Bishop of Rome,

[20:54] <gaal> [time passes]

[20:54] <gaal> Servant of the Servants of God

[20:56] <autrijus> hmm mutually recursive minions.

[20:58] <Darren_Duncan> okay, I was away for a bit ...

[20:58] <Darren_Duncan> my reason for asking the copyright question actually concerned the Rosetta-in-version-control thing

[21:00] <Darren_Duncan> to keep things simple at my end, I would like to get a written statement from all committers to the project that says any copyright on their contributions to the project is assigned to me, so in the end I have the sole copyright on it

[21:00] <Darren_Duncan> I was asking about the Pugs situation to see if there was a precedent for me to do something like that

[21:01] <Darren_Duncan> meanwhile, my assumption has been, Pugs included, that anyone's contributions belong to them if they don't explicitly sign them over ...

[21:01] <autrijus> Darren_Duncan: the usual way is to require contributors to place the code under the same license

[21:01] <Darren_Duncan> so I'm not concerned about Pugs for my sake ... my /ext stuff is stated to belong to me ... and anything in the core as yet I don't have any interest in

[21:02] <autrijus> and/or sign to you a nonexclusive, worldwide, irrevocable,

[21:02] <autrijus> # royalty-free, perpetual, license to use, copy, create derivative

[21:02] <autrijus> # works based on those contributions, and sublicense and distribute

[21:02] <autrijus> # those contributions and any derivatives thereof.

[21:02] <autrijus> (copy/pasted from the standard RT boilerplace)

[21:02] <Darren_Duncan> yes, that works most of the time ... but, selfish as it may sound, I would like the exclusive right to release Rosetta under other licenses

[21:02] <autrijus> that is what the clause gets you.

[21:02] <autrijus> "sublicense"

[21:03] <Darren_Duncan> while the GPL with exception for independent components is still the default for release, that no one can change given the GPL's rules

[21:04] <autrijus> right. that's a popular view; see MySQL, Sleepycat, among others.

[21:04] <Darren_Duncan> yes, in the near term I wanted to do it as MySQL does

[21:04] <autrijus> I conciously avoid all this in Pugs -- in fact I'd adopt the Sqlite license if not for the cultural value of Artistic2

[21:04] <autrijus> but it's because I'm optimizing for fun not profit :)

[21:05] <autrijus> s/Sqlite license/SQLite antilicense/

[21:05] <Darren_Duncan> of course, I may not actually exercise my right to multi-license, I just want to be left the option

[21:06] <gaal> antilicense is not a good name

[21:06] <autrijus> counterlicense?

[21:06] <gaal> the sql blessing is very licentious :)

[21:06] <PerlJam> autrijus++ nice message regarding PIL

[21:06] <autrijus> PerlJam: thanks. :)

[21:06] <gaal> (in one sense of the word)

[21:07] <gaal> or maybe not actually.

[21:07] <gaal> words, words, words.

[21:07] <Darren_Duncan> I'm actually doing Rosetta etc partly for fun too ... I enjoy working on it ... but at the same time, it forms a foundation for my planned new business

[21:08] <gaal> is freepan still active?

[21:08] <Darren_Duncan> as they say, try to make a living doing what you enjoy

[21:08] <autrijus> nodnod. that's very worthy goal

[21:08] <autrijus> gaal: ask ingy and/or gugod not me :)

[21:09] <autrijus> although I doubt ingy is working on it actively

[21:09] <gaal> winning bread is totally okay, of course, D_D

[21:10] <gaal> but perhaps your project is very yours and ext/ isn't the best place for it?

[21:10] <autrijus> it's up to the author to decide really

[21:10] <Darren_Duncan> I don't have a problem with ext/

[21:11] <Darren_Duncan> I see ext/ as being a mini-cpan or sorts

[21:11] <Darren_Duncan> and part of the reason I am involved here is to help test Pugs, so including it there makes the most sense

[21:11] <Darren_Duncan> it is only in the long term that I anticipate distributing separately

[21:12] <gaal> sure, that has proven very useful

[21:13] <gaal> but what you're aiming for in commit-waives-copyright is kinda different from most other stuff in pugs...

[21:14] <Darren_Duncan> currently I see my Perl 5 modules to still be the main versions, and the stuff in /ext is a p6ified clone of those, all aspects included, code, docs, tests, and license

[21:15] <theorbtwo> I agree, if you want a differnet copyright policy then the rest of pugs, that's fine with me... but put it in a differnt repo, then.

[21:15] <theorbtwo> That way you can get the release from people before giving them a commit bit.

[21:15] <theorbtwo> (At least make sure they have the same understanding as you.)

[21:16] <Darren_Duncan> to be clear, I am *not* assuming commit-waives-copyright with anything in Pugs, including what I put in /ext

[21:16] <theorbtwo> Oh.

[21:16] <theorbtwo> OK then.

[21:16] <Darren_Duncan> everything in Pugs is still under the same rules

[21:17] <gaal> that said, it's totally worthwhile hearing about test results in pugs even from external modules; maybe the test consolidation service can service those too.

[21:17] <Darren_Duncan> the policy I mentioned is for when I start an independent repository for the Perl 5 Rosetta

[21:17] <Darren_Duncan> however, aside from a bit of twiddling, no one ever edits my /ext stuff anyway, so it doesn't matter

[21:20] <Aankhen``> G'night.

[21:21] <Darren_Duncan> fyi, the only thing I assume about my /ext stuff is that it has a different license than the rest of Pugs, and people editing my ext/ stuff are subject to that license ... they still keep ownership anyway

[21:21] <gaal> fair enough.

[21:23] <Darren_Duncan> anyway, I'm switching to another task ... ping if you want my attention

[21:47] <autrijus> reading http://scala.epfl.ch/docu/files/api/index.html feels like flipping thru a puzzle book to the end to look at the solutions.

[22:22] <putter> direct links in the web list browser dont seem to work, so I just note http://news.gmane.org/gmane.comp.lang.scala 07-01 "Our plans for Scala" was interesting.

[22:51] <autrijus> putter: nod. looks active

[22:52] <autrijus> Scala is very well thought out.

[22:52] <autrijus> if perl6 is statically typed, it would look a lot like scala :)

[22:54] * autrijus is playing with Gwydion Dylan

[22:55] <autrijus> from dylan wiki:

[22:55] <autrijus> "Java was successful enough in its own niche, as a Strongly Hyped Language"

[22:56] * autrijus ponders soft hyping and dynamic hyping

[22:57] <ayrnieu> Java's lasting success will be that it helped, in a small way, the growth of a decent enough language.

[22:57] <autrijus> yup.

[22:58] <autrijus> and java 1.5 is not bad really. it just require a strong typist for its strong typing.

[22:58] <ayrnieu> I like how Perl and Haskell have common ground in not having annoying type systems :-)

[22:59] <autrijus> Haskell achieves this by really clever inference, and Perl achieves this by having only five nonextensible base types :)

[23:00] <autrijus> (@$%&*, respectively)

[23:00] <svnbot6> r5873 | putter++ | Improved adverb support.  Adverbs before/within/after parameter lists hopefully now work.  adverbial_modifiers.t has many new tests, to which you are encouraged to add.  Adverbs on operators are still unsupported.

[23:00] <autrijus> ooh. putter++

[23:00] <gaal> http://opal.cabochon.com/~stevey/sokoban/ # JVM language shootout, interesting read

[23:01] <autrijus> hm, no Scala there

[23:02] <autrijus> although there's Nice

[23:02] <gaal> true, i just looked in the Scala page and thought about it when i saw it targets the jvm

[23:05] <autrijus> http://opal.cabochon.com/~stevey/sokoban/docs/article-nice.html # nice read, esp. in light of p6

[23:05] <autrijus> "named and optional parameters -- another reason Java sucks so badly. That's it -- I think I'm switching to Nice."

[23:05] <gaal> python++ # giving us good things to steal

[23:06] <gaal> btw i picked that atricle series up from http://www.livejournal.com/community/evan_tech/ which has lots of goodies.

[23:07] <autrijus> hrm between Scala and Nice, it looks like a lot of foundation-class problem in Perl6 is already solved

[23:08] <autrijus> esp. Scala's traits/roles and Nice's MMD 

[23:10] <autrijus> but none of them tackles soft typing. afaics only Boo and VB.Net tackles it, but not as rigorous as I'd like

[23:11] <putter> soft typing?

[23:11] <autrijus> oh, maybe cmucl too. it finally finished installing

[23:12] <putter> sbcl is often a much easier install.

[23:12] <autrijus> putter: a language that starts as a dynamic, very-late-binding setting, but as you provide more type annotations, it gradually become static

[23:12] <autrijus> okay.

[23:12] <putter> ah.

[23:12] <putter> incremental typing.

[23:13] <autrijus> right, aka incremental typing

[23:13] <gaal> http://boo.codehaus.org/Duck+Typing presents it the other way around

[23:13] <gaal> but i guess that doesn't matter much

[23:13] <autrijus> gaal: exactly

[23:13] <putter> gaal++ # interesting shootout, articles

[23:13] <autrijus> "soft" means you can mix libraries with different level of staticness.

[23:13] <autrijus> for example, DBI.pm may be very statically typed, and CGI.pm may be not typed at all.

[23:14] <putter> k

[23:14] <autrijus> while "incremental" emphasises that when one starts coding, one'd like dynamic language's whipuptitude, but as refactoring proceeds, static types gradually become a neccessity

[23:15] <nothingmuch> evening

[23:15] * nothingmuch is having trouble

[23:15] <ayrnieu> (Sokoban is pretty fun to implementation, actually.)

[23:15] <nothingmuch> stupid old hardware

[23:15] <nothingmuch> no firwire, no dvd == no way to install OS properly

[23:15] <ayrnieu> s/ion//

[23:16] <ayrnieu> nothingmuch - installing OSX on a mac?  What version OSX?  What model mac?

[23:16] <nothingmuch> tiger

[23:16] <nothingmuch> 1st gen clamshell ibook

[23:16] <nothingmuch> i tried ripping out the DVD from a desktop and putting it into an external HD box

[23:16] <nothingmuch> that has USB

[23:16] * gaal needs sleep, badly! --more--

[23:16] <putter> lol.  boo implicit duck typing option... -ducky

[23:16] <pdcawley> geoffb pong

[23:16] <nothingmuch> but that didn't work (i think too little power)

[23:17] <ayrnieu> yay, Tiger.  That's curious, though: I'm sure that my g3 Ruby iMac does not have DVD.  Why do you need that or firewire?

[23:17] * pdcawley doubts the necessity for static types...

[23:17] <nothingmuch> i need a dvd because tiger comes in dvd format

[23:17] <nothingmuch> or i could put the target machine in firewire disk mode

[23:17] <ayrnieu> oh, that's a neat change.

[23:17] <nothingmuch> and then install it that way

[23:17] <autrijus> "intercept duck typed method calls using IQuackFu"

