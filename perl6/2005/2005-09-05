[00:00] <buu> You are insulting the noble art!

[00:01] <lscd> c'mon, every noble art has its base forms ;)

[00:03] <putter> sociopaths, or bots?

[00:04] <lscd> both?

[00:26] <QMario> Quiet......

[00:29] <QMario> Iscd, are you still here?

[00:29] <QMario> What about "you" buu?

[00:29] <lscd> yes

[00:30] <QMario> I have a question.

[00:30] <QMario> Can I assign a key more than more value in a hash?

[00:30] <lscd> erm, you should be able to assign a compound data type like a list to it, which could store multiple values

[00:30] <lscd> if you try to write two different values to a key in an a hashtable, you'll only have whichever one you wrote later

[00:31] <QMario> lscd, so then an array is my best choice?

[00:31] <lscd> it sounds like a decent choice to me, but i don't know what kind of data you're working with, etc

[00:32] <QMario> http://sial.org/pbot/12929

[00:32] <QMario> Use that.

[00:32] <QMario> I am trying to assign 1 number to several different letters.

[00:33] <QMario> lscd?

[00:33] <lscd> just got back

[00:33] <lscd> i was grabbing some water

[00:34] <QMario> Drink up. ;)

[00:34] <lscd> ahh, yeah, sounds like an array is a good idea

[00:35] <lscd> though you'll of course need some way to get the right chunk of it at some point

[00:36] <QMario> True. This source code is going to "eat" me.

[00:36] <lscd> well, what are you wanting to do?

[00:37] <lscd> print out what a phone number spells or something?

[00:37] <QMario> Yes. I think it is annoying when companies or other type of organizations give letters in their phone numbers. Don't you?

[00:38] <QMario> Especially if it is urgent buisness.

[00:38] <lscd> it's useful for actually remembering them, i suppose; aside from that, i haven't seen those in years; people don't really do that here

[00:38] <QMario> s/buisness/Business./

[00:38] <QMario> lscd, are you in Canada or Europe?

[00:38] <lscd> but, erm, isn't getting letters in phone numbers the opposite problem?

[00:38] <lscd> europe

[00:38] <lscd> you?

[00:42] <putter> sigh.  for an interpreter tree-walker regex engine, noting all the failed captures (on failed alternation branches) actually requires work...  blech. ;)

[00:43] <lscd> putter: hmm? why? [i'm not seeing why it would be more than adding them to a list? and why do you want to note them?]

[00:58] <QMario> Do people still use 5.25" floppy drives?

[00:59] <lscd> presumably some, but i've not seen any in use for many years

[01:00] <lscd> old systems/third world/embargoed countries? maybe

[01:00] <QMario> So how would I tell my "for" loop to take each element in the array and make its output 2. Same source code previously mentioned.

[01:00] <lscd> btw, you didn't answer the canada/europe question

[01:01] <QMario> lscd, confidential.

[01:01] <QMario> People want to track me down in #perl.

[01:01] <lscd> QMario: well, you'd have 3 possible answers for each number

[01:01] <QMario> for ($phone=~/$_2[0]/){$phone=~s/$_2[0]/2/;}

[01:02] <QMario> I want that loop to access each element in the array and make the output two.

[01:02] <QMario> Hello jroc!!! ;)

[01:02] <jroc> hi

[01:02] <lscd> erm, for a 7-digit number, you have 3^7 possibilities

[01:02] <QMario> for ($phone=~/$_2[0..2]/){$phone=~s/$_2[0..2]/2/;}

[01:02] <QMario> Would that work?

[01:03] <QMario> What does the term "too dense" mean?

[01:03] <QMario> And "meh"?

[01:03] <jroc> usually applied to me

[01:08] <lscd> hehe, i'm sure i didn't mean it in the context of intelligence

[01:08] <jroc> Juerd: are you still offering accounts on feather?

[01:09] <lscd> hm.. i'm not seeing where it was used; mind pasting the sentence, QMario?

[01:18] <putter> dinner &

[02:16] <QMario> I have "perfected" my telephone program.

[02:16] <QMario> Yay.

[02:16] <QMario> Thank God1

[02:16] <QMario> s/1/!

[02:17] <QMario> Is lscd still here?

[02:17] <QMario> Hello ajs_home!! :)

[02:18] <lscd> yep

[02:27] <QMario> Do you know buu well?

[02:27] <elmex> will the CGI.pm for perl6 be less awkward than the one for perl5 ?

[02:27] <QMario> Dbrock.

[02:28] <dbrock> what?

[02:28] <lscd> i don't

[02:29] <QMario> You are here?

[02:29] <QMario> I just received an auto-reply.

[02:29] <QMario> When does Perl6 come out?

[02:29] <elmex> right, when will it come out?

[02:30] <elmex> QMario: in 5-7 years

[02:30] <elmex> QMario: when parrot is finished, and perl6 specced out, and perl6 parser is implemented

[02:30] <elmex> they already took quite some years

[02:31] <QMario> What is parrot?

[02:31] <elmex> the VM which will run perl6

[02:31] <elmex> perl6 will be compiled to actual bytecode, which will be run by a generic VM. 

[02:32] <elmex> QMario: that parrot vm isn't finished yet, but it already runs python pretty well. - not that many python programmers are concerned :)

[02:32] <QMario> Virtual Machine? Is this the first for Perl? Does Perl want to "copy" Java now?

[02:32] <lscd> there are a lot of good reasons to use vms; java's far from their inventor

[02:32] <elmex> QMario: well, yes, a vritual machine. and no, the java vm is for static languages

[02:33] <elmex> QMario: the new VM will be very dynamic

[02:33] * lscd wonders about it and smalltalk

[02:33] <elmex> QMario: they also say: 'parrot will be fast, because we make it fast' or: 'parrot will be fast because it will be fast'

[02:33] <QMario> Are there any prototypes out yet?

[02:34] <elmex> QMario: yes, the parrot vm is already quite something

[02:34] <elmex> QMario: just recently there was a completly new garbage collector designed for it

[02:34] <elmex> QMario: and it already runs many toy-languages

[02:34] <QMario> What are toy languages?

[02:34] <elmex> QMario: and also not-so-toy languages

[02:34] <elmex> QMario: like brainfuck

[02:35] <lscd> hq9++!

[02:35] <elmex> QMario: the brainfucklanguage is just a toy

[02:35] <elmex> nothing serious, but parrot can run it :)

[02:35] <QMario> Please refrain with the language. :(

[02:35] <lscd> elmex: hm.. i wouldn't quite call brainfuck a toy, though it's not for real apps

[02:35] <elmex> QMario: the programing language really is named 'brainfuck'

[02:35] <lscd> QMario: that's the name of the language

[02:35] <lscd> 'brainfuck' is an english term, which is not an expletiative

[02:35] <elmex> i'm sorry if it insults you :)

[02:35] <lscd> no more than 'asset' is

[02:36] <lscd> or 'associate'

[02:36] <QMario> Why would someone name a programming language with that name?

[02:36] <elmex> QMario: and the parrot VM already runs the python languages.

[02:36] <lscd> QMario: because it f*'s with your brain ;)

[02:36] <elmex> QMario: because the language is ugly like hell

[02:36] <QMario> They should translate the name into 133t.

[02:37] <QMario> Elmex, Hell is much worse than anything you are experiencing right now.

[02:37] <elmex> QMario: i don't think so :)

[02:38] <QMario> Or at least use "***" signs.

[02:38] <QMario> What would the name be in 133t anyway?

[02:38] <elmex> QMario: well, afterall, if you know perl5 and want to learn perl6: FORGET EVERYTHING YOU KNEW ABOUT Perl :) Perl6 isn't much like perl5 anymore

[02:38] <QMario> Why not?

[02:38] <elmex> QMario: because they throw away perl5 completly, and designed a completly new language from scratch

[02:38] <QMario> I am still learning Perl5.

[02:39] <elmex> me too, for 5 years now

[02:39] <QMario> Well, is it going to be OOP?

[02:39] <elmex> perl5 is pretty OOP

[02:39] <elmex> just get around learning about packages and bless

[02:39] <elmex> it's really the same

[02:39] <QMario> What is "bless"?

[02:39] <elmex> but perl6 will have class { }

[02:39] <elmex> QMario: perldoc perltoot

[02:40] <elmex> QMario: or: perldoc perlboot

[02:40] <elmex> QMario: that are tutorials about perl5' OOP

[02:41] <QMario> Why don't they teach Perl in Computer Science?

[02:41] <elmex> QMario: but perl6 will have a class {} deklaration and everything, and more .... and it will be easier in perl6 to write code noone will understand

[02:41] <elmex> QMario: i have no idea why they don't

[02:41] <QMario> What about Python?

[02:41] <elmex> QMario: i also have to learn Java in CS ... but it really isn't much of a pretty language, it actually sucks IMHO.

[02:41] <lscd> QMario: probably some people do; but from a cs point of view, there's not much point to perl

[02:41] <elmex> i don't know Python myself enough, i just know i don't like it

[02:41] <QMario> Why not?

[02:42] <lscd> it's not got as much industry support as, say, java; nor is it particularly nice from a language-designer point of view

[02:42] <elmex> i learned haskell in the last year of my studies for CS

[02:42] <elmex> Java is just hyped

[02:42] <lscd> elmex: eh, python's fairly decent

[02:42] <lscd> elmex: sure, i hate java; but a lot of cs courses teach it

[02:42] <elmex> lscd: i believe so, yes

[02:42] <elmex> lscd: yes ;(

[02:42] <elmex> lscd: here too

[02:42] <lscd> including mine, alas

[02:43] <elmex> lscd: but thats not a reason for java

[02:43] <elmex> lscd: also many people use windows :)

[02:43] <elmex> and it's not good

[02:43] <elmex> i really hope Perl6 will be better than Java

[02:44] <elmex> and 'better' than Perl5 - note: i haven't defined 'being a better language' ye

[02:44] <elmex> t

[02:45] <elmex> i really don't know anyone who is into programming as a hobby or a free software programme, who likes to program in Java...

[02:45] <elmex> i think it's a buissiness language

[02:45] <elmex> hyped like windows

[02:46] <elmex> broken by design like windows

[02:46] <lscd> elmex: yes, exactly

[02:46] <elmex> and kept alive by hype and monopoly

[02:46] <Khisanth> the next cobol ...

[02:46] <elmex> hehe :)

[02:46] <lscd> lots and lots of advertising dollars to keep it in the eyes of 'decision makers' too

[02:46] <elmex> there are many lines of cobol in the world still :)

[02:46] <lscd> Khisanth: yep, i've been calling it that for ages

[02:47] <elmex> can you reach http://www.c2.com/ ?

[02:47] <Khisanth> there are still many lines of everything in the world still

[02:47] <elmex> i have difficuties to connect to port 80 there and get a response

[02:51] <svnbot6> r6696 | fglock++ | * TODO update

[02:51] <Khisanth> same here ...

[02:52] <elmex> interesting

[02:52] <elmex> *sob*

[03:52] <svnbot6> r6697 | Darren_Duncan++ | /ext/Algorithm-TokenBucket : converted all 3 tabs in TokenBucket.pm to spaces, matching the indent style of the rest of the file

[04:04] <svnbot6> r6698 | Darren_Duncan++ | /ext/Benchmark : in Benchmark.pm, replaced 10 tabs with 8 spaces each (Algorithm-TokenBucket was also 8), matching the space-indent style in the rest of the file; likewise replaced 31 tabs in basic.t

[04:04] <svnbot6> r6699 | Darren_Duncan++ | /ext/File-Spec : in Win32.pm, replaced 1 tab with 4 spaces, matching the space-indent style in the rest of the file

[04:10] <svnbot6> r6700 | Darren_Duncan++ | /ext/Kwid-Event-Parser : in Parser.pm, replaced 14 tabs with 4 spaces each, matching the space-indent style the rest of the file

[04:22] <svnbot6> r6701 | Darren_Duncan++ | /ext/libwww-perl : in Status.pm, replaced 50 tabs with 8 spaces each, matching the space-indent style of the rest of the file; likewise replaced 19 tabs in Headers.pm with 8 spaces each, then reindenting 4 lines to be 2 spaces per level like the rest of the file; in Cookies.pm, replaced 4 tabs with a variable number of spaces each, to line up 2 columns of values

[04:34] <svnbot6> r6702 | Darren_Duncan++ | /ext/MIME-Base64 : in Base64.pm, replaced 32 tabs with 8 spaces each, matching the space-indent style in most of the file, and further cleaned up the indents in almost 20 other lines

[04:46] <svnbot6> r6703 | Darren_Duncan++ | /ext/Net-IRC : in IRC.pm, replaced 122 tabs with 8 spaces each, matching the space-indent style in most of the file; in IRC-OO.pm, likewise replaced 59 tabs; in SeenExt.pm, likewise replaced 2 tabs

[04:46] <svnbot6> r6704 | Darren_Duncan++ | /ext/Perl-Compiler : in Node_pm_gen.pl, replaced 6 tabs with 4 spaces each, matching the space-indent style of most of the file

[04:58] <coral> oh.

[05:25] <dduncan> oh, yes

[05:28] <svnbot6> r6705 | Darren_Duncan++ | /ext/Perldoc : in Node.pm, replaced 3 tabs with 8 spaces each, matching the space-indent style of most of the file; in Text.pm, 1 such replacement; in WS.pm, 6 such replacements; in 01-dom.t, 6 such replacements

[05:34] <svnbot6> r6706 | Darren_Duncan++ | /ext/Pod-Event-Parser : in Parser.pm, replaced 13 tabs with 4 spaces each, matching the space-indent style of most of the file (the tabs were in nearly identical places to the Parser.pm file in Kwid-Event-Parser)

[05:37] <Aankhen``> darr: Where were the Tabs in Status.pm?

[05:37] <Aankhen``> Er.

[05:37] <Aankhen``> dduncan even.

[05:38] <Aankhen``> I haven't used hard Tabs anywhere...

[05:38] <Aankhen``> 'Least, not knowingly. :-P

[05:39] <dduncan> oh, they *were* there ... run a diff and you'll see them

[05:39] <svnbot6> r6707 | Darren_Duncan++ | /ext/Set : in Hash.pm, replaced 9 tabs with 8 spaces each, matching the space-indent style of most of the file; replaced 15 tabs in Set.pm likewise

[05:39] <dduncan> the thing is, with every file I've fixed today, each file was mostly spaces, and a few lines with tabs

[05:39] <Aankhen``> Hmm.

[05:39] * Aankhen`` tries to recall.

[05:39] <Aankhen``> Oh, right.

[05:40] <Aankhen``> I copy-pasted that hash.

[05:40] <dduncan> in most cases, its like someone was working on them in an editor that had tab stops at 8 characters and ...

[05:40] <dduncan> to be lazy, whenever they were in 4 indent levels (they used 2 chars per indent) they typed a tab rather than 8 spaces

[05:40] <dduncan> and their editor wasn't configured to enter 8 spaces when a tab is pressed

[05:40] <Aankhen``> Well, tip o' the hat to you. ;-)

[05:41] <dduncan> deductive reasoning

[05:41] <dduncan> that's the only way that things lined up properly; and on my editor where indents are 4 chars, those tabs looked messed up

[05:41] <Aankhen``> My Tabs are set to 4 (spaces) too.

[05:42] <dduncan> you use 2 chars per indent level usually, right?

[05:42] <Aankhen``> Not me, iblech.

[05:42] <Aankhen``> I use a single Tab, i.e. 4 spaces.

[05:42] <dduncan> well, a lot of the files I'm working with are configured that way

[05:42] <Aankhen``> Headers.pm was iblech's work.

[05:42] <dduncan> s/working with/fixing/

[05:43] * Aankhen`` crosses his fingers and tries to build Pugs.

[05:43] <dduncan> right now I'm only fixing the /ext, not the core

[05:43] <Aankhen``> Bleh, so much for that.

[05:44] <dduncan> Pugs 'make' worked fine last I tried

[05:44] <Aankhen``> It hasn't been working for me for about a week and a half.

[05:44] <Aankhen``> Hmm, a little less than that.

[05:45] <dduncan> while I prefer 4 chars per indent level, I'm not going that far as to reformat all the files I see ... I'm just doing the minimum of replacing tabs with spaces, to make it look to everyone else what it looks like to the main author

[05:45] * Aankhen`` nods.

[05:45] <Aankhen``> OK.

[05:45] <Aankhen``> I need to exercise, shower, eat brunch... not necessarily in that order.

[05:45] <Aankhen``> BBL. &

[05:46] <dduncan> also, in every case I've hit so far, its obvious that the author didn't intend to use tabs-only, since they aren't ubiquitous, but those got in by accident or laziness

[05:46] <dduncan> back in the day, I used tabs on purpose for all my indenting, and consistently so, but this week I converted all those to spaces, consistently

[05:47] <dduncan> I haven't hit anyone else using all-tabs for indenting yet

[05:57] <svnbot6> r6708 | Darren_Duncan++ | /ext/Test : in Test.pm, replaced 17 tabs with either 4 or 8 spaces each, matching the space-indent style of most of the file

[06:03] <svnbot6> r6709 | Darren_Duncan++ | /ext/Test-Builder : in 022_Test_Builder_Test_Fail.t, replaced 8 tabs with 4 spaces each, matching the space-indent style of most of the file; replaced 2 tabs likewise in 030_Test_Builder_Output.t

[06:03] <svnbot6> r6709 | Darren_Duncan++ | ; replaced 6 tabs likewise in 040_Test_Builder_TestPlan.t

[06:03] <svnbot6> r6710 | Darren_Duncan++ | /ext/Tree : in Tree.pm, replaced 119 tabs with 4 spaces each, matching the space-indent style of most of the file; likewise replaced 1 tab in FindByPath.pm

[06:09] <svnbot6> r6711 | Darren_Duncan++ | /ext/Tree : in extended_tests.t, replaced 345 tabs with 4 spaces each

[06:10] <dduncan> fyi, and with that, there are zero files left in /ext containing tab characters

[06:10] <dduncan> as for the rest of the Pugs distro, we shall see ...

[06:10] <luqui> dduncan, what made you decide to go on this textual ethnic cleansing?

[06:11] <dduncan> inspiration from "Perl Best Practices" for one thing ... also, everyone who used tabs besides me in /ext used a mixture of tabs and spaces in the same file, and that really messes up how code looks to anyone but the author

[06:12] <dduncan> this is all in an effort to increase maintainability of code

[06:12] <luqui> dduncan, are you also adding the appropriate vim and emacs modelines?

[06:12] <luqui> so that in the future when people press "tab", they are consistent with the file?

[06:12] <dduncan> I don't use those programs ... don't know how

[06:12] <dduncan> I know how to do that in BBEdit

[06:13] <coral> # :ts=4 mumble something or other for vim

[06:13] <coral> i think

[06:13] <dduncan> I know those programs can do it though ... I think Best Practices even provides the config specs

[06:13] <dduncan> for vim and emacs

[06:13] <luqui> well, that is another cleansing for another day

[06:14] <luqui> also, you might find you have trouble normalizing with the haskell code

[06:14] <luqui> because it's much more "alignment"-ly indented

[06:15] <dduncan> meanwhile, lib/pugs/hack.pod was updated a few days ago to specify that we use spaces exclusively for indents, so no new tabs should appear

[06:15] <luqui> yeah, but nobody really reads that

[06:15] <dduncan> I'm leaving the haskell code until last

[06:15] <dduncan> as for that file, its where autrijus said that instruction should go

[06:15] <luqui> sure

[06:15] <luqui> nobody really reads anything before hacking

[06:15] <luqui> or at least.. I don't

[06:16] <dduncan> afaik, autrijus uses spaces already, as do most others, especially those working on the haskell

[06:16] <dduncan> well, the bottom line is to be self-consistent

[06:16] <luqui> but I think hack.pod is the best place for it

[06:16] <dduncan> at least on a per-file basis, all indents should use the same characters and have the same n-chars per level

[06:17] <dduncan> but having all the files the same also helps people that copy and paste between them

[06:17] <dduncan> or otherwise work with multiple files, so they don't have to change habits within a project

[06:18] <luqui> dduncan, except for haskell

[06:18] <luqui> I mean, sortof

[06:18] <luqui> there is a "normal indent"

[06:18] <luqui> that's used after, say, a "do"

[06:18] <dduncan> is haskell whitespace-sensitive?

[06:18] <luqui> but there's also a lot of indenting up to where the expression started

[06:18] <luqui> yes

[06:19] <dduncan> well, I think I'll leave the haskell alone entirely, since I don't hack haskell

[06:19] <luqui> that might be a good idea...

[06:19] * luqui has been surprised a few times by the indentation rules

[06:19] <dduncan> I'll focus on the perl 6 files and pod files, and perl 5 files, which I understand

[06:19] <dduncan> and that aren't whitespace sensitive

[06:20] * luqui thinks he will start another normalization project

[06:20] <luqui> normalizing all the internally-referenced operators into the global namespace

[06:20] <dduncan> in Perl 5 land, I'm making several changes to my modules to align with Best Practices ... whitespace is the first one

[06:21] <dduncan> the next CPAN releases will use space indents instead of tabs ... that change is already in my repository

[06:45] <svnbot6> r6712 | Darren_Duncan++ | /t/ : replaced indenting tabs with spaces in these files: kv.t, pairs.t, goto.t, try.t, io.t, readline_chomped.t, time.t, sort.t, zip.t, rounders.t, substr.t, trans.t, 02-strings-with-spaces.t.disabled, create_files.pl, system_tests, showav.c (they are all under 'builtins')

[06:45] <svnbot6> r6713 | Darren_Duncan++ | /t/* : replaced indenting tabs with spaces in t/builtins/undef.t (and that's the end of the 'builtins' subdirs)

[07:04] <dduncan> fyi, I will be skipping over the 3790 tabs in /t/rules/rules.t because that is a generated file

[07:04] <svnbot6> r6714 | Darren_Duncan++ | /t/* : replaced indenting tabs with spaces in these files under [data_types, junction, oo, operators]: enum.t, hash.t, pair.t, junction_any_pick.t, misc_junctions.t, instance.t, mutators.t, indirect_notation.t, chaining.t, overload.t, anonymous.t, conflicts.t, super.t, adverbial_modifiers.t, operator_overloading.t, pipe.t, precedence.t, quoting.t, smartmatch.t, splat.t

[07:04] <dduncan> otoh, the script that generated it could be fixed later

[07:22] <svnbot6> r6715 | Darren_Duncan++ | /t/* : replaced indenting tabs with spaces in the README file and these files under [packages, pugsbugs, pugsrun, rules, statements]: autoload.t, Test.pm, parse-fail.t, parsing_if.t, rule_used_in_Str.t, 07-dash-uppercase-v.t, der_grammar.t, grammar.t, control_blocks.t, gather.t, given.t, if.t, loop.t, next.t, redo.t, unless.t, while.t

[07:25] * GeJ wonders if dduncan does a perl oneliner or a pugs' one to replace the tabs with spaces

[07:25] <dduncan> no, I just do a "search and replace + save" in BBEdit

[07:25] <dduncan> also, BBEdit has a nifty multi-file search function

[07:26] <dduncan> so I can just point it at a folder and say, "show me all files having tabs"; it gives a list, complete with count

[07:26] <dduncan> then I double-click each list item, hit replace all (or other custom step depending on circumstances) and save

[07:27] <GeJ> the GUI is the path to the dark side

[07:27] <dduncan> that's where I got the count of tabs replaced in the /ext stuff earlier ... I didn't count them by hand

[07:27] <dduncan> I find it a lot easier to use than a command line text editor

[07:27] <dduncan> under the circumstances, it seemed too much trouble to write a script, also

[07:28] <dduncan> I wanted to see the situation manually for each file to ensure the replacement is done right per circumstances

[07:28] <dduncan> and BBEdit has so much script-like goodness built-in, I'm not doing *that* much work

[07:31] <GeJ> Was just kidding anyway. I guess everybody has his own tools of choice. As long as the job is done, that's not a problem :)

[07:32] <dduncan> you got it, buddy

[07:46] <dduncan> and with r6717, all tabs in /t/* are gone also, save the generated rules.t

[07:46] <svnbot6> r6716 | Darren_Duncan++ | /t/* : replaced indenting tabs with spaces in these files under [subroutines, syntax, unspecced, var]: bare_block_with_dollar_underscore.t, currying.t, defaults.t, lvalue_subroutines.t, multi_sub.t, nested_named.t, sub_return_values.t, subroutine.t, unhashify.t, wrap.t, parsing_parens.t, subscript_parse_bugs.t, symbol_table.t, chop.t, config.t, coro.t, method.t, roundtrip.t, default_scalar.t, is_constant.t, state.t, temp.t

[07:46] <svnbot6> r6717 | Darren_Duncan++ | /t/* : replaced tabs with spaces in t/unspecced/coro.t

[07:52] <svnbot6> r6718 | Darren_Duncan++ | /t_disabled/* : replaced tabs with spaces in these files under rules/from_perl6_rules: pos_modifier.t, hashkv.t, exhaustive.t, overlapping.t, propcharset.t, properties.t, counted.t

[07:54] <dduncan> there are approximately 19,724 tab chars left in pugs distro files, of which about 3,750 are in 2 skipped /t/* files

[07:55] <dduncan> I will skip the haskell files and anything just copied from outside

[07:55] <dduncan> mainly just the actively worked on non-haskell files will be looked at

[07:56] <luqui> evalbot is now on an auto-update loop

[07:56] <luqui> somebody should commit so I can see if it is working

[07:56] * luqui has a commit coming, so it's no biggie

[07:57] <dduncan> I'll also add to the Changes file what I've been doing, so thats a commit

[07:57] <dduncan> otherwise, I'll postpone any other detabbing changes for a few days, to let the large number I did today shakedown

[07:58] <dduncan> ensure the smoke etc continues to work

[08:02] <mugwump> why the sudden whitespace changes?

[08:07] <dduncan> to improve maintainability of pugs

[08:07] <dduncan> a good 100 files had a mixture of tabs and spaces in them for indenting, which don't look right in most editors

[08:07] <dduncan> having all spaces, as recommending in Perl Best Practices, makes the code look right to everyone

[08:07] <svnbot6> r6719 | Darren_Duncan++ | Added new ChangeLog section for revision 6.2.10, added comment about my recent tab expanding

[08:09] <dduncan> I also note that, while its a month since 6.2.9 went out, either no one has been updating the ChangeLog about it in that time, or they've accidentally added to 6.2.9, as I almost did ... will check commit log to know for sure what has been happening ...

[08:10] <mugwump> personally I haven't even touched anything pugs-ish in the last month.  Hopefully I'll get back into it soonish

[08:11] <dduncan> fyi, in perl 5 land, I converted Rosetta all to space indenting yesterday ... in the repository, but plop nonfunctional then

[08:11] <luqui> ?eval 42

[08:11] <evalbot_6718> 42 

[08:11] <evalbot_6719> 42 

[08:11] <luqui> well... um... it almost worked

[08:11] <dduncan> dood

[08:12] <dduncan> oh, and ossf looks different today

[08:12] * luqui should rtfm for "kill" :-)

[08:13] <dduncan> according to ossf, there was indeed no changes to ChangeLog between Aug 3 and today, so no problem re what I mentioned

[08:14] <dduncan> anyway, I'm off to bed (now 1:14am here) ; good night all

[08:15] <mugwump> nn dduncan 

[08:19] <svnbot6> r6720 | luqui++ | In heredoc support, instead of giving the parser (string "hopefully this won't

[08:19] <svnbot6> r6720 | luqui++ | match qz87jh##") for the beggining string, I just gave it the parser (fail),

[08:19] <svnbot6> r6720 | luqui++ | which will never match!

[08:19] <hcchien> well, pugs make failed.src/Pugs/PIL1.hs-drift failed at util/drift.pl line 8

[08:19] <luqui> huh, weird

[08:19] <luqui> hcchien, what platform?

[08:20] <hcchien> luqui: OS 10.4

[08:21] <luqui> I'm not sure what drift is

[08:21] <luqui> but it looks like a hugs thing

[08:21] <dduncan> did pugs used to work for you under 10.4?

[08:22] <dduncan> I heard there may still be outstanding issues with that system on various software fronts ... I'm sticking to 10.3.9 for now just in case

[08:22] <hcchien> dduncan: yes. I got the 6.2.9 compiled before.

[08:22] <luqui> ?eval 'test eval'

[08:22] <evalbot_6719> 'test eval' 

[08:23] <dduncan> evalbot seems fast now, unlike a few months back ... maybe its the prelude at work?

[08:23] <dduncan> there used to be a few seconds delay in replies

[08:23] <hcchien> 10.4 uses gcc 4.0 for default. It makes some troubles.

[08:23] <luqui> dduncan, well, I'm compiling it optimized

[08:23] <luqui> and the prelude is precompiled

[08:24] <luqui> so it's probably a combination of the two

[08:24] <dduncan> supposedly ghc 6.4.1 works with Tiger, but 6.4.0 had issues

[08:24] <luqui> wooo!  dynamic updating!

[08:26] <dduncan> that is so ... totally ... kewl!

[08:26] <dduncan> although not much more technically complex than the smoker, I imagine

[08:26] <luqui> uh, it was a lot less complex than the smoker

[08:27] <luqui> it's a 20 line script :-)

[08:27] <dduncan> I just meant that the smoker's been auto-updating for awhile

[08:27] <luqui> oh, yeah

[08:27] <luqui> and evalbot used to

[08:27] <luqui> but then iblech stopped running evalbot and I started

[08:27] <luqui> and I didn't ask him for his script

[08:28] <luqui> plus I added the revision number name magic

[08:28] <luqui> pretty high achievement, don't you think %-)

[08:28] <dduncan> the rev number is a plus ... lets us know who's talking

[08:29] <hcchien> does anybody run the pugs on Mac OS 10.4?

[08:29] <dduncan> I will by christmas, probably, but not meanwhile

[08:32] <luqui> oops, forgot to waitpid in evalbot

[08:51] <Juerd> 03:11 < jroc> Juerd: are you still offering accounts on feather?

[08:52] <Juerd> Yes, and if you hadn't left, you'd have read this.

[08:52] <godsmack1r> What are accounts of feather, btw?

[08:52] <godsmack1r> Huh, why isn't there a MANIFEST?

[08:52] *** godsmack1r is now known as rafl

[08:52] <Juerd> feather is a machine

[08:52] <Juerd> A feather account is an account on that machine

[08:53] <integral> no MANIFEST in svn,  only in distributions, I thought

[08:54] <rafl> Sounds plausible. How is it generated? Is there a script?

[08:54] <Juerd> At random

[08:55] <integral> "make manifest" iirc

[09:00] <dduncan> that's right ... no MANIFEST is checked in to svn, only generated for distros

[09:00] <dduncan> its much simpler, since people have kept forgetting to update it, back in the older days of pugs when the MANI was in svn

[09:01] <dduncan> anyway, as my last comment before I truly go to bed, r6720 goes all the way through 'make' without problems ... I'll try 'make test' tomorrow

[09:07] <svnbot6> r6721 | Stevan++ | Perl6::MetaModel 2.0 -

[09:07] <svnbot6> r6721 | Stevan++ | * added more tests to t/09_subclassing_Class.t 

[09:07] <svnbot6> r6721 | Stevan++ |     - you can easily create $::Class subclasses through the

[09:07] <svnbot6> r6721 | Stevan++ |       Perl6::MetaModel macros

[09:07] <svnbot6> r6721 | Stevan++ |     - added new field for Perl6::MetaModel macro "metaclass"

[09:07] <svnbot6> r6721 | Stevan++ |       to allow for easy composition using classes other than

[09:07] <svnbot6> r6721 | Stevan++ |       $::Class 

[09:31] <svnbot6> r6722 | rafl++ | Debian:

[09:31] <svnbot6> r6722 | rafl++ | * Build optimized by default.

[09:31] <svnbot6> r6722 | rafl++ | * smoke-pugs instead of smoke as default test target.

[11:14] <kgftr|konobi> moo

[11:18] <joao> moo is cool :-)

[11:18] <joao> (i mean, moo.di.uminho.pt:7777 ) :-)

[11:24] <kgftr|konobi> castaway is in the building

[11:24] <kgftr|konobi> =0)

[14:06] <vkon> given PIL mention in .\docs\notes\plan, does it already fully-working? Also, file \src\Pugs\PIL1.hs-drift looks good; will be there PIL2.hs?

[14:08] <vkon> ?eval $?PUGS_VERSION

[14:08] <evalbot_6723> \'Perl6 User\'s Golfing System, version 6.2.9, August 3, 2005 (r6723)' 

[14:08] <svnbot6> r6723 | dankogai++ | My first contribution to Pugs.  Enjoy! -- dankogai

[14:21] <nothingmuch> wtf wrt tabs vs spaces? why not just keep things as they are? I mean, what does it really matter?

[14:21] * luqui knows

[14:22] <luqui> it's dduncan...

[14:22] <nothingmuch> that much I know

[14:22] <nothingmuch> i also know that dduncan did this to his own code

[14:22] <luqui> no, I mean, it's dduncan, that's why

[14:22] <nothingmuch> beh

[14:22] <nothingmuch> this is crummy since it ruins the ability to properly diff before and after tab conversion,

[14:22] * luqui thinks he made a similar point

[14:22] <nothingmuch> oh welll... too late now. =(

[14:23] <luqui> that you kill anybody's pending patches

[14:23] <vkon> "diff -b " will help

[14:23] <nothingmuch> yeah, that too

[14:23] <nothingmuch> vkon: it's besides the point, the conversion is pointless

[14:23] <nothingmuch> there is no need for consistency

[14:23] <nothingmuch> except in the haskell code where it's already enforced

[14:23] <luqui> well, damian is really to blame, right?

[14:23] <nothingmuch> oh shit, that new book said so?

[14:23] <luqui> yeah

[14:23] <vkon> nothingmuch: sure!

[14:24] <nothingmuch> well, whatever

[14:24] * nothingmuch finished reading mail and goes back to reading

[14:25] <nothingmuch> well, at least I made some perlmonks XP off damian's book ;-)

[14:25] <nothingmuch> http://perlmonks.org/?node_id=488288

[14:27] <nothingmuch> oh, i'd like to make another complaint

[14:27] <nothingmuch> higher order functions are yucky in forth

[14:29] <integral> .oO( Joy )

[14:32] <svnbot6> r6724 | Stevan++ | Perl6::MetaModel 2.0 ->

[14:32] <svnbot6> r6724 | Stevan++ | * added t/15_submethods.t which is converted from 

[14:32] <svnbot6> r6724 | Stevan++ |   the Pugs t/oo/ test suite

[14:32] <svnbot6> r6724 | Stevan++ |     - fixed bug in submethod handling revealed by 

[14:32] <svnbot6> r6724 | Stevan++ |       this test (TDD++)

[14:32] <svnbot6> r6724 | Stevan++ | * some work on Synopsis 12.5 (a.k.a The Perl 6 Meta Object Protocol)

[14:41] <renormalist> Hi all! I started an Emacs cperl6-mode by deriving it from cperl-mode and evolutionary adding new perl6 syntax to it to make indenting and highlighing work again. It already works for me and would like to contribute that to Pugs. Yesterday, putter tried to find someone who could give me commit permissions but unsuccessful. Now I try it again today. So is someone interested and if yes, can give me permissions to commit?

[14:44] <putter> renormalist: putter awoke to find himself an admin.  there should be an invite in your inbox.

[14:45] <luqui> putter, congratulations.   I know it is a high honor to be an admin on a project like this that has such tight code security

[14:45] <luqui> :-)

[14:47] <putter> lol ;)

[14:47] <putter> renormalist: and please a yourself to AUTHORS.  tnx.

[14:49] <putter> s/a yourself/add yourself/  sigh

[14:50] * putter pictures standing on a street corner with a placard - "Contribute to PUGS \  Free commit bits!"

[14:50] <putter> hmm.  maybe at the next local pm meeting

[14:50] <luqui> hehe

[14:55] <renormalist> ok, I'm registered now.

[14:56] <renormalist> I now read docs to see how do I edit in pugs svn.  

[14:58] <putter> prolog rx engine is now passing 85% of perl5's re_tests file-o-tests.  (which is very incomplete, and I've been coding-to-tests rather than coding-and-testing, so actual coverage is way less than 85%)  long caveat aside...   so it's almost time for care-free refactoring and the start of p6 integration.  (its a combined parser)

[15:00] <luqui> renormalist, are you familiar with svn?

[15:00] <luqui> putter, what is the scope of the rx engine?

[15:01] <luqui> that is, in what subportion of pugs will it be used?

[15:01] <putter> It _should_ (unimplemented) be posible to be reentrant, and to fully support embedded code (source filters++).  but near term objective is for modules/Grammars/Perl6.pm to start working, so someone can push on a p6-rules-based p6 parser.

[15:01] <vkon> putter: you mean tests in t/rules.t? I understood a couple of bits there, but mostly those tests are based on parrot, which is currently not fully complete.

[15:02] <renormalist> luqui: yes, regular svn user. I already have an anonymous pugs checkout, but don't know whether I re-checkout with username/pw or whether I can svn switch or the like or whether it works different at all.

[15:02] <luqui> renormalist, just commit

[15:02] <luqui> it will ask you for username and password then

[15:02] <renormalist> ah, ok.

[15:03] <renormalist> have to try it later, currently at the wrong machine.

[15:03] <luqui> putter, so...

[15:03] <luqui> main pugs?

[15:03] <luqui> is it perl 6 code

[15:03] * luqui is very confused

[15:03] <putter> vkon: the perl 5.9.something distribution has an t/op/re_tests (?) , driven by a t/op/regex.t (?).  one-line-per-test data file, pattern, string, expectation.   probably what our rules.t and perl5.t were ultimately derived from.

[15:06] <svnbot6> r6725 | fglock++ | * perl5/List - map() uses uses Code.arity() information

[15:06] <putter> luqui: re so..., just an update to 1- keep me motivated, and 2- create interest&expectation of delivery so it doesnt become yet another unreleased neat thing sitting on my disk.

[15:06] <vkon> putter: mostly, in t/rules/rules.t there should be replaced \d to <[:digits:]> and similar to this... But not all classes are implemented in parrot

[15:07] <vkon> putter: to say, there is a class [:alpha:] but it is not what should correspond to \w, because of underscore...

[15:07] <putter> re what is,  prolog, with a perl wrapper.  prolog running on swi via http://search.cpan.org/~salva/Language-Prolog-Yaswi-0.08/ .

[15:08] <integral> putter: it doesn't work in AI::Prolog?

[15:08] <putter> vkon: err, why replace \d ?  \d has to work too...

[15:09] <vkon> putter: indeed, \d should work, but it must be replaced (IMHO) within character classes, say, in [\d]

[15:10] <vkon> putter: actually a script producing t/rules/rules.t was buggy, and so many places were hsnd-edited afterwards

[15:11] <putter> integral: I'm not familiar with how "real" AI::Prolog is.  My fuzzy recollection is it is still rather a toy system.  Regardless, aside from DCG's, most of it should be "portable" prolog (there's an oxymoron).

[15:12] <integral> hehe.

[15:12] <putter> vkon: re "must be replaced" - does the spec say so?   P5 certainly permits [\d].

[15:14] <putter> t/rules/rules.t has had a long and rich life supporting multiple projects, and an evolving p6 rules syntax.  feel free to grab a recent re_tests from perl 5.9.mumble and spit out a new one.

[15:15] <vkon> putter: well, I must admit you know this better. I walked through files few days ago, and begun to vaguely understand which files stand for. I didn't knew at which side to fix.

[15:16] <vkon> putter: but which worker script will spit out a new one? (I tried to ask this here :) )

[15:16] <svnbot6> r6726 | fglock++ | * perl5/Value - new Class 'Rat'

[15:17] <putter> np.  putter wishes yet again for a vcs which permits "doesnt clutter up the code" code annotation.

[15:17] <putter> s/vcs/development environment/

[15:17] <vkon> putter: I knew that Perl5 allows [\d], but does Perl6 allows this??

[15:19] <putter> I'm not sure.   will have to know in another day or few. ;)

[15:23] <vkon> putter: to summarize,  t/rules/rules.t is *not* regenerated anymore, because 1. generator script is not found anywhere, and 2. many hand-edits are done. (however, once that script will be found, its better to improve it, and not  t/rules/rules.t)

[15:28] <putter> <[abc]+<digit>>  vs  <[abc\d]>   hmm... i didnt find anything better / more recent  in Bible than <[,\h]> in A05.  havent checked p6l.

[15:31] <vkon> ?eval 'a' ~~ /<[abc]+<digit>>/

[15:31] <evalbot_6726> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[15:31] <putter> vkon: the end-game is perhaps perl5-like automated testing.  I started to say I suspect pugs isnt fast enough for that yet, but with parser backtracking and memory size issues, I'm not sure.

[15:32] <putter> The script which generated rules.t is long gone (was on another project (damian's p5 rules implementation), and the regex language has changed since then).

[15:32] <putter> So any scripted recreation of rules.t will be a new script.

[15:33] <fglock> putter: I need some help making anonymous blocks work in PIL-Run - map() compiles fine, but there is an error in p5

[15:33] <svnbot6> r6727 | fglock++ | * PIL-Run - implemented map()

[15:34] <putter> Until such a script is written, further editing of rules.t is fine.  it's what we've got.

[15:35] <vkon> putter: agreed... if there's no objections, I'll see that big file within next 4-5 hours and will commit my vision of changes there... with explanatory comments....  any objections?

[15:36] * putter marvels again at autrijus conversing in n simultaneous threads on m channels

[15:36] <putter> vkon: go for it.

[15:37] <putter> fglock ...

[15:38] <vkon> ok then.

[15:40] <autrijus> putter: me? what? :)

[15:41] <autrijus> putter: btw, you are a metacommitter now, so feel free to committerify renormalist

[15:41] <fglock> is pick() supposed to remove the selected element from hash/array?

[15:41] <autrijus> putter: http://rt.openfoundry.org/Foundry/Project/Admin/Members/?Queue=pugs is the admin interface after you log in

[15:41] <putter> luqui: re what is, perl5 starts up embedded prolog, loads it with prolog code defining an engine, creates "rx" objects with hand off to prolog for evaluation, and postprocess result into Match objects.  eventually should be able to integrate this with a runtime (js-w-perl5 or pilrun), but immediate goal is just to make possible a p5 script, with a heredoc of p6 rules, which parses things (to permit grammar creation).

[15:41] <putter> autrijus: done. :)

[15:42] <autrijus> cool!

[15:42] <putter> s/creation/development/

[15:42] <autrijus> come to think about it, I'll spread the metacommittership a bit more

[15:43] <putter> ok, fglock, sorry for the delay.  ok, can you give me a test string to pursue?

[15:43] <autrijus> luqui and fglock: you two are now metacommitters as well. I think we should make all channel regulars metacommitters to avoid the renormalist situation :)

[15:43] <fglock> $a={1}

[15:43] <fglock> autrijus: :)

[15:46] <autrijus> bbl... :)

[15:46] <fglock> putter: when map() works, uniq() and grep() can be implemented in PrimP6 :)

[15:47] <putter> ! :)

[15:47] <putter> hmm... I get a pilrun prelude parse error...

[15:48] <putter> the p6 prelude that is

[15:49] <nothingmuch> seen Alias

[15:50] <putter> fglock:  map should get a mm Code object?

[15:51] <fglock> yes

[15:54] <fglock> bbiab &

[15:55] <putter> oh.  putter was about to ask fglock to fill in the ###... in 6728.  ah well.

[15:57] <svnbot6> r6728 | putter++ | ApiX.pm: minor tweak.

[16:14] <putter> I am so gone.  fglock: p6 prelude wasnt working, so not even a little regression testing.  so I may have broken things.  I'll be back in 10 hours or so.

[16:14] <svnbot6> r6729 | putter++ | PIL-Run - quick and dirty first cut at Code support.  The Code branch of p6_new needs to be filled in.  Untested.  Not even regression testing done.  fglock++

[16:15] <putter> bye all &

[16:35] *** typester is now known as typeout

[16:50] <svnbot6> r6730 | fglock++ | * PIL-Run - map() works! putter++

[17:03] <rafl> Juerd: What distribution runs feather?

[17:04] *** typeout is now known as typester

[17:08] <svnbot6> r6731 | autrijus++ | * Thoroughly fail+todo this test as on OSX it triggers the nasty 'EVACUATED object entered!' bug. Need to retest once GHC 6.4.1 is released.

[17:19] <rafl> Are all those .hs, .lhs, .c and .o files really needed to be installed?

[17:19] <Juerd> rafl: Debian

[17:20] <Juerd> rafl: of course.

[17:21] <rafl> Juerd: Great. May I do some builds on that machine? Building pugs + smoking sucks a but on my 800MHz machine with 512Mb RAM.

[17:21] <Juerd> rafl: You may request an account by email

[17:21] <Juerd> rafl: I need your real name

[17:23] <rafl> Juerd: It's in my /whois. my email address is [email@hidden.address] Or do you need an email because of a gpg signature or something?

[17:23] <Juerd> I need an email for my own administration :)

[17:23] <Juerd> And because that is accepted in .nl as an official document

[17:24] <rafl> Juerd: OK, where may I send it to?

[17:24] <Juerd> This is just in case you become a mad h4x0r one day :)

[17:24] <Juerd> Any of my email addresses, except the gmail one.

[17:26] <svnbot6> r6732 | autrijus++ | * add Lola Lee to AUTHORS for the report on the previous t/oo/destruction.t change

[17:27] <rafl> Juerd: Sent.

[17:31] <svnbot6> r6733 | fglock++ | * implemented grep() in PrimP6, but it doesn't work yet

[17:35] <GeJ> poor evalbot, you're making it nuts

[17:37] *** typester is now known as sleepster

[17:39] <Juerd> rafl: Username rafl, florian or flo?

[17:39] <Juerd> rafl: Or different even?

[17:40] <rafl> Juerd: rafl is fine.

[17:49] <Juerd> rafl: see query

[17:50] <coral> is evalbot self-upgrading?

[17:50] <geoffb> coral, yep

[17:50] <geoffb> Added this morning

[17:51] <coral> neat :)

[17:53] <rafl> Juerd: No query received.

[17:53] <geoffb> coral, luqui++'s magic  :-)

[17:55] <svnbot6> r6734 | fglock++ | * PIL-Run - id(), clone()

[17:57] <Juerd> rafl: Weird.

[17:58] <Juerd> rafl: I did privmsg you

[17:58] <coral> luqui++

[17:58] <coral> it is definitely a bit odd to watch

[17:58] <coral> y'all should attach evalbot to workbench

[17:58] <Juerd> rafl: I'll do it in public then, trusting the people here

[17:58] <coral> so that it doesn't have to visibly exit/enter every time

[17:58] <Juerd> rafl: Your password is florra

[17:58] <coral> or some equivalent bot framework

[17:58] <Juerd> rafl: On feather.perl6.nl

[17:59] <Juerd> rafl: Change it asap

[17:59] <coral> otoh it's neat watching it leave/rejoin newer

[18:07] <rafl> Juerd: Done, thanks.

[18:07] <svnbot6> r6735 | fglock++ | * PIL-Run - implemented reverse(), but the string is not returned ???

[18:07] <Juerd> rafl: yw

[18:07] <Juerd> rafl: How are you going to test this, by the way? debootstrap?

[18:09] <obra> seen autrijus 

[18:10] <rafl> Juerd: I assume all pugs build-deps are installed? If yes I won't need deboostrap. If not I would probably need to use pbuilder (which I should, because it assures that I've got the build-Dep line right). That would require you to allow me to execute pbuilder as root using sudo.

[18:10] <Juerd> rafl: They are

[18:11] <Juerd> rafl: pugs is automatically built every 15 minutes :)

[18:12] <svnbot6> r6736 | fglock++ | * PIL-Run - implemented uniq() in PrimP6, but doesn't work yet

[18:13] <rafl> Juerd: pbuilder would be better anyway. But I would understand if you don't want to setup sudo.

[18:13] <obra> 'evening, lambdacamels

[18:21] <rafl> Juerd: Is there an svk/svn mirror on that box?

[18:21] <Juerd> rafl: Oh, if you want full sudo access, just ask for it

[18:21] <Juerd> rafl: Yes, read ~autrijus/config

[18:22] <Juerd> rafl: feather is a community box. Nothing on it is strict.

[18:22] <svnbot6> r6737 | fglock++ | * PIL-Run - supports Code.name(), Code.body(), Code.arity()

[18:22] <svnbot6> r6738 | iblech++ | * Usual svn props.

[18:22] <svnbot6> r6738 | iblech++ | * All examples/ which are tested in t/examples/examples.t:

[18:22] <svnbot6> r6738 | iblech++ |   Added remaining reminders to update examples.t and examples/output.

[18:22] <svnbot6> r6738 | iblech++ | * New examples/output/algorithms/lambda-calculus:

[18:22] <svnbot6> r6738 | iblech++ |   example.t tests the output of dankogai++'s lambda-calculus.p6 now.

[18:22] <rafl> Juerd: I don't need to be root. Only pbuilder needs to run as root.

[18:22] <svnbot6> r6738 | iblech++ | * pugs::hack: Added the settings needed to make <Tab> indent by four spaces in

[18:22] <svnbot6> r6738 | iblech++ |   Vim, dduncan++, can somebody add the appropriate settings for emacs?

[18:22] <Juerd> rafl: I'm not giving out partial root access :)

[18:22] <Juerd> That sounds and tastes like maintenance

[18:25] <rafl> Juerd: rafl ALL=(ALL) /usr/sbin/pbuilder in /etc/sudoers is enough, I guess.

[18:26] <rafl> (and installing pbuilder and cdebootstrap, of course.

[18:26] <rafl> s/$/)/

[18:26] <Juerd> no, that'll be ALL then.

[18:27] <Juerd> rafl: You got it

[18:28] <rafl> Juerd: That's not all. Sorry, user resi is not allowed to execute '/usr/bin/apt-get moo' as root on localhost.localdomain. when having resi ALL=(ALL) /usr/sbin/pbuilder in the sudoers file.

[18:28] <svnbot6> r6739 | fglock++ | * PIL-Run - exec()

[18:29] <Juerd> rafl: WHo's resi?

[18:29] <rafl> Juerd: A user on the box I'm working at currently.

[18:30] <Juerd> rafl: What can I do about that box?

[18:31] <rafl> Juerd: Nothing. It just shows that the line above in /etc/sudoers doesn't allow to execute everything as root.

[18:33] <Juerd> rafl: No, what you get will be ALL

[18:33] <Juerd> Because nobody gets custom config - that's too much work

[18:34] <rafl> :-(

[18:39] <rafl> Juerd: Wow.. that machine is fast!

[18:39] <svnbot6> r6740 | iblech++ | * t/builtins/control_flow/eval.t: skip in PIL2JS and PIL-Run.

[18:39] <svnbot6> r6740 | iblech++ | * PIL2JS: pugs-smokejs.pl: Hack:

[18:39] <svnbot6> r6740 | iblech++ |     my $a;     sub b { $a++ }; b();  # does not work; gets converted to...

[18:39] <svnbot6> r6740 | iblech++ |     my $a; our sub b { $a++ }; b();  # ...which does work.

[18:39] <svnbot6> r6740 | iblech++ |   See comment in pugs-smokejs.pl for a more detailled explanation.

[18:45] <svnbot6> r6741 | fglock++ | * fixed map slurpiness

[19:01] <geoffb> OK, there's something freakish about evalbot updating before svnbot mentions the commit

[19:01] <geoffb> But since svnbot has long been a bit sluggish, I'd say that's the place to go fix

[19:03] <svnbot6> r6742 | fglock++ | * PIL-Run -  '=:=' and Hash index use the same 'id' 

[19:12] <vkon> when 'ab' ~~ /(a|b)*/ evaluated, $0 appears to be an array containing all its matches, and not last value as in Perl5, thus causing many P5-derived tests to fail. Is it intentional? Looks like this is not hard to fix, but am I thinking in right direction?

[19:17] <vkon> nevermind, I'll get my big editor and see if I can fix this...

[19:18] <vkon> ?eval say "yep, this is so :)"

[19:18] <evalbot_6742> yep, this is so :) bool::true 

[19:27] <svnbot6> r6743 | rafl++ | * Added libyaml-perl to Build-Depends.

[19:27] <svnbot6> r6743 | rafl++ | * Added pugs-modules.dirs to install the directory for lintian overrides.

[19:33] <iblech> vkon: This might actually be the correct behaviour. Ping p6l?

[19:33] <svnbot6> r6744 | fglock++ | * perl5/List - map, grep no longer tested in t/list-operations.t

[19:33] <svnbot6> r6744 | fglock++ |   because they are higher level functions

[19:33] <svnbot6> r6745 | iblech++ | examples/network/:

[19:33] <svnbot6> r6745 | iblech++ | * svnbot.p6: Added documentation, including the anser to

[19:33] <svnbot6> r6745 | iblech++ |   "why does svnbot lag?".

[19:33] <svnbot6> r6745 | iblech++ | * README: Referred to svnbot.p6's POD.

[19:36] <iblech> geoffb: Indeed :) (BTW, evalbot doesn't need to be restarted (as evalhelper.p5 spawns a new pugs upon each ?eval), but I like it :))

[19:44] <svnbot6> r6746 | fglock++ | * perl5/List - refactored map()

[19:46] <Juerd> rafl: No, it's just not very slow

[19:47] <rafl> Juerd: Am I allowed to install some stuff? Some debian development tools mainly.

[19:51] <Juerd> rafl: Sure, go ahead. Just stick to debian packages.

[19:52] <Juerd> If you go compile things yourself, or forcefully install otherwise blocked packages, I'll have to kill you

[19:52] <Juerd> But in other circumstances, have fun :)

[19:52] <rafl> Juerd: Why didn't you btw? ghc isn't installed via dpkg, for example.

[19:52] <Juerd> Is too

[19:52] <Juerd> ghc-cvs

[19:53] <rafl> Cool, never seen that.

[19:53] <Juerd> The only things not installed via dpkg are pugs and parrot

[19:53] <Juerd> And they're neatly put in my homedir

[19:53] <Juerd> ghc-cvs was needed because the default ghc wasn't recent enough

[19:54] <rafl> What's not recent enough with ghc6 in sid?

[19:54] <Juerd> At the time, it was too old for pugs to be compiled

[19:54] <Juerd> I don't know if it still is

[19:55] <Juerd> But this works well too

[20:00] <rafl> Juerd: I usually compile it with sids ghc6 and it works fine.

[20:01] <Juerd> Then it is 6.4 now

[20:01] <rafl> Yes.

[20:09] <svnbot6> r6747 | fglock++ | * PIL-Run - Array.delete(slice), Hash.delete(key)

[20:34] <rafl> Hm. does make manifypods create proper manpages for Perl6::Pugs and pugs::run? For me they are just empty.

[20:39] <svnbot6> r6748 | fglock++ | * PIL-Run - fixed Array.exists(), does()

[20:48] *** nnunley3 is now known as nnunley

[20:48] *** mml is now known as mml_

[21:03] <svnbot6> r6749 | fglock++ | * PIL-Run - capitalize()

[21:03] <svnbot6> r6749 | fglock++ |     - PrimP6 is emitting warnings about grep() ???

[21:18] *** mml_ is now known as mml

[21:18] *** mml is now known as mml_

[21:33] <svnbot6> r6750 | iblech++ | * Usual svn props.

[21:33] <svnbot6> r6750 | iblech++ | * STATUS: Update (P5 regexes in PIL2JS, laziness in PIL-Run, more tests)

[21:33] <svnbot6> r6750 | iblech++ | * pugs::run: Fixed information about -Bbackend and pointed to PIL2JS's

[21:33] <svnbot6> r6750 | iblech++ |   jspugs.pl and PIL-Run's crude_repl.pl. Also updated the entries about

[21:33] <svnbot6> r6750 | iblech++ |   -Cbackend and Pugs's safemode.

[21:33] <svnbot6> r6751 | Darren_Duncan++ | /ext/Locale-KeyedText : replaced all occurances of 'is constant' with 'is readonly', the new way to do the same thing

[21:33] <svnbot6> r6752 | fglock++ | * PIL-Run - the %ENV hash works

[21:45] <svnbot6> r6753 | fglock++ | * PIL-Run - p6 %ENV is passed on to exec()

[21:51] <svnbot6> r6754 | fglock++ | * PIL-Run - system()

[22:09] <svnbot6> r6755 | iblech++ | * Removed t/var/is_constant.t, as there is no "is constant" any longer.

[22:09] <svnbot6> r6755 | iblech++ | * New t/var/is_readonly.t: Added tests for "my $foo is readonly", including

[22:09] <svnbot6> r6755 | iblech++ |   tests for "my $foo is readonly; exists($foo)  # should be false".

[22:09] <svnbot6> r6755 | iblech++ | * New t/var/constant.t: Added tests for "constant pi = 3", etc. Also pinged p6l

[22:09] <svnbot6> r6755 | iblech++ |   to see whether lexically scoped constants are ok and added appropriate

[22:09] <svnbot6> r6755 | iblech++ |   =for discussion tests:

[22:09] <svnbot6> r6755 | iblech++ |   http://www.nntp.perl.org/group/perl.perl6.language/23000

[22:09] <svnbot6> r6756 | vkon++ | improve and clean t/rules/rules.t; still many things to do

[22:13] <dduncan> ping vkon

[22:14] <vkon> I'm here...

[22:15] <dduncan> regarding t/rules/rules.t, that is the one t/* file that I didn't detab, because it was generated ... is this file regularly going to be resynced with the perl 5 version, or is it just manual updates from here on in?

[22:15] <dduncan> did your cleaning involve rerunning the generator script, or was it a manual action?

[22:15] <vkon> I searched for that generator script and it was decided here that it wass lost; so manual editing is used.

[22:16] <dduncan> in that case, unless you already did so, I'll detab it now

[22:16] <dduncan> that said, all the tabs I saw were in comments, not code

[22:19] <vkon> go ahead... I'll continue working with that file tomorroww, and, of course, I'll re-download it before usage.

[22:19] <dduncan> I shouldn't take more than 20 minutes

[22:19] <vkon> have a nice day

[22:20] <dduncan> you too

[22:33] <svnbot6> r6757 | Darren_Duncan++ | went ahead and detabbed t/rules/rules.t, since it probably won't be regenerated any time soon (script was lost supposedly); it had 3790 tabs, all in the comments, each was replaced with 4 spaces

[22:45] <svnbot6> r6758 | Darren_Duncan++ | converted tabs to 8 spaces each in inc/Test/Harness.pm and inc/Test/Harness/Straps.pm

[22:51] <svnbot6> r6759 | Darren_Duncan++ | converted tabs to spaces in these 3 /inc/Module/Install/* files: Makefile.pm, Pugs.pm, WriteAll.pm

[22:54] <dduncan> that takes care of all the /inc files

[22:57] <svnbot6> r6760 | Darren_Duncan++ | updated lib/Perl6/MakeMaker.pm so that it generates Makefiles having lines indented with spaces (4 per indent level) rather than tabs; there were 3 tabs replaced in total

[22:58] <dduncan> and that takes care of all the /lib files

[23:00] <rafl> Don't hurt me for that question, but what is the benefit from using spaces?

[23:02] <dduncan> better maintainability of code ... the code looks the same to everyone, no matter how their editor or viewer is configured re how wide a tab displays

[23:03] <dduncan> the worst situation is having both tabs and spaces for indenting in the same file

[23:03] <dduncan> having pure tabs isn't as bad, but I'm flipping those too

[23:03] <rafl> Hm, I always liked the the fact that the file looks like everyone wants if you use tabs and configure your editor properly.

[23:04] <dduncan> however, you run into a lot of problems if some code lines are indented with tabs, and others spaces

[23:04] <rafl> For sure, yes.

[23:05] <dduncan> there's also the advantage of knowing consistently that your code can display in the same width of display no matter what people's tab settings are

[23:06] <dduncan> eg, if everyone tries to keep their code within a 78 or 80 char width to avoid wrapping in terminals, someone using narrow tabs won't have it look good to them, but have the code wrap for someone else using wider tabs

[23:07] <rafl> Agreed.

[23:08] <dduncan> a more thorough explanation of the issue is in Damian's "Perl Best Practices"

[23:08] <dduncan> I will now be away from comp for about 20 mins

[23:22] <mugwump> sounds like you've been reading the GNU coding standards documents, dduncan :)

[23:26] <dduncan> actually I haven't, and in fact Perl Best Practices cites a few divergences from there, such as with where opening and closing braces should go

[23:26] <dduncan> I'm sure they have a lot in common, though

[23:36] <dduncan> actually, I think I looked over the GNU standards page a few months back, but I'm not sure

[23:36] <dduncan> but it doesn't really matter, since I'm citing PBP anyway

[23:38] <dduncan> fyi, I'm now proceeding through the projects in /perl5; each project is its own commit, so it is easier to isolate

[23:38] <dduncan> unlike what I've gone through in other directories, the /perl5 stuff seems to be consistently all tabs

[23:39] <dduncan> I assume Java is not whitespace sensitive, from what I remember in using it

[23:39] <dduncan> and yes, it does seem kind of odd to have 2 java projects under /perl5

[23:39] <lscd> it's not, beyond the fact that you use it to separate tokens, ie, you can't say intblah instead of int blah

[23:39] <dduncan> yes, of course

[23:40] <dduncan> but it doesn't care between different kinds of whitespace

[23:52] <svnbot6> r6761 | Darren_Duncan++ | /perl5/Code-Perl : updated all files to replace tabs with 4 spaces each

[23:57] <dduncan> okay, apparently some of these have mixes of tabs and spaces too

