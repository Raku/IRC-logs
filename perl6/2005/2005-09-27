[00:01] <putter> hi stevan

[00:01] <svnbot6> r7153 | putter++ | PIL-Run - updated name mangling of types for mm2.

[00:01] <svnbot6> r7153 | putter++ | pugs-p5.pl: p5 expressions are now evaluated in the correct package.  And ->perl is now shown, rather than ->str.

[00:01] <putter> let's see... why did I ping...

[00:03] <putter> ah.  I figured out ->name.  so the only thing is the  Str->new()->isa('Class') #=> 1 bug report

[00:04] <putter> and when DESTROY's in Array and Hash and Scalar began working, the gc errors became pervasive.  So I commented out the meat of the DESTROYs.

[00:06] <stevan> Str->new()->isa('Class')??

[00:07] <putter> ah,

[00:10] <stevan> putter: hmm, that is the tricky part

[00:10] <putter> bah.  it should be something like  $::Class->new('$.name'=>'Foo')->new()->isa('Class')   but gc errors stop me from actually running it

[00:10] <stevan> Str->isa() is actually calling $instance_of_class->isa()

[00:10] <stevan> gc errors?

[00:10] <stevan> what ones?

[00:11] <putter> oh, that's a new one,

[00:11] <putter> (in cleanup) Method (DESTROYALL) not found for instance (Dispatchable=HASH(0x133b2d0)) at /home/net1/perl6/pugsxpl2/perl5/PIL-Run/../Perl6-MetaModel2.0/lib/chaos.pl line 450

[00:11] <stevan> hmm

[00:11] <stevan> the problem is that GC tries to call all the DESTROY methods

[00:12] <stevan> which just totally wreaks havoc

[00:12] <stevan> I will have to give this some thought

[00:12] <putter> ok.

[00:12] <stevan> maybe I should call, then remove all the DESTROY methods at the end of runtime

[00:12] <putter> so if all the DESTROY methods are commented out, the gc problems should go away?

[00:12] <stevan> no idea

[00:12] <stevan> I never tried it

[00:12] <putter> k

[00:13] <stevan> let me try the removing DESTROY methods thing

[00:13] <stevan> I think that should wokr

[00:13] <putter> ok

[00:13] <stevan> as for the Str->new()->isa(Class) thing

[00:13] <stevan> thats a bug,... not sure how to fix it at the moment

[00:14] <stevan> the problem is that there should be a class method version of isa() 

[00:15] <putter> k

[00:19] <stevan> putter: can you make a test out of that GC issue?

[00:20] <stevan> can you reproduce it on a small scale?

[00:27] <putter> hmm... let's see...

[00:29] <stevan> putter: I think I might have gotten in

[00:29] <stevan> s/in/it/

[00:31] <putter> well, this   ./pugs -B perl5 -e 'say 3'  shows the old gc problem... :)  and... (oh, ok, I'll wait and try that)

[00:31] <svnbot6> r7154 | putter++ | pugs-p5.pl: repl reverted to p6_to_s from p6_to_perl.  No non-essential changes!  They may expose bugs, creating ambiguity vis mm2 transition.

[00:34] <stevan> putter: commiting now ..................

[00:34] <stevan> ok,.. its there

[00:35] <stevan> try that,.. let me know if it complains

[00:35] <putter> trying...

[00:36] <putter> ./pugs -B perl5

[00:36] <putter> p5ugs> :5 $::Class->new('$.name'=>'Foo')->new()->isa('Class')

[00:36] <putter> Use of uninitialized value in concatenation (.) or string at /home/net1/perl6/pugsxpl2/perl5/PIL-Run/../Perl6-MetaModel2.0/lib/chaos.pl line 513.

[00:36] <putter>         (in cleanup) Method (DESTROYALL) not found for instance (Dispatchable=HASH(0x13409d0)) at /home/net1/perl6/pugsxpl2/perl5/PIL-Run/../Perl6-MetaModel2.0/lib/chaos.pl line 450

[00:36] <putter> ...

[00:36] <stevan> this might interest you : http://users.ipa.net/~dwighth/smalltalk/bluebook/bluebook_imp_toc.html

[00:36] <svnbot6> r7155 | stevan++ | Perl6::MetaModel 2.0 -

[00:36] <svnbot6> r7155 | stevan++ | * chaos.pl now attempts to handle some GC issues

[00:36] <svnbot6> r7155 | stevan++ |    - in an END block we collect all active classes, then call DESTROY

[00:36] <svnbot6> r7155 | stevan++ |      on all of them, then set a flag to tell the dispatcher not to 

[00:36] <svnbot6> r7155 | stevan++ |      accept anymore requests for DESTROY

[00:36] <svnbot6> r7155 | stevan++ | * added remove_method to ::Class

[00:36] <svnbot6> r7155 | stevan++ | * added FETCH('{}') to ::Package which gives back the namespace hash

[00:37] <svnbot6> r7155 | stevan++ |    - this is not ideal, but works for now

[00:37] <svnbot6> r7155 | stevan++ | * added some more tests re: the Str->new()->isa(Class) issue

[00:38] <putter> neat.  read the books years ago.  added to my "readables" list.  thanks! :)

[00:38] <putter> still complains.  replicable as described.

[00:39] <stevan> putter: do you think you can boil it down to a test case for the MM?

[00:39] <stevan> I am not sure what your repl is doing that is causing this

[00:40] <putter> :5 is just             print eval("package ".&p6_main()."; ".$1),"\n";         warn $@ if $@;

[00:40] <stevan> what is p6_main()

[00:40] <stevan> hey luqui 

[00:41] <luqui> hi stevan

[00:41] <luqui> Language::AttributeGrammar cpanned

[00:41] <stevan> what is that?

[00:41] <luqui> an attribute grammar module

[00:42] <luqui> it's a tree traversal thingydingy

[00:42] <stevan> ah

[00:42] <stevan> cool

[00:42] * luqui just realized that it probably works on graphs pretty well too

[00:42] <luqui> yay for sensible algorithms!

[00:43] <stevan> putter: what version of perl are you using?

[00:44] <stevan> so luqui what does it do? is it on search.cpan.org yet?

[00:44] <nothingmuch> luqui++; # i will check tomorrow

[00:44] <luqui> I just uploaded it ten minutes ago, so probably not

[00:44] <stevan> luqui: wanna no paste it?

[00:44] <nothingmuch> http://pause.perl.org/incoming/

[00:44] <nothingmuch> no need

[00:45] <luqui> there are four tests :-)

[00:45] <stevan> nothingmuch: check this out http://users.ipa.net/~dwighth/smalltalk/bluebook/bluebook_imp_toc.html

[00:45] <luqui> I couldn't think of a way to test it modularly

[00:45] <luqui> so I just used some examples

[00:45] <nothingmuch> luqui: that's what happenned to me with blondie

[00:45] <luqui> so I know when it breaks, but it will be a pain to figure out how

[00:45] <nothingmuch> i retrofitted a few later

[00:45] <nothingmuch> now i will add more, and then refactor

[00:46] <nothingmuch> s/now/tomorrow/

[00:46] <putter>  p6_main() just returns a package name.  the same error occurs with a bare eval($1).

[00:47] <nothingmuch> btw, stevan, i was thinking of macro processing as nothing more than making the actual evaluation of code a compile time directive

[00:47] <putter> v5.8.5

[00:47] <nothingmuch> sort of like, to actually run a program you have to say something like BEGIN { apply(&main) }

[00:47] <putter> I tried doing a file with just  use Perl6::MetaModel; $::Class->new('$.name'=>'Foo')->new()->isa('Class');  but that gives me a different (but in some ways similar) error.

[00:47] <nothingmuch> that *really* confuses macros with functions, which I like

[00:48] <luqui> heh

[00:48] <putter> Use of uninitialized value in concatenation (.) or string at perl5/Perl6-MetaModel2.0/lib/chaos.pl line 513.

[00:48] <putter> Method (BUILDALL) not found for instance (#<=(9)>) at perl5/Perl6-MetaModel2.0/lib/chaos.pl line 450

[00:48] <nothingmuch> code emission to a "static" backend means that there is no Eval node and no Val of type AST anywhere but &main

[00:48] <stevan> putter: weridness

[00:49] <stevan> putter: can you run the MM2 test suite?

[00:49] <putter> running...

[00:49] <stevan> nothingmuch: *cough* thick crack smoke *cough*

[00:49] <nothingmuch> stevan: yup =)

[00:49] <nothingmuch> forth has tought me the value of IMMEDIATE

[00:50] <luqui> that is, everything is a macro in such a backend?

[00:50] <stevan> luqui: I only sort of understand you Attribute grammer thing

[00:50] <stevan> was there a p6l thread on this?

[00:50] <luqui> yeah, tough to describe, esp. today when I am not in a documenty mood

[00:50] <nothingmuch> stevan: there was a nice talk i linked to

[00:50] <nothingmuch> it has an example of dumping a treeish structure as HTML

[00:50] <stevan> nothingmuch: where?

[00:50] <nothingmuch> with indentation

[00:50] <nothingmuch> i don't remember

[00:51] <stevan> bah,... what good does that do me

[00:51] <nothingmuch> backlog ;-)

[00:51] <luqui> but I'm looking for features to add.  I wrote this module before ever using an attribute grammar for anything

[00:51] <luqui> so I have no idea what would be useful

[00:51] <nothingmuch> ah, i think i found it

[00:51] <nothingmuch> http://www.win.tue.nl/ipa/archive/falldays2003/AgTutorial.pdf

[00:53] <stevan> putter: I see your latest issue

[00:53] <nothingmuch> good night

[00:53] <stevan> $::Class->new('$.name'=>'Foo')->new()->isa('Class') wont work becuase Foo needs to have $::Object as it's superclass

[00:53] <stevan> good night nothingmuch 

[00:54] <geoffb> good night, nm

[00:54] <nothingmuch> btw.. new website up: http://www.beyahad.info/

[00:54] <nothingmuch> point your hebrew-speaking-bi-polars there please

[00:54] <luqui> night

[00:55] <luqui> hey nothingmuch

[00:55] <nothingmuch> huh?

[00:55] <luqui> go to http://www.behayad.info

[00:55] <luqui> :-)

[00:55] <nothingmuch> i'm not bi-polar

[00:55] <nothingmuch> i just built the website for a friend =)

[00:55] <luqui> uh huh

[00:55] <luqui> sure

[00:55] <stevan> suuuuurrre for a friend

[00:55] <stevan> just like luqui's friend who needed Viagra

[00:56] <nothingmuch> nono, that was for my dog

[00:56] <nothingmuch> uh, i mean, luqui's dog

[00:56] <nothingmuch> friend

[00:57] <luqui> haha

[00:57] <stevan> putter: this works for me print eval("my \$Foo = \$::Class->new('\$.name'=>'Foo'); \$Foo->superclasses([ \$::Object ]); \$Foo->new();"); 

[00:58] <luqui> why would you eval that?

[00:58] <stevan> luqui: it is eval'ed because it is inside putter's repl loop

[00:59] <luqui> i see

[00:59] <stevan> he is having GC issues,.. we are trying to debug em

[01:01] <luqui> eew gc

[01:01] <luqui> er, yay gc, eew gc issues

[01:01] <stevan> eew ref counting GC,... 

[01:02] <putter> perl5/Perl6-MetaModel2.0/t/08_multi_methods.t

[01:02] <putter> 1..12

[01:02] <putter> ok 1 - The object isa PrettyPrinter

[01:02] <putter> Can't call method "can" on an undefined value at /usr/lib/perl5/site_perl/5.8.5/Class/Multimethods/Pure.pm line 86.

[01:02] <putter> # Looks like you planned 12 tests but only ran 1.

[01:02] <putter> # Looks like your test died just after 1.

[01:02] <stevan> odd

[01:02] <luqui> uh oh

[01:02] <putter> other than that, looks good.

[01:03] <putter> trying...

[01:03] <luqui> that looks like my module :-p

[01:04] <luqui> yay for bad error checking luke

[01:04] <putter> Use of uninitialized value in concatenation (.) or string at perl5/Perl6-MetaModel2.0/lib/chaos.pl line 513.

[01:04] <putter> #<=(9)>

[01:04] <luqui> oh wait --- stevan, did you note my latest change to C::MM::P

[01:04] <stevan> putter,.. this commit will fix that one

[01:04] <stevan> luqui: no idea

[01:04] <luqui> forgot to tell you that it would break your rewrite of internal_multi

[01:04] <luqui> I refactored

[01:04] <robkinyon> obra: ping

[01:05] <stevan> luqui: you punk!!

[01:05] <luqui> on the other hand, I made it so you don't have to rewrite anything

[01:05] <luqui> just pass a custom registry object

[01:06] <stevan> putter: what version of C::MM::Pure are you using?

[01:06] <luqui> so that's probably where putter's problem is coming from

[01:06] <putter> checking...

[01:07] <putter> 0.10

[01:07] <stevan> I have 0.06

[01:07] <stevan> ok,.. upgrading now

[01:09] <obra> robkinyon: heya. autrijus suggested I ping you about PDF::Template

[01:09] <svnbot6> r7156 | stevan++ | Perl6::MetaModel 2.0 - small fix for annoying GC stuff

[01:09] <obra> robkinyon: I'm looking for complex examples.

[01:12] <stevan> luqui: what do I need to do to fix this?

[01:14] <luqui> so you know how you rewrote internal_multi?

[01:14] <luqui> with basically the same code as it had before, but a small change at the end

[01:14] <stevan> ok

[01:14] <stevan> wanna just fix my code in chaos.pl?

[01:14] <stevan> :)

[01:14] <luqui> fair enough

[01:14] <robkinyon> Uhh ...

[01:14] <luqui> suppose I deserve it :-p

[01:14] <robkinyon> Heh

[01:14] <stevan> luqui++

[01:14] <robkinyon> PDF::Template is in an interesting place right now

[01:15] <robkinyon> What kind of complex examples are you looking for?

[01:15] * stevan has to attend to $real_life, bbiab

[01:15] * robkinyon & kid's screaming

[01:18] <robkinyon> back

[01:21] *** jiing is now known as jiing__

[01:21] *** jiing__ is now known as jiing

[01:22] <robkinyon> obra: I can come up with some complex examples, if you want

[01:24] <buu> What happened to the eval bot?

[01:27] <luqui> oh right

[01:28] <luqui> I should start him up again

[01:28] <luqui> pugs wasn't building, so evalbot wasn't updating

[01:28] <obra> robkinyon: Thanks :)

[01:33] <svnbot6> r7157 | luqui++ | Brought MM2's Class::Multimethods::Pure usage up-to-date with my interface-breaking change.

[01:35] <luqui> putter, that's your queue, try again :-)

[01:36] <luqui> er, cue :-)

[01:36] * luqui laughs at himself

[01:37] <buu> I don't suppose anyone has even heard of a portmaster?

[01:37] <Supaplex> i has

[01:38] <buu> Really?

[01:38] <Supaplex> yup

[01:38] <buu> Have you ever, say, configured one?

[01:38] <Supaplex> on occasion, yes

[01:38] <buu> REALLY?!

[01:38] <buu> Can you help me make this hideous piece of trash talk to another server via telnet?

[01:38] <geoffb> heard of one, yes, fought with one yes, configured one, no

[01:39] <Supaplex> you mean telnet out of it?

[01:39] <buu> Yeah

[01:39] <Supaplex> there is the telnet command, isn't there?

[01:39] <buu> I'm trying to dial in to it and get connected to a telnetd running on a local box

[01:39] <Supaplex> it's like uber simple last I recall

[01:39] <Supaplex> ohh, you'll need to login as !root

[01:40] <buu> Er, not that part

[01:40] <buu> When ever I dial up portmaster at the moment I get a "press <RETURN> to begin Login"

[01:40] <Supaplex> so telnet say to your cisco router from the portmaster

[01:40] <buu> Just a linux box

[01:41] <Supaplex> k, 1m - logging in to the pm4

[01:41] <buu> I have a modem, ya? I want to dial a number and connect to the portmaster. I want the portmaster to transfer me over ethernet to another box running telnet, so I'm left going directly from my modem to the telnet box

[01:45] <Supaplex> so the modem on your pc dials the pm, and you login to a terminal session, then you want to telnet via tcp to the linux box

[01:45] <buu> Yes!

[01:46] <buu> Well, what do you mean by "login to a terminal session"?

[01:46] <Supaplex> not ppp

[01:46] <Supaplex> like the bbs days ...

[01:46] <buu> Ah. Well, I was kind of assuming I would use ppp, but I'm fairly agnostic as long as it works

[01:47] <Supaplex> depends on the account you have. if you have ppp connectivity, you can just telnet from your pc to the linux box, can't you?

[01:48] <Supaplex> well, I guess you could telnet to the pm, then telnet again off the pm to the linux box

[01:48] <buu> Well, it's slightly more complicated

[01:48] <buu> I'm just using a pc as a test

[01:48] <buu> Eventually it's going to be a dial-up modem in a small embedded system way the fuck out

[01:49] <Supaplex> I see...

[01:49] <Supaplex> so what's the simplest part of your objective you're attempting to complete? (let's break this complicated thing down into bite size pieces)

[01:50] <buu> Er

[01:50] <buu> Get telnet over modem on this pc?

[01:50] <buu> Via the pm

[01:51] <Supaplex> so you've got putty, right?

[01:51] <Supaplex> humm does putty handle modem's directly (via serial?)

[01:51] <buu> Actually, I was using hyperterm

[01:51] <Supaplex> before you answer that, you want ppp, right?

[01:51] <buu> Sure.

[01:51] <buu> And yes, hyper term handles the modem directly. I give it the number and it dials it.

[01:51] <Supaplex> so you can putty (use telnet) to the pm

[01:52] <Supaplex> ok, then that's not likely to be ppp. that's straight up serial terminal

[01:52] <buu> Er, yes, I can telnet to the pm just dandy.

[01:52] <Supaplex> unless you talk ppp ;)

[01:52] <Supaplex> ok

[01:52] <buu> But when I dial the pm, I get the "press enter to begin login" dealy.

[01:52] <Supaplex> and you can run command line utils off the pm

[01:53] <buu> Sure?

[01:53] <Supaplex> really

[01:53] <luqui> ?eval [+] 1..10

[01:53] <evalbot_7157> 55 

[01:53] <Supaplex> can you paste the transcript to a pastebin or something?

[01:53] <buu> Supaplex: Transcript of what, exactly?

[01:53] <Supaplex> you attempting to hyperterm, including that snippet where the delay is

[01:54] <buu> Er, I open hyperterm, say "dial here", it displays an alert box saying "connecting..", eventually it connects, then I just get the message I mentioned above. I hit enter, it asks for a password.

[01:55] <buu> "Press <RETURN> to begin Login Session"

[01:55] <buu> "Password:"

[01:56] <Supaplex> http://rafb.net/paste/results/jVw2oP82.nln.html is what I get

[01:56] <buu> I've tried lots of passwords and such, but nothing works.

[01:56] <Supaplex> well you have to have a login on the pm :)

[01:56] <buu> Supaplex: Yes, that's talking via telnet

[01:56] <buu> I've got telnet to the pm working fine, it's not the issue here.

[01:56] <buu> I'm trying to dial *through* the pm

[01:56] <Supaplex> as in my sample, you're having issues paste the lithium> prompt, right?

[01:57] <Supaplex> paste/past/

[01:57] <buu> No!

[01:57] <buu> My issue has nothing to do with your paste!

[01:57] <Supaplex> ok

[01:57] <buu> That is using telnet to talk directly to the portmaster.

[01:57] <buu> I can do that fine and dandy.

[01:58] <buu> I'm trying to use my modem to dial up, go *through* the portmaster, and talk to another box using telnet via the portmaster

[01:58] <Supaplex> after you're dialed into the pm, you're trying to telnet?

[01:58] <buu> Yes!

[01:58] <Supaplex> can you ping google or browse www sites?

[01:58] <buu> Except, I'm not really because I don't know how to configure it.

[01:58] <buu> Er, I don't get anything past the login prompt when I dial in.

[01:59] <Supaplex> yea, that's nothing fancier then getty attached to $SHELL - no tcp/ip or ppp involved. you're not routing anything

[02:00] <buu> Um. What?

[02:00] <buu> The portmaster has a shell?

[02:00] <Supaplex> ignore that, first see if you can ping/browse etc while connected

[02:00] <buu> I CAN'T CONNECT

[02:01] <Supaplex> then quit using hyperterm!

[02:01] <Supaplex> to dial ...

[02:01] <buu> What else should I use?

[02:01] <Supaplex> inetwiz

[02:02] <buu> Look. I can dial in and "connect" to the pm

[02:02] <buu> But *all* it gives me is the "press enter for login" dealy

[02:02] <buu> I can't get past that.

[02:04] <Supaplex> but if you're using hyperterminal to dial, you're only connecting to the pm via a serial console over modem. (like mgetty)

[02:04] <Supaplex> bbiam

[02:05] <buu> Er, I don't think so. The the box is only connected to a modem. This modem is connected (eventually) to a portmaster

[02:06] <buu> (Going for hot dogs, I shall return!)

[02:06] <putter> luqui: thanks! updating...

[02:07] <putter> syntax error at perl5/Perl6-MetaModel2.0/lib/chaos.pl line 559, near "my "

[02:09] <luqui> that's... odd

[02:09] <luqui> didn't happen for me

[02:10] <luqui> unless the test suite doesn't depend on chaos.pl

[02:10] <putter> my $registry = {   had two { {

[02:10] <luqui> yeah, I see that.  weird

[02:10] <luqui> did you fix it?

[02:11] <putter> 7158.

[02:11] <svnbot6> r7158 | putter++ | chaos.pl: fix typo

[02:12] <luqui> what's the name of that module that allows you to croak out of a set of modules?

[02:12] <Supaplex> buu, you can connect to a pm with minicom, hyperterminal etc and not have a ppp connection established.  It's one of the handy ways to troubleshoots a pm box when your data provider is having issues to the pop (point of presence) location.  I've done that dozens of times to login and see no ppp sessions active, because radius will not authenticate (because the data transport is down, telco PRI's work fine). if you want docs from the pm about this, I coul

[02:12] <Supaplex> luqui: Carp ?

[02:13] <putter> the test file use Perl6::MetaModel; print eval("my \$Foo = \$::Class->new('\$.name'=>'Foo'); \$Foo->superclasses([ \$::Object ]); \$Foo->new();");  no longer gives warnings, but result in  #<AnonClass=(9)>, which seems incorrect.

[02:13] <luqui> no, the one where if module A calls module B, and I "own" both of those, if I croak from B, it will look past A to find the caller

[02:13] <putter> s/result in/results in/

[02:14] <putter> err, huh?

[02:14] <luqui> putter.  hmm.

[02:14] <putter> oh, a Carp comment. ;)

[02:14] <luqui> I think you're back in stevan's turf

[02:14] <putter> sounds like.  my thanks for your help. :)

[02:15] <luqui> Carp::Clan, that's it

[02:15] <buu> Supaplex: No, I'm connected via modem

[02:16] <Supaplex> and your modem transports a serial connection over a telco line.

[02:16] <putter> luqui++

[02:17] <buu> Supaplex: Um. Ok?

[02:17] <Supaplex> and if you were connected via ppp while using hyperterminal, you'd beable to browse etc

[02:17] <buu> Supaplex: Wouldn't I have to get past this login prompt?

[02:18] <Supaplex> yea, you'd have to have a login for it. not to be confused with a radius login that ppp users would use

[02:18] <putter> stevan: the .t error has changed to > Can't use string ("PrettyPrinter::pretty") as a HASH ref while "strict refs" in use at perl5/Perl6-MetaModel2.0/lib/chaos.pl line 555.

[02:18] <putter> > # Looks like your test died before it could output anything.

[02:18] <buu> Supaplex: I created a user on the pm, but this thing doesn't ask me for a username, just a password

[02:19] <putter> however, the gc error on exit is gone! :)  luqui++ stevan++

[02:19] <Supaplex> what portmaster is it?

[02:19] <buu> Supaplex: a portmaster 3, I beleive

[02:20] <buu> believe!

[02:20] <Supaplex> I'm not even sure if we have any of those in service

[02:20] * Supaplex checks

[02:21] <putter> stevan: if Array's DESTROY is again enabled, the result is  (in cleanup) Bad instance (FORCE=SCALAR(0xac41a0)) at /home/net1/perl6/pugsxpl2/perl5/PIL-Run/../Perl6-MetaModel2.0/lib/chaos.pl line 52

[02:23] <Supaplex> nope, just a armfull of pm4's and some 3com stuff

[02:23] <Supaplex> anyway, time to commute

[02:24] <buu> Well, thanks for the time any way.

[02:25] <putter> fglock: @a=(3,4) no longer works.  and push(@b,3) fails with Signature does not match (as does for()).  I haven't yet looked at it closely.  hopefully tomorrow.

[02:35] <putter> so, not bad for a day's fiddling.  stevan++ fglock++ luqui++

[02:36] <putter> good night all &

[03:24] <luqui> autrijus, ping

[05:30] <svnbot6> r7159 | yiyihu++ | * Fix some typo.

[06:02] <autrijus> luqui: pon

[06:02] <autrijus> greetings \camels

[06:04] <autrijus> listening to brendon's invited talk:

[06:04] <autrijus> "Javascript in 10 years"

[06:05] <luqui> autrijus, I was going to ask you what a chained attribute was, but i figured it out

[06:05] <autrijus> cool. it's a bidirectional attr

[06:05] <luqui> yeah.  except it doesn't seem to make a lot of sense

[06:05] <luqui> lhs.num = @lhs.num + 1

[06:05] <luqui> seems to be, um, wrong

[06:06] <autrijus> that does not look like correct indeed. where does that come from

[06:06] <luqui> let me find the link

[06:06] <luqui> http://www.cs.uu.nl/~arthurb/data/AG/AGman.html#htoc27

[06:07] <luqui> I know what it's saying, that the synthesized attribute is one more than the inherited attribute of the same name

[06:07] <luqui> But it's a wicked shorthand (if I'm grokking it)

[06:08] <luqui> oh, also, Language::AttributeGrammar is cpanned :-)

[06:08] <autrijus> ooh.

[06:08] <autrijus> and yes it's a wicked pun.

[06:08] <autrijus> it makes sense but evil

[06:08] <luqui> so I'm not doing it in my module.

[06:08] <autrijus> ooh, luqui++

[06:10] <luqui> anyway, besides autocreated attributes, are there any important features?

[06:10] <luqui> (and no, I'm not including a typechecker :-p)

[06:11] <autrijus> are you working with variant (tagged union) types?

[06:12] <luqui> uh, it can, provided they implement the right interface

[06:12] <luqui> (a method for each child node is enough)

[06:13] <luqui> One of my goals is to make it work nicely Parse::RecDescent without being coupled to it

[06:14] <autrijus> ok.

[06:14] <autrijus> makes sense, since P::RD is the closed match on CPAN

[06:14] <autrijus> s/closed/closest/

[06:16] <autrijus> "javascript (previously known as "mocha") suffered from the "marketing scam" where imitating java's suboptimal standard library at that time"

[06:16] <autrijus> <brendon> and some people still think I'm Gosling. it's very confusing

[06:16] <autrijus> s/where/by/

[06:17] * luqui doesn't associate JS with Java at all anymore :-)

[06:19] <autrijus> not "object oriented" but "object based" -- i.e. not distinguishing constructors from other regular methods

[06:19] <autrijus> "conventions enforced by culture"

[06:20] <luqui> :-)

[06:20] <autrijus> "each ajax application needs its own OO system with its own reflections anyway"

[06:21] <coral> mm, Parse::BNF in javascript

[06:21] <coral> "click here to test the parser described in the RFC above"

[06:21] <coral> pardon the dreaming

[06:21] <luqui> coral, it shouldn't be that hard

[06:21] <luqui> parsers are easy.  fast parsers are hard. :-)

[06:21] <QtPlatypus> luqui: Famious last words.

[06:22] <coral> it's already on CPAN..

[06:22] <luqui> oh, I figured "pardon the dreaming" meant it didn't exist

[06:22] <coral> no, that's better phrased as "pardon the idea without motivation to implement"

[06:22] <QtPlatypus> QtPlatypus: BTW is there a good way to do default values for object attributes in pugs?

[06:23] * coral looks at QtPlatypus

[06:23] <autrijus> autrijus: sure

[06:23] <autrijus> BUILD ($.x = 3) { ... }

[06:23] * coral reverts to osmosis phase

[06:24] <luqui> class { has $.x = 3;

[06:24] <luqui> } # not supported?

[06:24] <QtPlatypus> luqui: Thats currently a paser error.

[06:25] <autrijus> luqui: no, not sure how to interact with BUILD for one ( I guess BUILD overrides)

[06:26] <autrijus> luqui: but a proper mm2 integ should fix that

[06:36] <pdcawley> Morning all.

[06:36] * luqui just realized that Parse::RecDescent::FAQ has the question "Is Parse::RecDescent LL(1)?  LL(n)?  LR(1)?  LR(n)?" and never answers it

[06:36] <luqui> evening pdcawley 

[06:36] <luqui> no, I suppose it is morning

[06:39] <QtPlatypus> ?eval "a" eqgt "a"

[06:39] <evalbot_7159> Error:  unexpected "g" or "e" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[06:39] <QtPlatypus> ?eval "a" eq "a"

[06:39] <evalbot_7159> bool::true 

[06:39] <QtPlatypus> ?eval "a" gt "a"

[06:39] <evalbot_7159> bool::false 

[06:39] <QtPlatypus> ?eval "a" egt "a"

[06:39] <evalbot_7159> Error:  unexpected "e" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[06:39] <QtPlatypus> Thought so

[06:39] <luqui> ?eval "a" ge "a"

[06:39] <evalbot_7159> bool::true 

[06:40] <QtPlatypus> Thanks luqui 

[06:43] <r0nny> damn

[06:44] <luqui> darn

[06:44] <luqui> r0nny?

[06:44] <r0nny> i got a socket $foo - how to read data from it ?

[06:44] <luqui> in perl 6 land?

[06:44] <r0nny> yeah

[06:44] * luqui doesn't know

[06:44] <r0nny> argh

[06:44] <luqui> probably with the iterator

[06:44] <QtPlatypus> =$foo

[06:44] <luqui> yeah, that one

[06:45] <r0nny> hmm

[06:45] <r0nny> now it "works"

[06:46] <r0nny> wtf

[06:47] <r0nny> after i kill te connec ted programm it prints everything i send to it, but adds 2 \n for each \n in the input

[06:48] <r0nny> for =$bar{say;}; <- what did i break ?

[06:49] <luqui> yeah

[06:49] <luqui> because say appends a \n after it prints

[06:49] <luqui> and =$bar doesn't strip the newlines (but maybe it should now?)

[06:49] <luqui> use print instead of say

[06:50] <r0nny> there is still a problem

[06:50] <r0nny> it wont print anything, till i close the connection

[06:50] <r0nny> how munch does = want to read ?

[06:52] <luqui> one line usually

[06:52] <luqui> but it may be laziness creeping in...

[06:52] * luqui isn't sure

[06:54] <r0nny> omg

[06:54] <r0nny> even if i feed it with about 60 lines it wont print

[06:54] <r0nny> :(

[06:55] <r0nny> does anyone know, how to change this ?

[06:55] <luqui> ??

[06:56] <r0nny> i used netcat, to sein a longer file to the script, but it handt printed anything till i closed the socket

[06:56] <r0nny> send

[06:56] <r0nny> hmm

[07:00] <r0nny> anyone ?

[07:01] <QtPlatypus> Does split('',$string) use the PGE and is there an equiverlent that doesn't

[07:01] * QtPlatypus doesn't.

[07:02] <r0nny> omg

[07:02] <r0nny> pugscc is broken

[07:02] <autrijus> r0nny: it doesn't use PGE

[07:03] <QtPlatypus> ?eval "text".chars

[07:03] <evalbot_7159> 4 

[07:03] <QtPlatypus> autrijus: That was directed at me I assume?

[07:03] <autrijus> er sorry yeah

[07:03] <autrijus> r0nny: try doing a $*OUT.flush after the say

[07:04] <r0nny> wont work

[07:04] <r0nny> seems like the socket wants to read waaay to munch data

[07:05] <autrijus> hm, nopaste the code?

[07:05] <autrijus> also try

[07:05] <autrijus> while ($_ = $bar.readline) { ... }

[07:05] <QtPlatypus> ?eval "text".split('')

[07:05] <evalbot_7159> ('t', 'e', 'x', 't') 

[07:05] <autrijus> bad style of course

[07:06] <autrijus> but worth trying

[07:06] <r0nny> $bar.readline breaks it complete :/

[07:07] <autrijus> nopaste the code somewhere :/

[07:07] <r0nny> my $bar=8060.listen.accept;for =$bar { print; };

[07:08] <r0nny> this is the minimal working version - any additions had no effect

[07:08] <r0nny> (or bad effect)

[07:10] <autrijus> my $bar = 8060.listen.accept;

[07:10] <autrijus> while ($_ = $bar.readline) {

[07:10] <autrijus>     print;

[07:10] <autrijus>     $*OUT.flush;

[07:10] <autrijus> };

[07:10] <autrijus> this worksforme

[07:14] <r0nny> $*OUT.flush isnt needed

[07:14] <r0nny> thx :)

[07:14] <r0nny> is there a short way of connec t, too ?

[07:15] <autrijus> look at examples/network

[07:15] <autrijus> my $hdl = connect("www.phreeow.net", 80);

[07:15] <autrijus> (in http-client.p6)

[07:15] <r0nny> hmm

[07:15] <r0nny> i think im going to write a simple irc bot now

[07:16] <autrijus> cool, there are quite a few in examples/network :)

[07:16] <nothingmuch> morning

[07:18] <autrijus> iblech: what do you think about Net::IRC-OO?

[07:18] <autrijus> as it stands it can't be use'd

[07:18] <autrijus> may I mv it to Net::IRC::OO?

[07:19] <r0nny> lol

[07:19] <r0nny> the wizard game is broken ;)

[07:19] <autrijus> iblechbot: anyway I'm going ahead :)

[07:19] <autrijus> r0nny: yeah, we are in bad need of releng help

[07:19] <nothingmuch> autrijus: maybe we need yet another namespace

[07:19] <autrijus> how is it broken?

[07:20] <nothingmuch> Net::IRC <author> <version> <style>

[07:20] <nothingmuch> where style is freeform, but not part of the module's name

[07:20] <autrijus> mmm "style"

[07:20] <r0nny> autrijus:  aafter i win vs the first opponent, it seems to stay in a endless loop

[07:20] <autrijus> I think it's part of "version"

[07:20] <autrijus> r0nny: weird because it worksforme

[07:20] <r0nny> hmm

[07:21] * luqui thinks that that's part of the module name

[07:21] <luqui> it's a different interface, compatible in no way

[07:22] <autrijus> good observation.

[07:22] <nothingmuch> aye

[07:22] <nothingmuch> but Net::IRC is the "purpose"

[07:22] <luqui> yeah, well Class::Multimethods is the purpose of Class::Multimethods::Pure

[07:22] <nothingmuch> why should Net::IRC::OO be called Net::IRC::OO just because we didn't have OO back when Net::IRC was started

[07:23] <luqui> Why should Net::IRC have style "OO" just because we didn't have "style" back when Net::IRC was started?

[07:23] <luqui> I don't think you can ever get away from the problem

[07:23] <svnbot6> r7160 | autrijus++ | * Move Net::IRC-OO into Net::IRC::OO

[07:24] <luqui> the only way I see style being useful is if it's really part of the same module by the same author

[07:24] <luqui> and in that case, shouldn't it just be an import flag?

[07:27] <luqui> so autrijus (and nothingmuch too), any suggestions for new features Language::AttributeGrammar?

[07:27] <luqui> I want to make it a nice, complete module, not a POC

[07:29] <autrijus> ok, looking at it

[07:30] <luqui> thanks

[07:37] <r0nny> omg

[07:38] <nothingmuch> ?

[07:38] <r0nny> i think i found, why for =$bar wont work

[07:38] <luqui> you did?

[07:38] <r0nny> seems like there is no autoflush for sockets

[07:43] <nothingmuch> luqui: i'll have a look at your AG later

[07:43] * nothingmuch has to work

[07:43] <nothingmuch> didn't notice your RFC

[07:44] <luqui> RFC?

[07:44] <luqui> ahh

[07:44] <luqui> not formal :-)

[07:44] <luqui> 'sok, I'm going to bed in 15 mins or so

[07:44] <nothingmuch> RFC the acronym, not the document

[07:44] <nothingmuch> aye

[07:44] <nothingmuch> sleep well

[07:44] <luqui> thank you, work well, er...

[07:46] * nothingmuch feels like a mega-xp-whore on perlmonks

[07:47] <nothingmuch> i've never gotten so many upvotes on such a pointless node ;-)

[07:48] <luqui> which node?

[07:48] <nothingmuch> in this thread: http://perlmonks.org/?node_id=494914

[07:48] <r0nny> omg

[07:50] <luqui> that was it?

[07:50] <luqui> oh no, r0nny is talking about his god again :-)

[07:53] <r0nny> the life example is slow as hell

[07:54] <luqui> everything is slow as hell

[07:54] <luqui> we're hoping we can optimize later :-/

[07:55] <r0nny> i hope someone steals a time machine, and rips the final perl6 from the future

[07:55] <luqui> well, apparently the parrot backend was pretty fast when it was working (on a very small subset of p6)

[07:55] <luqui> r0nny, you can't wait?

[07:55] <luqui> :-)

[07:55] <luqui> there are better things to do if you can't wait then hope for the impossible

[07:55] <r0nny> the language perl6 really __kicks__ ass

[07:55] <luqui> one is to learn haskell and start hacking

[07:55] <luqui> (or even don't learn haskell and hack on nonhaskell parts)

[07:56] <luqui> r0nny, thank you.  we're all proud.

[07:56] <r0nny> haskell is slow

[07:56] <luqui> faster than perl5

[07:57] <luqui> faster than java.  it ain't bad.

[07:57] <r0nny> faster then java is easy ;)

[07:57] <luqui> :-) agreed

[07:57] <r0nny> well - cant beat good c/c++

[07:58] <luqui> asm can.  but that just goes to reflect that fundamental tradeoff

[07:58] <luqui> you want developer time or program time?

[07:58] <luqui> (the tradeoff seems to break down when it comes to java)

[07:59] <luqui> (where both times are large)

[07:59] <r0nny> well - actually im writing some c++ libs trading compiler time for programmer time - but dont waste programm time

[07:59] <luqui> a type inferencer?

[08:00] <r0nny> type inferencer ?? - never heard of this

[08:00] <luqui> that's one thing I can think of that doesn't waste program time but saves on developer time.  But it trades compilation time (which is cheap)

[08:00] <luqui> type inferencer looks at your program and fills in all the "int" "MyClass" "vector<foo>", etc. for you

[08:00] <luqui> by looking at how you use your variables

[08:00] <r0nny> omg

[08:01] <r0nny> this sucks

[08:01] * luqui yawns

[08:01] <luqui> I think it's time for bed

[08:02] <r0nny> i combine different idoms, to make it allmost impossible to do bugs, if only using the libs

[08:03] <luqui> I'll have to look at that

[08:03] <r0nny> and with some operator overloading, polimorhism, template mixins and the other fun stuff it is very easy to write complex stuff in less time

[08:03] <r0nny> the lib is very basic atm

[08:03] <r0nny> since it will be part of the os i develop

[08:03] <luqui> oh my

[08:03] <luqui> Laziness, Impatience, and what?

[08:04] <r0nny> later it will have templates for easy definig of devices, so huge parts of the drivers will write themself

[08:04] <luqui> anyway, I got to get to bed

[08:04] <r0nny> n8 then

[08:04] <luqui> night

[08:19] <autrijus> luqui: nice job on L::AG.

[08:19] <autrijus> looks most sane.

[08:32] * Juerd wonders what L::AG is

[08:33] <autrijus> Juerd: useful stuff.

[08:33] <autrijus> http://pause.cpan.org/incoming/Language-AttributeGrammar-0.04.tar.gz

[08:33] <Juerd> Oh, OS X, how I hate thy awful performance!

[08:33] <Juerd> Thanks

[08:33] <nothingmuch> aweful performance?

[08:34] <Juerd> http://pause.cpan.org/incoming/Language-AttributeGrammar-0.04.tar.gz

[08:34] <Juerd> I could learn a foreign language while waiting for the beach ball

[08:34] <Juerd> Hmm

[08:34] <nothingmuch> ah

[08:34] <nothingmuch> not enough ram, perhaps?

[08:34] <dduncan> how much RAM do you have?

[08:35] <dduncan> I find its good to have a minimum of 512MB ... 768 or a Gig works great

[08:35] * nothingmuch gets that on his laptop after he's opened about 20 terminal windows and 50 browser tabs, and something code goes out of control

[08:35] <dduncan> certainly, if you only have 256M, making Pugs will crawl

[08:35] <nothingmuch> after i kill the memory hungry progam, everything beachballs when swapping back

[08:35] <Juerd> nothingmuch: I have 512 MB. I'm used to getting much better responsiveness out of machines with this amount of memory.

[08:36] <nothingmuch> Juerd: well... the UI comes at a cost =/

[08:36] <nothingmuch> you can run KDE/Gnome on it via fink though

[08:36] <dduncan> its not the UI so much

[08:36] <Juerd> Oh, don't worry

[08:36] <nothingmuch> GNU Darwin can get you started

[08:36] <Juerd> This box will know Linux.

[08:36] <nothingmuch> dduncan: that was my best guess... what is it?

[08:36] <Juerd> And the more it'll beach ball, the sooner it will get Linux on it.

[08:37] <dduncan> since Mac OS X 10.2, all that RAM used by the window manager is highly compressed, and hardware accelerated

[08:37] <dduncan> so the issues are more elsewhere

[08:37] <Juerd> In fact, when I'm done watching all movies stored on this hard drive, I'm migrating.

[08:37] <nothingmuch> dduncan: not the graphics buffers... the book keeping data

[08:37] <Juerd> Saves me a whole lot of money too

[08:37] <Juerd> I had this thing for a few months, and then 10.4 came, with a huge price tage.

[08:38] <dduncan> I'm still using 10.3.9 ... meets my needs

[08:38] <Juerd> I hadn't considered the subscription element of proprietary software. I just wasn't used to that anymore.

[08:38] <svnbot6> r7161 | autrijus++ | * don't "use" String::Multibyte unless we actually use .grapheme

[08:38] <Juerd> dduncan: Well, I want a newer Java, but Apple won't let me have it.

[08:38] <Juerd> And I hate having to jump through lit hoops to get something working.

[08:39] <dduncan> and that's unique to Mac OS X?

[08:39] * nothingmuch thinks Juerd and OSX are not meant to be together

[08:39] <Juerd> dduncan: So far, oh yes.

[08:39] <Juerd> Perhaps Debian and Ubuntu spoiled me

[08:39] <Juerd> But yes, I am used to getting much simpler installations and upgrades.

[08:40] <Juerd> Oh, did I mention that in the lower left corner of my primary workspace, there is part of the window that has been requesting a reboot, since three weeks ago?

[08:40] <Juerd> It has no close button, and I hate it too much to just kill it.

[08:40] <Juerd> It has to suffer in the corner.

[08:41] <dduncan> why is that dialog there, requesting reboot?

[08:41] <Juerd> The reboot is for non-system upgrades, by the way.

[08:41] <Juerd> Well, the upgrading software has installed newer software.

[08:41] <dduncan> did it install additions to the OS?

[08:41] <Juerd> Safari, Mail, and iTunes.

[08:41] <Juerd> All three I can restart without restarting the entire system, thank you, OS X.

[08:42] <Juerd> But even if it were a system kernel upgrade

[08:42] <nothingmuch> you can subvert that

[08:42] <nothingmuch> cmd+opt+esc

[08:42] <Juerd> It would still allow me the choice to collect some uptime.

[08:42] <dduncan> he didn't want to kill it

[08:42] <nothingmuch> btw, softwareupdate from the command line asks you to rebooto manually

[08:42] <Juerd> s/would/should/

[08:42] <Juerd> no, MUST.

[08:43] * nothingmuch thinks that it doesn't really matter

[08:43] <nothingmuch> because most OSX users are like my mom

[08:43] <nothingmuch> they don't know about the fundamental diff between an app and the syste,

[08:44] <nothingmuch> and if safari ships a new shlib that everything else must be restarted for, then perhaps rebooting the machine is the simplest choice

[08:44] <dduncan> since those Apps are made by Apple, it is possible that they bundle certain system service updates with the app updates, and/or the apps are composed partly of daemons, hence the restart request ...

[08:44] <Juerd> It should optimize for "most" users

[08:44] <dduncan> however, I haven't seen this when I've updated those apps

[08:44] <nothingmuch> the fundamental issue is that OSX is not meant for people who like control

[08:44] <Juerd> Not cripple other users.

[08:44] <dduncan> I don't recall being asked to restart when upgrading an app, only a system component

[08:44] <nothingmuch> well, too much choices are, at least in apple's opinion, adding unnecessary complexity

[08:44] <Juerd> I have some applications open that I wish to keep open for weeks.

[08:45] <nothingmuch> then you can ignore it

[08:45] <nothingmuch> if you know what you are doing you can get around it

[08:45] <Juerd> After restarting the system, it takes me at least 20 minutes to get the system back in its current state.

[08:45] <nothingmuch> Juerd: what apps are those?

[08:46] <nothingmuch> you can use launchd to get veyr right init.d like behavior

[08:46] <dduncan> according to my current Software Update, the iTunes upgrade does *not* request a restart

[08:46] <nothingmuch> per user or per system

[08:46] <dduncan> however, Quicktime does

[08:46] <dduncan> and they did appear around the same time

[08:46] <Juerd> nothingmuch: It includes firefox with some tabs, the whole of applications, window arrangement

[08:46] <dduncan> maybe that's what requested the restart

[08:46] <nothingmuch> that's because quicktime is reused in around every app that makes noises or draws pictures

[08:46] <dduncan> yes

[08:46] <Juerd> nothingmuch: Some permanently open IM windows

[08:47] <Juerd> I don't even know who they all are

[08:47] <Juerd> But it sure does help me to have them open all the time.

[08:47] <Juerd> dduncan: It's not a matter of simple requesting

[08:47] <nothingmuch> Juerd: if you like that specific form of stability, then i think you should just refrain from updating.. there's nothing really important in there, I think

[08:47] <Juerd> The window doesn't have a "I'll restart later, but thanks for the heads up" button

[08:48] <Juerd> Even Microsoft Windows has this.

[08:48] <dduncan> oddly enough, some of them do

[08:48] <nothingmuch> Juerd: the issue is cultural

[08:48] <nothingmuch> based on apple's assumptiont hat most people should not be given that choice

[08:48] <svnbot6> r7162 | autrijus++ | * At suggestion from dons, expose the main "runProgramWith" API

[08:48] <svnbot6> r7162 | autrijus++ |   of Pugs so it can turn a Pugs "Val" into anything at all,

[08:48] <svnbot6> r7162 | autrijus++ |   particularly something that hIDE or yi would accept, so perl6

[08:48] <svnbot6> r7162 | autrijus++ |   could become a scripting language for them.

[08:48] <Juerd> This is the computer instructing me to do something

[08:48] <Juerd> That is the wrong way around.

[08:48] <nothingmuch> because it will cause behavior that is unpredictable to them

[08:48] <Juerd> The computer is my slave, I am not its.

[08:48] <nothingmuch> i'm not saying right or wrong, it's just that this is OSX, and it won't change

[08:49] <Juerd> Unpredictable? Hell no, the changes aren't even active until you restart.

[08:49] <dduncan> Windows PCs also have a physical button to eject floppy disks etc, so you can easily make them come out while the R/W heads are still working on them, potentially damaging the disk; Apple didn't give that option

[08:49] <nothingmuch> right, but serve users who don't know how things work you need to cut some choices

[08:49] <Juerd> dduncan: That's not a software issue, it's a hardware issue. It has nothing at all to do with either Microsoft or Windows.

[08:50] <dduncan> it had to do with Apple not giving people certain choices, though

[08:50] <Juerd> nothingmuch: Then give the dialog a red "close" button, for power users. It doesn't confuse any newbie, but provides me with enough of a hint to know that it'll rid me of this thing.

[08:50] <Juerd> Anyway

[08:50] <Juerd> I've had this Apple for half a year now

[08:50] <Juerd> And it was nice to finally get to know OS X

[08:50] <Juerd> It's not for me.

[08:51] <Juerd> It's not even for my grandpa.

[08:51] <dduncan> does your grandpa have Linux too?

[08:51] <nothingmuch> fair enough =)

[08:51] <Juerd> Both me and my digi-analphabetical grandpa are much better off with Ubuntu.

[08:51] <Juerd> dduncan: Sure. Windows is too hard and complex for him.

[08:51] <Juerd> The man's 81.

[08:51] <nothingmuch> so what makes OSX bad for him?

[08:51] <Juerd> He must have few choices, and a system that works.

[08:52] <Juerd> nothingmuch: The way too prominent difference between window and application.

[08:52] <Juerd> It's hard for some people to grok that if you close a window, the application is still running.

[08:52] <nothingmuch> ah

[08:52] <Juerd> And he finds it hard to predict whether clicking a dock icon will or will not open a new window

[08:53] <Juerd> This is the same problem, but in a different guise

[08:53] <dduncan> and other people are confused by menu bars for multiple apps being visible at the same time, in their windows

[08:53] <dduncan> on the Mac, the menu bar shows the front most application all the time

[08:53] <Juerd> Oh, he's just confused by the weird menu bar that is attached to windows semantically, but not visually

[08:53] <dduncan> and there aren't others to confuse them

[08:54] <Juerd> dduncan: The concept of rectangles that serve to delimit windows works really well.

[08:54] <nothingmuch> yes and no

[08:54] <nothingmuch> these are issues which are completely cultural

[08:54] <Juerd> The MacOS menu bar is outside the window, but part of it.

[08:54] <nothingmuch> there is no point arguing over them

[08:54] <dduncan> often, the same app has multiple windows

[08:54] <Juerd> dduncan: Newbies are single taskers.

[08:54] <Juerd> All of them are.

[08:55] <Juerd> People needing simplicity don't have two windows visible at the same time. That's confusing.

[08:55] <integral> sounds like the original Machintosh interface

[08:55] <dduncan> what if they want to compare 2 documents side-by-side?

[08:55] <Juerd> But when they do get multiple windows, not out of choice, it should be damn obvious which widget belongs to which window.

[08:55] <Juerd> dduncan: They switch, via the task bar, or via expose.

[08:55] <dduncan> integral, not quite

[08:55] <integral> dduncan: they print them both out and use a red pen!  or at least my mum does

[08:55] <dduncan> the original Mac OS only had one app running at a time

[08:56] <dduncan> but any app could always have multiple windows, and the menu bar was separate on the screen 

[08:56] <integral> ok, the "multitasking" one after that, each app just used the full screen still

[08:56] <Juerd> My dad mostly dislikes OS X because of its exaggerated font smoothing which he finds ugly... 

[08:56] <Juerd> But then, the guy dislikes Gnome too just because it's ugly

[08:56] <dduncan> that can be turned off

[08:57] <Juerd> dduncan: And then you get no smoothing at all

[08:57] <nothingmuch> windows is pretty? ;-)

[08:57] <Juerd> There should be something between the lightest smoothing and it turned off

[08:57] <dduncan> I think smoothing can also be adjusted

[08:57] <Juerd> This something is usually called anti aliassing in other systems

[08:57] <Juerd> Apple's smoothing is just a blur, it's not actual anti aliasing.

[08:57] <nothingmuch> uh, wtf?

[08:58] <dduncan> oh really?

[08:58] <dduncan> that would seem very unlike them

[08:58] <Juerd> A straight line should not have a half-transparent line along it.

[08:58] <integral> gnome's one's very good at getting that right

[08:58] <Juerd> integral: That's not Gnome's, but X's

[08:59] <Juerd> dduncan: If you happen to have Terminal.app open right now, with ssh running in it, look at the h

[08:59] <integral> yes, but gnome insists on running on X

[08:59] <dduncan> done

[08:59] <Juerd> dduncan: There's a gray line left of it. It shouldn't be there - it hinders clarity.

[08:59] <Juerd> The h in the title bar, by the way :)

[08:59] * nothingmuch turns smoothing off for the terminal

[09:00] <dduncan> I can see the grey line in the terminal window itself

[09:00] <Juerd> nothingmuch: Yes, it's the title bar, not the terminal

[09:00] <dduncan> where I type it in

[09:00] <nothingmuch> but for everything else it has never made me sad

[09:00] <integral> it's very noticable on the — in the title

[09:00] <Juerd> nothingmuch: You like beach balls, then? :)

[09:01] <dduncan> now that its running, in the title bar I can see a slight grey on the right side, but its more subtle ... easier to read

[09:01] <Juerd> dduncan: Anyway, this is very bad for clarity and contrast. People with bad vision who are beyond what lenses can fix, really do notice these little things more than other people.

[09:01] <dduncan> I have a flat panel display, if that makes any difference

[09:01] <dduncan> mind you, I always operate at a lower resolution than my screen is capable of, due to *my* poor vision

[09:01] <Juerd> AA is good, "smoothing" (blurring) is not.

[09:01] <dduncan> in this case, 1024 rather than 1280

[09:02] <dduncan> on 17"

[09:02] <Juerd> At lower resolution, especially on a flat panel, it's very visible.

[09:02] <Juerd> Has it never bothered you at all?

[09:02] <dduncan> I can see it, but it doesn't really bother me

[09:02] <Juerd> It bothers me because I know the theory, but isn't really a problem for me

[09:02] <Juerd> (Like bad spelling)

[09:03] <Juerd> Anyway

[09:03] <Juerd> I'm looking forward to installing kubuntu on this machine

[09:03] <Juerd> I still do like the hardware - a lot.

[09:03] <dduncan> never heard of that one

[09:03] <Juerd> Of what?

[09:03] <dduncan> kubuntu

[09:03] <dduncan> is the k a typo?

[09:03] <Juerd> No

[09:03] <Juerd> Ubuntu is ubuntu-base + ubuntu-desktop

[09:03] <svnbot6> r7163 | autrijus++ | * remove Pugs.External.C at prompt from SyntaxNinja.

[09:03] <Juerd> Kubuntu is ubuntu-base + kubuntu-desktop

[09:03] <dduncan> okay

[09:04] <Juerd> Kubuntu uses KDE, not Gnome.

[09:04] <dduncan> so KDE is not a desktop of its own?

[09:04] <dduncan> how is that different from "kubuntu-desktop"?

[09:04] <Juerd> kubuntu-desktop is a meta-package that depends on the packages that together make up kubuntu

[09:05] <Juerd> One of these packages is KDE

[09:05] <Juerd> It doesn't install the full KDE suite, though, because ubuntu, and thus kubuntu, do try to keep things simple and grokkable.

[09:05] <dduncan> so then, "ubuntu-base" by definition does not include a desktop?

[09:05] <Juerd> Indeed

[09:05] <Juerd> It's the base system

[09:05] <Juerd> Usable for both workstations and servers

[09:06] <dduncan> I guess that base system only includes a command line

[09:06] <Juerd> And for people who don't like meta packages :)

[09:06] <dduncan> with the GUI desktop an optional install for a desktop

[09:06] <Juerd> Well, the default installation for ubuntu is ubuntu-desktop

[09:06] <Juerd> This is what you get if you don't choose "server"

[09:07] <Juerd> You can then choose to install kubuntu-desktop, and remove ubuntu-desktop's packages manually

[09:07] <dduncan> would you consider Ubuntu to be the most user-friendly Linux distro?

[09:07] <Juerd> You can also get a Kubuntu cd instead of an Ubuntu cd, and then you get kubuntu-desktop out of the box

[09:07] <Juerd> Yes, I do

[09:07] <Juerd> Kubuntu a little less so, but it's nicer to work with if you do know how a computer works.

[09:08] <dduncan> I do prefer a system with a default config that "just works"

[09:08] <dduncan> while I like to program, I do not like to spend time configuring a system

[09:08] <Juerd> So do I

[09:09] <Juerd> That's why I migrated from Debian to (k)Ubuntu for workstations

[09:09] <Juerd> I do like to have the option of being in control when I want to quickly do something, though

[09:09] <dduncan> is there a Ubuntu live cd?

[09:09] <Juerd> There is

[09:10] <Juerd> It even works on macs.

[09:10] <Juerd> (If you get the ppc one, that is)

[09:10] <dduncan> yes

[09:10] <Juerd> Ubuntu ships free cd's, they are in two-cd cartons: live and installation

[09:10] <dduncan> I'll try to remember the name Ubuntu, should I want to try running a Linux desktop some day

[09:10] <Juerd> These are pressed cd's

[09:10] <Juerd> It takes a month at least to get them

[09:11] <Juerd> But you can get 10 or even 100 at a time.

[09:11] <Juerd> To hand them out to friends.

[09:11] <integral> the linux version of aol...

[09:11] <Juerd> Don't bother trying to get a single one. It's cost ineffective :)

[09:11] <Juerd> integral: It works well.

[09:11] <dduncan> probably cheaper to download and burn it myself

[09:11] <Juerd> dduncan: Cheaper than free?

[09:11] <integral> Juerd: it does.  I use it on a couple of desktops

[09:11] <integral> also dead easy to install for X terminals

[09:11] <Juerd> dduncan: It'll certainly be faster to download and burn it, though :)

[09:12] <dduncan> that's what I mean

[09:12] <dduncan> but are you also saying you can get CDs in the mail at no cost?

[09:12] <Juerd> Yes

[09:12] <dduncan> I thought they always charged for those, to cover pressing and shipping costs to them

[09:12] <Juerd> You get a box with in it, 10 or more cartons

[09:12] <Juerd> No, it's completely free.

[09:12] <Juerd> Canonical, the company behind Ubuntu, sponsors it.

[09:13] <dduncan> I see

[09:13] <Juerd> That's only for ubuntu, though

[09:13] <dduncan> anyway, its 2:13 am here, so I'm about to nod off

[09:13] <dduncan> I see

[09:13] <Juerd> Good night

[09:14] <dduncan> and I leaveth ...

[09:20] <masak> strings aren't subscriptable by default, are they?

[09:20] <svnbot6> r7164 | autrijus++ | * import dons's Data.FastPackedString, an amazingly fast

[09:20] <svnbot6> r7164 | autrijus++ |   string manipulation library.  Currently just for PIL.Str,

[09:20] <svnbot6> r7164 | autrijus++ |   but thinking about moving it back to Pugs.Val as well.

[09:20] <masak> what kind of overloading would it take to make them subscriptable?

[09:20] <Juerd> masak: Not following current design, but I'd like them to be, .chars-wise.

[09:21] <masak> Juerd: it would certainly help in a char-based algorithm

[09:21] <Juerd> masak: class Array { method postcircumfix:<[ ]> ($index) { .chars[$index] } }

[09:21] <Juerd> Or something like that.

[09:21] <masak> class Array? why?

[09:22] * masak is implementing boyer-moore in p6 right now, for fun

[09:22] <Juerd> It'd be nice if strings would just coerce to arrays as character arrays, and [] provided Array context to its left.

[09:23] <Juerd> masak: Oh, then ignore me. I'm talking theoretical, have no good overview of what's current, andcertainly have no idea what's actually implemented

[09:23] <masak> Juerd: oki

[09:23] <masak> I'll just try a few things and see what works

[09:23] <masak> there is something to be said for writing things in the normal way, too

[09:26] <QtPlatypus> ?eval ord("A")

[09:26] <evalbot_7164> 65 

[09:26] <Juerd> I think there's mostly something to say for changing the normal way 

[09:27] <QtPlatypus> ?eval ord("Z")

[09:27] <evalbot_7164> 90 

[09:27] <QtPlatypus> ?eval ord("a")

[09:27] <evalbot_7164> 97 

[09:27] <QtPlatypus> ?eval ord("z")

[09:27] <evalbot_7164> 122 

[09:29] <masak> Juerd: if maintainability is an issue, writing things as normally as possible is very desirable

[09:35] <masak> dang, the pseudocode would be trivial to write in p6 if the indexing weren't one-based

[09:35] <masak> which serious language uses one-based indexing nowadays?

[09:35] * masak begins at 0, as god intended

[09:36] <integral> lots of maths...

[09:43] <masak> integral: not really, but lots of chances of making an off-by-one mistake

[09:47] <integral> not really?

[09:47] <Juerd> masak: Sure, but what's normal?

[09:48] <Juerd> masak: Is normal when the programmer writes what he means in a certain syntax, or is normal when a programmer writes things that don't resemble what he means, but are needed because of the language's limitations?

[09:48] <Juerd> The simplest example I can give is until/if not

[09:48] <Juerd> I love that I can choose.

[09:48] <Juerd> eh

[09:48] <Juerd> unless/if not

[09:48] <Juerd> and until/while

[09:49] <Juerd> I do usually write if not, but I do feel limited in a language that has only if.

[10:11] <qwr> unless not ;)

[10:13] <masak> Juerd: I actually agree with you there, and it's one of the places where I feel that damian is being overly strict in his PBP book

[10:14] <masak> (he doesn't like unless/until because they tend to be difficult to maintain)

[10:14] <masak> & #lunch

[10:30] <QtPlatypus> ?eval given "T" {when "A" le $_ le "Z" {say "Test"}}

[10:30] <evalbot_7164> undef 

[10:31] <QtPlatypus> ?eval given "T" {when "A" ge $_ ge "Z" {say "Test"}}

[10:31] <evalbot_7164> undef 

[10:31] <QtPlatypus> ?eval given "T" {when ("A" le $_ le "Z") {say "Test"}}

[10:31] <evalbot_7164> undef 

[10:32] <QtPlatypus> ?eval given "T" {when ("A" le $_ ) {say "Test"}}

[10:32] <evalbot_7164> undef 

[10:32] <QtPlatypus> ?eval given "T" {when (1) {say "Test"}}

[10:32] <evalbot_7164> undef 

[10:32] <QtPlatypus> ?eval given "T" {when /T/ {say "Test"}}

[10:32] <evalbot_7164> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[10:32] <QtPlatypus> ?eval given "T" {when "T" {say "Test"}}

[10:32] <evalbot_7164> Test bool::true 

[10:39] <Juerd> masak: I still have to read that book

[10:39] <Juerd> It feels weird to be spending money on a style guide though

[10:40] <Juerd> And I think a style guide without "my" in its title is just wrong.

[10:49] * knewt builds ghc on his new laptop. gonna take a while methinks :)

[10:50] <svnbot6> r7165 | clkao++ | UTF8.PackedString is no more

[10:51] <clkao> oops, that doesnt fix the build

[11:28] <wolverian> QtPlatypus, 'when "A" le $_"' means 'if $_ ~~ "A" le $_' which probably doesn't make any sense

[11:30] * QtPlatypus nods.

[11:31] <QtPlatypus> wolverian: Is there anyway to do something like that?

[11:40] <spinclad> ?eval given 't' { when 'a'..'z' { say 'in' }}

[11:40] <evalbot_7165> undef 

[11:41] <Juerd> QtPlatypus: when .ge("A"), perhaps

[11:42] <spinclad> ?eval $*VERSION

[11:42] <evalbot_7165> \undef 

[11:42] <spinclad> ?eval $?VERSION

[11:42] <evalbot_7165> Error: Undeclared variable: "$?VERSION" 

[11:43] <spinclad> .oO (how's that go again?)

[11:51] <autrijus> ?eval $?PUGS_VERSION

[11:51] <evalbot_7165> \'Perl6 User\'s Golfing System, version 6.2.9, August 3, 2005 (r7163)' 

[11:52] <autrijus> clkao: the build doesn't build for you?

[11:53] <spinclad> (didn't build for 7164 either?)

[11:53] <G2> Wow, Autrijus is here.

[11:54] <spinclad> ?eval $?PUGS_VERSION

[11:54] <evalbot_7166> \'Perl6 User\'s Golfing System, version 6.2.9, August 3, 2005 (r7163)' 

[11:54] <autrijus> G2: hi.

[11:55] <G2> autrijus: Hi. This is quite cool. You're famous 

[11:55] * G2 ends suck up

[11:55] <autrijus> er. hi. thanks.

[11:56] <G2> autrijus: nevermind. I just love the community, being able to say hi to the top people

[11:56] <svnbot6> r7166 | autrijus++ | * Merged Data.FastPackedString with Simon Marlow's FPS API.

[11:56] <svnbot6> r7167 | autrijus++ | * Fix build by supressing DrIFT.Binary's instance for PackedString

[11:56] <autrijus> G2: thanks :) it's indeed a lovely place, this channel

[11:57] <G2> autrijus: Aye. On PM, you get to speak to Merlyn, Larry and all the other greats. Anyway, I'll leave you to do your thing. Keep up the great work (from ghenry on perlmonks.org - http://perlmonks.org/?node_id=386673)

[11:57] <Jooon> G2: I usually just hang around and say "oooh" and "aaah" when I see something cool, which happens a lot :)

[11:58] <G2> Jooon: I know. It's very cool.

[11:58] <G2> Off for lunch. Catch you guys later.

[11:58] * nothingmuch struggles with extern, c headers, and name mangling

[11:58] <autrijus> nothingmuch: for $job or blondie or something else?

[11:59] <nothingmuch> $job

[11:59] <autrijus> nod

[11:59] * nothingmuch spent the weekend doing charity sysadmining

[11:59] <nothingmuch> indirectly

[11:59] <nothingmuch> fixed up a catalyst site for a friend and wasted lots of time getting it to actually run

[11:59] <nothingmuch> but Blondie is going to be top priority soon

[11:59] <nothingmuch> i have big plans for the type inferrencing stuff

[11:59] * spinclad deeply enjoyed backlogging the MM2 work tod^Wyesterday

[12:00] <nothingmuch> spinclad: anything specific?

[12:01] <spinclad> no, just... being here when it got hammered out.  \camels++

[12:03] <spinclad> been looking forward to it for a while, just bystanding

[12:05] <nothingmuch> ah

[12:13] <spinclad> nm: do you have any interest in CPS-transformations in Blondie?  such as would let you define both map and for in root terms...

[12:13] <svnbot6> r7168 | autrijus++ | * oops, wrong linking.

[12:15] <spinclad> ?eval $?PUGS_VERSION

[12:15] <evalbot_7167> \'Perl6 User\'s Golfing System, version 6.2.9, August 3, 2005 (r7163)' 

[12:16] <spinclad> ?eval $?PUGS_VERSION

[12:16] <evalbot_7168> \'Perl6 User\'s Golfing System, version 6.2.9, August 3, 2005 (r7163)' 

[12:16] <spinclad> heh

[12:16] <spinclad> do we know the evalbot's really running a new-build pugs?

[12:17] <spinclad> s/build/built/

[12:17] <autrijus> disagreement would mean the build failed

[12:17] <nothingmuch> not necessarily

[12:17] <nothingmuch> sometimes i think that doc fixes etc would not cause a rebuild, no?

[12:17] <autrijus> true...

[12:18] <nothingmuch> spinclad: yes, i'm going to do CPS tranformations in Blondie

[12:18] <nothingmuch> eventually i hope Blondie becomes somewhat like schemee

[12:18] <spinclad> should still make a new pugs_version.h, and so a new pugs

[12:18] <nothingmuch> hmm... good point

[12:18] <spinclad> that would be most tasty

[12:19] <nothingmuch> ... but with perlish semantics WRT pluggable runtimes and typing, and so forth

[12:19] <nothingmuch> i have some pretty funky ideas about macro processing

[12:20] <nothingmuch> where every macro is just a normal function

[12:20] <nothingmuch> except that it's type signature is AST -> ... -> AST

[12:20] <nothingmuch> so they can be defined in terms of higher order functions

[12:20] <nothingmuch> whenever the Macro node happens at compile time, the invocant function is compiled, and it gets it's uncompiled parameters as ASTs

[12:21] <nothingmuch> and then the return value is compiled in place of the Macro

[12:21] <nothingmuch> but this is slightly special casey

[12:21] <nothingmuch> what I would really like is an Immediate node

[12:21] <nothingmuch> and a Delayed node.

[12:22] <nothingmuch> as well as compile and apply nodes

[12:24] * spinclad notes a schemish front-end as a possible TODO

[12:25] * spinclad works on his tuit supply

[12:27] <autrijus> spinclad++ # tuit boost

[12:28] <spinclad> thanks, that helps

[12:28] <wolverian> QtPlatypus, you could just use 'if'

[12:46] <QtPlatypus> wolverian: I have.  It ends up being a big ugly 6 line if {...} elsif {...} else {...} thingy

[12:51] <Juerd> QtPlatypus: when condition ?? $_ :: "\0" { ... } ;)

[12:51] <Juerd> eh

[12:51] <Juerd> QtPlatypus: when condition ?? $_ !! "\0" { ... } ;)

[12:54] <wolverian> oh, well. why isn't when "a".."z" working, anyway? :)

[12:56] <Juerd> ?eval "a".."z"

[12:56] <evalbot_7168> ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z') 

[12:56] <Juerd> ?eval "b" ~~ ("a".."z")

[12:56] <evalbot_7168> bool::false 

[12:56] <Juerd> Because it's broken :)

[12:56] <wolverian> right. :)

[12:56] <Juerd> ?eval 3 ~~ (1..9)

[12:56] <evalbot_7168> bool::false 

[12:56] <wolverian> ?eval 3 ~~ [1..9]

[12:56] <evalbot_7168> bool::false 

[12:56] <Juerd> ?eval [1..9] ~~ 3

[12:56] <evalbot_7168> bool::false 

[12:58] <wolverian> ?eval (1..9) ~~ 3

[12:58] <evalbot_7168> bool::false 

[12:59] <wolverian> hm. where is &infix:<~~> defined? 

[13:06] <icyvapor> anyone know about processing large-scale dataset using perl?

[13:07] <integral> using perl6?

[13:07] <nnunley> Junctions.

[13:07] <integral> LINQ in c#, maybe

[13:07] <autrijus> icyvapor: which shape of data?

[13:08] <icyvapor> how can I check whether I'm using perl6

[13:08] <icyvapor> flat text files

[13:08] <nnunley> icyvapor: Unless you install perl 6, it's unlikely that you would be using it by accident.

[13:09] <icyvapor> :) then I'm not, the perl I'm using comes with linux

[13:09] <integral> icyvapor: well this channel, as indicated by the name, is specifically for perl6, Perl 6 and related bits

[13:09] <nothingmuch> booya

[13:10] <integral> there's #perl, #perlhelp, #perlcafe, ##perl, etc for more general stuff

[13:10] * nothingmuch had to make ufc_crypt from glibc compile on windows since CryptAcquireContext is so nice

[13:12] <icyvapor> ok, thanks a lot guys

[13:12] <wolverian> nothingmuch, what is that?

[13:12] <nothingmuch> wolverian: on windows to do the normal crypt() style hashing you need to do some pretty weird stuff

[13:13] <nothingmuch> namely be logged in with permissions that allow you to get a handle to a remote object in a secured process

[13:13] <nothingmuch> via CryptAcquireContext

[13:13] <nothingmuch> makes sense, doesn't it? =(

[13:13] <nothingmuch> anyway, since there are many ways of instantiating it, and more ways in which it could fail, and we had yet another scenario where it doesn't work

[13:13] <nothingmuch> i just integrated a plain C implementation

[13:16] <wolverian> nothingmuch, I .. uh .. that fits my theme of browsing we.hates-software.com today :)

[13:19] <nothingmuch> wolverian: anything specific?

[13:19] <nothingmuch> btw, this is the second time CryptAcquireContetxt has pissed me off

[13:19] <nothingmuch> the last time it couldn't compute a crypt of a password because the session i was logged in through (cygwin ssh server) was not interactive

[13:20] <nothingmuch> we now have if (!CryptAcquireContext(...)) three times with different args

[13:21] <wolverian> nothingmuch, just taking a break from being serious

[13:21] <nothingmuch> ah

[13:21] <nothingmuch> so how do you post to there?

[13:24] <nothingmuch> huh... /me didn't even notice itunes changed look again

[13:29] <wolverian> nothingmuch, http://hates-software.com/

[13:29] <nothingmuch> yeah, i found out by now ;-)

[13:29] * nothingmuch suspects he will be a regular poster

[13:30] <wolverian> :)

[13:36] <autrijus> mm this ongoing talk is going to make iblech happy

[13:37] <nothingmuch> how come?

[13:37] <autrijus> a new way to implement first class continuations on utterly uncooperating VMs

[13:37] <nothingmuch> ah

[13:37] <nothingmuch> brief us?

[13:38] <autrijus> compile away continuations into stack inspection primitives.

[13:38] <autrijus> starting from ANF

[13:39] <autrijus> the URL is:

[13:39] <autrijus> http://www.cs.brown.edu/~sk/Publications/Papers/Published/pcmkf-cont-from-gen-stack-insp/

[13:39] <nothingmuch> that sounds a bit like continuations in C on the c2 wiki

[13:40] <nothingmuch> basically it changes the base and stack pointers to point at a different stack each time

[13:40] <nothingmuch> and it can swap these

[13:42] * nothingmuch wishes he was next to autrijus right now

[13:42] <nothingmuch> the talks sound so interesting

[13:42] <autrijus> it is!

[13:45] * nothingmuch is pissed

[13:45] <nothingmuch> beyahad.info is responding like crap because it can't write to an old template cache file

[13:46] <nothingmuch> Petal is so stupid about these things... It's a really nice language for when the template is very simple

[13:46] <nothingmuch> but the implementation is just not good enough

[13:46] * nothingmuch will prolly have to switch to TT soon

[13:48] <xinming_Beijing> autrijus: hmm, May I know what does class continuation mean please?

[13:49] <autrijus> xinming_Beijing: "first-class" continuation

[13:49] <autrijus> first-class means you can pass it around as a value

[13:49] <autrijus> so his insight is basically that a disciplined use of try/catch can implement ANF-plus-continuation-marks

[13:50] <autrijus> which is then proved to be rich enough to carry full call/cc

[13:50] <autrijus> it's quite nice, complete with working implementation targetting C#

[13:53] <xinming_Beijing> autrijus: hmmm, So, does it mean. The class will act as a object automatically?

[13:53] <autrijus> his paper mentions Parrot :)

[13:53] <xinming_Beijing> hmm...

[13:54] <autrijus> "Parrot went to great length to become CPS based, but we proved that normal error-handling would serve their purpose just as well"

[13:54] <autrijus> xinming_Beijing: er, no, it has nothing to do with class and objects

[13:55] <autrijus> xinming_Beijing: this is about continuations. think of the dump() functions. 

[13:55] <autrijus> if you can put dump()'s result into a variable, _without_ stopping the program

[13:55] <autrijus> and you can resume from that variable later

[13:55] <autrijus> then you get first-class continuations

[13:57] <autrijus> so this technique is as good as CPS, but does not rely on tail calls or trampolines

[13:57] <autrijus> so it should fit well with javascript

[13:58] <integral> and perl5?

[13:58] <xinming_Beijing> hmm, So, In my understanding. It makes the snapshot of a "function" or a object into a variable. And you can use this "variable" later, right?

[13:58] <autrijus> integral: I don't know how good eval{} and die" is in term of performance

[13:58] <autrijus> xinming_Beijing: no, read "perldoc -f dump" :)

[13:59] <xinming_Beijing> autrijus: So, Does this mean, We can hibernate the program, And run in that state again soon.

[13:59] <xinming_Beijing> autrijus: Ok,

[13:59] <autrijus> yup

[13:59] <integral> there's labelled blocks and last too

[13:59] <autrijus> it's exactly like hibernation.

[13:59] <autrijus> integral: can't use that in interaction with normal perl5 

[14:00] <autrijus> hm, wait, maybe we can

[14:00] <integral> oh, not without a shim layer, but you're using the metamodel stuff anyway, so lots of stuff doesn't look normal anyway...

[14:00] <autrijus> right exactly

[14:00] <autrijus> and 

[14:00] <xinming_Beijing> Oh, This idea will make well-written perl 6 program fastest without close... >_<

[14:00] <autrijus> FOO: { ... call_complex_ffi(sub { last FOO }) }

[14:00] <autrijus> this in p5 will dtrt?

[14:00] <integral> oh, no it won't

[14:00] <autrijus> no?

[14:01] <autrijus> "last-outside-sub"

[14:01] <integral> the FOO is searched in the dynamic scope at the time the last is executed

[14:01] <autrijus> really.

[14:01] <integral> sorry, I think I assumed the wrong question

[14:01] <xinming_Beijing> autrijus: Ok, I think I know that idea now...

[14:02] <autrijus> integral: it worksforme.

[14:02] <xinming_Beijing> autrijus FOO: { ... call_complex_ffi(sub { last FOO }) }

[14:02] <xinming_Beijing> is this example for me?

[14:02] <integral> autrijus: I don't quite understand what the WTRT is wrt to though.  Capturing the stack when the closure is created?  last across a Perl->XS->Perl callback?

[14:04] <autrijus> the speaker notes no prior art on trampolining or cps+try/catch on javascript vms

[14:04] <autrijus> xinming_Beijing: no, that was for integral

[14:06] * integral &

[14:07] <nothingmuch> autrijus: help...

[14:08] <nothingmuch> "the relation |-->* is the reflexive transitive closure of the transition function"

[14:08] <nothingmuch> what does that mean?

[14:10] <autrijus> closure means the return value can be used again as the argument

[14:10] <autrijus> transitive means that if a|->*b  and b|->*c then a |->*c

[14:11] <autrijus> reflexive means that forall a.  a|->*a

[14:11] <autrijus> does that help?

[14:11] <nothingmuch> somewhat

[14:12] * nothingmuch will try to compile

[14:12] <wolverian> what is the transition function?

[14:12] <wolverian> :)

[14:13] <autrijus> wolverian: turing machine, apparently

[14:14] <nothingmuch> CEK machine

[14:15] <nothingmuch> http://research.compaq.com/SRC/personal/flanagan/papers/pldi93.ps

[14:16] <wolverian> autrijus, oh.

[14:16] <wolverian> nothingmuch, ah.

[14:20] * nothingmuch wonders if you can take a course on reading mathy articles

[14:21] * nothingmuch wants to be a certified lambdexic

[14:21] <nothingmuch> lambdlexic, sorry

[14:22] <nothingmuch> so what does "the relation" is the <adjectives> closure of the translation function mean"?

[14:22] <nothingmuch> beh, quoting bugs

[14:23] <nothingmuch> a relation is a closure of a function

[14:23] <nothingmuch> closure means an ad-noun describing a property of the function

[14:24] <nothingmuch> autrijus: help more

[14:24] <nothingmuch> ;-)

[14:25] <fglock> how about "the set of things that can be both arguments or results of the function" (is this correct?)

[14:25] <nothingmuch> hmm, that is begining to make sense

[14:26] <autrijus> mm after this talk the all-exciting icfp contest result will be revealed

[14:28] <nothingmuch> the robots contest?

[14:28] <autrijus> yeah

[14:28] <nothingmuch> sounds fun

[14:29] <autrijus> one wonders which language will win this year... not perl6, that we are sure

[14:29] <autrijus> acme played in it iirc

[14:29] <autrijus> with perl5

[14:29] <nothingmuch> atomic { nothingmuch.tuits += acme.tuits; acme.tuits = 0 };

[14:30] <nothingmuch> AG made me think a bit

[14:30] <nothingmuch> lots of things in perl 6 are hard to compile

[14:30] <nothingmuch> atomic { } requires that everything is stmish

[14:30] <nothingmuch> eval makes things tough

[14:30] <nothingmuch> etc etc

[14:30] <nothingmuch> what if blocks were attributing through callgraphs

[14:31] <nothingmuch> e.g. atomic { } adds an attribute to all assignments that can be called from it

[14:31] <nothingmuch> assignment adds the attribute to all lvalues 

[14:31] <nothingmuch> SSA Phi compression of lvalues allows to determine which containers need logging and which ones are never shared

[14:32] * nothingmuch will try to add leverage Language::AttributeGrammar in Blondie to make such conversions possible

[14:32] <nothingmuch> compute how little work can be done for a given program

[14:37] <nothingmuch> aha... our compsci guru explained it to me

[14:40] <kolibrie> Juerd: I didn't quite grasp the full meaning of: K vnd grtz n btj mljk t lzn, n d z mt ntrljk n s zjn

[14:40] <kolibrie> Ik vnd grtz een beetje moeilijk te lezen, ...

[14:41] <nothingmuch> is that dutch with no vowels?

[14:41] <kolibrie> believe so

[14:42] <kolibrie> except for the grtz, which is a quote from an e-amil

[14:42] <mauke> hmm, "mljk t lzn" could be "possible to read"

[14:43] <kolibrie> oh, I can translate from dutch to english, I want the rest of the dutch

[14:43] <kolibrie> "I find grtz a little difficult to read, ..."

[14:43] <mauke> oops, didn't see your second line :-)

[15:18] <Juerd> kolibrie: en die z moet natuurlijk een s zijn

[15:24] <autrijus> judges's prize: dylan hackers

[15:26] <autrijus> 3rd: Combat Tantalin (haskell)

[15:26] <autrijus> 2nd same as judge's prize

[15:26] <kolibrie> Juerd: ah, thank you

[15:28] <autrijus> the dylan hackers are giving the audience an overview of the language

[15:31] <acme__> pesky lack of winning

[15:31] <autrijus> 1st prize: Wolfgang Thaller et al, Haskell, two years running

[15:31] <clkao> poor team orange

[15:32] <acme__> they didn't use my much-prettier-maps

[15:37] <acme__> eg http://icfpc.cs.uchicago.edu/reg/026/robber/ vs http://astray.com/icfp/game/robber_vs_randomcar/mark_wutka/10

[15:43] <stevan> dylan++ # very cool language

[15:43] <stevan> good morning boys and girls

[15:54] <fglock> hi stevan

[15:55] <stevan> hey fglock 

[15:57] * nothingmuch doesn't get a greeting?

[15:58] <fglock> hi nothingmuch!

[15:58] <stevan> hi nothingmuch 

[15:58] <nothingmuch> and I thought you didn't love me for a second there ;-)

[15:58] <stevan> nothingmuch: I will never stop loving you ;)

[15:58] <nothingmuch> stevan: to prove it want to fly me to euro-oscon?

[15:59] * stevan was messing around with lambda calc till very late last night

[15:59] <stevan> nothingmuch: I suggest you start walking now,.. you might make it

[15:59] * stevan would love to go to EURO-OSCON too

[15:59] <nothingmuch> yep... the lebanese/syrian boundry is no problem what so ever

[16:00] <nothingmuch> s/boundry/border/

[16:00] <stevan> you could pass

[16:00] <stevan> with your accent

[16:00] <nothingmuch> hehe

[16:01] <nothingmuch> also, amsterdam is pretty far away

[16:01] <nothingmuch> 20 days is not much

[16:01] <stevan> bike then

[16:01] <nothingmuch> i could possibly bike there

[16:01] <nothingmuch> yeah

[16:02] <mshiltonj> is there a place i can find info on the status of perl6 rfc 89 -- http://dev.perl.org/perl6/rfc/89.html -- if it is being implemented, etc.

[16:02] <stevan> take gaal with you and you can cut throught he turkish mountains

[16:02] <nothingmuch> mshiltonj: i doubt you'll find a formal status

[16:02] <nothingmuch> the de facto situation on typing is pretty advanced though

[16:03] <nothingmuch> (not as advanced as it's going to be but we do have some things)

[16:03] <nothingmuch> but the rfc itself seems pretty far from what will eventually get implemented

[16:04] <mshiltonj> k. but data typing of some sort will be there?

[16:04] <nothingmuch> yes

[16:04] <nothingmuch> i'm off to dinner

[16:04] <mshiltonj> cool beans. thanks.

[16:04] <nothingmuch> but i can explain a bit later if you like

[16:04] <kolibrie> stevan: If nothingmuch and gaal bike to EuroOSCON, could we bike too?

[16:07] <fglock> mshiltonj: rfc 089 was rejected (A04)

[16:11] <mshiltonj> didn't know that. I'm interested in whether or not there will be data typing in perl6. If it's in perl, the specific implementation can vary.

[16:17] <fglock> mshiltonj: see the second half of S06 - it's about the Type system

[16:22] <stevan> kolibrie: we would need to swim a little too :)

[16:30] <nothingmuch> evening

[16:32] <mshiltonj> fglock: thanks!

[16:36] <fglock> np

[16:38] <svnbot6> r7169 | autrijus++ | * first step at cabalizing Pugs -- first try at PIL (which works)

[16:38] <nothingmuch> cabalizing?

[16:38] <autrijus> nothingmuch: the eqv of M::B in Hs

[16:38] <autrijus> enables libPugs.a

[16:38] <autrijus> which means much easier linking

[16:38] <nothingmuch> ah

[16:38] <autrijus> nonbroken pugscc

[16:39] <autrijus> and perl6 scripting for all hs programs

[16:52] <nothingmuch> sounds fun

[16:54] <gaal> hola

[16:55] <Limbic_Region> kumusta ma na?

[16:55] <Limbic_Region> err kumusta ka na even

[16:56] <gaal> Limbic_Region: what language is that? :)

[17:03] <fglock> Limbic_Region: Magandang hapon

[17:04] <nothingmuch> autrijus: how much effort do you estimate Inline::GHC will take?

[17:06] <Limbic_Region> gaal - tagalog

[17:07] <Limbic_Region> and good localtime to you too fglock

[17:29] <gaal> autrijus: do we have some sort of equivalent to p5's PL_compiling / PL_curcop?

[17:35] * geoffb fades in

[17:35] <geoffb> autrijus, ETOOMUCHCOMPRESSION: the eqv of M::B in Hs

[17:35] <integral> the equivalent of Module::Build in Haskell.

[17:35] <geoffb> Equivalent and Haskell decompressed, but M::B wasn't in the dictionary window

[17:35] <geoffb> integral, thanks

[17:36] <geoffb> .oO( Man, it is *so* nice to see multiple commits per day from autrijus again )

[17:38] * stevan agrees very much with geoffb 

[17:38] <geoffb> (leased laptops)--

[17:39] <Limbic_Region> s/very much/vehemently/

[17:43] <geoffb> tea++

[17:43] <geoffb> Life is just better with a warm cup of tea.

[17:44] *** DesreveR is now known as r0nny

[17:57] <nothingmuch> luqui: ping

[18:08] <nothingmuch> did luqui ever mention if L::AG has a public repo somewhere?

[18:28] <Limbic_Region> L::AG ?

[18:28] <Limbic_Region> is that the module he just released?

[18:30] <Limbic_Region> ah yes,  Language::AttributeGrammar

[18:33] <kgftr|konobi> stevan: does metamodel also help describe relationships between objects or just the objects and their structures?

[18:34] <stevan> kgftr|konobi: it is the object model itself,.. which is both

[18:52] <kgftr|konobi> stevan: hhhmmm... k

[18:52] <kgftr|konobi> would that include things like data inheritance?

[18:53] <stevan> yes sir

[18:54] <stevan> kgftr|konobi: there is a MM version of Test::Buidler in the ext/ directory (under perl5/Perl6-MetaModel2.0/

[18:54] <kgftr|konobi> =0o

[18:54] <stevan> it is kind of ugly, but it demonstrates all the functionality needed by Test::Builder

[18:55] <kgftr|konobi> then i'll wrap MetaModel with Data::Model to then wrap Class::DBI/Tangram/DBIx::Class objects

[18:55] <stevan> LOL

[18:56] <stevan> uhm

[18:56] <stevan> I wouldnt suggest it with this metamodel 

[18:56] <stevan> it is optimized for theoretical correctness

[18:56] <stevan> so it is largely unusable from any other p5 apps

[18:57] <stevan> however, I am planning to make a p5 usable version of it in the very near future

[18:57] <stevan> cause after this,.. I have no desire at all to return to the p5 OO world

[18:58] <Limbic_Region> out of curiosity stevan

[18:58] <kgftr|konobi> =0o

[18:58] * stevan give Limbic_Region some of his curiosity

[18:58] <Limbic_Region> using MM Objects in p5 will be how easy

[18:58] <Limbic_Region> package Some::Object;

[18:58] <stevan> Limbic_Region: not sure yet

[18:58] <Limbic_Region> use Meta::Model;

[18:58] <Limbic_Region> and then ?

[18:59] <Limbic_Region> oh - well, nevermind then

[18:59] <Limbic_Region> I will wait until you are finished

[18:59] <stevan> Limbic_Region: I would like to make it as simple as possble

[18:59] <stevan> Limbic_Region: see Class::C3 for an example 

[18:59] <Limbic_Region> salutations buu

[18:59] <stevan> that swaps the normal method dispatch for C3

[18:59] <Limbic_Region> stevan - I am weeks, if not months away from needing it

[19:00] <stevan> its kind of hackish,.. but it is totally transparent

[19:00] <kgftr|konobi> stevan: we'll need to have a chat at some point... to avoid duplicating efforts... but need to wait for me to get my mac

[19:00] <stevan> which is what I would like the meta-model to be

[19:00] <stevan> kgftr|konobi: what are you doing?

[19:03] <Limbic_Region> stevan - I have only pedagogal needs ATM - when I am at the point of discussing OO and how it got shoehorned into p5, I would like to be able to point to an alternative ;-)

[19:03] <kgftr|konobi> stevan: providing standard interfaces and model descriptions for both persistent objects, etc and realtime objects, etc.

[19:03] <kgftr|konobi> but in p5

[19:03] * kgftr|konobi ducks

[19:03] <stevan> nice # both of you guys

[19:04] <kgftr|konobi> should help me a bit more to make objects of different types to be more interoperable

[19:44] *** buu_ is now known as buu

[20:03] <svnbot6> r7170 | stevan++ | just need to commit this for the other changes to work ...

[20:08] <svnbot6> r7171 | stevan++ | Perl6::MetaModel 2.0 -

[20:08] <svnbot6> r7171 | stevan++ | * over 50% speedup from optimizing chaos.pl, old chaos.pl moved

[20:08] <svnbot6> r7171 | stevan++ |   to chaos_unoptimized.pl for reference

[20:18] <autrijus>     greetings

[20:18] <Limbic_Region> salutations

[20:18] <stevan> hey autrijus

[20:19] <Limbic_Region> stevan - did that speed increase also lead to clarity in the code?

[20:19] <stevan> Limbic_Region: LOL

[20:19] <stevan> a severe decrease in fact

[20:19] <Limbic_Region> I wasn't trying to be facetious

[20:19] <stevan> there are several functions which are called for each and every method call,.. 

[20:20] <autrijus> if it becomes clearer, _unoptimized.pl wouldn't be there :)

[20:20] <Limbic_Region> typically huge speed ups cause readability to change in either direction - or at least it has been my experience

[20:20] <stevan> I optmized those to the point of unreadablility in some cases :)

[20:20] <Limbic_Region> it either gets more readable because the crap has been removed and the elegance remains

[20:20] <stevan> my personal favorite is WALKMETH

[20:20] <stevan> I will nopaste the change so you can see

[20:21] <Limbic_Region> or it gets fugly because the elegant solution just doesn't have what it takes to be fast

[20:21] <gaal> golf physics, 100 years ago today: http://www.fourmilab.ch/etexts/einstein/E_mc2/www/

[20:21] <gaal> (sorry, completely off topic, but hey.)

[20:22] <pasteling> "stevan" at 67.186.136.119 pasted "changes in WALKMETH" (25 lines, 770B) at http://sial.org/pbot/13333

[20:22] <stevan> Limbic_Region: as you can see,.. the optimized version is difficult to read at best

[20:23] <stevan> but that one alone was worth about 30%

[20:23] <stevan> so it was worth it

[20:23] <Limbic_Region> yeah

[20:23] <Limbic_Region> but a lines of comment could make it just as readable and fast

[20:23] <autrijus> ...for some reason the optimized one is easier to read to me

[20:23] <autrijus> right, what Limbic_Region said.

[20:23] <Limbic_Region> I was thinking it actually became obfusucated

[20:23] <gaal> autrijus, i'm unsure about where to carry pragma list state in the parser

[20:24] <autrijus> gaal: where else then?

[20:24] <autrijus> in Env as $* ?

[20:24] <gaal> heh, no, i meant where in the parser to put it :)

[20:24] <stevan> Limbic_Region: the worst obsfucations in it are when I avoid unpacking sub parameters and use the @_ index

[20:24] <stevan> you would be supprised how much that shaves off if you do it enough

[20:25] <svnbot6> r7172 | stevan++ | Perl6::MetaModel 2.0 -

[20:25] <svnbot6> r7172 | stevan++ | * fixing the mutli-methods test

[20:25] <stevan> that and some of the if/else statements were converted to boolean expressions

[20:25] <Limbic_Region> stevan - I wasn't talking about your particular optimization - just optimizations in general that lead to less readability - they become unreadable

[20:25] <Limbic_Region> in your case it is easy to read

[20:25] <gaal> the c patch does something i thought i grokked but now i think i don't, puts the list on the current cop; when a scope ends you automagically get the head pointer that was there just before the scope started

[20:25] <Limbic_Region> but not necessarily easy to understand

[20:25] <Limbic_Region> adding the comments achieves both

[20:25] <stevan> Limbic_Region: very true

[20:25] <gaal> there's absolutely no code that handles that explictly, that's beautiful

[20:26] <gaal> i don't think we have an analogous structure though (so we?)

[20:26] <autrijus> gaal: cop?

[20:26] <autrijus> cop would just be annotation nodes.

[20:26] <autrijus> but you are thinking of scope markers

[20:26] <autrijus> and those would be Stmt boundaries I think

[20:27] <autrijus> I have no problem of extending Stmts type

[20:27] <autrijus> so you can write between the lines

[20:27] <autrijus> so to speak

[20:27] <autrijus> that will also get us goto LINE: support.

[20:27] * gaal grins

[20:27] <autrijus> Stmts Cop Exp Exp

[20:27] <autrijus> not neccessarly with the Cop name

[20:27] <autrijus> but you get the idea.

[20:28] <gaal> not quite sure that i do yet :/

[20:28] <autrijus> oh ok... the idea is that Stmts are cons for statements

[20:28] <gaal> when i constuct a Stmts Exp, I need to copy the Cop from the last one.

[20:28] <autrijus> Stmts exp1 (Stmts exp2 (Stmts exp3 Noop))

[20:29] <autrijus> now we regulate that Cop are cumulative

[20:29] <gaal> that part i do get

[20:29] <gaal> oh

[20:29] <autrijus> Stmts cop1 exp1 (Stmts cop2 exp2 (...))

[20:29] * Limbic_Region notes the time and heads homewards

[20:29] <autrijus> exp2 gets (cop2 . cop1)

[20:29] <gaal> that point i *don't* :)

[20:29] <Limbic_Region> stevan++ # good work

[20:29] <autrijus> makes some sort of sense?

[20:30] <gaal> where Cop is something like MkCop { Label :: String, Pragmas :: [Pragma], ... } ?

[20:31] <gaal> why does it need to be cumulative?

[20:31] <gaal> and, how does that get us scopy behavior?

[20:31] <autrijus> it doesn't, to think about it. we can share structure

[20:32] <autrijus> scope is easy; any Stmts cons belong to the same scope

[20:32] <gaal> for lex prags, we do indeed share structure, as the list is immutable once installed; and *as* it's being installed it only gets prepended to.

[20:32] <autrijus> because under scope boundary it will be wrapped in a App's body

[20:32] <gaal> (if that's what you mean by share structure)

[20:33] <autrijus> yes that's what I mean.

[20:33] <autrijus> so it's just a ponter to a common heap pointer

[20:33] <autrijus> { 1; { 2 } }

[20:33] <autrijus> the 2 is inside a App

[20:33] <autrijus> of sub{2}

[20:33] <autrijus> so we can easily see scope boundary

[20:34] <gaal> ..so how do i know the latest value of the pragma list when i am consuming 2?

[20:34] <autrijus> you ask your outer

[20:34] <autrijus> aka envOuter

[20:35] <autrijus> hm, bad idea

[20:35] <autrijus> thinking

[20:35] <gaal> it's not in the env...

[20:35] <autrijus> I think it need to by in env.

[20:35] <autrijus> envCop

[20:37] <gaal> okay, so every Stmt constructed puts its Pragmas in envCop? yes, that is kinda analogous to p5

[20:37] <autrijus> yeah, but that leaves us wondering why not just do it in VCode

[20:37] <autrijus> ah, because of middle-of-scope starting points

[20:38] <autrijus> so Stmts boundary is probably the way to go. 

[20:39] <gaal> so the cop carryover should probably go in ruleBlockBody?

[20:39] <autrijus> right, that looks very sensible

[20:39] <autrijus> but I'm not sure "cop" is a good name.

[20:39] <gaal> Ann?

[20:40] <autrijus> perhaps just "label" or "ann" or "pragmas"

[20:40] <autrijus> depending on whethe we treat pragma as a kind of label

[20:40] <autrijus> or a label a kind of a pragma

[20:40] <autrijus> or neither as either and call it ann

[20:40] <gaal> though you previously mentioned maybe "ann" for unifying Cxt and Pos

[20:40] <gaal> :-)

[20:40] <autrijus> indeed. so maybe Label?

[20:40] <gaal> Desc? :)

[20:41] <autrijus> your choice. :) Desc is oka

[20:41] <autrijus> y

[20:41] <gaal> okay, Label first and if I think of something better I'll change it.

[20:42] <autrijus> nothingmuch: re Inline::GHC, I think with the new libGHC stuff it'd be downright trivial

[20:42] <autrijus> sadly it's GHC 6.6, still 3 months away

[20:42] <autrijus> happily we're not in any particular rush for that.

[20:43] <clkao> agent tang, i was trying to play with pil-run, but it seemed slow and not evening running "say 'ok'"

[20:44] <autrijus> I think you are in the middle of mm2 switch.

[20:44] <autrijus> the version 36 hours ago should work much better :)

[20:45] <autrijus> clkao: 

[20:45] <autrijus> $ ./pugs -BPerl5 -e'say "ok"'

[20:45] <autrijus> ok

[20:45] <autrijus> workedforme actually

[20:45] <gaal> my fridge just croaked.

[20:45] <autrijus> wow.

[20:46] <gaal> too bad, i made a big food purchase two days ago :(

[20:48] <clkao> autrijus: it works now, you still have account on my laptop haven't you :)

[20:49] <autrijus> I see

[21:00] <svnbot6> r7173 | rafl++ | * Fixed shebang for examples/irclog.html.p6

[21:01] <clkao> 0/win21

[21:05] <svnbot6> r7174 | rafl++ | * Fixed shebang for ext/Algorithm-TokenBucket/t/test.t.

[21:08] <gaal> if we now have Stmts Label Exp Exp, how to tweak mergeStmts not to lose label information?

[21:09] <gaal> or should the envLabel-writing be done there?

[21:13] <gaal> zzzZZZZ &

[21:28] <putter> stevan: it looks like   use Perl6::MetaModel; print eval("my \$Foo = \$::Class->new('\$.name'=>'Foo'); \$Foo->superclasses([ \$::Object ]); \$Foo->new();");   is still printing #<AnonClass=(9)>, which seems unlikely to be correct.  Any thoughts?

[21:34] <putter> 08_multi_methods.t is now all ok. :)

[21:38] <putter> my, that _is_ sprightly.  stevan++

[21:40] <putter> Current performance should be fine for the indefinite future.  Thanks stevan.

[21:41] <geoffb> I take it the improvement was better than the 50% he claimed?

[21:42] <putter> hopefully I'll be able to spend an hour or so this evening (t+5hr) debugging pilrun on mm2.

[21:42] <putter> geoffb: not sure.  subjective impression is yes.  but you know how reliable those are.

[21:42] <geoffb> nodnod

[21:44] <putter> ok.  cheers &

[21:44] <geoffb> cheers

[21:54] <svnbot6> r7175 | fglock++ | * perl5/List - 'a'..'zzz' is now supported

[21:57] <buu> Yay!

[21:57] <buu> Now what about "b"--

[21:58] <geoffb> It's Perl 5, buu, go crazy.  :-)

[21:59] <fglock> buu: "b" is a constant, but $a="b"; $a-- should work (it doesn't, currently)

[21:59] <svnbot6> r7176 | fglock++ | * perl5/Value - log update

[22:05] <svnbot6> r7177 | fglock++ | * pil-run - fixed $a++ and $a-- when $a is a Str

[22:11] <svnbot6> r7178 | fglock++ | * pil-run - fixed prefix "++" and "--".

[22:11] <svnbot6> r7178 | fglock++ |   - postfix "++" and "--" are broken - need Scalar.clone() to work properly

[22:47] <svnbot6> r7179 | fglock++ | * pil-run - added very basic support for Junctions

[22:47] <svnbot6> r7179 | fglock++ |   - pil-run try to stringify Junction as a number (which is wrong)

