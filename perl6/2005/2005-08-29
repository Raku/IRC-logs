[00:01] <svnbot6> r6551 | fglock++ | * PIL-Run - implemented postfix:<...>

[00:01] <svnbot6> r6551 | fglock++ |   - doesn't work yet, has problems with 'Inf'

[00:01] <svnbot6> r6552 | putter++ | New $?PUGS_BACKEND defined by Pugs/Run.hs and perl5/PIL-Run/lib6/P5Runtime/PrimP6.pm.  "BACKEND_PUGS" and "BACKEND_PERL5".  I didnt get a chance to give PIL2JS one too.

[00:01] <putter> btw, the BACKEND_foo  names were chosen mainly to be easily changed later...

[00:12] <putter> Change in plans I think.  Back now for a bit.

[00:49] <svnbot6> r6553 | fglock++ | * perl5/Container - added simple Hash stringification

[00:50] <putter> Blarg.  Had a pile of code to run perl/py/rb interpreters as subprocesses, complete with proxying, gc handling.  Would be great for Inline::Pugs.  Darned if I can find it.  Maybe it was on an unbackedup disk which died.  Just a wee tag frustrating.

[00:53] <putter> Was such a nice bootstrap exercise.  Start interpreter foo with minimal repl, then inject the code for whatever flavor(s) of repl you want to use for this connection.  Individual sub calls can run their own protocalls for, eg, binary data transfer.  Sigh.

[00:59] <fglock> putter: where is the place to implement '{ pair, pair }' - is there a circumfix:<{ }> ?

[01:06] <putter> fglock: too...

[01:07] <putter> assemble pairs into a hash?

[01:07] <fglock> I found circumfix:<{}> - trying ...

[01:08] <fglock> yes - I'm implementing hash

[01:08] <putter> I'm afraid that has to be real syntax...  I dont think PIL hashes are payed attention to yet... checking...

[01:10] <putter> nope, your right.  np.

[01:11] <putter> (I just did, in crude_repl, first :v to toggle verbosity on, and then {a=>3} , which gave both PIL and error message.

[01:19] <putter> Perl6::Instance::JS ?   Perl6::Run::JS ?   for  Mumble->new->eval('say "hi"')

[01:37] <putter> fglock:  Perl6::Run::JS::Simple ?

[01:38] <fglock> Perl6::Run::JS

[01:38] <putter> does that sound vaguely plausible for a "each object is a js interpreter running p6, but with no object proxying"

[01:38] <putter> I was thinking of saving Perl6::Run::JS for the full object proxying version... but shorter is better.  ok

[01:39] <fglock> If you improve it you can call it Perl6::Run::JS2 :)

[01:40] <putter> :)

[01:43] <putter> Hmm... Perl6::Run::JS::Basic?  ::JSSM?   The idea being proxying games have a performance cost, so even when the full version exists, you might want to use the simpler.   Perl6::Run::JS just seems too grand a name for this little bit.   If JavaScript::ScriptMonkey had a shorter name, I'd use that.

[01:43] <putter> Thus the JSSM.

[01:43] <putter> Ah well.  A ::Basic could be spun off later...

[01:48] <fglock> the hash constructor works - but there are a few bugs to fix in perl5/Hash

[01:48] <svnbot6> r6554 | fglock++ | * PIL-Run - implemented {1=>2,4=>5} hash constructor

[01:48] <svnbot6> r6554 | fglock++ |   - perl5/Hash needs some work

[01:51] <putter> ooo, neat!

[01:54] <putter> Perl6::Run::JS is in.

[01:54] <svnbot6> r6555 | putter++ | New Perl6::Run::JS wraps JavaScript::SpiderMonkey, and uses PIL2JS to provide a p6 ->eval().  This is a new role for PIL2JS, and stderr is currently noisy.  iblech++

[01:54] <svnbot6> r6556 | fglock++ | * perl5/Hash - fixed stringification

[01:55] <fglock> now you can do {1=>2,4=>5} in PIL-Run

[01:56] <fglock> time to go &

[01:57] <fglock> btw - since keys can be objects, this works too: { (1=>2)=>(3=>4) }

[01:58] <putter> good night

[01:58] * putter stares at example in puzzlement...

[01:59] <putter> I didnt know you could do that...

[01:59] <putter> :)

[02:25] <putter> what's perl6 for read a line from STDIN?

[02:27] <putter> =<>

[03:11] <geoffb> what does the "repl" in "crude_repl" stand for?

[03:11] <revdiablo> read eval print loop?

[03:11] <geoffb> Ah!

[03:11] <revdiablo> (just a random guess based on standard meaning of 'repl')

[03:12] <geoffb> I'd never seen it as an acronym, only spelled out completely

[03:12] <geoffb> thanks, revdiablo 

[03:20] <putter> hi geoffb

[03:21] <putter> weeeee... # translating ruby to p6

[03:37] <putter> Interesting that just when ruby is depreciating .id(), replacing it with .object_id(), p6 chooses .id()

[04:22] <putter> re repl as an acronym, I was worried for a moment, but google suggests its not uncommon.  http://en.wikipedia.org/wiki/Read_Eval_Print_Loop

[04:25] <QtPlatypus> putter: Its very common, comes from the lisp community, like all good things.

[04:25] <putter> If you are running pugs on windows, you might generate (takes a while) and upload a smoke to iblech's most excellent Pugs Smokehouse (smokeserv).  http://m19s28.vlinux.de/cgi-bin/pugs-smokeserv.pl

[04:25] <putter> QtPlatypus: thanks.

[04:30] <putter> general fyi, I found some old code to run a child ruby under perl5,  and I'm mutating it to do a child perl6.  It vaguely looks like it might work.  If so, the proxy stuff can be used for Inline::Pugs and Perl6::Run::JS.

[04:32] <geoffb> bak . . . hi putter

[04:33] <putter> ;)

[04:40] <putter> iblech: this works, run in perl5/PIL2JS/   perl -Ilib -e 'use Perl6::Run::JS; Perl6::Run::JS->new->eval(q/say "Hello from PIL2JS!"/);'  but it doesnt (cant find Precompiled Prelude) when run from root by  perl -Iperl5/PIL2JS/lib -e 'use Perl6::Run::JS; Perl6::Run::JS->new->eval(q/say "Hello from PIL2JS!"/);'

[04:47] * geoffb yawns to clear his mind

[04:47] <geoffb> Get a little more oxygen in there . . . 

[04:53] <geoffb> Man, it is just freaky quiet in IRC land . . . all of the channels I'm on are simultaneously quiet.

[04:58] * autrijus purrs

[05:00] <luqui> hi autrijus 

[05:00] <geoffb> *scritchscritchscritch*

[05:00] <luqui> how can I help with PIL2?

[05:00] <geoffb> How's it going, autrijus?

[05:00] <autrijus> just woke up.

[05:01] <geoffb> awake is good, we can work with that

[05:01] <geoffb> Monday there, yes?

[05:01] <autrijus> yeah.

[05:01] <autrijus> still a bit dizzy. I'll grab food and brb

[05:01] <geoffb> k

[05:02] <geoffb> oh for heaven's sakes . . . sigh

[05:03] <luqui> lilo is the spambot

[05:03] <geoffb> heh

[05:04] <putter> In the absence autrijus's journal, I'll note that today was interesting.  iblech created a server for the sharing of smokes ( http://m19s28.vlinux.de/cgi-bin/pugs-smokeserv.pl ), and fixed the long-standing PIL2JS bug of .pairs not working.  fglock continued to put flesh on the infant perl5 runtime, moving from Arrays, including lazy ones(!), on to Hashes.  And it turned out that JavaScript::SpiderMonkey could run the PIL2JS generated J

[05:04] <putter> avaScript, so now there are the beginnings of a Perl6::Run::JS perl6-on-spidermonkey-embedded-in-perl5 runtime.  And autrijus connected PIL-Run and Inline::Pugs for the first time. And leo stopped by to share the great news of PyPy's milestone.

[05:04] <geoffb> For putter's birthday, I'm going to buy him a couple extra enter keys . . . .

[05:05] <putter> lol :)  ahh.  sorry.

[05:05] <geoffb> putter, np, it's just getting to be a running joke.  :-)

[05:05] <putter> ;)

[05:05] <putter> good night all &

[05:05] <geoffb> g'night, putter 

[05:11] <autrijus> baack

[05:12] * geoffb runs in fear and hides in a hidden room accessed through a false door in his closet

[05:12] <geoffb> Oh, wait, it's just autrijus, phew

[05:13] <QtPlatypus> wb autrijus.

[05:15] <autrijus> rehi :)

[05:15] <geoffb> Are you all moved, autrijus?

[05:15] <autrijus> geoffb: partly; will probably take another weekend

[05:16] <autrijus> luqui: you can help by noting -- and collecting -- desugar rules

[05:16] <geoffb> How far apart are the old and new places?

[05:16] <autrijus> geoffb: ~40min

[05:16] <autrijus> by car

[05:16] <geoffb> mmm, desugar.  I could use some of that, for all of the sickeningly sweet foods sold in the U.S.

[05:16] <geoffb> not too bad

[05:17] <autrijus> as we know perl6 has +Inf layers of syntactic aspartame...

[05:17] <geoffb> Wait, you're on an island.  Do you own a car?

[05:17] <geoffb> heh

[05:17] <geoffb> (Last I heard cars on islands were expensive!)

[05:17] <autrijus> yup, and no I don't, my family helps driving and moving things

[05:18] <geoffb> Something I never would have thought of until someone explained the cost of a Hyundai on the island he worked on.

[05:18] <geoffb> cool.

[05:20] * autrijus plays with perl6-on-spidermonkey-embedded-in-perl5.

[05:20] <geoffb> And you thought you were pushing the bleeding edge of sanity compiling Perl 6 to Haskell . . . 

[05:23] <luqui> autrijus, do I put those in code form or in doc form?

[05:24] <autrijus> luqui: whichever one you prefer, but for now I think doc form showing how p6 is rewritten with p6 will help

[05:24] <luqui> okay, can do

[05:25] <autrijus> luqui: also, the builtin traits are too magical

[05:25] <luqui> autrijus, btw, I am now proficient in haskell, having used most of the abstractions to build real things

[05:25] <luqui> I don't know pugs yet, but barebones haskell is not a problem

[05:25] <autrijus> oh wow. real things?

[05:25] <luqui> like tic tac toe with an AI :-)

[05:25] <autrijus> the builtin traits -- like "export" and container annotation -- are so magical that currently we hard code checks for them in the consumer code

[05:26] <autrijus> but theoretically it needs to be done with trait_auxillary:<is>

[05:26] <luqui> hmmm... 

[05:26] <autrijus> only that how it works, and how much still need runtime support, is a blur

[05:26] <luqui> well, some of them could well just be markers that are checked at some hook point

[05:26] <autrijus> well yes, I know the process, but I can't write them down as code yet

[05:26] <autrijus> that's desugaring

[05:26] <luqui> aa soo

[05:27] <autrijus> tic tac toe with AI sounds fun

[05:27] <luqui> so basically we take all the abstract BS that we've been spouting on the list and make it into real code

[05:28] <autrijus> I saw the crazy thing that is Symbol::Opaque

[05:28] <autrijus> yes, because as currently stands the BS needs to be hardcoded into each runtime

[05:28] <autrijus> and the interaction is becoming hard to reason about

[05:28] <luqui> ahh, what'd you think about Symbol::Opaque?

[05:28] <autrijus> so some BS simply doesn't get fixed or implemented quickly enough

[05:29] <autrijus> so the lag between p6l and p6c may become greater because of this -- and if all of the BS are exposed as rewrite rules and trait_auxillary:<is>, then we can deal with them sanely

[05:29] <luqui> good, I like that approach

[05:30] <autrijus> I think it's clever, but I want Devel::TypeCheck to work with that too

[05:30] <autrijus> ...and I want a ponie-shaped cake

[05:30] <luqui> :-)

[05:30] <luqui> data constructors really change the way that I can approach problems though

[05:30] <luqui> it made my type inferencer sketch very much easier

[05:31] <autrijus> have you read about the "expression problem"?

[05:31] <luqui> nopers

[05:31] <autrijus> ok. I think it's a very good read, and shed a lot of light on p6 design

[05:31] <autrijus> orignial problem statement: http://www.daimi.au.dk/~madst/tool/papers/expression.txt

[05:32] <autrijus> Scala's solution: http://www.daimi.au.dk/~madst/tool/papers/independently.pdf

[05:32] <autrijus> chase its biblio to see other language's solutions -- so far Scala's is one of the most convincing ones

[05:32] <ingy> hi autrijus 

[05:32] <autrijus> as soon as I learned about the expression problem, I saw that in all large-scale programs I write

[05:32] <autrijus> which makes me much more careful :)

[05:32] <autrijus> ingy: hey!

[05:33] <luqui> hmm

[05:33] <ingy> autrijus: msged you...

[05:33] <autrijus> ingy: didn't see it

[05:34] <ingy> autrijus: just tried again... I saw you

[05:35] <autrijus> ingy: nope, not getting thru. weird. try skype?

[05:35] <autrijus> ah

[05:35] <autrijus> I know, maybe I wasn't identified

[05:36] <autrijus> try again

[05:36] <ingy> I did

[05:36] <ingy> ichat?

[05:36] <autrijus> I need to reboot for that

[05:36] <ingy> what is your skype?

[05:37] <autrijus> autrijus

[05:42] <autrijus> bbl...

[06:32] <Supaplex> 00:29 -!- Irssi: Join to #perl6 was synced in 84295 secs

[06:32] <Supaplex> like wtf? :P

[06:32] * Supaplex beats irssi down like a red headed step child

[06:40] <coral> heh, wow

[07:17] <geoffb> You know you're having a bad sysadmin day when you find yourself debugging server problems by telneting to a port and speaking raw protocol

[07:38] <Juerd> geoffb: I have too many bad sysadmin days :(

[07:39] * Juerd always speaks raw SMTP to test SMTP servers.

[07:39] <Juerd> And raw POP3 to test user's passwords :)

[07:39] <geoffb> heh

[07:39] <Juerd> I don't trust clients (software. although I often don't trust the people either)

[07:39] * geoffb is trying to upgrade IMAP servers, and of course they do everything differently

[07:39] <geoffb> heh

[07:39] <Juerd> IMAP I do not usually speak raw

[07:40] <Juerd> For IMAP I have Mutt.

[07:41] <geoffb> Yeah, I started by playing with Mutt, but realized that I wasn't sure if I was giving Mutt bad info, or the server bad config

[07:41] <geoffb> hence dropping to raw

[07:41] <Juerd> The most awful thing about upgrading/switching IMAP servers is the uidvality thingy

[07:41] <Juerd> I want to get rid of courier on some boxes

[07:41] <Juerd> And install dovecot on it

[07:41] <geoffb> come to think of it, I think that's the very upgrade I'm doing

[07:41] <geoffb> :-/

[07:41] <Juerd> But that means I have to patch dovecot to mimic courier's values, or all clients will see all mail as new :(

[07:42] <Juerd> And error when trying to receive any of the old messages

[07:42] <Juerd> It is a fairly straightforward patch, but I'm afraid to do it

[07:42] <Juerd> I've been postponing this for more than a year now.

[07:43] <Juerd> These things do teach me that ignorance is indeed bliss

[07:44] <geoffb> grrr, this is pissing me off

[07:45] <Juerd> What's up?

[07:45] <geoffb> actually, flags on messages look fine, I'm not sure that's still a problem . . . 

[07:46] <Juerd> Do you have any Outlook client?

[07:46] <Juerd> (non-express)

[07:46] <geoffb> What's getting me now is that I can't seem to invoke the magic to make it understand I want to keep /var/mail/... for INBOX

[07:46] <Juerd> Hmm

[07:46] <geoffb> No, just OS X and Linux

[07:47] <Juerd> I use ~/Maildir, and dovecot picked that up by default... somehow...

[07:47] <geoffb> There's a config line for setting INBOX that way, but either the example in the config file is wrong, or I'm doing something fubar.

[07:47] <geoffb> oh, wait!

[07:48] * Juerd waits patiently

[07:49] <geoffb> dammit, I thought it might be a permissions issue 

[07:49] <geoffb> nsl

[07:49] <Juerd> What's your default_mail_env set to?

[07:49] <Juerd> That may be easier than finding the right place to get MAIL set

[07:50] <geoffb> give me a sec, trying a couple combinations of things first

[07:52] <Juerd> gej' is esperanto for gay.

[07:52] <geoffb> As in happy, or as in homosexual?

[07:52] <GeJ> that and in polish also IIRC

[07:52] <Juerd> As in homosexual

[07:52] <Juerd> Happy-gay would be gaj

[07:53] <GeJ> thanks for reminding me this difficult episode of my life (as in my first days on IRC when all the polish guys around were asking me on a date)

[07:53] <GeJ> thanks

[07:53] <geoffb> oy

[07:53] <Juerd> Hehe

[07:53] <Juerd> I'd first have to see a picture :P

[07:54] <GeJ> could we change the topic? Junctions, Metamodel, Type inference, anything? :)

[07:55] <geoffb> Juerd, OK, I've tried all combinations of not setting default_mail_env (to get autofind), setting mbox:~/Mail/:INBOX=/var/mail/%u, and setting mbox:%h/Mail/:INBOX=/var/mail/%u

[07:55] <geoffb> keep getting "Imap command "SELECT" failed" from OS X mail, and while I see the ~/Mail folder contents, I get nothing out of /var/mail/foo

[07:55] <geoffb> bah

[07:56] <geoffb> GeJ, sorry, Juerd and I were ranting at each other about sysadmin hell, in particular, upgrade of Courier IMAP to Dovecot IMAP, when you walked in.

[07:56] <geoffb> OT, but definitely on my mind.  :-)

[08:01] <GeJ> geoffb: no problemo. Sysadmin day was a few weeks ago. Time to get the rants back gain. :)

[08:02] <Juerd> geoffb: Try stracing the server

[08:02] <Juerd> That usually provides valuable insight

[08:02] <Juerd> In particular, I recommend "strace -feopen $whatever_you_use_to_start_the_thing"

[08:03] <Juerd> And remove the "eopen" if this doesn't already give enough info

[08:03] <geoffb> that is definitely something to do when it is not 1 AM local . . . .

[08:03] <geoffb> OK, will try

[08:03] <Juerd> Why so?

[08:03] <geoffb> Because I'm falling over tired

[08:04] <Juerd> Then take a short brake and submerge your head in some cool water

[08:04] <geoffb> heh

[08:04] <geoffb> I'm thinking of submerging my head in a cool pillow, actually

[08:05] <geoffb> g'night, folks

[08:05] <GeJ> 'night geoffb 

[08:05] <Juerd> Heh

[08:05] <Juerd> That works too

[08:05] <Juerd> Good night

[08:08] <nothingmuch> morning

[08:08] <GeJ> morning

[08:08] <Juerd> Hi

[08:44] * nothingmuch makes cute animal sounds

[08:44] * QtPlatypus looks oddly at nothing much and makes cute animal sounds back.

[09:05] <GeJ> should we call it purrrrl6 now?

[09:06] * QtPlatypus laughs.

[09:16] <GeJ> I hate my life.

[09:17] <lhooq> GeJ: sorry, you can't have another one

[09:18] <GeJ> I found a new programming technique. Along XP, TDD, Agile methods, I think I just found a new one I will call "Nonsense Programming" and prolly write books about it.

[09:18] <GeJ> No matter what angle I choose to explore this code, I just can't figure out how to maintain it and even extend it.

[09:20] <GeJ> The perfect example of "Big Ball of Mud"

[09:36] <svnbot6> r6557 | Stevan++ | Perl6::MetaModel 2.0 - 

[09:36] <svnbot6> r6557 | Stevan++ | * reworking of some aspects of the relationship between $::Class and $::Object

[09:43] *** Southen_ is now known as Southen

[09:56] <QtPlatypus> Can some people test MIME-Base 64 and tell me how long it takes?

[10:28] <QtPlatypus> ?seen putter

[10:28] <QtPlatypus> seen putter

[10:48] <svnbot6> r6558 | Stevan++ | Perl6::MetaModel 2.0 -

[10:48] <svnbot6> r6558 | Stevan++ | - the new metamodel is now bootstrapping

[10:48] <svnbot6> r6558 | Stevan++ | * added class:: pseudo package to handle class

[10:48] <svnbot6> r6558 | Stevan++ |   method dispatching

[10:48] <svnbot6> r6558 | Stevan++ | * added tests for Point example from A12

[11:33] *** ChanServ sets mode: -s
 
[11:57] <ods15> ?

[11:58] <ods15> i want to match either digits, literal ., or :

[12:00] <Juerd> Why?

[12:00] <Juerd> What do the digits and dots represent?

[12:01] <ods15> a proxy server

[12:01] <Juerd> An IP address?

[12:01] <Juerd> 'cause 123.456.789.0 is an invalid IP

[12:02] <ods15> yes

[12:02] <ods15> hehe

[12:02] <ods15> i'

[12:02] <ods15> err

[12:02] <ods15> i'm not that anal, i just want it to match right

[12:02] <ods15> hell that pattern will even match 1234567889 or ..... :P

[12:02] <Juerd> Then why even be specific?

[12:03] <ods15> my input is valid, just want to be sure i'm parsing it right

[12:03] <ods15> and apperantely i'm not cause i'm grabbing nothing :/

[12:03] <Juerd> Can't you just split it on delimiters?

[12:03] <ods15> there is no delimiter, it's a "complicated" text file

[12:04] <ods15> they used '*******************************' as a frggin "delimiter"

[12:04] <ods15> stupid

[12:04] <ods15> anyway, bbl

[12:05] <ods15> doh, i did =0 instead of =1 ...

[12:30] <hoowa> hi tang are you here ?

[13:13] *** webmind is now known as webmind-

[13:24] *** GeJ is now known as GeJ_

[13:25] *** GeJ_ is now known as GeJ

[14:02] * nothingmuch hates the sourceforge download links

[14:02] <nothingmuch> why do they say 'foo-1.2.3.tar.gz' as a link if it's not really that file?

[14:02] <nothingmuch> why isn't it 'select mirror for foo-1.2.3.tar.gz'?

[14:03] <nothingmuch> (this is WRT to external pointers, like for example, the project's home page)

[14:06] <fglock> nothingmuch: they used to send you to an html page with a redirect to the actual file. Download managers are supposed to deal with this

[14:13] <putter> QtPlatypus: re MIME-Base64, I'm still >5min, but my pugs installation is a bit bOrked at the moment (left old pugs in path during build.  concequences... interesting.  which is probably a bug.)

[14:14] <putter> I may not actually be seeing any new code.

[14:14] <fglock> hi putter

[14:15] <putter> hi fglock.  how goes?

[14:16] <fglock> trying to figure out the implementation of %a{1,2,3}=(4,5,6)

[14:16] <putter> ah. :)

[14:17] <fglock> I think %a{1..Inf} is valid, but everybody say it doesn't

[14:17] <PerlJam> fglock: valid but not likely to finish :)

[14:18] <fglock> why? it can be lazy

[14:19] <fglock> for example %a{1..Inf}.keys --> (1..Inf)

[14:20] <PerlJam> fglock: would you also expect %a{'a'..'z'}.keys to give you 'a'..'z' instead ov <a b c d e f g h i j k l m n o p q r s t u v w x y z>  ?

[14:20] <fglock> sure

[14:21] <PerlJam> Hmm.

[14:21] <putter> oh, drat.  blew away the log file of the bOrked make.  :(   Basically, pugs build directory b1 was in PATH, while make'ing build b2.   The b2 og began with a lot of ext/ "skip because b1 foo.pm is unchanged".  Which is not quite the right thing.  I believe I saw b1 appearing elsewhere in the  make  output as well.  fyi.

[14:23] <PerlJam> fglock: I guess as long as it's clearly defined where laziness is no longer lazy that would be fine.  I kind of expected .keys to be one of those places where the lazy became eager.

[14:24] <PerlJam> Same thing for assignment, but the eagerness propagates from the RHS to the LHS so that %a{1..Inf} = 'a'..'z' would be fine, but %a{1..Inf} = 1..Inf wouldn't.

[14:26] <fglock> %a{1..Inf} is resolved to %a{1..26}='a'..'z'; %a{27..Inf}=(undef)xInf;

[14:27] <fglock> just like lazy array slices

[14:27] <fglock> %a{1..Inf} = 1..Inf is the simplest case

[14:36] <PerlJam> fglock: I guess I just don't have a good mental model of when Lazy becomes Eager

[14:37] <fglock> I think it only happens when you ask **@a

[14:46] <putter> QtPlatypus: re Base64.t, with a fresh r6558, and a command of  ./pugs -Iblib6/lib ext/MIME-Base64/t/Base64.t  after 5+ pugs cpu minutes, nothing has happened beyond "1..3".  fyi.

[14:46] <putter> x86_64 linux FC3

[14:46] <putter> later &

[14:57] <svnbot6> r6560 | fglock++ | * perl5/Array - Added support for store() past the end of the array

[16:52] <svnbot6> r6561 | fglock++ | * perl5/List - new methods shift_n() pop_n() - provide lazy access to sublists

[16:54] *** Eryadan is now known as ery_away

[17:18] <vkon> ?eval say $?PUGS_VERSION

[17:24] <zaphod> QtPlatypus: for what it's worth, my Base64.t is running now has 38:44 minutes CPU time, 96,204kb RAM allocated, and still it says "1..3"

[17:24] <zaphod> QtPlatypus: pugs r6557 on WinXPpro

[17:25] <vkon> does ?eval working? I saw a message that evalnot has quit irc; something broken?

[17:26] <zaphod> perlbot: seen evalbot6?

[17:26] <vkon> s/evalnot/evalbot/; it isn't working?

[17:26] <zaphod> vkon: I don't see him here

[17:27] <vkon> aha... if it isn't here then no '?eval'... okay, will know

[17:29] <zaphod> vkon: I'm starting one right now

[17:30] <vkon> a file t/rules/rules.t is obviously generated somehow from perl5's tests; but it is not mentioned which script was used; yet it contains some documented bugs; any information on this?

[17:30] <zaphod> wow, that's _slow_ :-)

[17:31] <zaphod> vkon: sorry, no

[17:31] <vkon> zaphod: thanks

[17:31] <vkon> ?eval say $?PUGS_VERSION

[17:32] <zaphod> vkon: is still not connected...

[17:33] <zaphod> mmm no, wait

[17:33] <zaphod> is connected, but didn't join the channel :-)

[17:33] <zaphod> ohhhhh sh*t

[17:34] <zaphod> evalbot's README.pod is b0rked

[17:36] <zaphod> finally!

[17:36] <zaphod> ?eval $?PUGS_VERSION

[17:36] <pugsbot> (no output)

[17:36] <zaphod> ?eval 2+2

[17:36] <pugsbot> (no output)

[17:36] <zaphod> mmm :-)

[17:36] <vkon> ?eval say $?PUGS_VERSION

[17:36] <pugsbot> (no output)

[17:36] <zaphod> I get a 'Can't locate BSD/Resource.pm in @INC'

[17:37] <zaphod> let's try again

[17:38] <vkon> as long as evalbot is on feather.perl6.nl, and it is working there (just tried), there should be no error message :)

[17:38] <zaphod> vkon: no, this one is running on my machine

[17:38] <zaphod> ?eval 2+2

[17:38] <pugsbot> (no output)

[17:39] <zaphod> ohhhh

[17:39] <vkon> zaphod: however, I'm fine without evalbot; it just strange to see it not working...

[17:39] <zaphod> I guess evalbot can't run on Win32

[17:46] <zaphod> ?eval 2+2

[17:46] <pugsbot> Impossibile trovare il percorso specificato. 

[17:46] <zaphod> stupid, stupid bot :-)

[17:46] <zaphod> ?eval $?PUGS_VERSION

[17:46] <pugsbot> Impossibile trovare il percorso specificato. 

[17:47] <zaphod> bah

[17:49] <vkon> zaphod: your perlmonk's nick is dada, isn't it?

[17:51] <svnbot6> r6562 | iblech++ | examples/network/evalbot/README.pod: Added more documentation, zaphod++.

[17:55] <zaphod> vkon: yes, it is

[17:55] <zaphod> I _am_ dada, in fact, but freenode doesn't know :-)

[17:56] <vkon> zaphod: mine is Courage... Now, that I read readme on evalbot, I'll try restarting it myself from feather.perl6.nl

[17:57] <iblech> vkon: Try perl -MBSD::Resource -we 1 first -- if it doesn't work, evalhelper.p5 won't either

[17:57] <iblech> Hi all BTW :)

[17:58] <vkon> yes, it isn't there... 

[17:58] <zaphod> hi iblech :-)

[18:00] <vkon> ?eval say $?PUGS_VERSION

[18:01] <geoffb> (big crowd cheering)  I-BLECH!  I-BLECH!  I-BLECH!  I-BLECH!

[18:01] <geoffb> :-)

[18:01] <zaphod> ?eval 2+2

[18:01] <pugsbot> (no output)

[18:01] <zaphod> ?eval $?PUGS_VERSION

[18:01] <pugsbot> (no output)

[18:01] <zaphod> sheesh

[18:01] <iblech> geoffb: :D

[18:02] <iblech> geoffb: BTW, I've noticed your memo a few minutes ago

[18:02] <geoffb> um, what memo?

[18:03] <iblech> geoffb: And the answer is no, state doesn't work yet in PIL2JS

[18:03] <geoffb> oh, from several days ago?

[18:03] <geoffb> right, gotcha

[18:03] <geoffb> They need to make memos a tad more obvious

[18:04] <iblech> (It's because Pugs.Parser does some hacks to make state work in the normal runcore, and these hacks cause all things containing state variables to not even compile to PIL)

[18:04] <geoffb> Time to beat Pugs.Parser into submission?

[18:04] <geoffb> Or are there bigger fish to fry?

[18:06] <iblech> Yep, currently working on getting P5-regex support into PIL2JS (putter created a Prelude/JS/Rules.pm, I'm integrating it now) -- according to putter, this will give PIL2JS approx. +10% test passes :)

[18:06] <vkon> ?eval say $?PUGS_VERSION

[18:07] <geoffb> w00t!

[18:14] <zaphod> vkon: ooooooh, you are also perlce's admin!

[18:16] <masak> ?eval $?PUGS_VERSION

[18:16] <vkon> zaphod: unfortunately I didn't did anything useful on perlce for a long time... but still hope to improve that project...

[18:17] * Xyo welcomes all!

[18:18] <zaphod> vkon: I know, I know. I follow the ML, I also posted some times ago :-)

[18:18] <zaphod> vkon: I'm the one that was unhappy with the console

[18:19] <geoffb> ping Juerd

[18:22] <Xyo> I have a question from a beginner (don't kill me, please).  When I try to compare IP address with string "0.0.0.0/0" , prel says: Argument  isn't numeric in numeric ne (!=). How can I fix it?

[18:23] <zaphod> Xyo: wrong channel, this is #perl6. join #perl instead

[18:23] <Xyo> ok, bye

[18:33] <vkon> file t/rules/rules.t bothers me... it states it was generated, but no mention like /do not edit, your changes will be lost/; last-author=putter ... is it edited manually now? or will be re-generated?

[18:35] <zaphod> vkon: it says "# This file has been generated from re_tests-file (in perl5-sources).

[18:35] <zaphod> "

[18:41] <iblech> vkon: IIRC someone converted perl5's rules test to PGE's format for inclusion in Parrot, and then somebody converted it to Perl 6 for inclusion in Pugs's testsuite. I don't think that it still gets autogenerated

[18:42] <svnbot6> r6563 | iblech++ | * Added "smoke-*.html" to the svn:ignore of ".".

[18:42] <svnbot6> r6563 | iblech++ | * PIL2JS: More work on P5-style regexes.

[18:42] <svnbot6> r6563 | iblech++ |   * PIL2JS.js: Improved support for calling methods on objects which are, even

[18:42] <svnbot6> r6563 | iblech++ |     though they're boxed, don't belong to us.

[18:42] <svnbot6> r6563 | iblech++ |   * PIL2JS.js: Added "Rul" and "Match" classes, with appropriate

[18:42] <svnbot6> r6563 | iblech++ |     stringification, numification, and booleanification.

[18:42] <svnbot6> r6563 | iblech++ |   * Prelude::JS::Rules: Integrated putter++'s work -- this means that

[18:42] <svnbot6> r6563 | iblech++ |       if $str ~~ rx:P5/.../ {...}   # works now

[18:42] <svnbot6> r6563 | iblech++ |       say $/[0];                    # does not work yet

[18:42] <svnbot6> r6563 | iblech++ |   * README: Added section about regexes.

[18:47] <iblech> xinming: I'm reviewing your changes to slurpy_param.t now

[18:53] <iblech> xinming: Great work, didn't found any mistakes :)

[18:54] <vkon> iblech: thanks

[19:00] <masak> iblech: what's the "Rul" class? I've been away for a while

[19:01] <Khisanth> probably a typo :)

[19:02] <iblech> masak: You'll have to ask putter for the details -- basically, Rule is a role, and Rul is the standard class which does Rule

[19:02] <iblech> (rx/.../).ref =:= Rul

[19:02] <masak> ah, I think I get it

[19:02] <Khisanth> that is a pretty lousy naming scheme!

[19:02] <PerlJam> I agree

[19:02] * zaphod agrees too

[19:03] <masak> got any better ideas? :)

[19:03] <zaphod> Rulez? :-)

[19:03] <masak> lol

[19:03] <Khisanth> Lure ;)

[19:03] <PerlJam> Just use Rule.  roles function as classes when used as such.

[19:03] <masak> that's right

[19:04] <masak> so why don't we here?

[19:05] <masak> maybe I should ask putter...

[19:05] <PerlJam> If you must have 2 same-named-but-different-implementation things, at least hungarianize the names.

[19:06] <luqui> poke autrijus 

[19:08] <masak> PerlJam: there's a big misunderstanding about Hungarian notation. maybe you know this

[19:08] <masak> http://www.joelonsoftware.com/articles/Wrong.html

[19:12] <PerlJam> masak: yes, I know this.

[19:13] <masak> PerlJam: good, I wasn't sure by your comment :)

[19:13] * luqui is reading it

[19:16] <luqui> hmm, this is an interesting technique

[19:17] <luqui> what we would really like to do, though, is to put that logic in the type checker

[19:17] <luqui> yay for hookable type checkers

[19:18] * masak has been wishing for a typesafe scripting language lately

[19:19] <masak> ...maybe perl6 will be it

[19:19] * luqui sure hopes so

[19:19] <luqui> recent developments in my brain have convinced me that typechecking isn't all bad

[19:19] <luqui> just Java/C++ typechecking is bad

[19:19] <masak> :( yes

[19:19] <QtPlatypus> zaphod: Ok thanks.

[19:20] <luqui> of course, this is totally easy with data constructors :-)

[19:21] <masak> luqui: how do you mean?

[19:21] <luqui> data Unsafe a = Unsafe a ; request :: String -> Unsafe String ; encode :: Unsafe String -> String

[19:21] <luqui> you can't print an Unsafe String, because it has no print hook

[19:21] <luqui> (no Show instance :-)

[19:21] * luqui is very much liking haskell

[19:21] * QtPlatypus wonders about this, for him the Base64.t takes a few seconds but for other people it takes extreemly long "I wonder if its a matter of 64bit vs 32bit hardware"

[19:22] * masak likes what he understands of haskell...

[19:23] <zaphod> QtPlatypus: BTW, I've killed it :-)

[19:23] * luqui wonders if he can massage C++ into having data constructors

[19:23] <luqui> probably need a set of macros :-(

[19:24] <luqui> and then there's the expression problem

[19:24] <QtPlatypus> So it never terminated?

[19:24] <zaphod> QtPlatypus: no

[19:25] <masak> luqui: would it be possible in perl5 today?

[19:25] <QtPlatypus> damn

[19:25] <iblech> QtPlatypus: Just tried Base64.t here (x86, Gentoo Linux), I ^Ced after ~~30s (no output except the "1..3" plan)

[19:25] <zaphod> QtPlatypus: it was running since 1 hour at 100% CPU fixed, so I killed it

[19:25] <luqui> masak: already did it: see Symbol::Opaque

[19:25] <luqui> but it would be a runtime check, of course

[19:26] <masak> luqui: of course. thanks, i will.

[19:26] <QtPlatypus> What platform do you guys use?

[19:34] <zaphod> QtPlatypus: WinXPpro on Pentium4

[19:44] <putter> hey folks.

[19:44] <putter> let's see...

[19:44] <fglock> hi

[19:46] <masak> putter: what's the exact difference between Rule and Rul?

[19:48] <putter> zaphod: rules.t's days of being autogenerated are long gone.  Originally created for an obsolete spec of regexs, its been hand maintained for a while.   Might be worth recreating from scratch.  But that might be easier with a regex parser.  Which will exist as soon as a few pugsbugs are fixed, or... PIL2JS may almost be ready for it... hmm...  

[19:50] <putter> ah, next question, Rul vs Rule vs Pugs::Internals::VRule.  Rul is intended to be a class implementing a role Rule.  Name analygous to Int vs Integer, Str vs String, etc.  Not spec!  Basically, there are. and are going to be, a variety of rule implementations kicking about for a while. <enter for geoffb>

[19:51] <masak> putter: someone asked, if Rul is just a class implementing the role Rule, why not use the same name for both?

[19:52] <putter> Some primitive, some native, some hybrids.  Some participating in object system, some faking it, some not.  So it seemed worth separating ui, Rule, from all implementation stuff.  pugs has Pugs::Internals::VRule, and a Rul, which is not yet being used because of pugsbugs.  PIL2JS... well, that's my Xmass present for the day.  I haven't opened it yet. ;)

[19:53] <putter> EOF

[19:54] <masak> putter: I think I see the difference now. thanks for the explanation

[19:55] <putter> masak: basically because all rules development at this point is still "everything is really buggy, try to find a way to weave through it to get functionality".  So the primary, buy a long shot, design criteria is "what might help bug dodging".  Reducing coupling is one approach.

[20:03] <svnbot6> r6564 | Stevan++ | Perl6::MetaModel 2.0 -

[20:03] <svnbot6> r6564 | Stevan++ | * adding on the UI/macro layer in Perl6::MetaModel

[20:03] <svnbot6> r6564 | Stevan++ |    - class 'Foo-0.0.1' => sub { ... } working (see docs)  

[20:06] <masak> putter: ah, so it will get better eventually. I can live with that. :)

[20:15] <putter> :)

[20:17] <brentdax> autrijus: ping

[20:33] <svnbot6> r6565 | fglock++ | * perl5/Array - some cases of splice() that were not lazy are fixed.

[20:33] <svnbot6> r6565 | fglock++ |   - a few tests now fail because arrays are now sharing lazy lists

[20:48] <svnbot6> r6566 | vkon++ | clean some errors from t/rules/rules.t

[20:52] <putter> iblech: ping?

[20:54] <iblech> putter: pong

[20:54] <iblech> putter: I got $/[0] etc. mostly working :)

[20:54] <putter> :)

[20:56] <putter> I've (it was easy) added m// and //.  (Though without p6 rules support, // is just a way to an error message.)  Would you prefer large chunk checkins, or nibble ones?

[20:59] <iblech> large chunks are fine with me

[20:59] <svnbot6> r6567 | fglock++ | * perl5/Array - added more tests for splice()

[20:59] <svnbot6> r6568 | fglock++ | * fixed comments

[20:59] <svnbot6> r6569 | iblech++ | * pugs::hack: Minor cosmetic fixes.

[20:59] <svnbot6> r6569 | iblech++ | * t/var/refs_point_to_containers.t: Fixed a test (but it could be said that the

[20:59] <svnbot6> r6569 | iblech++ |   test was correct, I don't think that has been specced yet).

[20:59] <svnbot6> r6569 | iblech++ | * t/rules/*: Fixed the skip_rest_unless_p5style_regexes_are_available_guards.

[20:59] <svnbot6> r6569 | iblech++ | * PIL2JS: $/[0] etc. works!

[20:59] <svnbot6> r6569 | iblech++ |   * PIL: (Hack) Subs named /^&PIL2JS::Internals::Hacks::init_foobar/ are run at

[20:59] <svnbot6> r6569 | iblech++ |     INIT time.

[20:59] <svnbot6> r6569 | iblech++ |   * Prelude::JS::Rules: $/ := $match, .[] for Match objects

[20:59] <svnbot6> r6569 | iblech++ | * PIL2JS: PIL2JS.js: (HacK) All things which .isa(Num) are .isa(Int) .isa(Rat)

[20:59] <svnbot6> r6569 | iblech++ |   now, too.

[21:02] <fglock> iblech, putter: I'll restart working on hashes soon. I need to know - is it acceptable to have a hash slice take a lazy list?

[21:02] <putter> iblech: ok, tnx

[21:03] <putter> fglock: I sooo have no idea.  anyone?

[21:03] <iblech> fglock: I think a hash slice can of course be lazy (%hash{"a".."z"}), but assigning to an infinite hash slice should probably not work, as we have subs for that. Not sure though, ask p6l?

[21:04] <iblech> I.e. %hash{"a" .. "z"} = ... (no problem), %hash{3...} = ... (error)

[21:04] <iblech> But I'm really not sure...

[21:05] <fglock> do you mean "subs" == plain functions?

[21:06] <iblech> Yep.

[21:08] <fglock> just in case, before I ask in p6l - why %hash{3...} should be an error? It could slurp the arguments and then stop

[21:09] <putter> iblech: there is no immediate need, but for completeness, I note Match also  has an integer value.  bool, int, str, arr, hash.  I left that out of the sketch for simplicity, not realizing, silly me, it would all magically come into existence a day later. ;)  sorry.

[21:10] <iblech> fglock: Sorry, I was unclear. %hash{3...} = <a b c> shouldn't be a problem, but anything which makes the hash become infinite should raise an exception (e.g. %hash{3...} = (3...)).

[21:10] <svnbot6> r6570 | putter++ | Rules.pm: now accepts m// and // in addition to rx//.

[21:11] <iblech> putter: +$match == +~$match, right?

[21:12] <iblech> putter: IIRC there was some discussion that +$match should return the number of submatches, but that was quickly ditched

[21:14] <putter> hmm, the last I've seem (but I havent been looking) was Damian's capture post of...

[21:15] <putter> http://www.nntp.perl.org/group/perl.perl6.language/20985

[21:16] <putter> which has a distinct integer value, usually 1, except in :g and :x.   But that was May, and preliminary, so perhaps its changed...

[21:17] <putter> googling...

[21:17] <iblech> IIRC it was changed to mean the numification of the stringification in the very same thread

[21:20] <putter> hmm... there's a thread here  (reading...) http://groups.google.com/group/perl.perl6.language/browse_thread/thread/1223c3f11e0a6444/f9cd6419a979a749?lnk=st&q=perl6+match+%22integer+value%22+2005&rnum=1&hl=en#f9cd6419a979a749

[21:21] <svnbot6> r6571 | fglock++ | * perl5/Array - arrays are fully "sparse" 

[21:21] <svnbot6> r6571 | fglock++ |   - you can now assign values to any array address 0..maxint

[21:23] <iblech> Larry: "I think we already said something like that once some number of

[21:23] <iblech> months ago.  +$1 simply has to be the numeric value of the match. "

[21:23] <putter> ok.  weee.  some really insane (declined) proposals there.  sounds good.

[21:23] <geoffb> fglock, haven't looked at the code yet, but are fully sparse arrays still O(1) for access to keys in "normal" range?  In other words, is the Big-O performance profile still good for non-sparse usage?

[21:24] <putter> iblech: tnx

[21:25] <iblech> putter: np :) Rerunning smoke now...

[21:26] <chip> I've been reading the standard, and it seems there's no way to get writeable access to the contents of a std::string.  This seems ... odd.  Is it really true?

[21:26] <svnbot6> r6572 | putter++ | Rules.pm: separate out (still unimplemented) :global case.

[21:26] <chip> ww

[21:28] <fglock> geoffb: no, I've simplified the algorithm - I'll do optimizations after everything works

[21:29] <fglock> I'm coding the hard cases - the easy (fast) cases can be added later

[21:29] <geoffb> fglock, fair enough -- as long as the optimizations come some day.  :-)

[21:31] <fglock> in an ideal world, if you don't use arrays as objects, Perl 6 should generate code for native arrays 

[21:31] <geoffb> Man, I love having 'updatedb' run in 1 second . . ..

[21:32] <geoffb> fglock, that's a real damn ideal world you're thinking of

[21:32] <svnbot6> r6573 | iblech++ | t/var/refs_point_to_containers.t: Revert my r6569, my bad, I was wrong, the

[21:32] <svnbot6> r6573 | iblech++ | test was correct.

[21:34] <svnbot6> r6574 | iblech++ | * Usual svn props.

[21:34] <svnbot6> r6574 | iblech++ | * PIL2JS: PIL2JS.js: Unbreak method calls on Bools.

[21:35] <geoffb> iblech, how's PIL2JS doing against the test suite?  Is everything in to get that extra 10%?

[21:36] <iblech> geoffb: I had to restart the smoke a minute ago, so we will know in ~~40min

[21:36] <geoffb> (y)

[21:38] <iblech> (y) == why? -- Because I accidentally broked method calls on Bools, see commit message of r6574 :)

[21:39] <putter> iblech: what are your feelings about Perl6::Run::JS?  cute toy, or useful way to use PIL2JS?  If latter, could get access to system(), parrot, etc, via perl5.

[21:39] <svnbot6> r6575 | fglock++ | * perl5/Array - removed last pieces of non-lazy algorithms in splice()

[21:39] <geoffb> sorry, no, (y) is a thumbs-up emoticon on some clients (similarly, (n) gives thumbs-down)

[21:39] <fglock> should lazy Arrays warn when you are doing something stupid? like '@a=lazy_read_from_file; @b=@a; shift @b;' - @a no longer points to the first line of file

[21:39] <iblech> putter: Everything related to Pugs is a cute toy :) But Perl6::Run::JS is definitely useful, too :)

[21:40] <geoffb> Got in the habit at a previous company, and it stuck (even though my current client doesn't translate it at all :-)

[21:40] <iblech> geoffb: ah, ok :)

[21:40] <iblech> fglock: oooh! If it's possible to warn from an implemention point of view, then definitely, yes! :)

[21:43] <fglock> another possibility would be to create a shared buffer that would compensate for this problem

[21:44] <fglock> I'm dealing with this problem on a test failure right now

[21:44] <putter> iblech: I ran ./pugs-smokejs on rules/perl5.t... but I had to kill pil2js as it went by 3GB

[21:44] <putter> :(

[21:45] <iblech> fglock: I like that even more :)

[21:45] <iblech> putter: :( Sadly I think it's perl5 which has a memory leak, not my code

[21:46] <iblech> putter: (Because a lone "$self;" changes thing drastically, perl's internal state or whatever are b0rked, I assume)

[21:46] <iblech> Might be worth to try it with 5.9.x

[21:50] <putter> ok.  I think I even have one around.  also, looking at at perl5.t, a little "common case optimization" might dramatically improve the test results.  (though I'm not sure what js provides beyond ecma)

[21:50] * iblech will rewrite PIL::PApp:131-153 to use no closures (i.e., I'll manually lambda-lift) when the smoke finishes, maybe this helps

[21:51] <iblech> ...And if JS had goto, we would instantly be twice as fast...

[21:51] <iblech> Maybe there's __spidermonkey_internals_hack_do_not_use_goto? :)

[21:52] <putter> I'm going to do global first, get the captures to be matches, and then look at test results / optimize some common cases (eg, I'm not sure js has (?i)...)

[21:52] <geoffb> There's something for you to do -- add goto to spidermonkey.  :-)

[21:52] <putter> lol

[21:53] <iblech> putter: Great!

[21:53] <putter> actually, given the pain of installing JavaScript::SpiderMonkey, and the glacial rate of jssm development, adding a patch wouldnt cost tooo much install pain.  could codegen differently for slow/portable and fast/hack versions... ;)

[21:54] <putter> or do JavaScript::StrangeMonkey which has spidermonkey included, and patched, and thus the whole thing easier to install than JavaScript::SpiderMonkey is...

[21:55] * putter isnt sure if this is all good insane or bad insane... the line is so fuzzy sometimes ;)

[21:55] <geoffb> The only way to know is to cross the line and see what happens.  :-)

[22:01] <fglock> create a fork and name it SpiderParrot 

[22:12] <svnbot6> r6576 | fglock++ | * perl5/Array - updated TODO 

[22:26] <putter> iblech: what does [] become in js?

[22:26] <iblech> putter: &circumfix:<[]>(...)

[22:32] <iblech> Beh, ran into perl's alligator :(

[22:32] <luqui> ?

[22:32] <brentdax> <random>I wonder if there's enough magic in Perl to make "a"... work.</random>

[22:33] <luqui> hmmm?

[22:34] <iblech> luqui: perl5.8.7 seems to swap variables or so... a lone "$self;" used to "fix" it

[22:34] <brentdax> "a"... ~~ "a", "b", ..., "aa", "ab", ...

[22:34] <luqui> eeeew

