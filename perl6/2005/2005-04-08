[01:44] <putter> anyone about?

[01:45] <kungfuftr> nope

[01:47] <putter> ;)

[01:48] <putter> i'm tempted to grab a week's irc logs and plot people v time of day...

[01:59] <Alias_> define people ?

[01:59] <Alias_> lurkers or talkers

[02:00] <jabbot> pugs - 1633 - eval failing expression, to allow the te

[02:00] <jabbot> pugs - 1632 - a few more multidim tests for you :)

[02:00] <jabbot> pugs - 1631 - next should work in a while - test it

[02:00] <jabbot> pugs - 1630 - repair test 

[02:00] <jabbot> pugs - 1629 - avoid evil $a special case

[02:00] <jabbot> pugs - 1628 - fix test count

[02:00] <jabbot> pugs - 1627 - (($a = 3) = 4) should work as in perl5

[02:00] <jabbot> pugs - 1626 - * some cleanup and categorizes of READTH

[02:15] <Schwern> Hey, should say use $_ if given no arguments?

[02:19] <kungfuftr> moo?

[02:19] <Schwern> mu

[02:21] <kungfuftr> Schwern: should do, since it matches the perl5 behaviour

[02:22] <Schwern> Here's another way of looking at it:  will print use $_?

[02:22] <kungfuftr> yup, currently does

[02:23] <kungfuftr> perl -e "foreach(qw/foo bar baz/){ print; }"

[02:23] <Schwern> ...

[02:23] <Schwern> In Perl 6

[02:25] <kungfuftr> Schwern: couldn't be sure, i'd reckon it'd be something for S29 but as far as pugs would be concerned, it should match the current perl5 behaviour

[02:29] *** ninereasons_ is now known as ninereasons

[02:30] <kungfuftr> Schwern: unless of course i am indeed crazy

[02:39] <Khisanth> Schwern: is there a really good reason why it shouldn't default to $_?

[02:46] <metaperl> slides to my upcoming Perl Mongers talk on slurpy list parms: http://www.metaperl.com/talks/p6-fp-slurpy/index.html

[02:48] <Schwern> Khisanth:  No.  Just looking for something authoritative

[02:51] <kungfuftr> Schwern: as far as i'm aware the reason autrijus goes by what perl5 does is by what larry has said to him

[02:56] <Schwern> That's fair nuff.  But nothing implemented works that way which made me wonder.

[02:57] <Khisanth> aren't chomp and chop already implemented? what do they use?

[02:57] <kungfuftr> Schwern: commit some tests?

[03:03] <Schwern> kungfuftr:  I've sent a Perl6::Say patch to Damian.  We'll see what he says

[03:03] <kungfuftr> gd gd

[03:04] * kungfuftr will setup a test in the meantime

[03:05] <kungfuftr> hhhmmm... though easier said than done at 4am

[05:25] <autrijus> greetings lambdacamels!

[05:25] <Alias_> HAIL FEARLESS LEADER!

[05:25] <autrijus> greetings!

[05:26] * autrijus wonders if stevan is asleep

[05:26] <autrijus> trailing comma is parsed; multidim arrays now works

[05:26] <autrijus> still working on more itype

[05:27] <Khisanth> multidim arrays are just arrays with array references?

[05:28] <autrijus> yeah, sadly.

[05:28] <autrijus> real multidim (is shape) needs to wait a bit

[05:29] <Khisanth> hrm that "are" was actually suppose to be an "or"

[05:30] <Khisanth> btw, would it be possible to have "my Array %hash is Scalar;"? :p

[05:30] <autrijus> my Array %hash 

[05:30] <autrijus> same as

[05:30] <autrijus> my %hash is Array

[05:30] <autrijus> so sure

[05:30] <autrijus> you can have that

[05:31] <autrijus> it will just be a "%hash" symbol that implements both the Scalar interface and an Array interface

[05:31] <Khisanth> but not the rest right? I assume it wouldn't be legal to have multiple "is"

[05:31] <Khisanth> O_O!

[05:31] <autrijus> the usefulness of it is left as an exercise

[05:31] <autrijus> for the insane among us

[05:31] <Khisanth> well my Array %hash; would make sense :)

[05:32] <Khisanth> I am thinking that would be a hash be you can get some sort of order

[05:32] <autrijus> uh no that would be OrderedHash

[05:33] <Khisanth> I am sure something sufficiently evil will be thought of for this feature

[05:37] <autrijus> hey Ovid.

[05:37] <autrijus> reboot &

[05:37] <Ovid> Hi autrijus. 

[05:38] <Ovid> I just installed pugs.  It's wonderful!

[05:39] <Ovid> Where can I find the documentation for "say" in Perl 6?  I know it seems simple, but that's a rather difficult word to search on.

[05:39] <mugwump> Ovid: got Perl6::Bible?

[05:39] <Ovid> I'm looking through it now.  Still can't find it.

[05:41] <Ovid> Specifically, I'm wondering if say doesn't have any arguments, is it supposed to default to printing the current topic?

[05:41] <Ovid> Feh.  I was looking at Perl6::Bible on CPAN.  Can't install it as Spiffy fails tests.

[05:41] <Ovid> (And I don't want to force Spiffy)

[05:42] <Ovid> autrijus:  do you know if say is supposed to default to the current topic if no arguments are used?

[05:42] <autrijus> I have no idea.

[05:43] <Ovid> I was confused, because my first pugs program didn't do what I was thinking "for 1 .. 6 { say }"

[05:43] <autrijus> I based my implementatino on damian's Perl6::Say

[05:43] <autrijus> which did not default on $_

[05:44] <Ovid> Yeah, I noticed that (actually, Schwern pointed that out).  But I can't find where say is documented.  (or "print", for that matter)

[05:44] <autrijus> it's unspecced. see http://svn.perl.org/perl6/doc/trunk/plans/design_docs.pod

[05:44] <autrijus> =item X. I/O

[05:46] <Ovid> I would also think that print would default to the local topic, but I keep thinking that someone mentioned something about this.  Can't remember.

[05:46] <Ovid> s/local/current/

[05:46] <autrijus> again, I have no idea.

[05:47] <Ovid> Oh well.  I'll play with pugs more, see what I find.

[05:49] <Khisanth> I guess the only way to find out which is better is to write a bunch of Perl6 programs :)

[05:50] <autrijus> I think I'm inclining toward defaulting

[05:51] <Khisanth> to what?

[05:51] <autrijus> $_

[05:52] <Ovid> It makes sense, but I'm composing an email to the Perl6 language list right now, if for nothing else than to find out if there's anything resembling an index for the perl6 docs.

[05:53] <Ovid> autrijus:  if the latest subversion copy of pugs fails to compile (GHC 6.4), should we send bug reports?  If so, to whom?

[05:54] <Khisanth> write tests! :)

[05:54] <autrijus> Ovid: failed how?

[05:54] <autrijus> nopaste the error?

[05:54] <Khisanth> hmm wait that is the wrong bugs

[05:54] <Ovid> Are you sure?  Over 10% of them have failed.

[05:54] * Khisanth goes to poke portage again

[05:56] <ninereasons> over 10% of what failed, Ovid?

[05:56] <Ovid> http://rafb.net/paste/results/LNwIpT64.html

[05:56] <theorbtwo> Is it failing to /compile/, or to /test/?

[05:56] <autrijus> oh. tests fails.

[05:56] <autrijus> that's normal.

[05:56] <Ovid> Failing the test.

[05:57] <Ovid> Oh, I didn't know that.

[05:57] <autrijus> you said "fails to compile" :)

[05:57] <Ovid> Ack!  Sorry :(

[05:57] <ninereasons> see /topic

[05:57] <theorbtwo> End of the /topic gives expected test fails.

[05:57] * theorbtwo is still mostly asleep.

[05:57] <Ovid> Didn't see that :)

[05:57] <Khisanth> autrijus: what about the ld warnings?

[05:58] <theorbtwo> Ovid: The best way to find things in the design docs is to get them all in one place, then grep.

[05:58] <autrijus> Khisanth: what warnings?

[05:58] <autrijus> like, Perl6::Bible.

[05:58] <Khisanth> autrijus: lines 85 to 98 in that paste

[05:58] <Ovid> theorbtwo:  have you tried grepping for "say" or "print" in there?  :)

[05:59] <ninereasons> those "cannot modify a constant item" errors are fatal, autrijus.  They leave many tests unexecuted.

[06:00] <ninereasons> I don't know what to do when I encounter them, though.  comment them out, and substitute a "fail" test?

[06:03] <ninereasons> What is your preference?

[06:04] <autrijus> ninereasons: can you point me to an example?

[06:04] <ninereasons> undef.t

[06:04] <autrijus> Khisanth: never seen that before. weird

[06:04] <ninereasons> $s = undef works.

[06:04] <ninereasons> undef $s does not

[06:04] <autrijus> Ovid: welcome to AUTHORS.

[06:04] <autrijus> * default say() and print() to $_, as suggested by Ovid.

[06:04] <autrijus> ninereasons: checking.

[06:05] <Ovid> Thanks.  I actually was planning on submitting failing tests for that if I could verify the behavior :)

[06:05] <autrijus> that works too. your email?

[06:05] <autrijus> (for committership)

[06:07] <Ovid> Hold on.  I'll make one.

[06:08] <Ovid> [email@hidden.address]
[06:08] <Ovid> And thanks :)

[06:09] <autrijus> sent. welcome aboard!

[06:09] * autrijus now looks at undef.t

[06:09] <Ovid> Woo hoo!

[06:10] <ninereasons> the latest version of t/builtins/defined.t has two tests commented out, which cannot be parsed: failing with "cannot modify a constant item: VInt (val)"

[06:10] <autrijus> k. fixing

[06:11] <Ovid> Hmm ... term of use agreement in Chinese.  I'm not signing away my firstborn son, am I? :)

[06:11] <autrijus> http://wagner.elixus.org/~hcchien/termtouse.html

[06:11] <Alias_> Ovid: You know, everyone keeps asking that

[06:12] <autrijus> gah. that's the last time.

[06:12] * autrijus fixes foundry

[06:12] <Khisanth> I doubt autrijus and co. could handle that many screaming babies

[06:12] <Alias_> So far we've been able to provide answers that fool them into thinking that it is merely harmless boilerplate :)

[06:14] <Ovid> Heh :)

[06:15] <Alias_> Khisanth: Premium Soylent Green

[06:19] <autrijus> fixed.

[06:19] <ninereasons> that was quick.

[06:19] <autrijus> I fixed the term of use :)

[06:19] <autrijus> not undef.t :)

[06:20] <autrijus> _now_ fixing undef.t

[06:20] <ninereasons> oh.

[06:20] <ninereasons> interesting.  if I say $a = undef; and then undef $a; there is no error.

[06:29] <Ovid> Luke Palmer confirms that "say" default to $_.

[06:29] <Ovid> OK, I'm tired. Need to head to bed.  Cheers, folks.

[06:29] <autrijus> cool!

[06:30] <Alias_> I wonder what the 29 modules that have ->say method think about Perl 6 stealing a method name

[06:33] <ninereasons> is that an actual count, Alias?  or a hypothetical number?

[06:34] <Alias_> It's an approximation of an actual count

[06:35] <Alias_> I can't remember the exact number, but it was in that vacinity

[06:35] <Alias_> s/modules/.pm files/

[06:39] <shapr> good morning #perl6!

[06:39] * shapr boings cheerfully

[06:39] <ninereasons> hi. 

[06:40] <ninereasons> thanks for taking time with my haskell confusion earlier.

[06:40] <shapr> Sure, anytime I'm not working, I'm happy to help.

[06:42] <ninereasons> i've quite a hump to get over, before haskell looks right, to me, I'm afraid

[06:42] <shapr> Well, I may not be a giant, but at least you can stand on the shoulders of short people.

[06:43] <shapr> Have you seen the HaskellDemo?

[06:44] <ninereasons> yes.  

[06:44] <shapr> do you have any specific questions past that?

[06:45] <ninereasons> it's just going to take a while.  that's all.  

[06:45] <ninereasons> and that's okay.

[06:45] <Alias_> shapr: Speaking of which...

[06:45] <shapr> I can help out for a few minutes before I start work. Anything inside Pugs I can explain?

[06:45] <shapr> Alias_: yes! more ideas?

[06:45] <Alias_> shapr: You said Foo' is a common thing, because ' is a normal character?

[06:45] <Alias_> in identifiers...?

[06:46] <ninereasons> I was trying to understand Prim.hs line 79 -- another bug.

[06:47] <shapr> Alias_: yes, it's often used to mean another version of the same function, refined in whatever direction appeals to the author.

[06:47] <Alias_> You need to note that early too

[06:47] <Alias_> It's a huge gotcha

[06:48] <shapr> ok, I'll add that in there.

[06:48] <Alias_> I'd say after the "but we _should_ have used a type" example

[06:48] <Alias_> do it early

[06:48] <Alias_> While they are still thinking about identifiers

[06:48] <shapr> ok, I'll add that.

[06:48] *** castaway_ is now known as castaway

[06:49] <shapr> ninereasons: "unless (isNothing $ vCast mv) $ do" ?

[06:49] <Alias_> I've yet to pluck up the courage to look at types and data stuff yet :)

[06:49] <Alias_> But I'll keep you posted :)

[06:50] <shapr> The types and data stuff is quite nifty, it's like data structure lego where you can give a single pattern to be repeated like tiles.

[06:50] <ninereasons> yes, shapr.  the "undef" function doesn't work right.

[06:51] <ninereasons> Looking at it, I can't understand why.

[06:51] <shapr> neither can I, it looks right.

[06:51] <ninereasons> it works to say $s = undef

[06:52] <shapr> what fails?

[06:52] <ninereasons> it does not work to say "undef $s"

[06:52] <ninereasons> unless $s is already undef

[06:53] <castaway> Haskell is like lego?

[06:53] <castaway> (g'mornin)

[06:53] <shapr> algebraic datatypes are like lego.

[06:53] <Alias_> evil animated liquid lego

[06:53] <shapr> greetings castaway 

[06:54] <Alias_> If the lego came in the form of structured clusters of nanobots

[06:54] <shapr> ninereasons: isNothing is used for values that can be Nothing or Just a, maybe undef needs to explicitly test for VUndef?

[06:55] <shapr> At first sleepy read, I assume that Nothing was the same as VUndef, but now I wonder.

[06:55] * shapr tries that again.

[06:56] <shapr> Maybe if it isNothing it still needs to be set to VUndef?

[06:56] <ninereasons> oh.

[06:56] <ninereasons> well, maybe.

[06:56] <shapr> I'm not sure about that, just a guess without digging into isNothing vs VUndef

[06:58] * castaway challenges shapr to make a wiki page explaining bits of haskell as lego blocks .)

[06:59] * shapr digs into VUndef

[06:59] <castaway> which of the nice bots here does "seen" and how?

[06:59] <shapr> I assume that isNothing is the standard Haskell function of the same name. VUndef is pugs-only.

[07:00] <ninereasons> I think that must be right.  googling VUndef today, I found only Pugs

[07:00] <ninereasons> (now that you mention it)

[07:00] <shapr> and VUndef is defined in AST.hs

[07:01] <shapr> Along with most of the pugs standard types.

[07:02] <Khisanth> castaway: jabbot does that

[07:02] <Khisanth> castaway: and lambdabot too :)

[07:02] <castaway> jabbot: seen theorbtwo

[07:02] <jabbot> castaway: theorbtwo was seen on Fri Apr  8 13:58:00 2005

[07:02] <castaway> jabbot: what timezone, idiot?

[07:02] <jabbot> castaway: Are such questions much on your mind?

[07:02] <shapr> The behaviour of vCast with VUndef is defined in AST.hs also, and that makes me wonder.

[07:03] <Khisanth> castaway: probably whatever timezone taiwan uses :)

[07:03] <Khisanth> maybe lambdabot can do better

[07:03] <shapr> @seen shapr

[07:03] <shapr> @seen theorbtwo

[07:03] <ninereasons> what's a webwitch? :)

[07:04] <shapr> me!

[07:04] <castaway> Thanks

[07:04] <shapr> My woman started a company in 1994, and now I'm half owner.

[07:04] * castaway wonders if he went back to bed after all

[07:06] <shapr> ninereasons: it looks to me like it's either a bug in vCast, or more likely that undef needs to set the value to VUndef anyway, even when it isNothing

[07:07] <shapr> So the missing answer is, why does this check for isNothing? Why doesn't it do anything in that case?

[07:07] <ninereasons> compiling

[07:08] <ninereasons> "Linking..." really is a resource hogging process!

[07:09] <shapr> It must be because of line 267 in AST.hs, "vCast VUndef = Nothing"

[07:10] <shapr> Oh of course, if you vCast VUndef, it becomes Nothing, so, (isNothing $ vCast mv) means "you've already got one"

[07:13] <shapr> I don't get it.

[07:14] * shapr stares at the IORef bit

[07:15] <shapr> ninereasons: what do you think? any ideas?

[07:16] <castaway> somebody name me a city in taiwan

[07:16] * shapr renames castaway "a city in taiwan"

[07:16] <rgs> READTHEM++

[07:17] <shapr> Ok, after going around and around in the source, it sure looks like undef should work.

[07:17] * castaway ruffles shapr. (silly silly)

[07:18] <shapr> wow, Haskell killed ninereasons' hardware :-(

[07:18] <Khisanth> castaway: taipei? :)

[07:18] <castaway> already got it, ta

[07:21] <shapr> oh wait, maybe undef($s) needs to be declared in initSyms along with the other parens using critters?

[07:21] <shapr> could it be that simple?

[07:22] <shapr> castaway: have you seen the tree datatype example on HaskellDemo?

[07:22] * shapr switches back to data lego.

[07:23] <castaway> I dont think I read that far yet ,)

[07:24] <shapr> Are you at work? Or can I pester you with interesting bits of information?

[07:25] <castaway> yes at work

[07:25] <shapr> ah, too bad.

[07:25] <castaway> (this shouldnt stop you pestering tho ,)

[07:25] <castaway> multitasking, remember? :)

[07:25] <shapr> oh right!

[07:37] * shapr is semitasking (doing several things badly)

[07:38] <castaway> *g*

[07:38] <shapr> I have to work, but I shall return to discuss lego

[07:40] <castaway> goodie

[07:59] <masak> is it true that 6.2.0 is due Monday?

[07:59] <castaway> somethihng like that, yup

[07:59] <masak> are we skipping 6.1.0?

[08:00] <castaway> I suspect even numbers are supposed to be stable, and odd not.. like in many OS projects

[08:00] <castaway> but I dont know it for sure

[08:00] <Khisanth> I don't think you can get 6.1.0 with 2*PI :)

[08:01] <masak> but you can get 6.0.14?

[08:02] <masak> castaway: what does "stable" mean in this case? pugs is the most impressively volatile project i have seen so far

[08:02] <castaway> I have no idea, I'm just guessing :)

[08:03] <masak> :)

[08:03] <Khisanth> masak: version numbers seem to be an indication of what has been implemented

[08:03] <masak> ok

[08:04] <castaway> that doesnt explain the skipping of 6.1.0 though

[08:04] <masak> maybe it's an indication of what not to implement :P

[08:04] <Khisanth> actually it does :)

[08:04] <integral> 6.1 isn't specified in the Pugs roadmap :-)

[08:05] <Khisanth> exactly! :p

[08:05] <masak> the question is why

[08:05] <Khisanth> http://svn.openfoundry.org/pugs/docs/01Overview.html

[08:05] <Khisanth> and scroll down to Do you have a roadmap for Pugs development?

[08:05] <integral> because each milestone adds one digit of 2π

[08:06] <castaway> thats still a what, and not a why :)

[08:06] <integral> hmm: «Starting from 6.2.0, the Pugs team will also provide binary builds on selected platforms.»

[08:06] <Khisanth> it also explains why there is 6.0.14

[08:06] <masak> how so?

[08:06] <Khisanth> 2*PI only applies to major and minor version numbers :)

[08:07] <masak> of course

[08:07] <masak> i see now

[08:07] <masak> it's all so weirdly clear

[08:07] <masak> well, thx for the explanation. gotta go

[08:09] <castaway> ooh, they will? nifty

[08:52] <autrijus> hi. sorry. was away.

[08:52] <autrijus> @ meeting

[08:53] <castaway> :)

[09:54] *** wilx` is now known as wilx

[10:55] * kungfuftr dances

[10:56] <autrijus> hi kungfuftr :)

[11:07] <autrijus> gaal++ # eclipse build fix

[11:07] <Limbic_Region> chip about?

[11:07] <Limbic_Region> seen chip?

[11:07] <jabbot> Limbic_Region: chip was seen on Fri Apr  8 05:11:04 2005

[11:07] <castaway> @seen chip

[11:08] <theorbtwo> seen theorbtwo

[11:08] <jabbot> theorbtwo: theorbtwo was seen on Fri Apr  8 13:58:00 2005

[11:08] <Limbic_Region> http://use.perl.org/~spur/journal/24062 # contemplating a C -> Parrot compiler

[11:08] <theorbtwo> Hm, odd.

[11:08] <theorbtwo> seen theorbtwo

[11:08] <jabbot> theorbtwo: theorbtwo was seen on Fri Apr  8 19:08:32 2005

[11:08] <theorbtwo> Much better.

[11:08] <theorbtwo> (Timezone reference.)

[11:09] <castaway> ?

[11:15] * kungfuftr got freebsd installed on his laptop last night... time for some svk goodness

[11:19] <theorbtwo> (13:08:35) jabbot: theorbtwo: theorbtwo was seen on Fri Apr  8 19:08:32 2005

[11:19] <theorbtwo> Note the times -- jabbot's time is 6 hours ahead of ours.

[11:21] <castaway> ah

[11:21] * castaway didnt think to look at the localtime shown ,)

[11:27] <wolverian> that's why seen bots usually say 'foo hours ago', or so, instead of explicit times.

[11:27] <theorbtwo> Aye.

[11:28] <theorbtwo> I suggested that to gugod a while ago, he said something noncomittial.

[12:00] <theorbtwo> Chasing modules from: src/Main.hs

[12:00] <theorbtwo> Could not find module `Posix':

[12:00] <theorbtwo>   it is a member of package posix-1.0, which is hidden

[12:00] <theorbtwo>   (imported from src/Internals.hs)

[12:05] <autrijus> interesting.

[12:05] <autrijus> ghc 6.4?

[12:07] <theorbtwo> Yeah.

[12:07] <theorbtwo> I have a replaced External/Haskell.hs, though, which may be causing it.

[12:07] <theorbtwo> And I just noticed that it's non-fatal.

[12:07] <theorbtwo> Oh, huh... perhaps it is fatal.

[12:07] <theorbtwo> Yeah, it is fatal.

[12:08] <autrijus> ok.

[12:10] <theorbtwo> Hm, making my External.Haskell a no-op module doesn't change it, though.

[12:10] <autrijus> svn up and try again?

[12:10] <autrijus> (need another perl Makefile.PL)

[12:11] <theorbtwo> I'm doing a fresh checkout and trying again.

[12:11] <autrijus> I've already renamed Posix.hs to Compat.hs :)

[12:14] <theorbtwo> 1641 pure gives me a bunch of errors in src/Run.hs (Not in scope: evaluateMain 1x, newMval 11x, emptyEnv 1x).

[12:20] <autrijus> your GHC is seriously weird.

[12:21] <autrijus> Run.hs has an "import Eval"

[12:21] <autrijus> it should see those symbols.

[12:24] * castaway figured out what was up with gentoo

[12:24] <theorbtwo> Something is indeed seriously strange here.

[12:24] <castaway> (>=ghc-6.3 masked until haskell packages are ported)

[12:28] <theorbtwo> "If the export list is omitted, all values, types and classes defined in the module are exported, but not those that are imported."

[12:28] <theorbtwo> I'm rather stumped.

[12:28] * theorbtwo sighs, reverts to searching for what revision broke it.

[12:31] <autrijus> castaway: =/

[12:31] * castaway overrides the mask with an unmask, and emerges it anyway

[12:31] <castaway> it doesnt say *which* packages

[12:36] <elmex> cutee

[12:37] <theorbtwo> Hmm?

[12:37] <elmex> theorbtwo: hi

[12:38] <autrijus> greetings

[12:38] <elmex> autrijus: hi

[12:38] <theorbtwo> Hi, @array[$x].

[12:39] <cognominal> autrijus: the French Perl Workshop is at the same time as the austrian perl workshop

[12:39] <theorbtwo> autrijus, you were right, it was my GHC install.  Now I just wish I knew why installing plugins as a package killed it.

[12:39] <cognominal> I am making a presentatin of perl6 at fpw.

[12:40] <autrijus> cognominal: exactly the same time?

[12:40] <cognominal> I was thinking about making a japh contest. 

[12:40] * rgs will be at the fpw too

[12:41] <cognominal> maddinghe the organizer was thinking about setting some sort of duplex

[12:41] <cognominal> that would be cool to present the japh at this duplex

[12:42] <cognominal> more so because most of the perl6 luminaries will be at yhe apw.

[12:43] <cognominal> Maddingue: autrijus ask me: apw amd fpw exactly the same time?

[12:43] <Maddingue> yes

[12:43] <Maddingue> 9 and 10 june

[12:44] <cognominal> and both in Europe :)

[12:54] *** Maddingue is now known as Maddingue_

[12:54] <theorbtwo> Morning, Mr. Villin.

[12:55] * castaway looks around. Who?

[12:55] <theorbtwo> mugwump == Sam Vilain (I can't spell.)

[12:56] <castaway> ah

[12:58] <cognominal> Villin is not interesting in French, "Vilain", on the other hand gives mugwump a status of a bad guy :)

[12:59] <castaway> ooh, Symbian

[13:23] <elmex> ?

[13:23] <elmex> whats up?

[13:23] <castaway> The sky

[13:26] <stevan> whoa,.. the tests are spewing VUndef like crazy

[13:26] <stevan> I assume I picked a bad revision to build :)

[13:34] <theorbtwo> Whoo, I'm offically RSVP'd to the YAPC::NA hackathon.

[13:34] <stevan> theorbtwo: nice!

[13:34] <castaway> cool

[13:35] <castaway> btw does it/he say anywhere how its going to happen? (I'm assuming laptops and wifi or some such)

[13:35] * stevan /really/ needs to read his Haskell book before the hackathon 

[13:35] <theorbtwo> Not that I'm aware of.  Forwarded you the mail he sent me; he's setting up a ML.  (Already responded with your email.)

[13:36] <castaway> Ok

[13:36] <stevan> castaway: I think I read something about stealing the neighbors phone line

[13:36] <stevan> theorbtwo: ML?

[13:36] <castaway> *g*

[13:36] <theorbtwo> Mailing List.

[13:36] <stevan> ah

[13:37] * castaway checks email.. "Unbiased info for investor intelligence.. ", no, thats not it

[13:38] * stevan checks his mail,.. oooh I can get a Green Card! .... and vicodin for cheap .....

[13:38] <castaway> :)

[13:39] <castaway> yeah, a whole $2.99

[13:39] <wolverian> this is a stupid question probably, but does eval() support evaluation in an arbitrary scope? 

[13:39] <stevan> wolverian: I think/would assume so, is it not?

[13:40] *** stevan changes topic to: pugscode.org <<Overview Journal Logs>> | You have safely opened the door to many Perl 6 hackers. | pugs.kwiki.org | smoke: http://xrl.us/fmw2 | Mac OS X r1641 (426/4157) | Win2k r1631 (457/4163)

[13:41] <wolverian> stevan: well, I couldn't find it on p6l. :) (and I don't have a running pugs.) and I don't know how to reference a scope.

[13:41] <stevan> wolverian: what exactly would you want to do with it?

[13:42] <stevan> I can try it for you 

[13:43] <mugwump> cognominal: yes, my surname is a french insult or something like that :).  I don't know exactly what the story is with that

[13:43] <wolverian> stevan: I would want to eval code in, say, the current scope, not in a child lexical scope as eval() does in perl5.

[13:43] <mugwump> Maybe this is part of the reason my great-grandfather left France for England

[13:43] <castaway> Villain is just "villager" isnt it?

[13:44] <castaway> (or used to be ,)

[13:44] <stevan> wolverian: hmmm, I would guess it would behave much like perl5 does

[13:44] <mugwump> I hear varied things about that, maybe it was once but now with the advent of industrialisation the french people have been engineered to regard it as an insult

[13:45] <castaway> maybe.. like "redneck" and so on

[13:45] <wolverian> stevan: oh, so it's impossible to do a REPL without recursive eval?

[13:45] <stevan> wolverian: since the child lex scope is a child of the current scope, why does it matter?

[13:45] <wolverian> stevan: see above.

[13:45] <stevan> REPL?

[13:45] <wolverian> read-evaluate-print-loop. such as what running 'pugs' starts.

[13:45] <stevan> wolverian: ok

[13:45] <wolverian> the difference between that and perl -de0 is that perl -de0 forgets the previous line's lexicals.

[13:46] <wolverian> (since the lexical subscope of the previous eval() does not carry over to the next.)

[13:46] <stevan> wolverian: so you want the carryover I assume

[13:46] <wolverian> so the only option is to munge the $string to be evalled and recursively eval in it. this will blow the stack.

[13:46] <wolverian> stevan: the generalised method would be to refer to scopes as objects and give them .eval methods.

[13:46] <wolverian> I think.

[13:47] <stevan> wolverian: this sounds like a topic for perl6 lang

[13:47] <wolverian> I guess. I searched it, didn't find anything. I didn't search very deeply, though.

[13:48] * theorbtwo wonders if eval should be a method on a block or coderef object.

[13:48] <wolverian> isn't that the same thing?

[13:48] <wolverian> (I hate how ruby thinks a block is not a Proc. argh.)

[13:49] <wolverian> I guess it could be a method on a continuation. :)

[13:50] <wolverian> since isn't that what blocks are? 

[13:51] <theorbtwo> I'm not 100% sure about the differences.

[13:51] <wolverian> do you know if there is something on p6l or elsewhere I could read on this? any official decisions?

[13:51] <wolverian> if not, I'll just ask on p6l

[13:52] <theorbtwo> Asking on p6l would probably be good.

[13:52] <wolverian> I'll do that.

[13:55] * castaway gets the email eventually.

[14:03] <wolverian> sent something I hope will be coherent.

[14:27] <ninereasons> I guess all those VUndefs in r1641 are for debugging?  trace?  

[14:27] <stevan> ninereasons: thats what I assume too

[14:27] <ninereasons> sure makes a messy "make test"

[14:27] <ninereasons> but otherwise, seems unbroken

[14:28] <stevan> ninereasons: yeah the fail to pass ratio is still about right

[14:28] <stevan> ninereasons: if you wanted neat, you might be in the wrong place ;)

[14:29] <ninereasons> heheh .  yes.

[14:29] <ninereasons> #parrot, maybe :)

[14:31] <wolverian> hmm, I see a t/Dialects. why the capital D?

[14:32] <stevan> wolverian: folders starting with capitals are ignored by make test (i believe)

[14:32] <wolverian> ah, okay. it is visible in the smoke though.

[14:33] <stevan> wolverian: to be honest, I dont even know what that is for

[14:33] <ninereasons> those tests consist of nothing but an 'exit', right now (i think)

[14:34] <ninereasons> yep (had to delete my working copy to see)

[14:40] <ninereasons> stevan, is that syntax in t/Dialects/perlego/isrw.t legal?  ' for $foo <-> $bar { ' ?

[14:42] <stevan> ninereasons: no idea

[14:45] <theorbtwo> At one point, <-> was going to be like ->, but making the parameters :rw.

[14:46] <theorbtwo> Don't know if that's still the case.

[14:50] <ninereasons> it does not show up in the Synopses, where i can find it.

[14:50] <wolverian> that was juerd's suggestion. I don't think larry ever liked it.

[15:27] <ninereasons> wolverian, I suppose that, with perl6's ability define your own '<->', juerd has a chance to get his way through defacto adoption.  right?

[15:30] <theorbtwo> Right.

[15:30] <theorbtwo> That's what the Dialects dir is there for, in part -- testing of dialects of perl.

[15:35] <ninereasons> that would seem to empower the community to overrule the designers

[16:20] <pasteling> "ninereasons" at 199.107.164.126 pasted "that's tight!" (8 lines, 156B) at http://sial.org/pbot/9050

[16:24] <lightstep> what does it do?

[16:24] <ninereasons> it prints "a", and "><"

[16:25] <lightstep> so undef $a.say first executes the say, then the undef? discarding the result of say?

[16:26] <ninereasons> discarding the results of $a = 'a'

[16:26] <lightstep> i mean, is undef $a.say different from undef ($a.say) ?

[16:27] <ninereasons> yes, I'm sure it is.

[16:27] <ninereasons> (checking)

[16:27] <lightstep> if so, it's not unly a precedence table thing

[16:29] <ninereasons> no, it's the same.

[16:30] <lightstep> then howcomes it prints "><"? isn't undef given `true' as the paramenter?

[16:31] <ninereasons> that's not the "real" undef.  Maybe that's why.

[16:31] <ninereasons> undef $a is broken, right now. lightstep 

[16:34] <pasteling> "ninereasons" at 199.107.164.126 pasted "that's tight 2" (8 lines, 165B) at http://sial.org/pbot/9051

[16:35] <ninereasons> lightstep, same behavior . is that a surprise?

[16:36] <lightstep> yes

[16:36] <ninereasons> or, lightstep, you aren't thinking of defined() are you?

[16:36] <lightstep> how does undefine get a handle to $a?

[16:37] <lightstep> (i'm not thinging about builtins at all)

[16:37] <ninereasons> ok

[16:37] <ninereasons> $a is in the lexical scope

[16:38] <ninereasons> ? did I say that right?

[16:40] <lightstep> yup

[16:40] <lightstep> oh

[16:40] <lightstep> undefine touches the global variable

[16:40] <ninereasons> no new "my $a" ; right.

[16:41] <ninereasons> only done because the builtin undef is broken.

[16:41] <lightstep> i forgot that p6 has no-arglist subs too

[16:41] <ninereasons> I think that the arglist sub syntax is going to rapidly become perl6 cargo-cult

[16:42] <mugwump> (ML-grade method signatures specified Perlishly)++

[16:43] <lightstep> subs with arglist are better than @_&shift

[16:43] <ninereasons> they sure are!

[16:45] <ninereasons> but I can see the pattern being established already, of full type and return declarations. 

[16:45] <ninereasons> I expect that it might appear to some as the one way to do it

[16:45] <wolverian> static typing is nice when it is done with roles instead of classes.

[17:53] <Limbic_Region> http://www.perlmonks.org/index.pl?node_id=446048 # CP6AN should be a database

[18:08] <autrijus> greetings!

[18:08] <mugwump> hello!

[18:08] <Khisanth> Limbic_Region: not sure if you were around but I am pretty sure that has been discussed :)

[18:09] <Limbic_Region> no Khisanth - I have been working today

[18:09] <autrijus> Gruber: around?

[18:09] <Limbic_Region> glad that it was brought up though

[18:09] <Limbic_Region> @seen Gruber?

[18:09] <Limbic_Region> hmmm

[18:09] <Limbic_Region> seen Gruber?

[18:09] <jabbot> Limbic_Region: Gruber was seen on Tue Apr  5 22:57:02 2005

[18:10] <Khisanth> Limbic_Region: not today, quite a few days ago maybe weeks :)

[18:10] <Limbic_Region> oh - well then I am just pointing out to autrijus that it is being discussed on PerlMonks

[18:10] <Khisanth> jabbot needs to be reporting that in a more relative fashion :)

[18:10] <Limbic_Region> autrijus, in case you missed it http://www.perlmonks.org/index.pl?node_id=446048 # CP6AN should be a database 

[18:11] <autrijus> "Databases support versioning? What planet do you live on?

[18:11] <autrijus> Maybe you're talking about the Subversion database?"

[18:11] <autrijus> I like this :D

[18:13] <Limbic_Region> jZed in that thread is Jeff Zucker - a pretty smart DB guy (more than a couple DB related CPAN modules to his name)

[18:14] <Limbic_Region> He is always willing to help out on stuff if someone needs help with that area

[18:14] * Limbic_Region isn't much of a DB weenie himself

[18:15] <mugwump> who needs a database when you have STM anyway

[18:15] <castaway> stm?

[18:15] <mugwump> exceptions on acid

[18:15] <mugwump> (or, Software Transactional Memory, if you prefer)

[18:17] <autrijus> different uses :)

[18:17] <autrijus> database handles the query part

[18:17] <autrijus> which STM can't quite help you with

[18:17] <autrijus> but sure, more db use of STM would be cool

[18:18] * mugwump nods

[18:30] <autrijus> $*PID checked in

[18:30] <autrijus> basic undef() fixed

[18:31] <ninereasons> yay

[18:31] <crysflame> yay

[18:32] <autrijus> :)

[18:33] * mugwump just got asked for identification by the obligitary post-9/11 dudes with assault rifles in the airport

[18:33] <autrijus> cool

[18:34] <mugwump> I should have asked them to watch my stuff while I get a coffee

[18:34] <theorbtwo> Mugwump: Where are you?

[18:34] <mugwump> SIN airport

[18:35] <Gruber> autrijus: yup

[18:35] <theorbtwo> Ah, Singapore.

[18:35] <theorbtwo> I suspect they would not be amused.

[18:35] <autrijus> Gruber: there you are. thanks for the $*PID patch, I've checked it in

[18:35] <autrijus> hopefully not breaking win32

[18:35] <mugwump> especially if pressed my remote-controlled firecracker switch from the counter

[18:36] <Gruber> saw that, thanks

[18:36] <autrijus> my "o" and "u" key on the keyboard are half-broken :-/

[18:36] * autrijus ponders sleep first, get a replacement tomorrow, _then_ resume hacking

[18:38] * mugwump wonders whether it is worth resisting the urge to sleep

[18:39] <theorbtwo> autrijus: Made some progress on an hs-plugins-based External.Haskell, but it's now not finding the u_* symbols from Unicode.o for some reason.

[18:39] <autrijus> theorbtwo: you need to link against UnicdeC.o

[18:40] <autrijus> maybe just load it

[18:40] <theorbtwo> Hm, that's an idea.

[18:40] <autrijus> same for pcre/pcre.o

[18:40] <theorbtwo> Nod.

[18:40] <theorbtwo> I expected it to figure that out itself, though.

[18:41] <autrijus> n, thse two are linked explicitly

[18:41] <autrijus> probably not part f .hi

[18:41] <autrijus> gah. I'll try repair my keyboard a bit. bbiab :)

[18:41] <theorbtwo> I got the gist.

[18:42] <theorbtwo> That's a new one: "pugs: Prelude.undefined"

[18:43] <ninereasons> I give up.  how do you display the differences between two subversion versions?  

[18:43] <stevan> svn diff 

[18:43] <theorbtwo> svn diff -r a:b

[18:43] <stevan> svn help diff :)

[18:44] <ninereasons> svn help diff  - gah;

[18:44] <ninereasons> thanks.

[18:44] <stevan> ninereasons: what the theorbtwo said

[18:44] <stevan> ninereasons: this is always helpful to me http://svnbook.red-bean.com/en/1.0/index.html

[18:45] <theorbtwo> I tend to do svn diff -rHEAD|less a decent bit

[18:46] <ninereasons> stevan && theorbtwo  thanks.

[18:55] <autrijus> back

[18:55] <stevan> autrijus: I found a bug with named parameters

[18:55] <autrijus> aside from multidim, what else to you consider to be 6.2.0 blocker?

[18:55] <autrijus> s/to/do/

[18:56] <autrijus> next/redo in all loops, maybe?

[18:56] <autrijus> stevan: oh?

[18:56] <stevan> how about mutable sub parameters ?

[18:56] <stevan> (anyway back to named params) this works: sub foo (+$x = 3) { $x }

[18:56] <autrijus> "is rw" / "is copy" ?

[18:56] <stevan> autrijus: those work?

[18:57] <stevan> but this does not: sub foo2 (+$x = 3, +$y = 5) { $x + $y }

[18:57] <autrijus> yeah, a parsebug

[18:58] <stevan> autrijus: I added tests for it in t/subroutines/sub_named_params.t

[19:00] <autrijus> looking

[19:02] <autrijus> fixed.

[19:02] <autrijus> r1647

[19:02] <stevan> whooo hooo

[19:04] <autrijus> now, let's see "is rw"

[19:05] <autrijus> pugs> sub destroy ($x is rw) { $x = 7 }; my $v = 1; destroy $v; $v

[19:05] <autrijus> 7

[19:05] <ninereasons> yay

[19:05] <autrijus> r1648.

[19:05] <ninereasons> that's a big stride forward, IMO

[19:05] * theorbtwo wonders why svn log|less takes so long to die after I hit q.

[19:06] <autrijus> :)

[19:06] <chip> svn-- # catching SIGPIPE, probably

[19:06] <stevan> autrijus++

[19:06] <ninereasons> autrijus++

[19:06] * stevan goes to remove all the hacks around lack of 'is rw'

[19:06] <autrijus> stevan: my IType work today turns out to be worthless... the p6 semantic turns out to be "just like p5, except autoref/deref"

[19:07] <autrijus> I persumed something more clever based on parrot's PMC model

[19:07] <autrijus> turns out to be overclever :-(

[19:07] <castaway> hmm, gentoo is still building ghc (started 4-5 hours ago)

[19:07] <theorbtwo> autrijus: Keep the work around, hope that they're fix the spec?

[19:08] <autrijus> theorbtwo: probably no chance of that, I think it's one of the very wellspecced part

[19:08] <theorbtwo> Oh.

[19:08] <autrijus> I'm still not that sure on this "container type" thing

[19:08] <autrijus> but that's one of perl's defining characteristics

[19:08] <stevan> autrijus: so does my @a = (1, [ 2, 3 ], 4); not DWIM?

[19:09] <autrijus> so if @larry thinks we keep it, we need to keep it

[19:09] <crysflame> autrijus: keep it around as an alternative syntax patch for perl6, since it's supposed to be super-easy to do those with perl6?

[19:09] <autrijus> crysflame: not a syntax I'm afraid

[19:10] <autrijus> stevan: oh, right, that p6c post

[19:10] <autrijus> that has nothing to do with IType.

[19:10] <autrijus> you can try

[19:10] <autrijus> (1, [ 2, 3 ], 4)

[19:10] <autrijus> in the pugs prompt

[19:10] <autrijus> it's a bug in ","

[19:10] <stevan> autrijus: it will flatten (i think) (I am in the middle of make)

[19:10] <autrijus> it flattens eagerly

[19:11] <crysflame> oh.

[19:15] <stevan> autrijus: any chance of "is copy" ?

[19:16] <autrijus> I wonder what does it do for multidim

[19:16] <stevan> autrijus: good thought

[19:17] * stevan is starting to miss the old aliased parameter passing

[19:17] * theorbtwo suspects not what he wants it to.

[19:18] <theorbtwo> But the =:= thread is depressing me.

[19:18] <theorbtwo> I want predictable behavior for $$x, dammit.

[19:18] <stevan> autrijus: will you put it if I promise to only use it on string ;)

[19:19] <stevan> autrijus: according to s06 (http://search.cpan.org/~ingy/Perl6-Bible-0.13/lib/Perl6/Bible/S06.pod#Parameter_traits) 

[19:19] <stevan> When applied to a variadic parameter, the rw trait applies to each element of the list:

[19:20] <autrijus> is asavige's (1,[2,3],4) made into a test?

[19:21] <stevan> autrijus: not specifically, but I will make sure the multi-dimensional_array.t file tests that case

[19:22] <autrijus> that test now reads

[19:22] <autrijus> All tests successful (16 subtests UNEXPECTEDLY SUCCEEDED).

[19:22] <autrijus> which I assume is an improvement

[19:22] <autrijus> (r1649)

[19:22] <stevan> yes

[19:23] <stevan> autrijus: it tests [1, ['foo', 'bar', 'baz'], 5]

[19:23] <stevan> which is close, but not quite

[19:24] <stevan> so I will un-TODO and add a few tests

[19:24] <autrijus> ok.

[19:31] <stevan> autrijus: it works

[19:31] <stevan> I added it to t/data_types/mixed_multi_dimensional.t as the Array of List test

[19:32] <autrijus> cool

[19:35] <stevan> autrijus: and HoLists seems to work

[19:35] <ninereasons> lots of cool things work now.  

[19:35] * ninereasons off to play with pugs 

[19:35] <stevan> but accessing them like this %hash<key>[2] does not work 

[19:35] <autrijus> good. although rw into deep structures does not

[19:35] <autrijus> jinx

[19:35] <autrijus> that will still require IType.

[19:36] <autrijus> I've got a design (actually the 3rd -- I'll spare you the details)

[19:36] <autrijus> will try to do it after some more sleep

[19:36] <stevan> autrijus: sounds good... I will try to flesh out more of the corner cases for multi-dims while you sleep

[19:36] <autrijus> cool!

[19:36] <autrijus> stevan++ # test driven

[19:37] <stevan> autrijus++ 

[19:37] <autrijus> oh btw, kv.t is weird

[19:37] <stevan> I will take a look at it

[19:37] <autrijus> assume %hash = <a 1 b 2>

[19:37] <autrijus> I assume %hash.kv would return <a 1 b 2> in list context

[19:37] <autrijus> otherwise can't quite imagine how it works in for()

[19:37] <stevan> like a zip() maybe?

[19:38] <autrijus> zip() returns a flat list

[19:38] <autrijus> anyway, the original test (and the larry comment below) has it as [[<a 1>], [<b 2>]]

[19:38] <autrijus> but I don't see how for() works with it

[19:38] <stevan> weird

[19:38] <autrijus> and I wonder if larry has it confused with .pairs

[19:38] <autrijus> or rod is confused, or I'm confused.

[19:38] <autrijus> if you have some time, try looking at the test to make some sense, and/or post to p6l :)

[19:39] <stevan> ok

[20:07] *** lightste1 is now known as lightstep

[20:13] <Juerd> 16:50 < wolverian> that was juerd's suggestion. I don't think larry ever liked it.

[20:13] <Juerd> wolverian: He said he liked it, but for unmentioned reasons decided against.

[20:14] <Juerd> Unless "too many operators" really was the reason, but that rule'd be somewhat inconsistently applied then :)

[20:34] <ihb> Juerd: which operator?

[20:34] <wolverian> Juerd: ah, sorry.

[20:34] <wolverian> ihb: <->

[20:34] <ihb> and <-> would do...

[20:34] <wolverian> ihb: same as -> except the args would be rw 

[20:35] <ihb> -> as in pointy subs?

[20:35] <wolverian> yes.

[20:35] <ihb> for @foo -> { s/.// } # won't work because $_ isn't rw there?

[20:36] <wolverian> er, I think that's invalid; -> _requires_ args. I could be wrong about that, and it's unrelated. I think $_ is rw by default, but named args aren't

[20:36] <ihb> ok.

[20:37] <autrijus> $_ is rw by default?

[20:37] <autrijus> reference?

[20:37] <autrijus> (it's not in pugs, and I'd be happy to fix)

[20:39] <wolverian> I don't know if it is.

[20:40] <wolverian> I think it was mentioned somewhere.

[20:40] <wolverian> or maybe when there is no <->, -> is always rw

[20:41] <wolverian> Juerd probably knows better. I shouldn't talk so much when I don't really know the facts. 

[20:41] <autrijus> for @foo -> $_ is rw { ... }

[20:41] <wolverian> for @foo -> $a is rw, $b is rw, $c is rw { ... } # repetitive.

[20:42] *** metaperl__ is now known as metaperl_

[20:45] <hlen> wolverian, there must be another way to say that

[20:57] <Corion> Is r1653 build broken ?

[20:57] <PerlJam> wolverian: for @foo -> ($a,$b,$c) is rw { ... }   #  :-)

[20:57] <Corion> : src/Compat.hs:74:0:Couldn't match `IO ProcessID' against `t -> t1'

[20:57] <Corion> ... reading the logs ...

[21:00] <PerlJam> Corion: compiles for me, are you sure you don't have a local mod that's causing it to break?

[21:01] <PerlJam> (I did "make clean; perl Makefile.PL; make"  btw)

[21:02] <wolverian> PerlJam: hmm. okay. :)

[21:02] *** metaperl__ is now known as metaperl_

[21:08] <Corion> Hah. Seems like it was the $*PID patch and I've gotten it to compile now.

[21:08] <Corion> And the sleep() is useless I think - it should be threadDealy()

[21:10] <autrijus> please fix both and commit :)

[21:10] <autrijus> journal up and I need to sleep now

[21:10] <autrijus> see you tomorrow *wave* &

[21:11] <Corion> autrijus: Looking ;) And my "fix" didn't work out yet :(

[21:11] <Corion> Sleep well, autrijus 

[21:11] <autrijus> Corion: just remove the _ from getProcessID, no?

[21:11] <autrijus> but. zzz &

[21:18] <Corion> Where do we put tests against builtin variables ? under t/var ? under t/builtins ?

[21:19] <stevan> t/builtins

[21:19] <Corion> stevan: I see some related things in t/magicals

[21:19] <stevan> Corion: also if it a builtin specific to a string or array or something then t/builtins/string, etc

[21:19] <Corion> I want to write a test against $*PID :)

[21:19] <stevan> t/magicals then

[21:21] <putter> have we a perl6 syntax expert in the house?

[21:23] <stevan> putter: expert I am not, but I might be able to help

[21:25] <putter> t/statements/if.t has a test case "if {...} ...".  That's a closure as the condition.  Last night I was unable to turn up any documentation to justify this case.  I'm wondering whether the test is itself a bug...

[21:25] <stevan> putter: I think it should work

[21:26] <stevan> 'if' should be able to be done without parens, and with anything as an arg

[21:26] <stevan> so while it is certainly a perversion of the syntax, it should work

[21:28] <stevan> putter: did you look in recent perl6-lang emails and #perl6 logs? I think I recall is being discussed somewhere (hence the test)

[21:29] <putter> oops.  duh.  that makes sense.  so closures being "true", it will always be true.  and the test is failing because of a quirky parser problem.

[21:30] <putter> i did grep about in p6l, but not in the #p6 logs.

[21:30] <stevan> putter: yes

[21:30] <stevan> try the #perl6 logs, it may be in there

[21:30] <stevan> I know it is a recent addition to the file because I wrote the test originally and I didnt put it there :)

[21:32] <putter> currently, if {...} { $foo=2 } else { $foo=3}  parse fails, but if a ; is added after the foo=n's, then it parses.

[21:32] <stevan> putter: odd, you want to write up a quick tests and put it in t/pugsbugs/?

[21:34] <putter> the test has been in since 509, nothingmuch, march 7.  at least based on the log entries.  svn blows out with an error message if you ask for contents or diff.:(

[21:34] <putter> i'll add it to pugsbugs.

[21:36] <Corion> Hmmm. While threadDelay compiles, it doesn't magically fix the sleep() issue on Win32.

[21:44] <pasteling> "ninereasons" at 199.107.164.126 pasted "$_ is rw; $_ is not rw" (9 lines, 333B) at http://sial.org/pbot/9102

[21:50] * kungfuftr can no longer build pugs

[21:50] <kungfuftr> /usr/local/lib/ghc-6.4/libHSbase.a: could not read symbols: Memory exhausted

[21:54] <kungfuftr> during linking that is

[21:54] <ninereasons> linking can be a killer

[21:55] <moustic> hi .. is there a reason why a regexp does not capture anything with the x tag, and something just removing it ?

[21:55] <ninereasons> isn't x is deprecated ?

[21:56] <ninereasons> well, you would be using perl5 rules, though

[21:56] <ninereasons> ?

[21:56] <moustic> yes

[22:01] <ninereasons> I don't know, moustic;  pugs is being tested against over 1580 perl5 rules, and I'm not sure which ones work.

[22:02] <ninereasons> you can check at t/rules/perl5.t

[22:02] <moustic> ok i will have a look, thx

[22:02] <kungfuftr> bah, sucks

[22:04] <putter> stevan: what is the criteria for placing things in pugsbugs?

[22:04] <kungfuftr> putter: submit a test

[22:07] <stevan> putter: it must be a bug :)

[22:07] <Corion> there are some unexpected successes for p5 rules BTW

[22:07] <stevan> putter: things like what you describe are weird syntax issues. 

[22:07] <stevan> Corion: I fixed those,... r1654

[22:07] <Corion> stevan++

[22:08] <Corion> stevan: I just saw them some hours ago, but wasn't able to communicate with #perl6 ;)

[22:08] <stevan> putter: so they don't fit into proper tests

[22:08] <Corion> But sleep() on Win32 now works the same (or even better) as on Unix. Except that sleep() should return the time slept, which it does on neither system...

[22:08] <stevan> Corion++ # :)

[22:08] <putter> tnx.

[22:09] <Corion> But that means only 1 of four tests now fails :)

[22:09] <stevan> Corion: I am guessing you want sleep for LWP::Simple right?

[22:09] <Corion> Maybe Unix should get switched to threadDelay() too.

[22:10] <Corion> stevan: Hmm - no, I wanted it for ... I forgot ;)

[22:10] <Corion> But when I unwind my stack,  I'll hopefully find the cause again ;)

[22:11] <kungfuftr> anyone got any ideas about how to avoid this memory exhaustion linking problem at all?

[22:11] <Corion> kungfuftr: Buy more RAM

[22:12] * Corion hides from the rotten tomatoes

[22:12] <kungfuftr> Corion: i have 350Mb

[22:12] <kungfuftr> more than enough

[22:13] * kungfuftr checks if there have been ghc updates

[22:18] <putter> is there a list of all the tinderboxes somewhere?  (i see builtins/math/exp.t failing because it rounds off one digit short, and I'm wondering if it is currently working for anyone (thus the test would need to truncate) or not (thus add digit:)).

[22:19] <shapr> For the math builtins I implemented, I just changed test. No one has complained.

[22:21] <putter> tnx.

[22:21] <Corion> [putter]: I only know the one of kungfuftr and mine at http://datenzoo.de/pugs/win2k.{html|yaml}

[22:27] <putter> Corion: tnx.  I've added an entry in the pugs wiki faq, under "other questions".  also linked to nothingmuch's tinderbox.

[22:34] <Corion> shapr: If you find tuits, can you look into making sleep x return x (or even the number of seconds acutally slept) ?

[22:34] <shapr> I'll keep that in mind.

[22:34] <shapr> I suspect most of my tuits will happen on Sunday.

[22:34] <Corion> shapr: No hurry - it's merely cosmetic :)

[22:36] * Corion & zZzzzZzz

[22:41] <putter> Corion: i just got a "no newline at end of file" warning with a fresh Compat.hs.  fyi.

[22:42] <ninereasons> is there some way to test the output of "say" ?  I want to show that 'say' is the same as 'say $_' in some contexts, but not in others.

[22:45] <shapr> Can you use the tests in want.t?

[22:46] <shapr> It would be nice to have a standard set of contexts for testing.

[22:47] <ninereasons> I should say 'scope', rather than 'context'

[22:47] <ninereasons> sorry.

[22:49] <putter> ninereasons: run pugs as subprocess, with output piped to file?  hmm...  can we rebind stdout yet?

[22:49] <ninereasons> I think that what I want is to redirect $*OUT to a scalar; but that's a todo.

[22:49] <ninereasons> and there is no 'select' 

[22:50] <ninereasons> and, i feel silly, but I can't tell whether "say $handle" will print $_ to $handle, or not.

[22:50] <ninereasons> or whether it should.

[22:53] <Juerd> 22:37 < autrijus> $_ is rw by default?

[22:53] <Juerd> It is.

[22:54] <ninereasons> in any scope?

[22:54] <Juerd> I'd rather explain that as "<-> $_" is used by default, rather than "-> $_ is rw" is used by default

[22:54] <Juerd> But <-> isn't going to happen

[22:54] <Juerd> ninereasons: No, as the default ->.

[22:55] <ninereasons> did you see my paste, above?

[23:06] <Juerd> No

[23:06] <ninereasons> http://sial.org/pbot/9102 # its a bug, not purposely this way

[23:08] <elmex> lolz, aimbot userz, y00, r0ck

[23:08] <elmex> oops, wrong channel

[23:08] <elmex> *g* ;)

[23:11] <pasteling> "ninereasons" at 199.107.164.126 pasted "getting output of "say" into a variable." (7 lines, 176B) at http://sial.org/pbot/9103

[23:11] <ninereasons> I'm so slow.  I guess that works, though.

[23:26] <putter> ninereasons: slow is ok.  success! ;)

[23:26] <Juerd> ninereasons: I'm browserless.

[23:26] * shapr is brainless

[23:27] <ninereasons> then, will you forgive a paste to #perl ?  It's fairly short

[23:27] <ninereasons>  to #perl6 , that is

[23:27] * shapr looks at Juerd

[23:27] * shapr surely doesn't mind

[23:28] <putter> hey, its perl, here comes one line...

[23:28] <ninereasons> my $a := $_; for 1 .. 3 { $a++ }; say; # 3

[23:28] <ninereasons> for 1 .. 3 { say } # 3\n3\n3\n

[23:28] <ninereasons> for 1 .. 3 { $_++ }; # *** Error: cannot modify constant item at 1

[23:30] <ninereasons> success, yes, putter :) 

[23:30] <shapr> this is pugs?

[23:30] <ninereasons> pugs, yep.

[23:31] <ninereasons> a broken nosed pugs, I think.

[23:31] <ninereasons> :(

[23:32] <shapr> should it return a constant?

[23:32] *** bd__ is now known as bd_

[23:33] <ninereasons> $_ should be rw in both scopes;

[23:33] <ninereasons> and $_ should be the default topic for 1..3

[23:33] <ninereasons> not the global - the local

[23:33] <ninereasons> (it's confusing)

[23:33] * shapr is confused, yes.

[23:34] <ninereasons> for 1..3 {say} should be the same as 

[23:34] <ninereasons> for 1 .. 3 -> $_ { say $_ }

[23:34] <ninereasons> (but that's broken too)

[23:35] <ninereasons> (broken in a different way)

[23:35] * shapr blinks

[23:36] <ninereasons> what test function do you use to say "should not succeed"?

[23:37] * putter notices "cannot modify constant item" appears 5 times in his most recent "make test".

[23:37] <ninereasons> those errors are usually fatal.

[23:38] <ninereasons> it means that the test file did not execute completely (labelled "dubious")

[23:38] <ninereasons> s/means/indicates the probability/

[23:47] * putter notices row of green boxes can mean test died horribly ("dubious").  at least on http://nothingmuch.woobling.org/pugs_test_status/  (eg, t/builtins/undef.t)  Contrast http://datenzoo.de/pugs/win2k.html which got it right.  ???

[23:54] <ninereasons> interesting

[23:55] <ninereasons> what is the proper english name of "$_" ?

[23:55] <putter> topic? (very fuzzy recollection)

[23:56] <ninereasons> that's right, in some contexts; but how about the proper perl5 english name?

[23:57] <ninereasons> it's kind of like that name for the artist formerly called "priince".  

[23:57] <ninereasons> it's  ... you know ... "$_"

[23:58] <ninereasons> default scalar variable?

[23:58] <ninereasons> implied scalar?

[23:58] <putter> "The default input and pattern-searching space."  perlvar

[23:59] * ninereasons considers calling the  test "The_default_input_and_pattern-searching_space.t"

[23:59] <putter> ;)

[23:59] <ninereasons> :)

