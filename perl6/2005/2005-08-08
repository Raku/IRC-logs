[00:58] <mugwump> brentdax: ePerl didn't take off.

[01:00] <QtPlatypus> mugwump: What is ePerl?

[01:00] <mugwump> Parse::ePerl

[01:01] <mugwump> Which would be very similar to Perl 6's { } interpolation, in fact identical if you passed it the appropriate options

[01:02] <mugwump> However nobody used it because the templates ended up being really ugly, especially compared to TT.  Or they just used Mason (of course, people who use Mason are never worried about ugly templates)

[01:03] <mugwump> maybe Perl 6 having nicer syntax would be its saving grace, but I still think that a domain-specific language like TT brings the right balance of expressivity and restriction to a templating environment.

[01:04] <mugwump> Otherwise you just end up writing PHP

[01:06] * mugwump lunches &

[06:02] <coral> http://www.weitz.de/einstein.html

[06:04] <brentdax> You can return from a try {} block, can't you?

[06:12] *** davidra is now known as autark

[06:14] *** autark is now known as jp-autark

[07:07] * nothingmuch tries to think what he still needed to get around to yesterday

[07:10] * brentdax wonders if an unprintable character can be used as a literal string delimiter...

[07:10] <brentdax> Looks like it.  Hmm...

[07:18] <nothingmuch> brentdax: it's fun

[07:18] <nothingmuch> you can use \0 as a delimiter

[07:19] <brentdax> I'm planning to do so.

[07:21] <brentdax> `eval "qq\0$str\0"` is basically equivalent to the `eval :lang<Perl6qq>` construct I mentioned earlier.

[07:21] <brentdax> (And no, not every Joe Blow will be able to control what goes in $str--only an admin will.)

[07:22] <nothingmuch> why do you need to quote that way?

[07:22] <nothingmuch> isn't `eval "qq\0$str\0"` eq `$str`

[07:23] <brentdax> Not if you don't know what $str will be until runtime.

[07:23] <brentdax> I'm pulling $str out of a database.

[07:23] <brentdax> And letting it interpolate variables in the local scope.

[07:23] <nothingmuch> oh, variable interpolation

[07:23] <nothingmuch> i didn't notice it was qq instead of q

[07:24] <nothingmuch> you are naughty, but have fun =)

[07:24] <autrijus> brentdax: looks suitable insane

[07:24] <autrijus> (i.e. that's fine)

[07:25] <brentdax> It probably is, but I don't want to invent a template language and I don't want to force people to edit the code.

[07:25] * nothingmuch has to finish some web devel now

[07:25] <nothingmuch> we have a templating module, don't we?

[07:26] <Aankh|Clone> I believe we do...

[07:26] *** Aankh|Clone is now known as Aankhen``

[07:26] <Aankhen``> Ah yes, WTemplate.

[07:36] <brentdax> Doesn't really seem to be what I'm looking for--basically I just want something where the user can specify a string and have a few values inserted here and there.

[07:39] <nothingmuch> .... and an if/then/else clause occasionally

[07:40] <nothingmuch> ;-)

[07:43] <brentdax> If they need one, there's always closure interpolation...

[07:44] <brentdax> Hmm, "can't find fetchrow_arrayref" is never a good error message.

[07:44] <brentdax> There are a lot of Heisenbugs in Perl 5 interop.

[07:46] <autrijus> yes.

[07:47] <coral> s/interop// additionally

[07:47] <brentdax> Heh.

[07:48] <brentdax> Time to switch shebang lines and see if a newer Pugs will work better...

[17:15] *** enilb is now known as bline

[17:16] <svnbot6> r6113 | fglock++ | * much refactored Lazy::List

[18:13] <svnbot6> r6114 | fglock++ | * New lazy array methods: FETCH(), STORE()

[18:13] <svnbot6> r6114 | fglock++ | * Lazy list methods (grep, map, ...) moved from Array::Lazy to 

[18:13] <svnbot6> r6114 | fglock++ |   Lazy::List. These methods can be accessed from an array

[18:13] <svnbot6> r6114 | fglock++ |   by doing a 'splat()' first. 

[18:13] <svnbot6> r6114 | fglock++ |   Array::Lazy::reverse() is still supported.

[18:13] <svnbot6> r6115 | fglock++ | * added tests for Array::Lazy FETCH/STORE

[18:38] <stevan> autrijus: how goes the metamodel?

[18:39] <stevan> I will try and work up a properly documented Meta Object Protocol this week

[18:39] <stevan> aka - a list of methods which you need to expose on the Perl 6 level

[18:39] <stevan> I will use Syn 12.5 for it

[18:51] <svnbot6> r6116 | fglock++ | * Array::Lazy FETCH/STORE all tests pass

[19:13] <svnbot6> r6117 | fglock++ | * Array::Lazy new method slice()

[19:13] <svnbot6> r6117 | fglock++ |   - accepts a lazy list or lazy array as argument!

[19:13] <svnbot6> r6117 | fglock++ |     @a = 1..Inf;  @b = @a[10..Inf];

[19:13] <svnbot6> r6118 | fglock++ | * Array::Lazy documentation updates

[19:28] *** chip_ is now known as chip

[19:29] <svnbot6> r6119 | iblech++ | * t/rules/, t_disabled/rules/: Fixed the rules-support-missing guard so it

[19:29] <svnbot6> r6119 | iblech++ |   works under PIL2JS (eval('!...') -> !eval('...')).

[19:29] <svnbot6> r6119 | iblech++ | * t/builtins/arrays_and_hashes/pick.t: Minor fix (s/==/eq/).

[19:29] <svnbot6> r6119 | iblech++ | * PIL2JS: PIL2JS.js: Added .toNative of PIL2JS.Hash and PIL2JS.Pair.

[19:29] <chip> Good Day

[19:31] <fglock> hi

[19:33] <brentdax> Hello Chip.

[19:56] <svnbot6> r6120 | fglock++ | Lazy Array .elems() actually work

[20:10] <svnbot6> r6121 | Stevan++ | Perl6::MetaModel - (p5)

[20:10] <svnbot6> r6121 | Stevan++ | * first start on documenting the Meta Object Protocol

[20:37] <svnbot6> r6122 | fglock++ | * more Array::Lazy.elems stuff

[20:45] <fglock> hi

[21:04] *** blez is now known as firemind

[21:10] <svnbot6> r6123 | dudley++ | Perl6::MetaModel - (p5)

[21:10] <svnbot6> r6123 | dudley++ | * minor spelling and grammar fixes

[21:22] * Aankhen`` goes to sleep.

[21:22] <Aankhen``> G'night.

[21:51] <stevan> dudley++ # fixing my attroshush speeling and grammer

[21:51] <stevan> personally I blame Phonics :P

[21:52] <dudley> :)

[21:55] <dudley> I'm thinking about working on the Java version of the metamodel a little, just to get acquainted with it. Do you mind?

[22:25] <BlackShuck> Hope nobody minds, I got a perl newbie iser question. I have a perl app, but it complains about the following on start "Can't locate Digest/SHA.pm"  I have added the cpan module SHA, but it has not helped.  Does anyone have any other advice?  Thanks.

[22:26] <mugwump> BlackShuck: ask on perlmonks.org, could be a few reasons.  make sure to put full command output in your question.

[22:27] <iblech> Isn't it Digest::SHA1 (with the 1)?

[22:27] <mugwump> yes, that might be part of the problem :)

[22:29] <BlackShuck> yes, thanks ibelch, it was digest::sha1

[22:30] * mugwump gives iblech a fish

[22:30] <BlackShuck> although it did install something with SHA

[22:30] * iblech goes back to coding (full continuations in PIL2JS)

[22:31] * fglock banging head trying to store a lazy array into another, using a lazy slice

[22:48] <svnbot6> r6124 | fglock++ | * Array::Lazy::store_slice() - initial code

[23:25] *** buu is now known as buu-

[23:25] *** buu- is now known as buu--

[23:25] *** buu-- is now known as buu

