[01:18] <Guest53185> a

[01:26] <nothingmuch> a

[01:27] *** Guest53185 is now known as Weems

[01:40] <nothingmuch> seen Alias

[01:40] <jabbot> nothingmuch: I havn't seen Alias , nothingmuch

[01:41] <nothingmuch> uh, he spells his name with an underscore, right?

[01:47] <Juerd> seen Alias

[01:47] <jabbot> Juerd: I havn't seen Alias , Juerd

[01:47] <Juerd> jabbot: STUPID BOT, REMOVE THAT SPACE BEFORE THE COMMA. IT IS MISLEADING.

[01:47] <jabbot> Juerd: 所以？

[01:47] <Juerd> and s/havn/haven/

[01:55] <gugod> alas

[01:55] <gugod> my bad

[03:08] * theorbtwo wonders what he's missed.

[03:10] <Khisanth> nothing!

[03:14] <theorbtwo> Is the SVN still down?

[03:17] <hcchien> I guess so

[03:17] <nothingmuch> hackathon:

[03:17] <nothingmuch> "monkey butts evaluate to doodoo"

[03:18] <nothingmuch> or "monkey buts evaluate to do do"

[03:18] <nothingmuch> what fun

[03:22] <theorbtwo> Nothimgmuch, you remind me of me, but smarter and more immature.

[03:22] <theorbtwo> At the moment, however, I haven't a clue what you are talking about.

[03:23] <theorbtwo> (God, bandwidth is nice.)

[03:29] <nothingmuch> Obj.new but { $obj.method };

[03:29] <nothingmuch> my $obj = Obj.new;

[03:29] <nothingmuch> $obj.method;

[03:29] <nothingmuch> $obj

[03:29] <nothingmuch> these are the same things

[03:29] <nothingmuch> do given Obj.new { .method; $_ }

[03:29] <nothingmuch> at some point someone mentioned 'do d'

[03:29] <nothingmuch> 'do do'

[03:29] <nothingmuch> and 'but' on a closure is known as monkey but

[03:29] <nothingmuch> see also monkey_but.t when it gets checked in

[03:30] <nothingmuch> (that is to say, when openfoundry is back up)

[03:31] <theorbtwo> Looks like a reasonable equilency, but I don't see where do do comes into it.

[03:32] <theorbtwo> Whatever.

[03:32] <theorbtwo> Hackathon is fun, but I can't get anything done there.\

[03:36] <theorbtwo> Eeep.  I can't remember my perlmonks password.  Either of them.

[03:37] <theorbtwo> ...and it's my freaking site.

[03:38] * theorbtwo sshes in and asks.

[03:42] <theorbtwo> Oh, there we go, found the godly one.

[03:42] <theorbtwo> Brain so molten.

[03:58] <brentdax> Is Perl 5 interop known to [not]? work on AMD64?

[04:44] <mugwump> blast, still no SVN huh?

[04:47] <mugwump> all those in favour of a temporary public SVN server for the meantime say aye

[06:46] <svnbot6> r4946, mugwump++ |  r15293@speights:  samv | 2005-06-25 20:59:17 +1200

[06:46] <svnbot6> r4946, mugwump++ |  Disable Date::Gregorian, even minimal class fails to load (?)

[06:46] <svnbot6> r4947, mugwump++ |  r15294@speights:  samv | 2005-06-25 21:08:17 +1200

[06:46] <svnbot6> r4947, mugwump++ |  t/00load.t passes

[06:46] <svnbot6> r4948, mugwump++ |  r15295@speights:  samv | 2005-06-25 21:47:10 +1200

[06:46] <svnbot6> r4948, mugwump++ |  Make t/01sanity.t pass

[06:46] <svnbot6> r4949, mugwump++ |  r15296@speights:  samv | 2005-06-25 22:44:38 +1200

[06:46] <svnbot6> r4949, mugwump++ |  some tests for attribute mutators

[06:46] <svnbot6> r4950, mugwump++ |  r15297@speights:  samv | 2005-06-25 23:27:21 +1200

[06:46] <svnbot6> r4950, mugwump++ |  Make a stub test to test Test script output

[06:46] <svnbot6> r4951, mugwump++ |  r15298@speights:  samv | 2005-06-25 23:42:52 +1200

[06:46] <svnbot6> r4951, mugwump++ |  Make t/02last_day.t fail gracefully

[06:46] <svnbot6> r4952, mugwump++ |  r15299@speights:  samv | 2005-06-25 23:59:35 +1200

[06:46] <svnbot6> r4952, mugwump++ |  make a few tests pass and comment out the rest

[06:46] <svnbot6> r4953, mugwump++ |  r15300@speights:  samv | 2005-06-26 00:02:24 +1200

[06:46] <svnbot6> r4953, mugwump++ |  TODO a broken test, check in changes to make partial 03components pass

[06:46] <svnbot6> r4954, mugwump++ |  r15301@speights:  samv | 2005-06-26 00:03:12 +1200

[06:46] <svnbot6> r4954, mugwump++ |  Add :depends flag to Test ok(), etc

[06:54] <arcady> hey hey, openfoundry is back

[06:54] <arcady> time to rebuild pugs and see if it still works!

[07:02] <Darren_Duncan> in case it wasn't noticed, I'm happy to report that openfoundry.org seems to be up now

[07:03] <arcady> it's just been noticed in fact

[07:03] * arcady rejoices

[07:03] <Darren_Duncan> I also have a commit to make, preferably before the release, but I won't be able to do it until about 15 hours from now

[07:03] <Darren_Duncan> bed time and all

[07:03] <Darren_Duncan> also, given what svn up brought, its obvious that the Toronto hackathon's stuff hasn't been put on openfoundry yet

[07:04] <Darren_Duncan> the stuff from the last 2 days that is

[07:07] <Darren_Duncan> now, looking at the IRC log ... noticed something journal worthy

[07:08] <Darren_Duncan> Juerd's yelling at a bot, http://colabti.de/irclogger/irclogger_log/perl6?date=2005-06-26 near the top

[07:09] <Darren_Duncan> good quote for Autrijus' journal, to join his other quote collection

[07:09] <Darren_Duncan> anyway, back in 14-15 hours, good night

[07:13] <svnbot6> r4955, autrijus++ | * minor source cleanups.

[07:14] <autrijus> greetings.

[07:14] <luqui> !!

[07:14] <autrijus> luqui: a minimal example?

[07:15] <autrijus> or commit and tell me what to run? :)

[07:15] <luqui> class Foo { method bar() { 50 } }  sub baz($x) { say $x.bar }  baz(Foo.new)

[07:15] <autrijus> 'k

[07:16] <luqui> (untested, so it might work ;-)

[07:16] <autrijus> that prints 50

[07:16] <luqui> indeed

[07:16] <luqui> hmm

[07:16] <luqui> so it's deeper

[07:16] * luqui is reducing to a real minimal example

[07:20] <luqui> it's a two-level thing

[07:20] <svnbot6> r4956, autrijus++ | test was full of crap about precedence

[07:20] <svnbot6> r4957, autrijus++ | clearer failure boundries for hash subscript reduction

[07:20] <svnbot6> r4958, autrijus++ | &as tests can work in an eval

[07:20] <svnbot6> r4959, autrijus++ | * mark two tests as todo.

[07:20] <luqui> class Foo { method foo() { say "HI" } }   -> $x { -> $y { $y.foo }.($x) }.(Foo.new)

[07:21] <luqui> hi kakos

[07:22] <autrijus> luqui: you know... it's exactly the same bug.

[07:23] <autrijus> just put `is rw` in either $x or $y.

[07:23] <autrijus> zero deref etc.

[07:23] <luqui> yep

[07:23] <luqui> i figured as much

[07:23] <autrijus> so the same fix for transparent reference will fix this.

[07:23] <autrijus> why did we convince larry to adopt zeroderef again? ;)

[07:24] <autrijus> (because it's saner and easier to reason about, yes, but it really uncovers all the design glitches that was hiding underneath)

[07:24] <luqui> hehe

[07:25] <luqui> maybe that's why too

[07:25] <luqui> or do you mean language design glitches

[07:25] <svnbot6> r4960, autrijus++ | * initial cut at P5AST frontend for pugs!

[07:25] <svnbot6> r4961, autrijus++ | * pairs are always evaluated in lvalue context for binding name purposes.

[07:26] <autrijus> language design of course :)

[07:26] <autrijus> we're now regressing like mad because of this misassumption :)

[07:28] <luqui> don't run the test suite.  it's just depressing, and it will get fixed up once nm and stevan are back on the job

[07:28] <luqui> :-)

[07:28] <autrijus> right. :p

[07:40] <mugwump> so, in Date::Gregorian, I'd like to be able to present read/write accessors for properties which are actually derived...

[07:40] <svnbot6> r4962, autrijus++ | * first check in of Perl-Compiler, a PIL representation in Perl 6.

[07:40] <svnbot6> r4963, andras++ | Introducing WTemplate, the widget based template engine for Perl 6

[07:40] <svnbot6> r4964, autrijus++ | * remove empty files

[07:40] <svnbot6> r4965, autrijus++ | Re-added Perl-Compiler

[07:40] <svnbot6> r4966, autrijus++ | Delete stupidity.

[07:40] <svnbot6> r4967, autrijus++ | Adapt to lvalue pair fix.

[07:40] <svnbot6> r4968, autrijus++ | Added PIL tests.

[07:40] <svnbot6> r4969, autrijus++ | Added Load test.

[07:40] <svnbot6> r4970, autrijus++ | * `for Int { ... }`, `when Int { ... }` etc are now always

[07:40] <svnbot6> r4970, autrijus++ |   parsed correctly, instead of grabbing the trailing block as

[07:40] <svnbot6> r4970, autrijus++ |   the sole argument for the list operator.

[07:40] <mugwump> eg, $date.month will return the month where 1 = January

[07:41] <mugwump> $date.month_0 will return the month where 0 = January

[07:41] <mugwump> internally only $.month exists

[07:41] <mugwump> but I want to be able to go, eg, $date.month_0 = 6 to set the month to July

[07:41] <luqui> and you can assign to both of these?

[07:42] <mugwump> that's what I'd like

[07:42] <luqui> okay... I'm not sure if pugs does that

[07:42] * luqui is looking up what it *would* look like

[07:42] <mugwump> I had a look in the synopses .. the only mention of r/w accessors mentions making a sub return an lvalue

[07:43] <luqui> it's in A06

[07:44] <pasteling> "luqui" at 206.47.164.228 pasted "Proxy lvalue" (10 lines, 330B) at http://sial.org/pbot/11352

[07:46] <mugwump> thanks, I'll fix t/oo/attributes/mutators.t

[07:46] <svnbot6> r4971, autrijus++ | * parse the type literals and variables for the condition

[07:46] <svnbot6> r4971, autrijus++ |   parts more correctly.

[07:46] <svnbot6> r4972, autrijus++ | * rename Trans to CodeGen (inspired by luqui)

[07:46] <svnbot6> r4973, autrijus++ | * finish the renaming

[07:46] <svnbot6> r4974, autrijus++ | * finish s/trans/codegen/

[07:48] <luqui> when you set attributes in a class, Pugs currently copies, not binds, right?

[07:48] <luqui> (which is the correct behavior)

[07:49] <mugwump> sure, if you used =

[07:49] <luqui> er, when you pass the attributes in as named params to new

[08:01] <mugwump> well, it definitely doesn't use the lvalue accessor :)

[08:01] <svnbot6> r4975, autrijus++ | Eine Kleine Documentation.

[08:01] <svnbot6> r4976, autrijus++ | Delete Perl-Compiler in the root.  How'd that get there?

[08:01] <svnbot6> r4977, autrijus++ | * in-class `does` and `is` now works.

[08:01] <svnbot6> r4978, autrijus++ | Moved Perl5.pm to Perl5_str.pm

[08:01] <svnbot6> r4979, autrijus++ | monkey butts are fun to play with

[08:01] <svnbot6> r4980, autrijus++ | * the `do STMT` form.

[08:01] <svnbot6> r4981, autrijus++ | * ...implementing the `do STMT` form.

[08:01] <svnbot6> r4982, autrijus++ | thunky-do form implemented in Perl::Compiler and made stuff better.

[08:01] <svnbot6> r4983, autrijus++ | NameGenList -- abandoned skeleton

[08:01] <svnbot6> r4984, autrijus++ | It parses again, baaaaby.

[08:01] <svnbot6> r4985, autrijus++ | Autrijus's journal transparent reference no verb.

[08:07] <coral> svn is up

[08:07] <svnbot6> r4986, autrijus++ | * Repair smart match on types and `does` calls from the zero

[08:07] <svnbot6> r4986, autrijus++ |   dereference regime by explicitly fetching their metaobjects

[08:07] <svnbot6> r4986, autrijus++ |   and walking the inheritance/mixin tree ourselves.

[08:07] <svnbot6> r4987, autrijus++ | * parse for `use perl5:DBI`.

[08:07] <svnbot6> r4987, autrijus++ | * `is 1,2,3` is now always parsed as function call; only the

[08:07] <svnbot6> r4987, autrijus++ |   `is ClassName;` form is parsed as declaration.

[08:07] <svnbot6> r4988, autrijus++ | * remove the no longer used author part.

[08:07] <svnbot6> r4989, autrijus++ | * oops, fix `use`.

[08:11] <luqui> you mean openfoundry?

[08:11] <luqui> yeah, I think that's pretty clear

[08:12] <luqui> here come all our commits for the weekend

[08:12] <luqui> (or rather, there go)

[08:12] * coral reads

[08:12] <autrijus> journal up

[08:12] <svnbot6> r4990, autrijus++ | * `use perl5:DBI` form now works -- the old `use DBI--perl5` form

[08:12] <svnbot6> r4990, autrijus++ |   is no longer supported.

[08:12] <svnbot6> r4991, autrijus++ | Decloudify my type thinking.

[08:12] <svnbot6> r4992, autrijus++ | * &foo in module Foo now looks up &Foo::foo as well.

[08:12] <autrijus> I'll sleep soonish :)

[08:12] <autrijus> enjoy

[08:13] <luqui> hey autrijus

[08:14] <luqui> where is Object::new defined?

[08:14] <autrijus> like everything else, in src/Pugs/Prim.hs

[08:14] <autrijus> only it's called Any::new

[08:14] <autrijus> because the relationship was not clarified

[08:14] <luqui> no wonder I couldn't find it

[08:15] <luqui> I'm going to (try to) have it carp when it recieves any positionals

[08:15] <autrijus> arg, I should not have pushed --verbatim

[08:15] <autrijus> now it's all my fault.

[08:15] <luqui> heh

[08:15] <luqui> well it is

[08:15] <luqui> we're just your minions

[08:16] <autrijus> luqui: oh, trivial. line 966 has a _

[08:16] <autrijus> replace it with a "positional" variable

[08:16] <autrijus> check that is always VList [] (or VUndef? not trace it a bit)

[08:16] <autrijus> s/not//

[08:16] <autrijus> you can trace anything with

[08:17] <autrijus> trace (show foo) $ do

[08:17] <autrijus> by its one line in the monad block

[08:17] <autrijus> if you want to fail in there, just

[08:17] <autrijus> fail "hey you passed in positional"

[08:17] <luqui> okay

[08:17] <autrijus> so it's like

[08:18] <autrijus> positionals <- fromVal p

[08:18] <svnbot6> r4994, autrijus++ | * also look at the compile time package.

[08:18] <svnbot6> r4995, autrijus++ | Seemingly fixed some stuff.

[08:18] <autrijus> unless (null positionals) $ fail "blah"

[08:19] <autrijus> with p being the bound positional slurpy array

[08:19] <autrijus> should work, but untested :)

[08:19] <luqui> I'll try

[08:24] <svnbot6> r4996, autrijus++ | Fixed bugs in test program.

[08:24] <svnbot6> r4997, autrijus++ | * remove temp file

[08:24] <svnbot6> r4998, autrijus++ | * switch to the `use perl5:Digest::MD5` form.

[08:36] <mugwump> almost r5000!

[09:09] <mugwump> whee!  r5000!  Do I win a prize?  :D

[09:09] <svnbot6> r4999, iblech++ | Usual svn properties added to 30+ new files :)

[09:09] <svnbot6> r5000, mugwump++ | Add documentation for :depends

[09:09] <svnbot6> r5000, mugwump++ | make Test.pm report unexpected successes

[09:09] <svnbot6> r5000, mugwump++ | support multiple test runs in the same process

[09:18] <svnbot6> r5001, iblech++ | Fixed chomp($str) to not edit $str inplace.

[09:18] <svnbot6> r5001, iblech++ | * Pugs.Prim -- Fixed the implementation of &chomp.

[09:18] <svnbot6> r5001, iblech++ | * examples/, ext/, t/, src/perl6/Prelude/PIR.pm, Makefile.PL -- Test fixes.

[09:18] <svnbot6> r5001, iblech++ | * Added note about chomp's new behaviour to docs/quickref/data.

[09:18] <svnbot6> r5001, iblech++ | Renamed ext/WTemplate/readme to ext/WTemplate/README (consitency).

[09:32] <svnbot6> r5002, iblech++ | * Test.pm -- Unbroke &pass.

[09:32] <svnbot6> r5002, iblech++ | * util/svnlog2graph.pl -- Minor cosmetic fix.

[10:41] <mugwump> hmm, should \( %hash<foo> ) auto-vivify %hash<foo> ?

[10:42] <svnbot6> r5003, iblech++ | unTODOs.

[10:42] <svnbot6> r5004, mugwump++ | Add documentation for :depends

[10:42] <svnbot6> r5004, mugwump++ | make Test.pm report unexpected successes

[10:42] <svnbot6> r5004, mugwump++ | support multiple test runs in the same process

[10:42] <svnbot6> r5005, mugwump++ | Unwanted hash auto-vivification seems to be related to Param.isLValue; adding `is copy' trait solves problem

[10:53] <coral> .

[10:58] <mugwump> ,

[11:13] <svnbot6> r5006, iblech++ | * Added tests for the new relevations:

[11:13] <svnbot6> r5006, iblech++ |   t/var/my.t, t/oo/syntax-but.t, t/oo/roles/instantiation.t, t/oo/precedence.t

[11:13] <svnbot6> r5006, iblech++ | * Prelude, Pugs.Prim -- Updated =$obj to mean $obj.shift instead of $obj.next.

[11:13] <svnbot6> r5006, iblech++ | * Added the usual shebang line to tests lacking it.

[11:14] <elmex> is the ./method() call in the language already?

[11:14] <elmex> would be horrible

[11:19] <masak> a grep for it in the examples/ folder yields only one false positive

[11:20] <masak> examples/pipe_open.p6:my $pugs = (($*OS ~~ any<MSWin32 cygwin msys>) ?? "pugs.exe" :: "./pugs");

[11:20] <masak> but i seem to recall it was once there

[11:38] <svnbot6> r5007, mugwump++ | Taking a ref to a hash slot shouldn't auto-vivify - perhaps this needs Proxy object support

[11:38] <svnbot6> r5007, mugwump++ | Test A06-specified Proxy trait

[11:38] <svnbot6> r5007, mugwump++ | Fix broken test - probable precedence problem

[11:38] <svnbot6> r5007, mugwump++ | un-TODO fixed tests, TODO new broken tests, add test for given { when true { } }

[11:38] <svnbot6> r5007, mugwump++ | removed bad test for op0 'true'

[11:48] <Alias_> seen autrijus?

[11:48] <jabbot> Alias_: autrijus was seen 3 hours 29 minutes 29 seconds ago

[11:48] <Alias_> autrijus: poke?

[11:57] <Boogie> Alias_: I think it's very late / early in America now.

[11:57] <Alias_> sleep is for the genetically inferior

[11:57] <Alias_> I expect more from him

[11:57] <Alias_> :)

[11:58] <Boogie> Yeah, as he is taking his journey, I think he sleeps more than before. :)

[12:00] <Odin-LAP> Sleep is for the non-clinically-depressive. :p

[14:00] <nothingmuch> Alias_: ping

[14:01] * Alias_ blinks

[14:01] <Alias_> nothingmuch := autrijus?

[14:01] <Alias_> oh wait...

[14:01] <Alias_> ping, not pong

[14:01] <Alias_> yes, right

[14:01] <Alias_> nothingmuch: pong

[14:02] <nothingmuch> we're trying to compile perl6 to ppi

[14:02] <nothingmuch> no

[14:02] <nothingmuch> nothingmuc.id ~~ Unique;

[14:02] <nothingmuch> okay

[14:02] <nothingmuch> i'd like to use quasiquoting for this stuff

[14:02] <Alias_> you are doing, heh, what? :)

[14:03] <Alias_> You realise of course, that you are insane :)

[14:03] <Alias_> heh, but continue

[14:03] * Alias_ chuckles

[14:03] <nothingmuch> that is, construct a generic node that is somewhat equivelent to what we are generating

[14:03] <nothingmuch> by parsing some perl 5 code

[14:03] <Alias_> yeah, I get it :)

[14:03] <nothingmuch> okay

[14:03] <nothingmuch> i read some of Tokenizer

[14:03] <nothingmuch> and some node impls

[14:04] <nothingmuch> and I have found no clean way to do this

[14:04] <Alias_> I'm sure you haven't :)

[14:04] <Alias_> the problem is that PPI is based on _syntax_, not function

[14:04] <nothingmuch> that's not what I mean

[14:04] <Alias_> oh, ok

[14:04] <Alias_> continue

[14:05] <nothingmuch> what we want

[14:05] <nothingmuch> given $node {

[14:05] <nothingmuch>     when  PIL::Number {

[14:05] <nothingmuch>         parse("123");

[14:05] <nothingmuch> err, put that into $x;

[14:06] <nothingmuch>         $x.value($_.value);

[14:06] <nothingmuch>         $x;

[14:06] <nothingmuch>     }

[14:06] <nothingmuch> ....

[14:06] <nothingmuch> ofcourse, this is a stupid example, and we have more complex ones

[14:06] <nothingmuch> which are actually simple

[14:07] <Alias_> given? when? remember my Perl 6 is non-practical

[14:07] <nothingmuch> this is my perl 6, using ppi--perl56

[14:07] <nothingmuch> don't worry about it, all I want is to parse some perl statements (not full documents)

[14:08] <Alias_> Perl 5 statements?

[14:08] <Alias_> I'm sorry, I'm not entirely sure of exactly where you are in the entire parsing scheme of things

[14:08] <nothingmuch> yes

[14:09] <nothingmuch> forget the entire scheme ;-)

[14:09] <Alias_> aha!

[14:09] <Alias_> I get it

[14:09] <nothingmuch> my $expr = parse_something_small("10");

[14:09] <nothingmuch> $expr.value; # 10

[14:09] <nothingmuch> $expr.ref; # PPI::Token::Number

[14:09] <nothingmuch> err, not value, content

[14:10] <Alias_> PPI would still see that as Document(Statement(Token(10)))

[14:10] <nothingmuch> $expr.{content} = $my_other_number;

[14:10] <nothingmuch> right, i know

[14:10] <nothingmuch> which is why i'd like to ask: is there a way to get tokenizing to work only on the statement level?

[14:10] <Alias_> hrm...

[14:10] <Alias_> not very easily

[14:10] <Alias_> because statements still always happen in a context

[14:11] <nothingmuch> assume void

[14:11] <nothingmuch> assume scalar

[14:11] <nothingmuch> assume I know it or will provide it

[14:11] <Alias_> I mean a syntactic parsing context

[14:11] <nothingmuch> oh, you don't need any

[14:11] <nothingmuch> this is independenant

[14:11] <nothingmuch> perl -e '10'; # full program

[14:12] <Alias_> right, so Document(Statement(Token(10)))

[14:12] <Alias_> :)

[14:12] <nothingmuch> it's my job to make sure the snippets make sense

[14:12] <nothingmuch> right

[14:12] <Alias_> It still exists syntactically

[14:12] <nothingmuch> what about 'perl -e '5; 10; 20;'

[14:12] <nothingmuch> nevermind, i'll deal, i'm not stupid

[14:13] <Alias_> Document(Statement(Token(5)Token(;))Token(' ')Statment, etc

[14:13] <Alias_> Have you use PPI::Dumper?

[14:13] <Alias_> That will dump out a syntax tree for an arbitrary chunk of source

[14:13] <Alias_> Are you trying to assemble your own tree manually?

[14:13] <nothingmuch> but poking in the source code I still can't figure out some stuff

[14:13] <nothingmuch> interface wise

[14:13] <Alias_> from scratch?

[14:13] <nothingmuch> $t.{content} = 10;

[14:13] <nothingmuch> that's irrelevant, I know the structure

[14:13] <nothingmuch> what I'm trying to avoid is this:

[14:13] <nothingmuch> and then shove that into a statement

[14:13] <nothingmuch> PPI::Token::Number.new;

[14:13] <Alias_> ok

[14:14] <nothingmuch> yes

[14:14] <nothingmuch> what I'd like to do is not construct a dom, which i can

[14:14] <nothingmuch> that's tedious, and not very readable

[14:14] <nothingmuch> but everybody knows the string representation of that ;-)

[14:14] <nothingmuch> and reading the tokenizer code (not thoroughly), i don't really know what to do

[14:16] <Alias_> I don't understand "what I'd like to do is not construct a dom, which i can"

[14:16] <nothingmuch> i don'

[14:16] <nothingmuch> t want to say ".new; .{content} = " and then put nodes in nodes in nodes

[14:16] <nothingmuch> the tokenizer and lexer can do that for me

[14:16] <nothingmuch> that's what they're good for

[14:16] <Alias_> ok

[14:16] <nothingmuch> i'm good for writing languages that work well for humans

[14:16] <nothingmuch> like perl5

[14:17] <Alias_> So you can generate chunks of raw perl 5 source, from the Perl 6 AST?

[14:17] <nothingmuch> i'd like to write perl5 snippets

[14:17] <Alias_> ah, gotcha

[14:17] <Alias_> ok, and then generate what?

[14:17] <nothingmuch> ah!, but i want to go further

[14:17] <nothingmuch> i could just generate strings, and print that out

[14:17] <Alias_> ok

[14:17] <nothingmuch> but I don't want to, because the PDOM is easier to transform

[14:17] <nothingmuch> so I want to write snippets

[14:17] <nothingmuch> to get a mini dom out of them

[14:17] <Alias_> and turn the snippits into.. 

[14:18] <Alias_> single statements?

[14:18] <Alias_> or fragments...

[14:18] <nothingmuch> to transform the snippet DOMs

[14:18] <nothingmuch> so they contian real data, and not just empty stuff

[14:18] <nothingmuch> construct a full document

[14:18] <nothingmuch> and then call .save on it

[14:18] <Alias_> The Tokenizer produces a stream of tokens

[14:18] <Alias_> that's all

[14:19] <nothingmuch> lexer

[14:19] <Alias_> The lexer assembles them into a tree

[14:19] <nothingmuch> yeah, i realized i was calling them both the tokenizer at some point

[14:19] <Alias_> hrm

[14:20] <Alias_> So you want to make template tree fragments, and than inject real values

[14:20] <nothingmuch> yep

[14:20] <Alias_> then

[14:20] <Alias_> ok

[14:20] <Alias_> So PPI::Document->new( 'sample source' );

[14:20] <Alias_> suck out the only statement in it

[14:21] <nothingmuch> fair enough

[14:23] <Alias_> It would be very very difficult to actually wire yourself into the lexer or tokenizer

[14:23] <Alias_> esp the tokenizer :)

[14:24] <Alias_> as long as you consider each snippit to be a legal and discrete syntactic chunk, just making a document for each one is far and away superior

[14:24] <Alias_> suck out the statements, and then weld them together with newline whitespace tokens

[14:37] <pdcawley> Arternoon all.

[14:38] <broquaint> Hey, pdcawley. Nice summary btw.

[14:38] <pdcawley> Thanks.

[14:39] <pdcawley> It's always hard to do summaries during summer 'cos so much is happening at conferences. Especially with the hackathons.

[14:39] <pdcawley> It's like irc, but more so.

[14:40] <Juerd> pdcawley: I'd think it'd be easier, with the hackathons summarized by autrijus

[14:40] <pdcawley> Just reading Autrijus's summary, and it sounds like there's enough in place that I can start writing a debugger.

[14:40] <pdcawley> At the very least 'trace' should be trivial.

[14:41] <pdcawley> Juerd: There is that.

[14:41] <pdcawley> It's just I feel kind of 'out of the loop'. And I can't afford to just go to the conferences and take part in the hackathons. With the mailing list it's 'all' there.

[14:43] <pdcawley> Hmm... thinking about that 'trace' thing again, not as trivial as I thought because of context propagation...

[14:43] <pdcawley> (At least if I want to catch the return values)

[14:45] <pdcawley> $_ = some_func() but context(&?CALLER_CONTINUATION)

[14:51] *** Maddingue__ is now known as Maddingue

[15:39] <pdcawley_> Reminder needed. How do I get pugs to run with the parrot back end?

[15:59] <wilx> PUGS_EMBED="parrot" iirc

[16:11] <Juerd> pdcawley: pugs -CPIR, and it requires that it be compiled with parrot embedding, as wilx indicates

[16:18] <Limbic_Region> am I the only Pugs is blowing up building for on Win32?

[16:35] <brentdax> I suppose the fact that every single test complains about a "strange object" means that Pugs doesn't work on AMD64.

[16:41] <castaway_> it should if ghc does..

[16:42] *** castaway_ is now known as castaway

[16:43] <Limbic_Region> anyone out there have current Pugs working on Win32?

[17:12] <brentdax> I think AMD64 GHC is experimental.

[17:28] <svnbot6> r5008, iblech++ | Syntax but ($obj but {...}).

[17:28] <svnbot6> r5008, iblech++ | * t/oo/syntax-but.t -- Fixed test.

[17:28] <svnbot6> r5008, iblech++ | * Prelude           -- Added Pugs::Internals helper sub.

[17:28] <svnbot6> r5008, iblech++ | * Pugs.Eval         -- Implemented syntax but in the interpreter core...

[17:28] <svnbot6> r5008, iblech++ | * Pugs.Compile      -- ...and in the compiler part of Pugs.

[17:36] <wilx> but?

[17:36] <iblech> wilx: my $obj = SomeClass.new but { .property1 = value1; .property2 = value2 }; say $obj.property1; # value1

[17:37] <wilx> Huh, weird keyword :

[17:37] <wilx> :)

[17:38] <iblech> I like it :)

[17:45] <Juerd> Don't we have .new( property1 => value1, ... ) anymore?

[17:46] <iblech> That works too, I think

[17:47] <iblech> TIMTOWTDI++

[17:58] <svnbot6> r5009, iblech++ | * t/oo/class/basic.t -- Added test for inlined "is" declaration.

[17:58] <svnbot6> r5009, iblech++ | * Pugs.Parser -- Hack to make "is eval(...), ..." parse again.

[18:03] <svnbot6> r5010, iblech++ | Merged t/unspecced/monkey_but.t's comments into t/oo/syntax-but.t.

[18:04] <Alias_> seen chromatic?

[18:04] <jabbot> Alias_: chromatic was seen 6 days 18 hours 20 minutes 28 seconds ago

[18:51] <Shillo> Hello, all!

[19:55] <nothingmuch> autrijus: if you guys are done with the cabal meeting, I need some PIL help

[19:55] <nothingmuch> i think i've been improvising a bit too far

[19:56] <nothingmuch> and I mostly would like luqui's opinion

[19:57] <Alias_> heh

[19:58] <Alias_> you can never find a cabal when you need one

[19:58] <Nelasar51840G> hello

[19:59] <Nelasar51840G> Are you a Perl developer, Alias?

[20:00] <nothingmuch> Alias_: i think the perl6 to perl5 code emmitter is working pretty well

[20:00] <Alias_> really? :)

[20:00] <nothingmuch> yup

[20:00] <Alias_> Nelasar51840G, in what sense. I'm more of a CPAN developer ...

[20:00] <nothingmuch> i don't know if it's working yet, but we'

[20:00] <nothingmuch> ll see ;-)

[20:01] <Alias_> Nelasar51840G, I wrote these http://search.cpan.org/~adamk/

[20:01] <Nelasar51840G> I am a Perl 5 programmer, and a CPAN developer myself. I am interested in Perl 6 as well.

[20:01] <Alias_> But if you mean am I working on Perl 6, then no

[20:01] <Nelasar51840G> Ah yes

[20:02] <Nelasar51840G> In my opinion it would be best to write the Perl 6 compiler in a higher level language such as Haskell then Perl 6 itself, this would allow us Perl 6 developers to be able to improve it more easily

[20:03] <Nelasar51840G> C is not an easy language for many to deal with

[20:03] <nothingmuch> Nelasar51840G: what we've been doing in the hackathon might interest you ;-)

[20:03] <nothingmuch> C is completely out of the question, as far as we're concerned

[20:03] <nothingmuch> Allison Randal supports writing a perl 6 compiler in PIR

[20:04] <nothingmuch> and the pugs oriented people are now working on an intermediate language called PIL

[20:04] <nothingmuch> and writing a perl 6 to PIL compiler in perl 6

[20:04] <nothingmuch> as well as some emitters

[20:04] <nothingmuch> in a sense, the pugs parser thingy, and the compiler backends are interchangable across language boundries

[20:05] <nothingmuch> and what I'm working on is the code emitter, that models PIL in perl 5

[20:05] <Nelasar51840G> That sounds very interesting

[20:05] <nothingmuch> it is =)

[20:05] <wolverian> give me my neural cannula already, sheesh

[20:05] <Nelasar51840G> I am glad to hear it

[20:05] <nothingmuch> you're more than welcome to join in, btw

[20:06] <nothingmuch> ;-)

[20:06] <nothingmuch> uh, where would you like that cannula, wolverian?

[20:07] <nothingmuch> Nelasar51840G: have you hacked some pugs?

[20:07] <Nelasar51840G> I would like to help in some way

[20:07] <wolverian> nothingmuch: I don't really care, as long as it lets me think in perl!

[20:07] <Nelasar51840G> I havent, I dont know Haskell, Ive taken a look at the code however

[20:07] * nothingmuch pulls drape around wolverian, and streightens his nurse hat

[20:08] <nothingmuch> Nelasar51840G: you can write tests, and you can look in the ext/ directory of the pugs repo for perl 6 modules

[20:08] <nothingmuch> you can port your CPAN modules to perl 6

[20:08] <nothingmuch> you can try to learn haskell, we have a bunch of tutorial links in the READTHEM file

[20:08] <Nelasar51840G> Porting some CPAN modules ive already done is something I will do

[20:09] <nothingmuch> so what are you waiting for? i can give you commit access, and you can start right now =)_

[20:09] <Khisanth> hmm

[20:10] <Khisanth> nothingmuch: don't you need openfoundry to be up for that?

[20:10] <nothingmuch> it's back up

[20:10] <Khisanth> ah it's back up :)

[20:11] <nothingmuch> Nelasar51840G: come on, you know you want to

[20:11] <nothingmuch> everyone does it

[20:11] <nothingmuch> well, the cool kids, that is

[20:12] <nothingmuch> (none nerdy geeks around here ;-)

[20:13] <Nelasar51840G> Yes, I can help certianly

[20:14] <nothingmuch> okay, i'll need an email ;-)

[20:15] <Nelasar51840G> [email@hidden.address]
[20:16] <nothingmuch> oh wait, the last line didn't sound like a drug pusher line

[20:16] <nothingmuch> anyway, sent

[20:16] <nothingmuch> welcome aboard

[20:17] <nothingmuch> a safe way to start writing perl 6 is to look over the tests

[20:17] <nothingmuch> you can try to see if failing ones are failing because the tests are buggy

[20:17] <nothingmuch> http://pugs.kwiki.org/?SmokedPugs

[20:20] <Nelasar51840G> Thank you, I appreciate it

[20:20] <nothingmuch> thank you too

[20:21] <nothingmuch> anyway, i think i'm going to go back to the conf hotel

[20:22] <whiteg> is the conf hotel with network?

[20:22] <nothingmuch> i don't know

[20:22] <nothingmuch> i hope so

[20:22] <whiteg> hum..me too

[20:23] <whiteg> thank you

[20:23] <nothingmuch> see you there?

[20:24] <whiteg> no, I am at taiwan

[20:26] <nothingmuch> ah

[20:32] <nothingmuch> everyone who is going to YAPC and wants keysigning, please mark yourself here: http://wiki.yapctoronto.org/index.cgi?PGPKeySigningBOF

[20:32] <nothingmuch> geographical diversity is *VERY* good for key signings

[20:52] <nothingmuch> ow!

[20:57] <mugwump> ßËtå§Ç®îþt... now that's ℒℇ℮Ⓣ

[21:00] <nothingmuch> very leet

[21:01] <nothingmuch> port gaal's l33t to give extra points for unicode symbols?

[21:01] <lightstep> was that latin1?

[21:03] <mugwump> well, the signoff looks like all Latin-1 characters.  I cut and paste mine from the Unicode sliderule, pages 21 and 24 which are full of letterlike symbols

[21:04] <mugwump> sburke++

[21:15] <stevan> autrijus: ping

[21:15] * mugwump hijacks stevan's icmp session to say hi

[21:15] <stevan> mugwump: hello 

[21:15] <stevan> how is life down under

[21:16] <mugwump> I see in autrijus' journal you've got a metamodel prototype ... is that on cpan?

[21:16] <stevan> nope

[21:16] <stevan> I am actually refactoring a large chunk of it right now

[21:16] <stevan> it is not really CPAN worthy either

[21:16] <stevan> it is really pretty hackish

[21:16] <stevan> mostly meant to be a proof of concept 

[21:17] <mugwump> ok.  well, it can always be used by the use Foo--perl5;^Wperl5:Foo; support

[21:18] <stevan> yes, I think autrijus had some (crazy) ideas to do something to that effect

[21:18] <stevan> and also maybe to use it for the PIL -> Perl5 compiler luqui is working on

[21:18] <stevan> with nothingmuch 

[21:19] <Alias_> via PPI (I say they are nuts) :)

[21:19] <stevan> me too :)

[21:19] <stevan> Alias_: I think maybe the PPI idea has been abandoned

[21:20] <stevan> although hard to say, the hackathon has now dispersed

[21:20] <mugwump> I've been porting parts of Perldoc to Perl 6, it's been quite good, really - I've been coming across "missing" language features/implementations all the time :)

[21:20] <integral> PPI's lacking something to parse operator precedence

[21:20] <Alias_> I hope so... because going via a syntax parser is ... iffy

[21:20] <stevan> mugwump: yes I aswa that

[21:20] <Alias_> integral: Yes, that was the entire point...

[21:20] <Alias_> in order to do that, you also need to know which param goes with which sub

[21:20] <Alias_> which is impossible

[21:21] <stevan> personally I think nothingmuch's FORTH version will be the best approach :P

[21:21] * Alias_ shrugs

[21:21] <integral> Alias_: unless you're a perl compiler/interpreter...

[21:21] <nothingmuch> shutup

[21:21] <Alias_> I understand a fucking think you guys are doing. I don't even know the acronyms :)

[21:21] <nothingmuch> i'll see you guys soon

[21:22] <stevan> nothingmuch: where are you now? 

[21:24] <nothingmuch> i'm at my friends' house

[21:24] <nothingmuch> i'll be leaving as soon as I have a sandwich

[21:24] <nothingmuch> and see you at 89

[21:24] <nothingmuch> can't talk much, the kids are playing with my computer

[21:25] <stevan> ok

[21:25] <stevan> seen: autrijus 

[21:25] <stevan> seen? autrijus 

[21:26] <mugwump> jabbot: seen autrijus ?

[21:26] <jabbot> mugwump: autrijus was seen 13 hours 6 minutes 54 seconds ago

[21:26] <stevan> mugwump: thanks :) lack of sleep is starting to catch up with me

[21:44] <mugwump> so.  I negotiated my employment contract with my new employer on Thursday.

[21:44] <mugwump> I told him about what happened for YAPC::Taipei

[21:45] <mugwump> I told him that I paid for the flights, took time off, and was happy when I called from Hualien to ask for another week off there and got it granted

[21:46] <mugwump> But when I got back, I was told exactly how far into arrears my leave account balance was

[21:46] <mugwump> ...ie, that I'd not get any more leave until Christmas...

[21:47] <mugwump> And my new employer says, "Alright, how about this...

[21:47] <mugwump> The days you're at the conference, you don't have to take those as leave.

[21:47] <mugwump> The day's you're in transit, you don't have to count those either.

[21:47] <mugwump> s/'// :-}

[21:48] <mugwump> The days that you're working on hackathons, sure we'll pay you for those too.

[21:48] <mugwump> Oh, and we'll pay for your flights, too."

[21:49] <pdcawley> mugwump: Result!

[21:51] <mugwump> fuckin' aye!

[22:25] <pdcawley> Friend of mine back in fat times once almost got a (new) employer to pony up for a $1000 sushi bill at LISA...

[22:25] <pdcawley> It was only when he confessed that everyone had paid their share that they realised he was only after a cut of it...

[22:28] <mugwump> those were the days alright.  We're definitely back on the upturn, but that initial high may never come back

[22:28] <pdcawley> God, but the fat times were stupid.

[22:29] <pdcawley> And we knew it.

[22:31] <mugwump> I didn't.

[22:31] <mugwump> This is why I went from earning £48/hr at JP Morgan to £5/hr under the table at "Tony's Hemp Corner" in King's Cross overnight

[22:32] <pdcawley> Yeah. 

[22:32] <pdcawley> Um... who are you under that pseudonym?

[22:33] <mugwump> Sam I am

[22:34] <pdcawley> Vilain?

[22:35] <mugwump> That's me.

[22:35] <pdcawley> Ah. Hi.

[22:36] <mugwump> So what are you up to these days Piers?

[22:36] <pdcawley> Unemployed in Gateshead. About to take some teaching assistant work (I hope).

[22:37] <mugwump> Gateshead!  Thass wha' me birth certificate sez, liike.

[22:37] <pdcawley> Why aye!

[22:38] <pdcawley> Who you working for now?

[22:38] <mugwump> data mining outfit ... www.bnz.marketview.co.nz

[22:39] <pdcawley> in nz?

[22:39] <mugwump> yep.  I'm back in Wellington

[22:39] <pdcawley> Coo. enjoying it?

[22:39] <mugwump> Refer previous mention of "new employer" ;)

[22:39] <pdcawley> NZ's one of those places that's on my list of 'places to go' and was there before I saw LOTR. Point.

[22:40] <pdcawley> Dad was over there earlier in the year with a bunch of vintage car nuts.

[22:42] <mugwump> "vintage cars" here?  I thought in NZ a vintage car meant a Kingswood or a mini

[22:42] <pdcawley> The shipped their Frazer-Nashes over.

[22:44] * mugwump solves his lack of vintage car knowledge with google

[22:44] <pdcawley> Heh.

[22:45] <pdcawley> Vintage car: pre 1929 sportscar.

[22:45] <mugwump> actually I've been using Wikipedia for general searches like that increasingly recently.  There's an entry for Frazer Nash

[22:46] <mugwump> it's like a Hitch Hiker's Guide

[22:46] <pdcawley> Hmm... I shall point dad at that. Being a trivia nut he can probably help correct it :)

[22:47] <mugwump> yes!  Wikipedia is Foundation!

[22:52] * mugwump notes that Secondary teachers and University Lecturers are listed on the "Long Term Skill Shortage List" at http://www.immigration.govt.nz/migrant/stream/work/worktemporarily/whatopportunities/

[22:55] <pdcawley> Yeah. But my wife's not really up for the move.

[22:55] <pdcawley> What with the grandson living 300 yards away.

[22:56] <pdcawley> And the being over 50. And the diabetes and asthma...

[23:00] <mugwump> And I guess the pressure to make "The Great Escape" is much less outside of the Greater London fallout area ;)

[23:08] <pdcawley> cept there's work for programmers in London. Not found any here.

[23:15] <mugwump> still, teaching can't be all that bad.  Low wages, but huge karma payout if you can really inspire people.

[23:17] <pdcawley> Got to stick to it first. Hence the Teaching Assistant work -- I need more classroom time before I really start to teach.

[23:47] <cognominal> what PDD/MAD_SKILLS refers too in autrijus journal?

[23:48] <Alias_> Layy Wall's conversion of the Perl 5 parser to make it generate Perl 6 code, with comments and such intact

[23:48] <Alias_> Larry

[23:49] <cognominal> The Perl5 project is turning is some sort of global dynamic Rosetta Stone

[23:50] <cognominal> s/5/6/

[23:56] <Alias_> That was kind of the point...

[23:56] <Alias_> one VM to rule them all...

[23:56] <Alias_> Perl/Python/PHP/Ruby all sharing each other's libraries, etc etc

[23:56] <Alias_> Haskell, in light of their contributions, may play too :)

