[00:11] <mugwump> ?eval all((1...).map:{$_*2 - 1})

[00:11] <mugwump> muhahaha!

[00:11] <evalbot6> pugs: out of memory (requested 1048576 bytes) 

[00:14] * acme hugs evalbot6 

[00:24] <geoffb> & # time for dinner, methinks

[02:35] <svnbot6> r5792, fglock++ | * implemented iterator() in Span/Recurrence/Set-Infinite, added a few tests

[03:04] <coral> ?eval <1...>.pick

[03:04] <evalbot6> Error: pick not defined: VStr "1..." 

[03:04] <coral> ?eval <1..100>.pick

[03:04] <evalbot6> Error: pick not defined: VStr "1..100" 

[03:22] <geoffb> ?eval 1..100.pick

[03:22] <evalbot6> Error: pick not defined: VInt 100 

[03:22] <geoffb> ?eval (1..100).pick

[03:22] <evalbot6> 20 

[03:22] <geoffb> ?eval (1..100).pick

[03:22] <evalbot6> 17 

[03:22] <geoffb> Man, I am just loving forth . . . .

[03:23] <geoffb> at least, as much as I've gotten to in the tutorials so far

[03:23] <geoffb> Reminds me of my old assembly language days

[03:35] <svnbot6> r5793, Stevan++ | Perl6::MetaModel - (p5 version) fixing up a few little things

[03:38] <geoffb> stevan, don't remember if I asked you this already, but:

[03:39] <geoffb> Have you gotten to the point in the MMs that remaining significant changes will be due to @larry doing stuff to the language?

[03:46] <ingy> seen autrijus

[03:46] <jabbot> ingy: autrijus was seen 2 days 8 hours 4 minutes 34 seconds ago

[03:52] <stevan> geoffb: no, there is still some stuff to do, namely roles attributes

[03:52] <stevan> geoffb: currently roles only support methods

[03:53] <geoffb> k

[03:54] <geoffb> thx for the update, stevan 

[03:55] <stevan> geoffb: I am sure there are other missing peices too, I have to re-read AES12 again

[03:56] <geoffb> fair enough

[03:56] <geoffb> clearly forth is making sense to me, since I am finding bugs in the sample code in the tutorials . . . :-)

[03:56] <stevan> but the basic structure is there :)

[03:57] <geoffb> stevan++ # many days of hard work

[03:58] <stevan> geoffb: thanks :)

[03:58] <svnbot6> r5794, Stevan++ | Perl6::Code - 

[03:58] <svnbot6> r5794, Stevan++ | * named subs work (recursive too)

[03:58] <svnbot6> r5794, Stevan++ | * named multi-subs work (also recursive)

[03:58] <svnbot6> r5794, Stevan++ |     - NOTE: these are using very primative MMD based on the number of args

[05:08] <geoffb> wheee, jforth tutorial chapters down, starting on pforth tutorials

[05:11] <geoffb> Well, that was quick -- the pforth tutorial appears to be a subset of the jforth tutorial . . .

[05:13] <coral> heh

[05:17] <ingy> hi stevan 

[05:17] <Khisanth> mm assembly

[05:20] <geoffb> Khisanth, oh yeah

[05:32] <geoffb> wee, fun sidetrack into color forth; on to Forth Meta Compilation

[05:33] <geoffb> .oO( I will traverse the forth branch and pop back to harrorth soon, I swear ... er, to myself, I guess )

[06:19] <Daniel_Nee> Dear Autrijus: I'm waiting for you at S-Team's office, thanks.

[06:20] <geoffb> seen autrijus 

[06:20] <jabbot> geoffb: autrijus was seen 2 days 10 hours 39 minutes 8 seconds ago

[06:32] <svnbot6> r5795, masak++ | Minor spelling fix in ext/Set-Infinite/ChangeLog

[06:56] <Daniel_Nee> Dear Autrijus: We are supposed to work on the nanshan RDS project in Monday afternoon and I'm waiting for you at S-Team's office now, thanks a lot.

[07:03] <szabgab> hi nothingmuch

[07:05] <geoffb> haskell tutorials down, forth tutorials down, chapter 2 of harrorth down, and now . . . 

[07:05] * geoffb is going down for a nice long sleep.

[07:06] <geoffb> & # sweet, sweet slumber

[07:39] <Darren_Duncan> seen autrijus

[07:39] <jabbot> Darren_Duncan: autrijus was seen 2 days 11 hours 58 minutes 2 seconds ago

[07:40] <Darren_Duncan> I noticed he hadn't updated his journal in 5 days ... perhaps nothing interesting going on?

[07:40] <Darren_Duncan> anyway, good night

[10:30] <dada> ?eval [>>+<<] (1,2,3);

[10:30] <evalbot6> Error: Hyper OP only works on lists 

[10:30] <dada> ?eval >[+]< (1,2,3);

[10:30] <evalbot6> Error:  unexpected ">" expecting program 

[10:31] <dada> ?eval >>[+]<< (1,2,3);

[10:31] <evalbot6> Error:  unexpected ">" expecting program 

[10:31] * dada doesn't recall the syntax for the reduce meta-op

[10:34] <dada> ?eval [>+<] (1,2,3);

[10:34] <evalbot6> Error:  unexpected "[" expecting program 

[10:34] <dada> ?eval [+] (1,2,3);

[10:34] <evalbot6> 6 

[10:34] <dada> oh, that was simple

[10:35] <dada> ?eval [+] (1,2,3,4,5);

[10:35] <evalbot6> 15 

[10:38] <dada> ?eval [,] (1,2,3);

[10:38] <evalbot6> (1, 2, 3) 

[10:38] <dada> ?eval [,] (1,2,3,4,5);

[10:38] <evalbot6> (1, 2, 3, 4, 5) 

[10:39] <dada> ?eval reduce( { $^1 + $^2 }, (1,2,3));

[10:39] <evalbot6> 6 

[10:39] <dada> ?eval reduce( { $^1 , $^2 }, (1,2,3));

[10:39] <evalbot6> ([\1, \2], \3) 

[10:40] <dada> ?eval reduce( { ($^1 , $^2) }, (1,2,3));

[10:40] <evalbot6> ([\1, \2], \3) 

[10:46] <dada> ?eval reduce { [,] ($^1+1, $^2+1) }, (1,2,3);

[10:46] <evalbot6> (3.0, 4) 

[10:48] <dada> ?eval reduce { ($^1+1, $^2+1) }, (1,2,3);

[10:48] <evalbot6> (3.0, 4) 

[10:49] <dada> ?eval reduce { ($^1+1, $^2) }, (1,2,3);

[10:49] <evalbot6> (3.0, \3) 

[10:49] <dada> ?eval reduce { ($^1, $^2+1) }, (1,2,3);

[10:49] <evalbot6> ([\1, 3], 4) 

[10:49] <dada> ?eval map { $_+1 } (1,2,3);

[10:49] <evalbot6> (2, 3, 4) 

[10:53] <dada> ok, question for the functional warriors out there: is it possible to define "map" using "reduce"?

[12:35] *** sbkhh is now known as Odin-

[12:54] <svnbot6> r5796, iblech++ | * Usual svn properties.

[12:54] <svnbot6> r5796, iblech++ | * PIL2JS:

[12:54] <svnbot6> r5796, iblech++ |   * Fixed %hash.delete(...).

[12:54] <svnbot6> r5796, iblech++ |   * Fixed handling of arrays where some elems were .delete()d.

[12:54] <svnbot6> r5796, iblech++ |   * Added support for numification and stringification of hashes.

[12:54] <svnbot6> r5796, iblech++ |   * New builtins: &key, &value, &keys, &values, &kv, &pairs (but &pairs doesn't

[12:54] <svnbot6> r5796, iblech++ |     work yet correctly, will investigate).

[12:54] <svnbot6> r5796, iblech++ |   * Unbroke &postcircumfix:<{ }> for hashes.

[12:54] <svnbot6> r5796, iblech++ |   * @a["23"] works now (i.e., it means @a[23]).

[13:00] <svnbot6> r5797, philcrow++ | Added Newton.pm to algorithms examples to show off Currying and

[13:00] <svnbot6> r5797, philcrow++ | parameter defaults.

[13:26] *** joepurl_ is now known as joepurl

[13:47] *** viirya_ is now known as viirya

[14:05] <Limbic_Region> http://perlmonks.org/index.pl?node_id=477815 # Perl6 MetaModel question 

[14:06] <Limbic_Region> seen stvn

[14:06] <jabbot> Limbic_Region: I havn't seen stvn, Limbic_Region

[14:06] <Limbic_Region> seen stevan

[14:06] <jabbot> Limbic_Region: stevan was seen 10 hours 7 minutes 56 seconds ago

[14:10] <stevan> hola Limbic_Region 

[14:11] <svnbot6> r5798, Stevan++ | Perl6::MetaModel (p5 verison)

[14:11] <svnbot6> r5798, Stevan++ | * added 'build' traits to attributes (has $answer = 42)

[14:11] <svnbot6> r5798, Stevan++ |     - added test file for this

[14:11] <svnbot6> r5798, Stevan++ | * added the CALLONE and CALLALL methods (desugared $obj.?meth(@args), $obj.+meth(@args) and $obj.*meth(@args))

[14:11] <svnbot6> r5798, Stevan++ |     - added tests for these 

[14:11] <Limbic_Region> speak of the devil

[14:11] <Limbic_Region> stevan ping

[14:12] <stevan> Limbic_Region: thanks for the heads up :)

[16:38] <masak> what's the best way to help if you're eager for bugs (for which there are already failing tests) to be resolved? :)

[16:54] <Aankhen``> Learn Haskell and fix them.

[16:54] <Khisanth> heh

[16:54] <Aankhen``> # which I have not yet tackled myself :-\

[16:54] <Aankhen``> Or perhaps bribe autrijus. =)

[16:54] <ingy> stevan: are you going to oscon?

[16:55] <Limbic_Region> August 1st is right around the corner :-(

[16:55] <Khisanth> Aankhen``: s/bribe/sponsor/ :)

[16:55] <Khisanth> kinda the same but not quite :)

[16:56] <ingy> for that matter, does anyone know which lamdacamels are attending oscon?

[16:56] <Khisanth> but learning Haskell would be good anyway

[16:56] * masak is darn close to learning haskell just to fix his bugs

[16:57] <Khisanth> DO IT! :)

[16:57] <Khisanth> s/^/JUST /

[16:57] * masak hides in a corner, studying haskell

[16:58] * ingy just realizes that unordered lists are really ordered after all...

[16:58] <Khisanth> significant whitespace doesn't seem so bad with Haskell mode in emacs

[16:59] <masak> is there any way to run perl cgi without a server?

[16:59] <QtPlatypus> You can sort of do it from the command line.

[17:00] <masak> QtPlatypus: sounds good. go on.

[17:00] <Khisanth> also plenty of HTTPD modules :)

[17:00] <masak> sounds not-so-good :)

[17:01] <Khisanth> what are you trying to do?

[17:02] <masak> i'm trying to set up a perlnomic sandbox

[17:02] <Khisanth> you could run any CGI program from the command line, it's just that the output will be going to stdout

[17:02] <masak> hm, maybe that's all i need

[17:03] <masak> i can always redirect to file

[17:03] <stevan> ingy: no I am not going to OSCON, YAPC was my only conference this year

[17:03] <Khisanth> of course if you are using cookies and other things, it's probably not the way to go

[17:04] <masak> i don't think i am

[17:05] <masak> however, i am using url parameters sometimes

[17:09] <masak> hm... running from command line works

[17:11] <masak> is there an easy way to send parameters into the cgi script from the command line?

[17:11] <masak> (i realise that there may be more appropriate fora for such a question)

[17:11] <Khisanth> that depends ... is it use CGI.pm?

[17:11] <masak> yes

[17:12] <Khisanth> you could supply it on the command line as well

[17:12] <masak> really? how?

[17:12] <Khisanth> ./foo foo=bar

[17:12] <Khisanth> it used to tell you how when you ran it on the command line :/

[17:13] <masak> Khisanth: it works! thanks! Khisanth++

[17:13] <masak> CGI.pm++

[17:15] <geoffb> ingy, I will be going to OSCON.

[17:15] <geoffb> masak, funny, I'm learning haskell precisely because I have the same issue (bugs that are, well, bugging me)

[17:17] <Khisanth> masak: what bug are you trying to fix?

[17:46] <stevan> geoffb: interested in doing a Haskell port of the MetaModel?

[17:47] <stevan> it would be an excellent learning tool :)

[17:49] <masak> Khisanth, two right now

[17:50] <geoffb> stevan, good point -- let me get through harrorth, then I can consider that.

[17:50] <geoffb> :-)

[17:50] <stevan> geoffb: ok

[17:50] <masak> the first is a junction bug (t/junction/array_deref.t) which prevents me from tidying up examples/games/tic_tac_toe.p6

[17:52] <masak> the second is a constructor initialized member shifting bug (t/pugsbugs/attribute_list.t) that puts wizard.p6 in its infinite loop

[17:52] <masak> clearly, i'm into pugs because of the games :)

[17:52] <geoffb> :-)

[17:53] * geoffb is as well -- because he wants sdl_perl working well under pugs

[17:55] <masak> geoffb: we both have the same itch (bugs), path (harrorth) and goal (fixing pugs)... i feel a bit less alone in the world :)

[17:55] <geoffb> :-)

[17:55] <geoffb> ditto

[17:56] <masak> geoffb: haskell is some kind of logician's voodoo, isn't it?

[17:57] <masak> i think i grok the easy parts

[17:57] <geoffb> masak, I think so . . . I will say this -- it really seems to be grinding too hard on that axe

[17:57] <geoffb> masak, ditto

[17:57] <masak> pattern matching, currying, all that stuff

[17:57] <masak> but i still tense up as soon as someone mentions monads

[17:58] <geoffb> And . . . this just clarified in my mind now . . . I feel way too much of that C++ "you think you're just adding two things, but really you've just initiated several billion steps behind the scenes" issue

[17:58] <masak> i don't know why, but passing the world around as a parameter scares the heck out of me

[17:59] <geoffb> heh

[18:00] <masak> maybe i should just try using monads in a meaningful, practical way

[18:00] <masak> and see who masters whom :)

[18:00] <geoffb> The part that scares me is knowing so much is being carried around, but never changed (only operated on) -- the GC must be hell

[18:00] <geoffb> heh

[18:01] <masak> yes, no wonder gc and functional programming go hand in hand

[18:02] <masak> fp is both more logical than imperative programming, and further removed from common sense -- it's strange

[18:03] <geoffb> :-)

[18:03] <masak> i actually tried to fix a pugsbug a while back

[18:03] <masak> it looked like an easy one

[18:04] <Odin-> Strict logic is usually very far from common sense.

[18:04] <Odin-> :>

[18:04] <masak> but changing the source code only yielded typing errors from ghc

[18:04] <masak> good thing there's svn revert

[18:04] <masak> :)

[18:04] * geoffb just translated a perl5 one-liner into forth

[18:04] <masak> Odin-: seems so

[18:04] <geoffb> I feel all code-studly now

[18:05] <masak> geoffb++ # for speaking forth

[18:05] <Khisanth> geoffb: how many line of forth?

[18:05] <geoffb> forth++ # for just being fun

[18:05] <Odin-> Which is why Perl sometimes irritates functional folks ... Perl has traditionally put the focus on common sense, ignoring the "real" logic... :p

[18:05] <geoffb> Khisanth, the core is two words and three variables

[18:06] <Khisanth> forth seems stranger than Haskell by several magnitudes :)

[18:06] <masak> Odin-: which is why perl6 is such an interesting combination

[18:06] <geoffb> I had several debugging words to help while I figured out why it was broken at first

[18:07] <geoffb> Khisanth, depends on where you came from.  For me, it makes MUCH more sense than haskell

[18:07] <masak> for me too

[18:07] <Odin-> masak: Yeah, although I'd argue it remains closer to its tradition than functionality...

[18:07] <geoffb> nothingmuch++ # harrorth forcing everyone to expand their horizons/mind

[18:08] <Odin-> (Now, THAT was a nicely ambiguous sentence. :)

[18:08] <Khisanth> haskell makes sense, just need to get the syntax down :)

[18:08] <masak> Odin-: that's the beauty. perl6, akin to the borg, looks at fp and sucks up the good parts

[18:09] <masak> Khisanth: then i look forward to the day when i get haskell syntax down :)

[18:09] <geoffb> Without telling me that an array can't contain both a char and an int, dammit.

[18:09] <Khisanth> geoffb: what language? :)

[18:10] <geoffb> Khisanth, I meant -- P6 doesn't enforce the limitations (that I don't like) that haskell does

[18:10] <masak> geoffb: haskell needs those limitations, for strictness

[18:10] <masak> it's part of its game

[18:10] <Khisanth> well most languages do :)

[18:10] * geoffb is somewhat biased about type theory -- all I want it for is to get the compiler to do optimization for me.  The rest, I don't want.

[18:11] <Khisanth> an array of tuples! :)

[18:11] <masak> not many languages do as much typing as haskell

[18:11] <geoffb> Khisanth, I tried that -- hugs complained that the tuples were not all the same type.  :-)

[18:11] <masak> :)

[18:12] <masak> same problem, one level down. neat

[18:12] <Khisanth> geoffb: perhaps we are not thinking of the same thing :)

[18:12] <Khisanth> I was thinking of what would be an array of structs/unions in C :)

[18:13] <geoffb> Khisanth, that wouldn't be too surprising, given that I've been reading haskell for all of about half a week

[18:13] <Khisanth> geoffb: I have been reading much less :)

[18:13] <Khisanth> perhpas there is some limitation I didn't get to yet

[18:14] <Khisanth> geoffb: however, one of the first few YAHT exercises dealt with that 

[18:15] <geoffb> Well, I thought about using tuples with a lot of entries, to act as a union, but tuples are fixed length (and all tuples within the list have to have the same length) -- which means that if you want to be able to store any type in the list, you start writing functions that take a list of tuples of length n and producing a list of tuples of length n + 1 -- and pretty soon you start hitting the wall that many library functions are d

[18:15] <geoffb> efined only for short tuples

[18:16] <geoffb> Ah, YAHT is the one HT on the list that I haven't read through -- I needed a break after the first three or four haskell tutorials.

[18:17] <geoffb> & # life calls

[18:19] <masak> geoffb: say hello to life from me

[19:13] <geoffb> masak, heh

[19:17] <cognominal> seen autrijus?

[19:17] <jabbot> cognominal: autrijus was seen 2 days 23 hours 36 minutes 28 seconds ago

[19:18] <cognominal> I became addicted to his journal...

[19:56] <brentdax> Do Perl 6 regexen support escape sequences yet?  Because I tried to s{\t}{foo} and it applied the rule to 't's.

[19:58] <PerlJam> brentdax: yes, but AFAIK, PGE only supports \d, \D, \w, \W, \s, \S, \n and \N

[19:58] <PerlJam> you could easily hack it to support \t and \T though

[19:59] <brentdax> What file would I need to edit for that?  Wouldn't mind getting away from my own software for an hour or two.

[19:59] <PerlJam> brentdax: probably compilers/pge/PGE/P6Rule.pir

[19:59] <PerlJam> one of the files in that dir anyway

[19:59] <brentdax> In Parrot?

[19:59] <PerlJam> aye

[20:00] <brentdax> Alright.  Better update my Parrot first, then...

[20:21] <brentdax> Hmm...all the existing backslash sequences seem to map to character classes, rather than individual characters, and to have specialize opcodes.

[20:22] <Khisanth> but \t you mean tab?

[20:22] <brentdax> Yeah.

[20:22] <Khisanth> wouldn't this be something to do in pugs not PGE?

[20:22] <brentdax> ...maybe?  I dunno.

[20:23] <PerlJam> Khisanth: he was doing a s///.  In pugs that's handled by either pcre (if you've used :P5) or PGE

[20:23] <PerlJam> unless I'm totally mistaken (it's been a while since I've mucked with it)

[20:24] <Khisanth> hmm is it really wrong to expect things to work like perl5? :)

[20:25] <brentdax> Meh, I'll just put a tab in my editor.

[20:25] <Khisanth> hooray for invisible code :)

[20:25] <brentdax> Indeed.

[20:26] * brentdax emits a cough that sounds suspiciously like the word "python".

[20:26] <Khisanth> PerlJam: so the Perl 6 compiler isn't suppose to know anything about rules?

[20:28] <PerlJam> Khisanth: PGE's jog is to know all about rules.  When we've bootstrapped ourselves out of pugs+PGE land into a real perl6 compiler, it will know about rules.

[20:28] <PerlJam> er ,s/jog/job/

[20:29] <PerlJam> or if autrijus gets it in his head that he can do better than PGE and does.

[20:30] <Khisanth> well ... the reason I ask is because the left side of s/// has had pretty the same features as Perl's double quotes

[20:30] <Khisanth> so that would mean PGE has to know about Perl's strings or perl6 has to know about the rules does it ?

[20:31] <PerlJam> Currently the former by way of parrot ("perl's strings" are really "parrot's strings")

[20:32] <PerlJam> again, if I'm not mistaken

[20:32] <PerlJam> anyway, time for me to go preemptively rescue the wife from invading dinner guests 

[20:32] <Khisanth> oh wait ... I keep forgetting Parrot is suppose to be flexible to the point of being absurd :)

[21:11] <putter> ?eval {x => [3,4]}.perl

[21:11] <evalbot6> '{(\'4\' => undef), (\'x\' => 3)}' 

[21:12] <putter> sigh.

[21:15] <putter> PerlJam: one of my background tasks is to write a rules engine on top of pcre.  the task is not inherently hard (given that not all of rules can be supported), but it's a maze of time eating stuff like the above.  might be working this evening, might not be working for months.  sigh.

[21:17] <masak> putter: that's a weird evalbot6 result

[21:24] <Khisanth> looks like a bug :)

[21:25] <Khisanth> putter: you mean a rules to pcre translator?

[21:25] <putter> :)

[21:25] <putter> yes

[21:26] <Khisanth> Perl6::Rules?

[21:27] <Khisanth> although that isn't pcre :)

[21:27] <putter> I wonder if we need a "state of pugsbugs" periodic summary.  The bug was forseeable from known pugsbugs, but it's been a while since I checked, and I had drifted into assuming the whole nested arrays and hashes mess had been straightened out.

[21:29] <putter> yeah, I also have a mutant P6:R which is slowly being updated to reflect current syntax and semantics.  not very far along.  but perhaps it should be checked in at some point.

[21:30] <putter> basically when one path has gotten too frustrating to pursue, i push on another.

[21:30] <Khisanth> hmm a p6 compiler written in p5? :)

[21:38] <putter> yes... have bits of that too... ;-)  upsides included clean api (working stringification and Filter::Simple), downsides include pain getting some regexps to work (and "work" is perl-version dependent), the non-reentrant re engine (so you end up almost as cripled as with pcre - the reason P6:R isnt being maintained(?)), and ... something else I don't recall at the moment.

[21:40] * putter ponders finding someplace off MANIFEST to drop a load of non-working cruft into vcs... eh.

[21:42] <putter> oh, big upside is you don't lose hours because something... odd... is happening.  I'm quite tempted to do a ruby rules engine for the same reason.

[21:49] * masak thinks a "state of pugsbugs" summary would be a good thing

[21:49] <svnbot6> r5799, putter++ | Extended t/pugsbugs/parsing_hash.t to indicate arrays nested in hash refs also misparse.

[21:49] <putter> ahhh... t/pugsbugs/attribute_hash.t... that's why (something) wasn't working earler...

[21:49] <masak> :)

[21:49] <masak> g'nite, all &

[21:50] <putter> &

[21:53] <putter> ?eval [{1=>2,3=>4}].elems

[21:53] <evalbot6> 2 

[21:54] <putter> I really thought that had gotten fixed.  puzzling.

[21:58] <putter> ah, the pugsbug/ test went away(?), but it's :todo<bug> in t/data_types/mixed_multi_dimensional.t.

[21:58] * putter thinks again that :todo<bug> should be smoked as dark red rather than dark green.

[22:01] <coral> is there a yellow?

[22:01] <gaal> bonus (unexpected success)

[22:01] <gaal> hi

[22:01] <putter> I wonder if one could integrate t/ and the language spec/documentation, ie "literate programming", so the docs change color when something isnt working...

[22:04] <putter> the color scheme seems targeted at "developers" (ie, a bug known is greenish, red and yellow indicate something unexpected is happening), rather than "users" (ie, three little dark green boxes don't exactly scream "don't uses nested hashes and arrays in your data structures!! or you'll be sorrrrryyyyy"). ;)

[22:04] <putter> perhaps we need two color schemes?

[22:04] <putter> hi, gaal

[22:05] <gaal> putter, i like the colored spec idea :)

[22:05] <putter> :)

[22:05] <gaal> there already is some integration

[22:05] <gaal> you know, they link to the specs

[22:05] <putter> right.

[22:06] <gaal> so the thing that mangles the specs can have some smarts implented in it to look for the text around where the actual link is

[22:06] <gaal> but it'll often guess wrong

[22:06] <putter> hmm, so rather than literate programming, one could postprocess the docs by looking groveling over the tests' links.

[22:06] <gaal> which is done already

[22:06] <gaal> look at nothingmuch's smokes, they include docs

[22:07] * putter (really!) goes to look...

[22:07] <Khisanth> hmm so with the appropriate CSS, different sections of the doc could have different colors dependings on status?

[22:08] * Khisanth would hate to read a document in green though

[22:08] <putter> gaal: could you suggest a test which has such docs?

[22:08] <gaal> problems: the link specification mechanism must be lightweight otherwise people won't use it

[22:09] <putter> Khisanth: :)

[22:09] <gaal> undef.t has a few

[22:09] <gaal> vgrep for L<

[22:09] <gaal> in nm's smokes they show up as actual links

[22:10] <putter> ah, yes, neat.

[22:11] <gaal> as for the specific color scheme, yuval has voiced frustration over everybody having different opinions about this. (as, i guess, co-maintainer) i think welcome patches for alternate css. but i don't know how the actual css alternattion works, so please don't just set *a* different stylesheet.

[22:11] <gaal> s/think/think we would/

[22:13] <gaal> and s/set/send/

[22:13] <Khisanth> hmm but one html document can have multiple CSS :)

[22:13] <gaal> yes, if you rig it. please rig it. :)

[22:13] <Khisanth> it's just a matter of using a browser that lets you set a default!

[22:14] <gaal> wow it is so humid here

[22:14] * gaal looks for the airco remote

[22:14] <putter> actually, I wonder if we really just need some slightly more organized bug bashing.  months ago there was the concept of "trade a test for a patch".  but that was mostly autrijus, and as his focus shifted to the backend, and we all didn't pick up the slack,  that property was lost...

[22:16] <putter> re colors, I've seen sites with a pulldown list selecting the site's css and thus appearance... I'm not sure how it's actually implemented...

[22:18] <gaal> putter: that's indeed a problem, we're reaching the size most people don't know who can fix what or even if something's worth fixing instead of the bug being "refactored away" by a new component

[22:18] <wolverian> <link href="default.css" rel="stylesheet" type="text/css" title="Default" /> <link href="another.css" rel="alternate stylesheet" title="Another" type="text/css" />

[22:19] <wolverian> not all browsers have a UI to change to an alternate stylesheet - some JS can help there.

[22:19] <gaal> so it's still possible to 'claim' bugs but if i want to petition bug X be fixed i may not know who to moose about it.

[22:19] <gaal> maybe we should just remind people to look for bugs to claim. :)

[22:20] <Khisanth> how about just switch to "fix everything you can and have time for" :)

[22:21] <gaal> that's kinda what i was thinking. :)

[22:22] * gaal starts a smoke

[22:22] <putter> wolverian: thanks!  googling turned up http://www.alistapart.com/articles/alternate/

[22:22] <gaal> hmm, there weren't any commits in src/ in a while.

[22:23] <Khisanth> but there is something to be said for a task seeming too daunting and nobody wanting to start :)

[22:23] <wolverian> putter, ALA is nice.

[22:23] <gaal> okay, it's 1:23, looks like time to shower and go to sleep.

[22:24] <putter> re bugs, 

[22:25] <putter> there is also dynamics like... "a few sentences from autrijus on how to approach something can save hours of work".

[22:25] <gaal> which are true :)

[22:26] <putter> we haven't really (I think?) tried to find a social organization/dynamic that has nice properties...

[22:27] <gaal> k, this is me. good night all :)

[22:27] <putter> g'night &

[22:27] <gaal> why, anarchy :)

[22:27] <putter> yes, but part of anachy is folks doing entropy reduction tasks.  this area seems to be ready for one...

[22:27] <putter> :)

[22:28] <gaal> indeed.

[22:28] <gaal> &

[22:28] <putter> &

[22:29] <putter> wolverian: re "ALA is nice", I hadn't seen it before.  adding it to my bloglist.  thanks :)

[22:29] <brentdax> ALA is awesome.

[22:40] <nothingmuch> hola

[22:40] <nothingmuch> shyte, how did that happen

[22:41] * nothingmuch can't paste

[22:42] <nothingmuch> http://nothingmuch.woobling.org/paste.txt

[22:42] <nothingmuch> i tried to reply to allison to see if i know what I'm talking about

[22:42] <nothingmuch> can anyone verify?

[22:48] <putter> re paste.txt, the couple I know without checking look right...

[22:49] * putter wonders how much the planned PIL-related changes will change PIL...

[22:50] * nothingmuch wonders what data structure mutt keeps messages in

[22:50] <nothingmuch> and if it really resorts the whole list when an update to the mailbox happens

[22:50] <putter> ouch.

[22:50] <wolverian> I've had to switch to muttng because mutt doesn't cache the headers at all

[22:50] <wolverian> and it's just painfully slow to open a folder with 5000+ mails in it like that 

[22:51] <wolverian> but that might not actually have anything to do with your issue, now that I reread what you said. sorry. :)

[22:52] <nothingmuch> wolverian: i do too

[22:52] <nothingmuch> i keep it running inside screen

[22:52] <nothingmuch> 30,000 messages

[22:52] <nothingmuch> when I hit 700 i said to myself "i really have to sort all this"

[22:52] <wolverian> hehe.

[22:52] <wolverian> I sort my mailing lists.

[22:52] <wolverian> (I mean, procmail does.)

[22:52] <nothingmuch> then it hit 2000 or so and I was like "oh man, now I'll need a whole 2 hours to sort through all this", so i pushed the deadline a bit more

[22:53] <nothingmuch> my problem is that if i let procmail sort them I don't get around to reading them

[22:53] <nothingmuch> i mark threads as read usually

[22:53] <nothingmuch> if it's a long deathless thread

[22:53] <nothingmuch> or something about a technical issue I don't care about

[22:53] <nothingmuch> i tried deleting threads for a while

[22:53] <nothingmuch> but then I lose context

[22:54] <nothingmuch> I'd like a feature where if i delete a thread, children of that thread are automatically deleted for me, until the thread has been dead for a week

[22:54] <nothingmuch> and then it's completely purged

[22:58] <brentdax> I'd really like a mail client with Gmail-ish labels.  Those things are really far too handy to live without now that I've used them.

[23:00] <brentdax> I keep hoping somebody will write a Thunderbird extension for it.

[23:03] <putter> nothingmuch: fyi, 40 min ago there was a discussion of adding alternate style sheet capability to smoke.  wolverian provided the basic code, and this http://www.alistapart.com/articles/alternate/ reference was found.

[23:03] * nothingmuch wishes he had the time to finish what he started with consolidation

[23:04] <nothingmuch> putter: were any decisive conclusions reached?

[23:04] <putter> gaal solicited a patch to add multi-css capability.

[23:04] <nothingmuch> was a patch made?

[23:05] * nothingmuch reads backlogs instead of harassing putter 

[23:05] <putter> Not yet.  I started exploring, but it looks like I've never actually run smoke...

[23:05] <putter> ;)

[23:07] <putter> It looks like simply breaking out the css into a file and adding "one" line in it's place.  It wont change things for IE users (requires javascript hackery aswell), but that can be a rev 2.

[23:08] <nothingmuch> oh shit

[23:08] <putter> ?

[23:08] <nothingmuch> i hate feature creep

[23:08] <nothingmuch> they are called cascading for a reason

[23:08] <nothingmuch> =(

[23:09] <nothingmuch> this is probably much better handled by overridding on a case by case basis

[23:10] <putter> I don't suggest cascading, but having the css in a separate file, and the files in svn, will allow some exploration of color choice.

[23:10] <wolverian> I think the idea is to just allow users to choose between multiple styles, which this is ideally suited for.

[23:10] <nothingmuch> well, overriding the css is as short as:

[23:10] <nothingmuch> use base qw/Test::TAP::HTMLMatrix/;

[23:10] <nothingmuch> sub css_file { "your path to file.css" };

[23:10] <nothingmuch> blam

[23:11] <wolverian> I define user as the person viewing the report, not the person that creates it

[23:11] <nothingmuch> inline CSS really means "slurp the file and put it in <style> tags"

[23:11] <wolverian> so I'd like a method to change the style inside the browser.

[23:11] <nothingmuch> wolverian: what if we use existing browser features?

[23:11] <nothingmuch> FF can swap css styles when it's provided with several alternatives...

[23:12] <wolverian> that's exactly what I suggested.

[23:12] <nothingmuch> i really don't want to introduce more and more features that have nothing to do with actual reporting

[23:12] <nothingmuch> oh...

[23:12] <nothingmuch> the link discussed javascript and stuff, so i was begining to be scared

[23:12] <wolverian> I also pointed out some browsers can't do it without us providing a JS interface

[23:12] <putter> This was all prompted my realizing I was screwed, having used array refs nested in a hash ref as a datastructure, when the three little dark green boxes in smoke were wispering ("it just doesnt work...").

[23:12] <nothingmuch> okay, so what if we do something simpler:

[23:13] <nothingmuch> we let you generate either an HTML snippet, or a full page

[23:13] <nothingmuch> the full page is what we have now

[23:13] <nothingmuch> and the snippet is just the unstyled table

[23:13] <nothingmuch> and then we can easily create alternatives that don't have the kitchen sink reimplemented in perl 6 compiled to javascript, stored inline in the template ;-)

[23:14] <wolverian> or just do the alternative stylesheet <link> method, and don't care about IE users

[23:14] <nothingmuch> because 95% of the feedback i get for TTH is CSS suggestions, not contributions for code or documentation ;-)

[23:14] <putter> as I developer, i like the current colors' emphasis on expected vs unexpected.  as a user (p6 coder), I want different colors, which scream at me in red when something is buggy, even if it's been known to be buggy for a really long time...

[23:14] <wolverian> frankly, I think that's the most viable alternative.

[23:14] <putter> when I view your smoke, the colors i need depend on why i'm there...

[23:14] <nothingmuch> putter: as a pugs user that causes lots of confusion because lots of the pugs test suite fails =)

[23:14] <nothingmuch> but I agree

[23:15] <nothingmuch> that's why i want to write a smoke server

[23:15] <nothingmuch> where people submit YAMLs

[23:15] <nothingmuch> and users get to generate reports on the fly

[23:18] <putter> re "95% of the feedback", having css in a separate file, which seems plausible idea by itself, would allow you to say "create an alterate .css file in mumble/.  That will solve your immediate need, and if the changes seem to be popular/I like them, I'll add them to the default.css".

[23:18] <nothingmuch> putter: the CSS *is* a separate file

[23:19] <nothingmuch> this is just not the default way the smoke report for 'make smoke' is generated

[23:19] <nothingmuch> so that the user won't have to copy two files around

[23:19] <putter> ah.

[23:19] <nothingmuch> wow, my bugs submitted to Fire have been reviewed

[23:20] <nothingmuch> submitted 2.5 years ago

[23:20] <nothingmuch> i switched to adium because it had proper hebrew support

[23:20] <wolverian> hmm. can you use a rel="alternate stylesheet" attribute on a <style> element? that way we could include everything in one file too

[23:20] <nothingmuch> and now they to fix hebrew in fire =_

[23:20] <wolverian> (admittedly it wastes bandwith..)

[23:20] <nothingmuch> wolverian: not yet

[23:20] <wolverian> nothingmuch, oh, okay.

[23:20] <nothingmuch> patches welcome =

[23:20] <nothingmuch> )

[23:20] <wolverian> no, I mean, does it work in browsers?

[23:20] <nothingmuch> it's 2:20 am and I'm still trying to push out a build

[23:20] <nothingmuch> oh, I have no clue

[23:21] <wolverian> apparently not.

[23:21] <wolverian> ah well.

[23:22] <putter> the ALA article (I think?) said something about naming style stuff to allow it to be turned on/off as a group.

[23:23] <nothingmuch>   2:23am  up 47 days, 14:41,  27 users,  load average: 8.12, 6.74, 5.77

[23:24] <nothingmuch> damnit

[23:24] <nothingmuch> no wonder the compilation is not finished

[23:24] * nothingmuch has seen load averages of 20 this week =(

[23:24] <putter> where?

[23:25] <nothingmuch> work

[23:25] <putter> ah

[23:25] <nothingmuch> we have 2 strong boxes of every kind

[23:25] <nothingmuch> i need one of each for the weekly build

[23:25] <putter> nifty

[23:25] <nothingmuch> and we also have like 15 "strong enough" linux/windows boxes

[23:26] <nothingmuch> but people still flock to the strong boxes

[23:26] <nothingmuch> so while linux, aix, solaris and windows have nearly finished running the sanity test suite, hpux is not yet done compiling

[23:26] * putter looks forward to linux having easy to use resource groups.

[23:26] <nothingmuch> i think i will liberally apply BOFH skills

[23:27] <geoffb> Nice everyone other than you who logs onto the strong boxes . . . assuming you have root access (or a friendly admin)

[23:27] <nothingmuch> not that it'll help much, it's prolly out of ram

[23:27] <geoffb> and there you go.

[23:27] <nothingmuch> geoffb: yeah, I should have thought of that 3 hours ago

[23:27] <nothingmuch> that's what I normally do

[23:27] <nothingmuch> sometimes i even sigstop

[23:27] <geoffb> heh

[23:27] <nothingmuch> if the disk is really being beaten to death (we make a database engine)

[23:28] <geoffb> which one?

[23:28] <geoffb> (s/one/db engine/)

[23:28] <nothingmuch> http://www.hyperroll.com

[23:28] <nothingmuch> special purpose stuff

[23:28] <nothingmuch> say you are a company that makes hygene products

[23:29] <nothingmuch> you want to know how many hicks bought orange toilet paper in tokyo, split up into monthly and daily sums, over the last 10 years

[23:29] <nothingmuch> this product is supposed to know how to do this stuff fast

[23:30] <putter> later &

[23:30] <nothingmuch> ciao

[23:30] <geoffb> right, new "entry-level" packages at $35K license for once CPU.  That's special purpose pricing, all right.  :-)

[23:32] <nothingmuch> geoffb: =)

[23:32] <nothingmuch> you know you're really evil if you have to use xargs to make your renicing easy

[23:33] <wolverian> xargs++

[23:34] <nothingmuch> wolverian, putter: some TTH patches i'd like to see:

[23:35] <nothingmuch> alternative styles for CSS supported in the non javascript way

[23:35] <nothingmuch> making the todo reason another class for each cell

[23:35] <nothingmuch> so that we can tell apart todo<bug> from something else

[23:35] <nothingmuch> but only if the reason is !~ /\s/

[23:35] <nothingmuch> or actually =~ /^\w+$/ for that matter

[23:36] <nothingmuch> i can't get around to it in the next few days

[23:36] <nothingmuch> but we'll be needing it for work eventually

[23:36] <nothingmuch> or rather, i would like to make the work people use it

[23:36] <nothingmuch> only a handful do

[23:39] * geoffb finishes reading marketing blurbs on hyperroll website . . . interesting, looks like a SQL*net proxy with some internal smarts

[23:39] <geoffb> .oO( I wonder if it just replaces moronic queries, as video drivers commonly recognize and replace moronic shaders )

[23:39] <nothingmuch> geoffb: what's sql*net?

[23:40] <geoffb> Oracle's wire protocol, IIRC

[23:40] <nothingmuch> oh

[23:40] <nothingmuch> the way the product is usually used:

[23:40] <nothingmuch> some company paid $$$ to oracle or ibm to store their data in oracle or db2

[23:40] <nothingmuch> or occasionally mssql

[23:40] <nothingmuch> then company wanted to do funny queries

[23:40] <nothingmuch> so they paid $$$ to hyperion to use essbase

[23:40] <nothingmuch> but then it was too slow

[23:40] <nothingmuch> they bought our product

[23:41] <nothingmuch> which basically takes data from oracle/db2 etc

[23:41] <nothingmuch> and OLAPish meta data from essbase

[23:41] <nothingmuch> and then does some precalculation

[23:41] <nothingmuch> and then you can query

[23:42] <nothingmuch> and i think it can also plug the results back into the db by hacking views and stuff

[23:42] <geoffb> Who was it that said that almost all computer science problems come down to exercises in caching?

[23:42] <geoffb> nodnod, makes sense

[23:43] <geoffb> At least you guys are in the comfortable position of being able to tell your customers to do it the way you tell them, or they'll be sorry, knowing they just proved it to themselves with the last few stacks of cash they flushed . . . .

[23:44] <nothingmuch> autrijus has a nice saying

[23:44] <nothingmuch> "computers aren't important... the computer is just a level 2 cache between me and the internet"

[23:44] <geoffb> :-)

[23:45] <nothingmuch> i think i see what you mean

[23:45] <nothingmuch> e.g. our staff configures stuff based on what client says they need

[23:45] <nothingmuch> and that's it?

[23:46] <geoffb> Having worked at SAP, and then a company that used SAP, I can tell you that customers commonly say "we don't want to do it the way the tool likes", and the tool vendor says "If you try to be contrarian, your user experience will suck."  And then the customer does it back asswards, and their user experience sucks . . . so they complain about it.

[23:47] <geoffb> hyperroll knows that their customers already learned that lesson.

[23:47] <geoffb> Fixing bad user experience being pretty much their reason for existing.  :-)

[23:47] <nothingmuch> heh

[23:47] <nothingmuch> i guess so

[23:48] <nothingmuch> although it's not just bad user experiences

[23:48] <nothingmuch> it's a niche product

[23:48] <nothingmuch> the integration features exist for the bad user experience

[23:48] <nothingmuch> which is most of our client base

[23:48] <nothingmuch> but the real smarts of the product is in precalculation

[23:49] <geoffb> nodnod

[23:49] <geoffb> bleah, I am just not in the mood to study this stuff right now, but I need to.

[23:49] <geoffb> bah, bah, BAH

[23:50] <nothingmuch> need to? why?

[23:50] <geoffb> Because I can't fix pugs until I grok this crap

[23:50] <geoffb> sorry, getting cranky about monads

[23:51] <geoffb> And with autrijus hors de combat (sp?), and bugfixing having hit a local minimum, it's up to us that have complaints

[23:52] <obra> seen autrijus

[23:52] <jabbot> obra: autrijus was seen 3 days 4 hours 10 minutes 51 seconds ago

[23:52] <obra> wow

[23:52] <geoffb> yeah, painful that

[23:53] <nothingmuch> oh

[23:53] <nothingmuch> geoffb: tried harrorth

[23:53] <nothingmuch> ?

[23:53] <geoffb> Yes, actually, I was just working through chapter 3 when I got sidetracked into Meet the Mondads

[23:53] <geoffb> er Monads

[23:54] <nothingmuch> it sidetracks on it's own

[23:54] <geoffb> "Somebody's got a case of the Mondads!"

[23:54] <nothingmuch> Reader and IO are dissected to death

[23:54] <nothingmuch> maybe that can help

[23:55] <nothingmuch> i didn't know much about monads when I started writing the Reader chapter

[23:55] <nothingmuch> but by the end I grokked them

[23:55] <geoffb> Oh, trust me, I'll read it all.  I just don't particularly want to at the moment, but I'm trying to keep my eyes on the prize

[23:55] <geoffb> nodnod

[23:55] <nothingmuch> oh

[23:55] <nothingmuch> i thought you were wanted to go on =)

[23:55] <geoffb> (and thank you, btw, for creating harrorth -- it's helpful so far)

[23:56] <nothingmuch> geoffb: next chapter is going to be lots of forth fun

[23:56] <nothingmuch> but I barely have time for it

[23:56] <geoffb> (and it's more fun to read than the tutorials it points to :-)

[23:56] <geoffb> nodnod

[23:56] <geoffb> mmmm, Forth.

[23:56] <geoffb> get with it, you!  You need to stay in front of masak and I

[23:57] <nothingmuch> with 2 stages of bootstrap i've gotten to a point where most of the system is written in forth

[23:57] <nothingmuch> what we need is the stack and the heap (and inherently pop, push, @ and !)

[23:57] <geoffb> schweet

[23:57] <nothingmuch> and the bootstrap

[23:57] <nothingmuch> and things like math, etc

[23:57] <geoffb> :-)

[23:57] <nothingmuch> and even the compilation loop can be written in forth on top of it

[23:58] <nothingmuch> the boostrap itself is basically: take the prelude

[23:58] <nothingmuch> completely unordered

[23:58] <nothingmuch> make a dependency tree

[23:58] <nothingmuch> and build the words using a non forth compiler

[23:58] <nothingmuch> just enough for ':' and ';' to work

[23:58] <nothingmuch> then just evaluate the rest of the prelude in an order that doesn't break

[23:59] <geoffb> as long as it is orderable . . . 

[23:59] <nothingmuch> well, it is

[23:59] <nothingmuch> the leafs of the dependency tree are the primitives

[23:59] <geoffb> well, that's good

[23:59] <geoffb> :-)

[23:59] <nothingmuch> there has to be a special case somewhere

[23:59] <nothingmuch> or the universe will explode

