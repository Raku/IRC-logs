[00:58] <mikael> what are the reasons (if any) for yada-yada-yada-ing subs without giving a prototype, as in "sub foo { ... }"?

[02:01] <svnbot6> r6210 | fglock++ | * perl5/ List - fixed a portability bug 

[02:01] <svnbot6> r6210 | fglock++ |   (Windows "Int" stringification)

[02:01] <svnbot6> r6210 | fglock++ | * perl5/ Array - builds ok, passes a couple of tests

[04:50] <xinming> anyone here can tell me if what the differences between := and ::= are?

[04:50] <autrijus> xinming: ::= is := at BEGIN time.

[04:51] <autrijus> i.e. compile time

[04:51] <autrijus> see docs/quickref/namespace

[04:51] <autrijus> bbiab

[04:52] <xinming> http://dev.perl.org/perl6/doc/quickref/namespace page not found. :-S

[04:53] <autrijus> in pugs

[04:53] <autrijus> not p6

[04:54] <autrijus> &

[04:58] <xinming> autrijus: could you please give me the exact url? :-S

[05:21] <coral> docs or doc?

[05:22] <coral> xinming: start by locating the pugs svn repository

[05:22] <coral> i don't know the precise url but the two in the topic are good

[05:22] <coral> second, look in docs/quickref/namespace inside that repository

[05:22] <coral> if the word 'pugs' isn't in the url you're probably in the wrong place.

[05:32] <putter> http://svn.perl.org/perl6/pugs/trunk/docs/quickref/namespace  http://rt.openfoundry.org/Foundry/Project/Source/index.html/pugs/checkout/docs/quickref/namespace?rev=5944

[05:32] <putter> &

[06:22] <svnbot6> r6211 | Stevan++ | Perl6::MetaModel - (p5) 

[06:22] <svnbot6> r6211 | Stevan++ | * begun converting pugs tests (t/oo/) to the metamodel

[06:22] <svnbot6> r6211 | Stevan++ |   to see how many we can pass

[06:22] <svnbot6> r6211 | Stevan++ | * fixed Perl6::Object::BUILD to ignore named args which

[06:22] <svnbot6> r6211 | Stevan++ |   are not attributes

[06:46] <vkon> docs/AES/S28draft.pod is very messy

[06:47] <castaway_> then fix it, dear henry

[06:51] <vkon> sure...

[06:51] *** castaway_ is now known as castaway

[07:00] *** ods15_ is now known as ods15

[07:11] <GeJ> hello gentlemen

[07:14] <ods15> all your base are belong to us

[07:15] * castaway feels left out :)

[07:18] <ods15> puts() writes the string s and a trailing newline to stdout. - bleh, wtf, why a trailing new line :/

[07:22] <castaway> because its puts .. use a different method :)

[07:24] <ods15> it's the only function name for this that is this short

[07:25] <ods15> 'printf' is very long, 6 chars..

[07:25] <castaway> awww.. how terrible

[07:25] <castaway> go use assembler :)

[07:28] <ods15> castaway: i'm trying out for ioccc

[07:28] <castaway> ah well :)

[07:28] <ods15> anyway i hacked around it, made it so i only call puts when i actually need a newline

[07:28] <ods15> but now i need to re-obfuscate this...

[08:00] <Aankhen``> (quoting 5 relevant lines and 50 irrelevant lines before replying)--

[08:03] <ods15> you forgot the '$'

[08:03] <ods15> i think

[08:03] <ods15> not sure how perl goes

[08:06] <svnbot6> r6212 | Stevan++ | Mini-MetaModel - Bootstrapped and tested in less then 200 lines 

[08:06] * Aankh|Clone sings the "I Hate Powercuts" song.

[08:07] <Aankh|Clone> Mini-MetaModel? :-o

[08:08] <Aankh|Clone> Hi pdcawley.

[08:11] <pasteling> "Aankhen``" at 61.246.34.89 pasted "`nmake` fails on Win32" (13 lines, 764B) at http://sial.org/pbot/12405

[08:11] *** Aankh|Clone is now known as Aankhen``

[08:12] <Aankhen``> Halp!

[08:30] <autrijus> Aankhen``: hm. what did you change?

[08:30] <autrijus> does your PATH contain an alternate ld?

[08:43] *** shachaf_ is now known as Shachaf

[09:06] <QtPlatypus> Does anyone have any sort of comment on the Lazy IO edge case I pointed out on p6l?

[09:06] <Aankhen``> autrijus: I didn't change anything... it built fine last night, it's not building today.

[09:07] <castaway> it was the pixies, Aankhen`` 

[09:08] <autrijus> Aankhen``: weird... did "make clean" help?

[09:08] <autrijus> let me boot to win32 to see if I can duplicate this.

[09:08] <autrijus> a sec.

[09:09] <Aankhen``> I always run `make clean` before syncing up and building.

[09:10] <Aankhen``> (in other words, it didn't help :-)

[09:10] <autrijus> ok. brb. :)

[09:16] <svnbot6> r6213 | iblech++ | * Usual svn props.

[09:16] <svnbot6> r6213 | iblech++ | * PIL2JS: PIL::PApp, PIL::Cont: Undefine all params after they have been used,

[09:16] <svnbot6> r6213 | iblech++ |   to reduce memory usage of the JS engine. Sadly, it only helps 3 MiB...

[09:19] <autrijus> nmaking...

[09:30] <autrijus> Aankhen``: it worksforme.

[09:30] <autrijus> Aankhen``: try "nmake pil"

[09:31] <autrijus> 17:30 < autrijus> Aankhen``: it worksforme.

[09:31] <autrijus> 17:30 < autrijus> Aankhen``: try "nmake pil"

[09:32] <Aankh|Clone> OK.

[09:32] <Aankh|Clone> Went to "Linking...", then exited.  Is that supposed to happen?

[09:32] <autrijus> type "pil.exe"

[09:33] <autrijus> then "say 123"

[09:33] <Aankh|Clone> Whoa, mondo output.

[09:33] <autrijus> then ":q"

[09:33] <Aankh|Clone> Done.

[09:33] <autrijus> so ghc is fine

[09:33] <autrijus> linker too

[09:33] <autrijus> somehow the main pugs doesn't like you

[09:33] <Aankh|Clone> :-(

[09:33] <autrijus> if you just erase Lexer.o and "nmake"

[09:33] * Aankh|Clone sings of unrequited love.

[09:34] <Aankh|Clone> A'right.

[09:37] <Aankh|Clone> Cool, that worked.

[09:37] <autrijus> hrmph. :)

[09:37] <Aankh|Clone> Now to install.

[09:37] * Aankh|Clone crosses his fingers.

[09:38] <Aankh|Clone> My kingdom for a build system that doesn't trigger re-compilation when you try to install Pugs!

[09:39] <Aankh|Clone> Yay, it worked.

[09:39] <Aankh|Clone> autrijus++

[09:39] <autrijus> :)

[09:39] <autrijus> if you don't want recompilation, edit config.yml

[09:40] <autrijus> and turn off the prelude compilation.

[09:40] <Aankh|Clone> The Prelude isn't pre-compiled during the regular build?

[09:40] <Aankh|Clone> (i.e. when you type `nmake`)

[09:40] <autrijus> it is, but the dependency detection is faulty

[09:40] <autrijus> so it retriggers no matter what

[09:40] <Aankh|Clone> I see.

[09:40] <autrijus> ideally it should only retrigger if Prelude.pm is touched.

[09:40] <autrijus> fixes... welcome.

[09:41] <Aankh|Clone> Do you know which part of the build system handles this?

[09:41] <autrijus> yes, util/build_pugs.pl

[09:41] <Aankh|Clone> OK.

[09:41] <Aankh|Clone> Let me see if I can do anything at all...

[09:41] <autrijus> but only gaal really groks all of it I think.

[09:46] *** Aankh|Clone is now known as Aankhen``

[11:04] <kgftr|konobi> clkao: Brownie points for a version of cvsup that understands SVN/SVK

[11:04] <svnbot6> r6214 | autrijus++ | * Style cleanup on MiniMetaModel.pl to simplify mental effort needed for Visiolization

[11:04] <svnbot6> r6215 | autrijus++ | * even more clarifications.

[11:04] <svnbot6> r6216 | autrijus++ | * more comments

[11:19] <clkao> kgftr|konobi: i have a svkup branch

[11:20] * castaway waves to kgftr|konobi 

[11:20] <kgftr|konobi> castaway: yullo! we should be seeing you real soon!

[11:21] <kgftr|konobi> clkao: url?

[11:21] <castaway> yes indeedy

[11:21] <clkao> in the svk repository

[11:21] * castaway is flogging off extra junk on ebay (doing well so far :)

[11:22] <clkao> it even works across different mirrors. but needs more polishing

[11:23] <kgftr|konobi> clkao: nice... trying to find something to replace CVSup that's nicer... but we use it not just for doing RCS stuff, but also file based push mirroring

[11:38] *** prefiks_ is now known as prefiks

[13:36] <fglock> hi

[13:51] <Limbic_Region> salutations

[13:51] <fglock> bom dia Limbic_Region

[13:52] <Limbic_Region> sure is - my wife's bday today and it is Friday

[13:53] <fglock> congratulations to her.

[13:53] <fglock> i didn't notice it was friday. this was a short week for me

[13:54] <Limbic_Region> I don't have a tendency to forget what day of the week it is, but I am often unsure of the date (or even the month for that matter)

[13:54] <fglock> :)

[13:54] <fglock> i was thinking about starting documenting the runtime API 

[13:55] * castaway wishes Jean a happy b'day

[13:55] <castaway> (And hopes shes well too :)

[13:55] <fglock> before we have too many implementations

[13:55] <Limbic_Region> mostly castaway, I will relay your well wishes

[13:56] <castaway> good good

[13:59] * fglock is helping create a new PM group in Salvador, Bahia. but I've never been there :(

[14:00] <coke> heo. has it been documented if/how system() is going to change in perl6  yet?

[14:05] <coke> hey, pdc.

[14:05] <pdcawley_> hey coke

[14:06] <coke> you seen anything on how system() might change in perl6?

[14:06] <mikael> is there ever a reason to yada-yada-yada a sub without giving a prototype, as in "sub foo { ... }"?

[14:07] <mikael> (except for documentation purposes)

[14:07] <castaway> who needs prototypes?

[14:07] <fglock> mikael: I use it as a "TODO" reminder

[14:09] <mikael> fglock: ah, yes, that's a good reason :-)  kinda like ``foo = undefined'' in haskell

[14:10] <pdcawley_> coke: I assume it'll fail on failure and return true on success...

[14:11] <coke> (i know someone who's going to write a wrapper in perl5 for CPAN, just wondering if there was something he could use to make it forward compatible.)

[14:28] *** autark is now known as jp-autark

[15:18] <stevan> autrijus: ping

[15:59] <svnbot6> r6217 | fglock++ | * perl5/Array - t/array-lazy.t passes all tests

[16:03] <autrijus> stevan: pong

[16:03] <autrijus> http://pugscode.org/images/metamodel.png

[16:04] <ods15> THAT'S IT

[16:04] <ods15> http://rafb.net/paste/results/TSWb8Y12.html

[16:04] <ods15> 2048 bytes, ends with a smiley, and had 4 out of 5 algorithms

[16:04] <ods15> i ain't touching that shit any friggin more. gonna leave it like that for the next entire year till i submit it...

[16:05] <ods15> some of the constants could be spazzed up a little bit...

[16:05] <ods15> as far as i can tell, there are no memleaks/segfaults, but this code DOES cause 'tcc -b' to crash :(

[16:09] <stevan> autrijus++ # pretty pictures

[16:09] <masak> autrijus: ::Point? what's that?

[16:09] <stevan> masak: it is just a random user class 

[16:09] <stevan> and instance

[16:09] <stevan> $point

[16:10] <kolibrie> autrijus: are the blocks an instance, and the cylindar+cone a package?

[16:10] <stevan> kolibrie: I think so,.. 

[16:10] <masak> stevan: ah, thx

[16:11] <autrijus> stevan: please check for sanity

[16:11] <stevan> autrijus: I am 

[16:12] <autrijus> in particular, I'd like to map the greeks to your 10kft notation

[16:12] <stevan> autrijus: how did you like the mini-metamodel ?

[16:12] <autrijus> stevan: it helped a lot :)

[16:12] <stevan> :)

[16:12] <autrijus> except it bootstraps differently :)

[16:12] <stevan> yes

[16:12] <autrijus> but I figured out

[16:12] <stevan> no Class

[16:12] <autrijus> at long as the Universe API remains compatible

[16:12] <autrijus> the Metaverse bootstrap can take various paths.

[16:12] <stevan> it actually started out as an experiment in removing Class

[16:14] <stevan> it is also single inheritence

[16:14] <autrijus> yeah, which is why I changed @:super to $:super

[16:14] <kolibrie> autrijus: can you add the blocks and cylindar+cone to the legend?

[16:14] <autrijus> kolibrie: sure

[16:14] <kolibrie> thanks

[16:17] <masak> any special reason why the 'theos' and 'pneuma' boxes are larger than the boxes corresponding to ::Point?

[16:18] <dudley> I think because point is "merely" a user level class and not part of the Meatmodel

[16:19] <dudley> At least that's how I interpreted it.

[16:19] <masak> dudley: hmm. doesn't seem very fair

[16:19] <masak> don't know if it matters though

[16:20] <kolibrie> of course, point has two sets of boxes, user and meta

[16:20] <masak> you mean they sorta have to split the area between them? :)

[16:21] <kolibrie> something like that

[16:22] <autrijus> re-uploading.

[16:22] <autrijus> done.

[16:23] <kolibrie> ah, point's boxes got upgraded!

[16:23] <autrijus> yeah :)

[16:23] <kolibrie> autrijus++ # pretty pictures

[16:24] <autrijus> I can't figure out how to show the fact that the MetaClass class on the left is magically mapped to the ::Class on the right.

[16:24] <autrijus> so I gave up and merely listed them on the same row.

[16:25] <kolibrie> well, isn't that what the purple meta line is for?

[16:27] <autrijus> yeah, although it's kind of subtle

[16:28] <kolibrie> worked for me

[16:28] <masak> autrijus++ # much better box sizes :)

[16:29] <kolibrie> the left-hand column, with gnosis, metamorph, and genesis, does that show the bootstrap?

[16:31] <autrijus> yes.

[16:31] <autrijus> re-re-uploading.

[16:33] <autrijus> the sequence is (I think): gnosis -> demiurge -> logos -> pneuma -> metamorph -> genesis

[16:34] * kolibrie tries to follow the path

[16:34] <autrijus> but is really just gnosis (demiurge) -> metamorph -> genesis (theos), and logos/pneuma is parallel

[16:34] <autrijus> (which is what the path shows)

[16:34] <autrijus> (metasyntactic names

[16:34] <autrijus> )++

[16:35] <kolibrie> ok, so gnosis is the class for the demiurge instance

[16:39] <svnbot6> r6218 | Stevan++ | MiniMetaModel - adding the class_precedence_list to the $Class

[16:39] <svnbot6> r6219 | fglock++ | * perl5/Array - t/array-fetch-store passes all tests

[16:42] <autrijus_> kolibrie: no, gnosis is just instance data.

[16:42] <autrijus_> I re-re-uploaded.

[16:43] <autrijus_> metamorph adds more things to gnosis

[16:43] <autrijus_> (via the add_meth special magic)

[16:43] *** autrijus_ is now known as autrijus

[16:43] <autrijus> then genesis add a superclass

[16:46] * pdcawley_ thinks someone's being a wee bit clever clever here...

[16:47] <autrijus> pdcawley: sadly, without those metasyntactic variables, I'd need to write data(meta(class(::Class)))

[16:47] <autrijus> and I quickly lost track with that notation :-/

[16:51] <autrijus> stevan: I hope I'm not overtly insane

[16:51] <autrijus> stevan: note that I did away with the class() layer in your notation

[16:51] <stevan> yes

[16:52] <autrijus> it's hidden under the dotted wall between the two worlds

[16:52] <autrijus> as I think it should be (I think)

[16:52] <stevan> yes

[16:52] <stevan> I agree

[16:52] <stevan> that was why I did the mini-metamodel to experiment with that

[16:52] <autrijus> nodnod

[16:53] <autrijus> also I didn't have class's attr and submeth

[16:53] <autrijus> mostly due to space restriction

[16:53] <autrijus> but also because they are not involved during bootstrapping

[16:55] <autrijus> I think another picture showing the time-indexed bootstrap process would help too

[16:59] <stevan> yes

[17:00] <fglock> autrijus: ping

[17:00] <autrijus> fglock: pong

[17:00] <fglock> I was thinking about adding skeletons for other Containers/Values

[17:00] <fglock> and maybe document the runtime API

[17:01] <autrijus> fglock: that'd rock, go ahead

[17:01] <autrijus> you have the javascript version as reference :)

[17:02] <autrijus> as well as the "Val" type in http://svn.openfoundry.org/pugs/src/PIL/Val.hs

[17:02] <fglock> iblech said he could reuse the Perl6 modules, compiled to javascript

[17:03] <autrijus> not for intrinsic singular value types

[17:03] <autrijus> but otherwise yes

[17:05] <fglock> translating Perl6 to Perl5 by hand is harder than it seems :)

[17:06] <autrijus> :)

[17:08] <fglock> array contexts, references are entirely different. it would be nice if someone wrote about that.

[17:08] <autrijus> you mean, aside from quickref and synopses

[17:08] <autrijus> more like a tutorial?

[17:09] <fglock> yes, more like a language comparison. A few snippets on a language, and how it looks like in the other.

[17:10] <autrijus> docs/other/porting_howto

[17:10] <fglock> specially about data structures and parameter passing

[17:10] <autrijus> is probably what you're looking for

[17:12] <autrijus> feel free to add to it

[17:12] <fglock> ok :)

[17:14] <fglock> does '=$fh' means '$fh.to_list' ?

[17:16] <fglock> (I may have asked this before)

[17:17] <ods15> pugs is a bad name

[17:17] <ods15> i thought it was a program like 'flea' - to deal with perl bugs...

[17:18] <fglock> ods15: I have a Westie - it could be "Westie" :)

[17:18] <ods15> ?

[17:19] <fglock> ods15: actually "pugs" sounds a bit like "pulgas", which is fleas in portuguese :)

[17:21] <spinclad> autrijus:  in logos, is |%:attr => $.x $.y| cutnpasted from Point?  all the rest makes sense

[17:22] <spinclad> autrijus++  # pretty pitchers

[17:22] <kolibrie> autrijus: so gnosis is the instance data of the MetaModel instance, and during bootstrapping the instance data is added to by metamorph and genesis, so at the end of the bootstrap the instance of the MetaModel is also an instance of ::Class

[17:25] <spinclad> so gnosis, metamorph, genesis are stages in bootstrapping

[17:25] <spinclad> and in the picture that's what they've added

[17:26] <kolibrie> spinclad: I think that's right

[17:27] <kolibrie> autrijus: can you change the legend item for 'instance data' so that the dotted line is coming out of the box, rather than underneath it?

[17:28] <spinclad> seconding, that would be clearer

[17:34] <PerlJam> Is it just me or does anyone else have a hard time following Thomas Sandlass' posts on p6l?

[17:35] <fglock> PerlJam :)

[17:35] <kolibrie> spinclad: hmm, yes, pretty sure the %:attr for pneuma and logos should not be the same

[17:36] <fglock> l

[17:37] <fglock> (oops)

[17:41] *** Aankh|Clone is now known as Aankhen``

[17:42] <spinclad> pneuma is the meta(::Object), and logos shows its instance data; it's %:attr in inst(meta(C)) for C in <::Object ::Point> (or something) that shouldn't be the same

[17:43] <spinclad> just to be pedantically overbearing

[17:44] <spinclad> ;)

[17:50] <kolibrie> I think the label 'logos' should be under the boxes, such that theos, pneuma, and logos are all instances

[17:51] <kolibrie> the instance data squares are not labeled

[18:02] <spinclad> i don't think logos has anything to do with Point, but with Object rather.

[18:05] <spinclad> leo suggested adding a line separating Point stuff from the stuff above, which would make it clearer what's the metamodel bootstrap and what's a later example instance/class/meta.

[18:07] <kolibrie> autrijus: can you clarify logos for spinclad and me

[18:07] <stevan> kolibrie: logos is the instance data for the meta(::Object)

[18:08] <stevan> the metaclass behind the scences for Object

[18:09] <kolibrie> stevan: so logos and pneuma are both for the instance of meta(::Object)?

[18:09] <stevan> no

[18:09] <kolibrie> I'm just seeing the same font, etc

[18:09] <stevan> pneuma is the instance of MetaClass

[18:09] <kolibrie> and think 'logos' should be under the cubes

[18:10] <kolibrie> or a different font

[18:10] <kolibrie> and where it is

[18:10] <stevan> logos is the instance data that pneuma holds

[18:10] <stevan> make sense?

[18:10] <kolibrie> and the instance cubes next to Point have no name?

[18:10] <stevan> no

[18:11] <stevan> that is just defined when you do class Point { .. }

[18:11] <stevan> Object has to be built special

[18:11] <stevan> actually you might be able to get away with no building it special, but I have not experimented enough

[18:12] <stevan> autrijus: I am going to expand the MiniMetaModel into MetaModel 2.0

[18:12] <stevan> it needs to be re-written, the current version is too cluttered with p5 magic to untangle

[18:12] <stevan> kolibrie: the key is to understand the bootstrap process

[18:13] <stevan> first is gnosis,.. it is a hand constructed instance

[18:13] <stevan> the 'add_method' method is all you need to begin adding more methods to it

[18:13] <stevan> which is the metamorph step

[18:14] <stevan> once all the methods and attributes have been added in metamorph, you have a (mostly) complete MetaClass

[18:14] <stevan> the next step is to make ::Object it's superclass

[18:14] <stevan> but you need ::Object in order to do that

[18:15] <stevan> so you create ::Object, this is pneuma

[18:15] <stevan> it is created from the data in logos

[18:15] <stevan> once those two are created, you have ::Object

[18:15] <stevan> and you can then add ::Object to the superclass of ::Class

[18:15] <stevan> completing the cycle

[18:16] <stevan> and then you have a fully formed ::Class which is theos

[18:16] <stevan> the cycle is this:

[18:16] <stevan> Class is an instance of Class 

[18:16] <stevan> Object is an instance of Class

[18:16] <stevan> Class is a subclass of Object

[18:18] <stevan> autrijus: I think MetaClass is just confusing things... maybe we should get rid of it entirely

[18:18] <kolibrie> so gnosis and logos exist at the beginning, and are just data structures

[18:18] <stevan> gnosis does

[18:19] <kolibrie> where does logos come from?

[18:19] <stevan> but logos is the input which make pneuma,.. so you can create it later

[18:19] <stevan> logos comes from Apoc 12 :)

[18:19] <kolibrie> right, so it is a constant set of data needed to set up the initial objet

[18:19] <PerlJam> stevan: actually, watching you explain it just now and looking at the metamodel.png it occurs to me that the image should be layered.

[18:20] <PerlJam> currently there are 2 "layers".  I think there's really three (at least as how people think of it)

[18:20] <stevan> PerlJam: 3-d VMRL would be nice too ;)

[18:20] <stevan> kolibrie: yes, it is (constant set of data to define ::Object)

[18:20] <stevan> PerlJam: this diagram is a little tightly packed

[18:21] <stevan> an animation might be a good thing

[18:21] <stevan> for the bootstrap process

[18:21] * stevan ponders a set of spork slides

[18:22] <PerlJam> stevan: It would :-)  but I'm thinking of something like how the X Window System was explained to me.  At the bottom is Xlib which talks to the hardware, above that is Xt which talks to Xlib and can talk to the hardware as needed, above that are things like Motif which talk to Xt or Xlib or the hardware as needed.  I think the metamodel is the same way.

[18:22] <kolibrie> well, autrijus has promised another picture showing the timeline of the MetaModel bootstrap

[18:22] <stevan> yes, it is layered, but it is also temporal

[18:23] <stevan> kolibrie: I think a static picture will loose something though

[18:23] <PerlJam> stevan: At the bottom is the metaverse which does the work, above that are things like ::Class and ::Object, and above that is the real "user space"

[18:23] <PerlJam> stevan: Unfortunately you can only show one view at a time. Have one "structural" picture and one "temporal" picture of the same thing.

[18:24] <masak> PerlJam: why? have the layers on the vertical axis and time on the horizontal...

[18:24] <PerlJam> masak: because I believe the lines willbe confusing.

[18:24] <masak> PerlJam: you might be right

[18:26] * stevan is going to try animating it 

[18:26] <kolibrie> stevan: so in metamodel.png, the label 'logos' should be in the same typeface as 'metamorph' and 'genesis'

[18:26] <stevan> I am not sure I understand the signifigance of the typeface

[18:27] <kolibrie> that's why I go lost in the first place

[18:27] <kolibrie> all the labels for the instances are in one typeface, and all the labels for the instance_data are in another

[18:28] <kolibrie> except 'gnosis' is different from them all

[18:28] <PerlJam> stevan: animation would definitely be excellent.

[18:28] <svnbot6> r6220 | fglock++ | * perl5/Array passes 'make test'

[18:28] <svnbot6> r6221 | fglock++ | * per5/List - map() bugfix

[18:40] <gaal> hi

[18:40] <fglock> hi gaal

[18:40] <gaal> how much of Prelude.pm compiles to PIL2 already?

[18:40] <gaal> hey fglock :)

[18:40] <integral> is there an AST->PIL2 compiler already?

[18:41] <gaal> no idea :)

[18:41] <gaal> what with illness and $work i've been a little out of things

[18:42] <gaal> in this diagram: http://pugscode.org/images/metamodel.png

[18:42] <gaal> what's the character before :super in "metamorph"?

[18:42] <gaal> is that a @ ?

[18:43] <PerlJam> gaal: yes.

[18:43] <gaal> thanks.

[18:43] <PerlJam> (at least that's what I've been thinking it is)

[18:43] <fglock> integral: I think PIL replaces AST

[18:44] <integral> fglock: err?   By AST I mean the result of the parser

[18:44] <integral> and iirc the AST->PIL translation is done by the Compile monad atm

[18:45] <integral> s/monad/typeclass/

[18:45] <PerlJam> "monad"'s syntactic similarity to "gonad" makes me want to giggle everytime I see it.

[18:47] <gaal> should VERSION perhaps be a method (or an attribute) in logos?

[18:50] <fglock> integral: there's no AST in http://svn.openfoundry.org/pugs/docs/notes/plan - that's why I thought that PIL replaces AST

[18:50] <autrijus> rehi

[18:50] <autrijus> I updated the picture

[18:50] <gaal> heya

[18:50] <autrijus> hopefully integrated all suggestions

[18:50] <integral> fglock: oh, sorry, AST == Exp

[18:50] <integral> confusion might also have been from PAST being a former name of PIL

[18:51] <autrijus> integral: Exp->PIL2 compiler is not yet ready. working on it.

[18:52] <kolibrie> autrijus: ooooh, ahhhh!  very nice

[18:52] <gaal> should the textual result be longer or shorter, autrijus?

[18:52] <gaal> (of Exp->PIL)

[18:53] <autrijus> gaal: I persume longer

[18:53] <autrijus> there are more nodes, in any case.

[18:53] <gaal> time for binary representation?

[18:53] <autrijus> sure, I plan to go with DriFT "deriving Binary" 

[18:54] <autrijus> drawback is that, like Storable, would be haskel only

[18:54] <autrijus> YAML is even longer

[18:55] <autrijus> but somewhat fast to read

[18:55] <autrijus> XML is possible too. I'm open for suggestions for ondisk format

[18:55] <gaal> hmm, is that necessarily so? DriFT stores native haskell structures?

[18:55] <gaal> what about YAML | gzip?

[18:55] <autrijus> no, but rather native byte representations

[18:55] <autrijus> well, why do we worry about ondisk storage again?

[18:55] * autrijus assumes disk is cheap

[18:56] <integral> £30 for 80GB

[18:56] <PerlJam> autrijus: Keep things human readable as much as you can.  

[18:56] <autrijus> PerlJam: YAML may be attractive then

[18:56] <Aankh|Clone> -1 for XML.

[18:56] <Aankh|Clone> YAML++

[18:56] *** Aankh|Clone is now known as Aankhen``

[18:56] <autrijus> it's still rather verbose but at least somewhat readable.

[18:57] <gaal> it is but pugs -CPugs Prelude.pm  is like 1 mb 

[18:57] <autrijus> and we can even validate with Kwalify.

[18:57] <autrijus> gaal: with yaml it'll be like 10mb or more.

[18:57] <autrijus> yaml+gz is a possibility.

[18:58] <gaal> that's too big to work with, isn't it?

[18:58] <autrijus> well, syck is fast

[18:58] <stevan> autrijus: I animated the metamodel visiolization

[18:58] <stevan> http://no.perlcabal.org/~stevan/metamodel.gif

[18:58] <autrijus> oh wow.

[18:58] <stevan> this is the timeline for the bootstrap

[18:58] <stevan> it needs annotations

[18:58] <stevan> but it is basically there

[18:59] <autrijus> you rock

[18:59] <autrijus> I fixed the font and legend

[18:59] <Aankhen``> http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnexxml/html/xml10202004.asp

[18:59] <autrijus> you may wish to copy the legend over if the rest is too painful

[18:59] <stevan> yes, I saw, I will remake

[18:59] <Aankhen``> # When to use XML

[18:59] <stevan> autrijus: the whole thing took me about 5 min

[18:59] <autrijus> oh ok, remake then

[19:00] <autrijus> Aankhen``: we are storing tree data, obviously yaml is superior :)

[19:00] <stevan> autrijus: I am wondering if spork slides might be better

[19:00] <autrijus> stevan: well, having separate frames available helps too

[19:00] <stevan> allow the user to control back and forth

[19:00] <autrijus> then we can add voice and subtitle

[19:00] <Aankhen``> I already made my preference for YAML clear. :-P

[19:00] <stevan> PowerPoint!!!

[19:00] <autrijus> yeah why not, seeing I'm using visio already ;)

[19:01] * autrijus really tried Dia but really can't make it work

[19:01] * stevan cant either,.. but I use OmniGraffle :)

[19:01] <kolibrie> stevan: very nice animation

[19:01] <autrijus> powerpoint embeds visio directly.

[19:02] <autrijus> that's a good thing

[19:02] <stevan> kolibrie: thanks :)

[19:02] <kolibrie> svg does animation, but browsers don't support svg that well yet

[19:02] <stevan> autrijus: I will work on this over the weekend, complete with annotations

[19:02] <stevan> autrijus: did you get my note about MetaModel 2.0?

[19:04] <autrijus> stevan: yes

[19:05] <autrijus> stevan: I think MMM is a good start

[19:05] <autrijus> and I got the basic idea I think

[19:05] <Aankhen``> ?eval my $foo = "init"; sub bar () { UNDO { $foo = "init"; }; $foo = "abcd"; die "HAHAHAHAHA" }; bar()

[19:05] <evalbot6> Error: No compatible subroutine found: "&UNDO" 

[19:05] <autrijus> so I'll push ahead with the haskell one

[19:05] <autrijus> till I get roles working

[19:05] <autrijus> (which is 6.28.0 showstopper)

[19:06] <autrijus> and we can sync from time to time

[19:13] <stevan> autrijus: I really think roles need to be attributes-less

[19:13] <stevan> butI am not sure it's a battle worth fighting

[19:15] <kolibrie> a role is a set of methods, which does not have instance data? otherwise it is like a class?

[19:16] <stevan> kolibrie: no, it has attributes, which will become instance data for the class the role is flattened into

[19:17] <kolibrie> stevan: just trying to picture the difference between a class and a role

[19:18] <kolibrie> still a little fuzzy for me

[19:23] <stevan> kolibrie: a role is just a collection of methods and attributes

[19:23] <svnbot6> r6222 | fglock++ | * updated perl5/ TODO list, MANIFEST

[19:23] <stevan> to be included into the class

[19:26] <autrijus> stevan: why does role-defined instance attrs bad?

[19:26] <autrijus> s/does/is/

[19:27] <autrijus> or do you mean role-defined _class_ attrs?

[19:27] <autrijus> or both?

[19:31] <kolibrie> stevan: so roles are a definition, and don't have user instances, whereas a class may have user instances

[19:32] <stevan> kolibrie: yes

[19:33] <stevan> autrijus: the problem is with the conflict rules

[19:33] <stevan> if methods are in conflict between two roles, neither is included...this makes it easy to treat role composition an non-order-dependent

[19:34] <autrijus> right... so why can't attrs be treated like rw methods?

[19:34] <stevan> if the class does not supply a method of the same name as the conflict,.. then an exception occured

[19:34] <stevan> occurs

[19:34] <stevan> autrijus: the problem is in the interelation of the methods/attributes

[19:34] <autrijus> how is it different from methods/methods?

[19:34] <stevan> hmmm

[19:34] <stevan> actually it is not very different

[19:35] <autrijus> :)

[19:35] <stevan> however, that makes it worse IMO :)

[19:35] <stevan> ok, maybe I will introduce the alias idea from the traits paper as a means of disambiguation

[19:36] <fglock> autrijus: is 'id()' a container object method?

[19:36] <spinclad> this would be a map from role namespace to class namespace?

[19:36] <stevan> I think private methods/attributes can be dangerous too

[19:36] <stevan> spinclad: no, the contents of the role namespace is composed into the class namespace

[19:37] <spinclad> without renaming then?

[19:37] <autrijus> fglock: a private one maybe

[19:37] <stevan> no, the alias would force a rename

[19:37] <autrijus> fglock: the container only exposes =:=

[19:37] <autrijus> which is then implemented by comparing ids

[19:37] <autrijus> but it does not publicly offer .id

[19:37] <spinclad> ok

[19:40] <autrijus> fglock: on the other hand, if we expose them as full perl6 objects (which I'm not sure there is a way to do that yet)

[19:40] <autrijus> then naturally their .id would be their object id.

[19:40] <autrijus> i.e. the "Cell" are perl6 objects

[19:40] <autrijus> but I don't think AES has them exposed yet.

[19:40] <autrijus> in particular, I'm not sure @array.id returns anything.

[19:41] <kolibrie> stevan: light bulb! so a role is like a base class, never used directly, but useful for giving functionality to many classes

[19:42] <stevan> kolibrie: that is one way to look at them yes

[19:42] <stevan> except they can be injected at any point

[19:42] <autrijus> and does not participate in ->SUPER calls

[19:43] <stevan> yes, the SUPER:: calls in a Role method are late bound,.. so they will call the SUPER:: of the class they are composed into

[19:43] <autrijus> exactly.

[19:44] <kolibrie> ok

[19:54] <TheMaaaa> seen iblech

[19:54] <jabbot> TheMaaaa: iblech was seen 21 hours 48 minutes 31 seconds ago

[20:06] <autrijus> journal up. see you tomorrow!

[20:06] * autrijus waves &

[20:21] <nothingmuch> hola.

[20:22] <fglock> hola nothingmuch

[20:23] <fglock> shabbath shalom

[20:23] <nothingmuch> not yet shabbath as far as 

[20:23] <nothingmuch> i'm concerned

[20:23] <nothingmuch> i still have friday night which is morally friday =)

[20:24] <fglock> (I forgot about the time zone difference)

[20:26] <fglock> I'm still confusing the MetaModel and the Runtime a bit

[20:30] * nothingmuch hasn't any time to grok that now =(

[20:31] <ods15> hello nothingmuch 

[20:32] <nothingmuch> hi ho

[20:33] <nothingmuch> say - you know mplayer... I have a broken movie, avi/divx.... can I get it to skip the missing frames and try to find the mpeg sync bytes (assuming MPEG-4 has those) and continue from there? I would like to use mencoder to save a movie which might have some stuff missing, but that is still playable

[20:35] <nothingmuch> ods15: ?

[20:36] <ods15> hmm?

[20:36] <nothingmuch> scroll back one line =)

[20:36] <ods15> oh sorry, was busy hacking :) /me reads Q

[20:36] <ods15> if you don't have the index, use main/TOOLS/avi-fix (don't forget '-fix'!)

[20:36] <ods15> if you do have the index, just play it back

[20:37] <nothingmuch> no index... -forceidx didn't work either. I'll grab the source and see if said avi-fix works

[20:37] <ods15> regarding avifix, you should probably >/dev/null it's output, it takes more cpu time displaying it than the program to actually work

[20:37] <nothingmuch> heh

[20:37] <ods15> avifix always works, but it's HELLA slow

[20:37] <ods15> the length of the movie is basically the amount of time it takes

[20:37] <nothingmuch> well, i can leave it overnight or something

[20:37] <ods15> yup

[20:38] <nothingmuch> even on very mean hardware? I can do it work.. =)

[20:38] <ods15> after it works you need -idx, i think, but not sure

[20:38] <ods15> nah, it's hd bottleneck, not cpu

[20:38] <ods15> pc is defenetaly useable while it's working..

[20:38] <nothingmuch> ah, in that case I have some very mean hardware for that tooo

[20:39] <nothingmuch> 6-way sata raid

[20:39] * nothingmuch benchmarked it to around 300MB (yes, bytes) per second, write speed from /dev/zero

[20:39] <nothingmuch> and slightly more than that for reading the file into /dev/null

[20:39] <ods15> lol, hehe

[20:39] <ods15> my sata sucks :( pci

[20:40] <nothingmuch> it's got an external scsi interface, so it can handle that load =)

[20:43] <nothingmuch> ods15: it's outputting 6 lines and exiting with status 1

[20:45] <ods15> i dunno. i don't remember much of that prog

[20:48] *** PerlJam_ is now known as PerlJam

[20:51] *** chip_ is now known as chip

[21:06] * Aankhen`` goes to sleep.

[21:07] <Aankhen``> G'night.

[21:54] <renormalist> Hi all!

[21:55] <renormalist> I currently don't quite understand with which kind of regular expression I can work in Pugs. It feels like the half of Apo/Ex/Syn 05, but without the subpatterns and the new stuff?

[21:56] <renormalist> is there a description what the current useable regex language is in Pugs?

[21:57] <renormalist> I'm also interested in modifiers like :overlap,  :exhaustive and the like.

[21:58] <renormalist> anyone with a hint awake?

[21:59] <QtPlatypus> renormalist: You can use the grammer parsing capabilities of the regex rules.

[22:00] <QtPlatypus> An I think they have just resently got :w to work.

[22:07] <renormalist> Who is working on this, i.e. whose logs do I have to read to see what happens in that rules-area?

[22:07] <renormalist> or will it just appear in autijus journal entries?

[22:07] <QtPlatypus> Most of the PGE is done on the parrot side of the world.

[22:08] <renormalist> also things like <$subrule> , the stuff that feels like Parse:recdescent?

[22:59] <QtPlatypus> <subrule> works

[22:59] <QtPlatypus> { } doesn't work yet.

[23:13] <fglock_> hi

