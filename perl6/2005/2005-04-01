[00:32] <Darren_Duncan> regarding SQL::Routine perl6ification ...

[00:33] <Darren_Duncan> the commit of a minute ago is the first of a series where I look at methods in detail and make sure each is completely transformed

[00:33] <Darren_Duncan> by contrast, the previous commits were mainly widespread search-n-replaces

[00:33] <Darren_Duncan> I hope to do that whole series today

[00:34] <Darren_Duncan> that is all

[00:34] * shapr cheers

[00:34] <crysflame> :)

[00:34] <theorbtwo>  Sounds cool, DD.

[00:34] <crysflame> you rule

[00:34] <Darren_Duncan> multi-methods are quite useful

[00:34] <shapr> yeah

[00:34] <Darren_Duncan> using them is more elegant than single methods that return different types of things depending on what their args were

[00:35] <Darren_Duncan> see the last commit, information functions, as an example ...

[00:35] <shapr> and you don't need the visitor pattern anymore

[00:35] <Darren_Duncan> depending on their args, they either returned a list or a single value

[00:35] <Darren_Duncan> have to look up meaning of 'visitor pattern'

[00:35] <crysflame> http://www.ambrosiasw.com/games/darwinia/

[00:35] <crysflame> er, ww

[00:36] <Darren_Duncan> I know its a 'design pattern'

[00:36] <Darren_Duncan> brb

[00:36] <shapr> If you needed multi-methods, and you only had single-dispatch OO, you'd write the visitor pattern.

[00:37] <Darren_Duncan> I see

[00:38] <Darren_Duncan> Ambrosia sw rox

[00:39] <Darren_Duncan> they had the first visually attractive games back in 1993

[00:39] <Darren_Duncan> such as 'Maelstrom'

[00:39] <crysflame> :)

[00:40] <crysflame> the author of Solarian II re-released it for OS X

[00:40] <Darren_Duncan> I heard ... would be nice if all the classics were made X native

[00:40] <Darren_Duncan> parts of Escape Velocity were done

[00:41] <theorbtwo> Interesting... I'm now seeing the problem Corion was earlier, with tests not giving the position data.

[00:41] <jabbot> pugs - 1382 - SQL::Routine - completed perl6ification 

[00:41] <crysflame> mm, yes

[00:42] <Darren_Duncan> it occurs to me, though, that with said SRT information functions, they could become ordinary methods if I simply changed their names, such as differing with the suffix 's' or not ... then I could back-port this to Perl 5

[00:43] <Darren_Duncan> one fewer difference

[00:43] <Darren_Duncan> that rename may also make them more descriptive

[00:46] <Darren_Duncan> that said, I will hold off on any such change for another time

[00:53] <shapr> I guess it's a bit early for pugs debs.

[01:14] <Khisanth> what the heck is the priority ghc is using when compiling pugs? 

[01:22] <Darren_Duncan> quick question ... the proper way to count the number of elements in an array or hash?

[01:43] <stevan> Darren_Duncan: +@array

[01:43] <stevan> that forces the array into numeric context

[01:43] <Darren_Duncan> thanks

[01:43] <Darren_Duncan> which synopsis is that?

[01:43] <stevan> for a hash I would expect either: +%hash.keys or something like that

[01:43] <stevan> Darren_Duncan: not sure if it is the synopsis

[01:45] <stevan> Darren_Duncan: check the one about data-types (4 I think) and if not, try the operators one, but I think i read this in the Perl6 & Parrot book

[01:45] <Darren_Duncan> gotit

[01:51] <jabbot> pugs - 1385 - * test failed.

[01:51] <jabbot> pugs - 1384 - * set up a symlink... purely experiment

[01:51] <jabbot> pugs - 1383 - * move testgraph.css to util/

[02:02] *** theorb_ is now known as theorbtwo

[02:07] <theorbtwo> Oh: Can we set up the SVN to keep an up-to-date copy of A* S* E* in the docs dir?

[02:08] <stevan> theorbtwo: where are the up-to-date copies stored?

[02:10] <theorbtwo> http://dev.perl.org/perl6/apocalypse/A<nn>.pod, and such.

[02:10] <theorbtwo> But I've heard rumor of them being under some sort of VC somewhere.

[02:16] <theorbtwo> http://svn.perl.org/perl6/doc/trunk/design/

[02:19] <stevan> theorbtwo: sounds like a job for SVK maybe?

[02:20] <theorbtwo> I think the pugs repo really uses SVK, not SVN, but that's a guess, mostly based on the fact that Autrijus is invloved.

[02:20] <Khisanth> there is no SVK server is there?

[02:21] <jabbot> pugs - 1386 - SRT perl6ification - changed subtype Nod

[02:23] <mugwump> svk isn't a server yet, it's like a glorified client that keeps its own repository

[02:23] <theorbtwo> Ah.

[02:24] <theorbtwo> In any case, it seems like a job for Autrijus.

[02:24] <theorbtwo> ...or at least someone who is much more comfortable doing strangeish things with SV[NK] then I am.

[02:24] <mugwump> are you familiar with cvs?

[02:24] <theorbtwo> Not very.

[02:28] <mugwump> well, if you can get svk installedf (apt-get install svk ;)) then all you need to do is `svk co http://svn.perl.org/perl6', say.  It will set up a mirror, pull out all the versions to date and put them in your local repository, then give you a working copy.

[02:30] <mugwump> As a word of warning though, the docs don't make it all that clear that you shouldn't use the --skipto feature on full project roots... if you only want to mirror the head N releases, only mirror from trunk/ and below

[02:30] <mugwump> otherwise the magic svn lazy copies aren't lazy :)

[02:31] <mugwump> Once you've got it, you can use `syk pull' from within the working directory to update, and that's pretty much all you need to know to use it read-only

[02:31] <mugwump> s/syk/svk/

[02:32] <theorbtwo> Hm, that seems reasonable enough.  I wonder if I can insert a file with full history into the pugs repo, though.

[02:32] <mugwump> which file would you want to do that wiuth?

[02:33] <theorbtwo> The [ASE]* files.

[02:33] <mugwump> the Synopses are already there FWIW

[02:33] <theorbtwo> I know.

[02:33] <mugwump> great

[02:35] <theorbtwo> I'm not sure they're up-to-date, though -- one of them seems to be short a paragraph.

[02:38] <mugwump> easy way to solve this.  putting them there was a stopgap measure in the first place, so now they can go :)

[02:38] <theorbtwo> They shouldn't go, but they should move, and become complete.

[02:39] <mugwump> I just spoke to autrijus about it

[02:40] <mugwump> the util/testgraph.pl program downloads them automatically

[02:40] <theorbtwo> Oh?  What did he say?  (I kind of wondered why he was so quiet...)

[02:40] <theorbtwo> Should, you mean?

[02:40] <mugwump> whatever

[02:40] <shapr> I've added an op1 "chr", where do I add that as the "chr()" call?

[02:40] * shapr digs around

[02:40] <stevan> shapr: I think all you need to do is add it to the list at the bottom of Prim.hs

[02:41] <stevan> all the way at the bottom

[02:41] <shapr> ah, I see.

[02:42] <stevan> shapr: http://pugs.kwiki.org/?CreatingANewOp

[02:43] <shapr> that's helpful.

[02:45] <shapr> what does chr get for left/right ?

[02:47] <theorbtwo>   pre

[02:47] <shapr> thanks

[02:47] <theorbtwo> That's the associativity/syntatic category; it's a prefix op.

[02:47] <theorbtwo> (left and right are infix ops)

[02:48] <shapr> Yeah, makes sense.

[03:47] <Alias_> heh

[03:47] <hattmoward> ouch

[03:47] <Alias_> Idiots, April Fools is over

[03:47] <Khisanth> it's still march!

[03:47] *** Alias_ changes topic to: Pay no attention to the man behaind the lilo messages | pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | Auto-smoke: http://kungfuftr.com/pugs-smoke.html | win2k:r1378(224/3842) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[03:51] * hattmoward puts lilo back on ignore. bad monkey

[03:53] * theorbtwo wonders: why android itch, of all things?

[03:54] <hattmoward> ?

[03:55] <theorbtwo> The URL he gave redirects to a google search for android itch.

[03:55] <theorbtwo> Or at least it does for me.

[03:55] <hattmoward> paste it in again

[03:55] <hattmoward> a few times

[03:56] <hattmoward> well, it just got switched again

[03:56] <theorbtwo> Ah.

[03:56] <theorbtwo> Mmpf.

[03:57] <theorbtwo> Not very funny.

[03:57] <theorbtwo> Very very obvious.

[03:57] * theorbtwo remembers when /. and several other sites had as an april fool's joke that they had gotten bought out.

[03:57] <theorbtwo> Then a few months later, they were all bought out.

[03:58] <hattmoward> I didn't remember that some of the planet is well into April 1 when the first message went

[03:58] <hattmoward> heh

[03:58] <theorbtwo> 6 hours.  For some people, it's over.

[03:58] <Alias_> It's over for me

[03:59] <jdv79> still an hour away from 4/1 here

[03:59] <hattmoward> I've got 61 minutes

[04:00] <hattmoward> related subject: 4/1 is my birthday

[04:00] <theorbtwo> Sobored.

[04:00] <jdv79> happy Bday!

[04:00] <theorbtwo> Happy birthday, hatt!

[04:00] <hattmoward> thankee

[04:08] <metaperl> what do I supply to Makefile.PL to have it install in ~/install/bin

[04:08] <metaperl> instead /usr/...

[04:08] <metaperl> PREFIX= ... did not work

[04:13] <metaperl> is it not possible to build pugs for non-root install?

[04:16] * Khisanth scratches his head

[04:17] <Khisanth> I thought pugs -e 'say "blah"' works?

[04:19] <metaperl> it does but perl -V shows @INC set to non-local places

[04:21] <Khisanth> well doing it interactively works ...

[04:22] <metaperl> but it is failing to parse use Config::Tiny

[04:22] <theorbtwo> metaperl, that'd be because 'use' is not yet parsed.

[04:23] <theorbtwo> Require it instead.

[04:23] <metaperl> oh do I need a begin block?

[04:24] <metaperl> BEGIN { require COnfig::Tiny } ;

[04:24] <metaperl> ?

[04:24] <Khisanth> BEGIN is probably not implemented either?

[04:26] <metaperl> here's my error: http://www.hcoop.net/~terry/haskell/pugs/pugs/tmp/ct.err

[04:26] <metaperl> the require is not finding the module

[04:28] <theorbtwo> That's not a pugs error message; that's a perl (5) error message.

[04:28] <metaperl> hmm

[04:28] <theorbtwo> Wait... no, it's not, it's just very similar, and somewhat inaccurate.

[04:28] <metaperl> look at the loadpath

[04:28] <theorbtwo> Yeah.

[04:29] <theorbtwo> It should say @*INC, though.

[04:29] <metaperl> the * means what?

[04:29] <mugwump> global

[04:29] <mugwump> kind of :

[04:29] <metaperl> global package... I see

[04:29] <mugwump> :)

[04:29] <theorbtwo> That it's magical.

[04:29] <mugwump> It's called a twigil

[04:30] <theorbtwo> secondary sigil is the technical term...

[04:30] <mugwump> I saw larry use the term twigil so there :P

[04:31] <Khisanth> but larry is always saying strange things...

[04:35] <lucs> I had supposed that 'twigil' referred to the two characters functioning as a sigil unit does.

[04:35] <lucs> s/unit //

[04:51] * lucs & # ZZ

[05:14] <Khisanth> isn't ucfirst.t missing a test?

[05:20] <crysflame> sig and twig

[05:20] <Alias_> Does Config::Tiny actually work?

[05:20] <crysflame> thrig, fig, vig, sig, seg, eig, nig (eep!), teg

[05:20] * crysflame mutters to himself in the corner

[05:27] <Khisanth> crysflame: you sound drunk :)

[05:27] <crysflame> i'm always like this

[05:27] <crysflame> when i'm drunk, it's worse.  DE BUGGEE GOT LOSS is one quote.

[05:27] <crysflame> someday i'll figure out how to focus it through coding. then the world shall pay. muahahaha *koff*

[05:28] <autrijus> greetings.

[05:28] <crysflame> until then, the least i can do is cheer autrijus's efforts. he makes things that make stuff go.

[05:28] <crysflame> speaking of.

[05:31] <jabbot> pugs - 1387 - cleanup refactoring

[05:31] <theorbtw1> Greetings, autrijus!

[05:33] <autrijus> :) how goes?

[05:33] <autrijus> crysflame: your cheer means a lot :)

[05:33] <autrijus> you know I'm motivated by cheers

[05:34] <crysflame> i didn't, actually, but i don't usually ask first

[05:34] <crysflame> glad to hear it helps

[05:35] <crysflame> soon i will have a place to sit and type

[05:35] <crysflame> then.. yay

[05:36] * theorbtw1 cheers autrijus some more.

[05:36] * crysflame hands out pom-poms and short skirts

[05:36] <theorbtw1> You make things so fast that I can watch you go.

[05:36] <crysflame> the commitbot is awesome

[05:37] * theorbtw1 hopes he doesn't have to shave his legs.

[05:37] <crysflame> au naturel

[05:37] * q[acme] does a double flip pyramid with a twist

[05:37] <crysflame> acme: hi!

[05:37] <crysflame> it's the 1st where you're at

[05:38] <q[acme]> i'd better do an april fool's joke, then

[05:38] * crysflame inverts the pyramid, ending up inside a small space-time defect.

[05:38] * theorbtw1 has been disappointed that there haven't been any pugsy april fool's jokes.

[05:39] <Alias_> crysflame: The infamouse inverted 5-dimensional hyperdildo?

[05:39] *** [1]metaperl_ is now known as metaperl_

[05:39] *** theorbtw1 is now known as theorbtwo

[05:39] <crysflame> Alias: i've got a wormhole in my pocket!

[05:39] <theorbtwo> Ha, was fast enough this time.

[05:39] * crysflame blinks at theorb

[05:40] <theorbtwo> The laptop in the other room auto-reconnects... rather quickly.

[05:42] <theorbtwo> Oh, autrijus, what's the reasoning on not wanting to include the perl design docs in the SVN?

[05:43] <theorbtwo> I thought it was going to go in the Perl6:: namespace, so man Perl6::A12 could do the right thing.

[05:43] <mugwump> no point in duplicating it, it just gets out of date as you discovered

[05:44] <theorbtwo> Should be fixable decently easily.

[05:45] <theorbtwo> There are a number of points in duplicating it, and it can be kept up-to-date with not too much effort.

[05:45] <mugwump> the plan is

[05:45] <mugwump> 14:40 < mugwump> the util/testgraph.pl program downloads them automatically

[05:46] <mugwump> If you want to maintain them as seperate modules, go ahead and build them by all means, but please don't duplicate their content in the pugs tree. TIA

[05:46] <theorbtwo> TIA?

[05:47] <mugwump> thanks in advance

[05:51] <theorbtwo> Mugwump: That's a repeat of what you already said, not a reason.  Also, I very purposefully asked Autrijus, not you.

[05:51] <theorbtwo> Oh, and testgraph is the wrong place to do it.

[06:46] <Darren_Duncan> question on the identity operator, '=:=' ...

[06:46] <Darren_Duncan> according to S03, if you said '$x := $y', then later '$x =:= $y' would return true ...

[06:47] <mugwump> sounds reasonable :)

[06:47] <Darren_Duncan> my question is, if two references point to the same thing, will =:= tell you if they point to the same thing?

[06:47] <Darren_Duncan> if not, what is the correct operator to use to compare two references?

[06:48] <mugwump> I remember encountering this in perl5 eith the 0+ 'operator' I later converted to refaddr

[06:48] <theorbtwo> == will tell you if two references point to the same place.

[06:48] <theorbtwo> =:= will tell you if two things are really different names for the same thing.

[06:48] <Darren_Duncan> in Perl 5, a simple string compare worked because the stringified versions of a ref were distinct for the target

[06:48] * castaway thwaps freenode

[06:49] <Darren_Duncan> so, are you saying that I should use == then to compare references?

[06:49] <mugwump> A numeric compare worked, too, because objects and hashes numified to their memory address

[06:49] <theorbtwo> Yes, DD.

[06:49] <mugwump> maybe not hashese

[06:50] <theorbtwo> Hashes aren't supposed to nummify to their address, AFAIK.

[06:50] <Darren_Duncan> at this point, all I care about is objects

[06:51] <Darren_Duncan> eg, I want to remove a reference to a given object from a list, so I need the right test to know which list element is pointing to it

[06:52] <theorbtwo> AFAIK, == is the right operator to see if two references point to the same place, just like in p5

[06:52] <Darren_Duncan> where does it say that?

[06:53] <mugwump> Darren_Duncan, are you after sets perchance?

[06:53] <Darren_Duncan> objects

[06:53] <Darren_Duncan> I'll be more specific

[06:53] <mugwump> what I mean is, are you using a list like a set/

[06:53] <Darren_Duncan> I have a tree of Nodes, where each Node points to both its parent and its children

[06:53] <mugwump> ah

[06:53] <Darren_Duncan> when I delete a node, I need to remove all references to it

[06:53] <Darren_Duncan> from other nodes

[06:54] <Darren_Duncan> in this case, the curren't Node's parent has refs to its children in an array

[06:54] <Darren_Duncan> so I have to know which array element to delete

[06:54] <mugwump> yeah.  so what you want is an ordered list with an object key index.

[06:54] * mugwump hmms

[06:55] <Darren_Duncan> what I have is an array of object refs

[06:55] <Darren_Duncan> in Perl 5, an object ref stringified into something distinct per object, so I did an 'eq' in Perl 5 ... but in Perl 6 I want something better

[06:56] <Darren_Duncan> I shouldn't have to convert a ref to anything else in order to compare it

[06:56] * mugwump nods

[06:56] <mugwump> I agree, but I also see why you'd want to be able to overload ==

[06:57] <Darren_Duncan> I like how Perl has different comp operators depending on the data type, ...

[06:57] <Darren_Duncan> for example, it makes things a lot easier to see when you're doing a string vs a num compare

[06:57] <theorbtwo> Hm, I'd expect taking a reference to the same thing two different times would make them ==, but not =:=

[06:57] <Darren_Duncan> so if =:= did what I wanted, it would go further in that direction, making code more self documenting

[06:58] <Darren_Duncan> also consider that, in Perl 6, the line between refs and what they point to is blurred

[06:58] <Darren_Duncan> doing an ordinary 'eq' or '==' may end up comparing what the refs point to

[06:59] <mugwump> yes, precisely - overloadable

[06:59] <Darren_Duncan> conceptually, I don't see how refs and identity are any different from each other

[06:59] <theorbtwo> But if I do $x=42; $a=\$x but true; $b=\x but false; $a =:= $b, I should get false, because $a and $b are not the same thing.

[06:59] <Darren_Duncan> as far as I'm concerned, '=:=' is the RIGHT answer

[07:00] <castaway> (wtf is that, the wing operator?)

[07:00] <theorbtwo> But it means that if you pass =:= two refs, it behaves very differently then if you passed it two of anything else.

[07:00] <theorbtwo> "Are bound to the same thing".

[07:00] <mugwump> the 2-in-1 operator I think, castaway 

[07:00] <Darren_Duncan> =:= is an 'identity test' - see 'Binding' in S03

[07:00] <mugwump> you are both correct

[07:01] <mugwump> but focusing on a different aspect, I think anyway

[07:01] <Darren_Duncan> unless I can find a definitive answer, I will use =:= in my perl6ification for now because I see it as the most self-documenting of my intent

[07:02] <theorbtwo> You might want to ask on p6l.

[07:02] <Darren_Duncan> good idea

[07:02] <Darren_Duncan> I'll do it right now ...

[07:05] <Darren_Duncan> actually, first I'll review S12 again, in case it's in there ...

[07:05] <mugwump> so, == is value comparison, =:= is variable comparison, === is object comparison (where === is some ficticious operator)

[07:06] <castaway> and if you dont care what the things are you're checking? (hmm, what happened to no types.. )

[07:07] <mugwump> no types?  what?

[07:07] <Darren_Duncan> in this case, the environment is controlled such that I already know if both items are both objects of the right class before I compare them

[07:08] <theorbtwo> eq asks "do these things have the same string value", == asks "do these things have the same numeric value", =:= asks "are these just different names for the same thing"

[07:08] <Darren_Duncan> so I thought, and 2 refs to something are sort of like two names for it

[07:09] <mugwump> wait, object references aren't references anymore, are they.  they're just objects.

[07:09] <mugwump> :-/

[07:09] <theorbtwo> No, they're two references to the same thing, but not the same thing twice.

[07:09] <castaway> mugwump, no types, in p5

[07:09] <theorbtwo> Different references to the same thing can have different properties attached to them.

[07:10] <theorbtwo> Undeffing one doesn't undef the other.

[07:10] <Darren_Duncan> Perl 6 has a capital-r Ref and a low-r ref types

[07:10] <theorbtwo> castaway: Perl6 has typing, but it's optional.

[07:10] <mugwump> S09 details lots of Perl 6 types, what do you mean, castaway ?

[07:10] <Darren_Duncan> away for a few minutes ...

[07:10] <castaway> mugwump: I actually dont give much of a damn about p6, ta anyway

[07:11] <castaway> optional meaning, it should 'just work' without?

[07:11] <theorbtwo> Then why are you in #perl6?

[07:11] <theorbtwo> Yes.

[07:11] <castaway> looking for you, mostly

[07:11] <castaway> and chatting about keyboards ,)

[07:11] <mugwump> ok, so Perl6 has "ref" and "Ref" types

[07:12] <mugwump> but, that doesn't mean that a variable $foo is a scalar which is a ref to an Object like in P5

[07:13] <theorbtwo> Right.

[07:13] <theorbtwo> But 1: Pugs doesn't have ref and Ref, just Ref.

[07:13] <theorbtwo> 2: This isn't related to anything being discussed.

[07:14] <theorbtwo> 3: The question was specificly about references, not scalars holding objects.

[07:16] <mugwump> I think Darren's referring to the refs under the hood, to compare object identity

[07:19] * castaway .oO( ok, I should probably read up if I wanna make sense of you guys ,)

[07:20] <mugwump> castaway: got pugs?

[07:20] <castaway> well, theorbtwo does, and his computer sits next to mine, so in theory, yes

[07:22] <castaway> why do you ask?

[07:28] <theorbtwo> Because pugs is how you experince p6.

[07:30] <Darren_Duncan> back again

[07:31] <castaway> Well, yes, but reading docs is how you find out about all trhe ref/Ref and operator stuff, no?

[07:31] <mugwump> sure, but playing with code is more fun than listening to conversations like this ;)

[07:32] <mugwump> OK, so the question is, does =:= compare lexical identity or object identity?

[07:32] <theorbtwo> Lexical, that's what it's for.

[07:33] <mugwump> And, if it did compare object identity (and, by extension, lexical identity), is the difference sufficiently obscure that you can use the 'other' means to get at it?

[07:34] * castaway is currently playing with elisp, and since p6 seems to be a whole other language, just playing probably isnt useful without reading some.

[07:34] <mugwump> castaway: play with haskell!  :-D

[07:34] <mugwump> it's functional too!

[07:35] <castaway> yeah, but its not integrated into emacs (yet) :)

[07:35] <mugwump> true

[07:37] <Darren_Duncan> I didn't find anything definitive, so resuming a writ to p6l ...

[07:37] <mugwump> yes, do you agree with the question as I stated it, theorbtwo & Darren_Duncan ?

[07:38] <Darren_Duncan> let me reread it ...

[07:38] <mugwump> (obviously there is no clear answer)

[07:38] <Darren_Duncan> I would say that object identity and lexical identity are different

[07:38] <theorbtwo> I'm not sure what you mean by object identity vs lexical identity.

[07:39] <theorbtwo> I certianly agree that the definition of =:= is rather vauge.

[07:39] <castaway> jaboot: synopsis ?

[07:40] <castaway> oops, 

[07:40] <theorbtwo> lilith:/usr/src/pugs/docs/A12.pod

[07:40] <castaway> jabbot: synopsis ?

[07:40] <jabbot> castaway: Tell me more about that.

[07:40] <castaway> thanks

[07:40] <castaway> (hmm, that URI should 'just work' ,)

[07:40] <theorbtwo> No, it shouldn't; it's not a well-formed URI.

[07:41] <mugwump> Different?  What's a ? between fiends?

[07:41] <castaway> hmm.. ssh://lilith:/usr/src/pugs/docs/A12.pod ? :)

[07:41] <theorbtwo> file://lilith/usr/src/pugs/docs/A12.pod , OTOH...

[07:41] <mugwump> *friends

[07:41] <castaway> oops, minus the second :

[07:41] <castaway> ah, yes

[07:42] <mugwump> bah, that should have been a lambda

[07:42] <kungfuftr> mugwump: naked lunch?

[07:43] <mugwump> I'll take, "what's the novel that mugwump takes his nick from", for 50 points

[07:44] <kungfuftr> heh

[07:44] * castaway should know that one, but cant place it atm

[07:45] <kungfuftr> david lynch movie too, iirc

[07:45] <mugwump> yes, although the movie mugwump was quite different from the description in the book :)

[07:46] <rgs> not lynch, cronenberg I think

[07:46] <Darren_Duncan> I just sent the p6l messag

[07:46] <kungfuftr> rightio... off to work, then off to edinburgh!

[07:46] <Darren_Duncan> it also occurs to me that what I want to do is indeed different than what =:= does

[07:47] <Darren_Duncan> the difference being one level of indirection

[07:48] <Darren_Duncan> a Ref is a container that points to another container, while a scalar et al is the container; identity and binding works with the latter case

[07:48] <Darren_Duncan> I thought I heard once that '===' is what I want, but I couldn't find it later

[07:48] <Darren_Duncan> hopefully p6l will know

[07:48] <mugwump> That's the Perl 5 model, but bear in mind you don't need the scalar to be a ref, it can be an "object"

[07:49] <Darren_Duncan> yes, objects and refs are technically different

[07:49] <mugwump> ie, a variable holds a ref which points to a blessed thingy in Perl5

[07:49] <mugwump> what I'm saying is that the ref can be completely under the hood, but it doesn't change the lexical vs value thing

[07:50] <theorbtwo> But =:= shouldn't return true if the two things are different in any discernable way.

[07:50] <Darren_Duncan> I'm going to move on to other matters and wait for what is said on p6l

[07:50] <mugwump> good call

[08:50] <shapr> castaway: there's a cute interactive haskell plugin for the famous lambdabot

[08:52] <castaway> famours where? :)

[08:52] <shapr> famous on #haskell at least

[08:52] <castaway> heh

[08:52] <lightstep> i just beat it

[08:52] <shapr> with a stick

[08:54] <shapr> I could invite the bot over here and show you, if you want.

[08:54] <castaway> sure

[08:54] <shapr> it does make a lot of traffic though, so it might irritate some people.

[08:54] <theorbtwo> lambdabot, hello

[08:54] <shapr> @plugs map (+1) [1..5]

[08:54] <lambdabot> [2,3,4,5,6]

[08:55] <lightstep> jabbot, @plugs map (+1) [1..5]

[08:55] <jabbot> lightstep: Please go on.

[08:55] <shapr> Of course, it can't deal with algebraic definitions, but it can do interactive stuff.

[08:55] <theorbtwo> @plugs :t map (+1)

[08:55] <lambdabot> <Plugins.Eval>:1: parse error on input `:'

[08:55] <shapr> @plugs sequence [[1,2],[3,4]]

[08:55] <castaway> hmm,m most useful one I've seen so far is #emacs' fsbot

[08:55] <lambdabot> [[1,3],[1,4],[2,3],[2,4]]

[08:55] <castaway> (does elisp :)

[08:56] <shapr> lambdabot and fsbot are from the same generation.

[08:57] <shapr> delYsid was on #haskell and I was on #emacs a lot when they were both very small bits of code.

[08:57] <castaway> heh :)

[08:57] <shapr> though deego was the first author of fsbot 

[08:57] <shapr> and fsbot really started as a tiny extension to ERC

[08:57] * castaway doesnt know enough haskell to play

[08:58] <shapr> would you like the short Haskell intro?

[08:58] <lightstep> it has a nicer arithmetic syntax than lisp

[08:58] <shapr> I wrote up a HaskellDemo for the extremely impatient. Like me.

[08:58] <theorbtwo> It has nicer syntax then lisp, but not as nice as perl. ;)

[08:59] <castaway> hmm, sure.. I read some of a doc that theorbtwo was reading.. then switched to lisp

[08:59] <shapr> Here's the demo I wrote - http://www.haskell.org/hawiki/HaskellDemo

[08:59] <castaway> I quite like lisp :)

[09:00] <shapr> I used to write a bunch of elisp and scheme, but nowadays I prefer Haskell. I like the no side-effects bit.

[09:00] <kungfuftr> bah! css was buggered there... right... who moved it!??

[09:00] * shapr ducks

[09:00] <theorbtwo> autrijus.

[09:01] <kungfuftr> heh, will re-structure it over the weekend

[09:01] <theorbtwo> kung, also, categorize_tests.jmm.pl moved to categorize_tests.pl

[09:01] <kungfuftr> ah!

[09:01] <kungfuftr> kk

[09:01] <Khisanth> shapr: know of any place with a list/table of what the various symbols mean?

[09:01] <kungfuftr> ta

[09:01] <shapr> Khisanth: which symbols?

[09:01] <jabbot> pugs - 1388 - SQL::Routine perl6ification increment - 

[09:02] <Khisanth> ones like :: -> <- => \

[09:02] <castaway> ta, shapr

[09:02] <theorbtwo> That one was me, kungfuftr.

[09:02] <shapr> oh, I can show you what they mean.

[09:02] <shapr> the -> symbol has two meanings, one in a type signature and one in an anonymous function.

[09:02] <Khisanth> how?

[09:02] <theorbtwo> -> overuse is one of the things I don't like about Haskell, but I suspect you'll get used to it.

[09:03] <shapr> @plugs (\x -> x + 1) 1

[09:03] <lightstep> also a third meaning, in a case expression

[09:03] <lambdabot> 2

[09:03] <shapr> Khisanth: the HaskellDemo url I pasted shows off most of the stuff.

[09:03] <shapr> but \x -> x + 1 creates an anonymous function that takes x as an argument and evaluates to one more than x

[09:04] <shapr> \x y -> x + y -- adds x and y

[09:04] <theorbtwo> (Perl5 translation: (sub {my $x=shift; $x+1})->(1);  )

[09:04] <shapr> the <- symbol is a sexy version of >>= which is part of monads.

[09:05] <theorbtwo> (That's another reason I don't like haskell -- <- and -> aren't very related, nor are ++ and --.)

[09:05] <shapr> If you use partial application instead of an anonymous function, it's (+1)

[09:05] <shapr> Hm, I think <- and -> are related. I agree that -- and ++ have totally different meanings though.

[09:05] <Khisanth> no haskell equivalent of perldoc perlop? :)

[09:06] <lightstep> in haskell, operators are redefinable everywhere

[09:06] <shapr> What's perldoc perlop?

[09:06] <lightstep> you can define x + y = x * y

[09:06] <theorbtwo> Documentation for perl's operators.

[09:06] <castaway> its a doc abouit the perl operators

[09:06] <Khisanth> basically a list of all the ops and what they do

[09:06] <wilx> Eeek!

[09:06] <theorbtwo> Run perldoc perlop on any system with perl installed.  ;)

[09:06] <wilx> That is evil :)

[09:06] <lightstep> and libraries define new operator symbols all the time

[09:07] <theorbtwo> I note that you can do that in perl6 as well.  We just expect people to be sane enough to not do that.

[09:07] <lightstep> (<<) is in Text.Html, but (>>>) is in Control.Arrow

[09:07] <Khisanth> theorbtwo: there are too many insane individuals in the Perl community for that expectation

[09:07] <shapr> perldoc perlop is neat

[09:08] <Khisanth> just look at all the Acme:: modules!

[09:08] <castaway> umm, what does that produce? (the x + y = x * y ?)

[09:08] <shapr> theorbtwo: you should see the obfuscate haskell content

[09:08] <Darren_Duncan> I'm signing off for the night ... I expect to have done the main SRT perl6ification tomorrow, covering about the quarter most complicated methods

[09:08] <theorbtwo> As another confusion, any function can be an infix operator if you write it in backticks, and any infix operator can become a normal (prefix) function by... um... I don't remember.

[09:08] <lightstep> castaway, it binds (+) to the value of (*), like a = 1+2 binds a to the value of 1+2

[09:08] <Darren_Duncan> also, the p6l post got a reply, but it was just to say they want an answer too

[09:08] <Darren_Duncan> good night

[09:09] <shapr> For the most recent IOHCC, Ulf Norell made all Haskell programs equal to each other, and added the ability to embed one program in the he source of another, sort of like a batch file virus or something. It's amazing.

[09:09] <castaway> lightstep: umm, and what does one end up with? 

[09:10] <Khisanth> shapr: that is stirring up evil ideas :)

[09:10] <lightstep> castaway, in the scope of that declaration, (+) and (*) do the same

[09:10] <theorbtwo> It makes the + operator do what the * operator did.

[09:10] <castaway> Ugg

[09:10] <castaway> Ok

[09:10] <theorbtwo> When you want to /name/ an infix operator in haskell, you write it in parens.

[09:10] <theorbtwo> (If I say something wrong, /please/ correct me.)

[09:10] <castaway> .. and the point of this is?

[09:10] <lightstep> it also gives the operator as a regular function

[09:11] <shapr> Of course, you'd have to explicitly hide the Prelude to redefine +, so it won't happen by accident.

[09:11] <lightstep> castaway, it allows you to write (.) without ending the sentence

[09:11] <castaway> you lost me again, ligh	

[09:11] <castaway> (hmm, darn tab-complete)

[09:12] <lightstep> if you write. you end the seentence

[09:12] <shapr> I don't understand.

[09:13] <theorbtwo> It's a way of referring to an operator without executing it.

[09:13] <lightstep> no

[09:13] <theorbtwo> Oh.

[09:13] <lightstep> dot is a syntactic mark in most languages, as are comma, question mark, (!) and the such

[09:14] <lightstep> in haskell source, (+) is the addition function, \x y -> x + y

[09:16] <shapr> I still think I don't understand what you meant about writing (.) without ending the sentence.

[09:17] <shapr> castaway: did you look at HaskellDemo?

[09:18] <castaway> briefly, yup.. I'm actually at work atm

[09:18] <shapr> oh

[09:18] <shapr> In that case I won't pester you.

[09:19] <castaway> heh

[09:19] <shapr> Khisanth: there is something like perldoc perlop, the info command tells you about typeclasses.

[09:19] * castaway mumbles something about bladdy ftp servers that dont support "reget"

[09:20] <lightstep> if you write an unquoted `.', say in a paper, you are likely to be misunderstood

[09:21] <Khisanth> shapr: in ghci?

[09:21] <shapr> Yup.

[09:21] <castaway> Tea!

[09:21] <shapr> Coffee!

[09:21] <shapr> red bull! w00!

[09:21] * Khisanth is on page 33 of yaht :)

[09:22] <shapr> ah, excellent

[09:22] <Khisanth> just looking for something to serve as a reference

[09:23] * castaway found that tute kinda annoying

[09:24] <Khisanth> castaway: it's annoying/challenging/fun :)

[09:25] <castaway> depends on the mindset probably :)

[09:25] <Khisanth> at the same time!

[09:25] <shapr> in a row!

[09:35] * castaway wonders if theorbtwo fell asleep

[09:35] * shapr sleeps under his desk

[09:36] <castaway> hmm, where are the pix of your desk, anyway :)

[09:36] * castaway waves towards fotango

[09:37] <theorbtwo> What?

[09:37] <castaway> what what?

[09:37] <theorbtwo> I'm not asleep.

[09:38] <castaway> woo :)

[09:38] <kungfuftr> mugwump: cpan drinking game, eh?

[09:38] <shapr> my desk?

[09:39] <shapr> I don't think anyone wants pix of my desk. I think you and Juerd are clean freaks.

[09:39] * castaway envisions stacks of stuff head-high

[09:39] * theorbtwo glances over at castaway's side of the desk.

[09:39] <theorbtwo> Nope, not a clean freak.

[09:39] * castaway showed them mess.jpg yesterday

[09:40] * castaway protests that its a space problem! .)

[09:40] <shapr> My fiancee made a rule that the mess must stay in my office.

[09:40] <castaway> hey thats a good one :)

[09:41] <shapr> She's a clean freak too. I think 95% of the humans I've met are clean freaks.

[09:42] <Khisanth> castaway: annex theorbtwo's half of the desk :)

[09:42] <trexy> hi

[09:43] <theorbtwo> Nooooo!

[09:43] <shapr> Realistically, I'm probably in the bottom 5% of room cleaners.

[09:43] <shapr> Sometimes it's just better burn the house down and buy new stuff.

[09:43] <shapr> hiya trexy!

[09:43] <trexy> hi

[09:43] <trexy> just popped in to share an idea

[09:43] <trexy> ... not sure if this is useful ... 

[09:44] <trexy> but someone could write an IRC wrapper around PUGS

[09:44] <trexy> pugsbot

[09:44] <shapr> hmm

[09:44] <trexy> so that you type perl6 into irc

[09:44] <trexy> and it can report the current state of play

[09:44] * shapr looks at lambdabot 

[09:44] * castaway grins

[09:44] <castaway> Khisanth: but where would he sit then?

[09:44] <trexy> is that what lambdabot does?

[09:45] <shapr> No, but it could. lambdabot is written in Haskell.

[09:45] <Khisanth> castaway: that would be his problem ;)

[09:45] <trexy> hmm ... ok ... just a thought

[09:45] <shapr> What do you mean by state of play?

[09:45] <shapr> number of tests?

[09:45] <trexy> what the current state of the interpreter is --

[09:45] <castaway> Khisanth: in 2 rooms/57sqm, its everyones problem

[09:45] <trexy> whether something compiles or not

[09:46] <Khisanth> hmm stuff changes too much for that

[09:47] <shapr> lambdabot does dynamic reloading, so it could automatically update and reload in case of source changes.

[09:48] <castaway> shapr, I'm fairly convinced its not a 95/5% split.. 

[09:48] <shapr> You think more than 5% of the population is messier than I am?

[09:48] <theorbtwo> It'd have to svn up before every evaluation, but I don't know how bad that is.

[09:49] <shapr> or just cron an svn up every ten minutes or so.

[09:49] <castaway> I didnt say messier.. I just dont think 95% are clean freaks

[09:49] <shapr> From my viewpoint it seems so. That's why I suspect I'm in the bottom 5%.

[09:50] <castaway> maybe you dont get about enough :)

[09:50] * shapr grins

[09:50] <shapr> It's Swedes. They're just so picky ;-)

[09:50] <castaway> possible ,)

[09:53] * shapr throws another empty coke can into the pile in the corner.

[09:55] * castaway ieks

[09:55] <castaway> doesnt it stink?

[09:55] <shapr> No?

[09:55] <shapr> Plus my fiancee 'assists' me in cleaning my room every month or so.

[09:55] <castaway> poor girl

[09:56] * shapr laughs

[09:56] <trexy> Ok ... gotta go now ... but good luck to anyone if they want to make pugsbot - a perl6 compiling IRC bot

[09:56] <trexy> cu l8tr

[09:56] <shapr> trexy: what functionality?

[09:56] <shapr> Sorry for the long delay

[09:56] <shapr> Do you want something more than number of tests passing?

[09:57] <trexy> pugs -e

[09:57] <trexy> so you can demo one liners to each other

[09:57] <shapr> hmm, I can't make that easily safe.

[09:57] <shapr> I'll check it out, good idea.

[09:57] <shapr> that's what @plugs does for Haskell.

[09:57] <castaway> Haskell strikes me as being a language that is closer to making it easier for the computer, than the programmer (like assembler) - is that just me ?

[09:58] <theorbtwo> I don't see a good way of doing it either, shapr.  The best way to do it would be to run in a chroot, and with every request throw out the chroot and start again.

[09:58] <shapr> castaway: I think it puts some assumptions into the environment.

[09:59] <shapr> For example, non-strict evaluation means you don't get to assume some things about your environment. You give up some details in order to get other benefits.

[10:00] * castaway needs examples to make sense of that

[10:00] <shapr> In my opinion, stateless side-effect-free code is great benefit. It gives you partial application, automatic memoization in some cases, lots of goodies.

[10:00] <theorbtwo> In haskell, a function is always pure (that is, the output is solely determined by the input) unless explicitly stated otherwise.

[10:01] <shapr> Perl and other imperative languages force ordered evaluation. You must have that explicitly in mind when you write code. Most people end up depending on it.

[10:01] <shapr> theorbtwo: Even monads are pure.

[10:01] <theorbtwo> That means that the compiler can do an awful lot of optimization without having to worry about impure functions.

[10:02] <shapr> If you had a programming language that really worked like a math equation, you wouldn't have known ordering of computations, but you would be able to throw a number through a system of equations to find out the result.

[10:02] <theorbtwo> OK, in that case, s/unless explicitly stated otherwise/even when they look at first glance like they aren't/

[10:02] <shapr> That's Haskell, pretty much.

[10:03] <drbean> 6.0.13 is taking hours to compile, but 6.0.11 just a couple of minutes. Why is that?

[10:03] <castaway> (why does it all sound so academic?)

[10:03] <shapr> Because Perl is equally academic but most people don't look at it that way =)

[10:03] <shapr> My opinion, of course.

[10:04] <theorbtwo> Because there's a lot more there in 6.0.13.  But also, IIRC, GHC 6.4 compiles faster then 6.2.2.

[10:04] <castaway> hmm, maybe I dont mean academic.. maybe "impractical" ?

[10:04] <shapr> Most students who use Haskell don't know all this stuff explicitly, but they rely on it when they write Haskell code.

[10:04] <shapr> What about it seems impractical?

[10:04] <drbean> thanks, I'm glad I have GHC 6.4

[10:04] <trexy> just one more idea for the melting pot

[10:04] <theorbtwo> Oh.  Nevermind, then.

[10:04] <castaway> the non side-effect thing.. which one has to work around, for example, to get screen output, no?

[10:05] <trexy> I mentioned this here ... a while back

[10:05] <ihb> shapr: what do they rely on but aren't explicitly aware of?

[10:05] <castaway> I did a semester of Miranda at uni, and never figured out what use it actually had

[10:05] <lightstep> provable non-mixing of transactional memory and io seems impossible

[10:05] <trexy> this site is doing the Perl Cookbook in other languages: http://pleac.sourceforge.net/

[10:05] <shapr> Yes, you're right. readLine can't return the same value everytime, wouldn't be very useful.

[10:06] <trexy> it would be a cool learning aid to have the Perl6 versions of the Perl5 recipes

[10:06] <castaway> exactly, so the purity is broken.. why have a rule that you then have to break?

[10:06] <shapr> ihb: lots of 'academic' knowledge that they know but can't explain.

[10:06] <shapr> castaway: because the rule isn't broken =)

[10:06] <ihb> shapr: an example?

[10:06] <lightstep> castaway, you can compute whole programs

[10:06] <shapr> readLine can return the same value for every unique input.

[10:06] <lightstep> s/can/

[10:07] <lightstep> /

[10:07] <theorbtwo> Through the magic of monads, every time you call readLine, you pass it a different IO parameter... as I understand it.

[10:07] <shapr> Like if you wrote a calculator program in Haskell, you could explicitly pass the 'memory' around as a value.

[10:07] <shapr> and it would look like the calculator function had a side-effect.

[10:07] * castaway scratches head.

[10:07] <shapr> Makes sense?

[10:07] <castaway> not much

[10:07] <lightstep> readLine is not a function at all. it's a composable program that creates a String when run

[10:08] <ihb> shapr: like you do in Prolog when you don't want to use assert/retract when writing eg. adventure games (which seem popular in Prolog :-))

[10:08] <lightstep> you can compose it with the program calculate: readLine >>= calculate

[10:09] <castaway> it doesnt contain/use functions_

[10:09] <castaway> ?

[10:09] <ihb> shapr: (that was a question, btw, but i lost the questionmark)

[10:09] <lightstep> calculate is a function in this case (that creates programs)

[10:10] <lightstep> it's the same as do {line <- readLine; calculate line}

[10:10] <shapr> ihb: I haven't used Prolog, so I don't know assert/retract. But it sounds like the same sort of unconscious 'academic' detail that everybody knows implicitly, but maybe not explicitly.

[10:10] <castaway> sorry lightstep, that syntax is so much double dutch to me :)

[10:10] <ihb> so the program isn't functional, then?

[10:11] <shapr> A monadic IO program is purely functional.

[10:11] <Alias_> <speech person="Princess Leia">The more language feature you try to add, the more programmers will slip through your fingers</speec>

[10:11] <Alias_> err... </speech>

[10:11] <shapr> In fact, I think the monadic abstraction is more general and powerful than the OOP abstraction.

[10:11] <shapr> It's definitely simpler.

[10:12] <ihb> shapr: except the popular way to have a state in Prolog seems to be using assert/retract (with would be run-time definitions of rules. call it global variables if you want, because that's how they're used in this case), at least in introductory texts.

[10:12] <lightstep> haskell is anti-popular by design (according to simon's presentation)

[10:12] <castaway> heh

[10:13] <shapr> ihb: that sounds like most student Haskell programs.

[10:13] <Alias_> What's the largest known Haskell codebase?

[10:13] <lightstep> ghc

[10:13] <shapr> Nah, there are quite a few larger programs.

[10:13] <lightstep> such as?

[10:14] <ihb> shapr: and it sucks, because you then usually can't use the program to brute-force a solution to the adventure.

[10:14] <shapr> InForM is massive, Galois has a bunch of code they've written for the US Gov't that is huge, but I haven't been able to get a copy (no surprise)

[10:14] <shapr> There's the Spanish Language Prototyping System

[10:14] <shapr> The BlueSpec compiler is rumored to be larger than GHC.

[10:15] <shapr> Xilinx and Intel Haskell codebases are rumored to each be larger than GHC.

[10:15] <Alias_> So they are mostly technical compilery tasks?

[10:15] <crysflame> xilinx does haskell?!

[10:15] <shapr> Sure, want urls?

[10:15] <crysflame> yes

[10:15] <crysflame> that's mind-warpingly cool. thanks :)

[10:16] <shapr> Crap, Xilinux took down the Lava website. It was there last week :-/

[10:17] <shapr> Well, Satnam Singh is writing a new version anyway.

[10:17] <shapr> Satnan Singh wrote a combinator hardware design language that compiled to Xilinx FPGAs via Haskell.

[10:17] <ihb> shapr: do you have any good tutorial/anydoc on monads? they weren't included in the class i took.

[10:17] <crysflame> http://dx.doi.org/10.1145/289423.289440 # Lava: Hardware Design in Haskell

[10:17] <shapr> It could get more efficient layout and other nifty advantages because it wasn't going via VHDL.

[10:18] <ihb> lots of unfamiliar initials here now...

[10:18] <shapr> I very much wanted to buy a Xilinx PCI FPGA board so I could have Haskell coprocessor!

[10:18] <crysflame> mmmmm, Xilinx

[10:18] <shapr> ihb: This is the best monads tutorial - http://www.nomaware.com/monads/html/

[10:19] <crysflame> thanks :)

[10:19] <kungfuftr> clkao: hhhmmm... stevan says his debug thing is really just logging stuff and not DB related at all

[10:19] <shapr> I emailed Satnam Singh and some of the other people who worked on Lava, several of them have started their own hardware design warez in Haskell.

[10:19] <ihb> shapr: danke.

[10:19] <crysflame> also

[10:19] <crysflame> http://66.102.7.104/search?q=cache:nvSVJW8DvZoJ:www.xilinx.com/labs/satnam/fccm2001_singh_jamesroxby.pdf+xilinx+lava+haskell&hl=en&client=firefox-a

[10:20] <shapr> Alias_: There are a lot of technical compilery tasks in Haskell, but I wrote a mailman mbox mail archive web searchy, that's not at all technical.

[10:20] <shapr> It's about as clean as my room, but it works :-)

[10:20] * kungfuftr wonders if parrot could be targeted for crusoe

[10:20] <lightstep> haskell is probably used for computer-language-related things, because you only get interested in haskell if you research computer languages

[10:21] <shapr> In fact stevan might find Haskell's Lava et al interesting, because they're moving towards emulation of Lucid and dataflow features.

[10:21] <shapr> I got interested in Haskell because I'm self-employed and I want to deliver the best solutions to my customers :-P

[10:21] <jabbot> pugs - 1389 - Added VICTUALS file

[10:22] * castaway mumbles..

[10:22] <shapr> I've never had any CS classes, so I don't think I'm overly academic.

[10:22] <lightstep> you wouldn't have learned it if it proved to be unhelpful for your business?

[10:22] <castaway> whats that funny stuff in the Apocalypse: "method walk () { .paws<C2><BB>.move() }" ?

[10:22] <shapr> I would have learned it and then dropped it once it proved to be unhelpful or less powerful, like a bunch of other languages/systems I've learned.

[10:23] <theorbtwo> castaway: UTF-8.

[10:23] <castaway> I figured, whats it supposed to say?

[10:23] <theorbtwo> >>, I think.

[10:25] <theorbtwo> You might want to read it online instead -- http://dev.perl.org/perl6/apo/A%02d.pod 

[10:25] <theorbtwo> IIRC.

[10:26] <castaway> nope, 404

[10:26] <theorbtwo> http://dev.perl.org/perl6/apocalypse/A01.html (and etc), sorry -- memory not quite good enough.

[10:26] <shapr> lightstep: There are other powerful and/or elegant systems that just don't cut it, see Self and Joy for example.

[10:27] * castaway kisses theorbtwo

[10:27] <shapr> cybersex!

[10:27] <shapr> ok nm

[10:27] * castaway raises an eyebrow

[10:27] <castaway> you're odd.. if.. yeah.. nm

[10:27] <shapr> geek reflex, sorry

[10:29] <shapr> Has the svn repo been updated since yesterday?

[10:29] <shapr> oh I can check this myself, nm

[10:29] <shapr> What's everybody working on today?

[10:30] <ihb> btw, i've always found the type declaration with arrows between the argument _and_ the last argument and the return value confusing to look at. it always takes a while for me to adjust to that "f :: a -> b -> c" doesn't take three but two arguments. is it like that for anyone of you?

[10:30] <castaway> testing, atm I'm watching a DB load data *yawn*

[10:30] <shapr> ihb: that's because Haskell functions always take one argument.

[10:30] <theorbtwo> It's like that for me too.

[10:30] <theorbtwo> But you have to remember that a function that takes two arguments is really a function that takes one argument, and returns a function that takes another argument, and returns the result.

[10:31] <ihb> shapr: i know why it is like that, and that "a -> b -> c" is "a -> (b -> c)" and one argument is applied at a time, but i think it's confusing to look at nontheless :-)

[10:31] <shapr> right on!

[10:31] * castaway notes its still loading, and sneaks over to test some elisp instead

[10:32] <shapr> I use partial application to give some of the features of object instantiation. If the sortBy function takes sortfunction and sequencetosort, I can do sortAscending = sortfunction ascending

[10:32] <ihb> yeah, it's nice.

[10:34] <ihb> btw, is that because of lambda (?) reduction or currying? i saw some disagree on that on perlmonks some time ago.

[10:36] <shapr> I think currying, not really sure. I think lambda reduction would mean some of the really code gets executed at compile time.

[10:36] <shapr> That's a question you should ask on #haskell =)

[10:36] <ihb> f :: (a -> b) -> c;   g :: a -> b -> c;   h x = f (g x); -- a clear case of currying, afaik.

[10:37] <ihb> yeah, dammit, i always get off-topic here. sorry.

[10:37] <castaway> toooopic?

[10:38] <Alias_> The trials and tribulations of the lamdacamel duality

[10:38] <shapr> yay, my chr() works.

[10:38] <theorbtwo> Woo!

[10:39] <shapr> Is there someway I can request a peer review from someone else who's written code for Prim.hs ?

[10:39] <castaway> yell it in the channel? ,)

[10:39] <shapr> That does make sense.

[10:39] <theorbtwo> Stick a diff somewhere http-accessable (pastebot), and tell us where it is.

[10:39] <shapr> ok

[10:40] <lightstep> hi nothingmuch

[10:40] <nothingmuch> hola,

[10:40] <nothingmuch> what's up with testgraph.pl?

[10:40] <shapr> A question about ord, should it deal with multiple characters?

[10:40] <castaway> doesnt in p5

[10:41] <lightstep> i need a favor: i lost my woobling password

[10:41] <shapr> should ord("abc") explode then?

[10:41] <theorbtwo> It should ignore all but the first character of the string passed in.

[10:41] <shapr> ah, ok

[10:41] <castaway> it gives you just the result of the first char

[10:41] <castaway> and ignores thr rest

[10:41] <nothingmuch> lightstep: do you have an SSH key?

[10:41] <castaway> (oops, theorbtwo was faster .)

[10:41] <theorbtwo> Hey, nothingmuch!

[10:41] <nothingmuch> i could just disable the password, and you could use that

[10:41] <castaway> hey nm

[10:41] <nothingmuch> hola, castorbway

[10:42] <lightstep> nothingmuch, err, no

[10:42] <nothingmuch> lightstep: are you on some kind of posix thingy?

[10:42] <theorbtwo> I haven't done anything with testgraph in a bit, but that's because I don't know what to do with it.

[10:42] <lightstep> yes

[10:42] <nothingmuch> or are you sshing with something like putty?

[10:42] <lightstep> no, ssh on linux

[10:42] <nothingmuch> ok, goody

[10:42] <nothingmuch> ssh-genkey -t (rsa|dsa)

[10:42] <nothingmuch> then you get to choose a password for the local copy of the private key

[10:43] <castaway> passwords for passwords, I always thought that was a great idea (not)

[10:43] <nothingmuch> no, it's a password for a key

[10:43] <Alias_> secrets within secrets

[10:43] <nothingmuch> then you give the public key to me

[10:43] <castaway> I know, I know

[10:44] <nothingmuch> it just moves the password to a location lightstep controls

[10:44] <lightstep> i don't have ssh-genkey somehow (debian)

[10:44] *** Alias_ changes topic to: Under no circumstances collapse your lambacamel duality | pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | Auto-smoke: http://kungfuftr.com/pugs-smoke.html | win2k:r1378(224/3842) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[10:44] <nothingmuch> i jsut leave my passwords blank

[10:44] <nothingmuch> (for ssh keys)

[10:45] <castaway> passphrases, btw (for less confusion)

[10:45] <castaway> thanks Alias, that typo was beginning to bug me ,)

[10:45] <Alias_> It was a Skottish accent

[10:45] <castaway> I see ,)

[10:47] <nothingmuch> theorbtwo:  when did the <div>'s come in?

[10:47] <nothingmuch> tr/'//d

[10:47] <nothingmuch> i thought it should be title=""

[10:49] <nothingmuch> ah, i see: .test a:hover div { display: block; position: absolute; background-color: #BBBBBB; border: 1px solid #444444; left: 2em; padding: 5px; }

[10:49] <nothingmuch> and: .test a div { display: none;

[10:49] <nothingmuch> i wonder why it isn't working

[10:54] <lightstep> nothingmuch, how should i send you the key (public key, i assume)?

[10:55] <nothingmuch> email?

[10:55] <lightstep> nothingmush at woobling dot org?

[10:55] <nothingmuch> you can just /msg it

[10:55] <nothingmuch> yeah

[10:55] <nothingmuch> in general

[10:55] <lightstep> i'm on no copy&paste here

[10:56] <nothingmuch> the evil freenet admins might man-in-the-middle attack us? ;-)

[10:56] <nothingmuch> it's not like they can't just ask me for an account... =)

[10:56] <nothingmuch> if you're feeling especially paranoid you can just go into the machine and double check that it's OK yourself

[11:01] <theorbtwo> Oh, sorry, missed some chatter.

[11:01] <jabbot> pugs - 1390 - bwahahaha

[11:01] <nothingmuch> nevermind, it was the css being cached as 404 in my browser

[11:02] <gaal> hey there (haven't been here in, like, two days!)

[11:02] <nothingmuch> hola gaal 

[11:02] <gugod_>  nice commit message

[11:03] <theorbtwo> Welcome back, gaal.

[11:03] <gaal> what embedding works? can i embed p5?

[11:03] <gaal> thanks, theorbtwo

[11:03] <theorbtwo> Two days in pugs time is like two weeks in normal time.

[11:03] <theorbtwo> That reminds me, gugod, can you make "last" give a timezone or "ago"?

[11:04] <nothingmuch> gaal: i think it works on fbsd, and you have 'eval_perl5'

[11:05] <gaal> it has no tests, at all.

[11:05] <gugod_> theorbtwo: "last" ?

[11:05] <gugod_> theorbtwo: oh , the reply of "seen" ?

[11:06] <theorbtwo> Er, right.

[11:06] <gugod_> ok I can do it

[11:06] <theorbtwo> Sorry, some other bots call it seen.

[11:08] <nothingmuch> lightstep: did you mail?

[11:09] <lightstep> yes

[11:09] <pasteling> "gaal" at 192.115.25.249 pasted "Embed.perl5 build failure (linux/debian perl5.6.4/ghc6.4)" (23 lines, 1.7K) at http://sial.org/pbot/8832

[11:10] <lightstep> err, it returned. i'll try again

[11:10] <gaal> um, that's x86 up there.

[11:11] <nothingmuch> oi

[11:11] <nothingmuch> was my server complaining?

[11:11] <lightstep> no, i mistyped

[11:11] <jabbot> pugs - 1391 - Add this information of the utmost impor

[11:11] <lightstep> now you're in my address book, and the mail is on the way

[11:13] <nothingmuch> i can send you a very fat vcard

[11:14] <lightstep> what's a vcard?

[11:14] <nothingmuch> an address book entry format

[11:14] <nothingmuch> moz/ximian/etc probably support it

[11:14] <lightstep> nah, i only need name<->email, and i already have that

[11:14] <nothingmuch> osx does

[11:14] <nothingmuch> mutt can be wrangled

[11:14] <nothingmuch> with lbdb and a smarter program

[11:14] <nothingmuch> the fun part is that it has phone/instant msg/address etc

[11:15] * gaal is making pizza tonight - good timing on the VICTUALS thing!

[11:15] <theorbtwo> thunderbird does as well.

[11:15] <nothingmuch> anyway, i'll put up http://nothingmuch.woobling.org/me.vcf just for fun

[11:15] <nothingmuch> thunderbird is a subset of moz

[11:16] <nothingmuch> ok, vcf is up, for anyone who cares

[11:16] <nothingmuch> most of it is in hebrew though

[11:17] <nothingmuch> if you want to mail me anythging in VICTUALS you can just copy it

[11:17] <nothingmuch> this reminds me of a very nice story about the russian mail system

[11:19] <nothingmuch> lightstep: ok, try to ssh

[11:19] <kungfuftr> what's thing victuals thing about?

[11:19] <nothingmuch> kungfuftr: food

[11:20] <theorbtwo> Ugh, you should put country codes on those phone numbers.

[11:20] <gaal> kff: svn up and forage your /

[11:20] <nothingmuch> theorbtwo: then my cell phone doesn't dial them well

[11:20] <castaway> countrycodes++

[11:20] <nothingmuch> it's a bit too stupid for that

[11:20] <theorbtwo> Oh.

[11:20] <theorbtwo> That's sad.

[11:20] <nothingmuch> indeed it is

[11:20] <kungfuftr> ah

[11:20] <kungfuftr> daft

[11:21] <lightstep> nothingmuch, i give no password, and it doesn't connect

[11:21] <nothingmuch> s/^/++972/

[11:21] <nothingmuch> ssh -v woobling.org

[11:22] <nothingmuch> perlbot nopaste

[11:22] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[11:23] <pasteling> "nothingmuch" at 212.143.91.217 pasted "what you should see if your key is bad" (9 lines, 524B) at http://sial.org/pbot/8833

[11:23] <pasteling> "nothingmuch" at 212.143.91.217 pasted "what you should see if your key is good" (6 lines, 336B) at http://sial.org/pbot/8834

[11:23] <lightstep> yes

[11:23] <lightstep> that's what i get

[11:24] <lightstep> i gave ssh-keygen an empty password

[11:24] <nothingmuch> Apr  1 14:22:03 pasta sshd[4782]: error: PAM: Authentication failure for illegal user amir from xxxx

[11:25] <nothingmuch> there's your problem

[11:25] <nothingmuch> ssh [email@hidden.address]
[11:25] <nothingmuch> or i can rename your account

[11:25] <lightstep> err, silly me. i _did_ give it the wrong password

[11:26] <lightstep> the wrong username, rather

[11:26] <nothingmuch> so do you want a different username?

[11:27] <lightstep> not at all

[11:27] <lightstep> i never ever log in as `amir' except here, and here it's without password at all

[11:28] <nothingmuch> ok, so do the following:

[11:28] <pasteling> "nothingmuch" at 212.143.91.217 pasted "typical .ssh/config entry" (3 lines, 66B) at http://sial.org/pbot/8835

[11:29] <Alias_> autrijus: ping?

[11:34] * shapr cackles about http://www.cenqua.com/commentator/ and http://www.cenqua.com/pairon/

[11:35] <lightstep> thanks, nothingmuch

[11:36] <Shillo> Hullo, folks! :)

[11:37] <mattc> hello

[11:37] <nothingmuch> hola

[11:37] <shapr> 􏿽xBFcomo est as?

[11:39] <shapr> This wide variety of type errors clearly shows that I do not yet understand the Pugs internals.

[11:39] <castaway> heh

[11:39] <nothingmuch> shapr: i think this is type checking on the AST itself

[11:39] <Shillo> shapr: ipv6 IP address. You're my personal god. ;)

[11:40] <nothingmuch> see autrijus' journal from ca. 36 hours ago

[11:40] <shapr> Shillo: you too can have an IPv6 address if you have a public IPv4

[11:41] <shapr> bok Shillo 

[11:43] <Shillo> Hm. Bok. :)

[11:43] <Shillo> *squint* Do I know you from around here?

[11:43] <shapr> Probably not.

[11:44] <Shillo> Oh. How did ya know about 'Bok'? :)

[11:44] <shapr> C'mon, Croatian isn't that hard!

[11:44] <shapr> hrvatska r0xx

[11:45] <Shillo> Well, ummm. :) I'd tend to agree about Croatian but know plenty of foreigners who just cringe. My boss for one. :)

[11:45] <castaway> .oO( .hr is croatia ?)

[11:45] <shapr> Anyway, you can easily have an IPv6 address with 6to4

[11:45] <Shillo> .oO( yep. )

[11:45] <shapr> I'm from Alabama, but one of my best friends is Croatian.

[11:46] <castaway> Oh, hungary is .hu .. okies :)

[11:46] <Shillo> Oh, cool about 6to4. I'm being a firewall miles high but this is still neat. :)

[11:46] <Shillo> shapr: Cool. Say hi to him. :)

[11:46] <shapr> She's moving back to Zagreb next year.

[11:46] <Shillo> Er. Her. ;)

[11:46] * kungfuftr has native IPv6 connectivity... =0)

[11:46] <shapr> kungfuftr: bah, lucky!

[11:47] <kungfuftr> shapr: heh... BGP++

[11:47] <shapr> Not like I can afford a BGP connection.

[11:47] <kungfuftr> it's free

[11:47] <shapr> Do you run an ISP from your house?

[11:47] <kungfuftr> most network groups will do free IPv6 transit

[11:48] * kungfuftr does it for free through MCI, Kewlio, BT and Hurricane Electric

[11:48] <shapr> The various Swedish ISPs claim they have the best IPv6 in the world, but I haven't been able to get native IPv6 from any of them.

[11:49] <Shillo> Hmm, I think we ought to update that all April1 RFC.

[11:49] <kungfuftr> shapr: http://ipv6.glbx.net is how i get mine

[11:49] <Shillo> ipv6 over avian carrier.

[11:49] <shapr> good point!

[11:49] <kungfuftr> infact we have a swedish ipv6 peer, iirc

[11:49] <Shillo> Er that /old/.

[11:49] <nothingmuch> ipv6 over ipv4 will be terribly slow, no?

[11:49] <shapr> The ultimate in P2P! Pigeon 2 Pigeon!

[11:49] <Shillo> :)

[11:49] <shapr> nothingmuch: I speak to you now via 6to4

[11:50] <nothingmuch> right

[11:50] <shapr> How slow does it seem?

[11:50] <nothingmuch> but in theory

[11:50] <nothingmuch> routing packets through a tunnel protocol half way around the world

[11:50] <mattc> umm, yesterday I was pointed to Rod Adams' Synopsis 29...  Its not the Perl 6 site.  Is there a central authoritative place for the most up2date synopsis?

[11:50] <Shillo> Heh, I speak to you now via IRC-through-http-tunnelling.

[11:50] <shapr> It's not halfway round the world. 6to4 picks the nearest 6to4 router automagically.

[11:50] <Shillo> I suck. :)

[11:50] <kungfuftr> mattc: not that i've heard of

[11:51] <mattc> ah

[11:51] <shapr> Mine is somewhere in Gothenburg, ~1000km from here.

[11:51] <nothingmuch> i don't there is any ipv6 in israel, though

[11:51] <Shillo> mattc: Yes, the Larry's site. S29 is not authoritative, it's more of a RFC.

[11:51] <nothingmuch> shapr: ah

[11:51] <mattc> so how does one find out if a particular synopsis exists?

[11:51] <mattc> I see

[11:51] <Shillo> mattc: AFAIK.

[11:52] <mattc> so its not official until its on Larry's Perl6 site then?

[11:52] <mattc> I would have guessed that to be the case...

[11:52] <theorbtwo> http://dev.perl.org/perl6/synopsis/, except for s29, which is in an odd state of half-existance.

[11:52] <mattc> yeah, that's the one

[11:52] <mattc> cheers all

[12:03] <kungfuftr> rightio, change to the testgraph.css to stop that weird text in box problem

[12:05] <theorbtwo> Oooh?

[12:05] <kungfuftr> checked that in

[12:08] <kungfuftr> bah, though it now absolutely kills my version of mozilla

[12:09] <Steve_p> Larry has had a great deal of input into S29 though

[12:11] <jabbot> pugs - 1392 - Addition to css to avoid DIVS being show

[12:12] * kungfuftr will go through css later to make it less dependant on CSS2 selectors (which IE doesn't support properly)

[12:15] <shapr> It seems the darcs mirror of svn isn't updating. Foo.

[12:17] <castaway> http://www.ietf.org/rfc/rfc4042.txt

[12:17] <shapr> oooh aaah!

[12:17] <shapr> nice find castaway!

[12:18] <castaway> I must confess, twas not me

[12:19] <theorbtwo> http://www.ietf.org/rfc/rfc4041.txt -- Requirements for Morality Sections in Routing Area Drafts

[12:20] <shapr> This must be a slashdot parody.

[12:20] <shapr> "Set the Evil Bit"

[12:20] <shapr> Oh wait, the evil bit is from rfc3514

[12:21] <integral> hrm, rfc4042 looks rather useful :-/

[12:21] <shapr> Wow, an RFC that has orgy-mode. I'm impressed.

[12:22] <Shillo> LOL!

[12:22] <nothingmuch> what platforms have nonet?

[12:23] <rgs> some old Bull computers had, iirc.

[12:23] <shapr> Groupe-Bull rocked.

[12:23] <castaway> orgy mode?

[12:23] <nothingmuch> multicast 

[12:23] <Shillo> The key words "SHALT", "SHALT NOT", "SMITE", and "PILLAR OF SALT" in this document are to be interpreted as expected.

[12:23] <Shillo> :)))))

[12:24] <castaway> heh

[12:27] <nothingmuch> bit torrent is so much fun

[12:27] <nothingmuch> downloading whole live CD is quicker than minimal install traditionally

[12:28] <shapr> bah, IPv6 multicast is better!

[12:28] <nothingmuch> ipv6 multicast is better than bit torrent?

[12:28] <shapr> Yeah, it is actually.

[12:28] <nothingmuch> explain

[12:28] * nothingmuch has never heard about it

[12:28] <shapr> BT is IPv6 multicast 'faked' over IPv4

[12:29] <shapr> rather creatively faked

[12:29] <nothingmuch> how is ipv6 concerned with large objects?

[12:29] <shapr> Bram r0xx =)

[12:29] <nothingmuch> you create huge packets, and then send them to many people

[12:29] <shapr> Um, I don't think size is important when you talk about multicast.

[12:29] <nothingmuch> and then they know how to share?

[12:30] <nothingmuch> so how does the distribution work here?

[12:30] <nothingmuch> bt works because everyone has different parts

[12:30] <Shillo> Routers distribute.

[12:30] <shapr> you send out a single stream in a loop, anyone who wants to listen does so.

[12:30] <Shillo> shapr: Actually I'd prefer multistream multicast.

[12:30] <shapr> You ask your nearby IPv6 router to subscribe you to the multicast, it asks the next router in line...

[12:31] <shapr> Until you get back to the origin host, which only sends out a single stream. Whenever a router has two subscribers on different branches, it sends out two streams.

[12:31] <kungfuftr> shapr: BT's labs use proper native ipv6 (BT Exact)

[12:31] <shapr> voila, huge amounts of bandwidth saved.

[12:31] <nothingmuch> ah, in that sense

[12:31] <nothingmuch> true that

[12:32] * nothingmuch wonders how long the world will take to switch

[12:32] <shapr> The server can just loop the multicast file send, and if no one is listening, no traffic exists.

[12:33] <theorbtwo> Hm.  It seems that ipv6 mcast and bt seek to solve more or less the same problem, but do it in /vastly/ different ways.

[12:33] <nothingmuch> but in general I still have to wait for as long as it takes the server to sent

[12:33] <nothingmuch> send

[12:33] <shapr> That's true, that's where BT is better.

[12:33] <nothingmuch> and if the server is down, i can't get the file

[12:33] <shapr> Yup, I agree.

[12:33] <nothingmuch> bt on ipv6 could probably be implemented in a much more naive way, though

[12:34] <theorbtwo> It should actually be implemented somewhat differently on ipv4.

[12:34] <theorbtwo> It should use UDP.

[12:34] <Shillo> The guy who designed Kademlia protocol also designed multistream download protocol.

[12:34] <Shillo> Thing is, combined with multicast, it'd rock VERY hard.

[12:34] <shapr> I've wondered about a mix of SLP and ipv6 multicast and/or BT to get really fast link local linux distro package caches

[12:34] <Shillo> Because taken alone, both BT and multicast have asympthotically constant bandwidth.

[12:35] <Shillo> While bt + multi's bandwidth grows with the number of clients.

[12:35] <Shillo> Or rather, multistream+multicast.

[12:35] <Shillo> His protocol allows you to reassemble the file from any collection of sufficiently many packets (with very high probability once you cross the critical threshold on the number of packets)

[12:36] <Shillo> So you just listen to the packets and log them, then, when you've had enough, try to reassemble. If you fail, just get some more.

[12:36] <shapr> So, we'll write 6Torrent in Pugs...

[12:36] <Shillo> The only problem is that the protocol is impractical as described, because of the limits on HD seek time. You need to xor 3-50 blocks from the original file to get each net packet.

[12:37] <shapr> That sounds cool, I'll check out the Kademlia protocol.

[12:37] <Shillo> Kademlia is for serverless p2p. This is the other protocol by the same guy.

[12:37] <shapr> I'm interested in serverless protocols in general.

[12:37] <Shillo> Both are incredibly clever, BTW. After I read how Kademlia works, all I could say was... REEEESPEEEEECT!

[12:38] <shapr> I'd like to use darcs for serverless decentralized read-only wikis

[12:38] <nothingmuch> someone in our local pm did a talk about TRIZ once

[12:38] <nothingmuch> and to demonstrate he used some basic principals to design an anonymous, fast p2p

[12:38] <Shillo> With Kademlia, you can get distributed key->value mapping of any kind.

[12:39] <theorbtwo> I'm off to bed.

[12:39] <Shillo> And make it efficient for a *really* large number of keys.

[12:39] <shapr> I wish I knew some nearby cool geeks to hang out with and learn stuff.

[12:39] <nothingmuch> Shillo: does it have any way to guarantee or at least promote preservance?

[12:39] <nothingmuch> ciao, theorbtw1 

[12:39] <shapr> Is Kademlia based on some of the better know distributed hashes?

[12:39] <Shillo> shapr: Dunno the others.

[12:39] * shapr asks google

[12:40] <Shillo> nothingmuch: Preservance? If you mean to guarantee that the mappings don't just go away, no.

[12:40] <shapr> Citeseer is so slow! argh!

[12:40] <Shillo> It's not really for persistent publishing. It's expected that the specific machines publish their data to the Kad network.

[12:41] <Shillo> Once the publisher is gone, the data may go away. At least in the publishing model (used by Overnet and eMule0

[12:41] <shapr> Of course the US might make p2p illegal RSN.

[12:41] <castaway> oh, he went to bed

[12:42] <Shillo> It's more for the high-performance searching with little guarantee on storage. But then you could include redundance guarantee in the app layer.

[12:42] <Shillo> Since the only thing really specified in Kad protocol is topology, peer location/management, and data propagation.

[12:43] <Shillo> Kad basically allows a group of machines to self-organise into something that resembles a hypercube (performance-wise)

[12:44] * nothingmuch learns about hypercubes

[12:45] <Shillo> Basically you can route a message between n machines in O(log_2 n) steps through hypercube. Kad has different log base but otherwise is pretty similar.

[12:45] <Shillo> ... except for the self-organising nature. Machines find out on their own how to connect and where to route data.

[12:47] <nothingmuch> ah

[12:47] <nothingmuch> clever

[12:47] <nothingmuch> basically gets you this: http://en.wikipedia.org/wiki/Image:Hypercube_star.png

[12:48] <nothingmuch> without knowing the whole graph

[12:51] <Shillo> The clever part is how it does it: Each node randomly generates node ID.

[12:51] <Shillo> You use XOR-distance to measure distance between 2 IDs. XOR distance between a and b is a number of 1's in a^b (binary)

[12:52] <Shillo> Now in a full ID space, you get 2^n ID's at distance n from yourself. But the exact nodes strongly depend on the ID you got.

[12:52] <lightstep> but how do you meet your neighbours, if you only know distances?

[12:53] <Shillo> Now, you need to know one node to bootstrap off it (you just query the list of initial nodes), like in gnutella.

[12:53] <Shillo> Then each node connects to nodes at various distances - this is to get fast routing.

[12:53] <Shillo> Now, keys are also IDs.

[12:54] <Shillo> You publish keys to the nodes that are near the key ID.

[12:54] <Shillo> To query the net, you route the message 'toward' the ID - i.e. to the nodes that are as close as possible to the ID you want.

[12:55] <Shillo> And when connecting to the net, you try to connect to a good cross-section of near and far nodes. That gives you hypercube-like routing. The message 'jumps' to the long-distance nodes, and then gets searched near them.

[12:55] <Shillo> Read the Kademlia whitepaper, the devil, as usual, is in the details. But it really -is- incredibly clever.

[12:55] * lightstep doesn't understand routing nearly well enough

[13:05] <drbean> Making 6.0.13, after linking ..., I get this error: collect2: ld terminated with signal 9 [Killed]

[13:05] <kungfuftr> drbean: which version of GHC are you using?

[13:05] <drbean> I wonder if I pressed ctrl-C?

[13:05] <mugwump> ctrl-C should be signal 2

[13:06] <drbean> 6.4 The Glorious Glasgow Haskell Compilation System, version 6.4

[13:06] <kungfuftr> odd

[13:06] <drbean> I previously installed pugs-6.0.11 with no problem

[13:11] <drbean> I ran make again and it skipped all the compilations and this time after a lot of disk activity, I don't get an error.

[13:12] <lightstep> it takes a lot of time to link .13

[13:48] <shapr> Can I get a peer review on this addition to Prim.hs that appears to pass "./pugs -Iblib6/lib t/builtins/chr.t" ? file is http://www.scannedinavian.org/~shae/chr.diff

[13:51] <autrijus> you got one.

[13:51] <autrijus> it is Correct.

[13:51] <shapr> yay!

[13:51] <autrijus> =)

[13:52] <lightstep> seems a little short

[13:52] <shapr> Does it need to be longer?

[13:52] <lightstep> i think you should expand op1Chr to be 7 lines or something, like op2Numeric

[13:53] <shapr> autrijus: darcs repo doesn't seem to match svn, shall I ci via svn instead?

[13:54] <autrijus> sure.

[13:54] <autrijus> can I have your email to make you a committer?

[13:54] <shapr> I'm [email@hidden.address]
[13:54] <castaway> cute domainname :)

[13:54] * castaway looks for the bird scans

[13:54] <shapr> thank you :-) Open Source Penguin Living In Sweden!

[13:55] <castaway> *g*

[13:55] <shapr> ScannedInAvian has thunderbird and chicken so far.

[13:55] <shapr> Using caps in my email has turned up a surprising number of bugs in various software too. Lots of code requires lower case.

[13:55] <autrijus> invitation sent.

[13:56] <autrijus> nah, we Just Works

[13:56] <castaway> heh

[14:00] <shapr> Wow, the terms of agreement are in chinese.

[14:00] <autrijus> english one is here: http://wagner.elixus.org/~hcchien/termtouse.html

[14:00] <autrijus>   

[14:00] <wilx> Hm..., pugs interactive, `? 1' dumps core.

[14:00] <autrijus> err, sorry.

[14:00] <autrijus> wilx: right. want to investigate? it's been broken ever since lightstep refactored it

[14:01] <shapr> Oh, that's just fine as terms go.

[14:01] <wilx> Oh.

[14:01] <wilx> Heh.

[14:02] <lightstep> on some machines it always fails, on some machines never. it looks like a problem with `debug'

[14:04] * kungfuftr sobs as he will only have access to his windows laptop for the next few days, so no pugs hacking... =0(

[14:04] <castaway> wot no win-ghc?

[14:05] <shapr> GHC works on windows, but maybe it's a business laptop and he can't install other apps on it?

[14:08] * shapr looks expectantly at jabbot 

[14:09] * castaway wonders why

[14:09] <shapr> doesn't it show commit messages?

[14:10] <lightstep> it takes a few moments

[14:10] <shapr> ok

[14:10] <autrijus> shapr: add yourself to AUTHORS?

[14:11] <shapr> oh right

[14:11] <jabbot> pugs - 1393 - add chr() functionality

[14:11] * rgs notices VICTUALS

[14:12] <shapr> w00h00!

[14:12] <castaway> :)

[14:12] * shapr does the happy dance

[14:12] * rgs notices that schwern has misspelt quinoa again :)

[14:13] * autrijus comes back from the land of BNFC, Happy and GLR.

[14:14] <autrijus> I think it makes sense to rewrite the IMC parser using happy, justso it agrees 100% with parrot.

[14:15] <Limbic_Region> autrijus - Leo has had a reputation for churning out code like a mad man for a while now - I am a bit scared to think of what you two might accomplish living together for a couple weeks

[14:16] <autrijus> Limbic_Region: maybe we'll both learn cobol.

[14:16] <autrijus> and produce nothing at all

[14:16] <autrijus> or maybe we'll rewrite perl6 on top of intercal.

[14:16] <autrijus> or port everything to rule 110

[14:16] <shapr> Or maybe an epic CPAN drinking game will happen!

[14:17] <Limbic_Region> that's also another scary thought

[14:17] <autrijus> I think parsec makes a lot of sense for pugs, because the grammar is still changing like mad

[14:17] <autrijus> but IMC probably warrants a stricter grammar.

[14:18] <Limbic_Region> autrijus - be forewarned - Leo can D-R-I-N-K

[14:18] <autrijus> Limbic_Region: and I can't.

[14:18] <autrijus> so there's no competition on that front :)

[14:18] <shapr> If Sake is involved I'm in!

[14:18] <rgs> but leo doesn't know the cpan very well.

[14:18] <rgs> this compensates.

[14:19] * rgs remembers leo and lots of bottle of white wine in a parisian sushi bar

[14:20] <shapr> oh wow, ayrnieu is a Pugs committer?

[14:20] <autrijus> mm?

[14:21] <shapr> It's interesting to find people I've know online for many years on the pugs project member list.

[14:21] <autrijus> :) 

[14:21] <jabbot> pugs - 1394 - add Shae Matijs Erisson (aka shapr) to A

[14:22] * shapr boings cheerfully

[14:22] <autrijus> shapr++ # welcome aboard to this crazy ship

[14:22] <shapr> Yay! I want a room with a porthole!

[14:22] <castaway> *g*

[14:23] <kungfuftr> autrijus: will have File::Path ported over the weekend (along with it's dependencies (i hope))

[14:23] <kungfuftr> most of it already done

[14:23] <autrijus> kungfuftr++

[14:24] <autrijus> I think I'll port Bamboo to pugs, too.

[14:24] <autrijus> (Bamboo being this cocoon flowscript like web controller thing obra designed)

[14:24] <Shillo> Later, folks!

[14:24] <autrijus> works well with any MVC frameworks (or really, anything that supports CGI)

[14:25] <autrijus> that way we can write Ruby on Rails -like things in perl6 :)

[14:25] <kungfuftr> Under no circumstances collapse your lambacamel duality | pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | smoke: http://kungfuftr.com/pugs-smoke.html | win2k:r1378(224/3842) Linux:r1302(193/3383) MacOSX:r1342(189/3478)u | win2k:r1378(224/3842) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[14:25] <kungfuftr> bah!

[14:26] <kungfuftr> Under no circumstances collapse your lambacamel duality | pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | smoke: http://xrl.us/fmw2 | win2k:r1378(224/3842) Linux:r1302(193/3383) MacOSX:r1342(189/3478)u | win2k:r1378(224/3842) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[14:26] <kungfuftr> Under no circumstances collapse your lambacamel duality | pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | smoke: http://xrl.us/fmw2 | win2k:r1378(224/3842) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[14:26] <kungfuftr> ffs

[14:26] *** kungfuftr changes topic to: Under no circumstances collapse your lambacamel duality | pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | smoke: http://xrl.us/fmw2 | win2k:r1378(224/3842) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[14:26] <kungfuftr> finally, bloody irc client

[14:32] <shapr> I have most of ord() working, but it's failing on [ and { only. Not on ] or } though.

[14:32] <castaway> funky

[14:41] <shapr> ok, now only { is failing the test. But ./pugs -e "print ord('{')" gives the correct value of 123

[14:41] <shapr> maybe the test framework has a bug?

[14:41] <autrijus> that may be the case.

[14:41] <autrijus> oh wait.

[14:41] <autrijus> "{" is illegal.

[14:42] <autrijus> have to be written '{'

[14:42] <autrijus> reason is that { is not interpolated in strings.

[14:42] <mugwump> how do you alias a method in perl6?

[14:42] <PerlJam> mugwump: with :=

[14:42] <autrijus> :=or ::=

[14:42] <PerlJam> g'morning btw

[14:43] <autrijus> &foo := &bar;

[14:43] <shapr> yay

[14:43] <PerlJam> yeah, ::= is compile-time aliasing, := is run-time aliasing.

[14:46] <kungfuftr> yay! time to go on short holiday!

[14:52] <jabbot> pugs - 1395 - added ord() functionality, fixed two ord

[15:13] <drbean> ;/quit

[15:18] <autrijus> I should be back from the IMC digression this weekend :)

[15:19] <autrijus> thanks for feeding the dog during my diving

[15:33] *** Aankh|Clone is now known as Aankhen``

[16:37] * shapr cackles happily

[16:38] <xerox> hiya shapr, did you see that Scheme april's fool?

[16:38] <shapr> Yes, it's funny.

[16:38] <xerox> It is ! :)

[16:39] <shapr> Did you see the most recent post on ll1?

[16:39] <shapr> I am so going to steal that quote for my next .sig

[16:39] <PerlJam> xerox: where's the scheme afj?

[16:40] <xerox> http://www.jadetower.org/muses/archives/000307.html

[16:40] <xerox> shapr: no, can you give me some url?

[16:41] <shapr> xerox: http://article.gmane.org/gmane.comp.lang.lightweight/3244

[16:41] <shapr> quote from "The Austin Lounge Lizards"

[16:43] * xerox hehs

[16:44] <autrijus> xerox: where's the scheme afj?

[16:45] <xerox> http://www.jadetower.org/muses/archives/000307.html

[16:45] <shapr> I think it's http://article.gmane.org/gmane.comp.lang.lightweight/3240

[16:45] <xerox> Yep, better.

[16:45] <xerox> WHOOOPS

[16:45] <xerox> I'm sorry, didn't check the url.

[16:47] <xerox> The last part is great.

[16:48] <shapr> kungfuftr: how often does your fire re-smoke?

[16:48] <PerlJam> oh, yeah.  They just took Guido's post about python and used it for their AFJ

[16:48] <PerlJam> (I hope Guido gets the point eventually :-)

[16:48] <shapr> I may give a EuroPython 2005 talk about it.

[16:49] <shapr> hiya elmex 

[16:50] <cognominal> rgs, any comments after the leak in the title of #perlfr in grou.ch?

[16:50] <autrijus> journal up. g'nite :) &

[16:50] <xerox> Night autrijus :)

[16:51] <shapr> g'nite autrijus

[16:52] <rgs> hi cognominal.

[16:52] <rgs> perl 5.9.2 is Out.

[16:52] <rgs> w00t

[16:53] <cognominal> rgs, the leak is not about perl 5.9.2 :)

[16:54] <rgs> cognominal: well, you mean that I would be able to think about something else today ?

[16:54] <rgs> cognominal: that topic sucks.

[16:54] <cognominal> blame stef

[16:55] <shapr> How do I describe the output of hex in the big string in the bottom of Prim.hs ?

[16:56] <shapr> I know " Int pre hex " but how do I describe that the args can be num/str/etc?

[16:57] <shapr> I guess it can only be num or str, but is there a name for that superset? Or do I create union types like in Haskell?

[17:03] <chip> autrijus: "src/Unicode.hs:foreign import ccall unsafe "u_iswupper"

[17:04] <chip> autrijus: I see it defined and imported but not used...?

[17:06] <shapr> Any clueful Prim.hs people around?

[17:08] * shapr tries voodoo hacking

[17:09] <PerlJam> shapr: did you just add chr + ord?

[17:09] <shapr> Yes I did.

[17:10] <PerlJam> cool.

[17:10] <shapr> But they have only a single input type. Hex can take numbers or strings.

[17:11] <PerlJam> shapr: what do you mean hex can take numbers or strings?

[17:11] <PerlJam> the hex I'm familar with only takes strings

[17:12] <shapr> If you take hex.t as the spec, it can take both.

[17:12] <PerlJam> so I would have  thought you'd add  "Int pre hex (Str)"

[17:12] <shapr> That part works, but that doesn't pass all the tests.

[17:12] <PerlJam> Hrm.

[17:14] <shapr> hex(10) and hex("FF") should both work according to hex.t

[17:15] <PerlJam> shapr: hex(10) should just return 10  then.  literals are always in decimal with out some qualifier to say otherwise

[17:19] <shapr> So, does "\\n   Str       pre     hex     (Int, Str)\" mean that hex can take either an Int or a Str? or does it require both?

[17:19] <PerlJam> that would mean that it requires both

[17:20] <shapr> I'll try duplicating the line with the two different arg patterns.

[17:20] <shapr> w00!

[17:21] * shapr hops cheerfully

[17:21] <shapr> btw, hex.t thinks that hex(10) is 16

[17:22] <shapr> still passes though.

[17:23] <PerlJam> If hex.t is the spec, then I think that spec is wrong.

[17:23] <shapr> Well, find out, mister camelfolk =)

[17:24] <PerlJam> Or perhaps it's correct and hex(10) coerces the 10 into a string before hexifying

[17:24] <shapr> cuz you know I have no clue, that's for sure.

[17:24] <PerlJam> either way, hex shouldn't take numbers on input

[17:24] <kcwu> hex(10) is 16 in perl5

[17:25] <PerlJam> kcwu: sure, that's because perl5 coerces the 10 into a string

[17:26] <shapr> Can I check in only part of a diff somehow with svn?

[17:26] <PerlJam> besides, perl6 may not even have hex(), oct(), etc. as per recent emails to p6l

[17:26] <integral> shapr: you can commit just a few files: svn commit <files>

[17:27] <shapr> I added error catching cases in the same file, but I think they fit in a separate changeset. (Does svn do changesets?)

[17:28] <integral> not like that :-)

[17:28] <PerlJam> just commit those separately like integral said.

[17:28] <PerlJam> well, I guess he didn't quite say that, but I am!

[17:28] <PerlJam> :-)

[17:28] <shapr> works for me!

[17:41] <castaway> allo you lot

[17:41] <shapr> guten abend castaway 

[17:41] <castaway> ooh, deutsch ;

[17:41] <castaway> ooh, deutsch ;)

[17:41] <mugwump> halt der klapp!

[17:42] <castaway> "die Klappe"

[17:43] <mugwump> yeah yeah yeah :)

[17:44] * mugwump <--- now can talk two second languages (badly)

[17:47] <shapr> I think I have about 0.95 languages total.

[17:48] <castaway> heh

[17:54] <shapr> castaway: I grew up speaking Southern English. My fiancee is from Säärbrucken, and she has a Master's degree in English. First time she was in Alabama, she went to a Kentucky Fried Chicken, and I had to translate between my fiancee and the cashier chick.

[17:55] <Khisanth> shapr: I take it she didn't actually speak English all that often?

[17:55] <castaway> Southern english?

[17:56] <shapr> Oh no, my fiancee's english is unbelievably perfect.

[17:56] <mugwump> the worst thing about english dialects is that americans don't know they exist :)

[17:56] <CapoeiraB> heh

[17:56] <Khisanth> oh right ... Alabama ;)

[17:56] <shapr> My fiancee's english is better than mine even. But the chick behind the counter spoke what was effectively Ebonics.

[17:57] <CapoeiraB> Actually, most southerners, not rednecks, southerners, speak english very well. we just happen to have a horrible accent, and occasionally use words that no one else uses, like 'reckon'.

[17:58] <castaway> sounds like a normal word to me

[17:58] <shapr> reckon is actually common in Irish English, and a variety of other parts of English.

[17:58] <castaway> I'm still trying to parse 'southern' - southern what?

[17:59] <CapoeiraB> southern USA, you know, where there are more cows than humans.

[17:59] <shapr> It literally means 'to count' but I suspect it's originally Germanic, related to 'räcker' in Swedish which literally means 'to reach' or 'to suffice'

[17:59] <shapr> CapoeiraB: Where the men are men and the sheep are scared!

[18:00] <CapoeiraB> heh.

[18:01] <mugwump> American is a dialect of English.  Southern American is a dialect of that.  Call it an accent if it pleases you :)

[18:01] <CapoeiraB> well, we do have some ways of saying things that aren't exactly proper. "I'm fixing to go to the store" instead of "I'm about to go to the store."

[18:02] <castaway> Ah, not southern england..

[18:02] <shapr> Right, I'm from the other Birmingham.

[18:02] <castaway> just dialect CapoeiraB 

[18:03] <castaway> southern "english" indeed.. ;)

[18:04] <CapoeiraB> to people who live in the US, southern english is a horrible accent of the dialect of english that everyone else in the US speaks.

[18:04] <crysflame> Y'oughn't to?

[18:04] <castaway> none of its english all!

[18:04] <CapoeiraB> crysflame: haha, nice try

[18:04] <crysflame> well, i've never tried to spell it before

[18:04] <shapr> Some Alabama and Georgia accents are quite pleasing. Some are painful.

[18:04] <crysflame> i can say it

[18:04] <crysflame> drawl doesn't convey well in 26 letters

[18:04] <shapr> Ah'm fruhm Burminhayum.

[18:04] <crysflame> neither does bl1ng

[18:04] <CapoeiraB> this is true.

[18:06] <masak> maybe this will interest some of you: http://www.cs.tut.fi/~jkorpela/lingua-franca.html

[18:06] <masak> i haven't read all of it, found it today

[18:06] <masak> it's about english on the web

[18:06] <masak> and on the net in general

[18:06] <shapr> I think we should switch to Finnish.

[18:07] <masak> ei saa peitää

[18:07] <shapr> It's a lot more fun to swear in Finnish.

[18:07] <shapr> puhutko suomea?

[18:07] <masak> no, not really

[18:07] <CapoeiraB> I wish I could speak finnish.

[18:07] <shapr> Me neither :-)

[18:07] <masak> :)

[18:08] <CapoeiraB> as well as several other languages, for that matter.

[18:08] <masak> i see it sometimes on merchandise

[18:08] <shapr> I lived in Finland for three years, but agglutinative languages are difficult for first-time users.

[18:08] <masak> hm

[18:08] <mugwump> agglutinative?

[18:08] <shapr> programming - ohjelmointia

[18:08] <masak> i like agglutination

[18:08] <masak> :)

[18:08] <crysflame> agglutinative!

[18:08] <masak> english is fairly agglutinative too

[18:08] <shapr> Er, no. Not really.

[18:09] <shapr> http://c2.com/cgi/wiki?AgglutinativeLanguage

[18:09] <shapr> Finnish has seventeen 'cases' but you can use them all at the same time on the same word.

[18:10] <CapoeiraB> southern english (US) is fairly agglutinative.

[18:10] <shapr> It's like sauna = sauna, my sauna = saunani, at sauna = saunassa, at my sauna = saunassani

[18:10] <shapr> CapoeiraB: excellent point.

[18:10] <castaway> fun

[18:11] <masak> here's an agglutinative word from esperanto: "ekmalvarmegiĝis", meaning "it suddenly turned very cold"

[18:11] <shapr> I wonder what an agglutinative programming language would look like.

[18:11] <CapoeiraB> that's just because we're lazy bastards, though.

[18:12] <masak> shapr: lisp?

[18:12] <shapr> Maybe so.

[18:12] <ninereasons> just what I was thinking masak

[18:12] <masak> :)

[18:12] <shapr> In that case, what's the total opposite?

[18:12] <shapr> Forth?

[18:12] <shapr> Joy?

[18:12] <masak> fortran?

[18:12] <shapr> Hm, maybe.

[18:12] <crysflame> of what?

[18:12] <crysflame> shapr: brainfuck?

[18:12] <shapr> heh

[18:12] <shapr> That's just sick!

[18:12] <masak> the opposite should be totally isolative

[18:13] <shapr> Right. That's why I wondered about Joy.

[18:13] <masak> crysflame: yes :)

[18:13] <shapr> DEFINE approxEqual == 100.0 / rotate [0 =] [pop] [dup rolldown - swap /] ifte > .

[18:13] <shapr> That's approximately equal in Joy.

[18:13] <masak> that's sick too :)

[18:13] * crysflame stares at joy

[18:13] <shapr> Joy is a purely functional stack-based concatenative postfix programming language.

[18:14] <masak> so... it's joy if you're a sadist

[18:14] <shapr> I sort of enjoy writing Joy. :-/

[18:14] * shapr grins

[18:14] <masak> lol

[18:14] <shapr> One think I like about Joy is that you don't ever name your variables.

[18:14] <shapr> They're always positions on the stack.

[18:15] <masak> that's must be a relief :P

[18:15] <shapr> If you cut a program at any lexical boundary, what's left over is still a legal program.

[18:15] <shapr> And, lists are quoted programs, Joy does metaprogramming.

[18:15] <masak> cutting up the program: is that a needed property of a language? sounds more like what a snake could use

[18:16] <masak> but metaprogramming is nice

[18:16] <masak> meta-just about everything is nice, in fact

[18:16] <shapr> In some ways, it is a neat property. The cutting leading to a legal program is all to do with being 'concatenative'.

[18:17] <masak> it's as if i said that every sentence i ever uttered could be used successfully out of context

[18:17] <shapr> Like, in Haskell a space means apply, or roughly 'execute', but in Joy it means 'add more onto the program'

[18:17] <masak> ah

[18:17] <shapr> f g means beat up on g with an f

[18:17] <shapr> in Haskell.

[18:18] <masak> yes

[18:18] <shapr> f g in Joy means stick those two together into the same program

[18:18] <masak> how's that different from imperative programming?

[18:18] <mugwump> oh, damn autrijus !

[18:18] <mugwump> why did he have to introduce me to all of these great concepts from haskell

[18:19] <shapr> Because no one language has a monopoly on nifty trix?

[18:19] <mugwump> now I just want to use them

[18:19] <ninereasons> perl7 will have a monopoly :-)

[18:20] * shapr grins

[18:20] <shapr> masak: Haskell and Perl are closer in style than Haskell and Joy.

[18:20] <masak> perl7? perl6 already threatens to make my brain implode

[18:20] <masak> so joy is, what, beyond functional? :)

[18:21] <shapr> No, it's just different :-)

[18:21] <masak> ah

[18:21] <shapr> I don't think there's a linear scale of programming languages. There's a bunch of different approaches.

[18:22] <masak> of course

[18:22] <crysflame> use them well, young master mugwump

[18:22] <crysflame> beware the dark side

[18:22] <shapr> For example, I think Self is more OO than Smalltalk.

[18:23] <mugwump> crysflame, yes, we've already heard from Luke on the perils of "concise hell"

[18:26] <ninereasons> that's an interesting post by Luke, mugwump.  I hadn't read that before.

[18:26] <shapr> oh which post?

[18:26] <ninereasons> thanks for referring to it.

[18:26] <ninereasons> http://www.nntp.perl.org/group/perl.perl6.language/20009

[18:26] <mugwump> funny thing is, that was one of the criticisms of Perl in the early days too

[18:27] <shapr> It doesn't take me an hour to write a line with a lot of content :-)

[18:27] <shapr> But it did take me awhile to get used to cutting out traversal patterns with higher order functions.

[18:28] <ninereasons> that might be because you are (obviously) brighter than average, shapr . but what if I want to read what you took a minute to write?  

[18:28] <ninereasons> trouble, then. :-)

[18:28] <shapr> Maybe not...

[18:28] <shapr> Wait till I explain the traversal patterns =) then you might have no trouble with it.

[18:29] <mugwump> hmm, I wonder how I pull out the members of a junction

[18:29] <shapr> For example, if you have a function that takes one argument and evaluates to a result, you can use that function like a hammer on each item of a list with 'map'

[18:30] <shapr> If you have a function that takes two arguments and evalutes to one result, you can boil down a list into a single result with 'fold'

[18:30] <shapr> Like, sum of a list is fold (+) [1,2,3]

[18:31] <shapr> ninereasons: sounds readable so far?

[18:31] <ninereasons> so far.

[18:31] <lightstep> so if sum of list is fold (+) [1,2,3], then sum itself must be fold (+) ?

[18:32] <lightstep> (which is afaik not haskell)

[18:32] <shapr> Hm, I wish I had a few lines of good example code that were total 'conciseness hell'. Do you know of any?

[18:33] <lightstep> there's always @pointless

[18:33] <mugwump> sure, shapr, I guess that includes pugs

[18:33] <mugwump> :)

[18:33] <shapr> Oh, good point. Do you know of any impressive lines in pugs?

[18:34] <shapr> ninereasons: anyway, before we get too far into 'conciseness hell', I think the point of these basic combinators is to separate out the most basic traversal patterns.

[18:35] <shapr> I usually write a bunch of code till it works (using tests of course) and then I come back and see if the basic patterns are more obvious after I know more about the pattern of the whole program.

[18:35] <lightstep> you can try to confuse deliberately, like fold [] (++) . map f = concatMap f

[18:36] <shapr> oh, I know some possibly confusing code. The Fibonacci sequence! - "fib = 0 : 1 : zipWith (+) fib (tail fib)"

[18:36] <pjcj> reverse = foldl (flip (:)) []   -- from the Monad.Reader

[18:37] <integral> that's confusing?

[18:37] <shapr> pjcj: do you understand part of it?

[18:37] <lightstep> it's subjective: some people grok swing naturally

[18:38] <shapr> That version of reverse is bizarrely natural in my opinion.

[18:38] <shapr> In Haskell a list has an item and the rest of the list.

[18:39] <shapr> The colon is the list constructor.

[18:39] <shapr> so 1:[] is the same as [1]

[18:39] * integral found precedence the most confusing haskell thing

[18:39] <shapr> and 2:1:[] is the same as [2,1]

[18:40] <pjcj> shapr: I understand it - the author's point was that to most people is not as clear as the "obvious" version

[18:40] <pjcj> but I think you can make a similar argument in most languages

[18:40] <shapr> Yeah, true.

[18:40] <shapr> I liked that article :-)

[18:41] <shapr> I liked all the articles! I'm the editor! =)

[18:41] <pjcj> shapr: ha!  I didn't realise that :-)

[18:41] <mugwump> The thing is, you don't need functional syntax to state axioms that lead to the definition of a proof, and I think it's a great thing that pugs is steering things this way...

[18:42] <shapr> It's *very* gratifying to have someone quote TMR back to me. Thanks for reading it!

[18:42] <shapr> Yeah, I agree, I don't know where pugs is going, but I want to help it get there.

[18:42] <crysflame> TMR?

[18:43] <shapr> The Monad.Reader.

[18:43] <shapr> I had too much contract work this month, I couldn't organize an April 1st issue. But there will be one for March 1st!

[18:43] <pjcj> Only 11 months to wait!

[18:43] <shapr> May! argh!

[18:45] <shapr> Sure, I can learn category theory.. but remember which year I'm in... that's hard!

[18:46] <justatheory> purl, be math barbie

[18:46] <justatheory> :-

[18:47] <justatheory> :-D

[18:47] <crysflame> wrong window

[18:47] <shapr> Has someone already designed math barbie?

[18:48] * justatheory searches for the factoid.

[18:48] <justatheory> Barbie famously said, "Math is hard!"

[18:48] <integral> "Category theory is hard, lets go shopping!"

[18:49] <justatheory> that's it

[18:49] <ninereasons> someone should teach that to perlbot 

[18:49] * nothingmuch sighs

[18:50] <nothingmuch> long time coming

[18:50] <shapr> First time I was reading a big chunk of code (suffix trees) and I asked someone on #haskell to read ten pages of Haskell source, I got a "no way!" I thought ten pages of code was no big deal, judging from the fact that reading ten pages of Python takes ten to fifteen minutes at most.

[18:50] * nothingmuch needs to add a disk to pasta

[18:50] <shapr> So, there is definitely something to the conciseness bit.

[18:50] <shapr> How long do you expect ten pages of perl source to take to read?

[18:51] <justatheory> an hour per page

[18:51] <PerlJam> an hour?

[18:51] <PerlJam> are you a slow reader?

[18:51] <integral> how big a page?

[18:51] <PerlJam> or just unfamiliar with perl?

[18:51] <justatheory> It depends on what it is, really

[18:51] * nothingmuch thinks it depends how you're reading, and especially what

[18:51] <nothingmuch> and even more: what page are you on

[18:52] <nothingmuch> you're basically forming a 4 dimentional graph

[18:52] <nothingmuch> stored in a linear format

[18:52] <integral> 4?

[18:52] <PerlJam> shapr: I wouldn't expect to see 10 pages of perl  ;-)

[18:52] <nothingmuch> you have the states the program can be in

[18:52] <integral> Parse::RecDescent was a pretty slow read

[18:52] <nothingmuch> i tend to organize them in my eye as 3d space

[18:53] <nothingmuch> just because i'm biased to think that way

[18:53] <nothingmuch> and then control flow is traversal of that graph

[18:53] <nothingmuch> pointing in many ways

[18:53] <nothingmuch> it could be two dimensions for the states, but i prefer 3

[18:53] <nothingmuch> and lets not forget you're moving data around,

[18:55] * shapr googles for suffix trees in Perl

[18:56] <elmex> ??

[18:57] <shapr> your evil twin!

[18:58] <nothingmuch> argh! /me /still/ hasn't found out whether you can do software raid 1 between two logical volumes, on separate physical disks

[18:58] <crysflame> you can on linux

[18:58] <crysflame> you can do software raid across loopback filesystem images if you want

[18:59] <crysflame> if it has a block device inode then you can use it in a raid

[18:59] <nothingmuch> crysflame++; # thanks!

[19:00] <crysflame> well

[19:00] <crysflame> caveats DO apply

[19:00] <crysflame> don't go experimenting on a production system

[19:00] <crysflame> but, yes, basically, you can raid anything

[19:01] <nothingmuch> what i'm going to do: rsync root and mail

[19:01] <nothingmuch> i don't care about those movies that i somehow got, i think off the internet (what?)

[19:01] <nothingmuch> ;-)

[19:01] <nothingmuch> then I'll boot off live

[19:01] <nothingmuch> add the new disk

[19:01] <nothingmuch> zap it, put it in a VG

[19:01] <nothingmuch> and start copying media to there

[19:02] <nothingmuch> then I'll zap root

[19:02] <nothingmuch> partition it

[19:02] <nothingmuch> add most if it to the VG

[19:02] <nothingmuch> and put the new root there

[19:02] <nothingmuch> and leave /usr, /home and /var for the VG

[19:02] <nothingmuch> with /home being on a software raid

[19:03] <nothingmuch> makes sense?

[19:04] <nothingmuch> crysflame: ping?

[19:10] <mugwump> I'm renaming stevan's modules into modules/, ext/ is for stuff that doesn't run in pugs like the Perl 5 stuff...

[19:11] <mugwump> maybe.  hmm

[19:12] <castaway> nm!

[19:13] <nothingmuch> yes?

[19:14] <castaway> wheres my test-see? ;)

[19:14] * xerox got his pugs compiled, finally!

[19:14] <nothingmuch> castaway: i'm killing pasta right now

[19:14] <nothingmuch> i can give you about 30 minutes of see fun

[19:14] <nothingmuch> good enough?

[19:14] <castaway> awwww.. poor compi

[19:15] <castaway> its not that urgent.. just wanted to catch you at home for a change ;)

[19:15] <castaway> is it going to be reviived?

[19:15] <nothingmuch> yes, i'm adding a disk

[19:15] <castaway> nifty

[19:16] <nothingmuch> kernel upgrade first, thugh

[19:16] <castaway> good luck then ;)

[19:16] <nothingmuch> thanks

[19:16] * castaway gets back to pondering how to get the localIP in emacs

[19:17] <xerox> castaway: (setq *iprun-some-external-program-please "lynx --dump checkip.dyndns.org")

[19:17] * nothingmuch wonders what FS he should use

[19:17] <xerox> Whoops.

[19:17] <xerox> castaway: (setq *ip* (run-some-external-program-please "lynx --dump checkip.dyndns.org"))

[19:17] <nothingmuch> reiserfs makes sense for /home, ext3 for /var, and xfs for /media

[19:17] <castaway> heh

[19:18] <mugwump> how complex!

[19:18] <wilx> Heh.

[19:18] <nothingmuch> i think

[19:18] <wilx> I used ext3 for /boot and jfs for everything else :)

[19:18] * castaway checks in the logs to see if she actually wants the local or the remote IP

[19:19] <nothingmuch> jfs/xfs seem tastey

[19:19] <nothingmuch> how well supported are they by e.g. other systems, life CDs, etc?

[19:26] <chip> Anybody know what's supposed to happen given C< sub foo (Int $i) { print $i }  foo(1.1) >?

[19:26] <chip> Is the 1.1 coerced, or is that a type error -> exception?

[19:31] <mugwump> that should be fine afaik

[19:32] * mugwump & # long overdue sleep...

[19:41] * theorbtwo is back.

[19:42] <Darren_Duncan> you're back!

[19:52] * mugwump 's buffers finish synking to svk

[20:01] <jabbot> pugs - 1399 - Added fallthrough error cases for chr an

[20:01] <jabbot> pugs - 1398 - Add S28-ish discussion on perl vars in l

[20:01] <jabbot> pugs - 1397 - Re-organisation - move modules from ext/

[20:01] <jabbot> pugs - 1396 - Add a demo Set implementation

[20:02] <Khisanth> there is an S28? O_O

[20:05] <Corion> Hmmm. Why do the pugsrun/ tests in http://xrl.us/fmw2 have a semicolon after the redirect sign? Is there some weird magic that happens with Haskell/FreeBSD which doesn't happen on Win32?

[20:05] <Corion> ... or is that just an artifact of the HTML generation? I wonder because the tests fail on the smoke while they are OK on my machine.

[20:06] <shapr> How do I run a local smoke test?

[20:06] <Corion> shapr: "make test" runs the tests

[20:07] <Corion> shapr: and "make test TEST_VERBOSE=1" runs all tests with output

[20:07] <shapr> how do I turn that into the sexy output on kungfuftr's site?

[20:07] <Corion> shapr: theorbtwo gave the magic incantation yesterday...

[20:07] <Corion> Oooo - and the chr() tests succeeded! :)

[20:08] <theorbtwo> "after the redirect sign"?

[20:08] <Corion> Hmmm. I should download GHC/Debian, so I can test on Linux too.

[20:08] <Corion> theorbtwo: I see ">;" in the output, where there should be ">"

[20:08] <theorbtwo> Oh, when I gave the magic incantation, I missed a bit -- you need to set PERL6LIB.

[20:08] * shapr cheers about chr tests

[20:08] <Corion> theorbtwo: in t/pugsrun/*.t

[20:08] * Corion cheers for shapr

[20:08] <theorbtwo> Otherwise, as far as I can tell, it picks up perl5's Test.pm, and somehow mostly works anyway, as far as I can guess.

[20:09] <theorbtwo> Congrats, shapr!

[20:09] <Corion> theorbtwo: Hmmm - instead of setting PERL6LIB, -I should work as well. I think. (-I in TEST_HARNESS=pugs -Iblib6/lib)

[20:09] * shapr bounces happily

[20:10] <Corion> shapr: Bounce on!

[20:10] *** Corion changes topic to: Under no circumstances collapse your lambacamel duality | pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | smoke: http://xrl.us/fmw2 | win2k:r1400(225/3849) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[20:10] <theorbtwo> Yeah, should.

[20:11] <Corion> Hmmm. I guess there are no Debian GHC packages for Debian stable, right :)

[20:11] <theorbtwo> Corion, you should set up a win32 smoke.

[20:11] <Corion> theorbtwo: Yes! :)

[20:11] <theorbtwo> At the very least, they'd be 6.2.something instead of 6.4.

[20:11] <jabbot> pugs - 1400 - added cheesy hex implementation, should 

[20:12] <Corion> theorbtwo: I run 6.2 on Win32 too, so that should be fine

[20:12] <Corion> :)

[20:13] <Corion> theorbtwo: Is there any premade smoker script?

[20:13] <Corion> theorbtwo: And/or how should I "puglish" the smoke results?

[20:13] <Corion> (the smoker will only run when I'm at my home machine, as I don't let it run unattended)

[20:13] <shapr> I'd guess there's someway to pipe 'make test' into testgraph.pl?

[20:13] <theorbtwo> There is, Corion -- it's in utils.

[20:14] <Corion> shapr: More or less. You run theorbtwos magic incantation I think, which sets TEST_HARNESS to pugs. But maybe the wrapper in utils is all that's needed ...

[20:14] <theorbtwo> shapr: set HARNESS_PERL and PERl6LIB, then run perl utils/yaml_harness.pl, then perl utils/testgraph.pl > testgraph.html

[20:15] <Corion> I was thinking of writing an irc bot that logs on and changes the topic to match whatever test result it got :)

[20:15] <shapr> It's possible I could hack pugs into lambdabot 

[20:15] <ninereasons> apt-get install -s ghc6 # ghc6 (6.2.2-3 Debian:testing)

[20:15] <shapr> Since lambdabot is written in Haskell.

[20:15] <shapr> Though maybe implement builtins is more useful.

[20:15] <Corion> shapr: Does Haskell have a safe mode? Otherwise, I wouldn't trust outside code :)

[20:16] <Corion> shapr: Indeed :)

[20:16] <theorbtwo> For bonus points, run utils/categorize_tests.pl, and the links will work.

[20:16] <shapr> There's sort of a safe module.

[20:16] <PerlJam> Corion: Haskell doesn't *need* a safe mode!

[20:16] <Corion> PerlJam: Well, you somehow need to restrict all IO :)

[20:16] <PerlJam> Corion: behold the monad!  ;)

[20:17] <Corion> I've been thinking a bit about filenames / directories, and the way IO::All works with files/dirs (lazy tree) doesn't sound too bad to me. Except that it maybe doesn't fit well with the existing file object.

[20:17] <Corion> PerlJam: ??? That doesn't help you discriminate between safe and unsafe IO.

[20:17] <Darren_Duncan> I noticed the move from /ext to modules/ ... good move

[20:17] <shapr> It does actually. No IO is totally safe =)

[20:17] <Corion> shapr: :)

[20:18] <Corion> shapr: You can still consume resources, but yes, you can't attack other systems :)

[20:18] <shapr> Right.

[20:18] <xerox> shapr: I tought the same thing! (hacking pugs into lambdabot)

[20:18] <theorbtwo> You can't run the tests unless you allow prints to STDOUT.

[20:18] <shapr> xerox: go for it!

[20:18] <Corion> ... and some tests even want to create files and start subprocesses!

[20:19] <shapr> theorbtwo: but you can run all the tests as pure code, and the top level code would write to STDOUT.

[20:19] <Corion> (behold the mindset of Perl :) )

[20:19] <xerox> shapr: you probably can do it faster than me, even just finished it. I'd better pull your patches that are on the way.

[20:19] <shapr> xerox: I'd rather work on implementing builtins at the moment. I don't know when I'll have time to hack on pugs again.

[20:19] <theorbtwo> You'd have to rewrite Test.pm for that, shapr.

[20:19] * Corion goes looking for the magic smoke incantation

[20:20] <theorbtwo> I've never looked at the smoke script in the SVN.

[20:20] <shapr> That's true. Or rewrite the tests as QuickCheck tests. I considered that earlier today.

[20:20] <Corion> (+ 1) shapr -- manic builtin implementation

[20:20] * shapr grins

[20:20] <shapr> But I'd rather approach pugs from the native perl viewpoint first, and then consider QuickCheck tests later.

[20:20] * castaway wonders if smoking should be dubbed "barking" for pugs. (or some such)

[20:21] <Corion> Oh, but smoked dog is some very tasty food! :)

[20:21] * shapr laughs

[20:21] <castaway> brrrr

[20:21] <pjcj> beagles smoke, why not pugs?

[20:21] <pjcj> (189 subtests UNEXPECTEDLY SUCCEEDED) -- thet's a lot of unexpected success

[20:22] <theorbtwo> In Soviet Russia, smokes beagle you!

[20:22] <Khisanth> Soviet Russia must have been a very strange place

[20:22] <theorbtwo> Cool, pjcj, what'd you do?

[20:22] <shapr> yeah, tell us!

[20:22] * xerox only knows the "say" builtin as now.. maybe he can work on @pugs.

[20:22] <pjcj> svk pull; make test

[20:22] <theorbtwo> Oh.

[20:22] <pjcj> I wasn't me, honest!

[20:22] <shapr> How do you know if a test should succeed or not?

[20:23] <pjcj> s/I/It/

[20:23] <castaway> umm, it tests it against an expected result

[20:23] <shapr> Er, should the # TODO bits be removed when a test is expected to pass?

[20:23] <theorbtwo> Yes, shapr.

[20:23] <shapr> oops.

[20:23] <theorbtwo> If the tests calls todo_is, todo_ok, etc, then it is expected to fail.

[20:24] * Corion has unfriendly things to say about lots of unixisms in run_smoke.pl

[20:24] * castaway grins at Corion.

[20:24] <Corion> ... and I still get these "couldn't match line:" errors ...

[20:24] <theorbtwo> Corion, did you see my comment about PERL6LIB?

[20:24] <theorbtwo> That fixed it for me.

[20:24] <Corion> theorbtwo: I thought that run_smoke.pl set PERL6LIB: $ENV{PERL6LIB}	    = "ext/Test/lib";

[20:25] <Corion> theorbtwo: Is there anything more to set? /me scrolls back

[20:26] <shapr> I found a possible smoketest logo - http://www.marinaomi.com/paintings/all/le_penchant_lg.html

[20:26] <shapr> This person has more like that - http://www.marinaomi.com/paintings.html

[20:26] <theorbtwo> Oh, that may work as well.

[20:27] <Corion> theorbtwo: Weird ... I

[20:27] <theorbtwo> I'm not impressed by the art, shapr, and I doubt he'd be impressed if we copped it.

[20:27] <Corion> ... I'll dig into this a bit.

[20:27] <shapr> Yeah, true.

[20:29] <shapr> theorbtwo: what's the expected to pass call? just remove the todo_ part?

[20:29] * castaway guesses "yes"

[20:29] <theorbtwo> Yep.

[20:29] <Darren_Duncan> If anyone was here last night when the discussion of comparing two refs was going on ...

[20:29] * theorbtwo was.

[20:29] <Darren_Duncan> the word back from p6l seems to be that =:= is the most appropriate operator

[20:30] <castaway> this morning ,)

[20:30] <Darren_Duncan> so that matches what I used by default in the last SRT commit

[20:30] <Darren_Duncan> I'll clarify, about 12 hours ago

[20:30] <theorbtwo> That's sad... I should possibly post to the thread.

[20:31] <Darren_Duncan> mainly it was Larry who said : The =:= operator is almost certainly what you want here.

[20:31] <Corion> pasteling: nopaste?

[20:31] <Darren_Duncan> and giving further information later

[20:31] <Darren_Duncan> my quote was a one-liner

[20:31] <pasteling> "Corion" at 217.234.108.235 pasted "Output of pugs -Iblib6\lib -w t\pugsrun\01-dash-uppercase-i.t" (19 lines, 923B) at http://sial.org/pbot/8851

[20:32] <Corion> theorbtwo: That's what I get as output. I don't see how it can be matched by the converter, so there must be something wrong...

[20:33] <Corion> and I get the same output when I use -Iext/Test/lib

[20:33] <Corion> ... but I don't see what I'm doing wrong ;)

[20:33] <Corion> BTW - should I patch out the unixisms in the run-smoke.pl and make it depend on Config.pm instead?

[20:34] <theorbtwo> If you run by hand, you need to set the other env var as well.

[20:34] <Corion> ... and File::Spec (p5)

[20:34] <theorbtwo> TEST_ALWAYS_CALLER

[20:34] <Corion> theorbtwo: D'oh!

[20:34] * Corion goes looking for the exact incantation

[20:35] <Corion> No, still same output, no difference.

[20:35] * Corion goes to make run-smoke.pl dual-portable

[20:38] <theorbtwo> Cor, don't look for any exact incantation I've given, because it's since come to my attention that most of them are wrong.

[20:38] * theorbtwo isn't as smart as he sometimes appears to be.

[20:39] <shapr> Gee, I thought you were a palantir.

[20:40] <shapr> What does your nickname mean?

[20:40] <shapr> should make test show me any unexpected passes in the summary at the end?

[20:40] <Corion> theorbtwo: Hmmm. I don't have the slightest idea what any of the incantations effect, and I don't want to go source/doc diving either

[20:40] <Corion> shapr: Yep

[20:40] <theorbtwo> A palantir is the correct thinking.

[20:41] <shapr> theorbtwo: So you don't have to be so smart yourself, you can lookup anything, anywhere, with no trouble :-)

[20:42] <shapr> Having a palantir that knew its way around the biggest libraries in the world would be great.

[20:42] <theorbtwo> HARNESS_PERL determines how the test harness tries to call the test scripts -- if it's not set, then they'll get run with /usr/bin/perl.

[20:42] <theorbtwo> PERL6LIB tells pugs where to find the libraries.  If it's set incorrectly... things still mostly work, but I have no idea why.

[20:43] <theorbtwo> TEST_ALWAYS_CALLER tells the pugs version of Test.pm to give the caller information, and needs to be set if you're using yaml_harness.

[20:43] <theorbtwo> (Or if you want yaml_harness compatable output.)

[20:44] <Corion> Aaah. Despite of the spewed error messages, the script still works. I was simply too impatient :(

[20:44] <theorbtwo> What sort of spewed error output?

[20:44] <theorbtwo> It's likely my fault.

[20:45] <Corion> theorbtwo: No - I don't redirect the STDERR output of yaml_harness.pl to dev/null, so I see all the warnings

[20:45] <theorbtwo> Ah.

[20:46] <Corion> So - should I push my smoke report anywhere ? Or the yaml?

[20:47] <theorbtwo> Put the generated html/css someplace HTTP-accessable, and give the URL in the topic?

[20:47] <theorbtwo> Putting up the YAML as well might be nice.

[20:48] <Corion> theorbtwo: Will do both. And I get the ">;" in the generated output too, so it must be some kind of artifact. Are you manually encoding entities?

[20:49] <Corion> Ah, yes - the "&gt" is missing the semicolon, which gets encoded separately. Or something. We-ird

[20:49] <Corion> (all of this doesn't explain the failures of my tests under kungfuftrs smoke)

[20:49] * Corion does some uploading

[20:51] <jabbot> pugs - 1401 - marked tests expected to pass

[21:00] <shapr> make test takes a long time for me. What about adding single functional tests for each major chunk, and only running all the subtests if the top level test fails?

[21:01] <shapr> In my opinion, tests that take a while to run don't get executed much.

[21:01] <Corion> shapr: The "prove" command does that, or I run my single tests via ./pugs -Iblib6/lib -w t/mytest/test.t

[21:01] <shapr> oh

[21:02] <Corion> shapr: I run "make test" only before a commit, otherwise I run the single test (file) I'm working on

[21:02] <Corion> ... at least I think the "prove" command does wildcard based running of tests. I seldom use it

[21:02] <xerox> What does the .t extension mean?

[21:02] <castaway> that its a file with tests in

[21:02] <Corion> xerox: ".t" means "test" :)

[21:03] <xerox> !

[21:03] <shapr> Functional tests for each major chunk would let you see if you broke something somewhere else in Pugs while you're working on one part of the code.

[21:04] <Corion> shapr: Yeah - I think the "prove" command lets you run sets of tests (as given by their filespec/filename)

[21:04] <Corion> yep - prove does exactly that

[21:04] * Corion points to http://datenzoo.de/pugs/win2k.html

[21:06] <theorbtwo> Cool, corion!

[21:06] <pjcj> Perl has a coretest target - maybe pugs could use one.  The danger then is that the rest of the tests don't get run very often.  That is why Perl's coretest target isn't widely publicised.

[21:06] <Corion> Ah. I found the bug in testgraph.pl - you're applying the regexes in the wrong order, or rather, you should be using HTML::Entities anyway :)

[21:07] <Corion> The last, global scale encoding regex also catches ";" - which was produced by earlier encoding.

[21:07] <theorbtwo> Oh!

[21:07] <theorbtwo> Add it to the set of safe characters in those brackets?

[21:07] <theorbtwo> You can make it use HTML::Entities iff it will entitize /all/ chars above 127.

[21:08] <Corion> theorbtwo: Yep - that's what I did.

[21:08] <Corion> theorbtwo: AFAIK, HTML::Entities does just that, but the other fix works as well (I think, will see in 3 minutes)

[21:08] <theorbtwo> That way I can avoid encoding issues.

[21:08] * theorbtwo nods.

[21:09] <Corion> The win2k smoker will be run manually and still needs lots of manual intervention before the update is pushed to the site. I'll automate that, so it'll become a single-click thing for me to run the smoker.

[21:09] <Corion> (so even should I lose interest in Pugs soonish, I can still smoketest with little effort)

[21:10] * Corion also points to http://datenzoo.de/pugs/win2k.yml , which contains the output as yaml

[21:10] * Corion fades away, logging

[21:10] <theorbtwo> G'night, Max.

[21:15] <Corion> ... the fixed line should be 	  $title =~ s/([^-&<>\/().#A-Za-z0-9 ;])/sprintf '&#x%X;', ord $1/eg;

[21:16] * Corion does a cheshire cat impersonation. again.

[21:24] <hlen_> can you say `when' inside `for' statements as in a `given' statement?

[21:25] <integral> you should be able to use when anywhere...

[21:25] <Khisanth> when sounds a bit like if :)

[21:28] <integral> except it automatically adds the $_ ~~ bit

[21:28] <pjcj> Does anyone know the status of autrijus' proposed rewrite of Eval.hs?

[21:29] <Darren_Duncan> from what I read, you can use 'when' inside any block; its block executes if $_ equals the when-expression

[21:29] <integral> not equals, it's compared with ~~, so you can do it based on types, etc

[21:29] <Darren_Duncan> an outer 'given' block simply sets $_ to its value

[21:30] <hlen_> ok, thanks guys =)

[21:30] <Darren_Duncan> likewise, you can use a CATCH block without a 'try'; it will catch exceptions generated in the block it is inside

[21:31] <Darren_Duncan> one thing I don't know yet is whether you can have multiple CATCH in the same block

[21:31] <Khisanth> why not? shouldn't you be able to catch different kinds of exceptions?

[21:47] <Darren_Duncan> I meant that, say you have some normal code, then a catch block, then more code, than catch; the first catch block directly below the code throwing the exception is the one executed ... that's what I meant ... someone asked me if this would work, they thought it should, I didn't know

[21:47] <Darren_Duncan> they wanted behaviour like multiple successive try blocks, but in one try block

[21:51] <Corion> Is there a way to make a dry-run with svn ? I want to see what svn thinks has changed locally before I commit

[21:53] <pjcj> svn status or svn diff ?

[21:54] <Corion> pjcj: Thanks

[21:54] <Corion> Maybe I now broke the smoke stuff with my "portability fixes".

[21:55] <Corion> Feel free to revert my stuff (or even better, fix it)

[22:01] <jabbot> pugs - 1402 - Portabit fixes on smoke stuff

[22:06] <chip> Anybody know what's supposed to happen given C< sub foo (Int $i) { print $i }  foo(1.1) >?  Is the 1.1 coerced, or is an error thrown, or ... ?

[22:09] <Corion> chip: I'd assume it's equivalent to "foo(round(1.1))", but a compile time error due to type coercion would be nice, for constants.

[22:10] <Corion> (or maybe even better foo(floor(1.1)) , but I still prefer the compile time error)

[22:10] <Corion> ... as for as far as I know, Perl6 will have a proper tower of numbers, will it?

[22:11] <Corion> Ah. Autrijus decided by matter of fact that Perl6 would get Schemes tower of numbers. A sane decision IMO :)

[22:12] <Corion> &

[23:10] <stevan> howdy yah-all

[23:11] * shapr waves the lambda camel pom-poms

[23:11] * stevan wonders if shapr ever sleeps

[23:11] <shapr> I tried it once, got me highly irregular, swore I'd never do it again.

[23:16] <stevan> mugwump: you around?

[23:16] <crysflame> http://www.k-read.net/custom_rooterpoms.htm # choose your color and imprint a logo

[23:17] <shapr> brilliant!

[23:17] <shapr> What colors does perl ues?

[23:17] <crysflame> blue and white is the o'reilly colors

