[00:01] <azuroth_t> hmm

[00:01] * azuroth_t is trying out feather's web-based IRC client. cool

[00:02] <Khisanth> CGI:IRC?

[00:02] <azuroth_t> I believe so

[00:04] <azuroth_t> doh. somehow I wiped out all of src/Pugs/PIL2.hs

[00:08] <Khisanth> ...

[00:08] <Khisanth> well at least reverting changes is trivial :)

[00:09] <azuroth_t> yeah. I was wondering for a few days why it wasn't compiling - just thought to try reverting then

[00:20] <azuroth_t> ?eval my @a = (Int(4), Str("blah")); say @a;

[00:20] <evalbot_7905> Error: cannot cast from VObject (MkObject {objType = (mkType "Class"), objAttrs = <ref>, objOpaque = Nothing, objId = 17}) to Pugs.AST.Internals.VCode (VCode) 

[00:21] <azuroth_t> err, stupid

[00:55] <geoffb> Anyone happen to know if there is a way to get use Perl journals from authors you are interested in to appear on the same page / in the same feed without declaring them friends?

[02:17] <scook0> woo!

[02:18] <luqui> woo?

[02:22] <scook0> oh, just finished exams this morning, so hopefully more time for Pugs stuff

[05:08] <luqui> ?eval +'0123'

[05:08] <evalbot_7905> 0.0 

[05:10] <svnbot6> r7906 | luqui++ | Fixed +'0123'  (used to return 0).

[05:11] <luqui> ?eval +'0123'

[05:11] <evalbot_7906> 123.0 

[05:36] <jdv79> seen stevan 

[05:36] <jabbot> jdv79: stevan was seen 3 days 8 hours 23 minutes 12 seconds ago

[07:06] <gaal> liz6: ping

[08:34] <gaal> Yay, TaPL arrived.

[09:13] <azuroth> TaPL eh? *adds to read-list*

[09:15] <azuroth> d'aw, safari doesn't seem to have ti

[10:49] <renormalist> Hi all!   Are there any german speaking people here? I'm looking for german Pugs enthusiasts who want to participate in the German Perlworkshop 2006, to establish a Pugs focus. Currently I only know of german speaking rafl and iblech.

[11:06] <leo> Hi renormalist - just answered the mail - I'll come to Bochum

[11:17] <renormalist> nize, thanks

[11:17] <r0nny_> re

[11:18] <azuroth> fwd?

[11:30] <svnbot6> r7907 | liz++ | Some more work on S17draft.pod: boy, is this hard to convey in English

[11:31] <r0nny_> renormalist: i'm german

[11:44] <rafl> r0nny_: Hello.

[11:44] <rafl> Err.

[11:44] <rafl> renormalist: Hello.

[11:44] <rafl> renormalist: Got my mail WRT friday?

[11:45] <r0nny_> ;P

[11:45] <r0nny_> yo rafl 

[11:45] <r0nny_> svk mirror ?

[11:47] <rafl> Nothing new.

[12:31] <sri_> renormalist: i'll be there too

[12:45] *** theorbtwo is now known as Dorwardsinnervoi

[12:45] *** Dorwardsinnervoi is now known as theorbtwo

[14:06] <autrijus> renormalist: I think I may be able to make to the Deutscher Perl workshop.

[14:06] <autrijus> esp. good if iblech also manage to come :)

[14:07] <autrijus> <- helsinki airport

[14:08] <Limbic_Region> helsinki airport headed where?

[14:08] <Limbic_Region> salutations btw

[14:09] <rafl> autrijus++; # German Perl Workshop! :-)

[14:09] <autrijus> headed to Zurich, then to Hong Kong, then to Taipei

[14:09] * clkao waves at autrijus

[14:09] * autrijus particles at clkao

[14:09] <rafl> autrijus: wlan on the helsinki airport? I wasn't able to get connected there when I've been there the last time..

[14:09] <autrijus> wlan with AP "homerun", though require payment

[14:10] <theorbtwo> Autrijus: International man of hackery.

[14:10] <autrijus> had a Very Long Conference with jhi and aevil last night

[14:10] <rafl> I didn't care about payment when I was there. I was forced to wait 5 hours :-/

[14:10] <autrijus> on unicode, cpan (a perl6/ directory in cpan coming up), community, releng, and more

[14:12] <rafl> autrijus: Only a perl6 directory which doesn't differ much from the rest of cpan beside there live perl6 modules or will some changes that were proposed by S22 be implemented?

[14:12] <autrijus> rafl: a new indexer.

[14:12] <autrijus> idea is when you upload to PAUSE it can shuffle the module into diff. dirs

[14:12] <autrijus> by the "language" part in the long name

[14:13] <autrijus> so perl5:DBI goes to orig perl5 dir

[14:13] <autrijus> perl6:DBI (implicit on a p6 "module DBI") goes to perl6

[14:13] <autrijus> and to be indexed separatedly according to static analysis and multiversioning specs

[14:13] <rafl> But ot the dists/ + pool/ structure?

[14:14] <autrijus> pool?

[14:14] <autrijus> (mm boarding calls)

[14:15] <autrijus> I'll write up more about what aevil/jhi and me tlaked about in journal... I've jotted things in analog dead trees

[14:15] <autrijus> and got a wonderful "Unicode Demystified" book from jhi

[14:15] <autrijus> so I'm happy -- but gotta run now

[14:15] * autrijus waves &

[14:16] <autrijus> will try to pingback from the zurich airport ;)

[14:17] <stevan> enjoy your flight autrijus 

[14:17] <autrijus> thanks :) &

[14:39] <nothingmuch> http://www.garg.com/jim/anime_laws6.0.html

[15:47] <renormalist> autrijus: It would be veeeeery nize, if you would come to the workshop.

[15:48] <renormalist> sri_: sorry for late reading. It would be nize if you would come to the perlworkshop. Do you plan a talk?

[15:56] <gaal> any language folks about?

[15:56] * renormalist brb in 1h

[15:57] <gaal> why can't we give instance variables default values right in the C<has> declaration?

[15:57] <gaal> class Jabberwock; has $.claws = "catch"

[15:59] <gaal> Oh, I see in S12 that in roles that's valid. Won't it be useful in general too?

[16:45] <gaal> what's the latest spelling of the default invocant? "self" with no sigil?

[16:48] * sili saw something about a $?SELF, but has no idea what it is

[16:50] <PerlJam> gaal: aye.

[16:51] <sili> PerlJam: what's $?SELF ?

[16:51] <PerlJam> $?SELF and self are both in the "spec"  

[16:51] <sili> hmm.

[16:51] <PerlJam> sili: it's the current invocant.

[16:52] <PerlJam> Though the spelling may change soon.  $Larry made some rumblings about unifying $?vars and $=vars

[16:52] <sili> what's the difference?

[16:53] <gaal> PerlJam: thanks. S12 on dev.perl.org is old!

[16:54] <PerlJam> $=vars were PODish and $?vars were stuff you knew at compile time.  Since that's basically the same thing, $Larry was talking about unifying them under $=vars so that the ? twigil could be free for other nefarious uses.

[16:54] <gaal> what, you mean i can't do documentation that changes at runtime? :-p

[16:54] <PerlJam> gaal: aye. The synopses need updating.

[16:57] <gaal> hmm, and in-class method calls, are they now self.othermeth?

[16:57] <gaal> or would othermeth suffice?

[16:58] <PerlJam> .othermeth or self.othermeth

[16:58] <PerlJam> or $?SELF.othermeth

[16:58] <gaal> no, .othermeth is sometimes $_.othermeth

[16:58] <gaal> s/sometimes//

[16:58] <PerlJam> no, .othermeth is *always* $_.othermeth.  It's just that sometimes $_ is the invocant :)

[16:58] <gaal> yeah.

[16:59] <sili> wha? so sub foo {$_ is self ?}

[16:59] <gaal> until assigned differently, yes. $_ is thankfully lexical now

[16:59] <theorbtwo> ?eval class foo { method bar { } }; foo.bar

[17:00] <evalbot_7907> undef 

[17:00] <theorbtwo> ?eval class foo { method bar { } }; &foo::bar

[17:00] <evalbot_7907> \sub {...} 

[17:00] <theorbtwo> Oy.

[17:00] * theorbtwo doesn't remember the method of Method (or whatever it's called) to get the prototype.

[17:00] <theorbtwo> (Or even if there is one, come to think of it...)

[17:01] <gaal> i doubt there's one in pugs now. dunno about the spec.

[17:01] <gaal> there is .arity...

[17:01] <gaal> fwiw.

[17:02] <PerlJam> theorbtwo: .prototype or .signature probably

[17:02] <theorbtwo> ?eval class foo { method bar { } }; &foo::bar.prototype

[17:02] <evalbot_7907> Error: No compatible subroutine found: "&prototype" 

[17:02] <theorbtwo> ?eval class foo { method bar { } }; &foo::bar.signature

[17:02] <evalbot_7907> Error: No compatible subroutine found: "&signature" 

[17:02] <theorbtwo> gaal: I know about arity (I wrote it), but that isn't very helpful here.

[17:03] <gaal> theorbtwo: what are you trying to do?

[17:03] <theorbtwo> Find the default name of the invocant by asking.

[17:03] <theorbtwo> Twas just a silly idea.

[17:04] <gaal> ahhhhh well i doubt that could even work, because it's likely folded in during paring.

[17:04] <gaal> parsing

[17:04] <gaal> brb # tea

[17:05] <renormalist> ?eval say "Hello";

[17:05] <evalbot_7907> Hello bool::true 

[17:06] <PerlJam> gaal: depends on when you ask.

[17:06] <PerlJam> If you asked at compile-time, just after static analysis you should get a reasonable answer.

[17:06] <renormalist> ?eval "aaa" ~~ "aaa";

[17:06] <evalbot_7907> bool::true 

[17:07] <renormalist> ?eval "aaa" ~~ rx/aaa/;

[17:07] <evalbot_7907> *** Cannot parse PGE: :w::aaa *** Error: end of file Match.new(   ok => bool::false,    from => 0,    to => 0,    str => "",    sub_pos => (),    sub_named => {} ) 

[17:07] <renormalist> ?eval "aaa" ~~ rx:perl5/aaa/;

[17:07] <evalbot_7907> Match.new(   ok => bool::true,    from => 0,    to => 3,    str => "aaa",    sub_pos => (),    sub_named => {} ) 

[17:08] <gaal> PerlJam: who is this information useful for?

[17:09] <gaal> the only place it might conceivably be usa*ble* is inside the method itself

[17:09] <Juerd> renormalist: Please find a pugs interpreter :)

[17:09] <PerlJam> gaal: I don't know, it was theorbtwo's idea :)

[17:09] <renormalist> Juerd: I have one, I just try out this channels eval thing.

[17:09] <Juerd> renormalist: Okay.

[17:09] <renormalist> Juerd: :-)

[17:10] <Juerd> renormalist: It's meant for helping in conversation, though

[17:10] <Juerd> To illustrate a point

[17:10] <renormalist> Juerd: ah, ok

[17:10] <theorbtwo> My idea is that it'd be useful for automagic documentation.

[17:10] <PerlJam> yeah,  I was wondering if you were pointing out that PGE was broken  :)

[17:10] <gaal> and to impress visitors. don't forget that.

[17:10] <Juerd> PerlJam: So was I

[17:11] <PerlJam> theorbtwo: perl6's introspection will be tremendously useful for automagic docs.

[17:11] <PerlJam> theorbtwo: but only in documenting "what we already know" in some sense.

[17:12] <PerlJam> (where "we" are the programmers actually looking at the code)

[17:12] <Juerd> I think signatures will prove very useful in documentation.

[17:12] <Juerd> Usage information so concise, and because of variable names even documenting, that the full description will often not even be needed.

[17:13] <gaal> yeah, Poogle anyone?

[17:13] <Juerd> Eh, that reading it will often not be needed.

[17:13] <Juerd> It does have to exist, of course :)

[17:13] <Juerd> gaal: Sounds cute :)

[17:14] <Juerd> Though I'd prefer a php.net-like system

[17:14] <Juerd> php.net/keywoard

[17:14] <Juerd> s/oa/o/

[17:14] <theorbtwo> Also sounds like a trademark lawsuit waiting to happen.

[17:14] <Juerd> I made something like it for Perl, under tnx.nl

[17:14] <Juerd> tnx.nl/print

[17:14] <Juerd> tnx.nl/func

[17:14] <gaal> theorbtwo: http://www.haskell.org/hoogle

[17:14] <Juerd> tnx.nl/op,OO,requick,vars

[17:14] <gaal> it's spectacularly usefule.

[17:14] <Juerd> Really great on IRC.

[17:14] <gaal> s/e\././

[17:15] <theorbtwo> LOL: 

[17:15] <gaal> Juerd: hoogle is of course available on #haskell.

[17:15] <theorbtwo> "Roses are red. Violets are blue. Google rocks. Homage to you.

[17:15] <gaal> yeah, ndm++.

[17:16] <Juerd> I like the thinkgeek "Roses are #ff0000 / Violets are #0000ff" shirt

[17:17] <Juerd> The spare ribs delivery guy is late :(

[17:17] <Juerd> HUNGRY

[17:18] <integral> maybe he's still being marinaded? :)

[17:19] <Juerd> He? :)

[17:19] <Juerd> Eh :)

[17:19] <Juerd> I think he's stuck in traffic.

[17:19] <Juerd> Traffic's terrible here around this time.

[17:19] <Juerd> And since this area is reachable only by car and by very brave people... :)

[17:21] <gaal> getting back to the previous discussion: i don't see though, why doesn't "othermeth" Just Work like say in Java? is this on purpose to avoid confusion, or is there something preventing it from working?

[17:22] <gaal> i know this is an oooold discussion - i'm not beating it, just trying to summarize the results.

[17:26] <PerlJam> gaal: 1) how is the programmer to know it's a method?  2) how is perl to distinguish between methods and ordinary subs?

[17:26] <nnunley> Java always has an object in context -- there are no global subs.

[17:27] <gaal> PerlJam: 1 is quite a reasonable ergonomic point. 2 can be addressed similarly to how MMD questions are.

[17:27] <gaal> but that's fair enough.

[18:06] <rafl> renormalist: Updates for friday?

[18:12] <renormalist> rafl: just sent you mail. Still dont know. I would like to come, but it collides with other things ...

[18:16] <rafl> renormalist: Would be great, though.

[18:23] <gaal> i'm waking up late, but Rules using <> as special symbols makes quick'n'dirty XML parsing a pain.

[18:26] <gaal> anyone have a PGE-enabled pugs on feather?

[18:26] <gaal> ..that works :)

[18:35] <rafl> gaal: Doesn't /usr/bin/parrot work?

[18:38] <rafl> gaal: Please highlight me if it doesn't. I'll try to fix that later. I need to leave now.

[18:46] <gaal> rafl: parrot -V runs, but all PGE matches via pugs fail.

[18:46] <gaal> ?eval "moose" ~~ /m/

[18:46] <evalbot_7907> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[18:46] <gaal> ?eval say "ok" if "moose" ~~ /oo/

[18:46] <evalbot_7907> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[18:47] <gaal> rafl: that isn't the error I was getting from eric256's autopugs though.

[18:47] <gaal> I got:

[18:47] <gaal> *** Cannot parse PGE: (the rule I was using)

[18:47] <gaal> *** Error: end of file

[19:11] <PerlJam> gaal: work for me (with freshly compiled parrot+pugs)

[19:15] <gaal> ath?

[19:15] <gaal> path?

[19:16] <gaal> oh, on your own box?

[19:16] <PerlJam> yeah, on my own box.  Hold on a sec and I'll do it on feather.

[19:16] <PerlJam> er, it might be a little more than a "sec"  :-)

[19:16] <gaal> thanks (i'm trying to concentrate on writing so fixing anything that's not english is too distracting)

[19:17] <gaal> that's okay :)

[19:17] <gaal> actually maybe you can help me by just porting a regexp:

[19:17] <gaal> #  rx:perl5{<description>(.+)</description>\s*</item>}

[19:18] <gaal> is this going to be as ugly as i think it is on p6 rules?

[19:18] <PerlJam> perhaps

[19:19] <PerlJam> rx( <lt> description <gt> (.+) <lt> /description <gt> \s* <lt> /item )  # I think

[19:19] <PerlJam> not sure if the <lt> <gt> rules are available in pugs/pge though

[19:23] <theorbtwo> You can't just backwhack the angle brackets?

[19:23] <geoffb> PerlJam, it's been a while, but isn't the \s* not necessary?  I thought rules defaulted to \s* between tokens?

[19:23] * theorbtwo isn't big on rule-fu.

[19:23] <PerlJam> geoffb: only when you use :w (:words)

[19:23] <geoffb> Also, gaal, if you're using PerlJam's rule, he's missing a <gt> at the end.

[19:24] <geoffb> PerlJam, hmmm . . . I thought that implied \s+ as opposed to \s*

[19:24] <PerlJam> ah, so I am

[19:24] <PerlJam> geoffb: no, :w implies \s* or \s+ depending on the location of the spaces in your rule (i.e. what's on either side of the space)

[19:25] <geoffb> sigh

[19:25] <geoffb> Perl certainly is like English . . . so much power, and SO messy

[19:25] <gaal> PerlJam: thanks.

[19:25] <PerlJam> theorbtwo: and, yes you can backwhack the angles if you so choose.

[19:26] <PerlJam> geoffb: yep.  Fortunately for perl, the world is quite messy too.  That makes it easier to get a one-to-one correspondence between reality and your software.

[19:26] <geoffb> :-)

[19:26] <gaal> hmm. I want to call a method in the condition of a when clause. can't I?

[19:27] <gaal> ?eval class X; method cc { 4 } my $o = X.new; given $o { when (.cc > 3) { say "ggg" } }

[19:27] <evalbot_7907> undef 

[19:27] <geoffb> autosave++  # At least Emacs has the decency to save your file before crashing . . . .

[19:28] <gaal> whoa, which reminds me, ci time.

[19:29] <gaal> that looks like a bug to me. anyone think different?

[19:30] <theorbtwo> Certianly looks like a bug to me.

[19:34] <svnbot6> r7908 | gaal++ | tpd.pod: two examples/, some stuff on junctions, and minor fixes.

[19:37] <gaal> anyone on OSX here?

[19:38] * nothingmuch 

[19:38] <gaal> yo!

[19:39] <gaal> Is there currently a Mac equivalent to "apt-get install pugs" now?

[19:39] <nothingmuch> no

[19:39] <nothingmuch> all solutions are third party (fink, darwin port, gentoo-osx)

[19:39] <nothingmuch> and I doubt they have pugs

[19:39] <gaal> s/one(currently, now).pick//

[19:40] <nothingmuch> fink is apt-get ported

[19:40] <gaal> okay: how does someone get pugs on a mac? i hope there are at least binaries for GHC yes? :)

[19:40] <nothingmuch> it might be easy (i have no clue) to make rafl's stuff into there

[19:40] <nothingmuch> yes, there are binaries

[19:40] <nothingmuch> http://www.haskell.org/ghc/download_ghc_641.html

[19:41] <nothingmuch> or you could use fink/darwinports for ghc

[19:41] <nothingmuch> the .pkg file is easy though

[19:41] <gaal> so: what's the n-liner to install pugs on a mac?

[19:41] <nothingmuch> download, double click

[19:41] <nothingmuch> double click GHC-6.4.1.pkg (it will unzip automatically, i think)

[19:41] <nothingmuch> (perhaps it will even open automatically, bringing you into the installer)

[19:41] <nothingmuch> (i don't remember)

[19:42] <gaal> okay, and then cpan Perl6::Pugs in a shell yes?

[19:42] <nothingmuch> click next/i agree/install repeatedly

[19:42] <nothingmuch> yhes

[19:42] <nothingmuch> well, no

[19:42] <nothingmuch> sudo cpan

[19:42] <gaal> yeah yeah

[19:43] <nothingmuch> sudo is crucial - root does not have a password by default on OSX

[19:43] <nothingmuch> i hate conscience games

[19:43] <nothingmuch> dad is pissing me off

[19:43] <nothingmuch> he said "do the dishes"

[19:43] <nothingmuch> i jokingly said "every time you ask me i'll reset my counter

[19:43] <nothingmuch> so he threw a fit, and then very dramatically did it himself

[19:44] <nothingmuch> and I'm supposed to feel bad

[19:44] <gaal> which counter?

[19:44] <nothingmuch> the counter for in how many seconds it's going to take me to finish what i was in the middle of when he first asked me

[19:44] <nothingmuch> wait, no, mom first asked me

[19:45] * nothingmuch doesn't like when people try to manipulate him

[19:45] <gaal> in that case resetting it is good, since that implies the job's finished ;-)

[19:45] <nothingmuch> if he would have just asked it would have gotten done

[19:45] <nothingmuch> but because I need to feel guilty while doing it...

[19:47] <gaal> hey, anyone feel like a nice Parsec task?

[19:47] <gaal> # http://www.nntp.perl.org/group/perl.perl6.language/23996

[19:47] <gaal> tests exist in t/oo/attributes/attribute_initializement.t

[19:48] <gaal> xinming++

[19:49] * nothingmuch passes

[19:49] <nothingmuch> Catalyst::Plugin::Authorization::ACL is nearly done

[19:49] <nothingmuch> what an exodus that was

[19:50] <geoffb> 40 days in the desert?

[19:50] <nothingmuch> 3 days in the dispatcher ;-)

[19:50] <gaal> heh

[19:51] * gaal would not mind being in the desert now - I miss Sinai

[19:51] * geoffb writing go-live push docs for $contract

[19:51] <geoffb> Ah, the sweet smell of a nearing push

[20:02] <Juerd> dvoraks++  # both

[20:04] <nothingmuch> Juerd: the composer and the engineer?

[20:15] <Juerd> nothingmuch: If "the engineer" is the guy who made this great keyboard layout... :)

[20:16] <nothingmuch> that's what I meant

[20:17] <Juerd> Then, yea.

[20:27] <gaal> anyone understand Larry's last p6l post? specifically, what does a public interface do to a private member?

[20:32] <svnbot6> r7909 | gaal++ | tpr.pod:

[20:32] <svnbot6> r7909 | gaal++ |  * change $: to $!

[20:32] <svnbot6> r7909 | gaal++ |  * "see also" section

[20:40] <gaal> nothingmuch: still there?

[20:41] <nothingmuch> yep

[20:41] <gaal> # http://haskell.org/ghc/download_ghc_641.html#macosx

[20:41] <gaal> the very bottom says that ghc is available on darwinports

[20:41] <gaal> does that mean if you install from there you build your own ghc?

[20:42] <gaal> like on a freebsd system?

[20:42] <gaal> "The compiler is built from source, using a binary bootstrap compilier" -> built on your machine?

[20:43] <nothingmuch> i don't know

[20:43] <nothingmuch> i think so

[20:43] <gaal> ah, you mentioned that port above, didn't notice

[20:43] <nothingmuch> but i don't use darwinports, so I have no clue

[20:43] <gaal> ok thanks.

[20:43] <nothingmuch> the pkg file is binary though

[20:43] <nothingmuch> i use it happily

[20:43] <gaal> yeah, that's good stuff.

[21:05] <stevan> nothingmuch: ping

[21:09] * nothingmuch hides

[21:10] <stevan> I see you behind that terminal window

[21:35] <dduncan> gaal, I noticed you updated tpr.pod in accordance with Larry's email on private attr syntax ... do you plan to update the parser too, or is the change not official?

[21:43] <rafl> gaal: Does it work for your pugs with PGE support?

[22:03] <r0nny_> yo

[22:04] <rafl> nothingmuch: I don't think Debian packages can be turned into fink packages that easily.

[22:06] <SamB> gaal: I can tell you that you can't build GHC without GHC

[22:08] <SamB> unless you are porting and build from .hc files generated by a cross-GHC

[22:08] <dduncan> so that's why build ghc from source takes so long!\

[22:10] <dduncan> on another note, I like that change from : to ! for private attrs; makes it look less like package qualification syntax

[22:10] <dduncan> eg, $:foo vs $::foo

[22:11] <dduncan> or $bar:foo vs $bar::foo

[22:12] <dduncan> (of course, the :: used in this way may not be valid perl 6, but it still evokes packages in my mind)

[22:12] <nothingmuch> rafl: even for something that doesn't compile?

[22:37] <rafl> nothingmuch: Err?

[22:37] <nothingmuch> rafl: well, pugs is more portable than e.g. some_app

[22:37] <nothingmuch> it works out of the box on OSX

[22:38] <nothingmuch> so is the tricky stuff the releng for the paths and stuff?

[22:38] <rafl> nothingmuch: I don't understand "even for something that doesn't compile?", though.

[22:38] <nothingmuch> it was a brain fart

[22:38] <nothingmuch> ignore it

[22:40] <rafl> nothingmuch: AFAIK fink uses a single $package.info file to put all informations that are in debian/ for Debian packages in.

[22:40] * nothingmuch knows nothing of either debian or fink ;-)

[22:40] <rafl> So it's hard to convert from Debian to fink, imho.

[22:40] <nothingmuch> (that deeply, that is)

[22:40] <nothingmuch> ah, okay

[22:40] <nothingmuch> so screw it =)

[22:40] <rafl> I don't know much about fink as well.

[22:41] <rafl> OK. I don't care about fink anyway as my ibook croaked some months ago.

[22:41] <rafl> (And because I used Debian on it anyway :-)

[22:51] <svnbot6> r7910 | liz++ | some more work on docs/AES/S17draft.pod

[23:26] <stevan> hey robkinyon 

[23:26] <svnbot6> r7911 | stevan++ | Perl6::ObjectSpace -

[23:26] <svnbot6> r7911 | stevan++ | * adding return type checking for closure type

[23:26] <svnbot6> r7911 | stevan++ |    - added tests for this

[23:26] <robkinyon> stevan: Yessssss?

[23:27] <stevan> nothin

[23:27] <stevan> just sayin hey

[23:27] <robkinyon> oh.

[23:27] <robkinyon> hey! :-)

[23:34] <leo> liz6: - Coros are _like_ processes (S17draft)

[23:34] <leo> I seem to have a different view of Coros ;-)

[23:35] <leo> specifically there are *no* threads involved

[23:38] <liz6> leo: not necessarily...

[23:38] <liz6> or maybe we do think of it differently...  ;-)

[23:39] <robkinyon> How does Ruby do coros? they seem to have it down pretty well ...

[23:39] * leo is thinking of coros of course parrot-wise

[23:39] <liz6> I'm still trying to come up with a use case...

[23:40] <leo> this means that exactly one interpreter is running the main code and the coro

[23:40] <leo> implying there is never a concurrency problem

[23:40] <liz6> can two threads call the same coroutine?

[23:40] <leo> sure as they can call the same sub

[23:41] <leo> *if* variables are share properly...

[23:41] <leo> shared even

[23:41] <liz6> but the second tread would block until it has yielded to the first thread?

[23:42] <leo> nope

[23:42] <leo> the caller get's the result - no one else

[23:43] <liz6> yes:

[23:43] <leo> coros aren's thread imho

[23:43] <liz6> (initially I thought the same, and maybe I'm seeing threads everywhere)

[23:44] <liz6> but I wonder if it wouldn't be possible to have a coro continue execution

[23:44] <liz6> until the next yield, so that another thread would get back the next result

[23:44] <liz6> immediately?

[23:44] <leo> either the caller or the coro is running

[23:45] <leo> all other things aren't cors but threads

[23:45] <leo> coros

[23:45] <leo> shit keyboard

[23:46] <liz6> hmmm... 

[23:46] <liz6> could very well you're right...

[23:46] <leo> because if there is any piece of concurrency the implementation (low-level) is different

[23:46] <liz6> it's been a long day with a lot of meetings and a lot of travel for me...

[23:46] <leo> you can still call it coros of course

[23:46] <liz6> (yes)

[23:47] <leo> but inside parrot or $other_machine these aren't coros anymore

[23:49] <liz6> well, we're talking language design here, so whether at a lower level something is a thread or a coro, doesn't matter much or does it?

[23:49] <leo> no

[23:49] <liz6> I mean: autri and I have also discussed that detaching a thread

[23:49] <liz6> _could_ mean doing  a fork()

[23:49] <leo> but coros which need threads per se are likely to be a lot slower 

[23:49] <leo> I would make any concurrency explicit in the syntax

[23:49] <liz6> well, maybe not all coros need threads

[23:49] <leo> just my 2c

[23:50] <liz6> I'm just wondering how coros could not be thread aware...

[23:50] <liz6> if two threads call the same coro

[23:50] <liz6> one of the threads needs to block until the other has returned

[23:50] <leo> do you now pthon generators?

[23:50] <leo> python

[23:50] <liz6> I've heard of them...

[23:50] <liz6> but that basically means: no

[23:50] <liz6> ;-)

[23:51] <leo> well, instead of blocking a thread the interpreter is just running the coro, then it continues in the caller

[23:52] <liz6> so the code inside a coro could be executed by two threads at the same time?

[23:52] <liz6> how would that work for an iterator?

[23:53] <leo> there is no advantage here basically in using threads - except if you want threads because there is parallelism

[23:54] <leo> iterators usually don't do much work, run a few opcodes .yield(result), ... 

[23:54] <liz6> well, you may well be right...

[23:55] <liz6> for some reason (and I'm too dense at the moment to be really able to explain why) it feels wrong not to include the possibility that coros can be threads as well

[23:56] <leo> that's not the problem - some coros better can be threads - but please make this really explicit in syntax

[23:56] <liz6> working on that!

[23:56] <liz6> it's still a draft!

[23:57] <leo> of course - and thanks for considering

[23:57] <liz6> no thanks... thank you for pointing out this issue...

[23:59] <liz6> anyways.. going to catch some shuteye...

[23:59] <liz6> night everyone!

[23:59] <leo> yeah same here

