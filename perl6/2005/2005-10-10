[00:00] <gaal> er, except that it isn't appearing on ther server. putting on feather.

[00:00] <svnbot6> r7516 | autrijus++ | * disable rules.t correctly without taking lots of parsing.

[00:01] <dduncan> are changes post r7512 ending up in 6.2.10, or are they for later? ... if they're for now, every update to that release should have a corresponding ChangeLog update to what r is represented

[00:02] <dduncan> separate point ...

[00:02] <dduncan> *** PIL2JS needs the Class::Rebless module from CPAN.

[00:02] <dduncan> should this be considered a warning or error?

[00:02] <autrijus> dduncan: warning, I think

[00:02] <dduncan> make[1]: *** [pure_all] Error 1

[00:02] <dduncan> make: *** [build_perl5] Error 2

[00:02] <autrijus> hm, but it dies.

[00:02] <dduncan> that comes with it, but pugs seems to have been produced anyway

[00:03] <autrijus> gaal: thoughts on us taking the drastic measure of bundling Class::Rebless?

[00:03] <dduncan> running the pugs, it says internally that it is the newest r

[00:03] <gaal> fscking adsl upload ratios :(

[00:03] <gaal> autrijus: nah, put it in the p5 core. :-p

[00:04] <autrijus> okay, failing that.

[00:04] <gaal> http://perlcabal.org/~gaal/smoke_xp.html

[00:04] <autrijus> I'm thinking to append to perl5/PIIL2JS/lib.

[00:04] <dduncan> is the r# inside the pugs binary, or inside a data file that it reads?

[00:04] <gaal> sure, it's a tiny module.

[00:04] <autrijus> dduncan: inside

[00:04] <gaal>  556 files  10340 test cases: 10340 ok, 0 failed, 1551 todo, 954 skipped and 0 unexpectedly succeeded  100.00%

[00:04] <dduncan> then that should mean the make worked then

[00:04] <dduncan> but the 'error' can confuse users

[00:05] <autrijus> dduncan: solved. thanks!

[00:05] <svnbot6> r7517 | autrijus++ | * add Class::Rebless to avoid frivolous errors.

[00:05] <gaal> lol

[00:05] <autrijus> :)

[00:08] <gaal> ah, the server did of course accept the smoke, i just forgot to look for 6.2.9 :)

[00:08] <gaal> yo other smokers, where are y'all?

[00:08] <dduncan> I noticed that all the smokes said 6.2.9

[00:09] <gaal> yes, pf2 bug

[00:09] <gaal> known and fixed

[00:10] <gaal> s/2/1/

[00:17] <gaal> okies, I've got $work tomorrow and it's getting late, going now

[00:17] <gaal> happy flying :)

[00:18] <autrijus> thank you gaal :)

[00:18] <autrijus> putter: the upshot is that embed won't work reliably for PGE until 0.3.1

[00:18] <autrijus> as the C side calling conv seems broken.

[00:18] <autrijus> c'est la vie.

[00:18] <gaal> (-: zzZZZ &

[00:20] <putter> back

[00:21] <autrijus> putter: a bogus check was placed at parrot_pass_args_fromc

[00:21] <autrijus> has since been rescinded in trunk

[00:21] <dduncan> autrijus, will there be any more preflights, or do you now have enough confidence to just ship from the repository at time?

[00:21] <putter> ah.  so README or INSTALL fodder?

[00:22] <autrijus> putter: nod.

[00:22] <putter> done? or needing to be done?

[00:22] <autrijus> putter: needing to be done. can you help?

[00:22] <putter> doing...

[00:23] <putter> my other incident was the eval_yaml failure.

[00:23] <autrijus> yeah, seems like a 64bitism

[00:23] <autrijus> ghc 6.4.1?

[00:23] <putter> yes

[00:25] <putter> embedded parrot 030 is broken on all platforms?  and the trunk is believed to work?

[00:26] <autrijus> yes. yes.

[00:29] <putter> does this pugs still work with external pre-leo-ctx5 parrot?  or are we only >=030

[00:29] <svnbot6> r7518 | autrijus++ | * Use the newer parrot_load_bytecode API to load PGE

[00:29] <svnbot6> r7518 | autrijus++ |   code and avoid the bogus "eval".  This only helps in

[00:29] <svnbot6> r7518 | autrijus++ |   post-0.3.0 parrot though. sigh.

[00:32] <Megzl> Is there a perl6 version to test?

[00:32] <Megzl> what the fuck. Perl6 written in haskell?

[00:33] <Megzl> You people are insane.

[00:33] <obra> ...

[00:33] <dduncan> you come from slashdot?

[00:33] <dduncan> sounds like it, Megzl

[00:34] <Megzl> I didn't exactly come on IRC just cause of slashdot.

[00:34] <autrijus> greetings.

[00:34] <Megzl> #Perl6 was only a /join away.

[00:34] <Megzl> But, I did see the slashdot article.

[00:34] <autrijus> Megzl: insanity (in moderation) is celebrated around here, yes.

[00:35] <cognominal> ho, pugs slashdotted.

[00:35] <autrijus> putter: how's it going?

[00:35] <cognominal> I like to read /. threads to learn about all the misconceptions that people have about Perl :)

[00:35] <Megzl> Particularly, I read about Geoff Broadwell (Pugs? is his name), and in his little 'description it said:

[00:35] <Megzl> "He is on a personal mission to prove that dynamic languages are by far the best programming option for almost every purpose,"

[00:36] <autrijus> cognominal: important thing, that :)

[00:36] <dduncan> these days they are, when programmer time is more valuable than cpu time, and hardware is cheap

[00:36] <Megzl> I came here to find out if you really think that's possible...

[00:36] <Megzl> I work on 3d code.

[00:36] <Megzl> How could that possibly be written in an interpreted/non compiled language?

[00:37] <autrijus> Megzl: it can't.

[00:37] <dduncan> it could be controlled by one though

[00:37] <Megzl> Then Geoff Broadwell's descriptor is incorrect.

[00:37] <autrijus> consequently, you'll notice that almost all dynamic languages nowadays are compield.

[00:37] <autrijus> dynamic is a property of the type system.

[00:37] <dduncan> use compiled for high calculation intensive work, and hardware speaking, and dynamic languages can control those parts, be the glue

[00:38] <Megzl> When can't you have a compiled dynamic language?

[00:38] <Megzl> That compiles to an executable.

[00:38] <Megzl> I don't take dynamic languages very seriously because they don't compile to a fast executable.

[00:38] <Megzl> None I've heard of, at least.

[00:38] <Megzl> I'm really surprised nobody has done it.

[00:38] <autrijus> Megzl: Dylan, I hear.

[00:38] <autrijus> Python with Psyco, too.

[00:39] <Megzl> I'm not stuck with C++.

[00:39] <Megzl> I only use it cause it's fast. But I don't love the static typing.

[00:39] <cognominal> Megzl: sometimes you want to optimize other dimensions than speed

[00:39] <wolverian> oh, nice, autrijus is on /. :) congratulations!

[00:39] <wolverian> (I think..)

[00:39] <autrijus> Megzl: Scheme and lisp, from another setting.

[00:39] <autrijus> Megzl: there are plenty of compiled fast dynamic languages :)

[00:39] <autrijus> it is a harder problem to compiled them, yes, due to the lack of type information

[00:39] <Megzl> I just love C++'s syntax.

[00:39] <autrijus> but it has been done and will be done better still :)

[00:40] <dduncan> there's a brand new article ... someone want to first it?

[00:40] <dduncan> oop, too late

[00:40] <dduncan> right between those posts 

[00:40] <Megzl> Can you tell me why dynamic languages are good?

[00:41] <dduncan> a lot faster 

[00:41] <Megzl> I do tons of dynamic stuff in C++, I have a whole framework built around boost::any.

[00:41] <dduncan> to develop

[00:41] <Megzl> It does everything I could want.

[00:41] <putter> autrijus: do pre 030 parrots work external, or are we strictly >= 030?

[00:41] <autrijus> Megzl: that makes it a dynamic language.

[00:41] <dduncan> Megzl, think of dynamic languages as a less dynamic language with certain libraries built into the language

[00:41] <autrijus> putter: all reasonably recent parrot should work external

[00:42] <autrijus> Megzl: it's really a gradient... I'm a firm believer of "dynamic with prototyping, static when optimizing"

[00:42] <dduncan> eg, certain things you have as libraries in C are built-in to Perl, such as basic memory management and string libraries and etc

[00:42] <autrijus> Megzl: and any language that lets you do that is a Good Thing.

[00:42] <autrijus> C++ included.

[00:43] <Megzl> I have a little bit of a dynamic language I use for my own purposes on top of C++ -- and the syntax is simple. And it compiles to be fast. doing Perl seems like going too far

[00:43] <Megzl> with C++ I get the best of both

[00:43] <Megzl> with Perl I only get the dynamism

[00:43] <Khisanth> dduncan: and regular expressions :)

[00:43] <autrijus> Megzl: yes, that is very true. which is why perl6 is going for optional staticness.

[00:43] <dduncan> indeed, but that's more of a perl thing than languages in general

[00:43] <Megzl> ah

[00:44] <autrijus> Megzl: it's really like Dylan in that regard. I think you'll like Dylan.

[00:44] <Megzl> well, if perl6 can be static, I'll give it a more serious look this time.

[00:44] <autrijus> Megzl: at least, the standard library is sprinkled with type annotations.

[00:44] <dduncan> one of perl's strenghths is borrowing good ideas from other languages and improving them

[00:44] <autrijus> the user can still elect to write all-dynamic scripts.

[00:44] <wolverian> I'm not sure how static perl6 will be, but it will certainly be optionally typed.

[00:45] <dduncan> staticness in this case

[00:45] <cognominal> Megzl: Perl6 will targets parrot which is a VM build around a typed assembler

[00:45] <cognominal> so supporting (alos) staticness is a core goal of Perl6

[00:45] <cognominal> s/alos/also/

[00:46] <Khisanth> hrm Perl6 seems to be targetting several things :)

[00:46] <cognominal> that's why it is long in the making

[00:47] <autrijus> ?eval multi add (Int $x, Int $y) { $x+$y }; multi add (Str $x, Str $y) { "$x$y" }; add('Hello ', 'Megzl');

[00:47] <evalbot_7518> 'Hello Megzl' 

[00:47] <mugwump> chasing many rabbits down many holes

[00:47] <autrijus> ?eval multi add (Int $x, Int $y) { $x+$y }; multi add (Str $x, Str $y) { "$x$y" }; add(21, 21)

[00:47] <evalbot_7518> 42 

[00:47] <autrijus> Megzl: see? :)

[00:47] <Megzl> Yes, I see.

[00:48] <Megzl> The only thing I don't see, is why it can't actually compile to fully optimized fast code under the hood. And I guess that's what you guys are telling me perl6 will do.

[00:48] <autrijus> Megzl: yup :)

[00:49] <autrijus> Megzl: one of us has just started playing with type inference to generate fast native C code.

[00:49] <autrijus> (it's in misc/Blondie/ in the pugs tree.)

[00:51] <dduncan> I'll be back in an hour or so, meanwhile smoking r7517

[00:51] <putter> I haven't been using external parrot much lately.  how much difference does it make for end users?  (providing context for whether they should bother grabbing cvs parrot)

[00:51] <autrijus> putter: almost not at all

[00:51] <autrijus> putter: a slightly slower startup time (1sec)

[00:51] <autrijus> that's all.

[00:52] <autrijus> since we keep parrot process harnessed fastcgi-style.

[00:52] <putter> k

[00:53] <autrijus> putter: I'm not sure I can get the syck 64bitism fixed for this release.

[00:54] <autrijus> esp since my home box of amd64 is currently offline.

[00:54] <autrijus> putter: I think we'll leave it failing for you for now, unless you feel strongly about it

[00:54] <autrijus> otherwise I'm ready to fly.

[01:02] <autrijus> putter?

[01:05] <putter> pong. ok.  documented.  checking in

[01:05] <autrijus> excellent!

[01:07] <putter> sorr for the delay.  english writing braincells on strike

[01:07] <svnbot6> r7519 | putter++ | INSTALL: document parrot dependencies and eval_yaml() bug

[01:08] <putter> actually, does yaml being broken have any larger implications worth mentioning?

[01:08] <putter> (not that it's clear there are more than a handfull of x86_64 pugs users yet...)

[01:08] <autrijus> your mentioning is fine.

[01:09] <autrijus> okay. fly!

[01:11] * putter revisits concept of having a ui that points out when his clock speed has decayed unnoticed...

[01:12] <putter> ah, an airborne pugs... a nice sight...

[01:13] <svnbot6> r7520 | autrijus++ | * This be Pugs, version 6.2.10.

[01:13] <autrijus> whew. thank-you all :)

[01:13] * autrijus uploadeth

[01:14] <autrijus> http://pugscode.org/dist/Perl6-Pugs-6.2.10.tar.gz

[01:14] <autrijus> sanity check before I CPAN it?

[01:15] <putter> grabbing...

[01:16] <putter> err

[01:17] <autrijus> ?

[01:17] * putter waits 11 seconds so tarfile dates are in the past...

[01:17] <autrijus> err.

[01:18] <putter> err, what happened to cookbook?

[01:19] <autrijus> examples/cookbook?

[01:19] <autrijus> what happened?

[01:19] <putter> yes, its in my SVN, but not in the tar...?  checking...

[01:20] <autrijus> it is there to me.

[01:20] <putter> ok, so just some specific files are missing, eg

[01:20] <putter> 03dates-and-times

[01:21] <autrijus> there were no files in it anyway.

[01:21] <autrijus> maybe you did not svn add them?

[01:21] <autrijus> no files were there in the previous release either.

[01:21] <autrijus> other notable omissions?

[01:21] <pasteling> "putter" at 66.30.119.55 pasted "svn vs release diff" (32 lines, 1.5K) at http://sial.org/pbot/13592

[01:21] <putter> debian?

[01:22] <autrijus> checking.

[01:23] <autrijus> debian is explicitly not listed.

[01:23] <autrijus> by rafl, so I assume it's okay.

[01:23] <autrijus> other looks harmless.

[01:23] <putter> MIME/Base64?

[01:23] <autrijus> empty directory.

[01:24] <putter> err ext/MIME-Base64/lib/MIME/Base64.pm?

[01:24] <putter> never mind

[01:24] <autrijus> :)

[01:24] <autrijus> may we uplaod to CPAN? :)

[01:25] <putter> k, well, my svn copied work, and it matches (havent checked permissions), but nothing obvious...

[01:25] <fglock> hi all - congrats for the new release!

[01:25] *** autrijus changes topic to: 6.2.10 released! http://xrl.us/hxnb | geoffb's column (/. ed): http://xrl.us/hxhk | pugscode.org | pugs.kwiki.org | paste: http://sial.org/pbot/perl6 | www.geeksunite.net

[01:25] <autrijus> thanks fglock!

[01:26] <putter> what happend to t/builtins/system?

[01:26] <autrijus> explicitly delisted - space in directory names - beyond workaround.

[01:26] <putter> k

[01:26] <autrijus> (MANIFEST syntax problem)

[01:27] <putter> then happy pugs in flight.  which just has entirely different visuals since I browsed a "Pugs" magazine.

[01:27] <autrijus> okay, uploading :)

[01:28] <autrijus> putter++ # last-minute sanity check

[01:30] <fglock> putter - re lazy Array: I think there is a way to make it O(1) - I'll try to work on it tomorrow

[01:30] <putter> nifty.

[01:30] <fglock> I was away for about 4 days due to work - missied the best part of the release work :(

[01:30] <putter> me too

[01:31] <autrijus> :)

[01:31] <putter> yaaaaaayyyyyy PUGS!  (inflect <cheer>)

[01:31] * autrijus waves goodnight

[01:31] <fglock> good night autrijus

[01:31] <putter> good night autrijus &

[01:31] <autrijus> *wave* &

[01:34] <Khisanth> inflect?

[01:36] <putter> said with a particular inflection.  should probably have been  say "..." :inflect<cheer>  ;)

[01:46] <putter> fglock: fyi, I've a rewrite of EvalX is started last weekend.  will hopefully get i‌n sometime in the not too distant future...

[01:46] <putter> s/is/i

[01:53] <dduncan> ... back

[01:53] <dduncan> um, yay and stuff

[01:54] <fglock> putter: we've talked about moving some files around - are there any changes?

[01:58] <dduncan> well, now that the release is out, big changes can be made ...

[01:58] <putter> no...  feel free. :)

[01:59] <dduncan> now to smoke another camel ...

[01:59] <dduncan> its amazing how some coincidences can work together

[02:00] <putter> ;)

[02:01] * putter delights in Earth, at 10^6 meters per mm, being... a blue marble.  (13 mm)

[02:03] * putter does not delight in having to CPS convert, and thus notably uglify, the prolog regexp engine so local() in repeated embedded code clauses works correctly. :/

[02:55] <Pyked> heya

[03:10] *** sleepster is now known as typester

[03:19] <putter> fyi, Perl6-Pugs-6.2.10 passed make test on FC3 x86_64 w default config.  yay.  Including eval_yaml(), which I was expecting to fail. !?!

[03:21] <putter> hi Pyked.   you've hit the "night time" of #perl6.   things will pick up in another 6 hrs or so.  fyi.

[03:27] <Khisanth> putter: that is pretty strange :)

[03:27] <Khisanth> considering pugs is hacked by people in various timezones

[03:36] <svnbot6> r7521 | Darren_Duncan++ | ChangeLog updated to add the next release template, for Pugs 6.28.0

[03:37] <putter> weak us pacific presence.  and most of us east doesnt stick around until the wee hours.  and asia folks tend to run late.  so europe isnt awake yet, asia has stumbled off to bed, and europe isnt up yet.  happens most every night.

[03:37] <mugwump> sure, but after the US goes to bed it's a while before Europe wakes up

[03:38] <stevan> hey mugwump long time no see

[03:39] <mugwump> yeah I know.  It's been months since I did any large amounts of Perl 6

[03:39] <mugwump> your metamodel is looking delightfully simple when I last looked at the pictures

[03:39] <stevan> thanks :)

[03:40] <stevan> the eigenclass thing threw me for a little while,.. but I think I got my head around it now

[03:42] <putter> the ruby C source is nicely readable.  hmm, though maybe not the part you would care about.

[03:42] <svnbot6> r7522 | Darren_Duncan++ | moved /misc/Rosetta-Incubator to /ext/Rosetta-Incubator since this code should be installable in time for 6.28.0

[03:42] <stevan> putter: I am not very good at reading C actually

[03:42] <putter> ah

[03:43] <stevan> I get lost when I see too many &&& and *** stuff

[03:43] <stevan> but eigenclasses were mostly a conceptual barrier anyway

[03:43] <stevan> I needed to see how they fit in,.. and where

[03:44] <dduncan> mugwump, stevan, with this new stretch ahead of us up to 6.28.x, we can now start coding some serious object oriented perl 6!

[03:45] <dduncan> oh, and I'm on the west coast of NA, so its about 9pm here

[03:45] <stevan> dduncan: yes, that is the plan :)

[03:45] <mugwump> almost 5pm here in NZST

[03:45] <mugwump> and I'm giving an svk talk at 6pm :)

[03:45] <stevan> 11:44 here in EST

[03:45] <dduncan> to whom?

[03:45] <mugwump> australia?

[03:45] <stevan> mugwump: nice. I just started using SVK myself

[03:46] <dduncan> I'm debating whether to switch to svk from svn

[03:46] <mugwump> oh, 11:44pm in America's EST

[03:46] <stevan> dduncan: the nice thing about SVK is that it is so interchangeable with svn

[03:47] <stevan> I havent used any of the advanced features of svk yet actually,.. I use it just like it was svn

[03:47] <mugwump> it's 1:46pm in Australia's EST :)

[03:47] <stevan> dduncan: there is also a very nice DMG on the svk website too,.. point-click install for Tiger

[03:47] <dduncan> stevan, will have to look at that ... does it work with Panther too?

[03:47] <stevan> mugwump: I didnt realize australia had an EST too,. however that make sense,...

[03:48] <dduncan> they have 3-4 time zones I think

[03:48] <mugwump> Australia and US Timezones are the only clashes

[03:48] <stevan> dduncan: never tried it with panther,.., but when I upgraded to Tiger recently it made installing svn much easier (two for the price of one)

[03:49] <stevan> because the svk dmg comes with a nicely pre-compiled svn too

[03:49] <dduncan> I plan to upgrade to Tiger post the huge 10.4.3 patch, perhaps waiting to .4 also

[03:49] <mugwump> that really is the great thing about svk ... it just works like svn until you start merging

[03:49] <stevan> dduncan: why are you waiting? 

[03:50] <dduncan> for one thing, Tiger had a lot of changes and I wanted to let them stabilize

[03:50] <dduncan> I only have one comp, for work and testing, so want to lower my risk

[03:50] <dduncan> in particular, Tiger adds filesystem changes, which are the highest risk type of change

[03:50] <stevan> dduncan: I know the feeling,.. I waited until my recent $work project was done until I upgraded

[03:51] <dduncan> moreover, I don't *need* Tiger's new features

[03:51] <stevan> dduncan: thats what CD Burners are for ;)

[03:51] <dduncan> I make backups too, but that's not the point

[03:51] <stevan> I dont need them either,..

[03:51] <dduncan> I also wanted to make sure my software was compatible first ... I'm upgrading my apps first

[03:51] <stevan> however,.. I have to say Tiger seemed "zippier" 

[03:51] <dduncan> just did ghc a few days ago, to 6.4.1

[03:53] <dduncan> in any event, I do have a Tiger install DVD since it first came out ... part of an ADC mailing

[03:54] <dduncan> mugwump, do you plan to make a Tangram in Perl 6 soon ... to go with your data file conversion utility?

[03:55] <mugwump> ok, the plan on that front is to get the T2 (RAD|CASE) tool going on Catalyst + T2 + TT + AJAX on Perl 5...

[03:56] <mugwump> then make sure T2::Perl6 works against the lastest MetaModel

[03:56] <mugwump> Then I can hopefully write in Perl 5 and 6 at the same time

[03:57] <dduncan> so in other words, you have an existing development project in perl 5 to complete first

[03:57] <mugwump> With that other tool I can rope more people in with a bit of luck

[03:57] <mugwump> more people from my current job :)

[03:58] <dduncan> and if more people from your job use it, you can get to work on it at your job more often

[03:58] <dduncan> on it or with it

[03:59] <mugwump> that's the idea.  Also I should be able to use the tool for re-engineering existing applications

[04:00] <putter> stevan: I have urls for some browsable ruby c src files... but I suspect this is a case where independent invention is preferable, so there's greater potential for innovation.

[04:03] <dduncan> in my case, I'm hoping that if any other FOSS projects (eg Tangram) end up using Rosetta when it's ready, then the existing user bases of those projects also become potential income sources for me, in regards to paid support or improvements to my part of what they're using ... one can dream anyway

[04:03] <stevan> putter: URLs are good too,.. it is better to know what they are doing then to repeat their mistakes :)

[04:05] <putter> yes, but its often worth leaving such cross checks for after the dev is done... but here they are...

[04:08] <putter> in http://www.ruby-lang.org/cgi-bin/cvsweb.cgi/ruby/  http://www.ruby-lang.org/cgi-bin/cvsweb.cgi/ruby/class.c?rev=1.92 http://www.ruby-lang.org/cgi-bin/cvsweb.cgi/ruby/object.c?rev=1.179 http://www.ruby-lang.org/cgi-bin/cvsweb.cgi/ruby/eval.c?rev=1.836  i think those are the key ones.  skimmable.

[04:09] <stevan> putter++ 

[04:09] <putter> "i think those are the key ones" as in "i'm tired, so I may well have missed some"... :)

[04:10] <stevan> object.c and class.c would be the expected places for it,.. 

[04:14] <putter> yeah.  i thought there was another piece, but i guess I was confused...

[04:23] <dduncan> the new pugs is now on search.cpan.org ... I've downloaded and am now smoking that camel

[04:26] <putter> ok.  way past end of day.

[04:28] <putter> good night all &

[04:57] <svnbot6> r7523 | Darren_Duncan++ | Deleted the older ext/Locale-KeyedText, which ext/Rosetta-Incubator supersedes

[05:47] <scook0> I notice we made slashdot again :)

[05:56] <jql> programming languages are underloved on /.

[05:57] <jql> PHP: sucks. Perl: sucks. Perl6: gonna suck. Python: sucks. Ruby: lets port Rails to X. C#: evil. use C++. C++: sucks, use C#

[05:58] * jql frowns upon /.

[05:58] * gaal cheers for 6.2.10

[05:58] <gaal> man this night could have been longer

[06:16] <dduncan> but now that 6.2.10 is out, the *real* fun begins

[06:16] <dduncan> or at least more-real fun

[06:17] <rafl> Yay, a release! :-)

[06:18] <QtPlatypus> dduncan: What are the big ticket goodies that 6.2.10 has?

[06:19] <dduncan> see the changelog

[06:19] <dduncan> what I mean by fun is what the *next* release, 6.28.0, will bring

[06:20] <dduncan> full metamodel integration, meaning proper object support, and so we can start writing a lot more un-cludgy perl 6 code

[06:20] <dduncan> those are big changes, which couldn't really start until 6.2.10 was out ... that's my reason for more-fun

[06:21] <dduncan> of course, we can start using those between now and then, so the fun begins within days

[06:21] <dduncan> or now

[06:21] <dduncan> I'm starting to write serious perl 6 now, even if it doesn't run right away, it should by the next release

[06:44] <forsaken> whats the learning curve going from 5->6?

[06:46] <jql> the initial curve is search-and-replace

[06:46] <jql> alot of code will still work with a search-and-replace

[06:48] <Khisanth> after that, brain upgrade!

[06:49] <forsaken> hehe

[06:49] <forsaken> just curious if it was a good idea to start learning perl6 now, or wait until the parrot version was realeased (so i can use it on other boxes)

[06:50] <scook0> the learning curve will be easier if you already know a few other languages

[06:50] <scook0> because P6 fixes a few things in P5 that other languages already got 'right' the first time

[06:51] <jql> perl tends to be a moving target even in the most stable of times

[06:52] <scook0> forsaken: just be aware that 'production-ready' P6 isn't something you should be holding your breath for just yet

[06:53] <jql> perl6 is still a parasitic language...

[06:54] <scook0> I love the fact that P6 is willing to "steal from the best with pride"

[06:55] <revdiablo> That's lwall's MO

[06:55] <revdiablo> =)

[06:55] <scook0> avast, nothingmuch!

[06:55] <jql> perl6 is a voyage of discovery and pillaging

[06:55] <nothingmuch> morning

[06:55] <nothingmuch> is it pirate day II?

[06:56] <jql> @Larry is a band if pirates, buring archive networks and raping languages

[06:56] <scook0> see, that's the thing I don't like about pirate day

[06:56] <nothingmuch> this is funny, because I just reorganized the pirate flag I posted on my cubicle on sep 19th

[06:56] <scook0> now, if you talk like a pirate on any other day, people tell you it's the wrong day for it

[06:56] <nothingmuch> it's not wrong =)

[06:56] <nothingmuch> it's just surprising

[06:56] <jql> it's never wrong. RAmen

[06:57] <scook0> :)

[06:57] <nothingmuch> cars and ironed shirts don't get along

[06:57] <scook0> nothingmuch: how so?

[06:57] <forsaken> aye

[06:57] <nothingmuch> cars have seat belts

[06:57] <nothingmuch> and other nassty things with pointy teeth

[06:57] <nothingmuch> that make the shirt all crumpled

[06:57] <nothingmuch> it's also the way you sit in them

[06:58] <nothingmuch> and the fact that I'm not a careful persomnm

[06:58] <nothingmuch> as evident from my typing ;-)

[07:01] <scook0> is there an easy way to match /\s+/ in Parsec?

[07:01] <scook0> `whiteSpace` does \s*, but I need \s+

[07:03] <scook0> aha: skipMany1 space

[07:04] <Khisanth> hmm

[07:05] <Khisanth> nothingmuch: you just need to gain weight or wear smaller shirts! :P

[07:05] <nothingmuch> Khisanth: interesting theory

[07:05] * nothingmuch likes the way parsec is verbose but still usable

[07:06] <nothingmuch> we should be able to do that in perl rules

[07:06] <nothingmuch> have aliases to things like \s and *

[07:06] <nothingmuch> or +

[07:07] * nothingmuch complains about gaal's blog and rss

[07:08] <scook0> parsec is absolutely fantastic

[07:08] <scook0> parsing is such a natural fit for monads and combinators

[07:09] * nothingmuch wonders if scook0 has an opinion about PArrow

[07:10] * nothingmuch has started reading, but at some point had something else to do 

[07:10] <scook0> I've not really looked into arrows

[07:10] <scook0> I hear they're fancy, but I don't know much about them

[07:11] * nothingmuch recites: monad is-a arrow, arrow is not a monad

[07:11] <nothingmuch> or something like that

[07:11] <scook0> arrow generalises monad?

[07:11] <nothingmuch> yup

[07:11] <nothingmuch> for every monad there is a corresponding arrow thingy

[07:11] <nothingmuch> but not vice versa

[07:12] <nothingmuch> my problem with reading the article is the fact that there were something like 17 different binding operators

[07:12] <nothingmuch> and by the time the guy was making a point, operators were oozing out of my ears

[07:12] <scook0> nothingmuch: got a url?

[07:13] * nothingmuch searches

[07:14] <nothingmuch> i think it was this: http://www.cs.chalmers.se/~rjmh/Papers/arrows.ps

[07:14] <scook0> eww, .ps :)

[07:16] <nothingmuch> pstopdf

[07:16] <scook0> or ggv

[07:17] <nothingmuch> or lpr

[07:17] <scook0> last time I used ps2pdf the output was horrible

[07:17] <scook0> probably needed to tweak some settings

[07:18] <jql> kghostview likes it

[07:18] <scook0> so I just opened up the .ps in Preview on a Mac -- crystal clear

[07:18] <nothingmuch> this seems promising: http://www.haskell.org/tmrwiki/ArrowsIntroduction

[07:18] <scook0> gah, I still can't get `foo.bar` to work

[07:19] <jql> crap, you're right. PDF sucked

[07:19] <jql> the baseline jumps

[07:19] <nothingmuch> preview does ps to pdf conversion internally... i wonder if the tool is exposed

[07:20] <scook0> well, I was using ps2pdf on my Ubuntu box

[07:20] <scook0> versus Preview on the uni mac

[07:23] <dduncan> as I recall, postscript is Mac OS X's native GUI language

[07:24] <scook0> ssh++ (because installing latex on a uni lab computer would not be fun)

[07:24] <geoffb> <rez>

[07:24] <dduncan> all the drawing to screen is in postscript, as with the print system, so it should be natural to simply open such files also

[07:24] <geoffb> Interesting.  I get my 15 seconds of fame on my day off . . . .

[07:24] <dduncan> tjat

[07:25] <scook0> when Preview opens a .ps, it saves to a .pdf before displaying it

[07:25] <dduncan> that's also why there is OS-level support for many complex graphical effects, such as "aqua" uses in abundance

[07:28] <scook0> VICTORY!

[07:28] <scook0> (`foo.bar` now parses correctly!)

[07:29] <nothingmuch> scook0++

[07:29] <scook0> modulo me having broken something else ;)

[07:31] <scook0> in current pugs it parses as `foo(bar)`

[07:31] <scook0> my initial patch broke it completely

[07:31] <nothingmuch> it was broken before you came

[07:31] <nothingmuch> and now it is fixed

[07:31] <scook0> my next attempt turned it into `foo($_.bar)` :)

[07:31] <nothingmuch> after you came and fixed it

[07:31] <nothingmuch> hehe

[07:32] <scook0> nothingmuch: I'm just about to clean up the patch--care to test it in a bit?

[07:35] <nothingmuch> sure

[07:37] <scook0> perlbot nopaste

[07:37] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[07:37] <nothingmuch> svl diff ... | pbotutil.pl -s pugs -m "scook0's patch'

[07:38] <pasteling> "scook0" at 220.253.96.162 pasted "Parser patch MkII" (152 lines, 6.3K) at http://sial.org/pbot/13596

[07:38] <scook0> huh?

[07:38] <nothingmuch> pbotutil - it rocks

[07:38] <scook0> nothingmuch: teatime; bbl &

[07:38] <nothingmuch> ciao

[07:47] <nothingmuch> hola Aankhen`` 

[07:48] <Aankhen``> Morning nothingmuch.

[07:48] <scook0> mmm ravioli :)

[07:49] <Khisanth> svl?

[07:51] <nothingmuch> Khisanth: errm, svk

[07:51] * nothingmuch had pesto twice this week

[07:51] <nothingmuch> i've been really lazy about dinner

[07:51] <nothingmuch> because:

[07:51] <nothingmuch> pesto rocks

[07:51] <nothingmuch> it doesn't make a big mess

[07:51] <nothingmuch> it's fast

[07:53] * scook0 is still using svn, but plans to try out svk some day

[07:53] <nothingmuch> it's a drop in replacement

[07:53] <nothingmuch> but you can also do local branching

[07:53] <scook0> so everything I do now with svn works word-for-word? (s:g/svn/svk/)

[07:55] <nothingmuch> AFAIK yes

[07:55] <nothingmuch> but ask #svk to be sure

[07:59] <jql> ask svk caused a dyslexic seizure for me

[08:00] <jql> I couldn't quite make sense of it

[08:01] <scook0> gah, my stubborn fingers refuse to type 'svk' :)

[08:02] <nothingmuch> alias

[08:02] <jql> svn svk svn svk svn svk svn svk svn svk. I don't even touch-type, and it's hard

[08:03] * nothingmuch always gets higih rep for his banal perlmonks posts, but the ones which I really invest effort into are usually ignored

[08:04] <jql> I only answer really really hard questions. I think I have only 2 or 3 posts on perlmonks

[08:04] <scook0> jql: at least they're both fairly easy to type

[08:04] <revdiablo> nothingmuch: That's the way of it... the Monks are weird sometimes.

[08:04] * jql cherry-picks the interesting ones

[08:04] <scook0> every time I type `my` in Perl, I cringe :)

[08:04] * nothingmuch answers 1 - 0.3 posts a day

[08:04] <dduncan> why?

[08:05] <scook0> no other two-letter combination involves moving one finger so much

[08:06] <jql> I don't touch-type. it helps

[08:06] <jql> especially with !@#$%!

[08:06] <jql> I use 2 hands for my

[08:06] <scook0> jql: language! :P

[08:06] <jql> right hand hits m, left hand hits y

[08:07] <dduncan> not being able to keyboard is nasty ... can't do much of anything without that skill

[08:07] <jql> and my right hand also presses space & shift, while my left moves to the top row for the imminent $@%

[08:07] <scook0> touch-typing was the single most useful thing I learned in high-school

[08:08] <dduncan> when keyboarding, the same finger types the 'm' and 'y' anyway, and they aren't far from each other ... on a QWERTY keyboard anyway

[08:09] <scook0> dduncan: using the same finger makes it harder

[08:09] <dduncan> maybe, but you use the same fingers for many keys anyway, the 'my' isn't special

[08:10] <Khisanth> slower :)

[08:10] * nothingmuch also does two handed my

[08:10] <Khisanth> which was one of the design goal of qwerty or something ...

[08:10] <Khisanth> two handed?

[08:10] <dduncan> still, you can't get keywords much shorter than 'my', save the math operators

[08:10] <scook0> sure, it's great to read

[08:10] <dduncan> the design goal of qwerty was to slow people down

[08:10] <jql> keyboard efficiency is why I liked the ./ operator

[08:10] <nothingmuch> Khisanth: the design goal of qwerty, minus the myth was - to be fast enough but give good distribution across the keyboard

[08:10] <dduncan> so typewriters didn't jam

[08:11] <jql> so very easy

[08:11] <scook0> I guess I'll just have to pick up two-finger my

[08:11] <jp-autark> we should rename "my" to "me"

[08:11] <nothingmuch> so that your hands are usually hitting distant keys, and the arms don't jam

[08:11] <scook0> jp-autark: me @hearties

[08:11] <jql> and rename our to us?

[08:11] <dduncan> well, feel free to customize perl 6 in that way ... you can, you know

[08:12] <revdiablo> nothingmuch: So it was more about the distribution than the slowness?

[08:12] <Khisanth> jp-autark: too bad the Pirate name is already used for something else :)

[08:12] <nothingmuch> revdiablo: yes

[08:12] <dduncan> yes

[08:12] <jp-autark> :)

[08:12] <nothingmuch> it was slightly slower than ideal

[08:12] <Khisanth> shiver me $timbers; ..

[08:12] <dduncan> its so keyboards don't jam

[08:12] <dduncan> because hammers close together weren't hit in sequence

[08:12] <nothingmuch> but dvorak is, in practice, only about 10-15% faster for people who are pushing the limit of qwerty

[08:12] <dduncan> less likely to collide with each other

[08:13] <dduncan> s/keyboards/typewriters/

[08:13] <dduncan> mechanical ones

[08:13] <nothingmuch> dvorak has another advantage besides speed, though - the movement is not as big, so i hear it's healthier

[08:13] <Khisanth> old typewriters :)

[08:13] <nothingmuch> but Juerd is the person to ask about this

[08:16] <scook0> nothingmuch: are you running the test, btw?

[08:16] <nothingmuch> scook0: ooops... I started build, but got distracted

[08:16] <nothingmuch> tee hee ;-)

[08:17] <nothingmuch> (burning stuff, trying to hunt a bee, etc)

[08:17] * scook0 crosses fingers for test-pass

[08:18] <scook0> curses, svk.elixus.org is broken

[08:19] <nothingmuch> scook0: i'll let you know if tests are failing due to parse errors

[08:19] <nothingmuch> and i'll also let you know when it's done

[08:19] <scook0> nothingmuch: thanks

[08:19] <scook0> confident about this one

[08:20] * scook0 touches wood

[08:20] * nothingmuch minimizes window and starts working more intensively

[08:20] <dduncan> as of r7523, all tests pass on the default haskell backend

[08:20] <dduncan> current version that is

[08:20] <nothingmuch> dduncan: this is an uncomitted patch

[08:20] <dduncan> yes, well go all out

[08:20] <dduncan> this is the time to go all out

[08:20] <scook0> well, it was committed once

[08:20] <scook0> then reverted, because it was broken :)

[08:21] <nothingmuch> this is really cynical: [email@hidden.address] 'Please help Hurricane Katrina victims !!! ?'

[08:21] <dduncan> url?

[08:21] <jql> geez

[08:22] <dduncan> a spam?

[08:22] <nothingmuch> dduncan: err, yes

[08:22] <dduncan> anyway, good night

[08:22] <nothingmuch> darcs devel listmod

[08:22] <nothingmuch> good night

[08:22] <scook0> bye dduncan

[08:26] *** Aankh|Clone is now known as Aankhen``

[08:48] <nothingmuch> scook0: bad news

[08:48] <scook0> gasp

[08:49] <scook0> what have I broken?

[08:49] <nothingmuch> t/01-sanity/01-tap.................................*** 

[08:49] <nothingmuch>     unexpected "j"

[08:49] <nothingmuch>     expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input

[08:49] <nothingmuch>     at -e line 2, column 7

[08:49] <nothingmuch> *** 

[08:49] <nothingmuch> sorry, i was away for a while

[08:51] <scook0> looks like I'm failing to backtrack somewhere

[08:51] <scook0> hold on

[08:52] <scook0> 01-tap doesn't even have a 'j'

[08:52] <scook0> looks like my patch screwed up before the first sanity test even began parsing!

[08:52] <pasteling> "nothingmuch" at 212.143.92.226 pasted "exact output of ./pugs -Ilib t/01-sanity/01-tap.t 2>&1" (4 lines, 167B) at http://sial.org/pbot/13597

[08:53] <nothingmuch> say '1

[08:53] <nothingmuch> the ' is ticking it off

[08:54] <scook0> say('1') works fine though

[08:54] <scook0> it's a problem with listop-style calls

[08:57] <nothingmuch> =/

[09:12] <geoffb> Geez, someone came in here saying Perl wasn't good for 3D, and noone pointed him to my Perl OpenGL articles?

[09:12] <geoffb> awww, I'm hurt . . . .

[09:12] <geoffb> :-)

[09:12] <nothingmuch> when?

[09:13] * geoffb scrolling back, hold

[09:13] <geoffb> http://colabti.de/irclogger/irclogger_log/perl6?date=2005-10-10,Mon&sel=63#l90

[09:14] <geoffb> How be you, nothingmuch?

[09:15] <nothingmuch> i'm good

[09:15] <nothingmuch> you?

[09:18] <geoffb> pretty decent

[09:18] <geoffb> Tired though . . . 

[09:18] <geoffb> probably headed to bed in near future

[09:19] <geoffb> Just got kinda jazzed to have one of my articles get noticed, so that kept me up -- and then I decided to catch up with the backlog

[09:20] <geoffb> Holy crap.  My page views for that blog entry went from ~850 to ~5200 so far, presumable because of the /. 

[09:20] <geoffb> Given that my previous record was ~2400

[09:20] <geoffb> That's cool.

[09:23] <nothingmuch> יוררשי!

[09:23] <nothingmuch> huraah!

[09:23] <geoffb> :-)

[09:23] <nothingmuch> (sorry, didn't notice hebrew was on ;-)

[09:23] <geoffb> heh

[09:23] <nothingmuch> transliterated that is "yorrshi"

[09:23] <nothingmuch> sounds happy

[09:24] <nothingmuch> maybe it means something in an asian language ;-)

[09:25] <geoffb> Here's an interesting question: What percentage of strings of N phonemes actually make a word used in some language?

[09:25] <geoffb> OK, maybe just interesting to me

[09:25] <nothingmuch> it's interesting

[09:25] <nothingmuch> i bet there's statistics

[09:26] <geoffb> That would be pretty cool to see.

[09:26] <geoffb> Well, I have no good excuse to be awake at this hour

[09:26] <geoffb> so I think I will try to not be

[09:27] <geoffb> &

[09:28] <geoffb> (Oh, I forgot: congrats to everyone on 6.2.10!)

[09:28] <geoffb> & # no, really

[09:28] <scook0> spoot

[09:28] <scook0> I can get foo.bar

[09:28] <scook0> or I can get listops

[09:28] <scook0> but never both in the same build

[09:31] <nothingmuch> scook0: =(

[09:31] <nothingmuch> would having access to a moderately fast machine help?

[09:31] <nothingmuch> and why isn't feather helping, btw?

[09:31] <scook0> nothingmuch: I never bothered to get a feather account

[09:31] <nothingmuch> hmm

[09:32] <nothingmuch> anyway, i can give you access to a dual processor OSX box

[09:32] * autrijus waves weakly and stretches

[09:32] <nothingmuch> hi autrijus!

[09:32] <autrijus> wikipedia admins++ # http://en.wikipedia.org/wiki/User_talk:Gt1234

[09:32] <scook0> (back when feather started up, I wasn't interested in making code-changes, so I didn't need another box)

[09:32] <scook0> slashdot?

[09:33] <nothingmuch> heh =)

[09:33] <autrijus> although that vandalism stayed up for 6 hours :-/

[09:33] <autrijus> (someone changed my wikipedia photo into goatse... much fun. *not*.)

[09:33] <nothingmuch> http://www.google.com/search?q=gt1234

[09:33] <nothingmuch> you'll notice that many of the hits are similar

[09:33] <nothingmuch> "your post has been removed as a violation" ....

[09:34] <nothingmuch> i think someone loves you, autrijus =)

[09:34] <autrijus> riight =)

[09:34] <autrijus> I can do with less of that kind of love.

[09:34] <scook0> autrijus: I can't seem to get listops and `foo.bar` in the same build

[09:35] <scook0> peppering my code with `try` doesn't seem to help either

[09:35] <scook0> what can I use to trace the parser?

[09:35] <autrijus> scook0: where's your latest patch?

[09:35] <autrijus> scook0: you can use trace.

[09:35] <autrijus> trace :: String -> a -> a

[09:35] <autrijus> handy stuff. a refreshing desert in the oasis of referntial transparency.

[09:36] <scook0> I would prefer a refreshing dessert, to be honest

[09:36] * scook0 ducks

[09:37] <autrijus> *smile*

[09:38] <autrijus> I need to get some rest... glad that autrijus.org is back to life

[09:38] <nothingmuch> the desert is actually quite refreshing in a clean-your-mind-as-you-accept-death-from-dehydration kind of way

[09:38] <nothingmuch> autrijus: if you like you're more than welcome to backup crucial files to my machine, btw

[09:38] <nothingmuch> i have a raid-0 but no real backup plan

[09:39] <nothingmuch> (though I do plan to do something for mail soon)

[09:39] <autrijus> nothingmuch: thanks for the offer :) 

[09:40] * scook0 thinks nothingmuch is addicted to helping people

[09:40] <autrijus> good addiction, that

[09:40] <nothingmuch> scook0: i think that sys admin level help should be shared

[09:40] <nothingmuch> for example, I don't want to pay for a backup MX

[09:40] <nothingmuch> i have a friend who does it for me

[09:41] <nothingmuch> to get these benefits I have to provide them too

[09:41] <nothingmuch> it's just socialist thought =)

[09:41] <nothingmuch> (in the anarchistic, back to the roots sense)

[09:41] <nothingmuch> if i can help at no cost to me, i go ahead and do it

[09:41] <nothingmuch> because it makes people be nicer to me

[09:41] <nothingmuch> it makes me feel good

[09:42] <nothingmuch> and it makes people be nicer to other people, in a cascade

[09:42] <autrijus> funny, as I often explain anarchist attitude as "in the socialisitc, back to the roots sense"

[09:42] <scook0> :)

[09:42] <nothingmuch> =)

[09:42] <nothingmuch> i think they're so synergetic it's hard to tell them apart

[09:42] <nothingmuch> they cover two aspects of how a good society should ideally support itself

[09:43] <autrijus> ...provided that noone is able to kill another

[09:43] <autrijus> ...and that communication is inexpensive.

[09:43] <nothingmuch> well, that's not part of an ideal society

[09:43] <nothingmuch> i'm not pretentious

[09:43] <nothingmuch> but so far lambdacamels have done me only good =)

[09:44] <autrijus> neither am I... on IRC you can't kill one another and communication is instaneous :)

[09:44] <nothingmuch> =)

[09:47] * rafl prepares new official 6.2.10packages for Debian.

[09:47] <autrijus> rafl++

[09:54] <nothingmuch> css-- for the 40 millionth time

[09:54] <vasc> autrijus, i assume i am talking with the pugsmeister himself?

[09:54] <kgftr|konobi> css++

[09:54] <nothingmuch> vasc: the one an only.... AUTRIJUS!

[09:54] <nothingmuch> kgftr|konobi: how come?

[09:55] <autrijus> vasc: aye, although a somewhat sleepy one.

[09:55] <vasc> autrijus, oh?

[09:55] <vasc> no sleep this night yet?

[09:56] <vasc> erm, the night has come and gone :)

[09:56] <autrijus> just woke up; didn't get quite enough sleep after the long stretch to 6.2.10

[09:56] <vasc> i see

[09:56] <vasc> sorry to pester you, but i wanted to ask a really off-topic question

[09:56] <autrijus> vasc: oh, you are part of freeciv team. thank-you for making a significant portion of my life disappear into hedonistic fun

[09:56] <autrijus> only next to nethack

[09:56] <vasc> autrijus, lol

[09:57] <autrijus> offtopic question is fine

[09:57] <vasc> i noticed you offer darcs and subversion access, i was wondering how you managed that?

[09:58] <autrijus> vasc: currently, very crudely; I use svk to merge the svn.openfoundry.org one to svn.perl.org

[09:58] <autrijus> and at the same time do a "darcs record"

[09:58] <autrijus> so the darcs part is read only

[09:59] <nothingmuch> vasc: the problem with sending darcs patches is that you get them back as conflicts

[09:59] <nothingmuch> autrijus: you could try tailor.py - it's progressed since you started this

[09:59] <autrijus> nothingmuch: yes, I know, and I figured out a way to creatively use tagging to track metadata after discussion with david roundy

[09:59] <autrijus> but it's... not very high priority and a bit complex.

[09:59] * nothingmuch is tempted to use tables for layout

[10:17] <svnbot6> r7524 | rafl++ | Debian:

[10:17] <svnbot6> r7524 | rafl++ |  * Update debian/smoker.yml to upload smoke results automatically.

[10:17] <svnbot6> r7524 | rafl++ |  * Removed code from debian/rules that allows to disable smoke uploading using

[10:17] <svnbot6> r7524 | rafl++ |    environment hooks. PUGS_BUILD_OPTS="upload_smoke=0" does the same.

[10:17] <svnbot6> r7523 | Darren_Duncan++ | Deleted the older ext/Locale-KeyedText, which ext/Rosetta-Incubator supersedes

[10:27] <rafl> gaal: Why is Class::Rebless' Changlog empty?

[10:29] <nothingmuch> because he's lazy?

[10:29] <nothingmuch> ;-)

[10:29] <nothingmuch> that's why most of my changelogs are empty

[10:30] <nothingmuch> or nonexistent

[10:30] * nothingmuch thinks he'll make Changelog a hexdump of /dev/random just to up his kwalitee

[10:31] <rafl> Well, so the Debian package won't have an upstream changelog. So what..

[10:31] <vasc> autrijus, thanks a lot, and good luck for your project, not that i think you need luck though :)

[10:34] <theorbtwo> nm: At least make your changelog a dump of the relevant portion of the svn log...

[10:35] <autrijus> vasc: more luck couldn't hurt... I always make sure to carry two or more blessed luckstones around

[10:35] <autrijus> rafl: you aware we bundle C::Rebless for PIL2JS?

[10:37] <rafl> autrijus: Well, Actually.. no.

[10:37] <autrijus> oh ok. there is a nonindexed copy in PIL2JS/lib

[10:37] <autrijus> so we don't strictly need to depend on CR

[10:38] <rafl> Really. Why do we ship it with PIL2JS?

[10:38] <rafl> It wouldn't be a dependency anyway. I'd only suggest spidermonkey-bin and class-rebless. It's not needed for pugs to work.

[10:39] <autrijus> rafl: because dduncan reported that the warning is confusing and it's best to have pil2js prelude uniformly generated (or not)

[10:39] <autrijus> and gaal consented the bundling as C::R is small anyway

[10:39] <rafl> Why not put it in PREREQ_PM?

[10:40] <autrijus> for the next release, maybe.

[10:40] <autrijus> but it was late and we didn't have any dependency for CPAN  modules before for the default configuration

[10:40] <rafl> OK, so I won't add the suggestion to the debian package.

[10:41] <autrijus> k.

[10:43] <rafl> We don't bundle spidermonkey yet, do we? ;-)

[10:45] <rafl> Btw, we have a to YAML.

[10:46] <Juerd> nothingmuch: In fact, speed shouldn't be considered relevant even (re dvorak)

[10:46] <Juerd> Yes, it's faster

[10:47] <autrijus> rafl: mm, we bundle a MiniYAML

[10:47] <Juerd> But a better goal is to type as fast as before with less movement

[10:47] <Juerd> Speed will then automatically improve.

[10:47] <Juerd> And as much as your body thinks is natural

[10:48] <rafl> autrijus: Is it really used by all tools? I don't think so. (I can't think of an other reason to put it in my depends line)

[10:55] <autrijus> rafl: yeah, smoke needs yaml writing

[10:59] <autrijus> bbiab...

[11:03] <pasteling> "scook0" at 220.253.96.162 pasted "Parser patch Mk III" (147 lines, 5.9K) at http://sial.org/pbot/13598

[11:03] <scook0> nothingmuch: if you're willing to test, there's a new patch up

[11:10] <gaal> I think we should just put perl 6.0 in PREREQ_PM and be done with all this messy implementation stuff.

[11:10] <gaal> What? We wanted it to be self-hosting, no? Might as well be self-dependent.

[11:11] <gaal> </silly>

[11:11] <gaal> rafl: you can Recommend: Bundle::Pugs::SmokeKit

[11:11] <nothingmuch> scook0: yes

[11:12] <nothingmuch> but i'm off to lunch, so i'll report when I'm back

[11:12] <gaal> that's yaml, petal, test-tap-* and stuff

[11:12] <scook0> nothingmuch: k

[11:13] <gaal> as for a changelog... point. I actually have a pending bugfix to C:R (one line patch), so I should contemplate... 0.04!

[11:23] <rafl> gaal: I would have to package that then. I don't like the idea of packaging bundles.

[11:25] <rafl> gaal: Don't to that much releases. That work for the packagers (me!) :-)

[11:25] <rafl> gaal: You were using Debian, right? 

[11:27] <gaal> rafl: using debian when? i do use debian

[11:28] <gaal> but not for building pugs, as my debian box isn't ramful enough

[11:28] <rafl> gaal: Great. So you can test both the Debian and the C:R packages. :-)

[11:28] <gaal> :-) yes indeedy

[11:29] <gaal> are they in unstable already?

[11:29] <gaal> ...or d'ya want to let me dpkg them manually?

[11:29] <gaal> i mean dpkg -i

[11:29] <rafl> No, not in unstable yet.

[11:29] <rafl> feather.perl6.nl/~rafl/debian

[11:29] <gaal> sec

[11:30] <rafl> pugs 6.2.10 will be there soon.

[11:31] <gaal> i'm off to a meeting soon...

[11:32] <rafl> The packages will wait for you. :-)

[11:36] <rafl> Nooooo! ./usr/share/perl6/5.8/FA/t/DFA.t

[11:42] <nothingmuch> ouch

[11:45] <nothingmuch> scook0: no go

[11:45] <rafl> I can't see why it gets installed there. Anyone?

[11:45] <scook0> nothingmuch: curses

[11:45] <scook0> was it something really stoopid?

[11:47] <scook0> (woo, nautilus crashes again!)

[11:49] <rep> why do you use nautilus anyway

[11:49] <scook0> because nautilus comes with gnome

[11:49] <scook0> and gnome comes with ubuntu

[11:49] <scook0> and I can't be bothered setting anything else up

[11:49] <rep> i have gnome, and yet i don't use nautilus!

[11:50] <rep> (nor anything else)

[11:50] <scook0> I don't mind nautilus...except when it crashes

[11:52] <scook0> rafl: there seems to be an extra copy of t/ inside lib/FA/

[11:55] <svnbot6> r7525 | rafl++ | * Removed extra copy of t inside ext/FA-DFA/lib/FA. scook0++

[11:55] <rafl> For some reason perl5 contains Makefile.old stuff after doing a realclean. Why?

[11:55] <rafl> The makefile hooks look right.

[11:58] <rafl> src/gen_prelude* and src/Main* also doesn't seem to be cleaned properly.

[12:07] <svnbot6> r7526 | rafl++ | Debian:

[12:07] <svnbot6> r7526 | rafl++ |  * changelog: Added changes for 6.2.10.

[12:07] <svnbot6> r7526 | rafl++ |  * pugs-modules.lintian-overrides: Added overrides for new modules.

[12:07] <svnbot6> r7526 | rafl++ |  * rules: clean up the source tree properly.

[12:07] <svnbot6> r7526 | rafl++ |  * rules: don't install ./usr/share/perl6/5.8/FA/t/

[12:07] <svnbot6> r7527 | rafl++ | Debian:

[12:07] <svnbot6> r7527 | rafl++ |  * rules: removed the smoke uploading code. make smoke handles it.

[12:13] <rafl> Does the smoke uploading using smoker.yml really work? I see smoke_upload => 0 when building.

[12:19] <nothingmuch> scook0: sorry

[12:20] <nothingmuch> the error is exactly the same as last time

[12:20] <nothingmuch> unexpected "'", 01-tap.t, line 7 column 5

[12:20] <scook0> weird

[12:20] <scook0> because mine seems to work

[12:20] <nothingmuch> odd

[12:20] <nothingmuch> oh shit

[12:20] <nothingmuch> i get it

[12:21] <nothingmuch> when I redownloaded the patch I accidentally applied the wrong file

[12:21] <nothingmuch> =(

[12:21] <scook0> phew

[12:21] * nothingmuch is an idiot

[12:21] <scook0> it happens

[12:22] <scook0> anyway, I'm going to bed soon

[12:22] <nothingmuch> ciao then

[12:22] <scook0> so if you do run the test, either paste the results (and I'll backlog), or else email me

[12:23] <scook0> unfortunately, I'll probably be super-busy until at least Thursday :(

[12:23] <scook0> ciao

[12:45] <svnbot6> r7528 | rafl++ | * debian/rules: Removed special handling for ext/FA-DFA/. The tests won't be

[12:45] <svnbot6> r7528 | rafl++ |   installed accidently anymore.

[13:11] <gaal> rafl: any prefered tests other than just dpkg -i ?

[13:13] <rafl> gaal: I don't know other tests for you module. For pugs (currently smoking) it should be tested if the backends work (needed modules/precpm prelude, etc. are found) and if the haskell module is usable. I don't know that much about hs.

[13:14] <xerox> rafl: what does smoking means in that context?

[13:15] <rafl> xerox: It run's make smoke.

[13:16] <xerox> What does it do, if I could ask?

[13:17] <rafl> It's quite similar to make test (runs the test suite) but outputs a nice html file which will be uploaded to smoke.pugscode.org afterwards.

[13:17] <xerox> Thanks.

[13:17] <clkao> 8

[13:18] <gaal> rafl: Class::Rebless is OK

[13:18] <gaal> the tap-* modules want petal, but you know THAT needs URI

[13:18] <gaal> and MKDoc::XML

[13:18] <gaal> but that's it :)

[13:19] <gaal> yaml presumably is already packaged for debian

[13:22] <rafl> gaal: What needs URI?

[13:24] <rafl> gaal: Because I also maintain MKDoc::XML and Petal (I adopted them recently) I know that both depend on everything that's specified in PREREQ_PM. URI is not listed there.

[13:37] <gaal> rafl: hmm, i thought petal did, checking if it's perhaps something else

[13:38] <gaal> d'oh, Test-TAP-HTMLMatrix does.

[13:39] <rafl> Depends: perl (>= 5.6.0-16), libtest-tap-model-perl, libpetal-perl, liburi-perl

[13:39] * rafl doesn't forget dependencies!

[13:40] <gaal> well, okay then ;)

[13:48] * rafl just found out that he maintains he didn't knew about..

[14:09] <eric256_> snow!

[14:10] <gaal> eric256_: where?

[14:11] <eric256_> Denver Colorado...our first snow since i moved here ;)

[14:11] <rafl> In the fridge?

[14:11] <eric256_> out of 12 people in the office only 2 are here...cowards

[14:11] <gaal> four years ago, almost to the day, i saw the first snow in a lonely place in mongolia

[14:11] <eric256_> of course our power is coming and going so i might get to go home...or just because no one else bothered to come. lol

[14:12] <eric256_> i also understand for the first time in my life *why* trees loose there leaves.. the ones that havn't lost there leaves are just getting beat on.

[14:13] <rafl> gaal: Uploading the packages.

[14:13] <qwr> move somewhere more north and soon you'll discover that there is nothing exciting about the snow ;)

[14:14] <eric256_> hehe

[14:16] <rafl> gaal: done.

[14:17] <gaal> k

[14:18] <ingy_> autrijus: done (http://pugs.kwiki.org/)

[14:18] <autrijus> egg selent

[14:18] <autrijus> ingy++

[14:19] <ingy_> I've been offline for 5 days

[14:19] <xinming_Beijing> ?eval 1+2;

[14:19] <evalbot_7528> 3 

[14:19] <ingy_> well actually I've been pretty offline for 6 months, eh

[14:19] <xinming_Beijing> ?eval {eval "1 + 2"}.say;

[14:19] <evalbot_7528> <SubBlock(<anon>)> bool::true 

[14:19] <xinming_Beijing> hmm, shouldn't it be 3?

[14:20] <rafl> ingy_: You can also kick nwp to finally upload kwiki to Debian.

[14:20] <ingy_> on the upside I just started inventing a new database ;)

[14:20] <xinming_Beijing> eval "1 + 2" returns 3, and it might be equal to 3.say

[14:20] <xinming_Beijing> ?eval 3.say

[14:20] <xerox> ?eval 1+1

[14:20] <evalbot_7528> 3 bool::true 

[14:20] <evalbot_7528> 2 

[14:20] <xerox> What is '.say'?

[14:21] <ingy_> xerox: a printing method

[14:21] <xinming_Beijing> xerox: "string".say is equal to `print "string\n"`

[14:21] <xinming_Beijing> xern: understand? :-)

[14:21] <rafl> And equal to say "string".

[14:21] <xerox> Sure.

[14:21] <xinming_Beijing> hmm, certainly, "string".say can also be written in "string\n".print form.

[14:21] <xerox> ?eval say "thanks"

[14:21] <evalbot_7528> thanks bool::true 

[14:22] <xerox> xinming_Beijing: gotcha.

[14:22] <xinming_Beijing> xerox: hmm, It's a OO like thing in perl 6, which named `indirect notation`\...

[14:22] <xerox> ?eval say "eurt::loob <->"

[14:22] <evalbot_7528> eurt::loob <-> bool::true 

[14:22] <xinming_Beijing> hmm, maybe, I might be wrong for the name.

[14:23] <autrijus> ingy_: what, you extending NIH to the database arena?

[14:23] <ingy_> autrijus: yeah kinda

[14:23] <autrijus> ingy++ # the knight who say NIH

[14:23] <xinming_Beijing> Ok, Can anyone here answer my question? what will `{ eval "3+4" }.say` print? hmm, I might go and write the test...

[14:23] <ingy_> it's not an sql db

[14:24] <ingy_> although someone will write a dbi wrapper I'm sure

[14:24] <gaal> xinming_Beijing: not 100% sure, but { something }.say is asking for say on a closure

[14:24] <xinming_Beijing> In fact, "{ eval '3 + 4' }".say will do the right thing, But I am not sure about the closure without double quota...

[14:24] <ingy_> autrijus: I've learned to not be ashamed and to truly embrace my NIH syndrome

[14:25] <autrijus> ingy_: yes, use your uniqueness to its advantage

[14:25] <gaal> {7} is a closure too

[14:25] <gaal> which is why <SubBlock(<anon>)> looks about right.

[14:25] <xerox> ?eval {}.say

[14:25] <evalbot_7528> <SubBlock(<anon>)> bool::true 

[14:26] <rafl> gaal: So, do they work? :-)

[14:26] <gaal> checking :)

[14:27] <eric256_> hmm i signed off...and yet i'm still here

[14:27] <rafl> Some have circular deps. You should install them together.

[14:27] <xinming_Beijing> hmm, I think, say will accept the string and numeric context, And closure should be "eval"ed first... just MHO...

[14:28] <gaal> rafl: look good so far

[14:28] <xinming_Beijing> bool context will automatically "upgrade" to numeric context.

[14:28] <xinming_Beijing> :-

[14:29] <rafl> gaal: Also libghc6-pugs-dev? I could not test it so far.

[14:31] <gaal> p5embedd works

[14:32] <rafl> gaal: haskell eval should not. hs-plugins isn't uploaded yet.

[14:32] <gaal> parrot is not embedded?

[14:32] <rafl> No, no parrot in Debian. Working on it, though.

[14:32] <gaal> ahh

[14:32] <gaal> ok

[14:33] <rafl> It's kind of much work, so I focused on pugs.

[14:34] <pasteling> "gaal" at 192.117.178.34 pasted "libghc6-pugs-dev install fail" (10 lines, 547B) at http://sial.org/pbot/13602

[14:34] <gaal> rafl: sure

[14:36] <rafl> Hm, I think I broke libghc6-pugs-dev. :-(

[14:39] <rafl> Bah, I need to adjust the paths in installed-pkg-config.

[14:40] <xinming_Beijing> rafl: hmm, Is there any reason why GHC in debian still 6.2? even in the sid version...

[14:41] <rafl> xinming_Beijing: 6.4-4.1 is in sid.

[14:41] <rafl> xinming_Beijing: 6.4.1-1 will go in as soon as 6.4-4.1 is in sarge.

[14:42] <rafl> xinming_Beijing: With ghc 6.2 we couldn't even compile pugs.

[14:42] <rafl> xinming_Beijing: See packages.debian.org/ghc6

[14:48] <rafl> What run's ./Setup configure when building pugs?

[14:48] <xinming_Beijing> rafl: :-S, I ever tried to compile pugs in sid, But failed. hmm, and IIRC, the reason of fail is because of 6.2 :'(

[14:49] <rafl> xinming_Beijing: sid has 6.4, even on all architectures. See the link I've posted.

[14:49] <xinming_Beijing> rafl: I saw.. I remember wrong. :-)

[14:52] <xinming_Beijing> rafl: hmm, util/build_pugs.pl 

[14:52] <xinming_Beijing> rafl: maybe.

[14:52] <rafl> xinming_Beijing: Right.

[14:53] <xinming_Beijing> after you perl Makefile.PL, you will find `$(PERL) util/build_pugs.pl _+SETUP --prefix=$(DESTDIR) ...`

[14:53] <xinming_Beijing> in Makefile

[15:03] <rafl> Right. ./Setup configure is called with the args between _+SETUP and _-SETUP.

[15:21] <offby1> to what number are the Pugs release numbers converging?

[15:21] <offby1> 2 * pi ?

[15:22] <iblech> offby1: Yep.

[15:25] <offby1> forgive me, but I don't see how 6.2.10 fits into that sequence ... 

[15:26] <iblech> offby1: Only the first two parts of the version number (6.2) converge to 2pi. The last part is simply incremented (6.2.8, 6.2.9, 6.2.10 --> 6.28.0, 6.28.1, etc.)

[15:26] <coral> heh

[15:28] <offby1> ah, that explains it!

[15:28] * offby1 thought he'd forgotten what pi was

[15:32] * eric256_ tries to decide if he is hungry enough to walk and or drive in the snow. lol

[15:34] * offby1 decides for him: yes

[15:39] <gaal> autrijus: just noticed a frivolous wkifification of *] and SQL::Routine[* in the release announcement on your journal.

[15:44] <offby1> do the various examples in the pugs source all work, or are some of them suffering bitrot?  i.e., if I want to learn more about programming in perl6, are they a good place to look?

[15:46] <iblech> offby1: They are definitely worth reading. Also look at the modules in ext/ and the testsuite in t/

[15:46] <integral> if they've suffered bit rot, learn perl6 and fix them =)]

[15:46] <iblech> ?eval "Also note that the sourcecode to the evalbot is in examples/network/evalbot/ (with the necessary module in ext/Net-IRC/)"

[15:46] <evalbot_7528> 'Also note that the sourcecode to the evalbot is in examples/network/evalbot/ (with the necessary module in ext/Net-IRC/)' 

[15:47] <iblech> (as an example of code which definitely works)

[15:48] <rafl> Someone should continue to work on XML-SAX. I want to write the same for Jabber chats. :-)

[15:49] <offby1> integral: I wouldn't mind, but until I'm pretty good with perl6, I have a chicken-and-egg problem: can't learn perl6 without good examples; can't make the examples good until I know perl6

[15:50] <iblech> offby1: Luckily, #perl6 can help you :)

[15:50] <iblech> rafl: ooh :)

[15:51] <integral> offby1: iirc most of the programs in examples/ itself do work, but some of the subdirs are more dodgy.

[15:51] <offby1> integral: OK, thanks.

[15:54] <gaal> fr

[15:55] <gaal> er.

[15:55] <gaal> rafl: have a new package for me to test?

[15:56] <rafl> gaal: building. It runs the tests. My hardware isn't that fast.

[15:57] <gaal> np :)

[15:58] <gaal> btw (probably related)

[15:58] <gaal> dpkg -P libghc6-pugs-dev

[15:58] <gaal> ghc-pkg: cannot find package Pugs

[16:00] <rafl> gaal: Yes, because postinst could not register it with ghc-pkg.

[16:00] <gaal> k

[16:01] <eric256_> offby1 - if you find stuff that doesn't work let us/me know.  I'll be happy to help you learn/repair examples

[16:01] <eric256_> ;)

[16:01] *** eric256_ is now known as eric256

[16:02] <offby1> eric256: is your email address in some file in the examples directory, or are you reachable only by IRC?

[16:04] <eric256> IRC is probably best since then ther are lots of people to help

[16:05] <eric256> perlbot nopaste

[16:05] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[16:05] <pasteling> "eric256" at 66.102.136.66 pasted "nmake error" (17 lines, 924B) at http://sial.org/pbot/13604

[16:06] <eric256> i'm gettnig that error "Can't locate YAML.pm" when trying to nmake

[16:07] <gaal> eep

[16:07] <eric256> pugs still seems to run and work but i got that error....is it safe to ignore?

[16:07] <gaal> it is if you don't need the JS backend

[16:07] <gaal> i didn't think it depended on yaml :(

[16:08] <iblech> eric256: Fixed in r7529

[16:08] <iblech> gaal: Right, it was just for debugging ("use YAML; die Dump(...)")... :(

[16:08] <svnbot6> r7529 | iblech++ | * Usual svn props.

[16:08] <svnbot6> r7529 | iblech++ | * PIL2JS: PIL::App: Removed some debugging leftover, eric256++ for noticing.

[16:08] <gaal> ah

[16:10] <iblech> Luckily make didn't abort after the failed runjs.pl call

[16:14] <iblech> putter, fglock: FYI, running make smoke-perl5 here currently

[16:14] <eric256_> bahhh...stupid power....and irc thinks i'm still there. lol

[16:15] <iblech> 18:08 < iblech> eric256: Fixed in r7529

[16:15] <eric256_> thanks

[16:16] <eric256_> trees havn't lost there leaves, so they are breaking and taking out power lines ;)

[16:30] *** typester is now known as sleepster

[16:32] <rafl> e/wi 44

[16:38] <eric256_> much better. 

[16:39] *** eric256_ is now known as eric256

[16:50] <fglock__> putter: ping

[16:50] <svnbot6> r7530 | fglock++ | * perl5/Code - Currying:

[16:50] <svnbot6> r7530 | fglock++ |   sub x ( $a, $b ) { say "$a + $b" };  

[16:50] <svnbot6> r7530 | fglock++ |   $z = &x.prebind( 'a'=>1 ); 

[16:50] <svnbot6> r7530 | fglock++ |   $z( b=>2 );

[16:50] <svnbot6> r7530 | fglock++ | * BUG: Code.pm doesn't implement named arguments properly, so this prints Pairs instead of Values

[16:51] <eric256> any idea why a failing open is raising an error refering to a location in Prelude.pm ?

[16:51] <iblech> fglock__: oooh ++ (but note that prebind is spelled assuming in P6)

[16:51] <iblech> eric256: Probably because &open is implemented in the Prelude

[16:52] <fglock__> iblech: I'll fix it - thanks

[16:53] <eric256> string length is still length right?

[16:54] <PerlJam> eric256: bytes for length in bytes, chars for length in chars, codes for length in codepoints, etc.

[16:54] <eric256> ahhh

[16:54] <eric256> thanks

[16:54] <PerlJam> I think we have bytes, chars, codes, langs  but I'm not sure about the last 2 really as I never use them.

[16:55] <eric256> ?eval $*PROGRAM_NAME

[16:55] <evalbot_7530> \undef 

[16:55] <svnbot6> r7531 | fglock++ | * perl5/Code - s/prebind/assuming/ iblech++

[16:55] <eric256> ?eval $*PROGRAM_NAME.perl

[16:55] <evalbot_7530> '\\undef' 

[16:56] <iblech> eric256: $*PROGRAM_NAME is (as well as %?CONFIG etc.) hidden in safemode

[16:56] <eric256> odd ... motd.p6   uses splitpath($*PROGRAM_NAME)[1];  

[16:57] <eric256> bit warn .perl on it produces 

[16:57] <eric256> *** \\MkMatch {matchOk = True, matchFrom = 0, matchTo = 0, matchStr = "", matchS

[16:57] <eric256> ubPos = [], matchSubNamed = {}}

[16:57] <eric256> which isn't what that program is expceting, its trying to get the directory...any ideas?  

[16:57] <rafl> evalbot_7531: You're serializing a regex match. That's fine.

[16:57] <PerlJam> Isn't the .perl method for generating a representation as perl code?

[16:57] <iblech> eric256: ~$foo will get you the string

[16:58] <eric256> ahh... problem was perl didn't seem to ever be ~ it automaticaly

[16:58] <fglock__> iblech: it works with junctions too :)

[16:58] <rafl> Or "$foo"

[16:58] <iblech> PerlJam: It is. Extending t/builtins/perl.t.

[16:58] <fglock__> iblech: sub x ( $a, $b ) { say "$a + $b" };  $z = &x.assuming( 'a'=> 1|3 ); $z(b=>2)

[16:59] <iblech> fglock__: oooh! Does vanilla Pugs support this too?

[17:00] <fglock__> iblech: I implemented it in perl5/Code.pm - but it is quite simple <15 lines

[17:00] <eric256> my $progdir = splitpath($*PROGRAM_NAME)[1] || '.';   

[17:00] <svnbot6> r7532 | iblech++ | t/builtins/perl.t: Tests for .perling rx objects. PerlJam++ eric256++

[17:01] <iblech> fglock__: looking

[17:01] <eric256> doesn't work at all because its not stringifing the match

[17:01] <fglock__> iblech: please note that there is a bug in named args in p5, so the results are a bit weird

[17:02] <iblech> eric256: Hm? "a" ~~ rx:P5{b} || "foo" seems to work

[17:02] <iblech> fglock__: nod

[17:04] <eric256> could it be something with the File::Spec module? the line i posted leaves '$progdir' eq '' 

[17:04] <eric256> so i added a line below it $prodir = '.' unless ~$progdir;   

[17:04] <eric256> which isn't exactly pretty

[17:05] <eric256> BTW: how would i clone a hash?

[17:05] <iblech> Ah, I think I know why: Although the match is "" (empty string), it did successfully match

[17:06] <iblech> so || chooses the LHS

[17:06] <eric256> hehe "" but true

[17:06] <iblech> not sure whether this is a bug

[17:06] <iblech> right, exactly

[17:06] <iblech> [clone a hash] %hash.clone (but probably not yet implemented)

[17:06] <fglock__> iblech: yes - pugs supports it!

[17:06] <eric256> while it might not be a bug, it definitly is not DWIM

[17:06] <eric256> maybe splitpath should stringifiy before returning?

[17:07] <iblech> eric256: I think so.

[17:07] <eric256> should i just leave the workaround in for now? or change File::Spec.pm?

[17:08] <iblech> eric256: I'd fix File::Spec

[17:08] <fglock__> ?eval sub x ( $a, $b ) { $a + $b }; my $z = &x.assuming( 'a'=>1|2 ); $z(2|3)

[17:08] <evalbot_7532> 3 

[17:09] <iblech> ?eval sub x ( $a, $b ) { $a + $b }; my $z = &x.assuming( 'a'=>1|2 ); $z(2|3).perl

[17:09] <evalbot_7532> '((3 | 4) | (4 | 5))' 

[17:10] <PerlJam> eric256: What's wrong with %a = %b;  for cloning a hash? 

[17:11] <iblech> PerlJam: %a = %b doesn't clone deeply (%b<X> = [...]; %a = %b; %a<X> = ...; %b<X> changed as well)

[17:11] <eric256> doesn't seem to work...well it works, but its yelling  odd number of elements

[17:11] <eric256> actualy they are doing.  my %copy = hash %x;

[17:11] <eric256> ?eval my %x = (x => 1, y =>2); my %copy = hash %x;

[17:11] <evalbot_7532> Error: cannot cast from VUndef to Handle (VHandle) 

[17:12] <iblech> ?eval my %x = (x => 1, y =>2); my %copy = %h

[17:12] <evalbot_7532> Error: Undeclared variable: "%h" 

[17:12] <iblech> ?eval my %x = (x => 1, y =>2); my %copy = %x

[17:12] <evalbot_7532> {('x' => 1), ('y' => 2)} 

[17:12] * eric256 scratches his head

[17:12] <iblech> The extra hash() should not be necessary

[17:12] <eric256> k...dunno why they had it in the first place ;)

[17:12] <eric256>  not even sure they realy need a copy in this spot

[17:14] <PerlJam> iblech: so .clone() is a recursive copy?  i.e., it call .clone() on all the elements of the data structure until it hits the leaves?

[17:15] <iblech> PerlJam: Yep.

[17:16] <geoffb> morning, all . . . 

[17:16] <svnbot6> r7533 | eric256++ | Fixed typos in motd examples, and strigified output of File::Spec::Win32::splitpath()

[17:16] <iblech> Evening, geoffb :)

[17:17] <geoffb> How have you been, iblech?

[17:17] <iblech> fglock__: Implemented assuming in PIL2JS :)

[17:17] <fglock__> iblech: cool!

[17:17] <iblech> geoffb: Quite good, hurray for 6.2.10 :)

[17:18] <geoffb> good, and: Oh YEAH!

[17:18] <geoffb> And cool that PIL2JS is getting assuming, btw

[17:18] * eric256 realy isn't karma whoring, just forgot that SVN doesn't go up the tree from where you issue the command. ;) 

[17:19] <iblech> geoffb: 4 lines :) (but there're probably bugs WRT slurpy hashes/arrays in there)

[17:19] <svnbot6> r7534 | eric256++ | Strigified output of File::Spec::Win32::splitpath()

[17:19] <svnbot6> r7535 | eric256++ | Strigified output of File::Spec::Unix::splitpath()

[17:19] <geoffb> iblech, cool!  nodnod

[17:19] <svnbot6> r7536 | iblech++ | PIL2JS: &assuming!

[17:19] <svnbot6> r7536 | iblech++ | * PIL2JS.pm: Added lib6/ to the sub-pugs's @INC, so I don't have to type "make"

[17:19] <svnbot6> r7536 | iblech++ |   all the time.

[17:19] <svnbot6> r7536 | iblech++ | * Prelude::JS::Code: Implemented (a simple form of) &assuming.

[17:20] <fglock__> iblech: same problem in p5, I used a *@_ signature

[17:20] <iblech> fglock__: Yep, exactly.

[17:21] <autrijus> oooh assuming!

[17:23] <geoffb> autrijus, thanks for posting good comments to /. while I was slacking with the family yesterday . . . 

[17:23] <autrijus> geoffb: well, I couldn't stay up long enough to track the discussion... although it went pretty well

[17:23] <autrijus> the release note got +4 informative so I'm happy

[17:24] <geoffb> autrijus++

[17:24] <autrijus> I'm less happy about the goatse thing on my wikipedia page.

[17:24] <autrijus> but well, c'est la vie.

[17:24] <geoffb> autrijus, no kidding

[17:24] <geoffb> There's always that fraction of a percent of people.

[17:24] <autrijus> it's my fault of redirecting autrijus.org to wikipedia anyway.

[17:24] <autrijus> but why it could've stayed up for 6 hours without somebody fixing it is beyond me.

[17:24] <geoffb> On a planet this big, one in a million means 6,000 people . . . .

[17:24] <autrijus> nodnod

[17:25] <elmex> elmex++

[17:25] <perlbot> What kind of idiot karmas himself?  Your kind of idiot!

[17:25] <geoffb> Well, despite the microwave/internet generation expectation, things aren't always instant, sadly

[17:26] * geoffb wants the chicken cooker from Fifth Element

[17:26] * elmex wants the chicken from Fifth Element :)

[17:26] * autrijus wants the Fifth Element :)

[17:26] <geoffb> heh

[17:26] <elmex> ok, rooted ;)

[17:27] * autrijus pwnerz

[17:27] <elmex> * does evaluate it's operand as if it was written 'literally' ?

[17:27] <autrijus> elmex: hrm?

[17:27] <elmex> well, the '*' operator in perl

[17:27] <elmex> 6

[17:28] <elmex> (i'm following the pair semantics discussion on perl6 mailinglist)

[17:28] <iblech> elmex: my @a = ($foo, $bar, $baz); foo(*@a) is same as foo($foo, $bar, $baz)

[17:28] <autrijus> okay. time to 1)work on eurooscon talks, 2)get pneuma transcribed to -BPIL2, and 3)write up some documentation for $work 

[17:28] <autrijus> mmm lightning talk submission deadline for euroscon is today.

[17:28] <elmex> iblech: yes, but what does '*' do? 

[17:29] <geoffb> elmex, it's saying, expand this container into several arguments, rather than passing a ref to the container

[17:29] <elmex> geoffb: ah, thanks

[17:29] <geoffb> np

[17:29] <elmex> now i understand very much perl6 very much better

[17:30] <Khisanth> so that is why it's a *

[17:30] <eric256> could someone try running cribbage_scoring.p6 in examples....its giving me a weird error, i think its a parse error of some sort

[17:31] <autrijus> because it resembles a "splat" when you stomp into a container and make it scatter around

[17:31] <Khisanth> yeah :)

[17:31] <Khisanth> who came up with that?

[17:32] <autrijus> larry I think, but it may be imported from ruby

[17:32] <wolverian> and ** is "stop on it twice"

[17:32] <wolverian> er, stomp

[17:32] <eric256> ** = stomp on it with both feet ;)

[17:32] <autrijus> eric256: look at line 6

[17:32] <eric256> lol. thanks

[17:32] * eric256 learns to *read* before asking stupid questions

[17:33] <wolverian> oh, I'm starting a programmer's editor project in perl6

[17:33] <wolverian> if anyone is interested feel free to mail me at [email@hidden.address] 

[17:34] <wolverian> (well, not promising actual progress, but hey, it's fun)

[17:34] <Khisanth> yet another editor?

[17:34] <PerlJam> wolverian: Just emulate autrijus and interested people will show up

[17:34] <geoffb> Interested, yes.  Can contribute any tuits whatsoever, sadly no.  If you make any progress, let us know, it would be fun to try ou

[17:34] <wolverian> Khisanth, its name is currently 'none'

[17:34] <eric256> is there a p6 editor already?   hmmm i need a p6 highlighter for Context ;)

[17:34] <wolverian> not yae :)

[17:34] <wolverian> now, have to go, later :)

[17:34] <Khisanth> "yeah" would be better

[17:35] <Khisanth> it will create some confusing conversations!

[17:35] <PerlJam> yaep

[17:35] <PerlJam> :)

[17:35] <Khisanth> p?

[17:36] <PerlJam> yet another editor project

[17:44] *** rep is now known as reppie

[17:44] *** reppie is now known as rep

[17:47] <eric256> ?eval my @x = (1..5); @x.map:{$_++};

[17:47] <evalbot_7536> Error: Can't modify constant item: VInt 1 

[17:47] <eric256> ?eval my @x = (1..5); @x.map:{$_ +1};

[17:47] <evalbot_7536> (2, 3, 4, 5, 6) 

[17:47] <eric256> ?eval my @x = (1..5); @x = @x.map:{$_ +1};

[17:47] <evalbot_7536> [2, 3, 4, 5, 6] 

[17:50] <iblech> eric256: IIRC a pugsbug causes that your first ?eval doesn't work (it does work in PIL2JS, FYI), see t/builtins/lists/mutating_listops.t

[17:52] <PerlJam> btw, that reminds me ... at least in my version of pugs, this generates an error:  my %h = map { $_ => 1 } @stuff;    now I know why and I know of at least one way to fix it, but this is a relatively common idiom I think.  Surely little things like this are bound to cause friction in the p5 crowd.

[17:52] <eric256> yea i was trying to get inf_lazy_list.p6 to work...but it is broken beyond my abilities or knowledge ;)

[17:53] <geoffb> (from backlog:) what is NIH in ingy_ context?

[17:54] <eric256> monty python skit

[17:54] <PerlJam> geoffb: Not Invented Here.

[17:54] <PerlJam> :-)

[17:54] <eric256> or that. ;)

[17:54] <geoffb> Knew of those expansions, just didn't know what ingy_ and autrijus were on about . . . you never know with those two

[17:56] <iblech> PerlJam: notabug -- { ... => ... } is taken as hashref constructor. You've to disambiguate: {; ... => ... } or { ... => ...; } or { (... => ...) }

[17:57] <PerlJam> iblech: I understand.  It still rankles a little bit.

[17:58] <eric256> would @stuff.map:{ $_ => 1} work?

[17:59] <eric256> nope.

[17:59] <eric256> my %x = map { $x, 1 } @stuff; works....but doesn't seem right

[18:00] <iblech> eric256: It should -- :{...} always introduces a slurpy block (which isa Code, never a Hash)

[18:00] <eric256> doesn't though

[18:01] <PerlJam> Well, that's a pugsbug then

[18:01] <Khisanth> so my %h = map :{ $_ => 1 } @stuff; would be ok?

[18:01] <eric256> ?eval my @s = (1..5); my %x = @s.map:{$_ => 1};

[18:01] <evalbot_7536> Error: cannot cast from VList [VList [VStr "perl6",VInt 1]] to Pugs.AST.Internals.VCode (VCode) 

[18:01] <PerlJam> Khisanth: should be.

[18:01] <Khisanth> PerlJam: well then the : seems pretty minor

[18:02] <thomason> newbie q: has anybody encountered 'Can't exec "./Setup": No such file or directory at util/build_pugs.pl line 49'?

[18:02] <eric256> lunch &

[18:02] <PerlJam> Khisanth: almost all of the ways to tell perl the block is a code block rather than a hash ref seem pretty minor if you ask me.  Except perhaps  %h = map sub { $_ => 1 } @stuff;

[18:04] <iblech> thomason: Hm, shouldn't happen. Could you nopaste the output of "perl Makefile.PL; make"?

[18:04] <thomason> aye

[18:04] * Khisanth will just wait for "Learning Perl 5th edition" :)

[18:04] <thomason> nopaste?

[18:04] <thomason> hrm, doesn't work here

[18:04] <iblech> perlbot nopaste

[18:04] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[18:04] <thomason> ah

[18:06] <pasteling> "thomason" at 169.230.87.20 pasted "build failure" (157 lines, 10.2K) at http://sial.org/pbot/13608

[18:08] <autrijus> Khisanth: surely it needs to be "6th edition"

[18:08] <iblech> thomason: Ah. Your GHC installation seems to lack the Distribution.Simple module, I think

[18:08] <autrijus> thomason: your ghc has no cabal.

[18:08] <autrijus> you sure it is 6.4+?

[18:09] <thomason> ah

[18:09] <thomason> Glasgow Haskell Compiler, Version 6.4.1, for Haskell 98, compiled by GHC version 6.4

[18:09] <thomason> stock gentoo build

[18:09] <geoffb> thomason, what distro?

[18:09] <geoffb> Someone had said that some distros package cabal separately

[18:09] <thomason> gentoo unstable

[18:09] <Khisanth> autrijus: but 4th edition is suppose to the the last one for p5!

[18:09] <thomason> ah, yup, cabal is a separate package

[18:09] <thomason> thanks

[18:09] <geoffb> Khisanth, when is 4th due?

[18:09] <geoffb> np

[18:11] <Khisanth> isn't 4th already out? :)

[18:11] <geoffb> Speaking of which, I wonder when the next perl build is going to flow through to etch . . . last I checked it was blocking stuff

[18:11] <autrijus> mm bbiab.

[18:11] <Khisanth> http://www.amazon.com/exec/obidos/tg/detail/-/0596101058/103-0819090-4831010?v=glance :)

[18:11] <geoffb> Oh, duh, I thought you'd said Programming Perl

[18:14] <geoffb> dammit, it is just moronic for a package to be available in debian oldstable, stable, and unstable, but not in testing

[18:16] <stevan> autrijus: ping

[18:16] <stevan> howdy geoffb, everyone

[18:16] <geoffb> Grrr, I love Debian's pro-portability attitude and all, but holding up something huge like perl based on failed arm builds rankles

[18:16] <Khisanth> I guess Programming Perl 4th editio nwill cover perl6 :)

[18:16] <geoffb> howdy, stevan 

[18:16] <stevan> geoffb: nice article/blog :)

[18:16] <geoffb> stevan, why thank you!  :-)

[18:17] <stevan> you are now the official Pugs scribe :)

[18:17] <geoffb> The /. post has made it far and away the most popular thing I've ever posted

[18:17] <geoffb> stevan, gee, no pressure or anything.  :-)

[18:17] <fglock__> hi stevan

[18:17] <stevan> geoffb: no, none at all ;)

[18:17] <stevan> hey fglock__ 

[18:18] <stevan> I saw the currying stuff in the backlog,.. very nice

[18:18] <fglock__> :)

[18:18] * stevan has been reading too much LISP lately,.. have to fight the urge to switch .......

[18:18] <geoffb> yes, fglock__++ and iblech++ for currying

[18:19] <stevan> well (Haskell Curry)++ and (Alonzo Church)++ too

[18:20] <svnbot6> r7537 | iblech++ | t/subroutines/currying.t: Fixed the test:

[18:20] <svnbot6> r7537 | iblech++ |     sub foo (+$a) {...}

[18:20] <svnbot6> r7537 | iblech++ |     foo 42;       # should fail

[18:20] <svnbot6> r7537 | iblech++ |     sub foo (?$a) {...}

[18:20] <svnbot6> r7537 | iblech++ |     foo 42;       # ok

[18:20] <svnbot6> r7537 | iblech++ |     foo a => 42;  # ok too

[18:20] * Aankhen`` goes to sleep.

[18:21] <iblech> Night, Aankhen`` :)

[18:21] <Aankhen``> G'night.

[18:21] <iblech> And hi stevan :)

[18:21] <stevan> hey iblech, long time no see

[18:23] * iblech searches the lastest JS smoke for a not yet implemented feature he could implement

[18:23] <geoffb> :-)

[18:24] <leo__> autrijus: ping

[18:25] <geoffb> leo__, he's around, but not instantly, as (last I saw) he was doing more last-minute talk writing

[18:25] <Juerd> Please, if someone disagrees with your proposal, do more than repeat the proposal.

[18:26] <geoffb> I'm going to assume you're referring to something on p6l, Juerd?

[18:27] <Juerd> I've read "no, in this proposal, ..." too many times now. These posts aren't trying to add to it or further specify, they are meant for change.

[18:27] <Juerd> Yes

[18:27] <Juerd> The pair thread

[18:27] <Juerd> I like the underlying idea very much, but discussion is killed by repetition, and I hate that.

[18:27] <Juerd> But that's not something to discuss on the list

[18:29] <geoffb> sigh . . . and that's why I rarely read mailing lists any more

[18:30] <Juerd> Very few people are good at discussing things online

[18:31] <Juerd> I wish I were part of those few, but I can try

[18:31] <svnbot6> r7538 | stevan++ | Perl6-MetaModel - just removing drop shadows, they are so early 90s

[18:31] <svnbot6> r7539 | vladtz++ | Script to annotate a tests.yml with older versions.

[18:31] <svnbot6> r7539 | vladtz++ | This will make it easy to find places where the sources are in flux.

[18:31] <autrijus> leo__: pong

[18:31] <leo__> meeting

[18:31] <autrijus> oh yes, meeting!

[18:32] <Juerd> Speaking of meeting - who will be at the extra amsterdam.pm meeting the 20th?

[18:32] <geoffb> stevan, what do you use to create your diagrams?

[18:33] <iblech> stevan: According to the file extension, graffle

[18:34] <iblech> Juerd: re (p6l post from you) "Which leaves us with no basic datastructure that can hold both positional and named arguments." -- right, this is why we need luqui's tuple proposal, see http://svn.openfoundry.org/pugs/docs/notes/theory.pod

[18:35] <Juerd> iblech: I think that then I don't understand the tuple proposal :)

[18:35] <iblech> iblech: Basically, a tuple is a data structure which can hold positional args, named args, slurpy blocks etc.

[18:35] <iblech> And *$tuple will DWIM. Examples:

[18:36] <iblech> my $tuple = (a => 1, (b => 2));

[18:36] <Juerd> I see

[18:36] <iblech> foo *$tuple;  # named arg "a", positional pair (b => 2)

[18:36] <Juerd> It's scary to have special syntax on the RHS of assignment, based on the type of the LHS.

[18:36] <Juerd> I'd prefer this to be in the constructor, which is of course already a call, and thus suited.

[18:37] <Juerd> Hm, what is a tuple anyway? Is it a type?

[18:37] <Juerd> Created by syntax?

[18:37] <iblech> You mean like my $tuple = Tuple.new(a => 1, (b => 2))? I'd like this too

[18:37] <iblech> Yep.

[18:38] <iblech> But tuple are not special until splatted -- so you can, for example, store tuples in arrays etc.

[18:39] <Juerd> It's vague to me how tuples are declared, defined...

[18:39] <cognominal> autrijus, I /msged obra as a question for #parrotsketch  but he said to ask here "can we use pge from pugs with Perl6 syntax?"

[18:39] <iblech> Under luqui's current proposal, my $tuple = (42,) creates a tuple, $tuple.isa(Tuple) then.

[18:39] <stevan> geoffb: it is a Mac OSX app called OmniGraffle

[18:39] <Juerd> iblech: Because of the comma?

[18:39] <autrijus> cognominal: you mean {} callback in pge?

[18:40] <geoffb> stevan, yeah, with iblech's hint, I googled.

[18:40] <Juerd> iblech: i.e. the comma in scalar context is a tuple constructor?

[18:40] <iblech> Juerd: Yep. But, as you said above, this conflicts with , as being the list/array constructor

[18:40] <cognominal> autrijus: I don't know what you meant, I meant just using perl6 regexen

[18:40] <stevan> autrijus: when you have a moment I would like to discuss eigenclasses with you

[18:40] <autrijus> cognominal: can you speak in code? :)

[18:40] <geoffb> cognominal, if you

[18:40] <Juerd> iblech: I have to think about this :)

[18:40] <autrijus> cognominal: you can use /...p6rule.../ in pugs already

[18:40] <Juerd> iblech: Thanks for further explaining

[18:41] <geoffb> cognominal, nevermind, autrijus just said what I was going to

[18:41] <autrijus> stevan: okay, wake for the parrotsketch to finish (in half a hour)

[18:41] <cognominal> autrijus: but does it use pge?

[18:41] <autrijus> cognominal: sure does.

[18:41] <cognominal> oki, thx

[18:41] <stevan> autrijus: ok, sounds good

[18:42] <iblech> Juerd: No problem :)

[18:42] <iblech> Juerd: I'll reply to your p6l post, so the rest of p6l is informed as well

[18:48] <PerlJam> Are Tuples officially part of p6 now?

[18:49] <iblech> PerlJam: At least @Larry hasn't posted a "tuples are official P6 now" message to p6l

[18:53] <autrijus> ...and even if they did, until they make into the svn repo for Synopses, that is still not canonical

[18:53] <autrijus> (by definition, canonical = part of canon)

[18:55] <geoffb> Is the P6::Bible still suffering from severe lag WRT p6l, or is that fixed now?

[18:56] <PerlJam> autrijus: what's the topic of parrotsketch today?

[18:56] <autrijus> ingy_: make some of us comaintainer of P6::Bible?

[18:56] <autrijus> PerlJam: http://www.parrotcode.org/misc/parrotsketch-logs/irclog.parrotsketch-200510/irclog.parrotsketch.20051010

[18:57] <PerlJam> ah, excellent.  that might just save me from even more IRC-induced madness

[18:57] <PerlJam> Or it might encourage me to join the channel and do slightly more than lurk  ;)

[19:02] <iblech> Hm. How can I write chr(12) ~ "3" in a double-quoted string using backslash escapes? "\123" does, obviously, not work

[19:03] <iblech> I seem to recall that "\d[12]3" should work, but unsure...

[19:04] <Khisanth> \0123?

[19:04] <iblech> This includes the 3 again...

[19:05] <iblech> I want "\12" ~ "3", but without the need for ~ and two strings...

[19:05] <geoffb> ?eval "{\012}3"

[19:05] <evalbot_7539> '{}3' 

[19:05] <geoffb> Well, that's interesting

[19:05] <geoffb> ?eval "{ \012 }3"

[19:05] <evalbot_7539> '{  }3' 

[19:06] <geoffb> ?eval "{ 1 + 2 } 3"

[19:06] <evalbot_7539> '3 3' 

[19:06] <geoffb> ?eval "{ 1 + 2 }3"

[19:06] <evalbot_7539> '33' 

[19:06] <Khisanth> aren't you trying to get "<form feed char>3" ?

[19:06] *** wilx` is now known as wilx

[19:06] <iblech> Khisanth: I am. (But the 12 and 3 are only examples)

[19:07] <geoffb> I'm thinking there's a bug with parsing "{ ... }"

[19:07] <geoffb> Or building the string from it, at least

[19:07] <Khisanth> ?eval "\0123"

[19:07] <evalbot_7539> '{' 

[19:07] <Khisanth> ...

[19:08] <Khisanth> where the heck did the { come from?

[19:08] <iblech> ?eval chr(0123)

[19:08] <evalbot_7539> Error:  unexpected ( or "c" expecting program 0100 is not octal in perl6 any more, use 0o100 instead. 

[19:08] <iblech> ?eval chr(0o123)

[19:08] <evalbot_7539> 'S' 

[19:08] <iblech> ?eval chr(0d123)

[19:08] <evalbot_7539> '{' 

[19:08] <Khisanth> iblech: hmm well I am expecting p5 behavior there

[19:09] <geoffb> ?eval "{ 0d12 }3"

[19:09] <evalbot_7539> '123' 

[19:09] <geoffb> ?eval "{ chr(12) }3"

[19:09] <evalbot_7539> '3' 

[19:10] <geoffb> ?eval "{ qq{\012} }3"

[19:10] <evalbot_7539> '3' 

[19:10] <iblech> geoffb: Thought so too, but no! {...} in double-quoted strings starts a closure which will later be interpolated. \012 in normal expression context evaluates to a reference to 12. (But references to scalars shouldn't automatically deref, but that's another topic.)

[19:10] <geoffb> TIMTOWTDI, and they all suck

[19:11] <geoffb> iblech, sure, but "{ ... }" should not result in the { } being in the output string

[19:11] <iblech> geoffb: Oh, right!

[19:11] <iblech> geoffb: Write a test please? :)

[19:12] <geoffb> iblech, not right now.  I'm having severe problems concentrating on $work as it is.

[19:12] <geoffb> -Ofun it is most definitely NOT

[19:12] <iblech> geoffb: Sure, I'll write it then

[19:12] <geoffb> thx muchly

[19:12] <iblech> np

[19:19] <svnbot6> r7540 | iblech++ | New t/syntax/parsing_braces_in_strings.t: "{\01;42}" should eq "42", not "{;42}".

[19:20] <autrijus> okay, got two topics for Euro Oscon lightning talk

[19:20] <autrijus> 1. "Visual Basic rocks!"

[19:20] <autrijus> 2. "Larry was a mariner"

[19:21] <geoffb> 3. "Autrijus is punchy!"

[19:21] <autrijus> :)

[19:22] <dduncan> go for it!

[19:22] <dduncan> while you're at it, demonstrate how fun it is to implement perl 6 in visual basic

[19:22] <autrijus> dduncan: good, I'll do that.

[19:22] <autrijus> the 2. would be a full adaptation/parody of "Earendil was a mariner"... easily my fav poem

[19:23] <autrijus> and allison has agreed to do it with me :)

[19:23] <dduncan> and fun is had by all

[19:24] <autrijus> verily.

[19:24] <dduncan> aye

[19:24] <geoffb> :-)

[19:26] <svnbot6> r7541 | iblech++ | Pugs.Pretty: Don't output evil bytes in .perlifications. Instead, use

[19:26] <svnbot6> r7541 | iblech++ | escapes (\t, \n, etc.) or {...}: "\123".perl eq '"{chr 123}"'.

[19:32] <svnbot6> r7542 | iblech++ | PIL2JS: Prelude::JS::Operators: Implemented +| +& +^ +< +>.

[19:49] <stevan> autrijus: ping

[19:51] <autrijus> stevan: pong. I need another 3 min or so to wax poetry on the flattery of VB

[19:51] <autrijus> after that I'll be free

[19:52] <autrijus> (so you can type ahead)

[19:52] <stevan> autrijus: ok,.. since it is such a good cause :)

[19:52] <autrijus> of course!

[19:52] <Juerd> geoffb: The lag is huge.

[19:53] <Juerd> geoffb: But there are also many things that still need decisions

[19:53] <Juerd> geoffb: Since some of these yet unmade decisions are very important, it'd probably be a waste of time updating the bible as much as needed, before they are made.

[19:55] <svnbot6> r7543 | iblech++ | * Makefile.PL: Unbreak "make haddock" (mkdir dist/doc/html can't work if !-d dist/doc).

[19:55] <svnbot6> r7543 | iblech++ | * PIL2JS: PIL2JS.pm: Use File::Temp for greater security (we don't want Pugs to

[19:55] <svnbot6> r7543 | iblech++ |   be listed on securitytracker).

[19:57] <geoffb> Juerd, important as in "Will change a whole bunch of existing things" or as in "Will add a lot"?

[19:57] <geoffb> Because if the former, updating now would not be a waste . . . 

[19:57] <Juerd> will change few but omnipresent things :)

[19:57] <geoffb> er,

[19:57] <Juerd> latter :)

[19:57] <geoffb> "if the latter"

[19:57] <geoffb> bah

[19:57] <geoffb> hmmm

[19:57] <Juerd> As time and projects progress, the more subtle issues need to be solved

[19:58] <Juerd> Often, it turns out that a change has impact in several areas

[19:58] <Juerd> Still I think the design is very solid, as the basic ground rules have changed very little over time.

[19:58] <autrijus> stevan: done.

[19:58] <Juerd> Most of the big changes are syntactic.

[19:58] * eric256 thought TSa bowed out of the mailing list? ;)

[19:59] <stevan> autrijus: excellent

[19:59] <stevan> so, eigenclasses

[19:59] <geoffb> Fair enough.  But I'm feeling partial deadlock in the P6 aether, and that's disturbing the force . . . to mix several metaphors

[19:59] <Juerd> eric256: I thought so too, but in the same message he continued discussion

[19:59] <svnbot6> r7544 | iblech++ | * Pugs.AST.Internals: Pairs are stringified as "$key\t$value" now, per

[19:59] <svnbot6> r7544 | iblech++ |   http://www.nntp.perl.org/group/perl.perl6.language/23224:

[19:59] <svnbot6> r7544 | iblech++ |     Also that a pair ($x => $y) stringifies to "$x\t$y"

[19:59] <svnbot6> r7544 | iblech++ | * t/data_types/pair.t: unTODOed several tests.

[19:59] <stevan> autrijus: in order to have inheritable class methods, we basically need to create an eigenclass for each class 

[19:59] <Juerd> eric256: So perhaps he was using a different metaphor, and we interpreted his words in a way that suited us best ;)

[20:00] <eric256> the discussions on p6l seem to be gonig in circles, i can't follow them to save my life. ;)

[20:00] <stevan> because they need to be in a parallel hierarchy to the normal classes 

[20:00] <eric256> Juerd...could definitly be, i hadn't thought of that.  languages barries often do crop up in odd places ;)

[20:00] <autrijus> yes.

[20:00] <stevan> all attempts to create them "on demand" lead to much silliness in terms of trying to keep the inhieritence in order

[20:00] <Juerd> geoffb: We need a clear definition of the dark side in order to avoid it, and that has been lacking :)

[20:01] <geoffb> eric256, the circular discussions are part of the partial deadlock I referred to

[20:01] <stevan> however, this gets a little messy when you introduce subclasses of Class

[20:01] <Juerd> eric256: Some things go in circles, but those things are discussed mostly by the same people again and again.

[20:01] <stevan> for reasons we discussed before

[20:01] <eric256> need like czar of the list...this is done, this is the answer.  shut up and move on. ;)  

[20:02] <stevan> however, I think that behavior can be specified in a sane way

[20:02] <Juerd> eric256: There are still important new arguments for several sides of the diamond, so I want to encourage continuing trying to figure things out.

[20:02] <Juerd> stevan: You must be careful not to leak too much of the metamodel back into the thing it is a meta above (around)

[20:02] <eric256> yea it just gets soo confused. then people go back to earlier proposals... well if this works then great.  from the outside it looks an awful lot like a townhall meeting

[20:03] <autrijus> stevan: so you are still thinking ondemand creation?

[20:03] <stevan> so the questions I have are 1) does this all sound good (yes, I need validation :) and 2) should all object instances get an eigenclass? or should those be on demand 

[20:03] <Juerd> stevan: Sometimes it can be good to draw a line. Do we *need* a certain feature, or is it just nice to have. If the latter, confusion is a good reason to keep it out.

[20:03] <eric256> lots of posturing and side arguments that have little to do with the actual topic ;)  if it works then i'll just watch blessfully ;)

[20:03] <autrijus> stevan: I think all class objects want an eigenclass no matter they have class meth or not -- larry said as much in A12

[20:04] <stevan> Juerd: I have adopted a "everything and the kitchen sink" policy on the meta-model, however, this does not mean we expose it all

[20:04] <autrijus> stevan: for objects I'm less sure. I _think_ we can get by of creating them on demand if we can figure out a sane semantics; but then, it should behave as-if they are created a priori, no?

[20:04] <Juerd> eric256: I agree that more decisions need to be made. Perhaps Larry should give up some control if he doesn't have the time to do this himself.

[20:04] <stevan> autrijus: they don't inherit,.. so on demand is simple 

[20:05] <eric256> even if they are the wrong decisions they can always be changed in a month....but them i'm a progress over planning kind of guy most the time

[20:05] <stevan> however, this just means I need to explicitly code it to only create for a class, and for a instance be on demand

[20:05] <Juerd> eric256: I have to add to that, in all honesty, that I say this partially because I think some of the recent decisions that _have_ been made have disturbed me greatly.

[20:05] <Juerd> eric256: It's just much easier to work with bricks than with playdough.

[20:06] <stevan> autrijus: explicit eigenclass creation fits nicely into Class::CREATE  

[20:06] <stevan> since that is where other magic happens too

[20:06] <Juerd> (re progress over planning)

[20:06] <autrijus> stevan: right, and I think it's not a big problem, as only the Class Class has eager eigencreation by default

[20:07] <autrijus> stevan: so it's contained in one place

[20:07] <autrijus> as you said

[20:07] <eric256> Juerd: yea. it seems like  until (done) { decide; test_on_pugs; re evalutate decesion based on experience rather than theory; }

[20:07] <stevan> excellent :)

[20:07] <stevan> I will add that in this week then

[20:07] <stevan> how goes the haskellification of the mm?

[20:08] <Juerd> eric256: Perhaps a feature(idea) freeze would be in order

[20:08] <autrijus> stevan: release and flu are both past, so that is the next thing on my plate tomorrow

[20:09] <Juerd> Work out the current issues first, even if we have ideas that might solve multiple problems at once (because really, most ideas don't, even though they are thought to do)

[20:09] <autrijus> stevan: though demagicalizing pairs is important too (but that can fit in with container haskellification)

[20:09] <Juerd> I have some ideas that I don't release to p6l, because the list is too distracted already

[20:09] <Juerd> But sometimes I feel forced to do so, because a certain item has come up

[20:09] <autrijus> ...I confess I only read p6l thru weekly summary.

[20:10] <autrijus> (or on specific threads.)

[20:10] <autrijus> but a daily scan proved to be very costly.

[20:10] <eric256> Juerd: or at least a summary of all positions inovled...its doubly complex because through a thread peopls ideas evolve...makes it near impossible sometimes

[20:10] <Juerd> I have one very controversial idea that I fear I might have to release soon :)

[20:10] <geoffb> autrijus, I second that

[20:10] <stevan> I third that

[20:10] <autrijus> nothingmuch is not here, otherwise he'd forth that

[20:10] <Juerd> eric256: Yes

[20:10] <eric256> lol

[20:11] <geoffb> heh

[20:11] <Juerd> Which brings us to: the summaries 

[20:11] <geoffb> So it does

[20:11] <Juerd> I think the summaries too often just explain what is discussed rather than the different sides

[20:11] <autrijus> yeah. perl.com no longer sponsors them?

[20:11] <Juerd> They are abstracts rather than summaries, sometimes.

[20:12] <geoffb> Juerd, too true, especially of late

[20:12] <Juerd> To really know what the different possibilities are, you still need to read entire threads

[20:12] <Juerd> I can understand this for some of the highly theoretical threads

[20:12] <eric256> i think it realy just comes down to needing someone to make decesion.  i mean there will always be people that disagree with how things are being done. the current discussions wont end until someone just gives up. ;)

[20:12] <autrijus> eric256: exactly.

[20:13] <autrijus> normally $Larry, or damian, plays such an arbiter

[20:13] <Juerd> Does that mean we don't have normality at this moment? :)

[20:13] <autrijus> it is implied, yes.

[20:14] * eric256 keeps forgeting its snowing till he looks over his shoulder. hehe

[20:14] <Juerd> (z z 9 pl. z a :))

[20:14] <autrijus> stevan: so, eigeness. is there something on the user level (i.e. in t/) that you'd like to add still?

[20:14] <autrijus> stevan: because I'd like to quickcheck, or at least hunit, it first

[20:15] <stevan> autrijus: something to add?

[20:15] <autrijus> stevan: as in, universe-side behaviour changes for the eigeness model

[20:15] <autrijus> instead of metaverse-side

[20:16] <autrijus> or is 36 complete?

[20:16] <stevan> autrijus: oh no,.. it is horribly broken at the moment

[20:16] <stevan> it keeps creating eigenclasses for each method

[20:16] <autrijus> whew. good :)

[20:16] <autrijus> indeed

[20:16] <Juerd> Why is evalbot reconnecting all the time?

[20:17] <autrijus> stevan: though... that is not in the test itself

[20:17] <geoffb> Juerd, rebuilds after each commit,

[20:17] <stevan> I had to back up and do a Mini-MetaModel version, to get me head around all details 

[20:17] <iblech> Juerd: To make the revnum easily visible

[20:17] <geoffb> and the revnum is part of the nixk

[20:17] <geoffb> er nick

[20:17] <autrijus> stevan: ok, that sounds sane.

[20:17] <Juerd> geoffb, iblech: ah

[20:17] <geoffb> I suppose it could just change nick rather than reconnecting

[20:17] <autrijus> stevan: I'll start modeling pneuma again tomorrow and let you know if I run into anything bad.

[20:17] <Juerd> Is there no way to keep the socket?

[20:17] <Juerd> As irssi does?

[20:17] <Juerd> (See irssi's source code for /upgrade)

[20:18] <stevan> autrijus: 36 needs more tests

[20:18] <Juerd> Restart with a newer pugs, but keep the socket around, then do /nick)

[20:18] <autrijus> stevan: *nod*

[20:18] <Juerd> That's less distracting on IRC and keeps attention from irc opers away from feather :)

[20:18] <stevan> I will probably port the ones from the Mini_MetaModel_w_Eigenclasses 

[20:18] <Juerd> Who maintains the bot?

[20:18] <stevan> and add some more too

[20:18] <iblech> Juerd: The problem is that there doesn't exist any IPC currently in Pugs

[20:18] <iblech> Juerd: luqui *IIRC*

[20:19] <autrijus> stevan: hm, or do you think I can start modeling MiniMetaModel_w_eigenclasses first?

[20:19] <Juerd> iblech: Not needed... All you really need is a low level exec and a way to regain a handle based on fd to make it happen

[20:19] <Juerd> iblech: Or... A very simple irc bouncer :)

[20:19] <Juerd> (Why do I think of the hard solutions before I think of the very easy ones?)

[20:20] * stevan just remembered another issue 

[20:20] <eric256> couldn't the IRC bot just call an external script to run snippets? 

[20:20] <iblech> Juerd: Yep, but %*SIG<USR1> = { my $rev = get_cur_rev(); $bot.nick($rev) } would probably be easiest :)

[20:20] <Juerd> iblech: Surely it has to actually RUN on that revision?

[20:20] <stevan> autrijus: the eigenclasses tend to make $?CLASS and $?PACKAGE a little weird,.. however, i think that can be easily overcome

[20:20] <Juerd> iblech: Or is ?eval not in synch with it? :)

[20:21] <iblech> eric256: It does. evalbot.p6 (IRC) calls evalhelper.p5 (resource limits), which calls pugs

[20:21] <stevan> autrijus: I would stick with pneuma, etc... the eigenclass change is fairly minimal

[20:21] <autrijus> stevan: okay, good

[20:21] <eric256> lol. so no need for the actual bot to be on the newest version at all

[20:21] <Juerd> Ohh

[20:21] <Juerd> Then yes, a /nick would suffice.

[20:21] <autrijus> stevan: I think the "allomorphism" mentioned in A12 already would calse some ambiguity with $?CLASS

[20:22] <iblech> eric256: Yep, the revnum is purely for informational purposes. Even if the bot did not restart, ?eval would still run the latest Pugs

[20:22] <autrijus> stevan: but as long as we make sure that each eClass for iClass reflect back to the iClass and not the cClass for the iClass, it should be fine

[20:22] <stevan> :D

[20:22] <stevan> iClass connected to the eClass the eClass connected to the cClass ...

[20:23] <eric256> is the interface portion of IO pretty nailed down and your jsut working on the implementation?

[20:23] <stevan> autrijus: once the eigenclasses are in, I will be concentrating on the MOP document, I expect that will lead to many p6l posts

[20:24] <autrijus> stevan: good. I think we should codename 6.28.0 "stevan"

[20:24] <pdcawley_> What's local's name now?

[20:24] * stevan is not sure that is a good idea :/

[20:25] <autrijus> stevan: probably not, but entertaining to think about

[20:25] <autrijus> pdcawley_: temp

[20:25] <pdcawley_> Good oh.

[20:25] * stevan codenames all his projects "autrijus"

[20:25] * pdcawley_ contemplates 'my method ARRAY::attributes {...}' 

[20:26] <stevan> lexical singleton methods?

[20:26] <pdcawley_> Well, not even singleton methods reallly.

[20:26] <pdcawley_> Just making sure that role helper methods never escape the role's scope.

[20:27] <pdcawley_> I suppose my multi(Scalar $thing:) {...} would do the job as well, but I kind of like the method version.

[20:28] <pdcawley_> or my multi method attributes(Scalar $thing) {...} or whatever it's supposed to be.

[20:28] * stevan slowly backs away from pdcawley_ 

[20:28] <pdcawley_> What?

[20:28] <stevan> just teasing 

[20:29] <autrijus> pdcawley_: "my multi" is canonical; declaring a method for a class can be done with

[20:29] <stevan> the method approach is interesting,.. however, I think it would likely be just sugar for the multi approach

[20:29] <autrijus> class Foo is reopened

[20:29] <autrijus> but that can't be done lexically

[20:29] <autrijus> so stick with multis.

[20:29] * pdcawley_ points out that the Smalltalk/ruby hacker in him would just bung the helper methods on the classes in question and assume that he'll deal with any problems when they arise.

[20:30] <autrijus> pdcawley_: but lexically?

[20:30] <pdcawley_> Nah, wouldn't bother with the lexically.

[20:30] <autrijus> okay, dynamically, sure!

[20:30] * stevan points to the LISP hacker in him which would just lexically redfined the method :)

[20:30] <pdcawley_> The 'hang on, don't let anything have a wider scope than is absolutely necessary' part of me would prefer the lexical version.

[20:31] <pdcawley_> stevan: Exactly.

[20:31] <autrijus> I still can't see anything wrong with "my multi".

[20:31] <stevan> (+ + lexical redefinintion of method)

[20:31] * pdcawley_ doesn't like multis that don't dispatch on multiple arguments.

[20:31] <stevan> autrijus: lexical redef is sexier

[20:31] <pdcawley_> And... what Stevan said.

[20:31] * stevan declares Perl 6 the New LISP

[20:32] <stevan> of course that is continginent on nothingmuch's Exceptuations being approved

[20:32] <stevan> which are very much like LISP conditions 

[20:32] <iblech> putter, fglock__: FYI, new PIL-Run smoke online.

[20:33] <autrijus> my method attributes (Scalar $thing:) { ... }

[20:33] <autrijus> so you'd like that?

[20:33] * pdcawley_ wonders if he should be feeling guilty about TSa's departure.

[20:33] <autrijus> hm.

[20:33] <stevan> pdcawley_: from what I hear, he left becuase of the summaries

[20:33] <iblech> Need to sleep now, night all and happy -Ofunning! :)

[20:33] <stevan> ;)

[20:33] <theorbtwo> TSa departed?

[20:33] <autrijus> iblech++ # woot!

[20:33] <theorbtwo> Oh, what's the subscribe address for the summeries?

[20:33] <pdcawley_> autrijus: Not really, I want to lexically declare a method on another class.

[20:33] <autrijus> pdcawley_: from what I hear, he is not really left :)

[20:34] <autrijus> pdcawley_: "Scalar" is that class

[20:34] <autrijus> my method blah (OtherClass $self:) { ... }

[20:34] <pdcawley_> Then surely my method Scalar::attributes($self:) {...} makes more sense.

[20:35] <stevan> should it be my or local?

[20:35] <pdcawley_> But your syntax has a pleasant weirdness to it...

[20:35] <autrijus> I contend I agree.

[20:35] <stevan> or temp or whatever local is now

[20:35] <autrijus> stevan: you can use temp too, but they mean different things.

[20:36] <stevan> ah

[20:36] <pdcawley_> stevan: my I think. temp scoping would mean it could escape to method called on other objects that don't do the current role.

[20:37] <fglock__> iblech++

[20:37] <wolverian> hmm, I'm still confused towards item/list context versus type context

[20:37] <eric256> why don't they call it local instead of temp or my? ;)

[20:38] <autrijus> wolverian: item/list contexts each carry a type

[20:38] <autrijus> only void is typeless

[20:38] <autrijus> ?eval want

[20:38] <evalbot_7544> "Scalar (Any), LValue" 

[20:38] <autrijus> ?eval ~want

[20:38] <evalbot_7544> "Scalar (Any), LValue" 

[20:38] <autrijus> ?eval list want

[20:38] <evalbot_7544> "Scalar (Any), LValue" 

[20:38] <autrijus> hrmph.

[20:38] * autrijus smacks evalbot

[20:38] <wolverian> autrijus, ohhh. that makes more sense. is want()'s return specced?

[20:39] <autrijus> wolverian: yes, S06.

[20:39] <wolverian> thanks :)

[20:40] <wolverian> oh. hm. how do I inspect what _type_ is wanted?

[20:40] <wolverian> (or is that possible?)

[20:40] <wolverian> or is that carried by the context information returned by want(), as shown by evalbot?

[20:44] <wolverian> hmm. pugs's want() does not carry type information. right.

[20:44] <wolverian> but it should.

[20:45] <wolverian> things are clearer now. sorry for being so slow. :)

[20:46] <autrijus> er it does

[20:46] <wolverian> oh

[20:47] <wolverian> except it's always Any

[20:47] <autrijus> mm, weird.

[20:47] * pdcawley_ giggles at a post by luqui in which he takes the monte carlo approach to spelling by using 'affect' and 'effect' as nouns meaning the same thing. Presumably the theory being  that at least one of 'em must be correct.

[20:48] <wolverian> oh, neat; S06 says gather is lazy.

[20:48] <wolverian> I didn't realise that's official. :)

[20:49] <eric256> hey sometimes its hard to rememerb which is wich, and 50% wrong is better than 100% wrong ;)

[20:51] * pdcawley_ decides not to make a crack about it in the summary.

[20:59] <Juerd> wolverian: gather shouldn't be lazy by default!

[20:59] <Juerd> wolverian: only if what's inside is pure, it can be

[20:59] <Juerd> But this has been mentioned before

[21:06] <cognominal> trying to install hs-plugins... with 'sh configure', I get  sh ./configure

[21:06] <cognominal> configure: error: cannot find install-sh or install.sh in . ./.. ./../..

[21:06] <cognominal> what am I doing wrong? I run mandriva cooker.

[21:07] <cognominal> do I miss some magic  invocation before 'sh configure' ?

[21:10] <autrijus> cognominal: ask #haskell dons?

[21:11] <cognominal> oki

[21:13] <autrijus> it's dons not don :)

[21:13] <autrijus> afaik he is in sydney, not sicily

[21:17] <eric256> will use lib be builtin? or will i t be a module?

[21:21] <autrijus> eric256: I think a module for sure, just like in pugs now

[21:22] <eric256> just curious because some examples don't work because they can't find the lib module

[21:24] <autrijus> hm, you need to run with -Iblib6/lib or install pugs

[21:28] <cognominal> hum, I am still missing a step I get "ghc-pkg: cannot find package plugins" when running Makefile.PL

[21:28] <autrijus> cognominal: "make register"

[21:29] <cognominal> I tried that too

[21:29] <cognominal> /usr/bin/perl5.8.7 -Iinc util/ghc_setup.pl register --prefix=

[21:29] <cognominal> *** Running: ./Setup register

[21:29] <cognominal> No description file found, please create a cabal-formatted description file with the name <pkgname>.cabal

[21:31] <cognominal> I see a Pugs.cabal.in though

[21:32] <autrijus> oh hm, did you run Makefile.PL?

[21:32] <autrijus> and "make"?

[21:32] <autrijus> I mean "register" in the hs-plugins dir

[21:32] <autrijus> not pugs

[21:33] <wolverian> Juerd, oh, well, S06 said that.

[21:35] <eric256> i had been staying away from make install....is it safe to use now?

[21:36] <eric256> also...is there going to be an environment variable to change the lib in perl6? seems like a pretty common need.

[21:37] <geoffb> make install seems to be working decently as of this release, eric256 

[21:37] <geoffb> It's not perfect, but it's also not deadly, or entire-disk-spamming

[21:38] <eric256> okay ..../me crosses his fingers

[21:42] <geoffb> [OT] What's the fastest Perl 5 data structure serializer that produces textual serializations?

[21:42] <dduncan> something in XS probably

[21:42] <dduncan> when you say 'textual', do you mean 'human readable'?

[21:42] <autrijus> geoffb: svdump?

[21:43] <autrijus> aka Devel::Peek

[21:43] <geoffb> dduncan, yes, and diff-friendly

[21:43] <geoffb> autrijus, hmmm, OK.  Does it have a thaw?

[21:43] <geoffb> Or is it freeze-only?

[21:44] <autrijus> I don't think it has a thaw

[21:44] <dduncan> if the output is valid perl code, it can thaw itself

[21:44] <autrijus> Data::Dumper::Streamer?

[21:44] <autrijus> I'm not sure you'll have to bench

[21:44] <mugwump> Data::Dumper is pretty fast compared to, eg, YAML

[21:44] <geoffb> OK, just figured there was a pretty good chance someone here might have already done so on one of their other projects.  :-)

[21:45] <eric256> hmmm are there any conditions that evaluate the block before the conditional?  

[21:45] <geoffb> mugwump, I thought that was because Perl 5 still has the lamest YAML implementation

[21:45] <mugwump> no comment

[21:45] <eric256> so that $new = $lottery_numbers.pick() until $new == none(@your_numbers); would DWIM

[21:48] <svnbot6> r7545 | stevan++ | Perl6::MetaModel -

[21:48] <svnbot6> r7545 | stevan++ | * fixed the current eigenclasses so they don't keep creating 

[21:48] <svnbot6> r7545 | stevan++ |   eigenclasses and only create one per object (on demand)

[21:48] <svnbot6> r7545 | stevan++ |     - added some tests for this

[21:48] <eric256> anyone?

[21:52] <cognominal> autrijus, why don't you give  ftp://ftp.cse.unsw.edu.au/pub/users/dons/hs-plugins/hs-plugins-0.9.10.tar.gz as the place to get hs-plugins?

[21:55] <autrijus> cognominal: I don't know, maybe it was not released then? if it works for you, please go ahead and change things

[21:56] <rafl> gaal: ping

[21:57] <rafl> gaal: Fresh packages for you.

[21:59] <eric256> in examples/nested_loops/functional.pl  the example used a ==> which doesn't work yet, but it is easily rewritten to workd

[22:00] <svnbot6> r7546 | eric256++ | Changed so that the same number can't be picked twice.

[22:00] <eric256> should i just drop a comment in with the old version?  i think i'm not being true to his goal by fixing it. lol

[22:01] <autrijus> drop a comment in with the old version.

[22:01] <eric256> k. just thought working examples are better than *right* examples...

[22:04] <rafl> How about merging smoker.yml and config.yml?

[22:04] <autrijus> worksforme.

[22:04] <autrijus> gaal: sanity-p?

[22:07] <eric256> are methods multi methods by default?

[22:07] <autrijus> no I don't think so

[22:07] <wolverian> ..and that sucks 

[22:08] <eric256> wolverian...you mean about multi methods?

[22:09] <wolverian> yes

[22:09] <wolverian> I should say that I _think_ it sucks. I'm by no means certain. 

[22:09] <eric256> i dunno. its not too bad...though you should be able to say that all methods in the class you are creating are going to be multi

[22:10] <eric256> class x { use multi::method;  method x () { }; method x(Int x) { } };

[22:10] <eric256> probably will be easy to add as a macro....are macros lexicaly bound?...food for though

[22:10] <eric256> thought even

[22:11] <autrijus> macros can be lexically bound yes.

[22:11] <svnbot6> r7547 | eric256++ | Fixed up some changes in syntax so that the examples all work.  Tweaked functional.pm slightly for now to avoid errors because  of the lack of ==>

[22:11] <eric256> cool so a module like the one i just said would be easily made with macros...right?

[22:11] <autrijus> eric256++ eric256++

[22:11] <autrijus> eric256: yes.

[22:12] <eric256> sweet...do macros exist in pugs yet?

[22:12] <autrijus> yes, the source-filter form

[22:12] <autrijus> see t/macros

[22:12] <eric256> cool. thanks

[22:13] <eric256> submethod trace( : Str $msg) {

[22:14] <eric256> does that mean something different than

[22:14] <eric256> submethod trace( Str $msg) {

[22:16] <autrijus> should be the same thing.

[22:16] <autrijus> (I think.)

[22:16] <eric256> hehe. first one errors.

[22:16] <eric256> ?eval submethod trace(: Str $msg) {}

[22:16] <evalbot_7547> Error:  unexpected "S" expecting "?", "*", "+", "++" or parameter name 

[22:16] <autrijus> oh. hm, leading colon in signatures.

[22:17] <autrijus> ?eval sub x (:Str $x)

[22:17] <evalbot_7547> Error:  unexpected end of input expecting bare trait, trait or block 

[22:17] <autrijus> ?eval sub x (:Str $x) {}

[22:17] <evalbot_7547> undef 

[22:17] <autrijus> ?eval submethod x (:Str $x) {}

[22:17] <evalbot_7547> undef 

[22:17] <autrijus> ?eval submethod x (: Str $x) {}

[22:17] <evalbot_7547> Error:  unexpected "S" expecting "?", "*", "+", "++" or parameter name 

[22:17] <eric256> spacing is making it mad?

[22:18] <autrijus> apparnetly

[22:18] <eric256> hehe. alright. i'll just drop the : for now.  unless that causes something weird?

[22:19] <autrijus> no, just drop it I think

[22:19] <eric256> done

[22:23] <svnbot6> r7548 | eric256++ | Fixed function signature.

[22:28] <geoffb> .oO( Spending an hour or two refactoring is very calming . . . )

[22:32] <eric256> any reason $x ~~ s:perl5:g/\s*//; would hang?

[22:33] <autrijus> er, yes.

[22:33] <eric256> hmmm. well its stupid...but hanging seems a bit overkill

[22:33] <autrijus> very true

[22:33] <eric256> lol

[22:33] <geoffb> PCRE-ism?

[22:34] <autrijus> no, bad handling in Pugs.Prim.Match line 115

[22:34] <eric256> hehe. part of a QOTW...and thats the solution given...suprised they didn't realise what broke it..

[22:35] <autrijus> I guess zero width match needs special care

[22:35] <autrijus> my brain is kind of fried from flu to do this now. I'll add a note.

[22:35] <autrijus> eric256: turn this into a test please?

[22:35] <autrijus> let it fail and segfault.

[22:36] <autrijus> er, hm, it hangs instead

[22:36] <autrijus> (it segfaults here)

[22:36] <geoffb> .oO( My $work desire for Perl 6: An HTML::Mason derivative that has decently fast component calls.  Grrr. )

[22:38] <eric256> never segfaults here

[22:39] <eric256> lemme know what you want me to do..

[22:39] <autrijus> I'm thinking

[22:39] <autrijus> still turn this into a test.

[22:39] <autrijus> I'll fix now

[22:40] <eric256> thanks. and sorry for finding it ;)

[22:40] <autrijus> no, it was very important :)

[22:40] <autrijus> I wonder why it was not uncovered earlier.

[22:40] <eric256> no one was stupid enough to code it that way

[22:40] <eric256> lol

[22:40] <geoffb> perhaps we need more stupidity check tests.

[22:41] <geoffb> Parsing tests for empty strings, empty blocks, extra punctuation that "shouldn't" make a difference, and so on

[22:41] <autrijus> that reads QuickCheck, but yes.

[22:42] <geoffb> OK, sure, but also stuff like eric256 found: stuff that could cause bad behavior, but that we should gracefully detect.

[22:42] <geoffb> Tests that check if we have a recursion limit, for instance

[22:43] <autrijus> *nod*

[22:43] <autrijus> okay, fixed, I think.

[22:44] <autrijus> eric256: test in t/rules/s_perl5.t?

[22:47] <eric256> how do i phrase it so it doesn't hang the test if it is still broken?

[22:47] <autrijus> you don't, as I've fixed the bug.

[22:48] <eric256> ohh. okay. ;)

[22:50] <rafl> pugs 6.2.10 is being uploaded to Debian now. Should be in by tomorrow evening.

[22:50] <autrijus> rafl++ rafl++ rafl++

[22:51] <rafl> It was slower than I wanted, though. Made a mistake in putting the haskell lib into /usr/lib/haskell-packages instead of $prefix/lib. :-)

[22:51] <autrijus> if it works it works :)

[22:51] <autrijus> have you tried compiling test.hs?

[22:51] <autrijus> import Pugs

[22:51] <autrijus> main = pugsMain

[22:51] <autrijus> with

[22:51] <autrijus> ghc --make test.hs

[22:51] <geoffb> rafl++ # MMmmmm, packages . . . .

[22:52] <cognominal> hi, Ymmv :)

[22:52] <autrijus> greetings, variadic one :)

[22:52] <svnbot6> r7549 | eric256++ | Fixed more typos in some examples so they now work.

[22:52] <svnbot6> r7550 | eric256++ | Added test for s:perl5:g/\s*//;

[22:53] <meppl> difficult to pronounce "ymmc"

[22:53] <Khisanth> Your _ _ variadic?

[22:53] <geoffb> Your Mileage May Vary

[22:53] * Ymmv is lunatic, so YMMV with me :)

[22:54] <autrijus> good, I think you'll fit in here :)

[22:54] <geoffb> He's crazy, hand him the committer bit . . . 

[22:55] <rafl> autrijus: Some unresolved symbols. Some to altdata. -package altdata fixes them. This remains: /usr/lib/haskell-packages/ghc6/lib/Pugs-6.2.10/libHSPugs-6.2.10.a(Haskell.o): In function `s2kg0_dflt':

[22:55] <rafl> : undefined reference to `SystemziEvalziHaskell_evalzu_closure'

[22:56] <rafl> /usr/lib/haskell-packages/ghc6/lib/Pugs-6.2.10/libHSPugs-6.2.10.a(Haskell.o): In function `__stginit_PugsziEmbedziHaskell_':

[22:56] <rafl> : undefined reference to `__stginit_SystemziEval_'

[22:56] <rafl> /usr/lib/haskell-packages/ghc6/lib/Pugs-6.2.10/libHSPugs-6.2.10.a(Haskell.o):(.rodata+0x3c): undefined reference to `SystemziEvalziHaskell_evalzu_closure'

[22:56] * PerlJam patiently waits for Pm to check in his shift-reduce parse.

[22:56] <autrijus> -package plugins?

[22:56] <PerlJam> er, parser

[22:56] <autrijus> PerlJam: I tried it again in the sketch.

[22:57] <rafl> autrijus: Fixes it. The debian package isn't compliled with hs-plugins, though. It's still not in the archive. :-(

[22:57] <PerlJam> yeah, I saw.  He's not keen on releasing not-quite-finished work is he?

[22:57] <autrijus> k, so no worries.

[22:57] <svnbot6> r7551 | autrijus++ | * saner detection for zero-width matches on s:g to kill

[22:57] <svnbot6> r7551 | autrijus++ |   the infinite loop as reported by eric256++.

[22:57] <svnbot6> r7552 | autrijus++ | * finalize Parrot embedding properly and let it flush

[22:57] <svnbot6> r7552 | autrijus++ |   correctly, by calling Parrot_exit at exit. leo++

[22:57] <eric256> ?eval my $x = "hello "; $x ~~ s:perl5:g/\s*//;

[22:57] <evalbot_7551> 6 

[22:57] <eric256> ?eval my $x = "hello "; $x ~~ s:perl5:g/\s+//;

[22:58] <evalbot_7551> 1 

[22:58] <autrijus> PerlJam: yeah... but I learned that he probably really has code behind it

[22:58] <eric256> lol. hmmm

[22:58] <autrijus> whenever I was not releasing something due to not-quite-finished, it means I don't have anything at all and all the throwaway prototypes has been thrown away :)

[22:58] <PerlJam> heh

[22:59] <autrijus> (sad but true)

[22:59] <eric256> there we go....tested 95% of examples and they all work now. ;)

[22:59] <PerlJam> Pm is probably similar.  In the time i've known him, there are things that take a long time to complete because he's thinking about them.  When he's finally thought enough to actually do something, the bulk of the code materializes within a day or two.

[22:59] <eric256> a couple long running ones or ones that needs perl6 rules didn't get tested in case someone else wants to look at those. ;)

[23:00] <autrijus> PerlJam: nod. but I try to chalk out Visio pictures and random irc/journal blabbering and proof-of-concept .hs code meanwhile :)

[23:00] <autrijus> thinking aloud vs thinking quietly, I think.

[23:00] <elmex> hmm.. i just read a ruby article... where a proposal was done: s/eigenclass/idiotclass/g

[23:00] <PerlJam> yep.

[23:01] <elmex> - meaning that naming it in anyway is ... weird

[23:01] <eric256> later

[23:02] <autrijus> er, no, 

[23:02] <autrijus> idioclass

[23:02] <autrijus> not idiotclass

[23:02] <autrijus> "idio", from german root, "self-standing"

[23:02] <elmex> oh

[23:02] <elmex> hm

[23:02] <svnbot6> r7553 | autrijus++ | * also perl5_free the p5 interpreter at global finalizer

[23:02] <svnbot6> r7553 | autrijus++ |   time.  Tested and works with both p5+parrot embedding. woot1

[23:02] <elmex> well, isn't it just an implementation detail ?

[23:03] <ingy_> autrijus: ...

[23:03] <ingy_> cpan-upload -mailto [email@hidden.address] -user INGY -password ******** Perl6-Bible-0.20.tar.gz

[23:03] <ingy_> Finished!

[23:03] <autrijus> but it has... weird connotations

[23:03] <autrijus> ingy_: thanks!

[23:03] <ingy_> autrijus: building the bible is all automated for me

[23:03] <PerlJam> autrijus: and an obvious misspelling that isn't too flattering.

[23:03] <autrijus> elmex: well, the ability to tack on arbitary methods on random objects without changing it class

[23:03] <autrijus> PerlJam: indeed

[23:03] <autrijus> elmex: is more than an implementation detail.

[23:03] <autrijus> you can't quite do that in perl5.

[23:03] <rafl> Is there any other Distribution than Debian that comes with pugs, btw?

[23:04] <elmex> autrijus: well, self/smalltalk/other languages have that ability without any special name

[23:04] <autrijus> elmex: right, I agree

[23:04] <ingy_> Unfortunately I got dragged into meetings, but just ping me here when an update is needed

[23:04] <autrijus> but I think the eigen name is fun.

[23:04] <ingy_> it only takes 5 minutes

[23:04] <autrijus> ingy_: cool!

[23:04] <autrijus> ingy++

[23:04] <ingy_> (+ 5 more for paranoia)

[23:05] <autrijus> ingy_: it's all automated, so what about a web form? :D

[23:05] <elmex> k :)

[23:05] <ingy_> sorry I can't seem to contribute more...

[23:05] <autrijus> ingy_: so I can channel it to svn.perl.org watcher

[23:05] <autrijus> ingy_: so whenever there is a checkin there is a new bible

[23:05] <autrijus> (checkin to perl6/AES/ that is)

[23:06] <ingy_> autrijus: how about whenever there is a checkin, it pings me here?

[23:06] <autrijus> ingy_: ok, deal

[23:06] <ingy_> It's *mostly* automated ;)

[23:06] <ingy_> I like to sanity check it

[23:06] <autrijus> I figured you were exaggerating a bit :)

[23:06] <autrijus> sanity checks are good.

[23:06] *** ingy_ is now known as ingy

[23:08] <ingy> My automatic module review and upload facility has human verification checks...

[23:08] <offby1> That sounds like Zippy:

[23:08] <autrijus> right, because ingy is also fully automated

[23:08] <offby1> Yow!  My AUTOMATIC MODULE REVIEW and UPLOAD FACILITY has HUMAN VERIFICATION CHECKS!

[23:08] <autrijus> yow.

[23:09] <mugwump> and ITS UNSTOPPABLE :)

[23:09] <ingy> I'm RELIGIOUS!!  I love a man with a HAIRPIECE!!  Equip me with 

[23:09] <ingy>               MISSILES!!

[23:10] * ingy channels purl

[23:11] <autrijus> for further enlightenment, consult ./pugs examples/network/http-client.p6

[23:11] <autrijus> ;)

[23:14] <rafl> Hi nomeata 

[23:14] <rafl> nomeata++; # for uploading the pugs package to Debian for me

[23:14] <cognominal> where is the Perl6::Bible control system where I can read the diffs?

[23:15] <cognominal> s/control/version control/

[23:18] <autrijus> cognominal: http://svn.perl.org/perl6/doc/trunk/

[23:19] <cognominal> thx

[23:19] <autrijus> np

[23:33] * leo__ started just 'make' after a 'svn up' of a few revs - the previous one was 'make unoptimized' - does that work?

[23:37] <leo__> never mind - I ^C-ed it anyway - taking too long ;-)

[23:37] <ingy> autrijus: do you msg anymore?

[23:38] <autrijus> ingy: you need to nickserv your nick register

[23:38] <autrijus> to msg anybody

[23:38] *** sleepster is now known as typester

[23:38] <autrijus> it's silly, so try msg me in magnet or ircnet

[23:39] <autrijus> leo__: it works, but "unoptimised" is faster

[23:39] <leo__> yep - thx

[23:58] <meppl> gute nacht

[23:58] <geoffb> night, meppl 

[23:59] <meppl> ;)

