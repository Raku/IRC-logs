[00:09] <rafl> clkao: ping

[00:17] <clkao> rafl: hi

[00:20] <clkao> rafl: 'sup?

[00:20] <rafl> clkao: An svk problem: svk sync -a works fine if one of the servers is down. svk pull -a dies after the first server that's not reachable. I think pull should behave the same way sync does.

[00:28] <clkao> uhm. n noted

[00:30] <rafl> clkao: Thank you.

[00:31] <clkao> rafl: you hack on js stuff as well?

[00:33] <rafl> clkao: Not much. I only fix things that are necessary to distribute it well.

[00:33] <clkao> ah ok

[01:05] <audreyt> stevan_: what's the diff between cls.isa and cls.is_a ?

[01:06] <stevan_> cls.is_a checks the class object, cls.isa checks against the name

[01:06] <audreyt> k

[01:06] <clkao> heard of the language "io" ?

[01:06] <buu> Help, I can feel my sanity slipping away!

[01:06] <audreyt> add it as comment in .pil?

[01:06] <audreyt> clkao: yes, minilang is under its influence

[01:07] <stevan_> audreyt: will do

[01:07] *** stevan_ is now known as stevan

[01:07] <audreyt> or rather, I designed the semantics when drugged by io

[01:07] <clkao> oh. someone is forking it. trying to chosoe between monotone, svk, and vesta

[01:07] <stevan> forking Io? why?

[01:07] <clkao> ""Moose" http://blurgle.blogspot.com/2005/12/moose.html

[01:07] <stevan> the language has no keywords at all.. it is highly flexible

[01:08] <audreyt> stevan: to add fork() capability to it? ;)

[01:08] <stevan> hmm

[01:08] <audreyt> http://blurgle.blogspot.com/2005/12/thats-it-i-give-up.html

[01:09] <clkao> lol

[01:09] <clkao> audreyt: right, so you made jsperl5 backend pass 99% of the tests, did you notice?

[01:09] <audreyt> sounds like something we can target

[01:09] <stevan> :)

[01:09] <audreyt> clkao: no I did not, wow that's impressive, what is the 1%?

[01:10] <clkao> the 1% is 'use'

[01:10] <clkao> you did, because all testse using "Test" are now skipped

[01:10] <audreyt> heh...

[01:10] <audreyt> ;)

[01:10] <audreyt> the namespace bug is still unresolved? why?

[01:10] <audreyt> I did grep and didn't find the bug

[01:10] <clkao> no. i thought you said you gave up last night?

[01:10] <clkao> er? 

[01:11] <clkao> ./pugs -CPugs -Iext/Test/lib /tmp/test.pl |grep Test::foo ?

[01:12] <audreyt> yeah

[01:12] <audreyt> I gave up jsperl5

[01:12] <audreyt> not that

[01:12] <audreyt> that is fixed

[01:13] <audreyt> communication error

[01:13] <audreyt> I gave up "use perl5:..." in js

[01:13] <audreyt> the grep shows nothing here

[01:14] <stevan> audreyt: any thoughts on next METHOD?

[01:14] <svnbot6> r8338 | stevan++ | PIL/Native/Bootstrap.pil - adding comment about difference between is_a() and isa()

[01:14] <svnbot6> r8337 | stevan++ | PIL/Native/Bootstrap.pil

[01:14] <svnbot6> r8337 | stevan++ | - added ::Class.isa() because it is different than ::Object.isa()

[01:14] <svnbot6> r8337 | stevan++ | t/pil/*

[01:14] <svnbot6> r8337 | stevan++ | - renamed metamodel.t to basic_object.t

[01:14] <svnbot6> r8337 | stevan++ | - added inheritence.t to test basic inheritance 

[01:15] <clkao> audreyt: oh ok. 

[01:15] <audreyt> stevan: it'd require exceptionhandling in minilang

[01:16] <audreyt> it's essentially a throw followed by a dispatcher loop level catch

[01:16] <stevan> audreyt: why not a lexical sub?

[01:16] <audreyt> you are allowed to call your next method and then still return?

[01:16] <clkao> i hate exception handling, and the people designing api for that

[01:16] <audreyt> i.e. postprocess it

[01:17] <clkao> it's never done right!

[01:17] <audreyt> clkao: I'm trying to avoid that

[01:17] <stevan> audreyt: well, that is what call() was supposed to do

[01:17] <clkao> https://bugzilla.mozilla.org/show_bug.cgi?id=321021

[01:17] <clkao> for your enjoyment

[01:17] <stevan> but I have been thinking that there is no need for call() and next METHOD

[01:17] <audreyt> self.call ?

[01:17] <svnbot6> r8339 | rafl++ |  r23721@ata:  rafl | 2005-12-19 19:04:25 +0100

[01:17] <svnbot6> r8339 | rafl++ |  * JIB::Repository:

[01:17] <svnbot6> r8339 | rafl++ |    + Don't use Math::Conbinatorics anymore

[01:17] <svnbot6> r8339 | rafl++ |    + Fixed doc typo

[01:17] <audreyt> oh?

[01:18] <stevan> audreyt: I would prefer self.next_method or something similar

[01:18] <audreyt> oh so just nomenclature

[01:18] <stevan> actually I dont like the self. part

[01:18] <audreyt> &?NEXT_METHOD

[01:18] <svnbot6> r8340 | rafl++ |  r23722@ata:  rafl | 2005-12-19 19:12:17 +0100

[01:18] <svnbot6> r8340 | rafl++ |  JIB:

[01:18] <svnbot6> r8340 | rafl++ |  * Removed usage of File::Spec in favour of Path::Class.

[01:18] <theorbtwo> Shouldn't it be a method on the current arglist?

[01:19] <stevan> &?NEXT_METHOD is good

[01:21] <svnbot6> r8341 | rafl++ |  r23723@ata:  rafl | 2005-12-19 19:12:40 +0100

[01:21] <svnbot6> r8341 | rafl++ |  * Some more comments on JIB::Repository.

[01:21] <svnbot6> r8342 | rafl++ |  r23724@ata:  rafl | 2005-12-19 19:29:02 +0100

[01:21] <svnbot6> r8342 | rafl++ |  * Fixed a warning in the JIB::Package test suite

[01:22] <clkao> what does jib mean?

[01:22] <rafl> JIB Is Brilliant.

[01:22] <clkao> brilliant.

[01:22] <rafl> It's the package manager for Perl 6.

[01:22] <clkao> can you promoise mean it won't suck?

[01:22] <rafl> Or it will be or I hope it will be or whatever..

[01:22] <audreyt> ...because .p6p would be too mundane :)

[01:23] <rafl> clkao: It's in early stages of development. Help us to make it suck less. :-)

[01:23] <clkao> nice try :)

[01:23] <clkao> i will take a look when i am bored

[01:23] <rafl> :-(

[01:24] <rafl> But well.. I'd like to see my svk problem fixed first, right..

[01:24] <clkao> heh

[01:24] <svnbot6> r8343 | rafl++ |  r23725@ata:  rafl | 2005-12-19 19:29:47 +0100

[01:24] <svnbot6> r8343 | rafl++ |  * Use Test::NoWarnings in t/020-JIB-Package.t

[01:25] <rafl> Hm. I always forget to use --lump when pushing lots of changes :-(

[01:25] <audreyt> that's fine, more karma for you

[01:25] <rafl> Is it counted somehow?

[01:25] <audreyt> if I thought --lump should be the default, I'd have made it the default ;)

[01:26] * clkao grins

[01:26] <audreyt> it's counted in an intangible fashion :)

[01:26] <rafl> At least my machines load is high enough so the push is pretty slow. So it doesn't kill svnbot6 like the last time..

[01:26] <clkao> it's also viral - people will know what cool version control system you use with this svn repository

[01:26] <stevan> audreyt: take a look at line 467 in http://svn.openfoundry.org/pugs/perl5/Perl6-MetaModel/lib/Perl6/MetaModel/Chaos/Unoptimized.pm

[01:26] <rafl> audreyt: How much karma gets me eternal fame?

[01:26] <audreyt> rafl: 1

[01:27] <clkao> when you go there you will change your name and perhaps gender

[01:27] <rafl> How's the karma count initialized?

[01:27] <clkao> s/go/get

[01:27] <clkao> are we nearly there yet?

[01:28] <audreyt> rafl: it's initialized at 1

[01:28] <audreyt> clkao: what's your lexical context? "we"? "there"? ;)

[01:28] <audreyt> stevan: got it, implementing

[01:28] <stevan> audreyt: excellent :)

[01:28] <clkao> that's for the compiler to figure out

[01:28] <stevan> :D

[01:28] <clkao> or prebranching

[01:28] <audreyt> the compiler complains that they are unbound

[01:29] <clkao> that's so 1970

[01:29] <audreyt> stevan: so you can call NEXT_METHOD with different args, right?

[01:30] <stevan> no

[01:30] <audreyt> stevan: and tail call optimization should apply there as well?

[01:30] <audreyt> no?

[01:30] <stevan> I dont think you should be able to

[01:30] <stevan> that was what call() was for

[01:30] <audreyt> why not?

[01:30] <stevan> hmm

[01:30] <stevan> well i guess you should be allowed to

[01:30] <audreyt> after all you can do that for &?SUB

[01:31] <audreyt> seems weird to disallow it for &?NEXT_METHOD

[01:31] <stevan> but it should default to the original @_

[01:31] <audreyt> (also I wonder if we should just rename it to &?NEXT)

[01:31] <svnbot6> r8344 | Darren_Duncan++ |  r1465@Darren-Duncans-Computer:  darrenduncan | 2005-12-20 17:29:56 -0800

[01:31] <svnbot6> r8344 | Darren_Duncan++ |  /ext/Rosetta-Incubator : reorganized the DATA TYPES OVERVIEW section of Language.pod to cut on redundancy

[01:31] <svnbot6> r8343 | rafl++ |  r23725@ata:  rafl | 2005-12-19 19:29:47 +0100

[01:31] <svnbot6> r8343 | rafl++ |  * Use Test::NoWarnings in t/020-JIB-Package.t

[01:31] <stevan> &?NEXT works too

[01:31] <audreyt> stevan: there is no @_ in minilang

[01:31] <stevan> actually I like that better

[01:31] <dduncan> that was weird

[01:31] <audreyt> and explicit rebound is clearer

[01:31] <stevan> @_ in the abstract sense :)

[01:31] <rafl> Oh no.. merge conflicts. I hate that..

[01:32] <audreyt> k :)

[01:32] <rafl> I always screw something up when merging conflicts. :-(

[01:32] <clkao> gr!

[01:32] <clkao> sorry. using -l is better

[01:32] <clkao> trunk svk has the ability to do sm -IC

[01:33] <audreyt> stevan: I have this weird feeling that &?NEXT can't be written in minilang

[01:33] <stevan> it cant

[01:33] <stevan> it needs to be in haskell

[01:33] <audreyt> but it's weird

[01:33] <stevan> yeah i know

[01:33] <audreyt> because &?SUB is minilang

[01:33] <stevan> ?

[01:33] <audreyt> so is $?CLASS and $?SELF

[01:33] <audreyt> they are perfectly valid first class values

[01:33] <dduncan> sometimes I think that svk skips or merges all sorts of weird things

[01:33] <stevan> can be written in,.. or used in?

[01:33] <audreyt> &?NEXT is something else

[01:34] * audreyt thinks about how to define it

[01:34] <dduncan> eg, on my commit it says ...

[01:34] <dduncan> ... t/pil/metamodel.t - skipped

[01:34] <dduncan> but there is no such file in my dir

[01:34] <audreyt> stevan: the problem comes when you want to return &?NEXT outside your scope.

[01:34] <stevan> dduncan: I renamed that

[01:34] <stevan> retun &?NEXT? as in return the sub?

[01:34] <clkao> audreyt: oh, the other thing i wanted to ask you

[01:34] <audreyt> stevan: yeah

[01:34] <clkao> since i am starting to implement stuff for jsbackend in perl6

[01:35] <stevan> that shouldnt be possible I think

[01:35] <clkao> such as hyperoperators. those seems to belong to a common shared prelude

[01:35] <audreyt> stevan: but &?SUB you can carry it out no problem

[01:35] <stevan> yeah

[01:35] <clkao> and individual backend shuld be able to override the default implementation if they have better choise

[01:35] <stevan> maybe this is another special type

[01:35] <audreyt> clkao: hyperops are handled implicitly in the default runcore

[01:35] <audreyt> stevan: maybe it's not. let me think

[01:36] <clkao> i mean the perl5 runcore could well share what i've done

[01:36] <stevan> audreyt: can't &?NEXT just "freeze" the scope it is defined in? 

[01:36] <avar> <random thoughts> something like multi sub ncircumfis:<4 a b c d> {} .. for a 5 b 4 c 3 d would be cool

[01:36] <avar> an arbitary number of -fixes ;)

[01:37] <clkao> btw, namespace fix confirmed. hurrah! zzz

[01:37] <audreyt> stevan: yes

[01:37] <audreyt> stevan: and takes the parmlist for the next candidate as its parmlist

[01:37] <clkao> audreyt: it seems default export list is broken

[01:37] <audreyt> clkao: yup. feel free to post it to src/perl6/Prelude/Hyper.pm or something like it

[01:38] <stevan> next canidate?

[01:38] <audreyt> stevan: next in the mro

[01:38] <stevan> yes

[01:38] <audreyt> and if it's empty you don't get a &?NEXT

[01:38] <stevan> can &?NEXT throw an error in that context?

[01:38] <clkao> alright.. i will try to catch you sometime for that, linking the runcore build system etc

[01:38] <stevan> &?NEXT should alwasys be defined I think

[01:39] <clkao> audreyt: modify the test.pl to put plan 1 after 'use Test'

[01:39] <audreyt> stevan: not sure about that... we don't have $?CLASS outside a class

[01:39] <audreyt> clkao: k

[01:40] <dduncan> fyi, my current goal is to have the first runnable version of Rosetta, which at least can create/drop an empty database, by Christmas ... in perl 5 and 6

[01:40] <audreyt> dduncan: ooh, excellent

[01:40] <stevan> I mean always defined in the context of a method body

[01:40] <clkao> normal runcore works, can you see if pil output is sane? so i can see if it's pil2js specified problem

[01:40] <dduncan> today's focus is on design docs ... Language.pod is somewhat analagous to the synopsis

[01:41] <clkao> why isn't -CPIL prettyprint

[01:41] <dduncan> and SQL::Routine is analagous to PIL

[01:41] <audreyt> clkao: I think I know why... fixing

[01:42] <clkao> k cheers

[01:42] <clkao> quick, let me kick the smoke start and go sleep

[01:43] <dduncan> to put that in perspective, audreyt, that milestone is like your pugs 6.0.0 that just ran "hello world"

[01:43] <dduncan> anyway ...

[01:43] <audreyt> dduncan: that is the most important milestone of all :)

[01:43] <audreyt> and 6.0.0 runs "hello world" but not say("hello world")

[01:43] <dduncan> as they say, you don't get anywhere without the first step

[01:44] <clkao> :D

[01:44] <svnbot6> r8345 | rafl++ |  r23726@ata:  rafl | 2005-12-19 19:32:31 +0100

[01:44] <svnbot6> r8345 | rafl++ |  * More consistent naming of JIB tests.

[01:44] <clkao> are we nearly there yet?

[01:44] <audreyt> clkao: sure we are! </here-is-a-cookie>

[01:45] <clkao> thank you miss tang! merry christmas!

[01:45] <svnbot6> r8346 | rafl++ |  r23727@ata:  rafl | 2005-12-19 19:33:34 +0100

[01:45] <svnbot6> r8346 | rafl++ |  * Remove the error log after testing the error.

[01:45] <audreyt> *smile*

[01:45] <audreyt> clkao: so, gaal's lexical export work broke PIL export completely, yay

[01:46] <clkao> does this translate to it won't get fixed within 18 minutes?

[01:46] <svnbot6> r8347 | rafl++ |  r23728@ata:  rafl | 2005-12-19 19:48:40 +0100

[01:46] <svnbot6> r8347 | rafl++ |  * Some POD for JIB.pm.

[01:46] <audreyt> it does. sorry about that

[01:46] <audreyt> will research a fix only after gaal is up and about

[01:46] <audreyt> but!

[01:47] <audreyt> you can apply this single line patch to make it work ;)

[01:47] <clkao> XD

[01:47] * clkao reminds me the voodoo fix i did with richardc today

[01:47] <svnbot6> r8348 | rafl++ |  r23729@ata:  rafl | 2005-12-19 23:26:47 +0100

[01:47] <svnbot6> r8348 | rafl++ |  JIB::Repository:

[01:47] <svnbot6> r8348 | rafl++ |   + Added force option to add_package that allows to put a package into a

[01:47] <svnbot6> r8348 | rafl++ |     repository even if it already exists.

[01:47] <svnbot6> r8348 | rafl++ |   + Fixed index file generation

[01:47] <clkao> wgr, i am not reminding myself. stupid finger

[01:48] <clkao> oh, do you still update commit/committer graph? :)

[01:48] <audreyt> not really ;)

[01:48] <audreyt> http://perlcabal.org/~autrijus/tmp/bandaid-clkao.diff

[01:48] <audreyt> cheers

[01:49] <audreyt> that should get your smoke running

[01:49] <audreyt> now to go back to &?NEXT...

[01:49] <svnbot6> r8349 | rafl++ |  r23730@ata:  rafl | 2005-12-19 23:38:53 +0100

[01:49] <svnbot6> r8349 | rafl++ |  JIB::Repository: Improved forced add_{package,file}

[01:51] <svnbot6> r8350 | rafl++ |  r23731@ata:  rafl | 2005-12-19 23:39:22 +0100

[01:51] <svnbot6> r8350 | rafl++ |  * Added test suite for JIB::Repository

[01:52] <svnbot6> r8351 | rafl++ |  r23732@ata:  rafl | 2005-12-20 01:41:40 +0100

[01:52] <svnbot6> r8351 | rafl++ |  JIB: Read the abstract from JIB.pm instead of hard coding it into Makefile.PL

[01:55] <svnbot6> r8352 | rafl++ |  r23733@ata:  rafl | 2005-12-20 01:43:59 +0100

[01:55] <svnbot6> r8352 | rafl++ |  * Increased the number of some JIB tests to be able to put some tests before them.

[01:57] <stevan> audreyt: I should have a &?NEXT test for you in a moment

[01:57] <svnbot6> r8353 | rafl++ |  r23844@ata:  rafl | 2005-12-21 02:39:54 +0100

[01:57] <svnbot6> r8353 | rafl++ |  JIB::Meta: use JIB::Constants.

[01:57] <svnbot6> r8352 | rafl++ |  r23733@ata:  rafl | 2005-12-20 01:43:59 +0100

[01:57] <svnbot6> r8352 | rafl++ |  * Increased the number of some JIB tests to be able to put some tests before them.

[01:57] <audreyt> stevan: good, by then I should have an implementation

[01:58] <clkao> ok, smoke running

[01:58] <svnbot6> r8354 | rafl++ |  r23845@ata:  rafl | 2005-12-21 02:40:25 +0100

[01:58] <svnbot6> r8354 | rafl++ |  JIB::Package::Source: Fixed a pod error.

[01:58] <clkao> night all.

[01:58] <clkao> btw

[01:59] <clkao> "are we nearly there yet" where we = Pugs, there = 2 * PI

[01:59] <audreyt> g'nite

[01:59] <dduncan> nite

[01:59] <audreyt> and yes we are, for some value of near and some value of yet :)

[02:01] <clkao> oh, t/subroutines/currying.t last test is broken. was working yesterday

[02:01] <svnbot6> r8355 | rafl++ |  r23846@ata:  rafl | 2005-12-21 02:40:54 +0100

[02:01] <svnbot6> r8355 | rafl++ |  JIB: Added pod and (stub) pod coverage tests

[02:01] <clkao> take a look if you have time

[02:01] <clkao> *** cannot cast from VList [] to Pugs.AST.Internals.VCode (VCode)

[02:01] <amv> 03:58:49 < clkao> ok, smoke running

[02:02] <amv> hmm.. just forget it.

[02:02] <clkao> nvm, it fails on a todo one.

[02:03] <clkao> but fatal

[02:03] <amv> the mouse is quite a har peripheral to use..

[02:03] <amv> +d

[02:03] <rafl> Can someone please run the tests in misc/sixpan/JIB? I'm not sure if my merge was successful.

[02:03] <audreyt> rafl: doing so

[02:03] <audreyt> stevan: implemented

[02:05] <stevan>  audreyt: you bet me,.. I am almost done

[02:05] <svnbot6> r8356 | autrijus++ | * &?NEXT implemented -- untested, unproven, etc.

[02:06] <dduncan> regarding $!, was it ever explicitly decided that this will be an ENV var rather than a global?

[02:10] <audreyt> rafl: still chasing deps

[02:10] <audreyt> dduncan: no.

[02:10] <audreyt> it needs to be written into synopses

[02:10] <audreyt> poke luqui?

[02:10] <audreyt> (or lwall)

[02:11] <dduncan> they're not on this channel now

[02:12] <audreyt> rafl: list deps: Package::Constants and Module::Load::Condiditonal

[02:12] <audreyt> dduncan: yeah, so p6l...

[02:12] <audreyt> rafl: all test pass when I installed P::C and M::L::C

[02:18] <rafl> audreyt: Can you please add the deps you found to Makefile.PL?

[02:19] <audreyt> done

[02:20] <rafl> Thanks!

[02:20] <clkao> gr!

[02:20] <clkao> Preprocessing library Pugs-6.2.10...

[02:20] <clkao> Setup: got error code while preprocessing: Pugs.Embed.Parrot

[02:20] <svnbot6> r8357 | autrijus++ | 03:18 < rafl> audreyt: Can you please add the deps you found to Makefile.PL?

[02:27] * rafl is about to rewrite smokeserv

[02:28] <rafl> I'd like to send yaml data instead of html files, but the using YAML.pm for deserializing a >3MB YAML dump is fucking slow.

[02:28] <rafl> Is there a faster implementation that's usable from perl somehow?

[02:29] <audreyt> are you versed in SWIG or XS?

[02:29] <svnbot6> r8358 | stevan++ | t/pil/S12_example.t - &?NEXT -- tested, proven, etc. :)

[02:29] <audreyt> I had for a very long time wanted YAML::Syck

[02:29] <audreyt> there is YAML::Parser::Syck

[02:29] <audreyt> which may be what you want

[02:30] <stevan> audreyt: &?NEXT seems to work :)

[02:30] <stevan> I will start testing more cases

[02:30] <audreyt> good, because it only worked for one level :)

[02:31] <audreyt> I fixed that --- r8359

[02:31] <rafl> audreyt: I know XS pretty well.

[02:31] <stevan> only one level?

[02:31] <audreyt> rafl: ok, in that case, grab latest libsyck and put a SWIG/XS wrapper around it should get you a yaml implementation that works with other languages

[02:31] <audreyt> rafl: you can start with what YAML::Parser::Syck has and gofrom there

[02:32] <rafl> audreyt: YAML::Parser::Syck looks good. Thanks.

[02:32] <audreyt> rafl: it's very long overdue for perl to get a fast yaml implementatnion -- every other language does a syck binding

[02:32] <audreyt> rafl: it maybe sriously outdated.

[02:32] <audreyt> ingyware :)

[02:32] <rafl> ingy: PING :-)

[02:32] <dduncan> okay, I sent a poke about $! to p6l

[02:32] <svnbot6> r8359 | autrijus++ | * improve &?NEXT support for chained NEXT calls --

[02:32] <svnbot6> r8359 | autrijus++ |     t/pil/S12_example.t all pass.

[02:32] <dduncan> after confirming what s2 currently says

[02:32] <audreyt> ok

[02:32] <audreyt> dduncan++

[02:33] <audreyt> stevan: it's multilevel now 

[02:33] <audreyt> theoretically... until proven  otherwise

[02:33] <stevan> ok,.. I will put some tests together

[02:33] <audreyt> wunderbar

[02:33] <audreyt> anything else you need before roles?

[02:34] <audreyt> if not I can move to containers and autoboxing

[02:34] <audreyt> also, &?NEXT is now completely okay to pass outside methods

[02:34] <audreyt> as it's a self contained closure

[02:34] <stevan> I think that is good

[02:34] <stevan> nice

[02:34] <audreyt> representable in minilang

[02:34] <audreyt> so I'm happy :)

[02:34] <stevan> cool

[02:35] <audreyt> you have to choice of binding &?NEXT to nil or otherwise

[02:35] <stevan> should we load the Bootstrap.pil by default?

[02:35] <audreyt> s/to/the/

[02:35] <audreyt> when there is no &?NEXT, that is

[02:35] <audreyt> I think binding to nil is easier to test than missing symbol

[02:36] <stevan> yes

[02:36] <stevan> you dont like it just failing?

[02:37] <audreyt> it has to be completely constructed for each level of &?NEXT

[02:37] <audreyt> and there needs to be  a way to know whether we are at the end of MRO chain or not, I think

[02:37] <audreyt> so binding to nil trumps binding to something that throws warning

[02:37] <audreyt> as otherwise we would not know if that's actually the next candidate

[02:38] <audreyt> that happens to be throwing exception itself

[02:38] <audreyt> i.e. there'd be no way to distinguish the terminal case with the normal case

[02:38] <stevan> ok

[02:39] <audreyt> implemented

[02:39] <azuroth> good afternoon

[02:39] <audreyt> greetings azuroth

[02:40] <audreyt> stevan: and yes, once you are happy with B.pil we will load it by default

[02:40] <svnbot6> r8360 | autrijus++ | * &?NEXT is now bound to nil on the end of MRO chain.

[02:40] <svnbot6> r8360 | autrijus++ |   (all S12_examples.t tests still pass.)

[02:40] <audreyt> I'd like to see roles before working on container types :)

[02:40] <audreyt> (so that leaves autoboxing for me currently)

[02:41] <stevan> audreyt: ok, once we have roles we can load it by default

[02:42] <stevan> audreyt: are you going to add any methods other than unboxed to the boxed types?

[02:42] <audreyt> you mean default methods?

[02:42] <audreyt> I don't know, do you think there should be any?

[02:42] <stevan> nope

[02:42] <audreyt> good then.

[02:43] <stevan> I would like those to be in roles

[02:43] <audreyt> we do need .unboxed though

[02:43] <audreyt> because we did away with attr

[02:43] <audreyt> $!val that is

[02:43] <audreyt> but nothing else

[02:43] <stevan> well, we need a way to dispatch to the native methods

[02:43] <audreyt> yes, and I'm more comfortable with .unboxed than $!val

[02:43] <stevan> me too

[02:44] <audreyt> it's strange that we are in almost constant agreement, modulo five minutes here and there :)

[02:45] <stevan> yes, we tend to convince one another when in disagreement 

[02:45] <audreyt> :)

[02:45] <audreyt> I'll go find some food... bbl

[02:50] <meppl> english speaking people speak "autrijus" like "audrey"?

[02:50] <sili_> a tree juice.

[02:50] <sili_> mmm mayple.

[02:50] <audreyt> meppl: no, similar, but probably not identical

[02:50] <meppl> k

[03:03] <meppl> i know a american man who calls "fritz kleiner" [fr?ts] [kla?n?r], but the people call him "fred cleaner" [fr?d] [kli?n?r] with english 'r' of course

[03:58] <svnbot6> r8361 | stevan++ | t/pil/next.t - check &?NEXT deeper calls & calls with params

[03:59] <ingy> rafl, audreyt: I have been cooking on the YAML Syck stuff.

[04:00] <rafl> ingy: How's the whole rewrite of YAML.pm going?

[04:00] <ingy> there will be 3 YAML implementations soon, all sharing the same API classes: YAML.pm (YAML::Classic) YAML::Lite (Simpler, stabler pure perl) and YAML::Syck

[04:01] <ingy> rafl it is going well

[04:01] <audreyt> where is the code?

[04:01] <audreyt> and more importantly, where can rafl and I jump in?

[04:01] <rafl> And when is 'soon'?

[04:01] <rafl> :-)

[04:01] <audreyt> ingy: and when are you going to taipei so we can chat? :)

[04:02] <ingy> I have basically refactored the current YAML.pm into a new setup and it works.

[04:02] <ingy> once I port the tests I'll release it and we can cobble together YAML::Syck

[04:03] <ingy> the code is in my svn repos

[04:03] <ingy> and audreyt, maybe this weekend

[04:04] <audreyt> url to your repo again?

[04:04] <ingy> rafl: soon means who knows

[04:05] <rafl> ingy: How's the performance compared with good old YAML.pm?

[04:05] <audreyt> easily 10x ;)

[04:05] <audreyt> ingy: cool -- saturday afternoon I've got a conseling session, but otherwise I'm free

[04:06] <ingy> http://svn.kwiki.org/ingy/YAML-Dev/

[04:07] <ingy> the current performance can be expected to be the same or slightly slower :)

[04:07] <audreyt> rafl: interested in takign YAML::Syck and run with it ? :)

[04:07] <ingy> since it is just a refo

[04:07] <audreyt> (I was referring to Syck's perf vs YAML.pm)

[04:09] <ingy> I have a plan as to how YAML::Syck should be cobbled together, so I don't mind if rafl runs, but it should be on rails ;)

[04:10] <audreyt> lol

[04:10] <stevan> audreyt: ./pil -e '{ "one" => [ 1, 2, 3 ] }' does not work

[04:10] <ingy> fyi, syck == simple yaml cobble-yourself-together-a-parser kit

[04:11] <ingy> so cobble is the appropriate term

[04:11] <audreyt> stevan: fixing

[04:12] <audreyt> you can code asif it's fixed :)

[04:12] <stevan> always do :)

[04:13] <ingy> hi stevan 

[04:13] <stevan> hey ingy 

[04:13] <stevan> ingy: are you still working on that database idea you had in Toronto?

[04:16] <ingy> stevan: I am working on a database idea called Goodboy :)

[04:17] <ingy> not sure what I talked about in Toronto

[04:17] <ingy> I'm also working on Perldoc and Kwiki-Kwiki

[04:17] <ingy> arrrrrg

[04:17] * ingy needs to prioritize

[04:17] * stevan knows the feeling

[04:18] <ingy> I just woke up, was planning to work on Kwiki today

[04:18] <stevan> lately pugs always bubbles to the top, and $work sinks to the bottom :)

[04:18] <ingy> now you guys have forced me into working on YAML.pm release

[04:19] <ingy> well and I still have to do 5-8 hours of $work each day

[04:19] <stevan> don't blame me,.. it's audreyt fault :)

[04:19] <stevan> wait,.. you *just* work up? 

[04:19] <ingy> but hey, I'm in Taiwan!

[04:19] <stevan> s/work/woke/

[04:19] <stevan> ah

[04:19] <stevan> that makes more sense

[04:19] <ingy> the great island of tuits!

[04:20] <stevan> :)

[04:20] * stevan should try to convince his boss to send him to YAPC::tw :P

[04:21] <stevan> I will tell him I can pick up extra tuits

[04:21] <obra>  next year, it's yapc::asia in tokyo

[04:21] <stevan> oh

[04:21] * stevan has always wanted to stay in a capsule hotel

[04:22] <ingy> actually hcchien is planning a ::tw for after ::jp

[04:22] <ingy> at least that's what I heard in the winds.

[04:23] <ingy> stevan: I actually talked to miyagawa about staying in a capsule but he says I should just sleep in a comic book cafe

[04:23] <stevan> :)

[04:23] <ingy> I think they rent private rooms by the minute afaict

[04:23] <ingy> it's all pretty freaky over here :p

[04:24] <stevan> short naps would be economical

[04:24] <ingy> in .tw a dollar is 3 cents

[04:24] <svnbot6> r8362 | autrijus++ | * PIL.Native.Parser: allow arbitrary expressions in NativeMap keys

[04:24] <svnbot6> r8362 | autrijus++ |   and values.  It's desugared to {}.push() if any of key/value

[04:24] <svnbot6> r8362 | autrijus++ |   expressions are compound (non-literals), otherwise it's still a

[04:24] <svnbot6> r8362 | autrijus++ |   literal (thus preserving nested seqs and maps).

[04:24] <ingy> I call .tw dollars, pennies

[04:25] <ingy> which makes it easy

[04:25] <stevan> :D

[04:25] <ingy> a $500 bill is really a $5 bill

[04:25] <ingy> which is *really* a $15 bill

[04:26] <ingy> the $5 coin looks like a nickle

[04:26] <ingy> and to $10 looks like a quarter

[04:26] <ingy> and there is no $25

[04:26] <audreyt> 05:24 < ingy> in .tw a dollar is 3 cents

[04:26] * stevan recalls going to East Berlin back in the mid-80s ... now /that/ was a good exchange rate

[04:26] <audreyt> watch for value recursion!

[04:27] <audreyt> (i.e. "a dollar is 3 cents" implies a cent is 1/3 dollar)

[04:27] <ingy> stevan: so anyway a comic book cafe is $1/minute

[04:27] <stevan> I assume the yen exchange rate is not as good (for americans that is)

[04:27] <ingy> which is roughly $1.80 USD

[04:28] <audreyt> stevan: I think the {...} fix works; the key position is a bit too laz

[04:28] <audreyt> s/laz/lax/

[04:28] <audreyt> which makes {1.add(3) => 4} work

[04:28] <ingy> so $20 would get you a place to crash

[04:28] <stevan> audreyt: it is working for my purposes for now

[04:28] <audreyt> not sure if it's a good thing or not, but anyway it works

[04:28] <audreyt> k

[04:28] <stevan> I am converting the MRO tests 

[04:29] <audreyt> TDD++ # tests far more portable than docs

[04:29] <ingy> stevan: yeah I don't know anything about tokyo

[04:29] <ingy> TDD?

[04:29] <stevan> Test Driver Development

[04:29] <avar> Driven?

[04:29] <stevan> yes, that :)

[04:30] <ingy> DDD?

[04:30] <ingy> DDT

[04:30] <stevan> Drug Driven Development?

[04:30] <audreyt> Dungeons, Dragons and Debugging?

[04:30] <ingy> Drug Driven Testing

[04:30] <audreyt> then we just need Development Driven Drugs

[04:30] <audreyt> to complete the cycle

[04:30] <obra> invest in biotech

[04:31] <ingy> or meth labs

[04:31] <stevan> sort of a carrot and the stick idea,.. but with a joint and some kind of lego robot connected to source control 

[04:31] <ingy> audreyt: anything for me to do in pugs these days?

[04:31] <avar> Will TDD decrese my TCO and improve by FAT?

[04:32] <avar> (Funny Acronym Ratio)

[04:32] <avar> ;)

[04:32] <stevan> audreyt: I think once I finish the MRO tests I will be ready to start roles

[04:33] <Skud> avar: shirley you mean FAR

[04:33] <avar> raTio ?;)

[04:33] <rafl> ingy: Besides increasing YAML.pm performance so I can write a good new smokeserv? :-)

[04:34] <audreyt> ingy: YAML::Syck definitely

[04:34] <avar> will YAML be a standard perl6 module?

[04:34] <audreyt> but if rafl can handle that... then I'd like a p5 impl of kwid

[04:34] <avar> I hope so, then I can exchange ruby & perl stuff out of the box

[04:34] <audreyt> avar: either that, or builtin

[04:35] <audreyt> it's pugs builtin

[04:35] <avar> audreyt: fucking awsome;)

[04:35] <avar> ;)

[04:35] <audreyt> and is highly likely to be stdlib among p6 implementations if JIB uses it

[04:35] <avar> JIB?

[04:35] <audreyt> still not sure about sqlite

[04:36] <audreyt> JIB is rafl+kane's way of doing a lightweight package manager for perl6 -- because perl6 supports installation of multiple versions and authorities of the same module

[04:36] <audreyt> see docs/AES/S22draft.pod

[04:36] <audreyt> and misc/sixpan/

[04:36] <stevan> I am really starting to like this mini-language,.. who needs Perl 6 :P

[04:36] <avar> yeah, I've read that

[04:36] <rafl> We're not yet sure about what format to use to store the JIB meta information. But YAML is at least very likely if we have a good implementation of it.

[04:36] <audreyt> reputedly it stands for "JIB Is Blamed"

[04:37] <audreyt> because everybody blames package managers

[04:37] <audreyt> stevan: good, because that's going to be pug's assembly (aka PIR) for the forseeable future

[04:37] <rafl> But the docs say "JIB Is Brilliant"!

[04:38] <audreyt> yeah, I was just glibbing :)

[04:39] <rafl> Since today it's written down somewhere and I can tell people to RTFM instead of asking me ;-)

[04:39] <audreyt> :)

[04:41] <avar> I like blamed

[04:41] <rafl> I wouldn't like it if I were JIB.pm..

[04:42] <rafl> audreyt: How's the Haskell implementation that's mentioned in YAML.pm's POD going?

[04:42] <stevan> audreyt: did you change the way things are printed?

[04:42] <svnbot6> r8363 | xgl++ | fixed t/pugsbugs/parsing_do_my.t

[04:43] <stevan> s/printed/pretty printed/

[04:43] <audreyt> stevan: not sure... not intentionally anyway 

[04:43] <audreyt> rafl: I went with a syck binding, so that para can go away

[04:45] <stevan> Seqs were printing on a single line, but it seems if the string is very long,.. it wraps each element onto it's own line

[04:45] <rafl> audreyt: para?

[04:45] <stevan> maybe this is something from Text.PrettyPrint

[04:46] <audreyt> ra	paragraph

[04:46] <audreyt> stevan: it is... if it causs you inconvenience I can disable it

[04:46] <stevan> yes please :)

[04:46] <stevan> it makes it hard to test

[04:47] <rafl> audreyt: Oh, OK. Yet another reason for a new YAML.pm release ;-)

[04:50] <audreyt> stevan: fixed

[04:50] <stevan> audreyt: thanks

[04:50] <stevan> this will complete the MRO test

[04:50] <stevan> so I will start on Roles tomorrow morning

[04:51] <audreyt> yay!

[04:51] * audreyt celebrates another milestone in the the long march

[04:51] <audreyt> s/the the/the the the the the/; # really long

[04:51] <svnbot6> r8364 | autrijus++ | * PIL.Native.Pretty: always prettyprint to one line, to

[04:51] <svnbot6> r8364 | autrijus++ |   make stevan++'s testing easier.

[04:57] <svnbot6> r8365 | xgl++ | fixed t/pugsbugs/parsing_do_my.t;

[04:57] <svnbot6> r8366 | stevan++ | t/pil/* - more &?NEXT tests and a bunch of MRO tests; tomorrow .... we do roles

[05:04] * stevan signs off ... back in 9 hours &

[05:05] * ingy heads off to work on YAML.pm :p

[05:07] <sili_> mm

[05:08] <sili_> fix the "or die;" because it confuses me.

[05:12] <avar> or die "Error " ~ int rand 0xdeadbeef;

[05:15] <gaal> g'morning

[05:15] <xgl> midnight here

[05:16] <gaal> g'midnight_there

[05:20] <gaal> oops? pil broke? sorry about that (still backlogging)

[05:23] <xgl> what happened? a bunch of svn updates?

[05:24] <rafl> ingy++

[05:27] <gaal> so, how come it broke?

[05:31] <audreyt> gaal: pil didn't handle lexical export, that's all

[05:31] <audreyt> not really broken, more like... bitrotted

[05:32] <audreyt> in addition to that, to avoid namespace leaking I put (in Pugs.hs) {} around automagic inlining of "use Test" so it becomes "{use Test}" and hence lex symbols won't be exposed -- need some way for inlining _and_ main lexical export to work

[05:34] <gaal> we use Test in Pugs.hs

[05:35] <gaal> ?

[05:35] <audreyt> no, in clkao's test.pl

[05:35] <audreyt> http://home.clkao.org/~clkao/tmp/test.pl

[05:36] <audreyt> but those two are separate bugs

[05:36] <avar> what do you call something that gets more expensive the more data you process (in a non-linear fashion)

[05:37] <avar> I've completely forgotten the word

[05:37] <xgl> resource hog?

[05:37] <audreyt> exponential?

[05:37] <xgl> unscalable?

[05:37] <azuroth> exponential..?

[05:37] <gaal> I really need to get up to speed with PIL: what it implements+where, what needs to be maintained there after "main" runcore changes

[05:37] <audreyt> gaal: I too, and I really need to start blogging about it.

[05:38] <audreyt> or p6c it.

[05:38] <gaal> also, did you see my wonderings about exports of variables?

[05:38] <audreyt> yes I did

[05:38] <avar> audreyt: ah, exponential

[05:39] <audreyt> if it's global vars in the module site, how is it different from sub exports?

[05:40] <gaal> sub decls have a MkCode in the parser

[05:40] <gaal> var decls always MkObject in Eval

[05:41] <gaal> (unless I'm mistaken.)

[05:42] <gaal> also, no word yet from @Larry about it having indeed to be a global...

[05:43] <gaal> ruleVarDeclaration always returns a Pad; reducePad SMy does newObject (err, not MkObject)

[05:44] <gaal> STemp I don't even know what we're supposed to do with

[05:44] <gaal> and (say) SOur... I don't know where the var is allocated :)

[05:45] <audreyt> it's allocated upon runtime entry, not at compiler time

[05:45] <audreyt> I think it should

[05:45] <audreyt> be allocated at compile time, that is

[05:46] <gaal> what func?

[05:47] <gaal> oh i see it

[05:47] <gaal> reduceSym _

[05:47] <audreyt> yeah

[05:48] <gaal> btw please tell me you can't export memebers :-)

[05:49] <gaal> ("has is export")

[05:49] <gaal> # makes no sense

[05:50] <gaal> How does moving variable creation to compile time affect deparate compilation?

[05:51] <audreyt> class is a closure... exporting per-closure-entry stuff generally makes no sense

[05:51] <gaal> s/dep/sep/

[05:51] <audreyt> it shouldn't affect it. each var should be serializable

[05:51] <audreyt> also, I think SGlobal vars are already created upon parsing if I'm not mistaken

[05:52] <gaal> I don't see code for that by vgrep

[05:52] <audreyt> actually I think they all are... into Pad 

[05:52] <audreyt> in unsafeEvalLexDiff line 693

[05:52] <audreyt> it's just Pad gets refreshed by Eval if it's SMy 

[05:56] <gaal> I don't understand how that doesn't get run many times in the chained case. This function is weird.

[05:56] <gaal> ...(sym, expMaybe) <- option... recurses

[05:57] <gaal> so the innermost element would be created several times, no?

[05:57] <audreyt> it might... the chained case is I think very broken...

[05:59] <gaal> ok, so ignoring it for a moment.

[05:59] <audreyt> yup.

[05:59] <gaal> lexDiff contains a bunch of transformers that already reference created memory?

[05:59] <gaal> well, created vars

[06:00] <gaal> I'm not sure it does, because I put in a trace and it showed me MkPad [] or soemthing similar

[06:00] <gaal> ah, i still have the print

[06:00] <gaal> MkPad (padToList [])

[06:01] <gaal> this was for a simple "my $var is export"

[06:01] <gaal> oops, "our"

[06:02] <audreyt> "our" creates no lexDiff

[06:02] <audreyt> it just installs the symbol

[06:03] <gaal> hmmm right 

[06:03] <audreyt> (which, btw, is broken as well -- it should install a lex alias)

[06:03] <gaal> really? wow

[06:03] <gaal> why? performance?

[06:03] <audreyt> no, just so this can work

[06:03] <audreyt> package Foo; our $blah; package Bar; say $blah;

[06:03] <audreyt> which is part of p5 and p6 spec, weird as it may seem.

[06:04] <audreyt> so maybe the correct fix is to make our install the lex alias

[06:04] <audreyt> and then export that lex alias in lexdiff.

[06:04] <audreyt> maybe. I'm not exactly sure

[06:04] <gaal> I know how it's part of p5

[06:04] <audreyt> (and did I mention I was about to get food? turned out I didn't and it's been for hours :))

[06:04] <gaal> but in p6, doesn't package X mean package X { } ?

[06:04] <gaal> ok in the "my" case this looks good:

[06:04] <gaal> MkPad (padToList [("$v",[(<ref>,<ref>)])])

[06:04] <audreyt> it means {} for closure purposes

[06:04] <audreyt> but still it shares a pad with outer

[06:05] <audreyt> it's very weird and very special case.

[06:05] <audreyt> I'm not sure if it's worth keeping anyway... but that's for p6l to decide

[06:05] <audreyt> I think the Syn still preservs the behaviour

[06:05] <gaal> okay, you get food, i go earn food

[06:05] <audreyt> okay :) sorry I didn't help much

[06:06] <gaal> you helped clarify a lot! :)

[06:06] <gaal> but this stuff's a little harder than it looks.

[06:06] <audreyt> indeed

[06:07] <audreyt> food &

[06:07] <gaal> bon mousse :)

[06:07] <audreyt> :)

[06:34] <GeJ> greetings all

[06:34] <xgl> greetings

[07:55] <dduncan> question ... what is the Perl 6 way of indicating a weak reference?

[07:56] <dduncan> eg, if $foo and $bar each contain a reference to the other, one is weak so they can autodestruct

[07:56] <dduncan> in perl 5 you use Scalar::Util::weaken() to do what I want

[08:01] <Khisanth> my $foo isa wimp; :P

[08:01] <jp-autark> isn't a real GC going to fix that?

[08:02] <Khisanth> hmm yes

[08:03] <Khisanth> since ther would be not ref to count :)

[08:03] <Khisanth> d'oh, there and no

[09:36] * gaal is in a maze of nested namespaces, all differently scoped

[10:01] <clkao> Preprocessing library Pugs-6.2.10...

[10:01] <clkao> Setup: got error code while preprocessing: Pugs.Embed.Parrot

[10:01] <clkao> Build failed: 256 at util/build_pugs.pl line 86.

[10:01] <clkao> gr?

[10:03] <masak> hm

[10:03] <masak> t/builtins/math/NaN.t says "plan 2" and then contains 5 tests

[10:03] <masak> is that really correct?

[10:03] <masak> should i change it?

[10:11] <gaal> masak: please do

[10:11] * masak changes it

[10:14] <svnbot6> r8367 | masak++ | number of tests planned should be 5, not 2, in t/builtins/math/NaN.t

[10:38] *** kgtfr|konobi is now known as konobi

[11:01] <masak> can I rewrite this line

[11:01] <masak> $arg = defined($ctl[$CTL_DEFAULT]) ?? $ctl[$CTL_DEFAULT] !! 0;

[11:01] <masak> as

[11:01] <masak> $arg = $ctl[$CTL_DEFAULT] // 0;

[11:01] <masak> in perl6?

[11:02] <rafl> It would be $ctrl[$CTRL_DEFAULT] || 0 in p5 as well as in p6.

[11:02] <rafl> Whops. I didn't see the defined.

[11:03] <rafl> Yes, // is ought to work in perl6.

[11:03] <masak> rafl: good. thx

[11:09] <gaal> masak: // works in pugs.

[11:26] *** lhooq is now known as dada

[12:07] <meppl> guten morgen

[13:53] <wolverian> hm, why does svk ci also push?

[13:56] <audreyt> because you operate it on a mirror path instead of a local branch

[13:56] <wolverian> oh. can it not do that for a mirror, or do I just branch?

[13:58] <audreyt> just branch.

[13:58] <audreyt> svk cp -m 'branch' //mirror/pugs //pugs

[13:58] <audreyt> mirrors are by definition mirrors

[14:08] * audreyt goes sleeping... &

[14:09] <wolverian> audreyt, thanks!

[15:19] <svnbot6> r8368 | iblech++ | Usual svn props for all this new files :) (t/pil, src/PIL, src/Data)

[16:00] <Qiang> is there a roadmap on where Pugs is going ? where is pugs now ?

[16:05] <kane-xs> over at pugscode.org

[16:06] <svnbot6> r8369 | kane++ |  r580@coke:  kane | 2005-12-21 16:58:45 +0100

[16:06] <svnbot6> r8369 | kane++ |  * Add JIB::Dependency + tests

[16:06] <svnbot6> r8369 | kane++ |  * Make JIB::Meta hold a JIB::Dependency

[16:06] <svnbot6> r8369 | kane++ |  * rename some test files

[16:06] <svnbot6> r8369 | kane++ |  * add more test packages/meta.infos under t/src

[16:30] <svnbot6> r8370 | kane++ |  r625@coke:  kane | 2005-12-21 17:27:59 +0100

[16:30] <svnbot6> r8370 | kane++ |  * oops, forgot to add Dependency.pm

[16:30] <svnbot6> r8370 | kane++ |  * move config test to 003

[16:34] <webmind> errors are rewarded? ;)

[16:34] * theorbtwo is having container/value problems with the sentance "The Pugs project was started on February 1st, 2005 by Audrey Tang."

[16:35] <wolverian> 'sentence' :)

[16:35] <webmind> theorbtwo, hmmm

[16:35] <webmind> understandable

[16:36] <webmind> rewriting history

[16:54] * gaal doesn't see the problem?

[16:54] <integral> no problem if history is under version control

[16:55] <stevan> anyone know if there is a limit with the runInteractiveCommand function in pugs?

[16:56] <stevan> I am seeing this *** /bin/sh: runInteractiveCommand: resource exhausted (Resource temporarily unavailable)

[16:56] <stevan> not sure if this is pugs ,.. or me

[16:59] <stevan> oh well,.. I will look closer after lunch 

[16:59] * stevan food &

[17:03] <gaal> I still don't see the problem. That is a simple proposition, and it happens to be true as well.

[17:04] <theorbtwo> But on feb 1st, it was Autrijus Tang who started the Pugs project.

[17:05] <gaal> "I started writing this sentence at 19:04, IST" is also a simple proposition that happens to be true.

[17:05] <gaal> Ahhhh, OK.

[17:05] <gaal> Well, this has been addressed by theories of reference.

[17:06] <gaal> I forget who it was that made the point about referential failures.

[17:06] <theorbtwo> Thus my original statement -- that I am having container/value problems.

[17:06] <gaal> Suppose I say to you "see that guy drinking gin over at the bar?"

[17:07] <gaal> (and he happens to in fact be drinking ouzo)

[17:07] <theorbtwo> Hmm...?

[17:07] <gaal> we may have been referring successfully to the same person.

[17:07] <Smari> gaal: Couldn't you clobber that with a fuzzy predicate?

[17:08] <theorbtwo> The question is more if "Last week, the guy over by the bar drinking ouzo killed a man in Reno."

[17:08] <gaal> Smari: what do you mean clobber? Could I have gone and said, "see that guy drinking a clear liquid at the bar?"

[17:09] <theorbtwo> Now, assuming we aren't in Reno, could that sentance possibly be correct?

[17:09] <Smari> gaal: Assume a truth value due to high probability.

[17:09] <gaal> Sure I could have, but people communicate effectively w/o hedges like that all the time.

[17:09] <theorbtwo> I would you have to say "...the guy who is now over by the bar..."

[17:09] <Smari> Alas, I found out 10 minutes ago that I couldn't take a course in symbolic logic next term, because it clashes with a manditory course in metric space theory. Blehrg.

[17:09] <gaal> Smari: I don't think probabilities need enter the picture.

[17:10] <Smari> gaal: Aye, that's true.

[17:10] <theorbtwo> s/I would you/Or would you/

[17:11] <Smari> theorbtwo: Wouldn't current time be asumed?

[17:11] <gaal> theorbtwo: most metaphysics worth their salt can deal with name changes. If not, consider it a good reason to change metaphysics. :)

[17:12] <gaal> "George Orwell wrote _1984_ in 1948"

[17:13] <gaal> It isn't his real name. And even if he took the alias *after* 1948, it would be reasonable to call that proposition true.

[17:22] <theorbtwo> I was unaware that George Orwell was a pen name.

[17:25] <Smari> theorbtwo: His real name was Eric Arthur Blair IIRC

[17:42] <stevan> gaal: ping

[18:10] <stevan> gaal: cancel ping :)

[18:18] <svnbot6> r8371 | stevan++ | PIL/Native/Bootstrap.pil

[18:18] <svnbot6> r8371 | stevan++ | - skeleton for Roles and Role system bootstrapping (no implementation)

[18:18] <svnbot6> r8371 | stevan++ | t/pil/MRO.t & t/pil/bootstrap.t

[18:18] <svnbot6> r8371 | stevan++ | - added some basic tests for ::Role, moved other tests around

[18:18] <svnbot6> r8371 | stevan++ | Test::PIL::Bootstrap

[18:18] <svnbot6> r8371 | stevan++ | - added explicit :r flag to Pipe::open call, didn't help though :/

[18:26] <clkao> why oh why oh why the smoke run is not working, but direct invocation works for jsperl5

[19:08] <rafl> nothingmuch: ping

[19:36] <nothingmuch> rafl: pong

[19:37] <rafl> nothingmuch: See #catalyst

[21:23] <gaal> stevan: pong but false

[21:27] <stevan> gaal: :)

[22:03] <dduncan> audreyt, the openfoundry is off again

[23:53] <audreyt> dduncan: yes, expect it to be back within 1~2hrs

[23:53] * audreyt backlogs

[23:53] <audreyt> mm, antiping packets

[23:54] <clkao> audreyt!!

[23:54] <clkao> 21 hours to my flight

[23:55] <audreyt> theorbtwo: valid reference frames assumes dynamic scoping, as gaal demonstrated

[23:55] <audreyt> theorbtwo: so it's not lexical but depends on the env frame carried by the caller (you)

[23:55] <audreyt> which is true as no document canlexically determine the extent of all its references

[23:55] <audreyt> clkao: congrats!

[23:56] <clkao> 38 hours to be sit in hotsprings

[23:56] <audreyt> woot

