[00:50] <autrijus> whew :)

[00:50] <rep> ahhh i hate visas/work authorizations.

[00:50] <svnbot6> r7585 | autrijus++ | * "Larry was a mariner", after first SEE session:

[00:50] <svnbot6> r7585 | autrijus++ |   Stanza 1&2 done, 3..6 generally reviewed, still half to go.

[00:50] <autrijus> rep: indeed :/ most unpredictable and painful

[00:51] <geoffb> Welcome back, autrijus 

[00:51] <autrijus> thanks. wordsmithing is fun, although very demanding

[00:52] <geoffb> Don't I know it!

[00:52] * autrijus praises allison for general poetic cluefulness

[00:56] <svnbot6> r7586 | autrijus++ | * larry_mariner.txt: add pronounciation hint for \n+ and \w+

[01:02] <svnbot6> r7587 | autrijus++ | * larry_mariner.txt: reformat into 4-line paragraphs.

[01:02] <svnbot6> r7587 | autrijus++ |   that's it for today for me...

[01:08] <svnbot6> r7588 | autrijus++ | * larry_mariner.txt: small trivial general typo fix.

[01:15] <stevan> autrijus: I think I am going to give up on the class methods thread

[01:15] <stevan> I think i have made my point, which is that there is always another way, which is many times better

[01:16] <autrijus> ...and more general to boot

[01:16] <autrijus> or at least can be made so.

[01:16] <stevan> yes

[01:16] <stevan> but cultural pressures are such that it should be done

[01:17] <stevan> I will add it into the metamodel in the next few days

[01:17] <autrijus> so it would be done. *nod*

[01:17] <stevan> I think all told, it will be about 15 lines of code :)

[01:17] <autrijus> at least this thread did not fizzle and went nowhere like others.

[01:17] <autrijus> and raised clear points for once :)

[01:18] <stevan> yes, I am probably going to bring up some of larrys subpoints again

[01:18] <autrijus> cool

[01:18] <stevan> in particular the "autogenerated class accessors are submethods"

[01:18] <stevan> and I wanna push the class-role interchange-ability

[01:18] <autrijus> i.e. class accessors don't inherit?

[01:19] <stevan> class attribute accessors

[01:19] <stevan> because the state they access if not inherited

[01:19] <autrijus> yeah

[01:19] <stevan> if you want them to inherit,.. write em yourself

[01:19] <stevan> :)

[01:19] <autrijus> right, they are normal lexicals etc

[01:19] <autrijus> exactly

[01:19] <stevan> yup

[01:19] <autrijus> yeah, point.

[01:19] <stevan> ok, time for me to get back to building shelves

[01:20] <stevan> adios &

[01:20] <autrijus> adios!

[01:26] <autrijus> adamc00: hi :)

[01:26] <wolverian> what a thrill it is to use >>= to get rid of a <-

[01:26] <wolverian> now I think I will sleep :) cheers

[01:26] <rep> hehe

[01:26] <rep> night

[01:27] <autrijus> beware of the point-less-wock, my son! the dots that bite, the parens that catch! :)

[01:49] <geoffb> Oh, stevan, fyi, the -Ofun blog broke 1000 . . . thanks for hiring that offshort team!

[01:52] <autrijus> clickfarm++

[01:52] <obra> clickfarm?

[01:53] <autrijus> obra: stevan joked about turning his company's horde(?) of resources to clicking geoffb's -Ofun blog

[01:53] <autrijus> so his rank can improve

[01:53] <rep> heh

[01:54] <obra> nice

[01:54] <obra> . o O { Slashdot didn't }

[01:54] <obra> ?

[01:54] <geoffb> .oO( Do people still spend money on clickfarming? )

[01:55] <geoffb> obra, /. made a big difference.

[01:56] <geoffb> However, either A) the number of people who care about -Ofun are small (I doubt it), B) O'Reilly's hit counters suck (I doubt that, since that's how online journalism makes money), or C) the caching infrastructure of the internet actually works.

[01:56] <geoffb> s/internet/web/

[01:58] <autrijus> "I thought the Internet is just a website?"

[01:58] <autrijus> </troll>

[02:02] <geoffb> autrijus, :-P

[02:03] <geoffb> I have had to deal with way too many "The internet is broken!" calls

[02:03] <geoffb> None of which were technically correct.  ;-)

[02:04] <autrijus> sure, otherwise you'd be working in CERT :)

[02:04] <geoffb> Now there's a depressing job . . . 

[02:37] <putter> stevan: re class attributes, given class C{ our $x; class C::D{ mumble }} , is $x visible in mumble?  if no, what about for anon classes?

[02:41] <putter> re the api in 25_example_People_Employee.t, if   our $.pop; is accessed by ->class::pop(), what about  our @.pop; ?

[02:52] <putter> stevan: is $pkg->FETCH('{}')  a public api?  if not, is there an official way to check whether a name occurs in %:namespace?

[03:02] *** khisanth_ is now known as Khisanth

[03:18] <putter> steven: (just in case you backlog), any suggestions on doing  Int.new(42) and such?   Ie, I'd like a positional rather than a named constructor, to get away from the clutter of Int->new('$.unboxed'=>42).  But it will be very inner-loopy, so I hesitate to just slap in a simple_new() method.  any thoughts?

[03:19] <putter> s/clutter/clutter and abstraction busting/

[03:20] <putter> obviously not just Int, but Bit/Bool, etc too.

[03:31] <putter>  

[03:32] <putter> anyone: what is undef?  I would have thought is was an instance of a class Undef.  it's not a singleton, as one can do  "undef but dances_jigs".  but Undef isnt listed in S06.

[04:09] <putter> hmm, Rat isnt on https://svn.perl.org/perl6/doc/trunk/design/syn/S06.pod  Rational-ity gone?

[04:24] <mrborisguy> this may be more of a Parrot question than a Perl6, but help me out here...

[04:24] <mrborisguy> will it be possible for me to write some sort of function/sub in another language, say a functional one that runs on parrot

[04:24] <mrborisguy> and then use it in a Perl6 script?

[04:27] <mrborisguy> I guess, kinda meaning make a library out of some other language that I can use in p6

[04:31] <PerlJam> mrborisguy: yes, there will be ways to do that.

[04:31] <PerlJam> That's one of the prime benefits of parrot.

[04:32] <PerlJam> Languages that target parrot (python, php, etc) suddenly get access to CPAN

[04:38] <mrborisguy> ah, I wasn't sure if Arrays had to be implimented the exact way, or something

[04:39] <mrborisguy> you know, something crazy like that

[05:23] <putter> &

[05:30] <Khisanth> PerlJam: benefit to who? :)

[06:33] *** khisanth_ is now known as Khisanth

[07:34] <spinclad> autrijus: in haskell.xul, s/Fibbonaci/Fibonacci/

[07:39] <coral> i was thinking of perl6 when i read http://web.engr.oregonstate.edu/~erwig/papers/InductiveGraphs_JFP01.pdf

[07:39] <coral> thought it might be interesting to y'all

[08:17] <gaal> print (greet greet), that's meant to be an error?

[08:40] <gaal> eric256, ping

[08:44] <gaal> "tall" and "camel" hardly rhyme...

[10:11] <ods15> gaal: ! you're online!

[10:11] <ods15> you should be fasting!

[10:32] <gaal> i should?

[10:33] <gaal> what i should be doing is riding around town, but i'm feeling sort of lazy today.

[10:36] <svnbot6> r7589 | scook0++ | * Simple parse tests for various sub-call forms

[10:36] <svnbot6> r7589 | scook0++ | (of these, only `succ .(1+2) * 30` is broken currently)

[10:48] <svnbot6> r7590 | gaal++ | minor monadic golfage

[10:49] <ods15> :)

[10:58] <autrijus> gaal: can I s/liftM/fmap/ ?

[10:59] <wolverian> argh, my university apparently requires me to use Java for most programming courses. this sucks.

[10:59] <autrijus> besides even more golfing, fmap fits my brain much better...

[10:59] <gaal> autrijus: sure :)

[10:59] <scook0> autrijus: I agree, I find fmap easier to read than liftM for some reason...

[11:00] <autrijus> scook0: because it's describe things more denotationally

[11:00] <autrijus> than operationally, I guess

[11:00] <scook0> yeah

[11:00] <scook0> liftM transforms the function, then applies it

[11:00] <scook0> fmap applies the function over the argument

[11:00] <autrijus> yup

[11:00] <gaal> I don't have a deep understanding of this stuff yet. I'm using golf as a method of learning.

[11:01] * autrijus praises functors and natural transformations

[11:01] <scook0> I also can't stand flip -- I much prefer reverse sections

[11:01] <autrijus> gaal: cool :)

[11:01] <scook0> functional golf can be fun

[11:01] <scook0> especially when the idea is to make it *easier* to read :)

[11:02] <gaal> I just knew that a case returning Nothing -> Nothing *had* to be golfed :)

[11:02] <autrijus> yup :)

[11:05] <autrijus> when I'm preparing the slides... it occured to me that most of the perculiar features in hs is there just so we can fearlessly golf^Wrefactor things, without putting the entire program logic into one's head

[11:06] <autrijus> aka the power of Reason -- like in the snow crash novel -- http://www.marstar.ca/images/Automatics/M2HB/M2-M63.jpg

[11:07] <gaal> autrijus: Reason was a Gatling gun 

[11:07] <gaal> IIRC

[11:07] <autrijus> really. hm

[11:07] <autrijus> you are probably right... I misrecalled

[11:08] <autrijus> something like this then http://www.chinfo.navy.mil/navpalib/factfile/weapons/phal-blk1b.gif

[11:08] <gaal> http://www.clubhyper.com/reference/images/Gau8a_a.jpg

[11:08] <autrijus> wow, that's good

[11:09] <gaal> it features strong typing, too, in a way.

[11:09] <gaal> you definitely know when you're at the wrong end of this fellow.

[11:09] <autrijus> and static, too

[11:09] <autrijus> if you stay at the right end you'll probably remain there

[11:11] <gaal> yes, it's very haskellish to call something static when it fires fifty rounds a second.

[11:11] <autrijus> :D

[11:12] * autrijus goes lifting -- I mean fmaping -- this picture into the talk

[11:14] <gaal> you encounter the most ridiculous things when browsing wikipedia:

[11:14] <Juerd> I'm going to sell my old laptop

[11:14] <gaal> # http://en.wikipedia.org/wiki/X-303

[11:14] <Juerd> This sucks :)

[11:14] <gaal> how can a phalanx gun work in space?

[11:14] <Juerd> I haven't touched it in weeks, but I'm using it now to test it

[11:15] <Juerd> And I don't want it gone :)

[11:15] <gaal> Juerd: you need the $$$?

[11:15] <Juerd> Yes

[11:15] <Juerd> Well, I don't exactly really *need* it

[11:15] <Juerd> I could do without

[11:15] <Juerd> But it'd be a hell of a lot more comfortable with the extra cash :)

[11:15] <gaal> albeit laptopless.

[11:16] <Juerd> I have a new laptop

[11:16] <gaal> ah :)

[11:16] <svnbot6> r7591 | autrijus++ | * change liftM to fmap for more golfing value...

[11:16] <Juerd> I wonder what the old one is still worth

[11:16] * gaal praises Hoogle

[11:20] <scook0> Hoogle is nice

[11:21] <scook0> though I wish it had GHC functions as well

[11:21] <svnbot6> r7592 | autrijus++ | * somehow syck wants to include <config.h>, but I suspect

[11:21] <svnbot6> r7592 | autrijus++ |   it's not the same config.h as GHC, and hence causing

[11:21] <svnbot6> r7592 | autrijus++ |   putter's failure on x86_64.  To fix this properly would

[11:21] <svnbot6> r7592 | autrijus++ |   be to supply Syck's config detection as part of our

[11:21] <svnbot6> r7592 | autrijus++ |   Makefile.PL / configure process, but here is a bandaid...

[11:25] <gaal> scook0: any idea what it would take to add them?

[11:26] <scook0> gaal: no, sadly...

[11:33] <wolverian> Juerd, what kind of a laptop is that you're selling?

[11:36] <Juerd> wolverian: IBM R40

[11:36] <wolverian> Juerd, do you have a buyer already? 

[11:36] <Juerd> wolverian: centrino, 1.3 GHz, 768 MB, 40 GB, 15", 802.11b, 10/100, ultranav

[11:36] <Juerd> No

[11:37] <Juerd> One thing is broken: the nic. I have a xircom realport to replace the functionality

[11:37] <Juerd> (Because dongles suck.)

[11:37] <wolverian> ah.

[11:37] <wolverian> what OS are you running on it?

[11:38] <Juerd> I've always used linux on it

[11:38] <wolverian> right. how much are you asking for it?

[11:38] <Juerd> But it'll be sold with the factory default installation, if the buyer wants that

[11:38] <wolverian> or are you going to put it out for auction?

[11:39] <Juerd> I haven't investigated price options yet

[11:39] <Juerd> I'd like to get 650 for it, and I think that's reasonable, but I'll have to see ebay and such first to see if it's a good price

[11:39] <wolverian> I see R40E (which is a different setup) being sold at 600e to 900e 

[11:39] <Juerd> -e is bad.

[11:39] <wolverian> okay.

[11:40] <wolverian> no .11g?

[11:40] <wolverian> argh, have to go!

[11:40] <Juerd> no g

[11:41] <Juerd> Bye

[11:44] <c0nspiracy> if (isDA) {

[11:44] <c0nspiracy>                 populateProfileGroupList();

[11:44] <Juerd> .oO( isNYET )

[11:44] <c0nspiracy> sorry

[11:44] <Juerd> hm?

[11:45] <c0nspiracy> hit paste by accident

[11:45] <scook0> Juerd: *groan*

[11:45] <Juerd> Why groanst thou?

[11:48] <scook0> Juerd: thy pun doth deserve it so

[11:49] *** rafl_ is now known as rafl

[11:50] <Juerd> :)

[11:57] <svnbot6> r7593 | scook0++ | * Can't let gaal & autrijus have all the golfing fun :)

[12:57] <Juerd> We have a copier and toothpaste

[12:58] <xerox> Ciao!

[13:09] <svnbot6> r7594 | iblech++ | * Pugs.Parser: Unbreak the build (3-char patch).

[13:09] <svnbot6> r7594 | iblech++ | * Pugs.Run: Added a comment: "If you change the name or contents of

[13:09] <svnbot6> r7594 | iblech++ |   $?PUGS_BACKEND, be sure to update all t/ and perl5/{PIL2JS,PIL-Run} as well."

[13:09] <svnbot6> r7594 | iblech++ | * t/syntax/parsing_sub_calls.t: skip test under PIL2JS and PIL-Run (needs eval()).

[13:09] <svnbot6> r7594 | iblech++ | * Usual svn props.

[13:12] <gaal> yay! I just managed my first pugs build+smoke with coLinux, and it's not significantly slower than straight win32!

[13:13] <xerox> gaal++ :D

[13:13] <gaal> coLinux++ :)

[13:15] <svnbot6> r7595 | scook0++ | * More lambda-golf: `when not` => `unless`

[13:39] <svnbot6> r7596 | iblech++ | * Moved t/syntax/parsing_* to new dir t/syntax/parsing/.

[13:39] <svnbot6> r7596 | iblech++ | * Merged t/syntax/string_parsing.t into t/builtins/strings/string_interpolation.t.

[13:39] <svnbot6> r7596 | iblech++ | * Merged t/data_types/parse_hash_ref.t into t/var/autoref.t and added some more

[13:39] <svnbot6> r7596 | iblech++ |   tests to it.

[13:39] <svnbot6> r7596 | iblech++ | * Renamed t/pugsbugs/parse-fail.t to t/pugsbugs/slow-parse-fail.t.

[13:39] <svnbot6> r7597 | iblech++ | * Moved the various *interpolation* tests into new dir t/syntax/interpolation/.

[13:39] <svnbot6> r7597 | iblech++ | * pugs::hack: Added entry for t/types/.

[13:40] <rafl> OK, new pugs 6.2.10 packages at http://perlcabal.org/~rafl/debian/ - testers welcome.

[14:13] <svnbot6> r7598 | iblech++ | * examples/output/overloading, t/operators/adverbial_modifiers.t: Fixed

[14:13] <svnbot6> r7598 | iblech++ |   expectations of .perlifications WRT (e.g.) "\t" now stringifying as "\t"

[14:13] <svnbot6> r7598 | iblech++ |   (instead of '[literal tab here]').

[14:15] <clkao> `/aw

[14:18] <rafl> gaal: ping

[14:35] <nothingmuch> autrijus: i think the haskell talk has slightly too much syntax

[14:36] <eric256> but thats a slick interface

[14:36] <nothingmuch> for example, the fib = 0 : 1 [ x + y | (x, y) <- fib `zip` tail fib ] one

[14:36] <nothingmuch> yeah, it is

[14:36] <nothingmuch> that's a lot of syntax in one example

[14:36] <nothingmuch> i think it's better illustrated using map, or even omitted

[14:36] <autrijus> nothingmuch: but I wanted to show comprehensions

[14:37] <nothingmuch> is there a really good reason to show them?

[14:37] <autrijus> the aim of the talk is to enable someone who knows nothing about haskell to not freak out when reading code

[14:37] <nothingmuch> hmm

[14:37] <autrijus> uhm because they are used in production?

[14:37] <autrijus> I'm not sure... 

[14:37] <autrijus> I don't use `zip` btw

[14:37] <autrijus> I used a parallel comprehension

[14:37] <autrijus> precisely to avoid zip 

[14:37] <nothingmuch> it's just that their syntax is sooooo dense for imperative heads

[14:37] <nothingmuch> oh, i see

[14:38] <luqui> maybe have a slide that introduces comprehension before the infinite fibo

[14:38] <autrijus> 0 : 1 : [ x+y | x <- fib | y <- tail fib ]

[14:38] <nothingmuch> yeah, that's more readable than the zip one

[14:38] <nothingmuch> hmmm...

[14:38] <autrijus> luqui: hm, think an simpler comprehension example?

[14:38] <nothingmuch> since you mentioned you're really short on time I thought that was a good candidate for simplification

[14:39] <autrijus> nod...

[14:39] <nothingmuch> "type rocks, typing sucks" - please explain ;-)

[14:39] <luqui> autrijus, in "people need more time to think about that", people refers to people on the list, I gathered

[14:39] <autrijus> luqui: ahh ok.

[14:39] <luqui> typing as in on a keyboard

[14:39] <autrijus> nothingmuch: types are cool, but having to _type down_, as in keying in, sucks

[14:39] <wolverian> autrijus++ # for knowing it's 0,1 not 1,1

[14:39] <nothingmuch>  ah

[14:40] <eric256> just a random question...since haskel cares about space..shouldn't the code be left aligned instead of centered?

[14:40] <autrijus> nothingmuch: it's a -Opun

[14:40] <nothingmuch> yeah

[14:40] <autrijus> eric256: yes, see my journal

[14:40] <autrijus> will be <pre> properly later

[14:40] <autrijus> content first

[14:40] <eric256> ahh. yes ignore me

[14:40] <eric256> lol

[14:40] <autrijus> eric256: never :)

[14:41] <nothingmuch> "how type inferrence works" - i think an intermediate frame is in order

[14:41] <autrijus> nothingmuch: my dilemma is such: I very much need to show concise example from killer apps to let audience get a feel of really high level symbolic power

[14:41] <nothingmuch> (++) :: [a] -> [a] -> [a]

[14:41] <autrijus> nothingmuch: but to even get a bit of feeling, you can't skim on the syntax and data types

[14:41] <nothingmuch> (++) "Hello" :: [Char] -> [Char]

[14:42] <luqui> autrijus, so just show the fixpoint combinator.  heh, not.

[14:42] <nothingmuch> can't you get more than 45 mins?

[14:42] <nothingmuch> an hour and 15, or an hour and a half seems more adequate

[14:42] <autrijus> luqui: you mean...  y f = f (y f)   ?

[14:42] <autrijus> nothingmuch: right, but sadly no

[14:42] <luqui> yes that one, but show it being used.  except don't.

[14:43] <autrijus> thank you :)

[14:43] <autrijus> nothingmuch: re (++) "Hello", good point

[14:43] <luqui> nothingmuch, that's a nice example

[14:43] <nothingmuch> autrijus: i think the way inferrence works is pretty simple if you just say how:

[14:44] <nothingmuch> it goes down the AST, and it makes assertions about the relations using links between things

[14:44] <nothingmuch> and then it goes up the tree unifying the links

[14:44] <autrijus> nothingmuch: help me explain what a AST is in two slides ;)

[14:44] <nothingmuch> oh, right

[14:45] * nothingmuch kind of forgot he didn't know what that was till he came to pugsland

[14:45] <luqui> yeah, and that's explaining it from an implementation perspective

[14:45] <autrijus> nothingmuch: yeah... I made 3x more slides

[14:45] <autrijus> and killed them all

[14:46] <autrijus> all because I need to unlearn stuff continuously

[14:46] <nothingmuch> autrijus: i think the example with 'half' and currying is too complicated, because it introduces infixing

[14:46] <nothingmuch> i think you should do 'double = 2 *' instead

[14:46] <luqui> from a user perspective, you just say "it looks at your code, and figures out what you should have typed if you were giving explicit annotations"

[14:46] <nothingmuch> it really looks like there is a missing argument

[14:46] <nothingmuch> and do it with ghci

[14:46] <nothingmuch> :t *

[14:46] <nothingmuch> :t 2 *

[14:46] <nothingmuch> let double = 2 *

[14:46] <nothingmuch> :t double

[14:46] <autrijus> nothingmuch: point, fixed

[14:46] <nothingmuch> doublt 5

[14:46] <luqui> let double = (2 *)

[14:46] <eric256> acutaly i liked the currying examples

[14:47] <nothingmuch> eric256: it's a very nice example because infix syntax makes currying even cooler in haskell

[14:47] <autrijus> eric256: right, nothingmuch is just saying we should just show curry to the left

[14:47] <autrijus> as curry to the right is something peripheral (although extremely handy)

[14:47] <nothingmuch> do you get into infix syntax?

[14:47] <eric256> and i just learned a minute bit of haskel, but the slides flowed pretty well even without the assumed audio

[14:47] <luqui> nothingmuch, you mean section syntax?

[14:48] <nothingmuch> in the 'uc' example please don't forget to mention that toUpper is for chars, not like perl heads would expect

[14:48] <autrijus> nothingmuch: eg this?

[14:48] <autrijus> chr `map` [79,75] ? "OK"

[14:48] <nothingmuch> hmm

[14:48] <autrijus> nothingmuch: I had it, then decides it's peripheral as well

[14:48] <autrijus> takahashi is really frustrating in a way because you end up deleting far more than you write ;)

[14:49] <nothingmuch> forget ``, just note that 'x + y' is the same as '(+) x y'

[14:49] <autrijus> but it's worth it... it's like ninjatsu training or something

[14:49] <PerlJam> autrijus: isn't that the normal way of things?

[14:49] <autrijus> PerlJam: no, the MJD/Judo way never delete things

[14:49] <autrijus> they get converted to "digression slides", "pretty pictures" and "bonus sections in handout"

[14:50] <Jooon> autrijus: did you see this presentation http://www.identity20.com/media/OSCON2005/ ?

[14:50] <PerlJam> interesting.  I guess I've always done it the takahashi way then :)

[14:50] * nothingmuch didn't know you could invent circumfix datatype syntax

[14:50] <autrijus> nothingmuch: it's useful

[14:50] <luqui> autrijus, you can?

[14:51] <autrijus> data Exp = Var :-> Exp

[14:51] <luqui> oh.. that's, um, infix

[14:51] <autrijus> oh, er, sorry

[14:51] <autrijus> nothingmuch: you can't; it's prelude priviledge

[14:51] <nothingmuch> ah

[14:52] <luqui> but the infix constructors are quite nice

[14:52] <autrijus> but constructors that start with : are infix

[14:52] <nothingmuch> autrijus: the XUL stuff is very cool

[14:52] <autrijus> and the reason for that is just generalizing the ":" constructor

[14:52] <autrijus> nothingmuch: yes, way cooler than s5

[14:52] <autrijus> esp. because you can link to it!

[14:52] <autrijus> Jooon: no, ooh, I'll get to waste more time

[14:52] <nothingmuch> di we have KWID in JS?

[14:53] <autrijus> probably not though should be easy to kludge and halfbaked version

[14:53] <autrijus> eric256: thanks for the positive review :D

[14:54] <nothingmuch> what about Textile?

[14:54] <autrijus> possible... or markdown

[14:54] <autrijus> Javascript is evidently the new Ruby

[14:55] <autrijus> because _all_ it has is eigenclasses! ;)

[14:55] <Jooon> autrijus: 15 minutes, very tight presentation, using his slides as subtitles to his talk. with pictures used as pictograms almost. the content of the presentation was pretty basic stuff, but it was very fun to see it "performed"

[14:55] <autrijus> Jooon: yeah, I'm trying to follow that idea. downloading

[14:56] <autrijus> so, in the function section in my talk.

[14:56] <autrijus> I can perhaps introduce three more concepts

[14:56] <autrijus> with max "don't freak out when you see this" value

[14:56] <autrijus> should I show lambda functions?

[14:57] <eric256> i would argue no. 

[14:57] <autrijus> the Show and Num classes?

[14:57] <eric256> although i understand them immediatly they arn't easy to read for the first 20 times. ;)

[14:58] <autrijus> explaining (gasp) "IO a" and RealWorld?

[14:58] <autrijus> how people write "for" loops using recursion?

[14:58] <autrijus> folding? (ugh)

[14:58] <autrijus> recursive datatypes aka Tree?

[14:58] <nothingmuch> i argue yes

[14:59] <nothingmuch> lambda functions help tie things together

[14:59] <nothingmuch> foo x = x + 2

[14:59] <nothingmuch> foo = \x -> x + 2

[14:59] <nothingmuch> tell them it's almost the same

[14:59] <autrijus> except for the monomorphic restriction

[14:59] <eric256> nothingmuch sure. but if this is just a "begging haskell" then that is something they can pickup when they dive in for real

[14:59] <autrijus> but I'm not going to say that ;)

[14:59] <nothingmuch> eric256: the issue is that since every symbol is a value

[15:00] <nothingmuch> and some values are functions, while others are data types

[15:00] <nothingmuch> when the listener gets that, things become easier

[15:00] <eric256> true

[15:00] <eric256> my big problem was that the \x notation kept yelling reference in my head

[15:00] <nothingmuch> 'map' is a value

[15:00] <eric256> and i lost track of the scope of x

[15:00] <nothingmuch> it's value is '\fun list -> ...'

[15:00] <nothingmuch> this helps realize how currying works

[15:01] <autrijus> nothingmuch: I can show it in the desugaring slide

[15:01] <nothingmuch> in that \f x -> f + y is really \x -> \x -> f + x'

[15:01] <nothingmuch> eep, i can't type at all

[15:01] <autrijus> http://perlcabal.org/~autrijus/tmp/haskell.xul?page=48

[15:01] <nothingmuch> i wish safari had XUL

[15:03] <nothingmuch> that's a nice example

[15:03] <autrijus> think I can use the proper greek for \ ?

[15:03] <eric256> that example looks good

[15:03] <autrijus> I'll explain it will be written as \ of course

[15:03] <nothingmuch> yes

[15:04] <autrijus> cool

[15:04] <nothingmuch> do you show how 'foo x y = ...' is desugared into single arg functions for currying goodness?

[15:04] <eric256> the example my tutorial used had continuations + folding + \ .....scared the crap out of me...so i was a little gun shy with \ ;)

[15:04] <autrijus> eric256: ah. :) so the \x -> case ... is probably fine with out

[15:04] <nothingmuch> eric256: \x -> ... is fun with map

[15:04] <autrijus> as a desugar with http://perlcabal.org/~autrijus/tmp/haskell.xul?page=47

[15:04] <nothingmuch> map (\x -> ...) list

[15:05] <nothingmuch> once you start using that you are no longer afraid

[15:05] <eric256> yea i liked those to going together.

[15:06] <nothingmuch> autrijus: does the XUL package thingy have key bindings?

[15:07] <nothingmuch> hah! http://www.haskell.org/hawiki/AntiBuddha

[15:08] <luqui> wow, that's a little... hostile

[15:10] <eric256> i thought  it was pretty funny

[15:10] <eric256> lol

[15:10] <nothingmuch> luqui: i'm guessing that whoever made a perl binding has some sympathy for perl

[15:11] <luqui> yeah...

[15:12] <luqui> oh, I finished the backend to my L::AG rewrite

[15:12] <luqui> now all that's left is syntax and error checking (the latter of those is the one that scares me)

[15:13] <nothingmuch> luqui: at least i gave you a few tests to decide on

[15:13] <luqui> true, thanks :-)

[15:15] * eric256 's database slave is now only 124k seconds behind and closing fast. ;)

[15:15] <luqui> lazy stuff is really hard to debug...

[15:15] <nothingmuch> luqui: true

[15:21] <gaal> am i imagining things, or is the takahashi-xul javascript about as big as the js runcore? :)

[15:22] <autrijus> Jooon: aha, another lessig style user

[15:23] <autrijus> Jooon: it's very a very well presented talk.

[15:23] <autrijus> Jooon++ # thanks for the link... I get to rethink about the b/w vs w/b color issue

[15:23] <autrijus> gaal: probably you are right :)

[15:30] <autrijus> nothingmuch: yes. pgup/down

[15:30] <nothingmuch> ah

[15:30] <gaal> hee, that's a video clip, not a talk!

[15:31] <autrijus> I can see code better for white on black

[15:32] <autrijus> so naturally my slides are made like that

[15:32] <gaal> that == the Dick H talk, not yours

[15:32] <autrijus> yup

[15:32] <autrijus> but all other takahashi users -- dickh included -- uses black on white

[15:32] <theorbtwo> OTOH, the viewing conditions are somewhat different with a big projector vs your laptop.

[15:32] <autrijus> maybe I'm missing something important.

[15:32] <autrijus> theorbtwo: true.

[15:36] *** stevan_ is now known as stevan

[15:37] <xerox> autrijus: woot, news on the takahashi XUL app?

[15:38] <autrijus> xerox: thanks to dickh I changed fonts, added some function examples, about to add something more

[15:39] <autrijus> xerox: 16:56 < autrijus> I can perhaps introduce three more concepts

[15:39] <autrijus> 16:56 < autrijus> with max "don't freak out when you see this" value

[15:39] <autrijus> suggestions?

[15:39] <xerox> Cool.  I'll check it afterwards :D

[15:39] <autrijus> ok :)

[15:39] <xerox> What are you referring about, exactly?

[15:39] <gaal> comonads! *duck*

[15:39] <xerox> Hmm, they are obscure.

[15:40] <xerox> Composable continuations, I'd say!

[15:40] <gaal> zygomorphisms?

[15:40] <xerox> Dunno really!

[15:40] <nothingmuch> wow, that's a well prepared talk

[15:40] <xerox> nothingmuch: url?

[15:41] <nothingmuch> xerox: /lastlog Jooon 

[15:43] <gaal> interesting. autrijus, remember brad who was here when we rolled out '.10?

[15:43] <gaal> he's the guy behind openid.net

[15:43] <gaal> which turns out to be pertinent to the dickh talk

[15:43] <xerox> gaal: is too much to ask for an explanation of 'zygomorphisms'?

[15:43] <autrijus> gaal: ah. nod

[15:43] <gaal> it is if you want to ask me about it :)

[15:44] <xerox> :(

[15:44] <gaal> just one of the obscure terms from wrong end of the the Evolution page

[15:44] <gaal> s/wrong/far/

[15:44] <autrijus> lol

[15:45] <Juerd> Opinions please

[15:45] <autrijus> I like the "tenured prof" one

[15:45] <Juerd> A black t-shirt, white text on front:

[15:45] <autrijus> fac n = product [1..n]

[15:45] <Juerd> s:g/5/6/;

[15:45] <gaal> Which reminds me of Analytic and Algebraic Topology of Locally Euclidean Metrization

[15:45] <gaal> of Infinitely Differentiable Riemannian Manifold

[15:45] <autrijus> Juerd: good idea.

[15:45] <gaal> (Bozhe moi!)

[15:45] <Juerd> Think it'll sell?

[15:46] <xerox> Later!

[15:46] <autrijus> the golfer in me immediately suggests tr///

[15:46] <autrijus> ;)

[15:46] <Juerd> I have to have 10 made to get normal prices

[15:46] <Juerd> autrijus: Except Perl 6 tr is no longer as consise

[15:46] <Juerd> concise

[15:46] <Juerd> And no longer tr/// :)

[15:46] <autrijus> y/// neither, yeah

[15:46] <rafl> Hey gaal. Please test the new pugs package from http://perlcabal.org/~rafl/debian/ - I think those will be uploaded if you don't find something bad.

[15:47] <gaal> rafl: sure!

[15:47] <autrijus> how sad. many a tournaments were won with y///... </offtopic>

[15:47] <autrijus> Juerd: so what's this for?

[15:47] <autrijus> I mean, the audience

[15:48] *** typester is now known as sleepster

[15:48] <rafl> gaal: It's the biggest package I maintain ATM (48k diff between upstream and debian version). Some testers make that easier.

[15:49] <theorbtwo> Hmm... I have an idea, now that I am about to leave, and would like to be able to backlog when I get back to find out what you guys think of it.

[15:49] <autrijus> theorbtwo: do tell

[15:49] <gaal> rafl: okay. if you have any things in particular you want me to look at, please tell

[15:49] <theorbtwo> The idea is a specialized search engine of things @Larry and $Larry say on perl6.*.

[15:50] <Juerd> autrijus: Perl people

[15:50] <theorbtwo> ...hopefully with the ability to annotate to "superseeded by", "superseeded in part by", etc.

[15:50] <Juerd> It's a shirt I'd like to have

[15:50] <Juerd> But to have it made economically, I need 9 others :)

[15:50] <Jooon> rafl: I was trying to see why I couldn't get that with apt. can you update Packages.gz?

[15:51] <rafl> gaal: Working backends (JS prelude should only be generated once, then it should simply work), ghc-pkg describe Pugs should show something useful. use perl5:Foo should work.

[15:52] <autrijus> Juerd: are you going to any conferences in the next year? maybe I can get a bunch made for the Winter 2005 edition of pugscode cafepress and hand you one for free

[15:52] <rafl> Jooon: No. The Packages.gz file was only there so I could use pbuilder on perlcabal.org with an unofficial package (Test::Tap::* wasn't in Debian yet at this time). I think I'll remove the Packages.gz now.

[15:52] <rafl> Jooon: You should be able to get it using apt from any Debian mirror soon.

[15:52] <Jooon> ok

[15:53] <rafl> Jooon: On the given URL there are only packages for testing from time to time. They might be broken at any point.

[15:53] <gaal> hmmm, i wonder why gpm won't work in colinux

[15:53] <Juerd> autrijus: I'm going to the post-oscon meeting next week

[15:53] <rafl> What's colinux?

[15:53] <Juerd> autrijus: (amsterdam.pm)

[15:53] <Juerd> autrijus: IIRC, cafepress doesn't do white on black

[15:54] <gaal> rafl: run linux as a win32 process. really nice. fast.

[15:54] <autrijus> Juerd: really. hm

[15:54] <Juerd> autrijus: It looks very cryptic, and I think white on black adds to that

[15:54] <Juerd> Or lime on black

[15:54] <autrijus> ah. nod

[15:54] <autrijus> amsterdam.pm is probably strong/geeky enough to support that :)

[15:55] <gaal> autrijus: dickh uses b on w to great effect in his talk. for the negative things :)

[15:55] <autrijus> gaal: yes. maye I can use it for section headings

[15:55] <autrijus> not sure.

[15:55] <Juerd> autrijus: Could you try and find out if cafepress prints on black?

[15:55] <Juerd> It's possible they changed things

[15:56] <rafl> gaal: Hrm.. I still prefer now running Windows. As a process or not. :-)

[15:56] <Juerd> I have to go home now

[15:56] <Juerd> Later

[15:56] <Juerd> afk

[15:56] <rafl> Bye Jooon 

[15:56] <rafl> Err, Bye Juerd 

[15:56] <Jooon> bye bye :)

[15:56] <gaal> rafl: me too, but this machine is nominally for games

[15:56] <gaal> and i hate rebooting, it turns out, even worse than i hate running a full-screen putty.

[15:57] <autrijus> Juerd: only green/yellow/pink.

[15:58] <rafl> gaal: Hey, there's netcat and blobwars and viruskiller and frozen-bubble and planet-pengiun-racer and ... :-)

[15:58] <autrijus> bbiab to...

[15:58] <autrijus> s/to/too/

[15:58] <rafl> gaal: Do you test the packages on that win32-linux-thingy?

[15:58] <gaal> netcat as a game is a nice idea :)

[15:58] <gaal> rafl: today's the first time i got pugs to compile there

[15:59] <gaal> well, just because only today i got the networking to work

[15:59] <gaal> my real linux box has insifficient ram for pugs hacking.

[16:00] <gaal> so far the only major gripe i have with it is that the console is *real* slow. but i should probably just putty to it.

[16:01] <gaal> rafl: so far so good on the packages.

[16:01] <eric256> is there a cleaner way to write $d = ($d+1) % 4; ??

[16:02] <rafl> gaal: Well, you have an account on feather, do you? I think feathers hardware is sufficient.

[16:02] <gaal> latency sucks :(

[16:02] <gaal> plus i don't want to test packaging on feather! :)

[16:02] <eric256> hmmm or more directly, i have an array of for values and i want to jump back to the first when i get to the last...any ideas?

[16:03] * eric256 has no latency issues with featehr

[16:03] <eric256> feather even

[16:05] <svnbot6> r7599 | eric256++ | Ported Spiral_Numbers code form perlmonks code snippets section.  Just a rough conversion to get it working, not very different than the p5 version.

[16:11] <eric256> databases are now within 80k seconds of each other...so exciting. lol

[16:11] <gaal> rafl: colinux:~> ghc-pkg describe Pugs

[16:11] <gaal> ghc-pkg: cannot find package Pugs

[16:12] <gaal> other than that, looking good.

[16:12] <rafl> gaal: libghc6-pugs-dev installed? It's also built from the pugs source package.

[16:12] <gaal> bbiab&

[16:12] <gaal> oh

[16:12] <gaal> is it there too?

[16:12] <rafl> Seems so: http://perlcabal.org/~rafl/debian/libghc6-pugs-dev_6.2.10-1_i386.deb

[16:12] <gaal> sec

[16:14] <gaal> looks like it's wokring, couple of Qs though

[16:14] <gaal> do we *want* to expose so many modules?

[16:14] <gaal> do we really depend on QuickCheck-1.0 ?

[16:15] <rafl> gaal: Cabal says so. I won't mess up with cabal again. :-)

[16:15] <gaal> i see a field hugs-options, no idea if this is some standard field but, well, we can't build on hugs :)

[16:15] <gaal> heh

[16:15] <gaal> okay, bbiab for real

[16:16] <gaal> (need a shower after B-day)

[16:16] <rafl> autrijus: What do you think about what gaal said?

[16:32] <Juerd> autrijus: Too bad

[16:35] <eric256> is there a way to make map modify the area it is maping on instead of a copy? i remember asking before but i forgot

[16:35] <eric256> map -> $x as rw { }; ??

[16:35] <eric256> ?eval my @a = (1..5); @a.map -> $x as rw { $x++ }; @a;

[16:35] <evalbot_7599> Error:  unexpected ">" or "-" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[16:36] <eric256> ?eval my @a = (1..5); map @a-> $x as rw { $x++ }; @a;

[16:36] <evalbot_7599> Error:  unexpected ">" or "-" expecting word character, "::", term postfix, operator, ":", ",", postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[16:36] <eric256> i guess by that point is should just use a for loop. makes more sense anyway

[16:39] <gaal> you want 'is rw'

[16:39] <gaal> does in-place map work now?

[16:39] <eric256> ?eval my @s = (1..5); .= as(" %2d") for @s;

[16:39] <evalbot_7599> Error:  unexpected "=" or "." expecting ";", statements or end of input 

[16:39] <gaal> rehi btw

[16:39] <eric256> ?eval my @s = (1..5); $_ .= as(" %2d") for @s;

[16:39] <evalbot_7599> undef 

[16:39] <eric256> ?eval my @s = (1..5); $_ .= as(" %2d") for @s; @s

[16:39] <evalbot_7599> ["  1", "  2", "  3", "  4", "  5"] 

[16:40] <eric256> shouldn't i be able to drop the $_ ?

[16:40] <eric256> ?eval my @s = (1..5);  for @s {  .= as(" %2d") }; @s

[16:40] <evalbot_7599> Error:  unexpected "=" or "f" expecting ";", statements or end of input reserved word 

[16:41] <eric256> ?eval my @s = (1..5);  for @s {  $_ .= as(" %2d") }; @s

[16:41] <evalbot_7599> ["  1", "  2", "  3", "  4", "  5"] 

[16:41] <eric256> did i imagine that i could drop $_ or is it a bug?

[16:43] <Limbic_Region> eric256 - if implemented, you should be able to use hyper-operators there

[16:43] <Limbic_Region> or map

[16:43] <eric256> @a>>.as($frm);  #would be nice

[16:44] <eric256> @a>>.=as($frm); 

[16:44] <Limbic_Region> I think you still need to assign though

[16:44] <Limbic_Region> @s = ....

[16:44] <Limbic_Region> but I haven't been keeping up so your guess is better than mine

[16:44] <eric256> lol

[16:45] <eric256> gaal how do i is rw on a map?   @a.map $_ is rw { } ??

[16:46] <gaal> -> $_ is rw

[16:46] <Limbic_Region> oh - map in a void context on purpose eh

[16:47] <eric256> ?eval my @s = (1..5); @s.map -> $_ is rw { $_++ );

[16:47] <evalbot_7599> Error:  unexpected ">" or "-" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[16:47] <eric256> ?eval my @s = (1..5); @s.map -> $_ is rw { $_++ };;

[16:47] <evalbot_7599> Error:  unexpected ">" or "-" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[16:47] <Limbic_Region> ?eval my @s = 1..5; @s.map -> $_ is rw { $_ .= as("%2d") }; @s;

[16:47] <evalbot_7599> Error:  unexpected ">" or "-" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[16:47] <eric256> no pretty and working way to do it that i can find. ;(

[16:47] <Limbic_Region> ?eval my @s = 1..5; @s.map -> $_ is rw { $_ .= as("%2d"); }; @s;

[16:47] <evalbot_7599> Error:  unexpected ">" or "-" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[16:47] <Limbic_Region> *shrug*

[16:48] * eric256 settles for for @s { $_ .= as($format) }; for the time being

[16:51] <svnbot6> r7600 | eric256++ | examples\spiral_numbers.p6 - Some cleanup and reduction.

[16:51] <iblech> eric256: See t/builtins/lists/mutating_listops.t; vanilla Pugs doesn't support mutating map. The syntax would be @array.map:{ $_ = ... } or, if you want to be explicit, @array.map(-> $_ is rw {...})

[16:53] <eric256> vanilla pugs? is there  a chocolate version i can get my hands on ;)

[16:53] <iblech> rafl: pong (you pinged my yesterday IIRC)

[16:53] <eric256> btw should the following eventualy work?    .= as("%2d") for @a;

[16:53] <iblech> eric256: vanilly pugs is the normal Haskell runcore, as supposed to pugs -BJS or pugs -BPerl5 (JavaScript/Perl 5 backend)

[16:54] <eric256> it doesn't currently like droping the $_...but i though that could be dropped before the .

[16:54] <eric256> ahh

[16:54] <iblech> Not sure... I also seem to remember that dropping the $_ is allowed, but it feels kind of weird

[16:55] <eric256> yea i realy want an inplace map...sorta.  @list.mutate:{ .as($frm) };

[16:56] <iblech> @list.map:{ $_ .= as($frm) } should work (and does in PIL2JS, module that .as is not yet implemented)

[16:56] <Limbic_Region> IIRC, there was a hot debate regarding the meaning of . without a prefix as in $self or $_ or whatever that went unresolved

[16:57] <Limbic_Region> Yet another reason why following the list is so darn frustrating

[16:57] <PerlJam> I believe it was resolved to .foo always means $_.foo

[16:58] <PerlJam> The the question became should $_ get $?SELF or not  :)

[16:58] <eric256> ?eval my @a = (1..5); @a.map:{$_++}; @a;

[16:58] <evalbot_7600> Error: Can't modify constant item: VInt 1 

[16:59] <iblech> eric256: If you have Spidermonkey's bin/js available: pugs -BJS -e 'jspugs> :e my @a = (1..5); @a.map:{$_++}; say @a;

[17:00] <iblech> 23456

[17:00] <iblech> err, pugs -BJS -e 'my @a = (1..5); @a.map:{$_++}; say @a'

[17:00] <iblech> works fine :)

[17:00] <iblech> food &

[17:01] <eric256> we need an eval bot that can use different backends. ;)

[17:02] <leo__> $ pugs -BJS -e 'my @a = (1..5); @a.map:{$_++}; say @a'

[17:03] <leo__> *** Precompiled Prelude doesn't exist yet; precompiling...

[17:03] <leo__> ...

[17:03] <leo__> Couldn't open "/home/eric256/auto/pugs/perl5/PIL2JS/Prelude.js" for writing: Permission denied

[17:03] <leo__> # just a try ;-)

[17:04] <eric256> hmm.

[17:04] <leo__> the prelude should probably created in some $HOME/.pugs_temp

[17:05] <leo__> or handled with auto magic

[17:05] <eric256> well i'll set the auto script to build the Perlude.js  automaticaly...if anyone has a trick on how to do that?

[17:05] <eric256> looks like just trying to use it works, but is there a better way?

[17:08] <eric256> looks like make install triggers it too../me waits to see

[17:13] <gaal> oh, eric256, i remembered something

[17:13] <gaal> after autrijus mentioned the collaborative editing in his journal,

[17:14] <gaal> i got a hankering to try it out myself.

[17:14] <gaal> want to do the inlined source prelude thing together?

[17:15] <gaal> or did you lose interest once you started building on feather? ;-)

[17:18] <brother> Shouldn't 'dante'.trans('abce-z'=>'ABCE-Z') return 'dANTE'?

[17:18] <eric256> well i got pugs compiling on windows now so its not so urgent

[17:18] <eric256> but i'd still love to help when i can

[17:19] <brother> with Prelude from 6.2.9 it returns 'dante' and with Prelude.pm from svn it loops forever

[17:20] <pasteling> "eric256" at 66.102.136.66 pasted "JS Error on Feather" (9 lines, 484B) at http://sial.org/pbot/13669

[17:22] <cognominal> Takahashi++ # http://piro.sakura.ne.jp/xul/xul.html.en

[17:23] <gaal> brother: it certainly shouldn't loop :)   write a test?

[17:23] <iblech> eric256: (back) hm, is /usr/bin/js missing on feather?

[17:24] <iblech> leo__: Yep. In the future, we'll probably need /var/cache/pugs/js/modules/Prelude.js with appropriate measures that no one can precompile a evil module and store it as Prelude.js

[17:24] <iblech> leo__: Meanwhile, you can use:

[17:24] <iblech> pugs -BJS --p6preludepc=Prelude.js --testpc=Test.js -e '...'

[17:25] <eric256> there is no js on feather

[17:26] <iblech> brother: Probably the problem is because pairs are still magical -- i.e. "ABCE-Z" got passed to trans by name (by the name "abce-z"). We're trying to change the spec, see p6l thread "Sane (less insane) pair semantics" and t/syntax/pairs.t

[17:26] <gaal> iblech: there's been some attempts at fixage in 6.2.10's trans. apparently they weren't enough :(

[17:26] <iblech> eric256: Ah. So apt-get install spidermonkey-bin is needed

[17:27] <iblech> gaal: nod...

[17:29] <kolibrie> Juerd: if you make those shirts, I'd buy one

[17:29] <brother> iblech: I can see the problem in each implementation of Prelide.pm

[17:30] <brother> the expand subfunction is malfunction in both cases

[17:30] <brother> gaal: How do I write a test for some expression not looping in infinity?

[17:32] <iblech> brother: Comment the actual test and add a fail "skipping hanging test"

[17:32] <iblech> brother: E.g.

[17:32] <iblech> skip "skipping hanging test"; # is foo(...), ...

[17:32] <gaal> point. we need to add loop protection to the harness, but com to think of it that isn't portable :(

[17:34] <gaal> bbiab

[17:35] <eric256> iblech can you ping juerd and get him to install that?  or maybe he'll see this convo.. ;)

[17:36] <brother> ok

[17:48] <Juerd> kolibrie: Good to know - thanks

[17:50] <Juerd> iblech: spidermonkey is now installed on feather, including dev package

[17:51] <eric256> thanks Juerd

[17:52] <eric256> yea -BJS now works on feather

[17:52] <eric256> should the auto build on feather be doing make install as well?

[17:54] <autrijus> you need root perm for that no?

[17:55] <eric256> well it wont let me install on my screen name...so probably

[17:55] <eric256> just wondering if that would make life easier....sometimes its a pain tracking down the right number of ../ ;)

[17:55] <eric256> if i prefix the build into my home directory would it install without root then?

[17:56] <autrijus> mayyybe.

[17:56] <autrijus> had not tried

[17:56] <eric256> lol

[17:56] <eric256> does prefix work now?  the INSTALL file still says no

[17:57] *** Lopo_ is now known as Lopo

[17:57] <autrijus> rafl, gaal: we *want* to expose many modules. we don't really dep on QC -- but PIL does -- and eventually new runcore too. hugs-options is unused.

[17:57] <autrijus> I toyed with the idea of only exposing Pugs.hs

[17:57] <autrijus> but I reasoned it can't hurt to expose everything at this stage.

[17:57] <mdiep> are namespaces in Perl6 flat, hierarchical, or unspecified?

[17:57] <autrijus> eric256: try and find out :)

[17:58] <autrijus> mdiep: hierarchical, specified, not implemented.

[17:58] <mdiep> autrijus: thanks. :-)

[17:58] <autrijus> :)

[17:59] <autrijus> for specs see S10..S12

[18:01] <iblech> Juerd: (back) cool, thanks :)

[18:01] <iblech> mdiep: And also see http://www.nntp.perl.org/group/perl.perl6.language/23019

[18:02] <eric256> ...anyone know a way to start mysql so that it can only be accessed from the shell?  for backing up?

[18:03] <cm> there's some safe startup flag IIRC..

[18:08] <autrijus> eric256: yes, set --bind-address=127.0.0.1

[18:08] <autrijus> or something along that line

[18:16] <brother> If I make a patch and some test cases for $string.trans, where do I send it to?

[18:20] <Limbic_Region> do you have a commit bit brother?

[18:21] <Limbic_Region> and if not, what is your email address

[18:22] <brother> nope, [email@hidden.address]
[18:22] <Limbic_Region> sending you a commit bit 

[18:23] <Limbic_Region> invitation will expire in 14 days so be sure to sign up and commit the patches/tests soon ;-)

[18:23] <Limbic_Region> are you using svn or svk?

[18:23] <brother> svn

[18:24] <Limbic_Region> ok - then I think it is svn add <file>

[18:24] <Limbic_Region> svn ci -m "message about why"

[18:25] <Limbic_Region> also - don't forget to update the AUTHORS file

[18:26] <Limbic_Region> if you need more assistance, don't hesitate to ask

[18:26] <brother> I'll do

[18:27] <Limbic_Region> and welcome aboard

[18:29] <Limbic_Region> brother - please confirm you received the email - last time I sent an invitation it got "stuck" or something

[18:34] <brother> confirmed

[18:34] <Limbic_Region> danke

[18:48] * Aankhen`` goes to sleep.

[18:48] <Aankhen``> G'night.

[19:11] <eric256> hmmm  can someone help me transfer files between two linux servers?

[19:12] <obra> man scp;man rsync

[19:13] <eric256> thanks

[19:16] <eric256> thanks obra++ that made my day

[19:18] <obra> actually useful? cool

[19:19] <eric256> extremely...normaly i ftp back and forth but this is WAY easier ;)

[19:20] <eric256> especialy since the servers didn't want to connect to each others FTP for some reason

[19:20] <obra> ah :)

[19:22] * eric256 wonders how many other people try to login to feather as root by accident

[19:48] * Limbic_Region pines for a p6 unpack that provides a way to "remember" where it left off in a string much like p5 regexen can

[19:49] <PerlJam> Limbic_Region: we call those things "iterators"  and we don't have enough of them  :)

[19:50] <geoffb> Limbic_Region, POS is exposed, right?  Seems like a simple wrapper . . . .

[19:53] <eric256> if i want to kill a process and kill pid isn't working? whats the next step?

[19:53] <brother> kill -9 <pid>

[19:53] <eric256> thanks

[20:04] <Limbic_Region> geoffb - POS has to do with regexen not unpacking

[20:05] <Limbic_Region> well, not necessarily the next step I would take eric256 as there are more aggressive (but still catchable) signals to try before -9

[20:06] <Limbic_Region> geoffb - imagine you are unpacking records of variable length where you need to read a couple of bytes that tell you how many more bytes to read for the current record

[20:06] <Limbic_Region> with traditional unpack, you need to keep track of how many bytes you have read in a $skip buffer (using the x format)

[20:06] <Limbic_Region> so next time you read you can start where you left off - having a built in mechanism would be so much nicer

[20:08] <Limbic_Region> see http://perlmonks.org/index.pl?node_id=499988 for an example of where it would come in handy (assuming the DNA strand was in a scalar and not being read from a file)

[20:08] <Limbic_Region> my solution fwiw probably breaks since the author is changing the 600k string to 6.5 million

[20:37] * eric256 curses MySQL

[20:40] <geoffb> Anyone know if L~R backlogs?

[20:40] <geoffb> Well, just in case:

[20:41] <geoffb> Limbic_Region, I was saying there is no reason that POS *couldn't* be applied with a wrapper func, to allow unpack and regexen to work together transparently.

[20:41] <geoffb> The fact that unpack and regexen don't like each other is something I regard as a historical artifact, actually.

[20:42] <geoffb> In fact, I can easily imagine the power of a protocol that could mix packed numerics with unpacked other data types,

[20:42] <geoffb> using rules to handle the unpacked parts and unpack to handle the numerics . . . .

[20:46] <Juerd> Heh. The high bid on my laptop is nigerian.

[20:46] <obra> um.

[20:46] <Juerd> They visit auction sites now.

[20:47] <Juerd> It would perhaps not be all that bad if something awful happened to that entire country.

[20:47] <Juerd> But I shouldn't say such things.

[20:47] <Juerd> Hello ,                                                                         

[20:47] <Juerd> I dont understand dutch very well ....But I just have to inform you that I      

[20:47] <Juerd> want to complete this deal asap.                                                

[20:47] <Juerd> I want to send the item to My in-law presently in Nigeria and i want            

[20:47] <Juerd> you to post the item  through tpgpost.

[20:47] <Juerd> etc, etc

[20:49] <gaal> Juerd: you probably like this site: http://www.419eater.com/

[20:49] <brother> Shouldn't this work: @kv = $k.isa(Str) ?? $k.split('') :: $k;

[20:49] <brother> as in parse and do something

[20:50] <brother> I get an "unexpected ":"\nexpecting operator or "!!"\nat <interactive> line 1, column 35"

[20:50] <eric256> ?eval my $k = "hello"; my @kv = $k.isa(Str) ?? $k.split('') :: $k; $k

[20:50] <evalbot_7600> Error:  unexpected ":" expecting operator or "!!" 

[20:50] <|uqu|> brother, ??:: is spelled ??!! NOW

[20:50] <eric256> ?eval my $k = "hello"; my @kv = $k.isa(Str) ?? $k.split('') !! $k; $k

[20:50] <evalbot_7600> \"hello" 

[20:50] <|uqu|> heh, had to capitalize because of the exclamation points, it seems ;-)

[20:51] <brother> Ohhh, newbie and my knowledge is already obsolete

[20:51] <Juerd> gaal: I know that

[20:51] <eric256> lol

[20:51] <|uqu|> brother, get used to it

[20:51] <Juerd> gaal: Backscamming takes too much time

[20:51] <|uqu|> we all pray for 6.0.0 when we're not allowed to break backwards compatibility anymore

[20:51] <chip> hey guys.  autrijus still about?

[20:51] <|uqu|> of course, assuming we like what it is the week we release :-)

[20:52] <|uqu|> seen autrijus

[20:52] <jabbot> |uqu|: autrijus was seen 2 hours 44 minutes 11 seconds ago

[20:52] *** |uqu| is now known as luqui

[20:52] <chip> darn

[20:52] <autrijus> hmm?

[20:52] <luqui> it appears so

[20:53] <dduncan> I like ?? !! a lot better than any previous spellings

[20:53] <autrijus> sigh, didn't get much done content-wise

[20:54] <luqui> it ain't bad, it ain't bad

[20:54] <autrijus> but format improved dramaticall

[20:54] <luqui> link?

[20:54] <eric256> ummm.. anyone know why two versions of MySQL (4.1 and 4.1.1 or something very close) would have very different permission tables?

[20:55] <autrijus> and my JS-fu improved as well ;)

[20:55] <autrijus> I wonder if I'll end up rewriting Spork in JS ;)

[20:55] <autrijus> luqui: http://perlcabal.org/~autrijus/tmp/haskell.xul

[20:55] <chip> autrijus: hi

[20:55] <autrijus> chip: hey!

[20:55] <chip> autrijus: I'm going to put up a lexvar sketch (only a few months overdue!) in a day or two

[20:56] <luqui> hooray, fixed-width left-aligned!

[20:56] <chip> autrijus: Please update me on your requirements ... I figure pugs has evolved so I should re-ask.  I do remember conversations though

[20:56] * luqui thinks perl should have pi.

[20:56] * gaal wishes for a FF extension that does real full-screen in one keystroke

[20:57] <dduncan> MySQL around that time was alpha version

[20:57] <gaal> luqui: that' like a two line patch to Prim.hs :)

[20:57] <autrijus> ?eval pi

[20:57] <evalbot_7600> 3.141592653589793 

[20:57] <autrijus> thank you, next question? ;) (that's from S29)

[20:57] <luqui> I thnk it's a zero line patch

[20:57] <gaal> make that a zero-line patch

[20:57] <dduncan> it only was declared stable at 4.1.8 ... so until then it is reasonable for things like permission tables to change

[20:57] <gaal> there's another WTDI...

[20:57] <gaal> ?eval $?PUGS_VERSION / 2

[20:57] <evalbot_7600> 0.0 

[20:57] <autrijus> iblechbot: you there?

[20:58] * luqui should read S29 and bring criticisms to p6l

[20:58] <luqui> so maybe we can officialize it

[20:58] <autrijus> chip: ok, you remember the hoisting?

[20:58] <dduncan> fyi, I keep getting this at make time: Can't locate object method "new" via package "File::Temp" at /Volumes/Programming160/Pugs_svn/pugs/perl5/PIL2JS/lib/PIL2JS.pm line 141.

[20:58] * eric256 breaks down crying in agony

[20:58] <eric256> lol

[20:58] <dduncan> perhaps that's another thing to bundle with the JS thing

[20:59] <dduncan> eric256, exactly what mysql do you have?

[21:00] <autrijus> dduncan: fixed, committing

[21:00] <eric256> on masterB: mysql  Ver 14.7 Distrib 4.1.13

[21:00] <autrijus> chip: each block/closure will declare all lexicals in its scope before entry.

[21:00] <dduncan> well, 4.1.13 is the newest

[21:00] <eric256> masterA: mysql  Ver 14.6 Distrib 4.1.5-gamma,

[21:01] <dduncan> why did you mention 2 alpha versions?

[21:01] <autrijus> chip: uplevel lexicals on both static (OUTER) and dynamic (CALLER) extent should be able to be looked up and enumerated efficiently.

[21:01] <eric256> there own Administrator will not connect to 4.1.13  it complains about the priviledge table lacking colums its expecting

[21:01] <dduncan> with your permission tables question

[21:01] <chip> autrijus: back; reading

[21:02] <chip> autrijus: hoisting means that it's OK to consider a lexical declared at the beginning of the scope, rahter than at the line where it first appears, yes?

[21:02] <autrijus> chip: yes.

[21:02] <autrijus> the range is no longer parrot's business as far as pugs is concerned

[21:02] <dduncan> hello chip, how's it going? ... fyi, at oscon portland I was the person sitting right in front of you on tuesday night

[21:02] <autrijus> it'll be resolved statically.

[21:03] <dduncan> you said then that you had a potential improvement in work

[21:03] <chip> autrijus: What about this:    our $x; sub foo { eval '$x' and return; my $x = 1; $x; }

[21:03] <autrijus> chip: Larry decrees: "erroneous".

[21:03] <chip> Well.

[21:04] <autrijus> chip: there are ways around it (it's the same problem as CALLER)

[21:04] <chip> Yes, same problem.  Huh

[21:05] <chip> OK, noted, will consider.

[21:05] <autrijus> namely, have each eval"" store a snapshot of symbol extents

[21:05] <autrijus> so $x in it gets rebound to $CALLER::OUTER::x

[21:05] <autrijus> but again if both %CALLER and %OUTER is static and efficient

[21:05] <autrijus> we can handle it in the codegen end.

[21:06] <dduncan> eric256, I'm looking at the mysql change log between your versions ... something may have been added in that time

[21:06] <gaal> autrijus: maybe this is more readable? `before ++ [pivot] ++ after` 

[21:06] * luqui thinks so too

[21:06] <gaal> for a newcomer.

[21:06] <gaal> dunno

[21:06] <autrijus> gaal: sure

[21:07] <chip> autrijus: I suppose we could also suggest a language-independent way to indicate 'this lex is out of scope right now, we suggest you ignore it'...

[21:07] <chip> "we" = "Parrot people"

[21:07] <autrijus> chip: sure, that would be fine with me

[21:07] <chip> but I'm digressing further.  I think I understand your req.

[21:07] <chip> autrijus: Will you be parsimonious in translating language blocks/closures into Parrot blocks/closures?

[21:07] <chip> if $cond { print } e.g.

[21:08] <chip> oh that's a bad example

[21:08] <chip> if $var { print $var }

[21:08] <autrijus> chip: Parrot is CPS, which means snapshotting and entering closures should really be as cheap as possible

[21:08] <autrijus> so I'll probably do that at first

[21:08] <chip> and if lexical list is static, then lexical mechanism shouldn't make things worse.  Got it

[21:08] <autrijus> yes. exactly.

[21:08] <autrijus> static means O(1) for arbitary depth on runtime

[21:08] <chip> OK then.  Glad you were here

[21:09] <autrijus> no prob :)

[21:09] <chip> wait, not O(depth)?

[21:09] <chip> oh, do you mean %OUTER or %CALLER?

[21:09] <autrijus> OUTER

[21:09] <autrijus> CALLER is O(n) of course

[21:09] <chip> OK just checking :-)

[21:09] <autrijus> CALLER is dynamic depth :)

[21:10] <luqui> plus, CALLER is O(1), because nobody ever looks up higher than one frame ;-)

[21:10] <autrijus> luqui: riiight... now how do I write &eval in perl6...

[21:10] <dduncan> eric256, I notice that MySQL's manual has, for the first time, been split up by major version rather than having one manual for all of them ... as a result, some links are broken right now

[21:10] <dduncan> can probably work around though

[21:10] <luqui> autrijus, oh.  I get it.

[21:11] <luqui> it's O(n) even if you look up just one frame

[21:11] <luqui> that's what we get for saying "n" without defining it

[21:11] <autrijus> lol :)

[21:11] <autrijus> forall n. n

[21:11] <svnbot6> r7601 | autrijus++ | * PIL2JS.pm: Don't use File::Temp->new for bugward combatability.

[21:11] <svnbot6> r7601 | autrijus++ |   Reported by ddundan.

[21:11] <chip> autrijus: which leads me to ask, do you need both recursive and non-recursive %CALLER and %OUTER?

[21:12] <eric256> lol. is there maybe a script i need to run to fix the permissions?

[21:12] <eric256> where wuold i even look for such a thing?

[21:12] <autrijus> chip: oh btw, larry also wants %MY and %OUR, which points to lex-only pad and pkg pad respectively

[21:12] <chip> "bugward compatible" heh

[21:12] <autrijus> "combatible"

[21:12] <chip> even better

[21:13] <autrijus> chip: and the pkg pad would be prone to runtime addition, unlike the lex pad

[21:13] <dduncan> autrijus, 'make' now succeeds again thanks to that change

[21:13] <autrijus> chip: this is totally just p5, so I can elide details

[21:13] <autrijus> dduncan: cool

[21:14] <chip> autrijus: Well, you're actually kind of not, I fear.

[21:14] <chip> autrijus: There's no such thing as a "package pad" in p5

[21:14] <autrijus> there is this hash thing, yes.

[21:15] <autrijus> which works just like any other hash except you can't tie it

[21:15] <autrijus> most frustratingly

[21:15] <chip> All pads are attached to subs, just some subs are anonymous, e.g. the sub that holds & runs the code at package level (outside any sub definition)

[21:15] <autrijus> so if in parrot I can just take a ParrotHash

[21:15] <chip> At the end of compiling any sub, its pad is known & fixed and cannot change

[21:15] <autrijus> to represent the namespace

[21:15] <chip> That's p5

[21:15] <autrijus> then I don't need to use the lex system for that

[21:15] <chip> (for "pad" read "list of lexical vars stored in pad at runtime")

[21:16] <chip> autrijus: you do, I think

[21:16] <chip> consider

[21:16] <autrijus> except then the lookup process would need to be smart enough to know when to look into the pkg-hash and when to look into the lexpad

[21:16] <chip> Foo.pm:   my $x

[21:16] <chip> that's not in any package

[21:16] <autrijus> sure, that is the diff between %OUR and %MY

[21:16] <chip> not quite

[21:16] <chip> (almost but not quite)

[21:16] <dduncan> fyi, I can debug this later since its low priority, but it seems like editing config.yml doesn't have the effects I expect on my system; eg, setting smoke_concurrent to 2 does not result in 2 pugs processes running in parallel during make smoke ... but the file is obviously being read during 'make' because my changed values are displayed

[21:16] <autrijus> mmm?

[21:16] <chip> let's leave aside %OUR until after the %MY is completely shared understanding

[21:17] <autrijus> ok.

[21:17] <autrijus> Foo.pm: my $x

[21:17] <autrijus> it's attached to the closure known as "file"

[21:17] <chip> right.  p5 rule is that lexicals always win, and package variable is the fallback (unless 'strict vars', in which case lexicals are the only choice for no-:: and package is the only choice for ::)

[21:17] <autrijus> yes, and p6 is the same.

[21:17] <chip> Great.

[21:18] <chip> So is %OUR just syntactic sugar for %My::Package:: ?

[21:18] <autrijus> larry said so, yes

[21:18] <dduncan> I imagine that it may be related to this ...

[21:18] <autrijus> I'm a bit uneasy about that

[21:18] <dduncan> configure: No haddock found / configure: No happy found / configure: No alex found / configure: No cpphs found

[21:18] <autrijus> because it's not that related to "our"'s semantic which is pkg->lex aliasing

[21:18] <dduncan> I don't know what any of those do, and perhaps one is required

[21:19] <autrijus> but then %PACKAGE:: is a bit long

[21:19] <autrijus> but anyway whatever the syntax

[21:19] <chip> autrijus: Oh, OK.  I thought %OUR and our() were related in p6

[21:19] <dduncan> for the parallel processes

[21:19] <autrijus> there will be such a functionality.

[21:19] <autrijus> chip: they are "related" but you can see things in %OUR that nobody declared with "our"

[21:20] <chip> autrijus: I would *think* that the _only_ effect of our() would be that %MY contains an alias for something that appears in some package

[21:20] <autrijus> chip: right, exactly, yes.

[21:20] <chip> OK excellet

[21:20] <autrijus> so our() modifies %MY

[21:20] <autrijus> which is the source of my concern about %OUR

[21:20] <autrijus> but that's not related to parrot :)

[21:20] <chip> well, it also adds to %OUR.  But agreed, it's SEP

[21:20] <autrijus> SEP++

[21:21] <chip> So now ... the lookup primitive

[21:21] <autrijus> yes.

[21:22] <autrijus> statically we know our current package name, our current closure (i.e. lexical scope)

[21:22] <chip> If a literal variable appears in the code, you could emit something that would let Parrot reach directly to pad by numeric index.  I can come up with that.

[21:22] <autrijus> I'd prefer the translation be done at PIR level

[21:22] <autrijus> but if this is not desirable

[21:22] <autrijus> then I can do it in my codegen

[21:22] <autrijus> although that means duplicate effort

[21:22] <autrijus> for other languages

[21:23] <autrijus> "the translation" is the process of having "$x" resolved into a number

[21:23] <autrijus> provided it's in scope of course

[21:23] <chip> I was thinking that lex vs. dynamic rules may be language-specific.  If you could at least make the decision that you want a lex or a dyn, you don't have to translate the lex name to a number

[21:24] <autrijus> sure!

[21:24] <autrijus> I can know I have a lex

[21:24] <chip>   OK

[21:24] <autrijus> I just don't want to output hard to debug numbers

[21:24] <chip> oh I sure agree with that

[21:24] <chip> I don't want to have debug numbers either :-)

[21:24] <autrijus> great

[21:24] <autrijus> :)

[21:24] <eric256> dduncan thanks for looking, i'v kludged away past my empasse for the time being..evil computers

[21:25] <dduncan> okay

[21:26] <chip> autrijus: Can you emit outer functions before inner?  Given:   sub foo { my sub bar { ... } }, can you emit foo in full before starting to emit bar?

[21:27] <autrijus> for some value of "in full"

[21:27] <autrijus> how do I refer to calls to "bar"?

[21:27] <eric256> your pointer about the documentation helped my ultimate problem, gramar for setting permissinos changed (at least relating to replication) but that was hidden because i was only seeing 5.0 docs. ;)

[21:27] <autrijus> just lookup &bar?

[21:27] <autrijus> sure, I can do that

[21:27] <chip> autrijus: er, but what if it's anonymous...

[21:27] <autrijus> then I'll need to invent syms

[21:27] <chip> as most of them will be.

[21:28] <autrijus> which is called lambda lifting

[21:28] <autrijus> and sure I can do that.

[21:29] <chip> Reason I ask, I'm pondering whether the pasm for &bar may referring to a fully populated Sub structure for &foo, including its lex list

[21:29] <chip> s/may/may require/

[21:29] <autrijus> sure, that is fine with me

[21:29] <chip> otherwise, doing automatic %OUTER searches would be difficult

[21:29] <autrijus> yup

[21:29] <chip> ok, not decided, glad that's an option

[21:30] <autrijus> anything local -- that is, *not* whole-program analysis, is easy to do

[21:30] <autrijus> an example of the latter will be to find all call sites of &foo.

[21:32] <brother> ?eval 'foobar'.trans( ['A'..'C'] => "a-c" )

[21:32] <evalbot_7601> "foobar" 

[21:32] <brother> bahhh

[21:32] <brother> ?eval 'ABCDE'.trans( ['A'..'D'] => "a-d" )

[21:32] <evalbot_7601> "acCDE" 

[21:32] <eric256> that was interesting

[21:33] <brother> yup, adding it to my tests

[21:34] <brother> in the trans method ['a' .. 'c'] is equivalent to 'a b c'

[21:35] <brother> 4 hours and counting since I just wanted to do $string.trans('a-z','n-za-m')

[21:35] <eric256> lol

[21:38] <brother> So I've fixed my new teste but broke "ABCXYZ".trans( ['A'..'C'] => ['a'..'c'], <X Y Z> => <x y z> ),"abcxyz"

[21:38] <eric256> you just need to coolapse the spaces in key...but that seems wrong because then you could tr a space.

[21:39] <eric256> actualy that whole syntax seems wrong

[21:39] <eric256> ?eval 'ABCDE'.trans( 'A-D' => "a-d" )

[21:39] <evalbot_7601> "abcdE" 

[21:40] <brother> ?eval 'brother'.trans('a-z','n-za-m')

[21:40] <evalbot_7601> "brother" 

[21:40] <eric256> well you shouldn't have broken that! lol

[21:41] <brother> uhmmmm

[21:49] <eric256> as it is currently that exand sub has no ability to handly multiple -'s

[21:49] <brother> that is what I have done

[21:49] <brother> but not submitted

[21:49] <eric256> ohhh

[21:50] <brother> it was worse than no ability

[21:50] <brother> 6.2.10 did loop for *very* long time

[21:50] <brother> "ABCDEF".trans( 'AB-E' => 'ab-e' )

[21:50] <eric256> you didn't break anything. right now it only has the ability to handle (string, string)

[21:52] <eric256> could you submit what you have? got me all interested then mention you have it localy. lol

[21:52] <brother> ?eval "ABCXYZ".trans( ['A'..'C'] => ['a'..'c'], <X Y Z> => <x y z> )

[21:52] <evalbot_7601> "abcxyz" 

[21:52] <brother> array refs both places works too

[21:54] <eric256> the key to that was both places. they are getting coerched into strings with spaces in them

[21:54] <eric256> coherced? something like that.

[21:54] <brother> right

[21:55] <Odin-> coerced

[21:55] <brother> coerced,

[21:55] <eric256> which i don't think is technicaly *working*

[21:55] <eric256> since it is building tr/a b c/A B C/  ....

[21:55] <Odin-> Pronounced, if Im' not wrong, "ko-erst", displaying the awesome orthographic abilities of English. ;)

[21:55] <Odin-> Err. "I'm", that should be.

[21:56] <eric256> Odin- unless your mad then its "ko-ers-ed" you!

[21:56] <eric256> commit your current one brother and let use see it. or nopaste it

[21:59] <brother> submitted

[22:00] <brother> brute force and ignorance

[22:00] <svnbot6> r7602 | pmakholm++ | add support for multiple ranges in $string.trans

[22:01] <eric256> nice. i like it...much better than the last version

[22:01] <eric256> my @ks = $k.isa(Str) ?? expand($k) !! $k;

[22:02] <eric256> i beleive right there is where you are telling it not to coerce into a string for the key....hmmm. but it should realy still work

[22:02] * eric256 scratches head

[22:03] <brother> (~ $k).split('')

[22:04] <brother> or just split($k,'')

[22:04] <brother> split(' ',$k)

[22:06] <wolverian> for a second there I thought "huh, perl6 does indexing with !! now too?"

[22:07] <dduncan> smoke of 7601 for darwin is up

[22:09] <eric256> left side is always going to be a string because of =>

[22:09] <eric256> the right side is not

[22:09] <eric256> so the right side is being taken as a list and the left is being joined with ' '

[22:11] <eric256> i don't think the specs can be right because you can't tell if they meant to have spaces in there or if the spaces where autogenerated

[22:11] <brother> "ABCDE".trans( ['A' .. 'E'] => "a-e" )

[22:11] <brother> I'm getting tires

[22:11] <brother> -s+d

[22:12] <eric256> if you drop your ?? !! magic it seems to work fine

[22:13] <eric256> well not fine...my @vs = expand(~$v); is getting there

[22:15] <eric256> well you can't mix and match [] and " " because of the stringification...i think it realy needs to be posted to p6l and see what it should realy be.

[22:15] <eric256> or drop the => and make it take a list instead of a hash

[22:17] <pasteling> "eric256" at 66.102.136.66 pasted "different version of trans" (37 lines, 1.1K) at http://sial.org/pbot/13677

[22:17] <svnbot6> r7603 | pmakholm++ | Fixes $string.trans with array references on both sides

[22:17] <brother> Now I belive everything that worked before is working again

[22:18] <eric256> that comes out pretty well behaved as long as you don't miss the =>

[22:18] <brother> Well, that is a simpler solution

[22:19] <eric256> you can drop the check on @ks becuase the key will always be a string....unless someone changed that too

[22:19] <brother> except when you like to do something like $string.trans(['{', '-', '}'] => ['(', '-', ')'])

[22:20] <eric256> wont matter. => is going to coerce the left side to a string

[22:20] <brother> right, broken by design

[22:20] <eric256> hehe

[22:21] <eric256> just saying no need to check because by the time it gets to trans the left side is already a string, unless we drop the => (which i think we should because it doesn't realy mean what we want it just looks pretty)

[22:21] <brother> Well, time to sleep in CEST

[22:21] <eric256> later

[22:26] <brother> 5 hours for getting ROT13 to work, not bad....

[22:27] <buu> That's impressive!

[22:28] <brother> almost 2 KLoC/year

[22:36] <Juerd> wolverian: Still awake?

[22:36] <wolverian> Juerd, yes.

[22:36] <Juerd> wolverian: You asked something about the laptop, but my scroll buffer is screwed because of an /upgrade

[22:36] <Juerd> a /upgrade. I do pronounce the / :)

[22:37] <elmex> is there s way to tell parrot gc how much ram to use maximally ?

[22:37] <elmex> it uses up to 200MB RSS here when running...

[22:37] <wolverian> Juerd, my last question was whether it had .g, but you answered that.

[22:37] <Juerd> Okay

[22:38] <Juerd> wolverian: I've had a 730 euro bid on it. From some guy in Nigeria who wants me to send it there :)

[22:38] <wolverian> wow :)

[22:38] <Juerd> wolverian: Yep, they visit auction sites now.

[22:38] <wolverian> he'll send the money to you after you've sent the laptop and the money transfer fee to his account?

[22:39] <Juerd> Something like that, yes

[22:39] <eric256> wolverian++ LOL

[22:39] <Juerd> eric256: I don't think he was joking :)

[22:39] <wolverian> I wasn't. sad as it is. :)

[22:39] <wolverian> I'm buying a Fujitsu-Siemens laptop on saturday

[22:39] <wolverian> my first laptop :)

[22:39] <eric256> the sad part is *someone* must be falling for those scams. Juerd i know, but I couldn't figure out how buying something could be a nigerian scheme.

[22:40] <Juerd> wolverian: Those are reasonable

[22:40] <wolverian> Juerd, business or consumer?

[22:40] <Juerd> wolverian: There ought to be no difference

[22:40] <wolverian> oh, okay.

[22:40] <Juerd> The question is: is it a portable desktop machine, or a mobile device?

[22:40] <Juerd> Ruggedness counts.

[22:40] <wolverian> right. and weight, I guess. I don't have experience.

[22:41] <Juerd> Will you be moving it a lot? Using it in bed? Outside?

[22:41] <eric256> new IBM think pads are nice sturdy laptops...spendy, but nice

[22:41] <wolverian> Juerd, yes.

[22:41] <Juerd> Then go for thinkpads

[22:41] <wolverian> my budget is.. small.

[22:41] <Juerd> eric256: New being anything under the age of 10 :)

[22:41] <Juerd> eric256: Or 15

[22:41] <Juerd> Or actually, I don't recall IBM has ever made unsturdy laptops

[22:41] <Juerd> Except the G series

[22:41] * eric256 only has experience with thinkpad in the last 4 months

[22:41] <Juerd> Which was a 2-model series which was then ended :)

[22:41] <Juerd> wolverian: Buy a used IBM

[22:41] <eric256> used to love HP,  but these IBM machines are just sweet.

[22:42] <wolverian> Juerd, I'm not sure. that sounds more adventurous.

[22:43] <Juerd> It is more adventurous.

[22:43] <Juerd> How large is your budget, by the way? There are sub-1000 thinkpads nowadays.

[22:43] <eric256> trust him, you realy do want a sturdy laptop. it makes all the difference

[22:43] <wolverian> Juerd, about 1000 euros

[22:44] <Juerd> wolverian: Then why not buy a nice IBM one? Do you need a high speed 3D engine in it?

[22:44] <eric256> i have an HP thats been cracked since ilke the 10th month i owned it (kept meaning to get it repaired but you know how that goes)....the thing just never felt realy tough, the IBM's though, the second you pick one up you'll love it

[22:44] <wolverian> because the X41 costs 1750 euros 

[22:44] * wolverian notices the "other models" button

[22:44] <eric256> lol

[22:45] <eric256> http://search.ebay.com//search/search.dll?from=R40&satitle=ibm+thinkpad

[22:45] <eric256> ones about to go for 150bucks

[22:45] <wolverian> "call dealer for price". 1) you asked me what country I live in, so you could localise 2) calling sucks

[22:45] <eric256> older...but cheap

[22:46] <Juerd> wolverian: I have an X41 :)

[22:46] <Juerd> wolverian: They're about the most expensive series, and for several reasons

[22:46] <wolverian> Juerd, so, are 15" laptops way too heavy to carry around?

[22:46] <Juerd> wolverian: Depends on your strength

[22:46] <eric256> nah.. 15 is good, 17 is a bit heavy. ;)

[22:46] <wolverian> I'm a CS student

[22:47] <Juerd> I have almost no muscle left in my arms and hands, because of my RSI condition, and yes, for me, it is now too heavy.

[22:47] <wolverian> ("strength? what's that?")

[22:47] <Juerd> But it used to be just perfect.

[22:47] <Juerd> wolverian: There's normal and there's weak.

[22:47] <wolverian> I'm not excessively weak, no.

[22:47] <geoffb> wolverian, a proper carrying bag / backpack makes a huge difference.  And the difference between a well designed back and a cheap bag is pretty severe.

[22:47] <wolverian> the Fujitsu laptop I was looking at weighs 3kg

[22:47] <Juerd> So does an IBM R51 or R52

[22:48] <Juerd> Which are the models I would recommend you

[22:48] <wolverian> geoffb, right. I'll definitely be getting a bag

[22:48] <Juerd> Sturdy but affordable

[22:48] <wolverian> Juerd, ah. I'll check them out

[22:48] <wolverian> thanks a lot.

[22:48] <eric256> "well designed back" --- "mom i told you to get your back redesigned or it would wear out before you where 40"

[22:48] <geoffb> eric256, heh

[22:48] <wolverian> heh

[22:48] <Juerd> Perhaps you can find a nicely discounted R51 (they're out of production)

[22:49] <geoffb> I just know that my shoulders got a lot happier the day my wife got me a really nice bag to replace the so-so ones I'd had

[22:49] <wolverian> oh, wow

[22:49] <wolverian> these are cheap

[22:49] <Juerd> non-ibm notebook manufacturers must hate me.

[22:49] <Juerd> And IBM must love me...

[22:49] <wolverian> oh, jesus, that was before VAT

[22:49] <wolverian> thanks for putting that in the large numbers

[22:49] <wolverian> and the +VAT price in really small 

[22:49] <eric256> VAT?

[22:49] <Juerd> wolverian: industrial BUSINESS machines :)

[22:49] <wolverian> eric256, value added tax

[22:49] <geoffb> Value Added Tax?

[22:49] <Juerd> wolverian: They're used to selling to people who don't pay vat :)

[22:49] <eric256> european thing?

[22:49] <Juerd> eric256: Yes

[22:49] <Odin-> Juerd: I thought it was "international"?

[22:49] <geoffb> VAT == Tarrif?

[22:49] <Juerd> It's like sales tax

[22:50] <Odin-> VAT - Value Added Tax

[22:50] <wolverian> Juerd, right. they asked me where I live, thoguh

[22:50] <wolverian> thoguh

[22:50] <wolverian> argh.

[22:50] <wolverian> "though".

[22:50] <geoffb> I meant, is it really a sales tax, or is it an import tarriff?

[22:50] <Juerd> But businesses get back what they paid to suppliers

[22:50] <wolverian> and had localised the site mostly.

[22:50] <Odin-> It's not a tarriff, no.

[22:50] <Juerd> It's a sales tax

[22:50] <wolverian> Juerd, IBM is listing R51 here

[22:51] <Juerd> wolverian: Find resellers with stock :)

[22:51] <wolverian> auugh!! 1400 euros

[22:51] <wolverian> what the hell.

[22:51] <eric256> generaly they don't make the big number include things like tax or shipping.  wanna make ti look cheap...is VAT realy high enough to make a difference?

[22:51] <Juerd> eric256: around 20% usually

[22:51] <wolverian> eric256, it's 22% here 

[22:51] <Odin-> eric256: Yeah.

[22:51] <geoffb> uggg

[22:51] <Juerd> eric256: It's not like sales tax :)

[22:51] <Odin-> 24.5% here.

[22:51] * geoffb thinks 8% is brutal . . . .

[22:51] <Juerd> eric256: It's tax for the added value only, and on the end price

[22:51] <Odin-> Which, I believe, is the highest VAT in Europe.

[22:52] <Juerd> geoffb: Yes, but it's 8% on 8% on 8% on 8% ...

[22:52] <wolverian> Juerd, the IBM laptops I can afford as new all have 256mb RAM. :/

[22:52] <Juerd> wolverian: Save for more RAM later

[22:52] <wolverian> Juerd, is the R50e okay?

[22:52] <Juerd> wolverian: Have you seen the private message by the way?

[22:52] <wolverian> I heard the -e models suck

[22:52] <Juerd> I'd avoid the -e's

[22:52] <Juerd> They're bare 

[22:52] <geoffb> Juerd, I'm not sure that's true.  Wholesale and all.

[22:52] <wolverian> Juerd, no, I haven't

[22:53] <wolverian> Juerd, they're all I can afford :)

[22:53] <Juerd> geoffb: In any case, it's not as painful as it looks. It's a very different system.

[22:53] <geoffb> Juerd, have you registered your nick?

[22:53] <Juerd> Could be

[22:53] <geoffb> freenode's attempt to swat a meat bee with a sledgehammer

[22:53] <Juerd> Probably I registered one time to be able to join a certain channel. In general, I dislike IRC "services".

[22:53] <wolverian> heh.

[22:54] <Juerd> Are private messages disabled now?

[22:54] <Odin-> That's what the notice says, yes.

[22:54] <geoffb> Juerd, they are if you haven't logged in

[22:54] <eric256> crap  20% tax..thats just rude

[22:54] <Juerd> 00:48 [freenode] -!- Private messages from unregistered users are currently blocked due to spam problems, but you can always message a

[22:54] <Juerd>           staffer. Please register! ( http://freenode.net/faq.shtml#privmsg )

[22:54] <Juerd> Jesus fucking chr... Argh, I hate freenode.

[22:54] <Juerd> eric256: It is not sales tax!

[22:54] <geoffb> And from the way people refer to it, I'm guessing it's not obvious

[22:55] <Juerd> eric256: The price excluding tax will be much lower

[22:55] <wolverian> I think I'm going to have to sacrifice either features or ruggedness

[22:55] <eric256> wow. thats a bit overkill. explains why nothingmuch never got my responses to him, and he just thought i was crazy

[22:55] * geoffb is personally of the opinion that advertising prices without tax already included is government-sanctioned fraud . . . but I may be a hardliner

[22:56] <Odin-> And the tax can be recuperated by certain parties.

[22:56] <wolverian> geoffb, it IS illegal here, I think

[22:56] <eric256> Juerd...I never said it *was* sales take...touchy subject? ;)

[22:56] <wolverian> or at least no-one does it

[22:56] <Odin-> Don't remember the specific EU rules, though.

[22:56] <wolverian> except for IBM

[22:56] <Juerd> I forgot my password.

[22:56] <wolverian> (who are apparently noobs when it comes to EU)

[22:57] <Juerd> eric256: Yes. Touchy because ignorant people always cry when they hear the percentages, and this hasn't changed in over ten years.

[22:57] <geoffb> wolverian, ah

[22:57] <Odin-> wolverian: "EU? Ewww..." :D

[22:57] <geoffb> Mars . . . now *there's* a good government . . . 

[22:57] <Juerd> geoffb: Businesses eventually don't pay VAT

[22:57] <eric256> government taking 20% = rude...regardless of what you call it or how long it has been that way.

[22:57] <Juerd> geoffb: It's required here to list prices excl. VAT for businesses, incl. VAT for consumers.

[22:58] <geoffb> Juerd, interesting.

[22:58] <Odin-> eric256: Someone else taking 20% = rude, too, whether you call it "interest", "rent" or "profit". :>

[22:58] <Juerd> eric256: With sales tax, the government takes much more than the x% you see as a customer.

[22:58] <Juerd> eric256: There's hidden taxes all the way through the chain

[22:59] <Juerd> That's different with VAT

[22:59] <eric256> Juerd - in some cases. depeds on the product.

[22:59] <geoffb> Here in the U.S. sales tax is something ads have in the hyper-fine print, if they say it at all, and TV commercials get an auctioneer to say "price not including tax, license, doc fees, and mob cut" at 4000 wpm

[22:59] <eric256> geoffb++

[22:59] <Odin-> Well, then you have a case *for* VAT already.

[23:00] <Juerd> geoffb: All stores aimed at consumers (practically all stores) have to include taxes in all prices. Taxes aren't even listed, prices excluding taxes are neither. People stay blissfully unaware.

[23:00] <eric256> VAT is all taxes that went into generateing that product?  /me doubts that, but that might just be my capatalist upbringing... BTW i don't care what the manufacturer had to pay in taxes. ;)

[23:00] <Odin-> As Juerd said, ads usually *must* include VAT when aimed at individuals.

[23:00] <Juerd> wolverian: Anyway, since I can't privmsg you... If you want, I can help out by selling you a thinkpad without profit

[23:00] <Juerd> wolverian: I'd still have to charge VAT, unless you're a business or can abuse someone elses :)

[23:01] <Odin-> Juerd: O_o COMMUNIST!

[23:01] <eric256> individuals have to charge other individuals VAT? just put it on ebay with a buy now button. lol of course you risk someone else clicking first. ;)

[23:01] <Juerd> eric256: I have a company

[23:01] <eric256> 5oclock and all is finaly well today. ;) tamed the savage databases now home to clean house. lol

[23:02] <eric256> Juerd - ahh!

[23:02] <eric256> later

[23:02] <geoffb> 4 PM and still haven't managed to get my muse on

[23:02] <Juerd> 01:00 < geoffb> Mars . . . now *there's* a good government . . .

[23:02] <Juerd> I was just watching B5 an hour ago :)

[23:03] <wolverian> Juerd, hmm, I don't know if it helps, as I think I would still have to pay more than my budget allows

[23:03] <geoffb> Not the Mars government I was thinking of . . . :-)

[23:03] <Juerd> wolverian: Depends - sometimes I can get an R51 for 700 ex vat

[23:03] <geoffb> .oO( Damn the network for killing Excalibur!  Just when it was hitting a stride. )

[23:03] <wolverian> Juerd, oh, wow. new?

[23:04] <Juerd> wolverian: Yes.

[23:04] <Juerd> wolverian: I can check current prices tomorrow if you wish.

[23:04] <wolverian> I would marry your dad for that.

[23:04] <Juerd> I can't guarantee they're currently overstocked, of course

[23:04] <Juerd> But I've been lucky before

[23:04] <wolverian> oh, of course, I understand. please check if you have time. :) I'm in no hurry with the purchase

[23:04] <Juerd> I'll let you know

[23:04] <wolverian> thanks a lot. Juerd++ 

[23:05] <Juerd> Oh, and VAT here is only 19% ;)

[23:05] <Juerd> One thing: should anything break, you will have to run it through IBM directly

[23:05] * geoffb is somewhat sorry he didn't jump on the Dell 50% off sales before the company realized they were losing money doing that

[23:05] <wolverian> Juerd, :) that is fine. how long is the guarantee?

[23:05] <Juerd> This is the fastest solution anyway, and they have international support, but usually you have a choice, and that I cannot provide of course :)

[23:06] <Juerd> wolverian: 1 year -- IBM unfortunately doesn't do 3 years on the cheaper models

[23:06] <wolverian> Juerd, oh, and if we stay somewhere around 1000 euros and you can make a small profit with it that's fine too.

[23:06] <wolverian> Juerd, can I extend it?

[23:06] <Juerd> I'll first call for a quote tomorrow

[23:07] <Juerd> I have no idea - I'll ask

[23:07] <wolverian> thankyou again. you are a really nice person :)

[23:07] <Juerd> People here say otherwise :)

[23:08] <wolverian> maybe you should sell them laptops too..

[23:08] <geoffb> You can be nice and direct at the same time

[23:09] <wolverian> Juerd, oh, and don't believe them. you really are nice.

[23:10] <Juerd> Heh

[23:11] <Juerd> geoffb: http://en.wikipedia.org/wiki/VAT should you care

[23:15] <geoffb> Juerd, OK, thanks

[23:20] <wolverian> Juerd, still there?

[23:20] <Juerd> I think so

[23:20] <wolverian> Juerd, okay. :) what was that Fjallraven pack you bought?

[23:21] <Juerd> Dependler

[23:21] <Juerd> It's ugly and not entirely comfortable

[23:21] <Juerd> But I like it anyway. It's very practical.

[23:21] <wolverian> ah, found it.

[23:21] <wolverian> it's kind of.. blockish

[23:21] <Juerd> Yes

[23:21] <Juerd> The aluminium frame inside it ensures it stays that way

[23:22] <Juerd> It's a perfect seat to use while waiting for a train

[23:22] <wolverian> hehe.

[23:22] <Juerd> It's meant for it too.

[23:22] <wolverian> it's not that ugly, actually

[23:22] <wolverian> some stickers and such and it's almost pretty

[23:22] <Juerd> I'd recommend using a laptop sleeve with this bag

[23:22] <Juerd> That's much easier and better for your laptop in practice

[23:23] <Juerd> Than using the straps in the bag

[23:23] <wolverian> laptop sleeve?

[23:23] <Juerd> Yes

[23:23] <Juerd> See the SleeveCase product on sfbags.com

[23:23] <Juerd> That one's expensive, there are less expensive ones.

[23:23] <Juerd> But this is a good example, and I know the url without having to look it up :)

[23:24] <wolverian> thanks :)

[23:25] <wolverian> Juerd, those aren't that expensive

[23:26] <geoffb> Juerd, not to open a wound or anything, but according to that wikipedia page, the difference between VAT and sales tax is mostly one of accounting and who sends what to the government -- the gouge to the customer ending up identical.  So then it is appropriate for someone to say "20%?  That's brutal!"  Or am I missing something?

[23:27] <wolverian> I'll go sleep now

[23:27] <wolverian> bye :)

[23:27] <geoffb> bye, wolverian 

[23:27] <Juerd> geoffb: I probably don't understand sales tax then

[23:28] <Juerd> I thought that sales tax was applied on every level.

[23:28] <Juerd> It apparently is not.

[23:28] <Juerd> Still, I don't think it's brutal, 20%

[23:28] <Juerd> That is, as long as stuff like food goes at reduced rates

[23:28] <geoffb> Fair enough, I was just checking my understanding.

[23:28] <geoffb> Juerd, right

[23:28] <Juerd> Taxes have to be paid anyway

[23:29] <Juerd> One way or another

[23:29] <Juerd> Let people who spend more pay more. It makes sense to me.

[23:32] <geoffb> My dad (a retired financial consultant) used to say "Taxation is policy."  By which I think he meant "at least as much a policy decision as a method to get money for government services"

[23:32] <Juerd> I understand neither

[23:33] <wolverian> oh, Juerd 

[23:33] <geoffb> Though in most ways money doesn't terribly interest me, I think understanding taxation would tell me a lot about how the world works and how governments *want* it to work

[23:33] <Juerd> I hate paying taxes, and would hate it much less if I were convinced the money was spent right.

[23:33] <wolverian> Juerd, apparently the person actually in charge of paying for the laptop wants to use a "pay $foo sum a month for two years" scheme

[23:34] <Juerd> wolverian: Then I cannot be of help

[23:34] <geoffb> For instance, he once explained the various tax incentives for first-time home buyers by saying "Governments like home owners -- they are fundamentally stabilizing."

[23:34] <wolverian> right, that's understandable :)

[23:34] <wolverian> I'll see if a loan is possible tomorrow

[23:34] <wolverian> then I could pay you directly anyway

[23:35] <wolverian> damn, why do I think of asking questions so late? :)

[23:35] <Juerd> A loan is exactly the same thing, except the buyer has to handle it :)

[23:36] <Juerd> (It's usually a little less expensive too, but this depends on a lot)

[23:36] <wolverian> right

[23:37] <wolverian> I can take it myself too, but I don't know how students rank as loan takers

[23:37] <wolverian> (I mean, I don't know if I can get a loan myself, but I'll check.)

[23:38] <wolverian> weird. why doesn't HTTP::Headers overload bool and ""?

[23:38] <wolverian> er - HTTP::Response, that is

[23:38] <wolverian> oh well, that's perl5.

[23:39] <Juerd> Because it's old, and before overloading was commonly accepted :)

[23:39] <Juerd> Now, probably for backwards compatibility

[23:40] <wolverian> right.

[23:41] <geoffb> autrijus, your Haskell slides are looking pretty good

[23:43] <Juerd> wolverian: I just recalled they have a web site.

[23:43] <Juerd> wolverian: And that I have a password for it

[23:43] <wolverian> Juerd, oh, nice. 

[23:43] <Juerd> wolverian: Best thing at this moment is an R52 for 799 ex vat

[23:43] <Juerd> wolverian: However, it is a Dutch model.

[23:44] <wolverian> dutch keyboard?

[23:44] <Juerd> Possibly

[23:45] <Juerd> As IBM is the only company foolish enough to sell dutch keyboards

[23:45] <Juerd> (We use american keyboards)

[23:45] <Juerd> I'll call them tomorrow

[23:45] <Juerd> To ask what keyboard this one has

[23:45] <Juerd> They have but one in stock

[23:46] <Juerd> Oh, it's a high resolution one

[23:46] <Juerd> 1400x1050 on 15"

[23:46] <Juerd> That's odd, for ibm :)

[23:46] <leo__> geoffb: I saw the preview of your next column - I'm very interested in reading more 

[23:47] <geoffb> leo__, the code optimization one?

[23:47] <wolverian> Juerd, that would be nice. :)

[23:47] <leo__> yup that one

[23:48] <geoffb> leo__, if that's the one you meant, I just started writing it a few minutes ago, when I came up with a good opening line.  :-)

[23:48] <leo__> heh - then I shouldn't interrupt you

[23:49] <leo__> keep on writing'

[23:49] <geoffb> :-)

[23:50] * geoffb hopes it turns out OK . . . this one may be a tad difficult

[23:50] <leo__> anyway, I saw you mentioned profiling tools, cachegrind and such 

[23:51] <Juerd> wolverian: None of the suppliers seem to have any r51s left in stock. That is unfortunate.

[23:51] <leo__> here are some numbers I've investigated some time ago: 

[23:51] <leo__> http://groups.google.com/group/perl.perl6.internals/browse_thread/thread/2206aea97ae3c271/a72974934d1deb7d%23a72974934d1deb7d?sa=X&oi=groupsr&start=0&num=3

[23:52] <wolverian> Juerd, oh, too bad. thanks for checking, though. 

[23:52] <geoffb> leo__, if you have links to some of those tools, that would save me some serious time, as I had not searched for links yet, which is always a bit of a drain.

[23:52] <wolverian> Juerd, I appreciate it.

[23:52] <leo__> I'm just using cachegrind from the valgrind package

[23:52] <leo__> and gprof out of the box

[23:53] <Juerd> wolverian: I'll ask about the r52's keyboard

[23:53] <Juerd> For now, good night

[23:53] <leo__> http://valgrind.org/

[23:53] <geoffb> Ugh, is there a way to tell google groups to switch to monospace fonts for the email text?

[23:53] <geoffb> leo__, OK, thanks.

[23:53] <Juerd> geoffb: Use the old interface

[23:53] <Juerd> geoffb: It has a link somewhere, IIRC

[23:53] <geoffb> Juerd, sigh

[23:54] <geoffb> Juerd, fair enough

[23:54] <Juerd> The old interface is better in every way anyway

[23:54] <geoffb> You'd think someone at Google would have more clue than to screw that one up

[23:54] <leo__> there is clickable item on that pakge

[23:54] <geoffb> Ah, duh, finally saw it, thanks leo__ 

[23:54] <Juerd> By being dutch, I get the old interface automatically :)

[23:54] <Juerd> Good night

[23:54] <leo__> Fixed font - Proportional fon

[23:55] <geoffb> leo__, yep

[23:55] <wolverian> Juerd, thankyou. I'm interested if the keyboard is sane and I can get that loan :)

[23:55] <geoffb> g'night Juerd 

[23:56] * leo__ thought that such a long link could also contain my setting for a fixed font ;-)

[23:57] <geoffb> heh

[23:58] <leo__> geoffb: the numbers of the stats WRT parrot don't apply at all now, but perl/python/lua should still hold

[23:58] <geoffb> OOC, what would be right stats for parrot now?

