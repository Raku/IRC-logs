[00:26] <clkao> ah, so chained comparison is not working yet.

[00:42] <arcady> ?eval my $x = 3; 0 < $x < 5

[00:42] <evalbot6> bool::true 

[00:42] <arcady> ?eval my $x = 3; 0 < $x < 2

[00:42] <evalbot6> bool::true 

[00:43] <obra> ?eval 0E0

[00:43] <evalbot6> 0 

[00:43] <obra> ?eval 0E0 ?? 'true' :: 'false';

[00:43] <evalbot6> 'false' 

[00:43] * obra wonders

[00:45] <obscurite> I see TPF put up ideas for the google summer of code grants. (http://www.perlfoundation.org/gc/grants/proposals.html)

[00:46] <obscurite> perl6 mason, core yaml, and perl6-rules-per-parser aren't on it

[00:46] <obscurite> make that, perl6-rules-perl-parser

[00:47] <obra> obscurite: ideas listed doesn't mean "we don't want other stuff"

[00:47] <obscurite> I forget the actual, real, acronymn.

[00:47] * obscurite nods

[00:47] <obscurite> Just saying.

[00:48] <obra> "perl6 mason" is flamebait, sadly

[00:48] * obscurite giggles

[00:49] <obscurite> I didn't come up with that one.

[00:50] <obscurite> What do you think of the weblist?

[00:50] <obra> It's a reasonable set of starter projects

[00:50] <obra> I think the whole summer of code thing is a bit crazily organized

[00:51] <obscurite> Ya, kind of a free for all.

[00:51] <obra> They should have had it up and running by march.

[00:51] <clkao> ?eval 1 < 10 < 3

[00:51] <evalbot6> bool::true 

[00:52] <obra> ?eval 1 < (10 < 3)

[00:52] <evalbot6> bool::false 

[00:52] <obra> ?eval (1 < (10) < 3

[00:52] <evalbot6> Error:  unexpected end of input expecting digit, fraction, exponent, term postfix, operator, ">>=:=<<", ">>!=<<", ">>==<<", ">><=<<", ">>>=<<", ">>~~<<", ">>!~<<", ">>eq<<", ">>ne<<", ">>lt<<", ">>le<<", ">>gt<<", ">>ge<<", ">><<<", ">>><<", "\187=:=\171", "\187!=\171", "\187==\171", "\187<=\171", "\187>=\171", "\187~~\171", "\187!~\171", "\187eq\171", "\187ne\171", "\187lt\171", "\187le\171", "\187gt\171", "\187ge\171", "\187<\171", "\187>\171", "=:=", 

[00:52] <obra> ?eval (1 < 10) < 3

[00:52] <evalbot6> bool::true 

[00:52] <kelan> woo that ones fun

[00:55] <clkao> actually what i want is $a < any(@foo) < $b

[00:55] <clkao> any more expressive way?

[01:12] <clkao> autrijus: can you try make chained comparison work before 6.2.7? it's crucial to me

[01:13] <obra> for svk6?

[01:13] <obra> clkao: did you submit failing tests?

[01:13] <clkao> there's already todo test

[01:13] <clkao> no, for a tool for my own leisure

[01:15] <obra>   ah

[01:15] <obra> SOAP::Real::6

[01:22] <meppl> gute nacht  -  good night

[02:59] <vel> hi. i've looked at the office at autrijus presentation, but forgot the link. anyone can make my evening interested?

[03:00] <vel> s/interested/interesting/

[03:00] <obra> www.pugscode.org ?

[03:01] <vel> no, i think it is one for YAPC NA. something on autrijus.org...

[03:08] <mugwump> the one in the pugs svn?

[03:09] <vel> yeah, i was wrong... i was thinking of http://pugscode.org/talks/apw

[03:09] <vel> sorry, obra

[03:21] *** knotty_ is now known as knotty

[03:43] <QtPlatypus> pugs -V should tell you the version of parrot you are embedding.

[05:03] *** khisanth_ is now known as Khisanth

[05:05] <revdiablo> $ pugs -e 'my $foo = { bar => { baz => [ "one", "two", "three" ] } }; say ref $foo<bar><baz>' Str

[05:06] <revdiablo> shouldn't that be Array?

[05:06] <revdiablo> pasted kind of weird -- it prints Str

[05:11] <QtPlatypus> ?eval my $foo = { bar => { baz => [ "one",two", "three" ] } }; $foo<bar><baz>.perl

[05:11] <evalbot6> Error:  unexpected "[" expecting term 

[05:14] <QtPlatypus> ?eval [ "one",two","three" ]

[05:14] <evalbot6> Error:  unexpected "[" expecting program 

[05:14] <QtPlatypus> ?eval ("one",two","three")

[05:14] <evalbot6> Error:  unexpected "t" expecting term postfix, operator, ",", ":" or ")" 

[05:14] <QtPlatypus> ?eval \("one",two","three")

[05:14] <evalbot6> Error:  unexpected "t" expecting term postfix, operator, ",", ":" or ")" 

[05:15] <locksy>  ?eval my $foo = [ "one", "two", "three" ];

[05:15] <locksy> ?eval my $foo = [ "one", "two", "three" ];

[05:15] <evalbot6> ['one', 'two', 'three'] 

[05:15] <locksy> ?eval my $foo = { bar => [ "one", "two", "three" ] };

[05:15] <evalbot6> {('bar' => 'one'), ('two' => 'three')} 

[05:15] <QtPlatypus> Thats wrong

[05:17] <QtPlatypus> It looks like pugs is unrolling [] into the {}

[05:35] <gaal> hola

[05:35] <gaal> in Prim, op2 "Scalar as", there's an interesting idiom:

[05:36] <gaal> str <- fromVal x :: Eval VStr

[05:37] <gaal> in another place, (reverse), i see that string arguments are passed by reference. does this code auto deref somehow? (can't see how)

[05:50] <theorbtw1> We're off.  See you from the US.

[05:50] <gaal> have a good flight!

[05:50] <gaal> too late :)

[05:52] <gaal> hmmm, to we have Maybe-like utils for VUndef?

[05:53] <gaal> i want to do something with a Val, but short-circuit to Nothing if it's not defined.

[06:08] <batkins_> will parrot still be developed without dan leading it?

[06:08] <acme_> chip is leading it!

[06:10] <batkins_> sweet

[06:10] <batkins_> it would be sad to see parrot go

[06:10] <obra>   chip has been leading it for several months

[06:10] <batkins_> is this the same chip who was writing topaz?

[06:11] <obra> yes

[07:23] <QtPlatypus> Is there a multyline quoting convention?

[07:23] <Khisanth> heredocs?

[07:24] <QtPlatypus> Is it implemented in pugs yet?

[07:36] <knewt_> QtPlatypus: not been implemented yet, but see the end of examples/cookbook/01strings/01-00introduction.p6 for the new heredoc syntax

[07:37] <QtPlatypus> Thanks knewt_++

[07:51] <autark-jp> thought I saw someone commit a patch for simple heredocs...

[07:52] *** Lopo_ is now known as Lopo

[08:01] <QtPlatypus> ?eval $a = "Con" ~ "Cat";

[08:01] <evalbot6> Error: Undeclared variable: "$a" 

[08:01] <QtPlatypus> ?eval my $a = "Con" ~ "Cat";

[08:01] <evalbot6> \'ConCat' 

[08:02] <chip> Buenos Dias

[08:02] <autrijus_> there's heredoc support

[08:02] <autrijus_> but not _correct_

[08:02] <autrijus_> you have to say

[08:02] <autrijus_> $a = q:to/END/

[08:02] <autrijus_> foo

[08:02] <autrijus_> END;

[08:02] <autrijus_> instead of

[08:02] <autrijus_> $a = q:to/END/;

[08:02] <autrijus_> foo

[08:02] <autrijus_> END

[08:02] <autrijus_> that actually may be construed as a feature ;)

[08:02] <autrijus_> (but it's against spec, and hence a bug)

[08:07] <QtPlatypus> Thanks autrijus_ 

[08:14] <QtPlatypus> Hi scook0 

[08:14] <scook0> howdy QtPlatypus 

[08:15] <scook0> much happening in pugs today?

[09:24] * QtPlatypus kisses wamrly "I love you as well.  See you later"

[09:24] <QtPlatypus> MAV

[09:27] *** Lopo_ is now known as Lopo

[10:56] <nothingmuch> morning

[10:59] <xerox> 'morning

[11:18] *** sbkhh is now known as Odin-

[11:53] <svnbot6> r4501, fireartist++ | * new tests for sub signature matching

[11:53] <svnbot6> r4501, fireartist++ | * more tests for BUILD args

[11:53] <svnbot6> r4502, scook0++ | Fixed Haddock-confusing comments in Parser.hs

[11:54] <chip> Haddock?

[11:56] <scook0> chip: Haddock generates documentation from annotated Haskell source code

[11:56] <scook0> http://www.haskell.org/haddock/

[11:58] <chip> ok

[12:15] * Limbic_Region can now use + at work

[12:15] <Limbic_Region> Juerd++

[13:01] <svnbot6> r4503, autrijus++ | * hw2005 - review from Chip Salzenberg.

[13:34] *** nothingmuch_ is now known as nothingmuch

[13:35] <PerlJam> "metacomputational monads"?

[13:35] <xerox> Eval (Eval a)

[13:38] <nothingmuch> bah!

[13:39] <nothingmuch> it turns out my hands are obstructing the antena

[13:41] <Aankhen``> perlbot karma Aankhen

[13:41] <perlbot> Karma for Aankhen: 74

[13:41] <Aankhen``> Wow.

[13:41] <Aankhen``> Hacking away at Pugs is good for your karma. :-P

[13:45] <nothingmuch> perlbot highest karma

[13:45] <perlbot> The top 5 karma entries: autrijus: 660, C: 475, iblech: 457, stevan: 128, gaal: 87

[13:46] <nothingmuch> wow, C is not the highest anumore =)

[13:46] <Aankhen``> Heh.

[13:46] <Aankhen``> ?eval sub foo () returns Void { }; foo();

[13:46] <evalbot6> undef 

[13:47] <Aankhen``> ?eval sub foo () is unsafe { }; foo();

[13:47] <evalbot6> undef 

[13:47] <Aankhen``> ?eval sub foo () is unsafe { 42 }; foo();

[13:47] <evalbot6> 42 

[13:47] <Aankhen``> ?eval $?PUGS_VERSION

[13:47] <evalbot6> \'Perl6 User\'s Golfing System, version 6.2.6, June 2, 2005 (r4503)' 

[13:47] <Aankhen``> Hrm...

[13:47] <Aankhen``> ?eval sub foo () is unsafe returns Void { 42 } foo()

[13:47] <nothingmuch> ?eval say "nothingmuch" ~ "++"

[13:47] <evalbot6> Error:  unexpected "r" expecting trait or block 

[13:47] <evalbot6> Error: No compatible subroutine found: "&say" 

[13:47] <Aankhen``> ?eval sub foo () is unsafe returns Void { 42 }; foo();

[13:47] <evalbot6> Error:  unexpected "r" expecting trait or block 

[13:47] <Aankhen``> Heh.

[13:47] <Aankhen``> Nice try.

[13:48] <Aankhen``> ?eval sub foo () returns Void is unsafe { 42 }; foo();

[13:48] <evalbot6> 42 

[13:48] <Aankhen``> ?eval "nothingmuch" ~ "++"

[13:48] <evalbot6> 'nothingmuch++' 

[13:48] <Aankhen``> ?eval <1 2 3 4 5>.pick

[13:48] <evalbot6> '2' 

[13:48] <Aankhen``> ?eval <1 2 3 4 5>.pick

[13:48] <evalbot6> '4' 

[13:48] <Aankhen``> ?eval <nothingmuch evalbot6>.pick ~ "++"

[13:48] <evalbot6> 'evalbot6++' 

[13:48] <nothingmuch> ?eval "nothingmuch"  ~ "++"

[13:48] <evalbot6> 'nothingmuch++' 

[13:49] <nothingmuch> ?eval "nothingmuch" ~ "-- " x 10

[13:49] <evalbot6> 'nothingmuch-- -- -- -- -- -- -- -- -- -- ' 

[13:49] <nothingmuch> beh

[13:50] <Aankhen``> You really want to do that? :-)

[13:50] <Aankhen``> ?eval 1|2|4

[13:50] <evalbot6> (1 | 2 | 4) 

[13:50] <nothingmuch> ?eval ("Aankhen``" ~ "++ ") x 10

[13:50] <evalbot6> 'Aankhen``++ Aankhen``++ Aankhen``++ Aankhen``++ Aankhen``++ Aankhen``++ Aankhen``++ Aankhen``++ Aankhen``++ Aankhen``++ ' 

[13:50] <nothingmuch> perlbot karma Aankhen`` 

[13:50] <perlbot> Karma for Aankhen``: 19

[13:50] <Aankhen``> o_O

[13:51] <nothingmuch> =)

[13:51] <Aankhen``> ?eval ("Aankhen``" ~ "--") x 100

[13:51] <evalbot6> 'Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhen``--Aankhe

[13:51] <Aankhen``> perlbot karma Aankhen``

[13:51] <perlbot> Karma for Aankhen``: -21

[13:51] <nothingmuch> perlbot karma Aankhen`` 

[13:51] <perlbot> Karma for Aankhen``: -21

[13:51] <nothingmuch> tee hee

[13:51] <Aankhen``> Would you believe that was accidental?

[13:51] <nothingmuch> you meant to do ++?

[13:51] <Aankhen``> No, I meant to do 10.

[13:51] <nothingmuch> ah =)

[13:52] <Aankhen``> ?eval ("Aankhen``" ~ "++") x 21

[13:52] <evalbot6> 'Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++' 

[13:52] <Aankhen``> perlbot karma Aankhen``

[13:52] <perlbot> Karma for Aankhen``: -1

[13:52] <Aankhen``> ?eval ("Aankhen``" ~ "++") x 10

[13:52] <evalbot6> 'Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++Aankhen``++' 

[13:52] <Aankhen``> perlbot karma Aankhen``

[13:52] <perlbot> Karma for Aankhen``: 8

[13:52] <Aankhen``> I believe that ought to be right.

[13:52] <PerlJam> this much bot twiddling is the beginning of the end of #perl6 

[13:54] <Aankhen``> Such dramatics!

[13:56] <nothingmuch> one more

[13:56] <nothingmuch> Aankhen``++

[13:56] <nothingmuch> that's how it was before, right?

[13:56] <nothingmuch> PerlJam: how so? we're not interrupting any conversation

[13:56] <Aankhen``> nothingmuch >> Yeh, but I figured I'd leave one off. :-)

[13:56] <Aankhen``> Thanks, though.

[13:57] <Aankhen``> Oh, I heard the best quote yesterday.

[13:57] <Aankhen``> Or rather, I was present when it became a quote. :-P

[13:57] <Aankhen``> [01:33:03] * Topic is '<topic decent="decent" />'

[13:58] <Aankhen``> [01:40:49] * BananaServ (none@r0xX0rs.your.b0xX0rs.net) has joined #TheGathering

[13:58] <Aankhen``> [01:41:04] <@BananaServ> PHP topic?

[13:58] <nothingmuch> ?

[14:06] <PerlJam> nothingmuch: no, but what happens is that others see what you've done and try to imitate it.  And then others see that and think "you can do that?" and then they try it.  And so forth.  The next thing you know #perl6 is just a channel for playing with the bot.  

[14:07] <nothingmuch> In that case perhaps we should start a #perl6bot channel, which is the only place evalbot can write

[14:07] <nothingmuch> and under special circumstances you can ask evalbot to nopaste the output of the last command you eval'ed

[14:08] <Aankhen``> PerlJam >> You do realise it was inevitable? :-)

[14:08] <nothingmuch> but i think we should do that only if/when it really is a problem

[14:08] <integral> the easier solution it to tell perlbot and jabbot to ignore *bot (or just evalbot)

[14:09] <PerlJam> nothingmuch: agreed.  I was just dooming and glooming.  I'm not into premature optmization.  Address only real problems.  etc.

[14:09] <nothingmuch> ?evalbot6 "PerlJam++"

[14:09] <nothingmuch> ;-)

[14:09] <QtPlatypus> ?eval perl++

[14:09] <evalbot6> Error:  unexpected end of input expecting term 

[14:09] <nothingmuch> integral: here's a workaround

[14:10] *** nothingmuch is now known as someguy

[14:10] <QtPlatypus> ?eval "perl"++

[14:10] <evalbot6> Error: Can't modify constant item: VStr "perl" 

[14:10] <someguy> nothingmuch++

[14:10] *** someguy is now known as nothingmuch

[14:10] <Aankhen``> ?eval "perl++"

[14:10] <evalbot6> 'perl++' 

[14:10] <PerlJam> I think QtPlatypus is trying to prove me right

[14:10] <nothingmuch> nothingmuch--

[14:10] <QtPlatypus> Does perl6 do the magical increment strings thing.

[14:11] <QtPlatypus> ?eval my $a="perl";++$a

[14:11] <evalbot6> 'perm' 

[14:11] <PerlJam> QtPlatypus: yes.

[14:11] <wolverian> neat, eh? :)

[14:12] <Aankhen``> ?eval Array.perl

[14:12] <evalbot6> '\\{obj:Class}' 

[14:12] <Aankhen``> ?eval ::Array.perl

[14:12] <evalbot6> '\\{obj:Class}' 

[14:12] <QtPlatypus> I see, a string by itself is imutable, I have to mutate a scalar verable

[14:12] <QtPlatypus> ?eval ++13

[14:12] <evalbot6> Error: Can't modify constant item: VInt 13 

[14:12] <QtPlatypus> Ok that makes sence.

[14:14] <wolverian> sense

[14:14] <Aankhen``> Cents!

[14:15] <QtPlatypus> http://dformosa.zeta.org.au/~dformosa/Spelling.html

[14:15] <PerlJam> btw, check out http://feather.perl6.nl/~duff/qotw/007e/frost.p6

[14:15] <PerlJam> pugs is *slow*

[14:17] * QtPlatypus hasn't expremented with pugscc "Does it give any speed up?"

[14:18] * QtPlatypus tries it "Not much"

[14:18] <integral> hmm, did anyone ever get the profiling stuff working with pugs?

[14:18] <PerlJam> I experienced something quite odd last night.  I was showing someone how to do something in perl5 and I wrote perl6 code without thinking about it.  perl6 is starting to get into my brain.

[14:19] <nothingmuch> integral - IIRC pjcj tried to use hat for code coverage metrics, but hat didn't support all the stuff pugs uses

[14:19] <integral> pointy blocks are *so* brilliant! :-)

[14:19] <integral> nothingmuch: I was meaning the stuff built into GHC

[14:19] <integral> to just figure out which bits of Eval.hs are expensive

[14:19] <nothingmuch> ticky ticky metering?

[14:19] <integral> yeah, something like the ticky ticky thingie

[14:19] <integral> (of which I know little)

[14:21] <integral> hmm, sloccount needs perl6 support now 8)

[14:21] <integral> hmm, pugs is about 13 person-years and 1.8e6 USD

[14:27] <nothingmuch> seen autrijus_

[14:27] <jabbot> nothingmuch: autrijus_ was seen 45 seconds ago

[14:28] <nothingmuch> autrijus_: i have some harrorth to toss your way

[14:45] <aufrank> hey all

[14:46] <nothingmuch> hello aufrank 

[14:46] <aufrank> can anyone tell me if any of the apocalypses address how/whether perl6 will support multi-dimensional arrays?

[14:47] <Khisanth> shape!

[14:48] <aufrank> is that a mailing list thing or an apocalypse thing?  I wanna read up :)

[14:48] <Aankhen``> http://dev.perl.org/perl6/doc/design/syn/S09.html

[14:49] <aufrank> heh

[14:49] <Aankhen``> Read under "Compact arrays".

[14:49] <aufrank> I just found a pointer to S09 in A2 ;)

[14:49] <aufrank> thanks :)

[14:49] <Aankhen``> Ah well. :-)

[14:50] <aufrank> ok, off to read docs 

[14:50] <aufrank> thanks all

[15:02] <nothingmuch> seen Corion

[15:02] <jabbot> nothingmuch: Corion was seen 4 days 17 hours 29 minutes 23 seconds ago

[15:02] <nothingmuch> oh my

[15:09] <Shillo> Hullo, all

[15:10] <QtPlatypus> Hi

[15:37] *** sbkhh is now known as Odin-

[16:05] <svnbot6> r4504, ninereasons++ | cookbook: literal whitespace in quoted strings

[16:08] <QtPlatypus> What causes the release number to be incremented?

[16:10] <ninereasons> QtPlatypus, do you mean "revision number" as in r4504 ? or release version number as in "Pugs 6.2.6"

[16:11] <QtPlatypus> The r\d\d\d\d number

[16:12] <ninereasons> that's a subversion number.  the version control software takes care of that, with each submission.  -- or do you mean, more technically, "by what mechanism?" (in which case, I don't know) :-)

[16:15] <QtPlatypus> So every check in increments it?

[16:19] <corneli> yes

[16:19] <corneli> every check-in, every of single files, increments the subversion revision number

[16:20] <corneli> s/ever of single files/even of a single file/

[16:21] <nothingmuch> seen lightstep

[16:21] <jabbot> nothingmuch: lightstep was seen 2 days 7 hours 23 minutes 45 seconds ago

[16:32] <nothingmuch> "Tedium being the stepmother of invention"

[16:42] <steveq> Hi there

[16:42] <steveq> I seem to be having a problem with want

[16:42] <steveq> I keep getting ' No compatible subroutine found: "&List"'

[16:42] <steveq> is this a known problem?

[16:43] <PerlJam> show the code.

[16:43] <PerlJam> Perhaps you want ::List

[16:43] <PerlJam> or maybe you're using List rather than "List"

[16:43] <PerlJam> or something.

[16:43] <steveq> return want.List ?? @ret :: @ret[0];

[16:44] <steveq> I basically copied the test from want.t

[16:44] <steveq> sub obj_ok_in_list   { want.List         ?? 42 :: 0 }

[16:44] <PerlJam> hrm.  That's an odd syntax.

[16:45] <PerlJam> or I just haven't put on my hat of sufficient imagination yet.

[16:47] <steveq> It seems right from SO6 but then i'm very new to this perl6 stuff

[16:47] <PerlJam> yeah, I guess it does

[16:47] <PerlJam> But note that those tests in want.t fail  :)

[16:47] <PerlJam> (at least on my pugs)

[16:48] <PerlJam> want ~~ "List" works though

[16:48] <PerlJam> as does want ~~ ::List

[16:49] <PerlJam> (or should anyway, I didn't test those exact things)

[16:49] <steveq> right, i'll do it that way then

[16:49] <steveq> thanks

[16:49] <rjbs> I was re-reading some synopsis (or other doc) recently, and saw the statement that $a .. $z were automatically available as args to a closure.  It doesn't seem true, and I can't find it again.

[16:49] <rjbs> Was I hallucinating?  Was that changed?  Am I doing something wrong?

[16:49] <rjbs> (I know about placeholder args.)

[16:49] <PerlJam> rjbs: Well, that's what $^a, $^b, etc are.

[16:50] <Limbic_Region> wish me luck

[16:50] * Limbic_Region is about to send a message to the list that is likely going to be highly contraversial 

[16:50] <rjbs> Yeah, I'm sure I read something about without-^.  Maybe it was a rejected RFC or something. :)

[16:50] <Aankhen``> rjbs >> You can use placeholders anywhere in a block and they'll be bound to the parameters passed to the block, in Unicode order.

[16:50] <rjbs> Aankhen``: yeah, those I know.  oh well!  I'm happy with those, just wondering what I'd read

[16:50] <Aankhen``> (i.e. it's not just restricted to a..z)

[16:50] <PerlJam> Limbic_Region: awesome!

[16:51] * rjbs has been finally putzing around writing perl6, and is having fun.

[16:51] <Aankhen``> rjbs >> Isn't it? ^_^

[16:51] <Limbic_Region> of fuck

[16:51] <Limbic_Region> accidently sent out my work number

[16:51] <PerlJam> rjbs: Me too. Earlier I commented that I was showing someone something in perl5 and inadvertently wrote perl6 code.   It's starting to infect my brain  :)

[16:51] * Limbic_Region kicks himself in the ass

[16:52] <rjbs> anybody have a perl6.vim? :)

[16:52] * Limbic_Region believes there is one in Pugs rjbs

[16:53] <PerlJam> Limbic_Region: you have an assumption that probably isn't true:  "I am sure that a great deal of that unpublished work has already been decided"

[16:53] <rjbs> Limbic_Region: Oh, I'll look!

[16:53] <Khisanth> rjbs: there should be one in the repo

[16:53] <Limbic_Region> http://perlmonks.org/index.pl?node_id=332117

[16:53] <Limbic_Region> grrr

[16:53] <rjbs> there it is!

[16:53] <Limbic_Region> http://svn.openfoundry.org/pugs/util/perl6.vim

[16:53] <Khisanth> especially since so many commit messages mention it :)

[16:53] <Limbic_Region> my copy/paste is broke

[16:53] <Limbic_Region> first I accidently paste my work sig

[16:53] * rjbs adds it to his ftdetect.

[16:54] <Limbic_Region> now post the wrong link

[16:54] <Khisanth> first your keyboard now your mouse

[16:55] <PerlJam> Limbic_Region: and anyway, your "solution" is already the case.

[16:55] <PerlJam> Limbic_Region: http://svn.perl.org/perl6

[16:55] <Limbic_Region> PerlJam - so where do I checkout the docs?

[16:56] <Limbic_Region> where do I submit patches?

[16:56] <PerlJam> that's the svn repository of the actual documents that @Larry work from.

[16:56] <PerlJam> Limbic_Region: you can submit patches to p6l probably.

[16:56] <Limbic_Region> that's the point PerlJam

[16:56] <Limbic_Region> I was playing dumb for a reason

[16:56] <Limbic_Region> it isn't general public knowledge

[16:57] <PerlJam> oh, you were trying to incite discussion and dissemination?

[16:57] <Limbic_Region> and no one, that I know of, has specifically asked for patches to help unburden the load of keeping them up to date

[16:58] * Limbic_Region expects the first reply to be a pointer

[16:58] <Limbic_Region> my reply is going to be - where do I send patches

[16:58] <PerlJam> If you like, I could start the ball rolling :-)

[16:58] <PerlJam> er, give it the second push

[16:59] <Limbic_Region> I am not sure

[16:59] <Limbic_Region> basically what I would like from @larry is buy in that they think it is a good idea

[17:00] <Limbic_Region> no sense in telling everyone there is a publicly available resource if they can't do anything about it

[17:00] <Limbic_Region> of course, if you worded your email in such a way as to say

[17:01] <Limbic_Region> the hard part is already taken care of <repository link>.  We just need @larry to decide if they want to accept patches and decide where to submit them"

[17:01] <Limbic_Region> that would be ok

[17:02] * Limbic_Region really wants an "unsend" feature to his email

[17:02] <PerlJam> well, what we really needs is a more pugsian effort.

[17:03] <Limbic_Region> PerlJam - I specifically avoided Pugs in that email 

[17:04] <Limbic_Region> but I agree

[17:04] <PerlJam> I see that.  But the same model is what would work for the design docs.  Let the "general public" of the perl6 community update the docs willy nilly then have @Larry or even $Larry as release manager to periodically review the docs and post releases.

[17:04] <Limbic_Region> trust people that show effort and a degree of sense and intervene when necessary

[17:05] <Limbic_Region> PerlJam - I envision the process to be more of a negotiation

[17:05] <PerlJam> If I were more dedicated to the task, everytime I saw a "let's go with that" from $Larry on p6l, I'd post a patch that updates the docs.

[17:05] <Limbic_Region> right - exactly what I proposed

[17:06] <Limbic_Region> only it wouldn't get committed until blessed

[17:06] <Limbic_Region> which leaves room to negotiate

[17:06] <Limbic_Region> ok - good idea, but let's do it this way

[17:06] <Limbic_Region> Jedi mind trick - let the people making decisions think it was their idea

[17:08] <Limbic_Region> I just see that on paper, we are really only about 1/3 of the way through the design process and I know that isn't the case

[17:08] <Limbic_Region> it is unfair to ask the handful of people that are already putting blood sweat and tears into it to work harder

[17:09] <Limbic_Region> so - offer to help while continuing to give them final authority

[17:11] <Limbic_Region> this by the way is a result of starting to go through the Synopses for Luke with the timeline of what's supposed to be in each one to find missing things

[17:11] <Limbic_Region> it was too much stuff for one person to do it alone

[17:15] <Aankhen``> ?eval module Foo { }

[17:15] <evalbot6> Error:  unexpected "{" expecting trait, ";" or end of input 

[17:15] <svnbot6> r4505, iblech++ | ext/libwww-perl -- Updated svn:ignore.

[17:16] <Aankhen``> iblech >> Think you could get the block-style module declarations to pass? :-)

[17:16] <Aankhen``> s/pass/parse/

[17:16] <Limbic_Region> ?eval module Foo {};

[17:16] <evalbot6> Error:  unexpected "{" expecting trait, ";" or end of input 

[17:16] <iblech> You mean module Foo {...}?

[17:16] <iblech> Ah

[17:16] <Limbic_Region> ?eval module Foo {...};

[17:16] <evalbot6> Error:  unexpected "{" expecting trait, ";" or end of input 

[17:16] <Aankhen``> Indeed.

[17:17] <Aankhen``> ?eval module Foo { sub bar () { ... } }

[17:17] <evalbot6> Error:  unexpected "{" expecting trait, ";" or end of input 

[17:23] <Aankhen``> ?eval sprintf("%s", "foo")

[17:23] <evalbot6> pugs: Printf.printf: bad argument 

[17:23] <Aankhen``> ?eval sprintf("%3d", 1)

[17:23] <evalbot6> '  1' 

[17:23] <Aankhen``> ?eval sprintf("%c", "abcd")

[17:23] <evalbot6> '

[17:23] <Aankhen``> ?eval sprintf("%s %s", "foo", "bar")

[17:23] <evalbot6> pugs: Printf.printf: bad argument 

[17:23] <Aankhen``> What am I doing wrong?

[17:23] <iblech> Re. I'll look into module Foo {...} :)

[17:23] <PerlJam> Aankhen``: nothing probably.  It just might be that the %s specifier is sub-implemented :)

[17:23] <iblech> Yep, it's because of Haskell

[17:23] <iblech> As Haskell doesn't know arbitrary number of args (out of the box), it's currently hardcoded to work with one arg or so only

[17:23] <Aankhen``> Ah.

[17:23] <iblech> It's trivial to make it work with more args, I think, but it's non-trivial to generalize it

[17:23] <Aankhen``> ?eval sprintf("%d %d", 1, 2)

[17:23] <evalbot6> '1 2' 

[17:23] <iblech> According to Pugs.Prim:887, sprintf() should work with 0-3 args

[17:23] <iblech> Ok, then the real reason why your earlier example doesn't work is because %s isn't yet implemented, at PerlJam said

[17:24] <Aankhen``> Ah.

[17:24] <Aankhen``> sprintf() is being reimplemented in Haskell?

[17:24] <Aankhen``> s/is being/has been/ as appropriate.

[17:26] <iblech> Pugs uses the Haskell Text.Printf module, dunno if this is a pure-Haskell implementation or if it uses the libc one.

[17:26] <Aankhen``> OK.

[17:26] <xerox> Aankhen``, I know of a printf implementation...

[17:26] <xerox> Let me search

[17:27] <xerox> http://www.cse.unsw.edu.au/~dons/hs-plugins/hs-plugins-Z-H-4.html#node_sec_7.2

[17:32] <Aankhen``> Thanks. :-)

[17:36] <Aankhen``> ?eval sub foo () returns Str is primitive { }

[17:36] <evalbot6> undef 

[17:36] <Aankhen``> ?eval sub foo () is primitive returns Str { }

[17:36] <evalbot6> Error:  unexpected "r" expecting trait or block 

[17:37] <clkao> mmm i don't seem to be able to build PUGS_EMBED=perl5 on osx

[17:37] <svnbot6> r4506, Aankhen++ | * added skeleton for URI::Escape.

[17:37] <svnbot6> r4507, Aankhen++ | * added C<is export> and C<returns Foo> as appropriate to URI::Escape.

[17:41] <Aankhen``> ?eval class Foo { multi method prefix:<~> () { $?CLASS } }; my $foo = Foo.new(); ~$foo;

[17:41] <evalbot6> Error: Wrong number of invocant parameters: 0 actual, 1 expected 

[17:41] <Aankhen``> ?eval class Foo { multi sub prefix:<~> () { $?CLASS } }; my $foo = Foo.new(); ~$foo;

[17:41] <evalbot6> '<obj:Foo>' 

[17:41] <Aankhen``> ?eval class Foo { multi method prefix:<~> () { $?CLASS } }; my $foo = Foo.new(); "$foo";

[17:41] <evalbot6> '<obj:Foo>' 

[17:42] <Aankhen``> ?eval class Foo { multi method prefix:<~> () { "An object of class " ~ $?CLASS } }; my $foo = Foo.new(); "$foo";

[17:42] <evalbot6> '<obj:Foo>' 

[17:42] <iblech> Aankhen``: module Foo {...} is now parsed, checking in in a moment :)

[17:42] <Aankhen``> ?eval class Foo { multi method *prefix:<~> () { "An object of class " ~ $?CLASS } }; my $foo = Foo.new(); "$foo";

[17:42] <evalbot6> '<obj:Foo>' 

[17:42] <Aankhen``> iblech++

[17:42] <clkao> src/syck/syck.o: unknown symbol `_printf$LDBLStub'

[17:43] <Aankhen``> ?eval class Foo { multi sub *prefix:<~> () { "An object of class " ~ $?CLASS } }; my $foo = Foo.new(); "$foo";

[17:43] <evalbot6> '<obj:Foo>' 

[17:43] <Aankhen``> ?eval class Foo { multi sub *prefix:<~> () { "An object of class " ~ $?CLASS } }; my $foo = Foo.new(); ~$foo;

[17:43] <evalbot6> '<obj:Foo>' 

[17:43] <Aankhen``> Hrm.

[17:43] <clkao> ?eval 1 < 10 < 5

[17:43] <evalbot6> bool::true 

[17:44] <iblech> Pugs seems to (incorrectly) expand this to (1 < 10) && (1 < 5)

[17:45] <iblech> Ah, no, it parses this as (1 < 10) < 5

[17:52] <iblech> (1 < 10) resulting in true, which is then numified to 1, which is less than 5

[17:52] <Aankhen``> iblech >> Since you're on a roll, could you also make it parse C<is export(:DEFAULT :foo :bar)>? :-)

[17:52] <Aankhen``> *puppy eyes*

[17:52] <iblech> :) I'll look into it, but this one seems to be a little more tricky

[17:52] <Aankhen``> :-D

[17:52] <svnbot6> r4508, iblech++ | Pugs.Parser -- Made module Foo {...} parse.

[17:52] <Aankhen``> I'm just concerned about letting it atleast parse so that the declarations can be put in place, even if no action is taken.

[17:52] <iblech> Is "is export[...]" allowed too (like it's the case with normal :foos?)

[17:52] <nothingmuch> Limbic_Region: ping

[17:52] <Aankhen``> Otherwise, it'll be a pain to go back to every module and change it all once the proper behaviour is implemented.

[17:52] <iblech> Yep, right...

[17:52] <Aankhen``> S11 just mentions is export(...).

[17:52] <Aankhen``> Hmm.

[17:52] <Aankhen``> I think once I've ported URI::Escape, I'll take a look at the diffs for your "foo is now parsed" commits.

[17:52] <Aankhen``> I should learn to make them parse myself rather than keep bugging you.

[17:52] <iblech> No worries

[17:52] <nothingmuch> autrijus_: http://www.ultratechnology.com/meta.html

[17:52] <iblech> What's allowed inside the (...)-expression? I.e., is "is export (42 + 13)" allowed (from a purely syntax point of view)?

[17:52] <iblech> s/export (/export(/

[17:52] <Aankhen``> No.

[17:52] <iblech> Ok, that simplifies things :)

[17:52] <Aankhen``> One sec.

[17:53] <pasteling> "Aankhen``" at 203.101.1.1 pasted "C<is export> (from S11)" (5 lines, 325B) at http://sial.org/pbot/10919

[17:54] <iblech> Ok, I'll make it parse those

[17:55] <Limbic_Region> nothingmuch: pong

[17:56] <nothingmuch> how's your haskell progressing?

[17:56] <Aankhen``> Be back in 10 minutes.

[17:56] <Limbic_Region> nothingmuch - I am going to spend all day Saturday playing

[17:56] <Limbic_Region> I think it is time to stop reading and start doing

[17:57] <nothingmuch> that took me a long while to realize

[17:57] <nothingmuch> i played with the YAHT exercises, but, ehh...

[17:57] <nothingmuch> i tried doing the meet-the-monads sheep tutorial

[17:58] <nothingmuch> and even reimplemented msum along the way

[17:58] <nothingmuch> but I still didn't feel like i actually did something

[17:59] <Limbic_Region> right - it is like I can follow along and I can do the things that aren't much different then what I just read

[17:59] <Limbic_Region> but it doesn't feel like it is a part of me

[17:59] <Limbic_Region> I still have to go refer to the docs for anything but the most trivial

[17:59] <Limbic_Region> so - just time to sink or swim

[18:03] <iblech> Aankhen``: "is export(...)" is parsed now.

[18:05] <iblech> Aankhen``: Making things parse is usually just finding the appropriate rule and then adding appropriate function calls to slurp abit of the source, i.e. "optional $ verbatimParens $ many $ satisfy (/= ')')" will parse "(...)"

[18:05] <svnbot6> r4509, iblech++ | Pugs.Lexer -- Make "is export(...)" parse (quick hack for now).

[18:06] <Aankhen``> What does $ mean?

[18:07] <iblech> ($) is just a nice way to avoid parens: You can always write "a (long expression)" as "a $ long expression"

[18:07] <nothingmuch> damnit! i hate concrete

[18:07] <iblech> (Its definition is "a $ b = a b" or so)

[18:07] <Aankhen``> Ah, so basically, what you wrote is a bunch of function calls?

[18:07] <iblech> Yep.

[18:08] <nothingmuch> the way it gets clean is a (b c (d e f (g h))) looks like lisp

[18:08] <iblech> That line is equivalent to optional (verbatimParens (many (satisfy (/= ')'))))

[18:08] <Aankhen``> OK.

[18:08] <nothingmuch> a $ b c $ d e f $ g h -- doesn't

[18:08] <nothingmuch> not that that's clear, due to the fact that the function names are single letters

[18:09] <nothingmuch> despite my bad example it does help readability

[18:10] <Aankhen``> BRB.

[18:14] <nothingmuch> oof, stupid chat program

[18:15] * nothingmuch decides to switch to irssi

[18:18] <Limbic_Region> PerlJam ping

[18:18] <steveq> Is there a way to say "only test this single test file"?

[18:20] <iblech> steveq: There is: prove t/.../.t

[18:20] <iblech> You may need to set an environment var before running prove, though -- PERL_HARNESS IIRC

[18:20] <iblech> PERL_HARNESS=/path/to/pugs prove t/.../...t

[18:20] <steveq> aha

[18:20] <steveq> Not seen that before

[18:21] <iblech> And ./pugs t/.../.t will work, too, given a correct %*ENV<PERL6LIB>

[18:22] <steveq> yeah, I couldn't work out te correct PERL6LIB

[18:23] <iblech> make install or PERL6LIB=/pugs_sourcedir/blib6/lib

[18:23] <steveq> cheers

[18:25] <steveq> Reading the tests is an excellent way to learn perl6 I find

[18:27] <iblech> Yep :)

[18:27] <iblech> t/++

[18:27] *** Aankh|Clone is now known as Aankhen``

[18:32] <ninereasons> In perl 5, if I say my @ar = ('x') x 10; # then @ar is defined as containing 10 elems of 'x' 

[18:32] <ninereasons> what about in perl 6?

[18:32] <ninereasons> ?eval my @ar = ('x') x 10; @ar;

[18:32] <evalbot6> ['xxxxxxxxxx'] 

[18:32] <ninereasons> is that a bug?

[18:33] <ninereasons> or is the old syntax replaced with the xx operator?

[18:33] <vcv-> yep

[18:33] <ninereasons> yep replaced?

[18:33] <vcv-> x = scalar xx = list

[18:33] <vcv-> ?eval my @ar = 'x' xx 10; @ar;

[18:33] <evalbot6> ['x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x'] 

[18:34] <ninereasons> ok, so x is now more strict ?

[18:34] <PerlJam> "more strict"?

[18:34] * ninereasons should have used a different character than 'x' for the example

[18:35] <PerlJam> The special case for LIST x EXPR was removed is all.

[18:35] <ninereasons> PerlJam, that's what I mean.  no special case for LIST

[18:40] <vel> hi. anyone knows what's going on with   http://www.jwcs.net/~jonathan/perl6/  (windows pugs repository for binaries)

[18:40] <svnbot6> r4510, Aankhen++ | * HTTP::Message -- added C<is copy> to string parameters, added multi subs handling C<Str $unsafe>.

[18:41] <Limbic_Region> vel - apparently it is an apache misconfiguration problem

[18:42] <Aankhen``> ?eval true

[18:42] <evalbot6> Error:  unexpected end of input expecting term 

[18:42] <iblech> ?eval bool::true

[18:42] <evalbot6> bool::true 

[18:42] <Aankhen``> ?eval bool::true

[18:42] <evalbot6> bool::true 

[18:43] <vel> 10Limbic_Region: thanks. i am sure i downloaded snapshot from there few days ago...01

[18:44] <Limbic_Region> as did I

[18:44] <PerlJam> vel: and the apache config couldn't have changed in the mean time?

[18:44] <Limbic_Region> seen Jonathan

[18:44] <jabbot> Limbic_Region: Jonathan was seen 2 days 7 hours 59 minutes 12 seconds ago

[18:44] <Limbic_Region> seen Jonathan_

[18:44] <jabbot> Limbic_Region: Jonathan_ was seen 10 days 18 hours 28 minutes 42 seconds ago

[18:45] <Aankhen``> ?eval my %foo; for (my $i = 0; $i < 5; $i++) { state %foo = (foo => "bar"); } %foo.perl

[18:45] <evalbot6> Error:  unexpected "f" expecting ";", statements or end of input reserved word 

[18:45] <Aankhen``> ?eval my %foo; loop (my $i = 0; $i < 5; $i++) { state %foo = (foo => "bar"); } %foo.perl

[18:45] <evalbot6> Error: No compatible subroutine found: "&my" 

[18:45] <Limbic_Region> PerlJam - I posted an empty framework for S17 and asked if it was an acceptable patch

[18:45] <Aankhen``> ?eval my (%foo, $i); loop ($i = 0; $i < 5; $i++) { state %foo = (foo => "bar"); } %foo.perl

[18:45] <evalbot6> '{}' 

[18:45] <PerlJam> Limbic_Region: yeah, and I saw your PM post too.  Limbic_Region++

[18:45] <iblech> Aankhen``: The inner state %foo hides the outer my %foo

[18:46] <Aankhen``> iblech >> Yeh, I thought it would... I just figured it wouldn't hurt to try. ;-)

[18:46] <Aankhen``> Does C<FIRST { ... }> work?

[18:46] <iblech> ?eval sub abc { my $x; FIRST { $x++ }; $x } abc(); abc(); abc()

[18:46] <evalbot6> \undef 

[18:47] <iblech> Hm.. bad test

[18:47] <Aankhen``> ?eval sub abc { my $x; FIRST { $x++ }; $x } (abc(), abc(), abc())

[18:47] <evalbot6> (\1, \undef, \undef) 

[18:47] <Limbic_Region> best way to learn is to RTFM right?  What do you do if TFM is missing information - find out what it is an fix it

[18:48] <iblech> So FIRST {...} works, as should INIT and CHECK

[18:48] <Aankhen``> OK.

[18:49] <Aankhen``> Could anyone explain to me just when CHECK { ... } is called, and what it is used for?

[18:49] <Aankhen``> Hmm, wait.

[18:49] <Aankhen``> I just realised I was looking at the S instead of the A.

[18:49] * Aankhen`` goes to read the A.

[18:50] <Limbic_Region> Aankhen - if the A disagrees with the S then trust the S

[18:50] <Aankhen``> Yeh, but I figure the A would explain it, the S would just offer a brief summary. :-)

[18:50] <iblech> The order is: BEGIN (at compile time) - CHECK (compile time, too, but ALAP) - INIT (run time, ASAP) - ... - END (run time, ALAP)

[18:51] <Aankhen``> I saw the order later, I couldn't understand what it's for.

[18:51] <Limbic_Region> "The synopses are now in the process of becoming our design documents, so you'll find a lot of details here that aren't mentioned elsewhere. If there's a conflict between any other documents and these documents, believe these documents (unless the other document is email from one of us, of course, in which case you should yell at us for not keeping these up to date.)"

[18:51] <Limbic_Region> So when we say "S5", we mean "spec" as well as "synopsis".

[18:51] <Limbic_Region> So really, the S no longer means synopsis - it means Spec

[18:51] <Limbic_Region> s/longer means/longer just means/

[18:51] <Aankhen``> OK.

[18:51] <Aankhen``> So, you wanna tell me what CHECK is all about?

[18:52] <Aankhen``> Is it only a question of being called at a particular time?

[18:52] <Aankhen``> s/time/point/

[18:52] <Limbic_Region> Aankhen - in p5 it had specific meaning - I haven't familiarized myself with p6

[18:53] <Aankhen``> OK.

[18:53] <Limbic_Region> the rule of thumb though is - if it isn't spelled out differently assume p5

[18:53] * Aankhen`` goes to CHECK the Perl 5 meaning.

[18:53] <iblech> :d

[18:53] <Limbic_Region> AES18 isn't written yet is it?

[18:54] <Limbic_Region> nor is 21

[18:55] <iblech> Right, both not yet written

[18:55] <Limbic_Region> I am hoping that if submitting patches for outlines is acceptable

[18:55] <Limbic_Region> filling in the blanks will come faster because we will be able to visually see what is missing

[18:56] <Limbic_Region> we don't have to hop around randomly

[18:56] <Aankhen``> I feel sorry for anyone who bought P6E...

[18:56] <Limbic_Region> oh, that was addressed way back when and $larry had this to say

[18:56] <Limbic_Region> Aankhen`` - why - it was just as much about parrot as it was p6

[18:57] <Aankhen``> But both evolve so fast...

[18:57] <Limbic_Region> probably more so about Parrot

[18:57] <Limbic_Region> I bought it (and read some of it) - I don't feel bad about it

[18:58] <Aankhen``> You poor thing. :-(

[18:58] * Aankhen`` ducks.

[18:59] <Limbic_Region> If only I were as smart as the people around me seem to think I am

[19:00] <Limbic_Region> I would be able to do more to help the project then just advocacy and a few tests

[19:00] <Limbic_Region> Aankhen`` - reading the book, even if 30% of it is no longer applicable is still a heck of a lot better than trying to catch up on 5 years of posts on the list

[19:00] <Aankhen``> Ahh, lighten up. :-)

[19:01] <Limbic_Region> was mixing threads of thought

[19:01] <Limbic_Region> only 1 of those lines was intended for you

[19:01] <Aankhen``> I know.

[19:02] * Aankhen`` is just fooling around anyway.

[19:02] <Limbic_Region> yeah, Perl is sexy that way

[19:02] * Aankhen`` installs the Microsoft Platform SDK.

[19:03] <Aankhen``> BRB.

[19:19] <svnbot6> r4511, Aankhen++ | * implemented &URI::Escape::uri_escape.

[19:19] <svnbot6> r4511, Aankhen++ | * don't need %subst in URI::Escape.

[19:19] <svnbot6> r4512, iblech++ | docs/talks/README -- Added link to the HTML version of autrijus++' APW slides.

[19:23] <iblech> Aankhen``: Just FYI, as I see you don't stop porting/creating URI/CGI-related modules :) -- I've already ported URI (with most of its subclasses) at http://tpe.freepan.org/repos/iblech/URI/lib/URI

[19:23] <iblech> Aankhen``++ 

[19:26] * Aankhen`` dies.

[19:27] * nothingmuch dances on Aankhen``'s grave

[19:29] <iblech> (The subclasses are mostly only ten lines or so long, mostly protocol handlers, e.g. URI::http, URI::ftp, etc.)

[19:29] * iblech waits for Aankhen`` to resurrect :)

[19:36] *** khisanth_ is now known as Khisanth

[19:37] <sri_> is glob implemented now?

[19:40] <Aankhen``> iblech >> Thank you for reminding me.

[19:41] * Aankhen`` wonders how many times he must be told that URI has been ported before it finally sinks in.

[19:41] <Aankhen``> Hmmm... how can we integrate that with Pugs?

[19:41] <PerlJam> sri_: I don't think so.

[19:42] <sri_> then i'll commit something based on File::Find and Text::Glob

[19:43] * Aankhen`` pokes iblech.

[19:43] <iblech> Aankhen``: Yep?

[19:43] <Aankhen``> How can your URI distro be integrated with Pugs?

[19:46] <iblech> Aankhen``: As I think some idioms don't work yet in Pugs -- simply continue to port URI in ext/, and have an occasional look at my port

[19:46] <iblech> Aankhen``: Or you might want to copy a module.pm and modify it so it works in Pugs

[19:48] <Aankhen``> Alright.

[19:48] <iblech> Aankhen``: I.e. you can orientate yourself at my port

[19:48] <nothingmuch> http://sial.org/pbot/10925

[19:48] <Aankhen``> I was just looking at it from the point of view of keeping both of them synchronised.

[19:49] * Aankhen`` wonders how you get VS.NET to alter the PATH when building a project...

[19:50] <Aankhen``> Oh.

[19:50] <Aankhen``> I just figured it out.

[19:50] <Aankhen``> I love me.

[19:50] <iblech> No need to keep my FreePAN port synchronised -- that's only a burden for you, I think. We can simply remove my port when your one in ext/ is finished

[19:50] <iblech> (I think)

[19:52] <Aankhen``> Oh $#@!

[19:52] <Aankhen``> .

[19:55] <iblech> nothingmuch: Nice! :)

[19:57] <nothingmuch> appearantly "here cell allot" is spelled ",", but that doesn't sound as dramatic =/

[19:57] <svnbot6> r4513, iblech++ | lib/Perl6/Pugs.pm -- More documentation

[20:01] <Aankhen``> ?eval 128.as("%%%02X")

[20:01] <evalbot6> pugs: Printf.printf: bad formatting char X 

[20:01] <Aankhen``> ?eval 128.as("%%%02x")

[20:01] <evalbot6> pugs: Printf.printf: bad argument 

[20:01] <Aankhen``> ?eval 128.as("%%%02d")

[20:01] <evalbot6> pugs: Printf.printf: bad argument 

[20:01] <Aankhen``> Bah.

[20:02] <iblech> ?eval sprintf "%%%02X", 128

[20:02] <evalbot6> pugs: Printf.printf: bad formatting char X 

[20:02] <iblech> ?eval sprintf "%%%02x", 128

[20:02] <evalbot6> '%80' 

[20:10] <Aankhen``> iblech >> You seem to have a P5 style s/// in &uri_unescape.

[20:18] <autrijus_> my laptop's motherboard just died on me (!)

[20:18] <svnbot6> r4514, Aankhen++ | * EOL at EOF.

[20:18] <svnbot6> r4514, Aankhen++ | * return 1!

[20:18] <svnbot6> r4515, Aankhen++ | - changed C<sprintf> to C<.as>.

[20:20] <Limbic_Region> Aankhen`` - does that mean you can say say $str.as('%.2f'); # ???

[20:21] <Aankhen``> Apparently.

[20:21] <Aankhen``> ?eval 123.as('%04d')

[20:21] <evalbot6> pugs: Printf.printf: bad argument 

[20:21] <Aankhen``> But it doesn't seem to work in Pugs.

[20:21] <Aankhen``> I got it from iblech's URI::Escape.

[20:22] <Aankhen``> Come to think of it, I remember reading about .as.

[20:22] <autrijus_> .as works only for %s yet

[20:22] <Aankhen``> OK.

[20:22] <Limbic_Region> ?eval my $str = '123'; $str.as('%.2d')

[20:22] <evalbot6> pugs: Printf.printf: bad argument 

[20:22] * autrijus_ hopes the laptop doesn't burn up 

[20:22] <Aankhen``> ?eval 123.as('%s')

[20:22] <evalbot6> '123' 

[20:22] <Limbic_Region> hey autrijus - how are things?

[20:23] * Limbic_Region has been throwing rocks at hornet nests 

[20:23] * Aankhen`` hopes it doesn't burn up either.

[20:23] <autrijus_> <- in the same room as jens, Boogie__, chip, leo

[20:23] <autrijus_> just got the network up

[20:23] <autrijus_> took some work

[20:23] <svnbot6> r4516, Aankhen++ | * &URI::Escape::uri_escape (::Str, ::Str, ::Bool) -- changed $pattern to a regular string.

[20:23] <svnbot6> r4516, Aankhen++ | * &URI::Escape::uri_escape (::Str) -- added C<return>.

[20:23] <svnbot6> r4516, Aankhen++ | * implemented &URI::Escape::fail_hi.

[20:23] <autrijus_> as it's late here we're just going to hold a planning meeting

[20:23] <autrijus_> for the things we can do tomorrow

[20:24] <Limbic_Region> autrijus_ - with the help of tall_man, I have found a bug in pugs that is going to have significant impact

[20:24] <autrijus_> Limbic_Region: good!

[20:24] <autrijus_> Limbic_Region: pray tell

[20:25] <Limbic_Region> the bug itself is probably trivial, but the fact there are a good portion of tests that rely on the bad/incorrect behavior - they all need to change

[20:25] <autrijus_> so I'm pushing for perl5 embed support (as opposed to perl 5 hosting support as ponie)

[20:25] <autrijus_> Limbic_Region: sure. what was the bug?

[20:25] <autrijus_> perl 5 embed support in ponie that is

[20:25] <Limbic_Region> ?eval sub bar ( +$foo ) { $foo } bar( foo => 3);

[20:25] <autrijus_> er

[20:25] <evalbot6> \3 

[20:25] <autrijus_> perl 5 embed support in parrot that is

[20:25] <Limbic_Region> works as expected right

[20:25] <autrijus_> right

[20:25] <Limbic_Region> ?eval sub bar ( +$foo ) { $foo } bar( 3);

[20:25] <evalbot6> \3 

[20:25] <autrijus_> was about to ask what's the problem with that

[20:25] <Limbic_Region> also works as expected???? wrong

[20:25] <autrijus_> it's wrong.

[20:26] <autrijus_> named bindings shouldn't take positional arguments.

[20:26] <autrijus_> it's a regression

[20:26] <Limbic_Region> named parameters must be named 

[20:26] <autrijus_> clkao reported that chained comparisons cease to work either

[20:26] <autrijus_> 6 > 5 > 4

[20:26] <autrijus_> is no longer true

[20:26] <autrijus_> both worked a few releases back :-/

[20:26] <Limbic_Region> but there are apparently a signficant number of tests depending on that incorrect behavior

[20:26] * autrijus_ hates regressions

[20:26] <autrijus_> Limbic_Region: depending how?

[20:27] <Limbic_Region> meaning the signature is named but they are passed as positional

[20:27] <autrijus_> nod... so we need to 1)fix the bug

[20:27] <autrijus_> and 2)unbreak the tests

[20:27] <Limbic_Region> and see which previously working tests start breaking

[20:28] <autrijus_> yup.

[20:28] <obra> autrijus_: should 0E0 be 0 but true?

[20:28] <Limbic_Region> tall_man has identified two bugs now - really would like to convince him to join the madness

[20:28] <autrijus_> obra: no.

[20:28] <obra> :(

[20:28] <svnbot6> r4517, Aankhen++ | - changed C<is export> to C<is export(:DEFAULT)>.  iblech++

[20:29] <autrijus_> Limbic_Region: I'll make you a metacommitter and you can send invitations

[20:29] <Aankhen``> ?eval sub foo (Array of Str *@foo) { gather { for @foo -> $bar { take $bar.uc() } } } foo("foo", "bar", "baz")

[20:29] <evalbot6> Error:  unexpected "o" expecting "?", "*", "+", "++" or parameter name 

[20:29] <Aankhen``> ?eval sub foo (*@foo) { gather { for @foo -> $bar { take $bar.uc() } } } foo("foo", "bar", "baz")

[20:29] <evalbot6> ('FOO', 'BAR', 'BAZ') 

[20:29] <revdiablo> ah, that reminds me, pugs -e 'my $foo = { bar => { baz => (<one two three>) } }; say ref $foo<bar><baz>' # print Str, shouldn't it print Array?

[20:29] <revdiablo> maybe my pugs is out of date

[20:29] <Limbic_Region> autrijus_ - I don't think that would work in this case - he seems unconvinced about having enough free time

[20:29] <Aankhen``> ?eval sub foo (*@foo of Str) { gather { for @foo -> $bar { take $bar.uc() } } } foo("foo", "bar", "baz")

[20:29] <evalbot6> Error:  unexpected "o" expecting trait, ",", ":" or ")" 

[20:29] * Aankhen`` sighs.

[20:30] <Aankhen``> ?eval my $foo = { bar => { baz => (<one two three>) } }; ref $foo<bar><baz>

[20:30] <evalbot6> ::Str 

[20:30] <autrijus_> Limbic_Region: the trick is to send the invitation

[20:30] <autrijus_> and it's up to the other party to take it

[20:30] <revdiablo> Aankhen``: ah, you beat me to it

[20:30] <Aankhen``> ^_^

[20:30] <Limbic_Region> well - if I find his email address I will ask

[20:30] <revdiablo> I can add a test somewhere if there isn't already one

[20:31] <revdiablo> ?eval my $foo = { bar => { baz => [<one two three>] } }; ref $foo<bar><baz>

[20:31] <evalbot6> ::Str 

[20:31] <Limbic_Region> ok - time for weekend

[20:31] <revdiablo> that's actually what I meant

[20:31] <Limbic_Region> TTFN all

[20:31] <revdiablo> cya Limbic_Region 

[20:31] <Aankhen``> ?eval my $foo = { bar => [<one two three>] }; $foo.ref;

[20:31] <evalbot6> ::Hash 

[20:31] <Aankhen``> ?eval my $foo = { bar => [<one two three>] }; $foo<bar>.ref;

[20:31] <evalbot6> ::Str 

[20:32] <Aankhen``> ?eval my $foo = { bar => [<one two three>] }; $foo<bar>[0].ref;

[20:32] <evalbot6> ::Str 

[20:32] <Aankhen``> ?eval my $foo = { bar => [1, <one two three>] }; $foo<bar>.ref;

[20:32] <evalbot6> ::Int 

[20:32] <Aankhen``> Seems to be taking on the ref of the first element.

[20:32] <Aankhen``> ?eval my $foo = { bar => [1] }; $foo<bar>.ref;

[20:32] <evalbot6> ::Int 

[20:33] <Aankhen``> ?eval my $foo = { bar => (1) }; $foo<bar>.ref;

[20:33] <evalbot6> ::Int 

[20:33] <gaal> autrijus, hi, i need some help with Reader

[20:33] <revdiablo> ?eval my $foo = [ 'bar', [1, 2, 3] ]; $foo[1].ref

[20:33] <evalbot6> ::Array 

[20:33] <revdiablo> so it works in an arrayref, but not in a hashref?

[20:34] <gaal> have been reworking caller per larry's notes

[20:34] <svnbot6> r4518, Aankhen++ | * fixed signature for &URI::Escape::uri_unescape.

[20:34] <gaal> but now i'm stuck with the monad part (which used to work)

[20:34] <Aankhen``> ?eval my $foo = [ <one two three> ]; $foo.ref

[20:34] <evalbot6> ::Array 

[20:35] <Aankhen``> ?eval my $foo = [ <one two three> ]; $foo ~~ Ref

[20:35] <evalbot6> bool::false 

[20:35] <pasteling> "gaal" at 192.115.25.249 pasted "caller WIP" (32 lines, 1.5K) at http://sial.org/pbot/10926

[20:35] <Aankhen``> ?eval my $foo = <one two three>; $foo ~~ Ref

[20:35] <evalbot6> bool::false 

[20:35] <autrijus_> gaal: what was the error?

[20:35] <gaal> it's a type error on return $ Just caller ++ (local (const caller) (fetchCaller))

[20:35] <gaal> i know why it's an error

[20:35] <revdiablo> t/data_types/mixed_multi_dimensional.t looks to be the place

[20:36] <gaal> because local returns m a

[20:36] <gaal> but i don't know how (if) my approach can be fixed

[20:36] <gaal> what i'm trying to do is make fetchCaller a generator of deeper and deeper stack frames

[20:37] <autrijus_> foo <- local (const caller) fetchCaller

[20:37] <autrijus_> return $ Just (caller ++ foo)

[20:38] <gaal> what's foo's type?

[20:38] <nothingmuch> autrijus_: did you see the link I sent you?

[20:38] <autrijus_> nothingmuch: no

[20:38] <revdiablo>     my $h = { a => [ 1,2,3 ] };

[20:38] <revdiablo>     is($h<a>.ref, 'Array', "array nested in hashref in one declaration");

[20:38] <revdiablo> does that seem sane?

[20:38] <autrijus_> gaal: "env"?

[20:38] <autrijus_> Env that is

[20:38] <autrijus_> you can't ++ it though

[20:38] <nothingmuch> http://www.ultratechnology.com/meta.html

[20:39] <nothingmuch> I'm writing a bare metal forth chapter

[20:39] <svnbot6> r4519, iblech++ | Added a test for sprintf() and as() (t/builtins/sprintf_and_as.t).

[20:39] <Aankhen``> Is there any clear disadvantage to using MMD?

[20:39] <gaal> another thing i tried was to use repeat, outside of fetCaller

[20:39] <Aankhen``> Does it result in a large slowdown?

[20:39] <gaal> return . repeat fetchCaller

[20:39] <revdiablo> maybe I should :todo<bug>

[20:40] <gaal> that didn't work either but i forget why

[20:40] <Aankhen``> I've been splitting subs into multi subs like crazy... dunno whether that's a bad idea.

[20:41] <arcady> probably not a bad idea

[20:41] <arcady> makes it more functional-like and haskelly

[20:41] <nothingmuch> arcady: you are probably also interested in the link

[20:42] <arcady> huh?

[20:42] <nothingmuch>  http://www.ultratechnology.com/meta.html

[20:42] <nothingmuch> Aankhen``: i think multisubs should be the default

[20:42] <nothingmuch> read docs/mmd.kwid

[20:43] <nothingmuch> and please finalize it if you can, I don't know what exact semantics I would really like

[20:43] <nothingmuch> if/when you finish, post the proposal to p6l =)

[20:48] <autrijus_> jens++

[20:48] <svnbot6> r4520, Aankhen++ | * whoops... apparently &URI::Escape::uri_unescape did need that signature; modified it to use MMD.

[20:48] <svnbot6> r4521, iblech++ | examples/ -- Moved some examples to new examples/algorithms/.

[20:48] <svnbot6> r4522, revdiablo++ | added test for HoA declared in one statement

[20:48] <autrijus_> # promise to help me out to get hw2005 in TeX

[20:51] <Aankhen``> ?eval :foo<bar>

[20:51] <evalbot6> ('foo' => 'bar') 

[20:51] * Aankhen`` neatly sidesteps nothingmuch's blame transfer.

[20:51] <nothingmuch> Aankhen``: it's not a blame transfer, i just thought you might be interested

[20:51] <Aankhen``> nothingmuch >> Seriously, though, I don't know nearly enough about SMD and MMD, and the relative merits and demerits of each.

[20:52] <nothingmuch> nor do i =)

[20:52] <Aankhen``> Heh.

[20:52] <nothingmuch> Class::Events is just an experiment that made it seem like MMD is the way to go

[20:52] <nothingmuch> and i tried to think, and it looked like SMD does not conflict with MMD everywhere

[20:52] <nothingmuch> but we do get basic pattern matching everywhere

[20:52] <nothingmuch> it is very post object oriented

[20:53] <gaal> ok, i want to simplify this. env has an envCaller, which i want to locally "be in". can i turn that into a list at all?

[20:53] <autrijus_> a list?

[20:53] <gaal> i wanted to do this:

[20:54] <gaal> formatFrame $ last $ take skip $ filter wantFrame $ repeat $ fetchCaller

[20:54] <gaal> more or less

[20:54] <gaal> this uses fetchCaller as a generator of

[20:54] <gaal> er

[20:54] <gaal> monadic inspiration

[20:54] <gaal> and filters the first frame based on frame type (wantFrame)

[20:54] <Boogie___> http://feather.perl6.nl/~boogie/flipchart.html

[20:55] <gaal> and takes the correct one (last $ take skip)

[20:55] <gaal> however, these envs aren't really values to be passed around, are they?

[20:55] <autrijus_> they are

[20:55] <autrijus_> you can just take them out

[20:55] <autrijus_> and cast them to Val even

[20:55] <autrijus_> if you want to do that

[20:55] <autrijus_> VControl (ControlEnv env) :: Val

[20:56] <gaal> i think it makes it simpler in this case?

[20:56] <autrijus_> gaal: but sorry, I'm trying to follow chip/leo on the STM-on-parrot discussion here

[20:56] <autrijus_> gaal: that's possible

[20:56] <gaal> okay, thanks muchly for so the help so far.

[20:57] <Boogie___> http://feather.perl6.nl/~boogie/flipchart.html <- so this is what behind Chip currently on the flipchart. ;)

[20:58] <Aankhen``> ?eval sub foo ({ $bar, $baz, *%quux }) { ... }

[20:58] <evalbot6> Error:  unexpected "{" expecting formal parameter, ":" or ")" 

[20:58] <svnbot6> r4523, Aankhen++ | * moved ext/URI-Escape/ to ext/URI/.

[21:00] <Aankhen``> G'night.

[21:00] <nothingmuch> blah

[21:04] <autrijus_> heya nothingmuch.

[21:04] <autrijus_> nothingmuch: we're figuring out how to add STM to parrot

[21:04] <autrijus_> (with chip and leo)

[21:04] <nothingmuch> hi ho

[21:04] <nothingmuch> autrijus_: #parrot or IRL?

[21:05] <nothingmuch> how does STM get along with JIT?

[21:05] <Boogie___> IRL, they are together at Leo's place. :)

[21:05] <nothingmuch> ah

[21:06] <nothingmuch> btw, will any(chip|leo) be at the hackathon?

[21:07] <autrijus_> nothingmuch: IRL

[21:07] <autrijus_> nothingmuch: STM is just a way for a SharedFoo PMC todo bookkeeping

[21:07] <autrijus_> so has nothing really to do with JIT

[21:07] <nothingmuch> doesn't STM require boxed types to stay sane?

[21:08] <autrijus_> nothingmuch: PMCs are all boxed.

[21:08] <autrijus_> nothingmuch: even in JIT mode.

[21:08] <nothingmuch> and isn't JIT's purpose to do away with boxed types were possible, to gain (hardware dependant) performance?

[21:08] <nothingmuch> my $i = 1;

[21:08] <gaal> k, i'm passing maybe envs now; how do i enter Reader (?) so that when i do have the Env i want, when i call readVar the lookup happens in the correct context?

[21:08] <nothingmuch> what is that compiled down to? a PMC?

[21:08] <nothingmuch> I thought Integer, or whatever the builtin type is

[21:09] <autrijus_> nothingmuch: the JIT won't have effects on PMCs

[21:09] <autrijus_> let alone shared PMCs

[21:09] <nothingmuch> ah

[21:10] <arcady> I think you have to say "my int $i = 1" to actualy get a native integer

[21:10] <gaal> ahhh, with local?

[21:10] <nothingmuch> oh, btw, ask chip if he's seen the bottom half of mmd.kwid

[21:10] <nothingmuch> arcady: why not wait with that till we find out it can't be an 'int'?

[21:12] <nothingmuch> like when it's shared, or has a method called on it, or has a role attached

[21:12] <domm> autrijus_: et.al.: so you arrived well at Leos place?

[21:12] <Boogie___> domm: well

[21:12] <domm> Boogie___: thanks for the APW report

[21:12] <domm> I have slight problems understanding it, though :-)

[21:13] <autrijus_> APW report?

[21:13] <domm> http://weblabor.hu/hirek/20050609/austrianperlworkshop

[21:13] <Boogie___> domm: wirelesses are on, so we're happy

[21:13] <Boogie___> domm: currently they are planning what they will talk about

[21:14] <Boogie___> domm: and about other topics - cool topics ;)

[21:14] <Boogie___> doom: well, Hungarian is not easy to understand. Actually, nothing special, it's just a blog.

[21:14] <domm> I'm very glad that I finally managed to contribute something to Perl6/Parrot/Pugs

[21:15] <domm> Even if it's not code, but (only) bringing three people together to (hopefully) produce a lot of code (or specs) next week

[21:16] <domm> (in fact, mor than tree people, how many are staying at Leos place? 4? 5?

[21:16] <Boogie___> As I see, it will be very-very-very useful. I've heard some "Ahh, now I got the idea" even during travelling here. :)

[21:16] <domm> cool!

[21:19] <Boogie____> And as I heard, somebody will join tomorrow

[21:19] <Boogie____> Unfortunatly, I will leave tomorrow night. :(

[21:21] * nothingmuch showers

[21:21] <domm> nothingmuch: while beeing on irc?

[21:21] <nothingmuch> domm: no, only autrijus_ can do that

[21:21] <nothingmuch> well, i guess i can do it

[21:21] <domm> :-)

[21:21] <nothingmuch> but i'm not sure I want to =)

[21:25] * domm goes to bed # workshop organising /is/ exhausting

[21:25] <Boogie____> http://feather.perl6.nl/~boogie/flipchart.html update

[22:46] <clkao> ?eval 3 < 10 < 6

[22:46] <evalbot6> bool::true 

[22:46] <clkao> slackers :p

[22:52] *** khisanth_ is now known as Khisanth

