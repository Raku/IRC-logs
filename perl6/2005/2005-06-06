[00:03] <kelan> stevan: do me a favor and type some unicode characters like hypers or any of the set operators

[00:03] <kelan> i've been battling my terminal all afternoon trying to get utf8 setup

[00:03] <stevan> kelan: I have no idea how to :)

[00:03] <kelan> oh heh ok:)

[00:03] <stevan> actually, wait a second

[00:04] <kelan> maybe i'll try copy and paste from somewhere

[00:04] <stevan> I will copy paste from some Pugs stuff

[00:04] <stevan> kelan:  ???

[00:04] <stevan> hows that?

[00:05] <kelan> hmm. three question marks

[00:07] <kelan> «

[00:07] <kelan> yay that worked

[00:08] <kelan> ?eval (1,2,3) »+« (4,5,6)

[00:08] <evalbot6> Error:  unexpected "\\" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[00:08] <kelan> hmm

[00:08] <kelan> ?eval (1,2,3) »+« (4,5,6);

[00:08] <evalbot6> Error:  unexpected "\\" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[00:08] <kelan> ?eval my @a = (1,2,3); @a »++; @a

[00:09] <evalbot6> Error:  unexpected "\\" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[00:09] <kelan> ?eval 1+2

[00:09] <evalbot6> 3 

[00:09] <kelan> ?eval my @a = (1,2,3); @a >>++; @a

[00:09] <evalbot6> Error: Can't modify constant item: VInt 1 

[00:09] <kelan> ?eval (1,2,3) >>+<< (4,5,6);

[00:09] <evalbot6> (5, 7, 9) 

[00:09] <kelan> it looks right to me, but maybe its sending the wrong thing

[00:11] <jql> ?eval my @a = map { 0+$_} 1,2,3; @a >>++; @a

[00:11] <evalbot6> Error: Can't modify constant item: VInt 1 

[00:11] <jql> ?eval my @a = map { 0+$_} 1,2,3; @a

[00:11] <evalbot6> [1, 2, 3] 

[00:13] <theorbtwo> It's probably an evalbit problem.  Lots of back and forth between perl6, perl5, and perl6.

[00:13] <theorbtwo> (no, that wasn't a thinko.)

[00:14] <kelan> theorbtwo: did those hyperops come across okay, then?

[00:15] <theorbtwo> They looked OK to me.

[00:15] <kelan> ok good

[00:19] <theorbtwo> ?eval length "«", ord "«"

[00:19] <evalbot6> ***      unexpected ( or "("     expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input     at -e line 4, column 4 

[00:19] <theorbtwo> Right.  Evalbot looks broken.

[00:21] * theorbtwo wonders if there's anybody about who feels like helping what is likely a stupid user error with parsec.

[00:22] <kelan> i don't know anything about parsec, or i would

[00:34] <crysflame> huh. evalbot groks UTF-8?

[00:34] <crysflame> heh! woo re: topic

[00:37] <theorbtwo> crysflame: Looks like it doesn't, but it certianly should.

[00:47] <autrijus> the quotemeta() thing is broken

[00:48] <autrijus> in evalbot

[00:48] <autrijus> it should probably only quote a few things like " and \ and \n

[00:49] <robkinyon> stevan: ping

[00:50] <ingy> hola

[00:50] <autrijus> yo

[00:51] <ingy> autrijus: I am ready to submit my new ingyism to pugs for review

[00:53] <autrijus> ingy: do so!

[00:54] <ingy> autrijus: doing so!

[00:56] * autrijus waits for "done so!"

[00:56] <theorbtwo> AUTRIJUS!

[00:56] <ingy> done

[00:56] <theorbtwo> I'm having parsec woes.

[00:56] <ingy> hi theorbtwo 

[00:57] <theorbtwo> INGY!

[00:57] <theorbtwo> WHOEVERELSEISHERE!

[00:57] * ingy does the loud people dance

[00:57] <theorbtwo> I'm trying to get %MY:: to parse.

[00:58] <theorbtwo> So I added in an endbit <- option "" (string "::") to Pugs.Parser.ruleVarNameString, right after names, and added a ++ endbit to the return.

[00:59] <theorbtwo> That gives me nothing when there's not a :: and an error when there is, which isn't what I was going for.

[00:59] <theorbtwo> Changing the "" to "x" gives me an x on the end of things without a trailing ::, and an erro on things with one.

[00:59] <theorbtwo> Adding a try in like the line above doesn't help.

[01:02] <svnbot6> r4416, ingy++ | Test-Less comes to Pugs

[01:02] <svnbot6> r4416, ingy++ | Test::Less helps speed up development testing by allowing people to categorize

[01:02] <svnbot6> r4416, ingy++ | tests with various keywords, and then prove subsets of those tests.

[01:02] <svnbot6> r4416, ingy++ | It keeps all its info in t/Test-Less/index.txt. You don't have to use it if

[01:02] <svnbot6> r4416, ingy++ | you don't want to. It is an author-side tool, so support does not need to be

[01:02] <svnbot6> r4416, ingy++ | distributed. But the index should be distributed...

[01:02] <ingy> ouch. grrr

[01:02] <autrijus> theorbtwo: so, well, er. 

[01:03] <autrijus> change "sepBy1" to "sepEndBy1" is the answer to all problems.

[01:03] <autrijus> because it means it can be separated by, as well as ended by, ::.

[01:03] <theorbtwo> That makes the end bit optional, and tells me if it's there?

[01:03] <theorbtwo> The problem is that %MY and %MY:: are distinct hashes, AFAIK.

[01:04] <autrijus> true.

[01:04] <autrijus> ok then. change many1 wordAny

[01:04] <autrijus> to many wordAny

[01:04] <autrijus> will fix that.

[01:04] <clkao> autrijus: hola.

[01:04] <ingy> clkao: hola

[01:04] <clkao> hi ingy

[01:05] <autrijus> (then you'd not need sepEndBy1; sepBy1 would do)

[01:05] <autrijus> yo clkao.

[01:05] <clkao> autrijus: throw random hackathon productivity tool thoughts at me

[01:05] <clkao> svl is very cool

[01:05] <autrijus> clkao: telepathy matrix

[01:05] <autrijus> biofeedback on commits

[01:05] <ingy> clkao: are you going to Toronto?

[01:06] <clkao> bah, something that simple software can solve

[01:06] <clkao> ingy: no

[01:06] <theorbtwo> clkao: lots of mics, live transcription to #perl6.

[01:06] <theorbtwo> Speech synth of lines on #perl6?

[01:06] <autrijus> speech reco and synth

[01:06] <theorbtwo> Hm, no connection, so those are out.

[01:06] <autrijus> there is connection

[01:06] <theorbtwo> Oh.  I thought it was "steal the nebihor's phone at night".

[01:07] <autrijus> s/phone/adsl/

[01:07] <autrijus> not sure about the 'at night' bit

[01:07] <clkao> so, svl will allow you the publish your local repository for people around to mirror / branch from

[01:08] <autrijus> john also mentioned possible cell phone based bandwidth

[01:08] <clkao> so you both will be able to commit very fast

[01:08] <clkao> and merge from one another

[01:09] <theorbtwo> Oh, sounds much better then what I was thinking, then.

[01:13] *** theorbtw1 is now known as theorbtwo

[01:18] <theorbtwo> Hm, that works, and feels somewhat clener.

[01:18] <theorbtwo> However, it now thinks "%" (in term position, of course) is a varable name.

[01:23] <theorbtwo> I'm going to call that "OK", at least for now.

[01:24] <autrijus> er

[01:24] <autrijus> when (null names) $ fail ""

[01:26] <theorbtwo> No effect.

[01:27] <autrijus> case names of

[01:27] <autrijus>     [""] -> fail ""

[01:28] <autrijus>     _ -> return $ (sigil:twigil) ++ ...

[01:28] <theorbtwo> OK

[01:28] <autrijus> btw, during hw2005 writing I noticed that the envStash is used to recalculate operator table

[01:28] <theorbtwo> Ah, I see the difference.

[01:29] <autrijus> for each OP

[01:29] <autrijus> I think a new RuleState record to cache the op table will work much better.

[01:29] <autrijus> and speed up parsing

[01:29] <autrijus> but I need to finish the paper today as the first priority :-/

[01:30] <theorbtwo> When's the deadline on it?

[01:30] <autrijus> 10th

[01:30] <theorbtwo> That'd be good; there's quite noticable delays.

[01:30] <autrijus> but realistically I won't get any time when I'm in Vienna

[01:30] <theorbtwo> Right.

[01:30] <theorbtwo> You can write on the plane, but that's cutting it rather close.

[01:30] <autrijus> so it needs to be today.

[01:30] <autrijus> no

[01:30] <autrijus> the plane time is reserved for the talk!

[01:31] <autrijus> two talks, in fact.

[01:31] <meppl> gute nacht

[01:31] <theorbtwo> Ah.

[01:31] <theorbtwo> G'night, meppl.

[01:31] <meppl> ;)

[02:33] <ingy> autrijus: ping

[03:30] <autrijus> ingy: pong

[03:30] <autrijus> nothingmuch: http://autrijus.org/tmp/readerT-spoiler2.txt

[03:30] <autrijus> Eval is made completely polymorphic; with that definition we're ready to:

[03:31] <autrijus> * embed Harrorth into Pugs with zero lines to change in harrorth and only two short instances to write

[03:31] <autrijus> * change Harrorth into a compiler targetting Parrot without touching Eval.hs

[03:31] <autrijus> (and reuse all the code in eval.hs)

[03:36] <crysflame> neat

[03:38] * autrijus praises merciless abstraction

[03:43] <obra> Harrorth?

[03:45] <autrijus> obra: nothingmuch's forth implementation -- he chronicled all the details of how he learned haskell by coding this from scratch 

[03:45] <autrijus> fascinating read. the repo is at http://perlcabal.org/~nothingmuch/harrorth

[03:46] <autrijus> check the doc/ for journal

[03:48] <obra> ah. cool.

[03:48] <ingy> autrijus: I just wanted to show that you can do this

[03:48] <ingy> test-less -prove -v failing

[03:49] <ingy> ...

[03:49] <ingy> Failed 9/9 test scripts, 0.00% okay. 45/82 subtests failed, 45.12% okay.

[03:49] <ingy> All the current (as of yesterday) tests that are failing

[03:49] <ingy> If you make a test pass...

[03:50] <ingy> test-less -untag failing t/oo/destruction.t

[03:50] <gaal> hey autrijus, i was having some problems figuring out signal hadnlers the other night.

[03:50] <autrijus> ingy: granularity is at testfile level?

[03:50] <autrijus> ingy: I wonder how it plays with our current unit level markers

[03:50] <autrijus> ingy: but very cool

[03:51] <ingy> read the doc

[03:51] <ingy> but...

[03:51] <gaal> in System.Posix.Signals, installHandler :: Signal -> Handler -> Maybe SignalSet -> IO Handler

[03:51] <autrijus> gaal: win32 has S.P.Sig?

[03:51] <gaal> what the hell is SignalSet for? :)

[03:51] <ingy> you can mark any test file with any keyword

[03:51] <gaal> no, it doesn't...

[03:51] <ingy> so yes, it is at the file level

[03:51] <gaal> i also have (slowish)  linux boxen to test on.

[03:52] <ingy> hopefully people will categorize the tests and commit the index.txt changes

[03:52] <autrijus> gaal: http://www.delorie.com/gnu/docs/glibc/libc_506.html

[03:52] <autrijus> ingy: I'd like to derive index.txt from :todo markers.

[03:52] <ingy> the nice thing is that it is orthoganal to other testing mechanisms

[03:52] <ingy> autrijus: please

[03:53] <autrijus> so I can run all bugs, all features

[03:53] <ingy> there is no limit on categorization

[03:53] <autrijus> or all unspecceds

[03:53] <autrijus> wouldn't that be nice.

[03:53] <gaal> autrijus, thanks (i was thinking it was a haskell thing)

[03:53] <autrijus> gaal: System.* are very thin disguses of FFI wrappers

[03:53] <gaal> why are some of the builtin SSs functions though?

[03:54] <autrijus> disguises, even

[03:54] <gaal> oh, because so are the c versions. hmmm!

[03:54] <autrijus> in fact, most of times there's no disguises.

[03:54] <ingy> autrijus: grep -r some_pattern t | test-less -tag some-tag -

[03:54] <ingy> :)

[03:54] <gaal> okay, cool. if i have time i'll be adding %*SIG later on then. (only to unix)

[03:55] <autrijus> gaal++

[03:55] <ingy> autrijus: the index entries are one per line so that conflicts should resolve easy with svn

[03:55] <gaal> couple of questions: how can i call into Prelude from Haskell?

[03:56] <gaal> and: is there a way to run something in the context of the main thread, that sees the call stack of every worker thread?

[03:56] <ingy> er

[03:56] <ingy> autrijus: grep -lr some_pattern t | test-less -tag some-tag -

[03:57] <ingy> but ykwim

[03:57] <autrijus> gaal: evalExp (App (Var "&File::open") (Just (Val $ VStr "file.txt")) []

[03:57] <gaal> so cool! thanks.

[03:57] <autrijus> or, if you want to be very lazy!

[03:57] <autrijus> op1 "eval" (VStr "File::open('file.txt')")

[03:57] <autrijus> ;)

[03:57] <gaal> :)

[03:58] <autrijus> but then you get no compile time typechecks.

[03:58] <autrijus> gaal: yes you can do that by using either TChan or thread signaling

[03:58] <ingy> autrijus: also thanks to you I have filters for Test::Chunks like eval_stdout and eval_stderr (which open big testing doors to me)

[03:58] <autrijus> gaal: but you need to be more specific to what kind of stack and what kind of inspection you want

[03:59] <gaal> autrijus, look eg at the box here: http://www.unixville.com/~moazam/stories/2004/05/18/debuggingHangsInTheJvm.html

[03:59] <ingy> at YAPC I'd like some help porting Test::Chunks to 6

[03:59] <gaal> java responds to SIGQUIT and prints stacktrace for all threads

[03:59] <gaal> a nice feature to steal

[04:00] <autrijus> gaal: oh. trivial

[04:00] <autrijus> gaal: sending signal to each working thread; the runloop intercepts it and dumps the Env (escalating up envCaller)

[04:00] <gaal> trivial to write something over caller, *if* i know how to iterate over threads.

[04:01] <autrijus> gaal: you can factor our Prim line 447

[04:01] <autrijus> gaal: and store it into a global @*CHILD_THREADS

[04:01] <autrijus> or something like that

[04:03] <gaal> okay, thanks!

[04:04] <autrijus> gaal++

[04:04] <gaal> i think i'll go rowing now, though. see you later!

[04:04] <autrijus> see ya!

[04:47] <chromatic> Howdy.

[04:47] <autrijus> greetings chromatic.

[04:47] <chromatic> autrijus, I had a thought.

[04:47] <autrijus> yes?

[04:48] <autrijus> (I'm just about to go offline to hack hw2005, but I'd like to read your thought first :))

[04:48] <chromatic> Is the attribute-binding code we wrote yesterday consuming everything in bound before processing non-attribute default values in applyThunk

[04:48] <chromatic> ?

[04:48] <autrijus> you know what, you're right

[04:49] <autrijus> it passes the "bound" unaltered to applyThunk

[04:49] <autrijus> method foo ($.z) {}

[04:49] <autrijus> will create a _lexical_ binding to "$.z"

[04:49] <chromatic> Options then may be to 1) copy bound 2) some sort or grep in the list comprehension

[04:49] <autrijus> chromatic: the grep is implicit in <-

[04:50] <autrijus> and in , (twigil ==) `any` ".:" 

[04:50] <chromatic> Right, with the condition in the comprehension.

[04:50] <autrijus> so only those will be processed

[04:50] <autrijus> but I worry about passing bound thru

[04:50] <autrijus> a lexical binding of $.z sounds strange.

[04:51] <autrijus> maybe we should delete the attribute args.

[04:51] <chromatic> Keeping the binding of attributes in applyExp seems right to me.

[04:51] <autrijus> i.e. use "partition"

[04:51] <autrijus> in applyExp

[04:51] <chromatic> Oh, I see what you mean.

[04:51] <autrijus> so we don't introduce a garbage

[04:51] <autrijus> "my $.z"

[04:51] <autrijus> symbol in the lexical scope

[04:51] <chromatic> <- partition ___ bound something something?

[04:52] <autrijus> (attrib, normal) <- partition isAttrib bound

[04:52] <autrijus> er no

[04:52] <autrijus> let (attrib, normal) = partition isAttrib bound

[04:52] <autrijus> since partition is pure

[04:52] <chromatic> I think I know where and how; I'll take a shot now.

[04:52] <autrijus> isAttrib ApplyArg{ argName = (_:':':_) } True

[04:52] <autrijus> isAttrib ApplyArg{ argName = (_:'.':_) } True

[04:52] <autrijus> isAttrib _ = False

[04:53] <autrijus> er, change the "True" above to "= True"

[04:53] <chromatic> Right.

[04:53] <autrijus> that should be all there is.

[04:53] <autrijus> cool. I'll go offline to write paper, then.

[04:53] <autrijus> bbiab.

[04:53] <autrijus> chromatic++ # rapidly accumulating haskell-fu

[04:53] <chromatic> It's experience I lack.

[04:54] <autrijus> It's for experience we hack.

[04:54] * autrijus waves &

[05:12] <chromatic> Ahh, I see the problem.

[05:12] <chromatic> We're approaching this backwardsly.

[05:12] <chromatic> We shouldn't be checking the passed-in arguments for attribute twigils (which works, if you say Foo.new( 'bar'=> 10 )).

[05:13] <chromatic> We should be checking the *code's signature* for twigils and pulling out arguments based on that.

[05:13] <crysflame> done

[05:18] <chromatic> autrijus, catch the previous couple of lines in scrollback when you have the chance. :)

[05:18] <crysflame> chromatic!

[05:18] * crysflame bows.

[05:18] <nothingmuch> good morning everyone

[05:18] <chromatic> crysflame!

[05:20] <chromatic> Sorry, that's all I have at this hour.

[05:39] <autrijus> chromatic: hm? the arguments in ApplyArg _are_ the signatures

[05:40] <chromatic> Are they?

[05:40] <autrijus> I think so.

[05:40] <autrijus>     { argName       :: String -- ^ Name of the param that this arg is for

[05:40] <autrijus>     , argValue      :: Val    -- ^ Actual argument value, which may still be

[05:40] <chromatic> I don't see anything referring to subParams, which is what I expect at the moment.

[05:40] <autrijus> the argName is directly copied from subParams.

[05:41] <chromatic> Does it still have the sigil in subParams?

[05:41] <chromatic> Sorry, twigil.

[05:41] <autrijus> it represents a binding

[05:41] <autrijus> I think so.

[05:41] <gaal> oh, btw, that reminds me if anyone wants to spec caller() a little bit better, currently it has a "params" member that's just a hacky show VStr subParams

[05:41] <autrijus> you can trace() for it.

[05:41] <autrijus> oh btw. I hacked in the op parser table cache.

[05:41] <autrijus> about to commit. to wit:

[05:41] <autrijus> $ time ./pugs.old -c examples/games/wizard.p6

[05:41] <autrijus> real    0m4.690s

[05:41] <gaal> ooh, that should greatly speed things up!

[05:41] <autrijus> $ time ./pugs -c examples/games/wizard.p6

[05:42] <autrijus> real    0m2.292s

[05:42] * autrijus bows

[05:42] <gaal> woot!

[05:42] <chromatic> Nice.

[05:42] <chromatic> autrijus, when the argument comes in from the caller, it won't have a twigil.

[05:42] <chromatic> When I add the twigil, the code works.

[05:43] <autrijus> chromatic: you mean the name will just be "foo" ?

[05:43] <gaal> i thought the days of 100% speedups were gone ;-)

[05:43] <autrijus> gaal: you'd be surprised.

[05:43] <chromatic> Yep, some_sub( foo => 10 );

[05:43] <gaal> aiming for 200% speedups now? :))

[05:44] <autrijus> chromatic: maybe I'm dense. but

[05:44] <autrijus> some_sub(10);

[05:44] <autrijus> will yield an ApplyArg that pairs the first param name

[05:44] <autrijus> say "$foo"

[05:44] <autrijus> with 10

[05:44] <gaal> real -0m2.292s 

[05:44] <gaal> $ time ./pugs.fast -c examples/games/wizard.p6

[05:44] <autrijus> that is the only way we can introduce a lexical binding

[05:44] <autrijus> under the "$foo" name

[05:44] <autrijus> so I'm surprised that you say the applyArg has no twigil.

[05:44] <chromatic> some_method (?$.z = 10 );

[05:45] <autrijus> maybe we lost the twigil some time.

[05:45] <chromatic> $obj.some_method( z => 20 );

[05:45] <autrijus> wait. I know why.

[05:45] <gaal> $work &

[05:46] <autrijus> chromatic: Bin.hs

[05:46] <autrijus> Bind.hs

[05:46] <autrijus> line 41

[05:46] <autrijus> has a blind "tail".

[05:46] <autrijus> so $.z would expect a ".z" as name

[05:46] <autrijus> not "z".

[05:46] <chromatic> Exactly.

[05:46] <autrijus> chromatic: there may be other such assumption in Bind.hs as well.

[05:47] <chromatic> What's the easiest way to strip off the first to heads?

[05:47] <autrijus> the first to heads?

[05:47] <chromatic> two

[05:48] <autrijus> dropWhile (not isAlpha)

[05:48] <autrijus> dropWhile (not isAlphaNum)

[05:48] <autrijus> dropWhile isPunct

[05:48] <autrijus> or something like that

[05:48] <autrijus> if you know you want to drop 2

[05:48] <autrijus> then

[05:48] <autrijus> drop 2

[05:48] <autrijus> ;)

[05:48] <chromatic> In place of tail... trying.

[05:48] <autrijus> drop :: Int -> [a] -> [a]

[05:48] <autrijus> dropWhile :: (a -> Bool) -> [a] -> [a]

[05:49] <chromatic> dropWhile *almost* needs a body!

[05:50] <autrijus> hm?

[05:50] <svnbot6> r4417, autrijus++ | * Speed up parsing for 2x by caching the dynamically-constructed

[05:50] <svnbot6> r4417, autrijus++ |   operator precedence tables, instead of relying on envStash to

[05:50] <svnbot6> r4417, autrijus++ |   rebuild them in each token.

[05:50] <svnbot6> r4417, autrijus++ |   <gaal> i thought the days of 100% speedups were gone ;-)

[05:50] <chromatic> I'm trying to write this off of the top of my head.

[05:52] <autrijus> dropWhile f (x:xs) | f x = xs; dropWhile _ xs = xs

[05:52] <chromatic> Yep, pretty close to what I had.

[05:52] * autrijus praises recursion

[05:53] <chromatic> Hm, there's a dropWhile in Prelude already.

[05:56] <chromatic> autrijus, replacing tail with (dropWhile isPunctuation) didn't do it.

[05:58] <autrijus> chromatic: time for your to learn trace() calls?

[05:58] <chromatic> Sounds painful.

[05:58] <chromatic> Can't we reason this out a bit first?

[05:58] <autrijus> nah. it's actually easy :)

[05:58] <autrijus> trace :: String -> a -> a

[05:58] <autrijus> show :: (Show a) => a -> String

[05:58] <autrijus> so whenever you want to trace something

[05:58] <chromatic> Does the (name ==) happen before or after the dropWhile?

[05:59] <autrijus> say "x y z"

[05:59] <autrijus> you can simply slap (trace (show foo)) in front of it

[05:59] <autrijus> trace (show foo) x y z

[05:59] <chromatic> ah, easy.

[05:59] <autrijus> simple as pie :)

[06:00] <autrijus> (name ==) occurs after dropwhile

[06:01] <chromatic> Won't that cause problems?

[06:01] <autrijus> why would it?

[06:01] <autrijus> find ((name ==) . tail . paramName) prms

[06:01] <chromatic> dropWhile takes off two characters, in the case of an attribute.

[06:01] <autrijus> find ((name ==) . (dropWhile isPunctuation) . paramName) prms

[06:01] <autrijus> this means, in perl6

[06:02] <svnbot6> r4418, autrijus++ | * Revise hw2005 to agree with the now-optimised reality.

[06:02] <autrijus> for @prms -> $prm {

[06:02] <autrijus>     if ($name eq $prm.paramName.dropWhile(&isPunctuation))

[06:02] <autrijus>         { return $prm }

[06:02] <autrijus> }

[06:03] <chromatic> Where does name come from?

[06:05] <autrijus> it's the name part of the pair

[06:05] <autrijus> returned by unPair

[06:06] <autrijus> unPair unpacks Exp into (String, Exp)

[06:06] <autrijus> the String part is the name.

[06:06] <autrijus> this is occuring inside a foldr.

[06:06] <autrijus> it's an accumulating fold

[06:06] <autrijus> see the haddock of bindNames for explanation.

[06:06] <chromatic> Signature or parameter?

[06:06] <autrijus> name is parameter like "z"

[06:07] <autrijus> paramName is "$.z".

[06:07] <autrijus> $obj.foo(z => 2)

[06:07] <chromatic> Okay, so paramName should ignore any twigil when it does the matching.

[06:07] <autrijus> right.

[06:07] <autrijus> but I really, really need to run :)

[06:07] <autrijus> may the trace be with you...

[06:08] <chromatic> Thanks!

[06:08] <autrijus> thanks too :)

[06:08] <autrijus> chromatic++ # &

[07:02] *** Aankh|Clone is now known as Aankhen``

[07:55] <svnbot6> r4419, autrijus++ | * hw2005.txt - leading paragraph for experimental features and

[07:55] <svnbot6> r4419, autrijus++ |   embedded languages.

[08:01] *** batdog is now known as batdog|gone

[08:36] *** osfa is now known as osfameron

[08:50] <Nattfodd> Is there a parrot channel somewhere or am I already in the right place ?

[08:51] <cognominal> Nattfodd: the #parrot channel is on the irc.perl.org server

[08:52] <cognominal> ... not on the current freenode server

[08:53] * Nattfodd didn't know there was a irc.perl.org server...

[08:53] <Nattfodd> thanks

[08:54] <cognominal> this perl6 channel is also an attempt to break out of this incestuous world :)

[09:04] <pasteling> "chromatic" at 63.105.17.30 pasted "Fix for *some* parameter bindings, but still not quite right" (27 lines, 1.2K) at http://sial.org/pbot/10771

[09:19] * autrijus notes we are 3 people away from 100 committers.

[09:55] <svnbot6> r4420, autrijus++ | * Leading paragraph on compilation and acknowledgements.

