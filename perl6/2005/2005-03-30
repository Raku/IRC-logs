[00:07] <jabbot> pugs - 1332 - Crummy test fixed

[00:20] <theorbtwo> ping.

[00:27] <theorbtwo> jabbot, seen theorbtwo

[00:27] <jabbot> theorbtwo: theorbtwo was seen on Wed Mar 30 08:20:20 2005

[00:38] <theorbtwo> Aaah, it's alive!

[00:39] <Limbic_Region> now if only it would learn to put the toilet seat down when it was done

[01:07] <jabbot> pugs - 1333 - Perldoc::Sender utility pass tests

[01:11] *** theorbtw1 is now known as theorbtwo

[02:07] <jabbot> pugs - 1334 - * set mime

[02:14] <autrijus> hi lambdacamels!

[02:14] <autrijus> journal is up; power/network outage yesterday :-/

[02:14] <theorbtwo> Allo, autrijus!

[02:15] <autrijus> how's pugs?

[02:15] * autrijus starts backlogging

[02:15] <stevan> hey autrijus 

[02:16] <autrijus> yo :)

[02:16] <stevan> hey theorbtwo 

[02:16] <autrijus> 15-hor-sleep++

[02:16] <autrijus> hour, even

[02:16] <autrijus> finally out from this post-conference syndrome tarpit

[02:17] <theorbtwo> Allo, stevan!

[02:18] <stevan> I just spent the entire day in meetings with the client and driving

[02:18] <stevan> no fun at all

[02:18] <Khisanth> autrijus: so when is the next tarpit scheduled? :p

[02:18] <autrijus> Khisanth: yapc::na I think

[02:18] <theorbtwo> autrijus: Before or after, and how long?

[02:20] <autrijus> theorbtwo: before, 4~5 days, to the zeroth approximation

[02:20] <theorbtwo> Great!

[02:21] <theorbtwo> I've been trying to schedule my vacation, and have been missing data...

[02:22] <autrijus> :)

[02:22] <autrijus> currently only the location is unsure

[02:22] <autrijus> the date should be just that

[02:22] <theorbtwo> Cool.

[02:23] <theorbtwo> Any idea who I should ask questions about the rooming to?

[02:24] <autrijus> I'm supposed to write to ask John Macdonald

[02:24] <autrijus> john at perlwolf dot com

[02:24] * theorbtwo nods.

[02:24] <autrijus> he offers hosting at a place 40 mins drive from toronto

[02:25] <autrijus> but not sure whether we have net or not there

[02:25] <theorbtwo> Oh, I was hoping to be in the dorms.

[02:25] <autrijus> that is also possible.

[02:25] <stevan> theorbtwo: I think they have some kind of dorm/summer residence available

[02:25] <stevan> but maybe only for the conf days

[02:26] <theorbtwo> Yeah, but I'm not real clear that it'd be possible to be in the dorms before/after the conf.

[02:26] <autrijus> etc. as I'm now in hotspring mode (meaning, spotty network), I'd be absolutely thrilled if you can help me figure out an optimal location with rdice and john and other YAPC::NA crew :)

[02:26] <theorbtwo> I suspect the dorms have 802.11, or if not, somebody in the dorms will make them do so for the duration.

[02:26] * obra bets one could find a nice, inexpensive b&b nearby

[02:26] <stevan> theorbtwo: you can hide out on the common rooms and just hide when the RAs come around

[02:27] <theorbtwo> Also, my sister thought it unlikely that I could get a double with Jess, because of gender issues.

[02:27] <theorbtwo> I expect she's wrong, but I rather dislike the possibility.

[02:27] <theorbtwo> And budget is a large concern for me on this.

[02:28] <stevan> http://89chestnut.com/

[02:28] <stevan> thats what they are linking to on the site

[02:28] <theorbtwo> Right; they link to 89chestnut.com as the place where it's being held, and give rates.

[02:29] <theorbtwo> ...and say that dorms will probably also be available, for a lot less.

[02:29] <stevan> I thought 89chesnut was the "dorms"

[02:29] <theorbtwo> I'm not sure.

[02:30] * stevan reads the fine print this time

[02:30] <theorbtwo> From YAPC last year, I think I want to stay in the dorms this year.

[02:30] <stevan> http://yapc.org/America/accommodations-2005.shtml

[02:30] <theorbtwo> (Last year I stayed with somebody who lived in-town.)

[02:31] <stevan> oh well, I am off to watch some TV, see you all later

[02:33] * theorbtwo has never experinced dorm life, much less geek-dorm life.

[02:38] <chip> Dorms are like prison cells, only without the food service.

[02:39] <theorbtwo> It's only about a week.

[02:39] <theorbtwo> And it's a chance to clustergeek with a lot of other people.

[02:40] <theorbtwo> Remind myself that I'm smarter then a bunch of them, hopefully.

[02:43] <chip> theorbtwo: YAPC is a wonderful place to confirm self-image, good or bad.

[02:44] <theorbtwo> Hm, that's too bad, as I want my self-image improved, not confirmed!  ;)

[04:17] <Darren_Duncan> question: If a Perl module is distributed with Perl itself, such as Test::More or Test, is it worthwhile to mention said module in the Makefile.PL as a dependency, or better to not mention it there?  (Assume that the same Makefile already specifies a minimum Perl version that is known to bundle it.)

[04:18] <theorbtwo> I consider it worthwhile, but it messes with the ppm packager.

[04:18] <Darren_Duncan> I haven't looked around, but what is the standard CPAN approach, considering Test::More is a defacto standard now

[04:19] <Darren_Duncan> fyi, I'm doing a coordinated v5/v6 update that sees the v6 using 'Test' the same way that v5 uses 'Test::More'

[04:19] <Darren_Duncan> (or technically the reverse, since v6 used Test first)

[04:20] <Darren_Duncan> would you say it is better to leave the dependency mention out so to help those with ppm?

[04:23] <Darren_Duncan> I think I will exclude any Test::More/Test mention from Makefile.pl then

[04:23] * Khisanth thinks it would be better if ppm was improved upon instead :)

[04:24] <theorbtwo> So do I.

[04:24] <Darren_Duncan> still, my main question is, what do most CPAN modules do?

[04:24] <Darren_Duncan> distros

[04:24] <theorbtwo> I don't think it'll happen, though, unless somebody takes it over from AS.

[04:24] <theorbtwo> ...which will only happen with kicking and screaming.

[04:26] <theorbtwo> (Since newer versions of PPM try to get you to buy extra stuff from AS.)

[04:26] <Darren_Duncan> I'm switching to Test::More etc in an effort to standardize, relative to rolling my own (which only takes about 5-10 lines)

[04:26] <Darren_Duncan> therefore, I prefer to adopt everything related to it as is standard/recommended practice

[04:27] <theorbtwo> I have no idea what standard pratice is; I only have a couple of modules, and they don't use MakeMaker.

[04:28] <Darren_Duncan> theorbtwo, can users still do the standard 'make', 'make test' etc with your modules?

[04:29] <theorbtwo> Yeah, I ship with a Makefile.PL as well as a Build.PL

[04:29] <theorbtwo> OTOH, AFAIK, my modules have no users.

[04:30] <Darren_Duncan> I don't really know if my modules have users

[04:30] <Darren_Duncan> I get the occasional email about them, but thats about it

[04:31] <Khisanth> no report from testers?

[04:32] <Darren_Duncan> I get automated CPAN tester reports for all my distros, but that doesn't mean anyone is actually using them

[04:32] <theorbtwo> Some reports from testers, Khisanth, but I'm not sure any of those are actually /users/, or if they just dl'd to test it... I hear some poeple do that.

[04:33] <Darren_Duncan> right now I'm just looking at the random cpan module to see how they handle test::more etc

[04:35] <Darren_Duncan> actually, I'll just do the simplest thing and not mention Test::More in code except in the *.t files themselves

[04:36] <Darren_Duncan> my Perl 5 stuff requires 5.008001 and above anyway, and that includes the module, so I implicitly state the requirement anyway

[04:37] <jabbot> pugs - 1335 - adding Makefile.PL.local and the perlpod

[04:37] <Darren_Duncan> and likewise, my Perl 6 stuff simply mentions Test.pm (a Test::more clone) only in the *.t file, and thats bundled with Pugs

[04:38] <Khisanth> is there some policy that basicallys states "once a module is in core, it can never be taken out"?

[04:38] <theorbtwo> Yes, Khis.

[04:39] <theorbtwo> Except in the 5->6 jump.

[04:39] <Darren_Duncan> I think that's just what tends to happen

[04:39] <Darren_Duncan> yes, in Perl 6 everything should be dropped by default

[04:39] * theorbtwo too.

[04:39] <Darren_Duncan> and modules will only be bundled on a case by case basis, I think should happen

[04:40] <stevan> Darren_Duncan: what are you wondering exactly? re: test::more

[04:40] <Darren_Duncan> certainly, doing it just because the perl 5 versions were bundled is a baaaaaad idea

[04:40] <theorbtwo> Larry has suggested that we stick everything from p5's core into p6's core but in a namespace that encourages you not to use them.

[04:40] <Darren_Duncan> Stevan, yes

[04:40] <theorbtwo> (So the translator can just translate them like that.)

[04:40] <Darren_Duncan> I'm following your suggestion of using Test::more in my perl 5 distros

[04:40] <Darren_Duncan> as a side effect, it helps me make my perl 5 and 6 versions the most alike to each other

[04:41] <stevan> but are you wondering whether to put Test::More in the Makefile.PL?

[04:41] <Darren_Duncan> the more similar they are, the easier to maintain two parallel versions

[04:41] <Darren_Duncan> yes

[04:41] <stevan> I think most people do

[04:41] <Darren_Duncan> that's partly what I wanted to know

[04:41] <Darren_Duncan> what most people do, and what best practice is

[04:42] <stevan> My feeling is that if it is a dependency, it should be in the Makefile.PL

[04:42] <Darren_Duncan> question: when will we be able to write our Perl 6 module Makefile.PL in Perl 6?

[04:42] <stevan> regardless of whether it is just for tests or not

[04:42] <Khisanth> Darren_Duncan: now? :)

[04:43] <stevan> Darren_Duncan: when someone ports the approriate modules :)

[04:43] <Khisanth> MM is not ported yet?

[04:43] <Darren_Duncan> Pugs::Makemaker is a perl 5 module

[04:43] <stevan> there is a Module::Install::Pugs, but that is perl5

[04:43] <Khisanth> or Module::Build

[04:43] <stevan> sorry, Darren_Duncan your right Pugs::MakeMaker

[04:44] <Darren_Duncan> okay, here's the thing ... If my Perl 6 Makefile.pl mentions perl 6 modules in its PREREQ_PM, will pugs::Makemaker do the right thing or look for perl 5 modules?

[04:44] <stevan> Khisanth: my guess is that Pugs does not currently have enough of a feature set to support it

[04:44] <stevan> Darren_Duncan: are you thinking of releasing the Perl6 verson on CPAN?

[04:44] <Darren_Duncan> eventually

[04:45] <stevan> ok

[04:45] <stevan> well hopefully by then the issue with be resolved

[04:45] <Darren_Duncan> right now it's premature

[04:45] <stevan> until then,.. perl6 depends upon perl5 :)

[04:45] <Darren_Duncan> another question: is it useful at all for any /modules in Pugs to include a Makefile.PL?

[04:46] <stevan> Darren_Duncan: not right now

[04:46] <stevan> although I am pretty sure make will never try to run it anyway

[04:46] <Darren_Duncan> the sample module did it, so I followed suit

[04:46] <Darren_Duncan> maybe I'll just take those out

[04:47] <jabbot> pugs - 1336 - first commit of CGI::Pugs; why? I have n

[04:48] <stevan> Darren_Duncan: can't hurt to leave it in

[04:48] <stevan> up to you really

[04:48] <Darren_Duncan> I suppose that if it won't be executed, it doesn't matter if the contents don't make sense per se

[04:48] <Darren_Duncan> such as perl 6 requirements in a perl 5 makefile]

[04:50] <Darren_Duncan> here's what I'll do for now ...

[04:50] <Darren_Duncan> I will keep the Perl 6 makefile, but it won't state any dependencies

[04:51] <Darren_Duncan> It can just be used to generate the likes of META.yml from, having info like dist name and version

[04:51] <jdv79> stevan, OT but have you used IOC for anything publicly visible?

[04:51] <jdv79> looks intersting

[04:52] <stevan> jdv79: nothing public, I do mostly intranet work

[04:52] <stevan> but it just got launched into production last week

[04:52] <jdv79> solid so far?

[04:52] <stevan> been running without issue for the past 3 months of development

[04:53] <jdv79> nice nice, I will get back to you about DBD::Mock eventually - been out of it lately

[04:53] <stevan> jdv79: not a problem, I have been doing Pugs so much lately I have been neglecting my perl5 stuff :)

[04:54] <jdv79> NO!

[04:54] <jdv79> its for the greater good though - anything for p6 is cool with me:)

[04:55] <stevan> yes, p6 is very cool :)

[04:56] <Darren_Duncan> for internal consistency, I'll change my Makefile.PL to Perl 6 code, pretending that Pugs::MakeMaker is a Perl 6 module

[04:56] <Darren_Duncan> then all files under /modules are perl 6

[05:03] *** theorbtw1 is now known as theorbwto

[05:04] * stevan thinks theorbtwo might be having a personality crisis :P

[05:05] <theorbwto> Just multiple machines, one of which tends to have it's bluetooth thiny fall out of the USB socket, and one of which was rebooted to (attempt to) play some NWN.

[05:05] <hattmoward> That boy couldn't hold a TCP session if it were taped to the wire.

[05:05] <hattmoward> ;)

[05:06] <theorbwto> Oh, hi, hatt.

[05:06] <hattmoward> Hello, Mr. WTO

[05:07] <Darren_Duncan> okay, I committed my Makefile changes

[05:08] <Darren_Duncan> only under my own modules, in case other people don't like it happening with theirs

[05:08] <Darren_Duncan> but I can do it for the others if it is desired

[05:08] <theorbwto> Oh!

[05:08] <Darren_Duncan> my /modules stuff is now 100% perl 6 in intent

[05:08] <theorbwto> You were talking about the makefiles for the p6 modules, not for the p5 modules?

[05:09] <Darren_Duncan> I was talking about both

[05:09] <theorbwto> Oh, right, you want them as close as possible.

[05:09] <Darren_Duncan> correct

[05:09] <Darren_Duncan> in the case of pugs, it looks silly to have perl 5 code under /modules anyway

[05:09] <Khisanth> theorbwto: tried duct tape?

[05:09] <Darren_Duncan> CPAN serves that purpose, it hosts both

[05:10] <stevan> past my bedtime, night all

[05:10] <Darren_Duncan> my next CPAN uploads of my perl 5 modules will use Test::More and say so in the Makefile

[05:10] <theorbwto> Khisanth, haven't, but I'm not sure that'd so much work...

[05:11] <Khisanth> I meant for holding the bluetooth antenna in place

[05:12] <theorbwto> I knew that.

[05:12] <theorbwto> But sometimes I want to take it out.

[05:12] <Darren_Duncan> so, any objections to my changing the Makefile.PL of all other /modules to Perl 6?

[05:12] <Darren_Duncan> said change would assume a perl 6 port of Pugs::MakeMaker would be out to be used

[05:15] <Darren_Duncan> actually, I'll post that matter on the ML instead for discussion, re making /modules/*/Makefile.PL into Perl 6 code, and I'll leave the other distros alone

[05:17] <jabbot> pugs - 1338 - CGI scripts can be tested on the command

[05:17] <jabbot> pugs - 1337 - Makefile.PL is Perl 6 now for LKT and SR

[05:24] <sdtr443w> OK back to that readline detection problem while building PUGS...

[05:24] <Darren_Duncan> okay, the posting to p6c is done

[05:24] <Darren_Duncan> re Makefiles

[05:37] <sdtr443w> I had to do some mucking around to get this to build on my SuSE box.  Is the Perl 6 newsgroup the best place to document all the steps?

[05:37] <theorbwto> perl6-compiler

[05:37] <liyuray> window log

[05:38] <gaal> morning!

[05:39] <theorbwto> Mornin, gaal!

[05:39] <gaal> getting some tea, brb

[05:40] <sdtr443w> I should be specific -- I'm talking about PUGS

[05:43] <sdtr443w> Building it seems to get so hectic that is causes me to lose my connection to the machine.  Right now I'm trying a nohup run in a hope that it won't kill itself when I get disconnected.

[05:45] <gaal> sdt.*, do you know about screen?

[05:45] <sdtr443w> I guess not

[05:45] <sdtr443w> Sometimes I wonder how I got this far into Perl -- given my lack of UNIX 

[05:45] <sdtr443w> Oh hey it worked this time.  Jesus is Lord or something.

[05:46] <sdtr443w> Finally!  A pugs executeable!

[05:46] <gaal> http://www.gnu.org/software/screen/ - incidentally it solves the nohup problem but is also a great tool for other things

[05:46] <gaal> congratulations :)

[05:47] *** theorbwto is now known as jesus

[05:47] <sdtr443w> Ahh I just typed screen on the command-line and now it's doing strange, strange things!

[05:47] <jesus> Thank you, my son, but I didn't have anything to do with it.

[05:47] *** jesus is now known as theorbtwo

[05:48] <theorbtwo> Hm, somebody has the username jesus registered with nickserv.

[05:48] <sdtr443w> Terry Schiavo

[05:50] <gaal> Darren_Duncan, still around?

[05:51] <Darren_Duncan> yes

[05:51] <gaal> you really want a port of MM? :)

[05:51] <Darren_Duncan> I was working on my P5 test suites, upgrading to test::more

[05:51] <Darren_Duncan> gall, in theory

[05:51] <Darren_Duncan> gaal

[05:51] <sdtr443w> Is there a Perl 6 compilers newsgroup?  I don't think my newsgroup server carries it

[05:51] <sdtr443w> I have the internals and the language groups

[05:51] <Darren_Duncan> perl 6 compilers is an email list

[05:51] * justatheory checks his gall

[05:52] <gaal> Better port every candidate p5 module to Module::Build first

[05:52] <sdtr443w> Oh snap

[05:52] <Darren_Duncan> it is the same as language and internals

[05:52] <gaal> and then port *that* to p6 :)

[05:52] <sdtr443w> oh

[05:52] <Darren_Duncan> whatever, I just think that the Makefile.PL for perl 6 modules should be written in perl 6

[05:53] <gaal> Makefile.PL should *die*! :)

[05:53] <Darren_Duncan> there just needs a solution that is easy to use and standardized

[05:53] <gaal> and is cheap and we need it fast, right? :)

[05:53] <gaal> anyway, MM is probably not it

[05:53] <theorbtwo> I'm all for Module::Build taking that place.

[05:54] <theorbtwo> In any case, something that does not require as much outside of perl.

[05:54] <theorbtwo> (IE make.)

[05:54] <Darren_Duncan> if such a module exists in perl 6, I'm all for updating the /modules ports to use it by default

[05:54] <gaal> it doesn't yet, but perhaps someone could be talked into porting it (== Module::Build)

[05:55] <gaal> or coming up with something entirely better!

[05:55] <Darren_Duncan> meanwhile, I'll invoke Pugs::Makemaker ... the nonexistant perl 6 version

[05:55] <Darren_Duncan> new and better is good

[05:55] <Darren_Duncan> that's what perl 6 is all about

[05:55] <gaal> in that case may i suggest you use a different name

[05:55] <Darren_Duncan> and things associated with it can learn from the example

[05:55] <gaal> because it shouldn't be coupled to pugs

[05:56] <gaal> and it shouldn't bow down to mm's legacy

[05:56] <Darren_Duncan> want to suggest a placeholder name?

[05:56] <gaal> Instill?

[05:56] <gaal> Instate?

[05:56] <gaal> Present?

[05:56] <Darren_Duncan> how about 'TheGreatModuleInstaller'

[05:56] <theorbtwo> I disagree with "tied to pugs", BTW.

[05:56] <theorbtwo> Shouldn't even be tied to perl too much.

[05:56] <gaal> Pugs::Present?

[05:57] <Darren_Duncan> since its a placeholder, a level-1 name is probably best

[05:57] <gaal> Build? :)

[05:57] <Darren_Duncan> like your first 3 examples

[05:57] <Darren_Duncan> sure, I could go with Build

[05:57] <theorbtwo> I like Distro::Instill

[05:57] <Darren_Duncan> here's another legacy thing, should the '.pl' be uppercased?

[05:57] <theorbtwo> Possibly even Package::Instill

[05:58] <gaal> i never liked it

[05:58] <theorbtwo> No, but I like beginning with a cap letter.

[05:58] <Darren_Duncan> doesn't "instill' mean something else

[05:58] <gaal> didn't make much sense in incasitive filesystems, either.

[05:58] <theorbtwo> (makes it sort toward the beginning.)

[05:58] <gaal> _______Build

[05:58] <Darren_Duncan> no

[05:58] <theorbtwo> "instill" is a valid English word, but the meaning works decently well here.

[05:59] <theorbtwo> I like package more then module; should be usable for installing things other then modules.

[05:59] <Darren_Duncan> it is an english word, but I thought the meaning meant something different, such as "to put into"

[05:59] <Darren_Duncan> or maybe "to put into" is appropreiate

[05:59] <gaal> http://www.m-w.com/cgi-bin/dictionary?book=Dictionary&va=instill&x=0&y=0

[06:00] <gaal> problem with that word is you'll have people cursing you when their fingers type 'install' instead.

[06:00] <theorbtwo> 1;

[06:00] <Darren_Duncan> here's a separate but similar question ... what should we use for the !# lines in Perl 6 scripts and modules under /modules ?

[06:00] <theorbtwo> #!/usr/bin/perl6

[06:00] <theorbtwo> I think.

[06:00] <Darren_Duncan> I"m currently use !#pugs

[06:01] <Darren_Duncan> I mean #!pugs

[06:01] <theorbtwo> But IIRC, Autrijus said it shouldn't be named perl6 until and unless Larry blesses it.

[06:01] <gaal> anyway *i'm* pretty sure i want "that pre-installation thing you run" thing to do other things besides install

[06:01] <gaal> e.g. package a distro PAR

[06:01] <Darren_Duncan> I also thought Perl 6 would simply end up being named 'perl' anyway

[06:01] <gaal> #!pugs sounds good to me

[06:02] <gaal> anyway these are mostly modules and don't need a shebang...

[06:02] <Darren_Duncan> so then we stay with #!pugs for now, and change it later when a perl binary exists?

[06:03] <Darren_Duncan> back to the Makefile replacement ...

[06:03] <theorbtwo> I would like the "standard" thing to be able to:

[06:03] <Darren_Duncan> I've never used Build.pm ... does it work without 'make' entirely?

[06:03] <gaal> i actually prefer Instate or Present (or Build :). Instill is cute and punny, but to cute.

[06:03] <gaal> yes.

[06:03] <theorbtwo> Create .debs, create .rpms, install directly, create some package for installing on windows boxes, and be able to install it...

[06:03] <Khisanth> .msi?

[06:04] <gaal> theorbtwo, and also build. :)

[06:04] <Darren_Duncan> Deliver ?

[06:04] <gaal> :)

[06:04] <Darren_Duncan> that's kind of generic, handling both 'install' and 'build' and 'packaging'

[06:05] <theorbtwo> building is part of creating a binary package.

[06:05] <gaal> But I never had a gripe against Module::Build. has anyone? Let's at least look for shortcomings before going off to do something else?

[06:05] <theorbtwo> I like Deliver.

[06:05] <theorbtwo> I also like Module::Build.

[06:05] <gaal> so we can just port it, no?

[06:05] <Darren_Duncan> and who says 'build' has to mean binary?

[06:05] <gaal> adding the .deb .msi etc capabilities as required.

[06:06] <Darren_Duncan> how complicated is Module::Build ... porting easy?

[06:06] <theorbtwo> Sounds good to me.

[06:06] <gaal> these things are never *easy*

[06:06] <gaal> system dependent, etc.

[06:06] <gaal> actually, i think they'll be made a little bettter with that fancy, what was it, Class::Path? that there was some talk about.

[06:09] <Khisanth> gaal: don't forget .ppd :)

[06:09] <gaal> that too

[06:09] <theorbtwo> ppd?  Should just die.

[06:09] <theorbtwo> We should replace it with something that doesn't suck.

[06:10] <gaal> par par par par par

[06:10] * gaal kinda likes par :)

[06:10] <theorbtwo> AFAIK, PAR is almost completely not what we want.

[06:10] <sdtr443w> Is there a source for a bunch of very, *very* simple Perl 6 programs to dabble in?  

[06:10] <gaal> a par *target* is one of th things i want.

[06:11] <theorbtwo> But par of a module makes no sense, only par of an executable.

[06:11] <Khisanth> Build par?

[06:11] <gaal> sdt.*, see the t/ and modules/ directories.

[06:11] <sdtr443w> I guess hanoi.p6 in the examples path of PUGS isn't so bad

[06:11] <Darren_Duncan> would anyone object if I injected Module::Build into /modules so we can start porting it?

[06:11] <gaal> of course it does! think deployment

[06:11] <sdtr443w> Oh that's better

[06:11] <theorbtwo> I am thinking deployment.

[06:12] <sdtr443w> Once I figure this all out, I should submit an entry to the docs on how to get pugs going once it builds

[06:12] <gaal> okay: you have a big project

[06:12] <theorbtwo> I haven't used par, possibly it does something quite different then what I thought.

[06:12] <gaal> part of it has dlls and stuff

[06:12] <gaal> XS and "things that require a compiler" stuff.

[06:13] <Khisanth> ah you want to just Module::Build for things besides modules :)

[06:13] <Darren_Duncan> since its thought that module::build is the best point of departure, I thought of putting it in to hack on ... however, I can skip the parts that are specific to XS

[06:13] <gaal> you develop it, and want to give it to the customer

[06:14] <Khisanth> something like PAR would be nice as a core module ...

[06:15] <gaal> so you do it on your box, which is (say) linux

[06:15] <gaal> move over to your staging, which is the same solaris as the client's

[06:15] <gaal> add solaris' version of the shared objects to the par

[06:15] <gaal> run tests there too

[06:15] <Darren_Duncan> okay, I'll ask the opposite question ... who DOES want Module::Build as-is ported?  I won't start the process without a yes

[06:15] <gaal> and throw the par at the client.

[06:16] * theorbtwo .

[06:16] <gaal> next you want to send a fix

[06:16] <gaal> you find the bug, it's probably in your code

[06:16] <gaal> you make a par only of the files that have changed

[06:17] <gaal> Khisanth, here's a PAR target for M:B: http://perlmonks.org/?node_id=437941

[06:17] <gaal> don't have to go through the anoyying build process, and don't need to give a big package to the client

[06:18] <Khisanth> gaal: there are more useful things to have before that :)

[06:18] <gaal> just put the patch earlier in the search path

[06:18] <Darren_Duncan> actually, nevermind the Build.pm port for now ... it has a huge number of dependencies 

[06:18] * theorbtwo hmmms.

[06:19] <Khisanth> well merging two par probably isn't too difficult ...

[06:19] <theorbtwo> There was a fairly sizeable thread this on p6-[lc] a while ago.

[06:19] <Khisanth> so you can give the client a patcher too :)

[06:19] <gaal> Khisanth: there are many things to do and i suppose people will work on what they have foudn important for them in the past

[06:20] <gaal> to2, i'd be grateful for a link

[06:21] <gaal> PAR doesn't rhyme with JAR for nothing, y'all know.

[06:21] <Darren_Duncan> their both related to pirates

[06:21] <gaal> Arr.

[06:21] <Darren_Duncan> Aaarrrr

[06:22] <Darren_Duncan> Gyeaar

[06:22] <theorbtwo> My machine is acting funny, so I doubt you'll get it from me.

[06:25] <Khisanth> they are both zip files :)

[06:25] <gaal> that's like saying "it's just XML" :)

[06:25] <theorbtwo> ...only more so.

[06:26] <gaal> i need to get going to work, bbiab

[06:27] <Khisanth> hmm P

[06:27] <Khisanth> hmm PAR as an XML file?

[07:04] <Darren_Duncan> ... and a lot of people joining at once

[07:22] <nothingmuch> morning

[07:22] <Darren_Duncan> morngi

[07:37] <jabbot> pugs - 1339 - trivial LKT/SRT test update - nothing to

[07:46] <nothingmuch> *sigh*... etherwake was not configured

[07:46] <nothingmuch> no eris this morning

[08:21] <liyuray> help load

[08:26] <castaway> mornin

[08:27] <castaway> nm, you awake?

[08:28] * nothingmuch is awake, si

[08:28] * nothingmuch adds 'nm' to popup words

[08:29] <castaway> *g*

[08:30] <castaway> can you confirm that the codingmonkeys subetha test thingy is dead?

[08:30] <nothingmuch> nope, works for me

[08:31] <castaway> hmm, telnetting to it doesnt, from here

[08:32] <castaway> (or attempting to connect with actual beep type protocol

[08:32] <castaway> I wonder if they banned our subnet..

[08:37] <castaway> wow, it works from perlmonk.org.. I bet they banned us somehow.. 

[08:37] <castaway> barstewards

[08:38] <nothingmuch> how will you fix it?

[08:38] <castaway> I dunno yet..

[08:38] <nothingmuch> perhaps you can use nylon on pm?

[08:38] <nothingmuch> i can let you use nylon on my box at home, too

[08:39] <castaway> nylon?

[08:40] <castaway> whats nylon?

[08:40] <castaway> I think we need to test more locally, else we'll just get other hosts banned too ,)

[08:41] <castaway> we got a mac mainboard off ebay, so maybe we'll have a mini test machine soon

[08:57] <nothingmuch> sorry

[08:57] * nothingmuch is back

[08:58] <castaway> no worries

[08:58] <nothingmuch> nylon is a proxy

[08:58] <nothingmuch> mac mainboard?

[08:58] <nothingmuch> http://monkey.org/~marius/pages/?page=nylon

[08:58] <castaway> motherboard, bunch of circuits, wires and such, y'know :)

[08:58] <nothingmuch> it knows how to tunnel plainly, and also do socks

[08:58] <nothingmuch> how much of it?

[08:59] <nothingmuch> cpu + board, and that's it?

[08:59] <castaway> I could just use ssh tunnelling

[08:59] <nothingmuch> because macs are pretty propietry

[08:59] <nothingmuch> nylon is like shell redirects for netcat

[08:59] <nothingmuch> ssh knows to do more advanced stuff

[08:59] <castaway> havent looked all that closely.. as far as I understood it, all it would need would be monitor, keyboard, mouse and atx supply

[08:59] <castaway> we have a monitor adapter

[08:59] <nothingmuch> in terms of how things are tunnelled

[08:59] <nothingmuch> ah, that's good

[09:01] <castaway> I'm wondering how stable SEE is, for packet testing .. 

[09:02] <castaway> I dont particularly want to get another host banned

[09:03] <castaway> Is yours reachable? ,)

[09:04] <castaway> oh, and probably a diskdrive of sorts ,)

[09:08] <nothingmuch> it can work on another port, and be always on

[09:08] <nothingmuch> my SEE is not open

[09:08] <nothingmuch> like codingmonkeys

[09:08] <nothingmuch> i'm at work

[09:08] <nothingmuch> i can set one up when I get home, on eris

[09:08] * castaway nods

[09:26] <nothingmuch> castaway: if you guys have nat punched, i can connect to you, though

[09:26] <Khisanth> hrm has there been any updates to forms for perl6?

[09:26] <nothingmuch> and capture tcpdump for you

[09:26] <nothingmuch> Khisanth: forms are going away

[09:26] <nothingmuch> they will be warpped in a module

[09:26] <nothingmuch> let me find the synopsis for you

[09:26] <Khisanth> I mean Form.pm

[09:27] <nothingmuch> ah

[09:27] <nothingmuch> i think it's not goint to change much

[09:27] <nothingmuch> it's for compatibility

[09:27] <castaway> nm, I think we do, but I'm working on client side, at the mo.. havent done much server-side yet

[09:27] <Khisanth> I was just looking at http://search.cpan.org/~dconway/Perl6-Form-0.04/Form.pm and wondering if the {} stuff would cause problems

[09:27] <castaway> (As, afaik, emacs cant listen on ports..)

[09:27] <castaway> We really need interaction

[09:28] <Khisanth> since {} is also used for interpolating code

[09:28] <nothingmuch> castaway: p'raps this stuff is better put in a library to be bound by emacs later?

[09:29] <castaway> nothingmuch: that would require writing it in something other than elisp :)

[09:29] <nothingmuch> that is exactly my agenda ;-)

[09:29] * nothingmuch wants it for vim

[09:29] <castaway> heh

[09:29] <castaway> well, one thing at a time :)

[09:30] <nothingmuch> which happens first? .tcshrc or .login?

[09:30] * nothingmuch really hopes rc

[09:33] <decay_> yep

[09:33] <castaway> Hmm,m I wonder if clisp makes libraries ,)

[09:34] <castaway> emacs can use cl

[09:45] <decay_> btw: http://fun.drno.de/pics/english/vi-keyboard.jpg

[10:17] <jabbot> pugs - 1341 - Rat

[10:17] <jabbot> pugs - 1340 - add method and submethod

[10:37] <jabbot> pugs - 1342 - some small fixes

[11:00] *** metaperl__ is now known as metaperl_

[11:31] *** integral changes topic to: pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | FBSD_4.11:r1302(183/3383) win2k:r1324(187/3474) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[11:35] * castaway wonders what those numbers are about.

[12:04] <malaire> castaway: jabbot reports commit to pugs (also in here: http://rt.openfoundry.org/Foundry/Project/Source/index.html/pugs/log/ )

[12:04] <malaire> s/commit/commits/

[12:04] <integral> castaway: the numbers are subtests failing out of the total

[12:05] <malaire> you didn't mean jabbot's numbers then ;)

[12:07] <castaway> I meant the ones in the topic

[12:07] <castaway> because it all looks like gibberish to someone who hasnt been sitting here the last month or so

[12:09] <malaire> perhaps topic should include explanation in the end - "platform:revision(failed/total)" or something like that?

[12:09] <castaway> it might be useful.. or a url which points to a more useful list of numbers .)

[12:09] <integral> malaire: anyone can change the topic ;-)

[12:11] *** Aankh|Clone is now known as Aankhen``

[12:23] * rgs notices CGI::pugs

[12:23] <castaway> wossat?

[12:25] <rgs> ask stevan :)

[12:37] <gaal_> good Time::HiRes::time

[12:58] <kungfuftr> stevan: ping

[13:20] <stevan> kungfuftr: hey

[13:21] <stevan> castaway: CGI::Pugs is a minimal CGI module for pugs

[13:21] <stevan> its a proof of concepts in a way

[13:22] * stevan got sick of writing/porting modules which wont work for months

[13:22] <stevan> I prefer immediate feedback :)

[13:23] <castaway> I see

[13:23] <castaway> nifty

[13:23] <stevan> castaway: it works, but only for GET and it does not encode/decode the strings

[13:24] <stevan> (need some features to implement that)

[13:24] <rgs> you already have index and substr :p

[13:24] <stevan> rgs: thats true

[13:24] <stevan> I could do it really really really old school

[13:26] <rgs> in C ? :)

[13:26] <stevan> assembler :)

[13:27] * stevan reaches for that IBM 360 assembler book he got on Ebay

[13:28] * stevan puts on a white lab coat and gets out his cardpunch

[13:28] <castaway> *g*

[13:30] <kungfuftr> stevan: yullo! you know your 'debug' pragma style module on cpan... is it just a custom loggin tool or does it actually work with the perl debugger?

[13:30] <stevan> kungfuftr: it is a very basic custom logger

[13:30] <stevan> realllllly basic

[13:30] <stevan> its a really bad name, I should fix that

[13:33] <kungfuftr> stevan: ah... k. damn... no easy profiling for me

[13:33] <stevan> kungfuftr: basically I didnt know about Log::Log4Perl

[13:33] <kungfuftr> ah

[13:33] <kungfuftr> =0)

[13:33] <Limbic_Region> stevan - IMO, it would be much nicer to go the CGI::Simple emulation route then it would be CGI.pm - CGI.pm is a fugly boheameth

[13:34] <castaway> It works though :)

[13:34] <stevan> Limbic_Region: I agree, I was really just experimenting last night

[13:34] <stevan> I am also not very familiar with CGI::Simple (or CGI for that matter)

[13:34] <rgs> for cgi, minimalistic is better

[13:34] <stevan> I use mod_perl handlers, and TT

[13:35] <rgs> TT uses cgi::something to parse what mod_perl hands to it, anyway

[13:35] <Limbic_Region> stevan - doing something (anything really) is better than what I am doing (nothing) - didn't mean to sound as though I was unappreciative - I am very much btw - thanks

[13:36] <stevan> Limbic_Region: didnt sound that way at all :)

[13:36] <kungfuftr> bah, yaml harness no work unless pugs is installed

[13:36] <gaal_> l4p, now that's somehting nice to port to p6

[13:36] <gaal_> kff: ? i use it all the time and pugs was never installed on my system

[13:36] <gaal_> (hi all :)

[13:37] *** gaal_ is now known as gaal

[13:37] <stevan> hey gaal

[13:37] <kungfuftr> gaal: how?

[13:38] <kungfuftr> (ie: command line usage)

[13:39] <gaal> util/yaml_harness.pl

[13:39] <gaal> :)

[13:39] <stevan> rgs: I agree, simple CGI is good

[13:39] <kungfuftr> gaal: i just get lots of 'could not exec /usr/bin/pugs'

[13:39] <gaal> urr!?!?

[13:40] <kungfuftr> and can't locate Test.pm if i put a symlink in

[13:40] <gaal> what does your HARNESS_PERL env var say?

[13:40] <gaal> try setting it to $PWD/pugs

[13:42] <kungfuftr> gaal: still moans about missing library

[13:44] <gaal> does prove work? prove -v t/builtin/goto.t for example

[13:44] <gaal> export PERL6LIB=ext/Test/lib   too.

[13:45] <kungfuftr> ta

[13:46] <kungfuftr> seems to be running now

[13:47] <gaal> cool.

[13:47] <scw> I wrote an one-line shell script file: PERL6LIB=ext/Test/lib HARNESS_PERL=./pugs prove $*

[13:48] <rgs> PERL6LIB=blib6/lib might be better. or shorter.

[13:50] <gaal> prolly a good idea to put that in the wiki.  http://pugs.kwiki.org/?FrequentlyAskedQuestions

[13:52] <stevan> Limbic_Region: I just looked over CGI::Simple, very nice

[13:52] <stevan> much better than trying to decode CGI.pm :)

[14:07] *** xerox_ is now known as xerox

[14:16] <Limbic_Region> stevan - and to be honest, a lot of those methods are only there to be compatible with CGI.pm (IOW - there is still fat that could be trimmed)

[14:19] <stevan> Limbic_Region: can you maybe write down a core set useful routines? I nevver use these modules, so I am just guessing

[14:19] * stevan has to run an errand, bbiab

[14:20] *** xerox_ is now known as xerox

[14:28] <Limbic_Region> stevan - maybe we should ask James Freeman (Tachyon) if he wants to get involved 

[14:28] <Limbic_Region> I only ever use a few CGI methods but I don't do a lot of web programming myself

[14:37] <jabbot> pugs - 1343 - * Parrot IMC compiler, parser, evaluator

[14:38] <autrijus> hi :)

[14:38] <autrijus> <- implemented a minimal IMC compiler/parser/prettyprinter in 1 hr

[14:39] <castaway> IMC?

[14:39] * mugwump showers autrijus with confetti/champagne/jism

[14:39] <obra> uh.

[14:39] <autrijus> castaway: parrot intermediate code

[14:39] <castaway> ah

[14:39] <castaway> nifty

[14:39] <rgs> wow

[14:39] <rgs> autrijus++

[14:39] <autrijus> gadt++

[14:39] <autrijus> th++

[14:39] <scw> autrijus++

[14:39] <autrijus> # amazing technology

[14:40] <scw> autrijus: Err, stupid problem. How can we help on IMC?

[14:40] <autrijus> scw: well, by downloading parrot

[14:40] <autrijus> build it, look at imcc/*

[14:40] <autrijus> read docs/* and imcc/docs/*

[14:40] <autrijus> and then get back to me :)

[14:41] <scw> Ouch, so you didn't read them? :p

[14:41] <autrijus> I did. you also need to read them if you want to help :)

[14:41] <scw> Oh, sure :)

[14:41] <castaway> bah, programming blind is so much more fun :)

[14:41] <autrijus> castaway: true, but not as helpful :)

[14:41] <scw> and perhaps more bug?

[14:42] <mugwump> so, you're not including *that* in your 1 hour, are you?  the truth comes out

[14:42] <autrijus> mugwump: eh, what?

[14:42] <castaway> true enough

[14:42] <autrijus> no, I did not include the time I spent on reading PDDs, nor did I include the time I spend on reading TaPL, or the time I spent learning english.

[14:42] <autrijus> if you count it that way, it took me 23 whole years

[14:42] <autrijus> fancy that.

[14:43] <castaway> *g*

[14:43] <mugwump> gestation?  :)

[14:43] <autrijus> 24 then

[14:44] <autrijus> stevan++ # wow you're crazy, man

[14:45] <autrijus> (CGI::Pugs)

[14:45] <obra>                            CGI::Pugs?

[14:45] <autrijus> obra: yeah, real working one

[14:45] <autrijus> pugs/ext/CGI-Pugs/

[14:46] <autrijus> multi sub param returns Array is export { keys(%PARAMS) }

[14:46] <autrijus> multi sub param (Str $key) returns Str is export { %PARAMS{$key} }

[14:46] <autrijus> multi sub, man

[14:46] <rgs> doesn't urldecode though.

[14:46] * rgs loves multi subs

[14:46] <autrijus> it has this decode_url_data

[14:46] <obra> it's a CGI lib for pugs?

[14:46] <autrijus> obra: yeah

[14:47] <obra> any reason it needs Pugs in the name? non core features?

[14:47] <autrijus> there's no reason. we are at this "name it whatever" phase.

[14:47] <castaway> .oO( why does that sound so long winded?)

[14:47] * obra nods

[14:48] * kungfuftr gets an automated smoker going locally

[14:48] <autrijus> kungfuftr++

[14:49] <kungfuftr> autrijus: sorry bout dbi::pureperl btw... =0(

[14:50] <autrijus> np :)

[14:50] <autrijus> mmm cyclop smiley

[14:50] <kungfuftr> nope... big nose smiley

[14:52] <autrijus> ahh.

[14:52] * autrijus decides to crash for 15 mins or so

[14:52] <autrijus> brb &

[15:01] *** clkao_ is now known as clkao

[15:20] <nwc10_> Soooo, " their Makefile.PL are now written in Perl 6" ....

[15:21] <nwc10_> there's a plan to port MakeMaker to Perl 6 and have schwern's personal hell last another 20 years +?

[15:21] <nwc10_> :-)

[15:21] <nwc10> I found that I'm already on freenode :-)

[15:22] <theorbtwo> No, there's a plan to port Module::Build and add anything else it should have.

[15:23] <kungfuftr> rightio... automated smoker setup... yay

[15:24] <kungfuftr> http://kungfuftr.com/pugs-smoke.html - run every hour on the half hour

[15:27] *** Corion_ is now known as Corion

[15:29] <Corion> Heh. Chat!Zillas auto-reconnect feature is nifty - it reconnects me after my machine wakes up from hibernating. Nice :)

[15:30] <Corion> ... I should automate the reauth with NickServ too ...

[15:30] <chip> *sigh*  I like MakeMaker.

[15:30] <Corion> chip: It's better than the alternatives :)

[15:31] <chip> Perl 6 makes rewrites fun!

[15:31] * castaway thinks someone should port it .)

[15:31] <Corion> castaway: I might, if just to spite the Module::Build crowd.

[15:31] <rgs> Corion: that's evil :)

[15:31] <theorbtwo> Don't spite us, just join us.

[15:32] <castaway> heh

[15:32] <gaal> yeah, you get to maintain it too Corion :)

[15:32] <chip> Zombie::Build

[15:32] <Corion> rgs: I have been less than enchanted by Module::Build, its development process and the attitude.

[15:32] <theorbtwo> Find the things that module::build doesn't do, but should, and make it do it.

[15:32] <theorbtwo> Corion: We're forking.  Different development process, different attitude.

[15:32] <gaal> alternatively, write sometihng completely new.

[15:32] <castaway> what it doesnt do seemms to consist of "adding patches" which is hard to patch :)

[15:32] <Corion> theorbtwo: That implies I am interested in developing it. I'm interested in using it.

[15:33] <Corion> theorbtwo: I hope so :)

[15:33] <rgs> yay, flamewar.

[15:33] <chip> theorbtwo: Forking implies a new name, unless the old fork is dead, in which case it's a change of management

[15:33] <chip> which is it?

[15:33] <Corion> rgs: No - it's a constant rant of mine :)

[15:33] <Corion> chip: I consider "both" old systems dead, except that EU::MM is the better variant of dead, as it is a clean skeleton instead of a rotting carcass

[15:33] <castaway> *g*

[15:34] <theorbtwo> chip, we haven't picked a new name yet.

[15:34] <chip> theorbtwo: Have you considered building on Cons?

[15:34] <chip> theorbtwo: All the dependency work has already been done

[15:36] <Corion> theorbtwo: BTW, what do I need to create your funky HTML graphs of failing/succeeding tests ? Just run the Perl script?

[15:38] <theorbtwo> Run the yaml harness to get a tests.yml, run my perl script with stdout redirected somewhere to make the HTML graph.

[15:38] <Corion> theorbtwo: Thanks :)

[15:38] <theorbtwo> (Both should be run from pugs' root directory -- that is, the one containg t.)

[15:44] <q[acme]> there can only be one

[15:47] <theorbtwo> We're the princes of the universe?

[15:48] * autrijus notes that Pugs uses the 3rd way.

[15:49] <autrijus> Module::Install, that is :D

[15:49] <autrijus> it's the middle path

[15:49] <kungfuftr> bah, every half hour i mean

[15:49] <theorbtwo> You weren't here when we had the discussion earlier, autrijus: did you use M::I because it was convient, or because you like it?

[15:50] <theorbtwo> ...and is it a good stepping-off point for making a system that does the right thing for perl6, has a clean code base, etc?

[15:51] <theorbtwo> (AFACS, it fails pretty hard on having a clean code base, since it mostly delegates to EU::MM.)

[15:52] <Limbic_Region> autrijus - did you get the /msg I sent you yesterday?

[15:52] <mugwump> Every half hour?  That's not quick enough, we need real time streaming!

[15:54] <gaal> kff: better to listen over the commit feed and do it right after you automatically svn up

[15:54] <gaal> but if you wait a few days we'll write that for you. :)

[15:56] <autrijus> Limbic_Region: about what? :)

[15:56] <Limbic_Region> pdcawley's question about the Santa Claus golf

[15:56] * Limbic_Region goes to find it again

[15:57] <Limbic_Region> http://www.perlmonks.org/index.pl?node_id=443062

[15:57] <Limbic_Region> pdcawley used to do the p6 weekly summaries

[15:57] * Limbic_Region notes the time and wanders off to a meeting

[15:57] <Corion> autrijus++ # if you count it that way, it took me 23 whole years

[15:59] <autrijus> theorbtwo: uh, well, M::I can delegate to M::B (which also delegates to EU::MM

[15:59] <autrijus> and yes, I used M::I as a stopgap

[15:59] <autrijus> because, well, I wrote it ;)

[15:59] <theorbtwo> I didn't realize that.

[16:00] <Corion> theorbtwo: I notice that all diag() output belongs to the test before it, which is sensible, except that my tests output the program command line before executing it. Is there any way to indicate to which test a diag() output belongs ? (I guess no :) )

[16:00] <theorbtwo> At some point, we need to have a fairly long discussion about how this stuff should be done, because the current p5 way sucks in many ways.

[16:00] <theorbtwo> Corion, not that I'm aware of.

[16:01] <Corion> theorbtwo: Not that important anyway :) Switching order makes the diag useless (I output in case it hangs), and implementing such a feature introduces useless bloat (as I will be the only customer)

[16:02] <theorbtwo> Not only that, but it's a matter for the TAP protocol layer.

[16:03] <stevan> kungfuftr++ # for the auto-smoker

[16:04] <stevan> orba: I plan on changing the name from CGI::Pugs, it was late last night, so I was not in my right mind (which also explains why I wrote it too)

[16:04] <stevan> any suggestions for a better name for CGI::Pugs are welcome

[16:06] <Corion> stevan: CGI ?

[16:06] <nothingmuch> stevan: ping

[16:06] <Corion> (let's leave HTML generation up to the templating modules)

[16:06] <Corion> ... like HTML::FromAST

[16:06] <gaal> Corion, re diag: TAP doens't suppotr that afaik

[16:06] <nothingmuch> could you do a bit more complicated data input into testgraph.pl?

[16:06] <gaal> but it doesn't mess up the smoke output

[16:06] <stevan> nothingmuch: hello

[16:06] <Corion> (for those who really crave procedural HTML creation)

[16:06] <nothingmuch> i would like to representd consolidated results

[16:06] <nothingmuch> either a test is green, that is, passes everywhere

[16:06] <stevan> Corion: I dont want to replicate CGI, its too bloated

[16:07] <gaal> ah actually in your case it might,a bit

[16:07] <nothingmuch> or red, fails everywhere, or whatever

[16:07] <Corion> gaal: No, it doesn't mess it up - it just displays the information one-off

[16:07] <Corion> stevan: Yes. Clean up CGI as it should be. Or call it CGI::Request :-)

[16:07] <Corion> Maybe there should be no CGI.pm6

[16:07] <gaal> only declarative stuff. maybe we need anohther method that does the same as diag but decorates the output so it's clear it's a mesage about the next test.

[16:07] <stevan> Corion: CGI - The Next Generation

[16:08] <theorbtwo> nm, possibly that is a sepperate tool that takes a bunch of YAMLs and creates one summary YAML from them?

[16:08] <nothingmuch> and if there is yellow, then pass/fail per platform

[16:08] <nothingmuch> and yellow in case there is some disagreement

[16:08] <nothingmuch> in any case, all diags are shown in the tooltip

[16:08] <Corion> gaal: It doesn't matter that much. Extending TAP would be nice, but it's not important

[16:08] <nothingmuch> theorbtwo: yes, the merging is done by something else

[16:08] <gaal> to2: yes, i'll wotk on that tomorrow

[16:08] <gaal> unless nm beat me to it :)

[16:08] <nothingmuch> i doubt i will

[16:08] * nothingmuch is sufferring from fatigue

[16:09] <nothingmuch> work is getting to me

[16:09] <theorbtwo> Oh: I was working on a better HTMLifier of the docs, which is presently half-done.

[16:09] <nothingmuch> and i have a movie date tonight

[16:09] <nothingmuch> if i'm energized when I return, then i could do it

[16:09] * gaal is suffering from too many weddings

[16:09] <nothingmuch> but probably tomorrow

[16:10] <kungfuftr> parsefailure?

[16:10] <kungfuftr> hhhmmm...

[16:13] <kungfuftr> ah... worked it out

[16:55] <gugod_> http://data.gugod.org/pugs.png # SVK::Churn result of pugs. Red = lines added , Green = lines removed

[16:56] <autrijus> 20..k?

[16:56] <autrijus> oh wow, 28k

[17:00] <gugod_> hmmm that doesn't looks right

[17:00] <gaal> what's the y axis?

[17:00] <gugod_> lines of code

[17:01] <gugod_> I'll do it again with some legend

[17:21] <Corion> Yay. Seems like I finally got "-I foo" to work the same as "-Ifoo" :)

[17:22] <Corion> Regression tests++ # Forgot to fix some other command line parsing in the process

[17:22] <autrijus> Corion++

[17:22] <Corion> autrijus: But for the next incarnation of the command line parser, I'll turn to a proper Haskell parser I hope ...

[17:22] <Corion> ... because the Pugs/Perl command line actually warrants it :)

[17:23] <autrijus> clkao++ # core darcs patch algebra API landed on SVK

[17:23] * clkao grins

[17:23] <autrijus> Corion: cool :) I may interest you in parsec :)

[17:24] <Corion> autrijus: Yeah - I'll have to learn about Haskell types anyway ... But first I need to get this out of the door, do svn up and then another test run to update the Win32 stats :)

[17:25] <metaperl_> clkao, if you had to choose just one version control system, which would you choose?

[17:25] <autrijus> cool :)

[17:25] <clkao> cp/mv

[17:25] <autrijus> svk cp and svk mv, of course?

[17:25] <metaperl_> lol

[17:25] <clkao> orz

[17:36] <Limbic_Region> stevan - my email to James (the author of CGI::Simple) was returned since he no longer uses the account (Spam), but I have resent to what I believe to be a good address

[17:46] <gugod_> http://data.gugod.org/pugs.png # updated

[17:47] <autrijus> woot

[17:48] <dada> 28k lines added in one go?

[17:50] <gugod_> that doesn't really look right :/ but svk result looks correct (/svk.png)

[17:51] <crysflame> hi, gugod

[17:51] <autrijus> zzz & :)

[17:52] <gugod_> hi crysflame 

[18:15] <Corion> If I add a new .hs file, what are the steps to take except svn add ArgParse.hs ? Do I manually update the Makefile / Makefile.PL or is there some generator ?

[18:16] <kungfuftr> ah, home at last

[18:16] <PerlJam> Corion: update the MANIFEST probably.

[18:16] <Corion> PerlJam: Good idea!

[18:16] <PerlJam> Corion: (and Makefile.PL)

[18:16] <PerlJam> I'm not certain about the relationship between Makefile.PL and the MANIFEST, but I know it carps at you if there are discrepancies

[18:17] <kungfuftr> MANIFEST is only generated for releases

[18:17] <PerlJam> ah, then updating Makefile.PL should be sufficient.

[18:17] <Corion> Ah. Makefile.PL picks up all src/*.hs automagically

[18:17] <Corion> So svn add should be all there is to do ... AFTER a make test :)

[18:17] <kungfuftr> yup, if you find all the output a pain you can run `make manifest`, just don't commit it

[18:21] <Juerd> Hehehe. A flash intro says "Loaded Inf%"

[18:23] <Corion> And what am I really glad that I wrote all those silly regression tests against -e , -V:foo and -I - by fixing one, I broke the other. Two times. :)

[18:27] <hlen> hey dudes.. still no ==> and <== operators in pugs?

[18:31] <jabbot> pugs - 1344 - '-I foo' now works the same as -Ifoo 

[18:32] <stevan> hlen: no that does not work yet

[18:33] <kungfuftr> yay! auto-smoke is actually working properly from cron now

[18:34] <stevan> kungfuftr++

[18:34] <stevan> if you dont mind the traffic, put the link either on the wiki or in the topic here please

[18:36] *** kungfuftr changes topic to: pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | Auto-smoke: http://kungfuftr.com/pugs-smoke.html | win2k:r1324(187/3474) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[18:36] <Corion> kungfuftr: Have your script somewhere ? Because for a Win32 smoke, cron is not the best solution :)

[18:36] <kungfuftr> Corion: i have a script, not very portable though

[18:37] <Corion> kungfuftr: Ah, it's not in Perl but in shell I gather :)

[18:37] * Corion crosses his fingers.

[18:37] <kungfuftr> nope, it's in perl okay... just calls lots of shell commands... =0)

[18:38] <Corion> I've just tried to switch my DSL provider and hopefully they'll do so in the next few weeks without a hitch ...

[18:38] <Corion> kungfuftr: Hmm - depending on which shell commands, I might have them (cygwin) :)

[18:38] <kungfuftr> Corion: 2 secs

[18:42] <kungfuftr> Corion: http://paste.husk.org/2905?ln=on&tidy=on&hl=on

[18:43] *** Aankh|Clone is now known as Aankhen``

[18:46] *** Corion changes topic to: pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | Auto-smoke: http://kungfuftr.com/pugs-smoke.html | win2k:r1344(187/3478) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[18:47] <Corion> kungfuftr: Your script doesn't use much of shell :) I have svn and (n)make, otherwise, I couldn't build Pugs :))

[18:47] <Corion> kungfuftr: But thanks !!

[18:57] <kungfuftr> np

[18:58] <kungfuftr> might commit it in a bit

[19:01] <Corion> kungfuftr: Do so! You could guess / use Config.pm to get at the correct make program to use, but maybe that's just overkill :)

[19:02] <Corion> *make = sub { system $Config{make}, @_ };

[19:04] <Corion> Can anybody give me usage examples of the -C<backend> and/or the --external switches ?

[19:04] <wilx> Hmm...

[19:06] <wilx> The Pugs Journal page lacks encoding specification thus the Tuesday March 29, 2005 entry and its MetaClass part displays badly by default for me...

[19:07] <Corion> wilx: Do you mean autrijus' journal at use.perl.org ?

[19:08] <wilx> Yup.

[19:08] * PerlJam was starting to boggle that pugs had already attained a journal in the same vein as TPJ  ;)

[19:08] <wilx> Hmm, and it was MetaCategory, not MetaClass.

[19:08] <Corion> Grrr. Just found another bug in command line parsing :(

[19:09] <Corion> (but already wrote a regression test for it :) )

[19:10] <vladtz> wilx: in mozila: View\Character Enconding\UTF-8 will fix that for now.

[19:10] <wilx> Yeah, I know.

[19:10] <vladtz> Could have guessed...

[19:10] <wilx> :)

[19:12] *** domm_ is now known as domm

[19:12] <Corion> WTF ? The docs claim that the sort is stable, but I get elements in reversed (or random?) order... Is there any way to inadverently reverse a list in Haskell ? I'm always chopping of the head of lists and only use foldl() ...

[19:13] <Corion> ... or does foldl() reverse the list ?

[19:13] <kungfuftr> erk... even string eval hack

[19:14] <kungfuftr> s/even/evil/;

[19:16] <Corion> Ah no - just personal stupidity ;)

[19:21] <jabbot> pugs - 1345 - Addition of script to help run smoke gra

[19:41] <jabbot> pugs - 1347 - Test reading a snippet from STDIN

[19:41] <jabbot> pugs - 1346 - -l now emits a fake -e comment

[19:48] <wilx> Hmm...

[19:48] <wilx> I seem to be having chicken/egg problem with Pugs.

[19:49] <wilx> make[1]: Entering directory `/d/WilX/tmp/pugs-svn/ext/Pugs-MakeMaker'

[19:49] <wilx> Perl v6.0.0 required--this is only v5.6.1, stopped at /d/WilX/tmp/pugs-svn/blib/lib/File/Spec.pm line 1.

[19:49] <wilx> BEGIN failed--compilation aborted at /d/WilX/tmp/pugs-svn/blib/lib/File/Spec.pm line 1.

[19:50] <kungfuftr> wilx: HARNESS_PERL=./pugs and PERL6LIB=ext/Test/lib

[19:51] <wilx> I have no previous pugs...

[19:51] <jabbot> pugs - 1348 - Bah... string evals hurt baby rabbits!

[19:55] <Khisanth> no minipugs? :)

[19:55] <wilx> None that I know about :)

[19:55] <Khisanth> or should that be micropugs, I keep mixing the two

[19:56] <Corion> minipugs I think - but Pugs currently is mostly minipugs, as it doesn't have any dynamic linking facility

[19:57] <integral> for perl5, micro- indicates it can be built without a fancy build system, and mini- indicates that it's not got the bells and whistles of a full perl

[19:57] <wilx> Well, how do I build minipugs?

[19:57] <Corion> wilx: No need to - you just need a Perl 5 to build Pugs (in my experience), and Haskell of course :)

[19:58] <PerlJam> wilx: What was the exact sequence of steps that you performed?

[19:58] <PerlJam> wilx: forget that, did you do "perl Makefile.PL && make && make test" ?

[19:59] <Corion> is ?unlink() currently broken ? It doesn't seem to remove files here :)

[20:01] <wilx> I did make clean; perl Makefile.PL; make and the make borks.

[20:01] <PerlJam> wilx: what revision?

[20:01] <wilx> 1348

[20:02] <wilx> Windows.

[20:02] <Corion> wilx: Are you sure you want to use make and not nmake ?

[20:02] <PerlJam> ah.  it's probably a windows-specific problem then.

[20:02] <Corion> wilx: What compiler do you have/use ?

[20:03] <Corion> Oooo - Cartesian products sponsors Perl6 !!! my @tests = ( '-C' ~ any('Parrot','Pugs') ~ ' ' ~ any('-e1',$*PROGRAM_NAME ) # generates all combinations :)

[20:03] <wilx> Mingw, GNU make, GHC 6.4 built with that Nmake.

[20:03] <wilx> Ooops.

[20:03] <wilx> make

[20:03] <wilx> s/Nmake//

[20:04] <Corion> wilx: Hmmm - that sounds consistent. What Perl do you use ? Mingw Perl ?

[20:04] <wilx> Yup.

[20:04] <Corion> wilx: Hmmm... How does your make die ? I use an MSVC7 Perl with nmake and GHC6.2 (binary from haskell.org) and all is fine

[20:05] <theorbtwo> BTW, Corion, 6.2 is no longer supported.  (It might work anyway, but we don't support it.)

[20:05] <theorbtwo> Makefile.PL should probably warn you of that.

[20:05] <Corion> theorbtwo: Ugh :) So I gotta upgrade soonish :) But it still works :))

[20:06] <jdv79> shouldn't the new version of CGI be under modules/ ?

[20:07] <Corion> Heh. @tests is 3, but for @tests -> $test iterates over all 12 combinations. Is there a way to create the cartesian product in @tests without having to iterate over it?

[20:08] <Corion> Hmmm - my bug lies elsewhere, as usual :)

[20:11] <jabbot> pugs - 1349 - Added test for -C compiling option

[20:14] <rgs> stevan: your next mission is to port blosxom to pugs.

[20:16] <Limbic_Region> rgs - I believe stevan mentioned several times that CGI isn't his gig ;-)

[20:16] <rgs> Limbic_Region: well, I might try it, then.

[20:16] <Limbic_Region> I have sent an email to James Freeman, the author of CGI::Simple asking if he is interested in getting involved

[20:17] <rgs> pugs currently lacks string substitutions, right ?

[20:21] <kungfuftr> yup

[20:23] <Corion> Some of the examples do not compile, for example pugs -CParrot examples/junctions/any-any2.p6 - I leave them as failing tests in my test for the -C switch

[20:31] <jabbot> pugs - 1350 - Compile examples with Parrot and Pugs, T

[20:35] <kungfuftr> rightio, hope the new css for the test graph is a little more readable and less straining on the eye

[20:36] <theorbtwo> Oh?

[20:37] <kungfuftr> theorbtwo: check the auto-smoke url above

[20:37] <kungfuftr> not a huge amount of difference tbh

[20:38] <theorbtwo> I like it.

[20:40] <kungfuftr> main difference is to use fonts designed for screen readin

[20:41] <kungfuftr> anyways... pub

[20:41] <stevan> rgs: pugs has limited string substitution actually

[20:41] <jabbot> pugs - 1351 - Add @ARGS to script read from STDIN

[20:43] <theorbtwo> I wish I knew what to do about that firefox bug.  I haven't the foggiest idea where to start looking if it's a known bug, or who to point it out to who would know.

[20:44] <kungfuftr> theorbtwo: which one?

[20:44] <rgs> stevan: wow

[20:45] <stevan> rgs: s:perl5/// is supported

[20:45] <rgs> ah, with pcre

[20:45] <Corion> theorbtwo: What Firefox bug?

[20:45] <stevan> and s:perl5:g/// is supported, but limited

[20:45] <stevan> yes with pcre

[20:46] <theorbtwo> Look at that smoke with firefox.

[20:46] <theorbtwo> Note that some cells have the text show in them.

[20:46] <stevan> revdiablo: blosxom,.. we need to port  FileHandle, File::Find, File::stat, Time::localtime, and more of CGI first :)

[20:46] <theorbtwo> Now view source, and compare that with the source you see from wget.

[20:47] <stevan> s/(re)vdiablo/$1/

[20:48] <kungfuftr> theorbtwo: refresh (it's got to do with how quickly the css can be applied to said HTML)

[20:48] <theorbtwo> Oooh, interesting.

[20:49] <Khisanth> hrm

[20:49] <theorbtwo> I've been dealing with file:/// URLs on that mostly, and thus didn't see changes from reload to reload.

[20:49] <Khisanth> stevan: wouldn't FileHandle require objects?

[20:49] <stevan> Khisanth: yes, so it would all have to be procedural at this point

[20:49] <Corion> To those working on the -Cbackend compilers - should the compile tests for the examples/*.p6 go into a separate test or should they stay with my generic tests for the -C switch?

[20:51] <kungfuftr> PUB

[21:00] <Limbic_Region> theorbtwo - is Jess still awake?

[21:01] <theorbtwo> Aye.

[21:02] <castaway> more or less

[21:02] <Limbic_Region> looking for a specification of ANSI SQL

[21:02] <castaway> any particular one?

[21:02] <Limbic_Region> toy project - can't seem to find anything other than SQL-92

[21:03] <Limbic_Region> yes, 99 preferably

[21:03] <castaway> sec

[21:05] <castaway> http://desert-island.dynodns.net/SQL/ansi-iso-9075-1999.zip

[21:05] <castaway> (but you never heard it from me..)

[21:06] <castaway> the BNF is in part 2

[21:06] <Limbic_Region> why - is it not supposed to be publicly available?

[21:06] <castaway> costs money @ISO

[21:06] <castaway> $18 or so if you feel like paying ;)

[21:07] <Limbic_Region> oh - well, then as soon as I am finished please make the link go away since this channel is logged and publicly available

[21:07] <castaway> so tell me when you're done

[21:07] <castaway> eep

[21:07] <theorbtwo> The ISO and ANSI put out non-free standards.

[21:07] <castaway> well, I gathered it from elsewhere ont' net too

[21:08] <Limbic_Region> I found the 92 specification publicly in several places

[21:08] <castaway> yup. that one was

[21:08] <castaway> drafts of this are about too, but not easy to find

[21:09] <Limbic_Region> done - thanks!

[21:10] <castaway> welcome

[21:10] <castaway> g'night

[21:11] <Limbic_Region> is there no part 3?

[21:11] <castaway> I only have whats there, tisnt all

[21:12] <Limbic_Region> gotcha - 2 is probably all I need anyway - thanks again and sweet dreams

[21:12] <castaway> thanks.

[21:15] <jhorwitz> leave #perl6

[21:15] <jhorwitz> sorry.  :)

[21:41] <jabbot> pugs - 1353 - have to commit to make other changes

[21:41] <jabbot> pugs - 1352 - ArgParse.hs - minor changes

[21:48] <Corion> lightstep: Thanks for fixing ArgParse.hs :) I still haven't grasped the finer details of Haskell (and forgot to clean up my global exported subroutines :) )

[21:48] <Corion> Oooo - concatMap() - good to know about it :)

[21:49] <lightstep> i'm trying to abstract unpackOption.? now

[21:51] <jabbot> pugs - 1355 - changed CGI::Pugs to CGI

[21:51] <jabbot> pugs - 1354 - deleteing the old CGI

[21:51] <Darren_Duncan> New question: why was the CGI.pm port put in /ext rather than /modules?  Is it required by Pugs to run?

[21:54] <Darren_Duncan> New question: why was the CGI.pm port put in /ext rather than /modules?  Is it required by Pugs to run?

[21:54] <Darren_Duncan> repeated for the newcomer

[21:55] <stevan> Darren_Duncan: the ext/ directory is for modules which work now

[21:55] <stevan> the modules directory is for one which will work later

[21:55] <Darren_Duncan> that's the only distinction?

[21:56] <stevan> Darren_Duncan: yes, pretty much

[21:56] <Darren_Duncan> so when /modules items work, they will move over?

[21:56] <stevan> Darren_Duncan: it is all pretty ad-hoc for now, hopefully by that point we will have FreePAN or something like it

[21:56] <stevan> neither ext/ or modules/ is ideal

[21:56] <Darren_Duncan> meanwhile, we just need to be internally consistent

[21:57] <stevan> Darren_Duncan: yes, that will make it easier to split off when the time is right

[21:57] <Darren_Duncan> also, does Pugs have object support now?  CGI.pm was object oriented

[21:57] <stevan> Darren_Duncan: nope

[21:57] <stevan> CGI.pm is just a proof of concept right now, and more like the CGI.pm procedural interface 

[21:58] <Darren_Duncan> I understand ... it just sounded like a complete port

[21:58] <stevan> (although I am not going to do all that HTML stuff, people should use templates)

[21:58] <Darren_Duncan> is what it was advertised as

[21:58] <PerlJam> stevan: as long as it doesn't inherit all of the cruft from perl5's CGI.pm I'll be happy

[21:58] <stevan> Darren_Duncan: nothing is really complete yet :)

[21:58] <stevan> PerlJam: my intent right now is proof-of-concept/curiosity

[21:59] <stevan> PerlJam: but future plans are more akin to CGI::Simple or CGI::Lite

[21:59] <Darren_Duncan> As I recall, the documentation in CGI.pm itself said it should be deprecated in favor of the CGI::* modules, and has said so for a long time; therefore, why port it?

[21:59] <PerlJam> stevan++ sanity!

[21:59] <stevan> Darren_Duncan: its not really a port, when it comes down to it

[21:59] <stevan> its a brand new CGI module for a brave new world ;)

[21:59] <PerlJam> It's CGI.pm the way it should have been from the beginning only in perl6?

[22:00] <stevan> PerlJam: yup :)

[22:00] <Darren_Duncan> that's a nice thought

[22:01] <stevan> Darren_Duncan: honestly it should probably go into examples/ but examples/ implies it will never be useful outside that context

[22:01] <Darren_Duncan> I agree

[22:02] <stevan> and while it is currently very limited by Pugs's own limitations, it can still be useful

[22:02] <Darren_Duncan> examples/ implies not serious

[22:02] <stevan> for those who like to live on the bleeding edge :)

[22:02] <Darren_Duncan> I haven't checked yet, but is there a way to write Perl 6 code that talks to C libraries?

[22:02] <Darren_Duncan> under Pugs

[22:03] <PerlJam> Darren_Duncan: not that I know of.

[22:03] <stevan> Darren_Duncan: Totally OT, it looks like I am going to need L::KT for my next project

[22:03] <Darren_Duncan> stevan, do you have any further questions on it?

[22:03] <stevan> Darren_Duncan: actually look at the SHA stuff, that is C -> Haskell, although not yet exposed to perl6 though (i think)

[22:03] <Darren_Duncan> hopefully the P5 version corresponding to whats in /modules will be up today

[22:04] <stevan> Darren_Duncan: not yet, but when I start development I surely will 

[22:04] * Corion reads the Parsec documentation and likes it. Is Parsec used in Pugs somewhere?

[22:04] <Darren_Duncan> I asked because ideally once object support is in place, I will want to talk to actual databases, and some of their interfaces are in C

[22:04] <Darren_Duncan> such as SQLite 3

[22:05] <Corion> Oh. Grep tells me it's used everywhere :)

[22:05] <stevan> Corion: I think so,.. check src/Internals.hs it does most of the importing

[22:05] <lightstep> Corion, the whole Rule system is a ripping of Parsec. it isn't imported anywhere, just copied

[22:05] <Corion> lightstep: Ah :)

[22:06] <stevan> Darren_Duncan: look at http://svn.perl.org/perl6/pugs/trunk/modules/SHA1/

[22:06] <Darren_Duncan> looking ...

[22:06] <Corion> I'll port the command line parser to Parsec in the next round I guess. It's currently a mess :(

[22:06] <Corion> But not tonight :)

[22:06] * Corion goes to sleep.

[22:06] <PerlJam> Corion: you know ... pugs really could use a perl6 rules parser ...  ;-)

[22:06] <stevan> I think that is C binding to Haskell, then the start for inline Haskell support in Pugs

[22:06] <Corion> PerlJam: Sure - later :)

[22:06] <Corion> . o O (zzzzZZZZ)

[22:07] <Khisanth> PerlJam: isn't that what PGE is for?

[22:07] <stevan> Darren_Duncan: ingy is the guy to talk to regarding all this

[22:07] <Darren_Duncan> okay

[22:07] <PerlJam> Khisanth: There's nothing that says we can't have two parallel efforts to achieve the same goal is there?

[22:09] <PerlJam> PGE is written in C and can be bound into pugs to get perl6 rules in pugs.  Or, using Parsec, a perl6 rules parser could be written directly in haskell and pugs can get them that way.

[22:09] <PerlJam> I thikn both are healthy efforts.

[22:09] <Darren_Duncan> so it looks like, if I want to talk to C the way pugs is now, I write the interface in Haskell, and then the Perl 6 module just does an import

[22:09] <Darren_Duncan> or so SHA1 seems to work

[22:10] <Darren_Duncan> still, I'll wait for working objects before I try anything of the sort

[22:11] <PerlJam> Darren_Duncan: why wait when you can create?  ;)

[22:11] <Darren_Duncan> priorities

[22:11] <Darren_Duncan> the Perl 5 versions aren't even alpha yet

[22:13] <Darren_Duncan> I mean the stuff I haven't even started porting to perl 6 yet ... (SQL::Routine IS alpha, LKT is Released)

[22:13] <Darren_Duncan> everything else is prealpha

[22:47] *** PerlJam is now known as SexyThang

[22:47] *** SexyThang is now known as PerlJam

[23:01] <jabbot> pugs - 1356 - factoring ArgParse.hs a bit

[23:20] <jdv79> stevan, does IOC prereq anything that has xs involved?

[23:20] <kungfuftr> bah... heartburn sucks

[23:22] <stevan> jdv79: nope, pure perl

[23:22] <jdv79> certain?

[23:22] <jdv79> that would be perfect

[23:22] <stevan> jdv79: actually it uses Scalar::Util, which uses C

[23:23] <stevan> jdv79: but IIRC that is pretty portable

[23:29] <kungfuftr> Scalar::Util is a box of ultimate voodoo

[23:29] <kungfuftr> well, sections of it are anyways

[23:30] <stevan> kungfuftr: I am pretty sure I only use blessed(), is that portable? 

[23:35] <kungfuftr> well, how do you mean 'portable'?

[23:38] <kungfuftr> erk, huge amount of parse failure -esque things happening from the last automated smoke here

[23:39] <lightstep> my bad

[23:39] <lightstep> (probably, i touched ArgParse)

[23:39] * kungfuftr checks logs

[23:40] <kungfuftr> dunno, lot of haskell code changes from the previous build

[23:41] <jabbot> pugs - 1357 - CGI work: added limited url_encode/decod

[23:56] <crysflame> Scalar::Util is core, isn't it?

[23:57] <Limbic_Region> yes, since 5.007003

[23:57] * Limbic_Region should really install Module::CoreList instead of looking at the source on CPAN everytime

