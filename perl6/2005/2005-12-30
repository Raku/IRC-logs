[01:47] <GammaRay> can := bind to lexical variables(ones created w/ my)?

[01:50] <audreyt> yes.

[01:51] <audreyt> ?eval my $x; $x := 7; $x = 8;

[01:51] *** evalbot_8500 is now known as evalbot_8501

[01:51] <evalbot_8501> Error: Can't modify constant item: VInt 7 

[01:51] <Khisanth> heh

[01:51] <audreyt> (as it should be)

[01:51] <Khisanth> that "Can't modify constant item" thing seems to come up a lot

[01:51] <audreyt> it's roughly equivalent to "let x = 7 in writeTVar x 8"

[01:52] <Khisanth> in very non DWIMy ways

[01:52] <audreyt> yeah, because p6 defaults on pass-by-ref but marks the refs as immutable

[01:52] <audreyt> s/immutable/readonly/

[01:52] <audreyt> that's perhaps the largest B&D change

[01:53] <audreyt> it does make nasty $_[0]-related bugs go away, though.

[01:53] <Khisanth> err it's actually specced that way?

[01:53] <Khisanth> I recall trying to do something like @foo = (1..10) and then not being allowed to modify @foo

[01:54] <audreyt> er no, I mean just the function params

[01:54] <audreyt> ?eval @foo = (1..10); @foo = (7..10); @foo[1]=5;

[01:54] <evalbot_8501> Error: Undeclared variable: "@foo" 

[01:54] <audreyt> ?eval my @foo = (1..10); @foo = (7..10); @foo[1]=5;

[01:54] <evalbot_8501> \5 

[01:54] <audreyt> all these should be fine

[01:56] <Khisanth> ?eval  my @foo = (1..10); @foo >>++;

[01:56] <evalbot_8501> Error: Can't modify constant item: VInt 1 

[01:57] <audreyt> ?eval my $x = 1; my @foo := $x;

[01:57] <evalbot_8501> \1 

[01:57] <audreyt> ?eval my $x = 1; my @foo := $x; @foo >>++;

[01:57] <evalbot_8501> Error: Hyper OP only works on lists 

[01:57] <audreyt> ?eval my $x = 1; my @foo := [$x]; @foo >>++;

[01:57] <evalbot_8501> Error: Can't modify constant item: VInt 1 

[01:57] <audreyt> that... is definitely a bug.

[01:58] <audreyt> ok, I'll do _proper_ container type implementation now and fix this for good

[01:59] <Khisanth> w00t! :)

[01:59] * audreyt hacketh

[02:27] <stevan_> audreyt: ping

[02:34] <audreyt> stevan_: pong

[02:35] <stevan_> audreyt: how go the containers :)

[02:35] <stevan_> anything I can help with

[02:36] *** stevan_ is now known as stevan

[02:40] <audreyt> stevan: I've just waken up

[02:40] <audreyt> probably going to model scalars first

[02:40] <audreyt> and make another surface language for PIL2

[02:41] <stevan> ok

[02:41] <audreyt> that has assignments and Code closures

[02:41] <stevan> ah

[02:41] <stevan> one step closer to p6?

[02:44] <audreyt> yeah, the surface syntax should be legal p6

[02:44] <stevan> cool

[02:44] <audreyt> but a rather constrained subset

[02:44] <audreyt> sprinkled with MY::<$foo>.FETCH calls

[02:45] <audreyt> etc

[02:45] <audreyt> that makes all operations explicit

[02:45] <stevan> ah

[02:45] <audreyt> as usual there will be sugar for writers

[02:45] <stevan> like P6-ObjectSpace

[02:45] <audreyt> not sure how much sugar we want at this point

[02:45] <audreyt> yeah

[02:45] <stevan> sugar rots your mental teeth :)

[02:45] <audreyt> heh

[02:45] <stevan> well I am trying to work out all the p6 boxed types

[02:45] <audreyt> also thinking using Text.Parser.Rule for the minilang

[02:46] <audreyt> because with that we get Grammar for free

[02:46] <stevan> yes

[02:46] <stevan> thats a very good idea :)

[02:46] <audreyt> and bootstrapping is much easier

[02:46] <audreyt> and now with sane error reporting (instead of silent failure that's impossible to debug), it seems even attractive

[02:46] <stevan> cool

[02:47] <stevan> oh,.. speaking of errors I need to get you a role error object

[02:47] <audreyt> yup

[02:47] <stevan> how about a nul opaque with two attrs; methods, attrs

[02:47] <audreyt> that will do for now

[02:48] <stevan> I will give you the method name, the first time I saw it, and the role which conflicts with it

[02:49] <stevan> I will figure out the details of the structure later

[02:49] <stevan> oh,.. re: Scalar

[02:49] <stevan> are you going to have it inherit from Object?

[02:49] <stevan> or do you want to have breakfast first, then talk :)

[02:51] <audreyt> hm

[02:51] <audreyt> Scalar is going to inherit from Object

[02:51] <audreyt> and mix in container role

[02:51] <audreyt> I think.

[02:51] <stevan> what about Tieable?

[02:51] <audreyt> we'll worry about Tieable later.

[02:51] <stevan> ok

[02:51] <audreyt> i.e. not for today.

[02:51] <stevan> cool (it is on my list of Boxed-type-things)

[02:52] <stevan> hey svnbot6 

[02:52] <audreyt> :)

[02:52] <audreyt> ok... let me try for 15mins if I can turn the current minilang into Rules

[02:53] <stevan> audreyt: do we need AUTOLOAD for Scalar? or will there be an implicit FETCH?

[02:53] <audreyt> then I'll box up Integer as "Int" to agree with spec and experiment with autoboxing nonexposed types

[02:53] <audreyt> stevan: the desugarer will add a FETCH call.

[02:53] <audreyt> you need not worry about that

[02:53] <stevan> cool

[02:53] * stevan doesnt like AUTOLOAD

[02:53] <audreyt> neither do I

[02:54] <stevan> audreyt: cool,.. I will continue to dig through AES for types

[02:54] <audreyt> ?eval my @a = (1..10).reverse; @a.elems

[02:54] *** evalbot_8501 is now known as evalbot_8502

[02:54] <evalbot_8502> 10 

[02:54] <gantrixx> Will Perl6 still use XS to interface with C/C++ code?

[02:54] <stevan> gantrixx: hopefully not

[02:55] <audreyt> gantrixx: no. something line Inline::C or NCI is far more likely.

[02:55] <audreyt> use c:stdio;

[02:55] <stevan> or just writing Parrot extensions of some kind

[02:55] <audreyt> printf("or maybe this")

[02:55] <SamB> audreyt: Inline::C needs to do its dirty work somehow

[02:55] <stevan> for the parrot version that is ;)

[02:55] <audreyt> SamB: yeah and that's going to be runtime specific.

[02:55] <audreyt> SamB: on a language level though it makes sense to be a unified interface.

[02:56] <gantrixx> Well it's been a while since I fooled around with Perl6

[02:56] <stevan> Haskell is the new XS :P

[02:56] <audreyt> heh :p

[02:56] <SamB> shouldn't the standardization be done for FFI, not inlining?

[02:56] <gantrixx> I've done a lot of work in Perl5, so I'm a fan of Perl, however Python is gobbling up a lot of market share

[02:57] <SamB> that would probably be simpler...

[02:57] <audreyt> see this for NCI: http://svn.perl.org/parrot/trunk/runtime/parrot/library/YAML/Parser/Syck.pir

[02:57] <gantrixx> I even had a client that was interested in using Perl6 already, but had to tell him it's not ready

[02:57] <audreyt> SamB: I think inlining should be part of FFI, as Inline::Python and Inline::Perl5 is and Inline::Tcl all uses it

[02:57] <SamB> eh.

[02:57] <stevan> gantrixx: yes, we missed this christmas,.. maybe next one

[02:57] <SamB> I think inlining would make more sense as a library built on FFI primitives.

[02:58] <audreyt> SamB: I agree. all I'm saying is it should be part of standard library and part of the standard.

[02:58] <audreyt> implementation stragegy is something else :)

[02:58] <audreyt> strategy, even

[02:59] <SamB> part of the standard lib, sure. but shouldn't be the lowest standardized level ;-)

[02:59] <gantrixx> how long before ActiveState has a Perl6 distribution and Redhat is including it in there distro?

[02:59] <audreyt> SamB: I think we... are in vehement agreement

[02:59] <SamB> heh

[03:00] <audreyt> gantrixx: instead of RedHat... may I interest you in Mandriva :)

[03:00] <gantrixx> no, not really

[03:00] <audreyt> http://rpm.pbone.net/index.php3?stat=3&search=pugs&srodzaj=3

[03:00] <audreyt> is the .rpm not compatible? hmm

[03:00] <gantrixx> I focus on just 1 or 2 distros since that is what I use in the corporate world

[03:01] <audreyt> also, instead of ActivePerl, there's PxPerl

[03:01] <SamB> I guess I don't think of libraries as standard so much as de-facto standard...

[03:01] <audreyt> http://www.codeproject.com/tools/pxperl.asp

[03:01] <gantrixx> OK, I guess the question should be, "how long before Perl6 is mainstream"

[03:02] <gantrixx> on the windows platform, every company I know uses ActiveState Perl

[03:02] <audreyt> gantrixx: my best guesstimate is "sometime around 2007" 

[03:02] <audreyt> http://pugs.blogs.com/photos/visiolization/timeline.html

[03:03] <gantrixx> hmmmm.....do you think Perl will even be relevant by then?

[03:03] <gantrixx> I'm getting more and more of a call for Python in place of Perl these days

[03:04] <audreyt> well, if we did ship something that compiles perl6 to perl5 in 2006, that's going to help a lot

[03:04] <audreyt> and I'm fine with people using python or ruby meanwhile :)

[03:05] <gantrixx> and after Perl has lost that market share to Python and Ruby, do you really think they will come back?

[03:05] <audreyt> I have no idea. :)

[03:05] <stevan> gantrixx: Perl 6 is pretty much a new langauge,.. I have no fear of it's ability to compete

[03:05] <audreyt> probably because my brain doesn't work in market share terms

[03:05] <audreyt> our market share is currently 0%

[03:06] <audreyt> (rounding off fractional insignificant points)

[03:06] <gantrixx> Oh I understand the challenge, it is a complete rewrite.  An evolution.

[03:06] <audreyt> so it can't go anywhere but up!

[03:06] * stevan thinks market shares are basically not fun, so in Pugs they are optimized away 

[03:06] <audreyt> yup

[03:06] <gantrixx> and I wish there all the effort that was going into Python develompent was going into Perl6

[03:07] <audreyt> oh, but they are

[03:07] <gantrixx> but more than likely, the guy is going to move on to a new girlfriend, and just because his ex lost weight doesn't mean he will re-unite

[03:07] <audreyt> we stole^Wlifted a _lot_ of ideas from PyPy and IronPython

[03:07] <stevan> gantrixx: we have stolen a LOT of their ideas :)

[03:07] <gantrixx> good

[03:07] <gantrixx> very good

[03:07] <stevan> gantrixx: but if that ex was his true love,.. he might :)

[03:07] <gantrixx> but it can't be stolen, they are community ideas

[03:08] <audreyt> ..and this is more like the daughter of his ex ;)

[03:08] <SamB> hmm. I feel like I ought to try PyPy ought.

[03:08] <SamB> er, out.

[03:08] <gantrixx> yes, but waiting for her to be of legal age is a bit frustrating

[03:09] <audreyt> lol

[03:09] <gantrixx> I've been trying to convince the lugradio guys to do a piece on Perl6.  I figure if a little bit more of a buzz can be generated, maybe more people will get behind it.

[03:10] <stevan> gantrixx: we already have 100+ commiters :)

[03:10] <gantrixx> what are commiters?

[03:10] * audreyt ponders posting this exchange on her journal

[03:10] <SamB> well, in theory I am one.

[03:10] <stevan> people who can commit to the pugs svn repo 

[03:11] <gantrixx> Oh, well I'll be unemployed in March, maybe I can write some modules

[03:11] <stevan> gantrixx: thats the spirit! :)

[03:11] <SamB> I only did a few, and a large percentage of those broke things for people with no Linker.c implementation for their platform...

[03:11] <SamB> this may be related to the fact that I do not know perl

[03:11] <gantrixx> And I am in a position with my current contract to push for the use of Perl6, if it were available.

[03:12] <stevan> gantrixx: I am in a similar position

[03:13] <gantrixx> that's the problem with open source, it's all done in spare time

[03:13] <stevan> we are instead adopting p5 technologies which will port to p6 easily

[03:13] <gantrixx> corporations take from open source, but don't give back

[03:13] <stevan> gantrixx: thats not always true

[03:13] <audreyt> gantrixx: want a commit bit? :)

[03:13] <gantrixx> when was the last time you heard of a company hiring a developer to simply contribute for all that they have taken

[03:13] <SamB> the great thing about open source is also that it is often done in spare time

[03:13] <stevan> there is a lot of corprate sponsorship behind linux these days

[03:14] <stevan> and I do much of my pugs work on company time with full permission of my boss

[03:14] <SamB> so, you are more motivated to do something nice

[03:14] <gantrixx> who do you work for?

[03:14] <audreyt> bbiab

[03:14] <stevan> gantrixx: we are a small consulting firm, and we build LAMP apps for corporate clients

[03:15] <gantrixx> uhg, PHP

[03:15] <stevan> no perl

[03:15] <stevan> no PHP

[03:15] <gantrixx> oh very good then

[03:15] <SamB> why would you hire someone just for that? if you didn't think you would benefit from what they did, directly or otherwise?

[03:15] <gantrixx> I never understood why PHP existed when we have mod_perl

[03:16] <stevan> our clients know that they are getting high quality software with little or no lisence cost,.. and they understand that in order to sustain that we open source as much of our stuff as possible

[03:16] <stevan> gantrixx: PHP has it's place

[03:16] <stevan> its an ugly dark place,..  but it has it's place ;)

[03:16] <SamB> and that is... nightmares?

[03:17] <gantrixx> I view it this way, if a company uses SVN instead of ClearCase to save USD $100K, maybe they should at least donate $30K or so to the development of SVN

[03:17] <stevan> SamB: if you need it quick, and cheap,.. and maintaince is not a concern,.. then PHP is for you

[03:17] <SamB> well, if they use SVN, they are likely to gain from improvements

[03:17] <stevan> gantrixx: well, we are too small to give $$, so we give time

[03:18] <SamB> stevan: $$ == time!

[03:18] <stevan> I think this is a fair trade

[03:18] <gantrixx> Hmmm....I'm very pro-open-source, but ClearCase is far more mature than SVN

[03:18] <stevan> SamB: yes very true :)

[03:18] <SamB> only if you give time, you don't need to pay more money

[03:18] <SamB> you just get less other stuff for it

[03:18] <gantrixx> but ClearCase is often much more than you really need

[03:19] <stevan> SamB: what "other stuff"?

[03:19] <gantrixx> I agree, if you allow an employee to spend 20% of his time giving back to the open-source community, that is a great contribution

[03:19] <stevan> gantrixx: it makes business sense too

[03:19] <stevan> we use DBI on *every* project

[03:20] <stevan> so my boss didnt hesitate to let me do some Phalanx work on DBI

[03:20] <gantrixx> yes, but business people don't always see the business sense in it....they are a little more quarterly report oriented

[03:20] <stevan> gantrixx: yes, on high levels that is true, but some small managers do understand the benefits 

[03:21] <SamB> okay.

[03:21] <SamB> so you get less money. maybe.

[03:22] <stevan> gantrixx: and there are many OSS success stories out there now too 

[03:23] <stevan> SamB: less money? how? I am not understanding

[03:23] <gantrixx> yes, I agree.  OSS is now being embraced by the corporate world

[03:23] <scook0> audreyt: (when you get back)  I'm looking to get back into Pugs/Haskell after months of being slack; any TODOs you can recommend?

[03:23] <gantrixx> however, we need to take it to the next stage where corporations give back too

[03:23] <SamB> stevan: well.

[03:23] <SamB> if you assume that coding non-OSS directly results in you getting money.

[03:24] <stevan> gantrixx: many business people are starting to realize that infastructure software (OS, web servers, etc) are not profitable products

[03:24] <gantrixx> To be honest, I don't think software is a profit product

[03:24] <SamB> but, there is this wonderful thing about writing patches.

[03:24] <SamB> other people are always improving on them

[03:24] <gantrixx> like Eric Raymond said, "it's widget frosting"

[03:24] <stevan> gantrixx: me either :) but I am a consultant

[03:25] <gantrixx> it basically is a tool to allow you to deliver/serve your core product better

[03:25] <stevan> SamB: ahh, I see, we charge by the project usually,.. and that cost usually includes work that gets open sourced

[03:25] <SamB> ah

[03:25] <SamB> yeah. makes sense.

[03:25] <stevan> gantrixx: dont forget that contributing to non-profit orgs are tax deductable

[03:25] <SamB> but lots of peoples thinking doesn't ;-)

[03:26] <stevan> SamB: :)

[03:26] <SamB> stevan: even contributions of labour?

[03:26] <gantrixx> so I can put an hourly rate to the time I spend contributing to OS projects and deduct that from my taxes?

[03:26] <stevan> SamB: we charge our clients for the final delivered product

[03:26] <gantrixx> will you guys still chat with me when I'm in the federal jail?

[03:27] <SamB> gantrixx: that depends

[03:27] <stevan> if in order to build that product we build some OSS first, then it all works out

[03:27] <SamB> do you get to use IRC when you are in jail?

[03:27] <stevan> gantrixx: ask your accountant,.. you might be able to 

[03:27] <SamB> if so, you'd probably get out early for using too much bandwidth

[03:27] <stevan> seriously

[03:27] <stevan> contributing to charity is deductable

[03:29] <stevan> SamB: but we tend to subcontract, so we work with technical managers who understand all this :)

[03:30] <stevan> plus I sell in the "many eyes find more bugs" part of OSS pretty hard ;)

[03:32] <stevan> gantrixx: http://www.tgci.com/magazine/02spring/tax.asp :)

[03:33] <SamB> I suppose what you should sell is the part where they don't have to maintain the code after

[03:33] <stevan> SamB: we tend to maintain the code actually (long term contracts ++)

[03:33] <SamB> hmm.

[03:33] <SamB> so they won't have to pay you as much to maintain it, then?

[03:34] <gantrixx> thanks stevan, I'll talk to my accountant about it

[03:34] <stevan> gantrixx: worth a try :)

[03:34] <SamB> if it doesn't work, you can officially announce that the taxmen don't think time == money

[03:35] <stevan> SamB: it all depends,. every case is different

[03:35] <stevan> and we rarely can OS the bulk of the app, only modules we use within it

[03:36] <stevan> in fact all my CPAN modules were at some point parts of an application 

[03:36] <stevan> or were written to anticipate a need in a particular project

[03:41] <stevan> and like I said,.. we discuss this with our clients, and explain to them the benefits of OSS and that if we build thier application out of reusable parts, it makes it easier for us to extend/refactor/enhance the application to suit their needs

[03:42] <stevan> but as a business we favor long term involvement/partnerships over quicky projects  

[03:48] <avar> mm

[03:48] <avar> will the perl6 perl6 compiler be fast enough so that you could write stuff like Digest::MD5 in pure perl?

[03:49] * SamB hands avar a blocked MVar

[03:49] <SamB> that is, an empty MVar

[03:49] <stevan> avar: sure, if its compiled well

[03:50] <stevan> if you use unboxed types, and your compiler is agressive in it's optimizations its quite possible

[03:59] <stevan> audreyt: ping (when you have a second)

[04:56] <azuroth> is there some way to say, you've got a class, and you want it to implement SomeInterface, but you want it to implement it through a member function so that $b.foo() is like method foo() {$member.foo()}

[05:10] <tewk> stevan: I've got some spare tuits, what needs work with respect to the mini-language?

[05:10] <SamB> tewk: are they round ones?

[05:11] <tewk> SamB: yep :)

[06:21] <aufrank> hello!

[06:22] <wolverian> good morning 

[06:23] <aufrank> mind if I ask a question about building pugs from a svn checkout?

[06:24] <wolverian> ask away 

[06:24] <aufrank> I'm on OSX

[06:25] <aufrank> I've got ghc 6.4

[06:25] <aufrank> I built happy

[06:25] <aufrank> I built hsx

[06:25] <aufrank> I built hs-plugins

[06:25] <aufrank> but when I do perl Makefile.pl for pugs

[06:27] <aufrank> it tells me that I need to ranlib on haskell-exts

[06:27] <aufrank> ld: archive: /usr/local/lib/haskell-src-exts-0.2/libHShaskell-src-exts-0.2.a has no table of contents, add one with ranlib(1) (can't load from it)

[06:29] <aufrank> oops

[06:29] <aufrank> lemme try ranlib on that file

[06:29] <aufrank> that's a good first step, eh?

[06:29] <azuroth> teehee

[06:30] * aufrank crosses fingers

[06:32] <aufrank> it's never until you've asked the quesiton that makes you look like an idiot that you realize you're an idiot ;)

[06:32] <aufrank> s/question/quesiton/

[06:33] <aufrank> well, good thing I signed on

[06:34] <aufrank> otherwise I wouldn't've noticed I'm a dolt :)

[06:34] <wolverian> phew, it's good helping people :)

[06:37] <aufrank> you're my hero!

[06:41] <aufrank> oh man, look, there it is on google too!

[06:41] <aufrank> I rule!

[06:42] <azuroth> what is?

[06:44] <aufrank> instructions for building on OSX that say "I don't know why, but I had to do sudo ranlib /usr/local/lib/plugins-0.9.10/libHSplugins-0.9.10.a"

[06:44] <aufrank> by "I rule!" I meant "look how silly I am"

[06:50] <svnbot6> r8503 | tewk++ | Makefile.PL - added support for parrot_config.pir

[06:50] <svnbot6> r8503 | tewk++ |   The parrot team has renamed all imc references to pir

[07:20] <gaal> morning

[07:20] <obra> morning

[07:25] <gaal> audreyt: got a minute for some FFI questions?

[07:46] <aufrank> hi again!

[08:22] <aufrank> is there a way to specify the location of my readline libs on the command line after 'perl Makefile.pl'?

[08:24] <tewk> aufrank: what error are you getting?  I think Makefile.pl just checks to make sure the haskell readline works.

[08:25] <tewk> You may need to go up the stack and make sure your ghc build knows where readline is.

[08:26] *** integral_ is now known as integral

[08:28] <aufrank> ok

[08:28] <aufrank> I didn't build that one from source, but I guess I might have to if I want to add a non-standard directory for includes

[08:29] <aufrank> the error I got was "ld: can't locate file for: -lreadline"

[08:32] <tewk> Your on OSX right have you tried setting the OS X eqiv of LD_LIBRARY_PATH?  I think it is DYLIB_somthing

[08:35] <aufrank> I know I had that set before... lemme see if it's still in my .profile

[08:36] <aufrank> I think this is it: export DYLD_LIBRARY_PATH=/opt/svn-1.3.0-rc4/lib:/sw/lib/:$DYLD_LIBRARY_PATH

[08:43] <aufrank> that's a line from my .profile, and the readline libs are in /sw/lib.  so I think they're in the path for ld.

[08:45] <tewk> Well that was just a suggestion off the top of my head.  I don't have happy, hsx or hs-plugins on my OS X box, just on my debian linux box.

[08:45] <tewk> wq

[08:46] <aufrank> it's no big deal

[08:46] <aufrank> just trying to iron out as many kinks as I can in this install

[08:47] <aufrank> was the wq meant for a vim session?

[08:47] <tewk> I have a /usr/include/readline.h and /usr/lib/libreadline.dylib on OS X, not sure where they came from though, I've got a lot of stuff on this box.

[08:49] <aufrank> yeah, it's tempting to just uninstall the fink libs and build them myself in /usr/local

[08:49] <tewk> aufrank: yep  I keep irc on a seperate monitor and OS X doesn't have a good focus follows mouse solution yet :)  I'm still going through X on linux withdraws :)

[08:49] <aufrank> heh

[08:50] <aufrank> I did the same thing once, but unfortunately it was a password that carried over into an IM

[08:51] <aufrank> anyway, I think I need to leave the fink readline libs in there because the fink packages are linked against them

[08:51] <aufrank> and I don't know if multiple versions can live happily in different places on the same box

[08:51] <tewk> Multiple version at different places shouldn't be a problem.

[08:52] <tewk> I've got fink, darwinports and a system version of readline

[08:52] <aufrank> good to know

[08:52] <aufrank> I think I'm going to have to deal with that tomorrow, though

[08:52] <aufrank> time for bed

[08:53] <aufrank> actually, do you have a committer bit?

[08:53] <tewk> yep

[08:53] <aufrank> want a quick project?  the last commit is a little bit broken

[08:53] <aufrank> it changed Makefile.pl

[08:54] <tewk> That was me!, I did it from linux and I just tried it on OS X, you've got a patch :)

[08:55] <aufrank> are you asking if I have a patch for you?  I don't

[08:55] <tewk> Yeah,  what your bug, I'll see what I can do.

[08:56] <aufrank> "Use of uninitialized value in concatenation (.) or string at Makefile.PL line 627."

[08:56] <tewk> Yeah I'm looking at that sorry.

[08:57] <aufrank> is it that which() searches in $PATH and not in $PARROT_PATH?

[08:57] <aufrank> line 282

[08:57] <aufrank> because parrot-config.imc lives in $PARROT_PATH, but $PATH holds ${PARROT_PATH}/bin

[08:59] <aufrank> am I making any sense?

[09:01] <tewk> Yes, the code at 298 does the real work, parrot_config_imc shouldn't be in the path at all.  I think the previous author was trying to code for the eventuall existance of a parrot_config executable

[09:01] <aufrank> I see.

[09:02] <tewk> That's my guess.

[09:04] <aufrank> so $parrot_config should be undefined in the conditional at 298, since there's not an executable in the path

[09:05] <aufrank> but gets defined as long as there's a parrot-config.imc in $PARROT_PATH

[09:05] <tewk> Yeah

[09:06] <aufrank> so now I'm confused-- what's ending up undefined at 627?

[09:06] <tewk> I'm just about to find out.

[09:07] <aufrank> (I guess the smart money's on either $parrot or $config, since we just eliminated $parrot_config)

[09:10] <tewk> Sorry I'm a little slow I just realized i ran make realclean in parrot and didn't rebuild

[09:11] <aufrank> I reckon that would slow you down ;)

[09:12] <aufrank> maybe I have it though

[09:12] <aufrank> line 312

[09:12] <aufrank> single quotes, but the variable should be interpolated, right?

[09:15] <tewk> that single quote should only be around the inc, thats it

[09:15] <tewk> :q

[09:16] <aufrank> don't you quit on me now, tewk!

[09:16] <tewk> fix and testing, checkin coming

[09:17] <aufrank> heh

[09:19] <aufrank> at this rate maybe I'll actually use my committer bit before the new year!

[09:19] <tewk> Thanks for the find.  That qualifies you for a commiters bit.  Ping audreyt.  Hey they gave me one.  It doesn't take much :)

[09:20] <aufrank> he actually already gave me one

[09:20] <aufrank> I just haven't had the guts to commit yet

[09:21] <aufrank> I talked to him about concurrency back when he was drafting S17, and he gave me one then

[09:21] <tewk> Well I just committed, which means the possibility for another bug :)

[09:21] <aufrank> that's right, I'm watching you, tewk

[09:21] <aufrank> grrrr

[09:22] <tewk> wait a second,  I don't have my auth info on the mac and I forgot my openfoundry passwd

[09:22] <aufrank> yah?

[09:26] <tewk> Ok it's in.  svnbot must be asleep.

[09:26] <svnbot6> r8504 | tewk++ | typo fix

[09:27] <tewk> I introduce bugs like that just so I can inflate my karma.

[09:27] <aufrank> well I'll do my best to steal the next one from you.

[09:27] * Khisanth inverts tewk's karma

[09:29] <aufrank> ok, now it's really goodnight for me

[09:29] <aufrank> thanks all

[09:29] <geoffb> Thanks for the fix, tewk 

[09:29] * geoffb does his first build in months

[09:29] <geoffb> Insomnia ... is there *anything* it can't do?

[09:29] <aufrank> get my term paper written, apparently ;)

[09:30] <aufrank> zing!

[09:30] <aufrank> thanks folks, I'm here all week.  Tip your waiters!

[09:30] <geoffb> *chuckle*

[09:44] <Alias_> ping?

[09:46] <geoffb> Ah, an up to date, working Pugs.  My soul is ever so slightly happier.

[09:47] <Alias_> Does pugs/Perl6/etc have a package installation method yet?

[09:47] <Alias_> Something akin to C< perl Makefile.PL; make; make test; make install >

[09:48] <geoffb> Um ... exactly that, in fact

[09:48] <Alias_> put pugs itself, bug pugs packages

[09:48] <Alias_> Or is it all still glommed in

[09:49] <geoffb> Judging by the output from my last make install, I'd say a lot of stuff is carried along.

[09:49] <geoffb> But then, I've been away for a couple months.

[10:08] <gaal> yo geoffb, Alias_.

[10:09] <geoffb> g'day, gaal 

[10:09] <geoffb> howya?

[10:09] <gaal> not too shabby!

[10:09] <gaal> and you?

[10:09] <geoffb> Pretty good!

[10:11] * gaal puzzles over include paths keeping him from puzzling over FFI

[10:12] <nnunley> Trying to do FFI in pugs by bridging over to the NCI stuff in parrot?

[10:14] <gaal> no, no. just a .yaml emitter.

[10:14] <gaal> but for some reason -Isrc/cbits isn't making it into the makefile rule

[10:15] <gaal> and I don't know where's the correct place to add it.

[10:23] <gaal> is 83 C too hot for a CPU?

[10:28] <Khisanth> hmm depends on the CPU :)

[10:29] <gaal> intel p4 pencost 3ghz

[10:30] <gaal> s/pencost/whatever it's really called/

[10:30] <gaal> prescott

[10:30] <gaal> it died on me before...

[10:44] <nnunley> http://www.digit-life.com/articles/pentium4athlonxpthermalmanagement/

[10:44] <nnunley> Looks like it's probably too hot in your case.

[10:44] *** Aankh|Clone is now known as Aankhen``

[10:47] <gaal> looks like I have to do some underclocking.

[10:48] <nnunley> Anything blocking airflow in your case?

[10:49] <geoffb> gaal, I wouldn't think that would be necessary unless you have a very hot case, or your thermal paste / thermal tape is crappy

[10:49] <gaal> nope. the other sensor registers 19 C

[10:50] <gaal> not that I know where it's located.

[10:50] <geoffb> (or your heatsink isn't fully pressure-locked to the chip)

[10:52] <gaal> the hot sensor gives readings that fluctuate a lot (10 C). I'm not sure how accurate it is.

[10:54] <wolverian> 19C is very low. sure that sensor is connected? :

[10:54] <wolverian> s,$,),

[10:57] <gaal> i think i'll let the computer cool down a bit and go play with the cat. &

[11:06] <svnbot6> r8505 | asavige++ | RPN example in p5/p6/Haskell

[13:14] <xah> hi guys, may i ask a personal q?

[13:15] <xah> how much do you charge for building a whole estore website?

[13:16] <Alias_> Totally depends on how custom it needs to be

[13:16] <Alias_> And thus how many hours

[13:22] <xah> Alias_: a average estore website.

[13:22] <xah> for small merchant

[13:22] <xah> nothing really particular,

[13:22] <xah> just need a way to input inventory,

[13:22] <xah> using HTML interface and also CVS upload,

[13:23] <xah> and check out area where people can put things in cart and checkout,

[13:23] <xah> register new account if new,

[13:23] <xah> and be able to trcak of course current status,

[13:24] <xah> also discount with coupon field if user has it,

[13:24] <azuroth> I'm assuming you don't want to just use an existing oss one?

[13:24] <xah> and be able to show a log of users who started but didn't complete checkout.

[13:24] <xah> azuroth: existing one? like what?

[13:25] <azuroth> hmm. I remember seeing one written in PHP. can't think of its name, though

[13:25] <xah> i didn't know there's existing estore code...

[13:25] <xah> i'm planning to built in myself, probably with php,

[13:25] <azuroth> there has to be, how many e-stores are there?

[13:26] <xah> and i'm thinking 3 weeks.

[14:58] <svnbot6> r8506 | audreyt++ | * Beginning to port PIL.Native.Parser to Text.Parser.Rule.

[14:58] <svnbot6> r8506 | audreyt++ | * Much more thorough Rules support:

[14:58] <svnbot6> r8506 | audreyt++ |     - capturing, non-capturing and negated subrules

[14:58] <svnbot6> r8506 | audreyt++ |     - positional and named captures

[14:58] <svnbot6> r8506 | audreyt++ |     - greedy and lazy quantifiers

[14:58] <svnbot6> r8506 | audreyt++ |     - backtracking

[14:58] <svnbot6> r8506 | audreyt++ |     - character classes and character escapes

[15:07] <svnbot6> r8507 | audreyt++ | * proper support for mutually recursive subrules.

[15:20] <Alias_> mutually recursive subrules?

[15:20] <Alias_> Sounds scary

[15:28] <audreyt> rule foo { foo <bar> }; rule bar { bar <foo> }

[15:28] <audreyt> or, more likely:

[15:28] <audreyt> rule foo { foo <bar>? }; rule bar { bar <foo>? }

[15:28] <audreyt> dinner, bbiab &

[15:41] <Alias_> right

[15:41] <Alias_> Still sounds scary

[16:13] <Alias_> audreyt: ping?

[16:13] <Alias_> Trouble in M:I land...

[16:18] <anatolyv> if audreyt or anyone else who can help my rt.openfoundry registration problem is around, that'd be great too.

[18:13] <aufrank> hello!

[18:25] <svnbot6> r8508 | audreyt++ | * Bootstrap.pil is now compiled as part of "make pil"/"make pili".

[18:25] <theorbtwo> "make pili"?

[18:26] <audreyt> like "make ghci"

[18:26] <audreyt> anatolyv: I'll look at the rt.openfoundry.org thing in a moment.

[18:26] <aufrank> can you all check something for me?

[18:27] <aufrank> do you have a ${PARROT_PATH}/blib ?

[18:27] <anatolyv> audreyt: thanks!

[18:27] <aufrank> I don't in my tree for 0.4.0

[18:27] <audreyt> I do

[18:27] <aufrank> and it broke the build process for me because $PARROT_PATH/blib is in the includes in Makefile.pl

[18:27] <svnbot6> r8509 | audreyt++ | * Text.Parser.Rule: Squash -Wall warnings.

[18:27] <audreyt> but it's created only afte r"make" I think

[18:28] <aufrank> audreyt: the stock 0.4.0, or a recent checkout?

[18:28] <audreyt> a recent checkout

[18:28] <aufrank> audreyt: I did make and make install-- is there any reason that it would be made but not installed?

[18:29] * aufrank looks

[18:30] <audreyt> hm, not sure... try irc.perl.org #parrot?

[18:30] <aufrank> I have blib in /usr/local/src/parrot-0.4.0, which is where I made everythign

[18:30] <aufrank> but not /usr/local/parrot

[18:30] <audreyt> right

[18:30] <aufrank> where everything installed

[18:30] <aufrank> I'll go check over there

[18:30] <aufrank> thanks

[18:30] <audreyt> because blib/ is the list of things to be installed

[18:30] <audreyt> normally perl doesn't install blib/ as blib/

[18:30] <audreyt> but rather blib/* as *

[18:31] <aufrank> so should Makefile.PL really be trying to include blib?

[18:31] <svnbot6> r8510 | audreyt++ | * PIL.Native: The first container type, ::Scalar, lands!

[18:31] <svnbot6> r8510 | audreyt++ |     $ ./pil -e '::Scalar`new_opaque(3).STORE(9).FETCH()'

[18:31] <svnbot6> r8510 | audreyt++ |     ### Evaluated ###

[18:31] <svnbot6> r8510 | audreyt++ |     9

[18:31] <svnbot6> r8510 | audreyt++ | * PIL.Native: Proper .is_a(::Object) support for autoboxed

[18:31] <svnbot6> r8510 | audreyt++ |   types and ::Scalar types.  Also "Int" is now internally a

[18:31] <svnbot6> r8510 | audreyt++ |   Haskell "Integer" type with BigInt capabilities.

[18:31] <aufrank> audreyt: is that a scalar in PILN?

[18:32] <audreyt> aufrank: yes.

[18:32] <aufrank> congrats!

[18:32] <aufrank> very exciting

[18:32] <audreyt> thanks! :)

[18:32] <aufrank> (did stevan have a perl5 metamodel for you this morning?)

[18:32] <audreyt> no... so I got distracted and implemented subrule captures and backtracking for Text.Parser.Rules

[18:33] <aufrank> slacker :P

[18:33] <audreyt> :p

[18:34] <geoffb> Speaking of parrot embedding build problems ... my PARROT_PATH ends in 'svk/parrot-trunk', and when I go to install, I see an error about '.../svk/parrot doesn't exist or isn't a directory ...' from ghc-pkg

[18:35] <geoffb> This is an old bug, as it existed a couple of months ago when I last had a chance to build.  :-)

[18:35] <aufrank> geoffb: I'm aimin' to maybe do my first commit with some Makefile.pl changes

[18:35] <aufrank> I'll look at that one too

[18:35] <geoffb> aufrank, cool, thanks

[18:36] <Alias_> audreyt: Do you have a perl Makefile.PL etc equivalent yet for pugs/perl6?

[18:36] <Alias_> audreyt: Also, getting bug reports that the new M:I version kills Cygwin

[18:36] <Alias_> ... support

[18:36] <tewk> M:I ?

[18:37] <Alias_> Module::Install

[18:37] <audreyt> Alias_: first question is "not yet" -- we piggyback on p5 M::I currently

[18:37] <audreyt> Alias_: second question is "aww". url?

[18:37] <Alias_> http://rt.cpan.org/Ticket/Display.html?id=16810

[18:37] <Alias_> # Similar reports for other people 

[18:38] <audreyt> k, looking

[18:43] <stevan> audreyt: ping

[18:55] <audreyt> stevan: pong

[18:55] <stevan> audreyt: :)

[18:55] <audreyt> yo :)

[18:55] <stevan> I am looking over the code right now

[18:56] <audreyt> ok. I overloaded `new_opaque

[18:56] <stevan> so is PIL^N now parsed with p6 rules?

[18:56] <audreyt> the idea is that each class object can dictate their own layout

[18:56] <audreyt> independent of the :repr

[18:56] <audreyt> or rather, totally ignoring :repr

[18:56] <audreyt> it may take :repr as an argument later

[18:56] <stevan> audreyt: cool, we needed that too since we need to support hash/array/cstruct/pydict 

[18:56] <audreyt> not at all sure about what to do with that

[18:56] <audreyt> yup

[18:57] <geoffb> Where should I be looking for most up to date specs on language?  Still P6::Bible on CPAN?

[18:57] <stevan> geoffb: yes, there have been several recent updates

[18:57] <aufrank> geoffb: I checkout a copy of the docs from svn

[18:57] <geoffb> Yeah, since I've been away for 2-3 months, I expect it's best just to read again from scratch

[18:57] <audreyt> stevan: it's not yet using Rules... took me a while to implement the subrule capture

[18:57] <geoffb> aufrank, SVN repo url?

[18:58] <aufrank> http://svn.perl.org/perl6/doc

[18:58] <audreyt> stevan: if you'd like you can try porting stuff in src/PIL/Native/Parser.hs

[18:58] <geoffb> aufrank, thanks

[18:58] <stevan> audreyt: ok, but that is the plan correct?

[18:58] <audreyt> or other rules-happy people could

[18:58] <audreyt> stevan: yes

[18:58] <audreyt> anatolyv: check your mail again

[18:58] <stevan> audreyt: I am not a rule-type-person , so I will leave it for the more qualified

[18:59] <audreyt> nod

[18:59] <tewk> audreyt: I'll take a shot at porting to rules

[18:59] <aufrank> question:

[18:59] <geoffb> Oh man, are there really 7K doc revisions?!?

[18:59] <audreyt> tewk: ooh, thanks

[18:59] <stevan> audreyt: so as far as autoboxing,.. I have compiled a list of all the "types" I found in the recent Syns

[18:59] <geoffb> Oh phew, sparse

[18:59] <aufrank> I just got confirmed from the parrot folks that our include lines in Makefile.pl are correct for an uninstalled parrot

[19:00] <audreyt> tewk: look at src/PIL/Native/Parser.hs and fill in the "miniLang" part

[19:00] <aufrank> should we tell people that PARROT_PATH should point to the uninstalled parrot

[19:00] <audreyt> tewk: there's a documentation primer as comment right afterwards; then there's the haskell Parsec implementation

[19:00] <anatolyv> audreyt: nothing yet, should I be getting another verification email?

[19:00] <audreyt> which should be self explanatory

[19:00] <aufrank> or should we add checks to Makefile.pl to handle both the cases of installed and uninstalled parrot?

[19:00] <audreyt> tewk: don't worry about generating terms; just getting them parsed is sufficient

[19:00] <tewk> audreyt: Ok

[19:01] <audreyt> anatolyv: yes. you are avorobey at pobox, right?

[19:01] <tewk> aufrank: I think the code attempts to do both, but it probably needs some rework.

[19:01] <aufrank> (parrot people say just use the uninstalled)

[19:01] <audreyt> aufrank: the latter if you can manage it; the former for now

[19:02] <anatolyv> audreyt: yes. Got it. Going through the motions.

[19:02] <aufrank> tewk: my build of pugs died last night because there was no blib in my install directory, but it's listed in the libraries

[19:02] <audreyt> excellent

[19:02] <audreyt> stevan: I have another full hacking day tomorrow

[19:02] <tewk> aufrank: Got it, making the connections.

[19:02] <audreyt> and it's 3am, so I should journal a bit and sleep :)

[19:03] <aufrank> tewk: leo just confirmed that $embed_flags .= " -I$base/include -L$base/blib/lib -DPUGS_HAVE_PARROT -L$base/blib/lib -L/usr/local/lib $ldflags ";

[19:03] <aufrank>  is only correct for the uninstalled version

[19:03] <stevan> audreyt: cool, I will be back more after the new year

[19:03] <aufrank> (line 321)

[19:03] <audreyt> stevan: yay :)

[19:03] <stevan> in the meantime I will keep trying to find "types" and figure out what we need to build 

[19:04] * aufrank types

[19:04] <aufrank> did that help?

[19:04] * stevan adds the aufrank type to the list

[19:04] <aufrank> w00t!

[19:05] <stevan> aufrank: not sure if it will past muster on p6l though :P

[19:06] <anatolyv> audreyt: confirmed the registration and was able to log in, thanks!

[19:06] <aufrank> not much of what I say does ;)

[19:07] <aufrank> tewk: and now I see that the INSTALL file TELLS you to use the src/parrot/ and not the installed version

[19:07] <aufrank> so I was wrong and the code is fine and... bla

[19:10] <tewk> aufrank: Most serious parrot/pugs hackers are always bleeding on HEAD at this point.  Maybe a RT todo?  Does pugs use RT currently?  Best option, fix it to work with a installed parrot.

[19:10] <tewk> If we break it later we will be forced to fix it :)

[19:10] <leo> we have to fix a few things, before installing it is a good option

[19:11] <audreyt> anatolyv: woot!

[19:11] <aufrank> hey, look what I did-- now leo said something!  :)

[19:11] <leo> I'm always with you ;-) 

[19:15] <wolverian> hm, parrot is apparently being optimised to be faster than python currently :)  leo++

[19:16] <wolverian> (or was.)

[19:16] <audreyt> Alias_: ping

[19:16] <Alias_> pong

[19:16] <audreyt> Alias_: can you rebuild Config::Tiny with trunk M::I

[19:17] <leo> wolverian: some intermediate optimizations went in, yes just for the shootout

[19:17] <audreyt> and tell JDHEDDEN to try again?

[19:17] <wolverian> leo, it's just nice that I can now disuss performance with a python friend without being laughed at.. :)

[19:18] <audreyt> Alias_: ...that is, after I finished committing

[19:18] <Alias_> ok

[19:18] <Alias_> Also, more docs changes in too

[19:18] <geoffb> leo, wolverian: link?

[19:18] <leo> we have to rework strings, but the math stufff is fine

[19:18] <Alias_> Culled out some stuff that's just out of date now

[19:18] <Alias_> Reread at your leisure

[19:18] <wolverian> geoffb, http://groups.google.com/group/perl.perl6.internals/tree/browse_frm/thread/a4cff1f015b466a5/9cd41766ca1d83b1?rnum=1&_done=%2Fgroup%2Fperl.perl6.internals%2Fbrowse_frm%2Fthread%2Fa4cff1f015b466a5%2F9cd41766ca1d83b1%3F#doc_9cd41766ca1d83b1

[19:19] <geoffb> wolverian, thx

[19:19] <wolverian> google, please fix your URLs. thanks.

[19:20] <leo> http://shootout.alioth.debian.org/sandbox/benchmark.php?test=all&lang=parrot

[19:20] <leo> or just the sandbox page

[19:20] <geoffb> leo, thx

[19:21] <audreyt> Alias_: r70

[19:21] <leo> some recent improvments aren't covered yet

[19:35] <audreyt> Alias_: cool, docs look nice

[19:35] <geoffb> Hmmm, I think shootout's source printer needs to be taught that ' within a # comment in PIR does not start a new string: http://shootout.alioth.debian.org/sandbox/benchmark.php?test=regexdna&lang=parrot&id=0

[19:35] <audreyt> I need to crash now... see you all tomorrow :)

[19:35] <Alias_> I hope so... getting there slowly

[19:35] <audreyt> *wave* &

[19:36] <aufrank> audreyt: gnight!

[19:36] <geoffb> And leo, good job.  How many of those optimizations that you made were improvements to Parrot, as opposed to just the test code?

[19:36] <geoffb> audreyt, g'night!

[19:38] <leo> geoffb: thanks. I just continued a few optimization thingies and did them a bit earlier as e.g. milestones would say, when these should be done

[19:39] <geoffb> leo, ah, gotcha

[19:40] <leo> there are some optimization hooks like PIC (polymorphic inline cache) which is kind of dynamic recompilation according to runtime actual data, and I've implemented a few opcodes for that

[19:41] <geoffb> ah

[19:41] <leo> mainly to get function calls back to normal speed (or faster than it ever was ;-)

[19:41] <geoffb> nodnod

[19:42] <leo> it's still low priority for me, OTOH showing some results isn't bad either

[19:42] <geoffb> What state is Pugs -> PIR compilation in?  Do all Pugs-handled Perl 6 constructions result in working PIR at this point?

[19:43] <geoffb> leo, right, exactly.

[19:43] <leo> e.g. just showing the potential: http://shootout.alioth.debian.org/sandbox/benchmark.php?test=harmonic&lang=all

[19:44] <leo> pugs -> pir is currently being reworked (or in an early state)

[19:44] <geoffb> OK, thx

[19:48] <leo> above harmonic timing is mostly due to an unoptimzed startup/init sequence, it's actually faster ;-)

[19:48] <leo> the bench is running too short

[19:52] <geoffb> That's damned cool that PIR is less than 40% slower than the top dog there.

[19:53] <geoffb> That's pretty impressive.

[19:56] <leo> it's probably near ~20% now with svn head (I've removed some unneeded method cache invalidation in the startup sequence)

[19:57] <leo> but the whole init sequence is still a bit slow

[19:57] <geoffb> nodnod

[19:58] <leo> anyway - more realistic code 'pidigits' with PMCs and coroutines: http://shootout.alioth.debian.org/sandbox/benchmark.php?test=pidigits&lang=all

[20:00] <leo> just statically compile langs ahead ;)

[20:00] <geoffb> Very nice

[20:01] <geoffb> Wow, D seems to fly

[20:01] <rep> PMCs = performance monitoring coutners?

[20:01] <geoffb> Parrot Magic Cookies

[20:01] <leo> or just objects

[20:02] <leo> D is really fast, yes

[21:14] *** avarab is now known as avar

[21:24] <avar> Is some perl6 stuff being backported to perl5?

[21:25] <avar> http://use.perl.org/article.pl?sid=05/12/26/2033226&from=rss

[21:25] <avar> like ~~ 

[21:25] <Alias_> via C< use features; >

[21:25] <Alias_> It won't be enabled by default

[21:25] <avar> ah

[21:25] <avar> still kind of strange...

[21:25] <Alias_> sigh

[21:25] <Alias_> yes

[21:26] <avar> the switch statement too apperently..

[21:26] <avar> or, the pseudoswitch

[21:26] <Alias_> A real one

[21:26] <Alias_> but yes

[21:26] <avar> given ... 

[21:26] <Alias_> I think all the people attracted to shiny things were sort of left to do what they wanted once they promised not to play in the main language and keep everything fully back-compatible

[21:29] <avar> ;)

[21:30] <avar> any other stuff besides given & ~~ ?

[21:30] <Alias_> I certainly stopped fighting them

[21:30] <Alias_> Damian's say function

[21:30] <Alias_> What will probably be dor

[21:30] <avar> mm

[21:30] <Alias_> The string version of //

[21:30] <avar> what perl release will this be in?

[21:30] <avar> use feature ...

[21:30] <Alias_> 5.9.3

[21:31] <avar> use feature qw(say given ... ) ?

[21:31] <Alias_> dunno, haven't seen it

[21:31] <Alias_> Just fought in the war on the pro-backcompatible side

[21:38] <aufrank> Is gather/take borrowed from some other language?

[21:38] <aufrank> none of the apos or syns really explain it

[21:39] <aufrank> A12 says it's conjectural, and S06 and S09 both use it

[21:39] <aufrank> but it's not explained on its own anywhere

[21:43] <revdiablo> aufrank: It's in there somewhere. Let me try to find it

[21:43] * aufrank had no luck grepping

[21:44] <aufrank> whoops, there it is in A12

[21:45] <revdiablo> Ah, in the objects apoco... that makes sense, yeah

[21:45] <revdiablo> =)

[21:45] <aufrank> I persist in my belief that it's not in any synopsis, though

[21:45] <aufrank> maybe it should be?

[21:46] <avar> "since the purpose of the operator is to let you try out something, and if that doesn't work, get something else, then it should be called the Jagger-Richards operator, because you can't always get what you want, but you might find you get what you need."

[21:46] <revdiablo> aufrank: I would think it probably should be somewhere else

[21:46] <revdiablo> aufrank: But who am I? =)

[21:47] <aufrank> are you saying you think it exists elsewhere and we haven't found it?  or that you agree that it should be documented in more than A12?  or that it shouldn't be in a synopsis?

[21:47] * aufrank is confused :)

[21:48] <revdiablo> aufrank: I'm saying it should be documented somewhere else, and also should be in that somewhere else's corresponding synopsis

[21:48] <aufrank> gotcha

[21:52] <aufrank> looks like lwall is the maintainer for S12... maybe I'll write and ask him

[22:18] <leo> geoffb: still about?

[22:18] <geoffb> leo: yep

[22:18] <leo> I compared pidigits here again: 

[22:18] <leo> parrot 0.25s

[22:18] <leo> python 0.96

[22:19] <leo> amd X2@2000 w 512 K cache

[22:19] <geoffb> w00t

[22:19] <geoffb> very nice

[22:19] <leo> that'll be 2nd pos in the list ;-)

[22:20] <geoffb> :-)

[22:20] <leo> these benches probably are very cpu dependent, though, or some at least

[22:21] <geoffb> still, nice to see parrot doing so well.

[22:21] <leo> yup - I like that

[22:22] <Alias_> leo: How are you doing platform testing atm?

[22:22] <leo> pdcawley: http://shootout.alioth.debian.org/sandbox/benchmark.php?test=pidigits&lang=all

[22:22] <leo> (was the topic)

[22:23] <leo> Alias_: we have a smoke server collecting available results coming from folks doing 'make smoke'

[22:23] <Alias_> hmm

[22:24] * Alias_ ponders

[22:24] <leo> plus the usual reports on the list of course

[22:24] <Alias_> What sort of testing domensions to you need?

[22:25] <leo> well, a regular test run on *all* platforms would be nice ;)

[22:25] <Alias_> what are the platforms...

[22:25] <Alias_> CPU-based? CPU+OS?

[22:25] <Alias_> CPU+OS+Dist?

[22:26] <leo> $parrot_svn_trunk/PLATFORMS might be a good beginning

[22:26] <Alias_> Got a full URL for that? I've never looked at Parrot before

[22:26] <Alias_> Two levels below where I normally work

[22:28] <leo> $ svn cat https://svn.perl.org/parrot/trunk/PLATFORMS

[22:29] <leo> and

[22:29] <leo> http://smoke.parrotcode.org/smoke/

[22:29] <Alias_> leo: I think we can handle about 2/3rd of that

[22:30] <leo> 'we' is who in that case (sorry that I've to ask)?

[22:30] <Alias_> http://ali.as/pita/

[22:31] <Alias_> irc.perl.org/#pita

[22:31] <leo> ah

[22:31] <leo> I've seen that recently (or read about it)

[22:32] <Alias_> It's not formally announced yet, but I'm slowing bouncing it off more people

[22:32] <Alias_> brb

[22:37] <buu> evalbot_8502: join #perl

[22:37] <buu> ?join #perl

[22:38] <buu> STUPID. BOTS.

[22:38] *** evalbot_8502 is now known as evalbot_8510

[22:49] <_tcc> Can I get some help reading a file into a hash?

[22:51] <integral> into a hash?  You'd have to process it a bit before you could do that.  Files are normally streams of byte or characters first, and then arrays of lines, and perl has builtin things for both of those,  but beyond that you've got to add your own code first...

[22:51] <_tcc> I am pasting the code into #perlcafe

[22:51] <_tcc> I've done this before.

[22:52] <_tcc> I rm'd the project and I forgot how to do it.

[22:52] <integral> perlcafe?

[22:52] <_tcc> yes

[22:52] <integral> cool, I didn't realise they were more perl6 people.   Neat

[22:53] <Alias_> back

[22:53] <Alias_> leo: So yeah, Maddingue is our sysadmin image wrangler

[22:53] <Amnesiac> Alias_!

[22:54] <Alias_> And each image should be able to handle multiple "install schemes"

[22:54] <leo> you got the hardware? the testing software? all?

[22:54] <Alias_> "perl5" (auto), "perl5-make", "perl5-build", "perl6" (whatever that is)

[22:54] <Maddingue> uh?

[22:54] <Alias_> * Maddingue downloads a few ISOs to prepare disk images

[22:55] <Maddingue> oops, yeah :)

[22:55] <Alias_> leo: We are using virtualised hardware

[22:55] <Alias_> leo: And I'm pulling the software together

[22:56] <Alias_> So far the reporting XML/code is done, image launching is mostly there, and I just finished the report capture server

[22:56] <Alias_> leo: So some stuff to do the actual running of the testing schemes, and maybe some image-management code, and we should be ready to start generating reports

[22:57] <leo> well, a virtualized VMS test is better than none (not that parrot will even compile, ...) - but is the same as one a real machine?

[22:57] <Alias_> leo: That's up to VMWare/Qemu/Bochs to work out

[22:57] <leo> ok

[22:57] <Alias_> Some of them do have arch-testing kits though

[22:57] <Alias_> That exercise every operation for the arch

[22:58] <leo> great stuff anyway

[22:58] <Alias_> Seems a bit ad-hoc for now, but it's a start

[22:58] <leo> yeah

[22:58] <Alias_> What's your testing scheme look like

[22:58] <Alias_> The sequence of instructions

[22:59] <leo> I'd like to delegate further talks about that to involved parrot folks

[22:59] <Alias_> You aren't involved in parrot? :)

[22:59] <leo> (I'm the poor man that just tries to manage some of that stuff ;)

[22:59] <Alias_> But, you must have run the smoke before once right

[22:59] <leo> and staff

[22:59] <Maddingue> uh, for VMS, Qemu cannot help

[23:00] <Alias_> For example, the "perl-make" scheme is C< perl Makefile.PL; make; make test; >

[23:00] <Maddingue> you need specific emulator and a licenced copy of the system

[23:00] <leo> forget vms for now when parrot is involved at least ;)

[23:00] <Maddingue> though there are ways to get that

[23:00] <Maddingue> plus there's a monger who proposed access to VMS systems for tsting Perl stuff

[23:01] <Maddingue> he did a LT at Belfast about that

[23:01] <Alias_> And if it takes a little while to get proxying working, it shouldn't matter too much

[23:01] <leo> Alias_: could you come other to #parrot at irc.pobox.com for a moment - some folks that do a lot of testing are here

[23:01] <Alias_> pobox is it's own network?

[23:02] <geoffb> Alias_, yes.

[23:05] <integral> umm, pobox is just MagNet (inc. irc.perl.org)

[23:06] <geoffb> integral, right, I meant, it's not in Freenode.

[23:07] * Alias_ already has 8 magnet channels open

[23:07] <integral> *nod* it's just that alias's #pita is on magnet

[23:07] <geoffb> gotcha

