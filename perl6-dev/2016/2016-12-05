[00:54] <dalek> nqp: ea1104f | MasterDuke17++ | src/QRegex/Cursor.nqp:

[00:54] <dalek> nqp: Remove only use of an internal opcode in the src

[00:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ea1104fb4b

[01:00] <babydrop> What's wrong with nqp::ordat()?

[01:01] <babydrop> In https://irclog.perlgeek.de/perl6/2016-11-29#i_13646879 timotimo says that ordat, as opposed to ord, would "circumvent an allocation that'll immediately get cleaned up again, but it goes through malloc, too"

[01:09] <MasterDuke> hm, the nqp doc said it was an internal compiler opcode, and that was the single use in all the source code

[01:10] <babydrop> Cool

[01:10] <MasterDuke> is ordat(str, 0) better than ordfirst(str)? that's the other internal opcode which seems like a better fit

[01:10] * babydrop has no idea

[01:11] <dalek> rakudo/nom: 0ba7733 | (Aleks-Daniel Jakimenko-Aleksejev)++ | src/Perl6/Grammar.nqp:

[01:11] <dalek> rakudo/nom: Fix RT #130260 (“smart” → “curly”)

[01:11] <dalek> rakudo/nom:

[01:11] <dalek> rakudo/nom: This seems to be the only place where these quotes are called this way.

[01:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0ba7733c58

[01:11] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130260

[01:11] <dalek> rakudo/nom: 40d80c0 | lizmat++ | src/Perl6/Grammar.nqp:

[01:11] <dalek> rakudo/nom: Merge pull request #935 from AlexDaniel/curly-quotes

[01:11] <babydrop> the docs say "ord is converted to these internal opcodes by the compiler.", so I guess it just chooses which to convert to depending on the index given

[01:11] <dalek> rakudo/nom:

[01:11] <dalek> rakudo/nom: Fix RT #130260 (“smart” → “curly”)

[01:11] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130260

[01:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/40d80c02a6

[01:12] <MasterDuke> if ordat really is faster, there are a bunch of ord()s in MATCH() that could be changed (and it might make sense there since it is such a hot path)

[01:14] <babydrop> I probably just misunderstood timotimo, since I was talking about doing nqp::ord(nqp::substr(...))

[01:15] <babydrop> and that's not needed, 'cause ord takes an index (and I didn't know)

[01:17] <MasterDuke> .ask timotimo if you backlog you'll see a discussion about nqp::ord() and nqp::ordat(). is nqp::ordat(str, index) really better than nqp::ord(str, index)?

[01:17] <yoleaux2> MasterDuke: I'll pass your message to timotimo.

[01:23] <dalek> nqp: 4bded8d | MasterDuke17++ | src/vm/moar/HLL/Backend.nqp:

[01:23] <dalek> nqp: Fix typo in SQL profile output column name

[01:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4bded8d400

[03:29] <ugexe> bisect: {class Test::Builder::Test { };}; {role Test::Builder::Plan::Generic { }; class Test::Builder::Plan does Test::Builder::Plan::Generic { };}; {class Test::Builder { has Test::Builder::Plan::Generic $!plan; };};

[03:29] <bisectable6> ugexe, Bisecting by exit code (old=2015.12 new=40d80c0). Old exit code: 0

[03:29] <bisectable6> ugexe, bisect log: https://gist.github.com/439c70938529dc4a09fabb9e31b88f45

[03:29] <bisectable6> ugexe, (2016-10-26) https://github.com/rakudo/rakudo/commit/ab946945735042ff99953f6636bdf98acd5bfc71

[03:35] <ugexe> Seems to be related to the first name part (Test) matching the last name part (Test), because if you change the first name part to 'Tester' it works again

[03:36] <ugexe> m: {class Tester::Builder::Test { };}; {role Tester::Builder::Plan::Generic { }; class Tester::Builder::Plan does Tester::Builder::Plan::Generic { };}; {class Tester::Builder { has Tester::Builder::Plan::Generic $!plan; };};

[03:36] <camelia> rakudo-moar 40d80c: ( no output )

[03:50] <ugexe> m: {class A::B::A { };};  role A::B::C { }; class A::B { has A::B::C $!plan; };

[03:50] <camelia> rakudo-moar 40d80c: OUTPUT«===SORRY!===␤Type 'A::B::C' is not declared␤at <tmp>:1␤------> le A::B::C { }; class A::B { has A::B::C⏏ $!plan; };␤Malformed has␤at <tmp>:1␤------> ole A::B::C { }; class A::B { has A::B::⏏C $!plan; };␤␤»

[03:51] <ugexe> m: class A::B::A { };  role A::B::C { }; class A::B { has A::B::C $!plan; };

[03:51] <camelia> rakudo-moar 40d80c: ( no output )

[03:51] <ugexe> for some reason wrapper that first class in { }; causes it there

[04:04] <ugexe> unless you change A::B::A to A::B::<any thing but A>

[04:04] <ugexe> m: {class A::B::X { };};  role A::B::C { }; class A::B { has A::B::C $!plan; };

[04:04] <camelia> rakudo-moar 40d80c: ( no output )

[07:01] <dalek> rakudo/nom: 6fafbf6 | niner++ | tools/build/create-moar-runner.pl:

[07:01] <dalek> rakudo/nom: Hopefully fix make test on Windows

[07:01] <dalek> rakudo/nom:

[07:01] <dalek> rakudo/nom: The perl6-m.bat in the build directory was missing the --nqp-lib=blib

[07:01] <dalek> rakudo/nom: argument.

[07:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6fafbf63cb

[07:03] <nine> Could also be that we need an NQP bump

[07:12] <[TuxCM]> This is Rakudo version 2016.11-132-g40d80c02a built on MoarVM version 2016.11-27-g3171dbbe

[07:12] <[TuxCM]> csv-ip5xs        3.061

[07:12] <[TuxCM]> test            15.116

[07:12] <[TuxCM]> test-t           6.658

[07:12] <[TuxCM]> csv-parser      14.830

[07:15] <bartolin> for the records: the jvm backend is completely broken atm. yesterday it failed after Stage optimize with 'classfile too large' (or similar) and today it fails even earlier with 'NoSuchFileException: /share/nqp/lib/Perl6/BOOTSTRAP.jar'

[07:15] * bartolin is off to $work, so won't have time to look until later

[07:16] <bartolin> (the above is for building rakudo, nqp-j builds fine)

[07:32] <nine> Ok, Appveyor is happy again :)

[07:33] <nine> bartolin: the BOOTSTRAP.jar issue is most probably my fault :/ I only changed the Makefile-Moar.in. Train ride was over before I could attack Makefile-JVM.in

[07:34] <nine> It just needs those --nqp-lib=blib arguments

[08:01] <lizmat> Files=1155, Tests=53838, 170 wallclock secs ( 9.44 usr  4.03 sys + 976.13 cusr 110.62 csys = 1100.22 CPU)

[08:02] <lizmat> finally got it to run on my new MBP when it was cold

[08:02] <nine> So the new hardware is about 1/4 faster

[08:05] <lizmat> more like 20%

[08:05] <lizmat> running a jvm build while going for breakfast&

[08:56] <lizmat> Stage parse      : java.nio.file.NoSuchFileException: /share/nqp/lib/Perl6/BOOTSTRAP.jar

[08:57] <lizmat> I guess that's what nine was referring to

[08:57] <lizmat> decommute&

[09:57] <dalek> rakudo/nom: b96bf5b | niner++ | tools/build/Makefile-JVM.in:

[09:57] <dalek> rakudo/nom: Fix java.nio.file.NoSuchFileException: /share/nqp/lib/Perl6/BOOTSTRAP.jar

[09:57] <dalek> rakudo/nom:

[09:57] <dalek> rakudo/nom: We no longer search . and blib by default when looking for NQP modules.

[09:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b96bf5bd05

[10:17] <timotimo> MasterDuke: yeah, ordat is only better than ord + substr

[10:17] <yoleaux2> 01:17Z <MasterDuke> timotimo: if you backlog you'll see a discussion about nqp::ord() and nqp::ordat(). is nqp::ordat(str, index) really better than nqp::ord(str, index)?

[10:46] <dogbert17> nine: are you around?

[11:36] <babydrop> [TuxCM]: are those times affected by precompilation or do you precompile first and then run the bench?

[11:36] <babydrop> I noticed it got .2s slower after the day when I made − work in many places.

[11:36] <babydrop> And it was changes in P6/Grammar.

[11:37] <jnthn> .2s is probably in noise

[11:37] <babydrop> seems a pretty consistent noise :D

[11:38] <jnthn> I guess the same thing over a few days makes it more significant, true :)

[11:57] <nine> dogbert17: yes

[12:12] <dogbert17> nine: would it be possible for you to take a look at the 32 bit invalid read errors that still plague t/04-nativecall/08-callbacks.t?

[12:14] <dogbert17> nine: time permitting ofc

[12:19] <jnthn> dogbert17: May also be worth mentioning that to FROGGS++ if you didn't already; he's done quite some NativeCall platform fixes recently :)

[12:19] <nine> dogbert17: yes, if FROGGS++ doesn't beat me to it, I can have a look tomorrow.

[12:20] <dogbert17> nine froggs: here's what I have: https://gist.github.com/dogbert17/c88ee798bb0789708ffcf5e4960e885b

[12:25] <dogbert17> nine: have updated the gist, I had forgotten to turn on debug info /o\

[14:41] <dalek> rakudo/nom: 6e7f97f | (Zoffix Znet)++ | src/Perl6/Grammar.nqp:

[14:41] <dalek> rakudo/nom: Microoptimize synth rejector code in colonpairs

[14:41] <dalek> rakudo/nom:

[14:41] <dalek> rakudo/nom: Gives about a 13% boost + likely memory improvements

[14:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6e7f97f83d

[14:49] <[Coke]> bdf reports:

[14:49] <[Coke]> I just noticed in another editor that the Perl 6 Advent wordpress

[14:49] <[Coke]> setup replaces HTML escapes when it populates the edit window. Things

[14:49] <[Coke]> that were &lt; become literal < again. Odd.

[14:49] <babydrop> :o

[14:50] <babydrop> gfldex's post still has an issue.. it should trait_mod:<is> or something

[14:51] <[Coke]> --

[14:51] <[Coke]> ... wrong window. whoops.

[14:56] <babydrop> ...

[14:57] <babydrop> ZzZombo's quit messages get progressively more bizzare :)

[15:28] <gfldex> babydrop: fixed

[15:28] <babydrop> awesome

[15:28] <[Coke]> gfldex++

[17:49] <babydrop> .tell Zoffix remember the for <a b> \ <b c> { .say } bug? Did you fix it?

[17:49] <yoleaux2> babydrop: I'll pass your message to Zoffix.

[17:49] <babydrop> #LazyBugReporting

[17:53] <babydrop> .tell Zoffix never mind

[17:53] <yoleaux2> babydrop: I'll pass your message to Zoffix.

[17:59] <geekosaur> heh

[18:07] <japhb> .oO( Zoffix will eventually implement Eiffel-on-wetware to get reliable forward progress despite constantly crashing personality nodes )

[18:48] <dalek> nqp: 671b680 | (Pawel Murias)++ | src/vm/js/Chunk.nqp:

[18:48] <dalek> nqp: [js] Remove no longer used ChunkEscaped class.

[18:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/671b680db1

[18:48] <dalek> nqp: 6e62355 | (Pawel Murias)++ | src/vm/js/ (2 files):

[18:48] <dalek> nqp: [js] Return the exit status from nqp::spawn and nqp::shell.

[18:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6e62355354

[18:48] <dalek> nqp: 7695020 | (Pawel Murias)++ | t/nqp/078-shell.t:

[18:48] <dalek> nqp: Test the return value of nqp::shell.

[18:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7695020102

[18:48] <dalek> nqp: 642f1e5 | (Pawel Murias)++ | src/vm/js/ (2 files):

[18:48] <dalek> nqp: [js] Avoid duplicating a block by setting it up with both a .closure and .capture.

[18:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/642f1e5115

[20:28] <dalek> rakudo/remove-useless-check: ab10dc4 | (Pawel Murias)++ | src/Perl6/Actions.nqp:

[20:28] <dalek> rakudo/remove-useless-check: Don't check for an op that doesn't exist.

[20:28] <dalek> rakudo/remove-useless-check: review: https://github.com/rakudo/rakudo/commit/ab10dc42df

[20:46] <japhb> pmurias++  # Relentless(ly wonderful) expansion of the nqp test suite

[20:48] <psch> m: class A {}; say ::('::x::A')

[20:48] <camelia> rakudo-moar 6e7f97: OUTPUT«No such symbol 'A'␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[20:48] <psch> m: class A {}; say ::('::A')

[20:48] <camelia> rakudo-moar 6e7f97: OUTPUT«(A)␤»

[20:49] <psch> oh, hm, saw that in #perl

[20:49] <psch> +6

[20:49] <psch> >_>

[21:04] <bartolin> ah, my memory didn't fool me: we had that 'class file too large' problem with rakudo-j earlier: https://irclog.perlgeek.de/perl6/2015-10-27#i_11439297

[21:05] <timotimo> yup, we did

[21:05] <timotimo> we did a trick to make it better

[21:05] <timotimo> but it was only a measure to push the problem back

[21:06] <bartolin> yeah, nqp commit 61f3e95ec4 by psch++

[21:10] <[Coke]> pmurias++ ugh and it was the first check, too!

[21:11] <timotimo> i expect many of these eq checks were mostly pointer comparison shortcuts

[21:11] <timotimo> because almost all values put into :op come directly from CompUnit's string heap

[21:11] <timotimo> and thus ought to be interned

[21:11] <timotimo> probably not across CompUnits, though

[21:33] <dalek> rakudo/nom: ab10dc4 | (Pawel Murias)++ | src/Perl6/Actions.nqp:

[21:33] <dalek> rakudo/nom: Don't check for an op that doesn't exist.

[21:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ab10dc42df

[21:33] <dalek> rakudo/nom: 7ad4a86 | jnthn++ | src/Perl6/Actions.nqp:

[21:33] <dalek> rakudo/nom: Merge pull request #937 from rakudo/remove-useless-check

[21:33] <dalek> rakudo/nom:

[21:33] <dalek> rakudo/nom: Don't check for an op that doesn't exist.

[21:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7ad4a86771

[21:36] <jnthn> super tired; getting an early night &

[21:36] <timotimo> me, too

[22:39] <lizmat> gfldex: re "please add to the next weekly that the commits 19169cc, 3ffdc37, b9a6dc8, 0bf8b18, c7b14ae, ce7c9f6 clarify the relationship between containers, default types and type constraints -- what used to be a rich source of confusion", not sure how to put that in a P6W entry in a nice readable, clickable form  :-(

[22:44] <japhb> lizmat: Do those commits all point to the same doc or two?  You could point to those as being rewritten for clarity ....

[22:45] <babydrop> lizmat: "There were a <a href="https://github.com/perl6/doc/compare/19169cc...master">number of improvements to documentation,</a> including clarification to containers, types, and type constraints

[22:46] <babydrop> well, https://github.com/perl6/doc/compare/19169cc...e01fd79 since master will move

[22:47] <japhb> .ask jnthn You mentioned that concurrency was going to remain on your brain for at least the first half of 2017.  Do you have any idea how much remains in the "make it work reliably" category, and when you'll be able to work on "make it fast/scalable/efficient"?  I'm starting to write code that seems to be hitting non-linearities in the scheduler.

[22:47] <yoleaux2> japhb: I'll pass your message to jnthn.

[22:49] <japhb> .ask jnthn Also, is it possible to reserve a single real thread for the main app thread?  I've got some high-concurrency code where the main thread (which actually does the I/O in this case) gets very janky, and I'm guessing that user-visible task is getting starved for CPU resources by lots of background tasks.

[22:49] <yoleaux2> japhb: I'll pass your message to jnthn.

[22:52] <lizmat> and another issue of Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2016/12/05/2016-49-its-looking-a-lot-like-blog-posts/

[23:04] <tadzik> \o/
