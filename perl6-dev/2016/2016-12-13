[00:06] <samcv> nice, more work on uniprops imminent. getting Titlecase_Mapping, Uppercase_Mapping, Lowercase_Mapping and 'Name' working

[00:16] <dalek> roast: 17a5f0e | samcv++ | S15-unicode-information/uniprop.t:

[00:16] <dalek> roast: Add uniprop tests for 'Name' property and some rewording desc.

[00:16] <dalek> roast: review: https://github.com/perl6/roast/commit/17a5f0e278

[00:53] <dalek> roast: 82f679d | samcv++ | S15-unicode-information/uniprop.t:

[00:53] <dalek> roast: Add tests for uniprop 'Numeric_Value' and additional others

[00:53] <dalek> roast:

[00:53] <dalek> roast: Add tests 'Dash' and 'Script' as well, and keep a list

[00:53] <dalek> roast: of the ones we test the actual value of at the top.

[00:53] <dalek> roast: Eventually we should test all Unicode properties

[00:53] <dalek> roast: on at least one codepoint per property

[00:53] <dalek> roast: review: https://github.com/perl6/roast/commit/82f679dee3

[01:04] <phatbot> in $uniprop-type = 'B' if ~$type eq 'Binary'; and one line below it, no need for ~$type (it's already done that a few lines above and eq would work fine even if it weren't)

[01:11] <dalek> roast: 1dde4a5 | samcv++ | S15-unicode-information/uniprop.t:

[01:11] <dalek> roast: uniprop: test "Bidi_Paired_Bracket"

[01:11] <dalek> roast: review: https://github.com/perl6/roast/commit/1dde4a528f

[01:26] <b2gills> Perhaps *.uniprop('Numeric_Value') could just redirect to *.unival . at least for the time being.

[01:45] <phatbot> t/spec/S15-unicode-information/uniprop.rakudo.moar              (Wstat: 256 Tests: 0 Failed: 0)

[01:45] <phatbot> Non-zero exit status: 1

[01:45] <phatbot> Parse errors: No plan found in TAP output

[01:47] <samcv> b2gills, that's what my PR does

[01:47] <samcv> hmm did i mess up

[01:48] <b2gills> samcv: Oh I didn't look

[01:48] <dalek> roast: f0f06aa | samcv++ | S15-unicode-information/uniprop.t:

[01:48] <dalek> roast: Test 'Bidi_Mirroring_Glyph' for uniprop

[01:48] <dalek> roast: review: https://github.com/perl6/roast/commit/f0f06aad5b

[01:49] <samcv> i was talking to phatbot

[01:49] <samcv> but yeah the PR i made does unival for 'nv'/'Numeric_Value'

[01:51] <phatbot> Ah.

[01:51] <phatbot> samcv: todo fudges need a message

[01:51] <samcv> oh

[01:51] <samcv> k

[01:51] <phatbot> well, all fudge I guess.

[01:51] <phatbot> ------> <BOL>‚èètodo(); isa-ok "¬Ω".uniprop('Numeric_Valu

[01:51] <phatbot> Calling todo() will never work with any of these multi signatures:

[01:52] <phatbot> ($reason, $count = 1)

[01:52] <samcv> ah

[01:56] <dalek> roast: b171e24 | samcv++ | S15-unicode-information/uniprop.t:

[01:56] <dalek> roast: Add messages for the `todo`'s

[01:56] <dalek> roast: review: https://github.com/perl6/roast/commit/b171e24ca6

[02:00] <samcv> u: LRM

[02:00] <unicodable6> samcv, Found nothing!

[02:00] <samcv> u: directional

[02:00] <unicodable6> samcv, U+202C POP DIRECTIONAL FORMATTING [Cf] (‚Ä¨)

[02:00] <unicodable6> samcv, U+2069 POP DIRECTIONAL ISOLATE [Cf] (‚Å©)

[02:00] <samcv> u: direction

[02:00] <unicodable6> samcv, U+202C POP DIRECTIONAL FORMATTING [Cf] (‚Ä¨)

[02:00] <unicodable6> samcv, U+2069 POP DIRECTIONAL ISOLATE [Cf] (‚Å©)

[02:00] <unicodable6> samcv, U+1DA07 SIGNWRITING FACE DIRECTION POSITION NOSE FORWARD TILTING [Mn] (‚óåù®á)

[02:00] <unicodable6> samcv, https://gist.github.com/52e1ea8f4e7a29627049c6b5a7081404

[02:01] <samcv> u: rtl

[02:01] <unicodable6> samcv, U+2EF1 CJK RADICAL TURTLE [So] (‚ª±)

[02:01] <unicodable6> samcv, U+2EF2 CJK RADICAL J-SIMPLIFIED TURTLE [So] (‚ª≤)

[02:01] <unicodable6> samcv, U+2EF3 CJK RADICAL C-SIMPLIFIED TURTLE [So] (‚ª≥)

[02:01] <unicodable6> samcv, https://gist.github.com/5235caa780b878f9103d406b44816fa4

[02:04] <jdv79> how many bots do we have now?

[02:04] <phatbot> not enough :)

[02:05] * phatbot counts 13 in #zofbot

[02:15] <dalek> roast: cb977cc | (Zoffix Znet)++ | S15-unicode-information/uniprop.t:

[02:15] <dalek> roast: Quote fudge messages

[02:15] <dalek> roast: review: https://github.com/perl6/roast/commit/cb977ccf3e

[02:21] <dalek> rakudo/nom: 6fc7698 | (Zoffix Znet)++ | src/Perl6/Actions.nqp:

[02:21] <dalek> rakudo/nom: Throw useful message when <sym> is not used in a proto regex

[02:21] <dalek> rakudo/nom:

[02:21] <dalek> rakudo/nom: Bug finding: https://irclog.perlgeek.de/perl6/2016-12-12#i_13729253

[02:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6fc76989c0

[02:22] <dalek> roast: 81cd6a6 | (Zoffix Znet)++ | S05-grammar/action-stubs.t:

[02:22] <dalek> roast: Test incorrect use of <sym> throws useful message

[02:22] <dalek> roast:

[02:22] <dalek> roast: Bug finding: https://irclog.perlgeek.de/perl6/2016-12-12#i_13729253

[02:22] <dalek> roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/6fc76989c0

[02:22] <dalek> roast: review: https://github.com/perl6/roast/commit/81cd6a6c04

[02:23] <phatbot> Enough for the day.

[02:23] * phatbot drops to bed

[05:10] <dalek> roast: bc9e619 | samcv++ | S15-unicode-information/uniprop.t:

[05:10] <dalek> roast: uniprop: add tests for 6 more Unicode properties.

[05:10] <dalek> roast:

[05:10] <dalek> roast: ASCII_Hex_Digit

[05:10] <dalek> roast: Hex_Digit

[05:10] <dalek> roast: Case_Ignorable

[05:10] <dalek> roast: Bidi_Class

[05:10] <dalek> roast: Word_Break

[05:10] <dalek> roast: Line_Break

[05:10] <dalek> roast: review: https://github.com/perl6/roast/commit/bc9e619a8b

[05:15] <samcv> tests for 17 so far.. out of ~110 unicode properties total...

[05:15] <samcv> :(

[06:09] <dalek> roast: 2fd1806 | samcv++ | S15-unicode-information/uniprop.t:

[06:09] <dalek> roast: uniprop add tests for Age, na1, Soft_Dotted and Quotation_Mark

[06:09] <dalek> roast: review: https://github.com/perl6/roast/commit/2fd1806653

[07:55] <[Tux]> This is Rakudo version 2016.11-221-g6fc76989c built on MoarVM version 2016.11-44-g8e24145d

[07:55] <[Tux]> csv-ip5xs        3.235

[07:55] <[Tux]> test            14.638

[07:55] <[Tux]> test-t           6.459

[07:55] <[Tux]> csv-parser      15.976

[09:56] <dalek> nqp: 8db31c6 | (Pawel Murias)++ | src/vm/js/nqp-runtime/container-specs.js:

[09:56] <dalek> nqp: [js] Refactor to use STable.addInternalMethods(class {...})

[09:56] <dalek> nqp:

[09:56] <dalek> nqp: Also fix some method signatures.

[09:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8db31c6b79

[09:56] <dalek> nqp: 2987189 | (Pawel Murias)++ | t/moar/02-qast-references.t:

[09:56] <dalek> nqp: Fix test descriptions.

[09:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/298718986b

[09:56] <dalek> nqp: c4cf849 | (Pawel Murias)++ | src/vm/js/nqp-runtime/container-specs.js:

[09:56] <dalek> nqp: [js] Make nqp::iscont work on NativeRefs.

[09:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c4cf8499a5

[09:56] <dalek> nqp: b9612c5 | (Pawel Murias)++ | src/vm/js/Operations.nqp:

[09:56] <dalek> nqp: [js] Implement nqp::xor.

[09:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b9612c5747

[10:14] <dalek> nqp: f5ceea7 | (Pawel Murias)++ | t/nqp/060-bigint.t:

[10:14] <dalek> nqp: [js] Stop skipping a test.

[10:14] <dalek> nqp:

[10:14] <dalek> nqp: The bug in bignum that necessiated that has been fixed by hoelzro++.

[10:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f5ceea7a7d

[11:01] <phatbot> samcv: I don't think you have to worry about adding fudges for neizca

[11:01] <phatbot> samcv: can't that be somehow automatically pre-generated?¬†RE tests for 17 so far.. out of ~110 unicode properties total...

[13:38] <dalek> rakudo/nom: 7e1ede4 | Altai-man++ | src/Perl6/Metamodel/RoleToClassApplier.nqp:

[13:38] <dalek> rakudo/nom: Fix of RT #130211 with creating a new hash that connects method names to their respective roles and using that hash to get role name in case of error.

[13:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7e1ede4e68

[13:38] <dalek> rakudo/nom: 2e487e2 | Altai-man++ | src/Perl6/Metamodel/RoleToClassApplier.nqp:

[13:38] <dalek> rakudo/nom: Move method-role gathering code into error block

[13:38] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130211

[13:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2e487e2ff6

[13:38] <dalek> rakudo/nom: c254931 | Altai-man++ | src/Perl6/Metamodel/RoleToClassApplier.nqp:

[13:38] <dalek> rakudo/nom: We don't need to build a table for all methods, we only need particular method role.

[13:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c2549310d5

[13:38] <dalek> rakudo/nom: bff0510 | (Zoffix Znet)++ | src/Perl6/Metamodel/RoleToClassApplier.nqp:

[13:38] <dalek> rakudo/nom: Merge pull request #954 from Altai-man/rt130211-fix

[13:38] <dalek> rakudo/nom:

[13:38] <dalek> rakudo/nom: Display role requiring stubbed method

[13:38] <dalek> rakudo/nom:

[14:11] <[Coke]> There is no point in fudging anything other than rakudo at this point

[14:19] <dalek> rakudo/nom: 1d46004 | (Zoffix Znet)++ | src/core/Range.pm:

[14:19] <dalek> rakudo/nom: Fix crash on Rat Ranges constructed with Range ops

[14:19] <dalek> rakudo/nom:

[14:19] <dalek> rakudo/nom: When using range ops, we clone the Range. However, the code

[14:19] <dalek> rakudo/nom: makes a mistaken assumption that Mu.clone can tweedle anything,

[14:19] <dalek> rakudo/nom: but only things with accessors can be passed as tweedles. As a

[14:19] <dalek> rakudo/nom: result, the private $!is-int attribute wasn't being set, leading

[14:19] <dalek> rakudo/nom: to an explosion when a Rat range was being treated as an Int Range.

[14:19] <dalek> rakudo/nom:

[14:19] <dalek> rakudo/nom: Fix by setting $!is-int attr in the clone ourselves.

[14:19] <dalek> rakudo/nom:

[14:19] <dalek> rakudo/nom: Fixes RT#128887: https://rt.perl.org/Ticket/Display.html?id=128887

[14:19] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128887

[14:19] <phatbot> review: https://github.com/rakudo/rakudo/commit/1d46004dd3575a02f3656b4567ff5189caf180b9

[14:20] <dalek> roast: d23534b | (Zoffix Znet)++ | S02-types/range.t:

[14:20] <dalek> roast: Test Rat Ranges made with Range ops do not crash

[14:20] <dalek> roast:

[14:20] <dalek> roast: RT#128887: https://rt.perl.org/Ticket/Display.html?id=128887

[14:20] <dalek> roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/1d46004dd3575a0

[14:20] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128887

[14:20] <dalek> roast: review: https://github.com/perl6/roast/commit/d23534b2d7

[14:22] <phatbot> nom nom nyam...

[14:22] <phatbot> Tasty bug

[14:27] <phatbot> Not 100% sure $clone.WHAT is OK. Should it be ::?CLASS or Range? Not sure how that will play out in subclasses

[15:22] <dalek> roast: 815e0cd | lizmat++ | S15-unicode-information/uniprop.t:

[15:22] <dalek> roast: Unfudge passing tests

[15:22] <dalek> roast: review: https://github.com/perl6/roast/commit/815e0cd356

[15:36] <MasterDuke_> jnthn: i tried removing first the sink call (just having $past in the QAST::Want), then removing the Want completely (in my change -n to 'while get()' attempt). no errors when run, but running '-ne ".say"' doesn't print anything

[15:39] <MasterDuke_> i tried just blindly calling tweak_loop on my $past, but it dies at https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.nqp#L1741 complaining about trying to get an attribute from a NQPMu (or something like that)

[15:40] <MasterDuke_> i haven't yet tried just pulling out bits of tweak_loop manually

[15:43] <MasterDuke_> but i'm pretty sure an END phaser worked without doing anything tweak_loop related, are they handled differently? (i.e., if i tried LAST it wouldn't work?)

[15:54] <dogbert17> .seen jnthn

[15:54] <yoleaux2> I saw jnthn 12:50Z in #moarvm: <jnthn> o/ brrt

[15:56] <dogbert17> jnthn: does the included gist contain anything useful from a bug hunting perspective, if so I'll report it. https://gist.github.com/dogbert17/8e0194e19bcb48477b7500f86a3c8f33

[16:00] <[Coke]> m: say "¬Ω".uniprop('Numeric_Value').WHAT

[16:00] <camelia> rakudo-moar 1d4600: OUTPUT¬´(Str)‚ê§¬ª

[16:03] <phatbot> m: dd "¬Ω".uniprop('Numeric_Value')

[16:03] <camelia> rakudo-moar 1d4600: OUTPUT¬´"0.5"‚ê§¬ª

[16:03] <phatbot> neat

[16:03] <phatbot> u: half zero

[16:03] <unicodable6> phatbot, U+0F33 TIBETAN DIGIT HALF ZERO [No] (‡º≥)

[16:03] <phatbot> m: dd "‡º≥".uniprop('Numeric_Value')

[16:03] <camelia> rakudo-moar 1d4600: OUTPUT¬´"-0.5"‚ê§¬ª

[16:06] <jnthn> dogbert17: Yes, somewhat, glancing at it quickly. Was MVM_GC_DEBUG turned on at all?

[16:06] <dogbert17> jnthn: I can check when I get home. Did you expect more output?

[16:08] <jnthn> Well, if there isn't more then it's a less obvious bug...

[16:08] <dogbert17> *if* it was on it was set to 1

[16:08] <jnthn> OK; try it on 2 also if that doesn't slow stuff down enough to hide the bug :)

[16:08] <dogbert17> will do, running with 64k nursery

[16:11] <[Coke]> looks like we have a bug report from mt1957 on perl6-users

[16:24] * phatbot read title only so far...

[16:24] <phatbot> Doesn't sound good :}

[16:24] <phatbot> For those not subbed: http://www.nntp.perl.org/group/perl.perl6.users/2016/12/msg3094.html

[16:25] <lizmat> I think there's an RT for that now as well

[16:26] <phatbot> ah yeah https://rt.perl.org/Ticket/Display.html?id=130338#ticket-history

[16:30] <lizmat> RabidGravy++ # nice post

[16:30] <lizmat> RabidGravy: some paragraphs seem to have formatting issues at the end

[16:31] <lizmat> e.g.: It couldn‚Äôt really be much more

[16:31] <lizmat> simple.

[16:31] <lizmat> simple being on the next line without it needing to be

[16:41] <phatbot> the version in that ticket is 2016.11-238-g2f502b4 but when I try https://github.com/rakudo/rakudo/commit/2f502b4 I get a 404, presumably because there's more than one commit with that short part?

[16:41] * phatbot wonders what's the easy way around that issue

[16:42] <phatbot> https://github.com/rakudo/rakudo/commit/2016.11-238-g2f502b4 is a blank page entirely :o

[16:43] <phatbot> error: pathspec '2016.11-238-g2f502b4' did not match any file(s) known to git.

[16:44] * phatbot is puzzled

[16:44] <phatbot> I'm on head and I'm only on 2016.11-226-g1d46004 wtf

[16:45] <phatbot> I guess it's proof that time travel exists...

[16:46] <geekosaur> usually get it to emit a longer hash

[16:46] <phatbot> geekosaur: how?

[16:46] <phatbot> m: $*PERL.compiler.version.say

[16:46] <camelia> rakudo-moar 1d4600: OUTPUT¬´v2016.11.226.g.1.d.46004‚ê§¬ª

[16:46] <geekosaur> I doubt the full hash is in the perl config, sadly

[16:46] <phatbot> Ohhh... that's a puzzle piece actually.

[16:47] <phatbot> Oh wait, no. It would've read 2016.*10* for what I was thinking.

[16:47] <geekosaur> if it was that, git fetch --tags would fix it

[16:48] * phatbot replies asking for more info

[16:53] <geekosaur> might be worth figuring out how to embed the full hash (from e.g. git log)

[16:54] <geekosaur> won't help now of course

[16:55] <phatbot> I guess it's not needed, since there's a tag too and that has the distance from the tag in it too, doesn't it?

[16:55] <phatbot> like -226- is 226th commit from the tag

[16:55] <phatbot> in 2016.11.226.g.1.d.46004

[16:57] <geekosaur> but not everything takes git describe output

[16:57] <phatbot> ah

[16:58] <geekosaur> a full hash should work everywhere

[16:59] <geekosaur> ok, not a branch

[16:59] * geekosaur had wondered in particular if it was the lexical modules stuff...

[17:27] <jnthn> MasterDuke_: Sorry, was tied up with a $dayjob task before. END is handled quite differently from the loop phasers, so wouldn't be affected by tweak_loop not being called. It's LAST/NEXT/FIRST that would be at issue. Try added a QAST::Op.new( :op('say'), QAST::SVal.new( :value('here') ) ) or so just above the loop to see you reach that code path though

[17:30] <dogbert2> jnthn: gist updated, 64k nursery, MVM_GC_DEBUG=2. https://gist.github.com/dogbert17/8e0194e19bcb48477b7500f86a3c8f33

[17:31] * phatbot Takes RT130205

[17:31] * phatbot Takes RT130213

[17:31] <phatbot> Sometime to hack on for the day.

[17:31] <phatbot> *thing

[17:33] <jnthn> dogbert2: ooh! :)

[17:33] <jnthn> That's more interesting

[17:34] <dogbert2> cool, it's possible to break quite a few tests with these settings

[17:38] <MasterDuke_> jnthn: thanks, i'll play around with it some more this evening

[17:40] <dogbert2> should I report a MoarVM issue with the data from the gist?

[17:40] <jnthn> dogbert2: Please. I'll take a look tomorrow. :)

[17:41] <jnthn> dinner &

[17:52] <b2gills> m: (supply loop { emit Bool.pick }).tap: *.say # Should the supply "keyword" be able used like this

[17:52] <camelia> rakudo-moar 1d4600: OUTPUT¬´No such method 'phasers' for invocant of type 'Code'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:53] <b2gills> m: say supply loop {...}

[17:53] <camelia> rakudo-moar 1d4600: OUTPUT¬´Supply.new‚ê§¬ª

[17:57] <phatbot> m: react { whenever (supply {loop { emit Bool.pick }}).tap { .say } }

[17:57] <camelia> rakudo-moar 1d4600: OUTPUT¬´(timeout)¬ª

[17:58] <phatbot> m: react { whenever (supply {emit Bool.pick}).tap { .say } }

[17:58] <camelia> rakudo-moar 1d4600: OUTPUT¬´Tap.new‚ê§¬ª

[17:58] <phatbot> hm, I thought we could whenever a tap

[17:59] <phatbot> m: react { whenever supply {loop {emit Bool.pick}} { .say } }

[17:59] <camelia> rakudo-moar 1d4600: OUTPUT¬´(timeout)¬ª

[18:00] <phatbot> m: react { whenever supply {for ^10 {emit Bool.pick}} { .say } }

[18:00] <camelia> rakudo-moar 1d4600: OUTPUT¬´True‚ê§True‚ê§True‚ê§True‚ê§True‚ê§False‚ê§True‚ê§True‚ê§True‚ê§False‚ê§¬ª

[18:02] <phatbot> rakudobugged in RT#130342

[18:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130342

[18:14] <jnthn> Hmm, I thought it always wanted a block.

[18:14] <jnthn> Will have a look at it when I get chance

[18:14] <jnthn> Oh...

[18:14] <jnthn> I can guess though

[18:14] <jnthn> If it parses as a blorst then the thunked statement will be a Code

[18:15] <jnthn> But a Code cannot have phasers, those are in the Block class (a subclass of Code)

[18:15] <jnthn> Thus the error.

[18:15] <jnthn> So probably just turning a .phasers into a .?phasers or so

[18:17] <dogbert2> jnthn, reported as MoarVM issue 452

[18:20] <phatbot> m: say "foo" for 42.?dasdasdsa

[18:20] <camelia> rakudo-moar 1d4600: OUTPUT¬´foo‚ê§¬ª

[18:20] <phatbot> hmm

[18:22] <jnthn> Ah, it turns Nil and Nil will iterate :)

[18:22] <jnthn> May be safter to nqp::istype(&thing, Block)

[18:22] <phatbot> ok

[18:27] <phatbot> Is (supply loop { emit Bool.pick }).tap: *.say; supposed to produce some output tho? It just exits with my patch

[18:28] <phatbot> m: (supply for ^10 { emit Bool.pick }).tap: *.say;

[18:28] <camelia> rakudo-moar 1d4600: OUTPUT¬´True‚ê§True‚ê§False‚ê§False‚ê§False‚ê§False‚ê§False‚ê§False‚ê§True‚ê§True‚ê§No such method 'phasers' for invocant of type 'Code'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:28] <phatbot> This works.

[18:28] <b2gills> m: supply { loop { emit Bool.pick }}).tap: *.say

[18:28] <camelia> rakudo-moar 1d4600: OUTPUT¬´===SORRY!=== Error while compiling <tmp>‚ê§Unexpected closing bracket‚ê§at <tmp>:1‚ê§------> supply { loop { emit Bool.pick }}‚èè).tap: *.say‚ê§¬ª

[18:28] <b2gills> m: (supply { loop { emit Bool.pick }}).tap: *.say

[18:28] <camelia> rakudo-moar 1d4600: OUTPUT¬´(timeout)False‚ê§False‚ê§True‚ê§False‚ê§False‚ê§True‚ê§False‚ê§False‚ê§True‚ê§False‚ê§False‚ê§False‚ê§True‚ê§False‚ê§True‚ê§False‚ê§False‚ê§False‚ê§True‚ê§False‚ê§False‚ê§False‚ê§True‚ê§True‚ê§True‚ê§False‚ê§True‚ê§True‚ê§False‚ê§False‚ê§False‚ê§False‚ê§Tr‚Ä¶¬ª

[18:29] <phatbot> eh... why did I run that last one on my box

[18:30] <[Coke]> jnthn: did you see the weird behavior with doc's htmlify --parallel=3? (uses some async stuff and then dies horribly or segvs)

[18:30] <phatbot> b2gills: so I take it the blockless version is meant to work the same?

[18:31] <b2gills> That is why I started this line of thought, I didn't know. I would suspect yes though.

[18:32] <phatbot> weird that (supply { for ^10 { say "picking"; emit Bool.pick } }).tap: *.say; works but not with loop {}

[18:32] <b2gills> I once ran some Perl6 code on my computer that used so many resources I couldn't even open another terminal to run `pkill moar`, so I used an old laptop to ssh in to do that.

[18:33] <phatbot> :)

[18:44] <lizmat> phatbot: you looking at RT #130342 ?  otherwise I will

[18:44] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130342

[18:44] <ugexe> m: (supply lazy loop { emit Bool.pick }).tap: *.say;

[18:44] <camelia> rakudo-moar 1d4600: OUTPUT¬´(timeout)False‚ê§True‚ê§True‚ê§True‚ê§True‚ê§False‚ê§True‚ê§True‚ê§False‚ê§False‚ê§True‚ê§True‚ê§True‚ê§False‚ê§True‚ê§True‚ê§False‚ê§True‚ê§False‚ê§True‚ê§False‚ê§True‚ê§True‚ê§False‚ê§True‚ê§False‚ê§False‚ê§True‚ê§True‚ê§True‚ê§False‚ê§False‚ê§False‚ê§Tr‚Ä¶¬ª

[18:45] <phatbot> lizmat: go ahead. I'm not skilled enough to crack this one yet. I've added this if() and the error went away, but (supply loop { emit Bool.pick }).tap: *.say; doesn't produce any output and just exits https://gist.github.com/zoffixznet/bf7c5a84c4d82854f95b8347901982fd

[18:46] <phatbot> and I've added that debug stuff now before the if() but I'm just fumbling in the dark :)

[18:46] <ugexe> it produces output if you put `lazy` in front of loop

[18:47] <phatbot> it produces output if you put a for ^5 { instead of loop

[18:47] <phatbot> ugexe: so why is it needed if it's not needed for the block version of supply?

[18:48] <ugexe> dunno. I just know there have been other weird things like that where explicitly making it lazy makes it work

[18:48] <phatbot> hm, ok, the debug statement shown in the diff just prints the messages and exits immediatelly, so I &!block ends up not being the loop but something else

[18:49] <phatbot> *I suspect

[18:49] * phatbot gives up

[18:59] <dalek> rakudo/nom: a980eb1 | lizmat++ | src/core/Supply.pm:

[18:59] <dalek> rakudo/nom: Fix RT #130342

[18:59] <dalek> rakudo/nom:

[18:59] <dalek> rakudo/nom: Only blocks can haz phasers.

[18:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a980eb125d

[18:59] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130342

[19:00] <phatbot> :/

[19:01] <lizmat> fwiw, I'm double testing this one

[19:01] <lizmat> I think the problem is actually in the parsing of supply loop { }

[19:01] <lizmat> supply { loop { } } works as expected

[19:02] <lizmat> m: (supply { loop { emit Bool.pick } }).tap: *.say;

[19:02] <camelia> rakudo-moar 1d4600: OUTPUT¬´(timeout)False‚ê§False‚ê§False‚ê§False‚ê§True‚ê§True‚ê§True‚ê§False‚ê§False‚ê§False‚ê§False‚ê§False‚ê§False‚ê§False‚ê§False‚ê§True‚ê§False‚ê§True‚ê§True‚ê§False‚ê§False‚ê§False‚ê§False‚ê§False‚ê§False‚ê§True‚ê§True‚ê§False‚ê§False‚ê§True‚ê§True‚ê§False‚ê§F‚Ä¶¬ª

[19:07] <jnthn> [Coke]: It's in RT, but plenty of better-golfed things also are, so I'll pick those off first

[19:07] <jnthn> [Coke]: With a bit of luck, some of them are also the issue afflicting that

[19:08] <lizmat> jnthn: what can create a Code object ?

[19:09] <lizmat> a blorst?

[19:09] <jnthn> lizmat: Something that directly has type Code? A load of things.

[19:09] <jnthn> Yeah, a blorst will do it

[19:09] <lizmat> ok, so I guess we need to do something special for the

[19:09] <lizmat> supply loop { }

[19:09] <lizmat> case

[19:10] <jnthn> I'd expect for any `supply EXPR` case, no?

[19:10] <lizmat> cause that apparently stores a Code in the &!block

[19:10] <jnthn> Ah

[19:10] <lizmat> guess so, yes

[19:10] <jnthn> It's only a problem in so far as we check to see if it has phasers, though?

[19:10] <lizmat> well, *that* problem I fixed

[19:11] <jnthn> OK, what other problems are there? I didn't think there were any further significant ones :)

[19:11] <lizmat> but then the example: (supply loop { emit Bool.pick }).tap: *.say

[19:11] <lizmat> doesn't work

[19:11] <phatbot> it just exits. even tho, say, supply for ^6 { .... } works

[19:11] <lizmat> as it does when it is: (supply { loop { emit Bool.pick  }}).tap: *.say

[19:12] <jnthn> What if it's supply eager loop ... ?

[19:12] <jnthn> May be a case of missing sinking

[19:12] <lizmat> ah, perhaps, recomping atm

[19:12] <jnthn> Gotta go for a bit, but check how we handle this with gather

[19:13] <jnthn> Since I guess it would also have to worry about the same thing

[19:13] <jnthn> m: .say for gather loop { take 10 }

[19:13] <camelia> rakudo-moar a980eb: OUTPUT¬´(timeout)10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚ê§10‚Ä¶¬ª

[19:13] <jnthn> Yeah, that handles it

[19:14] <jnthn> bbiab :)

[19:14] <lizmat> yeah, eager makes it work

[19:15] <lizmat> phatbot: not seeing anything special in the parsing of gather or actions

[19:15] <lizmat> so I guess it lives in GATHER

[19:18] <[Coke]> jnthn: I'll see if I can golf it better. thanks.

[19:18] <lizmat> ok, my flu ridden head doesn't see it right away

[19:19] <lizmat> perhaps later, otherwise tomorrow

[19:19] <phatbot> :)

[19:33] <RabidGravy> lizmat, there's something funny about the way wordpress handles the html formatting :)

[20:05] <phatbot> Hm. Apparently if you install readline and then uninstall it (with panda) your REPL starts showing this giant message: https://gist.github.com/zoffixznet/499106957d4af7e374e2aca6b20cb222

[20:07] <phatbot> wow... that's just laziness

[20:08] <phatbot> I thought warning in REPL printing a completely unrelated message was an accident, but there's actualyl a test for it :S

[20:15] <phatbot> well or some other reason :(

[20:21] <phatbot> m: take

[20:21] <camelia> rakudo-moar a980eb: OUTPUT¬´take without parameters doesn't make sense‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:21] <phatbot> m: emit

[20:21] <camelia> rakudo-moar a980eb: OUTPUT¬´===SORRY!=== Error while compiling <tmp>‚ê§Calling emit() will never work with declared signature (\value --> Nil)‚ê§at <tmp>:1‚ê§------> <BOL>‚èèemit‚ê§¬ª

[20:32] <dalek> rakudo/nom: 42b7147 | (Zoffix Znet)++ | / (2 files):

[20:32] <dalek> rakudo/nom: Improve warnings in REPL

[20:32] <dalek> rakudo/nom:

[20:32] <dalek> rakudo/nom: Currently, the CONTROL {} block reports "Control flow commands not

[20:32] <dalek> rakudo/nom: allowed in toplevel" message for any control exception, which includes

[20:32] <dalek> rakudo/nom: warnings, resulting in very confusing messages any time a warning

[20:32] <dalek> rakudo/nom: is emited.

[20:32] <dalek> rakudo/nom:

[20:32] <dalek> rakudo/nom: Fix by adding checks for warnings and print those instead. Also improve

[20:33] <dalek> rakudo/nom: emit/take exceptions by reporting that emit/take was outside an

[20:33] <dalek> rakudo/nom: expected enclosure.

[20:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/42b714749d

[20:40] <phatbot> samcv: where does .history-file attribute come from? I see it's used in a bunch of places

[20:40] <samcv> it's in the REPL line

[20:40] <samcv> err it's in the file

[20:40] <samcv> it's a method

[20:40] <samcv> of the class they inherit from

[20:41] <samcv> (both linenoise and readline)

[20:42] <samcv> i tested and it works and doesn't hang with that PR

[20:43] <phatbot> oh right, I'm blind

[20:43] <dalek> rakudo/nom: b716b00 | samcv++ | src/core/REPL.pm:

[20:43] <dalek> rakudo/nom: Fix Readline REPL not initializing properly.

[20:43] <dalek> rakudo/nom:

[20:43] <dalek> rakudo/nom: Would break since the last commits to add a history file in.

[20:43] <dalek> rakudo/nom: Fix this.

[20:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b716b007cc

[20:43] <dalek> rakudo/nom: 772e2f2 | (Zoffix Znet)++ | src/core/REPL.pm:

[20:43] <dalek> rakudo/nom: Merge pull request #955 from samcv/REPL-readline

[20:43] <dalek> rakudo/nom:

[20:43] <dalek> rakudo/nom: Fix Readline REPL not initializing properly.

[20:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/772e2f28b0

[20:45] <samcv> phatbot, i had the same thought until i did ctrl + f

[20:45] <phatbot> I was ctrl+f '.history-file' thinking it was an attribute :P

[20:47] <phatbot> m: class A { method foo {say "hi"} }; role B { method hi {‚Ä¶}}; my $na = A but B; say $na

[20:47] <camelia> rakudo-moar a980eb: OUTPUT¬´Method 'hi' must be implemented by A+{B} because it is required by a role B‚ê§  in any compose_method_table at gen/moar/Metamodel.nqp line 2827‚ê§  in any apply at gen/moar/Metamodel.nqp line 2841‚ê§  in any compose at gen/moar/Metamodel.nqp line 3013‚ê§  ‚Ä¶¬ª

[20:47] <phatbot> .oO( and it is? )

[20:49] <phatbot> oh :}

[20:49] <phatbot> m: class A { method foo {say "hi"} }; role B { method foo {‚Ä¶}}; my $na = A but B; say $na

[20:49] <camelia> rakudo-moar a980eb: OUTPUT¬´(A+{B})‚ê§¬ª

[20:52] <dalek> rakudo/nom: 7b84adc | jnthn++ | src/Perl6/Metamodel/RoleToClassApplier.nqp:

[20:52] <dalek> rakudo/nom: Grammar fix to error message.

[20:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7b84adcec5

[21:17] <nine> The good news is that I've already found 2 bugs in dyncall. Bad news is that it's only in comments and that I'm no closer to solving the x86 NC callback issue dogbert17++ reported

[21:25] <dogbert2> nine: let me know if there's something you want me to test on 32-bit

[21:28] <nine> dogbert2: the really odd part are the ??? stackframes where the invalid read seems to happen. I don't know what exactly they are and cannot even get a proper disassembly. The next frame should be dcCall_x86_cdecl.

[21:36] <dogbert2> nine: I can set a breakpoint in dc_callvm_call_x86_cdecl if that is of any use

[21:37] <nine> It can't hurt in any case :)

[21:37] <dogbert2> anything I should look at now that the program is stopped?

[21:37] <dogbert2> Breakpoint 1, 0xb7dcbd1a in dc_callvm_call_x86_cdecl () from //home/dogbert/repos/rakudo/install/lib/libmoar.so

[21:37] <dogbert2> (gdb) bt

[21:37] <dogbert2> #0  0xb7dcbd1a in dc_callvm_call_x86_cdecl () from //home/dogbert/repos/rakudo/install/lib/libmoar.so

[21:37] <dogbert2> #1  0xb7dcb925 in dcCallVoid () from //home/dogbert/repos/rakudo/install/lib/libmoar.so

[21:37] <dogbert2> #2  0xb7d01bbe in MVM_nativecall_invoke (tc=0x804c450, res_type=0x8389a40, site=0xa1294a0, args=0xb7802694) at src/core/nativecall_dyncall.c:587

[21:39] <nine> Is this the first or the second time you hit the break point? The first would be the "simple callback" test where everything seems to be alright

[21:41] <dogbert2> the first

[21:42] <dogbert2> #0  0xb7dcbd1a in dc_callvm_call_x86_cdecl () from //home/dogbert/repos/rakudo/install/lib/libmoar.so

[21:42] <dogbert2> #1  0xb7dcb925 in dcCallVoid () from //home/dogbert/repos/rakudo/install/lib/libmoar.so

[21:42] <dogbert2> #2  0xb7d01bbe in MVM_nativecall_invoke (tc=0x804c450, res_type=0x8389a40, site=0xa12a460, args=0xb780b030) at src/core/nativecall_dyncall.c:587

[21:42] <dogbert2> #3  0xb7cd3bce in MVM_interp_run (tc=0x804c450, initial_invoke=0xb7dc9137 <toplevel_initial_invoke>, invoke_data=0x80b3cc0) at src/core/interp.c:3984

[21:42] <dogbert2> #4  0xb7dc9266 in MVM_vm_run_file (instance=0x804c008, filename=0xbffff2ea "/home/dogbert/repos/rakudo/perl6.moarvm") at src/moar.c:309

[21:42] <dogbert2> y

[21:43] <dogbert2> that should be the second time

[21:45] <ugexe> m: my @a = [".LTA" => 1]; say "xxx" ~~ any(flat @a);

[21:45] <camelia> rakudo-moar 7b84ad: OUTPUT¬´No such method '.LTA' for invocant of type 'Str'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:45] <nine> Next step should be a call into dcCall_x86_cdecl followed by a call to TakeIntCallback

[21:47] <dogbert2> nine: here's a more complete gist, i.e. bt full. https://gist.github.com/dogbert17/1b347d5473177856d5545aaa7aa67dfe

[21:50] <phatbot> <Zoffix> m: my @allowed-types = 'uc', 'lc', 'tc', 'na', 'B', 'S', 'nv'; for ^100_000 { my $x = 'x' eq any @allowed-types }; say now - INIT now

[21:50] <phatbot> <camelia> rakudo-moar 6fc769: OUTPUT¬´10.7136853‚ê§¬ª

[21:50] <phatbot> <Zoffix> m: my @allowed-types = 'uc', 'lc', 'tc', 'na', 'B', 'S', 'nv'; for ^100_000 { my $x = @allowed-types.first: 'x' }; say now - INIT now

[21:50] <phatbot> <camelia> rakudo-moar 6fc769: OUTPUT¬´1.14418706‚ê§¬ª

[21:50] <phatbot> <Zoffix> samcv, ^ an example of how slow our Junctions are ATM

[21:50] <phatbot> samcv: not sure if you saw in the other channel.

[21:50] <dogbert2> nine: I have updated the gist after typing advance dcCall_x86_cdecl, new info at the bottom

[21:50] <phatbot> No idea about unicode stuff, so I'll wait for someone else to review and merge https://github.com/rakudo/rakudo/pull/953

[21:51] <samcv> oh

[21:51] <samcv> yeah i am

[21:52] <samcv> did not see it, trying to get some way to benchmark the atom syntax highlighter...

[21:52] <samcv> and trying horribly to write in coffeescript for node

[21:52] <samcv> if anybody knows javascript please help

[21:52] <phatbot> hehe

[21:52] <phatbot> like what kindahelp?

[21:53] <phatbot> and well, I don't know coffeescript

[21:53] <samcv> like should be easy

[21:53] <samcv> i think it's mostly the same thing

[21:53] <samcv> all i'm trying to do is gett all the files in a folder

[21:53] <phatbot> ohh.. I only done web dev with JS so no idea :)

[21:54] <samcv> https://cry.nu/p/q9jk if anybody can help me.. it's working except for

[21:54] <samcv> trying to get the files

[21:56] <AlexDaniel> jdv79: we have less bots than humans. That's unhealthy.

[21:57] <AlexDaniel> 50/50 would be a good ratio

[21:57] <dogbert2> I'm now in TakeIntCallback

[21:57] <samcv> oh i think i got it

[21:57] <samcv> finallyyyy

[21:58] <samcv> sweet i did it!

[21:59] <samcv> nice.

[22:00] <jdv79> AlexDaniel: maybe in 100 years.  more humans is more normal today though.

[22:00] <AlexDaniel> jdv79: I think we can solve it in one month or so

[22:00] <AlexDaniel> there are at least 2 proposals for new whateverables

[22:01] <jdv79> great!

[22:01] <phatbot> Why do we spawn a new bot for every feature tho?

[22:01] <phatbot> And not make it the normal way: one bot does all the feautres

[22:02] <phatbot> I wonder how long it'll take Freenode staff to notice you have a gazillion connections all comming from one host

[22:02] <jdv79> what does a phatbot do?

[22:02] <phatbot> I eat food and complain a lot.

[22:02] <AlexDaniel> it pretends to be a human

[22:03] <jdv79> food sounds good but i have to cook first.  not so enticing.

[22:05] <nine> Oh boy it's late! Sorry, have to leave now. Need to get up early tomorrow

[22:05] <dogbert2> night

[23:41] <phatbot> The REPL error I showed today that occurs after uninstalling Readline... That appears to be just panda failing to uninstall correctly. Works fine with zef
