[06:39] <[Tux]> This is Rakudo version 2016.06-89-ge9019e3 built on MoarVM version 2016.06-9-g8fc21d5

[06:39] <[Tux]> test            15.974

[06:39] <[Tux]> test-t           9.388

[06:39] <[Tux]> csv-parser      16.863

[08:48] <jnthn> Ulti: Good to hear! :-)

[09:54] <dalek> nqp/optimize-with-hoopl: 585423e | (Pawel Murias)++ | src/vm/js/dataflow-optimizer/QAST.hs:

[09:54] <dalek> nqp/optimize-with-hoopl: [js] Add missing file.

[09:54] <dalek> nqp/optimize-with-hoopl: review: https://github.com/perl6/nqp/commit/585423e1b8

[09:54] <dalek> nqp/optimize-with-hoopl: 1b19c44 | (Pawel Murias)++ | src/vm/js/DataFlowOptimizer.nqp:

[09:54] <dalek> nqp/optimize-with-hoopl: [js] Send more info about Vars to the -Ofun optimizer

[09:54] <dalek> nqp/optimize-with-hoopl: review: https://github.com/perl6/nqp/commit/1b19c44e3e

[09:54] <dalek> nqp/optimize-with-hoopl: 0e01a21 | (Pawel Murias)++ | src/vm/js/dataflow-optimizer/ (2 files):

[09:54] <dalek> nqp/optimize-with-hoopl: [js] Define a constant folding fact and transfer function.

[09:54] <dalek> nqp/optimize-with-hoopl: review: https://github.com/perl6/nqp/commit/0e01a21b1f

[09:54] <dalek> nqp/optimize-with-hoopl: 552f787 | (Pawel Murias)++ | src/vm/js/dataflow-optimizer/optimize.hs:

[09:54] <dalek> nqp/optimize-with-hoopl: WIP

[09:54] <dalek> nqp/optimize-with-hoopl: review: https://github.com/perl6/nqp/commit/552f7875cf

[09:54] <dalek> nqp/optimize-with-hoopl: bebf60a | (Pawel Murias)++ | src/vm/js/dataflow-optimizer/optimize.hs:

[09:54] <dalek> nqp/optimize-with-hoopl: [js] Turn an add_i with known arguments into a constant.

[12:15] <tbrowder> A question on handling pod in Pod.nqp:  how should one return if a chunk of pod fails a rule?  It looks like the grammar for a pod table accepts more than is strictly allowed in S26 so I would like to reject the table with an appropriate message.

[12:35] <dalek> rakudo/nom: 516b997 | lizmat++ | src/core/REPL.pm:

[12:35] <dalek> rakudo/nom: Simplify REPL error reporting

[12:35] <dalek> rakudo/nom:

[12:35] <dalek> rakudo/nom: It occurred to me that using the standard error reporting in the REPL

[12:35] <dalek> rakudo/nom: may be a bit overkill:

[12:36] <lizmat> oops, I killed dalek with a single commit ?

[12:36] <lizmat> https://github.com/rakudo/rakudo/commit/516b997a4a26d

[12:43] <jnthn> lizmat: I think retaining the ==SORRY== or so is important too as it is how you know if it's a compile time or runtime error

[12:43] <jnthn> Completely agree that the unknown file thing is totally useless clutter though.

[12:44] <jnthn> It's hugely tempting to get rid of it by regexing it out or so :P

[12:44] <lizmat> yeah... looking at that now

[12:45] <jnthn> oh or

[12:45] <jnthn> Find the place where we append the "in file..." thingy

[12:45] <jnthn> And if it's an unknown file just don't emit it at all

[12:45] <jnthn> Since it's always useless info

[13:03] <dalek> rakudo/nom: 12f12a5 | lizmat++ | src/core/ (2 files):

[13:03] <dalek> rakudo/nom: Fix error reporting more generally

[13:03] <dalek> rakudo/nom:

[13:03] <dalek> rakudo/nom: This reverts 516b997a4a26 .  Basically, <unknown file> will no longer

[13:03] <dalek> rakudo/nom: be shown in *any* error reporting.  This covers the case that happens

[13:03] <dalek> rakudo/nom: in the REPL.  So the output is now:

[13:03] <dalek> rakudo/nom:

[13:03] <dalek> rakudo/nom: > $number = 5;

[13:03] <dalek> rakudo/nom: ===SORRY!=== Error while compiling

[13:03] <dalek> rakudo/nom: Variable '$number' is not declared

[13:03] <dalek> rakudo/nom: ------> <BOL>⏏$number = 5;

[13:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/12f12a5869

[13:12] <dalek> rakudo/nom: 8a2ffac | lizmat++ | src/core/Exception.pm:

[13:12] <dalek> rakudo/nom: Show line number if != 1, Juerd++

[13:12] <dalek> rakudo/nom:

[13:12] <dalek> rakudo/nom: So the output in that case is now:

[13:12] <dalek> rakudo/nom:

[13:12] <dalek> rakudo/nom: > my $a = (

[13:12] <dalek> rakudo/nom: * 42,$b)

[13:12] <dalek> rakudo/nom: ===SORRY!=== Error while compiling

[13:12] <dalek> rakudo/nom: Variable '$b' is not declared

[13:12] <dalek> rakudo/nom: at line 2

[13:12] <dalek> rakudo/nom: ------> 42,⏏$b)

[13:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8a2ffacdb9

[13:19] <dalek> rakudo/nom: 23d75ed | lizmat++ | src/core/Exception.pm:

[13:19] <dalek> rakudo/nom: Final bit of sorry heading bike shedding

[13:19] <dalek> rakudo/nom:

[13:19] <dalek> rakudo/nom: Felt that "Error while compiling" was missing a colon in the

[13:19] <dalek> rakudo/nom: <unknown file> case.

[13:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/23d75ed645

[14:44] <dalek> rakudo/nom: 1d4c110 | lizmat++ | src/core/array_slice.pm:

[14:44] <dalek> rakudo/nom: Optimize IndicesReificationTarget.push a bit

[14:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1d4c110636

[15:26] * [Coke] waves

[15:49] <[Coke]> RT: 1339; CONC: 7; GLR: 6; JVM: 70; LHF: 1; LTA: 73; NYI: 28; OSX: 6; PERF: 16; POD: 3; PRECOMP: 5; RFC: 22; SEGV: 21; STAR: 1; TESTNEEDED: 28; TODO: 9; UNI: 5; WEIRD: 3

[16:19] <japhb> [Coke]++  # Bug tag herding

[19:01] <dalek> rakudo/nom: 2a84504 | lizmat++ | src/core/array_slice.pm:

[19:01] <dalek> rakudo/nom: Streamline the remaining Seq

[19:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2a84504d22

[20:07] <sortiz> \o #perl6-dev

[20:08] <lizmat> sortiz o/

[20:08] <awwaiid> lizmat: In case you didn't notice, I have some other REPL fixes in https://github.com/rakudo/rakudo/pull/799, including catching errors upon the PRINT part of REPL

[20:09] <awwaiid> Though interestingly when I do a print-based error on -e I sometimes see "SORRY", whereas here I don't? kinda weird

[20:09] <dalek> rakudo/nom: 5dad919 | (Brock Wilcox)++ | src/ (2 files):

[20:09] <dalek> rakudo/nom: Fix behavior on empty lines and empty strings and print-exceptions

[20:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5dad919d5f

[20:09] <dalek> rakudo/nom: ab85ab5 | (Brock Wilcox)++ | t/02-rakudo/repl.t:

[20:09] <dalek> rakudo/nom: Update REPL test to match current features

[20:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ab85ab58ac

[20:09] <dalek> rakudo/nom: e0bcafd | (Brock Wilcox)++ | src/core/REPL.pm:

[20:09] <dalek> rakudo/nom: Fix indent

[20:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e0bcafd573

[20:09] <dalek> rakudo/nom: 20ba0ec | (Brock Wilcox)++ | / (16 files):

[20:09] <dalek> rakudo/nom: Merge remote-tracking branch 'upstream/nom' into repl-whitespace-fixes

[20:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/20ba0ecde1

[20:09] <dalek> rakudo/nom: bd0fd78 | lizmat++ | / (3 files):

[20:09] <awwaiid> woo!

[20:09] <dalek> rakudo/nom: Merge pull request #799 from awwaiid/repl-whitespace-fixes

[20:09] <timotimo> \o/

[20:09] * awwaiid hops up and down

[20:09] <lizmat> indeed, I had missed that

[20:10] <awwaiid> I'm getting closer to introducing REPL::here; which will be like binding.pry

[20:11] <awwaiid> I feel kinda funny about exporting the top-level REPL name on the one hand, but I also want this to be extremely accessible

[20:13] <awwaiid> that and my continued quest to remove nqp:: from REPL.pm

[20:13] <lizmat> ++awwaiid  :-)

[20:15] <sortiz> awwaiid++

[20:17] <dalek> rakudo/nom: a34736f | lizmat++ | src/core/List.pm:

[20:17] <dalek> rakudo/nom: Make List.STORE about 2x faster

[20:17] <dalek> rakudo/nom:

[20:17] <dalek> rakudo/nom: Which means "my ($a,$b,$c) = (1,2,3)" is now 2x faster

[20:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a34736f32d

[20:17] <timotimo> YES!

[20:17] <timotimo> fantastic

[20:35] <dalek> rakudo/nom: 03bd34e | lizmat++ | src/core/List.pm:

[20:35] <dalek> rakudo/nom: Streamline List.Slip

[20:35] <dalek> rakudo/nom:

[20:35] <dalek> rakudo/nom: Not sure where this will help, but I'm pretty sure it will.

[20:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/03bd34e90c

[20:38] <Zoffix> Wow! lizmat++

[20:45] <vendethiel-> lizmat++ :D

[20:45] <vendethiel-> those sound amazing

[21:03] <dalek> rakudo/nom: 5bd5a54 | lizmat++ | src/core/List.pm:

[21:03] <dalek> rakudo/nom: Squeeze a few percent out of List.iterator

[21:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5bd5a54c13

[22:26] <dalek> rakudo/nom: ff83625 | lizmat++ | src/core/List.pm:

[22:26] <dalek> rakudo/nom: Make the List constructore more memory friendly

[22:26] <dalek> rakudo/nom:

[22:26] <dalek> rakudo/nom: The difference in CPU usage is within noise levels.  However, it does

[22:26] <dalek> rakudo/nom: not allocate an IterationBuffer if there are no Slips in the parameter

[22:26] <dalek> rakudo/nom: list (which is usually the case when creating a List, I would argue).

[22:26] <dalek> rakudo/nom:

[22:26] <dalek> rakudo/nom: This could get significantly faster if we had nqp::listhastype(list,Type)

[22:26] <dalek> rakudo/nom: op that would return 1 if the list had any element of the given type.

[22:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ff83625101

[22:27] <lizmat> and that concludes the damage I've done today

[22:27] <lizmat> good night, #perl6-dev!

[22:30] <timotimo> gnite liz :)
