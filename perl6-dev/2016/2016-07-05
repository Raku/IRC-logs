[00:10] <dalek> roast: 046e0bf | (Zoffix Znet)++ | S17-supply/basic.t:

[00:10] <dalek> roast: .tap block with incorrect signature must fail

[00:10] <dalek> roast:

[00:10] <dalek> roast: RT#126379

[00:10] <dalek> roast: review: https://github.com/perl6/roast/commit/046e0bfdf9

[00:10] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126379

[00:34] <hoelzro> awwaiid: I found the regression: c8c8de6

[00:35] <dalek> roast: 7211997 | (Zoffix Znet)++ | S03-operators/arith.t:

[00:35] <dalek> roast: extremely large exponents must throw numeric overflow

[00:35] <dalek> roast:

[00:35] <dalek> roast: RT#125811

[00:35] <dalek> roast: review: https://github.com/perl6/roast/commit/7211997dea

[00:35] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125811

[00:35] <dalek> roast: 909b4c5 | (Zoffix Znet)++ | S03-operators/arith.t:

[00:35] <dalek> roast: Remove trailing whitespace

[00:35] <dalek> roast: review: https://github.com/perl6/roast/commit/909b4c53f1

[00:46] <AlexDaniel> Zoffix: there's a chance that tests for #125811 will have to be fudged due to problems on OS X. See this: https://github.com/perl6/roast/commit/2ff9b0910898066caf2c394502e73b7080d779f8

[00:46] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125811

[00:46] <AlexDaniel> Zoffix: if OS X issues are gone, then other tests have to be unfudged :)

[02:03] <Zoffix> Damn. I can't believe there's no OS X VMs.

[02:04] <Zoffix> There's no way I'm spending $2.5K on a laptop just to test Perl 6 :P

[02:04] * Zoffix hopes $work will buy one as $boss wants an Apple app

[02:08] <geekosaur> apple will only license OS X VMs on Apple machines running OS X as host. this generally means extra expense and annoyance for hosters, since Apple has nothing designed for data center use

[02:09] <Zoffix> I'd pay a few bucks to test my code on a VM. I'm surprised no one's even trying to monetize this :/

[02:09] <Zoffix> Stupid ass Apple

[02:12] <geekosaur> enh. they've convinced desktop users to pay 5x as much for half the desktop machine. they don't care about data centers, and certainly not about third party software not through the app store.

[02:12] <Zoffix> The prices are even more ridiculous in Canadian dollars :P

[02:13] <geekosaur> arguably the correct answer is to ignore apple and tell anyone looking for OS X versions of general Unix software to run Linux in a VM, because Apple doesn't *want* there to be OS X versions of such things

[02:13] <MasterDuke> geekosaur: i quite dislike Apple, but i'd have to say i only agree with the second two of your three statements

[02:14] <MasterDuke> i.e., not the pay 5x

[02:15] <MasterDuke> that definitely used to be the case, but the various Intel ultrabooks are just about the same price for just about the same specs

[02:16] <MasterDuke> maybe not so true for desktops though

[02:16] <geekosaur> I admit I was thinking more of the desktop than the notebook market, which I don't follow closely

[02:17] <geekosaur> but then. that's why I said desktop users

[02:17] <MasterDuke> and converse for me, i would never buy an Apple desktop (so don't follow them), but could be persuaded to buy a notebook (just for the hardware, linux would get installed right away)

[02:27] <geekosaur> (Apple has an enterprise sales department. It has trouble holding onto both customers and employees, mostly because both end up wasting their time arguing with the rest of Apple and not getting what they want/need.)

[03:44] <dalek> roast: 4710138 | (Zoffix Znet)++ | S02-one-pass-parsing/misc.t:

[03:44] <dalek> roast: Spurious backslash at end of file error

[03:44] <dalek> roast:

[03:44] <dalek> roast: The error must not inform about a missing semicolon and should be the

[03:44] <dalek> roast: "Confused" error with a pointer to location.

[03:44] <dalek> roast:

[03:44] <dalek> roast: RT#123887

[03:44] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=123887

[03:44] <dalek> roast: review: https://github.com/perl6/roast/commit/4710138e25

[04:00] <dalek> roast: 1bf2a1b | (Zoffix Znet)++ | S17-promise/basic.t:

[04:00] <dalek> roast: Multiple promises execute asynchronously

[04:00] <dalek> roast:

[04:00] <dalek> roast: RT#122803

[04:00] <dalek> roast: review: https://github.com/perl6/roast/commit/1bf2a1b1a5

[04:00] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=122803

[04:07] <Zoffix> Feedback needed (there's also a couple of emails on perl6-compiler): touching '/' during tests is a bad idea IMO: https://rt.perl.org/Ticket/Display.html?id=126976

[04:07] <Zoffix> In a related note, how can we keep the ticket-relevant conversation on tickets and not spreading it partially over the mailing list with nothing propagated to the ticket?

[04:08] <Zoffix> And thirdly, I've reply+resolved a whole bunch of tickets and those replies did not show up on perl6-compiler, however, a couple of emails did show up. Is it because resolvings do not get mailed or because we have some email issues there somewhere?

[04:08] * Zoffix waves good night

[04:13] <geekosaur> rmdir would be a potentially bad thing to attempt. mkdir would only do something unexpected if the system is already corrupted beyond recovery

[04:18] <Zoffix> Are you Brandon?

[04:18] <Zoffix> Aye

[04:18] <Zoffix> geekosaur, what is it meant to do on Windows tho?

[04:18] <Zoffix> It's actually succeeding, unless I run it in C:\. I've no idea what it's creating.

[04:19] <geekosaur> it's not creating anything. this is a backward compatibility wart in Windows

[04:19] <Zoffix> Ah

[04:20] <geekosaur> anything that behaves differently when run in \ than in a subdir is touching backward compatibility code

[04:22] <geekosaur> (specifically it is mimicking behavior of FAT filesystems; in this case the original behavior was arguably a bug, but because so many programs rely on such odd behavior it is retained)

[04:24] <geekosaur> ...actually iirc it was not a bug in FAT, it was a workaround to allow buggy programs to work back in DOS 2

[04:25] <geekosaur> Microsoft may never find and eradicate all the ancient cruft >.>

[04:26] <hoelzro> awwaiid: sorry, I should've clarified - the regression is that 'ok' is not among the completions when Test.pm is loaded

[04:42] <dalek> roast: 56b8416 | (Zoffix Znet)++ | S32-io/mkdir_rmdir.t:

[04:42] <dalek> roast: Strip trailing whitespace

[04:42] <dalek> roast: review: https://github.com/perl6/roast/commit/56b84168aa

[04:42] <dalek> roast: 423ee64 | (Zoffix Znet)++ | S32-io/mkdir_rmdir.t:

[04:42] <dalek> roast: '/'.IO.mkdir must not segfault

[04:42] <dalek> roast:

[04:42] <dalek> roast: RT#126976

[04:42] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126976

[04:42] <dalek> roast:

[04:42] <dalek> roast: geekosaur++ for explaining Windows side of things for this test

[04:42] <dalek> roast: (http://irclog.perlgeek.de/perl6-dev/2016-07-05#i_12784679)

[04:42] <dalek> roast: review: https://github.com/perl6/roast/commit/423ee643ea

[04:44] <Zoffix> I'm still unclear on fudging... https://gist.github.com/zoffixznet/d01742c186ec89a8f8ee9e1dd76f8cc0 there are 4 skips and it's telling me I ran 4-fewer tests than planned... It isn't seeing the skips or something?

[04:44] <Zoffix> ¯\_(ツ)_/¯

[04:44] * Zoffix falls to bed

[05:56] <geekosaur> oh, I misremembered... it was not compatibility for programs. It's because the root directory on FAT was synthetic; its size and behavior was defined before subdirectories existed. So any directory operations on it short-circuited out because it didn't actually exist.

[05:58] <geekosaur> This was mostly retained on NTFS because the same operations still didn't make any sense, but for different reasons (notably, you can't refer to a disk except by the low level operations used by e.g. FORMAT if you can't refer to its root directory).

[06:53] <[Tux]> lizmat, *adding* Perl6.pm on YAPC profile? Just add <space> Perl6.pm or <comma><space> Perl6.pm to Monger group(no s here)?

[06:57] <[Tux]> and nothing about the new speed record in the blog. You're doing such a nice job: it is worth noting

[07:05] <lizmat> [Tux] yeah, that's it

[07:06] <lizmat> afaik  :-)

[07:07] <[Tux]> with or without the comma?

[07:17] <[Tux]> <c> Amsterdam.pm , perl6.pm </c> works ok

[07:17] <lizmat> yeah, it's doing a LIKE in the db, I think

[07:19] <lizmat> Files=1109, Tests=52376, 225 wallclock secs (13.51 usr  3.81 sys + 1410.38 cusr 116.85 csys = 1544.55 CPU)   # on a cold machine

[07:19] <lizmat> lowest I've seen in a *looong* time

[07:20] <lizmat> (in wallclock and CPU)

[07:26] <[Tux]> This is Rakudo version 2016.06-137-g234aa4f built on MoarVM version 2016.06-9-g8fc21d5

[07:26] <[Tux]> test            15.612

[07:27] <[Tux]> test-t           9.072

[07:27] <[Tux]> csv-parser      16.615

[07:27] <[Tux]> (just to top it) :) \o/

[07:28] <dalek> rakudo/nom: 9a3a571 | lizmat++ | src/core/Rakudo/Internals.pm:

[07:28] <dalek> rakudo/nom: Streamline ShapedArrayCommon.pairs|antipairs

[07:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9a3a5715fd

[07:28] <dalek> rakudo/nom: 8cb0fac | lizmat++ | src/core/Match.pm:

[07:28] <dalek> rakudo/nom: No need to use named params for Match|SET-SELF

[07:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8cb0face54

[07:28] <lizmat> [Tux]: yeah!

[07:50] <nine> m: use nqp; say nqp::atkey(CompUnit::Loader.load-source(Buf.new(q<package Qux { BEGIN EVAL q<CompUnit::DependencySpecification.new(:short-name(q{Bar}))> }; class Foo {};>.encode)).unit, q<$?PACKAGE>);

[07:50] <camelia> rakudo-moar 234aa4: OUTPUT«(Qux)␤»

[07:50] <nine> This ^^^ is a golfed version of https://rt.perl.org/Ticket/Display.html?id=128457

[07:50] <nine> The output should be (GLOBAL) instead of (Qux)

[07:51] <nine> This demonstrates the BEGIN time EVAL's lexicals leaking into the outer compilation unit.

[07:51] <nine> Oh, this an be even shortened to:

[07:51] <nine> use nqp; say nqp::atkey(CompUnit::Loader.load-source(Buf.new(q<package Qux { BEGIN EVAL q<> }; class Foo {};>.encode)).unit, q<$?PACKAGE>);

[07:51] <nine> m: use nqp; say nqp::atkey(CompUnit::Loader.load-source(Buf.new(q<package Qux { BEGIN EVAL q<> }; class Foo {};>.encode)).unit, q<$?PACKAGE>);

[07:51] <camelia> rakudo-moar 8cb0fa: OUTPUT«(Qux)␤»

[08:00] <dalek> rakudo/nom: 4188109 | niner++ | src/core/CompUnit/Loader.pm:

[08:00] <dalek> rakudo/nom: Relax type requirements on CompUnit::Loader's methods

[08:00] <dalek> rakudo/nom:

[08:00] <dalek> rakudo/nom: We don't need a mutable Buf. A Blob will do just fine.

[08:00] <dalek> rakudo/nom: Fixes CompUnit::Loader.load-source("1 + 1".encode)

[08:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/418810920e

[08:01] <psch> nine: that looks like indiscriminately merging all mast_frames could be behind it

[08:02] <nine> psch: may very well be. Will have a closer look in the evening. Unless someone manages to fix this before that :)

[08:02] * psch has no idea how one would discriminate between the mast_frames vOv

[08:04] <nine> m: use nqp; say nqp::atkey(CompUnit::Loader.load-source(q<package Qux { BEGIN EVAL q<> }; say $?PACKAGE>.encode).unit, q<$?PACKAGE>);

[08:04] <camelia> rakudo-moar 8cb0fa: OUTPUT«Type check failed in binding $bytes; expected Buf but got utf8 (utf8.new(112,97,99,10...)␤  in block <unit> at <tmp> line 1␤␤»

[08:04] <nine> m: use nqp; say nqp::atkey(CompUnit::Loader.load-source(Buf.new(q<package Qux { BEGIN EVAL q<> }; say $?PACKAGE>.encode)).unit, q<$?PACKAGE>);

[08:04] <camelia> rakudo-moar 8cb0fa: OUTPUT«(GLOBAL)␤(Qux)␤»

[09:05] <dalek> nqp: d138ca2 | (Pawel Murias)++ | src/vm/js/ (10 files):

[09:05] <dalek> nqp: [js] Change the calling convention to pass the invocant as a javascript positional argument.

[09:05] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d138ca27d3

[10:33] <dalek> rakudo/nom: 1fbb8b4 | peschwa++ | src/core/Exception.pm:

[10:33] <dalek> rakudo/nom: Fix a few CX creation cases and don't give a null to p6box_s

[10:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1fbb8b4053

[10:45] <dalek> rakudo/nom: 774e2de | lizmat++ | / (4 files):

[10:45] <dalek> rakudo/nom: Make [x]:foo:bar and {x}:foo:bar 20% faster

[10:45] <dalek> rakudo/nom:

[10:45] <dalek> rakudo/nom: - don't create Pair for call of SLICE_ONE_(LIST|HASH)

[10:45] <dalek> rakudo/nom: - simplify adding of named to named hash

[10:45] <dalek> rakudo/nom: - use HANDLED in stead of DELETEKEY, which doesn't need the hash passed

[10:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/774e2deb07

[11:47] <lizmat> bisect: 2 ** 99999999999999999999999999999999999

[11:47] <bisectable> lizmat: on both starting points the exit code is 1 and the output is identical as well

[11:49] <dalek> rakudo/nom: 8a7db27 | lizmat++ | / (4 files):

[11:49] <dalek> rakudo/nom: Make [x]:foo:bar and {x}:foo:bar 20% faster

[11:49] <dalek> rakudo/nom:

[11:49] <dalek> rakudo/nom: - don't create Pair for call of SLICE_MORE_(LIST|HASH)

[11:49] <dalek> rakudo/nom: - simplify adding of named to named hash

[11:49] <dalek> rakudo/nom: - use HANDLED in stead of DELETEKEY, which doesn't need the hash passed

[11:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8a7db270cd

[11:50] <lizmat> oops, s/x/@x/

[11:51] <lizmat> thanks to jnthn's named param method cache work, this now makes sense

[12:06] <BrokenRobot> lizmat: why did you bisect that? Are you on OSX?

[12:06] <BrokenRobot> I added a test for that last night and someone told me the bug it tests for isn't fixed on OSX

[12:08] * BrokenRobot doesn't have an OSX to test

[12:08] <nine> How can this be OS dependent anyway?

[12:09] <BrokenRobot> No idea. It's clamed on OSX it returns 1 instead of throwing.

[12:09] <BrokenRobot> http://irclog.perlgeek.de/perl6-dev/2016-07-05#i_12784268

[12:11] <nine> Btw. I'm for either skipping or un-todoing those tests. It's OS X where this is broken but right now gives spec test failures everywhere else.

[12:11] <BrokenRobot> huh?

[12:11] <nine> (passing todos are counted as failures by make spectest)

[12:12] <BrokenRobot> Ah, right, the power tests.

[12:38] <tbrowder> [Coke]: ref RT: My plea to RT support worked well, and my user ID of 'tbrowder' has been restored; however, although my ticket shows me as the owner in the general listing, RT doesn't show it in my "10 highest priority tickets I own."  Can you fix that or do I need another RT support request?

[12:49] <lizmat> m: 2 ** 99999999999999999999999999999999999

[12:49] <camelia> rakudo-moar 8a7db2: OUTPUT«WARNINGS for <tmp>:␤Useless use of "**" in expression "2 ** 99999999999999999999999999999999999" in sink context (line 1)␤Numeric overflow␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[12:49] <lizmat> $ 6 'say 2 ** 99999999999999999999999999999999999'

[12:49] <lizmat> 1

[12:50] <lizmat> so indeed, on OSX this is 1

[12:50] <BrokenRobot> Thanks, I'll fudge them

[12:50] <lizmat> fwiw, only 1 test fails on OS X

[12:51] <lizmat> t/spec/S03-operators/arith.t                                (Wstat: 256 Tests: 158 Failed: 1)

[12:51] <lizmat> Failed test:  86

[12:51] <lizmat> BrokenRobot: ^^

[12:51] <BrokenRobot> Yeah. That's the one I added last night.

[12:51] <BrokenRobot> s/them/it/; :)

[13:18] <dalek> roast: 9e1e6f7 | (Zoffix Znet)++ | S (2 files):

[13:18] <dalek> roast: Fudge huge exponent tests as 'skip'

[13:18] <dalek> roast:

[13:18] <dalek> roast: These tests fail on OSX but pass on Linux. Fudging them as 'todo' makes

[13:18] <dalek> roast: spectest runs produce failures due to passing TODOs on Linux.

[13:18] <dalek> roast: review: https://github.com/perl6/roast/commit/9e1e6f7781

[13:21] <nine> \o/

[13:23] <hoelzro> awwaiid: I think the problem is ctxsave - I don't know if it sets things up correctly if it's called in Perl 6 land

[13:25] <awwaiid> yeah -- but I don't see it working before I moved it into Perl 6 land either

[13:26] <awwaiid> What I'm hoping for is to do like my $ctx = CALLER::; or create a new one or similar right when the REPL is invoked, but it should never be nil/Mu when it hits that spot

[13:30] <jnthn> m: https://gist.github.com/jnthn/36792fd1bbb7fe834b86ec0502a1b668

[13:30] <camelia> rakudo-moar 8a7db2: OUTPUT«1..3␤Constraint type check failed for parameter '@checks'␤  in sub pkgname-pkgver-pkgrel at <tmp> line 15␤  in sub pkgname-pkgver-pkgrel at <tmp> line 17␤  in sub pkgname-pkgver-pkgrel at <tmp> line 12␤  in block <unit> at <tmp> line 26␤␤# Lo…»

[13:31] <lizmat> commute to amsterdam.pm meeting&

[13:45] <dalek> rakudo/nom: d4ac15c | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[13:45] <dalek> rakudo/nom: Fix constrained nameds multi-dispatch regression.

[13:45] <dalek> rakudo/nom:

[13:45] <dalek> rakudo/nom: We could put candidates in the cache that were not cacheable, due to

[13:45] <dalek> rakudo/nom: having named parameters with where constraints or unpacks. This fixes

[13:45] <dalek> rakudo/nom: it by re-ordering the checks.

[13:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d4ac15c846

[13:45] <dalek> roast: 9be78ea | jnthn++ | S06-multi/positional-vs-named.t:

[13:45] <dalek> roast: Test to cover RT #128522.

[13:45] <dalek> roast: review: https://github.com/perl6/roast/commit/9be78ea2bb

[13:45] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128522

[13:49] <jnthn> Hopefully that deals with the regression. :)

[14:45] <awwaiid> you can give m: a gist? fancy

[14:51] <BrokenRobot> m: my $x = 42; $x does $_ for role {}; say $x.WHAT

[14:51] <camelia> rakudo-moar d4ac15: OUTPUT«WARNINGS for <tmp>:␤Useless use of $x in sink context (use Nil instead to suppress this warning) (line 1)␤Cannot mix in non-composable type <anon|82787552> into object of type Int␤  in block <unit> at <tmp> line 1␤␤»

[14:51] <BrokenRobot> .oo( use Nil?? )

[14:51] <BrokenRobot> m: my $x = 42; $x does role {} for ^1; say $x.WHAT; # not useless use

[14:51] <camelia> rakudo-moar d4ac15: OUTPUT«WARNINGS for <tmp>:␤Useless use of $x in sink context (use Nil instead to suppress this warning) (line 1)␤(Int+{<anon|73490736>})␤»

[14:54] <BrokenRobot> m: my $x = 42; for ^1 { $x does role {}; Nil } say $x.WHAT;

[14:54] <camelia> rakudo-moar d4ac15: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> $x = 42; for ^1 { $x does role {}; Nil }⏏ say $x.WHAT;␤»

[14:54] <BrokenRobot> m: my $x = 42; for ^1 { $x does role {}; Nil }; say $x.WHAT;

[14:54] <camelia> rakudo-moar d4ac15: OUTPUT«(Int+{<anon|69666800>})␤»

[15:24] <BrokenRobot> m: say chr 9999999999999999999999

[15:24] <camelia> rakudo-moar d4ac15: OUTPUT«Cannot unbox 74 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[15:24] <BrokenRobot> m: say chr 9999999999

[15:24] <camelia> rakudo-moar d4ac15: OUTPUT«Error encoding UTF-8 string: could not encode codepoint 1410065407␤  in block <unit> at <tmp> line 1␤␤»

[15:26] <BrokenRobot> m: say chr 2**63

[15:26] <camelia> rakudo-moar d4ac15: OUTPUT«␀␤»

[15:26] <BrokenRobot> m: say chr 2**63-2

[15:26] <camelia> rakudo-moar d4ac15: OUTPUT«chr codepoint cannot be negative␤  in block <unit> at <tmp> line 1␤␤»

[15:26] <BrokenRobot> m: say chr ((2**63)-2)

[15:26] <camelia> rakudo-moar d4ac15: OUTPUT«chr codepoint cannot be negative␤  in block <unit> at <tmp> line 1␤␤»

[16:07] <dalek> roast: 4afc0db | (Zoffix Znet)++ | S32-io/spurt.t:

[16:07] <dalek> roast: For non-existent file after spurting, .e says it exists

[16:07] <dalek> roast:

[16:07] <dalek> roast: RT#126006

[16:07] <dalek> roast: review: https://github.com/perl6/roast/commit/4afc0db991

[16:07] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126006

[16:15] <BrokenRobot> m: my %h = foo => 'bar'; { temp %h<foos> = 'meow'; }; say %h

[16:15] <camelia> rakudo-moar d4ac15: OUTPUT«{foo => bar, foos => (Any)}␤»

[16:16] <BrokenRobot> That's wrong, isn't? Or is the behaviuour for use of `temp` on keys undefined?

[16:16] <BrokenRobot> Oh, there's already fudged test for it. nm

[17:01] <nine> bisect: use nqp; die if nqp::atkey(CompUnit::Loader.load-source(q<package Qux { BEGIN say "eval!"; BEGIN EVAL q<>; BEGIN say "eval done!" }; class Foo {};>.encode).unit, q<$?PACKAGE>).^name eq "Qux";

[17:01] <bisectable> nine: exit code is 1 on both starting points, bisecting by using the output

[17:01] <bisectable> nine: (2016-02-18) https://github.com/rakudo/rakudo/commit/9983c2c

[17:01] <nine> m: use nqp; die if nqp::atkey(CompUnit::Loader.load-source(q<package Qux { BEGIN say "eval!"; BEGIN EVAL q<>; BEGIN say "eval done!" }; class Foo {};>.encode).unit, q<$?PACKAGE>).^name eq "Qux";

[17:01] <camelia> rakudo-moar d4ac15: OUTPUT«eval!␤eval done!␤Died␤  in block <unit> at <tmp> line 1␤␤»

[17:02] <nine> bisect: use nqp; die if nqp::atkey(CompUnit::Loader.load-source(q<package Qux { BEGIN EVAL q<>; };>.encode).unit, q<$?PACKAGE>).^name eq "Qux";

[17:02] <bisectable> nine: exit code is 1 on both starting points, bisecting by using the output

[17:02] <bisectable> nine: (2016-02-18) https://github.com/rakudo/rakudo/commit/9983c2c

[17:03] <nine> Indeed! We're actually dealing with a different BEGIN time EVAL issue. This has nothing to do with precompilation and the example doesn't use a nested World either.

[17:04] <nine> psch: ^^^

[17:05] <psch> ...why is bisectable pointing at that commit

[17:06] <BrokenRobot> It bisected by output and I'm guessing message format changed

[17:06] <psch> oh, yeah, that makes sense

[17:10] <psch> well, that also dies on r-j

[17:10] <psch> which is... something, at least

[18:30] <nine> Oh, YAPC::EU CFP is still open?

[18:37] <gfldex> BrokenRobot: please review https://github.com/perl6/Pod-To-HTML/commit/f201db70f9544945c9e24cc12cf56ca0aa250ca3

[18:38] <gfldex> i don't know how the updated module is deployed. That may need powers I don't possess.

[18:43] <nine> BrokenRobot: I have the first possible fix :)

[18:43] <nine> psch: ^^^

[18:44] <nine> It is...surprising I dare say: https://gist.github.com/niner/dc13b9e26acbe735f5c9a307fc0210af

[18:46] <timotimo> ooooooh

[18:46] <timotimo> that's a good idea

[18:48] <psch> ohh

[18:48] <psch> nine: can you run that against r-j as well?

[18:49] <nine> psch: I'm quite sure it's the same there. Despite its looks, this is a quite high level issue actually.

[18:51] <psch> nine: i'm mostly just asking for --backends=moar,jvm and running your test against perl6-j too :)

[18:51] <nine> will do :)

[18:51] <psch> thanks

[18:51] <nine> Gives my computer something to do while I'm preparing dinner ;)

[19:05] <tbrowder> ref adding new nqp file: src/Perl6/DebugPod.npq; purpose is to save debugging code (at least for my use); I have added the file to all the build tools i can find that reference src/Perl6/Pod.nqp but still have  a build problem:

[19:06] <tbrowder> error: make: *** No rule to make target 'src/Perl6/DebugPod.nqp', needed by 'blib/Perl6/DebugPod.moarvm'.  Stop

[19:07] <psch> tbrowder: can you gist your diff?

[19:07] <tbrowder> any idea where to look for a fix? thanks

[19:07] <tbrowder> psch: yes, wait a bit...

[19:07] <timotimo> tbrowder: you potentially added it a bit too much?

[19:08] <tbrowder> timotimo: probably, you can see in a minute or three...

[19:09] <psch> huh, right, making DebugPod.nqp shouldn't be a thing i think?

[19:09] <psch> as in, DebugPod.moarvm should be a target that is depended on, but DebugPod.nqp just shows up in that target

[19:09] <psch> ...if i don't misrember my make knowledge

[19:10] <timotimo> it might have a piece of code that's usually reserved for per-backend changes or something

[19:10] <timotimo> or gen-cat

[19:10] <dalek> rakudo/nom: c8e127a | bartolin++ | tools/build/Makefile-JVM.in:

[19:10] <dalek> rakudo/nom: Fix Makefile-JVM.in

[19:10] <dalek> rakudo/nom:

[19:10] <dalek> rakudo/nom: duplicates change to tools/build/moar_core_sources (commit ac19874266)

[19:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c8e127a1d8

[19:10] <dalek> rakudo/nom: b8bc1b1 | niner++ | tools/build/Makefile-JVM.in:

[19:10] <dalek> rakudo/nom: Merge pull request #809 from usev6/patch-2

[19:10] <dalek> rakudo/nom:

[19:10] <dalek> rakudo/nom: Fix Makefile-JVM.in

[19:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b8bc1b1c36

[19:12] <tbrowder> adding new file DebugPod.nqp https://www.irccloud.com/pastebin/nFAnRlIb/diff.txt

[19:14] <timotimo> ah, there's an error here

[19:14] <timotimo> +$(PERL6_P_JAR): src/Perl6/Pod.nqp $(PERL6_DP_JAR)

[19:14] <timotimo> er, no.

[19:14] <psch> yeah, i'm not seeing it either right now :|

[19:15] <timotimo> i don't see a problem

[19:15] <timotimo> there's a flag to make that makes it output an absurd amount of information on what it thinks

[19:15] <timotimo> it's kind of hard to chew through it, but it could help

[19:15] <timotimo> i don't remember the flag :|

[19:18] <timotimo> +  $(PERL6_O_JAR) $(PERL6_P_JAR) $(PERL6_C_JAR) $(PERL6_M_JAR) $(PERL6_B_JAR) $(PERL6_P_JAR)

[19:18] <timotimo> there's PERL6_P_JAR in there twice

[19:18] <timotimo> instead of having DP once

[19:20] <psch> oh

[19:21] <psch> hm, no, make isn't *that* anal about tabs i think

[19:21] <timotimo> tbrowder: ^

[19:21] <psch> i was thinking the spaces in l:87 of the gist maybe, but yeah, probably not

[19:22] <BrokenRobot> gfldex: that commit is a bit weird. How come <a> is by itself and isn't actually around the index term?

[19:22] <tbrowder> that doubling may be it, what line is it on?

[19:22] <BrokenRobot> gfldex: and personally, I'd probably do it like this. One return: return qq[<span id="index-entry-@indices.join('-')">$text\</span>];

[19:23] <timotimo> 26 of the gist, tbrowder

[19:23] <timotimo> but ... that's only in the JVM makefile

[19:23] <BrokenRobot> gfldex: the wrapping of $text is more important though. Because when it's wrapped, we can do .index-entry:target { background: yellow } or something like that to highlight the refeferenced word.

[19:23] <timotimo> and your output was from moarvm?

[19:23] <tbrowder> I see it (off to investigate...)

[19:24] <gfldex> BrokenRobot: good point

[19:24] <BrokenRobot> gfldex: as for deployment. Last time moritz update it it. Others have sudo too (like timotimo )

[19:24] <BrokenRobot> s/update it/updated/; # can't spell today >_<

[19:24] <timotimo> er, what were we talking about?

[19:24] <BrokenRobot> timotimo: world domination! Are you in? :)

[19:25] <timotimo> too lazy

[19:25] <psch> +1

[19:25] <psch> i mean like, world domination also means taking care of the world to some degree, right

[19:25] <psch> that sounds awefully exhausting

[19:25] <BrokenRobot> nine: wow.. That's a very small fix :D

[19:28] <tbrowder> re diffs: good catch, but that doubling was in the JVM file (which I'm actually not using)

[19:30] <BrokenRobot> [id^=index-entry]:target # I meant...

[19:44] <bartolin> it looks like module loading is completely broken on r-j at the moment: https://gist.github.com/usev6/ab0d3f9c6bba17acd9a1b0b8be9c74ca

[19:46] <dalek> rakudo/nom: 027dd39 | niner++ | src/core/control.pm:

[19:46] <dalek> rakudo/nom: Fix BEGIN time EVAL screwing up MAIN_CTX

[19:46] <dalek> rakudo/nom:

[19:46] <dalek> rakudo/nom: When compiling a source file, we store the compilation unit's main context

[19:46] <dalek> rakudo/nom: for later merging with the outer compilation unit's globals. This storing

[19:46] <dalek> rakudo/nom: is done by the compiler calling the ctxsave method of an object stored in

[19:46] <dalek> rakudo/nom: a contextual - $*CTX_SAVE - when it finished the compilation unit. The

[19:46] <dalek> rakudo/nom: ctxsave method ensures that it's called only once.

[19:46] <dalek> rakudo/nom:

[19:46] <dalek> rakudo/nom: Now EVALs are their own compilation unit. When running an EVAL at BEGIN time

[19:46] <dalek> rakudo/nom: of a currently compiling source file, the compiler finds a $*CTX_SAVE and

[19:46] <dalek> rakudo/nom: uses it to store the EVAL's main context. The source file's context won't be

[19:46] <dalek> rakudo/nom: stored anymore after that.

[19:46] <dalek> rakudo/nom:

[19:47] <psch> huh

[19:48] <psch> bartolin: that looks like it could be from my BEGIN EVAL workaround

[19:48] <psch> bartolin: assuming \spec is what we read from .deserialize

[19:49] <bartolin> psch: the line of code was added/changed with ac198742

[19:49] <bartolin> src/core/CompUnit/RepositoryRegistry.pm:125

[19:50] <bartolin> psch: but you're way more familiar with that code :-)

[19:50] <psch> ...i'm really not familiar with that code :)

[19:51] <nine> That should just split a string on '#', modify the last element of the list and join it back together

[19:52] <psch> right, but something non-stringy ends up in $parts at that spot

[19:52] <psch> fwiw, i can load Test and 'ok 1' fine on 2016.06-127-g74a0799

[19:52] <psch> r-j that is

[19:52] <psch> m: say $*PERL.compiler

[19:52] <camelia> rakudo-moar 027dd3: OUTPUT«rakudo (2016.06.147.g.027.dd.39)␤»

[19:52] <psch> ...wow, why is that 20 commits old

[19:53] <psch> well, that's a start for a bisect

[19:53] <psch> i'm currently on ~3s lag to hack, so i'd rather not do that myself... :S

[19:55] <bartolin> if I had to guess, I'd say it is this line (from commit ac198742)

[19:55] <bartolin> nqp::bindpos($parts, $path, $SPEC.canonpath(nqp::atpos($parts, $path)));

[19:56] <psch> it could be hidding in some Exception and actually trigger in 1fbb8b40

[19:56] <psch> but that's kinda unlikely

[19:56] <nine> The backtrace points at the following line but could be off by one

[19:56] <tbrowder> ref build: is it possible that any new file needs to be mentioned in the guts of stage0

[19:56] <psch> tbrowder: not in rakudo, no

[19:57] <psch> tbrowder: there's an nqp make target to regen bootstrap files, but rakudo doesn't care about that

[20:00] <bartolin> aha, adding an nqp::unbox_s around the $SPEC.canonpath(...) seems to help

[20:00] <psch> /o\

[20:01] <psch> i really dread all the magic un-/boxing moar does

[20:01] <psch> mostly cause it's terrible to reproduce on r-j

[20:01] <psch> we ha{d,ve} a similar problem with getattr

[20:01] <psch> where on moar getattr can fill in for getattr_{i,n,s}

[20:02] <psch> i *think* i got that mostly right by now, but we probably just don't hit the broken cases yet

[20:02] * bartolin updated the gist

[20:03] <bartolin> psch: you did put in a fix for that (getattr) on rakudo-j, didn't you?

[20:03] <psch> bartolin: yeah, i did, but as i said, i'm not sure it really covers everything

[20:03] <bartolin> oops, you just said that

[20:04] <psch> bartolin: but the thing is, autoboxing is somewhat similar, in that moar can elide (sp?) containers in some cases, but jvm can't

[20:04] <bartolin> I see

[20:05] <psch> and it's kinda hard to make people follow the (maybe justifiably stricter, maybe overly strict) rules on the almost-left-behind backend, when the we-actually-use-this backend does things in way more user-friendly manor vOv

[20:05] <psch> i'm actually not sure boxing falls into the specific thing i'm thinking of, though

[20:06] <psch> but yeah, i'm ok with it cause in the end it's about the language, not one (inconsistently contributing) devs pet-backend :P

[20:07] * bartolin hugs psch and his pet-backend

[20:08] <psch> ...i feel like i'm seeming horribly needy the last few days :P

[20:11] <geekosaur> bah. there's a lot of communities where you're expected to be superhumanly non-needy or at least act as such. funny thing, many of the devs in those are more than a little antisocial...

[20:12] <nine> psch: the unbox error doesn't make any sense. It's definitely happening on the nqp::join and it's joining two Strs

[20:13] <nine> oh...should have backlogged

[20:13] <psch> nine: you mean unboxing fixing it doesn't make any sense?

[20:13] <nine> No, I wrote that before seeing that you guys have been faster :)

[20:13] <psch> ah, alright

[20:14] <psch> geekosaur: thanks for the reassurance, it's appreciated :)

[20:16] <tbrowder> ref build and new file: mea culpa!! sorry for the linenoise; I tend to switch chars and am always putting npq instead on nqp, dummy yosh named the real file DebugPod.npq even though the build files say nqp--problem solved...thanks all.  BTW, looking closely at the output of "make -d" did the trick.  All is well with build tools. PROBLEM SOLVED

[20:16] <psch> tbrowder++

[20:18] <timotimo> ooooh

[20:19] <dalek> roast: 6da250f | niner++ | S29-context/eval.t:

[20:19] <dalek> roast: Test for BEGIN time EVAL screwing up outer comp unit's symbols

[20:19] <dalek> roast:

[20:19] <dalek> roast: RT #128457

[20:19] <dalek> roast: review: https://github.com/perl6/roast/commit/6da250f05e

[20:19] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128457

[20:21] <nine> aaaand closed :)

[20:21] <psch> nine++

[20:26] <vendethiel> ugh, the learnxiny needs a good cleanup. I wish I knew how to split it up. Or how to write a book...

[20:34] <bartolin> yeah, nine++

[20:34] <lizmat> decommute&

[20:42] <[Tux]> nine++ that looks like real good work!

[20:42] <bartolin> a spectest on r-m only had one failing test in S17-lowlevel/lock.t so I opened a PR (https://github.com/rakudo/rakudo/pull/810)

[20:42] <Zoffix> Wooo! nine++

[20:51] <dalek> rakudo/nom: bd85716 | bartolin++ | src/core/CompUnit/RepositoryRegistry.pm:

[20:51] <dalek> rakudo/nom: Fix module loading on rakudo-j

[20:51] <dalek> rakudo/nom:

[20:51] <dalek> rakudo/nom: Trying to load a module on rakudo-j failed with

[20:51] <dalek> rakudo/nom: 'This type cannot unbox to a native string'

[20:51] <dalek> rakudo/nom:

[20:51] <dalek> rakudo/nom: Adding an 'nqp::unbox_s' fixes this and works for

[20:51] <dalek> rakudo/nom: rakudo-j as well.

[20:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bd857166d2

[20:52] <dalek> rakudo/nom: d5abea9 | niner++ | src/core/CompUnit/RepositoryRegistry.pm:

[20:52] <dalek> rakudo/nom: Merge pull request #810 from usev6/patch-2

[20:52] <dalek> rakudo/nom:

[20:52] <dalek> rakudo/nom: Fix module loading on rakudo-j

[20:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d5abea965f

[20:52] <vendethiel> nine++ # holy BEGIN stuff. that looks hard to debug

[20:54] <travis-ci> Rakudo build errored. Stefan Seifert 'Fix BEGIN time EVAL screwing up MAIN_CTX

[20:54] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/142565689 https://github.com/rakudo/rakudo/compare/b8bc1b1c367a...027dd390ea74

[20:54] <psch> git didn't respond it looks like

[20:56] <psch> *github

[21:08] <dalek> rakudo/nom: 41b685e | niner++ | src/core/CompUnit/ (2 files):

[21:08] <dalek> rakudo/nom: Use the CompUnit::Handle as $*CTXSAVE instead of CompUnit::Loader

[21:08] <dalek> rakudo/nom:

[21:08] <dalek> rakudo/nom: Save a contextual and keeps more code dealing with module_ctx in

[21:08] <dalek> rakudo/nom: CompUnit::Handle.

[21:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/41b685ee10

[21:08] <nine> Now that I finally fully understand this $*CTX_SAVE business, this was kind of obvious :)

[21:08] <nine> You learn with every bugfix

[21:30] <gfldex> BrokenRobot: please review https://github.com/perl6/Pod-To-HTML/commit/6131c1aa95ee98aea8470af08d688c478f36407c

[21:30] <gfldex> BrokenRobot: a complete list of name="foo" and where they come from https://gist.github.com/gfldex/ea31c8f951c44a39023313ca46c8f7bb

[21:33] <gfldex> BrokenRobot: actually that list is not complete, I foolishly used --parallel=2

[21:38] <AlexDaniel> bisect: good=2015.10 2 ** 99999999999999999999999999999999999

[21:39] <bisectable> AlexDaniel: (2015-12-03) https://github.com/rakudo/rakudo/commit/6779524

[21:41] <AlexDaniel> .tell lizmat fwiw, numeric overflow changes were before 2015.12, but you can still find it with bisectable: bisect: good=2015.10 2 ** 99999999999999999999999999999999999

[21:41] <yoleaux2> AlexDaniel: I'll pass your message to lizmat.

[21:56] <gfldex> BrokenRobot: complete list https://gist.github.com/gfldex/b27f34fb0cc621e72bcdc53c94a1ff98

[22:28] <gfldex> BrokenRobot: `X<|twigils, !>` translates to `Pod::FormattingCode.new(type => "X", meta => [["twigils", " !"],], config => {}, contents => [""])` what looks like a parser weakness to me

[22:46] <travis-ci> Rakudo build failed. Stefan Seifert 'Use the CompUnit::Handle as $*CTXSAVE instead of CompUnit::Loader

[22:46] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/142589416 https://github.com/rakudo/rakudo/compare/d5abea965fd0...41b685ee102b

[23:52] <Zoffix> Well, this is new: t/spec/S06-other/main-usage.rakudo.moar   TODO passed:   29

[23:54] <Zoffix> ok 29 - failed constraint check doesn't leak internal exception out to the user# TODO RT \#127977

[23:54] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127977

[23:58] <Zoffix> Looks fixed. Sometime from today, 'cause I was spectesting ~10 hours ago and it wasn't in there
