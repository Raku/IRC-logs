[07:42] <[Tux]> This is Rakudo version 2016.09-142-g605f272 built on MoarVM version 2016.09-27-g0bdbd6e

[07:42] <[Tux]> csv-ip5xs        3.100

[07:42] <[Tux]> test            16.805

[07:42] <[Tux]> test-t           7.370

[07:42] <[Tux]> csv-parser      18.366

[09:35] <lizmat> Files=1146, Tests=53274, 234 wallclock secs (14.15 usr  3.94 sys + 1454.00 cusr 134.71 csys = 1606.80 CPU)

[09:51] <dalek> roast: 03380fe | lizmat++ | S06-signature/types.t:

[09:51] <dalek> roast: Make test less specific to accommodate more specificity

[09:51] <dalek> roast: review: https://github.com/perl6/roast/commit/03380fe917

[09:53] <dalek> roast/6.c-errata: 9dd5444 | lizmat++ | S06-signature/types.t:

[09:53] <dalek> roast/6.c-errata: Make test less specific to accommodate more specificity

[09:53] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/9dd5444367

[10:30] <nine> lizmat: I just love that commit message :)

[11:57] <nine> I now have a fully automated script for creating updated nqp RPMs on the Open Build Service including writing of the changelog :) Now only automation for rakudo itself is missing

[11:57] <nine> Soon we'll have fresh openSUSE packages on every release day :)

[12:03] <p3rln00b> NeuralAnomaly: stats

[12:03] <NeuralAnomaly> p3rln00b, [✘] Next release will be in 1 day and 1 week. Since last release, there are 36 new still-open tickets (33 unreviewed and 0 blockers) and 142 unreviewed commits. See http://perl6.fail/release/stats for details

[12:04] <nine> Rakudo's ChangeLog will be harder as that's just too much to put into the .spec file :/ Maybe I should just write that it's a new version

[14:55] <p3rln00b> Files=1194, Tests=129670, 133 wallclock secs (20.40 usr  2.73 sys + 2306.51 cusr 220.83 csys = 2550.47 CPU)

[14:56] <p3rln00b> (guess it doesn't hurt for me to post these once in a while, so we get some sort of historical benchmark going in the logs)

[14:56] <nine> lizmat++ does that, too

[15:00] <p3rln00b> ZOFVM: Files=1194, Tests=129670, 133 wallclock secs (20.40 usr  2.73 sys + 2306.51 cusr 220.83 csys = 2550.47 CPU)

[15:00] <p3rln00b> (I just realized, it may be hard to grep for them :P, so I'll be using a prefix)

[15:17] <p3rln00b> m: sub { 42.return }()

[15:17] <camelia> rakudo-moar 605f27: OUTPUT«Attempt to return outside of any Routine␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:17] <p3rln00b> That's broken innit...

[16:10] <jnthn> Looks like

[16:19] <timotimo> it looks for a return in the wrong position?

[16:57] <p3rln00b> m: say (-125)**(1/3)

[16:57] <camelia> rakudo-moar 605f27: OUTPUT«NaN␤»

[16:57] <p3rln00b> m: say (-125+0i)**(1/3)

[16:57] <camelia> rakudo-moar 605f27: OUTPUT«2.5+4.33012701892219i␤»

[16:57] <p3rln00b> :S

[16:58] <p3rln00b> m: say (-1+0i) ** .5

[16:58] <camelia> rakudo-moar 605f27: OUTPUT«6.12323399573677e-17+1i␤»

[17:22] <p3rln00b> For the curious, that was https://rt.perl.org/Ticket/Display.html?id=128584#txn-1430565

[17:22] * p3rln00b puts away his pretend Math Degree back in the drawer.

[17:23] <timotimo> do other systems try to give 0+1i for that by finding out if it's that special case?

[17:24] <p3rln00b> Why is that a special case?

[17:24] <p3rln00b> Oh the first one you mean

[17:25] <p3rln00b> Perl 5 gives NaN

[17:25] <timotimo> i meant getting the sqrt of -1+0i

[17:25] <timotimo> giving NaN for -125 is correct. we only give you complex out if you put complex in

[17:25] <p3rln00b> m: say sqrt(-1+0i)

[17:25] <camelia> rakudo-moar 605f27: OUTPUT«0+1i␤»

[17:26] <p3rln00b> timotimo: but it's not a complex. The result is -5

[17:28] <p3rln00b> heh, python gives (2.5+4.330127018922192j) for it :}

[17:29] <timotimo> oh!

[17:29] <timotimo> it's the third root

[17:29] <p3rln00b> Yeah

[17:29] <timotimo> why didn't i look closely enough ...

[17:32] <dogbert17> o/

[17:33] <p3rln00b> \o

[17:33] <dogbert17> is everyone valgrinding?

[17:33] * p3rln00b is working... (well supposed to)

[17:33] <p3rln00b> Speaking of which. Perhaps I should do a couple of hours of honest labour this week..

[17:33] * p3rln00b &

[17:33] <p3rln00b> :)

[17:34] <dogbert17> :)

[17:35] <dogbert17> when running valgrind on some perl6 code the Leak Summary often looks like below. Are those the expected numbers?

[17:35] <dogbert17> ==29364== LEAK SUMMARY: definitely lost: 5,454 bytes in 181 blocks; indirectly lost: 14,112 bytes in 668 blocks; possibly lost: 120,032 bytes in 3,751 blocks; still reachable: 13,409 bytes in 9 blocks

[17:43] <dogbert17> most spectests I have valgrinded have given the number above but 't/spec/S17-procasync/stress.t' stands out with

[17:43] <dogbert17> LEAK SUMMARY: definitely lost: 88,106 bytes in 957 blocks; indirectly lost: 65,868 bytes in 1,229 blocks; possibly lost: 251,384 bytes in 7,228 blocks

[17:49] <dalek> nqp: b258244 | usev6++ | src/vm/jvm/QAST/Compiler.nqp:

[17:49] <dalek> nqp: Bulletproof against nodes without .orig on JVM

[17:49] <dalek> nqp:

[17:49] <dalek> nqp: ... as it was done with d6370eb8be for MoarVM. Makes this type

[17:49] <dalek> nqp: of code pass (and fixes RT #126899):

[17:49] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126899

[17:49] <dalek> nqp:

[17:49] <dalek> nqp: my $side-effect = 0; [andthen] Int, ++$side-effect

[17:49] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b258244952

[18:16] <FROGGS> dogbert17: moarvm does an unclean shutdown, so yes, it is expected to leak

[18:17] <FROGGS> dogbert17: though you can alter your perl6 runner and add a moar switched called: --full-cleanup

[18:43] <dogbert17> FROGGS: I have --full-cleanup set

[18:44] <FROGGS> well, then it is meant to be very nice to valgrind I suppose

[18:46] <dogbert17> here's an piece of the leak report for t/spec/S17-procasync/stress.t

[18:46] <dogbert17> ==30680== 4,556 (4,020 direct, 536 indirect) bytes in 67 blocks are definitely lost in loss record 1,413 of 1,780

[18:46] <dogbert17> ==30680==    at 0x402C109: calloc (in /usr/lib/valgrind/vgpreload_memcheck-x86-linux.so)

[18:46] <dogbert17> ==30680==    by 0x4121A27: MVM_calloc (alloc.h:11)

[18:46] <dogbert17> ==30680==    by 0x4121CB3: MVM_io_syncpipe (syncpipe.c:115)

[18:46] <dogbert17> ==30680==    by 0x40E0D7F: MVM_interp_run (interp.c:4598)

[18:46] <dogbert17> ==30680==    by 0x41C8A22: MVM_vm_run_file (moar.c:304)

[18:46] <dogbert17> ==30680==    by 0x8048EA5: main (main.c:191)

[19:33] <AlexDaniel> What's the easiest way to provide fallback subroutines if some module is not installed?

[19:33] <AlexDaniel> ah, wrong channel

[22:24] <dalek> rakudo/nom: 0d9b547 | usev6++ | src/core/metaops.pm:

[22:24] <dalek> rakudo/nom: Remove bandaid for JVM

[22:24] <dalek> rakudo/nom:

[22:24] <dalek> rakudo/nom: Looks like back in 2015 those unbound closures caused NPE.

[22:24] <dalek> rakudo/nom: This seems to be fixed now.

[22:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0d9b547733

[22:24] <dalek> rakudo/nom: 2285d35 | (Zoffix Znet)++ | src/core/metaops.pm:

[22:24] <dalek> rakudo/nom: Merge pull request #898 from usev6/jvm_cleanup

[22:24] <dalek> rakudo/nom:

[22:24] <dalek> rakudo/nom: Remove bandaid for JVM

[22:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2285d35ee6
