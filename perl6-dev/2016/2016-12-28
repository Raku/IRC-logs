[00:59] <notviki> m: dd [0, False].sort

[00:59] <camelia> rakudo-moar ca919d: OUTPUT¬´(0, Bool::False)‚ê§¬ª

[00:59] <notviki> \o/

[01:34] <notviki> I'm getting a ton of spectest failures :/

[01:34] <notviki> https://gist.github.com/zoffixznet/29301168d1fbbfeb2f003d3c7f515802

[01:35] <notviki> Unrecognized character name LINE FEED (LF)

[01:35] <notviki> at /home/zoffix/CPANPRC/Standard-Rakudo/t/spec/S02-literals/char-by-name.rakudo.moar:16

[01:36] <notviki> ------> is("\c[LINE FEED (LF)‚èè]", "\c10", '\c[LINE FEED (LF)

[01:38] <notviki> ------> ok("\c[NULL‚èè]" ~~ m/^<:InBasicLatin>$/, q{Match <:In

[01:38] <notviki> Dubious, test returned 1 (wstat 256, 0x100)

[01:39] <notviki> ------> ok("\c[FORM FEED (FF)‚èè]" ~~ m/^<:bc<WS>>$/, q{Match (Whitespac

[01:39] <notviki> Dubious, test returned 1 (wstat 256, 0x100)

[01:40] <notviki> This can be avoided by running spectest before pushing commits to nom

[01:40] <samcv> notviki, can you try this branch https://github.com/samcv/MoarVM/tree/working-merged

[01:40] <samcv> err

[01:40] <samcv> wait

[01:40] <samcv> not that branch i think

[01:40] <samcv> here https://github.com/samcv/MoarVM/commits/fix_control_names_temp

[01:41] <samcv> should hopefully fail less spectests, though it will still fail the LINE FEED (LF) ones

[01:46] <samcv> i'm going to fudge the tests now, but if you can checkout that moar branch

[01:46] <samcv> and let me know if anything seems amiss

[01:47] <notviki> Why are we fudging tests instead of reverting the commit that broke all of them?

[01:47] <samcv> err

[01:48] <samcv> yeah yeah we can revert it. that is fine with me

[01:50] <samcv> though it remains unclear if we want to be able to specify characters with unicode 1 names and not the official aliases, which we have tests for already like \c[LF], and \c[LINE FEED (LF] is awkward anyway. but i think reverting would be good until that is sorted out

[01:50] <samcv> i will table the names problem until after we work out the property issues

[01:51] <samcv> # TODO: name aliases (see http://www.unicode.org/reports/tr18/#Name_Properties)

[01:51] <samcv> # for U+0009 the implementation could accept the official name CHARACTER TABULATION, and also the aliases HORIZONTAL TABULATION, HT, and TAB

[01:51] <samcv> hmm says this at the bottom, so that seemed to be intended. don't know if we intended to test for unicode 1 names on purpose though.

[01:52] <samcv> just has been that way in moarvm forever

[01:53] <samcv> idk maybe it would be easier to just manually edit the file afterward for breaking things (the unicode database) :\

[01:55] <samcv> wow the size of the data structure went down hugely once i got rid of dupes

[01:55] <samcv> which I _finally_ suceeding in doing

[01:59] <notviki> Looks like many of those fail in 6.c-errata too: https://gist.github.com/zoffixznet/29f443ead147b43382756278a9892b79

[02:00] <notviki> And t/spec/S11-modules/nested.t fails consistently with "No appropriate parametric role variant available for 'RoleB'"

[02:00] * notviki wonders what's that about

[02:01] <notviki> :S and only on 6.c-errata :/

[02:01] <samcv> hmm

[02:01] <samcv> yeah all the \c[ ] ones that have unicode 1 names specified fail

[02:02] <samcv> and also all the ones that are unicode alias names

[02:03] <notviki> hmmm

[02:03] <samcv> but my patch i linked to, it only fails the unicode 1 names

[02:03] <samcv> and passes all the other ones

[02:04] <samcv> (there is only 1 test in 6.c-errata testing unicode 1 name)

[02:04] <samcv> we have like a billion in master roast for some reason

[02:04] <notviki> .tell nine 6.c-errata version of t/spec/S11-modules/nested.t now fails on HEAD. with "No appropriate parametric role variant available for RoleB". What do we do?

[02:04] <yoleaux2> notviki: I'll pass your message to nine.

[02:05] <samcv> there's something wrong with QAST Regex tho

[02:05] <samcv> argh

[02:05] <notviki> NeuralAnomaly: status

[02:05] <NeuralAnomaly> notviki, [‚úò] Next release will be in 3 weeks and 3 days. Since last release, there are 24 new still-open tickets (23 unreviewed and 0 blockers) and 116 unreviewed commits. See http://perl6.fail/release/stats for details

[02:26] <samcv> nqp: say('test')

[02:26] <camelia> nqp-moarvm: OUTPUT¬´test‚ê§¬ª

[02:26] <samcv> nqp: say('so') if 'a' ~~ /<:Latin>/

[02:26] <camelia> nqp-moarvm: OUTPUT¬´so‚ê§¬ª

[03:31] <samcv> my constant œÄ := pi; #> there must be somethnig special about how we look this up

[03:31] <samcv> the pi symbol

[03:32] <samcv> or maybe i just really borked something :\

[03:32] <geekosaur> s: pi

[03:32] <SourceBaby> geekosaur, Something's wrong: ‚ê§ERR: Cannot resolve caller sourcery(Num); none of these signatures match:‚ê§    ($thing, Str:D $method, Capture $c)‚ê§    ($thing, Str:D $method)‚ê§    (&code)‚ê§    (&code, Capture $c)‚ê§  in block <unit> at -e line 6‚ê§‚ê§

[03:32] <samcv> with my moarvm that is

[03:32] <samcv> not sure why that would be broken, nqp compiles fine.

[03:32] * geekosaur may figure out how to use that thing eventually...

[03:33] <samcv> rror while compiling, type X::Syntax::Missing

[03:33] <notviki> samcv: special how?

[03:33] <samcv> idk

[03:33] <samcv> different than non special unicode things

[03:34] <samcv> because it's failing at parsing at the unicode constants like e and tau and pi

[03:34] <notviki> hm

[03:34] <samcv> commented those three lines out and it is fine

[03:34] <notviki> I know e was failing on JVM before

[03:34] <samcv> geekosaur, are you any good at QAST Regex?

[03:34] <geekosaur> nope

[03:34] <samcv> ahh

[03:35] <samcv> jnthn, explained some things, but i really am not sure what happens in there, as far as how it resolves property names to actual values

[03:35] <samcv> the ops are confusing

[03:36] <samcv> but there is a bug in there.

[03:36] <samcv> i fixed MoarVM i *think* i will run a spectest and see. if i only fail regex unicode matches

[03:37] <samcv> and all the properties now have the SAME property code

[03:37] <samcv> \o/

[03:37] <samcv> which now makes bugs show up that relied on them being incorrect before ;P

[03:38] <samcv> wow this is really nice. i've never gotten all of them having the correct numbers‚Ä¶ in the database

[03:44] <samcv> oh it must rely on unimatch

[03:44] <notviki> .ask lizmat I see comment "canary until 2014". Does it mean it can be removed now? https://github.com/rakudo/rakudo/commit/66cd275b018722057b58da796a9e314b3492155e

[03:44] <yoleaux2> notviki: I'll pass your message to lizmat.

[04:00] <notviki> m: <fix-combinations-and-regret-staying-late-in-the-morning  go-to-sleep>.roll.say

[04:00] <camelia> rakudo-moar ca919d: OUTPUT¬´go-to-sleep‚ê§¬ª

[04:00] <notviki> You're the boss!

[04:17] <notviki> .ask lizmat for RT#130418 (chdir), the commit says "so we don't lose failures", so maybe if we `return` them instead of throwing that'd work out? https://github.com/rakudo/rakudo/commit/7dec9a9540a8a4b265e70a67d741f70c83492b12

[04:17] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130418

[04:17] <yoleaux2> notviki: I'll pass your message to lizmat.

[04:55] <dalek> roast: 08aa3ea | samcv++ | S05-mass/properties-script.t:

[04:55] <dalek> roast: Fix properties-script.t to use FF instead of FORM FEED (FF)

[04:55] <dalek> roast:

[04:55] <dalek> roast: Makes it work on the latest Rakudo, and this file is testing mostly

[04:55] <dalek> roast: regex script matches, so it is fine to use one of the other notations.

[04:55] <dalek> roast: We test \c[FORM FEED (FF)] and others in S05-mass/named-chars.t

[04:55] <dalek> roast: review: https://github.com/perl6/roast/commit/08aa3ea371

[04:56] <samcv> FF works on jvm and moar current and before the most recent moar bump so this should be fine, we already test \c[stuff] in another script, but the 3 occurrences in this file stopped it from compiling

[04:57] <samcv> m: "üí©".unimatch("Miscellaneous Symbols and Pictographs")

[04:57] <camelia> rakudo-moar ca919d: ( no output )

[04:57] <samcv> m: "üí©".unimatch("Miscellaneous Symbols and Pictographs").say

[04:57] <camelia> rakudo-moar ca919d: OUTPUT¬´False‚ê§¬ª

[04:57] <samcv> aha. hmm maybe i can get this working while i'm at it

[05:00] <samcv> bisectable6, use Test, is ‡º≥, -0.5, "Tibetan number literal produces a negative";

[05:00] <bisectable6> samcv, On both starting points (old=2015.12 new=ca919d9) the exit code is 1 and the output is identical as well

[05:00] <bisectable6> samcv, Output on both points: ===SORRY!=== Error while compiling /tmp/C1V7HoLu_6‚ê§Confused‚ê§at /tmp/C1V7HoLu_6:1‚ê§------> use Test‚èè, is ‡º≥, -0.5, "Tibetan number literal pr

[05:00] <samcv> committable6, is ‡º≥, -0.5, "Tibetan number literal produces a negative";

[05:00] <committable6> samcv, ¬¶¬´is¬ª: Cannot find this revision

[05:00] <samcv> committable6, all is ‡º≥, -0.5, "Tibetan number literal produces a negative";

[05:00] <committable6> samcv, https://gist.github.com/a7ec249f6a8afa7485457797632060d2

[05:01] <samcv> committable6, all use Test; is ‡º≥, -0.5, "Tibetan number literal produces a negative";

[05:01] <committable6> samcv, https://gist.github.com/4f623327c4d7755bd9747646cf9a5ccf

[05:03] <samcv> ok unival is still broke for me. not sure why

[05:12] <samcv> missing the denominator and numerator for some reason. that would do it

[06:00] <dalek> rakudo/nom: 3baffe7 | samcv++ | / (2 files):

[06:00] <dalek> rakudo/nom: uniprop: return Bool's for Emoji properties to prepare for MoarVM adding

[06:00] <dalek> rakudo/nom:

[06:00] <dalek> rakudo/nom: With this pull: https://github.com/MoarVM/MoarVM/pull/468

[06:00] <dalek> rakudo/nom: We will have all Emoji properties except Emoji_All. With that change to

[06:00] <dalek> rakudo/nom: MoarVM and this change to Rakudo we now pass the roast Emoji property

[06:00] <dalek> rakudo/nom: tests (aside from Emoji_All).

[06:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3baffe71a8

[06:33] <lizmat> .

[06:33] <yoleaux2> 03:44Z <notviki> lizmat: I see comment "canary until 2014". Does it mean it can be removed now? https://github.com/rakudo/rakudo/commit/66cd275b018722057b58da796a9e314b3492155e

[06:33] <yoleaux2> 04:17Z <notviki> lizmat: for RT#130418 (chdir), the commit says "so we don't lose failures", so maybe if we `return` them instead of throwing that'd work out? https://github.com/rakudo/rakudo/commit/7dec9a9540a8a4b265e70a67d741f70c83492b12

[06:33] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130418

[06:33] <lizmat> .tell notviki the canary can go

[06:33] <yoleaux2> lizmat: I'll pass your message to notviki.

[06:34] <lizmat> .tell notviki re #130418, judging from 7dec9a9540a8a4b2 I think the throw was added because it is very dangerous to "miss" a chdir() failing

[06:34] <yoleaux2> lizmat: I'll pass your message to notviki.

[06:34] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130418

[06:35] <lizmat> .tell notviki so I'm leaning towards changing the documentation / tests rather than the code

[06:35] <yoleaux2> lizmat: I'll pass your message to notviki.

[06:35] <lizmat> breakfast&

[06:36] <samcv> morning lizmat

[06:41] * geekosaur had that thought re chdir as well

[06:46] <travis-ci> Rakudo build passed. Samantha McVey 'uniprop: return Bool's for Emoji properties to prepare for MoarVM adding

[06:46] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/187137264 https://github.com/rakudo/rakudo/compare/ca919d96c97e...3baffe71a8e1

[07:14] <samcv> m: '1'.uniprop('Numeric_Value_Denominator').say

[07:14] <camelia> rakudo-moar 3baffe: OUTPUT¬´1‚ê§¬ª

[07:14] <samcv> m: Rakudo::Internals.PROPCODE('Numeric_Value_Denominator').say

[07:14] <camelia> rakudo-moar 3baffe: OUTPUT¬´18‚ê§¬ª

[07:15] <samcv> weird. that's the same value i have atm on the branch i'm working on. coincidence prolly

[07:15] <samcv> m: Rakudo::Internals.PROPCODE('Numeric_Value_Denominator').say

[07:15] <camelia> rakudo-moar 3baffe: OUTPUT¬´18‚ê§¬ª

[07:15] <samcv> m: Rakudo::Internals.PROPCODE('Numeric_Value_Numerator').say

[07:15] <camelia> rakudo-moar 3baffe: OUTPUT¬´11‚ê§¬ª

[07:15] <samcv> bisectable6, Rakudo::Internals.PROPCODE('Numeric_Value_Numerator').say

[07:15] <bisectable6> samcv, Bisecting by output (old=2015.12 new=3baffe7) because on both starting points the exit code is 0

[07:16] <bisectable6> samcv, bisect log: https://gist.github.com/2bb2552cbc3d3b817c1f6523fb608b07

[07:16] <bisectable6> samcv, (2016-09-28) https://github.com/rakudo/rakudo/commit/2cad3d214f6f151df537a535760e341838332c21

[07:26] <samcv> anybody know how unival works? this is the one unicode property i can't seem to get to work :\

[07:27] <samcv> oh wait forgot to say

[07:28] <samcv> unicode.c says at the top This file is generated by ucd2c.pl from the Unicode database.

[07:28] <samcv> but ucd2c.pl has no references to this file

[07:28] <samcv> and it has never changed when i have rebuild the unicode database

[07:29] <samcv> .ask jnthn This file is generated by ucd2c.pl from the Unicode database says unicode.c, but I have never had the file change when running ucd2c.pl before

[07:29] <yoleaux2> samcv: I'll pass your message to jnthn.

[07:29] <samcv> .ask jnthn unival is the one property I can't get to work after working hard on the script file. the other ones seem alright

[07:29] <yoleaux2> samcv: I'll pass your message to jnthn.

[07:35] <samcv> oh interestingly '1'.uniprop('Numeric_Value_Denominator') on my test build gives me a 1

[07:35] <samcv> but .unival just returns 0

[07:36] <samcv> and Numeric_Value_Numerator returns 1 too

[07:38] <samcv> m: say Rakudo::Internals.PROPCODE("Numeric_Value_Denominator")

[07:38] <camelia> rakudo-moar 3baffe: OUTPUT¬´18‚ê§¬ª

[07:38] <samcv> cool :)

[07:39] <samcv> I think i can fix this !!!!

[07:40] <samcv> \\o//

[07:41] <samcv> WOOO! fixed!

[07:41] * samcv does a dance

[07:52] <dalek> rakudo/nom: dbbf9dd | samcv++ | src/ (2 files):

[07:52] <dalek> rakudo/nom: Use full Unicode name for Numeric_Value_* for Cool.pm and Actions.nqp

[07:52] <dalek> rakudo/nom:

[07:52] <dalek> rakudo/nom: Also switch from nqp::unipropcode in Cool.pm to

[07:52] <dalek> rakudo/nom: Rakudo::Internals.PROPCODE which does some caching on the Rakudo side

[07:52] <dalek> rakudo/nom: which should probably have a bit of speed improvement for lookups of the

[07:52] <dalek> rakudo/nom: same character.

[07:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dbbf9dd169

[08:06] <moritz> good morning

[08:07] <lizmat> moritz o/

[08:12] <moritz> samcv: welcoem to the Rakudo core dev team. It's always great to see new, enthusiastic contributors!

[08:12] <samcv> :)

[08:12] <samcv> happy to be here!

[08:14] <tadzik> yay samcv! \o/

[08:14] <samcv> \o/

[08:14] <samcv> i'm rich!

[08:15] <samcv> perl 6 is the most exciting programming language I know and i'm glad to be enriched by being able to contribute

[08:15] <tadzik> you enrich us all, everyone wins :)

[08:16] <[Tux]> This is Rakudo version 2016.12-119-gdbbf9dd16 built on MoarVM version 2016.12-21-g3dc56470

[08:16] <[Tux]> csv-ip5xs        3.070

[08:16] <[Tux]> test            13.721

[08:16] <[Tux]> test-t           5.196

[08:16] <[Tux]> csv-parser      13.984

[08:18] <lizmat> whee!

[08:18] <lizmat> samcv++  :-)

[08:50] <dalek> rakudo/nom: 434bf75 | lizmat++ | src/core/ (2 files):

[08:50] <dalek> rakudo/nom: Make .sort always return a .Seq

[08:50] <dalek> rakudo/nom:

[08:50] <dalek> rakudo/nom: This is not really about performance but really about (possible)

[08:50] <dalek> rakudo/nom: correctness.  This makes a few spectests fail that test for the return

[08:50] <dalek> rakudo/nom: type of .sort being a List (which one could consider to be faulty).

[08:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/434bf75b9d

[08:53] <samcv> m: 'üí©'.uniprop('Block').say

[08:53] <camelia> rakudo-moar dbbf9d: OUTPUT¬´Miscellaneous Symbols and Pictographs‚ê§¬ª

[08:53] <samcv> hm

[08:53] <samcv> this test looks bad

[08:54] <samcv> unless we're actually testing it with spaces and not underscores which is how roast says in the print

[08:54] <samcv> hm

[08:56] <samcv> no it's good

[08:57] <samcv> not too bad if that's the only one failing in this test

[08:57] <samcv> i was failing like down from 100 to only 3 (testing Miscellaneous_Symbols_And_Pictographs with different _ or capitalization)

[08:59] <dalek> roast: 9b1a7cb | moritz++ | S32-list/grep.t:

[08:59] <dalek> roast: RT #130365: test last in grep on infinite list

[08:59] <dalek> roast: review: https://github.com/perl6/roast/commit/9b1a7cb528

[08:59] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130365

[09:14] <lizmat> m: multi a(Callable:D &a, *@v) { "one" }; multi a(+v) { "two" }; say a { $^a cmp $^b }, 1,2,3  # MMD dispatch error ?

[09:14] <camelia> rakudo-moar 434bf7: OUTPUT¬´two‚ê§¬ª

[09:15] <lizmat> m: say { $^a cmp $^b } ~~ Callable:D

[09:15] <camelia> rakudo-moar 434bf7: OUTPUT¬´True‚ê§¬ª

[09:27] <dalek> roast: ab31dc4 | samcv++ | S05-mass/properties-general.t:

[09:27] <dalek> roast: Add test for matching ' ' ~~ /<:White_Space>/

[09:27] <dalek> roast:

[09:27] <dalek> roast: Remove some extra whitespace in the file as well.

[09:27] <dalek> roast: review: https://github.com/perl6/roast/commit/ab31dc41dd

[09:59] <ThorstenB> Hi. I'm up too early and have a question about WSL. I'm not sure who to address this to, so figured this channel was as good a start as any.

[10:00] <ThorstenB> WSL is microsoft's "Bash on Windows" effort, it runs Ubuntu natively on top of Windows. Useful for dev work on that platform, particularly if the target is a Linux server.

[10:01] <ThorstenB> Rakudo * will build there, with one caveat: the build fails first, then you can disable execstack on libmoar.so, try again, then it works. That's using rakudobrew.

[10:02] <samcv> but then it succeeds after that?

[10:02] <samcv> moar compiles fine, nqp compiles fine, but rakudo fails?

[10:02] <ThorstenB> This is because executable stack is a feature not implemented in WSL. I asked the MS devs when this feature would come, waiting on answer

[10:02] <samcv> oh you mean all of rakudo? which part does it fail on

[10:02] <samcv> ah

[10:02] <ThorstenB> The build moar fails , then succeeds

[10:03] <ThorstenB> I have a link to reproduce this, on iPhone might take me a moment. Let me ask

[10:03] <ThorstenB> My question though:

[10:03] <ThorstenB> Is it reasonable for the rakudo build environment to detect WSL and compile with -noexecstack in order to build more easily there?

[10:04] <ThorstenB> Or do you prefer to just wait until MS has implemented execstack support ?

[10:05] <ThorstenB> That promised link. The rakudo * / moarvm stuff is at the very end, the thread is about execstack in WSL in general: https://github.com/Microsoft/BashOnWindows/issues/286

[10:06] <samcv> that would be a question for jnthn i think

[10:10] <ThorstenB> Do they have a time they're usually on so I can ask? I have code to detect WSL from a perl 5 effort (which was not needed in the end, MS fixed a bug and perl 5 started working). I'd need pointing at where in the build environment such detection would

[10:11] <ThorstenB> Live, but be happy to take a stab at it

[10:13] <samcv> can you show me the code?

[10:14] <samcv> also was curious how the windows experience was, without WSL for rakudo *?

[10:16] <ThorstenB> Code: there's a patch attached to this: https://rt.perl.org/Public/Bug/Display.html?id=130258

[10:18] <ThorstenB> There's also a code snippet in this github thread (yorickdowne is myself): https://github.com/Microsoft/BashOnWindows/issues/186

[10:18] <ThorstenB> In a nutshell, check /proc/version to detect WSL

[10:18] <samcv> "In short, Perl modules cannot be installed because, for some reason, the files aren't really there even though I can browse, view, edit, delete, etc. those files." :P

[10:18] <samcv> a unix style file then?

[10:19] <ThorstenB> Yeah that's fixed now. File::Find lost its mind because MS would return link count 2 for a directory, always. They changed that to 0 and now File::Find knows not to rely on that count

[10:20] <ThorstenB> Yes, WSL runs Ubuntu, with a kernel

[10:20] <ThorstenB> Shim to intercept system calls

[10:20] <ThorstenB> It's a clever piece of engineering

[10:21] <samcv> yeah

[10:21] <ThorstenB> You asked about the rakudo * experience on Windows without WSL. I'm assuming you mean the windows binary provided ? If so, I shamefully admit I haven't even tried that

[10:21] <samcv> ah

[10:21] <ThorstenB> I don't target windows server, so while my laptop runs windows, ultimately code would run on Linux

[10:22] <samcv> ah so you want the closest environment then?

[10:22] <ThorstenB> WSL is just a convenient way not to have to launch an Ubuntu vm

[10:22] <samcv> to deployment

[10:22] <samcv> yeah

[10:22] <ThorstenB> Yeah

[10:22] <samcv> i don't see execstack mentioned on the RT or on the github post?

[10:24] <samcv> ThorstenB, so moarvm works fine? but building rakudo or nqp fails?

[10:24] <samcv> need to know which one

[10:24] <ThorstenB> We're talking about different issues. Let me try to untangle

[10:24] <samcv> oh

[10:24] <samcv> there's the file issue and the other one is building

[10:24] * samcv is more concerned about the building issue atm

[10:24] <ThorstenB> The last two links were about code to detect WSL

[10:25] <ThorstenB> Because you asked for it :)

[10:25] <samcv> yes. ok but

[10:25] <ThorstenB> Nothing more. That file issue is fixed

[10:25] <samcv> so we know We are on WSL

[10:25] <ThorstenB> Exactly

[10:25] <samcv> and so we need to change how Rakudo builds? or is it moarvm or nqp that fails

[10:25] <ThorstenB> Let me find the link again that talks about building moarvm and execstack

[10:25] <samcv> build process goes. MoarVM -> nqp -> rakudo

[10:25] <samcv> kk

[10:26] <ThorstenB> https://github.com/Microsoft/BashOnWindows/issues/286

[10:26] <ThorstenB> Very end of that thread, yorickdowne again

[10:26] <ThorstenB> Moarvm build fails

[10:26] <ThorstenB> It's because it tries to use execstack in libmoar.so and yeah, no go on WSL

[10:26] <ThorstenB> So the way to fix that is:

[10:27] <ThorstenB> Rakudobrew build moar

[10:27] <ThorstenB> Failure

[10:27] <samcv> ok so MoarVM fails

[10:27] <ThorstenB> Execstack -c path/to/libmoar.so

[10:28] <samcv> so if MoarVM builds fine. then we are in the clear?

[10:28] <ThorstenB> Rakudobrew build moar

[10:28] <ThorstenB> Success

[10:28] <ThorstenB> Yes the rest of the build works after that

[10:28] <samcv> ok but if we have a clean install

[10:28] <samcv> that won't help

[10:28] <samcv> hm

[10:28] <samcv> well unless we do it right after we make the .so maybe hm

[10:29] <samcv> if you can have it fail and provide an error log

[10:29] <ThorstenB> So if rakudobrew compiled libmoar with -noexecstack (and a couple other switches), this would likely work

[10:29] <samcv> and open a ticket https://github.com/MoarVM/MoarVM/issues

[10:29] <samcv> also would be good

[10:29] <ThorstenB> Okay let me hop over to pc for that, no ticket opening while on couch with phone :)

[10:29] <samcv> can you download moar and then

[10:30] <samcv> compile moar standalone without rakudobrew

[10:30] <samcv> then provide output

[10:30] <ThorstenB> Okay let me try that

[10:31] <ThorstenB> To be clear Though, im not suggesting to detect the failure. I'm suggesting to detect WSL, compile without execstack (thats just an option to gcc), so that there is no failure

[10:32] <samcv> yes

[10:32] <samcv> i understand that :)

[10:36] <ThorstenB> This is also emphatically not a bug in moar. It's reasonable to assume execstack is there when you detect an Ubuntu environment. That WSL is a partial implementation of Linux syscalls is an unexpected wrinkle. :)

[10:37] <samcv> yeah i understand

[10:37] <dalek> rakudo/nom: 5023bf3 | samcv++ | src/core/REPL.pm:

[10:37] <dalek> rakudo/nom: REPL: only suggest installing Linenoise/Readline if not on Windows

[10:37] <dalek> rakudo/nom:

[10:37] <dalek> rakudo/nom: Readline and Linenoise packages don't work on Windows. We should not ask

[10:37] <dalek> rakudo/nom: them to install something which is not compatible.

[10:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5023bf39f1

[10:39] <stmuk> I'm sure I've seen linenoise work on Windows -- although I think it only works with gcc and not MSVC (?)

[10:39] <yoleaux2> 16 Dec 2016 00:47Z <Zoffix> stmuk: any ideas for https://rt.perl.org/Ticket/Display.html?id=130192 ? I can't reproduce the issue with a built-from-source Rakudo, but it does exists in 2016.04 and 2016.11 Stars (the only two I tried)

[10:39] <samcv> stmuk, ok so should we only ask to install Linenoise and not Readline if not on windows?

[10:39] <samcv> hmm

[10:39] <samcv> i mean

[10:40] <stmuk> I'll check on a windows VM in the next few hours .. hassle me if I don't get back to you shortly

[10:40] <samcv> kk :)

[10:41] <samcv> ugh and https://github.com/drforr/perl6-readline/issues/12

[10:41] <samcv> i had to make a symlink for it to even work

[10:42] <samcv> and used to just enter an endless loop before some change to the REPL code

[10:42] <samcv> (when missing readline 7)

[10:42] <samcv> system updated readline and then perl 6 repl was very non plussed

[10:42] <samcv> and Linenoise doesn't support UTF-8

[10:43] <samcv> so I really want Readline to have a good user experience

[11:06] <ThorstenB> Samcv issue 470 is open for this

[11:10] <samcv> nice thanks :)

[11:13] <notviki> 

[11:13] <yoleaux2> 06:33Z <lizmat> notviki: the canary can go

[11:13] <yoleaux2> 06:34Z <lizmat> notviki: re #130418, judging from 7dec9a9540a8a4b2 I think the throw was added because it is very dangerous to "miss" a chdir() failing

[11:13] <yoleaux2> 06:35Z <lizmat> notviki: so I'm leaning towards changing the documentation / tests rather than the code

[11:13] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130418

[11:13] <notviki> OK

[11:14] <notviki> gonna do all in ~2 hours

[11:55] * notviki grumbles seeing even more spectest failures on nom -_-

[11:57] <notviki> And about this: https://github.com/perl6/roast/commit/08aa3ea37128fa37255ef8cc4ec21d58498b81b4

[11:58] <notviki> So now we're telling users that even if the stuff is in the roast, we still might change it if we feel the intent of the test is satisfied?

[11:59] <notviki> feels like thist stuff should wait until 6.d

[12:04] <notviki> results of spectest on 6.c-errata: https://gist.github.com/zoffixznet/fb682e087e02461405aa71e24168f872

[12:04] <notviki> will run stresstest in ~1 hours

[12:04] * notviki relocates

[12:08] <samcv> whoever wants to revert that moar pull is free to

[12:09] <samcv> would be a good idea‚Ä¶

[12:10] <samcv> notviki, i didn't remove any of those tests from roast btw. just from that file

[12:10] <samcv> there's another huge file devoted to them

[12:11] <samcv> but I think we should revert moarvm. then once we have unicode 1 name support we can do Unicode names + unicode alias names, then if that fails we could fall back to check the unicode 1 name

[12:12] <samcv> notviki, i will add that to the 6.d proposal file

[12:17] <notviki> I don't have a commit bit for MoarVM

[12:18] <samcv> i know :(

[12:18] <samcv> i asked pmuritas in #perl6 maybe he can do it

[12:19] <notviki> It's just we already have a lot of user affecting changes and "it's not in 6.c" is our excuse. But if we now start making changes that also include 6.c test suite changes....

[12:19] <samcv> yep

[12:23] <samcv> and i really hate how it breaks compiling too :\ that's really not good

[12:28] <samcv> yeah

[12:28] <samcv> oops

[12:30] <jnthn> Did we bump MOAR_REVISION?

[12:30] <yoleaux2> 07:29Z <samcv> jnthn: This file is generated by ucd2c.pl from the Unicode database says unicode.c, but I have never had the file change when running ucd2c.pl before

[12:30] <yoleaux2> 07:29Z <samcv> jnthn: unival is the one property I can't get to work after working hard on the script file. the other ones seem alright

[12:31] <samcv> oh hey

[12:31] <samcv> yeah. can you revert that last pull

[12:31] <jnthn> I guess...but doesn't your next PR lined up fix spectest?

[12:32] <samcv> it's more complicated than that‚Ä¶ sadly

[12:32] <samcv> we have tests in 6.c-errata that rely on unicode 1 names

[12:32] <samcv> wel. we have one test

[12:32] <jnthn> Ah, ok

[12:32] <samcv> and a bunch in roast currently. yeah

[12:32] <samcv> that's the only problem with it :\

[12:32] <jnthn> I figured you'd spectested it before submitting the PR ;)

[12:33] <jnthn> Revert done

[12:33] <samcv> ok cool

[12:34] <samcv> i thought it passed but I must have made some mistake, i was working with a lot of branches

[12:34] <jnthn> Ah, OK

[12:34] * jnthn tends to merge locally and test PRs from folks he's never heard of, but trusts the regulars to have done the testing. :-)

[12:35] <samcv> my mistake!

[12:35] <samcv> oh but also

[12:35] <jnthn> No worries, we all do them now and then.

[12:35] <samcv> i am pretty close to getting this working

[12:35] <jnthn> \o/

[12:35] <samcv> not the unicode 1 names but

[12:35] <jnthn> Got code-gen fixes in NQP also?

[12:35] <samcv> code-gen?

[12:36] <samcv> no

[12:36] <samcv> i would, but. i don't know how :P

[12:36] <samcv> you know much more what is wrong

[12:36] <samcv> jnthn, now i just need to make sure all the alias names we spectest for work. but other than that

[12:36] <jnthn> Well, my initial idea was to try and case-analyze the <:Foo>

[12:36] <samcv> everything is working and no duplicate property names with different values

[12:36] <samcv> and they are sorted in order

[12:37] <samcv> this seems fine tbh

[12:37] <jnthn> Since we know the set of things that are general category values at compile time

[12:37] <samcv> yeah

[12:37] <jnthn> So we can then spit out code to do a gen-cat check only

[12:37] <samcv> for nqp?

[12:37] <jnthn> And similar for boolean enumerated props

[12:37] <jnthn> Well, in the QAST regex compiler, yes.

[12:38] <samcv> well i'm most concerned about the space bug

[12:38] <samcv> because it stil persists even with nothing wrong in the data structure

[12:38] <jnthn> What I'd really like to do is to get rid of all the value names from the property names table.

[12:38] <samcv> no "Space" and "space" conflicting

[12:38] <samcv> just plain space

[12:38] <jnthn> Hm

[12:38] <samcv> no colliding keys

[12:38] <samcv> White_Space still works though

[12:39] <jnthn> What if it should have been White_Space all along, and we just got lucky that Space worked? :)

[12:39] <samcv> you mean space?

[12:39] <jnthn> Uh, yes

[12:39] <samcv> ha

[12:39] <samcv> welll!

[12:39] <samcv> space has always been broken

[12:39] <samcv> for at least 2 years

[12:39] <jnthn> This is the code behind \s iirc

[12:40] <samcv> space != White_Space

[12:40] <jnthn> So the real question is "what property should \s be using"

[12:40] <samcv> space === Line_Break=space

[12:40] <samcv> White_space

[12:40] <samcv> White_Space*

[12:41] <samcv> it uses space?

[12:41] <samcv> you sure?

[12:41] <jnthn> Well, can check easy enough

[12:42] <samcv> m: "\t".uniprop-bool('space').say

[12:42] <camelia> rakudo-moar 5023bf: OUTPUT¬´False‚ê§¬ª

[12:43] <samcv> space isn't space!

[12:43] <samcv> terrible

[12:43] <MasterDuke> jnthn: whenever you've got a moment, did you happen to see my question and conversation with JimmyZ here? https://irclog.perlgeek.de/perl6-dev/2016-12-27#i_13806796

[12:44] <jnthn> Oh, I mighta been confused

[12:44] <jnthn> https://github.com/MoarVM/MoarVM/blob/master/src/strings/ops.c#L1659 uses WHITE_SPACE

[12:44] <jnthn> I somehow thought that was the line we were talking about before

[12:45] <jnthn> Wait, I think that *was* the one you changed to _SPACE yesterday?

[12:46] <jnthn> (To work around things)

[12:46] <jnthn> Anyway, it looks like it's correct

[12:46] <samcv> yep

[12:46] <samcv> yeah it is correct there

[12:47] <jnthn> OK, so the incorrect thing is... <:space> ?

[12:47] <samcv> yep

[12:47] <jnthn> OK. I was confused :)

[12:47] <jnthn> MasterDuke: I can't easily guess off-hand, but I don't know a deep reason why that coudln't change. It may just need some code changes inside of Cursor.pm or so in core

[12:48] <jnthn> (src/core that is)

[12:48] <jnthn> Lunch time here; I'll bbiab

[12:48] <samcv> kk

[13:16] <notviki> Results of stresstest on 6.c-errata: https://gist.github.com/zoffixznet/8f99558441b923e0f4e616bcbfac00db

[13:26] <notviki> IO::Path:U.chdir uses $*CWD :S

[13:27] <notviki> seems like a wat

[13:32] <dalek> nqp: 252d760 | (Zoffix Znet)++ | tools/build/MOAR_REVISION:

[13:32] <dalek> nqp: (moar bump) Bring over revert of MoarVM's #469

[13:32] <dalek> nqp:

[13:32] <dalek> nqp: https://github.com/MoarVM/MoarVM/pull/469

[13:32] <dalek> nqp:

[13:32] <dalek> nqp: It was found the work breaks some of the tests. Revert until fix

[13:32] <dalek> nqp: is found.

[13:32] <dalek> nqp:

[13:32] <dalek> nqp: Brings in: https://github.com/MoarVM/MoarVM/compare/3dc56470...3c5253c

[13:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/252d7609fa

[13:34] <samcv> thanks notviki

[13:34] <dalek> rakudo/nom: d35efb6 | (Zoffix Znet)++ | tools/build/NQP_REVISION:

[13:34] <dalek> rakudo/nom: (nqp bump) Bring over revert of MoarVM's #469

[13:34] <dalek> rakudo/nom:

[13:34] <dalek> rakudo/nom: https://github.com/MoarVM/MoarVM/pull/469

[13:34] <dalek> rakudo/nom:

[13:34] <dalek> rakudo/nom: It was found the work breaks some of the tests. Revert until fix

[13:34] <dalek> rakudo/nom: is found.

[13:34] <dalek> rakudo/nom:

[13:34] <dalek> rakudo/nom: Brings in changes: https://github.com/perl6/nqp/compare/4a950e19...252d760

[13:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d35efb602f

[13:34] <notviki> Stresstest results with latest MoarVM (seems still failure in module stuff): https://gist.github.com/zoffixznet/66586582da0c2bdf616b144825a0858a

[13:35] <notviki> that's 6.c-errat

[13:35] <samcv> hm

[13:35] <samcv> oh that's with the revert

[13:36] <notviki> yeah

[13:49] <notviki> ZOFVM: Files=1208, Tests=130855, 153 wallclock secs (20.97 usr  3.25 sys + 2574.02 cusr 255.80 csys = 2854.04 CPU)

[13:58] <dalek> roast: c9cf71d | (Zoffix Znet)++ | S32-list/sort.t:

[13:58] <dalek> roast: Amend tests testing return type of .sort

[13:58] <dalek> roast:

[13:58] <dalek> roast: The tests were added[^1][^2] on July, 30, 2016 and are not part of 6.c.

[13:58] <dalek> roast: The purpose of the tests is to check we're not returning a BOOTArray

[13:58] <dalek> roast: per tickets[^3][^4], by checking the return type is a List. However,

[13:58] <dalek> roast: Rakudo was changed[^5] to always return a Seq from .sort

[13:58] <dalek> roast:

[13:58] <dalek> roast: [1] https://github.com/perl6/roast/commit/9697a3b3453a97deb0987ad37558383b2a0

[13:58] <dalek> roast: [2] https://github.com/perl6/roast/commit/94d5bc99c37896271d391c573be7958b0b6

[13:58] <dalek> roast: [3] https://rt.perl.org/Ticket/Display.html?id=126921#ticket-history

[13:58] <dalek> roast: [4] https://rt.perl.org/Ticket/Display.html?id=128779#ticket-history

[13:58] <JimmyZ> samcv: linenoise works on windows, if there is a msvc

[13:59] <samcv> alright. we can recommend Linenoise on windows and Linenoise or Readline on linux?

[14:06] <notviki> Seems some todos in t/spec/S15-unicode-information/uniprop.t are now passing https://gist.github.com/zoffixznet/e1316dd5112d6ea2a8eb48296d34e6ad

[14:07] <samcv> notviki,

[14:07] <samcv> sorta

[14:07] <samcv> ok 146 - uniprop for Emoji_Modifier returns False for non modifier Emoji's# TODO Emoji properties NYI in MoarVM

[14:08] <samcv> we can stil unfudge them though

[14:09] <samcv> ugh. i'm considering like. maybe we should do a workaround in nqp for like maybe 2 property names

[14:09] <samcv> because no matter how good everything else works, those ones don't

[14:09] <samcv> well 'alpha' doesn't work but 'Alpha' does

[14:09] <samcv> m: say Rakudo::Internals.PROPCODE('alpha')

[14:09] <camelia> rakudo-moar d35efb: OUTPUT¬´29‚ê§¬ª

[14:09] <samcv> m: say Rakudo::Internals.PROPCODE('Alpha')

[14:09] <camelia> rakudo-moar d35efb: OUTPUT¬´29‚ê§¬ª

[14:10] <samcv> argh

[14:10] <samcv> at least consistency is good though

[14:10] <samcv> instead of just rondom things breaking

[14:17] <notviki> .ask lizmat what are your thought on removing this https://github.com/rakudo/rakudo/commit/3962ee51d9fab ? Feels like a footgun: if you end up with a unitialized IO::Path type object (say, from unset named param), the code will silently assume CWD. Since $*CWD has .chdir, doesn't seem like it's worth the rist of also having this behaviour. Thoughts?

[14:17] <yoleaux2> notviki: I'll pass your message to lizmat.

[14:18] <notviki> s/rist/risk/;

[14:18] <notviki> there are no tests for it

[14:26] <notviki> /o\

[14:26] * notviki is slipping into the IO rabbit hole

[14:29] <notviki> A whole bunch of subs and methods have $foo // $foo.throw in them

[14:30] <notviki> and the docs contradict taht

[14:31] <notviki> and also, if we really needed that throwage, kinda makes our whole Failure mechanism questionable if we have to avoid it for IO AND for list returning things :/

[14:33] <notviki> I guess part of the reason is the better IO branch that never got merged?

[14:46] <samcv> jnthn, i'm trying to find the function in moar which resolves the property names to the values it spits back

[14:48] <samcv> is it all in unicode_ops.c?

[14:48] <samcv> MVM_OP_unipropcode

[14:48] <samcv> but trying to see how to trace that to where it goes

[14:57] <samcv> also if i want to add some prints. i don't seem to be getting any output to my terminal

[14:59] <notviki> And we also have a PROCESS::chdir that returns True instead of the $*CWD? :S https://github.com/rakudo/rakudo/blob/nom/src/core/io_operators.pm#L148

[15:00] * notviki notes not to visit IO land

[15:01] <samcv> chdir False

[15:01] <notviki> m: say WHAT "IOfsdfdsfdsfds".IO.chdir: "foo"

[15:01] <camelia> rakudo-moar d35efb: OUTPUT¬´(Failure)‚ê§¬ª

[15:01] <notviki> m: say WHAT chdir "IOfsdfdsfdsfds".IO

[15:01] <camelia> rakudo-moar d35efb: OUTPUT¬´Failed to change the working directory to '/home/camelia/IOfsdfdsfdsfds': does not exist‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in any  at gen/moar/Metamodel.nqp line 3072‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:01] <notviki> sub throws but method Fails :S

[15:01] <samcv> notviki, does roast say it has to return True?

[15:02] <samcv> or just something Truey?

[15:02] <notviki> no idea

[15:02] * notviki types git reset --hard and gives up on this

[15:03] * notviki hopes lizmat gives another go for better-io branch

[15:04] <samcv> link to branch?

[15:04] <samcv> what.

[15:04] <samcv> # mkdir True; chdir True #> /home/samantha/git/rakudo/True.IO

[15:04] <samcv> awesome

[15:05] <samcv> well. that was sarcastic

[15:05] <notviki> no idea. From what I understand lizmat hacked much better IO stuff than we have now but no one paid enough attention to it to merge it or something.

[15:05] <samcv> and i can rmdir True

[15:05] <samcv> sounds like uh. that isn't good

[15:06] <samcv> if something else ends up returning true, you end up trying to cd into a directory named True or False‚Ä¶

[15:06] <MasterDuke> think it is/was https://github.com/rakudo/rakudo/tree/newio

[15:07] <samcv> Cannot resolve caller Str(Bool: ); none of these signatures match:

[15:07] <samcv> (Bool:D $: *%_)

[15:07] <samcv> hmm

[15:07] <samcv> that's if i try to pass just Bool undefined

[15:07] <samcv> why do we have a chdir multi for Bool?????????

[15:10] <timotimo> that's not a chdir multi for Bool, that's trying to coerce a Bool to a Str

[15:10] <samcv> SourceBaby, &chdir

[15:10] <timotimo> samcv: ^

[15:10] <samcv> yes that's what i thought

[15:10] <timotimo> m: sub test(Str() $a) { say $a.perl }; test(True)

[15:10] <camelia> rakudo-moar d35efb: OUTPUT¬´"True"‚ê§¬ª

[15:11] <timotimo> i have no idea why it'd error out like that, though

[15:11] <samcv> is there a way to make it not do that

[15:11] <timotimo> m: sub test(Str() $a) { say $a.perl }; test(Bool)

[15:11] <camelia> rakudo-moar d35efb: OUTPUT¬´Cannot resolve caller Str(Bool: ); none of these signatures match:‚ê§    (Bool:D $: *%_)‚ê§  in sub test at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:11] <timotimo> that's how

[15:11] <samcv> well i passed an undefined bool

[15:11] <notviki> s: &chdir

[15:11] <SourceBaby> notviki, Sauce is at https://github.com/rakudo/rakudo/blob/d35efb6/src/core/io_operators.pm#L164

[15:11] <samcv> m: Bool.Str

[15:11] <camelia> rakudo-moar d35efb: OUTPUT¬´Cannot resolve caller Str(Bool: ); none of these signatures match:‚ê§    (Bool:D $: *%_)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:11] <timotimo> well, what should Bool give as a string?

[15:11] <samcv> i meant for chdir

[15:11] <timotimo> well, chdir just has Str(), which means it'll coerce anything to Str that you give to it (as long as it's Cool)

[15:12] <samcv> if you pass it a boolean it shouldn't create a directory named True or False. i would think‚Ä¶

[15:12] <samcv> maybe unavoidableish

[15:12] <samcv> yeah

[15:12] <timotimo> that's "just" how Cool works

[15:12] <timotimo> m: say "100".sin

[15:12] <camelia> rakudo-moar d35efb: OUTPUT¬´-0.506365641109759‚ê§¬ª

[15:12] <samcv> yea

[15:12] <notviki> timotimo: why Cool? .Str is a Mu method

[15:13] <samcv> m: chdir True

[15:13] <camelia> rakudo-moar d35efb: OUTPUT¬´Failed to change the working directory to '/home/camelia/True': does not exist‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in any  at gen/moar/Metamodel.nqp line 3072‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:13] <notviki> And I'm guessing there's a proto in Bool.pm which is why Bool.Str craps out

[15:13] <timotimo> yeah, but Str() is short for Str(Cool), no? or is it Str(Any)?

[15:14] <notviki> Any

[15:14] <notviki> m: say Str(class {})

[15:14] <camelia> rakudo-moar d35efb: OUTPUT¬´Use of uninitialized value of type <anon|63097232> in string context.‚ê§Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:14] <notviki> m: -> Str() $x { say $x }(class {})

[15:14] <camelia> rakudo-moar d35efb: OUTPUT¬´Use of uninitialized value of type <anon|49929984> in string context.‚ê§Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.‚ê§  in block  at <tmp> line 1‚ê§‚ê§¬ª

[15:15] <notviki> m: quietly chdir class {}

[15:15] <camelia> rakudo-moar d35efb: ( no output )

[15:15] <notviki> tehe

[15:15] <timotimo> OK

[15:15] <timotimo> so it's Any

[15:16] <samcv> m: chdir &chdir

[15:16] <camelia> rakudo-moar d35efb: OUTPUT¬´Sub object coerced to string (please use .gist or .perl to do that)‚ê§  in block <unit> at <tmp> line 1‚ê§Failed to change the working directory to '/home/camelia/chdir': does not exist‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in an‚Ä¶¬ª

[15:16] <notviki> even Mu it seems

[15:16] <notviki> m: say Str(Mu)

[15:16] <camelia> rakudo-moar d35efb: OUTPUT¬´(Str(Mu))‚ê§¬ª

[15:16] <samcv> this is more the type of warning i would want True to warn

[15:16] <samcv> when trying to chdir into True or False

[15:17] <notviki> m: -> Str() $x { say "all good" }(Mu)

[15:17] <camelia> rakudo-moar d35efb: OUTPUT¬´Type check failed in binding to $x; expected Any but got Mu (Mu)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:17] <samcv> that actually coerced but it did print a  warning

[15:17] <notviki> Ah, no, Any

[15:17] <samcv> m: mkdir &mkdir

[15:17] <camelia> rakudo-moar d35efb: OUTPUT¬´mkdir is disallowed in restricted setting‚ê§  in sub restricted at src/RESTRICTED.setting line 1‚ê§  in sub mkdir at src/RESTRICTED.setting line 8‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:25] <samcv> m: chdir True

[15:25] <camelia> rakudo-moar d35efb: ( no output )

[15:25] <samcv> heh

[15:26] <samcv> m: say dir $*PWD

[15:26] <camelia> rakudo-moar d35efb: OUTPUT¬´Dynamic variable $*PWD not found‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:26] <samcv> m: say dir $*CWD

[15:26] <camelia> rakudo-moar d35efb: OUTPUT¬´("/home/camelia/.cpanm".IO "/home/camelia/.local".IO "/home/camelia/.npm".IO "/home/camelia/.perl6".IO "/home/camelia/.perlbrew".IO "/home/camelia/.rcc".IO "/home/camelia/.ssh".IO "/home/camelia/Perlito".IO "/home/camelia/evalbot".IO "/home/camelia/log".IO‚Ä¶¬ª

[15:27] <samcv> m: $*CWD.dir.grep(/True/).say

[15:27] <camelia> rakudo-moar d35efb: OUTPUT¬´("/home/camelia/True".IO)‚ê§¬ª

[15:30] <samcv> m: $*CWD.dir.grep(/True/).say

[15:30] <camelia> rakudo-moar d35efb: OUTPUT¬´()‚ê§¬ª

[15:30] <samcv> ok. cool. don't want to leave that directory just lying around

[15:31] <notviki> m: say $*CWD

[15:31] <camelia> rakudo-moar d35efb: OUTPUT¬´"/home/camelia".IO‚ê§¬ª

[15:31] <notviki> m: say chdir True

[15:31] <camelia> rakudo-moar d35efb: OUTPUT¬´Failed to change the working directory to '/home/camelia/True': does not exist‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in any  at gen/moar/Metamodel.nqp line 3072‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:31] <notviki> m: chdir True

[15:31] <camelia> rakudo-moar d35efb: OUTPUT¬´Failed to change the working directory to '/home/camelia/True': does not exist‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in any  at gen/moar/Metamodel.nqp line 3072‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:31] <notviki> why did it work when you did it?

[15:31] <samcv> m: use nqp; nqp::mkdir('/home/camelia/True', 0o777)

[15:31] <camelia> rakudo-moar d35efb: ( no output )

[15:32] <notviki> Ah

[15:32] <samcv> hahaha

[15:32] <samcv> m: say chdir True

[15:32] <camelia> rakudo-moar d35efb: OUTPUT¬´"/home/camelia/True".IO‚ê§¬ª

[15:32] <[Coke]> m: my $a = 3; temp temp temp temp temp temp temp temp temp temp $a;

[15:32] <camelia> rakudo-moar d35efb: ( no output )

[15:32] <samcv> m: say chdir True; say dir $*CWD

[15:32] <camelia> rakudo-moar d35efb: OUTPUT¬´"/home/camelia/True".IO‚ê§()‚ê§¬ª

[15:33] <samcv> m: say chdir True; m: use nqp; nqp::mkdir(False, 0o777)

[15:33] <camelia> rakudo-moar d35efb: OUTPUT¬´"/home/camelia/True".IO‚ê§This type cannot unbox to a native string: P6opaque, Bool‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[15:34] <samcv> m: say chdir True; m: use nqp; nqp::mkdir('False', 0o777)

[15:34] <camelia> rakudo-moar d35efb: OUTPUT¬´"/home/camelia/True".IO‚ê§¬ª

[15:34] <samcv> m: say chdir True; m: use nqp; nqp::mkdir('False', 0o777)

[15:34] <camelia> rakudo-moar d35efb: OUTPUT¬´"/home/camelia/True".IO‚ê§¬ª

[15:34] <samcv> m: say chdir True; m: use nqp; say nqp::mkdir('False', 0o777)

[15:34] <camelia> rakudo-moar d35efb: OUTPUT¬´"/home/camelia/True".IO‚ê§False‚ê§¬ª

[15:52] * notviki stares at incorrect test wondering how the hell it's still passing..

[15:52] * notviki notices it's an `is` test -_-

[15:53] <notviki> m: use Test; is (), ((),)

[15:53] <camelia> rakudo-moar d35efb: OUTPUT¬´ok 1 - ‚ê§¬ª

[15:53] <[Coke]> Slip-erry slope?

[15:54] <[Coke]> m: say ().perl; say ((),).perl;

[15:54] <camelia> rakudo-moar d35efb: OUTPUT¬´()‚ê§((),)‚ê§¬ª

[15:54] <notviki> They stringify the same

[15:54] <notviki> `is` is a Bad Idea‚Ñ¢, especially in roast

[15:55] <notviki> m: use Test; is [1, [2, [3]]], "1 2 3", 'totally the same'

[15:55] <camelia> rakudo-moar d35efb: OUTPUT¬´ok 1 - totally the same‚ê§¬ª

[15:59] <notviki> m: use Test; is-deeply ().Seq, ()

[15:59] <camelia> rakudo-moar d35efb: OUTPUT¬´ok 1 - ‚ê§¬ª

[16:00] <notviki> m: use Test; is-deeply ().Seq, []

[16:00] <camelia> rakudo-moar d35efb: OUTPUT¬´not ok 1 - ‚ê§‚ê§# Failed test at <tmp> line 1‚ê§# expected: $[]‚ê§#      got: $()‚ê§¬ª

[16:03] <notviki> m: sub foo (@a, @b) { dd [@a,  @b] }(().Seq, ())

[16:03] <camelia> rakudo-moar d35efb: OUTPUT¬´[(), ()]‚ê§¬ª

[16:03] <notviki> m: my $a = ().Seq; my $b = (); dd [ $a, $b ]; sub foo (@a, @b) { dd [@a,  @b] }(().Seq, ())

[16:03] <camelia> rakudo-moar d35efb: OUTPUT¬´[().Seq, ()]‚ê§[(), ()]‚ê§¬ª

[16:04] <notviki> looks like infix:<eqv>(@a, @b) is buggy https://github.com/rakudo/rakudo/blob/d35efb6/src/core/Mu.pm#L857

[16:07] <notviki> Heh, turns out *I* added all those `is` tests... In July

[16:07] <notviki> What a difference half a year makes :o

[16:08] <samcv> :P

[16:09] <samcv> yeah is isn't that great an idea unless you are doing it on purpose

[16:09] <dalek> roast: 3ea6fa6 | (Zoffix Znet)++ | S32-list/combinations.t:

[16:09] <dalek> roast: Use is-deeply instead of is for tests

[16:09] <dalek> roast:

[16:09] <dalek> roast: As they're sensitive to the datastructure returned

[16:09] <dalek> roast: review: https://github.com/perl6/roast/commit/3ea6fa6c71

[16:10] <samcv> i don't usually use `like` but i used it for testing the unicode version name returned, since like 1.1 and v1.1 and V1.1 are all valid aliases

[16:11] <samcv> well assuming it didn't print out like 1.1.1.1 i guess haha

[16:13] <samcv> i kind of want to figure out how the moarvm data structure actually works so I can actually just scrap a lot of the code in the unicode generation file

[16:15] <samcv> then just eventually rewrite it or something. it's just not maintainable at all. like reading through tthe same file multiple times and not storing the data in a hash or something to process or an array

[16:16] <samcv> at least totally scrap the code that generates the hash table for the database for sure. the rest may be ok enough

[16:16] <notviki> m: dd combinations(0.5, 2),

[16:16] <camelia> rakudo-moar d35efb: OUTPUT¬´((),).Seq‚ê§¬ª

[16:18] <notviki> m: dd combinations(-0.5,   -2)

[16:18] <camelia> rakudo-moar d35efb: OUTPUT¬´()‚ê§¬ª

[16:21] <notviki> t/spec/S15-unicode-information/uniname.rakudo.moar (Wstat: 512 Tests: 40 Failed: 2)

[16:21] <notviki> Failed tests:  15, 18

[16:21] <notviki> Non-zero exit status: 2

[16:21] <notviki> samcv: I guess these were fixed by the MoarVM PR that we reverted?

[16:21] <notviki> And now they're broken again?

[16:21] <samcv> yeah

[16:21] <notviki> k

[16:22] <samcv> i need to sleep. see you on the other side

[16:22] <notviki> bye

[16:25] <dalek> rakudo/nom: d86c419 | (Zoffix Znet)++ | src/core/List.pm:

[16:25] <dalek> rakudo/nom: Fix combinations() cases incorrectly returning 1-item list

[16:25] <dalek> rakudo/nom:

[16:25] <dalek> rakudo/nom: Currently, asking for, say, 5-item combinations out of a 3-item list

[16:25] <dalek> rakudo/nom: returns a 1-item list containing an empty list. This is incorrect,

[16:25] <dalek> rakudo/nom: as that result applies only when we ask for 0-item combination.

[16:25] <dalek> rakudo/nom:

[16:25] <dalek> rakudo/nom: Fix that by changing short-circuiting logic at the start of the

[16:25] <dalek> rakudo/nom: routine:

[16:26] <dalek> rakudo/nom:

[16:26] <dalek> rakudo/nom: n < 1 ‚Üí we have an empty list to pick from

[16:26] <dalek> rakudo/nom: k = 0 ‚Üí can pick just 1 combination (empty list); return ((),)

[16:26] <notviki> rakudo/nom: n < k ‚Üí we don't have enough items to pick a combination of k items; return ()

[16:26] <notviki> rakudo/nom:

[16:26] <notviki> rakudo/nom: Note that negative k is not the same as k=0; it's a conscious design

[16:26] <notviki> rakudo/nom: decision: you can have a set of zero items, but not a set of -1 items:

[16:26] <notviki> rakudo/nom: https://irclog.perlgeek.de/perl6/2016-12-28#i_13810513

[16:26] <notviki> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d86c419623567a7b206008323f5

[16:27] <dalek> roast: af8002e | (Zoffix Znet)++ | S32-list/combinations.t:

[16:27] <dalek> roast: Fix incorrect combinations() tests

[16:27] <dalek> roast:

[16:27] <dalek> roast: The tests were added[^1][^2] on July 4, 2016 and are not part of 6.c.

[16:27] <dalek> roast: Three of them assume the result of picking a 2-item combination from an empty list is

[16:27] <dalek> roast: an 1-item list containing empty list. It was a now-fixed[^3] bug. Fourth one assumes

[16:27] <dalek> roast: negative k is equivalent to k=0 and was passing only due to the test using `is` (it was

[16:27] <dalek> roast: changed[^4] to `is-deeply` in a commit previous to this one).

[16:27] <dalek> roast:

[16:27] <dalek> roast: [1] https://github.com/perl6/roast/commit/2f8f0a4ceb5a3f7e6a2c6f3216a2a9e2c70cff3d

[16:27] <dalek> roast: [2] https://github.com/perl6/roast/commit/0ff33b312bbaf63dae0c19fdfbbbfae97ef53883

[16:27] <dalek> roast: [3] https://github.com/rakudo/rakudo/commit/d86c419623567a7b206008323f5

[16:27] <notviki> https://github.com/perl6/roast/commit/af8002e3c94689585dd9fa2cb182775d6d6a00e9

[16:27] <notviki> lazy ass robot

[16:29] <japhb> You didn't use a hyphen, and yet I still thought of https://xkcd.com/37/

[16:31] <notviki> heh

[16:34] <notviki> mmm

[16:35] <samcv> what i can buy a unicode 9.0 book

[16:35] <samcv> i read the 5.0 was the last one they made

[16:35] * samcv buys quickly

[16:36] <samcv> two volumes each 500 pages

[16:36] <notviki> yikes

[16:36] <notviki> That was a quick sleep

[16:36] <samcv> very

[16:37] <samcv> so quick it did not exist

[16:39] <jnthn> .tell samcv unipropcode is implemented in interp.c, which calls MVM_unicode_name_to_property_code which is in unicode_ops.c, which looks in the property_codes_by_names_aliases hash, which is constructed from unicode_property_keypairs in unicode_db.c generated from ucd2c.pl

[16:39] <yoleaux2> jnthn: I'll pass your message to samcv.

[16:39] <samcv> hi

[16:39] <yoleaux2> 16:39Z <jnthn> samcv: unipropcode is implemented in interp.c, which calls MVM_unicode_name_to_property_code which is in unicode_ops.c, which looks in the property_codes_by_names_aliases hash, which is constructed from unicode_property_keypairs in unicode_db.c generated from ucd2c.pl

[16:39] <jnthn> Heh, I saw you'd gone for sleep in the backlog... :)

[16:39] <samcv> i wish

[16:40] <samcv> ok wrote that down

[16:41] * jnthn seems to have some cold-y thing sapping all his energy and can do not that much more than sleep :/

[16:41] <moritz> jnthn: get well soon!

[16:42] <jnthn> Thanks...here's hoping :)

[16:42] <jnthn> At least I got it *after* enjoying Christmas.

[16:42] * [Coke] wishes jnthn some ... caffienated soup?

[16:42] * moritz had a few days without illness but not interest in programming whatsoever

[16:42] <moritz> it's slowly returning now

[16:47] <japhb> Few things more annoying than wishing you had time and energy to hack for a few months, getting a nice calm vacation with lots of time and energy -- and not wanting to hack.  Because you just *know* that when you return to work, suddenly you'll be thinking "Oh man, why didn't I use that time to hack?  I want to hack SO BAD right now."

[16:53] <dalek> rakudo/nom: b0e61f3 | (Zoffix Znet)++ | src/core/List.pm:

[16:53] <dalek> rakudo/nom: Restore fast-path for negative k in combinations()

[16:53] <dalek> rakudo/nom:

[16:53] <dalek> rakudo/nom: It was accidentally lost in

[16:53] <dalek> rakudo/nom: https://github.com/rakudo/rakudo/commit/d86c419623567a7b206008323f5

[16:53] <dalek> rakudo/nom:

[16:53] <dalek> rakudo/nom: No functional changes

[16:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b0e61f32b8

[16:55] <moritz> japhb: could be worse; I can hack at work :-)

[16:55] <moritz> also, work starts at 2017-01-10 for me, so no hurry

[16:56] <moritz> if I'm able to write my next blog post for the p6 book in the next 1.5 weeks, I'm happy

[17:02] <notviki> m: sub foo (Positional \a, Positional \b) { dd [a, b] }(().Seq, ())

[17:02] <camelia> rakudo-moar d86c41: OUTPUT¬´[(), ()]‚ê§¬ª

[17:02] <notviki> m: sub foo (\a, \b) { dd [a, b] }(().Seq, ())

[17:02] <camelia> rakudo-moar d86c41: OUTPUT¬´[().Seq, ()]‚ê§¬ª

[17:02] * notviki doesn't get it

[17:07] <dalek> rakudo/nom: db1836a | (Zoffix Znet)++ | src/core/List.pm:

[17:07] <dalek> rakudo/nom: Make combinations() always return a Seq on succcess

[17:07] <dalek> rakudo/nom:

[17:07] <dalek> rakudo/nom: Currently, it returns Seq for all cases except ones that return

[17:07] <dalek> rakudo/nom: empty lists, in which case it returns a List.

[17:07] <dalek> rakudo/nom:

[17:07] <dalek> rakudo/nom: Fix by returning a Seq for those cases as well.

[17:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/db1836a45d

[17:10] <jnthn> notviki: If you pass Seq to a sub and it expects Positional, we automatically call .cache on the Seq. If we didn't, you couldn't write sub foo(@a) { }; foo(@b.grep(* < 5)) for example

[17:10] <jnthn> Well you could write it, but it'd bind fail :P

[17:11] <notviki> hmm...

[17:11] <notviki> Well, the side effect of that is eqv equates a Seq with a List

[17:12] <notviki> m: say (1, 2, 3).Seq eqv (1, 2, 3)

[17:12] <camelia> rakudo-moar db1836: OUTPUT¬´True‚ê§¬ª

[17:12] <notviki> How come on 32-bit boxes isbig_I() starts to return true after 2**28-1 ?

[17:13] <notviki> m: use nqp; say nqp::isbig_I(2**32)

[17:13] <camelia> rakudo-moar db1836: OUTPUT¬´1‚ê§¬ª

[17:13] <mst> my guess would be that it uses the extra bits to stash flags of some sort?

[17:13] <notviki> m: use nqp; say nqp::isbig_I(2**32-1)

[17:13] <camelia> rakudo-moar db1836: OUTPUT¬´1‚ê§¬ª

[17:13] <mst> fairly common approach to allow ints to be held inline in a slot that could also be a pointer

[17:22] <notviki> Do we have maximum non-is-big_I stored in a constant somewhere? I thought I recalled seeing something or other

[17:22] <notviki> m: dd +SOCK_MAX

[17:22] <camelia> rakudo-moar db1836: OUTPUT¬´6‚ê§¬ª

[17:22] <notviki> m: dd +PF_MAX

[17:22] <camelia> rakudo-moar db1836: OUTPUT¬´4‚ê§¬ª

[17:22] <notviki> heh

[17:23] <notviki> m: dd $UINT64_UPPER

[17:23] <camelia> rakudo-moar db1836: OUTPUT¬´Int $UINT64_UPPER = 18446744073709551616‚ê§¬ª

[17:23] <notviki> That's the one I saw..

[17:24] <notviki> m: dd IntLexRef

[17:24] <camelia> rakudo-moar db1836: OUTPUT¬´IntLexRef‚ê§¬ª

[17:24] <[Coke]> seems like we shouldn't have SOCK_MAX exposed like that.

[17:25] <notviki> m: dd $in_deprecation

[17:25] <camelia> rakudo-moar db1836: OUTPUT¬´Any $in_deprecation = Any‚ê§¬ª

[17:25] <notviki> we got all kinds of crap lying around :)

[17:26] <notviki> lol

[17:26] <notviki> This is a good one:

[17:26] <notviki> m: say DON'T_DIVIDE_NUMBERS 1, 2, 3, 4

[17:26] <camelia> rakudo-moar db1836: OUTPUT¬´0.5‚ê§¬ª

[18:02] <japhb> notviki: Um, how can the maximum value of a base-2 number be even?

[18:07] <notviki> japhb: ? I'm not following

[18:07] <japhb> From your dd above: Int $UINT64_UPPER = 18446744073709551616‚ê§

[18:08] <japhb> or is _UPPER not the maximum value?

[18:08] <notviki> I don't even know what that value is.

[18:08] <geekosaur> "brain-hurty"

[18:08] <japhb> Ugh:

[18:08] <japhb> src/core/UInt64.pm:my Int $UINT64_UPPER = nqp::pow_I(2, 64, Num, Int);

[18:08] <japhb> src/core/UInt64.pm:subset UInt64 of Int where { 0 <= $_ < $UINT64_UPPER }

[18:09] <japhb> So it's _MAX + 1

[18:09] <notviki> Is it even max?

[18:09] <notviki> based on my big_I questino above, seems some bits are used for something

[18:10] <japhb> The threshold for big_I is used for different things (knowing when you can do

[18:10] <geekosaur> you may be confusing representation of a notional Int in MoarVM with the correct range of a uint64_t

[18:10] <japhb> "big integer" math using only small integers, for one.

[18:11] <japhb> geekosaur: To whom are you speaking?

[18:11] <geekosaur> to notviki, since I also saw the limit they saw (and with similar lack of context)

[18:11] <japhb> ah

[18:11] <notviki> I'm about to define the big_I max, so we could report correct limits in error messages in combinations() and permutations()

[18:11] <geekosaur> but yes there are several possible reasons for a lower limit than just what the bits can hold

[18:13] <notviki> Also, TIL we have UInt64 subset... I thought UInt was the only one

[18:13] <geekosaur> ideally there are subsets for all of the sized ones, providing boxy targets for the unboxed native types

[18:14] <geekosaur> otherwise using the unboxed natives with things that require boxed types is annoying to codegen for

[18:15] * japhb wonders if UInt64 originally went in for NativeCall or Rat

[18:21] <notviki> m: my UInt $x

[18:21] <camelia> rakudo-moar db1836: ( no output )

[18:21] <notviki> m: my UInt64 $x

[18:21] <camelia> rakudo-moar db1836: ( no output )

[18:21] <notviki> m: say 42 ~~ UInt

[18:21] <camelia> rakudo-moar db1836: OUTPUT¬´True‚ê§¬ª

[18:21] <notviki> m: say 42 ~~ UInt64

[18:21] <camelia> rakudo-moar db1836: OUTPUT¬´True‚ê§¬ª

[18:21] <notviki> :/

[18:22] <notviki> m: say Int ~~ UInt

[18:22] <camelia> rakudo-moar db1836: OUTPUT¬´True‚ê§¬ª

[18:22] <notviki> m: say Int ~~ UInt64

[18:22] <camelia> rakudo-moar db1836: OUTPUT¬´Invocant requires an instance of type Int, but a type object was passed.  Did you forget a .new?‚ê§  in any accepts_type at gen/moar/Metamodel.nqp line 3444‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:22] <notviki> Ah, there we go

[18:29] <notviki> " notviki ‚îÇ I'm about to define the big_I max, so we could report correct limits"

[18:30] <notviki> never mind... $*KERNEL is not available as early as where I want to use it :/

[18:31] <TimToady> .oO(Quoth the raven, "Nevermind!")

[18:33] <notviki> TimToady: should IO methods throw or fail?

[18:33] <notviki> like spurt, open, chdir

[18:34] * geekosaur draws distinctions there

[18:34] <geekosaur> spurt and open are file operations, fail is reasonable

[18:35] <geekosaur> process-level state changes (chdir) should be a harder failure mode

[18:35] <notviki> and pipe, slurp, indir, tmpdir, homedir, rename, copy, symlink, and link

[18:35] <geekosaur> ...but I think chdir is the only such that gets exposed; most of them would be highly OS specific

[18:35] <notviki> all of the listed currently throw... though for some reason move() appears to fail

[18:36] <notviki> or rather throw on anything, but fail on X::IO::Copy|X::IO::Unlink :/

[18:37] <notviki> hm...

[18:38] <notviki> It's even worse: many subs throw, but methods fail :S

[18:38] <moritz> can we just always throw exceptions please?

[18:38] <moritz> fail was meant to make concurrent code cheaper

[18:38] <notviki> moritz: for all IO routines?

[18:38] <moritz> but start blocks catch exceptions anyway, and rethrow them when accessing Promise.result

[18:39] <moritz> notviki: all IO routines, but I mean really everywhere

[18:39] <notviki> :o

[18:39] <moritz> I think fail() was a mistake, and it's time we admitted it

[18:39] <notviki> I'd find that really annoying to write try {} everywhere

[18:40] <moritz> my $fh = try open $filename

[18:40] <moritz> not much worse than my $fh = open $filename

[18:40] <moritz> and you check $fh anyway later on to make sure it doesn't throw when you use it

[18:42] <moritz> I see none of the benefits that fail() was supposed to give us anywhere in real-world code

[18:43] <notviki> What were the benefits?

[18:44] <moritz> making sure some massively parallel computations didn't die just because a single sub-computation failed

[18:44] <moritz> and not burdening parallel code with error handling

[18:44] <notviki> And that's it?

[18:44] <moritz> (which we still need, because we can't know that stuff only fails and never will die)

[18:45] <moritz> I'm not aware of other supposed benefits

[18:45] <notviki> I always seen it as an easier way to throw that doesn't encoumber you with all the try {} ugliness

[18:46] <notviki> Like from-json here throws, so I have that try block and because } ends statement I have to place // in an weird place: https://github.com/zoffixznet/perl6-buggable/blob/master/lib/Buggable/Plugin/Eco.pm6#L40

[18:46] <notviki> And here $!r6.stats fails() and it's just an `or` statement: https://github.com/zoffixznet/na/blob/master/lib/NA/Plugin/Release.pm6#L15

[18:49] <notviki> ugggh... so github now made it possible for submitters to request a specific person to review a PR....

[18:49] <notviki> ... and now I'm asked to review a couple for no good reason? :/

[18:50] <TimToady> moritz: we've gone over this many time, it also allows you to treat failure with logic instead of putting try blocks everywhere

[18:51] <TimToady> and if you fail in sink context, it throws immediately anyway, just like you want

[18:53] <notviki> TimToady: any idea for what to do for IO stuff? Fail or throw? We're now kinda half-way in between and I wanna know how to fix it.

[18:54] <TimToady> fail was mostly invented for IO stuff in the first place

[18:54] <TimToady> errand &

[18:55] <notviki> alright

[19:00] <japhb> Also, with/orwith/without make more sense in a world with Failure in it.

[19:01] <japhb> Looking at the doc for that is the first time I've seen the new doc code highlighting.  Not bad!

[19:02] <MasterDuke> if anyone is interested https://gist.github.com/MasterDuke17/4b9dc25bbc9b45fc5ade7fac0b2556cd has 'perf report > compile.report' and 'perf report --call-graph=none --no-children > compile.report_no_call-graph_no_children'

[19:02] <japhb> Although occasionally it highlights methods as keywords; see https://docs.perl6.org/language/concurrency for several examples

[19:02] <MasterDuke> after doing 'perf record --call-graph dwarf /home/dan/Source/perl6/install/bin/moar --libpath="/home/dan/Source/perl6/install/share/nqp/lib" --libpath="/home/dan/Source/perl6/install/share/nqp/lib" perl6.moarvm --nqp-lib=blib --setting=NULL --ll-exception --optimize=0 --target=parse --stagestats --output=CORE.setting.moarvm gen/moar/CORE.setting'

[19:03] <japhb> --optimize=3 was too heavy?

[19:04] <MasterDuke> no, just timotimo suggested that the first time i profiled a compile

[19:04] <MasterDuke> though it's actually a no-op, since i had --target=parse anyway

[19:04] <notviki> japhb: please report those on https://github.com/perl6/atom-language-perl6

[19:06] <MasterDuke> i'm running one with the usual --optimize=3 --target=mbc now, but parsing is the long pole in the tent

[19:09] <moritz> TimToady: so have you observed benefits from fail() in real-world code?

[19:10] <notviki> I have. No need to stick try {} all over the place.

[19:11] <MasterDuke> and here are reports for the usual build https://gist.github.com/MasterDuke17/0fe1a713392bc960be8b1a17f7a867b4

[19:11] <moritz> notviki: so do you actually do error reporting for each thing that could fail?

[19:11] <moritz> or error handling, for that matter

[19:12] <notviki> sometimes I let it just sink and explode.

[19:13] <notviki> I mean, it's really close to just exceptions *without typing try {}* all over teh place

[19:13] <notviki> or sometimes I do // "some value"

[19:13] <notviki> instead of try {} // "some value"

[19:24] <japhb> notviki: highlighting bug reported

[19:24] <japhb> https://github.com/perl6/atom-language-perl6/issues/33

[19:24] <japhb> I tend to use // a LOT.  One of my favorite operators.

[19:25] <japhb> In fact I use it so often, I have to force myself to use || when I really do mean Truthiness and not just Definedness

[19:58] <dalek> roast: 9eafc2c | ronaldxs++ | S04-blocks-and-statements/temp.t:

[19:58] <dalek> roast: Add tests for temp array and hash (#206)

[19:58] <dalek> roast: review: https://github.com/perl6/roast/commit/9eafc2c026

[21:38] <dalek> rakudo/nom: 7193df1 | TimToady++ | src/Perl6/Actions.nqp:

[21:38] <dalek> rakudo/nom: treat ++ and -- as mutators under hyper

[21:38] <dalek> rakudo/nom:

[21:38] <dalek> rakudo/nom: A ++<<@foo shouldn't complain about useless use in sink context.

[21:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7193df1d23

[22:26] <MasterDuke> timotimo: have you seen those gists i linked earlier (perf reports of perf recording a rakudo compile)? anything useful in them?

[22:26] <timotimo> oh, i haven't

[22:27] <timotimo> i have some difficulty reading that format, unfortuantely

[22:28] <MasterDuke> you have to look at the raw file, but at the bottom of the gists is the no-children format

[22:30] <timotimo> oh!

[22:30] <timotimo> um, which of those files is what?

[22:31] <MasterDuke> https://gist.github.com/MasterDuke17/4b9dc25bbc9b45fc5ade7fac0b2556cd#file-compile-report_no_call-graph_no_children

[22:31] <timotimo> i download this and open it with "perf report"?

[22:31] <MasterDuke> that is the report

[22:31] <MasterDuke> same with this https://gist.github.com/MasterDuke17/0fe1a713392bc960be8b1a17f7a867b4#file-compile-report_no_call-graph_no_children

[22:32] <timotimo> interesting. a lot of hits in GC

[22:32] <MasterDuke> those are the output of 'perf report --call-graph=none --no-children'

[22:32] <timotimo> if only we could tell which gc_mark the top one is

[22:32] <MasterDuke> first for --target-parse, second for --target=mbc

[22:33] <MasterDuke> any way for me to get that info if i re-run it?

[22:33] <timotimo> nope

[22:34] <timotimo> i don't think so, at least

[22:55] <dalek> rakudo/nom: d1d0e46 | (Zoffix Znet)++ | src/core/List.pm:

[22:55] <dalek> rakudo/nom: Improve error reporting for combinations()

[22:55] <dalek> rakudo/nom:

[22:55] <dalek> rakudo/nom: - Fix reported maximum $n: on 32-bit boxes it's smaller than 2147483647

[22:55] <dalek> rakudo/nom: - Remove range check for $k: the shortcurcuits already take care of all

[22:55] <dalek> rakudo/nom:     the cases where $k would be out of range (the $n < $k case and out

[22:55] <dalek> rakudo/nom:     of range $n throwage).

[22:55] <dalek> rakudo/nom: - For consistency, check args first, before shortcuircuting into fast

[22:55] <dalek> rakudo/nom:     paths. This makes failure mode more defined, as previously we

[22:55] <dalek> rakudo/nom:     allowed huge $n's as long as $k was zero or negative, now we throw

[22:55] <dalek> rakudo/nom:     regardless of what the $k might be.

[22:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d1d0e46c36

[23:01] <MasterDuke> fwiw, here's the top 20 $name's seen in MATCH() during a rakudo compile (nc=1 vs nc=2 is which branch in MATCH() it came from), https://gist.github.com/MasterDuke17/ad31d008085e7f10891ac243e02f67bb

[23:12] <dalek> rakudo/nom: 347271d | lizmat++ | src/core/Rat.pm:

[23:12] <dalek> rakudo/nom: Fix RT #130427

[23:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/347271d214

[23:12] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130427

[23:16] * lizmat has been in the car for 7+ hours and is tired

[23:16] <yoleaux2> 14:17Z <notviki> lizmat: what are your thought on removing this https://github.com/rakudo/rakudo/commit/3962ee51d9fab ? Feels like a footgun: if you end up with a unitialized IO::Path type object (say, from unset named param), the code will silently assume CWD. Since $*CWD has .chdir, doesn't seem like it's worth the rist of also having this behaviour. Thoughts?

[23:18] <lizmat> notviki: not sure what I was thinking then.  Feels like a footgun to me now as well

[23:18] <notviki> alright

[23:23] <lizmat> good night, #perl6-dev!

[23:23] <notviki> night
