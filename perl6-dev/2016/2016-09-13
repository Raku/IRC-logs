[00:54] <dalek> roast: 34985d2 | TimToady++ | S02-literals/string-interpolation.t:

[00:54] <dalek> roast: be more exhaustive on polysigil interpolation

[00:54] <dalek> roast: review: https://github.com/perl6/roast/commit/34985d2672

[00:55] * TimToady is exhausted :)

[01:14] <awwaiid> exhaustively exhausted

[03:09] <AlexDaniel> m: say ∞ ~~ 0..∞

[03:09] <camelia> rakudo-moar 22946e: OUTPUT«True␤»

[05:19] <lizmat> Files=1138, Tests=52905, 229 wallclock secs (13.48 usr  3.85 sys + 1412.27 cusr 135.78 csys = 1565.38 CPU)

[06:01] <dalek> rakudo/nom: 6a4ba75 | lizmat++ | src/core/Str.pm:

[06:01] <dalek> rakudo/nom: Make test 64 in S05-transliteration/trans.t pass

[06:01] <dalek> rakudo/nom:

[06:01] <dalek> rakudo/nom: Apparently the order in which we slip a slurpy hash is important.

[06:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6a4ba75e7b

[06:08] <[Tux]> This is Rakudo version 2016.08.1-174-g22946ed built on MoarVM version 2016.08-43-g3d04391

[06:08] <[Tux]> csv-ip5xs        9.355

[06:08] <[Tux]> test            15.057

[06:08] <[Tux]> test-t           6.883

[06:08] <[Tux]> csv-parser      17.351

[08:27] <dalek> rakudo/nom: ee4c96d | lizmat++ | src/core/Buf.pm:

[08:27] <dalek> rakudo/nom: Give Buf/Blob its own optimised .reverse

[08:27] <dalek> rakudo/nom:

[08:27] <dalek> rakudo/nom: Makes it 1.5x faster than before.  Inspired by Geo::IP2Location::Lite

[08:27] <dalek> rakudo/nom: (leejo++)

[08:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ee4c96d8d8

[10:41] <Zoffix> m: class A { my $.bar = 42; }; class D { constant barz = A.bar.say; }; A.bar.say

[10:41] <camelia> rakudo-moar ee4c96: OUTPUT«(Any)␤(Any)␤»

[10:41] <Zoffix> m: class A { my $.bar = 42; }; BEGIN A.bar; A.bar.say

[10:41] <camelia> rakudo-moar ee4c96: OUTPUT«(Any)␤»

[10:41] <Zoffix> m: class A { BEGIN my $.bar = 42; }; BEGIN A.bar; A.bar.say

[10:41] <camelia> rakudo-moar ee4c96: OUTPUT«42␤»

[10:48] <jnthn> All those look correct fwiw

[10:48] <jnthn> (Think a bogus ticket was filed overnight)

[10:48] <jnthn> my $.bar = 42;

[10:48] <jnthn> desugars to

[10:48] <jnthn> my $bar = 42;

[10:48] <jnthn> method bar() { $bar }

[10:48] <jnthn> Meaning that the assignment happens at the usual time

[10:49] <jnthn> Bit busy at the moment to reply on the ticket, though.

[10:51] <Zoffix> m: class A { my $.bar = 42; }; BEGIN A.bar; A.bar.say

[10:51] <camelia> rakudo-moar ee4c96: OUTPUT«(Any)␤»

[10:51] <Zoffix> jnthn, ^ that doesn't look correct, because accessing the attribute at compile time locks it in to Any, so that later at compile time, it stays at Any and not getting its default.

[10:51] <Zoffix> m: class A { my $.bar = 42; }; A.bar; A.bar.say

[10:51] <camelia> rakudo-moar ee4c96: OUTPUT«42␤»

[10:52] <Zoffix> s:2nd/compile/run/;

[10:53] <jnthn> Hm, that looks dubious indeed. It will, I'm afraid, also be a difficult fix.

[10:54] <jnthn> Though possibly do-able in terms of the same thing we use to fix similar closure-y issues involving constants.

[11:59] <dalek> rakudo/nom: f143bac | lizmat++ | src/core/Buf.pm:

[11:59] <dalek> rakudo/nom: Make Buf|Blob.reverse a bit faster still

[11:59] <dalek> rakudo/nom:

[11:59] <dalek> rakudo/nom: Especially on larger Bufs/Blobs

[11:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f143bac0f5

[12:01] <dalek> rakudo/nom: c866955 | lizmat++ | docs/ChangeLog:

[12:01] <dalek> rakudo/nom: Mention Buf|Blob.reverse improvement

[12:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c866955426

[12:01] <lizmat> this should conclude my work on rakudo for this release

[12:01] <lizmat> barring urgent bug fixes  :-)

[12:07] <nine> It's gonna be a nice release :)

[12:16] <timotimo> \o/

[12:16] <timotimo> i agree

[12:19] * lizmat finally starts working on a Dutch version of perl6intro

[12:34] <dalek> rakudo/nom: 340bef1 | (Zoffix Znet)++ | docs/ChangeLog:

[12:34] <dalek> rakudo/nom: Log all of the changes to date

[12:34] <dalek> rakudo/nom:

[12:34] <dalek> rakudo/nom: Logs commits 356efac a9ed671 59ce05e

[12:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/340bef1e28

[12:39] <dalek> rakudo/nom: 1573a6e | (Zoffix Znet)++ | tools/create-release-announcement.pl:

[12:39] <dalek> rakudo/nom: Include invitation to donate to TPF in release announcement

[12:39] <dalek> rakudo/nom:

[12:39] <dalek> rakudo/nom: As suggested by [Coke]++

[12:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1573a6e43d

[12:39] <timotimo> <3

[12:41] <dalek> rakudo/nom: b771f1e | (Zoffix Znet)++ | tools/create-release-announcement.pl:

[12:41] <dalek> rakudo/nom: Add angled brakets around URL

[12:41] <dalek> rakudo/nom:

[12:41] <dalek> rakudo/nom: No idea what they are for, but all the other URLs in the template have them

[12:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b771f1e672

[14:35] <MetaZoffix> Do we already have a mechanism to test changes made to a module?

[14:36] <MetaZoffix> ATM, I plan on copying a template to a temp dir, running it, modifying it, removing it.

[14:36] <MetaZoffix> well... running again after modifying :)

[14:48] <nine> Sounds like S10-package/precompilation.t?

[14:54] <MetaZoffix> Don't see anything relevant there. All seems to be static files.

[14:55] <nine> look for spurt

[15:00] <MetaZoffix> So just overwriting existing files?

[15:01] <MetaZoffix> let's see how that goes

[15:07] <nine> I guess I actually hope that if you implement something better, you also upgrade precompilation.t. Overwriting has its disadvantages...

[15:24] <dalek> roast: 1f616b0 | (Zoffix Znet)++ | / (3 files):

[15:24] <dalek> roast: precompiled module's constants get updated on change

[15:24] <dalek> roast:

[15:24] <dalek> roast: RT#129266

[15:24] <dalek> roast: review: https://github.com/perl6/roast/commit/1f616b0569

[15:24] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129266

[15:55] <dalek> roast: 22a9a8d | (Zoffix Znet)++ | S10-packages/precompilation.t:

[15:55] <dalek> roast: Remove unused variable

[15:55] <dalek> roast:

[15:55] <dalek> roast: We never need the path to the second module.

[15:55] <dalek> roast: review: https://github.com/perl6/roast/commit/22a9a8dcfc

[17:50] <mst> nine:  INIT {...} #  * at run time, ASAP, only ever runs once

[17:50] <mst> nine: I thought you'd said INIT blocks got run during precomp?

[17:50] <mst> did I misunderstand you?

[18:10] <MetaZoffix> Turns out `make spectest`/`make stresstest` seem to always exit with good status, even if tests fail.

[18:11] <MetaZoffix> Any idea how to fix that?

[18:15] <mst> looks to me like the harness does that?

[18:15] <mst> hmm

[18:16] <MetaZoffix> Yeah, seems this file is the one that runs the tests: https://github.com/rakudo/rakudo/blob/nom/t/harness5

[18:17] <mst> that or t/harness6 depending#

[18:18] <mst> hrm, no, runtests() should die()

[18:19] <MetaZoffix> Hm, but another one doesn't: https://metacpan.org/pod/TAP::Harness#runtests

[18:19] <MetaZoffix> "Returns a TAP::Parser::Aggregator containing the test results."

[18:20] * MetaZoffix adds some debug print statements

[18:22] <MetaZoffix> Aye (at least on my box), it's using TAP::Harness

[18:22] * MetaZoffix adds extra codes

[18:38] <arnsholt> jnthn: A question you may or may not have given thought to: Do you think it would make sense to make the JVM backend use Truffle, rather than our custom byte-code pipeline?

[18:42] <dalek> rakudo/nom: 626a222 | (Zoffix Znet)++ | t/harness5:

[18:42] <dalek> rakudo/nom: Exit harness with failed code when tests fail

[18:42] <dalek> rakudo/nom:

[18:42] <dalek> rakudo/nom: If some cases, TAP::Harness[^1], and not Test::Harness[^2], is used

[18:42] <dalek> rakudo/nom: for running tests. Its runtests method doesn't auto-die like

[18:42] <dalek> rakudo/nom: Test::Harness's, but instead returns a TAP::Parser::Aggregator[^3]

[18:42] <dalek> rakudo/nom: object. This commit simply asks that objects whether all tests passed

[18:42] <dalek> rakudo/nom: and exists unsuccessfully if any didn't.

[18:42] <dalek> rakudo/nom:

[18:42] <dalek> rakudo/nom: [1] https://metacpan.org/pod/TAP::Harness

[18:42] <dalek> rakudo/nom: [2] https://metacpan.org/pod/Test::Harness

[18:42] <dalek> rakudo/nom: [3] https://metacpan.org/pod/TAP::Parser::Aggregator

[18:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/626a2220e7

[18:42] <MetaZoffix> s/If/In/;

[19:07] <cygx> arnsholt: Truffle is not a drop-in replacement as it's not a bytecode-generating backend

[19:07] <cygx> arnsholt: what I'd do is write a MoarVM bytecode interpreter in Truffle

[19:09] <arnsholt> cygx: Oooh, that's a clever idea!

[19:17] <cygx> right now, Truffle/Graal is still too research-y for general consumption, though that might change once JDK9 gets released...

[19:17] <cygx> (or even better, if their SubstrateVM got open sourced)

[19:34] <ZoffixW> Neural42, steps

[19:34] <Neural42> ZoffixW, all pre nqp r pre-blank-slate nqp-clone nqp-bump-vers nqp-build nqp-tar nqp-tar-build nqp-tag nqp-tar-sign nqp-tar-copy r-clone r-prep-ann r-bump-vers r-build r-p5 r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy

[19:34] <ZoffixW> Neural42, run pre r-clone r-build r-p5 r-stress r-stress-v6c

[19:34] <Neural42> ZoffixW, ♥♥♥♥♥♥ Prep done

[19:39] <jnthn> arnsholt: Haven't thought a lot about it, but I think it'd be more of a new backend (code-gen wise at the very least, might be able to steal a bunch of built-in impls)

[19:40] <jnthn> I suspect going from QAST nodes to truffle's ASTs would enable far more successful use of them

[19:42] <Neural42> ZoffixW, ♥♥♥♥♥♥ Rakudo stresstest (master) OK

[19:44] <Neural42> ZoffixW, ♥♥♥ All Done! ♥♥♥

[19:44] <Neural42> ZoffixW, ♥♥♥♥♥♥ Rakudo stresstest (6.c-errata) OK

[19:44] <ZoffixW> :D

[19:44] <ZoffixW> So the release bot doubles as a stresstester too :)

[19:45] <jnthn> Curious it reported all done and then a final result :)

[19:45] <jnthn> But wow, that's nice

[19:45] <jnthn> ZoffixW++

[19:45] <ZoffixW> That's just a race condition in message reporting :)

[19:54] <dogbert2> o/ Zoffix, thx for writing the roast test yesterday

[19:56] <dalek> roast: d1baf2e | usev6++ | S32-list/combinations.t:

[19:56] <dalek> roast: Unfudge passing test for JVM

[19:56] <dalek> roast: review: https://github.com/perl6/roast/commit/d1baf2e7a3

[19:58] <dogbert2> I have some test failures running 'make spectest' on a 32 bit Linux vm. Should I report those somewhere?

[19:59] <dogbert2> or does the future lie in 64 bit :)

[21:11] <Zoffix> .tell dogbert2 (RE: spectest failures), yeah, create an RT ticket for them.

[21:11] <yoleaux2> Zoffix: I'll pass your message to dogbert2.

[22:12] * Zoffix is going to try to plunge to new depths

[22:12] <Zoffix> Gonna fix a SEGV! \o/

[22:12] <Zoffix> Step one. Google "what the hell is a segv"

[22:12] <Zoffix> :)

[22:17] <Zoffix> Is moar compiled "with -g switch" by default? So gdb can be used?

[22:17] <Zoffix> I guess I can find out on my own :)

[22:23] <timotimo> by default, no :(

[22:23] <timotimo> you need --debug=3

[22:23] <timotimo> and it's sometimes helpful to also --optimize=1

[22:23] <timotimo> so that you don't get "<optimized out>" for every god damn thing you try to print ... >:(

[22:25] <Zoffix> So I can rebuild it in nqp/MoarVM dir and that will do fine? I don't need to recompile NQP/Rakudo?

[22:31] <timotimo> that's correct. if it's the same version, you'll be fine

[22:32] <Zoffix> cool. thanks

[22:39] <Zoffix> "Stack overflow in thread 1: can't grow stack to 0xffe801ff8"

[22:40] <Zoffix> Cool :)
