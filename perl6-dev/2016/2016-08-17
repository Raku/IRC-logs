[03:01] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Prevent mutable keys in Pairs, RT #128965'

[03:01] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/152789578 https://github.com/rakudo/rakudo/compare/ba20d347e6a8...dd9b760fcedc

[03:01] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128965

[03:41] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Revert "Prevent mutable keys in Pairs, RT #128965"

[03:41] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128965

[03:41] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/152805207 https://github.com/rakudo/rakudo/compare/dd9b760fcedc...b00d92de142f

[06:12] <[Tux]> This is Rakudo version 2016.07.1-200-gb00d92d built on MoarVM version 2016.07-18-g2f269d8

[06:12] <[Tux]> csv-ip5xs       10.036

[06:12] <[Tux]> test            15.581

[06:12] <[Tux]> test-t           7.578

[06:12] <[Tux]> csv-parser      16.997

[06:16] <[Tux]> And a second run

[06:16] <[Tux]> csv-ip5xs       10.155

[06:16] <[Tux]> test            15.324

[06:16] <[Tux]> test-t           7.335

[06:16] <[Tux]> csv-parser      16.855

[07:43] <arnsholt> Hee hee hee! Discovered while digging into Rakudo's parser actions: "sub thunkity_thunk"

[07:54] <arnsholt> jnthn: From what I can gather, a hash lookup on an NQPMu just returns NQPMu again. That right?

[08:27] <arnsholt> Bah. Tracking down errors is going to be harder when the line numbers are off =(

[08:49] <arnsholt> Holy crap, it worked!

[08:49] <arnsholt> Now to see how many metaop spectests I broke!

[09:02] <gfldex> i would vote for RT#127019 to be changed from LTA to [BUG]

[09:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127019

[09:08] <jnthn> morning, #perl6

[09:09] <arnsholt> o/

[09:09] * jnthn got some decent sleep and will hopefully be able to track down the 6harness issues today :)

[09:09] <jnthn> arnsholt: Yes, if you use the indexing syntax you'll get NQPMu back. If the nqp::atkey op directly, an nqp::null

[09:09] <arnsholt> Yeah, that's what it looked like

[09:10] <arnsholt> The better-O refactor had to expand some tests like "if $<infix><OPER><O><iffy>" to "if $<infix><OPER> && $<infix><OPER><O><iffy>"

[09:11] <arnsholt> Anyways, I think I'm on track to getting Rakudo refactored as well

[09:11] <arnsholt> The hard part last time I did this was getting the setting to compile, which I managed to get right just now

[09:11] <lizmat> jnthn: I'm thinking about DEPRECATing Pair.freeze for the following reasons:

[09:11] <arnsholt> There's some spectest fallout, but hopefully that won't be too hard to fix

[09:12] <lizmat> 1. this is the one case that I know of where it changes the .WHICH of an existing object

[09:12] <lizmat> 2. it only deconts one level, so it could still be mutable

[09:12] <lizmat> 3. I thought I needed it for Bag|Mix.pairs, but I don't

[09:13] <lizmat> I feel 1. is the most important reason

[09:14] <lizmat> there are 2 spectests for it, and there is some doc for it

[09:14] <jnthn> Wait, was .freeze in-place?

[09:16] <jnthn> (or "is" for now but... :))

[09:16] <jnthn> I'd sorta assumed when I heard about it that it returned a Pair with key and value decont'd :)

[09:30] <lizmat> no, it in placed  :-(

[09:30] <lizmat> jnthn: (sorry, was called away for a photo session with a lot of butterflies)

[09:30] <jnthn> Bufferflies!

[09:30] <jnthn> Uh

[09:30] <jnthn> Butterflies

[09:31] <jnthn> .oO( Am I really awake enough to be debugging 6harness... :P)

[09:31] <lizmat> :-)

[09:32] <jnthn> On the "No subtests run" - dunno if you'd already figured this out but if you comment out the test immediately before the one that first says that in spectest.data, it gets further. Until another one causes it to go awry after it so you comment that out and...further it gets again.

[09:32] <arnsholt> Comment-driven development!

[09:32] <lizmat> jnthn: no hadn't figured that out yet this time

[09:33] <jnthn> So, now to see what these tests have in common :)

[09:33] <jnthn> OK, just thought I'd check I'm not re-discovering stuff :)

[09:33] <lizmat> I would assume some precomp issue with use lib

[09:33] <jnthn> That seems unlikely given the candidates

[09:34] * nine exhales

[09:35] <lizmat> sorry nine, but since it says "No subtests run", it probably means it didn't compile, so ...

[09:37] <nine> No worry :)

[09:37] <nine> Just turns out that I really enjoyed not having worked on module loading for a couple of weeks.

[09:37] <nine> But the next two big issues in Inline::Perl5 will involve going back to module loading.

[09:44] <lizmat> so, do we have an HLL way of deconting ?

[09:46] <jnthn> The only thing in common between these tests so far is that they all produce over 200 lines of output :)

[09:54] <lizmat> which ones ?

[09:58] <jnthn> https://gist.github.com/jnthn/6cadf2259a617bed23e0a0d37a4de212

[09:59] <arnsholt> Haha! I was trying to fix a reverse metaop spectest introduced *yesterday* =D

[09:59] <lizmat> jnthn: could it be the *size* of the output in bytes, rather than # of lines

[09:59] <jnthn> Very possibly, but those would corellate :)

[10:00] <jnthn> What's odd is that a test that outputs 400+ lines is itself handled OK. It hoses stuff up for the *next* test is what's really odd.

[10:01] <jnthn> TEST_JOBS= HARNESS_TYPE=6 make localtest

[10:01] <jnthn> make: *** No rule to make target `m-localtest6', needed by `localtest'.  Stop.

[10:02] <jnthn> aww :(

[10:03] <nine> Reminds me a bit of people having problems with run(:out) and large outputs

[10:04] <jnthn> nine: Got a link?

[10:05] <jnthn> Hm, this is odd

[10:05] <jnthn> m-localtest: m-all spectest_checkout t/localtest.data @$(M_HARNESS6_WITH_FUDGE) --tests-from-file=t/localtest.data

[10:05] <jnthn> oops, paste fail

[10:05] <jnthn> But that looks like localtest *always* uses the 6 harness?

[10:06] <jnthn> Apart from it seems not to

[10:08] <nine> jnthn: sorry, no :( Just feels like I've read things like that from time to time. Where do we buffer pipe output anyway? AFAIR a UNIX pipe buffers ~ 4K before blocking

[10:09] <nine> So unless one actually reads the output, the processes will start hanging.

[10:10] <arnsholt> I get two spectest failures in S15-nfg/regex.t, are those expected?

[10:11] <arnsholt> (not ok 10 - Do not have accidents involving range char class and NFC, and not ok 11 - Do not have accidents involving range char class and NFC under :i)

[10:11] <jnthn> that was fixed recently...you're not missing the fix (think it was a fix in NQP, so could your O branch be beind?)

[10:11] <jnthn> *behind

[10:17] <jnthn> Aha, it seems that it's actually an OSR bug

[10:17] <jnthn> Which makes sense in that the OSR limit is around 200

[10:17] <jnthn> (strace kinda give the hint; I could see the JIT mapping executable memory...)

[10:19] <nine> Ah, 200 iterations of reading a line :)

[10:19] <nine> or processing

[10:19] <jnthn> Right, processing

[10:25] <jnthn> Wowser, and if I stick a debug printf in the OSR-ing code, it doesn't fail?!

[10:32] <Zoffix> What's OSR?

[10:34] <lizmat> On Stack Replacement

[10:34] <lizmat> if a sub is called many times at the same place, it can be optimized by just inserting the code of the sub at that place

[10:35] <lizmat> at least, that's my interpretation :-)

[10:36] <Zoffix> ah

[10:38] <jnthn> OSR of the first loop in IO::Pipe.lines seems to be guilty

[10:38] <nine> Looks so innocent

[10:39] <arnsholt> jnthn: Yeah, the better-O branch is behind NQP a bit so that's probably it

[10:40] <arnsholt> Woot! No fails but the NFG one  =D

[10:43] <Zoffix> s: IO::Pipe, "lines", \()

[10:43] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/b00d92d/src/core/IO/Pipe.pm#L10

[10:50] <dalek> rakudo/nom: a4140a3 | gfldex++ | src/core/Bool.pm:

[10:50] <dalek> rakudo/nom: fix for RT#127019

[10:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a4140a3ec6

[10:50] <dalek> rakudo/nom: 40706bf | lizmat++ | src/core/Bool.pm:

[10:50] <dalek> rakudo/nom: Merge pull request #836 from gfldex/RT127019

[10:50] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127019

[10:50] <dalek> rakudo/nom:

[10:50] <dalek> rakudo/nom: fix for RT#127019

[10:50] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127019

[10:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/40706bfb55

[10:51] <arnsholt> jnthn: In Perl6::Grammar there's a method AS_MATCH (Grammar.nqp:3971 here), mostly used for O stuff (but also colonpairs that's eminently killable); does it differ much from the construct "$<O> = {$<postfix><O>}"?

[10:54] <gfldex> lizmat: https://github.com/perl6/roast/pull/141

[10:54] <dalek> roast: df65307 | gfldex++ | S02-types/bool.t:

[10:54] <dalek> roast: tests for RT#127019

[10:54] <dalek> roast: review: https://github.com/perl6/roast/commit/df65307159

[10:54] <dalek> roast: d0f8198 | lizmat++ | S02-types/bool.t:

[10:54] <dalek> roast: Merge pull request #141 from gfldex/RT127019

[10:54] <dalek> roast:

[10:54] <dalek> roast: tests for RT#127019

[10:54] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127019

[10:54] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127019

[10:54] <dalek> roast: review: https://github.com/perl6/roast/commit/d0f8198729

[11:24] <dalek> nqp/no-eval: 4eeaa2e | (Pawel Murias)++ | src/vm/js/Compiler.nqp:

[11:24] <dalek> nqp/no-eval: [js] Get rid of dead variable.

[11:24] <dalek> nqp/no-eval: review: https://github.com/perl6/nqp/commit/4eeaa2edf9

[11:24] <dalek> nqp/no-eval: d2eae8a | (Pawel Murias)++ | src/vm/js/ (3 files):

[11:24] <dalek> nqp/no-eval: [js] Load ctx by calling ctxsave on the ModuleLoader rather than using a hacky nqp.ctxsave()

[11:24] <dalek> nqp/no-eval: review: https://github.com/perl6/nqp/commit/d2eae8a94f

[12:06] * jnthn back

[12:08] <jnthn> arnsholt: It just makes a passed Cursor that has $!match (so its .MATCH result) set to whatever was passed in

[12:09] <jnthn> arnsholt: And no, it's not really the same as:

[12:09] <jnthn> nqp: my $m := "a" ~~ /$<O>={'xyz'}/; say($m<O>.HOW.name($m<O>))

[12:09] <camelia> nqp-moarvm: OUTPUT«NQPMatch␤»

[12:10] <jnthn> Whereas with AS_MATCH that'd come back as a string

[12:10] <unmatched}> So many camelias :D https://scontent-lga3-1.xx.fbcdn.net/t31.0-8/13975389_1176356119098903_1142788483898917754_o.jpg

[12:12] <masak> whoa

[12:12] <masak> oh, poor liz got bandaids :/

[12:12] <dalek> rakudo/nom: 424d725 | lizmat++ | docs/ChangeLog:

[12:12] <dalek> rakudo/nom: Add some more (recent) ChangeLog entries

[12:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/424d725ea5

[12:15] <lizmat> masak: actually, I'm bandaid free at the moment

[12:15] <nine> lizmat: there's one on your shirt ;)

[12:15] <lizmat> unfortunately, not yet bruis-free  :-(

[12:15] <lizmat> *bruise

[12:15] <masak> here's hoping for a quick de-bruising

[12:15] <lizmat> Ah, that...

[12:16] <lizmat> not a bandaid, but part of the Dutch Perl Workshop T-shirt last April in Amsterdam

[12:16] <lizmat> the X is one of the 3 X's in the logo of Amsterdam

[12:16] <lizmat> https://en.wikipedia.org/wiki/Amsterdam#/media/File:Insigne_Amstelodamensis_coronatum.svg   # coat of arms

[12:17] * nine just learned something :)

[12:39] <arnsholt> jnthn: I think I see. And I think I see what I'll try to do about it. $dayjob right now, but I'll probably poke you again in a few days for a review

[12:41] <jnthn> OK :)

[12:50] <jnthn> arnsholt: I suspect its reason for existing is because we stored the hash of details under the match slot rather than in .ast, so it may no longer be needed after you changes.

[12:51] <arnsholt> Yeah, I think they all more or less build equivalent structures

[12:52] <arnsholt> AS_MATCH is also used twice elsewhere, but also for storing hashes in the tree, so I think I'll replace it with a more generic "zero-width match and attach this thingy as the AST" mechanism

[12:52] <arnsholt> Should work for both the AS_MATCH and $<O> = {...}

[12:54] <jnthn> Now into S05 using the Perl 6 test harness with TEST_JOBS=

[12:55] <jnthn> And still going strong

[12:55] <jnthn> (With a local patch)

[12:56] <arnsholt> Or maybe I can just replace the AS_MATCH thingies with $<O> = {...}? Since getting the thing will now actually be an NQPMatch, not a hash?

[12:57] <jnthn> Your changes stick the hash into .ast, no?

[12:57] <arnsholt> Yeah

[12:57] <[Coke]> jnthn: "we

[12:57] <jnthn> So I'd expect token AS_MATCH($v) { { make $v } } or so

[12:58] <[Coke]> jnthn: "we'll deal with this later" is perfectly fine; we just need to encapsulate that on the ticket.

[12:58] <arnsholt> jnthn: Yeah, basicall.

[12:58] <arnsholt> *y

[13:01] <arnsholt> But other code also does $<O> = {$<postfix><O>} which also appears to work, with expecting things to be in .ast. Should that not work?

[13:01] <jnthn> Oh, hmm :)

[13:01] <jnthn> I wasn't aware that'd set the .ast :)

[13:02] <jnthn> Does it really? :)

[13:02] <arnsholt> Well $<postfix><O> has the appropriate .ast

[13:02] <[Coke]> (that said, lizmat++ for improving the situation in the meantime.)

[13:02] <lizmat> what did I do this time ?

[13:02] <jnthn> arnsholt: Ah, OK :)

[13:02] <arnsholt> Which is then supposed to be available through the other rule's .ast

[13:03] <[Coke]> lizmat: patched some thing or other. Danke. :)

[13:03] <lizmat> ah, that  :-)

[13:03] <jnthn> Now up to S17

[13:03] <arnsholt> AFAICT the two constructs have more or less the same effects, at least with regards to .ast

[13:04] <arnsholt> But I guess the rest of the match information might go a bit weird with $<O> = {$<postfix><O>}

[13:06] <[Coke]> RT: 1346; @LARRY: 11; CONC: 26; GLR: 4; JVM: 66; LHF: 1; LTA: 113; NEW: 867; NYI: 83; OSX: 5; PERF: 23; POD: 17; PRECOMP: 10; RFC: 33; SEGV: 33; STAR: 5; TESTNEEDED: 17; TODO: 10; UNI: 28; UNTAGGED: 489; WEIRD: 3

[13:06] <[Coke]> also:

[13:06] <[Coke]> Remaining tags, any of interest?

[13:06] <[Coke]> @IXS: 1; BOOTSTRAP: 3; BUG: 425; BUILD: 7; CSTRUCT: 1; DOCS: 1; EFG: 1; FOO: 1; INT: 1; MATH: 1; MOARVM: 1; NATIVECALL: 5; NUMERIC: 1; REPL: 1; RT: 1; SPESH: 1; STR: 1; WEB: 1

[13:07] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Add some more (recent) ChangeLog entries'

[13:07] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/152951941 https://github.com/rakudo/rakudo/compare/40706bfb5540...424d725ea585

[13:07] <buggable> ✓ [travis build above] One job failed due to the timeout. No other failures.

[13:07] <dalek> rakudo/nom: 0f420ad | lizmat++ | src/core/Bag (2 files):

[13:07] <dalek> rakudo/nom: Make Bag/BagHash.Mix coercion 1000x faster

[13:07] <dalek> rakudo/nom:

[13:07] <dalek> rakudo/nom: This thing is, since Mix is immutable, we can just transplant the

[13:07] <dalek> rakudo/nom: inside of the Bag/BagHash, since Mixes can also contain Ints as values.

[13:07] <dalek> rakudo/nom:

[13:07] <dalek> rakudo/nom: OTOH, this type of coercion is not likely, so YMMV.

[13:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0f420ad2dc

[13:07] <unmatched}> holy crap 1000x

[13:07] <unmatched}> lizmat++

[13:07] <lizmat> well, for a 1000 element bag

[13:07] <lizmat> it was actually not quite measurable

[13:07] <jnthn> If I mutate the BagHash, will the Mix remain the same?

[13:08] <lizmat> jnthn: yes, because it cloned the internal hash

[13:09] <jnthn> Dammit

[13:09] <jnthn> t/spec/S32-trig/cotan.t ................................... ok

[13:09] <jnthn> Aborted (core dumped)

[13:09] <jnthn> make: *** [m-spectest6] Error 134

[13:09] <jnthn> Nearly got there :P

[13:09] <lizmat> ah, indeed, for the BagHash.Mix we need to clone, then it's only about 80x faster  :-)

[13:13] <lizmat> m: dd mix(<a b b  c c c>)

[13:13] <camelia> rakudo-moar 0f420a: OUTPUT«("a"=>1,"c"=>3,"b"=>2).Mix␤»

[13:13] <lizmat> m: dd mix(<a b b  c c c>).values.map: { .WHAT }

[13:13] <camelia> rakudo-moar 0f420a: OUTPUT«(Int, Int, Int).Seq␤»

[13:26] * [Coke] wonders what ribasushi's problem is.

[13:26] <[Coke]> (having just read some comments on reddit)

[13:29] <unmatched}> To me it feels he never got over his miserably failed attempt to sponsor Perl work. And in its description of it, it sounded like he was kinda desperate for money, in order to be able to continue open source work at all.

[13:30] <[Coke]> I can't speak to that, I guess. On the face of it, is it just "Perl is a bad name for Perl 6" ? I mean, there's probably one person who is happy about that.

[13:36] <jnthn> Funding people to do non-trivial open source work that is unreasonable for them to do in their spare time is certainly a genuine problem.

[13:38] <jnthn> (And a problem far, far broader than a Perl problem.)

[13:40] <jnthn> It's fair enough for people to look for funding so they can do open source stuff without trashing their work/life balance. Also, people's circumstances change, and energy levels with them. I for one have nowhere near the free quality time I used to have. It's highly unlikely I'd be able to sit all day hunting concurrency issues without funding at present. So, please don't call people trying to save their significant open source involvement by

[13:41] <jnthn> Bringing up the naming thing, on the other hand, is silly, and not really excusable at this point.

[13:42] <nine> jnthn: your message was cut off

[13:42] <jnthn> gah, where

[13:43] <nine> open source involvement by

[13:43] <jnthn> So, please don't call people trying to save their significant open source involvement by having it fudned desperate.

[13:45] <unmatched}> No, I meant that he explicitly stated that without this funding he won't be able to do anything and will have to walk away from his work that's used by many businesses: https://www.tilt.com/tilts/year-of-ribasushi-help-him-focus-on-cpan-for-2016/description

[13:46] <unmatched}> The goal was $120K for the year and he got only $30K. The plan was for business that use his code to chip in, but virtually none did.

[13:54] <lizmat> afk&   # yes, gone cycling again  :-)

[13:54] <jnthn> Be careful!! :)

[14:29] * jnthn has a fix for one more issue afflicting TAP.pm6, and is debugging a third

[14:46] <unmatched}> \o/

[14:47] <jnthn> Seems it may be to do with deferral (callsame and friends)

[14:57] <jnthn> Didn't get to the bottom of that yet, but fixed a different and related issue on the way :)

[14:58] <jnthn> (Both latest ones were code-gen bugs in Rakudo)

[15:22] <dalek> nqp/no-eval: 86fb863 | (Pawel Murias)++ | src/vm/js/ (3 files):

[15:22] <dalek> nqp/no-eval: [js] Rename HLLBackend::JavaScript to JavaScriptBackend.

[15:22] <dalek> nqp/no-eval: review: https://github.com/perl6/nqp/commit/86fb8639a9

[15:22] <dalek> nqp/no-eval: 57daedd | (Pawel Murias)++ | src/vm/js/ (3 files):

[15:22] <dalek> nqp/no-eval: [js] Stop evaling code when deserializing closures.

[15:22] <dalek> nqp/no-eval: review: https://github.com/perl6/nqp/commit/57daeddc53

[15:22] <dalek> nqp/no-eval: a107d32 | (Pawel Murias)++ | src/vm/js/nqp-runtime/code-ref.js:

[15:22] <dalek> nqp/no-eval: [js] Get rid of the global CodeRef.cuids cuid to codeRef mapping.

[15:22] <dalek> nqp/no-eval: review: https://github.com/perl6/nqp/commit/a107d32771

[15:22] <dalek> nqp/no-eval: bad4c0d | (Pawel Murias)++ | src/vm/js/ (2 files):

[15:22] <dalek> nqp/no-eval: [js] Stop passing unused static info to CodeRefs.

[15:22] <dalek> nqp/no-eval: review: https://github.com/perl6/nqp/commit/bad4c0dbec

[16:02] <gfldex> https://rt.perl.org/Public/Bug/Display.html?id=127019 can be closed

[16:03] <unmatched}> Done.

[16:07] <dalek> rakudo/nom: b08527f | jnthn++ | src/core/control.pm:

[16:07] <dalek> rakudo/nom: Propagate caller $/ through deferral.

[16:07] <dalek> rakudo/nom:

[16:07] <dalek> rakudo/nom: Otherwise, all callees end up seeing the same $/, which is the one in

[16:07] <dalek> rakudo/nom: the setting mainline. This caused an over-sharing issue in threaded

[16:07] <dalek> rakudo/nom: code. Since the `subparse` method returns the $/ it assigned to, it

[16:07] <dalek> rakudo/nom: could cause seeing a completely unrelated Match object from another

[16:07] <dalek> rakudo/nom: operation in another thread. This was the cause of the substr out of

[16:07] <dalek> rakudo/nom: range problem in the Perl 6 TAP harness.

[16:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b08527f161

[16:08] <jnthn> My other two fixes will need a little more work, 'cus I've managed to regress a state test, of all things...

[16:53] <unmatched}> I plan on exposing Test.pm6's die_on_fail functionality as PERL6_TEST_DIE_ON_FAIL env var. The functionality seems to be there, but not exposed to the user in any way, and it's a very useful feature when dealing with large test suites.

[18:35] <dalek> rakudo/missing-clones: 02a0477 | jnthn++ | src/Perl6/Actions.nqp:

[18:35] <dalek> rakudo/missing-clones: Avoid double code-gen of closure clone.

[18:35] <dalek> rakudo/missing-clones:

[18:35] <dalek> rakudo/missing-clones: The blorst action already emits that; doing it twice is just extra

[18:35] <dalek> rakudo/missing-clones: CPU time and more throwaway objects to GC.

[18:35] <dalek> rakudo/missing-clones: review: https://github.com/rakudo/rakudo/commit/02a0477a8a

[18:35] <dalek> rakudo/missing-clones: 739d1a3 | jnthn++ | src/Perl6/ (2 files):

[18:35] <dalek> rakudo/missing-clones: Fix mis-scoping of blocks in s///.

[18:35] <dalek> rakudo/missing-clones:

[18:35] <dalek> rakudo/missing-clones: Now we create the outer scopes sooner, so the things inside of them

[18:35] <dalek> rakudo/missing-clones: naturally end up in the correct places. We'll want a similar thing for

[18:35] <dalek> rakudo/missing-clones: other regexy constructs too, I suspect; this one got done first as it

[18:35] <dalek> rakudo/missing-clones: fixes RT #128809.

[18:35] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128809

[18:38] <jnthn> Will see if I can get any of those 4 mergeable before the release :)

[18:38] <jnthn> (yes, there's 4, dalek was being lazy)

[18:39] <jnthn> I know one of the latter two regresses something

[18:39] <jnthn> Was hoping neither of the first two did

[18:40] <jnthn> oh, the first two are fine

[18:41] <jnthn> The fail is in a local test partly covering the second two :)

[18:41] <dalek> rakudo/nom: 02a0477 | jnthn++ | src/Perl6/Actions.nqp:

[18:41] <dalek> rakudo/nom: Avoid double code-gen of closure clone.

[18:41] <dalek> rakudo/nom:

[18:41] <dalek> rakudo/nom: The blorst action already emits that; doing it twice is just extra

[18:41] <dalek> rakudo/nom: CPU time and more throwaway objects to GC.

[18:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/02a0477a8a

[18:41] <dalek> rakudo/nom: 739d1a3 | jnthn++ | src/Perl6/ (2 files):

[18:41] <dalek> rakudo/nom: Fix mis-scoping of blocks in s///.

[18:41] <dalek> rakudo/nom:

[18:41] <dalek> rakudo/nom: Now we create the outer scopes sooner, so the things inside of them

[18:41] <dalek> rakudo/nom: naturally end up in the correct places. We'll want a similar thing for

[18:41] <dalek> rakudo/nom: other regexy constructs too, I suspect; this one got done first as it

[18:41] <dalek> rakudo/nom: fixes RT #128809.

[18:41] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128809

[18:41] <unmatched}> \o/

[18:41] <timotimo> \o/

[18:44] <jnthn> If somebody fancies writing a test, https://rt.perl.org/Ticket/Display.html?id=128809 :)

[18:45] <jnthn> Food for me :)

[18:52] <unmatched}> Yeah, I can write.

[19:11] <dalek> roast: 16d333d | (Zoffix Znet)++ | S05-substitution/subst.t:

[19:11] <dalek> roast: code in replacement part of s/// has correct scoping

[19:11] <dalek> roast:

[19:11] <dalek> roast: RT#128809

[19:11] <dalek> roast: review: https://github.com/perl6/roast/commit/16d333d4b3

[19:11] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128809

[19:15] <unmatched}> m: { my $_ = 42 }

[19:15] <camelia> rakudo-moar 739d1a: OUTPUT«Potential difficulties:␤    Redeclaration of symbol $_␤    at <tmp>:1␤    ------> { my $_⏏ = 42 }␤»

[19:17] <dalek> roast: c316607 | (Zoffix Znet)++ | S05-substitution/subst.t:

[19:17] <dalek> roast: Avoid spurious warnings in output

[19:17] <dalek> roast:

[19:17] <dalek> roast: my $_ ... does not need a my on it

[19:17] <dalek> roast: review: https://github.com/perl6/roast/commit/c316607099

[19:23] <dalek> rakudo/nom: 848add9 | niner++ | src/core/CompUnit/Repository/FileSystem.pm:

[19:23] <dalek> rakudo/nom: Fix -Ilib and friends not overriding installed dependencies

[19:23] <dalek> rakudo/nom:

[19:23] <dalek> rakudo/nom: When checking the dependencies of a precomp file, we did not take development

[19:23] <dalek> rakudo/nom: version of modules in FileSystem repositories into account. I.e. with A

[19:23] <dalek> rakudo/nom: depending on B putting a new version of B into the lib directory and running

[19:23] <dalek> rakudo/nom: perl6 -Ilib -MA you would still get the precompiled version of A that uses the

[19:23] <dalek> rakudo/nom: installed version of B.

[19:23] <dalek> rakudo/nom:

[19:23] <dalek> rakudo/nom: Fixed by having the identity of a FileSystem repository reflect its complete

[19:23] <dalek> rakudo/nom: content. So by changing the content we detect a change in the repository chain

[19:23] <dalek> rakudo/nom: and know to re-resolve dependencies.

[19:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/848add944f

[19:42] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Make Bag/BagHash.Mix coercion 1000x faster

[19:42] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/152965365 https://github.com/rakudo/rakudo/compare/424d725ea585...0f420ad2dc10

[19:42] <buggable> ☢ [travis build above] Build log missing from at least one job. Check results manually.

[19:42] <unmatched}> Results are fine

[20:14] <[Coke]> jnthn: looks like #125048 was skipping some flapping tests.

[20:14] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125048

[20:19] <[Coke]> down to < 450 tickets that are untagged.

[20:19] <lizmat> hmmm.... quite some seemingly precomp related spectest error atm ?

[20:20] <lizmat> reconfiguring and rebuilding to make sure...

[20:24] <jnthn> [Coke]: Hm, we could try unskipping them to see if latest fixes help

[20:24] <jnthn> [Coke]: It's tagged CONC, and I'm working through those anyway, so will get it to if nobody else does :)

[20:25] <nine> There are skips in S17-procasync/basic.t and S17-procasync/print.t because of flapping

[20:27] <[Coke]> yup, just tagged it for that reason. :)

[20:28] <jnthn> nine: Do they still flap with recent fixes, though? :)

[20:29] <nine> jnthn: can't say right now. Broke my rakudo quite well by playing around with symbol merging :)

[20:30] <jnthn> ah, OK :)

[20:30] <jnthn> No hurry :)

[20:30] <jnthn> I'm beat for the day anyway :)

[20:32] * [Coke] ponders adding [OO] and [REGEX] tags.

[20:38] <lizmat> $ perl6 -Ilib t/spec/S11-modules/nested.t

[20:38] <lizmat> ===SORRY!===

[20:38] <lizmat> P6M Merging GLOBAL symbols failed: duplicate definition of symbol Grammar

[20:39] * lizmat nukes install, tries again

[20:39] <nine> Odd. I did run a full spectest before pushing :/

[20:41] <nine> lizmat: your command runs just fine here

[20:43] <lizmat> well, not here...  but I'm now on a fresh install, rebooting panda and installing Inline::Perl5

[20:44] <lizmat> hmmm....

[20:44] <nine> lizmat: can you paste RAKUDO_MODULE_DEBUG output of a failed run?

[20:45] <lizmat> will in a mo, after I've determined it is not some uncommitted change doing this

[20:47] <lizmat> even bootstrapping panda failed  :-(

[20:47] <nine> ouch

[20:48] <nine> Is it a failed test?

[20:50] <lizmat> https://gist.github.com/lizmat/9e9af080e534ec117ecad52b0109030b

[20:50] <lizmat> nine: ^^^

[20:50] <lizmat> this is without my uncommitted change, fwiw

[20:50] <nine> Ok, I get the same here. I did even use the installed panda, but not re-bootstrap

[20:53] <nine> Oh, may be a trivial fix

[20:57] <dalek> rakudo/nom: 7d80466 | niner++ | src/core/CompUnit/Repository/FileSystem.pm:

[20:57] <dalek> rakudo/nom: Fix loading modules when a FileSystem repo doesn't actually exist

[20:57] <dalek> rakudo/nom:

[20:57] <dalek> rakudo/nom: Commit 848add944fe6de9090f0abc3b17e9a3a8e2cc42b broke module loading when a

[20:57] <dalek> rakudo/nom: FileSystem repo pointing to a non-existing directory was in the repo-chain,

[20:57] <dalek> rakudo/nom: i.e. perl6 -I/this/path/does/not/exist

[20:57] <dalek> rakudo/nom: Affected panda's bootstrap.

[20:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7d804663db

[20:57] <nine> lizmat: ^^^

[20:58] <lizmat> ok, will try  :-)

[21:01] <lizmat> nine: isn't "$file.slurp(:enc<latin1>)" a bit fragile?  I mean, don't we support utf-8 ?  wouldn't utf8-c8 be better ?

[21:02] <nine> lizmat: latin1 is the closest we get to :bin as long as nqp::sha1 only supports Str, not blob

[21:02] <lizmat> but if there are UTF-8 sequences in the file, the slurp will fail, no?

[21:02] <nine> lizmat: we've been using the same in src/core/CompUnit/PrecompilationStore/File.pm for a couple of weeks

[21:03] <lizmat> I mean, you're slurping the source, no ?

[21:03] <geekosaur> lizmat, the other direction would fail, but latin1 will accept any byte sequence and doesn't even know about multibyte characters

[21:03] <nine> Yes, but only to feed it to sha1

[21:03] <nine> And SHA1 is actually an algorithm for byte sequences :)

[21:04] <geekosaur> now, fi you tried to render it as text you;d get mojibake, but for the stated purpose it's fine

[21:04] <lizmat> ok, nine geekosaur thanks for the explanation :-)

[21:04] <lizmat> nine: confirmed panda bootstrap now ok

[21:04] <nine> And nested.t?

[21:05] <lizmat> ok now

[21:05] <nine> great :)

[21:05] <lizmat> nine++

[21:05] <lizmat> running full spectest now

[21:17] <lizmat> :-( still same breakage

[21:17] <lizmat> eh.... maybe I forgot to start the spectest  :-)

[21:17] <lizmat> running again  :-)

[21:28] <lizmat> nine: no, still breakage

[21:29] <lizmat> still same breakage  :-(

[21:30] <lizmat> https://gist.github.com/lizmat/a51aa789923451f88a984e100d0d2c75

[22:12] <lizmat> .tell nine with 848add944fe6de9090f0 and 7d804663db8fdd331 reverted, all works fine for me :-(

[22:15] <yoleaux2> lizmat: I'll pass your message to nine.

[22:15] <Zoffix> 0.o

[22:17] <lizmat> good night, #perl6-dev!

[22:17] <Zoffix> night

[22:19] <dalek> rakudo/nom: a23c39c | (Zoffix Znet)++ | docs/release_guide.pod:

[22:19] <dalek> rakudo/nom: Remove dollar signs from shown shell commands

[22:19] <dalek> rakudo/nom:

[22:19] <dalek> rakudo/nom: So it's easier to copy-paste those commands into the terminal

[22:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a23c39c995

[22:54] <Zoffix> t/spec/S17-procasync/kill.rakudo.moar                       (Wstat: 0 Tests: 9 Failed: 0)

[22:54] <Zoffix> TODO passed:   9

[22:54] <Zoffix> But only when I do make stresstest and not make t/spec/S17-procasync/kill.t strangely

[23:19] <dalek> rakudo/nom: 71f156e | (Zoffix Znet)++ | .gitignore:

[23:19] <dalek> rakudo/nom: Ignore panda/ dir

[23:19] <dalek> rakudo/nom:

[23:19] <dalek> rakudo/nom: So we don't worry about accidentally committing it when stresstesting

[23:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/71f156e7e8

[23:19] <dalek> rakudo/nom: 1c7ca5e | (Zoffix Znet)++ | / (2 files):

[23:19] <dalek> rakudo/nom: Add PERL6_TEST_DIE_ON_FAIL env var to Test.pm6

[23:19] <dalek> rakudo/nom:

[23:19] <dalek> rakudo/nom: - Lets abort test suite on first failure (useful on large suites)

[23:19] <dalek> rakudo/nom: - Remove die_on_fail() sub. It seems to be a leftover from old times

[23:19] <dalek> rakudo/nom:     as it's not used in Test.pm6 and one can't use it from outside either.

[23:19] <dalek> rakudo/nom: - Do not stick $die_on_fail into the var stack and just keep a single one

[23:19] <dalek> rakudo/nom:     for the entire suite.

[23:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1c7ca5e13b

[23:21] <dalek> roast: eae3265 | (Zoffix Znet)++ | S24-testing/8-die_on_fail.t:

[23:21] <dalek> roast: Test PERL6_TEST_DIE_ON_FAIL env var

[23:21] <dalek> roast:

[23:21] <dalek> roast: Must abort test suite on first failure.

[23:21] <dalek> roast: review: https://github.com/perl6/roast/commit/eae326524c

[23:22] <dalek> rakudo/nom: e97fb7d | (Zoffix Znet)++ | t/spectest.data:

[23:22] <dalek> rakudo/nom: Add S24-testing/8-die_on_fail.t to list of tests to run

[23:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e97fb7d905

[23:23] <Zoffix> (Note to self: git commit some-file commits all of it, even if you staged a chunk from it already ~_~)

[23:52] <Zoffix> ☢☢☢ our REPL seems to be borked entirely. IMO this is a release blocker: https://rt.perl.org/Ticket/Display.html?id=128973

[23:53] <Zoffix> and we aaalmost have a test to detect this failure mode :) if only it tried to use those variables: https://github.com/perl6/roast/blob/master/S19-command-line/repl.t#L60 lol

[23:55] <Zoffix> And I'm guessing https://rt.perl.org/Ticket/Display.html?id=127933 got fixed simply because the variables disappear, not because the issue has been fixed, so that test likely will have to be fudged back in again

[23:57] * Zoffix leaves to fly in No Man's Sky :)
