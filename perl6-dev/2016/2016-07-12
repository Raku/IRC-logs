[00:46] <tbrowder> japhb: it's actually based on PR 112 which lizmat reverted, so I'm not sure how to answer the question.

[01:10] <dalek> roast: 44fc047 | (Zoffix Znet)++ | S02-lexical-conventions/unspace.t:

[01:10] <dalek> roast: [TODO FUDGE] Unspace with sigiless terms

[01:10] <dalek> roast:

[01:10] <dalek> roast: RT#128462

[01:10] <dalek> roast:

[01:10] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128462

[01:10] <dalek> roast: Unspace with method calls on sigiless terms must compile and work.

[01:10] <dalek> roast: review: https://github.com/perl6/roast/commit/44fc047be4

[01:46] <dalek> roast: b7d8279 | (Zoffix Znet)++ | S02-literals/quoting.t:

[01:46] <dalek> roast: [TODO FUDGE] fancy quotes work inside qww<> like regular quotes

[01:46] <dalek> roast:

[01:46] <dalek> roast: RT#128304

[01:46] <dalek> roast: review: https://github.com/perl6/roast/commit/b7d827907a

[01:46] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128304

[06:59] <dalek> rakudo/nom: 3625369 | (Zoffix Znet)++ | src/core/Any-iterable-methods.pm:

[06:59] <dalek> rakudo/nom: min/max on Failure must fail, not return ±Inf

[06:59] <dalek> rakudo/nom:

[06:59] <dalek> rakudo/nom: Fixes RT#128573

[06:59] <dalek> rakudo/nom:

[06:59] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128573

[06:59] <dalek> rakudo/nom: sortiz++

[06:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/362536920e

[06:59] <dalek> rakudo/nom: d15f626 | lizmat++ | src/core/Any-iterable-methods.pm:

[06:59] <dalek> rakudo/nom: Merge pull request #815 from zoffixznet/fix-Failure-min-max-RT-128573

[06:59] <dalek> rakudo/nom:

[06:59] <dalek> rakudo/nom: min/max on Failure must fail, not return ±Inf

[06:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d15f6266b3

[07:11] <dalek> rakudo/nom: a6c12a7 | lizmat++ | src/core/Any-iterable-methods.pm:

[07:11] <dalek> rakudo/nom: No point in returning a throw

[07:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a6c12a7d88

[07:55] <psch> yay, progress.  now the ClassNotFoundException happens in the guts of the objectweb.asm framework instead of inside the URLClassLoader :|

[08:34] <dalek> rakudo/nom: 4e5c3e8 | lizmat++ | docs/ChangeLog:

[08:34] <dalek> rakudo/nom: Some ChangeLog entries

[08:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4e5c3e88e2

[09:22] <psch> alright, i think i've figured out the problem

[09:22] <psch> (1) class loading happens from parent to child

[09:22] <psch> (2) parent class loaders can't load from their children

[09:23] <psch> (3) the codegen framework gets loaded with a parent of the class loader i'm using to load the to-be-adaptor'd class

[09:23] <psch> which, as i understand it, means, that the class loader that exists inside that framework cannot reach into the class loader that actually knows the class we want to build the adaptor for

[09:24] <psch> soo i probably have to preventively start a new class loader that loads the asm framework, and use that same class loader to load classes that are not in CLASSPATH at application start

[09:34] <[Tux]> This is Rakudo version 2016.06-229-g4e5c3e8 built on MoarVM version 2016.06-9-g8fc21d5

[09:34] <[Tux]> test            15.647

[09:34] <[Tux]> test-t           9.014

[09:34] <[Tux]> csv-parser      16.616

[10:43] <Zoffix> lizmat, so to send a scan of CLA... where would I send it to, would you know? One of the people on http://www.perlfoundation.org/contact_us ?

[10:44] <lizmat> I would send it to Karen, with a CC to Dan

[10:44] <Zoffix> Thanks!

[10:57] <dalek> rakudo/nom: 825d7c8 | lizmat++ | docs/ChangeLog:

[10:57] <dalek> rakudo/nom: Some more ChangeLog entries

[10:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/825d7c82b6

[11:01] <dalek> rakudo/nom: 72d2d69 | lizmat++ | docs/ChangeLog:

[11:01] <dalek> rakudo/nom: We already mentioned adverbed slices

[11:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/72d2d696e9

[12:28] * [Coke] will be in Leeds in a few weeks, if anyone is nearby (pretty sure not. :)

[12:30] <moritz> but at least the pound is cheap :-)

[12:34] <BrokenRobot> Emailed my CLA. Second time a charm, I'm hoping :)

[13:02] <|Tux|> I see some conflict in my logs. Did  my timing post come through today?

[13:02] <nine> |Tux|: it did

[13:03] <nine> 11:34 < [Tux]> test-t           9.014

[13:03] <|Tux|> yep. thnx

[13:14] <dalek> rakudo/nom: c7332c0 | niner++ | src/core/CompUnit/PrecompilationRepository.pm:

[13:14] <dalek> rakudo/nom: Only record a dependency once per precomp file

[13:14] <dalek> rakudo/nom:

[13:14] <dalek> rakudo/nom: If more than one of our dependencies depend on the same dependency, we

[13:14] <dalek> rakudo/nom: recorded this base dependency more than once and also checked it more

[13:14] <dalek> rakudo/nom: than once when loading the precomp file. Filter out those duplicates as

[13:14] <dalek> rakudo/nom: early as possible instead.

[13:14] <dalek> rakudo/nom:

[13:14] <dalek> rakudo/nom: Speeds up loading of complex module hierarchies, e.g. XML::LibXML:

[13:14] <dalek> rakudo/nom: Initial compile: 49s -> 34s

[13:14] <dalek> rakudo/nom: Changing a base module: 39s -> 19s

[13:14] <dalek> rakudo/nom: Loading unmodified: 3s -> 1.9s

[13:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c7332c0c30

[13:14] <[Coke]> https://github.com/perl6/doc/issues/690 - we should probably encourage these two to talk this out. Do we have anything resembling a community manager?

[13:14] <[Coke]> (last 2 comments)

[13:15] <[Coke]> By my reading, it looks like zoffix overreacted.

[13:22] <jnthn> nine: Wow. :)

[13:22] <BrokenRobot> "We need a redesign [...] You may find Stylish useful in the interim"... There's no need for "RIGHT NAOW" and "by all means". I opened the Issue on a project, not "Zoffix's stylistic preferences repository"

[13:22] <BrokenRobot> My ignore button works. I've got nothing to talk out.

[13:25] <perlpilot> communication is hard m'kay

[13:27] <[Coke]> BrokenRobot: be that as it may, there's also no need for your response there.

[13:33] <gfldex> BrokenRobot: please don't close valid github tickets just because you didn't like a response

[13:34] <BrokenRobot> gfldex: I closed it because you said we need a redesign and you told me to use Stylish vis-a-vis the Issue.

[13:34] <AlexDaniel> /o\

[13:35] <BrokenRobot> I've read your response as a slightly politer way of telling me to fuck off with my issue. So I closed it and moved on.

[13:37] <dalek> rakudo/nom: 7830ec3 | lizmat++ | src/core/Array.pm:

[13:37] <dalek> rakudo/nom: Make Array.AT-POS 2x faster for unreified elements

[13:37] <dalek> rakudo/nom:

[13:37] <dalek> rakudo/nom: - and about 1% faster for reified elements

[13:37] <dalek> rakudo/nom: - only have a helper method for creating viviable containers

[13:37] <dalek> rakudo/nom: - don't check anything more than once

[13:37] <dalek> rakudo/nom: - allocate when we need a container (if it happens once, it will happen more)

[13:37] <dalek> rakudo/nom: - 2 allocations fewer for each non-reified element seen

[13:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7830ec3efe

[13:37] <nine> BrokenRobot: did you consider that it was actually not meant the way you read it?

[13:38] <BrokenRobot> nine: yes, that's why my comment was made 45 minutes after I closed the issue. I was considering.

[13:39] <perlpilot> BrokenRobot: was it really just that last sentence that made you think gfldex was telling you to piss off?

[13:39] <BrokenRobot> perlpilot: sure, the rest is valid technical commentary.

[13:39] <gfldex> BrokenRobot: i can assure you that I had no intention to tell you to fuck off

[13:39] <nine> So, it's a simple misunderstanding as they are unfortunately very common in written communications.

[13:41] <perlpilot> BrokenRobot: interesting.  I read it more like "here's something you can do if you want a quick fix"

[13:41] <gfldex> that's why I phrased 'RIGHT NAOW' in lolspeak. It's usually not mean to be understood as literal.

[13:41] <BrokenRobot> OK

[13:43] <AlexDaniel> \o/

[13:44] <perlpilot> gfldex: If your intention was similar to the way I read it, perhaps consider using simple, direct words to that effect next time.  (I don't know if that would help the mitigate communication errors, but it seems like it should)

[13:45] <BrokenRobot> Well, two people other people read it correctly. Obviously the issue was on my end and not how it was written.

[13:48] <perlpilot> BrokenRobot: Any time there's innuendo or "implicit winking" or any other things that would normally be communicated via body language if you were in person, the possibility and probability of misunderstanding goes up if you're only communicating in text.  Moreso if the communication is not real-time-ish (like IRC).  IMHO..

[13:56] <lizmat> m: my @a; for ^1000000 { @a[$_] }; say now - INIT now

[13:56] <camelia> rakudo-moar 7830ec: OUTPUT«1.70064509␤»

[13:56] <lizmat> m: my @a; for ^1000000 -> int $_ { @a[$_] }; say now - INIT now

[13:56] <camelia> rakudo-moar 7830ec: OUTPUT«1.44487401␤»

[13:57] <lizmat> m: say 1.445 / 1.7

[13:57] <camelia> rakudo-moar 7830ec: OUTPUT«0.85␤»

[13:57] <lizmat> ^^^ is there a reason why "for ^10000 {}" isn't equivalent to "for ^10000 -> int $_ {}" ???

[13:59] <lizmat> jnthn timotimo ^^^  ??

[14:02] <BrokenRobot> perlpilot: also https://en.wikipedia.org/wiki/Asperger_syndrome

[14:10] <jnthn> lizmat: Difficult proof.

[14:11] <jnthn> lizmat: Easier to leave it to spesh, I suspet

[14:11] <lizmat> but didn't we special case "for ^1000" already ?

[14:11] <jnthn> Sure

[14:11] <jnthn> But you can't just go transforming stuff based on wishful thinking :P

[14:11] <lizmat> ah, I get you

[14:11] <jnthn> In the case of $_, it's an "is dynamic" iirc

[14:12] <lizmat> its part of the block's signature, duh  :-)

[14:12] <jnthn> Which makes analysis of its usage and later binding a bunch harder

[14:12] <jnthn> Also that, yeah

[14:12] <jnthn> I mean, the analysis for the empty block case is easy, but also not so useful in reality ;)

[14:14] <gfldex> if I use `for ^1000 { .Str }`, will the implicit $_ pop up as part of a signature?

[14:14] <lizmat> m: for ^10 -> int $_ { .Str }

[14:14] <camelia> rakudo-moar 7830ec: ( no output )

[14:14] <lizmat> m: for ^10 -> int $_ { say .Str }

[14:14] <camelia> rakudo-moar 7830ec: OUTPUT«0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[14:16] <gfldex> m: for ^1 { &?BLOCK.signature.perl.say }

[14:16] <camelia> rakudo-moar 7830ec: OUTPUT«:(;; $_? is raw)␤»

[14:27] <jnthn> You don't even have to use $_ for it to be in the signature

[14:28] <gfldex> sneaky little $_

[14:37] <stmuk> 

[14:41] <|Tux|> This is Rakudo version 2016.06-233-g7830ec3 built on MoarVM version 2016.06-9-g8fc21d5

[14:41] <|Tux|> test            15.351

[14:41] <|Tux|> test-t           8.637

[14:41] <|Tux|> csv-parser      16.240

[14:42] <lizmat> looking good  :-)

[14:43] <Ulti> yeah whatever has been touched recently has been impacting

[14:43] * moritz blames lizmat++ and jnthn++

[14:44] <moritz> and possibly nine++ for precomp speedups

[14:44] <|Tux|> can I be so pushy and annoying to ask for renewed attention for https://rt.perl.org/Ticket/Display.html?id=128184 RT#128184 again please?

[14:44] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128184

[14:57] <gfldex> m: grammar G { rule TOP { <r> }; rule r { 'abc' } }; G.^methods>>.say

[14:57] <camelia> rakudo-moar 7830ec: OUTPUT«rule TOP { <r> }␤rule r { 'abc' }␤parse␤parsefile␤subparse␤Method 'say' not found for invocant of class 'NQPRoutine'␤  in block <unit> at <tmp> line 1␤␤»

[14:57] <gfldex> m: grammar G { rule TOP { <r> }; rule r { 'abc' } }; say G.^methods;

[14:57] <camelia> rakudo-moar 7830ec: OUTPUT«Method 'gist' not found for invocant of class 'NQPRoutine'␤  in block <unit> at <tmp> line 1␤␤»

[14:57] <gfldex> m: grammar G { rule TOP { <r> }; rule r { 'abc' } }; say G.^methods>>.perl;

[14:57] <camelia> rakudo-moar 7830ec: OUTPUT«Method 'perl' not found for invocant of class 'NQPRoutine'␤  in block <unit> at <tmp> line 1␤␤»

[14:57] <gfldex> m: grammar G { rule TOP { <r> }; rule r { 'abc' } }; say G.^methods;

[14:57] <camelia> rakudo-moar 7830ec: OUTPUT«Method 'gist' not found for invocant of class 'NQPRoutine'␤  in block <unit> at <tmp> line 1␤␤»

[14:58] <gfldex> m: grammar G { rule TOP { <r> }; rule r { 'abc' } }; G.^methods>>.?say

[14:58] <camelia> rakudo-moar 7830ec: OUTPUT«rule TOP { <r> }␤rule r { 'abc' }␤parse␤parsefile␤subparse␤Method 'dispatch:<.?>' not found for invocant of class 'NQPRoutine'␤  in block <unit> at <tmp> line 1␤␤»

[14:58] <gfldex> m: grammar G { rule TOP { <r> }; rule r { 'abc' } }; G.^methods>>.say

[14:58] <camelia> rakudo-moar 7830ec: OUTPUT«rule TOP { <r> }␤rule r { 'abc' }␤parse␤parsefile␤subparse␤Method 'say' not found for invocant of class 'NQPRoutine'␤  in block <unit> at <tmp> line 1␤␤»

[15:02] <dalek> rakudo/nom: 0941d0f | lizmat++ | src/core/Array.pm:

[15:02] <dalek> rakudo/nom: Array.ASSIGN-POS 4x faster for unreified elements

[15:02] <dalek> rakudo/nom:

[15:02] <dalek> rakudo/nom: - and 10% faster for reified elements

[15:02] <dalek> rakudo/nom: - drop the SLOW-PATH altogether

[15:02] <dalek> rakudo/nom: - don't allocate unless we must

[15:02] <dalek> rakudo/nom: - 7 allocations less per assignment for unreified

[15:02] <dalek> rakudo/nom: - 1 allocation less for assignment to reified

[15:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0941d0fb9c

[15:04] <lizmat> m: my @a; for ^1000 { @a[$_] = 1 }  # example of assignment to unreified elems

[15:04] <camelia> rakudo-moar 7830ec: ( no output )

[15:04] <timotimo> that's amazing

[15:04] <timotimo> that'll really be worth something for a whole lot of code

[15:04] <lizmat> yeah, thought so too  :-)

[15:05] * lizmat hopes someone will make a Rakudo * for the next release

[15:24] <[Coke]> hey, someone had mentioned possibly moving our rakudo html profile page to angular 2 - are you still thinking of that, because I have to learn some Angular 2 for work, and this would be a great learning project. I'm going to start hacking on it, but won't mind if someone beats me to a finished product.

[15:24] <stmuk> lizmat: I was planning to unless someone else gets there 1st!

[15:25] <[Coke]> ++stmuk!

[15:25] <stmuk> also I have a RPI3 and was thinking of releasing binaries for that as well

[15:25] <BrokenRobot> [Coke]: that was me. Go for it. I've not started anything yet

[15:26] <BrokenRobot> And for the thinking part. I kinda want to go through the ticket queue first

[15:26] <BrokenRobot> Only 15% done in the last weekend, so it'll take me a while.

[15:28] <lizmat> ++stmuk

[15:28] <lizmat> afk&

[15:28] <BrokenRobot> And I want to finish the release tool. And hack on some tickets. Plenty of work.

[15:29] <[Coke]> BrokenRobot++ # ticket maintenance.

[15:29] <[Coke]> you can only do so much of that for so long. :)

[15:31] <timotimo> <3

[16:02] <AlexDaniel> hmm how interesting

[16:03] <AlexDaniel> sometimes this link returns 404: https://github.com/perl6/doc/issues/693

[16:09] <[Coke]> Versioning_and_Authership (typo)

[16:09] <[Coke]> not that that impacts the 404

[16:10] <AlexDaniel> [Coke]: I mean, github itself returns 404

[16:11] <AlexDaniel> not anymore! Seems like it had to propagate through their servers or something

[16:11] <AlexDaniel> I wonder if you can observe the same problem on any other newly created issue

[16:26] <geekosaur> if you can access fast enough, you should be able to reproduce something similar on any web plant backed by a CDN. networks aren't instantaneous over large distances.

[16:37] <tbrowder> I need to talk to someone about pod tables.  My proposed fix will involve extensive changes to rakudo/src/Perl6/Pod.nqp, and I think my upcoming PR should probably become a branch off nom for more inspection and testing by others.

[16:50] <gfldex> tbrowder: the Pod stuff was written many years ago bei Damian, who doesn't frequent this channel. You may have to talk to yourself.

[16:50] <gfldex> tbrowder: I can help you with testing if I got the time to spare when you are ready.

[16:52] <gfldex> tbrowder: that's what I use to look at the structure of $=pod https://gist.github.com/gfldex/64e429b8fa9a518e461b7a2dc38f94df

[16:59] <tbrowder> gfldex: thanks for the info and code.  I'll give it a shot and probably have questions later.  Lizmat has been supportive of my effort, as well as ShimmerFairy and Zoffix, so I hope the branch idea will float okay.

[17:01] <tbrowder> gdflex: I assume the '$' chars at the end of each line are newline markers?  And thanks for the offer of help!

[17:05] <AlexDaniel> tbrowder: if I were you I'd probably talk to ShimmerFairy, as that's someone who has been very interested in pod stuff

[17:05] <tbrowder> roger

[17:46] <hoelzro> tbrowder: I spent a good chunk of time in the POD weeds two years ago, if you have questions

[17:47] <hoelzro> ShimmerFairy was working on very nice (and probably necessary) piece of work that essentially amounted to a new part of the language braid for POD

[17:51] <tbrowder> Okay, pod people (gdflex, AlexDaniel, hoelzro, ShimmerFairy, and lizmat) what's the best way to get my changes out for testing?  Any of you able to start a rakudo branch off nom on the github.com/rakudo repo?

[17:51] <[Coke]> you can fork and work there, also.

[17:51] <hoelzro> tbrowder: do you have a fork of rakudo?

[17:51] <[Coke]> that's standard if you don't have commit bits.

[17:51] <[Coke]> if you can't create a fork, you can't commit to the branch, soo.

[17:52] <[Coke]> er.

[17:52] <[Coke]> if you can't create a branch, you can't commit to it, I meant.

[17:55] <gfldex> tbrowder: if you fork on github I can tell github to watch your fork (I think). Should make it easy for me to spot changes.

[17:55] <tbrowder> Yes, I have my own fork and branch, that's how I have done the PRs for nom in the past; but my changes I believe warrant a branch off nom that I can send PRs for and others can then checkout and test the branch.

[17:57] <hoelzro> tbrowder: if you want to have a branch for this, you can always create it on your fork, and still send PRs in from that branch

[17:57] <[Coke]> .ask pmichaud - I thought the SYN were not the spec, why are you opening tickets citing the syn as the source of truth?

[17:57] <yoleaux2> [Coke]: I'll pass your message to pmichaud.

[17:57] <tbrowder> I have a fork on github and a local clone of the fork, but my PRs so for have been for changes to nom.

[17:58] <hoelzro> or you're saying you want to merge those changes into a branch on rakudo/rakudo until they're ready for nom?

[17:58] <[Coke]> If they're not ready for merging, why not keep them in a fork?

[18:00] <tbrowder> hoelzro: that's what I'm saying. The changes I believe are too extensive for merging to nom in one PR without others testing it which they can with a nom branch.

[18:01] <hoelzro> tbrowder: if people want to test your changes, they can always pull from your repo

[18:01] <tbrowder> Then we can fiddle with that branch until all are happy.

[18:02] <hoelzro> the disadvantage of having those changes hanging off of a branch on rakudo/rakudo is you would constantly need someone with a commit bit to merge them to that POD staging branch; it may impede your progress

[18:02] <hoelzro> you can still submit PRs against your own repo

[18:02] <hoelzro> and we can all review them there

[18:03] <tbrowder> Well I am at that point with normal PRs. Someone is more likely to accept a PR for a branch than for head I should think.

[18:04] <gfldex> tbrowder: I would need the name of the branch to test against

[18:15] <timotimo> i'm annoyed at github for not showing recently active branches prominently at all on the repository page

[18:15] <nine> It somehow looks like I need to get rid of the "no precomp after changing the repo chain" rule to make custom repos work for real.

[18:16] <hoelzro> timotimo: same

[18:20] <BrokenRobot> They're just a click away: https://github.com/rakudo/rakudo/branches

[18:20] <tbrowder> gdflex: of course, it is in my (and our) best interest to advertise it

[18:22] <timotimo> BrokenRobot: i'd like for the "branches" tab to show if the repo has active branches or if it's a one-branch repo, like a big portion of repos are

[18:28] <hoelzro> timotimo: we could probably easily write a tool to display that information; it would be nice if GH did it themselves =/

[18:47] <dalek> roast: 78ccae4 | (Zoffix Znet)++ | S03-operators/minmax.t:

[18:47] <dalek> roast: Unfudge min/max with 1-arg tests

[18:47] <dalek> roast:

[18:47] <dalek> roast: RT#125334

[18:47] <dalek> roast: RT#128573

[18:47] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125334

[18:47] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128573

[18:47] <dalek> roast: review: https://github.com/perl6/roast/commit/78ccae4548

[18:49] <[Coke]> i'm not going to merge a PR from a fork into a branch.

[18:49] <[Coke]> what would the point be?

[18:50] <[Coke]> if you're still doing active developmnt on it, do it in your fork. Until you have collaborators who have commit bits, I see no point in putting into rakudo/rakudo

[18:50] <[Coke]> and even then, you can collaborate in your fork.

[19:08] <tbrowder> Okey doke.

[19:13] <[Coke]> we are historically bad about reviewing submissions, so keep asking if you feel your work isn't getting reviewed in a timely fashion.

[19:14] <[Coke]> I know we've burnt some people out that way.

[19:15] <[Coke]> putting the angular2 stuff here: https://github.com/coke/perl6-profiler-html - my goal is to have this project generate a packed html file that we can then include in NQP.

[19:15] <[Coke]> might even do the packing part first before an angular 2 conversion.

[19:18] <nine> [Coke]: if I were to do a new UI for the profiler, I'd actually make it run on top of a lightweight Perl 6 server. Our current UI cannot cope with large profiles (which values of large that are actually still small)

[19:19] <nine> Performance could be much better if we only give the UI the data that's actually necessary for display and have a simple way for it to request more.

[19:20] <hoelzro> indeed; a few reminders a day wouldn't be a bad idea, considering how many timezones we're stretched across

[19:21] <perlpilot> nine: +1

[19:21] <[Coke]> nine: I'm trying to fix the UI so it -can- run with large profiles

[19:22] <nine> [Coke]: I though browsers were already struggling with decoding the multi megabyte JSON dumps?

[19:22] <nine> [Coke]: anyway if you know a way, go for it! :)

[19:23] <[Coke]> My goal here is to improve performance. regardless of where the data is coming from, we're still going to have some giant HTML page that we have to maintain.

[19:24] <[Coke]> so if I go through this and someone changes the datasource to come from an ajax call to a local server, that's fine. we'll still have a nice maintainable app-in-a-page

[19:33] <[Coke]> regarding the template, it might be nice if we would pass in a flag to set the name of the output file.

[19:33] <[Coke]> ... oh, whoops, digging.

[19:37] <[Coke]> yay, found it. :)

[19:46] <dalek> roast: b777194 | usev6++ | / (6 files):

[19:46] <dalek> roast: Fudge some more failing tests for JVM

[19:46] <dalek> roast: review: https://github.com/perl6/roast/commit/b7771940ba

[19:49] <dalek> roast: c079c6d | usev6++ | S04- (3 files):

[19:49] <dalek> roast: Use 'todo' instead of 'skip' if possible

[19:49] <dalek> roast: review: https://github.com/perl6/roast/commit/c079c6d645

[19:54] <[Coke]> mail to perl6-users asking about a MOAR threading bug.

[19:54] <[Coke]> from mt1957

[19:58] <dalek> rakudo/nom: 2d95de3 | lizmat++ | src/core/Array.pm:

[19:58] <dalek> rakudo/nom: Array.BIND-POS 3.5x faster for non-reified elements

[19:58] <dalek> rakudo/nom:

[19:58] <dalek> rakudo/nom: - and about 5% faster for reified elements

[19:58] <dalek> rakudo/nom: - lose the "ensure allocated"

[19:58] <dalek> rakudo/nom: - allow for Arrays without $!reified set

[19:58] <dalek> rakudo/nom: - actually check for negative indices (didn't before)

[19:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2d95de34e0

[20:04] <dalek> rakudo/nom: 75971f3 | lizmat++ | docs/ChangeLog:

[20:04] <dalek> rakudo/nom: Mention Array.AT-POS/ASSIGN-POS/BIND-POS improvements

[20:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/75971f36cf

[20:05] <lizmat> [Coke]  re perl6 profiles: would be nice if we somehow could slice perpendicular to the current setuo

[20:06] <lizmat> aka, have a page that lists one benchmark over a period of time

[20:06] <lizmat> rather than all benchmarks of a given date

[20:09] <[Coke]> lizmat ? that sounds like more of a benchmark than a profile

[20:10] <[Coke]> If you did want actual profiles over time, that sounds like something that has to go into the benchmark, and we can save not just runtimes, but profiles also

[20:10] <lizmat> ah, oops, I was thinking you were working on the pages as seen on http://www.moarvm.org/measurements/perl6-bench/

[20:10] <[Coke]> I might not be getting your ask though.

[20:10] <lizmat> no, mixup entirely on my side  :-)

[20:10] <[Coke]> no, like ./perl6 --profile -e '...'

[20:10] <lizmat> yeah, duh  :-)

[20:36] <dalek> rakudo/nom: 371b934 | lizmat++ | src/core/Array.pm:

[20:36] <dalek> rakudo/nom: Oops, forgot to add a type smiley

[20:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/371b934b2d

[21:26] <gfldex> m: sub factory(&before, &after){ return f(){ before(); say 'oi‽'; after(); } }; my %h = one => factory({say 'hello'}, {say 'baby')};

[21:26] <camelia> rakudo-moar 371b93: OUTPUT«===SORRY!===␤Function 'say' needs parens to avoid gobbling block␤at <tmp>:1␤------>  }; my %h = one => factory({say 'hello'}⏏, {say 'baby')};␤Missing block (apparently claimed by 'say')␤at <tmp>:1␤------> ; my %h = one => facto…»

[21:27] <gfldex> m: sub factory(&before, &after){ return f(){ before(); say 'oi‽'; after(); } }; my %h = one => factory({say('hello')}, {say('baby')};

[21:27] <camelia> rakudo-moar 371b93: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' ␤at <tmp>:1␤------> > factory({say('hello')}, {say('baby')};⏏<EOL>␤    expecting any of:␤        argument list␤»

[21:27] <gfldex> m: sub factory(&before, &after){ return f(){ before(); say 'oi‽'; after(); } }; my %h = one => factory({say('hello')}, {say('baby')});

[21:27] <camelia> rakudo-moar 371b93: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    f used at line 1␤␤»

[21:27] <gfldex> m: sub factory(&before, &after){ return sub { before(); say 'oi‽'; after(); } }; my %h = one => factory({say('hello')}, {say('baby')});

[21:27] <camelia> rakudo-moar 371b93: ( no output )

[21:27] <gfldex> m: sub factory(&before, &after){ return sub { before(); say 'oi‽'; after(); } }; my %h = one => factory({say('hello')}, {say('baby')}); %h<one>();

[21:27] <camelia> rakudo-moar 371b93: OUTPUT«hello␤oi‽␤baby␤»

[21:43] <Ulti> https://gist.github.com/MattOates/c2e19950f46d1a1c241a  this is looking good

[21:55] <dalek> rakudo/nom: ad9103c | (Daniel Green)++ | docs/ChangeLog:

[21:55] <dalek> rakudo/nom: Add IO::[Path,Handle].mode to Changelog

[21:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ad9103c972

[21:55] <dalek> rakudo/nom: 303e77f | lizmat++ | docs/ChangeLog:

[21:55] <dalek> rakudo/nom: Merge pull request #825 from MasterDuke17/nom

[21:55] <dalek> rakudo/nom:

[21:55] <dalek> rakudo/nom: Add IO::[Path,Handle].mode to Changelog

[21:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/303e77f610

[21:56] <gfldex> m: my $endings = any <.tar.gz .tar.xz>; say 'file.tar.gz'.split($endings) if 'file.tar.gz'.ends-with(any(<.tar.gz .tar.xz>));

[21:56] <camelia> rakudo-moar 371b93: OUTPUT«any((file ), (file.tar.gz))␤»

[22:04] <lizmat> m: use nqp; my $l := nqp::list(1,2,3,4); nqp::setelems($l,2); dd $l; nqp::bindpos($l,4,42); dd $l  # jnthn, is this expected behaviour of nqp::setelems?

[22:04] <camelia> rakudo-moar 371b93: OUTPUT«(1, 2)␤(1, 2, 3, 4, 42)␤»

[22:15] <lizmat> good night, #perl6-dev

[22:15] <Zoffix> night

[22:34] <dalek> roast: 9236d81 | (Zoffix Znet)++ | S04-statements/repeat.t:

[22:34] <dalek> roast: [TODO FUDGE] repeat inside sub inside a loop executes

[22:34] <dalek> roast:

[22:34] <dalek> roast: ...even when condition is false.

[22:34] <dalek> roast:

[22:34] <dalek> roast: RT#128596

[22:34] <dalek> roast: review: https://github.com/perl6/roast/commit/9236d81b3e

[22:34] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128596

[23:53] <Zoffix> Just noticed: passing TODOs inside of subtests don't fail the run. Don't show up in the "TODOs passed" at the end or anything at all

[23:54] <Zoffix> Hum, but apparently only if there are no todos in the non-subtest areas

[23:55] <[Coke]> ok, https://github.com/coke/perl6-profiler-html now can run a perl6 sample program, extract the rawData for the JSON, "build" a template from source (this is just "copy the old template we already had" right now), insert the new data into the new template, then you can run that. so right now, a really complicated way to just get the existing template back.

[23:55] <Zoffix> m: https://gist.github.com/zoffixznet/d903e0add1e70aea0782edd6253eaf78

[23:55] <camelia> rakudo-moar 303e77: OUTPUT«1..2␤    1..1␤    ok 1 - # TODO foo␤ok 1 - meow␤not ok 2 - # TODO bar␤␤# Failed test at <tmp> line 11␤»

[23:55] <Zoffix> run that with prove -e 'perl6' -vlr   you won't get any TODO PASSED messages, but change the last test to succeed and you'll get a message that 2 TODOs passed

[23:56] <[Coke]> but with this, I can now start splitting up the original HTML source into chunks, or add a build step that minifies the html, etc.

[23:56] <Zoffix> Oh, '2' is the number of the test
