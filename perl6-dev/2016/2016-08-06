[00:00] <dalek> roast: 2ab4fd0 | TimToady++ | S04-statements/while.t:

[00:00] <dalek> roast: tests incorrectly assume loop returns values

[00:00] <dalek> roast:

[00:00] <dalek> roast: Loops at statementlist level should always sink themselves.  The 'loop'

[00:00] <dalek> roast: statement was doing this incorrectly, so we didn't notice these tests

[00:00] <dalek> roast: were wrong.

[00:00] <dalek> roast: review: https://github.com/perl6/roast/commit/2ab4fd0c3c

[00:02] <dalek> rakudo/nom: 589061e | TimToady++ | src/Perl6/Actions.nqp:

[00:02] <dalek> rakudo/nom: loop and repeat not properly self-sinking

[00:02] <dalek> rakudo/nom:

[00:02] <dalek> rakudo/nom: Loops at statementlist level should be self-sinking by default.

[00:02] <dalek> rakudo/nom: The loop and repeat forms of loop were not doing this correctly.

[00:02] <dalek> rakudo/nom: Fixes RT #127563 and RT #128596.

[00:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/589061eac1

[00:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127563

[00:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128596

[00:06] <dalek> roast: fea5672 | TimToady++ | S04-statements/repeat.t:

[00:06] <dalek> roast: untodo repeat test for RT #128596

[00:06] <dalek> roast: review: https://github.com/perl6/roast/commit/fea5672c32

[00:06] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128596

[00:15] <Zoffix> Interesting this seems to hang when you add --target=parse:    perl6 --target=parse -e 'multi sub infix:<+> (Int:D $a, Int:D $b, :$foo) {say "meow <$foo>"}; say 42 + 1 :foo<42>;'

[00:16] <dalek> roast: cbbff3b | TimToady++ | S04-statements/repeat.t:

[00:16] <dalek> roast: add test for RT #127563

[00:16] <dalek> roast: review: https://github.com/perl6/roast/commit/cbbff3ba0f

[00:16] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127563

[00:20] <TimToady> m: sub foo($c) { return if $c == 0; { say "B $c"; repeat { say "A $c"; foo($c -1) } while 0 } }; foo(3)

[00:20] <camelia> rakudo-moar 589061: OUTPUT«B 3␤A 3␤B 2␤A 2␤B 1␤A 1␤»

[01:01] <travis-ci> Rakudo build passed. TimToady 'loop and repeat not properly self-sinking

[01:01] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/150189890 https://github.com/rakudo/rakudo/compare/715b822bfd7d...589061eac14f

[01:03] <Zoffix> m: my $sepreg = rx/(<[\\/]>)/; my $filenameW = "c:\\g\\b.mp4"; $filenameW ~~ $sepreg; say $/;

[01:03] <camelia> rakudo-moar 589061: OUTPUT«｢\｣␤ 0 => ｢\｣␤»

[01:03] <Zoffix> m: constant $sepreg = rx/(<[\\/]>)/; my $filenameW = "c:\\g\\b.mp4"; $filenameW ~~ $sepreg; say $/;

[01:03] <camelia> rakudo-moar 589061: OUTPUT«Nil␤»

[01:04] <Zoffix> m: constant sepreg = rx/(<[\\/]>)/; my $filenameW = "c:\\g\\b.mp4"; $filenameW ~~ sepreg; say $/;

[01:04] <camelia> rakudo-moar 589061: OUTPUT«｢\｣␤ 0 => ｢\｣␤»

[01:04] <Zoffix> (that's https://rt.perl.org/Ticket/Display.html?id=127352 )

[02:50] <Zoffix> m: say ∞.Rat ~~ Rat

[02:50] <camelia> rakudo-moar 589061: OUTPUT«False␤»

[02:53] <TimToady> m: say ∞.Rat.nude

[02:53] <camelia> rakudo-moar 589061: OUTPUT«(Inf 0)␤»

[02:53] <TimToady> m: say ∞.Rat.WHAT

[02:53] <camelia> rakudo-moar 589061: OUTPUT«(Rational[Num,Int])␤»

[02:53] <TimToady> uh, I thought we were gonna make that 1/0

[02:54] <Zoffix> m: class Foo { has Rat $.meow }.new: meow => ∞.Rat

[02:54] <camelia> rakudo-moar 589061: OUTPUT«Type check failed in assignment to $!meow; expected Rat but got Rational[Num,Int] (?)␤  in block <unit> at <tmp> line 1␤␤»

[02:54] <Zoffix> m: Duration.new: ∞

[02:54] <camelia> rakudo-moar 589061: OUTPUT«Type check failed in assignment to $!tai; expected Rat but got Rational[Num,Int] (?)␤  in block <unit> at <tmp> line 1␤␤»

[02:54] <TimToady> I missed that change, or I'd probably have vetoed it

[02:56] <Zoffix> bisect: say ∞.Rat.nude

[02:56] <bisectable> Zoffix: For the given starting points (good=2015.12 bad=589061e), exit code on a 'good' revision is 1 (which is bad), bisecting with inverted logic

[02:56] <bisectable> Zoffix: bisect log: https://gist.github.com/5924403201d282e26505251e3850e69a

[02:56] <bisectable> Zoffix: (2016-05-21) https://github.com/rakudo/rakudo/commit/1f3ca64

[02:58] <TimToady> that's the 1/0 semantics, not Inf/0

[03:00] <Zoffix> Looks like this commit introduced the change: https://github.com/rakudo/rakudo/commit/498d0a4ae4572a84f80c0c572632e12017d779f3

[03:02] <TimToady> it seems not so useful if it has to go out-of-band

[03:03] <TimToady> the point of 1/0 was to store Inf/NaN in-band, not out-of-band

[08:55] <[Tux]> This is Rakudo version 2016.07.1-129-g589061e built on MoarVM version 2016.07-16-g85b6537

[08:55] <[Tux]> test            15.273

[08:55] <[Tux]> test-t           7.353

[08:55] <[Tux]> csv-parser      16.181

[12:28] <dalek> rakudo/nom: 146e185 | lizmat++ | src/core/Iterator.pm:

[12:28] <dalek> rakudo/nom: Micro optimize default Iterator methods

[12:28] <dalek> rakudo/nom:

[12:28] <dalek> rakudo/nom: It only leans towards being faster, but since this is such a hot

[12:28] <dalek> rakudo/nom: code path, I hope that it will make a noticeable improvement across

[12:28] <dalek> rakudo/nom: the board.

[12:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/146e185db9

[12:31] <lizmat> afk&

[13:11] <Zoffix> m: ∞.Int

[13:11] <camelia> rakudo-moar 146e18: OUTPUT«Cannot coerce Inf to an Int␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[13:11] <Zoffix> m: ∞.WHAT.say

[13:11] <camelia> rakudo-moar 146e18: OUTPUT«(Num)␤»

[13:12] <Zoffix> Yeah, making .Rat fail sounds good ( https://rt.perl.org/Ticket/Display.html?id=128857 )

[13:12] <Zoffix> And emails to [email@hidden.address] again don't show up on RT ticket itself :/

[13:14] <Zoffix> m: say Inf.Rat.Num

[13:14] <camelia> rakudo-moar 146e18: OUTPUT«Inf␤»

[13:15] <Zoffix> hmm ¯\_(ツ)_/¯

[13:17] <arnsholt> m: say Inf.Rat # ?

[13:17] <camelia> rakudo-moar 146e18: OUTPUT«Inf␤»

[13:18] <arnsholt> m: say Inf.Rat.nude # ?

[13:18] <camelia> rakudo-moar 146e18: OUTPUT«(Inf 0)␤»

[16:52] <b2gills> https://github.com/rakudo/rakudo/commit/498d0a4ae4572a84f80c0c572632e12017d779f3

[16:55] <b2gills> http://irclog.perlgeek.de/perl6-dev/2016-05-26

[16:59] <b2gills> Those are the only links relevant to the current incarnation of Inf.Rat I can find

[19:32] <[Tux]> This is Rakudo version 2016.07.1-130-g146e185 built on MoarVM version 2016.07-16-g85b6537

[19:32] <[Tux]> test            17.173

[19:32] <[Tux]> test-t           8.151

[19:32] <[Tux]> csv-parser      18.235

[19:32] <[Tux]> oops?

[19:37] <[Tux]> This is Rakudo version 2016.07.1-130-g146e185 built on MoarVM version 2016.07-16-g85b6537

[19:37] <[Tux]> test            15.714

[19:37] <[Tux]> test-t           7.360

[19:37] <[Tux]> csv-parser      16.402

[19:37] <[Tux]> weird

[20:00] <dalek> rakudo/nom: c1fdcbb | lizmat++ | src/core/Iterator.pm:

[20:00] <dalek> rakudo/nom: Further simplify default Iterator.sink-all

[20:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c1fdcbbb48

[21:42] <dalek> rakudo/nom: c4892e1 | lizmat++ | src/core/Iterator.pm:

[21:42] <dalek> rakudo/nom: Shave a few % off of Iterator.push-all

[21:42] <dalek> rakudo/nom:

[21:42] <dalek> rakudo/nom: Not a lot, but pretty hot code in iterators

[21:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c4892e1a9b

[21:53] <dalek> rakudo/nom: 0de1391 | lizmat++ | src/core/Iterator.pm:

[21:53] <dalek> rakudo/nom: Shave of a few % off of Iterator.push-until-lazy

[21:53] <dalek> rakudo/nom:

[21:53] <dalek> rakudo/nom: - use the value of the condition check to return in case of lazy

[21:53] <dalek> rakudo/nom:   it does not need to be Mu, a 1 will also work

[21:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0de1391a5a

[21:53] <lizmat> these changes seems to have improved something like my @a = "foo".comb by a few percent

[21:54] <lizmat> afk&

[21:54] <timotimo> neat
