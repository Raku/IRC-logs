[00:15] <dalek> roast: 06f9c5d | TimToady++ | S04-statements/for.t:

[00:15] <dalek> roast: nowadays next does not produce a loop value

[00:15] <dalek> roast: review: https://github.com/perl6/roast/commit/06f9c5d010

[06:03] <JimmyZ> m: my $l = (for ^5 { 41; next if $_ == 2; $_; }); say $l

[06:03] <camelia> rakudo-moar fe90be: OUTPUT¬´WARNINGS for <tmp>:‚ê§Useless use of constant integer 41 in sink context (line 1)‚ê§(0 1 3 4)‚ê§¬ª

[08:54] <[Tux]> CSV tests fail. /me investigates

[08:54] <[Tux]> something with utf8

[08:57] <[Tux]> $!text ~~ m{^ <[ \x00       .. \x7F ]>+ $} or

[08:57] <[Tux]> $!is_utf8   = True;

[08:57] <[Tux]> did the meaning of that regex change?

[09:00] <[Tux]> it is about this field: "a\r\n"

[09:00] <[Tux]> so my guess wouyld be that \r\n is now returned as a single grapheme (even if it is NOT a newline)

[09:01] <geekosaur> behavior of csets changed, not related to \r\n

[09:01] <geekosaur> [13 19:20] <dalek> nqp: 2df0a06 | TimToady++ | src/vm/moar/QAST/QASTRegexCompilerMAST.nqp:

[09:01] <geekosaur> [13 19:20] <dalek> nqp: charrange without :m should avoid ordat/ordfirst

[09:02] <[Tux]> geekosaur, can you summarize the change in one and - and hand me the "fix" to what now fails?

[09:02] <[Tux]> s/one/one line/

[09:04] <geekosaur> Synthetics wrongly look like they're in a character range if we strip the combining information, so instead we'll just use the raw char code, and the synthetic will naturally fall out of the range by virtue of being negative.

[09:05] <geekosaur> I do not have a fix, I'm reporting that something happened, not that I understood the details and can tell you exactly how it relates to things

[09:06] <geekosaur> that said, that description doesn't seem like it should affect this, unless somehow it was integrating the \r and \n in the charrange into a synthetic newline...

[09:07] <[Tux]> This is Rakudo version 2016.07.1-181-gfe90be0 built on MoarVM version 2016.07-18-g2f269d8

[09:07] <[Tux]> csv-ip5xs       10.143

[09:07] <[Tux]> test            16.156

[09:07] <[Tux]> test-t           7.433

[09:07] <[Tux]> csv-parser      16.624

[09:09] <geekosaur> alternately the change doesn't work with non-synthetic nonprintables for some reason...

[10:10] <dalek> nqp/no-eval: b25a452 | (Pawel Murias)++ | src/vm/js/Compiler.nqp:

[10:10] <dalek> nqp/no-eval: [js] Don't emit the setting setup code.

[10:10] <dalek> nqp/no-eval: review: https://github.com/perl6/nqp/commit/b25a45271d

[10:10] <dalek> nqp/no-eval: b307758 | (Pawel Murias)++ | src/vm/js/ (2 files):

[10:10] <dalek> nqp/no-eval: [js] Load modules using a hacked in module loader rather then special casing QAST nodes.

[10:10] <dalek> nqp/no-eval: review: https://github.com/perl6/nqp/commit/b307758c41

[10:10] <dalek> nqp/no-eval: aa27971 | (Pawel Murias)++ | src/vm/js/Compiler.nqp:

[10:11] <dalek> nqp/no-eval: [js] Remove the old way of loading in the setting.

[10:11] <dalek> nqp/no-eval: review: https://github.com/perl6/nqp/commit/aa27971103

[10:11] <dalek> nqp/no-eval: 6a01f6f | (Pawel Murias)++ | src/vm/js/Compiler.nqp:

[10:11] <dalek> nqp/no-eval: [js] Remove useless check.

[10:11] <dalek> nqp/no-eval: review: https://github.com/perl6/nqp/commit/6a01f6f685

[10:11] <dalek> nqp/no-eval: f093174 | (Pawel Murias)++ | src/vm/js/ (2 files):

[10:11] <dalek> nqp/no-eval: [js] Stop specially marking symbols from setting.

[10:16] <dalek> nqp/no-eval: 02f9804 | (Pawel Murias)++ | src/vm/js/Compiler.nqp:

[10:16] <dalek> nqp/no-eval: [js] Stop special casing forceouterctx in post_deserialize.

[10:16] <dalek> nqp/no-eval: review: https://github.com/perl6/nqp/commit/02f9804417

[13:31] <dalek> rakudo/nom: 191dc0a | lizmat++ | src/core/Array.pm:

[13:31] <dalek> rakudo/nom: Fix my @a; @a.splice(0,0,42)

[13:31] <dalek> rakudo/nom:

[13:31] <dalek> rakudo/nom: As noted by masak++ on

[13:31] <dalek> rakudo/nom:

[13:31] <dalek> rakudo/nom:   http://irclog.perlgeek.de/perl6-dev/2016-08-13#i_13017831

[13:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/191dc0a715

[14:09] <MasterDuke> while there are some @LARRY here, i've been looking at RT #126264 on and off for a while, but i'm not finding it quite as straightforward as i first thought it would be

[14:09] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126264

[14:09] <MasterDuke> suggesting 'EVAL' for 'eval' happens because EVAL is a function, but BEGIN is a phaser

[14:12] <MasterDuke> would it be terrible to add all the phasers as things to compare the undeclared routine against?

[14:15] <dalek> rakudo/nom: 6d97bad | lizmat++ | src/core/Rakudo/Internals.pm:

[14:15] <dalek> rakudo/nom: Introduce MappyIterator-values class

[14:15] <dalek> rakudo/nom:

[14:15] <dalek> rakudo/nom: General purpose iterator class that returns the values of a hash.

[14:15] <dalek> rakudo/nom: To be used in Map, Baggy and typed hashes.

[14:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6d97bad13f

[14:15] <dalek> rakudo/nom: 9a495d4 | lizmat++ | src/core/ (3 files):

[14:15] <dalek> rakudo/nom: Use the MappyIterator-values class where we can

[14:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9a495d4986

[14:15] <lizmat> MasterDuke: if the unfound string is allcaps, that would make sense, I think

[14:16] <lizmat> MasterDuke: not so sure otherwise

[14:17] <MasterDuke> lizmat: well, the use case in the ticket is the user writing something lowercase that should be upper

[14:17] <MasterDuke> e.g., begin instead of BEGIN

[14:17] <lizmat> hmmmm

[14:18] <lizmat> well, I guess by the time we find we have an error, we might as well add the extra overhead of checking all the phasers

[14:18] <lizmat> MasterDuke: consider me convinced

[14:20] <MasterDuke> lizmat: cool, i'll try to figure that out. is there any sort of built-in datastructure that has all the phasers, or will i have to hardcode a list?

[14:22] <lizmat> not that I know

[14:22] <lizmat> perhaps a Block.possible-phasers method would be nice to have

[14:23] <lizmat> that would return <BEGIN END ENTER LEAVE FIRST LAST NEXT  etc...

[14:24] <lizmat> the actual list can be found it src/Perl6/Grammar, line 1622 and following

[14:24] <lizmat> I *think* we can actually remove COMPOSE there

[14:25] <lizmat> m: COMPOSE my $a = 42; say $a   # doesn't seem to do a lot

[14:25] <camelia> rakudo-moar 191dc0: OUTPUT¬´(Any)‚ê§¬ª

[14:36] <lizmat> afk&  # let's see if I can still ride a bicycle

[14:39] <Zoffix> * three hours later * https://batorego.files.wordpress.com/2007/09/bandages.jpg

[14:40] <MasterDuke> lizmat: ha, i was scouring Block, Calleable, etc looking for something exactly like that (.possible-phasers)

[14:48] <lizmat> MasterDuke: just realized, it should probably be Mu.possible-phasers

[14:48] <lizmat> as BEGIN / END are not tied to a block, e.g.

[14:49] <lizmat> really afk&

[15:55] <Zoffix> 0.o  strangest error ever:   Variable '$c' is not declared  at blah blah ------> sub prep-commit (‚èè$c) {

[15:58] <Zoffix> And using $^c in the body instead gives Placeholder variable $^c may not be used here because the surrounding block takes no signature

[16:00] <Zoffix> oh gee

[16:02] <Zoffix> m: my $out = qq:to/END/;‚ê§blah‚ê§END;‚ê§for ^10 { my $x = 'just some random code' }‚ê§for ^10 { my $x = 'moar random code' }‚ê§for ^10 { my $x = 'even moar random code' }‚ê§‚ê§sub prep-commit ($c) {}

[16:02] <camelia> rakudo-moar 9a495d: OUTPUT¬´===SORRY!=== Error while compiling <tmp>‚ê§Variable '$c' is not declared‚ê§at <tmp>:8‚ê§------> sub prep-commit (‚èè$c) {}‚ê§¬ª

[16:02] <Zoffix> Supremely LTA error, though I can't think of how to fix that stuff

[16:03] <Zoffix> (hint: it's the spurious semicolon on the closing END, so it never gets found)

[16:33] <gfldex> AlexDaniel: i got a response, unsurprisingly they refuse to help me

[16:34] <gfldex> wc,sorry

[16:35] <dalek> rakudo/nom: 8e5f5e7 | (Zoffix Znet)++ | docs/ChangeLog:

[16:35] <dalek> rakudo/nom: Prep 2016.08 section in ChangeLog

[16:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8e5f5e7554

[16:52] <gfldex> i was under the impression that assinging a lazy list to Array (and thuse @-sigiled countainers) would not explode a lazy list. Was that changed with GLR?

[16:52] <gfldex> m: my @a = gather { say 1; take 1; say 2; take 2; say 3; take 3 };

[16:52] <camelia> rakudo-moar 8e5f5e: OUTPUT¬´1‚ê§2‚ê§3‚ê§¬ª

[16:52] <gfldex> or is that the sink context of the my declarator?

[16:59] <ugexe> m: my @a := cache gather { say 1; take 1; say 2; take 2; say 3; take 3 }; @a[1] # eh

[16:59] <camelia> rakudo-moar 8e5f5e: OUTPUT¬´1‚ê§2‚ê§¬ª

[17:03] <TimToady> m: my @a = lazy gather { say 1; take 1; say 2; take 2; say 3; take 3 }

[17:03] <camelia> rakudo-moar 8e5f5e: ( no output )

[17:04] <TimToady> gather is not assumed to be lazy by default

[17:05] <TimToady> (and my ignores sink context, basically)

[17:05] <ugexe> docs lied: `C<gather/take> generates values lazily`

[17:05] <gfldex> it does, that's why I asked :)

[17:06] <TimToady> it does, but that is not the same thing as "must be lazy or you'll die"

[17:06] <TimToady> array assignment is eager unless "must be lazy"

[17:09] <Zoffix> Rele6sr, reminder

[17:09] <Rele6sr> üé∫üé∫üé∫ Friends! I bear good news! Rakudo's release will happen in just 6 days! Please update the ChangeLog with anything you worked on that should be known to our users. üé∫üé∫üé∫

[17:09] <Rele6sr> üé∫üé∫üé∫ Here are still-open new RT tickets since last release: http://bug.perl6.party/1471194589.html And here is the git log output for commits since last release: http://bug.perl6.party/1471194591.html üé∫üé∫üé∫

[17:09] <Zoffix> :D :D :D \o/

[17:18] <timotimo> fantastic

[17:19] <Zoffix> (FWIW, I'm going over the commits and will add all of 'em to changelog; just check I got all right after I'm done)

[17:24] <mst> right, this should be hilarious

[17:24] <Zoffix> Wat?

[17:24] <mst> time to convince Rakudo's Configure.pl to find the moar and nqp installs

[17:25] <Zoffix> ah

[17:26] <mst> because of COURSE it's going to look in the prefix instead of where I told it to

[17:26] * mst sulks at Configure.pl

[17:32] <travis-ci> Rakudo build failed. Zoffix Znet 'Prep 2016.08 section in ChangeLog'

[17:32] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/152224223 https://github.com/rakudo/rakudo/compare/9a495d4986cc...8e5f5e75546a

[17:32] <Zoffix> your momma

[17:32] <Zoffix> (github timeout error)

[17:39] <mst> right, open sesame hack time

[17:44] <masak> whoa, Rele6sr++

[17:47] <mst> augh

[17:59] * mst upgrades Configure.pl from 'dumpster fire' to 'rolling dumpster fire'

[17:59] <Zoffix> :)

[18:07] <dalek> nqp/no-eval: 512345a | (Pawel Murias)++ | / (6 files):

[18:07] <dalek> nqp/no-eval: [js] Load modules and setting using the ModuleLoader.

[18:07] <dalek> nqp/no-eval: review: https://github.com/perl6/nqp/commit/512345a2de

[18:07] <dalek> nqp/no-eval: a64a92e | (Pawel Murias)++ | src/vm/js/nqp-runtime/runtime.js:

[18:07] <dalek> nqp/no-eval: [js] Remove module loading that doesn't use the ModuleLoader.

[18:07] <dalek> nqp/no-eval: review: https://github.com/perl6/nqp/commit/a64a92ea0b

[18:12] <dalek> rakudo/nom: b548e43 | (Zoffix Znet)++ | docs/ChangeLog:

[18:12] <dalek> rakudo/nom: Populate ChangeLog

[18:12] <dalek> rakudo/nom:

[18:12] <dalek> rakudo/nom: - Includes all Rakudo commits since last release

[18:12] <dalek> rakudo/nom: - NQP/MoarVM fixes that were added to Rakudo as merele a version bump

[18:12] <dalek> rakudo/nom:   might have been missed

[18:12] <dalek> rakudo/nom: - All of jnthn++'s async work is marked "Numerous stability

[18:12] <dalek> rakudo/nom:   improvements in async," because I don't know any better

[18:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b548e437e5

[18:13] <Zoffix> .tell jnthn I wasn't sure what to add to ChangeLog for all of your async work this release. Please improve if needed: https://github.com/rakudo/rakudo/blob/nom/docs/ChangeLog#L19

[18:13] <yoleaux2> Zoffix: I'll pass your message to jnthn.

[18:15] <MasterDuke> lizmat: it's not pretty, but it does work. https://gist.github.com/MasterDuke17/eb8e42371424528d6ca8d8312ad0692b

[18:18] <MasterDuke> Zoffix: "such us on sinks"

[18:20] <dalek> rakudo/nom: ee8a25e | (Zoffix Znet)++ | docs/ChangeLog:

[18:20] <dalek> rakudo/nom: Fix typo MasterDuke++

[18:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ee8a25e886

[18:58] <mst> fuck. I'm not even sure this is going to be sane

[18:58] <mst> half the makefile's going to need redoing

[18:58] * mst sulks

[19:00] <mst> (don't mind me, I know how to deal with this, it's just annoying)

[19:00] <mst> (also I could totally do this an easier way but then I wouldn't end up with patches for you)

[19:01] <arnsholt> mst++ # Fixing the build system

[19:01] <mst> nqp and rakudo both *really* want to be in the same prefix as moar

[19:01] <mst> I disagree :)

[19:05] <arnsholt> Yeah, that seems to be the opinion of most people who do packaging =)

[19:05] <arnsholt> And I can see why, TBH

[19:06] <mst> actually, I figured out a plan B that would fit all of my original requirements and not actually require a separate prefix at all

[19:06] <mst> but I've already put enough effort into getting this to work that that's NOT THE POINT ANYMORE

[19:13] <travis-ci> Rakudo build passed. Zoffix Znet 'Populate ChangeLog

[19:13] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/152236925 https://github.com/rakudo/rakudo/compare/8e5f5e75546a...b548e437e58b

[19:13] <mst> also - having moar, nqp and rakudo as three packages all going into $PREFIX, with a $DESTDIR for staging into, works fine, which is what OS packagers basically need

[19:13] <mst> I'm just being difficult, and having three different $PREFIX

[19:40] <Zoffix> Another example of new Rust's error awesomeness: https://twitter.com/ozkriff/status/764730852509151232

[19:41] <Zoffix> Sounds like an article should be made for Perl 6's errors' awesomeness.

[19:47] <mst> that was why I was asking about examples :P

[19:55] <Zoffix> Yeah, I can't think of anything groundbreaking off the top of my head. Gonna peek into Exception.pm to see what's what.

[19:57] <Zoffix> m: class { has $.foo; method bar { 'foo' ~~ m/$!foo/ } }.new.bar

[19:57] <camelia> rakudo-moar ee8a25: OUTPUT¬´===SORRY!=== Error while compiling <tmp>‚ê§Attribute $!foo not available inside of a regex, since regexes are methods on Cursor.‚ê§Consider storing the attribute in a lexical, and using that in the regex.‚ê§at <tmp>:1‚ê§------> has $.foo; method ba‚Ä¶¬ª

[20:02] <travis-ci> Rakudo build passed. Zoffix Znet 'Fix typo MasterDuke++'

[20:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/152237755 https://github.com/rakudo/rakudo/compare/b548e437e58b...ee8a25e88658

[20:12] <timotimo> "rustacean" is a pretty cool term as far as members of programming language communities go

[20:20] <dalek> nqp/no-eval: 0720516 | (Pawel Murias)++ | src/vm/js/nqp-runtime/deserialization.js:

[20:20] <dalek> nqp/no-eval: [js] Remove dead code.

[20:20] <dalek> nqp/no-eval: review: https://github.com/perl6/nqp/commit/07205168d2

[20:20] <dalek> nqp/no-eval: 21d0ddd | (Pawel Murias)++ | src/vm/js/nqp-runtime/ (4 files):

[20:20] <dalek> nqp/no-eval: [js] Fix style errors found by make js-lint

[20:20] <dalek> nqp/no-eval: review: https://github.com/perl6/nqp/commit/21d0ddd75a

[20:40] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Use the MappyIterator-values class where we can'

[20:40] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/152207115 https://github.com/rakudo/rakudo/compare/191dc0a715ec...9a495d4986cc

[20:40] <buggable> ‚ò¢ [travis build above] Build log missing from at least one job. Check results manually.
