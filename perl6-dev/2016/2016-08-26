[01:19] <travis-ci> Rakudo build passed. lizmat 'Merge pull request #846 from Leont/less5

[01:19] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/154996006 https://github.com/rakudo/rakudo/compare/945b916821b8...9ccd84801fbf

[01:36] <dalek> rakudo/nom: aa1ec6f | (Brock Wilcox)++ | / (2 files):

[01:36] <dalek> rakudo/nom: Dissallow control commands (next, return, etc) in toplevel REPL

[01:36] <dalek> rakudo/nom:

[01:36] <dalek> rakudo/nom: * Catch control usage and show error

[01:36] <dalek> rakudo/nom: * Switch to instance attributes for out-of-band control values

[01:36] <dalek> rakudo/nom: * Merge partial-eval and repl-eval to simplify

[01:36] <dalek> rakudo/nom: * Add to repl tests

[01:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aa1ec6f29d

[01:36] <dalek> rakudo/nom: dc83730 | hoelzro++ | / (2 files):

[01:36] <dalek> rakudo/nom: Merge pull request #847 from awwaiid/repl-no-last

[01:36] <dalek> rakudo/nom:

[01:36] <dalek> rakudo/nom: Dissallow control commands (next, return, etc) in toplevel REPL

[02:55] <travis-ci> Rakudo build passed. Stefan Seifert 'Make Distribution::Path handle native libraries correctly

[02:55] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/155064619 https://github.com/rakudo/rakudo/compare/9ccd84801fbf...6ae6ecbfca26

[03:42] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Fix RT #127803

[03:42] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/155083163 https://github.com/rakudo/rakudo/compare/6ae6ecbfca26...7fa2ba77d438

[03:42] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127803

[04:14] <lizmat> good *, #perl6-dev

[04:14] <lizmat> seems like ./perl6-m --profile -Ilib t/harness6 --fudge --tests-from-file=t/spectest.data will reliably segfault withing 20 seconds  :-(

[04:14] <lizmat> I guess no profile of prove6 anytime soon  :-(

[05:33] <dalek> rakudo/nom: 3113465 | (Brock Wilcox)++ | src/core/REPL.pm:

[05:33] <dalek> rakudo/nom: Temporarily skip REPL completions for jvm

[05:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/31134652a1

[05:33] <dalek> rakudo/nom: 74a445a | lizmat++ | src/core/REPL.pm:

[05:33] <dalek> rakudo/nom: Merge pull request #848 from awwaiid/repl-jvm-no-completions

[05:33] <dalek> rakudo/nom:

[05:33] <dalek> rakudo/nom: Temporarily skip REPL completions for jvm

[05:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/74a445a2bc

[05:35] <dalek> rakudo/nom: 508192f | lizmat++ | src/core/REPL.pm:

[05:35] <dalek> rakudo/nom: Abstract the resetting logic into a sub

[05:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/508192fc80

[06:11] <[TuxCM]> This is Rakudo version 2016.08.1-32-g508192f built on MoarVM version 2016.08

[06:11] <[TuxCM]> csv-ip5xs       10.046

[06:11] <[TuxCM]> test            15.299

[06:11] <[TuxCM]> test-t           7.307

[06:11] <[TuxCM]> csv-parser      16.346

[08:37] <jnthn> lizmat: The SEGV is in some ways the least of the problems. The next one up is that the profiler UI doesn't know how to present data collected from multiple threads so would only give the data from the first one...

[08:38] <lizmat> ah, ok  :-(

[08:40] <nine> jnthn: I'm quite sure now that ab6tract's double free crash is because of multiple threads trying to MVM_string_flatten the same string constant concurrently during creation of hashes.

[08:40] <jnthn> Yeah, that function needs to become immutable really

[08:41] <ab6tract> o/ :)

[08:41] <ab6tract> consolidating the discussion :)

[08:41] <nine> ETOOMANYCHANNELS :)

[09:14] <lizmat> https://gist.github.com/lizmat/1b3c946ae9109e1dfc40ee025abb019f   # where does my $a live in the REPL???

[10:42] <lizmat> jnthn: if I want to know the encoding of a $PIO, how do I get that ?

[10:45] <jnthn> um

[10:45] <jnthn> Not sure if you want, you'd need to keep track of it in the Perl 6 level handle, Ithink

[10:45] <jnthn> *not sure if you can

[10:45] <jnthn> gah :)

[10:51] <lizmat> ok, because:

[10:51] <lizmat> (open "foo", :bin).comb

[10:52] <lizmat> currently gives a Seq of str

[10:52] <jnthn> Arguably it should give an error :)

[10:53] <jnthn> I think we kinda let you pretend things opened with :bin can be read as strings though :S

[12:01] <dalek> rakudo/nom: 87887da | lizmat++ | src/core/IO/Handle.pm:

[12:01] <dalek> rakudo/nom: Make IO::Handle.encoding actually work

[12:01] <dalek> rakudo/nom:

[12:01] <dalek> rakudo/nom: So now you can query the encoding of an IO::Handle.  It will return

[12:01] <dalek> rakudo/nom: "bin" if you specified :bin when opening the handle.

[12:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/87887daa55

[12:09] <cygx> o/

[12:09] <cygx> jnthn, lizmat: regarding :bin, cf https://github.com/rakudo/rakudo/pull/645 and https://github.com/MoarVM/MoarVM/pull/319

[12:10] <cygx> the former was a sort of 'minimal viable product' that uses latin1 to fake proper binary handling

[12:20] <lizmat> hmmm... krunen might be interested in that as well

[12:21] <lizmat> cygx: thanks for the reminder

[12:24] <jnthn> This stuff is sorta on my radar

[12:24] <lizmat> jnthn: how do you feel about mixing in a Binary role into IO::Handle to signify binaryness of the handle ?

[12:24] <krunen> cygx, lizmat: yeah, $fh.read(1)[0] is not very elegant...

[12:24] <jnthn> As discussed yesterday in #moarvm, it's kinda reached the point where a bunch of I/O stuff needs attention

[12:25] <cygx> krunen: it was more about the interface, not the implementation

[12:25] <jnthn> And we'll likely pull nearly all string-based I/O ops out.

[12:25] <cygx> the idea was to allow read/write/seek on any handle (which necessitates invalidating the decode stream)

[12:25] <jnthn> And expose the VM-based decoding stuff for some common encodings

[12:25] <cygx> passing :bin would additionally make .getc/.get/... return bytes/blobs instead of strings

[12:26] <dalek> rakudo/nom: 1a03efe | lizmat++ | src/core/IO/Handle.pm:

[12:26] <dalek> rakudo/nom: Temporary fix for .comb/.split on binary handles

[12:26] <dalek> rakudo/nom:

[12:26] <dalek> rakudo/nom: Make it die for now while jnthn / cygx / krunen work out a better way

[12:26] <dalek> rakudo/nom: to handle all of this.

[12:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1a03efe4e3

[12:26] <jnthn> So essentially MoarVM will just provide binary I/O and we'll pass bytes off to the decoder up at Perl 6 level

[12:26] <jnthn> Note that this should make it *easier* for more folks to contribute since we'll be doing more of it in Perl 6 :)

[12:27] <lizmat> so, please revert the last 2 commits: I see them as stopgaps only

[12:27] <jnthn> A few things are pushing us in this direction. One is the utter fragility of the error handling in async I/O with strings today.

[12:28] <jnthn> The other is that it'll be much easier to replace libuv for sync stuff - fixing the longstanding problems using sync file handles and sockets between threads - when we only have binary I/O to worry about down in the VM.

[12:29] <jnthn> The other goal along with this is to have an encoding/decoding API that others can implement in modules, so that you can use other encodings besides the bundled ones with Perl 6 I/O.

[12:30] <krunen> jnthn, by some wierd coincidence I just suggested a similar thing to lizmat a few minutes ago...

[12:30] <jnthn> Also, having streaming decoders handy and uncoupled from I/O will be nice for implementing streaming protocol stuff, e.g. in HTTP where the headers come in and you want to treat them as ASCII or latin-1, but then decode the body bit by bit as it arrives using something else.

[12:31] <cygx> krunen: well, it is kind of the sane way to do it ;)

[12:31] <jnthn> Pretty much

[12:31] <jnthn> The I/O ops that we have now basically exist because they reflect what was in Parrot, and it was far, far easier to just making existing stuff work than to go doing yet another big design job in the middle of porting. :)

[12:32] <jnthn> *to just make

[12:32] <jnthn> And then cleaning it up never really got near the top of the priority list before now :)

[12:33] <RabidGravy> jnthn, so much that - real hoop of fire jumping in HTTP::UserAgent to achieve that

[12:33] <RabidGravy> (switch decoding methods mid-stream that is)

[12:34] <jnthn> fwiw, I already have Moar/NQP/Rakudo branches exploring doing this kind of approach for async socket I/O :)

[12:35] <jnthn> (And yes, help is welcome :))

[12:43] <krunen> I'll help

[12:45] <jnthn> OK. The branches in question for exposing the existing decode stream stuff are expose-decode-stream in MoarVM and NQP

[12:48] <ShimmerFairy> jnthn: if binary decoding is passed off to a higher level, where would "text mode" fit in? Is it something an external module would handle, or could the lower levels provide an "alternate" binary stream of the file opened in text mode?

[12:49] <ShimmerFairy> (I only ask because I recently ran into a situation where I had to ponder the difference between C-level binary and text modes)

[12:52] <cygx> ShimmerFairy: we don't use C stdio, so as far as we're concerned, there's no such thing

[12:52] <jnthn> cygx++ # more succinct answer than I could come up with :)

[12:52] <ShimmerFairy> cygx: really? does libuv or whatever just make up its own assembler-level IO then?

[12:54] <jnthn> It just calls the same level of OS APIs that a stdio implementation is done in terms of.

[12:54] <ShimmerFairy> right, "assembler" might have been too specific a word choice :)

[12:54] <jnthn> Well, sorta kinda, 'cus libuv is mostly dealing in the async APIs.

[12:55] * cygx throws in the relevant  term 'POSIX'

[12:56] <ShimmerFairy> that situation, btw, was handling GNU checksum files, where they come with a mode flag for each listed file. And P6's text mode isn't the same as C's, so it seems like something you'd have to do manually.

[12:58] <cygx> ShimmerFairy: also note that on POSIX systems, text and binary mode are the same

[12:58] <cygx> "The character 'b' shall have no effect, but is allowed for ISO C standard conformance."

[12:59] <ShimmerFairy> cygx: exactly. GNU's md5sum-style utils use text mode by default on such systems. (But of course that stupidly introduces a problem with Linux->Windows transfer if you're not careful...)

[13:00] <ShimmerFairy> cygx: my problem atm is that Windows' text mode is practically undocumented. I know of the transforms, but critically not if it's encoding dependent. That is, is its "\r\n"->"\n" transformation logical or always "\x13\x10" -> "\x10"?

[13:02] <cygx> the winapi supports several text modes (_O_TEXT, _O_WTEXT, _O_U16TEXT, ...)

[13:02] <cygx> not sure how that maps to stdio

[13:04] <ShimmerFairy> All I've found is that the newlines are transformed to single "\n" chars for programmer-land, and it treats ^Z as EOF. But that's all I've found so far, there's really not much info on how it works.

[13:04] <cygx> stdio only deals in _O_TEXT and _O_BINARY

[13:04] <cygx> _setmode vs _set_fmode

[13:05] <cygx> disregard that

[13:05] <cygx> you can pass a ccs=UNICODE/UTF-8/... to fopen

[13:06] <ShimmerFairy> not helping matters is that I'm 110% unfamiliar with Windows :P

[13:13] <cygx> apparently, there's binary, text and translated mode

[13:13] <cygx> text mode does CR-LF translation, tranlated mode additionally special-cases CTRL+Z

[13:13] <ShimmerFairy> interesting

[13:13] <cygx> if unicode IO functions are used, text mode also does unicode-to-multibyte translation

[13:18] <ShimmerFairy> cygx: right. I just wish it was better documented for Windows, since I don't what would happen if I tried to open in text mode on an EBCDIC Windows system. I'd hate to have to assume that files are always ASCII-compatible :P

[13:19] <ShimmerFairy> *don't know

[13:22] <cygx> btw, what's up with the IO role? ALl it does is provide the umask method...

[13:23] <ShimmerFairy> cygx: I find core's roles in general to be nigh-useless, where they could/should be more substantial "interfaces".

[13:29] <ShimmerFairy> e.g. the Positional role does nothing to guarantee the existence of any of the AT-POS family of methods, which feels like an obvious thing.

[13:33] <jnthn> But that'd be vacuously fulfilled anyway

[13:33] <jnthn> Because Any implements AT-POS

[14:07] <hoelzro> lizmat: from what I remember, mys from previous lines live in outer contexts

[14:08] <lizmat> hoelzro: well, they don't show up with OUTERS::.keys  :-(

[14:08] <hoelzro> =/

[14:09] <hoelzro> hmm...it could be that the context used doesn't live in any pseudo stash available to P6

[14:09] <hoelzro> it uses this CTXSAVE thing to save the context at the end of parsing each line

[14:10] <hoelzro> and then it passes that saved context to the call that evals the subsequent line

[14:10] <cygx> shouldn't that be OUTER::MY::.keys?

[14:14] <nine> jnthn: do nqp::objectids survive serialization/deserialization?

[14:15] <dalek> rakudo/nom: 575dda1 | (Zoffix Znet)++ | docs/release_guide.pod:

[14:15] <dalek> rakudo/nom: Add 2016.08.1 to the list of past releases

[14:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/575dda1f74

[14:19] <jnthn> nine: no

[14:50] <awwaiid> lizmat: I wonder if this is related to dynamic vars (definition, then use on another line) not working in the REPL

[14:51] <lizmat> awwaiid: fwiw, I moved the dynamic vars into the start block

[15:30] <gfldex> m: "file-001.fa".succ.say

[15:30] <camelia> rakudo-moar 575dda: OUTPUT«file-002.fa␤»

[16:23] <cygx> IO frontend redesign, RFC: https://gist.github.com/cygx/7d792e09b182a1a79b1dac82663dfddb

[16:35] <[Coke]> RT: 1369; @LARRY: 18; BOOTSTRAP: 4; BUG: 491; BUILD: 11; CONC: 50; DOCS: 1; GLR: 5; IO: 15; JVM: 69; LTA: 119; MATH: 6; NATIVECALL: 15; NEW: 848; NYI: 91; OO: 7; OSX: 6; PERF: 26; POD: 18; PRECOMP: 12; REGEX: 34; REPL: 4; RFC: 54; SEGV: 37; SPESH: 1; STAR: 6; TESTNEEDED: 34; TODO: 10; UNI: 30; UNTAGGED: 288; WEIRD: 3

[16:44] <[Coke]> I wonder if a monthly challenge would help. like, "get under 1300 tickets before the next release"

[17:00] <hoelzro> is there a way to unwind the stack in a CATCH handler other than returning from that handler?

[17:19] <cygx> .oO( wrap the whole thing in a loop and call last as appropriate... )

[17:41] <jnthn> hoelzro: No; CATCH handlers are (by design) run on the stack top, so you've got the dynamic scope of the thrower in place and so resumable exceptions are dead easy (you just don't unwind after)

[17:45] <cygx> jnthn: if you got a minute, would https://gist.github.com/cygx/7d792e09b182a1a79b1dac82663dfddb mesh with the moarvm-side refactor?

[17:45] <cygx> *would

[18:02] <hoelzro> jnthn: ok, thanks!

[18:04] <hoelzro> awwaiid: I'm wondering if we should slightly modify your change to REPL.pm to call next outside of the CATCH handler to avoid that "return $!control-exception unless $!exception-handled" code

[18:04] <hoelzro> it works great, but it just feels a little "action at a distance" to me

[18:21] <cygx> nine: precompilation leaks filehandles as slurp-rest does not close the file

[18:21] <cygx> cf https://github.com/rakudo/rakudo/blob/nom/src/core/CompUnit/Repository/FileSystem.pm#L62

[18:22] <cygx> should I add a close there, or change slurp-rest?

[18:27] <cygx> perhaps add a :$close parameter to slurp-rest, but with what default?

[18:32] <cygx> probably false, same as .lines

[18:59] <cygx> create-moar-runner.pl no longer does the Right Thing as it checks for $*DISTRO eq 'MSWin32', but minw returns 'mswin32'

[18:59] <cygx> *mine

[19:06] <[Coke]> the least intrusive change would be to add an explicit .close

[19:06] <[Coke]> changing slurp-rest impacts users

[19:06] <[Coke]> cygx: can you open a ticket for that?

[19:06] <[Coke]> (the mswin32 thign)

[19:06] <cygx> [Coke]: I'll send some pull requests shortly

[19:07] <cygx> [Coke]: the change to slurp-rest is non-intrusive is :$close defaults to false

[19:07] <cygx> *if

[19:07] <[Coke]> it's -less- intrusive; but you're changing an already documented method that's part of roast.

[19:08] <[Coke]> (the mswin32 thing could be solved with a $*DISTRO ~~ /i 'MSWIN32' /

[19:08] <[Coke]> er, /:i

[19:09] <cygx> [Coke]: we already rely on distro names being lowercase elsewhere (in particular, Distro.is-win)

[19:16] <awwaiid> hoelzro: yes, I'd love to get rid of that, but so far haven't figured out a way

[19:17] <awwaiid> /go status

[19:28] <hoelzro> awwaiid: I can't try it right now (packing up my whole life =/), but what about setting a flag in CATCH and saying "next if $flag;" outside of the CATCH block?

[19:47] <awwaiid> hoelzro: hmm. ok yeah. or another return flag -- the CATCH is there for catching both repl-eval issues and repl-print issues. Maybe that was a premature merging.

[19:51] <hoelzro|phone> awwaiid: well, I wanted to merge it earlier rather than let it sit and forget about it during my move =)

[19:54] <awwaiid> hoelzro|phone: oh you merged it? I thought I did :) hehe

[19:57] <hoelzro|phone> hehe

[19:58] <awwaiid> hoelzro|phone: ohh, you meant the PR

[19:59] <awwaiid> hoelzro|phone: I was talking about merging the CATCH to cover both repl-eval and repl-print

[19:59] <awwaiid> hoelzro|phone: I very much appreciate the PR merge :)

[20:27] <hoelzro|phone> =)

[20:32] <awwaiid> hoelzro|phone: worked, https://github.com/rakudo/rakudo/pull/852

[20:36] <dalek> rakudo/nom: efd880a | timotimo++ | Configure.pl:

[20:36] <dalek> rakudo/nom: strongly point out surprising behavior of --gen-* options

[20:36] <dalek> rakudo/nom:

[20:36] <dalek> rakudo/nom: nobody would expect any installation to happen just by calling

[20:36] <dalek> rakudo/nom: Configure.pl; much less potential installation into system-wide

[20:36] <dalek> rakudo/nom: directories.

[20:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/efd880af17

[20:37] <dalek> nqp: 98f93df | timotimo++ | Configure.pl:

[20:37] <dalek> nqp: Warn about --gen-moar installing at Configure time

[20:37] <dalek> nqp:

[20:37] <dalek> nqp: You wouldn't expect anything in the system to change

[20:37] <dalek> nqp: just because you're running a Configure.pl script.

[20:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/98f93dfb15

[20:40] <dalek> rakudo/nom: bc187b1 | timotimo++ | README.md:

[20:40] <dalek> rakudo/nom: point out the potential surprise of --gen-* in README as well.

[20:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bc187b1784

[21:29] <hoelzro|phone> awwaiid : awesome, I can maybe look later tonight

[21:39] <dalek> rakudo/nom: ebf34aa | lizmat++ | tools/build/create-moar-runner.pl:

[21:39] <dalek> rakudo/nom: Fix create-moar-runner.pl for Win32

[21:39] <dalek> rakudo/nom:

[21:39] <dalek> rakudo/nom: $*DISTRO always returns lowercase, without whitespace names

[21:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ebf34aa946

[21:53] <dalek> rakudo/nom: ede7c60 | lizmat++ | src/core/CompUnit/Repository/FileSystem.pm:

[21:53] <dalek> rakudo/nom: Make sure we close filehandle after reading

[21:53] <dalek> rakudo/nom:

[21:53] <dalek> rakudo/nom: See http://irclog.perlgeek.de/perl6-dev/2016-08-26#i_13097501

[21:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ede7c60b21

[21:54] <dalek> rakudo/nom: 0f1d039 | lizmat++ | tools/build/create-moar-runner.pl:

[21:54] <dalek> rakudo/nom: Better win32 test

[21:54] <dalek> rakudo/nom:

[21:54] <dalek> rakudo/nom: Plus remove some superstitious parens

[21:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0f1d0394bd

[21:54] <lizmat> good night, #perl6-dev!

[21:54] <timotimo> gnite lizmat!

[21:55] <jdv79> nite

[22:02] <jnthn> 'night, lizmat

[22:02] <dalek> rakudo/nom: 0704970 | lizmat++ | src/core/CompUnit/PrecompilationStore/File.pm:

[22:02] <dalek> rakudo/nom: Implement part of PR 851, cygx++

[22:02] <dalek> rakudo/nom:

[22:02] <dalek> rakudo/nom: Previous commit inadvertenty already implemented the other part.

[22:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0704970289

[22:03] <timotimo> lizmat devs in her sleep o_O

[22:04] <dalek> rakudo/nom: 4efdd94 | cygx++ | src/core/IO/Handle.pm:

[22:04] <dalek> rakudo/nom: Add :close flag to IO::Handle.slurp-rest

[22:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4efdd949df

[22:04] <dalek> rakudo/nom: 763d678 | lizmat++ | src/core/IO/Handle.pm:

[22:04] <dalek> rakudo/nom: Merge pull request #850 from cygx/slurp-rest

[22:04] <dalek> rakudo/nom:

[22:04] <dalek> rakudo/nom: Add :close flag to IO::Handle.slurp-rest

[22:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/763d6787da

[22:05] <dalek> rakudo/nom: 85cbb6d | (Brock Wilcox)++ | src/core/REPL.pm:

[22:05] <dalek> rakudo/nom: Get rid of dynamic variable by moving CATCH

[22:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/85cbb6ddbf

[22:05] <dalek> rakudo/nom: 3a294e9 | lizmat++ | src/core/REPL.pm:

[22:05] <dalek> rakudo/nom: Merge pull request #852 from awwaiid/repl-simplify-catching

[22:05] <dalek> rakudo/nom:

[22:05] <dalek> rakudo/nom: Get rid of dynamic variable by moving CATCH

[22:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3a294e94d6

[22:09] <dalek> rakudo/nom: 6a8278c | lizmat++ | tools/build/create-moar-runner.pl:

[22:09] <dalek> rakudo/nom: Adhere to PR 849, cygx++

[22:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6a8278cd5d

[22:15] <lizmat> really sleep now&
