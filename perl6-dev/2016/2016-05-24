[01:07] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2016/05/24/2016-21-a-quick-one-from-houston/

[06:23] <masak> "Houston, we have a quick one" :)

[06:23] <masak> lizmat++

[06:30] <masak> lizmat: feel better soon!

[09:54] <timotimo> yes, i hope you do get well :)

[10:02] <sno> moritz: did you read http://www.netbsd.org/~sno/talks/nrpm/Cross-Compiling-For-Perl-Hackers-Handout.pdf ?

[10:10] <|Tux|> This is Rakudo version 2016.05-8-gb348f2f built on MoarVM version 2016.05

[10:10] <|Tux|> test            19.529

[10:10] <|Tux|> test-t          12.728

[10:10] <|Tux|> csv-parser      33.484

[10:18] <moritz> sno: no

[10:19] <sno> moritz: I'd really appreciate when you do :)

[10:19] <moritz> sno: I know. My reading list is just long

[10:20] <sno> moritz: I'd like to work on a follow-up presentation and after that (and hopefully your and some others read/review) some patches for MoarVM, NQP & Co. configure stage :)

[10:20] <|Tux|> sno, totally off-topic. do you agree with my https://github.com/perl5-dbi/SQL-Statement/commit/a503418a68fe3817914e57606651999031c1edbb ?

[10:21] <sno> and it will be much easier to talk about the goal when you've read the stuff

[10:22] <sno> |Tux|: looks reasonable - are there tests with multiple statements

[10:22] * |Tux| will do a perl6 presentation on the NLUUG conference Thursday

[10:22] <|Tux|> sno, no tests (yet)

[10:22] <|Tux|> not by me at least

[10:23] <sno> |Tux|: no such change without tests - you know ..., but I really appreciate work on that beast

[10:23] <|Tux|> so much to do, so little time

[10:24] * sno nods

[10:24] * |Tux| promises to add two tests

[10:25] * sno currently plays with router tech and a new web-project and wants Perl6 on IoT (cross compiled) before starting over and do the perl6 modules I miss ...

[10:26] <sno> so yes, much to do - and there is another S::S issue which requires some extra affort ...

[10:26] <timotimo> are IoT devices powerful to satisfy the memory hunger of current moarvm? :S

[10:26] <sno> timotimo: they are

[10:27] <sno> timotimo: they are powerful enough to satisfy the memory hunger of jvm

[10:27] <timotimo> oh

[10:27] <sno> and I managed running perl6-j on such an IoT device

[10:27] <timotimo> that's impressive

[10:28] <sno> but there are many issues in MoarVM, NQP and Rakudo configure and build stage wrt. cross-compiling, and I'd like to improve that

[10:29] <sno> which needs some understanding in the team responsible for reviewing patches and care of infrastructure

[10:29] <timotimo> i see

[10:30] <|Tux|> new 88.pl failure (not a trailing 0):

[10:30] <|Tux|> # expected: Buf.new(61,10,0,56,143,36,56,119,182,81,88,70,88,139,28,119,142,151,108,12,215)

[10:30] <|Tux|> #      got: Buf.new(61,10,0,56,143,36,56,119,182,81,88,70,88,139,28,119,142,151,108,12,215,127)

[10:30] <sno> http://www.netbsd.org/~sno/talks/nrpm/Cross-Compiling-For-Perl-Hackers-Handout.pdf primarily explains the goals and general pitfalls when creating configure/build/install toolchain

[10:30] <sno> and every perl6 hacker is welcome to read it :D

[10:32] <timotimo> i'll keep the tab open for now. right now i'm watching nine++ 's gpw talk

[10:32] <stmuk> timotimo: that was an excellent talk

[10:33] <timotimo> i'm not in the target audience, really, as i already know the basic awesome stuff I::P5 can do

[10:33] <timotimo> not sure if there was anything "new" presented in that talk

[10:34] <|Tux|> do we have longdouble support yet?

[10:34] <timotimo> no, we don't

[10:34] <|Tux|> :(

[10:35] <timotimo> it requires a piece of design for moarvm, as moarvm currently doesn't deal with natives that are bigger than 64 bit

[10:35] <timotimo> and in order to have any long doubles we'd have to have that

[10:35] <timotimo> alternatively, we could have a C library that implements everything you might want to do with long doubles and then use that with nativecall

[10:38] <sno> timotimo: Apr 19 17:26:30 <nine_>	[Sno]: oh I wish I hadn't read your slides. This makes things...more complicated. Makes it harder now to continue living in the "if it works on your system it must be good" bubble :)

[10:38] <timotimo> mhm

[10:44] <sno> timotimo: beside different cpu architectures, biggest problem is the assumption of "compile once, run anywhere" in non-native code which will fail heavily when storing environment (PATH's, available 3rd party tools, ...)

[10:45] <timotimo> ah, yes

[10:46] <stmuk> sno: are you the maintainer of pkgsrc moarvm?

[10:46] <sno> stmuk: nope, but maybe I work on that at summer

[10:48] <stmuk> ok

[10:48] <sno> timotimo: given the situation of packaging (some Debian folks are very restrictive then ...), assumption of tools (which is the right location for perl6 to invoke to run post-processing stuff, which jvm to use, which library path during compile compared to installed package)

[10:49] <sno> stmuk: I worked last 2 years with open-embedded, not that much time for pkgsrc :(

[10:49] <sno> but I intend to return :D

[10:54] <stmuk> sno: I was experimenting with rakudo pkgsrc wip and it compiles with a version increase but I also noticed nqp test failures (didn't test on NetBSD)

[10:55] <stmuk> I need to give some proper feedback

[10:56] <sno> stmuk: pkgsrc wip is primarily maintained by [email@hidden.address] and has another feedback channel than pkgsrc

[10:57] <sno> I intend to fix the tooling of moar,nqp,rakudo .... and then do proper recipes for pkgsrc (native, not wip) and open-embedded

[10:58] <stmuk> sno: I was actually using a mix of pkgsrc proper and pkgsrc wip (looked like someone was half way through doing it and was on pause)

[10:58] <sno> since more and more tasks are in IoT/embedded market, I need full running perl6 on all those platforms before starting work with and in perl6

[11:02] <stmuk> what arch?

[11:04] <sno> several - last arch was ARM (not ARM64) with multi-media features, previous was an Octeon (64-bit PowerPC) with network packet processor (checksum calculation, fast routing table lookup, ...)

[11:05] <sno> most of those tasks are C, C++ or Assembler - Perl is introduced (and currently perl5, but I want introduce Perl6 instead of introducing Perl5)

[11:06] <timotimo> all that's left for Inline::Perl6 is that cpanm install Inline::Perl6 builds rakudo for you :P

[11:08] <ilmari> Alien::Rakudo?

[11:08] <ilmari> ISAGN

[11:08] <sno> that's insane and won't work at all

[11:10] <stmuk> "perl6 - making the insane work"

[11:11] <sno> Nope, Inline::Perl6 or Alien::Rakudo is insane from IoT perspective

[11:11] <timotimo> only has to work on some systems

[11:25] <sno> have a look at https://www.linkedin.com/pulse/create-images-several-boot-devices-using-yocto-jens-rehsack to guess why such a tool is a fool for typical IoT environments

[11:25] <sno> even moritz - it's a 5 minute read

[11:26] <moritz> sno: please stop telling me what to do

[11:29] <sno> moritz: I don't tell you what to do and when I generated the impression, I apologize - HL you to give you the chance to add something to your overful readlist

[11:31] <moritz> sno: well, please stop doing that as well, it feel patronizing, especially with "even moritz"

[11:33] <sno> moritz: wasn't meant "patronizing" - the intension was just being the opposite in a ironic way ... went wrong

[11:40] <sno> moritz: are serious question: when I do such a talk as above and lizmat tells me to introduce it to you - shall I ignore lizmat or is there a reasonable way to inform you about the resource and ask you for feedback?

[11:44] <Woodi> sno: go for perl5 in 2016, IMO

[11:44] <Woodi> ...for IoT/embaded things

[11:44] <Woodi> hi all today :)

[11:45] <sno> Woodi: I don't understand what you're trying to tell me

[11:46] <Woodi> you want show using perl on things like Rpi0, right ?

[11:46] <moritz> sno: it's fine if you just inform me of things that might be interesting to read

[11:46] <sno> Woodi: nope

[13:50] <tomboy64> currently rakudo compile fails with this: https://bpaste.net/show/6459e774d665 (java backend)

[13:50] <tomboy64> this happens with 2016.05 and live

[13:50] <tomboy64> any suggestions?

[13:51] <tomboy64> i'm using icedtea 3 (openjdk 8)

[13:52] <timotimo> isn't rakudo-j known to not 100% install at the moment?

[13:53] <tomboy64> well, it worked just fine (tm) with 2016.04

[13:55] <timotimo> oh, i didn't know that

[13:59] <brrt> maybe a precomp change that wasn't carried over to rakudo-j yet

[14:06] <tomboy64> :/

[14:06] <tomboy64> not nice that

[14:08] <brrt> well, the weak defence is that nobody has yet promised to support and keep running rakudo-j

[14:08] <brrt> and the reasonable reason for that is that this is a lot of work, and we have limited resources

[14:09] <brrt> and to a large extent, the MoarVM backend is better for most users than the java backend

[14:09] <tomboy64> :) i'm aware of that.

[14:10] <tomboy64> i just spent a lot of time making the java-backend work properly on gentoo

[14:10] <brrt> it doesn't sound undebuggable, and you might want to ask nine about it whenever he is here

[14:10] <brrt> well, that sucks

[14:10] <tomboy64> will do

[14:10] <brrt> for what it is worth, it is why we have releases :-)

[14:10] <tomboy64> :p

[14:13] <timotimo> well, we've got two or maybe more people who invest time in making the java port of rakudo work with latest things

[14:13] <brrt> how is the rakudo-m situation with gentoo?

[14:13] <tomboy64> works just fine

[14:13] <tomboy64> oh

[14:13] <tomboy64> well, need to rebuild

[14:14] <tomboy64> haven't tested 2016.05 yet

[14:14] <tomboy64> 2016.04 was just fine

[14:17] <tomboy64> but yea, works fine with both clang and gcc.

[14:18] <timotimo> well, can you build rakudo-j with gcj? :P

[14:19] <tomboy64> ugh

[14:19] <tomboy64> that would require me to rebuild my gcc

[14:19] <brrt> don't make him do it timotimo :-P

[14:20] <brrt> it's not likely an issue with icedtea anyway

[14:21] <tomboy64> $ perl6 -e 'say "okay"'

[14:21] <tomboy64> okay

[14:21] <tomboy64> works fine on 2016.05

[14:25] <timotimo> does gcj even exist any more?

[14:25] <timotimo> i thought development on that stalled like 5 years ago?

[14:26] <ilmari> still ships with gcc 6.1

[14:26] <timotimo> does that mean anything significant?

[14:27] <ilmari> it's still there at least

[14:28] <ilmari> but no mention of it (or java) in the changes pages for gcc 6, 5 or 4.9

[14:28] <ilmari> latest news item on https://gcc.gnu.org/java/ is from 2009

[14:28] <ilmari> seems like it's stable (in the biological sense)

[14:34] <tomboy64> gcj is still shipped with gcc, but not enabled per default anymore

[14:34] <tomboy64> it was replaced by go

[14:38] <ilmari> debian still enables it, at least

[14:39] <ilmari> but they tend to enable everything that can reasonably be enabled

[14:39] <timotimo> for stability reasons

[14:39] <tomboy64> debian's backwards-compatibility madness is even worse than microsoft's

[14:40] <tomboy64> but no idea how ms handles that these days. haven't actually used their products for a decade or so.

[14:42] <geekosaur> microsoft ripped out a lot of back-compat starting in vista and continuing into win10

[14:52] <moritz> fwiw ocasionally I notice when Debian rolls out a change that's not backwards compatible, and I'm not eager on experiencing that more often :-)

[14:52] <moritz> where "notice" is usually "suffer from"

[14:57] <brrt> geekosaur: oh really... that explains something

[14:57] <ilmari> these days if you need ancient windows you can run it in a VM, I guess

[14:58] <ilmari> compatibility with, that is

[14:59] <geekosaur> yep, they added WOW (WIndows-on-Windows) to allow XP stuff to run

[14:59] <ilmari> huh, modern.ie claims «IE6 through IE11», but the dropdown only has IE8 and onwards (and no windows older than 7)

[15:00] <brrt> hmmm

[15:00] <brrt> i'm having to work with a legacy program now and the compatibility experience has been less than stellar...

[15:02] <geekosaur> yes, people have found WoW to be lacking

[15:04] * brrt dinner &

[15:07] <geekosaur> (Microsoft recommends running real XP in a VM for stuff that doesn't work. This isn't just a sales ploy; you're running unstable and insecure code that they very, very badly wanted to rip out and not have to put back in)

[15:21] <dalek> star: 122c0c9 | (Zoffix Znet)++ | tools/star/release-guide.pod:

[15:21] <dalek> star: Point out where R* is listed in Rakudo Perl wiki

[15:21] <dalek> star: review: https://github.com/rakudo/star/commit/122c0c990b

[15:21] <dalek> star: c5676a2 | (Steve Mynott)++ | tools/star/release-guide.pod:

[15:21] <dalek> star: Merge pull request #71 from zoffixznet/patch-1

[15:21] <dalek> star:

[15:21] <dalek> star: Point out where R* is listed in Rakudo Perl wiki

[15:21] <dalek> star: review: https://github.com/rakudo/star/commit/c5676a2069

[15:35] <cognominal> me suis réinscrit sur [email@hidden.address] j'avais disparu de la liste mi 2015 pour des raisons qui m'échappent. J'étais étonné de ne pas voir passer les mails à propos de la réuinions de Mercredi

[16:17] <nine> tomboy64: yes, the recent round of improvements to the precompilation code exposed an issue on rakudo-j.

[16:18] <tomboy64> nine: how big of a probem is that?

[16:18] <nine> tomboy64: it has taken me a month or longer to fix the same issue on rakudo-m and the fix still needs to be ported to the jvm version.

[16:18] <tomboy64> ew

[16:18] <nine> It hopefully won't take another month, but it's not exactly straight forward either

[16:18] <tomboy64> okay

[16:18] <tomboy64> well, i deactivated java for 2016.05 for now

[16:19] <nine> tomboy64: the up side is that 2016.05 should be much more packaging friendly :)

[16:19] <tomboy64> would be nice if you dropped me a line if it's supposed to be working again

[16:20] <tomboy64> heh :} well, it's downloading the source and compiling. so once the package exists there's not much to do apart from copy+paste the original build-script and test whether stuff works.

[16:21] <tomboy64> nine: but out of curiosity, why exactly do you think it is?

[16:26] <nine> tomboy64: it's now possible to build modules with an unpriviledged user in a separate directory, package the result and unpack the files to the file system in the intended directory with rakudo being able to use the precompiled files generated in the process.

[16:26] <nine> tomboy64: though granted, that's much less usefull if you expect your users to wait for compilation during installation anyway...

[16:27] <tomboy64> :D indeed

[16:49] <jdv79> the abs paths are not embedded anymore?

[16:50] <geekosaur> embedded paths are relative to the CUR, I think

[16:50] <geekosaur> so you can move the repository around and things still work as long as it can find itself

[16:50] <nine> jdv79: they're gone

[16:50] <nine> what geekosaur said :)

[16:56] <[Coke]> pmurias - how to build rakudo-js for testing? "git checkout js; perl Configure.pl --backends=js" doesn't work.

[16:56] <[Coke]> s/testing/hacking/

[18:13] <jdv79> i wish i could find myself some days

[18:14] <jdv79> nine:  excellent news!

[18:49] <dalek> rakudo/nom: 5444cc9 | (Zoffix Znet)++ | docs/release_guide.pod:

[18:49] <dalek> rakudo/nom: Fix typo

[18:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5444cc9a07

[18:49] <dalek> rakudo/nom: 19e91e8 | lizmat++ | docs/release_guide.pod:

[18:49] <dalek> rakudo/nom: Merge pull request #776 from zoffixznet/patch-2

[18:49] <dalek> rakudo/nom:

[18:49] <dalek> rakudo/nom: Fix typo

[18:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/19e91e889c

[20:19] <travis-ci> Rakudo build failed. lizmat 'Merge pull request #776 from zoffixznet/patch-2

[20:19] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/132646406 https://github.com/rakudo/rakudo/compare/b348f2f02147...19e91e889c51
