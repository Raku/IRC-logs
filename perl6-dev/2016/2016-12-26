[01:00] <dalek> roast: 5844a89 | samcv++ | S15-nfg/ (5 files):

[01:00] <dalek> roast: S15-nfg update mass-roundtrip-* for Unicode 9.0

[01:00] <dalek> roast:

[01:00] <dalek> roast: The script is now updated to work with Unicode 9.0 as well.

[01:00] <dalek> roast: review: https://github.com/perl6/roast/commit/5844a89798

[01:00] <dalek> roast: f8070c4 | samcv++ | S15-nfg/mass-equality (2 files):

[01:00] <dalek> roast: test-gen.p6's mass-equality.t generation has been moved to a new script

[01:00] <dalek> roast:

[01:00] <dalek> roast: This was working fine for Unicode 9.0, so it was not messed with due to

[01:00] <dalek> roast: it being much more complex and involved rearranging the codepoints.

[01:00] <dalek> roast: review: https://github.com/perl6/roast/commit/f8070c4122

[01:04] <notviki> samcv: this might be up your alley. Is that even a bug? doesn't look like that closing quote is the matching quote for the opener: https://rt.perl.org/Ticket/Display.html?id=130406

[01:07] * geekosaur was under the impression matching pairs weren't part of the spec... because they can depend on the locale

[01:11] <samcv> let me look

[01:11] <samcv> m: Q„1“;

[01:11] <camelia> rakudo-moar 1374fc: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Couldn't find terminator ” (corresponding „ was at line 1)␤at <tmp>:1␤------> Q„1“;⏏<EOL>␤    expecting any of:␤        ”␤»

[01:11] <samcv> well that seems fine right. unless

[01:12] <samcv> yeah i don't think that

[01:12] <notviki> Reading the code, it actually goes out to NQP land and uses our brackets string to find the matching losing delimiter

[01:12] <samcv> yep

[01:13] <samcv> yeah it's not in bidi paired brackets or bidi mirroring glyphs

[01:14] <samcv> so it is not a proper matched bracket (/quote)

[01:14] <notviki> m: Q„1”;

[01:14] <camelia> rakudo-moar 1374fc: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant string "1" in sink context (line 1)␤»

[01:14] <samcv> m: "„".uniprop.say

[01:14] <camelia> rakudo-moar 1374fc: OUTPUT«Ps␤»

[01:15] <samcv> m: "„".uniname.say

[01:15] <camelia> rakudo-moar 1374fc: OUTPUT«DOUBLE LOW-9 QUOTATION MARK␤»

[01:15] <samcv> there is no matching thing for this.

[01:15] <samcv> almost certain

[01:15] * notviki bets $1000 samcv doesn't use 80-char linewidth

[01:15] <samcv> yeah notviki there is no matching character for that

[01:15] <samcv> u: double quotation mark

[01:15] <unicodable6> samcv, U+00AB LEFT-POINTING DOUBLE ANGLE QUOTATION MARK [Pi] («)

[01:15] <unicodable6> samcv, U+00BB RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK [Pf] (»)

[01:15] <unicodable6> samcv, U+201C LEFT DOUBLE QUOTATION MARK [Pi] (“)

[01:15] <unicodable6> samcv, https://gist.github.com/987342005a219bbaf5115bb968f36cbc

[01:16] <samcv> yep

[01:16] <samcv> i remember because of before when i checked every single Ps and Pi thingy

[01:17] <samcv> m: "„".uniprop('Bidi_Mirrored').say

[01:17] <camelia> rakudo-moar 1374fc: OUTPUT«False␤»

[01:17] <notviki> http://i.imgur.com/kA9qztb.png :)

[01:17] <samcv> well. it was like 100000000000000000 calumns wide before!

[01:17] <notviki> :)

[01:17] <samcv> all on one line :P

[01:17] <samcv> i will fit to 80 columns though

[01:18] <samcv> soonish. idk sometime today

[01:19] <samcv> notviki, about that bug report. tell them that Q quoting is not the same as quotation marks

[01:20] <samcv> and so take two opposite/matching delimiters. in most cases they overlap

[01:20] <samcv> like “ ” but not for this

[01:20] <notviki> m: dd Q“x”

[01:20] <camelia> rakudo-moar 1374fc: OUTPUT«"x"␤»

[01:21] <samcv> oh they messaged me saying they got the CLA

[01:21] <notviki> \o/

[01:21] <samcv> should i forward that email to somebody

[01:21] <notviki> In my case they notified jnthn and he gave me the commit bit

[01:21] <b2gills> m: say „1“;

[01:21] <camelia> rakudo-moar 1374fc: OUTPUT«1␤»

[01:21] <samcv> You can let the Rakudo admins know that we've received the CLA.

[01:21] <samcv> well i am letting you guys know :P unknown whether they sent anything

[01:22] <samcv> it was Allison which replied to my email

[01:22] * notviki passes samcv the torch

[01:22] <notviki> I'm no longer the newest core member \o/

[01:22] <samcv> \o/

[02:06] <dalek> rakudo/nom: 1ee24cc | (Zoffix Znet)++ | src/core/List.pm:

[02:06] <dalek> rakudo/nom: Fix spurious warnings in List.reduce

[02:06] <dalek> rakudo/nom:

[02:06] <dalek> rakudo/nom: When the mapper sub has associativity set, the %prec ends up having

[02:06] <dalek> rakudo/nom: stuff (so the first conditional passes), but the `prec` key is still

[02:06] <dalek> rakudo/nom: absent. So when we infix:<eq> on it, it triggers warnings about

[02:06] <dalek> rakudo/nom: stringifying uninitialzed values.

[02:06] <dalek> rakudo/nom:

[02:06] <dalek> rakudo/nom: Fix by checking if it's inited first.

[02:06] <dalek> rakudo/nom:

[02:06] <dalek> rakudo/nom: Bugfind: https://irclog.perlgeek.de/perl6/2016-12-26#i_13799375

[02:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1ee24cc5a4

[02:11] <dalek> roast: 261c2c3 | (Zoffix Znet)++ | packages/Test/Util.pm:

[02:11] <dalek> roast: Add doesn't-warn() utility test sub

[02:11] <dalek> roast:

[02:11] <dalek> roast: Checks whether a warning is emitted. This lets us test for warnings

[02:11] <dalek> roast: faster than by using is_run to fire up an entire perl6 for us.

[02:11] <dalek> roast: review: https://github.com/perl6/roast/commit/261c2c357a

[02:11] <dalek> roast: 27ddcc8 | (Zoffix Znet)++ | S32-list/reduce.t:

[02:11] <dalek> roast: Remove trailing whitespace

[02:11] <dalek> roast: review: https://github.com/perl6/roast/commit/27ddcc882e

[02:11] <dalek> roast: b2e46ab | (Zoffix Znet)++ | S32-list/reduce.t:

[02:11] <dalek> roast: Test .reduce doesn't produce spurious warnings

[02:11] <dalek> roast:

[02:11] * notviki stares down dalek

[02:18] <notviki> hm, I can teach huggable to take over for him when he fails like that

[02:23] <notviki> t/spec/S15-unicode-information/uniprop.rakudo.moar (Wstat: 768 Tests: 152 Failed: 3)

[02:23] <notviki> Failed tests:  121-123

[02:23] <notviki> Non-zero exit status: 3

[02:24] <samcv> do i need to fudge some more?

[02:24] <samcv> line numbers?

[02:25] <samcv> actually nvm i will do it

[02:25] * samcv needs to get multiple installations of rakudo installed

[02:26] <notviki> Rakudobrew is just for that: https://github.com/tadzik/rakudobrew

[02:28] <dalek> roast: 9418115 | samcv++ | S15-unicode-information/uniprop.t:

[02:28] <dalek> roast: Fudge some more tests for uniprop

[02:28] <dalek> roast: review: https://github.com/perl6/roast/commit/9418115fe7

[02:30] <samcv> notviki, how do you switch between them easiest notviki

[02:30] <samcv> ok. passes now :)

[02:36] <notviki> By "multiple" you mean different commits? I think it's rakudobrew switch

[02:36] * notviki doesn't actually use multiple versions

[02:41] <samcv> ack ok my changes to moarvm mess up one of the tests

[03:04] <samcv> oddly somehow it's this https://rt.perl.org/Ticket/Display.html?id=125190

[03:05] <samcv> hm

[03:16] <samcv> ack so it wosn't any of my changes at all.

[03:21] <samcv> hmm well i got it fixed. so that is all good

[03:24] <samcv> er maybe not. this is really weird. will need to investigate. this is quite odd

[03:56] <samcv> m: say '    ' ~~ /<:space>/

[03:56] <camelia> rakudo-moar 1ee24c: OUTPUT«｢ ｣␤»

[03:56] <samcv> m: say '    ' ~~ /<:Space>/

[03:56] <camelia> rakudo-moar 1ee24c: OUTPUT«｢ ｣␤»

[03:57] <samcv> wtf. so for some reason it's failing for :space but not :Space, which works fine

[04:01] <samcv> ugh what gives. uniprop-bool for 'space' returns true, so it seems to be fine. but it fails that test

[04:01] <samcv> with the regex

[06:34] <dalek> rakudo/nom: b01dfcd | (Zoffix Znet)++ | src/Perl6/Actions.nqp:

[06:34] <dalek> rakudo/nom: Warn when using Bool:D as type constraint in signatures

[06:34] <dalek> rakudo/nom:

[06:34] <dalek> rakudo/nom: Fixes RT#130182: https://rt.perl.org/Ticket/Display.html?id=130182

[06:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b01dfcda90

[06:34] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130182

[06:35] <dalek> roast: 7095892 | (Zoffix Znet)++ | S06-signature/types.t:

[06:35] <dalek> roast: Test Bool:D as literals in signatures warn

[06:35] <dalek> roast:

[06:35] <dalek> roast: RT#130182: https://rt.perl.org/Ticket/Display.html?id=130182

[06:35] <dalek> roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/b01dfcda90

[06:35] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130182

[06:35] <dalek> roast: review: https://github.com/perl6/roast/commit/7095892afe

[09:57] <gfldex> .u „

[09:57] <yoleaux2> U+201E DOUBLE LOW-9 QUOTATION MARK [Ps] („)

[09:58] <gfldex> .u “

[09:58] <yoleaux2> U+201C LEFT DOUBLE QUOTATION MARK [Pi] (“)

[09:58] <gfldex> .u “

[09:58] <yoleaux2> U+201C LEFT DOUBLE QUOTATION MARK [Pi] (“)

[09:59] <gfldex> notviki: this will come up again because of https://de.wikipedia.org/wiki/Anf%C3%BChrungszeichen#Andere_Sprachen

[10:00] <gfldex> loads of eastern european languages use them

[10:03] <samcv> the main question becomes, do we support unicode matching brackets + mirroring glyphs that are open/closers AND all the quoting constructs we allow?

[10:03] <samcv> at the moment we only allow matching brackets/mirroring glyphs and also characters that are the same open and same close

[10:04] <gfldex> m: say „we do, but not for Q“.

[10:04] <camelia> rakudo-moar b01dfc: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> say „we do, but not for Q“.⏏<EOL>␤»

[10:04] <samcv> if we add that one, we should add every one of the quotation marks

[10:04] <samcv> m: say ”test”; say Q”test”

[10:04] <gfldex> m: say „we do, but not for Q.“

[10:04] <camelia> rakudo-moar b01dfc: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Use of a closing delimiter for an opener is reserved␤at <tmp>:1␤------> say ”test”; say Q⏏”test”␤»

[10:04] <camelia> rakudo-moar b01dfc: OUTPUT«we do, but not for Q.␤»

[10:04] <samcv> yeah exactly

[10:04] <gfldex> i'm cool with that, just need to doc it.

[10:05] <samcv> i personally favor just going with brackets/mirroring glyphs, but being consistent is the most important

[10:12] <samcv> it's about time for my bed. night everybody :)

[14:11] <dalek> rakudo/nom: 2496963 | lizmat++ | src/core/Str.pm:

[14:11] <dalek> rakudo/nom: Re-imagine Str.split(<a b c>) some more

[14:11] <dalek> rakudo/nom:

[14:11] <dalek> rakudo/nom: - 10% (small string, 1 hit each) to 40% (larger, 100 hits each) faster

[14:11] <dalek> rakudo/nom: - don't use nqp::p6sort anymore, instead use R:I.MERGESORT-REIFIED-LIST-WITH

[14:11] <dalek> rakudo/nom: - so we don't need to setup indices + we have mapping simplified

[14:11] <dalek> rakudo/nom: - don't copy values when limiting, just limit the original result

[14:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2496963ea4

[14:11] <lizmat> this should probably also be noticeable in test-t   ^^^

[14:11] <lizmat> only one more step towards the elimination of nqp::p6sort

[14:12] <lizmat> but that's for later today

[14:12] <lizmat> afk&

[16:37] <notviki> m: dd

[16:37] <camelia> rakudo-moar 249696: OUTPUT«block <unit>␤»

[16:37] <notviki> m: dd ‘…‚

[16:37] <camelia> rakudo-moar 249696: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in curly single quotes; couldn't find final "’" ␤at <tmp>:1␤------> dd ‘…‚⏏<EOL>␤    expecting any of:␤        argument list␤        curly single quotes…»

[16:38] <notviki> m: dd “…„

[16:38] <camelia> rakudo-moar 249696: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in curly double quotes; couldn't find final '”' ␤at <tmp>:1␤------> dd “…„⏏<EOL>␤    expecting any of:␤        argument list␤        curly double quotes…»

[16:39] <notviki> If there's anything we can learn from supporting U+2212 is to say "no" once in a while.

[16:58] <[Tux]> Nice ♥ !

[16:58] <[Tux]> This is Rakudo version 2016.12-102-g2496963ea built on MoarVM version 2016.12-19-ge2ffc358

[16:58] <[Tux]> csv-ip5xs        3.057

[16:58] <[Tux]> test            14.270

[16:58] <[Tux]> test-t           5.328

[16:58] <[Tux]> csv-parser      15.208

[17:05] <notviki> \o/

[17:05] <notviki> buggable: speed

[17:05] <buggable> notviki, ▅▅▅▆▅▅▅▄▅▅▆▅▅▅▆▄▄▄▄▄▅▄▄▅▄█▃▃▄▄▃▄▄▃▄▃▄▄▃▄▄▄▂▃▂▂▂▂▁▁ data for 2016-12-04–2016-12-26; variance: 5.328s–7.592s

[17:05] <notviki> :D

[18:02] <notviki> hmm... I got $node.node.CURSOR.worry("Useless use of $sym in sink context"); call in unwanted() and I added debug prints to see that I'm hitting that conditional, but no warning gets printed

[18:08] <mst> notviki: your debug print is going to stderr or an autoflushing filehandle right?

[18:08] <mst> (probably a stupid question but I've seen/done it so many times)

[18:10] <notviki> Yeah to stderr. Why?

[18:10] <notviki> m: 1...2

[18:10] <camelia> rakudo-moar 249696: OUTPUT«Potential difficulties:␤    Useless use of ... in sink context␤    at <tmp>:1␤    ------> 1...⏏2␤»

[18:10] <notviki> It's the same conditional that prints ^ that warning

[18:10] <notviki> I'm trying to make

[18:10] <notviki> m: 1 but 2

[18:10] <camelia> rakudo-moar 249696: ( no output )

[18:11] <notviki> Warn and it doesn't... so I'm missing something else that needs to be done

[18:53] <lizmat> .tell samcv did you forget to push Missing test file: t/spec/S15-nfg/mass-chars.t ?

[18:53] <yoleaux2> lizmat: I'll pass your message to samcv.

[19:05] <dalek> rakudo/nom: 7ac0455 | lizmat++ | src/core/Rakudo/Internals.pm:

[19:05] <dalek> rakudo/nom: Introducing R:I.MERGESORT-REIFIED-LIST-AS

[19:05] <dalek> rakudo/nom:

[19:05] <dalek> rakudo/nom: - sort a reified list using a Schwartzian transform

[19:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7ac04552a5

[19:05] <dalek> rakudo/nom: def5262 | lizmat++ | src/core/Any-iterable-methods.pm:

[19:05] <dalek> rakudo/nom: Any.sort(&by) uses R:I.MERGESORT-REIFIED-LIST-AS

[19:05] <dalek> rakudo/nom:

[19:05] <dalek> rakudo/nom: - no need to set up indexes (MERGESORT-REIFIED-LIST-AS does that)

[19:05] <dalek> rakudo/nom: - otherwise same algorithm as MERGESORT-REIFIED-LIST

[19:05] <dalek> rakudo/nom: - about 40% faster for a 100-element list

[19:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/def5262890

[19:06] <dalek> rakudo/nom: 3a1fb3a | lizmat++ | src/vm/moar/Perl6/Ops.nqp:

[19:06] <dalek> rakudo/nom: RIP nqp::p6sort

[19:06] <dalek> rakudo/nom:

[19:06] <dalek> rakudo/nom: Thanks for all the hard work!

[19:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3a1fb3a189

[19:40] <notviki> lizmat: it was purposefully deleted: https://github.com/perl6/roast/commit/3baa4db85abfe21d4df1eb9fc1149fd1f30dda15

[19:41] <notviki> And I .tell'ed jnthn to review and OK that change.

[19:42] <notviki> And if it is, we'll just stick a dummy file in place, I guess.... to make make spectest quiet about missing files :\

[19:43] <notviki> (we can't just remove it from t/spectest.data, because it's in 6.c-errata)

[20:11] <samcv> uhm is this a bug https://rt.perl.org/Ticket/Display.html?id=117683

[20:11] <yoleaux2> 18:20Z <jnthn> samcv: About test-gen.p6 it was iirc written before some fairly major changes (including the Great List Refactor), and it's entirely possible the generator script is busted as a result. It was run against UCD 8.0 originally, so certainly produced passing tests against that. So I suggest "use UCD 8.0 and fix it to prdouce the same output first" would be one way to go.

[20:11] <yoleaux2> 18:21Z <jnthn> samcv: Will try and catch up with your MoarVM PR and other Unicode bits that may want my input soon too; getting some much-needed rest these last days. :-)

[20:11] <yoleaux2> 18:53Z <lizmat> samcv: did you forget to push Missing test file: t/spec/S15-nfg/mass-chars.t ?

[20:11] <samcv> lizmat, i removed it

[20:12] <samcv> .tell lizmat it has been removed see my explanation here: https://github.com/perl6/roast/commit/3baa4db85abfe21d4df1eb9fc1149fd1f30dda15

[20:12] <yoleaux2> samcv: I'll pass your message to lizmat.

[20:16] <samcv> and all the fudged tests we were failing from masschars.t, the reason was just the script generating them making bad assumptions. so using the GraphemeBreakTest, Unicode actually provides HOW graphemes are broken up. instead of us trying to do it ourselves, and so the fudged tests in GraphemeBreakTest are actually correct (aka SHOULD be being passed but don't) instead of tests which shouldn't pass, but the script generated them and they were bad

[20:21] <samcv> notviki, i can always write something new for masschars.t if you want, if it becomes needed, though. or maybe write something to test how we further break up the characters (instead of just checking .chars). going more deeply into the GraphemeBreakTest and checking each grapheme boundary instead of our total grapheme count

[20:22] <dogbert2> samcv: shouldn't t/spec/S15-nfg/mass-chars.t be removed from 'spectest.data' as well?

[20:22] <samcv> no, becuase it's still in roast

[20:23] <samcv> for 6.c-errata

[20:23] <dogbert2> so the 'Missing test file: t/spec/S15-nfg/mass-chars.t' when running 'make spectest' is ok then?

[20:23] <samcv> yes :)

[20:24] <samcv> read my commit here https://github.com/perl6/roast/commit/3baa4db85abfe21d4df1eb9fc1149fd1f30dda15

[20:25] <samcv> and because the graphemebreaktest actually tells US how they break, instead of us creating the number of characters it 'should be' using our own rules on the fly on test creation

[20:25] <samcv> which is not a very forward compatible way to do it

[20:26] <samcv> well and kind of bad regardless. since we need to take a lot more into account than one unicode property, plus the rules could change in the future

[20:26] <samcv> even if we did check all the rules _now_ on test creation, they could change and then we'd have to rewrite the generator to create the write 'answers' much better to rely on unicode's answers instead

[20:28] <dalek> roast: de2fe04 | (Zoffix Znet)++ | S15-nfg/mass-chars.t:

[20:28] <dalek> roast: Silence unwated missing file warnings

[20:28] <dalek> roast: review: https://github.com/perl6/roast/commit/de2fe0496e

[20:28] <samcv> notviki++

[20:28] <dalek> rakudo/nom: 1e54371 | lizmat++ | src/core/List.pm:

[20:28] <dalek> rakudo/nom: Add List.sort(&by) candidate

[20:28] <dalek> rakudo/nom:

[20:28] <dalek> rakudo/nom: On reified lists, it should not have to do a copy of the list being

[20:28] <dalek> rakudo/nom: sorted.  Gives about a 5% gain on reified List/Array.

[20:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1e5437181d

[20:31] <dogbert2> Zoff, eh I meant notviki++ to the rescue :)

[20:37] <dalek> rakudo/nom: a7bf1ea | lizmat++ | src/core/List.pm:

[20:37] <dalek> rakudo/nom: Oops, R:I.MRLA is the one that doesn't need cloning

[20:37] <dalek> rakudo/nom:

[20:37] <dalek> rakudo/nom: R:I.MRLW does need a clone to work with, although no spectest failed

[20:37] <dalek> rakudo/nom: without the clone, oddly enough.

[20:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a7bf1eab61

[20:41] <samcv> somehow I missed seeing this ticket. thanks notviki https://github.com/perl6/atom-language-perl6/issues/29

[20:41] <samcv> fixing now

[20:43] <samcv> i've got a good workflow going for the highlighter, wrote a unescape.p6 that takes stdin and will unescape and print out the cson. copy the text: xclip -o | unescape.p6 | xclip

[20:43] <samcv> and then it's on my clipboard unescaped :)

[20:43] <samcv> then have one to re-escape it once i'm done getting it working

[20:48] * notviki notices TimToady got a fancy hostmask for Christmas

[22:05] * notviki leaves to nurse a burn out

[22:19] * lizmat wonders whether she should mention https://www.reddit.com/r/perl/comments/5jkhy7/just_a_reminder_that_perl_6_is_not_perl_and/?st=ix0ofwtd&sh=b90d1568 in the P6W

[22:19] <yoleaux2> 20:12Z <samcv> lizmat: it has been removed see my explanation here: https://github.com/perl6/roast/commit/3baa4db85abfe21d4df1eb9fc1149fd1f30dda15

[22:19] <samcv> wow that's harsh

[22:19] <samcv> that reddit

[22:21] * lizmat decided against it

[22:26] <timotimo> there was some extra text to it or something?

[22:43] <lizmat> timotimo: yes, there was, but that was removed by the admins

[22:43] <lizmat> but the title is still visible, and says enough, really

[22:48] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2016/12/26/2016-52-twittering-towards-the-end/

[22:56] <notviki> lizmat++ good weekly.

[22:56] <notviki> lizmat: FWIW MasterDuke's 10% improvement is *on top* of the 40% improvement to perl6 -ne '' he did: https://github.com/rakudo/rakudo/pull/960

[22:58] <lizmat> notviki: added, thanks!

[22:59] <notviki> lizmat++

[22:59] <samcv> arghhhhhhh

[23:00] <samcv> 0xF.uniprop-bool('space') #> true; 0xF.uniprop-bool('White_Space') #> False

[23:00] <samcv> goddamit space property. always flipping which is broken
