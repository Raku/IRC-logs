[12:10] <jnthn> .tell pmurias Ah, makes sense (the local register thing, and why a temporary was needed). The leak fix looks good.

[12:10] <yoleaux2> jnthn: I'll pass your message to pmurias.

[12:10] <jnthn> nine: Yeah, updating the website was something I didn't feel like spending my weekend doing. Will get to it soonish. :)

[13:06] <TheLemonMan> m: sub prefix:<++> (int $x is rw) { $x }; my int $x = 4; say ++$x;

[13:06] <camelia> rakudo-moar 668dc5: OUTPUT«5␤»

[13:07] <TheLemonMan> but if I replace 'int' with 'Int' it works

[13:11] <[Coke]_> m: multi sub prefix:<++> (int $x is rw) { $x }; my int $x = 4; say ++$x;

[13:11] <camelia> rakudo-moar 668dc5: OUTPUT«5␤»

[13:12] <[Coke]> my response is "doctor it hurts when I do this", but perhaps someone else can fix it.

[13:12] <[Coke]> why are you trying to override the builtin prefix ++

[13:12] <[Coke]> ?

[13:14] <TheLemonMan> need to check some codegen detail

[13:15] <[Coke]> ... of what happens when you override a builtin?

[13:15] <[Coke]> *try to*

[13:17] <[Coke]> looks like both int and Int prefix ++ are defined as multi subs, btw; I thought the difference might have to do with a difference in sigs there.

[13:19] <TheLemonMan> [Coke], I'm doing some more testing wrt NQP's #304

[13:24] <[Coke]> hokay.

[13:46] <[Coke]> how do we edit docs on rakudo.org?

[13:46] <[Coke]> are there html files somewhere? a wordpress install?

[13:57] <jnthn> [Coke]: Think it's wordpress and pmichaud is the one to ask for access, iirc

[14:21] <TheLemonMan> hmm, the roast scripts keep saying 'Looks like you planned XX tests, but ran YY', how am I supposed to know what's wrong ?

[14:24] <[Coke]> count the tests.

[14:24] <[Coke]> how are you running the tests?

[14:25] <[Coke]> is this with rakudo?

[14:27] <TheLemonMan> [Coke], yes, apparently it stops at a block that's marked with 'skip'

[14:27] <[Coke]> what command line are you using to run the test(s)

[14:28] <TheLemonMan> perl6 <path-to-the-test> (using the harness6 has the same effect)

[14:28] <[Coke]> in general, you can't do that.

[14:29] <perlpilot> [Coke]: I can give you an account on rakudo.org if you don't already have one.

[14:29] <[Coke]> you need either 'make t/spec/path/to/test.t' or 'prove -v -e t/fudgeandrun t/spec/path/to/test.t'

[14:29] <[Coke]> perlpilot: I have no idea if I do. it's not under my normal email addy if it's there.

[14:29] * perlpilot looks

[14:29] <[Coke]> the tests are meant to be fudged first (see t/spec/fudge) before being run.

[14:30] <[Coke]> so, can you give me an -exact- command line you're using?

[14:30] <[Coke]> are you using a prebuilt perl6? the one in a build directory?

[14:30] <[Coke]> if prebuilt, you're going to have to jump through more hoops

[14:30] <perlpilot> [Coke]: nope.  What email address do you want to use?

[14:31] <[Coke]> spec tests are designed to be run out of a build directory.

[14:33] <[Coke]> perlpilot: thanks. Are wordpress logins per-site ?

[14:33] <[Coke]> or is this going to somehow impact other wordpress logins I have?

[14:34] <perlpilot> I'm not really sure.   I've seen it both ways.

[14:36] <TheLemonMan> [Coke], that was it, I forgot to preprocess the tests

[14:36] <[Coke]> TheLemonMan: excelelnt, gald it's working

[14:36] <[Coke]> *glad

[15:33] * [Coke] wishes to come work for the perl 6 collective. blah.

[15:54] <jdv79> having a p6 related job would be pretty sweet

[16:16] * lizmat waves from Cluj

[16:17] <jnthn> lizmat: Hope you had a nice journey :)

[16:17] <lizmat> yeah, well, the first 100km into Rumania wasn't too nice to look at...

[16:18] <lizmat> the rest was a lot better :-)

[16:18] <lizmat> there being no highways in this area, makes you see things all the better  :-)

[16:19] <jnthn> :-)

[16:35] <lizmat> m: my $b = <a b c d>.Bag; my $m = <a b c d>.Mix; say $b.ACCEPTS($m)  # I wonder if this is correct ?

[16:35] <camelia> rakudo-moar 668dc5: OUTPUT«True␤»

[16:36] <jnthn> I don't immediately see why it'd be a problem?

[16:36] <jnthn> It is smartmatch... :)

[16:36] <lizmat> ok

[16:36] <lizmat> :-)

[16:37] <jnthn> If === came out the same we'd be upset :)

[16:37] <jnthn> But afaik a mix is just a bag with Num weights, and 1 ~~ 1e1 comes out alright

[16:38] <dalek> rakudo/nom: 933e9a6 | lizmat++ | src/core/Baggy.pm:

[16:38] <dalek> rakudo/nom: Make Baggy.ACCEPTS(Baggy) about 25x faster

[16:38] <dalek> rakudo/nom:

[16:38] <dalek> rakudo/nom: For a 4 element Bag, that is.   Larger bags should be even faster still.

[16:38] <dalek> rakudo/nom:

[16:38] <dalek> rakudo/nom: - don't do (<+) twice

[16:38] <dalek> rakudo/nom: - check number of keys first

[16:38] <dalek> rakudo/nom: - run it off the .WHICH keys, so we don't need to call .WHICH

[16:38] <dalek> rakudo/nom: - rewrite in nqp ops

[16:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/933e9a61c4

[16:39] <lizmat> m: my $b = <a b c d>.Bag; my $m = <a b c d>.Mix; say $b === $m

[16:39] <camelia> rakudo-moar 668dc5: OUTPUT«False␤»

[18:01] <moritz> do we have a style guide for code inside the rakudo repo anywhere?

[18:02] <timotimo> "use the style that's fastest" :P

[18:02] <moritz> we do seem to use uncuddled else (newline between } and else) pretty consistently

[18:02] <moritz> and four-space indents

[18:07] <[Coke]> match the style in the section you're in, I think, is the closest we have.

[18:08] <[Coke]> we spent a LOT of time in parrot trying to coerce code to our coding style, time I think was ultimately wasted. I wouldn't worry too much about it.

[18:09] <moritz> ok

[18:09] <moritz> I merely ask because the core infrastructure best practise thingy suggests we document the contribution process, including coding style

[18:09] <moritz> I guess "match what you see" is good enough for us

[18:14] <japhb> TimToady had a list of personal preferences for Perl 5 code (which I default my editor to use), but I don't recall him making one for Perl 6 code.  And it's likely that Rakudo's source would violate some of that anyway for numerous reasons (history, bootstrapping, performance-critical hacks, etc.)

[18:22] <[Coke]> I would love if it said "no tabs, 4 spaces" in there somewhere. :)

[18:24] <timotimo> no stabs, 4 paces

[18:29] <jnthn> Uncudled else, 4-space indents, stick with _ over - in names of any code written in NQP (grammar, actions, MOP), be consistent with what you see existing in the code that you're editing.

[18:38] <timotimo> how bad is it that i keep cuddling elses?

[18:38] <timotimo> i can make an effort if people want

[18:39] <jnthn> I don't feel strongly on it, though I do find it makes the code easier to scan

[18:39] <jnthn> (I didn't used to do it myself until I saw it done commonly here and found it a little easier on the eye.)

[18:39] <timotimo> ill give it a think

[18:40] <jnthn> Short of tabs vs spaces though, I'm generally not inclined to reject code contributions on little stylistic things. :)

[18:44] <dalek> rakudo/nom: 560170f | LemonBoy++ | src/Perl6/Actions.nqp:

[18:44] <dalek> rakudo/nom: Reject signatures with both slurpy parameters and default values.

[18:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/560170f31e

[18:44] <dalek> rakudo/nom: 3af93c4 | jnthn++ | src/Perl6/Actions.nqp:

[18:44] <dalek> rakudo/nom: Merge pull request #844 from LemonBoy/defv

[18:44] <dalek> rakudo/nom:

[18:44] <dalek> rakudo/nom: Reject signatures with both slurpy parameters and default values.

[18:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3af93c42cc

[18:45] <dalek> roast: 5b544b2 | LemonBoy++ | S06-signature/defaults.t:

[18:45] <dalek> roast: Tests for parameter default values.

[18:45] <dalek> roast: review: https://github.com/perl6/roast/commit/5b544b2fe0

[18:45] <dalek> roast: 7f6e44f | jnthn++ | S06-signature/defaults.t:

[18:45] <dalek> roast: Merge pull request #144 from LemonBoy/defaults

[18:45] <dalek> roast:

[18:45] <dalek> roast: Reject default values for slurpy parameters.

[18:45] <dalek> roast: review: https://github.com/perl6/roast/commit/7f6e44feb1

[18:45] <TheLemonMan> \m/

[18:47] <timotimo> cool

[18:54] <dalek> roast: f5f4ece | LemonBoy++ | S02-types/native.t:

[18:54] <dalek> roast: Unfudge some passing tests.

[18:54] <dalek> roast:

[18:54] <dalek> roast: Also, silence a deprecation warning by using is-approx instead of

[18:54] <dalek> roast: is_approx.

[18:54] <dalek> roast: review: https://github.com/perl6/roast/commit/f5f4eced4a

[18:54] <dalek> roast: 1b9ba1a | jnthn++ | S02-types/native.t:

[18:54] <dalek> roast: Merge pull request #143 from LemonBoy/unfudge-rt127813

[18:54] <dalek> roast:

[18:54] <dalek> roast: Unfudge some passing tests.

[18:54] <dalek> roast: review: https://github.com/perl6/roast/commit/1b9ba1a257

[22:19] * jnthn wonders if he'll get this blog post finished in time for it to sneak into the weekly :)

[22:21] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2016/08/22/2016-34-a-quick-botch-from-cluj/

[22:21] <lizmat> nope  :-)

[22:21] <lizmat> jnthn: unless it's done now ?

[22:22] <jnthn> It is, I'm already pasting it into wordpress :)

[22:22] <timotimo> ooooh

[22:22] <lizmat> ok, I'll add it then!

[22:23] <timotimo> we have Dofgooding!

[22:24] <jnthn> https://6guts.wordpress.com/2016/08/22/concurrency-bug-squishing-part-1/

[22:28] <timotimo> yay blog

[22:31] <jnthn> lizmat: Thanks for letting it sneak in :)

[22:32] <lizmat> jnthn: you're welcome

[22:32] <jnthn> Also, lizmat++ for the weekly :)

[22:32] <lizmat> it does mean you're at the end of this week's list, rather than at the top of next week's list

[22:34] <jnthn> I hope to get another post in that series done later this week anyways :)

[22:37] <lizmat> jnthn++  :-)

[22:37] <lizmat> time to get some sleep

[22:37] <lizmat> so good night, #perl6!

[22:38] <jnthn> Me also

[22:38] <jnthn> 'night o/

[23:44] <jdv79> thanks for the post jnthn
