[07:06] <[Tux]> This is Rakudo version 2016.05-30-g4a7eaa0 built on MoarVM version 2016.05

[07:06] <[Tux]> test            20.323

[07:06] <[Tux]> test-t          13.180

[07:06] <[Tux]> csv-parser      34.510

[10:30] <dalek> rakudo/js: a80a5ae | (Pawel Murias)++ | src/vm/js/perl6-runtime/runtime.js:

[10:30] <dalek> rakudo/js: [js] Fetching stuff out of variables.

[10:30] <dalek> rakudo/js: review: https://github.com/rakudo/rakudo/commit/a80a5ae5f8

[12:19] <lizmat> jnthn: is there a reason why Seq.new only accepts instantiated Iterators ?

[12:19] <lizmat> jnthn: in the case of the EmptyIterator, there's no actual need to instantiate

[12:20] <lizmat> jnthn: but I guess I can make it a highlander  :-)

[12:26] <jnthn> lizmat: 'cus it's almsot always not the right thing to have a type object there :)

[12:28] <lizmat> yeah, I guess   :-)

[12:32] <dalek> rakudo/js: 4e47144 | (Pawel Murias)++ | src/vm/js/ (2 files):

[12:32] <dalek> rakudo/js: [js] Implement nqp::p6box_n, nqp::p6box_i, nqp::p6box_s.

[12:32] <dalek> rakudo/js: review: https://github.com/rakudo/rakudo/commit/4e47144e61

[12:36] <dalek> nqp: 93b7c09 | (Pawel Murias)++ | src/vm/js/nqp-runtime/hll.js:

[12:36] <dalek> nqp: [js] Implement hllizing nqp primitive types.

[12:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/93b7c092d4

[12:36] <dalek> nqp: 7a6cba1 | (Pawel Murias)++ | t/nqp/097-hll.t:

[12:36] <dalek> nqp: Test foreign_type_int, foreign_type_num, foreign_type_string.

[12:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7a6cba18b2

[12:36] <dalek> nqp: 2a22a16 | (Pawel Murias)++ | src/vm/js/nqp-runtime/runtime.js:

[12:36] <dalek> nqp: [js] Throw an NQPException instead of a untyped on so it can be caught by try in rakudo-js.

[12:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2a22a169eb

[12:36] <dalek> nqp: 7706bab | (Pawel Murias)++ | src/vm/js/nqp-runtime/runtime.js:

[12:36] <dalek> nqp: [js] Allow looking up of an undeclared lexical, rakudo depends on that.

[12:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7706bab08c

[12:41] <tomboy64> wow

[12:41] <tomboy64> i should really start filing bugs against perl6 :D

[12:48] <brrt> :'-(

[12:48] <brrt> and we have to fix them, surely

[12:48] <brrt> :-P

[12:49] <[Coke]> RT: 1307; CONC: 7; GLR: 6; JVM: 68; LHF: 1; LTA: 75; NYI: 28; OSX: 6; PERF: 15; POD: 3; PRECOMP: 3; RFC: 23; SEGV: 19; STAR: 1; TESTNEEDED: 29; TODO: 9; UNI: 5; WEIRD: 3

[13:35] <dalek> nqp: 4cd54b4 | (Pawel Murias)++ | src/vm/js/ (2 files):

[13:35] <dalek> nqp: [js] Implement nqp::sayfh.

[13:35] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4cd54b4405

[16:10] <tomboy64> i have libffi and dyncall locally installed

[16:12] <tomboy64> but even when specifying --has-libffi, the logic in Configure.pl 1. tests for libff, 2. tests for dyncall, 3. tests for nativecall, all three exclusively. and during the build itself, 3rdparty/dyncall is accessed nevertheless.

[16:12] <tomboy64> considering it, this is for #moarvm, please disregard

[18:51] <ZoffixW> üé∫üé∫üé∫ I wrote down the details for the work I plan to do on `is-approx` and I'll start in a day or two. If anyone has any objections or suggestions just say in channel (I'll read the backlog even if I'm not here): https://github.com/zoffixznet/debug/blob/master/mu/approx-rework.md

[18:52] <ZoffixW> There are some non-backwards compat changes, but they affect non-specced and non-documented areas and the old behaviour is broken in some places, so I think even if someone is using those portions, they expect it to behave as specced/docced not as the sub currently does things.

[18:52] <ZoffixW> üëã

[19:05] <perlpilot> ZoffixW++

[19:27] <dalek> roast: df98e1d | (Tom Browder)++ | S26-documentation/07-tables.t:

[19:27] <dalek> roast: add critical test for known critical table pod bug (#128221) in latest rakudo release (2016.05)

[19:27] <dalek> roast: review: https://github.com/perl6/roast/commit/df98e1dc5c

[19:27] <dalek> roast: 1a0127d | (Tom Browder)++ | S26-documentation/07-tables.t:

[19:27] <dalek> roast: correct num of elems (1 row)

[19:27] <dalek> roast: review: https://github.com/perl6/roast/commit/1a0127d5c5

[19:27] <dalek> roast: 5d31d6e | (Tom Browder)++ | S26-documentation/07-tables.t:

[19:27] <dalek> roast: Merge pull request #121 from tbrowder/bad-pod-tables

[19:27] <dalek> roast:

[19:27] <dalek> roast: add critical test for known critical table pod bug (#128221) in lates‚Ä¶

[19:27] <dalek> roast: review: https://github.com/perl6/roast/commit/5d31d6e28e

[20:33] <lizmat> hmmmm

[20:33] <lizmat> $ perl6 t/spec/S26-documentation/07-tables.t

[20:33] <lizmat> ===SORRY!===

[20:33] <lizmat> Cannot iterate object with P6opaque representation

[20:33] <lizmat> Am I missing something ??

[20:40] <dalek> rakudo/nom: b7e224f | lizmat++ | src/core/ (2 files):

[20:40] <dalek> rakudo/nom: Make Rakudo::Internals::EmptyIterator a highlander

[20:40] <dalek> rakudo/nom:

[20:40] <dalek> rakudo/nom: Because Seq.new requires a Iterator:D, even though technically the

[20:40] <dalek> rakudo/nom: EmptyIterator class didn't need instantiation to work.  But it was

[20:40] <dalek> rakudo/nom: felt that keeping the :D requirement for Seq.new was a smart thing.

[20:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b7e224fadb

[21:58] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make Rakudo::Internals::EmptyIterator a highlander

[21:58] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/134281984 https://github.com/rakudo/rakudo/compare/4a7eaa06b5e3...b7e224fadbc9

[22:11] <dalek> rakudo/nom: 33ab868 | lizmat++ | src/core/List.pm:

[22:11] <dalek> rakudo/nom: Make iterating over a list about 10% faster again

[22:11] <dalek> rakudo/nom:

[22:11] <dalek> rakudo/nom: Basically by not checking for the index being in range.  Since Lists

[22:11] <dalek> rakudo/nom: are immutable and cannot have holes (unlike arrays), just checking for

[22:11] <dalek> rakudo/nom: null is an equally good way to know you're done.

[22:11] <dalek> rakudo/nom:

[22:11] <dalek> rakudo/nom: This of course assumes that the VM *does* check for index being in

[22:11] <dalek> rakudo/nom: range, but in a much faster way.

[22:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/33ab86837a

[22:16] <lizmat> m: use nqp; sub a(@a) { say nqp::getattr(@a,List,q/$!todo/) }; a((1,2,3))  #@a is completely reified

[22:16] <camelia> rakudo-moar b7e224: OUTPUT¬´(Mu)‚ê§¬ª

[22:16] <lizmat> m: use nqp; sub a(*@a) { say nqp::getattr(@a,List,q/$!todo/) }; a(1,2,3)  # @a is completely lazy

[22:16] <camelia> rakudo-moar b7e224: OUTPUT¬´List::Reifier.new‚ê§¬ª

[22:17] <lizmat> m: sub a(*@a) { @a.push(4); dd @a }; a(1,2,3)   # I assume this is correct behaviour?  Or not ?

[22:17] <camelia> rakudo-moar b7e224: OUTPUT¬´[1, 2, 3, 4]‚ê§¬ª

[22:18] <lizmat> jnthn: I could argue that a slurpy array is actually a List inside the block, and thus immutable

[22:19] <lizmat> jnthn: if that is too difficult, I would argue that we should probably completely reify slurpies when we can, possibly at compile time ?

[23:14] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make iterating over a list about 10% faster again

[23:14] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/134302950 https://github.com/rakudo/rakudo/compare/b7e224fadbc9...33ab86837a2e
