[00:04] <dalek> roast: 1238f39 | (Zoffix Znet)++ | S03-junctions/autothreading.t:

[00:04] <dalek> roast: Remove trailing whitespace

[00:04] <dalek> roast: review: https://github.com/perl6/roast/commit/1238f39d2d

[00:05] <dalek> rakudo/nom: 9fc616f | (Zoffix Znet)++ | src/core/Bool.pm:

[00:05] <dalek> rakudo/nom: Make Bool.ACCEPTS autothread

[00:05] <dalek> rakudo/nom:

[00:05] <dalek> rakudo/nom: Currently, Bool:U.ACCEPTS uses nqp to test for whether the passed arg

[00:05] <dalek> rakudo/nom: istype(Bool), but that will always be false for all Junctions.

[00:05] <dalek> rakudo/nom:

[00:05] <dalek> rakudo/nom: Remove the Mu type constraint so we autothread and smartmatch of Junctions

[00:05] <dalek> rakudo/nom: against Bool type object does not produce incorrect results.

[00:05] <dalek> rakudo/nom:

[00:05] <dalek> rakudo/nom: Fixes RT#130426: https://rt.perl.org/Ticket/Display.html?id=130426

[00:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9fc616f875

[00:05] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130426

[00:06] <dalek> roast: 34ae318 | (Zoffix Znet)++ | S03-junctions/autothreading.t:

[00:06] <dalek> roast: Test we can smartmatch Junctions against Bool:U

[00:06] <dalek> roast:

[00:06] <dalek> roast: RT#130426: https://rt.perl.org/Ticket/Display.html?id=130426

[00:06] <dalek> roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/9fc616f875

[00:06] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130426

[00:06] <dalek> roast: review: https://github.com/perl6/roast/commit/34ae318971

[00:08] <notviki> damn, this is my only fix for the day? :S

[00:08] <notviki> And I didn't even game today....

[00:08] * notviki switches IRC window away from #perl6

[00:12] <notviki> buggable: tag REGRESSION

[00:12] <buggable> notviki, There are 18 tickets tagged with REGRESSION; See http://perl6.fail/t/REGRESSION for details

[00:18] * dugword follows notviki to #perl6-dev to ask more questions

[00:41] <AlexDaniel> notviki just thanked himself for the bug report xD

[00:42] * notviki is consistent

[00:42] <samcv> buggable, tag UNI

[00:42] <buggable> samcv, There are 26 tickets tagged with UNI; See http://perl6.fail/t/UNI for details

[01:48] <AlexDaniel> m: my $i = 'a'.Int; say WHAT $i

[01:48] <camelia> rakudo-moar 9fc616: OUTPUT«(Failure)␤»

[02:13] <AlexDaniel> can somebody comment on this:

[02:13] <AlexDaniel> m: my @a; @a = (2, 3,4); @a[3] = slip(2, 3); dd @a

[02:13] <camelia> rakudo-moar 9fc616: OUTPUT«Array @a = [2, 3, 4, slip(2, 3)]␤»

[02:13] <AlexDaniel> commit: 2015.11 my @a; @a = (2, 3,4); @a[3] = slip(2, 3); dd @a

[02:13] <committable6> AlexDaniel, ¦«2015.11»: Array $var = $[2, 3, 4, (2, 3)]

[02:13] <AlexDaniel> storing a slip in an array? Does it make sense?

[02:22] <notviki> makes sense to me. Otherwise there'd be no way to pass Slips around

[02:22] <notviki> it's itemized

[02:22] <notviki> committable6: 2015.11 Slip.new(<a b c>).perl.say

[02:22] <committable6> notviki, ¦«2015.11»: ($("a", "b", "c"),)

[02:23] <notviki> committable6: 2015.11 slip.new(<a b c>).perl.say

[02:23] <committable6> notviki, ¦«2015.11»: ($("a", "b", "c"),)

[02:23] <notviki> committable6: 2015.11 slip(<a b c>).perl.say

[02:23] <committable6> notviki, ¦«2015.11»: ("a", "b", "c")

[02:23] <notviki> yup, that's just .perl output changed methinks

[02:24] <notviki> commit: 2015.11 my @a; @a = (2, 3,4); @a[3] = slip(2, 3); dd @a[3].WHAT

[02:25] <committable6> notviki, ¦«2015.11»: Cannot look up attributes in a type object␤  in block <unit> at /tmp/60FImetZD9:1␤ «exit code = 1»

[02:25] <notviki> commit: 2015.11 my @a; @a = (2, 3,4); @a[3] = slip(2, 3); dd @a[3].^name

[02:25] <committable6> notviki, ¦«2015.11»: Str $var = "Slip"

[02:25] <notviki> \o/

[02:46] <AlexDaniel> okay, great

[03:02] <notviki> AlexDaniel++

[03:13] <samcv> m: 7 ~ "\x[308]" x 100_000

[03:13] <camelia> rakudo-moar 9fc616: OUTPUT«WARNINGS for <tmp>:␤Useless use of "~" in expression "7 ~ \"\\x[308]\" x" in sink context (line 1)␤»

[03:13] <samcv> m: so 7 ~ "\x[308]" x 100_000

[03:14] <samcv> m: say 'test'

[03:14] <samcv> crap

[03:14] <samcv> i think i filled up the bot's memory

[03:14] <samcv> had to kill my moarvm cause computer started lagging

[03:15] <samcv> oh nice. Konsole is using 28% of my memory

[03:15] <camelia> rakudo-moar 9fc616: OUTPUT«WARNINGS for <tmp>:␤Useless use of "so " in expression "so 7 ~" in sink context (line 1)␤»

[03:15] <camelia> rakudo-moar 9fc616: OUTPUT«test␤»

[03:16] <samcv> m:  7 ~ "\x[308]" x 150_000

[03:16] <camelia> rakudo-moar 9fc616: OUTPUT«(signal SEGV)»

[03:16] <samcv> hm

[03:17] <notviki> That one blows through the stack

[03:17] <samcv> m:  7 ~ "\x[308]" x 150_000000

[03:17] <samcv> m:  7 ~ "\x[308]" x 150000000

[03:18] <camelia> rakudo-moar 9fc616: OUTPUT«(timeout)»

[03:18] <notviki> samcv: https://irclog.perlgeek.de/moarvm/2016-09-13#i_13205266

[03:19] * notviki &

[03:20] <samcv> well it works if it's long enough. for some reason

[03:20] <samcv> oh well

[03:20] <samcv> m:  7 ~ "\x[308]" xx 150000000

[03:20] <camelia> rakudo-moar 9fc616: OUTPUT«WARNINGS for <tmp>:␤Useless use of "~" in expression "7 ~ \"\\x[308]\" xx" in sink context (line 1)␤MoarVM panic: Memory allocation failed; could not allocate 1200000000 bytes␤»

[03:20] <samcv> that is the warning one would expect

[03:25] <samcv> i never imagined i would be working in moarvm when i started contributing to perl 6 ha

[03:25] <samcv> first i try to add unicode properties and now i'm implementing string collation… how did this happen

[03:43] <AlexDaniel> .tell notviki the result of this ｢my @a = lazy gather { say 'we actually run' }; sink @a｣ was changed due to https://github.com/rakudo/rakudo/commit/345f6a7146d6b28c37718de22c90f50d9d9b2dcc

[03:43] <yoleaux2> AlexDaniel: I'll pass your message to notviki.

[03:44] <AlexDaniel> .tell notviki can you check if it's ok?

[03:44] <yoleaux2> AlexDaniel: I'll pass your message to notviki.

[03:50] <samcv> notviki, what is the best way to count the number of times a string appears in some text

[03:50] <samcv> non overlapping

[03:50] <samcv> just need the number. i guess comb.elems would prolly work?

[03:59] <samcv> this works fine for my use but was wondering if there was a dedicated thing for that

[04:21] <AlexDaniel> samcv: how efficient do you want it to be? :)

[04:22] <samcv> well i just find a single character

[04:22] <samcv> i just want to count occurances

[04:22] <samcv> and not be loaded like comb is

[04:23] <AlexDaniel> m: say +‘hello world’.match(‘l’, :g)

[04:23] <camelia> rakudo-moar 9fc616: OUTPUT«3␤»

[04:23] <samcv> i guess that is acceptable

[04:24] <AlexDaniel> m: dd ‘hello world’.comb.Bag

[04:24] <camelia> rakudo-moar 9fc616: OUTPUT«(" "=>1,"r"=>1,"l"=>3,"e"=>1,"w"=>1,"h"=>1,"d"=>1,"o"=>2).Bag␤»

[04:25] <AlexDaniel> anyway, enough for today

[04:25] <AlexDaniel> good night o/

[04:43] <dalek> roast: b8271d7 | samcv++ | S15-nfg/GraphemeBreakTest (2 files):

[04:43] <dalek> roast: Correct 4 of the incorrect grapheme counts in GraphemeBreakTest.t

[04:43] <dalek> roast:

[04:43] <dalek> roast: We now pass these 4 tests which had incorrect expected values.

[04:43] <dalek> roast: review: https://github.com/perl6/roast/commit/b8271d7514

[04:51] <samcv> oh i see why we are failing some of these tests.

[04:52] <samcv> er it's actually complicated but. i know what i need to do now :)

[05:16] <samcv> m: "1F468 200D".split(' ').».parse-base(16).say

[05:16] <camelia> rakudo-moar 9fc616: OUTPUT«(128104 8205)␤»

[05:17] <samcv> m: "1F468 200D".split(' ').».parse-base(16).join

[05:17] <camelia> rakudo-moar 9fc616: ( no output )

[05:17] <samcv> m: "1F468 200D".split(' ').».parse-base(16).join.chars

[05:17] <camelia> rakudo-moar 9fc616: ( no output )

[05:17] <samcv> m: "1F468 200D".split(' ').».parse-base(16).join.chars.say

[05:17] <camelia> rakudo-moar 9fc616: OUTPUT«10␤»

[05:17] <samcv> m: "1F468 200D".split(' ').».parse-base(16).say

[05:17] <camelia> rakudo-moar 9fc616: OUTPUT«(128104 8205)␤»

[05:17] <samcv> m: "1F468 200D".split(' ').».parse-base(16).perl.say

[05:17] <camelia> rakudo-moar 9fc616: OUTPUT«(128104, 8205)␤»

[05:17] <samcv> m: "1F468 200D".split(' ').».parse-base(16).perl.join('').chars.say

[05:17] <camelia> rakudo-moar 9fc616: OUTPUT«14␤»

[05:19] <samcv> m: "1F468 200D".split(' ').».parse-base(16).chrs.chars

[05:19] <camelia> rakudo-moar 9fc616: ( no output )

[05:19] <samcv> m: "1F468 200D".split(' ').».parse-base(16).chrs.chars.say

[05:19] <camelia> rakudo-moar 9fc616: OUTPUT«1␤»

[06:52] <dalek> nqp: c54dee8 | samcv++ | src/HLL/Grammar.nqp:

[06:52] <dalek> nqp: Optimize nqp peek_delimiters when checking properties

[06:52] <dalek> nqp:

[06:52] <dalek> nqp: Reduces one `eq` and two property checks into only one property check

[06:52] <dalek> nqp: for the most common case (where we are using some type of punctuation

[06:52] <dalek> nqp: character as our delimiter. If it's not a bracket we can test and make

[06:52] <dalek> nqp: sure it's not a colon just to be sure.

[06:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c54dee86e5

[07:36] <dalek> nqp: e4cf11c | samcv++ | .gitignore:

[07:36] <dalek> nqp: Have git ignore .html files in the root folder

[07:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e4cf11cf80

[08:08] <dalek> rakudo/nom: acec1ea | samcv++ | / (3 files):

[08:08] <dalek> rakudo/nom: Prepare uniprop for implementation of Bidi_Mirroring_Glyph in MVM

[08:08] <dalek> rakudo/nom:

[08:08] <dalek> rakudo/nom: Bidi_Mirroring_Glyph will be implemented as an integer property in MVM.

[08:08] <dalek> rakudo/nom: Set uniprop to get that int and return it as a character.

[08:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/acec1ea6cf

[08:52] <[Tux]> This is Rakudo version 2016.12-135-gacec1ea6c built on MoarVM version 2016.12-23-g3c5253c6

[08:52] <[Tux]> csv-ip5xs        3.149

[08:52] <[Tux]> test            13.639

[08:52] <[Tux]> test-t           5.332

[08:52] <[Tux]> csv-parser      14.057

[08:52] <samcv> sup [Tux]

[08:59] <samcv> ugh nqp why you do this

[08:59] <samcv> Cannot invoke this object (REPR: P6opaque; NQPMu)

[08:59] <samcv> so unhelpful

[09:18] <dalek> nqp/bmg: 7b68aa5 | samcv++ | src/HLL/Grammar.nqp:

[09:18] <dalek> nqp/bmg: Implement Bidi Matching brackets on MoarVM

[09:18] <dalek> nqp/bmg:

[09:18] <dalek> nqp/bmg: This vastly reduces the complexity of finding matching brackets. Access

[09:18] <dalek> nqp/bmg: to this Unicode property will be landing in MoarVM fairly shortly.

[09:18] <dalek> nqp/bmg:

[09:18] <dalek> nqp/bmg: Instead of having to search through a long string of potential

[09:18] <dalek> nqp/bmg: delimiters for our opening delimiter, we only need to get its matching

[09:18] <dalek> nqp/bmg: bracket and then find the ending delimiter.

[09:18] <dalek> nqp/bmg: review: https://github.com/perl6/nqp/commit/7b68aa5b98

[09:18] <samcv> :D

[09:19] <samcv> compared to the code we had before, this is like 10x better. will still have to do it the "old fashioned way" for backends that don't have access to this property yet

[09:25] <samcv> buggable, UNI

[09:25] <samcv> buggable, help

[09:25] <buggable> samcv, tags | tag SOMETAG | eco | eco Some search term | speed

[09:25] <samcv> buggable, tag UNI

[09:25] <buggable> samcv, There are 26 tickets tagged with UNI; See http://perl6.fail/t/UNI for details

[09:26] <samcv> would also be able to make this bug much more awesome https://rt.perl.org/Ticket/Display.html?id=130384#ticket-history

[09:27] <samcv> '<ୈ'.uniprop('Bidi_Mirrored') would return true, but it wouldn't have any matching glyph so we could easily detect degenerates and provide a nice error for that as well

[10:41] <dalek> roast: 41ee7e7 | samcv++ | S15-nfg/GraphemeBreakTest.t:

[10:41] <dalek> roast: Fudge the updated GraphemeBreakTest.t’s

[10:41] <dalek> roast:

[10:41] <dalek> roast: We pass ~5 more of the updated tests compared to before, but I had

[10:41] <dalek> roast: forgotten to push after refudging the generated code.

[10:41] <dalek> roast: review: https://github.com/perl6/roast/commit/41ee7e7bc8

[11:06] <notviki> m: my @a = lazy gather { say 'we actually run' }; sink @a

[11:06] <camelia> rakudo-moar acec1e: OUTPUT«WARNINGS for <tmp>:␤Useless use of @a in sink context (line 1)␤»

[11:06] <yoleaux2> 03:43Z <AlexDaniel> notviki: the result of this ｢my @a = lazy gather { say 'we actually run' }; sink @a｣ was changed due to https://github.com/rakudo/rakudo/commit/345f6a7146d6b28c37718de22c90f50d9d9b2dcc

[11:06] <yoleaux2> 03:44Z <AlexDaniel> notviki: can you check if it's ok?

[11:07] <notviki> .tell AlexDaniel looks OK to me.

[11:07] <yoleaux2> notviki: I'll pass your message to AlexDaniel.

[11:08] <notviki> committable6: 2015.12 my @a = lazy gather { say 'we actually run' }; sink @a

[11:08] <committable6> notviki, ¦«2015.12»: WARNINGS for /tmp/6UMRyLrSBt:␤Useless use of @a in sink context (line 1)␤we actually run

[11:08] <notviki> yeah

[11:09] <notviki> Not sure why we warn on explicit sink, but whatever.

[11:41] <dalek> rakudo/nom: 696b1f4 | lizmat++ | src/core/Shaped1Array.pm:

[11:41] <dalek> rakudo/nom: Fix for RT #130451

[11:41] <dalek> rakudo/nom:

[11:41] <dalek> rakudo/nom: Also fixes an unseen issue with the push-all case.  AlexDaniel++

[11:41] <dalek> rakudo/nom: for spotting.

[11:41] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130451

[11:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/696b1f47d5

[11:45] <samcv> also if anybody sees any unicode implementation related bug, please CC or message me so i can add to my list

[11:46] <notviki> \o/

[11:46] <lizmat> m: say 0/0 cmp -Inf   # root problem of RT #130452

[11:46] <camelia> rakudo-moar acec1e: OUTPUT«More␤»

[11:46] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130452

[11:47] <samcv> isn't 0/0 undefined

[11:48] <samcv> i mean in like. real life not in like perl 6 that is

[11:48] <lizmat> m: say (0/0).WHAT

[11:48] <camelia> rakudo-moar acec1e: OUTPUT«(Rat)␤»

[11:48] <samcv> ah

[11:48] <samcv> hehehehhehehehe

[11:48] * samcv chuckles

[11:48] <lizmat> m: say 0/0

[11:48] <camelia> rakudo-moar acec1e: OUTPUT«Attempt to divide by zero using div␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[11:48] <lizmat> I guess we need to throw on 0/0 cmp -Inf

[11:49] <samcv> yeah

[11:49] <notviki> (-∞^..^∞).in-range: 0/0

[11:49] <notviki> m: (-∞^..^∞).in-range: 0/0

[11:49] <camelia> rakudo-moar acec1e: ( no output )

[11:49] <samcv> i finally figured a way around that unicode bug that was bugging me. about Q<? something > where ? is some combinig mark

[11:49] <samcv> once next few moar patches get accepted, for moarvm we can use unicode properties to check brackets

[11:49] <notviki> m: say 0/0 cmp 1/0

[11:49] <camelia> rakudo-moar acec1e: OUTPUT«More␤»

[11:49] <notviki> m: say 0/0 cmp -1/0

[11:49] <camelia> rakudo-moar acec1e: OUTPUT«More␤»

[11:50] <notviki> m: say 0/0 cmp -1/1

[11:50] <camelia> rakudo-moar acec1e: OUTPUT«More␤»

[11:50] <samcv> and if we find an opening bracket, and can't find an ending one, we can provide a better error message

[11:50] <notviki> m: say 0/0 cmp 1/1

[11:50] <camelia> rakudo-moar acec1e: OUTPUT«More␤»

[11:50] <notviki> heh

[11:50] <samcv> because if we can't find one (and it's a bidi_mirroring character) it's most likely either a bug or a combining character

[11:50] <notviki> m: say NaN cmp 1/1

[11:50] <camelia> rakudo-moar acec1e: OUTPUT«More␤»

[11:50] <samcv> can see if they supplied multiple codeponits or something and then say what the problem is

[11:50] <notviki> (-∞^..^∞).in-range: NaN

[11:51] <notviki> m: (-∞^..^∞).in-range: NaN

[11:51] <camelia> rakudo-moar acec1e: OUTPUT«Value out of range. Is: NaN, should be in -Inf^..^Inf␤  in block <unit> at <tmp> line 1␤␤»

[11:51] <samcv> since there's no coorasponding unicode mirroring glyph

[11:51] <notviki> m: say 0/0 cmp Inf

[11:51] <camelia> rakudo-moar acec1e: OUTPUT«Less␤»

[11:51] <samcv> .oO(thinks that looks like an emote)

[11:51] <samcv> (-∞^..^∞).in-range: NaN

[11:51] <samcv> at least in this tiny 11px high font. if it's even 11px maybe 9

[11:51] <notviki> m: say 0/0 cmp 9999999999999999999999999999999999999999999999999999999

[11:51] <camelia> rakudo-moar 696b1f: OUTPUT«More␤»

[11:52] <samcv> actually. yeah it is exactly 9 px high

[11:52] <notviki> Interesting...

[11:52] <samcv> (-∞^..^∞ (-∞^..^∞(-∞^..^∞(-∞^..^∞

[11:52] <notviki> m: say -0e0/0 cmp -9999999999999999999999999999999999999999999999999999999

[11:52] <camelia> rakudo-moar 696b1f: OUTPUT«Attempt to divide by zero using /␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[11:52] <notviki> heh, now it explodes? :)

[11:53] <notviki> Ah, it's not a rat anymore

[11:53] <samcv> numbers in the universe can be pretty big

[11:53] <samcv> tho

[11:53] <bartolin> I think about sending a CLA to the Perl Foundation and asking for a commit bit for rakudo. anyone + or - on that?

[11:53] <notviki> bartolin: +1

[11:53] <lizmat> bartolin: +1

[11:54] <bartolin> (I don't plan to commit much more, but at least for some things a commit bit would be handy)

[11:54] <stmuk> http://pl6anet.org/drop/rakudo-star-2016.12.zef-beta.tar.gz

[11:55] <stmuk> panda is patched to warn of its removal in that beta

[11:55] <stmuk> I may blog if I get tuits

[11:55] <lizmat> notviki: if you want to take on RT #130452, please go ahead, will be away in the next hours

[11:55] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130452

[11:55] * lizmat hands stmuk some tuits

[11:55] <stmuk> :)

[11:56] <notviki> lizmat: OK, I'll take it.

[11:56] <samcv> also is it ok if ' ' ~~ /<:space>/ fails on rakudo, even if all other tests pass? i doubt anybody uses that, instead of \s or <.ws> or something. but it's the only roast test

[11:56] <samcv> that cannot be easily fixed by me due to problems in nqp MAST

[11:57] <bartolin> notviki: you sent an email to get your commit bit, didn't you? do you remember the recipient of that email (or could take a look)?

[11:57] <notviki> bartolin: that recepient resigned. Ask samcv

[11:57] <samcv> who resigned?

[11:57] <samcv> oh yes

[11:58] <bartolin> oh. I see

[11:58] <notviki> Last president of TPF

[11:58] <samcv> i sent an email

[11:58] <samcv> to the patent email address

[11:58] <samcv> and explained stuff and things and such reasons etc

[11:58] <bartolin> ah, thanks!

[11:58] <samcv> whatever put them in the email with a scanned copy of the CLA with your signature, and uh

[11:58] <samcv> give them a contact email. of who to CC their response to you

[11:59] <samcv> or something

[11:59] <samcv> idk. the person replying to me just said "you can tell them we got it" but idk. seemed kinda weird

[11:59] <notviki> stmuk: I take the final upload won't have "zef" in it and will just follow our regular naming?, I don't think the downloads page script would handle it

[11:59] <samcv> luckily you all believed me ;P

[11:59] <bartolin> *g*

[11:59] <samcv> who knows maybe i never sent it!

[11:59] <samcv> all part of my evil plan

[12:00] <stmuk> notviki: yes its just there since is another branch currently and it won't have -beta either!

[12:00] * bartolin will try something similiar soon-ish

[12:00] <stmuk> samcv: I'm just checking Linenoise on Windows/mingw

[12:00] <samcv> oh nice

[12:01] <samcv> yeah. def gonna improve that message before the next release for sure. hope nobody thinks i'm ignoring it.

[12:37] <stmuk> samcv: ah you are right .. Linenoise HEAD is broken on Windows and I had to use an earlier version

[12:37] <dalek> nqp: eaa3eb1 | samcv++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[12:37] <dalek> nqp: unicmp_s add it

[12:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/eaa3eb109c

[12:37] <dalek> nqp: e71e517 | samcv++ | tools/build/MOAR_REVISION:

[12:37] <dalek> nqp: Bump Moar revision to pull in the new Unicode string compare (UCA)

[12:37] <stmuk> https://github.com/rakudo/star/commit/4b2ad3c6be746ca63ebed01e322116f2716a7faf

[12:37] <samcv> ah

[12:37] <samcv> dalek is bad at printing commits

[12:38] <samcv> tho the commit message here: https://github.com/perl6/nqp/commit/003919e5bc42fecf286860596888c67dd659ca5a is the same as the PR so can be seen in both projects

[12:39] <stmuk> samcv: I'd suggest the REPL just suggest about Linenoise (and not Readline anyway)

[12:43] <dalek> rakudo/nom: 3383361 | samcv++ | tools/build/NQP_REVISION:

[12:43] <dalek> rakudo/nom: Bump NQP version to bring in new nqp op for Unicode string sort (UCA)

[12:43] <dalek> rakudo/nom:

[12:43] <dalek> rakudo/nom: Full details on the op can be see on the nqp commit:

[12:43] <dalek> rakudo/nom: https://github.com/perl6/nqp/commit/003919e5bc42fecf286860596888c67dd659ca5a

[12:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3383361189

[12:46] * stmuk opens an issue against p6-linenoise

[12:47] * samcv is gonna bout pass out asleep

[12:47] <samcv> quite shortly. and this time not an exaggeration, actually going to bed within 30 mins

[16:24] <lizmat> Files=1159, Tests=54450, 189 wallclock secs (10.86 usr  4.41 sys + 1134.01 cusr 123.88 csys = 1273.16 CPU)  # with TEST_JOBS=10

[16:45] <AlexDaniel> ok, the last one is probably a duplicate

[16:46] <AlexDaniel> of RT #128872

[16:46] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128872

[16:47] <AlexDaniel> ok, merged

[16:53] <AlexDaniel> lizmat: hey! What do you think about this

[16:53] <AlexDaniel> commit: 2015.12,HEAD say "7\x[308]".NFC ~~ /^ \d+ $/

[16:53] <committable6> AlexDaniel, ¦«2015.12»: ｢7̈｣␤¦«HEAD»: ｢55｣

[16:53] <AlexDaniel> bisectable points to this: https://github.com/rakudo/rakudo/commit/e4dc8b6ed1f9b3b4846f0e371c9b8e0569b798c5

[16:54] <AlexDaniel> hmmm that might be the wrong one though…

[16:55] <lizmat> pretty sure that was just an nqpifaction

[16:55] <AlexDaniel> yea it broke it but in a different way… hold on

[17:03] <lizmat> https://www.reddit.com/r/perl6/comments/5l42il/sharing_your_p6_program_with_others_any_plan_to/?st=ixc1sg0u&sh=b406b6f9  # any takers?

[17:05] <notviki> IIRC there was an RT for that

[17:05] <notviki> This https://rt.perl.org/Ticket/Display.html?id=129909#ticket-history

[17:06] <notviki> also, I recall timotimo showing off a movable nqp

[17:06] <notviki> like a binary you could download and just run

[17:08] <lizmat> part of the precomp design was that you should be able to get precomped code from anywhere, so also from within a jar type of file

[17:16] <AlexDaniel> lizmat: ok, here it is

[17:16] <AlexDaniel> committable6: 33eeb32^^^,33eeb32^^,33eeb32^,33eeb32 say "7\x[308]".NFC ~~ /^ \d+ $/

[17:16] <committable6> AlexDaniel, ¦«33eeb32^^^»: ｢7̈｣␤¦«33eeb32^^,33eeb32^»: This representation (VMArray) does not support attribute storage (for type NFC)␤  in block <unit> at /tmp/7c6yDMIEt0 line 1␤ «exit code = 1»␤¦«33eeb32»: ｢55｣

[17:17] <notviki> m: use nqp; -> \a { dd nqp::getattr(a, a.WHAT, '$!denominator') }($_) given <42/1>

[17:17] <camelia> rakudo-moar 338336: OUTPUT«1␤»

[17:17] <AlexDaniel> committable6:  05b65d0,e4dc8b6,8c35481,33eeb32 say "7\x[308]".NFC ~~ /^ \d+ $/

[17:17] <committable6> AlexDaniel, ¦«05b65d0»: ｢7̈｣␤¦«e4dc8b6,8c35481»: This representation (VMArray) does not support attribute storage (for type NFC)␤  in block <unit> at /tmp/L9mYdkqIIM line 1␤ «exit code = 1»␤¦«33eeb32»: ｢55｣

[17:17] <notviki> nm was gonna ask a question but then I realized what I did wrong

[17:18] <AlexDaniel> lizmat: so it's a combination of 05b65d0 and 33eeb32

[17:20] <AlexDaniel> lizmat: previously ~~ assumed that NFC is a Str-like thingy, now it attempts to match the ord value of the first character

[17:27] <TimToady> notviki: the sink statement prefix didn't used to warn before you did 345f6a7146d6b28c37718de22c90f50d9d9b2dcc, but I think it's probably better than an explicit sink turns into a sink method, so that the user has to put 'eager' if that's really what they mean

[17:28] <notviki> m: my @a; sink @a

[17:28] <camelia> rakudo-moar 338336: OUTPUT«WARNINGS for <tmp>:␤Useless use of @a in sink context (line 1)␤»

[17:28] <notviki> committable6: 2015.12 my @a; sink @a

[17:28] <committable6> notviki, ¦«2015.12»: WARNINGS for /tmp/WFMUPewq9V:␤Useless use of @a in sink context (line 1)

[17:28] <notviki> TimToady: ^ seems it warned before that commit too

[17:28] <TimToady> on cmp, the idea was to sort NaN to the end as if it were a string, not to blow up, since it's not intended to reflect any kind of mathematical relationship, but to primarily serve as the basis for sort, which generally should produce results regardless of the input

[17:29] <notviki> Yeah, that's what I'm making it work like. Just trying to find best performant method (I think I found it; just spectesting)

[17:30] <TimToady> perhaps it's parsing it as a listop rather than a statement prefix there

[17:31] <TimToady> shouldn't though

[17:31] <notviki> --target=parse gives - statement_prefix: sink @a

[17:31] <notviki> - sym: sink

[17:31] <TimToady> okay, that's good

[17:31] <TimToady> that falls out from the literal prefix rule

[17:31] <TimToady> which basically prefers 'x' to \w

[17:32] <TimToady> anyway, I'm fine with explicit sink warning, though it possibly be taught to suggest 'eager' in such a case

[17:33] <TimToady> not sure how we'd know at the time that it was explicit though

[17:33] <TimToady> I don't think the context in the optimizer tracks that

[17:33] <TimToady> shower &~

[17:36] <notviki> hmmm... Stage parse      : Cannot invoke this object (REPR: Null; VMNull)

[17:36] <notviki> at SETTING::src/core/traits.pm:132  (<ephemeral file>:trait_mod:<is>

[17:36] <notviki> Any trick for making `is default` on  a Routine work in the setting?

[17:36] <notviki> trying to make (Rational:D \a, Rational:D \b) tighter than (Real:D \a, Real:D \b)

[17:36] <lizmat> on a Routine ?

[17:36] <notviki> Yeah

[17:36] <lizmat> ah

[17:37] <lizmat> well, look at what trait_mod(Routine:D, :$!default!) does in terms of mop

[17:37] <lizmat> and copy paste

[17:37] <lizmat> ?

[17:38] <notviki> oh, heh; all it does is mixes in does role { method default() { True } } ^_^

[17:41] <notviki> no idea  how I'd apply that on my own tho :/

[17:46] <notviki> ah, looks like the `does` operator isn't yet available at that point

[17:47] * notviki looks for an alterantive point to stick stuff into

[17:54] <lizmat> notviki: does is basically a ^mixin

[17:54] <cygx> .tell samcv I believe you misread RT #129878 - the issue is not stringifying a list generated by xx (did you miss the [~]), but the string generated by x

[17:54] <yoleaux2> cygx: I'll pass your message to samcv.

[17:54] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129878

[17:55] <notviki> m: multi foo (Rational, Rational) {say "got it"}.^mixin(role { method default() { True } }); multi foo (Real, Real) {say "fail"}; foo 1.1, 1.1

[17:55] <camelia> rakudo-moar 338336: OUTPUT«Ambiguous call to 'foo'; these signatures all match:␤:(Rational $, Rational $)␤:(Real $, Real $)␤  in block <unit> at <tmp> line 1␤␤»

[17:55] <lizmat> notviki: obj.^mixin($role).BUILD_LEAST_DERIVED({})

[17:55] <notviki> 0.o

[17:55] <lizmat> perhaps in a BEGIN block  :-)

[17:55] <notviki> eh

[17:56] <notviki> I move it into src/core/operators and it works now (the is default)

[17:56] <notviki> I mean I moved the thing I wanted to apply it to

[17:56] <lizmat> ok

[17:57] <lizmat> AlexDaniel: reverting 33eeb32 gives the VMArray error

[17:58] <AlexDaniel> lizmat: yup, you'd have to revert 05b65d0b1 as well to get the previous behavior

[17:59] <AlexDaniel> lizmat: I've created a ticket for this RT #130458, but to be honest I have no idea what's going on and what should this code do

[17:59] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130458

[18:00] <notviki> ZOFVM: Files=1208, Tests=130861, 160 wallclock secs (22.40 usr  3.42 sys + 2776.65 cusr 253.22 csys = 3055.69 CPU)

[18:34] <lizmat> AlexDaniel: the problem is really in Regex.ACCEPTS(@a), that's the candidate .NFC winds up in

[18:35] <lizmat> maybe we should add a Regex.ACCEPTS(Uni:D candidate) ?

[18:36] <AlexDaniel> vOv

[18:36] <lizmat> testing that now

[18:40] <lizmat> $ 6l 'say "7\x[308]".NFC ~~ /./'

[18:40] <lizmat> ｢7̈｣

[18:40] <lizmat> at least this restores previous behaviour and it will allow for easier changes should we decide on other behaviour

[18:49] <dalek> rakudo/nom: 8d35951 | lizmat++ | src/core/Regex.pm:

[18:49] <dalek> rakudo/nom: Fix for RT #130458

[18:49] <dalek> rakudo/nom:

[18:49] <dalek> rakudo/nom: Spotted by AlexDaniel++, this patch reverts to the old behaviour

[18:49] <dalek> rakudo/nom: of interpreting a Uni as a .Str for regex matching.  Still not sure

[18:49] <dalek> rakudo/nom: that's what we want, but since we have now isolated this behaviour

[18:49] <dalek> rakudo/nom: into a separate Regex.ACCEPTS candidate (it was formerly taken by

[18:49] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130458

[18:49] <dalek> rakudo/nom: the @a candidate), an adaptation of behaviour should now be simple

[18:49] <dalek> rakudo/nom: if so needed.

[18:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8d359518dd

[18:50] <moritz> does that mean I can regex-match against an Uni?

[18:51] <lizmat> moritz: yes

[18:51] <moritz> and how do I get from Str to Uni?

[18:51] <lizmat> it will do a .Str on the Uni

[18:51] <lizmat> .NFC ?

[18:51] <moritz> :(

[18:51] <moritz> I have an open bug report for JSON::Tiny

[18:51] <lizmat> link?

[18:51] <moritz> it can't parse quoted strings if the first character in the string is a combining charcter

[18:52] <moritz> https://github.com/moritz/json/issues/25

[18:52] <moritz> and that's because to the regex engine, there is no ", just a " + combiner as a single grapheme

[18:52] <moritz> and i have zero ideas how to fix it

[18:53] <lizmat> hmmm... ok, but that's really at a completely different level

[18:53] <moritz> that's why I hoped I could regex-match against a Uni without turning it into a Str

[18:53] <moritz> any other ideas how to fix that?

[18:53] <lizmat> the fix I did was basically add:  method ACCEPTS(Regex:D: Uni:D \uni) { self.ACCEPTS(uni.Str) }

[18:53] <notviki> :/

[18:54] <notviki> Range.in-range is 100% unspecceed

[18:54] <lizmat> and undocumented ?

[18:54] <moritz> the only other thing I could think of was to use :ignoremark, but then I'll lose the combiner

[18:54] <notviki> Seems so; doesn't show up in search on docs.perl6.org

[18:55] <lizmat> fwiw, I think I added it as an internal method really

[18:55] <notviki> OK. I'll test it just in Rakudo's t/

[19:16] <dalek> rakudo/nom: afb6d65 | (Zoffix Znet)++ | t/02-rakudo/05-range-in-range.t:

[19:16] <dalek> rakudo/nom: Add basic tests for Range.in-range

[19:16] <dalek> rakudo/nom:

[19:16] <dalek> rakudo/nom: It's a somewhat internal method with no presence in the roast, so

[19:16] <dalek> rakudo/nom: I'm adding it in Rakudo's t/

[19:16] <dalek> rakudo/nom:

[19:16] <dalek> rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2016-12-30#i_13825497

[19:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/afb6d654ac

[19:18] <moritz> does MoarVM support non-NFG strings?

[19:21] <stmuk> has any analysis been done on module dependencies in the ecosystem to identify the most popular/

[19:22] <moritz> yes

[19:22] <stmuk> where are the results and/or the scripts?

[19:23] <moritz> https://github.com/finanalyst/ModuleCitation

[19:23] <stmuk> ty

[19:24] <moritz> http://perlpunks.de/paste/show/5866b44b.5e35.3d7 data from 2015-11

[19:25] <stmuk> ah great

[19:27] <notviki> hmm... t/spec/S17-procasync/stress.t hung on me :/

[19:44] <dalek> rakudo/nom: a567eb4 | (Zoffix Znet)++ | src/core/ (2 files):

[19:44] <dalek> rakudo/nom: Fix infix:<cmp>(Real,Real) with 0-denominator Rationals

[19:44] <dalek> rakudo/nom:

[19:44] <dalek> rakudo/nom: We have adopted[^1] IEEE 754-2008 semantics for 0-denominator rationals,

[19:44] <dalek> rakudo/nom: so that <0/0> is NaN, <-1/0> is -Inf, and <1/0> is Inf when .Num'ed.

[19:44] <dalek> rakudo/nom: However, currently infix:<cmp>(Real:D, Real:D) candidate short-cuircuits

[19:44] <dalek> rakudo/nom: when one of the arguments is Num(±Inf), which causes incorrect comparison

[19:44] <dalek> rakudo/nom: results when the other argument is one of the aforementioned Rats.

[19:44] <dalek> rakudo/nom:

[19:44] <dalek> rakudo/nom: Fix by detecting whether we have a 0-denominator Rational before trying to

[19:44] <dalek> rakudo/nom: short-curcuit with the Num(±Inf) logic. This method is most optimal I could

[19:44] <dalek> rakudo/nom: find, with other methods I tried giving 50%–300% slowdowns. The current

[19:44] <notviki> rakudo/nom: method gives about a 4%–8% slowdown, depending on the types of Reals compared.

[19:44] <notviki> rakudo/nom:

[19:45] <notviki> rakudo/nom: The worst hit of 22% was when comparing Rational against another Rational,

[19:45] <notviki> rakudo/nom: so I added another infix:<cmp>(Rational, Rational) candidate, which actually

[19:45] <notviki> rakudo/nom: made Rational cmp Rational 150% *faster*. Since this candidate is ambiguious

[19:45] <notviki> rakudo/nom: with Real,Real candidate, I had to stick `is default` on it, but because

[19:45] <notviki> rakudo/nom: `is default` uses `does` operator that doesn't appear until later in the

[19:45] <notviki> rakudo/nom: setting, I had to define this new infix:<cmp> candidate in src/core/operators

[19:45] <notviki> rakudo/nom: instead of src/core/Order.

[19:45] <notviki> rakudo/nom:

[19:45] <notviki> rakudo/nom: This commit also 99% fixes the .in-range(0/0) ticket[^2], except for the

[19:45] <notviki> rakudo/nom: small adjustment still needed in the exception it generates.

[19:45] <notviki> rakudo/nom:

[19:45] <notviki> rakudo/nom: [1] https://github.com/rakudo/rakudo/commit/1f3ca6469759c79aa809d60a7741b3a

[19:45] <notviki> rakudo/nom: [2] https://rt.perl.org/Ticket/Display.html?id=130452#ticket-history

[19:45] <notviki> rakudo/nom:

[19:45] <notviki> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a567eb44cae0cdae0b83e7f37ae3ddaa2743df24

[19:46] <dalek> roast: b5049e0 | (Zoffix Znet)++ | S03-operators/cmp.t:

[19:46] <dalek> roast: Test infix:<cmp> with 0-denominator Rationals

[19:46] <dalek> roast:

[19:46] <dalek> roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/a567eb44cae0cdae0

[19:46] <dalek> roast: review: https://github.com/perl6/roast/commit/b5049e033a

[19:55] <dalek> rakudo/nom: b2332c2 | (Zoffix Znet)++ | / (2 files):

[19:55] <dalek> rakudo/nom: Fix Range.in-range dying when $got is a 0-denominator Rat

[19:55] <dalek> rakudo/nom:

[19:55] <dalek> rakudo/nom: By sticking a .perl() on it.

[19:55] <dalek> rakudo/nom:

[19:55] <dalek> rakudo/nom: Along with cmp fix[^1], Fixes

[19:55] <dalek> rakudo/nom: RT#130452: https://rt.perl.org/Ticket/Display.html?id=130452

[19:55] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130452

[19:55] <dalek> rakudo/nom:

[19:55] <dalek> rakudo/nom: Since this is an internalish method, adding tests to t/ instead

[19:55] <dalek> rakudo/nom: of roast.

[19:55] <dalek> rakudo/nom:

[19:55] <dalek> rakudo/nom: [1] https://github.com/rakudo/rakudo/commit/a567eb44cae0cdae0b83e

[19:55] <notviki> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b2332c2172e8eaf52a0cce10266845bb61cf018a

[19:56] <notviki> Perfect timing...

[19:56] <notviki> I'm done working for the year!

[19:56] * notviki relocates

[20:13] <japhb> Something has gone a bit screwy in the last few days with either Rakudo or Zef that is messing with the ecosystem.  See the issue I just filed for NativeHelpers::Blob:  https://github.com/salortiz/NativeHelpers-Blob/issues/2  -- this means DBIish won't install because NativeHelpers::Blob won't install because mysteriously one of the test files doesn't seem to run.

[20:22] <notviki> japhb, can you include in the issue the output of t basic? Right now the issue doen't include why it's failing

[20:23] <notviki> "not tests run" likely means it failed to compile

[20:34] <japhb> notviki: It compiles and runs fine with the slightly older Rakudo, and I can't see anything obvious in the test code.  (I can't immediately test again with newest Rakudo/zef because I don't have access on that machine right now.)

[20:35] <ugexe> it installed ok for me with a week-ish old rakudo

[20:38] <japhb> ugexe: Yeah, that's why I think something must have happened relatively recently

[20:41] <ugexe> I just retested on blead and it also installed

[20:41] <japhb> Huh.

[20:42] <japhb> Maybe I got an unlucky revision.

[20:42] <ugexe> however I'm not getting the warnings you are either

[20:43] <japhb> ugexe: That's odd ... did you rebuild the whole stack with natural revisions (the ones specified with *_REVISION)?

[20:43] <japhb> Also, what platform are you on?

[20:46] <ugexe> I don't know what *_REVISION stuff is. I just rakudobrew nuke moar-blead && rakudobrew build moar-blead && perl6 -Ilib bin/zef install NativeHelpers::Blob

[20:47] <ugexe> debian x86_64

[20:48] <japhb> What version of gcc or clang?

[20:48] <ugexe> gcc version 5.3.1 20160528 (Debian 5.3.1-21)

[20:49] <japhb> My gcc is older (4.8.4 -- that machine is a slightly older Linux Mint, based on Ubuntu 14.04)

[20:51] <japhb> By *_REVISION, I meant NQP_REVISION and MOAR_REVISION (meaning whether you were building using the specified revisions, or forcing master).

[20:51] <japhb> I don't use rakudobrew, I build from scratch ... I wonder if that has anything to do with it

[20:52] <ugexe> HEAD

[20:54] <japhb> ugexe: Is there a way to tell zef to test verbosely?

[20:55] <notviki> you can clone the repo and run prove -e 'perl6 -Ilib' -vlr t/  in it

[20:57] <ugexe> no, I havent looked at how to get that from TAP::Harness yet. You *could* do `--/tap-harness --/prove --perl6-test` (which just runs `perl6 t/$file` for every test file)

[21:00] <japhb> OK, I'm going to get access on the machine that's having trouble again, switch to --per6-test, and try to rerun the test.

[21:02] <ugexe> zef will have stored NativeHelpers::Blob in like ~/.zef/store/native-helpers.git/$some-sha1/ so you can also work from there directly

[21:05] <AlexDaniel> m: dd Inf.Rat

[21:05] <camelia> rakudo-moar b2332c: OUTPUT«P6opaque: get_boxed_ref could not unbox for the representation '20' of type Num␤  in block <unit> at <tmp> line 1␤␤»

[21:05] <AlexDaniel> what's 20?

[21:06] <notviki> rat

[21:07] <jnthn> Rat ain't a REPR :)

[21:07] <jnthn> Probably the internal ID for P6bigint

[21:07] <jnthn> If that's happening, it probably means a non-Int was fed to an op that expected one

[21:07] <notviki> well, it's sticking rat into isbig_I

[21:07] <jnthn> Ah, or that

[21:07] <jnthn> It won't go well

[21:08] <AlexDaniel> m: dd <−4/2>

[21:08] <camelia> rakudo-moar b2332c: OUTPUT«-2.0␤»

[21:08] <AlexDaniel> notviki: what was the justification for not having a RatStr here?

[21:08] <AlexDaniel> what: dd <−4/2>

[21:08] <evalable6> AlexDaniel, rakudo-moar b2332c2: OUTPUT«-2.0»

[21:08] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=b2332c2) because on both starting points the exit code is 0

[21:08] <notviki> m: use nqp; nqp::isbig_I(1.1)

[21:08] <camelia> rakudo-moar b2332c: OUTPUT«P6opaque: get_boxed_ref could not unbox for the representation '20' of type Rat␤  in block <unit> at <tmp> line 1␤␤»

[21:08] <committable6> AlexDaniel, ¦«2015.12,2016.02,2016.03,2016.04,2016.05,2016.06,2016.07.1,2016.08.1,2016.09,2016.10,2016.11»: "−4/2"␤¦«2016.12,HEAD»: -2.0

[21:08] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/d4b3507e3f51ee42ee116226776c4219

[21:08] <bisectable6> AlexDaniel, (2016-11-21) https://github.com/rakudo/rakudo/commit/cb9df2bd40a10355d3bcc067943542611759f0c8

[21:09] <notviki> AlexDaniel, I'm on the bus and yout Q scrolled outta view alreqdy :)

[21:09] <notviki> will respond in ~30m

[21:09] * notviki &

[21:09] <AlexDaniel> notviki: :)

[21:10] <jnthn> Hm, the error suggest it passed a Num to a bigint op rather than a Rat though

[21:10] <jnthn> Anyway, the answer is "fix Rakudo to not do that" :)

[21:11] <jnthn> A Rat can't represent Inf, so a Failure is probably a reasonable answer

[21:12] <AlexDaniel> are you sure about this?

[21:12] <AlexDaniel> m: say (1/0).Num

[21:12] <camelia> rakudo-moar b2332c: OUTPUT«Inf␤»

[21:13] <jnthn> m: say (-1/0).Num

[21:13] <camelia> rakudo-moar b2332c: OUTPUT«-Inf␤»

[21:13] <jnthn> Hmm

[21:13] <AlexDaniel> m: say (0/0).Num

[21:13] <camelia> rakudo-moar b2332c: OUTPUT«NaN␤»

[21:13] <AlexDaniel> yea…

[21:13] <jnthn> Heh, then why ain't it producing those Rats on coercion from Num?

[21:13] <jnthn> If it roundtrips I guess it's OK

[21:14] <AlexDaniel> we can probably bisect by this to see a nice commit message…

[21:14] <AlexDaniel> b: say (0/0).Num

[21:14] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=b2332c2) because on both starting points the exit code is 0

[21:14] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/b78cc312c803dc278abdc81b768043d4

[21:14] <bisectable6> AlexDaniel, (2016-05-21) https://github.com/rakudo/rakudo/commit/1f3ca6469759c79aa809d60a7741b3a92fb9330f

[21:14] <AlexDaniel> m: say Inf.Rat

[21:14] <camelia> rakudo-moar b2332c: OUTPUT«Inf␤»

[21:14] <AlexDaniel> m: say Inf.Rat.perl

[21:14] <camelia> rakudo-moar b2332c: OUTPUT«P6opaque: get_boxed_ref could not unbox for the representation '20' of type Num␤  in block <unit> at <tmp> line 1␤␤»

[21:15] <AlexDaniel> oohh so it is indeed supposed to give 1/0 and -1/0 and 0/0 !

[21:15] <jnthn> Oh...

[21:15] <jnthn> Wat.

[21:15] <jnthn> So it's .perl that's bust, not the coercion?

[21:15] <AlexDaniel> c: 1f3ca64 say Inf.Rat.perl

[21:15] <committable6> AlexDaniel, ¦«1f3ca64»: <1/0>

[21:15] <AlexDaniel> b: old=1f3ca64 say Inf.Rat.perl

[21:15] <bisectable6> AlexDaniel, Bisecting by exit code (old=1f3ca64 new=b2332c2). Old exit code: 0

[21:15] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/06b5dd495421121f786f316a6aad11c5

[21:15] <bisectable6> AlexDaniel, (2016-05-26) https://github.com/rakudo/rakudo/commit/498d0a4ae4572a84f80c0c572632e12017d779f3

[21:15] <jnthn> These bots :D

[21:16] <jnthn> This basically creates a special purpose Rat in which the numerator

[21:16] <jnthn> is a Num rather than an Int.

[21:16] <jnthn> ...what??

[21:16] <jnthn> That sounds fragile.

[21:17] <geekosaur> jnthn, it's a hack to roundtrip NaN and Inf

[21:17] <geekosaur> because anything else is worse

[21:18] <AlexDaniel> geekosaur: but it no longer roundtrips after this commit, no?

[21:18] <geekosaur> (this was the result of a fair amount of futzing around trying to come up with solutions)

[21:18] <AlexDaniel> commit: 498d0a4ae4^,498d0a4ae4 say Inf.Rat.Num

[21:18] <committable6> AlexDaniel, ¦«498d0a4ae4^,498d0a4»: Inf

[21:18] <AlexDaniel> oh no, it does

[21:18] <AlexDaniel> commit: 498d0a4ae4^,498d0a4ae4 say Inf.Rat

[21:18] <committable6> AlexDaniel, ¦«498d0a4ae4^,498d0a4»: Inf

[21:18] <AlexDaniel> commit: 498d0a4ae4^,498d0a4ae4 say Inf.Rat.perl

[21:18] <committable6> AlexDaniel, ¦«498d0a4ae4^»: <1/0>␤¦«498d0a4»: P6opaque: get_boxed_ref could not unbox for the representation '20' of type Num␤  in block <unit> at /tmp/CAyYTbCMma line 1␤ «exit code = 1»

[21:18] <AlexDaniel> you just can't .perl it

[21:19] <geekosaur> I don't get that commit being "no longer roundtrips"; that commit *implemented* roundtrip-ability for Inf/NaN through Rat

[21:19] <geekosaur> and required hackery elsewhere, of course

[21:20] <jnthn> m: say Inf.Rat

[21:20] <camelia> rakudo-moar b2332c: OUTPUT«Inf␤»

[21:20] <jnthn> m: say Inf.Rat.WHAT

[21:20] <camelia> rakudo-moar b2332c: OUTPUT«(Rational[Num,Int])␤»

[21:21] <jnthn> To be honest, I'd probably have been more inclined to just say "no, this type can't represent Inf/NaN"

[21:21] <jnthn> But I guess that ship has sailed.

[21:21] <AlexDaniel> mc: say Inf.Rat

[21:21] <committable6> AlexDaniel, ¦«2015.12»: Inf

[21:21] <AlexDaniel> mc: say Inf.Rat.WHAT

[21:21] <committable6> AlexDaniel, ¦«2015.12»: (Num)

[21:22] <jnthn> Urgh. That's worse. :)

[21:22] <jnthn> At least we return a Rat now.

[21:22] <AlexDaniel> I don't think it has… but we have to make up our mind or something

[21:22] <AlexDaniel> 6c: say Inf.Rat.WHAT

[21:22] <jnthn> Even if it's a Rat of unusual shape

[21:23] <committable6> AlexDaniel, ¦«2015.12,2016.02,2016.03,2016.04,2016.05»: (Num)␤¦«2016.06,2016.07.1,2016.08.1,2016.09,2016.10,2016.11,2016.12,HEAD»: (Rational[Num,Int])

[21:24] <geekosaur> something required the ability to roundtrip it (granted that "something" may have been our favorite numerical gadfly)

[21:24] <geekosaur> (that is, Zefrem)

[21:26] <jnthn> Anyway, I guess for now Rational.perl will need patching up some

[21:31] <AlexDaniel> yea, ok, RT #130459

[21:31] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130459

[21:38] <samcv> morning everyone

[21:38] <yoleaux2> 17:54Z <cygx> samcv: I believe you misread RT #129878 - the issue is not stringifying a list generated by xx (did you miss the [~]), but the string generated by x

[21:38] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129878

[21:38] <jnthn> o/ samcv

[21:39] <samcv> hmm i thought that is what i said. maybe i reversed them

[21:39] <samcv> say ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" x 2).chars #=> 2 cause this one has the problem

[21:39] <samcv> m:  say ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" x 2).chars #=> 2 cause this one has the problem

[21:39] <camelia> rakudo-moar b2332c: OUTPUT«2␤»

[21:40] <samcv> it is a problem with x

[21:40] <samcv> well.

[21:41] <samcv> .tell cygx i will look at it as soon as I wake up again. if i misinterpreted the bug

[21:41] <yoleaux2> samcv: I'll pass your message to cygx.

[21:42] <samcv> m: say ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" xx 2).elems #> 2

[21:42] <camelia> rakudo-moar b2332c: OUTPUT«2␤»

[21:42] <samcv> m: say ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" x 2).elems

[21:42] <camelia> rakudo-moar b2332c: OUTPUT«1␤»

[21:42] <samcv> m: say ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" x 2).ords

[21:42] <camelia> rakudo-moar b2332c: OUTPUT«(127468 127468)␤»

[21:42] <samcv> m: say ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" x 2).Str.ords

[21:42] <camelia> rakudo-moar b2332c: OUTPUT«(127468 127468)␤»

[21:42] <samcv> m: say ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" x 2).Str.chars

[21:42] <camelia> rakudo-moar b2332c: OUTPUT«2␤»

[21:43] <samcv> m: say ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" xx 2).Str.ords

[21:43] <camelia> rakudo-moar b2332c: OUTPUT«(127468 32 127468)␤»

[21:43] <samcv> m: say ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" x 2).Str.ords

[21:43] <camelia> rakudo-moar b2332c: OUTPUT«(127468 127468)␤»

[21:43] <samcv> m: say ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" x 2).Str.chars

[21:43] <camelia> rakudo-moar b2332c: OUTPUT«2␤»

[21:43] <samcv> ok i made a mistake! yep

[21:45] <jnthn> samcv: There's an optimized representation used by `x` that likely should not be in all cases :)

[21:46] <jnthn> samcv: I suspect we can detect it by exposing the should_break thingy used by NFG and calling it with the string to repeat as both arguments

[21:46] <AlexDaniel> and this concludes my second iteration! \o\ /o/ \o/

[21:46] <AlexDaniel> only 1084 snippets left now!

[21:48] <jnthn> AlexDaniel: Snippets of what, out of curiosity?

[21:48] <AlexDaniel> jnthn: oh, ah!

[21:49] <AlexDaniel> jnthn: so what I did is I've taken all m: messages from the clog of this year

[21:49] <AlexDaniel> jnthn: and ran each of them on 2015.12,HEAD and also somewhere around the time the message was sent

[21:49] <AlexDaniel> there are around 31.5k of them in total

[21:49] <AlexDaniel> then I've filtered out those that had same output

[21:50] <AlexDaniel> which left me with only 7k or something like this

[21:50] <AlexDaniel> and… then I've been going through all of them… that's where all these latest tickets came from

[21:51] <notviki> aitht

[21:51] <jnthn> Wow :)

[21:53] <notviki> "AlexDaniel │ notviki: what was the justification for not having a RatStr here?"

[21:53] <notviki> AlexDaniel: because that's the syntax for Rat literal, not for a RatStr

[21:53] <AlexDaniel> right

[21:53] <AlexDaniel> okay

[21:54] <notviki> AlexDaniel: this lets you, for example, specify a Rat in a signature as a literal

[21:54] <notviki> m: -> <0/0> { "that looks fancy pants" }(0/0)

[21:54] <camelia> rakudo-moar b2332c: ( no output )

[21:54] <notviki> m: -> <0/0> { "that looks fancy pants".say }(0/0)

[21:54] <camelia> rakudo-moar b2332c: OUTPUT«that looks fancy pants␤»

[21:54] <notviki> m: -> <0/0> { "that looks fancy pants".say }(1/0)

[21:54] <camelia> rakudo-moar b2332c: OUTPUT«that looks fancy pants␤»

[21:54] <notviki> /0\

[21:55] <notviki> well, shit

[21:55] <notviki> m: -> <0/0> { "that looks fancy pants".say }(10/2)

[21:55] <camelia> rakudo-moar b2332c: OUTPUT«that looks fancy pants␤»

[21:55] <notviki> omg

[21:56] <notviki> AlexDaniel: does that answer the question? Same goes for Complex. I guess the real question is how come <42> or <42e0> do not return an Int and Num and do the allomorphs, and that's 'cause you can get the literals for those without the angled brackets

[21:56] <notviki> m: -> <10/3> { "that looks fancy pants".say }(10/2)

[21:56] <camelia> rakudo-moar b2332c: OUTPUT«Constraint type check failed for parameter '<anon>'␤  in block <unit> at <tmp> line 1␤␤»

[21:56] <notviki> Interesting

[21:56] * notviki clicks "Take" on that one

[21:58] <AlexDaniel> notviki: yea, I guess so. Doesn't change the fact that I hate everything about < > though :)

[21:59] <notviki> heh

[21:59] <notviki> I think it only has one bug left

[21:59] <notviki> and I'd say "bug"

[21:59] <notviki> m: say 1+i

[21:59] <camelia> rakudo-moar b2332c: OUTPUT«1+1i␤»

[21:59] <notviki> m: say WHAT 1+i

[21:59] <camelia> rakudo-moar b2332c: OUTPUT«(Complex)␤»

[21:59] <notviki> m: say WHAT <1+i>

[21:59] <camelia> rakudo-moar b2332c: OUTPUT«(Str)␤»

[21:59] <notviki> ^ that

[22:15] * japhb is back from doing a fresh reinstall test

[22:16] <japhb> And ... it worked with the latest nom.  Not a blip.  I guess I did just get unlucky before.

[22:27] <lizmat> good night, #perl6-dev!

[22:28] <notviki> night

[22:28] <japhb> o/

[22:29] <samcv> m: Uni.new(0x2640, 0xFE0E).chars.say

[22:29] <camelia> rakudo-moar b2332c: OUTPUT«No such method 'chars' for invocant of type 'Uni'␤  in block <unit> at <tmp> line 1␤␤»

[22:29] <samcv> m: Uni.new(0x2640, 0xFE0E).Str.chars

[22:29] <camelia> rakudo-moar b2332c: ( no output )

[22:29] <samcv> m: Uni.new(0x2640, 0xFE0E).Str.chars.say

[22:29] <camelia> rakudo-moar b2332c: OUTPUT«1␤»

[22:44] <samcv> m: '('.uniprop('MVM_COLLATION_PRIMARY').say

[22:44] <camelia> rakudo-moar b2332c: OUTPUT«791␤»

[22:44] <samcv> sweet!

[22:45] <samcv> \o/

[22:45] <samcv> m: 0x200D.uniprop('NFG_QC').say

[22:45] <camelia> rakudo-moar b2332c: OUTPUT«N␤»

[22:45] <notviki> m: '('.uniprop('MVM_COLLATION_PRIMARY').chr.say

[22:45] <camelia> rakudo-moar b2332c: OUTPUT«̗␤»

[22:45] <notviki> j: '('.uniprop('MVM_COLLATION_PRIMARY').say

[22:46] <camelia> rakudo-jvm 8ca367: OUTPUT«uniprop NYI on jvm backend␤  in method throw at gen/jvm/CORE.setting line 27529␤  in sub die at gen/jvm/CORE.setting line 792␤  in sub uniprop at gen/jvm/CORE.setting line 15437␤  in method uniprop at gen/jvm/CORE.setting line 9661␤  in block <uni…»

[22:46] <notviki> heh

[22:46] * notviki runs a stripts on all open RTs to try to find ones that are fixed and "test needed" but not marked as such

[22:47] <notviki> "Smartmatch is experimental at check-RT-for-tests-needed.pl line 20"

[22:47] <notviki> ^_^

[22:47] <notviki> "Global symbol "%RTs" requires explicit package name"

[22:48] <notviki> no.. but I did forget parens for (@RTs) { ....

[22:48] <notviki> That's it. I forgot how to code Perl 5 :(

[22:49] <samcv> m: "\c[BOY]".say

[22:49] <camelia> rakudo-moar b2332c: OUTPUT«👦␤»

[22:49] <samcv> m: "\c[BOY]".uniprop('NFG_QC').say

[22:49] <camelia> rakudo-moar b2332c: OUTPUT«Y␤»

[22:50] <samcv> wait jnthn it's already nfg_qc?

[22:50] <samcv> oh wait. nvm. it should be N

[22:50] <samcv> still haven't been up long

[23:06] <notviki> hoh

[23:07] <notviki> looks like our Appvoyer config needs a tweak? It can't get perl5 to install: https://ci.appveyor.com/project/moritz/rakudo/build/1.0.1967/job/r1d4ce8i3rlbdiis

[23:09] <dalek> rakudo/nom: a2cc58a | skids++ | src/core/Proc/Async.pm:

[23:09] <dalek> rakudo/nom: Make new Proc::Async constructor friendly to subclass attribs.

[23:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a2cc58a754

[23:09] <dalek> rakudo/nom: 87fefa9 | (Zoffix Znet)++ | src/core/Proc/Async.pm:

[23:09] <dalek> rakudo/nom: Merge pull request #978 from skids/procasyncsubclass

[23:09] <dalek> rakudo/nom:

[23:09] <dalek> rakudo/nom: Make new Proc::Async constructor friendly to subclass attribs.

[23:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/87fefa9c70

[23:26] <notviki> Hm, 515 ticket mentioning word "test": https://gist.github.com/zoffixznet/933a2a2c9ed3ca95790b725f81f86249

[23:26] * notviki tries another run with a better heuristic

[23:44] <dalek> nqp: eece127 | samcv++ | docs/ops.markdown:

[23:44] <dalek> nqp: ops.markdown: provide more accurate and detailed info on unipropcode

[23:44] <dalek> nqp: review: https://github.com/perl6/nqp/commit/eece1271de

[23:47] <notviki> samcv++ # fixing the atom bug with '/'

[23:47] <notviki> Working with that same file now and glad it's not butchered anymore

[23:47] <samcv> :)

[23:47] <AlexDaniel> \o/

[23:47] <samcv> yeah. it parses left to right so it will run into the quoted string

[23:48] <samcv> since that isn't parsed yet

[23:48] <samcv> \o/

[23:49] <notviki> hm

[23:49] <notviki> m: say Rat.Range

[23:49] <camelia> rakudo-moar 87fefa: OUTPUT«-Inf^..^Inf␤»

[23:49] <notviki> I just now realize that's wrong and original behaviour is right

[23:49] <notviki> for RT https://rt.perl.org/Ticket/Display.html?id=130427#ticket-history

[23:50] <notviki> m: say [.^name, .Num] for <1/0>, <-1/0>;

[23:50] <camelia> rakudo-moar 87fefa: OUTPUT«[Rat Inf]␤[Rat -Inf]␤»

[23:51] <notviki> m: say Rat.Range.in-range: NaN

[23:51] <camelia> rakudo-moar 87fefa: OUTPUT«Value out of range. Is: NaN, should be in -Inf^..^Inf␤  in block <unit> at <tmp> line 1␤␤»

[23:52] <samcv> m: "\c[ARABIC NUMBER SIGN]".uniprop('Grapheme_Cluster_Break').say

[23:52] <camelia> rakudo-moar 87fefa: OUTPUT«Prepend␤»

[23:52] <japhb> .tell jnthn Found another possible oo-monitors bug for you (https://github.com/jnthn/oo-monitors/issues/9).  Hopefully this one is golfed down enough to make it easier to debug.

[23:52] <yoleaux2> japhb: I'll pass your message to jnthn.

[23:53] <japhb> It seems like every bug I find ends up on jnthn's plate.  :-(
