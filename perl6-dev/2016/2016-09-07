[00:02] <MasterDuke> jnthn: am i interpreting your comment on https://github.com/rakudo/rakudo/pull/867 correctly?

[00:02] <MasterDuke> if i just send the given count directly into nqp::x, either unbox_i'ed or decont'ed, it can be negative

[00:07] <MasterDuke> ahh, missed his sleep &

[00:54] <Zoffix> wooohooo \o/

[00:54] <Zoffix> perl6 bin/release/cli-runner.p6

[00:54] <Zoffix> * leave to play Far Cry 4 for 40 minutes; then come back*

[00:54] <Zoffix> "NeuralAnomaly RELEASE STATUS: Rakudo release DONE"

[00:55] <Zoffix> :) nqp and rakudo in forks got released automatically.

[01:55] <japhb> Zoffix++  # That is so many kinds of good

[01:56] <japhb> Zoffix: On a completely unrelated note, IRC::Client: Is there a best practice for making IRC::Client::Plugin classes maximally testable?  (Also, PLZ CAN HAZ SSL?  :-)  )

[02:03] <MasterDuke> how do i add an option to the perl6 binary? i added it to https://github.com/perl6/nqp/blob/master/src/HLL/Compiler.nqp#L26, but it still complains if i try to use it

[06:06] <[Tux]> This is Rakudo version 2016.08.1-123-gef98f8f built on MoarVM version 2016.08-35-g5108035

[06:06] <[Tux]> csv-ip5xs        9.626

[06:06] <[Tux]> test            15.430

[06:06] <[Tux]> test-t           7.169

[06:06] <[Tux]> csv-parser      17.058

[06:21] <lizmat> Files=1135, Tests=52708, 224 wallclock secs (13.18 usr  3.81 sys + 1384.93 cusr 126.68 csys = 1528.60 CPU)

[06:22] <lizmat> 20 wallclock seconds less than yesterday, 120 CPU secs less than yesterday  :-)

[06:22] <nine> wow :)

[06:23] <lizmat> moritz: if I search for "wallclock secs" (with quotes) on perl6-dev, the last one it finds is from 2016-08-19

[06:24] <lizmat> moritz: ah, it actually says: "Searching this channel includes data up to 2016-08-22 00:42 H."

[06:24] <lizmat> something seems stuck

[06:28] <lizmat> nine: oddly enough, bare startup seems to have crawled up to .120  :-(

[06:30] <nine> lizmat: indeed :/ No idea how that came to be. All my work should have strictly affected only programs that load modules.

[06:34] <nine> lizmat: startup time stayed the same at least since f0df496 Sunday morning

[06:35] <lizmat> running --profile-compile with '' shows that 92.7% is taken by: parse  gen/moar/stage2/NQPHLL.nqp:1709

[06:36] <lizmat> I guess we could make the case of "' faster by not calling parse on an empty string  :-)

[06:36] <nine> What exactly do we try to parse anyway?

[06:36] <lizmat> the empty string in that case ?

[06:36] <nine> But why?

[06:37] <lizmat> to find out the bare startup time ?

[06:37] <nine> Ooooh...the -e code

[06:37] <nine> Sorry, coffee still needs to kick in :)

[06:50] <ShimmerFairy> what's the P6 equivalent of nqp::getlexdyn, again? (That is, the P6 version of something like  my $*THING := nqp::getlexdyn('$*THING')  )

[06:55] <moritz> lizmat: it seems the IR clog search index rebuild is b0rked

[06:56] <lizmat> ShimmerFairy: there's an internal sub called DYNAMIC, if that's what you mean?

[06:56] <lizmat> it lives in stubs

[06:57] <ShimmerFairy> lizmat: I may not need it in the first place, but I'm just wondering how to "lexicalize" the dynamic while retaining its value, which IIRC getlexdyn does in NQP land.

[06:57] <lizmat> my $*FOO ?

[06:57] <lizmat> my $*FOO = $*FOO ?

[06:58] <ShimmerFairy> I thought that was disallowed, but maybe just for non-dynamics

[06:58] <ShimmerFairy> neither work in retaining the value, just checked

[06:59] <lizmat> yeah  :-(

[07:01] <lizmat> breakfast&

[07:08] <timotimo> do we only have "temp $*FOO"?

[08:13] <lizmat> m: temp $*FOO   # no

[08:13] <camelia> rakudo-moar ef98f8: OUTPUT«Can only use 'temp' on a container␤  in block <unit> at <tmp> line 1␤␤»

[08:16] <timotimo> OK

[09:09] <jnthn> morning, #moarvm

[09:10] <jnthn> uh, no

[09:10] <jnthn> coffee first

[09:10] <jnthn> morning, #perl6-dev

[09:14] <nine> Good morning, jnthn! I get the impression that your daily cycle is slowly moving? IIRC you used to /join around 10 ;)

[09:14] <jnthn> Normally 10:30ish. :)

[09:15] <jnthn> Bit later today...distracted by a new kitchen toy getting delivered :)

[09:16] <timotimo> thermomix? :)

[09:18] <jnthn> hah, I didn't know that existed :P

[09:18] <jnthn> Just a blender, though. :)

[09:19] <jnthn> Winter is coming. Time to make warming soups. :P

[09:19] <timotimo> my mom used to work for Vorwerk to demonstrate it to people so they would decide to buy it

[09:19] <timotimo> i think that was when me and my sis were keeping her from her full-time-job, so about 25 years ago

[09:19] <jnthn> :)

[09:20] <timotimo> they are cool devices. i got a used one from my grandma :3

[09:20] <timotimo> (also, they are hot devices)

[09:21] <jnthn> ShimmerFairy: `my $*FOO = CALLERS::<$*FOO>` or so may do it

[09:22] <timotimo> thermomix isn't a topic for #perl6-dev, though :)

[09:22] <jnthn> .tell lizmat -e '' spends a lot of time in parse not for parsing, but because that's where we load CORE.setting, so it's a decent measure of that...not really inclined to special-case it... :)

[09:22] <yoleaux2> jnthn: I'll pass your message to lizmat.

[09:23] <timotimo> "special-case" it? like give us an additional stage that measures only loading the core setting?

[09:24] <jnthn> timotimo: No, I thought the discussion was about some kind of trick to make -e '' super-fast by avoiding the call to .parse or something :)

[09:24] <timotimo> ah, hehe.

[09:24] <timotimo> well, it's gone up to 0.2s on my machine, too. i think it used to sit at about 0.11s?

[09:24] <jnthn> Righty, I'll start out with [Coke]'s woes today, I think.

[09:24] <timotimo> sounds godo

[09:24] <timotimo> good*

[09:25] <timotimo> a tummy ache is pulling me back to bed :|

[09:25] <jnthn> ugh

[09:25] <jnthn> Get well

[09:26] <timotimo> i hope so!

[09:26] <timotimo> i expect once the food i put in yesterday gets out, things will normalize quickly

[09:26] <nine> Seems like this is an instant memory explosion: sub bar() { $*FOO = 'bar'; }; sub foo() { my $*FOO = CALLERS::<$*FOO>; bar; }; my $*FOO = 'foo'; foo; say $*FOO;

[09:27] <nine> Alt+SysRq+f is your friend there...

[09:28] <nine> Golfed it to: sub bar() { $*FOO = 'bar'; }; sub foo() { my $*FOO = CALLERS::<$*FOO>; bar; }; foo

[09:33] <jnthn> o.O

[09:57] <nine> LOL

[09:57] <nine> Why is this an endless recursion? Because the full invocation was:

[09:57] <nine> perl6 -e 'sub bar() { $*FOO = 'bar'; }; sub foo() { my $*FOO = CALLERS::<$*FOO>; bar; }; foo'

[09:58] <nine> So the shell makes "sub bar() { $*FOO = bar; }" out of that

[09:58] <jnthn> lol!

[09:59] <nine> Maybe it's time for me to finally move my one linering to the REPL...

[10:01] <Zoffix> Or use ’‘ instead of '' :)

[10:02] <jnthn> One less bug for me to investigate, anyway :)

[10:02] <jnthn> Talking of which...

[10:04] <Zoffix> japhb, no, I've not figured out a good way to do testing other than firing up Perl 5's IRC server module (see the dismal test suite of IRC::Client). For SSL: I know nothing about it and too busy with other stuff to jump in and learn. Also, I think I recall someone's attempt to make SSL version of IO::Socket::Async was ridiculously slow

[10:06] <Zoffix> lol, someone posted my junctions post into /r/compsci and the comments make no sense to me :) https://www.reddit.com/r/compsci/comments/51h5yf/perl_6s_schr%C3%B6dingercertified_junctions/

[10:06] <Zoffix> At least there's no hate :D

[10:06] <dalek> roast: 7e3eed5 | jnthn++ | S32-io/socket-accept-and-working-threads.t:

[10:06] <dalek> roast: Add test for sync socket + working threads bug.

[10:06] <dalek> roast: review: https://github.com/perl6/roast/commit/7e3eed5901

[10:07] <jnthn> That's a test covering the [Coke]++ bug report

[10:09] <dalek> nqp: 65e7981 | jnthn++ | tools/build/MOAR_REVISION:

[10:09] <dalek> nqp: Bump MOAR_REVISION for socket accept fix.

[10:09] <dalek> nqp: review: https://github.com/perl6/nqp/commit/65e79816df

[10:17] <dalek> rakudo/nom: 26fabdf | jnthn++ | tools/build/NQP_REVISION:

[10:17] <dalek> rakudo/nom: Bump NQP_REVISION for Moar socket accept fix.

[10:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/26fabdfb2e

[10:17] <dalek> rakudo/nom: c082855 | jnthn++ | t/spectest.data:

[10:17] <dalek> rakudo/nom: Add test covering socket accept + threads bug.

[10:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c082855d0c

[10:27] <dalek> rakudo/async-socket-str-fixes: 1beae10 | jnthn++ | src/core/IO/Socket/Async.pm:

[10:27] <dalek> rakudo/async-socket-str-fixes: First steps on fixing string async socket reads.

[10:27] <dalek> rakudo/async-socket-str-fixes:

[10:27] <dalek> rakudo/async-socket-str-fixes: This uses the new VM-backed streaming decode API, which will allow for

[10:27] <dalek> rakudo/async-socket-str-fixes: much better error handling, choosing the encoding, and in the future

[10:27] <dalek> rakudo/async-socket-str-fixes: provide support for userspace decoders to be plugged in. This nearly

[10:27] <dalek> rakudo/async-socket-str-fixes: works, with a caveat: we run into a phaser scoping bug with the LAST

[10:27] <dalek> rakudo/async-socket-str-fixes: block that will need some attention. (Also, the streaming decode stuff

[10:27] <dalek> rakudo/async-socket-str-fixes: is not yet available for the JVM backend.)

[10:27] <dalek> rakudo/async-socket-str-fixes: review: https://github.com/rakudo/rakudo/commit/1beae10dd1

[10:27] <dalek> rakudo/async-socket-str-fixes: 494c25f | jnthn++ | src/core/IO/Socket/Async.pm:

[10:27] <dalek> rakudo/async-socket-str-fixes: Cope with empty socket reads.

[10:27] <dalek> rakudo/async-socket-str-fixes:

[10:27] <dalek> rakudo/async-socket-str-fixes: There's a problem with LAST/QUIT phasers in the case that an iteration

[10:28] <jnthn> (Just a rebase)

[10:30] <jnthn> So, nobody took the JVM decode stream bait... :)

[10:33] <nine> So much to do...so little time :/

[10:36] <jnthn> Well, I have time today, so will do the amount of it I need :)

[10:36] <jnthn> (Which is the amount needed to not have to put #?if jvm thingies into IO::Socket::Async to fix its issues :))

[10:49] <TheLemonMan> moinmoin

[10:50] <jnthn> o/ :)

[10:50] <TheLemonMan> Zoffix, gotta try again running the spectest then

[10:51] <Zoffix> TheLemonMan, what OS are you on?

[10:52] <Zoffix> I recall there was one test (now fudged) that was passing for me, but failing on OSX

[10:52] <TheLemonMan> Linux; but it's the first time I see this test fail :\

[10:53] <Zoffix> w00t Canuck gov is offering $93mil for deep learning research. http://www.cfref-apogee.gc.ca/results-resultats/index-eng.aspx#a6

[10:54] * Zoffix quits job. Starts cracking

[10:54] <timotimo> good luck!

[10:54] <DrForr> I'd love to get p6 into that space, but too many projects :)

[10:59] <TheLemonMan> and while rakudo builds... does anybody have any idea for #865? I'm more and more convinced that throwing an exception is the best way to handle the possible error case

[11:09] <dalek> nqp: 55b0dac | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/ (3 files):

[11:09] <dalek> nqp: Stub in Decoder REPR on JVM.

[11:09] <dalek> nqp: review: https://github.com/perl6/nqp/commit/55b0dac4cc

[11:09] <dalek> nqp: 5bdc324 | jnthn++ | src/vm/jvm/QAST/Compiler.nqp:

[11:09] <dalek> nqp: Map decoder ops for JVM (none implemented yet).

[11:09] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5bdc324977

[11:10] <nine> .oO(I'd love to get Perl 6 into Space)

[11:13] <DrForr> http://www.sciencealert.com/the-impossible-em-drive-is-about-to-be-tested-in-space

[11:16] <jnthn> lunch &

[11:31] <TheLemonMan> uhh, now some more tests are failing, even with nom

[11:34] <TheLemonMan> and if I unset PERL6_TEST_DIE_ON_FAIL then some test silently die and fudgeandrun finishes saying 'All tests successful.'

[11:35] <timotimo> hmm, does DIE_ON_FAIL handle #TODO properly?

[11:36] <TheLemonMan> Zoffix, ^

[11:37] <timotimo> it should

[11:37] <timotimo> i mean how else would it ever have succeeded in a spec test?

[11:39] <timotimo> ha

[11:39] <timotimo> i was running a moar with --optimize=0

[11:39] <ZoffixMobile> TheLemonMan, what does t/rakudo/ something something die-on-fail test give you? does it pass? can you pastebin full output?

[11:39] <timotimo> no wonder startup was slow

[11:42] <ZoffixMobile> full output of fudgerun that is

[11:42] <ZoffixMobile> that's failing

[11:43] <ZoffixMobile> oh wait, that's not where the die on fail test is, I think it's in spec....  tree -f | grep testing

[11:43] <TheLemonMan> ZoffixMobile, w/o DIE_ON_FAIL https://ptpb.pw/nZ9J W/ DIE_ON_FAIL https://ptpb.pw/9hZw

[11:45] <ZoffixMobile> k, I'll take a look in about 10m when I'm at a proper computer

[12:04] <moritz> ok, travis confuses the heck out of me

[12:05] <moritz> yesterday night I tried to fix this problem: Type check failed in binding to $id; expected CompUnit::PrecompilationId but got Str ("4CDC84469EF12631D41D...)

[12:05] <moritz> uncovered by travis

[12:05] <moritz> by the perl6/doc builds

[12:05] <moritz> and after I pushed my commit, there have been quite a few successful builds

[12:06] <moritz> and now https://travis-ci.org/perl6/doc/builds/158127574 again (from 2 hours ago)

[12:06] <moritz> which shows the same problem as before my fix

[12:20] <MetaZoffix> Hmm

[12:21] <MetaZoffix> TheLemonMan: PERL6_TEST_DIE_ON_FAIL bails out when a test fails inside a todo'ed subtest

[12:23] * MetaZoffix is testing a fix

[12:31] <MetaZoffix> And it's not silently failing without the env var set. It's failing inside the subtest and the subtest counts as one test in the parent test suite, so if it's TODOed, the entire subtest will count as "passing", regardless of how many failures are in it

[12:35] <nine> I see there's a rakudobrew involved

[12:37] <dalek> nqp: 0dd01d8 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[12:37] <dalek> nqp: Factor out encoding name mangling.

[12:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0dd01d8135

[12:37] <dalek> nqp: a3deb79 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/ (2 files):

[12:37] <dalek> nqp: Implement decoderconfigure op for JVM.

[12:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a3deb79a2a

[12:39] <dalek> rakudo/nom: ffb5789 | (Zoffix Znet)++ | lib/Test.pm6:

[12:39] <dalek> rakudo/nom: Do not PERL6_TEST_DIE_ON_FAIL inside subtests as they may be TODOed

[12:39] <dalek> rakudo/nom:

[12:39] <dalek> rakudo/nom: Spotted by TheLemonMan++

[12:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ffb5789f7e

[12:39] <dalek> roast: b0c5ee2 | (Zoffix Znet)++ | S24-testing/8-die_on_fail.t:

[12:39] <dalek> roast: PERL6_TEST_DIE_ON_FAIL does not exit in subtests that may be TODOed

[12:39] <dalek> roast: review: https://github.com/perl6/roast/commit/b0c5ee2fca

[12:40] <dalek> roast: 1bf7e2c | (Zoffix Znet)++ | S24-testing/8-die_on_fail.t:

[12:40] <dalek> roast: Explicitly set PERL6_TEST_DIE_ON_FAIL=0 when test expects it to be that

[12:40] <dalek> roast: review: https://github.com/perl6/roast/commit/1bf7e2cc0a

[12:40] <MetaZoffix> TheLemonMan: ^ that should do it

[12:40] <nine> moritz: I can actually reproduce that failure locally

[12:41] <nine> moritz: it's not a call to .precompile but to .load

[12:41] <moritz> nine: oh

[12:42] <moritz> nine: is the fix needed in both places, or just in .load?

[12:43] <nine> in both

[12:43] <nine> testing now

[12:47] <dalek> roast: d6bcadc | (Zoffix Znet)++ | S24-testing/8-die_on_fail.t:

[12:47] <dalek> roast: Simplify switch for PERL6_TEST_DIE_ON_FAIL in its tests

[12:47] <dalek> roast: review: https://github.com/perl6/roast/commit/d6bcadc7e9

[12:48] <dalek> rakudo/nom: f0bb581 | niner++ | src/core/CompUnit/PrecompilationRepository.pm:

[12:48] <dalek> rakudo/nom: Provide a backwards compatible load method in PrecompilationRepository

[12:48] <dalek> rakudo/nom:

[12:48] <dalek> rakudo/nom: Fixes pod2onepage which still passes Str ids.

[12:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f0bb581ffb

[12:52] <dalek> nqp: 2e71d57 | jnthn++ | src/core/NativeTypes.nqp:

[12:52] <dalek> nqp: Provide sized int types to NQP on JVM.

[12:52] <dalek> nqp:

[12:52] <dalek> nqp: I suspect this needed a rebootstrap at the time they were put in.

[12:52] <dalek> nqp: That apparently has happened, and they work fine, so remove the

[12:52] <dalek> nqp: `#?if moar` markers.

[12:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2e71d5784a

[12:53] <dalek> nqp: dace35f | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Buffers.java:

[12:53] <dalek> nqp: Support encoding into unsinged buffers.

[12:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dace35fd97

[14:37] <TheLemonMan> ehh, the repl.t test is still failing, but only when run trough the spectest

[14:39] <dalek> nqp: d6078f1 | jnthn++ | src/vm/jvm/runtime/org/perl6/nqp/ (2 files):

[14:39] <dalek> nqp: Implement basic streaming decode ops.

[14:39] <dalek> nqp:

[14:39] <dalek> nqp: So far as we need them for using them in async sockets in Rakudo.

[14:39] <dalek> nqp: This will need further changes upon NFG being implemented for the

[14:39] <dalek> nqp: JVM backend, but it at least is factored somewhat in a direction

[14:39] <dalek> nqp: that will make that a bit easier.

[14:39] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d6078f1d1d

[14:42] <jnthn> That wasn't fun :P

[14:42] * timotimo also at fault for not taking the bait

[14:42] <jnthn> :P

[14:43] <jnthn> Well, now I've got it started, maybe making the rest of the tests pass will be a little more of a fun task :)

[14:46] <jnthn> I don't need the rest for now, though :)

[14:47] <dalek> nqp: 2886979 | jnthn++ | t/jvm/05-decoder.t:

[14:47] <dalek> nqp: Add decoder tests for JVM backend.

[14:47] <dalek> nqp:

[14:47] <dalek> nqp: Commented out those that are not yet implemented. Takers welcome.

[14:47] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2886979171

[14:51] <MetaZoffix> TheLemonMan: got any output to share? Which test is failing?

[14:52] <dalek> roast: 5390fc7 | jnthn++ | S32-io/IO-Socket-Async.t:

[14:52] <dalek> roast: Send \n and end of chars echo server message.

[14:52] <dalek> roast:

[14:52] <dalek> roast: The \n serves as a normalization terminator - that is, it means we

[14:52] <dalek> roast: know that even if a combining char comes next, it will end up as an

[14:52] <dalek> roast: isolate rather than forming a grapheme with the \n. A `z` could be

[14:52] <dalek> roast: followed by a combiner in the next packet, so after upcoming fixes

[14:52] <dalek> roast: to async socket decoding we'll now not hand such a character on

[14:52] <dalek> roast: until the next packet arrives and we see there is no combiner.

[14:52] <dalek> roast: This would break the test, which did not account for such NFG

[14:52] <dalek> roast: behavior.

[14:52] <dalek> roast: review: https://github.com/perl6/roast/commit/5390fc7f32

[14:53] <dalek> roast/6.c-errata: fd46151 | jnthn++ | S32-io/IO-Socket-Async.t:

[14:53] <dalek> roast/6.c-errata: Send \n and end of chars echo server message.

[14:53] <dalek> roast/6.c-errata:

[14:53] <dalek> roast/6.c-errata: The \n serves as a normalization terminator - that is, it means we

[14:53] <dalek> roast/6.c-errata: know that even if a combining char comes next, it will end up as an

[14:53] <dalek> roast/6.c-errata: isolate rather than forming a grapheme with the \n. A `z` could be

[14:53] <dalek> roast/6.c-errata: followed by a combiner in the next packet, so after upcoming fixes

[14:53] <dalek> roast/6.c-errata: to async socket decoding we'll now not hand such a character on

[14:53] <dalek> roast/6.c-errata: until the next packet arrives and we see there is no combiner.

[14:53] <dalek> roast/6.c-errata: This would break the test, which did not account for such NFG

[14:53] <dalek> roast/6.c-errata: behavior.

[14:53] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/fd46151b75

[14:57] <MetaZoffix> TheLemonMan: also, are you running with or without die-on-fail? (and if with... do you have my fix merged into your branch?)

[15:04] <[Coke]> Zoffix: you see my note on the missing ops docs?

[15:04] <MetaZoffix> [Coke]: I guess. The one about there being a test, right.

[15:05] <[Coke]> yup. doesn't help write the docs, but at least finds the ones missing...

[15:06] <[Coke]> .ask pmurias - hey do we need to update nqp's t/docs/opcodes.t to start looking at the JS backend?

[15:06] <yoleaux2> [Coke]: I'll pass your message to pmurias.

[15:06] <travis-ci> Rakudo build failed. Zoffix Znet 'Do not PERL6_TEST_DIE_ON_FAIL inside subtests as they may be TODOed

[15:06] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/158162393 https://github.com/rakudo/rakudo/compare/c082855d0cec...ffb5789f7eef

[15:06] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually

[15:06] <MetaZoffix> :o

[15:07] <japhb> nine: Is it expected that after yesterday's performance improvements, a from-scratch reinstall of Rakudo + modules would take *two* runs of a test program to "warm up" to full speed?  Before my rebuild, my test script was running consistently in .509s to .512s; after the rebuild, the first run was 1.860s, the second was .518s, and then the third and following were .343s to .360s.

[15:07] <MetaZoffix> just an undettected git error

[15:08] <japhb> nine: (And thanks for that speed boost, BTW!)

[15:08] <jdv79> that sounds like some nice perf gains

[15:11] <MetaZoffix> https://travis-ci.org/rakudo/rakudo/builds/158162393

[15:11] <buggable> [travis build above] ✓ All failures are due to timeout (0), missing build log (0), or GitHub connectivity (1)

[15:12] <japhb> jdv79: Yeah, he managed to get ~2 orders of magnitude speedup in loading GTK::Simple (which is effectively a stress test for module loading).  But that speedup shows up even in much less heavy tests like mine.

[15:13] <TheLemonMan> MetaZoffix, each run I get different errors in different tests :D

[15:13] <DrForr> I had a serious issue with loading a bunch of tiny classes, ~200.

[15:15] <TheLemonMan> some are failing with 'P6M Merging GLOBAL symbols failed: duplicate definition of symbol Test'

[15:15] <MetaZoffix> Are you sure you branch has all the latest and greatest rakudo nom commits?

[15:16] <TheLemonMan> absolutely, let me retry once again

[15:18] <dalek> rakudo/async-socket-str-fixes: 4015d5e | jnthn++ | tools/build/NQP_REVISION:

[15:18] <dalek> rakudo/async-socket-str-fixes: Bump NQP_REVISION for JVM decoder REPR/ops.

[15:18] <dalek> rakudo/async-socket-str-fixes: review: https://github.com/rakudo/rakudo/commit/4015d5e23d

[15:19] <nine> japhb: the first run after installing a module is always a bit slower as it re-checks dependencies (installation changes the repo which triggers a re-check). But that wouldn't explain those numbers you got

[15:20] <MetaZoffix> m: my ($m, $h); given DateTime.now { $h = .hour; $h -= 12 if $h >= 12; $m = .minute; $m = $m > 15 && $m >= 45 ?? 12 !! 0; }; <🕐🕑🕒🕓🕔🕕🕖🕗🕘🕙🕚🕛🕜🕝🕞🕟🕠🕡🕢🕣🕤🕥🕦🕧>.comb[$h+$m].say

[15:20] <camelia> rakudo-moar f0bb58: OUTPUT«🕕␤»

[15:20] <MetaZoffix> wooo, Unicode clock. That may or may not work right for any other times :)

[15:20] <MetaZoffix> m: DateTime.now.say

[15:20] <camelia> rakudo-moar f0bb58: OUTPUT«2016-09-07T17:20:38.933590+02:00␤»

[15:20] <MetaZoffix> hm

[15:20] <MetaZoffix> never mind :}

[15:22] <[Coke]> not ok 1390 - documented op 'ln_n' exists in moar

[15:22] <[Coke]> looks like we maybe removed that op from nqp entirely?

[15:22] <dalek> nqp: de3c2d0 | coke++ | t/docs/opcodes.t:

[15:22] <dalek> nqp: Find more opcodes

[15:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/de3c2d03a4

[15:22] <jnthn> Time for a break, but expect I'll merge that async socket fix branch later today. It works on JVM and Moar, just need to write some more tests to ensure it fixes all I want it to :)

[15:24] <dalek> nqp: 61a5556 | coke++ | docs/ops.markdown:

[15:24] <dalek> nqp: fix formatting typo

[15:24] <dalek> nqp: review: https://github.com/perl6/nqp/commit/61a5556963

[15:24] <[Coke]> jnthn: does that address part of my issue? (and will bailador or HTTP::Easy need to change to take advantage?)

[15:28] <timotimo> [Coke]: the hang when accepting a socket already landed earlier and it should have gotten you further

[15:28] <timotimo> have you tried that yet?

[15:29] <dalek> nqp: a4d93fd | coke++ | docs/ops.markdown:

[15:29] <dalek> nqp: Relocate substr2/3

[15:29] <dalek> nqp:

[15:29] <dalek> nqp: These are JVM specific internal opcodes; we need to mark them

[15:29] <dalek> nqp: as `JVM` to avoid documentation test failures.

[15:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a4d93fd440

[15:30] <[Coke]> timotimo: on nom? nope, just got out of morning meetings, must have missed that.

[15:30] <[Coke]> will check early afternoon. Thanks.

[15:30] <timotimo> the one you said "looks promising"

[15:30] <timotimo> it was a fix in moarvm

[15:30] <[Coke]> oh, on moar. roger.

[15:33] <dalek> nqp: c986221 | coke++ | t/docs/opcodes.t:

[15:33] <dalek> nqp: find more opcodes

[15:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c98622131a

[15:34] <dalek> nqp: 501efa6 | coke++ | docs/ops.markdown:

[15:34] <dalek> nqp: note jvm-specific opcode

[15:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/501efa6236

[15:37] <[Coke]> t/docs/opcodes.t down to 277 failures (some of them are that the search for opcodes hasn't been kept up to date, others are things that are vm specific, others are opcodes that have been removed). (plus also just missing docs)

[15:37] <[Coke]> ^^ in nqp

[15:41] <dalek> nqp: b50642b | coke++ | t/docs/opcodes.t:

[15:41] <dalek> nqp: add initial support for js ops

[15:41] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b50642b83e

[15:41] <[Coke]> ... and back up to 456 failures, but now we're also carping about the js backend.

[15:44] <dalek> nqp: a112f96 | coke++ | t/docs/opcodes.t:

[15:44] <dalek> nqp: find more js ops

[15:44] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a112f960a3

[15:46] <TheLemonMan> so, I nuked everything and started with a fresh build, repl.rakudo.moar keeps failing (along with socket-accept-and-working-thread) when run from the spectest. If I run the file by hand it fails with 'P6M Merging GLOBAL symbols failed: duplicate definition of symbol Test'

[15:50] <nine> TheLemonMan: have you tried running with RAKUDO_MODULE_DEBUG=1?

[15:50] <nine> TheLemonMan: might give you a hint

[16:02] <TheLemonMan> what the fuck, now repl.t doesn't fail anymore

[16:09] <TheLemonMan> nine, https://ptpb.pw/76jZ

[16:19] <jnthn> [Coke]: Was a fix in Moar; I already bumped revisions and added a spectest :)

[16:26] <MetaZoffix> TheLemonMan: stupid question, but did you build and make install that rakudo build? It's really weird that it's using your, what I assume system perl6's Test.pm6, rather than the one in the build

[16:27] <MetaZoffix> Hm, was gonna see what I get, but I can't build rakudo at all

[16:27] <MetaZoffix> "Too few positionals passed; expected 2 or 3 arguments but got 1 at gen/moar/stage2/NQPHLL.nqp:615"

[16:34] <MetaZoffix> never mind. Nuking my build dir and building from scratch doesn't have any issues

[16:35] <TheLemonMan> I'm running out of ideas

[16:40] <nine> TheLemonMan: your prefix is ~/.local?

[16:40] <TheLemonMan> nine, yep

[16:41] <MetaZoffix> Here's my output, FWIW... That's from nom: https://gist.github.com/zoffixznet/f5d39afb0fe33661fc555fa8f401902f

[16:44] <travis-ci> Rakudo build errored. Stefan Seifert 'Provide a backwards compatible load method in PrecompilationRepository

[16:44] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/158164378 https://github.com/rakudo/rakudo/compare/ffb5789f7eef...f0bb581ffbd9

[16:44] <buggable> [travis build above] ✓ All failures are due to timeout (1), missing build log (0), or GitHub connectivity (0)

[16:46] <MetaZoffix> God people are idiots... Right now I'm getting shit for my work just because some customer is too stupid to figure out that a text field on the website is pre-filled for convenience and they CAN EDIT IT!! grrr

[16:46] <nine> TheLemonMan: what system are you on?

[16:47] <TheLemonMan> nine, a pretty boring x64 linux box

[16:50] <nine> Very strange. It properly detects that the precompiled Test::Util is outdated, precompiles it again but then seems to load the old file.

[16:50] <nine> That could be a caching issue!

[16:51] <nine> TheLemonMan: can you confirm that rakudo commit f0df49669652359e2766366be940efb76be54db4 still works?

[16:51] <nine> TheLemonMan: and could you bisect it in that case? May just be one of my optimizations

[16:52] <jdv79> nine: impressive work

[16:53] <nine> commit 5fee7a1225118f6a4a7a8a3316dfe8d44dd903c0 looks like a likely candidate

[16:54] <nine> TheLemonMan: you may as well try reverting 5fee7a1225118f6a4a7a8a3316dfe8d44dd903c0

[16:56] <nine> Possible fix is then adding the following after src/core/CompUnit/PrecompilationStore/File.pm:177

[16:56] <nine> %!loaded{$precomp-id} //= $unit;

[16:57] <nine> Have to leave now

[16:57] <timotimo> see ya nine

[16:57] <timotimo> really glad about all those improvements

[17:21] <TheLemonMan> nine, (sorry for the delay but recompilations on this box take ~2m :( ) the fix your proposed seems to work

[17:39] <dalek> roast: 92951b3 | (Zoffix Znet)++ | S17-supply/interval.t:

[17:39] <dalek> roast: Unfudge now-passing test

[17:39] <dalek> roast:

[17:39] <dalek> roast: RT#128469

[17:39] <dalek> roast: review: https://github.com/perl6/roast/commit/92951b39ee

[17:39] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128469

[17:54] <TheLemonMan> ffs, repl.t is still failing heh

[17:54] <MetaZoffix> TheLemonMan: did you say you're running it on a slow box?

[17:55] <MetaZoffix> TheLemonMan: which tests fail?

[17:55] <TheLemonMan> MetaZoffix, it's not that slow, it just...takes its time

[17:56] <TheLemonMan> MetaZoffix, I get a green when run with prove, and an error when run with spectest

[17:56] <MetaZoffix> Try passing  :5wait  to all of the doesn't-hang calls. The default wait is 1.5s which may be not enough for it to complete the test normally

[17:57] <MetaZoffix> TheLemonMan: well, the spectest tells you which tests fail at the end. Which ones? It gives numbers

[17:58] <TheLemonMan> MetaZoffix, 'no subtests run' is all it says

[17:58] <TheLemonMan> and if I 'rm t/spec/S19-command-line/repl.rakudo.moar' and run the spectest again...it succeeds!

[17:58] <MetaZoffix> :S

[18:00] * lizmat waves from Munich

[18:00] <yoleaux2> 09:22Z <jnthn> lizmat: -e '' spends a lot of time in parse not for parsing, but because that's where we load CORE.setting, so it's a decent measure of that...not really inclined to special-case it... :)

[18:00] * MetaZoffix waves from the opposite side of the planet.

[18:01] <lizmat> MetaZoffix o/

[18:04] <MetaZoffix> TheLemonMan: and that's with LemonBoy:iterable-item-containerization branch right?

[18:05] <TheLemonMan> MetaZoffix, nope, with vanilla nom

[18:05] <MetaZoffix> :o

[18:05] <lizmat> afk again, back later tonight&

[18:10] <MetaZoffix> TheLemonMan: well, try to figure out which test is failing and then fudge it, I guess :)

[18:10] <MetaZoffix> I'm running it in a loop right now while 2 spectests are running at the same time, and no failures :/

[18:12] <nine> TheLemonMan: so I'm confused. Did my patch actually help or not?

[18:13] <MetaZoffix> "green when run with prove" .... You can run individual tests with make t/spec/S19-command-line/repl.t  that'll auto-fudge them for you

[18:20] <TheLemonMan> I honestly don't know anymore, getting new different failures each try

[18:28] <MetaZoffix> Just in repl.t or in other tests too?

[18:44] <MetaZoffix> t/spec/S32-io/socket-accept-and-working-threads.t is failing on my box with "Connection refused"

[18:50] <TheLemonMan> now repl is failing test 8, and interval.t is failing test 5-7

[18:51] <MetaZoffix> my repl.t was running in a loop all of this time and hasn't failed once

[18:52] <MetaZoffix> 8th is the doesn'

[18:52] <MetaZoffix> 8th is the doesn't-hang test

[18:53] <MetaZoffix> And so is the 5-7

[18:56] <MetaZoffix> t/spec/S32-io/socket-accept-and-working-threads.t fails only on my server that probably has very restrictive firewall. Test works fine on my dev box

[19:00] <dalek> roast: b0b4e14 | (Zoffix Znet)++ | / (2 files):

[19:00] <dalek> roast: Add ROAST_TIMING_SCALE env var

[19:00] <dalek> roast:

[19:00] <dalek> roast: This will control time-sentitive test scaling. Currently, this

[19:00] <dalek> roast: affects the scaling of how long doesn't-hang() test will wait

[19:00] <dalek> roast: before assuming the process hung

[19:00] <dalek> roast: review: https://github.com/perl6/roast/commit/b0b4e14c8e

[19:00] <MetaZoffix> TheLemonMan: ^ try setting ROAST_TIMING_SCALE=2 or something larger.

[19:05] <MetaZoffix> Oh god, I'm div... Testing the changes first would help, no? :)

[19:06] <MetaZoffix> huh

[19:06] <MetaZoffix> m: say $*ENV<ROAST_TIMING_SCALE>//1

[19:06] <camelia> rakudo-moar f0bb58: OUTPUT«1␤»

[19:06] * MetaZoffix could argue this should warn

[19:07] <dalek> roast: ad3ea69 | (Zoffix Znet)++ | packages/Test/Util.pm:

[19:07] <dalek> roast: Fix incorrect variable name

[19:07] <dalek> roast: review: https://github.com/perl6/roast/commit/ad3ea692e1

[19:09] <TheLemonMan> MetaZoffix, sorry for the delay, I was having something to eat in the meanwhile

[19:09] <TheLemonMan> indeed most of the failures were due to a timeout heh

[19:13] <MetaZoffix> And to clarify my "should warn" comment. I meant the $ Perl5-ism for %*ENV; not the // on dynamic var

[19:15] <TheLemonMan> m: say $*ENV; say $*ENV // 1;

[19:15] <camelia> rakudo-moar f0bb58: OUTPUT«Dynamic variable $*ENV not found␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[19:16] <TheLemonMan> looks like a bug

[19:16] <MetaZoffix> nope

[19:16] <MetaZoffix> m: my $*ENV = 42; say $*ENV // 1;

[19:16] <camelia> rakudo-moar f0bb58: OUTPUT«42␤»

[19:16] <MetaZoffix> m: dd %*ENV

[19:16] <camelia> rakudo-moar f0bb58: OUTPUT«Hash %ENV = {:HOME("/home/camelia"), :LANG("POSIX"), :LC_CTYPE("en_US.UTF-8"), :LOGNAME("camelia"), :MANPATH("/home/camelia/perl5/perlbrew/perls/perl-5.20.1/man:"), :ME("MetaZoffix"), :PATH("/home/camelia/perl5/perlbrew/bin:/home/camelia/perl5/perlbrew/per…»

[19:17] <MetaZoffix> $*ENV is a dynamic variable has has no relation to %*ENV dynamic variable that has the env vars

[19:17] <MetaZoffix> And in perl 5 it's $ENV ... And personally I frequently mess up the sigil :)

[19:17] <TheLemonMan> the $*ENV should just throw when the lhs of // is evaluated imo

[19:17] <MetaZoffix> But then you make it mandatory

[19:18] <TheLemonMan> maybe only for known dynamic variables...

[19:19] <MetaZoffix> maybe

[20:44] <TheLemonMan> m: use nqp; nqp::say("ü" ~~ /:m u/)

[20:44] <camelia> rakudo-moar f0bb58: OUTPUT«This type cannot unbox to a native string: P6opaque, Match␤  in block <unit> at <tmp> line 1␤␤»

[20:49] <arnsholt> m: use nqp; nqp::say(~("ü" ~~ /:m u/)) # Here you go

[20:49] <camelia> rakudo-moar f0bb58: OUTPUT«ü␤»

[20:50] <TheLemonMan> m: use nqp; nqp::say(~("ü" ~~ /:!m u/))

[20:50] <camelia> rakudo-moar f0bb58: OUTPUT«Use of Nil in string context␤  in block <unit> at <tmp> line 1␤␤»

[20:51] <TheLemonMan> eh, take a look at the nqp level and you'll see that a NQPMatch $!to is set to -3, making the Str method fail

[21:08] <jnthn> Hm, didn't we harden NQPMatch.Str against that at some point? Mebbe not...

[21:09] * jnthn got a nasty headache, so more tests for the async socket fixes and merging that will have to wait until tomorrow.

[21:09] <jnthn> NeuralAnomaly: When is the release?

[21:09] <jnthn> Aww :)

[21:10] <geekosaur> NeuralAnomaly, stats

[21:10] <NeuralAnomaly> geekosaur, [✘] Next release will be in 1 week and 2 days. Since last release, there are 40 new still-open tickets (4 unreviewed and 0 blockers) and 15 unreviewed commits. See http://perl6.fail/release/stats for details

[21:10] <jnthn> Nice :)

[21:11] <jnthn> Plenty of time :)

[21:13] <MasterDuke> i was just going to ask you about my infix<x> PR, but don't want to exacerbate the headache

[21:13] <MasterDuke> feel free to punt

[21:14] <jnthn> Yeah, not sure I'll have too many sensible answers

[21:42] <jnthn> TPF are looking for feedback on funding me to continue doing Perl 6 stuffs. Comments can be left at http://news.perlfoundation.org/2016/09/perl-6-performance-and-reliabi-2.html

[21:42] <jnthn> uh, "continuing to fund me doing Perl 6 stuffs" woulda been a better phrasing :)

[21:43] * Zoffix wonders if a lot of people would be upset if the names list on the credits on release announcement would be in alphabetical order rather by number of commits.

[21:43] <jnthn> Though I'd have an amount less time for it without funding, so I guess both kinda work :P

[21:45] <jnthn> Zoffix: Dunno. Depends how much folks are motivated by gamifying how many commits they make I guess. :)

[21:45] <dalek> roast: 456bb43 | lizmat++ | S32-io/socket-accept-and-working-threads.t:

[21:45] <dalek> roast: :host<localhost> doesn't work on OS X ?

[21:45] <dalek> roast:

[21:45] <dalek> roast: :host<127.0.0.1> does.  Assuming 127.0.0.1 works everywhere, this

[21:45] <dalek> roast: seems like a good fix.  Should this only work this way on OS X,

[21:45] <dalek> roast: then we need to make the :host specification conditional on the OS

[21:45] <dalek> roast: review: https://github.com/perl6/roast/commit/456bb433ed

[21:45] <Zoffix> That's a good point. Better leave it as is then

[21:46] <jnthn> lizmat: hm, curious...but 127.0.0.1 seems safer generally

[21:47] <lizmat> all tests failed, output was "Failed to connect: connection refused"

[21:47] <jnthn> o.O

[21:47] <jnthn> odd

[21:47] <Zoffix> Ohhh.. lizmat++ that fixed the test on my debian server too

[21:47] <lizmat> Zoffix: I could very well live with an alphabetical order of contributors

[21:47] <Zoffix> I was getting the same failed to connect: connection refused, but I assumed it was just my restrictive firewall

[21:48] <jnthn> Odd, worked fine on my Ubuntu

[21:48] <Zoffix> (it worked fine on my debian dev box :))

[21:48] <Zoffix> ¯\_(ツ)_/¯

[21:48] <jnthn> Confirm it still works in my Ubuntu VM

[21:49] <jnthn> So, all's good I guess :)

[21:49] <lizmat> jnthn: it fails on nqp::connect($PIO, nqp::unbox_s($.host), nqp::unbox_i($.port));

[21:49] <lizmat> so in the bowels of nqp / Moar

[21:49] <jnthn> oh, duh

[21:49] <lizmat> I wonder where the resolution of localhost is done?

[21:50] <jnthn> Notice in the listen it doesn't mention localhst

[21:50] <lizmat> ah....

[21:50] <jnthn> Though that's maybe worth a Perl 6 docs ticket

[21:51] <jnthn> Because I stole the basic listen/connect example from there :)

[21:51] <jnthn> 'cus I was too lazy to type them out :)

[21:51] <Zoffix> :o

[21:51] <lizmat> so how would one specify that with listen ?

[21:51] <Zoffix> we discovered jnthn's secret :)

[21:51] <lizmat> listen<localhost> ?

[21:51] <lizmat> or an additional :host<localhost>

[21:51] <lizmat> neither of them seem to fix the pb, fwiw

[21:52] <Zoffix> ditto here

[21:53] <Zoffix> Ah. :localhost<>

[21:54] <timotimo> how well do we do with regards to ipv6 btw?

[21:55] <jnthn> Doc issue at https://github.com/perl6/doc/issues/898 anyways

[21:55] <jnthn> And lizmat++ for the test fix

[22:00] <TheLemonMan> does travis also run the spectest ?

[22:00] <Zoffix> Well, I left the comment. It said "held for moderator"  http://news.perlfoundation.org/2016/09/perl-6-performance-and-reliabi-2.html

[22:00] <Zoffix> TheLemonMan, nope

[22:01] <jnthn> Zoffix: Yeah...they moderate 'em in a day or so :)

[22:01] <Zoffix> \o/

[22:01] <Zoffix> (it was a "definitely extend...." type of comment FWIW :))

[22:01] <jnthn> phew :)

[22:02] <dalek> rakudo/nom: 377d236 | LemonBoy++ | src/Perl6/Grammar.nqp:

[22:02] <dalek> rakudo/nom: Name the <sym> token when parsing a ternary operator.

[22:02] <dalek> rakudo/nom:

[22:02] <dalek> rakudo/nom: Some functions such as 'can_meta' might need this information to print

[22:02] <dalek> rakudo/nom: more informative error messages.

[22:02] <dalek> rakudo/nom:

[22:02] <dalek> rakudo/nom: RT#129080

[22:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129080

[22:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/377d236fed

[22:02] <dalek> rakudo/nom: c98ab93 | (Zoffix Znet)++ | src/Perl6/Grammar.nqp:

[22:02] <dalek> rakudo/nom: Merge pull request #872 from LemonBoy/ternary-sym

[22:02] <dalek> rakudo/nom:

[22:02] <dalek> rakudo/nom: Name the <sym> token when parsing a ternary operator.

[22:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c98ab93552

[22:03] <jnthn> Cute fix :)

[22:04] <TheLemonMan> on the flip side I'm running out of interesting bugs to fix heh

[22:06] <jnthn> Bugs turn out to be a renewable resource... :)

[22:07] * Zoffix is attempting 128304

[22:07] <Zoffix> RT#128304

[22:07] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128304

[22:08] <dalek> rakudo/nom: a62207e | lizmat++ | src/core/REPL.pm:

[22:08] <dalek> rakudo/nom: We don't need no 'use nqp' in the setting :-)

[22:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a62207ec75

[22:08] <jnthn> Zoffix: hmmm :)

[22:08] <Zoffix> What? :)

[22:09] <jnthn> Just wondering if there's a nice way to fix it vs. just adding rules for all the quoters :)

[22:10] <jnthn> Rest time; 'night

[22:10] <Zoffix> night

[22:12] <MasterDuke> TheLemonMan: #128594 and #129197 are very very interesting

[22:12] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128594

[22:12] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129197

[22:13] <Zoffix> MasterDuke++ :) Yes they are

[22:28] <japhb> .tell jnthn I sent a comment of support for your continued funding as well (pretty much of the "you'd be crazy not to" variety)

[22:28] <yoleaux2> japhb: I'll pass your message to jnthn.

[22:39] <Zoffix> m: say "<>[]()\{}\x[0028]\x[0029]\x[003C]\x[003E]\x[005B]\x[005D]\x[007B]\x[007D]\x[00AB]\x[00BB]\x[0F3A]\x[0F3B]\x[0F3C]\x[0F3D]\x[169B]\x[169C]\x[2018]\x[2019]\x[201A]\x[2019]\x[201B]\x[2019]\x[201C]\x[201D]\x[201E]\x[201D]\x[201F]\x[201D]\x[2039]\x[203A]\x[2045]\x[2046]\x[207D]\x[207E]\x[208D]\x[208E]\x[2208]\x[220B]\x[2209]\x[220C]\x[220A]\x[220D]\x[2215]\x[29F5]\x[223C]\x[223D]\x[2243]\x[22CD]\x[2252]\x[2253]\x[2254]\x[2255]\x[2264]\x[2265]\x[

[22:39] <Zoffix> 2266]\x[2267]\x[2268]\x[2269]\x[226A]\x[226B]\x[226E]\x[226F]\x[2270]\x[2271]\x[2272]\x[2273]\x[2274]\x[2275]\x[2276]\x[2277]\x[2278]\x[2279]\x[227A]\x[227B]\x[227C]\x[227D]\x[227E]\x[227F]\x[2280]\x[2281]\x[2282]\x[2283]\x[2284]\x[2285]\x[2286]\x[2287]\x[2288]\x[2289]\x[228A]\x[228B]\x[228F]\x[2290]\x[2291]\x[2292]\x[2298]\x[29B8]\x[22A2]\x[22A3]\x[22A6]\x[2ADE]\x[22A8]\x[2AE4]\x[22A9]\x[2AE3]\x[22AB]\x[2AE5]\x[22B0]\x[22B1]\x[22B2]\x[22B3]\x[22B4

[22:39] <camelia> rakudo-moar a62207: OUTPUT«===SORRY!===␤Unrecognized backslash sequence: '\x'␤at <tmp>:1␤------> 2253]\x[2254]\x[2255]\x[2264]\x[2265]\x[⏏<EOL>␤Unable to parse expression in double quotes; couldn't find final '"' ␤at <tmp>:1␤------> 2253]\x[2254]\x[225…»

[22:39] <Zoffix> ]\x[22B5]\x[22B6]\x[22B7]\x[22C9]\x[22CA]\x[22CB]\x[22CC]\x[22D0]\x[22D1]\x[22D6]\x[22D7]\x[22D8]\x[22D9]\x[22DA]\x[22DB]\x[22DC]\x[22DD]\x[22DE]\x[22DF]\x[22E0]\x[22E1]\x[22E2]\x[22E3]\x[22E4]\x[22E5]\x[22E6]\x[22E7]\x[22E8]\x[22E9]\x[22EA]\x[22EB]\x[22EC]\x[22ED]\x[22F0]\x[22F1]\x[22F2]\x[22FA]\x[22F3]\x[22FB]\x[22F4]\x[22FC]\x[22F6]\x[22FD]\x[22F7]\x[22FE]\x[2308]\x[2309]\x[230A]\x[230B]\x[2329]\x[232A]\x[23B4]\x[23B5]\x[2768]\x[2769]\x[276A]\x[

[22:39] <Zoffix> 276B]\x[276C]\x[276D]\x[276E]\x[276F]\x[2770]\x[2771]\x[2772]\x[2773]\x[2774]\x[2775]\x[27C3]\x[27C4]\x[27C5]\x[27C6]\x[27D5]\x[27D6]\x[27DD]\x[27DE]\x[27E2]\x[27E3]\x[27E4]\x[27E5]\x[27E6]\x[27E7]\x[27E8]\x[27E9]\x[27EA]\x[27EB]\x[2983]\x[2984]\x[2985]\x[2986]\x[2987]\x[2988]\x[2989]\x[298A]\x[298B]\x[298C]\x[298D]\x[298E]\x[298F]\x[2990]\x[2991]\x[2992]\x[2993]\x[2994]\x[2995]\x[2996]\x[2997]\x[2998]\x[29C0]\x[29C1]\x[29C4]\x[29C5]\x[29CF]\x[29D0

[22:39] <timotimo> wow

[22:40] <timotimo> are those our "matching braces"?

[22:40] <Zoffix> :) lol, sorry. Underestimated the size of that string

[22:41] <Zoffix> hm.

[22:42] <Zoffix> m: say q{„”} eq q{„”}

[22:42] <camelia> rakudo-moar a62207: OUTPUT«True␤»

[22:42] <Zoffix> mkay, then I don't know why 128304 is present at all. Seems the logic for it is already in there

[22:43] <Zoffix> timotimo, yeah, that was the matching brackets string

[22:46] <AlexDaniel> Zoffix: fwiw, see #126557

[22:46] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126557

[22:46] <AlexDaniel> Zoffix: perhaps the fix is going to be similar

[23:16] <lizmat> night #perl6-dev!

[23:36] <dalek> roast: fb22ba6 | MasterDuke17++ | S03-operators/repeat.t:

[23:36] <dalek> roast: Tests for infix<xx> with -Inf and ±NaN

[23:36] <dalek> roast:

[23:36] <dalek> roast: Final set of tests for RT #125628

[23:36] <dalek> roast: review: https://github.com/perl6/roast/commit/fb22ba6840

[23:36] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125628

[23:39] <AlexDaniel> m: say -NaN

[23:39] <camelia> rakudo-moar a62207: OUTPUT«NaN␤»

[23:39] <AlexDaniel> MasterDuke: -NaN? Is it a thing?

[23:40] <MasterDuke> figured it couldn't hurt

[23:41] <AlexDaniel> heh

[23:41] <AlexDaniel> marked as resolved

[23:41] <MasterDuke> there are two other tests with -NaN, so it might have been overkill
