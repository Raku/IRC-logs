[00:26] <MasterDuke> Zoffix: i really like your last blog post, but i obviously wasn't as clear as i should have been in RT#128526

[00:26] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128526

[00:26] <MasterDuke> in that i think there should have been something to catch when using the :w

[00:27] <Zoffix> MasterDuke, right. Instead of throwing the exception, .write seems to exit altogether.

[00:27] <MasterDuke> what should have been thrown and caught is that i was attempting to start a non-existing executable

[00:28] <MasterDuke> yeah, .write ate the exception

[00:29] <Zoffix> And .start wouldn't throw. It's the Promise it returns would be broken and you'd get an exception when you `await` it.

[00:30] <Zoffix> Which actually works if you toss out the .write()

[00:32] <MasterDuke> yeah, my "works like it should" example catches that exception, but then dies with a message instead of reporting the actual exception thrown, which was less than clear

[01:08] <dalek> roast: a053865 | (Zoffix Znet)++ | / (2 files):

[01:08] <dalek> roast: Add doesn't_hang() test to Test::Util

[01:08] <dalek> roast:

[01:08] <dalek> roast: Executes a potentially-hanging program with Proc::Async.

[01:08] <dalek> roast: Kills it if it does not complete within specified time.

[01:08] <dalek> roast: Tests STDERR/STDOUT if the program completes successfully.

[01:08] <dalek> roast: review: https://github.com/perl6/roast/commit/a053865b96

[01:29] <dalek> roast: c46127c | (Zoffix Znet)++ | packages/Test/Util.pm:

[01:29] <dalek> roast: Change default wait time for doesn't_hang()

[01:29] <dalek> roast:

[01:29] <dalek> roast: Use 1.5 second default wait instead of 1 second.

[01:29] <dalek> roast: review: https://github.com/perl6/roast/commit/c46127c8d2

[01:29] <dalek> roast: 40a965e | (Zoffix Znet)++ | packages/Test/Util.pm:

[01:29] <dalek> roast: Use kebob case for doesn't-hang

[01:29] <dalek> roast: review: https://github.com/perl6/roast/commit/40a965e1d6

[01:41] <dalek> roast: 242c56c | (Zoffix Znet)++ | fudge:

[01:41] <dalek> roast: Use kebob case for doesn't-hang() in fudgeables

[01:41] <dalek> roast: review: https://github.com/perl6/roast/commit/242c56c04f

[01:41] <dalek> roast: 430bd20 | (Zoffix Znet)++ | S19-command-line/repl.t:

[01:41] <dalek> roast: Replace verbose test with doesn't-hang() call

[01:41] <dalek> roast: review: https://github.com/perl6/roast/commit/430bd209fe

[01:41] <dalek> roast: a047d78 | (Zoffix Znet)++ | S17-supply/interval.t:

[01:41] <dalek> roast: [SKIP FUDGE] done() on first iteration of Supply.interval must not hang

[01:41] <dalek> roast:

[01:41] <dalek> roast: RT#128469

[01:41] <dalek> roast: review: https://github.com/perl6/roast/commit/a047d78ac9

[01:41] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128469

[01:51] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Make Str.samemark about 50x faster

[01:51] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/144558128 https://github.com/rakudo/rakudo/compare/66a5928ae101...ce4734fd4fed

[05:04] <dalek> roast: 1156ad1 | usev6++ | S32-str/samemark.t:

[05:04] <dalek> roast: Skip test for samemark on JVM (NYI)

[05:04] <dalek> roast: review: https://github.com/perl6/roast/commit/1156ad1648

[07:41] <lizmat> Files=1109, Tests=52438, 225 wallclock secs (13.38 usr  3.83 sys + 1401.01 cusr 117.03 csys = 1535.25 CPU)   # new low in CPU, on a cold machine

[07:41] <lizmat> down from 1544  :-)

[07:52] <dalek> rakudo/nom: 79348c7 | neuron++ | lib/NativeCall.pm6:

[07:52] <dalek> rakudo/nom: Move role definitions before the setup method

[07:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/79348c7de5

[07:52] <dalek> rakudo/nom: a3fad54 | neuron++ | lib/NativeCall.pm6:

[07:52] <dalek> rakudo/nom: Add ability to mark native call to be not mangled

[07:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a3fad54345

[07:52] <dalek> rakudo/nom: 527f8d9 | lizmat++ | lib/NativeCall.pm6:

[07:52] <dalek> rakudo/nom: Merge pull request #826 from vlmarek/nom

[07:52] <dalek> rakudo/nom:

[07:52] <dalek> rakudo/nom: Ability to mark nativecall import symbol to be mangled or not

[07:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/527f8d9c8a

[12:12] <psch> yay, i got the 'use lib <java#...>' stuff kinda working

[12:13] <psch> as in, it doesn't die on the use

[12:13] <psch> but that's about how far it works, and i also seem to have broken :from<JavaRuntime> in the process :|

[12:13] <[Coke]> Zoffix: I have no insight into the mailing list; in those cases, all I can do is raise it to the rt admins - but keep in mind that there is a spam filter in front of that, so some emails will get blacklisted and dropped, and others will get held in queue until a human can review them.

[12:13] <yoleaux2> 13 Jul 2016 21:43Z <Zoffix> [Coke]: unsure if you have access to look into it, but it seems there's some email issues between RT and perl6-compiler list. For example lizmat replied on the mailing list to a bug report (to [email@hidden.address] but it did not show up on the ticket: RT#128615 Also, I've been commenting on a bunch of tickets with Bcc to perl6-compiler, but those don't get to mailing list

[12:13] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128615

[12:18] <dalek> roast: bf10b7b | (Zoffix Znet)++ | S29-os/system.t:

[12:18] <dalek> roast: Use SKIP fudge instead of commenting out the test

[12:18] <dalek> roast:

[12:18] <dalek> roast: The skip fudger does not run the actual tests, so they won't hang

[12:18] <dalek> roast: review: https://github.com/perl6/roast/commit/bf10b7b71e

[12:28] <dalek> roast: ca52ecc | (Zoffix Znet)++ | S29-os/system.t:

[12:28] <dalek> roast: [TODO FUDGE] LAST phaser gets triggered when using -n command line switch

[12:28] <dalek> roast:

[12:28] <dalek> roast: RT#128398

[12:28] <dalek> roast: review: https://github.com/perl6/roast/commit/ca52ecc150

[12:28] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128398

[12:56] <psch> hrm, so i get a TypeObject now

[12:56] <psch> i think i had this exact same problem before and fixed it, but...

[12:56] <psch> well, that was probably like a year ago or something :|

[13:12] <dalek> roast: 8e585a4 | (Zoffix Znet)++ | S03-metaops/cross.t:

[13:12] <dalek> roast: &infix: works with metaoperators regardless of combination

[13:12] <dalek> roast:

[13:12] <dalek> roast: RT#78188

[13:12] <dalek> roast: review: https://github.com/perl6/roast/commit/8e585a4365

[13:12] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=78188

[13:29] <dalek> nqp: 0a77c17 | (Pawel Murias)++ | src/vm/js/ (2 files):

[13:29] <dalek> nqp: [js] Implement nqp::sleep.

[13:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0a77c1778a

[13:30] <[Coke]> pmurias: how's it going? Haven't seen a blog post in a while.

[13:38] <Frameless> So some entire roast files aren't used during tests? How does the make spectest know what to skip?

[13:38] <pmurias> [Coke]: working up on speeding up the code nqp-js generates as building rakudo.js/compiling the part of the setting that works took ages (and if rakudo.js was compiling code that slow it wouldn't be usefull for much)

[13:39] <Frameless> For example S10-packages/require-and-use.t is still testing %*INC and when I run it manually pretty much every test in it fails. Yet that's not see with make spectest

[13:39] <Frameless> *seen

[13:39] <pmurias> [Coke]: I'll set to planning a blog post as there are some (sort of interesting) optimization ideas

[13:46] <[Coke]> pmurias++

[13:47] <lizmat> jnthn: looking at SlippyIterator: is there a reason why we cannot just use DEFINITEness of $!slip-iter as a flag for slipping ?

[13:48] <lizmat> jnthn: and get rid of the $!slipping attribute altogether ?

[14:36] <dalek> rakudo/nom: eb79d73 | lizmat++ | src/core/Any-iterable-methods.pm:

[14:36] <dalek> rakudo/nom: Make for @a.kv -> $k, $v { } 4x as fast

[14:36] <dalek> rakudo/nom:

[14:36] <dalek> rakudo/nom: By adding a special optimised case for &block.count == 2 to sequential-map.

[14:36] <dalek> rakudo/nom: Otherwise, this would have been done by the verye generic case that takes

[14:36] <dalek> rakudo/nom: any number of arguments and has support for phasers.  Since the -> $k, $v

[14:36] <dalek> rakudo/nom: case is a pretty common occurrence, I felt that this special optimised

[14:36] <dalek> rakudo/nom: code made sense to add, even though it adds an extra code path and thus

[14:36] <dalek> rakudo/nom: burden on maintenance..

[14:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eb79d73bfe

[14:39] <lizmat> afk&

[14:55] <perlpilot> That block that's needed "for some reason" is slightly scary.

[14:59] <japhb> .oO( Why is it scary?  For some reason. )

[15:07] <psch> well, it is about lowering, so i'd guess inlining looses a reference somehow?

[15:07] <psch> not that i really know those bits, like, at all vOv

[15:30] <psch> okay, what

[15:30] <psch> the existence of a second candidate for typeForName in BootJavaInterop is enough to break importing of JavaRuntime classes

[15:31] <psch> ...i think that's actually somewhat of a bootstrappy issue, maybe

[15:32] <psch> 'cause BootJavaInterop builds the interop adaptor for RakudoJavaInterop

[15:32] <psch> and maybe inheritance and mmd somehow step on each others feet there..?

[16:08] <psch> ha ha

[16:08] <psch> soo, i changed it

[16:09] <psch> instead of having two typeForName candidates i ripped out the "hack a new path into the sysClassLoader via inflection" bit from the new candidate

[16:09] <psch> and put it into RakudoJavaInterop, instead of BootJavaInterop

[16:09] <psch> and, well, it relies on getting the class loader of the current class

[16:09] <psch> which, apparently, in RakudoJavaInterop, is null

[17:08] <psch> well

[17:08] <psch> i can't get a class loader in any way i can think of

[17:08] <psch> going via ClassLoader.systemClassLoader gives me null, super.getClass().getClassLoader() gives null, and even a method that does getClass().getClassLoader() in BootJavaInterop called by RakudoJavaInterop gives null

[17:09] <psch> ...the latter is probably not particularly different from calling getClass().getClassLoader() in RakudoJavaInterop, but i'm confused and desperate :P

[17:21] <psch> oh fsck, that's the bootstrap loader

[17:21] <psch> which means ripping out the "don't use bootclasspath fix" i had in previously was a bad idea :|

[17:22] <psch> as in, getting null from getClassLoader() means it's the boot ClassLoader

[17:22] <psch> but, when i don't have the bootclasspath set i get problems with JavaRuntime imports

[17:22] <psch> i mean, i had a reason to rip that "fix" out again :|

[17:27] <nine> Frameless: t/spectest.data in rakudo

[17:29] <nine> Frameless: if you see test files that could actually work with maybe a little update, then please fix them and add them to spectest.data :) It's a waste to leave them lying around

[17:29] <Frameless> Thanks

[17:30] <[Coke]> there is a utility to run that will show you all the unrun files and how well they do:

[17:54] <psch> humm, some kind of progress, probably..?

[17:54] <psch> the java# spec works now

[17:55] <psch> although a bad test revealed how fragile it is...

[17:55] <psch> as in, calling a non-static method on the class (and not an instance) SEGVs the jvm

[17:55] <psch> but, unfortunately, the javart# spec is now broken again, due to the bootclasspath removal

[17:56] <psch> i think i'm gonna let that sit for at least the rest of today

[17:56] <psch> all this class loader business is really weird and opaque

[18:01] <[Coke]> tools/update-passing-test-data.pl # sorry, someone in office since last send.

[19:58] * lizmat drops a pin

[20:20] <AlexDaniel> committable: 2015.10 use experimental :macros; macro bar { 42 }; bar;

[20:20] <committable> AlexDaniel: ｢exit=1｣ ===SORRY!===␤Could not find experimental in any of:␤  file#/home/bisectable/.perl6/2015.10/lib␤  inst#/home/bisectable/.perl6/2015.10␤  file#/home/bisectable/git/bisectable/builds/3df26301e146883b287138df382878a0414f62de/share/perl6/lib␤

[20:20] <committable> ..file#/home/bisectable/git/bisectable/builds/3df26301e146883b287138df382878a0414f62de/share/perl6/vendor/lib␤  file#/home/bisectable/git/bisectable/builds/3df26301e146883b287138df382878a0414f62de/share/perl6/site/lib␤

[20:20] <committable> ..inst#/home/bisectable/git/bisectable/builds/3df26301e146883b287138df382878a0414f62de/share/perl6␤  inst#/home/bisectable/git/bisectable/builds/3df26301e146883b287138df382878a0414f62de/share/perl6/vendor␤

[20:20] <committable> ..inst#/home/bisectable/git/bisectable/builds/3df26301e146883b287138df382878a0414f62de/share/perl6/site

[20:20] <AlexDaniel> oh crap no

[20:22] <AlexDaniel> MasterDuke: just killed bisectable thinking that I was running it :D

[20:40] <MasterDuke> AlexDaniel: i thought you were?

[20:41] <AlexDaniel> MasterDuke: rajaniemi.freenode.net (Helsinki, FI, EU) – no idea who is that :)

[20:41] <AlexDaniel> mleh wrong thing copied

[20:41] <AlexDaniel> ~Committab@ns306169.ip-94-23-219.eu I mean

[20:42] <AlexDaniel> oh, that's me!

[20:43] <MasterDuke> ha

[20:43] <AlexDaniel> yeah, that was definitely me…

[20:43] * AlexDaniel hides

[20:43] <AlexDaniel> anyway, it's time to run latest versions now

[20:49] <MasterDuke> woot for new versions

[22:14] <dalek> rakudo/nom: 6bad689 | lizmat++ | src/core/ (2 files):

[22:14] <dalek> rakudo/nom: Make Str.starts-with 2x as fast

[22:14] <dalek> rakudo/nom:

[22:14] <dalek> rakudo/nom: By creating an optimized Str version, and letting the Cool candidate

[22:14] <dalek> rakudo/nom: refer to that one.

[22:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6bad68932e

[22:14] <dalek> rakudo/nom: 806ea82 | lizmat++ | src/core/ (2 files):

[22:14] <dalek> rakudo/nom: Make Str.ends-with 25% faster

[22:14] <dalek> rakudo/nom:

[22:14] <dalek> rakudo/nom: By providing a separate Str candidate, and letting the Cool candidate

[22:14] <dalek> rakudo/nom: use that.

[22:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/806ea82e72

[22:32] <dalek> rakudo/nom: c3ee517 | lizmat++ | src/core/ (2 files):

[22:32] <dalek> rakudo/nom: Make Str.substr-eq 4x as fast

[22:32] <dalek> rakudo/nom:

[22:32] <dalek> rakudo/nom: By adding dedicated optimised Str candidates, which the Cool candidate

[22:32] <dalek> rakudo/nom: calls for compatibility

[22:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c3ee517c26

[22:46] <dalek> rakudo/nom: ada2fe0 | lizmat++ | src/core/Str.pm:

[22:46] <dalek> rakudo/nom: Make Str.contains 6x as fast

[22:46] <dalek> rakudo/nom:

[22:46] <dalek> rakudo/nom: By adding optimised Str candidates, to which the Cool candidate defers.

[22:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ada2fe0785

[22:50] <dalek> rakudo/nom: fb71b2b | lizmat++ | src/core/Cool.pm:

[22:50] <dalek> rakudo/nom: Oops, forgot to adapt the Cool.contains variant

[22:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fb71b2b706

[23:36] <dalek> rakudo/nom: c9dcc9e | lizmat++ | src/core/Cool.pm:

[23:36] <dalek> rakudo/nom: Oops, forgot to Intify the position

[23:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c9dcc9e23f

[23:36] <lizmat> two oopses in a row, I should stop committing

[23:36] <lizmat> good night, #perl6-dev
