[00:36] <Zoffix> F's sake >_< spent an X-amount of time trying to debug why my change was breaking a test and turns out the breakage was due to my editor auto-removing trailing spaces ~_~

[00:58] <btyler_> timotimo: well, I gave a talk about erlang and perl6 and schedulers :)

[00:59] <btyler_> in #perl6? will backlog

[01:22] <dalek> roast: 2d2efaa | (Zoffix Znet)++ | S26-documentation/07-tables.t:

[01:22] <dalek> roast: Add a warning for trailing-whitespace tests

[01:22] <dalek> roast:

[01:22] <dalek> roast: It's not uncommon to configure editors to auto-strip trailing whitespace

[01:22] <dalek> roast: and this feature silently breaks tests in this file.

[01:22] <dalek> roast: review: https://github.com/perl6/roast/commit/2d2efaa940

[01:22] <dalek> roast: a7387a6 | (Zoffix Znet)++ | S26-documentation/07-tables.t:

[01:22] <dalek> roast: Merge pull request #129 from zoffixznet/fix-RT128221-fail-table-parse-leading-hyphen

[01:22] <dalek> roast:

[01:22] <dalek> roast: Add a warning for trailing-whitespace tests

[01:22] <dalek> roast: review: https://github.com/perl6/roast/commit/a7387a6369

[03:10] <dalek> rakudo/nom: 57f8f8f | lizmat++ | src/core/Str.pm:

[03:10] <dalek> rakudo/nom: Fix for RT #128034

[03:10] <dalek> rakudo/nom:

[03:10] <dalek> rakudo/nom: Inspired by PR #796, Zoffix++

[03:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/57f8f8f0fa

[03:10] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128034

[06:20] <[Tux]> This is Rakudo version 2016.06-9-g57f8f8f built on MoarVM version 2016.06

[06:20] <[Tux]> test            16.529

[06:20] <[Tux]> test-t           9.965

[06:20] <[Tux]> csv-parser      21.823

[06:26] <[Tux]> next run was 9.86

[10:53] <Zoffix> lizmat++ good fix

[12:14] <masak> is it really the *sanity* we're limiting...?

[12:15] <masak> you're sure it's not (say) the insanity? :P

[12:15] <BrokenRobot> :)

[12:15] * masak likely didn't get-the-joke in that commit, or it's an honest overnegation

[12:16] <BrokenRobot> it's a sanity check for `limit'

[12:19] <[Coke]> (mailed) Not that this helps, but I think fax is also acceptable. Not sure if scan&email is, but probably?

[12:20] <[Coke]> if the negation kind of gets away from you, is that an abnegation?

[12:20] <[Coke]> (because ab-, ... nevermind)

[12:24] * lizmat backlogs

[12:28] <dalek> roast: c3f40c4 | (Zoffix Znet)++ | S32-str/split-simple.t:

[12:28] <dalek> roast: Add tests for RT#128034 (split with NaN limit must throw)

[12:28] <dalek> roast: review: https://github.com/perl6/roast/commit/c3f40c4b36

[12:28] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128034

[12:31] <masak> [Coke]: ;)

[12:32] <masak> BrokenRobot: ah, that explains why I read it wrong. I'm used to routine names being verbs when they can.

[12:41] <lizmat> masak: limit-sanity seemed like a good dual of split-sanity  :-)

[12:46] <masak> now I know to read those as `ensure-limit-sanity` and `ensure-split-sanity` ;)

[12:48] <[Coke]> thanks to hoelzro++ and Zoffix++ for doing the last 2 releases@

[12:48] <[Coke]> !

[12:51] <BrokenRobot> \o/

[12:52] <dalek> rakudo/nom: 7cff429 | lizmat++ | src/core/Str.pm:

[12:52] <dalek> rakudo/nom: Take masak++ 's implicit naming suggestion

[12:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7cff429f6b

[12:55] <[Coke]> m: @// '_';  # perl6 emojis

[12:55] <camelia> rakudo-moar 57f8f8: ( no output )

[12:55] * lizmat wonders what caused the test-t regression

[13:07] <BrokenRobot> split NaN test? There only three other commits that went in since last 9.46 for test-t: https://github.com/rakudo/rakudo/commit/a223163b3c (is required with benefits) https://github.com/rakudo/rakudo/commit/8ad19e2ec3 (Backtrace::Frame own new) https://github.com/rakudo/rakudo/commit/ee663c40ac (Don't leak numeric cases)

[13:07] * BrokenRobot imagines a CSV module would heavily use .split

[13:08] * BrokenRobot wonders how representative the test-t stuff as a bench for the entire fastness of rakudo

[13:29] <lizmat> BrokenRobot: well, it is *a* canary of some sort

[13:29] <lizmat> definitely not *the* canary :-)

[13:45] <dalek> rakudo/nom: 2c61fda | peschwa++ | src/core/StrDistance.pm:

[13:45] <dalek> rakudo/nom: Make StrDistance.Str return $!after.

[13:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2c61fdabb3

[13:45] <dalek> roast/6.c-errata: 45aede9 | peschwa++ | S05-transliteration/trans.t:

[13:45] <dalek> roast/6.c-errata: Add test for stringification of StrDistance

[13:45] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/45aede9c07

[13:46] <psch> oh fsck

[13:46] <psch> was that the right branch?

[13:46] <psch> 'cause i think it wasn't

[13:46] <BrokenRobot> master, I think?

[13:46] <BrokenRobot> Well, that's where I was adding things at least :P

[13:47] <dalek> roast: 20103df | peschwa++ | S05-transliteration/trans.t:

[13:47] <dalek> roast: Add test for stringification of StrDistance

[13:47] <dalek> roast: review: https://github.com/perl6/roast/commit/20103df817

[13:48] <psch> i'll revert on 6.c-errata i suppose

[13:48] <dalek> roast/6.c-errata: 8367c1a | peschwa++ | S05-transliteration/trans.t:

[13:48] <dalek> roast/6.c-errata: Revert "Add test for stringification of StrDistance"

[13:48] <dalek> roast/6.c-errata:

[13:48] <dalek> roast/6.c-errata: This reverts commit 45aede9c07ceaf876eec04a2607a222b8c623564.

[13:48] <dalek> roast/6.c-errata: Wrongfully commited on 6.c-errata, hence it goes away again, sorry.

[13:48] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/8367c1ad5d

[13:52] <BrokenRobot> m: class Foo { method check { for ^1000_000 { next unless 5 != $_ } } }.new.check; say now - INIT now

[13:52] <camelia> rakudo-moar 2c61fd: OUTPUT«0.49098248␤»

[13:52] <BrokenRobot> m: class Foo { method !x (\a, \b) { a != b }; method check { for ^1000_000 { next unless self!x(5, $_) } } }.new.check; say now - INIT now

[13:52] <camelia> rakudo-moar 2c61fd: OUTPUT«0.6636506␤»

[13:52] <BrokenRobot> m: say (0.6636506 - 0.49098248) / 0.6636506

[13:52] <camelia> rakudo-moar 2c61fd: OUTPUT«0.260179257␤»

[13:54] <BrokenRobot> lizmat: an extra method call is 26% slower. If CSV uses a ton of splits maybe it could be *the* canary?

[13:56] <lizmat> yes, CSV does a lot of split, but in a  profile the !limit-sanity was at 2% CPU, and it replaces some other tests

[13:56] <lizmat> so, I'm not sure what's going on

[13:56] <lizmat> no time to dig deeper atm, busy with P6W

[14:12] <BrokenRobot> Ah. ok. :) I need to learn more about how to do performance tests.

[14:55] <lizmat> And another Perl 6 weekly hits the Net: https://p6weekly.wordpress.com/2016/06/21/2016-25-a-quick-one-from-orlando/

[14:58] <nine> Thanks lizmat :)

[15:31] <lizmat> m: class A { has $.a }; A.new(a=>42).a = 666   # I think this is actually an LTA error message

[15:31] <camelia> rakudo-moar 2c61fd: OUTPUT«Cannot modify an immutable Int␤  in block <unit> at <tmp> line 1␤␤»

[15:31] <jnthn> What do you want it to say? "Cannot assign to"?

[15:33] <lizmat> it should probably mention that you were trying to assign to an attribute ?

[15:33] <lizmat> a ro attribute ?

[15:33] <jnthn> Oh

[15:33] <jnthn> No, we don't have the info handy to do that

[15:33] <jnthn> And can't easily have that either

[15:33] <jnthn> All we have by the time = runs is, well, that immutable Int

[15:34] <lizmat> yeah, I realize that

[15:34] <jnthn> So we could word-smith it to mention assignmnet, but I don't know we can do much better

[15:35] <jnthn> Or at least, I don't see how we can

[15:35] <lizmat> yeah, I have some half-baked ideas...  but maybe for much later  :[)

[15:37] <jnthn> I guess there may be some way to stick some kind of context annotation (in the same way we do file/line numbers) in there and be able to figure it out from the stack trace.

[15:48] <[Coke]> question on the is required updates - was there a ticket for that? or discussion on channel?

[15:49] <[Coke]> I don't think there was a design doc on it, since it was added as a result of an Ovid slide deck, originally)

[18:02] <dalek> rakudo/nom: 5801810 | lizmat++ | t/04-nativecall/13-union.t:

[18:02] <dalek> rakudo/nom: s/is_approx/is-approx/

[18:02] <dalek> rakudo/nom:

[18:02] <dalek> rakudo/nom: This appears to fix test errors observe by dha++

[18:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/580181071a

[18:03] <lizmat> argh

[18:12] <dalek> rakudo/nom: 479628e | lizmat++ | t/04-nativecall/ (7 files):

[18:12] <dalek> rakudo/nom: s/is_approx/is-approx/ for all nativecall tests

[18:12] <dalek> rakudo/nom:

[18:12] <dalek> rakudo/nom: This should remove deprecated warnings

[18:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/479628e542

[18:39] <psch> i've taken another unbiased look at the jvm precomp issue, and i think i went down the wrong track somewhere earlier

[18:39] <psch> as in, the missing CodeRef is inside the module that was precompiled

[18:39] <psch> the EVAL that happens in the CU that wants to load that module might or might not play a role directly

[18:40] <psch> but the degenerate case of < module Foo { BEGIN EVAL 'say "hi"' } > dies due to a missing CodeRef in the classfile for Foo

[18:40] <psch> but it does so *after* the BEGIN code ran

[18:40] <psch> so i am currently suspecting that we lose the mainline of the module somehow, and not the nested CU

[18:41] <psch> i still haven't found a reliable way to map existing CodeRefs in a classfile to "pieces of code", so to speak

[18:41] <psch> i mean, that module Foo up there has 11 CodeRefs

[18:41] <psch> i see maybe three, from where i'm standing, so i'm clearly missing something

[20:00] <lizmat> hmmm... I just found out that at least Map.WHICH and BagHash.WHICH are borked

[20:00] <lizmat> brb

[21:02] <dalek> rakudo/nom: 1bf7270 | lizmat++ | src/core/CompUnit/PrecompilationStore/File.pm:

[21:02] <dalek> rakudo/nom: Make sure BUILD is a submethod and returns Nil

[21:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1bf7270eca

[21:02] <dalek> rakudo/nom: d9956e5 | lizmat++ | src/core/ (2 files):

[21:02] <dalek> rakudo/nom: Make Map a value object

[21:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d9956e5ad8

[21:13] <dalek> rakudo/nom: 2058a92 | lizmat++ | src/core/Hash.pm:

[21:13] <dalek> rakudo/nom: Oops, forgot a signature

[21:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2058a9253a

[21:13] <dalek> rakudo/nom: 5ca24cc | lizmat++ | src/core/ (2 files):

[21:13] <dalek> rakudo/nom: BagHash|MixHash shouldn't be value types

[21:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5ca24cc405

[21:46] <lizmat> afk&
