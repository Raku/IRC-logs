[00:35] <MasterDuke> .seen AlexDaniel

[00:35] <yoleaux2> I saw AlexDaniel 6 Jul 2016 10:57Z in #perl6-dev: <AlexDaniel> if given enough permissions to work on stuff, I can do it. And I think that there are others who will happily help with it. The problem is that we can't decide what we should use instead of RT

[00:54] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Revert "preparing for upcoming changes:"

[00:54] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/143451638 https://github.com/rakudo/rakudo/compare/897c22c346fa...110704d2ea8b

[03:32] <Zoffix> .ask jnthn are you able to comment on this ticket? The proposal is to use multi-dispatch instead of separate subs to be consistent with other subs in Test.pm6 and liz's comments suggest I should ask your opinion: https://rt.perl.org/Ticket/Display.html?id=128418#ticket-history

[03:32] <yoleaux2> Zoffix: I'll pass your message to jnthn.

[03:58] <dalek> roast: 1c4a4f7 | (Zoffix Znet)++ | S02-types/version.t:

[03:58] <dalek> roast: v6 versions must compare correctly against other versions

[03:58] <dalek> roast:

[03:58] <dalek> roast: RT #128408

[03:58] <dalek> roast: review: https://github.com/perl6/roast/commit/1c4a4f726d

[03:58] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128408

[04:12] <Zoffix> For core members to review: liz already commented that fixing this would be bloat. Should the ticket be closed as wontfix? https://rt.perl.org/Ticket/Display.html?id=128402#ticket-history

[04:16] <Zoffix> I'm actually finding quite a few tickets I'm marking as 'Needs core member decision'. I guess I'll keep a list and ping about a couple a day: http://i.imgur.com/aveZaUF.png

[04:32] <Zoffix> Does anyone know how to fudge stuff in roast so I could keep it outside of t/spec and still fudge?

[04:34] <dalek> roast: 6cd55d6 | (Zoffix Znet)++ | S06-signature/introspection.t:

[04:34] <dalek> roast: Callable in signature stringifies correctly

[04:34] <dalek> roast:

[04:34] <dalek> roast: RT#128392

[04:34] <dalek> roast: review: https://github.com/perl6/roast/commit/6cd55d6bea

[04:34] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128392

[04:51] <dalek> roast: 6fd8bbb | (Zoffix Znet)++ | S03-operators/repeat.t:

[04:51] <dalek> roast: xx must not sink

[04:51] <dalek> roast:

[04:51] <dalek> roast: RT#128382

[04:51] <dalek> roast: review: https://github.com/perl6/roast/commit/6fd8bbb9c8

[04:51] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128382

[09:05] <dalek> rakudo/nom: 340e2dc | (Zoffix Znet)++ | src/Perl6/Metamodel/PackageHOW.nqp:

[09:05] <dalek> rakudo/nom: Revert "Make .ver and .auth MetaModel methods available on Packages"

[09:05] <dalek> rakudo/nom:

[09:05] <dalek> rakudo/nom: This reverts commit 26817b3e355c663bd12a9e0c3e1b0728befb3934.

[09:05] <dalek> rakudo/nom:

[09:05] <dalek> rakudo/nom: As per discussion on https://github.com/rakudo/rakudo/pull/818#issuecomment-231468771

[09:05] <dalek> rakudo/nom: packages are stubs and must not have .ver/auth identifiers

[09:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/340e2dce72

[09:05] <dalek> rakudo/nom: 8382520 | niner++ | src/Perl6/Metamodel/PackageHOW.nqp:

[09:05] <dalek> rakudo/nom: Merge pull request #819 from zoffixznet/revert-ver

[09:05] <dalek> rakudo/nom:

[09:05] <dalek> rakudo/nom: Revert "Make .ver and .auth MetaModel methods available on Packages"

[09:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/83825205f3

[09:37] <dalek> rakudo/nom: b11477f | peschwa++ | src/vm/jvm/CompUnit/Repository/Java.pm:

[09:37] <dalek> rakudo/nom: Add basic infrastructure to support JVM interop via CURs.

[09:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b11477f3b5

[09:37] <dalek> rakudo/nom: cbf1171 | peschwa++ | t/03-jvm/01-interop.t:

[09:37] <dalek> rakudo/nom: :from<java> is gone in favor of :from<Java>.

[09:37] <psch> huh, 16 commits not enough for "heuristic branch merge"?

[09:38] <timotimo> the dalek exterminates in mysterious ways

[09:39] <psch> there also was a merge commit somewhere in there :P

[09:41] <psch> anyway, yeah, we now have jvminterop that passes all currently existing tests in t/03-jvm/01-interop.t

[09:41] <psch> it's only 26 tests, and they don't really test a lot, but it's something

[09:42] <timotimo> *nice*

[09:42] <timotimo> i was too uninspired to create more tests for that :(

[09:42] <psch> i mean, the branch was pretty much still fine

[09:42] <psch> but i didn't want to merge while we still had the whole install-core-dist.pl problem vOv

[09:43] <psch> well, the current tests do cover most of what works, so idk

[09:44] <timotimo> so only 5% of those tests are actually mine? :)

[09:45] <psch> you wrote tests for jvminterop?

[09:46] <timotimo> maybe?

[09:46] <psch> git says no, blame falls squarely on me for t/03-jvm/01-interop.t

[09:46] <psch> well, at least as of the recent merge

[09:47] <timotimo> OK :)

[09:47] <timotimo> it's probably fine

[09:47] <timotimo> i might not have written tests for in there

[09:55] <dalek> rakudo/nom: 586f784 | (Daniel Green)++ | src/core/Str.pm:

[09:55] <dalek> rakudo/nom: Sync the Str+Int version of Str.x with the str+int version

[09:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/586f7847dc

[09:55] <dalek> rakudo/nom: 8ea2ae8 | lizmat++ | src/core/Str.pm:

[09:55] <dalek> rakudo/nom: Merge pull request #820 from MasterDuke17/Str.pm_optimizations

[09:55] <dalek> rakudo/nom:

[09:55] <dalek> rakudo/nom: Sync the Str+Int version of Str.x with the str+int version

[09:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8ea2ae8c87

[09:55] <timotimo> Str.x? huh?

[09:56] <timotimo> ah, infix:<x>, ok

[10:25] <[Tux]> This is Rakudo version 2016.06-202-g8ea2ae8 built on MoarVM version 2016.06-9-g8fc21d5

[10:25] <[Tux]> test            16.623

[10:25] <[Tux]> test-t           9.068

[10:25] <[Tux]> csv-parser      17.143

[10:27] <hankache> is it getting any faster [Tux]?

[10:28] <lizmat> hankache: generally yes, with some Â±.3 seconds noise

[10:29] <hankache> great!

[10:40] <MasterDuke> would anyone mind if i try starting a bot here? for background, see http://irclog.perlgeek.de/perl6/2016-07-09#i_12810559

[10:41] <MasterDuke> tldr, since AlexDaniel already has a Rakudo built at every commit for bisectbot, why not make those available to run code like camelia

[10:52] <MasterDuke> silence taken as consent

[10:56] <lizmat> MasterDuke++

[10:58] <timotimo> yeah, that'd be cool

[10:59] <MasterDuke> committable: 110704d2ea8b31435a68b3f01de9b2a9875dcc7b say $*PERL.compiler.version

[10:59] <committable> MasterDuke: failure

[11:00] <MasterDuke> awww

[11:03] <timotimo> we're not going to have a cameliable, though? :)

[11:04] <MasterDuke> ha. next might be benchable

[11:04] <timotimo> well, camelia can already profile

[11:05] <MasterDuke> i'd forgotten about that, but being able to run the same code at different commits and returning the timing might be useful

[11:06] <timotimo> right

[11:06] <timotimo> that'd require a machine that isn't busy otherwise

[11:06] <timotimo> hack, for example, would be a very bad machine to use

[11:06] <timotimo> or p6c.org in general

[11:06] <MasterDuke> how many cores does it have?

[11:08] <dalek> rakudo/nom: 4e4039e | lizmat++ | src/core/List.pm:

[11:08] <dalek> rakudo/nom: Make List.AT-POS about 2.5x faster

[11:08] <dalek> rakudo/nom:

[11:08] <dalek> rakudo/nom: - don't allocate when we don't need to

[11:08] <dalek> rakudo/nom: - rewrite logic in nqp, and be smarter about it

[11:08] <dalek> rakudo/nom: - now also capable of handling bare Lists without $!reified

[11:08] <dalek> rakudo/nom: - also fix $list.AT-POS(Int:U) handling

[11:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4e4039e001

[11:08] <timotimo> 6 cores

[11:08] <timotimo> the machine, i mean.

[11:12] <MasterDuke> maybe partition one off for benchmarking with cgroups and cpuset?

[11:21] <MasterDuke> committable: 110704d2ea8b31435a68b3f01de9b2a9875dcc7b say $*PERL.compiler.version

[11:21] <committable> v2016.06.182.g.110704.d

[11:21] <MasterDuke> committable: f583f22e3a60ef2d1ca035db17d7c966d53ea6db say $*PERL.compiler.version

[11:21] <committable> v2016.06.183.gf.583.f.22

[11:22] <timotimo> neat

[11:22] <MasterDuke> committable: f583f22 say $*PERL.compiler.version

[11:22] <committable> v2016.06.183.gf.583.f.22

[11:23] <MasterDuke> i only have two versions built, but if we get AlexDaniel to run it...

[11:23] <lizmat> MasterDuke: perhaps also mention the person who requested it ?

[11:24] <MasterDuke> lizmat: that would be me

[11:24] <lizmat> no, I mean in the answer of commitable

[11:24] <lizmat> committable: f583f22 say $*PERL.compiler.version

[11:24] <committable> v2016.06.183.gf.583.f.22

[11:24] <lizmat> ^^^ something like: "lizmat: v2016.06.183.gf.583.f.22"

[11:25] <MasterDuke> ahh, right, i'll see about that

[11:25] <lizmat> MasterDuke++

[11:27] <psch> nine: how do i allow a :path opt for use ...:from<Java>?

[11:28] <psch> nine: it looks to me like i'd generally need to adjust DependencySpecification to pass that through, but that seems kinda bad..?

[11:29] <dalek> rakudo/nom: 959cd3b | lizmat++ | src/core/List.pm:

[11:29] <dalek> rakudo/nom: Make List.BIND-POS fail instead of throw

[11:29] <dalek> rakudo/nom:

[11:29] <dalek> rakudo/nom: So we get a better runtime error.  Also, make sure we only accept

[11:29] <dalek> rakudo/nom: Int:D for the index.

[11:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/959cd3bae6

[11:30] <MasterDuke> committable: f583f22 say $*PERL.compiler.version

[11:30] <committable> MasterDuke: v2016.06.183.gf.583.f.22

[11:31] <lizmat> MasterDuke++

[11:31] <psch> nine: i mean, i don't think having to install .jar files into a CURI is the right solution, so we have to be able to reach them some other way..

[12:11] <AlexDaniel> committable: 280a487 say âhelloâ

[12:11] <AlexDaniel> :O

[12:11] <AlexDaniel> committable: 280a487 say âhelloâ

[12:11] <committable> AlexDaniel: hello

[12:14] <AlexDaniel> committable: 2015.10 say âhelloâ

[12:14] <committable> AlexDaniel: hello

[12:14] <AlexDaniel> MasterDuke: I have relaxed it a little bit

[12:15] <AlexDaniel> MasterDuke: I'm in a car right now, so gonna commit it a bit later :)

[12:15] <MasterDuke> AlexDaniel: nice

[12:15] <psch> AlexDaniel: shouldn't it also say which commit it's evaluating on?

[12:15] <psch> like, people eval'ing at nearly the same time does happen

[12:15] <AlexDaniel> psch: sure, but that's the very first version

[12:15] <psch> right, just checking it's on the radar, no pressure :)

[12:15] <AlexDaniel> psch: it gets back to you by using your nick, so that's not a big problem

[12:16] <psch> oh, right, didn't see that

[12:16] <AlexDaniel> committable: 2015.10 say âhelloâ; say âoopsâ

[12:16] <committable> AlexDaniel: hello

[12:16] <committable> ..oops

[12:16] <AlexDaniel> also this â â¦ :)

[12:16] <AlexDaniel> but we will fix that, of course

[12:17] <nine> psch: write your own CompUnit::Repository implementation like CompUnit::Repository::Perl5

[12:17] <nine> src/core/CompUnit/Repository/Perl5

[12:17] <psch> nine: i already have that, it's about what statement_mod:<use> parses and what $*W does with the parse result

[12:18] <psch> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/World.nqp#L1181 to be precise

[12:18] <nine> psch: use lib 'jar#/foo/bar/jar'; use Foo:from<Java>;

[12:18] <psch> that seems really terrible

[12:18] <AlexDaniel> committable: 2015.10 say âhelloâ; say âoopsâ

[12:18] <committable> AlexDaniel: hello

[12:18] <committable> ..oops

[12:18] <nine> psch: we do the same with Perl 5: use lib:from<Perl5> qw(/foo/bar); use Foo:from<Perl5>;

[12:19] <psch> alright, i'll just go with that then

[12:19] <AlexDaniel> committable: 2015.10 say âhelloâ; say âoopsâ

[12:19] <committable> AlexDaniel: helloâ¤oops

[12:19] <AlexDaniel> ok

[12:19] <AlexDaniel> committable: 2015.10 exit 5

[12:19] <committable> AlexDaniel: AlexDaniel: ï½¢exit=5ï½£

[12:20] <AlexDaniel> committable: 2015.10 say âhelloâ; exit 5

[12:20] <committable> AlexDaniel: AlexDaniel: ï½¢exit=5ï½£ hello

[12:20] <nine> psch: it's the same in pure Java, isn't it? You add the jars to the JAVAPATH or whatever it's called and then just load classes

[12:21] <AlexDaniel> very rough but still usable ;)

[12:21] <psch> nine: well, sorta.  you can add paths to the env var or to the java invocation *or* create new classloaders with specific paths during runtime

[12:22] <psch> nine: it's just that architecturally it'd be a lot more obvious to me to create a class loader per jar we want, which is easier if i know per jar where i have to look

[12:22] <psch> but as an obvious solution it might also be somewhat suboptimal :)

[12:23] <psch> so, if i do the <use lib 'path/to.jar'> i get a FileSystem nested inside my RepoRegistry..?

[12:24] <psch> err, not Registry, Repo::Java

[12:44] <tbrowder> [Coke]: Ref using a "writable clone of roast  into t/spec inside the rakudo build dir", can I just move my existing roast repo there and use it to make changes for PRs as usual, i.e., will it continue to function as my local repo without having to have another copy?

[12:45] <timotimo> yeah, git repos should be re-locatable without issue

[12:45] <psch> you could also just set upstream for the repo in t/spec to your fork

[12:45] <psch> potentially only for pushing, too, to make making PRs easier

[12:48] <timotimo> or just git fetch from your local "other checkout" into t/spec and git reset --hard to your HEAD commit from that repo

[12:48] <timotimo> the possibilities are pretty much endless

[12:51] <tbrowder> timtimo: psch: thanks!  I'll probably have more questions later...

[12:57] <MasterDuke> committable: 2015.10 say âhelloâ

[12:57] <committable> MasterDuke: hello

[14:02] <dalek> roast: 18fafbd | (Zoffix Znet)++ | S06-signature/ (2 files):

[14:02] <dalek> roast: Merge two sets of tests for RT#128392 together

[14:02] <dalek> roast: review: https://github.com/perl6/roast/commit/18fafbddef

[14:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128392

[14:02] <dalek> roast: 67b9eb5 | (Zoffix Znet)++ | S06-signature/types.t:

[14:02] <dalek> roast: Fix typo

[14:02] <dalek> roast: review: https://github.com/perl6/roast/commit/67b9eb5d05

[14:47] <Zoffix> Another niggle with RT: copy-pasting copies stuff all on one line. Like trying to copy-paste this code example: https://rt.perl.org/Ticket/Display.html?id=128184#ticket-history

[15:31] <MasterDuke> benchable: f583f22,110704d my $a = "a" x 2**16;for ^10000 {my $b = $a.chop($_)}

[15:35] <dalek> roast: 191c957 | (Zoffix Znet)++ | S02-magicals/ (2 files):

[15:35] <dalek> roast: .WHAT on $*GROUP and $*USER after using their values first must live

[15:35] <dalek> roast:

[15:35] <dalek> roast: RT#128099

[15:35] <dalek> roast: review: https://github.com/perl6/roast/commit/191c957564

[15:35] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128099

[16:32] <sortiz> m: ~Str

[16:32] <camelia> rakudo-moar 959cd3: OUTPUTÂ«WARNINGS for <tmp>:â¤Useless use of "~" in expression "~Str" in sink context (line 1)â¤Use of uninitialized value of type Str in string contextâ¤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at <tmp> liâ¦Â»

[16:33] <sortiz> m: say ~Str

[16:33] <camelia> rakudo-moar 959cd3: OUTPUTÂ«Use of uninitialized value of type Str in string contextâ¤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at <tmp> line 1â¤â¤Â»

[16:33] <psch> m: Str.say

[16:33] <camelia> rakudo-moar 959cd3: OUTPUTÂ«(Str)â¤Â»

[16:34] <sortiz> m: say ~Str; say "I'm alive, that was only a warning, not an exception";

[16:34] <camelia> rakudo-moar 959cd3: OUTPUTÂ«Use of uninitialized value of type Str in string contextâ¤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at <tmp> line 1â¤â¤I'm alive, that was only a warning, not an exceptionâ¤Â»

[16:35] <sortiz> Any way for handling those warnings?

[16:35] <timotimo> yeah

[16:35] <timotimo> m: quietly say ~Str

[16:35] <camelia> rakudo-moar 959cd3: OUTPUTÂ«â¤Â»

[16:36] <timotimo> other than that, you can have a CONTROL block and do nothing (but resume) when it's a CX::Warn or what it's called

[16:37] <timotimo> m: CONTROL { .perl.say }; ~Str

[16:37] <camelia> rakudo-moar 959cd3: OUTPUTÂ«WARNINGS for <tmp>:â¤Useless use of "~" in expression "~Str" in sink context (line 1)â¤CX::Warn.new(message => "Use of uninitialized value of type Str in string context\nAny of .^name, .perl, .gist, or .say can stringify undefined things, if needed.")â¤â¦Â»

[16:37] <sortiz> Ok, thanks timotimo

[16:37] <timotimo> yeah, CX::Warn

[16:37] <timotimo> the other thing is a compiler warning

[16:37] <timotimo> m: no warnings; CONTROL { .perl.say }; ~Str

[16:37] <camelia> rakudo-moar 959cd3: OUTPUTÂ«===SORRY!===â¤Don't know how to 'no warnings' just yetâ¤Â»

[16:37] <timotimo> hmm

[16:37] <psch> m: CONTROL { CX::Warn { } }; ~STr

[16:37] <camelia> rakudo-moar 959cd3: OUTPUTÂ«===SORRY!=== Error while compiling <tmp>â¤Unexpected block in infix position (missing statement control word before the expression?)â¤at <tmp>:1â¤------> CONTROL { CX::Warnâ { } }; ~STrâ¤    expecting any of:â¤        infixâ¤        inâ¦Â»

[16:37] <psch> m: CONTROL { CX::Warn { } }; ~Str

[16:37] <camelia> rakudo-moar 959cd3: OUTPUTÂ«===SORRY!=== Error while compiling <tmp>â¤Unexpected block in infix position (missing statement control word before the expression?)â¤at <tmp>:1â¤------> CONTROL { CX::Warnâ { } }; ~Strâ¤    expecting any of:â¤        infixâ¤        inâ¦Â»

[16:37] <psch> m: CONTROL { when CX::Warn { } }; ~Str

[16:37] <camelia> rakudo-moar 959cd3: OUTPUTÂ«WARNINGS for <tmp>:â¤Useless use of "~" in expression "~Str" in sink context (line 1)â¤Â»

[16:37] <psch> m: CONTROL { when CX::Warn { } }; say ~Str

[16:37] <camelia> rakudo-moar 959cd3: ( no output )

[16:38] <timotimo> m: CONTROL { when CX::Warn { } }; say ~Str; say "alive"

[16:38] <camelia> rakudo-moar 959cd3: ( no output )

[16:38] <timotimo> m: CONTROL { when CX::Warn { .resume } }; say ~Str; say "alive"

[16:38] <camelia> rakudo-moar 959cd3: OUTPUTÂ«â¤aliveâ¤Â»

[16:38] <timotimo> ^- important difference

[16:38] <psch> oh, right

[16:38] <sortiz> oh!! Yep

[16:39] <timotimo> BBIAB

[16:52] <MasterDuke> benchable: f583f22,110704d my $a = "a" x 2**16;for ^10000 {my $b = $a.chop($_)}

[16:53] <benchable> MasterDuke: 110704d=2.281 f583f22=2.304

[17:00] <Zoffix> :o

[17:03] <MasterDuke> i think it's kind of neat

[17:08] <Zoffix> And useful

[17:12] <MasterDuke> i hope so, that's the idea

[17:15] <Zoffix> bisect: run($*EXECUTABLE, "--rxtrace", "-e", q/say "hello world"/, :out).out.slurp-rest.say

[17:15] <bisectable> Zoffix: exit code is 0 on both starting points, bisecting by using the output

[17:15] <bisectable> Zoffix: (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb5

[17:16] <AlexDaniel> Zoffix: this typically means that the output is different each time

[17:18] <AlexDaniel> committable: HEAD run($*EXECUTABLE, "--rxtrace", "-e", q/say "hello world"/, :out).out.slurp-rest.say

[17:18] <committable> AlexDaniel: Calling parseâ¤  Calling TOPâ¤    Calling targetâ¤    Calling comp_unitâ¤hello worldâ¤

[17:18] <AlexDaniel> committable: 2015.12 run($*EXECUTABLE, "--rxtrace", "-e", q/say "hello world"/, :out).out.slurp-rest.say

[17:18] <committable> AlexDaniel: Cannot invoke this objectâ¤   at gen/moar/m-CORE.setting:2452  (/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/perl6/runtime/CORE.setting.moarvm:push-exactly:53)â¤ from gen/moar/m-CORE.setting:3637

[17:18] <committable> ..(/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/perl6/runtime/CORE.setting.moarvm:pull-one:209)â¤ from gen/moar/m-CORE.setting:2518

[17:18] <committable> ..(/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/perl6/runtime/CORE.setting.moarvm:sink-all:20)â¤ from gen/moar/m-CORE.setting:12094

[17:18] <committable> ..(/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/perl6/runtime/CORE.setting.moarvm:sink:36)â¤ from gen/moar/m-CORE.setting:35183

[17:18] <committable> ..(/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/perl6/runtime/CORE.setting.moarvm:resolve_repossession_conflicts:65)â¤ from <unknown>:1

[17:18] <AlexDaniel> oh geez

[17:18] <committable> ..(/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/perl6/runtime/CORE.setting.moarvm:<dependencies+deserialize>:53)â¤ from gen/moar/m-ModuleLoader.nqp:223

[17:18] <AlexDaniel> oh no

[17:18] <committable> ..(/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/Perl6/ModuleLoader.moarvm::44)â¤ from gen/moar/m-ModuleLoader.nqp:213

[17:18] <psch> heh

[17:19] <committable> ..(/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/Perl6/ModuleLoader.moarvm:load_setting:33)â¤ from src/Perl6/World.nqp:512

[17:19] <committable> ..(/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/Perl6/World.moarvm:load_setting:55)â¤ from src/Perl6/World.nqp:284

[17:19] <committable> ..(/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/Perl6/World.moarvm:loading_and_symbol_setup:181)â¤ from src/Perl6/Grammar.nqp:1138

[17:19] <pmichaud> what's the general difference between #perl6 and #perl6-dev ?

[17:19] <committable> ..(/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/Perl6/Grammar.moarvm:comp_unit:901)â¤ from gen/moar/stage2/nqpmo.nqp:1309  (/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/nqpmo.moarvm::40)â¤ from

[17:19] <committable> ..src/Perl6/Grammar.nqp:441  (/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/Perl6/Grammar.moarvm:TOP:524)â¤ from gen/moar/stage2/nqpmo.nqp:1309

[17:19] <MasterDuke> whoops

[17:19] <committable> ..(/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/nqpmo.moarvm::40)â¤ from gen/moar/stage2/QRegex.nqp:2093  (/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/QRegex.moarvm:parse:44)â¤ from

[17:19] <committable> ..gen/moar/stage2/nqpmo.nqp:1309  (/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/nqpmo.moarvm::40)â¤ from gen/moar/stage2/NQPHLL.nqp:1593

[17:19] <AlexDaniel> told ya that you have to be careful with this now for nowâ¦

[17:19] <committable> ..(/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/NQPHLL.moarvm:parse:80)â¤ from gen/moar/stage2/NQPHLL.nqp:1549  (/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/NQPHLL.moarvm:compile:200)â¤ from

[17:19] <committable> ..gen/moar/stage2/NQPHLL.nqp:1286  (/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/NQPHLL.moarvm:eval:62)â¤ from gen/moar/stage2/NQPHLL.nqp:1393

[17:19] <committable> ..(/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/NQPHLL.moarvm::35)â¤ from gen/moar/stage2/NQPHLL.nqp:1390  (/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/NQPHLL.moarvm:command_eval:155)â¤ from

[17:19] <committable> ..src/Perl6/Compiler.nqp:69  (/home/bisectable/git/bisectable/builds/ec386e5ff54a6e8028e74092d1a41cfccdc531d2/share/nqp/lib/Perl6/Compiler.moarvm:command_eval:93)â¤ from gen/moar/stage2/NQPHLL.nqp:1374

[17:19] <AlexDaniel> die

[17:20] <psch> pmichaud: what dalek reports is one notable difference

[17:20] <MasterDuke> on a related note...

[17:20] <MasterDuke> AlexDaniel: https://github.com/perl6/bisectbot/pull/3

[17:20] <Zoffix> pmichaud, most notable is the rakudo/nqp/roast repo commits are announced here and not in #perl6

[17:20] <psch> pmichaud: #perl6 gets roast and ecosystem, this here gets nqp/rakudo

[17:20] <pmichaud> what about language issues?

[17:20] <Zoffix> #perl6 doesn't get roast

[17:21] <psch> pmichaud: #perl6 seems more design and #perl6-dev more impl, from what i see

[17:21] <psch> Zoffix: right, i recall roast commits from today now... not thinking quite clearly :)

[17:21] <pmichaud> psch:  okay, that answers my question.  Thanks

[17:21] <MasterDuke> #perl6 gets doc

[17:21] <Zoffix> :)

[17:21] <AlexDaniel> please don't mind committable, he is one day old :)

[17:21] <AlexDaniel> or she

[17:21] <psch> MasterDuke: right, that was what i was thinking of!

[17:21] <pmichaud> perhaps should be committed.  ALthough in this case perhaps should be uncommitted.

[17:25] <AlexDaniel> MasterDuke: why not run it on every single commit since 2015.10?

[17:25] <AlexDaniel> and draw a graph or something

[17:26] <AlexDaniel> so let's say every run takes 0.3, we run it 5 times on every commit

[17:26] <AlexDaniel> there are about 2000 commits from 2015.10 till now

[17:26] <AlexDaniel> committable: HEAD say 2000*5*0.3/60

[17:26] <committable> AlexDaniel: 50

[17:26] <pmichaud> afk again... bbl

[17:26] <AlexDaniel> 50 minutes, meh! A bit too long

[17:27] <MasterDuke> AlexDaniel: yeah, and if you try something that takes a couple seconds...

[17:27] <timotimo> it'd be more sensible to run "daily" commits

[17:27] <AlexDaniel> or just every fifth commit

[17:28] <timotimo> 10 minutes is still alot

[17:28] <AlexDaniel> but then you are not going to see when the slowdown or speedup is

[17:28] <MasterDuke> i guess it depends if the main purpose is to show a general trend, or specifically compare a few commits

[17:28] <AlexDaniel> timotimo: 10 minutes is not so much for a pretty graph :)

[17:29] <timotimo> hm m

[17:29] <AlexDaniel> but yeah, let's have two modes

[17:29] <AlexDaniel> every 20th commit for fast mode and every commit for slow mode

[17:31] <timotimo> you'd get precise results by using cachegrind ... but it'll also make your stuff take 10x as long :)

[17:32] <AlexDaniel> given that we're doing it for a lot of commits, I don't think that a little bit of noise will cause any trouble

[17:32] <AlexDaniel> or maybe it will, dunno, we will see

[17:36] <AlexDaniel> MasterDuke: ok, I'll work on it once I get back home

[17:36] <AlexDaniel> MasterDuke: thank you, that's very cool

[17:36] <MasterDuke> sure, it's fun

[17:36] <dalek> roast: 4652164 | (Zoffix Znet)++ | S19-command-line-options/06-dash-rxtrace.t:

[17:36] <dalek> roast: --rxtrace does not crash

[17:36] <dalek> roast:

[17:36] <dalek> roast: RT#128050

[17:36] <dalek> roast: review: https://github.com/perl6/roast/commit/4652164eb9

[17:36] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128050

[18:01] <sortiz> I'm about to submit a PR, but when spectesting got a "Bad plan" in "t/spec/S06-signature/types.t", and indeed seems like a bad plan! So no related with my PR, can someone check that?, I can only count ten tests.

[18:02] <timotimo> throws-like is 3 tests in one function

[18:02] <psch> the number of subtests for throws-like is variable, isn't it?

[18:03] <timotimo> right

[18:03] <sortiz> Yep, but the plan count is at the hi level, no?

[18:03] <psch> as in, every Attribute of the thrown Exception that is checked in the throws-like invocation is its own subtest

[18:03] <timotimo> you can put many tests after the code

[18:03] <timotimo> aye

[18:03] <timotimo> hm

[18:03] <timotimo> a subtest doesn't count into the plan with multiple tests, right?

[18:03] <psch> m: use Test; plan 1; throws-like "a" + 5, Exception

[18:03] <camelia> rakudo-moar 959cd3: OUTPUTÂ«1..1â¤Cannot convert string to number: base-10 number must begin with valid digits or '.' in 'âa' (indicated by â)â¤  in block <unit> at <tmp> line 1â¤â¤Actually thrown at:â¤  in block <unit> at <tmp> line 1â¤â¤# Looks like you planned 1 teâ¦Â»

[18:03] <psch> m: use Test; plan 1; throws-like '"a" + 5', Exception

[18:03] <camelia> rakudo-moar 959cd3: OUTPUTÂ«1..1â¤    1..2â¤    ok 1 - '"a" + 5' diedâ¤    ok 2 - right exception type (Exception)â¤ok 1 - did we throws-like Exception?â¤Â»

[18:04] <psch> that's two tests right there, from the looks of it

[18:04] <psch> we don't have a TAP parser in camelia though

[18:04] <dalek> roast: 57d37a4 | (Zoffix Znet)++ | S06-signature/types.t:

[18:04] <dalek> roast: Fix bad plan

[18:04] <dalek> roast: review: https://github.com/perl6/roast/commit/57d37a48fa

[18:04] <psch> but maybe that's a problem in our harness..?

[18:04] <timotimo> no, it's one test for the "outer" plan

[18:04] <psch> i don't really know TAP

[18:04] <timotimo> the first 1..1 is the amount of tests all in all

[18:04] <psch> ah, alright

[18:04] <timotimo> the 1..2 is the subtests only

[18:05] <psch> yeah, as i said, i don't really know TAP :S

[18:05] <Zoffix> sortiz, try now. I messed up the plan in https://github.com/perl6/roast/commit/18fafbddef

[18:05] <timotimo> :)

[18:05] <sortiz> Ah! Zoffix...

[18:05] <timotimo> i only know little bits of tap

[18:05] <timotimo> .o( tap dancing )

[18:05] <Zoffix> subtest counts as 1 test and you can use `plan` inside a subtest to specify the number of tests the subtest should run

[18:07] <Zoffix> and yeah, throws-like uses subtest to run two tests, but it counts as 1 test

[18:08] <timotimo> either way, that coutns as a good catch by sortiz

[18:10] * Zoffix changes the workflow to avoid such fuckups :)

[18:11] <psch> i did have a git precommit hook somewhere that runs the to-be-commited test file with make...

[18:13] <Zoffix> I do that by hand, but I guess I just missed that file (just woke up at that time). I'm gonna put a spectest run in a loop

[19:58] <dalek> roast: ec748a9 | (Zoffix Znet)++ | S32-str/substr.t:

[19:58] <dalek> roast: Failure in .substr does not get incorrectly handled

[19:58] <dalek> roast:

[19:58] <dalek> roast: RT#128038

[19:58] <dalek> roast: review: https://github.com/perl6/roast/commit/ec748a9d83

[19:58] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128038

[20:18] <tbrowder> ref rakudo PR 817: please see PR 821 which fixes PR 817: https://github.com/rakudo/rakudo/pull/821

[20:19] <tbrowder> the spectest log is at gist https://gist.github.com/tbrowder/7ec37e3747978b0a7c05c1718fa85297

[20:20] <Zoffix> Those failures are OK. They will build fine with bleed rakudo/roast

[20:28] <tbrowder> Zoffix: lizmat: note that PR 821 needs PR817 because I used PR 817 as its base.

[20:29] <tbrowder> i.e., it's the same branch

[20:29] * Zoffix doesn't have a commit bit Â¯_(ã)_/Â¯

[20:30] <tbrowder> I'm gonna have a beer and think about the next step in this series.

[20:31] <tbrowder> Well, maybe I'll wait 1.49 hrs.

[20:44] <Zoffix> .ask sortiz can this ticket be closed? https://rt.perl.org/Ticket/Display.html?id=128000

[20:44] <yoleaux2> Zoffix: I'll pass your message to sortiz.

[20:50] <Zoffix> m: for (^100).race(batch=>1) { {1 + $^a}.assuming(10)() }

[20:50] <camelia> rakudo-moar 959cd3: OUTPUTÂ«(signal ABRT)Cannot resolve caller postfix:<++>(Int); none of these signatures match:â¤    (Mu:D $a is rw)â¤    (Mu:U $a is rw)â¤    (Int:D $a is rw)â¤    (int $a is rw)â¤    (Bool:U $a is rw)â¤    (Bool:D $a is rw)â¤    (Num:D $a is rw)â¤    (Num:â¦Â»

[20:50] <Zoffix> m: for (^100).race(batch=>1) { {1 + $^a}.assuming(10)() }

[20:50] <camelia> rakudo-moar 959cd3: OUTPUTÂ«Parameter '$a' requires a type object of type Int, but an object instance was passed.  Did you forget a 'multi'?â¤â¤Parameter '$a' requires a type object of type Int, but an object instance was passed.  Did you forget a 'multi'?â¤â¤Parameter '$a' requiâ¦Â»

[20:50] <Zoffix> .oO( Â«Parameter '$a' requires a type object of type Int ... ?)

[20:57] <lizmat> tbrowder: so I need to revert the revert, and then apply 821 ?

[20:58] <tbrowder> lizmat: I think so, at least that's the way it looks to me.

[20:58] <psch> m: {1 + $^a}.assuming(10)

[20:58] <camelia> rakudo-moar 959cd3: ( no output )

[20:59] <psch> oh, .race/batch problem

[20:59] <psch> that's almost EXPR level scary :P

[20:59] <psch> actually, probably more scary

[21:00] <dalek> rakudo/nom: 103e301 | lizmat++ | src/Perl6/Pod.nqp:

[21:00] <dalek> rakudo/nom: Revert "Revert "preparing for upcoming changes:""

[21:00] <dalek> rakudo/nom:

[21:00] <dalek> rakudo/nom: This reverts commit 110704d2ea8b31435a68b3f01de9b2a9875dcc7b.

[21:00] <dalek> rakudo/nom:

[21:00] <dalek> rakudo/nom: We've got a plan!

[21:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/103e301450

[21:00] <dalek> rakudo/nom: c531b8b | lizmat++ | src/core/List.pm:

[21:00] <dalek> rakudo/nom: We don't need no getattr in List itself

[21:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c531b8bdb3

[21:00] <dalek> rakudo/nom: c374989 | (Tom Browder)++ | src/Perl6/Grammar.nqp:

[21:00] <dalek> rakudo/nom: rename sub 'formatted_text' to 'normalize_text'

[21:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c374989d4a

[21:00] <dalek> rakudo/nom: 9bb6366 | lizmat++ | src/Perl6/Grammar.nqp:

[21:00] <dalek> rakudo/nom: Merge pull request #821 from tbrowder/pod-handling-cleanup

[21:00] <dalek> rakudo/nom:

[21:00] <dalek> rakudo/nom: rename sub 'formatted_text' to 'normalize_text'

[21:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9bb6366142

[21:01] <Zoffix> Revertception

[21:08] <lizmat> tbrowder++   # it all spectests clean for me, except the unrelated issue with t/spec/S19-command-line/repl.t

[21:09] <tbrowder> lizmat: thanks!

[21:09] <Zoffix> lizmat, would you gist the failures?

[21:10] <Zoffix> I'm thinking it's OSX-specific stuff :/

[21:11] <lizmat> https://gist.github.com/lizmat/8cb8c29be77d5a1b2955b81ec6a6abac  # Zoffix

[21:11] <Zoffix> Thanks

[21:20] <dalek> roast: 5e25756 | (Zoffix Znet)++ | S19-command-line/repl.t:

[21:20] <dalek> roast: Fudge RT#70297 test

[21:20] <dalek> roast:

[21:20] <dalek> roast: Tested REPL output is different on OSX

[21:20] <dalek> roast: review: https://github.com/perl6/roast/commit/5e25756c3f

[21:20] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=70297

[21:21] <dalek> rakudo/nom: a885088 | lizmat++ | src/core/List.pm:

[21:21] <dalek> rakudo/nom: Simplify List.reification-target

[21:21] <dalek> rakudo/nom:

[21:21] <dalek> rakudo/nom: And another ensure-allocated bites the dust

[21:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a88508822a

[21:23] <lizmat> Zoffix: couldn't we relax the test a bit ?  like just testing for the words?

[21:23] <lizmat> Zoffix: also, why skip 2 ?

[21:23] <lizmat> only test 5 failed ?

[21:24] <Zoffix> lizmat, there are 2 tests in that subtest and the fudger puts the skip() inside the subset instead of before the subset

[21:24] <timotimo> oh, interesting

[21:24] <lizmat> huh?

[21:24] <lizmat> that shouldn't happen ?

[21:25] <Zoffix> Â¯\_(ã)_/Â¯

[21:27] <Zoffix> As for relaxing... Â¯\_(ã)_/Â¯... the ticket is about testing the output after exiting. It appears on Linux it prints "> " but on OSX nothing. I just reopened the ticket. To me, it didn't look fixed from the start, but [Coke] suggested I ask masak and masak said the current behaviour is fine.

[21:28] <Zoffix> IMO, the current behaviour is missing a newline at the end: https://gist.github.com/zoffixznet/a1ef3fe0ab0d5fcca7d64acf7a9d0707

[21:36] <Zoffix> A wild guess is adding `subtest` to this list will fudge the subtest instead of stuff inside of it: https://github.com/perl6/roast/blob/master/fudge#L126

[21:38] <dalek> roast: 820e4f7 | (Zoffix Znet)++ | fudge:

[21:38] <dalek> roast: Add Test::Util's run_is_repl to list of fudgeable stuff

[21:38] <dalek> roast: review: https://github.com/perl6/roast/commit/820e4f7eec

[21:40] <dalek> rakudo/nom: 405519a | lizmat++ | src/core/List.pm:

[21:40] <dalek> rakudo/nom: Kill the last use of List.ensure-allocated

[21:40] <dalek> rakudo/nom:

[21:40] <dalek> rakudo/nom: And the method itself with it.  This means that now all List methods

[21:40] <dalek> rakudo/nom: know how to handle the case when no $!reified attribute has been

[21:40] <dalek> rakudo/nom: initialized, without allocating one just to be on the safe side

[21:40] <dalek> rakudo/nom: (which is what ensure-allocated did).

[21:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/405519ac19

[21:48] <Zoffix> Ah, I see why [possibly] subtest is not fudgeable material.  If you do 2 skip fudge before the subtest, the fudger fudges the subtest... and then 1 test inside of it. Making it fudgeable would involve figuring out how to ignore stuff inside of the subtest.

[21:48] <Zoffix> So it's iffy either way. Either it's not fudgeable or you can't use numbers or you have to write logic to parse out stuff inside the subtest

[21:51] <timotimo> oof

[21:51] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'We don't need no getattr in List itself'

[21:51] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/143614775 https://github.com/rakudo/rakudo/compare/959cd3bae692...c531b8bdb360

[21:52] <lizmat> good night, #perl6-dev

[21:52] <Zoffix> night

[21:53] <timotimo> gnite liz

[22:12] <Zoffix> All this talk about fudge makes me want to have some cake.

[22:12] <Zoffix> Coincidentally, I actually do have a piece of chocolate fudge cake.

[22:12] <Zoffix> I blame Perl 6 for making me fat.

[22:14] <timotimo> today i had a little cupcake like thing that was filled with liquid chocolate on the inside

[22:14] <timotimo> it was baked before i ate it

[22:14] <timotimo> it was pretty fantastic

[22:19] <ilmari> chocolate fondant?

[22:20] <timotimo> hm?

[22:20] <ilmari> https://duckduckgo.com/?q=chocolate+fondant&ia=images

[22:21] <timotimo> ah

[22:21] <timotimo> some of those pictures look similar

[22:22] <ilmari> it's yummeh

[22:22] <timotimo> yeah

[22:22] <timotimo> didn't have one of those before

[22:22] * ilmari hasn't had one in a while. not really a summer dessert

[22:26] <timotimo> that's true

[22:55] <sortiz> .tell Zoffix About RT#128000 I'd keep it open 'til solved in core. If only as a way to get some feedback

[22:55] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128000

[22:55] <yoleaux2> sortiz: I'll pass your message to Zoffix.

[22:55] <yoleaux2> 20:44Z <Zoffix> sortiz: can this ticket be closed? https://rt.perl.org/Ticket/Display.html?id=128000

[22:55] <Zoffix> ack

[22:55] <yoleaux2> 22:55Z <sortiz> Zoffix: About RT#128000 I'd keep it open 'til solved in core. If only as a way to get some feedback

[22:55] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128000

[23:03] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Simplify List.reification-target

[23:03] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/143617056 https://github.com/rakudo/rakudo/compare/9bb63661423e...a88508822a31

[23:38] <gfldex> m: my $a = Int; say so $a // $a === $.WHAT;

[23:38] <camelia> rakudo-moar 405519: OUTPUTÂ«===SORRY!=== Error while compiling <tmp>â¤Variable $.WHAT used where no 'self' is availableâ¤at <tmp>:1â¤------> my $a = Int; say so $a // $a === $.WHATâ;â¤    expecting any of:â¤        termâ¤Â»

[23:39] <gfldex> m: my $a = Int; say so $a // $a === $a.WHAT;

[23:39] <camelia> rakudo-moar 405519: OUTPUTÂ«Trueâ¤Â»

[23:40] <gfldex> m: my class C { method WHAT(){ return Int } }; say C.new.WHAT

[23:40] <camelia> rakudo-moar 405519: OUTPUTÂ«(C)â¤Â»

[23:41] <gfldex> m: my class C { method definedWHAT(){ return Int } }; say C.new.WHAT

[23:41] <camelia> rakudo-moar 405519: OUTPUTÂ«(C)â¤Â»

[23:41] <gfldex> m: my class C { method defined(){ return Int } }; say C.neu.defined;

[23:41] <camelia> rakudo-moar 405519: OUTPUTÂ«Method 'neu' not found for invocant of class 'C'â¤  in block <unit> at <tmp> line 1â¤â¤Â»

[23:41] <gfldex> m: my class C { method defined(){ return Int } }; say C.new.defined;

[23:41] <camelia> rakudo-moar 405519: OUTPUTÂ«(Int)â¤Â»

[23:41] <gfldex> m: my class C { method defined(){ return False } }; say C.new.defined;

[23:41] <camelia> rakudo-moar 405519: OUTPUTÂ«Falseâ¤Â»

[23:41] <gfldex> m: my class C { method defined(){ return False } }; say C.new // 'undefined';

[23:41] <camelia> rakudo-moar 405519: OUTPUTÂ«undefinedâ¤Â»

[23:42] <gfldex> m: my $a = Int; say so $a // $a === $a.WHAT;

[23:42] <camelia> rakudo-moar 405519: OUTPUTÂ«Trueâ¤Â»

[23:42] <gfldex> m: my $a = Int; say so 42 // $a === $a.WHAT;

[23:42] <camelia> rakudo-moar 405519: OUTPUTÂ«Trueâ¤Â»
