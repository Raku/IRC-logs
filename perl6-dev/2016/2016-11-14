[02:47] <MasterDuke> is anyone getting "Failed to read dirhandle" errors? i assume this is because of the recent MoarVM commits

[02:58] <MasterDuke> any reason JAST::Annotation doesn't have a filename attribute?

[05:00] <MasterDuke> woohoo. looks like my line directive branch now passes spectest on moar. now to see about jvm...

[08:56] <[TuxCM]> This is Rakudo version 2016.10-271-g59bb1b1 built on MoarVM version 2016.10-44-g4c9fd00

[08:56] <[TuxCM]> csv-ip5xs        3.147

[08:56] <[TuxCM]> test            13.962

[08:56] <[TuxCM]> test-t           6.394

[08:56] <[TuxCM]> csv-parser      14.897

[09:58] <jnthn> lizmat: I'm a bit surprised that doesn't fail, tbh

[10:57] <lizmat> jnthn: ok, I'll fix it then  :-)

[11:03] <viki> Reminder: Rakudo's next release will occur this Saturday.

[11:35] <stmuk> does anyone know of a "compile farm" (ideally free) of different UNIX-like systems .. I think they existed in the past

[11:35] <moritz> stmuk: besides travis?

[11:37] <stmuk> ". Travis CI can test on Linux and OS X."

[11:37] <stmuk> ideally I'd want at least windows and FreeBSD

[11:42] <stmuk> seem to be various services (tea ci, opensuse etc) but not a unified one

[11:48] <stmuk> https://gcc.gnu.org/wiki/CompileFarm

[12:54] <dalek> rakudo/nom: 15ab52c | lizmat++ | src/core/Rakudo/Internals.pm:

[12:54] <dalek> rakudo/nom: Introduce R:I:ShapeBranchIterator

[12:54] <dalek> rakudo/nom:

[12:54] <dalek> rakudo/nom: An iterator for processing branches of a shaped array.

[12:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/15ab52c211

[13:08] <viki> stmuk: are you able to check if this has been resolved in HEAD? https://rt.perl.org/Ticket/Display.html?id=130031

[13:12] <viki> heh

[13:12] <viki> m: say UNBASE 16, "FF"

[13:12] <camelia> rakudo-moar 15ab52: OUTPUT«255␤»

[13:12] <viki> m: say UNBASE 16, <FF DD EE>

[13:12] <camelia> rakudo-moar 15ab52: OUTPUT«This call only converts base-16 strings to numbers; value $("FF", "DD", "EE") is of type List, so cannot be converted!␤(If you really wanted to convert $("FF", "DD", "EE") to a base-16 string, use $("FF", "DD", "EE").base(16) instead.)␤  in block <unit…»

[13:12] <viki> m: say UNBASE_BRACKET 16, <FF DD EE>

[13:12] <camelia> rakudo-moar 15ab52: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏FF' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[13:12] <viki> m: say UNBASE_BRACKET 16, [<FF DD EE>]

[13:12] <camelia> rakudo-moar 15ab52: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏FF' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[13:13] <viki> waat

[13:13] <viki> m: say $("FF", "DD", "EE").base(16)

[13:13] <camelia> rakudo-moar 15ab52: OUTPUT«No such method 'base' for invocant of type 'List'␤  in block <unit> at <tmp> line 1␤␤»

[13:13] <moritz> m: say UNBASE 16, <FF DD EE>.join

[13:13] <camelia> rakudo-moar 15ab52: OUTPUT«16768494␤»

[13:13] <viki> Not what I had in mind

[13:13] <viki> https://github.com/rakudo/rakudo/blob/59bb1b1/src/core/Str.pm#L2723

[13:14] <timotimo> unbase_bracket takes actual numbers and composes them as digits into a bigger number

[13:14] <viki> Ah

[13:14] <timotimo> m: say UNBASE_BRACKET 100, <20,30,40>;

[13:14] <camelia> rakudo-moar 15ab52: OUTPUT«Type check failed in binding to @a; expected Positional but got Str ("20,30,40")␤  in block <unit> at <tmp> line 1␤␤»

[13:14] <timotimo> m: say UNBASE_BRACKET 100, <20 30 40>;

[13:14] <camelia> rakudo-moar 15ab52: OUTPUT«203040␤»

[13:14] <timotimo> m: say UNBASE_BRACKET 100, <20 30 40 1 2 3>;

[13:14] <camelia> rakudo-moar 15ab52: OUTPUT«203040010203␤»

[13:14] <lizmat> afk&

[13:30] <viki> Was anything done with gcd either in roast or rakudo recently? I'm getting a spectest fail, but from what I can see the spectest is wrong :\

[13:30] <viki> m: my int $i0 = 0; my int $i8 = 8; say $i0 gcd $i8

[13:30] <camelia> rakudo-moar 15ab52: OUTPUT«8␤»

[13:30] <viki> And it's expecting zero :\

[13:31] <viki> Oh, nm, I see a commit

[13:34] <dalek> roast: e273b55 | (Zoffix Znet)++ | S32-num/int.t:

[13:34] <dalek> roast: Fix broken test

[13:34] <dalek> roast:

[13:34] <dalek> roast: The test was added[^1] recently and it has an error in it.

[13:34] <dalek> roast:

[13:34] <dalek> roast: [1] https://github.com/perl6/roast/commit/8f856a7803744d52864645ab4208139e818f022d

[13:34] <dalek> roast: review: https://github.com/perl6/roast/commit/e273b5538e

[13:36] <timotimo> ah, a simple copy-paste mistake it seems like

[13:36] <viki> yeah

[13:37] <timotimo> good catch in any case :)

[13:39] <stmuk> viki: #130031 works now

[13:39] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130031

[13:39] <dalek> rakudo/nom: 1dc4c42 | (Zoffix Znet)++ | src/core/Exception.pm:

[13:39] <dalek> rakudo/nom: Improve message of X::Numeric::Confused

[13:39] <dalek> rakudo/nom:

[13:39] <dalek> rakudo/nom: Do not suggest the user calls .base() unless the wrong object that

[13:39] <dalek> rakudo/nom: triggered the error can actually do .base().

[13:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1dc4c4297e

[13:40] <viki> stmuk++ thanks

[13:41] <stmuk> not sure if I can close it

[13:41] <viki> I will.

[13:42] <viki> After I fish out the commit and tests that did it.

[13:42] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Introduce R:I:ShapeBranchIterator

[13:42] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/175694500 https://github.com/rakudo/rakudo/compare/59bb1b14713b...15ab52c21199

[13:46] <stmuk> viki: I think it was around 404ed261 on moar

[13:49] <viki> Yeah, it's https://github.com/MoarVM/MoarVM/commit/404ed261be00e2

[13:49] <viki> Don't see test for it though...

[13:49] <stmuk> well its a windows specific test

[13:50] <viki> Well, I see a test for mkdir in S32-io/mkdir_rmdir.t so *shrug*

[13:50] <viki> I guess I'll close without a specific test for this ticket.

[13:52] <viki> m: say &defined ~~ Callable

[13:52] <camelia> rakudo-moar 1dc4c4: OUTPUT«False␤»

[13:58] <dogbert17_> o/ viki, no new alias this week?

[13:58] <viki> No, I still like this one.

[13:59] <dogbert17_> :-), btw, can you close bugs in RT?

[14:00] <viki> I can, yeah.

[14:00] <dogbert17_> e.g. https://rt.perl.org/Public/Bug/Display.html?id=129246

[14:01] <viki> Done

[14:02] <dogbert17_> thx

[14:04] <dogbert17_> here's a classic: https://rt.perl.org/Public/Bug/Display.html?id=130096

[14:12] <viki> Deleted. Thanks.

[14:14] <stmuk> interesting meta ticket

[14:14] <stmuk> https://rt.perl.org/Ticket/Display.html?id=129926

[14:19] <dogbert17_> there are quite a few tickets in RT that could possibly be closed

[14:21] <viki> dogbert17_: ask [Coke] to give you access

[14:21] <viki> He'll need you RT accounts email

[14:25] * dogbert17_ hmm not sure that I have an RT account

[14:26] <dalek> rakudo/nom: 189cb23 | (Zoffix Znet)++ | src/core/Junction.pm:

[14:26] <dalek> rakudo/nom: Make defined() correctly autothread with Junctions

[14:26] <dalek> rakudo/nom:

[14:26] <dalek> rakudo/nom: Fixes RT#130099: https://rt.perl.org/Ticket/Display.html?id=130099

[14:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/189cb23e84

[14:26] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130099

[14:26] <dalek> roast: 6b84580 | (Zoffix Znet)++ | S03-junctions/autothreading.t:

[14:26] <dalek> roast: Test defined() with Junctions autothreads

[14:26] <dalek> roast:

[14:26] <dalek> roast: RT#130099: https://rt.perl.org/Ticket/Display.html?id=130099

[14:26] <dalek> roast: review: https://github.com/perl6/roast/commit/6b84580ecc

[14:26] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130099

[14:26] <viki> dogbert17_: get one

[14:26] <viki> It's kinda weird the above fix doesn't work if you augmented into Junction class:

[14:26] <viki> m: https://gist.github.com/zoffixznet/30068ed81798732f0118840ae06ac43f

[14:26] <camelia> rakudo-moar 1dc4c4: OUTPUT«1..1␤    1..2␤        1..10␤Cannot resolve caller defined(Str: ); none of these signatures match:␤    (Junction:D $: *%_)␤  in block  at <tmp> line 68␤  in sub subtest at /home/camelia/rakudo-m-inst-1/share/perl6/sources/C712FE6969F786C9380D643…»

[14:26] <viki> How come?

[14:28] <dalek> nqp: 1789b85 | (Pawel Murias)++ | src/vm/js/Compiler.nqp:

[14:28] <dalek> nqp: [js] Remove commented out debugging leftover.

[14:28] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1789b857cd

[14:28] <dalek> nqp: 9abc63c | (Pawel Murias)++ | src/vm/js/ (3 files):

[14:28] <dalek> nqp: [js] Implement nqp::throwpayloadlexcaller.

[14:28] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9abc63c35c

[14:29] <dalek> nqp: 56d7687 | (Pawel Murias)++ | src/vm/js/Operations.nqp:

[14:29] <dalek> nqp: [js] Remove dead code.

[14:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/56d7687ad8

[14:29] <viki> dogbert17_: I think you just sign up on https://www.bitcard.org/

[14:29] <viki> And that will work as an account on rt.perl.org

[14:31] <travis-ci> Rakudo build passed. Zoffix Znet 'Improve message of X::Numeric::Confused

[14:31] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/175705213 https://github.com/rakudo/rakudo/compare/15ab52c21199...1dc4c4297e3f

[14:32] <dogbert17_> viki: cool will do, last RT question :) what about https://rt.perl.org/Public/Bug/Display.html?id=129776 can that be closed?

[14:34] <viki> Yeah, I guess.

[14:42] <viki> m: dd [ :20("0xFF"), :2("0o42"), :3("0b111") ]

[14:42] <camelia> rakudo-moar 189cb2: OUTPUT«[255, 34, 7]␤»

[14:42] <viki> heh

[14:44] <viki> m: say :20(':20<36H>')

[14:44] <camelia> rakudo-moar 189cb2: OUTPUT«1337␤»

[14:45] <viki> radixeptiomn

[15:05] <dalek> roast: a10321b | (Zoffix Znet)++ | / (2 files):

[15:05] <dalek> roast: Move "contributing" doc to its own file

[15:05] <dalek> roast:

[15:05] <dalek> roast: So it's picked up by GitHub and is announced on Issue/PR submission

[15:05] <dalek> roast: review: https://github.com/perl6/roast/commit/a10321b10e

[16:37] <FROGGS> o/

[17:15] <dalek> rakudo/nom: 2faa55b | (Zoffix Znet)++ | src/core/Exception.pm:

[17:15] <dalek> rakudo/nom: Add X::Syntax::Number::InvalidCharacter exception

[17:15] <dalek> rakudo/nom:

[17:15] <dalek> rakudo/nom: The exception is to be used by .parse-base() routine to indicate a

[17:15] <dalek> rakudo/nom: string contains a character that is not a valid character in the base

[17:15] <dalek> rakudo/nom: the number is being converted to.

[17:15] <dalek> rakudo/nom:

[17:15] <dalek> rakudo/nom: e.g. of output: "Invalid base-30 character: Perl6⏏ Is Great"

[17:15] <dalek> rakudo/nom:

[17:15] <dalek> rakudo/nom: Awesomified with colour support.

[17:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2faa55bd30

[17:21] <dalek> rakudo/nom: 7e21a24 | (Zoffix Znet)++ | src/core/Str.pm:

[17:21] <dalek> rakudo/nom: Add parse-base() sub/method

[17:21] <dalek> rakudo/nom:

[17:21] <dalek> rakudo/nom: * Performs the reverse operation of Real.base: convert Str in a 2..36 base

[17:21] <dalek> rakudo/nom:   to base-10 Numeric

[17:21] <dalek> rakudo/nom: * Make it easier to use base/source in variables, compared to :16<FF> format

[17:21] <dalek> rakudo/nom: * Unlike :16<FF>, to make it more acceptable to feed user data into, provides

[17:21] <dalek> rakudo/nom:   simpler parsing, so things like :2<0xFF>, :36<0o2>, or :36(':20<36H>') would

[17:21] <dalek> rakudo/nom:   fail  instead of parsing as hex, octal, and base-20 number respectively.

[17:21] <dalek> rakudo/nom:

[17:21] <dalek> rakudo/nom: Name bikeshed: https://irclog.perlgeek.de/perl6/2016-11-11#i_13550787

[17:21] <dalek> rakudo/nom: Feature bikeshed: https://twitter.com/wonkden/status/797146894850002948

[17:22] <viki> stupid robot

[17:22] <viki> https://github.com/rakudo/rakudo/commit/7e21a2449af23e81dcfb3e4438a895258920c29a

[17:22] <dalek> roast: 553ca61 | (Zoffix Znet)++ | S32-str/parse-base.t:

[17:22] <dalek> roast: Add tests for parse-base() routine

[17:22] <dalek> roast:

[17:22] <dalek> roast: Feature added to Rakudo in

[17:22] <dalek> roast: https://github.com/rakudo/rakudo/commit/7e21a2449af23e81dcfb3e4438a895258920c29a

[17:22] <dalek> roast: review: https://github.com/perl6/roast/commit/553ca6127d

[17:23] <dalek> rakudo/nom: b1cbb8b | (Zoffix Znet)++ | t/spectest.data:

[17:23] <dalek> rakudo/nom: Add S32-str/parse-base.t to list of tests to run

[17:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b1cbb8b877

[17:38] <dalek> rakudo/nom: 5c40b13 | (Zoffix Znet)++ | src/core/Str.pm:

[17:38] <dalek> rakudo/nom: Fix typo in comment

[17:38] <dalek> rakudo/nom:

[17:38] <dalek> rakudo/nom: MasterDuke++

[17:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5c40b138f7

[18:02] <dalek> roast: 6e17e23 | (Zoffix Znet)++ | S32-str/parse-base.t:

[18:02] <dalek> roast: Test .parse-base can handle fancy Unicode numerals

[18:02] <dalek> roast:

[18:02] <dalek> roast: MasterDuke++

[18:02] <dalek> roast: review: https://github.com/perl6/roast/commit/6e17e23d94

[18:30] <viki> Seems t\04-nativecall\20-concurrent.t is still failing on AppVoyer thing: https://ci.appveyor.com/project/moritz/rakudo/build/1.0.1519/job/r9vq5i5e2wgw70wp

[18:44] <dalek> rakudo/nom: dfb58d4 | lizmat++ | src/core/ShapedArray.pm:

[18:44] <dalek> rakudo/nom: Make initialization of 2+dimmed array much faster

[18:44] <dalek> rakudo/nom:

[18:44] <dalek> rakudo/nom: - rewrite using nqp ops and the new R:I:ShapeBranchIterator

[18:44] <dalek> rakudo/nom: - now also allows lazy lists in initialization

[18:44] <dalek> rakudo/nom: - calls out an error on superfluous but empty iterators

[18:44] <dalek> rakudo/nom:

[18:44] <dalek> rakudo/nom: About 10x as fast on a 2x2 initializations, 16x on a 2x2x2 one.

[18:44] <dalek> rakudo/nom: Didn't test on larger / more dimensional initializations, but expect

[18:44] <dalek> rakudo/nom: them to be much much faster still.

[18:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dfb58d4f90

[18:45] <lizmat> so where is the new TWEAK functionality documented ?

[18:46] <lizmat> docs.perl6.org doesn't know about tweak  :-(

[18:46] <mst> <3 having TWEAK in mainline

[18:47] <viki> lizmat: I see it mentioned in the text in https://docs.perl6.org/language/objects#Object_Construction

[18:47] <mst> I think then I just need to figure out how to resurrect lizmat's lazy code, or beat one of the eco versions until it does what I want

[18:47] <viki> I'll add an index marker

[18:48] <mst> it's really fun watching perl6 slowly grow up :D

[18:48] <lizmat> viki++

[18:49] <lizmat> " (TWEAK is a new feature in v6.d / Rakudo 2016.11)"   so, 2016.11 is going to be 6.d ???

[18:49] * lizmat is confused now

[18:49] <lizmat> mst: which lazy code are your referring to?

[18:50] <viki> lizmat: I guess that means if you want to guarantee TWEAK works you can only rely on it in 6.d? *shrug*

[18:51] <viki> And well, it's not part of 6.c standard

[18:51] <lizmat> m: use v6.d

[18:51] <camelia> rakudo-moar dfb58d: OUTPUT«===SORRY!=== Error while compiling <tmp>␤No compiler available for Perl v6.d␤at <tmp>:1␤------> use v6.d⏏<EOL>␤»

[18:51] <lizmat> so you cannot use that to know that TWEAK will work

[18:51] <mst> lizmat: lazy attribute population, IIRC you wrote a 'will lazy' that got unmerged from rakudo for some reason, and then rabidgravy and ... somebody else ... wrote eco modules

[18:51] <lizmat> ah, that bit

[18:51] <viki> Right. There's no sane way to do it.

[18:58] <[Coke]> I would remove "v6.d / " from that description.

[18:59] <mst> "Tweak is a new feature in Rakudo 2016.11 which will be standardised as part of v6.d" ?

[18:59] <[Coke]> we don't know anything concrete about v6.d yet, so I would hesitate to document it as concrete.

[19:01] <lizmat> yes, but saying it is part of 2016.11 only enforces the notion of checking release level, rather than language level

[19:01] <lizmat> and then we're back at Perl 5 semantics of versioning basically

[19:01] <lizmat> which we were trying to get away from, as far as I know (did that change while I wasn't watching??)

[19:04] <viki> I think it's really at "experimental" level of support ATM. We just don't have that good distinction.

[19:05] <timotimo> i look ahead to when we have proper 6.c and 6.d support

[19:05] <lizmat> timotimo: I am as well, but as of now, it is above my payrate to implement that

[19:05] <lizmat> otherwise I would have done it already

[19:06] <lizmat> plenty of stuff of mine waiting to be put in 6.d

[19:06] <[Coke]> and/or removed from 6.c :)

[19:07] <lizmat> [Coke]: yup

[19:11] * geekosaur still needs to ask (probably @LARRY) about the CALL-ME stuff

[19:11] <geekosaur> my original idea's not workable (and suggests Callable is misnamed)

[19:12] <geekosaur> and it's necessarily 6.d (or later) stuff

[19:13] * lizmat would think it would be appropriate to have 2016.12 be a 6.d

[19:13] <mst> lizmat: ok, how about just "TWEAK is an experimental new future in 2016.11" ?

[19:14] <lizmat> mst: that again enforces the notion you would need to check release versions, rather than language levels

[19:14] <viki> But there's no 6.d language yet

[19:14] <lizmat> well, that's my point: we need one  :-)

[19:15] <viki> 6.c.limbo :)

[19:15] <mst> lizmat: well, if it's in the 2016.11 release notes, people are going to infer it anyway, and I don't see how you can avoid that

[19:15] <lizmat> true, and that's why I'm saying we need a 6.d sooner rather than later

[19:15] <mst> lizmat: I mean, ideally you would have a prereq on language levels, with a blacklist of release versions you know don't provide that language level properly

[19:16] <mst> or suitably

[19:16] <mst> or whatever

[19:16] <mst> like I'll need to be able to exclude a particular release with a bug

[19:16] <lizmat> otherwise we might as well forget about 6.x type versioning altogether

[19:16] <timotimo> do we have a thing that tells us if the current lexical scope has .c?

[19:16] <timotimo> because we can make looking for TWEAK depend on that

[19:16] <lizmat> m: say $*PERL.version   # timotimo

[19:16] <camelia> rakudo-moar dfb58d: OUTPUT«v6.c␤»

[19:17] <timotimo> but $* is kind of dynamic?

[19:17] <lizmat> m: say $*PERL.version >= v6.c

[19:17] <camelia> rakudo-moar dfb58d: OUTPUT«True␤»

[19:17] <lizmat> m: say $*PERL.version >= v6.d

[19:17] <camelia> rakudo-moar dfb58d: OUTPUT«False␤»

[19:18] <timotimo> m: say $*PERL.perl

[19:18] <lizmat> it *is* dynamic, that's why it would work  :-)

[19:18] <camelia> rakudo-moar dfb58d: OUTPUT«Perl.new(compiler => Compiler.new(id => "0469EDF27F3A519842CF7FEE334FC847FD7AE78C.1479150623.09795", release => "", codename => "", name => "rakudo", auth => "The Perl Foundation", version => v2016.10.279.gdfb.58.d.4, signature => Blob, desc => Str), name …»

[19:18] <timotimo> m: say $*PERL.version.perl

[19:18] <camelia> rakudo-moar dfb58d: OUTPUT«v6.c␤»

[19:18] <timotimo> that's problematic, though

[19:18] <mst> lizmat: ok, but there *has* to be some mechanic for "experimental thing that may not make it into any official 6.x"

[19:18] <timotimo> when you don't say "use v6.c" you're supposed to get "bleeding edge"

[19:23] <viki> m: enum Foo <a b c>; my @a[Foo] = 42; dd @a

[19:23] <camelia> rakudo-moar dfb58d: OUTPUT«Array.new(:shape(3,), [42, Any, Any])␤»

[19:24] <lizmat> m: use v6.c; class A { method TWEAK { dd %_ } }; A.new(foo => 42)   # so this should not work

[19:24] <camelia> rakudo-moar dfb58d: OUTPUT«{:foo(42)}␤»

[19:25] <viki> commitable: 2016.10 enum Foo <a b c>; my @a[Foo] = 42; dd @a

[19:25] <committable6> viki, ¦«2016.10»: Array.new(:shape(3,), [42, Any, Any])

[19:25] <viki> lizmat: what was broken that this commit fix? https://github.com/rakudo/rakudo/commit/7d711eec351647bc1e15da42a5a40bcb33ec934e

[19:26] * viki is trying to add it to changelog

[19:26] <lizmat> viki: it was checking for definedness of the parameter, and thus ignored Enums altogether

[19:26] <lizmat> viki: so specifying an Enum gave you an unshaped array

[19:27] <viki> commitable: 2016.09 enum Foo <a b c>; my @a[Foo] = 42; dd @a

[19:27] <committable6> viki, ¦«2016.09»: [42]

[19:27] <lizmat> viki: could well be I broke this *after* 2016.10

[19:27] <viki> commitable: 1293188 enum Foo <a b c>; my @a[Foo] = 42; dd @a

[19:27] <lizmat> so as such wouldn't require a mention

[19:27] <committable6> viki, ¦«1293188»: [42]

[19:27] <viki> Aha. Thanks, lizmat++

[19:30] <timotimo> lizmat: yes, it shouldn't work, that's what i think

[19:34] <geekosaur> Callable rant sent (not actually as a rant :)

[19:44] <dalek> rakudo/nom: 8ff9d0a | (Zoffix Znet)++ | docs/ChangeLog:

[19:44] <dalek> rakudo/nom: Log all changes to date

[19:44] <dalek> rakudo/nom:

[19:44] <dalek> rakudo/nom: Document commits:

[19:44] <dalek> rakudo/nom: 189cb23 2faa55b 37d0e46 4ae3f23 59bb1b1 7e21a24 839c762 a43b0c1

[19:44] <dalek> rakudo/nom: d540fc8 dd7b055 dfb58d4

[19:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8ff9d0aed0

[19:45] <dalek> rakudo/nom: c196afa | (Zoffix Znet)++ | docs/ChangeLog:

[19:45] <dalek> rakudo/nom: Move miscategorized change from Additions to Fixes

[19:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c196afa48a

[19:45] <viki> NeuralAnomaly: status

[19:45] <NeuralAnomaly> viki, [✔] Next release will be in 4 days and 9 hours. Since last release, there are 32 new still-open tickets (0 unreviewed and 0 blockers) and 0 unreviewed commits. See http://perl6.fail/release/stats for details

[19:52] <lizmat> viki; re 189cb23 , nqp::isconcrete is *not* the same as defined()

[19:53] <lizmat> viki: at least, not always

[19:53] <lizmat> viki: case in point: Failure:D

[19:54] <viki> lizmat: hm, I just took what Mu.defined uses: https://github.com/rakudo/rakudo/blob/nom/src/core/Mu.pm#L89

[19:54] <lizmat> viki: yes, that's the default case

[19:54] <viki> Ohh

[19:54] <lizmat> https://github.com/rakudo/rakudo/blob/nom/src/core/Failure.pm#L51   # an override

[19:55] <viki> I'll change it to .defined() method call then.

[19:55] <lizmat> viki++  :-)

[19:55] <viki> lizmat++ code review

[20:10] <timotimo> sorry, i'm bouncing in and out of irc

[20:30] <viki> Weird. Hang when trying to run t/spec/S03-junctions/autothreading.t

[20:31] <viki> m: say all(42, "x").defined

[20:31] <camelia> rakudo-moar c196af: OUTPUT«True␤»

[20:32] <viki> Hm. The above hangs with this patch :/ https://gist.github.com/zoffixznet/a4e226de46787975fc56bc2c56ce5a0b

[20:33] <lizmat> feels like a infiniloop that caught me when I was trying to fix this otherwise

[20:33] <viki> I think I see a messed up closing parentheses

[20:34] * viki rebuilkds

[20:42] <viki> ZOFVM: Files=1203, Tests=130156, 148 wallclock secs (20.31 usr  3.02 sys + 2680.25 cusr 246.31 csys = 2949.89 CPU)

[20:44] <dalek> rakudo/nom: 26e3516 | (Zoffix Znet)++ | src/core/Junction.pm:

[20:44] <dalek> rakudo/nom: Fix Junction.defined for types that have their own .defined

[20:44] <dalek> rakudo/nom:

[20:44] <dalek> rakudo/nom: nqp::isconcrete is only good for the default definedness.

[20:44] <dalek> rakudo/nom: Fix by calling actual .defined method on the items.

[20:44] <dalek> rakudo/nom:

[20:44] <dalek> rakudo/nom: lizmat++ for spotting the error

[20:44] <dalek> rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2016-11-14#i_13566837

[20:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/26e3516250

[20:44] <dalek> roast: ba8278d | (Zoffix Znet)++ | S03-junctions/autothreading.t:

[20:44] <dalek> roast: Test Junction.defined works on custom-defined .defined

[20:44] <dalek> roast:

[20:44] <dalek> roast: Also... defined

[20:44] <dalek> roast: review: https://github.com/perl6/roast/commit/ba8278d99f

[20:45] <dalek> roast: 1f3cadd | (Zoffix Znet)++ | S03-junctions/autothreading.t:

[20:45] <dalek> roast: Fix copy/pasta error in test description

[20:45] <dalek> roast: review: https://github.com/perl6/roast/commit/1f3cadddb7

[20:55] <mst> TimToady: the discussion further up w/lizmat about TWEAK, mentioning compiler versions, and how you deal with additive features atop the standard, is probably worth a read and a think about

[20:55] <mst> because it seems like a design/policy concern and lizmat has good points about the problems and I've no idea what other approaches would be best

[20:59] <lizmat> fwiw, the same problem exists wrt to parse-base

[21:11] <viki> Yeah. Even minor things like "42".chrs are affected too, since that crashes on 2016.10 but not 2016.11

[21:12] <viki> so you can't write code on assumption that .chrs can handle Str, if you target all 6.c compilers

[21:15] <timotimo> so we should make things like that also asplode when "use v6.c" is in effect?

[21:16] <lizmat> timotimo: but I think the point was that we shouldn't need to put in checks everywhere

[21:16] <timotimo> oh

[21:17] <timotimo> well, we're not going to make "use Rakudo:ver(* > v2011.10)"

[21:17] <viki> nope

[21:19] <viki> Make language releases more frequent? minor versions.... 6.c.1, 6.c.2

[21:20] <viki> and compiler releases rarer (?) this is all converging on tying to implementation version innit and someone said that should be avoided

[21:20] * viki is done for the day

[21:20] <viki> night \o

[21:20] <lizmat> good night, viki!

[21:21] <timotimo> gnite viki

[21:22] <[Coke]> at some point, people will have to be able to say "don't allow this version of rakudo to run my code, I know it has a bug." (They can do that already with one of the $* vars)

[21:23] <[Coke]> Worth going through jnthn's document describing how he expected this to work back pre-christmas that generally was received well.

[21:23] <geekosaur> isn't the usual way some way to declaratively specify required features? (use feature ...)

[21:24] <jnthn> I'd imagined that we'd declare a 6.c.1 sometime during 2016, thus providing people a way to say "I expect this set of things to work" in a language-tied way.

[21:24] <jnthn> There's not much to stop us doing that.

[21:24] <TimToady> seems like a good first step

[21:25] <jnthn> m: use 6.c.1

[21:25] <camelia> rakudo-moar 26e351: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> use 6.c.⏏1␤»

[21:25] <jnthn> m: use v6.c.1

[21:25] <camelia> rakudo-moar 26e351: ( no output )

[21:25] <jnthn> uh... o.O

[21:25] <jnthn> *sigh*

[21:25] <jnthn> Why doesn't that explode?

[21:25] <jnthn> committable6: 2015.12 use v6.c.1

[21:25] <committable6> jnthn, ¦«2015.12»:

[21:25] <TimToady> dint we have an egregious hack at christmas to be especially accepting?

[21:26] <jnthn> Quite possibly :/

[21:26] <jnthn> If so I'd forgotten about it.

[21:26] <TimToady> I could be confabulating though

[21:26] * TimToady is very in need of the coming week's vacation...

[21:27] * [Coke] just took a week off ... to spend some quality time with some phlegm.

[21:27] <jnthn> I guess provided we teach module installation to refuse to install stuff on a compiler that doesn't support 6.c.1 we at least make it module-useful

[21:28] <jnthn> (And we can tighten it up some, of course.)

[21:42] <geekosaur> ...right, forgot Callable docs got updated according to my original musings about CALL-ME, with the result that they leak an internal name *and* do not match the actual behavior. :/

[21:42] * geekosaur has a headache...

[21:43] <geekosaur> ...and I'm still unconvinced that scheme will actually work in practice, although I had forgotten that all Callable currently provides is "assuming" so maybe it *can* handle being the barrier between language and implementation of invocation/calling

[22:14] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2016/11/14/2016-46-tweaking-cheaters/

[22:16] <pyrimidine> lizmat++

[22:17] <geekosaur> ok, the message I am getting here is "this is not a problem"

[22:47] <lizmat> good night, #perl6-dev!
