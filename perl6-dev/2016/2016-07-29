[00:40] <gfldex> m: (1,'A').grep(* eqv 1)

[00:40] <camelia> rakudo-moar aa5e49: ( no output )

[00:40] <gfldex> m: dd (1,'A').grep(* eqv 1)

[00:40] <camelia> rakudo-moar aa5e49: OUTPUT«(1,).Seq␤»

[09:33] <psch> okay hm

[09:33] <psch> j: A: for ^1 { B: for ^1 { last A } } # this one still

[09:33] <camelia> rakudo-jvm cd19db: OUTPUT«===SORRY!===␤labeled last without loop construct␤»

[09:33] <psch> the notable thing i found out just now is

[09:34] <psch> that outwards from the &next call there's two CallFrames that have a !HANDLER__\d+ lexical

[09:34] <psch> one is the &next itself, afaict

[09:34] <psch> and the other is four .callers away from it

[09:35] <psch> of note there is, that the CallFrame with the lexical 'B' - i.e. the inner label - is one caller lower, so three .callers from the &next callframe

[09:38] <psch> but both those lexical handlers have the same id

[09:38] <psch> so we clearly are in the same handler and it can't be the right one..?

[09:38] <psch> i'm not really sure what exactly any of this means :S

[09:41] <psch> hrm, what's my jvm equivalent of '(MVMuint64)(f->work[fh->label_reg].o)'? :)

[10:02] <ShimmerFairy> .oO(probably involves something named MoarVirtualMachineUnsignedInteger64Bits)

[10:07] <jnthn> heh :)

[10:07] <jnthn> On JVM it'd probably have to be stored in a lexical rather than a normal local

[10:07] <jnthn> 'cus Java locals are ont he stack and inaccessible from "outside"

[10:19] <psch> hm, not sure how i'd guarantee that the name i found is in fact a label..?

[11:07] <arnsholt> jnthn: Digging in NQP, I notice that the ident subrule is implemented in Cursor, not HLL::Grammar. Is this purely for speed reasons, or is there a deeper reason to it?

[11:11] <dalek> rakudo/nom: f3afe43 | (Steve Mynott)++ | INSTALL.txt:

[11:11] <dalek> rakudo/nom: Configure.pl now needs at least perl 5.10

[11:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f3afe435a1

[11:11] <dalek> rakudo/nom: 1751f1e | lizmat++ | INSTALL.txt:

[11:11] <dalek> rakudo/nom: Merge pull request #833 from stmuk/nom

[11:11] <dalek> rakudo/nom:

[11:11] <dalek> rakudo/nom: Configure.pl now needs at least perl 5.10

[11:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1751f1e8ac

[11:17] <jnthn> arnsholt: It's a Perl 6 built-in :)

[11:17] <jnthn> arnsholt: Like print, lower, upper, etc.

[11:18] <jnthn> So it's in there so you can use it in normal regexes/grammars

[11:32] <arnsholt> Ah, right

[11:32] <arnsholt> Thanks!

[12:39] <dalek> nqp: 377c365 | lizmat++ | tools/build/MOAR_REVISION:

[12:39] <dalek> nqp: Bump NQP to get latest async fixes from MoarVM

[12:39] <dalek> nqp: review: https://github.com/perl6/nqp/commit/377c365fa8

[12:57] <dalek> rakudo/nom: 02b2e30 | lizmat++ | tools/build/NQP_REVISION:

[12:57] <dalek> rakudo/nom: Bump NQP to get the latest MoarVM async improvements

[12:57] <dalek> rakudo/nom:

[12:57] <dalek> rakudo/nom: Feels odd to push a revision with "parrot" in it, though  :)

[12:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/02b2e30423

[12:59] <dalek> star: 612110d | (Hinrik Örn Sigurðsson)++ | tools/build/module-install.pl:

[12:59] <dalek> star: Panda: Don't try to resolve depencies

[12:59] <dalek> star:

[12:59] <dalek> star: Without this, Panda tries to access the network to resolve the deps for

[12:59] <dalek> star: some modules (16 out of 32 at the moment), leading to them getting

[13:04] <[Coke]> which change drove the 5.10 bump in our requirements? Is it something we can work around? (I'm in general OK with updating our requirements, but have been dinged on this from users enough times in the last 10 years that I'm more sensitive to it now)

[13:05] <[Coke]> (wonder if it's an older change that we only just ack'd.)

[13:05] <unmatched}> The commit above just changes the instructions in the INSTALL.txt we were requiring 5.10 for a while

[13:06] <[Coke]> ah, it's back to pre christmas. carry on.

[13:06] <unmatched}> It's actually 5.10.1 or something like that. Yesterday, a person in #perl6 was on 5.10.0 and one of the core modules was missing a sub we're using

[13:06] <unmatched}> (or something that we use uses that; I couldn't find the call in rakudo repo)

[13:10] <dogbert17> o/ is lizmat around?

[13:11] <dogbert17> there is a problem with the latest commit, this is what happens when I type 'rakudobrew build moar'

[13:11] * lizmat is around again

[13:12] <dogbert17> ... HEAD is now at 02b2e30... Bump NQP to get the latest MoarVM async improvements

[13:12] <dogbert17> Unrecognized revision specifier 'parrot-22-g377c365'

[13:12] <dogbert17> Failed running /usr/bin/perl Configure.pl --backends=moar --gen-moaryes

[13:12] <lizmat> eh>

[13:12] <lizmat> ?

[13:12] <jnthn> Hmm

[13:13] <unmatched}> "--gen-moaryes" ? Spurious "yes"?

[13:13] <dogbert17> has worked flawlessly for months until now

[13:13] <jnthn> I don't think parrot- is right...it's meant to be against the last NQP release...

[13:13] <dogbert17> the 'yes' is from weechat when it asked if I wanted to paste two lines

[13:14] <lizmat> $ git describe

[13:14] <lizmat> parrot-22-g377c365

[13:14] <lizmat> jnthn: that's what nqp gives me

[13:14] <lizmat> I think that's a result of the tag that moritz++ added for the parrot support removal

[13:15] <jnthn> git describe --match 2*

[13:15] <jnthn> Yeah

[13:15] <jnthn> Guess we gotta be carefuller this month

[13:15] <lizmat> ok, lemme try that

[13:18] <lizmat> argh, some wip slipped in...

[13:19] <jnthn> So wip it out again!

[13:20] <dalek> rakudo/nom: 61725d7 | lizmat++ | tools/build/NQP_REVISION:

[13:20] <dalek> rakudo/nom: Properly bump NQP, jnthn++

[13:20] <dalek> rakudo/nom:

[13:20] <dalek> rakudo/nom: We had a parrot tag in there.  But we should really be relative to

[13:20] <dalek> rakudo/nom: the release, so "git describe --match e*" is the incantation to get

[13:20] <dalek> rakudo/nom: the tag to bump the NQP version dependency with.

[13:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/61725d7f7c

[13:20] <lizmat> wipped out  :-)

[13:20] <lizmat> dogbert17: could you check again ?

[13:20] * dogbert17 trying ...

[13:21] <dogbert17> works, lizmat++, jnthn++

[13:21] <lizmat> dogbert17++ # quick report  :-)

[13:32] <DrForr> WIP it good.

[14:38] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Properly bump NQP, jnthn++

[14:38] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/148308314 https://github.com/rakudo/rakudo/compare/02b2e304239b...61725d7f7ce8

[14:41] <psch> heh, that's moar not generating more output after interp.c

[14:41] <psch> i'm strongly inclined to blame travis for that kind of failure

[14:41] <psch> i mean, interp.c *definitely* shouldn't take 10 minutes

[15:18] <TimToady> well, if it's using clang...

[15:19] <timotimo> it could be fixed by having -j2 be the default

[15:19] <timotimo> and maybe we're able to move interp.c to the beginning?

[16:24] <psch> i don't think we have to react in any way.  it's just travis being unreliable

[16:32] <psch> just like yesterday the over-ten-minutes stage parse on r-j

[16:50] <[Coke]> if travis is unreliable, how can we rely on it? (we're just going to start ignoring failures, so why use it?)

[16:51] <timotimo> we can manually inspect the failure mode to see if it's sensible

[16:51] <psch> [Coke]: well, "no output for 10 minutes" is definitely a meaningless error, since nothing we have encountered that produced it could sensibly be our fault

[16:53] <mst> [Coke]: if you regard travis as a mini-cpantesters, it's still useful.

[16:53] <mst> it doesn't have to be 100% reliable for the results to still provide utility

[16:54] <unmatched}> .oO( make a bot that would report when the failure is due to the timeout... )

[16:54] <timotimo> that'd be a nice thing to have, tbh

[17:16] <TimToady> m: say (1 ... *).grep(*.is-prime).is-lazy;

[17:16] <camelia> rakudo-moar 61725d: OUTPUT«False␤»

[17:17] <TimToady> looks like grep needs the .lazy-if($laze) treatment

[17:17] <timotimo> sharks with friggin lazers

[17:22] <unmatched}> ( ticket: https://rt.perl.org/Ticket/Display.html?id=128773 )

[17:24] <TimToady> thanks

[17:49] <unmatched}> m: say (grep *.is-prime, (1 ... *)).is-lazy;

[17:49] <camelia> rakudo-moar 61725d: OUTPUT«True␤»

[17:50] <unmatched}> bisect: m: say (1 ... *).grep(*.is-prime).is-lazy;

[17:50] <bisectable> unmatched}: On both starting points the exit code is 0 and the output is identical as well

[17:50] <bisectable> unmatched}: Output on both points: False

[17:51] <TimToady> unmatched}: that works because the functional form reads:

[17:51] <TimToady> multi sub grep(Mu $test, +values, *%a) { my $laze = values.is-lazy; values.grep($test,|%a).lazy-if($laze)

[17:51] <TimToady> }

[17:52] <dalek> rakudo/nom: 7ba6dbf | TimToady++ | src/Perl6/Actions.nqp:

[17:52] <dalek> rakudo/nom: propagate outer wanted to logical thunks

[17:52] <dalek> rakudo/nom:

[17:52] <dalek> rakudo/nom: Fixes RT #128770

[17:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7ba6dbfae9

[17:52] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128770

[18:48] <travis-ci> Rakudo build passed. TimToady 'propagate outer wanted to logical thunks

[18:48] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/148377110 https://github.com/rakudo/rakudo/compare/61725d7f7ce8...7ba6dbfae97f

[18:49] <dalek> rakudo/nom: fc28b67 | TimToady++ | src/Perl6/Actions.nqp:

[18:49] <dalek> rakudo/nom: [op] onearg should want op and onearg

[18:49] <dalek> rakudo/nom:

[18:49] <dalek> rakudo/nom: Fixes RT #128766

[18:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fc28b67185

[18:49] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128766

[19:46] <travis-ci> Rakudo build errored. TimToady '[op] onearg should want op and onearg

[19:46] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/148394739 https://github.com/rakudo/rakudo/compare/7ba6dbfae97f...fc28b67185d7

[20:00] <tbrowder> emacs users: I just added new indices to my fork of perl6-mode. not perfect but it shows var names with sigil, classes, and subs (all types including proto); feature requests accepted (syohex is helping with good criticism); my additions are in my forks's branch "my-branch"

[21:12] <dalek> rakudo/nom: 22949d8 | lizmat++ | src/core/Any-iterable-methods.pm:

[21:12] <dalek> rakudo/nom: Fix for RT #128773

[21:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/22949d8efe

[21:12] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128773

[21:24] <Zoffix> :o

[21:24] <Zoffix> That's about 1000% simpler than what I imagined it'd be when I looked at the code this afternoon :)

[21:24] <lizmat> don't you love roles ?

[21:24] <Zoffix> :D

[21:25] <geekosaur> (role with it...)

[22:09] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Fix for RT #128773'

[22:09] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/148430884 https://github.com/rakudo/rakudo/compare/fc28b67185d7...22949d8efef1

[22:09] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128773

[22:10] <lizmat> good night, #perl6-dev

[22:10] <timotimo> gnite liz

[23:27] <Zoffix> 🎺🎺🎺 New blog post "IRC::Client: Perl 6 Multi-Server IRC (or Awesome Async Interfaces with Perl 6)": http://perl6.party/post/IRC-Client-Perl-6-Multi-Server-IRC-Module

[23:38] <timotimo> damn, i never tried having a regex match in a signature inside a where clause; it's really nifty you get the $/ in the routine body!

[23:38] <Zoffix> yeah

[23:39] <timotimo> i find it a bit surprising that you chose to have NEXT as an attribute

[23:39] <timotimo> where most libraries i know that have something like that will pass a next that you have to invoke in the arguments

[23:39] * timotimo continues reading

[23:40] <Zoffix> I added it before I realized I could make multi-dispatch using regexes on a Message Object's attribute. I've not needed it for any of the examples so far... ¯\_(ツ)_/¯

[23:41] <Zoffix> (well, other than the example that shows a .NEXT :P)

[23:43] <timotimo> mhm

[23:44] <timotimo> the thing is, the NEXT that you usually get is to identify multiple simultaneous requests that are in-flight

[23:44] <timotimo> when you want to asynchronously handle stuff

[23:48] <Zoffix> Not sure how that applies here. In IRC::Client, .NEXT signals that the event should be passed further down the chain, usually as an indicator that the current handler was unable to handle it, or because the current handler is a preprocessor for the event.

[23:49] <Zoffix> That's why I've not had a chance to use it yet, because my handlers are matched by the signature constraint, so whenever they get entered is because they can definitly handle the output

[23:50] <timotimo> mh, so a plugin is allowed to mutate the content of the event?

[23:58] <timotimo> and so, but simply

[23:58] <timotimo> ^- should probably be "by simply"
