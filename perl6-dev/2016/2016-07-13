[00:02] <[Coke]> I love npm's module installer display

[00:09] <Zoffix> I see. TODOing inside subtests basically is LTA. I couldn't even TODO inside a subtest in Perl 5.

[00:10] <Zoffix> I forget what I said a few days ago about fudging a subtest, but I may have been wrong. A subtest counts as 1 test, so fudging it should be fine ¯\_(ツ)_/¯

[00:10] * Zoffix will attempt to make subtest fudgable soon

[00:11] <dalek> roast: 346fa6c | (Zoffix Znet)++ | S19-command-line/repl.t:

[00:11] <dalek> roast: [TODO FUDGE] REPL with -M with non-existant module exits fine

[00:11] <dalek> roast:

[00:11] <dalek> roast: RT#128595

[00:11] <dalek> roast: review: https://github.com/perl6/roast/commit/346fa6c7cb

[00:11] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128595

[00:13] <dalek> roast: eb77164 | (Zoffix Znet)++ | S19-command-line/repl.t:

[00:13] <dalek> roast: Fix typo in test name

[00:13] <dalek> roast: review: https://github.com/perl6/roast/commit/eb77164100

[01:16] * Zoffix will attempt to make subtest fudgable soon

[01:16] <Zoffix> oops

[01:22] <dalek> roast: a8afed7 | (Zoffix Znet)++ | S29-os/system.t:

[01:22] <dalek> roast: [TODO FUDGE] run(:merge) on non-existent program does not crash

[01:22] <dalek> roast:

[01:22] <dalek> roast: RT#128594

[01:22] <dalek> roast: review: https://github.com/perl6/roast/commit/a8afed7259

[01:22] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128594

[02:30] <Zoffix> Perl 6 cake: https://pbs.twimg.com/media/CnMN6Q9WgAAxYSI.jpg:large

[03:08] <timotimo> cakemilia

[03:22] <MasterDuke> benchable: f583f22,110704d my $a = "a" x 2**16;for ^1000 {my $b = $a.chop($_)}

[03:22] <benchable> f583f22=0.371098041534424 110704d=0.369231939315796

[03:26] <Zoffix> benchable: 2015.06,2016.06 my $a = "a" x 2**16;for ^1000 {my $b = $a.chop($_)}

[03:27] <MasterDuke> Zoffix: that was actually an error on my part, it wasn't supposed to show up here just yet

[03:27] <MasterDuke> and we'll need AlexDaniel to run it

[03:27] <MasterDuke> but that should be soon

[03:27] <AlexDaniel> pretty soon, yeah

[03:28] <AlexDaniel> also note that I only went till 2015.10, so 2015.06 is not going to work (yet) :)

[04:11] <timotimo> whoa, benchable

[06:17] <[Tux]> This is Rakudo version 2016.06-239-g303e77f built on MoarVM version 2016.06-9-g8fc21d5

[06:17] <[Tux]> test            15.700

[06:17] <[Tux]> test-t           8.933

[06:17] <[Tux]> csv-parser      16.675

[06:55] <masak> nice, less than 9 now

[06:55] <yoleaux2> 10 Jul 2016 13:49Z <Zoffix> masak: should this be closed based on liz's comments or should there be more discussion? https://rt.perl.org/Ticket/Display.html?id=127789#ticket-history

[06:56] <masak> Zoffix: last I heard, TimToady++ was mulling over that one. dunno if something came out of that, though.

[06:57] <masak> Zoffix: my use case for this is still alive and well: https://github.com/masak/nex/blob/62aaf422ba1c6643b4ea6df547bbb0d23788b339/lib/Games/Nex/Test.pm#L7-L10

[07:00] <masak> I don't know what the criterion is for keeping RT tickets open. my gut feeling tells me we can do better than the current status quo. but I also think lizmat++ makes a set of valid points.

[07:12] <timotimo> what's "antipairs" again?

[07:12] <timotimo> m: enum Foo <A B C D E>; say Foo::.antipairs.perl

[07:12] <camelia> rakudo-moar 303e77: OUTPUT«(Foo::B => "B", Foo::A => "A", Foo::E => "E", Foo::D => "D", Foo::C => "C").Seq␤»

[07:12] <timotimo> you want something different still, right?

[09:40] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Oops, forgot to add a type smiley'

[09:40] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/144281580 https://github.com/rakudo/rakudo/compare/75971f36cf78...371b934b2d61

[10:19] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Array.BIND-POS 3.5x faster for non-reified elements

[10:19] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/144271600 https://github.com/rakudo/rakudo/compare/0941d0fb9cad...2d95de34e027

[10:20] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Mention Array.AT-POS/ASSIGN-POS/BIND-POS improvements'

[10:20] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/144273212 https://github.com/rakudo/rakudo/compare/2d95de34e027...75971f36cf78

[10:46] <lizmat> good *, #perl6-dev

[10:46] <lizmat> .tell Zoffix the tests you added to S29-os/system.t yesterday hang on OSX  :-(

[10:46] <yoleaux2> lizmat: I'll pass your message to Zoffix.

[10:48] <lizmat> which is what is causing the Travis fail messages

[10:52] <dalek> roast: 4f52c6e | (Zoffix Znet)++ | S29-os/system.t:

[10:52] <dalek> roast: Comment out hanging TODO fudge

[10:52] <dalek> roast:

[10:52] <dalek> roast: The test hangs on OSX (per http://irclog.perlgeek.de/perl6-dev/2016-07-13#i_12832824 )

[10:52] <dalek> roast:

[10:52] <dalek> roast: RT#128594

[10:52] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128594

[10:52] <dalek> roast: review: https://github.com/perl6/roast/commit/4f52c6ee10

[10:53] <Zoffix> ACK

[10:53] <yoleaux2> 10:46Z <lizmat> Zoffix: the tests you added to S29-os/system.t yesterday hang on OSX  :-(

[10:54] <lizmat> Zoffix++  # writing and commenting out for now  :-)

[10:54] <lizmat> m: use nqp; say nqp::sha1("abc") eq nqp::sha1("abc\0d")   # disturbing

[10:54] <camelia> rakudo-moar 303e77: OUTPUT«True␤»

[10:59] <jnthn> lizmat: Wasn't a patch for that committed today? :)

[10:59] <lizmat> yeah, but only in MoarVM afaik

[10:59] <jnthn> Yeah

[10:59] <jnthn> We only used it for hashing source code though, iirc

[10:59] <jnthn> Which is relatively unlikely to contain a null :)

[10:59] <lizmat> jnthn: it's also used in Blob.WHICH

[11:00] <jnthn> Oh?

[11:00] <jnthn> That sounds...fragile

[11:00] <jnthn> And also unperformant :)

[11:00] <lizmat> self.^name ~ '|' ~ nqp::sha1(self.join(","))

[11:00] <jnthn> Or at least, relative to the quality of hashing we need on Blob.WHICH :)

[11:01] <jnthn> wow, yeah, that's gonna...work but be slow :)

[11:01] * llfourn hopes nobody was using p6 to do pw management and allowing 0 in their passwords.

[11:02] <jnthn> It's still relatively unlikely they'd have gone through a code path that hit the nqp::sha1 op :)

[11:02] <jnthn> And the problem was restricted to that.

[11:03] <llfourn> do we have SHA1 as a builtin?

[11:03] <llfourn> (to Perl 6)

[11:03] <lizmat> llfourn: only at NQP level, afaik

[11:04] <llfourn> ok no worries then :)

[11:08] <jnthn> Yeah, nqp::sha1 should not be used/exposed for general-purpose use

[11:08] <jnthn> It only exists to hash source code files

[11:15] <brrt> maybe call it nqp::hashcodefile then

[11:15] <brrt> just to obscure what it is, and to discourage people from relying on it

[11:16] <jnthn> It may make it less tempting, yeah :)

[11:16] <jnthn> And break anyone who did use it ;)

[11:16] <jnthn> So we'll know about it :)

[11:16] <jnthn> ooh, lunch time :) &

[11:20] <brrt> lunch away

[12:26] <dalek> rakudo/nom: 6dbacb3 | lizmat++ | src/core/Array.pm:

[12:26] <dalek> rakudo/nom: Make Array.DELETE-POS about 7x faster

[12:26] <dalek> rakudo/nom:

[12:26] <dalek> rakudo/nom: - also do 6 allocations less per call

[12:26] <dalek> rakudo/nom: - use setelems once instead of keeping popping

[12:26] <dalek> rakudo/nom: - ready to handle Arrays with $!reified

[12:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6dbacb3452

[12:30] <lizmat> hmmm... s/with/without/  :-(

[12:33] <dalek> rakudo/nom: 66a5928 | lizmat++ | src/core/array_slice.pm:

[12:33] <dalek> rakudo/nom: Speedup %other check that I missed before

[12:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/66a5928ae1

[12:33] <lizmat> afk&

[12:34] <[Coke]> regarding "when do we close tickets" - RT #127789 is one of those tickets that needs to be decided by @larry; but I would say both masak and lizmat qualify there, and they disagree, so we need someone else to offer an opinion, I think.

[12:34] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127789

[12:36] <[Coke]> BrokenRobot: https://github.com/coke/perl6-profiler-html now lets you round trip the old template (so I can start putting in a new template and running it with live data from a fresh profile run.) also added a gruntfile (not tied to the makefile yet) that lets me start manipulating the html/css/js

[13:02] <brrt> lizmat: have you ever tested what the aggegrate effects of the 'Make $x about $n x faster' commits is?

[13:02] <brrt> also, why is nqp::if faster than just if?

[13:04] <BrokenRobot> just if creates a block?

[13:04] <brrt> hmmm

[13:04] <gfldex> m: say do if ( 1 == 1) {};

[13:04] <camelia> rakudo-moar 66a592: OUTPUT«Nil␤»

[13:05] <gfldex> m: say do if ( 1 == 1) { 1 };

[13:05] <camelia> rakudo-moar 66a592: OUTPUT«1␤»

[13:20] <psch> m: for ^10000 { $++ if 1 }; say now - BEGIN now;

[13:20] <camelia> rakudo-moar 66a592: OUTPUT«0.0304687␤»

[13:20] <psch> m: for ^10000 { if 1 { $++ } }; say now - BEGIN now;

[13:20] <camelia> rakudo-moar 66a592: OUTPUT«0.0354006␤»

[13:20] <psch> aalll noise vOv

[15:07] <|Tux|> This is Rakudo version 2016.06-241-g66a5928 built on MoarVM version 2016.06-9-g8fc21d5

[15:07] <|Tux|> test            15.242

[15:07] <|Tux|> test-t           8.643

[15:07] <|Tux|> csv-parser      16.281

[15:09] <BrokenRobot> New blog post "A Date With The Bug Queue or Let Me Help You Help Me Help You": http://perl6.party/post/A-Date-With-The-Bug-Queue-or-Let-Me-Help-You-Help-Me-Help-You

[15:10] <perlpilot> BrokenRobot++

[15:11] <perlpilot> BrokenRobot: you could have just asked [Coke] about Lesson 1.  I think he's gone through more bug reports than anybody.

[15:41] <BrokenRobot> Challenge accepted! :)

[16:25] <Frameless> bisect: " ".Int

[16:25] <bisectable> Frameless: on both starting points the exit code is 0 and the output is identical as well

[16:25] <Frameless> bisect: say " ".Int

[16:25] <bisectable> Frameless: on both starting points the exit code is 0 and the output is identical as well

[16:25] <Frameless> wtf

[16:25] <Frameless> m: say " ".Int

[16:25] <camelia> rakudo-moar 66a592: OUTPUT«0␤»

[16:26] <Frameless> :o

[16:27] <Frameless> On 2016.06-10-g7cff429 it crashes for the specific case of 1 space: https://gist.github.com/zoffixznet/41f4fd9d2c8acf4fdb26bc7b19265cf7 and there's a ticket reporting it: https://rt.perl.org/Ticket/Display.html?id=128543

[16:28] <Frameless> bisect: " ".Int == 0 or die

[16:28] <bisectable> Frameless: on both starting points the exit code is 0 and the output is identical as well

[16:28] <Frameless> Broken bot

[16:28] <geekosaur> less than ideal for this particular case, although if you know a failing version I think you can point to it?

[16:29] <timotimo> that's right; check the irclog search for examples

[16:30] <geekosaur> bisect: bad=7cff429 say " ".Int

[16:30] <Frameless> I'm not following what you're suggesting... Right now it's searching from HEAD to some time in 2015 and it doesn't see the difference between June commits.

[16:30] <bisectable> geekosaur: (2016-04-09) https://github.com/rakudo/rakudo/commit/576f975

[16:31] <Frameless> :/

[16:31] <Frameless> Oh, ok, I see the problem. It was working then got broken then now it's working again

[16:32] <geekosaur> yes. and running through every version to find one in which it fails would be rather expensive

[16:33] <timotimo> yup, that's the difficulty with bisecting

[16:33] <timotimo> now you can invert it and say that commit is "good" and we should find the commit that fixed it in the mean time ... or something like that

[16:33] <Frameless> bisect: bad=7cff429,good=66a592 say " ".Int

[16:33] <bisectable> Frameless: cannot find such “bad” revision

[16:33] <Frameless> bisectable: help

[16:33] <bisectable> Frameless: Like this: bisect: good=2015.12 bad=HEAD exit 1 if (^∞).grep({ last })[5] // 0 == 4 # RT 128181

[16:34] <Frameless> bisect: bad=7cff429 good=HEAD say " ".Int

[16:34] <bisectable> Frameless: “bisect run” failure

[16:34] <Frameless> bisect: good=HEAD bad=7cff429 say " ".Int

[16:34] <bisectable> Frameless: “bisect run” failure

[16:35] <Frameless> It doesn't like good HEAD

[16:35] * Frameless snickers

[16:42] <Frameless> bisect: good=7cff429 bad=HEAD my $x; try $x = " ".Int; say $x.defined and die

[16:42] <bisectable> Frameless: exit code is 1 on both starting points, bisecting by using the output

[16:42] <bisectable> Frameless: (2016-07-04) https://github.com/rakudo/rakudo/commit/e28305c

[16:42] <Frameless> lool

[16:42] <Frameless> So I did fix it after all :D

[16:50] <AlexDaniel> poor bisectable was called broken :)

[16:50] <dalek> roast: c10df83 | (Zoffix Znet)++ | S32-str/numeric.t:

[16:50] <dalek> roast: .Int on string with nothing but spaces gives 0

[16:50] <dalek> roast:

[16:50] <dalek> roast: RT#128543

[16:50] <dalek> roast: review: https://github.com/perl6/roast/commit/c10df8395e

[16:50] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128543

[16:54] <AlexDaniel> geekosaur: fwiw, it is much less expensive than most people think :)

[16:56] <AlexDaniel> in fact, it is so inexpensive that you'll probably see a bot for that in a few days…

[17:01] <Frameless> https://github.com/rakudo/rakudo/compare/2015.12...2016.06

[17:01] <Frameless> m: say 1198 * 10 / 60

[17:01] <camelia> rakudo-moar 66a592: OUTPUT«199.666667␤»

[17:01] <Frameless> 3 hours for a piece of code that runs for 10 secs

[17:02] <Frameless> Guess you could parallelize if you have a ton of cores.

[17:03] <AlexDaniel> yeah, parallelizing is key

[17:03] <AlexDaniel> m: say 1500/(7)*0.5

[17:03] <camelia> rakudo-moar 66a592: OUTPUT«107.142857␤»

[17:04] <AlexDaniel> less than two minutes for any quick snippet

[17:04] <AlexDaniel> note that stuff typically runs in about 0.2-0.3 s on that server, so it will be even faster

[17:14] <Frameless> *phew* Karen from TPF replied to my CLA email. My journey for sending legal paperwork is now complete :) "Thanks for sending it.  I'm sorry about the problem with the address."

[17:33] <jnthn> Frameless: Just heard from Karen about that. :) Commit invite issued.

[17:36] <Frameless> "You are now a member of Rakudo Perl!" jnthn++ thanks :)

[17:36] * Frameless celebrates with the appropriate amount of fun

[17:37] <lizmat> Frameless++   # welcome!

[17:37] * lizmat hopes to see many fine commits  :-)

[17:37] <Frameless> :)

[17:38] <timotimo> yay

[17:38] <jnthn> Indeed, welcome on board :)

[17:39] <Frameless> \o/

[17:43] <[Coke]> tried to update https://github.com/rakudo/rakudo/wiki/contrib-Create-PR to reflect our current recommendations about PRs. Can anyone figure out why the code blocks aren't formatted like code?

[17:43] <[Coke]> also, feel free to edit it.

[17:43] <[Coke]> Also, rakudo currently has 42 PRs that need to be reviewed.

[17:45] <geekosaur> that needs to be 4 spaces *in addition to* the indent for the itemized list

[17:45] <Frameless> Using ``` seems to have done the trick as well

[17:45] <geekosaur> so, I think, 6 or 7 spaces

[17:45] <[Coke]> but the list is over at that point, no?

[17:46] <geekosaur> that's a markdown corner case :/

[17:46] <Frameless> Oh number is now messed up

[17:46] <[Coke]> Frameless++ geekosaur++

[17:46] <[Coke]> Frameless: we can just use 1) instead of 1. then

[17:46] * geekosaur has seen both behaviors, does not know which github uses

[17:46] <[Coke]> I'm going to add "pending user" as a label for PRs so we can see which ones are waiting for the user to clean something up.

[17:47] <geekosaur> and it may be doing something else because someone coded strictly to spec and this case falls into a hole

[17:49] <[Coke]> jnthn: https://github.com/rakudo/rakudo/pull/232 is from 2014 and the last comment is that you're going to look at it locally.

[17:52] <jnthn> [Coke]: In the end, fixed size arrays got done as part of the shaped arrays work (and yes, by me :P)

[17:52] <jnthn> m: my @a[4]; @a[5] = 42

[17:52] <camelia> rakudo-moar 66a592: OUTPUT«Index 5 for dimension 1 out of range (must be 0..3)␤  in block <unit> at <tmp> line 1␤␤»

[17:53] <jnthn> [Coke]: So the PR can be closed

[17:53] * jnthn does so

[17:57] <[Coke]> jnthn:++

[17:59] <[Coke]> added "pending user" "has conflcits" and "needs review" labels.

[18:00] <timotimo> "pending user" means we're waiting for the original reporter to react to a comment or so?

[18:02] <[Coke]> yup

[18:02] <[Coke]> whereas needs review should mean a developer has to look at it. More labels are fine, just trying to get some light on these old PRs.

[18:03] <timotimo> cool

[18:03] <[Coke]> also tgging a few with failing travis as pending user, since I assume we're not merging anything that failed.

[18:04] <timotimo> thanks, that seems like really helpful work

[18:13] <[Coke]> might need to distinguish between "needs code review" and "needs spec review"

[18:13] <timotimo> mhm, good idea

[19:34] <dalek> rakudo/nom: 04fbb41 | lizmat++ | src/core/Array.pm:

[19:34] <dalek> rakudo/nom: Remove one more use of ensure-allocated

[19:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/04fbb417c2

[19:34] <dalek> rakudo/nom: ce4734f | lizmat++ | src/core/Str.pm:

[19:34] <dalek> rakudo/nom: Make Str.samemark about 50x faster

[19:34] <dalek> rakudo/nom:

[19:34] <dalek> rakudo/nom: - also fixes RT #128615

[19:34] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128615

[19:34] <dalek> rakudo/nom: - rewritten in nqp

[19:34] <dalek> rakudo/nom: - made it match the documentation wrt to fewer pattern chars than string

[19:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ce4734fd4f

[19:38] <timotimo> 50x    %)

[19:39] <Frameless> :o

[19:40] <dalek> rakudo/nom: d59c1b8 | lizmat++ | docs/ChangeLog:

[19:40] <dalek> rakudo/nom: Mention Str.samemark in ChangeLog

[19:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d59c1b8500

[19:41] <timotimo> Frameless: did you have a different nickname recently?

[19:43] <TimToady> yes, "MeowMix" :)

[19:44] <lizmat> .oO( sounds like "BrokenRobot" )

[19:47] <Frameless> timotimo: naaah :P

[19:48] <timotimo> oh is it zoffix again?

[19:51] <lizmat> no, it's Frameless   :-)

[19:52] <geekosaur> broken robot had a framing error? :p

[19:55] <dalek> rakudo/nom: 8bb4195 | lizmat++ | src/core/Hash.pm:

[19:55] <dalek> rakudo/nom: Handle Hash.Map properly

[19:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8bb4195995

[19:55] <lizmat> .oO( nothing that couldn't be Zoffixed )

[19:58] <gfldex> why is it `Hash:U' and not `Hash:U:` ?

[19:59] <lizmat> oops

[20:00] <lizmat> gfldex: good catch

[20:00] <lizmat> now why didn't the spectest catch that  :-(

[20:08] <dalek> rakudo/nom: f5f545c | lizmat++ | src/core/Hash.pm:

[20:08] <dalek> rakudo/nom: Properly indicate invocant type, gfldex++

[20:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f5f545c60b

[20:27] <jnthn> Time to add another spectest... :)

[20:47] <dalek> rakudo/nom: e990823 | lizmat++ | src/core/Array.pm:

[20:47] <dalek> rakudo/nom: Make Array.List 5x as fast

[20:47] <dalek> rakudo/nom:

[20:47] <dalek> rakudo/nom: - also introduce the :view named, if you are sure the Array won't change

[20:47] <dalek> rakudo/nom: - rewritten in nqp, does cow if no :view given

[20:47] <dalek> rakudo/nom: - remove last use of ensure-allocated

[20:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e990823829

[20:47] <dalek> rakudo/nom: 24cc914 | lizmat++ | docs/ChangeLog:

[20:47] <dalek> rakudo/nom: Mention Array.List improvement

[20:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/24cc914052

[20:59] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make Array.DELETE-POS about 7x faster

[20:59] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/144442152 https://github.com/rakudo/rakudo/compare/303e77f61053...6dbacb34525d

[21:01] <lizmat> wow, that's a commit of 8+ hours ago

[21:01] <lizmat> anyways, good night, #perl6-dev!

[21:03] <sortiz> g'night lizmat!

[21:36] <dalek> roast: 01728bd | (Zoffix Znet)++ | S32-hash/map.t:

[21:36] <dalek> roast: .Map on Hash produces correct results

[21:36] <dalek> roast: review: https://github.com/perl6/roast/commit/01728bd23b

[21:43] <Zoffix> .tell [Coke] unsure if you have access to look into it, but it seems there's some email issues between RT and perl6-compiler list. For example lizmat replied on the mailing list to a bug report (to [email@hidden.address] but it did not show up on the ticket: RT#128615 Also, I've been commenting on a bunch of tickets with Bcc to perl6-compiler, but those don't get to mailing list

[21:43] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128615

[21:43] <yoleaux2> Zoffix: I'll pass your message to [Coke].

[23:05] <dalek> roast: 933588c | (Zoffix Znet)++ | S32-str/samemark.t:

[23:05] <dalek> roast: .samemark with empty-string argument must throw

[23:05] <dalek> roast:

[23:05] <dalek> roast: RT#128615

[23:05] <dalek> roast: review: https://github.com/perl6/roast/commit/933588c4dd

[23:05] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128615

[23:07] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Speedup %other check that I missed before'

[23:07] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/144443432 https://github.com/rakudo/rakudo/compare/6dbacb34525d...66a5928ae101
