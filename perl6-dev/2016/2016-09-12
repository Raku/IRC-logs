[00:04] <Zoffix> m:  say "!" R~ 10.base: 16

[00:04] <camelia> rakudo-moar 04af57: OUTPUT«A!␤»

[00:04] <Zoffix> Found a good use of `R` metaop :)

[00:08] <awwaiid> I have a list of things and a predicate -- what's a good way to see if they all match the predicate? Would 'so is-prime(<2 5 7 17>.all)' be efficient, or is there a better lazy eval way?

[00:09] <Zoffix> .oO( premature optimization is the root of all evil )

[00:10] <awwaiid> yeah yeah. I switched to a loop already

[00:10] <awwaiid> so nevermind :)

[00:15] <MasterDuke> speaking of premature optimization i just read the transcript of an interview with Knuth, he's a fascinating guy

[00:17] <Zoffix> He also said Perl 6 may have came in too late... Screw him, he's a traitor :P

[00:28] <tadzik> a heathen! :P

[01:06] <awwaiid> Knuth addressed Perl 6?

[01:15] <Zoffix> awwaiid, not really. It was a talk about what languages make it or break it or something and he said the time when the languages comes around is important and said something along the lines of "Perl 6... is it too late? I don't know"

[01:16] <awwaiid> ah

[01:17] <awwaiid> Zoffix: why you not in #perl6? check this out, https://gist.github.com/awwaiid/d55434447e5503d48a252bf2eff53313

[01:18] <Zoffix> Too much traffic.

[01:18] <awwaiid> ah

[01:19] <Zoffix> So, I'm looking at 40 lines of code that replace 4 characters (.all) ?

[01:19] <Zoffix> :)

[01:20] <Zoffix> Also, you asked your original question here, in #perl6-dev, and now your comment in #perl6 is without context :)

[01:20] <awwaiid> not that. The fun of a very core proof-of-concept of QuickCheck -- I'm looking into building something inspired by quickcheck and/or clojure/spec

[01:20] <Zoffix> Oh never mind that comment is not about your thing

[01:20] <awwaiid> yeah ... I didn't actually mean my earlier question in here :)

[01:21] <awwaiid> well it is technically about my thing in that loop, but that's not important overall :)

[01:21] <Zoffix> I've no idea what quickcheck is

[01:21] <awwaiid> Just thought you might like this idea

[01:21] <awwaiid> ahh

[01:22] <awwaiid> it is predicate / random testing. The idea is if you can generate inputs to a function at random and can assert some result of the function (like 'sort' outputs a list where the first element is the smallest), then you do a reasonable sample of inputs, that you can get some easy and declarative testing

[01:22] <awwaiid> generating inputs is fun in perl6 when you can inspect the signature and param types to start making them

[01:23] <awwaiid> quickcheck is a haskell lib that has been ported to a bunch of other langs

[01:23] <awwaiid> So after this basic probabilistic predicate assertion stuff, next is that WHEN you find a bad case you can then minimize it -- try to find the simplest input that defies the predicate

[01:24] <awwaiid> which I haven't gotten to yet of course

[01:33] <MasterDuke> sounds like fuzzing

[01:34] <awwaiid> It is like fuzzing yes, with expected outcomes. Very popular in Haskellville because they get a lot of free input generation through the types

[01:37] <awwaiid> for example, here in the xmonad test suite the authors declare that if you swap a window and then swap it back you get the original configuration. They leave it up to the quickcheck harness setup to generate some inputs to try that against. https://github.com/xmonad/xmonad/blob/master/tests/Properties/Swap.hs#L13

[01:37] <awwaiid> Ends up magical is my understanding. But I haven't used it much myself, just read about it

[01:40] <geekosaur> it's not really magical. for any type you can declare an instance of the typeclass Arbitrary that generates random values; you can use the typeclass machinery to help with that so in many cases the instance is just boilerplate (and there are packages that will auto-create instances using generics, iirc)

[01:41] <geekosaur> the StackSet is parameterized specifically so we can use QuickCheck with non-X11 types to test its behavior, then use the X11 types (which are actually the same but it can't tell) to run it

[01:45] <geekosaur> so you can have QC generate random StackSets, apply W.swap twice, and verify the result is the original StackSet

[01:45] <awwaiid> indeed. In my current experiment I'm making a multi sub 'gen' that will dispatch based on the types, which will take the place of the typeclass Arbitrary

[01:45] <geekosaur> note that you get to reuse the machinery for fields, so gen for something like StackSet just means calling gen on its elements and building a StackSet from them, and the elements in turn use gen on their elements, etc.

[01:48] <geekosaur> no. data StackSet i l a sid sd = StackSet { current :: !(Screen i l a sid sd); visible :: [Screen i l a sid sd]; hidden :: [Workspace i l a]; floating :: Map a RationalRect }

[01:49] <geekosaur> hm, I gues sin p6 that would be instance vars

[01:49] <geekosaur> `has` vars

[01:49] <awwaiid> ya

[01:50] <awwaiid> I'm also looking at clojure/spec as a way to declare these things, kinda interesting

[01:51] <geekosaur> (i = tag/workspace name, l = layout, a = window, sid = screen id, sd = screen detail. for testing you can make sd and l (), sid and a Int, i String)

[02:19] <Zoffix> m: say +"70\x[308]93"

[02:19] <camelia> rakudo-moar 04af57: OUTPUT«Cannot convert string to number: trailing characters after number in '7⏏0̈93' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[02:19] <Zoffix> m: say "70\x[308]93"

[02:19] <camelia> rakudo-moar 04af57: OUTPUT«70̈93␤»

[02:20] <Zoffix> Design question: Should the coercion to numeric ignore the diarhesis and give 7093? There's a couple of tickets that look easy to fix, once that decision is made.

[02:20] <Zoffix> jnthn, pmichaud, TimToady ^ if you have time

[02:22] <Zoffix> One thing we already ignore is surrounding whitespace; I'd think ignoring diahresis would make sense.

[02:22] <Zoffix> m: say +"    7093    "

[02:22] <camelia> rakudo-moar 04af57: OUTPUT«7093␤»

[02:22] * Zoffix goes to bed; will read replies in the morning, if any

[04:06] * TimToady can argue it both ways, but thinks the situation won't arise all that often, and votes for whichever is faster

[04:21] <ShimmerFairy> I'd lean towards no; as an example, what would someone expect +"0.3̅" to do? 3/10 or 1/3 ? In that example, I'd think failing would be better than choosing a behavior silently that may not be desired.

[04:27] <TimToady> that would be a slightly stronger argument if .base-repeating put out that format...

[04:28] <TimToady> but it's a point

[04:29] <ShimmerFairy> yeah, I'm not suggesting it's very reasonable to expect core Perl 6 to make that into 1/3, just that it could theoretically happen (and that it's not all that farfetched).

[04:30] <ShimmerFairy> I think what makes diacritics different from surrounding whitespace is that the presence of a diacritic likely indicates an extra meaning we can't possibly guess (on average), whereas surrounding whitespace doesn't.

[04:33] <geekosaur> base should fail, an ecosystem module could extend it

[04:33] <ShimmerFairy> I suppose that to me, diacritics in the middle of what should be a numeric value indicates either an additional meaning you have to handle yourself, or that your data is (paritally) garbage :)

[04:34] <geekosaur> likewise fwiw

[04:40] * TimToady just wonders about someone trying to copy/paste something with incidental formatting, like strikeout

[04:41] <TimToady> or underlining, because it was a fill-in-the-blank form

[04:42] <TimToady> not that is likely to end up with composing underbars

[04:42] <TimToady> *that that

[04:43] <TimToady> but I could imagine an entry form that did it that way

[04:45] <TimToady> otoh, .ords.chrs is not that hard for stripping composers

[04:45] <TimToady> just that the programmer might not anticipate the need for such

[04:47] <ShimmerFairy> Is there any guarantee that we could distinguish a purely "decorative" or "meaningless" diacritic from a "meaningful" one? That is, how can CORE be sure that an underlined number is never really some kind of super-rare notational thing?

[04:48] <TimToady> ya pays yer money and takes yer choice...

[04:48] <TimToady> sometimes you just lose...

[04:48] <TimToady> so like I said, I can argue it both ways

[04:49] <TimToady> the question here is whether the dwim is worth more on average than the wat

[04:49] <ShimmerFairy> Right, I can see the pro argument being that at least our number system almost never uses any sort of "digit modifier" to indicate different meanings.

[04:50] <TimToady> and I think at least you can say the wat is easy to explain

[04:51] <TimToady> and we could conceivably special-case overbar

[04:52] <TimToady> but again, I'd like to know whether one way was slower than the other

[04:52] <TimToady> programs spend a lot of time converting strings to numbers and back

[04:52] <ShimmerFairy> My inclination is that this situation isn't very common at all, so I'd need to see some concrete examples of why auto-diacritic-stripping would be helpful to have in CORE.

[04:53] <TimToady> well, it might just be free, given how nqp::ordat works

[04:54] <ShimmerFairy> I imagine the extra steps would _technically_ lead to more execution time, but I'm not certain it would be significantly so.

[04:55] <TimToady> what extra steps?

[04:56] <ShimmerFairy> TimToady: just the extra statements to ordat and so on.

[05:00] <TimToady> it might well be that rejecting synthetics outright could be faster

[06:10] <[Tux]> This is Rakudo version 2016.08.1-163-g04af57c built on MoarVM version 2016.08-43-g3d04391

[06:10] <[Tux]> csv-ip5xs        8.988

[06:10] <[Tux]> test            16.534

[06:10] <[Tux]> test-t           7.089

[06:10] <[Tux]> csv-parser      17.076

[06:57] <cognominal> Vendredi les décodeurs du monde nous parlent d'intox sur la santé de Clinton et le lundi de sa pneumonie :)  Malade, peut-etre à cause d'un baril de chlore laché par Assad, ca expliquerait tout :)

[07:00] <nine> ??

[07:02] <cognominal> oops; wrong channel

[07:05] <lizmat> it does explain everything  :-)

[07:11] <dalek> roast: c7dd8f0 | niner++ | S10-packages/precompilation.t:

[07:11] <dalek> roast: Test if we pick up changes of a precompiled dependency's source file.

[07:11] <dalek> roast: review: https://github.com/perl6/roast/commit/c7dd8f03ee

[07:15] <nine> I can bring back the speedup reverted in commit 376b5f4ee210f36d1ec3d683592901705955604b.

[07:15] <nine> But it would still not pick up changes done by --force installation of a module if the precomp file lives in a precomp store further up the chain.

[07:16] <nine> Thing is, that we intended a short-name:ver:auth triplet to be unique and distros to be immutable from the very beginning. The optimization would rely on that.

[07:18] <nine> I'm inclined to just give it a try and force people to adapt by increasing version numbers instead of --force installing.

[07:18] <nine> What do you think?

[07:22] <lizmat> I agree with you

[07:25] <dalek> rakudo/nom: c170ebe | niner++ | src/core/CompUnit/PrecompilationRepository.pm:

[07:25] <dalek> rakudo/nom: Speed up loading deps by only running .modified checks when needed

[07:25] <dalek> rakudo/nom:

[07:25] <dalek> rakudo/nom: $*REPO.id represents the contents of all repositories. We already check if

[07:25] <dalek> rakudo/nom: that changed since we precompiled a module. If it is still the same, there

[07:25] <dalek> rakudo/nom: should be no reason to check the .modified of the source file. If it changed,

[07:25] <dalek> rakudo/nom: we need to check it as a change in our source file could be exactly what

[07:25] <dalek> rakudo/nom: caused the different checksum.

[07:25] <dalek> rakudo/nom: Note that this relies on the immutability of installed distros which we

[07:25] <dalek> rakudo/nom: haven't enforced so far.

[07:25] <dalek> rakudo/nom: Brings GTK::Simple's load time back down to 227ms.

[07:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c170ebe503

[07:26] <nine> lizmat: ok, so let's give it a try :)

[07:50] <dalek> rakudo/nom: 512b5e2 | lizmat++ | src/core/Rakudo/Internals.pm:

[07:50] <dalek> rakudo/nom: Introducing Rakudo::Internals.SeqFromSeqs

[07:50] <dalek> rakudo/nom:

[07:50] <dalek> rakudo/nom: Create a Seq from a Seq of Seqs.  Also tune ListsFromSeq so it can

[07:50] <dalek> rakudo/nom: handle empty List objects without $!reified

[07:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/512b5e2542

[07:50] <dalek> rakudo/nom: 1379175 | lizmat++ | src/core/List.pm:

[07:50] <dalek> rakudo/nom: Make List.combinations about 4x faster

[07:50] <dalek> rakudo/nom:

[07:50] <dalek> rakudo/nom: - based on "my @a = <a b c d>; for ^500 { my @b = @a.combinations }"

[07:50] <dalek> rakudo/nom: - using the new SeqFromSeqs functionality

[07:50] <dalek> rakudo/nom: - create separate candidate for the combinations() case

[07:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/137917541f

[08:46] <[Coke]> Zoffix: I had a todo from ages ago that may be of interest to you: - update rakudo release announcement to solicit donations to the Perl 6 Core Dev Fund

[08:48] <DrForr> You too can emulate Jimmy Wales :)

[09:25] <lizmat> nine: t/spec/S10-packages/precompilation.t has become flappy for me

[09:25] <lizmat> either test 47 fails, or 48, or all tests, or 4 other tests  :-(

[09:25] <lizmat> (so far)

[09:26] <lizmat> hmmm... seems 47 and 48 are alternating on subsequent runs

[09:26] <lizmat> some cleanup issue ?

[09:29] <stmuk_> [Coke]: putting a Begging Letter in R* could be a good idea as well

[09:30] <stmuk_> does anyone know of any copy which could be reused? (just looking on the Perl Foundation site)

[10:04] <arnsholt> Do we have anyone working semi-regularly on NQP or Rakudo on JVM?

[10:06] <Zoffix> psch used to, but I haven't seen them in a while.

[10:06] <Zoffix> .seen psch

[10:06] <yoleaux2> I saw psch 4 Aug 2016 16:20Z in #perl6-dev: <psch> i mean, we probably could have infix:sym<.=> do a similar check to methodop, the latter being where we throw that error

[10:06] <Zoffix> NeuralAnomaly, stats

[10:06] <NeuralAnomaly> Zoffix, [✘] Next release will be in 4 days and 18 hours. Since last release, there are 48 new still-open tickets (0 unreviewed and 0 blockers) and 10 unreviewed commits. See http://perl6.fail/release/stats for details

[10:07] <Zoffix> 🎺🎺🎺 REMINDER: The next Rakudo release will be this Saturday. Please review the ChangeLog to ensure the changes you made have been logged properly.

[10:07] <Zoffix> New blog post "Perl 6 Core Hacking: Grammatical Babble": http://perl6.party/post/Perl-6-Core-Hacking-Grammatical-Babble

[10:19] <nine> lizmat: right now precompilation.t fails 2 tests consistently on my laptop. But reverting my optimization doesn't change that :/

[10:20] <lizmat> hmmm... :-(

[10:26] <nine> lizmat: oh wait a sec. Those two failing tests should be TODOed. The test harness doesn't seem to understand that.

[10:29] <nine> Or rather the Test module doesn't output the TODO markers

[10:29] <nine> Despite the line reading: todo('no 6model parametrics interning yet'); is_run

[10:31] <Zoffix> works fine here

[10:36] <Zoffix> Just built from HEAD. Passes fine with and without PERL6_TEST_DIE_ON_FAIL turned on: https://gist.github.com/zoffixznet/fedf091fa93b8d7a725ef90642a29e67

[10:42] <nine> Well maybe I should have run precompilation.rakudo.moar instead of precompilation.t...

[10:45] <Zoffix> :)

[10:47] <nine> lizmat: so far I've only once managed to get precompilation.rakudo.moar to fail due to "duplicate definition of symbol Test"

[10:47] <nine> lizmat: RAKUDO_MODULE_DEBUG output may help

[10:54] <lizmat> nine: will try in a mo

[11:13] <dalek> rakudo/nom: 3c2451c | lizmat++ | src/core/List.pm:

[11:13] <dalek> rakudo/nom: Make combinations(n,k) about 1.8x faster

[11:13] <dalek> rakudo/nom:

[11:13] <dalek> rakudo/nom: - rewrite using nqp ops

[11:13] <dalek> rakudo/nom: - no JVM dependent code necessary anymore

[11:13] <dalek> rakudo/nom: - don't use return for successful find

[11:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3c2451c57b

[11:15] <dalek> rakudo/nom: 9d1a086 | lizmat++ | docs/ChangeLog:

[11:15] <dalek> rakudo/nom: Mention the combinations improvements

[11:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9d1a086339

[11:16] <lizmat> Method 'version' not found for invocant of class 'Needed'

[11:16] <lizmat> in block <unit> at -e line 3

[11:17] <lizmat> nine  ^^^

[11:17] <lizmat> getting that consistently now

[11:18] <lizmat> siesta&

[11:19] <nine> lizmat: t/spec/S10-packages/precompilation.t:260 should overwrite t/spec/packages/RT128156/Needed.pm6 with a version that contains the "version" method

[11:20] <nine> lizmat: can you confirm that it does so (it gets reverted in line 265)? Does by any chance adding a sleep 2; after that spurt help?

[11:42] <nine> lizmat: now that I thought some more, the sleep should probably be before the spurt as we need to see a difference between the outdated precomp file's .modified and the source. Probably safest to add it before and after though.

[12:00] <[Coke]> I could really use a new docker image based on the 2016.09 release (coming soon)

[12:01] <[Coke]> Willing to offer a 2-beer bounty. :)

[13:57] <[Coke]> P6M Merging GLOBAL symbols failed: duplicate definition of symbol Test

[13:57] * [Coke] does a realclean

[14:08] <dalek> roast: 3ceb078 | coke++ | S07-iterators/range-iterator.t:

[14:08] <dalek> roast: fudge for moar

[14:08] <dalek> roast: review: https://github.com/perl6/roast/commit/3ceb078400

[14:08] <dalek> rakudo/nom: 15532db | coke++ | t/spectest.data:

[14:08] <dalek> rakudo/nom: run these (fudged) tests

[14:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/15532dbc19

[14:10] <nine> [Coke]: when exactly did you get that error?

[14:13] <ugexe> should we start pushing for distribution names to use `-` instead of `::` as a separator?

[14:13] <[Coke]> should this test file be deleted? It's not run: S03-operators/shortcuts.t

[14:14] <[Coke]> nine: during a 'prove -v -e t/fudgeandrun /path/to/file' - went away with a realclean/rebuild. (was in a build directory)

[14:15] * [Coke] opens a ticket.

[14:17] <[Coke]> https://github.com/perl6/roast/issues/157

[14:38] <MasterDuke_> jnthn: hello hello hello. have you had any chance to think about https://github.com/rakudo/rakudo/pull/859? this is the fix that "quietly" does union hyperoperators for hashes

[14:59] <lizmat> back from siesta

[14:59] <lizmat> nine: looks like putting a sleep before/after does fix the issue

[14:59] <lizmat> shall I commit it ?

[15:27] <dalek> roast: 4585a9c | lizmat++ | S10-packages/precompilation.t:

[15:27] <dalek> roast: Add some rest to make for less flappy testing

[15:27] <dalek> roast: review: https://github.com/perl6/roast/commit/4585a9cd1f

[15:29] <|Tux|> This is Rakudo version 2016.08.1-169-g15532db built on MoarVM version 2016.08-43-g3d04391

[15:29] <|Tux|> csv-ip5xs        9.015

[15:29] <|Tux|> test            15.223

[15:29] <|Tux|> test-t           6.787

[15:29] <|Tux|> csv-parser      17.359

[15:29] <MetaZoffix> \o/

[15:30] <[Coke]> nice.

[15:32] <timotimo> very not bad

[17:53] <monada> MasterDuke: I see this comment: http://irclog.perlgeek.de/perl6-dev/2016-09-12#i_13192789  was jnthn++ having concerns about https://github.com/rakudo/rakudo/pull/859 ? I think it's OK to merge, but wanted to check first.

[17:57] <nine> lizmat: yes please. As the test is about time stamps, a sleep does seem like an appropriate fix

[18:06] <nine> Those other spurious errors worry me :/

[18:09] <nine> A kinda ironic detail: the CORE dist is always installed as version 6.c violating our own rule.

[18:12] <jnthn> MasterDuke_: Sorry, was tied up with $other-job and just reading backlog here now. :)

[18:12] <yoleaux2> 11 Sep 2016 03:28Z <Zoffix> jnthn: would you add what 'async-socket-str-fixes' brought in to the ChangeLog? I've no idea.

[18:13] <jnthn> MasterDuke_: The main concern is if there's any lazy evaluation taking place and we could swallow the warnings associated with that. But since it's Associative, I guess not.

[18:14] <jnthn> MasterDuke_: The safe fix would be `my &quiet-op = -> |c { quietly op(|c) }`

[18:15] <jnthn> MasterDuke_: Which of course comes at quite a cost because of the extra invocation and args shuffling

[18:15] <jnthn> otoh I guess if we were to assume it's a binary op we can do it much cheaper

[18:15] <jnthn> But that'd make sure only the evaluation of the op is quieted

[18:16] <jnthn> To show up in this case we'd need somebody to have a custom Associative implementation that could warn when indexed though, which is kinda marginal

[18:16] <jnthn> So this is more of an issue for a similar patch for hyper on Positional, where laziness (and so suppressing warnings at a distance) really is a possibility.

[18:27] <dalek> roast: eedf53d | usev6++ | S17-supply/interval.t:

[18:27] <dalek> roast: Fudge (skip) test using Proc::Async for JVM

[18:27] <dalek> roast: review: https://github.com/perl6/roast/commit/eedf53d6b4

[18:29] <dalek> roast: 2a5e743 | usev6++ | S17-supply/interval.t:

[18:29] <dalek> roast: Fix fudging for JVM

[18:29] <dalek> roast: review: https://github.com/perl6/roast/commit/2a5e743d97

[18:41] <dalek> rakudo/nom: a9ed671 | TimToady++ | src/Perl6/Grammar.nqp:

[18:41] <dalek> rakudo/nom: desigilname var checked too soon in quotes

[18:41] <dalek> rakudo/nom:

[18:41] <dalek> rakudo/nom: When parsing quotes, interpolated variables with multiple sigils

[18:41] <dalek> rakudo/nom: were being checked immediately, but that violates the constraint

[18:41] <dalek> rakudo/nom: that backtrackable interpolations should not have side effects.

[18:41] <dalek> rakudo/nom: We now delay that variable check out to where normal variables are

[18:41] <dalek> rakudo/nom: checked, after any such backtracking would be triggered.

[18:41] <dalek> rakudo/nom:

[18:41] <dalek> rakudo/nom: Fixes RT #129257.

[18:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a9ed67168e

[18:41] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129257

[19:36] <MasterDuke_> jnthn: yeah, Positional seems a thornier problem. and like Zoffix said in his comment on th PR, you can't really know what to replace an undefined with. so the impression i'm getting is that this is good to merge?

[19:49] <dalek> rakudo/nom: 804bf67 | (Zoffix Znet)++ | / (3 files):

[19:49] <dalek> rakudo/nom: Fix NativeCall CArray hanging when created from empty list

[19:49] <dalek> rakudo/nom:

[19:49] <dalek> rakudo/nom: The issue was we were calling nextsame when @values was empty,

[19:49] <dalek> rakudo/nom: but the nextsame candidate was the one with a slurpy, that

[19:49] <dalek> rakudo/nom: called the @values candidate again, resulting in a loop.

[19:49] <dalek> rakudo/nom:

[19:49] <dalek> rakudo/nom: Instead of having a separate multi for empty argument case, we

[19:49] <dalek> rakudo/nom: return its value when the @values is empty, resolving the infiniloop.

[19:49] <dalek> rakudo/nom:

[19:49] <dalek> rakudo/nom: Fixes RT#129256: https://rt.perl.org/Ticket/Display.html?id=129256

[19:49] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129256

[19:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/804bf671f8

[20:05] <dogbert17> Zoffix: I've made the change locally in a branch, done some cmdline testing and then 'make spectest'. However, there were failures ...

[20:06] <dogbert17> failures in t/spec/S32-io/socket-accept-and-working-threads.t   and   t/spec/S32-num/power.rakudo.moar

[20:07] <dogbert17> t/spec/S32-num/power.rakudo.moar .................................. Dubious, test returned 1 (wstat 256, 0x100)

[20:10] <ZoffixMobile> dogbert17, that sounds like you aren't roast HEAD.

[20:10] <ZoffixMobile> did you start from a fresh checkout of rakudo?

[20:10] <dogbert17> yes

[20:11] <ZoffixMobile> Weird. Did you already commit the change? Can I see it?

[20:11] <dogbert17> when I wrote make spectest, roast was automatically downloaded

[20:12] <dogbert17> haven't committed yet, wanted to ask about the failures first (otoh, I did the change you suggested)

[20:12] <ZoffixMobile> can you pastebin output of git diff

[20:14] <dogbert17> https://gist.github.com/dogbert17/f0bac4e05f46b87327006ebccec05a26

[20:17] <ZoffixMobile> Yeah, that's good. Submit that as PR, I spectested that before I headed out and it was clean so the failures aren't due to this change. I'm unsure why you have spectest failures. Some tests flop sometimes, so you can try running the spectest again. Both of those recently had failures (but were then fixed), which is why I thought you may have been running an older spectest

[20:18] <dogbert17> ok, I'll commit and send a PR

[20:20] <jnthn> MasterDuke: I think so, but we should consider the Positional case also

[20:23] <dalek> rakudo/nom: 6fc1d9b | jnthn++ | docs/ChangeLog:

[20:23] <dalek> rakudo/nom: Explain IO::Socket::Async fixes in ChangeLog.

[20:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6fc1d9b5be

[20:27] <dogbert17> Zoffix: done (I think)

[20:32] <dalek> rakudo/nom: 59ce05e | (Jan-Olof Hendig)++ | src/core/Cool.pm:

[20:32] <dalek> rakudo/nom: Make Cool.trans work the same as Str.trans

[20:32] <dalek> rakudo/nom:

[20:32] <dalek> rakudo/nom: Cool.trans coerces the invovant to Str and then directly calls

[20:32] <dalek> rakudo/nom: Str.trans. The way this is done causes adverbs, if specified, to

[20:33] <dalek> rakudo/nom: be thrown away. We must ensure that the these parameters are sent

[20:33] <dalek> rakudo/nom: to Str.trans and not being thrown away. A couple of changes

[20:33] <dalek> rakudo/nom: suggested by Zoffix++ takes care of this problem.

[20:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/59ce05ed9b

[20:33] <dalek> rakudo/nom: 22946ed | lizmat++ | src/core/Cool.pm:

[20:33] <dalek> rakudo/nom: Merge pull request #877 from dogbert17/fix-rt-129258

[20:33] <dalek> rakudo/nom:

[20:33] <dalek> rakudo/nom: Make Cool.trans work the same as Str.trans

[20:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/22946ed9bb

[20:34] <dogbert17> wohoo

[20:35] <nine> dogbert17: your branch was probably not up to date with rakudo nom or you missed running config.status. Those failures are because of an out of date nqp/moarvm

[20:37] <dogbert17> nine: I probably missed something. Both nqp and moarvm were downloaded when I typed 'perl Configure.pl --gen-moar --gen-nqp --backends=moar'

[20:41] <ZoffixMobile> dogbert17, ah, but your rakudo fork may have been out of date

[20:41] <ZoffixMobile> git pull https//github.org/rakudo/rakudo

[20:42] <ZoffixMobile> Anyway, dogbert17++ Achievement Unlocked: Fix Rakudo Bug :)

[20:42] <nine> dogbert17: rakudo will build the nqp and moar that was required at the time of that rakudo version. roast may already test fixes in newer version.

[20:44] <dogbert17> When I forked and cloned, the last fix included was 'desigilname var checked too soon in quotes' by TimToady

[20:45] <nine> odd

[20:46] <dogbert17> not all socket async tests failed, only five of them

[20:46] <dogbert17> Also, I'm running a 32 bit vm if that makes a difference

[20:48] <nine> That could actually be a deciding factor

[20:48] <nine> Few people run rakudo on 32 bit systems. It's much less well tested there.

[20:49] <dogbert17> is 32 bit officially supported?

[20:52] <ZoffixMobile> I think our "officially supported" is constrained by whether or not there are volunteers to provide support on the platform in question :)

[20:52] <ZoffixMobile> I use it on a 32bit box at $work. Seems to work fine

[21:07] <Zoffix> dogbert17, will you submit roast tests for that bug as well?

[21:13] <Zoffix> dogbert17++ # making me more aware of what Core Hacking blogs need to be written :)

[21:26] <dalek> roast: a2e54a7 | (Zoffix Znet)++ | S02-literals/string-interpolation.t:

[21:26] <dalek> roast: %%, @@, and && do not attempt to interpolate any variables

[21:26] <dalek> roast:

[21:26] <dalek> roast: RT#129257: https://rt.perl.org/Ticket/Display.html?id=129257

[21:26] <dalek> roast: review: https://github.com/perl6/roast/commit/a2e54a7e09

[21:26] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129257

[21:27] <timotimo> m: my $foo; say "$foo.say().notamethod"

[21:27] <camelia> rakudo-moar 22946e: OUTPUT«(Any)␤True.notamethod␤»

[21:27] <timotimo> m: my $foo; say "$foo.say().notamethod()"

[21:27] <camelia> rakudo-moar 22946e: OUTPUT«(Any)␤Method 'notamethod' not found for invocant of class 'Bool'␤  in block <unit> at <tmp> line 1␤␤»

[21:27] <timotimo> hm

[21:27] <Zoffix> m: my $foo; say "$foo.say.notamethod()"

[21:27] <camelia> rakudo-moar 22946e: OUTPUT«(Any)␤Method 'notamethod' not found for invocant of class 'Bool'␤  in block <unit> at <tmp> line 1␤␤»

[21:27] <Zoffix> Looks good to me

[21:28] <timotimo> i seem to recall i had some issue at some point

[21:31] <Zoffix> The Unguided is such a good band to hack while listening to \o/ https://www.youtube.com/watch?v=1ZNhfeIcArE

[21:43] <dalek> roast: 0cbc5bf | (Zoffix Znet)++ | S05-transliteration/trans.t:

[21:43] <dalek> roast: Remove trailing whitespace

[21:43] <dalek> roast: review: https://github.com/perl6/roast/commit/0cbc5bf24f

[21:45] <dalek> roast: 54ad7fd | (Zoffix Znet)++ | S05-transliteration/trans.t:

[21:45] <dalek> roast: Adverbs on Cool.trans work the same as on Str.trans

[21:45] <dalek> roast:

[21:45] <dalek> roast: RT#129258: https://rt.perl.org/Ticket/Display.html?id=129258

[21:45] <dalek> roast: review: https://github.com/perl6/roast/commit/54ad7fda46

[21:45] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129258

[21:45] <Zoffix> dogbert17, I added the tests in https://github.com/perl6/roast/commit/54ad7fda46    Teamwork ✋

[22:12] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2016/09/12/warmen-up-das-youtuben/

[22:16] <jnthn> lizmat++

[22:17] <jnthn> A nice bedtime read

[22:17] <jnthn> 'night, #perl6

[22:17] <jnthn> *-dev :)

[22:17] <lizmat> gnight jnthn

[22:17] * lizmat also calls it a night

[22:18] <timotimo> gnite lizmat and jnthn

[22:23] <Zoffix> lizmat++ # good weekly

[22:24] <timotimo> Zoffix++ # good week

[22:41] <Zoffix> m: say ^∞ ~~ ∞

[22:41] <camelia> rakudo-moar 22946e: OUTPUT«True␤»

[22:41] <Zoffix> m: say ^4 ~~ 4

[22:41] <camelia> rakudo-moar 22946e: OUTPUT«True␤»

[22:41] <Zoffix> huh

[22:41] <Zoffix> m: say ^4 ~~ 3

[22:41] <camelia> rakudo-moar 22946e: OUTPUT«False␤»

[22:42] <Zoffix> oh, it's using .elems ... I thought it'd say whether it's in range

[22:42] <timotimo> yeah, that would be the other way around

[22:42] <Zoffix> m: say 3 ~~ ^4

[22:42] <camelia> rakudo-moar 22946e: OUTPUT«True␤»

[22:42] <Zoffix> m: say ∞ ~~ ^∞

[22:42] <camelia> rakudo-moar 22946e: OUTPUT«False␤»

[22:42] <Zoffix> timotimo++ cheers
