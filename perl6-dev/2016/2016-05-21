[03:06] <lizmat> hoelzro [Coke] : what is the issue with https://github.com/rakudo/rakudo/commit/949a7c7 exactly ?

[03:08] <hoelzro> lizmat: I don't think it's that commit

[03:08] <lizmat> ah, then what is the issue ?

[03:08] <hoelzro> git bisect points to e2f1fa7 as the culprit

[03:08] <lizmat> m: say Inf.Int ?

[03:08] <camelia> rakudo-moar c59e4d: OUTPUT«===SORRY!=== Error while compiling /tmp/najt2FFAyS␤Confused␤at /tmp/najt2FFAyS:1␤------> say Inf.Int⏏ ?␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modif…»

[03:08] <lizmat> m: say Inf.Int

[03:08] <camelia> rakudo-moar c59e4d: OUTPUT«Cannot coerce Inf to an Int␤  in block <unit> at /tmp/FiH9DU3sWE line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/FiH9DU3sWE line 1␤␤»

[03:09] <lizmat> m: say Inf.Rat

[03:09] <camelia> rakudo-moar c59e4d: OUTPUT«Cannot coerce Inf to a Rat␤  in block <unit> at /tmp/3qubssiryh line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/3qubssiryh line 1␤␤»

[03:09] <hoelzro> Inf.Rat, iirc

[03:09] <hoelzro> 6.c-errata has a failure around that

[03:12] <lizmat> well, the question was really, should it fail or not

[03:12] <lizmat> before my change, Inf.Int failed, and Inf.Rat did not

[03:13] <lizmat> there are todoed tests for Inf.Int expecting to fail

[03:13] <lizmat> *not

[03:13] <lizmat> and there are tests for Inf.Rat expecting to not fail

[03:14] <lizmat> so, either we make Inf.Int *and* Inf.Rat *not* fail

[03:14] <lizmat> or we make them both fail

[03:14] <hoelzro> so you're saying we should modify 6.c-errata?

[03:14] <lizmat> well, not until we decided what the behaviour should be

[03:14] <lizmat> the behaviour between Inf.Int and Inf.Rat was inconsistent

[03:14] <hoelzro> right

[03:14] <lizmat> I made it consistent, but maybe the wrong way

[03:15] <lizmat> I don't think jnthn has any strong feelings about it either way

[03:15] <lizmat> wonder what TimToady's thoughts on it are

[03:15] <lizmat> fwiw, I expect a coercer to return a value of the type being coerced to

[03:16] <hoelzro> that makes sense

[03:16] <lizmat> since Inf is not an Int, or a Rat, returning Inf seems wrong

[03:16] <hoelzro> I don't object to the idea behind the change - I just want a clean test for the release

[03:16] <lizmat> indeed...

[03:16] <lizmat> now, barring any last minute intervention from TimToady or jnthn

[03:17] <lizmat> I suggest we fix the tests to expect a failure

[03:17] <hoelzro> I'm inclined to say revert for now - at least then the behavior is consistent with 2016.04, if inconsistent in other ways

[03:18] <lizmat> fine by me  :-)

[03:18] <lizmat> at least I tried  :-)

[03:18] <hoelzro> it's a good idea! I think we'll just have to figure out the right thing to do for 2016.06

[03:18] <hoelzro> thank you for your input

[03:18] <lizmat> yw

[05:42] <dalek> nqp: 8abff19 | hoelzro++ | tools/build/MOAR_REVISION:

[05:42] <dalek> nqp: Bump required MoarVM version for release

[05:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8abff19deb

[05:42] <dalek> nqp: ac50b73 | hoelzro++ | VERSION:

[05:42] <dalek> nqp: Bump our version for release

[05:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ac50b731b6

[05:42] <dalek> nqp: 61b3f00 | hoelzro++ | t/ (2 files):

[05:42] <dalek> nqp: Mark new failing JVM tests as TODO

[05:42] <dalek> nqp:

[05:42] <dalek> nqp: Pawel introduced some new tests for the JS backend, which is a great

[05:42] <dalek> nqp: way to kick the tires on the *other* backends, such as the JVM.

[05:42] <dalek> nqp: Unfortunately, the functionality tested isn't ready yet for

[05:46] <dalek> nqp: ca37f08 | hoelzro++ | docs/release_guide.pod:

[05:46] <dalek> nqp: Add myself to people to bug about tarball uploads

[05:46] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ca37f08f9a

[05:53] <dalek> rakudo/nom: f3f7d8a | hoelzro++ | docs/release_guide.pod:

[05:53] <dalek> rakudo/nom: Update release guide regarding code names

[05:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f3f7d8acab

[05:53] <dalek> rakudo/nom: c7f3c08 | hoelzro++ | tools/create-release-announcement.pl:

[05:53] <dalek> rakudo/nom: Add a helper script for generating release announcments

[06:54] <dalek> rakudo/nom: a8170a6 | hoelzro++ | docs/ChangeLog:

[06:54] <dalek> rakudo/nom: [release] Add changelog entries for 2016.05

[06:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a8170a6356

[06:54] <dalek> rakudo/nom: 6d432dc | hoelzro++ | docs/release_guide.pod:

[06:54] <dalek> rakudo/nom: Fix example path for panda in release guide

[06:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6d432dcb6c

[06:54] <dalek> rakudo/nom: 636e030 | hoelzro++ | docs/announce/2016.05.md:

[06:54] <dalek> rakudo/nom: [release] Add changelog entries to release announcement

[06:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/636e030848

[06:54] <dalek> rakudo/nom: 61f78e0 | hoelzro++ | docs/release_guide.pod:

[06:54] <dalek> rakudo/nom: Add myself to list of people to bug about tarball uploading

[06:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/61f78e0873

[06:54] <dalek> rakudo/nom: 9de8896 | hoelzro++ | docs/release_guide.pod:

[06:54] <dalek> rakudo/nom: Mention my release announcement helper script

[12:00] <dalek> roast: ce73638 | usev6++ | / (3 files):

[12:00] <dalek> roast: Unfudge tests for JVM (FIRST works now)

[12:00] <dalek> roast: review: https://github.com/perl6/roast/commit/ce7363836a

[14:28] <dalek> roast: 66c6258 | usev6++ | S32-list/minmax.t:

[14:28] <dalek> roast: Fix description (quotes) for skipped test

[14:28] <dalek> roast: review: https://github.com/perl6/roast/commit/66c6258b8d

[14:33] <lizmat> hoelzro++  # 2016.05 release

[14:48] <dalek> roast: ffeafe1 | usev6++ | S0 (2 files):

[14:48] <dalek> roast: Unfudge two passing tests for JVM

[14:48] <dalek> roast: review: https://github.com/perl6/roast/commit/ffeafe1344

[14:59] <lizmat> m: sub a(&c) { gather { take 42; c() } }; a {fail}  # LTA error

[14:59] <camelia> rakudo-moar 4f046d: OUTPUT«===SORRY!===␤Failed␤»

[15:00] <lizmat> m: sub a(&c) { gather { c(); take 42 } }; a {fail}   # much better error

[15:00] <camelia> rakudo-moar 4f046d: OUTPUT«Failed␤  in block <unit> at /tmp/8f4fjqbJwm line 1␤␤»

[15:02] <lizmat> m: sub a(&c) { gather { take 42; take Failure.new} }; a {fail}  # much better error

[15:02] <camelia> rakudo-moar 4f046d: OUTPUT«Failed␤  in block <unit> at /tmp/QRlBxHshkm line 1␤␤Actually thrown at:␤  in block  at /tmp/QRlBxHshkm line 1␤␤»

[15:03] <lizmat> jnthn TimToady : my point being is that it shouldn't make a difference whether a "take" has been done inside a gather on how a "fail" is handled

[15:04] <lizmat> and I *think* we can fix this by always "take"ing a fail inside a gather

[15:29] <TimToady> we would have to know that lexotically or dynamically

[15:47] <TimToady> on the Int vs Rat issue, I'd just note that we *can* represent Inf in Rat with 1/0 or so, so maybe inconsistent is okay

[15:47] <TimToady> (and -Inf with -1/0)

[15:47] <TimToady> yeah, I know that's mathematically wrongish some of the time, but we're just talking about conventional values

[15:48] <TimToady> and NaN could even be represented with 0/0

[15:48] <TimToady> m: say 1/0

[15:48] <camelia> rakudo-moar 4f046d: OUTPUT«Attempt to divide 1 by zero using div␤  in block <unit> at /tmp/76tvEuFgM_ line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/76tvEuFgM_ line 1␤␤»

[15:48] <TimToady> didn't that used to say Inf?

[15:49] <TimToady> star: say 1/0

[15:49] <camelia> star-m 2016.01: OUTPUT«Attempt to divide 1 by zero using div␤  in block <unit> at /tmp/1b6Iwx_nu3 line 1␤␤Actually thrown at:␤  in block <unit> at /tmp/1b6Iwx_nu3 line 1␤␤»

[15:49] <TimToady> mebbe not

[15:49] <TimToady> m: say <1/0>.Num

[15:49] <camelia> rakudo-moar 4f046d: OUTPUT«Inf␤»

[15:49] <TimToady> that's what I was thinking

[15:49] <TimToady> m: say <-1/0>.Num

[15:49] <camelia> rakudo-moar 4f046d: OUTPUT«-Inf␤»

[15:49] <TimToady> m: say <0/0>.Num

[15:49] <camelia> rakudo-moar 4f046d: OUTPUT«Inf␤»

[15:50] <TimToady> that one should be NaN

[15:50] <TimToady> but we could stringify/gist those the same way

[15:51] <TimToady> then our policy could be, if you want an Int that supports ±Inf and NaN, use Rat instead

[15:51] <TimToady> in other words, don't make Rat consistent with Int, make it consistent with Num

[15:52] <geekosaur> that makes a lot more sense than trying to force those onto a type that doesn't support them

[15:53] <TimToady> Rat is sort of a lazy Num, really, especially since it can autopromote to Num anyway

[15:53] <TimToady> so I think we should just extend that to Str/gist

[15:55] <TimToady> I suppose we could even go so far as to promote to Num as soon as we notice the 0 in the denominator

[15:56] <TimToady> then other things besides Str/gist would perhaps work more consistently too

[18:12] <dalek> roast: ca3abde | usev6++ | integration/weird-errors.t:

[18:12] <dalek> roast: Fudge test for JVM, related to RT #128123

[18:12] <dalek> roast: review: https://github.com/perl6/roast/commit/ca3abdefb1

[19:55] <dalek> roast: 4e8b2e0 | LLFourn++ | / (4 files):

[19:55] <dalek> roast: Tests for RT #128156

[19:55] <dalek> roast: review: https://github.com/perl6/roast/commit/4e8b2e02e7
