[07:03] <[Tux]> This is Rakudo version 2016.08.1-48-gf2df2c5 built on MoarVM version 2016.08

[07:03] <[Tux]> csv-ip5xs       10.233

[07:03] <[Tux]> test            15.488

[07:03] <[Tux]> test-t           7.439

[07:03] <[Tux]> csv-parser      16.548

[07:03] <[Tux]> rm -rf /tmp/*-p5helper.so

[07:03] <[Tux]> (sorry 'bout that last line)

[07:27] * lizmat wonders how simple https://simple-regex.com would be in Perl 6

[07:27] <lizmat> breakfast&

[07:47] <nine> Shameless repost of #perl6-toolchain material: https://github.com/perl6/toolchain-bikeshed/blob/master/build.md

[08:15] <stmuk_> it might be worth analysing the Build.pm files currently in the ecosystem

[08:16] <arnsholt> nine: I think I'd argue for the run parameter accepting a list as well

[08:16] <stmuk_> I suspect many might resemble https://github.com/perl6/doc/blob/master/Build.pm and basically only copy files in place

[08:17] <nine> stmuk_: yes, already started doing that

[08:18] <stmuk_> nine++ # one step ahead

[08:20] <nine> stmuk_: I do hope that actually no other Build.pm file does what doc's does. Because doc's makes a whole lot of flawed assumptions. Like into which repo it's going to be installed. That this repo is a Repository::Locally at least. That the repo doesn't have a doc directory. That the repo is writable.

[08:20] <nine> It's actually no custom build step at all. It's installation.

[08:22] <nine> stmuk_: I do hope you know that I mean well by criticising :)

[08:23] <stmuk_> :)

[08:23] <nine> p6doc certainly shows that we are still missing a lot of infrastructure. And that I didn't give documentation any thought at all :/

[08:26] <nine> stmuk_: you could actually install the shipped .pod6 files as resources and access them via %?RESOURCES. That way you can get rid of a lot of poking in CURI's internals.

[08:27] <stmuk_> the docs are basically just S22 I think?

[08:29] <nine> S22 doesn't seem to mention docs at all?

[08:30] <stmuk_> I meant general %?RESOURCES docs. I've seen no info about installing .pod6 at all

[08:32] <nine> Yes. You could put them into resources/docs/ and add them to the META.info's resources list: "resources": ["doc/Language/5to6-nutshell.pod6", ...]

[08:35] <nine> Then access it via %?RESOURCES<doc><Language><5to6-nutshell.pod6>

[08:35] <stmuk_> would I have to list each file explicitly? all 354?

[08:36] <nine> Yes. But I'm quite sure you can script that :)

[08:38] <stmuk_> I'm prefer being able to put directories or wildcards in

[08:39] <stmuk_> dynmically generating a META6.json each time a file is added means the file gets very long and missed entries highly likely

[08:39] <stmuk_> git commit -m"sorry I forgot to update META6.json again"

[08:42] <nine> Possible. But right now you do have a couple of bugs in your Build.pm and p6doc. All of which would be fixed by moving to RESORUCES.

[08:45] <stmuk_> the core p6doc files are probably a special case anyway due to the number of files

[08:48] <stmuk_> the p6doc problem was basically caused by moving the .pod from under 'lib' to 'doc' in the source tree

[08:50] <nine> So far 46 commits added files to the doc/ directory

[09:03] <stmuk_> cd doc/doc && find . -type f | wc -l

[09:03] <stmuk_> 296

[09:06] <nine> A commit can add multiple files

[09:07] <nine> I used git log -p doc | egrep -- '^commit|--- /dev/null' | uniq | grep null | wc -l

[09:09] <stmuk_> anyway my point was that p6doc contains a large number of .pod6 files and is likely to have a large number added

[09:10] <stmuk_> maybe an external MANIFEST file would be better?

[09:11] <lizmat> commute&

[09:18] <nine> stmuk_: that would need updating, too?

[09:20] <stmuk_> true

[09:22] <stmuk_> anyway quickly clicking through modules.perl6.org suggests most people don't use Build.pm and its mostly used to check presence of libfoo.so or .ddl so p6doc is probably a special case

[09:34] <stmuk_> and most aren't using .pod6 but markdown anyway

[10:23] <Zoffix> m: my $t = BEGIN now; sub infix:<♥> ($,$) {}; sub infix:<♥♥> ($,$) {}; sub infix:<♥♥♥> ($,$) {}; sub infix:<♥♥♥♥> ($,$) {}; sub infix:<♥♥♥♥♥> ($,$) {}; say now - $t

[10:23] <camelia> rakudo-moar f2df2c: OUTPUT«1.9912729␤»

[10:23] <Zoffix> nine, I'm unsure why the Color ops gave you that result... custom ops still seem slow, and I recall people telling me they won't ever be fast because we have to mutate the grammar for them

[10:25] <nine> Zoffix: is it possible that precomp helps there?

[10:26] <Zoffix> Ohhh

[10:26] <Zoffix> Yeah, that's probably it.

[10:26] <Zoffix> (they also are now fast on my box). nine++

[10:26] <dalek> nqp: 7a3bbc1 | (Pawel Murias)++ | tools/build/ (2 files):

[10:26] <dalek> nqp: [js] Add a .nqp suffix on a intermediate build target.

[10:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7a3bbc1a85

[10:26] <dalek> nqp: 1b70b2a | (Pawel Murias)++ | src/vm/js/HLL/Backend.nqp:

[10:26] <dalek> nqp: [js] Fix the missing v8-profiler error message.

[10:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1b70b2a391

[10:26] <dalek> nqp: 84c5f40 | (Pawel Murias)++ | tools/build/ (2 files):

[10:26] <dalek> nqp: [js] Fix typo.

[10:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/84c5f40fab

[10:26] <dalek> nqp: 8c76bca | (Pawel Murias)++ | / (8 files):

[10:26] <dalek> nqp: [js] Build a nqp-js-on-js package rather then stuffing stuff into node_modules.

[10:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8c76bca131

[10:27] <Zoffix> Used to be 20 seconds, according to the module docs :) Now just fraction of a second

[10:27] * Zoffix passes around a round of ++

[12:19] <gfldex> m: enum E(<a b c>); dd E.keys;

[12:19] <camelia> rakudo-moar f2df2c: OUTPUT«()␤»

[12:19] <gfldex> that feels wrong

[12:22] <jnthn> m: enum E(<a b c>); dd E.enums.keys

[12:22] <camelia> rakudo-moar f2df2c: OUTPUT«("a", "c", "b").Seq␤»

[12:25] <gfldex> m: enum E(<a b c>); dd E::.keys;

[12:25] <camelia> rakudo-moar f2df2c: OUTPUT«("a", "c", "b").Seq␤»

[12:26] <gfldex> m: enum E(<a b c>); dd E::.values;

[12:26] <camelia> rakudo-moar f2df2c: OUTPUT«(E::a, E::c, E::b).Seq␤»

[12:26] <gfldex> that's what I would suspect .keys to default to

[12:29] <jnthn> Would break the ".keys on a type object returns the empty list" consistency we have now, though

[12:30] <gfldex> enums are special in that they are always type objects and never turn into an instance

[12:31] <jnthn> uhh

[12:31] <jnthn> Enum values are instances of the enum type

[12:31] <gfldex> m: enum E(<a b c>); dd E ~~ Enumeration;

[12:31] <camelia> rakudo-moar f2df2c: OUTPUT«Bool::False␤»

[12:31] <jnthn> m: enum E <a b c>; say a.WHAT

[12:31] <camelia> rakudo-moar f2df2c: OUTPUT«(E)␤»

[12:31] <gfldex> and that looks buggy

[12:31] <jnthn> m: enum E <a b c>; say a ~~ Enumeration

[12:31] <camelia> rakudo-moar f2df2c: OUTPUT«False␤»

[12:32] <jnthn> Consistent at least...

[12:32] <jnthn> m: enum E <a b c>; say a.^roles

[12:32] <camelia> rakudo-moar f2df2c: OUTPUT«Method 'roles' not found for invocant of class 'Perl6::Metamodel::EnumHOW'␤  in block <unit> at <tmp> line 1␤␤»

[12:32] <gfldex> how do I tell that a type object is an enum with Rakudo?

[12:32] <jnthn> Oh, same as you tell if a class is a class etc: match against hte meta-type

[12:32] <jnthn> m: enum E < a b c >; say E.HOW ~~ Metamodel::EnumHOW

[12:32] <camelia> rakudo-moar f2df2c: OUTPUT«True␤»

[12:33] <gfldex> ~~ Enumeration looks correcter :)

[12:34] <jnthn> Why? There's no ~~ Class or ~~ Role or ~~ Subset.

[12:34] <jnthn> That's just confusing space and meta-space.

[12:36] <timotimo> don't drop your pins on my territory!

[12:37] <moritz> I never quite understood what role Enumeration played anyway

[12:37] <jnthn> moritz: Place to shove common methods that an enumeration type has, really

[12:38] <moritz> jnthn: then I don't understand why the enum type type-checks false against Enumeration

[12:38] <moritz> jnthn: for example GrammarHOW adds Grammar as a default parent class; I'd expect a similar mechanism for GrammarHOW

[12:39] <moritz> but it seems that instead Perl6::Action calls trait_mod:<does> to fudge in Enumeration

[12:39] <jnthn> moritz: Yeah, we fudge it in at the moment. It's a kind of "do we really want to do it this way?" hedge :)

[12:39] <timotimo> you mean EnumHOW :)

[12:40] <moritz> yes

[12:40] * moritz ConfusedHOW

[12:40] <jnthn> I don't believe S12 or any of the design docs mention an Enumeration role

[12:41] <jnthn> OTOH, S12's enums design has always been kinda a wish list of things enums should do rather than a model for how they should be implemented. Granted it's better now than it has been at times in the past... :)

[12:41] <gfldex> m: enum E(<a b c>); sub f($e where * ~~ Metamodel::EnumHOW){ say 'oi' }; f E

[12:41] <camelia> rakudo-moar f2df2c: OUTPUT«Constraint type check failed for parameter '$e'␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:41] <jnthn> If we decide we're keeping it done with an Enumeration role then we should make it answer True there and make .^roles work, anyways.

[12:41] <jnthn> where .HOW ~~

[12:42] <gfldex> m: enum E(<a b c>); sub f(Metamodel::EnumHOW §e){ say 'oi' }; f E

[12:42] <camelia> rakudo-moar f2df2c: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> num E(<a b c>); sub f(Metamodel::EnumHOW⏏ §e){ say 'oi' }; f E␤    expecting any of:␤        constraint␤        formal parameter␤»

[12:42] <gfldex> m: enum E(<a b c>); sub f(Metamodel::EnumHOW $e){ say 'oi' }; f E

[12:42] <camelia> rakudo-moar f2df2c: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Calling f(E) will never work with declared signature (Perl6::Metamodel::EnumHOW $e)␤at <tmp>:1␤------> b f(Metamodel::EnumHOW $e){ say 'oi' }; ⏏f E␤»

[12:42] <gfldex> m: enum E(<a b c>); sub f($e where *.HOW ~~ Metamodel::EnumHOW){ say 'oi' }; f E

[12:42] <camelia> rakudo-moar f2df2c: OUTPUT«Constraint type check failed for parameter '$e'␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:42] <gfldex> m: enum E(<a b c>); sub f($e where .HOW ~~ Metamodel::EnumHOW){ say 'oi' }; f E

[12:42] <camelia> rakudo-moar f2df2c: OUTPUT«oi␤»

[12:43] <gfldex> it's one of those "you need to know that to guess it" things (also ENODOC)

[12:44] <gfldex> all I wanted to do was to write a short blog post but instead I learned new things :(

[12:45] <gfldex> usecase in case you wonder: https://gist.github.com/ede35a3da3f2c0cb517ca478f2efea7b

[13:16] <dalek> rakudo/nom: 76a86d4 | MasterDuke17++ | src/core/Exception.pm:

[13:16] <dalek> rakudo/nom: Fix RT #118607

[13:16] <dalek> rakudo/nom:

[13:16] <dalek> rakudo/nom: Give the same suggestion for a sub redeclaration as for a method.

[13:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/76a86d4efa

[13:16] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=118607

[13:16] <dalek> rakudo/nom: 8e5a1aa | MasterDuke17++ | src/core/Exception.pm:

[13:16] <dalek> rakudo/nom: Make sure message is returned when $.what is not a routine

[13:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8e5a1aab7e

[13:16] <dalek> rakudo/nom: 5dba970 | (Zoffix Znet)++ | src/core/Exception.pm:

[13:16] <dalek> rakudo/nom: Merge pull request #854 from MasterDuke17/RT118607

[13:16] <dalek> rakudo/nom:

[13:20] <dalek> rakudo/nom: 216e3aa | (Brock Wilcox)++ | src/Perl6/Compiler.nqp:

[13:20] <dalek> rakudo/nom: Remove legacy fallback repl methods

[13:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/216e3aae13

[13:20] <dalek> rakudo/nom: 1d2351f | (Brock Wilcox)++ | src/core/REPL.pm:

[13:20] <dalek> rakudo/nom: Extract toplevel control flag check for consistency

[13:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1d2351fdd8

[13:20] <dalek> rakudo/nom: 68443fe | (Zoffix Znet)++ | src/ (2 files):

[13:20] <dalek> rakudo/nom: Merge pull request #853 from awwaiid/repl-cleanup

[13:20] <dalek> rakudo/nom:

[13:20] <dalek> rakudo/nom: REPL Cleanup

[13:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/68443febef

[14:50] <travis-ci> Rakudo build passed. Zoffix Znet 'Merge pull request #854 from MasterDuke17/RT118607

[14:50] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/156218564 https://github.com/rakudo/rakudo/compare/f2df2c53cb73...5dba970cadb9

[15:50] <MetaZoffix> IMO we should have some sort of "policy" for RFC tickets; specifically, what would be the criteria for closing them when the proposed feature has NOT been implemented. There are 55 RFCs right now and I see some going back to 2009 http://perl6.fail/t/RFC

[15:51] <MetaZoffix> I like Mojolicious's way, where users are actively reminded to give feedback on RFCs and if none happens the RFC is closed simply due to lack of interest.

[15:54] <mst> "closed without prejudice" is a good approach, I think

[15:54] <mst> Mojo is excellent at the 'closed' part and variable on the rest

[15:54] <mst> but I can hardly claim superiority on the front of 'level of cranky' so ;)

[15:56] <[Coke]> I am strongly opposed to closing tickets because they're old and we haven't commented on them.

[15:56] <[Coke]> might work for a business product, but in our case, it's likely that none of our volunteers have ever reviewed it.

[15:58] <MetaZoffix> [Coke]: but what if they have? At which point can an RFC be closed?

[15:58] <[Coke]> if the dev team says "nope, ain't doing it"

[15:58] <[Coke]> or "yes, we did it."

[15:58] <MetaZoffix> What's a "team" in that sense?

[15:59] <JimmyZ> who commit the most core code

[15:59] <JimmyZ> :P

[15:59] <[Coke]> are you asking who the dev team is, or which subset of the dev team is sufficient to decide?

[16:00] <MetaZoffix> [Coke]: how many dev team members are sufficient for a decision that an RFC ticket can be closed.

[16:00] <nine> Usually decisions are made by whoever feels confident enough to make one.

[16:00] <[Coke]> because those are both great questions. Is it a language decision? then @LARRY should be involved. is it an implementation detail ? maybe different people.

[16:00] <MetaZoffix> And I have a concrete example that I considered for an hour and wrote my feedback that is a -1 vote: https://rt.perl.org/Ticket/Display.html?id=129131

[16:00] <[Coke]> MetaZoffix: I'm not making that decision.

[16:01] <MetaZoffix> Who are @LARRY? I know there's Ti mToady and pm ichaud. Anyone else?

[16:02] <[Coke]> (about what's the minimum)

[16:02] <[Coke]> as for your ticket, which is so new I had not seen it until you mentioned it here, I agree with your notes.

[16:02] <[Coke]> Is pmichaud still on the list? Ok.

[16:03] <MetaZoffix> ¯\_(ツ)_/¯

[16:03] <[Coke]> Damian might want to be on that list.

[16:03] <[Coke]> maybe jnthn

[16:04] <[Coke]> maybe a bunch of us. I dunno. This dev team hasn't historically worked in a hierarchy "THIS IS HOW THINGS ARE DONE" way.

[16:04] <[Coke]> s/chy/chical/

[16:04] <MetaZoffix> heh

[16:04] <nine> MetaZoffix: FWIW I'd +1 rejecting the ticket

[16:05] <[Coke]> Zoffix: you didn't cc the mailing list on your well thought out reply on 129131

[16:05] <[Coke]> so I doubt any of the dev team would have even known about it if you hadn't dropped the link here.

[16:05] <MetaZoffix> [Coke]: I think I did, I just hit "Reply". I've replied and then joined IRC, so maybe it just hasn't propagated yet.

[16:06] <[Coke]> no. it would say on the message if you had cc'd the list.

[16:06] <[Coke]> did you check the box?

[16:06] <[Coke]> "

[16:06] <[Coke]> Click to Toggle Cc of [email@hidden.address]
[16:06] <[Coke]> you have to click that, or it's a reply just in the ticketing system.

[16:07] <MetaZoffix> For me, it's pre-ticked, but it's not a Cc, but a Bcc: http://i.imgur.com/koYT9Ux.png

[16:07] <[Coke]> ... no. that's not ticketd.

[16:07] <[Coke]> you have to click it.

[16:07] <[Coke]> it's a link with a <li> in front of it.

[16:08] <[Coke]> so when I said 'check the box' above, I mis-spoke, apologies.

[16:08] <[Coke]> ...

[16:08] <[Coke]> oh, you're showing even higher above.

[16:08] <MetaZoffix> Oh, down below... I thought the one on the top left box was enough

[16:08] <MetaZoffix> Hm, now that you mention it, I don't think my replies ever show up on the mailing list, but I always assumed it was because it was detecting that it was *me* replying so it didn't send an email to me

[16:08] <[Coke]> ... maybe? I have always had to click the box.

[16:09] <[Coke]> *the link*(

[16:09] <MetaZoffix> I'll be clicking the link from now on.

[16:09] <[Coke]> I don't see anythign special about that ticket where I would have hope that the BCC worked.

[16:16] <[Coke]> thanks for pointing that out though, I don't think I ever saw that actual checkbox!

[16:23] <[Coke]> new roast ticket: https://github.com/perl6/roast/issues/147

[16:24] * [Coke] looks forward to zoffix's ticket dashboard incorporating /spec /roast /nqp /MoarVM et al.

[16:24] <[Coke]> er, etc.

[16:25] <MetaZoffix> :)

[16:27] <timotimo> oh Rt you flaming pile of garbage :)

[16:28] <[Coke]> timotimo: serious alternates welcome at https://rt.perl.org/Ticket/Display.html?id=128520

[16:37] <timotimo> i just mean the "click here to toggle bcc" thign

[16:37] <timotimo> potentially that's something our admins hacked in for us?

[16:40] <timotimo> other than this little cosmetic thing, i have no "proper"/founded criticism

[16:40] <timotimo> hm. i got thrown onto the "front page"/"dashboard"/"whatever" after i used "log in as another user" from the ticket view

[16:40] <timotimo> that was annoying. i think it should have led me straight back to the ticket i was viewing

[16:41] <timotimo> but i don't have to login very often, so i don't have to do this dance much

[16:46] * lizmat waves from Ljubljana

[17:06] <dalek> roast: 44779ac | MasterDuke17++ | S04-declarations/multiple.t:

[17:06] <dalek> roast: Test for RT #118607

[17:06] <dalek> roast:

[17:06] <dalek> roast: Requires Rakudo PR #854 (https://github.com/rakudo/rakudo/pull/854).

[17:06] <dalek> roast: review: https://github.com/perl6/roast/commit/44779aca08

[17:06] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=118607

[17:06] <dalek> roast: 27f56c1 | MasterDuke17++ | S04-declarations/multiple.t:

[17:06] <dalek> roast: Another test for the fix for RT #118607

[17:06] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=118607

[17:06] <dalek> roast:

[18:18] <MasterDuke> r: say (0 => 1, 1 => 0).max(:by(*.value))

[18:18] <camelia> rakudo-moar 68443f, rakudo-jvm cd19db: OUTPUT«1 => 0␤»

[18:18] <MasterDuke> r: say (0 => 1, 1 => 0).max(*.value)

[18:18] <camelia> rakudo-moar 68443f, rakudo-jvm cd19db: OUTPUT«0 => 1␤»

[18:20] <MasterDuke> r: say List.can("max")[0].signature.perl

[18:20] <camelia> rakudo-moar 68443f, rakudo-jvm cd19db: OUTPUT«:($: | is raw)␤»

[18:20] <MasterDuke> i was looking at RT #115758, but it's pretty old

[18:20] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=115758

[18:21] <MasterDuke> r: say max :by(*.value), { 0 => 1, 1 => 0 }

[18:21] <camelia> rakudo-moar 68443f, rakudo-jvm cd19db: OUTPUT«0 => 1␤»

[18:25] <MasterDuke> r: say (0 => 1, 1 => 0).max(:foo(*.value))

[18:25] <camelia> rakudo-moar 68443f, rakudo-jvm cd19db: OUTPUT«1 => 0␤»

[18:25] <MasterDuke> r: say max :foo(*.value), { 0 => 1, 1 => 0 }

[18:25] <camelia> rakudo-jvm cd19db: OUTPUT«Unexpected named argument 'foo' passed␤  in block <unit> at <tmp> line 1␤␤»

[18:25] <camelia> ..rakudo-moar 68443f: OUTPUT«Unexpected named parameter 'foo' passed␤  in block <unit> at <tmp> line 1␤␤»

[18:26] <MasterDuke> huh, i also just noticed that jvm said 'named argument' and moar said 'name parameter'

[18:31] <MasterDuke> git grep -i 'named parameter' | wc -l    # 17

[18:31] <MasterDuke> git grep -i 'named argument' | wc -l    # 18

[18:40] <MasterDuke> does anybody care one way or the other? i feel the wording should be the same between the backends for the same error, but what about making them all 'argument' or all 'parameter'?

[18:46] <nine> MasterDuke: http://design.perl6.org/S99.html#parameter

[18:50] <MasterDuke> nine: if i'm interpreting that correctly, 'parameters' are part of a signature, and 'arguments' are what a block/sub/etc are called with?

[18:50] <MetaZoffix> yeah

[18:51] <MasterDuke> in that case, i'd say the jvm error is incorrectly worded

[18:51] <nine> yes

[18:58] <dalek> rakudo/raccoon: a54cb0f | niner++ | lib/Distribution/Builder.pm:

[18:58] <dalek> rakudo/raccoon: fixup "First steps towards a declarative build system for modules"

[18:58] <dalek> rakudo/raccoon: review: https://github.com/rakudo/rakudo/commit/a54cb0fc8f

[18:58] <dalek> rakudo/raccoon: defd764 | niner++ | / (4 files):

[18:58] <dalek> rakudo/raccoon: Support different build systems

[18:58] <dalek> rakudo/raccoon:

[18:58] <dalek> rakudo/raccoon: Rename Distribution::Builder to Distribution::Builder::MakeFromJSON and add

[18:58] <dalek> rakudo/raccoon: Distribution::Builder as a role for build systems.

[18:58] <dalek> rakudo/raccoon: The optional "builder" key in the META data is used to select the build system.

[18:58] <dalek> rakudo/raccoon: review: https://github.com/rakudo/rakudo/commit/defd764e04

[18:59] <MetaZoffix> I guess it can be read both ways... To me 'argument' looks more correct, since the error refers to the place where I'm passing some arguments to a thing

[19:00] <MasterDuke> oops, that's what i meant

[19:00] <MasterDuke> read them backwards

[19:55] <MasterDuke> masak, moritz: do you think RT #115758 is still valid?

[19:55] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=115758

[20:05] <[Coke]> bah. have perl6 code running at $dayjob that just gave me:

[20:05] <[Coke]> Use of uninitialized value of type Any in string context

[20:05] <[Coke]> Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in method dispatch:<.?> at /usr/share/perl6/runtime/CORE.setting.moarvm line 1

[20:09] <timotimo> uh, that's not a good backtrace

[20:11] <moritz> try running with -ll-exception

[20:12] <[Coke]> thought I'd need ll exception to get a trace that mentioned the CORE.

[20:14] <masak> MasterDuke: yes, I think it's still valid. unless something has happened that's outside of the scope of what I'm reading in that ticket. but I know of no such thing.

[22:29] <dalek> rakudo/nom: b1c444f | TimToady++ | src/core/metaops.pm:

[22:29] <dalek> rakudo/nom: Calling unary on reduce needs arity, not count

[22:29] <dalek> rakudo/nom:

[22:29] <dalek> rakudo/nom: For a reduction with a single argument, we want to look to see if the operator

[22:29] <dalek> rakudo/nom: in question has a unary interpretation, and call that.  Unfortunately, there

[22:29] <dalek> rakudo/nom: are functions that can handle a unary but whose count is larger than 1,

[22:29] <dalek> rakudo/nom: so would not be called.  Now we check .arity instead, which can still be 1

[22:29] <dalek> rakudo/nom: (or 0) for such functions.  (We don't test for exactly 1 since most functions

[22:29] <dalek> rakudo/nom: with .arity of 0 have a .count greater than 0, so allow one arg.)

[22:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b1c444f062

[22:31] <timotimo> oh, is that for, like, reduce with ++?

[22:32] <timotimo> i could imagine using .succ with produce could be a bit sugary-er than the ... operator

[22:39] <TimToady> well, ++ is not an infix, and reduce only works on infixes

[22:39] <yoleaux2> 23 Aug 2016 19:03Z <[Coke]> TimToady: newish sink ticket at RT #128692

[22:39] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128692

[22:40] <TimToady> but if an infix has a degenerate case with 1 argument, it can now return what the 1-arg form produces, instead of always returning the 1 argument

[22:41] <TimToady> [Z] still doesn't invert a single list, however, and might never, given it conflicts with one-arg semantics

[22:41] <timotimo> oh

[22:42] <TimToady> trouble is, zip only happens to work as inversion if the arrays in question are not ragged

[22:43] <timotimo> amusingly enough, it still works if the arrays in question are tattered
