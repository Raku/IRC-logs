[00:01] <Zoffix> Opened a ticket for someone smarter to figure it out: https://rt.perl.org/Ticket/Display.html?id=129334

[00:09] <dalek> roast: 2403b99 | (Zoffix Znet)++ | S32-exceptions/misc.t:

[00:09] <dalek> roast: Remove trailing whitespace

[00:09] <dalek> roast: review: https://github.com/perl6/roast/commit/2403b99483

[00:09] <dalek> roast: 29bb932 | (Zoffix Znet)++ | S32-exceptions/misc.t:

[00:09] <dalek> roast: [coverage] Cover Backtrace.flat

[00:09] <dalek> roast: review: https://github.com/perl6/roast/commit/29bb932c0c

[01:41] <dalek> roast: 692343c | (Zoffix Znet)++ | S32-exceptions/misc.t:

[01:41] <dalek> roast: [coverage] Backtrace.[concise|summary]

[01:41] <dalek> roast: review: https://github.com/perl6/roast/commit/692343c3b4

[02:00] <Zoffix> *sigh* Yahoo got hacked.

[02:01] <Zoffix> The services I (apparently) use or used get hacked so often I get sick of receiving breach notifications.... Adobe, Ubuntu forums, Warframe, LinkedIn, now Yahoo

[03:49] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'We can also use Enums for native array shapes

[03:49] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/162032098 https://github.com/rakudo/rakudo/compare/e51cc333dcde...553cedb679f0

[03:49] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually

[03:54] <MasterDuke> t/04-nativecall/13-union.t

[06:16] <[Tux]> This is Rakudo version 2016.09-30-g553cedb built on MoarVM version 2016.09

[06:16] <[Tux]> csv-ip5xs        9.185

[06:16] <[Tux]> test            15.983

[06:16] <[Tux]> test-t           6.927

[06:16] <[Tux]> csv-parser      17.540

[07:58] <dalek> nqp: ac1bf38 | (Pawel Murias)++ | t/nqp/095-cclass.t:

[07:58] <dalek> nqp: Avoid harcoding tedious to manualy calculate data in the cclass tests.

[07:58] <dalek> nqp:

[07:58] <dalek> nqp: This prepares for it's expansion.

[07:58] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ac1bf383f1

[08:48] <arnsholt> m: use nqp; grammar Opp { method EXPR() { my $here = self.'!cursor_start_cur'(); my int $pos = nqp::getattr_i($here, Cursor, '$!from'); } }; Opp.parse("5", :rule<EXPR>)

[08:48] <camelia> rakudo-moar 553ced: OUTPUT«P6opaque: no such attribute '$!from' in type Cursor when trying to get a value␤  in method EXPR at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[08:48] <arnsholt> Should that work, or am I barking up the wrong tree?

[08:50] <pmurias> arnsholt: $!from is defined in NQPCursorRole

[08:50] <arnsholt> Think I tried that too

[08:51] <pmurias> m: use nqp; grammar Opp { method EXPR() { my $here = self.'!cursor_start_cur'(); my int $pos =  nqp::getattr_i($here, NQPCursorRole, '$!from'); } }; Opp.parse("5", :rule<EXPR>)

[08:51] <camelia> rakudo-moar 553ced: OUTPUT«P6opaque: no such attribute '$!from' in type NQPCursorRole when trying to get a value␤  in method EXPR at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[08:51] <arnsholt> m: use nqp; grammar Opp { method EXPR() { my $here = self.'!cursor_start_cur'(); my int $pos = nqp::getattr_i($here, NQPCursorRole, '$!from'); say $pos } }; Opp.parse("5", :rule<EXPR>)

[08:51] <camelia> rakudo-moar 553ced: OUTPUT«P6opaque: no such attribute '$!from' in type NQPCursorRole when trying to get a value␤  in method EXPR at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[08:51] <arnsholt> But that's a role, so doesn't that mean the attribute should be looked up from the class it's mixed into, anyways?

[08:52] <arnsholt> The NQP code looks it up via NQPCursor, which is the class the role is mixed into

[08:53] <gfldex> nine: did you came up with a proper solution for your sql-quote problem? It will fail on anything that is interpolated but not a Str. (also I added ENTER/LEAVE to make sure unwrap is actually called)

[08:54] <pmurias> m: use nqp; grammar Opp { method EXPR() { my $here = self.'!cursor_start_cur'(); my int $pos =  nqp::getattr_i($here, Cursor, '$!from'); } }; Opp.parse("5", :rule<EXPR>)

[08:54] <camelia> rakudo-moar 553ced: OUTPUT«P6opaque: no such attribute '$!from' in type Cursor when trying to get a value␤  in method EXPR at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[08:55] <pmurias> m: use nqp; grammar Opp { method EXPR() { my $here = self.'!cursor_start_cur'(); my int $pos =  nqp::getattr_i(nqp::decont($here), Cursor, '$!from'); } }; Opp.parse("5", :rule<EXPR>)

[08:55] <camelia> rakudo-moar 553ced: OUTPUT«Method 'MATCH' not found for invocant of class 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[08:56] <pmurias> arnsholt: ^^ nqp::decont makes it "work"

[08:56] <arnsholt> Oooooh, of course

[08:56] <arnsholt> The value passed to the op wasn't a cursor at all, it was a Scalar

[08:57] <arnsholt> pmurias++ # Thanks!

[09:14] <arnsholt> There we go!

[09:14] * arnsholt is on track for having an advent calendar post this year =)

[09:16] <dalek> rakudo/nom: 2679230 | MasterDuke17++ | src/Perl6/Grammar.nqp:

[09:16] <dalek> rakudo/nom: Error if No/Nl chars are used in colon pairs/radix

[09:16] <dalek> rakudo/nom:

[09:16] <dalek> rakudo/nom: Colon pairs and radix bases can be made with Nd characters, but not No

[09:16] <dalek> rakudo/nom: or Nl characters.

[09:16] <dalek> rakudo/nom:

[09:16] <dalek> rakudo/nom: Fixes RT #129319

[09:16] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129319

[09:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2679230fc1

[09:16] <dalek> rakudo/nom: 3609ffe | lizmat++ | src/Perl6/Grammar.nqp:

[09:16] <dalek> rakudo/nom: Merge pull request #883 from MasterDuke17/RT129319

[09:16] <dalek> rakudo/nom:

[09:16] <dalek> rakudo/nom: Error if No/Nl chars are used in colon pairs/radix

[09:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3609ffe291

[09:25] <lizmat> Files=1138, Tests=53029, 226 wallclock secs (12.70 usr  3.64 sys + 1375.62 cusr 130.53 csys = 1522.49 CPU)

[09:29] <gfldex> m: https://gist.github.com/766fbf722565b0d5418ace5e245aa31f

[09:29] <camelia> rakudo-moar 553ced: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> https:⏏//gist.github.com/766fbf722565b0d5418ace␤    expecting any of:␤        colon pair␤»

[09:29] <gfldex> m: http://gist.github.com/766fbf722565b0d5418ace5e245aa31f

[09:29] <camelia> rakudo-moar 553ced: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> http:⏏//gist.github.com/766fbf722565b0d5418ace␤    expecting any of:␤        colon pair␤»

[09:30] <gfldex> is camelia broken or am I doing it wrong?

[09:32] <gfldex> also wrapping Mu::Stringy got very odd results (that i wanted to show in that gist)

[09:35] <dalek> rakudo/nom: e12ebb9 | lizmat++ | src/core/Backtrace.pm:

[09:35] <dalek> rakudo/nom: Fix for #129334, as suggested by Zoffix++

[09:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e12ebb9286

[09:35] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129334

[09:41] <gfldex> .tell nine better-ish version of your sql interpolation guard https://gist.github.com/6be94a8e6f86c16ea5fdfd6b1b4e6ba3

[09:41] <yoleaux2> gfldex: I'll pass your message to nine.

[09:44] <lizmat> gfldex: is there any reason your blog posts don't show on https://www.reddit.com/r/perl6 ?

[09:45] <lizmat> such as https://gfldex.wordpress.com/2016/09/21/are-these-your-keys/

[09:45] <lizmat> and https://gfldex.wordpress.com/2016/09/22/keys-are-optional/ ?

[09:45] <gfldex> they don't show because nobody posts them :)

[09:45] <lizmat> ah, well maybe someone will now  :-)

[09:46] <lizmat> fwiw, I don't have a reddit account (nor plan to get one)

[09:46] <gfldex> i have no resentments towards reddit tho

[09:46] <gfldex> i will do the clicking then

[09:47] <gfldex> also ENODOC(WrapHandle)

[09:56] <nine> gfldex: ah, yes. A known issue. Didn't have the time to think about how to handle non-Str values as I had the idea for the lighning talk at lunch and was on stage 3 hours later :)

[09:56] <yoleaux2> 09:41Z <gfldex> nine: better-ish version of your sql interpolation guard https://gist.github.com/6be94a8e6f86c16ea5fdfd6b1b4e6ba3

[09:59] <gfldex> nine: i shall think about your problems faster next time :->

[09:59] <nine> gfldex: I know of the talk generating a longing for Perl 6 in at least one member of the audience, so I'd say it accomplished its mission :)

[10:00] <nine> gfldex: but the whole thing went so well, that I'm actually tempted to pursue it further and see how well it would actually work for more complicated situations

[10:01] <nine> With operators a my @results = select * from $resultset where "foo=$foo and bar=$bar or baz = 1"; is actually in reach

[10:01] <nine> Oh, it's this of course: my @results = select * from $resultset where {"foo=$foo and bar=$bar or baz = 1"};

[10:02] <gfldex> nine: prease provide links to the fruits of your type-safety efforts. I need that stuff too.

[10:03] <nine> You mean future efforts?

[10:04] <gfldex> yes

[10:15] <travis-ci> Rakudo build passed. lizmat 'Merge pull request #883 from MasterDuke17/RT129319

[10:15] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/162140277 https://github.com/rakudo/rakudo/compare/553cedb679f0...3609ffe29126

[10:36] * Zoffix wonders if regular .map work just fine on Backtrace

[10:36] <Zoffix> and .first. I'm reading the code and I think the junction-for-matcher bug is in there too

[10:38] <Zoffix> m: ^10 .map(*+1, :label('what'), item('is-this')).say

[10:38] <camelia> rakudo-moar e12ebb: OUTPUT«Cannot resolve caller map(Range: WhateverCode, Str, Str); none of these signatures match:␤    ($: Hash \h, *%_)␤    (\SELF: &block;; :$label, :$item, *%_)␤    (HyperIterable:D $: &block;; :$label, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[10:38] <Zoffix> m: ^10 .map({$_+1}, :label('what'), :item('is-this')).say

[10:38] <camelia> rakudo-moar e12ebb: OUTPUT«(1..^11)␤»

[10:38] <Zoffix> The docs don't say what :label/:item are on regular map, but now Backtrace is a special-case exception and doesn't have them, I think.

[10:40] <Zoffix> m: {{sub foo { die }(); CATCH { default { say .backtrace.first: any *.is-setting, *.is-hidden } }}}

[10:40] <camelia> rakudo-moar e12ebb: OUTPUT«Backtrace::Frame.new(file => "gen/moar/m-CORE.setting", line => 24315, code => method throw (Exception:D $: $bt?, *%_) { #`(Method|61097920) ... }, subname => "throw")␤»

[10:40] <Zoffix> ah, nevermind, it works fine.

[10:41] <Zoffix> s: [], 'map', \({;}, :label)

[10:41] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/e12ebb9/src/core/Any-iterable-methods.pm#L19

[10:45] <Zoffix> m: ^3 .map: :label('MEOW'), { for ^3 { .say; next MEOW if *%%2; }; }

[10:45] <camelia> rakudo-moar e12ebb: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    MEOW used at line 1␤␤»

[10:47] <lizmat> Zoffix: the .first and .map in Backtrace are performance tweaks

[10:48] <Zoffix> Ah

[10:48] <lizmat> look at what Backtrace.list does

[10:48] <Zoffix> lizmat, you're the expert... what are :label and :item on .map? Are those useful just internally, since the for loops get converted to maps?

[10:48] <lizmat> without the specific .map and .first, it would do Backtrace.list.map

[10:48] <psch> m: constant A = Label.new(:name<A>, :1line, :prematch<foo>, :postmatch<bar>); (^5).map({ (^5).map({ .say; last A }).sink }, :label(A)).sink

[10:48] <camelia> rakudo-moar e12ebb: OUTPUT«0␤»

[10:49] <psch> :label is for labels, creation has to be a bit more involved is all

[10:49] <lizmat> Zoffix: yes, :label and :item are for use of map in for

[10:49] <psch> i think :item is single-arg rule related?

[10:49] <Zoffix> thanks

[10:49] <lizmat> psch: I think so too, not sure

[10:49] <lizmat> basically, if set, it will do $list -> ($list,)

[10:55] <lizmat> afk&

[10:57] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Fix for #129334, as suggested by Zoffix++'

[10:57] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/162144408 https://github.com/rakudo/rakudo/compare/3609ffe29126...e12ebb928647

[10:57] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129334

[11:42] <MasterDuke> what does 'dba' mean in the grammar, actions, etc?

[11:43] <psch> "doing business as"

[11:44] <MasterDuke> huh, would not have guessed that

[11:44] <arnsholt> It's what shows up when you get a parse error

[11:58] <DrForr> And in case it doesn't make it here, https://opensource.com/life/16/9/perl-6-features

[12:19] <MasterDuke> how do/can i define a token inside another token? e.g., something like: token outer { token inner { <[ a 1]> }; <inner>+ }

[12:21] <arnsholt> Not sure you can do that

[12:21] <arnsholt> More importantly, why?

[12:21] <MasterDuke> because the inner token is repeated several times

[12:22] <arnsholt> And normal quantification doesn't work?

[12:22] <MasterDuke> not in the '+' sense, but the code is copied

[12:22] <arnsholt> Feels like a very weirdly factored grammar

[12:23] <timotimo> you can define a "my token foobar" inside the grammar

[12:24] <arnsholt> Right, if you just want to prevent inheritance, that'll work

[12:25] <MasterDuke> this is in src/Perl6/Grammar.npq, so i didn't want to just create a new token at the top level,

[12:26] <MasterDuke> but one of the existing tokens has an enumerated character class repeated several times

[12:27] <MasterDuke> and i wanted to see if it was possible to pull that out into a token/variable/something scoped just to the higher level token

[12:27] <arnsholt> What exactly are you truying trying to parse?

[12:28] <MasterDuke> it's the rad_number token

[12:28] <MasterDuke> and this <[ a..z A..Z ａ..ｚ Ａ..Ｚ ]> is repeated several times

[12:28] <MasterDuke> hmm, the unicode didn't copy/paste properly

[12:29] <arnsholt> Ah, right

[12:29] <arnsholt> Looks fine on my end =)

[12:30] <arnsholt> Anyways, should be fine to extract \d | <[ ... ]> as a separate subrule

[12:30] <arnsholt> rad_digit perhaps?

[12:30] <timotimo> that's rad

[12:31] <arnsholt> Totally! =D

[12:32] <MasterDuke> what's the syntax for that?

[12:33] <arnsholt> Just "token rad_digit { \d | <[ ... ]> }" in the grammar

[12:33] <arnsholt> No need to worry about polluting the namespace, IMO

[12:34] <MasterDuke> ahh, you mean not making it lexical to the rad_number token?

[12:34] <arnsholt> Yeah

[12:39] <[Coke]> nine: yes, it was very reproducible.

[12:48] <nine> [Coke]: even with this commit? https://github.com/rakudo/rakudo/commit/4bcd7e07b6f2733ab4c3493c5cc0fb20c0ae4f79

[12:48] <nine> [Coke]: got any details for me?

[12:53] <[Coke]> 17 hours ago... one sec.

[12:54] <[Coke]> didn't have that one. rebuilding...

[12:55] <nine> The commit at least fixed an issue exposed by alternating between make spectest (which runs with -Ilib) and prove (without -Ilib)

[12:56] <[Coke]> the test failed for me both ways, btw.

[12:56] <[Coke]> ... although I can't guarantee whatever prove line I used didn't -Ilib under the covers)

[12:57] <nine> it was also reproducible with just prove by running prove and then prove -Ilib

[13:36] <arnsholt> nqp: grammar G { token TOP { {make "foo"} } }; say(G.parse("").made)

[13:36] <camelia> nqp-moarvm: OUTPUT«␤»

[13:36] <arnsholt> m: grammar G { token TOP { {make "foo"} } }; say(G.parse("").made) # But this

[13:36] <camelia> rakudo-moar e12ebb: OUTPUT«foo␤»

[13:36] <arnsholt> Is than an NQP-bug?

[13:36] <arnsholt> nqp: grammar G { token TOP { {} {make "foo"} } }; say(G.parse("").made)

[13:36] <camelia> nqp-moarvm: OUTPUT«␤»

[13:37] <arnsholt> Aww, that trick didn't work

[13:43] <[Coke]> nine: work happened, actually running the stresstest now

[13:47] <[Coke]> new failure: t/spec/S17-promise/start.t

[13:47] <[Coke]> which only fails under load, works fine on its own. nine++

[14:45] <[Coke]> jnthn's grant extension accepted. yay!

[15:16] <awwaiid> yay!

[15:27] <timotimo> fantastic!

[17:06] <pmurias> are the children of QAST::Var with a 'param' decl used for anything or just ignored?

[17:07] <dalek> roast: e5bd8d8 | (Zoffix Znet)++ | S32-exceptions/misc.t:

[17:07] <dalek> roast: Backtrace.map operates correctly

[17:07] <dalek> roast:

[17:07] <dalek> roast: RT#129334: https://rt.perl.org/Ticket/Display.html?id=129334

[17:07] <dalek> roast: review: https://github.com/perl6/roast/commit/e5bd8d8c54

[17:07] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129334

[17:18] <timotimo> pmurias: aren't they type checks? or value initialization?

[17:22] <pmurias> they are bind ops

[17:24] <pmurias> timotimo: http://paste.debian.net/836599/

[17:24] <pmurias> timotimo: look at the declaration of __lowered_param__2

[17:27] <dalek> roast: d8d8e7f | (Zoffix Znet)++ | S02-types/baghash.t:

[17:27] <dalek> roast: [coverage] cover all methods in BagHash.pm

[17:27] <dalek> roast: review: https://github.com/perl6/roast/commit/d8d8e7f32e

[17:29] <pmurias> timotimo: a test case seem to imply they can

[17:33] <timotimo> pmurias: sorry, can't look right now

[17:35] <pmurias> timotimo: np

[17:36] <pmurias> timotimo: wrote a test case to answer by question, now I have to figure out why it works that way

[17:36] <pmurias> and the beat rakudo with a stick for depending on static variables being bindable :(

[17:50] <dalek> roast: d765c83 | (Zoffix Znet)++ | S02-types/baggy.t:

[17:50] <dalek> roast: [coverage] Cover Baggy methods not covered by other tests

[17:50] <dalek> roast:

[17:50] <dalek> roast: Does not include classify-list and categorize-list as those are entirely

[17:50] <dalek> roast: untested and need more thorough treatment elsewhere

[17:50] <dalek> roast: review: https://github.com/perl6/roast/commit/d765c834a6

[17:51] <dalek> rakudo/nom: 76d5854 | (Zoffix Znet)++ | t/spectest.data:

[17:51] <dalek> rakudo/nom: Add S02-types/baggy.t test file

[17:51] <dalek> rakudo/nom:

[17:51] <dalek> rakudo/nom: Tests for Baggy role methods that aren't covered by things that `does` it

[17:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/76d5854c74

[18:11] <hackedNODE> .oO( do Baggy.[classify-list|categorize-list] behave same as Hash.[classify-list|categorize-list] and can be the same code, without repetition )

[18:11] <hackedNODE> right now baggy versions are buggy

[18:13] <hackedNODE> And the answer is: nope :)

[18:13] <hackedNODE> m: dd BagHash.new.classify-list({.comb}, 9..9, 9); dd Hash.new.classify-list({.comb}, flat 9..9, 9, 9);

[18:13] <camelia> rakudo-moar 76d585: OUTPUT«("9"=>2).BagHash␤{"9" => $[9, 9, 9]}␤»

[18:33] <hackedNODE> m: % .classify-list: {$_}, 1, 2, 3

[18:33] <camelia> rakudo-moar 76d585: OUTPUT«Cannot resolve caller classify-list(Hash: Block, Int, Int, Int); none of these signatures match:␤    (Hash $: &test, \list, :&as, *%_)␤    (Hash $: %test, $list, |c is raw)␤    (Hash $: @test, $list, |c is raw)␤  in block <unit> at <tmp> line 1␤␤»

[18:34] <hackedNODE> m: BagHash.new.classify-list: {$_}, 1, 2, 3

[18:34] <camelia> rakudo-moar 76d585: ( no output )

[18:36] <hackedNODE> m: my %h = :42a; % .classify-list: %h, 'a'

[18:36] <camelia> rakudo-moar 76d585: ( no output )

[18:36] <hackedNODE> m: my %h = :42a; % .classify-list: %h, 'a', 'a'

[18:36] <camelia> rakudo-moar 76d585: OUTPUT«Cannot resolve caller classify-list(Hash: Block, Str, Str); none of these signatures match:␤    (Hash $: &test, \list, :&as, *%_)␤    (Hash $: %test, $list, |c is raw)␤    (Hash $: @test, $list, |c is raw)␤  in block <unit> at <tmp> line 1␤␤»

[18:36] <hackedNODE> .oO( Block, Str, Str ??? )

[18:37] <hackedNODE> Where'd it get the Block from

[18:37] <hackedNODE> m: % .classify-list: @, 'a', 'a'

[18:37] <camelia> rakudo-moar 76d585: OUTPUT«Cannot resolve caller classify-list(Hash: Block, Str, Str); none of these signatures match:␤    (Hash $: &test, \list, :&as, *%_)␤    (Hash $: %test, $list, |c is raw)␤    (Hash $: @test, $list, |c is raw)␤  in block <unit> at <tmp> line 1␤␤»

[18:39] <hackedNODE> Ah. I get it now. The candidate I try matches, but it fails when forwarding the args

[18:56] <hackedNODE> Found another bug

[18:56] <hackedNODE> s/another//;

[18:56] <hackedNODE> m: dd % .categorize-list: {42}, ("a", "a"), :as{.uc}

[18:56] <camelia> rakudo-moar 76d585: OUTPUT«Hash % = {"42" => $["A", "A"]}␤»

[18:56] <hackedNODE> m: dd % .categorize-list: %(:42a), ("a", "a"), :as{.uc}

[18:56] <camelia> rakudo-moar 76d585: OUTPUT«Hash % = {"42" => $["a", "a"]}␤»

[18:56] * hackedNODE is spectesting

[19:07] <hackedNODE> t/spec/S17-procasync/stress.t seems to consistently die with free(): invalid pointer: https://gist.github.com/zoffixznet/099679a5f6489ffc4495302fc716b30f

[19:08] <hackedNODE> That's with TEST_JOBS=30 on 24-core box

[19:13] <dalek> rakudo/nom: b3c92ba | (Zoffix Znet)++ | src/core/Hash.pm:

[19:13] <dalek> rakudo/nom: Improve Hash.classify-list/Hash.categorize-list multi candidates

[19:13] <dalek> rakudo/nom:

[19:13] <dalek> rakudo/nom: - Add slurpy candidates to allow for listy args that don't fit

[19:13] <dalek> rakudo/nom:     exiting candidates

[19:13] <dalek> rakudo/nom: - The above also fixes LTA error messages for % and @ tests with

[19:13] <dalek> rakudo/nom:     previously unacceptable lists

[19:13] <dalek> rakudo/nom: - Correctly propagate the previously-omitted :&as parameter

[19:13] <dalek> rakudo/nom:     for .categorize-list with % and @ tests

[19:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b3c92baad2

[19:41] <hackedNODE> m: dd % .classify-list: { (<a b>, <b c d>, <a>).pick }, ^3

[19:41] <camelia> rakudo-moar b3c92b: OUTPUT«Cannot call 'push' on an immutable 'List'␤  in block <unit> at <tmp> line 1␤␤»

[20:09] <travis-ci> Rakudo build passed. Zoffix Znet 'Improve Hash.classify-list/Hash.categorize-list multi candidates

[20:09] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/162287804 https://github.com/rakudo/rakudo/compare/76d5854c74da...b3c92baad264

[20:11] <lizmat> Zoffix++

[20:31] <dalek> roast: 528d162 | (Cuong Manh Le)++ | S16-io/eof.t:

[20:31] <dalek> roast: Picking first file from /proc/1 for eof testing

[20:31] <dalek> roast:

[20:31] <dalek> roast: RT #128831

[20:31] <dalek> roast: review: https://github.com/perl6/roast/commit/528d162a57

[20:31] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128831

[20:31] <dalek> roast: e669130 | lizmat++ | S16-io/eof.t:

[20:31] <dalek> roast: Merge pull request #159 from Gnouc/master

[20:31] <dalek> roast:

[20:31] <dalek> roast: Picking first file from /proc/1 for eof testing

[20:31] <dalek> roast: review: https://github.com/perl6/roast/commit/e669130911

[20:36] <[Coke]> lizmat: wasn't the point of the test that particular file?

[20:36] <lizmat> [Coke]: I have no idea, can't test as I don't have linux, but it looked legit to me

[20:37] <[Coke]> fair enough. the commit that added the file just says /proc.

[21:26] <lizmat> good night, #perl6-dev!

[21:26] <timotimo> gnite lizmat!

[23:08] <MasterDuke> .tell Zoffix i just realized why t/spec/S17-procasync/stress.t is failing for you (and lizmat i believe), nqp and rakudo haven't had their MOAR_REVISION and NQP_REVISION bumped to pick up jnthn's fix

[23:08] <yoleaux2> MasterDuke: I'll pass your message to Zoffix.
