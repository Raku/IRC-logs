[00:32] <MasterDuke> hmm, i'm getting a 'java.io.IOException: Class not found' exception, but i thought it would look inside the jar (CORE.setting.jar). if i extract the jar into the rakudo src director it finds the class

[05:38] <MasterDuke> ./perl6-j --ll-exception -e 'say 1/0'

[05:38] <MasterDuke> Attempt to divide 1 by zero using div

[05:38] <MasterDuke> in throw (SETTING::src/core/Exception.pm:64)

[05:38] <MasterDuke> in throw (SETTING::src/core/Failure.pm:40)

[05:39] <psch> that looks pretty good i'd say :)

[05:39] <MasterDuke> it's not pretty

[05:40] <psch> is the indent-inconsistency copied correctly?

[05:40] <MasterDuke> no, that's just a copy/paste error

[05:41] <MasterDuke> there a still some things to work through. it still requires CORE.setting.jar to be unzipped

[05:41] <psch> oh

[05:41] <psch> maybe you're looking in the wrong classloader?

[05:43] <MasterDuke> no idea

[05:45] <MasterDuke> it's time for me to sleep, but i'll gist the diff

[05:46] <psch> cool, i'll have a look

[05:51] <MasterDuke> https://gist.github.com/MasterDuke17/6a9848f5b19e4d4d52ac6fe191617fe1

[05:55] <MasterDuke> heh, not only does it require the jar to be unzipped, but it only works if you run from the directory where you unzipped it

[05:56] <MasterDuke> well, at least some progress was made today, but hopefully the rest of the problems (and bad Java code) can be fixed

[06:19] <psch> .tell MasterDuke SourceFilenameAttribute didn't make it into the gist.  but fwiw, you should get it work if instead of feeding the class name into the new ClassReader you get the byte[] (via 'mumble.getClassLoader().getResourceAsStream(className)')

[06:19] <yoleaux2> psch: I'll pass your message to MasterDuke.

[06:20] <psch> .tell MasterDuke well, except getResourceAsStream returns an InputStream, but that usually can be converted to a byte[] rather easily :)

[06:20] <yoleaux2> psch: I'll pass your message to MasterDuke.

[06:21] <psch> .tell orrr you use the InputStream directly, 'cause i just notice ClassReader has a constructor that takes an InputStream...

[06:21] <yoleaux2> psch: I'll pass your message to orrr.

[06:21] <psch> err

[06:21] <psch> .tell MasterDuke orrr you use the InputStream directly, 'cause i just notice ClassReader has a constructor that takes an InputStream...

[06:21] <yoleaux2> psch: I'll pass your message to MasterDuke.

[09:07] <[TuxCM]> This is Rakudo version 2016.11-5-ge9487d6 built on MoarVM version 2016.11-8-gb582aeb

[09:07] <[TuxCM]> csv-ip5xs        3.118

[09:07] <[TuxCM]> test            13.771

[09:07] <[TuxCM]> test-t           6.541

[09:07] <[TuxCM]> csv-parser      14.087

[09:08] <FROGGS> o/

[11:07] <lizmat> Files=1154, Tests=53760, 211 wallclock secs (12.78 usr  3.73 sys + 1287.16 cusr 123.43 csys = 1427.10 CPU)

[11:16] <FROGGS> perl tools/build/gen-version.pl > gen/moar/main-version.nqp

[11:16] <FROGGS> fatal: No tags can describe '2432c469763dd01cf0f72b6b37fa0e4bf9c86b5f'.

[11:17] * FROGGS reads this as "It is sooo disgusting!"

[11:53] <dalek> roast: 5ee33ec | niner++ | S05-capture/match-object.t:

[11:53] <dalek> roast: Test equality and identity of Match objects

[11:53] <dalek> roast: review: https://github.com/perl6/roast/commit/5ee33ec131

[11:55] <dalek> rakudo/nom: 7f26e8b | niner++ | src/core/Match.pm:

[11:55] <dalek> rakudo/nom: Fix Match pretending to be a value type when it is not

[11:55] <dalek> rakudo/nom:

[11:55] <dalek> rakudo/nom: Comparing the identity of Match objects wrongly resulted in them being

[11:55] <dalek> rakudo/nom: treated as equals. Happened because Match is a subclass of Capture which

[11:55] <dalek> rakudo/nom: is a value type and therefor provides a WHICH method. Matches are most

[11:55] <dalek> rakudo/nom: certainly no value types as they are mutable. So we circumvent Capture's

[11:55] <dalek> rakudo/nom: WHICH method.

[11:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7f26e8b28a

[11:59] <lizmat> nine: good catch!

[12:01] <nine> vendethiel found the bug :)

[12:02] <vendethiel> well, nine++ for fixing it so quickly

[12:02] <nine> What scares me is that both the test code and the fix worked on the very first try with no typos or other errors. I'm not sure that has ever happened before ;)

[12:03] <nine> Of course it's been a rather trivial bug :)

[12:29] <jnthn> Match objects are mutable?

[12:29] <yoleaux2> 19 Nov 2016 23:58Z <lizmat> jnthn: was there a reason why native shaped str arrays are not implemented?  or was it an oversight that they aren't?

[12:30] <jnthn> Ah, I guess .ast is...

[12:31] <jnthn> lizmat: They just didn't seem especially useful, and time was short. :)

[12:31] <jnthn> I've no problem with adding support for them.

[12:31] <lizmat> jnthn: does that require work at the VM level ?

[12:33] <jnthn> Shouldn't.

[12:33] <jnthn> After all, nqp::list_s already exists :)

[12:36] <nine> jnthn: yes .made is

[12:40] <MasterDuke> would native shaped str arrays be useful for Text::CSV?

[12:40] <yoleaux2> 06:19Z <psch> MasterDuke: SourceFilenameAttribute didn't make it into the gist.  but fwiw, you should get it work if instead of feeding the class name into the new ClassReader you get the byte[] (via 'mumble.getClassLoader().getResourceAsStream(className)')

[12:40] <yoleaux2> 06:20Z <psch> MasterDuke: well, except getResourceAsStream returns an InputStream, but that usually can be converted to a byte[] rather easily :)

[12:40] <yoleaux2> 06:21Z <psch> MasterDuke: orrr you use the InputStream directly, 'cause i just notice ClassReader has a constructor that takes an InputStream...

[12:47] <lizmat> jnthn: ok, will look at doing that

[12:50] <lizmat> MasterDuke: it might, there are a number of Str @ in CSV.pm

[13:24] <dalek> rakudo/nom: 939d273 | lizmat++ | src/core/operators.pm:

[13:24] <dalek> rakudo/nom: Make indirect type lookup 3x as fast

[13:24] <dalek> rakudo/nom:

[13:24] <dalek> rakudo/nom: Should have a positive effect on bare startup time, since we do at

[13:24] <dalek> rakudo/nom: least 5 of these every time we start.

[13:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/939d273708

[13:41] <masak> I'm still flummoxed as to why people like the methos name ".made" at all... :P

[13:41] <masak> method*

[13:42] * MasterDuke doesn't, fwiw

[13:42] <masak> maybe it's just one of those unfortunate word-person combinations, where the chemistry totally doesn't work ;)

[13:42] <masak> you can't have a Match object and go "ok, get me the made" with a straight face

[13:43] <lizmat> well, it's the counterpart of "make" conceptually, no?

[13:43] <masak> oh, I understand that bit

[13:43] <lizmat> still prefer it to .ast

[13:44] <masak> which is fine

[13:44] <masak> we can live in a world where we prefer different things -- I'm ok with that :)

[13:45] <lizmat> indeed  :-)

[13:45] <lizmat> afk&

[13:45] <masak> maybe I would be more comfortable with ".made" if "make" also wasn't largely grabbed out of thin air

[13:45] <masak> it's a short word meaning, roughly, "associate a piece of data with this Match object"

[13:46] <MasterDuke> anybody have any idea why this line: "new ClassReader(info.compUnit.getClass().getClassLoader().getResourceAsStream(kls)).accept(" would throw "java.lang.ArrayIndexOutOfBoundsException: 60673"?

[13:46] <masak> and if you don't know that bit, ".made" is doubly confusing in the code

[13:51] * MasterDuke finds it amusing that working on a Project Euler problem in Perl 6 led to working on Perl 6 itself, in Perl 6, Perl 5, NQP, Java, C++, C, HTML, Markup, Bash, and JavaScript

[13:52] <psch> MasterDuke: ArrayIndexOutOfBounds in code dealing with objectweb.asm usually seems to mean something missing (or too much) on the stack in the generated classfile

[13:52] <MasterDuke> and /me still hasn't solved the original PE problem!

[13:53] <MasterDuke> psch: i haven't been able to get it working with getClassLoader(), etc. yet

[13:54] <MasterDuke> but wouldn't i have had the same error the way it was doing it before?

[13:56] <psch> i'm not sure

[13:56] <psch> i mean, when you get the resource from the classloader you're walking a loaded class in memory

[13:56] <psch> maybe that messes things up somewhere, somehow..?

[13:56] <MasterDuke> psch: fyi, just added SourceFilenameAttribute.java to the gist. i wanted to just use an anonymous subclass of Attribute, but couldn't get that working

[13:56] <psch> objectweb.asm error reporting is kinda lacking i find

[14:00] <MasterDuke> i'm away for a bit, but if you're curious, i pushed my current (not quite working) code here: https://github.com/MasterDuke17/nqp/tree/source_file_line_numbers_on_jvm

[16:02] <ugjka> whos that usuckirc guy

[16:02] <ugjka> getting k-lined

[16:09] <viki> Hm, they joined my #zofbot channel too....

[17:18] <nine> MasterDuke: took me 7 months of working on module management from "I'd like to create rakudo rpm packages for openSUSE for installation on our servers" to finally being able to do just that.

[17:19] <nine> MasterDuke: and I've yet to get around to creating packages for Perl 6 modules ;)

[20:11] <dalek> rakudo/nom: 2706221 | lizmat++ | tools/build/makeNATIVE_SHAPED_ARRAY.pl6:

[20:11] <dalek> rakudo/nom: Introducing makeNATIVE_SHAPED_ARRAY.pl6

[20:11] <dalek> rakudo/nom:

[20:11] <dalek> rakudo/nom: Support script for generating the shaped(int|num|str)array roles.

[20:11] <dalek> rakudo/nom: So far, only copied the current state of the code in native_array.pm

[20:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2706221ac9

[20:13] <dalek> rakudo/nom: 486155e | lizmat++ | src/core/native_array.pm:

[20:13] <dalek> rakudo/nom: shaped(int|num|str)array roles are now generated

[20:13] <dalek> rakudo/nom:

[20:13] <dalek> rakudo/nom: This also introduces the shapedstrarray role, but this is not used

[20:13] <dalek> rakudo/nom: yet.

[20:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/486155eb2a

[21:01] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Introducing makeNATIVE_SHAPED_ARRAY.pl6

[21:01] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/177491853 https://github.com/rakudo/rakudo/compare/939d27370861...2706221ac9c0

[21:01] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[21:06] <dalek> rakudo/nom: cf451f1 | lizmat++ | src/core/native_array.pm:

[21:06] <dalek> rakudo/nom: Use the same sig everywhere in shaped role

[21:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cf451f1f30

[21:06] <dalek> rakudo/nom: f25ab3a | lizmat++ | src/core/ShapedArray.pm:

[21:06] <dalek> rakudo/nom: Some more signature streamlining

[21:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f25ab3a28e

[22:09] <dalek> rakudo/nom: 0cb765f | lizmat++ | / (4 files):

[22:09] <dalek> rakudo/nom: Move shared AT-POS code to ShapedArrayCommon role

[22:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0cb765fca9

[22:11] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Some more signature streamlining'

[22:11] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/177500978 https://github.com/rakudo/rakudo/compare/486155eb2af7...f25ab3a28e38

[22:34] <dalek> rakudo/nom: d07ab04 | lizmat++ | / (4 files):

[22:34] <dalek> rakudo/nom: Move shared ASSIGN-POS code to ShapedArrayCommon role

[22:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d07ab04f4d

[22:46] <dalek> rakudo/nom: 0fc5580 | lizmat++ | src/core/ (3 files):

[22:46] <dalek> rakudo/nom: Move shared EXISTS-POS code to ShapedArrayCommon role

[22:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0fc5580279

[22:51] <lizmat> .tell moritz in blogpost: "and nothing as fixed"   s/as/was/ ?

[22:51] <yoleaux2> lizmat: I'll pass your message to moritz.

[23:19] <dalek> rakudo/nom: 014d4cf | lizmat++ | src/core/native_array.pm:

[23:19] <dalek> rakudo/nom: Activate native shaped str array

[23:19] <dalek> rakudo/nom:

[23:19] <dalek> rakudo/nom: Alas, it's not working yet:

[23:19] <dalek> rakudo/nom:   $ 6 'use nqp; say nqp::multidimref_s(my str @a[5],nqp::list_i(0))'

[23:19] <dalek> rakudo/nom:   No str positional reference type registered for current HLL

[23:19] <dalek> rakudo/nom:

[23:19] <dalek> rakudo/nom: So we need some more hookup work somewhere

[23:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/014d4cff2f

[23:21] <lizmat> .tell jnthn something needs fixing in the bowels: https://github.com/rakudo/rakudo/commit/014d4cff2f

[23:21] <yoleaux2> lizmat: I'll pass your message to jnthn.

[23:21] <lizmat> good night, #perl6-dev!
