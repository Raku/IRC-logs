[00:49] <MasterDuke> timotimo: mind/got time for some more questions?

[00:52] <timotimo> go ahead

[00:56] <timotimo> MasterDuke: so?

[01:01] <MasterDuke> sorry, got distracted by fudge and a manhattan

[01:02] <MasterDuke> but i've implemented what i thought you were describing, and nqp parts all compile, but the setting doesn't

[01:02] <MasterDuke> "Error while compiling, type X::Undeclared"

[01:02] <MasterDuke> "symbol: %?SOURCE_LINE_NUMBERS"

[01:04] <timotimo> in that case your rule doesn't get hit by anything

[01:04] <timotimo> it might be a better idea to use some existing thing that can put in some magicals

[01:04] <timotimo> but last time we talked i couldn't find it

[01:05] <timotimo> maybe looking for $?FILE and $?LINE in the actions can get you there?

[01:06] <timotimo> ah, yeah. that's also close to %?RESSOURCES

[01:06] <timotimo> %?RESOURCES

[01:06] <timotimo> i was going to go to bed now

[01:07] <MasterDuke> cool, i'll trying doing it there

[01:07] <MasterDuke> thanks again

[01:07] <timotimo> good luck!

[01:07] <timotimo> i'm glad you're tackling this :)

[01:07] <timotimo> it's a nice thing to have for us core devs for sure

[01:07] <timotimo> probably also helpful to some end users? that'd be nice.

[01:09] <MasterDuke> hope so

[01:09] <timotimo> o/

[01:14] <MasterDuke> g'night

[02:25] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Add some comments indicating part of Array class'

[02:25] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/172728354 https://github.com/rakudo/rakudo/compare/28e11c47ddc6...d036a5010962

[02:25] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[02:50] <MasterDuke> ^^^ JVM, t/04-nativecall/20-concurrent.t .......... Failed 3/3 subtests

[02:56] <geekosaur> I think that's known

[02:57] <MasterDuke> ooh, someone's here. would you know anything about "Missing serialize REPR function for REPR VMHash (BOOTHash)" errors?

[02:58] <geekosaur> nope, sorry

[03:00] <geekosaur> I know from scrollback that the failing test was added to test a moar bug; possibly it should just be fudged on jvm

[03:09] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Fix type in comment, MasterDuke17++'

[03:09] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/172729339 https://github.com/rakudo/rakudo/compare/d036a5010962...5d1b2c3bc6cd

[03:09] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[03:44] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make sure BIND-POS works the same on typed arrays'

[03:44] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/172742704 https://github.com/rakudo/rakudo/compare/5d1b2c3bc6cd...0bbe98d886da

[03:44] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[04:20] <travis-ci> Rakudo build failed. Carl Masak 'fix typo'

[04:20] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/172751221 https://github.com/rakudo/rakudo/compare/0bbe98d886da...ebcc33eb6fd4

[04:20] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[04:52] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Give shaped arrays its own fast .clone

[04:52] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/172777365 https://github.com/rakudo/rakudo/compare/ebcc33eb6fd4...40429f32bb5d

[04:52] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[08:45] <dalek> rakudo/nom: e544d05 | lizmat++ | src/core/Str.pm:

[08:45] <dalek> rakudo/nom: Revert "Fix off by one errors in Failure messages"

[08:45] <dalek> rakudo/nom:

[08:45] <dalek> rakudo/nom: It is fully legal to provide a start position *after* the string.

[08:45] <dalek> rakudo/nom: This also applies, to e.g. substr: "foo".substr(3) is the empty

[08:45] <lizmat> good morning, #perl6-dev!

[08:45] <dalek> rakudo/nom: string, "foo".substr(4) returns a Failure.

[08:45] <dalek> rakudo/nom:

[08:45] <dalek> rakudo/nom: The only thing that's not supported, is large Ints, because we

[08:45] <dalek> rakudo/nom: internally only work with native ints.  And if we really want to

[08:45] <dalek> rakudo/nom: return information about what a valid position to start looking

[08:45] <dalek> rakudo/nom: at, we should also take the number of chars of the needle into

[08:45] <dalek> rakudo/nom: account.

[08:45] <dalek> rakudo/nom:

[08:45] <dalek> rakudo/nom: This reverts commit c59ab1888db616126da217a436670e06f9da3c23.

[08:45] <lizmat> sorry raiph, Zoffix

[08:47] <dalek> rakudo/nom: c55c5d7 | lizmat++ | src/core/TypedArray.pm:

[08:47] <dalek> rakudo/nom: Fux typo, MasterDuke17++ for the nitpicking :-)

[08:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c55c5d78b2

[10:07] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Fux typo, MasterDuke17++ for the nitpicking :-)'

[10:07] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/172872375 https://github.com/rakudo/rakudo/compare/e544d0522702...c55c5d78b25e

[10:07] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[12:17] <viki> no problem

[13:19] <viki> geekosaur is now known as Titanic

[13:26] <dalek> rakudo/nom: 1293188 | lizmat++ | src/core/ (3 files):

[13:26] <dalek> rakudo/nom: Streamline .new/set-shape handling

[13:26] <dalek> rakudo/nom:

[13:26] <dalek> rakudo/nom: - set-shape only called when we actually have a shape

[13:26] <dalek> rakudo/nom: - set-shape no longer STOREs, just sets the shape (like the name indicates)

[13:26] <dalek> rakudo/nom: - new-internal helper no longer needed

[13:26] <dalek> rakudo/nom:

[13:26] <dalek> rakudo/nom: Makes creating a shaped array about 25% faster

[13:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1293188342

[13:26] <lizmat> afk&

[14:19] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Streamline .new/set-shape handling

[14:19] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/172941392 https://github.com/rakudo/rakudo/compare/c55c5d78b25e...1293188342fd

[16:58] <|Tux|> This is Rakudo version 2016.10-164-g1293188 built on MoarVM version 2016.10-39-g4b9e3a8

[16:58] <|Tux|> csv-ip5xs        3.160

[16:58] <|Tux|> test            14.135

[16:58] <|Tux|> test-t           6.895

[16:58] <|Tux|> csv-parser      14.774

[16:58] <|Tux|> sorry for the late post

[19:43] <dalek> rakudo/nom: 576f3a1 | lizmat++ | src/core/ShapedNArray.pm:

[19:43] <dalek> rakudo/nom: Re-imagine set-shape

[19:43] <dalek> rakudo/nom:

[19:43] <dalek> rakudo/nom: - prefab the roles to be mixed in

[19:43] <dalek> rakudo/nom: - handle case if a shape with no dimensions is specified a bit better

[19:43] <dalek> rakudo/nom:

[19:43] <dalek> rakudo/nom: Makes creation of shaped arrays about 25% faster again.  But it is

[19:43] <dalek> rakudo/nom: still causing a global deoptimization :-(

[19:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/576f3a1141

[19:43] <lizmat> jnthn: sometimes I think we need a GLIR (Great List Internals Refactor)

[19:44] <lizmat> A List would be a 1 dimmed shaped array

[19:44] <lizmat> that doesn't have containers

[19:45] <lizmat> Laziness (aka $!todo) would be a mixin

[19:46] <lizmat> an Array would be a base type

[19:46] <lizmat> all methods that iterator would still be the same, but work off of different iterators

[19:47] <lizmat> etc. etc.

[19:49] <lizmat> </rant?

[19:49] <lizmat> >

[19:49] <timotimo> i thought shaped arrays are always limited in their dimensions?

[19:49] <timotimo> do we want that?

[19:51] <lizmat> what is a List other than a 1 dimmed shaped array ?

[19:57] <lizmat> timotimo: I'm just expressing some feeling I have, working on lists, iterators, native arrays, shaped arrays for a while

[19:58] <lizmat> that there's a better design lurker underneath all of that somewhere

[19:58] <lizmat> *lurking

[20:04] <timotimo> ah, you mean lists are read-only anyway, so they can't grow past their initial limit?

[20:04] <timotimo> but what about lazy lists?

[20:05] <timotimo> or is this mostly about code sharing?

[20:06] <lizmat> well, it is really about separating lazy from non-lazy lists

[20:07] <lizmat> everywhere we handle lists, we need to check whether they are already completely reified or not

[20:07] * timotimo has to go out fetch food

[20:07] <lizmat> then if the $!todo is exhausted, we don't have a good way to signal back that it is done reifying

[20:08] <lizmat> so the next time we access the list, it would check it again

[20:10] <timotimo> mhm

[20:11] <lizmat> it just makes for very convoluted code

[20:12] <lizmat> jnthn: what is the reason we actually parameterize the ShapedArray role ?

[20:30] <[Coke]> lizmat: add a bit indicating if it's done expanding? (too much memory?)

[20:32] <lizmat> [Coke]: the problem is really that the $1todo attribute in a List needs to be checked almost every time

[20:33] <lizmat> if it is DEFINITE, then methods like .reify-at-least get called on it

[20:33] <lizmat> if such a method finds out it exhausted the iterator, it should basically reset the $!todo attribute in the list (its self, basically)

[20:35] <lizmat> but it can't  :-(

[20:35] <lizmat> at least, I've not been able to find a way to do that

[20:48] <dalek> roast: e111f78 | usev6++ | S17- (2 files):

[20:48] <dalek> roast: Fudge newly added tests for JVM

[20:48] <dalek> roast: review: https://github.com/perl6/roast/commit/e111f78478

[20:50] <dalek> nqp: 116e09a | (Pawel Murias)++ | src/vm/js/nqp-runtime/sixmodel.js:

[20:50] <dalek> nqp: [js] Avoid unneeded check.

[20:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/116e09a2a9

[20:50] <dalek> nqp: eaa75ca | (Pawel Murias)++ | src/vm/js/nqp-runtime/ (7 files):

[20:50] <dalek> nqp: [js] Fix stuff found by 'make js-lint'.

[20:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/eaa75caefc

[20:50] <dalek> nqp: 89cf656 | (Pawel Murias)++ | src/vm/js/nqp-runtime/ (5 files):

[20:50] <dalek> nqp: [js] Use const for constants.

[20:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/89cf6562d0

[20:50] <dalek> nqp: 0adcb20 | (Pawel Murias)++ | src/vm/js/nqp-runtime/deserialization.js:

[20:50] <dalek> nqp: [js] Remove old comment.

[20:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0adcb200c1

[21:58] <dalek> rakudo/nom: 1bb5aad | lizmat++ | src/core/ShapedArray.pm:

[21:58] <dalek> rakudo/nom: Make .AT-POS on 3+ dimmed arrays 20% faster

[21:58] <dalek> rakudo/nom:

[21:58] <dalek> rakudo/nom: Also make over-indexed .AT-POS on 1,2,3 dimmed arrays about 10% faster.

[21:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1bb5aadc46

[22:28] <dalek> rakudo/nom: 5b2bdeb | lizmat++ | src/core/ShapedArray.pm:

[22:28] <dalek> rakudo/nom: Make multi-dimmed ASSIGN-POS about 30% faster

[22:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5b2bdebfd9

[22:34] <lizmat> and that concludes my hacking for today

[22:34] <lizmat> good night, #perl6-dev!

[23:51] <MasterDuke> nqp doesn't support pairs (e.g., :abc(123))?

[23:53] <geekosaur> nqp: (abc => 123)

[23:53] <camelia> nqp-moarvm: ( no output )

[23:53] <geekosaur> nqp: :123abc

[23:53] <camelia> nqp-moarvm: OUTPUT«Confused at line 2, near ":123abc"␤   at gen/moar/stage2/NQPHLL.nqp:621  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:panic)␤ from gen/moar/stage2/NQP.nqp:908  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/nqp.moarvm:comp_unit)␤ from gen/moar/st…»

[23:53] <geekosaur> nqp: :abc(123)

[23:53] <camelia> nqp-moarvm: ( no output )

[23:54] <geekosaur> nqp: nqp::say(:abc(123))

[23:54] <camelia> nqp-moarvm: OUTPUT«123␤»

[23:55] <geekosaur> nqp: nqp::say(abc => 123)

[23:55] <camelia> nqp-moarvm: OUTPUT«123␤»

[23:55] <geekosaur> nqp: nqp::say('', abc => 123)

[23:55] <camelia> nqp-moarvm: OUTPUT«Arg count 2 doesn't equal required operand count 1 for op 'say'␤   at gen/moar/stage2/QAST.nqp:1656  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_mastop)␤ from gen/moar/stage2/QAST.nqp:1867  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST…»

[23:55] <MasterDuke> m: my @a := []; nqp::push(@a, 2 => 5)

[23:55] <camelia> rakudo-moar 5b2bde: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Could not find nqp::push, did you forget 'use nqp;' ?␤at <tmp>:1␤------> my @a := []; nqp::push(@a, 2 => 5)⏏<EOL>␤»

[23:55] <geekosaur> pfeh

[23:55] <MasterDuke> nqp: my @a := []; nqp::push(@a, 2 => 5)

[23:55] <camelia> nqp-moarvm: OUTPUT«Assignment ("=") not supported in NQP, use ":=" instead at line 2, near "> 5)"␤   at gen/moar/stage2/NQPHLL.nqp:621  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:panic)␤ from <unknown>:1  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/nqp.moarvm:in…»

[23:56] <geekosaur> nqp: my @a := []; nqp::say(@a, (abc => 123))

[23:56] <camelia> nqp-moarvm: OUTPUT«Arg count 2 doesn't equal required operand count 1 for op 'say'␤   at gen/moar/stage2/QAST.nqp:1656  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST.moarvm:compile_mastop)␤ from gen/moar/stage2/QAST.nqp:1867  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/QAST…»

[23:56] <geekosaur> whoops

[23:56] <geekosaur> nqp: my @a := []; nqp::push(@a, (abc => 123))

[23:56] <camelia> nqp-moarvm: ( no output )

[23:56] <geekosaur> nqp: my @a := []; nqp::push(@a, (abc => 123)); nqp::say(@a)

[23:56] <camelia> nqp-moarvm: OUTPUT«cannot stringify this␤   at <tmp>:1  (<ephemeral file>:<mainline>)␤ from gen/moar/stage2/NQPHLL.nqp:1428  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:eval)␤ from gen/moar/stage2/NQPHLL.nqp:1631  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQP…»

[23:56] <geekosaur> nqp: my @a := []; nqp::push(@a, (abc => 123)); nqp::say(@a[0])

[23:56] <camelia> nqp-moarvm: OUTPUT«123␤»

[23:57] <geekosaur> looks like it does something with pairs, but not what we expect...

[23:57] <geekosaur> since it did the same thing with the colonpair syntax

[23:57] <MasterDuke> yeah, not sure what's happening

[23:58] <geekosaur> otoh it could be say that is broken, not pairs (maybe nqp::say on a pair gives you only the value part, not the key)

[23:58] <geekosaur> nqp: my @a := []; nqp::push(@a, (abc => 123)); nqp::say(@a[0].key)

[23:58] <camelia> nqp-moarvm: OUTPUT«Cannot find method 'key': no method cache and no .^find_method␤   at <tmp>:1  (<ephemeral file>:<mainline>)␤ from gen/moar/stage2/NQPHLL.nqp:1428  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:eval)␤ from gen/moar/stage2/NQPHLL.nqp:1631  (/home/…»

[23:58] <geekosaur> mrrr, dunno what a pair looks like at nqp level
