[00:03] <Zoffix> This returns 0 for me :/ I wonder if that's correct:    dd run(:out, $*EXECUTABLE, "-e", "exit 255").exitcode

[00:03] <Zoffix> This (no :out) returns 25. dd run($*EXECUTABLE, "-e", "exit 25").exitcode

[01:04] <ugexe> run/shell are full of weird things like that

[01:06] <ugexe> you would have to call .out.close first to get what you want as it current is

[01:07] <ugexe> when using both :out and :err I encounter situations where the order that :out and :err are read in matters

[01:07] <ugexe> and its not always the same

[01:28] <jdv79> sounds sad

[01:29] * jdv79 sheds a tear

[01:59] <AlexDaniel> https://rt.perl.org/Ticket/Display.html?id=125757

[01:59] <AlexDaniel> Zoffix: ↑ this, I think

[02:01] <Zoffix> yeah, seems to be

[02:38] <Zoffix> m: BEGIN { UNIT; Nil }

[02:38] <camelia> rakudo-moar d789da: ( no output )

[02:38] <Zoffix> m: UNIT.WHAT

[02:38] <camelia> rakudo-moar d789da: ( no output )

[02:38] <Zoffix> m: UNIT.WHAT.say

[02:38] <camelia> rakudo-moar d789da: OUTPUT«(UNIT)␤»

[02:42] <Zoffix> Interestingly, that BEGIN stuff dies when run on command line

[02:43] <Zoffix> (there's a ticket for it https://rt.perl.org/Ticket/Display.html?id=127536#ticket-history )

[03:02] <Zoffix> m: say NaN cmp -Inf

[03:02] <camelia> rakudo-moar d789da: OUTPUT«More␤»

[03:02] <Zoffix> m: say NaN cmp Inf

[03:02] <camelia> rakudo-moar d789da: OUTPUT«More␤»

[03:02] <Zoffix> m: say minmax NaN, Inf, -Inf;

[03:02] <camelia> rakudo-moar d789da: OUTPUT«-Inf..NaN␤»

[03:02] <Zoffix> m: say max NaN, Inf, -Inf;

[03:02] <camelia> rakudo-moar d789da: OUTPUT«NaN␤»

[03:02] <Zoffix> m: say min NaN, Inf, -Inf;

[03:02] <camelia> rakudo-moar d789da: OUTPUT«-Inf␤»

[03:16] <Zoffix> What does "# NaN always sorts as if "NaN" instead." mean?

[03:19] <geekosaur> hm. I would understand that as meaning it uses the string instead of the putative numeric value (because the numeric value is not actually sortable)

[03:19] <geekosaur> but...

[03:19] <geekosaur> m: say minmax "NaN", Inf, -Inf;

[03:19] <camelia> rakudo-moar d789da: OUTPUT«-Inf..Inf␤»

[03:20] <geekosaur> m: say minmax NaN, Inf, -Inf;

[03:20] <camelia> rakudo-moar d789da: OUTPUT«-Inf..NaN␤»

[03:21] <geekosaur> (given that IEEE floating point says the result of a comparison involving a NaN is NaN, arguably minmax should produce either NaN or NaN..NaN)

[03:22] <geekosaur> ...or a range involving NaN should produce Failure

[03:22] <Zoffix> m: say NaN..NaN

[03:22] <camelia> rakudo-moar d789da: OUTPUT«NaN..NaN␤»

[03:22] <Zoffix> m: say eager NaN..NaN

[03:22] <geekosaur> um...

[03:23] <camelia> rakudo-moar d789da: OUTPUT«(timeout)»

[03:23] <geekosaur> NaN is non-comparable, so ranges involving NaN really should be illegal as they have no meaning

[03:24] * Zoffix watches the worms escape from the now-open can

[03:24] <Zoffix> (started with this ticket :) https://rt.perl.org/Ticket/Display.html?id=127506 )

[03:39] <Zoffix> Marked as [@LARRY]. My vote is to return NaN if any of the values is a NaN: https://rt.perl.org/Ticket/Display.html?id=127506#ticket-history

[03:44] <Zoffix> m: .say for NaN..NaN

[03:45] <camelia> rakudo-moar d789da: OUTPUT«(timeout)NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤NaN␤N…»

[03:45] <Zoffix> .oO( ... batman... )

[03:45] <geekosaur> that follows from NaN being non-comparable; it will never reach the endpoint because the values can never compare equal

[03:45] <geekosaur> which is why it should be a Failure

[03:49] <geekosaur> guh. if I try to comment with anonymous login it won't let me. if I log in with bitcard it says I don't have display permission

[03:50] <Zoffix> Another @LARRY for the NaN seq/ranges (there was actually a ticket for that since pre-Christmas): https://rt.perl.org/Ticket/Display.html?id=125337

[03:50] * Zoffix goes to bed

[03:50] <geekosaur> right, logging in removed my access completely. thanks perl.org :/

[04:10] <dalek> roast: 5cef331 | usev6++ | S05-metasyntax/charset.t:

[04:10] <dalek> roast: Skip test for ignoremark on JVM (ordbaseat NYI)

[04:10] <dalek> roast: review: https://github.com/perl6/roast/commit/5cef3319df

[08:46] <psch> j: A: for ^1 { B: do for ^1 { say "in B"; last A } };

[08:46] <camelia> rakudo-jvm cd19db: OUTPUT«in B␤»

[08:46] <psch> ...does that mean non-phasery sinking is wonky..?

[09:17] <psch> this is crazy

[09:17] <psch> from the looks of it the 'do' example above doesn't actually ever hit a handler that handles EX_CAT_LABELED

[09:43] <psch> right, so part of the bug is definitely that we're doing (candidate_category & category != 0), instead of == category

[09:44] <psch> which means we currently on jvm hit any "close enough" handler

[09:48] <psch> ...or implementation details are so different between the backends that looking at moar is actually harmful, of course :|

[10:00] <psch> m: say 3403.base(2).comb.map({ (state $x = -1)++; $_ > 0 ?? 2 ** ($_ * $x) !! 0}) # and how are this meaningful categories for a handler..?

[10:00] <camelia> rakudo-moar d789da: OUTPUT«(1 2 0 8 0 32 0 0 256 0 1024 2048)␤»

[10:00] <psch> 'cause afaict we don't have handlers with id 2, 1024, or 2048

[10:01] <psch> or rather categories with those values

[10:02] <psch> and the combination also seems weird

[10:03] <psch> CAT_CATCH, unknown, CAT_REDO (without LAST, although we always install them together..?), and CAT_PROCEED and two more unknowns...

[10:03] <psch> err, s/LAST/NEXT/

[10:06] <psch> oh, except that's not a handlerInfo, carry on >_>

[10:18] <stmuk> I've put the preXmas stars under http://rakudo.org/downloads/star/archive/

[10:27] <Zoffix> m: A: for ^1 { B: do for ^1 { say "in B"; last A } };

[10:27] <camelia> rakudo-moar d789da: OUTPUT«in B␤»

[10:28] * Zoffix doesn't see anything wrong with JVM version.

[10:33] <psch> r: A: for ^1 { B: for ^1 { say "in B"; last A } }

[10:33] <camelia> rakudo-moar d789da: OUTPUT«in B␤»

[10:33] <camelia> ..rakudo-jvm cd19db: ( no output )

[10:34] <psch> r: A: for ^1 { B: for ^1 { last A } }

[10:34] <camelia> rakudo-jvm cd19db: OUTPUT«===SORRY!===␤labeled last without loop construct␤»

[10:34] <camelia> ..rakudo-moar d789da: ( no output )

[10:34] <Zoffix> ah

[10:35] <psch> curiously

[10:35] <psch> r: A: for ^1 { FIRST {}; B: for ^1 { last A } }

[10:35] <camelia> rakudo-jvm cd19db, rakudo-moar d789da: ( no output )

[10:35] <psch> r: A: for ^1 { FIRST {}; B: for ^1 { say "in B"; last A } }

[10:35] <camelia> rakudo-jvm cd19db, rakudo-moar d789da: OUTPUT«in B␤»

[10:55] <psch> i've tried looking at &sequential-map and what it changes, but nothing that seems different changes the non-phasery version into a working one

[10:55] <psch> and, well, my stumbling around in ExceptionHandling also seems rather fruitless

[11:08] <tbrowder> nqp-m: my @arr := <0 1 2 3>; for @arr -> $a, $b {say("a = $a, b = $b")}

[11:08] <camelia> nqp-moarvm: OUTPUT«a = 0, b = 1␤a = 2, b = 3␤»

[11:11] <stmuk> http://rakudo.org/2016/07/22/announce-rakudo-star-release-2016-07/

[12:04] <[Coke]> reminder: anyone who has weird permission issues on perl.org, please open a ticket with the admins.

[12:04] <[Coke]> email address at the bottom of the page on the site.

[12:04] <[Coke]> er, on rt.perl.org, specifically

[12:18] <unmatched}> Who's got the keys for @rakudoperl twitter account? Looks like it's not been updated for ages: https://twitter.com/rakudoperl

[12:21] <RabidGravy> hey I didn't even know it existed

[12:31] <moritz> unmatched}: try asking pmichaud++

[12:38] <dalek> star: 7f1d752 | (Zoffix Znet)++ | tools/star/release-guide.pod:

[12:38] <dalek> star: Include asking users to advertise the release

[12:38] <dalek> star: review: https://github.com/rakudo/star/commit/7f1d752bc9

[12:38] <dalek> star: e74732c | lizmat++ | tools/star/release-guide.pod:

[12:38] <dalek> star: Merge pull request #73 from zoffixznet/patch-1

[12:38] <dalek> star:

[12:38] <dalek> star: Include asking users to advertise the release

[12:38] <dalek> star: review: https://github.com/rakudo/star/commit/e74732c870

[12:53] <unmatched}> .ask pmichaud is there a possibility of adding several trusted users to https://twitter.com/rakudoperl Twitter account, so we could post announcements such us weeklies and R* releases?

[12:53] <yoleaux2> unmatched}: I'll pass your message to pmichaud.

[13:05] <nine> This sounds like an intriguing idea: https://github.com/niner/Inline-Perl5/issues/69

[13:05] <nine> Any thoughts on it?

[13:07] <psch> the twigil feels somewhat misplaced

[13:07] <lizmat> nine: looks to me something that a sufficiently smart AT-KEY should be able to handle lazily ?

[13:07] <psch> aside from that it looks perfectly fine

[13:08] <perlpilot> nine: make it so  :)

[13:08] <psch> as in, i'm not sure how you get %*PERL5 in time during module import

[13:08] <psch> well, unless simply exporting dynamics works...

[13:08] <nine> psch: yes, that's the unknown part

[13:09] <psch> m: module Foo { my %*BAR is export = baz => "quux" }; import Foo; say %*BAR.perl

[13:09] <camelia> rakudo-moar d789da: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Can't apply trait 'is export' on a my scoped variable. Only our scoped variables are supported.␤at <tmp>:1␤------> module Foo { my %*BAR is export⏏ = baz => "quux" }; import Foo; say %*BA␤    …»

[13:09] <psch> m: module Foo { our %*BAR is export = baz => "quux" }; import Foo; say %*BAR.perl

[13:09] <camelia> rakudo-moar d789da: OUTPUT«{}␤»

[13:10] <nine> module Foo { our %BAR is export = baz => "quux" }; import Foo; say %BAR.perl

[13:10] <nine> m: module Foo { our %BAR is export = baz => "quux" }; import Foo; say %BAR.perl

[13:10] <camelia> rakudo-moar d789da: OUTPUT«{:baz("quux")}␤»

[13:10] <nine> But that's just not as pretty

[13:10] <lizmat> m: module Foo { our %BAR is export is dynamic = baz => "quux" }; import Foo; say %BAR.perl   # still dynamic

[13:10] <camelia> rakudo-moar d789da: OUTPUT«{:baz("quux")}␤»

[13:12] <psch> m: module Foo { my %BAR = baz => "quux"; sub term:<%*BAR> is export { %BAR };  }; import Foo; say %*BAR.perl

[13:12] <camelia> rakudo-moar d789da: OUTPUT«{:baz("quux")}␤»

[13:12] <psch> ...

[13:12] <nine> Well, first things first. I can just start my adding a method to Inline::Python for accessing globals

[13:12] <nine> psch: that's....wow

[13:12] * psch gets out

[13:12] <nine> I don't know what to say :)

[13:12] <lizmat> actually, why is it that we cannot export a lexically scoped variable ?

[13:14] <dalek> rakudo/nom: b89bf9a | lizmat++ | src/core/Hash.pm:

[13:14] <dalek> rakudo/nom: Make Hash.DELETE-KEY about 2x as fast

[13:14] <dalek> rakudo/nom:

[13:14] <dalek> rakudo/nom: - rewrite using nqp ops

[13:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b89bf9af76

[13:17] <dalek> star: 378fdbc | (Zoffix Znet)++ | tools/star/release-guide.pod:

[13:17] <dalek> star: Include Hacker News as potential places to advertise releases at

[13:17] <dalek> star: review: https://github.com/rakudo/star/commit/378fdbc049

[13:17] <dalek> star: 0a51fe4 | (Steve Mynott)++ | tools/star/release-guide.pod:

[13:17] <dalek> star: Merge pull request #74 from zoffixznet/patch-1

[13:17] <dalek> star:

[13:17] <dalek> star: Include Hacker News as potential places to advertise releases at

[13:17] <dalek> star: review: https://github.com/rakudo/star/commit/0a51fe4db5

[13:32] <nine> Oh, in Perl 5 the name of the variable is actually @ not $@

[13:40] <stmuk> . o ( should we publish on 4chan if we include hackernews )

[13:41] <jnthn> goodness that gradle container build spews some output

[13:41] <jnthn> uh, ww

[14:07] <nine> m: module Foo { our $s = 1; our %h := class Foo is Associative { method AT-KEY($name) { "foo" } }.new; }; $Foo::s.say; %Foo::h<bar>.say

[14:07] <camelia> rakudo-moar b89bf9: OUTPUT«1␤(Any)␤»

[14:07] <nine> What am I doing wrong there?

[14:10] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Make Hash.DELETE-KEY about 2x as fast

[14:10] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/146641338 https://github.com/rakudo/rakudo/compare/d789da1b3022...b89bf9af76db

[14:10] <jnthn> m: module Foo { our $s = 1; our %h := class Foo is Associative { method AT-KEY($name) { "foo" } }.new; }; say %Foo::h.WHAT

[14:10] <camelia> rakudo-moar b89bf9: OUTPUT«(Hash)␤»

[14:11] <jnthn> Curious...

[14:13] <lizmat> m: module Foo { our $s = 1; our %h := class Foo is Associative { method AT-KEY($name) { "foo" } }.new; }; $Foo::s.say; %Foo::h.AT-KEY("bar").say

[14:13] <camelia> rakudo-moar b89bf9: OUTPUT«1␤(Any)␤»

[14:14] <lizmat> m: module Foo { our $s = 1; our %h := class Foo is Associative { method AT-KEY($name) { "foo" } }.new; }; $Foo::s.say; %Foo::h.Foo::AT-KEY("bar").say

[14:14] <camelia> rakudo-moar b89bf9: OUTPUT«1␤Cannot dispatch to method AT-KEY on Foo because it is not inherited or done by Hash␤  in block <unit> at <tmp> line 1␤␤»

[14:14] <lizmat> m: module Foo { our $s = 1; our %h := class Foo { method AT-KEY($name) { "foo" } }.new; }; $Foo::s.say; %Foo::h.Foo::AT-KEY("bar").say

[14:14] <camelia> rakudo-moar b89bf9: OUTPUT«Type check failed in binding; expected Associative but got Foo::Foo (Foo::Foo.new)␤  in block <unit> at <tmp> line 1␤␤»

[14:15] <lizmat> m: module Foo { our $s = 1; our %h := class Foo is Hash is Associative { method AT-KEY($name) { "foo" } }.new; }; $Foo::s.say; %Foo::h.Foo::AT-KEY("bar").say

[14:15] <camelia> rakudo-moar b89bf9: OUTPUT«1␤Cannot dispatch to method AT-KEY on Foo because it is not inherited or done by Hash␤  in block <unit> at <tmp> line 1␤␤»

[14:15] <lizmat> m: module Foo { our $s = 1; our %h := class Foo is Hash is Associative { method AT-KEY($name) { "foo" } }.new; }; $Foo::s.say; Foo.new.AT-KEY("bar").say

[14:15] <camelia> rakudo-moar b89bf9: OUTPUT«1␤You cannot create an instance of this type (Foo)␤  in block <unit> at <tmp> line 1␤␤»

[14:16] <lizmat> m: module Foo { our $s = 1; our %h := class Foo is Associative { method AT-KEY($name) { "foo" } }.new; }; $Foo::s.say; Foo.new.AT-KEY("bar").say

[14:16] <camelia> rakudo-moar b89bf9: OUTPUT«1␤You cannot create an instance of this type (Foo)␤  in block <unit> at <tmp> line 1␤␤»

[14:17] <lizmat> m: module Foo { our $s = 1; class Foo is Associative { method AT-KEY($name) { "foo" } }; our %h := Foo.new; }; $Foo::s.say; Foo.new.AT-KEY("bar").say

[14:17] <camelia> rakudo-moar b89bf9: OUTPUT«1␤You cannot create an instance of this type (Foo)␤  in block <unit> at <tmp> line 1␤␤»

[14:17] <lizmat> hmmmm

[14:20] <lizmat> afk&

[14:23] <nine> m: module Bar { our $s = 1; class Foo is Associative { method AT-KEY($name) { "foo" } }; our %h := Foo.new; }; $Foo::s.say; Foo.new.AT-KEY("bar").say

[14:23] <camelia> rakudo-moar b89bf9: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    Foo used at line 1␤␤»

[14:23] <nine> m: module Bar { our $s = 1; class Foo is Associative { method AT-KEY($name) { "foo" } }; our %h := Foo.new; }; $Foo::s.say; Bar::Foo.new.AT-KEY("bar").say

[14:23] <camelia> rakudo-moar b89bf9: OUTPUT«(Any)␤foo␤»

[14:24] <nine> m: module Bar { our $s = 1; class Foo is Associative { method AT-KEY($name) { "foo" } }; our %h := Foo.new; }; $Foo::s.say; Bar::Foo.new<bar>.say

[14:24] <camelia> rakudo-moar b89bf9: OUTPUT«(Any)␤foo␤»

[14:26] <gfldex> please review https://github.com/perl6/doc/commit/fbb443ed73 as it sounds utterly wrong

[14:26] <[TuxCM]> This is Rakudo version 2016.07.1-29-gb89bf9a built on MoarVM version 2016.07-4-g236058a

[14:26] <[TuxCM]> test            15.154

[14:26] <[TuxCM]> test-t           8.061

[14:26] <[TuxCM]> csv-parser      16.160

[14:37] <lizmat> nine: shouldn't that be "does Associative" ?

[14:37] <lizmat> really afk&

[14:37] <[Coke]> gfldex: "its default value", not "it's"

[14:38] <gfldex> that's not what i meant with "sounds utterly wrong"

[14:38] <[Coke]> I know

[14:39] <[Coke]> I think the focus should be on "Nil is a special sentinel value" rather than "Nil breaks things", but I don't think your statements there are incorrect.

[14:40] <[Coke]> also the section immediately before that already says that if you assign Nil you get the default back.

[14:42] <jnthn> Note that Nil is just a more general kind of Failure

[14:42] <jnthn> m: say Failure ~~ Nil

[14:42] <camelia> rakudo-moar b89bf9: OUTPUT«True␤»

[14:43] <jnthn> Nil is the absence of a value. Failure is the absence of a value together with a reason for said absence.

[14:43] <[Coke]> I would put any thoughts about Nil/Failure into a separate section, rather than putting them in every spot where you could return a Nil.

[14:45] <unmatched}> jnthn: so then assigning a Nil to a :D variable should be acceptable? There's a ticket for that: https://rt.perl.org/Ticket/Display.html?id=127958#ticket-history

[14:45] <gfldex> jnthn: I do understand what Nil is for. But I don't agree with initialisers that are return values of routines producing undefined values in definedness constrained containers.

[14:46] <gfldex> m: my Int:D $i = Nil;

[14:46] <camelia> rakudo-moar b89bf9: ( no output )

[14:46] <gfldex> m: my Int:D $i = Nil; say $i.defined;

[14:46] <camelia> rakudo-moar b89bf9: OUTPUT«False␤»

[14:46] <jnthn> Umm...

[14:46] <jnthn> I don't know. You'd have to ask TimToady.

[14:47] <jnthn> I didn't really want Failure or Nil to be able to sneak through *anywhere*. :P

[14:47] <jnthn> I suspect on :D things they should not.

[14:47] <jnthn> On unconstrained things they certainly can.

[14:47] <unmatched}> .ask TimToady would you offer comments on whether my Int:D $i = Nil; should be accepted? There's a ticket for it: https://rt.perl.org/Ticket/Display.html?id=127958#ticket-history and discussion: http://irclog.perlgeek.de/perl6-dev/2016-07-22#i_12889080

[14:47] <yoleaux2> unmatched}: I'll pass your message to TimToady.

[14:48] <jnthn> (e.g. without :D)

[14:49] <gfldex> m: my Str:D $f = Str:D; $f.say

[14:49] <camelia> rakudo-moar b89bf9: OUTPUT«Type check failed in assignment to $f; expected Str:D but got Str:D␤  in block <unit> at <tmp> line 1␤␤»

[14:49] <gfldex> jnthn: also ^^^

[14:49] <jnthn> Yeah, that one is in the "should not work" direction :)

[14:50] <jnthn> The error is interesting though correct :)

[14:50] <jnthn> In fact that one's clear cut correct

[14:50] <jnthn> 'cus it doesn't involve a Nil or Failure :)

[14:51] <jnthn> We could maybe when the value is a type object put the words type object on the end of the error

[14:51] <jnthn> "expected Str:D but got Str:D type object"

[14:51] <gfldex> that would help

[14:54] <jnthn> Should be an easy patch if anyone fancies it :)

[14:55] * [Coke] is bummed that he's writing this proof of concept in perl 5. :|

[14:58] <jnthn> Phew, $dayjob duties done for the week. Rest time. :)

[15:14] * [Coke] switches to p6, feeling better about life.

[15:18] <unmatched}> :/

[15:19] <unmatched}> Ah, I think Linoide killed off the box to do the Xen vuln update

[15:24] <nine> lizmat: yes it should, but doesn't make a difference :/

[17:30] <dalek> nqp: a98d5f5 | (Pawel Murias)++ | src/vm/js/ (2 files):

[17:30] <dalek> nqp: [js] Remove dead code.

[17:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a98d5f5913

[17:30] <dalek> nqp: 3eb8bd8 | (Pawel Murias)++ | src/vm/js/ (5 files):

[17:30] <dalek> nqp: [js] Inject unwrapped methods into objects.

[17:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3eb8bd81db

[17:38] * unmatched} eyes mst

[17:38] <unmatched}> TrollTracker, eh? :)

[17:56] <gfldex> unmatched}: could you run `panda installdeps .` on docs please?

[18:00] <unmatched}> done.

[18:00] <gfldex> thanks. i'm watching the buildlog

[18:18] <gfldex> not sharing the precompiled .pods on docs is intentionally right now. If the build works I will get that fixed next.

[18:37] <gfldex> timotimo: could you copy the updated util/update-and-sync to wherever it needs to go please?

[18:38] <timotimo> what repo is that in? docs?

[18:38] <gfldex> yes

[18:38] <timotimo> let me have a look

[18:40] <timotimo> it doesn't need to be moved anywhere

[18:41] <gfldex> does it call make instead of perl htmlify.p6 ?

[18:41] <timotimo> no

[18:42] <timotimo> it runs ./doc/util/update-and-sync

[18:42] <gfldex> i mean what does update-and-sync call?

[18:43] <timotimo> make html || sync-build-log

[18:43] <timotimo> ./util/sync

[18:44] <gfldex> the build log seams to disagree https://docs.perl6.org/build-log/build-2016-07-22T18:20+0000.log

[19:03] <timotimo> i don't get it.

[19:10] <gfldex> timotimo: now make is called and it fails. Looks like panda installed pod2onepage into some /bin but that /bin is not in PATH

[19:11] <timotimo> urgh

[19:11] <timotimo> but it should accept your changes via git directly

[19:11] <gfldex> timotimo: it should

[19:11] <gfldex> but i don't know where panda puts stuff on the host

[19:12] <gfldex> `find / -name 'pod2onepage'`

[19:13] <gfldex> it should be `export PATH="$PATH:/home/dex/.perl6/bin/"`

[19:13] <gfldex> o.0

[19:13] <gfldex> export PATH="$PATH:$HOME/.perl6/bin/"

[19:17] <gfldex> also any changed do /util/update-and-sync must show up in the build that follows the git pull that pulls the changed file

[19:19] <timotimo> ah

[19:19] <timotimo> right, that makes sense

[19:19] <timotimo> we could put a check for that into the update-and-sync, though

[19:20] <timotimo> git show --shortstat | grep update-and-sync && exec $0 or whatever

[19:20] <gfldex> and to get that we would need 2 commits :->

[19:21] <gfldex> we need to have that PATH set correctly in any case and that should solve the problem

[19:25] <timotimo> it should have your home's bin in its path?

[19:26] <timotimo> because ~/.perl6/bin doesn't exist in the doc.perl6.org user

[19:26] <gfldex> in that case run `find / -name 'pod2onepage'`

[19:26] <gfldex> that will tell you where panda put the file

[19:26] <timotimo> /home/rakudobrew/rakudobrew/moar-2016.06/install/share/perl6/site/bin/pod2onepage

[19:27] <timotimo> we need to source the global rakudobrew in the user's .profile or something

[19:27] <timotimo> i have to destroy some dinner now :)

[19:28] <gfldex> that means if we update star on docs, the PATH will be wrong again

[19:29] <timotimo> ... i just said we need to source the rakudobrew; that would make PATH always right

[20:23] <gfldex> m: sub f(){} say "{f(}"; say 'oi!';

[20:23] <camelia> rakudo-moar b89bf9: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> sub f(){}⏏ say "{f(}"; say 'oi!';␤    expecting any of:␤        infix␤        infix stopper␤        statement en…»

[20:28] <gfldex> timotimo: travis wanted that path fixed too what seams to work

[20:34] <timotimo> aaarrrgghhhh

[20:34] <timotimo> yeah.

[20:35] <timotimo> but that can be changed in the travis.yml only

[20:35] <timotimo> or ... just add it to the path, whatever.

[20:38] <gfldex> timotimo: could gist what `cat /home/rakudobrew/.rakudobrew-bash` says?

[20:41] <timotimo> PATH=$PATH:/home/rakudobrew/rakudobrew/bin

[20:44] * timotimo takes a little walk

[20:44] <timotimo> (yes, pokemon go. so sue me.)

[21:24] <gfldex> timotimo: the workaround worked, the build is building

[21:57] <dalek> rakudo/nom: 7257b3e | lizmat++ | src/core/Hash.pm:

[21:57] <dalek> rakudo/nom: Make Hash[Any,Any].AT-KEY about 20% faster

[21:57] <dalek> rakudo/nom:

[21:57] <dalek> rakudo/nom: - rewritten using nqp ops

[21:57] <dalek> rakudo/nom: - smarter handling of empty typed hashes

[21:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7257b3e22d

[22:27] <dalek> rakudo/nom: a37cd22 | lizmat++ | src/core/Bag.pm:

[22:27] <dalek> rakudo/nom: Make repeated calls on Bag.WHICH 5x as fast

[22:27] <dalek> rakudo/nom:

[22:27] <dalek> rakudo/nom: - by using nqp::attrinited rather than //=

[22:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a37cd22121

[22:29] <lizmat> good night, #perl6-dev!

[22:41] <timotimo> gfldex: i'm glad

[22:53] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make Hash[Any,Any].AT-KEY about 20% faster

[22:53] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/146766567 https://github.com/rakudo/rakudo/compare/b89bf9af76db...7257b3e22d17

[23:37] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make repeated calls on Bag.WHICH 5x as fast

[23:37] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/146771969 https://github.com/rakudo/rakudo/compare/7257b3e22d17...a37cd221210b
