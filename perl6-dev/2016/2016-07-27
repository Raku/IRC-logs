[00:31] <dalek> rakudo/nom: aada71a | TimToady++ | src/Perl6/World.nqp:

[00:31] <dalek> rakudo/nom: want nibble_to_str's ast

[00:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aada71af66

[04:41] <dalek> rakudo/nom: 5334cb7 | TimToady++ | src/Perl6/Actions.nqp:

[04:41] <dalek> rakudo/nom: propagate sinkness to thunks of and/or etc.

[04:41] <dalek> rakudo/nom:

[04:41] <dalek> rakudo/nom: (Note, apparently unhides a bug in roles where generic statements are

[04:41] <dalek> rakudo/nom: not correctly marked as wanted, or incorrectly sunk.)

[04:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5334cb7256

[04:42] <TimToady> m: say [1,2,3] or 42  # will warn soon

[04:42] <yoleaux2> 26 Jul 2016 02:24Z <gfldex> TimToady: i somehow feel that definedness contraints on --> and returns are to missleading to have. see: m: class Baddy is Nil {}; sub niler( --> Any:D ) { Baddy.new }; my $i = 42; $i = niler; dd $i;

[04:42] <camelia> rakudo-moar aada71: OUTPUT«[1 2 3]␤»

[04:42] <yoleaux2> 26 Jul 2016 02:32Z <gfldex> TimToady: what makes me uneasy are lines line the following. A new and aspiring Perl 6 Programmer might take the `--> IO::Path:D` at face value. Given it's IO and we support Windows I would not bet my life on the :D part. https://docs.perl6.org/type/IO$COLON$COLONPath#method_absolute

[04:44] <TimToady> m: 42 with [1,2,3]

[04:44] <camelia> rakudo-moar aada71: ( no output )

[04:44] <TimToady> m: 42 ?? 43 !! 44

[04:44] <camelia> rakudo-moar aada71: ( no output )

[04:45] <dalek> roast: 7345b3b | usev6++ | S04-declarations/smiley.t:

[04:45] <dalek> roast: Fudge tests for RT #127958 for rakudo-j

[04:45] <dalek> roast: review: https://github.com/perl6/roast/commit/7345b3b350

[04:45] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127958

[04:52] <TimToady> m: say [1,2,3] or 42

[04:52] <camelia> rakudo-moar 5334cb: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant integer 42 in sink context (line 1)␤[1 2 3]␤»

[04:52] <TimToady> m: 42 with [1,2,3]

[04:52] <camelia> rakudo-moar 5334cb: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant integer 42 in sink context (line 1)␤»

[04:52] <TimToady> m: 42 ?? 43 !! 44

[04:52] <camelia> rakudo-moar 5334cb: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant integer 43 in sink context (line 1)␤Useless use of constant integer 44 in sink context (line 1)␤»

[04:52] <TimToady> m: 43 xx 44

[04:52] <camelia> rakudo-moar 5334cb: ( no output )

[04:52] <TimToady> dunno why that one doesn't warn yet...

[04:54] <TimToady> m: my $x = 42; $x xx 44

[04:54] <camelia> rakudo-moar 5334cb: OUTPUT«WARNINGS for <tmp>:␤Useless use of $x in sink context (line 1)␤»

[04:54] <TimToady> at least we get that much

[04:55] <TimToady> m: my $x = 42; $x++ xx 44

[04:55] <camelia> rakudo-moar 5334cb: ( no output )

[07:42] <lizmat> good *, #perl6-dev

[07:43] * lizmat gets a warning during stage optimize now

[07:46] <lizmat> in Enumeration: multi method pick(::?CLASS:D: *@pos) { self xx +?( @pos[0] // 1 )     }

[07:47] <lizmat> and: multi method roll(::?CLASS:D: *@pos) { self xx +?( @pos[0] // 1 )     }

[07:47] * lizmat wonders if TimToady's last change uncovered a bug

[08:45] <jnthn> lizmat: Well, TimToady did note it uncovers a bug, in the commit message :)

[08:53] <nine> The code in question doesn't look all that buggy to me. It also seems to be spectested

[08:56] <nine> or maybe not

[09:19] <nine> Actually I don't quite understand what those multi candidates are supposed to do.

[09:23] <nine> lizmat: What's multi method pick(::?CLASS:D: *@pos) for? It only uses the first value in @pos anyway.

[09:24] <nine> AFAICT the warning is wrong. The code works as is. Putting a return before the self fixes the warning and doesn't change behavior, so it looks like the sink warning is failing on the implicit return.

[09:33] <jnthn> Righty, time to do Perl 6 stuff. :)

[09:34] <jnthn> https://rt.perl.org/Ticket/Display.html?id=128736 seems a little concerning...

[11:02] <lizmat> jnthn: I consider #128736 to be on my plate, since I probably borked it in the first place

[11:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128736

[11:03] <lizmat> so, feel free to pursue, or to leave it to me  :-)

[11:32] <jnthn> I've hunting a GC orchestration hang and examining its performance today, which I think will keep me more than busy enough :)

[11:38] <lizmat> ok  :-)

[11:39] <jnthn> One of those fun jobs where different profilers can give you results a factor of 100 different :)

[11:39] <lizmat> yuck  :-(

[11:40] <jnthn> Well, just means you gotta understand their methodology and which one to care about :)

[11:50] * jnthn breaks out a third profiler :)

[13:06] <[Coke]> I did a little debug on RT #125501 - could use an actual windows developer to peek at it. (for one, it didn't seem to create the install/ directory before it needed it)

[13:06] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125501

[13:29] <dalek> rakudo/nom: 6d1e95c | lizmat++ | src/core/Rakudo/Internals.pm:

[13:29] <dalek> rakudo/nom: Remove .plan

[13:29] <dalek> rakudo/nom:

[13:29] <dalek> rakudo/nom: It was a plan once, but hasn't been for a while

[13:29] <dalek> rakudo/nom:

[13:29] <dalek> rakudo/nom: If we ever decide to revive the .plan idea, we can add it again.

[13:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6d1e95c96b

[13:43] <dalek> nqp: 94712df | (Pawel Murias)++ | src/vm/js/Operations.nqp:

[13:43] <dalek> nqp: [js] Remove old TODO.

[13:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/94712dfe67

[13:43] <dalek> nqp: 5647d54 | (Pawel Murias)++ | src/vm/js/nqp-runtime/sixmodel.js:

[13:43] <dalek> nqp: [js] Remove old TODOs.

[13:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5647d54886

[13:43] <TimToady> my guess is that the uncovered bug has something to do with the method being in a role somehow, and maybe compiling generic code doesn't quite do the wanting of the final expression somehow

[13:44] <TimToady> but it's a benign warning, albeit incorrect

[13:48] <TimToady> datapoint: putting in an explicit return suppresses the warning

[13:49] <TimToady> (because return explicitly wants its argument)

[13:50] <TimToady> m: $_ = 'datapoint'; say S:5th/''/ /

[13:50] <camelia> rakudo-moar 5334cb: OUTPUT«data point␤»

[13:56] <TimToady> no, I'm wrong about generics

[13:56] <TimToady> m: my method bar() { self xx 42 }

[13:56] <camelia> rakudo-moar 6d1e95: OUTPUT«WARNINGS for <tmp>:␤Useless use of self symbol in sink context (line 1)␤»

[13:56] <TimToady> m: my method bar() { pi xx 42 }

[13:56] <camelia> rakudo-moar 6d1e95: ( no output )

[13:57] <TimToady> seems to be a difficulty with self, perhaps can't take the WANTED annotation

[13:58] <TimToady> well, that should be pretty easy to chase down after I actually wake up

[14:02] <TimToady> m: my method bar($a) { $a xx 42 }

[14:02] <camelia> rakudo-moar 6d1e95: OUTPUT«WARNINGS for <tmp>:␤Useless use of $a in sink context (line 1)␤»

[14:03] <TimToady> no, it's pi that is too simple to take an annotation

[14:03] <TimToady> (iirc)

[14:05] <TimToady> ah, no, xx optimizes constants differently, should really wake up before spamming the channel...

[14:06] <[Coke]> zoffix, RT#128744 - I assume you meant NYI, not NIY?

[14:06] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128744

[14:06] <TimToady> Not Implemented Yet means the same thing:)

[14:06] <[Coke]> but no one searching for NYI will find it. :|

[14:06] * [Coke] changes it

[14:06] <lizmat> masak: my @a = (); @a.splice(0,0,42)   # workaround for RT #128736

[14:06] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128736

[14:07] <TimToady> m: $_ xx 1  # minimal test case is minimal

[14:07] <camelia> rakudo-moar 6d1e95: OUTPUT«WARNINGS for <tmp>:␤Useless use of $_ in sink context (line 1)␤»

[14:07] <TimToady> well, except that *is* in sink context

[14:08] <TimToady> m: $_ = -> $a { $a xx 1 }

[14:08] <camelia> rakudo-moar 6d1e95: OUTPUT«WARNINGS for <tmp>:␤Useless use of $a in sink context (line 1)␤»

[14:09] <TimToady> and that shouldn't be sank

[14:11] <unmatched}> [Coke]: yeah

[14:11] <unmatched}> I don't know why people use NYI.. It sounds Engrish to put "Yet" in the middle

[14:12] <lizmat> I guess that's one of the few differences between English and American

[14:12] <unmatched}> Is it common to put it in the middle in UK?

[14:13] <lizmat> it has more to do with French grammar influences in English, as opposed to the German grammar influences in American

[14:14] <lizmat> actually, thinking about it, NYI is more American

[14:14] <lizmat> Not Implemented Yet would be more French   "pas implemente encore" or something like that  :-)

[14:15] <lizmat> whereas german: noch nicht implementiert aka not yet implemented

[14:15] <unmatched}> That may be why NIY sounds more pleasant to my Canadian ear

[14:15] <lizmat> but who am I as a native Dutch speaker  :-)

[14:15] <DrForr> Of course the acronym would need to be a further permutation,maybe YIN.

[14:16] <MasterDuke> English is a Germanic language

[14:16] <geekosaur> I, nd most people I know, would say "not implemented yet". I thought the ordering was a matter of emphasis, making sure the "yet" was not dangling off the end letting the "not implemented" be primary

[14:18] <geekosaur> MasterDuke, but it is the result of a trainwreck between two Germanic languages and a French language (iirc old Normandy's French was somewhat distinct from the Parisian French that became "the standard")

[14:19] <MasterDuke> true, i wouldn't say it took any of the regularness of any of its parent languages

[14:20] <TimToady> no, German would translate to YNI

[14:21] <geekosaur> ...that's what I thought...

[14:22] <unmatched}> m: "NIY".comb.permutations».join.say

[14:22] <camelia> rakudo-moar 6d1e95: OUTPUT«(NIY NYI INY IYN YNI YIN)␤»

[14:22] <unmatched}> \o/

[14:22] <MasterDuke> which in English could be 'as yet not implemented'

[14:23] <MasterDuke> or 'as of yet not implemented'

[15:11] <dalek> roast: 0a3a0e9 | lizmat++ | S09-multidim/methods.t:

[15:11] <dalek> roast: There is no .plan for the foreseeable future

[15:11] <dalek> roast: review: https://github.com/perl6/roast/commit/0a3a0e9e9a

[15:12] <dalek> roast/6.c-errata: f64a136 | lizmat++ | S09-multidim/methods.t:

[15:12] <dalek> roast/6.c-errata: There is no .plan for the foreseeable future

[15:12] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/f64a13655f

[15:14] <dalek> rakudo/nom: 3bea9d8 | lizmat++ | src/core/Rakudo/Internals.pm:

[15:14] <dalek> rakudo/nom: Make sure that .pop|shift|splice fail here

[15:14] <dalek> rakudo/nom:

[15:14] <dalek> rakudo/nom: For some reason, other candidates of .splice were leaking through here,

[15:14] <dalek> rakudo/nom: causing spectest failure with the wrong exception.

[15:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3bea9d823f

[15:16] <lizmat> afk&

[15:27] <[Coke]> should NQP tickets go into github nqp issues or is rt perl6 queue fine?

[15:27] <[Coke]> because we have them in both places right now.

[15:28] <[Coke]> I am OK with having multiple bug queues, rather than trying to categorize everything in RT.

[15:28] <[Coke]> anyone else have a preference?

[15:30] <unmatched}> I like Github over RT, but I'm ok with having both queues if only to not spend labour on moving tickets from one queue to another

[15:30] <jnthn> [Coke]: Github issues for NQP

[15:31] * jnthn almost dealt with that earlier then got distracted hutning concurrency bugs :)

[15:31] <jnthn> .oO( If you hunt this circular wait, I'll move the ticket? ;) )

[15:31] <unmatched}> :)

[15:32] <[Coke]> jnthn: that's where I'm leaning, as well. I'll migrate any tickets I find there, and try to update https://github.com/rakudo/rakudo/wiki to have an explanation of our list of places to report bugs.

[15:35] <dalek> rakudo/nom: 948aee0 | jnthn++ | src/core/Channel.pm:

[15:35] <dalek> rakudo/nom: Re-order code to avoid a race condition.

[15:35] <dalek> rakudo/nom:

[15:35] <dalek> rakudo/nom: This could lead to deadlocks, such as a hang in S17-supply/syntax.t

[15:35] <dalek> rakudo/nom: on the test involving multiple whenevers over multiple channels and

[15:35] <dalek> rakudo/nom: Promises synchronizing order.

[15:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/948aee0f40

[15:37] * [Coke] wonders if this really old nqp ticket is still relevant: https://github.com/perl6/nqp/issues/145

[15:37] <timotimo> fantastic!

[15:39] <jnthn> [Coke]: Yeah, we should still get around to that at some point :)

[15:39] <jnthn> Not a priority (quite evidently ;))

[15:39] <jnthn> But worthwhile

[15:43] * [Coke] finds a perl6 ticket where the bug report is on:

[15:44] <[Coke]> p6: use nqp; say nqp::index("xxy","y",-1)

[15:44] <camelia> rakudo-moar 3bea9d: OUTPUT«-1␤»

[15:44] <[Coke]> aw, no jvm? (or is it just that slow?)

[15:46] <unmatched}> r: use nqp; say nqp::index("xxy","y",-1)

[15:46] <camelia> rakudo-moar 3bea9d: OUTPUT«-1␤»

[15:46] <camelia> ..rakudo-jvm cd19db: OUTPUT«2␤»

[15:47] <unmatched}> p6 is same as m: https://github.com/perl6/evalbot/blob/master/evalbot.pl#L70

[15:49] <[Coke]> ack, someone moved things around! :)

[15:52] <[Coke]> ok, moved the few nqp-only tickets I could find.

[15:57] <unmatched}> I think I'm out of steam with RT#126119

[15:57] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126119

[15:58] <unmatched}> I don't think what doing fancy math trying to guestimate future leapseconds serves other than to scratch some OCD itch so you could say  "it's less wrong now"

[15:58] <unmatched}> s/think/know/;

[16:00] * unmatched} points to the a response on -compiler list that isn't on RT ticket [yet]

[16:04] <unmatched}> I wonder what Zefram is working on with P6. Their tickets are always about these rare super-edge case scenarios like future gigasecond leap seconds and decorators on numbers

[16:05] <TimToady> he just has a really good feel for boundaries, I think

[16:10] <mst> he likes doing things that should theoretically work and seeing what happens

[16:11] <mst> unmatched}: I'd note that the fact that I also like this got me an honorary Moose core team membership for being a walking destruction test, and at least somewhat contributed to perl6 not ending up with the same edge cases

[16:12] <unmatched}> To note: I'm not complaining. It's good this is being done. I was just curious on what leads to discovery of such bugs :)

[16:12] <unmatched}> m: "q[\x[308]foo]\x[308]".EVAL.perl # other one from Zefram

[16:12] <camelia> rakudo-moar 948aee: OUTPUT«===SORRY!=== Error while compiling /home/camelia/EVAL_0␤Couldn't find terminator [̈ (corresponding [̈ was at line 1)␤at /home/camelia/EVAL_0:1␤------> q[̈foo]̈⏏<EOL>␤    expecting any of:␤        [̈␤»

[16:12] <mst> so ... I think really his point with that one is "if you're going to guess, here's how to guess right"

[16:13] <unmatched}> m: say "[\x[308]" ~~ /^<:Ps>$/

[16:13] <camelia> rakudo-moar 948aee: OUTPUT«｢[̈｣␤»

[16:13] <mst> I think he considers "actually, fuckit, don't guess" to be obviously an option, so didn't explicitly mention it

[16:14] <unmatched}> Would be neat to see some actual algorithm for guestimating leap seconds to see their performance penalty and how accurate and most-importantly predictable they are.

[16:15] <unmatched}> m: DateTime.new("2016-12-31T23:59:60")

[16:15] <camelia> rakudo-moar 948aee: ( no output )

[16:15] <unmatched}> star: DateTime.new("2016-12-31T23:59:60")

[16:15] <camelia> star-m 2016.04: OUTPUT«Second out of range. Is: 60, should be in 0..^60; There is no leap second on UTC 2016-12-31␤  in block <unit> at <tmp> line 1␤␤»

[16:16] <mst> unmatched}: if you asked, I'm sure Zefram could provide you more information than you ever wanted ;)

[16:17] <unmatched}> :)

[16:21] <arnsholt> [Coke]: I started an attempt at killing of O being weird at some point, but foundered on some issue or other

[16:22] <arnsholt> You get into bootstrappy issues. The stage0 compiler expects the current API, so it can't just be replaced wholesale

[16:33] <arnsholt> Ah, except no. As I point out in a comment on the issue =D

[16:47] <jnthn> m: (supply { whenever Supply.from-list(1..10) { my $val = $_; LAST { say $val; } } }).tap(&say)

[16:47] <camelia> rakudo-moar 948aee: OUTPUT«10␤»

[16:47] <jnthn> m: (supply { whenever Supply.from-list(1..10) { my $val = $_; LAST say $val; } }).tap(&say)

[16:47] <dalek> rakudo/nom: 4c848b0 | TimToady++ | src/Perl6/Actions.nqp:

[16:47] <dalek> rakudo/nom: make sure xx propagates wantedness correctlier

[16:47] <dalek> rakudo/nom:

[16:47] <dalek> rakudo/nom: We needed to handle the thunky and non-thunky cases differently.

[16:47] <dalek> rakudo/nom: (Also, methods were not marking their final statement as wanted.)

[16:47] <camelia> rakudo-moar 948aee: OUTPUT«(Any)␤»

[16:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4c848b0216

[16:48] <jnthn> bisectable: (supply { whenever Supply.from-list(1..10) { my $val = $_; LAST say $val; } }).tap(&say)

[16:48] <bisectable> jnthn: On both starting points the exit code is 0 and the output is identical as well

[16:48] <bisectable> jnthn: Output on both points: (Any)

[16:48] <jnthn> star: (supply { whenever Supply.from-list(1..10) { my $val = $_; LAST say $val; } }).tap(&say)

[16:48] <camelia> star-m 2016.04: OUTPUT«(Any)␤»

[16:48] <jnthn> Hmm

[16:49] <jnthn> How the heck did Supply.tail work before with that bust...

[16:50] <jnthn> (It uses it and very mysteriously works o.O)

[16:50] <jnthn> Or rather, worked before I fixed another broken thing

[16:54] <TimToady> with latest change, finds a real bug in the setting

[16:54] <TimToady> in src/core/Block.pm: my $need_cap = $sig.count == Inf and not ($slurp_p and $slurp_n);

[16:54] <TimToady> skids: ^^^ your code, according to git :)

[16:56] <TimToady> buy maybe you just reindented someone else's code...

[16:58] <skids> So...what was the latest change?

[16:59] <TimToady> gets 'Useless use of "not"' with my latest wantedness checks

[16:59] <TimToady> because 'and' is looser than =

[17:00] <skids> Oh.  Yeah that's a problem.

[17:03] <skids> Hrm not sure what the actual affect might be.

[17:03] <skids> *effect

[17:08] <skids> I think in the misbehaving case it just runs an unecessary grep and a couple unecessary ||=s

[17:09] <[Coke]> .u O

[17:09] <yoleaux2> U+004F LATIN CAPITAL LETTER O [Lu] (O)

[17:10] <[Coke]> RT: 1325; @LARRY: 4; CONC: 8; GLR: 6; JVM: 66; LHF: 1; LTA: 83; NEW: 864; NYI: 30; OSX: 6; PERF: 18; POD: 9; PRECOMP: 8; RFC: 24; SEGV: 27; STAR: 1; TESTNEEDED: 10; TODO: 8; UNI: 12; UNTAGGED: 650; WEIRD: 3

[17:11] <[Coke]> TimToady: @LARRY tickets might be of interest to you.

[17:12] <unmatched}> To be fair—as originally planned—@LARRY isn't just for Larry, but for all core team.

[17:13] <unmatched}> m: (1,2,3)[1] := 4

[17:13] <camelia> rakudo-moar 4c848b: ( no output )

[17:13] <unmatched}> m: (1,2,3)[1] := 4; say "wut"

[17:13] <camelia> rakudo-moar 4c848b: OUTPUT«wut␤»

[17:13] * TimToady wonders whether he's @LARRY[0] or @LARRY[*-1]...

[17:13] <unmatched}> m: dd (1,2,3)[1] := 4;

[17:13] <camelia> rakudo-moar 4c848b: OUTPUT«Failure.new(exception => X::Bind.new(target => Any), backtrace => Backtrace.new)␤»

[17:13] <unmatched}> TimToady: you're @LARRY.pick :)

[17:14] <TimToady> don't be so picky!

[17:14] <unmatched}> m: sink ((1,2,3)[1] := 4)

[17:14] <camelia> rakudo-moar 4c848b: ( no output )

[17:15] * [Coke] changes some [spec] tickets to [@LARRY] tickets.

[17:16] <[Coke]> also some STD tickets.

[17:16] <unmatched}> m: my $list = (1,2,3); $list[1] := 4; dd $list

[17:16] <camelia> rakudo-moar 4c848b: OUTPUT«List $list = $(1, 2, 3)␤»

[17:17] <unmatched}> bisect: my $list = (1,2,3); $list[1] := 4; dd $list

[17:18] <bisectable> unmatched}: Exit code on a 'good' revision is 1 (which is bad), bisecting with inverted logic

[17:18] <bisectable> unmatched}: bisect log: https://gist.github.com/50508630b16fc42867a9e41f24766a42

[17:18] <bisectable> unmatched}: (2016-07-09) https://github.com/rakudo/rakudo/commit/959cd3b

[17:20] <dalek> rakudo/supply-circular-wait-fix: a1ed2c9 | jnthn++ | src/core/Supply.pm:

[17:20] <dalek> rakudo/supply-circular-wait-fix: Eliminate locking in favor of a work queue.

[17:20] <dalek> rakudo/supply-circular-wait-fix:

[17:20] <dalek> rakudo/supply-circular-wait-fix: The approach taken so far is vulnerable to deadlock, since there can

[17:20] <dalek> rakudo/supply-circular-wait-fix: be unfortunate timing interactions between the up-stream management

[17:20] <dalek> rakudo/supply-circular-wait-fix: of the subscription and downstream flow of values. This changes puts

[17:20] <dalek> rakudo/supply-circular-wait-fix: a work queue in place instead, which successfully avoids the deadlock

[17:20] <dalek> rakudo/supply-circular-wait-fix: and in theory should give lower overhead, less blocked threads, and

[17:20] <dalek> rakudo/supply-circular-wait-fix: hopefully better CPU cache behavior. Regresses a couple of tests,

[17:20] <dalek> rakudo/supply-circular-wait-fix: however.

[17:20] <dalek> rakudo/supply-circular-wait-fix: review: https://github.com/rakudo/rakudo/commit/a1ed2c9aaa

[17:21] <unmatched}> RTed: https://rt.perl.org/Ticket/Display.html?id=128755

[17:21] <dalek> rakudo/supply-circular-wait-fix: 7b554a5 | jnthn++ | src/Perl6/Actions.nqp:

[17:21] <dalek> rakudo/supply-circular-wait-fix: Fix a scoping bug with blockless phasers.

[17:21] <dalek> rakudo/supply-circular-wait-fix:

[17:21] <dalek> rakudo/supply-circular-wait-fix: This in turn fixes a regression in S17-supply/tail.t, however it's

[17:21] <dalek> rakudo/supply-circular-wait-fix: unclear how it managed to work in the past.

[17:21] <dalek> rakudo/supply-circular-wait-fix: review: https://github.com/rakudo/rakudo/commit/7b554a5044

[17:23] <jnthn> throttle.t is still bust, but I'm getting a bit tired for figuring that one out now.

[17:23] <jnthn> (It's only bust in the control messages case, curiously.)

[17:25] <[Coke]> jnthn: tagging RT #125460 as [CONC] (an old S17 ticket)

[17:25] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125460

[17:26] <[Coke]> m: use QRegex:from<NQP>;

[17:26] <camelia> rakudo-moar 4c848b: ( no output )

[17:27] <[Coke]> m: use NQPP6QRegex:from<NQP>;

[17:27] <camelia> rakudo-moar 4c848b: ( no output )

[17:27] <[Coke]> m: use NQPP5QRegex:from<NQP>;

[17:27] <camelia> rakudo-moar 4c848b: ( no output )

[17:28] <jnthn> [Coke]: OK, thanks...good to have things tagged up :)

[17:29] <jnthn> afk for a bit

[17:29] <[Coke]> https://rt.perl.org/Ticket/Display.html?id=120443 - this looks closable, anyone disagree?

[17:36] <[Coke]> m: class A is CORE::Int {}  ; RT #126384

[17:36] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126384

[17:36] <camelia> rakudo-moar 4c848b: OUTPUT«===SORRY!===␤Could not locate compile-time value for symbol CORE::Int␤»

[17:37] <unmatched}> m: ; RT

[17:37] <camelia> rakudo-moar 4c848b: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    RT used at line 1␤␤»

[17:37] <[Coke]> lizmat: you last touche https://rt.perl.org/Ticket/Display.html?id=126664 - is that closable now?

[17:40] <[Coke]> TimToady: there are bunch of rts mentioning "sink" if you're poking around there. :)

[17:48] <[Coke]> unmatched}: looks like a config issue might be impacting mail traffic to RT. the bugadmins are on it.

[17:49] <[Coke]> we have a choice to "reinject missed messages" - it will likely cause a bunch of confusion if this happens; my take is that take any missed messages as missed, and move on. Any thoughts?

[17:51] <unmatched}> Yeah. Anything missed is missed and move on.

[17:53] <[Coke]> I'm also volunteering to become one of the human spam monitors.

[17:55] * unmatched} imagines http://www.blogherald.com/wp-content/uploads/2010/04/humanspam-300x273.jpg

[18:11] <perlpilot> unmatched}: Not "human spam" monitor, but human "spam monitor"  :)

[18:11] <unmatched}> :)

[18:15] <[Coke]> jnthn: found another segfault for you in RT #123434

[18:15] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=123434

[18:18] <japhb> It's also a matter of what gets emphasized: NIY => Not Implemented YET (but will be soon), NYI => Not Yet IMPLEMENTED (but discussed or designed)

[18:19] <japhb> Gah, stupid scrolling bug (thought I was current, but just replied to an hours-old conversation)

[18:20] <TimToady> sorry, that conversation is NIA

[18:25] <dalek> nqp/better-O: 3105e6a | arnsholt++ | src/ (2 files):

[18:25] <dalek> nqp/better-O: Make HLL::Grammar.O take named arguments.

[18:25] <dalek> nqp/better-O:

[18:25] <dalek> nqp/better-O: This fixes the problem of the method manually parsing a string (#145). Since

[18:25] <dalek> nqp/better-O: the old parser code allowed a construct like '%additive, :op<add>' to copy

[18:25] <dalek> nqp/better-O: values from %additive and set the 'op' key to be 'add', I've added a key

[18:25] <dalek> nqp/better-O: 'inherit' which starts out with the named information and then writes in the

[18:25] <dalek> nqp/better-O: named arguments.

[18:25] <dalek> nqp/better-O: review: https://github.com/perl6/nqp/commit/3105e6a6cb

[18:25] <arnsholt> So, fixing #145 turned out to be eminently doable

[18:26] <arnsholt> It changes the API a bit though, so if people have time for a brief review/critique, that'd be grand

[18:28] <[TuxCM]> lizmat, current build fails on Text::CSV

[18:30] <lizmat> [Coke]: probably needs tests still

[18:31] <japhb> [TuxCM]: There have also been guts-ish commits by TimToady and jnthn

[18:31] <japhb> (Depending on when your last successful build was)

[18:35] <lizmat> [TuxCM]: builds ok for me, but has problems in the .Supply tests

[18:35] <TimToady> my changes should only have affected warnings

[18:35] <TimToady> yes, supplies are busted till we resync with jnthn's branches, I suspect

[18:36] * lizmat is about to be afk again

[18:36] <lizmat> so I'm not a person to be doing that right now

[18:36] <TimToady> I think jnthn has to decide when to merge back

[18:41] <dalek> rakudo/nom: debc7c2 | lizmat++ | src/core/List.pm:

[18:41] <dalek> rakudo/nom: Fix for RT #128755

[18:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/debc7c2094

[18:41] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128755

[18:41] <lizmat> afk&

[18:49] <[Coke]> down to 598 untagged tickets.

[18:56] <dalek> roast: 4e09c41 | (Zoffix Znet)++ | S03-binding/nonsense.t:

[18:56] <dalek> roast: Fudge failing and hanging tests

[18:56] <dalek> roast: review: https://github.com/perl6/roast/commit/4e09c41f2d

[18:56] <dalek> roast: 27bee13 | (Zoffix Znet)++ | S03-binding/nonsense.t:

[18:56] <dalek> roast: Binding into List item throws

[18:56] <dalek> roast:

[18:56] <dalek> roast: RT#128755

[18:56] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128755

[18:56] <dalek> roast: review: https://github.com/perl6/roast/commit/27bee13cfe

[18:59] <dalek> rakudo/nom: f0abe86 | (Zoffix Znet)++ | t/spectest.data:

[18:59] <dalek> rakudo/nom: Include S03-binding/nonsense.t in list of run tests

[18:59] <dalek> rakudo/nom:

[18:59] <dalek> rakudo/nom: -The failing/haning tests have now been fudged.

[18:59] <dalek> rakudo/nom: -The file is not present in 6.c-errata branch

[18:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f0abe8647e

[19:00] <[Coke]> https://rt.perl.org/Ticket/Display.html?id=124571 - Pretty sure we snuck lazy in, didn't we?

[19:01] <[Coke]> ah, no, tests still todo'd.

[19:01] <unmatched}> Then maybe they need to be un-todoed

[19:02] <unmatched}> m: my @x = lazy 1..Inf; say @x[42]

[19:02] <camelia> rakudo-moar debc7c: OUTPUT«43␤»

[19:02] <[Coke]> ... if they're todo'd, we'd be seeing them pass unexpectedly if they worked.

[19:02] <unmatched}> Oh, right

[19:02] <unmatched}> m: my $x = lazy 1..3; say $x.is-lazy

[19:02] <camelia> rakudo-moar debc7c: OUTPUT«True␤»

[19:02] <[Coke]> m: my $was_in_lazy; my $var := lazy { $was_in_lazy++; 42 }; use Test; ok !$was_in_lazy,     'lazy block wasn\'t yet executed (1)';

[19:02] <camelia> rakudo-moar debc7c: OUTPUT«Method 'lazy' not found for invocant of class 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[19:03] <[Coke]> m: my num $alpha = Nil; # RT #121518

[19:03] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=121518

[19:03] <camelia> rakudo-moar debc7c: OUTPUT«Cannot unbox a type object␤  in block <unit> at <tmp> line 1␤␤»

[19:10] <[Coke]> .tell nine tagged a [PRECOMP] related bug, RT #128548

[19:10] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128548

[19:10] <yoleaux2> [Coke]: I'll pass your message to nine.

[19:14] <masak> lizmat: thank you. I ended up with this workaround for now: https://github.com/masak/007/commit/ab1a69d8c76b72db16898fd300787d46788bd2a6

[19:20] <[Coke]> LHF: RT #124788 has some skipped tests; for many of them we can remove the skip fudge line.

[19:20] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124788

[19:25] <[Coke]> m: POST {} # RT # 124961

[19:25] <camelia> rakudo-moar f0abe8: OUTPUT«Postcondition '{}' failed␤  in block <unit> at <tmp> line 1␤␤»

[19:25] <masak> \o/

[19:26] <masak> m: POST { Bool.roll }

[19:26] <camelia> rakudo-moar f0abe8: OUTPUT«Postcondition '{ Bool.roll }' failed␤  in block <unit> at <tmp> line 1␤␤»

[19:26] <masak> dangit

[19:26] * masak blows on the dice

[19:27] <masak> m: POST { Bool.roll }

[19:27] <camelia> rakudo-moar f0abe8: ( no output )

[19:27] <masak> \o/

[19:27] <[Coke]> m: my $c; 'abc' ~~ /.{ $c = $¢ }/ ; say $c.WHAT;

[19:27] <camelia> rakudo-moar f0abe8: OUTPUT«(Any)␤»

[19:27] <[Coke]> m: my $c; 'abc' ~~ /.{ say $¢.WHAT }/ ;

[19:27] <camelia> rakudo-moar f0abe8: OUTPUT«Nil␤»

[19:29] <[Coke]> that one might just need a better test (RT #124998)

[19:29] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124998

[19:45] <jnthn> Hm, I did the troublesome supplies changes in a branch.

[19:45] <jnthn> The one that went into master passed all spectets

[19:52] <arnsholt> jnthn: Could you give my better-O branch a once-over? I think it should be good, but my last couple of quick hacks have turned out to be not so quick after all, so I figure it's better safe than sorry =)

[19:55] <jnthn> Moar master / NQP 255d2e9d1f1 / Rakudo 948aee0f405 just gave me a clean spectest on Linux in my VM, TEST_JOBS = 12, 4 cores available to the VM

[20:05] <[TuxCM]> Despite the tests failing, timing:

[20:05] <[TuxCM]> This is Rakudo version 2016.07.1-68-g4c848b0 built on MoarVM version 2016.07-4-g236058a

[20:05] <[TuxCM]> test            14.863

[20:05] <[TuxCM]> test-t           8.004

[20:05] <[TuxCM]> csv-parser      16.288

[20:07] <jnthn> With Rakudo HEAD I also see the failures, for those following along here. :)

[20:07] <jnthn> Given I get them with just a different Rakudo version and on the same MoarVM, I think for now we can probably count the MoarVM changes out.

[20:08] <jnthn> 948aee0f405cbd seems OK

[20:09] <jnthn> Trying the commits since then

[20:11] <jnthn> Broken in 4c848b0216b4

[20:11] <jnthn> TimToady: Did you spectest?

[20:12] <jnthn> Building HEAD + revert of 4c848b021 now and spectesting

[20:13] <jnthn> I'm suspecting that if this does come out clean, it'll be that the change in that commit breaks something in the compilation of supply/whenever blocks or some of the CORE.setting code implementing supplies.

[20:14] <jnthn> Early indications are that revert fixes it.

[20:19] <TimToady> hmm, I did, but assumed the supplies were breaking because you were fiddling with them; guess that was a bad assumption

[20:19] <jnthn> Ah, ok

[20:19] <jnthn> I'll have confirmation in < 1 min

[20:20] <jnthn> Clean spectest with the revert.

[20:20] <jnthn> TimToady: What'd you prefer, that I push the revert, or that I leave you to fix it?

[20:21] <jnthn> (I'm too tired to dig into what it might be, I'm afraid.)

[20:22] <TimToady> I'll fix it, or revert it...

[20:22] <jnthn> OK

[20:22] <TimToady> hopefully just something stupid

[20:22] <jnthn> Local revert scrubbed

[20:22] <jnthn> So I don't push it by accident... :)

[20:40] <dalek> rakudo/nom: 8ede35d | TimToady++ | src/Perl6/Actions.nqp:

[20:40] <dalek> rakudo/nom: unbreak supplies

[20:40] <dalek> rakudo/nom:

[20:40] <dalek> rakudo/nom: Undo wanting of method return till we figure out why it breaks supplies.

[20:40] <dalek> rakudo/nom: (Reintroduces spurious Useless use of 'self'.)

[20:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8ede35d48a

[20:48] <[TuxCM]> All tests successful.

[20:48] <[TuxCM]> Files=28, Tests=22288, 32 wallclock secs ( 3.13 usr  0.16 sys + 89.64 cusr  1.76 csys = 94.69 CPU)

[20:48] <[TuxCM]> Result: PASS

[20:48] <[TuxCM]> thank you

[20:48] <jnthn> \o/

[20:52] <[TuxCM]> This is Rakudo version 2016.07.1-71-g8ede35d built on MoarVM version 2016.07-4-g236058a

[20:52] <[TuxCM]> test            14.869

[20:52] <[TuxCM]> test-t           8.028

[20:52] <[TuxCM]> csv-parser      15.898

[20:53] <japhb> Hanging within ~ half a percent of 8.0 for test-t, it seems

[20:53] <japhb> For the last few days, I mean

[20:57] <jnthn> oh man, I saw the word hanging and thought "oh crap, another deadlock to find" ;P

[22:34] <japhb> Heh
