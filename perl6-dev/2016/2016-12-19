[00:48] <dalek> rakudo/nom: e08f069 | (Lucas Buchala)++ | src/core/ (3 files):

[00:48] <dalek> rakudo/nom: Fix {List,Seq,Range}.is-lazy method for type objects invocants

[00:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e08f069fd9

[00:48] <dalek> rakudo/nom: b8f10c7 | (Zoffix Znet)++ | src/core/ (3 files):

[00:48] <dalek> rakudo/nom: Merge pull request #963 from lucasbuchala/is-lazy

[00:48] <dalek> rakudo/nom:

[00:48] <dalek> rakudo/nom: Fix {List,Seq,Range}.is-lazy method for type objects invocants

[00:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b8f10c75e5

[02:19] <awwaiid> I see that Inline::Perl5 is now autoloaded when you do :from<Perl5>. Can we expand it to work with Inline::* ?

[02:32] <dalek> roast: a6d3e26 | MasterDuke17++ | S19-command-line-options/02-dash-n.t:

[02:32] <dalek> roast: Add some todo'd tests for RT #129093

[02:32] <dalek> roast:

[02:32] <dalek> roast: FIRST/NEXT/LAST phasers are currently NYI for the '-n' (and by extension

[02:32] <dalek> roast: '-p') command line options.

[02:32] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129093

[02:32] <dalek> roast: review: https://github.com/perl6/roast/commit/a6d3e269d4

[07:18] <[Tux]> This is Rakudo version 2016.12-12-gb8f10c75e built on MoarVM version 2016.12

[07:18] <[Tux]> csv-ip5xs        3.147

[07:18] <[Tux]> test            13.844

[07:18] <[Tux]> test-t           6.205

[07:18] <[Tux]> csv-parser      13.902

[08:40] <lizmat> good *, #perl6-dev

[08:40] <yoleaux2> 18 Dec 2016 22:55Z <Zoffix> lizmat: any ideas for RT#128005? The problem is unvivified item is an `Any` and Any.cache.elems returns 1, because it's a "1-item list" thing. I tried a blunt-force solution but the impact is rather pervasive and gives ~~11% slowdown: https://gist.github.com/zoffixznet/8574ee473e590d709d5e0051914249bd

[08:40] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128005

[09:04] <lizmat> Zoffix: ah, that can of worms  :-(

[09:04] <lizmat> looking into it now...

[09:52] <jnthn> lizmat, Zoffix: checking for Any will likely break the moment that it's a typed array

[09:53] <jnthn> Could use .DEFINITE

[09:53] <lizmat> jnthn: good point

[09:54] <lizmat> was thinking of adding Any:U candidates, actually

[09:56] <jnthn> Yeah, that's equivalent and  very likely faster :)

[10:13] <lizmat> jnthn: so when can the .count of a Block become Inf ???

[10:14] <jnthn> Slurpy

[10:16] <lizmat> aha...

[10:17] <lizmat> m: dd (-> *@a { }).count  # jnthn++

[10:17] <camelia> rakudo-moar b8f10c: OUTPUT«Inf␤»

[10:35] <dalek> rakudo/nom: 57e733e | samcv++ | Configure.pl:

[10:35] <dalek> rakudo/nom: Use #!/usr/bin/env perl instead of #! perl

[10:35] <dalek> rakudo/nom:

[10:35] <dalek> rakudo/nom: Unless there is a good reason to keep this, it would be nice

[10:35] <dalek> rakudo/nom: if this was changed for better compatibility.

[10:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/57e733e6c7

[10:35] <dalek> rakudo/nom: 9120ace | lizmat++ | Configure.pl:

[10:35] <dalek> rakudo/nom: Merge pull request #964 from samcv/configure.pl

[10:35] <dalek> rakudo/nom:

[10:35] <dalek> rakudo/nom: Use #!/usr/bin/env perl instead of #! perl

[10:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9120ace3ff

[10:40] <lizmat> m: use nqp; say nqp::isnanorinf(1)   # was hoping that would just return 0  :-(

[10:40] <camelia> rakudo-moar b8f10c: OUTPUT«This type cannot unbox to a native number: P6opaque, Int␤  in block <unit> at <tmp> line 1␤␤»

[10:41] <jnthn> Nope

[10:41] <lizmat> any specific reason for that ?

[10:41] <lizmat> the name doesn't seem to indicate to me it needs a num

[10:42] <jnthn> nqp:: ops in general boil down to VM ops, so are pretty close to the metal

[10:43] <lizmat> ok

[10:43] <jnthn> If we go and stick a bunch of extra checks in at that level, then we hurt every single code path that doesn't need them

[10:43] <lizmat> gotcha

[10:43] <jnthn> Like, when you're in a multi candidate on the Num class and you know self is a Num

[10:53] <dalek> nqp: 4f29733 | samcv++ | Configure.pl:

[10:53] <dalek> nqp: Use the #!/usr/bin/env perl shebang for increased compatibility

[10:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4f29733479

[10:56] <lizmat> jnthn: is there a chance that a WhateverCode ever gets a .block == inf ?

[10:56] <lizmat> .count == Inf  *sigh*

[10:59] <jnthn> I can't imagine how that could happen

[10:59] * lizmat neither

[11:00] <jnthn> I mean, syntax wise...

[11:00] * lizmat fetches another opt opportunity

[11:00] <jnthn> You'd probably have to piece one together "by hand"

[11:00] <timotimo> optortunity

[11:00] <jnthn> So yeah, I think we can rely on WhateverCode never having Inf count

[11:26] <Zoffix> m: say do for <a1 a2 a3 a4> { S/a/z/; } # BROKEN

[11:26] <camelia> rakudo-moar 9120ac: OUTPUT«(z4 z4 z4 z4)␤»

[11:26] <Zoffix> m: say do for <a1 a2 a3 a4> -> $_ is copy { s/a./z/; } # WORKS

[11:26] <camelia> rakudo-moar 9120ac: OUTPUT«(｢a4｣ ｢a4｣ ｢a4｣ ｢a4｣)␤»

[11:26] <Zoffix> um

[11:26] <Zoffix> I mean both broken

[11:27] <Zoffix> m: $_ = "aaabbb"; dd -> $_  is raw { S/b/B/ }(  $/ = $_ ); # BROKEN

[11:27] <camelia> rakudo-moar 9120ac: OUTPUT«Str $/ = "bB"␤»

[11:27] <Zoffix> m: $_ = "aaabbb"; dd -> $_  is raw { S/b/B/ }(  $/ = $_ ); # BROKEN

[11:27] <camelia> rakudo-moar 9120ac: OUTPUT«Str $/ = "bB"␤»

[11:27] <Zoffix> m: $_ = "aaabbb"; dd -> $_  { S/b/B/ }(  $/ = $_ ); # WORKS

[11:27] <camelia> rakudo-moar 9120ac: OUTPUT«Str $/ = "aaaBbb"␤»

[11:27] <Zoffix> m: $_ = "aaabbb"; dd -> $_  is raw { S/b/B/ }(  $_ ); # WORKS

[11:27] <camelia> rakudo-moar 9120ac: OUTPUT«Str $/ = "aaaBbb"␤»

[11:27] <Zoffix> Any ideas what what could be the reason?

[11:27] <Zoffix> Seems like both issues are related and something to do with the way $_ and $/ are handled in blocks or something?

[11:27] <lizmat> this goes wrong somewhere in Any-iterable

[11:28] <lizmat> will look at it after having fixed RT #128005

[11:28] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128005

[11:28] <lizmat> currently in the maze that is src/core/array_slice.pm

[11:28] <Zoffix> lizmat, do you mean my examples?

[11:29] <lizmat> yeah, I think I can fix it *and* make [] a bit faster overall

[11:29] <Zoffix> huh. OK

[11:30] * Zoffix doesn't see how Any-iterable is even involved in the second ones

[11:30] <lizmat> Zoffix: ah, then maybe my hunch is wrong or there ar 2 bugs  :-)

[11:32] <Zoffix> I'll wait for attempted fix

[11:33] <Zoffix> Not sure if my comments on the first one made it to the mailing list: https://rt.perl.org/Ticket/Display.html?id=130355#txn-1440031

[11:33] <Zoffix> "The problem is the `S///` and `s///` ops use the $/ and return it. This value becomes an item in the loop's result list, but the next loop iteration updates the $/, so all the previous items in the list get updated to it as well, which is why we see all items in the output set to the last item.

[11:33] <Zoffix> "

[11:33] <Zoffix> And in the map's version the issue only happens when we start fetching stuff that's already in $!reified

[11:34] * Zoffix goes to dig for more tickets to fix

[11:56] <lizmat> grr...  had 10+ Terminal crashes in the past hour...

[11:57] <jnthn> o.O

[11:57] <jnthn> That sounds...pretty busted

[11:57] <lizmat> yeah...  :-(

[11:58] <lizmat> hope 10.12.2 update will fix...

[12:00] <jnthn> .oO( Maybe my next upgrade should not be to an OSX machine... :) )

[12:07] <lizmat> ah, that just goes to show how backward you are:  it's macOS nowadays  :-)

[12:07] <lizmat> so very important difference

[12:07] <lizmat> :-)

[12:08] <jnthn> Next you'll be telling me they went back to using \r as the line sep... :P

[12:09] <lizmat> lol

[12:09] * jnthn wanders off to nom a bowl of dal

[12:11] * lizmat wanders off for a restart

[13:29] <dalek> rakudo/nom: 08ff3db | lizmat++ | src/core/ (3 files):

[13:29] <dalek> rakudo/nom: Fix RT #128005 and make @a[*-1] 2x as fast

[13:29] <dalek> rakudo/nom:

[13:29] <dalek> rakudo/nom: - abstract the position calculation logic into (Block|WhateverCode).pos

[13:29] <dalek> rakudo/nom:   Because we can slighltly more optimize the WhateverCode case, as that

[13:29] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128005

[13:29] <dalek> rakudo/nom:   can never have have Inf for its .count.  And because we abstracted it

[13:29] <dalek> rakudo/nom:   into those classes, it felt less bad to actually not use a method call

[13:29] <dalek> rakudo/nom:   to get the parameter count, but instead go direct there using nqp.

[13:29] <dalek> rakudo/nom: - Simplify the postcircumfix:<[ ]> candidates accordingly.

[13:29] <dalek> rakudo/nom:

[13:29] <dalek> rakudo/nom: Zoffix++ for the nudge.

[13:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/08ff3dbfac

[13:34] <dalek> roast: 1c353d7 | lizmat++ | S02-types/array.t:

[13:34] <dalek> roast: Unfudge now passing test

[13:34] <dalek> roast: review: https://github.com/perl6/roast/commit/1c353d7a20

[13:39] <dalek> rakudo/nom: 2776164 | (Zoffix Znet)++ | tools/contributors.pl6:

[13:39] <dalek> rakudo/nom: Be smarter when figuring out date of last release

[13:39] <dalek> rakudo/nom:

[13:39] <dalek> rakudo/nom: Current algo only works when script is run in the month

[13:39] <dalek> rakudo/nom: following the month of last release.

[13:39] <dalek> rakudo/nom:

[13:39] <dalek> rakudo/nom: Improve by using the date of last commit to VERSION file.

[13:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/27761645c5

[13:48] <dalek> rakudo/nom: cd8ab2e | (Zoffix Znet)++ | tools/contributors.pl6:

[13:48] <dalek> rakudo/nom: s/shell()/run()/

[13:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cd8ab2e23f

[13:59] <dalek> rakudo/nom: b39c0d8 | lizmat++ | src/core/array_slice.pm:

[13:59] <dalek> rakudo/nom: Squeeze another 3% out of @a[*-1]

[13:59] <dalek> rakudo/nom:

[13:59] <dalek> rakudo/nom: Normally I wouldn't bother, but for such an essential capability, it

[13:59] <dalek> rakudo/nom: seems worth it.

[13:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b39c0d8b98

[14:17] <dalek> rakudo/nom: ab26b58 | lizmat++ | src/core/ (5 files):

[14:17] <dalek> rakudo/nom: Remove unnecessary caching on .elems

[14:17] <dalek> rakudo/nom:

[14:17] <dalek> rakudo/nom: Only a Seq needs caching of .elems nowadays, and it does so internally.

[14:17] <dalek> rakudo/nom:

[14:17] <dalek> rakudo/nom: Makes @a[*-1] another 10% or so faster and probably has speed advantages

[14:17] <dalek> rakudo/nom: in other situations as well.

[14:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ab26b5896b

[14:17] * lizmat hopes for a noticeable improvement on test-t

[14:18] <lizmat> [Tux]: ^^^  :-)

[14:19] <dalek> nqp: 1400616 | (Pawel Murias)++ | src/vm/js/nqp-runtime/core.js:

[14:19] <dalek> nqp: [js] Fix signature.

[14:19] <dalek> nqp: review: https://github.com/perl6/nqp/commit/14006161fd

[14:19] <dalek> nqp: 22a147a | (Pawel Murias)++ | src/vm/js/ (5 files):

[14:19] <dalek> nqp: [js] Repossession fixes.

[14:19] <dalek> nqp: review: https://github.com/perl6/nqp/commit/22a147a956

[14:30] <dalek> rakudo/nom: 47f5300 | (Zoffix Znet)++ | LICENSE:

[14:30] <dalek> rakudo/nom: Revert copyright year in LICENSE to original

[14:30] <dalek> rakudo/nom:

[14:30] <dalek> rakudo/nom: The original license[^1] lists 2006 as the end year and the first sentence

[14:30] <dalek> rakudo/nom: in the license documents reads "...changing [this document] is not allowed"

[14:30] <dalek> rakudo/nom:

[14:30] <dalek> rakudo/nom: [1] https://opensource.org/licenses/Artistic-2.0

[14:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/47f5300f41

[14:36] <dalek> rakudo/nom: bbeec04 | (Zoffix Znet)++ | / (3 files):

[14:36] <dalek> rakudo/nom: ❄️☃ Happy New Year!

[14:36] <dalek> rakudo/nom:

[14:36] <dalek> rakudo/nom: Update copyrights and stuff

[14:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bbeec045c1

[14:49] <dalek> rakudo/nom: 454dd45 | zoffixznet++ | CREDITS:

[14:49] <dalek> rakudo/nom: Add Zoffix Znet to CREDITS

[14:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/454dd45175

[14:52] <dalek> rakudo/nom: 60a310b | zoffixznet++ | tools/contributors.pl6:

[14:52] <dalek> rakudo/nom: Remove unused option

[14:52] <dalek> rakudo/nom:

[14:52] <dalek> rakudo/nom: Sneaked in in the previous commit

[14:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/60a310bc8f

[14:55] <dalek> rakudo/nom: 1b8c89d | (Zoffix Znet)++ | CREDITS:

[14:55] <dalek> rakudo/nom: Remove U: for Zoffix Znet

[14:55] <dalek> rakudo/nom:

[14:55] <dalek> rakudo/nom: I don't like how dalek uses it for some reason....

[14:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1b8c89d947

[15:01] <dalek> rakudo/nom: e64dd9a | (Zoffix Znet)++ | tools/contributors.pl6:

[15:01] <dalek> rakudo/nom: Load CREDITS files from all repos

[15:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e64dd9a411

[15:09] <dalek> rakudo/nom: 8219acf | (Zoffix Znet)++ | tools/contributors.pl6:

[15:09] <dalek> rakudo/nom: Add protection against publishing email addresses

[15:09] <dalek> rakudo/nom:

[15:09] <dalek> rakudo/nom: It's possible (like happened last release) for a contributor to

[15:09] <dalek> rakudo/nom: end up being an email address. Even though the address is public,

[15:09] <dalek> rakudo/nom: some may not wish for us to plaster it all over the place.

[15:09] <dalek> rakudo/nom:

[15:09] <dalek> rakudo/nom: Fix by redacting the hostname of the email address if one shows up.

[15:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8219acf631

[15:25] <|Tux|> This is Rakudo version 2016.12-19-This is Rakudo version 2016.12-19-gab26b5896 built on MoarVM version 2016.12

[15:25] <|Tux|> csv-ip5xs        3.072

[15:25] <|Tux|> test            13.535

[15:25] <|Tux|> test-t           6.118

[15:25] <|Tux|> csv-parser      13.757

[15:25] <|Tux|> gab26b5896 built on MoarVM version 2016.12

[15:25] <|Tux|> csv-ip5xs        3.072

[15:25] <|Tux|> test            13.535

[15:25] <|Tux|> test-t           6.118

[15:25] <|Tux|> csv-parser      13.757

[15:25] <|Tux|> lizmat, ^^

[16:01] <dalek> rakudo/nom: 0010f15 | (Zoffix Znet)++ | docs/release_guide_automated.md:

[16:01] <dalek> rakudo/nom: Update Automated Release Guide

[16:01] <dalek> rakudo/nom:

[16:01] <dalek> rakudo/nom: - Remove pieces that were planned to be automated but weren't

[16:01] <dalek> rakudo/nom:     (some stuff like Wikipedia update and Email sending are just

[16:01] <dalek> rakudo/nom:     not worth the code/debugging time)

[16:01] <dalek> rakudo/nom: - Document the actual working process instead of imagined steps

[16:01] <dalek> rakudo/nom: - Document stuff that's still work in progress

[16:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0010f15ffa

[16:04] <dalek> rakudo/nom: aa7e20e | (Zoffix Znet)++ | docs/release_guide_automated.md:

[16:04] <dalek> rakudo/nom: Fix broken markdowhn format

[16:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aa7e20ea15

[17:11] <TimToady> m: say (** + 1).count

[17:11] <camelia> rakudo-moar aa7e20: OUTPUT«Inf␤»

[17:11] <TimToady> m: say (** + 1).(1,2,3)

[17:11] <camelia> rakudo-moar aa7e20: OUTPUT«(2 3 4)␤»

[17:12] <TimToady> m: say (** + 1).WHAT

[17:12] <camelia> rakudo-moar aa7e20: OUTPUT«(Sub)␤»

[17:12] <TimToady> except somehow it's not a WhateverCode

[17:13] <TimToady> maybe it should be a HyperWhateverCode...

[17:13] <jnthn> o.O

[17:13] <jnthn> I didn't even though about that :P

[17:13] <jnthn> When did that go in?!

[17:13] <TimToady> been in the spec for years

[17:13] <jnthn> Sure, I meant into Rakudo :)

[17:14] * TimToady didn't do it, but more than a year

[17:14] <jnthn> m: say (**.abs).(-1, 3, -5)

[17:14] <camelia> rakudo-moar aa7e20: OUTPUT«(1 3 5)␤»

[17:14] <jnthn> wow

[17:14] <jnthn> I coulda used that a bunch of times instead of writing map :P

[17:15] <timotimo> %)

[17:15] <timotimo> i have had trouble understanding how hyperwhatever does its thing

[17:16] <TimToady> certainly we've had people come to grief for donkey's years trying to write *** to mean * * *  :)

[17:17] <[Coke]> I don't feel so bad when jnthn is surprised to find things in Rakudo.

[17:17] <TimToady> m: say (** * *)([1,2,3],4)

[17:17] <camelia> rakudo-moar aa7e20: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Multiple HyperWhatevers and Whatevers may not be used together␤at <tmp>:1␤------> say (** * *⏏)([1,2,3],4)␤»

[17:18] <TimToady> aww

[17:18] <jnthn> Patches welcome :P

[17:18] <jnthn> But wait, if it slurps...

[17:18] <jnthn> That's gonna be a problem :)

[17:19] <TimToady> presumably it would slurp an unpack instead

[17:20] <TimToady> m: say (** Z+ **)([1,2,3],[4,5,6])

[17:20] <camelia> rakudo-moar aa7e20: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Multiple HyperWhatevers and Whatevers may not be used together␤at <tmp>:1␤------> say (** Z+ **⏏)([1,2,3],[4,5,6])␤»

[17:20] <TimToady> m: say (* Z+ *)([1,2,3],[4,5,6])

[17:20] <camelia> rakudo-moar aa7e20: OUTPUT«(5 7 9)␤»

[17:20] <TimToady> well, but then why not just that...

[17:37] <ZoffixW> Curious, what's the usecase for undefined Numerics to be treated as zero, after issuing a warning?

[17:37] <ZoffixW> Seems like cruft left over from Perl 5.

[17:38] <ZoffixW> That poorly fits into the model with types in it

[17:38] <ZoffixW> m: quietly say (+Rat).^name;

[17:38] <camelia> rakudo-moar aa7e20: OUTPUT«Int␤»

[17:38] <ZoffixW> m: say Rat + i

[17:38] <camelia> rakudo-moar aa7e20: OUTPUT«Cannot look up attributes in a Rat type object␤  in block <unit> at <tmp> line 1␤␤»

[17:39] <ZoffixW> m: Int == 42

[17:39] <camelia> rakudo-moar aa7e20: OUTPUT«WARNINGS for <tmp>:␤Useless use of "==" in expression "Int == 42" in sink context (line 1)␤Invocant requires an instance of type Int, but a type object was passed.  Did you forget a .new?␤  in block <unit> at <tmp> line 1␤␤»

[17:39] <ZoffixW> m: quietly say Int < 2

[17:39] <camelia> rakudo-moar aa7e20: OUTPUT«Invocant requires an instance of type Int, but a type object was passed.  Did you forget a .new?␤  in block <unit> at <tmp> line 1␤␤»

[17:39] * ZoffixW is fixing all of that ATM

[17:39] <ZoffixW> And hence the question came up.... why the hell do we even let undefined numerics to be used?

[17:44] <ZoffixW> oh gee....

[17:44] * ZoffixW sees a Rat hole at the end of the rabbit hole

[17:46] <ZoffixW> I'm just gonna leave it as is. All the Rat ops would need additions of :U candidates.... that's on top of these changes http://temp.perl6.party/unum.diff.txt

[17:46] <ZoffixW> ... On top of adding .Numeric and .Real candidates to each type, so all :Us don't numify to Int

[17:48] <ZoffixW> m: quietly say Complex + 42

[17:48] <camelia> rakudo-moar aa7e20: OUTPUT«42␤»

[17:48] <ZoffixW> ... On top of adding stuff to Complex too

[17:50] <ZoffixW> In summation... our :U-numerics-are-zeros concept is quite broken, which makes its utility dubious and I wouldn't shed a tear if we dumped it in 6.d and made all things expect :D numerics

[17:50] <ZoffixW> :)

[17:51] <ZoffixW> Tip your waitresses!

[17:51] <ZoffixW> and waiters

[17:54] <ZoffixW> Forgot to mention. The ** + 1 is a Sub, because it converts into a WhateverCode * + 1 that's given to HYPERWHATEVER(&c) that returns  sub (*@_) { map &c, @_ }

[17:55] <ZoffixW> m: HyperWhatever.new.^name.say; # magic

[17:55] <camelia> rakudo-moar aa7e20: OUTPUT«Sub␤»

[17:55] <ZoffixW> m: (new HyperWhatever:).^name.say; # magic

[17:55] <camelia> rakudo-moar aa7e20: OUTPUT«Cannot make a HyperWhatever object using .new␤  in block <unit> at <tmp> line 1␤␤»

[17:55] <ZoffixW> ^_^

[18:22] * lizmat is back

[18:22] <lizmat> Files=1155, Tests=53960, 197 wallclock secs (11.22 usr  4.60 sys + 1187.29 cusr 125.55 csys = 1328.66 CPU)

[18:22] <lizmat> [Tux]: thanks

[18:37] <lizmat> afk again&

[18:58] <gfldex> do we have a list of changes to the language since v6.c?

[19:01] <notviki> gfldex: I'd say it's not wrong to say that the number of changes to the *language* has been exactly zero

[19:01] <notviki> huggable: 6.d

[19:01] <huggable> notviki, Proposals for 6.d language: https://github.com/perl6/specs/blob/master/v6d.pod

[19:02] <notviki> And that's the list of proposals for 6.d changes

[19:02] <gfldex> i believe to remember that we had some errata

[19:03] <notviki> Ah, that should be this: https://github.com/perl6/roast/compare/6.c...6.c-errata

[19:03] <notviki> Seems most of those are just adjusting tests than about a change in the language

[19:09] <[Coke]> yes, otherwise they couldn't safely go into something claiming to be 6.c

[19:35] <dalek> nqp: fb18d29 | (Pawel Murias)++ | src/vm/js/Compiler.nqp:

[19:35] <dalek> nqp: [js] Fix the default value for variables.

[19:35] <dalek> nqp: review: https://github.com/perl6/nqp/commit/fb18d293ab

[19:38] <dalek> rakudo/nom: 3fe5893 | lizmat++ | src/core/ (2 files):

[19:38] <dalek> rakudo/nom: Fix for RT #130363

[19:38] <dalek> rakudo/nom:

[19:38] <dalek> rakudo/nom: This breaks one spectest, which is faulty because it expects

[19:38] <dalek> rakudo/nom: Any ~~ m/%hash/ to fail.  It did so before, but for the wrong

[19:38] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130363

[19:38] <dalek> rakudo/nom: reason.

[19:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3fe589309d

[19:56] <notviki> m: my %hashl Any ~~ m/%hash/

[19:56] <camelia> rakudo-moar 3fe589: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> my %hashl⏏ Any ~~ m/%hash/␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier␤        st…»

[19:56] <notviki> m: my %hash; Any ~~ m/%hash/

[19:56] <camelia> rakudo-moar 3fe589: ( no output )

[19:56] <notviki> star: my %hash; Any ~~ m/%hash/

[19:56] <camelia> star-m 2016.10: OUTPUT«No such method 'match' for invocant of type 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[19:59] <notviki> star: multi foo ($ where m:i/foo/) { say "got it" }; foo class { method Str { "foobar" } }.new

[19:59] <camelia> star-m 2016.10: OUTPUT«No such method 'match' for invocant of type '<anon|68186352>'␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[19:59] <notviki> star: multi foo ($ where /foo/) { say "got it" }; foo class { method Str { "foobar" } }.new

[19:59] <camelia> star-m 2016.10: OUTPUT«got it␤»

[19:59] <notviki> m: multi foo ($ where m:i/foo/) { say "got it" }; foo class { method Str { "foobar" } }.new

[19:59] <camelia> rakudo-moar 3fe589: OUTPUT«Cannot resolve caller match(<anon|57744400>: Regex, :i(Int)); none of these signatures match:␤    (Any:U $: | is raw)␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:01] * notviki wonders if it'd be sane for Any:D candidate to forward to self.Str.match

[20:05] <notviki> I also wonder what's the differnece between /foo/ and m/foo/ that makes one fail there but not the other :/

[20:08] <lizmat> nine: shouldn't we merge the lexical module loading branch now ?

[20:08] <pmurias> [Coke]: re fudging, some of it in roast is for bugs that where in rakudo at the time of the 6.c release

[20:09] <lizmat> notviki: /./ codegens differently bypassing Str.match altogether, since it can be sure no adverbs are specified

[20:10] <notviki> Ah. Thanks.

[20:10] <lizmat> m/./ apparently follows a code path that assumes named parameters *are* specified

[20:10] <lizmat> because that's the only way you can e.g. say: m:2nd/./

[20:20] <[Coke]> pmurias: sure, some of it. some is 10-year old leftovers.

[20:20] <[Coke]> really needs a clean sweep before 6.d IMO

[20:29] <lucasb> m: Any ~~ m/x/

[20:29] <camelia> rakudo-moar 3fe589: ( no output )

[20:30] <lucasb> sorry, I don't feel very confortable with this

[20:30] <lizmat> lucasb: what's wrong ?

[20:30] <lizmat> m: Any ~~ /x/  # worked like forever ?

[20:30] <camelia> rakudo-moar 3fe589: OUTPUT«Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤»

[20:30] <lizmat> ah, you mean no warning ?

[20:30] <lizmat> good point

[20:30] <lucasb> yes, that :)

[20:31] <lucasb> not a warning, but an error

[20:31] <notviki> m: quietly m: Any ~~ /x/; say "not an error"

[20:31] <camelia> rakudo-moar 3fe589: OUTPUT«not an error␤»

[20:31] <lizmat> well, /x/ has always been a warning

[20:32] <lucasb> star-m: Any ~~ m/x/; say 42

[20:32] <camelia> star-m 2016.10: OUTPUT«No such method 'match' for invocant of type 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[20:33] <lizmat> star-m: Any ~~ /x/; say 42

[20:33] <camelia> star-m 2016.10: OUTPUT«Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤42␤»

[20:34] <lucasb> IMO, the same way I expect a error if I do Int+10 or Str~'a', I would also expect with (SomethingUndefined).match

[20:35] <travis-ci> Rakudo build failed. Zoffix Znet 'Fix broken markdowhn format'

[20:35] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/185192183 https://github.com/rakudo/rakudo/compare/0010f15ffa25...aa7e20ea15ab

[20:35] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[20:35] <lucasb> oops, no. the examples I said are not errors, just warnings :)

[20:36] <lucasb> more acurate, Int+1 is an error, but Str~'x' is a warning

[20:38] <lizmat> yeah, testing a fix

[20:38] <notviki> travis: t/04-nativecall/08-callbacks.t ........... Failed 5/8 subtests

[20:40] <notviki> m: (my Int $).match: /^/

[20:40] <camelia> rakudo-moar 3fe589: ( no output )

[20:40] <notviki> star: (my Int $).match: /^/

[20:40] <camelia> star-m 2016.10: OUTPUT«Cannot resolve caller match(Int: Regex); none of these signatures match:␤    (Cool:D $: $target, *%adverbs)␤  in block <unit> at <tmp> line 1␤␤»

[20:42] <dalek> rakudo/nom: cc0f836 | lizmat++ | src/core/Any.pm:

[20:42] <dalek> rakudo/nom: Make sure we warn, just like /./ would do, lucasb++

[20:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cc0f836e4a

[20:59] <nine> lizmat: yes, we should. Just came home from teaching radio procedures at the airfield. Will start now

[21:00] <lizmat> roger, over!

[21:01] <lucasb> lizmat++ thanks

[21:32] <nine> m: my %var; m/%var/

[21:32] <camelia> rakudo-moar cc0f83: OUTPUT«Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤»

[21:33] <nine> We seem to have a spec test that expects this to die?

[21:33] <nine> Ah, found it in the backlog

[21:34] <dalek> rakudo/nom: 4b529c8 | niner++ | / (5 files):

[21:34] <dalek> rakudo/nom: Make importing globals from loaded modules lexical

[21:34] <dalek> rakudo/nom:

[21:34] <dalek> rakudo/nom: Right now if A depends on C:auth<foo> and B depends on C:auth<bar> you

[21:34] <dalek> rakudo/nom: cannot use A and B in the same program. Fix this by having not only

[21:34] <nine> It is done!

[21:34] <nine> mst: ^^^

[21:35] <lizmat> nine++  :-)

[21:39] <mst> nine: MUHAHAHAHAHAHAHAHAHAHAHA

[21:39] <RabidGravy> so it would be oppoortune to re-test all my modules against that now then right?

[21:39] <nine> RabidGravy: yes :)

[21:40] <mst> nine: ... ... ... ... *GRINS*

[21:40] <mst> you realise that buys limited hot reloading, right?

[21:41] <RabidGravy> it also means you can use HTTP::Server::Async and HTTP::UserAgent in the same program now ;-)

[21:41] <mst> psch

[21:41] <mst> who'd ever want to do that

[21:42] <RabidGravy> I'd fixed both of them a while back so you could have them *installed* at the same time

[21:43] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2016/12/19/2016-51-flowing-towards-christmas/

[21:45] <[Coke]> lizmat++

[21:47] <jdv79> nice

[21:48] <lizmat> notviki: just realized that the last paragraph on http://rakudo.org/2016/12/17/lexical-module-loading/ is technically correct, but would read better if it would say "Undeclared name: Bar" .....  add a: "use Bar;"  in light of the example code just above it

[21:51] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make sure we warn, just like /./ would do, lucasb++'

[21:51] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/185270105 https://github.com/rakudo/rakudo/compare/3fe589309da1...cc0f836e4ad0

[22:10] <dalek> roast: 8dc725a | lizmat++ | S05-interpolation/regex-in-variable.t:

[22:10] <dalek> roast: Fudge tests for /%hash/, we don't check for that yet

[22:10] <dalek> roast: review: https://github.com/perl6/roast/commit/8dc725acac

[22:13] <dalek> roast/6.c-errata: 36eaf30 | lizmat++ | S05-interpolation/regex-in-variable.t:

[22:13] <dalek> roast/6.c-errata: Fudge test for /%hash/, we don't check for that yet

[22:13] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/36eaf301b3

[22:13] <lizmat> and that concludes my hacking / blogging for the day

[22:13] <lizmat> good night, #perl6-dev!

[22:26] <notviki> lizmat: fixed thanks.

[22:26] <jnthn> lizmat++ # weekly
