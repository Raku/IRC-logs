[02:30] <travis-ci> Rakudo build passed. Zoffix Znet 'Merge pull request #904 from tbrowder/new-test

[02:30] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/167705475 https://github.com/rakudo/rakudo/compare/8268ffbc1ae5...41c0750171cd

[06:39] <p3rln00b> Internet dead at home for some reason :( not a good release day start :(

[06:39] <yoleaux2> 14 Oct 2016 21:53Z <jnthn> p3rln00b: I'd guess so, but do a spectest to be sure

[06:44] <Zoffix> \o/

[06:44] <Zoffix> Though, I can always tether my lappy to my phone if I had to.

[07:11] <dalek> rakudo/nom: 2c681c5 | (Zoffix Znet)++ | docs/ChangeLog:

[07:11] <dalek> rakudo/nom: Log all changes to date

[07:11] <dalek> rakudo/nom:

[07:11] <dalek> rakudo/nom: Documents commits:

[07:11] <dalek> rakudo/nom: 6283124  bfe6219  e5df7a7  5a79e22  8df0965  bf7945e  7f16cbb  b08ef96

[07:11] <dalek> rakudo/nom: 8268ffb

[07:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2c681c5552

[07:37] <[Tux]> This is Rakudo version 2016.09-199-g41c0750 built on MoarVM version 2016.09-47-g736364c

[07:37] <[Tux]> csv-ip5xs        3.125

[07:37] <[Tux]> test            15.766

[07:37] <[Tux]> test-t           6.888

[07:37] <[Tux]> csv-parser      17.313

[07:40] <dalek> rakudo/nom: 873e60f | (Zoffix Znet)++ | src/core/Mu.pm:

[07:40] <dalek> rakudo/nom: Remove unused Mu.dispatch:<.^> method

[07:40] <dalek> rakudo/nom:

[07:40] <dalek> rakudo/nom: The code is not hit during stresstests. Per discussion[^1] and

[07:40] <dalek> rakudo/nom: confirmation[^2], this code is no longer used and can be removed.

[07:40] <dalek> rakudo/nom: Stresstest passes.

[07:40] <dalek> rakudo/nom:

[07:40] <dalek> rakudo/nom: [1] https://github.com/perl6/doc/issues/970#issuecomment-253824298

[07:40] <dalek> rakudo/nom: [2] https://irclog.perlgeek.de/perl6-dev/2016-10-14#i_13405760

[07:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/873e60fb68

[07:44] <dalek> roast: 53bdf26 | usev6++ | S (3 files):

[07:44] <dalek> roast: Fudge tests for JVM; use ticket number

[07:44] <dalek> roast: review: https://github.com/perl6/roast/commit/53bdf269b0

[07:48] <Zoffix> psch, you around? So the closure nqp failures are due to an old bug, but what about the last two failures? Can they be ignored for the release? https://gist.github.com/zoffixznet/448d79d9cf422e64901089c0eb803e83

[07:55] <travis-ci> Rakudo build errored. Zoffix Znet 'Log all changes to date

[07:55] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/167837220 https://github.com/rakudo/rakudo/compare/41c0750171cd...2c681c55520d

[07:56] <bartolin> committable6: 2016.09,HEAD say (my int $ = 2**32) * (my int $ = 2**63)

[07:56] <committable6> bartolin, ¦«2016.09»: 0␤¦«HEAD»: This type cannot unbox to a native integer: P6opaque, Failure␤  in block <unit> at /tmp/5gdU3BwADu line 1␤ «exit code = 1»

[07:57] <Zoffix> I guess I have my answer. The test was addded just 2 days ago: https://github.com/perl6/nqp/commit/682f8253bde4fc5c9774d7e68940f7ae07044f59

[07:57] <psch> yeah, pmurias is pretty awesome about nqp tests

[07:57] <psch> anyway, the failure is about autoboxing, and is probably something we should look into

[07:57] <psch> might relate to natives on jvm i think

[07:58] <Zoffix> should look into... you mean before the release?

[07:58] <psch> no, the bug is an old one, we just didn't test it before

[07:59] <psch> i'm not sure in how far it actually does impact rakudo either

[07:59] <Zoffix> bartolin, oh, I was meant to fix that.

[07:59] <Zoffix> I thought I did

[07:59] <AlexDaniel> when?

[08:00] <bartolin> r: my int $iL = 2**62; say $iL * $iL

[08:00] <camelia> rakudo-moar 873e60: OUTPUT«This type cannot unbox to a native integer: P6opaque, Failure␤  in block <unit> at <tmp> line 1␤␤»

[08:00] <camelia> ..rakudo-jvm 2a1605: OUTPUT«0␤»

[08:00] <AlexDaniel> m: say (my int $ = 2**32) * (my int $ = 2**63)

[08:00] <camelia> rakudo-moar 873e60: OUTPUT«This type cannot unbox to a native integer: P6opaque, Failure␤  in block <unit> at <tmp> line 1␤␤»

[08:00] <Zoffix> When what? I meant I said I'll fix it and I forgot :)

[08:01] <AlexDaniel> ah ok :) Just wanted to note that whateverables are currently behind HEAD for one or two commits

[08:02] <bartolin> I'm somewhat confused. that test failed with 'Numeric overflow' on rakudo-j a few days ago

[08:03] <dalek> nqp: 298e228 | (Zoffix Znet)++ | t/qast/01-qast.t:

[08:03] <dalek> nqp: Temporarily comment out tests failing on JVM

[08:03] <dalek> nqp:

[08:03] <dalek> nqp: The tests were added in the past few days, but the issues existed

[08:03] <dalek> nqp: on JVM for a while[^1][^2]. Comment the tests out for the release,

[08:03] <dalek> nqp: to avoid any confusion downstream, when someone notices "new" failures.

[08:03] <dalek> nqp:

[08:03] <dalek> nqp: This commit will be reverted after the release.

[08:03] <dalek> nqp:

[08:03] <dalek> nqp: [1] https://irclog.perlgeek.de/perl6-dev/2016-10-14#i_13401309

[08:03] <dalek> nqp: [2] https://irclog.perlgeek.de/perl6-dev/2016-10-15#i_13407254

[08:03] <dalek> nqp: review: https://github.com/perl6/nqp/commit/298e2281ec

[08:03] <bartolin> and now it dies with the above error. but with --optimize=1 it returns 21267647932558653966460912964485513216 (no numeric overflow anymore)

[08:05] <Zoffix> bartolin, it's meant to return 0. It was made to return a Failure recently, but later it was discussed that natives should not return Failures and returning 0 is perfectly fine. Whatever tests expect a Failure were added as part of coverage work and I'll revert them shortly. The optimize stuff is likely due to dispatch bug with nativevs

[08:05] <yoleaux2> 08:04Z <japhb> Zoffix: Thanks!

[08:06] <Zoffix> (there's a ticket for it)

[08:07] <bartolin> Zoffix: Ahh, I see. Must have missed that discussion. Thanks!

[08:09] <bartolin> the ticket is RT #129813, probably

[08:12] <Zoffix> Aforementioned discussion: https://irclog.perlgeek.de/perl6-dev/2016-10-10#i_13372432

[08:12] <Zoffix> Well, it starts a few lines above that; at https://irclog.perlgeek.de/perl6-dev/2016-10-10#i_13372307

[08:13] <bartolin> Zoffix++

[08:15] <Zoffix> .tell p3rln00b revert https://github.com/perl6/nqp/commit/298e2281ec after the release

[08:15] <yoleaux2> Zoffix: I'll pass your message to p3rln00b.

[08:24] <psch> huh

[08:24] <psch> the last failures in qast.t are actually automatic *un*boxing

[08:25] <psch> ...i suppose i shoulda seen that, cause it says so in the test results

[08:26] <psch> i don't think i understand the test

[08:31] <dalek> rakudo/nom: 8ad885f | (Zoffix Znet)++ | / (2 files):

[08:31] <dalek> rakudo/nom: Remove overflow check on native infix:<*> and infix:<**>

[08:31] <dalek> rakudo/nom:

[08:31] <dalek> rakudo/nom: To preserve 1-type-of-return and inlining, we do not[^1] do overflow checks

[08:31] <dalek> rakudo/nom: on native subs.

[08:31] <dalek> rakudo/nom:

[08:31] <dalek> rakudo/nom: [1] https://irclog.perlgeek.de/perl6-dev/2016-10-10#i_13372307

[08:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8ad885f0ab

[08:32] <dalek> roast: c8fc433 | (Zoffix Znet)++ | S32-num/int.t:

[08:32] <dalek> roast: Remove tests that expect overflow checks from native subs

[08:32] <dalek> roast:

[08:32] <dalek> roast: The tests were added recently, as part of coverage work and they

[08:32] <dalek> roast: test behaviour that is unwanted and has been removed[^1] from rakudo.

[08:32] <dalek> roast:

[08:32] <dalek> roast: [1] https://github.com/rakudo/rakudo/commit/8ad885f0ab

[08:32] <dalek> roast: review: https://github.com/perl6/roast/commit/c8fc43306b

[09:13] <psch> pff, silly jvm/jdb, can't even reenter nqp code...

[09:14] <psch> "SIGSEGV (0xb) at pc=0x0000000000000001"

[09:17] <travis-ci> Rakudo build passed. Zoffix Znet 'Remove overflow check on native infix:<*> and infix:<**>

[09:17] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/167844903 https://github.com/rakudo/rakudo/compare/873e60fb6849...8ad885f0ab8b

[09:27] <psch> okay, so apparently nqp-j feels like having an intBoxType doesn't necessarily mean that a variable that gets assigned an int needs to be boxed into the given intBoxType

[09:28] <psch> it's perfectly okay with using BOOTInt

[09:40] <Zoffix> :( t/04-nativecall/16-rt125408.t keeps failing when I'm running a release test on my VM :/

[09:49] <Zoffix> And unless it's a flapper, the issue is due to updated nqp/moarvm

[09:49] * Zoffix tries building HEAD of each

[10:13] <Zoffix> Ah. It'd help if I updated my test repos :}

[10:26] <Zoffix> There's no way for me to lose the ability to delete perl6/nqp repo without losing my org admin status, is there?

[10:26] <Zoffix> I'm paranoid about deleting perl6/nqp instead of zoffixznet/nqp during pre-release tests :|

[10:27] <nine> Inline-Perl5 (redesign_v6_inline *)> perl6 -e 'Distribution::Path.new($*CWD, :file("META.info".IO))'

[10:27] <nine> No such method 'IO' for invocant of type '<anon|118534656>'

[10:28] <nine> This could be a rakudo regression ^^^

[10:28] <Zoffix> m: class {}.IO

[10:28] <camelia> rakudo-moar 8ad885: OUTPUT«No such method 'IO' for invocant of type '<anon|63061472>'␤  in block <unit> at <tmp> line 1␤␤»

[10:28] <Zoffix> star: class {}.IO

[10:28] <camelia> star-m 2016.04: OUTPUT«Method 'IO' not found for invocant of class '<anon|57619280>'␤  in block <unit> at <tmp> line 1␤␤»

[10:29] <Zoffix> s: Distribution::Path, 'new', \($*CWD, :file("META.info".IO))

[10:29] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/8ad885f/src/core/Distribution.pm#L122

[10:29] <nine> m: Distribution::Path, 'new', \($*CWD, :file("META.info".IO))

[10:29] <camelia> rakudo-moar 8ad885: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant string "new" in sink context (lines 1, 1)␤»

[10:30] <Zoffix> Wasn't there a change from a role to a class?

[10:30] <nine> m: Distribution::Path.new($*CWD, :file("META.info".IO))

[10:30] <camelia> rakudo-moar 8ad885: OUTPUT«No meta file located at /home/camelia/META.info␤  in block <unit> at <tmp> line 1␤␤»

[10:30] <Zoffix> 'cause there's a weird quirk that a role is Cool and Cool has .IO

[10:30] <Zoffix> m: role {}.IO

[10:30] <camelia> rakudo-moar 8ad885: OUTPUT«No such method 'IO' for invocant of type '<anon|48705520>'␤  in block <unit> at <tmp> line 1␤␤»

[10:30] <Zoffix> Oh dafuq

[10:30] <Zoffix> m: role {}.new.IO

[10:30] <camelia> rakudo-moar 8ad885: OUTPUT«No such method 'IO' for invocant of type '<anon|47906832>'␤  in block <unit> at <tmp> line 1␤␤»

[10:30] <Zoffix> m: say role {} ~~ Cool

[10:30] <camelia> rakudo-moar 8ad885: OUTPUT«True␤»

[10:31] * Zoffix is uber confused now

[10:31] <Zoffix> m: Cool.IO

[10:31] <camelia> rakudo-moar 8ad885: ( no output )

[10:32] <nine> I got the error with "This is Rakudo version 2016.09-116-g2a2f26c" on my laptop. Upgrading rakudo right now.

[10:35] <nine> Oh. It's actually fixed in current nom :)

[10:35] <nine> So there was a regression but also a fix :)

[10:36] <nine> Sorry for the noise

[10:39] <lizmat> Zoffix: still time to get in a JVM fix ?

[10:40] <lizmat> see last mail of bartolin

[10:40] <lizmat> j: class { has int $!n = 0; method x ($!n) {} }.new.x: 42

[10:40] <camelia> rakudo-jvm 2a1605: OUTPUT«org.perl6.nqp.sixmodel.reprs.P6OpaqueBaseInstance$BadReferenceRuntimeException: Cannot access a native attribute as a reference attribute␤  in method x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[10:43] <Zoffix> lizmat, if someone knows how to fix it, sure. I'm still waiting for MoarVM release

[10:43] <lizmat> well, it's a bandaid fix really, to make sure List.tail works on JVM again

[10:47] <dalek> rakudo/nom: 666128f | lizmat++ | src/core/Rakudo/Internals.pm:

[10:47] <dalek> rakudo/nom: Make List.tail work on JVM for now

[10:47] <dalek> rakudo/nom:

[10:47] <dalek> rakudo/nom: We cannot presently bind native attributes in a signature yet.

[10:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/666128fc6e

[11:04] <stmuk> hmmm wondering whether to delay Rakudo * until FreeBSD/OpenBSD & Linux (HLE CPUs) works?

[11:04] <timotimo> stmuk: any chance a bios update could potentially fix the problem on all those machines?

[11:05] <stmuk> well maybe microcode update could fix Linux

[11:07] <timotimo> allegedly not

[11:07] <timotimo> but a friend told me a bios update would turn the feature off during boot

[11:08] <stmuk> I don't think HLE is the root cause since I've seen the bug (or similar) on all BSD systems with old processors

[11:08] <stmuk> eg. qemu virtual CPU & FreeBSD

[11:08] <timotimo> does the documentation say unlocking a mutex that's not locked at that moment is illegal?

[11:10] <stmuk> on what platform?

[11:12] <stmuk> bbl

[11:18] <timotimo> i guess i'll have a quick look if libuv gives us the ability to try to lock something only if it isn't currently locked, without blockin

[11:19] <timotimo> then we can just do that immediately before unlocking the mutex and we won't end up unlocking an unlocked mutex

[11:19] <timotimo> how's that sound?s

[11:19] <nine> racy?

[11:19] <timotimo> yeah, there's uv_mutex_trylock

[11:20] <timotimo> it'd be racy if we looked if the lock is unlocked and then lock it

[11:20] <timotimo> because between finding out it isn't locked and unlocking it, some other thread may have locked it

[11:22] <nine> But if we check if it's locked and we find it to be locked, so we think it's good and just before we unlock it, someone else beats us there?

[11:22] <timotimo> wrong. if it's locked, we know we're owning the lock

[11:23] <timotimo> of course it'd be better if we could figure out why we end up with an unlocked mutex that we're trying to unlock again in the first place

[11:23] <nine> Then it's fine :)

[11:23] <nine> That's the real question, yes

[11:24] <timotimo> even though stmuk has been complaining about this for a long time, and some other users have recently started hitting this bug, nobody wanted to do anything about it yet

[11:27] <timotimo> actually ... i think i'll even guard this shitty hack with an environment variable

[11:28] * timotimo suddenly learns about secure_getenv

[11:30] <timotimo> hm, seems like you can compile libuv with debugging and get it to error when you do a destroy, a lock, or an unlock where you're not supposed to

[11:30] <timotimo> so maybe we can debug this on a non-b0rked linux system that way?

[11:31] <timotimo> ... how do we actually build libuv at all?

[11:43] <timotimo> ugh, i'm having a really hard time finding the ticket for this

[11:43] <timotimo> stmuk: what's the RT again?

[11:47] <nine> m: role Foo {}; my $bar = 1; $bar does Foo unless $bar.does(Foo);

[11:47] <camelia> rakudo-moar 666128: OUTPUT«WARNINGS for <tmp>:␤Useless use of $bar in sink context (line 1)␤»

[11:47] <nine> Ha! a new useless useless warning ^^^!

[11:47] <nine> TimToady: ^^^

[11:49] <nine> At least Perl 6 makes it easier to edit a postfix unless into an unless statement :)

[11:49] <AlexDaniel> what does it mean? ｢$bar does Foo｣

[11:50] <nine> mixes the role into the object

[11:50] <AlexDaniel> m: role Foo {}; my $bar = 1; $bar does Foo unless $bar.does(Foo); say $bar.WHAT

[11:50] <camelia> rakudo-moar 666128: OUTPUT«WARNINGS for <tmp>:␤Useless use of $bar in sink context (line 1)␤(Int+{Foo})␤»

[11:50] <AlexDaniel> indeed

[11:52] <timotimo> pff. on linux, libuv already sets the mutex type to ERRORCHECK, which means a re-unlock is already supposed to cause an abort() immediately

[11:52] <timotimo> (the abort is added by libuv)

[11:54] <lizmat> jnthn_: is there a compelling reason why Str.match returns a List instead of a Seq ?

[11:55] <lizmat> (when returning more than one Match)

[11:55] <bartolin_> timotimo: it's issue 410 for MoarVM, isn't it?

[11:55] <timotimo> ah

[11:55] <timotimo> that's why i couldn't find it on rt

[11:59] <timotimo> stmuk: can you try out a patch for me on the systems that explode?

[12:02] <timotimo> because i just pushed a branch to moarvm that makes extra double sure that that unlock can't happen if the lock before that didn't happen

[12:03] <stmuk> timotimo: sure!

[12:05] <stmuk> timotimo:f2369?

[12:05] <timotimo> 9b12a49

[12:08] <stmuk> ah I see the branch

[12:29] <stmuk> timotimo: YES! it fixes panda install on FreeBSD 11

[12:29] <timotimo> o_O

[12:29] <timotimo> okay, could you perhaps put a hardware watchpoint on the variable that has_user_threads reads?

[12:30] <timotimo> because if this fixed it, that value seems to change during the body of the multi_cache_add function

[12:32] <timotimo> well, at least i don't see a reason why this shouldn't be on master

[12:32] <stmuk> timotimo: I can do this later but I was going out shortly

[12:32] <timotimo> OK

[12:32] <timotimo> i'm glad this fixed it

[12:33] <timotimo> i hope this is the same problem linux with broken HLE has?

[12:33] <stmuk> the stacktraces looked v similar

[12:34] <timotimo> as long as multi_cache_add was on the stack trace, it'll potentially be the right thing

[12:34] <stmuk> timotimo: OK I can do further testing today early Euroish evening time

[12:34] <timotimo> thing is, it shouldn't be possible for this to fix anything

[12:34] <timotimo> oh

[12:34] <timotimo> yeah, it is possible i guess

[12:34] <timotimo> if you make enough new threads that the thread id wraps

[12:35] <stmuk> bbfn

[12:36] <timotimo> does zef or panda create about 2**32 or 2**64 threads to install stuff?

[12:38] <lizmat> timotimo: pretty sure it doesn'

[12:38] <lizmat> t

[12:39] <timotimo> yeah, i'm pretty sure, too

[12:39] <timotimo> it'd probably take a couple of days to create that many threads

[13:09] <lizmat> afk&

[13:16] <timotimo> m: Thread.new for ^(2**32)

[13:16] <camelia> rakudo-moar 666128: OUTPUT«Required named parameter 'code' not passed␤  in block <unit> at <tmp> line 1␤␤»

[13:16] <timotimo> m: Thread.new(:code({ sleep 10 })) for ^(2**32)

[13:16] <camelia> rakudo-moar 666128: OUTPUT«Memory allocation failed; could not allocate 131072 bytes␤»

[13:16] <timotimo> that was fast

[13:17] <timotimo> yeah, that kind of code gets you OOM-killed rather quickly :)

[15:26] <dalek> roast: a08298d | (Harrison Chienjo)++ | S29-os/system.t:

[15:26] <dalek> roast: Tests for Proc.command and Proc.signal (#169)

[15:26] <dalek> roast:

[15:26] <dalek> roast: * Add test for Proc.command.

[15:26] <dalek> roast:

[15:26] <dalek> roast: * Fix missing last parameter.

[15:26] <dalek> roast:

[15:26] <dalek> roast: * Add test for proc.command returned by shell().

[15:26] <dalek> roast:

[15:26] <dalek> roast: * Add .signal test for Proc.

[15:26] <dalek> roast:

[15:26] <dalek> roast: * Use correct name.

[15:26] <dalek> roast:

[15:26] <dalek> roast: * Fix wrong name in test description.

[16:19] <TimToady> nine: thanks, put it into my uu file :)

[16:51] <Zoffix> Release! Release! Release! Release!

[16:51] * Zoffix is impatient :D

[16:54] <mst> bloody canadians

[16:54] <moritz> so, who does the release?

[16:54] <Zoffix> NeuralAnomaly does.

[16:55] <Zoffix> But we're all waiting for jnthn++ to cut MoarVM release :)

[17:11] <mst> WE DEMAND MOAR

[17:11] <mst> Zoffix: NeuralAnomaly is yet another of your botswarm?

[17:11] * lucasb_ is waiting too :)

[17:11] <Zoffix> mst, yup

[17:12] <geekosaur> zoffix is a bit botty >.>

[17:14] <moritz> taking over the world with IRC and release bots. I, for one, welcome our now electronic overlords!

[17:14] <Zoffix> \o/

[17:15] <nine> Seems like we really need a MoarVM release bot ;)

[17:22] <dalek> roast: 58047e6 | moritz++ | S09-typed-arrays/native-decl.t:

[17:22] <dalek> roast: Very basic my str @ tests

[17:22] <dalek> roast: review: https://github.com/perl6/roast/commit/58047e68ba

[17:37] <dalek> roast: c8889fc | moritz++ | S03-operators/autoincrement.t:

[17:37] <dalek> roast: Test pre- and postfix autoincrement on Num

[17:37] <dalek> roast: review: https://github.com/perl6/roast/commit/c8889fc78a

[17:38] <Zoffix> moritz, I guess I should've mentioned that coverage report is a bit outdated :}

[17:38] <Zoffix> Not that I mind extra tests.

[17:38] <moritz> arglbargl

[17:39] <Zoffix> :}

[17:39] <Zoffix> The other one are in https://github.com/perl6/roast/commit/2a3cdb2e257e97d8c6dafefecc8f6221f87da80f

[17:40] <moritz> and this being roast, there are least three sensible places where such tests should go

[17:40] * Zoffix nods

[17:41] <dalek> roast: c64cd86 | moritz++ | S03-operators/autoincrement.t:

[17:41] <dalek> roast: Revert "Test pre- and postfix autoincrement on Num"

[17:41] <dalek> roast:

[17:41] <dalek> roast: This reverts commit c8889fc78a3b46a4721406b7d787fe1ccf8c1df1.

[17:41] <dalek> roast:

[17:41] <dalek> roast: Turns out those ops were already covered in commit

[17:41] <dalek> roast: 2a3cdb2e257e97d8c6dafefecc8f6221f87da80f / file S02-types/num.t

[17:41] <dalek> roast: review: https://github.com/perl6/roast/commit/c64cd86eda

[17:57] <dalek> rakudo/nom: 1acf5bf | TimToady++ | src/Perl6/Actions.nqp:

[17:57] <dalek> rakudo/nom: does is a mutator, so should want its left arg

[17:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1acf5bf88d

[17:58] <TimToady> nine: you can go ahead and flip your 'unless' back if you like, though seems to me 'does' should be smart enough not to reapply a role, which oughta be safe since roles are immutable

[18:00] <TimToady> and reapplying a role ought to be idempotent

[18:06] <nine> TimToady: thanks! That means, I'm now gonna have to find out why exactly I need that unless. I'm sure I've tried it without at first.

[18:08] <Zoffix> m: role Foo {}; my $x = 42; quietly $x does Foo for ^10; dd $x

[18:08] <camelia> rakudo-moar 666128: OUTPUT«Int+{Foo}+{Foo}+{Foo}+{Foo}+{Foo}+{Foo}+{Foo}+{Foo}+{Foo}+{Foo} $x = 42␤»

[18:09] <Zoffix> s: &infix:<does>

[18:09] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/666128f/src/core/operators.pm#L15

[18:48] <timotimo> .comb(0) is apparently the same as .comb(1)

[18:48] <timotimo> do we want that?

[18:49] <Zoffix> m: 'foo'.comb(-1000000).say

[18:49] <camelia> rakudo-moar 1acf5b: OUTPUT«(f o o)␤»

[18:49] <Zoffix> IMO throwing would be good.

[18:57] <timotimo> m: "hello".comb(NaN)

[18:57] <camelia> rakudo-moar 1acf5b: OUTPUT«Cannot resolve caller comb(Str: Num); none of these signatures match:␤    (Cool $: *%_)␤    (Cool $: Regex $matcher, $limit = Inf, *%_)␤    (Cool $: Str $matcher, $limit = Inf, *%_)␤    (Str:D $: *%_)␤    (Str:D $: Int:D $size, $limit = *, *%_)…»

[19:00] <Zoffix> Well, with it being 9PM in Prague, I don't think there'll be a release today.... So I'm free to go out, get booze, and get drunk :P

[19:00] <mst> oh, good, you're back in the fold again

[19:00] <mst> I was worried there for a minute

[19:00] <timotimo> that's okay

[19:00] <Zoffix> lol

[19:01] <Zoffix> mst, I didn't drink since last Friday.

[19:01] <Zoffix> It's very un-Zoffix-like

[19:01] <lucasb_> stay healthy Zoffix++

[19:01] <mst> Zoffix: I'm so sorry

[19:01] <Zoffix> lol

[19:02] <mst> ugh. at some point I should try and write an irssi filter that strips mangled ++s like that

[19:03] <lucasb_> .comb returns nonsense values when you pass non-positive and a limit

[19:03] <lucasb_> m: say 'abcdef'.comb(0, 2).perl

[19:03] <camelia> rakudo-moar 1acf5b: OUTPUT«("b", "c").Seq␤»

[19:03] <lucasb_> m: say 'abcdef'.comb(-1, 2).perl

[19:03] <camelia> rakudo-moar 1acf5b: OUTPUT«("c", "d").Seq␤»

[19:03] <timotimo> but is that really nonsense?

[19:03] <timotimo> m: say 'abcdef'.comb(-2, 2)'perl

[19:03] <camelia> rakudo-moar 1acf5b: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> say 'abcdef'.comb(-2, 2)⏏'perl␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement…»

[19:03] <timotimo> m: say 'abcdef'.comb(-2, 2).perl

[19:03] <camelia> rakudo-moar 1acf5b: OUTPUT«("d", "e").Seq␤»

[19:03] <timotimo> m: say 'abcdef'.comb(-3, 2).perl

[19:03] <camelia> rakudo-moar 1acf5b: OUTPUT«("e", "f").Seq␤»

[19:03] <timotimo> that's so cool

[19:04] <timotimo> not sensible to keep, though

[19:04] * timotimo AFK

[19:13] <nine> m: role Foo { has @.attrs }; my $i = 1; $i does Foo; $i.attrs.push: 1; $i does Foo; $i.attrs.push: 2; say $i.attrs

[19:13] <camelia> rakudo-moar 1acf5b: OUTPUT«[2]␤»

[19:13] <nine> TimToady: ^^^ not as idempotent as it ought to be

[19:21] * Zoffix changed mind

[19:22] <Zoffix> Don't wanna feel like crap tomorrow :}

[19:26] <nine> Zoffix: that's why I rarely drink these days. Too much productive time lost. And too many awesome things to try :)

[19:27] <Zoffix> :)

[22:00] <Zoffix> "No appropriate parametric role variant available for 'Inline::Perl5::Perl5Attributes'Compilation failed in require at (eval 1) line 122."

[22:00] <Zoffix> nine, you around? :)

[22:01] <Zoffix> Full output. That's while trying to install Inline::Perl5 with bleed rakudo: https://gist.github.com/zoffixznet/578a8306e8b0aec2b26a23bde0bad386

[22:03] <lizmat> Zoffix: perhaps this is related to TimToady's last commit ?

[22:04] <lizmat> aka 1acf5bf88d8aea231509 ?

[22:06] <Zoffix> m: role Foo {}; my $bar = 1; $bar does Foo unless $bar.does(Foo);

[22:06] <camelia> rakudo-moar 1acf5b: ( no output )

[22:06] <Zoffix> m: role Foo {}; my $bar = 1; $bar does Foo unless $bar.does(Foo); dd $bar

[22:06] <camelia> rakudo-moar 1acf5b: OUTPUT«Int+{Foo} $bar = 1␤»

[22:08] <Zoffix> gonna try to build weithout it

[22:10] <Zoffix> Hmm... "No need for Perl5Attributes to be parametric": https://github.com/niner/Inline-Perl5/commit/f3a06bf815649f9e4f134f5be8341f4002eb36ae

[22:15] * lizmat is tired and goes to bed

[22:17] <Zoffix> Still fails with TT's change, so I'm betting my money on the above commit

[22:18] <Zoffix> I mean without TT's commit :)

[22:18] <lizmat> ok, well, it was related to roles

[22:19] <lizmat> sleep&

[22:19] <Zoffix> night

[22:37] <Zoffix> Well, if I --notest install it, the stresstest seems to pass, so no rush on fixing it :)

[22:38] <timotimo> all those bots run on hack, then?

[22:39] <Zoffix> Just the above two

[22:40] <timotimo> ok

[22:40] <timotimo> but you create the data they use on a beefier bot?

[22:40] <timotimo> obx*

[22:40] <timotimo> box*

[22:40] <Zoffix> The coverage stuff I run on my home box. One of the bots does build each rakudo commit though

[22:41] <timotimo> cool

[22:41] <timotimo> did you ever have a look at collect.p6c.org?

[22:41] <Zoffix> Never heard of it

[22:42] <timotimo> it's a monitoring thing

[22:48] <Zoffix> NeuralAnomaly, status

[22:48] <NeuralAnomaly> Zoffix, [✘] Next release is today. Since last release, there are 47 new still-open tickets (1 unreviewed and 0 blockers) and 2 unreviewed commits. See http://perl6.fail/release/stats for details

[22:48] <Zoffix> NeuralAnomaly, status

[22:48] <NeuralAnomaly> Zoffix, [✔] Next release is today. Since last release, there are 47 new still-open tickets (0 unreviewed and 0 blockers) and 0 unreviewed commits. See http://perl6.fail/release/stats for details

[22:49] <timotimo> cool :)

[22:49] <Zoffix> NeuralAnomaly, it's time

[22:49] <NeuralAnomaly> Zoffix, Oh boy! Really?! We're doing a realease‽‽ YEY!

[22:49] <Zoffix> NeuralAnomaly, cut the release

[22:49] <NeuralAnomaly> Zoffix, Will do! If you're feeling particularly naughty, you can watch me at http://perl6.fail/release/progress or go look at some cats http://icanhas.cheezburger.com/lolcats

[22:49] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Prep done

[22:49] <AlexDaniel> by the way, what's up with http://smoke.perl6.org/report ?

[22:49] <dalek> nqp: 7914a19 | (Zoffix Znet)++ | tools/build/MOAR_REVISION:

[22:49] <dalek> nqp: bump MoarVM version to 2016.10

[22:49] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7914a19fd6

[22:49] <dalek> nqp: 223373d | (Zoffix Znet)++ | VERSION:

[22:49] <dalek> nqp: bump VERSION to 2016.10

[22:49] <dalek> nqp: review: https://github.com/perl6/nqp/commit/223373d86c

[22:52] <timotimo> oh, the release comes with a java thing now?

[22:53] <Zoffix> What java thing?

[22:53] <timotimo> it's building rakudo-j right now

[22:53] <timotimo> no, nqp-j

[22:53] <Zoffix> No, it's building nqp-j

[22:53] <Zoffix> It does build and test nqp-j, but not rakudo-j

[22:54] <timotimo> OK!

[22:58] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ nqp tests OK

[23:01] <timotimo> it's building nqp-j again?

[23:02] <Zoffix> Yes. It made the tarball and it's now testing it.

[23:05] <mst> you killed dalek

[23:05] <mst> * Zoffix is now known as ZoffixWho

[23:06] <Zoffix> :D

[23:06] <Zoffix> I don't think it was me

[23:06] <Zoffix> It was AlexDaniel

[23:06] <AlexDaniel> yeah…

[23:07] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ nqp release tarball tests OK

[23:08] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ nqp release DONE

[23:08] <dalek> rakudo/nom: 090c392 | (Zoffix Znet)++ | docs/announce/2016.10.md:

[23:08] <dalek> rakudo/nom: Generate release announcement for 2016.10

[23:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/090c392542

[23:08] <dalek> rakudo/nom: 7c62a41 | (Zoffix Znet)++ | tools/build/NQP_REVISION:

[23:08] <dalek> rakudo/nom: [release] bump NQP revision

[23:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7c62a41d9d

[23:08] <dalek> rakudo/nom: eb3123e | (Zoffix Znet)++ | VERSION:

[23:08] <dalek> rakudo/nom: [release] bump VERSION to 2016.10

[23:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eb3123e5e6

[23:15] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Rakudo stresstest (master) OK

[23:17] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Rakudo stresstest (6.c-errata) OK

[23:25] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Rakudo release DONE

[23:25] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Post: upload tarballs to rakudo.org

[23:25] <NeuralAnomaly> Zoffix, 🎺🎺🎺📯📯📯📯📯📯🌈🌈🌈📦📦📦

[23:25] <NeuralAnomaly> Zoffix, The release of **Rakudo #104 2016.10** has now been completed

[23:25] <NeuralAnomaly> Zoffix, 🎺🎺🎺📯📯📯📯📯📯🌈🌈🌈📦📦📦

[23:25] * NeuralAnomaly celebrates with an appropriate amount of fun

[23:25] <Zoffix> NeuralAnomaly, thanks

[23:25] <NeuralAnomaly> Zoffix, any time, buddy!

[23:26] <p3rln00b> 

[23:26] <yoleaux2> 08:15Z <Zoffix> p3rln00b: revert https://github.com/perl6/nqp/commit/298e2281ec after the release

[23:28] <dalek> nqp: 3e14289 | (Zoffix Znet)++ | t/qast/01-qast.t:

[23:28] <dalek> nqp: Revert "Temporarily comment out tests failing on JVM"

[23:28] <dalek> nqp:

[23:28] <dalek> nqp: This reverts commit 298e2281ec01c7c61e446024ca59078e3a3748bb.

[23:28] <dalek> nqp:

[23:28] <dalek> nqp: Unfudges failing JVM tests

[23:28] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3e142894cf

[23:28] <Zoffix> And now I can retreat to play all three parts of Star Craft II that should finish downloading in 10-15 minutes \o/

[23:30] <dalek> rakudo/nom: 1942243 | (Zoffix Znet)++ | docs/release_guide.pod:

[23:30] <dalek> rakudo/nom: 2016.10 is now in the past

[23:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/19422430e4

[23:35] <dalek> rakudo/nom: b744de3 | (Zoffix Znet)++ | docs/ChangeLog:

[23:35] <dalek> rakudo/nom: Prep 2016.11 section

[23:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b744de35b0

[23:37] * timotimo only played the first two parts of that

[23:40] <Zoffix> I played them a few times in the past, but never the last one

[23:41] * timotimo to bed
