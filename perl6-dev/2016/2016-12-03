[01:32] <MasterDuke> timotimo: interesting. is there anything that prevents ops from being implemented on the JIT?

[01:33] <timotimo> some ops are harder than others. some aren't worth the effort

[01:34] <timotimo> a big chunk of ops are implemented as calls into the same function the interpreter would call

[01:34] <timotimo> others are implemented straight in assembly language

[01:34] <timotimo> the former you find in graph.c, the latter in emit*.dasc

[01:35] <timotimo> the JIT can also do a nice trick called "devirtualization" (and it points out when it can or can't do it in the jit log) where if the REPR in question is known, one less pointer has to be chased down to do the call

[01:35] <MasterDuke> so just looking at a profile and seeing a lot of interpreted frames doesn't necessarily mean the script would run faster if those were JITed?

[01:36] <timotimo> if they are interpreted, rather than speshed, they won't have a chance to hit the jit even if all ops were implemented

[01:36] <timotimo> you can only go from orange to green by improving the jit. you can't go straight from red to green

[01:36] <MasterDuke> ah, interesting

[01:37] <timotimo> you can grep for BAIL in a jit log to see what's what

[01:38] <timotimo> and going through the file looking for what lines come before a BAIL line tells you what functions didn't get compiled because of that

[01:38] <MasterDuke> timotimo: btw, i have an idea for an advent post i would love to read that i think you're qualified to write. a trace of what exactly happens when you run perl6 -e 'say "hello world"'

[01:38] <timotimo> oh

[01:39] <timotimo> yeah, maybe i could write that

[01:39] <MasterDuke> what's the first line of code? where does it transition from moar to nqp to perl6?

[01:39] <timotimo> mhm

[01:40] <MasterDuke> it's something i've been thinking about for a while (that is, persuading someone who knows these things to write them down)

[01:40] <timotimo> hah

[01:40] <timotimo> yeah, i'll see about that

[01:40] <timotimo> need to get some sleep first, though

[01:40] <MasterDuke> cool

[03:19] <dalek> rakudo/nom: 01775b7 | (Zoffix Znet)++ | src/Perl6/ (2 files):

[03:19] <dalek> rakudo/nom: Add support for U+2212 minus in Num and compound literals

[03:19] <dalek> rakudo/nom:

[03:19] <dalek> rakudo/nom: Makes the following parse correctly:

[03:19] <dalek> rakudo/nom: 42e−42, <−1/2>, <−42+42i>, and <42−42i>

[03:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/01775b73db

[03:21] <dalek> roast: 09f30c6 | (Zoffix Znet)++ | S (2 files):

[03:21] <dalek> roast: Add tests for U+2212 minus in Nums and compound literals

[03:21] <dalek> roast:

[03:21] <dalek> roast: Fixed in commit: https://github.com/rakudo/rakudo/commit/01775b73db

[03:21] <dalek> roast: review: https://github.com/perl6/roast/commit/09f30c6e38

[03:26] <AlexDaniel> \o/

[03:43] <dalek> rakudo/nom: 6cd2144 | (Zoffix Znet)++ | src/Perl6/ (2 files):

[03:43] <dalek> rakudo/nom: Add suport for U+2212 minus with literal Ints in signatures

[03:43] <dalek> rakudo/nom:

[03:43] <dalek> rakudo/nom: Fixes part of RT#129912:

[03:43] <dalek> rakudo/nom: https://rt.perl.org/Ticket/Display.html?id=129915

[03:43] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129912

[03:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6cd2144b5a

[03:46] <dalek> roast: 141fedc | (Zoffix Znet)++ | S06-signature/types.t:

[03:46] <dalek> roast: Test U+2212 minus works with Int literals in signature

[03:46] <dalek> roast:

[03:46] <dalek> roast: RT#129915: https://rt.perl.org/Ticket/Update.html?id=129915

[03:46] <dalek> roast: Fix commit: https://github.com/rakudo/rakudo/commit/6cd2144b5a

[03:46] <dalek> roast: review: https://github.com/perl6/roast/commit/141fedc99c

[03:46] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129915

[04:44] <dalek> rakudo/nom: ae614f9 | (Zoffix Znet)++ | src/Perl6/ (2 files):

[04:44] <dalek> rakudo/nom: Fix issues with Inf term

[04:44] <dalek> rakudo/nom:

[04:44] <dalek> rakudo/nom: - Fix -Inf² not following mathematical order of operations

[04:44] <dalek> rakudo/nom:     | `-Inf` was written as a single token, preventing tighter ops

[04:44] <dalek> rakudo/nom:     | working on plain Inf first

[04:44] <dalek> rakudo/nom: - Fix −Inf, ∞, -∞, and −∞ not being accepted as a type

[04:44] <dalek> rakudo/nom:     constraint in signatures

[04:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ae614f94b0

[04:44] <dalek> roast: 5944f8c | (Zoffix Znet)++ | S0 (3 files):

[04:44] <dalek> roast: Test issues with Inf term

[04:44] <dalek> roast:

[04:44] <dalek> roast: RT#129915 https://rt.perl.org/Ticket/Display.html?id=129915

[04:44] <dalek> roast: Fix commit: https://github.com/rakudo/rakudo/commit/ae614f94b0

[04:44] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129915

[04:44] <dalek> roast: review: https://github.com/perl6/roast/commit/5944f8c36a

[09:50] <dalek> rakudo/nom: d704820 | lizmat++ | / (3 files):

[09:50] <dalek> rakudo/nom: Make native shaped array initialization much faster

[09:50] <dalek> rakudo/nom:

[09:50] <dalek> rakudo/nom: - copy from a data structure: 6x

[09:50] <dalek> rakudo/nom: - copy from a similarly shaped non-native shaped array: 4x

[09:50] <dalek> rakudo/nom:

[09:50] <dalek> rakudo/nom: Benchmarked for a 2x2 matrix: larger matrices will be faster still.

[09:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d70482033d

[09:58] <psch> ...why do neither nqp-j nor nqp-m actually *do* anything with the flag that marks a Frame as the Frame to run state init code..?

[09:59] <psch> as in, in the whole code base there's exactly two occurences of the corresponding flags, and in both backends that's the definition and then the assignment

[10:09] <[TuxCM]> This is Rakudo version 2016.11-106-gd70482033 built on MoarVM version 2016.11-27-g3171dbbe

[10:09] <[TuxCM]> csv-ip5xs        3.257

[10:09] <[TuxCM]> test            14.759

[10:09] <[TuxCM]> test-t           6.688

[10:09] <[TuxCM]> csv-parser      14.251

[10:40] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make native shaped array initialization much faster

[10:40] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/180925582 https://github.com/rakudo/rakudo/compare/ae614f94b0fe...d70482033d55

[10:40] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[11:35] <psch> i absolutely don't get it

[11:36] <psch> i mean, the logic for putting state vars into the Frame's lexical storage looks semantically identically across nqp-{j,m}

[11:36] <psch> https://github.com/MoarVM/MoarVM/blob/master/src/core/frame.c#L607 on moar

[11:37] <psch> https://github.com/perl6/nqp/blob/master/src/vm/jvm/runtime/org/perl6/nqp/runtime/CallFrame.java#L148 on jvm

[11:37] <timotimo> it's also important that the right flags get set ... i think?

[11:37] <timotimo> or ... maybe cloning?

[11:37] <psch> both come down to "if we don't have lexical storage for state vars yet, allocate it, if we don't have the state var yet, clone it from the static info"

[11:37] <timotimo> ah, OK

[11:38] <psch> at least if i get the C switch/goto stuff right :P

[11:38] <psch> i mean, i'm pretty sure i do understand it correctly, but who knows :P

[11:41] <psch> and, well, mucking about with that nqp-j code only got me different kinds of wrong results

[11:47] <timotimo> there's been multiple cases in the past where things weren't cloned when they were supposed to

[11:47] <timotimo> so maybe you're getting something like that?

[11:47] <psch> yeah i was wondering just now if i might have to clone the coderef

[11:47] <psch> the one that gets fed into the CallFrame constructor

[11:48] <psch> but that actually seems a bit silly

[11:48] <psch> on the other hand, that's where we get the static info from, which is where we get the original value from vOv

[15:01] <dalek> rakudo/nom: 947422b | lizmat++ | / (2 files):

[15:01] <dalek> rakudo/nom: Add an iterator for native 1dimmed arrays

[15:01] <dalek> rakudo/nom:

[15:01] <dalek> rakudo/nom: Makes it about 17x faster (for a 100 element shaped 1dimmed array)

[15:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/947422b179

[15:47] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Add an iterator for native 1dimmed arrays

[15:47] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/180963477 https://github.com/rakudo/rakudo/compare/d70482033d55...947422b17980

[16:27] <dalek> rakudo/nom: 3e93ddd | lizmat++ | / (2 files):

[16:27] <dalek> rakudo/nom: Add an iterator for native >1 dimmed arrays

[16:27] <dalek> rakudo/nom:

[16:27] <dalek> rakudo/nom: Makes it about 11x faster (for a 10x10 element shaped 2dimmed array)

[16:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3e93ddd542

[16:42] <dalek> rakudo/nom: ec56bf2 | lizmat++ | src/core/ (3 files):

[16:42] <dalek> rakudo/nom: Move values to ShapedArrayCommon role

[16:42] <dalek> rakudo/nom:

[16:42] <dalek> rakudo/nom: Now that all of the clients have their own .iterator.  Makes .values

[16:42] <dalek> rakudo/nom: on native shaped arrays about 11x faster (based on a 10x10 matrix)

[16:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ec56bf220b

[17:17] <babydrop> There's no simple way to negate a number in Perl6/Grammar, is there? I basically need a version of this token that negates the number instead of attaching a prefix:<-> op to the AST https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.nqp#L7162-L7167

[17:18] <babydrop> there's nqp::neg* for num/int, but I also need to take care of Rats and Complex

[17:18] <babydrop> Maybe there's a way to change the generated stuff for them to negate numerator (or real/img parts)

[17:21] <timotimo> babydrop: one way to do stuff is to find the symbol for the negation prefix op and just run it on the object you've constructed

[17:23] <babydrop> Thanks. Lemme try that out

[17:23] <timotimo> not sure if there's something specific you need to do to make it actually work

[17:24] <timotimo> for example we have "compile_in_context" for compiling stuff that belongs to the current compilee

[17:34] <dalek> rakudo/nom: 39261e7 | lizmat++ | / (2 files):

[17:34] <dalek> rakudo/nom: Add optimised .(anti)pairs for native shaped arrays

[17:34] <dalek> rakudo/nom:

[17:34] <dalek> rakudo/nom: Makes them about 7x faster

[17:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/39261e7b3e

[17:35] <babydrop> hm hm "Cannot call Numeric; no signatures match"

[17:37] <babydrop> that's with https://gist.github.com/zoffixznet/6b22174b85d03c1e82a89ca28b53d3c0

[17:39] <timotimo> hmm, could it be the right op hasn't been defined at that point yet?

[17:59] <babydrop> It may be due to my messing up the type_constraint (inadvertently breaking it for version/str literals). At least now it seems to compile

[18:01] <babydrop> Nope, never mind... I messed it up now that it never was called :P

[18:25] <babydrop> "Object of type Int in QAST::WVal, but not in SC" heh

[18:25] <babydrop> What's SC?

[18:29] <cygx> babydrop: Serialization Context

[18:29] <babydrop> Thanks.

[18:40] * cygx sneaks a peek at the draft advent calendar postings...

[18:43] <japhb> Who does "BRIAN D FOY" show up as on the #perl6* channels?

[18:43] <japhb> Because the code in his advent posting got damaged by wordpress

[18:44] <psch> japhb: afaik he doesn't

[18:45] <psch> japhb: i'd guess tweeting at him is your best bet

[18:45] <japhb> psch: I have not the tweets.  Have you?

[18:46] <psch> japhb: no, i'm not on twitter

[18:46] <psch> timotimo++ is i think

[18:48] <timotimo> uh oh, what did i do?

[18:48] <timotimo> oh, i can do it

[18:49] <timotimo> what exactly should i tell him?

[18:49] <timotimo> is it the same $foo<bar> damage?

[18:49] <psch> i'd guess "replace your < and > with &lt; and &gt;" maybe?

[18:50] <psch> i don't know what the damage is though

[18:50] <psch> japhb: is there more broken than angle brackets?

[18:53] <timotimo> well, if it's the same as with our first post, it'll have swallowed everything inside the angle brackets

[18:54] <timotimo> i don't see the problem

[18:55] <psch> i honestly haven't looked at it, so uhm :)

[18:57] <japhb> Yeah, it was just angle brackets.  But since he was talking about allomorphs, the angle brackets were pretty important (and used in both code blocks and text)

[18:57] <japhb> timotimo: fourth line of the first code block, for example

[18:59] <timotimo> seems like that'd just be <4>

[19:01] <japhb> timotimo: Someone new to Perl 6 would be totally confused.

[19:01] <timotimo> yes

[19:01] <timotimo> i tried to repair the few instances i saw

[19:01] <japhb> timotimo: There's an &lt missing its ;

[19:02] <japhb> At least two places, actually

[19:03] <japhb> And the text and code following "  Several mandates that apply to us have drop-dead dates in 2017.

[19:03] <japhb> Gah

[19:03] <timotimo> huh? i put ; there >:(

[19:03] <japhb> And the text and code following "Consider the angle brackets version of quote words operator" is still messed up

[19:04] <timotimo> wordpress apparently just discarded my shit

[19:05] <timotimo> %hash = ;

[19:05] <timotimo> what goes there, i wonder?

[19:06] <timotimo> why is it supposed to be %hash = <4>? that's wrong!

[19:07] <timotimo> fuck you, wordpress, fuck you very, very much.

[19:07] <psch> timotimo: have you twote at bdfoy yet?

[19:07] <timotimo> yes

[19:07] <psch> alright

[19:07] <timotimo> i twatted him

[19:16] <babydrop> you... what? :)

[19:18] <timotimo> tweetified

[19:22] <cygx> twaught

[19:33] <babydrop> hm, OK so what do I do about the SC thing?

[19:34] <babydrop> I tried $*W.add_numeric_constant thing, but still same error

[19:35] <babydrop> These being my current changes: https://gist.github.com/zoffixznet/b8463544f39af5fd4a684d969f4be04a

[19:42] <timotimo> don't know, that should have worked :(

[19:59] <psch> you're not serializing the negated int

[19:59] <psch> s/int/numeric value/

[19:59] <psch> at least that's what the error says

[19:59] <babydrop> What does that mean?

[19:59] <psch> i'm not sure add_numeric_constant does that properly

[20:00] <psch> oh hm, can you try unboxing the return value before the binding in line 12 in the second file?

[20:00] <psch> err

[20:00] <psch> it's only one file, my bad

[20:00] <psch> ah, but that breaks Complex etc again :/

[20:01] <psch> well, $*W.add_numeric_constant can only deal with Int and Num in the first place

[20:02] <psch> m: use nqp; my Int $x = 5; say nqp::isbig_I($x)

[20:02] <camelia> rakudo-moar 39261e: OUTPUT«P6opaque: get_boxed_ref could not unbox for the representation '20' of type Scalar␤  in block <unit> at <tmp> line 1␤␤»

[20:02] <babydrop> The error is currently triggered by an Int fwiw

[20:02] <psch> m: use nqp; my Int $x = 5; say nqp::isbig_I(nqp::unbox_i($x))

[20:02] <camelia> rakudo-moar 39261e: OUTPUT«0␤»

[20:02] <psch> i'd try the unbox

[20:02] <psch> as in

[20:02] <psch> -   $val := $neg-op($val);

[20:03] <psch> +   $val := nqp::unbox_i($neg-op($val));

[20:03] <psch> +however many spaces you have there for the right indent level

[20:03] <psch> i'm honestly kind of confused what add_numeric_constant does there anyway

[20:04] <psch> i mean, in general

[20:04] <timotimo> oh

[20:04] <timotimo> babydrop has a general object they want in there

[20:04] <psch> 'cause nqp::isbig_I doesn't seem to work on boxed Ints on a Perl 6 level

[20:04] <timotimo> so should use $*W.add_object instead

[20:05] <psch> probably even $*W.add_object_if_no_sc

[20:05] <psch> but yes, that seems better for the other numbery types

[20:06] <psch> (the difference between add_object and add_object_if_no_sc isn't quite clear to me so maybe that advice is wrong :P )

[20:06] <psch> i mean, of course i can see what the code does, but the intricacies of a serialization context...

[20:07] <timotimo> i suppose add_object may transfer ownership?

[20:08] <psch> right, it would if there's already an SC set

[20:08] <psch> as in, it always does

[20:08] <babydrop> Changing to $val := $*W.add_object($neg-op($val)); gives Object of type BOOTInt in QAST::WVal, but not in SC

[20:11] <timotimo> ... :o

[20:11] <psch> that's funny, because add_object should add it to the SC :|

[20:12] <psch> oh

[20:12] <psch> what *is* the actual compile time value btw?

[20:12] <psch> like, just debug say it and comment stuff that doesn't work i guess?

[20:12] <babydrop> The nqp::say("Calling neg op " ~ $val.HOW.name($val) ~ " " ~ $val); on the previous line gives "Calling neg op Int 42"

[20:13] <psch> maybe try adding the original value to the SC as well?

[20:14] <psch> 'cause the ast still shows up i guess

[20:14] <babydrop> That's the original value, before $neq-op is called

[20:14] <psch> right, but you're only calling add_object on $neg-op($val)

[20:14] <psch> i'm saying also call $*W.add_object($val)

[20:14] <psch> because it still exists in the AST

[20:15] <timotimo> and add_object also returns the thing you have, yeah?

[20:15] <psch> and, well, that's exactly what the error says

[20:15] <psch> you have something in the AST (in a WVal) which isn't in the SC

[20:15] <psch> right, so you could do like $*W.add_object($neg-op($*W.add_object($val))) i suppose

[20:17] <timotimo> huh

[20:19] <babydrop> the $val := $*W.add_object($neg-op($*W.add_object($val))); shows the same error :(

[20:19] <psch> hm, in that case i'm out of idea :/

[20:20] <psch> i'd suggest trying a different layer of the compiler stack, but that seems hardly feasible

[20:20] <psch> when during compilation does it error out anyway?

[20:20] <timotimo> most probably during the mast phase

[20:23] <babydrop> oh wtf

[20:24] <babydrop> here's the current changes: https://gist.github.com/zoffixznet/79fbda2219cfb33c4b9bf3136ffed909 and here's the output: https://gist.github.com/zoffixznet/f81ed162021e0b74673cee178efedc78

[20:24] <babydrop> 42 turns into 14 :S

[20:25] <timotimo> so some other value is taking it's place?

[20:28] <psch> that or it's negating really weirdly :S

[20:37] <babydrop> w00t made it work

[20:37] <babydrop> https://gist.github.com/zoffixznet/ca7feb195fa7d68f58bb834567aea4b0

[20:38] <babydrop> .add_object doesn't return what we thought it returns, I guess

[20:38] <psch> oh

[20:38] <psch> yeah

[20:38] <psch> it returns the index inside the SC

[20:40] <psch> soo that probably was the 14

[20:40] <babydrop> yeah

[20:40] <psch> geez if you'd have tested with that :P

[20:40] <babydrop> haha :D

[20:55] <dalek> rakudo/nom: 471cea2 | lizmat++ | / (2 files):

[20:55] <dalek> rakudo/nom: Provide optimised .(anti)pairs for native 1dimmed arrays

[20:55] <dalek> rakudo/nom:

[20:55] <dalek> rakudo/nom: Makes them about 30% faster

[20:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/471cea25db

[21:15] <MasterDuke> babydrop: it doesn't work to just multiply by -1?

[21:16] <babydrop> nqp doesn't know how to do that for Rats and Complex

[21:16] <MasterDuke> ah

[21:32] <dalek> rakudo/nom: 965fa4d | lizmat++ | / (2 files):

[21:32] <dalek> rakudo/nom: Add optimised .kv for native shaped arrays

[21:32] <dalek> rakudo/nom:

[21:32] <dalek> rakudo/nom: Makes them about 16 faster (based on a 10x10 matrix)

[21:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/965fa4debc

[21:33] <timotimo> 16x faster?

[21:37] <lizmat> timotimo: yes

[21:37] <yoleaux2> 1 Dec 2016 12:12Z <gfldex> lizmat: please add to the next weekly that the commits 19169cc, 3ffdc37, b9a6dc8, 0bf8b18, c7b14ae, ce7c9f6 clarify the relationship between containers, default types and type constraints -- what used to be a rich source of confusion

[21:38] <lizmat> timotimo: not enough ?

[21:40] <lizmat> :-)

[21:40] <dalek> rakudo/nom: d26f4ba | (Zoffix Znet)++ | src/core/Num (2 files):

[21:40] <dalek> rakudo/nom: Move ≅(±Inf,±Inf) to Num

[21:40] <dalek> rakudo/nom:

[21:40] <dalek> rakudo/nom: We need to parse Numeric without relying on knowing how to negate

[21:40] <dalek> rakudo/nom: literals.

[21:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d26f4ba5da

[21:43] <timotimo> lizmat: just missing the x ;)

[21:43] <dalek> rakudo/nom: 5baa064 | (Zoffix Znet)++ | src/Perl6/ (2 files):

[21:43] <dalek> rakudo/nom: Implement negation for all numerics in signature literals

[21:43] <dalek> rakudo/nom:

[21:43] <dalek> rakudo/nom: Currently, only negated Ints can be specified as negatives in signatures.

[21:43] <dalek> rakudo/nom: This PR allows for all numeric literals to be prepended with either normal

[21:43] <dalek> rakudo/nom: or U+2212 minus, so we could use stuff like sub f(−½){}, sub f(−1.5){}, etc.

[21:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5baa064640

[21:44] <lizmat> timotimo: ah, good point  :-)  too late now

[21:44] <timotimo> not that important :)

[21:45] <dalek> roast: c027893 | (Zoffix Znet)++ | S06-signature/types.t:

[21:45] <dalek> roast: Test all numeric literals in signatures

[21:45] <dalek> roast:

[21:45] <dalek> roast: Rakudo commit:

[21:45] <dalek> roast: https://github.com/rakudo/rakudo/commit/5baa064640

[21:45] <dalek> roast: review: https://github.com/perl6/roast/commit/c027893b63

[21:46] <dalek> rakudo/nom: c1a3a3c | lizmat++ | / (2 files):

[21:46] <dalek> rakudo/nom: Provide optimised .kv for native 1dimmed arrays

[21:46] <dalek> rakudo/nom:

[21:46] <dalek> rakudo/nom: Makes them about 30% faster

[21:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c1a3a3c3b4

[22:19] <MasterDuke> timotimo: is it relatively simple to explain how the values seen in a profile are calculated from the json?

[22:20] <timotimo> it requires a walk of the whole tree

[22:24] <MasterDuke> yeah, but looking at the json, the neither the total_time nor the top level inclusive_time seem to be the sum of the rest of the inclusive times

[22:24] <babydrop> m: dd <0x5.5>

[22:24] <camelia> rakudo-moar c1a3a3: OUTPUT«RatStr.new(5.3125, "0x5.5")␤»

[22:24] <babydrop> m: dd 0x5.5

[22:24] <camelia> rakudo-moar c1a3a3: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Malformed postfix call␤at <tmp>:1␤------> dd 0x5.⏏5␤»

[22:33] <timotimo> MasterDuke: sorry, i haven't actually looked at the data part of the profiler in a while. maybe reading the code for the qtprofiler helps you figure it out?

[22:35] <dogbert2> lizmat: so HARNESS_TYPE=6 runs more tests that the normal 'make spectest' then?

[22:35] <yoleaux2> 13 Sep 2016 21:11Z <Zoffix> dogbert2: (RE: spectest failures), yeah, create an RT ticket for them.

[22:36] * dogbert2 oh no my nick is wrong

[22:37] <babydrop> dogbert2: from what I recall, that just switches the harness to Perl 6's harness

[22:38] <dogbert2> babydrop: aha

[22:39] <dogbert2> is it slower/faster/buggier?

[22:39] <babydrop> slower and buggier

[22:41] <dogbert2> running it now, will be interesting to see what happens though

[22:41] * dogbert2 finds it difficult to type with sunglasses on

[22:59] <dogbert2> make spectest HARNESS_TYPE=6 failed after t/spec/S32-str/indices.t :(

[23:14] <dalek> rakudo/nom: 971e147 | (Zoffix Znet)++ | src/core/ (2 files):

[23:14] <dalek> rakudo/nom: Give X::Syntax::Number::InvalidCharacter .at attribute

[23:14] <dalek> rakudo/nom:

[23:14] <dalek> rakudo/nom: The .pos is used by something else and when we trow from Grammar,

[23:14] <dalek> rakudo/nom: gets overwritten with some other value, resuling in incorrect information

[23:14] <dalek> rakudo/nom: shown in the exception.

[23:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/971e147fa8

[23:14] <dalek> roast: faaec89 | (Zoffix Znet)++ | S32-str/parse-base.t:

[23:14] <dalek> roast: Test for .at, not .pos in parse-base exception tests

[23:14] <dalek> roast: review: https://github.com/perl6/roast/commit/faaec890e6
