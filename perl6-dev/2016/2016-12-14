[00:08] <phatbot> m: my %h = 42 => Mu

[00:08] <camelia> rakudo-moar 7b84ad: ( no output )

[00:08] <phatbot> m: my %h{Int} = 42 => Mu

[00:08] <camelia> rakudo-moar 7b84ad: OUTPUT«Type check failed in binding to x; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»

[00:08] <phatbot> Kinda odd normal hash defaults to Mu values, but parametarizing keys make it default to Any

[00:13] <dalek> rakudo/nom: 003e654 | (Zoffix Znet)++ | src/core/Hash.pm:

[00:13] <dalek> rakudo/nom: Fix broken .perl of parametarized hash with no keys

[00:13] <dalek> rakudo/nom:

[00:13] <dalek> rakudo/nom: Currently, .perl output of a parametarized hash with no keys leaves

[00:13] <dalek> rakudo/nom: a stray `=` at the end. Fix by checking whether hash contains stuff.

[00:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/003e654dd6

[00:21] <dalek> roast: d7d0cef | (Zoffix Znet)++ | S32-hash/perl.t:

[00:21] <dalek> roast: Test .perl.EVAL roundtripness of parametarized hashes

[00:21] <dalek> roast:

[00:21] <dalek> roast: that have no values in em

[00:21] <dalek> roast:

[00:21] <dalek> roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/003e654dd6

[00:21] <dalek> roast: review: https://github.com/perl6/roast/commit/d7d0cef7f9

[00:59] <dalek> rakudo/nom: a5dc98a | (Zoffix Znet)++ | src/core/Proc/Async.pm:

[00:59] <dalek> rakudo/nom: Minor source formatting fix

[00:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a5dc98abc9

[01:16] <dalek> roast: 3b9eae1 | samcv++ | S15-unicode-information/uniprop.t:

[01:16] <dalek> roast: uniprop: add tests for Emoji property

[01:16] <dalek> roast: review: https://github.com/perl6/roast/commit/3b9eae15c0

[02:08] <dalek> roast: 187fb30 | samcv++ | S15-unicode-information/uniprop.t:

[02:08] <dalek> roast: uniprop: add tests for Emoji_Modifier, Emoji_All and Emoji_Modifier

[02:08] <dalek> roast: review: https://github.com/perl6/roast/commit/187fb302e9

[03:08] <MasterDuke> .tell jnthn explicitly putting a QAST::Op with a say in the while body prints (what i gave the say) for every line of the input file. but 'say "hi"' in the -ne doesn't ever print (not does .say)

[03:08] <yoleaux2> MasterDuke: I'll pass your message to jnthn.

[03:47] <samcv> .tell yoleaux2 hi

[03:47] <yoleaux2> samcv: Thanks for the message.

[03:47] <samcv> you're welcome

[04:44] <MasterDuke> .tell jnthn and -p doesn't print the file contents

[04:44] <yoleaux2> MasterDuke: I'll pass your message to jnthn.

[07:26] <lizmat> Files=1155, Tests=53918, 200 wallclock secs (11.19 usr  4.44 sys + 1184.84 cusr 127.90 csys = 1328.37 CPU)

[07:32] <[Tux]> This is Rakudo version 2016.11-233-ga5dc98abc built on MoarVM version 2016.11-44-g8e24145d

[07:32] <[Tux]> csv-ip5xs        3.464

[07:32] <[Tux]> test            15.716

[07:32] <[Tux]> test-t           6.389

[07:32] <[Tux]> csv-parser      14.471

[08:15] <dalek> rakudo/nom: 2a8ec40 | samcv++ | / (2 files):

[08:15] <dalek> rakudo/nom: uniprop: Return correct values for na, uc, tc, lc properties

[08:15] <dalek> rakudo/nom:

[08:15] <dalek> rakudo/nom: Name, Uppercase_Mapping, Titlecase_Mapping, Lowercase_Mapping

[08:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2a8ec405f0

[08:15] <dalek> rakudo/nom: 9ff5b7e | samcv++ | / (2 files):

[08:15] <dalek> rakudo/nom: uniprop: have 'Numeric_Value' return the numeric value

[08:15] <dalek> rakudo/nom:

[08:15] <dalek> rakudo/nom: as a number not a string. Call unival routine when

[08:15] <dalek> rakudo/nom: the 'Numeric_Value' is requested

[08:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9ff5b7eef9

[08:15] <dalek> rakudo/nom: 7b09bee | lizmat++ | / (2 files):

[08:15] <dalek> rakudo/nom: Merge pull request #953 from samcv/uniprop-na-lc-uc-tc

[08:15] <dalek> rakudo/nom:

[08:31] <dalek> roast: bc74e18 | lizmat++ | S15-unicode-information/uniprop.t:

[08:31] <dalek> roast: Unfudge now passing tests

[08:31] <dalek> roast: review: https://github.com/perl6/roast/commit/bc74e18d79

[08:31] <lizmat> afk&

[11:12] <dalek> nqp: 8c1c322 | (Pawel Murias)++ | src/vm/js/ (7 files):

[11:12] <dalek> nqp: [js] Repossess STables.

[11:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8c1c322995

[11:12] <dalek> nqp: ce84ef5 | (Pawel Murias)++ | src/vm/js/nqp-runtime/serialization.js:

[11:12] <dalek> nqp: [js] Fix stuff found by make js-lint.

[11:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ce84ef5614

[14:51] <dalek> rakudo/nom: 8eef234 | (Zoffix Znet)++ | src/core/Slip.pm:

[14:51] <dalek> rakudo/nom: Fix broken .perl for itemized Slip

[14:51] <dalek> rakudo/nom:

[14:51] <dalek> rakudo/nom: The output of Slip.perl is nothing more than `slip` prepended to

[14:51] <dalek> rakudo/nom: output of List.perl. This creates a problem where an itemized Slip's

[14:51] <dalek> rakudo/nom: .perl ends up being `slip$("a", "b")`, which fails to .EVAL

[14:51] <dalek> rakudo/nom:

[14:51] <dalek> rakudo/nom: Fix by checking whether output of List.perl is itemized and outputting

[14:51] <dalek> rakudo/nom: an itemized slip `$(slip("a", "b"))` in that case.

[14:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8eef234a5b

[14:55] <dalek> roast: 7eea834 | (Zoffix Znet)++ | S07-slip/slip.t:

[14:55] <dalek> roast: Test itemized Slips roundtrip .perl.EVAL

[14:55] <dalek> roast:

[14:55] <dalek> roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/8eef234a5b441a

[14:55] <dalek> roast: review: https://github.com/perl6/roast/commit/7eea834e98

[15:12] <lucasb> m: say slip().item.perl

[15:12] <camelia> rakudo-moar 8eef23: OUTPUT«$(slip())␤»

[15:12] <lucasb> Zoffix++ fixed

[15:13] <lucasb> RT #127224

[15:13] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127224

[15:13] <lucasb> ^^ can be closed

[15:43] * |Tux| notes RT#122892 RT#123597 RT#123980 RT#61602 RT#127358 are all still "red" in my test environment

[16:51] <dalek> rakudo/nom: a78d330 | jnthn++ | src/vm/moar/ops/container.c:

[16:51] <dalek> rakudo/nom: Missing MVMROOT in late-bound type check.

[16:51] <dalek> rakudo/nom:

[16:51] <dalek> rakudo/nom: Needed because of mutex acquisition, and thus possible GC trigger,

[16:51] <dalek> rakudo/nom: by lazy deserialization of HOW and method cache.

[16:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a78d3304db

[17:53] <lizmat> nine: t/invoke_p6_method_from_p5.t, test 3 fails for me atm, which block installing Inline::Perl5

[17:53] <lizmat> #          got: undef

[17:53] <lizmat> #     expected: 'pos1barbaz'

[17:56] <nine> lizmat: that's a MoarVM regression. Either upgrade or downgrade MoarVM please

[17:57] <lizmat> ah, will it be fixed before the release ?

[17:57] <lizmat> I can then wait  :-)

[18:00] <pyrimidine> nine: yep, that was the MoarVM I bisected a few days back

[18:00] <yoleaux2> 9 Dec 2016 12:31Z <nine> pyrimidine: Thanks a lot! Will dig from there.

[18:01] <nine> lizmat: I'm actually a little surprised that no one has bumped Moar since we reverted the offending commit

[18:01] <lizmat> well, maybe jnthn isn't comfortable with it yet ?

[18:01] <[Coke]> NeuralAnomaly: help

[18:01] <NeuralAnomaly> [Coke], stats | blockers

[18:02] <[Coke]> NeuralAnomaly: stats

[18:02] <NeuralAnomaly> [Coke], [✘] Next release will be in 2 days and 11 hours. Since last release, there are 50 new still-open tickets (5 unreviewed and 0 blockers) and 55 unreviewed commits. See http://perl6.fail/release/stats for details

[18:03] <dalek> nqp: d72b104 | coke++ | tools/build/MOAR_REVISION:

[18:03] <dalek> nqp: bump to get latest moar

[18:03] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d72b104ca2

[18:03] <pyrimidine> nine: maybe a bump is on the way? ^^

[18:04] <dalek> rakudo/nom: be2ed02 | coke++ | tools/build/NQP_REVISION:

[18:04] <dalek> rakudo/nom: bump to get latest nqp/moar

[18:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/be2ed02670

[18:04] <[Coke]> I mean, with a release coming anyway, want at least a few days to test it out.

[18:05] <nine> Coke++

[18:07] * lizmat pulls, configures, builds and tests

[18:13] <pyrimidine> nine: installing Inline::Perl5 from latest works for me, though I see a warning

[18:14] <pyrimidine> https://gist.github.com/cjfields/f0514bae771227c346e5ab5e61aaeee2

[18:16] <lizmat> nine: installed ok the 2nd time I tried

[18:17] <lizmat> # Failed test 'at least one destructor ran'

[18:17] <lizmat> # at t/p6_object_destructor.t line 1

[18:28] <dalek> nqp: c79ec74 | (Pawel Murias)++ | src/vm/js/nqp-runtime/deserialization.js:

[18:28] <dalek> nqp: [js] Refactor deserialization a bit by splitting up parts of into methods.

[18:28] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c79ec745ad

[18:28] <dalek> nqp: a33c51c | (Pawel Murias)++ | src/vm/js/ (6 files):

[18:28] <dalek> nqp: [js] Simple repossesion of objects on native attribute change works.

[18:28] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a33c51c8b4

[18:28] <dalek> nqp: f15aca6 | (Pawel Murias)++ | t/serialization/04-repossession.t:

[18:28] <dalek> nqp: Test for basic repossession.

[18:28] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f15aca61bb

[18:28] <dalek> nqp: 539166f | (Pawel Murias)++ | src/vm/js/nqp-runtime/repossession.js:

[18:28] <dalek> nqp: [js] Fix nqp::scwbdisable/nqp::scwbenable.

[18:28] <dalek> nqp: review: https://github.com/perl6/nqp/commit/539166f701

[18:28] <dalek> nqp: 235b980 | (Pawel Murias)++ | t/serialization/04-repossession.t:

[18:28] <dalek> nqp: [js] Test nqp::scwbenable/nqp::scwbdisable.

[18:29] <nine> lizmat: that's a flapper :/

[18:30] <lizmat> nine: yeah, I figured

[18:30] <nine> lizmat: sometimes MoarVM just doesn't want to collect garbage

[18:30] <lizmat> nine: not even with nqp::force_gc ?

[18:31] <lizmat> perhaps an "END nqp::force_gc" might help ?

[18:31] <samcv> [Coke], is it ok if i disable fuzzy search on the docs for now? on my computer it's making the search unusable half the time, not giving me any results or taking like 10 seconds sometimes, and using all my cpu

[18:31] <nine> lizmat: the test already does a force_gc

[18:32] <lizmat> nine: intriguing

[18:32] <samcv> it's really affecting my productivity wrt the docs

[18:33] <lizmat> nine: I don't see a force_gc in t/p6_object_destructor.t ?

[18:36] <nine> ooooooh.....good hint. That's what I get for naming those test files so similarily

[18:44] <dalek> rakudo/nom: 287af6a | (Zoffix Znet)++ | src/core/operators.pm:

[18:44] <dalek> rakudo/nom: Fix andthen → orelse chaining

[18:44] <dalek> rakudo/nom:

[18:44] <dalek> rakudo/nom: Fixes RT#130034 https://rt.perl.org/Ticket/Display.html?id=130034

[18:44] <dalek> rakudo/nom:

[18:44] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130034

[18:44] <dalek> rakudo/nom: Per TimToady[^1], `andthen` returning an Empty is by design, and the

[18:44] <dalek> rakudo/nom: behaviour  seen in the ticket is due to the RHS `orelse` thunk not being

[18:44] <dalek> rakudo/nom: executed but returned as is. Since `orelse` isn't defined as executing any

[18:44] <dalek> rakudo/nom: Callables on LHS, we need to somehow figure out when we get the Empty

[18:44] <dalek> rakudo/nom: (which vanishes in our parameters when we receive it). So I added a check

[18:44] <dalek> rakudo/nom: for whether we got just 1 arg (our RHS thunk) and then eval it if it's

[18:44] <dalek> rakudo/nom: a Callable. So the behaviour is that orelse with 1 arg evals its callables.

[18:44] <[Coke]> samcv: Ask phatbot, he's the one that merged it. :) Yes, it's fine if you revert those commits for now.

[18:44] <samcv> ok thanks :)

[18:45] <dalek> roast: 8d6a639 | (Zoffix Znet)++ | S03-operators/orelse.t:

[18:45] <dalek> roast: Test andthen chains with orelse

[18:45] <dalek> roast:

[18:45] <dalek> roast: RT#130034: https://rt.perl.org/Ticket/Display.html?id=130034

[18:45] <dalek> roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/287af6a37e00ad

[18:45] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130034

[18:45] <dalek> roast: review: https://github.com/perl6/roast/commit/8d6a6397e7

[18:53] <dalek> rakudo/nom: e327f30 | (Zoffix Znet)++ | t/05-messages/01-errors.t:

[18:53] <dalek> rakudo/nom: Add t/05-messages test directory

[18:53] <dalek> rakudo/nom:

[18:53] <dalek> rakudo/nom: I regularly come across some tickets where we need a test (to ensure

[18:53] <dalek> rakudo/nom: we fixed the problem), yet that test should not be part of the Perl 6

[18:53] <dalek> rakudo/nom: Specification because that would control definition of what exact

[18:53] <dalek> rakudo/nom: wording of a message should be, for example.

[18:53] <dalek> rakudo/nom:

[18:53] <dalek> rakudo/nom: So I started this directory in Rakudo's test suite for such tests.

[18:53] <dalek> rakudo/nom:

[18:53] <dalek> rakudo/nom: N.B.: I realize this isn't being run by make test yet, will fix soon.

[18:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e327f3049a

[18:58] <dalek> roast: 53091aa | (Zoffix Znet)++ | integration/error-reporting.t:

[18:58] <dalek> roast: Remove curly/smart quotes test

[18:58] <dalek> roast:

[18:58] <dalek> roast: This test was added 2 days ago as part of a fix for

[18:58] <dalek> roast: https://rt.perl.org/Ticket/Display.html?id=130260

[18:58] <dalek> roast:

[18:58] <dalek> roast: IMO Perl 6 language should not define such minute details as whether

[18:58] <dalek> roast: curly quotes are called curly in displayed user messages.

[18:58] <dalek> roast:

[18:58] <dalek> roast: Moving this test to Rakudo's t/05-messages/01-errors.t

[18:58] <dalek> roast: review: https://github.com/perl6/roast/commit/53091aa134

[18:58] <dalek> rakudo/nom: 3df4310 | (Zoffix Znet)++ | t/05-messages/01-errors.t:

[18:58] <dalek> rakudo/nom: Test we call curly quotes curly and not smart

[18:58] <dalek> rakudo/nom:

[18:58] <dalek> rakudo/nom: Moved from roast.

[18:58] <dalek> rakudo/nom:

[18:58] <dalek> rakudo/nom: Roast entry:

[18:58] <dalek> rakudo/nom: https://github.com/perl6/roast/commit/f30510e79c27bdf867b1bbd20415f8abdb1d78e8

[18:58] <dalek> rakudo/nom: Roast exit:

[18:58] <dalek> rakudo/nom: https://github.com/perl6/roast/commit/53091aa134cb8b0e9a97b1b0896a154155f57523

[18:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3df4310fa3

[19:33] <JimmyZ> jnthn: do we need to add misssing MVMROOT to moarvm where uses MVM_6model_find_method_cache_only too?

[19:34] * lizmat gives in to the flu again

[19:34] <lizmat> afk&

[20:16] <masak> lizmat: get well soon!

[20:38] <jnthn> JimmyZ: Yes, would be wise.

[20:52] <dalek> rakudo/nom: 7345e08 | (Zoffix Znet)++ | src/Perl6/ (2 files):

[20:52] <dalek> rakudo/nom: Fix heredoc trimming warnings referencing guts

[20:52] <dalek> rakudo/nom:

[20:52] <dalek> rakudo/nom: Fixes RT#129838: https://rt.perl.org/Ticket/Display.html?id=129838

[20:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7345e08c9b

[20:52] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129838

[20:52] <dalek> roast: 171d5c6 | (Zoffix Znet)++ | S02-literals/heredocs.t:

[20:52] <dalek> roast: Test heredoc trimming warnings don't reference guts

[20:52] <dalek> roast:

[20:52] <dalek> roast: RT#129838: https://rt.perl.org/Ticket/Display.html?id=129838

[20:52] <dalek> roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/7345e08c9b2fad

[20:52] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129838

[20:52] <dalek> roast: review: https://github.com/perl6/roast/commit/171d5c6fa9

[21:16] <jnthn> m: $*SCHEDULER.cue: :in(1), { say now }; sleep 3;

[21:16] <camelia> rakudo-moar 7345e0: OUTPUT«Instant:1481750209.871443␤»

[21:16] <jnthn> m: $*SCHEDULER.cue: :in(1), :times(1), { say now }; sleep 3;

[21:16] <camelia> rakudo-moar 7345e0: OUTPUT«Instant:1481750219.818066␤»

[21:16] <jnthn> m: $*SCHEDULER.cue: :in(1), :times(2), { say now }; sleep 3;

[21:16] <camelia> rakudo-moar 7345e0: OUTPUT«Instant:1481750228.830035␤Instant:1481750229.831004␤»

[21:17] <jnthn> .ask lizmat Is it accidental that `$*SCHEDULER.cue: :in(1), :times(2), { say now }` only applies the "in" to the first time? (It's actually setting the delay to 0 after scheduling the first one...)

[21:17] <yoleaux2> jnthn: I'll pass your message to lizmat.
