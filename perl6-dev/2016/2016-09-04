[04:14] <Zoffix> NeuralAnomaly, stats

[04:14] <NeuralAnomaly> Zoffix, [✔] Next release will be in 1 week and 6 days. Since last release, there are 32 new still-open tickets (1 unreviewed and 0 blockers) and 83 unreviewed commits. See http://perl6.fail/release/stats for details

[04:14] <Zoffix> \o/ (added commits tracker)

[06:10] <dalek> roast: 4fbf6c0 | usev6++ | S06-signature/definite-return.t:

[06:10] <dalek> roast: Skip test for RT #128964 for JVM

[06:10] <dalek> roast:

[06:10] <dalek> roast: also put test in block in order

[06:10] <dalek> roast: to use '#?DOES 1'

[06:10] <dalek> roast: review: https://github.com/perl6/roast/commit/4fbf6c08be

[06:10] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128964

[09:08] <[Tux]> This is Rakudo version 2016.08.1-83-gaceb4af built on MoarVM version 2016.08

[09:08] <[Tux]> csv-ip5xs       10.397

[09:08] <[Tux]> test            16.359

[09:08] <[Tux]> test-t           7.601

[09:08] <[Tux]> csv-parser      16.547

[10:21] <TheLemonMan> lizmat, got a minute to triage a bug ? :)

[10:21] <nine> Am I the only one who has a severe dislike for commit messages like "Fix RT #12345"?

[10:22] <TheLemonMan> seconded, except for commits to roast heh

[10:23] <ShimmerFairy> nine: I've not been bothered by it myself, but I definitely think it's a lacking message. I'd vastly prefer the kind of message that tacks on "This fixes RT#numbers" at the end :)

[10:25] <nine> Or maybe I should embrace them. As I'm one of the few people who seem to actually like RT and those messages will make any migration much more difficult.

[10:28] <lizmat> TheLemonMan: back

[10:28] <lizmat> nine: will be more verbose when fixing RT's in the future  :-)

[10:29] <TheLemonMan> m: say :{ a => 1 }.Map.keys

[10:29] <camelia> rakudo-moar aceb4a: OUTPUT«(Str|a)␤»

[10:30] <Zoffix> nine++ Those messages aren't very useful when going over the commit log to see, for example, if the item is in the changelog, so you have to go into the ticket to see. I was gonna say something but kept quiet, since now I have an app that tracks what commits I reviewed :P

[10:30] <TheLemonMan> lizmat, the typed hash -> Map conversion generates ugly keys (using WHICH ?)

[10:30] <nine> At least I can now point at Lee's git talk about why such messages are less than useful :)

[10:31] <lizmat> ah, I guess typed hashes are lacking a .Map coercer

[10:31] <lizmat> yup

[10:32] <lizmat> hmm... actually, there's a conceptual issue here

[10:32] <lizmat> we don't have typed Maps at the moment

[10:32] <lizmat> so either .Map will coerce the keys to .Str

[10:32] <lizmat> or we will have to think about supporting typed Maps

[10:32] <nine> lizmat: that does feel odd, doesn't it? But it's the same for List

[10:33] <lizmat> nine : no, because List doesn't need to do mapping to .WHICH to simulate object hashes

[10:33] <lizmat> I would prefer to not have to support object Maps until we have support for that type of thing in the VM's

[10:48] <TheLemonMan> talking of RT...right now it's down

[10:51] <Zoffix> If subject line is enough you can see it on http://perl6.fail/

[10:51] <Zoffix> (coming soon: individual tickets)

[10:55] <dalek> rakudo/nom: f57fc0c | lizmat++ | src/core/Hash.pm:

[10:55] <dalek> rakudo/nom: Add a .Map coercer for object hashes

[10:55] <dalek> rakudo/nom:

[10:55] <dalek> rakudo/nom: Not sure this is the utlimate right fix.  But at this point in time,

[10:55] <dalek> rakudo/nom: we do not have object Map's.  So we cannot coerce an object Hash to

[10:55] <dalek> rakudo/nom: an object Map, so we need to coerce to a normal Map.  And that means

[10:55] <dalek> rakudo/nom: that the objects will become stringified in the Map.

[10:55] <dalek> rakudo/nom:

[10:55] <dalek> rakudo/nom: This solution will mostly do the right thing.  On the other hand,

[10:55] <dalek> rakudo/nom: there doesn't seem to be a reason to do this (from a performance point

[10:55] <dalek> rakudo/nom: of view), because it will involve a lot of copying of data.

[10:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f57fc0c570

[10:59] <TheLemonMan> lizmat, does 'sub x(:$a) { say $a }; x(|:{a => 1})' work now ? :D

[11:00] <Woodi> .oO(requesting git feature - issues/bugs queue ?) ;)

[11:00] <lizmat> TheLemonMan: no

[11:00] <lizmat> but what has that to do with .Map ?

[11:01] <TheLemonMan> m: sub x(:$a) { say $a }; x(|:{a => 1})

[11:01] <camelia> rakudo-moar aceb4a: OUTPUT«Unexpected named parameter 'Str|a' passed␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:01] <TheLemonMan> same issue, I thought those two problems were related :\

[11:02] <lizmat> no, this is about the .Slip coercer it seems

[11:02] <lizmat> and *that* cannot be fixed that way

[11:03] <lizmat> this case feels like a DIHWIDT case

[11:04] <TheLemonMan> heh

[11:05] <nine> lizmat: my Proxy idea didn't work out at all in the end, btw.

[11:09] <lizmat> TheLemonMan: actually, it's not the Slip in that context

[11:10] <lizmat> we appropriated the prefix:<|> to be slip, but in that case it's actually about flattening a Capture I think

[11:11] <lizmat> (the original semantic of prefix |)

[11:14] <lizmat> afk for some sightseeing&

[11:14] <nine> Have fun :)

[11:26] <Zoffix> NeuralAnomaly, stats

[11:26] <NeuralAnomaly> Zoffix, [✔] Next release will be in 1 week and 6 days. Since last release, there are 32 new still-open tickets (0 unreviewed and 0 blockers) and 83 unreviewed commits. See http://perl6.fail/release/stats for details

[11:32] <Zoffix> How come slurpies cannot have defaults? From a language design perspective, are there any issues? ( thinking again about https://github.com/rakudo/rakudo/commit/560170f31ef22a2dbc7cb1fe44df464b2082626c )

[11:32] <Zoffix> m: sub (*@files = $*IN) { ... }()

[11:32] <camelia> rakudo-moar f57fc0: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Cannot put default on slurpy parameter @files␤at <tmp>:1␤------> sub (*@files = $*IN⏏) { ... }()␤    expecting any of:␤        constraint␤»

[11:44] <Zoffix> RT is back up

[11:55] <Zoffix> When adding new features, if you can, please open a ticket on https://github.com/perl6/doc/issues for it to be documented. Otherwise few people will know of your work.

[12:08] <nine> timotimo: I got rid of all the JSON reading, but cannot measure any difference in runtime of Gtk::Simple's tests :/

[12:29] <Zoffix> NeuralAnomaly, stats

[12:29] <NeuralAnomaly> Zoffix, [✘] Next release will be in 1 week and 6 days. Since last release, there are 32 new still-open tickets (0 unreviewed and 0 blockers) and 6 unreviewed commits. See http://perl6.fail/release/stats for details

[12:29] * Zoffix waits for RT to come back up to get the last 6

[12:30] <Zoffix> Hah, RT gods heard my wishes \o/

[12:37] <Zoffix> Well, I take back my reservations about not saying anything about non-descript commit messages. With RT down, I can't look up the ticket and have no idea what issues the commit fixes.

[12:38] <Zoffix> .ask MasterDuke if possible, would you include more descriptive messages in your commits so the gist of what the change introduces can be understood without requiring third party resources, like RT.

[12:38] <yoleaux2> Zoffix: I'll pass your message to MasterDuke.

[12:44] <dalek> rakudo/nom: f0df496 | (Zoffix Znet)++ | docs/ChangeLog:

[12:44] <dalek> rakudo/nom: Log all of the changes to date

[12:44] <dalek> rakudo/nom:

[12:44] <dalek> rakudo/nom: Include changes made by commits:

[12:44] <dalek> rakudo/nom: 933e9a 560170 9f5055 aaf7c3 2153bf 9a1616 a4cc1c 826d43 6ae6ec 7fa2ba aa1ec6

[12:44] <dalek> rakudo/nom: 87887d 1a03ef 4efdd9 ede7c6 5dba97 9bafd6 ec9e81 631e2f b48c62 e8d0d0 0a90a5

[12:44] <dalek> rakudo/nom: b50857 157b46 5a7951 575971 a45202 417d97 fbeadb

[12:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f0df496696

[12:45] <Zoffix> NeuralAnomaly, stats

[12:45] <NeuralAnomaly> Zoffix, [✔] Next release will be in 1 week and 6 days. Since last release, there are 32 new still-open tickets (0 unreviewed and 0 blockers) and 0 unreviewed commits. See http://perl6.fail/release/stats for details

[12:45] <Zoffix> ReleaseReady™

[12:45] <Zoffix> (•_•)

[12:45] <Zoffix> ( •_•)>⌐■-■

[12:45] <Zoffix> (⌐■_■)

[12:48] <nine> Finally! Initial run 90s -> 68s, following runs 20s -> 8s.

[12:48] <Zoffix> \o/

[12:49] <nine> And ~ 25 minutes to clean up the commits

[12:52] <MasterDuke> Zoffix: sure

[12:52] <yoleaux2> 12:38Z <Zoffix> MasterDuke: if possible, would you include more descriptive messages in your commits so the gist of what the change introduces can be understood without requiring third party resources, like RT.

[12:52] <Zoffix> MasterDuke++

[12:55] * Zoffix grabs mst

[12:56] <Zoffix> Am I doing it right? :)

[12:56] <Zoffix> (for those who don't listen to global notices:   -spb- [Global Notice] I'll be shutting services down in around ten minutes, for (hopefully) around ten minutes. If you'd like to grab ops in your channels just in case, now is the time to do it. Apologies for the inconvenience! )

[12:57] <nine> Even better: 62s and 7s respectively

[13:03] <TheLemonMan> nine, I  hope the call to 'can' is elided by the optimizer

[13:06] <nine> TheLemonMan: is this really just hope or an educated guess? Of course benchmarks would be even better

[13:08] <ShimmerFairy> How do people feel about nitpicky commits like whitespace cleanup? I ask because HLL::Grammar in NQP has a _lot_ of trailing whitespace, and if I had the commit access and it was OK to do so, I'd fix it up :P

[13:08] <TheLemonMan> nine, I don't quite know what the optimizer does at the moment so it's just a hope

[13:08] <TheLemonMan> if you can suggest a set of benchmarks I could try I can run them

[13:09] <nine> TheLemonMan: unfortunately when you just hope that rakudo's optimizer does something, most of the time it really doesn't :/

[13:10] <TheLemonMan> well you can still hope the spesh manages to do so :)

[13:12] <ShimmerFairy> nine: hm, now that you got me thinking about it, I realize that having the optimizer all crammed into a single Optimizer.nqp is probably a bad idea. I only looked at it once for some reason, and it felt like a lot of alien code to me.

[13:14] <nine> The static optimizer really could use some declarative way to specify what it should match.

[13:15] <ShimmerFairy> That makes sense and sounds nice. I think ideally there'd be a "subgroup" for the optimizer, e.g. src/opt/ or src/Perl6/Optimizer/ or something

[13:15] <dalek> rakudo/nom: 5fee7a1 | niner++ | src/core/CompUnit/PrecompilationStore/File.pm:

[13:15] <dalek> rakudo/nom: Cache CompUnit::PrecompilationUnits loaded from a store

[13:15] <dalek> rakudo/nom:

[13:15] <dalek> rakudo/nom: When a precompilation unit is accessed multiple times (because multiple

[13:15] <dalek> rakudo/nom: modules share a dependency) there's no need to read the file and

[13:18] <nine> I hate it when dalek doea that :/

[13:19] <nine> timotimo: can you pleas test if GTK::Simple loads faster now?

[13:19] <nine> timotimo: re-installing may help, too

[13:24] <timotimo> nine: i've removed my install/ and will check now

[13:24] <timotimo> though ... should i try a before-run, too?

[13:34] * arnsholt is going to push better-O as soon as the spectest comes back clean

[13:34] <arnsholt> Finally =)

[13:34] <timotimo> nine: running into some trouble now  ... currently gtk-simple requires cairo to run its tests (clearly a bug) but trying to install cairo makes moar crash :o

[13:34] <arnsholt> A rebased version of better-O, truth be told, but still

[13:35] <timotimo> ugh, moar crashed during the "Installing Cairo" step and then it thought Cairo was actually already installed

[13:37] <timotimo> nine: i wonder what the "Installing GTK::Simple" step is doing such that it takes so long ...

[13:42] <nine> precompiling a lot of modules

[13:44] <timotimo> fair enough

[13:44] <timotimo> just use GTK::Simple brings moar's memory usage up to 300 megs, wow.

[13:44] <timotimo> but 7.7 seconds isn't bad

[13:44] <timotimo> i don't remember how bad it was before

[13:46] <nine> was 20 seconds here before

[13:48] <timotimo> nice :)

[13:48] <timotimo> glad to see it get into the upcoming release, too

[13:49] <timotimo> i can't open the --profile-compile results in my browser >_>

[13:49] <timotimo> the second one is "only" 5.7 megs big

[13:51] <timotimo> ugh, heap snapshots are b0rked

[13:52] <dalek> nqp: 3105e6a | arnsholt++ | src/ (2 files):

[13:52] <dalek> nqp: Make HLL::Grammar.O take named arguments.

[13:52] <dalek> nqp:

[13:52] <dalek> nqp: This fixes the problem of the method manually parsing a string (#145). Since

[13:52] <dalek> nqp: the old parser code allowed a construct like '%additive, :op<add>' to copy

[13:58] <arnsholt> I'm not entirely sure why that keeps happening when I push, but it does ^_^

[14:00] <timotimo> hehe

[14:01] <arnsholt> Maybe my commit messages are too long =D

[14:02] <DrForr> Hrm, that may *actually* affect my grammar code. I'll have to check that out later...

[14:03] <timotimo> holy crap, loading stage2/NQPHLL.nqp crashes my vim :o

[14:05] <[Tux]> I am going to update my system from openSUSE 13.1 to 13.2 - I hope this will not influence the timings for perl6

[14:06] <timotimo> it could; new gcc and such? :\

[14:09] <TheLemonMan> [Tux], could you also record the timings with PR#864 applied ? :)

[14:10] <[Tux]> gcc will move from 4.8.1 to 4.8.3 I think. No major changes there

[14:10] <[Tux]> TheLemonMan, I time from blead. Has it been merged?

[14:11] <TheLemonMan> [Tux], not yet, nine was concerned about some potential slowdowns caused by the extra call

[14:11] <[Tux]> url?

[14:11] <TheLemonMan> [Tux], https://patch-diff.githubusercontent.com/raw/rakudo/rakudo/pull/864.patch

[14:11] <timotimo> arnsholt: it seems like your code broke the build ?!?

[14:12] <timotimo> Stage parse      : Too few positionals passed; expected 2 or 3 arguments but got 1

[14:12] <timotimo> at gen/moar/stage2/NQPHLL.nqp:615  (/home/timo/perl6/install/share/nqp/lib/NQPHLL.moarvm:O)

[14:12] <timotimo> oh

[14:12] <timotimo> wait

[14:12] <timotimo> i didn't get the latest nqp, actually

[14:12] <arnsholt> Oh, I broke it by not updating NQP_REVISION

[14:15] <arnsholt> timotimo: I can never remember the invocation to get the correct format for NQP_REVISION. You remember (or just want to do it)?

[14:15] <timotimo> git describe --tags > ../rakudo/tools/build/NQP_REVISION

[14:17] <TheLemonMan> talking of Actions.nqp...here (https://github.com/rakudo/rakudo/blob/3c98624c35657ca491f30ec509aea1102a735a36/src/Perl6/Actions.nqp#L5007-L5009) we lose the information about the definedness of the type (you can see this come into play in RT#129005)

[14:17] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129005

[14:18] <dalek> nqp: 6482f71 | timotimo++ | src/vm/moar/HLL/Backend.nqp:

[14:18] <dalek> nqp: literal_subst doesn't take regexes, oops :)

[14:18] <dalek> nqp:

[14:18] <dalek> nqp: fixes the heap snapshot profile

[14:18] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6482f71b02

[14:22] <dalek> rakudo/nom: 957b527 | arnsholt++ | tools/build/NQP_REVISION:

[14:22] <dalek> rakudo/nom: Bump NQP revision to require version with better-O logic.

[14:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/957b527303

[14:23] <arnsholt> timotimo++ # Remembering the rituals of git

[14:24] <arnsholt> Also a propos Actions.nqp, for some reason we generate backend-specific Actions.nqp files

[14:24] <arnsholt> But AFAICT there're no magical comments in the file that require generating backend-specific files

[14:25] <timotimo> ah, maybe there was some at some point

[14:28] <arnsholt> Yeah, I assume there was

[14:48] <Zoffix> I heard we don't need panda any more to install Inline::Perl5 for stresstest? What's the incantation to achieve that?

[14:51] <nine> Zoffix: perl6 configure.pl6 --install

[14:51] <Zoffix> :o

[14:51] <nine> Zoffix: or perl6 configure.pl6 && make && make test && make install

[14:56] <Zoffix> No idea how to do that. Either ./perl6-m doesn't find its stuff or configure.pl6 doesn't find its stuff, depending on which dir I attempt to run it from

[14:57] <Zoffix> panda it is \o/

[14:58] <travis-ci> Rakudo build failed. Arne Skjærholt 'Merge branch 'better-O' into nom'

[14:58] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/157449230 https://github.com/rakudo/rakudo/compare/601f4f08ec4d...45a3de3443d2

[14:59] <Zoffix> buggable, and?

[15:00] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually

[15:01] <Zoffix> 0.o buggable is using nearly 4GB of RAM. Looks like something is leaking (likely regexes)

[15:01] <arnsholt> Zoffix: I forgot to update NQP_REVISION

[15:04] <Zoffix> Yeah, it built fine locally.... stresstest: All tests successful. Files=1182, Tests=129093, 227 wallclock secs (21.64 usr  2.76 sys + 2395.70 cusr 166.58 csys = 2586.68 CPU)

[15:16] <timotimo> sadly we can't just implement "send a signal USR2 and moar will give you a heap dump"

[15:17] <timotimo> because we have to have a bit of code that turns the raw data into the files we're able to read

[15:17] <timotimo> not sure if we want that to go into every program

[15:17] <timotimo> also, i think installing a signal handler at startup would force every rakudo to get a second thread to handle eventloopy things

[15:28] <Zoffix> m: say [90] ^10

[15:28] <camelia> rakudo-moar 957b52: OUTPUT«one([90], 10)␤»

[15:28] <Zoffix> m: say [lulz] ^10

[15:28] <camelia> rakudo-moar 957b52: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    lulz used at line 1␤␤»

[15:28] <Zoffix> m: say [&say] ^10

[15:28] <camelia> rakudo-moar 957b52: OUTPUT«one([sub say (| is raw) { #`(Sub|62640464) ... }], 10)␤»

[15:28] <timotimo> hah

[15:29] <Zoffix> m: say [+] ^10

[15:29] <camelia> rakudo-moar 957b52: OUTPUT«45␤»

[15:44] <TheLemonMan> I wrote a small patch for the nqp optimizer so that '{add,sub} reg, 1' are turned into '{inc,dec} reg' but noticed just now that only moar has such opcodes :\

[15:46] <Zoffix> m: say $¢

[15:46] <camelia> rakudo-moar 957b52: OUTPUT«Nil␤»

[15:48] <timotimo> TheLemonMan: it's probable that the jit already does that optimization. if it doesn't it'd probably be cheaper ot put it in there

[15:49] <TheLemonMan> timotimo, it's ofc already done by the jit :)

[15:49] <timotimo> on the other hand, inc and dec can cause bugs with unsigned registers

[15:50] <TheLemonMan> there's no _u variant for most of the ops

[15:52] <timotimo> yup, we ought to generate truncation ops

[15:56] <TheLemonMan> m: multi sub x(int $x) { ... }; my int8 $y = 3; x($y); # talking of truncation ops.. is this supposed to succeed ?

[15:56] <camelia> rakudo-moar 957b52: OUTPUT«Stub code executed␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[16:01] <timotimo> i don't see a problem with it

[16:02] <TheLemonMan> I'm a bit surprised by the implicit truncation of the native int

[16:03] <timotimo> huh?

[16:03] <timotimo> that's the inverse of truncation, though?

[16:03] <Zoffix> m: multi sub x(int8 $x) { ... }; my int $y = 3; x($y);

[16:03] <camelia> rakudo-moar 957b52: OUTPUT«Stub code executed␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[16:04] <timotimo> AFK BBIAB

[16:05] <TheLemonMan> timotimo, int(64) -> int8 is a truncation, you're throwing away some bits

[16:05] <TheLemonMan> I expected the multi dispatch to fail due to a type mismatch

[16:07] <Zoffix> arnsholt, does your O work need to be logged in the ChangeLog or is it all entirely internal?

[16:08] <Zoffix> (in the Rakudo's changelog that is)

[16:15] <dalek> rakudo/nom: 7107976 | (Zoffix Znet)++ | docs/ChangeLog:

[16:15] <dalek> rakudo/nom: Log all changes to date

[16:15] <dalek> rakudo/nom:

[16:15] <dalek> rakudo/nom: Include changes made by commits f57fc0c 5fee7a1 595b04c 9421f25 418894e 601f4f0

[16:15] <dalek> rakudo/nom: Does not include any of the arnsholt++ O-branch work, as I'm unsure if

[16:15] <dalek> rakudo/nom: anything needs to be added.

[16:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7107976d5b

[16:15] <Zoffix> NeuralAnomaly, stats

[16:15] <NeuralAnomaly> Zoffix, [✔] Next release will be in 1 week and 5 days. Since last release, there are 32 new still-open tickets (0 unreviewed and 0 blockers) and 0 unreviewed commits. See http://perl6.fail/release/stats for details

[16:15] <Zoffix> \o/

[16:16] <Zoffix> I love that app :D

[16:16] <bartolin> Zoffix++ NeuralAnomaly++

[16:17] <arnsholt> Zoffix: It's mostly internal, being a change in an NQP API, rather than a Rakudo one

[16:18] <arnsholt> But if people have gotten sufficiently deep into hacking on the Rakudo grammar, they may be impacted

[16:18] * DrForr waves his pinky in the air :)

[16:18] <timotimo> arnsholt: have you made some measurements?

[16:18] <arnsholt> So I guess it merits mention

[16:19] <timotimo> like, do the .moarvm files get smaller? or the amount of ram used by moar at startup or during stage parse or something?

[16:19] <arnsholt> I didn't actually measure anything

[16:19] <timotimo> number of cpu cycles during ... dunno, parsing? where else would it have an impact?

[16:19] <Zoffix> arnsholt, would you mind adding it? I don't understand what it's all about :)

[16:19] <arnsholt> timotimo: I probably should have, come ot think of it

[16:20] <timotimo> *shrug*

[16:20] <arnsholt> jnthn speculated that it might help parse times somewhat, apparently the hashes cropping up where JITted code expected NQPMatch objects were a non-trivial cause of deopts

[16:20] <timotimo> i'm just askign because i'm curious

[16:21] <timotimo> our deopt logging leaves something to be desired, IMO

[16:21] <timotimo> we only get a total count per routine, but each routine can easily have ten to thirty different places where deopts could happen

[18:18] <lizmat> m: my %l = <<"Pig Latin" English>>.kv.reverse; dd %l   # finally found a use case for .vk as a fast .kv.reverse

[18:18] <camelia> rakudo-moar 710797: OUTPUT«Hash %l = {:English(1), "Pig Latin" => 0}␤»

[18:18] <AlexDaniel> :O .vk

[18:27] <TheLemonMan> RT#128655 appears to be fine now (or has been masked by another bug :)

[18:27] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128655

[18:32] <dalek> rakudo/nom: e8ff93c | (Zoffix Znet)++ | docs/release_guide.pod:

[18:32] <dalek> rakudo/nom: Fix pod format

[18:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e8ff93c56f

[18:33] <dalek> rakudo/nom: ea94132 | (Zoffix Znet)++ | docs/release_guide.pod:

[18:33] <dalek> rakudo/nom: Use full URL

[18:33] <dalek> rakudo/nom:

[18:33] <dalek> rakudo/nom: GitHub links to S.C.O otherwise.

[18:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ea94132d98

[18:38] <MasterDuke> has anybody else had problems when passing the output of one Proc to the input of another? i just created RT #129197

[18:38] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129197

[19:16] <TheLemonMan> MasterDuke, your change to infix:<x> (586f7847) causes #128035, the repetitions number is big enough to fill the sign bits of an int64, making it negative

[19:16] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128035

[19:19] <MasterDuke> ahh, should be islt_I?

[19:23] <TheLemonMan> yeah, just don't force nqp to coerce it to a native

[19:28] <dalek> rakudo/nom: f6c997b | arnsholt++ | docs/ChangeLog:

[19:28] <dalek> rakudo/nom: Describe better-O merge in ChangeLog.

[19:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f6c997b651

[19:31] <timotimo> arnsholt: i would drop the "rakudo now requires an nqp with" part, honestly; a release (which is where you'd read the changelog, usually) contains a new-enough version of nqp already

[19:32] <arnsholt> True dat, true dat

[19:32] <arnsholt> "now uses" perhaps?

[19:35] <timotimo> i'd maybe word it "the O() operator configuration mumble has been changed from the ground up to be more precompilation-friendly"

[19:39] <[Tux]> update complete, re-running timing …

[19:40] <TheLemonMan> oh ffs, RT is down again!

[19:43] <dalek> rakudo/nom: 29e2cab | arnsholt++ | docs/ChangeLog:

[19:43] <dalek> rakudo/nom: Reword ChangeLog entry on better-O merge.

[19:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/29e2cab0b8

[19:43] <timotimo> oh

[19:43] <timotimo> to be honest, i would have dropped the entire rest of that entry :S

[19:46] <MasterDuke> TheLemonMan: as it see it the real problem is that nqp::x only takes an int: nqp -e 'nqp::x("a", 9999999999999999999)' errors out with "repeat count (-8446744073709551616) cannot be negative"

[19:47] <arnsholt> timotimo: Or that. Feel free to edit =)

[19:47] <timotimo> nah, it's not that bad :)

[19:48] <arnsholt> I'm going to bed now. Parent-life turns out to be exhausting =)

[19:48] <timotimo> oh

[19:48] <timotimo> i didn't know you parented

[19:48] <timotimo> congratulations :)

[19:48] <timotimo> have a good rest

[19:48] <TheLemonMan> MasterDuke, yep, but the islt_i prevented it to blow up

[19:48] <arnsholt> Couple of months ago now

[19:48] <arnsholt> Thank you, and I will! =)

[19:48] <TheLemonMan> maybe you should just cap it to an arbitrary limit

[19:49] <MasterDuke> or re-write rakudo's x to not just blindly call nqp::x with its argument

[19:53] <MasterDuke> nqp: nqp::islt_I(9, 0)

[19:53] <camelia> nqp-moarvm: OUTPUT«This representation (P6int) cannot unbox to other types (for type BOOTInt)␤   at <tmp>:1  (<ephemeral file>:<mainline>)␤ from gen/moar/stage2/NQPHLL.nqp:1428  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:eval)␤ from gen/moar/stage2/NQPHLL.nqp:1…»

[19:59] <dalek> rakudo/nom: e39ab83 | (Zoffix Znet)++ | tools/create-release-announcement.pl:

[19:59] <dalek> rakudo/nom: Remove "this is only some changes" para from template

[19:59] <dalek> rakudo/nom:

[19:59] <dalek> rakudo/nom: At least for now... Our changelogs are short enough to be included in entirety,

[19:59] <dalek> rakudo/nom: and there are usually just a couple of items that are omited. Including

[19:59] <dalek> rakudo/nom: all the items also makes generation of release announcements entirely

[19:59] <dalek> rakudo/nom: automatic, without requiring human intervention or extra infrastructure to

[19:59] <dalek> rakudo/nom: filter out items of small-interest.

[19:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e39ab83ac8

[20:32] <[Tux]> This is Rakudo version 2016.08.1-100-gf6c997b built on MoarVM version 2016.08-35-g5108035

[20:32] <[Tux]> csv-ip5xs        9.725

[20:32] <[Tux]> test            15.214

[20:32] <[Tux]> test-t           7.488

[20:32] <[Tux]> csv-parser      17.794

[20:33] <travis-ci> Rakudo build errored. Zoffix Znet 'Use full URL

[20:33] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/157487091 https://github.com/rakudo/rakudo/compare/e8ff93c56f5c...ea94132d983a

[21:09] <MasterDuke> what's a good way to find the max value of an int (not Int)?

[21:12] <lizmat> m: int32.Range.max.say

[21:12] <camelia> rakudo-moar e39ab8: OUTPUT«2147483647␤»

[21:13] <lizmat> m: uint32.Range.max.say

[21:13] <camelia> rakudo-moar e39ab8: OUTPUT«4294967295␤»

[21:22] <[Coke]> rt down *again* ? fwiw seems fine for me now

[21:22] <[Coke]> I cannot remember the last time it was down

[21:22] <MasterDuke> lizmat: if you backlog about two hours, i'm trying to decide what to do about RT #128035

[21:22] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128035

[21:23] <MasterDuke> [Coke]: TheLemonMan mentioned it about 2 hours ago

[21:24] <MasterDuke> the docs don't mention any limitation on the arguments to x, just that they're coerced to Str and Int

[21:25] <MasterDuke> nor does S03

[21:25] <MasterDuke> cap the size of the argument to the same arbitrary limitation nqp::x has?

[21:26] <MasterDuke> or semi-manually do the repetition using nqp::x in a loop?

[21:26] * lizmat is looking

[21:28] <lizmat> MasterDuke: I suggest a hard check for 1073741824 is best

[21:30] <MasterDuke> that's pretty easy to do, but why limit to 2**30?

[21:31] <MasterDuke> well, i know we also have a max size on strings

[21:32] <lizmat> MasterDuke: I have no idea...

[21:32] <MasterDuke> which IMHO is too small

[21:32] <lizmat> but that's still pretty big

[21:32] <lizmat> there are days when I don't handle 1Gb big strings of identical characters

[21:33] <MasterDuke> but what about the days when you want to!

[21:33] <MasterDuke> it just seems like an out-of-character limitation for Perl 6

[21:34] <MasterDuke> we do automatic promotion to bigints

[21:34] <MasterDuke> Unicode terms, operators, etc.

[21:35] <lizmat> also: ("a" x 1073741824 / 4) x 4 is about 4x as fast as "a" x 1073741824

[21:35] <timotimo> why would the time it takes to do an x change at all with the number? don't we just create a rope that says "repeat the a that many times"?

[21:36] <lizmat> timotimo: I have no idea, I just observed..

[21:37] <MasterDuke> m: my $a = "a" x 1073741824; my $b = $a x 1073741824; say $b.chars

[21:37] <camelia> rakudo-moar e39ab8: OUTPUT«Memory allocation failed; could not allocate 4294967296 bytes␤»

[21:37] <MasterDuke> ugh. on my machine $b.chars is 0

[21:37] <MasterDuke> with no warning or anything

[21:39] <MasterDuke> but this is a bit of a rehash

[21:39] <MasterDuke> http://irclog.perlgeek.de/p6dev/2016-04-23#i_12381309

[21:43] * lizmat is still too tired to think clearly and gets an early night

[21:45] <MasterDuke> i'd forgotten about RT #127971, RT #127972, and RT #127973, three of the first tickets i filed

[21:45] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127971

[21:45] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127972

[21:45] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127973

[21:48] <timotimo> huh.

[21:51] <MasterDuke> bench: compare HEAD my $a = ("a" x 1073741824 / 4) x 4 ||| my $b = "a" x 1073741824

[21:51] <benchable6> MasterDuke, starting to benchmark the 1 given commits

[21:51] <benchable6> MasterDuke, https://gist.github.com/257943ecdb9ca857e80c8ce285fed8aa

[21:53] <MasterDuke> bench: releases my $b = "a" x 1073741824

[21:53] <benchable6> MasterDuke, starting to benchmark the 11 given commits

[21:53] <benchable6> MasterDuke, benchmarked the given commits, now zooming in on performance differences

[21:53] <benchable6> MasterDuke, https://gist.github.com/c6657c8b4d6c3cb716127d18d420fc5c

[21:58] <timotimo> wow, weird

[21:59] <timotimo> it takes negative time

[22:07] <MasterDuke> [Coke]: there are a couple people over in #perl6 having problems with their RT accounts
