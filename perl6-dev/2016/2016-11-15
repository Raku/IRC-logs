[07:35] <dalek> rakudo/lexical_module_load: 3b107d8 | niner++ | src/Perl6/World.nqp:

[07:35] <dalek> rakudo/lexical_module_load: Fixup "Make importing globals from loaded modules lexical"

[07:35] <dalek> rakudo/lexical_module_load:

[07:35] <dalek> rakudo/lexical_module_load: Remove commented code

[07:35] <dalek> rakudo/lexical_module_load: review: https://github.com/rakudo/rakudo/commit/3b107d8f80

[07:46] <dalek> rakudo/language_versions: dd83283 | niner++ | / (8 files):

[07:46] <dalek> rakudo/language_versions: First attempt at adding a CORE.d setting

[07:46] <dalek> rakudo/language_versions: review: https://github.com/rakudo/rakudo/commit/dd83283cb9

[07:46] <dalek> rakudo/language_versions: c38842c | niner++ | / (7 files):

[07:46] <dalek> rakudo/language_versions: Bring back IO::CatPath and IO::CatHandle in 6.d

[07:46] <dalek> rakudo/language_versions:

[07:46] <dalek> rakudo/language_versions: nine@sphinx:~> perl6 -e 'IO::ArgFiles.new;'

[07:47] <dalek> rakudo/language_versions: nine@sphinx:~> perl6 -e 'use v6.d; IO::ArgFiles.new;'

[07:47] <dalek> rakudo/language_versions: Could not find symbol '&ArgFiles'

[07:47] <dalek> rakudo/language_versions: review: https://github.com/rakudo/rakudo/commit/c38842c390

[07:47] <nine> Rebased language_versions on current nom for easier playing with it.

[09:22] <gfldex> `Proc::Async.new(|<find / -iname '*.txt' -print>);` trips over malformed utf8 filenames and the exception cant be caught. Is that a known problem?

[09:42] <dalek> rakudo/nom: cd765e6 | lizmat++ | src/core/Shaped1Array.pm:

[09:42] <dalek> rakudo/nom: Mark 1dimmed.reverse/rotate as nodal

[09:42] <dalek> rakudo/nom:

[09:42] <dalek> rakudo/nom: Because List.reverse/rotate also are

[09:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cd765e6afa

[09:42] <lizmat> afk&

[10:00] <dalek> nqp: 1b88060 | (Pawel Murias)++ | src/vm/js/Operations.nqp:

[10:00] <dalek> nqp: [js] Use :side-effects instead of the incorrectly spelled :sideffects

[10:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1b88060503

[10:09] <jnthn> gfldex: Are you using a fairly recent (last month or so) Rakudo? The uncatchable encoding exception thing was fixed not so long ago (along with making it possible to use :enc on Proc::Async)

[10:11] <jnthn> S17-procasync/encoding.t covers these, fwiw

[10:20] <gfldex> jnthn: build from today. I will investigate further.

[10:27] <gfldex> jnthn: may also be a general io-threading problem

[10:38] <gfldex> jnthn: it's not a heisenbug. Here is the example and the error message. I did expect at lease one of the CATCH blocks to catch. https://gist.github.com/gfldex/84af33884d323f16c83abc225e474cc9

[10:42] <jnthn> Oh

[10:42] <jnthn> No, none of those will

[10:42] <jnthn> The top-level one is not in the dynamic scope of whatever thread happens to handle the I/O

[10:43] <jnthn> And you never make it into the tap "we got a message" callback if there's an exception

[10:43] <jnthn> You can do something like: $find.stdout.tap(-> $line { print $line }, quit => { say .^name });

[10:45] <DrForr> For those of you not on FB/Twitter: I've been accepted to OSCON Austin 2017 and Open Source Days in Copenhagen.

[10:47] <nine> DrForr: \o/

[10:49] <DrForr> Dunno why it's plural days when it's just one day of conferences. Probably they're assuming more days of beer. Ne'er been to Copenhagen, can't wait to see.

[10:50] <jnthn> Copenhagen is nice. Has some really nice (though expensive) beer.

[10:51] <DrForr> Doubly looking forward to it.

[10:53] <gfldex> jnthn: that works, thanks

[10:53] <jnthn> The Mikkeller bar is worth checking out too fwiw

[10:53] <jnthn> s/too//

[10:53] <jnthn> Also, "one of the", they have two

[10:53] <jnthn> Or did...maybe there's more now :)

[10:54] <jnthn> gfldex: Also consider using supply/react blocks. You get a QUIT phaser for handling async exceptions.

[10:54] <jnthn> Not to mention subscription management.

[10:58] <DrForr> jnthn++ # suggestion added.

[11:25] <nine> Thinking about the language version vs. compiler version discussion: the wish for depending on compiler versions comes from this version being a proxy for "this feature or bugfix I need is implemented".

[11:25] <|Tux|> This is Rakudo version 2016.10-283-gcd765e6 built on MoarVM version 2016.10-44-g4c9fd00

[11:25] <|Tux|> csv-ip5xs        2.984

[11:25] <|Tux|> test            13.725

[11:25] <|Tux|> test-t           6.373

[11:25] <|Tux|> csv-parser      14.612

[11:26] <nine> That reminds me of autoconf. Not that I wish that particular hell upon us, but the principle to have configure time checks for features sounds entirely sane in a world of multiple different compilers and runtimes.

[11:30] <gfldex> jnthn: react works nicely, I do get the expection. However, there seams to be now way to avoid the malformed utf-8 problem. I get X::AdHoc+{X::Promise::Broken} on calling Buf.decode and I'm not able to handle the exception and thus continue with the next line from find. That makes Proc::Async pretty useless.

[11:33] <pmurias> nine: turning a compiler version requirement in a configure time check would require figuring out why exactly some old version doesn't work

[11:34] <nine> pmurias: which requires nailing down that it's actually really a compiler bug and not some coincidence that my bug is exposed on compiler version A but not B. That may actually be a good thing.

[11:36] <nine> Thinking further, we add new spec tests when we fix bugs in rakudo which would be handy for those configure time checks. But new spec tests mean we create a new version of the spec test suite which _makes it_ a new language version.

[11:37] <nine> As a module author you essentially want to say "I need a compiler that passes this version of the spec test suite" and right now we only have a single official version and lots of git hashes...

[11:38] <nine> Long story short, v6.c.1 seems to be long overdue.

[11:42] <jnthn> gfldex: Just use a different encoding

[11:43] <timotimo> utf8-c8, you mean?

[11:43] <timotimo> except it's still buggy :)

[11:43] <jnthn> That'd do it, yes

[11:43] <jnthn> Has corner cases, true

[11:45] <gfldex> now i'm getting `X::AdHoc Unknown system error 0`

[11:46] <timotimo> error 0? that doesn't sound like an error :\

[11:46] * jnthn has no idea what that is about

[11:48] <gfldex> https://gist.github.com/a4d6908a2f1072bdcb6e05f88b8f8f82

[11:49] <gfldex> happens every time but on different spots while dealing with stdout from find

[11:49] <gfldex> it's a reliable heisenbug :)

[11:50] <gfldex> is there a list of provided encodings? (that's ENODOC)

[11:51] <jnthn> Can reproduce it here too

[11:51] <jnthn> Please RT; can look at that tomorrow

[11:54] <gfldex> .backtrace is empty

[11:55] <jnthn> .backtrace.full maybe?

[11:55] <timotimo> async_spawn_stdout_bytes_read is calling async_read with an nread of a negative value that's not UV_EOF

[11:56] <timotimo> actually, nread is 0

[11:56] <timotimo> ah

[11:56] <timotimo> we're apparently treating "0 bytes read because we're waiting for some more data" as an error condition

[11:58] <gfldex> .backtrace.WHAT is Str and thus no .full

[11:59] <gfldex> is that intentional or did I found my 2nd bug today?

[13:07] <dalek> rakudo/nom: c5d33a2 | lizmat++ | src/core/Shaped (2 files):

[13:07] <dalek> rakudo/nom: .STORE should return self

[13:07] <dalek> rakudo/nom:

[13:07] <dalek> rakudo/nom: Unfortunately, this doesn't fix the problem of .rotate/.reverse on

[13:07] <dalek> rakudo/nom: 1dimmed shaped arrays

[13:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c5d33a2d4b

[13:18] <timotimo> not entirely sure whether the fix is to handle an nread of 0 in async_read or not to call async_read if nread is 0

[13:54] <dalek> roast: f1581ac | samcv++ | S02-literals/quoting.t:

[13:54] <dalek> roast: Add tests for Qw, Qx and Qww. One more test for qx to check how two backslashes are interpreted (#182)

[13:54] <dalek> roast:

[13:54] <dalek> roast: * Add tests for Qw, Qx and Qww. One more test for qx to check how two backslashes are interpreted

[13:54] <dalek> roast:

[13:54] <dalek> roast: * Compare that the result of Qx[echo '\'] and qx[echo '\\'] are equal so it works on Windows as well as POSIX shell

[13:54] <dalek> roast:

[13:54] <dalek> roast: * Compare \\ and \\\\ not \ and \\

[13:54] <dalek> roast:

[13:54] <dalek> roast: * Compare Qx[echo '\\\\'] and qx[echo '\\\\\\\\'] not \\ and \\\\

[13:54] <dalek> roast: review: https://github.com/perl6/roast/commit/f1581ac712

[14:30] <dalek> roast: 8b2316f | lizmat++ | S03-metaops/reverse.t:

[14:30] <dalek> roast: Fix typo in comment

[14:30] <dalek> roast: review: https://github.com/perl6/roast/commit/8b2316fe66

[16:08] <gfldex> jnthn: as requested: RT#130107

[16:08] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130107

[16:40] <[Coke]> RT #129909: "This breaks my heart, since I was planning on delivering a compiled binary to my clients"

[16:40] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129909

[16:41] <[Coke]> Do we have any nicely phrased text that suggests perhaps setting up a donation or something to TPF would help in this regard. (And would it help in this particular case?)

[16:47] <jnthn> gfldex: Will try and fix that up tomorrow

[16:48] <gfldex> "it was fixed within 24h" is always a good line in any blog post :)

[17:14] <mst> wonder how amenable rakudo would be to building something like schmorp's staticperl

[17:21] <jnthn> mst: Is that "all libraries/scripts, VM, runtime etc. bundled into a single static executable"?

[17:21] <jnthn> Or am I confusing it with another thing?

[17:33] <mst> jnthn: yes.

[18:11] <dalek> nqp: a900659 | FROGGS++ | tools/build/MOAR_REVISION:

[18:11] <dalek> nqp: bump moar for clock_gettime issue on macOS

[18:11] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a90065910b

[18:12] <dalek> rakudo/nom: ee8ae92 | FROGGS++ | tools/build/NQP_REVISION:

[18:12] <dalek> rakudo/nom: bump nqp/moar for clock_gettime issue on macOS

[18:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ee8ae92e42

[18:15] <FROGGS> o/

[18:28] <masak> http://software.schmorp.de/pkg/App-Staticperl.html -- innerestin'

[18:39] <FROGGS> masak: I used it in the past

[18:40] <masak> I didn't know about it; I picked it up from mst and jnthn's discussion above

[18:55] <FROGGS> masak: the linux binary here was built with staticperl: http://gamoscope.com/

[18:55] <FROGGS> binaries, even

[19:01] <masak> cool

[19:52] <dalek> roast: 2001b37 | usev6++ | S32-str/parse-base.t:

[19:52] <dalek> roast: Fudge failing tests with unicode literals for JVM

[19:52] <dalek> roast: review: https://github.com/perl6/roast/commit/2001b37e00

[20:04] <viki> :(

[20:04] <viki> j: say +"໖"

[20:04] <camelia> rakudo-jvm 76b061: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏໖' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[20:48] <dogbert17> is jnthn or perhaps timotimo around by any chance?

[20:48] <[Coke]> there's always .ask

[20:49] <dogbert17> never used that, will try

[20:49] <[Coke]> .ask dogbert17 see?

[20:49] <yoleaux2> [Coke]: I'll pass your message to dogbert17.

[20:49] <dogbert17> aha

[20:49] <yoleaux2> 20:49Z <[Coke]> dogbert17: see?

[20:50] <[Coke]> plus the channel's logged. usually safe to just throw it out there.

[20:50] <dogbert17> ok

[20:50] <timotimo> hi

[20:50] <timotimo> dogbert17: ?

[20:51] <dogbert17> this is an oldie but I would like to ask again, it concerns an example from the docs: https://gist.github.com/dogbert17/67228d08b8fe9a78c5fbb460ae5b78b9

[20:51] <[Coke]> GAH HE WAS HERE THE WHOLE TIME!

[20:51] <dogbert17> do you recognize this timotimo?

[20:51] <[Coke]> dogbert17: that seems to work here.

[20:52] <timotimo> what's wrong with it?

[20:52] <dogbert17> if I change the name of the program to something that does not exist, e.g. hexdump2 the program exists without any message at all, is that correct behaviour?

[20:52] <timotimo> oh, that thing

[20:52] <dogbert17> oldie :-)

[20:53] <[Coke]> if this is an oldie... is there an RT?

[20:53] <dogbert17> not from me anyway

[20:53] * dogbert17 hides

[20:54] <dogbert17> but is it a bug?

[20:54] <timotimo> it probably ought to break that start promise immediately

[20:54] <dogbert17> running in gdb gives SIGPIPE

[20:54] <timotimo> oh, it gets asploded

[20:54] <[Coke]> if there isn't a ticket, odds that it will get fixed go way down.

[20:54] <timotimo> i thought it just exits, not crashes

[20:55] <dogbert17> there is no visible asplode with perl6, perl6-gdb-m stops with SIGPIPE

[20:56] <[Coke]> (visible) check "echo $?"

[20:56] <timotimo> oh, maybe the shell doesn't show it as asploded because that's how things die when you pipe them through less or something and quit less before the program finished outputting stuff

[20:56] <[Coke]> after running the exploding .p6

[20:56] <[Coke]> I get "141"

[20:56] <geekosaur> there's a couple of RTs for that issue with missing commands

[20:57] <[Coke]> which is sigpipe, IIRC.

[20:57] <dogbert17> yes, I also get 141

[20:58] <dogbert17> it would have been nice if some error msg was printed as well

[20:59] <timotimo> we're not supposed to die with sigpipe at all

[20:59] <geekosaur> https://rt.perl.org/Public/Bug/Display.html?id=125651

[21:00] <[Coke]> not saying this should be required, but:

[21:00] <[Coke]> https://gist.github.com/coke/814af2f3c5378ef0cea45969944719b3

[21:00] <dogbert17> 'no such file or directory' sounds like a nice message

[21:01] <dogbert17> what does 'bindexpayload needs a VMException, got P6opaque (Scalar)' mean?

[21:02] <arnsholt> You need to add a decont, sounds like

[21:02] <dogbert17> that's from [Coke]'s gist

[21:04] <[Coke]> oh, for me that says:

[21:04] <[Coke]> BOOM

[21:04] <[Coke]> broken pipe in block <unit> at a.p6 line 9

[21:04] <[Coke]> This is Rakudo version 2016.10-17-g200364a

[21:05] <dogbert17> I get BOOM

[21:05] <dogbert17> bindexpayload needs a VMException, got P6opaque (Scalar)

[21:05] <dogbert17> in block <unit> at /home/dogbert/scratch.pl6 line 9

[21:05] <[Coke]> perl6 --version?

[21:05] <dogbert17> This is Rakudo version 2016.10-285-gee8ae92 built on MoarVM version 2016.10-55-g20c8591

[21:05] <[Coke]> m: https://gist.github.com/coke/814af2f3c5378ef0cea45969944719b3

[21:05] <camelia> rakudo-moar ee8ae9: OUTPUT«Proc::Async is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 7␤␤»

[21:05] <[Coke]> ah well.

[21:21] <dogbert17> BOOM

[21:21] <dogbert17> bindexpayload needs a VMException, got P6opaque (Scalar)

[21:21] <dogbert17> at gen/moar/m-CORE.setting:27011  (././CORE.setting.moarvm:rethrow)

[21:21] <dogbert17> from gen/moar/m-CORE.setting:38685  (././CORE.setting.moarvm:result)

[21:21] <dogbert17> from gen/moar/m-CORE.setting:40747  (././CORE.setting.moarvm:await)

[21:22] <dogbert17> FWIW
