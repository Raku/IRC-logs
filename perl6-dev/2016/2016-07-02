[03:39] <Zoffix> nqp-m: say(nqp::isnull(NQPMu.new))

[03:39] <camelia> nqp-moarvm: OUTPUT«0␤»

[03:39] <Zoffix> Getting closer with that bug! :)

[03:40] <Zoffix> Gonna eat a nice bug stew today :)

[04:04] <MasterDuke> m: my $e = 28; my str $a = "a" x 2**28; say now - INIT now

[04:04] <camelia> rakudo-moar ff8362: OUTPUT«Memory allocation failed; could not allocate 1073741824 bytes␤»

[04:04] <MasterDuke> m: my $e = 28; my str $a = "a" x 2**27; say now - INIT now

[04:04] <camelia> rakudo-moar ff8362: OUTPUT«Memory allocation failed; could not allocate 536870912 bytes␤»

[04:05] <MasterDuke> m: my $e = 28; my str $a = "a" x 2**25; say now - INIT now

[04:05] <camelia> rakudo-moar ff8362: OUTPUT«0.04169808␤»

[04:05] <MasterDuke> m: my $e = 25; my str $a = "a" x 2**$e; say now - INIT now

[04:05] <camelia> rakudo-moar ff8362: OUTPUT«0.00155113␤»

[04:06] <MasterDuke> a profile when using the variable has a whole lot of info in it

[04:07] <MasterDuke> but a profile when using the constant has three lines, with all the exclusive time spent in <unit> (-e:1)

[04:08] <MasterDuke> maybe i'm just tired, but it's not making any sense to me

[04:15] <geekosaur> hm, is any kind of constant folding implemented as yet?

[04:16] <geekosaur> (although if that's the problem, would seem LTA to not have at least the SORRY scaffold...)

[04:17] <geekosaur> ...and if it is constant folding, why would it make things slower

[08:01] <[Tux]> This is Rakudo version 2016.06-104-gff83625 built on MoarVM version 2016.06-9-g8fc21d5

[08:01] <[Tux]> test            16.091

[08:01] <[Tux]> test-t           9.404

[08:01] <[Tux]> csv-parser      16.657

[10:32] <FROGGS> o/

[10:39] <timotimo> MasterDuke: i expect the int is built at compile time there

[10:52] <dalek> rakudo/nom: 9180464 | lizmat++ | src/core/List.pm:

[10:52] <dalek> rakudo/nom: Speed up foo xx Int about 10%

[10:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9180464ced

[11:16] <dalek> rakudo/nom: f878186 | lizmat++ | src/core/Map.pm:

[11:16] <dalek> rakudo/nom: Streamline Map.Capture & Map.clone

[11:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f8781860e4

[11:16] <dalek> rakudo/nom: 855f4d4 | (Brad Gilbert)++ | src/core/IO/ArgFiles.pm:

[11:16] <dalek> rakudo/nom: Fix .slurp on an IO::ArgFiles that has already been read from

[11:16] <dalek> rakudo/nom:

[11:16] <dalek> rakudo/nom: It was calling $!io.readall but that method was renamed to .slurp-rest

[11:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/855f4d4e40

[11:16] <dalek> rakudo/nom: a2ff54c | (Brad Gilbert)++ | src/core/IO/ArgFiles.pm:

[11:18] <timotimo> oh, nice

[11:27] <masak> TimToady_: ooc, do you agree that tracing a grammar breaks LTA matching? https://github.com/jnthn/grammar-debugger/issues/13#issuecomment-229940842

[11:28] <jnthn> LTM? :P

[11:28] <timotimo> less than matching?

[11:28] <masak> er

[11:28] <jnthn> It's LTA though.

[11:28] <jnthn> :P

[11:28] <masak> LTM, naturally

[11:28] * masak 's brain is on vacation

[11:28] <jnthn> The solution, for whoever fancies implementing it, is probably to mix a role into the tracing closure that we hand back.

[11:28] <jnthn> Where said role has the methods like !NFA or whatever on it and forwards them to the underlying code-ref

[11:28] <jnthn> (That of the original rule)

[11:29] <jnthn> Since the reason for the problem is, afaict, that the closure we return instead of the method lacks the NFA

[11:30] <jnthn> OTOH, we could switch the NFA resolution to use lookup instead of find_method since it's after the original declarator

[11:30] <jnthn> Then Grammar::Tracer will just work and everyone won't have to re-solve the same problem if doing similar things.

[11:30] <jnthn> In fact that's probably the better way, and then Grammar::Tracer will Just Work again.

[11:30] <jnthn> So let's do it that way :)

[11:31] <jnthn> Then it'll freely fix other modules like Grammar::Debugger and Grammar::Profiler too I suspect.

[11:31] * masak adds this insight to the RT ticket

[11:31] <timotimo> but that's a github ticket

[11:32] <jnthn> plz can haz thunderstorm already?

[11:32] <jnthn> Sticky weather is sticky

[11:32] <masak> jnthn: um, where would the solution reside? in Rakudo, or in Grammar::Tracer?

[11:32] <timotimo> we have nice cold weather in germany today

[11:32] <timotimo> i think it'll reside in nqp

[11:32] <jnthn> masak: NQP

[11:36] <dalek> rakudo/nom: c318601 | (Daniel Green)++ | src/ (3 files):

[11:36] <dalek> rakudo/nom: Fix RT #128392

[11:36] <dalek> rakudo/nom:

[11:36] <dalek> rakudo/nom: Added $SIG_ELEM_CODE_SIGIL

[11:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c318601e11

[11:36] <dalek> rakudo/nom: 23daf3b | lizmat++ | src/ (3 files):

[11:36] <dalek> rakudo/nom: Merge pull request #791 from MasterDuke17/RT128392

[11:36] <dalek> rakudo/nom:

[11:36] <dalek> rakudo/nom: Fix RT #128392

[11:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/23daf3bb44

[11:37] <dalek> roast: 3fe0101 | (Daniel Green)++ | S06-signature/types.t:

[11:37] <dalek> roast: Test for RT #128392

[11:37] <dalek> roast:

[11:37] <dalek> roast: Requires a Rakudo built with PR #791 (https://github.com/rakudo/rakudo/pull/791)

[11:37] <dalek> roast: review: https://github.com/perl6/roast/commit/3fe010131a

[11:37] <dalek> roast: 04f2229 | lizmat++ | S06-signature/types.t:

[11:37] <dalek> roast: Merge pull request #130 from MasterDuke17/RT128392

[11:37] <dalek> roast:

[11:37] <dalek> roast: Test for RT #128392

[11:37] <dalek> roast: review: https://github.com/perl6/roast/commit/04f2229659

[11:37] <jnthn> lunch &

[11:51] <masak> ok, then it belongs in the (closed) RT ticket

[11:59] <masak> timotimo: it's a github ticket and an RT ticket, each linking to the other

[11:59] <timotimo> OK

[11:59] <masak> urh, stale backlog, sorry :)

[13:09] <MasterDuke> is anybody else here having problems with RT?

[13:10] <MasterDuke> i've emailed perlbug-admin three times over the past five weeks about my account, but it still isn't fixed (i can't see tickets when logged in)

[13:10] <timotimo> :[

[13:10] <MasterDuke> and now my emails to perl6-bugs-followup aren't showing up in tickets either

[13:11] <MasterDuke> maybe i got stuck in some spam filter recently?

[13:12] <MasterDuke> there are a couple RT tickets that could be closed, but i can't comment on them

[13:13] <MasterDuke> perhaps i should comment on the merged PRs asking for someone else to close/comment on the RT tickets?

[13:17] <timotimo> i think it'll likely be fine to just post the ticket numbers here for someone to pick up?

[13:17] <timotimo> oh, synopsebot6 is down again

[13:20] <MasterDuke> RT #128392

[13:20] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128392

[13:20] <MasterDuke> RT #125489

[13:20] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125489

[13:22] <MasterDuke> RT #128097

[13:22] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128097

[13:55] <Zoffix> Well, I give up. It's too hard :|

[14:10] <jdv79> what is it?

[14:12] <Zoffix> RT #128457

[14:12] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128457

[14:12] <Zoffix> I think I spent about 4 days on it :)

[14:13] <Zoffix> And this is all I found: https://rt.perl.org/Ticket/Display.html?id=128457#txn-1406988

[14:13] <Zoffix> It seems like the fix is around the corner. But ... ¯\_(ツ)_/¯

[14:14] <Zoffix> I don't know about lexpads and context, so it's a waste of my life trying to debug this further :)

[14:18] <jdv79> probably just another 4 days to fix it:)

[14:20] <jdv79> nice troubleshooting in any case.  similar to a utf8 bug i was looking at.  i got blocked by lack of domain knowledge.

[14:31] <AlexDaniel> MasterDuke: have you tried commenting by sending emails?

[14:33] <MasterDuke> AlexDaniel: yeah, i sent some emails to 125489 on June 17

[14:34] <AlexDaniel> … :-/

[14:34] <MasterDuke> it's worked before, but not recently

[14:47] <tbrowder> re RT: maybe it's time to revisit bugzilla...

[14:48] <AlexDaniel> #128520

[14:48] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128520

[14:48] <tbrowder> i find it hard to believe companies pay to use RT

[14:50] <Zoffix> Heh. And who's going to change all the references to RT in roast, commits, etc? :)

[14:50] <Zoffix> Or is that a proposal to basically use two bug trackers?

[14:50] <AlexDaniel> also, I really hate the fact that I cannot edit my tickets. I can never get it right from the first time…

[14:50] <AlexDaniel> Zoffix: the proposal is to stop using RT, because this hell must end some day

[14:51] <mst> could be worse. could be github.

[14:51] <Zoffix> There was a conversation about this already and I doubt this RFC will get any further.

[14:51] <AlexDaniel> Zoffix: whether it means that we will be using two bug trackers at the same or not is a different question, I think. But feel free to leave a comment

[14:52] <Zoffix> I think if the logs are grepped for me saying "why the hell" you'd find my comments :P

[14:52] <AlexDaniel> if it wont get any further then it is pretty sad.

[14:53] <tbrowder> i'm sure most know the definition of idiocy attributed to Einstein...

[14:53] * Zoffix doesn't

[14:54] <mst> tbrowder: companies pay for RT because it's extremely good at what it does; JIRA can come close but takes if anything even longer to configure

[14:54] <tbrowder> something like keep doing the same thing over and over again expecting different results

[14:54] <AlexDaniel> mst: well, at least people can login on github…

[14:54] <Zoffix> Ah. AlexDaniel found the previous conversation on the topic. It's around this line: http://irclog.perlgeek.de/perl6/2016-02-04#i_11989733

[14:55] <mst> AlexDaniel: you have a login problem with rt? did you talk to the admins?

[14:55] <AlexDaniel> mst: did you read the ticket?

[14:55] <tbrowder> if RT is so good at what it does why so many complaints?

[14:55] <AlexDaniel> mst: see this: well probably not, it's Mast

[14:55] <AlexDaniel> brr

[14:55] <AlexDaniel> http://irclog.perlgeek.de/perl6-dev/2016-07-02#i_12773781

[14:55] <AlexDaniel> pasted the wrong thing

[14:56] <mst> tbrowder: because everybody hats ticketing systems

[14:56] <mst> tbrowder: they're either completely feature free like github and we hate them because we can't keep the tickets organised

[14:57] <mst> tbrowder: or they're full of stuff like bugzilla but it often isn't the right stuff

[14:57] <AlexDaniel> mst: what features of RT help to keep the tickets organized?

[14:57] <mst> tbrowder: or they're configurable as hell like RT but then everybody's upset about the current configuration

[14:58] <Zoffix> AlexDaniel, tags?

[14:58] <nine> The only thing I miss in RT is some git integration

[14:58] <mst> the fixed in/broken in stuff is nice, having a status other than 'closed' is nice

[14:58] <AlexDaniel> Zoffix: have you seen anybody actually using tags? :)

[14:59] <mst> tags are what people don't ever use on github

[14:59] <Zoffix> AlexDaniel, yes, we have tests needed/bug tags for Rakudo

[14:59] <mst> I've seen all the features of rt.cpan.org used for organising things on sane CPAN dists

[14:59] <AlexDaniel> right. And other stuff is just part of the title

[14:59] <mst> nine: I could get you git integration easily ifg you used a real git server rather than github

[15:00] <mst> but I can't reach into the proprietary goo :(

[15:00] <Zoffix> If you use [BUG] in the title, the system adds bug tag for for you for free

[15:00] <AlexDaniel> anyway, you can use tags on Github so that's not an argument I guess. Not that I'm saying that we should use github, but if you say that RT helps to keep tickets organized because of tags… well… I don't know…

[15:00] <mst> that isn't what we said

[15:00] <mst> you're strawmanning everything people say because you've decided RT sucks and are uninterested in making things better

[15:00] <AlexDaniel> /o\

[15:00] <mst> only in the "this project sucks, we should rewrite it in a different language" type solution

[15:01] <mst> if, instead of concentrating on bitching about RT, you were to try and make a list of things you wish you had, I can figure out what RT can already do with you

[15:01] <mst> and it's entirely possible to customise things

[15:01] <nine> mst: at work we host our git repos on an internal server accessible over ssh. In fact it's the same server RT is running on. But I haven't found any git plugin or extension for RT?

[15:02] <mst> last time I had a missing feature on rt.cpan.org, I wrote the feature and the lovely volunteers who maintain it for us were happy to review and deploy it

[15:02] <mst> but I suppose bashing their work is more -Ofun if you're AlexDaniel

[15:02] <AlexDaniel> mst: what's the solution to CSRF thingy?

[15:03] <AlexDaniel> not that it causes many problems, but it is a bit annoying

[15:03] <tbrowder> i'll start a list of things that bug me or i would like to see on RT...

[15:03] <AlexDaniel> mst: or how can I edit a ticket?

[15:04] <MasterDuke> i think bashing is an overstatement. he's raised some concerns, which i share (i'll admit mostly because they directly effect me)

[15:04] <nine> AlexDaniel: you cannot edit a ticket and that's a good thing. When you add a comment or reply to a ticket, RT sends emails with your content. What should it do when you edit?

[15:05] <AlexDaniel> nine: should not do anything, as these are typically just changes to grammar or formatting fixes

[15:05] <AlexDaniel> or if I pasted some wrong output or something

[15:06] <mst> AlexDaniel: oh fucking hell github's ticket editing

[15:06] <mst> you realise there's no history there, so people can retroactively wipe out bug reports and comments

[15:06] <Zoffix> mst, what was the name of the dude who refused to deal with RT tickets?

[15:06] <mst> if only they'd heard of version control

[15:06] <Zoffix> And was ranting about it

[15:06] <mst> Zoffix: no idea, they all blur into one eventually ;)

[15:06] <Zoffix> heh

[15:06] <mst> along with the people who won't use github because github's ToS aren't properly open

[15:07] <Zoffix> MLEHMANN maybe

[15:07] <mst> and the people who give up on bugzilla because after half an hour they can't figure out how to do a standard search

[15:07] <AlexDaniel> yes, github is less than awesome

[15:07] <mst> and then JIRA, well, java, so you need four times as many servers and a full time workflow admin

[15:07] <mst> though admittedly RT kinda needs a half-time workflow admin

[15:16] <mst> nine: throwing something together with RT::CLient::REST would be pretty quick I thinkm, but, yeah, surprised there's not already

[15:17] <nine> mst: that reminds me of the idea to have an intern work on this :)

[15:22] <nine> Shouldn't $failure.defined defuse the Failure instead of making it explode?

[15:27] <psch> m: sub f { fail "foo" }; my $f = f; $f.defined; $f # it does?

[15:27] <camelia> rakudo-moar 23daf3: OUTPUT«WARNINGS for <tmp>:␤Useless use of $f in sink context (line 1)␤»

[15:27] <psch> m: sub f { fail "foo" }; my $f = f; $f # it does?

[15:27] <camelia> rakudo-moar 23daf3: OUTPUT«WARNINGS for <tmp>:␤Useless use of $f in sink context (line 1)␤»

[15:28] <psch> ah, sinking doesn't show that :|

[15:28] <psch> m: sub f { fail "foo" }; my $f = f; say $f

[15:28] <camelia> rakudo-moar 23daf3: OUTPUT«foo␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[15:28] <psch> m: sub f { fail "foo" }; my $f = f; $f.defined; say $f

[15:28] <camelia> rakudo-moar 23daf3: OUTPUT«(HANDLED) foo␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:28] <nine> Not in the setting it seems. Even assigning the Failure to a variable makes it explode

[15:28] <psch> oh

[15:28] <mst> AlexDaniel: also, if perlbug-admin didn't reply, please check with #rt or the perl NOC

[15:29] <AlexDaniel> MasterDuke: ↑

[15:29] <MasterDuke> is there a standard procedure for contributing when you have a Perl 6 commit bit?

[15:29] <mst> AlexDaniel: ... oh fuck.

[15:29] <nine> Or maybe it's because the failure is thrown by a Proxy's FETCH

[15:29] <MasterDuke> until now i have been submitting PRs which have been merged by someone else, since i couldn't commit anything directly

[15:29] <mst> MasterDuke: er, looking at http://irclog.perlgeek.de/perl6-dev/2016-07-02#i_12773781

[15:29] <psch> MasterDuke: if it's potentially controversial a branch (or, well, PR) plus RFC is a good idea

[15:29] <mst> you had a problem getting email through to RT

[15:29] <MasterDuke> AlexDaniel, mst: thanks, i'll give them a try

[15:30] <mst> and tried to get it solved by sending email to the same server

[15:30] <mst> I think I'm willing to take a guess why perlbug-admin didn't get back to you :(

[15:30] <psch> MasterDuke: if it's something that's pretty clearly just a bugfix or NYI you can probably just commit to nom, depending on scope i guess

[15:30] <mst> has anybody tried emailing them the details from a *different* email address?

[15:30] <MasterDuke> emailing used to work

[15:31] <mst> and?

[15:31] <MasterDuke> doesn't now

[15:31] <mst> yes, exactly my point.

[15:31] <mst> let me try this again

[15:31] <mst> if your problem is: my emails are no longer getting to perlbug-followup

[15:31] <mst> this means that the underlying cause may be: my emails are no longer getting through the mail server

[15:32] <mst> which means that if you try to report it by: sending an email to that mail server

[15:32] <mst> your report probably got eaten by whatever's eating your followup comments

[15:32] <mst> and that would explain why they're 'ignoring' you

[15:33] <MasterDuke> well, i believe my email to perlbug-admin was before my emails to perlbug-followup stopped working, but yes, i suspect a larger email problem (on whose end i have no idea)

[15:34] <MasterDuke> so i'll follow up at #rt

[15:34] <mst> that *may* work if the rt.cpan.org people are there

[15:34] <mst> but I think the mail servers are handled by the NOC

[15:34] <mst> err, rt.perl.org

[15:34] <mst> fuck

[15:34] <mst> I always typo that, too used to dealing with cpan stuff

[15:35] <mst> MasterDuke: if you don't get anywhere, ping me, I can probably chase the relevant people down out of band if I have to

[15:36] <mst> AlexDaniel: please do remember this isn't a black box and that there are people around who can escalate - especially those of us who straddle the perl5 community and therefore are in a bit closer touch with the people involved

[15:38] <AlexDaniel> mst: ok, I'll keep that in mind.

[15:53] <tbrowder> re editors: is anyone using neovim? if so, how do you like it for p6 and utf8 support?

[15:54] <Woodi> so, 2015.xmass we had 6.c spec and implementation. what we could expect on next xmass ? :)

[15:55] <jnthn> Woodi: Sleep. Relaxation. Food. Drink. :P

[15:56] <masak> I can sign up on that :)

[15:56] <Woodi> is it officially sheduled ? ;) probably is now...

[15:56] <masak> Woodi: what do you mean "official scheduled"?

[15:57] * masak .oO( I hereby officially schedule Christmas to fall somewhere near the end of December )

[15:57] <Woodi> masak: confirmation that other #perl6ixer don't get gifts this year ;)

[15:59] * Woodi actually didn't have expectations, just question without answet :)

[15:59] <Woodi> *ver

[16:00] <jnthn> Woodi: Will we time *another* language version release to coincide with a time when most people want to rest and do family stuff? No, or at least, now when I'm on the hook for some of it. :-)

[16:01] <jnthn> It was worth doing once because of the Christmas meme. :)

[16:02] * masak .oO( the unintended consequences of the Christmas meme intersecting with the realities of a release )

[16:04] * masak .oO( yeah, so, Perl 7 will be released on, um, Talk Like a Pirate Day )

[16:28] <TimToady_> and v6.28 will be releast on Tau Day

[16:28] <TimToady_> *released

[16:28] * masak .oO( to say the leased! )

[19:22] <dalek> rakudo/nom: ca67be5 | (Zoffix Znet)++ | docs/release_guide.pod:

[19:22] <dalek> rakudo/nom: List Zoffix Znet to do #101 release

[19:22] <dalek> rakudo/nom:

[19:22] <dalek> rakudo/nom: Assigned by [Coke] http://irclog.perlgeek.de/perl6/2016-07-01#i_12771625

[19:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ca67be52df

[19:22] <dalek> rakudo/nom: 02c7fed | lizmat++ | docs/release_guide.pod:

[19:22] <dalek> rakudo/nom: Merge pull request #807 from zoffixznet/patch-1

[19:22] <dalek> rakudo/nom:

[19:22] <dalek> rakudo/nom: List Zoffix Znet to do #101 release

[19:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/02c7fedeae

[19:31] <lizmat> Files=1109, Tests=52368, 246 wallclock secs (14.47 usr  4.21 sys + 1522.26 cusr 126.43 csys = 1667.37 CPU)

[19:31] <lizmat> ^^^ long time ago since I've seen CPU time below 1700 seconds

[19:32] <lizmat> :-)

[19:43] <dalek> rakudo/nom: d358ee6 | lizmat++ | src/core/Map.pm:

[19:43] <dalek> rakudo/nom: Make Map eqv Map about 3x faster

[19:43] <dalek> rakudo/nom:

[19:43] <dalek> rakudo/nom: For the worst case, with all keys/values being the same.

[19:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d358ee69d9

[20:00] <timotimo> cool!

[20:00] <timotimo> i don't eqv maps often, but damn. that's a fine improvement

[20:01] <lizmat> well, there's something weird there, though

[20:01] <lizmat> because Map are supposed to be immutable

[20:01] <lizmat> I'm not sure what Map.clone should do other than return self ?

[20:02] <lizmat> my benchmark being: my $m = Map.new(^1000); my $n = $m.clone; for ^1000 { my $d = $m eqv $n }

[20:03] <lizmat> will think about this some more

[20:06] <vendethiel-> lizmat: if it's immutable, then definitely return self

[20:16] <[Coke]> m: say CompUnitRepo;

[20:16] <camelia> rakudo-moar d358ee: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Undeclared name:␤    CompUnitRepo used at line 1␤␤»

[20:17] <psch> m: say CompUnit::Repository

[20:17] <camelia> rakudo-moar d358ee: OUTPUT«(Repository)␤»

[20:17] <[Coke]> docs has some references to some old stuff.

[20:22] <[Coke]> sub die_on_fail(int $fail=1) { - that shouldn't take an int.

[20:22] <[Coke]> (from Test)

[20:23] <[Coke]> we also apear to be missing "sub fail"

[20:23] <psch> m: say &fail

[20:23] <camelia> rakudo-moar d358ee: OUTPUT«sub fail (| is raw) { #`(Sub|55506600) ... }␤»

[20:23] <psch> in the docs i assume?

[20:26] <[Coke]> that fail is for Failures. Wondering about how to deliberate fail a test.

[20:27] <[Coke]> *deliberately

[20:27] <psch> ohh, right.  there was a contextual hint there in the backlog :|

[20:31] <[Coke]> ok False is close enough for now.

[20:33] <timotimo> that's not True

[20:35] <lizmat> m: use Test; flunk("dog at my homework")

[20:35] <camelia> rakudo-moar d358ee: OUTPUT«not ok 1 - dog at my homework␤␤# Failed test 'dog at my homework'␤# at <tmp> line 1␤»

[20:36] <lizmat> in other words: it's flunk in tests

[20:37] <dalek> rakudo/nom: 8f440ea | lizmat++ | src/core/ (2 files):

[20:37] <dalek> rakudo/nom: Cloning a Map is a noop, a Hash *should* clone

[20:37] <dalek> rakudo/nom:

[20:37] <dalek> rakudo/nom: Because a Map is immutable, and a Hash *is* mutable

[20:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8f440ea6d4

[20:37] <[Coke]> lizmat++

[20:38] <lizmat> .oO( I even flunked writing ate )

[20:46] <geekosaur> ...clearly you need to eat

[20:46] <geekosaur> :)

[22:33] <dalek> rakudo/nom: 4622c50 | lizmat++ | src/core/ (2 files):

[22:33] <dalek> rakudo/nom: Simplify Hash|Map.STORE_AT_KEY

[22:33] <dalek> rakudo/nom:

[22:33] <dalek> rakudo/nom: - no need to check for definedness of $!storage

[22:33] <dalek> rakudo/nom:   STORE_AT_KEY is only called from Hash.STORE, and that initializes $!storage

[22:33] <dalek> rakudo/nom: - remove unneeded native str for keeping .WHICH

[22:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4622c50421

[22:33] <lizmat> more work on Hash.STORE tomorrow

[22:33] <lizmat> first some sleep

[22:33] <timotimo> \o/

[22:33] <timotimo> sleep well!

[22:33] <lizmat> so good night, #perl6-dev

[23:10] <dalek> rakudo/nom: 3fda0b0 | coke++ | lib/Test.pm6:

[23:10] <dalek> rakudo/nom: Add a note to help devs find "fail"

[23:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3fda0b0188

[23:31] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Simplify Hash|Map.STORE_AT_KEY

[23:31] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/141916851 https://github.com/rakudo/rakudo/compare/8f440ea6d43c...4622c5042118

[23:44] <timotimo> seems spurious ^
