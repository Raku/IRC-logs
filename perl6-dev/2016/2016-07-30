[00:01] <Zoffix> .text of privmsg/notice events is mutable, but I've not explored how well it works or had any need to mutate anything yet

[00:01] <timotimo> right

[00:01] <Zoffix> There's .emit and .emit-custom in the design spec for emitting events, but I've not done anything yet there, due to lack of usecases.

[00:02] <timotimo> and things like "turn all bot messages into swedish chef english" would better be a filter

[00:02] <timotimo> would it be allowed to have the message passed into an "is rw" parameter?

[00:03] <timotimo> that article reads very well

[00:03] <timotimo> and the module seems good

[00:03] <timotimo> great job!

[01:25] <AlexDaniel> Zoffix: I have a question!

[01:26] <AlexDaniel> Zoffix: or a feature request, I'm not sure yet

[01:26] <AlexDaniel> Zoffix: looking at this: “It's not uncommon for a bot command to take some time to execute. In those cases, we don't want the bot to lock up while the command is doing its thing.”

[01:26] <AlexDaniel> Zoffix: OK, what if I want to write multiple messages?

[01:27] <AlexDaniel> Zoffix: Something like: “OK, doing what you asked me to do”… “Still working on it, hang on!”… “OK DONE!”

[01:29] <Zoffix> Use $.irc.send

[01:31] <AlexDaniel> Zoffix: right in irc-to-me?

[01:31] <Zoffix> method irc-privmsg-channel ($e) { start { sleep 2; $.irc.send: :where($e.channel) :text('OK, doing what you asked me to do'); sleep 2; $.irc.send: :where($e.channel) :text('Still working on it, hang on!'); sleep 3; $.irc.send: :where($e.channel) :text('OK DONE!'); Nil; } }

[01:32] <AlexDaniel> ah ok

[01:32] <Zoffix> Probably doing $e.reply: 'message....'; will work too

[01:32] <AlexDaniel> Zoffix: for some reason I was thinking that if I sleep for long periods of time in irc-privmsg-channel it will hang the bot

[01:32] <Zoffix> method irc-privmsg-channel ($e) { start { sleep 2; $e.reply: 'OK, doing what you asked me to do'; sleep 2; $e.reply: 'Still working on it, hang on!'; sleep 3; $.e.reply: 'OK DONE!';  } }

[01:33] <Zoffix> It won't hang 'cause it's inside the start {}

[01:33] <AlexDaniel> aaah

[01:33] <timotimo> it'd be kinda neat if a filter could also know what message/event triggered a reply, so that for channels with an [off] marker it could also include the [off] marker in every bit of output

[01:33] <timotimo> but that seems like it'd require a bit of cooperation from plugin authors to work

[01:33] <timotimo> which means it'd never work

[03:04] <Zoffix> Interesting.   Useless use of "not " in expression "not ($slurp_p and $slurp_n)" in sink context (line 7590)

[03:05] <Zoffix> At stage optimize

[03:06] <Zoffix> Oh, it's my $need_cap = $sig.count == Inf and not ($slurp_p and $slurp_n);. I think TimToady pointed that out a bit ago

[03:08] <Zoffix> m: use Test; throws-like { grep $_ == 1, 1,2,3 }, X::Match::Bool

[03:08] <camelia> rakudo-moar 22949d: OUTPUT«    1..2␤Use of uninitialized value of type Any in numeric context  in block  at <tmp> line 1␤    ok 1 - code dies␤    ok 2 - right exception type (X::Match::Bool)␤ok 1 - did we throws-like X::Match::Bool?␤»

[03:09] <dalek> roast: 896d43f | (Zoffix Znet)++ | S32-list/grep.t:

[03:09] <dalek> roast: .grep propagates .is-lazy

[03:09] <dalek> roast:

[03:09] <dalek> roast: RT#128773

[03:09] <dalek> roast: review: https://github.com/perl6/roast/commit/896d43f962

[03:09] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128773

[03:10] <MasterDuke> i noticed that today also. and additionally, my parse times have gone up a bit, from the high 50s to the high 60s-low 70s

[03:11] <Zoffix> Mine too. It hovered around 60 and now it's at 66

[03:23] <dalek> rakudo/nom: 32f341b | (Zoffix Znet)++ | src/core/Block.pm:

[03:23] <dalek> rakudo/nom: Fix conditional with incorrect precedence

[03:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/32f341b2f9

[03:27] <dalek> roast: 671baf4 | (Zoffix Znet)++ | S32-list/grep.t:

[03:27] <dalek> roast: Avoid spurious warnings in output

[03:27] <dalek> roast: review: https://github.com/perl6/roast/commit/671baf46db

[09:51] <dalek> rakudo/nom: 15ee3c3 | lizmat++ | src/core/Any-iterable-methods.pm:

[09:51] <dalek> rakudo/nom: Fix for RT #128779 and RT #126921

[09:51] <dalek> rakudo/nom:

[09:51] <dalek> rakudo/nom: Sorry it took so long to fix: this one definitely slipped through

[09:51] <dalek> rakudo/nom: the cracks  :-(

[09:51] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128779

[09:51] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126921

[09:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/15ee3c3b9d

[10:11] <lizmat> re slower compile times: I think I will have to concur, looking at my latest "cold" spectest result:

[10:11] <lizmat> Files=1112, Tests=52514, 238 wallclock secs (13.65 usr  4.10 sys + 1452.07 cusr 124.32 csys = 1594.14 CPU)

[10:12] <lizmat> there are 3 more files, and 76 more tests, but the previous low was 225 wallclock / 1535 CPU

[10:42] * Zoffix giggles at comments on https://www.reddit.com/r/programming/comments/4v9gt0/ircclient_perl_6_multiserver_irc_or_awesome_async/

[10:43] <Zoffix> People think :from<Perl5> uses a Perl 5 compiler in Rakudo :) nine++

[10:45] <Zoffix> "In theory it should be though, as you can define a grammar for Perl 5 and make a Perl 5 compiler in Perl 6 that would work like this."

[10:46] <tadzik> may be worth pointing them to FROGGS++'s v5

[10:57] <Zoffix> This is my evolution of parse times: https://gist.github.com/zoffixznet/b11127c8238af94f12756e051d4b1871

[10:58] <Zoffix> m: say "{(47.491 - 44.624)/47.491*100}% slower"

[10:58] <camelia> rakudo-moar 15ee3c: OUTPUT«6.036933% slower␤»

[10:58] <Zoffix> 44-45s being what I normally had in the past

[11:15] <nine> Zoffix: am I understanding this correctly? You run the Perl 5 code on a different thread?

[11:15] <Zoffix> nine, yeah, it runs in a start{} block

[11:16] <nine> And it works?

[11:16] <Zoffix> Seems to

[11:16] <nine> Awesome :)

[11:26] <jnthn> Zoffix++ # nice article :)

[11:26] <Zoffix> Thanks.

[11:39] <jnthn> Also nice use of async stuffs. :) Seeing people do neat stuff with them helps motivate me to spend the tedious hours hunting/fixing the instabilities in them. :)

[11:40] <lizmat> m: say 255/238; say 1594/1535   # concurring roughly with slowdown in parsing that Zoffix calculated

[11:40] <camelia> rakudo-moar 15ee3c: OUTPUT«1.071429␤1.038436␤»

[11:42] <lizmat> Zoffix: s/procrastenator/procrastinator/

[11:44] <Zoffix> Thanks. Fixed.

[11:46] <dalek> roast: 9697a3b | (Zoffix Znet)++ | S32-list/sort.t:

[11:46] <dalek> roast: sort stored in a sub returns a List

[11:46] <dalek> roast:

[11:46] <dalek> roast: RT#128779

[11:46] <dalek> roast: review: https://github.com/perl6/roast/commit/9697a3b345

[11:46] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128779

[11:46] <dalek> roast: 94d5bc9 | (Zoffix Znet)++ | S32-list/sort.t:

[11:46] <dalek> roast: detached .sort returns a List

[11:46] <dalek> roast:

[11:46] <dalek> roast: RT#126921

[11:46] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126921

[11:46] <dalek> roast: review: https://github.com/perl6/roast/commit/94d5bc99c3

[11:48] <lizmat> I wonder how much trouble it would be to make "sub a(/foo/) {}" be sugar for "sub a($ where /foo/)"

[11:48] <Zoffix> It sucks a bit that dalek cuts off output silently. Above, the very latest commit is missing entirely: https://github.com/perl6/roast/commit/9dd9695557f9459bb78726463028ab0821f9ddff

[11:49] <Zoffix> There's an RFC RT ticket for sub a(/foo/) work; same as sub a('foo') works

[11:49] <lizmat> ah, ok  :-)

[11:50] <Zoffix> This one https://rt.perl.org/Ticket/Display.html?id=128278

[11:51] <jnthn> I don't immediately see a syntactic ambiguity in doing it

[12:01] <Zoffix> Looks like spectest no longer hangs on my home VM \o/

[12:01] <jnthn> Zoffix: It was a hanging S17-supply test before? :)

[12:01] <Zoffix> Yeah

[12:01] <Zoffix> jnthn++ fixing things

[12:02] <jnthn> Yeah, that one I got. Actually there's still another problem that can cause such a hang but it's much less common to hit it.

[12:02] <jnthn> (Have to get really unlucky wiht the timing)

[12:02] <jnthn> Got a branch to fix that too, but it manages to bust .throttle

[12:08] * Zoffix looks at https://rt.perl.org/Ticket/Display.html?id=128770#ticket-history

[12:08] <Zoffix> "Note that we don't generally test sink warnings currently."  <-- is there a reason for it or can I go and add tests?

[12:09] <Zoffix> I see [Coke] reopened the ticket and added the testsneeded tag.

[13:28] <moritz> Zoffix: I don't think snik warnings are mandatory for a compiler

[13:28] <moritz> *sink

[13:29] <moritz> it's in the "let's see what we can do for you, but we won't promise anything" category

[13:29] <moritz> much like compile-time errors on signature mismatches are a nice-to-have feature

[13:30] <Zoffix> We still can test it, just not as part of roast.

[13:32] <psch> m: "foo"; CATCH { default { say "caught"; .perl.say } }

[13:32] <camelia> rakudo-moar 15ee3c: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant string "foo" in sink context (line 1)␤»

[13:32] <dalek> nqp: 4dbabe9 | (Pawel Murias)++ | src/vm/js/ (9 files):

[13:32] <dalek> nqp: [js] Rename $call to $$call for consistency.

[13:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4dbabe9a25

[13:32] <dalek> nqp: 659181a | (Pawel Murias)++ | src/vm/js/ (5 files):

[13:32] <dalek> nqp: [js] Rename $apply to $$apply for consistency.

[13:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/659181a6b2

[13:32] <psch> m: "foo"; CONTROL { default { say "caught"; .perl.say } }

[13:32] <camelia> rakudo-moar 15ee3c: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant string "foo" in sink context (line 1)␤»

[13:33] <psch> sink warnings completely bypass our CX everything?

[13:33] <moritz> yes, they are compile-time

[13:33] <psch> so output testing

[13:36] <mst> you can't SIGWARN 'em somehow?

[13:47] <Zoffix> .ask [Coke] I see you re-opened with testsneeded tag. Should we test sink warnings (see TimToady's comment on ticket)? Where should we test; in Rakudo's test suit? https://rt.perl.org/Ticket/Display.html?id=128770#ticket-history

[13:47] <yoleaux2> Zoffix: I'll pass your message to [Coke].

[13:53] <dalek> nqp: 166b381 | (Pawel Murias)++ | src/vm/js/nqp-runtime/reprs.js:

[13:53] <dalek> nqp: [js] Fix undeclared variable.

[13:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/166b381c9f

[14:12] <dalek> nqp: 4b27a15 | (Pawel Murias)++ | src/vm/js/nqp-runtime/reprs.js:

[14:12] <dalek> nqp: [js] Remove debugging leftover.

[14:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4b27a15707

[14:32] <Zoffix> .oO( bot idea: you give it a date, it gives you a list of Rakudo commits on for that day )

[14:35] <Zoffix> Oh, I guess that's what git log --since=yyyy-mm-dd --before=yyyy-mm-dd is for

[14:40] <Zoffix> committable, help

[14:40] <committable> Zoffix: Like this: committable: f583f22,HEAD say 'hello'; say 'world'

[14:40] <Zoffix> committable, 470be033192dd34cf7336e77ca46573f5cdadfb5 class SinkCanary { method sink { note "SUNK!" } }; my ($a) = SinkCanary.new;

[14:40] <committable> Zoffix: ¦«470be03»: SUNK!

[14:40] <Zoffix> committable, 470be033192dd34cf7336e77ca46573f5cdadfb5,HEAD class SinkCanary { method sink { note "SUNK!" } }; my ($a) = SinkCanary.new;

[14:40] <committable> Zoffix: ¦«470be03»: SUNK!␤|«HEAD»:

[14:41] <Zoffix> MasterDuke++ AlexDaniel++ # useful bots

[14:41] <Zoffix> committable, join #zofbot

[14:41] <committable> Zoffix: ¦«join»: Cannot find this revision

[14:42] <Zoffix> .ask AlexDaniel is is possible to make committable/bisectable join #zofbot? I don't wanna spam #perl6-dev

[14:42] <yoleaux2> Zoffix: I'll pass your message to AlexDaniel.

[14:43] <Zoffix> committable, 470be033192dd34cf7336e77ca46573f5cdadfb5 use Test; { my $is-sunk = False; my class SinkCanary { method sink { $is-sunk = True } }; my ($a) = SinkCanary.new; isnt $is-sunk, True, 'not sunk' }

[14:43] <committable> Zoffix: ¦«470be03»: not ok 1 - not sunk␤␤# Failed test 'not sunk'␤# at /tmp/KAb2CHYWM4 line 1␤# twice: 'True' «exit code = 1»

[14:44] <MasterDuke> Zoffix: they don't currently have any logic to join new channels, the channels are hardcoded at start time

[14:44] <MasterDuke> but i'll create an issue for that

[14:44] <Zoffix> MasterDuke++

[14:53] <Zoffix> committable, 470be033192dd34cf7336e77ca46573f5cdadfb5 use Test; { my $is-sunk = False; my ($a) = class { method sink { $is-sunk = True } }.new; isnt $is-sunk, True, 'not sunk' }

[14:53] <committable> Zoffix: ¦«470be03»: not ok 1 - not sunk␤␤# Failed test 'not sunk'␤# at /tmp/EAa9kf9HAN line 1␤# twice: 'True' «exit code = 1»

[14:55] <dalek> roast: 1b57b3d | (Zoffix Znet)++ | S04-statements/sink.t:

[14:55] <dalek> roast: my ($a) = ... does not trigger sinking

[14:55] <dalek> roast:

[14:55] <dalek> roast: RT#127491

[14:55] <dalek> roast: review: https://github.com/perl6/roast/commit/1b57b3de80

[14:55] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127491

[14:56] <MasterDuke> they are also in #perl6, so you could divide your spamming across each

[14:56] <Zoffix> :/

[14:58] <dalek> roast: 9a4af3b | (Zoffix Znet)++ | S04-statements/sink.t:

[14:58] <dalek> roast: Reword test to make it clearer what it tests

[14:58] <dalek> roast: review: https://github.com/perl6/roast/commit/9a4af3b1b1

[15:55] <b2gills> I think that the only kind of tests that could/should be in roast for sink warnings, are ones that test to make sure there aren't any warnings.

[15:57] <TimToady> well, otoh, pragmatically speaking, the sink warnings are a very important part of what allows us to use the fancy precedence table without confusing people more than we do

[16:02] <TimToady> whenever you use something either tighter or looser than you expected, values and pure functions tend to fall off, and we're just spotting those bits falling to the floor

[16:02] <TimToady> so from a usability point of view, it's very much a part of the language

[16:03] <TimToady> the danger is that we might produce a warning we'd have to retract later if circumstances made it impossible to detect

[16:05] <b2gills> Which would mean that tests for sink warnings would be better separated from roast, or a part of roast that is explicitly optional

[16:06] <TimToady> well, we have the concept of stress tests

[16:07] <TimToady> but in some sense these are low-stress, not high-stress

[16:08] <mst> clearly sink warnings belong there, given that precedence related confusion definitely induces stress

[16:15] <TimToady> so I guess I'm basically okay with just including sink warning presence/absence tests in roast itself, since the stakes are low enough that changes can be considered errata

[16:19] <TimToady> btw, the slowdown noted recently might be due to actually doing the want processing on some method bodies that were inadvertently omitted before, and that means a lot more annotations on the qast tree

[16:19] <TimToady> if so, we could probably get that performance back by baking common annotations into the nodes themselves rather than into attached hashes

[16:20] <TimToady> especially for things like :WANTED, which is just boolean, and could go in a bitmask

[17:10] <Zoffix> m: use use Foo::Bar

[17:10] <camelia> rakudo-moar 15ee3c: OUTPUT«===SORRY!===␤Could not find symbol '&Bar'␤»

[17:20] <TimToady> GIGO :)

[17:28] <Zoffix> :)

[17:34] <MasterDuke> is there some reason Proc::Async doen't have an exit code and signal?

[17:38] <TimToady> you mean, is there a *good* reason?

[17:41] <TimToady> the usual good reason is that it would require time travel to the future wait(), but there could be bad reasons too :)

[17:56] <Zoffix> MasterDuke, the .result of the Promise .start returns is a Proc object. It does have .exitcode and .signal

[19:29] <japhb> Zoffix++  # Excellent IRC::Client article

[20:35] <dalek> rakudo/nom: 1035edb | lizmat++ | src/core/Any-iterable-methods.pm:

[20:35] <dalek> rakudo/nom: Fix for RT #128780

[20:35] <dalek> rakudo/nom:

[20:35] <dalek> rakudo/nom: - also make .min/.max about 40% faster

[20:35] <dalek> rakudo/nom: - rewrite with nqp::ops and iterator

[20:35] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128780

[20:35] <dalek> rakudo/nom: - should be much more memory friendly as no longer copying data around

[20:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1035edbb65

[21:02] <Zoffix> m: say :2a cmp :3a

[21:02] <camelia> rakudo-moar 1035ed: OUTPUT«Less␤»

[21:02] <Zoffix> m: say :4a cmp :3a

[21:02] <camelia> rakudo-moar 1035ed: OUTPUT«More␤»

[21:02] <Zoffix> m: say { :3a, :4a }.max

[21:02] <camelia> rakudo-moar 1035ed: OUTPUT«a => 4␤»

[21:02] <Zoffix> m: say { :4a, :3a }.max

[21:02] <camelia> rakudo-moar 1035ed: OUTPUT«a => 3␤»

[21:02] <Zoffix> How does it sort pairs by default?

[21:02] <FROGGS_> in the last two example there is only one pair, no?

[21:03] <FROGGS_> m: say { :3a, :4a }

[21:03] <camelia> rakudo-moar 1035ed: OUTPUT«{a => 4}␤»

[21:03] <Zoffix> Oh. FROGGS_++

[21:03] <FROGGS_> m: say { :3b, :4a }.max

[21:03] <camelia> rakudo-moar 1035ed: OUTPUT«b => 3␤»

[21:04] <lizmat> m: say { :3b, :4a }.max(*.value)

[21:04] <camelia> rakudo-moar 1035ed: OUTPUT«a => 4␤»

[21:04] <lizmat> is probably what you meant ?

[21:05] <Zoffix> I was just wondering what it does when no argument is given to min/max

[21:07] <lizmat> it cmps the pairs

[21:07] <lizmat> m: say a => 3 cmp b => 4

[21:07] <camelia> rakudo-moar 1035ed: OUTPUT«Unexpected named parameter 'a' passed␤  in block <unit> at <tmp> line 1␤␤»

[21:07] <lizmat> m: say (a => 3) cmp (b => 4)

[21:07] <camelia> rakudo-moar 1035ed: OUTPUT«Less␤»

[21:08] <lizmat> m: say (a => 5) cmp (b => 4)

[21:08] <camelia> rakudo-moar 1035ed: OUTPUT«Less␤»

[21:08] <lizmat> infix:<cmp> for pairs is: (a.key cmp b.key) || (a.value cmp b.value)

[21:09] <Zoffix> lizmat++ thanks

[21:09] <Zoffix> m: say { :3b, :4a }.minmax

[21:09] <camelia> rakudo-moar 1035ed: OUTPUT«Index out of range. Is: 1, should be in 0..0␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in any  at gen/moar/m-Metamodel.nqp line 3055␤  in block <unit> at <tmp> line 1␤␤»

[21:10] <lizmat> Zoffix: that one I didn't fix yet

[21:11] <Zoffix> Hm. What would it return though?

[21:11] <Zoffix> m: say ((a => 5) ... (f => 6))

[21:11] <camelia> rakudo-moar 1035ed: OUTPUT«===SORRY!===␤Method 'succ' not found for invocant of class 'Pair'␤»

[21:11] <Zoffix> m: say ((a => 5) .. (f => 6))

[21:11] <camelia> rakudo-moar 1035ed: OUTPUT«:a(5)..:f(6)␤»

[21:11] <Zoffix> m: .say for ((a => 5) .. (f => 6))

[21:11] <camelia> rakudo-moar 1035ed: OUTPUT«Method 'succ' not found for invocant of class 'Pair'␤  in block <unit> at <tmp> line 1␤␤»

[21:12] <lizmat> ZoffixL: it would return a Range with a Pair at each endpoint

[21:16] <Zoffix> Range with Pair end points doesn't seem to be working.

[21:16] <Zoffix> m: say ((a => 5) .. (b => 6))[0]

[21:16] <camelia> rakudo-moar 1035ed: OUTPUT«Method 'succ' not found for invocant of class 'Pair'␤  in block <unit> at <tmp> line 1␤␤»

[21:17] <lizmat> Zoffix: yeah, I think it only makes sense to call .min and .max on it

[21:25] <dalek> roast: 9b9c39a | (Zoffix Znet)++ | S03-operators/minmax.t:

[21:25] <dalek> roast: min/max on Hashes

[21:25] <dalek> roast:

[21:25] <dalek> roast: RT#128780

[21:25] <dalek> roast: review: https://github.com/perl6/roast/commit/9b9c39ae08

[21:25] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128780

[21:34] <dalek> rakudo/nom: dd0fe7f | lizmat++ | / (2 files):

[21:34] <dalek> rakudo/nom: Add optimized min/max/minmax for native arrays

[21:34] <dalek> rakudo/nom:

[21:34] <dalek> rakudo/nom: - int/num/str arrays

[21:34] <dalek> rakudo/nom: - between 15x and 25x as fast as the non-native equivalent

[21:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dd0fe7f8f7

[21:34] <dalek> roast: 1952a14 | (Zoffix Znet)++ | S03-operators/minmax.t:

[21:34] <dalek> roast: Remove trailing whitespace

[21:34] <dalek> roast: review: https://github.com/perl6/roast/commit/1952a14f13

[21:39] <lizmat> timotimo: so was it a native array you did .min / .max on or not ?

[21:45] <timotimo> no

[21:48] <timotimo> wow, 15x and 25x

[21:48] <timotimo> that's really good

[22:03] <dalek> rakudo/nom: 373634e | lizmat++ | / (2 files):

[22:03] <dalek> rakudo/nom: Don't need cmp for natives

[22:03] <dalek> rakudo/nom:

[22:03] <dalek> rakudo/nom: And make the method multi's so that the min/max/minmax(&by) case isi

[22:03] <dalek> rakudo/nom: done by the candidates in Any

[22:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/373634e727

[22:04] <lizmat> will look at Any.minmax tomorrow

[22:04] <lizmat> good night, #perl6!

[22:05] <timotimo> yay

[22:38] <MasterDuke> Zoffix: i had tried a whole bunch of stuff, but missed that, thanks

[22:40] <MasterDuke> i'm getting more useful stuff with that, but i still can't get a .signal to work on anything

[23:08] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Don't need cmp for natives

[23:08] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/148589867 https://github.com/rakudo/rakudo/compare/dd0fe7f8f760...373634e72766
