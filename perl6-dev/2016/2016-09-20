[00:07] <Zoffix> buggable, tags

[00:07] <buggable> Zoffix, Total: 1363; [BUG]: 483; BUG: 457; UNTAGGED: 273; [LTA]: 115; [NYI]: 91; [JVM]: 64; [RFC]: 59; [CONC]: 53; [SEGV]: 38; [REGEX]: 35; [UNI]: 31; [PERF]: 27; [@LARRY]: 21; [IO]: 18; [POD]: 17; [NATIVECALL]: 15; [BUILD]: 11; [PRECOMP]: 11; TESTCOMMITTED: 10; [TODO]: 10; [OO]: 8; TODO: 7; [MATH]: 7; [STAR]: 6; [BOOTSTRAP]: 5; [GLR]: 5; [OSX]: 4; POD: 3; [REPL]: 3; [WEIRD]: 3; TESTNEEDED: 2; [DOCS]: 2; [REGRESSION]:

[00:10] <Zoffix> buggable, tags

[00:10] <buggable> Zoffix, Total: 1363; BUG: 939; UNTAGGED: 273; LTA: 115; NYI: 91; JVM: 64; RFC: 59; CONC: 53; SEGV: 38; REGEX: 36; UNI: 31; PERF: 27; @LARRY: 21; IO: 18; POD: 17; TODO: 17; NATIVECALL: 15; BUILD: 11; PRECOMP: 11; TESTCOMMITTED: 10; OO: 8; MATH: 7; STAR: 6; BOOTSTRAP: 5; GLR: 5; OSX: 4; DOCS: 3; REPL: 3; WEIRD: 3; REGRESSION: 2; TESTNEEDED: 2; CONFIGURE: 1; LIBRARY: 1; OPTIMIZER: 1; RT: 1; SITE: 1; SPEC: 1; SPESH:

[00:10] <Zoffix> Fixed… I think

[00:12] <Zoffix> m: dd 42.nl-out

[00:12] <camelia> rakudo-moar 8be36b: OUTPUT«"\n"␤»

[00:12] <Zoffix> Interesingmethod :P

[00:12] <Zoffix> m: 42.print-nl

[00:12] <camelia> rakudo-moar 8be36b: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[00:13] <Zoffix> huh

[00:13] <Zoffix> s: 42, 'print-nl', \()

[00:13] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/8be36b1/src/core/Any.pm#L401

[00:13] <Zoffix> m: 42.print(self.nl-out)

[00:13] <camelia> rakudo-moar 8be36b: OUTPUT«===SORRY!=== Error while compiling <tmp>␤'self' used where no object is available␤at <tmp>:1␤------> 42.print(⏏self.nl-out)␤    expecting any of:␤        argument list␤        term␤»

[00:13] <Zoffix> m: 42.print(42.nl-out)

[00:13] <camelia> rakudo-moar 8be36b: OUTPUT«Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[00:13] <Zoffix> Just a dead method :/

[00:14] <Zoffix> committable6, 2015.07 42.print-nl

[00:14] <committable6> Zoffix, ¦«2015.07»: Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at /tmp/ZGih_ikYdH:1␤ «exit code = 1»

[00:20] <Zoffix> .ask TimToady would you remember what this commit was meant to be for? method form .print doesn't take any args so this method never worked: https://github.com/rakudo/rakudo/commit/2cb72b2141f2e37c0df4fb04fc2f5b68e34cdf01

[00:20] <yoleaux2> Zoffix: I'll pass your message to TimToady.

[00:21] <Zoffix> (FWIW the .nl-out is there for say() concatenation)

[00:52] <dalek> roast: 99d4556 | (Zoffix Znet)++ | S29-any/deg-trans.t:

[00:52] <dalek> roast: [coverage] Covers all uncovered subs in Any.pm

[00:52] <dalek> roast: review: https://github.com/perl6/roast/commit/99d45565bc

[01:03] <TimToady> Zoffix: that's presumably there so other types can pretend to be an IO::Handle; you'll note that IO::Handle's .print does take more arguments

[01:03] <yoleaux2> 00:20Z <Zoffix> TimToady: would you remember what this commit was meant to be for? method form .print doesn't take any args so this method never worked: https://github.com/rakudo/rakudo/commit/2cb72b2141f2e37c0df4fb04fc2f5b68e34cdf01

[01:04] <TimToady> but I have no recollection, so merely deduce that from how it would work :)

[01:05] <Zoffix> m: sub print-nl (\SELF) { print SELF, "\n" }(42)

[01:05] <camelia> rakudo-moar 8be36b: OUTPUT«42␤»

[01:05] <Zoffix> I'll change it to that, so at least it works

[01:06] <TimToady> well, maybe add a nl-out method defaulting to "\n"

[01:06] <dalek> roast: 2ef68fe | (Zoffix Znet)++ | S (3 files):

[01:06] <dalek> roast: Remove trailing whitespace

[01:06] <dalek> roast: review: https://github.com/perl6/roast/commit/2ef68feea4

[01:06] <Zoffix> Oh yeah, I meant self.nl-out instead of "\n"

[01:06] <Zoffix> (it's already there)

[01:09] <dalek> roast: 8627ef3 | (Zoffix Znet)++ | S (5 files):

[01:09] <dalek> roast: Spread out tests added in 99d45565bc to more appropriate files

[01:09] <dalek> roast:

[01:09] <dalek> roast: Where possible.

[01:09] <dalek> roast: review: https://github.com/perl6/roast/commit/8627ef3592

[01:10] <TimToady> well, we should probably have a Handley role or some such eventually

[01:32] <Zoffix> hmmm

[01:32] <Zoffix> s: IO::Handle, 'print'

[01:32] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/8be36b1/src/core/IO/Handle.pm#L660

[01:33] <Zoffix> s: Any, 'print'

[01:33] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/8be36b1/src/core/Mu.pm#L461

[01:34] <Zoffix> m: class { method print (*@a) { say "`@a[]`" } }.print-nl

[01:34] <camelia> rakudo-moar 8be36b: OUTPUT«`␤`␤»

[01:35] <Zoffix> I'll just leave it as is for now. Because my fix would break the above. As you've said we need something better or something

[01:43] <dalek> roast: 19c5ef1 | (Zoffix Znet)++ | S29-any/deg-trans.t:

[01:46] <dalek> roast: [coverage] Add tests for Any.[nl-out|print-nl]

[01:46] <dalek> roast: review: https://github.com/perl6/roast/commit/19c5ef1d0b

[01:55] <MasteDuke> s: Any, 'uniprop'

[01:55] <SourceBaby> MasteDuke, Something's wrong: ␤ERR: Type check failed in binding to &code; expected Callable but got Nil (Nil)␤  in sub do-sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 42␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 33␤  in block <unit> at -e line 6␤␤

[01:55] <Zoffix> s: &uniprop

[01:55] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/8be36b1/src/core/Str.pm#L2373

[01:56] <MasteDuke> thanks

[02:06] <MasteDuke> Zoffix: were you Ivanushka on #perl6 earlier today?

[05:57] <[Tux]> This is Rakudo version 2016.09-19-g8be36b1 built on MoarVM version 2016.09

[05:57] <[Tux]> csv-ip5xs        9.255

[05:57] <[Tux]> test            16.942

[05:57] <[Tux]> test-t           7.330

[05:57] <[Tux]> csv-parser      18.294

[07:09] <dalek> nqp: 9251b1c | brrt++ | t/moar/50-jit-register-alloc.t:

[07:09] <dalek> nqp: Enable register allocator test by default

[07:09] <dalek> nqp:

[07:09] <dalek> nqp: This is pointless on the regular MoarVM branch, but serves

[07:09] <dalek> nqp: as a canary for the even-moar-jit branch.

[07:09] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9251b1cf37

[07:13] <travis-ci> NQP build failed. Bart Wiegmans 'Enable register allocator test by default

[07:13] <travis-ci> https://travis-ci.org/perl6/nqp/builds/161248509 https://github.com/perl6/nqp/compare/a984cfc193a3...9251b1cf3756

[08:31] <dalek> nqp: 2830058 | timotimo++ | t/moar/50-jit-register-alloc.t:

[08:31] <dalek> nqp: fix TAP output of the register alloc test

[08:31] <dalek> nqp: review: https://github.com/perl6/nqp/commit/28300582a5

[08:35] <nine> .botsnack

[08:35] <synopsebot6> om nom nom

[08:35] <yoleaux2> 01:46Z <Zoffix> nine: do you think this might be a precomp bug? If I run that test file with `prove` I never have any issues. If *after running with prove* I run it with `make`, it fails the first time, but following times works fine. And this happens only if I have `use Test::Util`; in there: https://gist.github.com/zoffixznet/1a7534dd273d45073570ebc62b31542e

[08:35] <yoleaux2> :D

[08:36] <nine> Zoffix: is this reproducible? It looks like the one off failure I had after my last work on module loading.

[08:38] <travis-ci> NQP build passed. Timo Paulssen 'fix TAP output of the register alloc test'

[08:38] <travis-ci> https://travis-ci.org/perl6/nqp/builds/161262509 https://github.com/perl6/nqp/compare/9251b1cf3756...28300582a5be

[08:40] <dalek> nqp: d33a7e9 | brrt++ | t/moar/50-jit-register-alloc.t:

[08:40] <dalek> nqp: Register allocator test is more fragile than it may seem

[08:40] <dalek> nqp:

[08:40] <dalek> nqp: Taking arguments (currently) disables the expr jit, which

[08:40] <dalek> nqp: means the test doesn't work as a expr jit canary anymore. This

[08:40] <dalek> nqp: moves the incrementing OK to the outer loop.

[08:40] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d33a7e9839

[10:05] <Zoffix> nine, yeah, I can reproduce it each time, every time. The first `make t/spec/foo.t` after using `prove -e './perl6' -vlr t/spec/foo.t` always dies

[10:09] <Zoffix> Managed to get it to produce debug output: "P6M Merging GLOBAL symbols failed: duplicate definition of symbol Test"

[10:11] <Zoffix> nine, here's (1) successful run with `prove`; (2) the first run with t/harness5 that fails; (3) the second run with t/harness5 that succeeds: https://gist.github.com/zoffixznet/32e0889610a0488e078797c059140354

[10:13] <Zoffix> MasterDuke, I am many things

[10:25] <nine> Zoffix: that's exactly the message I've seen exactly once

[10:31] <nine> Zoffix: the difference is the PERL6LIB the harness sets. I can also reproduce it by alternating between prove -e './perl6' and prove -e './perl6 -Ilib'

[10:31] <nine> Which also explains, why I haven't seen it since the first time. My prove6 alias is prove -e 'perl6 -Ilib'

[10:31] <nine> So it does the same as the spectest harness

[10:53] <nine> Zoffix: oooh... I think, I know what happens

[10:53] <Zoffix> \o/

[10:55] <nine> We detect a change in the repo chain since we precompiled a module, so we re-resolve the dependency specification. This causes it to print the dependency to STDOUT, as we are currently precompiling. But this refers to the source file, not the precomp file.

[11:59] <nine> Do we have the rakudo logo in a higher resolution or as vector graphic?

[12:11] <moritz> nine: I can check my old PC at home, I think I have something

[12:11] <moritz> tonight

[12:11] <moritz> feel free to remind me if I forget

[12:18] <nine> moritz: ok :)

[12:42] <lizmat> isn't the logo an svg originally?

[12:58] <nine> Considering it's really a bunch of characters, I'd be highly surprised if it didn't originate as vector graphic

[14:56] <dalek> Heuristic branch merge: pushed 20 commits to nqp by pmurias

[14:59] <dalek> nqp: 73eefb7 | (Pawel Murias)++ | t/moar/02-qast-references.t:

[14:59] <dalek> nqp: Test attributref and lexicalref QAST::Var scopes.

[14:59] <dalek> nqp: review: https://github.com/perl6/nqp/commit/73eefb7bad

[15:03] <dalek> nqp: 09422b8 | (Pawel Murias)++ | src/vm/js/ (3 files):

[15:03] <dalek> nqp: [js] Make an missing attribute exception catchable as Rakudo depends on it.

[15:03] <dalek> nqp: review: https://github.com/perl6/nqp/commit/09422b8a53

[15:25] <TestNinja_> Cannot find method 'has_compile_time_value' on object of type NQPMu :/

[15:27] <timotimo> oh, that's bad

[15:27] <TestNinja_> oh, nm, I was running unfudged file

[15:27] <timotimo> ah

[15:27] <TestNinja_> (S32-list/first.t fwiw)

[15:32] <dalek> roast: 7cdeab4 | (Zoffix Znet)++ | S32-list/first.t:

[15:32] <dalek> roast: Junctions work correctly as a matcher in .first

[15:32] <dalek> roast:

[15:32] <dalek> roast: RT#129304: https://rt.perl.org/Ticket/Display.html?id=129304

[15:32] <dalek> roast: review: https://github.com/perl6/roast/commit/7cdeab4a68

[15:32] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129304

[15:38] <dalek> roast: 92e0197 | (Zoffix Znet)++ | S32-str/comb.t:

[15:38] <dalek> roast: .comb(/:m <[o]>/) construct does not die

[15:38] <dalek> roast:

[15:38] <dalek> roast: RT#127215: https://rt.perl.org/Ticket/Display.html?id=127215

[15:38] <dalek> roast: review: https://github.com/perl6/roast/commit/92e0197c3a

[15:38] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127215

[16:00] <dalek> nqp: bd4c830 | (Pawel Murias)++ | src/vm/js/nqp-runtime/deserialization.js:

[16:00] <dalek> nqp: [js] Deserialize the outer in contexts more correctly.

[16:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bd4c830a1c

[16:00] <dalek> nqp: 12c9855 | (Pawel Murias)++ | src/vm/js/ (2 files):

[16:00] <dalek> nqp: [js] Stub nqp::settypecheckmode.

[16:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/12c98556cd

[16:00] <dalek> nqp: a98cad3 | (Pawel Murias)++ | t/docs/opcodes.t:

[16:00] <dalek> nqp: catch more JS ops.

[16:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a98cad3b43

[16:00] <dalek> nqp: b253419 | (Pawel Murias)++ | src/vm/js/Operations.nqp:

[16:00] <dalek> nqp: [js] Refactor to define ops more regularly so that t/docs/opcodes.t can find ops.

[16:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b2534199fc

[17:19] <psch> hi #perl6-dev o/

[17:19] <psch> does anyone have an idea how to distinguish containered Positionals from non-containered Positionals on the nqp level?

[17:19] <psch> e.g. List vs. Array

[17:19] <psch> or am i stuck with "is it reified and are all positions containers?"

[17:20] <timotimo> oh hey psch \o/

[17:20] <timotimo> we definitely have something for that

[17:21] <timotimo> maybe it's nqp::iscont?

[17:24] <timotimo> yes, look at List's method perl

[17:24] <timotimo> it uses nqp::iscont(self) to decide whether it should put a $ at the beginning or not

[17:26] <psch> m: use nqp; my \list = (1, 2, 3); say nqp::iscont(list); my \array = [1,2,3]; say nqp::iscont(array)

[17:26] <camelia> rakudo-moar 8be36b: OUTPUT«0␤0␤»

[17:28] <psch> m: use nqp; sub is-cont-pos(\a) { return 1 if [*] (do nqp::iscont($_) for @(a)); return 0 }; my \list = (1,2,3); my \array = [1,2,3]; say is-cont-pos(list); say is-cont-pos(array)

[17:28] <camelia> rakudo-moar 8be36b: OUTPUT«0␤1␤»

[17:28] <psch> timotimo: hi :)

[17:28] <psch> timotimo: the latter is what i want

[17:28] <psch> timotimo: i'm mostly hoping i'm missing something about how ContainerSpecs apply to Positional types

[17:28] <timotimo> ah, good question

[17:29] <psch> ...also sorry for the somewhat convoluted is-cont-pos impl

[17:29] <psch> (i wasn't sure if nqp::op(Junction) DTRT, soo...)

[17:30] <timotimo> junction multithreading is implemented as a special handling of dispatch errors

[17:31] <psch> right, i'll assume i have to iterate then for now

[17:31] <psch> can always rewrite if we have something smarter

[17:31] <timotimo> since nqp ops don't have dispatching in them (except maybe a few that are implemented as code-gen for calls, like maybe nqp::sort?) it'll just give the junction as a parameter

[17:32] <psch> i was at first considering just to istype(..., Array), but that's not sufficiently wide, while Positional isn't narrow enough because of List

[17:32] <psch> so iscont for all positions in the Positional it is :)

[17:32] <timotimo> i don't know what the exact usecase is, so *shrug*

[17:33] <psch> oh, jvminterop outmarshalling

[17:33] <timotimo> ah

[17:33] <timotimo> jvminterop is scary magic

[17:33] <psch> 'cause, well, we can (and maybe even want to) new List if we actually have a p6 List

[17:33] <psch> as the target type

[17:34] <psch> yeah, says one of the moar bytecode optimizer devs

[17:34] <psch> :P

[17:34] <timotimo> oh, i only touch the bits of spesh that are simple

[17:34] <timotimo> inlining sends me away screaming, for example :P

[17:35] <psch> still

[17:35] <psch> jvminterop is a bit of indy hacking -- which is mostly done -- and a lot of lets-hope-i-don't-overlook-a-case type wrangling

[17:36] <psch> well, until someone wants to tackle how we wanna do implementing a Java interface in a Perl 6 class

[17:36] <psch> that's gonna be a bag of... something

[17:36] <psch> probably unpleasant

[17:39] <timotimo> most likely

[17:39] <timotimo> though i think that feature already exists for a very limited set of interfaces?

[17:40] <psch> it does?

[17:40] <timotimo> i think so

[17:40] <timotimo> it's been a while since i looked at jvminterop, or at examples using it

[17:41] <psch> j: use java::util::List:from<JavaRuntime>; List.new

[17:41] <camelia> rakudo-jvm cd19db: OUTPUT«Method 'new' not found for invocant of class 'java.util.List'␤  in block <unit> at <tmp> line 1␤␤»

[17:41] <psch> j: use java::util::List:from<JavaRuntime>; List[Int].new

[17:41] <camelia> rakudo-jvm cd19db: OUTPUT«===SORRY!=== Error while compiling <tmp>␤java.util.List cannot be parameterized␤at <tmp>:1␤------> :util::List:from<JavaRuntime>; List[Int]⏏.new␤»

[17:41] <psch> uh, actually

[17:41] <psch> that's bogus examples

[17:41] <psch> j: use java::util::List:from<JavaRuntime>; class JList is List { }

[17:41] <camelia> rakudo-jvm cd19db: OUTPUT«Unhandled exception: Method 'item' not found for invocant of class 'java.util.List'␤  in print_exception (gen/jvm/CORE.setting:22948)␤  in <anon> (gen/jvm/CORE.setting:22999)␤  in command_eval (gen/jvm/stage2/NQPHLL.nqp:1329)␤  in command_eval (src/…»

[17:41] <psch> hm, maybe that should need 'does' anyway

[17:41] <timotimo> AFKBBIAB

[17:41] <psch> yeah, there's a few things i really haven't thought about at all, honestly

[17:42] <psch> afaik it never worked for *any* interface type -- we don't even generate anything useful for interfaces i think

[17:43] <psch> j: use java::util::List:from<JavaRuntime>; List.^methods.say

[17:44] <camelia> rakudo-jvm cd19db: OUTPUT«(callout java.util.List method/containsAll/(Ljava/util/Collection;)Z callout java.util.List method/hashCode/()I callout java.util.List method/contains/(Ljava/lang/Object;)Z callout java.util.List method/indexOf/(Ljava/lang/Object;)I callout java.util.List m…»

[17:44] <psch> j: use java::util::List:from<JavaRuntime>; List.contains("foo")

[17:44] <camelia> rakudo-jvm cd19db: OUTPUT«java.lang.IncompatibleClassChangeError: Found interface java.util.List, but class was expected␤  in block <unit> at <tmp> line 1␤␤»

[17:44] <psch> there

[17:53] <timotimo> what is going on there?

[17:56] <psch> well, List is an interface

[17:59] <psch> and the invocation of a method on an interface doesn't work in Java

[17:59] <psch> because they're not classes

[18:00] <geekosaur> and it can't compose them into anonymous classes like would happen with a perl6 interface, because java

[18:00] <geekosaur> (although possibly in theory it could be done)

[18:00] <geekosaur> s/perl6 interface/perl6 role/

[18:00] <psch> yeah, but i'm pretty sure the language designers want that distinction

[18:01] <timotimo> mhm

[18:01] <psch> as for "we can cheat that on the Perl 6 side", i'd assume that falls out of making interfaces implementable

[18:01] <psch> as in, "just pretend you got it as Any does $interface" or something

[18:01] <psch> as i said, i haven't really thought about any of that at all

[18:01] <psch> ("implementable" here means "useable as per the 'implements' keyword in Java, not "have someone implement them")

[18:02] <psch> s/,/",/

[18:02] <timotimo> OK

[18:03] <geekosaur> ah, right, forgot that java interfaces just say what is required by an implementation, it doesn't provide an implementation

[18:03] <geekosaur> so, that's not really doable

[18:03] <psch> right, we could only cheat around it on the interop path

[18:04] <arnsholt> Java 8 lets you have default implementations, doesn't it?

[18:06] <psch> i can only find default methods inside of interfaces

[18:12] <TimToady> p6 roles are perhaps a little more like generics than interfaces

[18:15] <psch> m: role R[Mu $x] { method foo { say "of " ~ $x.WHAT } }; say R.new

[18:15] <camelia> rakudo-moar 8be36b: OUTPUT«No appropriate parametric role variant available for 'R'␤  in any specialize at gen/moar/m-Metamodel.nqp line 2649␤  in any compose at gen/moar/m-Metamodel.nqp line 3028␤  in any make_pun at gen/moar/m-Metamodel.nqp line 1717␤  in any find_method a…»

[18:15] <psch> ^^^ that makes me think we shouldn't actually cheat interfaces in the "pretend it was Any does $interface" way

[18:16] <psch> because if we don't specialize Roles on Any in lieu of an actual parametric type we probably shouldn't do the same with Java interfaces

[18:16] <psch> i mean, yeah, roles are closer to generics than to interfaces, but they share bits with interfaces too, like the ability to prescribe methods that have to be implemented

[18:17] <psch> although i guess that's a thing classes do as well on our side

[18:17] <psch> m: class A { method foo { ... } }; class B is A { }; B.foo.say # as here

[18:17] <camelia> rakudo-moar 8be36b: OUTPUT«Stub code executed␤  in method foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:18] <TimToady> well, only at runtime, I was gonna say

[18:18] <TimToady> sounds more like we need a pun at the appropriate moment

[18:19] <psch> in jvminterop for interfaces?

[18:19] <TimToady> presuming the moment doens't involve time travel

[18:19] <TimToady> like my spelling deos...

[18:20] <TimToady> I dunno, I'm just dropping random smart-sounding words in the hopes that they trigger an idea in someone who is less ignorant.

[18:23] <psch> well, it's a thing for the future, in any case

[18:24] <psch> first i wanna figure out marshalling of aggregate types in a post-GLR world :)

[18:24] <TimToady> psch++

[19:01] <psch> https://gist.github.com/peschwa/837f82061c9d22033bcd8c12374805ce

[19:01] <psch> with that, g'night o/

[19:04] <bartolin> oh hai, psch -- and \o

[19:28] <timotimo> d'oh

[19:44] <TimToady> nine: currently failing t/spec/S01-perl-5-integration/hash.t for some reason

[19:45] <timotimo> could be you need a newer Inline::Perl5 commti?

[19:45] <timotimo> commit*

[19:46] <MetaZoffix> Yeah

[19:47] <TimToady> just force installed

[19:48] <timotimo> nine is pretty good about bumping the version so you don't need to force-install, i thought

[19:49] * nine thought so too

[19:49] <TimToady> fails: is(%hash{9}, 'e', 'store result');

[19:49] <MetaZoffix> Running stresstest on a starved box is a rather sad sight. ~500 tests failing, with some test runs seemingly exiting in mid-way through the test too https://gist.github.com/zoffixznet/39b53b5514d3be50e02e2c74b5b584e4

[19:49] <TimToady> and that was right after a pull/config/make

[19:49] <TimToady> (on rakudo)

[19:50] <timotimo> TimToady: https://github.com/timo/cellular-automata-tests - would be interested to know what you think of this, given you made the original Forest Fire CA, iirc

[19:51] <MetaZoffix> And it seems one is_run test is freaking out. It's still running and consuming all my RAM even though the spectest exited

[19:51] <MetaZoffix> m: { say @_.gist }(1..Inf)

[19:51] <nine> Indeed the fix is in Inline::Perl5 0.13

[19:51] <camelia> rakudo-moar 8be36b: OUTPUT«(timeout)»

[19:52] <TimToady> timotimo: I usually try not to recalculate my neighbors each time through the loop

[19:55] <TimToady> looks like zef isn't actually upgrading my Inline::Perl5; it's at 0.9

[19:55] <TimToady> maybe I need a newer zef?

[19:59] <TimToady> huh, did a zef update, and now a force install tries to install 0.7 instead of 0.9!

[19:59] <TimToady> sump'n's really scwewy

[20:05] <TimToady> no, newest zef still installs only 0.7, huh...

[20:06] <nine> TimToady: aybe you can findvsomeone at #perl6 who can help you with Perl 6. People there arevusually friendly :)

[20:07] <TimToady> :D

[20:07] <TimToady> okay, it works if I specifically say: zef install "Inline::Perl5:ver('0.13')"

[20:07] <TimToady> so something's not wildcarding to the latest version

[20:09] <TimToady> or it's using string comparison rather than version comparison, but that wouldn't explain picking 0.7 over 0.9

[20:10] <timotimo> TimToady: the rendering stuff is what eats most of the run time, though ;(

[20:11] <TimToady> (and 0.13 fixes the test error)

[20:14] <nine> ugexe: ^^^

[20:45] <ugexe> hmm, I think its from asking for :max-results<1> from the local cache before it sorts by max version instead of the other way around

[20:48] <japhb> That would probably do it, yes.  :-)

[20:49] <japhb> timotimo: Are you planning to add https://github.com/timo/cellular-automata-tests to perl6-bench?  Because I'd love that.

[20:49] * japhb dearly wishes he had time to be collecting more stuff into perl6-bench on a daily basis

[20:49] <timotimo> well, i can turn SDL2 to use a software renderer instead of poping up a window

[20:50] <timotimo> that'd make it more legit compared to just ripping out the whole graphics part

[20:51] <japhb> timotimo: nodnod

[20:51] <japhb> ... although having a version with graphics ripped completely out would still be useful info.

[20:52] <timotimo> i want to do more tweaking to make the code better, though

[20:52] <timotimo> so if i'm still gonna change the code, i might change the code inside perl6-bench, too. and that would be bad :)

[20:55] <japhb> Hmmm.  Seems that perl6-bench might benefit from branching.  That function had been served mostly be people doing forks, and merging when they were ready, but it might be nice if people can collaborate on improvements to the test suite together in the main repo without messing with normal users until we're ready to merge (or in some sense "release" a new version of the suite).

[21:38] <timotimo> japhb: looking at my code, can you think of alleys of improvement?

[21:39] * Zoffix is preparing a small patch to parse_coverage_report.p6

[21:40] <timotimo> cool

[21:51] <Zoffix> grrr (╯°□°）╯︵ ┻━┻

[21:51] <Zoffix> Never mind.

[21:51] <Zoffix> Too much C accent in that code for me :(

[21:52] <Zoffix> But I wanted to make it skip first 2 lines, because they aren't in the separate code files and add line ID numbers.

[21:52] <Zoffix> s: &say

[21:52] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/8be36b1/src/core/io_operators.pm#L20

[21:52] <Zoffix> so ^ that line number matches the one in coverage report and can be linked to

[21:59] <Zoffix> SourceBaby, source

[21:59] <SourceBaby> Zoffix, See: https://github.com/zoffixznet/perl6-sourceable

[22:04] <Zoffix> s: REPL, 'history-file'

[22:04] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/8be36b1/src/core/REPL.pm#L408

[22:14] <Zoffix> Sent https://github.com/MoarVM/MoarVM/pull/409
