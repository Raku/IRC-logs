[05:13] <dalek> roast: 907379d | usev6++ | S (2 files):

[05:13] <dalek> roast: Add fudging for rakudo-j for new tests

[05:13] <dalek> roast: review: https://github.com/perl6/roast/commit/907379dbe6

[06:14] <AlexDaniel> I hope nobody needed bisectable while it was down :)

[06:14] <AlexDaniel> there are many cool new features now

[06:14] <AlexDaniel> bisect: say (^∞).grep({ last })[5]

[06:14] <bisectable> AlexDaniel: Exit code is 0 on both starting points, bisecting by using the output

[06:14] <bisectable> AlexDaniel: bisect log: https://gist.github.com/2d8b6006eaf478186574eb79ef765ae3

[06:14] <bisectable> AlexDaniel: (2016-03-18) https://github.com/rakudo/rakudo/commit/6d120ca

[06:15] <AlexDaniel> one is that it provides the log

[06:15] <AlexDaniel> with *all* information

[06:15] <AlexDaniel> bisect: say ‘hello world’

[06:15] <bisectable> AlexDaniel: On both starting points the exit code is 0 and the output is identical as well

[06:15] <bisectable> AlexDaniel: Output on both points: hello world

[06:15] <AlexDaniel> basically, it is much more transparent now

[06:16] <AlexDaniel> and if the output is too long it will gist it

[06:16] <AlexDaniel> bisect: .say for ^200

[06:16] <bisectable> AlexDaniel: On both starting points the exit code is 0 and the output is identical as well

[06:16] <bisectable> AlexDaniel: https://gist.github.com/b7db9754fc51f4f7c668477fa18a6205

[06:16] <AlexDaniel> bisect: good=2016.03 bad 2016.02 say (^∞).grep({ last })[5] # swapped good and bad revisions

[06:16] <bisectable> AlexDaniel: Exit code is 0 on both starting points, bisecting by using the output

[06:16] <bisectable> AlexDaniel: bisect log: https://gist.github.com/256227743bd646f2d8003dda2789c33e

[06:16] <bisectable> AlexDaniel: bisect init failure

[06:17] <AlexDaniel> ↑ this error message comes from git. Now you can see it!

[06:17] <AlexDaniel> but that's not all… :) Ever wanted to m: some code but the output was a bit too long?

[06:17] <AlexDaniel> committable: HEAD say rand for ^100

[06:17] <committable> AlexDaniel: https://gist.github.com/0d89cfa80a84bf4e7213d44f4dd7ffda

[06:18] <AlexDaniel> one cool thing about committable is that it allows multiple revisions to be specified

[06:18] <AlexDaniel> committable: 2015.10,2016.02,HEAD say $*VM

[06:18] <committable> AlexDaniel: |«2015.10»: moar (2015.10)␤|«2016.02»: moar (2016.2)␤|«HEAD»: moar (2016.06.9.g.8.fc.21.d.5)

[06:19] <AlexDaniel> and even though it does not run anything in parallel, you can already go wild

[06:19] <AlexDaniel> commit: HEAD~250..HEAD say round(rand*3)

[06:19] <committable> AlexDaniel: Too many commits (363) in range, you're only allowed 300

[06:19] <AlexDaniel> ah yeah

[06:19] <AlexDaniel> commit: HEAD~200..HEAD say round(rand*3)

[06:19] <AlexDaniel> not too wild

[06:19] <AlexDaniel> but still

[06:19] <AlexDaniel> slooooooooow because not parallel, but already useful

[06:20] <committable> AlexDaniel: https://gist.github.com/48a9797ffaba774b0f0ac493d058e964

[06:20] <AlexDaniel> note that it groups commits by the output

[06:20] <AlexDaniel> anyway, that's it! Have a nice day everyone

[06:20] <AlexDaniel> MasterDuke++ for 50% of these changes

[06:34] <masak> AlexDaniel++ # improvements

[06:35] <masak> though don't you think "commitable" is a confusing name, since it doesn't actually allow committing? ;)

[06:35] <masak> er, "committable"

[06:35] <AlexDaniel> masak: how else should we call it? Executable? :D

[06:38] <masak> "mucoevbo" ("multi-commit eval bot") ;)

[06:38] <masak> or just "multicommit"

[06:39] <masak> hm, I guess the "multi" ain't the main feature, though

[06:39] <masak> how about calling it "onbot"? :D it evals something "on" a certain commit

[06:39] <AlexDaniel> we will see what is the main feature, hard to tell right now

[06:40] <AlexDaniel> anyway, “committable” is how MasterDuke contributed it, and I don't mind… but pull request are welcome, right? ;)

[06:40] <Zoffix> .ask psch is JVM still seriously busted or should it be fully tested as part of this weeks release?

[06:40] <AlexDaniel> committable: source

[06:40] <committable> AlexDaniel: https://github.com/perl6/bisectbot

[06:41] <Zoffix> .tell jnthn just a reminder that tomorrow is a Rakudo release and we'll need a MoarVM release cut. Thanks.

[06:41] <Zoffix> ugh

[06:41] <Zoffix> Never a bot around when you need one!

[06:42] <masak> bots are so lazy

[06:42] <Zoffix> .ask psch is JVM still seriously busted or should it be fully tested as part of this weeks release?

[06:42] <yoleaux2> Zoffix: I'll pass your message to psch.

[06:43] <Zoffix> .tell jnthn just a reminder that tomorrow is a Rakudo release and we'll need a MoarVM release cut. Thanks.

[06:43] <yoleaux2> Zoffix: I'll pass your message to jnthn.

[06:44] <masak> .tell yoleaux2 that circularity is problematic, m'kay?

[06:44] <yoleaux2> masak: Thanks for the message.

[06:45] <Zoffix> hah

[06:45] <Zoffix> .ask nine have you had any luck with DESTDIR ticket https://rt.perl.org/Ticket/Display.html?id=128548 ? I recall you mentioned it's a release blocker. How should we proceed here?

[06:45] <yoleaux2> Zoffix: I'll pass your message to nine.

[06:56] <masak> .tell yoleaux2 to thank me for the message

[06:56] <yoleaux2> masak: Thanks for the message.

[07:07] <Zoffix> m: say so "07\x[308]2" ~~ /^ <[0..9]>+ $/

[07:07] <camelia> rakudo-moar c9dcc9: OUTPUT«True␤»

[07:08] <Zoffix> This is a bit scary.

[07:08] <Zoffix> m: "\x[308]".uninames.say

[07:08] <camelia> rakudo-moar c9dcc9: OUTPUT«(COMBINING DIAERESIS)␤»

[07:12] <Zoffix> m: say so "07\x[308]2" ~~ /^ <[\x[30]..\x[39]]>+ $/

[07:12] <camelia> rakudo-moar c9dcc9: OUTPUT«True␤»

[07:12] <Zoffix> o.O

[07:14] <Zoffix> m: Date.new("२०१६-०७-१६").say

[07:14] <camelia> rakudo-moar c9dcc9: OUTPUT«2016-07-16␤»

[07:15] <nine> Zoffix: please don't do a release until I fixed the regression. I think I'm almost done and should have quite some time for rakudo today. If I don't make it, I will revert the cause of the regression, but you never know when real life interferes...

[07:15] <yoleaux2> 06:45Z <Zoffix> nine: have you had any luck with DESTDIR ticket https://rt.perl.org/Ticket/Display.html?id=128548 ? I recall you mentioned it's a release blocker. How should we proceed here?

[07:15] <nine> Hah! Just answered :)

[07:15] <Zoffix> nine, no problem

[07:23] <AlexDaniel> bisect: good 2015.10 my $p1 = start die "I’m dead"; my $p2 = start ~"I’m alive"; try await Promise.allof($p1, $p2); say .result for grep { .status ~~ ‘Kept’}, $p1, $p2;

[07:23] <bisectable> AlexDaniel: On both starting points the exit code is 0 and the output is identical as well

[07:23] <bisectable> AlexDaniel: Output on both points: Iâm alive

[07:23] <AlexDaniel> great, encoding issues

[07:56] <dalek> rakudo/nom: 2c69ab7 | (Zoffix Znet)++ | docs/release_guide.pod:

[07:56] <dalek> rakudo/nom: Update leap seconds instructions in the Release Guide

[07:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2c69ab78be

[07:58] <dalek> rakudo/nom: 325b43f | lizmat++ | docs/ChangeLog:

[07:58] <dalek> rakudo/nom: Mention improvements of last night

[07:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/325b43f7f7

[08:01] <dalek> rakudo/nom: da0973d | lizmat++ | src/core/Array.pm:

[08:01] <dalek> rakudo/nom: Remove Array.cow for now

[08:01] <dalek> rakudo/nom:

[08:01] <dalek> rakudo/nom: Nobody's really said anything about it, and there are no tests for

[08:01] <dalek> rakudo/nom: it yet.  So give us the option of not making it a feature by removing

[08:01] <dalek> rakudo/nom: it for the 2016.07 release.

[08:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/da0973d72f

[08:02] <lizmat> afk for the rest of the day&

[08:32] <Zoffix> bisect: "Foo".comb.count-only

[08:32] <bisectable> Zoffix: On both starting points the exit code is 1 and the output is identical as well

[08:32] <bisectable> Zoffix: Output on both points: Method 'count-only' not found for invocant of class 'Seq'␤  in block <unit> at /tmp/7QA9mmmvbo line 1␤

[08:33] <Zoffix> bisect: good=053729c bad=HEAD "Foo".comb.count-only

[08:33] <bisectable> Zoffix: On both starting points the exit code is 1 and the output is identical as well

[08:33] <bisectable> Zoffix: Output on both points: Method 'count-only' not found for invocant of class 'Seq'␤  in block <unit> at /tmp/nVuFY3OyfF line 1␤

[08:45] <timotimo> count-only is in the iterator, not in the seq

[09:11] <psch> .

[09:11] <yoleaux2> 06:43Z <Zoffix> psch: is JVM still seriously busted or should it be fully tested as part of this weeks release?

[09:12] <psch> Zoffix: afaict we install and kinda sorta get through spectest.  bartolin++ did lots of fudging there recently

[09:12] <psch> Zoffix: 'make test' is mostly fine, except NC is broken in part

[09:12] <Zoffix> Are usev6 and bartolin the same person?

[09:12] <psch> Zoffix: and the interop changes (seperating out rt.jar classes vs "classes loaded from somewhere not in the classpath" aren't quite done

[09:12] <psch> yeah

[09:13] <psch> i'm kinda confident i can fix the latter today, if not tomorrow

[09:14] <psch> that's kind of my for-relaxation thing currently, NC probably after that, although that might well take a week or so and probably shouldn't block the release

[09:14] <psch> in general i'd advice not to release r-j as of now

[09:15] <Zoffix> cool. thanks

[09:18] <psch> i mean, we probably could, but my impression (without looking closely) is that the amount of fudges and skips are (a) quite significant atm and (b) affecting important areas

[09:18] <psch> like, i think we still have some problem with CX::Return in some spots

[09:19] <psch> and other problems with implicit return of specific things...

[10:10] * stmuk wonders if sexy-coder-robot is all fired up for the release

[10:16] <Zoffix> Sure :)

[10:55] <dalek> rakudo/nom: 51a6118 | (Zoffix Znet)++ | docs/ChangeLog:

[10:55] <dalek> rakudo/nom: Populate ChangeLog

[10:55] <dalek> rakudo/nom:

[10:55] <dalek> rakudo/nom: Logs changes from commits: b7c8528 and bd0fd78

[10:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/51a6118196

[11:10] <psch> nine: i need a hint.  why does install-core-dist.pl want to create .precomp below a .jar?

[11:11] <psch> nine: reason is, i apparently don't have a choice but to include the jars (i.e. the asm*.jar, nqp-runtime.jar, etc) in nqp::jvmclasspaths, because otherwise i lose them, which breaks interop for JavaRuntime

[11:11] <psch> nine: but i don't get why we need .precomp there, nor where and why that happens

[11:23] <nine> psch: CompUnit::PrecompilationStore::File currently creates the precomp directory in its constructor.

[11:24] <nine> psch: If your Java repository creates a CompUnit::PrecompilationRepository with the jar's path as $.prefix, this will be passed to the precompilation store

[11:26] <psch> nine: the actual issue seems to be that the RepositoryRegistery creates a PrecompStore::File for each entry in the CLASSPATH

[11:27] <psch> nine: and that's where we have e.g. asm-4.1.jar

[11:27] <nine> psch: ack PrecompilationStore::File src

[11:28] <nine> psch: looks to me like the only places where we create a PrecompilationStore::File are the precomp-store methods of repositories?

[11:30] <psch> nine: https://github.com/rakudo/rakudo/blob/nom/src/core/CompUnit/RepositoryRegistry.pm#L66 is what i'm looking at

[11:31] <psch> nine: if i change nqp::jvmclasspaths to not include the *jar paths, i don't get the .precomp problem

[11:31] <psch> s/include/emit/

[12:46] <nine> psch: I guess that creates CompUnit::Repository::FileSystem instances for those class paths. That's clearly no longer a good idea.

[12:47] <nine> psch: either just remove it, or change it so it will create Java repositories instead.

[12:47] <nine> psch: in the latter case just prefix the path by 'java#' or 'jar#' or whatever you use as short-id

[12:48] <psch> yeah, i think the latter could work

[12:48] <psch> i'm a bit concerned that it'll do the whole interop shtick then, though, which we don't really want for e.g. asm-4.1.jar

[12:49] <psch> but i don't really see through the interaction of the jvms classpath and the hll-level lib paths :|

[13:18] <[Coke]> https://bestpractical.com/blog/2016/7/tagging-in-rt - a real replacement for us abusing [BUG] in the subject.

[13:19] <Frameless> Creepy you mentioning it just as I'm writing a blog about tickets and and section on RT tagging in particular.

[13:19] <Frameless> Quit spying on me! :)

[13:20] <Frameless> [Coke]: BTW, did we get the [@LARRY] or similar tag on RT? Would be nice to mention it in my post, if we got it

[13:22] <Frameless> "...And once the values are added, they become links to a search of all active tickets which that tag...."

[13:22] <Frameless> That would be great. Links to get tickets with a particular tag.

[13:24] <[Coke]> Frameless: just need to agree what the tag is.

[13:25] <[Coke]> Frameless: we can probably get that link now by doing a subject search. (checking)

[13:26] <Frameless> It'll likely be the one that shows CSRF vuln warning

[13:27] <[Coke]> of course. but here: https://rt.perl.org/Search/Results.html?Format=%27%20%20%20%3Cb%3E%3Ca%20href%3D%22%2Frt3%2FTicket%2FDisplay.html%3Fid%3D__id__%22%3E__id__%3C%2Fa%3E%3C%2Fb%3E%2FTITLE%3A%23%27%2C%0A%27%3Cb%3E%3Ca%20href%3D%22%2Frt3%2FTicket%2FDisplay.html%3Fid%3D__id__%22%3E__Subject__%3C%2Fa%3E%3C%2Fb%3E%2FTITLE%3ASubject%27%2C%0A%27__Status__%27%2C%0A%27__QueueName__%27%2C%0A%27__OwnerName__%27%2C

[13:27] <[Coke]> %0A%27__Priority__%27%2C%0A%27__NEWLINE__%27%2C%0A%27%27%2C%0A%27%3Csmall%3E__Requestors__%3C%2Fsmall%3E%27%2C%0A%27%3Csmall%3E__CreatedRelative__%3C%2Fsmall%3E%27%2C%0A%27%3Csmall%3E__ToldRelative__%3C%2Fsmall%3E%27%2C%0A%27%3Csmall%3E__LastUpdatedRelative__%3C%2Fsmall%3E%27%2C%0A%27%3Csmall%3E__TimeLeft__%3C%2Fsmall%3E%27&Order=ASC%7CASC%7CASC%7CASC&OrderBy=id%7C%7C%7C&Query=Subject%20LIKE%20%27%5BPERF

[13:27] <[Coke]> %5D%27%20AND%20Queue%20%3D%20%27perl6%27%20AND%20(%20%20Status%20%3D%20%27new%27%20OR%20Status%20%3D%20%27open%27%20)&RowsPerPage=0&SavedChartSearchId=new&SavedSearchId=new

[13:27] <[Coke]> oof. one sec.

[13:27] <[Coke]> - https://goo.gl/AvGhwD [rt.perl.org]

[13:29] <[Coke]> (CSRF) I'll ask the team at rt.perl.org to see if we can whitelist rakudo.org and *.perl6.org

[13:30] <perlpilot> [Coke]: I think if you choose [@LARRY] and start using it, it will be agreed  :)

[13:30] <Frameless> Yeah :)

[13:31] <[Coke]> Frameless: perfect, sold, use it.

[13:32] <Frameless> Cool.

[13:33] <dalek> rakudo/nom: e721ec7 | coke++ | README.md:

[13:33] <dalek> rakudo/nom: add new [@LARRY] tag

[13:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e721ec79c5

[13:34] <Frameless> [Coke]: so we'd just put that in the subject line? 'cause there's also the RT tags thing that lets you pick from a predefined list of tags.

[13:37] <[Coke]> I don't think those tags are installed on rt.perl.org yet, are they?

[13:37] <[Coke]> oh, that predefined tag list.

[13:37] <[Coke]> that's different.

[13:37] <[Coke]> updating that list requires a ticket with the RT admins, so I tend to avoid it.

[13:38] <[Coke]> (and the original list came directly from perl5's list, so not sure how much of them are used/relevant)

[13:38] <Frameless> Ah. Sure. The in-subject tags are preferred by me too, because they are the only thing my RT::REST::Client understands :)

[13:48] <[Coke]> nine: is https://rt.perl.org/Ticket/Display.html?id=128371 resolved? it says it's another copy of a resolved precomp bug.

[13:49] <Frameless> And there you go, the first @LARRY tag: https://rt.perl.org/Ticket/Display.html?id=128542

[13:49] <[Coke]> is pmichaud the only one able to address 128423 ?

[13:50] * perlpilot guesses so

[13:51] <[Coke]> ah, crap. @LARRY is the first tag with not just [A-Z]

[13:52] <Frameless> Change it to [LARRY]?

[13:52] <[Coke]> eh, it's fine.

[13:52] <[Coke]> RT: 1322; @LARRY: 1; CONC: 7; GLR: 6; JVM: 70; LHF: 1; LTA: 79; NEW: 876; NYI: 28; OSX: 6; PERF: 16; POD: 9; PRECOMP: 7; RFC: 22; SEGV: 24; STAR: 1; TESTNEEDED: 10; TODO: 8; UNI: 10; UNTAGGED: 655; WEIRD: 3

[13:52] <Frameless> OK :)

[13:54] <[Coke]> liz just merged in "is mangled" for nativecall; do we need to bikeshed the name or worry about 6.c compatibility with this one?

[14:07] <nine> [Coke]: the testcase for 128371 is incomplete, so I cannot run it. But I strongly suspect that it's indeed fixed, too.

[14:09] <[Coke]> "how is zoffix replying to my ticket to the perlbug admins??" "oh, because that's not where that ticket went."

[14:10] <[Coke]> nine: Can you reply to the user and ask them to either test with HEAD and/or ask them for whatever bits are missing to allow us to run the test?

[14:12] <[Coke]> (reply, cc' list, etc.)

[14:12] <nine> [Coke]: done

[14:13] <dalek> rakudo/nom: 78ba3df | (Zoffix Znet)++ | docs/ChangeLog:

[14:13] <dalek> rakudo/nom: Populate ChangeLog

[14:13] <dalek> rakudo/nom:

[14:13] <dalek> rakudo/nom: List changes introduced by Dependency Version 2

[14:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/78ba3df7e1

[14:13] <[Coke]> .tell TimToady - we've started tagging RTs that probably need design review with [@LARRY]; one more thing for you to look at if you get some time. other @larrys will pitch in as well. (many more tags to come)

[14:13] <yoleaux2> [Coke]: I'll pass your message to TimToady.

[17:02] <Frameless> New blog post: "[Part 2] A Date With The Bug Queue or Let Me Help You Help Me Help You": http://perl6.party/post/A-Date-With-The-Bug-Queue-or-Let-Me-Help-You-Help-Me-Help-You--Part-2

[17:06] <AlexDaniel> “This isn't the interface for the latest NASA space probe.” – Haha, so true. That being said, I kinda like how advanced it is. The only problem is that I don't need 90% of these features most of the time, so I wish the “simple search” thingy was slightly more advanced.

[17:10] <AlexDaniel> Frameless++

[17:12] <bartolin> Frameless++  # work on RT queue and blog posts

[17:12] * bartolin liked Part 1 and will read Part 2 later

[17:12] <bartolin> Frameless: btw, yes, I'm usev6 on github

[17:13] <Frameless> bartolin: is my adding tests annoying because they fail on JVM and I don't test the JVM and you have to fudge them? :)

[17:14] <bartolin> Frameless: no, it's fine. I'm happy to see new tests :-)

[17:14] <Frameless> k :)

[17:15] <bartolin> I have one question, though: did you see that we have t/02-rakudo/repl.t in the rakudo repo?

[17:16] <bartolin> maybe it's better to move tests for the REPL out of roast (since it does not belong to the language specification)

[17:16] <bartolin> or does it?

[17:17] <[Coke]> if it's in 6.c, it's -in- the language spec at the moment.

[17:17] <[Coke]> but yes, moving those tests to rakudo-actual is not a bad idea, depending on the tests.

[17:18] <[Coke]> in some cases, it's "this used to fail in the REPL" vs. "this thing that should only ever happen in the REPL works

[17:18] <bartolin> [Coke]: in 6.c we only have one basic sanity test

[17:18] <[Coke]> well, it's not automatically going in to 6.d without some review, so it's fine for now.

[17:18] <bartolin> ok, I'm fine with that

[17:21] <Frameless> The rest of the tests are all to check for bug regression.

[17:21] <Frameless> (in that file)

[17:44] <[Coke]> added https://github.com/rakudo/rakudo/wiki/contrib-financially

[17:45] <lucs> \w5

[17:52] <[Coke]> added some to https://github.com/rakudo/rakudo/wiki/rt-contributing

[17:53] <[Coke]> bugfolks: feel free to start fleshing those out.

[17:54] <[Coke]> I will continue to drop more stuff in there that I've been keeping in gists in the past.

[17:58] <perlpilot> Frameless++ just read your post.

[22:18] <dalek> roast: dbdc612 | usev6++ | S (3 files):

[22:18] <dalek> roast: Unfudge two passing test on JVM

[22:18] <dalek> roast:

[22:18] <dalek> roast: also use 'todo' instead of 'skip' for on precomp

[22:18] <dalek> roast: test on Moar

[22:18] <dalek> roast: review: https://github.com/perl6/roast/commit/dbdc612ea8
