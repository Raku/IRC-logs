[00:35] <timotimo> it turns out i didn't end up bringing ndarrayviews to a functioning POC today

[02:00] <MasterDuke> timotimo: how good are you with Java?

[02:01] <timotimo> not good

[02:02] <MasterDuke> ha, neither am i (that's why i'm asking!)

[02:03] <MasterDuke> well, to anybody really, any suggestions for my ArrayIndexOutOfBounds exception when trying to create a ClassReader with an InputStream?

[02:03] <timotimo> i don't know anything about classloaders

[02:04] <timotimo> well, when i worked on the jvm port of rakudo, AIOOB was always about having push operations not followed by the right amount of poppiness

[02:04] <timotimo> maybe the other way around, too

[02:06] <MasterDuke> i was definitely surprised to get that error, i'm not doing anything with an array myself, this is the problem line: https://github.com/MasterDuke17/nqp/blob/source_file_line_numbers_on_jvm/src/vm/jvm/runtime/org/perl6/nqp/runtime/ExceptionHandling.java#L331

[02:06] <timotimo> well, if you're using getResourceAsStream, you're probably giving ASM an array of bytes or something

[02:06] <timotimo> ASM is *really* bad at turning exceptions that relate to ASM internals to sensible exceptions about its functionality

[02:06] <timotimo> like, it's the worst

[02:07] <MasterDuke> yeah. i've never used it before, it hasn't been the easiest stuff to understand

[02:07] <timotimo> but yeah ... got no clue :(

[02:07] <timotimo> it's actively resisting being understood, clearly.

[02:08] <timotimo> anyway, i haven't touched the *Reader or *Visitor stuff of ASM at all

[02:08] <timotimo> i'll be off to bed now :|

[02:08] <timotimo> but i wish you the best of luck

[02:08] <MasterDuke> .tell psch still having the same problem, any suggestions? this is the problem line: https://github.com/MasterDuke17/nqp/blob/source_file_line_numbers_on_jvm/src/vm/jvm/runtime/org/perl6/nqp/runtime/ExceptionHandling.java#L331

[02:08] <yoleaux2> MasterDuke: I'll pass your message to psch.

[02:09] <MasterDuke> timotimo: thanks, later...

[04:35] <samcv> perl6.wtf uses roast right?

[04:36] <timotimo> that's correct

[04:36] <samcv> ok cool :)

[04:37] <timotimo> be aware: it's not unfallible

[04:37] <timotimo> like, it seems to say there's not a single test for subbuf-rw

[04:37] <timotimo> ... i didn't actually check

[04:37] <timotimo> Generated on 2016-10-07 - so it's one and a half months out of date

[04:40] <timotimo> it takes exceedingly long to generate, i suppose

[05:29] <viki> timotimo: actually, last time I ran the script, it failed because it couldn't merge master moarvm on top of the branch with coverage support

[05:36] <psch> .

[05:36] <yoleaux2> 02:08Z <MasterDuke> psch: still having the same problem, any suggestions? this is the problem line: https://github.com/MasterDuke17/nqp/blob/source_file_line_numbers_on_jvm/src/vm/jvm/runtime/org/perl6/nqp/runtime/ExceptionHandling.java#L331

[05:38] <MasterDuke> psch: i tried upgrading asm to 4.2 and 5.1, but got the exact same behavior

[05:38] <psch> MasterDuke: i'm trying the other accept candidate on ClassVisitor right now

[05:38] <psch> "Any attribute whose type is not equal to the type of one the prototypes will not be parsed"

[05:39] <psch> MasterDuke: not sure that will help, but yeah

[05:39] <MasterDuke> "cr.accept(cv, new Attribute[] { new CommentAttribute("") }, 0);" from the asm docs?

[05:39] <psch> yeah

[05:40] <psch> well, with the right class name :)

[05:41] <timotimo> viki: probably because of ops not really being mergable by git itself

[05:41] <MasterDuke> yep. i think i tried that before and it didn't seem to work, but that was a while back in my experimenting

[05:43] <psch> well, the asm user guide has quite a bit of "attributes are hard and clunky to use"

[05:43] <psch> so maybe using normal annotations -- or just stuffing a String where just the line number used to be -- is the cleaner solution

[05:44] <MasterDuke> well, it did work when it loaded the class file from the local directory

[05:45] <MasterDuke> yeah, annotations might be better overall, but i think they'd still have the same problem

[05:46] <MasterDuke> that is, you'd still need to create a ClassReader+Visitor, and that's where it's failing

[05:46] <psch> no, it's not

[05:46] <psch> it's failing during reading, not during creation

[05:48] <psch> at least i'm fairly sure about that, because that's what AIOOB usually means

[05:49] <MasterDuke> but then how come it works when using the "String classname" candidate when the class is extracted out of the jar and in the CWD?

[05:51] <psch> well, stepping through it with jdb it does find the resource

[05:52] <psch> main[1] dump info.compUnit.getClass().getClassLoader().getResourceAsStream("3CE0973F925D7507D9B062C5E98B7D9871761704")

[05:52] <psch> info.compUnit.getClass().getClassLoader().getResourceAsStream("3CE0973F925D7507D9B062C5E98B7D9871761704") = {

[05:52] <psch> buf: instance of byte[12827177] (id=1887)

[05:52] <psch> so the .accept doesn't do the right thing

[05:53] <MasterDuke> i also tried creating a byte[] manually and using that candidate, exact same thing

[05:58] <psch> yeah, sure would be nice if asm had reasonable error messages :/

[06:01] <psch> aha (?)

[06:02] <MasterDuke> https://intellij-support.jetbrains.com/hc/en-us/community/posts/206240519--Solved-WebServer-startup-fails-with-ArrayIndexOutOfBounds-Exception

[06:02] <psch> so, apparently readClass calls readUTF8 inside the ClassReader

[06:02] <MasterDuke> ^^^ is that any help?

[06:02] <psch> there we read an unsigned short

[06:02] <psch> and *that* is out of bounds of the constant pool

[06:02] <psch> ...probably not

[06:02] <psch> but i'll look

[06:03] <psch> "I had an entry "/home" which also got scanned for classes. This is where this error occured." from the link

[06:03] <psch> that does look completely unrelated

[06:04] <MasterDuke> thought so, but grasping at straws

[06:04] <psch> hmm

[06:05] <psch> so, yeah

[06:05] <psch> readUTF8 looks into the CONSTANT_Utf8 items

[06:05] <psch> and apparently there isn't 40k of those

[06:06] <psch> well, the 'SETTING::*' strings are in the class file...

[06:07] <psch> maybe the ClassReader messes something else up and doesn't read the Attributes correctly first..?

[06:07] <psch> like, i'm guessing that custom attributes don't really go into the normal constant pool

[06:07] <psch> 'cause we'd get "class file to large", just from adding all the filenames

[06:08] <psch> like, we've been scraping on the upper limit of the constant pool for quite a while

[06:08] <psch> soo i'd guess it's really just looking at the wrong thing, apparently

[06:11] <psch> well, i'm pretty much out of ideas

[06:11] <MasterDuke> hmm, i saw some SO Q&As that mentioned manually walking the classpath and opening jars and looking inside them (or something like that). think that's required?

[06:11] <psch> it shouldn't be

[06:11] <psch> ...unless the ClassLoader we're using throws custom attributes away

[06:11] <psch> which is possible, i suppose?

[06:12] <MasterDuke> well, i used the same one before when it worked

[06:13] <psch> right, except in one instance you're loading from CLASSPATH and in the other you're loading what has been loaded to instantiate the class

[06:13] <psch> ...i think

[06:13] <MasterDuke> ohhhhh

[06:13] <psch> i'm a bit fuzzy on what exactly getResourceAsStream does there

[06:14] <psch> i'm honestly not really sure that makes sense

[06:15] <MasterDuke> i mean it sounds plausible, but my Java-fu is weak

[06:17] <MasterDuke> looks like arnsholt wrote ./src/vm/jvm/runtime/org/perl6/nqp/jast2bc/JASTCompiler.java, maybe he'll have a suggestion

[06:20] <psch> maybe, yeah

[06:21] <MasterDuke> i just built the version that works when the class is in CWD, maybe i'll try using jdb to see it's doing

[06:23] <MasterDuke> because i do like the look of "in throw (SETTING::src/core/Exception.pm:64)"

[06:24] <psch> http://wiki.jvmlangsummit.com/pdf/23_Kuleshov_asm.pdf looks like you're doing exactly the right thing, anyway

[06:24] <psch> pages 13-16 is what i'm looking at fwiw

[06:27] <MasterDuke> that's reassuring

[06:30] <MasterDuke> btw, how did you run jdb?

[06:31] <psch> perl6-jdb-server

[06:31] <psch> it starts suspended, so you need to run 'jdb -attach 8000 -sourcepath $paths-seperated-by-colons' and "run" then

[06:32] <psch> "src/vm/jvm/runtime/:nqp/src/vm/jvm/runtime/:src/:nqp/src/:.:nqp/" is my $paths-seperated-by-colons, when running -attach from the rakudo repo root

[06:35] <MasterDuke> perl6-jdb-server with my -e '...'?

[06:36] <psch> whatever you like, actually

[06:36] <psch> perl6-jdb-server is a drop-in replacement for perl6-j

[06:36] <psch> it just starts a jdb session as well and suspends it before execution starts

[06:40] <MasterDuke> it's past sleep time for me, i'll have to pick this up later. thanks for the help

[06:42] <MasterDuke> .ask arnsholt if you don't mind backlogging, psch and i are running into some ASM troubles and git suggests you might be able to help out

[06:42] <yoleaux2> MasterDuke: I'll pass your message to arnsholt.

[07:03] <moritz> lizmat++ # typo fix

[07:03] <yoleaux2> 20 Nov 2016 22:51Z <lizmat> moritz: in blogpost: "and nothing as fixed"   s/as/was/ ?

[07:29] <[TuxCM]> This is Rakudo version 2016.11-15-g014d4cf built on MoarVM version 2016.11-8-gb582aeb

[07:29] <[TuxCM]> csv-ip5xs        3.120

[07:29] <[TuxCM]> test            13.836

[07:29] <[TuxCM]> test-t           6.430

[07:29] <[TuxCM]> csv-parser      14.789

[11:04] <lizmat> Files=1154, Tests=53764, 210 wallclock secs (12.89 usr  3.76 sys + 1280.05 cusr 116.85 csys = 1413.55 CPU)

[12:25] <viki> .tell TimToady never mind. japhb said the reason is mostly due to val() being done prior to addition of fancy pants minus ( https://irclog.perlgeek.de/perl6-dev/2016-11-18#i_13587383 )

[12:25] <yoleaux2> viki: I'll pass your message to TimToady.

[12:27] <lizmat> re. val() and MAIN: perhaps we *do* need a EnumStr type and val processing of strings looking like enums?

[12:27] <lizmat> that would make it at least consistent across the board ?

[12:27] <nine> lizmat: I've had similar thoughts, too

[12:28] <viki> The idea occured to me, but the problem I see is it makes code sensitive to allomorphs flaky

[12:28] <viki> m: my $set = set <meows>; say $set{'meows'}

[12:28] <camelia> rakudo-moar 014d4c: OUTPUT«True␤»

[12:28] <viki> ^ now that will break the second I happen to have an enum "meows" in the scope, because it'll now be an EnumStr

[12:29] <masak> that is a really good point

[12:30] <lizmat> but wouldn't $set<meows> then do work ?

[12:31] <viki> Yes, but what if 'meows' is a variable, coming from elsewhere?

[12:31] <lizmat> yeah, treu

[12:31] <lizmat> true

[12:51] <lizmat> .tell TimToady any thoughts on val() also processing enums in scope ?

[12:51] <yoleaux2> lizmat: I'll pass your message to TimToady.

[12:54] <lizmat> .tell TimToady aka: having val("True") returning Bool::True

[12:54] <yoleaux2> lizmat: I'll pass your message to TimToady.

[13:07] <arnsholt> That sounds kind of icky. For that to work, val() would have to go groping in its caller's lexical environment

[13:07] <yoleaux2> 06:42Z <MasterDuke> arnsholt: if you don't mind backlogging, psch and i are running into some ASM troubles and git suggests you might be able to help out

[13:09] <lizmat> arnsholt: it would be as simple as ::("True")

[13:11] <arnsholt> Sure, that'd work for enums defined in the setting

[13:11] <arnsholt> But if you have an enum defined in user code, that's not in val's lexical environment

[13:12] <arnsholt> Ohnoes, ASM! That's a long time ago...

[13:12] * arnsholt goes scrollbacking

[13:12] <lizmat> m: enum E <A B C>; dd ::("A")   # arnsholt

[13:12] <camelia> rakudo-moar 014d4c: OUTPUT«E::A␤»

[13:12] <lizmat> ah, in val() lexical env

[13:13] <lizmat> hmmm....

[13:16] <lizmat> m: sub a($a) { ::($a) }; sub b { enum E <A B C>; dd a "A"}; b   # still seems to work outside of lexical env, arnsholt ?

[13:16] <camelia> rakudo-moar 014d4c: OUTPUT«E::A␤»

[13:16] <lizmat> ah, that's because enums are our by default

[13:16] <jnthn> iirc enum is our-scoped by default

[13:16] <yoleaux2> 20 Nov 2016 23:21Z <lizmat> jnthn: something needs fixing in the bowels: https://github.com/rakudo/rakudo/commit/014d4cff2f

[13:16] <lizmat> :-)

[13:17] <jnthn> I don't think that one is too far up the bowels

[13:17] <arnsholt> psch, MasterDuke: It's not quite clear to me what exactly is going wrong. Do you have a gist or something? (Also, the JAST compiler is mostly an integration of code jnthn originally wrote which was external to the compiler)

[13:17] <jnthn> I think in BOOTSTRAP.nqp you'll find it registering the int/num ref types and it's probably copy/paste-tweak a line or two

[13:18] <arnsholt> Oh, I thought enums were lexical. In that case I guess it'll be less icky

[13:18] <lizmat> jnthn: will look

[13:18] <jnthn> arnsholt: Well, they are if you stick a "my" on 'em

[13:18] <psch> arnsholt: afaiu, a ClassVisitor over an InputStream/byte[] cannot find the CONSTANT_Utf8 pool correctly, in comparison to a ClassVisitor over a .class file from the filesystem

[13:18] <psch> arnsholt: mind though that the behavior stays consistent over asm 4.1, 4.2, 5.0, so it's unlikely to be an actual bug in their code

[13:19] <arnsholt> jnthn: True, true. Then I guess the question is what would val() do in that case

[13:19] <arnsholt> psch: Weird. So where does the InputStream come from?

[13:19] <psch> arnsholt: https://github.com/MasterDuke17/nqp/blob/source_file_line_numbers_on_jvm/src/vm/jvm/runtime/org/perl6/nqp/runtime/ExceptionHandling.java#L331 throws ArrayIndexOutOfBoundsException

[13:20] <psch> arnsholt: i dug into the asm source, and that's an access onto a String[] that gets populated with CONSTANT_Utf8

[13:21] <psch> arnsholt: https://github.com/MasterDuke17/nqp/blob/source_file_line_numbers_on_jvm/src/vm/jvm/runtime/org/perl6/nqp/jast2bc/JASTCompiler.java#L291 is where we write the Attribute, fwiw

[13:21] <arnsholt> Never encountered that stuff, I'm afraid

[13:24] <psch> i don't think we can annotate java methods with different source files, can we?

[13:24] <psch> as in, a SourceFileAnnotation is actually classfile-scoped

[13:24] <arnsholt> I haven't a clue, sorry

[13:25] <psch> 'cause that's what i'm thinking is more sensible in the end.  the asm user guide (paraphrased) says Attributes are weird, and Annotations are easier, so maybe we can coopt an existing Annotation instead...

[13:27] <MasterDuke> the builtin SourceFile attribute is once per class, so won't work since we have a single giant class

[13:28] <MasterDuke> but maybe there's an Annotation that would work

[13:28] <MasterDuke> https://irclog.perlgeek.de/perl6-dev/2016-11-19#i_13595901

[13:29] <MasterDuke> https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.10

[13:36] <MasterDuke> jnthn: looks like arnsholt passed the blame on to you. any thoughts re the AIOOBE with a ClassVisitor over an InputStream?

[13:41] <jnthn> AIOOBE could be anything

[13:41] <jnthn> It generally means "you called/mis-matched methods"

[13:41] <jnthn> I've had it blow up that way when leaving too many things on the stack, iirc

[13:41] <jnthn> Just crappy error reporting on ASM's part :(

[13:43] <dalek> rakudo/nom: 6d726f8 | lizmat++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[13:43] <dalek> rakudo/nom: Hook up native shaped str arrays

[13:43] <dalek> rakudo/nom:

[13:43] <dalek> rakudo/nom: jnthn++ for the pointer

[13:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6d726f8763

[14:28] <lizmat> afk&

[14:41] <FROGGS> o/

[14:42] <timotimo> yo

[15:22] <dalek> rakudo/nom: cb9df2b | (Zoffix Znet)++ | src/core/allomorphs.pm:

[15:22] <dalek> rakudo/nom: Teach val() to handle U+2212 minus

[15:22] <dalek> rakudo/nom:

[15:22] <dalek> rakudo/nom: Includes handling in forms as −42, 42e−72, and 42−72i

[15:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cb9df2bd40

[15:24] <dalek> roast: d904753 | (Zoffix Znet)++ | S32-str/numeric.t:

[15:24] <dalek> roast: Test stringification of numerals with U+2212 minus in them

[15:24] <dalek> roast: review: https://github.com/perl6/roast/commit/d904753e3b

[15:25] <viki> eeeehhhh.... s/stringification/parsing from string/;

[15:34] <timotimo> unstringification, then?

[15:36] <viki> Precicely :)

[15:36] * japhb wishes it was Sunday, not Monday ... still in the mood for personal hacking

[15:37] <viki> It's not Sunday!?

[15:37] <viki> OH CRAP I FORGOT TO GO WORK!!

[15:37] * viki giggles

[15:37] <timotimo> the bad thing about sundays is that stores don't sell you stuff

[15:37] <timotimo> i much prefer saturdays for that reason

[15:37] <jnthn> Many of them here actually do.

[15:37] <viki> timotimo: what country is that at?

[15:37] <timotimo> germany

[15:38] <psch> stores here have open from 9 am till 12 am on sundays i think

[15:38] <timotimo> you can go to gas stations and get stuff there, but the prices are pretty steep

[15:38] <psch> which is kinda sorta like not open

[15:38] <viki> You can get stuff here any day of the week. But I dislike national holidays for that same reason.

[15:39] <timotimo> mhm

[15:39] <jnthn> I used to live walking distance to Austria. First time I took a stroll there on a Sunday, I quickly understood I would not be getting a snack/drink there to help the walk back. :)

[15:40] <japhb> (day of week discrimination)--

[15:41] <viki> Thou shall not buy snaks on a Sabbath

[15:41] <ilmari> how about snakes?

[15:42] <perlpilot> That's just one of the older forms of social engineering.   Take a day of rest, don't do anything ... no one else will be doing anything either.

[15:45] <viki> speaking of days off...

[15:45] * viki goes back to playing video games and eating cookies

[15:46] <DrForr> And don't buy them on planes, definitely.

[17:24] <dalek> nqp: b45f0e3 | (Pawel Murias)++ | src/vm/js/RegexCompiler.nqp:

[17:24] <dalek> nqp: [js] Get $!cstack from a cursor correctly and prepare for a VMArray being stored there.

[17:24] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b45f0e3bc3

[17:24] <dalek> nqp: 62f0624 | (Pawel Murias)++ | src/vm/js/nqp-runtime/reprs.js:

[17:24] <dalek> nqp: [js] Clone VMArrays correctly.

[18:02] <dalek> nqp: 2452663 | (Pawel Murias)++ | src/vm/js/nqp-runtime/runtime.js:

[18:02] <dalek> nqp: [js] Handle more things returned from .Num when numifying.

[18:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/24526632af

[18:02] <dalek> nqp: bc6f14a | (Pawel Murias)++ | src/vm/js/Compiler.nqp:

[18:02] <dalek> nqp: [js] Fix bug.

[18:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bc6f14a9d8

[19:51] <dalek> rakudo/nom: bfe89a5 | lizmat++ | / (2 files):

[19:51] <dalek> rakudo/nom: shaped(int|num|str)array.AT-POS at least 15% faster

[19:51] <dalek> rakudo/nom:

[19:51] <dalek> rakudo/nom: By rewriting in nqp ops: please note there is no optimization for

[19:51] <dalek> rakudo/nom: 1/2/3dimmed native shaped arrays yet

[19:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bfe89a5f9b

[20:00] <dalek> rakudo/nom: e0a415f | (Zoffix Znet)++ | src/core/Str.pm:

[20:00] <dalek> rakudo/nom: Make prefix:<~> actually call .Str on an item

[20:00] <dalek> rakudo/nom:

[20:00] <dalek> rakudo/nom: This fixes the issue that using ~ does not coerce an allomorph into its Str

[20:00] <dalek> rakudo/nom: component. This is in contrast to prefix<+>, which does.

[20:00] <dalek> rakudo/nom:

[20:00] <dalek> rakudo/nom: Remove return type constraint, since we don't know what .Str would return

[20:00] <dalek> rakudo/nom: on custom Str subclasses.

[20:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e0a415f453

[20:00] <dalek> rakudo/nom: bd42363 | (Zoffix Znet)++ | src/core/IO/ArgFiles.pm:

[20:00] <dalek> rakudo/nom: Fix incorrect $*ARGFILES.lines() limit counter

[20:00] <dalek> rakudo/nom:

[20:00] <dalek> rakudo/nom: Patch by lucasb++

[20:00] <dalek> rakudo/nom:

[20:01] <viki> https://github.com/rakudo/rakudo/commit/bd4236359c9150e4490d86275b3c2629b6466566

[20:14] <dalek> roast: c84496e | (Zoffix Znet)++ | S16-filehandles/argfiles.t:

[20:14] <dalek> roast: Test $*ARGFILES.lines($limit) works across files

[20:14] <dalek> roast:

[20:14] <dalek> roast: Test for fix in commit

[20:14] <dalek> roast: https://github.com/rakudo/rakudo/commit/bd4236359c9150e4490d86275b3c2629b6466566

[20:14] <dalek> roast: review: https://github.com/perl6/roast/commit/c84496ea30

[20:18] <dalek> roast: e7adb53 | (Zoffix Znet)++ | S02-literals/allomorphic.t:

[20:18] <dalek> roast: Test prefix:<~> coerces allomorphs to Str

[20:18] <dalek> roast:

[20:18] <dalek> roast: https://irclog.perlgeek.de/perl6/2016-11-21#i_13606506

[20:18] <dalek> roast:

[20:18] <dalek> roast: Fixed in https://github.com/rakudo/rakudo/commit/e0a415f453

[20:18] <dalek> roast: review: https://github.com/perl6/roast/commit/e7adb53d18

[21:50] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2016/11/21/2016-47-perl-6-入门/

[21:51] <cog_> lizmat++

[21:54] <vendethiel> lizmat++ :)

[22:05] <jnthn> lizmat++

[22:05] <jnthn> A nice week :)

[22:10] <lizmat> indeed  :-)

[22:19] <[Coke]> https://www.learningperl6.com/2016/11/16/quick-tip-1-user-defined-infinite-sequences/ - "this site can't be reached" -- my restrictive work proxy, probably.

[22:20] <perlpilot> aye, it works here.

[22:35] <lizmat> [Coke]: works for me too  :-)

[22:57] <dalek> rakudo/nom: ecc202e | lizmat++ | / (2 files):

[22:57] <dalek> rakudo/nom: shaped(int|num|str)array.ASSIGN-POS at least 10% faster

[22:57] <dalek> rakudo/nom:

[22:57] <dalek> rakudo/nom: By rewriting in nqp ops: please note there is no optimization for

[22:57] <dalek> rakudo/nom: 1/2/3dimmed native shaped arrays yet

[22:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ecc202e0d6

[22:58] <|Tux|> .tell FROGGS  http://hpux.connect.org.uk only ships 32bit objects :( :( - I will install libffi by hand

[22:58] <yoleaux2> |Tux|: I'll pass your message to FROGGS.
