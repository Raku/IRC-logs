[00:04] <timotimo> now i finally had the opportunity to read through the post as well; jnthn++ :)

[06:23] * lizmat drops a pin from http://act.yapc.eu/ye2016/training-jeff.html

[06:51] <TimToady> thought you'd learn Perl 6, eh?

[06:57] <lizmat> yeah  :-)   finally  :-)

[07:04] <dalek> rakudo/nom: 157b46e | lizmat++ | src/core/Any-iterable-methods.pm:

[07:04] <dalek> rakudo/nom: Fix for RT #129044

[07:04] <dalek> rakudo/nom:

[07:04] <dalek> rakudo/nom: If the Regex candidate needs to use .ACCEPTS, then it basically is

[07:04] <dalek> rakudo/nom: the same as the Mu candidate.  However, since we also have a Callable

[07:04] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129044

[07:04] <dalek> rakudo/nom: candidate, and Regex.isa(Callable), that doesn't work.  So we abstract

[07:04] <dalek> rakudo/nom: the Mu candidate logic into two private methods, and call these from

[07:04] <dalek> rakudo/nom: both the Regex as well as the Mu candidate.

[07:04] <dalek> rakudo/nom:

[07:04] <dalek> rakudo/nom: Also micro-optimize the :end versions, because assignment to $_ is

[07:04] <dalek> rakudo/nom: not needed for every iteration.

[07:26] <dalek> rakudo/nom: 5a79516 | lizmat++ | src/core/Any-iterable-methods.pm:

[07:26] <dalek> rakudo/nom: Fix .grep for RT #129044 as well

[07:26] <dalek> rakudo/nom:

[07:26] <dalek> rakudo/nom: Same problem, same solution

[07:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5a7951661e

[07:26] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129044

[08:16] <dalek> rakudo/nom: 9f50553 | lizmat++ | src/core/Baggy.pm:

[08:16] <dalek> rakudo/nom: Make Baggy eqv Baggy at least 10x faster

[08:16] <dalek> rakudo/nom:

[08:16] <dalek> rakudo/nom: For a 3 element bag comparing successfully with another 3 element bag

[08:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9f5055315d

[08:18] <TheLemonMan> so much speed!

[08:29] <TheLemonMan> lizmat, I sent a PR with some tests for RT#129044 :)

[08:29] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129044

[08:32] <dalek> roast: 4317d58 | LemonBoy++ | S02-types/list.t:

[08:32] <dalek> roast: Add tests for RT#129044.

[08:32] <dalek> roast: review: https://github.com/perl6/roast/commit/4317d5826a

[08:32] <dalek> roast: dca884a | lizmat++ | S02-types/list.t:

[08:32] <dalek> roast: Merge pull request #145 from LemonBoy/rt129044

[08:32] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129044

[08:32] <dalek> roast:

[08:32] <dalek> roast: Add tests for RT#129044.

[08:32] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129044

[08:32] <dalek> roast: review: https://github.com/perl6/roast/commit/dca884a53b

[08:34] <dalek> rakudo/nom: 84e889e | moritz++ | CONTRIBUTING.md:

[08:34] <dalek> rakudo/nom: Initial contribution guide for Rakudo

[08:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/84e889e921

[08:36] <moritz> the commit above should document current practise, not create new policy

[08:37] <moritz> comments / improvements welcome

[08:37] <TheLemonMan> m: class Foo is ::("Str") { };

[08:37] <camelia> rakudo-moar 9f5055: OUTPUT«===SORRY!===␤This type cannot unbox to a native string: P6opaque, QAST::Want␤»

[08:37] <TheLemonMan> looks pretty bad as an error message :\ this used (not) to work though

[08:39] <moritz> agreed

[08:39] <dalek> rakudo/nom: 2181f7e | moritz++ | / (2 files):

[08:39] <dalek> rakudo/nom: Link contribution guide from README

[08:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2181f7ec00

[08:55] <lizmat> jnthn TimToady re === and .WHICH

[08:56] <lizmat> I wonder whether it wouldn't be easier to have some kind of .IDENTICAL method, much like .ACCEPTS

[08:56] <lizmat> which at least would allow saner identity tests

[08:56] <lizmat> with the Any.IDENTICAL($other) { self.WHICH eq $other.WHICH }

[08:57] <lizmat> as a fallback

[08:57] <lizmat> (possibly with Mu.IDENTICAL)

[08:57] <lizmat> was such a thing ever considered ?

[09:24] <lizmat> lunch&

[09:32] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Make Baggy eqv Baggy at least 10x faster

[09:32] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/154383300 https://github.com/rakudo/rakudo/compare/5a7951661ea8...9f5055315d00

[09:32] <buggable> ✓ [travis build above] One job failed due to the timeout. No other failures.

[09:59] <moritz> do we have a security contact address already?

[10:00] <moritz> if not, I see two options: ask the RT admins to give us a queue that's not world-readable by default, or go somewhere else for a private mailing list

[10:01] <timotimo> also, how do we manage security-critical releases of updates?

[10:02] <moritz> we... make them? :-)

[10:02] <timotimo> but but but releases are work! :P

[10:03] <timotimo> do we also release updates to older rakudos?

[10:03] <jnthn> I thought I documented this somewhere once :P

[10:03] <timotimo> no timo remembers anything

[10:04] <timotimo> i do remember a pretty good document about ... things

[10:04] <moritz> if anybody remembers where that document is, that would be great

[10:04] <timotimo> was probably a gist?

[10:05] <moritz> then I can link it from rakudo.org/about and from https://bestpractices.coreinfrastructure.org/projects/313

[10:06] <jnthn> Yeah, I barely had the energy to write the doc at the time. I figured since folks were asking after it so much back then they'd take care of its posterity :P

[10:06] <ShimmerFairy> timotimo: I'm sure any security-critical releases are handled with a healthy dose of "OH GOD NO!!!"  :P

[10:06] <timotimo> :)

[10:08] <jnthn> https://gist.github.com/jnthn/c10742f9d51da80226fa

[10:08] <timotimo> nine: do we have a good plan for "resources that are allowed to be missing"? because the GTK::Simple module has .dll files that it might download from the web, but that's obviously not useful on linux or mac. at the moment, i just touch the relevant paths so that empty files get installed under those names

[10:08] <timotimo> ah, it was a secret gist, that's why i didn't find it when browsing jnthn's gists

[10:09] <jnthn> Note that we didn't declare any releases LTS yet :)

[10:09] <timotimo> indeed

[10:09] <timotimo> seems like we're never satisfied withour releases :P

[10:10] <ShimmerFairy> timotimo: without knowing what part of the system you're talking about, I'd think that problem is more "how do we specify platform-specific deps?", perhaps

[10:10] <moritz> TL;DR version: for security bugs, we make a bugfix release of the latest release, and one for every LTS release of the last 12 months; right?

[10:11] <timotimo> ShimmerFairy: that's also a question, but for quality-of-life, we're also supplying the actual platform-specific deps directly

[10:11] <jnthn> moritz: One for every LTS release *still in support* as far as I remember; depends how long we declared support.

[10:11] <moritz> ok

[10:11] <jnthn> moritz: The point being that our "Long Term" will become increasingly long with time, as we get better at doing that. :)

[10:12] <moritz> but we don't have a security submission guideline yet

[10:12] <moritz> so, what do you prefer? RT or private mailinglist?

[10:12] <jnthn> I believe it's a separate RT queue for Perl 5 and I think that works well, in that it collects discussion and it can be made public later by moving it to the public queue at an appropriate time (after disclosure)

[10:13] <moritz> ok, then I'll contact the RT admins

[10:13] <jnthn> So I'd nab that approach :)

[10:13] <moritz> who should have access to that queue? Everybody with perl6 bug admin? or more restricted?

[10:14] <moritz> erm, everybody with rw access to the perl6 queue, not bug admin

[10:15] <timotimo> should we have private github repos for security-related changes, or will we just push patches back and forth on the RT?

[10:16] <timotimo> i could imagine it's very easy to fat-finger an accidental push of a security-critical patch to the regular repositories

[10:18] <moritz> timotimo: I'd wait with that until it becomes a necessity

[10:18] <moritz> timotimo: I don't think too many people will collaborate on the first security patches

[10:18] <timotimo> when a security-related thing hits us, we'll look like a group of ants that just had its stone lifted from above it :P

[10:18] <timotimo> fair enough

[10:18] <timotimo> security patches are usually between one and ten lines

[10:18] <jnthn> moritz: Perhaps more restricted in that I'm pretty sure there'll be people with perl6 bug queue access from way back who aren't really involved any more

[10:18] <ShimmerFairy> I get the feeling security updates would often fall more on the "wait, what's wrong?" side of discussion than "wait, is this patch right?" :)

[10:19] <moritz> having an explicit policy for security things already puts as ahead of many projects :-)

[10:19] <moritz> ShimmerFairy: aye

[10:21] <moritz> jnthn: then my approach would be to go through the last rakudo, nqp and moarvm contributors and include active contributors

[10:21] <moritz> and use the same queue for all three projects

[10:22] <ShimmerFairy> For queue access, I'd prefer something more restricted than "logged in", at the least; ideally only people who work on security issues should need to know about them :)

[10:22] <ShimmerFairy> (does RT support the concept of a "write-only" queue? O.o)

[10:22] <jnthn> moritz: Seems reasonable to me

[10:22] <ShimmerFairy> "write-only" except for your own bugs, that is

[10:23] <moritz> ShimmerFairy: all queues you can't read are write-only, because you can always send mails to [email@hidden.address]
[10:24] <moritz> in general, I think that read-access to security bugs is overrated. Some projects even use world-readable security bug reports

[10:24] <ShimmerFairy> oh, cool. So the security queue would end up being (effectively) a "only see what you've reported" type thing, then? And how about submitting bugs via the web interface, would that work?

[10:25] <moritz> ShimmerFairy: no, it would be that you submit the bug, can't read it, but receive notifications if sombody CC's you

[10:26] <ShimmerFairy> so (effectively) then means "if you keep the email thread, and reporters select the right reply option" :)

[10:26] <moritz> [Coke]: you seem to be the primary Perl 6 bugadmin contact. Do you want to be involved in the creation of a perl6-security queue in RT?

[10:27] <ShimmerFairy> I can see the argument for world-readability, letting people know their system might be vulnerable in the interim, though ideally we would then have a more proactive way of letting people know about security issues/updates. Not sure how that'd be done though.

[10:27] <timotimo> the gold standard is responsible disclosure

[10:28] <ShimmerFairy> (something like gentoo's 'eselect news'?)

[10:28] <timotimo> where the news about the vulnerability drop at the same time the patches get available

[10:28] <ShimmerFairy> Yeah, I personally agree with the idea that you don't mention it until the problem can be fixed by suddenly-anxious people looking to update :)

[10:29] <timotimo> you don't generally want to give 0days out to everybody before the patch

[10:37] <ShimmerFairy> I dunno, sometimes people want a little excitement in their life :V

[12:13] <mst> moritz: hey, people keep talking about you having done more on the Configure and Makefile code than most

[12:14] <mst> moritz: I'm currently breaking it a lot; patches will not immedaitely be forthcoming but a set of expedient ways to make the things I need to work work will do and I'll want to bring them back upstream ASAP to avoid keeping my hacks

[12:14] <moritz> mst: ok, good to know; I myself don't have big changes planned atm

[12:14] <mst> but mostly, I wanted to state for the record, when I refer to this as amateur hour while complaining about it, this doesn't mean it isn't well-factored-sometimes amateur hour

[12:14] <mst> just a disaster of assumptions and lack of years of pain doing toolchain stuff

[12:15] <mst> it doesn't make me want to burn it to the ground and start again

[12:15] <mst> which usually happens within the first ten minutes when autocrack is involved

[12:15] <mst> just with toolchain hat on, I hate everything even more than usual :D

[12:15] <moritz> mst: fwiw I didn't come up with most of the system; what I did was allowing builds with several backends in the same directory

[12:15] <nine> mst: lexical module loading will be a bit more involved than expected. And there's some tough questions coming up...

[12:16] <mst> moritz: ok, who do I need to repeat that to?

[12:16] <moritz> mst: nobody, I think

[12:16] * mst wants to make sure he can rant about this, and improve it, and not make anybody feel like their puppy's been kicked

[12:17] <mst> nine: yeah, well, it's one of the most important and ground breaking features of perl6's design as advertised over the years, of course it wasn't going to be -simple-

[12:17] <mst> if it was simple, I'd've done a Devel::Decalre grade hack to demonstrate how to do it and then baited p5p until they did it properly

[12:18] <nine> It's not _that_ hard to get rakudo to import the name into the current lexpad instead of GLOBAL. But fun starts once you consider A and B both using C but only A also using C::D.

[12:19] <nine> D is located in C's nested stash. And both A and B should really see the same C but only A should also see C::D

[12:19] <mst> A and B should only see the same C if their ver+authority+etc. specs both resolve to the same module

[12:20] <mst> but surely either C exported C::D or it doesn't

[12:20] <mst> so either both see it or neither

[12:20] <nine> This has nothing to do with exporting. That's why I talk about lexical module loading while module importing would be more precise. But that's ambiguous and even more confusing...

[12:21] <nine> Well let's say if both A and B just "use C;" both really should see the same unit class C; Otherwise shoving C objects back and forth will be troublesome

[12:22] * nine learned a lot about the precise difference between packages, stashes and lexpads while playing around with this

[12:26] <mst> ok, when I said exporting, I meant 'symbols that appear in lexical scope after 'use X''

[12:26] <mst> which will be X, any exports of X, and I guess any subnamespaces of X marked as externally visible

[12:27] <mst> I dunno, personally I'd 'use C::D' explicitly if I wanted that

[12:27] <dalek> rakudo/nom: aaf7c3c | lizmat++ | src/core/Exception.pm:

[12:27] <dalek> rakudo/nom: Initial support for error reporting plugins

[12:27] <dalek> rakudo/nom:

[12:27] <dalek> rakudo/nom: This attempts to address RT #128983 .  Whenever an error is to be

[12:27] <dalek> rakudo/nom: reported, the RAKUDO_EXCEPTIONS_HANDLER environment variable is

[12:27] <dalek> rakudo/nom: checked: if it contains something, it is considered to be the name

[12:27] <dalek> rakudo/nom: of a class extending the Exceptions:: class (so "JSON" would refer

[12:27] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128983

[12:27] <dalek> rakudo/nom: to the Exceptions::JSON class).  If such a class exists, then the

[12:27] <dalek> rakudo/nom: method "process" is called in that class, with the Exception object

[12:27] <dalek> rakudo/nom: as the parameter.  That method is than supposed to completely handle

[12:27] <dalek> rakudo/nom: the error reporting.

[12:28] <mst> nine: honestly, if C::D is visible to A, what harm does also making it visible to B do?

[12:28] <lizmat> review: https://github.com/rakudo/rakudo/commit/aaf7c3c

[12:30] <nine> mst: I don't know. That's a bit deeper in language design territory than I'm comfortable with. But yes, even with a visible C::D it's strictly an improvement over visible everything.

[12:31] <nine> The reason for me to take this on is that a simple use Catalyst:from<Perl5> could spam the GLOBAL namespace with 100s of unwanted names causing all sorts of collisions. But getting a Catalyst::Dispatcher and whatnot would be much less of an issue.

[12:31] <mst> nine: personally, I would expect a use lines results to be deterministic based on it, and the lines before it

[12:31] <mst> nine: trying to avoid importing symbols that don't get used later strikes me as ... odd

[12:32] <mst> unless you're tree shaking for a production precomp or something

[12:32] <mst> but we basically -must- load the whole compunit anyway AFAICS

[12:32] <mst> so I don't honestly see that you're not just imagining a problem we don't need to have

[12:33] <nine> Loading Catalyst will end up loading some HTTP::Request module that will collide with a Perl 6 HTTP::Request module needed by some other library your Perl 6 program is using.

[12:33] <nine> And doing web requests in a web environment is not really uncommon :)

[12:34] <lizmat> nine: are you going to be in Cluj or Innsbruck ?

[12:34] <mst> right, the Inline::Perl5 way of deciding what to import is unfit for purpose currently but it was also the stupidest thing that could possibly work

[12:34] <nine> lizmat: both :)

[12:34] <nine> lizmat: arrived in Cluj ~ 2 hours ago

[12:35] <lizmat> cool, then I hope to be able to discuss these subjects f2f soon :-)

[12:35] <mst> nine: btw

[12:36] <mst> C could contain C::D and C::E and only ever make C::D visible right?

[12:37] <mst> nine: YOU ARE NOT IN #yapc

[12:37] <mst> nine: THIS IS AN ERROR

[12:41] <dalek> rakudo/nom: b00e9c4 | moritz++ | CONTRIBUTING.md:

[12:41] <dalek> rakudo/nom: Fix typo, patrickz++

[12:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b00e9c4dcd

[12:42] <NotZoffix> lizmat: what are you thoughts on having this line return only if the .process() method returns a true value? This will allow for use of "passthrough" event handlers. For example, Exception::Rollbar could ship off the exceptions to rollbar.com, and return a false value from the .process method, so regular Rakudo error handling mechanism would continue its thing and display the regular error messages to the user: https://github.co

[12:43] <lizmat> NotZoffix: ack

[12:45] <TheLemonMan> what do you think about emitting a p6init when serializing some unit to mbc form ? it should be the missing step to have runnable moarvm bytecode from the p6 side

[12:46] <jnthn> TheLemonMan: Makes sense, I think. And running it more than once is no problem, I think it guards against that. :)

[12:47] <TheLemonMan> yep, it only registers the rakudo_scalar container once

[12:48] <mst> OK

[12:49] <mst> why is there an nqp-m binary

[12:49] <mst> but rakudo basically completely ignores it except for --show-config

[12:49] <mst> and invokves moar directly

[12:52] <nine> mst: because nqp-m is only a shell script

[12:53] <mst> ajh

[12:53] <jnthn> I don't see why that'd stop the rakudo build process from invoking it... :)

[12:53] <moritz> the performance overhead should be neglible

[12:53] <mst> right, but at that point I think it's the wrong shell script

[12:53] <mst> anyway

[12:53] <mst> that means it totally won't solve this jumblefuck

[12:54] <mst> like THERE IS NOT CONCEPT of nqp::prefix in --showconfig

[12:54] <mst> but I'll fix that later

[12:55] <mst> ugh

[12:55] <mst> the build process *does* invoke it

[12:55] <mst> as well

[13:08] <mst> ALMOST FUCKING THERE

[13:09] <dalek> rakudo/nom: 826d438 | lizmat++ | src/core/Exception.pm:

[13:09] <dalek> rakudo/nom: .process now expected to return Boolean

[13:09] <dalek> rakudo/nom:

[13:09] <dalek> rakudo/nom: To have regular exception processing happening after all, return a

[13:09] <dalek> rakudo/nom: True value.  Suggested by Zoffix++

[13:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/826d438f7a

[13:13] <dalek> roast: 2ab7a1f | lizmat++ | S32-exceptions/misc.t:

[13:13] <dalek> roast: Fix test now that we also have an Exceptions class

[13:13] <dalek> roast: review: https://github.com/perl6/roast/commit/2ab7a1f67d

[13:25] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Initial support for error reporting plugins

[13:25] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/154437892 https://github.com/rakudo/rakudo/compare/2181f7ec00d2...aaf7c3cf5738

[13:25] <buggable> ✓ [travis build above] 2 builds failed. All due to the timeout

[13:28] <TheLemonMan> hmm, at what time the rakudo ops are effectively registered into moarvm ? after a quick test they still aren't there when the outer CompUnit :main (or :load) is hit

[13:34] <[Coke]> (security contact address) I started this process back at Christmas.

[13:38] <[Coke]> moritz: forwarded you the email chain.

[13:38] <[Coke]> ... no I didn't, because your email has changed.

[13:45] <[Coke]> RT: 1367; @LARRY: 17; BUG: 449; BUILD: 9; CONC: 40; DOCS: 1; GLR: 4; JVM: 67; LHF: 1; LTA: 115; MATH: 4; NATIVECALL: 15; NEW: 877; NYI: 89; OSX: 5; PERF: 25; POD: 17; PRECOMP: 12; REGEX: 24; RFC: 41; SEGV: 35; SPESH: 1; STAR: 5; TESTNEEDED: 25; TODO: 10; UNI: 30; UNTAGGED: 394; WEIRD: 3

[13:46] <[Coke]> m: my $f = any(<a b>); say "a" ~~ / $f /; # RT 127106

[13:46] <camelia> rakudo-moar 826d43: OUTPUT«P6opaque: no such attribute '$!pos' in type Cursor when trying to get a value␤  in block <unit> at <tmp> line 1␤␤»

[13:48] <mst> argh

[13:48] <mst> M_LIBPATH apparently means two things

[13:48] * mst sighs

[13:48] * mst crowbars some more

[13:49] <[Coke]> isn't https://rt.perl.org/Ticket/Display.html?id=127906 notabug? isn't | first come first serve?

[13:52] <[Coke]> m: my $a = [1..3],[4..6]; dd $a; #RT #126336

[13:52] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126336

[13:52] <camelia> rakudo-moar 826d43: OUTPUT«WARNINGS for <tmp>:␤Useless use of ".." in expression "4..6" in sink context (line 1)␤Array $a = $[1, 2, 3]␤»

[13:53] <[Coke]> m: my $a = [1,2],[3,4]; dd $a;

[13:53] <camelia> rakudo-moar 826d43: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant integer 4 in sink context (lines 1, 1)␤Useless use of constant integer 3 in sink context (lines 1, 1)␤Array $a = $[1, 2]␤»

[13:58] <[Coke]> got UNTAGGED under 375.

[14:01] <dalek> rakudo/nom: 998e2b7 | moritz++ | CREDITS:

[14:01] <dalek> rakudo/nom: Use different email address in CREDITS

[14:01] <dalek> rakudo/nom:

[14:01] <dalek> rakudo/nom: the old one is bouncing right now

[14:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/998e2b701d

[14:06] <lizmat> afk&

[14:09] <perlpilot> m: "bc" ~~ / ||@(<b bc>) >>/ or say "Failed"; say $/;

[14:09] <camelia> rakudo-moar 826d43: OUTPUT«Failed␤Nil␤»

[14:10] <perlpilot> m: "bc" ~~ / "b" || "bc" >>/ or say "Failed"; say $/;

[14:10] <camelia> rakudo-moar 826d43: OUTPUT«｢b｣␤»

[14:11] <perlpilot> m: "bc" ~~ / "a" || "b" || "bc" >>/ or say "Failed"; say $/;

[14:11] <camelia> rakudo-moar 998e2b: OUTPUT«｢b｣␤»

[14:11] <TimToady> the >> doesn't distribute

[14:12] <TimToady> but the first one looks kinda like a bug

[14:13] <TimToady> m: "bc" ~~ / || < b bc > >>/ or say "Failed"; say $/;

[14:13] <camelia> rakudo-moar 998e2b: OUTPUT«｢bc｣␤»

[14:13] <perlpilot> Aye, I'm just playing with RT#127906   Coke asked if it's notabug.  I think it is

[14:13] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127906

[14:13] <TimToady> the @() should work like <>, I'd think

[14:14] <mst> AUGH

[14:14] <mst> Unhandled exception: Missing or wrong version of dependency 'src/Perl6/Grammar.nqp' (from 'gen/moar/m-main.nqp')

[14:14] <mst> ah COCKS it installed crap into NQP

[14:16] <mst> Couldn't load Rakudo REPL.pm: While looking for '/home/matthewt/tmp/moarl/lib/perl5/x86_64-linux-gnu-thread-multi/Alien/MoarVM/Install/share/nqp/lib/Perl6/BOOTSTRAP.moarvm': no such file or directory

[14:16] <mst> wut

[14:19] <mst> is there some baked in dir for finding things like that?

[14:20] <mst> hmm

[14:24] <mst> augh. ok, one last hacky attempt

[14:27] <mst> aaaaaaaaaaaa

[14:29] <mst> oh gods DAMN IT

[14:31] <jdv79> good to know you're having fun

[14:31] <[Coke]> <rogers>Language</rogers>

[14:32] <mst> src/vm/moar/ModuleLoaderVMConfig.nqp

[14:32] <mst> hardcodes looking for bits of rakudo in the moarvm tree

[14:32] <mst> in spite of moarvm having a --libpath option

[14:33] <timotimo> you might be able to get that path from backendconfig perhaps

[14:33] <mst> no

[14:33] <mst> that's the bug

[14:33] <mst> it uses backendconfig instead of rakudo's final PREFIX

[14:33] <timotimo> oh?

[14:33] <mst> thereby shitting itself

[14:34] <mst> remember I'm trying to do separate clean trees

[14:35] <timotimo> ah, backendconfig comes from what's compiled into moarvm, then?

[14:35] <mst> yes

[14:35] <mst> so if you install rakudo somewhere else

[14:37] <[Coke]> RT: 1367; @LARRY: 17; BOOTSTRAP: 3; BUG: 453; BUILD: 9; CONC: 40; DOCS: 1; GLR: 4; IO: 12; JVM: 67; LHF: 1; LTA: 115; MATH: 6; NATIVECALL: 15; NEW: 874; NYI: 89; OO: 5; OSX: 5; PERF: 26; POD: 17; PRECOMP: 12; REGEX: 28; REPL: 3; RFC: 41; SEGV: 35; SPESH: 1; STAR: 5; TESTNEEDED: 25; TODO: 10; UNI: 30; UNTAGGED: 373; WEIRD: 3

[14:38] <mst> I think it's time to go eat before I throw a chair

[14:40] * [Coke] gives mst a snickers.

[14:40] <TheLemonMan> don't forget to wrap the chair in a try { ... }

[14:41] <timotimo> if you don't wrap it in a try, someone else might catch it for you

[14:41] <jnthn> So long as you don't throw a mug...

[14:42] <timotimo> i can't handle a perl 7 right now

[14:43] <pmurias> nine: if we load perl5 module at use time to import stuff into namespaces how are we going to precompile stuff?

[14:43] <yoleaux2> 22 Aug 2016 12:10Z <jnthn> pmurias: Ah, makes sense (the local register thing, and why a temporary was needed). The leak fix looks good.

[14:43] <mst> oh AAAAAAAAAAAA it tests for blib/ even in install mode

[14:43] <mst> that's what was hiding the problem

[14:44] <mst> right. ok. food.

[14:44] <mst> &

[14:56] <TheLemonMan> correct me if I'm wrong, but rakudo_scalar is registered by p6init which is registered by the BOOTSTRAP which /needs/ rakudo_scalar to be loaded by the ModuleLoader

[14:56] <TheLemonMan> looks like a catch22 situation

[15:56] <perlpilot> [Coke]: When mst is not himself (as in the snickers commercials), who is he?  :)

[16:06] <skids> .oO(Lewis Black?)

[16:23] <b2gills> .oO( Maybe mst always needs a Snickers. That would explain a lot actually )

[16:34] <perlpilot> b2gills++  :)

[16:35] <b2gills> mst += Inf

[16:37] <travis-ci> Rakudo build passed. Moritz Lenz 'Use different email address in CREDITS

[16:37] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/154463205 https://github.com/rakudo/rakudo/compare/826d438f7a3e...998e2b701d9b

[18:44] <[Coke]> https://rt.perl.org/Ticket/Display.html?id=127443 - my take here is that binding to $a throws out the type you had. not sure if that's correct, though. anyone?

[18:45] <[Coke]> m: { my module Cool::Utils; } ; say Cool::Utils

[18:45] <camelia> rakudo-moar 998e2b: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Semicolon form of 'module' without 'unit' is illegal.  You probably want to use 'unit module'␤at <tmp>:1␤------> { my module Cool::Utils;⏏ } ; say Cool::Utils␤»

[18:46] <[Coke]> m: { unit module Cool::Utils; } ; say Cool::Utils

[18:46] <camelia> rakudo-moar 998e2b: OUTPUT«===SORRY!=== Error while compiling <tmp>␤A unit-scoped module definition is not allowed in a subscope;␤Please use the block form.␤at <tmp>:1␤------> { unit module Cool::Utils;⏏ } ; say Cool::Utils␤»

[18:58] <[Coke]> is [OO] a reasonable tag for .WHICH questions?

[18:59] <[Coke]> s/questions/tickets/

[19:03] <[Coke]> .tell TimToady newish sink ticket at RT #128692

[19:03] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128692

[19:03] <yoleaux2> [Coke]: I'll pass your message to TimToady.

[21:09] <dalek> Heuristic branch merge: pushed 90 commits to nqp/better-O by arnsholt

[21:27] <dalek> Heuristic branch merge: pushed 92 commits to rakudo/better-O by arnsholt
