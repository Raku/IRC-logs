[02:11] <llfourn> Zoffix++, I just read your blog post on quibbles, babbles and nibbles etc. Thanks it was really useful.

[02:31] <Zoffix> \o/

[02:59] <llfourn> I'm not sure if I should be using nibbles to other grammars in my own grammars and how to actually do that.

[06:06] <lizmat> Files=1150, Tests=53364, 211 wallclock secs (12.85 usr  3.81 sys + 1288.98 cusr 123.14 csys = 1428.78 CPU)

[06:44] <lizmat> commute&

[07:35] <[Tux]> This is Rakudo version 2016.10-2-gb744de3 built on MoarVM version 2016.10

[07:35] <[Tux]> csv-ip5xs        3.258

[07:35] <[Tux]> test            15.809

[07:35] <[Tux]> test-t           6.979

[07:35] <[Tux]> csv-parser      17.524

[08:57] <nine> Zoffix: ah sorry! That's what I get for making changes while playing Diablo II. Fixed the test.

[08:57] <timotimo> nine: is optimization for Inline::Python going to happen only when you have a nice benchmark for it? :)

[08:58] <dalek> star: 8ea8fb8 | (Steve Mynott)++ | docs/perl6intro.pdf:

[08:58] <dalek> star: import new build of perl6intro pdf

[08:58] <dalek> star: review: https://github.com/rakudo/star/commit/8ea8fb8ede

[09:00] <nine> timotimo: a benchmark will greatly increase the chances of me optimizing ;)

[09:02] <timotimo> i don't have anything yet, just wondering

[09:03] <nine> I guess I'm a gamer at heart. I see a number, I want to improve it ;)

[09:08] <FROGGS> o/

[09:26] <RabidGravy> m: https://gist.github.com/jonathanstowe/6926c2b6093a6a2316488c1363ba6ba3

[09:26] <camelia> rakudo-moar b744de: OUTPUT«IO::Socket::INET is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 5␤␤»

[09:26] <RabidGravy> boo

[09:40] <dalek> star: e017ba0 | (Steve Mynott)++ | tools/star/release-guide.pod:

[09:40] <dalek> star: semi automate the module changelog creation for announcement

[09:40] <dalek> star: review: https://github.com/rakudo/star/commit/e017ba0b6b

[09:40] <dalek> star: bd8bdab | (Steve Mynott)++ | tools/star/Makefile:

[09:40] <dalek> star: bump rakudo, nqp and moar versions

[09:40] <dalek> star: review: https://github.com/rakudo/star/commit/bd8bdab3c4

[09:40] <dalek> star: bba83a7 | (Steve Mynott)++ | tools/star/release-guide.pod:

[09:40] <dalek> star: correct changelog create cmd

[09:40] <dalek> star: review: https://github.com/rakudo/star/commit/bba83a7608

[09:40] <dalek> star: a49ba73 | (Steve Mynott)++ | modules/ (9 files):

[09:40] <dalek> star: bump submodule versions

[09:40] <dalek> star: review: https://github.com/rakudo/star/commit/a49ba7342f

[09:54] <nine> Zoffix: at least I finally had a look at Inline::Perl5's travis now. Seems like we need a rakudo from between 2016.06 (still broken) to 2016.09 (works) for Inline::Perl5 to pass its tests. Or actually it looks like a MoarVM issue.

[10:27] <dalek> star: 7fcd019 | (Steve Mynott)++ | docs/announce/2016.10.md:

[10:27] <dalek> star: draft announce

[10:27] <dalek> star: review: https://github.com/rakudo/star/commit/7fcd01928e

[10:29] <timotimo> +  * Overflow check has been removed from infix:<**>(int, int)

[10:29] <timotimo> ^- was this actually in the last rakudo star?

[10:30] <timotimo> star: 1000 ** 1000

[10:30] <camelia> star-m 2016.04: OUTPUT«WARNINGS for <tmp>:␤Useless use of "**" in expression "1000 ** 1000" in sink context (line 1)␤»

[10:30] <timotimo> committable6: releases 1000 ** 1000

[10:30] <timotimo> how do i work this bot again ...

[10:30] <timotimo> committable6: help

[10:30] <committable6> timotimo, ¦«2015.10,2015.11»: WARNINGS:␤Useless use of "**" in expression "1000 ** 1000" in sink context (line 1)␤¦«2015.12,2016.02,2016.03,2016.04,2016.05,2016.06,2016.07.1,2016.08.1,2016.09,HEAD»: WARNINGS for /tmp/dxaq0BOTzG:␤Useless use of "**" in expression "1000 ** 1000" in sink context (line 1)

[10:30] <committable6> timotimo, Like this: committable6: f583f22,HEAD say ‘hello’; say ‘world’

[10:31] <timotimo> maybe that doesn't overflow yet %)

[10:31] <dalek> star: ec1e99a | (Steve Mynott)++ | docs/announce/2016.10.md:

[10:31] <dalek> star: minor typo fixed

[10:31] <dalek> star: review: https://github.com/rakudo/star/commit/ec1e99a659

[10:31] <dalek> star: 5d08154 | (Steve Mynott)++ | docs/announce/2016.10.md:

[10:31] <dalek> star: md fix

[10:31] <dalek> star: review: https://github.com/rakudo/star/commit/5d0815418f

[10:31] <timotimo> m: say 10_000 ** 10_000

[10:31] <camelia> rakudo-moar b744de: OUTPUT«1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000…»

[10:31] <timotimo> oooh, i forgot to native ints

[10:31] <timotimo> m: my int $a = 10_000; say $a ** $a

[10:31] <camelia> rakudo-moar b744de: OUTPUT«0␤»

[10:31] <timotimo> committable6: releases my int $a = 10_000; say $a ** $a

[10:31] <committable6> timotimo, https://gist.github.com/8aefa4b51267f0e0010ca7519d942e53

[10:32] <timotimo> hehe.

[10:32] <timotimo> it b0rked for many releases

[10:32] <dalek> star: f07dc87 | (Steve Mynott)++ | / (2 files):

[10:32] <dalek> star: bump more versions

[10:32] <dalek> star: review: https://github.com/rakudo/star/commit/f07dc871cf

[10:51] <dalek> roast: 5e51f94 | (Tom Browder)++ | README (2 files):

[10:51] <dalek> roast: Revise README (#171)

[10:51] <dalek> roast:

[10:51] <dalek> roast: * rename to use markdown, strive for consistency, add TOC and details on contributing

[10:51] <dalek> roast: review: https://github.com/perl6/roast/commit/5e51f946d5

[11:21] <dalek> star: 7138bfb | (Steve Mynott)++ | / (3 files):

[11:21] <dalek> star: add perl6-pod-to-bigpage needed as dep for p6doc

[11:21] <dalek> star: review: https://github.com/rakudo/star/commit/7138bfb2c3

[11:21] <dalek> star: 3d06917 | (Steve Mynott)++ | docs/announce/2016.10.md:

[11:21] <dalek> star: update announce

[11:21] <dalek> star: review: https://github.com/rakudo/star/commit/3d0691733e

[12:00] <nine> Aaaand updated openSUSE packages submitted less than 24 hours after the release :)

[12:02] <FROGGS> nine++

[12:04] <nine> There were just minor issues to fix in my update scripts. I guess I'll do one or two more releases this way before I add the "osc commit" commands to the scripts and put them all into a single command

[12:05] <nine> Most of the code is actually just collecting the changelogs for putting them into the .spec file ;)

[12:08] <dalek> star: 4e70ec2 | (Steve Mynott)++ | / (3 files):

[12:08] <dalek> star: install prove6 only, after chat with leont and install last so not as to slow star src build - which needs perl5 anyway

[12:08] <dalek> star: review: https://github.com/rakudo/star/commit/4e70ec2a9f

[12:08] <dalek> star: 7ca15a5 | (Steve Mynott)++ | docs/announce/2016.10.md:

[12:08] <dalek> star: doc addition of prove6

[12:08] <dalek> star: review: https://github.com/rakudo/star/commit/7ca15a58af

[12:11] <FROGGS> nine: after that we'd just need to automate bug fixing ;o)

[12:25] <dalek> roast: 67c494c | FROGGS++ | S32-list/pick.t:

[12:25] <dalek> roast: add .pick test for RT #109586

[12:25] <dalek> roast: review: https://github.com/perl6/roast/commit/67c494ced2

[12:25] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=109586

[12:28] <psch> grr my isp is being really spotty :|

[12:29] <psch> also, the attributive sig binding bug on jvm is gonna be fun

[12:29] <FROGGS> :S

[12:30] <psch> the issue is, from what i can tell, that we directly as the repr to get the assignee

[12:30] <psch> which we can't, because that only works for boxed attributes

[12:30] <FROGGS> ohh, I guess I need to bump the revisions to that the added test passes....

[12:31] <FROGGS> directly what?

[12:31] <psch> ask

[12:31] <psch> +k :)

[12:32] <psch> but that also means that we can't getattr there either, cause don't get the attribute slot for assignment but the value in a new box...

[12:32] <psch> +that way

[12:32] <psch> +we

[12:32] <FROGGS> hehe

[12:33] <psch> the interesting thing is that we don't even seem to hit the check for the case that's not working...

[12:34] <psch> https://github.com/rakudo/rakudo/blob/nom/src/vm/jvm/runtime/org/perl6/rakudo/Binder.java#L606

[12:34] <psch> j: class A { has int $!a; method f(:$!a) { } }; A.new.f: :1a

[12:34] <camelia> rakudo-jvm 2a1605: OUTPUT«org.perl6.nqp.sixmodel.reprs.P6OpaqueBaseInstance$BadReferenceRuntimeException: Cannot access a native attribute as a reference attribute␤  in method f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:34] <psch> so that & SIG_ELEM_BIND_ATTRIBUTIVE doesn't even get hit

[12:35] <MasterDuke> psch: is this at all related to the BOOTSTRAPATTR stuff?

[12:37] <psch> MasterDuke: no, i wouldn't think so.  i thought you're working on that?

[12:37] <MasterDuke> yeah, i haven't really had a chance to look at it since last chatting, but i hope to get some time to play around today

[12:39] <MasterDuke> (but /me wouldn't complain *too* loudly if someone else did all the work)

[12:48] <psch> yeah i don't think this is working here...

[12:48] <psch> my putty connection dropped like 3 times in the last 20 minutes :/

[12:49] <stmuk> http://pl6anet.org/drop/rakudo-star-2016.10-RC0.tar.gz

[12:52] <dalek> nqp: 02fd5f5 | FROGGS++ | tools/build/MOAR_REVISION:

[12:52] <dalek> nqp: bump moar for .pick fix

[12:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/02fd5f5ae6

[12:53] <dalek> rakudo/nom: 34e515d | FROGGS++ | tools/build/NQP_REVISION:

[12:53] <dalek> rakudo/nom: bump nqp/moar for .pick fix

[12:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/34e515d640

[13:12] <stmuk> http://stevemynott.blogspot.co.uk/2016/10/there-is-release-candidate-for-rakudo.html

[13:37] <travis-ci> Rakudo build errored. Tobias Leich 'bump nqp/moar for .pick fix'

[13:37] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/168041380 https://github.com/rakudo/rakudo/compare/b744de35b0e9...34e515d64025

[13:41] <Zoffix> https://travis-ci.org/rakudo/rakudo/builds/168041380

[13:41] <buggable> [travis build above] ✓ All failures are due to timeout (1), missing build log (0), or GitHub connectivity (0). All failures are on JVM only.

[13:44] <stmuk> Zoffix: I messed up and didn't assign a title to my blog (due to blogger being junk). Although I corrected it it's still not showing with title on perl6.org

[13:44] <stmuk> will that correct itself or does a cache need clearing?

[13:45] <Zoffix> stmuk, try again

[13:45] <stmuk> ah yes

[13:45] <stmuk> :D

[13:46] <Zoffix> IIRC it's updated every 15 minutes

[13:59] <nine> "There are a number of advantages to doing so, including elimination of some high-order memory allocations, improved security, and better diagnostic output when a stack overflow occurs. There was just one little problem: an additional 1.5µs of kernel overhead during process creation, a cost that Linus was unwilling to accept."

[14:00] <nine> Oh I'm glad. That would have slowed down rakudo startup by almost 0.002 % ;)

[14:00] <mst> nine: what's that from?

[14:00] <Zoffix> What's the opposite of "texas"? What do we call our fancy pants unicode ops?

[14:00] <nine> http://lwn.net/Articles/692953/

[14:01] <nine> Just thought it amusing how relative performance numbers are.

[14:01] <mst> yeah

[14:02] <nine> Btw. they succeeded in getting all those benefits without the 1.5us slowdown for those who don't fancy reading the article.

[14:02] <[Coke]> Zoffix: non texas is the normal, regular version; doesn't have a special name. (maybe 'unicode') ?

[14:02] <Zoffix> OK

[14:03] <mst> I'd just say "unicode operators" and "texas operators"

[14:03] <mst> I think

[14:20] <stmuk> "Rhode Island"

[14:20] <stmuk> not very catchy I admit

[14:20] <mst> stmuk++

[14:21] <Zoffix> m: use nqp; say nqp::div_n(0e0, 0e0)

[14:21] <camelia> rakudo-moar 34e515: OUTPUT«NaN␤»

[14:22] <Zoffix> m: use nqp; say nqp::mod_n(0e0, 0e0)

[14:22] <camelia> rakudo-moar 34e515: OUTPUT«0␤»

[14:24] <Zoffix> FWIW, currently we have native num division by zero and % check for zero division and return a Failure, so we have that "more than one type returned; will it inline" thing going on there that was the reasoning behind removing overflow detection for infix:<*> and infix:<**> for ints

[14:33] <Zoffix> Hm. My bench shows adding an explicit `returns int` to a native-operating sub makes it about 2% slower, but I recall jnthn saying whatever you do, don't remove that return type stuff or inlining will mess up. Am I doing something wrong with my test?

[14:33] <Zoffix> m: https://gist.github.com/zoffixznet/98dd51b90379373908b87118d9f7c391

[14:33] <camelia> rakudo-moar 34e515: OUTPUT«starting␤Before: 1.003957␤ After: 1.01247476␤  Diff: -0.84%␤»

[14:33] <Zoffix> m: https://gist.github.com/zoffixznet/98dd51b90379373908b87118d9f7c391

[14:33] <camelia> rakudo-moar 34e515: OUTPUT«starting␤Before: 1.0089375␤ After: 0.9993584␤  Diff: 0.95%␤»

[14:35] <nine> Zoffix: he could simple have meant possible future optimizations that need this return type info

[14:35] <Zoffix> OK

[14:36] <nine> Are we able to profile rakudo's startup somehow?

[14:41] <dalek> roast: eeb5887 | (Zoffix Znet)++ | S02-types/num.t:

[14:41] <dalek> roast: [coverage] Cover nummy prefix:<->, abs, infix:<+>, and infix:<*>

[14:41] <dalek> roast: review: https://github.com/perl6/roast/commit/eeb588725a

[16:53] <dalek> rakudo/nom: 2b5226c | (Zoffix Znet)++ | src/core/Num.pm:

[16:53] <dalek> rakudo/nom: Add return type constraints for native nummy subs

[16:53] <dalek> rakudo/nom:

[16:53] <dalek> rakudo/nom: To allow for current/future inlining/optimizations based on knowledge

[16:53] <dalek> rakudo/nom: of return types.

[16:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2b5226ccd3

[17:27] <Zoffix> m: my num $x = -125e0; my num $y = (1/3).Num; dd $x**$y

[17:27] <camelia> rakudo-moar 2b5226: OUTPUT«NaN␤»

[17:29] <Zoffix> Ah, it's the logged one already https://rt.perl.org/Public/Bug/Display.html?id=128584#ticket-history

[17:39] <travis-ci> Rakudo build passed. Zoffix Znet 'Add return type constraints for native nummy subs

[17:39] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/168076021 https://github.com/rakudo/rakudo/compare/34e515d64025...2b5226ccd35d

[17:47] <Zoffix> m: say NaN**0

[17:47] <camelia> rakudo-moar 2b5226: OUTPUT«1␤»

[17:47] <Zoffix> I thought any operation on a NaN gave NaN

[17:47] <AlexDaniel> committable6: releases say NaN**0

[17:47] <committable6> AlexDaniel, ¦«2015.10,2015.11,2015.12,2016.02,2016.03,2016.04,2016.05,2016.06,2016.07.1,2016.08.1,2016.09,HEAD»: 1

[17:48] <AlexDaniel> m: say 42**NaN

[17:48] <camelia> rakudo-moar 2b5226: OUTPUT«NaN␤»

[17:48] <Zoffix> Perl 5 gives a NaN

[17:48] <AlexDaniel> m: say 1**NaN

[17:48] <camelia> rakudo-moar 2b5226: OUTPUT«1␤»

[17:48] <Zoffix> :o

[17:48] <AlexDaniel> m: say 0**NaN

[17:49] <camelia> rakudo-moar 2b5226: OUTPUT«NaN␤»

[17:49] <Zoffix> Feels like a shortcut logic there somewhere isn't watching for a nan

[17:49] <AlexDaniel> SourceBaby: infix:<**>(1, NaN)

[17:49] <Zoffix> Nananananananananana bugman

[17:49] <AlexDaniel> SourceBaby: help

[17:49] <SourceBaby> AlexDaniel, Use s: trigger with args to give to sourcery sub. e.g. s: Int, 'base'. See http://modules.perl6.org/dist/CoreHackers::Sourcery

[17:50] <Zoffix> s: &infix:<**>, \(1, NaN)

[17:50] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/2b5226c/src/core/Real.pm#L141

[17:50] <AlexDaniel> ah

[17:50] <AlexDaniel> what is Bridge

[17:50] <Zoffix> The issue is at nqp level (or below)

[17:51] <Zoffix> m: use nqp; dd nqp::pow_n(NaN, 0e0)

[17:51] <camelia> rakudo-moar 2b5226: OUTPUT«1e0␤»

[17:51] <Zoffix> j: use nqp; dd nqp::pow_n(NaN, 0e0)

[17:51] <camelia> rakudo-jvm 2a1605: OUTPUT«1e0␤»

[17:51] <AlexDaniel> bisect: say 1**NaN

[17:51] <bisectable6> AlexDaniel, On both starting points (old=2015.12 new=34e515d) the exit code is 0 and the output is identical as well

[17:51] <bisectable6> AlexDaniel, Output on both points: 1

[17:55] <AlexDaniel> RT #129894

[17:55] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129894

[17:55] <Zoffix> m: NaN**1i

[17:55] <camelia> rakudo-moar 2b5226: OUTPUT«WARNINGS for <tmp>:␤Useless use of "**" in expression "NaN**1i" in sink context (line 1)␤»

[17:55] <Zoffix> m: say NaN**1i

[17:55] <camelia> rakudo-moar 2b5226: OUTPUT«NaN+NaN\i␤»

[17:56] <AlexDaniel> Zoffix: haha, that's a good one: -1**NaN

[17:56] <Zoffix> m: say (-1)**NaN

[17:56] <camelia> rakudo-moar 2b5226: OUTPUT«NaN␤»

[17:56] <Zoffix> Works fine.

[17:56] <AlexDaniel> ahhhhh… parens…

[17:57] <AlexDaniel> I'll go… create a doc issue perhaps…

[17:59] <Zoffix> m: use Test; is-deeply (my num $ = 125e0) ** (my num $ = (1/3).Num), (my num $ = 5e0)

[17:59] <camelia> rakudo-moar 2b5226: OUTPUT«not ok 1 - ␤␤# Failed test at <tmp> line 1␤# expected: 5e0␤#      got: 5e0␤»

[17:59] <Zoffix> heh

[18:03] <AlexDaniel> surprisingly I don't have many RTs with NaNs

[18:03] <dalek> roast: 47aba2d | (Zoffix Znet)++ | S02-types/num.t:

[18:03] <dalek> roast: [coverage] Cover nummy infix:<%> and infix:<**>(num, num)

[18:03] <dalek> roast:

[18:03] <dalek> roast: Includes partial fudge for

[18:03] <dalek> roast: RT#129894: https://rt.perl.org/Ticket/Display.html?id=129894

[18:03] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129894

[18:03] <dalek> roast: review: https://github.com/perl6/roast/commit/47aba2d2ea

[18:04] <AlexDaniel> chances are there is a bunch of other similar bugs related to NaN

[18:04] <AlexDaniel> Zoffix: should I also create a ticket for say NaN**0 ?

[18:04] <Zoffix> m: say NaN**0

[18:04] <camelia> rakudo-moar 2b5226: OUTPUT«1␤»

[18:04] <Zoffix> AlexDaniel, it's all part of that, innit

[18:05] <AlexDaniel> Zoffix: OK I'll then leave a comment on that ticket

[18:06] <dalek> rakudo/nom: 3cebff6 | (Dominique Dumont)++ | docs/running.pod:

[18:06] <dalek> rakudo/nom: Fix pod syntax error in running.pod

[18:06] <dalek> rakudo/nom:

[18:06] <dalek> rakudo/nom: Added the missing =back found by podchecker

[18:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3cebff6ea9

[18:06] <dalek> rakudo/nom: ae1f2f8 | (Zoffix Znet)++ | docs/running.pod:

[18:06] <dalek> rakudo/nom: Merge pull request #905 from dod38fr/nom

[18:06] <dalek> rakudo/nom:

[18:06] <dalek> rakudo/nom: Fix pod syntax error in running.pod

[18:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ae1f2f8738

[21:53] <Zoffix> I'm a bit suspicious about this // 0 here: https://github.com/rakudo/rakudo/blob/ae1f2f8/src/core/Stringy.pm#L26

[21:53] <Zoffix> What's the usecase for it? Right now it silences errors.

[21:53] <Zoffix> m: my $x = 5 x '10sadsadas'; say $x

[21:53] <camelia> rakudo-moar ae1f2f: OUTPUT«␤»

[21:56] <Zoffix> Hmmmm... https://github.com/rakudo/rakudo/commit/2311372b5fde9c6b1801cf00840ed8c51bc75a69

[21:58] * Zoffix changes that to something better

[22:13] <lucasb_> Zoffix: do you really think that '// 0' is necessary?

[22:13] <lucasb_> after all, 'a' + 'b' raises an error

[22:13] <lucasb_> I think, so should 'a' x 'b'

[22:13] <Zoffix> I know

[22:19] <lucasb_> m: say 'a' xx 3

[22:19] <camelia> rakudo-moar ae1f2f: OUTPUT«(a a a)␤»

[22:19] <lucasb_> oops, sorry

[22:19] <lucasb_> m: say 'a' xx 'b'

[22:19] <camelia> rakudo-moar ae1f2f: OUTPUT«This type cannot unbox to a native integer: P6opaque, Failure␤  in block <unit> at <tmp> line 1␤␤»

[22:19] <lucasb_> ^^ I think this settles the discussion. 'a' x 'b' should throw :)

[22:20] * Zoffix thought `* Zoffix changes that to something better` did it :)

[22:21] <Zoffix> 'cause the commit indicates failure silencing wasn't the reason for the addition

[22:21] <lucasb_> Zoffix: oh, sorry. I missed that :)

[22:40] <dalek> rakudo/nom: 2dd0ddb | (Zoffix Znet)++ | src/core/Stringy.pm:

[22:40] <dalek> rakudo/nom: Fix infix:<x> accidentally silencing failures

[22:40] <dalek> rakudo/nom:

[22:40] <dalek> rakudo/nom: An earlier fix[^1] to interpret type objects as 0 iterations had an unintended

[22:40] <dalek> rakudo/nom: effect that Failures from the coercion of the RHS argument to Int would also be

[22:40] <dalek> rakudo/nom: silently treaded as 0.

[22:40] <dalek> rakudo/nom:

[22:40] <dalek> rakudo/nom: Add a separate multi for type objects to handle that case, leaving

[22:40] <dalek> rakudo/nom: coercion Failures able to freely explode.

[22:40] <dalek> rakudo/nom:

[22:40] <dalek> rakudo/nom: Fixes RT#129899: https://rt.perl.org/Ticket/Display.html?id=129899

[22:40] <dalek> rakudo/nom: [1] https://github.com/rakudo/rakudo/commit/2311372b5fde9c6b1801cf00840ed8c51bc75a69

[22:40] <dalek> roast: df528f7 | (Zoffix Znet)++ | S03-operators/repeat.t:

[22:40] <dalek> roast: Test infix:<x> does not silence Failures

[22:40] <dalek> roast:

[22:40] <dalek> roast: RT#129899: https://rt.perl.org/Ticket/Display.html?id=129899

[22:40] <dalek> roast: review: https://github.com/perl6/roast/commit/df528f7db0

[22:40] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129899

[23:04] * lizmat waves from London

[23:04] * Zoffix waves from an hour away from London

[23:04] <Zoffix> ... but I'm guessing the wrong London :P

[23:06] <geekosaur> ontario? :p

[23:06] <Zoffix> Yeah :)

[23:06] * japhb waves from San Jose (the one in California)

[23:08] * lizmat hits the bar&

[23:09] * japhb hits the space bar

[23:09] <japhb> ... but not too hard

[23:09] * geekosaur tries to remember where he is relative to there...

[23:10] <geekosaur> hah, not quite directly south

[23:11] <geekosaur> but about equidistant from the border

[23:17] <gfldex> naive implementation of ==> : https://gist.github.com/gfldex/798aa1212070d5bd6205b2ff1900660f
