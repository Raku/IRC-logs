[02:59] <pmichaud> (RFC tickets)  I'm not entirely comfortable with the notion that language RFCs have the same ticket queue as rakudo bugfixes.  To me it promotes too strongly the notion that "Rakudo" == "Perl 6".

[03:00] <pmichaud> But since I'm not terribly active at the moment, that position perhaps should not carry a lot of weight.

[03:13] <AlexDaniel> pmichaud: I think that most people agree, but what's the alternative?

[03:15] <AlexDaniel> committable6: 2015.09,HEAD say join ", ", "ag".."bc"

[03:15] <committable6> AlexDaniel, ¬¶¬´2015.09,HEAD¬ª: ag, af, ae, ad, ac, bg, bf, be, bd, bc

[03:16] <AlexDaniel> committable6: 2015.09,HEAD say ‚Äò-5‚Äô.succ

[03:16] <committable6> AlexDaniel, ¬¶¬´2015.09,HEAD¬ª: -6

[03:16] <AlexDaniel> huggable: dunno

[03:16] <huggable> AlexDaniel, ¬Ø\_(„ÉÑ)_/¬Ø

[03:35] <pmichaud> AlexDaniel: Separate queues for language tickets and rakudo tickets.

[03:35] <AlexDaniel> pmichaud: ah

[03:35] <pmichaud> For a while we were doing that by using GitHub's issue tracker on the perl6/specs repository as a place for language discussions to take place.

[03:35] <AlexDaniel> so the current queue should be renamed to ‚Äúrakudo‚Äù then?

[03:36] <pmichaud> Either that, or we start migrating rakudo tickets to a GitHub issue tracker.  But I'm sure people are very much not wanting to do that.

[03:38] <pmichaud> If the current dev team is fine with mixing language and rakudo issues on the same issue tracker, I won't object.  I just think it (wrongly) reinforces the notion that whatever Rakudo does is the language spec.

[03:38] <pmichaud> and we've worked so hard to separate the two that it seems bad to let an issue tracker muddle things up again

[03:39] <AlexDaniel> üëç

[04:54] <ShimmerFairy> pmichaud: yeah, I'd rather see the tracker at least on a separate "group", if not issues on perl6/specs or perl6/roast

[04:54] <ShimmerFairy> maybe even a 'rfcs.perl6.org' would be a possibility in the future?

[05:03] <ShimmerFairy> in fact, maybe rakudo's tickets should move to GitHub, considering the RT queue is called "perl6", and not "rakudo" :P

[06:05] <b2gills> star-m: say ([[&({@_})]] 1).perl

[06:05] <camelia> star-m 2016.04: OUTPUT¬´1‚ê§¬ª

[06:05] <b2gills> m: say ([[&({@_})]] 1).perl

[06:05] <camelia> rakudo-moar b1c444: OUTPUT¬´[1]‚ê§¬ª

[06:27] <[Tux]> This is Rakudo version 2016.08.1-55-gb1c444f built on MoarVM version 2016.08

[06:27] <[Tux]> csv-ip5xs       10.363

[06:27] <[Tux]> test            15.628

[06:27] <[Tux]> test-t           7.461

[06:27] <[Tux]> csv-parser      16.663

[07:56] <lizmat> commute&

[09:20] <jnthn> morning, #perl6-dev

[09:20] <DrForr> Mornin'.

[09:21] <timotimo> greetings jnthn

[09:26] <JimmyZ> morning :)

[09:28] * jnthn has tuits today :)

[09:29] <masak> \o/

[09:29] <masak> are they... *round*!? o.O

[09:30] <jnthn> They appear to be.

[09:32] <masak> given the number of commits I'm making this morning, I appear to have some too :D

[09:41] <DrForr> I used to make a business filing down square tuits.

[09:47] <|Tux|> jnthn++

[09:49] <DrForr> jnthn++ # Agreed.

[09:52] * jnthn is having no luck reproducing https://rt.perl.org/Ticket/Display.html?id=129120 locally

[09:52] <jnthn> Granted I don't have a 32 core box :P

[09:54] <timotimo> the worst thing about that code is that it pushes results into an array when it could just use the return value of the for loop instead :P

[09:55] <JimmyZ> jnthn: I can try to reproduce it :)

[09:59] <jnthn> Feel free

[10:00] <jnthn> I left some hints on the ticket too

[10:00] <pmichaud> Good morning, #perl6-dev

[10:01] <jnthn> o/ pmichaud

[10:02] <jnthn> pmichaud: From backlog: I agree language RFCs going in a separate queue would be preferable.

[10:02] <pmichaud> jnthn: thanks.  :)

[10:02] <pmichaud> now the question is "How do we do that?"

[10:02] <jnthn> Well, that's the harder part. :P

[10:03] <pmichaud> given that people have apparently been using the perl6 RT queue for that purpose.

[10:03] <pmichaud> short answer is to migrate those tickets to wherever we want such things to go.

[10:03] <jnthn> Yeah, I don't know why we started having that happen instead of filing them on the design docs github repo

[10:03] <jnthn> (Is it still called spec? :P)

[10:03] <pmichaud> I suspect someone just assumed it was like perl 5, and that it made sense to do RFCs in the rakudo queue

[10:03] <jnthn> Yeah

[10:03] <pmichaud> and that nobody carped about it until I came in

[10:04] <jnthn> Relatedly, do we want to try and get people to provide certain information in an RFC?

[10:04] <pmichaud> Oh, that's an interesting idea.

[10:04] <jnthn> It might be nice if we had a page where we can point people at on how to file them, with both where to file them and what info to include.

[10:04] <nine> Like a real world use case and information why existing alternatives just won't do it?

[10:05] <pmichaud> At any rate, if perl6/specs repo is relegated to "historical" status, I'm not sure the specs/ issue tracker is the place for such things either.

[10:05] <pmichaud> maybe perl6/roast issue tracker

[10:06] <pmichaud> that would also help reinforce that it's the roast tests that define the language

[10:06] <jnthn> That's an interesting idea.

[10:07] <pmichaud> once we figure out where language tickets should go, the next step is to close out the [RFC] tickets in the RT queue by pointing them to the equivalent-minded issues in the new ticket queue

[10:08] <pmichaud> I think there's only 50 or so of those, so not too onerous yet.

[10:08] <cygx> o/

[10:08] <JimmyZ> jnthn: turns out no need 32 core, it happens only sometimes

[10:08] <timotimo> so force_gc somewhere perhaps? :P

[10:08] <cygx> .oO( why not just a new repository? )

[10:08] <JimmyZ> I got it on my 4 core box :P

[10:08] <cygx> incidentally: https://gist.github.com/cygx/7d792e09b182a1a79b1dac82663dfddb

[10:09] <pmichaud> cygx: why not perl6/roast ?

[10:09] <jnthn> JimmyZ: Hm, wonder why I couldn't get it on mine

[10:09] <timotimo> when you have encoding and decoding, how should tell and seek work?

[10:09] <JimmyZ> I run it two times, and got this error

[10:09] <jnthn> o.O

[10:10] <cygx> pmichaud: seems a bit of a mixture of concerns again, as the queue will presumably contain both actual bugs inthe test suite and language rfcs...

[10:10] <jnthn> JimmyZ: Can you try the things I suggested in the RT?

[10:10] <jnthn> cygx: Arguably those are one and the same :)

[10:10] <pmichaud> cygx:  sure, but that sort of mixing I don't mind.

[10:10] <JimmyZ> yeah, not sure I can get it again, haha

[10:10] <pmichaud> a bug in the test suite probably means we need a language discussion about why it's a bug

[10:10] <jnthn> cygx: If you want to change an existing test that was passing you're changing something somebody could have relied on, and that we'd insinuated we'd support 'cus it's in the test suite. :)

[10:11] <ShimmerFairy> .oO(There is a universe of tests that are implicitly fudged and skip()'d)

[10:13] <cygx> I don't have any strong feelings on it, it's just that while 'proposing to change a test' and 'proposing a new language feature' feel different to me (yeah, I know, the language is defined in terms of the tet suite and all that ;) )

[10:13] <nine> pmichaud: it may as well just be a bug in the test setup code completely unrelated to the functionality tested.

[10:13] <cygx> s/while//

[10:13] <JimmyZ> jnthn: ok, I got it again, I posted it to the rt

[10:14] <pmichaud> nine: sure... but I can't see the mixing of roast bugs and language discussions as being a big problem

[10:14] <pmichaud> as opposed to what we have now, where rakudo's bug tracker is being used to propose language feature changes, entirely removed from roast or spec

[10:15] <ShimmerFairy> I can agree with the notion that "overloading" the roast issues wouldn't be ideal. I'd prefer the design doc repo perhaps?

[10:15] <pmichaud> ShimmerFairy: I think "design doc repo"  ==   perl6/specs

[10:15] <pmichaud> and I have the impression that it's no longer the active location for language design notes

[10:15] <ShimmerFairy> FWIW I still think we need a human-readable version of the specification, though overhauling the design docs would be a huge undertaking.

[10:16] <pmichaud> ShimmerFairy: I suspect that the human-readable version is going to be docs.perl6.org

[10:16] * ShimmerFairy thinks doing a literate-programming-esque thing with Pod in the test suite would be the best way to accomplish that.

[10:17] <pmichaud> at least that's where things seem to be trending

[10:17] <ShimmerFairy> pmichaud: I can see that, though not so much in its current form. docs.perl6.org tends to feel a bit disorganized to me, and certainly not helped by the fact that Pod support isn't where it should be yet.

[10:18] <pmichaud> at any rate, I vote for language discussions issues to move to the perl6/roast issue tracker.

[10:19] <pmichaud> Unless perl6/specs is going to be an active part of language design, in which case it's the natural location (and where a bunch of language-specific issues have been filed already)

[10:19] <ShimmerFairy> yeah, roast is certainly better than the 'perl6' RT queue :)

[10:20] <ShimmerFairy> pmichaud: like I mentioned earlier, maybe a totally separate thing like rfcs.perl6.org would eventually be best, if we can't find a suitable repo to tie it to.

[10:20] <pmichaud> ShimmerFairy: well, language discussions aren't always rfcs

[10:21] <ShimmerFairy> true, I only picked 'rfcs' as a subdomain because that's what people were calling it :)

[10:21] <pmichaud> the truth is that we already have a language repository, and it's called perl6/roast

[10:22] <pmichaud> I don't see any issue with adding some documentation and human-readable documents to perl6/roast

[10:22] <pmichaud> for example, jnthn++'s "language versioning" gist sounds very much to me like it should be a document in perl6/roast

[10:23] <ShimmerFairy> sure, and eventually it'd be nice if the test files came with in-file documentation as well, at least in the tricky parts of the language :)

[10:27] <pmichaud> FWIW, not all of the [RFC] marked RT tickets are language issues... some of them are properly Rakudo bugs.

[10:27] <nine> pmichaud: maybe we should resurrect the idea of renaming roast?

[10:28] <pmichaud> nine: I'd be in favor of that.

[10:28] <pmichaud> it could certainly be named "perl6"  :)

[10:28] <pmichaud> although I'm sure that would confuse a *bunch* of people eventually.

[10:29] <pmichaud> "I want to download perl6.  But github:perl6/perl doesn't seem to contain a compiler!"

[10:29] <pmichaud> *github:perl6/perl6

[10:30] <pmichaud> renaming 'roast' to 'lang' would certainly brighten my day.

[10:30] <pmichaud> (or to 'perl6', for that matter)

[10:30] <pmichaud> then we don't have to worry about renaming specs/  :)

[10:31] * jnthn quite likes lang

[10:31] <jnthn> roast is cute but a bit too so :)

[10:32] <pmichaud> yes, it's cute, but it's hard to explain to outsiders

[10:32] <timotimo> that's probably why it's too cute for jnthn

[10:32] <pmichaud> and too cute for me, too.  I've never been fond of 'roast'

[10:36] <pmichaud> I liked it better when it was called "spectest".  Ironically, that name is far more accurate today than it was then.  :-P

[10:39] <ShimmerFairy> .oO(What about Perl6 Ultimate Grand Spectest, or 'pugs' for short? :P)

[10:39] <pmichaud> ShimmerFairy: I like the idea of inlining human-readable language spec in the test files... but even if it's not inlined, placing such human-readable documentation in the roast subdirectories seems like a nice intermediate subset

[10:40] <pmichaud> indeed, there could even be subdirectories where proposed features live (along with their tests) prior to formal adoption into the language

[10:41] <ShimmerFairy> yeah, I think it would help keep the documentation more organized along the lines of how the tests are organized.

[10:41] <pmichaud> s/proposed features/feature proposals/

[10:41] <ShimmerFairy> And I'm sure the inline variation would make Knuth very happy :P

[10:41] <pmichaud> ShimmerFairy: that, yes, but also  might point out ways to better organize the tests, too.

[10:42] <pmichaud> I've long believed that roast needs a refactor... for a while I was looking for ways to refactor it to closely match the synopses.

[10:42] <ShimmerFairy> indeed, we might see the old Snn- prefixes on directories disappear someday, esp. if/when we want to "really" distance ourselves from the design docs

[10:43] <pmichaud> well, eventually the tests, language, etc. will probably want to reorganize themselves to closely match whatever the Perl 6 Camel Book equivalent ends up being.

[10:43] <ShimmerFairy> Ah yes, I forget that the synopses were organized along the P5 Camel Book :)

[10:43] <ShimmerFairy> (though obviously ours would be the Butterfly Book)

[10:44] <pmichaud> The test suite does point out one difficulty we had with the synopses... some of those documents just ended up being too long.

[10:44] <pmichaud> They need(ed) better subdivisions.

[10:45] <pmichaud> a-n-y-w-a-y... I've thrown my hand grenade for today, I think.

[10:45] <ShimmerFairy> However we do it, I think we can agree that expecting potential new developers of new P6 implementations to understand the specifics of the language without human-readable text would be very annoying.

[10:46] <ShimmerFairy> pmichaud: well, I also think that it didn't help in cases where tests you're looking for could be in any of several locations, so a more feature-based organization would be nice.

[10:47] <nine> I'd totally be for a one feature per testfile structure. Nowadays our startup time is low enough to actually consider that.

[10:47] <jnthn> The trouble is that a lot of tests are about the interaction of features - which is often where the interesting bugs are too...

[10:48] <pmichaud> So, my proposal (RFC):  1.  Rename 'perl6/roast' to 'perl6/lang'.  2.  Make the 'perl6/lang' issue tracker a place for tracking language issues, such as proposed new features.  3.  Migrate jnthn++'s language versioning document into the perl6/lang repo.

[10:48] <pmichaud> 4.  Find any language-modification tickets in the RT ticket queue and move them to the lang issue tracker.  Same for any issues left outstanding in the perl6/specs repo.

[10:48] <jnthn> Phew, I think I've finally fixed the crappy backtraces issue with sprintf...

[10:49] <jnthn> Thought that'd be a nice 5 minute fix...turned out not

[10:49] <pmichaud> nicely, a language ticket can be closed when its corresponding tests have been committed to the perl6/lang repo.  :)

[10:50] * jnthn is +1 towards pmichaud++'s proposal

[10:50] <ShimmerFairy> jnthn: "feature interaction" is where cross-references come in! (and if all common systems supported it, symlinks!) :)

[10:50] <ShimmerFairy> +1 for the proposal as well

[10:50] <jnthn> haha...symlinks on Windows :P

[10:51] <cygx> what's wrong with symlinks on windows?

[10:51] <jnthn> oh, talking of Windows, I should try and reproduce that concurrency issue there...where all 8 virtual cores are available

[10:52] <pmichaud> I should probably try to get some sleep.  bbl

[10:52] <jnthn> Their lack of support, traditionally... :)

[10:52] <jnthn> pmichaud: Rest well :)

[10:52] <timotimo> good rest :)

[10:53] <ShimmerFairy> cygx: AIUI, if you see a symlink on windows, something's very wrong with your system :P

[10:53] <pmichaud> .oO( or something could be very right with your system )

[10:54] <cygx> jnthn, ShimmerFairy: mklink /?

[10:56] <ShimmerFairy> I wouldn't know anything about windows, I just remember hearing that it's got no symbolic links (of the ln -s variety linux-wise).

[10:56] <cygx> cf https://msdn.microsoft.com/en-us/library/windows/desktop/aa365680(v=vs.85).aspx

[10:57] <cygx> they've been around since Vista

[10:58] <jnthn> lunch time &

[10:58] <jnthn> (will commit that fix for printf backtraces after, it spectested ok)

[10:58] <nine> They do exist on NTFS. But AFAIK they're not exposed in the UI

[10:58] <ShimmerFairy> cygx: oh cool, so all we have to do is "XP not supported" and then we can (ab)use symlinks in all the places! \o/

[10:59] <moritz> ... except on fat32 file systems

[10:59] <cygx> nine: well, you get a small arrow on the symbol and the file type column in explorer will display .symlink

[11:00] <cygx> the fat32 objection is a fair point

[11:01] <ShimmerFairy> How common is FAT32 for systems, anyway?

[11:02] <pmichaud> ShimmerFairy: used a USB Flash drive lately?

[11:04] <ShimmerFairy> pmichaud: oh yeah. tbf though, I'd sooner reformat any flash drive of my to an ext filesystem unless otherwise necessary :P

[11:05] <cygx> if I may go off-topic for a bit, apparently the NTFS vesion shipped with WindowsXP actually supported symlinks, but did not provide an API

[11:05] <cygx> cf http://schinagl.priv.at/nt/hardlinkshellext/hardlinkshellext.html#symboliclinksforwindowsxp

[11:07] <nine> Since we're talking about how to find tests for a feature, maybe a human readable index would do just as well

[11:08] <nine> Or even longer and more descriptive file names. We do not need to support 8.3 after all :)

[11:13] <cygx> well, currently we have things like S16-io/basic-open.t, S16-filehandles/open.t and S32-io/open.t

[11:14] <ShimmerFairy> nine: what are you talking about? VARIAB~7.TST is perfectly understandable! :P

[11:44] <mst> ShimmerFairy: I WILL PEE ON EVERYTHING YOU LOVE

[11:48] <nine> .oO(IWILLP~1.EEO)

[12:21] * jnthn back

[12:27] <dalek> rakudo/nom: dc7f279 | jnthn++ | src/core/Backtrace.pm:

[12:27] <dalek> rakudo/nom: We need to be smart about terminating backtraces.

[12:27] <dalek> rakudo/nom:

[12:27] <dalek> rakudo/nom: The sprintf implementation is done in NQP and parsed using a grammar.

[12:27] <dalek> rakudo/nom: On an error with the format or processing the format, we panic, which

[12:27] <dalek> rakudo/nom: is fine. However, panic is in NQPHLL. We used detection of NQPHLL in

[12:27] <dalek> rakudo/nom: order to trim the bottommost frames from stack traces (which are the

[12:27] <dalek> rakudo/nom: HLL::Compiler startup infrastructure, which is not useful to show).

[12:27] <dalek> rakudo/nom: Unfortuantely, this led to us trimming all the useful userspace

[12:27] <dalek> rakudo/nom: lines away from the backtrace of sprintf also, meaning the user had

[12:27] <dalek> rakudo/nom: no context for where the error came from. Sad! Also fixed it so that

[12:27] <dalek> rakudo/nom: panic does not show up in the backtrace, which apparently made some

[12:27] <dalek> rakudo/nom: users panic too. :-)

[12:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dc7f27988b

[12:28] <moritz> jnthn++

[12:31] <[Coke]> I am less worried about our users being confused about our super confusing ticketing systems, and more concerned about the tickets not getting addressed, regardless of what system they're in.

[12:32] * moritz agrees

[12:33] <[Coke]> I'll finish documenting the state of the mess in https://github.com/rakudo/rakudo/wiki/rt-introduction in the next day or so since this came up again.

[12:33] <jnthn> [Coke]: That's in part a tough one to crack in so far as it's partly a "resources" problem

[12:34] <jnthn> The taggings have helped in that, for example, I can now easily have a list of all [CONC] tickets. That's certainly nice.

[12:35] <jnthn> And it may help more people who know that stuff to be able to find them and work on them, but it doesn't suddenly give people a bunch more time to work on tickets. :)

[12:36] <jnthn> If somebody fancies writing a test, https://rt.perl.org/Ticket/Display.html?id=129088 can now we closed with one :)

[12:36] * [Coke] actually starts editing that page right now.

[12:37] <jnthn> Wonder if the lack of backtrace on sprintf also has another ticket somewhere...

[12:37] <[Coke]> jnthn: there are a ton of sprintf tickets.

[12:37] <jnthn> Yeah, but I don't see one for that.

[12:37] <[Coke]> (ton==6)

[12:39] <[Coke]> jnthn: (time) right, and now we're going to spend time moving tickets around instead of answering them. :)

[12:40] <jnthn> [Coke]: That assumes the people with the ability to do the moving also have the ability to do the answering :-)

[12:45] <[Coke]> also. someone asks "can we change this behavior". do we really expect that user to know a priori if that's a compiler issue and not a spec issue?

[12:46] <[Coke]> trying to list all the options in the doc but stress that we'd rather get the ticket than not.

[12:46] <MetaZoffix> jnthn: commented on https://rt.perl.org/Ticket/Display.html?id=129120  Slightly golfed and a few backtraces

[12:49] <MetaZoffix> Hm... "This is Rakudo version 2016.07.1-197-g1728139 built on MoarVM version 2016.07-17-g40948f6"...

[12:49] * MetaZoffix upgrades to bleed to try again

[12:50] <jnthn> MetaZoffix: hmmm

[12:51] <jnthn> MetaZoffix: ooh

[12:51] <jnthn> Any chance you could test it on the Rakudo branch missing-clones?

[12:51] <MetaZoffix> sure

[12:51] <[Coke]> updated: https://github.com/rakudo/rakudo/wiki/rt-introduction

[12:52] <[Coke]> .tell pmichaud please see https://github.com/rakudo/rakudo/wiki/rt-introduction

[12:52] <yoleaux2> [Coke]: I'll pass your message to pmichaud.

[12:54] <[Coke]> Anyone mind if I remove the section Reporting Bugs in the README.md and replace it with a link to the wiki?

[12:54] <moritz> [Coke]: +1

[12:54] <MetaZoffix> +1

[12:54] <moritz> [Coke]: maybe also link/consolidate with http://rakudo.org/tickets/

[13:05] <MetaZoffix> jnthn: still crashes on missing-clones: https://gist.github.com/zoffixznet/48cbee19e51ec5348208212efe9355b5

[13:06] <[Coke]> .tell pmichaud - also ; it's not just [RFC]. See [@LARRY], [NYI], [TODO] - there's no guarantee any of these are actually rakudo bugs at this point.

[13:06] <yoleaux2> [Coke]: I'll pass your message to pmichaud.

[13:07] <[Coke]> m: say 10+56+91+19

[13:07] <camelia> rakudo-moar dc7f27: OUTPUT¬´176‚ê§¬ª

[13:07] <[Coke]> that's the minimum count on tickets that need considering.

[13:07] <[Coke]> (i'm not saying let's not do this; I'm all for reviewing tickets because we can probably close some as we review them. It's just not easy)

[13:09] <[Coke]> updated https://github.com/rakudo/rakudo/wiki/rt-introduction more.

[13:10] <dalek> rakudo/nom: af4c2ef | coke++ | README.md:

[13:10] <dalek> rakudo/nom: replace with wiki doc

[13:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/af4c2efa36

[13:11] <[Coke]> MetaZoffix: I deliberately did not refer to all the [] tags we have, only the ones that I felt users should be mucking with

[13:11] <[Coke]> I would not object at all if someone went through that doc and improved formatting or grammar.

[13:12] <jnthn> MetaZoffix: OK, at lesat we know one more thing it isn't :)

[13:12] <MetaZoffix> :D

[13:13] <jnthn> I need to fix up those commits too, but for now am taking on the long-put-off phaser scoping/cloning fixes.

[13:13] * liztormato waves from Salzburg

[13:13] <jnthn> Because they in turn sorta block my sockets string I/O fixes

[13:14] <jnthn> And also prevent us from having a more robust protect that copes fine with control exceptions etc.

[13:14] <jnthn> (We should really release the lock in a LEAVE)

[13:14] <jnthn> o/ liztormato

[13:14] <liztormato> jnthn++

[13:14] <jnthn> Enjoy the salt mountain!

[13:15] <liztormato> jnthn: having lunch in the same place we had after the last Austrian PW

[13:15] <jnthn> m: for ^5 { my $x will leave { .foo } = class :: { method foo() { say 'left' } } }

[13:15] <camelia> rakudo-moar dc7f27: OUTPUT¬´left‚ê§left‚ê§left‚ê§left‚ê§left‚ê§¬ª

[13:15] <jnthn> liztormato: ooh :) Nice!

[13:16] <jnthn> m: for ^5 { my $x will leave { .foo } = class :: { has $.x; method foo() { say 'left $!x' } }.new(x => $_) }

[13:16] <camelia> rakudo-moar dc7f27: OUTPUT¬´left $!x‚ê§left $!x‚ê§left $!x‚ê§left $!x‚ê§left $!x‚ê§¬ª

[13:16] <jnthn> d'oh :)

[13:16] <jnthn> m: for ^5 { my $x will leave { .foo } = class :: { has $.x; method foo() { say "left $!x" } }.new(x => $_) }

[13:16] <camelia> rakudo-moar dc7f27: OUTPUT¬´left 0‚ê§left 1‚ê§left 2‚ê§left 3‚ê§left 4‚ê§¬ª

[13:16] <jnthn> Hmm, I wonder how that gets the right answer

[13:17] <jnthn> m: await for for ^4 { start for ^5 { my $x will leave { .foo } = class :: { has $.x; method foo() { say "left $!x" } }.new(x => $_) } }

[13:17] <camelia> rakudo-moar dc7f27: OUTPUT¬´===SORRY!===‚ê§Word 'for' interpreted as a listop; please use 'do for' to introduce the statement control word‚ê§at <tmp>:1‚ê§------> await for for‚èè ^4 { start for ^5 { my $x will leave { ‚ê§Unexpected block in infix position (two terms in a‚Ä¶¬ª

[13:17] <jnthn> m: await do for ^4 { start for ^5 { my $x will leave { .foo } = class :: { has $.x; method foo() { say "left $!x" } }.new(x => $_) } }

[13:17] <camelia> rakudo-moar dc7f27: OUTPUT¬´left 0‚ê§left 0‚ê§left 1‚ê§left 1‚ê§left 2‚ê§left 2‚ê§left 0‚ê§left 3‚ê§left 1‚ê§left 3‚ê§left 4‚ê§left 2‚ê§left 3‚ê§left 4‚ê§left 4‚ê§left 0‚ê§left 1‚ê§left 2‚ê§left 3‚ê§left 4‚ê§¬ª

[13:18] <[Coke]> when jnthn wonders how something works, eek.

[13:19] <jnthn> Well, I think there's probably a way go get a data race in there somewhere

[13:19] <liztormato> On to Innsbruck&

[13:19] <jnthn> ooh

[13:19] <jnthn> That is probably a pretty drive :)

[13:19] * [Coke] adds 289 untagged tickets to the pile to review.

[13:20] <jnthn> the Salzburg - Innsbruck train is, anyway ;)

[13:21] <[Coke]> oh, and one [SPEC] ticket.

[13:22] <MetaZoffix> buggable: tags

[13:22] <buggable> MetaZoffix, Total: 1378; BUG: 542; UNTAGGED: 287; LTA: 118; NYI: 91; JVM: 62; RFC: 56; CONC: 51; SEGV: 37; TESTNEEDED: 37; REGEX: 34; UNI: 30; PERF: 26; @LARRY: 19; POD: 18; IO: 15; NATIVECALL: 14; BUILD: 11; PRECOMP: 11; TODO: 11; MATH: 7; OO: 7; TESTCOMMITTED: 7; STAR: 6; BOOTSTRAP: 5; GLR: 4; OSX: 4; REPL: 4; WEIRD: 3; CONFIGURE: 1; DOCS: 1; LIBRARY: 1; RT: 1; SITE: 1; SPEC: 1; See http://perl6.fail/ for details

[13:26] <[Coke]> those numbers are looking closer.

[13:26] <MetaZoffix> These now get auto-updated every 10 minutes (or rather... will be once I figure out why cron is not running my update script :P)

[13:28] <moritz> environment variables. It's always those crazy environment variables.

[13:28] <[Coke]> you fixed the bug with multiple tags, looks like.

[13:31] <jnthn> Seems that actually I can not shave the phaser yak this side of the encoding fixes for async sockets

[13:31] <jnthn> Which is nice 'cus it means I can get a fix in for that rather than piling up fixes that need fixes :)

[13:32] <moritz> is your YAG-Graph directional and acyclical? :-)

[13:32] <moritz> erm, yak-graph, I should say

[13:32] <jnthn> I really hope so :P

[13:33] <[Coke]> moritz: https://rt.perl.org/Ticket/Display.html?id=123667 - there's no sample code here to test.

[13:34] <[Coke]> ... oh, there's a sha1 buried in there.

[13:34] <[Coke]> nevermind.

[13:35] <moritz> [Coke]: if the sha1 isn't available anymore in the repo (branch deleted, maybe), feel free to close the ticket

[13:35] <[Coke]> it's there.

[13:35] <[Coke]> and even has a 'start' in it.

[13:36] <[Coke]> note that htmlify does have a theoretically functional start block in HEAD these days

[13:40] <[Coke]> m: s[ea] = "rea"; # RT #114388

[13:40] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=114388

[13:40] <camelia> rakudo-moar af4c2e: OUTPUT¬´Method 'match' not found for invocant of class 'Any'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:41] <MetaZoffix> m: $_ = 'meaw'; s[ea] = "rea";

[13:41] <camelia> rakudo-moar af4c2e: ( no output )

[13:41] <MetaZoffix> m: $_ = 'meaw'; s[ea] = "rea"; say $_

[13:41] <camelia> rakudo-moar af4c2e: OUTPUT¬´mreaw‚ê§¬ª

[13:42] <[Coke]> m: say (* < 7 and * > 5)(6)

[13:42] <camelia> rakudo-moar af4c2e: OUTPUT¬´True‚ê§¬ª

[13:42] <[Coke]> m: say (* < 7 and 7 > 5)(7)

[13:42] <camelia> rakudo-moar af4c2e: OUTPUT¬´No such method 'CALL-ME' for invocant of type 'Bool'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:45] <dalek> rakudo/async-socket-str-fixes: 6e76f7e | jnthn++ | src/core/IO/Socket/Async.pm:

[13:45] <dalek> rakudo/async-socket-str-fixes: Cope with empty socket reads.

[13:45] <dalek> rakudo/async-socket-str-fixes:

[13:45] <dalek> rakudo/async-socket-str-fixes: There's a problem with LAST/QUIT phasers in the case that an iteration

[13:45] <dalek> rakudo/async-socket-str-fixes: of the whenever never takes place. This wants fixing, but in our case

[13:45] <dalek> rakudo/async-socket-str-fixes: it's safe to work around the problem.

[13:45] <dalek> rakudo/async-socket-str-fixes: review: https://github.com/rakudo/rakudo/commit/6e76f7e3b9

[13:51] <jnthn> So, interesting problem

[13:51] <jnthn> Suppose you receive the byte buffer corresponding to "abcd"

[13:52] <jnthn> Previously, with a chars supply, we'd decode that packet as a unit

[13:52] <jnthn> That's crazy broken and I've fixed it

[13:52] <jnthn> However, I also break a test.

[13:52] <jnthn> Why? Because if you send that, and we use the streaming coder, it spits out only "abc"

[13:53] <jnthn> And you never see the "d" unless another packet comes through. Why? 'cus the first char we get might be a combining char.

[13:53] * moritz sees the problem

[13:53] <jnthn> Fixing the test is easy: you stick a \n on the end

[13:54] <jnthn> Control chars are always NFG terminators (just falls out of the Unicode grapheme boundary algo)

[13:56] <jnthn> I'm personally happy to change the test (and in errata)

[13:56] <jnthn> I think this will only be a limited practical problem for non-toy examples since:

[13:57] <jnthn> a) It doesn't even happen if you're doing binary protocls

[13:57] <jnthn> b) If you're doing a text-based protocol like HTTP correctly, you'll likely be doing it in binary and then handling decoding more carefully because the headers mean you have to switch encoding at some point

[13:58] <jnthn> c) If your protocol is line-based you're fine

[13:58] <jnthn> d) If you set an encoding like ASCII or latin-1, you can't have this problem (and I'll implement doing that shortly)

[13:59] <nine> jnthn: is there a way to force it to stop decoding and give you that last character without modifying the input data?

[13:59] <jnthn> Well, I guess that falls under

[14:00] <jnthn> e) If you have knowledge that lets you safely handle things, you can use the streaming decoder API, feeding it binary buffers, and tell it to just treat what it has as The End.

[14:00] <jnthn> (Exposing the streaming decode API is also part of what I'm doing)

[14:01] <jnthn> Which I think is a cleaner way to have people do it than trying to inject a back channel somewhere :)

[14:01] <jnthn> Or maybe I mis-understood what you meant?

[14:02] <nine> I was aiming at some "close the socket and read the rest" or something

[14:02] <jnthn> Oh, if the socket is closed then the supply is done

[14:02] <jnthn> And the done forces it to just finish decoding and spit out what it has

[14:03] <Woodi> socket can be closed only for sending, this don't change anything ?

[14:03] <nine> Ok, so unless your protocol is supremely weird and the last single character signifies the end of the stream, you're fine.

[14:09] <jnthn> Woodi: I thought close() closed it both ways, and shutdown was used if you wanted to close only one part?

[14:09] <jnthn> *one direction I guess

[14:11] <jnthn> So close would mean the echo client in the test could never receive the echo back

[14:13] <jnthn> If you were really building an echo server you'd surely just take the easy path and do it with bytes too :P

[14:13] <Woodi> I just found Winsock examples of "app" exit only when client part closes sending side, maybe totaly unrelevant here:  https://msdn.microsoft.com/pl-pl/library/windows/desktop/ms737591%28v=vs.85%29.aspx

[14:15] <Woodi> anyway, getting only "abc" is strange...

[14:16] <jnthn> Indeed. On the other hand, getting a grapheme in two parts is wrong.

[14:22] <jnthn> Either way, I should really implement shutdown :)

[15:13] <dalek> nqp/expose-decode-stream: b1fb57c | jnthn++ | t/moar/05-decoder.t:

[15:13] <dalek> nqp/expose-decode-stream: Tests for VM decoder line reading.

[15:13] <dalek> nqp/expose-decode-stream: review: https://github.com/perl6/nqp/commit/b1fb57c9ea

[16:14] <TimToady> I would like to point out that, despite the fact that "roast" is cute, that was not the primary motivation for picking the term; it was picked to be an unambiguous proper noun, and to serve the linguistic and cultural slot of a proper noun, and I don't think people quite realize how much you all have been using it as a proper noun

[16:14] <TimToady> both "perl6" and "lang" are very overloaded, in contrast, and not very searchable

[16:16] <TimToady> so I think "roast" should stay the name of the spectest repository, to give it the primacy it has, and if we want a language design repo, the correct approach is not to rename roast, but to include roast as part of a larger repo that can have any name you like

[16:18] <TimToady> we put a lot of work into unconfusing people that roast is THE language definition

[16:18] <TimToady> let's not dilute that

[16:21] <pmichaud> works for me

[16:21] <yoleaux2> 12:52Z <[Coke]> pmichaud: please see https://github.com/rakudo/rakudo/wiki/rt-introduction

[16:21] <yoleaux2> 13:06Z <[Coke]> pmichaud: - also ; it's not just [RFC]. See [@LARRY], [NYI], [TODO] - there's no guarantee any of these are actually rakudo bugs at this point.

[16:27] <TimToady> I am also vaguely suspicious of the attempt to use cuteness as an antipattern marker; sure, "You think that's cute today" is one of our Perl 6 design principles, but that's just a palliative to one of the longstanding principles of Perl culture, that humor is *orthogonal* to professionalism.

[16:27] <TimToady> We've been fighting that battle for a generation now.

[16:28] <pmichaud> +1.  I'm not against cuteness on its own... I still very much like "phaser", for example.  :)

[16:30] <pmichaud> [Coke]: +1 to the rt-introduction document you've drafted.  Yes, it means we may end up moving tickets from place to place.

[16:42] <dalek> nqp/expose-decode-stream: c0b8473 | jnthn++ | t/moar/05-decoder.t:

[16:42] <dalek> nqp/expose-decode-stream: Add tests for the byte-level Decoder ops.

[16:42] <dalek> nqp/expose-decode-stream: review: https://github.com/perl6/nqp/commit/c0b847375b

[16:42] <dalek> nqp/expose-decode-stream: 1507603 | jnthn++ | docs/ops.markdown:

[16:42] <dalek> nqp/expose-decode-stream: Document the new streaming decode ops.

[16:42] <dalek> nqp/expose-decode-stream: review: https://github.com/perl6/nqp/commit/150760304e

[16:43] <jnthn> Docs :)

[16:44] <jnthn> I'm vaguely hoping I might be able to trade in having written docs and a bunch of tests for somebody to port this stuff to the JVM backend? ;-)

[16:46] <dalek> nqp: b30de50 | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[16:46] <dalek> nqp: Map decodestream ops.

[16:46] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b30de50d46

[16:46] <dalek> nqp: 39d4365 | jnthn++ | t/moar/05-decoder.t:

[16:46] <dalek> nqp: Stub in tests for decoder.

[16:46] <jnthn> That merges the MoarVM support.

[16:46] <TimToady> lovely vague word, "vaguely" :)

[16:47] <timotimo> lovaguely

[16:48] <timotimo> jnthn: "config" will be the place to put things such as "what to do with b0rked utf8" and such?

[16:48] <timotimo> like, put replacement character or throw exception

[16:48] <jnthn> timotimo: Maybe some day

[16:48] <timotimo> python has that kind of option available

[16:48] <jnthn> timotimo: But for now, it'll be whether to translate newlines or not

[16:48] <timotimo> ah

[16:48] <jnthn> But yeah, it's intended as a hook for those sorts of things.

[16:48] <timotimo> good good

[16:48] <TimToady> speaking of overloaded terms, what is this "config" of which you speak?

[16:49] <timotimo> the third argument to nqp::decoderconfigure

[16:49] <timotimo> since nqp doesn't actually have named args, it doesn't matter :)

[16:49] <timotimo> er. i mean nqp ops don't have named args

[16:49] <jnthn> Not yet, no :)

[16:49] <TimToady> Not quite yet!

[16:49] <travis-ci> NQP build failed. Jonathan Worthington 'Merge branch 'expose-decode-stream''

[16:49] <travis-ci> https://travis-ci.org/perl6/nqp/builds/156574659 https://github.com/perl6/nqp/compare/8c76bca131bf...13a15a0adeeb

[16:49] <timotimo> it's definitely possible to do, since we'd have all necessary info available at compile time

[16:50] <timotimo> MoarVM op 'decoderconfigure' is unknown as a core or extension op

[16:50] <timotimo> ^- apparently forgot to bump?

[16:50] <jnthn> d'oh

[16:51] <dalek> nqp: f318591 | jnthn++ | tools/build/MOAR_REVISION:

[16:51] <dalek> nqp: Bump MOAR_REVISION for streaming decode ops.

[16:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f318591c91

[16:51] * TimToady wonders if the purpose of the ' there is to indicate the headsmack...

[16:51] <jnthn> Just maybe :)

[16:51] <Elfoonto> https://travis-ci.org/perl6/nqp/builds/156574659

[16:51] <jnthn> Or it looks like a drop of beer, which reflects that I might just have worked enough today

[16:52] <Elfoonto> Oh, it's nqp.

[16:52] <Elfoonto> Was wondering why buggable is silent :)

[16:52] <jnthn> Yeah, I wondered that too :)

[16:52] <jnthn> I was like "really, I have to check myself if it's a genuine fail?"

[16:52] <jnthn> Bots make me lazy :)

[16:52] <Elfoonto> :)

[16:54] <travis-ci> NQP build passed. Jonathan Worthington 'Bump MOAR_REVISION for streaming decode ops.'

[16:54] <travis-ci> https://travis-ci.org/perl6/nqp/builds/156575856 https://github.com/perl6/nqp/compare/13a15a0adeeb...f318591c9198

[16:55] <jnthn> For the immediate fix this supports over in async sockets, I can put in some conditional stuff to make it fall back on the existing things on JVM. But then for all the other things...that's gonna get old really fast.

[16:55] <jnthn> Such that it may make more sense just to port it.

[16:57] <jnthn> Anyways, time for some rest, and some cooking :)

[16:57] <timotimo> \o/

[17:04] <dalek> nqp: d14d42e | (Zoffix Znet)++ | docs/release_guide.pod:

[17:04] <dalek> nqp: Add a blurb on what to install to get jvm

[17:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d14d42e1a4

[17:44] <Elfoonto> NeuralAnomaly: status

[17:44] <NeuralAnomaly> Elfoonto, [‚úò] Next release will be in 2 weeks and 2 days. Since last release, there are 25 new still-open tickets (4 unreviewed and 0 blockers). See http://perl6.fail/release/stats for details

[17:50] <[Coke]> that url is showing tags for tickets that don't currently exist on the ticket.

[17:50] <[Coke]> e.g. for RT #129150

[17:50] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129150

[17:51] <[Coke]> (and I assume you know this, but no indication which of those tickets need review)

[17:52] <Elfoonto> I think the tag is still there, because the system added the proper-RT-tag for "bug" when it saw "[BUG]" in the title.

[17:52] <Elfoonto> So R6 is picking up "[RFC][IO]" from the subject line and "[Bug]" from the RT tag

[17:54] <Elfoonto> And now I tossed it and it got removed from R6 too

[17:55] <Elfoonto> And yeah, I'll add indication of which tickets need be reviewed. Right now it's visible only if you log in as release manager.

[17:57] <Elfoonto> http://i.imgur.com/bqrxHfY.png

[17:57] <Elfoonto> "review" in this instance means review by release manager to see if the ticket is a blocker or not (so on release date this is all done)

[17:59] <[Coke]> 129131 isn't a blocker, if that helps

[17:59] <[Coke]> nor is 142

[18:29] <ItayAlmog> Ok, i think that i have a way for a rep system on the attributes part, but how do you treat a method ?

[18:45] <[Coke]> wasn't that chat on #perl6 ?

[19:54] <dalek> roast: 97e3fe6 | usev6++ | S03-metaops/reduce.t:

[19:54] <dalek> roast: Skip newly dying test for JVM, RT #129153

[19:54] <dalek> roast: review: https://github.com/perl6/roast/commit/97e3fe6234

[19:54] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129153

[20:22] * lizmat waves from Innsbruck

[20:25] <masak> hello, Innsbruck

[20:26] <lizmat> masak  o/

[20:26] <lizmat> are you coming?

[20:35] <MasterDuke> masak: re RT #115758, in Any-iterable-methods.pm, i tried adding a new multi method max(:&by) that just called self.max(&by)

[20:35] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=115758

[20:35] <MasterDuke> this works for 'say {0 => 1, 1 => 0}.max(:by(*.value))', but breaks 'say 1 max 2 max 0' with the error message "Method 'arity' not found for invocant of class 'Callable'"

[20:36] <MasterDuke> i feel like i'm missing something, but i'm not sure what

[20:38] <geekosaur> that sounds like a change TimToady made recently

[20:38] <geekosaur> [30 22:29] <dalek> rakudo/nom: b1c444f | TimToady++ | src/core/metaops.pm:

[20:38] <geekosaur> [30 22:29] <dalek> rakudo/nom: Calling unary on reduce needs arity, not count

[20:39] <masak> lizmat: no :(

[20:39] <MasterDuke> geekosaur: yeah, was wondering about that. thought maybe i should reset back before his commit and then try my change

[20:40] <masak> MasterDuke: weird. wish I could help, but I don't have any leads.

[20:40] <MasterDuke> but i don't understand his change well enough to know if it is actually relevant, or am i just triggering on the 'arity'

[20:41] <MasterDuke> masak: ah well, thanks anyway, i'll keep at it

[20:43] <dalek> rakudo/nom: 9bafd6a | lizmat++ | src/core/metaops.pm:

[20:43] <dalek> rakudo/nom: Make many metaops about 10% faster

[20:43] <dalek> rakudo/nom:

[20:43] <dalek> rakudo/nom: By using nqp::eqaddr / nqp::not_i instead of =:= and !  This is

[20:43] <dalek> rakudo/nom: because these operators are too accepting, so they cannot be optimized

[20:43] <dalek> rakudo/nom: (yet, anyway).

[20:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9bafd6ae01

[20:50] <timotimo> lizmat: neat :)

[20:50] <lizmat> the benchmark was: my @a = ^100; for ^1000 { [-] @a }

[20:51] <timotimo> is the improvement noticable with for ^100 X ^100  { } for example?

[20:56] <lizmat> timotimo: lemme see

[21:00] <lizmat> eh, that one is not covered in metaops.src, and I covered only that file right now

[21:04] <timotimo> oops!

[21:04] <timotimo> i thought i saw metaop_cross there

[21:04] <timotimo> yeah, the very fir st part of the diff has METAOP_CROSS with a change in it

[21:05] <timotimo> dinner time! afk

[21:33] <MasterDuke> jnthn: could i bother you for a pointer re RT #115758? did you happen to catch my conv with masak and geekosaur approx an hour ago?

[21:33] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=115758

[21:43] <dalek> rakudo/nom: ec9e814 | lizmat++ | src/core/metaops.pm:

[21:43] <dalek> rakudo/nom: Squeeze another 5% out of simple [op] @values

[21:43] <dalek> rakudo/nom:

[21:43] <dalek> rakudo/nom: Rewrite the whole logic in nqp ops without need to return anything

[21:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ec9e814a74

[21:43] <jnthn> m: { 0 => 1, 1 => 0 }.^lookup('max').signature.say

[21:43] <camelia> rakudo-moar 9bafd6: OUTPUT¬´($: | is raw)‚ê§¬ª

[21:44] <jnthn> m: { 0 => 1, 1 => 0 }.^lookup('max').cando(\({ 0 => 1, 1 => 0 })).say

[21:44] <camelia> rakudo-moar 9bafd6: OUTPUT¬´(max)‚ê§¬ª

[21:44] <jnthn> m: { 0 => 1, 1 => 0 }.^lookup('max').cando(\({ 0 => 1, 1 => 0 }))[0].signature.say

[21:44] <camelia> rakudo-moar 9bafd6: OUTPUT¬´($: *%_)‚ê§¬ª

[21:44] <jnthn> grrr :)

[21:46] <MasterDuke> yeah, i haven't been able to ^lookup or ^find_method anything that seemed helpful

[21:46] <jnthn> Well, I was curious if we overrode it specially on Hash

[21:46] <jnthn> But I guess not

[21:47] <jnthn> m: { 0 => 1, 1 => 0 }.max(:by({ .WHAT.say; .value }))

[21:47] <camelia> rakudo-moar 9bafd6: ( no output )

[21:47] <jnthn> m: { 0 => 1, 1 => 0 }.pairs.max(:by({ .WHAT.say; .value }))

[21:47] <camelia> rakudo-moar 9bafd6: ( no output )

[21:47] <jnthn> huh

[21:47] <jnthn> m: [ 0 => 1, 1 => 0 ].max(:by({ .WHAT.say; .value }))

[21:47] <camelia> rakudo-moar 9bafd6: ( no output )

[21:47] <MasterDuke> m: say { 0 => 1, 1 => 0 }.max(:by({ .WHAT.say; .value }))

[21:47] <camelia> rakudo-moar 9bafd6: OUTPUT¬´1 => 0‚ê§¬ª

[21:47] <jnthn> Uh, does :by work on *anything*?

[21:48] <jnthn> m: [ 0 => 1, 1 => 0 ].max({ .WHAT.say; .value })

[21:48] <camelia> rakudo-moar 9bafd6: OUTPUT¬´(Pair)‚ê§(Pair)‚ê§¬ª

[21:48] <jnthn> m: [ 0 => 1, 1 => 0 ].pairs.max({ .WHAT.say; .value })

[21:48] <camelia> rakudo-moar 9bafd6: OUTPUT¬´(Pair)‚ê§(Pair)‚ê§¬ª

[21:48] <MasterDuke> m: say max :by(*.value), { 0 => 1, 1 => 0 }

[21:48] <jnthn> m: { 0 => 1, 1 => 0 }.pairs.max({ .WHAT.say; .value })

[21:48] <camelia> rakudo-moar 9bafd6: OUTPUT¬´0 => 1‚ê§¬ª

[21:48] <camelia> rakudo-moar 9bafd6: OUTPUT¬´(Pair)‚ê§(Pair)‚ê§¬ª

[21:48] <jnthn> Yes but that's on the sub form

[21:48] <jnthn> the method just takes the condition directly, not as a named arg?

[21:49] <jnthn> m: say { 0 => 1, 1 => 0 }.max(*.value)

[21:49] <camelia> rakudo-moar 9bafd6: OUTPUT¬´0 => 1‚ê§¬ª

[21:49] <jnthn> That loosk right

[21:49] <jnthn> *looks

[21:49] <MasterDuke> there's no named arg in the method

[21:50] <jnthn> Right

[21:50] <jnthn> So did the RT ticket simply expect something to work that was never intended to? :)

[21:50] <jnthn> Do we have any other places that have :by on the method form?

[21:51] <MasterDuke> that's what i was trying to ask in my comment, but didn't really explain

[21:51] <MasterDuke> Supply

[21:51] <jnthn> Hmm

[21:52] <jnthn> m: Supply.from-list(1..10).max(-*).tap(&say)

[21:52] <camelia> rakudo-moar ec9e81: OUTPUT¬´1‚ê§¬ª

[21:52] <jnthn> m: Supply.from-list(1..10).max(by => -*).tap(&say)

[21:52] <camelia> rakudo-moar ec9e81: OUTPUT¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§¬ª

[21:52] <jnthn> o.O

[21:53] <jnthn> m: Supply.from-list(1..10).max.tap(&say)

[21:53] <camelia> rakudo-moar ec9e81: OUTPUT¬´1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§6‚ê§7‚ê§8‚ê§9‚ê§10‚ê§¬ª

[21:54] <jnthn> What makes you think Supply takes it? :)

[21:54] <MasterDuke> right, saw the &by, just realized it's not named

[21:54] <jnthn> :)

[21:55] <jnthn> I'm curious if any other non-max methods take :by though. I'd thought we were doing that on the sub forms to not confuse the transform with a list value

[21:55] <jnthn> But on the method forms there's no such ambiguity

[21:55] <MasterDuke> git grep 'method.*:by'

[21:56] <MasterDuke> returns no results

[21:56] <jnthn> Suggests "no" then :)

[21:56] <jnthn> In which case the ticket is kinda asking us to add them *everywhere* since it'd be odd to do it just for max. :)

[21:56] <jnthn> But I'm not really that inclined to.

[21:57] <MasterDuke> the sub forms of min,max,minmax all have :&by, but those are it

[22:00] <MasterDuke> but thanks for the help, i'll comment on the ticket again

[22:01] <jnthn> Yeah, so far as I recall we went that way on the subs, and positional for the methods, and it was a deliberate choice

[22:05] <jnthn> sleep time for me; 'night o/

[22:05] <MasterDuke> night
