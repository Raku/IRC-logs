[08:19] <RabidGravy> eugh

[08:19] <lizmat> good *, #perl6-dev!

[08:19] <lizmat> Files=1154, Tests=53760, 213 wallclock secs (12.92 usr  3.70 sys + 1297.88 cusr 121.07 csys = 1435.57 CPU)

[08:20] <RabidGravy> has something changed in the implementation of return in the last few months that anyone can think of?

[08:20] <RabidGravy> something really really weird here

[08:23] <[TuxCM]> This is Rakudo version 2016.10-307-gbca0ae5 built on MoarVM version 2016.10-172-g1ba1dd2

[08:23] <[TuxCM]> csv-ip5xs        3.106

[08:23] <[TuxCM]> test            13.877

[08:23] <[TuxCM]> test-t           6.873

[08:23] <[TuxCM]> csv-parser      14.471

[08:26] <RabidGravy> This https://github.com/sergot/http-useragent/issues/161 seems to be entirely contingent on the return in https://github.com/retupmoca/P6-Compress-Zlib-Raw/blob/master/lib/Compress/Zlib/Raw.pm6#L160

[08:27] <RabidGravy> which seems somewhat odd

[08:29] <RabidGravy> take the return out and it works, put it back in it fails

[08:29] <RabidGravy> I'm not sure how it can be reproduced for yet another RT in the category of "Cannot invoke this object"

[08:41] <lizmat> does it also happen if you disable spesh / optimization / jit ?

[08:48] <lizmat> [TuxCM]: last bench seems to have a rise all across the board ?

[09:07] <RabidGravy> MVM_SPESH_DISABLE doesn't seem to make any difference, nor does the optimisation llevel

[09:08] <RabidGravy> but yeah it does feel like an optimization sort of thing

[09:12] <lizmat> does it still have the problem if the sub isn't "our"

[09:12] <lizmat> would be my last guess

[09:26] <stmuk_> any RPM packager want to fix https://pkgs.org/fedora-24/fedora-updates-x86_64/rakudo-star-0.0.2016.07-1.fc24.x86_64.rpm.html ? :)

[09:27] <stmuk_> (see comments on perl6-users)

[09:27] <stmuk_> I'm not a RPM user myself

[09:27] <dalek> roast: fa97aa9 | usev6++ | S12-methods/attribute-params.t:

[09:27] <dalek> roast: Unfudge tests for native attribute binding on JVM

[09:27] <dalek> roast: review: https://github.com/perl6/roast/commit/fa97aa9687

[09:58] <nine> stmuk_: fix in what way?

[10:00] <stmuk_> nine: well by adding the rakudo star modules to it

[10:00] <nine> RabidGravy: return became a proper control exception this summer

[10:00] <stmuk_> "No that's an incomplete version lacking the modules which makes rakudo into rakudo star. Most importantly panda (the module installer) is missing. Neither does it even have full docs since perl6intro.pdf is missing.

[10:02] <nine> I really question the utility of distro packages for star. Why not simply package rakudo and the modules individually and maybe create a rakudo star meta package that just depends on those?

[10:04] <stmuk_> yes I say exactly that on perl6-users .. I was hoping to link to http://www.nntp.perl.org/ but my email isn't indexed yet

[10:06] <stmuk_> anyway I predict more perl6 newbies asking how to install panda on Rakudo Star

[10:08] <nine> Sounds like a good little project for my next Freestyle Friday: give packaging modules a real try

[10:21] <dalek> rakudo/nom: a3be654 | lizmat++ | src/core/Main.pm:

[10:21] <dalek> rakudo/nom: Show possible enum values in usage message

[10:21] <dalek> rakudo/nom:

[10:21] <dalek> rakudo/nom: If we know it's an enum, we might as well show which values would be

[10:21] <dalek> rakudo/nom: legal.  Make sure though it fits on one line.

[10:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a3be654c50

[10:23] <dalek> rakudo/nom: 3dcc52b | lizmat++ | docs/ChangeLog:

[10:23] <dalek> rakudo/nom: Tell about a3be654

[10:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3dcc52b348

[10:34] <RabidGravy> nine, I was thinking the same thing the other day, we could do with something like Distzilla with plugins for packaging and stuff

[10:39] <stmuk_> maybe perl 5's cpan2rpm might help

[10:50] <timotimo> it sounds problematic that googling for perl6 instructions didn't get them anywhere near our docs

[10:52] <lizmat> perhaps google bubble: for me "perl6 instructions" rakudo.org/how-to-get-rakudo as first, and https://perl6.org/getting-started/ as second

[10:52] <stmuk_> timotimo: I don't understand

[10:53] <timotimo> "how to run perl6 script" - "We have included how to run perl script.

[10:53] <timotimo> Limit results to how to run perl6 script?

[10:53] <timotimo> "

[10:53] <timotimo> wow, duckduckgo is *super* unhelpful for this

[10:53] <stmuk_> I'm getting better perl 6 google results than last time i looked

[10:54] <moritz> ddg has some feedback mechanism

[10:54] <moritz> please use it :-)

[10:54] <stmuk_> I would hope "private mode" would break out of the google bubble

[11:07] <lizmat> afk&

[12:52] <MasterDuke> does anyone else have problems rebuilding rakudo-j after making changes to nqp-j? sometimes i can make a change in nqp, rebuild, and then rebuild rakudo just fine. other times i get "java.lang.RuntimeException: Missing or wrong version of dependency 'gen/jvm/stage2/QRegex.nqp'" when rebuilding rakudo

[12:53] <psch> MasterDuke: yeah, it's either QRegex or Pod for me, usually

[12:53] <psch> MasterDuke: i tend to always 'gif clean -xdf' first nowadays

[12:53] <MasterDuke> and the only solution seems to delete everything in my --prefix and then rebuild nqp

[12:53] <MasterDuke> yep, QRegex this time

[12:54] <MasterDuke> annoying, my system doesn't build nqp-j and rakudo-j all that quickly

[12:54] <psch> well, it shouldn't be too hard to figure out what causes the dependency mismatch

[12:54] <psch> or rather, whether it's a real mismatch or if we're just checking the wrong thing

[12:55] * bartolin uses 'git clean -dfx; perl Configure.pl --backends=jvm --gen-nqp && make'

[12:55] <psch> almost the same, except i use --make-install for Configure.pl :)

[12:56] <Zoffix> Actually, my last night's concern seems to have been valid. It was just the falsy bug that prevented from the issue from showing up

[12:56] <Zoffix> m: my @*ARGS  = BEGIN <Meow>; sub MAIN (Str $blah) { say "$blah $blah.^name()" }

[12:56] <camelia> rakudo-moar 3dcc52: OUTPUT«Meow Str␤»

[12:56] <MasterDuke> perl Configure.pl --prefix=/home/dan/Source/perl6/install/ --backends=jvm && make -j8 install

[12:56] <Zoffix> m: my @*ARGS  = BEGIN <Truew>; sub MAIN (Str $blah) { say "$blah $blah.^name()" }

[12:56] <camelia> rakudo-moar 3dcc52: OUTPUT«Truew Str␤»

[12:56] <Zoffix> m: my @*ARGS  = BEGIN <True>; sub MAIN (Str $blah) { say "$blah $blah.^name()" }

[12:56] <camelia> rakudo-moar 3dcc52: OUTPUT«Usage:␤  <tmp> <blah> ␤»

[12:56] <Zoffix> m: my @*ARGS  = BEGIN <True>; sub MAIN ($blah) { say "$blah $blah.^name()" }

[12:56] <camelia> rakudo-moar 3dcc52: OUTPUT«True Bool␤»

[12:56] <psch> m: say val("True")

[12:56] <camelia> rakudo-moar 3dcc52: OUTPUT«True␤»

[12:56] <psch> m: say val("True").WHAT

[12:56] <camelia> rakudo-moar 3dcc52: OUTPUT«(Str)␤»

[12:57] <Zoffix> It doesn't get to val()

[12:57] <psch> hm, and i thought Bool means "this switch doesn't take an arg and is either negated or not"

[12:57] <psch> MAIN parsing is hard :S

[12:57] <Zoffix> huh?

[12:57] <Zoffix> My MAIN doesn't expect a Bool

[12:57] <Zoffix> It wasn't a string. I'm passing a string that just happen to be an Enum

[12:58] <psch> ohh, right, Enum

[12:58] <Zoffix> s/wasn't/wants/;

[12:58] <psch> ...geez, that's been in for like a year iirc

[12:58] <psch> that Bool is an Enum i mean

[12:58] <Zoffix> No, since yesterday.

[12:58] <Zoffix> Oh

[12:59] <Zoffix> So basically now our MAIN will convert anything that matches an Enum to its value, regardless of whether we're actually have an Enum type-contraint

[12:59] <timotimo> wait, it goes for every single enum that's in scope?

[13:00] <Zoffix> Yes

[13:00] <Zoffix> uses ::()

[13:00] <Zoffix> https://github.com/rakudo/rakudo/blob/nom/src/core/Main.pm#L19

[13:00] <timotimo> that's magical

[13:03] <Zoffix> I'm thinking of reverting this feature for the release, so we could shake out issues like that

[13:03] <psch> shouldn't it be sufficient to first check if the constraint is an Enum?

[13:03] <psch> assuming we have the actual Parameter in scope at that moment

[13:04] <timotimo> yeah, the commit is so fresh it might be a good idea to revert it just for the release

[13:04] <timotimo> yeah, $m should have all the candidates and such

[13:04] <timotimo> we should be able to go through the signatures and look for enum-HOWed type constraints

[13:04] <psch> oh hm, that kinda replicates MMD though, doesn't it

[13:04] <Zoffix> psch, yeah, that should work, but currently the conversion happens before we get to the sub and even then we don't check individual args, but rather check if there are any matching candidates and  then just give all the args to Main

[13:04] <psch> i mean, if we walk through candidate and whathaveyou...

[13:05] * psch dimly recalls some bits of the structure of MAIN handling

[13:07] <dalek> rakudo/nom: e8f938b | bartolin++ | src/core/Rakudo/Internals.pm:

[13:07] <dalek> rakudo/nom: Remove bandaid for r-j, native attribute works no

[13:07] <dalek> rakudo/nom:

[13:07] <dalek> rakudo/nom: psch++ for implementing attributive parameter binding on the JVM

[13:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e8f938b0f6

[13:07] <dalek> rakudo/nom: e23566e | (Zoffix Znet)++ | src/core/Rakudo/Internals.pm:

[13:07] <dalek> rakudo/nom: Merge pull request #920 from usev6/patch-3

[13:07] <dalek> rakudo/nom:

[13:07] <dalek> rakudo/nom: Remove bandaid for r-j, native attribute works now

[13:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e23566e19b

[13:17] <dalek> roast: 47a9ec1 | (Zoffix Znet)++ | S06-other/main.t:

[13:17] <dalek> roast: Temporarily fudge enum MAIN tests for release

[13:17] <dalek> roast:

[13:17] <dalek> roast: https://irclog.perlgeek.de/perl6-dev/2016-11-19#i_13595383

[13:17] <dalek> roast: review: https://github.com/perl6/roast/commit/47a9ec10c9

[13:24] <dalek> rakudo/nom: a264f0a | (Zoffix Znet)++ | t/04-nativecall/20-concurrent.t:

[13:24] <dalek> rakudo/nom: Revert "Test no longer flops."

[13:24] <dalek> rakudo/nom:

[13:24] <dalek> rakudo/nom: This reverts commit 84eaff47f274b203b8600b78d4149d3de1bc52a1.

[13:24] <dalek> rakudo/nom:

[13:24] <dalek> rakudo/nom: As AppVeyor shows the test still flops on Windows:

[13:24] <dalek> rakudo/nom: https://ci.appveyor.com/project/moritz/rakudo/build/1.0.1552/job/3009q95at2axp4i7

[13:24] <dalek> rakudo/nom:

[13:24] <dalek> rakudo/nom: Ticket re-opened:

[13:24] <dalek> rakudo/nom: https://rt.perl.org/Ticket/Display.html?id=130042

[13:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a264f0aed1

[13:31] <jnthn> So why not skip it just for Windows?

[13:31] <Zoffix> Fair point. Will do shortly

[13:31] <jnthn> Thanks.

[13:32] <jnthn> afaik it's not failed again on Linux/OSX...

[13:32] <Zoffix> Yeah, seems to be good there.

[13:32] <jnthn> Which is...odd, but if that remains the case, it points at a Windows-specific issue.

[13:33] <jnthn> (And it's nice to keep it running on Linux/OSX Travis to have more data.)

[13:35] <dalek> rakudo/nom: 1549161 | (Zoffix Znet)++ | / (2 files):

[13:35] <dalek> rakudo/nom: Temporarily revert sub MAIN accepting Enum

[13:35] <dalek> rakudo/nom:

[13:35] <dalek> rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2016-11-19#i_13595383

[13:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/15491613bc

[13:36] <dalek> rakudo/nom: 25b0a55 | (Zoffix Znet)++ | t/04-nativecall/20-concurrent.t:

[13:36] <dalek> rakudo/nom: Unfudge test for non-Windows platforms

[13:36] <dalek> rakudo/nom:

[13:36] <dalek> rakudo/nom: Floppiness is not observed there.

[13:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/25b0a55b17

[13:36] <Zoffix> NeuralAnomaly, status

[13:36] <NeuralAnomaly> Zoffix, [✔] Next release is today. Since last release, there are 38 new still-open tickets (0 unreviewed and 0 blockers) and 0 unreviewed commits. See http://perl6.fail/release/stats for details

[13:37] * Zoffix fires up a test release run on test repos

[14:18] <viki> Hm, this test fails for me on Windows 10: https://github.com/perl6/roast/blob/master/S02-literals/quoting.t#L401

[14:19] <viki> never mind, works after running `chcp 65001`

[14:19] <viki> .oO( wonder if the test should do that... )

[14:34] <MasterDuke> idle curiosity while waiting for rakudo-j to build. is there anything in particular that causes the JVM build to be so much slower? sure, the JVM doesn't start up all that quickly, but stage parse takes 170s for me, which i assume isn't starting up the JVM multiple times

[14:35] <MasterDuke> any low-hanging fruit i could look into?

[14:36] <psch> MasterDuke: well, consider that parsing a Perl 6 or NQP class means generating a Java class during runtime

[14:37] <Zoffix> hm... lots of stresstest failures on Windows 10.... Seems like at least some of them are likely due to my using the default command prompt :/

[14:37] <psch> MasterDuke: add to that the "normal" enhancing-the-grammar overhead on the Perl 6 level -- which is basically "create a new grammar class that inherits the old one and adds the new rule"...

[14:37] <Zoffix> Ummmm

[14:38] <Zoffix> "Windows Firewell has blocked some features of this app: "moar.exe"" :(

[14:38] <psch> MasterDuke: plus we rely on a lot on invokedynamic, which basically means "decide this dispatch at runtime", which kills the JVM JIT

[14:38] <Zoffix> Wonder where it was connecting to (didn't even look before clsoing the windows :())_

[14:39] <psch> well, not quite "kills", more like "makes you do the same work manually", which i don't think we do right now

[14:39] <psch> that might be kind of LHF-y, actually

[14:39] <psch> lemme confirm my suspicion first... :)

[14:39] <jnthn> invokedynamic was introduced in order to *inform* the JIT about things

[14:40] <psch> jnthn: right, but the JIT can only work on indy if it has the exact same set of arguments

[14:40] <MasterDuke> psch: hmm, sounds like not much LHF

[14:40] <psch> jnthn: otherwise the FALLBACK needs to cache different, oft-occuring paths itself

[14:40] <Zoffix> Failures: https://gist.github.com/zoffixznet/1b703b9cd970edcce28cb6583b77309e

[14:41] <psch> jnthn: at least that's what my digging around indy and jvminterop around christmas 2014 turned up

[14:41] <jnthn> psch: You can update the callsite with further conditions in the fallback, though, PIC-style. Think we do that somewhere or other.

[14:41] <jnthn> It's been a while since I looked at it, mind.

[14:41] <psch> right, same here :)

[14:42] <psch> i'm not aware of the meaning of "PIC-style" though

[14:43] <psch> from the looks of it we're hanging invocation targets onto the CallSite, which seems sensible enough

[14:45] <MasterDuke> while we're discussing the JVM, how come its backtrace and --ll-exception output is different from moar in the first place?

[14:45] <psch> do you have an example of how it's different?

[14:46] <MasterDuke> perl6-m --ll-exception -e 'say 1/0' Attempt to divide 1 by zero using div    at gen/moar/m-CORE.setting:24539  (/usr/share/perl6/runtime/CORE.setting.moarvm:throw)

[14:47] <MasterDuke> perl6-j -e 'say 1/0' Attempt to divide 1 by zero using div   in method floor at gen/jvm/CORE.setting line 53

[14:48] <MasterDuke> using a moar from before my line directive support

[14:48] <psch> so it's a line break difference?  might be we print instead of println in ExceptionHandling.java

[14:49] <MasterDuke> not that, moar mentions m-CORE.setting and its line number (which is what i changed) and the method in the runtime

[14:49] <psch> oh

[14:50] <psch> $ ./perl6-j -e'say 1/0'

[14:50] <psch> Attempt to divide 1 by zero using div in method floor at gen/jvm/CORE.setting line 25499

[14:50] <psch> is what i got locally?

[14:50] <MasterDuke> jvm just mentions CORE.setting and its line number (which is picking up the line directive)

[14:50] <MasterDuke> perl6-j --ll-exception -e 'say 1/0' Attempt to divide 1 by zero using div   in throw (gen/jvm/CORE.setting:26881)

[14:50] <psch> oh, yes.  we don't add the backend prefix for r-j

[14:50] <Zoffix> jnthn, you develop on Windows, right? And don't get spectest failures? I'm just wondering what do I do with all of my failures as far as release goes.

[14:50] <MasterDuke> that's from a r-j before my line directive patch

[14:51] <psch> that's somewhere in Makefile-JVM.in

[14:51] <psch> i mean, we used to have m-CORE.setting directly in gen/

[14:51] <psch> and there it makes sense to prefix it with the backend

[14:51] <psch> ...or maybe it was even in the repo root, i don't remember

[14:52] <psch> i mean, gen/jvm/ vs gen/moar/ is probably pretty sensible

[14:52] <psch> and, for conformitys sake, i'd want to say that moar should stop adding that prefix

[14:53] <psch> although maybe r-js will add the prefix too and r-j is in the wrong... :)

[14:53] <jnthn> Zoffix: Mostly on Linux these days

[14:53] <jnthn> Zoffix: I used Rakudo on Windows (which is why I ran into and patched a pre-comp issue or two earlier on in the month)

[14:54] <jnthn> There's long been a small number of spectest failures on Windows, though.

[14:54] <psch> MasterDuke: i'm afraid i still don't recognize the actual problem, honestly

[14:54] <psch> r: say 1/0

[14:54] <camelia> rakudo-jvm 76b061: OUTPUT«Attempt to divide 1 by zero using div␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[14:54] <camelia> ..rakudo-moar 25b0a5: OUTPUT«Attempt to divide 1 by zero using div␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[14:54] <Zoffix> OK

[14:55] <psch> those do look identical, though i suppose camelia has a reason for not merging them

[14:55] <psch> maybe the differing gitref

[14:55] <Zoffix> A lot of failures appear to be bogus test that expect too much precision out of floating point math

[14:55] <jnthn> Zoffix: The power and num ones are long-standing for sure; iirc some oddity around NaN or Inf handling

[14:55] <MasterDuke> moar mentions the source+line number *and* the runtime, jvm just mentions the source+line number

[14:55] <MasterDuke> when you add --ll-exception

[14:56] <psch> ahh, this bit "(/usr/share/perl6/runtime/CORE.setting.moarvm:throw)"?

[14:56] <MasterDuke> yeah

[14:56] <psch> hm, i'd have to look into what moar does there, actually

[14:56] <psch> the place it should be added would still be ExceptionHandling.java i suppose

[14:57] <psch> in nqp/src/vm/jvm/runtime/org/perl6/nqp/runtime iirc

[14:57] <jnthn> iirc, it's just choosing to report both the high level language location from resolving annotations, and also the bytecode location

[14:57] <jnthn> I'd not except --ll-exception to look the same across backends.

[14:57] <psch> same here, actually

[14:58] <psch> --ll-exception is the more-user-friendly version of NQP_VERBOSE_EXCEPTIONS

[14:58] <psch> ...in my mind

[14:58] <psch> yes, the impl details are different

[14:58] <psch> but it's more a "hand this to someone who knows more" kinda deal

[14:59] <psch> and NQP_VERBOSE_EXCEPTION will always be different across backends, except if we bend backwards to a perilous degree

[14:59] <MasterDuke> ok, that's not a big deal. however, i'm still trying to get jvm to report the filename in the line directive (it *is* getting the line number) instead of gen/jvm/CORE.setting

[14:59] <psch> MasterDuke: filename of the file in src/core?

[15:00] <MasterDuke> yep

[15:00] <psch> MasterDuke: that's probably a really fun romp through nqp/src/vm/jvm/QAST/Compiler.nqp

[15:00] <Zoffix> m: say 108556850480095346844596918561061146623193876257401611187638859870020063756287.base: 2

[15:00] <camelia> rakudo-moar 25b0a5: OUTPUT«1111000000000000111111111111111100000000000011111111111111110000000000001111111111111111000000000000111111111111111100000000000011111111111111110000000000001111111111111111000000000000111111111111111100000000000011111111111111110000000000000111111111111111␤»

[15:00] <psch> MasterDuke: that's where we generate the Java annotations, which, currently utilize the file we're actually compiling

[15:00] <MasterDuke> yeah, that's where/what i'm playing around with now

[15:01] <psch> MasterDuke: i imagine whatever your moar solution there was is probably also along the lines of "figure out which file this bit of code originally came from and find the right line" or something?

[15:01] <MasterDuke> i.e., got it to pick up the line numbers in the directive so far

[15:01] <Zoffix> Well, I'm gonna go ahead with the release. I see pick test is likely bogus. Some of the failing procasync tests say "The syntax of the command is incorrect."

[15:01] <Zoffix> And both master and 6.c-errata run clean on Linux

[15:02] <psch> i guess you always parse the '## from file $some-core-file ' or whatever exactly gen-cat puts there and count the lines yourself..?

[15:02] <MasterDuke> psch: pretty much. find the offset from the most recent line directive and report that

[15:02] <Zoffix> Hm, gonna build a 2016.10 and see if the precomp test fails there too

[15:03] <MasterDuke> psch: https://github.com/perl6/nqp/commit/0538cae0b6d017c5b3915302a9ca8cbedbba80ec

[15:03] <Zoffix> (it's the first time I'm testing the release on Windows too, so I dunno if any of this stuff is brand new)

[15:05] <psch> MasterDuke: the QASTCompilerMAST.nqp diff shouldn't be to hard to replicate around QAST/Compiler.nqp:4195, from the looks of it

[15:06] <psch> MasterDuke: it might depend on changes to JAST::Annotation though

[15:06] <MasterDuke> psch: this is what i've done so far, which get the line number (and does parse the filename, but doesn't put it in the backtrace): https://gist.github.com/MasterDuke17/6a8beb41230b2b9f425b71b52ef52ab5

[15:06] <psch> ah, right.  there was a 53 there in your paste earlier

[15:07] <psch> which seems awefully early for CORE.setting for div-by-zero

[15:07] <psch> MasterDuke: org/perl6/nqp/jast2bc/JASTCompiler.java:290 or there abouts is where we put that into the bytecode

[15:08] <psch> MasterDuke: mind, you still have to extend JAST::Annotation to actually know the file, which might mean diving a bit deeper into what exactly where doing at that spot in JASTCompiler

[15:09] <psch> MasterDuke: the objectweb.asm docs are pretty good though, at http://asm.ow2.org/asm40/javadoc/user/index.html?org/objectweb/asm/package-summary.html

[15:09] <MasterDuke> psch: ahh, this looks promising, many thanks!

[15:10] <psch> ++MasterDuke

[15:10] <psch> :)

[15:12] <Zoffix> oh 2016.10 doesn't even build on Windows.

[15:12] <Zoffix> Oh well. Lesson to learn for Zoffix: test on Windows more frequently.

[15:12] <Zoffix> NeuralAnomaly, cut the release

[15:12] <NeuralAnomaly> Zoffix, Will do! If you're feeling particularly naughty, you can watch me at http://perl6.fail/release/progress or go look at some cats http://icanhas.cheezburger.com/lolcats

[15:12] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Prep done

[15:12] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠☠☠☠☠ ABNORMAL EXIT!

[15:12] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠ NQP: Bump MoarVM version

[15:12] <Zoffix> :o

[15:13] <MasterDuke> Zoffix: i think that's why stmuk_ didn't do a .msi for r*

[15:13] <Zoffix> Oh, nqp is already bumped

[15:13] <Zoffix> NeuralAnomaly, status

[15:13] <NeuralAnomaly> Zoffix, [✔] Next release is today. Since last release, there are 38 new still-open tickets (0 unreviewed and 0 blockers) and 0 unreviewed commits. See http://perl6.fail/release/stats for details

[15:14] <Zoffix> NeuralAnomaly, steps

[15:14] <NeuralAnomaly> Zoffix, all pre nqp r post pre-r6 pre-blank-slate nqp-clone nqp-bump-vers nqp-build nqp-tar nqp-tar-build nqp-tag nqp-tar-sign nqp-tar-copy r-clone r-prep-ann r-bump-vers r-build r-p5 r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[15:14] <Zoffix> NeuralAnomaly, run pre nqp r post pre-r6 pre-blank-slate nqp-clone nqp-build nqp-tar nqp-tar-build nqp-tag nqp-tar-sign nqp-tar-copy r-clone r-prep-ann r-bump-vers r-build r-p5 r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[15:14] <Zoffix> :/

[15:14] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Prep done

[15:14] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠ NQP: Bump MoarVM version

[15:14] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠☠☠☠☠ ABNORMAL EXIT!

[15:15] <Zoffix> NeuralAnomaly, I told you not to bump it!

[15:15] <jnthn> heh, is that 'cus I bumped it yesterday and so it tries to make an empty commit? :)

[15:15] <Zoffix> Yeah :)

[15:15] <jnthn> d'oh :)

[15:15] <jnthn> Being helpful fail :)

[15:15] <Zoffix> The bot just needs to check if it's already the right version

[15:19] <Zoffix> NeuralAnomaly, cut the release

[15:19] <NeuralAnomaly> Zoffix, Will do! If you're feeling particularly naughty, you can watch me at http://perl6.fail/release/progress or go look at some cats http://icanhas.cheezburger.com/lolcats

[15:19] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Prep done

[15:19] <dalek> nqp: 7d9c105 | (Zoffix Znet)++ | VERSION:

[15:19] <dalek> nqp: bump VERSION to 2016.11

[15:19] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7d9c105cb8

[15:21] <psch> MasterDuke: the other end is probably something like teaching every CompilationUnit that the Annotations don't only contain a file number, but also a file name

[15:22] <psch> MasterDuke: that probably involves changes to CodeRefAnnotations.java, as well as CompilationUnit.java to read those properly, although i've only skimmed this a bit right now

[15:25] <MasterDuke> psch: cool, thanks for the pointers

[15:27] * Zoffix spots a failed JVM test :/

[15:27] <Zoffix> t/nqp/059-nqpop.t ......................

[15:28] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠☠☠☠☠ ABNORMAL EXIT!

[15:28] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠ NQP: build and test

[15:28] <Zoffix> NeuralAnomaly, run nqp-build nqp-tar nqp-tar-build nqp-tag nqp-tar-sign nqp-tar-copy r-clone r-prep-ann r-bump-vers r-build r-p5 r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[15:28] <MasterDuke> man, there's visitLineNumber, but no visitFileName, couldn't be that easy...

[15:28] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠ NQP: build and test

[15:28] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠☠☠☠☠ ABNORMAL EXIT!

[15:29] <Zoffix> /o\

[15:29] <Zoffix> My awesome bot is showing all its cracks today :P

[15:29] <moritz> time to awesomeify it some more!

[15:29] <psch> MasterDuke: maybe the easier approach is to convert that saved value to a String (a la "$file:$line") and rewrite visitLineNumber into visitFileNameAndLineNumber?

[15:30] <Zoffix> NeuralAnomaly, run nqp-clone nqp-build nqp-tar nqp-tar-build nqp-tag nqp-tar-sign nqp-tar-copy r-clone r-prep-ann r-bump-vers r-build r-p5 r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[15:31] * psch bbl &

[15:33] <MasterDuke> well, visitLineNumber is part of the objectweb.asm API

[15:34] <jnthn> https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.7.10 may be bad news

[15:37] <Zoffix> man... that test failed again :/

[15:38] <Zoffix> .... despite passing during my test run... on the same box :S

[15:39] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠☠☠☠☠ ABNORMAL EXIT!

[15:39] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠ NQP: build and test

[15:39] <MasterDuke> jnthn: hmm, is a new ClassFile created for each Perl 6 class?

[15:40] <jnthn> No

[15:40] <jnthn> One Java class file per compilation unit

[15:41] <MasterDuke> and gen/jvm/CORE.setting is a single compilation unit?

[15:41] <jnthn> Right

[15:42] <MasterDuke> that does not seem promising

[15:42] <jnthn> Seems they didn't consider/chose not to handle the "class file produced from multiple source files" case

[15:43] <Zoffix> What do I do now? prove -r -v --exec ./nqp-j t/nqp/059-nqpop.t  consistently fails test 278 with java.lang.NullPointerException: https://gist.github.com/zoffixznet/cfc354cd8a8c5bd3c34da35b0d4e1d23

[15:43] <MasterDuke> does anything here look helpful? http://stackoverflow.com/questions/530945/overriding-line-number-in-generated-java-source

[15:44] <Zoffix> psch, you around?

[15:44] <Zoffix> bartolin, or you...

[15:45] <Zoffix> j: use nqp; nqp::isnull(nqp::null_s())

[15:45] <camelia> rakudo-jvm 76b061: ( no output )

[15:46] <Zoffix> j: use nqp; nqp::isnull_s(nqp::null())

[15:46] <camelia> rakudo-jvm 76b061: OUTPUT«java.lang.NullPointerException␤  in block <unit> at <tmp> line 1␤␤»

[15:46] <Zoffix> there, this seems to be the offending test

[15:47] <timotimo> wow

[15:47] <timotimo> trying to be careful checking for nulls, but blows up anyway

[15:48] <bartolin> Zoffix: hmm, that test was added about a month ago by pmurias++

[15:48] <Zoffix> Oh...

[15:48] <jnthn> m: use nqp: nqp::isnull_s(nqp::null())

[15:48] <camelia> rakudo-moar 25b0a5: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> use nqp⏏: nqp::isnull_s(nqp::null())␤»

[15:48] <jnthn> m: use nqp; nqp::isnull_s(nqp::null())

[15:48] <camelia> rakudo-moar 25b0a5: OUTPUT«Cannot unbox a type object (VMNull) to a str.␤  in block <unit> at <tmp> line 1␤␤»

[15:48] <Zoffix> Didn't we fudge some test on nqp during last release

[15:48] * Zoffix reads the log

[15:48] <jnthn> tbh I'd expect such a test to blow up in some way

[15:49] <jnthn> On any backend

[15:49] <Zoffix> Hm, no, those were different tests: https://github.com/perl6/nqp/commit/298e2281ec

[15:50] <Zoffix> The full test is ok(!nqp::isnull(nqp::null_s()));

[15:50] <Zoffix> nqp: ok(!nqp::isnull(nqp::null_s()));

[15:50] <camelia> nqp-moarvm: OUTPUT«ok 1␤»

[15:50] <Zoffix> nqp-j: ok(!nqp::isnull(nqp::null_s()));

[15:50] <Zoffix> Well, I'll fudge it then

[15:51] <bartolin> Zoffix++

[15:51] * bartolin didn't look at the nqp tests for a while

[15:53] <dalek> nqp: f707728 | (Zoffix Znet)++ | t/nqp/059-nqpop.t:

[15:53] <dalek> nqp: Temporarily fudge tests for release

[15:53] <dalek> nqp:

[15:53] <dalek> nqp: Tests fail on JVM: https://irclog.perlgeek.de/perl6-dev/2016-11-19#i_13595918

[15:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f707728e61

[15:54] <Zoffix> NeuralAnomaly, run nqp-clone nqp-build nqp-tar nqp-tar-build nqp-tag nqp-tar-sign nqp-tar-copy r-clone r-prep-ann r-bump-vers r-build r-p5 r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[15:55] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠ NQP: Clone repo

[15:55] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠☠☠☠☠ ABNORMAL EXIT!

[15:55] <MasterDuke> jnthn: "Compilers are permitted to define and emit class files containing new attributes in the attributes tables of class file structures." So i can't use the builtin SourceFile attribute, but could i create my own?

[15:55] <Zoffix> NeuralAnomaly, run nqp-clone nqp-build nqp-tar nqp-tar-build nqp-tag nqp-tar-sign nqp-tar-copy r-clone r-prep-ann r-bump-vers r-build r-p5 r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[15:56] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠ NQP: Clone repo

[15:56] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠☠☠☠☠ ABNORMAL EXIT!

[15:56] <Zoffix> /o\

[15:57] <jnthn> MasterDuke: Seems so; then just need to find a way to get hold of them.

[15:59] <Zoffix> NeuralAnomaly, run nqp-clone nqp-build nqp-tar nqp-tar-build nqp-tag nqp-tar-sign nqp-tar-copy r-clone r-prep-ann r-bump-vers r-build r-p5 r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[16:00] <Zoffix> If today proves anything is we're pretty far from humanity-anihialating robot uprising

[16:00] <Zoffix> These things only look smart.

[16:06] <geekosaur> that's usually the case

[16:08] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠☠☠☠☠ ABNORMAL EXIT!

[16:08] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠ NQP: build and test

[16:10] <Zoffix> NeuralAnomaly, c'mon, bruh.

[16:13] <Zoffix> t/qast/01-qast.t is now failing

[16:16] <psch> j: use nqp; use Test; ok(!nqp::isnull(nqp::null_s()));

[16:16] <camelia> rakudo-jvm 76b061: OUTPUT«ok 1 - ␤»

[16:17] <Zoffix> java.lang.RuntimeException: Unimplemented case of read_ref

[16:17] <Zoffix> t/serialization/01-basic.t : https://gist.github.com/zoffixznet/bc547c40206a503e652b634378d6b141

[16:18] <bartolin> Zoffix: some of the failing tests in t/qast/01-qast.t were already a problem during the last release: https://github.com/perl6/nqp/commit/298e2281ec

[16:19] <Zoffix> Yeah

[16:20] <Zoffix> m: say 1494 -975

[16:20] <camelia> rakudo-moar 25b0a5: OUTPUT«519␤»

[16:20] <bartolin> again, I'd prefer to skip all those for the release. (and I hope we can find a clean solution before the next release ...)

[16:22] * bartolin should really start to run nqp tests before his nightly spectest runs

[16:25] <dalek> nqp: e8433d7 | (Zoffix Znet)++ | t/ (2 files):

[16:25] <dalek> nqp: Temporarily fudge tests for release

[16:25] <dalek> nqp:

[16:25] <dalek> nqp: due to failures on JVM

[16:25] <dalek> nqp:

[16:26] <dalek> nqp: Half of these are the same tests fudged on previous release

[16:26] <dalek> nqp: 3e142894cf3f651abb77a7f9dd5fc738092e6e80

[16:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e8433d7bac

[16:26] <Zoffix> NeuralAnomaly, run nqp-clone nqp-build nqp-tar nqp-tar-build nqp-tag nqp-tar-sign nqp-tar-copy r-clone r-prep-ann r-bump-vers r-build r-p5 r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[16:35] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ nqp tests OK

[16:35] <stmuk_> is nom close to being tagged?

[16:37] <Zoffix> stmuk_, yeah, why?

[16:38] <Zoffix> Why?

[16:38] <Zoffix> I can still abort if needed

[16:38] <stmuk_> no no

[16:38] <stmuk_> I was just going to try a windows build

[16:40] <Zoffix> Oh, actually the tagging is at the end of the process... right now it's building nqp tar, then it'll run tests, and then it'll build rakudo, run its stress test on master; run stress test on 6.c-errata, make the tar, then repeat the build + stresstest on the tar and only then tag

[16:40] <Zoffix> and each stresstest takes about 154seconds

[16:42] <Zoffix> And you can watch progress here: http://perl6.fail/release/progress

[16:43] <psch> ohh progress

[16:43] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ nqp release tarball tests OK

[16:44] <stmuk_> will it echo your passphrase? :)

[16:44] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ nqp release DONE

[16:44] <dalek> rakudo/nom: 64d66e5 | (Zoffix Znet)++ | docs/announce/2016.11.md:

[16:44] <dalek> rakudo/nom: Generate release announcement for 2016.11

[16:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/64d66e5ba8

[16:44] <dalek> rakudo/nom: 4d0dd8c | (Zoffix Znet)++ | tools/build/NQP_REVISION:

[16:44] <dalek> rakudo/nom: [release] bump NQP revision

[16:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4d0dd8cd46

[16:44] <dalek> rakudo/nom: f66f8be | (Zoffix Znet)++ | VERSION:

[16:44] <dalek> rakudo/nom: [release] bump VERSION to 2016.11

[16:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f66f8be09c

[16:44] <psch> + echo -e '*****\n' # probably?

[16:47] <Zoffix> stmuk_, I thought of that ;)

[16:47] <Zoffix> (and no, it's not that short :P)

[16:48] <Zoffix> lizmat++ kicking me off first spot in number of commits :)

[16:50] <psch> Zoffix: what, your passphrase *isn't* five asterisks‽

[16:51] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Rakudo stresstest (master) OK

[16:51] <Zoffix> psch, nope: https://github.com/zoffixznet/na/blob/master/lib/NA/Releaser.pm6#L67-L70

[16:53] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Rakudo stresstest (6.c-errata) OK

[16:54] <moritz> NeuralAnomaly++

[16:55] <moritz> Zoffix++

[17:00] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Rakudo release DONE

[17:00] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Post: upload tarballs to rakudo.org

[17:00] <NeuralAnomaly> Zoffix, 🎺🎺🎺📯📯📯📯📯📯🌈🌈🌈📦📦📦

[17:00] <NeuralAnomaly> Zoffix, The release of **Rakudo #105 2016.11** has now been completed

[17:00] <NeuralAnomaly> Zoffix, 🎺🎺🎺📯📯📯📯📯📯🌈🌈🌈📦📦📦

[17:00] * NeuralAnomaly celebrates with an appropriate amount of fun

[17:00] <psch> oh geez, *nothing* on my computer can display all of those graphemes

[17:01] <psch> well, unless the second and third triad are boxes

[17:02] <Zoffix> psch, http://i.imgur.com/WOUEW0a.png

[17:02] <psch> ah, thanks Zoffix++

[17:02] <dalek> star: 3a52702 | (Steve Mynott)++ | modules/ (26 files):

[17:02] <dalek> star: bump star versions and modules

[17:02] <dalek> star: review: https://github.com/rakudo/star/commit/3a527024da

[17:03] <moritz> my browser displays it correctly

[17:03] <dalek> star: 940e010 | (Steve Mynott)++ | tools/star/Makefile:

[17:03] <dalek> star: bump rakudo, nqp and moar

[17:03] <dalek> star: review: https://github.com/rakudo/star/commit/940e0101d4

[17:05] <MasterDuke> "java.lang.RuntimeException: org.perl6.nqp.runtime.UnwindException", wtf?

[17:05] <timotimo> oh, what fun

[17:05] <psch> ah, those

[17:06] <psch> i think it's somewhere between "missed exception handler" and "missing continuation handler"

[17:06] <psch> but, i'll readily admit, i never really understood what UnwindException actually do

[17:06] <MasterDuke> this is the problem line: String file = (String) getattr_s(insn, jastAnnotation, "$!file", 0, tc);

[17:06] <psch> well, consider you're generating bytecode there

[17:07] <psch> so the UnwindException is thrown when that bytecode gets executed

[17:07] <MasterDuke> oh, don't need the cast

[17:07] <MasterDuke> well, still runtime exception

[17:09] <MasterDuke> ahh, that 0 should have been a 1

[17:10] <timotimo> that's the hint or something?

[17:10] <MasterDuke> index i think

[17:10] <psch> i'd honestly just not call hinted geattr

[17:10] <psch> *getattr

[17:10] <timotimo> well, you can just supply -1

[17:10] <psch> should be the hint i think

[17:10] <timotimo> rather, we should have a constant somewhere for NO_HINT

[17:10] <psch> yeah well, but if you pass STable.NO_HINT you can also just call the not-hinted variant

[17:10] <timotimo> fair enough

[17:11] <timotimo> might as well go for it if you have a language with overloading

[17:11] <psch> i mean, of course it doesn't really matter in the end

[17:11] <timotimo> JVM be like "i'll inline this shit!"

[17:12] <psch> my aesthetic is just more along the lines of "less arguments, especially if the ones you leave out mean 'this does not mean anything'"

[17:13] <timotimo> right

[17:13] <timotimo> no way to accidentally pass the wrong kind of sentinel "doesn't mean anything" value

[17:13] <MasterDuke> what does the hint do?

[17:14] <psch> MasterDuke: the jvm class behind a Perl 6 class has a number of fields called 'field_\d+'

[17:14] <timotimo> it tells the getattr what slot to get the attribute from

[17:14] <psch> MasterDuke: the hint is basically that \d

[17:14] <psch> ++

[17:14] <timotimo> we pass that hint when we generate code that already knows what index the field we're getting things from has

[17:14] <dalek> rakudo/nom: d1ef82a | (Zoffix Znet)++ | src/core/Main.pm:

[17:15] <dalek> rakudo/nom: Bring back sub MAIN (Enum) support

[17:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d1ef82ac18

[17:15] <MasterDuke> "No such attribute '$!file' for this object", even though i added it to class JAST::Annotation

[17:15] <dalek> roast: c00301e | (Zoffix Znet)++ | S06-other/main.t:

[17:15] <dalek> roast: Revert "Temporarily fudge enum MAIN tests for release"

[17:15] <dalek> roast:

[17:15] <dalek> roast: This reverts commit 47a9ec10c95776c99ca0f47474419a5278575121.

[17:15] <dalek> roast: review: https://github.com/perl6/roast/commit/c00301e737

[17:15] <timotimo> like when we have private attributes, for example

[17:15] <psch> j: say <1/0i>.re

[17:15] <camelia> rakudo-jvm 76b061: OUTPUT«Method 're' not found for invocant of class 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[17:15] <psch> j: say val("1/0i").re

[17:15] <camelia> rakudo-jvm 76b061: OUTPUT«java.lang.ArithmeticException: BigInteger divide by zero␤  in block <unit> at <tmp> line 1␤␤»

[17:15] <psch> j: say val("1+0i").re

[17:15] <camelia> rakudo-jvm 76b061: OUTPUT«1␤»

[17:15] <psch> j: say val("1+0i").im

[17:15] <camelia> rakudo-jvm 76b061: OUTPUT«0␤»

[17:15] <psch> huh, apparently that got fixed

[17:16] <psch> that was a nice way to show how hints can mess things up

[17:16] <psch> not sure who fixed it either :P

[17:16] <dalek> nqp: dd51b3c | (Zoffix Znet)++ | t/ (2 files):

[17:16] <dalek> nqp: Revert "Temporarily fudge tests for release"

[17:16] <dalek> nqp:

[17:16] <dalek> nqp: This reverts commit e8433d7bac541582fe6aae1aa3fc5fb3bce9959f.

[17:16] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dd51b3c964

[17:16] <dalek> nqp: 8e22038 | (Zoffix Znet)++ | t/nqp/059-nqpop.t:

[17:16] <dalek> nqp: Revert "Temporarily fudge tests for release"

[17:16] <dalek> nqp:

[17:16] <dalek> nqp: This reverts commit f707728e61789905037c4cc0b9c468afeebdeb9c.

[17:16] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8e220381cf

[17:16] <psch> aha, apparently it was me

[17:17] <psch> with a terrible bandaid fix too

[17:17] <psch> ...i wonder how that keeps happening

[17:17] <dalek> rakudo/nom: 9071142 | (Zoffix Znet)++ | docs/release_guide.pod:

[17:17] <dalek> rakudo/nom: 2016.11 is now in the past

[17:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9071142b56

[17:17] <psch> well, FSDO "terrible"

[17:17] <psch> as long as P6Opaque is the only REPR that does MI we're good

[17:17] <timotimo> "nichts hält länger als ein provisorium"

[17:18] <Zoffix> Aaaannndd... I'm done for today

[17:18] * Zoffix leaves to do drugs and play video games

[17:18] <psch> timotimo: well, the fix isn't *that* bad.  i mean, the issue was that we generated wrong hints for some multiple-inheritance classes' attributes

[17:19] <psch> timotimo: so obviously the solution is to not listen to the hint when we have a MI-class

[17:19] <psch> it is somewhat bandaid-y, but i don't think we'll ever heavily rely on non-P6Opaque with MI

[17:20] <psch> and i also don't think the performance impact is immediately concerning, because honestly, hinting doesn't really buy us that much in the first place

[17:20] <psch> sure it's nice to have, but still

[17:20] <timotimo> well, yeah. moar does it the exact same way, though :)

[17:20] <psch> the general invocation and codegen overhead is so much higher...

[17:20] <timotimo> also, the implementation of getattr is per-REPR

[17:20] <timotimo> oh, wait

[17:21] <timotimo> that's what you meant by that "only repr" comment

[17:21] <psch> yeah, i think jnthn++ pointed me at the corresponding moar bit

[17:26] <dalek> star: f7b277a | (Steve Mynott)++ | docs/announce/2016.11.md:

[17:26] <dalek> star: draft announce

[17:26] <dalek> star: review: https://github.com/rakudo/star/commit/f7b277a3b3

[17:26] <dalek> star: 83e974d | (Steve Mynott)++ | / (2 files):

[17:26] <dalek> star: more version bumps

[17:26] <dalek> star: review: https://github.com/rakudo/star/commit/83e974d5de

[17:27] <MasterDuke> any idea why i'm getting that "no such attribute"?

[17:27] <psch> MasterDuke: you might have to rebootstrap i think?

[17:28] <MasterDuke> ah, how do i do that?

[17:28] <timotimo> make j-bootstrap-files

[17:28] <timotimo> i think

[17:28] <psch> MasterDuke: don't use the new thing you added, run 'make j-bootstrap-files' to get a stage0 that knows them

[17:28] <timotimo> right

[17:28] <psch> MasterDuke: *then* use the things you added

[17:28] <timotimo> the "don't use" part is important

[17:28] <psch> MasterDuke: also commit the new bootstrap files first

[17:29] <MasterDuke> cool, thanks

[17:51] <dalek> star: 86105ef | (Steve Mynott)++ | modules/perl6-pod-to-bigpage:

[17:51] <dalek> star: revert the perl6-pod-to-bigpage bump to prevent star being dependent on OpenSSL

[17:51] <dalek> star: review: https://github.com/rakudo/star/commit/86105ef4db

[17:55] <dalek> star: d16ef6f | (Steve Mynott)++ | docs/announce/2016.11.md:

[17:55] <dalek> star: markdown fixes

[17:55] <dalek> star: review: https://github.com/rakudo/star/commit/d16ef6f150

[18:01] <viki> "json_fast: Incredible speed gains" I like that changelog entry :)

[18:04] <stmuk_> the main compiler changelog might look more familiar to you :)

[18:12] <stmuk_> I'm seeing a *lot* more missing test files now

[18:14] <timotimo> incredible? not so sure about that ...

[18:15] <stmuk_> ah the second line of that commit says "seriously. i don't understand it. at all.

[18:16] <stmuk_> https://github.com/timo/json_fast/commit/d486f319b7bff3b69a6e173d591a595a0e21ca2e

[18:16] <timotimo> oh

[18:16] <stmuk_> you wrote it!

[18:16] <timotimo> yes, it's incredible because i can't believe it works

[18:16] <timotimo> it's not an incredible amount

[18:19] <dalek> star: 56e67bd | (Steve Mynott)++ | docs/announce/2016.11.md:

[18:19] <dalek> star: different sort of incredible so delete that word, also remove pod-to-bigpage

[18:19] <dalek> star: review: https://github.com/rakudo/star/commit/56e67bd464

[18:19] <viki> stmuk_: well, they aren't really "missing". It's just we added a lot more new files on top of 6.c

[18:23] <stmuk_> viki: I was wondering whether star should patch spectest.data to remove 6.d tests

[18:23] <stmuk_> people are more likely to notice now

[18:25] <stmuk_> or wait for a proper upstream solution

[18:33] <viki> I can look into fixing it for next Rakudo release.

[18:55] <stmuk_> viki++

[18:58] <jnthn> Why would we need to patch spectest.data for star?

[19:01] <viki> jnthn: not just star, but regular releases too. The ton of "missing test file" messages is confusing to the uninitiated, making them think something is wrong.

[19:01] <viki> jnthn: and to clarify: when testing 6.c-errata, it shows a ton of "missing test file" messages due to spectest.data referencing test files added since 6.c-errata, which 6.c-errata does not have

[19:01] <jnthn> OK, so my next question is "why do we get those"? :)

[19:01] <jnthn> Ah

[19:02] <jnthn> It's probably less hassle to make the target to test 6.c-errata give the harness a flag that tells it to be quiet about missing things

[19:08] <dalek> star: c48de65 | (Steve Mynott)++ | modules/perl6-lwp-simple:

[19:08] <dalek> star: bump perl6-lwp-simple for test fix

[19:08] <dalek> star: review: https://github.com/rakudo/star/commit/c48de65452

[19:11] <dalek> rakudo/nom: 1e10ce3 | bartolin++ | src/core/Failure.pm:

[19:11] <dalek> rakudo/nom: Remove no longer required special case for r-j

[19:11] <dalek> rakudo/nom:

[19:11] <dalek> rakudo/nom: I was unable to find out why this special case was needed back in 2015.

[19:11] <dalek> rakudo/nom: A spectest run looked good on rakudo-j (no new failures).

[19:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1e10ce33f3

[19:11] <dalek> rakudo/nom: 84ef8f3 | (Zoffix Znet)++ | src/core/Failure.pm:

[19:11] <dalek> rakudo/nom: Merge pull request #921 from usev6/patch-3

[19:11] <dalek> rakudo/nom:

[19:11] <dalek> rakudo/nom: Remove no longer required special case for r-j

[19:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/84ef8f3a39

[19:14] <MasterDuke> has anyone used MethodVisitor.visitAttribute() before?

[19:14] <MasterDuke> "m.visitAttribute(sfa);" is giving me an NPE, even though both m and sfa are not null

[19:15] <MasterDuke> .seen arnsholt

[19:15] <yoleaux2> I saw arnsholt 18 Nov 2016 14:51Z in #perl6-dev: <arnsholt> Definitely looks like you're getting Nums in there somewhere

[19:21] <psch> MasterDuke: are you observing the order?

[19:21] <psch> http://asm.ow2.org/asm40/javadoc/user/org/objectweb/asm/MethodVisitor.html

[19:21] <psch> at the very start of the docs there

[19:21] <MasterDuke> yeah, i'm visitAttribute()ing first

[19:22] <psch> are you visitAnnotationDefault before that is what i mean :S

[19:22] <psch> +()ing # probably

[19:23] <psch> i suppose we're using some of that functionality already, so i kinda wanna guess "yes" anyway :/

[19:23] <MasterDuke> i didn't add visitAnnotationDefault

[19:24] <psch> hm, we don't have that either, actually

[19:24] <psch> so maybe that helps, i'd guess it sets up the annotation in the first place, and you get the NPE because there's not annotation default that could contain your attribute..?

[19:28] <MasterDuke> adding 'AnnotationVisitor av = m.visitAnnotationDefault(); av.visit("name", method.crName);' didn't help

[19:29] <psch> tbf, it was the first thing that leaped at me from the docs page

[19:29] <psch> i haven't worked with the annotation part of the MethodVisitor at all, honestly

[19:29] <psch> maybe the book they wrote has some insight

[19:29] <psch> http://download.forge.objectweb.org/asm/asm4-guide.pdf

[19:32] <MasterDuke> ooh, looks like that might have some useful info

[19:45] <MasterDuke> ah ha! needed to override read() and write() for my extended Attribute

[19:45] <MasterDuke> psch++

[19:48] <MasterDuke> (now, where should those attributes get read and how?)

[20:02] <dalek> star: 095b9f3 | (Steve Mynott)++ | / (3 files):

[20:02] <dalek> star: Patch a url in one module test

[20:02] <dalek> star: review: https://github.com/rakudo/star/commit/095b9f3995

[20:05] <MasterDuke> and i just confirmed the attribute(s?) shows up in r-j's CORE.setting.class with the names from the line directives

[20:23] <RabidGravy> At line 794 in World.nqp there is a "# XXX Can give deprecation warning in the future, remove ... before 6.0.0."  can that happen

[20:25] * psch isn't sure of the *current* EXPORT supersede syntax, never mind the legacy one...

[20:25] <psch> apparently it's a stash that has some set of keys

[20:26] <psch> and if one of the keys is lowercase, it's assume to mean supersede, but unchecked

[20:29] <psch> m: https://gist.github.com/anonymous/63c3c581c84e4d0347b3cfe0fe36f0c2

[20:29] <camelia> rakudo-moar 84ef8f: ( no output )

[20:29] <psch> okay, that apparently already doesn't work

[20:29] <psch> from https://perl6advent.wordpress.com/2011/12/14/meta-programming-what-why-and-how/

[20:29] <psch> sooo, yeah, someone who actually knows that EXPORT stuff should probably look at it :)

[20:44] <stmuk_> odd p6-Template-Mustache no longer passes tests on windows

[20:44] <stmuk_> at least using mingw

[20:48] <MasterDuke> the API docs for StackTraceElement.getFileName() say this "... Generally, this corresponds to the SourceFile attribute of the relevant class file (as per The Java Virtual Machine Specification, Section 4.7.7). ..."

[20:48] <MasterDuke> so looks like i need to getClass() or getMethod() instead and find my custom Attribute

[21:16] <stmuk_> neither does Linenoise install on windows/mingw

[21:20] <stmuk_> ah it does if I revert back before Native::Resources removal

[21:46] <dalek> star: 4b2ad3c | (Steve Mynott)++ | modules/Linenoise:

[21:46] <dalek> star: revert Linenoise submodule before Native::Resources removal to fix windows

[21:46] <dalek> star: review: https://github.com/rakudo/star/commit/4b2ad3c6be

[22:38] <MasterDuke> i added some debugging lines to backtrace() in .../ExceptionHandling.java where i print out the filename, class name, and method name of each StackTraceElement

[22:39] <MasterDuke> for a filename of "gen/jvm/CORE.setting" i get class names like "E9A5E7E19C54FEEABE867F852164187D6DF7E6E5" and method names like "qb_2389"

[22:40] <MasterDuke> i'm trying to create a ClassReader to get to my custom Attribute, but it doesn't like those class names

[22:46] <MasterDuke> any suggestions for how to get a usable class name?

[22:52] <MasterDuke> oh, that's the name of the giant CORE.setting class

[22:57] <dalek> rakudo/nom: e9487d6 | lizmat++ | src/core/ (4 files):

[22:57] <dalek> rakudo/nom: Allow *-N on .pick/pickpairs/grab/grabpairs

[22:57] <dalek> rakudo/nom:

[22:57] <dalek> rakudo/nom: Indicating you want all but N from the set.  This makes sense, as

[22:57] <dalek> rakudo/nom: you can specify * to indicate all from the set.

[22:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e9487d6a6e

[23:58] <lizmat> .tell jnthn was there a reason why native shaped str arrays are not implemented?  or was it an oversight that they aren't?

[23:58] <yoleaux2> lizmat: I'll pass your message to jnthn.

[23:58] <lizmat> good night, #perl6-dev!
