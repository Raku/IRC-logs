[00:03] <ugexe> m: class Bar { }; say ::("Bar").^can("xxx"); role Foo { }; say ::("Foo").^can("xxx"); # is this a bug or expected?

[00:03] <camelia> rakudo-moar bc3592: OUTPUT«()␤Too many positionals passed; expected 2 arguments but got 3␤  in block <unit> at <tmp> line 1␤␤»

[00:27] <ugexe> m: class Bar { }; say ::("Bar").^can();

[00:27] <camelia> rakudo-moar bc3592: OUTPUT«Too few positionals passed; expected 3 arguments but got 2␤  in any can at gen/moar/m-Metamodel.nqp line 1128␤  in block <unit> at <tmp> line 1␤␤»

[00:27] <ugexe> m: role Foo { }; say ::("Foo").^can();

[00:27] <camelia> rakudo-moar bc3592: OUTPUT«0␤»

[00:35] <Zoffix> s:  ::("Foo").HOW, "can", \()

[00:35] <SourceBaby> Zoffix, Something's wrong: ␤ERR: Method 'map' not found for invocant of class 'NQPRoutine'␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 25␤  in block <unit> at -e line 6␤␤

[00:53] <ShimmerFairy> Zoffix: thanks, that moved me on to other issues with my grammar :)

[00:54] <Zoffix> \o/

[01:17] <dalek> rakudo/nom: 94b09ab | (Zoffix Znet)++ | src/Perl6/Grammar.nqp:

[01:17] <dalek> rakudo/nom: Initialize %quote_lang_cache at creation

[01:17] <dalek> rakudo/nom:

[01:17] <dalek> rakudo/nom: instead of calling nqp::isnull on each invocation of the method

[01:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/94b09ab928

[01:18] <Zoffix> ^ stresstest passes, but I'm unsure whether there was some sort of a reason to not have it initialized from start

[02:53] <ShimmerFairy> What's interesting in doing very fiddly regex stuff is that P6 doesn't have any capability to set the match object of a cursor manually like you can in NQP (via nqp::bindattr).

[07:23] <lizmat> Files=1136, Tests=52738, 227 wallclock secs (13.20 usr  3.81 sys + 1401.89 cusr 132.03 csys = 1550.93 CPU)

[07:27] <dalek> rakudo/nom: 8a66833 | lizmat++ | src/core/ (2 files):

[07:27] <dalek> rakudo/nom: Make permutations() about 5x as fast

[07:27] <dalek> rakudo/nom:

[07:27] <dalek> rakudo/nom: - based on for ^100 { my @a = permutations(6) }

[07:27] <dalek> rakudo/nom: - rewrite using nqp ops

[07:27] <dalek> rakudo/nom: - be smarter on finding out when to finish

[07:27] <dalek> rakudo/nom: - don't use smart swapping (could use an nqp::swap :-)

[07:27] <dalek> rakudo/nom: - move back to List.pm, as no native arrays are used anymore

[07:27] <dalek> rakudo/nom: - brings down the magic box benchmark down to 18.5 from 25 wallclock secs

[07:27] <dalek> rakudo/nom: - still needs work on List.permutations for even better performance

[07:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8a66833d9b

[12:20] <nine> m: say (2.0**0.5) * (2.0**0.5) == 2.0

[12:20] <camelia> rakudo-moar 8a6683: OUTPUT«False␤»

[12:20] <nine> Would there at least in theroy be a way to fix this? ^^^

[12:26] <|Tux|> Hmm, I did run the timing this morning but it looks like I forgot to post them, right?

[12:28] <nine> right

[12:29] <nine> Zoffix: doc seems to need Pod::To::BigPage but installation fails with "Expected MAST::Frame, but didn't get one"

[12:34] <[Coke]> nine: I would imagine if you made a new numeric type that kept track of powers like we do rationals.

[12:34] <[Coke]> but if you fall back to Num, all bets are off.

[12:36] <MetaZoffix> nine: yeah, that bug has been there for ages. I don't know why gdflex doesn't use a UA module that actually works.

[12:36] <MetaZoffix> nine: if you uninstall IO::Socket::SSL, then it should install fine.

[12:38] <MetaZoffix> nine: FWIW, this is the line that was complaining about .modified on non-found file yesterday. I then went and and added a check in Rakudo for non-failure of the file it was trying to check .modified on and then the .load was not returning anything usable: https://github.com/gfldex/perl6-pod-to-bigpage/blob/master/bin/pod2onepage#L72

[12:39] <brrt> |Tux|: make a bot ;-)

[12:39] <nine> MetaZoffix: I wonder why it doesn't use try-load?

[12:40] <MetaZoffix> *shrug*

[12:41] <|Tux|> This is Rakudo version 2016.08.1-142-g8a66833 built on MoarVM version 2016.08-43-g3d04391

[12:41] <|Tux|> csv-ip5xs        9.722

[12:41] <|Tux|> test            15.482

[12:41] <|Tux|> test-t           7.206

[12:41] <|Tux|> csv-parser      17.567

[12:42] <nine> MetaZoffix: I wonder how if $unit { my $modified = $unit.modified; can fail?

[12:42] <nine> Shouldn't the if $unit protect it from a Failure already?

[12:43] <MetaZoffix> m: try { "notafile".IO.modified; CATCH { default { .^name.say} }

[12:43] <camelia> rakudo-moar 8a6683: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> odified; CATCH { default { .^name.say} }⏏<EOL>␤»

[12:43] <MetaZoffix> m: try { "notafile".IO.modified; CATCH { default { .^name.say} } }

[12:43] <camelia> rakudo-moar 8a6683: OUTPUT«X::IO::DoesNotExist␤»

[12:43] <MetaZoffix> ^ it was failing with that

[12:43] <MetaZoffix> oh wait.

[12:43] <MetaZoffix> Lemme try to find which rakudo change I made last night

[12:47] <MetaZoffix> oh, yeah, that was the line.. with if $unit

[12:48] <MetaZoffix> I changed this line to or ($modified and $modifed > $since) and the error went away (but loading wasn't happening still): https://github.com/rakudo/rakudo/blob/nom/src/core/CompUnit/PrecompilationRepository.pm#L169

[12:48] <nine> Oooh...the $unit is defined just fine. It's the unit's $!path attribute pointing to a non-existent file

[12:48] <MetaZoffix> So maybe $unit contains something fishy

[12:48] <MetaZoffix> Ah

[12:49] <nine> And the path does look fishy indeed. The .tmp extension shouldn't be there.

[12:53] <nine> Testing a fix

[13:09] <dalek> rakudo/nom: c9b18c6 | niner++ | src/core/CompUnit/PrecompilationStore/File.pm:

[13:09] <dalek> rakudo/nom: Fix weird issues with trying to load a just stored PrecompilationUnit

[13:09] <dalek> rakudo/nom:

[13:09] <dalek> rakudo/nom: Trying to use the PrecompilationUnit created when storing a precompilation file

[13:09] <dalek> rakudo/nom: for loading causes all sorts of weird issues. Those can be solved by thinking

[13:09] <dalek> rakudo/nom: things through and ensuring that the unit's internal state is suitable for

[13:09] <dalek> rakudo/nom: loading. As a quick fix however, just clear it from the cache.

[13:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c9b18c60e2

[13:09] <nine> MetaZoffix: the fix ^^^

[13:09] <MetaZoffix> \o/ nine++

[13:11] <nine> How to get lots of karma: * write dog slow code. * speed up the code later on * fix the bugs caused by the speedup * fix the bugs in the bugfix * ...

[13:11] <MetaZoffix> :D

[13:14] <brrt> nine: another strategy is to start an ambitious JIT project, hit the wall when there are things you don't understand, and take lots of time in getting to understand it and fixing issues

[13:23] <nine> Oh yeah, brrt++

[13:23] <brrt> haha

[13:27] <ShimmerFairy> .oO(premature optimization is the root of low karma)

[14:06] <|Tux|> https://gist.github.com/Tux/046469284af1909e12f035832072a8ac

[14:42] <timotimo> hm, where is it trying to install to?

[15:07] <MetaZoffix> "now can you get it to dynamically pull the latest rakudo star" ... We can just create a redirect on rakudo.org that will redirect from http://rakudo.org/downloads/star/rakudo-star-latest.tar.gz  to the latest release

[15:07] <MetaZoffix> And the script would use that URL

[15:07] <MetaZoffix> Script... and well, all the references where we currently hardcode the version

[15:09] <MetaZoffix> oops wrong channel

[15:28] <MetaZoffix> .tell stmuk_ We added -latest.whatever URLs so a single URL can be used to link to the latest Star version. On release, those would need to be updated in the .htaccess file. Sent a PR to update the release guide: https://github.com/rakudo/star/pull/76

[15:28] <yoleaux2> MetaZoffix: I'll pass your message to stmuk_.

[15:36] <dalek> star: 49e17c5 | (Zoffix Znet)++ | tools/star/release-guide.pod:

[15:36] <dalek> star: Include step top update `-latest-` URLs

[15:36] <dalek> star: review: https://github.com/rakudo/star/commit/49e17c5763

[15:36] <dalek> star: 8ae2604 | (Steve Mynott)++ | tools/star/release-guide.pod:

[15:36] <dalek> star: Merge pull request #76 from zoffixznet/patch-1

[15:36] <dalek> star:

[15:36] <dalek> star: Include step top update `-latest-` URLs

[15:36] <dalek> star: review: https://github.com/rakudo/star/commit/8ae26046cc

[15:44] <stmuk_> MetaZoffix: it might actually be easier to use sym links but good idea anyway

[15:44] <yoleaux2> 15:28Z <MetaZoffix> stmuk_: We added -latest.whatever URLs so a single URL can be used to link to the latest Star version. On release, those would need to be updated in the .htaccess file. Sent a PR to update the release guide: https://github.com/rakudo/star/pull/76

[16:24] <MetaZoffix> w00t! Just fixed the bug I was trying to fix. The one I called mountain-shaped learning curve last night :)

[16:36] <TimToady> You mean you unlearned things on the other side?

[16:37] <MetaZoffix> Heh :) Nah, it's an infinite mountain :)

[16:55] <dalek> rakudo/nom: 2287173 | (Zoffix Znet)++ | src/Perl6/ (2 files):

[16:55] <dalek> rakudo/nom: Make all of our Unicode quotes work in qww<>

[16:55] <dalek> rakudo/nom:

[16:55] <dalek> rakudo/nom: Fixes RT#128304

[16:55] <dalek> rakudo/nom:

[16:55] <dalek> rakudo/nom: jnthn++ (suggesting to try a DRY fix [^1]), AlexDaniel++ (finding one for

[16:55] <dalek> rakudo/nom: another similar bug [^2]), TimToady++ (writing the fix for that bug that

[16:55] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128304

[16:55] <dalek> rakudo/nom: I now shamelessly stole [^3]).

[16:55] <dalek> rakudo/nom:

[16:55] <dalek> rakudo/nom: [1] http://irclog.perlgeek.de/perl6-dev/2016-09-07#i_13168143

[16:55] <dalek> rakudo/nom: [2] http://irclog.perlgeek.de/perl6-dev/2016-09-07#i_13168292

[16:55] <dalek> rakudo/nom: [3] https://github.com/rakudo/rakudo/commit/36a35142a0b7dadd6

[16:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2287173ef2

[16:55] <dalek> roast: addcec6 | (Zoffix Znet)++ | S02-literals/quoting.t:

[16:55] <dalek> roast: Unfudge tests for Unicode quotes in qww<>

[16:55] <dalek> roast:

[16:55] <dalek> roast: RT128304

[16:55] <dalek> roast: review: https://github.com/perl6/roast/commit/addcec6732

[17:04] <[Coke]> nice.

[17:06] <[Coke]> buggable: rt?

[17:06] <[Coke]> buggable: bugs?

[17:06] <[Coke]> RT: 1378; @LARRY: 20; BOOTSTRAP: 5; BUG: 489; BUILD: 11; CONC: 52; DOCS: 1; GLR: 5; IO: 18; JVM: 69; LTA: 117; MATH: 7; NATIVECALL: 15; NEW: 843; NYI: 91; OO: 7; OSX: 6; PERF: 27; POD: 17; PRECOMP: 12; REGEX: 35; REPL: 4; RFC: 57; SEGV: 38; SPESH: 1; STAR: 6; TESTNEEDED: 30; TODO: 10; UNI: 30; UNTAGGED: 287; WEIRD: 3

[17:31] <FROGGS> o/

[17:32] <timotimo> greetings FROGGS

[17:32] <dalek> nqp: 4f73719 | coke++ | docs/ops.markdown:

[17:32] <dalek> nqp: add a note to cover the un-doc'd box_u

[17:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4f73719518

[18:04] <MetaZoffix> buggable: tags

[18:04] <buggable> MetaZoffix, Total: 1380; BUG: 536; UNTAGGED: 287; LTA: 117; NYI: 91; JVM: 63; RFC: 57; CONC: 52; SEGV: 38; REGEX: 35; TESTNEEDED: 30; UNI: 30; PERF: 27; @LARRY: 20; IO: 18; POD: 17; NATIVECALL: 14; BUILD: 11; PRECOMP: 11; TODO: 11; MATH: 7; OO: 7; TESTCOMMITTED: 7; STAR: 6; BOOTSTRAP: 5; GLR: 4; OSX: 4; REPL: 4; WEIRD: 3; CONFIGURE: 1; DOCS: 1; LIBRARY: 1; RT: 1; SITE: 1; SPEC: 1; See http://perl6.fail/ for details

[18:04] <MetaZoffix> ^ the command is tags... (though I now added rt and bugs and ? variants :))

[18:04] <MetaZoffix> buggable: bugs?

[18:04] <buggable> MetaZoffix, Total: 1380; BUG: 536; UNTAGGED: 287; LTA: 117; NYI: 91; JVM: 63; RFC: 57; CONC: 52; SEGV: 38; REGEX: 35; TESTNEEDED: 30; UNI: 30; PERF: 27; @LARRY: 20; IO: 18; POD: 17; NATIVECALL: 14; BUILD: 11; PRECOMP: 11; TODO: 11; MATH: 7; OO: 7; TESTCOMMITTED: 7; STAR: 6; BOOTSTRAP: 5; GLR: 4; OSX: 4; REPL: 4; WEIRD: 3; CONFIGURE: 1; DOCS: 1; LIBRARY: 1; RT: 1; SITE: 1; SPEC: 1; See http://perl6.fail/ for details

[18:36] <nine> m: say 2**1023 == Inf; say 2**1024 == Inf; say 2**1025 == Inf; say 2**1024 == 2**1025;

[18:36] <camelia> rakudo-moar 228717: OUTPUT«False␤True␤True␤False␤»

[18:37] <nine> quite odd indeed :)

[18:38] <masak> so, what you're saying is, infix:<==> is not transitive :/

[18:39] <masak> two things equal to a third thing can somehow manage to be different

[18:43] * TimToady notes that comparing to Inf is coercing to Num

[18:44] <TimToady> m: say (2**1024).Num == (2**1025).Num

[18:44] <camelia> rakudo-moar 228717: OUTPUT«True␤»

[19:03] <zumbra> If I make changes in nqp/ dir in my Rakudo checkout how to make Rakudo build process pick them up so I could test they are correct?

[19:03] <timotimo> you have to "make install" under nqp, then "make clean" and "make install" in rakudo

[19:03] <zumbra> Thanks

[19:04] <timotimo> i'm glad to assist :)

[19:05] <nine> 2**1024 looks like an arbitrary limit rather than one imposed by the underlying architecture. If we are in that game already, why not throw an error when coercing that to Num?

[19:06] <masak> m: say 2 ** 1024 < Inf

[19:06] <camelia> rakudo-moar 228717: OUTPUT«False␤»

[19:36] <b2gills> There may have to be special cases for &[==] &[<] &[>] when one side is Inf/-Inf and the other is an Int

[19:36] <dalek> nqp: 32fd43d | (Zoffix Znet)++ | src/HLL/Grammar.nqp:

[19:36] <dalek> nqp: Add LEFT/RIGHT DOUBLE PARENTHESIS in matching brackets list

[19:36] <dalek> nqp:

[19:36] <dalek> nqp: Fixes RT#128787

[19:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/32fd43da48

[19:36] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128787

[19:36] <dalek> rakudo/nom: 87f772e | (Zoffix Znet)++ | tools/build/NQP_REVISION:

[19:36] <dalek> rakudo/nom: Bump NQP: Allow LEFT/RIGHT DOUBLE PARENTHESIS ...

[19:36] <dalek> rakudo/nom:

[19:36] <dalek> rakudo/nom: ...to be used as matched brackets in quoters

[19:36] <dalek> rakudo/nom:

[19:36] <dalek> rakudo/nom: Fixes RT#128787

[19:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/87f772ee53

[19:36] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128787

[19:36] <dalek> roast: 9650cd2 | (Zoffix Znet)++ | S02-literals/quoting-unicode.t:

[19:36] <dalek> roast: LEFT/RIGHT DOUBLE PARENTHESIS can be used as matched brackets in quoters

[19:36] <dalek> roast:

[19:36] <dalek> roast: RT#128787

[19:36] <dalek> roast: review: https://github.com/perl6/roast/commit/9650cd258f

[19:36] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128787

[20:09] <TimToady> one of the main points of IEEE floating point is to *not* throw errors in overflow situations like that

[20:09] <TimToady> throwing overflow/underflow errors tends to cause undesirable fratricide in vector ops

[20:10] <TimToady> and sure, it's an arbitrary limit, but you'll have to talk to the IEEE about that :)

[20:11] <TimToady> (now, if we have an additional limit in addition to what fp will represent, that's a different issue)

[20:48] <nine> Oh, I failed to realize that this is indeed a plattform restriction.

[21:24] <dalek> roast: 7ae8030 | (Zoffix Znet)++ | S03-operators/ternary.t:

[21:24] <dalek> roast: fiddly meta error indicates what operator is used

[21:24] <dalek> roast:

[21:24] <dalek> roast: RT#129080

[21:24] <dalek> roast: review: https://github.com/perl6/roast/commit/7ae8030be1

[21:24] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129080

[21:39] <dalek> roast: 8c899ef | (Zoffix Znet)++ | S02-types/WHICH.t:

[21:39] <dalek> roast: ObjAt.perl gives distinct results for different objects

[21:39] <dalek> roast:

[21:39] <dalek> roast: RT#128944

[21:39] <dalek> roast: review: https://github.com/perl6/roast/commit/8c899ef549

[21:39] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128944

[21:41] <b2gills> &infix:« < »( Int:D, Inf ) should always return True

[21:50] <dalek> rakudo/nom: bb6da76 | lizmat++ | src/core/List.pm:

[21:50] <dalek> rakudo/nom: Make List.permutations 8x faster

[21:50] <dalek> rakudo/nom:

[21:50] <dalek> rakudo/nom: - based on: for ^1000 { <a b c d e>.permutations }

[21:50] <dalek> rakudo/nom: - don't use a map and slice but instead:

[21:50] <dalek> rakudo/nom: - create custom iterator that repurposes List returned from permutations()

[21:50] <dalek> rakudo/nom: - use nqp ops to do the mapping

[21:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bb6da769bd

[21:51] <Zoffix> :o

[21:51] <timotimo> that looks fantastic!

[21:53] <MasterDuke> hopefully removed the need for my List::Combinations (though its permutations weren't as faster as its combinations)

[21:56] <MasterDuke> m: use nqp; say nqp::unbox_u(2**63 - 1)

[21:56] <camelia> rakudo-moar 87f772: OUTPUT«9223372036854775807␤»

[21:56] <MasterDuke> m: use nqp; say nqp::unbox_u(2**63 )

[21:56] <camelia> rakudo-moar 87f772: OUTPUT«-9223372036854775808␤»

[21:56] <MasterDuke> m: use nqp; say nqp::unbox_u(2**64 - 1)

[21:56] <camelia> rakudo-moar 87f772: OUTPUT«-1␤»

[21:56] <MasterDuke> m: use nqp; say nqp::unbox_u(2**64 )

[21:56] <camelia> rakudo-moar 87f772: OUTPUT«Cannot unbox 65 bit wide bigint into native integer␤  in block <unit> at <tmp> line 1␤␤»

[21:57] <MasterDuke> is that ^^^ correct?

[21:57] <geekosaur> yes

[21:57] <MasterDuke> *are those

[21:57] <dalek> roast: 73f7539 | (Zoffix Znet)++ | S32-str/sprintf.t:

[21:57] <dalek> roast: Remove trailing whitespace

[21:57] <dalek> roast: review: https://github.com/perl6/roast/commit/73f7539bf2

[21:57] <lizmat> timotimo: the magic numbers test now runs <3 seconds on my machine

[21:57] <lizmat> which would make it faster than the Perl 5 version ?

[21:58] <dalek> roast: 71aab20 | (Zoffix Znet)++ | S32-str/sprintf.t:

[21:58] <dalek> roast: Invalid formats do not spill internal details

[21:58] <dalek> roast:

[21:58] <dalek> roast: RT#129088

[21:58] <dalek> roast: review: https://github.com/perl6/roast/commit/71aab20a9d

[21:58] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129088

[21:58] <geekosaur> well, modulo whether nqp's say understands signedness or if it's built into the operation (so nqp::unbox_u may be producing a perfectly cromulent unsigned value that nqp::say then treats as signed because it doesnt know any better)

[21:59] <MasterDuke> but i wasn't use nqp::say?

[21:59] <geekosaur> er, right. but it still may not know for a value coming from nqp. (I don't know how that stuff works...)

[22:01] <geekosaur> the 65-bit value thing is certainly correct; iirc bigint is not handled automagically, you need to deal with it specifically when using nqp ops

[22:01] <MasterDuke> interestingly, nqp::unbox_u isn't used in either nqp or rakudo

[22:01] <geekosaur> this is one reason why nqp is Not Quite Perl

[22:01] <MasterDuke> yeah, i wasn't so concerned about that one

[22:08] <timotimo> things are only unsigned because we use all sorts of ops with _u on them

[22:08] <timotimo> so when you say it, it'll probably just see a regular int64 register and print that out

[22:09] <Zoffix> I'm assuming this is just copy-paste error that made it into 6.c-errata. The test already present in -unix.t; and the objects used need to be Cygwin: https://github.com/perl6/roast/blob/6.c-errata/S32-io/io-path-cygwin.t#L79-L84

[22:09] * Zoffix will fix that shortly; just mentioning in case I'm wrong

[22:14] <dalek> roast: 7428736 | (Zoffix Znet)++ | S32-io/io-path- (3 files):

[22:14] <dalek> roast: .absolute on paths starting with `-` does not produce empty string

[22:14] <dalek> roast:

[22:14] <dalek> roast: RT#128840: https://rt.perl.org/Public/Bug/Display.html?id=128840

[22:14] <dalek> roast: review: https://github.com/perl6/roast/commit/7428736eeb

[22:14] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128840

[22:17] <AlexDaniel> Zoffix++

[22:20] <dalek> roast: 21511d3 | (Zoffix Znet)++ | S32-io/io-path-cygwin.t:

[22:20] <dalek> roast: Fix incorrect object used

[22:20] <dalek> roast:

[22:20] <dalek> roast: The IO::Path::Unix is already tested in the S32-io/io-path-unix.t [^1],

[22:20] <dalek> roast: and this appears to be a copy-paste error, as we need to

[22:20] <dalek> roast: test ::Cygwin object in this test.

[22:20] <dalek> roast:

[22:20] <dalek> roast: [1] https://github.com/perl6/roast/blob/7428736eeb86a40e5f1cef594163ff50e061253f/S32-io/io-path-unix.t#L63-L68

[22:20] <dalek> roast: review: https://github.com/perl6/roast/commit/21511d3e1d

[22:21] <dalek> roast/6.c-errata: 1e8f6b6 | (Zoffix Znet)++ | S32-io/io-path-cygwin.t:

[22:21] <dalek> roast/6.c-errata: Fix incorrect object used

[22:21] <dalek> roast/6.c-errata:

[22:21] <dalek> roast/6.c-errata: The IO::Path::Unix is already tested in the S32-io/io-path-unix.t [^1],

[22:21] <dalek> roast/6.c-errata: and this appears to be a copy-paste error, as we need to

[22:21] <dalek> roast/6.c-errata: test ::Cygwin object in this test.

[22:21] <dalek> roast/6.c-errata:

[22:21] <dalek> roast/6.c-errata: [1] https://github.com/perl6/roast/blob/fd46151b753dfccafec7409de56207a8b8648c39/S32-io/io-path-unix.t#L63-L68

[22:21] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/1e8f6b6137

[22:41] <Zoffix> jnthn++ made my life much easier :)   (https://twitter.com/zoffix/status/774371073978691584)

[23:01] <dalek> roast: 180694d | (Zoffix Znet)++ | S16-io/lines.t:

[23:01] <dalek> roast: Attempting to read lines in from `/proc/$$/statm` does not hang

[23:01] <dalek> roast:

[23:01] <dalek> roast: Running this test on OSes without /proc would just bail out

[23:01] <dalek> roast: with file-does-not-exist or similar error. Since all we're testing

[23:01] <dalek> roast: for is hanginess, that is OK.

[23:01] <dalek> roast:

[23:01] <dalek> roast: RT#127370: #https://rt.perl.org/Public/Bug/Display.html?id=127370

[23:01] <dalek> roast: review: https://github.com/perl6/roast/commit/180694deff

[23:01] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127370

[23:06] <Zoffix> eh

[23:06] <Zoffix> Ah, edited wrong file

[23:08] <dalek> roast: f69a324 | (Zoffix Znet)++ | S16-io/lines.t:

[23:08] <dalek> roast: Wrap test in try {}

[23:08] <dalek> roast:

[23:08] <dalek> roast: The 180694deff is a Linux-specific test only and will throw on

[23:08] <dalek> roast: other OSes. We're only interested in whether the test hangs, so

[23:08] <dalek> roast: throwage is fine. We just need to catch it so it doesn't break

[23:08] <dalek> roast: out test run.

[23:08] <dalek> roast: review: https://github.com/perl6/roast/commit/f69a324f4b

[23:10] * [Coke] will wave as he goes through dublin and leeds this week.
