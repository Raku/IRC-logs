[00:00] <timotimo> MasterDuke: you are correct, it does not support pairs. if you want to create a hash, you can either nqp::hash(key, value, key, value, ...) or use nqp::bindkey and nqp::deletekey, nqp::existskey, and nqp::atkey

[00:01] <geekosaur> hm. what's the pair-like syntax doing, then

[00:01] <MasterDuke> timotimo: hmm, then would you know anything about this error then? "Missing serialize REPR function for REPR VMHash (BOOTHash)"

[00:02] <timotimo> huh? it means we can't serialize hashes, but i'm pretty sure we totally can?

[00:02] <timotimo> oh

[00:03] <MasterDuke> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.nqp#L2550

[00:03] <timotimo> it has no serialize or deserialize functions

[00:04] <MasterDuke> i essentially copied that block and did $name eq '<my variable name>'

[00:05] <timotimo> right

[00:05] <MasterDuke> and the variable has stuff in it, i iterate over the hash right there for debugging and all the right values are there

[00:05] <timotimo> well, perhaps you can do it with a flat list instead of a hash?

[00:05] <MasterDuke> ha, that's what i was just trying to do

[00:05] <MasterDuke> but i was hoping to store a list of pairs

[00:05] <timotimo> you'll most likely be binary-searching through the data rather than looking up by key

[00:06] <MasterDuke> the mapping is linenumber => filename

[00:06] <timotimo> how do you get that data, btw?

[00:06] <timotimo> i mean, how do you store it when you come across these #?file blah comments?

[00:07] <MasterDuke> a token in Grammar that looks for '#line 1 '

[00:07] <timotimo> OK. and how do you store these results?

[00:07] <timotimo> because if that's a hash, that could also be problematic

[00:08] <MasterDuke> and then in Action: $*W.add_source_line_number($*W.current_line($/), $<filename>)

[00:08] <MasterDuke> and in World: %!SOURCE_LINE_NUMBERS{$filename} := $line_number

[00:12] <MasterDuke> why is a hash problematic?

[00:18] <timotimo> because it apparently can't be serialized

[00:18] <timotimo> though if the world gets serialized, we're in trouble

[00:19] <geekosaur> the hash code of the beast?

[00:31] <MasterDuke> but why is %?RESOURCES fine?

[00:32] <timotimo> depends on what $Resources.from-precomp creates, i guess

[00:33] <timotimo> it's about what gets added to the world

[00:33] <timotimo> though i think it's not necessary to explicitly add the objects any more with $*W.add_object

[00:35] <MasterDuke> Object of type BOOTHash in QAST::WVal, but not in SC

[00:35] <MasterDuke> if i take out the add_object

[00:35] <timotimo> oh, is that what happens if you forget to add_object?

[00:35] <timotimo> OK

[00:35] <timotimo> good to know, definitely

[00:36] <MasterDuke> btw, from-precomp returns self.new, inside class Distribution::Resources does Associative {

[00:38] <timotimo> OK, that's not repr VMHash, at least

[00:38] <timotimo> i'm still surprised we don't have serialization for VMHash

[00:57] <timotimo> i'm heading towards bed again

[01:32] <MasterDuke> timotimo: thanks for the help again, later...

[01:34] <timotimo> sure :)

[07:44] <lizmat> Files=1151, Tests=53712, 214 wallclock secs (12.76 usr  3.88 sys + 1303.98 cusr 122.85 csys = 1443.47 CPU)

[08:05] <[Tux]> This is Rakudo version 2016.10-167-g5b2bdeb built on MoarVM version 2016.10-39-g4b9e3a8

[08:05] <[Tux]> csv-ip5xs        3.153

[08:05] <[Tux]> test            14.244

[08:05] <[Tux]> test-t           7.040

[08:05] <[Tux]> csv-parser      16.093

[08:57] <dalek> rakudo/nom: 050cf72 | lizmat++ | src/core/Shaped (3 files):

[08:57] <dalek> rakudo/nom: Fast-track .ASSIGN-POS for 1,2,3dimmed arrays

[08:57] <dalek> rakudo/nom:

[08:57] <dalek> rakudo/nom: Makes them about 40x faster than using the generic N-dimmed ASSIGN-POS

[08:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/050cf72b35

[10:41] <dalek> rakudo/nom: 006f008 | lizmat++ | src/core/ShapedArray.pm:

[10:41] <dalek> rakudo/nom: Re-imagine n-dimmed .EXISTS-POS

[10:41] <dalek> rakudo/nom:

[10:41] <dalek> rakudo/nom: - rewrite using nqp ops

[10:41] <dalek> rakudo/nom: - don't use returns

[10:41] <dalek> rakudo/nom:

[10:41] <dalek> rakudo/nom: Makes it about 1.5x as fast

[10:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/006f00814e

[11:20] <dalek> rakudo/nom: b1c41b7 | lizmat++ | src/core/Shaped (3 files):

[11:20] <dalek> rakudo/nom: Fast-track .EXISTS-POS for 1,2,3dimmed arrays

[11:20] <dalek> rakudo/nom:

[11:20] <dalek> rakudo/nom: Makes them about 10x faster than using generic N-dimmed EXISTS-POS

[11:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b1c41b79fd

[11:20] <lizmat> afk again&

[12:11] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Fast-track .EXISTS-POS for 1,2,3dimmed arrays

[12:11] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173219552 https://github.com/rakudo/rakudo/compare/006f00814e00...b1c41b79fd23

[12:11] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[15:45] <dalek> rakudo/nom: 2ef2fdb | coke++ | src/ (11 files):

[15:45] <dalek> rakudo/nom: fix spelling

[15:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2ef2fdb332

[17:00] <travis-ci> Rakudo build failed. Will "Coke" Coleda 'fix spelling'

[17:00] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173292907 https://github.com/rakudo/rakudo/compare/b1c41b79fd23...2ef2fdb33204

[17:00] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[17:01] <viki> "Exception: java.lang.OutOfMemoryError thrown from the UncaughtExceptionHandler in thread "main""

[18:10] <tony-o> gfldex: i'm pushing some corrections to HTTP::Server::Threaded that should make it usable again

[18:37] <gfldex> tony-o: thanks

[18:48] <timotimo> awesome

[18:57] <lizmat> JVM builds ok for me and makes test also

[19:07] <viki> Probably just hitting Travi's resource limits.

[19:28] <dalek> rakudo/nom: 6ccecb1 | lizmat++ | src/core/ShapedArray.pm:

[19:28] <dalek> rakudo/nom: Re-imagine n-dimmed DELETE-POS

[19:28] <dalek> rakudo/nom:

[19:28] <dalek> rakudo/nom: - rewrite using nqp ops

[19:28] <dalek> rakudo/nom:

[19:28] <dalek> rakudo/nom: Makes it about 1.3x as fast

[19:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ccecb1765

[19:46] <dalek> rakudo/nom: 55b9e90 | lizmat++ | src/core/Shaped (3 files):

[19:46] <dalek> rakudo/nom: Fast-track .DELETE-POS for 1,2,3dimmed arrays

[19:46] <dalek> rakudo/nom:

[19:46] <dalek> rakudo/nom: Makes them about 20x faster than using generic N-dimmed DELETE-POS

[19:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/55b9e90b74

[20:27] <dalek> rakudo/nom: 2827edb | lizmat++ | src/core/ShapedArray.pm:

[20:27] <dalek> rakudo/nom: Re-imagine n-dimmed BIND-POS

[20:27] <dalek> rakudo/nom:

[20:27] <dalek> rakudo/nom: - rewrite using nqp ops

[20:27] <dalek> rakudo/nom: - rather than using "is raw" on the slurpy, use decont() on the value

[20:27] <dalek> rakudo/nom:   This allows a faster path to be taken, without needing to index.

[20:27] <dalek> rakudo/nom:

[20:27] <dalek> rakudo/nom: Makes it about 1.3x faster.  Also brought ASSIGN-POS and BIND-POS

[20:27] <dalek> rakudo/nom: more in line.

[20:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2827edb38c

[20:41] <dalek> rakudo/nom: 9f94525 | lizmat++ | src/core/Shaped (3 files):

[20:41] <dalek> rakudo/nom: Fast-track .BIND-POS for 1,2,3dimmed arrays

[20:41] <dalek> rakudo/nom:

[20:41] <dalek> rakudo/nom: Makes them about 20x faster than using the generic N-dimmed BIND-POS

[20:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9f94525ed8

[20:43] <tony-o> Transactions:            3256 hits

[20:43] <tony-o> Availability:          100.00 %

[20:43] <tony-o> Elapsed time:           59.98 secs

[20:43] <tony-o> Data transferred:          0.02 MB

[20:43] <tony-o> Response time:            0.18 secs

[20:43] <tony-o> Transaction rate:         54.28 trans/sec

[20:43] <tony-o> Throughput:            0.00 MB/sec

[20:43] <tony-o> Concurrency:            9.98

[20:43] <tony-o> Successful transactions:        3256

[20:43] <tony-o> Failed transactions:             0

[20:43] <tony-o> Longest transaction:          0.27

[20:43] <tony-o> Shortest transaction:          0.01

[20:43] <tony-o> oops

[20:44] <tony-o> timotimo: H:S:T looks a lot more stable with the changes - ^those are the stats for concurrency 10 and benchmarked for one minute with siege.  more usable format here: https://gist.github.com/tony-o/299adfbcc214a8637586ed10f5aa82da

[20:51] <timotimo> what, availability is 100%

[20:51] <timotimo> so it wasn't possible to get it to b0rk on any request?

[20:52] <timotimo> that's quite slow, though :(

[20:56] <timotimo> tony-o: if only it weren't threaded, we could have a look at a profile ...

[20:56] <timotimo> tony-o: actually, are you on linux? you could try running the server with perf. it's probably spending a whole lot of time trying to acquire the lock for the fixedsize_alloc and _free ...

[20:56] <timotimo> i should really get on with that multi-thread optimization thing

[20:57] <timotimo> i've got a paper in front of me that tells me how to do it, i just need to do it ...

[20:57] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Re-imagine n-dimmed DELETE-POS

[20:57] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173357503 https://github.com/rakudo/rakudo/compare/2ef2fdb33204...6ccecb176567

[20:57] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[21:00] <timotimo> t/04-nativecall/20-concurrent.t        (Wstat: 65280 Tests: 0 Failed: 0)

[21:00] <timotimo> ^- only on one of the mac targets

[21:06] <lizmat> ok, I got it to fail: https://gist.github.com/lizmat/32ce2b17a5acaf38b153779a64ca9bef

[21:07] <lizmat> looks like we lost the actual code to be executed

[21:17] <jnthn> I fear it'll be Wed before I get to look at it, so feel free to skip that test for now

[21:17] <jnthn> Unless I get chance during the weekend, which may happen. But I'm shot for today and Mon/Tue I'll be busy with visiting $dayjob colleague. :)

[21:47] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Fast-track .DELETE-POS for 1,2,3dimmed arrays

[21:47] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173362055 https://github.com/rakudo/rakudo/compare/6ccecb176567...55b9e90b7460

[21:50] <MasterDuke_> timotimo: do you happen to know where the "parent-most" code that prints the backtrace when you do --ll-exception is?

[21:51] <timotimo> i happen to know where to look

[21:51] <MasterDuke_> i'm in Backtrace.AT-POS, but that doesn't seem to be it

[21:52] <timotimo> find it in nqp/src/HLL/Compiler.nqp

[22:56] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Re-imagine n-dimmed BIND-POS

[22:56] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173371703 https://github.com/rakudo/rakudo/compare/55b9e90b7460...2827edb38c87

[22:57] <buggable> [travis build above] ✓ All failures are due to timeout (1), missing build log (0), or GitHub connectivity (0). All failures are on JVM only.

[23:17] <lizmat> good night, #perl6-dev!

[23:17] <timotimo> nite

[23:39] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Fast-track .BIND-POS for 1,2,3dimmed arrays

[23:39] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173374666 https://github.com/rakudo/rakudo/compare/2827edb38c87...9f94525ed87f

[23:41] <MasterDuke_> timotimo: i've found a problem with my current approach. my variable that holds the linenumber => filename info is populated when it's encountered in m-CORE.setting

[23:42] <MasterDuke_> however, since that isn't necessarily at the end of the settings, it doesn't have the rest of the mappings

[23:43] <MasterDuke_> hmm, what if i create it via EVAL...?

[23:48] <timotimo> that way lies madness :)

[23:48] <timotimo> i wonder why it won't take future changes into account

[23:49] <MasterDuke_> hmm, i'm assigning it to another variable...maybe i should try binding instead?
