[00:17] <Zoffix> PR to fix Fix RT#128019: LTA warning on smartmatch against S/// https://github.com/rakudo/rakudo/pull/789

[00:17] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128019

[00:59] <MasterDuke> .tell timotimo valgrind output when my modified htmlify.p6 segfaulted, https://gist.github.com/MasterDuke17/c10c82840bfc13a87833b9a20beedad4

[00:59] <yoleaux2> MasterDuke: I'll pass your message to timotimo.

[01:01] <timotimo> sorry, but that's pretty much useless without the line number information :(

[01:01] <yoleaux2> 00:59Z <MasterDuke> timotimo: valgrind output when my modified htmlify.p6 segfaulted, https://gist.github.com/MasterDuke17/c10c82840bfc13a87833b9a20beedad4

[01:01] <timotimo> you didn't build it with --debug=3 in your moarvm's Configure.pl?

[01:04] <MasterDuke> no, but i'll do that now

[01:05] <MasterDuke> just moarvm, not nqp or rakudo?

[01:06] <timotimo> just moarvm

[01:06] <timotimo> rakudo only has a tiny amount of C code

[01:06] <timotimo> what we need is the DWARF debug symbols in the libmoar.so file to be available

[01:09] <MasterDuke> restarted after adding --debug=3 to moarvm, but this'll take a while

[01:10] <timotimo> probably

[01:10] <timotimo> thanks a lot for the help!

[01:10] <MasterDuke> likewise

[01:11] <timotimo> i'll probably go to bed quite soon, so i'll rely on yoleaux to relay the paste to me

[01:12] <timotimo> but it's strange that it's not giving any errors before the segfault happens

[01:12] <timotimo> hm, actually, valgrind doesn't know anything about our fixed size allocator, so it can't figure out when we're overstepping boundaries

[01:12] <timotimo> can you reset the run again and do the following change:

[01:13] <MasterDuke> there are still a bunch of these: Syscall param write(buf) points to uninitialised byte(s)

[01:13] <MasterDuke> you can see one here, https://gist.github.com/MasterDuke17/051510af2cff14c514ab5eb11d0f8db2

[01:13] <timotimo> that's also strange

[01:14] <timotimo> find fixedsizealloc.c and change the define for FSA_SIZE_DEBUG to 1

[01:15] <timotimo> that'll make things a bit slower still, but it may find bogus writes

[01:18] <MasterDuke> restarted

[01:18] <timotimo> thank you kindly

[01:18] <timotimo> i'm hopeful it'll help

[01:19] <timotimo> i'll probably not be able to find the cause (or fix) for the uninitialized bytes

[01:20] <MasterDuke> off with your head!

[01:23] <MasterDuke> in case you wanted the valgrind output with FSA_SIZE_DEBUG=1 for one of them anyway ... https://gist.github.com/MasterDuke17/13e82655744cbbc2eafb2327445eb575

[01:27] <MasterDuke> .tell timotimo ah-ha, here's a segfault, https://gist.github.com/MasterDuke17/56d636666153e2202feaad03c8b29f13

[01:27] <yoleaux2> MasterDuke: I'll pass your message to timotimo.

[01:28] <timotimo> wrong link? i don't see the segfault

[01:28] <yoleaux2> 01:27Z <MasterDuke> timotimo: ah-ha, here's a segfault, https://gist.github.com/MasterDuke17/56d636666153e2202feaad03c8b29f13

[01:29] <MasterDuke> oops, https://gist.github.com/MasterDuke17/470aab0a87ad24d1e3c001933d9e8d02

[01:30] <timotimo> cool, can you also give me the core dump?

[01:31] <MasterDuke> the vgcore.<number> file?

[01:31] <timotimo> probably

[01:31] <timotimo> that might allow me to see what values are where

[01:32] <timotimo> how big is it?

[01:32] <MasterDuke> 787mb

[01:32] <MasterDuke> sorry, wrong one, it's actually only 620mb

[01:33] <timotimo> OK, i guess that's fair

[01:33] <timotimo> line 2008 seems to be in getattrs_o, is that the same on your machine?

[01:33] <timotimo> interp.c, i mean

[01:34] <MasterDuke> -1, &GET_REG(cur_op, 0), MVM_reg_obj);

[01:34] <timotimo> i wonder if the read in GET_REG did that?

[01:36] <MasterDuke> i hope that's a rhetorical question, because i'm not going to be any help answering

[01:40] <timotimo> :)

[01:40] <timotimo> maybe the core dump lets me figure that out

[01:41] <MasterDuke> i don't mind uploading it somewhere if you want to download it

[02:11] <dalek> rakudo/nom: 5eba2cd | (Zoffix Znet)++ | / (3 files):

[02:11] <dalek> rakudo/nom: Make cmp-ok take user-defined operators as Str b2gills++

[02:11] <dalek> rakudo/nom:

[02:11] <dalek> rakudo/nom: This rescinds the claim made in commit 102b0eade9093a38d4bb526014d860e87c3e7797

[02:11] <dalek> rakudo/nom: that Str comparator for custom ops is not supported. b2gills++ shown

[02:11] <dalek> rakudo/nom: a way to support that, which is what this commit implements.

[02:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5eba2cd74f

[02:11] <dalek> rakudo/nom: a6e0cc2 | lizmat++ | / (3 files):

[02:11] <dalek> rakudo/nom: Merge pull request #788 from zoffixznet/cmp-ok-custom-ops-via-str

[02:11] <dalek> rakudo/nom:

[02:11] <dalek> rakudo/nom: Make cmp-ok take user-defined operators as Str b2gills++

[02:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a6e0cc2956

[02:12] <dalek> rakudo/nom: be210fb | (Zoffix Znet)++ | src/Perl6/Actions.nqp:

[02:12] <dalek> rakudo/nom: Fix RT#128019: LTA warning on smartmatch against S///

[02:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/be210fbaaf

[02:12] <dalek> rakudo/nom: 449a2e7 | lizmat++ | src/Perl6/Actions.nqp:

[02:12] <dalek> rakudo/nom: Merge pull request #789 from zoffixznet/fix-RT128019-warning-on-S-replacement

[02:12] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128019

[02:12] <dalek> rakudo/nom:

[02:12] <dalek> rakudo/nom: Fix RT#128019: LTA warning on smartmatch against S///

[02:12] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128019

[02:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/449a2e7866

[02:16] <MasterDuke> lizmat: what's your opinion on the state of rakudo PR #773? anything i should add or change?

[02:41] <dalek> rakudo/nom: 7036028 | (Daniel Green)++ | src/core/IO/ (3 files):

[02:41] <dalek> rakudo/nom: Implement RT #125489. Adds a mode method to IO::[Path.Handle,Special] that returns the file permissions as either an Int or Str.

[02:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7036028ebe

[02:41] <dalek> rakudo/nom: 9bfd0c8 | (Daniel Green)++ | / (2 files):

[02:41] <dalek> rakudo/nom: Move allomorphs.pm before IO so IO::Path.mode can return an IntStr

[02:41] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125489

[02:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9bfd0c8dc6

[02:41] <dalek> rakudo/nom: 3ab95a1 | (Daniel Green)++ | src/core/IO/ (2 files):

[02:41] <dalek> rakudo/nom: Fix signatures for IO::Handle and IO::Special

[02:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3ab95a18cc

[02:41] <dalek> rakudo/nom: ed1b2e4 | (Daniel Green)++ | src/core/IO/Path.pm:

[02:41] <dalek> rakudo/nom: Convert STATEMENT_LIST to nqp::stmts

[02:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ed1b2e4e66

[02:41] <dalek> rakudo/nom: 880f5cb | lizmat++ | / (4 files):

[02:45] <MasterDuke> ha, guess it was good enough

[02:47] <MasterDuke> lizmat: thanks

[02:48] <lizmat> MasterDuke: no, thank you!

[02:48] <lizmat> :-)

[07:09] <bartolin> good morning, #perl6-dev

[07:10] <bartolin> it is my sad duty to report some new spectest breakage on rakudo-j. today's spectest run had nearly 7400 failed tests (though most of them are due to aborted test files)

[07:10] <bartolin> I looked at two or three examples and all failed with 'getextype needs an object with VMException representation'

[07:10] <bartolin> m: say <a b>.[lazy ^3] # dies on r-j

[07:10] <camelia> rakudo-moar 880f5c: OUTPUT«(a b)␤»

[07:11] <bartolin> on a more positive note: most failures seem to be related to e5443765d4. I'm currently running a spectest with that commit reverted and it looks ok-ish so far. so at least it seems to be an isolated problem

[07:13] <bartolin> ah, also the latest merge missed an adjustment for Makefile-JVM -- cmp. PR 790

[07:19] <FROGGS> o/

[07:20] <bartolin> \o

[07:21] <dalek> roast: 111b906 | usev6++ | S02-literals/adverbs.t:

[07:21] <dalek> roast: Fudge test for RT #128306 on rakudo-j

[07:21] <dalek> roast: review: https://github.com/perl6/roast/commit/111b9061a7

[07:21] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128306

[07:59] <[Tux]> This is Rakudo version 2016.05-177-g880f5cb built on MoarVM version 2016.05-37-ga126e0f

[07:59] <[Tux]> test            16.472

[07:59] <[Tux]> test-t           9.476

[07:59] <[Tux]> csv-parser      22.439

[08:04] <RabidGravy> I keep expecting to see it leap up to 11 or something

[09:40] <[Tux]> are you a pessimist?

[10:11] <dalek> rakudo/nom: 6d055dd | bartolin++ | tools/build/Makefile-JVM.in:

[10:11] <dalek> rakudo/nom: Move allomorphs.pm before IO on JVM as well

[10:11] <dalek> rakudo/nom:

[10:11] <dalek> rakudo/nom: this mirrors the change from 9bfd0c8dc6 so that

[10:11] <dalek> rakudo/nom: rakudo-j compiles

[10:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6d055dd684

[10:11] <dalek> rakudo/nom: f192415 | jnthn++ | tools/build/Makefile-JVM.in:

[10:11] <dalek> rakudo/nom: Merge pull request #790 from usev6/patch-1

[10:11] <dalek> rakudo/nom:

[10:11] <dalek> rakudo/nom: Move allomorphs.pm before IO on JVM as well

[10:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f192415005

[10:24] <stmuk> s/pessimist/realist

[10:32] <jnthn> .oO( implementer sadist :P )

[10:32] <MasterDuke> whoops, my bad about 6d055dd. i usually spectest with rakudo-j also, guess i missed that one

[10:33] <MasterDuke> and 111b906! i'm on a roll in the wrong direction

[10:43] <bartolin> MasterDuke: np, it was easy to fix :-)

[10:47] <jnthn> Zoffix: MoarVM release is done: http://www.moarvm.org/releases/MoarVM-2016.06.tar.gz

[10:47] <jnthn> Zoffix: Happy releasing!

[11:06] <bartolin> another thing that changed on rakudo-j: I get an error message 'Unhandled exception; category = 65536' instead of X::ControlFlow::Return

[11:06] <bartolin> m: return

[11:06] <camelia> rakudo-moar f19241: OUTPUT«Attempt to return outside of any Routine␤  in block <unit> at <tmp> line 1␤␤»

[11:37] <Zoffix> RabidGravy, why would it leap? It didn't get to 9.476 for no reason.

[12:04] <stmuk> whats the rough status of JVM? (I lose track) Does it print hello world but fail with a lot of modules? Or is a build likely to be less successful than that even?

[12:30] <Zoffix> Are we doing Star release for 2016.06?

[12:43] <stmuk> good question .. previously I had thought every 3 months might be the sweet spot but the performance implications of this release are tempting

[12:44] <stmuk> or maybe wait a month for even more?

[12:45] <stmuk> I will probably do some star updates either way

[12:45] <Zoffix> every 3 months sounds alright

[12:50] <stmuk> star 2016-07 sounds good for YAPC::EU the following month

[12:50] <bartolin> stmuk: rakudo-j compiles but installing fails due to a precomp related error. also quite some tests are fudged due to two or three annoying bugs, which might be GLR related. (psch++ has worked on that and knows more details)

[12:51] <bartolin> apart from that my daily spectests where more or less ok during the last month

[12:51] <stmuk> bartolin: thanks! that's useful to know ... a star jvm one day!

[12:52] <bartolin> also, as mentioned earlier today there are some new failures after yesterdays merge from jnthn++

[12:53] <bartolin> btw, nine++ and psch++ have worked on the precomp problem, but it proved to be hairy

[13:00] <stmuk> "Annoy /r/golang in one sentence. (self.golang)"

[13:00] <stmuk> I hope this meme doesn't reach /r/perl6 :)

[13:48] <psch> "is perl6 production ready"

[13:48] <psch> probably wins

[13:49] <psch> anyway, yeah, r-j is really weirdly broken, and i wish i could verify that the potential solution i have figured out is the actual solution

[13:49] <psch> because the potential solution is terrible to implement and involves a lot of fiddling with things through nearly the whole nqp-j stack

[13:50] <psch> and even worse, not getting it to work wouldn't prove it the wrong solution /o\

[13:51] <mst> you're supposed to wait for a meme to practice annoying people? I've been doing it wrong all these years ...

[13:51] <psch> basically, the problem we're having is that somewhere in the depths of loading-precomp-files we lose a coderef

[13:51] <psch> eh, not quite, we discover during loading-precomp-files that we *already* lost a coderef

[13:52] <psch> so we end up trying to set lex values on null, and that doesn't work

[13:53] <Zoffix> Heh: "===SORRY!=== No JVM (java executable) in path; cannot continue"

[13:53] <psch> okay, that's new :)

[13:54] * Zoffix wonders what Debian package is need to get jvm

[13:55] <psch> openjdk-$something should work

[13:55] <Zoffix> Thanks

[13:58] <TimToady> mst: you don't really have to wait; it's sufficient to hold a meme or two in reserve to club people with after you've annoyed them for other reasons

[14:01] <psch> Zoffix: fwiw, with jdk8 you get a few more passing unicode tests, but since we do support jdk7 they shouldn't be un-todo'd

[14:01] * Zoffix doesn't have 8 in repos

[14:02] <psch> we do need jdk7, in any case, 'cause invokedynamic

[14:02] <MasterDuke> TimToady: what's your opinion on http://irclog.perlgeek.de/perl6/2016-06-17#i_12680850 ? should (($x - $*TOLERANCE) =~= $x) ~~ True the same way ($x + $*TOLERANCE) =~= $x does?

[14:03] <Zoffix> It's not how it's calculated

[14:03] <Zoffix> $*TOLERANCE is relative

[14:04] <MasterDuke> i know

[14:04] <Zoffix> The question is: (($x - Δ) =~= $x) ~~ True the same way ($x + Δ) =~= $x

[14:04] <Zoffix> That is, always use RHS for the item to calculate relative difference off of rather than max(LHS, RHS)

[14:05] <MasterDuke> yeah, that's what i intended to ask, but a better wording

[14:08] <TimToady> I don't think a geometric difference has to be arithmetically symmetrical

[14:11] <MasterDuke> i know the serious math around differences and errors and such is more complicated (non-intuitive?) than one might think

[14:13] <MasterDuke> so i don't know whether it's better to be more mathematically rigorous or more DWIM'y

[14:14] <TimToady> so I think calculating a geometric difference and then applying ± Δ to a privileged argument is wrongish

[14:15] * Zoffix agrees

[14:15] <TimToady> and max is the saner approach, even though it may be surprising to people who expect ± Δ semantics

[14:16] <Zoffix> Currently =~= doesn't care which side you put your args on

[14:16] <TimToady> that's why it was written that way

[14:16] <MasterDuke> then if i were to write up some docs for =~=, would anybody object if i explicity mentioned that it doesn't do ± Δ?

[14:16] <Zoffix> The confusion is due to thinking of it as absolute difference with tolerance set as "percent of" but failing to think about percent of what  :)

[14:17] <Zoffix> MasterDuke, sounds like a good idea.

[14:17] <TimToady> it'll be less surprising to people who habitually put the constant on the left of comparisons to catch 5 = $x vs 5 == $x too

[14:18] <TimToady> MasterDuke: yes, education is probably the best approach here

[14:19] <MasterDuke> sounds good that's what i'll do

[14:37] <Zoffix> It's amazing how much slower JVM is compared to MoarVM. I'm assuming nqp's make m-test/j-test runs the same suite of tests...

[14:38] <Zoffix> 12 wallclock secs for MoarVM / 352 wallclock secs for JVM

[14:38] <Zoffix> m: say 352/12

[14:38] <camelia> rakudo-moar f19241: OUTPUT«29.333333␤»

[14:39] <psch> well, compiling to moar means compiling to code that feeds essentially a giant switch/case in C

[14:39] <psch> compiling to jvm means compiling to java classes

[14:40] <psch> that's not to say that there's no way we could get nqp-j faster

[14:40] <psch> but i don't think we have anyone around that (1) knows enough and (2) cares

[14:41] <psch> with intent of being fair, (2) should probably read "cares and has time" or somesuch vOv

[14:43] <tadzik> the testsuite is a massive amount of small files, which is not something that JVM excels at :)

[14:43] <tadzik> (apart from other things)

[14:43] <psch> that's another great point, catching up via JIT means having enough runtime to do so

[14:44] <psch> and the jvm is known for slow startup and a great JIT

[14:44] <tadzik> I think niecza used to have an eval server that it used to run the tests, to save on startup time

[14:44] <psch> we do have that for rakudo make test

[14:44] <psch> i don't think we use it for nqp make test

[14:44] <tadzik> ah

[14:44] <psch> it still doesn't redeem r-j, fwiw

[14:44] <psch> but i don't think it's factor 30, more like 10 to 15, at a guess

[14:45] <tadzik> does rakudo-j actually still come out ahead in long-running, computationally intensive tasks?

[14:45] <psch> probably not

[14:45] <Zoffix> Hm, tags can't be passed via a PR... how do I go about step 6 in https://github.com/perl6/nqp/blob/master/docs/release_guide.pod ?

[14:45] <Zoffix> And same for Rakudo too

[14:46] <psch> Zoffix: i think nqp is CLA-free, but rakudo wouldn't be

[14:46] <psch> ...or maybe it's the other way around

[14:46] <Zoffix> CLA? Contributor License Agreement? What's that about

[14:46] <psch> in any case, tagging via PR doesn't work, but if you need it in the next 2-3 hours i can do that for you

[14:46] <psch> Zoffix: basically "i have copyright, but TPF can use it"

[14:46] <Zoffix> Is that to get commit bit?

[14:46] <psch> yeah

[14:46] <Zoffix> Where do I sign? :)

[14:47] <psch> it's on perl.org somewhere i think

[14:47] <psch> http://blob.perl.org/perlweb/foundation/legal/licenses/cla.pdf

[14:47] <psch> note though, it takes somewhere in the region of 4 months from sending it (from europe...) until it's aknowledge by TPF :)

[14:48] <Zoffix> It requires mailing? How 20th century :)

[14:48] <psch> *acknowledged

[14:48] <jnthn> Zoffix: I can give you an NQP commit bit right now, if you don't have one?

[14:48] <Zoffix> jnthn, sure, that would be great

[14:49] <jnthn> Your github id?

[14:49] <Zoffix> jnthn, zoffixznet     https://github.com/zoffixznet/

[14:49] <jnthn> ah, I found you :)

[14:49] <jnthn> done :)

[14:50] <Zoffix> Thanks. jnthn++

[14:51] <jnthn> back later &

[15:08] <dalek> nqp: fd633b8 | (Zoffix Znet)++ | tools/build/MOAR_REVISION:

[15:08] <dalek> nqp: Bump MoarVM version for 2016.06 release

[15:08] <dalek> nqp: review: https://github.com/perl6/nqp/commit/fd633b807c

[15:08] <dalek> nqp: 3083e4d | (Zoffix Znet)++ | VERSION:

[15:08] <dalek> nqp: Bump VERSION to 2016.06

[15:08] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3083e4dd1e

[15:18] <MasterDuke> m: my $*TOLERANCE = 0; say 1 =~= 1

[15:18] <camelia> rakudo-moar f19241: OUTPUT«False␤»

[15:19] <MasterDuke> TimToady: ^^^^ is expected? currently, setting $*TOLERANCE = 0 means any comparison will fail

[15:20] <Zoffix> 23:29	* TimToady	doesn't believe in "zero tolerance" :)

[15:20] <Zoffix> http://irclog.perlgeek.de/perl6/2016-06-03#i_12603717

[15:21] <MasterDuke> ha

[15:22] <MasterDuke> i'll probably mention that behavior also

[15:23] <psch> i really like that

[15:38] <Zoffix> MasterDuke, BTW, not sure if you spotted that for your docs, but if either arg to =~= is zero, the comparison will be absolute, not relative, and |non-zero-arg| has to be smaller than $*TOLERANCE

[15:39] <MasterDuke> yep, i have some words to that effect

[15:41] <MasterDuke> but i will definitely want people to make sure what i say is correct (both to the code and mathematically)

[16:05] <dalek> nqp: a334a13 | (Zoffix Znet)++ | docs/release_guide.pod:

[16:05] <dalek> nqp: Fix incorrect URL

[16:05] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a334a13dda

[16:07] <MasterDuke> first stab at documenting =~=, https://github.com/perl6/doc/pull/604

[16:11] <Zoffix> This sounds wrong. "it calculates the absolute difference between the non-zero side and $*TOLERANCE." Maybe "it checks the absolute difference between the arguments is less than $*TOLERANCE"?

[16:30] <MasterDuke> ahh, that is better

[16:55] <Zoffix> ./perl6-j tools/build/install-core-dist.pl /home/zoffix/CPANPRC/rakudo/install/share/perl6

[16:55] <Zoffix> ===SORRY!===

[16:55] <Zoffix> setcodeobj can only be used with a CodeRef

[16:55] <Zoffix> Any idea what to do?

[16:56] <Zoffix> in block <unit> at tools/build/install-core-dist.pl line 18

[16:56] <timotimo> do we already have debug_name in our jvm port? the error could output the name of the repr and the debug_name of the stable together with that error ...

[16:57] <Zoffix> Should I just ignore that for the release?

[16:58] <timotimo> we're not promising jvm support again, so ... dunno :|

[17:00] <bartolin> Zoffix: that's the bug which nine++ and psch++ are hunting for more than two weeks. I'm sure we cannot resolve it now -- so ignoring it is probably the only option

[17:00] <Zoffix> Thanks.

[17:01] <bartolin> IIRC rakudo-j did not install on 2015.05 as well

[17:01] <timotimo> oh, that's the one! mastframes and such

[17:01] <bartolin> *nods*

[17:22] <Zoffix> mst, how do I clone the PR?

[17:24] <mst> Zoffix: https://help.github.com/articles/checking-out-pull-requests-locally/

[17:32] <Zoffix> Well, it's better but less than perfect. The "command line" thing could list git clone https://github.com/tbrowder/doc.git; git checkout whatever-the-branch-is

[17:32] <Zoffix> mst++

[17:34] <Zoffix> t/spec/S17-supply/syntax.t is hanging :(

[17:34] <Zoffix> I guess I can just make a GreaseMonkey script to add what I want.

[17:34] * Zoffix always forgets about that option

[17:36] <mst> Zoffix: however, that would be WRONG

[17:36] <mst> Zoffix: a PR need not be all of the commits in the branch, for example

[17:36] <Zoffix> Why not?

[17:36] <Zoffix> New commits would show up in the PR

[17:37] <Zoffix> So regardless if I pull it from a commit or from the breanch, I get the same thing

[17:37] <Zoffix> s/commit/PR/; s/breanch/branch/;

[17:40] <mst> mm

[17:42] <mst> Zoffix: I'm still confused why you think the more complicated thing would be better than how it currently works

[17:43] <mst> Zoffix: also, https://github.com/ingydotnet/git-hub is your friend

[17:43] <Zoffix> I don't keep the repo around. The instructions start off with "git checkout -b tbrowder-perl6-docs master" which is already something I can't run.

[17:45] <Zoffix> heh

[17:45] <Zoffix> I like GitHub's website. I don't like command line :P

[17:51] <mst> but github's website doesn't have a rebase button

[17:51] <mst> so you're stuck with CLI for most merges anyway

[17:56] <Zoffix> I'm having trouble running make stresstest because t/spec/S17-supply/syntax.t  keeps freezing

[17:56] <Zoffix> What do I do in these situations?

[17:56] <Zoffix> 4/7 tests fail in t/spec/integration/advent2014-day05.rakudo.moar too :/

[17:58] <mst> Zoffix: WD40

[17:58] <Zoffix> heh

[17:59] <timotimo> i didn't know wd40 could do anti-freeze

[18:00] * Zoffix tries to run this on a differnet box

[18:18] <mst> timotimo: it also does anti-cocaine-addicts quite well

[18:19] <mst> if they won't stop snorting it in the toilets of your bar, you spray all the flat surfaces with WD40 and then throw out anybody who gets a nosebleed

[18:19] <timotimo> o_O

[18:20] <timotimo> i might be anti-cocaine-addicted

[18:20] <timotimo> because i get nosebleeds regularly during some parts of the year

[18:23] <Zoffix> So you covert all the surfaces with WD40 and hope the addicts don't own two credit cards? :)

[18:24] <Zoffix> *cover

[18:32] <Zoffix> I'm gonna chuck up my failures to issues with the VM, because Perl 5's build was freezing the other day too.

[18:32] <Zoffix> I removed /syntax.t and now it stuck t/spec/S17-promise/start.t is freezing too. I ran it on my Linode server though and everything is fine.

[18:35] <timotimo> oh damn

[18:35] <timotimo> again with the "only hangs if run in the test suite"?

[18:35] <Zoffix> As compared top what? Just running it on its own?

[18:36] <Zoffix> to*

[18:36] <timotimo> yeah

[18:36] <Zoffix> t/spec/S17-promise/start.t  still freezes after ok 18 - buf8.new in many start blocks does not explode

[18:37] <Zoffix> Only on the VM. Worked fine  on Linode.

[18:37] <Zoffix> t/spec/integration/advent2014-day05.rakudo.moar  fails on both tho

[18:37] <Zoffix> Parse errors: Bad plan.  You planned 7 tests but ran 3.

[18:39] <Zoffix> Hm. Type check failed in binding result; expected Any but got Mu (Mu)

[18:41] <timotimo> you have to do some gymnastics to get a Mu by accident

[18:41] <Zoffix> m: https://gist.github.com/zoffixznet/de7e5532e218ce3998a77191c0910fb1

[18:41] <camelia> rakudo-moar f19241: OUTPUT«Memory allocation failed; could not allocate 4 bytes␤»

[18:41] <Zoffix> :/

[18:42] <timotimo> wow, that machine doesn't even have 4 bytes of free space!

[18:45] <Zoffix> m: my $supplier = Supplier.new; my $supply = $supplier.Supply; my @seen; $supply.act: { .say }; await do for 1..5 { start { $supplier.emit($_) } }

[18:45] <camelia> rakudo-moar f19241: OUTPUT«1␤2␤3␤4␤5␤Type check failed in binding result; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»

[18:45] <Zoffix> m: my $supplier = Supplier.new; my $supply = $supplier.Supply; my @seen; $supply.act: { .say }; await (1..5).map: { start { $supplier.emit($_) } }

[18:45] <camelia> rakudo-moar f19241: OUTPUT«1␤2␤3␤4␤5␤Type check failed in binding result; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»

[18:46] <Zoffix> m: my $supplier = Supplier.new; my $supply = $supplier.Supply; my @seen; $supply.act: { .say }; (1..5).map: { start { $supplier.emit($_) } }; sleep 2

[18:46] <camelia> rakudo-moar f19241: OUTPUT«1␤2␤3␤5␤4␤»

[18:48] <Zoffix> bisect: my $supplier = Supplier.new; my $supply = $supplier.Supply; my @seen; $supply.act: { .say }; await (1..5).map: { start { $supplier.emit($_) } }

[18:48] <bisectable> Zoffix: (2016-06-17) https://github.com/rakudo/rakudo/commit/627dcf4

[18:48] <Zoffix> I love that bot

[18:53] <timotimo> o_O

[18:53] <timotimo> good catch

[18:54] <Zoffix> m: await start { Mu };

[18:54] <camelia> rakudo-moar f19241: OUTPUT«Type check failed in binding result; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»

[18:54] <timotimo> https://twitter.com/randal_olson/status/744169075497123840

[18:55] <timotimo> we probably should allow Mu to be returned from a start block and into await

[18:57] <Zoffix> m: my $x = start { Mu }; sleep 1; say $x.result

[18:57] <camelia> rakudo-moar f19241: OUTPUT«Type check failed in binding result; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»

[18:58] <Zoffix> m: my $x = start { Mu }; sleep 1; say $x.status

[18:58] <camelia> rakudo-moar f19241: OUTPUT«Broken␤»

[19:02] <Zoffix> Any idea how to fix this? This is --ll-exception: https://gist.github.com/zoffixznet/7a432077c32de1353d3da6fe61d3e541

[19:03] <timotimo> it's showing where the exception gets thrown from when you access the result, doesn't it?

[19:03] <timotimo> not where exactly the exception was generated

[19:05] <Zoffix> I guess. It's showing .result and then some sort of NQPHLL stuff

[19:06] <timotimo> yeah, the "unhandled exception" stuff

[19:07] <MasterDuke> timotimo: huh, any way to get a better core dump?

[19:07] <timotimo> oh, you're not in #perl6?

[19:07] <MasterDuke> not right now

[19:07] <timotimo> well, i'm not 100% sure how core dumps are supposed to work; i thought having the core dump would make it unnecessary to have the binaries and libraries on your computer

[19:08] <timotimo> perhaps i can get the exact code and data you have on your machine and try to reproduce the segfault, maybe without valgrind

[19:09] <Zoffix> m: class Foo { method bar (\result) { say result} }; Foo.new.bar: Mu

[19:09] <camelia> rakudo-moar f19241: OUTPUT«Type check failed in binding result; expected Any but got Mu (Mu)␤  in method bar at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[19:10] <timotimo> yeah, something isn't accepting Mu even though it might be interesting to accept it

[19:11] <Zoffix> Likely Vow.keep

[19:11] * Zoffix tries a build

[19:14] <MasterDuke> new error, 'Internal error: invalid thread ID 77939872 in GC work pass'

[19:15] <MasterDuke> another new one, 'Internal error: zeroed target thread ID in work pass'

[19:15] <timotimo> right, that's what made me think memory corruption

[19:16] <MasterDuke> moarvm, nqp, rakudo, doc, Pod::To::HTML, and uri are up to date

[19:16] <MasterDuke> the only difference is my modification to htmlify.p6

[19:17] <MasterDuke> https://gist.github.com/MasterDuke17/d06f051a8033e499599d05426ef33d52

[19:31] <Zoffix> What does this mean?   $!promise!Promise::keep(result)

[19:31] <Zoffix> When $!promise is a Promise object

[19:32] <Zoffix> Like what is it calling. Because my interpretation leads me to an infinite loop :/

[19:33] <Zoffix> Oh, I was looking at the public keep... neverm,ind

[19:50] <Zoffix> (rebooting my VM fixed the spectest hanging issues BTW)

[19:50] <Zoffix> And I have the fix for the Mu. Just running the spectest now

[19:52] <timotimo> weird.

[20:01] <Zoffix> never mind... it's freezing again ~😿~ this is annoying

[20:01] <timotimo> yes, very

[20:01] <timotimo> we've been known to fudge flappy or hangy tests in the past for releases

[20:17] <Zoffix> I don't think it's the tests' problem, since they do work on another box

[20:18] <Zoffix> (and as I've mentioned, my last attempt to build Perl 5 froze too)

[20:28] <Zoffix> PR to fix the spectest failure: https://github.com/rakudo/rakudo/pull/792

[20:28] <Zoffix> the Mu stuff

[20:47] <Zoffix> Or should I just make that part of the Release PR?

[20:47] * Zoffix will

[21:29] <MasterDuke> does anybody have an opinion on RT #128406? should a Scalar's .perl look like its value's .perl?

[21:29] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128406

[22:00] <timotimo> ugh, RT and its "hide quoted text" feature

[22:02] <timotimo> well, first of all i'd expect $x = scalar-make to assign the contents of the scalar that was made into the scalar for $x; for the other thing you'd have to bind

[22:02] <timotimo> also, methods called on a scalar will decont and resolve on the contents

[22:04] <timotimo> if you'd get the .perl of the scalar + its value every time you .perl on something that's in a scalar, you'll have A Bad Time™ in my opinion

[22:25] <Zoffix> I made release tarball for rakudo and unpacked it elsewhere. Is it normal to see those few missing tests in make stresstest for that tarball? https://gist.github.com/zoffixznet/5636e5650964d6a1dcadd1be3ed0da84

[22:26] <timotimo> did you make manifest?

[22:27] <Zoffix> no idea. I'm just following the instructions on https://github.com/rakudo/rakudo/blob/nom/docs/release_guide.pod

[22:27] <Zoffix> (#14)

[22:29] <timotimo> huh, was make manifest removed or something?

[22:29] <Zoffix> ¯\_(ツ)_/¯

[22:29] <timotimo> or maybe that's only in the star release process and i'm confusing the two

[23:01] <Zoffix> I'm done with making release files. I need someone to upload them to rakudo.org: http://temp.perl6.party/2016.06-release/

[23:02] <Zoffix> And this is the PR for Rakudo. Someone needs to create the tag after merging: https://github.com/rakudo/rakudo/pull/793

[23:18] <Zoffix> Hm. Apparently this commit is causing installation failure on Arch Linux (see #perl6 convo): https://github.com/rakudo/rakudo/commit/c7cd003251a2425c14e91d34f6c5ed9acc1caf55

[23:21] <Zoffix> Error: https://dpaste.de/sg5x

[23:26] <Zoffix> shirt

[23:26] <Zoffix> ABORT! ABORT! :)

[23:26] <Zoffix> *shit

[23:26] <Zoffix> I can replicate the issue with make DESTDIR="/tmp/tmp.RgEF7fzXbT/perl" install

[23:28] * timotimo has no clue about DESTDIR

[23:29] <Zoffix> This is the error I got https://gist.github.com/zoffixznet/f814e1581004a61832285f7d96cafb3e

[23:30] <timotimo> does that file exist btw?

[23:32] <Zoffix> Yeah. This is what's inside of it: http://temp.perl6.party/precomp-bug-file

[23:33] <Zoffix> .ask nine would you have any idea how to fix this issue? It happens when DESTDIR is specified for make install and it's blocking the release: http://irclog.perlgeek.de/perl6-dev/2016-06-18#i_12690874

[23:33] <yoleaux2> Zoffix: I'll pass your message to nine.

[23:33] <timotimo> it doesn't look b0rked at least

[23:36] <Zoffix> Since (I'm guessing) this would affect anyone trying to make a package + other users. I say we delay the release until whenever the issue can be fixed.

[23:36] <Zoffix> Way over my head to even try to fix it, unfortunately :(

[23:38] <MasterDuke> unrelated to the immediately above, but interesting behavior. i added a .perl method to Scalar.pm and that causes a spectest run (no multiple jobs) to chew up >6.5gb ram by the time it hits t/spec/S02-types/WHICH.t

[23:41] <MasterDuke> the method just called self.perl. which, on the plus side, gave a possibly more useful result than before

[23:45] <MasterDuke> also unrelated (i think), but with a completely unmodified but up to date moar, nqp, and rakudo, i'm consistently getting failures and coredumps/segfaults when running t/spec/S17-lowlevel/lock.t

[23:49] <Zoffix> It's just floppy with my current runs.

[23:50] <Zoffix> (has been for ages)

[23:52] <MasterDuke> huh, don't remember this many problems with it before, but i may just have gotten lucky then
