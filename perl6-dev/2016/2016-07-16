[00:57] <dalek> rakudo/nom: b7f08d7 | (Zoffix Znet)++ | docs/ChangeLog:

[00:57] <dalek> rakudo/nom: Populate ChangeLog

[00:57] <dalek> rakudo/nom:

[00:57] <dalek> rakudo/nom: Add changes from commits 9180464, 23daf3b, ac19874, 027dd39, 0295443,

[00:57] <dalek> rakudo/nom: 6d0cc07, 29a1107, 94b52c1, 959cd3b, c549267, a02fdbe, f294652, 3625369,

[00:57] <dalek> rakudo/nom: 6dbacb3, and a3fad54

[00:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b7f08d75f6

[01:21] <dalek> rakudo/nom: ebc90c1 | (Zoffix Znet)++ | docs/release_guide.pod:

[01:21] <dalek> rakudo/nom: Include example usage of tools/create-release-announcement.pl

[01:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ebc90c150c

[01:21] <dalek> rakudo/nom: e8b2fed | (Zoffix Znet)++ | docs/release_guide.pod:

[01:21] <dalek> rakudo/nom: Use ./perl6 instead of perl6 in the examples

[01:21] <dalek> rakudo/nom:

[01:21] <dalek> rakudo/nom: Running perl6 in the built rakudo directory throws mismatch errors

[01:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e8b2feda39

[01:31] <dalek> rakudo/nom: 83a88b8 | (Zoffix Znet)++ | docs/announce/2016.07.md:

[01:31] <dalek> rakudo/nom: Add 2016.07 release announcement

[01:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/83a88b8bc8

[01:31] <dalek> rakudo/nom: 06a656a | (Zoffix Znet)++ | docs/release_guide.pod:

[01:31] <dalek> rakudo/nom: List 2016.07 release as now in the past

[01:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/06a656afc2

[01:31] <dalek> rakudo/nom: e2ec357 | (Zoffix Znet)++ | docs/release_guide.pod:

[01:31] <dalek> rakudo/nom: List Zoffix Znet as release manager for #102 August release

[01:31] <dalek> rakudo/nom:

[01:31] <dalek> rakudo/nom: Unless someone else who wants to learn how to do a release wishes

[01:31] <dalek> rakudo/nom: to have a go.

[01:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e2ec357817

[01:49] <travis-ci> Rakudo build errored. Zoffix Znet 'Populate ChangeLog

[01:49] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/145152139 https://github.com/rakudo/rakudo/compare/78ba3df7e1fb...b7f08d75f69e

[02:56] <Zoffix> bisect: 'á' ~~ m:g:ignoremark/ <[a]> /

[02:57] <bisectable> Zoffix: Exit code is 1 on both starting points, bisecting by using the output

[02:57] <bisectable> Zoffix: bisect log: https://gist.github.com/32dffd85b3779b0c633cf2d2a7f60e12

[02:57] <bisectable> Zoffix: (2016-03-24) https://github.com/rakudo/rakudo/commit/f3fe819

[03:31] <AlexDaniel> Looking at the log, it seems like the change was in the error message

[03:32] <Zoffix> Yeah

[03:32] <AlexDaniel> committable: f3fe8196 'á' ~~ m:g:ignoremark/ <[a]> /

[03:32] <committable> AlexDaniel: |«f3fe819»: ===SORRY!===␤chr codepoint cannot be negative exit code = 1

[03:32] <AlexDaniel> committable: f3fe8196~1 'á' ~~ m:g:ignoremark/ <[a]> /

[03:32] <committable> AlexDaniel: |«f3fe819»: chr codepoint cannot be negative␤  in block <unit> at /tmp/SeUIEM4fIa line 1␤ exit code = 1

[03:32] <AlexDaniel> yeah

[04:13] <MasterDuke> benchable: HEAD~50..HEAD my $a = "a" x 2**16;for ^1000 {my $b = $a.chop($_)}

[04:15] <benchable> MasterDuke: https://gist.github.com/cf753ff1ebad318ed7d66a7d11751f66

[04:25] <dalek> roast: ad4acf2 | (Zoffix Znet)++ | packages/Test/Util.pm:

[04:25] <dalek> roast: Add doesn't-hang() multi that takes Str instead of Capture

[04:25] <dalek> roast:

[04:25] <dalek> roast: Run given code as perl6 -e

[04:25] <dalek> roast: review: https://github.com/perl6/roast/commit/ad4acf29aa

[04:25] <dalek> roast: 1c35ad4 | (Zoffix Znet)++ | S06-signature/slurpy-params.t:

[04:25] <dalek> roast: [TODO FUDGE] .gist on @_ containing lazy list correctly thinks it is lazy

[04:25] <dalek> roast:

[04:25] <dalek> roast: RT#128201

[04:25] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128201

[04:25] <dalek> roast: review: https://github.com/perl6/roast/commit/1c35ad4727

[06:57] <dalek> roast: bfd4f0d | usev6++ | S06-signature/slurpy-params.t:

[06:57] <dalek> roast: Skip new test on JVM (Proc::Async NYI)

[06:57] <dalek> roast: review: https://github.com/perl6/roast/commit/bfd4f0d3a4

[07:52] <dalek> nqp: 3d15ced | peschwa++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/ (2 files):

[07:52] <dalek> nqp: Fix up ClassLoader chains for jvminterop.

[07:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3d15ced7b8

[07:52] <dalek> rakudo/nom: 263b021 | peschwa++ | tools/build/NQP_REVISION:

[07:52] <dalek> rakudo/nom: Bump NQP_REVISION for ClassLoader chaining changes.

[07:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/263b021c50

[07:52] <dalek> rakudo/nom: e46407d | peschwa++ | / (7 files):

[07:52] <dalek> rakudo/nom: Bring jvminterop in line with our CUR stuffs.

[07:52] <dalek> rakudo/nom:

[07:52] <dalek> rakudo/nom: This now means we have two ways for interop:

[07:52] <dalek> rakudo/nom:

[07:52] <dalek> rakudo/nom: (1) loading classes from the Java Runtime works with :from<JavaRuntime>.

[07:52] <dalek> rakudo/nom: (2) loading classes from somewhere else on the filesystem works with

[07:52] <dalek> rakudo/nom: 'use lib <java#$path>; use ClassfileOrJarInPath:from<Java>'

[07:52] <dalek> rakudo/nom:

[07:52] <dalek> rakudo/nom: Adjust existing tests accordingly.

[07:52] <dalek> rakudo/nom:

[07:53] <psch> there, that's something \o/

[07:53] <bartolin> \o/

[08:08] <bartolin> psch: do you remember the error 'expected Positional but got Seq' on r-j? you mentioned in RT #126493 that it seems to be related to signature compilation

[08:08] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126493

[08:08] <bartolin> would it make sense to work around that in Binder.java like that: https://gist.github.com/usev6/aac530b87dd24c0261e257b75c7ceaf5

[08:09] <bartolin> (that's probably a crude patch, but it would make about 40 spectests pass :-)

[08:09] <psch> bartolin: the first inner if seems unnecessary?

[08:10] <psch> bartolin: as in, it's just the same conditional as the previous one, but nested

[08:10] <bartolin> psch: oh, I removed the first conditional (that one with &&)

[08:11] <psch> bartolin: ah, okay.  yeah, that sounds reasonable to me

[08:11] <bartolin> the first inner if is basically the old code

[08:11] <psch> as in, we check "is it nomType gcx.Positional" and then we check the two paths, decont and no-decont

[08:11] <bartolin> *nod*

[08:12] <psch> well, the thing is that it was a known workaround to decont into the call that throws like that

[08:12] <psch> and moar does quite a bit more magical {,de}conting i have the feeling :)

[08:12] <psch> so i'd not even call this much of a workaround, but more of a "as good as we can make it at the moment" fix

[08:12] <psch> like, it doesn't actually work around the problem, but simply fixes it in the easiest way currently known vOv

[08:13] <bartolin> :-)

[08:13] <bartolin> so ... I'll open a PR

[08:13] <psch> d'you have anything else off the top of your head that has some amount of tests in double digits?

[08:13] <psch> ('cause i don't *really* want to dig into NC right now :P )

[08:15] <bartolin> no, not off the top of my head

[08:20] <psch> alright, i'll just grep through roast if i can find anything that looks easy-ish

[08:20] <psch> i kinda feel like easy-ish bugs atm :P

[08:21] <bartolin> ++psch :-)

[08:22] <FROGGS> o/

[08:22] <bartolin> hi FROGGS!

[08:22] <psch> o/ FROGGS

[08:23] <FROGGS> :o)

[08:30] <bartolin> psch: PR 827 opened

[08:31] <psch> bartolin: i'll let travis finish (and not go to bed this time, like with i think Zoffix++ PR some time back...) just for formalities sake

[08:32] <bartolin> oh, that PR can wait -- you're welcome to sleep first :-)

[08:32] <psch> it's 10:30 AM... :)

[08:33] <bartolin> ahh, same timezone

[08:34] <FROGGS> sure

[08:34] <FROGGS> same country

[08:35] <bartolin> oh! didn't know that

[08:35] <FROGGS> psch: where do you live again? was south-westish Germany, right?

[08:36] <psch> FROGGS: no, rather central-westish, actually.  Osnabrück currently

[08:36] <FROGGS> ahh, yeah

[08:37] <psch> i kinda did have a plan of moving to Berlin, but that's somewhat on hold, due to medical reasons :S

[08:38] <FROGGS> :S

[08:38] <psch> nothing bad though, no worries :)

[08:38] <FROGGS> phew :o)

[08:39] <bartolin> psch: yes, phew. however, would be very nice to meet you someday (and have a beer together, or something)

[08:39] * bartolin lives in Berlin

[08:39] * FROGGS almost lives in Berlin

[08:42] * bartolin waves southwards

[08:43] * FROGGS waves back

[08:43] <FROGGS> *g*

[08:44] <psch> i'm barely 14 geographical minutes south, i don't think that really counts :P

[08:44] <psch> well, considering it's like 5 degrees west at least

[08:44] <psch> buut, maybe i'm not woven at :P

[08:44] <FROGGS> right :P

[08:45] <FROGGS> I'm living 1 thousand meters outside of Berlin, in the south

[08:46] * bartolin waves westwards, too

[08:48] <psch> ...oh, it's "waved", not "woven", isn't it

[08:48] <FROGGS> I'm not shore

[08:49] <psch> anyway, yeah, hi bartolin :P

[08:52] <psch> hm

[08:52] <psch> should i commit the .class file for the 'use lib' interop test?

[08:52] <psch> 'cause that way we don't have to recompile it

[08:52] <psch> i mean, i'd also commit the .java file so we can add to that for tests if necessary

[08:53] <psch> otoh, i've written the test to compile first now...

[08:57] <dalek> rakudo/nom: 98d57fb | peschwa++ | t/03-jvm/ (2 files):

[08:57] <dalek> rakudo/nom: Add test for "use lib" jvminterop

[08:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/98d57fb638

[08:57] <dalek> rakudo/nom: 1bb86ae | peschwa++ | .gitignore:

[08:57] <dalek> rakudo/nom: Add t/03-jvm/*.class to gitignore

[08:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1bb86aeac0

[09:15] <dalek> rakudo/nom: d09ad6e | usev6++ | src/vm/jvm/runtime/org/perl6/rakudo/Binder.java:

[09:15] <dalek> rakudo/nom: Look for PositionalBindFailover in decont path as well

[09:15] <dalek> rakudo/nom:

[09:15] <dalek> rakudo/nom: This avoids type check errors

[09:15] <dalek> rakudo/nom: 'expected Positional but got Seq'

[09:15] <dalek> rakudo/nom: as described in RT #126493

[09:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d09ad6eaf7

[09:15] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126493

[09:15] <dalek> rakudo/nom: cd19db2 | FROGGS++ | src/vm/jvm/runtime/org/perl6/rakudo/Binder.java:

[09:15] <dalek> rakudo/nom: Merge pull request #827 from usev6/rt126493

[09:15] <dalek> rakudo/nom:

[09:15] <dalek> rakudo/nom: Look for PositionalBindFailover in decont path as well

[09:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cd19db2842

[09:16] <psch> ah, the unfinished runs on travis are osx

[09:17] <FROGGS> yeah, I thought the ones that passed are good enough

[09:17] <psch> no objection from me :)

[09:18] <psch> although, again, someone else merged a PR i said i would merge /o\

[09:18] <psch> my reputation! D:

[09:18] <FROGGS> hehe

[09:22] <psch> #124279 is apparently a lot in roast, but that's definitely not easy

[09:22] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124279

[09:22] <psch> it's actually pretty close to a giant mess spread across 2/3rds of nqp-j /o\

[09:25] <bartolin> psch: yeah, I didn't mention that one because you mumbled something like 'easy-ish' :-)

[09:30] <psch> the good thing is, that lots of the remaining trouble we have with CX in general are in that area

[09:31] <psch> like 'A: for ^1 { B: for ^1 { last A } }', which fails with "CX without handler" or somesuch iirc

[09:31] <psch> the bad thing is that, well, it's interactions between ExceptionHandling.java and QAST::Compiler that somehow don't do quite the right thing, and i have no real clue where exactly things have to be fixed in what way :|

[09:48] <timotimo> i haven't heard them called "environmental variables" yet %)

[09:58] <dalek> roast: c9df7b9 | usev6++ | S (8 files):

[09:58] <dalek> roast: Unfudge tests for RT #126493

[09:58] <dalek> roast: review: https://github.com/perl6/roast/commit/c9df7b99e8

[09:58] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126493

[10:22] <jnthn> afternoon, #perl6-dev

[10:22] <yoleaux2> 15 Jul 2016 06:43Z <Zoffix> jnthn: just a reminder that tomorrow is a Rakudo release and we'll need a MoarVM release cut. Thanks.

[10:22] <jnthn> ...that's precisely why I'm here :-)

[10:22] <dalek> roast: db4a9a7 | usev6++ | S10-packages/precompilation.t:

[10:22] <dalek> roast: Fudge two precomp tests for rakudo-j

[10:22] <dalek> roast: review: https://github.com/perl6/roast/commit/db4a9a7e4c

[10:23] <bartolin> o/ jnthn

[10:25] <jnthn> o/ bartolin

[10:25] <timotimo> o/ bartothn

[10:26] * jnthn can only count Berlin as close by if 4.5 hours of train is "close" :)

[10:26] <nine> jnthn: that's practically in the neighborhood

[10:26] <jnthn> Yeah, pretty much. :-)

[10:26] * jnthn likes having both Berlin and Vienna in a bit over 4 hours train ride. :)

[10:27] <jnthn> If they get around to building the high speed lines they're talking about here, they'll be within 2 hours...

[10:29] <jnthn> Wow, quiet MoarVM month. Only 16 commits.

[10:37] <bartolin> would it be possible to re-enable rakudo-j for camelia? or where there other problems apart from 'make install' not working?

[10:40] <psch> i think it'd just need the evalserver started?

[10:40] <psch> assuming the build is still working, that is

[10:40] <psch> which, actually, might well be disabled...

[10:41] * bartolin doesn't know where that is configured/managed

[10:45] <jnthn> .tell Zoffix http://www.moarvm.org/releases/MoarVM-2016.07.tar.gz

[10:45] <yoleaux2> jnthn: I'll pass your message to Zoffix.

[10:58] <nine> j: say "Hello world!"

[10:58] <camelia> rakudo-jvm 40a953: OUTPUT«Hello world!␤»

[10:58] <nine> j: say "$*PERL"

[10:58] <camelia> rakudo-jvm 40a953: OUTPUT«Perl 6␤»

[10:58] <psch> j: use java::lang::String:from<JavaRuntime>; say "foo" eqv String.new("foo")

[10:58] <camelia> rakudo-jvm 40a953: OUTPUT«===SORRY!===␤Could not find java::lang::String in:␤    /home/camelia␤    /home/camelia/rakudo-j-inst-2/share/perl6/runtime␤    /home/camelia/rakudo-j-inst-2/share/perl6/lib␤    /home/camelia/rakudo-j-inst-2/share/nqp/lib␤    /home/camelia/.perl6…»

[10:59] <nine> j: say "$*PERL.compiler"

[10:59] <camelia> rakudo-jvm 40a953: OUTPUT«Perl 6.compiler␤»

[10:59] <psch> oohkay that's weird

[10:59] <nine> j: say $*PERL.compiler

[10:59] <camelia> rakudo-jvm 40a953: OUTPUT«rakudo (2016.03.102.g.40.a.953.f)␤»

[10:59] <nine> Looks a tiny bit outdated

[10:59] <psch> oh

[10:59] <psch> yeah

[10:59] <psch> j: use java::lang::String:from<Java>; say "foo" eq String.new("foo")

[10:59] <camelia> rakudo-jvm 40a953: OUTPUT«===SORRY!===␤Could not find java::lang::String in:␤    /home/camelia␤    /home/camelia/rakudo-j-inst-2/share/perl6/runtime␤    /home/camelia/rakudo-j-inst-2/share/perl6/lib␤    /home/camelia/rakudo-j-inst-2/share/nqp/lib␤    /home/camelia/.perl6…»

[10:59] <psch> ya that was still broken there too

[11:01] <nine> cronjob for building rakudo-j is still active

[11:01] <nine> running ~/evalbot/build.pl rakudo-jvm manually now to see how it fails

[11:04] <nine> sh: /home/camelia/rakudo-j-inst-1/bin/nqp-j: No such file or directory

[11:04] <nine> atal: unable to access 'https://github.com/perl6/nqp.git/': Failed to connect to github.com port 443: Connection timed out

[11:05] <nine> fatal: unable to access 'https://github.com/perl6/nqp.git/': Failed to connect to github.com port 443: Connection timed out

[11:11] <nine> Ok, I officially don't get this. curl https://github.com/perl6/nqp.git/ works just fine in camelia's VM but git fetch times out.

[11:11] <psch> maybe some git https proxy env vars?

[11:12] <psch> ...do those exist?

[11:12] <nine> None that I can find

[11:13] <nine> Also rakudo-m-1/nqp has exactly the same git config

[11:33] <psch> wow, #126528 is a nice bit of crazy

[11:33] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126528

[11:33] <psch> result.push(HYPER(&operator, leftv, rightv, :$dwim-left, :$dwim-right)); from metaops.pm:530

[11:33] <psch> that's the line that dies with "can't resolve", because it only sees positional arguments..?

[11:34] <timotimo> deeeeeeeeeeeeec1

[11:41] <bartolin> j: say $*PERL.compiler

[11:41] <camelia> rakudo-jvm cd19db: OUTPUT«rakudo (2016.06.276.gcd.19.db.2)␤»

[11:41] <bartolin> \o/

[11:41] <bartolin> nine++

[11:43] <bartolin> j: my $a = <a b c b d>; $a .= unique; say $a.List

[11:43] <camelia> rakudo-jvm cd19db: OUTPUT«This Seq has already been iterated, and its values consumed␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[11:44] <bartolin> j: my $a = <a b c b d>; $a = $a.unique; say $a.List

[11:44] <camelia> rakudo-jvm cd19db: OUTPUT«(a b c d)␤»

[11:45] <nine> Seems like sometimes one just has to wait :)

[11:45] <bartolin> found that one earlier today. $a .= unique is supposed to be syntax sugar for $a = $a.unique, isn't it?

[11:45] <nine> AFAIK yes

[11:47] <Zoffix> jnthn++ thanks

[11:47] <yoleaux2> 10:45Z <jnthn> Zoffix: http://www.moarvm.org/releases/MoarVM-2016.07.tar.gz

[11:55] <dalek> rakudo/nom: 88c35ed | (Zoffix Znet)++ | docs/ (2 files):

[11:55] <dalek> rakudo/nom: Reword `is mangled` changes as a bug fix instead of new feature an addition

[11:55] <dalek> rakudo/nom:

[11:55] <dalek> rakudo/nom: Per comments https://github.com/rakudo/rakudo/pull/826#issuecomment-233106909

[11:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/88c35ed044

[12:16] <Zoffix> I can't believe no one thought of naming rakudo-j as rak-judo :)

[12:17] <psch> wouldn't come to my mind.  the 'u' is almost silent in the japanese word "rakudo"

[12:17] <psch> well, depending on dialect probably, but i only have a bit of an idea of anime japanese :P

[12:21] <DrForr> It's 'ra ku do', separate syllables. Though there are words like 'handakuten' where the 'u' is almost silent.

[12:22] <psch> ah.  who would've thought that popular media is not a comprehensive introduction into the intricacies of a foreign language :/

[12:23] <psch> but google translate agrees, so i'm clearly wrong

[12:23] <DrForr> Well, I did have 2 years in college :)

[12:26] <psch> so what makes an u almost silent or not?

[12:26] <psch> 'cause i'd guess the kana for handakuten would be ha-n-da-ku-te-n?

[12:26] <psch> which i'd guess would be the same 'ku'

[12:27] <psch> (never mind that it probably wouldn't be written in kana, it's just the only thing i know that expresses phonems)

[12:28] <nine> wwaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahh

[12:28] * nine just hates precompilation

[12:28] <psch> yes, let's just remove it again.  then we also don't have the BEGIN EVAL bug on r-j anymore :P

[12:28] <nine> +1

[12:28] <nine> Anyone against?

[12:29] <nine> *** BREAKING NEWS *** Rakudo removes precompilation *** Coffee related shares rise sharply ***

[12:40] <DrForr> Well, as best as I can remember it's because 'da' is a stressed syllable, and further that the 'da' is a 'ha' with a .. well, handakuten mark, which means it's got a stronger accent.

[12:41] <DrForr> Syllables like 'da' and 'za' were introduced later than the iroha syllabary, so they get extra accent to make it clearer, at least I think that's the historical background.

[12:42] <DrForr> And I just remembered it's 'ta' with the marker, not 'ha'.

[12:43] <DrForr> Indirectly related to the fact that native Japanese speakers have trouble with 'ra' and 'la' syllables in English.

[12:46] <psch> that's also regional, isn't it?

[12:46] <psch> i mean, where between 'ra' and 'la' the syllable is pronounced in japanese

[12:47] <DrForr> Japanese doesn't have 'la'.

[12:50] <Zoffix> Is there a way to tell the fudger to skip-fudge the 1 block but manually specify the number of tests it's meant to use in the skip() call? using, e.g. '4 skip' causes it to go hunt for those 4 tests, but I only want it to skip 1 block

[12:51] <Zoffix> In particular, this fudge isn't working right. It sees 4 tests inside subtest() and uses 4 in skip() call, but there are actually 5 elements in the loop, so I need it to use 5: https://github.com/perl6/roast/blob/master/S32-str/encode.t#L66

[12:51] <psch> DrForr: https://en.wikipedia.org/wiki/Japanese_phonology#Consonants says the "postalveolar flap" can sound either as 'r' and 'l'..?

[12:52] <psch> s/and/or/

[12:52] <psch> ah, https://en.wikipedia.org/wiki/Dental,_alveolar_and_postalveolar_lateral_flaps goes into more detail wrt japanese: "[...]actually have a flap that is indeterminate with respect to centrality[...]"

[12:53] <psch> ...i don't *really* know linguistics or phonology vOv

[12:54] <DrForr> Yeah, it took me months of practice to get it halfway right.

[12:55] <nine> I've figured that Japanese have neither 'r' nor 'l' but something where the tongue is somewhere in between those positions

[12:56] * Zoffix found a way to cheat

[12:56] <DrForr> It's just written in ASCII as 'ra' because they needed to choose a letter.

[12:58] <bartolin> Zoffix: you can try to insert '#?DOES 20' above the block

[13:00] <bartolin> . o O ( or maybe better '#?DOES 5' )

[13:00] <Zoffix> bartolin, thanks, that works and is cleaner than my hack

[13:01] <Zoffix> Which was #?rakudo.jvm skip 'Only moar handles this', 5); #

[13:01] <bartolin> :-)

[13:02] <dalek> roast: 6637413 | (Zoffix Znet)++ | S32-str/encode.t:

[13:02] <dalek> roast: Use explicit plan instead of done-testing

[13:02] <dalek> roast:

[13:02] <dalek> roast: As is the case in most other test files

[13:02] <dalek> roast: review: https://github.com/perl6/roast/commit/6637413704

[13:02] <dalek> roast: 16bcd26 | (Zoffix Znet)++ | S32-str/encode.t:

[13:02] <dalek> roast: [TODO FUDGE] .decode.encode roundtrips correctly for utf8-c8

[13:02] <dalek> roast:

[13:02] <dalek> roast: RT#128184

[13:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128184

[13:02] <dalek> roast: review: https://github.com/perl6/roast/commit/16bcd2693d

[13:02] <dalek> roast: 58c6aad | (Zoffix Znet)++ | S32-str/encode.t:

[13:02] <dalek> roast: Fix incorrect test count in fudge

[13:02] <dalek> roast: review: https://github.com/perl6/roast/commit/58c6aad9c7

[13:25] <Zoffix> Looks like I'm going to celebrate Rakudo release with 5 steak dinners tonight.... fridge seems to be busted

[13:31] <jnthn> I've no beef with that plan...

[13:32] <jnthn> .oO( It's not cool how much food is at steak here... )

[13:34] <dalek> rakudo/nom: b45faa5 | niner++ | src/core/CompUnit/Precompilation (2 files):

[13:34] <dalek> rakudo/nom: Defer creating precomp directories to first write operation

[13:34] <dalek> rakudo/nom:

[13:34] <dalek> rakudo/nom: This removes the last remaining write operation from ostensibly pure

[13:34] <dalek> rakudo/nom: read code paths.

[13:34] <dalek> rakudo/nom:

[13:34] <dalek> rakudo/nom: Fixes permission problems when searching for precomp files in

[13:34] <dalek> rakudo/nom: repositories where we lack write permission and reduces clutter.

[13:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b45faa5336

[13:35] <Zoffix> :)

[13:39] <dalek> rakudo/nom: 0498e80 | niner++ | src/core/CompUnit/PrecompilationRepository.pm:

[13:39] <dalek> rakudo/nom: Enable precompilation even if we change repositories after loading

[13:39] <dalek> rakudo/nom:

[13:39] <dalek> rakudo/nom: Replace the restriction by forcing of re-checking of dependencies in cases

[13:39] <dalek> rakudo/nom: where there repo chain changed after we already loaded precomp files.

[13:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0498e803b5

[13:42] <timotimo> that seems very good

[13:46] <dalek> rakudo/nom: b06a99e | niner++ | src/core/CompUnit/PrecompilationRepository.pm:

[13:46] <dalek> rakudo/nom: Fix loading modules from the Staging repo during precompilation

[13:46] <dalek> rakudo/nom:

[13:46] <dalek> rakudo/nom: When we change the repo chain after the fact (as in load a precompiled

[13:46] <dalek> rakudo/nom: CompUnit::Repository::Staging and then try to load precomp files from

[13:46] <dalek> rakudo/nom: there) a new CompUnit::PrecompilationRepository gets created and used.

[13:46] <dalek> rakudo/nom: This new precompilation repository would not know about modules loaded

[13:46] <dalek> rakudo/nom: by the one used earlier causing precompilation processes to fail.

[13:46] <dalek> rakudo/nom:

[13:46] <dalek> rakudo/nom: Fix by sharing the %loaded hash between precompilation repository

[13:46] <dalek> rakudo/nom: instances.

[13:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b06a99ebdd

[13:50] <dalek> rakudo/nom: cd42657 | niner++ | / (4 files):

[13:50] <dalek> rakudo/nom: Don't include repositories in precomp dependencies

[13:50] <dalek> rakudo/nom:

[13:50] <dalek> rakudo/nom: Just because we loaded a custom repo implementation like

[13:50] <dalek> rakudo/nom: CompUnit::Repository::Staging during precompilation of a module doesn't

[13:50] <dalek> rakudo/nom: mean that the module depends on this repo implementation at runtime.

[13:50] <dalek> rakudo/nom:

[13:50] <dalek> rakudo/nom: This fixes a bootstrap issue: the Staging repo is for precompiling a

[13:50] <dalek> rakudo/nom: module into a staging area which later on gets copied into the final

[13:50] <dalek> rakudo/nom: place. The staging area's path however must not end up in the precomp

[13:50] <dalek> rakudo/nom: files and should instead be replaced by the repo's logical name if

[13:50] <dalek> rakudo/nom: available.

[13:50] <dalek> rakudo/nom:

[13:50] <dalek> rakudo/nom: When installing CompUnit::Repository::Staging itself however, this

[13:50] <nine> Ok, this was the final fix.

[13:51] <jnthn> \o/

[13:51] <jnthn> nine++

[13:51] <nine> Zoffix: make DESTDIR=... install should work again and we gained a couple of other nice fixes and features in the process.

[13:51] <nine> I'm a bit surprised however that I actually made it through :)

[13:52] <jnthn> :)

[13:52] <jnthn> Persisting compilation output apparently needs a lot of persistence... :)

[13:52] <Zoffix> Weeee \o/ nine++

[13:59] <nine> I even left a comment pointing out the place where an interested party could add the one line needed for implementing a global "turn off precompilation" switch ;)

[14:26] <travis-ci> Rakudo build errored. Stefan Seifert 'Defer creating precomp directories to first write operation

[14:26] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/145214203 https://github.com/rakudo/rakudo/compare/88c35ed04491...b45faa533624

[14:29] <dalek> nqp: bd92d41 | (Zoffix Znet)++ | tools/build/MOAR_REVISION:

[14:29] <dalek> nqp: Bump MoarVM version to 2016.07

[14:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bd92d4113c

[14:29] <dalek> nqp: 64e3745 | (Zoffix Znet)++ | VERSION:

[14:29] <dalek> nqp: bump VERSION to 2016.07

[14:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/64e37455ca

[15:03] <travis-ci> Rakudo build failed. Stefan Seifert 'Enable precompilation even if we change repositories after loading

[15:03] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/145214700 https://github.com/rakudo/rakudo/compare/b45faa533624...0498e803b59c

[15:13] <nine> Travis output doesn't look good :/

[15:13] <stmuk> . o O ( trailing whitespace? )

[15:13] <timotimo> nowadays when travis fails i don't even look, because half the time it's just some random problem. github unavailable, travis container hung up near the beginning, ...

[15:14] <Zoffix> It's not the last commit.

[15:15] <timotimo> fuck travis

[15:15] <timotimo> "this is not an active repository"

[15:15] <timotimo> yeah right

[15:15] <timotimo> anyway, Zoffix is right, the latest commit seems to build fine again

[15:15] <timotimo> the jvm backend ones are still compiling

[15:16] <nine> lucky me :)

[15:16] <nine> Well that's what I get for splitting my changes into individual commits without testing them individually

[15:17] <timotimo> the jvm ones seem stuck in the make install phase

[15:19] <nine> Looks like it just takes ages :)

[15:25] <dalek> rakudo/nom: c32fc22 | (Zoffix Znet)++ | tools/build/NQP_REVISION:

[15:25] <dalek> rakudo/nom: [release] bump NQP revision

[15:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c32fc2280a

[15:27] <dalek> rakudo/nom: 76ce6d4 | (Zoffix Znet)++ | VERSION:

[15:27] <dalek> rakudo/nom: [release] bump VERSION

[15:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/76ce6d4075

[15:35] <timotimo> https://goo.gl/photos/YcjeBUgUnV3PSE7SA  <- nine, you recently bragged about your pool, eh? :)

[15:39] <nine> Haha :)

[15:49] <travis-ci> Rakudo build errored. Stefan Seifert 'Fix loading modules from the Staging repo during precompilation

[15:49] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/145215487 https://github.com/rakudo/rakudo/compare/0498e803b59c...b06a99ebdd79

[16:11] <Zoffix> S11-modules/ require and nested fail on 6.c :( https://gist.github.com/zoffixznet/6f936851d743aecce3318eb268d2efec

[16:11] * Zoffix starts the run again

[16:14] <Zoffix> "'use lib' may not be pre-compiled"

[16:14] <gfldex> was there an test against the ecosystem with the new release?

[16:15] <Zoffix> .ask nine any idea about these failures against 6.c roast? Both fail with use lib may not be precompiled? https://gist.github.com/zoffixznet/17f266b129c113654df29d2d786e0bbd

[16:15] <yoleaux2> Zoffix: I'll pass your message to nine.

[16:17] <nine> Zoffix: I think those tests are buggy and warrant an -errata commit

[16:17] <yoleaux2> 16:15Z <Zoffix> nine: any idea about these failures against 6.c roast? Both fail with use lib may not be precompiled? https://gist.github.com/zoffixznet/17f266b129c113654df29d2d786e0bbd

[16:19] <Zoffix> Hm... Basically `use lib` inside modules is no longer allowed: https://gist.github.com/zoffixznet/a60e08771ea813794a509a3cbf49ed20

[16:20] <Zoffix> Well, unless you use no precompilation.

[16:22] <Zoffix> So anyone with such a setup will have their code broken. Doesn't that make us renege on the promise that stuff passing against 6.c won't break?

[16:22] <dalek> roast/6.c-errata: 32fd216 | niner++ | packages/ (4 files):

[16:22] <dalek> roast/6.c-errata: Remove useless and actually harmful 'use lib' statements from modules.

[16:22] <dalek> roast/6.c-errata:

[16:22] <dalek> roast/6.c-errata: There's no need to use lib 't/spec/packages' in a module that _is_ loaded

[16:22] <dalek> roast/6.c-errata: from that path already. If t/spec/packages was not in the repo list, we could

[16:22] <dalek> roast/6.c-errata: not have loaded the modules in the first place.

[16:22] <dalek> roast/6.c-errata:

[16:22] <dalek> roast/6.c-errata: It's actually harmful as we don't allow a "use lib" in a precompiled module.

[16:22] <dalek> roast/6.c-errata: This only made it into 6.c as other restrictions prevented us from

[16:22] <dalek> roast/6.c-errata: precompiling these modules but those restrictions were an implementation

[16:22] <dalek> roast/6.c-errata: detail, not necessitated by the language design.

[16:22] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/32fd216a64

[16:22] <Zoffix> Cool.

[16:22] * Zoffix builds again

[16:22] <nine> Zoffix: the restriction has already been in place. As I explained in the commit message, it was other restrictions that kept us from precompiling.

[16:23] <nine> It's possible that we could actually allow 'use lib' in precopiled modules now, though it scares me and is definitely not last minute material :)

[16:23] <Zoffix> :)

[16:27] <Zoffix> gfldex, the release is still in progress. Ecosystem tests are not part of the process. You can see all steps involved in the release guide: https://github.com/rakudo/rakudo/blob/nom/docs/release_guide.pod

[16:27] <gfldex> Zoffix: there is a regression in htmlify.p6. Likely in the last 2 days.

[16:28] <gfldex> i need to make a run to the shop and will dig deeper in 2h or so

[16:56] <Zoffix> gfldex, from what I can see, the failure is in is cached, which is experimental.

[16:56] <Zoffix> s/in/due/;

[17:01] <Zoffix> Sure takes ages to get enough entropy to make a GPG key :(

[17:01] <Zoffix> It should use my apartment as source. The place's a mess.

[17:02] <nine> Zoffix: run a ping -f on a host on the same network

[17:02] <nine> Zoffix: also exercise by keeping your mouse moving :)

[17:02] <timotimo> https://twitter.com/DeKroonCat/status/754003489907433472/video/1  -  use cat videos as entropy source

[17:03] <Zoffix> 'ping: cannot flood; minimal interval allowed for user is 200ms'

[17:03] <Zoffix> It's a remote VM. No mouse :)

[17:03] <nine> Zoffix: sudo?

[17:03] <Zoffix> Oh, right. I have sudo! :)

[17:04] <Zoffix> Oh awesome. That seems to have sped up the process. nine++

[17:15] * Zoffix celebrates with an appropriate amount of fun

[17:16] <Zoffix> </release>

[17:16] <travis-ci> Rakudo build passed. Zoffix Znet '[release] bump NQP revision'

[17:16] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/145226597 https://github.com/rakudo/rakudo/compare/cd42657477a1...c32fc2280a71

[17:25] <dalek> rakudo/nom: a81e028 | (Zoffix Znet)++ | docs/release_guide.pod:

[17:25] <dalek> rakudo/nom: Fix typos in examples filenames

[17:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a81e0283d1

[17:25] <dalek> rakudo/nom: de009f9 | (Zoffix Znet)++ | docs/release_guide.pod:

[17:25] <dalek> rakudo/nom: Use 3-digit template in instructions

[17:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/de009f94fa

[17:25] <dalek> rakudo/nom: bc722ab | (Zoffix Znet)++ | docs/release_guide.pod:

[17:25] <dalek> rakudo/nom: Add Zoffix as one of the pingables to upload tarballs to rakudo.org

[17:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bc722abe2c

[17:26] <dalek> nqp: 31ca0c2 | (Zoffix Znet)++ | docs/release_guide.pod:

[17:26] <dalek> nqp: Add Zoffix as one of the pingables to upload tarballs to rakudo.org

[17:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/31ca0c2dc5

[17:50] <travis-ci> Rakudo build passed. Zoffix Znet '[release] bump VERSION'

[17:50] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/145226787 https://github.com/rakudo/rakudo/compare/c32fc2280a71...76ce6d407516

[18:00] <Zoffix> m: my %cache; sub foo ($what) { say "wtf"; 42 }; &foo.wrap: -> |c { my $key := c.gist; %cache.EXISTS-KEY( $key ) ?? %cache{ $key } !! (%cache{ $key } := callsame) }; foo(42), foo(55), foo(55); dd %cache

[18:00] <camelia> rakudo-moar bc722a: OUTPUT«wtf␤wtf␤Hash %cache = {"\\(42)" => 42, "\\(55)" => 42}␤»

[18:00] <Zoffix> m: my %cache; sub foo ($what) { 42 }; &foo.wrap: -> |c { my $key := c.gist; %cache.EXISTS-KEY( $key ) ?? %cache{ $key } !! (%cache{ $key } := callsame) }; foo(42), foo(55), foo(55); dd %cache

[18:00] <camelia> rakudo-moar bc722a: OUTPUT«Hash %cache = {}␤»

[18:00] <Zoffix> ¯\_(ツ)_/¯

[18:00] <Zoffix> Can't reproduce the htmlify.p6 failure, but the above is weird.

[18:00] <Zoffix> Oh, it gets optimized away?

[18:01] <Zoffix> m: my %cache; sub foo ($what) { rand }; &foo.wrap: -> |c { my $key := c.gist; %cache.EXISTS-KEY( $key ) ?? %cache{ $key } !! (%cache{ $key } := callsame) }; foo(42), foo(55), foo(55); dd %cache

[18:01] <camelia> rakudo-moar bc722a: OUTPUT«Hash %cache = {"\\(42)" => 0.729925963588579e0, "\\(55)" => 0.408734838943235e0}␤»

[18:01] <Zoffix> Seems like it

[18:03] <Zoffix> m: sub cache-it (&sub) { my %cache; &sub.wrap: -> |c { my $key := c.gist; %cache.EXISTS-KEY( $key ) ?? %cache{ $key } !! (%cache{ $key } := callsame) } }; sub foo ($what) { say "meow"; 42 }; cache-it &foo; foo(42), foo(55), foo(55);

[18:03] <camelia> rakudo-moar bc722a: OUTPUT«meow␤meow␤»

[18:03] <Zoffix> No idea.

[18:04] * Zoffix blames the default scapegoat for all unknown failures: precompilation :)

[18:08] <gfldex> Zoffix: without is cached the docs build just fine

[18:08] <gfldex> a good bit slower tho

[18:09] <Zoffix> No idea :/ The above is basically the is cached trait's implementation and it's not failing.

[18:10] <gfldex> in the docs the is cached is also in a module

[18:23] <Zoffix> k, I can reproduce it now

[18:24] <Zoffix> And hey! I was right, it's precompilation. Disabling it avoids the problem.

[18:24] * Zoffix will file a ticket after a break

[18:28] <Zoffix> Probably related to this one .wraps across modules: https://rt.perl.org/Ticket/Display.html?id=128476

[18:35] <travis-ci> Rakudo build errored. Zoffix Znet 'Add Zoffix as one of the pingables to upload tarballs to rakudo.org'

[18:35] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/145240985 https://github.com/rakudo/rakudo/compare/76ce6d407516...bc722abe2cd7

[18:42] <nine> Zoffix: I'm not really surprised. We can now precompile more than before.

[18:52] <Zoffix> Sweet.

[19:36] <dalek> roast: da3e94a | usev6++ | S0 (5 files):

[19:36] <dalek> roast: Unfudge some tests for rakudo-j

[19:36] <dalek> roast: review: https://github.com/perl6/roast/commit/da3e94ac9a

[19:37] <cygx> o/

[19:38] * cygx wonders if perl6 should try to jump on the Graal/Truffle bandwagon

[19:38] <cygx> it seems to come along nicely

[19:38] <cygx> video at https://www.youtube.com/watch?v=FJY96_6Y3a4

[19:38] <cygx> slides at https://lafo.ssw.uni-linz.ac.at/pub/papers/2016_PLDI_Truffle.pdf

[19:38] <cygx> benchmark results start on p. 15

[19:45] <Zoffix> Isn't that the same thing they were saying about LLVM? "You must do LLVM or else!"

[19:45] <Zoffix> I can't understand anything the guy in the video is saying :/

[19:45] <cygx> Zoffix: it's basically the same thing Parrot was supposed to be (multi-language vm/runtim), but actually competitive

[19:46] <Zoffix> neat

[19:47] <cygx> they apparently ended up outperforming any other Ruby implementation, in pathological cases by a factor of 300x

[20:07] <Zoffix> Crap. HTTP::UserAgent install fails now. Last commit was in May, so I assume it's some Rakudo changes that make it fail :/

[20:09] <dalek> roast: ef7b0da | usev6++ | S04- (2 files):

[20:09] <dalek> roast: Unfudge a few skipped tests

[20:09] <dalek> roast: review: https://github.com/perl6/roast/commit/ef7b0da83d

[20:10] <timotimo> if you can figure out a litle golf, we can bisect it :D

[20:18] <Zoffix> bisect: Bool::False // die

[20:18] <bisectable> Zoffix: On both starting points the exit code is 0 and the output is identical as well

[20:18] <bisectable> Zoffix: Output on both points:

[20:20] <cygx> ^-- perhaps that should come with output delimiters

[20:23] <Zoffix> Or maybe I always forced the install due to previously hanging tests and this has nothing to do with Rakudo. I can make the test pass by changing // to || but I don't know if that just masks the failure

[20:23] <awwaiid> that's a nice video on truffle, lots of code

[20:29] <cygx> conceptionally, it's not too hard how one should proceed getting Rakudo on Truffle

[20:29] <cygx> 1. take 6model/JVM

[20:29] <cygx> 2. write a MOarvm bytecode interpreter

[20:29] <cygx> that would solve all the bootsrapping issues

[20:29] <cygx> *bootstrapping

[20:29] <Zoffix> bisect: use NativeCall; sub system (Str) is native {}; system 'ls'

[20:30] <bisectable> Zoffix: On both starting points the exit code is 0 and the output is identical as well

[20:30] <bisectable> Zoffix: Output on both points: appveyor.yml␤blib␤Configure.pl␤CREDITS␤docs␤dynext␤gen␤INSTALL.txt␤lib␤LICENSE␤README.md␤src␤t␤tools␤VERSION

[20:30] <Zoffix> bisect: use NativeCall; sub system (Str) is native {}; system 'hostname'

[20:30] <bisectable> Zoffix: On both starting points the exit code is 0 and the output is identical as well

[20:30] <bisectable> Zoffix: Output on both points: superserver

[20:30] <Zoffix> This isn't run on hack?

[20:31] <MasterDuke> AlexDaniel hasn't moved it their yet

[20:31] <Zoffix> Ah.

[20:31] <MasterDuke> *there

[20:32] <MasterDuke> how much disk space does hack have? i think timotimo was mentioning something about that recently

[20:33] <Zoffix> 834GB: https://gist.github.com/zoffixznet/4f6e2ba5c121b91a586f7ca6faa3074a

[20:33] <MasterDuke> ha. as long as the builds go in home i think it'll be fine

[20:34] <timotimo> yeah, i'm not worried about space in general, just on /

[20:34] <timotimo> which is, as i said, filled up to the brim with logged segfaults or something

[20:34] <MasterDuke> pretty sure AlexDaniel said a while ago they are ~70GB

[20:48] <AlexDaniel> space is not a problem

[20:49] <AlexDaniel> it is about 30MB per commit

[20:49] <AlexDaniel> m: say 30*2000

[20:49] <camelia> rakudo-moar bc722a: OUTPUT«60000␤»

[20:50] <dalek> nqp: ad2149c | (David Warring)++ | t/nqp/059-nqpop.t:

[20:50] <dalek> nqp: test nqp::sha1

[20:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ad2149ce7f

[20:51] <AlexDaniel> I am more concerned about CPU usage… :/

[20:55] <mst> apply 'nice' if you're showing up too much in top?

[20:59] <AlexDaniel> mst: I the most convenient solution for everyone would be to build everything on my server and then rsync it to hack :)

[20:59] <AlexDaniel> I think*

[21:04] <dalek> nqp: 1bca321 | (David Warring)++ | t/nqp/059-nqpop.t:

[21:04] <dalek> nqp: combine new and existing sha1 test

[21:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1bca321275

[21:44] <lizmat> Zoffix++   # release!

[21:45] <timotimo> hooray!

[21:51] <Zoffix> \o/

[21:55] <nine> Zoffix++

[22:24] <dalek> rakudo/nom: fd1be32 | lizmat++ | src/core/ (2 files):

[22:24] <dalek> rakudo/nom: Make Str.index about 30% faster

[22:24] <dalek> rakudo/nom:

[22:24] <dalek> rakudo/nom: By giving it a dedicated Str:D candidate, and lettin the Cool

[22:24] <dalek> rakudo/nom: candidate refer to it

[22:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fd1be327fe

[22:31] <[TuxCM]> This is Rakudo version 2016.07-3-gbc722ab built on MoarVM version 2016.07

[22:31] <[TuxCM]> test            16.649

[22:31] <[TuxCM]> test-t           8.648

[22:31] <[TuxCM]> csv-parser      17.874

[22:33] <lizmat> not too shabby  :-)

[22:35] <dalek> rakudo/nom: fcfe3c0 | lizmat++ | src/core/ (2 files):

[22:35] <dalek> rakudo/nom: Make Str.rindex about 30% faster

[22:35] <dalek> rakudo/nom:

[22:35] <dalek> rakudo/nom: By giving it a dedicated Str:D candidate, and letting the Cool

[22:35] <dalek> rakudo/nom: candidate refer to it

[22:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fcfe3c04ed

[22:37] <lizmat> good night, #perl6-dev

[22:38] <timotimo> gnite liz

[22:40] <Zoffix> night

[23:14] <dalek> rakudo/nom: 7463081 | (Zoffix Znet)++ | docs/ChangeLog:

[23:14] <dalek> rakudo/nom: Start 2016.08 ChangeLog section

[23:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7463081235

[23:14] <dalek> rakudo/nom: 980f496 | (Zoffix Znet)++ | / (3 files):

[23:14] <dalek> rakudo/nom: .polymod with a lazy list must not lose mods if the list runs out

[23:14] <dalek> rakudo/nom:

[23:14] <dalek> rakudo/nom: Fixes RT#128176

[23:14] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128176

[23:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/980f496fa8

[23:15] <dalek> roast: 61160f5 | (Zoffix Znet)++ | S32-num/polymod.t:

[23:15] <dalek> roast: .polymod with a lazy list does not lose divisors when list runs out

[23:15] <dalek> roast:

[23:15] <dalek> roast: RT#128176

[23:15] <dalek> roast: review: https://github.com/perl6/roast/commit/61160f5640

[23:15] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128176

[23:19] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make Str.index about 30% faster

[23:19] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/145276565 https://github.com/rakudo/rakudo/compare/bc722abe2cd7...fd1be327fe52

[23:41] <Zoffix> m: say 'SS' ~~ m:i/ß/

[23:41] <camelia> rakudo-moar 980f49: OUTPUT«False␤»

[23:41] <Zoffix> m: say 'SS'.fc ~~ 'ß'.fc

[23:41] <camelia> rakudo-moar 980f49: OUTPUT«True␤»

[23:44] <Zoffix> m: say 'ß' ~~ m:i/SS/

[23:44] <camelia> rakudo-moar 980f49: OUTPUT«False␤»

[23:44] <gfldex> m: <abß deö>

[23:44] <camelia> rakudo-moar 980f49: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant value abß deö in sink context (lines 1, 1, 1, 1)␤»

[23:45] <Zoffix> Ticketed: <Zoffix> m: say 'ß' ~~ m:i/SS/

[23:45] <Zoffix> <camelia> rakudo-moar 980f49: OUTPUT«False␤»

[23:45] <Zoffix> oops

[23:45] <Zoffix> https://rt.perl.org/Ticket/Display.html?id=128642

[23:46] <gfldex> Zoffix: i don't agree on that one. Not all SS mean upper case for 'ß'.

[23:47] <gfldex> Zoffix: or "Waffen SS" ~~ "Waffen ß" would be true, making processing of german histroy books quite tricky

[23:48] <Zoffix> m: "Waffen SS".fc eq "Waffen ß".fc

[23:48] <camelia> rakudo-moar 980f49: OUTPUT«WARNINGS for <tmp>:␤Useless use of "eq" in expression ".fc eq \"Waffen ß\".fc" in sink context (line 1)␤»

[23:48] <Zoffix> m: say "Waffen SS".fc eq "Waffen ß".fc

[23:48] <camelia> rakudo-moar 980f49: OUTPUT«True␤»

[23:49] <Zoffix> I don't see a difference between using case-insensitive `eq` above vs case-insensitive regex match. But they give different results.

[23:49] <gfldex> that's why I was told in school that upper case for ß is SZ. Years later my officer agreed.

[23:51] <Zoffix> m: say "Waffen SS" eq "Waffen ß".fc

[23:51] <camelia> rakudo-moar 980f49: OUTPUT«False␤»

[23:51] <Zoffix> m: say "Waffen SS".fc eq "Waffen ß".fc

[23:51] <camelia> rakudo-moar 980f49: OUTPUT«True␤»

[23:51] <Zoffix> m: say 'ß'.fc ~~ m:i/SS/

[23:51] <camelia> rakudo-moar 980f49: OUTPUT«｢ss｣␤»

[23:51] <Zoffix> Ahh
