[00:07] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Give 1dimmed arrays its own .antipairs

[00:07] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173746785 https://github.com/rakudo/rakudo/compare/c5c600112561...1c425f972644

[00:07] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[00:50] <mst> I ... don't think this is right

[00:50] <mst> m: 1...10 >>*>> 2

[00:50] <camelia> rakudo-moar 1c425f: ( no output )

[00:50] <mst> m: say 1...10 >>*>> 2

[00:50] <camelia> rakudo-moar 1c425f: OUTPUT«(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)␤»

[00:50] <mst> m: say 1,2...10 >>*>> 2

[00:50] <camelia> rakudo-moar 1c425f: OUTPUT«(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)␤»

[00:50] <mst> m: say 1,2,4...10 >>*>> 2

[00:50] <camelia> rakudo-moar 1c425f: OUTPUT«(1 2 4 8 16)␤»

[00:51] <mst> the compile time expansion of the arithmetic sequence is fucking up precedence, I guess?

[01:21] <viki> ... is lower precedence

[01:25] <viki> m: say 2 + 2 «*» 10

[01:25] <camelia> rakudo-moar 1c425f: OUTPUT«22␤»

[01:25] <viki> m: say 2 * 2 «+» 10

[01:25] <camelia> rakudo-moar 1c425f: OUTPUT«14␤»

[01:25] <viki> m: say (1,2,4…10) »*» 2

[01:25] <camelia> rakudo-moar 1c425f: OUTPUT«(2 4 8 16)␤»

[03:36] <MasterDuke> jnthn: i'm not following something. just to see what's going on i added a print in lineof (https://github.com/perl6/nqp/blob/master/src/HLL/Compiler.nqp#L664). i see it when building nqp, but it's not getting triggered when building rakudo

[07:19] <[Tux]> This is Rakudo version 2016.10-196-g1c425f9 built on MoarVM version 2016.10-39-g4b9e3a8

[07:19] <[Tux]> csv-ip5xs        3.060

[07:19] <[Tux]> test            14.601

[07:19] <[Tux]> test-t           6.931

[07:19] <[Tux]> csv-parser      16.426

[07:50] <dalek> roast: 779d02e | moritz++ | S12-construction/TWEAK.t:

[07:50] <dalek> roast: Initial tests for submethod TWEAK

[07:50] <dalek> roast: review: https://github.com/perl6/roast/commit/779d02eee3

[07:50] <moritz> timotimo: time to merge your branch ^^

[08:40] <dalek> rakudo/POSTBUILD_method: 6b8d481 | moritz++ | t/spectest.data:

[08:40] <dalek> rakudo/POSTBUILD_method: Run TWEAK tests

[08:40] <dalek> rakudo/POSTBUILD_method: review: https://github.com/rakudo/rakudo/commit/6b8d481bea

[08:41] <tadzik> so, TWEAK, eh?

[08:41] <tadzik> it's a nice name :)

[08:41] <tadzik> timotimo++ for putting this in motion :)

[09:18] <lizmat> Files=1151, Tests=53712, 214 wallclock secs (12.77 usr  3.66 sys + 1301.86 cusr 122.57 csys = 1440.86 CPU)

[11:03] <lizmat> m: my @a[2;2] = <a b>,<c d>; say @a[0;0]:!exists  # buglet

[11:03] <camelia> rakudo-moar 1c425f: OUTPUT«Partially dimensioned views of arrays not yet implemented. Sorry. ␤  in block <unit> at <tmp> line 1␤␤»

[11:03] <lizmat> m: my @a[2;2] = <a b>,<c d>; say @a[0;0]:exists

[11:03] <camelia> rakudo-moar 1c425f: OUTPUT«True␤»

[11:07] <dalek> rakudo/js: b48c448 | (Pawel Murias)++ | src/vm/js/perl6-runtime/runtime.js:

[11:07] <dalek> rakudo/js: [js] Call $$decont directly instead of using the no longer present nqp.op.decont.

[11:07] <dalek> rakudo/js: review: https://github.com/rakudo/rakudo/commit/b48c4481bc

[11:07] <dalek> rakudo/js: 91dd06e | (Pawel Murias)++ | src/vm/js/ (2 files):

[11:07] <dalek> rakudo/js: [js] Fix some bugs after null -> Null transition.

[11:07] <dalek> rakudo/js: review: https://github.com/rakudo/rakudo/commit/91dd06ea9a

[11:16] <lizmat> re: TWEAK, has anybody looked at the influence that has on general object building ?

[11:16] <lizmat> performance wise, I mean ?

[11:22] <dalek> rakudo/nom: 0b97362 | lizmat++ | src/core/array_slice.pm:

[11:22] <dalek> rakudo/nom: postcircumfix[;] 9x faster 2/3 dimmed arrays

[11:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0b973628ee

[11:38] <dalek> rakudo/nom: ce85ba3 | lizmat++ | src/core/array_slice.pm:

[11:38] <dalek> rakudo/nom: assign to [;] for 2/3 dimmed arrays 10x faster

[11:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ce85ba378d

[11:53] <dalek> nqp: 34828da | (Pawel Murias)++ | src/vm/js/bin/run_tests_bootstrapped.pl:

[11:53] <dalek> nqp: [js] Update our nqp-js-on-js test run to take in account changes where the compiled code is stored.

[11:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/34828da19d

[11:53] <dalek> nqp: a620574 | (Pawel Murias)++ | src/vm/js/Operations.nqp:

[11:53] <dalek> nqp: [js] Remove trailing space.

[11:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a6205747fa

[11:53] <dalek> nqp: 3c6892a | (Pawel Murias)++ | src/vm/js/RegexCompiler.nqp:

[11:53] <dalek> nqp: [js] $¢ is declared by the surrounding Block no need to do weird stuff with it.

[11:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3c6892a558

[11:56] <dalek> rakudo/nom: bb662ff | lizmat++ | / (4 files):

[11:56] <dalek> rakudo/nom: Split off postcircumfix[;] candidates

[11:56] <dalek> rakudo/nom:

[11:56] <dalek> rakudo/nom: into a separate multidim_slice.pm file, as there will be plenty more

[11:56] <dalek> rakudo/nom: candidates coming and most of it will be rewritten by me anyway.

[11:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bb662ff6cf

[12:09] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'postcircumfix[;] 9x faster 2/3 dimmed arrays'

[12:09] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173864832 https://github.com/rakudo/rakudo/compare/1c425f972644...0b973628ee20

[12:09] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[12:45] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'assign to [;] for 2/3 dimmed arrays 10x faster'

[12:45] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173868125 https://github.com/rakudo/rakudo/compare/0b973628ee20...ce85ba378d29

[12:45] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[12:59] <dalek> rakudo/nom: e3e3fef | lizmat++ | src/core/multidim_slice.pm:

[12:59] <dalek> rakudo/nom: Make [;]:exists 7x faster for 2/3 dimmed arrays

[12:59] <dalek> rakudo/nom:

[12:59] <dalek> rakudo/nom: Also fix :!exists, it would break before

[12:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e3e3fefd34

[13:14] <TimToady> lizmat: I'd say that the existence of a submethod TWEAK can be determined at composition time when we put together the build plan, so shouldn't be a problem in theory

[13:15] <lizmat> ah, indeed  :-)

[13:17] <dalek> rakudo/nom: 3b9c4c9 | lizmat++ | src/core/multidim_slice.pm:

[13:17] <dalek> rakudo/nom: Make [;]:delete 10 faster for 2/3 dimmed arrays

[13:17] <dalek> rakudo/nom:

[13:17] <dalek> rakudo/nom: Also fix :!delete, it would break before

[13:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3b9c4c95b9

[13:17] <lizmat> oops, 10x

[13:18] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Split off postcircumfix[;] candidates

[13:18] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173871978 https://github.com/rakudo/rakudo/compare/ce85ba378d29...bb662ff6cfff

[13:18] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[13:20] <dalek> rakudo/nom: b71a8bc | ab5tract++ | src/core/set_operators.pm:

[13:20] <dalek> rakudo/nom: Two-arg version of symmetric difference should DWIM

[13:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b71a8bc800

[13:20] <dalek> rakudo/nom: 6ab0c48 | ab5tract++ | src/core/set_operators.pm:

[13:20] <dalek> rakudo/nom: Make chained (^) work as expected for bags/mixes

[13:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ab0c48eba

[13:20] <dalek> rakudo/nom: f9fec1c | ab5tract++ | src/core/set_operators.pm:

[13:20] <dalek> rakudo/nom: Unicode op version should not be constrained to returning Setty

[13:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f9fec1c3bd

[13:20] <dalek> rakudo/nom: 40704b8 | (Zoffix Znet)++ | src/core/set_operators.pm:

[13:20] <dalek> rakudo/nom: Merge pull request #911 from ab5tract/ab5tract/sym-diff-bag-mix

[13:20] <dalek> rakudo/nom:

[13:20] <timotimo> lizmat: hold on, that's 10 fast 20 me!

[13:22] <dalek> roast: 21fc586 | ab5tract++ | S03-operators/ (3 files):

[13:22] <dalek> roast: Test updated for proper bag/mix symmetric difference (#179)

[13:22] <dalek> roast: review: https://github.com/perl6/roast/commit/21fc586d71

[13:27] <[Coke]> we should probably decomission perl6-release; hasn't been used for the past few releases, only send there in months was a political spammer.

[13:27] <nine> +1

[13:33] <dalek> roast: 6b20963 | (Zoffix Znet)++ | S03-operators/mix.t:

[13:33] <dalek> roast: Adjust plan

[13:33] <dalek> roast:

[13:33] <dalek> roast: Per discussion[^1], the adjustment is needed due to PR#179 removing

[13:33] <dalek> roast: some redundant tests, while forgetting to adjust the plan.

[13:33] <dalek> roast:

[13:33] <dalek> roast: https://github.com/perl6/roast/pull/179#discussion_r86182898

[13:33] <dalek> roast: review: https://github.com/perl6/roast/commit/6b20963c31

[13:38] <dalek> roast: c667421 | (Zoffix Znet)++ | S03-operators/bag.t:

[13:38] <dalek> roast: Unfudge now-passing tests

[13:38] <dalek> roast:

[13:38] <dalek> roast: Tests made passing by https://github.com/rakudo/rakudo/pull/911

[13:38] <dalek> roast:

[13:38] <dalek> roast: RT#124529: https://rt.perl.org/Public/Bug/Display.html?id=124529

[13:38] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124529

[13:38] <dalek> roast: review: https://github.com/perl6/roast/commit/c667421fa3

[13:38] <mst> viki: yes, but why does the precedence of ... *change* ?

[13:38] * timotimo misses that context

[13:38] <viki> mst: it doesn't

[13:39] <viki> timotimo: https://irclog.perlgeek.de/perl6-dev/2016-11-07#i_13525128

[13:39] <viki> mst: ** is higher precedence than ...

[13:39] <viki> Or *

[13:39] <mst> viki: ...

[13:39] <mst> viki: please read the last two examples I sent to the bot again, more carefully.

[13:40] <viki> m: say (1,2,4...Inf)[30]

[13:40] <camelia> rakudo-moar 40704b: OUTPUT«1073741824␤»

[13:40] <viki> m: .say for (1,2,4...Inf)[30]

[13:40] <camelia> rakudo-moar 40704b: OUTPUT«1073741824␤»

[13:40] <viki> oh

[13:41] <viki> m: say (1,2,4...Inf)[^30]

[13:41] <camelia> rakudo-moar 40704b: OUTPUT«(1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912)␤»

[13:41] <masak> m: say (1,2,4...10) >>*>> 2

[13:41] <camelia> rakudo-moar 40704b: OUTPUT«(2 4 8 16)␤»

[13:41] <masak> mst: the precedence of `...` is very loose. usually needs parentheses when interacting with something as tight as `>>*>>`

[13:41] <viki> mst: the penultimate example stops at 20, because it's one of the generated numbers, the other stops at 16, because 32 is higher than 20

[13:42] <viki> mst: the two examples are basically m: say 1,2,4...20 and say 1,2...20, and they stop at different points because of different generated sequences.

[13:42] <mst> ah BALLS I misread the output of the geometric one

[13:42] <viki> \o/

[13:42] <masak> mst: the one thing that always bites me is a (similar) interaction between `...` and (something like) `.map`

[13:43] <masak> or `map`

[13:43] <masak> very tricksy

[13:43] <masak> I'm not one to superstitiously put in parentheses -- and Perl 5/6 generally allow you to avoid parentheses because the prec levels make sense

[13:43] <masak> but `...` is one of the exceptions, where I tend to put them in, just to be safe :)

[13:44] <masak> also gives the sequence a little bit of a visual-pill-ness

[13:46] <dalek> rakudo/nom: eaf4132 | lizmat++ | src/core/multidim_slice.pm:

[13:46] <dalek> rakudo/nom: Make [;] := foo 10 faster for 2/3 dimmed arrays

[13:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eaf4132f46

[13:47] <lizmat> argh...  10x   :-)

[13:47] <lizmat> cutnpastefail

[13:48] <mst> viki: yeah, sorry, thing is

[13:48] <mst> m: 1,2,4...10 >>*>> 2

[13:48] <camelia> rakudo-moar 40704b: ( no output )

[13:48] <mst> m: say 1,2,4...10 >>*>> 2

[13:48] <camelia> rakudo-moar 40704b: OUTPUT«(1 2 4 8 16)␤»

[13:48] <mst> m: say (1,2,4...10) >>*>> 2

[13:48] <camelia> rakudo-moar 40704b: OUTPUT«(2 4 8 16)␤»

[13:48] <mst> viki: ^^ notice how similar those are if you're mst and not paying attention properly

[13:48] <viki> Oh yeah :)

[13:48] <masak> m: say 1,2,4...(10 >>*>> 2)

[13:48] <camelia> rakudo-moar 40704b: OUTPUT«(1 2 4 8 16)␤»

[13:49] <masak> much clearer :)

[13:49] <mst> masak: yeah, I understand fine now

[13:49] <masak> thought so

[13:49] <mst> just explaining precisely how I confused myself

[13:49] <mst> since I prefer to be laughed at accurately

[13:49] <viki> I guess ... takes 2 nums of the LHS and say prints the "1" as is.

[13:49] * masak .oO( How to be Properly Confused, a mini-course )

[13:49] <viki> m: .say for 1,2,4...10 >>*>> 2

[13:49] <camelia> rakudo-moar 40704b: OUTPUT«1␤2␤4␤8␤16␤»

[13:50] <masak> viki: guess again :)

[13:50] <viki> masak: what is it?

[13:50] <masak> see my eval above

[13:50] <mst> masak: there is actually an entire section in the lesswrong sequences about that.

[13:50] <viki> masak: your eval has the same result?

[13:50] <viki> as without any parens

[13:50] <masak> because that's how natural precedence makes it

[13:51] <masak> `...` is very loose

[13:51] <masak> `say` is a listop here, so that's already out of consideration

[13:51] <viki> Oh, OK. Now I confused myself :D

[13:51] <masak> `...` ends up getting `1,2,4` as lhs and `10 >>*>> 2` as rhs

[13:51] <viki> Yeah

[13:56] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make [;]:exists 7x faster for 2/3 dimmed arrays

[13:56] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173887279 https://github.com/rakudo/rakudo/compare/bb662ff6cfff...e3e3fefd34ce

[13:59] <dalek> roast: 3c6277f | (Zoffix Znet)++ | S03-operators/mix.t:

[13:59] <dalek> roast: Fix broken test

[13:59] <dalek> roast:

[13:59] <dalek> roast: The test was previously fudged and rework in

[13:59] <dalek> roast: https://github.com/perl6/roast/pull/179 left some old code in it, causing

[13:59] <dalek> roast: it to remain failing after unfudging.

[13:59] <dalek> roast: review: https://github.com/perl6/roast/commit/3c6277f59e

[14:02] <viki> ZOFVM: Files=1200, Tests=130105, 142 wallclock secs (20.38 usr  3.20 sys + 2462.70 cusr 227.48 csys = 2713.76 CPU)

[14:07] <viki> awww abstr5ct's PR did break 6.c-errata >_<

[14:07] <viki> So much for my detailed review :/

[14:07] <viki> m: say <a network> (^) <b network> (^) <a network>

[14:07] <camelia> rakudo-moar eaf413: OUTPUT«set(b, network)␤»

[14:15] <viki> Well, can't think of anything better than to methodically revert all of the commits I pushed today in reverse order.... :/

[14:16] <viki> Totally missed that the very last file had changes to non-fudged tests: https://github.com/perl6/roast/pull/179/files#diff-7ee4515bc24fab05803a3028a0a42ac1

[14:16] <viki> And those are in 6.c-errata too

[14:17] <moritz> you can squash the revert commits into one

[14:17] <moritz> or do a git diff -R start..end | git apply

[14:17] <moritz> or something like

[14:25] * viki pokes dalek

[14:25] <viki> error: Commit 40704b82dd6126c60e7f9a99a2ebd0aaab445003 is a merge but no -m option was given.

[14:25] <viki> hmmm

[14:26] <viki> now I have to learn what a parent is.

[14:30] <viki> This sounds scary... talking about trees and never wanting things :/

[14:31] <moritz> a merge brings two branches together, so it has two "previous" commits, aka parents

[14:32] <moritz> if you want to revert a merge commit, you have to specify which changes to revert: the changes between the commit and its first parent, or between the commit and its second parent

[14:32] <viki> Right, I now know how to revert it, I think, but it comes with "but it's very important you realize that doing so "declares that you will never want the tree changes brought in by the merge. As a result, later merges will only bring in tree changes introduced by commits that are not ancestors of the previously reverted merge. This may or may not be what you want"

[14:32] <viki> And I've no idea what trees I want or not want :)

[14:32] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make [;]:delete 10 faster for 2/3 dimmed arrays

[14:32] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173891521 https://github.com/rakudo/rakudo/compare/e3e3fefd34ce...3b9c4c95b94e

[14:33] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[14:34] <viki> Oh, I can do the git diff -R thing again... \o/

[14:34] <lizmat> viki: is it ok if I push again, or would you like me to refrain from that while you're doing the unwinding ?

[14:35] <viki> OK. I think I'm done.

[14:35] <viki> and dalek is AWOL

[14:35] <dalek> rakudo/nom: 45236f1 | (Zoffix Znet)++ | src/core/set_operators.pm:

[14:35] <dalek> rakudo/nom: Revert merge of #911 as it breaks 6.c-errata

[14:35] <dalek> rakudo/nom:

[14:35] <dalek> rakudo/nom: PR: https://github.com/rakudo/rakudo/pull/911

[14:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/45236f10b5

[14:36] <viki> lizmat: go ahead. I'm finished.

[14:36] <lizmat> viki: okidoki

[15:09] <travis-ci> Rakudo build errored. Zoffix Znet 'Merge pull request #911 from ab5tract/ab5tract/sym-diff-bag-mix

[15:09] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173892370 https://github.com/rakudo/rakudo/compare/3b9c4c95b94e...40704b82dd61

[15:09] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[15:22] <dalek> rakudo/nom: bcf1d9a | lizmat++ | src/core/Rakudo/Internals.pm:

[15:22] <dalek> rakudo/nom: Re-imagine R:I:NOT_ALL_(DEFINED|)TYPE

[15:22] <dalek> rakudo/nom:

[15:22] <dalek> rakudo/nom: - rewrite using nqp ops

[15:22] <dalek> rakudo/nom: - don't bother coercing to bool as this is an internal method anyway

[15:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bcf1d9a6bb

[15:22] <dalek> rakudo/nom: 93ca094 | lizmat++ | src/core/ (4 files):

[15:22] <dalek> rakudo/nom: Refactor R:I:NOT_ALL_(DEFINED)_TYPE removing NOT

[15:22] <dalek> rakudo/nom:

[15:22] <dalek> rakudo/nom: Turned out it would be very useful if these internal methods worked

[15:22] <dalek> rakudo/nom: the other way around and return number of elems if all of the given

[15:22] <dalek> rakudo/nom: type.

[15:32] <dalek> rakudo/nom: fc7c480 | lizmat++ | src/core/multidim_slice.pm:

[15:32] <dalek> rakudo/nom: Use R:I:ALL_DEFINED_TYPE in [;] handling

[15:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fc7c480df6

[15:39] <FROGGS> o/

[15:40] <lizmat> FROGGS  o\

[15:42] <dalek> rakudo/nom: 29a3faa | lizmat++ | src/core/multidim_slice.pm:

[15:42] <dalek> rakudo/nom: Revert "Use R:I:ALL_DEFINED_TYPE in [;] handling"

[15:42] <dalek> rakudo/nom:

[15:42] <dalek> rakudo/nom: This reverts commit fc7c480df6c952c0a7eedfef1aa729e4863ad775.

[15:42] <dalek> rakudo/nom:

[15:42] <dalek> rakudo/nom: I should have checked the performance effects on this before pushing.

[15:42] <dalek> rakudo/nom: Making it 4x slower is not an option for such hot code paths   :-(

[15:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/29a3faa8df

[15:55] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Make [;] := foo 10 faster for 2/3 dimmed arrays'

[15:55] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173899058 https://github.com/rakudo/rakudo/compare/40704b82dd61...eaf4132f4682

[15:55] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[16:12] <dalek> rakudo/nom: 764cfcd | lizmat++ | src/core/multidim_slice.pm:

[16:12] <dalek> rakudo/nom: Implement :kv,:p,:k,:v on 1 element multidim [;]

[16:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/764cfcd882

[16:36] <lizmat> So I have some LHF/MHF for someone more versed in Grammar/Actions/World

[16:37] <lizmat> if you do:  for ^10000 { my @a }

[16:38] <lizmat> what in fact happens, is that at compile time, an Array object is created, and then install_lexical_symbol adds the code to clone the created object

[16:38] <lizmat> during execution (with an nqp::clone)

[16:38] <lizmat> what happens if you do for ^10000 { my @a[10] }, is that the object is completely created at runtime every time, instead of a cloned one

[16:39] <lizmat> that in itself wouldn't be so bad, but for some reason, each time we do a @a[10], we get a global deopt

[16:40] <lizmat> I think this is the one showstopper between normal and shaped arrays that we need to fix to have performance between normal and shaped arrays on par

[16:40] <lizmat> so, any pointers / patches would be greatly appreciated

[16:40] * lizmat now starts working on the P6W

[16:41] <travis-ci> Rakudo build failed. Zoffix Znet 'Revert merge of #911 as it breaks 6.c-errata

[16:41] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173913947 https://github.com/rakudo/rakudo/compare/eaf4132f4682...45236f10b54a

[16:41] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[16:43] <nine> lizmat: do you think it's a good idea to post a notice in the weekly about lexical_module_loading? That people should prepare for the change by making sure they add use statements for all modules they use and not rely on indirect loading?

[16:44] <lizmat> nine: excellent point, will do!

[17:12] <dalek> rakudo/nom: e10f767 | (Zoffix Znet)++ | src/core/set_operators.pm:

[17:12] <dalek> rakudo/nom: Handle negative Mixy weights in ∪ operator

[17:12] <dalek> rakudo/nom:

[17:12] <dalek> rakudo/nom: Lookup of a non-existant key in a Mixy gives a zero, which when `max`ed against

[17:12] <dalek> rakudo/nom: a key with a negative weight would lead to that key being removed from the final union,

[17:12] <dalek> rakudo/nom: making the operator trim all the negative weights for keys present in just one Mixy.

[17:12] <dalek> rakudo/nom:

[17:12] <dalek> rakudo/nom: Add a check for whether a key exists: if it does, take a `max` value, if it doesn't,

[17:12] <dalek> rakudo/nom: just use the value of the key from other Mixy as is.

[17:12] <dalek> rakudo/nom:

[17:12] <dalek> rakudo/nom: ab5tract++ for submitting code that revealed this bug.

[17:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e10f76758b

[17:22] <dalek> roast: c28b010 | (Zoffix Znet)++ | S02-types/mix (2 files):

[17:22] <dalek> roast: Test negative weights survive ∪ operator

[17:22] <dalek> roast:

[17:22] <dalek> roast: Fixed in Rakudo in

[17:22] <dalek> roast: https://github.com/rakudo/rakudo/commit/e10f76758b09f30b1c17f7103bd7f2ecd4f82927

[17:22] <dalek> roast: review: https://github.com/perl6/roast/commit/c28b0108a5

[17:27] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Refactor R:I:NOT_ALL_(DEFINED)_TYPE removing NOT

[17:27] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173928761 https://github.com/rakudo/rakudo/compare/45236f10b54a...93ca094c9f76

[17:27] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[17:31] <viki> .seen psch

[17:31] <yoleaux2> I saw psch 25 Oct 2016 19:12Z in #perl6-dev: <psch> don't we do that for closures as substituting argument?

[17:31] <dogbert17> lizmat++, shaped array benchmark: real 1m53.602s user 1m52.960s, This is Rakudo version 2016.10-213-ge10f767 built on MoarVM version 2016.10-37-gf769569

[17:31] <dogbert17> compare with: Real 4m38.345s, user 4m37.488s, This is Rakudo version 2016.10-176-gaa97f86 built on MoarVM version 2016.10-37-gf769569

[17:32] <dogbert17> and real 6m17.384  user 6m16.172s with Rakudo version 2016.09-105-g4abc28c built on MoarVM version 2016.09-13-g34c375a

[17:32] <lizmat> m: say 377 / 113

[17:32] <camelia> rakudo-moar e10f76: OUTPUT«3.336283␤»

[17:33] <lizmat> not too shabby  :-)

[17:33] <dogbert17> very impressive

[17:41] <lizmat> dogbert17: oddly enough, I'm on 2016.10-199 ?  so you're 14 commits ahead ?

[17:41] <dogbert17> lizmat: interesting

[17:42] * viki is on 2016.10-213-ge10f767

[17:42] <dogbert17> oO

[17:43] * lizmat pulls and rebuilds

[17:44] <lizmat> hmmm.. I pulled a commit from viki, then rebuilt: still at 2016.10-199-gbb662ff

[17:45] <mst> git clean dxf ?

[17:45] <japhb> .oO( git clean --aliens-style )

[17:45] * viki shrugs

[17:46] <mst> git clean --gangnam-style

[17:46] <viki> bb66 is 2 commits prior to my merge-revert fiasco, so at least it's not that :)

[17:46] * ilmari watched Aliens Live yesterday, it was great

[17:46] <ilmari> in Royal Albert Hall with the Royal Philharmonic Concert Orchetra playing the score live

[17:47] <japhb> That's ... really damn cool, actually.

[17:48] <viki> lizmat: hm. Interesting. The 213 is what I got from git describe... the actual perl6 -v is This is Rakudo version 2016.10-207-g45236f1

[17:49] <lizmat> ah, I know what it is

[17:49] <lizmat> git describe tells me 2016.10-213-ge10f767

[17:49] <viki> And the reason for that is likely 'cause my build was made by running make t/spec.... instead of full thing

[17:49] <lizmat> could very well be that -199 was the last time I did a Configure.pl

[17:50] <viki> yeah, prolly

[17:50] <nine> ilmari: sounds pretty epic

[17:50] <lizmat> do we have some docs on TWEAK ?

[17:50] * japhb is rather jealous ... that had to be an awesome experience (Aliens Live)

[17:51] <viki> yeah, I now got 213 in perl6 -v after running perl Configure.pl --gen-moar --gen-nqp --backends=moar; make; make test; make install

[17:51] * lizmat remembers seeing Koyaanisqatsi live

[17:52] <lizmat> viki: yup, same here

[18:05] <lizmat> nine: do you have a writeup somewhere I can refer people to re lexical_module_loading ?

[18:16] <nine> lizmat: sorry, no :(

[18:17] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Use R:I:ALL_DEFINED_TYPE in [;] handling'

[18:17] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173931704 https://github.com/rakudo/rakudo/compare/93ca094c9f76...fc7c480df6c9

[18:18] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[18:19] <viki> t/04-nativecall/20-concurrent.t

[18:19] <viki> And reprd on 4th run: ===SORRY!=== Cannot invoke this object (REPR: P6opaque; Scalar)

[18:47] <viki> Slightly more info on the 20-concurrent.t crash: https://gist.github.com/zoffixznet/26cd8786d5c6133129047804b53948e0

[18:56] <dogbert17> viki: could it be here https://github.com/rakudo/rakudo/blob/nom/src/core/Promise.pm#L175

[18:56] <lizmat> fwiw, that's where I've seen this fail as well, with "code" being null all of a sudden

[19:00] <timotimo> when you get that kind of error, we have some kind of oversharing going on, or memory corruption or something like that

[19:02] <dogbert17> the second row in viki's gist seems to point to https://github.com/rakudo/rakudo/blob/nom/src/core/ThreadPoolScheduler.pm#L163

[19:07] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Revert "Use R:I:ALL_DEFINED_TYPE in [;] handling"

[19:07] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173935016 https://github.com/rakudo/rakudo/compare/fc7c480df6c9...29a3faa8df65

[19:07] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[19:45] <viki> dogbert17: yeah, that's the line referenced by exception backtrace.

[19:45] <viki> It's all above my head :'(

[19:46] <viki> Well, I can follow jnthn++'s advice: golf it down

[19:47] <masak> always golf it down

[19:47] <viki> True.

[19:47] <arnsholt> Golf it down should be the first step in almost any debugging routine, IMO

[20:06] <masak> it's just Science: http://strangelyconsistent.org/blog/im-doing-science-and-im-still-alive

[20:08] <viki> Interestingly, that test just hangs on my 32-bit 2-core box.

[20:10] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Implement :kv,:p,:k,:v on 1 element multidim [;]'

[20:10] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173944530 https://github.com/rakudo/rakudo/compare/29a3faa8df65...764cfcd88248

[20:10] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[20:11] <viki> OK. Well, I'm gonna give masak's broken window theory a go.

[20:18] <masak> in the long run, I'd like for us to give it a structured consistent go in the form of some more or less formalized process :)

[20:22] <dalek> rakudo/nom: c68e85b | (Zoffix Znet)++ | t/04-nativecall/20-concurrent.t:

[20:22] <dalek> rakudo/nom: Temporarily skip flopping test

[20:22] <dalek> rakudo/nom:

[20:22] <dalek> rakudo/nom: To quite down Travis IRC bot. Ticket opened as RT#130042:

[20:22] <dalek> rakudo/nom: https://rt.perl.org/Ticket/Display.html?id=130042

[20:22] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130042

[20:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c68e85b4fa

[20:23] <dalek> rakudo/nom: 62005f1 | (Zoffix Znet)++ | .travis.yml:

[20:23] <dalek> rakudo/nom: Quiet JVM Travis Failures

[20:23] <dalek> rakudo/nom:

[20:23] <dalek> rakudo/nom: Frequent failures with java.lang.OutOfMemoryError. Opened ticket as RT#130043:

[20:23] <dalek> rakudo/nom: https://rt.perl.org/Ticket/Display.html?id=130043

[20:23] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130043

[20:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/62005f13b5

[20:25] <viki> .tell psch I disabled JVM reporting again on Travis. It frequently gives OutOfMemoryError; dunno if it's just Travis? RT: https://rt.perl.org/Ticket/Display.html?id=130043

[20:25] <yoleaux2> viki: I'll pass your message to psch.

[20:28] <viki> masak: yeah, maybe have buggable detect frequent failures and cry about it

[20:28] <viki> .oO( hm, but then we're just making TWO bots assault us )

[20:49] <dalek> rakudo/nom: bf51eca | Xliff++ | src/core/DateTime.pm:

[20:49] <dalek> rakudo/nom: Suggested shortcut method similar to the Date methods in Datish.pm

[20:49] <dalek> rakudo/nom:

[20:49] <dalek> rakudo/nom: If yyyy-dd-mm is a thing, then this at least adds consistency. ;)

[20:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bf51ecaa49

[20:49] <dalek> rakudo/nom: 25ef3d9 | (Zoffix Znet)++ | src/core/DateTime.pm:

[20:49] <dalek> rakudo/nom: Merge pull request #913 from Xliff/patch-3

[20:49] <dalek> rakudo/nom:

[20:49] <dalek> rakudo/nom: Suggested shortcut method similar to the Date methods in Datish.pm

[20:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/25ef3d9f85

[20:52] <masak> viki: maybe the same bot that reports the failure could also have some heuristic about tests flapping?

[20:52] <masak> I dunno, just an idea

[20:52] <viki> Yeah, probably.

[21:05] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2016/11/07/2016-45-shapes-get-a-boost/

[21:10] <lizmat> fwiw, I cannot build JVM backend on OS X anymore either

[21:10] <lizmat> Stage classfile  : java.lang.OutOfMemoryError: PermGen space

[21:10] <lizmat> in classfile (gen/jvm/stage2/NQPHLL.nqp:93)

[21:12] <travis-ci> Rakudo build errored. Zoffix Znet 'Handle negative Mixy weights in ∪ operator

[21:12] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/173962369 https://github.com/rakudo/rakudo/compare/764cfcd88248...e10f76758b09

[21:12] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[21:15] <timotimo> ctrl-f TWEAK, no result :(

[21:15] <timotimo> was it actually merged?

[21:19] <lizmat> timotimo: no. afaik

[21:20] <timotimo> ah, that explains it

[21:26] <jnthn> lizmat: "He also fixed an issue with Lock.protect that would not release the lock if an exception occurred in the code being protected." - that'll confuse most people in so far as what they think of as exceptions worked totally fine :)

[21:26] <jnthn> lizmat: It's control exceptions that were the issue

[21:27] <lizmat> ah, like "next" and "last" and "return" ?

[21:27] <lizmat> jnthn: ?

[21:27] <jnthn> Yes, return was the particular case where I stubbed my toe on it :)

[21:29] <jnthn> lizmat++ for the weekly :)

[21:31] <lizmat> updated

[21:31] <lizmat> m: say await start die

[21:31] <camelia> rakudo-moar 25ef3d: OUTPUT«===SORRY!===␤Died␤»

[21:32] <lizmat> hmmm...

[21:32] <lizmat> m: say await start { die }

[21:32] <camelia> rakudo-moar 25ef3d: OUTPUT«===SORRY!===␤Died␤»

[21:34] <lizmat> m: say await start { LEAVE say "bye"; 42 }

[21:34] <camelia> rakudo-moar 25ef3d: OUTPUT«bye␤42␤»

[21:34] <lizmat> m: say await start { 42; LEAVE say "bye" }  # this is wrong, I think

[21:34] <camelia> rakudo-moar 25ef3d: OUTPUT«WARNINGS for <tmp>:␤Useless use of constant integer 42 in sink context (line 1)␤bye␤Nil␤»

[21:34] <lizmat> both for the warning, and the value being returned.

[21:36] <jnthn> m: try await start { die }; say $!.WHAT

[21:36] <camelia> rakudo-moar 25ef3d: OUTPUT«(AdHoc+{Broken})␤»

[21:36] <jnthn> Huh, it's getting that bit right

[21:37] <jnthn> m: try await start { die }; say $!

[21:37] <camelia> rakudo-moar 25ef3d: OUTPUT«Tried to get the result of a broken Promise␤  in block <unit> at <tmp> line 1␤␤Original exception:␤    Died␤      in block  at <tmp> line 1␤␤»

[21:37] <jnthn> And that

[21:37] <jnthn> So why on earth does it think it's a compile-time error?

[21:38] <geekosaur> it's worse than that

[21:38] <lizmat> m: say await start { die }; INIT say "foo"   # the error is in the messaging

[21:38] <camelia> rakudo-moar 25ef3d: OUTPUT«foo␤===SORRY!===␤Died␤»

[21:38] <geekosaur> m: say 'hi'; say await start die;

[21:38] <camelia> rakudo-moar 25ef3d: OUTPUT«hi␤===SORRY!===␤Died␤»

[21:40] <geekosaur> so either it's using a SORRY preamble on a runtime message, or it's EVAL-ing something

[21:42] <jnthn> Oh, I'm pretty sure it's in the "is this a compile time error" detection

[21:42] <jnthn> afk for a bit

[21:42] <lizmat> yeah, feels like that

[22:14] <travis-ci> Rakudo build failed. Zoffix Znet 'Temporarily skip flopping test

[22:14] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/174014267 https://github.com/rakudo/rakudo/compare/e10f76758b09...c68e85b4faf0

[22:14] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[22:26] <lizmat> m: my @a = ^10; say @a.EXISTS-POS(-1)

[22:26] <camelia> rakudo-moar 25ef3d: OUTPUT«False␤»

[22:27] <lizmat> m: my @a[10] = ^10; say @a.EXISTS-POS(-1)  # so is this the correct behaviour, or the previous one?

[22:27] <camelia> rakudo-moar 25ef3d: OUTPUT«Index -1 for dimension 1 out of range (must be 0..9)␤  in block <unit> at <tmp> line 1␤␤»

[22:28] <lizmat> ah, I see negative subscripts are caught by postcircumfix:<[ ]> code

[22:29] <dogbert17> lizmat: " In the lexical_module_loading branch, Stefan Seifert *as* fixed this."

[22:29] <lizmat> dogbert17++   removed  :-)

[22:31] <dogbert17> must be cached somehow, looks the same to me :)

[22:35] <lizmat> forced reload fixed it for me

[22:35] <dogbert17> yeah it's gone now. lizmat++ Weekly

[22:43] <lizmat> m: my str @a[3]; dd @a   # jnthn: could it be we forgot native shaped str arrays ?

[22:43] <camelia> rakudo-moar 25ef3d: OUTPUT«MultiDimArray: atpos expected string register␤  in block <unit> at <tmp> line 1␤␤»

[22:46] <lizmat> I guess there's no VM support for it...

[22:59] <dalek> rakudo/nom: c000614 | lizmat++ | src/core/native_array.pm:

[22:59] <dalek> rakudo/nom: Mark native shaped str arrays as NYI

[22:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c00061432d

[22:59] <lizmat> and with I wish #perl6-dev a good night!

[23:00] <lizmat> *that

[23:23] <travis-ci> Rakudo build errored. Zoffix Znet 'Quiet JVM Travis Failures

[23:23] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/174014787 https://github.com/rakudo/rakudo/compare/c68e85b4faf0...62005f13b535

[23:23] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually. All failures are on JVM only.

[23:38] <AlexDaniel> hm, I've seen some run-time SORRY! errors before

[23:38] <AlexDaniel> not sure if there are any open tickets for that

[23:39] <AlexDaniel> m: say 42; *...‘WAT’; say 24

[23:39] <camelia> rakudo-moar c00061: OUTPUT«42␤No such method 'succ' for invocant of type 'Whatever'␤  in block <unit> at <tmp> line 1␤␤»

[23:39] <AlexDaniel> that's new

[23:39] <AlexDaniel> m: say 0, * ... "what"

[23:39] <camelia> rakudo-moar c00061: OUTPUT«No such method 'pred' for invocant of type 'Whatever'␤  in block <unit> at <tmp> line 1␤␤»

[23:40] <AlexDaniel> #128161

[23:40] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128161

[23:40] <AlexDaniel> bisect: *...‘WAT’

[23:40] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=c000614) because on both starting points the exit code is 1

[23:40] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/816d9f3ea80621a67988b98997e7ecc6

[23:40] <bisectable6> AlexDaniel, (2016-08-19) https://github.com/rakudo/rakudo/commit/25e9fd76e85fabda20e263b6f87e27b0673f26e2

[23:41] <AlexDaniel> commit: 25e9fd76e85f^,25e9fd76e85f say 0, * ... "what"

[23:41] <committable6> AlexDaniel, ¦«25e9fd76e85f^»: ===SORRY!===␤Method 'pred' not found for invocant of class 'Whatever' «exit code = 1»␤¦«25e9fd7»: Method 'pred' not found for invocant of class 'Whatever'␤  in block <unit> at /tmp/UJmaNsyS3r line 1␤ «exit code = 1»

[23:42] <AlexDaniel> yea, so it's no longer sorry after 25e9fd7
