[06:38] <notviki> This doesn't look like a bug to me. Someone with more understanding of itemized things cares to reply? https://rt.perl.org/Ticket/Display.html?id=130395

[07:19] <samcv> well they're both Arrays

[07:26] <samcv> so I can see why it's saying they are the same… i mean item forces to item context and I think for an array it doesn't change it enough for is-deeply to fail. so either need to tweak is-deeply or make it identify as its own type of object i think

[07:31] <samcv> m: use Test; is-deeply (1,3,(1,3)).List, (1,3,(1,3)).Seq

[07:31] <camelia> rakudo-moar a7bf1e: OUTPUT«ok 1 - ␤»

[07:31] <samcv> m: use Test; is-deeply (1,3,(1,3)).List, (1,3,(1,3)).item

[07:31] <camelia> rakudo-moar a7bf1e: OUTPUT«ok 1 - ␤»

[07:31] <samcv> m: use Test; is (1,3,(1,3)).List ~~ Seq, True

[07:31] <camelia> rakudo-moar a7bf1e: OUTPUT«not ok 1 - ␤␤# Failed test at <tmp> line 1␤# expected: 'True'␤#      got: 'False'␤»

[07:32] <samcv> m: say item ~~ Array

[07:32] <camelia> rakudo-moar a7bf1e: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Expected a term, but found either infix ~~ or redundant prefix ~␤  (to suppress this message, please use a space like ~ ~)␤at <tmp>:1␤------> say item ~~⏏ Array␤»

[07:32] <samcv> m: say so item ~~ Array

[07:32] <camelia> rakudo-moar a7bf1e: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Expected a term, but found either infix ~~ or redundant prefix ~␤  (to suppress this message, please use a space like ~ ~)␤at <tmp>:1␤------> say so item ~~⏏ Array␤»

[07:33] <samcv> oh item is a sub not a type

[07:33] <samcv> notviki, there is not any bug

[07:39] <samcv> notviki, i think what happens is is-deeply examines them in the same context and they are the same context.

[07:39] <samcv> m: use Test; is-deeply item([1,2,3]), [1,2,0]

[07:39] <camelia> rakudo-moar a7bf1e: OUTPUT«not ok 1 - ␤␤# Failed test at <tmp> line 1␤# expected: $[1, 2, 0]␤#      got: $[1, 2, 3]␤»

[07:40] <samcv> i am thinking if we changed is-deeply we'd probably fail some roast tests

[07:44] <samcv> notviki, RE this https://rt.perl.org/Ticket/Display.html?id=117683 did we used to use icu on mac?

[07:45] <samcv> "Note that these failures are also happening on rakudo-moar" [Coke]_ didn't say JVM but still pretty sure we didn't use icu? unless it's a mac specific thing which no clue why

[07:50] <[Tux]> This is Rakudo version 2016.12-107-ga7bf1eab6 built on MoarVM version 2016.12-19-ge2ffc358

[07:50] <[Tux]> csv-ip5xs        3.035

[07:50] <[Tux]> test            13.899

[07:50] <[Tux]> test-t           5.523

[07:50] <[Tux]> csv-parser      14.309

[07:50] <samcv> [Tux], help

[07:51] <[Tux]> 42

[07:51] <samcv> :D

[07:51] <samcv> what system do you run that benchmark on?

[07:51] <[Tux]> Linux 3.16.7-53-desktop [openSUSE 13.2 (Harlequin)]  HP Z220CMT Xeon(R) CPU E3-1245 V2 @ 3.40GHz/1963(8) x86_64  11913 Mb

[07:55] <samcv> will doesn't-warn catch die's?

[08:14] <samcv> i'm kind of wondering why the spec says we return <control-0000> for \0 since it technically has no name atm

[08:14] <samcv> well prolly never will

[08:14] <samcv> but unicode has it listed as <control>

[08:14] <samcv> codepoints aren't usually labeled with same number based on their codepoint though

[08:15] <samcv> that's what the synopsis says and it's in roast

[08:15] <samcv> seems odd though

[08:15] <samcv> but i guess maybe it stems from no repeat names? but we have it return CJK_Ideograph for those unless we also specify to return the codepoenit in the name too

[08:17] <samcv> m: "\0".uniname.say

[08:17] <camelia> rakudo-moar a7bf1e: OUTPUT«NULL␤»

[08:22] <samcv> i can fix that though, at least returning the unicode 1 names

[08:42] <samcv> lizmat, can I just send email to [email@hidden.address] and if it has the right title it will add to the ticket?

[08:42] <lizmat> samcv: yes, that's the idea

[08:43] <lizmat> basically a reply to all, and removing all of the other ones, is what I usually do

[08:43] <samcv> cool

[08:44] <samcv> how do i get special powers for RT

[08:46] <samcv> trying to look through some unicode bugs and would be nice to do some things with them other than just reply

[08:47] <samcv> ugh why is it not instant sending by email. oh well

[08:47] <lizmat> samcv: I think [Coke]_ can help you there

[08:47] <samcv> cool

[08:47] <lizmat> and/or masak perhaps

[08:48] <samcv> not sure if perl foundation sent any email to whoever they should. they just told me to notify perl 6 admins they got my CLA

[08:48] <samcv> didn't imply them sending anybody anything. should i reply back and say to notify X person?

[08:48] <samcv> whoever that is

[08:51] <samcv> m:  7 ~ "\x[308]" x 100_000

[08:51] <camelia> rakudo-moar a7bf1e: OUTPUT«WARNINGS for <tmp>:␤Useless use of "~" in expression "7 ~ \"\\x[308]\" x" in sink context (line 1)␤»

[08:59] <dalek> rakudo/nom: 005166e | lizmat++ | src/core/List.pm:

[08:59] <dalek> rakudo/nom: Sorting an uninited List should return a new List

[08:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/005166eed6

[09:35] <dalek> rakudo/nom: 340bc90 | lizmat++ | src/core/Rakudo/Internals.pm:

[09:35] <dalek> rakudo/nom: Make sorting on 0/1 element lists faster

[09:35] <dalek> rakudo/nom:

[09:35] <dalek> rakudo/nom: - by adding a single check on # elements

[09:35] <dalek> rakudo/nom: - makes them 10% (), 15% ({$^a cmp $^b}) and 40% ({$^a.Str}) faster

[09:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/340bc9069b

[09:35] <lizmat> afk&

[09:39] <samcv> .ask [Coke]_ can i get special powers for rt.perl.org? need to triage some unicode bugs and rename some titles to be the real cause of them

[09:39] <yoleaux2> samcv: I'll pass your message to [Coke]_.

[09:39] <samcv> .ask [Coke] can i get special powers for rt.perl.org? need to triage some unicode bugs and rename some titles to be the real cause of them

[09:39] <yoleaux2> samcv: I'll pass your message to [Coke].

[09:41] <samcv> lizmat, the emails take so long to show up :(

[10:47] <samcv> night everybody. see you in the morning

[11:01] <timotimo> night samcv

[11:02] <samcv> night!

[12:08] <dalek> rakudo/nom: 54cc06b | lizmat++ | src/core/Supply.pm:

[12:08] <dalek> rakudo/nom: Make Supply.sort a multi for faster dispatch

[12:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/54cc06b1e5

[12:08] <dalek> rakudo/nom: 4724bd6 | lizmat++ | src/core/Rakudo/Internals.pm:

[12:08] <dalek> rakudo/nom: Make .sort on 2 elem lists about 50% faster

[12:08] <dalek> rakudo/nom:

[12:08] <dalek> rakudo/nom: - because we only need to compare once and not set up a lot of stuff

[12:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4724bd6ee3

[13:55] <dalek> nqp: 4a950e1 | samcv++ | tools/build/MOAR_REVISION:

[13:55] <dalek> nqp: Bump Moar version to get fix for RT #122471 and #122470

[13:55] <dalek> nqp:

[13:55] <dalek> nqp: return <control-0000> for \0 and other controls

[13:55] <dalek> nqp: RT: https://rt.perl.org/Ticket/Display.html?id=122471

[13:55] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=122471

[13:55] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=122470

[13:55] <dalek> nqp: https://rt.perl.org/Ticket/Display.html?id=122470

[13:55] <dalek> nqp: We now pass several tests we were not passing before in uniname.t

[13:55] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4a950e19fd

[14:00] <samcv> pull to bump the version for rakudo too: https://github.com/rakudo/rakudo/pull/976

[14:01] <dalek> rakudo/nom: 8163113 | samcv++ | tools/build/NQP_REVISION:

[14:01] <dalek> rakudo/nom: Bump NQP to get the latest Moar fixing  RT #122471 and #122470

[14:01] <dalek> rakudo/nom:

[14:01] <dalek> rakudo/nom: return <control-0000> for \0 and other controls

[14:01] <dalek> rakudo/nom:

[14:01] <dalek> rakudo/nom: https://rt.perl.org/Ticket/Display.html?id=122471

[14:01] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=122471

[14:01] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=122470

[14:01] <dalek> rakudo/nom: https://rt.perl.org/Ticket/Display.html?id=122470

[14:01] <dalek> rakudo/nom: We now pass several tests we were not passing before in uniname.t

[14:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8163113ade

[14:01] <dalek> rakudo/nom: 9594a3e | lizmat++ | tools/build/NQP_REVISION:

[14:01] <dalek> rakudo/nom: Merge pull request #976 from samcv/bump_nqp

[14:01] <dalek> rakudo/nom:

[14:01] <dalek> rakudo/nom: Fix RT #122471 and #122470 return <control-0000> for \0 and other controls

[14:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9594a3ece3

[14:01] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=122471

[14:01] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=122470

[14:05] <samcv> lizmat, so i never got an answer who the perl foundation to CC for my CLA, they told me they got it and to tell the rakudo admins, but

[14:05] <samcv> i don't think they told anybody but me

[14:05] <lizmat> ah, intriguing

[14:06] <lizmat> perhaps jnthn masak moritz [Coke]_ could help you

[14:06] <lizmat> that force is not that strong with me

[14:56] <MasterDukeLaptop> anyone have an idea why changing 'has $!name' here ( https://github.com/perl6/nqp/blob/master/src/QRegex/Cursor.nqp#L33 ) to 'has str $!name' would compile fine for nqp and rakudo, but die during rakudo's 'make install'?

[14:57] <MasterDukeLaptop> with: X::Multi::NoMatch exception produced no message   in block <unit> at tools/build/create-moar-runner.pl line 10

[15:08] <MasterDukeLaptop> and i did fix the relevant getattrs and isnulls in the rest of the file

[15:10] <samcv> m: 0x0640.uniprop('Joining_Type').say

[15:10] <camelia> rakudo-moar 9594a3: OUTPUT«C␤»

[15:16] <JimmyZ> MasterDukeLaptop: try --ll-exception to run create-moar-runner.pl to find the bug?

[15:17] <MasterDukeLaptop> JimmyZ: i tried once, but it didn't work. create-moar-runner.pl is being run by moarvm directly

[15:18] <MasterDukeLaptop> or, that's how it appears to me. where should i put the --ll-exception

[15:19] <MasterDukeLaptop> this is the exact command that was run: /home/dan/Source/perl6/install/bin/moar --libpath="/home/dan/Source/perl6/install/share/nqp/lib" --libpath="/home/dan/Source/perl6/install/share/nqp/lib" perl6.moarvm --nqp-lib=blib tools/build/create-moar-runner.pl "/home/dan/Source/perl6/install/bin/moar" perl6.moarvm perl6-valgrind-m . "valgrind" --nqp-lib=blib "/home/dan/Source/perl6/install/share/nqp/lib" "/home/dan/Source/pe

[15:19] <JimmyZ> MasterDukeLaptop: after perl6.moarvm

[15:20] <MasterDukeLaptop> ah, i think i tried it earlier. i'm in the middle of another build, but i'll give that a shot in a couple min

[15:20] <MasterDukeLaptop> *earlier in the command

[15:21] <|Tux|> This is Rakudo version 2016.12-113This is Rakudo version 2016.12-113This is Rakudo version 2016.12-113-g9594a3ece built on MoarVM version 2016.12-21-g3dc56470

[15:21] <|Tux|> csv-ip5xs        2.902

[15:21] <|Tux|> test            13.245

[15:21] <|Tux|> test-t           5.137

[15:21] <|Tux|> csv-parser      13.606

[15:21] <|Tux|> -g9594a3ece built on MoarVM version 2016.12-21-g3dc56470

[15:21] <|Tux|> csv-ip5xs        2.902

[15:21] <|Tux|> test            13.245

[15:21] <|Tux|> test-t           5.137

[15:21] <|Tux|> csv-parser      13.606

[15:21] <|Tux|> -g9594a3ece built on MoarVM version 2016.12-21-g3dc56470

[15:21] <|Tux|> csv-ip5xs        2.902

[15:21] <|Tux|> test            13.245

[15:21] <|Tux|> test-t           5.137

[15:21] <|Tux|> csv-parser      13.606

[15:21] <|Tux|> sorry for my bouncing mouse

[15:21] <JimmyZ> 5.1!

[15:22] <MasterDukeLaptop> is csv-ip5xs usually <3?

[15:50] <MasterDukeLaptop> JimmyZ: putting --ll-exception after perl6.moarvm worked (it ran and didn't complain about an unknown option), but the actual error message produced was exactly the same

[16:15] <JimmyZ> MasterDukeLaptop: --ll-exception is not fixing the problem, just  a way to explode it

[16:16] <MasterDukeLaptop> JimmyZ: yeah, but i did hope for more information from --ll-exception

[16:24] <JimmyZ> MasterDukeLaptop: maybe try rakudo-debugger?

[16:35] <japhb> buggable: speed

[16:35] <buggable> japhb, ▅▅▅▅▅▅▆▅▅▆▆▄▅▅▅▄▅▅▅▅▅█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▃▃▃▂▂▂▂▂▂▂▁▁ data for 2016-12-06–2016-12-27; variance: 5.137s–7.592s

[17:05] <AlexDaniel> m: say Any().WHAT

[17:05] <camelia> rakudo-moar 9594a3: OUTPUT«(Any(Any))␤»

[17:05] <AlexDaniel> star: say Any().WHAT

[17:05] <camelia> star-m 2016.10: OUTPUT«(Any(Any))␤»

[17:05] <AlexDaniel> commit: 2015.12 say Any().WHAT

[17:05] <committable6> AlexDaniel, ¦«2015.12»: Method 'shortname' not found for invocant of class 'Perl6::Metamodel::CoercionHOW'␤  in block <unit> at /tmp/JskmUT0nxT line 1␤ «exit code = 1»

[17:27] <dalek> roast: ea2ac7f | moritz++ | S05-capture/match-object.t:

[17:27] <dalek> roast: Tests for non-Str Match.orig

[17:27] <dalek> roast: review: https://github.com/perl6/roast/commit/ea2ac7f272

[17:27] <notviki> samcv: He'd need your account's email address

[17:27] <notviki> oh, I was scrolled up

[17:28] <notviki> And I don't even know what icu is

[17:29] <moritz> a library that implements many Unicode-y algorithms

[17:34] <b2gills> Parrot uses ICU for its Unicode support

[17:35] <moritz> as far as Parrot still does anything, yes

[18:18] <notviki> .ask can the two mentioned tickets be closed or do we still need tests for them? https://github.com/rakudo/rakudo/pull/976

[18:18] <yoleaux2> notviki: I'll pass your message to can.

[18:18] <notviki> eeeeh

[18:18] <notviki> Thanks, robot.

[18:18] <notviki> .ask samcv can the two mentioned tickets be closed or do we still need tests for them? https://github.com/rakudo/rakudo/pull/976

[18:18] <yoleaux2> notviki: I'll pass your message to samcv.

[19:18] <samcv> .

[19:18] <yoleaux2> 18:18Z <notviki> samcv: can the two mentioned tickets be closed or do we still need tests for them? https://github.com/rakudo/rakudo/pull/976

[19:20] <[Coke]_> .

[19:20] <yoleaux2> 09:39Z <samcv> [Coke]_: can i get special powers for rt.perl.org? need to triage some unicode bugs and rename some titles to be the real cause of them

[19:21] <notviki> [Coke]_: account can be seen on this ticket https://rt.perl.org/Ticket/Display.html?id=130384

[19:22] <samcv> thanks notviki

[19:23] <[Coke]_> (t/spectest.data) you can add annotations; we can come up with an annotation that means "run on 6.c but nowhere else"

[19:24] <samcv> talking to me [Coke]_ ?

[19:24] <notviki> Ah, true

[19:28] <[Coke]_> icu was for parrot, not moar or jvm.

[19:28] <[Coke]_> samcv: ^^

[19:30] <[Coke]_> .tell samcv I need your email address or login id to make you a bug admin.

[19:30] <yoleaux2> [Coke]_: I'll pass your message to samcv.

[19:30] <samcv> kk

[19:30] <yoleaux2> 19:30Z <[Coke]_> samcv: I need your email address or login id to make you a bug admin.

[19:31] <[Coke]> .

[19:31] <yoleaux2> 09:39Z <samcv> [Coke]: can i get special powers for rt.perl.org? need to triage some unicode bugs and rename some titles to be the real cause of them

[19:31] <[Coke]> catching up.

[19:33] <[Coke]> samcv, you're a bugadmin now

[19:33] <samcv> cool

[19:34] <samcv> yeah replying to bugs I have never been in the conversation of (by email) is not adding the replys

[19:34] <samcv> lame

[19:34] <[Coke]> the CLA list hasn't been updated since July 2016.

[19:34] <notviki> that'd be me

[19:35] <[Coke]> man this loaner laptop is just a dog. :|

[19:35] <samcv> bark bark

[19:35] * notviki wonders if "a dog" is good or bad...

[19:35] <samcv> ^

[19:36] <samcv> dogs are really good at running

[19:39] <samcv> work like a dog: to work very hard. though also

[19:39] <samcv> something undesirable or worthless; merchandise that no one wants to buy. Put the dogs out on the sale table so people will see them.

[19:40] <samcv> so kind of odd

[19:40] <samcv> i like this one though: “to stay with one and haunt one. Will this memory dog me all the days of my life?”

[19:40] <samcv> hahaha

[19:40] <samcv> memory dogs

[19:43] <samcv> This is an older reference to doing something without announcing it. “I gotta see a man about a dog.” Most often used by men to excuse themselves out of a conversation. Their exact destination remains unclear, whether they are heading to the bathroom or to their bookie, one simply doesn’t ask. It was used widely during the prohibition years to refer to buying or consuming alcohol.

[19:43] <samcv> XD

[19:47] <samcv> notviki, how do I edit title?

[19:47] <notviki> title of what?

[19:48] <samcv> RT

[19:48] <notviki> go to "Jumbo" and it's the first field on top left

[19:48] <moritz> or "basics", for that matter

[19:49] <samcv> m: say ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" xx 2).Str.ords

[19:49] <camelia> rakudo-moar 9594a3: OUTPUT«(127468 32 127468)␤»

[19:49] <samcv> this is a weird one

[19:50] <samcv> the bug was a bug for xx, but the bug is in the stringification of the array actually

[19:50] <samcv> but. that's really odd

[19:50] <samcv> m: say ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" xx 2).elems.say

[19:50] <camelia> rakudo-moar 9594a3: OUTPUT«2␤True␤»

[19:50] <samcv> m: say ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" xx 2).ords

[19:50] <camelia> rakudo-moar 9594a3: OUTPUT«(127468 32 127468)␤»

[19:50] <samcv> m: say ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" xx 2)[0].say

[19:50] <camelia> rakudo-moar 9594a3: OUTPUT«🇬␤True␤»

[19:50] <samcv> m: ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" xx 2)[0].say

[19:50] <camelia> rakudo-moar 9594a3: OUTPUT«🇬␤»

[19:50] <samcv> m: ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" xx 2)[1].say

[19:50] <camelia> rakudo-moar 9594a3: OUTPUT«🇬␤»

[19:50] <samcv> m: ("\c[REGIONAL INDICATOR SYMBOL LETTER G]" xx 2)[1].ords.say

[19:50] <camelia> rakudo-moar 9594a3: OUTPUT«(127468)␤»

[19:52] <samcv> actualy happens with other characters too

[19:52] <samcv> m: ("a" xx 2).Str.perl.say

[19:52] <camelia> rakudo-moar 9594a3: OUTPUT«"a a"␤»

[19:52] <samcv> adds a space.

[19:53] <samcv> is this not a bug?

[19:53] <notviki> nope

[19:53] <notviki> m: <a b>.Str.say

[19:53] <camelia> rakudo-moar 9594a3: OUTPUT«a b␤»

[19:53] <samcv> yeah

[19:53] <japhb> m: ('a', 'a').Str.say  # samcv

[19:53] <camelia> rakudo-moar 9594a3: OUTPUT«a a␤»

[19:53] <japhb> yup

[19:53] <moritz> does this apply a combining character to the space?

[19:53] <samcv> no

[19:53] <samcv> it only adds a space

[19:54] <japhb> samcv: Are you looking for .join ?  It stringifies and joins *without* a space (unless you ask for one, of course)

[19:54] <samcv> yes i was about to post that

[20:00] <samcv> at first I thought the bug was related to stringification of two joining characters which the flag sequences are (they don't have anything between them but are one character) and maybe us doing something weird. but luckily no bug

[20:00] <moritz> we still have enough of those :-)

[20:03] <japhb> repeat { hack-hack-hack() } while bugs;

[20:30] <dalek> rakudo/nom: 796d6e1 | lizmat++ | src/core/Any.pm:

[20:30] <dalek> rakudo/nom: Fix for RT #130416

[20:30] <dalek> rakudo/nom:

[20:30] <dalek> rakudo/nom: Please note this is *only* dd output, not generic .perl output for

[20:30] <dalek> rakudo/nom: lazy lists.

[20:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/796d6e1212

[20:30] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130416

[20:45] <b2gills> lizmat: sort should be a stable sort. that is things that cmp the same should be in the same order as the original list

[20:45] <b2gills> m: $_ = ("0",0); say $_[0] cmp $_[1]; say .sort eqv $_

[20:45] <camelia> rakudo-moar 9594a3: OUTPUT«Same␤False␤»

[20:46] <b2gills> m: $_ = (0,"0"); say $_[0] cmp $_[1]; say .sort eqv $_ # It isn't even just sorting Int before Str

[20:46] <camelia> rakudo-moar 9594a3: OUTPUT«Same␤False␤»

[20:48] <lizmat> b2gills: afaik, the sort *is* stable

[20:49] <notviki> m: dd [0, False].sort

[20:49] <camelia> rakudo-moar 9594a3: OUTPUT«(Bool::False, 0)␤»

[20:49] <notviki> m: dd [0, "0"].sort

[20:49] <camelia> rakudo-moar 9594a3: OUTPUT«("0", 0)␤»

[20:49] <b2gills> m: $_ = (0,"0"); say $_[0] cmp $_[1]; say .sort.sort eqv $_ # then why does it always swap the order

[20:49] <camelia> rakudo-moar 9594a3: OUTPUT«Same␤True␤»

[20:49] <lizmat> notviki: ok, I can work with that :-)

[20:49] <notviki> m: dd ["0", 0].sort

[20:49] <camelia> rakudo-moar 9594a3: OUTPUT«(0, "0")␤»

[20:49] <notviki> lizmat: \o/

[20:50] <b2gills> m: dd ["0", 0].sort.sort

[20:50] <camelia> rakudo-moar 9594a3: OUTPUT«("0", 0)␤»

[20:50] <lizmat> m: say 0 cmp "0"

[20:50] <camelia> rakudo-moar 9594a3: OUTPUT«Same␤»

[20:50] <lizmat> ok, I guess I was working on the premise that cmp would never return Same for such a cmp

[20:52] <lizmat> b2gills notviki fixing nw

[20:53] <b2gills> m: $_ = ("0",0); dd .sort({ $^a cmp $^b || Less  }) # If you treat Same as being Less it works

[20:53] <camelia> rakudo-moar 796d6e: OUTPUT«("0", 0)␤»

[21:00] <notviki> .tell samcv seems '2' ~~ /<:Digit>/ now returns False. Bisectable points to https://github.com/rakudo/rakudo/commit/8163113ade68e764a16fcf04b0a7a4da1c643156 would you know what's causing it?

[21:00] <yoleaux2> notviki: I'll pass your message to samcv.

[21:01] <samcv> yes

[21:01] <yoleaux2> 21:00Z <notviki> samcv: seems '2' ~~ /<:Digit>/ now returns False. Bisectable points to https://github.com/rakudo/rakudo/commit/8163113ade68e764a16fcf04b0a7a4da1c643156 would you know what's causing it?

[21:01] <samcv> m: '2' ~~/<:Digit>/

[21:01] <camelia> rakudo-moar 796d6e: ( no output )

[21:01] <samcv> m: say '2' ~~/<:Digit>/

[21:01] <camelia> rakudo-moar 796d6e: OUTPUT«Nil␤»

[21:01] <samcv> yeah

[21:01] <notviki> it's normal?

[21:01] <samcv> uhm

[21:02] <samcv> not what we want

[21:02] <samcv> do we have roast tests for that?

[21:02] <notviki> ¯\_(ツ)_/¯

[21:02] <notviki> Guess not

[21:02] <samcv> m: say '2' ~~/<Digit>/

[21:02] <camelia> rakudo-moar 796d6e: OUTPUT«No such method 'Digit' for invocant of type 'Cursor'␤  in block <unit> at <tmp> line 1␤␤»

[21:02] <samcv> m: say '2' ~~/<digit>/

[21:02] <camelia> rakudo-moar 796d6e: OUTPUT«｢2｣␤ digit => ｢2｣␤»

[21:02] <samcv> digit isn't a unicode property

[21:03] <samcv> m: say '2' ~~/<:Numeric_Type>/

[21:03] <camelia> rakudo-moar 796d6e: OUTPUT«Nil␤»

[21:03] <samcv> m: '2'.uniprop('nt').say

[21:03] <camelia> rakudo-moar 796d6e: OUTPUT«Decimal␤»

[21:03] <notviki> star: say '2' ~~ /<:Digit>/

[21:03] <camelia> star-m 2016.10: OUTPUT«｢2｣␤»

[21:03] <notviki> so that was a bug?

[21:04] <samcv> possible bug yeah

[21:04] <samcv> i mean :whatever matches unicode properties though

[21:04] <samcv> and digit isn't one? so uh

[21:04] <samcv> though it could alias to <:Nd>

[21:05] <samcv> m: say '2' ~~ /<:Nd>/

[21:05] <camelia> rakudo-moar 796d6e: OUTPUT«｢2｣␤»

[21:05] <samcv> that works fine

[21:05] <samcv> for Decimal_Number (also Digit)

[21:05] <samcv> so it looks like <:Digit> should do the same as <:Nd>

[21:07] <samcv> m: say '2' ~~ /<:Numeric_Type>/

[21:07] <samcv> m: say 'test'

[21:07] <camelia> rakudo-moar 796d6e: OUTPUT«Nil␤»

[21:07] <camelia> rakudo-moar 796d6e: OUTPUT«test␤»

[21:07] <samcv> :\

[21:08] <samcv> m: '1'.uniprop('Numeric_Type').say

[21:08] <camelia> rakudo-moar 796d6e: OUTPUT«Decimal␤»

[21:08] <samcv> notviki, there is a bug in nqp

[21:08] <notviki> m: '1'.uniprop('Numeric_Type').say; say now - INIT now

[21:08] <camelia> rakudo-moar 796d6e: OUTPUT«Decimal␤0.0035704␤»

[21:08] <samcv> and how it checks regexes

[21:09] <samcv> if you saw the conversation between me and jnthn

[21:09] * notviki didn't

[21:09] <samcv> it checks VALUES not just property names

[21:09] <samcv> so uhm

[21:09] <samcv> numbers don't have a property named digit i think so it fails somethin glike that

[21:09] <samcv> something aweful

[21:09] <samcv> which is what is causing tests to fail even when i fix things in moar

[21:10] <samcv> u: { .unimatch('Digit') }

[21:10] <b2gills> I think where ASCII/POSIX doesn't (and isn't likely in the future to) interfere with Unicode it should be allowed to work.

[21:11] <unicodable6> samcv, U+0000 NULL [Cc] (control character)

[21:11] <unicodable6> samcv, U+0001 START OF HEADING [Cc] (control character)

[21:11] <unicodable6> samcv, U+0002 START OF TEXT [Cc] (control character)

[21:11] <samcv> isn't that what ascii does though it's 8 bytes that are unicode compatible. and unicode is defined IN ascii

[21:11] <samcv> :\

[21:11] <samcv> m: say "\0" ~~ /<:Digit>/

[21:11] <camelia> rakudo-moar 796d6e: OUTPUT«｢␀｣␤»

[21:11] <b2gills> m: dd "\c[NULL]"

[21:11] <camelia> rakudo-moar 796d6e: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Unrecognized character name NULL␤at <tmp>:1␤------> dd "\c[NULL⏏]"␤»

[21:11] <samcv> :\\\\

[21:12] <notviki> star: say "\0" ~~ /<:Digit>/

[21:12] <camelia> star-m 2016.10: OUTPUT«｢␀｣␤»

[21:12] <notviki> :S

[21:12] <samcv> m: say Rakudo::Internals.PROPCODE('Digit')

[21:12] <camelia> rakudo-moar 796d6e: OUTPUT«27␤»

[21:12] <samcv> let me see what 27 is

[21:13] <samcv> MVM_UNICODE_PROPERTY_NUMERIC_TYPE

[21:13] <samcv> yeah so that is fine. digit works fine

[21:13] <samcv> no problem in moar

[21:14] <samcv> notviki, https://github.com/MoarVM/MoarVM/blob/master/src/strings/unicode_gen.h if there's a problem with some match

[21:15] <samcv> check its propcode and then check that linked file in moar and see what it matches. if it's the right one then things are fine as long as uniprop-bool/str/int returns fine

[21:15] * notviki doesn't know C

[21:15] <samcv> since the just 'uniprop' one resolves names

[21:15] <samcv> it's just a list of like

[21:15] <samcv> names and values

[21:15] <samcv> MVM_UNICODE_PROPERTY_HEX_DIGIT = 53,

[21:15] <samcv> like that

[21:15] <samcv> m: say Rakudo::Internals.PROPCODE('Hex_Digit')

[21:15] <camelia> rakudo-moar 796d6e: OUTPUT«53␤»

[21:15] <samcv> m: say Rakudo::Internals.PROPCODE('Hex')

[21:15] <camelia> rakudo-moar 796d6e: OUTPUT«53␤»

[21:15] <samcv> m: say Rakudo::Internals.PROPCODE('hex')

[21:15] <camelia> rakudo-moar 796d6e: OUTPUT«53␤»

[21:15] <samcv> m: say Rakudo::Internals.PROPCODE('space')

[21:16] <camelia> rakudo-moar 796d6e: OUTPUT«23␤»

[21:16] <samcv> m: say Rakudo::Internals.PROPCODE('White_Space')

[21:16] <camelia> rakudo-moar 796d6e: OUTPUT«92␤»

[21:16] <samcv> interesting how that nqp bug persisted due to just chance… of having it work most of the time

[21:16] <samcv> coincidentally

[21:16] <samcv> committable6,  say "\0" ~~ /<:Digit>/

[21:16] <committable6> samcv, ¦«say»: Cannot find this revision

[21:17] <samcv> committable6, all say "\0" ~~ /<:Digit>/

[21:17] <committable6> samcv, https://gist.github.com/c7b9ca0fc22633ab094ba10ee5c8c111

[21:17] <samcv> :\

[21:18] <dalek> rakudo/nom: d810d44 | lizmat++ | src/core/Rakudo/Internals.pm:

[21:18] <dalek> rakudo/nom: Make sure .sort() is stable

[21:18] <dalek> rakudo/nom:

[21:18] <dalek> rakudo/nom: TIL that 0 cmp "0" is Same, which I hadn't anticipated.  b2gills++

[21:18] <dalek> rakudo/nom: for pointing this out.

[21:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d810d44bdb

[21:19] <samcv> notviki, https://github.com/perl6/specs/issues/118

[21:20] <samcv> the code matches property values too which it should probably only do for the Script, Script Extensions, General Category

[21:20] <samcv> and otherwise just match property names

[21:22] <dalek> roast: e8b9f7e | lizmat++ | S15-unicode-information/uniname.t:

[21:22] <dalek> roast: Unfudge now passing tests

[21:22] <dalek> roast: review: https://github.com/perl6/roast/commit/e8b9f7ea3c

[21:26] <samcv> lizmat, working on a fix so that \c[NULL] will work again

[21:26] <samcv> and still pass those tests

[21:27] <lizmat> samcv: you mean the ones I just unfidged ?

[21:27] <samcv> yeah

[21:27] <lizmat> ah, so they were passing for the wrong reason ?

[21:28] <samcv> no they are passing for the right reason :)

[21:28] <lizmat> ok, *phew* 😅

[21:28] <samcv> but the old moarvm put unicode 1 names if the current names were <control>

[21:28] <samcv> which made \c work fine

[21:35] <b2gills> Assuming that Unicode will never reuse the 1 names, allowing them to work in "\c[…]" should probably be allowed

[21:35] <samcv> they did though

[21:35] <samcv> u: BELL

[21:35] <unicodable6> samcv, U+0007 BELL [Cc] (control character)

[21:35] <unicodable6> samcv, U+237E BELL SYMBOL [So] (⍾)

[21:35] <unicodable6> samcv, U+2407 SYMBOL FOR BELL [So] (␇)

[21:35] <unicodable6> samcv, https://gist.github.com/995e5e7d56af98972700f2b7b7fa3e7d

[21:36] <samcv> well. err

[21:36] <samcv> U+1F514 BELL [So] (🔔)

[21:36] <samcv> yep

[21:36] <samcv> they did

[21:36] <b2gills> Perl 5 had the same problem with that one

[21:36] <geekosaur> U+237E looks more like a space invaders sprite in this font >.>

[21:37] <samcv> m: "\c[BELL]".say

[21:37] <camelia> rakudo-moar d810d4: OUTPUT«🔔␤»

[21:37] <samcv> evalable: "\c[BELL]".say

[21:37] <evalable6> samcv, rakudo-moar d810d44: OUTPUT«🔔»

[21:37] <samcv> bisectable: "\c[BELL]".say

[21:37] <bisectable6> samcv, Bisecting by output (old=2015.12 new=d810d44) because on both starting points the exit code is 0

[21:37] <bisectable6> samcv, bisect log: https://gist.github.com/36f3ece3929499193a8bd01d146ed251

[21:37] <bisectable6> samcv, (2016-12-27) https://github.com/rakudo/rakudo/commit/8163113ade68e764a16fcf04b0a7a4da1c643156

[21:39] <samcv> m: say "\c[BACKSPACE]"

[21:39] <camelia> rakudo-moar d810d4: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Unrecognized character name BACKSPACE␤at <tmp>:1␤------> say "\c[BACKSPACE⏏]"␤»

[21:39] <samcv> m: say "\c[BEL]"

[21:39] <camelia> rakudo-moar d810d4: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Unrecognized character name BEL␤at <tmp>:1␤------> say "\c[BEL⏏]"␤»

[21:40] <samcv> we could use \c[BEL] or something

[21:40] <samcv> # Note that no formal name alias for the ISO 6429 "BELL" is

[21:40] <samcv> # provided for U+0007, because of the existing name collision

[21:40] <samcv> # with U+1F514 BELL.

[21:40] <lizmat> b2gills: how did Perl 5 fix that ?

[21:40] <samcv> if we are going to support these characters

[21:40] <samcv> we need to use NameAliases.txt to do it

[21:40] <samcv> because they don't collide

[21:40] <b2gills> They warned for a release or two then upgraded

[21:41] <samcv> see ftp://ftp.unicode.org/Public/UCD/latest/ucd/NameAliases.txt

[21:41] <samcv> this is what we should use not the unicode 1 names

[21:41] <samcv> cause no collisions

[21:42] <samcv> looks like we do process this file

[21:42] <samcv> but it doesn't end up in the moarvm unicode data structure :\

[21:44] <samcv> luckyly there's no "BELL" in roast 6.c-errata

[21:46] <samcv> bisectable6, say "\c[BEL]"

[21:46] <bisectable6> samcv, On both starting points (old=2015.12 new=d810d44) the exit code is 1 and the output is identical as well

[21:46] <bisectable6> samcv, Output on both points: ===SORRY!=== Error while compiling /tmp/EYp39qnckE␤Unrecognized character name BEL␤at /tmp/EYp39qnckE:1␤------> say "\c[BEL⏏]"

[21:46] <samcv> kk

[21:47] <samcv> looks like it never worked properly with that

[21:47] <dalek> rakudo/nom: 9d4cdd4 | lizmat++ | src/core/Rakudo/Internals.pm:

[21:47] <dalek> rakudo/nom: Introducing R:I.ReifiedListIterator

[21:47] <dalek> rakudo/nom:

[21:47] <dalek> rakudo/nom: - abstracted from List.iterator for more general usage

[21:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9d4cdd4836

[21:47] <dalek> rakudo/nom: ca919d9 | lizmat++ | src/core/List.pm:

[21:47] <dalek> rakudo/nom: Use R:I.ReifiedListIterator in List.iterator

[21:47] <dalek> rakudo/nom:

[21:47] <dalek> rakudo/nom: Because now we can

[21:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ca919d96c9

[21:47] <b2gills> I think that ROAST would have been updated to return the non-control bell anyway

[21:47] <samcv> yeah

[21:47] <samcv> for sure

[21:48] <samcv> though at least we have a good path going forward

[21:48] <samcv> none of this 'unicode 1 names' only the _Official_ name aliases

[21:48] <samcv> and will be future portable

[21:50] <moritz> m: say "\n".uniname

[21:50] <camelia> rakudo-moar d810d4: OUTPUT«<control-000a>␤»

[21:50] <samcv> ack should be uppercase

[21:54] <samcv> m: say "\c[LF]"

[21:54] <camelia> rakudo-moar ca919d: OUTPUT«␤␤»

[21:54] <samcv> that works tho

[21:54] <samcv> m: say "\c[LINE FEED]"

[21:54] <camelia> rakudo-moar ca919d: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Unrecognized character name LINE FEED␤at <tmp>:1␤------> say "\c[LINE FEED⏏]"␤»

[21:55] <b2gills> I think LF might even predate ASCII

[21:55] <samcv> m: say "\c[NULL]"

[21:55] <camelia> rakudo-moar ca919d: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Unrecognized character name NULL␤at <tmp>:1␤------> say "\c[NULL⏏]"␤»

[21:55] <samcv> m: say "\c[CR]"

[21:55] <camelia> rakudo-moar ca919d: OUTPUT«

[21:55] <samcv> hmmmm

[21:55] <samcv> spooky

[21:55] <samcv> must have that programmed in somewhere…

[21:58] <b2gills> m: say "boooo\c[CR]hell" # too bad camilia isn't special cased for this

[21:58] <camelia> rakudo-moar ca919d: OUTPUT«boooo

[22:02] <notviki> m: say "boooo\c[CR]QUIT :bye"

[22:02] <camelia> rakudo-moar ca919d: OUTPUT«boooo

[22:05] <samcv> m: say "\c[EOH]"

[22:05] <camelia> rakudo-moar ca919d: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Unrecognized character name EOH␤at <tmp>:1␤------> say "\c[EOH⏏]"␤»

[22:06] <lizmat> good night, #perl6-dev!

[22:07] <notviki> night

[22:50] <samcv> ok so 0x7's control name is ALERT

[22:50] <samcv> and its abbreviation is BEL

[22:53] <samcv> so i will just use the control name

[22:53] <samcv> until there is a better method of doing this

[22:55] <samcv> the only 6.c-errata test this will affect is: is("\c[LINE FEED (LF)]", "\c10", '\c[LINE FEED (LF)] works');

[22:56] <samcv> it also tests is("\c[LINE FEED]", "\c10", '\c[LINE FEED] works');

[22:56] <samcv> is("\c[LF]", "\c10", '\c[LF] works');

[22:56] <samcv> so if i make this change we will pass the \c[LINE FEED] test

[22:56] <samcv> but break the LINE FEED (LF) one. but. i mean who actually would type that all out?

[22:57] <samcv> b2gills, thoughts?

[22:57] <samcv> LINE FEED is in unicode name aliases, but LINE FEED (LF) is not, there is LF and LINE FEED

[22:58] <samcv> it's a bit silly somebody typing \c[LINE FEED (LF)] =\ and i'm not totally sure the (LF) is actually part of the name tbh

[22:58] <samcv> well unicode 1 was a long time ago

[22:59] <samcv> we can still decide what the 'correct' name to return for uniname(:one ) for unicode 1 names, but should use the official alias names

[23:00] <samcv> the only things that will break will be CARRIAGE RETURN (CR), and LINE FEED (LF) and BELL. but will fix CARRIAGE_RETURN and LINE FEED which are much more common

[23:00] <samcv> and BELL will be ALERT for now, and will also be able to do \c[BEL] when we get proper name alias support working

[23:02] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Use R:I.ReifiedListIterator in List.iterator

[23:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/187075702 https://github.com/rakudo/rakudo/compare/d810d44bdbc7...ca919d96c97e

[23:02] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[23:21] <notviki> :/ "The job exceeded the maximum time limit for jobs, and has been terminated"

[23:21] <samcv> 47 minutes
