[06:41] <nine> .tell pmurias Good question. Right now the answer is: we can't. Inline::Perl5 disables precompilation of modules that use Inline::Perl5.

[06:41] <yoleaux2> nine: I'll pass your message to pmurias.

[07:51] <masak> hi, #perl6-dev

[07:51] <masak> where is QAST code turned into backend-specific code? in nqp? in Moar?

[07:55] <nine> masak: in nqp

[07:56] <nine> masak: src/vm/moar/QAST/QASTCompilerMAST.nqp

[07:57] <masak> thank you

[07:58] <masak> nine: and how would you characterize MAST? something that can easily be serialized into MoarVM's bytecode?

[08:06] <nine> For some value of easy :)

[08:07] <masak> somewhere on a scale between "wow, that's slick" and "yay, my brain didn't catch on fire!"

[08:54] <nine> Is t/spec/S06-signature/introspection.rakudo.moar failing for anyone else?

[08:54] <nine> Oh, I should probably run config.status

[08:55] <lizmat> nine: failing for me as well, afiak

[08:55] <pmurias> masak: most of the magic seems to happen both *after* the transformation from MAST to bytecode and while compiling QAST to MAST

[08:55] <yoleaux2> 06:41Z <nine> pmurias: Good question. Right now the answer is: we can't. Inline::Perl5 disables precompilation of modules that use Inline::Perl5.

[08:56] <masak> pmurias: which is consistent with MAST being close to the bytecode, no?

[08:56] <pmurias> yes

[08:57] <DrForr> Inline::Perl5::Inception

[08:57] <pmurias> masak: OTOH some other vms/compilers seem to do a lot of transformations on their low level form

[08:58] <nine> pmurias: I haven't given up on making precompilation work with Inline::Perl5 though :) I just had to learn a lot about how our module loading and precompilation works. Luckily there were a couple of minor tasks in that area in the past year ;)

[09:01] <pmurias> nine: good, precompilation seems to be one of the most important features

[09:04] <dalek> rakudo/lexical_module_load: b54e04b | niner++ | src/Perl6/ (3 files):

[09:04] <dalek> rakudo/lexical_module_load: Make importing globals from loaded modules lexical

[09:04] <dalek> rakudo/lexical_module_load:

[09:04] <dalek> rakudo/lexical_module_load: Right now if A depends on C:auth<foo> and B depends on C:auth<bar> you

[09:04] <dalek> rakudo/lexical_module_load: cannot use A and B in the same program. Fix this by having not only

[09:04] <dalek> rakudo/lexical_module_load: exported symbols be lexical but also the globals contained in a module.

[09:04] <dalek> rakudo/lexical_module_load:

[09:04] <dalek> rakudo/lexical_module_load: So only A will even have a C that's bound to C:auth<foo>. This means

[09:04] <dalek> rakudo/lexical_module_load: that you have to "use" modules in every scope that accesses those names,

[09:04] <dalek> rakudo/lexical_module_load: which is a good thing to do anyway.

[09:04] <dalek> rakudo/lexical_module_load:

[09:04] <dalek> rakudo/lexical_module_load: Definitely 6.d material though as it will break existing code.

[09:05] <nine> review: https://github.com/rakudo/rakudo/commit/b54e04b6b46792620b2c8098544acf5ad5b563d8

[09:16] <[TuxCM]> This is Rakudo version 2016.08.1-15-g998e2b7 built on MoarVM version 2016.08

[09:16] <[TuxCM]> csv-ip5xs        9.926

[09:16] <[TuxCM]> test            15.157

[09:16] <[TuxCM]> test-t           7.281

[09:16] <[TuxCM]> csv-parser      16.286

[09:28] <pmurias> masak: what would be an elegant way to have the tests use the QAST backend?

[09:29] <nine> TimToady, jnthn input on https://github.com/rakudo/rakudo/commit/b54e04b6b46792620b2c8098544acf5ad5b563d8 very much appreciated

[09:39] <jnthn> morning, #perl6-dev

[09:42] <pmurias> morning

[09:42] <jnthn> nine: Well, it's interesting how little code it takes at the very least :)

[09:43] <jnthn> nine: fwiw, my ponderings had sorta been along the lines of "we still have a GLOBAL package, but it's always fully qualified (with :from, :auth, :ver, etc.) and the shortname forms are lexical. I dunno how feasible/better (if at all) that is than going to whole hog.

[09:46] <pmurias> jnthn: does that have any benefits?

[09:48] <jnthn> Largely, just letting you pretend things are like they are today until you actually get a conflict.

[09:49] <jnthn> At which point we can give a decent (compile time) error noting the symbol is already bound to a particular version.

[09:49] <jnthn> And it'd mean there was still a meaningful GLOBAL::

[09:53] <nine> jnthn: talked to lizmat about it and we came to the same conclusion that we do want the longname in GLOBAL and a lexically imported shortname.

[09:54] <nine> With compile time errors on conflicting lexical shortnames

[09:54] <pmurias> will GLOBAL have the full longname with everything or just with the details specified by the use statement?

[09:55] <nine> pmurias: full longname I think

[09:55] <jnthn> Yeah, I expect it'd have to be what the module considers itself to be called

[09:56] <nine> Because people will always be lazy and underspecify the use statements.

[09:56] <nine> Also we probably don't want a Test and Test:auth<Perl> in GLOBAL :)

[09:57] <jnthn> aye

[09:57] <pmurias> so do get something from GLOBAL you will have to type in the full longname?

[09:57] <nine> pmurias: yes

[09:58] <pmurias> what's the use case for that?

[09:59] <nine> It's needed to make loading different versions of a module in the same program actually work.

[09:59] <nine> different versions or different auths or different froms

[09:59] <nine> The latter blocking an important improvement to Inline::Perl5

[10:00] <pmurias> nine: what I meant what's the use case for having both a fully qualified name in GLOBAL:: and lexical one as opposed to just having a lexical one?

[10:01] <jnthn> Being able to write code that talks about the two versions is probably useful. Imagine you wanted to write a test or a benchmark and try it against each version, for example.

[10:05] <pmurias> if we expose the full names in GLOBAL wouldn't that prevent us from expanding them latter on?

[10:05] <jnthn> Expanding them?

[10:06] <nine> https://github.com/niner/CompUnit-Repository-DependencyTracker already shows another way of finding out what exact modules we loaded.

[10:07] <pmurias> adding a use Foo:new-thing<....> but it would only affect the new modules

[10:09] <jnthn> Is that a problem?

[10:09] <lizmat> m: say MY::.keys

[10:09] <camelia> rakudo-moar 998e2b: OUTPUT«($=pod !UNIT_MARKER EXPORT $_ $! ::?PACKAGE GLOBALish $¢ $=finish $/ $?PACKAGE)␤»

[10:09] <pmurias> jnthn: no

[10:10] <lizmat> m: { say MY::.keys }

[10:10] <camelia> rakudo-moar 998e2b: OUTPUT«($_ $*DISPATCHER)␤»

[10:10] <pmurias> jnthn: having a 'use Foo' and then using the exact version from GLOBAL seems like a more serious potential problem

[10:12] <jnthn> pmurias: Still one we could catch at compile time, though

[10:13] <lizmat> m: { say MY::.keys; say $*DISPATCHER }  # isn't thos weird ?

[10:13] <camelia> rakudo-moar 998e2b: OUTPUT«($_ $*DISPATCHER)␤Dynamic variable $*DISPATCHER not found␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[10:14] <pmurias> jnthn: like only being able to use a module from GLOBAL if you import it fully qualified?

[10:15] <pmurias> jnthn: we should catch such issues at module author compile time before the code is released on CPAN ;)

[10:19] <pmurias> jnthn: I don't have a strong conviction about putting the fully qualified name into GLOBALs but it just seems extra effort to implement a way to shoot yourself in the foot

[10:20] <jnthn> Most useful things always have ways to get hurt with...

[10:25] <pmurias> talking about both versions is also possible in the only lexical scheme, just slightly less convinient

[10:25] <pmurias> *c convenient

[10:26] <pmurias> my $old-Foo = do {use Foo:ver<3.1>; Foo}

[10:27] <pmurias> the synopsis also mention an unimplemented use OldFoo:name<Foo>, :name adverb

[10:46] <nine> ~/win 23

[10:49] <TheLemonMan> RT#129060 looks like the constructor is recursive

[10:49] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129060

[10:53] <nine> TheLemonMan: yes

[10:55] <nine> TheLemonMan: I rejected the ticket

[10:57] <masak> yeah, was gonna say

[10:57] * masak .oO( it's Bla all the way down! )

[10:58] <dalek> rakudo/nom: 2153bf5 | lizmat++ | src/core/Any.pm:

[10:58] <dalek> rakudo/nom: Make default === check for object identicality

[10:58] <dalek> rakudo/nom:

[10:58] <dalek> rakudo/nom: A very cheap check, with large consequences when successfully applied

[10:58] <dalek> rakudo/nom: to large objects (like a Bag with 1000 elements)

[10:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2153bf53e0

[12:04] <TheLemonMan> WRT #128964 I think the right solution would be to generate the appropriate type checks against the constraint type in p6typecheckrv, anyone got a better idea ?

[12:04] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128964

[12:06] <jnthn> TheLemonMan: Well, it's also a case of performing the coercion

[12:07] <jnthn> I wonder if p6typecheckrv can go away entirely as an op, in favor of just compiling an appropriate check or coercion...after all, by the time we're finishing up the code of the block, all the traits should have already been applied.

[12:10] <TheLemonMan> jnthn, that should be just a matter of factoring out some code from bind_one_param to actually perform the coercion (I think)

[12:11] <jnthn> Well, except that we're doing code-gen in the return case, rather than interpreting a signature as in bind_one_param

[12:11] <jnthn> But the operation is the same kind of thing, yes

[12:12] <jnthn> We can figure out while compiling that we have a coercion type

[12:52] <pmurias> masak: when will bond conf be streamed?

[13:00] <dalek> nqp/expose-decode-stream: b30de50 | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[13:00] <dalek> nqp/expose-decode-stream: Map decodestream ops.

[13:00] <dalek> nqp/expose-decode-stream: review: https://github.com/perl6/nqp/commit/b30de50d46

[13:00] <dalek> nqp/expose-decode-stream: 39d4365 | jnthn++ | t/moar/05-decoder.t:

[13:00] <dalek> nqp/expose-decode-stream: Stub in tests for decoder.

[13:00] <dalek> nqp/expose-decode-stream: review: https://github.com/perl6/nqp/commit/39d43651aa

[13:57] * mst takes a -pie chainsaw to rakudo

[13:58] <lizmat> how retro  :-)

[13:58] <mst> so's hardcoding the wrong path into the source code :P

[14:17] <RabidGravy> Mmmmm pie

[14:20] <mst> IT FUCKING WORKED

[14:20] <timotimo> \o/

[14:21] <mst> I appear to have at least semi-viable Alien::MoarVM Alien::NQP Alien::Rakudo

[14:25] <jnthn> mst++

[14:25] <mst> note this is based on some fairly horrible hackery, but it's intended to be backportable horrible hackery

[14:25] <jnthn> And a bunch of patches to the build toolchain so next time you swear less? :)

[14:26] <mst> most of it's patches to that tbh, though they're not entirely clean yet

[14:26] <mst> hence them living inside my work

[14:26] <mst> the nasty one was regexping ModuleLoader.nqp to unfuck the BOOTSTRAP search logic

[14:26] <mst> perl -pi -e 'my $$q = "'"'"'"; s{!! nqp::backendconfig<prefix> ~ $${q}/s

[14:26] <mst> hare/nqp/lib/$${q}}{!! $${q}$(M_INST_LIBPATH)/$${q}}' $(M_BUILD_DIR)/m-ModuleLoa

[14:26] <mst> der.nqp

[14:27] <mst> ^^ not my most elegant work

[14:27] <mst> jnthn: I stand by my statement of "this stuff is amateur hour, but it's pretty well factored easy-to-unfuck amateur hour for something that's obviously never seen a toolchainer"

[14:27] <mst> which, honestly, I hope comes over as mostly a compliment

[14:32] <dalek> roast: f096ae5 | lizmat++ | S06-signature/introspection.t:

[14:32] <dalek> roast: Skip tests broken by 560170f31ef22a2dbc7

[14:32] <dalek> roast:

[14:32] <dalek> roast: Not sure what to do with these, as that commit was supposed to make

[14:32] <dalek> roast: something illegal that wasn't but should have been.

[14:32] <dalek> roast: review: https://github.com/perl6/roast/commit/f096ae50f4

[14:33] <RabidGravy> mst, from you if the sentence only contains "unfuck" once it's a compliment as far as I've learned ;-)

[14:34] <jnthn> mst: Yup. Any bits of the MoarVM configure/build stuff I did were largely done thinking "I hope somebody who's good at this stuff will replace it" :)

[14:35] <nine> mst: FWIW the openSUSE spec files for rakudo and nqp also need to sed those lines

[14:35] <nine> mst: a cleaner solution would be most welcome

[14:35] <mst> I'm hoping we'll get to the point where we don't

[14:36] <mst> aggravtingly, moarvm's libpath already has the right places to look, hence why I didn't have to touch anything else in the loading code

[14:36] <mst> just that one insists

[14:36] <mst> also, it strikes me that checking blib/Perl6/BOOTSTRAP.moarvm first is a cwd() attack in the making, potentially

[14:48] <dalek> rakudo/nom: 9a1616e | LemonBoy++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[14:48] <dalek> rakudo/nom: Print the right type name when the type constraint check fails.

[14:48] <dalek> rakudo/nom:

[14:48] <dalek> rakudo/nom: RT#126124

[14:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9a1616ed63

[14:48] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126124

[14:48] <dalek> rakudo/nom: 76e1ede | lizmat++ | src/Perl6/Metamodel/BOOTSTRAP.nqp:

[14:48] <dalek> rakudo/nom: Merge pull request #845 from LemonBoy/classname

[14:48] <dalek> rakudo/nom:

[14:48] <dalek> rakudo/nom: Print the right type name when the type constraint check fails.

[14:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/76e1ede7a6

[15:03] <TheLemonMan> lizmat, I've added some tests in roast #146, still haven't run those yet though

[15:21] <TheLemonMan> jnthn, as far as I can see there's no typed exception for that :\

[15:22] <jnthn> TheLemonMan: OK. Maybe would be better to pattern-match against the message to see if it contains the type?

[15:23] <TheLemonMan> is there a test harness to do so? I think I've seen a similar test but don't remember where

[15:24] <ItayAlmog> I just pushed to github an updated to my compiler, so now I use ANTLR for parsing, which will make it alot easier to parse the Perl6 code, Also I now have say and simple compile time type checking :) [This is the project https://github.com/Itay2805/Perl6-Native-Compiler]

[15:24] <dalek> nqp/expose-decode-stream: cd2d9df | jnthn++ | t/moar/05-decoder.t:

[15:24] <dalek> nqp/expose-decode-stream: Add a bunch more decoder tests.

[15:24] <dalek> nqp/expose-decode-stream: review: https://github.com/perl6/nqp/commit/cd2d9df906

[15:24] <dalek> nqp/expose-decode-stream: edd7ef7 | jnthn++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[15:24] <dalek> nqp/expose-decode-stream: Map decodertakeavailablechars op.

[15:24] <dalek> nqp/expose-decode-stream: review: https://github.com/perl6/nqp/commit/edd7ef78d7

[15:24] <dalek> nqp/expose-decode-stream: a692899 | jnthn++ | t/moar/05-decoder.t:

[15:24] <dalek> nqp/expose-decode-stream: Test decodertakeavailablechars op.

[15:24] <dalek> nqp/expose-decode-stream: review: https://github.com/perl6/nqp/commit/a692899577

[15:31] <jnthn> TheLemonMan: I think throws-like uses smartmatch, so you might be able to just write something like message => /Mu/ or so

[15:32] <timotimo> that sounds about right

[15:33] <TheLemonMan> that's damn neat, updated!

[15:51] <TheLemonMan> m: sub x(int $x where * < 3) { ... }; x();

[15:51] <camelia> rakudo-moar 76e1ed: OUTPUT«Too few positionals passed; expected 1 argument but got 0␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:51] <TheLemonMan> m: sub x(int $x? where * < 3) { ... }; x();

[15:51] <camelia> rakudo-moar 76e1ed: OUTPUT«Stub code executed␤  in sub x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[16:11] <dalek> rakudo/nom: 33be22f | lizmat++ | lib/TAP.pm6:

[16:11] <dalek> rakudo/nom: Remove unneeded returns from TAP.pm6

[16:11] <dalek> rakudo/nom:

[16:11] <dalek> rakudo/nom: This seems to have a positive effect on both the speed as well as

[16:11] <dalek> rakudo/nom: the stability of "make spectest"

[16:11] <dalek> rakudo/nom:

[16:11] <dalek> rakudo/nom: All tests successful.

[16:11] <dalek> rakudo/nom: Files=1118, Tests=52599,  307 wallclock secs

[16:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/33be22fd2e

[16:11] <lizmat> afk&

[16:25] <TheLemonMan> how do you get all the tickets with NEEDSTEST ?

[16:28] <timotimo> buggable: testneeded

[16:28] <timotimo> huggable: testneeded

[16:28] <huggable> timotimo, nothing found

[16:28] <timotimo> buggable: help

[16:28] <buggable> timotimo, rt | rt TAG

[16:28] <timotimo> rt testneeded

[16:28] <timotimo> buggable: rt testneeded

[16:29] <buggable> timotimo, Found no tickets with tag TESTNEEDED

[16:29] <timotimo> i think that's only for tickets with TESTNEEDED in the title

[16:35] <NotZoffix> TheLemonMan: try this URL: https://rt.perl.org/Search/Results.html?Format=%27%20%20%20%3Cb%3E%3Ca%20href%3D%22__WebPath__%2FTicket%2FDisplay.html%3Fid%3D__id__%22%3E__id__%3C%2Fa%3E%3C%2Fb%3E%2FTITLE%3A%23%27%2C%0A%27%3Cb%3E%3Ca%20href%3D%22__WebPath__%2FTicket%2FDisplay.html%3Fid%3D__id__%22%3E__Subject__%3C%2Fa%3E%3C%2Fb%3E%2FTITLE%3ASubject%27%2C%0A%27__Status__%27%2C%0A%27__QueueName__%27%2C%0A%27__OwnerName__%27%2C%0A%27__P

[16:36] <NotZoffix> Oh, doesn't even work.

[16:37] <timotimo> urgh, rt urls

[16:37] <NotZoffix> TheLemonMan: it's pretty retarded. Basically go to https://rt.perl.org/Search/Build.html?NewQuery=1 then at the top right click 'Advanced' and paste this into the query box: Queue = 'perl6' AND Status != 'rejected' AND Status != 'resolved' AND CF.{Tag} = 'testneeded'

[16:37] <NotZoffix> And then save and search.

[16:39] <NotZoffix> I'm working on 'R6' ATM, a saner UA for RT: http://i.imgur.com/PApt3tC.png

[16:39] <timotimo> retarded isn't a word i'd use for things that are not cool, tbh

[16:39] <timotimo> but i do appreciate R6 :)

[16:40] <TheLemonMan> NotZoffix, that url's horrible, but R6 looks beautiful

[16:40] <timotimo> zoffix really knows a bit or two about pretty interfaces

[16:41] <NotZoffix> Yeah. The trick is to go to BootSwatch and then pretend you made it ;) https://bootswatch.com/flatly/

[16:41] <TheLemonMan> I was just about to say it needs more bootstrap heh

[16:42] <timotimo> <3

[16:44] <NotZoffix> timotimo: why not 'retarded'? No one uses that word to refer to mentally disabled anymore. Just as 'idiot' is not a medical condition anymore. Just as 'dumb' is not used to describe deaf people. Just because people whose comprehension of language fails to consider context are loud about a word, doesn't make it a bad word.

[16:45] <timotimo> huh, i hear retarded be used for people who stopped developing at some point

[16:46] <perlpilot> "dumb" is not for deaf people, it's for those unable to speak.

[16:46] <timotimo> right

[16:47] <timotimo> hmm

[17:02] <dalek> rakudo/nom: a4cc1ca | lizmat++ | src/core/Any.pm:

[17:02] <dalek> rakudo/nom: Oops, wrong order of checks, Brad Gilbert++

[17:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a4cc1ca41e

[17:02] <lizmat> afk&

[17:10] <b2gills> Well it wasn't the wrong order of checks, it just wasn't the best order

[19:04] <dalek> rakudo/async-socket-str-fixes: 10c5a29 | jnthn++ | src/core/IO/Socket/Async.pm:

[19:04] <dalek> rakudo/async-socket-str-fixes: First steps on fixing string async socket reads.

[19:04] <dalek> rakudo/async-socket-str-fixes:

[19:04] <dalek> rakudo/async-socket-str-fixes: This uses the new VM-backed streaming decode API, which will allow for

[19:04] <dalek> rakudo/async-socket-str-fixes: much better error handling, choosing the encoding, and in the future

[19:04] <dalek> rakudo/async-socket-str-fixes: provide support for userspace decoders to be plugged in. This nearly

[19:04] <dalek> rakudo/async-socket-str-fixes: works, with a caveat: we run into a phaser scoping bug with the LAST

[19:04] <dalek> rakudo/async-socket-str-fixes: block that will need some attention. (Also, the streaming decode stuff

[19:04] <dalek> rakudo/async-socket-str-fixes: is not yet available for the JVM backend.)

[19:04] <dalek> rakudo/async-socket-str-fixes: review: https://github.com/rakudo/rakudo/commit/10c5a29cd3

[19:33] <[Coke]> http://rakudo.org/rt/testneeded - tickets with testneeded.

[19:36] <[Coke]> I will second, please don't use "retarded" in that sense. Right up there with "that's so gay".

[19:44] <NotARobot> [Coke]: are TESTSNEEDED the only tag that we use as an RT tag, rather than text-in-subjectline tag?

[19:45] <[Coke]> no. there are lots of other things that aren't in the subject line.

[19:45] <[Coke]> platform and VM are 2 of the biggest.

[19:47] <NotARobot> Alright. I was kinda hoping to reduce the number of requests to RT API in my R6 app, since the ticket# + subject line can be fetched via a single request, while more info requres fetching individual tickets.

[19:54] <[Coke]> you can request more stuff in the same request via the API.

[19:54] <[Coke]> I think. one sec.

[19:55] <[Coke]> I'm doing a single 'rt' call in my thing that's using the p5 client.

[19:56] <[Coke]> (no clue what it's doing behind the scenes)

[19:56] <[Coke]> https://github.com/coke/rt-six-help/blob/master/summary.p6#L21-L34

[19:58] * geekosaur winces at the code injection possibilities... admittedly there's not much that could be done there and not from the shell, but

[19:59] <[Coke]> geekosaur: It's a command -i am running myself from the commandline-.

[19:59] <[Coke]> needs my private key to do anything with rt.

[19:59] <[Coke]> That said, patches welcome. :)

[20:01] <geekosaur> the "but" is that you kinda get terrible behavior for what in most cases will have been an innocent typo

[20:24] <masak> pmurias: 'fraid there'll be no streaming or video of Bond-con.

[20:24] <masak> pmurias: but there will be a talk, with slides, and plentiful notes.

[20:25] <masak> Bond-con is a three-day conference, the same three days as YAPC::Europe

[20:25] <masak> today was a great day, with a total of 0 talks

[20:26] <masak> they were often described as "incomparable", which makes sense because they had an average rating of NaN

[20:29] <timotimo> \o/

[23:09] <MasterDuke> i was just playing around with benchable and thought this was interesting: https://gist.github.com/Whateverable/0956fb70fd2e5cff0ddbaf4340525bca

[23:29] <Zoffix> [Coke]++ indeed, all I was missing is format=l for RT API to get extra info. Really helps out R6 to be awesome :)

[23:32] * Zoffix asked for a spot at TPM's September Lightning Talks... to do a "Perl 6: What Programming In The Future Is Like" talk :)

[23:32] <Zoffix> Gonna show how to convert a 1-core program to run on 32-core box and the ease of doing so with P6

[23:35] <dalek> roast: 869d395 | (Zoffix Znet)++ | S03-operators/relational.t:

[23:35] <dalek> roast: Test RT#128421 (#128)

[23:35] <dalek> roast:

[23:35] <dalek> roast: 100 ≅ -100 and 100 =~= -100 must return False

[23:35] <dalek> roast: review: https://github.com/perl6/roast/commit/869d3952b8

[23:35] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128421

[23:36] <dalek> roast: c0feebd | LemonBoy++ | S06-signature/types.t:

[23:36] <dalek> roast: Tests for #126124 (#146)

[23:36] <dalek> roast: review: https://github.com/perl6/roast/commit/c0feebdbb1

[23:36] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126124

[23:46] <dalek> roast: 0a8b8b5 | (Zoffix Znet)++ | S06-signature/types.t:

[23:46] <dalek> roast: Use vaguer match for exception message

[23:46] <dalek> roast:

[23:46] <dalek> roast: Fixes test failure

[23:46] <dalek> roast: review: https://github.com/perl6/roast/commit/0a8b8b587a
