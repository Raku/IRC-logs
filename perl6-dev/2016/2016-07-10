[01:56] <sortiz> gfldex, may be a note about .DEFINITE can be useful too

[02:22] <gfldex> .tell soritz i believe to remember being told that .DEFINITE is a implementation detail. It was removed from S12, yet there are still spectests. It's a design question I can not answer.

[02:22] <yoleaux2> gfldex: I'll pass your message to soritz.

[04:15] <Zoffix> If someone knows C, would be sweet to add tests for https://rt.perl.org/Ticket/Display.html?id=127823 so it could be closed. I believe they go here instead of roast: https://github.com/rakudo/rakudo/tree/nom/t/04-nativecall

[04:23] <Zoffix> m: say(s/^// and s/^//)

[04:23] <camelia> rakudo-moar 405519: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' ␤at <tmp>:1␤------> say(s/^//⏏ and s/^//)␤    expecting any of:␤        infix␤        infix stopper␤»

[04:23] <Zoffix> m: say(s/^// && s/^//)

[04:23] <camelia> rakudo-moar 405519: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[04:25] <Zoffix> Ticketed: https://rt.perl.org/Ticket/Display.html?id=128589

[04:33] <Zoffix> If someone has OSX, it would be appreciated to test whether this bug still exists in bleed rakudo: https://rt.perl.org/Ticket/Display.html?id=127811#ticket-history

[07:05] <sortiz> .tell Zoffix Test requested for RT#127823 at rakudo's PR#823

[07:05] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127823

[07:34] <nine> psch: isn't CompUnit::Repository::Jar your class loader? When you use lib 'jar#/foo/bar.jar', 'jar#foo/baz.jar'; we add two CompUnit::Repository::Jar instances to the repository chain.

[07:55] <dalek> rakudo/nom: b0cd70c | (Salvador Ortiz)++ | t/04-nativecall/02-simple-args. (2 files):

[07:55] <dalek> rakudo/nom: A test for native ssize_t

[07:55] <dalek> rakudo/nom:

[07:55] <dalek> rakudo/nom: Need for close RT#127823, Zoffix request

[07:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b0cd70c3d9

[07:55] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127823

[07:55] <dalek> rakudo/nom: 37ead59 | (Salvador Ortiz)++ | t/04-nativecall/02-simple-args.c:

[07:55] <dalek> rakudo/nom: Use the proper tested type

[07:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/37ead59eac

[07:55] <dalek> rakudo/nom: e80060e | FROGGS++ | t/04-nativecall/02-simple-args. (2 files):

[07:55] <dalek> rakudo/nom: Merge pull request #823 from salortiz/test_ssize_t

[07:55] <dalek> rakudo/nom:

[07:55] <dalek> rakudo/nom: Test native ssize_t

[07:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e80060e129

[07:56] <psch> nine: https://gist.github.com/peschwa/c25caca2ae3b946aa9d85e3da677f1ca is what i'm seeing

[08:01] <nine> psch: have CompUnit::Repository::Java do the CompUnit::Repository::Locally role. That will give it a $.prefix property pointing to the path following the #

[08:05] <psch> alright, building that now

[08:24] * nine is crossing fingers

[08:24] <psch> yeah, just gotta fix all those silly oversights... /o\

[08:25] <psch> like, not checking if Repo::Locally declares any stubs for example :S

[08:25] <nine> Silly oversights? Ah, your copying my development methodology now ;)

[08:37] <psch> humm, now it complains about $prefix not getting value somewhen during install-core-dist.pl /o\

[08:38] <psch> that means the "original" Repo::Java in RepositoryRegistry would need to be initialized with a $.prefix i assume

[08:38] <psch> but that's not a situation where we have or need one..?

[08:38] <nine> What original repo?

[08:38] <psch> the one in the repo-chain

[08:39] <psch> in setup-repositories

[08:40] <nine> That looks like hardly more than stub code.

[08:41] <nine> Thinking a bit about this, it would seem like you'd want 2 Repository implementations. A CompUnit::Repository::Java that just loads a Java class by name (i.e. one that's already available in the CLASSPATH) and a CompUnit::Repository::Jar does CompUnit::Repository::Locally for adding jars to the CLASSPATH

[08:42] <psch> right, the one i have already works fine for the former

[08:43] <psch> and it does seem like i can't easily stuff it in one

[08:43] <psch> although i really don't wanna limit people to jars :P

[08:43] <psch> classfiles are fine too

[08:44] <nine> Well we do have 3 different Repository implementations for Perl 6 modules. No reason to restrict yourself with Java repos

[08:45] <psch> well, the loading differences between .jar and .class are already handled in nqp-j is my point

[08:46] <nine> So you'd just need to find a better name than Repository::Jar?

[08:46] <psch> probably, yeah

[08:46] <psch> or maybe Repository::Java should be different

[08:46] <psch> i mean, the one that loads from the standard classpath

[08:46] <psch> which is actually mostly rt.jar

[08:46] <psch> right, JavaRuntime for the one that loads Java core classes i guess

[08:47] <psch> and Java for the one that loads whatever you point it at

[08:49] <psch> that also means having different short-ids i guess?

[08:49] <nine> yes

[09:25] <psch> okay, so do_pragma calls into RepoReg.file-for-spec

[09:25] <psch> that calls into Repo::Locally.source-file

[09:26] <psch> but the class that does Repo::Locally already has to have a prefix at that moment..?

[09:26] <psch> but file-for-spec seems to be the first spot we know what should be the prefix..?

[10:07] <psch> this is weird

[10:08] <psch> the .perl of Repo::Java reports the path, but in $*REPO.repo-chain is comes out as "java#", without the path after the #..?

[10:40] <dalek> rakudo/nom: ba4fff4 | lizmat++ | src/core/Str.pm:

[10:40] <dalek> rakudo/nom: Make Str.Int about 5% faster

[10:40] <dalek> rakudo/nom:

[10:40] <dalek> rakudo/nom: By not making use of intermediates

[10:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ba4fff4e09

[10:56] <dalek> rakudo/nom: c549267 | lizmat++ | src/core/Str.pm:

[10:56] <dalek> rakudo/nom: Pass on Str.Numeric failures in Str.Int|Num

[10:56] <dalek> rakudo/nom:

[10:56] <dalek> rakudo/nom: Re-imagined PR #822 by salortiz++

[10:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c549267e32

[10:58] <tbrowder> anyone here?

[11:15] * lizmat is somewhat

[11:43] <psch> hrm, a minimal, reduced example of the Java code works

[11:44] <psch> but the URLClassLoader instantiated in BootJavaInterop doesn't find the class, even though the path and classname are both correct

[11:45] <psch> and i have no idea what's going on :|

[12:15] <nine> psch: where do you find a call to file-for-spec?

[12:15] <psch> nine: it's in World.do_pragma iirc?

[12:15] <psch> nine: part of the Actions for statement_mod:<use>

[12:15] <nine> nope?

[12:16] <nine> PrecompilationRepository and Backtrace are the only classes containing calls

[12:17] <psch> ah, right, it was repository-for-spec

[12:17] <psch> or, well, *is*

[12:17] <psch> not sure what i saw earlier

[12:18] <psch> so, yeah, apparently i was mistaken on some level

[12:18] <psch> still no idea what's happening, which might be related :P

[12:18] <nine> psch: yes. repository-for-spec takes the 'java#/path/to/jar' and should give you a CompUnit::Repository::Java.new(:prefix</path/to/jar>)

[12:19] <nine> spec is always such a string with parts joined by #

[12:20] <psch> $ ./perl6-j -I. -e'use lib q[java#.]; say $*REPO[0]'

[12:20] <psch> java#

[12:20] <psch> that really confuses me, fwiw

[12:20] <psch> $ ./perl6-j -I. -e'use lib q[java#.]; say $*REPO[0].perl;'

[12:20] <psch> CompUnit::Repository::Java.new("/home/psch/rakudo/rakudo/install/bin")

[12:20] <psch> i mean, yeah, the prefix is there, but..?

[12:21] <nine> psch: can you past Repository::Java somewhere?

[12:22] <nine> s/past/paste/

[12:23] <psch> https://gist.github.com/peschwa/9f3236e85041550a5bacda6bc4752cab

[12:23] <psch> i mean, the path still arrives in BootJavaInterop, so i don't know if that really matters

[12:23] <psch> well, except from a "it'd be nice if users knew what's going on" perspective

[12:23] <nine> psch: your method path-spec returns just 'java#' so that's what you get :)

[12:24] <nine> Just remove that, it's provided by Locally

[12:24] <psch> i *think* i copied that from ::Perl5 :P

[12:24] <psch> few weeks ago though, so w/e

[12:24] <nine> psch: yep, there it's on purpose since Perl 5 handles all the path stuff

[12:24] <psch> yeah, that's fundamentally different between p5 and jvm interop

[12:43] <dalek> rakudo/nom: f34953b | lizmat++ | src/core/ (2 files):

[12:43] <dalek> rakudo/nom: Streamline chop()/.chop()

[12:43] <dalek> rakudo/nom:

[12:43] <dalek> rakudo/nom: - .chop(N) about 20% faster

[12:43] <dalek> rakudo/nom: - .chop about 3.5x faster

[12:43] <dalek> rakudo/nom: - use MMD for fast-pathing .chop

[12:43] <dalek> rakudo/nom: - no longer create native str copy, we have $!value, duh!

[12:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f34953b464

[13:27] <Zoffix> sortiz++ # tests

[13:39] <dalek> rakudo/nom: 89470a6 | lizmat++ | src/core/ (2 files):

[13:39] <dalek> rakudo/nom: Make Str.chomp about 20% faster

[13:39] <dalek> rakudo/nom:

[13:39] <dalek> rakudo/nom: - don't unbox a copy of the string, we have $!value

[13:39] <dalek> rakudo/nom: - be smarter about the cutoff condition

[13:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/89470a6a63

[13:41] <Zoffix> :o

[13:43] <dalek> nqp: c054305 | (Daniel Green)++ | src/vm/jvm/ (2 files):

[13:43] <dalek> nqp: Speed up nqp::x by ~20% for large values of count on the JVM

[13:43] <dalek> nqp:

[13:43] <dalek> nqp: Do this by setting the StringBuilder's initial capacity since we can calculate the expected value. Also throw an exception for negative values of count to match nqp-m's behavior.

[13:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c054305427

[13:43] <dalek> nqp: 5dc9350 | lizmat++ | src/vm/jvm/ (2 files):

[13:43] <dalek> nqp: Merge pull request #294 from MasterDuke17/Ops.java_optimizations

[13:43] <dalek> nqp:

[13:43] <dalek> nqp: Speed up nqp::x by ~20% for large values of count on the JVM

[13:43] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5dc9350128

[13:49] <Zoffix> .ask masak should this be closed based on liz's comments or should there be more discussion? https://rt.perl.org/Ticket/Display.html?id=127789#ticket-history

[13:49] <yoleaux2> Zoffix: I'll pass your message to masak.

[14:11] <Zoffix> m: ('az'…'bb').join(' ').say

[14:11] <camelia> rakudo-moar 89470a: OUTPUT«az ay ax aw av au at as ar aq ap ao an am al ak aj ai ah ag af ae ad ac ab bz by bx bw bv bu bt bs br bq bp bo bn bm bl bk bj bi bh bg bf be bd bc bb␤»

[14:11] <Zoffix> m: ('az'..'bb').join(' ').say

[14:11] <camelia> rakudo-moar 89470a: OUTPUT«az ay ax aw av au at as ar aq ap ao an am al ak aj ai ah ag af ae ad ac ab bz by bx bw bv bu bt bs br bq bp bo bn bm bl bk bj bi bh bg bf be bd bc bb␤»

[14:11] <Zoffix> I kinda expected at least one of them DTRT (RTed at https://rt.perl.org/Ticket/Display.html?id=127753#ticket-history )

[14:14] <psch> arguably the bug is that .. does anything at all

[14:14] <psch> m: say "aa".succ

[14:14] <camelia> rakudo-moar 89470a: OUTPUT«ab␤»

[14:14] <Zoffix> m: say "az".succ

[14:14] <camelia> rakudo-moar 89470a: OUTPUT«ba␤»

[14:14] <psch> but "aa".."bb" is ("a".."b") Z ("a".."b") or somesuch

[14:14] <psch> err, that's ... in all cases

[14:15] <psch> m: say ("az", *.succ ... "bb").join: " "

[14:15] <camelia> rakudo-moar 89470a: OUTPUT«az ba bb␤»

[14:17] <Zoffix> It's kinda LTA even if there is a way to do it with *.succ. I can't recall any time I needed the current behaviour, but I did use the *.succ version. And Perl 5 does it sanely too: perl -E 'say join " ", "az" .. "bb"'

[14:17] <Zoffix> az ba bb

[14:18] <Zoffix> In other words, the current behaviour doesn't represent a range in my eyes

[14:20] <psch> m: say (10..1).WHAT

[14:20] <camelia> rakudo-moar 89470a: OUTPUT«(Range)␤»

[14:22] <psch> ...there was quite a long discussion about this somewhen in the past, but i don't remember whether that was here or in #perl6

[14:22] <psch> m: say ('a7'..'b2').join: ' '

[14:22] <camelia> rakudo-moar 89470a: OUTPUT«a7 a6 a5 a4 a3 a2 b7 b6 b5 b4 b3 b2␤»

[14:22] <psch> but afair that discussion, that one is fully on purpose

[14:23] <psch> it's possible that 'az'..'bb' accidentally falls into the same logic and shouldn't, but i don't know

[14:28] <Zoffix> It's pretty ironic that in Perl 6 generating the fibonacci sequence needs less code than a range from two strings.

[14:28] <psch> ...but what 'az'..'bb' returns is a Range?

[14:29] <psch> sure, it goes backwards, and whether that's right or wrong is why the ticket exists

[14:30] <Zoffix> It's a range from individual characters of the strings

[14:30] <Zoffix> Not strings

[14:30] <psch> m: say ("az"..."bb")[1]

[14:30] <camelia> rakudo-moar 89470a: OUTPUT«ay␤»

[14:32] <nine> I worry a bit that optimizations like "Speed up nqp::x by ~20% for large values of count" can regress other cases (without having looked at this one specifically). We do write regression tests for functionality, yet we don't similarily collect benchmarks with all this optimization work. Even though the benchmarks are obviously being written.

[14:40] <lizmat> nine: your worry is heard...

[14:40] <lizmat> fwiw, atm it's more important to me at least, to get more people involved in rakudo, and on the JVM backend specifically  :-)

[14:41] <lizmat> a quick merge of a PR helps in that respect, I think

[14:41] <nine> Oh yeah, I'm absolutely with you there.

[14:50] <MasterDuke> nine: at least in this case i did run some benchmarks with small values of count both before and after, no noticeable difference

[14:50] <nine> MasterDuke: thanks :)

[14:51] <nine> MasterDuke: I guess the main message was that I hate to see all those benchmarks thrown away after a commit when they could still be useful.

[14:51] <lizmat> nine: also, I see people that do PR's as potential committers:

[14:51] <lizmat> so, if a committer breaks code, this is much more visible immediately

[14:52] <lizmat> a PR submitter will need to get used to that, the sooner the better  :-)

[14:53] <nine> Yep, I do believe that a liberal commit access policy leads to contributors just taking responsibility sooner. Even if we suffer the occasional regression in  the process.

[14:53] <nine> Heck I'm currently trying to fix a regression of my own ;0

[14:53] <lizmat> :-)

[14:58] <lucasb> re this recent ticket about s/// inside argument lists, I think it's not specific to s///

[14:58] <lucasb> it's not possible to use 'and'/'or' inside argument lists because of some precedence detail

[14:59] <lucasb> m: sub f {}; f(1 or 2)

[14:59] <camelia> rakudo-moar 89470a: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' ␤at <tmp>:1␤------> sub f {}; f(1⏏ or 2)␤    expecting any of:␤        infix␤        infix stopper␤»

[14:59] <psch> m: sub f {}; f( (1 or 2) )

[14:59] <camelia> rakudo-moar 89470a: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:59] <psch> m: sub f {$^a}; f( (1 or 2) )

[14:59] <camelia> rakudo-moar 89470a: ( no output )

[15:00] <psch> m: say "hi" or die "foo";

[15:00] <camelia> rakudo-moar 89470a: OUTPUT«hi␤»

[15:00] <psch> m: Nil or die "foo";

[15:00] <camelia> rakudo-moar 89470a: OUTPUT«foo␤  in block <unit> at <tmp> line 1␤␤»

[15:01] <psch> i think all of these are perfectly reasonable

[15:02] <dalek> rakudo/nom: 140c422 | lizmat++ | src/core/List.pm:

[15:02] <dalek> rakudo/nom: Make Reifier.reify-at-least about 30% faster

[15:02] <dalek> rakudo/nom:

[15:02] <dalek> rakudo/nom: - rewrite in NQP, so no scopes needed

[15:02] <dalek> rakudo/nom:

[15:02] <dalek> rakudo/nom: Still would be nice to figure out why this method is not getting JITted

[15:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/140c4228c0

[15:02] <lucasb> psch: yes, I agree

[15:02] <psch> but i'm also frequently wrong, so having invocation parenthesis do a similar expr-grouping as, well, grouping parenthesis do might be a good idea

[15:03] <lucasb> Zoffix: ^^^ (about ticket #128589)

[15:03] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128589

[15:03] <Zoffix> psch, you mean sub f {}; f(1 or 2) crashing is reasonable?

[15:03] <timotimo> lizmat: you can MVM_JIT_LOG and grep for reify-at-least, then find the line that says "BAIL"

[15:03] <psch> Zoffix: yes, to me "or" always drops to statement precedence, invocation parenthesis notwithstanding - as they are optional

[15:04] <psch> m: sub ($) { }(1 if 0) # same here

[15:04] <camelia> rakudo-moar 89470a: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Unable to parse expression in argument list; couldn't find final ')' ␤at <tmp>:1␤------> sub ($) { }(1 if⏏ 0) # same here␤»

[15:04] <jnthn> Yes, I'd expect `or` inside of an argument list to need extra parens, because it's too low precedence.

[15:04] <yoleaux2> 9 Jul 2016 03:32Z <Zoffix> jnthn: are you able to comment on this ticket? The proposal is to use multi-dispatch instead of separate subs to be consistent with other subs in Test.pm6 and liz's comments suggest I should ask your opinion: https://rt.perl.org/Ticket/Display.html?id=128418#ticket-history

[15:04] <Zoffix> That's pretty crazy, but OK, I'll reject the ticket.

[15:05] <jnthn> m: sub f {}; f(1 || 2)

[15:05] <camelia> rakudo-moar 89470a: OUTPUT«Too many positionals passed; expected 0 arguments but got 1␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:05] <jnthn> m: sub f($a) {}; f(1 || 2)

[15:05] <camelia> rakudo-moar 89470a: ( no output )

[15:05] <jnthn> Use ||

[15:05] <jnthn> If || and or were the same thing there'd be no point having both of them :P

[15:09] <lizmat> timotimo: I can't seem to find a BAIL associated with reaify-at-least

[15:09] <lizmat> timotimo: the log is here: https://gist.github.com/lizmat/514f34124ee677db3bafae972789e078

[15:09] <lizmat> timotimo: am I missing something ?

[15:11] <timotimo> the method gets jitted, but if you don't see it jitted in the profile or whatever, then that means something else is b0rked

[15:12] <lizmat> aha!  well, it is yellow in the profile

[15:13] <lizmat> that means it isn't JITted, right ?

[15:14] <lizmat> timotimo: what does "BAIL: op <param_rp_o>" mean ?

[15:15] <timotimo> that's one of the ops we can't jit

[15:16] <timotimo> we'll require a rewrite of argument handling for that to be possible, if i understand correctly?

[15:16] <timotimo> param_* are some of the most common bail reasons

[15:17] <lizmat> sub a(*@a) I guess ?

[15:17] <lizmat> any slurpu

[15:18] <lizmat> *slurpy

[15:18] <lucasb> For the RT people, can I suggest that tickets #128390 and #127224 should be merged into one?

[15:18] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128390

[15:18] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127224

[15:19] <timotimo> "required positional"

[15:19] <timotimo> sp_o is slurpy positional, iirc

[15:22] <nine> lucasb: merged

[15:22] <lucasb> nine: thanks!

[15:48] <dalek> rakudo/nom: 320efdf | lizmat++ | src/core/List.pm:

[15:48] <dalek> rakudo/nom: Make Reifier.reify-until-lazy about 20% faster

[15:48] <dalek> rakudo/nom:

[15:48] <dalek> rakudo/nom: - rewrite in NQP, so no scopes needed

[15:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/320efdff6c

[16:01] <dalek> rakudo/nom: 2ad3239 | lizmat++ | src/core/List.pm:

[16:01] <dalek> rakudo/nom: Make Reifier.reify-all about 20% faster

[16:01] <dalek> rakudo/nom:

[16:01] <dalek> rakudo/nom: - rewrite in NQP, so no scopes needed

[16:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2ad32393e2

[16:04] <lizmat> afk&

[17:21] <MasterDuke> nine: re benchmarking, you might find this interesting, http://irclog.perlgeek.de/perl6-dev/2016-07-09#i_12812777

[17:23] <nine> indeed!

[17:25] <MasterDuke> you obviously need a bunch of rakudos built for it to be usefull, but luckily AlexDaniel has that for the bisectbot already

[17:30] <AlexDaniel> MasterDuke: so right now I'm waiting for github staff to enable my another account for committable and other bots

[17:30] <MasterDuke> sure, no prob

[17:30] <AlexDaniel> MasterDuke: my idea is that instead of taking the first part of the output (as camelia does right now), committable should gist it and give a link to that

[17:31] <Zoffix> Is one no longer seems to happen. Can we close it without tests? https://rt.perl.org/Ticket/Display.html?id=127700#ticket-history

[17:31] <Zoffix> s/Is/This/;

[17:31] <MasterDuke> AlexDaniel: you think always, or only if the output is over a certain length?

[17:32] <AlexDaniel> MasterDuke: only for very long output

[17:32] <MasterDuke> good idea

[17:32] <AlexDaniel> I already have some code for it so just waiting for the account. Once committable works with that, I think we will be able to use the same thing for benchable

[17:32] <AlexDaniel> cool thing about github gists is that you can have multiple files

[17:33] <AlexDaniel> so we can have an svg graph, log and whatever we need at the same time :)

[17:33] <MasterDuke> seems like it might start to be the time to refactor out some common code between the three bots?

[17:33] <AlexDaniel> yeah… definitely!

[17:43] <AlexDaniel> MasterDuke: wanna try it?

[17:54] <MasterDukeLaptop> AlexDaniel: i'll start playing around (oops, accidentally tranfered the conversation to #perl6)

[18:07] <nine> Zoffix: I'm leaning towards just closing as it's unclear where the bug actually was and it would be very difficult to write it in a way that will end in ok/not ok

[18:07] <nine> or even ok/segfault

[18:40] <Zoffix> Closed. Thanks.

[19:27] <Zoffix> How can I find the rakudo version based on the "Rakudo version 2016.02-136-g412d9a4 built on MoarVM version 2016.02-25-gada3752"? Nothing comes up for https://github.com/rakudo/rakudo/commit/412d9a4

[19:28] <Zoffix> even though that worked for some other versions

[20:20] <dalek> rakudo/nom: a02fdbe | lizmat++ | src/core/Code.pm:

[20:20] <dalek> rakudo/nom: Make Code.arity|count 2x as fast

[20:20] <dalek> rakudo/nom:

[20:20] <dalek> rakudo/nom: It's just that these are called for every iteration / meta op / etc.

[20:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a02fdbe2d9

[20:51] <Zoffix> m: 'foo' . rand

[20:51] <camelia> rakudo-moar a02fdb: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏foo' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[20:52] <Zoffix> m: 42 . rand

[20:52] <camelia> rakudo-moar a02fdb: ( no output )

[20:52] <Zoffix> m: 42 . rand.say

[20:52] <camelia> rakudo-moar a02fdb: OUTPUT«18.8111874611344␤»

[20:52] <Zoffix> I see.

[20:52] <Zoffix> (my error was using `.` as concat)

[20:55] <[Tux]> This is Rakudo version 2016.06-221-ga02fdbe built on MoarVM version 2016.06-9-g8fc21d5

[20:55] <[Tux]> test            16.330

[20:55] <[Tux]> test-t           9.096

[20:55] <[Tux]> csv-parser      16.611

[20:55] <[Tux]> (in MET still on time for today :)

[20:55] <lizmat> :-)

[20:55] <AlexDaniel> so close

[20:56] <dalek> roast: cf752f7 | (Zoffix Znet)++ | S19-command-line/repl.t:

[20:56] <dalek> roast: -I dir shows up in REPL

[20:56] <dalek> roast:

[20:56] <dalek> roast: RT#127695

[20:56] <dalek> roast: review: https://github.com/perl6/roast/commit/cf752f70df

[20:56] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127695

[21:14] <dalek> roast: 09755fb | (Zoffix Znet)++ | S19-command-line/repl.t:

[21:14] <dalek> roast: Clean up after test

[21:14] <dalek> roast: review: https://github.com/perl6/roast/commit/09755fb0f7

[21:40] <Zoffix> .ask skids What's EnumMap on this ticket? I no longer see it on the ecosystem: https://rt.perl.org/Ticket/Display.html?id=127686#ticket-history

[21:40] <yoleaux2> Zoffix: I'll pass your message to skids.

[21:41] <skids> Zoffix: Map used to be named EnumMap.

[21:41] <yoleaux2> 21:40Z <Zoffix> skids: What's EnumMap on this ticket? I no longer see it on the ecosystem: https://rt.perl.org/Ticket/Display.html?id=127686#ticket-history

[21:41] <lizmat> Zoffix: I think EnumMap was a previous incarnation of Map ?

[21:41] <lizmat> Zoffix: and as such a builtin

[21:48] <Zoffix> So the ticket can be closed now?

[21:48] <Zoffix> m: class a { has Map $.f = Map.new() }; my $f = a.new(); $f.f.perl.say; $f.f = :a1, :b2; $f.f.perl.say

[21:48] <camelia> rakudo-moar a02fdb: OUTPUT«Map.new(())␤Map.new((:a1,:b2))␤»

[21:49] <Zoffix> Do we need tests? (Using Map instead of EnumMap)

[22:40] <dalek> rakudo/nom: de5d9e7 | lizmat++ | src/core/List.pm:

[22:40] <dalek> rakudo/nom: Re-imagine List.from-slurpy-flat

[22:40] <dalek> rakudo/nom:

[22:40] <dalek> rakudo/nom: It struck me that if a sub has a slurpy array, and the values specified

[22:40] <dalek> rakudo/nom: are all simple scalars without any additional Slippy/Iterable functionality,

[22:40] <dalek> rakudo/nom: that the $!future created (which is the $!todo of the List/Array to be)

[22:40] <dalek> rakudo/nom: is in fact already what $!reified will be in the end.  So in that case

[22:40] <dalek> rakudo/nom: we can just put the $!future into $!reified, and we're done:

[22:40] <dalek> rakudo/nom:

[22:40] <dalek> rakudo/nom:   sub a(*@a) { }; a(1,2,3,4);

[22:40] <dalek> rakudo/nom:

[22:40] <dalek> rakudo/nom: sees an improvement of 30% compared to a(), and 3 allocations less.

[22:40] <dalek> rakudo/nom:

[22:40] <dalek> rakudo/nom: This spectests clean.  But this is the area of dragons, so there may

[22:41] <lizmat> sorry dalek:

[22:41] <lizmat> https://github.com/rakudo/rakudo/commit/de5d9e7

[22:42] <lizmat> and with this I wish #perl6-dev a good night!

[22:42] <Zoffix> night

[22:53] <Zoffix> nm my question.

[23:56] <b2gills> bisect: Promise.in(1).then({exit 1}); say (0..10).rotor(1,2 xx *);

[23:56] <bisectable> b2gills: on both starting points the exit code is 1 and the output is identical as well

[23:57] <AlexDaniel> m: Promise.in(1).then({exit 1}); say (0..10).rotor(1,2 xx *);

[23:57] <camelia> rakudo-moar de5d9e: ( no output )

[23:58] <AlexDaniel> committable: 2015.10 Promise.in(1).then({exit 1}); say (0..10).rotor(1,2 xx *);

[23:58] <committable> AlexDaniel: ｢exit=1｣

[23:59] <b2gills> I think something isn't treating the 2 xx * as lazy

[23:59] <b2gills> m: Promise.in(1).then({exit 1}); say (0..10).rotor(1,2 xx 1000);

[23:59] <camelia> rakudo-moar de5d9e: OUTPUT«((0) (1 2) (3 4) (5 6) (7 8) (9 10))␤»
