[00:15] <Zoffix__> /nick Zoffix\

[00:15] <Zoffix__> /nick Zoffix

[02:49] <Guest47408> help

[02:49] <Guest47408> !help

[02:49] <Guest47408> :|

[02:50] <Guest47408> !test test

[02:50] <Guest47408> !help

[02:50] <ShimmerFairy> Guest47408: what do you need help for?

[02:50] <Guest47408> i don't really need help i just wanna view commands

[02:50] <Guest47408> in other IRC rooms !help get's you a list of commands

[02:50] <Guest47408> *sometimes

[02:50] <Guest47408> *gets

[02:51] <ShimmerFairy> We don't have a bot that offers services like that. We just have the Perl 6 evaluation bot, and then a couple others for reporting on various dev-related things.

[02:51] <ShimmerFairy> m: say "Hello, Guest47408, this Rakudo on MoarVM!"

[02:51] <camelia> rakudo-moar 668dc5: OUTPUT«Hello, Guest47408, this Rakudo on MoarVM!␤»

[02:51] <Guest47408> ah i see

[02:51] <ShimmerFairy> *this is    (oops :P)

[02:52] <Guest47408> so how do i go about registering my username?

[02:52] <Guest47408> !nick Gh0st

[02:52] <Guest47408> :\

[02:53] <geekosaur> /msg nickserv help

[02:53] <ShimmerFairy> Guest47408: that's something you do via the 'nickserv' service, which is a freenode-wide thing. (try to message nickserv with something like  /msg nickserv help  )

[02:53] <Guest47408> sweet thanks shimmerfairy

[02:54] <Guest47408> REGISTER

[02:55] <ShimmerFairy> Guest47408: if you can, I'd recommend opening a separate window with nickserv (e.g. /query nickserv I believe). That way you don't risk accidentally typing passwords and such into a chat window :)

[02:55] <Guest47408> :)

[07:51] <TheLemonMan> 'morning

[07:51] <yoleaux2> 20 Aug 2016 16:16Z <pmurias> TheLemonMan: the protected block *is* always generated as if it's result was gonna be used

[07:52] <TheLemonMan> RT#125181 can be closed as a proper error message is now shown

[07:53] <TheLemonMan> RT#127012 can also be closed as the problem has has been fixed in moarvm

[08:33] <dalek> roast/6.c-errata: 8d57b03 | jnthn++ | S17-lowlevel/lock.t:

[08:33] <dalek> roast/6.c-errata: Correct test that did unprotected array writes.

[08:33] <dalek> roast/6.c-errata:

[08:33] <dalek> roast/6.c-errata: It's only safe to grab an *already vivified* element of an array and

[08:33] <dalek> roast/6.c-errata: write to it in a cross-thread way. Since @out's elements were never

[08:33] <dalek> roast/6.c-errata: vivified, this led to concurrent binds - and thus resizes - to the

[08:33] <dalek> roast/6.c-errata: array, and thus incorrect results and crashes.

[08:33] <dalek> roast/6.c-errata:

[08:33] <dalek> roast/6.c-errata: The SEGV that sometimes happened needs addressing too; that already

[08:33] <dalek> roast/6.c-errata: has an RT issue and will be covered by another test that actually

[08:33] <dalek> roast/6.c-errata: wants to create that condition, rather than this one which did it by

[08:33] <dalek> roast/6.c-errata: accident.

[08:35] <nine> Zoffix: cherry-picked jnthn++'s fix for lock.t in 6.c-errata

[09:07] <lizmat> hmmm.... I just had t/spec/S05-substitution/subst.t test 180 ("code in replacement part of s/// has correct scoping") flap on me as part of spectest

[09:08] <lizmat> actually, it seems to flap for me about 20% of the time when run by itself  :-(

[09:08] <lizmat> commute&

[09:26] <pmurias> jnthn: it was needed when a lexical was compiled down to a register

[09:27] <pmurias> jnthn: so if the last thing in the protected part of a try was a lexical stored in a register, it was getting overwriten

[10:30] <pmurias> jnthn: I fixed the leak

[10:30] <dalek> nqp: 4dcc311 | (Pawel Murias)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp:

[10:30] <dalek> nqp: Avoid register leak.

[10:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4dcc311077

[12:41] <Zoffix> Nice. 40 comments on HackerNews https://news.ycombinator.com/item?id=12328885  "Always wondered how coding in Perl is, guess I will have some fun with it tomorrow :)"

[12:47] <timotimo> Zoffix: my perl6-and-stuff search lane in tweetdeck is full of tweets about your post. that's pretty good :)

[12:47] <Zoffix> :)

[12:48] <masak> Zoffix++ # blog post

[12:48] <timotimo> multiple screen-pages full

[12:48] <Zoffix> I marked as testsneeded the two tickets TheLemonMan mentioned as closable

[13:02] <nwc10> Zoffix++ # working to make the flesh creatures obsolete :-)

[13:02] <Zoffix> :)

[13:02] <Zoffix> nwc10++ spotting what went wrong right away

[13:09] <mst> Zoffix: ... so you ended up *not* replacing the tag like I suggested :(

[13:10] <mst> the whole point of 'outweigh the risks' was because inevitably some crusty greybeard was going to yell about published history

[13:10] <mst> but then you went to #git which is all greybeard all the time

[13:10] <mst> and listened to the wrong answer

[13:10] <mst> oh well

[13:13] <masak> fow what it's worth, I don't think I'd have replaced a published tag, either

[13:13] <Zoffix> I didn't know he was a greybeard... I should've asked him to teach me some Thu'um :P

[13:15] <Zoffix> mst, well, the manpage for the tool called that 'the insane approach' and this was right after I sent a release announcement to—hopefully—an umptillion people. I didn't want to make matters worse

[13:16] <mst> I would've replaced it as shortly after a release as possible

[13:16] <mst> since annoying a few people -today-

[13:16] <mst> beats the fact that there's now a steaming turd in published history which is going to emit maggots over people for years

[13:17] <mst> then again, my release tooling also leaves pushing the tag to origin to the *last* step - it uploads to cpan first even

[13:17] <mst> specifically to avoid ever needing to make this decision

[13:18] <mst> masak: hard rules are for deontologists and virtue ethicists; I prefer to use consequentialist reasoning for such choices :D

[13:24] <Zoffix> After a 20-minute run in a loop, t/spec/S05-substitution/subst.t finally failed for me. So I don't get the 20% of the time like lizmat, but there's something wrong: https://gist.github.com/zoffixznet/09d3d3d58fe2d976ee4d172dd18df3af

[13:25] <Zoffix> jnthn, FWIW ^ that's the s/// block scoping that you fixed a couple of days ago. RT#128809

[13:25] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128809

[13:33] <masak> mst: I think the chances of anyone going for the bad tag are low in the first place. since I don't see the old tag mattering much, I prefer not to overwrite published history. does that qualify as consequentialist reasoning?

[13:34] <mst> masak: nope, you've hidden the non-consequentialst part behind "I prefer not"

[13:34] <mst> unless you're attempting to make a case via preference utilitarianism

[13:35] <masak> I have no idea if that's what I'm attempting

[13:35] <mst> but then I suspect your preferences are still outweight by the people who prefer normal looking bisect results etc.

[13:36] <masak> that... may be a good point, yes

[13:36] <mst> in general, I find tweaking published history now to be somewhat analgoisable to a sharp pain in your foot

[13:36] <mst> whereas a botched tag becomes a dust speck that homes in on would be contributors eyes forever

[13:37] <mst> and also requires developer time every so often to explain -why- there's an odd tag there or whatever

[13:37] <mst> since you can't attach an explanation without also altering published history

[13:37] <mst> (or at least, I have not found such a way anybody ever notices)

[13:38] <masak> *nod*

[13:39] <masak> I've certainly gone from being very wary about using `push --force` to using it several times per week

[13:39] <[TuxCM]> his is Rakudo version 2016.08.1-3-g668dc5c built on MoarVM version 2016.08

[13:39] <[TuxCM]> csv-ip5xs       10.056

[13:39] <[TuxCM]> test            15.436

[13:39] <[TuxCM]> test-t           7.311

[13:39] <[TuxCM]> csv-parser      16.169

[13:40] <mst> really though, the key take away here is "tag and push the tags last, after you've done everything else"

[13:40] <nine> I use it several times per hour when developing ;) But that's because I develop in branches that I'm quite sure noone else is working on at the same time.

[13:40] <mst> Zoffix: ^^ and that take away is actionable for your code :)

[14:01] <MasterDuke> has anyone had a problem with temp files created by File::Temp disappearing earlier than they should?

[14:01] <yoleaux2> 19 Aug 2016 12:49Z <unmatched}> MasterDuke: would you add yourself to https://github.com/rakudo/rakudo/blob/nom/CREDITS so the entiry shows up as you like in release announcement, please?

[14:13] <nine> jnthn: moarvm.org lists 2016.07 as the lastest

[14:40] <Zoffix> Now after an hour run, t/spec/S05-substitution/subst.t's 's/// has correct scoping' test failed again, this time with a segfault: https://gist.github.com/zoffixznet/8b9f2ea3b1a03c5559aa1de6a1b1a939

[15:59] <timotimo> Zoffix: seeing about a thousand people proclaim "i botched a perl 6 release" on twitter ... seems really weird

[16:00] <timotimo> it's like they all stand in support of zoffix

[16:00] <timotimo> "i, too, botched a perl 6 release"

[16:16] <b2gills> I agree with mst, it would have been better to fix the tag as soon as humanly possible. I think it might still be better to fix it than leave it

[16:17] <b2gills> I would have also created a new tag like what was done

[16:19] <Zoffix> thousand people... :S

[16:24] <b2gills> There are two groups of people, those who already pulled that tag, and those who didn't. Those who pulled already have the wrong one. fixing it wouldn't matter much to them anyway. Fixing it would matter to those who don't have it yet

[18:50] * unmatched} dissapears for a couple of weeks

[18:51] <unmatched}> Can be reached via twitter if needed

[20:19] <mst> WTF

[20:19] <mst> nqp --show-config gives me the moar prefix

[20:19] <mst> but not the nqp one

[20:44] <mst> MUHAHAHAHAHAHAHAHA I think I might have rakudo building

[20:50] <pmurias> mst++ # working on the build system which is something I don't want to touch with a ten foot pole

[20:51] <mst> my ten foot pole is specially sharpened

[20:53] <mst> note this is a hack that will then get backported in parts to master later

[20:53] <geekosaur> hopefully also integrated, and with catch-guards integrated (consider what you need to kill a wild boar without it being reciprocal)

[20:56] <mst> the -I stuff was just Makefile.in hackery

[20:56] <mst> moar --libpath options are more complicated

[20:57] <mst> but I can hack that easily enough

[20:58] <mst> BUT IT FUCKING BUILT

[21:02] <arnsholt> All hail mst! Tamer of build systems and wrangler of code =)

[21:03] <mst> assuming a single --libpath passed to moar was the nasty bit

[21:03] <mst> BUT create-moar-runner.pl actually knows how to do it right

[21:05] <mst> I'll just have to feed it better options

[21:06] <mst> however, that's enough for one day, will fix the remainder tomorrow before packing up to fly :)

[22:34] <MasterDuke> is there a way to trigger a GC run?

[22:41] <jdv79> i think there might be an nqp op

[22:42] <MasterDuke> hmm, nothing in the ops doc about it

[22:43] <jdv79> idk.  maybe im wrong or its not doc'd?

[22:44] <MasterDuke> but that does sound familiar, maybe it exists, but (deliberately?) undocced?

[22:44] * jdv79 is on a "phone" so cant be of any more help:(

[22:50] <MasterDuke> m: use nqp; nqp::force_gc()

[22:50] <camelia> rakudo-moar 668dc5: ( no output )
