[00:02] <timotimo> gnite lizmat :)

[00:18] <[Coke]> TimToady: you have any feedback on .cow? 6.c? 6.d?

[00:20] <travis-ci> Rakudo build errored. Jonathan Worthington 'Bump to a MoarVM with improved multi-cache.

[00:20] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/141067064 https://github.com/rakudo/rakudo/compare/8ab6dbe530e1...d5c750f74cd4

[06:44] <travis-ci> Rakudo build errored. Stefan Seifert 'Merge branch 'ugexe-dist-interface' into nom

[06:44] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/141153445 https://github.com/rakudo/rakudo/compare/90d407285930...f43e3ee4707d

[06:51] <nine> Build failures seem to be a failed download of perl 5.14 on a worker

[06:51] <nine> Nothing to worry about

[07:28] <[Tux]> This is Rakudo version 2016.06-75-g75b37ee built on MoarVM version 2016.06-9-g8fc21d5

[07:28] <[Tux]> test            16.189

[07:28] <[Tux]> test-t           9.307

[07:28] <[Tux]> csv-parser      17.922

[07:48] <lizmat> [Tux]: isn't this faster than ever before ?

[07:51] <[Tux]> 2016-06-13 17:58:14 test-t 9.356

[07:51] <[Tux]> 2016-06-19 09:49:22 test-t 9.365

[07:51] <[Tux]> 2016-06-30 09:26:57 test-t 9.307

[07:51] <[Tux]> yes, it is

[07:52] <lizmat> cool, I guess that's jnthn multi-cache at work

[08:13] <dalek> rakudo/nom: 15c85ac | lizmat++ | src/core/Baggy.pm:

[08:13] <dalek> rakudo/nom: Make ROLLPICKGRABN also a private method

[08:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/15c85ac074

[08:17] <dalek> rakudo/nom: 0888353 | lizmat++ | src/core/Baggy.pm:

[08:17] <dalek> rakudo/nom: ROLLPICKGRAB1 is same as .roll, so make it that

[08:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0888353092

[09:03] <jnthn> I think MoarVM HEAD *is* what MOAR_REVISION points to right now, fwiw

[10:21] <lizmat> jnthn: sometimes I wonder whether we should allow *%h! as a parameter to indicate *any* named parameter

[10:21] <lizmat> (note the ! )

[10:22] <jnthn> Hmm, I wondered a little how we'd even compile that... :)

[10:23] <lizmat> well, it would have to be the last candidate I guess

[10:23] <jnthn> Also, if it's valid already today

[10:23] <jnthn> m: sub foo(*%h!) { }

[10:23] <camelia> rakudo-moar 088835: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Malformed parameter␤at <tmp>:1␤------> sub foo(*%h⏏!) { }␤    expecting any of:␤        constraint␤»

[10:23] <jnthn> m: sub foo(%h!) { }

[10:23] <camelia> rakudo-moar 088835: ( no output )

[10:23] <jnthn> Hm, we don't allow it. Interesting. :)

[10:24] <jnthn> Do you have a use case for it?

[10:24] <lizmat> that would simplify attribute handling for postcircumfix tremendously

[10:24] <psch> am i understanding that correctly as a shorthand (and maybe compile-time?) alternative to '*%h where .keys > 0'?

[10:24] <lizmat> psch: no

[10:24] <lizmat> that would require a hash with keys

[10:25] <lizmat> *%h! would be a catchall for named parameters

[10:25] <jnthn> lizmat: Note that he wrote *%h

[10:25] <psch> lizmat: but a slurpy hash is a catch all named parameters?

[10:25] <psch> +for

[10:25] <lizmat> psch: sorry, must open my eyes or use a larger font  :-)

[10:25] <jnthn> ;-)

[10:26] <jnthn> lizmat: I was figuring that we'd end up with candidates with things like :$exists! though, and then have a *%h for the more complex "you have combinations of things" case

[10:27] <lizmat> m: multi a() {}; multi a(*%h) {}; a

[10:27] <camelia> rakudo-moar 088835: OUTPUT«Ambiguous call to 'a'; these signatures all match:␤:()␤:(*%h)␤  in block <unit> at <tmp> line 1␤␤»

[10:27] <lizmat> psch: ^^^ is the problem

[10:27] <jnthn> Ah...

[10:28] <lizmat> jnthn: yes, that is the plan, but it is impossible now, unless we want to slow down the no args whatsoever case

[10:28] <psch> right, and with the proposed ! that would dispatch to the :() candidate, 'cause we need any named, not no named?

[10:31] <psch> well, i am pretty sure that having slurpy hashes mean at least one named is needed isn't a good idea because it breaks method

[10:31] <jnthn> lizmat: I'm wondering just a bit if we should consider that ambiguous dispatch result a bug, fwiw.

[10:31] <psch> +s

[10:31] <psch> on the other hand i feel like if you put a slurpy you do expect nameds, at least on subs

[10:32] <jnthn> Or find a way to consider the *%h a tie-breaker

[10:33] <lizmat> jnthn: shall I rakudobug it?

[10:34] <psch> m: multi f() { }; multi f(:$) { }; f

[10:34] <camelia> rakudo-moar 088835: ( no output )

[10:34] <psch> m: multi f() { "none" }; multi f(:$) { "anon" }; f.say

[10:34] <camelia> rakudo-moar 088835: OUTPUT«anon␤»

[10:35] <lizmat> that feels weird ?

[10:35] <psch> m: multi f() { "none" }; multi f(:$a) { "anon" }; f.say # it's not because it's a nameless named

[10:35] <camelia> rakudo-moar 088835: OUTPUT«anon␤»

[10:36] <lizmat> m: multi f(:$a) { "none" }; multi f() { "anon" }; f.say   # it's the order

[10:36] <camelia> rakudo-moar 088835: OUTPUT«none␤»

[10:36] <psch> right, they're equivalent without the named present

[10:36] <lizmat> huh?

[10:36] <lizmat> no it's not

[10:36] <psch> oh, no, they aren't

[10:36] <lizmat> m: multi f(:$a) { "named" }; multi f() { "none" }; f.say   # it's the order

[10:36] <camelia> rakudo-moar 088835: OUTPUT«named␤»

[10:36] <psch> yeah, didn't see you didn't change the retval

[10:36] <jnthn> Oh...right, 'cus it comes under tie-breaker rules

[10:37] <jnthn> Yeah, I'll need more time and less distractions than I have right now to think about it :)

[10:37] <lizmat> ok  :-)

[10:40] <jnthn> Talking of distractions...lunch time :)

[10:47] <dalek> rakudo/nom: 50740b5 | lizmat++ | src/core/Rakudo/Internals.pm:

[10:47] <dalek> rakudo/nom: Remove now unused var

[10:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/50740b5efd

[11:20] <dalek> rakudo/nom: 750e57e | lizmat++ | src/core/Rakudo/Internals.pm:

[11:20] <dalek> rakudo/nom: Make iterating an empty Blob use the EmptyIterator

[11:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/750e57ef37

[11:20] <dalek> rakudo/nom: 2f00261 | lizmat++ | src/core/Rakudo/Internals.pm:

[11:20] <dalek> rakudo/nom: Streamline the WhateverIterator

[11:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2f00261f1e

[12:12] <dalek> nqp: a68dcc5 | (Pawel Murias)++ | src/vm/js/ (2 files):

[12:12] <dalek> nqp: [js] Make nqp::say and nqp::print return their arguments.

[12:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a68dcc5cf0

[12:12] <dalek> nqp: 422bb0f | (Pawel Murias)++ | t/nqp/059-nqpop.t:

[12:12] <dalek> nqp: Test the return values of nqp::print and nqp::say.

[12:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/422bb0fb1e

[12:13] <dalek> nqp/optimize-with-hoopl: a82b5b1 | (Pawel Murias)++ | src/vm/js/dataflow-optimizer/optimize.hs:

[12:13] <dalek> nqp/optimize-with-hoopl: WIP

[12:13] <dalek> nqp/optimize-with-hoopl: review: https://github.com/perl6/nqp/commit/a82b5b11cf

[12:13] <dalek> nqp/optimize-with-hoopl: 80e096f | (Pawel Murias)++ | src/vm/js/dataflow-optimizer/optimize.hs:

[12:13] <dalek> nqp/optimize-with-hoopl: Turn nqp::say and nqp::add_i to hoopl graph form.

[12:13] <dalek> nqp/optimize-with-hoopl: review: https://github.com/perl6/nqp/commit/80e096fef0

[12:55] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make Baggy.roll(*) about 2x as fast

[12:55] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/141218521 https://github.com/rakudo/rakudo/compare/750c4e8cafa4...75b37eecd06a

[13:11] <dalek> nqp: a81c50a | (Pawel Murias)++ | src/vm/js/ReturnInfo.nqp:

[13:11] <dalek> nqp: [js] Remove debug message.

[13:11] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a81c50a213

[13:12] <dalek> rakudo/nom: 04f0b22 | lizmat++ | src/core/Rakudo/Internals.pm:

[13:12] <dalek> rakudo/nom: Make DwimIterator about 10% faster

[13:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/04f0b22194

[13:21] <Tux_> Pssst, …

[13:21] <Tux_> This is Rakudo version 2016.06-81-g04f0b22 built on MoarVM version 2016.06-9-g8fc21d5

[13:21] <Tux_> test            15.784

[13:21] <Tux_> test-t           9.171

[13:21] <Tux_> csv-parser      16.857

[13:24] <BrokenRobot> woooo \o/

[13:28] <Tux_> jnthn, lizmat can you have a look at Justin's comments in https://rt.perl.org/Public/Bug/Display.html?id=128184 ?

[13:28] <Tux_> and should I add these lines to the ticket:

[13:28] <Tux_> # expected: Buf.new(61,185,242,97,170,122,52,182,62,236,186,222,213,63,189,203,241,176,1,149,233)

[13:28] <Tux_> #      got: Buf.new(61,185,242,97,170,122,52,182,62,236,186,222,213,63,189,203,241,176,1,149,233,127)

[13:29] <lizmat> yes please

[14:02] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make ROLLPICKGRABN also a private method'

[14:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/141276733 https://github.com/rakudo/rakudo/compare/75b37eecd06a...15c85ac07403

[15:19] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'ROLLPICKGRAB1 is same as .roll, so make it that'

[15:19] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/141277656 https://github.com/rakudo/rakudo/compare/15c85ac07403...088835309257

[15:26] <travis-ci> Rakudo build canceled. Elizabeth Mattijsen 'Remove now unused var'

[15:26] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/141308083 https://github.com/rakudo/rakudo/compare/088835309257...50740b5efdb3

[15:39] <dalek> rakudo/nom: 028299a | niner++ | src/core/CompUnit/Repository/Installation.pm:

[15:39] <dalek> rakudo/nom: Fix multi dispatch fail in backwards compat code

[15:39] <dalek> rakudo/nom:

[15:39] <dalek> rakudo/nom: Need to add the type to the $force flag. Otherwise the samewith call

[15:39] <dalek> rakudo/nom: won't find a candidate when :$force was not supplied.

[15:39] <dalek> rakudo/nom:

[15:39] <dalek> rakudo/nom: Fixes part of the spectest regression in S11-repository/curli-install.t

[15:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/028299a02b

[15:39] <dalek> rakudo/nom: b93043a | niner++ | src/core/Distribution.pm:

[15:39] <dalek> rakudo/nom: Bring back Str() method of back compat Distribution class

[15:39] <dalek> rakudo/nom:

[15:39] <dalek> rakudo/nom: Fixes the remaining regression of S11-repository/curli-install.t

[15:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b93043af78

[15:48] <lizmat> afk&

[16:05] <travis-ci> Rakudo build canceled. Elizabeth Mattijsen 'Streamline the WhateverIterator'

[16:05] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/141314004 https://github.com/rakudo/rakudo/compare/50740b5efdb3...2f00261f1e37

[17:39] <tbrowder> is there an easy way to stringify an unknown object in nqp?

[17:40] <tbrowder> s/object/object type/

[17:42] <travis-ci> Rakudo build passed. Stefan Seifert 'Bring back Str() method of back compat Distribution class

[17:42] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/141375671 https://github.com/rakudo/rakudo/compare/04f0b2219418...b93043af7867

[17:51] <timotimo> tbrowder: there's a nqp::who or nqp::how that'll give you access to what you usually use .^ for, but you'll have to pass the object you're operating on as the first argument to any method on the HOW

[18:04] <tbrowder> timotimo: thanx!

[18:43] <lizmat> nine: re https://github.com/rakudo/rakudo/commit/b93043af78 , I wonder if you could use "is default("")' to make things simpler

[18:44] <lizmat> m: my %h = a => 42; say "%h<a b c>"   # noisy

[18:44] <camelia> rakudo-moar b93043: OUTPUT«Use of uninitialized value %h of type Any in string context␤Any of .^name, .perl, .gist, or .say can stringify undefined things, if needed.  in block <unit> at <tmp> line 1␤Use of uninitialized value %h of type Any in string context␤Any of .^name, .p…»

[18:44] <lizmat> m: my %h is default("") = a => 42; say "%h<a b c>"   # silent

[18:44] <camelia> rakudo-moar b93043: OUTPUT«42  ␤»

[18:57] <nine> Wow, now that's a nice feature!

[18:58] <dalek> rakudo/nom: b7c8528 | lizmat++ | src/core/ (2 files):

[18:58] <dalek> rakudo/nom: Make {}|[]:adverb about 2.5x faster

[18:58] <dalek> rakudo/nom:

[18:58] <dalek> rakudo/nom: Turns out !%other was a very expensive test.  Ideally, I think the

[18:58] <dalek> rakudo/nom: binding of remaining named parameters should be smart enough to not

[18:58] <dalek> rakudo/nom: init $!storage if there are no other named parameters.  Then the

[18:58] <dalek> rakudo/nom: test could be reduced to an even cheaper nqp::attrinited.  Even more

[18:58] <dalek> rakudo/nom: ideal would be, if we could have a *%h! (aka slurpy hash with at least

[18:58] <dalek> rakudo/nom: one named parameter) in a signature.  Then these tests would become

[18:58] <dalek> rakudo/nom: completely obsolete.

[18:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b7c85282dc

[19:01] <BrokenRobot> :o lizmat++

[19:02] <timotimo> nice

[19:16] <vendethiel> lizmat++ :D

[19:43] <dalek> rakudo/nom: 8b85f30 | lizmat++ | src/core/ (2 files):

[19:43] <dalek> rakudo/nom: Fix a few more missing %other tests

[19:43] <dalek> rakudo/nom:

[19:43] <dalek> rakudo/nom: And use the more common '$!storage' format rather than q/$!storage/

[19:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8b85f30ac7

[20:20] <dalek> rakudo/nom: 042e6c4 | lizmat++ | src/core/Buf.pm:

[20:20] <dalek> rakudo/nom: Make Blob|Buf.AT-POS about 2x faster

[20:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/042e6c4e1a

[21:08] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Fix a few more missing %other tests

[21:08] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/141435975 https://github.com/rakudo/rakudo/compare/b7c85282dc7d...8b85f30ac780

[21:32] <dalek> rakudo/nom: 1605bb6 | lizmat++ | src/core/Rakudo/Internals.pm:

[21:32] <dalek> rakudo/nom: Create a RollerIterator method for general usage

[21:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1605bb67af

[21:32] <dalek> rakudo/nom: 9be48ef | lizmat++ | src/core/Baggy.pm:

[21:32] <dalek> rakudo/nom: Remove ROLLPICKGRABW in favor of RollerIterator

[21:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9be48ef8b7

[22:27] <dalek> rakudo/nom: e9019e3 | lizmat++ | src/core/Baggy.pm:

[22:27] <dalek> rakudo/nom: Make Baggy!TOTAL a tiny bit faster

[22:27] <dalek> rakudo/nom:

[22:27] <dalek> rakudo/nom: And also make it handle a bare elements Hash

[22:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e9019e37d3

[22:27] <lizmat> and with that, I wish #perl6-dev good night

[22:28] <timotimo> gnite liz!

[22:44] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Remove ROLLPICKGRABW in favor of RollerIterator'

[22:44] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/141462705 https://github.com/rakudo/rakudo/compare/042e6c4e1a0b...9be48ef8b723

[22:49] <Ulti> so 1.8 seconds for my bioinfo tests down to 1.6 seconds, fairly sure thats the new named multi dispatch!

[22:51] <Ulti> the timings are now really solid too hardly any variance between runs unlike before
