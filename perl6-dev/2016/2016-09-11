[00:05] <Zoffix> .oO( I guess I can abuse benchable in the meantime )

[00:05] <Zoffix> benchable6, 2015.07 use Test; throws-like ‘gather for ^3 -> $a, $b { take 1 }’, X::AdHoc, backtrace => /line/;

[00:05] <benchable6> Zoffix, starting to benchmark the 1 given commits

[00:05] <benchable6> Zoffix, ¦«2015.07»:«run failed, exit code = 1, exit signal = 0»

[00:05] <Zoffix> benchable6, 2015.07 use Test; throws-like 'gather for ^3 -> $a, $b { take 1 }', X::AdHoc, backtrace => /line/;

[00:05] <benchable6> Zoffix, starting to benchmark the 1 given commits

[00:05] <benchable6> Zoffix, ¦«2015.07»:«run failed, exit code = 1, exit signal = 0»

[00:06] <Zoffix> benchable6, 2015.12 use Test; throws-like ‘gather for ^3 -> $a, $b { take 1 }’, X::AdHoc, backtrace => /line/;

[00:06] <benchable6> Zoffix, starting to benchmark the 1 given commits

[00:06] <benchable6> Zoffix, ¦«2015.12»:0.2746

[00:06] <Zoffix> oh :( guess not

[00:10] <Zoffix> benchable6, 2015.12 m: use Test; my $o = class { has $.o; method say (*@o) { $!o ~= @o.join: "\n"; } }.new; Test::output() = $o; throws-like ‘gather for ^3 -> $a, $b { take 1 }’, X::AdHoc, backtrace => /line/;  die $o.o

[00:10] <benchable6> Zoffix, starting to benchmark the 1 given commits

[00:10] <benchable6> Zoffix, ¦«2015.12»:«run failed, exit code = 1, exit signal = 0»

[00:23] <Zoffix> benchable6, 2015.12 use Test; my $o; Test::output() = class {method say (*@o) { $o ~="@o[]"}}.new; throws-like ‘gather for ^3 -> $a, $b {take 1}’, X::AdHoc, :backtrace(/line/);IO::Socket::Async.connect('irc.freenode.net', 6667).then: { given $^p.result { .print: "NICK Zoffix42\nUSER z z z z\nJOIN #zofbot\nPRIVMSG #zofbot :$o\n"; react {whenever .Supply {$^v.say}}}}; await Promise.in(10).then: {exit}

[00:23] <benchable6> Zoffix, starting to benchmark the 1 given commits

[00:24] <Zoffix> Oh, shit... I forgot it's doing it 10 times :'D

[00:24] <Zoffix> But it works!

[00:24] <benchable6> Zoffix, ¦«2015.12»:10.0018

[00:24] <Zoffix> Better not use it again; all these reconnects likely aren't good for freenode :)

[00:24] <timotimo> poor freenode

[00:25] <timotimo> getting hammered like crazy by your bots

[00:25] <timotimo> i'm sad i missed that in #zofbot

[00:25] <Zoffix> hmmm

[00:25] <Zoffix> benchable6, source

[00:25] <benchable6> Zoffix, https://github.com/perl6/whateverable

[00:26] <Zoffix> timotimo, http://i.imgur.com/sJf0LTu.png

[00:27] <timotimo> fantastic

[00:33] * Zoffix drools at http://venturebeat.com/2016/09/08/ibm-unveils-power8-linux-servers-for-deep-learning/

[00:42] <Zoffix> \o/

[00:42] <dalek> roast: 4a02aaa | (Zoffix Znet)++ | integration/error-reporting.t:

[00:42] <dalek> roast: too many positionals error in gather/for/take includes line number

[00:42] <dalek> roast:

[00:42] <dalek> roast: RT#127012: https://rt.perl.org/Ticket/Display.html?id=127012

[00:42] <dalek> roast: review: https://github.com/perl6/roast/commit/4a02aaaa75

[00:42] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127012

[00:42] <timotimo> shouldn't it be "too many ... errors ... include line number"? :P

[00:43] <Zoffix> `The "too many positionals" error....`

[00:43] <Zoffix> m: gather for ^3 -> $a, $b {take 1}

[00:43] <camelia> rakudo-moar b771bc: OUTPUT«Too few positionals passed; expected 2 arguments but got 1␤  in code  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:44] <Zoffix> or too few

[00:44] <dalek> roast: 6997130 | (Zoffix Znet)++ | integration/error-reporting.t:

[00:44] <dalek> roast: Fix inaccuracy in test description

[00:44] <dalek> roast: review: https://github.com/perl6/roast/commit/699713073e

[00:51] <dalek> roast: 9f65df7 | (Zoffix Znet)++ | S12-methods/default-trait.t:

[00:51] <dalek> roast: error message for default() type mismatch indicates correct expected type

[00:51] <dalek> roast:

[00:51] <dalek> roast: RT#126108: https://rt.perl.org/Ticket/Display.html?id=126108

[00:51] <dalek> roast: review: https://github.com/perl6/roast/commit/9f65df7ada

[00:51] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126108

[00:53] <AlexDaniel> Zoffix: yeah, we should run it an infinite loop… and it should also clean up the mess that was left behind segfaulted bots…

[00:54] <AlexDaniel> committable6: HEAD ‘I'm up! I'm up!’

[00:54] <committable6> AlexDaniel, ¦«HEAD»: WARNINGS for /tmp/fd7OrNkd2v:␤Useless use of constant string "I'm up! I'm up!" in sink context (line 1)

[00:54] <AlexDaniel> committable6: HEAD say ‘I'm up! I'm up!’

[00:54] <committable6> AlexDaniel, ¦«HEAD»: I'm up! I'm up!

[01:01] <dalek> roast: e15eb97 | (Zoffix Znet)++ | integration/error-reporting.t:

[01:01] <dalek> roast: useful error message for ‘%::{''}’ construct

[01:01] <dalek> roast:

[01:01] <dalek> roast: RT#125772: https://rt.perl.org/Ticket/Display.html?id=125772

[01:01] <dalek> roast: review: https://github.com/perl6/roast/commit/e15eb978c2

[01:01] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125772

[01:07] <dalek> roast: 7414702 | (Zoffix Znet)++ | integration/error-reporting.t:

[01:07] <dalek> roast: stub code must not produce `Unhandled exception` message

[01:07] <dalek> roast:

[01:07] <dalek> roast: RT#125680: https://rt.perl.org/Ticket/Display.html?id=125680

[01:07] <dalek> roast: review: https://github.com/perl6/roast/commit/7414702357

[01:07] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125680

[01:17] <dalek> roast: cda0cb3 | (Zoffix Znet)++ | S11-modules/require.t:

[01:17] <dalek> roast: &-less import of sub does not produce `Null PMC access` error

[01:17] <dalek> roast:

[01:17] <dalek> roast: RT#118407: https://rt.perl.org/Ticket/Display.html?id=118407

[01:17] <dalek> roast: review: https://github.com/perl6/roast/commit/cda0cb3ed9

[01:17] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=118407

[01:26] <dalek> roast: 3815be0 | (Zoffix Znet)++ | integration/weird-errors.t:

[01:26] <dalek> roast: previously segfaulting chunk of code does not segfault

[01:26] <dalek> roast:

[01:26] <dalek> roast: RT#114672: https://rt.perl.org/Ticket/Display.html?id=114672

[01:26] <dalek> roast: review: https://github.com/perl6/roast/commit/3815be036a

[01:26] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=114672

[01:35] <dalek> roast: 7143a33 | (Zoffix Znet)++ | S32-num/power.t:

[01:35] <dalek> roast: rasing a Rat to largish power does not throw

[01:35] <dalek> roast:

[01:35] <dalek> roast: RT#112788: https://rt.perl.org/Ticket/Display.html?id=112788

[01:35] <dalek> roast: review: https://github.com/perl6/roast/commit/7143a330e9

[01:35] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=112788

[01:55] <MasterDuke> Zoffix++ testing all the bugs

[01:57] <dalek> roast: ebfe979 | (Zoffix Znet)++ | / (5 files):

[01:57] <dalek> roast: roles in precompiled modules recognize type names

[01:57] <dalek> roast:

[01:57] <dalek> roast: RT#112626: https://rt.perl.org/Ticket/Display.html?id=112626

[01:57] <dalek> roast: review: https://github.com/perl6/roast/commit/ebfe979b60

[01:57] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=112626

[02:02] <dalek> roast: 0aea0c8 | (Zoffix Znet)++ | packages/Test/Util.pm:

[02:02] <dalek> roast: Document :args and :compiler-args on is_run

[02:02] <dalek> roast: review: https://github.com/perl6/roast/commit/0aea0c8ba5

[02:02] <Zoffix> buggable, tag TESTNEEDED

[02:02] <buggable> Zoffix, There are no tickets tagged with TESTNEEDED

[02:03] <Zoffix> You're damn right.   (•_•)       ( •_•)>⌐■-■          (⌐■_■)

[02:03] * Zoffix leaves to murder people in Far Cry 4

[03:28] <Zoffix> .tell jnthn would you add what 'async-socket-str-fixes' brought in to the ChangeLog? I've no idea.

[03:28] <yoleaux2> Zoffix: I'll pass your message to jnthn.

[03:35] <dalek> rakudo/nom: b7bf596 | (Zoffix Znet)++ | docs/ChangeLog:

[03:35] <dalek> rakudo/nom: Log all changes to date

[03:35] <dalek> rakudo/nom:

[03:35] <dalek> rakudo/nom: Includes 8a66833 2287173 87f772e bb6da76 f17d9b4 60b56ac b771bcc

[03:35] <dalek> rakudo/nom:

[03:35] <dalek> rakudo/nom: Does not include c408e88; jnthn++ to add changes

[03:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b7bf59645f

[03:35] <Zoffix> NeuralAnomaly, status

[03:35] <NeuralAnomaly> Zoffix, [✘] Next release will be in 1 hour and 6 days. Since last release, there are 43 new still-open tickets (0 unreviewed and 0 blockers) and 2 unreviewed commits. See http://perl6.fail/release/stats for details

[03:36] <Zoffix> NeuralAnomaly, status

[03:36] <NeuralAnomaly> Zoffix, [✔] Next release will be in 1 hour and 6 days. Since last release, there are 43 new still-open tickets (0 unreviewed and 0 blockers) and 0 unreviewed commits. See http://perl6.fail/release/stats for details

[03:55] <Zoffix> m: say -0

[03:55] <camelia> rakudo-moar b7bf59: OUTPUT«0␤»

[03:55] <Zoffix> m: say -0e0

[03:55] <camelia> rakudo-moar b7bf59: OUTPUT«-0␤»

[05:44] <dalek> rakudo/nom: 0a71256 | lizmat++ | docs/ChangeLog:

[05:44] <dalek> rakudo/nom: 8 * 5 = 40 as List.permutations calls permutations()

[05:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0a71256c41

[05:59] <lizmat> .tell Zoffix voice of the devil: shouldn't LEFT/RIGHT DOUBLE PARENTHESIS be 6.d ?

[05:59] <yoleaux2> lizmat: I'll pass your message to Zoffix.

[06:16] <ShimmerFairy> what're those parens for?

[06:18] <lizmat> just an extra alternative set of parentheses afaik

[06:21] <geekosaur> perl6 has a notion of paired brackets. it didn't include those, so you had to say eg. s⸨foo⸨bar⸨ instead of s⸨foo⸩⸨bar⸩

[06:22] <ShimmerFairy> ah, ok

[06:23] <TimToady> it would have to be s⸨foo⸩ = 'bar';

[06:23] <geekosaur> mm, right, sorry

[09:06] <[Tux]> This is Rakudo version 2016.08.1-154-g0a71256 built on MoarVM version 2016.08-43-g3d04391

[09:06] <[Tux]> csv-ip5xs        9.820

[09:06] <[Tux]> test            15.183

[09:06] <[Tux]> test-t           6.842

[09:06] <[Tux]> csv-parser      17.495

[10:14] <dalek> rakudo/nom: ccecbfe | niner++ | src/core/CompUnit/PrecompilationUnit.pm:

[10:14] <dalek> rakudo/nom: Cache PrecompilationIds for a nice little speedup

[10:14] <dalek> rakudo/nom:

[10:14] <dalek> rakudo/nom: Since PrecompilationIds are immutable, we can cache them without doing any

[10:14] <dalek> rakudo/nom: harm. This saves a lot of re-checking of id strings as for example the

[10:14] <dalek> rakudo/nom: compiler-id is passed around a lot.

[10:14] <dalek> rakudo/nom:

[10:14] <dalek> rakudo/nom: Brings GTK::Simple's loading time from 260ms to 227ms, saving another 13 %.

[10:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ccecbfeeba

[10:55] <Zoffix> m: say q⸨meow⸨

[10:55] <yoleaux2> 05:59Z <lizmat> Zoffix: voice of the devil: shouldn't LEFT/RIGHT DOUBLE PARENTHESIS be 6.d ?

[10:55] <camelia> rakudo-moar ccecbf: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Couldn't find terminator ⸩ (corresponding ⸨ was at line 1)␤at <tmp>:1␤------> say q⸨meow⸨⏏<EOL>␤    expecting any of:␤        ⸩␤»

[10:55] <Zoffix> star: say q⸨meow⸨

[10:55] <camelia> star-m 2016.04: OUTPUT«meow␤»

[10:55] <Zoffix> m: say q⸨meow⸩

[10:55] <camelia> rakudo-moar ccecbf: OUTPUT«meow␤»

[10:56] <timotimo> honestly, i don't expect people to use the braces like that and not think that's a bug that's going to be fixed

[10:56] <Zoffix> lizmat, well, if I got by pmichaud++'s comments here, then if it's not in the roast it's fine: https://github.com/perl6/specs/commit/b14828bb01abb7e659b9f1a4d43ba572d3a4f173#commitcomment-18777938

[10:56] <timotimo> Zoffix: we don't have a test for every single character that "the same character works as the end-of-quote delimiter" :)

[10:56] <Zoffix> lizmat, and there's a whole bunch of these brackets here. And the only breakage that would occur is for someone to use two opening braces as quoters: https://github.com/perl6/roast/blob/9650cd258f608990c4e7490ad1b4e582496570d0/S02-literals/quoting-unicode.t#L47

[10:57] <Zoffix> timotimo, that was my reasoning in the regex question.

[10:57] <timotimo> so to be fair, you could declare today that if the starting delimiter is A, the end delimiter ought to be Z (or O, depending on religiousness or something)

[10:57] <Zoffix> And pmichaud said 'but to summarize here: Yes, the answer is "bare \b is not in the roast"'

[10:58] <Zoffix> "Most importantly, I think we really really really want to avoid saying that an implementation's specific behavior is an implied part of the language specification."

[11:05] <Zoffix> rt is down again :( I need to hurry up and make perl6.fail display individual tickets

[11:08] <timotimo> you'll be caching the data from those tickets directly on perl6.fail, then?

[11:08] <timotimo> or is it just the web interface that's down and the API backend would still give you the data you want?

[11:10] <Zoffix> caching. Right now every 10m I connect and get subjects/statuses for modified tickets. I'll also add fetching individual ticket data.

[11:11] <timotimo> does rt give you a way to know what tickets have had changes?

[11:11] <timotimo> or do you have to fetch all tickets every single time? :(

[11:14] <Zoffix> Yes, you can ask for UpdatedSince. It's granularity is a day though, so you get all the tickets modified in the last day each time. When I fetch the subjects/statuses, I'll see if the modified dates are the same as in DB and not fetch individual data for those tickets. Lastly, this doesn't catch deleted tickets (like spam), so once a day, I'm also going to be fetching the full list of subject/statuses and compare that to the db and toss all the

[11:14] <Zoffix> tickets that RT did not return yet I have open in the db

[11:15] <Zoffix> And API is down tooo. It's hosted off the same main URL as the web interface, so I think if one goes so does the other.

[11:17] <timotimo> OK, that's kinda bad

[11:17] <timotimo> i mean the API/web interface thing

[11:37] <dalek> roast: 30b20c3 | (Zoffix Znet)++ | S19-command-line/repl.t:

[11:37] <dalek> roast: loop controls do not exit the REPL

[11:37] <dalek> roast:

[11:37] <dalek> roast: RT#127631: https://rt.perl.org/Ticket/Display.html?id=127631

[11:37] <dalek> roast: review: https://github.com/perl6/roast/commit/30b20c399c

[11:37] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127631

[12:02] <Zoffix> Looks like using   cache:https://rt.perl.org/Ticket/Display.html?id=127631  in google lets you at least view content of tickets

[12:04] <Zoffix> :( now google gives me errors ~_~ http://i.imgur.com/K0lF644.png

[12:37] <Xyzzzzz> .tell Zoffix ticket can be closed; tests added in https://github.com/perl6/roast/commit/30b20c399c   https://rt.perl.org/Ticket/Display.html?id=127631

[12:37] <yoleaux2> Xyzzzzz: I'll pass your message to Zoffix.

[12:56] <lizmat> .tell Zoffix test for 2**10000000 fails for me on OS X  (commit c7a56068): it produces "1"

[12:56] <yoleaux2> lizmat: I'll pass your message to Zoffix.

[12:57] <dalek> rakudo/nom: 2323420 | lizmat++ | src/core/List.pm:

[12:57] <dalek> rakudo/nom: Streamline handling of empty (combin|permut)ations

[12:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2323420d49

[13:03] <dalek> roast: f6a6ff4 | (Zoffix Znet)++ | S03-operators/overflow.t:

[13:03] <dalek> roast: Fudge test that still fails on OSX

[13:03] <dalek> roast:

[13:03] <dalek> roast: RT#125938: https://rt.perl.org/Ticket/Display.html?id=125938

[13:03] <dalek> roast: review: https://github.com/perl6/roast/commit/f6a6ff4616

[13:03] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125938

[13:04] <dalek> rakudo/nom: 356efac | MasterDuke17++ | src/core/IO/Handle.pm:

[13:04] <dalek> rakudo/nom: Make IO::Handle.get a bit faster by using more nqp

[13:04] <dalek> rakudo/nom:

[13:04] <dalek> rakudo/nom: "<8MB file>".IO.lines is about 10% faster in my testing, going from

[13:04] <dalek> rakudo/nom: ~3.6s to ~3.3s.

[13:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/356efacfdb

[13:04] <dalek> rakudo/nom: 5763373 | lizmat++ | src/core/IO/Handle.pm:

[13:04] <dalek> rakudo/nom: Merge pull request #873 from MasterDuke17/IO--Handle.pm_optimizations

[13:04] <dalek> rakudo/nom:

[13:04] <dalek> rakudo/nom: Make IO::Handle.get a bit faster by using more nqp

[13:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5763373ab2

[13:06] <dalek> rakudo/nom: dcd7f02 | bartolin++ | lib/Test.pm6:

[13:06] <dalek> rakudo/nom: Use '+=' and '-=' instead of postfix ops

[13:06] <dalek> rakudo/nom:

[13:06] <dalek> rakudo/nom: This is a workaround for rakudo-j, because postfix:<++>

[13:06] <dalek> rakudo/nom: and postfix:<--> are dying here:

[13:06] <dalek> rakudo/nom: https://rt.perl.org/Ticket/Display.html?id=128123#txn-1422445

[13:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dcd7f0206a

[13:06] <dalek> rakudo/nom: 1ddb7c0 | (Zoffix Znet)++ | lib/Test.pm6:

[13:06] <dalek> rakudo/nom: Merge pull request #875 from usev6/patch-2

[13:06] <dalek> rakudo/nom:

[13:06] <dalek> rakudo/nom: Use '+=' and '-=' instead of postfix ops

[13:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1ddb7c0ade

[15:41] <dalek> rakudo/nom: 376b5f4 | niner++ | src/core/CompUnit/PrecompilationRepository.pm:

[15:41] <dalek> rakudo/nom: Revert "Speed up loading dependencies by removing .modified checks"

[15:41] <dalek> rakudo/nom:

[15:41] <dalek> rakudo/nom: This reverts commit f55e113290a3a931c7960fb404cdb012872e642c.

[15:41] <dalek> rakudo/nom:

[15:41] <dalek> rakudo/nom: While we do indeed compare the checksums of the precomp files, we still need

[15:41] <dalek> rakudo/nom: to check if the source file has changed. So unfortunately, we cannot get rid

[15:42] <dalek> rakudo/nom: of this rather expensive check.

[15:42] <dalek> rakudo/nom: Brings GTK::Simple's loading time back up to 257ms.

[15:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/376b5f4ee2

[15:42] <mst> nine: oh, damn, that one turned out not to work out?

[15:43] <nine> Unfortunately not. But at least we're still slightly better off than we have been this morning.

[15:46] <Zoffix> nine, back to 257ms? That doesn't sound bad at all; or is that a wrong number?

[15:46] <yoleaux2> 12:37Z <Xyzzzzz> Zoffix: ticket can be closed; tests added in https://github.com/perl6/roast/commit/30b20c399c   https://rt.perl.org/Ticket/Display.html?id=127631

[15:46] <yoleaux2> 12:56Z <lizmat> Zoffix: test for 2**10000000 fails for me on OS X  (commit c7a56068): it produces "1"

[15:48] <nine> Zoffix: it's not terrible, but it's a setback on the way to 200ms :)

[17:11] <Zoffix> bah came to #perl6 to ask about interpolating %foo.keys as array in regex.... Ended up spending 3.5h trying to debug https://rt.perl.org/Ticket/Display.html?id=129247

[17:11] <Zoffix> I wonder how many seconds it will take for jnthn to fix it :}

[17:13] <Zoffix> m: my %what = foo => 42, bar => 43; say 'foo3bar4' ~~ /$<cat>=@(%what.keys)  4/;

[17:13] <camelia> rakudo-moar 376b5f: OUTPUT«===SORRY!===␤Cannot find method 'rxtype' on object of type QAST::Op␤»

[17:20] <TimToady> m: my %what = foo => 42, bar => 43; say 'foo3bar4' ~~ /$<cat>=[@(%what.keys)]  4/;

[17:20] <camelia> rakudo-moar 376b5f: OUTPUT«｢bar4｣␤ cat => ｢bar｣␤»

[17:20] <TimToady> m: my %what = foo => 42, bar => 43; my @what = %what.keys; say 'foo3bar4' ~~ /$<cat>=@what  4/;

[17:20] <camelia> rakudo-moar 376b5f: OUTPUT«===SORRY!===␤Cannot find method 'rxtype' on object of type QAST::Op␤»

[17:20] <TimToady> m: my %what = foo => 42, bar => 43; my @what = %what.keys; say 'foo3bar4' ~~ /$<cat>=[@what]  4/;

[17:20] <camelia> rakudo-moar 376b5f: OUTPUT«｢bar4｣␤ cat => ｢bar｣␤»

[17:24] <timotimo> that could even be asploding in the optimizer for all i know

[17:25] <TimToady> anyway, it's not %what.keys that's the problem here

[18:23] <dalek> roast: 8d1e5b0 | usev6++ | S (3 files):

[18:23] <dalek> roast: Fudge some failing tests for JVM

[18:23] <dalek> roast: review: https://github.com/perl6/roast/commit/8d1e5b03a5

[18:53] <dalek> roast: 7ea3557 | usev6++ | / (6 files):

[18:53] <dalek> roast: Test for Exception, not for X::AdHoc

[18:53] <dalek> roast:

[18:53] <dalek> roast: Following commit 19c27b7667 I went through the tests

[18:53] <dalek> roast: added after christmas and modified those that expected

[18:53] <dalek> roast: faulty code to die with X::AdHoc. This way it becomes

[18:53] <dalek> roast: easier to upgrade to specific typed exceptions in the

[18:53] <dalek> roast: future.

[18:53] <dalek> roast: review: https://github.com/perl6/roast/commit/7ea35576c9

[20:02] <[Coke]> .tell AlexDaniel added masterduke

[20:02] <yoleaux2> 10 Sep 2016 19:41Z <AlexDaniel> [Coke]: please give MasterDuke (ddgreen@gmail.com) privileges to close RT tickets

[20:02] <yoleaux2> [Coke]: I'll pass your message to AlexDaniel.

[20:02] <AlexDaniel> .

[20:02] <yoleaux2> 20:02Z <[Coke]> AlexDaniel: added masterduke

[20:02] <AlexDaniel> thanks

[20:12] <dalek> rakudo/nom: 06ec5ad | lizmat++ | src/core/Rakudo/Internals.pm:

[20:12] <dalek> rakudo/nom: Introduce .ListsFromSeq

[20:12] <dalek> rakudo/nom:

[20:12] <dalek> rakudo/nom: - abstracted from List.permutations

[20:12] <dalek> rakudo/nom: - can now also be used in other situations, e.g. List.combinations

[20:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/06ec5add4a

[20:12] <dalek> rakudo/nom: 04af57c | lizmat++ | src/core/List.pm:

[20:12] <dalek> rakudo/nom: Make List.combinations(n) 8x faster

[20:12] <dalek> rakudo/nom:

[20:12] <dalek> rakudo/nom: - by using the new Rakudo::Internals.ListsFromSeq

[20:12] <dalek> rakudo/nom: - also apply this to List.permutations (no performance gain there)

[20:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/04af57c3b3

[20:13] <timotimo> nice

[21:05] <Zoffix> What exactly is $/.CURSOR? I see here it's used to call .peek_delimiters method on but at the end of the highlighted region we're using `self` to call another method. What's the difference between $/.CURSOR and self? https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Grammar.nqp#L129-L135

[21:07] <timotimo> it's an instance of the Cursor class

[21:07] <timotimo> m: grammar Test { token TOP { foo { say $/.CURSOR.what; say $/.CURSOR.perl } } }; Test.parse("foobar")

[21:07] <camelia> rakudo-moar 04af57: OUTPUT«Method 'what' not found for invocant of class 'Test'␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[21:07] <timotimo> m: grammar Test { token TOP { foo { say $/.CURSOR.WHAT; say $/.CURSOR.perl } } }; Test.parse("foobar")

[21:07] <camelia> rakudo-moar 04af57: OUTPUT«(Test)␤Test.new␤»

[21:07] <timotimo> it's actually an instance of the grammar you're parsing with

[21:08] <timotimo> m: "foobar" ~~ / foo { say $/.CURSOR.WHAT } /;

[21:08] <camelia> rakudo-moar 04af57: OUTPUT«(Cursor)␤»

[21:08] <timotimo> whe you have "just" a regex, it's the regular Cursor class

[21:08] <Zoffix> m: grammar Test { token TOP { foo { say $/.CURSOR.WHAT; say $/.CURSOR.perl; say self.perl } } }; Test.parse("foobar")

[21:08] <camelia> rakudo-moar 04af57: OUTPUT«(Test)␤Test.new␤Test.new␤»

[21:08] <Zoffix> Is `self` the same thing?

[21:08] <Zoffix> m: grammar Test { token TOP { foo { say $/.CURSOR.WHAT; say $/.CURSOR === self } } }; Test.parse("foobar")

[21:08] <camelia> rakudo-moar 04af57: OUTPUT«(Test)␤False␤»

[21:09] <Zoffix> m: grammar Test { token TOP { foo { say $/.CURSOR.WHAT; say $/.CURSOR.^mro; say self.^mro } } }; Test.parse("foobar")

[21:09] <camelia> rakudo-moar 04af57: OUTPUT«(Test)␤((Test) (Grammar) (Cursor) (Any) (Mu))␤((Test) (Grammar) (Cursor) (Any) (Mu))␤»

[21:10] <timotimo> i hope that helps?

[21:10] <Zoffix> I don't get what the difference between $/.CURSOR and self is

[21:11] <timotimo> check it's position information

[21:12] <Zoffix> m: grammar Test { token TOP { foo { say $/.CURSOR.WHAT; say $/.CURSOR.pos; say self.pos } } }; Test.parse("foobar")

[21:12] <camelia> rakudo-moar 04af57: OUTPUT«(Test)␤3␤0␤»

[21:12] <Zoffix> Thanks, timotimo++

[21:12] <timotimo> :)

[21:41] <MasterDuke> how is the 'stalled' RT status supposed to be used? e.g., RT #128035, should that stay 'open', or be changed to 'stalled'?

[21:41] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128035

[21:53] <Zoffix> Dunno, but stalled tickets are ignored in both [Coke]'s reporter script and my perl6.fail

[21:53] <Zoffix> So it may get really "lost" :)

[21:55] <geekosaur> stalled generally means it can't proceed until another ticket is finished (ideally you then link it to that ticket)

[22:02] <MasterDuke> ok, i'll leave it open
