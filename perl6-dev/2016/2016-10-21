[06:19] <[Tux]> This is Rakudo version 2016.10-28-gb1f77c8 built on MoarVM version 2016.10-15-g715e39a

[06:19] <[Tux]> csv-ip5xs        3.213

[06:19] <[Tux]> test            17.388

[06:19] <[Tux]> test-t           6.920

[06:19] <[Tux]> csv-parser      17.286

[08:13] <FROGGS> o/

[11:23] <tbrowder> hi #perl6: o/

[11:23] <tbrowder> I'm seeing warnings again on travis: warning: format ‘%llu’ expects argument of type ‘long long unsigned int’, but argument 8 has type ‘MVMuint64’ [-Wformat]

[11:26] <timotimo> ... why doesn't that match?

[11:26] <timotimo> is long long 128bit?

[11:27] <timotimo> anyway, those kinds of things are fixed by putting "blah %" PRIu64 " blah" into the format string

[11:27] <timotimo> or whatever that spelling is

[12:24] <tbrowder> https://www.irccloud.com/pastebin/I48gQyCp/

[12:26] <timotimo> we never use functions without prototypes in our C code

[12:26] <tbrowder> i didn't imagine so...

[12:28] <tbrowder> might have to do a cast to shut gcc up

[12:42] <lizmat> Files=1150, Tests=53676, 215 wallclock secs (12.86 usr  3.50 sys + 1312.37 cusr 106.54 csys = 1435.27 CPU)

[12:45] <timotimo> tbrowder: these errors all seem to come from the dynamic variable cache log, which isn't critical at all; i don't think it's used by anyone except core devs, and it's super rarely used even then

[13:59] <nine> Pro tip: when you wonder why your code suddenly got a lot slower, check if you compiled moar with --optimize=0 --debug when investigating an issue...

[14:03] <tbrowder> timotimo: ok

[15:12] * iBakeCake spots another trig bug o/

[15:12] <iBakeCake> m: say acosh -1e100

[15:12] <camelia> rakudo-moar b1f77c: OUTPUT«-Inf␤»

[15:12] <iBakeCake> m: say acosh -1e200

[15:12] <camelia> rakudo-moar b1f77c: OUTPUT«Inf␤»

[15:12] <iBakeCake> :D Both should be NaNs

[15:20] <iBakeCake> m: say acosh(5+5i) ≅ log(5+2*sqrt(6))+5i

[15:20] <camelia> rakudo-moar b1f77c: OUTPUT«False␤»

[15:20] <iBakeCake> Seems complex acosh is broken entirely (if WolframAlpha's results are correct)

[15:22] <iBakeCake> ...and coverage results say it's covered :\

[15:52] <iBakeCake> ZOFVM: Files=1198, Tests=130073, 145 wallclock secs (20.07 usr  3.45 sys + 2326.37 cusr 238.93 csys = 2588.82 CPU)

[16:01] <dalek> rakudo/nom: 5fe8cf7 | (Zoffix Znet)++ | src/core/Num.pm:

[16:01] <dalek> rakudo/nom: Fix acosh for large negative numbers

[16:01] <dalek> rakudo/nom:

[16:01] <dalek> rakudo/nom: The IEEE 754-2008[^1], Section 9.2, says acosh for values < 1 is a NaN.

[16:01] <dalek> rakudo/nom: We do that for numbers with small maginitude and -∞ itself, but for

[16:01] <dalek> rakudo/nom: large negative numbers (e.g. -1e100 and -1e200) we end up returning ±∞

[16:01] <dalek> rakudo/nom:

[16:01] <dalek> rakudo/nom: Fix by detecting out-of-domain input and returning NaN without performing

[16:01] <dalek> rakudo/nom: any calculations. This commit fixes Num and num versions, but not Complex.

[16:01] <dalek> rakudo/nom: I need to do further research on complex numbers to know how to fix them.

[16:01] <dalek> rakudo/nom:

[16:01] <dalek> rakudo/nom: [1] http://www.csee.umbc.edu/~tsimo1/CMSC455/IEEE-754-2008.pdf

[16:01] <iBakeCake> https://github.com/rakudo/rakudo/commit/5fe8cf76957257b79cfe07c267869ec0882ac08d

[16:30] <MasterDuke> hope this isn't considered spamming, but trying to catch the earlier-in-the-day crowd

[16:30] <MasterDuke> i've run this as a completely fresh checkout on a different machine. there were some failed tests when running j-spectest, but they all passed when i ran them individually

[16:31] <MasterDuke> nine++ for already taking a look

[16:31] <MasterDuke> https://github.com/MasterDuke17/rakudo/tree/remove_BOOTSTRAPATTR_where_possible_2nd_attempt

[16:31] <TimToady> obviously there needs to be a unicode character for NaN

[16:31] <perlpilot> .oO( and it should be shaped like a cat )

[16:32] <TimToady> or a bat

[16:33] <iBakeCake> batman :D

[16:33] <TimToady> NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN Batman!

[16:33] <iBakeCake> EGITHUBDOWN

[16:34] <tadzik> dnses are being funny

[16:34] <iBakeCake> yeah

[16:34] <tadzik> works for me on 8.8.8.8

[16:34] <TimToady> whole interwebs is gettin' hammered lately

[16:35] <moritz> I'd say it's getting trumped :-)

[16:35] <tadzik> internet is a fragile lil thing

[16:35] <TimToady> russian hackers throwing temper tantrums, I guess

[16:36] <perlpilot> tadzik: less so than when we had to sling around hosts files though

[16:36] <tadzik> perlpilot: heh, today it doesn't seem that different :)

[16:43] <dalek> roast: 528d66c | (Zoffix Znet)++ | S02-types/num.t:

[16:43] <dalek> roast: [coverage] Cover nummy trig: cosh and acosh

[16:43] <dalek> roast:

[16:43] <dalek> roast: Also includes coverage for two acosh bugs[^1][^2] fixed in the past

[16:43] <dalek> roast: couple of days.

[16:43] <dalek> roast:

[16:43] <dalek> roast: [1] https://github.com/rakudo/rakudo/commit/a7e801f396250da76529734764acb62087187834

[16:43] <dalek> roast: [2] https://github.com/rakudo/rakudo/commit/5fe8cf76957257b79cfe07c267869ec0882ac08d

[16:43] <dalek> roast: review: https://github.com/perl6/roast/commit/528d66c153

[16:46] <TimToady> .u ꀞ

[16:46] <yoleaux2> U+A01E YI SYLLABLE BAT [Lo] (ꀞ)

[16:46] <TimToady> looks more like an Enterprise

[16:51] <nine> MasterDuke: do you have such j-spectest failures also on an unmodified checkout?

[16:53] <iBakeCake> MasterDuke: Files=1185, Tests=129989, 160 wallclock secs (22.11 usr  2.92 sys + 2453.95 cusr 247.08 csys = 2726.06 CPU)

[16:53] <iBakeCake> MasterDuke: all passed, except what I'm assuming the new num tests. (that's on moar)

[16:53] <iBakeCake> Still waiting for JVM

[16:56] <MasterDuke> nine: should have thought to check that. i believe so, but not 100% sure

[16:56] <MasterDuke> iBakeCake: cool, thanks

[16:57] <MasterDuke> i probably won't have access to a computer to test anything/make changes for a day or two, but i'll check back if there are any comments

[17:18] <iBakeCake> MasterDuke: it's not looking good :)

[17:19] <iBakeCake> MasterDuke: native call tests fail: http://fpaste.scsys.co.uk/537398 and about 30 or so first stresstests all say No subtests run

[17:24] <iBakeCake> .tell MasterDuke well, I've just killed it. Almost everything fails and I suspect it's just my box trying to do too many tests at once: http://fpaste.scsys.co.uk/537400

[17:24] <yoleaux2> iBakeCake: I'll pass your message to MasterDuke.

[17:24] <iBakeCake> I think I have TEST_JOBS=30 set

[17:55] <dalek> rakudo/nom: 66726e8 | (Zoffix Znet)++ | src/core/Num.pm:

[17:55] <dalek> rakudo/nom: Make atanh(num 1e0) give Inf instead of throwing

[17:55] <dalek> rakudo/nom:

[17:55] <dalek> rakudo/nom: The 2008 IEEE 754[^1] section 9.2, states atanh(x) with |x| = ∞ is a divideByZero

[17:55] <dalek> rakudo/nom: exception. In section 9.1.1, it states this is indicated by a function, which then is

[17:55] <dalek> rakudo/nom: to return ∞. And section 7.3 describes the default value of divideByZero as ∞.

[17:55] <dalek> rakudo/nom:

[17:55] <dalek> rakudo/nom: The speculation[^2] states "floating-point modes do not throw exceptions but rather

[17:55] <dalek> rakudo/nom: propagate ∞ and NaN," and in fact, atanh(-1) does return a -∞. Furthermore, the

[17:55] <dalek> rakudo/nom: following languages and tools almost universally give a ∞ for atanh(1):

[17:55] <dalek> rakudo/nom: R: ∞; Rust: ∞; C: ∞; Ruby: ∞; Perl 5: ∞; WolframAlpha: ∞; Python: math domain error

[17:55] <dalek> rakudo/nom:

[17:55] <dalek> rakudo/nom: Related fix for Num: https://github.com/rakudo/rakudo/commit/906719c8c528bb46c12ebd1ce857b7ec90ebe425

[17:55] <dalek> rakudo/nom:

[17:56] <iBakeCake> https://github.com/rakudo/rakudo/commit/66726e8d6f4a5d7056cb9fdc18709cf48e294b9d

[18:06] <dalek> roast: a8e616b | (Zoffix Znet)++ | S02-types/num.t:

[18:06] <dalek> roast: [coverage] Cover nummy trig: tanh and atanh

[18:06] <dalek> roast:

[18:06] <dalek> roast: Also covers atanh(num 1e0) bug fixed in:

[18:06] <dalek> roast: https://github.com/rakudo/rakudo/commit/66726e8d6f4a5d7056cb9fdc18709cf48e294b9d

[18:06] <dalek> roast: review: https://github.com/perl6/roast/commit/a8e616bae0

[18:07] <FROGGS> o/

[18:11] * iBakeCake looks at S32-trig/generate-tests.pl

[18:12] <iBakeCake> incomprehensible

[18:17] <dalek> roast: 163d683 | (Zoffix Znet)++ | S02-types/num.t:

[18:17] <dalek> roast: Cover 1e0.atanh

[18:17] <dalek> roast:

[18:17] <dalek> roast: Fixed by https://github.com/rakudo/rakudo/commit/906719c8c528bb46c12ebd1ce857b7ec90ebe425

[18:17] <dalek> roast:

[18:17] <dalek> roast: The S32-trig/* space is more appropriate for this test, but the tests there

[18:17] <dalek> roast: are generated by a 500-line script (S32-trig/generate-tests.pl) that I don't know.

[18:17] <dalek> roast: review: https://github.com/perl6/roast/commit/163d683dea

[18:24] <travis-ci> Rakudo build errored. Zoffix Znet 'Make atanh(num 1e0) give Inf instead of throwing

[18:24] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/169588766 https://github.com/rakudo/rakudo/compare/5fe8cf769572...66726e8d6f4a

[18:28] <iBakeCake> buggable: yo

[18:28] <iBakeCake> buggable: tags

[18:28] <buggable> iBakeCake, Total: 1391; BUG: 943; UNTAGGED: 284; LTA: 121; NYI: 91; RFC: 58; JVM: 56; CONC: 55; SEGV: 37; REGEX: 36; UNI: 29; PERF: 28; @LARRY: 22; NATIVECALL: 19; POD: 19; IO: 17; TODO: 14; PRECOMP: 12; TESTCOMMITTED: 12; BUILD: 11; OO: 9; MATH: 8; STAR: 6; BOOTSTRAP: 5; GLR: 5; OSX: 4; TESTNEEDED: 4; DOCS: 3; OPTIMIZER: 3; REPL: 3; WEIRD: 3; REGRESSION: 2; SPESH: 2; CONFIGURE: 1; CUR: 1; LIBRARY: 1; RT: 1; SIT

[18:28] <iBakeCake> stupid robot

[18:28] <iBakeCake> hm :/ that travis URL gives me "The repository at rakudo/rakudo was not found."

[18:29] <geekosaur> probably failed to reach github

[18:29] <iBakeCake> prolly

[18:29] <geekosaur> and that looks like the travis failures were the same thing (I did get it to load)

[18:47] <FROGGS> m: sub foo($a:(Int)) { say $a(42) } # TimToady: that's meant to work, right? I mean, mit ampersand *and* dollar as sigil...

[18:47] <camelia> rakudo-moar b1f77c: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Variable '$a' is not declared␤at <tmp>:1␤------> sub foo($a:(Int)) { say ⏏$a(42) } # TimToady: that's meant to wor␤»

[18:47] <FROGGS> s/mit/with/

[18:48] * FROGGS .oO( strangely inconsistent )

[19:15] <jnthn> fwiw, I thought it was conditional on the & sigil

[19:22] <FROGGS> yes it was... I'm not quite sure how it parses it...

[19:23] <FROGGS> though I'm not seeing why we should not allow bot $ and &

[20:04] <dalek> rakudo/nom: f75da76 | lizmat++ | src/core/ (2 files):

[20:04] <dalek> rakudo/nom: {s/Seq/Iterate/}NextNFromIterator

[20:04] <dalek> rakudo/nom:

[20:04] <dalek> rakudo/nom: A utility function working on iterators creating iterators is much

[20:04] <dalek> rakudo/nom: more generally usable.

[20:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f75da76667

[20:16] <dalek> rakudo/nom: 8d357af | lizmat++ | src/core/ (2 files):

[20:16] <dalek> rakudo/nom: Introduce Iterator.skip-at-least

[20:16] <dalek> rakudo/nom:

[20:16] <dalek> rakudo/nom: Being able to skip a number of values on an iterator can be useful

[20:16] <dalek> rakudo/nom: thing to have.  Generalised the skip-at-least-pull-one functionality

[20:16] <dalek> rakudo/nom: into skip-at-least and pull-one.  Removed the now superfluous

[20:16] <dalek> rakudo/nom: SeqSkipNFromIterator method from Rakudo::Internals.

[20:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8d357affe4

[20:21] <lizmat> good night, #perl6-dev!

[20:40] <timotimo> gnite lizmat!

[20:40] <timotimo> skip-at-least? why not skip-at-most?

[20:40] <timotimo> or you'll end up skipping more than you wanted?

[21:05] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Introduce Iterator.skip-at-least

[21:05] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/169612371 https://github.com/rakudo/rakudo/compare/f75da766671a...8d357affe41b

[21:05] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.
