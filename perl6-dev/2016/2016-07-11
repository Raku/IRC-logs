[05:48] <dalek> rakudo/nom: f294652 | (Salvador Ortiz)++ | src/core/Cool.pm:

[05:48] <dalek> rakudo/nom: Propagate Failure on Cool.Numeric related coercers

[05:48] <dalek> rakudo/nom:

[05:48] <dalek> rakudo/nom: On the same line of PR#822, with the approach of lizmat++ commit c549267e

[05:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f294652a89

[05:48] <dalek> rakudo/nom: afbb139 | niner++ | src/core/Cool.pm:

[05:48] <dalek> rakudo/nom: Merge pull request #824 from salortiz/failure_propagate

[05:48] <dalek> rakudo/nom:

[05:48] <dalek> rakudo/nom: Propagate Failure on Cool.Numeric related coercers

[05:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/afbb139353

[06:46] <[Tux]> This is Rakudo version 2016.06-224-gafbb139 built on MoarVM version 2016.06-9-g8fc21d5

[06:46] <[Tux]> test-t           8.792

[06:46] <[Tux]> csv-parser      16.815

[06:47] <[Tux]> test (no -t) is missing due to a new error, which I will try to fix

[06:47] <[Tux]> Cannot modify an immutable Str

[06:47] <[Tux]> @y[0] = @y[0].Str;  # Still a bug

[06:56] <[Tux]> This is Rakudo version 2016.06-224-gafbb139 built on MoarVM version 2016.06-9-g8fc21d5

[06:56] <[Tux]> test            15.704

[06:56] <[Tux]> test-t           8.841

[06:56] <[Tux]> csv-parser      15.927

[09:28] <lizmat> [Tux]: I'm not sure how I can reproduce your bug

[09:57] <psch> https://gist.github.com/peschwa/3737153e73cd04718ebb0d6aa5184ffd grrr >:|

[09:57] <psch> and yes, the file exists, it is a java class file and it can be run standalone :/

[09:59] <psch> this makes me feel really stupid, because i'm doing exactly the same thing i did in the poc that's not nested deep in nqp-j guts, and it worked there

[10:00] <psch> so this might have something to do with us replacing the bootclasspath i guess

[10:01] <psch> also, curiously, we throw a ClassNotFoundException right from perl6.main when entering the interpreter

[10:02] <psch> somewhere from KnowHOWMethods.getCodeRefs...

[10:03] <dalek> rakudo/nom: d075c83 | lizmat++ | src/core/List.pm:

[10:03] <dalek> rakudo/nom: Simplify Reifier.is-lazy

[10:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d075c83739

[10:05] <psch> okay what, this just gets weirder

[10:05] <psch> the ClassLoader i get from ClassLoader.getSystemClassLoader *already* knows the directory i want to load a class from

[10:06] <psch> that might be an artifact of my laziness, though i think

[10:06] <psch> as in, i put the to-be-loaded class into install/bin

[10:16] <psch> https://gist.github.com/peschwa/3737153e73cd04718ebb0d6aa5184ffd

[10:17] <psch> maybe i'm really just missing something really obvious..?

[10:17] <psch> the perl6-j code i'm running points a Repo::Java at the same dir i'm loading explicitly from in the working example

[10:17] <psch> i.e. 'use lib q[java#/home/psch/rakudo/javatests/]; use Foo:from<Java>'

[10:17] <psch> oh, yeah, that's already in the gist

[10:18] <psch> oh, no, it's not, that was the '.' example

[10:18] <psch> there, now it has the use lib pointing at the same dir vOv

[10:19] <psch> i'm really not seeing it, and i strongly hope it's a case of missing-the-reaaallly-obvious

[10:20] <psch> using the SystemClassLoader in Bar.java also still works... o.o

[10:22] <nine> psch: paths are no URLs?

[10:22] <psch> "file:/..." is an URL

[10:22] <psch> where ... is a path

[10:23] <nine> Ah, I missed the path = "file:" + path;

[10:24] <psch> that'd also throw a MalformedURLException, which would at least be helpful and not 9 layers deep into java-internal code /o\

[10:24] <psch> 'cause that's what the backtrace in jdb tells me, fwiw

[10:24] <psch> that we're handed around between at least two classloaders and then one says "nah, this isn't fun" or whathaveyou... :S

[10:25] <nine> Yet the difference may well be the SystemClassLoader's state

[10:27] <psch> yeah, that's kind of what i'm afraid off

[10:28] <psch> that the fact that (1) we set a bootclasspath and (b) we internally use the IgnoreNameClassLoader pretty much exclusively messes with the classloader chain somehow

[10:30] <psch> uhh

[10:30] <psch> also, somewhat spooky

[10:30] <psch> i mentioned a ClassNotFoundException right after entering the interpreter, right?

[10:31] <psch> turns out that's java.lang.Null that's not found there

[10:31] <moritz> lol

[10:37] <lizmat> .oO( maybe you need java.lang.404 ? )

[10:48] <Zoffix> üé∫üé∫üé∫ REMINDER: the next version of Rakudo will be released this Saturday. Please update the ChangeLog with any work you made that should be known to our users.

[11:07] <nine> Zoffix: woah! I better fix the DESTDIR regression before that

[11:08] * jnthn should hunt down that call capture SEGV before then too :)

[11:08] <nine> Zoffix: I'd consider that a release blocker worth reverting the change that caused it. https://github.com/rakudo/rakudo/commit/ac19874266b22c147a83a98ed28c710cc5d555ac#commitcomment-18128990

[11:11] <psch> well, $expletive

[11:11] <psch> adding the path i add via 'use lib' to the bootclasspath makes it work

[11:13] <nine> Also, it's just 4 days till YAPC::Europe call submission deadline. I'd better make up my mind about if I want to give a talk or not soon...

[11:24] <psch> oh geez

[11:24] <psch> ...we don't need bootclasspath anymore

[11:24] <psch> isn't that great

[11:27] <psch> ah, but kicking it from perl6-j makes precomp want to create the .precomp directory in $INSTALL/share/nqp/runtime/asm-4.1.jar/.precomp

[11:27] <psch> that's kind of funny :P

[11:32] <llfourn> jnthn: I sent a reply to RT #128553 with a bt of that SEGV. Happy to test any patch as I can reproduce it easily on one of my projects :)

[11:32] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128553

[11:33] <llfourn> (though it doesn't seem to have shown up on the website...)

[11:39] <DrForr> Speaking of 'use lib' and such, I noticed a few days ago that -Iib creates a 'ib' directory if none existed before, mostly because it's a tyop for 'lib' :)

[11:54] <tbrowder> please review specs PR 114: https://github.com/perl6/specs/pull/114

[11:54] <tbrowder> ShimmerFairy thinks it's okay

[11:56] <tbrowder> (see her remarks on #perl6 a bit earlier)

[12:18] <psch> well, i think i'm gonna leave the bootclasspath stuff in for now, even though i have a feeling it makes stuff unnecessarily complicated

[12:18] <psch> but i have no clue yet how to pull the CP dependencies out of the way of the CUR-stuff

[12:22] <jnthn> llfourn: Does it match the one in the valgrind output I posted on the ticket?

[12:26] <|Tux|> lizmat, which bug?

[12:27] <lizmat> [08:47:19]  <[Tux]>	Cannot modify an immutable Str

[12:27] <lizmat> [08:47:52]  <[Tux]>	    @y[0] = @y[0].Str;  # Still a bug

[12:28] <|Tux|> ignore that one. That was comment in the code.

[12:28] <lizmat> OKIDO

[12:28] <lizmat> oops

[12:28] <lizmat> okido

[12:29] <nine> psch: FWIW I've got a local patch that no longer makes failures to create precomp directories non-fatal

[12:31] <psch> nine: i think that was for DrForr..? :)

[12:32] <DrForr> Aroo?

[12:32] <psch> oh, no, it was for asm-4.1.jar/.percomp

[12:33] <psch> although i don't really understand, 'cause that *did* die

[12:33] <psch> anyway, it's an artifact of not using a bootclasspath, which i decided to only go for if it's the only way i can get this to work...

[12:34] <DrForr> Yeah, I wasn't talking about .precomp, the -I directory that's being checked gets created if it's not there, which it probably shouldn't do. I only noticed it because I tyop'ed '-Iib'.

[12:34] <psch> right.  i agree that should generally not happen

[12:34] <nine> psch: oh sorry, unintended double negation. I meant that it does make those failures non-fatal

[12:34] * nine didn't sleep well at all the last two nights :/

[12:45] <jnthn> nine: Hot weather?

[12:49] <nine> jnthn: that for sure doesn't help

[12:49] <jnthn> Think it's primarily to blame for my own LTA sleep of late...

[12:50] * BrokenRobot hugs its A/C

[12:51] <jnthn> Thankfully, pressure falling and rain seems to be coming up soon :)

[13:49] <|Tux|> lizmat, https://gist.github.com/Tux/aad6d6ee389a5a19ee26e580071b6521 <= the reproduction

[14:20] <BrokenRobot> m: https://gist.github.com/Tux/aad6d6ee389a5a19ee26e580071b6521

[14:20] <camelia> rakudo-moar d075c8: OUTPUT¬´Cannot modify an immutable Str‚ê§  in sub progress at <tmp> line 10‚ê§  in block <unit> at <tmp> line 13‚ê§‚ê§¬ª

[14:20] <BrokenRobot> bisect: https://gist.github.com/Tux/aad6d6ee389a5a19ee26e580071b6521

[14:20] <bisectable> BrokenRobot: it looks like an URL, but mime type is ‚Äútext/html; charset=utf-8‚Äù while I was expecting ‚Äútext/plain; charset=utf-8‚Äù. I can only understand raw links, sorry.

[14:20] <BrokenRobot> bisect: https://gist.githubusercontent.com/Tux/aad6d6ee389a5a19ee26e580071b6521/raw/f3b033c98e99b34215863d6e851cfd9320ca2515/gistfile1.txt

[14:20] <bisectable> BrokenRobot: successfully fetched the code from the provided URL

[14:20] <bisectable> BrokenRobot: (2016-07-11) https://github.com/rakudo/rakudo/commit/de5d9e7

[14:22] <timotimo> mhm

[14:23] <timotimo> having *@y be change-able like that ...

[14:24] <BrokenRobot> .oO( an URL... people and their "earls" ~_~ )

[14:26] <BrokenRobot> That bug is more of a feature to my eyes.

[14:26] <BrokenRobot> m: sub foo (@x) { @x[0] = "meow" }; my @y = "woof"; foo @y; dd @y

[14:26] <camelia> rakudo-moar d075c8: OUTPUT¬´Array @y = ["meow"]‚ê§¬ª

[14:26] <BrokenRobot> ^ I'd expect that to be immutable.

[14:26] <|Tux|> I don't

[14:27] <BrokenRobot> Damian Conway during his talk also said that would be immutable and now I regret not asking why it was in the actual implementation.

[14:27] <BrokenRobot> Well, not asking whether it being mutable was a bug, I guess. I can see why it is mutable.

[14:47] <lizmat> [Tux] BrokenRobot: I actually know the place where this could be fixed

[14:47] <lizmat> but I'm not sure it should

[14:47] * |Tux| has no opinion. Just playing the canary

[14:47] <|Tux|> What I did was wrong to start with

[14:48] <nine> I NOW HAZ POOL :D http://niner.name/Pool.jpg

[14:48] <lizmat> m: sub a(*@a is copy) { @a[0] = 42; dd @a }; a 666

[14:48] <camelia> rakudo-moar d075c8: OUTPUT¬´[42]‚ê§¬ª

[14:48] <BrokenRobot> :)

[14:49] <lizmat> m: sub a(*@a) { @a[0] = 42; dd @a }; a 666   # [Tux] looks like you need an "is copy" ?

[14:49] <camelia> rakudo-moar d075c8: OUTPUT¬´Cannot modify an immutable Int‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:49] <BrokenRobot> I'm +1 on keeping this. Would be nice if non-slurpy version worked this way too IMO

[14:50] <|Tux|> is copy would also work, but the function it was used in was essentially for debugging only, so who cares :P

[14:50] <lizmat> m: sub a(@a is copy) { @a[0] = 42; dd @a }; a (666,)   # looks like it does, BrokenRobot?

[14:50] <camelia> rakudo-moar d075c8: OUTPUT¬´[42]‚ê§¬ª

[14:50] <lizmat> m: sub a(@a) { @a[0] = 42; dd @a }; a (666,)

[14:50] <camelia> rakudo-moar d075c8: OUTPUT¬´Cannot modify an immutable Int‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:50] <BrokenRobot> Hm

[14:51] <BrokenRobot> m: sub a(@a) { @a[0] = 42; dd @a }; a [666]

[14:51] <camelia> rakudo-moar d075c8: OUTPUT¬´[42]‚ê§¬ª

[14:51] <BrokenRobot> How come it doesn't work in here?

[14:51] <lizmat> ah, because [666] is an Array, and (666,) is an immutable List

[14:52] <BrokenRobot> So it's meant to work like that by design? That is, the sub can modify the caller's array?

[14:53] <BrokenRobot> (or Hash)

[14:54] <lizmat> if it is given an Array, yes

[14:54] <lizmat> (or Hash)

[14:54] <lizmat> Mind you, it *is* a bit different still

[14:55] <BrokenRobot> m: sub a($x) { $x<meow> = True; }; my $set = <foo bar>.SetHash; a $set; say $set

[14:55] <camelia> rakudo-moar d075c8: OUTPUT¬´SetHash.new(foo, meow, bar)‚ê§¬ª

[14:55] <lizmat> m: sub a(@a) { @a[0] = 42; dd @a }; a (my $ = 666,)   # immutable List containing a mutable container

[14:55] <camelia> rakudo-moar d075c8: OUTPUT¬´(42,)‚ê§¬ª

[14:56] <lizmat> BrokenRobot: yup, that looks right to my eyes, since it's a SetHash and not a Set

[14:56] <lizmat> m: sub a($x) { $x<meow> = True; }; my $set = <foo bar>.Set; a $set; say $set

[14:56] <camelia> rakudo-moar d075c8: OUTPUT¬´Cannot modify an immutable Set‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:56] <BrokenRobot> m: sub a($x) { $x = 72; }; my $set = 42; a $set; say $set

[14:56] <camelia> rakudo-moar d075c8: OUTPUT¬´Cannot assign to a readonly variable or a value‚ê§  in sub a at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:57] <BrokenRobot> Well, I guess my understanding of these things is different.

[14:59] <BrokenRobot> As in, SetHash, Array, Hash, Map, and Int are all single "things". If I'm receiving one in a sub and I didn't mark it as `is rw` or `is copy` I'm not supposed to be able to modify those "things"

[15:00] <geekosaur> this is where knowing the difference between mutable and immutable containers is important. specifically, an Array contains mutable cells.

[15:03] <lizmat> and a List generally doesn't

[15:04] <lizmat> also, you can push/unshift/pop/shift an Array, but not a List

[15:04] <geekosaur> although maybe there needs to be something like C's distinction between (const *thing) and (const *thing const), where the latter can also be written (* const thing const) with each const modifying the immediately preceding element

[15:04] <geekosaur> (....the flip side of which is that this is one of the things that perennially confuses new C programmers...)

[15:07] <psch> an Array is a single thing, yes, but that thing consists exclusively of mutable containers

[15:07] <lizmat> [Tux]: also note that the .perl doesn't return a left value

[15:08] <psch> assuming an imaginary 'is non-modifiable' trait for Parameters, would a <class A { has $.foo is rw }> remove the rw-ness of A.foo?

[15:10] <psch> or, even closer to the complaint, would that class' .foo be immutable when the Parameter that is was passed in is neither 'rw' nor 'copy'?

[15:10] <psch> *it

[15:11] <timotimo> nine: congrats on the pool!

[15:18] <llfourn> jnthn: no it's not quite the same: http://www.nntp.perl.org/group/perl.perl6.compiler/2016/07/msg13254.html

[15:21] <llfourn> gist for clarity: https://gist.github.com/LLFourn/96b8101af227fe6e08a647cf55709025

[15:21] <jnthn> llfourn: The significant part looks identical, though... :)

[15:21] <jnthn> The difference is in the bits below the GC

[15:21] <llfourn> oh ok # my c analysis is not strong

[15:21] <jnthn> The code path inside the GC looks the same. :)

[15:22] <llfourn> ok good :)

[15:22] <BrokenRobot> psch: yes, it would. If I want to write, I'd need to ask for it.

[15:22] <jnthn> So yeah, pretty sure it's the same thing. It's odd.

[15:22] <BrokenRobot> with `is copy` or `is rw` depending on whether I'd want to change the caller's thing

[15:24] <BrokenRobot> And it wasn't a complaint, just an observation.

[15:25] <psch> BrokenRobot: sorry, it read somewhat complainy for me, apologies

[15:25] <psch> BrokenRobot: i don't think that signatures should have that amount of power over a class' implementation, in any case

[15:26] <psch> i don't know if there's any language that does it like that, but i at least can't think of any

[15:31] <llfourn> jnthn: just looking at it again. It is a different line. Yours is 51 and mine is 55 in MVMCallCapture.c. Also mine is inside MVM_gc_mark_collectable.

[15:31] <psch> but then, "do others do it like that" is probably not necessarily a good enough reason

[15:31] <llfourn> no idea if that's significant :)

[15:32] <psch> the argument does definitely seem interesting from a purity perspective

[16:57] <dalek> roast: e0146de | usev6++ | S (3 files):

[16:57] <dalek> roast: Skip some tests on rakudo-j

[16:57] <dalek> roast: review: https://github.com/perl6/roast/commit/e0146de4fc

[17:44] <[Coke]> RT: 1325; CONC: 7; GLR: 6; JVM: 70; LHF: 1; LTA: 81; NEW: 879; NYI: 28; OSX: 6; PERF: 16; POD: 7; PRECOMP: 6; RFC: 23; SEGV: 23; STAR: 1; TESTNEEDED: 14; TODO: 8; UNI: 10; UNTAGGED: 657; WEIRD: 3

[17:45] <BrokenRobot> \o/

[17:45] <BrokenRobot> m: say 1337 - 1325

[17:45] <camelia> rakudo-moar d075c8: OUTPUT¬´12‚ê§¬ª

[17:45] <BrokenRobot> :| oh.. it felt like a larger number ^_^

[17:46] <BrokenRobot> I'm going throught he queue right now and there are actually a ton of tickets where someone in authority needs to make the decision on how stuff should be.

[17:47] <[Coke]> let's come up with a way to tag those.

[17:47] <[Coke]> make it easy for those who have to look at those tickets to find them.

[17:47] <BrokenRobot> I'm planning on making a bot that‚Äîamong other things‚Äîwould announce one of those in channel, asking to comment on the ticket.

[17:48] <[Coke]> what would trigger the bot?

[17:50] <BrokenRobot> The easy way is it just randomly mentions a ticket, about 2-3 times a day. A smarter version would make those mentions happen when the bots spots one of the core members online (it won't address them; just announce when it sees people active)

[17:50] <BrokenRobot> But the tag is good too

[17:55] <BrokenRobot> Tag is better actually. Anyone can tag. Core members can just search by tag.

[17:55] <BrokenRobot> And the bot‚Äîif it's birthed‚Äîcan just fetch tickets tagged as the tag.

[17:55] <[Coke]> -1 on randomly spamming tickets in here.

[17:57] <[Coke]> sounds like we two agree, then; just to decide the tag. we could pile onto [SPEC], or using something like [@LARRY]

[17:57] <[Coke]> I have a meeting, back in a bit.

[18:01] <BrokenRobot> Well, many of the things aren't really about a spec or such a high level as to involve Larry specifically.

[18:01] <gfldex> m: say '„Ä∂'.uniname

[18:01] <camelia> rakudo-moar d075c8: OUTPUT¬´CIRCLED POSTAL MARK‚ê§¬ª

[18:02] <BrokenRobot> [Coke]: for example, consider this ticket: https://rt.perl.org/Ticket/Display.html?id=128542  If I‚Äîa lowly user‚Äîwant to help our development of rakudo, I can't just get cracking on this ticket. Someone with authority needs to comment on whether "34\x[308]5".Int must throw or end up as 345.

[18:04] <BrokenRobot> And if that's done on all such tickets‚Äîin my head at least‚Äîmore people will end up doing PRs to Rakudop, since they'll know exactly what needs to be fixed. In fact, currently, I can't even add tests for that, but with the decision in place, a contributor can add tests even if they can't fix the bug itself

[18:09] <BrokenRobot> [ASKCORE] maybe

[18:18] <perlpilot> [Coke]: [@LARRY] sounds good to me.

[18:18] <perlpilot> BrokenRobot: @Larry isn't just TimToady.  It's an array (note the '@') of people who work on core-ish things

[18:19] <BrokenRobot> I see

[18:20] <perlpilot> I thought that had an entry in S99 somewhere, but apparently not.

[18:22] <geekosaur> probably should, it's got a long history --- but it did largely fall out of use the last couple years

[18:44] <BrokenRobot> And on the topic of tags. There is a ton of them, but the select box to choose them is tiny: http://i.imgur.com/wE8VBqJ.png

[18:44] <BrokenRobot> If we have an option to delete ones we don't use, it'd be easier to find the needed tags in the select box.

[18:44] <BrokenRobot> (web 1.0 websites)--

[18:45] <BrokenRobot> Hm. A "better RT" can be built as a user-script.

[18:46] <BrokenRobot> Close to something I had to do for $work recently. Mangle an ancient website into a modern one using a bunch of javascript to rewrite the site on load.

[18:48] <BrokenRobot> Write the same for RT, then sell it to Best Practical ^_^

[19:34] <tbrowder> japhb: ref specs PR 114, any problems with the PR?

[20:10] * lizmat is working on the Perl 6 Weekly

[20:10] <lizmat> let me know if you have anything of note that you think I may have missed

[20:13] <bartolin> psch: if you have a minute, could you take a look at PR 296 for NQP? It is meant to fix a dying test in S10-packages/precompilation.t which golfs down to this: https://gist.github.com/usev6/db5153f6b17a89078ebcb8ed4c44bddc

[20:22] <dalek> nqp: 8424757 | usev6++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[20:22] <dalek> nqp: Let nqp::rename replace existing target on JVM

[20:22] <dalek> nqp:

[20:22] <dalek> nqp: ... unless it is a non-empty directory.

[20:22] <dalek> nqp:

[20:22] <dalek> nqp: This matches the behaviour of nqp::rename on MoarVM

[20:22] <dalek> nqp: and it avoids errors during precompilation where an

[20:22] <dalek> nqp: older version should be replaced.

[20:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8424757b92

[20:22] <dalek> nqp: 6b8bf95 | lizmat++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java:

[20:22] <dalek> nqp: Merge pull request #296 from usev6/jvm_rename

[20:22] <dalek> nqp:

[20:22] <dalek> nqp: Let nqp::rename replace existing target on JVM

[20:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6b8bf95cac

[20:25] <bartolin> thanks :-) I think, I'll add tests for this behaviour to nqp and roast

[20:54] <Zoffix> Well, fuck me... My CLA letter got returned with "RETURN TO SENDER. ATTEMPTED‚ÄîNOT KNOWN. UNABLE TO FORWARD" sticker on it: http://i.imgur.com/Fv5opIF.jpg

[20:55] <Zoffix> With "-???" next to The Perl Foundation.

[20:55] <Zoffix> I knew it! The Perl Foundation is just a front for human trafficking :)

[20:55] <tadzik> wth

[20:55] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2016/07/11/2016-28-show-your-papers/

[20:56] <timotimo> fountatlon?

[20:58] <Zoffix> lizmat++ good weekly

[20:58] <Zoffix> Hey! I'm too young to be skilled in the obsolete art of making text with bare hands! That's my excuse :)

[21:02] <lizmat> Zoffix: I pinged Karen Pauly about your bounce

[21:04] <Zoffix> lizmat++ thanks

[21:07] <vendethiel> lizmat++

[21:29] <[Coke]> I thought that a scanned PDF would be acceptable, btw.

[21:29] <[Coke]> I could be wrong.

[21:31] <perlpilot> I'm pretty sure I emailed my CLA

[21:31] <Zoffix> m: say (-Int^..^Inf);

[21:31] <camelia> rakudo-moar d075c8: OUTPUT¬´Use of uninitialized value of type Int in numeric context  in block <unit> at <tmp> line 1‚ê§0^..^Inf‚ê§¬ª

[21:31] <Zoffix> m: say (-Int^..^Inf) eqv Int.Range

[21:31] <camelia> rakudo-moar d075c8: OUTPUT¬´Use of uninitialized value of type Int in numeric context  in block <unit> at <tmp> line 1‚ê§False‚ê§¬ª

[21:31] <Zoffix> m: say Int.Range

[21:31] <camelia> rakudo-moar d075c8: OUTPUT¬´-Inf^..^Inf‚ê§¬ª

[21:31] <Zoffix> ¬Ø\_(„ÉÑ)_/¬Ø

[21:32] <Zoffix> Oh ~_~ stupid typo

[21:32] <lizmat> Zoffix: fwiw, I snailmailed my CLA as well, and it didn't bounce

[21:33] <lizmat> now, do I remember what the address was I sent it to?  no :-(

[21:36] <cognominal> lizmat++

[22:02] <lizmat> good night, #perl6-dev

[22:03] <dalek> roast: b38fe5e | (Zoffix Znet)++ | S02-types/range.t:

[22:03] <dalek> roast: Inf.Range returns ^Inf..Inf

[22:03] <dalek> roast:

[22:03] <dalek> roast: RT#126990

[22:03] <dalek> roast: review: https://github.com/perl6/roast/commit/b38fe5e6db

[22:03] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126990

[22:03] <dalek> roast: 679a57f | (Zoffix Znet)++ | S02-types/ (2 files):

[22:03] <dalek> roast: Storing Inf/NaN in Int throws with proper error

[22:03] <dalek> roast:

[22:03] <dalek> roast: RT#126990

[22:03] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126990

[22:03] <dalek> roast: RT#127207 (dupe)

[22:14] <dalek> roast: 697b460 | (Zoffix Znet)++ | S02-types/infinity.t:

[22:14] <dalek> roast: Converting Inf/NaN to Int throws with correct message

[22:14] <dalek> roast:

[22:14] <dalek> roast: This removes the fudged tests that tested now-rejected behaviour discussed in

[22:14] <dalek> roast: RT#124453 and replaces them with the tests testing accepted behaviour.

[22:14] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=124453

[22:14] <dalek> roast: review: https://github.com/perl6/roast/commit/697b460581

[22:42] <dalek> roast: 8551d3a | (Zoffix Znet)++ | S02-types/infinity.t:

[22:42] <dalek> roast: Fix broken test

[22:42] <dalek> roast: review: https://github.com/perl6/roast/commit/8551d3afe1

[22:53] <Zoffix> Updated the min/max PR to reflect latest comments: https://github.com/rakudo/rakudo/pull/815

[22:53] <Zoffix> And I still hate GitHub's new fonts :(

[22:53] <Zoffix> And on that note...

[22:53] * Zoffix leaves to murder people

[23:16] <japhb> tbrowder: PR 114 is your original commit, is it not?  Or are my eyes deceiving me?
