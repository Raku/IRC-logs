[06:42] <[Tux]> This is Rakudo version 2016.05-63-gf80cc7e built on MoarVM version 2016.05-18-g1339332

[06:42] <[Tux]> test            19.847

[06:42] <[Tux]> test-t          12.249

[06:42] <[Tux]> csv-parser      22.120

[06:47] <[Tux]> This is Rakudo version 2016.05-63-gf80cc7e built on MoarVM version 2016.05-18-g1339332

[06:47] <[Tux]> test            18.958

[06:47] <[Tux]> test-t          11.880

[06:47] <[Tux]> csv-parser      22.242

[06:47] <[Tux]> so, no significant change since yesterday

[06:49] <nine> :/

[06:56] <lizmat> isn't this the first time in a long time that we're below 12 ?

[07:00] <nine> Well, there is a rather large margin of error. But true, we have not been < 12 for quite some time.

[07:08] <[Tux]> https://gist.github.com/Tux/10638a2d1249aecaa14d61754b7bce85

[07:13] <masak> by that account, we've been < 12 regularly :)

[07:14] <masak> though it does look like it was more common back in February...

[11:17] * cygx has seen recent improvements

[11:17] <cygx> cf https://gist.github.com/cygx/db998502d493dfae53c9

[11:17] <cygx> split is still horribly slow, though, especially when use with a regex

[11:17] <cygx> *used

[11:29] <|Tux|> cygx, you can use «my @foo = split @patterns, $string;»

[11:30] <|Tux|> if all entries in @patters are fixed strings, split will suddenly be fast :)

[11:33] <cygx> interesting, but note that the point of the exercise was a comparison between equivalent p5 and p6 code

[11:46] <cygx> the 'global' split using an array clocks in at 6.5s, so middle of the road (an order of magnitude faster that the slowest solution, but an order of magnitude slower than the fastest one)

[12:26] <timotimo> right, we have far too much overhead for regexes

[12:27] <timotimo> i think the fixed overhead for invocation and constructing the result object is what does it? perhaps?

[13:07] <cygx> timotimo: that's probably part of it, but note that splitting on "\t" takes 12s, compared to 2s using index and substr

[14:01] <[Coke]> RT: 1320; CONC: 7; GLR: 6; JVM: 69; LHF: 1; LTA: 75; NYI: 28; OSX: 6; PERF: 15; POD: 3; PRECOMP: 3; RFC: 24; SEGV: 21; STAR: 1; TESTNEEDED: 29; TODO: 9; UNI: 5; WEIRD: 3

[14:01] <[Coke]> there are 21 segfault tickets still open. :|

[14:03] <timotimo> how good are "reproducible builds"?

[14:03] <timotimo> wait, core dumps contain the binaries and debug symbols, wouldn't they?

[14:04] <[Coke]> hoelzro: what happened with RT #128069?

[14:06] <hoelzro> [Coke]: I reverted the change in 4f046de

[14:11] <[Coke]> ok. so can probably close out that ticket and the meta ticket that covered it? (or leave it open as an RFC for "should we re-apply" but then break the connection with the meta.0

[14:32] <hoelzro> [Coke]: hmm...I think we should ask lizmat

[14:39] <[Coke]> Yup, that's best.

[14:47] <hoelzro> .tell lizmat any thoughts on http://irclog.perlgeek.de/perl6-dev/2016-06-07#i_12621041 ?

[14:47] <hoelzro> is yoleaux not in here?

[14:47] <timotimo> no, only in #perl6

[14:47] <timotimo> we're also missing it in #moarvm and would also like to have it in #perl6-noise-gang

[18:27] <dalek> rakudo/nom: 1254bbe | coke++ | docs/release_guide.pod:

[18:27] <dalek> rakudo/nom: remove completed release

[18:27] <dalek> rakudo/nom:

[18:27] <dalek> rakudo/nom: (it's already listed in the historical section)

[18:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1254bbe090

[20:26] <dalek> roast: 95d79a7 | usev6++ | S09-subscript/multidim-assignment.t:

[20:26] <dalek> roast: Transform say statement into test

[20:26] <dalek> roast:

[20:26] <dalek> roast: (which fails on rakudo-j)

[20:26] <dalek> roast: review: https://github.com/perl6/roast/commit/95d79a765c

[20:40] <dalek> roast: 03acc01 | usev6++ | S09-subscript/multidim-assignment.t:

[20:40] <dalek> roast: Add reference to RT #128341

[20:40] <dalek> roast: review: https://github.com/perl6/roast/commit/03acc013cd
