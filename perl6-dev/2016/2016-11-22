[07:17] <[TuxCM]> This is Rakudo version 2016.11-21-gecc202e built on MoarVM version 2016.11-8-gb582aeb

[07:17] <[TuxCM]> csv-ip5xs        3.102

[07:17] <[TuxCM]> test            13.727

[07:17] <[TuxCM]> test-t           6.384

[07:17] <[TuxCM]> csv-parser      14.142

[07:24] <dalek> roast: 208b534 | usev6++ | S32-str/numeric.t:

[07:24] <dalek> roast: Fudge failing test for JVM, RT #130150

[07:24] <dalek> roast: review: https://github.com/perl6/roast/commit/208b5341a3

[07:24] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130150

[08:06] * [TuxCM] is now shaving yaks for FROGGS to get libffi installed on HP-UX 11.23/pa2.0w

[08:11] <[TuxCM]> ☑ Up m4 to 1.4.17

[08:12] <[TuxCM]> autoconf 2.69 fails quite a lot. needs investigation

[08:14] <dalek> rakudo/nom: 573ed59 | (Samantha McVey)++ | src/core/REPL.pm:

[08:14] <dalek> rakudo/nom: Make sure Readline loads input rc files for REPL

[08:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/573ed59716

[08:14] <dalek> rakudo/nom: c6d61f0 | (Samantha McVey)++ | src/core/REPL.pm:

[08:14] <dalek> rakudo/nom: Make sure we only load from these locations if we're not using Windows

[08:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c6d61f07dc

[08:14] <dalek> rakudo/nom: 1c8cff7 | lizmat++ | src/core/REPL.pm:

[08:14] <dalek> rakudo/nom: Merge pull request #922 from samcv/nom

[08:14] <dalek> rakudo/nom:

[08:15] <dalek> rakudo/nom: Make sure Readline loads inputrc config files

[08:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1c8cff7e99

[08:22] <[TuxCM]> ☑ Up sed to 4.2.2

[08:36] <psch> ConcreteRoleHOW is what's behind a punned role, isn't it?

[08:37] <psch> oh, no

[08:37] <psch> m: role R { }; say R.new.HOW.^name

[08:37] <camelia> rakudo-moar 1c8cff: OUTPUT«Perl6::Metamodel::ClassHOW␤»

[08:37] <psch> m: role R { }; say R.HOW.^name

[08:37] <camelia> rakudo-moar 1c8cff: OUTPUT«Perl6::Metamodel::ParametricRoleGroupHOW␤»

[08:37] <psch> huh

[08:38] <psch> m: role R { }; role S is R { }; say S.HOW.^name

[08:38] <camelia> rakudo-moar 1c8cff: OUTPUT«Perl6::Metamodel::ParametricRoleGroupHOW␤»

[08:38] <psch> m: role R { }; role S is R { }; say S.new.HOW.^name

[08:38] <camelia> rakudo-moar 1c8cff: OUTPUT«Perl6::Metamodel::ClassHOW␤»

[08:39] <psch> anyway, to not X/Y-problem myself, i'm looking into jvminterop for Interfaces

[08:40] <psch> and currently the most applicable path seems to be along the lines of a JavaInterHOW that implements unpunnable roles, backed by a Java Interface

[08:41] <psch> seeing as Interfaces are mostly constants and "you have to implement these methods" (plus default methods recently), that seems to fit pretty well

[08:42] <psch> oh, on that line i also feel inclined to ask whether we want to consider dropping java 1.7 support

[08:44] <psch> because, well, it's reached public end of support at 2015-04-14 2015

[08:45] <psch> i suppose it depends on what debian is doing too though, i'd hate to not have 1.8 on hack but having to develop for it... :)

[08:49] <psch> well, openjdk-8 is in jessie-backports apparently https://packages.debian.org/search?keywords=openjdk-8-jre

[08:56] <psch> moritz: is that feasible for hack?  that is, adding jessie-backports to sources.list and upgrading to openjdk8

[09:17] <dalek> rakudo/nom: bbbb2b6 | lizmat++ | src/core/native_array.pm:

[09:17] <dalek> rakudo/nom: shaped(int|num|str)array.EXISTS-POS at least 20% faster

[09:17] <dalek> rakudo/nom:

[09:17] <dalek> rakudo/nom: By rewriting in nqp ops: please note there is no optimization for

[09:17] <dalek> rakudo/nom: 1/2/3dimmed native shaped arrays yet

[09:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bbbb2b6842

[09:32] <lizmat> afk&

[09:37] <moritz> psch: yes

[09:38] <moritz> psch: I've added you to the sudo group; so after you re-login you should be able to do those changes

[09:39] <psch> oh geez, administrative responsibility /o\

[09:39] <moritz> psch: that's what you get for asking :-)

[09:40] <psch> uh, i don't think i remember my password, actually

[09:40] <psch> only been using ssh-key login

[09:40] * psch checks keepass

[09:41] <psch> ah, there it is, great

[09:42] <arnsholt> Thank god for password managers =)

[09:44] <psch> so, the question that remains is, do i change the default java to openjdk-8 or not

[09:44] <psch> i mean, backwards compat means there's prooobably no problem, right..?

[09:44] <moritz> just change the default, and see who cries :-)

[09:44] <moritz> tear-driven operations :-)

[09:46] <psch> alright, that's done

[09:46] <psch> now for building r-j with '-source 1.8' and see what happens

[11:29] <viki> samcv: wouldn't your Readline PR attempt to .new() a Failure or whatever `require` returns when it can't load a module?

[11:29] <psch> m: say (try { require URI }).WHAT

[11:29] <camelia> rakudo-moar bbbb2b: OUTPUT«Nil␤»

[11:29] <psch> m: say (try { require URI }).new

[11:29] <camelia> rakudo-moar bbbb2b: OUTPUT«Nil␤»

[11:29] <jnthn> m: say Nil.new

[11:29] <camelia> rakudo-moar bbbb2b: OUTPUT«Nil␤»

[11:29] <jnthn> m: say Nil.new === Nil

[11:29] <camelia> rakudo-moar bbbb2b: OUTPUT«True␤»

[11:29] <viki> I see

[11:30] <jnthn> Nil doesn't explode until it's gotta.

[11:31] <viki> samcv: would you add yourself to this file, unless you wish to appear as "samcv" in credits: https://github.com/rakudo/rakudo/blob/nom/CREDITS

[11:31] <samcv> ok thanks viki

[11:31] <psch> i think dalek also uses the file for substituting in commit reports?

[11:32] <psch> or is that AUTHORS..?

[11:32] <psch> ...or did AUTHORS migrate to CREDITS when i wasn't looking? :S

[11:33] <samcv> viki, well it only calls that if the module already exists

[11:33] <viki> samcv: alright :) Was just curious

[11:34] <samcv> i already tested it on brand new rakudo and 0 modules. yeah np

[11:34] <samcv> i was worried about that too :)

[11:34] <samcv> made sure it compiled even without the module present, then worked once i installed the module

[11:42] <samcv> ok viki done https://github.com/rakudo/rakudo/pull/923

[11:43] <dalek> rakudo/nom: b86c747 | (Samantha McVey)++ | CREDITS:

[11:43] <dalek> rakudo/nom: Add myself to CREDITS

[11:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b86c747f62

[11:43] <dalek> rakudo/nom: 4723b97 | (Zoffix Znet)++ | CREDITS:

[11:43] <dalek> rakudo/nom: Merge pull request #923 from samcv/nom

[11:43] <dalek> rakudo/nom:

[11:43] <dalek> rakudo/nom: Add myself to CREDITS as requested in #perl6-dev

[11:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4723b97d2a

[11:43] <viki> Thanks

[11:46] <samcv> glad to be a part of perl 6 :)

[11:46] <samcv> thank you all as well!

[11:46] <viki> \o/

[11:47] <samcv> I just hope i can contribute more as time goes on, and as my time allows. I think perl 6 is the programming language of the future

[11:48] <viki> :)

[11:49] <samcv> done some roast tests and got that REPL change, feeling good about that. Haven't been a contributor to open source projects before like 6 months ago. But makes me happy to contribute

[11:50] <samcv> anybody know the guy who made the Perl 6 FE syntax highlighter for Atom though? I submitted a pull request with fixes for lots of kinds of fancy quotes and Q[] things and Qx[] and some other things, and also multi line comments with #`{{ or #`((

[11:51] <samcv> seen he hasn't done anything on github or twitter since june or something though :\

[11:52] <samcv> madcapjake i guess his github name is

[11:52] <viki> Yeah, he's kinda dissapeared :)

[11:52] <viki> Worth bugging for a commit bit IMO, since that stuff is also used by GitHub's Perl 6 highlighter

[11:52] <samcv> yeah

[11:53] <samcv> was sad when i checked how long he's done anything in, cause i fixed a lot of things

[11:53] <samcv> https://github.com/MadcapJake/language-perl6fe/pull/42

[11:54] <samcv> Q[$something] used to highlight interpolated things like variables as well, and now that's fixed too

[11:55] <samcv> tho i forgot that in my example i think

[11:56] <samcv> got almost all fancy quotes working except for reversed, double right quote then double left quote, or similar for single quote just cause. would require more testing i think... to make sure it didn't inadvertantly mess up

[11:56] <jnthn> Pretty sure that I've run into at least a couple of the bugs you fixed while using Perl 6 FE.

[11:57] <jnthn> (And no, sadly I don't have write access to that repo either)

[11:57] <samcv> yeah only he does :\

[12:02] * viki just twitted to MadcapJake

[12:02] <viki> Hopefully, there's a smartphone somewhere blinking a notification :)

[12:02] <samcv> hopefully!

[12:02] <samcv> otherwise maybe i'll message him on linked in i see he's there too

[12:02] <samcv> he needs to give somebody else commit access or something :P

[12:47] <dalek> rakudo/nom: 4a711bc | lizmat++ | / (2 files):

[12:47] <dalek> rakudo/nom: Make 1dimmed native arrays at least 3x faster

[12:47] <dalek> rakudo/nom:

[12:47] <dalek> rakudo/nom: AT-POS: 3.2x, ASSIGN-POS: 3.8x, EXISTS-POS: 3.5x

[12:47] <dalek> rakudo/nom:

[12:47] <dalek> rakudo/nom: By adding and activating the shaped1(int|num|str)array roles

[12:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4a711bcd80

[12:48] <dalek> rakudo/nom: 302346e | seatek++ | CREDITS:

[12:48] <dalek> rakudo/nom: Viki asked me to add my details

[12:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/302346e956

[12:48] <dalek> rakudo/nom: 080630c | (Zoffix Znet)++ | CREDITS:

[12:48] <dalek> rakudo/nom: Merge pull request #924 from adaptiveoptics/patch-1

[12:48] <dalek> rakudo/nom:

[12:48] <dalek> rakudo/nom: Viki asked me to add my details

[12:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/080630cfea

[13:06] <MasterDuke> psch: fyi, i haven't really had time to work on it more, but building my branch with java 1.8 had no change

[13:06] <[Coke]> github? can always fork it, I suppose.

[13:07] <psch> MasterDuke: i wouldn't have java 1.8 expected to change it actually.  i'm pretty confident in my diagnosis -- i.e. ASM somehow doesn't read CONSTANT_Utf8 correctly from the InputStream -- but have no idea how to fix that

[13:08] <psch> MasterDuke: well, excpet maybe "we have to call other visit methods first", but i'd assume that the ClassReader already does that...

[13:08] <MasterDuke> well, for the heck of it i'll try asm 5.1 and java 1.8

[14:10] <lizmat> afk&

[14:22] <viki> m: say +"120e"

[14:22] <camelia> rakudo-moar 080630: OUTPUT«Cannot convert string to number: 'E' or 'e' must be followed by decimal (base-10) integer in '120e⏏' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[14:22] <viki> j: say +"120e"

[14:22] <camelia> rakudo-jvm 76b061: OUTPUT«Cannot convert string to number: 'E' or 'e' must be followed by decimal (base-10) integer in '120e⏏' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[14:24] <psch> 080630 vs 76b061

[14:24] * viki was looking at https://rt.perl.org/Ticket/Display.html?id=130150

[14:24] <viki> Will fix when I get home

[14:25] <psch> should be fine with a rakudo level fix i think

[14:25] <psch> probably even preferable

[14:35] <viki> Yeah, I already have an inkling of what is up. I never considered there may be nothing after 'e', so the code is trying to check `ord` of a char past string end

[15:49] <FROGGS> o/

[16:01] <viki> \o\

[17:00] * [Coke] wonders if we should remove use of autodie in our perl5 scripts to avoid issues on weirdo distros.

[17:01] <dalek> rakudo/nom: 17604e3 | (Zoffix Znet)++ | src/core/allomorphs.pm:

[17:01] <dalek> rakudo/nom: Fix java error when parsing Num with missing exponent part

[17:01] <dalek> rakudo/nom:

[17:01] <dalek> rakudo/nom: The fix to parse U+2212 minus[^1] did not account that there may not

[17:01] <dalek> rakudo/nom: be any characters after the "e", so the logic handling the sign was

[17:01] <dalek> rakudo/nom: attempting to get an ord() of a character outside of the string, triggering

[17:01] <dalek> rakudo/nom: java.lang.StringIndexOutOfBoundsException, yet being silent on MoarVM.

[17:01] <dalek> rakudo/nom:

[17:01] <dalek> rakudo/nom: Fix by checking our position is not past string end before ord()ing.

[17:01] <dalek> rakudo/nom:

[17:01] <dalek> rakudo/nom: Fixes RT#130150: https://rt.perl.org/Ticket/Display.html?id=130150

[17:01] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130150

[17:01] <dalek> rakudo/nom:

[17:01] <dalek> rakudo/nom: [^] https://github.com/rakudo/rakudo/commit/cb9df2bd40a10355d3bcc0679435

[17:01] <viki> https://github.com/rakudo/rakudo/commit/17604e3e4643442ba84ab5670ad7438ef04a5c31

[17:02] <viki> https://github.com/perl6/roast/commit/2836648481af39f5bc1474b056133b545372a02c

[17:02] <viki> lazy robot

[17:46] <[Coke]> "I know you are, but what am I?"

[17:48] <diakopter> "that's my name, don't wear it out"

[17:54] <[Coke]> diakopter: HEY!

[17:55] <[Coke]> how's it going?

[19:58] <dalek> rakudo/nom: 6ea6563 | (Bahtiar `kalkin-` Gadimov)++ | lib/Pod/To/Text.pm6:

[19:58] <dalek> rakudo/nom: perl6 --doc=Text show signature parameter pod

[19:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ea656395c

[19:58] <dalek> rakudo/nom: 689da7a | (Zoffix Znet)++ | lib/Pod/To/Text.pm6:

[19:58] <dalek> rakudo/nom: Merge pull request #925 from kalkin/nom

[19:58] <dalek> rakudo/nom:

[19:58] <dalek> rakudo/nom: perl6 --doc=Text show signature parameter pod

[19:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/689da7aa67

[20:18] <dogbert17> o/ anyone else having problems with t/spec/S04-declarations/constant.t breaking down with: MoarVM panic: Internal error: invalid thread ID 3 in GC work pass

[20:18] <viki> didn't have trouble today when I ran stresstest a few times

[20:19] <RabidGravy> Not the test, but I've seen the panic in actual code in the last week or so

[20:19] <dogbert17> hmm, I don't have more than 1.3 gigs of memory free in my vm, should be enough though

[20:19] <dogbert17> dogbert@dogbert-VirtualBox ~/repos/rakudo $ make t/spec/S04-declarations/constant2.t

[20:19] <dogbert17> rm -f -- perl6

[20:19] <dogbert17> cp -- perl6-m perl6

[20:20] <dogbert17> chmod -- 755 perl6

[20:20] <dogbert17> /usr/bin/perl t/harness5 --fudge --moar --keep-exit-code --verbosity=1 t/spec/S04-declarations/constant2.t

[20:20] <dogbert17> t/spec/S04-declarations/constant2.rakudo.moar ..

[20:20] <dogbert17> MoarVM panic: Internal error: invalid thread ID 3 in GC work pass

[20:20] <RabidGravy> also  AlexDaniel reported it in whateverable today, I think he has a golf

[20:21] <viki> Um, what's constant2.t? I don't see it in the repo

[20:21] <dogbert17> funny thing is, if i insert a 'sleep 1' after the plan statement, the problem goes away ?!?!

[20:21] <dogbert17> viki: a copy of constant (verbatim)

[20:22] <dogbert17> I was doing some experiments, trying to narrow it down but the run above is from a verbatim copy

[20:33] <dogbert17> trying 'valgrind make t/spec/S04-declarations/constant.t' gives the message 'MoarVM panic: Internal error: zeroed target thread ID in work pass'

[21:21] <dogbert17> heh, when I wiped lib/.precomp it segfaulted instead and when I reran it the MoarVM Panic returned

[21:23] <dogbert17> Program terminated with signal SIGSEGV, Segmentation fault.

[21:23] <dogbert17> #0  0xb74bc597 in MVM_gc_root_add_frame_registers_to_worklist (tc=0x903f450, worklist=0xc53df30, frame=0xd10a2e8) at src/gc/roots.c:402

[21:23] <dogbert17> 402                 MVM_gc_worklist_add(tc, worklist, &frame->work[i].o);

[21:27] <timotimo> that looks painful

[21:29] <timotimo> something you can do with valgrind?

[21:29] <dogbert17> I can try, used gdb so I have a good stack trace

[21:30] <dogbert17> check https://gist.github.com/dogbert17/ef341289d3343e111b5498b1ae975de9

[21:34] <timotimo> the backtrace is, unfortunately, not as helpful

[21:34] <dogbert17> :(

[21:34] <timotimo> it just shows where it explodes, but not what part of the code ends up writing a bogus pointer there

[21:35] <timotimo> the whole frame may be bogus, as it's just taking the address of a register in it ... or does worklist_add actually inspect the pointer's target, too?

[21:38] <dogbert17> it is strange, if you backlog a screenful you'll see that I had problems with t/spec/S04-declarations/constant.t

[21:39] <dogbert17> valgrind says 'MoarVM panic: Internal error: invalid thread ID 207067144 in GC work pass'

[21:41] <timotimo> well, that's not something valgrind says

[21:41] <timotimo> no messages prior to that?

[21:41] <timotimo> can you try configuring moarvm with --valgrind? it'll make the FSA a bit more robust. that's the piece of code we run for setting up that ->work[] thingie

[21:42] <dogbert17> ok, will do

[21:45] <dogbert17> now valgrind spits out 'Invalid Free'

[21:45] <timotimo> fantastic

[21:46] <dogbert17> MVM_fixed_size_free_at_safepoint (fixedsizealloc.c:286)

[21:46] <timotimo> i have an idea about that

[21:46] <dogbert17> program is still running

[21:46] <dogbert17> timotimo++

[21:46] <dogbert17> as soon as valgrind is done I'll put up a new gist

[21:46] <timotimo> when the FSA is asked to free something, it'll always get the size of the thing passed

[21:47] <timotimo> that's one optimi zation the FSA has over other allocators

[21:47] <timotimo> however, if you pass the wrong size, things will definitely go asplode

[21:47] <timotimo> there's a define in fixedsizealloc.c (or maybe fixedsizealloc.h) that turns on a debug mode that tracks if the right sizes are passed for freeing pointers

[21:48] <dogbert17> this takes forever ...

[21:48] <timotimo> if you enable that, we ought to have a much better idea of what's going on

[21:48] <timotimo> yes, valgrind is excruciatingly slow

[21:48] <dogbert17> I think you're gonna like this, hold on

[21:51] <dogbert17> https://gist.github.com/dogbert17/789bca68558a1b502e21731b3092aaff

[21:54] <dogbert17> is it this line: #include "memdebug.h"

[21:54] <timotimo> no

[21:54] <timotimo> it's a #define FIXEDSIZE_ALLOC_DEBUG 0 or something

[21:54] <timotimo> that we want to set to 1

[21:54] <dogbert17> #define FSA_SIZE_DEBUG 0 ?

[21:54] <timotimo> yes

[21:54] <dogbert17> set to 1 then?

[21:55] <dogbert17> I'll do that as well

[21:55] <timotimo> yup

[21:56] <dogbert17> does the rather bizarre valgrind output give any clues?

[21:57] <timotimo> bizarre?

[21:57] <timotimo> overlapping blocks seems troublesome

[21:58] <dogbert17> this didn't go too well

[21:58] <dogbert17> MoarVM panic: Fixed size allocator: wrong size in free

[21:58] <dogbert17> ==7596== Memcheck, a memory error detector

[21:58] <dogbert17> ==7596== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.

[21:58] <dogbert17> ==7596== Using Valgrind-3.10.1 and LibVEX; rerun with -h for copyright info

[21:58] <dogbert17> ==7596== Command: /home/dogbert/repos/rakudo/install/bin/moar --full-cleanup --execname=./perl6-valgrind-m --libpath=/home/dogbert/repos/rakudo/install/share/nqp/lib --libpath=. /home/dogbert/repos/rakudo/perl6.moarvm -I lib t/spec/S04-declarations/constant.rakudo.moar

[21:58] <dogbert17> ==7596==

[21:58] <dogbert17> MoarVM panic: Fixed size allocator: wrong size in free

[21:58] <timotimo> okay, so it is how i assumed

[21:58] <timotimo> somewhere we're not tracking the size correctly

[22:01] <dogbert17> now it says that immediately ifen if I run something as simple as e.g.    ./perl6-m -e ' say "Hallo"'

[22:01] <dogbert17> s/ifen/even/

[22:01] <timotimo> interesting

[22:01] <timotimo> i wonder if a recent commit i made made things super asplode

[22:03] <dogbert17> dogbert@dogbert-VirtualBox ~/repos/rakudo $ ./perl6-m --stagestats -e ' say "Hallo"'

[22:03] <dogbert17> Stage start      :   0.000

[22:03] <dogbert17> Stage parse      : MoarVM panic: Fixed size allocator: wrong size in free

[22:04] <timotimo> i can't reproduce the issue :\

[22:04] <timotimo> what versions of all the things do you have?

[22:04] <dogbert17> This is Rakudo version 2016.11-31-g17604e3 built on MoarVM version 2016.11

[22:04] <dogbert17> running on 32 bit vm

[22:05] <timotimo> oh, 32bit ... i wonder if that has anything to do with it

[22:05] <dogbert17> there are plenty of warnings when building

[22:06] <dogbert17> warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]

[22:10] <dogbert17> several others have stumbled upon mysterious MoarVM Panics recently

[22:11] <timotimo> oh shit, oh shit ... is this all my fault?

[22:11] <timotimo> can you show these warnings?

[22:12] <dogbert17> src/profiler/log.c: In function ‘MVM_profile_log_allocated’:

[22:12] <dogbert17> src/profiler/log.c:230:31: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]

[22:12] <dogbert17> MVMuint32 distance = ((MVMuint64)tc->nursery_alloc - (MVMuint64)obj);

[22:12] <dogbert17> ^

[22:12] <dogbert17> src/profiler/log.c:230:62: warning: cast from pointer to integer of different size [-Wpointer-to-int-cast]

[22:12] <dogbert17> MVMuint32 distance = ((MVMuint64)tc->nursery_alloc - (MVMuint64)obj);

[22:12] <dogbert17> there are more

[22:13] <timotimo> oh, ok. we don't have to care about the profiler now

[22:13] <timotimo> can you gist all warnings?

[22:14] <dogbert17> ok, sec

[22:16] <dogbert17> https://gist.github.com/dogbert17/8a6ea2b16f1d730ccee0705b36c8d6c4

[22:20] <timotimo> none of those seem actually dangerous at all

[22:20] <dogbert17> phew

[22:30] <dogbert17> fresh install, no dice: MoarVM panic: Internal error: invalid thread ID 223027432 in GC work pass

[22:35] <dogbert17> './perl6 t/spec/S04-declarations/constant.rakudo.moar' always works './perl6 -I lib t/spec/S04-declarations/constant.rakudo.moar' always fails with a panic

[23:07] <diakopter> dogbert17: how did you manage to spawn 223027432 threads?

[23:07] <diakopter> I'm kidding. it just means junk data where it thought an object could be

[23:07] <diakopter> (gc error)

[23:08] <dogbert17> :-) I was hoping that my first gist would yield some clues but apparently not. https://gist.github.com/dogbert17/ef341289d3343e111b5498b1ae975de9

[23:42] <diakopter> junk data there *probably* means the object was moved but some pointer to it wasn't updated

[23:47] <diakopter> (therefore, the allocator (and GC) ran without a variable's address being added to the list of pointers to update)
