[00:00] <notviki> m: dd [ &infix:<->.candidates.elems, &infix:<−>.candidates.elems ]

[00:00] <camelia> rakudo-moar b306de: OUTPUT«[20, 2]␤»

[00:00] <AlexDaniel> :O

[00:00] <AlexDaniel> right

[00:00] <AlexDaniel> so there's just no Range − something for −

[00:01] <AlexDaniel> but what about other 18 cases?

[00:01] <notviki> They all work out, except for Date

[00:02] <notviki> m: dd Date.today - 42

[00:02] <camelia> rakudo-moar b306de: OUTPUT«Date.new(2016,11,12)␤»

[00:02] <notviki> m: dd Date.today − 42

[00:02] <camelia> rakudo-moar b306de: OUTPUT«Cannot resolve caller Numeric(Date: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[00:03] <AlexDaniel> notviki: interesting, right? I've never thought that it would be so hard to support ∞ in addition to Inf and − in addition to -

[00:04] <samcv> 10

[00:04] <samcv> oops

[00:04] <AlexDaniel> well, 10 is the right answer

[00:04] <samcv> good!

[00:05] <dalek> rakudo/nom: 91af128 | (Zoffix Znet)++ | src/core/ (2 files):

[00:05] <dalek> rakudo/nom: Fix infix:<U+2212> and prefix:<U+2212>

[00:05] <dalek> rakudo/nom:

[00:05] <dalek> rakudo/nom: Currently, U+2212 infix op exists solely as a numerical op, but we

[00:05] <dalek> rakudo/nom: use it for stuff like Ranges and Dates too. For Ranges, it treats

[00:05] <dalek> rakudo/nom: the Range as a Cool. For Dates multi resolution fails.

[00:05] <dalek> rakudo/nom:

[00:05] <dalek> rakudo/nom: Fix by defining a generic op that just forwards everything to texas version.

[00:05] <dalek> rakudo/nom: Also do the same to prefix:<U+2212> to preemptively avoid future bugs.

[00:05] <dalek> rakudo/nom: Currently it's defined for a single arg, but we teach it to just pass along

[00:05] <dalek> rakudo/nom: all the args for prefix:<->

[00:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/91af128243

[00:06] <notviki> AlexDaniel: the ∞ isn't bad, but − is just insane. It's all over the place.

[00:07] <dalek> roast: 7a62089 | (Zoffix Znet)++ | S03-operators/u2212-minus.t:

[00:07] <dalek> roast: Add separate file for U+2212 minus test

[00:07] <dalek> roast:

[00:07] <dalek> roast: Currently include tests for infix:<−> and prefix:<−> test, but other

[00:07] <dalek> roast: things involving − may be well moved here.

[00:07] <dalek> roast: review: https://github.com/perl6/roast/commit/7a6208902c

[00:08] <dalek> rakudo/nom: 43ebc63 | (Zoffix Znet)++ | t/spectest.data:

[00:08] <dalek> rakudo/nom: Add S03-operators/u2212-minus.t to test files to run

[00:08] <dalek> rakudo/nom:

[00:08] <dalek> rakudo/nom: Tests for stuff involving U-2212 minus

[00:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/43ebc63a0a

[00:09] <samcv> notviki++

[00:09] <AlexDaniel> notviki: perhaps there's a way to run every test that has - in it with −

[00:10] <AlexDaniel> and same with every other non-texas operator

[00:10] <notviki> would be nice

[00:44] <ugexe> when multiple threads encounter a locked lock, is it safe to assume that that they will be allowed entry in the order they reach the lock?

[00:54] <RabidGravy> dunno

[00:54] <RabidGravy> I'm not going to look in the code to find out

[01:10] <dalek> roast: 0fec90b | samcv++ | S15-nfg/GraphemeBreakPropertyTest-gen.p6:

[01:10] <dalek> roast: Clean up the Grapheme Break Test script

[01:10] <dalek> roast: review: https://github.com/perl6/roast/commit/0fec90b2d8

[01:10] <dalek> roast: 9920a6e | samcv++ | S15-nfg/GraphemeBreak (2 files):

[01:10] <dalek> roast: Change the name of the output file to be the same as the source test

[01:10] <dalek> roast:

[01:10] <dalek> roast: The file we generate the tests from is GraphemeBreakTest.txt

[01:10] <dalek> roast: Let's call it the same.

[01:10] <dalek> roast: review: https://github.com/perl6/roast/commit/9920a6e32d

[01:10] <dalek> roast: 605d412 | samcv++ | S15-nfg/GraphemeBreakTest.t:

[01:10] <dalek> roast: Add in the new test file

[01:10] <dalek> roast: review: https://github.com/perl6/roast/commit/605d412b1a

[01:14] <samcv> https://github.com/rakudo/rakudo/pull/969 renamed the test, if somebody can merge

[01:16] <samcv> once the merge is done i'll remove the old testname

[01:20] <samcv> almost done with my fun script that will fudge all your tests for you in a file

[01:23] <dalek> rakudo/nom: 286e7af | samcv++ | t/spectest.data:

[01:23] <dalek> rakudo/nom: Update spectest.data to use the renamed GraphemeBreakTest.t

[01:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/286e7afe57

[01:23] <dalek> rakudo/nom: aa00700 | (Zoffix Znet)++ | t/spectest.data:

[01:23] <dalek> rakudo/nom: Merge pull request #969 from samcv/GraphemeBreakTest2

[01:23] <dalek> rakudo/nom:

[01:23] <dalek> rakudo/nom: Update spectest.data to use the renamed GraphemeBreakTest.t

[01:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aa007004e1

[01:23] <notviki> samcv: done

[01:23] <samcv> sweet

[01:23] <dalek> rakudo/nom: 266a168 | (Zoffix Znet)++ | t/spectest.data:

[01:23] <dalek> rakudo/nom: Align test category tag

[01:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/266a168b86

[01:24] <dalek> roast: c058839 | samcv++ | S15-nfg/GraphemeBreakPropertyTest.t:

[01:24] <dalek> roast: Remove old GraphemeBreakPropertyTest.t

[01:24] <dalek> roast:

[01:24] <dalek> roast: Now that the new name is in spectest.data for Rakudo.

[01:24] <dalek> roast: review: https://github.com/perl6/roast/commit/c058839d92

[01:48] <samcv> hmm so far my super-fudger.p6 will double fudge tests and doesn't pay attention to things already fudged… but it's working very nicely otherwise. just need to fix that part

[01:48] <notviki> super fudger? What does it do?

[01:49] <samcv> it runs all the tests and fudges any that don't passs

[01:49] <samcv> that's how i fudged 57 of the 750 or so tests for the test file i just added today

[01:49] <samcv> would be cool if it could unfudge tests too

[01:50] <notviki> IIRC we have that.

[01:50] <samcv> atm it's kind of basic, only works for single line tests

[01:50] <samcv> do we

[01:50] <notviki> the second one I mean, the unfudger

[01:50] <samcv> oh

[01:50] <samcv> ok

[01:50] <notviki> tools/autounfudge.pl maybe?

[01:50] <samcv> there is no tools folder?

[01:50] <samcv> or in rakudo?

[01:50] <notviki> in rakudo repo

[01:51] <samcv> kk

[01:55] <samcv> ok nice i got it working :)

[01:57] <samcv> and not double fudging tests and such

[01:58] <samcv> should I add it to roast? i mean you can specify

[01:58] <samcv> Usage:

[01:58] <samcv> ./super-fudger.p6 <test-file> <backend> <fudge-type> <message>

[01:58] <samcv> it's implementation agnostic

[01:58] <notviki> Sure, why not.

[01:59] <samcv> could be useful especially the autogenerated tests. since I need to regenerate 4 more tests for unicode 9

[02:00] <dalek> roast: 7833fb5 | samcv++ | super-fudger.p6:

[02:00] <dalek> roast: Add super-fudger.p6, to fudge ALL failing tests in a .t file

[02:00] <dalek> roast:

[02:00] <dalek> roast: At the moment only works on tests that can be tested as stand-alone

[02:00] <dalek> roast: lines. If the tests are already fudged it will not try and re-fudge

[02:00] <dalek> roast: them.

[02:00] <dalek> roast: review: https://github.com/perl6/roast/commit/7833fb57ac

[02:02] <samcv> have to check out one of the tests S15-nfg/test-gen.p6 generates. cause it fails 498/500 now. passed all 500 before

[02:04] <samcv> unless something huge changed. agh

[02:04] <samcv> can't be right

[02:09] <samcv> ok if i generate them again from unicode 8.0, they still fail... wtf

[02:14] <samcv> .tell jnthn when I try and generate with roast/S15-nfg/test-gen.p6 only one of the tests (mass-chars.t) actually seem to generate more than 2 passing tests, the rest all fail with either UCD 8.0 or UCD 9.0

[02:14] <yoleaux2> samcv: I'll pass your message to jnthn.

[02:36] <dalek> roast: 3916198 | samcv++ | S15-unicode-information/uniprop.t:

[02:36] <dalek> roast: uniprop: add tests for Math and Grapheme_Extend

[02:36] <dalek> roast: review: https://github.com/perl6/roast/commit/391619895a

[02:36] <dalek> roast: d889fd2 | samcv++ | S15-unicode-information/uniprop.t:

[02:36] <dalek> roast: uniprop: add tests for Hyphen property, and more rigorous Dash tests

[02:36] <dalek> roast: review: https://github.com/perl6/roast/commit/d889fd2ee2

[02:37] <samcv> hmm maybe for the Emoji ZWJ sequences we can still use uniprop, but just call some other nqp routine to verify it or something

[02:38] <samcv> have a multi for that specific property, so you can check the property of a string... idk. or have its own routine... but that seems a bit odd

[02:41] <notviki> hm... either I'm too wasted or we have a bug in DateTime.in-timezone :/

[02:46] <notviki> # Failed test 'DateTime - Duration = DateTime'

[02:46] <notviki> # at t/spec/S32-temporal/DateTime.t line 818

[02:46] <notviki> # expected: DateTime.new(2015,12,25,3,6,7.77,:timezone(50400))

[02:46] <notviki> #      got: DateTime.new(2015,12,24,8,6,7.77,:timezone(-18000))

[02:46] <samcv> notviki, regression?

[02:46] <notviki> The test failure... no, that's a new test, but it's very simple code and I expected the test to pass..

[02:46] <notviki> ohhh...

[02:46] <notviki> the former hypothesis held true :}

[02:46] <samcv> :P

[02:54] <travis-ci> Rakudo build failed. Zoffix Znet 'Align test category tag'

[02:54] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/186467955 https://github.com/rakudo/rakudo/compare/aa007004e159...266a168b86c6

[02:54] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[02:55] <samcv> weird it looks like it only failed on one of the platforms

[02:56] <samcv> t/04-nativecall/14-rw-attrs.t ............ Failed 16/16 subtests

[02:56] <samcv> but was fine on the other…

[02:56] <notviki> flapper :(

[02:57] <samcv> notviki, you can get travis to retry a test if it fails

[02:57] <notviki> It failed only on one run on Linux. The bottom ones are JVM builds

[02:57] <notviki> (they're not reported in the channel)

[02:57] <samcv> oh

[02:57] <samcv> yeah

[02:57] <samcv> i know that

[02:57] <notviki> samcv: how do we get travis to retry a test if it fails?

[02:58] <samcv> just put travis_retry in front of the command to run :D

[02:58] <notviki> :o

[03:01] <dalek> rakudo/nom: 9f07e1a | (Zoffix Znet)++ | .travis.yml:

[03:01] <dalek> rakudo/nom: Add travis_retry samcv++

[03:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9f07e1a56a

[03:01] <dalek> rakudo/nom: d25cfff | (Zoffix Znet)++ | src/core/DateTime.pm:

[03:01] <dalek> rakudo/nom: Remove trailing whitespace

[03:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d25cfff863

[03:03] <dalek> rakudo/nom: 6b850ba | (Zoffix Znet)++ | src/core/DateTime.pm:

[03:03] <dalek> rakudo/nom: Implement infix +/- for DateTime/Duration

[03:03] <dalek> rakudo/nom:

[03:03] <dalek> rakudo/nom: Per discussion[^1], add + and - infix ops to handle:

[03:03] <dalek> rakudo/nom: DateTime - DateTime = Duration; DateTime - Duration = DateTime;

[03:03] <dalek> rakudo/nom: DateTime + Duration = DateTime; Duration + DateTime = DateTime;

[03:03] <dalek> rakudo/nom:

[03:03] <dalek> rakudo/nom: [1] https://irclog.perlgeek.de/perl6/2016-12-22#i_13786280

[03:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6b850babd5

[03:03] <travis-ci> Rakudo build failed. Zoffix Znet 'Add travis_retry samcv++'

[03:03] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/186475753 https://github.com/rakudo/rakudo/compare/266a168b86c6...9f07e1a56a0f

[03:03] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[03:03] <dalek> roast: 0a65ed7 | (Zoffix Znet)++ | S32-temporal/DateTime.t:

[03:03] <dalek> roast: Remove trailing whitespace

[03:03] <dalek> roast: review: https://github.com/perl6/roast/commit/0a65ed75c7

[03:05] <dalek> roast: 2188e7e | (Zoffix Znet)++ | S32-temporal/DateTime.t:

[03:05] <dalek> roast: Test +/- infixes on DateTime/Duration

[03:05] <dalek> roast:

[03:05] <dalek> roast: Implemented in https://github.com/rakudo/rakudo/commit/6b850babd5

[03:05] <dalek> roast: Discussion: https://irclog.perlgeek.de/perl6/2016-12-22#i_13786280

[03:05] <dalek> roast: review: https://github.com/perl6/roast/commit/2188e7ef52

[03:06] <travis-ci> Rakudo build failed. Zoffix Znet 'Remove trailing whitespace'

[03:06] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/186475774 https://github.com/rakudo/rakudo/compare/9f07e1a56a0f...d25cfff8636c

[03:06] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[03:08] <notviki> samcv: any idea how to fix it?

[03:10] <travis-ci> Rakudo build failed. Zoffix Znet 'Implement infix +/- for DateTime/Duration

[03:10] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/186475919 https://github.com/rakudo/rakudo/compare/d25cfff8636c...6b850babd5e8

[03:10] <dalek> rakudo/nom: a2cb929 | (Zoffix Znet)++ | .travis.yml:

[03:10] <dalek> rakudo/nom: Try to make travis_retry work

[03:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a2cb92944f

[03:10] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[03:12] <notviki> on second thought....

[03:13] <dalek> rakudo/nom: a9272bf | (Zoffix Znet)++ | .travis.yml:

[03:13] <dalek> rakudo/nom: Remove travis_retry

[03:13] <dalek> rakudo/nom:

[03:13] <dalek> rakudo/nom: Because it'll mute flopping tests. The failures *do* represent problems,

[03:13] <dalek> rakudo/nom: as opposed to failing due to some reason not under our control.

[03:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a9272bf14d

[03:20] <samcv> uhm hi i'm back now

[03:20] <samcv> let me see

[03:21] <samcv> notviki, don't put it in quotes

[03:21] <samcv> just travis_retry whatever here

[03:21] <samcv> not travis_retry "whatever here"

[03:22] <samcv> at least that's how I did it and it worked for the highlighter

[03:22] <samcv> or probably put it ALL in quotes

[03:22] <samcv> not just the second part

[03:22] <samcv> one of the two

[03:24] <samcv> notviki,, uhm could using GCC 4.6 have anything to do with tests flapping? or probably not. I think not but. do we know why it is flapping?

[03:26] <samcv> would we want to build with gcc-5 if we had the option to?

[03:28] * notviki has no idea

[03:30] <samcv> i had to get a later gcc for the docs travis because it didn't support the newer C++ standard

[04:14] <travis-ci> Rakudo build passed. Zoffix Znet 'Try to make travis_retry work'

[04:14] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/186476643 https://github.com/rakudo/rakudo/compare/6b850babd5e8...a2cb92944fbb

[04:29] <samcv> notviki, just got the person who makes the font I use for IRC have different lengths of dash for − minus sign than hyphen :) so i am happy

[04:31] <moritz> samcv++ # spreading the Unicode love

[04:32] <samcv> this is the font if you're curious https://camo.githubusercontent.com/7c01c7f3233553bfbd1133f1e48bbbbe6789823a/68747470733a2f2f6c757a2e6c752f746577692f746577692e706e67 https://github.com/lucy/tewi-font

[04:32] <samcv> first link is a picture btw

[04:42] <travis-ci> Rakudo build passed. Zoffix Znet 'Remove travis_retry

[04:42] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/186476894 https://github.com/rakudo/rakudo/compare/a2cb92944fbb...a9272bf14d43

[04:48] <samcv> woo. got it actually building with gcc-5. gotta figure out how to make it not do that on mac or whatever but might be nice to have it use ubuntu 14.04.5 not like 12.whatever

[06:45] <dalek> roast: 359680b | samcv++ | S15-unicode-information/uniprop.t:

[06:45] <dalek> roast: uniprop: add tests for 8 more properties

[06:45] <dalek> roast:

[06:45] <dalek> roast: Extender, Grapheme_Base, Join_Control, Grapheme_Link

[06:45] <dalek> roast: General_Category, Joining_Group, Joining_Type, Sentence_Break

[06:45] <dalek> roast: review: https://github.com/perl6/roast/commit/359680bc45

[07:00] <dalek> roast: b6f2fa4 | samcv++ | S15-unicode-information/uniprop.t:

[07:00] <dalek> roast: uniprop: Fix error in one of the tests

[07:00] <dalek> roast: review: https://github.com/perl6/roast/commit/b6f2fa4500

[07:12] <samcv> notviki, I have my changed .travis.yml that uses newer versions of GCC and other things if it is wanted

[07:12] <samcv> working properly on Linux and MacOS platforms

[07:12] <samcv> and the JVM ones are failing for the same reason as they were failing before

[07:21] <samcv> actually why not go to GCC6 or something i guess

[07:55] <dalek> roast: dd0c572 | samcv++ | S15-unicode-information/uniprop.t:

[07:55] <dalek> roast: uniprop: add tests for 10 more properties

[07:55] <dalek> roast:

[07:55] <dalek> roast: Deprecated White_Space Ideographic Radical Bidi_Mirrored

[07:55] <dalek> roast: Variation_Selector ID_Continue Sentence_Terminal ISO_Comment

[07:55] <dalek> roast: Emoji_Presentation

[07:55] <dalek> roast: review: https://github.com/perl6/roast/commit/dd0c572dc7

[08:21] <samcv> almost half way through the properties

[08:22] <samcv> trying to get a full 1/2 of them done by tonight

[08:57] <lizmat> good *, #perl6-dev!

[08:57] <lizmat> Files=1157, Tests=53982, 188 wallclock secs (10.77 usr  4.48 sys + 1124.51 cusr 121.50 csys = 1261.26 CPU)

[10:11] <[Tux]> o/

[10:11] <[Tux]> This is Rakudo version 2016.12-84-ga9272bf14 built on MoarVM version 2016.12-19-ge2ffc358

[10:11] <[Tux]> csv-ip5xs        3.065

[10:11] <[Tux]> test            13.410

[10:11] <[Tux]> test-t           5.514

[10:11] <[Tux]> csv-parser      14.489

[10:12] <samcv> [Tux], help

[10:13] <[Tux]> 42

[10:13] <samcv> XD

[10:13] <samcv> those numbers look smaller

[10:13] <timotimo> huggable: speed

[10:13] <huggable> timotimo, http://tux.nl/Talks/CSV6/speed4.html

[10:13] <timotimo> buggable: speed

[10:13] <buggable> timotimo, ▄▄▅▆▅▅▅▆▄▅▅▄▅▄▆▅▅▅▅▄▄▄▄▄▄▄▄▄▄█▃▃▃▄▃▃▃▃▃▃▃▃▃▃▃▃▂▂▂▁ data for 2016-12-02–2016-12-24; variance: 5.514s–7.592s

[10:13] <timotimo> look at that dip!

[10:15] <lizmat> PSA: I've written a blog post that can be used for today's Advent calendar slot

[10:16] <lizmat> those of you with access, please let me know of any comments / suggestions

[10:16] <lizmat> I will publish this in 45 minutes unless ab6tract appears and posts his planned advent post

[10:20] <dalek> rakudo/nom: 4ff2fb2 | samcv++ | / (2 files):

[10:20] <dalek> rakudo/nom: uniprop: set ISO_Comment as Str type

[10:20] <dalek> rakudo/nom:

[10:20] <dalek> rakudo/nom: Since Unicode 5.2.0 this value is required to return an empty string.

[10:20] <dalek> rakudo/nom: Make sure we do this.

[10:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4ff2fb245a

[10:20] <dalek> rakudo/nom: 742d1b9 | lizmat++ | / (2 files):

[10:20] <dalek> rakudo/nom: Merge pull request #971 from samcv/ISO_Comment

[10:20] <dalek> rakudo/nom:

[10:20] <dalek> rakudo/nom: uniprop: set ISO_Comment as Str type

[10:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/742d1b908d

[10:20] <samcv> woot

[10:26] <dalek> roast: 701771e | samcv++ | S15-unicode-information/uniprop.t:

[10:26] <dalek> roast: uniprop: add tests for Decomposition_Type, NFC_Quick_Check

[10:26] <dalek> roast: review: https://github.com/perl6/roast/commit/701771e68c

[10:26] <dalek> roast: 8dedf60 | samcv++ | S15-unicode-information/uniprop.t:

[10:26] <dalek> roast: uniprop: unfudge ISO_Comment property

[10:26] <dalek> roast:

[10:26] <dalek> roast: rakudo.moar fixed in rakudo/rakudo@4ff2fb2

[10:26] <dalek> roast: review: https://github.com/perl6/roast/commit/8dedf60065

[10:52] <lizmat> https://perl6advent.wordpress.com/2016/12/24/day-24-one-year-on/  # last post

[11:09] <samcv> don't say last :(

[11:11] <lizmat> of this year  :-)

[11:11] <samcv> perl 6 advent for 100 years

[11:43] <timotimo> yew please

[11:43] <timotimo> yes*

[13:08] <notviki> samcv: I've no opinion on that travis change. FWIW, gcc version on my box is gcc version 4.8.4 ....

[13:10] <samcv> we could always keep the gcc at 4 though. but bumping to ubuntu 14.04 would be more in line with what people have, so hmm

[13:10] <samcv> yeah gcc shouldn't matter as much imo

[13:10] <samcv> but the other things on the system will be 2+?? years newer? not sure

[13:11] <notviki> but I can argue either way: I'm not testing on gcc 6, but travis would :)

[13:13] <notviki> What does that change from "language perl" to "language" java" give?

[13:13] * notviki is opposed to that change on emotional level :)

[13:15] <samcv> it makes sure java is all setup properly

[13:15] <samcv> before we had it for a newer perl version. but with 14.04 we don't need that

[13:15] <samcv> and this saves us from jvm stuff.

[13:15] <samcv> without that it didn't have some of the java things needed to build in the path even if installed

[13:17] <samcv> 14.04 was released

[13:17] <samcv> April 17, 2014 April 26, 2012 for precise

[13:17] <samcv> so 2 years newer

[13:17] <samcv> hehe notviki

[13:18] <notviki> lizmat: FWIW, there's a typo in first sentence "thing that are"

[13:20] <lizmat> oops, notviki++

[13:21] <lizmat> notviki: can you live with my advent post ?

[13:22] <lizmat> if not, you need to nudge ab6tract a bit mor  :-)

[13:22] <lizmat> *more

[13:23] <lizmat> afk for the rest of the day&

[13:27] <notviki> lizmat++ good post

[13:27] <notviki> lizmat: yeah, I can live. I just felt bad for ab6stract because it was I who told them they can delay their post :}

[13:28] <dalek> rakudo/nom: f0aa65e | samcv++ | / (2 files):

[13:28] <dalek> rakudo/nom: Fix bug in makeUNIPROP.p6 causing it not to generate 2 props

[13:28] <dalek> rakudo/nom:

[13:28] <dalek> rakudo/nom: I forgot to flush the code generator function at the end, so it

[13:28] <dalek> rakudo/nom: ended up missing the last two properties:

[13:28] <dalek> rakudo/nom: 'Full_Composition_Exclusion' and 'Canonical_Combining_Class'

[13:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f0aa65e5eb

[13:28] <dalek> rakudo/nom: 4ff317e | (Zoffix Znet)++ | / (2 files):

[13:28] <dalek> rakudo/nom: Merge pull request #972 from samcv/uniprop-make-fix

[13:28] <dalek> rakudo/nom:

[13:28] <dalek> rakudo/nom: Fix bug in makeUNIPROP.p6 causing it not to generate 2 props

[13:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4ff317e173

[13:29] <dalek> rakudo/nom: 4b6f4e6 | samcv++ | .travis.yml:

[13:29] <dalek> rakudo/nom: Travis CI: Use Ubuntu 14.04 instead of 12.04 and GCC 6 instead of 4

[13:29] <dalek> rakudo/nom:

[13:29] <dalek> rakudo/nom: Use a much newer Ubuntu version and use a much newer GCC.

[13:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4b6f4e6411

[13:29] <dalek> rakudo/nom: 175e3d1 | (Zoffix Znet)++ | .travis.yml:

[13:29] <dalek> rakudo/nom: Merge pull request #970 from samcv/gcc-5

[13:29] <dalek> rakudo/nom:

[13:29] <dalek> rakudo/nom: Travis CI: build on Ubuntu 14.04 instead of 12.04 and use GCC 6

[13:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/175e3d1bd5

[13:32] <samcv> sweet :D

[13:44] <dalek> roast: e8b513a | samcv++ | S15-unicode-information/uniprop.t:

[13:44] <dalek> roast: uniprop: add tests for two more properties

[13:44] <dalek> roast:

[13:44] <dalek> roast: Full_Composition_Exclusion Changes_When_NFKC_Casefolded

[13:44] <dalek> roast: review: https://github.com/perl6/roast/commit/e8b513a8f2

[13:52] <dalek> roast: a529332 | (Zoffix Znet)++ | S32-str/parse-base.t:

[13:52] <dalek> roast: Greatly simplify parse-base tests

[13:52] <dalek> roast:

[13:52] <dalek> roast: Do not duplicate tests for method and sub forms, instead use a loop

[13:52] <dalek> roast: that loops over the sub and the method we get from .^lookup

[13:52] <dalek> roast: review: https://github.com/perl6/roast/commit/a529332b74

[14:46] <moritz> samcv: if you send a signed Contributor License Agreement to TPF (http://www.perlfoundation.org/contributor_license_agreement), we can give you direct commit access to Rakudo

[14:49] <nine> samcv: send the CLA via email. We need your awesome productivity :)

[14:54] * notviki nods

[16:28] <dalek> rakudo/nom: 3282813 | (Zoffix Znet)++ | src/core/Str.pm:

[16:28] <dalek> rakudo/nom: Allow missing whole part in parse-base

[16:28] <dalek> rakudo/nom:

[16:28] <dalek> rakudo/nom: Omiting zero on fractional numbers (e.g. -.5) is a common notation in

[16:28] <dalek> rakudo/nom: North America; makes sense to allow it.

[16:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3282813e45

[16:29] <dalek> roast: 897cc99 | (Zoffix Znet)++ | S32-str/parse-base.t:

[16:29] <dalek> roast: Test parse-base can take a fractional without a whole part

[16:29] <dalek> roast:

[16:29] <dalek> roast: Rakudo commit: https://github.com/rakudo/rakudo/commit/3282813e45

[16:29] <dalek> roast: review: https://github.com/perl6/roast/commit/897cc99452

[17:40] * japhb wonders how much his original parsing code has been changed over the years that that is even necessary ...

[17:42] <notviki> ?

[17:42] <notviki> That code didn't exist 2 months ago...

[18:01] <japhb> notviki: My code (originally in Str.Numeric, now forming the guts of the largest val() variant) handled almost every way of describing numbers that Perl 6 could represent.  But importantly, it did it with a bunch of internal helper routines that handled subsets of the problem.  So rather than extending parse-base bit by bit, why not just expose what you need from those internal routines (in R::I, perhaps) and use that?

[18:02] <japhb> (And by the way, it's not ego pushing this, it's "This is already a solved problem.")

[18:08] <notviki> I don't forsee any further extensions to parse-base

[18:08] <japhb> Famous last words ... from the bot that brought you support of unicode minus.  ;-)

[18:09] <notviki> Last I looked at already-existing parsing code is was a tangled mess of overengineering and bugs

[18:10] <notviki> m: :16(':36<SEE>').say

[18:10] <camelia> rakudo-moar 328281: OUTPUT«36806␤»

[18:10] <notviki> m: :16('-FF').say; # can't do a negative

[18:10] <camelia> rakudo-moar 328281: OUTPUT«Cannot convert string to number: base-16 number must begin with valid digits or '.' in ':16<⏏-FF>' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:11] <notviki> m: :2('0xE').say

[18:11] <camelia> rakudo-moar 328281: OUTPUT«14␤»

[18:12] <japhb> As I recall, in the original speculation, you are supposed to do the negative outside the :base() if you are using that form.  Str.Numeric itself should handle it.

[18:12] <japhb> And as for the base mixing, I think that was a side effect of some refactor done over the years.  :-/

[18:14] <notviki> m: say :16<0eff>

[18:14] <camelia> rakudo-moar 328281: OUTPUT«3839␤»

[18:14] <notviki> m: say :16<0bff>

[18:14] <camelia> rakudo-moar 328281: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Cannot convert string to number: malformed base-2 number in '⏏ff' (indicated by ⏏)␤at <tmp>:1␤------> say :16<0bff>⏏<EOL>␤»

[18:15] <notviki> m: say ':16<0b11>'.Numeric

[18:15] <camelia> rakudo-moar 328281: OUTPUT«2833␤»

[18:17] <notviki> The problem with all of these is they feel like they've been designed by imagining the user simply hardcoding the numbers.

[18:18] <notviki> So if I want to ask the user for a number and a base that number is in, I then have to combine the two variables in some contorted form

[18:18] <japhb> Str.Numeric's use case is converting Strs -- and by the time it gets to .Numeric, it may as well be hardcoded.

[18:18] * notviki doesn't follow

[18:19] <japhb> m: say ':16("SEE")'.Numeric

[18:19] <camelia> rakudo-moar 328281: OUTPUT«Cannot convert string to number: malformed ':16' style radix number, expecting '<' or '[' after the base in ':16⏏(\"SEE\")' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:19] <notviki> If the data is coming from an external source, why would it "may as well be hardcoded"?

[18:19] <japhb> m: say ':16<SEE>'.Numeric

[18:19] <camelia> rakudo-moar 328281: OUTPUT«Cannot convert string to number: base-16 number must begin with valid digits or '.' in ':16<⏏SEE>' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:20] <notviki> I have to manually construct the ':16<SEE>' string and then deconstruct it again on errors to make sane errors

[18:20] <japhb> m: my $input = 'SEE'; dd ":16<$input>".Numeric

[18:20] <camelia> rakudo-moar 328281: OUTPUT«Failure.new(exception => X::Str::Numeric.new(source => ":16<SEE>", pos => 4, reason => "base-16 number must begin with valid digits or '.'"), backtrace => Backtrace.new)␤»

[18:20] <japhb> Ah, I see what you're getting at.

[18:21] <notviki> But your base is also hardcoded in that line.

[18:21] <notviki> m: my $base = 16; my $input = 'SEE'; say ":$base<$input>".Numeric

[18:21] <camelia> rakudo-moar 328281: OUTPUT«Type Int does not support associative indexing.␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:21] <notviki> m: my $base = 16; my $input = 'SEE'; say ":$base\<$input>".Numeric

[18:21] <camelia> rakudo-moar 328281: OUTPUT«Cannot convert string to number: base-16 number must begin with valid digits or '.' in ':16<⏏SEE>' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:22] <notviki> m: my $base = "16\b\b"; my $input = 'SEE'; say ":$base\<$input>".Numeric

[18:22] <camelia> rakudo-moar 328281: OUTPUT«Cannot convert string to number: malformed ':16' style radix number, expecting '<' or '[' after the base in ':16⏏\b\b<SEE>' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:22] <notviki> m: my $base = "\b16\b\b"; my $input = 'SEE'; say ":$base\<$input>".Numeric

[18:22] <camelia> rakudo-moar 328281: OUTPUT«Cannot convert string to number: radix (in decimal) expected after ':' in ':⏏\b16\b\b<SEE>' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:22] <japhb> So I see your point re: fixing up the exception.

[18:23] <notviki> But you don't see my point that $input.parse-base($base) is more userfriendly than ":$base\<$input>".Numeric?

[18:23] <japhb> Not entirely sure what point you're trying to make about the \b's though

[18:23] <notviki> That the input base has significant affect of the error message.

[18:24] <notviki> parse-base will only ever say that base looks wrong, but with the interpolation method you can get any confusing error.

[18:24] <japhb> notviki: No, I understand the point you're making.  My point *originally* is that the guts of parse-base should not be a reimplementation of parts of Str.Numeric.  They should use the same code.

[18:24] <japhb> (Or, I guess, val() nowadays.)

[18:25] <notviki> but those parts aren't easily detachable. I see they close over a lot of previously computed values.

[18:25] <japhb> That sounds different than the original, hmmm.

[18:25] * japhb goes to look at the newest code

[18:27] <notviki> all of them close over $eos

[18:28] <notviki> Actually I don't see any part to take for parse-base. The actual code that handles radix numbers parses the :16<..> form. And it doesn't handle signs, so....

[18:30] <notviki> and the failure mode is handled by the sub closing over $eos and $pos and twiddling it while working and then the code outside of the sub checks those variables.

[18:31] <japhb> Sigh.  I concede the discussion.

[18:32] <notviki> oh and it closes over $radix too

[18:34] <notviki> I get your point about not repeating code, but currently parse-base is simple code that fits entirely on my screen and 70% of it is error reporting.

[20:09] <samcv> moritz++ nine++ will do that!

[20:10] <samcv> should I sign and scan?

[20:10] <notviki> that's how I did mine

[20:13] <samcv> ok will use this pdf here http://blob.perl.org/perlweb/foundation/legal/licenses/cla.pdf

[20:34] <MasterDukeLaptop> if anybody is interested, here is a sorted list of the names (and their counts) find_symbol is called with during a rakudo compile

[20:34] <MasterDukeLaptop> https://gist.github.com/MasterDuke17/a3b0018f427dc15c36d7f4c4b884946b

[20:34] <MasterDukeLaptop> the top is Parameter, called 40919 times

[20:35] <notviki> s: &infix:<??>

[20:35] <SourceBaby> notviki, Something's wrong: ␤ERR: ===SORRY!=== Error while compiling -e␤Undeclared routine:␤    infix:<??> used at line 6. Did you mean 'infix:<∖>', 'infix:<lt>', 'infix:<eq>', 'infix:<o>', 'infix:<~|>'?␤␤

[20:36] <notviki> 1168 times... I guess it does that whenever it encouters a ternary? Tries to check for an infix first.

[20:36] <notviki> m: sub infix:<??> ($,$) { say "hi" }; 42 ?? 55

[20:36] <camelia> rakudo-moar 328281: OUTPUT«hi␤»

[20:37] <notviki> m: sub infix:<??> ($,$) { say "hi" }; sub infix:<!!> ($,$) { say "hi" }; 42 ?? 55 !! 45

[20:37] <camelia> rakudo-moar 328281: OUTPUT«hi␤hi␤»

[20:37] <notviki> :o

[20:37] <notviki> oh, it's the ?/: thing it cries about

[20:37] <notviki> m: sub infix:<?> ($,$) { say "hi" }; sub infix:<:> ($,$) { say "hi" }; 42 ? 55 : 45

[20:37] <camelia> rakudo-moar 328281: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Unsupported use of ? and : for the ternary conditional operator; in Perl 6 please use ?? and !!␤at <tmp>:1␤------> ; sub infix:<:> ($,$) { say "hi" }; 42 ?⏏ 55 : 45␤»

[20:39] <MasterDukeLaptop> btw, that's why i was trying to figure out the caller, but callframe(1).code.name doesn't work that early in the compile

[21:12] <b2gills> m: my str @a = <a b c>; @a.sort.say; # lizmat I think you broke this with one of your optimizations

[21:12] <camelia> rakudo-moar 328281: OUTPUT«compare requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»

[21:14] <MasterDukeLaptop> bisectable6: my str @a = <a b c>; @a.sort.say;

[21:14] <bisectable6> MasterDukeLaptop, Bisecting by output (old=2015.12 new=3282813) because on both starting points the exit code is 1

[21:15] <bisectable6> MasterDukeLaptop, bisect log: https://gist.github.com/2a5521e52c37ce568525a34ee2f750af

[21:15] <bisectable6> MasterDukeLaptop, (2016-03-17) https://github.com/rakudo/rakudo/commit/eed4ebb0c0f5c7169c9f4536f4bd13f405d8f3cd

[21:17] <b2gills> star-m: my str @a = <a b c>; @a.sort.say; say $*PERL.compiler.version

[21:17] <camelia> star-m 2016.10: OUTPUT«(a b c)␤v2016.10␤»

[21:22] <MasterDukeLaptop> committable6: all my str @a = <a b c>; @a.sort.say

[21:22] <committable6> MasterDukeLaptop, https://gist.github.com/385390d5777568711d011fa69c01aadc

[21:23] <MasterDukeLaptop> bisectable6: old=2016.12 my str @a = <a b c>; @a.sort.say;

[21:23] <bisectable6> MasterDukeLaptop, Bisecting by exit code (old=2016.12 new=3282813). Old exit code: 0

[21:24] <notviki> committable6: 4c2c9c2 my str @a = <a b c>; @a.sort.say;

[21:24] <committable6> notviki, ¦«4c2c9c2»: ===SORRY!===␤native string arrays not yet implemented. Sorry.  «exit code = 1»

[21:24] <bisectable6> MasterDukeLaptop, bisect log: https://gist.github.com/c702aeeeff31f3ffa66f998d3546af9c

[21:24] <bisectable6> MasterDukeLaptop, (2016-12-23) https://github.com/rakudo/rakudo/commit/4b2cea078f595613ff0f89a9bf1462d4a4295fb9

[21:24] <samcv> moritz, i have a PDF i scanned. What email to send the CLA to?

[21:29] <samcv> or nine

[21:43] <b2gills> samcv: http://www.perlfoundation.org/contact_us has a trademark(at)perlfoundation.org mail address listed

[21:45] <samcv> thanks

[21:59] <samcv> awesome. CLA sent

[22:02] <notviki> samcv++

[22:02] <samcv> :) glad to be here!

[22:02] <samcv> can I get a fancy irc hostmask too :3

[22:03] <dalek> rakudo/nom: 350fdc1 | (Zoffix Znet)++ | src/core/Main.pm:

[22:03] <dalek> rakudo/nom: Remove trailing whitespace

[22:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/350fdc126b

[22:03] <notviki> I think if you join #freenode and ask they'll give one

[22:04] <samcv> do the people here have to tell them yes?

[22:04] <notviki> no idea, I'm unaffiliated :)

[22:04] * notviki summons mst

[22:05] <notviki> hm, my Matt Signal isn't working today :)

[22:05] <notviki> I guess they'll tell you what is needed on #freenode

[22:14] <samcv> ok back

[22:14] <samcv> hope nobody said anything important

[22:14] <samcv> agh

[22:15] <samcv> well that solved my lag issues by restarting ZNC

[22:21] <dalek> rakudo/nom: 38ec79c | (Zoffix Znet)++ | src/core/Main.pm:

[22:21] <dalek> rakudo/nom: Make sub MAIN usage ignore *% param

[22:21] <dalek> rakudo/nom:

[22:21] <dalek> rakudo/nom: The code assumes a param always has a name and when it tries to get

[22:21] <dalek> rakudo/nom: the name of *% param, it crashes due to attempting to treat a null as

[22:21] <dalek> rakudo/nom: a string.

[22:21] <dalek> rakudo/nom:

[22:21] <dalek> rakudo/nom: Fix by foregoing any nameless named params when printing usage.

[22:21] <dalek> rakudo/nom:

[22:21] <dalek> rakudo/nom: Fixes RT#127621: https://rt.perl.org/Ticket/Display.html?id=127621

[22:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/38ec79c623

[22:21] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127621

[22:22] <dalek> roast: a26b352 | (Zoffix Znet)++ | S06-other/main-usage.t:

[22:22] <dalek> roast: Test *% in sub MAIN does not cause a crash

[22:22] <dalek> roast:

[22:22] <dalek> roast: RT#127621: https://rt.perl.org/Ticket/Display.html?id=127621

[22:22] <dalek> roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/38ec79c623

[22:22] <dalek> roast: review: https://github.com/perl6/roast/commit/a26b352434

[22:22] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127621

[22:59] <dalek> roast: 1c498de | samcv++ | S15-unicode-information/uniprop.t:

[22:59] <dalek> roast: uniprop: add tests for the last three NF*_Quick_Check props

[22:59] <dalek> roast:

[22:59] <dalek> roast: NFD_Quick_Check NFKC_Quick_Check NFKD_Quick_Check

[22:59] <dalek> roast: We now cover all properties in the 'Enumerated Values' category.

[22:59] <dalek> roast: review: https://github.com/perl6/roast/commit/1c498de88f

[23:18] <dalek> roast: ed3f324 | samcv++ | S15-unicode-information/uniprop.t:

[23:18] <dalek> roast: uniprop: add tests for 9 more properties

[23:18] <dalek> roast:

[23:18] <dalek> roast: Cased, Changes_When_Casefolded, Changes_When_Casemapped,

[23:18] <dalek> roast: Changes_When_Lowercased, Changes_When_Uppercased, Changes_When_Titlecased, Uppercase,

[23:18] <dalek> roast:  Terminal_Punctuation, Bidi_Control

[23:18] <dalek> roast: review: https://github.com/perl6/roast/commit/ed3f324210

[23:35] <notviki> t/spec/S15-unicode-information/uniprop.t is failing

[23:35] <notviki> I think you've missed a plan bump?

[23:36] <notviki> "Parse errors: Bad plan.  You planned 143 tests but ran 145."
