[08:10] <dalek> rakudo/nom: 4abef22 | (Brian Gernhardt)++ | tools/build/Makefile-Moar.in:

[08:10] <dalek> rakudo/nom: Move --nqp-lib=blib into M_RUN_PERL6

[08:10] <dalek> rakudo/nom:

[08:10] <dalek> rakudo/nom: Any option that has to be included every time you use the variable

[08:10] <dalek> rakudo/nom: should just be in the variable.

[08:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4abef224dc

[08:10] <dalek> rakudo/nom: 9855adc | (Brian Gernhardt)++ | Configure.pl:

[08:10] <dalek> rakudo/nom: Add blib argument to create-moar-runner.pl for debug

[08:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9855adc3c7

[08:10] <dalek> rakudo/nom: b67c1e4 | niner++ | / (2 files):

[08:10] <dalek> rakudo/nom: Merge pull request #936 from Benabik/nom

[08:10] <dalek> rakudo/nom:

[09:07] <[TuxCM]> This is Rakudo version 2016.11-140-gb67c1e45a built on MoarVM version 2016.11-27-g3171dbbe

[09:07] <[TuxCM]> csv-ip5xs        3.199

[09:07] <[TuxCM]> test            14.075

[09:07] <[TuxCM]> test-t           6.488

[09:07] <[TuxCM]> csv-parser      13.978

[09:53] <nine> It's funny how often I read my name in the weekly and think "oh, what did I do now?! Ah, of course..."

[11:00] <dalek> nqp: 443fb95 | (Pawel Murias)++ | src/NQP/Actions.nqp:

[11:00] <dalek> nqp: Support calling the handlepayload and handle ops using the nqp:: syntax.

[11:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/443fb95571

[11:00] <dalek> nqp: 568fcc2 | (Pawel Murias)++ | src/vm/js/ (4 files):

[11:00] <dalek> nqp: [js] Make nqp::exception work when it's not directly inside a nqp::handle.

[11:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/568fcc2e7e

[11:00] <dalek> nqp: 0fe387b | (Pawel Murias)++ | t/nqp/044-try-catch.t:

[11:00] <dalek> nqp: Test having nqp::exception be used outside of a nqp::handle.

[11:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0fe387b4e2

[11:00] <babydrop> Yeah, the same, "wait... what? Oh yeah... Now I remember doing that"

[11:56] <dalek> nqp: 2de9805 | (Pawel Murias)++ | t/nqp/044-try-catch.t:

[11:56] <dalek> nqp: Remove debugging leftover.

[11:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2de98057c0

[12:53] <dalek> rakudo/nom: 0ee6bc0 | lizmat++ | / (2 files):

[12:53] <dalek> rakudo/nom: Make native array.reverse|rotate about 20x faster

[12:53] <dalek> rakudo/nom:

[12:53] <dalek> rakudo/nom: By using the same logic as for 1dimmed shaped arrays, instead of

[12:53] <dalek> rakudo/nom: HLLing up and down.

[12:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0ee6bc0576

[14:27] <babydrop> .tell lizmat Not sure if RT#130274 rendered for you OK, but it references http://stackoverflow.com/questions/40970080/perl6-rakudo-2016-11-match-tries-to-assign-to-read-only-variable-why-not-in-201 Core thing being Str.match now sets $/ when it didn't before. We made it that way on purpose, right?

[14:27] <yoleaux2> babydrop: I'll pass your message to lizmat.

[14:40] <dalek> rakudo/nom: 16fbd71 | (Zoffix Znet)++ | src/ (3 files):

[14:40] <dalek> rakudo/nom: Fix incorrect error for extra clauses with unless/without

[14:40] <dalek> rakudo/nom:

[14:40] <dalek> rakudo/nom: - Add X::Syntax::WithoutElse

[14:40] <dalek> rakudo/nom: - Add .keyword attribute to X::Syntax::UnlessElse

[14:40] <dalek> rakudo/nom: - Split unless/without proto rule into two separate ones

[14:40] <dalek> rakudo/nom:     - Lets us avoid a conditional and use of `{}` to refresh

[14:40] <dalek> rakudo/nom:         $/, which is constly to update.

[14:40] <dalek> rakudo/nom:     - Less mess when figuring out which exception to throw

[14:40] <dalek> rakudo/nom: - Capture the offending keyword so it could be properly displayed

[14:40] <dalek> rakudo/nom:   in the error message

[14:40] <dalek> rakudo/nom:

[14:40] <dalek> rakudo/nom: Fixes RT#130279: https://rt.perl.org/Ticket/Display.html?id=130279

[14:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/16fbd7147f

[14:41] <dalek> roast: d7328b7 | (Zoffix Znet)++ | S04-statements/ (2 files):

[14:41] <dalek> roast: Test extra conditionals with unless/without show proper error

[14:41] <dalek> roast:

[14:41] <dalek> roast: RT#130279: https://rt.perl.org/Ticket/Display.html?id=130279

[14:41] <dalek> roast: Fix commit: https://github.com/rakudo/rakudo/commit/16fbd7147f

[14:41] <dalek> roast: review: https://github.com/perl6/roast/commit/d7328b7ca2

[14:55] <lizmat> babydrop: that was my understanding, yes

[14:55] <yoleaux2> 14:27Z <babydrop> lizmat: Not sure if RT#130274 rendered for you OK, but it references http://stackoverflow.com/questions/40970080/perl6-rakudo-2016-11-match-tries-to-assign-to-read-only-variable-why-not-in-201 Core thing being Str.match now sets $/ when it didn't before. We made it that way on purpose, right?

[14:56] <babydrop> Cool. I'll respond to the ticket.

[15:07] <lizmat> commute to Amsterdam.pm meeting&

[15:35] <gfldex> .tell lizmat neither do I or I would have proposed something. No worries, nobody is gonna die from a missing docs confusion.

[15:35] <yoleaux2> gfldex: I'll pass your message to lizmat.

[16:32] <babydrop> .ask lizmat would recall whether the $* twigils were meant to be here in this commit? The tests actually result in a Failure, which is masked by the @ coercert: https://github.com/perl6/roast/commit/2d48e36257a796cf77bcb5f0efd6c90044acb882#diff-d2d626064bd4db6d4a17aefcbe5e68e7R146

[16:32] <yoleaux2> babydrop: I'll pass your message to lizmat.

[16:33] <babydrop> .tell lizmat conversation on that: https://irclog.perlgeek.de/perl6/2016-12-06#i_13691323

[16:33] <yoleaux2> babydrop: I'll pass your message to lizmat.

[16:33] <babydrop> .tell lizmat so I'm wondering whether we fix the tests by removing the '*' from twigils or were they meant to work with the twigils and the tests need to be fudged...

[16:33] <yoleaux2> babydrop: I'll pass your message to lizmat.

[16:34] <[Coke]> will coercion types ever work in variable declarations? (#130253)

[16:36] * [Coke] adds [citation needed] to the ticket.

[16:39] <babydrop> .tell lizmat nevermind, TimToady answered in https://irclog.perlgeek.de/perl6/2016-12-06#i_13691502

[16:39] <yoleaux2> babydrop: I'll pass your message to lizmat.

[16:56] <dalek> rakudo/nom: ab3a59c | lizmat++ | src/core/List.pm:

[16:56] <dalek> rakudo/nom: Make permutations/combinations die instead of fail

[16:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ab3a59c393

[17:23] <babydrop> hm, so on that SO someone is curious about the rationalle for the .match change...

[17:23] <babydrop> committable6, 2016.07 'foo'.match: /./; say $/

[17:23] <committable6> babydrop, ¦«2016.07»: ｢f｣

[17:23] <babydrop> But I see it was setting $/ even before the refactor

[17:23] <psch> committable6: 2015.12 'foo'.match: /./; say $/

[17:23] <committable6> psch, ¦«2015.12»: ｢f｣

[17:23] <babydrop> committable6, 2016.07 sub ($/) { 'foo'.match: /./; say $/ }($/)

[17:23] <committable6> babydrop, ¦«2016.07»: Nil

[17:23] <babydrop> committable6, 2016.07 sub ($/) { 'foo'.match: /./; say $/ }(42)

[17:23] <committable6> babydrop, ¦«2016.07»: 42

[17:24] <babydrop> m: sub ($/) { 'foo'.match: /./; say $/ }(42)

[17:24] <camelia> rakudo-moar ab3a59: OUTPUT«Cannot assign to a readonly variable ($/) or a value␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:24] <babydrop> Except in ^ that case, we now cry about readonly.

[17:24] <babydrop> So... what's the rationalle? Just a bug fix since old behaviour is kinda wonky?

[17:25] <psch> i strongly remember the readonly error already happening in Action methods that fiddle with $/

[17:25] <psch> i.e. for a Grammar

[17:25] <psch> so i'm mostly curious why that old case doesn't complain, honestly

[17:25] <babydrop> yeah, wehn you use ~~ / ... / for example, but taht didn't happen with .match

[17:25] <psch> ah, okay

[17:25] <babydrop> committable6, 2016.07 sub ($/) { 'foo' ~~ /./; say $/ }(42)

[17:25] <committable6> babydrop, ¦«2016.07»: Cannot assign to a readonly variable or a value␤  in sub  at /tmp/rAz0Rtxn2P line 1␤  in block <unit> at /tmp/rAz0Rtxn2P line 1␤ «exit code = 1»

[17:26] <babydrop> I'll just respond that old behaviour was a bug, since old .match sets $/ and in the particular case of $/ being already in scope it silently failed

[17:26] <psch> committable6, 2016.07 sub ($/ is read-only) { 'foo'.match: /./; say $/ }(42)

[17:26] <committable6> psch, https://gist.github.com/5d2b871f75e15b401e908bd96030fa03

[17:27] <psch> oh shush :l

[17:27] <psch> m: sub f($ is ro) {}

[17:27] <camelia> rakudo-moar ab3a59: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Can't use unknown trait 'is ro' in a parameter declaration.␤at <tmp>:1␤    expecting any of:␤        rw␤        readonly␤        copy␤        required␤        raw␤        leading_docs␤     …»

[17:27] <psch> oh, no dash, i see

[17:27] <psch> committable6, 2016.07 sub ($/ is readonly) { 'foo'.match: /./; say $/ }(42)

[17:27] <committable6> psch, ¦«2016.07»: 42

[17:27] <psch> right, yeah, definitely somewhat buggy because it just clobbers over whatever already is around

[17:28] * babydrop doesn't see the clobbering

[17:28] <psch> err, yes

[17:28] <psch> i'm not writing good anymore apparently

[17:29] <babydrop> But it's still buggy, since you may expect it reading from the .match result but it's the old $/

[17:29] <psch> well, infix:<~~> surely isn't supposed to have magic that assigns to $/

[17:29] <psch> so .match itself must do that

[17:30] <psch> otoh, maybe not

[17:30] <psch> i'm also not thinking good anymore i think :P

[17:30] * psch &

[17:30] <babydrop> :)

[17:30] <babydrop> IIRC infix:<~~> on /.../ has some sort of magicks in the grammar that makes it do a regex match instead of going through the .ACCEPTS dance

[17:31] <lizmat> m: <a b c>.grep( True ).elems.say   # another case

[17:31] <camelia> rakudo-moar ab3a59: OUTPUT«1␤»

[17:32] <babydrop> :(

[17:32] <dalek> rakudo/nom: bc13bb5 | lizmat++ | src/core/Any-iterable-methods.pm:

[17:32] <dalek> rakudo/nom: Make sure .grep doesn't fail but dies

[17:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bc13bb574c

[17:33] <lizmat> $ 6 '<a b c>.grep( True ).elems.say'

[17:33] <lizmat> Cannot use Bool as Matcher with '.grep'.  Did you mean to use $_ inside a block?

[17:37] <babydrop> drive-by bug fixes \o/

[19:42] <dalek> rakudo/nom: 2e1b82c | (Zoffix Znet)++ | src/core/Str.pm:

[19:42] <dalek> rakudo/nom: Fix spurious warnings on .trans with regex pair complements

[19:42] <dalek> rakudo/nom:

[19:42] <dalek> rakudo/nom: On an unsuccessful match, the $/ ends up being Nil and .chars

[19:42] <dalek> rakudo/nom: on a Nil warns.

[19:42] <dalek> rakudo/nom:

[19:42] <dalek> rakudo/nom: Found by tojo++ https://irclog.perlgeek.de/perl6/2016-12-06#i_13692293

[19:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2e1b82cfa2

[19:43] <dalek> roast: f01416c | (Zoffix Znet)++ | S05-transliteration/trans.t:

[19:43] <dalek> roast: Test .trans with regex pair complement mode does not produce warnings

[19:43] <dalek> roast:

[19:43] <dalek> roast: Bug finding: https://irclog.perlgeek.de/perl6/2016-12-06#i_13692293

[19:43] <dalek> roast: Fix commit: https://github.com/rakudo/rakudo/commit/2e1b82cfa2

[19:43] <dalek> roast: review: https://github.com/perl6/roast/commit/f01416c110

[19:53] <dalek> nqp: db76673 | (Pawel Murias)++ | src/vm/js/nqp-runtime/ctx.js:

[19:53] <dalek> nqp: [js] Remove debugging leftover.

[19:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/db766732a3

[20:18] <[Coke]> removing debug output seems like a good sign. :)

[20:19] <[Coke]> pmurias: how goes?

[20:44] <babydrop> m: class Foo { method x { "42" } }; for ^1000_000 { my $x = Foo.new }; say now - INIT now;

[20:44] <camelia> rakudo-moar 2e1b82: OUTPUT«1.4886558␤»

[20:44] <babydrop> m: class Foo { method x { "42" } }; for ^1000_000 { my $x = Foo.new.x }; say now - INIT now;

[20:44] <camelia> rakudo-moar 2e1b82: OUTPUT«1.6499938␤»

[20:44] <babydrop> m: say 1.64999/1.48865

[20:44] <camelia> rakudo-moar 2e1b82: OUTPUT«1.1083801␤»

[20:48] <babydrop> What I was gonna say is IMO say and put and print should not cheat with Str types and call appropriate .Str or .gist methods regardless.

[20:49] <babydrop> But it's not important enough to warrant a speed decrease at the current time. So *shrug*

[21:01] <dalek> rakudo/nom: 4f4737d | lizmat++ | src/core/Shaped (2 files):

[21:01] <dalek> rakudo/nom: Make sure 1+ dimmed Arrays can .sum

[21:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4f4737dc2f

[21:01] <dalek> rakudo/nom: 4fd6e94 | lizmat++ | src/core/ (2 files):

[21:01] <dalek> rakudo/nom: Make sure all .sum are nodal

[21:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4fd6e94825

[21:02] <[Coke]> brrt: any chance to move your advent post up to the 9th? (or the the 10th or 11th)? We have gaps, and I'd like to try to move the gaps towards the end of the month.

[21:11] <jdv79> is this year's holiday season less stressful at least around here?

[21:11] <moritz> oh yes

[21:11] <jdv79> very nice

[23:55] <babydrop> .ask TimToady perhaps we need a different approach than dying in leu of Failures in things that may return a list? For example this code does not throw and I only scratched the surface: dd [.elems, .pick.elems, .roll.elems, .eager.elems, .Slip.elems, .Array.elems, .List.elems, .Capture.elems, .rotor(42).elems ] given Failure.new

[23:55] <yoleaux2> babydrop: I'll pass your message to TimToady.
