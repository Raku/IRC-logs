[02:09] <Zoffix> m: say Perl6::Metamodel::SubsetHOW

[02:09] <camelia> rakudo-moar 18455a: OUTPUT«Could not find symbol '&SubsetHOW'␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[02:10] <Zoffix> m: subset Foo of Str where .chars > 3; say Foo.HOW

[02:10] <camelia> rakudo-moar 18455a: OUTPUT«Perl6::Metamodel::SubsetHOW.new␤»

[02:10] <Zoffix> m: Perl6::Metamodel::SubsetHOW.new

[02:10] <camelia> rakudo-moar 18455a: OUTPUT«Could not find symbol '&SubsetHOW'␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[02:10] <Zoffix> is that supposed to be like that?

[03:35] <psch> m: say Metamodel::SubsetHOW

[03:35] <camelia> rakudo-moar 18455a: OUTPUT«(SubsetHOW)␤»

[03:36] <psch> it is a somewhat weird, 'you have to remember it' kind of thing

[03:36] <psch> so probably LTA

[06:15] <nine> ugexe: but list-installed won't work on future rakudos

[06:16] <nine> ugexe: and resolve landed on Dec 28th 2015

[07:52] <[TuxCM]> This is Rakudo version 2016.07.1-1-g18455a5 built on MoarVM version 2016.07

[07:52] <[TuxCM]> test            15.155

[07:52] <[TuxCM]> test-t           8.040

[07:52] <[TuxCM]> csv-parser      15.878

[07:55] <lizmat> second day at 8.0, cool!  :-)

[08:02] <nine> And we're soooo close to seeing a 7 in the front :)

[08:15] <dalek> rakudo/nom: 6757a89 | lizmat++ | src/core/List.pm:

[08:15] <dalek> rakudo/nom: Make "my @a is List = 1,2,3" work

[08:15] <dalek> rakudo/nom:

[08:15] <dalek> rakudo/nom: In many cases, one wants to have Positional access on a List, rather

[08:15] <dalek> rakudo/nom: than an Array, because once initialized, the List cannot change.

[08:15] <dalek> rakudo/nom: This syntax, which was supposed to work anyway as similar syntax for

[08:15] <dalek> rakudo/nom: "my %h is Map = a => 42" also works, has the advantage that it is

[08:16] <dalek> rakudo/nom: cheaper to initialize, as there is no need to create containers for

[08:16] <dalek> rakudo/nom: the values (since we do not intend to change it anyway).  This saves

[08:16] <dalek> rakudo/nom: at least one allocation per reified element, so easier on the GC and

[08:16] <dalek> rakudo/nom: more efficient on the CPU as well.

[08:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6757a89261

[08:22] <[TuxCM]> Last night I ran a 8.5, but there was also a heavy perl5 smoker running, so I didn't post it

[08:22] <[TuxCM]> and I have limited access here from Scotland :)

[08:30] <timotimo> i like that commit, liz :)

[10:49] <dalek> nqp/optimize-with-hoopl: 30e0c94 | (Pawel Murias)++ | docs/ops.markdown:

[10:49] <dalek> nqp/optimize-with-hoopl: Document signal constants.

[10:49] <dalek> nqp/optimize-with-hoopl: review: https://github.com/perl6/nqp/commit/30e0c94325

[10:51] <jnthn> [TuxCM]: Hope the whisky is less limited ;)

[10:52] <jnthn> m: my \a = List.new; a = 1,2,3; say a

[10:52] <camelia> rakudo-moar 6757a8: OUTPUT«(1 2 3)␤»

[10:52] <jnthn> star-m: my \a = List.new; a = 1,2,3; say a

[10:52] <camelia> star-m 2016.04: OUTPUT«()␤»

[10:52] <jnthn> lizmat: Regression ^^

[10:52] <lizmat> jnthn: interesting....

[10:52] <jnthn> We can't just fix that by making list assignable.

[10:52] <jnthn> Or put another way

[10:53] <jnthn> You can't both have lists hanging around with an empty $!reified indicating "no content" *and* use that as a "can we assign to this"

[10:53] <lizmat> m: my \h = Map.new; h = a => 42; dd h

[10:53] <camelia> rakudo-moar 6757a8: OUTPUT«Map.new((:a(42)))␤»

[10:53] <jnthn> (I'm good with `my @a is List = ...` working, to be clear. I just don't think we can do it by overloading STORE.)

[10:54] <lizmat> same problem, and that exists for a bit longer already

[10:54] <jnthn> That is rather dubious also if it's meant to be immutable :(

[10:54] <lizmat> yup, indeed

[10:54] <lizmat> ok, I'm on it

[10:54] <jnthn> I don't know quite how we should solve it

[10:54] <lizmat> me neither yet...  :-)

[10:54] <jnthn> But I do note that

[10:54] <jnthn> my %h is Bag = ...

[10:54] <jnthn> Could also be made to work

[10:55] <jnthn> e.g. you can initialize it in such a declaration

[10:55] <lizmat> m: my %h is Bag = a => 42; %h<b> = 666

[10:55] <camelia> rakudo-moar 6757a8: OUTPUT«Cannot modify an immutable Bag␤  in block <unit> at <tmp> line 1␤␤»

[10:55] <jnthn> But it's immutable from there on.

[10:55] <jnthn> Right, doesn't work today :) But it'd be quite nice, I think? :)

[10:56] <lizmat> m: my %h is Bag = a => 42; dd %h

[10:56] <camelia> rakudo-moar 6757a8: OUTPUT«Cannot modify an immutable Bag␤  in block <unit> at <tmp> line 1␤␤»

[10:56] <lizmat> ah

[10:56] <lizmat> ok

[10:56] <lizmat> yup

[10:57] <dalek> nqp: bd934a9 | (Pawel Murias)++ | src/vm/ (2 files):

[10:57] <dalek> nqp: Define TYPE_CHECK_CACHE_DEFINITIVE,TYPE_CHECK_CACHE_THEN_METHOD,TYPE_CHECK_NEEDS_ACCEPTS constants on the js and moar.

[10:57] <dalek> nqp:

[10:57] <dalek> nqp: Rakudo should start using those instead of magic literals.

[10:57] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bd934a9cf1

[10:57] <dalek> nqp: 88eb72b | (Pawel Murias)++ | docs/ops.markdown:

[10:57] <dalek> nqp: Document signal constants.

[10:57] <dalek> nqp: review: https://github.com/perl6/nqp/commit/88eb72b55d

[10:58] <dalek> rakudo/nom: 5586f1d | lizmat++ | src/core/List.pm:

[10:58] <dalek> rakudo/nom: Revert "Make "my @a is List = 1,2,3" work"

[10:58] <dalek> rakudo/nom:

[10:58] <dalek> rakudo/nom: This reverts commit 6757a892611277d3d1edeaba366abca882757ff8.

[10:58] <dalek> rakudo/nom:

[10:58] <dalek> rakudo/nom: As jnthn pointed out, this regressed:

[10:58] <dalek> rakudo/nom:

[10:58] <dalek> rakudo/nom:   my \a = List.new; a = 1,2,3; # should fail

[10:58] <dalek> rakudo/nom:

[10:58] <dalek> rakudo/nom: So back to the drawing board.

[10:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5586f1d9c1

[10:58] <Zoffix> m: my \Int = 'meow'; say Int

[10:58] <camelia> rakudo-moar 6757a8: OUTPUT«===SORRY!===␤No compile-time value for Int␤»

[11:00] <timotimo> we need to have a spectest for that ... didn't we just release with that commit in the release?

[11:00] <lizmat> jnthn: how about List.new() assigning $!reified an empty list, indicating it cannot be assigned anymore ?

[11:01] <lizmat> I mean, if it's a lazy list, there's always a $!todo *and* a $!reified

[11:03] <jnthn> lizmat: I think we need to declare an API for this more generally

[11:03] <jnthn> I mean, we already have "if you want to make a type that can be assigned to, implement STORE"

[11:03] <jnthn> (Which we didn't yet implement for, say, BagHash and SetHash and MixHash, but surely should at some point)

[11:04] <lizmat> m: my %h is BagHash = a => 42; dd %h

[11:04] <camelia> rakudo-moar 6757a8: OUTPUT«Cannot modify an immutable BagHash␤  in block <unit> at <tmp> line 1␤␤»

[11:04] <jnthn> It'd be nice to have some way to handle the initialize case.

[11:04] <lizmat> hmmm

[11:05] <jnthn> So that core types, and user types, know how to make my @a is MyOwnImmutableListyThing = ...; work

[11:05] <timotimo> that'll be like a constructor, right?

[11:05] <jnthn> We already differentiate initialization from other assignments in the compiler so...

[11:06] <jnthn> timotimo: Yeah, I guess one slightly tempting idea is to say that you do it via new

[11:06] <lizmat> so: when is STORE supposed to be called now?

[11:06] <jnthn> lizmat: Assignments

[11:06] <lizmat> in the Foo.new = 1,2,3 case?

[11:06] <jnthn> Yes

[11:06] <timotimo> needn't necessarily be "new", but something like that anyway

[11:06] <timotimo> CREATESTORE or something

[11:07] <jnthn> Note that `my @a = 1,2,3` is parsed and compiled differently from (my @a) = 1,2,3;

[11:07] <lizmat> ok, so also my $a = Foo.new; ... ; $a = 1,2,3   # also calls STORE now, right ?

[11:07] <jnthn> You can most clearly see that with state, fwiw

[11:07] <jnthn> m: sub f() { state @a = say 'hi' }; f; f

[11:07] <camelia> rakudo-moar 6757a8: OUTPUT«hi␤»

[11:07] <jnthn> m: sub f() { (state @a) = say 'hi' }; f; f

[11:07] <camelia> rakudo-moar 6757a8: OUTPUT«hi␤hi␤»

[11:08] <jnthn> lizmat: Well, scalars are a special case :)

[11:08] <jnthn> They're so common we don't go through the whole STORE thing. But aggregate types always call STORE

[11:08] <lizmat> ah, ok TIL  :-)

[11:11] <jnthn> I don't quite know which way to go on it. It is vaguely tempting to say that

[11:11] <jnthn> my @a = 1,2,3;

[11:11] <jnthn> Compiles into Array.new((1,2,3)) or so

[11:11] <jnthn> m: say Array.new((1,2,3))

[11:11] <camelia> rakudo-moar 5586f1: OUTPUT«[1 2 3]␤»

[11:12] <jnthn> m: say Hash.new((a => 1, b => 2))

[11:12] <camelia> rakudo-moar 5586f1: OUTPUT«{a => 1, b => 2}␤»

[11:12] <jnthn> m: say Set.new((a => True, b => True))

[11:12] <camelia> rakudo-moar 5586f1: OUTPUT«set(b => True, a => True)␤»

[11:12] <jnthn> Heh :)

[11:12] <jnthn> m: say Set.new((1,2,1,3))

[11:12] <camelia> rakudo-moar 5586f1: OUTPUT«set(3, 1, 2)␤»

[11:12] <timotimo> oh no, it fucked up the order! rakudobug!!!

[11:12] <jnthn> Sets aren't ordered :P

[11:13] * jnthn submits timobug

[11:13] <jnthn> ;)

[11:13] <lizmat> jnthn: wouldn't that be the simplest solution?

[11:14] <lizmat> I mean my @a is List = 1,2,3  compiling to my @a := List.new(1,2,3) ?

[11:14] <jnthn> lizmat: It feels like it. :) I'm still trying to think of downsides.

[11:15] <jnthn> And doing it as part of construction is a natural way to ensure the immutability of immutable types works out

[11:15] <lizmat> yup

[11:15] <lizmat> and that would already fix my %h is Bag = a => 42

[11:15] <jnthn> The only thing that makes it a bit trickier is the whole descriptor thing.

[11:15] <lizmat> automagically

[11:15] <jnthn> Right

[11:16] <lizmat> descriptor thing ?

[11:16] <jnthn> Yeah...remember $!descriptor or whatever it's called in Array and Hash?

[11:16] <jnthn> m: my %h; say %h.name

[11:16] <camelia> rakudo-moar 5586f1: OUTPUT«%h␤»

[11:16] <jnthn> The thing that makes that work

[11:19] <lizmat> ah, that

[11:21] <lizmat> m: my $m := Map.new; $m.name

[11:21] <camelia> rakudo-moar 5586f1: OUTPUT«Method 'name' not found for invocant of class 'Map'␤  in block <unit> at <tmp> line 1␤␤»

[11:21] <lizmat> that's already an issue, or not ?

[11:21] <lizmat> m: my $m := Hash.new; $m.name

[11:21] <camelia> rakudo-moar 5586f1: ( no output )

[11:21] <lizmat> m: my $m := Hash.new; say $m.name

[11:21] <camelia> rakudo-moar 5586f1: OUTPUT«Nil␤»

[11:21] <lizmat> m: my $m := Hash{Int}.new; say $m.name

[11:21] <camelia> rakudo-moar 5586f1: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Autovivifying object closures not yet implemented. Sorry. ␤at <tmp>:1␤------> my $m := Hash{Int}⏏.new; say $m.name␤»

[11:22] <lizmat> m: my $m := Hash[Int].new; say $m.name

[11:22] <camelia> rakudo-moar 5586f1: OUTPUT«Nil␤»

[11:22] <lizmat> m: my $m := Hash[Int,Int].new; say $m.name

[11:22] <camelia> rakudo-moar 5586f1: OUTPUT«Nil␤»

[11:22] <lizmat> hmmm

[11:22] <jnthn> I'd only expect it to work at all on `my %name is Foo` style declarations

[11:22] <jnthn> If you .new something and happen to assign it or bind it to another symbol, that's not going to carry the name of the thing it happened to be bound to

[11:22] <jnthn> Note that

[11:23] <lizmat> yeah, duh :-)

[11:23] <jnthn> m: my @a; sub foo(@b) { say @b.name }; foo(@a)

[11:23] <camelia> rakudo-moar 5586f1: OUTPUT«@a␤»

[11:23] <lizmat> brb

[11:23] <jnthn> But yeah, tbh we never really formalized how this mechanism works, so it's kinda black magic today :)

[11:55] <lizmat> jnthn: would you expect this to work then?

[11:55] <lizmat> m: class A { has $.foo }; my %a is A = foo => 42; dd %a

[11:55] <camelia> rakudo-moar 5586f1: OUTPUT«Cannot modify an immutable A␤  in block <unit> at <tmp> line 1␤␤»

[11:56] <jnthn> lizmat: Probably not, because we'd pass a single positional argument to .new for this case

[11:56] <jnthn> lizmat: Which is how coercions are meant to work per...hm, S13? :)

[11:56] <lizmat> ok

[11:56] <lizmat> just checking  :-)

[11:57] <jnthn> I don't think we'd want to process the RHS as an argument list, so it'd just be a Pair that got passed. Otherwise it ends up too different to STORE and too easy to do unintentionally, I guess.

[11:58] <jnthn> I guess the reason I sorta consider whether we'd want a different mechanism than just using new is precisely so you opt in more explicitly, but given the default new takes nameds only then it's probably Good Enough.

[11:59] <jnthn> And even when we do the passing auto-viv'd protos thing later, we'd be able to spot when you pass a positionl that ain't one of those and complain

[11:59] <lizmat> so a class would only need to provide a new(*@a) candidate ?

[11:59] <jnthn> So it'd still be opt-in

[11:59] <jnthn> It could do that

[11:59] <jnthn> Or since it's single arg rule applying maybe a new(+@a) is more natural

[11:59] <lizmat> ah, yes

[12:00] <jnthn> You could even do a new(Set \s) if you knew that, for example, you can construct yourself super-fast from a set.

[12:00] <lizmat> indeed

[12:00] <jnthn> I'd be curious what TimToady makes of all of this, anyways :)

[12:00] <jnthn> He's good at spotting the downsides/issues I miss; ;)

[12:01] <timotimo> yeah, it's kind of uncanny

[12:05] <lizmat> ok, I'll leave this avenue of opts until TimToady has expressed an opinion

[12:06] <[Coke]> lizmat++ jnthn++

[12:06] <lizmat> jnthn [Coke] timotimo: opinions about  RT #128662 ?

[12:06] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128662

[12:06] <lizmat> personally, I'm in favour of silently returning self in both cases

[12:07] <lizmat> it would require an errata fix

[12:07] <lizmat> either way

[12:07] <timotimo> sounds sensible to me

[12:08] <[Coke]> I'm for "do nothing with nothing"

[12:08] <[Coke]> wow, are there a lot of core files on rakudo.org

[12:09] <lizmat> I guess we have a @Larry consensus then

[12:10] <jnthn> We tend to let degenerate cases degenerate gracefully, so "do nothing" feels more fitting

[12:11] <[Coke]> RT: 1323; @LARRY: 2; CONC: 7; GLR: 5; JVM: 67; LHF: 1; LTA: 79; NEW: 870; NYI: 28; OSX: 6; PERF: 16; POD: 9; PRECOMP: 8; RFC: 22; SEGV: 24; STAR: 1; TESTNEEDED: 10; TODO: 8; UNI: 10; UNTAGGED: 655; WEIRD: 3

[12:12] <[Coke]> ooh, sounds like we're close to a fix on the CSRF issues with rakudo.org -> RT

[12:12] <[Coke]> (might be in place by tomorrow)

[12:13] <timotimo> what a relief

[12:13] <dalek> rakudo/nom: 7354878 | lizmat++ | src/core/ (4 files):

[12:13] <dalek> rakudo/nom: Simplify a bunch of isnull() ?? !! to ifnull(,)

[12:13] <dalek> rakudo/nom:

[12:13] <dalek> rakudo/nom: Why be more verbose when you can be more concise  :-)

[12:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7354878553

[12:23] <dalek> rakudo/nom: d61eaed | lizmat++ | src/core/Str.pm:

[12:23] <dalek> rakudo/nom: Make Str.samemark("") return self instead of fail

[12:23] <dalek> rakudo/nom:

[12:23] <dalek> rakudo/nom: Fixes RT #128662

[12:23] <dalek> rakudo/nom:

[12:23] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128662

[12:23] <dalek> rakudo/nom: See also http://irclog.perlgeek.de/perl6-dev/2016-07-19#i_12867038

[12:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d61eaed8ba

[12:24] <lizmat> RT #128615  # huh?

[12:24] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128615

[12:24] <lizmat> ah, ok

[12:26] <dalek> roast: 2aeb4db | lizmat++ | S32-str/samemark.t:

[12:26] <dalek> roast: Correct test for RT #128662

[12:26] <dalek> roast: review: https://github.com/perl6/roast/commit/2aeb4dbf4d

[12:26] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128662

[12:28] <lizmat> ah, turns out I don't need to change 6.c-errate, as there is no test for the behaviour of .samemark("") there

[12:28] <lizmat> [Coke]: or do you think I should add one there ?

[12:31] <[Coke]> I think leaving that test in master is fine.

[12:32] <[Coke]> that will insure we don't backslide.

[12:37] <lizmat> oki

[12:46] <Frameless> .oO( backslide insurance )

[12:48] <Frameless> Was there a reason why the bail out feature of TAP was not implemented in Test.pm6?

[12:49] <Frameless> ( https://testanything.org/tap-version-13-specification.html#bail-out )

[12:50] <timotimo> never needed so far, apparently?

[12:50] <lizmat> Frameless: it *is* apparently available in Tap.pm6

[12:52] <Frameless> Then I'll add it to Test.pm6 as sub bail-out ($reason?) { ... }, unless there are objections.

[13:03] <lizmat> Frameless: well, adding subs technically falls under a different release, aka 6.d, no jnthn ?

[13:03] <lizmat> although personally, I don't have a problem with it

[13:04] <Frameless> Oh

[13:05] <lizmat> s/release/version/

[13:05] <lizmat> I guess we could consider it a bug fix  :-()

[13:08] <jnthn> lizmat: Hm, we're talking about Test.pm6 though?

[13:08] <jnthn> lizmat: The "new version" rules were for CORE.setting really

[13:10] <Frameless> jnthn: yes, we're talking about Test.pm6

[13:10] <timotimo> we're also doing a bunch of things to NativeCall without thinking about 6.c too terribly much

[13:11] <Frameless> Same with subtest() in Test.pm6. It's already isn't 100% compatible with 6.c. The subtest Str, Code; version won't work on old enough 6.c compiler.

[13:11] <lizmat> jnthn  timotimo : just checking  :-)

[13:11] <lizmat> so Frameless: go ahead  :-)

[13:12] <Frameless> bisect: use Test; subtest "Foo", { ok 1 }

[13:12] <Frameless> \o/

[13:12] <bisectable> Frameless: Exit code on a 'good' revision is 1 (which is bad), bisecting with inverted logic

[13:12] <bisectable> Frameless: bisect log: https://gist.github.com/90635a56f111589e0d687b509397532c

[13:12] <bisectable> Frameless: (2016-05-16) https://github.com/rakudo/rakudo/commit/e239f6e

[13:40] <dalek> rakudo/nom: da903a3 | lizmat++ | src/core/Cursor.pm:

[13:40] <dalek> rakudo/nom: Streamline Cursor.MATCH_SAVE a bit

[13:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/da903a33e0

[13:40] <dalek> rakudo/nom: 34f7f36 | lizmat++ | src/core/Label.pm:

[13:40] <dalek> rakudo/nom: Streamline Label.new a bit

[13:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/34f7f36f65

[13:40] <dalek> rakudo/nom: 147be4f | lizmat++ | src/core/Mu.pm:

[13:40] <dalek> rakudo/nom: Streamline Mu.gistseen/perlseen a bit

[13:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/147be4f1d8

[13:40] <dalek> rakudo/nom: 649ff44 | lizmat++ | src/core/PseudoStash.pm:

[13:40] <dalek> rakudo/nom: Streamline PseudoStash.(AT|BIND|EXISTS)_KEY a lot

[13:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/649ff4462a

[13:51] <dalek> nqp: b2774c9 | (Pawel Murias)++ | docs/ops.markdown:

[13:51] <dalek> nqp: Document nqp::readcharsfh.

[13:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b2774c9faf

[13:51] <dalek> nqp: 9f5cbb7 | (Pawel Murias)++ | src/vm/js/ (2 files):

[13:51] <dalek> nqp: [js] Implement nqp::readcharsfh.

[13:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9f5cbb7c6b

[13:52] <dalek> star: ebd5137 | coke++ | README (2 files):

[13:52] <dalek> star: fix some wiki references

[13:52] <dalek> star: review: https://github.com/rakudo/star/commit/ebd5137587

[13:54] <[Coke]> I will give the .msi process a shot later tonight.

[13:58] * Frameless dreams of passing The Joel Test for Rakudo/R* builds

[13:58] <Frameless> Single-step build. For all OSes \o/

[13:58] <Frameless> http://www.joelonsoftware.com/articles/fog0000000043.html

[13:59] <dalek> nqp: 7f194cc | (Pawel Murias)++ | src/vm/jvm/ (5 files):

[13:59] <dalek> nqp: A slow implementation of nqp::readcharsfh for the JVM.

[13:59] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7f194cc049

[13:59] <dalek> nqp: ae11894 | (Pawel Murias)++ | / (5 files):

[13:59] <dalek> nqp: Merge branch 'master' of https://github.com/perl6/nqp

[13:59] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ae118941c0

[14:01] <dalek> nqp: 3f34d27 | (Pawel Murias)++ | t/nqp/019-file-ops.t:

[14:01] <dalek> nqp: Test nqp::readcharsfh.

[14:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3f34d27f95

[14:57] <dalek> rakudo/nom: 6ef9e08 | lizmat++ | src/core/ (3 files):

[14:57] <dalek> rakudo/nom: Eradicate !=== from the setting

[14:57] <dalek> rakudo/nom:

[14:57] <dalek> rakudo/nom: For some reason a !=== a is 5x as slow as !(a === a)

[14:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ef9e080d5

[15:00] <lizmat> afk&

[15:23] <dalek> star: f23dc6d | (Steve Mynott)++ | tools/build/module-install.pl:

[15:23] <dalek> star: fix local module install on windows

[15:23] <dalek> star: review: https://github.com/rakudo/star/commit/f23dc6d2b9

[15:36] <stmuk> http://pl6anet.org/drop/rakudo-star-2016.07-x86_64%20(JIT)-RC1.msi

[15:57] <timotimo> sweet

[16:09] <[Coke]> stmuk++ # thanks!

[16:14] * stmuk compulsively washes after handling windows

[19:37] <gfldex> stmuk: i was able to install zef via panda --notests and zef works fine

[19:40] <R[DaneelOlivaw]> It may be worth considering having zef as default installer shipped with R*

[19:40] <R[DaneelOlivaw]> Considering even panda's author suggested so (/me forgets exact words tho)

[19:42] <R[DaneelOlivaw]> Ah, here. "regarding the discussion, shipping zef instead of panda with R* may be a good idea, with zef being much more actively maintained" http://irclog.perlgeek.de/perl6/2016-06-21#i_12704273

[19:42] <R[DaneelOlivaw]> It also supports uninstall

[19:44] <R[DaneelOlivaw]> And installs the prereqs only if the entire prereq chain + wanted module are all found succeed their tests

[19:45] <R[DaneelOlivaw]> (with --serial option to use the install-what-you-can behaviour)

[20:30] <moritz> R[DaneelOlivaw]: IMHO it's isntead time to start a new distribution

[20:30] <moritz> R[DaneelOlivaw]: one with a much clearer agenda

[20:30] <moritz> R[DaneelOlivaw]: like "compiler, module installer and all its dependencies"

[20:31] <moritz> instead of star's "some if this, some of that, yeah, whatever"

[20:31] <moritz> s/if/of/

[20:32] <[Coke]> star was, in my mind, there to give something package like before we had os packages.

[20:32] <[Coke]> Having a prebuilt bundle for mac, windows, etc. seems like a good idea, but I'd be happy with, as moritz said, compiler/module installer"

[20:58] <lizmat> jnthn: wrt to the .STORE being used to initialiize %h and @a

[21:00] <lizmat> I guess we're talking about altering the code in Actions, lines 8144 (for @) and 8174 (for %) ?

[21:01] <lizmat> if so, I'm not seeing how we could map in the "is List", "is Map" in there

[21:25] <Zoffix> moritz++ that's a very good point actually.

[21:25] <Zoffix> ugexe, are there any sort of stats available from your zef "ecosystem"? Like, what's the most-installed module, etc.

[21:28] <geekosaur> star wanted to grow up to be the batteries included distribution, but somewhere along the line it lost its way

[21:32] <timotimo> carry on, my wayward star / there'll be peace when you're far?

[21:36] <jnthn> lizmat: I'm dead tired, will have to take a look tomorrow. Harrass me if I forget. :-)

[21:36] <lizmat> ok jnthn,

[21:36] <lizmat> :-)

[21:37] <lizmat> get untired soon!

[21:37] <jnthn> :)

[21:37] <jnthn> Planning to hack on Perl 6 stuff all day on Thursday :)

[21:38] <lizmat> looking forward to it  :-)

[21:40] <jnthn> Me too :)

[21:40] <jnthn> 'night

[21:40] <Zoffix> night

[21:45] <lizmat> gnight jnthn

[21:45] <dalek> rakudo/nom: 8cfd343 | lizmat++ | src/core/stubs.pm:

[21:45] <dalek> rakudo/nom: Streamline dynamic variable lookup

[21:45] <dalek> rakudo/nom:

[21:45] <dalek> rakudo/nom: - lookup from the same dynamic scope 2x as fast

[21:45] <dalek> rakudo/nom: - no allocation per lookup anymore

[21:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8cfd343446

[22:08] <lizmat> good night, #perl6-dev!

[22:08] <Zoffix> night

[22:25] <ugexe> Zoffix: if you mean the zef.pm site, thats all tony-o and i admittedly dont know. but the service isn't finished yet and tony-o has been busy

[22:26] <ugexe> zef just uses https://github.com/ugexe/Perl6-ecosystems for its package list, which is generated like perl6/ecosystem, but available to `git` (a way to workaround chicken/egg problem re: behind a proxy and downloading the initial package list)

[22:29] <Zoffix> thanks

[22:56] <Zoffix> Test.pm6's code is really LTA.

[22:56] <Zoffix> Spaghetti

[22:57] <timotimo> the Test.pm6 we use for spec testing better be rather fast ...

[22:59] <Zoffix> Was that why it was written that way?

[22:59] <timotimo> could be

[23:40] <Zoffix> Awesome. Started a spectest run. Went for a quick jam. Came back: VM is frozen solid :(

[23:51] <dalek> rakudo/nom: 58dc8c6 | (Zoffix Znet)++ | lib/Test.pm6:

[23:51] <dalek> rakudo/nom: Add bail-out to Test.pm6

[23:51] <dalek> rakudo/nom:

[23:51] <dalek> rakudo/nom: Aborts the test run using the Bail out! feature of the TAP protocol.

[23:51] <dalek> rakudo/nom: Exit code set to 255 to mirror Perl 5's BAIL_OUT behaviour, which

[23:51] <dalek> rakudo/nom: I assume is sane.

[23:51] <dalek> rakudo/nom:

[23:51] <dalek> rakudo/nom: References:

[23:51] <dalek> rakudo/nom: https://testanything.org/tap-specification.html#bail-out

[23:51] <dalek> rakudo/nom: https://metacpan.org/pod/Test::More#BAIL_OUT

[23:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/58dc8c6185

[23:52] <dalek> roast: dd5aaf5 | (Zoffix Znet)++ | S24-testing/7-bail_out.t:

[23:52] <dalek> roast: Add tests for Test.pm6's bail-out() function

[23:52] <dalek> roast:

[23:52] <dalek> roast: Added to Rakudo in https://github.com/rakudo/rakudo/commit/58dc8c6185

[23:52] <dalek> roast: review: https://github.com/perl6/roast/commit/dd5aaf5fbf
