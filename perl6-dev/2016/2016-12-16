[01:00] <dalek> roast: c57aa05 | (Zoffix Znet)++ | S32-num/base.t:

[01:00] <dalek> roast: Test edge cases in .base's $digits arg

[01:00] <dalek> roast:

[01:00] <dalek> roast: RT#125819: https://rt.perl.org/Ticket/Display.html?id=125819

[01:00] <dalek> roast: review: https://github.com/perl6/roast/commit/c57aa055a3

[01:00] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=125819

[02:26] <dalek> rakudo/nom: 31e466c | (Zoffix Znet)++ | src/core/Range.pm:

[02:26] <dalek> rakudo/nom: Remove trailing whitespace

[02:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/31e466ca5f

[02:29] <samcv> nice AlexDaniel

[02:35] <dalek> rakudo/nom: 334d134 | (Zoffix Znet)++ | src/core/Range.pm:

[02:35] <dalek> rakudo/nom: Fix Range.rand generating value equal to excluded endpoints

[02:35] <dalek> rakudo/nom:

[02:35] <dalek> rakudo/nom: Fixes RT#129104: https://rt.perl.org/Ticket/Display.html?id=129104

[02:35] <dalek> rakudo/nom:

[02:35] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129104

[02:35] <dalek> rakudo/nom: The discussion in the ticket speculates this only affects Num ranges,

[02:35] <dalek> rakudo/nom: however from the code I see other types are affected as well. For example

[02:35] <dalek> rakudo/nom: using a Rat 1.00000000000001 has the same issue in lizmat's one liner.

[02:35] <dalek> rakudo/nom: Reproducing with an Int is a bit harder due to much larger pool of

[02:35] <dalek> rakudo/nom: possible random numbers, but sometime... somewhere... in a nuclear plant

[02:35] <dalek> rakudo/nom: running on Perl 6, a .rand on Int range with endpoint exclusions will

[02:35] <dalek> rakudo/nom: produce a value equal to the excluded endpoint.

[02:35] <dalek> rakudo/nom:

[02:35] <dalek> rakudo/nom: The problem is due to us checking generated value against zero and

[03:27] <ugexe> Anyone able to give permissions on the advent calender? I'm going to bed soon and need to post Friday's advent post

[03:28] <ugexe> never mind, timotimo took care of it afterall!

[07:36] <[Tux]> This is Rakudo version 2016.11-252-g334d1344a built on MoarVM version 2016.11-60-g21abc2a1

[07:36] <[Tux]> csv-ip5xs        3.164

[07:36] <[Tux]> test            14.281

[07:36] <[Tux]> test-t           6.164

[07:36] <[Tux]> csv-parser      15.141

[08:36] <lizmat> Files=1155, Tests=53927, 197 wallclock secs (11.01 usr  4.56 sys + 1167.93 cusr 125.37 csys = 1308.87 CPU)

[09:30] <dalek> nqp: ad00a7b | niner++ | tools/build/ (2 files):

[09:30] <dalek> nqp: Use NQP_LIB_DIR instead of manually assembling a path

[09:30] <dalek> nqp:

[09:30] <dalek> nqp: This allows for changing the lib_dir in a centralized place, e.g. for

[09:30] <dalek> nqp: installing libraries into /usr/lib64 instead of /usr/share.

[09:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ad00a7bf91

[10:27] <dalek> roast: acd8f24 | samcv++ | S15-unicode-information/uniprop.t:

[10:27] <dalek> roast: uniprop: add tests for three more properties.

[10:27] <dalek> roast:

[10:27] <dalek> roast: Hangul_Syllable_Type, East_Asian_Width and Case_Folding

[10:27] <dalek> roast: review: https://github.com/perl6/roast/commit/acd8f246af

[11:06] <dalek> nqp: 0dce14b | niner++ | / (5 files):

[11:06] <dalek> nqp: Support Configure.pl --libdir=...

[11:06] <dalek> nqp:

[11:06] <dalek> nqp: Allows for installing architecture dependent libraries in /usr/lib64 for

[11:06] <dalek> nqp: example.

[11:06] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0dce14b636

[11:08] <dalek> rakudo/nom: 1661511 | niner++ | tools/build/Makefile- (2 files):

[11:08] <dalek> rakudo/nom: Support NQP with non-standard libdir

[11:08] <dalek> rakudo/nom:

[11:08] <dalek> rakudo/nom: Allows for storing architecture dependant library files in /usr/lib64

[11:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1661511bba

[11:12] <nine> This got rid of the last patch and scary sed call in the openSUSE spec files. Packaging rakudo/nqp/moar is now a real piece of cake :)

[11:12] <nine> Oh, I should bump NQP_VERSIOn

[11:13] <jnthn> mmm...cake :)

[11:13] <jnthn> nine++

[11:13] <dalek> rakudo/nom: fe665fc | niner++ | tools/build/NQP_REVISION:

[11:13] <dalek> rakudo/nom: Bump NQP for build system updates needed by commit 1661511bba5861bfee3258dd1d3a69696f9395a7

[11:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fe665fc9f0

[11:58] <dalek> rakudo/nom: 124a0d9 | (Zoffix Znet)++ | docs/ChangeLog:

[11:58] <dalek> rakudo/nom: List sub MAIN Enum feature in ChangeLog

[11:58] <dalek> rakudo/nom:

[11:58] <dalek> rakudo/nom: Previous release excluded the feature, due to the indentified problem

[11:58] <dalek> rakudo/nom: (Str $x cannot accept strings True/False; same with any other enums).

[11:58] <dalek> rakudo/nom:

[11:58] <dalek> rakudo/nom: We didn't come up with an alternate solution, but neither did any of

[11:58] <dalek> rakudo/nom: our bleed users notice the issue. The problem can also be worked

[11:58] <dalek> rakudo/nom: around with a Str() coercer, so I'm including the feature in December

[11:58] <dalek> rakudo/nom: release.

[11:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/124a0d9c38

[13:14] <MasterDuke_> jnthn: unless i'm crazy, -n doesn't currently support NEXT/LAST/etc

[13:18] <jnthn> o.O

[13:18] <jnthn> Well... oops

[13:19] <MasterDuke_> yeah, given i've been messing around in that code recently i can try and add it

[13:19] <timotimo> we don't even have spec tests that test that? wow.

[13:20] <MasterDuke_> though i thought i'd better benchmark the change i just got working last evening, went from 1m50s to -ne '' a 13million line file before my changes to 2m50s after

[13:20] <yoleaux2> 13:20Z <Zoffix> MasterDuke_: there's a ticket for LAST in -n: https://rt.perl.org/Ticket/Display.html?id=129093#ticket-history

[13:21] <jnthn> So it got...slower?

[13:21] <MasterDuke_> so, yay for finally getting it working, boo for being much much slower

[13:21] <MasterDuke_> yeah. turns out get() is very slow

[13:21] <jnthn> Oh, you're calling get every time?

[13:21] <jnthn> Yeah, don't do that

[13:21] <jnthn> :)

[13:21] <MasterDuke_> $filehandle.get() is fast

[13:22] <jnthn> Probably best will be to use the lines iterator

[13:22] <jnthn> And pull-one from it and check you don't get back IterationEnd

[13:24] <MasterDuke_> i'm gonna benchmark a bunch of ways

[13:25] <MasterDuke_> but the minimal number of tests is kind of annoying, just makes it harder to know if i'm changing desired/expected behavior

[13:25] <MasterDuke_> does S19 have much to say

[13:25] <MasterDuke_> ?

[13:31] <MasterDuke_> jnthn: the current behaviour is lines(), but i was hoping for something faster. Perl 5 can -n over the same file much much faster

[13:44] <MasterDuke_> .tell Zoffix thanks for the link, i'll see if i can do something about it

[13:44] <yoleaux2> MasterDuke_: I'll pass your message to Zoffix.

[15:42] <|Tux|> This is Rakudo version 2016.11-252-g334d1344a built on MoarVM version 2016.11-60-g21abc2a1

[15:42] <|Tux|> csv-ip5xs        3.082

[15:42] <|Tux|> test            13.311

[15:42] <|Tux|> test-t           6.053

[15:42] <|Tux|> csv-parser      13.830

[16:23] <[Coke]> ok, have an 85 line htmlify.p6 segfaulting when running in parallel mode... still golfing.

[16:55] <[Coke]> jnthn: Down to 40 lines; looks like it needs a gather/take, an await. It also currently has precompilation involved, which we might be able to get rid of; 40 lines at https://github.com/perl6/doc/blob/coke/bughunt/htmlify.p6

[17:03] <[Coke]> moar(84521,0x70000082e000) malloc: *** error for object 0x7fba12f37400: pointer being freed was not allocated

[17:03] <[Coke]> *** set a breakpoint in malloc_error_break to debug

[19:22] <jnthn> [Coke]: Thanks; bit tied up with advent post right now but will look later ;)

[19:22] <yoleaux2> 15:21Z <Zoffix> jnthn: A friendly reminder: Rakudo's next release is tomorrow (Saturday) and we'll need a MoarVM release to use for it.

[19:22] <[Coke]> jnthn: sure sure. advent first!

[19:22] <[Coke]> ... and a moarvm releaes. ;)

[19:22] <[Coke]> *se

[19:22] <[Coke]> down to 29 lines, btw. :)

[19:23] <jnthn> The advent deadline is sooner, so concentrating on that first ;)

[19:23] <jnthn> (I'm about 75% of the way through writing, though, so not too worried by now :))

[19:26] <MasterDuke_> [Coke]: does it need the 'use nqp;'?

[19:30] <[Coke]> MasterDuke_: nope. I had removed all the nqp:: calls and forgot that.

[19:30] <[Coke]> just doing one more run without to make sure the failures are the same.

[19:33] <[Coke]> actually, it does seem slightly happier without it

[19:34] <[Coke]> um, yah, leaving it in. :|

[19:35] <MasterDuke_> funny (not in a good way)

[20:11] <dalek> rakudo/nom: 4a16884 | samcv++ | docs/ChangeLog:

[20:11] <dalek> rakudo/nom: Update changelog.

[20:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4a16884899

[20:11] <dalek> rakudo/nom: 2a09e92 | (Zoffix Znet)++ | docs/ChangeLog:

[20:11] <dalek> rakudo/nom: Merge pull request #958 from samcv/changelog-update

[20:11] <dalek> rakudo/nom:

[20:11] <dalek> rakudo/nom: Update changelog.

[20:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2a09e920b9

[21:15] <lizmat> m: m/./   # RT #130363

[21:15] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130363

[21:15] <camelia> rakudo-moar 2a09e9: OUTPUT«No such method 'match' for invocant of type 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[21:20] <jnthn> m: /./

[21:20] <camelia> rakudo-moar 2a09e9: ( no output )

[21:21] <jnthn> I think that one calls out of sink

[21:21] <jnthn> Quite why it doesn't also blow up in the same way I'm not sure

[21:21] <jnthn> m: say 1 if /./

[21:21] <camelia> rakudo-moar 2a09e9: ( no output )

[21:21] <jnthn> m: if /./ -> $x { dd $x }

[21:21] <camelia> rakudo-moar 2a09e9: ( no output )

[21:22] <jnthn> m: unless /./ -> $x { dd $x }

[21:22] <camelia> rakudo-moar 2a09e9: OUTPUT«Regex $x = /./␤»

[21:22] <jnthn> m: $_ = 'x'; say 1 if /./

[21:22] <camelia> rakudo-moar 2a09e9: OUTPUT«1␤»

[21:22] <jnthn> m: my $_ = 'x'; if /./ -> $x { dd $x }

[21:22] <camelia> rakudo-moar 2a09e9: OUTPUT«Potential difficulties:␤    Redeclaration of symbol '$_'␤    at <tmp>:1␤    ------> my $_⏏ = 'x'; if /./ -> $x { dd $x }␤Regex $x = /./␤»

[21:22] <jnthn> m: $_ = 'x'; if /./ -> $x { dd $x }

[21:22] <camelia> rakudo-moar 2a09e9: OUTPUT«Regex $x = /./␤»

[21:23] <jnthn> m: $_ = 'x'; if /./ { say 1 }

[21:23] <camelia> rakudo-moar 2a09e9: OUTPUT«1␤»

[21:23] <jnthn> So, quiet on Bool too

[21:23] <jnthn> (Don't see anything suspect in any of the above)

[21:23] <jnthn> Agree it's a weird inconsistency, anyway

[21:24] <jnthn> (between m and without it)

[21:28] <lizmat> jnthn: I think the m// case assumes there will be named params

[21:28] <lizmat> and that needs .match

[21:28] <lizmat> or is that a wrong assumption ?

[21:30] <jnthn> Well, it could still generate .can('match') ?? .match(/./) !! ($/ = Nil) or so

[21:31] <jnthn> (or something appropriate, that may not be exactly it)

[21:33] <lizmat> jnthn: but what would be against just adding a Any:U: candidate for .match ?

[21:34] <lizmat> that would just set $/ to Nil ?

[21:34] <lizmat> I mean, we have a candidate in Cool already

[21:36] <jnthn> What does the one in Cool do?

[21:37] <lizmat> call self.Stringy.match

[21:39] <jnthn> Ah, that's reasonable

[21:40] <lizmat> jnthn: adding a Any:U: match candidate makes one spectest fail:

[21:40] <lizmat> throws-like 'm/%var/', Exception, 'cannot interpolate hashes into regexes';

[21:41] <dalek> roast: 4d14891 | samcv++ | S15-unicode-information/uniprop.t:

[21:41] <dalek> roast: uniprop: add tests for Block and Jamo_Short_Name

[21:41] <dalek> roast: review: https://github.com/perl6/roast/commit/4d14891710

[21:41] <lizmat> m: my %var; /%var/   # should this bomb?

[21:41] <camelia> rakudo-moar 2a09e9: ( no output )

[21:41] <samcv> hopefully if i add ~3 tests per day, eventually there will be tests for all 124 properties :P

[21:42] <lizmat> m: my %var; m/%var/   # then why do we expect this to bomb ?

[21:42] <camelia> rakudo-moar 2a09e9: OUTPUT«No such method 'match' for invocant of type 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[21:42] <lucasb> sorry for intruding, plain /.../ creates a regex. do you want it to be a match operator?

[21:43] <lizmat> lucasb: this is about the difference between /./ and m/./

[21:43] <lucasb> I understand

[21:43] <lizmat> # RT #130363

[21:43] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130363

[21:43] <lizmat> they should act the same

[21:43] <jnthn> samcv++ # getting our test coverage up :)

[21:43] <lucasb> in boolean context /.../ acts like m/.../, but otherwise, it just creates a regex object, no?

[21:43] <jnthn> lucasb: Also in sink context

[21:44] <lizmat> I don't particularly care what it means

[21:44] <lucasb> they should act the same only in boolean context or also in sink context?

[21:44] <jnthn> Phew, I think I finished my advent post

[21:44] <lucasb> ah, ok

[21:44] <lizmat> lucasb: they should be the same everywhere, as they should be semantically the same

[21:44] <samcv> jnthn, may easier to do all the changes in unicode that need to happen in moarvm at the same time right? once we test for everything?

[21:44] <samcv> since there's so many

[21:44] <lizmat> regardless of context

[21:44] <samcv> potentially we might not have yet

[21:45] <samcv> nice RE the advent post jnthn

[21:45] <lucasb> my $rx = rx/foo/; if $rx { say 'yes' }  # should $rx in boolean context activates the matching behaviour or not?

[21:45] <lucasb> because, now, it does try to match against $_

[21:46] <lucasb> instead of just asking "is this object truthy or falsey?"

[21:46] <jnthn> samcv: Hard to say, but I think there's a range of issues raised by the tests that will need different things.

[21:46] <samcv> yeah

[21:46] <jnthn> samcv: I mean, "we're totally missing this property" might be as simple as "oh, just tweak ucd2c.pl to read the file in and call it done"

[21:46] <samcv> and i still need to figure out the distinctions between cjkNumeric and the other numeric properties and the accounting numeric ones. hah

[21:47] <samcv> yeah

[21:47] <jnthn> But some of the other issues will likely be...harder :S

[21:47] <lizmat> m: my %var; /%var/   # jnthn, is this supposed to throw ?

[21:47] <camelia> rakudo-moar 2a09e9: ( no output )

[21:47] <jnthn> m: say Any ~~ /%var/

[21:47] <camelia> rakudo-moar 2a09e9: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Variable '%var' is not declared. Did you mean '&VAR'?␤at <tmp>:1␤------> say Any ~~ /⏏%var/␤»

[21:48] <jnthn> m: my %var; say Any ~~ /%var/

[21:48] <camelia> rakudo-moar 2a09e9: OUTPUT«Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤Nil␤»

[21:48] <jnthn> I think it doesn't even make it into the regex

[21:48] <jnthn> And then the hash check is runtime

[21:48] <lucasb> IMO, /%h/ shouldn't throw, otherwise double string interpolation "%h" would also have to throw

[21:49] <jnthn> lucasb: Don't see how that follows

[21:49] <jnthn> Regexes are a totally different language to strings

[21:49] <jnthn> Not even parsed by the same codepath

[21:49] <lucasb> sorry, correct. I keep thinking with my Perl 5 head :(

[21:49] <jnthn> :)

[21:50] <jnthn> I thought that interpolation of hashes was reserved

[21:50] <lucasb> my $x = /foo/;   # should this create a regex object or try to match against $_ ?

[21:50] <jnthn> So it might be that we could whine about it at compile time

[21:50] <jnthn> Certainly a regex object there

[21:50] <lizmat> well, yes, and there is a test in t/spec/S05-interpolation/regex-in-variable.t that now doesn't pass anymore

[21:50] <lizmat> if I make m/./ not die

[21:51] <jnthn> Yeah, well, it was apparently passing for the wrong reason

[21:51] <jnthn> But we might be able to make a right reason :)

[21:51] <lizmat> so the test as such was bogus, because it ok'd it on m/./ throwing rather than %var

[21:51] <lizmat> anyways, going to keep this for post release

[21:52] <lizmat> feels a bit like a can of worms that I don't want exploding in a new release  :-)

[21:53] <jnthn> Yeah

[21:54] <jnthn> Jsut checked STD; it doesn't do a parse-time detect on that

[21:54] <jnthn> m: my %var; /<%var>/

[21:54] <camelia> rakudo-moar 2a09e9: ( no output )

[21:54] <jnthn> m: my %var; 'a' ~~ /<%var>/

[21:54] <camelia> rakudo-moar 2a09e9: ( no output )

[21:54] <jnthn> o.O

[21:55] * jnthn quickly closes the can again :)

[22:00] <ugexe> m: say (1,2).map({ LAST { say "DONE" } })[2]; # is this a bug?

[22:00] <camelia> rakudo-moar 2a09e9: OUTPUT«DONE␤DONE␤Nil␤»

[22:00] <ugexe> m: say (1..10).map({ LAST { say "DONE" } })[5]; # those were bad numbers to demonstrate

[22:00] <camelia> rakudo-moar 2a09e9: OUTPUT«Nil␤»

[22:01] <ugexe> m: say (1..10).map({ LAST { say "DONE" } })[10];

[22:01] <camelia> rakudo-moar 2a09e9: OUTPUT«DONE␤DONE␤Nil␤»

[22:01] <lizmat> ugexe: feels to me the DONE should be done once

[22:01] <lizmat> looks like it is trying top vivify element 11 a second time ?

[22:02] <lizmat> ugexe: please RT

[22:02] <ugexe> ok. should it also have fire on [9] though?

[22:02] <ugexe> m: say (1..10).map({ LAST { say "DONE" } })[9];

[22:02] <camelia> rakudo-moar 2a09e9: OUTPUT«Nil␤»

[22:18] <lizmat> ugexe: no, because it can only know to fire LAST if the iterator returns InteratioEnd

[22:18] <lizmat> and it won't know until it actually has tried to pull it

[22:18] <lizmat> for index 10

[22:51] <lizmat> m: say (^Inf).grep({last if $_ > 5; LAST say "foo"; True})[^20]

[22:51] <camelia> rakudo-moar 2a09e9: OUTPUT«(0 1 2 3 4 5 Nil Nil Nil Nil Nil Nil Nil Nil Nil Nil Nil Nil Nil Nil)␤»

[22:53] <lizmat> m: my $i = (^Inf).grep({last if $_ > 0; True}).iterator; dd $i.pull-one; dd $i.pull-one   # RT #130365

[22:53] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130365

[22:53] <camelia> rakudo-moar 2a09e9: OUTPUT«0␤1␤»

[22:53] <lizmat> ^^^ push-exactly is not the issue here

[23:10] * jnthn is exhausted and will do the MoarVM release tomorrow morning when he wakes up :)

[23:11] <lizmat> good night, jnthn

[23:14] <jnthn> 'night

[23:18] * lizmat has a fix for RT #130365, but it doesn't fix this:

[23:18] <lizmat> m: my $i = (^Inf).grep({last if $_ > 0; True}).iterator; dd $i.pull-one; dd $i.pull-one

[23:18] <camelia> rakudo-moar 2a09e9: OUTPUT«0␤1␤»

[23:18] <lizmat> that should have been 0 IterationEnd

[23:40] <gfldex> I may need some sleep before I can plug the ENODOC of LAST in a .map. I also need to complain here about that fact so I don't forget until tomorrow.

[23:40] <gfldex> good night :)

[23:47] <dalek> rakudo/nom: 7021861 | lizmat++ | src/core/Any-iterable-methods.pm:

[23:47] <dalek> rakudo/nom: Preliminary fix for RT #130365

[23:47] <dalek> rakudo/nom:

[23:47] <dalek> rakudo/nom: Remove the optimization for non-phaser blocks, because they can have

[23:47] <dalek> rakudo/nom: a "last" in them.  This will make grep slower for the general case.

[23:47] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130365

[23:47] <dalek> rakudo/nom: Will try to restore the optimization and have it work properly after

[23:47] <dalek> rakudo/nom: the 2016.12 release.

[23:47] <dalek> rakudo/nom:

[23:47] <dalek> rakudo/nom: Meanwhile, this also makes some hyper/race tests TODO tests pass.

[23:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7021861705

[23:49] <lizmat> and with that, I wish #perl6-dev a good night!
