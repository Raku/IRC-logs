[00:44] <dalek> roast: 72fe409 | TimToady++ | S32-num/power.t:

[00:44] <dalek> roast: some tests for *ⁿ

[00:44] <dalek> roast: review: https://github.com/perl6/roast/commit/72fe40903d

[00:46] <timotimo> oh, i just thought about that today!

[01:36] <b2gills> m: say (^5).hyper(:1batch).map: *+1

[01:36] <camelia> rakudo-moar 6c9837: OUTPUT«HyperSeq.new␤»

[01:37] <b2gills> meant to do that in a private msg

[05:04] <MasterDuke> lizmat timotimo: i just tried all the ones i initially found, only those in Exception.pm could be converted ( https://github.com/rakudo/rakudo/pull/961 )

[09:42] <[Tux]> This is Rakudo version 2016.12-3-g6c9837297 built on MoarVM version 2016.12

[09:42] <[Tux]> csv-ip5xs        3.282

[09:42] <[Tux]> test            13.959

[09:42] <[Tux]> test-t           6.122

[09:42] <[Tux]> csv-parser      13.968

[10:02] <dalek> rakudo/nom: f812bce | MasterDuke17++ | src/core/Exception.pm:

[10:02] <dalek> rakudo/nom: Convert some bindattrs to direct binding

[10:02] <dalek> rakudo/nom:

[10:02] <dalek> rakudo/nom: See https://irclog.perlgeek.de/perl6-dev/2016-12-17#i_13759010 for

[10:02] <dalek> rakudo/nom: reference.

[10:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f812bce44f

[10:02] <dalek> rakudo/nom: ee2e8a5 | lizmat++ | src/core/Exception.pm:

[10:02] <dalek> rakudo/nom: Merge pull request #961 from MasterDuke17/Exception.pm_bindattrs_to_direct_binding

[10:02] <dalek> rakudo/nom:

[10:02] <dalek> rakudo/nom: Convert some bindattrs to direct binding

[10:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ee2e8a5f51

[10:06] <gfldex> in the last week Pod::To::BigPage went from 44s to 42s run time

[10:07] <gfldex> speed++

[10:12] <samcv> nice

[10:13] <samcv> gfldex, do you know why that was?

[10:13] <gfldex> many small improvements

[10:16] <dalek> rakudo/nom: 9672bc0 | (Steve Mynott)++ | tools/create-release-announcement.pl:

[10:16] <dalek> rakudo/nom: Using Perl 6 book no longer shipped with R*

[10:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9672bc05c6

[10:16] <dalek> rakudo/nom: 00c1fed | lizmat++ | tools/create-release-announcement.pl:

[10:16] <dalek> rakudo/nom: Merge pull request #962 from LondonPM/nom

[10:16] <dalek> rakudo/nom:

[10:16] <dalek> rakudo/nom: Using Perl 6 book no longer shipped with R*

[10:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/00c1fede1a

[10:16] <RabidGravy> I think the headline thing is that the test-t in [Tux] benchmark above is *half* of what it was this time last year :)

[10:18] <RabidGravy> at this rate Term::Cap might be usable before long (at the last testing it took 20s to parse a full termcap file)

[10:21] <samcv> how big are the termcap files?

[10:23] <RabidGravy> ~ 200K the BSD one I was testing with

[10:26] <RabidGravy> there's a gnu one that is larger

[10:30] <dalek> rakudo/nom: 5ec6b32 | lizmat++ | src/core/Block.pm:

[10:30] <dalek> rakudo/nom: Replace bindattr with direct attribute usage

[10:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5ec6b32fa7

[13:05] <MasterDuke> lizmat: huh, i thought i tried changing that Block bindattr

[13:09] <MasterDuke> it seems like none that used attributes declared in BOOTSTRAP.nqp could be converted, which is most of the ones i found

[14:17] <dalek> rakudo/nom: fb38190 | moritz++ | src/core/Proc.pm:

[14:17] <dalek> rakudo/nom: #128594: die in a controlled way rather than with a core dump

[14:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fb381908ed

[14:17] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128594

[15:04] <Zoffix> Hi.

[15:04] <timotimo> hi!

[15:04] <Zoffix> Is it normal for a BOOTCode to throw "Cannot invoke this object (REPR: Null; VMNull)" when attempting to call it?

[15:04] <timotimo> it's not a BOOTCode, it's VMNull :)

[15:05] <timotimo> did you accidentally mis-spell something? because nqp will just totally accept anything and give you VMNull (rather, NQPMu) for it

[15:05] <Zoffix> It's produced by World.compile_in_context

[15:05] <timotimo> oh, that isn't fun

[15:06] <Zoffix> If it's compiling  `where` $_ = 1, it works: https://gist.github.com/zoffixznet/73c416104ff3d1bd15928cfa7fd1ced5 but if it's compiling `where` $_ == 1, it throws that exception: https://gist.github.com/zoffixznet/d8fac04ca19cb8ba910bd2ef9a603721

[15:06] <Zoffix> And now I'm wondering if it's normal? Like it's not meant to be called during that time or something?

[15:07] <timotimo> huh, it's calling ACCEPTS on the result of infix:<==> ?

[15:07] <timotimo> why aren't you using where * == 1 :)

[15:08] <Zoffix> Because that's not where the bug happens.

[15:08] <timotimo> OK

[15:09] <Zoffix> m: subset InfTan of Numeric where $_ == 2; multi tan2 (InfTan) {"hah"}; say tan2(2e0)

[15:09] <camelia> rakudo-moar fb3819: OUTPUT«hah␤»

[15:09] <Zoffix> m: subset InfTan of Numeric where $_ == 2; multi tan (InfTan) {"hah"}; say tan(2e0)

[15:09] <camelia> rakudo-moar fb3819: OUTPUT«-2.18503986326152␤»

[15:09] <Zoffix> m: subset InfTan of Numeric where $_ == 2; multi tan (InfTan) {"hah"}; say tan(2)

[15:09] <camelia> rakudo-moar fb3819: OUTPUT«Cannot invoke this object (REPR: Null; VMNull)␤  in any accepts_type at gen/moar/Metamodel.nqp line 3444␤  in sub tan at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:09] <Zoffix> And that goes away if you turn off the optimizer.

[15:09] <timotimo> aha!

[15:10] <Zoffix> And the optimizer tries to call the block made by World.compile_in_context

[15:10] <timotimo> can you get the --ll-exception of that?

[15:10] <timotimo> i don't know under what circumstance compile_in_context can return null, but the optimizer should probably check for that and pretend it never tried to do anything

[15:11] <Zoffix> it returns a BOOTCode

[15:11] <Zoffix> If I say $result.HOW.name($result) it says BOOTCode

[15:11] <timotimo> hm, so the code it invokes does the attempt to call a null

[15:11] <Zoffix> Here's --ll-exception https://gist.github.com/zoffixznet/61122e721c0563c5b8e7b2bc3a899681

[15:12] <Zoffix> <timotimo> huh, it's calling ACCEPTS on the result of infix:<==> ?

[15:12] <Zoffix> It's supposed to use it as a block, no?

[15:12] <Zoffix> Like a block that calls == on something

[15:12] <timotimo> ah, that's the post-optimizer thing

[15:12] <timotimo> anyway

[15:13] <timotimo> looks like binding the parameter to call the thing makes an explode inside ACCEPTS

[15:13] <timotimo> i.e. the where is crashing because we're apparently calling something in the wrong way

[15:14] <timotimo> i kind of think bind_one_param ought to catch that exception

[15:17] <MasterDuke> timotimo: i've been burned before by nqp accepting misspellings and giving VMNulls/NQPMus. is there any way to make nqp a little less forgiving?

[15:17] <timotimo> yeah, should be possible

[15:17] <timotimo> find the --target=parse of something simple like MisterMcDoesntExist

[15:17] <timotimo> that ought to lead you to the point where some fallback is saying "we didn't find it, so give NQPMu"

[15:18] <Zoffix> Here's a piece that gives BOOTCode for .HOW.name, and then throws the VMNull: https://gist.github.com/zoffixznet/f417abc763e272cd9506e969c4ffc4df

[15:18] <Zoffix> (it's in the try {} block)

[17:03] <raiph> Q on SO about forking and piping unanwsered for a day (beyond my paygrade): http://stackoverflow.com/questions/41202370/perl6-child-process-read-seems-non-blocking

[17:08] <timotimo> raiph: i'll run the script through strace and see if i notice anything in particular

[17:09] <timotimo> need to build my whole perl6 first, though

[17:11] <raiph> timotimo: thx

[17:22] <gfldex> #130371 can be closed

[17:22] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130371

[17:23] <timotimo> raiph: answered

[17:32] <raiph> timotimo: <3

[17:32] <timotimo> that one was actually enjoyable to hunt down

[17:34] <raiph> :)

[18:11] <lizmat> MasterDuke: re Block attribute: I was triggered by the fact that the further down it *does* use the short-hand  :-)

[18:34] <dalek> nqp: e424132 | (Pawel Murias)++ | src/vm/jvm/ (2 files):

[18:34] <dalek> nqp: [jvm] Improve nqp::tc and nqp::tclc a bit.

[18:34] <dalek> nqp:

[18:34] <dalek> nqp: Still lack support for most codepoints that don't have a 1 to 1 mapping.

[18:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e424132c57

[18:35] <dalek> roast: 0465872 | (Zoffix Znet)++ | S03-operators/overflow.t:

[18:35] <dalek> roast: Fix incorrect test

[18:35] <dalek> roast:

[18:35] <dalek> roast: The test was added 11 days ago[^1] and is not part of 6.c-errata.

[18:35] <dalek> roast:

[18:35] <dalek> roast: Negative exponents underflow, not overflow.

[18:35] <dalek> roast:

[18:35] <dalek> roast: [1] https://github.com/perl6/roast/commit/714abc91cee23c81556f8bed0503fff999a4d2d1

[18:35] <dalek> roast: review: https://github.com/perl6/roast/commit/0465872030

[18:38] <dalek> rakudo/nom: 7a642f8 | (Zoffix Znet)++ | src/core/Int.pm:

[18:38] <dalek> rakudo/nom: Throw on underflow in infix:<**>(Int, Int)

[18:38] <dalek> rakudo/nom:

[18:38] <dalek> rakudo/nom: Fixes RT#130369: https://rt.perl.org/Ticket/Display.html?id=130369

[18:38] <dalek> rakudo/nom:

[18:38] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130369

[18:38] <dalek> rakudo/nom: The behaviour in the ticket is observed due to the power being small

[18:38] <dalek> rakudo/nom: enough that overflow doesn't occur when we raise a number to absolute

[18:38] <dalek> rakudo/nom: power, yet large enough that when we divide 1 by it, it underflows.

[18:38] <dalek> rakudo/nom:

[18:38] <dalek> rakudo/nom: - Add extra check for overflow condition to throw underflow exception

[18:38] <dalek> rakudo/nom:     if the power is negative

[18:38] <dalek> rakudo/nom: - Check for zero result and throw underflow if the base is not zero

[18:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7a642f865a

[18:40] <dalek> roast: 522a9c7 | (Zoffix Znet)++ | S03-operators/overflow.t:

[18:40] <dalek> roast: Test throwage with infix:<**>(Int, Int) with largish negative powers

[18:40] <dalek> roast:

[18:40] <dalek> roast: RT#130369: https://rt.perl.org/Ticket/Display.html?id=130369

[18:40] <dalek> roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/7a642f865a

[18:40] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130369

[18:40] <dalek> roast: review: https://github.com/perl6/roast/commit/522a9c7857

[18:42] <dalek> nqp: 9abf968 | (Pawel Murias)++ | src/vm/js/ (2 files):

[18:42] <dalek> nqp: [js] Partial implementations of nqp::tc and nqp::tclc (doesn't support polytomic greek and ligatures yet).

[18:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9abf968422

[18:42] <dalek> nqp: 5538cbe | (Pawel Murias)++ | t/nqp/059-nqpop.t:

[18:42] <dalek> nqp: Test nqp::tc and nqp::tclc a bit.

[18:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5538cbe0aa

[20:04] <dalek> roast: 860dc71 | (Zoffix Znet)++ | S02-types/nan.t:

[20:04] <dalek> roast: Test subclass of NaN !=== a NaN

[20:04] <dalek> roast:

[20:04] <dalek> roast: RT#129002: https://rt.perl.org/Ticket/Display.html?id=129002

[20:04] <dalek> roast: review: https://github.com/perl6/roast/commit/860dc71980

[20:04] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129002

[20:28] <samcv> pmurias++

[20:44] <dalek> nqp: 6b5a281 | (Pawel Murias)++ | src/vm/js/nqp-runtime/ (3 files):

[20:44] <dalek> nqp: [js] Repossess objects in the places where Moar and JVM do that.

[20:44] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6b5a2814f6

[20:47] <b2gills> Where would be a good place to test ｢.lazy-if｣?

[21:11] <lizmat> good night, #perl6-dev!

[21:11] <timotimo> gnite lizmat
