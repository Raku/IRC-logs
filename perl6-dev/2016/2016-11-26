[01:06] <dalek> nqp: f2c0405 | (Zoffix Znet)++ | .gitignore:

[01:06] <dalek> nqp: Add tools/build/install-jvm-runner.pl to .gitignore

[01:06] <dalek> nqp:

[01:06] <dalek> nqp: So it does not accidentally get committed

[01:06] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f2c0405aeb

[01:20] <dalek> nqp: 1db2689 | (Zoffix Znet)++ | / (2 files):

[01:20] <dalek> nqp: Remove trailing whitespace

[01:20] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1db2689a51

[01:27] <dalek> nqp: ddebbfa | (Zoffix Znet)++ | / (2 files):

[01:27] <dalek> nqp: Make sprintf %f, %e, and %g handle negative zero

[01:27] <dalek> nqp:

[01:27] <dalek> nqp: Negative zeros in those formats produce a string starting with -, as corroborated by

[01:27] <dalek> nqp: Perl 5's sprintf.

[01:27] <dalek> nqp:

[01:27] <dalek> nqp: Fixes RT#128821: https://rt.perl.org/Ticket/Display.html?id=128821

[01:27] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128821

[01:27] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ddebbfa959

[01:34] <dalek> rakudo/nom: f1263ab | (Zoffix Znet)++ | tools/build/NQP_REVISION:

[01:34] <dalek> rakudo/nom: (bump nqp) Make sprintf %f, %e, and %g handle negative zero

[01:34] <dalek> rakudo/nom:

[01:34] <dalek> rakudo/nom: Negative zeros in those formats produce a string starting with -, as corroborated by

[01:34] <dalek> rakudo/nom: Perl 5's sprintf.

[01:34] <dalek> rakudo/nom:

[01:34] <dalek> rakudo/nom: Fixes RT#128821: https://rt.perl.org/Ticket/Display.html?id=128821

[01:34] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128821

[01:34] <dalek> rakudo/nom: NQP commit: https://github.com/perl6/nqp/commit/ddebbfa959a67e250099fc685

[01:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f1263abc27

[02:00] <dalek> roast: 795fc1f | (Zoffix Znet)++ | S32-num/negative-zero.t:

[02:00] <dalek> roast: Test sprintf can handle negative zero

[02:00] <dalek> roast:

[02:00] <dalek> roast: RT#128821: https://rt.perl.org/Public/Bug/Display.html?id=128821

[02:00] <dalek> roast:

[02:00] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128821

[02:00] <dalek> roast: N.B.: I have more negative zero tests to write, which is why I

[02:00] <dalek> roast: started this separate file for negative zero.

[02:00] <dalek> roast: review: https://github.com/perl6/roast/commit/795fc1f3b3

[02:01] <dalek> rakudo/nom: 2efeda0 | (Zoffix Znet)++ | t/spectest.data:

[02:01] <dalek> rakudo/nom: Add S32-num/negative-zero.t to list of test files to run

[02:01] <dalek> rakudo/nom:

[02:01] <dalek> rakudo/nom: Tests negative zeros are correctly handled and propagated by

[02:01] <dalek> rakudo/nom: various routines.

[02:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2efeda0597

[02:19] <travis-ci> Rakudo build passed. Zoffix Znet '(bump nqp) Make sprintf %f, %e, and %g handle negative zero

[02:19] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/178976598 https://github.com/rakudo/rakudo/compare/15f51a52bd41...f1263abc2741

[02:55] <travis-ci> Rakudo build passed. Zoffix Znet 'Add S32-num/negative-zero.t to list of test files to run

[02:55] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/178979087 https://github.com/rakudo/rakudo/compare/f1263abc2741...2efeda059771

[03:20] <ugexe> m: "xxx".subst(/no second argument/); # infinite loop from Cool subst candidate https://github.com/rakudo/rakudo/blob/nom/src/core/Cool.pm#L225

[03:20] <camelia> rakudo-moar 2efeda: OUTPUT«(timeout)Potential difficulties:␤    Space is not significant here; please use quotes or :s (:sigspace) modifier (or, to suppress this warning, omit the space, or otherwise change the spacing)␤    at <tmp>:1␤    ------> "xxx".subst(/no⏏ secon…»

[03:22] <dalek> rakudo/nom: 4663d43 | (Zoffix Znet)++ | src/Perl6/Grammar.nqp:

[03:22] <dalek> rakudo/nom: Reject synthetics in numbers in colonpairs in :42foo format

[03:22] <dalek> rakudo/nom:

[03:22] <dalek> rakudo/nom: Currently, a colon pair like ":7\x[308]a".EVAL would appear to parse correctly,

[03:22] <dalek> rakudo/nom: but in reality, the number would get parsed only until the first synthetic.

[03:22] <dalek> rakudo/nom:

[03:22] <dalek> rakudo/nom: Fix by going over each char of the numeral and checking it `eq` to its .ord.chr

[03:23] <dalek> rakudo/nom:

[03:23] <dalek> rakudo/nom: Fixes RT#128551: https://rt.perl.org/Ticket/Display.html?id=128551

[03:23] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128551

[03:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4663d43130

[03:23] <dalek> roast: b362890 | (Zoffix Znet)++ | S02-literals/pairs.t:

[03:23] <dalek> roast: Test synthetic numerals in colon pairs in :42foo format throw

[03:23] <dalek> roast:

[03:23] <dalek> roast: RT#128551: https://rt.perl.org/Ticket/Display.html?id=128551

[03:23] <dalek> roast:

[03:23] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128551

[03:23] <dalek> roast: Commit with fix: https://github.com/rakudo/rakudo/commit/4663d43130

[03:23] <dalek> roast: review: https://github.com/perl6/roast/commit/b36289063e

[03:35] <viki> ugexe: spectesting a fix

[03:44] <dalek> rakudo/nom: 0a874fb | (Zoffix Znet)++ | src/core/ (2 files):

[03:44] <dalek> rakudo/nom: Fix infinit loop in .subst with no arguments

[03:44] <dalek> rakudo/nom:

[03:44] <dalek> rakudo/nom: If .subst method is called without arguments, the matching multi is one

[03:44] <dalek> rakudo/nom: provided by Cool. It coerces the arg to Stringy and calls .subst method

[03:44] <dalek> rakudo/nom: on it, passing args via a Capture. However, if that Capture doesn't satisfy

[03:44] <dalek> rakudo/nom: Stringy candidates, we get the Cool candidate again, and the loop repeats.

[03:44] <dalek> rakudo/nom:

[03:44] <dalek> rakudo/nom: Fix by making Cool.subst an only method and moving the proto to Str.subst,

[03:44] <dalek> rakudo/nom: making only Str's candidates available.

[03:44] <dalek> rakudo/nom:

[03:44] <dalek> rakudo/nom: ugexe++ for spotting:

[03:44] <dalek> rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2016-11-26#i_13630780

[03:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0a874fb6a4

[03:45] <dalek> roast: 7c3a384 | (Zoffix Znet)++ | S05-substitution/subst.t:

[03:45] <dalek> roast: Remove trailing whitespace

[03:45] <dalek> roast: review: https://github.com/perl6/roast/commit/7c3a3841eb

[03:46] <dalek> roast: 4eede1c | (Zoffix Znet)++ | S05-substitution/subst.t:

[03:46] <dalek> roast: Test .subst() with no args does not infiniloop

[03:46] <dalek> roast:

[03:46] <dalek> roast: Test for fix https://github.com/perl6/roast/commit/7c3a3841eb

[03:46] <dalek> roast: IRC: https://irclog.perlgeek.de/perl6-dev/2016-11-26#i_13630780

[03:46] <dalek> roast: review: https://github.com/perl6/roast/commit/4eede1cba0

[03:46] <viki> ugexe: done

[03:46] <ugexe> viki++

[04:19] <dalek> rakudo/nom: e2587cd | (Zoffix Znet)++ | src/core/allomorphs.pm:

[04:19] <dalek> rakudo/nom: Teach val() to handle negative zero nums correctly

[04:19] <dalek> rakudo/nom:

[04:19] <dalek> rakudo/nom: Part of fixing RT#128897:

[04:19] <dalek> rakudo/nom: https://rt.perl.org/Ticket/Display.html?id=128897

[04:19] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128897

[04:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e2587cd012

[04:20] <dalek> roast: 7fed1c0 | (Zoffix Znet)++ | S32-num/negative-zero.t:

[04:20] <dalek> roast: Test val() can parse a negative zero num

[04:20] <dalek> roast:

[04:20] <dalek> roast: Implemented in commit:

[04:20] <dalek> roast: https://github.com/rakudo/rakudo/commit/e2587cd012

[04:20] <dalek> roast: review: https://github.com/perl6/roast/commit/7fed1c00a0

[04:48] <dalek> roast: f0269f4 | (Zoffix Znet)++ | S32-num/negative-zero.t:

[04:48] <dalek> roast: Test val() can handle U+2212 minus with negative zero

[04:48] <dalek> roast: review: https://github.com/perl6/roast/commit/f0269f46fb

[05:02] <dalek> rakudo/nom: a9654c0 | (Zoffix Znet)++ | src/core/Str.pm:

[05:02] <dalek> rakudo/nom: Teach Str.Num to handle negative zeros

[05:02] <dalek> rakudo/nom:

[05:02] <dalek> rakudo/nom: While val will return[^1] negative zeros when the string contains a num,

[05:02] <dalek> rakudo/nom: it won't do so for other types. Since we do have the sign information

[05:02] <dalek> rakudo/nom: available in the string itself and the method requests a Num, attach the

[05:02] <dalek> rakudo/nom: correct sign to zeros, even if the string does not contain a num.

[05:02] <dalek> rakudo/nom:

[05:02] <dalek> rakudo/nom: Fixes RT#128897: https://rt.perl.org/Ticket/Display.html?id=128897

[05:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128897

[05:02] <dalek> rakudo/nom:

[05:02] <dalek> rakudo/nom: [1] https://github.com/rakudo/rakudo/commit/e2587cd012

[05:05] <dalek> roast: cbc959f | (Zoffix Znet)++ | S32-num/negative-zero.t:

[05:05] <dalek> roast: Test Str.Num correctly handles negative zeros

[05:05] <dalek> roast:

[05:05] <dalek> roast: RT#128897: https://rt.perl.org/Ticket/Display.html?id=128897

[05:05] <dalek> roast: Fix commit: https://github.com/rakudo/rakudo/commit/e2587cd012

[05:05] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128897

[05:05] <dalek> roast: review: https://github.com/perl6/roast/commit/cbc959fc22

[05:06] <viki> https://github.com/rakudo/rakudo/commit/a9654c0d8ecb64db3bd7c465f81aea84cef00577

[05:29] <MasterDuke> hmm, how do i open a subprocess for writing in nqp...?

[05:29] <yoleaux2> 25 Nov 2016 11:52Z <viki> MasterDuke: can you look at this ticket? IIRC we decided this was a DITHWIDT and wasn't worth a fix, right? https://rt.perl.org/Ticket/Display.html?id=128551

[05:30] <viki> disregard that

[05:51] <dalek> rakudo/nom: c797d3f | (Zoffix Znet)++ | src/core/Date.pm:

[05:51] <dalek> rakudo/nom: Fix sleep() with huge values failing to sleep

[05:51] <dalek> rakudo/nom:

[05:51] <dalek> rakudo/nom: Imagine you get into a cryogenic chamber, hoping to be whisked into the distant

[05:51] <dalek> rakudo/nom: future exactly 317,097,919 years, 50 weeks, 2 days, 17 hours, 46 minutes, and

[05:52] <dalek> rakudo/nom: 40 seconds in the future. The control software is written in Perl 6 and the lazy

[05:52] <dalek> rakudo/nom: programmer just stuck a sleep() function in there. Unfortunately, you will be

[05:52] <dalek> rakudo/nom: defrosted instantly, because there's a bug with such huge numbers and sleep()

[05:52] <dalek> rakudo/nom: doesn't sleep at all! Of course, another lazy programmer may assume such huge

[05:52] <dalek> rakudo/nom: amounts of time are practically infinity and fix the bug with such assumption,

[05:52] <dalek> rakudo/nom: but then you will be frozen... forever! Therefore, we must fix the sleep()

[05:52] <dalek> rakudo/nom: function to handle huge chunks of time by splitting them into several sleeps in

[05:52] <dalek> rakudo/nom: intervals of 1e16 seconds (approximatelly max that JVM can handle), thereby

[05:52] <dalek> rakudo/nom: guaranteeing all cryogenic chambers will function correctly.

[05:52] <viki> rakudo/nom:

[05:52] <viki> rakudo/nom: Fixes RT130170: #https://rt.perl.org/Ticket/Display.html?id=130170

[05:52] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130170

[05:52] <viki> rakudo/nom:

[05:52] <viki> rakudo/nom: Review: https://github.com/rakudo/rakudo/commit/c797d3ff5082c6738

[05:53] <dalek> roast: 0fc0919 | (Zoffix Znet)++ | S29-context/sleep.t:

[05:53] <dalek> roast: Test sleep() with huge values actually sleeps

[05:53] <dalek> roast:

[05:53] <dalek> roast: RT130170: #https://rt.perl.org/Ticket/Display.html?id=130170

[05:53] <dalek> roast:

[05:53] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130170

[05:53] <dalek> roast: Fix commit: https://github.com/rakudo/rakudo/commit/c797d3ff5082c6738

[05:53] <dalek> roast: review: https://github.com/perl6/roast/commit/0fc0919c7f

[05:58] <MasterDuke> nqp: my $f := nqp::open("|sqlite3 tmp.sqlite", :w); nqp::sayfh($f, "CREATE TABLE allocators(id INTEGER PRIMARY KEY ASC, name TEXT);"); nqp::closefh($f);

[05:58] <camelia> nqp-moarvm: OUTPUT«Invalid open mode for file |sqlite3 tmp.sqlite: 1␤   at <tmp>:1  (<ephemeral file>:<mainline>)␤ from gen/moar/stage2/NQPHLL.nqp:1437  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/NQPHLL.moarvm:eval)␤ from gen/moar/stage2/NQPHLL.nqp:1640  (/home/camelia/rakud…»

[05:58] <timotimo> yeah, you spell that very differently in nqp-land

[05:59] <MasterDuke> ah, do you know the incantation?

[05:59] <timotimo> nope, but i can tell you where to look

[06:00] <timotimo> actually ...

[06:00] <MasterDuke> that would help

[06:01] <timotimo> it might be a tad difficult to tear out the code from Proc::Async and throw away the rakudo-y bits

[06:01] <timotimo> hm. actually ... spawnprocasync might be easy-ish

[06:01] <timotimo> yeah

[06:02] <timotimo> set a few options in a hash, grab the $!process_handle, then you can nqp::asyncwritebytes as well as nqp::closefh later

[06:03] <MasterDuke> ahhh. i saw spawnprocasync in the nqp docs, but it had no explanation

[06:03] <MasterDuke> thanks, i'll give that a go

[06:03] <timotimo> it's rather a little bit involved

[06:04] <timotimo> seems like you need to also create a queue for the events to go into

[06:05] <timotimo> events like "oi, there's some bytes for ye!"

[06:05] <timotimo> but! you're not required to capture stdout and stderr at all, so you can just put in a random ConcurrentBlockingQueue and never look at it again

[06:06] <timotimo> we can't have a process that we write stuff into without using Proc::Async, can we?

[06:06] <timotimo> i think we're even going to re-implement the non-async proc ops based on the async one, it was rumored

[06:07] <MasterDuke> hm, nqp::spawnprocasync isn't ever used in nqp

[06:07] <timotimo> yeah

[06:07] <timotimo> why would it be :)

[06:07] <timotimo> i don't think anything in nqp uses asynchronous stuff at all. though it could very well be that we have tests in nqp's test suite for that stuff

[06:08] <timotimo> hah, it's on the TODO list that i didn't even know existed

[06:08] <MasterDuke> well, there are no tests that use nqp::spawnprocasync

[06:08] <timotimo> yeah

[06:08] <MasterDuke> ha, yeah, i see that TODO

[06:09] <timotimo> the neat thing is, that the interface to spawnprocasync doesn't require you to have an implementation of Promise or of Supply

[06:09] <timotimo> because all it does is push callbacks into the scheduler's queue when things happen

[06:10] <MasterDuke> this looks annoying to try and use in nqp-land

[06:11] <timotimo> *shrug*, it could be much worse

[06:12] <viki> Hm, looks like in the middle of making that joke I also found a bug in polymod

[06:12] <viki> m: my $seconds = 1e31; dd $seconds.Num.polymod: 1e16 xx *;

[06:12] <camelia> rakudo-moar c797d3: OUTPUT«(0e0, 1e+15).Seq␤»

[06:12] <viki> m: my $seconds = 1e32; dd $seconds.Num.polymod: 1e16 xx *;

[06:12] <camelia> rakudo-moar c797d3: OUTPUT«(0e0, 0e0, 1e0).Seq␤»

[06:12] <timotimo> https://github.com/rakudo/rakudo/blob/nom/src/core/ThreadPoolScheduler.pm#L42 - here's how you're expected to use the queue, i.e. what kind of data lands in these $task pieces

[06:12] <viki> Or maybe I need to go bed

[06:13] <timotimo> well, the second result does look wrong, right?

[06:13] <viki> oh "If the divisors are given as a lazy list, runs until the remainder is 0 or the list of divisors is exhausted"

[06:13] <timotimo> because 1e0 * 1e16 isn't 1e32

[06:13] <timotimo> oh, you mean that there's 0e0 in front

[06:14] <viki> Well, I thought this would give me the total back:

[06:14] <viki> m: my $seconds = 1e33; say sum gather { .say, take $_*1e16 for grep *.so,  $seconds.Num.polymod: 1e16 xx *; }

[06:14] <camelia> rakudo-moar c797d3: OUTPUT«10␤1e+17␤»

[06:14] <viki> It kinda bugs me my fix for sleep doesn't actually sleep for correct number of seconds, regardless of how unrealistic that scenario is...

[06:15] <timotimo> you're forgetting to increase the multiplicand

[06:15] <timotimo> like, you're trying to calculate 512 as 5*10+1*10+2*10

[06:51] <viki> right, that won't help me then, 'cause I need to sleep in intervals of at most 1e16 seconds.

[06:51] * viki goes for a gather/take thing

[06:57] <dalek> rakudo/nom: 7c5ea31 | (Zoffix Znet)++ | src/core/Date.pm:

[06:57] <dalek> rakudo/nom: sleep() for correct number of seconds for values above 1e16 seconds

[06:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7c5ea31800

[06:58] <viki> and speaking of sleep....

[06:58] * viki drops to bed

[09:52] <FROGGS> o/

[11:26] <vendethiel> \o

[12:17] <nine> What do you people think about merging lexical_module_load right now? Next release is a couple weeks off giving us quite some time to determine whether it should be reverted or not.

[12:17] <nine> I fear we won't make any progress any other way.

[12:19] <lizmat> nine: +1

[12:26] <jnthn> Think I've asked this before but forgot the answer: did we try an ecosystem test with it on?

[12:27] <jnthn> One other prerequisite is that we have a migration guide that we can point people at.

[12:27] <jnthn> That explains the change and what they need to do.

[12:29] <jnthn> Preferably on doc.perl6.org

[12:30] <dalek> roast: 08ffd2f | usev6++ | S29-context/sleep.t:

[12:30] <dalek> roast: Fudge test for RT #130170 for JVM

[12:30] <dalek> roast: review: https://github.com/perl6/roast/commit/08ffd2f682

[12:30] <dalek> roast: 4cb14ff | usev6++ | S32-io/open.t:

[12:30] <dalek> roast: Unfudge test for $fh.get after $fh.seek on JVM

[12:30] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130170

[12:30] <dalek> roast: review: https://github.com/perl6/roast/commit/4cb14ff76e

[12:50] <MasterDuke> before sleeping i spent a little time looking at nqp::[spawnprocasync, syncpipe, shell, spawn, etc.] and never managed to find a simple way to open a subprocess for writing

[12:51] <MasterDuke> spawnprocasync is complicated, shell/spawn would block, and open("|sqlite3 tmp.sqlite", :w) just isn't implemented

[12:52] <MasterDuke> any suggestions before i take the time to figure out spawnprocasync?

[12:54] <nine> jnthn: Task::Star installs successfully and my Bailador example works. It's been a while since I've seen issues running this branch. But I'm not much of a Perl 6 _user_ :)

[12:54] <nine> jnthn: I'll write something up for docs

[12:57] <jnthn> nine: At some point we had something that could smoke the whole module ecosystem with a particular Rakudo change.

[12:58] <timotimo> well, what happens when we just run "panda smoke" or whatever it was called

[12:58] <timotimo> or do you need to actually grab emmentaler for that?

[12:58] <jnthn> Ah, emmentaler...

[12:58] <jnthn> I've forgotten what the state of the art was there

[12:58] <timotimo> the fate of the start

[12:58] <nine> That sounds quite handy!

[12:58] <jnthn> Indeed

[12:58] <jnthn> lunch &

[13:09] <nine> First draft: https://gist.github.com/niner/70f7b46eefb7e22af78d896bea11efeb

[13:09] <nine> Comments/suggestions/patches very welcome :)

[13:14] <timotimo> nine: it says "will complain about 'Foo' already being defined", but isn't this about 'Bar' already being defined?

[13:14] <timotimo> or am i Just Wrong?

[13:19] <nine> timotimo: I should rename Foo in the second example so it is not confused with the Foo in the first

[13:20] <nine> fixed it

[13:21] <timotimo> oh, yes

[13:37] <RabidGravy> nine, looks good

[13:39] <RabidGravy> nine, is that actually in nom now?  I was going to test against  the branch but time got away from me

[13:58] <dalek> rakudo/nom: bdc7a91 | (Zoffix Znet)++ | src/core/Date.pm:

[13:58] <dalek> rakudo/nom: Document the 1e16 magic number

[13:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bdc7a91100

[14:05] <viki> +1 on lexical_module_load merge

[14:23] <nine> RabidGravy: not yet merged

[14:23] <RabidGravy> right

[14:40] <nine> emmentaler seems to be severely bitrotted

[14:40] <timotimo> i can imagine

[14:42] <nine> Ah, got it to do something now :)

[14:43] <nine> But....it installs everything into my rakudo installation instead of installlib

[14:44] <nine> ah, better

[14:57] <nine> After building Linenoise, every module fails with X::AdHoc.new(payload => "setcodeobj needs a code ref")

[15:06] * TimToady sneaks back into the sausage factory via the back door

[15:06] <yoleaux2> 17 Nov 2016 14:36Z <viki> TimToady: was − (fancy minus) meant to work everywhere a regular minus works or just with literals? "−42".Numeric and sub (−4) {} fail for example. Should those be fixed?

[15:06] <yoleaux2> 21 Nov 2016 12:25Z <viki> TimToady: never mind. japhb said the reason is mostly due to val() being done prior to addition of fancy pants minus ( https://irclog.perlgeek.de/perl6-dev/2016-11-18#i_13587383 )

[15:06] <yoleaux2> 21 Nov 2016 12:51Z <lizmat> TimToady: any thoughts on val() also processing enums in scope ?

[15:06] <yoleaux2> 21 Nov 2016 12:54Z <lizmat> TimToady: aka: having val("True") returning Bool::True

[15:06] <TimToady> darn, tripped the alarm...

[15:06] <viki> :D

[15:14] <viki> TimToady: for the enum thing... We were trying to solve the issue of sub MAIN being able to take enums(). We did with https://github.com/rakudo/rakudo/blob/d1ef82ac189ead6dab42fe246277f22ecd3e53a6/src/core/Main.pm#L18-L22  but now we can't have Str $foo that can take, say, value "False", since it'd be converted to the Bool and not a Str. So as a solution to that, we thought of EnumStr allomorph, but that

[15:14] <viki> also has a problem that my $foo = set <foo bar ber>; say so $foo{'foo'} would break the minute you bring an enum `foo` into scope, since it'll now become EnumStr instead of Str. So... that's where we're at ATM.

[15:16] <TimToady> yeah, enums as text literals are...fraught...

[15:16] <viki> Maybe just limit them to handling sub MAIN stuff?

[15:19] * TimToady is unfortunately still recovering from the turn-brain-to-snot virus he came home from Portugal with, so is not entirely compos mentis

[15:46] <diakopter> yeck

[16:05] <[TuxCM]> This is Rakudo version 2016.11-65-gbdc7a91 built on MoarVM version 2016.11-20-g0f7277a

[16:05] <[TuxCM]> csv-ip5xs        3.285

[16:05] <[TuxCM]> test            14.610

[16:05] <[TuxCM]> test-t           6.588

[16:05] <[TuxCM]> csv-parser      14.504

[16:11] <diakopter> I still don't know what "test" or "test-t" or "csv-parser" refer to. I can guess what csv-ip5xs is, and why it's the baseline

[16:16] <viki> .ask bartolin what's the failure in this test (sleep huge values)? Seems to work fine in camelia. https://github.com/perl6/roast/commit/08ffd2f682bc376f1219f1802a96fb67fb20b397

[16:16] <yoleaux2> viki: I'll pass your message to bartolin.

[16:16] <viki> bbrrr

[16:16] <viki> It'd help if I run the test with j: and not m: >>:(

[16:16] <viki> .tell bartolin never mind. Reproduced :)

[16:16] <yoleaux2> viki: I'll pass your message to bartolin.

[16:18] <[TuxCM]> diakopter, test is the first pure-perl6 draft, test-t is the full-featured Text::CSV in perl6, csv-parser is CSV::Parser from Tony (perl6)

[16:20] <diakopter> [TuxCM]: ok thanks. how big are the csv inputs and how complex/conformat are they

[16:28] <nine> diakopter: for i in $(seq 1 10000); do echo 'hello,","," ",world,"!"'; done > /tmp/hello.csv

[16:30] <diakopter> giggle

[16:30] <diakopter> so I guess the timings are in nanoseconds

[16:31] <nine> if only

[16:40] <diakopter> a meaningful comparison would compare to the 45 fastest json readers in npm

[16:40] <diakopter> er. csv.

[16:44] <[TuxCM]> diakopter, http://tux.nl/Talks/CSV6/speed5.html

[16:44] <[TuxCM]> additions welcome

[16:44] <[TuxCM]> all tests and sources therefor available in https://github.com/Tux/CSV

[16:47] <diakopter> 76 distributions mention CSV in CPAN; 898 packages mention CSV in NPM (11.8 ratio); 34,500 total distributions in CPAN; 360,000 total packages in NPM (10.4 ratio).  Similar ratio seems similar

[16:48] <[TuxCM]> patches welcome :)

[16:49] <diakopter> fsdo patches, which may or may not be feasible or useful or worthwhile

[16:55] <nine> Seems like emmentaler stumbles over modules that need LibraryMake. On rakudo nom btw.

[16:58] <dalek> rakudo/nom: 085145f | (Zoffix Znet)++ | src/core/Num.pm:

[16:58] <dalek> rakudo/nom: Teach infix:<===> to handle signed zeros correctly

[16:58] <dalek> rakudo/nom:

[16:58] <dalek> rakudo/nom: And since cmp uses ===, we also need make it watch for zeros, since it

[16:58] <dalek> rakudo/nom: needs to handle both zeros as same.

[16:58] <dalek> rakudo/nom:

[16:58] <dalek> rakudo/nom: Fixes RT#128395: https://rt.perl.org/Ticket/Display.html?id=128395

[16:58] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128395

[16:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/085145f3a5

[16:58] <dalek> roast: f67de6c | (Zoffix Znet)++ | S32-num/negative-zero.t:

[16:58] <dalek> roast: Test cmp and === on signed num zeros

[16:58] <dalek> roast:

[16:58] <dalek> roast: RT#128395: https://rt.perl.org/Ticket/Display.html?id=128395

[16:58] <dalek> roast: Fix commit: https://github.com/rakudo/rakudo/commit/085145f3a5

[16:58] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128395

[16:58] <dalek> roast: review: https://github.com/perl6/roast/commit/f67de6cf58

[17:10] <japhb> Zoffix++  # Edge cases matter too

[17:11] <viki> m: dd [ atan2(-0e0, -1), atan2(0e0, -1) ]; # since they can give wildly different results

[17:11] <camelia> rakudo-moar 085145: OUTPUT«[-3.14159265358979e0, 3.14159265358979e0]␤»

[17:17] <dalek> rakudo/nom: 938d4d8 | (Zoffix Znet)++ | src/core/Date.pm:

[17:17] <dalek> rakudo/nom: Use smaller value as upper edge of super-large sleeps

[17:17] <dalek> rakudo/nom:

[17:17] <dalek> rakudo/nom: nqp::sleep(1e16) actually exits instantly on JVM and the only reason

[17:17] <dalek> rakudo/nom: sleep(Inf) worked was because it was continuously looping.

[17:17] <dalek> rakudo/nom:

[17:17] <dalek> rakudo/nom: Fix by using smaller 1e15 value.

[17:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/938d4d8cd0

[17:17] <dalek> roast: db4efab | (Zoffix Znet)++ | S29-context/sleep.t:

[17:17] <dalek> roast: Revert "Fudge test for RT #130170 for JVM"

[17:17] <dalek> roast:

[17:17] <dalek> roast: This reverts commit 08ffd2f682bc376f1219f1802a96fb67fb20b397.

[17:17] <dalek> roast:

[17:17] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130170

[17:17] <dalek> roast: Issue fixed in commit: https://github.com/rakudo/rakudo/commit/938d4d8cd0

[17:17] <dalek> roast: review: https://github.com/perl6/roast/commit/db4efabe74

[17:37] <viki> ZOFVM: Files=1204, Tests=130206, 137 wallclock secs (20.37 usr  2.93 sys + 2414.20 cusr 202.46 csys = 2639.96 CPU)

[17:54] <dogbert17> hmm: # Failed test 'huge values to sleep() work'

[17:54] <dogbert17> # at /home/dogbert/repos/rakudo/t/spec/packages/Test/Util.pm (Test::Util) line 76

[17:54] <dogbert17> #      got out: "Fail\n"

[17:54] <dogbert17> # expected out: ""

[17:56] <dogbert17> This is Rakudo version 2016.11-67-g938d4d8 built on MoarVM version 2016.11-20-g0f7277a

[17:57] <viki> dogbert17: what happens when you run perl6 -e 'use nqp; nqp::sleep(1e15)'

[17:57] <viki> and try with 1e14 and 1e13, and etc, until it actually doesn't exit immediately

[17:57] <dogbert17> it exists immediately

[17:58] <dogbert17> as do 14 and 13

[17:58] <viki> Which exponent doesn't exit immediatelly? This is on a 32-bit box, right?

[17:58] <dogbert17> 1e9 stops the program from exiting immediately

[17:58] <dogbert17> now it just hangs

[17:58] <viki> good

[17:59] <dogbert17> classic note :) I'm on 32 bit

[17:59] <geekosaur> sounds about right...

[18:01] <dogbert17> precision wise?

[18:02] <geekosaur> well, overflow-wise

[18:02] <dogbert17> ah, of course

[18:04] * dogbert17 wonders if he's the only one still running a vm in 32 bit

[18:04] <viki> my dev box at $work is 32-bit

[18:05] <dogbert17> viki: perfect, please try t/spec/S32-num/power.rakudo.moar and t/spec/S04-declarations/constant.rakudo.moar when you get a chance

[18:06] <dogbert17> they fail on 32 bit

[18:07] <dalek> rakudo/nom: 2f72fa0 | (Zoffix Znet)++ | src/core/Date.pm:

[18:07] <dalek> rakudo/nom: Use smaller base interval for ultra-large sleeps

[18:07] <dalek> rakudo/nom:

[18:07] <dalek> rakudo/nom: 1e15 causes overflow on 32-bit boxes[^1]. Fix by using 1e9 intervals

[18:07] <dalek> rakudo/nom: that don't.

[18:07] <dalek> rakudo/nom:

[18:07] <dalek> rakudo/nom: dogbert17++ for spotting

[18:07] <dalek> rakudo/nom:

[18:07] <dalek> rakudo/nom: [1] https://irclog.perlgeek.de/perl6-dev/2016-11-26#i_13633257

[18:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2f72fa09cf

[21:33] <gfldex> lizmat: for the next weekly it may be noteworthy to point as trait_mod declarator for those who want to define their own traits https://docs.perl6.org/type/Sub#index-entry-trait__mod_%28declarator%29

[21:34] <lizmat> gfldex: is it noteworthy because it is new?

[21:37] <AlexDaniel> lizmat: if changes to our exponentially increasing number of bots are still worth mentioning, unicodable6 is a new bot

[21:38] <lizmat> unicodable6: help

[21:38] <unicodable6> lizmat, Just type any unicode character or part of a character name. Alternatively, you can also provide a code snippet or a regex

[21:38] <lizmat> unicodable6: set

[21:38] <unicodable6> lizmat, U+0088 CHARACTER TABULATION SET [Cc] ()

[21:38] <unicodable6> lizmat, U+008A LINE TABULATION SET [Cc] ()

[21:38] <unicodable6> lizmat, U+0093 SET TRANSMIT STATE [Cc] ()

[21:38] <unicodable6> lizmat, https://gist.github.com/5587a8d9afd8860dfee2995e7a84273b

[21:38] <AlexDaniel> lizmat: https://irclog.perlgeek.de/perl6/2016-11-21#i_13608245

[21:39] <lizmat> unicodable6:  VIDEOCASSETTE    # :-)

[21:39] <unicodable6> lizmat, U+0056 LATIN CAPITAL LETTER V [Lu] (V)

[21:39] <unicodable6> lizmat, U+0049 LATIN CAPITAL LETTER I [Lu] (I)

[21:39] <unicodable6> lizmat, U+0044 LATIN CAPITAL LETTER D [Lu] (D)

[21:39] <unicodable6> lizmat, https://gist.github.com/6cc4c05b1e2b5544956bd56a6bae499f

[21:40] <jnthn> Hm, how does it decide whether to search by char name, or to show the chars in the string?

[21:40] <lizmat> unicodable6: U+1F4FC

[21:40] <unicodable6> lizmat, U+0055 LATIN CAPITAL LETTER U [Lu] (U)

[21:40] <unicodable6> lizmat, U+002B PLUS SIGN [Sm] (+)

[21:40] <unicodable6> lizmat, U+0031 DIGIT ONE [Nd] (1)

[21:40] <unicodable6> lizmat, https://gist.github.com/cf0944f3a416904e1ad3d1ac5b457ac3

[21:40] <AlexDaniel> lizmat: ok, that's a TODO

[21:40] <lizmat> ah, ok  :-)

[21:40] <AlexDaniel> jnthn: a-zA-Z\s

[21:40] <jnthn> Ah

[21:42] <jnthn> unicodable6: Ḍ̇

[21:42] <unicodable6> jnthn, U+0307 COMBINING DOT ABOVE [Mn] (◌̇)

[21:42] <unicodable6> jnthn, U+1E0C LATIN CAPITAL LETTER D WITH DOT BELOW [Lu] (Ḍ)

[21:42] <jnthn> Hm, curious, out of order? :)

[21:43] <AlexDaniel> lizmat: the main idea here was that yoleaux2 does not know about the new unicode stuff (e.g. BUTTERFLY)

[21:43] <lizmat> but shouldn't yoleaux2 be updated then ?

[21:43] <AlexDaniel> jnthn: yes, possibly a bug in IRC::Client https://github.com/zoffixznet/perl6-IRC-Client/issues/32

[21:43] <jnthn> Ah, OK :)

[21:43] <AlexDaniel> lizmat: sure, but dogfood :)

[21:44] <lizmat> AlexDaniel: true, which reminds me to run a few spectests with HARNESS_TYPE=6

[21:44] <AlexDaniel> lizmat: and it will never allow stuff like this anyway

[21:44] <AlexDaniel> u: {.uniname.words == 13}

[21:45] <unicodable6> AlexDaniel, U+0753 ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW AND TWO DOTS ABOVE [Lo] (ݓ)

[21:45] <unicodable6> AlexDaniel, U+FBF9 ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM [Lo] (ﯹ)

[21:45] <unicodable6> AlexDaniel, U+FBFA ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM [Lo] (ﯺ)

[21:45] <unicodable6> AlexDaniel, https://gist.github.com/f9b0e78b684968fdc40bcf9165ee6c75

[21:46] <AlexDaniel> .u Me

[21:46] <yoleaux2> U+0019 END OF MEDIUM [Cc] (␙)

[21:46] <yoleaux2> U+0095 MESSAGE WAITING [Cc] (<control>)

[21:46] <yoleaux2> U+009E PRIVACY MESSAGE [Cc] (<control>)

[21:46] <AlexDaniel> .u [Me]

[21:46] <yoleaux2> U+004D LATIN CAPITAL LETTER M [Lu] (M)

[21:46] <yoleaux2> U+005B LEFT SQUARE BRACKET [Ps] ([)

[21:46] <yoleaux2> U+005D RIGHT SQUARE BRACKET [Pe] (])

[21:46] <AlexDaniel> u: Me

[21:46] <unicodable6> AlexDaniel, U+0489 COMBINING CYRILLIC MILLIONS SIGN [Me] (◌҉)

[21:46] <unicodable6> AlexDaniel, U+0488 COMBINING CYRILLIC HUNDRED THOUSANDS SIGN [Me] (◌҈)

[21:46] <unicodable6> AlexDaniel, U+1ABE COMBINING PARENTHESES OVERLAY [Me] (◌᪾)

[21:46] <unicodable6> AlexDaniel, https://gist.github.com/42af7c4d01723094630cf2f45add7906

[22:30] <gfldex> lizmat: it is new because we forgot to show how users can define traits

[22:35] <RabidGravy> it is in the documentation, but a bit thin

[22:36] <RabidGravy> it probably wants a whole page as the basic thing is easy, it's what you do with them gets more interesting

[23:29] <dalek> rakudo/nom: eaa8e2d | lizmat++ | src/core/Rakudo/Internals.pm:

[23:29] <dalek> rakudo/nom: Make R:I:ShapeLeafIterator support native arrays

[23:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eaa8e2d647

[23:34] <dalek> rakudo/nom: e0c0ae5 | lizmat++ | / (2 files):

[23:34] <dalek> rakudo/nom: Make copying 1+dimmed native arrays 6x faster

[23:34] <dalek> rakudo/nom:

[23:34] <dalek> rakudo/nom: - create a separate STORE candidate for this

[23:34] <dalek> rakudo/nom: - benchmarked for 2x2 array, higher sizes / dimensions probably faster still

[23:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e0c0ae5d7e

[23:46] <lizmat> good night, #perl6-dev!

[23:48] <viki> night

[23:49] <timotimo> gniet lizmat
