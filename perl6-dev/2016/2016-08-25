[00:10] <dalek> roast/6.c-errata: ab52151 | (Zoffix Znet)++ | S06-advanced/wrap.t:

[00:10] <dalek> roast/6.c-errata: Avoid assuming too much about internals of throws-like

[00:10] <dalek> roast/6.c-errata:

[00:10] <dalek> roast/6.c-errata: The exception thrown depends on internal implementation

[00:10] <dalek> roast/6.c-errata: of the testing function if one is used to contain the exception.

[00:10] <dalek> roast/6.c-errata:

[00:10] <dalek> roast/6.c-errata: See https://github.com/rakudo/rakudo/pull/743#issuecomment-210489723

[00:10] <dalek> roast/6.c-errata: for more information.

[00:10] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/ab521517a4

[00:21] <Zoffix> I got t/spec/S32-exceptions/misc.t failing in 6.c-errata

[00:21] <Zoffix> https://gist.github.com/zoffixznet/3b8edc1744e8ad1e5b567dd5673d929a

[00:22] <Zoffix> Ah, that just looks like the recent addition of Exception::JSOn or whatever it was

[00:26] <dalek> rakudo/nom: 547fc51 | (Zoffix Znet)++ | lib/Test.pm6:

[00:26] <dalek> rakudo/nom: Revert to using multi-dispatch for subtest

[00:26] <dalek> rakudo/nom:

[00:26] <dalek> rakudo/nom: Reverts commit 9e4760256647336d8e5b2a3dc71d01c0f0485a3e That commit was

[00:26] <dalek> rakudo/nom: introduced to prevent a spectest failure in 6.c-errata, however, the

[00:26] <dalek> rakudo/nom: failure was due to the test itself assuming too much about the internal

[00:26] <dalek> rakudo/nom: implementation of the throws-like test that was used to contain the

[00:26] <dalek> rakudo/nom: exception.

[00:26] <dalek> rakudo/nom:

[00:26] <dalek> rakudo/nom: The test has now been fixed in

[00:26] <dalek> rakudo/nom: https://github.com/perl6/roast/commit/ab521517a4

[00:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/547fc5154c

[00:30] <dalek> roast/6.c-errata: 9c1ba24 | (Zoffix Znet)++ | S32-exceptions/misc.t:

[00:30] <dalek> roast/6.c-errata: Port 2ab7a1f67d3 fix to 6.c-errata

[00:30] <dalek> roast/6.c-errata:

[00:30] <dalek> roast/6.c-errata: We now have Exceptions:: class, which the test naively assumes

[00:30] <dalek> roast/6.c-errata: we don't. Fix test to avoid such assumption.

[00:30] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/9c1ba24f0b

[00:32] <timotimo> kind of strange to have it named Exception::JSON?

[00:32] <timotimo> like, the test shouldn't expect we don't, it's just those are usually called X::Something?

[00:33] <Zoffix> The class is not *an* Exception but rather a way to output exceptions

[00:33] <timotimo> oh!

[00:33] <timotimo> that new thing! yes, indeed

[00:33] <Zoffix> Like, it changes the regular output to being output as JSON

[00:33] <timotimo> yes, i remember it now

[00:33] <timotimo> it's fantastic!

[00:33] <Zoffix> \o/

[00:35] <Zoffix> m: my $sig = :(| ($a) = 2);

[00:35] <camelia> rakudo-moar 547fc5: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Cannot put default on anonymous slurpy parameter␤at <tmp>:1␤------> my $sig = :(| ($a) = 2⏏);␤    expecting any of:␤        constraint␤»

[00:35] <Zoffix> Is it really anonymous? Is it really slurpy?

[00:36] <Zoffix> I'm not exactly sure what that sig is meant to be, but a side glance at https://github.com/perl6/roast/commit/f096ae50f4944926c752c52661416a7462fa65f7 seems to suggest it's muting tests that indicate a commit that's breaking something.

[00:36] <Zoffix> (they're also failing in 6.c-errata now)

[00:37] <timotimo> the slurpy parameter there is anonymous

[00:37] <Zoffix> So the tests should be removed?

[00:37] <timotimo> yeah, i believe it was a recent fix to make that error happen

[00:37] <timotimo> for all slurpy parameters

[00:37] <Zoffix> cool

[00:37] <timotimo> they are not allowed to have defaults now

[00:37] <timotimo> shouldn't have been allowed to in the first place

[00:44] * timotimo BBL

[00:56] <Zoffix> committable6, HEAD dd [ $*PERL.compiler.version ]

[00:56] <committable6> Zoffix, ¦«HEAD»: [v2016.07.1.220.g.6.e.84.a.5.e]

[00:57] <Zoffix> .tell AlexDaniel looks like committable6 never recovered from my tag fiasco

[00:57] <yoleaux2> Zoffix: I'll pass your message to AlexDaniel.

[00:57] <AlexDaniel> .

[00:57] <yoleaux2> 00:57Z <Zoffix> AlexDaniel: looks like committable6 never recovered from my tag fiasco

[00:57] <Zoffix> m: dd [ $*PERL.compiler.version ]

[00:57] <camelia> rakudo-moar 547fc5: OUTPUT«[v2016.08.1.21.g.547.fc.51]␤»

[00:57] <AlexDaniel> Zoffix: no, it's because we were working on some things

[00:57] <Zoffix> Ah, OK :)

[00:57] <AlexDaniel> mostly compression

[01:01] <dalek> roast/6.c-errata: fb53102 | (Zoffix Znet)++ | S06-signature/introspection.t:

[01:01] <dalek> roast/6.c-errata: Remove bogus tests

[01:01] <dalek> roast/6.c-errata:

[01:01] <dalek> roast/6.c-errata: The tests assumed defaults on slurpies are a thing, but they were

[01:01] <dalek> roast/6.c-errata: giving MoarVM errors when used. In

[01:01] <dalek> roast/6.c-errata: https://github.com/rakudo/rakudo/commit/560170f31ef22a2dbc7cb1fe44df464b2082626c

[01:01] <dalek> roast/6.c-errata: those errors were caught earlier and now cause Rakudo Exceptions to be

[01:01] <dalek> roast/6.c-errata: thrown, which causes these tests to fail.

[01:01] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/fb53102538

[01:02] <dalek> roast: 8627307 | (Zoffix Znet)++ | S06-signature/introspection.t:

[01:02] <dalek> roast: Remove bogus tests

[01:02] <dalek> roast:

[01:02] <dalek> roast: The tests assumed defaults on slurpies are a thing, but they were

[01:02] <dalek> roast: giving MoarVM errors when used. In

[01:02] <dalek> roast: https://github.com/rakudo/rakudo/commit/560170f31ef22a2dbc7cb1fe44df464b2082626c

[01:02] <dalek> roast: those errors were caught earlier and now cause Rakudo Exceptions to be

[01:02] <dalek> roast: thrown, which causes these tests to fail.

[01:02] <dalek> roast: review: https://github.com/perl6/roast/commit/8627307ba7

[01:02] <[Coke]> zoff; Changing errata tests should not be done litely make sure you have buyin from somebody

[01:03] <[Coke]> Which you may have already doneI'm just going off the commit message

[01:03] <Zoffix> Yeah, I've confirmed with timotimo: <Zoffix> So the tests should be removed?

[01:03] <Zoffix> <timotimo> yeah, i believe it was a recent fix to make that error happen

[01:04] <Zoffix> Basically, even though the test passed, when someone actually tried to use that sig in a subroutine, they'd get a MoarVM error. The test never went that deep and merely used the Signature object, calling .perl on it, so the test was passing, even though that signature was impossible to be actually used on a routine

[01:04] <[Coke]> Okay it's a big enough thing that you should check with more than just one personIt's basically changing the contract we have with our users about what six CS

[01:04] <[Coke]> what 6 c is

[01:05] <Zoffix> OK

[01:05] <[Coke]> ut I am going to bed ZZ :)

[01:11] <Zoffix> ....and now, instead of waiting for it to get all the way down to MoarVM, we throw in Rakudo.

[01:11] * Zoffix loves async text chat in that you can finish a thought you stared 7m ago and it won't seem weird :D

[01:45] <MasterDuke> lizmat: some interesting performance swings for .comb here: https://gist.github.com/Whateverable/0956fb70fd2e5cff0ddbaf4340525bca

[01:57] <AlexDaniel> lizmat: to make it clearer: this commit made things much slower https://github.com/rakudo/rakudo/commit/977797f

[02:03] <AlexDaniel> lizmat: if I see it correctly, then this .comb is in sink context, yet no warning is thrown. Weird synthetic thing, not sure if there is any actual code suffering from this slowdown, but perhaps it's worth taking a look

[05:00] <dalek> rakudo/nom: 597052f | lizmat++ | lib/TAP.pm6:

[05:00] <dalek> rakudo/nom: Lose to more returns in TAP.pm6

[05:00] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/597052f5ca

[05:30] <brrt> good * #perl6

[05:30] <yoleaux2> 19 Aug 2016 10:55Z <Zoffix> brrt: might be worth mentioning to jnthn++ as he's been working on making stuff like that unhang. My test runs stopped hanging after that work. Never had anything flap or hang for quite a while.

[05:30] <yoleaux2> 19 Aug 2016 11:18Z <jnthn> brrt: About said hanging test, can you give me more info? I had that running a couple of hundred times in a row on a loaded system without issue after my last round of fixes...

[05:30] <brrt> early, in european zone

[05:30] <brrt> ohhai, yeah, i'll try it out

[05:30] <brrt> it may be that my moar is far behind

[05:41] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Remove unneeded returns from TAP.pm6

[05:41] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/154801258 https://github.com/rakudo/rakudo/compare/76e1ede7a6bb...33be22fd2e9d

[05:41] <buggable> ☢ [travis build above] Build log missing from at least one job. Check results manually.

[06:00] <[TuxCM]> This is Rakudo version 2016.08.1-22-g597052f built on MoarVM version 2016.08

[06:00] <[TuxCM]> csv-ip5xs       10.064

[06:00] <[TuxCM]> test            15.281

[06:00] <[TuxCM]> test-t           7.297

[06:00] <[TuxCM]> csv-parser      16.045

[06:18] * brrt is currently retesting with latest moar

[06:41] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Oops, wrong order of checks, Brad Gilbert++'

[06:41] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/154815880 https://github.com/rakudo/rakudo/compare/33be22fd2e9d...a4cc1ca41e47

[06:42] <buggable> ☢ [travis build above] Build log missing from at least one job. Check results manually.

[06:44] <brrt> .tell jnthn https://gist.github.com/anonymous/6c4b5eece51500252ad57fab423316b6

[06:44] <yoleaux2> brrt: I'll pass your message to jnthn.

[06:44] <brrt> sorry, i broked it again

[07:28] <dalek> rakudo/nom: 945b916 | lizmat++ | t/harness6:

[07:28] <dalek> rakudo/nom: Remove superfluous returns from t/harness6

[07:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/945b916821

[07:52] <[TuxCM]> https://gist.github.com/anonymous/e62ee2c340d105edb020c3e1147803d8

[07:52] <[TuxCM]> I need a bit of NativeCall help there

[07:53] <[TuxCM]> Cannot invoke object with invocation handler in this context

[07:53] <[TuxCM]> in method CALL-ME at /pro/3gl/CPAN/rakudobrew/moar-blead-nom/install/share/perl6/sources/24DD121B5B4774C04A7084827BFAD92199756E03 (NativeCall) line 328

[07:53] <[TuxCM]> in block <unit> at nc-c.pl line 67

[07:53] <[TuxCM]> which in the gitst is line 51

[07:53] * [TuxCM] wants to see if I can get libcsv3 working with NativeCall in perl6

[08:15] <nine> One can now install Inline::Perl5 with just git clone [email@hidden.address] && cd Inline-Perl5 && perl6 configure.pl6 --test --install

[08:15] <nine> Without needing panda or zef or any other dependencies :)

[08:16] <nine> See mst's talk on Friday for why this is useful ;)

[08:20] <JimmyZ> [TuxCM]: as per

[08:20] <JimmyZ> [TuxCM]: https://github.com/rakudo/rakudo/blob/nom/t/04-nativecall/04-pointers.t

[08:20] <JimmyZ> [TuxCM]: you may want Pointer

[08:34] <[TuxCM]> JimmyZ, that caused an interesting change :)

[08:35] <[TuxCM]> > ===SORRY!=== Error while compiling:

[08:35] <[TuxCM]> Undeclared routines:

[08:35] <[TuxCM]> hello used at line 1. Did you mean 'shell'?

[08:35] <[TuxCM]> world used at line 1. Did you mean 'words'?

[08:35] <[TuxCM]> those are *runtime* errors (repeating 50000 times)

[09:22] <dalek> rakudo/nom: 8a95de1 | leont++ | / (3 files):

[09:22] <dalek> rakudo/nom: Restore "Convert create-moar-runner to perl 6"

[09:22] <dalek> rakudo/nom:

[09:22] <dalek> rakudo/nom: This reverts commit 66883a40e396c23253a14708f039317beb33301c.

[09:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8a95de14bf

[09:22] <dalek> rakudo/nom: 9ccd848 | lizmat++ | / (3 files):

[09:22] <dalek> rakudo/nom: Merge pull request #846 from Leont/less5

[09:22] <dalek> rakudo/nom:

[09:22] <dalek> rakudo/nom: Restore "Convert create-moar-runner to perl 6"

[09:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9ccd84801f

[09:37] <mst> DOH

[09:37] <mst> if you add a generated file, remember to add it to 'make clean' or confusion may ensue

[09:40] <mst> nine: um

[09:40] <mst> p5helper.c:237:5: warning: value computed is not used [-Wunused-value]

[09:40] <mst> /usr/bin/ld: /home/matthewt/local/perl-5.24.0/lib/5.24.0/x86_64-linux/CORE/libperl.a(op.o): relocation R_X86_64_32S against `PL_opargs' can not be used when making a shared object; recompile with -fPIC

[09:40] <mst> /home/matthewt/local/perl-5.24.0/lib/5.24.0/x86_64-linux/CORE/libperl.a: could not read symbols: Bad value

[09:40] <mst> argh, hang on, did I forget to build multiplicity or whatever

[09:41] <mst> aha, -Dusershrplib

[09:41] <mst> as documented that I missed

[10:05] <geekosaur> it's kinda broken that it even tries to treat a static library as a shared library

[10:05] <geekosaur> then again I should probably expect that; on 32-bit linux you could actually get away with that, and it's probably wired into dlopen or something and was never disabled even though it can never work on 64-bit

[10:14] <mst> yeah, I'm not sure why it's using libperl.a rather than libperl.so

[10:14] <mst> but I'm trying to just crowbar everything into working right now, not asking why ;)

[10:45] <mst> argh

[10:45] <mst> nine: you about?

[10:54] <nine> mst: now

[10:55] <mst> nine: found it

[10:56] <mst> RepositoryRegistry uses nqp::backend unless RKAUDO_PREFIX is set

[10:56] <mst> so also looks in the fucking moar dirs

[10:57] * mst tries with the env var for the moment

[11:00] <mst> oh, wait, the env var isn't actually the prefix

[11:00] <mst> because that would be helpful

[11:04] <[TuxCM]> lizmat, here it is ...

[11:04] <[TuxCM]> This is Rakudo version 2016.08.1-25-g9ccd848 built on MoarVM version 2016.08

[11:04] <[TuxCM]> csv-ip5xs       10.061

[11:04] <[TuxCM]> test            15.519

[11:04] <[TuxCM]> test-t           7.338

[11:04] <[TuxCM]> csv-parser      16.431

[11:04] <lizmat> yeah, so no difference reallly: if any a negative difference  :-(

[11:04] <nine> lizmat: nadim's happy now :)

[11:05] <lizmat> nine: cool  :-)

[13:35] <travis-ci> Rakudo build errored. Zoffix Znet 'Revert to using multi-dispatch for subtest

[13:35] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/154913908 https://github.com/rakudo/rakudo/compare/a4cc1ca41e47...547fc5154cd2

[13:36] <buggable> ☠ [travis build above] 2 builds failed. NONE due to the timeout

[13:38] <lizmat> jnthn: any idea why this doesn't compile in the setting, but outside it does?

[13:38] <lizmat> multi sub postcircumfix:<[ ]>(array[int] \SELF, Int $pos) is raw {

[13:38] <lizmat> nqp::atposref_i(SELF,nqp::unbox_i($pos))

[13:38] <lizmat> }

[13:40] <jnthn> Did you place it after class array?

[13:40] <yoleaux2> 06:44Z <brrt> jnthn: https://gist.github.com/anonymous/6c4b5eece51500252ad57fab423316b6

[13:41] <jnthn> (It depends on the ^parameterize method inside of class array, so just pre-declaring it ain't enough)

[13:47] <lizmat> jnthn: I did

[13:48] <lizmat> ok, lemme check that later, now watching rakudo running on a SailfishOS phone  :-)

[13:48] <jnthn> :D

[14:00] <TheLemonMan> lizmat, can you give a look at #127803 ? it looks like something you'd fix in the blink of an eye :)

[14:00] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127803

[14:03] <[Coke]> RT: 1365; @LARRY: 18; BOOTSTRAP: 4; BUG: 478; BUILD: 10; CONC: 47; DOCS: 1; GLR: 4; IO: 15; JVM: 68; LTA: 116; MATH: 5; NATIVECALL: 15; NEW: 857; NYI: 89; OO: 7; OSX: 5; PERF: 26; POD: 18; PRECOMP: 12; REGEX: 29; REPL: 4; RFC: 50; SEGV: 37; SPESH: 1; STAR: 5; TESTNEEDED: 30; TODO: 10; UNI: 30; UNTAGGED: 317; WEIRD: 3

[14:06] <dalek> rakudo/nom: 6ae6ecb | niner++ | / (2 files):

[14:06] <dalek> rakudo/nom: Make Distribution::Path handle native libraries correctly

[14:06] <dalek> rakudo/nom:

[14:06] <dalek> rakudo/nom: With this change we can now use it in install-dist.pl and get rid of the

[14:06] <dalek> rakudo/nom: prototype.

[14:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ae6ecbfca

[14:25] <lizmat> TheLemonMan: looking at it (#127803)

[14:25] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127803

[14:29] <[Coke]> RT: 1365; @LARRY: 18; BOOTSTRAP: 4; BUG: 485; BUILD: 11; CONC: 49; DOCS: 1; GLR: 4; IO: 15; JVM: 68; LTA: 117; MATH: 6; NATIVECALL: 15; NEW: 850; NYI: 90; OO: 7; OSX: 6; PERF: 26; POD: 18; PRECOMP: 12; REGEX: 34; REPL: 4; RFC: 53; SEGV: 37; SPESH: 1; STAR: 6; TESTNEEDED: 32; TODO: 10; UNI: 30; UNTAGGED: 296; WEIRD: 3

[14:29] <[Coke]> ^^ untagged under 300

[14:29] <timotimo> so many tags :S

[14:30] <timotimo> note my much improved errors for the p6opaque error!

[14:30] <timotimo> i made that! *proud*

[14:30] <TheLemonMan> clear error messages for p6opaques *giggles*

[14:31] <timotimo> :D

[14:32] <timotimo> lizmat: my first guess is it's trying to access the result of the code block classify gets and assumes it's a List for some reason, but really it gets a junction that doesn't autothread (for some reason)

[14:32] <[Coke]> timotimo++

[14:32] <timotimo> yay

[15:01] <pmichaud> good morning, #perl6

[15:01] <pmichaud> er, #perl6-dev

[15:01] <timotimo> hey pm!

[15:10] <dalek> rakudo/nom: 7fa2ba7 | lizmat++ | src/core/Hash.pm:

[15:10] <dalek> rakudo/nom: Fix RT #127803

[15:10] <dalek> rakudo/nom:

[15:10] <dalek> rakudo/nom: Definitely a case of premature optimization  :-)

[15:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7fa2ba77d4

[15:10] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127803

[15:15] <TheLemonMan> lizmat++ :D

[15:39] <MetaZoffix> pmichaud: would you say this can be implemented right now, without waiting for 6.d too? (Providing it doesn't break anything in roast) https://github.com/perl6/specs/blob/master/v6d.pod#signatureattribute-defaults-based-on-definedness

[15:39] <MetaZoffix> basically adding a //= for signature defaults that would assign the default if the parameter is absent or is not defined

[15:41] * MetaZoffix is now a proud owner of http://Perl6.Fail :D

[15:43] <MetaZoffix> To host my bug app at http://i.imgur.com/lqKvZpi.png

[15:45] <lizmat> MetaZoffix++

[15:50] <jdv79> MetaZoffix++++

[15:58] <hoelzro> MetaZoffix++ looks fancy!

[19:12] <pmichaud> MetaZoffix:  I will look

[19:13] <pmichaud> [Coke]: ping

[19:14] <[Coke]> pong

[19:14] <pmichaud> have a moment?  I feel like I need a little recalibration on the current state of things

[19:15] <pmichaud> Looking on your latest comment on b14828b (about the /b /B stuff), you say "I've no issues with it going into 6.c".  What exactly does that mean?

[19:15] <pmichaud> I mean, how does something "go into 6.c"?  As I understand it, 6.c was released in December.

[19:15] <jnthn> It doesn't.

[19:15] <jnthn> Everything that's new now will go into either a 6.c.1 or a 6.d

[19:16] <jnthn> Aside from stuff we classify as errata, 6.c is "immutable"

[19:16] <pmichaud> Right, that's the perspective I've had.

[19:16] <pmichaud> And that's part of what's been confusing me about this particular set of tickets/threads.

[19:17] <jnthn> I suspect what it really means is "can we put this in *now* as opposed to waiting for us to have the machinary to make it only happen in the presence of an explicit `use 6.d.a` and not happen with a `use 6.c`"

[19:17] <pmichaud> Hmm.

[19:17] <jnthn> And I suspect the "go into 6.c" wording is being used as shorthand for that rather more unwieldy thing.

[19:18] <pmichaud> Well, does "use 6.c" mean that untested things are guaranteed to work the same as they did with Rakudo's corresponding release?  I would hope not.

[19:18] <jnthn> No

[19:18] <jnthn> That's near-impossible to achieve.

[19:19] <pmichaud> Agreed.

[19:19] <jnthn> I attempted to document this stuff clearly at some point. :)

[19:19] <pmichaud> So, even in the presence of "use 6.c", Rakudo should be able to have features that are outside of the literal 6.c specification, yes?

[19:19] <[Coke]> I specifically meant "add a spectest in 6.c"

[19:19] <[Coke]> which was incorrect; should have been 6.c.1

[19:20] <[Coke]> but it was in response to your comment about it not having to wait until 6.d

[19:20] <pmichaud> Hmm.

[19:20] <[Coke]> my mental setup for this is based on jnthn++'s doc.

[19:20] <MetaZoffix> If there aren't any use 6.c or use 6.d, what does the user get? The latest and greatest that they have installed?

[19:21] <pmichaud> What's the url for jnthn++'s doc?  I should read that.

[19:21] <jnthn> pmichaud: https://gist.github.com/jnthn/c10742f9d51da80226fa is what I wrote up fwiw

[19:21] <pmichaud> danke

[19:21] <jnthn> And we really could do with it living somewhere better than a gist

[19:21] <MetaZoffix> huggable: perl6 versions :is: https://gist.github.com/jnthn/c10742f9d51da80226fa

[19:21] <huggable> MetaZoffix, Added perl6 versions as https://gist.github.com/jnthn/c10742f9d51da80226fa

[19:22] <pmichaud> MetaZoffix: In answer to your earlier question of "can we implement signature attributes based on defaults now?", my response would be that there's nothing to prevent it from being implemented.

[19:23] <pmichaud> in my mental model (which exists before reading jnthn++'s document), it's normal and even expected for compilers to lead the language specification.  Language specification is retrospective, not prospective.

[19:23] <pmichaud> whether it should be part of the language (or compiler) is a slightly different topic... but a compiler doesn't have to wait for a language feature to be approved before implementing it.

[19:23] <MetaZoffix> pmichaud: ok. Do I need someone else's review of that feature (from the language design perspective) or are you OKing it and I should start working on it?

[19:24] <pmichaud> MetaZoffix: working code and rough consensus is the general model, I think.

[19:24] <MetaZoffix> Cool. I'll make a PR for review when I get a chance.

[19:24] <pmichaud> it's more ideal if it can be done as a module first, though.

[19:24] <MetaZoffix> Yeah, I'll do that, since that was my original plan anyway :) (and a blog post to go with it too)

[19:27] <pmichaud> After studying a bit about language specification at a meta level, and looking at the history, I became convinced that language spec should be retrospective.  As a more relevant example -- Internet standards normally ratify what has already been done and proven by implementations, they don't map out the features yet-to-be-tried.  Or, when they are mapping out a possible future, they're termed "RFC" and

[19:27] <timotimo> all we have is the "errata"

[19:27] <pmichaud> not "standards" or "specifications".

[19:27] <timotimo> ooes, didn't scroll

[19:28] <pmichaud> I particularly wouldn't want to have "6.d" be a list of proposed features that are adopted prior to implementation.  That heads down the (wrong) path taken by C99, for example.

[19:28] <jnthn> pmichaud: My doc was in many ways influenced by your language specs talk fwiw :)

[19:28] <pmichaud> jnthn: I suspect that to be the case, but you may have added insights or choices that I hadn't reached yet.  :)

[19:28] <jnthn> pmichaud: I see releases as snapshots in time for passing spectests :)

[19:29] <jnthn> s/for/of/

[19:29] <pmichaud> jnthn: we're in complete agreement there :)

[19:29] <jnthn> Dinner time here, back later. :)

[19:30] <pmichaud> Now that I'm having a chance to look into it more deeply -- that's the dissonance I feel in reading the v6d.pod in general.

[19:31] <pmichaud> The whole "plans for 6.d" approach feels wrong.

[19:31] <pmichaud> it should be "plans for Perl 6", and how strongly we feel about them.

[19:31] <pmichaud> if there's a consensus that a particular feature would be good for Perl 6 (or Rakudo), it can proceed to implementation in Rakudo or other compilers.

[19:32] <pmichaud> But we shouldn't tie it to prospective future language specifications *until* it's had a chance to be vetted in implementation somewhere.

[19:33] <timotimo> we'll still have a 6.d "beta" phase

[19:33] <timotimo> where you're not supposed to rely on how exactly the 6.d features behave

[19:33] <timotimo> but if you don't "use 6.d" you won't get any of them at all

[19:33] <timotimo> is how i understood it, anyway

[19:34] <MetaZoffix> We have 54 RFC tickets: https://jsfiddle.net/2bsj7ecr/1/

[19:34] <pmichaud> timotimo: that feels completely backwards to me

[19:35] <pmichaud> if language ("6.d") is retrospective, I don't see how one can do a "use 6.d" for something that doesn't exist yet.

[19:36] <MetaZoffix> (to answer my earlier question: "Any Perl 6 program or module that does not declare a language version will be interpreted as expecting to run on the latest non-draft version supported by the implementation")

[19:36] <timotimo> i bet someone else can explain my thought better than me in any case

[19:37] <pmichaud> MetaZoffix: I don't understand "latest non-draft version"

[19:37] <pmichaud> it doesn't fit with my mental model

[19:37] <MetaZoffix> pmichaud: "(for example, it could get 6.c, 6.c.1, 6.d, or 6.d.1 - but never 6.d.a, 6.e.b, etc.) "

[19:37] <pmichaud> what exactly is a "non-draft version" of the language?

[19:37] <pmichaud> oops

[19:37] <MetaZoffix> I'm guessing 6.d.a would be the "beta" version that timotimo mentioned

[19:37] <timotimo> ah! yes, letters

[19:37] <pmichaud> I mean, what exactly is a "draft version" of the language?

[19:38] <timotimo> "dude we should totally disallow \b in regexes, k?"

[19:38] <gfldex> 6.d.a reads "six . dee . alpha" for me

[19:39] <pmichaud> if the language is defined as a snapshot of spectests... what's a "draft version" of that?

[19:39] <timotimo> a rakudo would ship with a 6.c spec test snapshot and a 6.d spec test snapshot that we're not yet committed to support in the future

[19:39] <MetaZoffix> pmichaud: a version that can be used in the wild by implementation to see if it's fine to use, before actually being finalized and released is my guess

[19:40] <pmichaud> let me finish reading jnthn++'s document.

[19:40] <pmichaud> it talks about draft versions.

[19:40] * MetaZoffix does same

[19:40] <MetaZoffix> Yeah, my quote was from it

[19:41] <pmichaud> my first guess:  "Any Perl 6 program or module that does not declare a language version will be interpreted as expecting to run on the implementation's default version."

[19:42] <pmichaud> To me, it could be draft.  I shouldn't have to explicitly declare a draft version to use new features of an implementation.

[19:42] <MetaZoffix> eh, won't have time to finish it. Need to pack things up before commutting

[19:42] <MetaZoffix> \o

[19:45] <[Coke]> pmichaud: in other news, I assigned an RT about rakudo.org to you that I have no idea how to fix.

[19:45] <pmichaud> [Coke]: just now?

[19:45] <[Coke]> today

[19:45] <[Coke]> one sec.

[19:46] <pmichaud> #128664

[19:46] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128664

[19:46] <[Coke]> https://rt.perl.org/Ticket/Display.html?id=128664

[19:46] <[Coke]> yes.

[19:50] <pmichaud> looking.

[19:55] <[Coke]> danke!

[19:55] <[Coke]> I couldn't find it on disk or in wp

[19:55] <pmichaud> Now fixed.

[19:56] <[Coke]> woot!

[19:56] <pmichaud> Dashboard -> Appearance -> Header, Select Image, (re)load the image from the media library.

[19:56] <pmichaud> Apparently the url was originally set when the site was still "rakudoperl.org" and had never been updated.

[19:57] <[Coke]> oh wow, wouldn't ahve figured that ,yah

[19:57] <pmichaud> It took me a bit to find it as well.

[19:57] <pmichaud> I just happened to notice "Header" in the appearance menu and said "hey, what's that?"

[19:57] <pmichaud> otherwise I was randoming looking around and grepping odd things as well.

[19:57] <pmichaud> anyway, now fixed.  :)

[20:02] <[Coke]> down to 1364 tickets! ;)

[20:03] <pmichaud> I have to go do other things for a while -- I'll re-read the jnthn++ versioning doc and make my comments from there.  Thanks everyone for your patience.  :)

[20:04] <[Coke]> pmichaud: thanks for yours. :)

[20:04] <gfldex> m: sub foo(:$where = -> $p { $p // 'default'}){};

[20:04] <camelia> rakudo-moar 7fa2ba: ( no output )
