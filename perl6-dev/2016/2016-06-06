[01:45] <Zoffix> So what exactly is [email@hidden.address] ? Is it a mailing list? How do I join it and is there an archive?

[01:48] <Zoffix> "To subscribe to a list, send mail to [email@hidden.address] ( http://perl6.org/archive/lists/ ). I did... nothing happened :/

[01:53] <Zoffix> "The mailinglist manager is ignoring me!?

[01:53] <Zoffix> You need to fix your envelope sender address. Mailers *must* send their bounces to the envelope sender's address. If yours is not correct, you will never get bounces."... waaat? http://perl6.org/archive/lists/faq.html

[01:54] <Zoffix> I didn't realize I had to get a PhD in email administration to get basic stuff

[01:56] <Zoffix> Is "mailinglist manager" a human?

[02:11] <Zoffix> Well, I managed to sub from a gmail account. It didn't like my @zoffix.com one

[05:46] <[Tux]> This is Rakudo version 2016.05-56-g85682a5 built on MoarVM version 2016.05-18-g1339332

[05:46] <[Tux]> test            19.624

[05:46] <[Tux]> test-t          12.381

[05:46] <[Tux]> csv-parser      34.612

[10:54] <dalek> rakudo/nom: c4b3fa0 | lizmat++ | src/core/Array.pm:

[10:54] <dalek> rakudo/nom: Omit unnecessary STATEMENT_LIST

[10:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c4b3fa0084

[11:17] <dalek> rakudo/nom: a64607f | lizmat++ | src/core/SlippyIterator.pm:

[11:17] <dalek> rakudo/nom: Streamline SlippyIterator.slip-one

[11:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a64607f0e7

[11:53] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Omit unnecessary STATEMENT_LIST'

[11:53] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/135560355 https://github.com/rakudo/rakudo/compare/85682a52def9...c4b3fa00843a

[12:38] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Streamline SlippyIterator.slip-one'

[12:38] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/135564292 https://github.com/rakudo/rakudo/compare/c4b3fa00843a...a64607f0e777

[13:19] <dalek> rakudo/nom: bf099b1 | lizmat++ | src/core/Any-iterable-methods.pm:

[13:19] <dalek> rakudo/nom: Remove MapIterCommon role

[13:19] <dalek> rakudo/nom:

[13:19] <dalek> rakudo/nom: As a step towards further specialized Iterators for various cases.

[13:19] <dalek> rakudo/nom: This should not have any influence on performance.

[13:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bf099b10e1

[13:19] <lizmat> afk&

[14:21] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Remove MapIterCommon role

[14:21] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/135588952 https://github.com/rakudo/rakudo/compare/a64607f0e777...bf099b10e1a4

[14:27] <timotimo> ^- that was just a failure because of coke's recent (and recently reverted) moarvm patch

[14:55] <[Coke]> is travis running against moar-latest?

[14:55] <[Coke]> that seems buggy to me.

[14:55] <[Coke]> Or at least, that seems like an allowable failure.

[14:56] <[Coke]> we only guarantee rakudo will work under the recommended version.

[14:56] <timotimo> right. we could move these settings to "allowed failures"

[14:58] <psch> same for nqp-master probably, right?

[14:59] <timotimo> i'd think that'd be sensible

[14:59] <[Coke]> +1 here.

[14:59] <[Coke]> ... said the guy who broke all the builds.

[15:00] <timotimo> :D

[15:00] <jnthn> I think it's useful to know when that happens, but perhaps it's more useful if we know *here* rather than bothering folks committing to Rakudo :)

[15:01] <jnthn> So maybe we should add a "build Rakudo" to Moar's Travis too

[15:01] <jnthn> (building against HEAD)

[15:01] <jnthn> And then Rakudo's Travis can build agaisnt the current NQP_REVISION / MOAR_REVISION

[15:03] <[Coke]> that works.

[15:04] <[Coke]> you could then see if moar changes caused spectest fallout, too.

[15:05] <jnthn> oh wait, "useful if we know *here*" meant "useful if we know on #moarvm" :)

[15:05] <[Coke]> :)

[17:45] <dalek> rakudo/nom: 3156a9a | TimToady++ | src/Perl6/World.nqp:

[17:45] <dalek> rakudo/nom: reserve a couple more MONKEYs

[17:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3156a9a9f3

[17:46] * perlpilot wonders how monkeys got such a bad rap

[17:46] <TimToady> they evolved into something worse :)

[17:51] <timotimo> if they evolved, then why are there still monkeys?

[17:53] * [Coke] hopes he doesn't have to dig up a blog post explaining all this for folks. :P

[17:54] <perlpilot> ... and that's why a banana naturally fits in your hand.

[17:56] <TimToady> odd how a lot of people don't mind being classified as a kind of ape, but it bothers them more to be classified as a kind of monkey...

[17:57] <TimToady> we don't have that problem being classified as mammals...

[17:58] <TimToady> probably dates back to us-against-the-dinosaurs, I guess...

[18:00] * TimToady thinks about MONKEY-SCREECH, MONKEY-PAW, and MONKEY-TAIL, but we gotta stop somewhere, or generalize more betterer

[18:01] <perlpilot> MONKEY-FIST should be in there somewhere too  :)

[18:02] <perlpilot> code tying you up in knots makes for some good imagery

[18:04] <perlpilot> Just make it MONKEY-* to remind people that monkeys are bad m'kay  ;)

[18:06] <TimToady> sub MONKEY($badidea) { so $*MONKEY and ($*MONKEYALL or DYNAMIC::("$*MONKEY-" ~ $badidea)) }; die "Bad monkey!" unless MONKEY("SPEAK-NO-EVIL")

[18:06] <TimToady> or some such...

[18:06] <TimToady> currently 'use MONKEY;' just sets all the monkeys it knows about, rather than enabling any MONKEY-*

[18:07] <TimToady> that's what I meant by more betterer generalizing

[18:08] <dalek> rakudo/nom: f0f1d4e | lizmat++ | src/core/Any-iterable-methods.pm:

[18:08] <dalek> rakudo/nom: Remove unnecessary attribute

[18:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f0f1d4e924

[18:16] <TimToady> actually, monkeying uses %*PRAGMAS currently, not normal dynvars

[18:18] * TimToady suspects the compiler's %*PRAGMAS is not visible from a user's BEGIN code currently, which would make it difficult to have user-defined MONKEYs

[18:27] <lizmat> m: use nqp; BEGIN say %*PRAGMAS   # actually *is* visible

[18:27] <camelia> rakudo-moar 3156a9: OUTPUT«{nqp => 1}␤»

[18:28] <lizmat> TimToady: not sure jnthn considers this a bug or a feature

[18:31] <TimToady> looks like a bug that can act like a feature :)

[18:31] <TimToady> by rights, it should probably be visible as %?PRAGMAS

[18:33] <TimToady> though, along with %*LANG and such, it should probably come through the current cursor language, and not through dynvars at all

[18:33] <TimToady> never got around to fixing that before christmas

[18:34] <lizmat> hence my "bug" reference  :-)

[18:34] <TimToady> using dynvars for that assumes we are never interested in it except during the initial parse pass, but subsequent semantic passes over the AST should really have access to the current language

[18:35] <TimToady> well, my 'bug' was not that, but that a compiler's dynvar is leaking through to the user's dynvars

[18:45] <TimToady> there're probably a whole mess of compiler internals that are currently visible to user code that shouldn't be

[18:45] <TimToady> m: BEGIN .name.say for $*W.^methods

[18:45] <camelia> rakudo-moar f0f1d4: OUTPUT«context_class␤BUILD␤create_nested␤RAKUDO_MODULE_DEBUG␤loading_and_symbol_setup␤mop_up_and_check␤push_lexpad␤pop_lexpad␤cur_lexpad␤mark_cur_lexpad_signatured␤nearest_signatured_block_declares␤get_code_object␤add_stub_to_check␤add_p…»

[18:46] <TimToady> those footguns should probably be opt-in, not opt-out :)

[18:46] <TimToady> unless you're writing, say, a macro system, or trying to fake up slangs :)

[18:48] <TimToady> perhaps when we get more authoritative dynvar caches, we can filter out (read: "lie about") some of the outer dynvars currently available to user code

[18:49] <masak> I'm currently back to thinking about macros and slangs, by the way

[18:49] <masak> now thinking about them in terms of the compiler stack being a plug-in system of sorts

[18:52] <TimToady> .oO(use MONKEY-PAW-GUN;)

[18:53] <TimToady> but for sure, if we're not careful, a whole bunch of evil modules are going to start relying on internals that may change

[18:55] <TimToady> "Oh, you wanna install a lexical in someone else's scope?  No problemo!"

[18:58] <TimToady> "Oh, you wanna call the CHECK phasers now instead of the end of compilation?  No problemo!

[18:59] * TimToady wonders if "No problemo!" is a problem...

[18:59] <TimToady> anti-hispanic slurs being one of the topics of the day...

[19:01] <travis-ci> Rakudo build passed. TimToady 'reserve a couple more MONKEYs'

[19:01] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/135658553 https://github.com/rakudo/rakudo/compare/bf099b10e1a4...3156a9a9f324

[19:02] <TimToady> I guess it's actually mock Spanish to begin with, in any case

[19:17] <dalek> rakudo/nom: 055ca16 | lizmat++ | src/core/Any-iterable-methods.pm:

[19:17] <dalek> rakudo/nom: Make .map on blocks w/out label/phasers 30% faster

[19:17] <dalek> rakudo/nom:

[19:17] <dalek> rakudo/nom: By checking for them before creating the Iterator class, and creating

[19:17] <dalek> rakudo/nom: a simplified Iterator in that case.

[19:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/055ca16e3c

[19:41] <timotimo> oooooh

[19:42] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Remove unnecessary attribute'

[19:42] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/135664021 https://github.com/rakudo/rakudo/compare/3156a9a9f324...f0f1d4e92474

[20:11] <tbrowder_> I have a pull request to correct the test for issue #128221: <https://github.com/perl6/roast/pull/125>

[20:51] <lizmat> and another Perl 6 Weekly hits the net: https://p6weekly.wordpress.com/2016/06/06/2016-23-friendlier-bisecting/

[20:53] <dalek> roast: 0cbc8db | (Tom Browder)++ | S26-documentation/07-tables.t:

[20:53] <dalek> roast: uncomment test and use the 'skip' function properly

[20:53] <dalek> roast: review: https://github.com/perl6/roast/commit/0cbc8db683

[20:53] <dalek> roast: 96e860c | (Tom Browder)++ | S26-documentation/07-tables.t:

[20:53] <dalek> roast: correct number of tests; make skipped test not over-report number of tests

[20:53] <dalek> roast: review: https://github.com/perl6/roast/commit/96e860cbe7

[20:53] <dalek> roast: 6d456ab | lizmat++ | S26-documentation/07-tables.t:

[20:53] <dalek> roast: Merge pull request #125 from tbrowder/test-fix

[20:53] <dalek> roast:

[20:53] <dalek> roast: Make test for issue #128221 properly visible during testing

[20:53] <dalek> roast: review: https://github.com/perl6/roast/commit/6d456abe83

[21:11] <nine> lizmat: that sounds amazing!

[21:12] <lizmat> nine: what does ?

[21:12] <nine> Make .map on blocks w/out label/phasers 30% faster

[21:12] <lizmat> ah, that, yeah  :-)

[21:12] <nine> And the commit message even undersells it, as the speedup will be the same for for loops :)

[21:13] <lizmat> well, you may notice it, or you won't  :-)

[21:13] <lizmat> I'm looking forward to [Tux] 's next test-t run though  :-)

[21:13] <nine> Same here :)

[21:13] <lizmat> fwiw, this was my benchmark: my @a = ^100; for ^1000 { my @b = @a.map: { $_ } }

[21:21] <jnthn> Hmm, for loops. :-)

[21:23] <jnthn> I may end up having simple cases of those not go through map, when I get to doing the work on more aggresive lexical lowering and scope flattening.

[21:23] <jnthn> We'll see. :)

[21:30] <jnthn> Time for some rest...'night o/

[22:06] <dalek> rakudo/nom: f80cc7e | lizmat++ | src/core/Any-iterable-methods.pm:

[22:06] <dalek> rakudo/nom: Simplify default mapper a bit more

[22:06] <dalek> rakudo/nom:

[22:06] <dalek> rakudo/nom: - remove unneeded nqp::stmts

[22:06] <dalek> rakudo/nom: - make sure we use nqp::eqaddr instead of =:=

[22:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f80cc7ede4
