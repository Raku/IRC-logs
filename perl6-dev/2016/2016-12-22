[00:47] <travis-ci> Rakudo build passed. Zoffix Znet 'Fix IO::ArgFiles.lines treating non-Int numerics as Inf'

[00:47] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/185934560 https://github.com/rakudo/rakudo/compare/541d12776135...a9c0480c61a7

[01:23] <travis-ci> Rakudo build passed. Zoffix Znet 'Revert "Fix IO::ArgFiles.lines treating non-Int numerics as Inf"

[01:23] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/185934870 https://github.com/rakudo/rakudo/compare/a9c0480c61a7...6873d7db635a

[01:58] <travis-ci> Rakudo build passed. Zoffix Znet 'Fix IO::ArgFiles.lines treating non-Int numerics as Inf'

[01:58] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/185935056 https://github.com/rakudo/rakudo/compare/6873d7db635a...c42b6bf2f564

[04:30] <samcv> ack i keep running into this bug trying to add tests for unicode properties https://rt.perl.org/Ticket/Display.html?id=130384

[04:30] <samcv> well i guess I can just use the codepoint hex instead of putting the letter in the text of the file

[04:31] <samcv> otherwise it won't even compile

[04:36] <samcv> guys where do I ask questions related to implementation?

[04:36] <samcv> I am trying to write roast tests for all the Unicode properties, and most only have on value. But the Name_Alias one, some of them have multiple values

[04:37] <samcv> 0085;NEXT LINE;control

[04:37] <samcv> 0085;NEL;abbreviation

[04:37] <samcv> this one has a 'control' name and an 'abbreviation' alias names

[04:37] <samcv> these are the formal name aliases, not the ones that are more like also known as names

[04:41] <samcv> and there is a _much_ more important one, Script_Extensions which specifies which scripts a language is used with, in addition to the one that is the value of the 'Script' property

[04:41] <samcv> that can hold multiple values

[04:44] <samcv> and is also not supported in MoarVM or Rakudo at this time

[04:50] <MasterDuke> man, just watched jonathan blow's latest video about his language Jai. from-scratch compile of a 33k line program in less than 1s

[04:50] <yoleaux2> 18 Dec 2016 21:46Z <Zoffix> MasterDuke: Hi. I see this commit says it fixes that ticket but the ticket is still open. Is it OK to close? Do you recall whether tests were added as well? https://github.com/rakudo/rakudo/commit/376950acf2 https://rt.perl.org/Ticket/Display.html?id=128097#ticket-history

[05:07] <dalek> roast: 2759cf2 | MasterDuke17++ | S32-io/io-path.t:

[05:07] <dalek> roast: Add tests for RT #128097

[05:07] <dalek> roast:

[05:07] <dalek> roast: "-".IO gists correctly

[05:07] <dalek> roast: https://rt.perl.org/Ticket/Display.html?id=128097

[05:07] <dalek> roast: review: https://github.com/perl6/roast/commit/2759cf2fce

[05:07] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128097

[05:09] <MasterDuke> .tell Zoffix good catch. tests added for https://rt.perl.org/Ticket/Display.html?id=128097 in https://github.com/perl6/roast/commit/2759cf2fce and ticket resolved

[05:09] <yoleaux2> MasterDuke: I'll pass your message to Zoffix.

[05:18] <dalek> roast: 4e9476d | samcv++ | S15-unicode-information/uniprop.t:

[05:18] <dalek> roast: uniprop: add a test for Indic_Positional_Category

[05:18] <dalek> roast: review: https://github.com/perl6/roast/commit/4e9476dde5

[08:51] <dalek> rakudo/nom: 73797b7 | MasterDuke17++ | src/core/IO/ArgFiles.pm:

[08:51] <dalek> rakudo/nom: Make IO::ArgFiles.lines about 10% faster

[08:51] <dalek> rakudo/nom:

[08:51] <dalek> rakudo/nom: Turn it into a multi so the usual use case can be optimized.

[08:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/73797b7591

[08:51] <dalek> rakudo/nom: 96f5fba | lizmat++ | src/core/IO/ArgFiles.pm:

[08:51] <dalek> rakudo/nom: Merge pull request #965 from MasterDuke17/more_IO-ArgFiles.lines_optimization

[08:51] <dalek> rakudo/nom:

[08:51] <dalek> rakudo/nom: Make IO::ArgFiles.lines about 10% faster

[08:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/96f5fba743

[09:01] <dalek> roast: 5c148ed | lizmat++ | S03-feeds/basic.t:

[09:01] <dalek> roast: Fix faulty feed check

[09:01] <dalek> roast:

[09:01] <dalek> roast: Trying to feed an infinite list into an array *should* fail, and

[09:01] <dalek> roast: not just create an empty array silently.

[09:01] <dalek> roast: review: https://github.com/perl6/roast/commit/5c148ed2dd

[09:06] <dalek> roast/6.c-errata: cd83e00 | lizmat++ | S03-feeds/basic.t:

[09:06] <dalek> roast/6.c-errata: Fix faulty feed check

[09:06] <dalek> roast/6.c-errata:

[09:06] <dalek> roast/6.c-errata: Trying to feed an infinite list into an array *should* fail, and

[09:06] <dalek> roast/6.c-errata: not just create an empty array silently.

[09:06] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/cd83e00844

[09:19] <lizmat> grrrr  two more Terminal crashes

[09:19] <lizmat> getting moderately tired of it

[09:41] <nine> Are there no alternative terminals for Mac OS?

[09:42] <nine> I guess reporting the bug and hoping for constructive work and a speedy fix would be in vain with a huge company like Apple :)

[11:04] <notviki> samcv: does Unicode declare which chars those chars can be combined with?

[11:05] <notviki> samcv: I don't get; what's actually the question about the multiple properties?

[11:06] <notviki> samcv: this is the place the ask questions about impl. Or open an RT ticket.

[11:07] <notviki> m: dd '١'.uniprop('Numeric').^name

[11:07] <camelia> rakudo-moar 96f5fb: OUTPUT«"Str"␤»

[11:07] <notviki> m: dd '١'.uniprop('Number').^name

[11:07] <camelia> rakudo-moar 96f5fb: OUTPUT«"Int"␤»

[11:09] <notviki> m: dd '༳'.uniprop('Number')

[11:09] <camelia> rakudo-moar 96f5fb: OUTPUT«1␤»

[11:09] <notviki> m: dd '٢'.uniprop('Number')

[11:09] <camelia> rakudo-moar 96f5fb: OUTPUT«1␤»

[11:10] * notviki doesn't get it

[11:21] <notviki> .tell samcv if the question was how to return the multi props... don't know, but one thing I'd note is it's preferable the methods/sub return predictable values. Right now, I notice if I have $char and $prop, I can no longer know what type .uniprop will return to me. For some reason it returns Int 1 or Int 0 for property 'Number', yet it returns Strs for other properties. If we add Lists to the mix it'd be

[11:21] <yoleaux2> notviki: I'll pass your message to samcv.

[11:21] <notviki> even more unpredictable

[11:21] <notviki> .tell samcv even more unpredictable.

[11:21] <yoleaux2> notviki: I'll pass your message to samcv.

[11:32] * notviki sighs

[11:34] <notviki> Just yesterday I first noted in #perl6 and then on the PR that we can't coerce an Inf to an Int and so can't have an Int() coercer in the sig and less than 24 hours later a PR doing exactly that gets merged -_-

[11:34] <notviki> m: $*ARGFILES.lines(Inf)

[11:34] <camelia> rakudo-moar 96f5fb: OUTPUT«P6opaque: get_boxed_ref could not unbox for the representation '20' of type Failure␤  in block <unit> at <tmp> line 1␤␤»

[11:34] <notviki> star: $*ARGFILES.lines(Inf)

[11:34] <camelia> star-m 2016.10: ( no output )

[11:34] <notviki> m: "a\nb".lines(Inf)

[11:34] <camelia> rakudo-moar 96f5fb: ( no output )

[11:34] <timotimo> yeah, that also confused me

[11:38] <notviki> .tell MasterDuke FWIW, $*ARGFILES.lines(Inf) no longer works after #965

[11:38] <yoleaux2> notviki: I'll pass your message to MasterDuke.

[12:20] <lizmat> nine: I think it's a conspiracy to get me to use emacs, because it only happens if you're using vi

[12:20] <nine> Do not give in!

[12:29] <lizmat> :-)

[12:30] <dalek> rakudo/nom: 24f0eeb | MasterDuke17++ | src/core/IO/ArgFiles.pm:

[12:30] <dalek> rakudo/nom: Handle IO::ArgFiles.lines(Inf)

[12:30] <dalek> rakudo/nom:

[12:30] <dalek> rakudo/nom: Base everything off the common case (much more similar to IO::Handle.lines now).

[12:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/24f0eeb84b

[12:30] <dalek> rakudo/nom: 660b0b9 | (Zoffix Znet)++ | src/core/IO/ArgFiles.pm:

[12:30] <dalek> rakudo/nom: Merge pull request #966 from MasterDuke17/patch-1

[12:30] <dalek> rakudo/nom:

[12:30] <dalek> rakudo/nom: Handle IO::ArgFiles.lines(Inf)

[12:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/660b0b9bd2

[14:32] <notviki> m: my @a = (1..Inf)[^1000]; say now - INIT now

[14:32] <camelia> rakudo-moar 660b0b: OUTPUT«0.383827␤»

[14:32] <notviki> m: my @a = (1..<Inf>)[^1000]; say now - INIT now

[14:32] <camelia> rakudo-moar 660b0b: OUTPUT«3.0618037␤»

[14:32] <notviki> ^^^ is there a reason iterators in Range compare to Infs with === and not just == ?

[15:05] <notviki> hm, I'm still getting "/home/zoffix/.rakudobrew/bin/../moar-nom/install/share/perl6/site/bin/zef" in usage output: https://gist.github.com/zoffixznet/a33ea166a13f4ecb3281384f83ead9e0

[15:06] <notviki> I thought we made it do something better :/

[15:06] <notviki> oh, I guess the old one had SHA hashes in it?

[15:07] * notviki would rather have the "command" thing we had for a short bit than a giant ass path that makes everything unreadable

[15:09] <notviki> bleh

[15:09] <notviki> I hate everything today :[

[15:09] * notviki crawls into a hole and waits for the holidays

[15:16] <notviki> m: constant HNY = BEGIN DateTime.new(year => .year + (1 if .month <= 6)).utc given DateTime.now.utc; dd HNY

[15:16] <camelia> rakudo-moar 660b0b: OUTPUT«===SORRY!===␤QAST::Block with cuid 4 has not appeared␤»

[15:17] <notviki> :(

[15:28] <nine> notviki: nine@sunshine:~> zef uinstall blah

[15:28] <nine> Usage: zef [--force] fetch [<identities> ...] -- Download specific distributions

[15:28] <nine> notviki: I see you are using rakudobrew. A tool for people who know what they are doing and who can live with a LTA user experience.

[15:30] <notviki> nine: ah, OK, cool

[15:30] <notviki> Yeah, if it's just in rakudobrew, then it doesn't matter.

[15:36] <nine> I strongly suspect rakudobrew is installing shims for commands like zef or panda to redirect the call to the currently selected rakudo. So it's a shim for a shim for a script that just loads a single module.

[15:36] <nine> We just love our indirections ;)

[15:36] <notviki> :)

[16:49] <notviki> m: my $i = 2; say ++$i**2

[16:49] <camelia> rakudo-moar 660b0b: OUTPUT«9␤»

[16:49] <notviki> m: my $i = 2; say ++$i²

[16:49] <camelia> rakudo-moar 660b0b: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Operators '++' and '²' are non-associative and require parentheses␤at <tmp>:1␤------> my $i = 2; say ++$i²⏏<EOL>␤    expecting any of:␤        postfix␤»

[16:50] <notviki> This feels like a bug to me.

[16:51] <notviki> .ask TimToady is it by design that ++$i² throws, while ++$i**2 works? I kinda expected the two to be equivalent. See https://github.com/perl6/roast/issues/200

[16:51] <yoleaux2> notviki: I'll pass your message to TimToady.

[17:24] <notviki> :o

[17:57] <TimToady> well, simply changing the precedence to exponentiation causes the operator precedence parser to get confused, currently

[17:57] <yoleaux2> 16:51Z <notviki> TimToady: is it by design that ++$i² throws, while ++$i**2 works? I kinda expected the two to be equivalent. See https://github.com/perl6/roast/issues/200

[17:58] <TimToady> and if we changed it to methodcall precedence like most other postfixes, it wouldn't work anyway

[17:58] <TimToady> but I don't think much "design" was put into it, more like copy/pasta

[18:00] <notviki> hm, OK

[18:01] <notviki> I interpret that as: I'm free to try to make it parse the same :)

[18:01] <TimToady> STD had some code to deal with dueling precedences in affixes, but I don't know if nqp's EXPR has the same code

[18:01] <TimToady> it might also be an interaction with the fact that the EXPR action method is turning it into a binary op internally

[18:02] <TimToady> anyway, just changing the prec right now results in:

[18:02] <TimToady> MVMArray: Can't pop from an empty array at gen/moar/stage2/NQPHLL.nqp:1099  (/home/larry/nom/install/share/nqp/lib/NQPHLL.moarvm:EXPR_reduce)

[18:02] <TimToady> yes, feel free :)

[18:03] * TimToady has to go out shopping...

[18:12] <TimToady> yes, EXPR has the interleaving code, so probably it's the postfix-to-infix transform that is the issue

[18:13] <TimToady> afk &

[19:31] <dalek> rakudo/nom: 0db0810 | lizmat++ | src/core/Date (2 files):

[19:31] <dalek> rakudo/nom: Make clearer that Date is timezone agnostic

[19:31] <dalek> rakudo/nom:

[19:31] <dalek> rakudo/nom: The code for initializing $*TZ was living in the Date module, whereas

[19:31] <dalek> rakudo/nom: this is only used by DateTime.  So moving it to the source file of

[19:31] <dalek> rakudo/nom: DateTime seemed appropriate.

[19:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0db0810c02

[19:44] <lucasb> I grepped 'nqp::add_i' and 'nqp::sub_i' and noticed most uses of it are to add or subtract 1

[19:45] <lucasb> how come nqp/moarvm doesn't have a specific OP to increment/decrement 1?

[19:45] <lucasb> wouldn't this make things more performant? :)

[19:45] <notviki> Would it really?

[19:46] <lucasb> idk, would it? It was a question :)

[19:46] <notviki> I recall nqp::ord(...) stuff compiles to more performant stuff; wouldn't same be the case for add/sub?

[19:46] <notviki> Like, I mean this stuff can probably done automagically instead of adding more ops and doing it manually

[19:47] <notviki> m: use nqp; my int $n; nqp::add_i($n, 1) for ^1000_000; say now - INIT now

[19:47] <camelia> rakudo-moar 660b0b: OUTPUT«0.2257413␤»

[19:48] <notviki> I wouldn't call it the slowest piece of code :)

[19:48] <notviki> m: use nqp; my int $n; nqp::add_i($n, 10) for ^1000_000; say now - INIT now

[19:48] <camelia> rakudo-moar 660b0b: OUTPUT«0.2267643␤»

[19:48] <lucasb> ok, then. we can say it's already fast enough :)

[19:55] * lizmat goes off to see some Passengers

[21:34] <[Coke]> lizmat: I like iTerm2 for the mac, if you're looking for a replacement.
