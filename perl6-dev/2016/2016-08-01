[00:25] <Zoffix> I think I'll do it differently tho... Pop a web frontend for the backend DB and expose a JSON API interface that bot can use

[02:21] <Zoffix> committable, 5605d5f http://temp.perl6.party/foo.txt

[02:21] <committable> Zoffix: It looks like a URL, but mime type is 'text/plain' while I was expecting 'text/plain; charset=utf-8'. I can only understand raw links, sorry.

[02:21] <Zoffix> heh :)

[02:24] <Zoffix> committable, 5605d5f http://temp.perl6.party/foo.pl

[02:24] <committable> Zoffix: It looks like a URL, but mime type is 'text/x-perl' while I was expecting 'text/plain; charset=utf-8'. I can only understand raw links, sorry.

[02:25] <Zoffix> huh

[02:25] <Zoffix> oh

[02:46] * Zoffix looks around for dalek

[02:46] <Zoffix> Ugh. Where is the bot when you need it

[03:00] <geekosaur> [31 19:08] * dalek has quit (Ping timeout: 258 seconds)

[03:00] <geekosaur> ...7 hours ago

[03:01] <Zoffix> :(

[03:01] <geekosaur> sorry, 8 hours. too late for me to do modulus math >.>

[03:14] <Zoffix> m: my Int $a; my $b = 42; $a := $b; $b = 'meow'; dd $a

[03:14] <camelia> rakudo-moar fa84f1: OUTPUT«Str $b = "meow"␤»

[03:14] <Zoffix> Is this a bug or is binding an Any to an Int wipes the constraint? It's this ticket: https://rt.perl.org/Ticket/Display.html?id=127443#ticket-history

[03:25] <gfldex> Zoffix: you get what you ask for. Feels wrong tho. After all you don't place a type constraint for no reason.

[03:26] <gfldex> m: my Int @a; my Str $b = "abc"; @a[0] := $b;

[03:26] <camelia> rakudo-moar fa84f1: OUTPUT«Cannot resolve caller BIND-POS(Array[Int]: Int, Str); none of these signatures match:␤    (Array:D $: Int $pos, Int \bindval, *%_)␤    (Array:D $: int $pos, Int \bindval, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[03:26] <gfldex> also it's inconsistent

[03:37] <Zoffix> m: my $m = method ($a: $b){}; say $m.signature ~~ :($a, $b);

[03:37] <camelia> rakudo-moar fa84f1: OUTPUT«Method 'type' not found for invocant of class 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[03:39] <Zoffix> m: :(*%)~~ :();

[03:39] <camelia> rakudo-moar fa84f1: OUTPUT«Method 'type' not found for invocant of class 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[03:45] <Zoffix> Well, since the stupid bot is not here. If anyone wants to review my fix for RT#128783. It's in src/Perl6/Grammar.nqp that I'm not 100% familiar with: https://github.com/rakudo/rakudo/commit/46838d5cbf192d644bfde5bbe215802fec771dc2

[03:45] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128783

[04:57] <Zoffix> Another one, for RT#128795 https://github.com/rakudo/rakudo/commit/4b934ddcd0c48bc739d2001480e74e4da4d2a576

[04:57] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128795

[05:01] <Zoffix> That one looks good to make into a blog post...

[05:01] * Zoffix makes another pot of coffee

[07:26] <[Tux]> This is Rakudo version 2016.07.1-96-g4b934dd built on MoarVM version 2016.07-13-gcba3ae3

[07:26] <[Tux]> test            15.275

[07:26] <[Tux]> test-t           8.112

[07:26] <[Tux]> csv-parser      17.143

[07:36] <Zoffix> New blog post "Hacking on The Rakudo Perl 6 Compiler: Mix Your Fix": http://perl6.party/post/Hacking-on-Rakudo-Perl-6-Compiler-Mix-Your-Fix

[10:51] <lizmat> Zoffix++  # another blog post

[10:52] <lizmat> .tell Zoffix "prove -e './perl6' -vlr t/spec/bar/foo.t" is shorter written as "make t/spec/bar/foo.t"

[10:52] <yoleaux2> lizmat: I'll pass your message to Zoffix.

[10:53] <lizmat> .tell Zoffix Also: on perl6.party: the Run this code button should be disabled on the prove example

[10:53] <yoleaux2> lizmat: I'll pass your message to Zoffix.

[10:53] <jnthn> Damn, I wish I had a fraction of Zoffix' blog-writing energy :)

[10:54] <lizmat> Zoffix: also s/Smartmach/Smartmatch/ just under Make it Saucy

[10:54] <jnthn> I dunno, he seems to blog and the speed of sound :P

[10:55] <timotimo> smarmy-match? smartwatch?

[10:55] <moritz> SM-army match :-)

[10:55] <jnthn> .oO( Did they serve big machs on concorde? )

[10:55] <lizmat> jnthn: or it is just a very smart Mac kernel  :-)

[11:17] <stmuk_> Zoffix++ # blogmeister

[12:06] <dalek> rakudo/nom: 4ee1048 | lizmat++ | src/core/Array.pm:

[12:06] <dalek> rakudo/nom: Make @a.splice return array with correct descriptor

[12:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4ee104857d

[12:06] <lizmat> m: my Int @a; use nqp; dd nqp::p6scalarfromdesc(nqp::getattr(@a.splice,Array,q/$!descriptor/))   # this is now fixed

[12:06] <camelia> rakudo-moar 4b934d: OUTPUT«Any <element> = Any␤»

[12:06] <lizmat> afk&

[14:17] * perlpilot wonders if there are any german citizens who can take advantage of http://prototypefund.de/ to help Perl 6.

[14:24] <psch> doesn't like language development is a thing they particularly care about

[14:24] <psch> +look

[14:39] <Zoffix> lizmat++ thanks fixed.

[14:39] <yoleaux2> 10:52Z <lizmat> Zoffix: "prove -e './perl6' -vlr t/spec/bar/foo.t" is shorter written as "make t/spec/bar/foo.t"

[14:39] <yoleaux2> 10:53Z <lizmat> Zoffix: Also: on perl6.party: the Run this code button should be disabled on the prove example

[14:39] <Zoffix> Other than 'Run this code' button. It'll need modifications to the perl6.party Markdown parser that I'm too lazy to make yet :)

[15:00] <japhb> Zoffix: The bit about "ensure the True key in $sclass is actually there before creating a SetHash out of its value" shows exactly the same code as "ensure the True key in $sclass is actually there before creating a SetHash out of its value"

[15:01] <japhb> Dang it, the second one should be "Here's our offending Any, let's go up a bit and dump the $here right where it's defined"

[15:01] <japhb> I really hate that Macs don't clipboard when you highlight

[15:02] <japhb> It's especially annoying since the SSH app I use *does* do that

[15:02] <japhb> And of course, whenever I'm directly on my Linux boxen ...

[15:03] <geekosaur> you must only use old apps. PRIMARY was copy-on-highlight, CLIPBOARD behaves as Macs and Windows do

[15:06] <Zoffix> japhb++ thanks, fixed.

[15:06] <Zoffix> I guess writing blogs at 3AM is a bad idea :)

[15:06] <japhb> geekosaur: Almost all of my copy-and-paste is from shells, so yeah.  :-)

[15:07] <japhb> Occasionally I copy from a browser window, but that varies depending on OS

[15:08] <japhb> Zoffix: Nah, it's a good idea.  Fixing them the next day is *also* a good idea.

[15:46] <[Coke]> Zoffix- does your bug hunter also search inside custom fields?

[15:46] <yoleaux2> 30 Jul 2016 13:47Z <Zoffix> [Coke]: I see you re-opened with testsneeded tag. Should we test sink warnings (see TimToady's comment on ticket)? Where should we test; in Rakudo's test suit? https://rt.perl.org/Ticket/Display.html?id=128770#ticket-history

[15:47] <[Coke]> I took timtoady's note as "we don't test that (YET)"

[15:47] <[Coke]> if it's something that an RT was opened about, yes we should test it. else why'd we fix it?

[15:48] <Zoffix> [Coke], agreed. But do we test it in roast or in Rakudo?

[15:49] <Zoffix> [Coke], it doesn't search yet. I need to teach ticket fetcher to fetch detailed info for each ticket.

[15:53] <[Coke]> rakudo tests are for very basic stuff, so I assume roast.

[15:53] <[Coke]> Zoffix: ok. it's already close enough to what I was doing, there's no point in my running mine again.

[15:55] <[Coke]> if you look here: https://github.com/coke/rt-six-help/blob/master/summary.p6, anything that has some kind of special handling touches %record<>

[15:55] <[Coke]> buggable, rt

[15:55] <Zoffix> :/

[15:56] <[Coke]> buggable: rt

[15:56] <[Coke]> buggable: rt?

[15:56] <Zoffix> Something's wrong

[15:56] <[Coke]> ah well

[15:56] <dalek> nqp: ac1ea14 | (Pawel Murias)++ | src/vm/js/ (4 files):

[15:56] <dalek> nqp: [js] Improve attribute handling, int/num/str attributes are flattened when serializing.

[15:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ac1ea14dcd

[15:56] <dalek> nqp: f1907d7 | (Pawel Murias)++ | src/vm/js/nqp-runtime/reprs.js:

[15:56] <dalek> nqp: [js] Remove commented out code from the JVM version of the runtime.

[15:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f1907d73b8

[15:56] <Zoffix> buggable, rt

[15:57] <buggable> Zoffix, TOTAL: 1355, UNTAGGED: 611, BUG: 414, LTA: 90, JVM: 62, NYI: 32, SEGV: 28, UNI: 25, RFC: 24, PERF: 19, POD: 14, CONC: 11, @LARRY: 10, TODO: 9, PRECOMP: 8, GLR: 6, BUILD: 5, STAR: 4, WEIRD: 3, LTA ERROR: 3, MOARVM: 2, OSX: 2, FEATURE REQUEST: 1, CPP: 1, SPEC: 1, LIST: 1, LHF: 1, SPESH: 1, DOCS: 1, NATIVECALL: 1   Details: http://bug.perl6.party/1470067027.html

[15:57] <Zoffix> I guess it just likes me more :P

[15:57] <Zoffix> For some reason I don't see your commands in the debug log. Can you try again?

[15:59] <[Coke]> your count is off.

[15:59] <[Coke]> buggable, rt

[15:59] <Zoffix> Oh. I think it's because you're using an "invalid" nick :)

[15:59] <[Coke]> you report 1355. all tickets is 1351.

[15:59] <Zoffix> Or something or other

[15:59] <[Coke]> and I would recommend skipping stalled.

[15:59] <Zoffix> [Coke], I closed a few since last night, which is when the db was generated

[15:59] <Zoffix> I've not set it to run in a cron yet

[15:59] <Zoffix> buggable, rt

[16:00] <[Coke]> ... it's not live? oh.

[16:00] <buggable> Zoffix, TOTAL: 1355, UNTAGGED: 611, BUG: 414, LTA: 90, JVM: 62, NYI: 32, SEGV: 28, UNI: 25, RFC: 24, PERF: 19, POD: 14, CONC: 11, @LARRY: 10, TODO: 9, PRECOMP: 8, GLR: 6, BUILD: 5, STAR: 4, WEIRD: 3, LTA ERROR: 3, MOARVM: 2, OSX: 2, FEATURE REQUEST: 1, CPP: 1, SPEC: 1, LIST: 1, LHF: 1, SPESH: 1, DOCS: 1, NATIVECALL: 1   Details: http://bug.perl6.party/1470067212.html

[16:01] <[Zoffix]> buggable, rt

[16:06] <Zoffix> What's is nodal  ?

[16:07] <timotimo> it's about what >>. method calls will do when they find an iterable

[16:07] <timotimo> compare:

[16:07] <timotimo> m: ((1, 2, 3), (2, 3), (3))>>.elems.perl.say

[16:07] <camelia> rakudo-moar 4ee104: OUTPUT«(3, 2, 1)␤»

[16:07] <timotimo> m: ((1, 2, 3), (2, 3), (3))>>.uc.perl.say

[16:07] <camelia> rakudo-moar 4ee104: OUTPUT«($("1", "2", "3"), $("2", "3"), "3")␤»

[16:08] <timotimo> elems is nodal, uc isn't

[16:08] * Zoffix doesn't get it.

[16:08] <Zoffix> m: say (1, 2, 3).uc

[16:08] <camelia> rakudo-moar 4ee104: OUTPUT«1 2 3␤»

[16:08] <Zoffix> m: say (1, 2, 3).elems

[16:08] <camelia> rakudo-moar 4ee104: OUTPUT«3␤»

[16:08] <Zoffix> ¯\_(ツ)_/¯

[16:09] <Zoffix> m: ((1, 2, 3), (2, 3), (3))>>.uc[0].elems.say

[16:09] <camelia> rakudo-moar 4ee104: OUTPUT«3␤»

[16:10] <TimToady> if elems weren't nodal, you'd get ((1,1,1), (1,1), 1)

[16:10] <yoleaux2> 31 Jul 2016 03:22Z <gfldex> TimToady: should this work? m: say 2 ⁽²⁺³⁾

[16:10] <Zoffix> Thanks.

[16:10] <psch> m: sub myuc is nodal { $^a.uc }; say (("a",),)>>.uc; say (("a",),)>>.&myuc

[16:10] <camelia> rakudo-moar 4ee104: OUTPUT«((A))␤((A))␤»

[16:10] <psch> well, i suppose that's cause it chains into non-nodal?

[16:11] <Zoffix> m: ((1, 2, 3), (2, 3), (3))>>.&[+](1).say

[16:11] <camelia> rakudo-moar 4ee104: OUTPUT«((2 3 4) (3 4) 4)␤»

[16:11] <Zoffix> I didn't realize >> descended like that

[16:11] <psch> m: sub myuc is nodal { $^a.trans(['a'..'z'] => ['A'..'Z']) }; say (("a",),)>>.uc; say (("a",),)>>.&myuc

[16:11] <camelia> rakudo-moar 4ee104: OUTPUT«((A))␤((A))␤»

[16:11] <Zoffix> m: ((1, 2, (45, (72,)), 3), (2, 3), (3))>>.&[+](1).say

[16:11] <camelia> rakudo-moar 4ee104: OUTPUT«((2 3 (46 (73)) 4) (3 4) 4)␤»

[16:11] <Zoffix> Amazing

[16:12] <psch> m: sub myuc is nodal { "A" }; say (("a",),)>>.uc; say (("a",),)>>.&myuc

[16:12] <camelia> rakudo-moar 4ee104: OUTPUT«((A))␤Too many positionals passed; expected 0 arguments but got 1␤  in sub myuc at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[16:12] <psch> m: sub myuc($) is nodal { "A" }; say (("a",),)>>.uc; say (("a",),)>>.&myuc

[16:12] <camelia> rakudo-moar 4ee104: OUTPUT«((A))␤((A))␤»

[16:12] <Zoffix> m: say gather { ((1, 2, (45, (72,)), 3), (2, 3), (3))>>.&take }

[16:12] <camelia> rakudo-moar 4ee104: OUTPUT«(1 2 45 72 3 2 3 3)␤»

[16:12] <Zoffix> \o/

[16:12] <psch> well hm

[16:12] <jnthn> m: say gather ((1, 2, (45, (72,)), 3), (2, 3), (3))>>.&take

[16:12] <camelia> rakudo-moar 4ee104: OUTPUT«(1 2 45 72 3 2 3 3)␤»

[16:12] <jnthn> No need for le curlies

[16:13] <timotimo> don't forget >> will one day mangle up your order

[16:13] <TimToady> yes, take is a side effect

[16:14] <TimToady> we'll need to think about that

[16:15] * TimToady afks

[16:15] <timotimo> so that the users don't have to?

[16:15] <TimToady> .oO("Afk and you will recede.")

[16:15] <jnthn> :D

[16:15] <Zoffix> m: use MONKEY-TYPING; augment class List { method foo  { gather for ^3 { take self[-2 .. 0]; } } }; <a b c>.foo

[16:15] <camelia> rakudo-moar 4ee104: ( no output )

[16:15] <Zoffix> m: use MONKEY-TYPING; augment class List { method foo  { gather for ^3 { take self[-2 .. 0]; } } }; <a b c>.rotor: 1 => -2

[16:16] <timotimo> m: class List is List { }

[16:16] <camelia> rakudo-moar 4ee104: OUTPUT«(timeout)WARNING: unhandled Failure detected in DESTROY:␤Index out of range. Is: -247, should be in 0..Inf␤  in method sink-all at gen/moar/m-CORE.setting line 1␤  in method sink-all at /home/camelia/rakudo-m-inst-2/share/perl6/runtime/CORE.setting.m…»

[16:16] <camelia> rakudo-moar 4ee104: ( no output )

[16:16] * Zoffix doesn't get why the first one doesn't produce the same result as the second one

[16:17] <timotimo> m: (<a b c>.rotor: 1 => -2).WHAT.perl.say

[16:17] <camelia> rakudo-moar 4ee104: OUTPUT«Seq␤»

[16:17] <timotimo> ^- perhaps that's why?

[16:17] <Zoffix> m: use MONKEY-TYPING; augment class List { method foo  { gather for ^3 { take self[-2 .. 0]; } } }; (<a b c>.foo).WHAT.perl.say

[16:17] <camelia> rakudo-moar 4ee104: OUTPUT«Seq␤»

[16:18] <timotimo> tbh, i don't quite see why that method foo would even be called at all ...

[16:18] <Zoffix> From what I see, my example duplicates the .rotor code (the path that triggers the bug). gather with a for loop

[16:19] <Zoffix> ... that takes an out of index self[-2 .. whategver]

[16:19] <timotimo> well, ok, but you aren't even calling the foo method

[16:19] <timotimo> oh

[16:19] <timotimo> m: <a b c>.rotor: 1 => -2

[16:19] <timotimo> that's why

[16:19] <Zoffix> Hm?

[16:19] <camelia> rakudo-moar 4ee104: OUTPUT«(timeout)WARNING: unhandled Failure detected in DESTROY:␤Index out of range. Is: -36, should be in 0..Inf␤  in block <unit> at <tmp> line 1␤␤WARNING: unhandled Failure detected in DESTROY:␤Index out of range. Is: -35, should be in 0..Inf␤  in b…»

[16:20] <timotimo> no need to augment the class at all for this to asplode

[16:20] <timotimo> BBL

[16:20] <Zoffix> Yeah, I know. I'm trying to fix it. method foo is my golf

[16:20] <timotimo> oh

[16:21] <timotimo> well, yeah, apparently rotor doesn't check for out-of-range-ness, or negative proceeding

[16:21] <timotimo> so it infiniloops because it'll never reach the end

[16:25] <Zoffix> k, reproduced :)

[16:25] <Zoffix> m: use MONKEY-TYPING; augment class List { method foo (*@cycle)  { gather for (@cycle xx *).cache { take self[-2 .. 0]; } } }; <a b c>.foo: 1 => -2

[16:25] <camelia> rakudo-moar 4ee104: OUTPUT«(timeout)WARNINGS for <tmp>:␤Useless use of @cycle in sink context (line 1)␤WARNING: unhandled Failure detected in DESTROY:␤Index out of range. Is: -1, should be in 0..Inf␤  in code  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤WARNING:…»

[16:34] <Zoffix> And that sink warning looks suspicious too

[16:35] <psch> m: for (<a b> xx 10) { }

[16:35] <camelia> rakudo-moar 4ee104: ( no output )

[16:36] <Zoffix> m: my @a = 1; for (@a xx *).cache { last if ++$ }

[16:36] <camelia> rakudo-moar 4ee104: OUTPUT«WARNINGS for <tmp>:␤Useless use of @a in sink context (line 1)␤»

[16:36] <Zoffix> m: my @a = 1; for (@a xx *) { last if ++$ }

[16:36] <camelia> rakudo-moar 4ee104: OUTPUT«WARNINGS for <tmp>:␤Useless use of @a in sink context (line 1)␤»

[16:38] <psch> m: my @a = 1; for (@a xx *) { }

[16:38] <psch> oh duh

[16:38] <psch> i'm really being stupid today >_>

[16:38] <camelia> rakudo-moar 4ee104: OUTPUT«(timeout)WARNINGS for <tmp>:␤Useless use of @a in sink context (line 1)␤»

[16:38] <psch> m: my @a = 1; for (@a xx 1) { }

[16:38] <camelia> rakudo-moar 4ee104: OUTPUT«WARNINGS for <tmp>:␤Useless use of @a in sink context (line 1)␤»

[16:43] <Zoffix> Ticketed https://rt.perl.org/Ticket/Display.html?id=128802

[16:50] <timotimo> .u í

[16:50] <yoleaux2> U+00ED LATIN SMALL LETTER I WITH ACUTE [Ll] (í)

[17:01] <AlexDaniel> bisect: my @a = 1; for (@a xx 1) { }

[17:01] <bisectable> AlexDaniel: Exit code is 0 on both starting points (good=2015.12 bad=4ee1048), bisecting by using the output

[17:01] <bisectable> AlexDaniel: bisect log: https://gist.github.com/144cfff35f98da3f9b3f5891b1c61837

[17:01] <bisectable> AlexDaniel: (2016-07-26) https://github.com/rakudo/rakudo/commit/5334cb7

[17:01] <AlexDaniel> seems like there are several bug reports for this commit :)

[17:03] <psch> well, the whole :WANTED stuff seems to waterbed really hard

[17:03] <psch> as in, we had wrong sink warnings before that patch as well, just different ones

[17:05] <timotimo> it only doesn't waterbed when it's completely fixed :P

[17:05] <timotimo> or "correct" more like

[17:12] <Zoffix> m: X::OutOfRange.new(what => ".rotor position is", got => -2, range => "0..Inf", comment => '(ensure the negative gap is not larger than the length of the sublist)').throw

[17:12] <camelia> rakudo-moar 4ee104: OUTPUT«.rotor position is out of range. Is: -2, should be in 0..Inf; (ensure the negative gap is not larger than the length of the sublist)␤  in block <unit> at <tmp> line 1␤␤»

[17:13] <Zoffix> How come when I throw that from .rotor it has a ==SORRY== in the output? Any way to get rid of that, since it's not a compile-time error?

[17:13] <timotimo> is our CTE so good?

[17:13] * Zoffix tries to fail() it instead of .throw

[17:15] <gfldex> will :tolerance ever be implemented on infix:<=~=> ?

[17:15] <gfldex> it's in the docs as NYI

[17:16] <Zoffix> I think the decision is wider than just infix =~= and has to be made about how adverbs apply to all chainable operators

[17:16] <Zoffix> buggable, rt

[17:16] <Zoffix> There's a ticket with it somewhere

[17:16] <buggable> Zoffix, TOTAL: 1355, UNTAGGED: 611, BUG: 414, LTA: 90, JVM: 62, NYI: 32, SEGV: 28, UNI: 25, RFC: 24, PERF: 19, POD: 14, CONC: 11, @LARRY: 10, TODO: 9, PRECOMP: 8, GLR: 6, BUILD: 5, STAR: 4, WEIRD: 3, LTA ERROR: 3, MOARVM: 2, OSX: 2, FEATURE REQUEST: 1, CPP: 1, SPEC: 1, LIST: 1, LHF: 1, SPESH: 1, DOCS: 1, NATIVECALL: 1   Details: http://bug.perl6.party/1470071786.html

[17:16] <Zoffix> Don't see it in the list....

[17:17] <Zoffix> Here: https://rt.perl.org/Ticket/Display.html?id=128210#ticket-history

[17:18] <Zoffix> "TimToady	MasterDuke: I don't really consider it a bug, though arguably we should allow adverbs on chaining ops that are not, in fact, being chained"

[17:20] <Zoffix> fail() too has a ==SORRY== :/

[17:31] <gfldex> m: my Rat $a .= new; $a = 3.14; $a .= round;

[17:31] <camelia> rakudo-moar 4ee104: OUTPUT«Type check failed in assignment to $a; expected Rat but got Int (3)␤  in block <unit> at <tmp> line 1␤␤»

[17:32] <Zoffix> m: say "meow"; my $m = (1,2 X~ ('' X~ '')).first: *.IO.f;

[17:32] <camelia> rakudo-moar 4ee104: OUTPUT«meow␤===SORRY!===␤Cannot invoke this object (REPR: Uninstantiable; Callable)␤»

[17:32] <gfldex> so i can't just round a Rat?

[17:33] <Zoffix> This also has a runtime SORRY... I'll just proceed with my ==SORRY== and try to figure out spurious SORRIES later

[17:33] <Zoffix> gfldex, you can. You're attempting to store an Int inside a Rat

[17:33] <Zoffix> m: my Rat $a .= new; $a = 3.14; $a = $a.round.Rat; dd $a

[17:33] <camelia> rakudo-moar 4ee104: OUTPUT«Rat $a = 3.0␤»

[17:36] <gfldex> i really mean "just". I can't use the .= form to round the value in that container because that container happens to have a type constraint even tho the value will fit perfectly fine.

[17:37] <Zoffix> m: my Rat $foo = 42

[17:37] <camelia> rakudo-moar 4ee104: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Cannot assign a literal of type Int (42) to a variable of type Rat. You can declare the variable to be of type Real, or try to coerce the value with 42.Rat or Rat(42), or just write the value as 42.0␤at <t…»

[17:37] <gfldex> m: my $a = 1/2; $a = 3.14; $a .= round; say $a;

[17:37] <camelia> rakudo-moar 4ee104: OUTPUT«3␤»

[17:38] <Zoffix> m: my Rat $a .= new; $a = 3.14; $a .= round: 1.0; say $a

[17:38] <camelia> rakudo-moar 4ee104: OUTPUT«3␤»

[17:41] <Zoffix> m: <meow>.rotor: 1 => -1

[17:41] <camelia> rakudo-moar 4ee104: OUTPUT«(timeout)»

[17:58] <dalek> rakudo/nom: 4e08af5 | (Zoffix Znet)++ | src/core/List.pm:

[17:58] <dalek> rakudo/nom: Throw when using negative gap outside of .rotor's range

[17:58] <dalek> rakudo/nom:

[17:58] <dalek> rakudo/nom: Fixes RT#127437

[17:58] <dalek> rakudo/nom:

[17:58] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127437

[17:58] <dalek> rakudo/nom: Note: currently the error message contains a ==SORRY== in the output, wrongly

[17:58] <dalek> rakudo/nom: indicating a runtime error is compile-time. That issue is more widespread

[17:58] <dalek> rakudo/nom: and also appears in RT#128161 and RT#126218

[17:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4e08af5f04

[17:58] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128161

[17:58] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126218

[18:09] <gfldex> m: my Real $a = 1/2; dd $a; $a = 3.14; dd $a; $a .= round; dd $a;

[18:09] <camelia> rakudo-moar 4ee104: OUTPUT«Rat $a = 0.5␤Rat $a = 3.14␤Int $a = 3␤»

[18:11] <Zoffix> lizmat++ make t/spec/some-test.t fudges :) I used to do make spectest, then abort it and then run prove :) So much simpler with just make :)

[18:12] <Zoffix> m: say Rat ~~ Real, Int ~~ Real, Int ~~ Rat

[18:12] <camelia> rakudo-moar 4ee104: OUTPUT«TrueTrueFalse␤»

[18:14] <dalek> roast: 53bf79d | (Zoffix Znet)++ | S32-list/rotor.t:

[18:14] <dalek> roast: using negative gap that lands past the list's head throws

[18:14] <dalek> roast:

[18:14] <dalek> roast: RT#127437

[18:14] <dalek> roast: review: https://github.com/perl6/roast/commit/53bf79d497

[18:14] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127437

[18:45] <travis-ci> Rakudo build errored. Zoffix Znet 'Remove trailing whitespace'

[18:45] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/148949751 https://github.com/rakudo/rakudo/compare/4ee104857de9...5c5ef162e4bd

[18:45] <buggable> travis-ci, one build failed but NOT due to the timeout.

[18:46] <Zoffix> oh shit

[18:47] <Zoffix> buggable++ pointing out things :D

[18:48] <Zoffix> (the fail is due to It's github connectivity issues, not the code)

[18:50] <timotimo> m(

[18:51] <[Coke]> Zoffix: I use prove -v -e t/fudgeandrun <list of tests>

[18:54] <Zoffix> https://travis-ci.org/rakudo/rakudo/builds/148949751

[18:54] <buggable> Zoffix, 6 builds failed. ONLY 0 due to the timeout

[18:57] <Zoffix> https://travis-ci.org/rakudo/rakudo/builds/148949751

[18:57] <buggable> Zoffix, 6 builds failed. ONLY 0 due to the timeout

[18:57] <Zoffix> :/

[18:57] <Zoffix> Stupid robot

[18:59] <Zoffix> https://travis-ci.org/rakudo/rakudo/builds/148949751

[18:59] <buggable> Zoffix, 6 builds failed. NONE due to the timeout

[19:32] <gfldex> lizmat: that was the week that was: https://gist.github.com/gfldex/645935787bd57787a20f83edfd33eb92

[19:32] <lizmat> gfldex++

[19:34] <gfldex> lizmat: operator.pod6 compiles too now with a a few fixes

[19:35] <lizmat> gfldex: oki

[19:56] <Zoffix> m: say (^2).List eqv (0, 1).List

[19:56] <camelia> rakudo-moar 5c5ef1: OUTPUT«True␤»

[19:56] <Zoffix> m: say (0, 1).List.rotor(1.5)

[19:56] <camelia> rakudo-moar 5c5ef1: OUTPUT«((0 1))␤»

[19:56] <Zoffix> m: say (^2).List.rotor(1.5)

[19:56] <camelia> rakudo-moar 5c5ef1: OUTPUT«This type cannot unbox to a native integer: P6opaque, Rat␤  in block <unit> at <tmp> line 1␤␤»

[20:00] * Zoffix looks up "reify" in a dictionary

[20:04] <masak> Zoffix: "make real", "realize"

[20:05] <masak> in the context of iterators, it means something like "produce [an element]"

[20:05] <masak> this is important in Perl 6 because lists are lazy

[20:06] <masak> so "reify" here signifies the transition from something that was lazy to something that has to account for its actual elements

[20:06] <masak> (or parts of them)

[20:09] <masak> 'night, #perl6

[20:11] <Zoffix> thanks. night

[20:18] <lizmat> gfldex: re operator.pod6 , do you mean the examples ?

[20:18] <gfldex> yes

[20:19] <gfldex> lizmat: there are plenty of examples in the docs that have never been tested.

[20:19] <lizmat> gfldex: gotcha

[20:31] <dalek> rakudo/nom: 59f040d | (Zoffix Znet)++ | src/core/List.pm:

[20:31] <dalek> rakudo/nom: Make Range.rotor with Rat arguments not crash

[20:31] <dalek> rakudo/nom:

[20:31] <dalek> rakudo/nom: Fixes RT#127424

[20:31] <dalek> rakudo/nom:

[20:31] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127424

[20:31] <dalek> rakudo/nom: Rationale for coersion rather than throwing: .rotor's arguments refer to

[20:31] <dalek> rakudo/nom: list indexes; (^10)[1 .. 2.5] coerses 2.5 to Int, so it makes sense to

[20:31] <dalek> rakudo/nom: coerce .rotor's argument too.

[20:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/59f040d2b8

[20:32] <dalek> roast: 7ff9f7c | (Zoffix Znet)++ | S32-list/rotor.t:

[20:32] <dalek> roast: Non-Int numerals as arguments to rotor get coersed to Int

[20:32] <dalek> roast:

[20:32] <dalek> roast: RT#127424

[20:32] <dalek> roast: review: https://github.com/perl6/roast/commit/7ff9f7c625

[20:32] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127424

[21:06] <dalek> roast: 910e689 | (Zoffix Znet)++ | S32-list/rotor.t:

[21:06] <dalek> roast: Add plan to subtest

[21:06] <dalek> roast: review: https://github.com/perl6/roast/commit/910e689e9c

[21:11] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2016/08/01/2016-31-an-end-of-an-era/

[21:16] <mst> lizmat: make sure to recycle the nails

[21:16] <mst> and the perch

[21:16] <lizmat> .oO( Not Quite Parrot )

[21:16] <dalek> nqp: 4e545bd | (Pawel Murias)++ | src/vm/js/nqp-runtime/reprs.js:

[21:16] <dalek> nqp: [js] Remove debugging leftover.

[21:16] <dalek> nqp: review: https://github.com/perl6/nqp/commit/4e545bdd9b

[21:16] <dalek> nqp: 8815ae3 | (Pawel Murias)++ | src/HLL/Grammar.nqp:

[21:16] <dalek> nqp: Reference NQPCursor directly instead of using a $cursor_class variable.

[21:16] <dalek> nqp:

[21:16] <dalek> nqp: Attribute lookups with a class literal are faster.

[21:16] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8815ae3e84

[21:18] <pmurias> jnthn: was there a reason for that variable I removed in the last commit?

[21:19] <jdv79> lizmat: nice

[21:19] <timotimo> how old was the commit that declared it?

[21:19] <Zoffix> lizmat++ good weekly

[21:19] <Zoffix> I was a bit confused why it came out today... then realized it was Monday (long weekend over here in Canukistan)

[21:21] <lizmat> hehe....

[21:22] <lizmat> actually, I'm thinking of moving it to Sunday evening

[21:22] <dalek> rakudo/nom: 67b6544 | (Zoffix Znet)++ | src/core/Exception.pm:

[21:22] <dalek> rakudo/nom: Do not print 'Actually thrown at:' part of exception when it's empty

[21:22] <dalek> rakudo/nom:

[21:22] <dalek> rakudo/nom: Fixes RT#127425

[21:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/67b6544e48

[21:22] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127425

[21:23] <dalek> roast: 8aac698 | (Zoffix Znet)++ | integration/error-reporting.t:

[21:23] <dalek> roast: "Actually thrown at" portion of exception not printed when empty

[21:23] <dalek> roast:

[21:23] <dalek> roast: RT#127425

[21:23] <dalek> roast: review: https://github.com/perl6/roast/commit/8aac698afa

[21:23] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127425

[21:23] <lizmat> Zoffix: I think we have a case of wetness here (as the opposite of DRY)

[21:23] <pmurias> timotimo: git blame solved the puzzle ;)

[21:24] <lizmat> m: my $a = 42; if $a and $a.Str -> $as { dd $as }   # did you know you can do this ?

[21:24] <camelia> rakudo-moar 59f040: OUTPUT«Str $as = "42"␤»

[21:27] <travis-ci> Rakudo build passed. Zoffix Znet 'Make Range.rotor with Rat arguments not crash

[21:27] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/149002118 https://github.com/rakudo/rakudo/compare/5c5ef162e4bd...59f040d2b8b6

[21:35] <lizmat> good night, #perl6-dev!

[21:37] <timotimo> pmurias: i want to know, too :)

[21:37] <Zoffix> night

[21:38] <dalek> rakudo/nom: e411e5d | (Zoffix Znet)++ | src/core/Exception.pm:

[21:38] <dalek> rakudo/nom: Reword to avoid method call duplication

[21:38] <dalek> rakudo/nom:

[21:38] <dalek> rakudo/nom: lizmat++

[21:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e411e5dd37

[21:41] <jnthn> pmurias: Maybe once upon a time it was faster. Agree it sure won't be now :)

[21:42] <jnthn> pmurias: Or mebbe it was a bootstrapping workaround that is no longer needed and it used to point to some weirder lookup. I dunno. :)

[21:42] <jnthn> Either way, pmurias++ for spotting/doing the cleanup :)

[21:46] <AlexDaniel> Zoffix: not sure how to say this, but is there any way to opt out from being thanked all the time? I mean, I understand your positive intent, but it reminds me of the copy-pasted stuff you get when interacting with businesses… feels cheap and redundant. There are quite some bug reports submitted by me, and it seems like you started working on the tickets with this awesome monster pace (cool!), so by opting out I hope to reduce the

[21:46] <AlexDaniel> amount of “thank you thank you thank you thank you”… Thank you!

[21:50] <Zoffix> Sure. If in the future I ever notice a ticket is from you, I'll be sure to tell you to go fuck yourself instead of thanking when I close it with the commit and test links.

[21:51] <AlexDaniel> well, that's not what I meant, but I'm ok with that too.

[21:52] <b2gills> Zoffix: If somebody just joined this channel before that last comment, they would get the wrong idea about this community

[21:55] <Zoffix> b2gills, I don't really care. It's a long weekend. I spent most of my personal time fixing bugs for free. And at the end of the day someone is telling me they have an issue with my saying 'Thank you for the report' when I resolve the bugs.

[21:56] <Zoffix> Set up an email filter if it bothers you that much, dick.

[21:59] <AlexDaniel> no matter how much I love Zoffix an all what he does, we don't seem to get along very well…

[22:05] <jnthn> tbh, if you'd said the same to me I'd have told you to take a hike too.

[22:06] <AlexDaniel> then maybe I should've said that, or maybe I should've phrased it better…

[22:06] <jnthn> Not saying it woulda been better.

[22:06] <AlexDaniel> shouldn't*

[22:16] <jnthn> 'night

[22:19] <travis-ci> Rakudo build passed. Zoffix Znet 'Do not print 'Actually thrown at:' part of exception when it's empty

[22:19] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/149016236 https://github.com/rakudo/rakudo/compare/59f040d2b8b6...67b6544e4837

[23:20] <AlexDaniel> timotimo: interestingly, I stumbled upon :merge issue on the next day after you attempted to fix it. Is there any hope? I'm currently rewriting *able bots and it seems like :merge is needed.

[23:43] <timotimo> AlexDaniel: you might be able to write the code based on what i outlined in the ticket
