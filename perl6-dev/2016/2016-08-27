[05:54] <travis-ci> Rakudo build errored. lizmat 'Merge pull request #852 from awwaiid/repl-simplify-catching

[05:54] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/155479040 https://github.com/rakudo/rakudo/compare/763d6787da73...3a294e94d646

[05:54] <buggable> â˜  [travis build above] One job failed but NOT due to the timeout.

[05:56] <lizmat> "No output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself."

[05:57] <lizmat> sounds like timeout to me

[06:57] <lizmat> afk&

[09:40] <nebuchadnezzar> hello

[09:40] <timotimo> greetings

[09:41] <nebuchadnezzar> maybe this chan is the good place to speak about tests hangs during rakudo build on arm64?

[09:42] <timotimo> sounds good

[09:42] <nebuchadnezzar> dod made some tests on an arm64 box: https://lists.alioth.debian.org/pipermail/pkg-rakudo-devel/2016-August/000914.html

[09:50] <timotimo> can you ask them to try a moar with libffi instead of dyncall?

[09:52] <nebuchadnezzar> ho, libffi was only use on mipsel

[09:52] <timotimo> hm?

[09:53] <nebuchadnezzar> timotimo: I'm asking

[09:54] <timotimo> i can't parse that question

[09:55] <nebuchadnezzar> sorry, it was not a question, I was thinking loudly with my fingers ;-)

[09:55] <nebuchadnezzar> we just need to pass --has-libffi at Configure.pl, right?

[09:55] <timotimo> i think so

[09:58] <nebuchadnezzar> looks like qemu-system-arm could emulate aarch64

[10:00] <timotimo> i didn't know aarch is arm

[10:01] <nebuchadnezzar> it is https://wiki.debian.org/Arm64Port

[10:01] <timotimo> cool

[11:12] <MasterDuke> timotimo: looks like you saw that the Coverity scans are actually up to date

[11:13] <MasterDuke> oops, that would have made more sense in #perl6

[11:18] <mst> timotimo: so, if I was to attempt to write up what our install structure currently looks like, and go from there to what people might want to do instead

[11:18] <mst> is there an existing place that would make sense to put it?

[11:18] <mst> I'm tempted to go for a forkable public gist tbh

[11:19] <timotimo> that sounds sensible to me

[11:34] <mst> I'm a trifle sleep deprived atm so am -thinking- about it but probably not going to manage to write anything down today

[11:34] <mst> except maybe some shitty notes in a local text file or something

[11:35] <timotimo> i'm also a bit sleep deprived

[11:37] * mst had a 6.30am flight

[11:37] <mst> so instead of sleeping I double checked everything and wrote that "how to rakudo" tweet

[15:35] <[Tux]> This is Rakudo version 2016.08.1-46-g6a8278c built on MoarVM version 2016.08

[15:35] <[Tux]> csv-ip5xs       10.494

[15:35] <[Tux]> test            15.739

[15:35] <[Tux]> test-t           8.024

[15:35] <[Tux]> csv-parser      17.138

[15:53] <japhb> [Tux]: Any idea what commit slowed it down?

[16:06] <[Tux]> can be a fluke, I'll test again

[16:07] <[Tux]> S/test/time/

[16:10] <dalek> rakudo/lexical_module_load: eac3d01 | niner++ | src/Perl6/World.nqp:

[16:10] <dalek> rakudo/lexical_module_load: Fix importing globals nested in imported packages.

[16:10] <dalek> rakudo/lexical_module_load:

[16:10] <dalek> rakudo/lexical_module_load: Given a diamond shaped dependency tree like A -> N::B, A -> N::C, N::B ->

[16:10] <dalek> rakudo/lexical_module_load: N::D, N::C -> N::D lexical import of N::D into N::B and N::C caused the

[16:10] <dalek> rakudo/lexical_module_load: N namespace to be declared lexically in both import sites. Therefore

[16:10] <dalek> rakudo/lexical_module_load: N::B and N::C got added to the lexically scoped package and missing from

[16:10] <dalek> rakudo/lexical_module_load: the comp units globals.

[16:10] <dalek> rakudo/lexical_module_load:

[16:10] <dalek> rakudo/lexical_module_load: Fix by upgrading lexicaly scoped packages to full globals when our

[16:10] <dalek> rakudo/lexical_module_load: scoped symbols are added to them.

[16:10] <dalek> rakudo/lexical_module_load: review: https://github.com/rakudo/rakudo/commit/eac3d01950

[16:10] <[Tux]> This is Rakudo version 2016.08.1-46-g6a8278c built on MoarVM version 2016.08

[16:10] <[Tux]> csv-ip5xs       10.306

[16:10] <[Tux]> test            15.384

[16:10] <[Tux]> test-t           7.415

[16:10] <[Tux]> csv-parser      16.441

[16:10] <nine> On the airplane I finally got enough quiet time to figure that one out

[16:10] <[Tux]> nine++

[16:24] <nine> Oh, intriguing question: when use statements are really lexical, should an EVAL in the same scope see the use'd packages? Like: use A; EVAL 'A'

[16:47] <awwaiid> nine: why wouldn't EVAL see A?

[16:47] <awwaiid> especially if lexical

[16:47] <awwaiid> it can see other lexical vars

[17:05] * awwaiid continues to try to understand ctxsave, $*CTXSAVE, $*MAIN_CTX, ... . Making progress.

[17:13] <nine> awwaiid: oh, you're right. It _can_ see other lexicals. Which makes me wonder why it can't see A

[18:22] <arnsholt> nine: OOC, are we still doing precomp by forking a rakudo subprocess?
