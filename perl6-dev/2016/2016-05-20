[13:09] <AlexDaniel> if somebody is not following #perl6, see this http://irclog.perlgeek.de/perl6/2016-05-20#i_12514921

[13:09] <AlexDaniel> bisect: exit 1 if (^‚àû).grep({ last })[5] // 0 == 4 # RT 128181

[13:09] <bisectable> AlexDaniel: (2016-03-18) https://github.com/rakudo/rakudo/commit/6d120ca

[13:38] <MadcapJake> üëç that is nifty!

[13:40] <[Coke]> AlexDaniel++

[13:45] <btyler> AlexDaniel: great work! that's really slick

[13:46] <AlexDaniel> ;)

[13:46] <timotimo> i wanted to build something similar in the past where it would list all outputs of a given piece of code in all versions

[13:49] <AlexDaniel> in all 1000 versions? :O

[13:49] <timotimo> obviously it ought to collapse consecutive versions that have the same output :)

[13:51] <AlexDaniel> actually, running some code 1000 times will take less than one minute

[13:51] <AlexDaniel> not a problem at all

[13:53] <AlexDaniel> perhaps I can even implement that in bisectable

[13:54] <[Coke]> is it running safe mode?

[13:55] <AlexDaniel> it is using restricted setting, yes

[14:02] <[Coke]> noice.

[14:03] <perlpilot> AlexDaniel++

[14:08] <perlpilot> AlexDaniel: do you auto-build a new rakudo on commit, or batch them up at some point?

[14:09] <AlexDaniel> perlpilot: I do nothing right now

[14:11] <AlexDaniel> perlpilot: it is built for batch processing though, so I can run it again at any point and it will build remaining commits

[14:12] <AlexDaniel> initially I thought that I will just add it to cron and that's it, but now I'm not sure

[14:12] <AlexDaniel> perlpilot: how often would people want to test the latest commits?

[14:21] <perlpilot> Depends.   Many times I've noticed people exercising a bug that was committed within a few hours.  But I have no idea how often that happens compared past bugs/behaviors.

[14:22] <perlpilot> I think running from cron would be find.   You decide what time frame you want to handle and as long as it's well-known, all is well.

[14:22] <perlpilot> s/find/fine/

[14:26] <perlpilot> AlexDaniel: besides, if you build rakudos once a day (or whatever) and people start complaining that they have to wait a day to bisect behaviors instead of doing it immediately, that'll tell you how often people want the most up-to-date commits.

[14:28] <AlexDaniel> perlpilot: well, at any time you can ping me and I'll just start it manually

[14:29] <AlexDaniel> perlpilot: it builds like 7 commits every 6 minutes

[14:29] <AlexDaniel> perlpilot: so just a tiny bit of patience will be enough :)

[14:41] <[Tux]> This is Rakudo version 2016.04-208-ge39ce3d built on MoarVM version 2016.04-134-g9879233

[14:41] <[Tux]> test            20.786

[14:41] <[Tux]> test-t          13.283

[14:41] <[Tux]> csv-parser      38.496

[14:50] <perlpilot> AlexDaniel: Is bisect able to tell us which commits it knows about?  That would be useful to know.

[14:51] <perlpilot> especially if there are any pre-6.c bugs that people try to bisect :)

[14:52] <timotimo> you can use exit 0 and exit 1 as the code to get the first and last commit :P

[14:52] <perlpilot> AlexDaniel: oh!  If it runs all the way to the first commit it knows about, does it report that commit or say something about not being able to find a commit in the set it knows about

[14:52] <perlpilot> ?

[14:53] <perlpilot> timotimo: I guess that answers my question :)

[14:53] <timotimo> there's a feature request that it'd point out that the commit is the earliest or newest commit it knows about

[14:55] <AlexDaniel> perlpilot: I can probably build another thousand of commits before v6.c :)

[15:24] <nine> What's the best way to debug a java.lang.NullPointerException in perl6-j?

[15:31] <brrt> jdb?

[15:32] <brrt> not a very good debugger, i'll grant

[15:32] <brrt> but suitable

[15:32] <nine> Currently trying to figure out how to use it

[15:32] * brrt has all but forgotten

[15:32] <brrt> i think you have to specifically attach somehow

[15:33] <nine> Well it seems to need a small patch, same as gdb

[15:36] <dalek> rakudo/nom: dfac26d | niner++ | src/core/CompUnit/PrecompilationRepository.pm:

[15:36] <dalek> rakudo/nom: Fix debuggers hanging when the process needs to precompile

[15:36] <dalek> rakudo/nom:

[15:36] <dalek> rakudo/nom: We try to use the same perl6 executable for precompilation as we use for

[15:36] <dalek> rakudo/nom: running the main program. That's not a good strategy if the main program

[15:36] <dalek> rakudo/nom: is running in a debugger as we'd start up a debugger for the precompilation,

[15:36] <dalek> rakudo/nom: too and those conflict on tty or tcp ports.

[15:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dfac26dcc3

[15:37] <nine> Soo..how can I tell this jdb to actually stop on a NPE?

[15:39] <brrt> uhm...

[15:40] <brrt> nine++ omg

[15:40] <brrt> i've needed that patch for /so/ long

[15:43] <brrt> catch is the thing, i think

[15:44] <nine> Cool: now I know it appears at org.perl6.nqp.sixmodel.SerializationReader.deserialize(), line=106

[15:45] <nine> And that line is about code refs, which is likely considering the changes I made

[16:41] <dalek> rakudo/nom: c59e4dc | niner++ | src/core/CompUnit/PrecompilationRepository.pm:

[16:41] <dalek> rakudo/nom: Fix trying to load an outdated precomp file

[16:41] <dalek> rakudo/nom:

[16:41] <dalek> rakudo/nom: When a dependency of a dependency is outdated, we failed to recompile a

[16:41] <dalek> rakudo/nom: module, since we did detect it being outdated, tried to recompile but

[16:41] <dalek> rakudo/nom: the .precompile method thought someone else already got to it since it

[16:41] <dalek> rakudo/nom: only checked the modification time of the top level module.

[16:41] <dalek> rakudo/nom:

[16:41] <dalek> rakudo/nom: Fix by correctly communicating the failure state up far enough to know

[16:41] <dalek> rakudo/nom: to pass :force.

[16:41] <dalek> rakudo/nom:

[16:41] <dalek> rakudo/nom: Many thanks to llfourn++ for providing an excellent test case!

[16:42] <nine> Please test!

[16:51] <timotimo> cool

[17:00] <[Coke]> travis is reporting in p6dev, not perl6-dev

[17:00] <[Coke]> nine just broke the build.

[17:06] <nine> Seems like it's still just the jvm failures?

[17:07] <[Coke]> oh, maybe.

[17:09] <nine> Is there an equivalent to mast frames on the jvm?

[17:09] <nine> I think it's really just that part of the BEGIN time EVAL fix that's missing

[17:25] <psch> nine: i think CallFrame is the closest we have to MAST_Frame..?

[17:26] <psch> that's if i'm not misinterpreting MAST_Frame

[17:29] <timotimo> MAST_Frame is more like a StaticFrame

[17:29] <timotimo> i.e. it turns into a piece of code in the output .moarvm file

[17:30] <timotimo> whereas a CallFrame represents a piece of stack of actually running code

[17:30] <timotimo> i.e. in a normally running program you'd have many more MAST_Frame-equivalents than CallFrames at the start and then depending on your program you'll end up with many more CallFrames

[17:30] <timotimo> though maybe not all of the CallFrames alive at the same time, unless you have lots of closures or continuations

[17:31] <psch> StaticFrame?  every CallFrame has a StaticCodeInfo..?

[17:32] <timotimo> that sounds relevant

[17:32] <timotimo> the StaticFrame in moarvm contains the bytecode, but i expect the jvm version has something jvm-related for that

[20:12] <AlexDaniel> eh, is there any way to get the rights to manage bugs on RT?

[20:13] <timotimo> asking [Coke], afaik

[20:23] <[Coke]> I need your RT login info and someone to vouch for you

[20:25] <AlexDaniel> [Coke]: I am registered with this email: [email@hidden.address]
[20:26] <AlexDaniel> [Coke]: as for the voucher, I have no idea

[20:28] <[Coke]> poof, you're a bugadmin

[20:32] <AlexDaniel> thanks!

[20:32] <[Coke]> RT: 1298; CONC: 7; GLR: 6; JVM: 68; LHF: 2; LTA: 69; NYI: 27; OSX: 6; PERF: 15; POD: 3; PRECOMP: 3; RFC: 17; SEGV: 19; STAR: 1; TESTNEEDED: 26; TODO: 10; UNI: 5; WEIRD: 2

[20:33] <[Coke]> if you have any questions about how to handle bugs, please ask before closing.

[20:33] <[Coke]> guess I should write it up somewhere to be safe, but basically: "always cc the list. you have to check the box", "don't close an rt without tests", "be nice"

[20:34] <AlexDaniel> [Coke]: okay

[20:48] <AlexDaniel> [Coke]: #128177

[20:48] <AlexDaniel> [Coke]: did I do everything right?
