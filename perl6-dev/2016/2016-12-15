[00:06] <jdv79> cognominal: youre very bouncy

[02:10] <dalek> rakudo/nom: 35a7f15 | TimToady++ | src/Perl6/Actions.nqp:

[02:10] <dalek> rakudo/nom: Factor out repeated comparisions from unwanted

[02:10] <dalek> rakudo/nom:

[02:10] <dalek> rakudo/nom: Just logic reorg, should be no semantic change.

[02:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/35a7f151c8

[02:10] <dalek> rakudo/nom: 1b3a009 | TimToady++ | src/Perl6/ (2 files):

[02:10] <dalek> rakudo/nom: Add warning for useless use of sequence

[02:10] <dalek> rakudo/nom:

[02:10] <dalek> rakudo/nom: The sequence operator (...) is not really a pure operator for purposes of

[02:10] <dalek> rakudo/nom: constant folding, so it's not marked pure, but we're going to carp about

[02:10] <dalek> rakudo/nom: using a sequence only for its side effects anyway, since it catches common

[02:10] <dalek> rakudo/nom: errors of the form:

[08:39] <lizmat> Files=1155, Tests=53921, 200 wallclock secs (11.26 usr  4.66 sys + 1193.47 cusr 126.92 csys = 1336.31 CPU)

[08:39] <yoleaux2> 14 Dec 2016 21:17Z <jnthn> lizmat: Is it accidental that `$*SCHEDULER.cue: :in(1), :times(2), { say now }` only applies the "in" to the first time? (It's actually setting the delay to 0 after scheduling the first one...)

[08:40] <moritz> jnthn: I think if you want delays after the first one, you need to pass in :every(2)

[08:41] <moritz> cue https://docs.perl6.org/routine/cue :-)

[08:41] <lizmat> jnthn: what moritz said  :-)

[08:42] * moritz suddenly feels competent :-)

[08:42] <lizmat> at least, that's always been my interpretation of combining "in" with "times"

[08:43] <moritz> though we might want to declare it as :$in, :$every = $in

[08:44] <lizmat> huh?

[08:44] <lizmat> that's quite a semantic change

[08:44] <lizmat> from non-repeating to repeating ??

[08:48] <moritz> oh, does :every imply repetition, even if :times isn't set?

[08:49] <moritz> then we shouldn't do that

[08:49] <lizmat> yup

[08:49] <lizmat> :times is just a limiter on :every, really

[09:55] <jnthn> This isn't about :every

[09:56] <jnthn> This is about when you *don't* have every and you use time

[09:56] <jnthn> *times

[09:56] <jnthn> My expectation was that :in(2), :times(3) would, in 2 seconds, schedule it 3 times

[09:57] <jnthn> m: $*SCHEDULER.cue: :in(2), :times(3), { say now }; sleep 4;

[09:57] <camelia> rakudo-moar 1b3a00: OUTPUT«Instant:1481795869.916905␤Instant:1481795869.923777␤Instant:1481795871.917595␤»

[09:57] <jnthn> But notice how two of them are run at 0 seconds, and only one of them at 2 seconds

[09:58] <jnthn> I'd expect those 3 say statements to spit out a `now` value that is pretty close

[10:01] <lizmat> jnthn: ah, indeed, that's what I would have expected as well

[10:01] <lizmat> hmmm...

[10:02] <jnthn> Yeah, discovered when I was implementing Test::Scheduler last night for my advent post :)

[10:05] <lizmat> ah, *now* I understand your question

[10:05] <lizmat> looks like the $delay=0 is a thinko on my part

[10:06] <lizmat> looks like the first one scheduled is the last one to execute, because it is the only one that has a $delay

[10:08] <jnthn> lizmat: Yes, that's the line that felt bogus to me :)

[10:08] <jnthn> If it weren't there it'd do what I'd expected, I think :)

[10:09] * lizmat runs a spectest without t

[10:15] * jnthn wonders if lizmat has cff instead of t today... :)

[10:15] <lizmat> :-)  i

[10:24] <dalek> rakudo/nom: b286048 | lizmat++ | src/core/ThreadPoolScheduler.pm:

[10:24] <dalek> rakudo/nom: Apply delay to all cues, instead of just the first

[10:24] <dalek> rakudo/nom:

[10:24] <dalek> rakudo/nom: Spotted by jnthn++

[10:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b286048efa

[10:26] <jnthn> \o/

[10:26] <jnthn> Glad I held off writing tests for that in Test::Scheduler before we discussed it :)

[10:56] <lizmat> m: loop { last without index("a","foo") }   # feels to me this shouldn't hang ?

[10:56] <camelia> rakudo-moar b28604: OUTPUT«(timeout)»

[10:56] <lizmat> m: loop { print "foo" without index("a","foo") }   # feels to me this shouldn't hang ?

[10:57] <camelia> rakudo-moar b28604: OUTPUT«(timeout)foofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoofoof…»

[10:57] <lizmat> brb

[11:07] <jnthn> m: say index("a","foo")

[11:07] <camelia> rakudo-moar b28604: OUTPUT«Nil␤»

[11:07] <jnthn> m: say index("a","foo").defined

[11:07] <camelia> rakudo-moar b28604: OUTPUT«False␤»

[11:07] <jnthn> m: say index("a","foo").DEFINITE

[11:07] <camelia> rakudo-moar b28604: OUTPUT«False␤»

[11:07] <jnthn> Yeah, looks busted and I'm not sure why :)

[11:07] <lizmat> m: say ?index("a","foo")

[11:07] <camelia> rakudo-moar b28604: OUTPUT«False␤»

[11:07] <lizmat> ok, will submit a ticket

[11:08] <lizmat> brb

[11:08] <jnthn> without should care about .defined fwiw

[11:08] <lizmat> m: loop { last not with index("a","foo") }   # also odd?

[11:08] <camelia> rakudo-moar b28604: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Undeclared routine:␤    with used at line 1␤␤»

[11:09] <lizmat> brb

[11:15] <dalek> nqp: 04e1ab2 | (Pawel Murias)++ | src/vm/js/Operations.nqp:

[11:15] <dalek> nqp: [js] Implement nqp::with and nqp::without ops.

[11:15] <dalek> nqp: review: https://github.com/perl6/nqp/commit/04e1ab2dfd

[11:15] <dalek> nqp: c01e27a | (Pawel Murias)++ | t/ (2 files):

[11:15] <dalek> nqp: Test with and without ops.

[11:15] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c01e27a2f5

[11:49] <lizmat> m: FOO:loop { last FOO without index("a","foo") }   # this works

[11:49] <camelia> rakudo-moar b28604: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Undeclared names:␤    FOO used at line 1␤    FOO:loop used at line 1␤␤»

[11:49] <lizmat> m: FOO: loop { last FOO without index("a","foo") }   # this works

[11:49] <camelia> rakudo-moar b28604: ( no output )

[12:13] <lizmat> RT #130354

[12:13] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130354

[13:29] <dalek> nqp: 507b6df | (Pawel Murias)++ | src/vm/js/Operations.nqp:

[13:29] <dalek> nqp: [js] Remove a TODO, nqp::while no longer has a return value as that was just a hindrance.

[13:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/507b6dfe04

[13:33] <[Coke]> https://www.reddit.com/r/perl/comments/557m4k/any_new_perl_6_books/d8aokjq/ - I assume his claim here is true?

[13:34] <lizmat> [Coke]: yes, I'm proofreading the last 30+ pages at the moment

[13:34] <lizmat> assuming you mean Laurent Rosenfeld's claim?

[13:36] <lizmat> commute to NR.pm meeting &

[13:39] <[Coke]> lizmat: aye. Thanks!

[13:40] * [Coke] guessed on pronoun there.

[14:44] <lizmat> m: sub a() {}; dd a

[14:44] <camelia> rakudo-moar b28604: OUTPUT«Nil␤»

[14:45] <lizmat> m: sub a( return 42 if 0 ) {}; dd a

[14:45] <camelia> rakudo-moar b28604: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Invalid typename 'return' in parameter declaration.␤at <tmp>:1␤------> sub a( return⏏ 42 if 0 ) {}; dd a␤»

[14:45] <lizmat> m: sub a( return 42 if 0 {}; dd a

[14:45] <camelia> rakudo-moar b28604: OUTPUT«===SORRY!=== Error while compiling <tmp>␤Invalid typename 'return' in parameter declaration.␤at <tmp>:1␤------> sub a( return⏏ 42 if 0 {}; dd a␤»

[14:45] <lizmat> argh

[14:45] <lizmat> m: sub a() { return 42 if 0 }; dd a

[14:45] <camelia> rakudo-moar b28604: OUTPUT«slip()␤»

[14:46] <lizmat> I wonder which behaviour is correct

[14:46] <jnthn> Which?

[14:46] <jnthn> They're both correct, no?

[14:47] <jnthn> if does that in order that you can write list comprehensions with it

[14:47] <lizmat> m: sub a() {}; dd a    # shouldn't this be slip() then as well ?

[14:47] <camelia> rakudo-moar b28604: OUTPUT«Nil␤»

[14:48] <jnthn> No

[14:48] <jnthn> The slip originates from the if/unless

[14:48] <lizmat> ah, ok...

[14:48] <jnthn> And since it's the last thing in the sub the usual "value of last statement" rule applies

[14:49] <lizmat> yup

[14:49] <lizmat> ok

[14:49] <jnthn> I understand what you were surprised/confused by now though :)

[14:50] <dalek> rakudo/nom: 3b5c954 | Altai-man++ | src/Perl6/Metamodel/RoleToClassApplier.nqp:

[14:50] <dalek> rakudo/nom: Show all roles that have missing method.

[14:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3b5c9545a7

[14:50] <dalek> rakudo/nom: 0e79613 | (Zoffix Znet)++ | src/Perl6/Metamodel/RoleToClassApplier.nqp:

[14:50] <dalek> rakudo/nom: Merge pull request #957 from Altai-man/rt130211-improvement

[14:50] <dalek> rakudo/nom:

[14:50] <dalek> rakudo/nom: Show all roles that have missing method in error message

[14:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0e79613b67

[14:52] <ZoffixW> Hello. Is there a neat-looking trick for a loop that doesn't react to last/next/redo (and instead passes them further up the food chain)?

[14:52] <ZoffixW> I tried a bunch of stuff with CONTROL {} but I'm either breaking take/warn or getting "MoarVM panic: Trying to unwind over wrong handler" as a sideeffect

[14:53] <ZoffixW> m: https://gist.github.com/zoffixznet/9acb9b7036bacea3037ef9d70b10e9a4

[14:53] <camelia> rakudo-moar b28604: OUTPUT«meow␤warning␤  in block  at <tmp> line 2␤MoarVM panic: Trying to unwind over wrong handler␤»

[14:56] <ZoffixW> .oO( a goto would be handy.... )

[14:56] <lizmat> .oO( well volunteered :-)

[14:56] <jnthn> ZoffixW: You can't just use labeled loops?

[14:57] <jnthn> Not aware of a way to skip the handlers though

[14:57] <ZoffixW> Nope.

[14:58] <jnthn> I can't see CONTROL helping as the handlers are code-gen'd around the loop

[14:58] <ZoffixW> hm

[14:58] <jnthn> So there's nowhere to put a CONTROL that will bypass them

[14:59] <ZoffixW> OK. Maybe there's a different way.

[14:59] <jnthn> Could just throw an exception of some kind

[14:59] <ZoffixW> m: loop { last without Any }

[14:59] <camelia> rakudo-moar b28604: OUTPUT«(timeout)»

[15:00] <ZoffixW> That ^ hangs because `without` thunks the `last` and calls `notandthen` which uses a loop of its own to process args. So when it calls that thunk with the `last` the last aborts `notandthen`'s loop and not the original loop

[15:00] <ZoffixW> So somehow I was thinking of making it stop doing that.

[15:01] <lizmat> arriving in Cologne&

[15:01] <jnthn> ZoffixW: Hmm

[15:01] <jnthn> Oh

[15:01] <jnthn> There is iirc a :nohandler thingy if you use nqp::while

[15:01] * ZoffixW looks into that

[15:02] <jnthn> git grep nohandler

[15:02] <jnthn> Shows up a bunch of examples

[15:02] <jnthn> So yeah, there is a way, if you use nqp:: ops :)

[15:02] <dalek> nqp: 841de09 | (Pawel Murias)++ | src/vm/js/Operations.nqp:

[15:02] <dalek> nqp: [js] Implement 3 argument nqp::while.

[15:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/841de09bb1

[15:02] <dalek> nqp: f914dc4 | (Pawel Murias)++ | t/nqp/047-loop-control.t:

[15:02] <dalek> nqp: Test 3 argument nqp::while.

[15:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f914dc4541

[15:02] <ZoffixW> Awesome. Thanks, jnthn++

[15:52] <dalek> rakudo/nom: 9a3c350 | (Zoffix Znet)++ | src/core/operators.pm:

[15:52] <dalek> rakudo/nom: Fix failure of loop controls via `without`/`with`

[15:52] <dalek> rakudo/nom:

[15:52] <dalek> rakudo/nom: The statements of `without`/`with` statement modifiers get thunked

[15:52] <dalek> rakudo/nom: and fed to `notandthen`/`andthen` infix operators. Those operators

[15:52] <dalek> rakudo/nom: use loops to process arguments. So when THOSE loops execute a thunk

[15:52] <dalek> rakudo/nom: with a loop control statement, the thrown control exception controls

[15:52] <dalek> rakudo/nom: the argument processing loop of those operators instead of the loop

[15:52] <dalek> rakudo/nom: intended.

[15:52] <dalek> rakudo/nom:

[15:52] <dalek> rakudo/nom: Fix by using nqp loops with :nohandler modifer. jnthn++ for the tip.

[15:52] <dalek> rakudo/nom:

[15:52] <dalek> roast: fc0d82a | (Zoffix Znet)++ | S04-statements/loop.t:

[15:52] <dalek> roast: Test loop controls work them triggered with `without`/`with`

[15:52] <dalek> roast:

[15:52] <dalek> roast: RT#130354: https://rt.perl.org/Ticket/Display.html?id=130354

[15:52] <dalek> roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/9a3c35013e25f69

[15:52] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130354

[15:52] <dalek> roast: review: https://github.com/perl6/roast/commit/fc0d82adf5

[15:54] <jnthn> Nice! :)

[15:57] <[Coke]> ZoffixW++

[16:11] <perlpilot> Perl 6 needs some sort of award like the White Camel.  I can easily think of a few people who would have already received such an award.

[16:13] <[Coke]> perlpilot: I think we're eligible for the actual white camel, no?

[16:14] <jnthn> Surely. :)

[16:15] <perlpilot> Indeed.

[16:16] <perlpilot> But there are "unsung heroes" to the Perl 6 community that the Perl community at-large wouldn't consider.

[16:17] <jnthn> Did you try nominating them? :)

[16:26] <|Tux|> This is Rakudo version 2016.11-248-g0e79613b6 built on MoarVM version 2016.11-60-g21abc2a1

[16:26] <|Tux|> csv-ip5xs        3.068

[16:26] <|Tux|> test            13.233

[16:26] <|Tux|> test-t           6.072

[16:26] <|Tux|> csv-parser      13.968

[16:26] <|Tux|> better late than never, and certainly with nice values like this

[16:52] <dalek> nqp: b195a1e | (Pawel Murias)++ | src/vm/js/Operations.nqp:

[16:52] <dalek> nqp: [js] Implement while ... -> $cond {...}

[16:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b195a1ec5e

[16:52] <dalek> nqp: ce34625 | (Pawel Murias)++ | t/nqp/014-while.t:

[16:52] <dalek> nqp: Test while ... -> $cond {...}

[16:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ce346250c9

[17:03] <dalek> roast: a9fd375 | Altai-man++ | integration/error-reporting.t:

[17:03] <dalek> roast: A test for #130211 (#196)

[17:03] <dalek> roast:

[17:03] <dalek> roast: * A test for #130211

[17:03] <dalek> roast:

[17:03] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130211

[17:03] <dalek> roast: * Better test

[17:03] <dalek> roast:

[17:03] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130211

[17:03] <dalek> roast: * Test message was returned

[17:03] <dalek> roast:

[17:03] <dalek> roast: * Whitespace is removed

[17:03] <dalek> roast: review: https://github.com/perl6/roast/commit/a9fd375b93

[17:14] <dalek> roast: e45c0ad | (Zoffix Znet)++ | integration/error-reporting.t:

[17:14] <dalek> roast: Fix error in test

[17:14] <dalek> roast:

[17:14] <dalek> roast: Test in previous commit accidentally used wrong role names.

[17:14] <dalek> roast: - Fix formatting to be of shorter line length.

[17:14] <dalek> roast: - Fix test message, since we're no longer testing order

[17:14] <dalek> roast: review: https://github.com/perl6/roast/commit/e45c0ada49

[17:46] <gfldex> writing bug reports works! \o/

[17:58] <AlexDaniel> gfldex: well, that's not news to me :)

[20:02] <lizmat> m: /./   # matching Any, but who cares

[20:02] <camelia> rakudo-moar 9a3c35: ( no output )

[20:02] <lizmat> m: m/./   # should be the same but isn't

[20:02] <camelia> rakudo-moar 9a3c35: OUTPUT«No such method 'match' for invocant of type 'Any'␤  in block <unit> at <tmp> line 1␤␤»

[21:03] <MasterDuke> jnthn: around for a QAST question?

[21:05] <MasterDuke> or anyone?

[21:06] <MasterDuke> what does p6capturelex do?

[21:12] <moritz> MasterDuke: I don't know, and can only speculate

[21:14] <MasterDuke> well, i'll explain what i'm running into, maybe at this point any other set of eyes will help

[21:14] <MasterDuke> still working on turning -n's "for lines() { $code }" into "while ($_ := get()).DEFINITE { $code }"

[21:15] <MasterDuke> i've got it to loop the same number of times as lines in test files, so i assume that part's working

[21:15] <MasterDuke> but i can't ever get the $code to execute

[21:16] <moritz> MasterDuke: want to nopaste a patch, or push a branch or something?

[21:16] <moritz> MasterDuke: and maybe a --target=ast dump of small examle code

[21:17] <MasterDuke> well, this has some already https://gist.github.com/MasterDuke17/6e09ebc32dce5f703a178a2a0348ef7b

[21:17] <timotimo> p6capturelex is just capturelex with an indirection through the invocation spec of an object

[21:18] <MasterDuke> if i take p6capturelex out entirely, -ne '.say' just prints a bunch of (Mu)s

[21:18] <timotimo> "given the specified code object, sets its outer to the current scope"

[21:19] <MasterDuke> if i leave it in, -ne '.say' doesn't print anything at all

[21:19] <MasterDuke> if instead i docegen "while ($_ := get()).DEFINITE { say $foobar; $code }", and then do -ne 'BEGIN my $foobar = <something>; .say' i get <something> printed for every line

[21:20] <MasterDuke> *codegen

[21:20] <jnthn> This code never actually calls the block

[21:20] <moritz> right

[21:20] <jnthn> Which is perfect for "for"

[21:20] <moritz> it's the equivalent of   while ($_ := for()) { &codeobj }

[21:20] <jnthn> Since you want to pass it off to map

[21:20] <timotimo> ooooh

[21:21] <jnthn> $while.push(QAST::Op.new( :op('call'), $body )); # probably does it

[21:21] <jnthn> Think I missed that when I last looked at it... :)

[21:21] <moritz> or use a different helper function than make_topic_block_ref

[21:21] <jnthn> Though even better is to find a way to make it an immediate block

[21:21] <MasterDuke> ah, if you reload the gist you'll see a new ast

[21:24] <MasterDuke> i added a QAST::Block.new(:blocktype<immediate>), is that what you meant?

[21:25] <MasterDuke> rebuilding now

[21:26] <moritz> MasterDuke: can't you leave out the call to make_topic_block_ref entirely?

[21:26] <MasterDuke> don't know, it was there before

[21:27] <moritz> $code is probably already the AST for an immediate block, and make_topic_block_ref turns it into an QAST that returns a code ref

[21:27] <moritz> which is what map wants

[21:27] <moritz> but not what :op<while> wants

[21:28] <MasterDuke> something didn't work, now trying without make_topic_block_ref

[21:31] <MasterDuke> ah ha! much closer. now it printed the first line and then died with "Cannot find method 'Nil' on object of type List"

[21:31] <moritz> pr\o/gress

[21:33] <MasterDuke> died here: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Metamodel/BOOTSTRAP.nqp#L2974

[21:53] <MasterDuke> https://gist.github.com/MasterDuke17/a19a5cfadd0e450d1dd74d2f048db905

[21:54] <MasterDuke> so that's the AST and diff for removing make_topic_block_ref, and call()ing the result of p6capturelex inside an immediate block

[21:56] <MasterDuke> it's printing the first line, but then seems to be executing the result of the say

[21:59] <MasterDuke> yep, because "-ne 'sub { say "hi" }'" prints "hi" for every line in the file i give it

[21:59] <moritz> MasterDuke: what if you remove the whole my $body := QAST::Block.new(...) and stick $code straight into the :op<while>?

[22:02] <MasterDuke> building that now

[22:03] * MasterDuke would buy a beverage of choice to whoever brings the build down to less than a minute

[22:04] <MasterDuke> moritz++

[22:04] <MasterDuke> u: trumpet

[22:04] <unicodable6> MasterDuke, U+1F3BA TRUMPET [So] (🎺)

[22:04] <MasterDuke> 🎺🎺🎺🎺🎺🎺

[22:09] <MasterDuke> jnthn++ and timotimo++ also

[22:12] <moritz> MasterDuke: did it work?

[22:16] <dalek> rakudo/nom: acece7b | TimToady++ | src/Perl6/Actions.nqp:

[22:16] <dalek> rakudo/nom: Generalize useless use to other list infixes

[22:16] <dalek> rakudo/nom:

[22:16] <dalek> rakudo/nom: Add warnings to other forms of sequence operator too.

[22:16] <dalek> rakudo/nom:

[22:16] <dalek> rakudo/nom: Except for variations of assignment, the Xop, Zop, and [op] metaops

[22:16] <dalek> rakudo/nom: should also encourage side-effect-free behavior by carping when in

[22:16] <dalek> rakudo/nom: sink context.  (You can always use 'eager' to override.)

[22:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/acece7b2f7

[22:19] <MasterDuke> moritz: yep

[22:20] <MasterDuke> now to figure out how to tweak_loop it. just blindly calling tweak_loop($while) dies with "===SORRY!=== Cannot look up attributes in a NQPMu type object"

[22:25] <MasterDuke> i think the NQPMu is the $code from this line: my $code := $loop[1].ann('code_object');

[22:26] <jnthn> MasterDuke++ # progress

[22:26] <jnthn> Sorry, too tired to really help any more tonight

[22:26] * jnthn goes to sleep

[22:26] * MasterDuke goes to dinner

[22:36] <RabidGravy> woah

[22:36] <RabidGravy> #0  0x00007ffff741001b in malloc_consolidate () from /lib64/libc.so.6

[22:36] <RabidGravy> No symbol table info available.

[22:36] <RabidGravy> #1  0x00007ffff7412f0f in _int_malloc () from /lib64/libc.so.6

[22:36] <RabidGravy> No symbol table info available.

[22:36] <RabidGravy> #2  0x00007ffff7414f74 in malloc () from /lib64/libc.so.6

[22:36] <RabidGravy> No symbol table info available.

[22:36] <RabidGravy> #3  0x00007ffff78dea7b in MVM_fixed_size_alloc () from //home/jonathan/.rakudobrew/moar-nom/install/lib/libmoar.so

[22:38] <RabidGravy> not sure I'll be able to golf that

[22:42] <geekosaur> possibly install glibc debug symbols, rebuild moarvm with debug enabled... and ask in #moarvm. (also, use valgrind --- which will also benefit from debug mode)

[22:47] <RabidGravy> or just go to bed and ignore it

[23:58] <AlexDaniel> There's a new bot, check it out: https://irclog.perlgeek.de/perl6/2016-12-15#i_13749780
