[00:31] *** squashable6 left
[00:36] *** squashable6 joined
[00:36] *** ChanServ sets mode: +v squashable6

[00:36] *** AlexDani` joined
[00:40] *** AlexDaniel left
[01:13] *** klapperl left
[02:38] <ugexe> i just realized if we hadn't already put json::fast code into rakudo we would have had to do *something* to for sorted-keys for reproducibility

[02:39] <ugexe> s/to for/too for/

[02:40] *** klapperl joined
[04:01] *** Kaiepi left
[04:25] *** MasterDuke left
[04:52] *** ufobat_ left
[04:57] *** Kaiepi joined
[06:35] <nine> I'm glad I didn't have to :)

[07:04] *** brrt joined
[07:06] *** vrurg left
[07:09] *** patrickb joined
[07:24] <brrt> \o

[08:28] *** lizmat_ joined
[08:30] *** lizmat left
[08:52] *** brrt left
[09:24] *** Kaiepi left
[09:24] *** Kaiepi joined
[09:32] *** brrt joined
[09:33] *** squashable6 left
[09:38] *** squashable6 joined
[09:38] *** ChanServ sets mode: +v squashable6

[10:33] *** lizmat_ is now known as lizmat

[10:38] *** Kaypie joined
[10:38] *** Kaiepi left
[10:38] *** brrt` joined
[10:40] *** brrt left
[10:47] *** brrt` left
[11:20] *** Kaypie left
[11:23] *** Kaiepi joined
[11:30] <tyil> sorted-keys in JSON::Fast are neat tbh

[11:31] <tyil> hope YAMLish can get something like it soon-ish

[11:41] *** Kaiepi left
[11:45] *** Kaiepi joined
[11:56] *** Geth left
[11:56] *** Geth joined
[12:09] *** Kaiepi left
[12:23] *** AlexDani` is now known as AlexDaniel

[12:23] *** AlexDaniel left
[12:23] *** AlexDaniel joined
[12:29] *** Kaiepi joined
[12:47] <lizmat> commute to Amsterdam.PM&

[12:47] *** lizmat left
[12:50] *** brrt` joined
[12:51] *** brrt` is now known as brrt

[13:16] *** vrurg joined
[13:27] <|Tux|> Rakudo version 2019.03.1-284-gb0dd44b00 - MoarVM version 2019.05

[13:27] <|Tux|> csv-test-xs-20      0.429 -  0.432

[13:27] <|Tux|> csv-ip5xs           0.693 -  0.742

[13:27] <|Tux|> test-t --race       0.781 -  0.808

[13:27] <|Tux|> test-t              1.674 -  1.713

[13:27] <|Tux|> csv-ip5xs-20        5.794 -  5.871

[13:27] <|Tux|> test                6.564 -  6.786

[13:27] <|Tux|> test-t-20 --race    8.824 -  8.971

[13:27] <|Tux|> csv-parser         22.208 - 22.543

[13:27] <|Tux|> test-t-20          28.654 - 28.810

[14:04] *** pamplemousse_ joined
[14:04] *** pamplemousse_ left
[14:05] *** pamplemousse_ joined
[14:17] *** pamplemousse_ left
[14:47] *** [TuxCM] joined
[14:51] *** brrt left
[15:01] *** [TuxCM] left
[15:20] *** lizmat joined
[15:28] <lizmat> m: sub a($a,$b) { $a + $b }; for ^10_000_000 { a 42,666 }; say now - ENTER now

[15:28] <camelia> rakudo-moar b0dd44b00: OUTPUT: «2.0588669␤»

[15:28] <lizmat> m: sub a(\a,\b) { a + b }; for ^10_000_000 { a 42,666 }; say now - ENTER now

[15:28] <camelia> rakudo-moar b0dd44b00: OUTPUT: «0.314658␤»

[15:28] <lizmat> m: sub a($a,$b) { $a + $b }; for ^10_000_000 { a 42,666 }; say now - ENTER now

[15:28] <camelia> rakudo-moar b0dd44b00: OUTPUT: «2.031367␤»

[15:28] <lizmat> m: sub a(\a,\b) { a + b }; for ^10_000_000 { a 42,666 }; say now - ENTER now

[15:28] <camelia> rakudo-moar b0dd44b00: OUTPUT: «1.651616␤»

[15:28] <lizmat> m: sub a($a,$b) { $a + $b }; for ^10_000_000 { a 42,666 }; say now - ENTER now

[15:28] <camelia> rakudo-moar b0dd44b00: OUTPUT: «2.01352␤»

[15:29] <lizmat> m: sub a(\a,\b) { a + b }; for ^10_000_000 { a 42,666 }; say now - ENTER now

[15:29] <camelia> rakudo-moar b0dd44b00: OUTPUT: «1.56884157␤»

[15:30] <lizmat> the \a vs $a difference is caused by the scalar container that apparently is allocated for each parameter / call

[15:30] <lizmat> for the $a case (and not for the \a case)

[15:31] <lizmat> I seem to remember that this was not such a huge difference ?

[15:32] <lizmat> did we lose an optimization along the way somehow?

[15:51] *** patrickb left
[15:59] *** brrt joined
[16:06] *** lucasb joined
[16:13] *** [TuxCM] joined
[16:24] <discord6> <timotimo> The question is why doesn't scalar replacement make both identical?

[16:50] <discord6> <timotimo> Don't have a computer hooked up to look at it in spesh

[16:55] *** [TuxCM] left
[17:23] <timotimo> ok my computer is back up

[17:24] *** brrt left
[17:37] <timotimo> yeah, with the dollar it does create the scalar objects

[17:41] *** [TuxCM] joined
[18:55] *** lucasb left
[19:37] *** ufobat joined
[20:08] *** ufobat_ joined
[20:11] *** ufobat left
[20:23] *** brrt joined
[20:35] *** [TuxCM] left
[20:35] <Kaiepi> is https://github.com/rakudo/rakudo/pull/2819 something that can be reviewed and merged before the next release? the roast tests and docs updates are already merged, so i don't want spec tests to be broken for too long

[20:39] *** lizmat left
[21:00] <timotimo> Kaiepi: you never need to check for Nil for return values

[21:00] <timotimo> oh, ok, Seconds is used for a sub parameter too

[21:00] <timotimo> but for the return value it can be dropped to become just Numeric

[21:02] <timotimo> the code is a bit too long for my current attention levels to review properly

[21:38] *** [TuxCM] joined
[22:03] *** brrt` joined
[22:05] *** brrt left
[22:13] *** MasterDuke joined
[22:13] *** MasterDuke left
[22:13] *** MasterDuke joined
[22:25] *** tobs left
[22:37] *** tobs joined
[23:04] *** brrt`` joined
[23:05] *** brrt` left
[23:28] *** brrt`` left
