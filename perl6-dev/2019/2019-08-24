[00:16] <Kaiepi> greppable6, PROTO_TCP

[00:16] <greppable6> Kaiepi, 4 lines, 3 modules: https://gist.github.com/b6e482a7177ea9bc26607a87e5cc3533

[00:19] <Kaiepi> greppable6, PROTO_UDP

[00:19] <greppable6> Kaiepi, Found nothing!

[00:24] <Kaiepi> greppable6, SOCK_PACKET

[00:24] <greppable6> Kaiepi, 2 lines, 2 modules: https://gist.github.com/c73cef66b9281379a73d0e6fb9068468

[00:27] *** Xliff left
[00:31] <Kaiepi> greppable6, ProtocolType

[00:31] <greppable6> Kaiepi, Found nothing!

[00:31] *** lucasb left
[00:50] <vrurg> greppable6: Perl6::BOOTSTRAP

[00:50] <greppable6> vrurg, Found nothing!

[02:17] <Geth> ¦ rakudo: vrurg++ created pull request #3138: Improve multi-revision support

[02:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3138

[02:31] *** sortiz left
[03:05] *** Xliff joined
[03:05] <Xliff> \o

[03:31] <Xliff> my @a = (

[03:31] <Xliff> a

[03:31] <Xliff> *snarl*

[03:32] <Xliff> m: my @a = ('a' ... 'q')».race.say

[03:32] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «No such method 'race' for invocant of type 'Str'. Did you mean any of these?␤    cache␤    rand␤    take␤␤  in block <unit> at <tmp> line 1␤␤»

[03:52] *** Xliff left
[04:14] *** pamplemousse joined
[06:10] *** pamplemousse left
[06:21] *** Voldenet left
[06:26] *** Voldenet joined
[06:26] *** Voldenet left
[06:26] *** Voldenet joined
[07:22] *** Voldenet left
[07:27] *** Voldenet joined
[07:27] *** Voldenet left
[07:27] *** Voldenet joined
[07:52] *** cygx joined
[07:53] <cygx> So, I can now build standalone NQP applications

[07:53] <cygx> Cuts hello world runtime by 1/3

[07:54] <cygx> I'll see if I can beat this thing into shape over the next week

[07:58] <cygx> (by standalone I mean single-file executable packaging all bytecode)

[07:59] <Geth> ¦ rakudo: dumarchie++ created pull request #3139:  Throw if keep/break is invoked on a vow more than once

[07:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3139

[08:32] <[Tux]> Rakudo version 2019.07.1-193-g71646ead9 - MoarVM version 2019.07.1-118-g3e715b424

[08:32] <[Tux]> csv-test-xs-20      0.430 -  0.437

[08:32] <[Tux]> csv-ip5xs           0.700 -  0.758

[08:32] <[Tux]> test-t --race       0.877 -  0.996

[08:32] <[Tux]> test-t              1.662 -  1.740

[08:32] <[Tux]> csv-ip5xs-20        5.213 -  5.283

[08:32] <[Tux]> test                7.208 -  8.029

[08:32] <[Tux]> test-t-20 --race    9.168 -  9.182

[08:32] <[Tux]> csv-parser         22.554 - 22.644

[08:32] <[Tux]> test-t-20          29.701 - 31.287

[08:34] <AlexDaniel> cygx: amazing

[08:52] <cygx> Well, there are still some moving pieces, but in contrast to my last attempt a couple of years ago, I have a better idea what needs to happen

[09:09] <Geth> ¦ roast: 8b0db37e6c | (Elizabeth Mattijsen)++ | spectest.data

[09:09] <Geth> ¦ roast: Oops, merged tests too soon.

[09:09] <Geth> ¦ roast: 

[09:09] <Geth> ¦ roast: Please revert when gb18030 encoding / decoding support has trickled

[09:09] <Geth> ¦ roast: through MoarVM / NQP / Rakudo

[09:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8b0db37e6c

[09:09] *** Ven`` joined
[09:15] <Geth> ¦ problem-solving/path-to-raku: 6af3f53042 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[09:15] <Geth> ¦ problem-solving/path-to-raku: Remove Wikipedia / Rosettacode reference

[09:15] <Geth> ¦ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/6af3f53042

[09:28] *** Ven`` left
[09:55] *** cygx left
[10:48] *** lucasb joined
[11:09] *** squashable6 left
[11:14] *** squashable6 joined
[12:51] *** evalable6 left
[12:52] *** evalable6 joined
[13:22] *** Ven`` joined
[14:20] *** chloekek joined
[14:42] *** chloekek left
[14:56] *** Ven`` left
[14:59] *** Ven`` joined
[15:06] *** Ven`` left
[15:50] <Geth> ¦ nqp: bdf722467f | usev6++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java

[15:50] <Geth> ¦ nqp: [JVM] Decontainerize in param unboxing

[15:50] <Geth> ¦ nqp: 

[15:50] <Geth> ¦ nqp: For positional parameters this has been done with d242880fe6.

[15:50] <Geth> ¦ nqp: 

[15:50] <Geth> ¦ nqp: Makes code like the following (from S12-attributes/native.t) work (again?):

[15:51] <Geth> ¦ nqp: 

[15:51] <Geth> ¦ nqp:   class C { has int $.foo = 42 }

[15:51] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/bdf722467f

[16:04] *** pmurias joined
[16:45] *** pmurias left
[17:00] <bartolin> .tell lizmat Do you maybe know/remember, why we don't use 'my int $int' here: https://github.com/rakudo/rakudo/blob/71646ead96/src/core/Mu.pm6#L218 (same on line 405). I stumbled upon this accidentally while looking for a JVM bug. It looks like it was introduced with https://github.com/rakudo/rakudo/commit/b706b84312 -- and maybe it was an oversight?

[17:00] <tellable6> bartolin, I'll pass your message to lizmat

[17:29] <Geth> ¦ roast: 0b586b99ad | usev6++ | S02-types/native.t

[17:29] <Geth> ¦ roast: Adjust wrong test for RT #124084

[17:29] <Geth> ¦ roast: 

[17:29] <Geth> ¦ roast: It's correct that trying to assign a Rat to a native variable

[17:29] <Geth> ¦ roast: of type num dies with X::Syntax::Number::LiteralType. We have

[17:29] <Geth> ¦ roast: tests for that behaviour in S02-types/type.t.

[17:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0b586b99ad

[17:29] <synopsebot> RT#124084 [resolved]: https://rt.perl.org/Ticket/Display.html?id=124084 Must initialize num/num32/num64 ?

[18:57] *** pmurias joined
[19:38] *** Xliff joined
[19:38] <Xliff> \o

[19:45] *** chloekek joined
[19:47] * Xliff is bored/.

[19:47] * Xliff also has fat fingers. ;P

[19:47] *** pmurias left
[19:47] <Xliff> .oO( Seriously! They are getting as large as hotdogs. /o\ )

[19:48] *** pmurias joined
[19:48] <Xliff> pmurias: o/

[20:01] <Kaiepi> so i'm making it so on moarvm, it tries to use all records received when resolving a hostname whenever it needs to, not just the first

[20:01] <Kaiepi> the problem is this breaks a couple tests in roast that expect localhost to only ever resolve to one address

[20:01] <Kaiepi> is this actually breaking or is it an issue with the test?

[20:02] <timotimo> that's totally a configurable thing

[20:02] <timotimo> so i'd say it's an issue with the test

[20:02] <Kaiepi> aight

[20:22] *** pamplemousse joined
[20:25] <pmurias> Xliff: \o

[20:27] <Geth> ¦ nqp: a70b135dc0 | (Paweł Murias)++ | src/vm/js/nqp-runtime/io.js

[20:27] <Geth> ¦ nqp: [js] Noop stderr/stdout instead of failing

[20:27] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a70b135dc0

[20:27] <Geth> ¦ nqp: 5fb8113c24 | (Paweł Murias)++ | src/vm/js/nqp-runtime/nqp-str.js

[20:27] <Geth> ¦ nqp: [js] Make nqp::decont_s work on nqp str

[20:27] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5fb8113c24

[20:30] <pmurias> bartolin: seems like it's accidently omitted

[20:30] <pmurias> bartolin: adding it in and seeing if the spectest passes seems like a good way to find out

[20:45] <MasterDuke> pmurias, bartolin: passes a spectest

[20:52] *** Kaiepi left
[20:55] *** Kaiepi joined
[20:59] *** pmurias left
[21:00] <Geth> ¦ rakudo: c0b6cafc22 | (Daniel Green)++ | src/core/Mu.pm6

[21:00] <Geth> ¦ rakudo: Explicitly make a variable a native int again...

[21:00] <Geth> ¦ rakudo: 

[21:00] <Geth> ¦ rakudo: since it looks like the type was inadvertently dropped in b706b84312.

[21:00] <Geth> ¦ rakudo: 

[21:00] <Geth> ¦ rakudo: bartolin++ for the spot.

[21:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c0b6cafc22

[21:01] *** pmurias joined
[21:18] *** lucasb left
[21:24] *** pmurias left
[21:34] *** pamplemousse left
[21:43] *** pamplemousse joined
[21:56] <vrurg> Oh, my, I finally got it! 'use v6.e.PREVIEW; grammar Foo { token TOP { \d+ } }; say Foo.parse("aaa").WHAT' -> (Failure)

[21:59] <AlexDaniel> yay

[22:06] *** travis-ci joined
[22:06] <travis-ci> Rakudo build failed. Daniel Green 'Explicitly make a variable a native int again...

[22:06] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/576292820 https://github.com/rakudo/rakudo/compare/71646ead96be...c0b6cafc228c

[22:06] *** travis-ci left
[22:07] <vrurg> AlexDaniel: depends on R#3138 and perl6/problem-solving#94. So, depends on jnthn approval.

[22:07] <synopsebot> R#3138 [open]: https://github.com/rakudo/rakudo/pull/3138 [6.e][CORE.setting][WIP] Improve multi-revision support

[22:11] *** pamplemousse left
[22:17] <vrurg> .tell jnthn I know you're overloaded, but I'd like to get your approval for problem-solving#94 and its implementation R#3138. It changes directory tree and therefore pretty prone for possible merge conflicts if not pulled in soon.

[22:17] <synopsebot> R#3138 [open]: https://github.com/rakudo/rakudo/pull/3138 [6.e][CORE.setting][WIP] Improve multi-revision support

[22:17] <tellable6> vrurg, I'll pass your message to jnthn

[22:23] *** chloekek left
[22:49] *** pamplemousse joined
[22:55] <Geth> ¦ rakudo: vrurg self-assigned [WIP] Flapping test t/spec/S02-types/subset-6e.t https://github.com/rakudo/rakudo/issues/3141

[23:09] <Geth> ¦ rakudo: tbrowder++ created pull request #3142: add better err msgs for invalid open brackets for inline and leading …

[23:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3142

[23:10] <jnthn> vrurg: I'm probably more sick (nothing serious) than overloaded; hopefully taking it easy today will have helped. I'll try to take a look tomorrow; I had some reservations based on what was described at the issue, but seeing what's implemented might reduce them to nothing. :)

[23:11] <vrurg> jnthn: thanks! And get well soon.

[23:12] <vrurg> jnthn: Just a thing to mention: I've got 6.e version of Grammar working well with the PR.

[23:13] <jnthn> Cool :)

[23:13] <jnthn> I think my general comment would be that bootstrap/metamodel I prefer not to extend too much when we can do things at the Perl 6 level.

[23:14] <jnthn> But pragmatically, it can be easier to do some things in NQP

[23:15] <vrurg> jnthn: Nah, I don't like metamodel being version-dependent. But bootstrap is different thing. To my view it even belongs more to core than to metamodel. I was tempring moving it into core.<rev> :)

[23:16] <vrurg> *tempting

[23:16] <vrurg> Anyway, you should relax today. That's what helps with cold the most, to my experience.

[23:17] <jnthn> Your feeling on bootstrap is pretty much spot on

[23:17] <jnthn> It's really doing the initial wiring together of stuff so we can write the rest in Perl 6

[23:18] <jnthn> I've no objection to moving it to communicate that better

[23:19] <jnthn> I'm curious (but will wait for tomorrow to find out) how versioning it helps over doing All The Things in the CORE.<not c>.setting helps (since ideally we'd be bootstrapped enough in the nested settings to not need the bootstrap stuff)

[23:21] <vrurg> jnthn: First thing, Grammar needs HLL::Compiler and it's an NQP thing which it can't get with `use NQPHLL:from<NQP>` because it breaks serialization. Attaching own BOOTSTRAP fixes this issue.

[23:22] <vrurg> jnthn: Second thing, new revisions might introduce new things which would need bootstrapping. 

[23:23] <jnthn> Well, there's indeed a long tradition of avoiding fixing serialization. :)

[23:23] <vrurg> Otherwise, 6.d bootstrap/exporthow are empty and are there only to support building. 6.e does 'use Perl6::Metmodel; use QRegex` and nothing else.

[23:23] <jnthn> OK, that sounds happily minimal

[23:23] * vrurg growl on serialization...

[23:24] <jnthn> I think it's everyone's least favorite thing to have to debug/work on...

[23:24] <vrurg> A lot of  things could be skipped, run-away closures are hurting a lot of people. Would I know moar inside-out, I'd get this fixed asap.

[23:25] <vrurg> *but run-away...

[23:37] <jnthn> Urgh, yes.

[23:37] <jnthn> Well, going to sleep. 'night o/

[23:38] <vrurg> jnthn: g'night!

[23:47] *** pamplemousse left
[23:53] *** Xliff left
