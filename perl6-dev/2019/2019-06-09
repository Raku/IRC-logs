[01:00] *** tyil left
[01:19] <Geth> ¦ rakudo: b9ad5fd983 | (Vadim Belman)++ | t/02-rakudo/15-gh_1202.t

[01:19] <Geth> ¦ rakudo: Added test for async bug

[01:19] <Geth> ¦ rakudo: 

[01:19] <Geth> ¦ rakudo: rakudo/rakudo#1202

[01:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b9ad5fd983

[01:19] <Geth> ¦ rakudo: 7f69ef1d22 | (Vadim Belman)++ | t/02-rakudo/15-gh_1202.t

[01:19] <synopsebot> RAKUDO#1202 [open]: https://github.com/rakudo/rakudo/issues/1202 [SEGV][severe][tests needed] Async qqx sometimes hangs or dies ( await (^5).map({start { say qqx{… …} } }) )

[01:19] <Geth> ¦ rakudo: Followup to corrections from ugexe.

[01:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7f69ef1d22

[01:19] <Geth> ¦ rakudo: c0c99e77c7 | (Vadim Belman)++ (committed using GitHub Web editor) | t/02-rakudo/15-gh_1202.t

[01:19] <Geth> ¦ rakudo: Merge pull request #2966 from vrurg/rakudo_1202

[01:19] <Geth> ¦ rakudo: 

[01:19] <Geth> ¦ rakudo: Added test for async bug

[01:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c0c99e77c7

[01:52] *** tyilanmenyn joined
[02:02] *** Kaiepi left
[02:16] *** tyilanmenyn is now known as tyil

[02:39] *** squashable6 left
[02:42] *** squashable6 joined
[03:09] *** epony joined
[03:10] *** epony left
[03:11] *** epony joined
[03:20] *** Kaiepi joined
[05:41] *** squashable6 left
[05:47] *** squashable6 joined
[05:47] *** ChanServ sets mode: +v squashable6

[05:51] *** squashable6 left
[05:55] *** squashable6 joined
[08:16] <lizmat> Files=1262, Tests=108018, 205 wallclock secs (26.74 usr  7.78 sys + 2863.29 cusr 283.35 csys = 3181.16 CPU)

[10:50] *** camelia left
[12:35] *** ggoebel joined
[12:59] *** squashable6 left
[13:05] *** squashable6 joined
[13:16] <lizmat> status of from-json re-imagination:

[13:17] <lizmat> 1. passes all but a few pesky encoding tests... (12 in total)

[13:17] <lizmat> 2. parses the 5MB example JSON in 2.3 seconds instead of 3

[13:18] <lizmat> 3. with significantly lower memory usage

[13:18] <lizmat> 4. only hot block not JITted / inlined is the block with nqp::strfromcodes

[13:19] <lizmat> taking a break now to look later at the pesky failing tests

[13:20] <Kaiepi> good work

[13:20] <lizmat> inlining nqp::strfromcodes could probably take it below 2 seconds

[13:20] <lizmat> (it's now taking 40% exclusive time)

[13:21] <lizmat> oh, and the failing tests are for unicode encoding errors not seen as errors

[13:34] <jnthn> Don't see why it'd not be able to inline strfromcodes, but can easily imagine it missing JIT

[13:34] <jnthn> Though I don't expet that's ave much aside from letting the surrounding things be JITted

[13:35] <jnthn> Since that op is backed by C code I guess

[13:35] <jnthn> May be a way to speed it up

[13:57] *** Kaiepi left
[14:01] <jnthn> m: say 'aaa' ~~ /(.)+/

[14:01] <evalable6> jnthn, rakudo-moar c0c99e77c: OUTPUT: «｢aaa｣␤ 0 => ｢a｣␤ 0 => ｢a｣␤ 0 => ｢a｣␤»

[14:02] <jnthn> m: nqp::push(nqp::create(Array), 'x')

[14:02] <evalable6> jnthn, rakudo-moar c0c99e77c: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/MSdmB4KdKk␤Could not find nqp::create, did you forget 'use nqp;' ?␤at /tmp/MSdmB4KdKk:1␤------> 03nqp::push(nqp::create(Array)08⏏04, 'x')␤»

[14:02] <jnthn> m: use nqp; nqp::push(nqp::create(Array), 'x')

[14:02] <evalable6> jnthn, rakudo-moar c0c99e77c: OUTPUT: «(exit code 1) This type (Array) does not support positional operations␤  in block <unit> at /tmp/vBw56o18tz line 1␤␤»

[14:03] <jnthn> heh, https://github.com/rakudo/rakudo/blob/master/src/core/Match.pm6#L79 would be busted were it reachable

[14:04] <jnthn> But the final part of the conditon at https://github.com/rakudo/rakudo/blob/master/src/core/Match.pm6#L64 means it is not

[14:04] <jnthn> I'm guessing it was meant to be negated

[14:04] <jnthn> Debating whether to fix that or just toss the special case

[14:07] *** Kaiepi joined
[15:02] <dogbert17> jnthn: will the stuff you're tinkering with improve parse times?

[16:33] <jnthn> dogbert17: Yes.

[16:33] <jnthn> Or at least, my initial measurements suggest it does; my VM on my home machine is quite noisy on timings, alas.

[16:33] <jnthn> The NQP part will help Rakudo's compilation time, and the Rakudo part should help regexes and grammars.

[16:37] <jnthn> Not tinkered much more today, though...expect the travel next week will be tiring, so should rest up well.

[16:43] *** ggoebel left
[17:03] <Kaiepi> i looked through some of the js vm's code but my node's too rusty to do the big refactors i want to do

[17:04] <Kaiepi> mainly i really, really don't like how STable.ObjConstructor is handled

[17:05] <Kaiepi> i'm thinking there's a way to write it so it doesn't use Proxy since Proxy has terrible performance and isn't intended to be object prototypes anyways

[17:06] <Kaiepi> something like an ES5 constructor or Object.create would probably work better

[17:20] <Kaiepi> actually re-reading it i don't think it's possible not to use Proxy in its current implementation

[17:21] <Kaiepi> global-context.js could certainly be refactored to just export one instance of a GlobalContext class though 

[18:05] <vrurg> jnthn: if you have 5 mins, just your "go/no go" for https://github.com/perl6/problem-solving/issues/3

[18:22] *** dogbert11 joined
[18:23] *** vrurg left
[18:23] *** vrurg joined
[18:23] *** pyrimidi_ joined
[18:23] *** dogbert17 left
[18:23] *** pyrimidine left
[18:26] <Geth> ¦ rakudo: 847a2f0d2b | (Kaz Wesley)++ (committed by Nick Logan) | t/04-nativecall/23-incomplete-types.t

[18:26] <Geth> ¦ rakudo: add tests for #2965 (#2967)

[18:26] <Geth> ¦ rakudo: 

[18:26] <Geth> ¦ rakudo: This will segfault until it's built on MoarVM/MoarVM#1116

[18:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/847a2f0d2b

[18:26] <synopsebot> RAKUDO#2965 [closed]: https://github.com/rakudo/rakudo/issues/2965 I can't HAS stub?

[18:27] <ugexe> t\04-nativecall\04-pointers.t

[18:27] <ugexe> failed on windows

[18:27] <ugexe> https://ci.appveyor.com/project/rakudo/rakudo/builds/25152741/job/ma2gr2mg9i7uomsr#L4845

[18:30] <ugexe> https://ci.appveyor.com/project/rakudo/rakudo/builds/25152741/job/ma2gr2mg9i7uomsr?fullLog=true#L2773

[18:31] <ugexe> i got no ideas for this one

[18:56] <Kaiepi> according to an ancient japanese legend an out of date version of nqp-configure is always lurking out of the corner of your eye, waiting to strike when you least expect it

[18:57] <ugexe> t\04-nativecall\04-pointers.t works for me on 2019.03.1, but fails every single time i run it on blead

[18:58] <ugexe> again on windows

[18:59] <timotimo> is that related to the PR that just got merged, i wonder? https://github.com/MoarVM/MoarVM/pull/1116

[18:59] <ugexe> maybe, but i dont see how

[18:59] <timotimo> yeah, that PR makes it throw exceptions; what does the failure look like?

[19:01] <ugexe> no exceptions. looks like incorrect sizes

[19:02] <timotimo> oh? like nativesizeof returns the wrong thing?

[19:02] <ugexe> https://ci.appveyor.com/project/rakudo/rakudo/builds/25152741/job/ma2gr2mg9i7uomsr?fullLog=true#L2773

[19:05] <ugexe> sure seems like rebuilding moar on windows is broken too.it just gets stuck at "Generating code"

[19:06] <ugexe> i think it might be time we require green builds to put stuff into master

[19:07] <ugexe> the first windows issue made things red, and then 3 other windows regressions snuck in

[19:08] *** AlexDaniel joined
[19:08] <dogbert11> there are also lots of spectext fails on (Linux) 32 bit

[19:08] <dogbert11> *spectest

[19:10] <ugexe> dogbert11: did you try on master? the mp_digit thing should be fixed

[19:11] <dogbert11> ugexe: yes I tried master

[19:13] <dogbert11> switching bigintops.c to the version released with 2019.03.1 makes all errors go away

[19:13] <ugexe> i wonder if the spectest can be run fast enough to finish on a CI run

[19:13] *** travis-ci joined
[19:13] <travis-ci> Rakudo build failed. Kaz Wesley 'add tests for #2965 (#2967)

[19:13] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/543453547 https://github.com/rakudo/rakudo/compare/c0c99e77c70d...847a2f0d2b5e

[19:13] *** travis-ci left
[19:13] <ugexe> could be on a once-a-day cron or something

[19:15] <ugexe> looks like the new guy is off the hook for his two PRs at least

[19:18] <timotimo> appveyor gives us 60 minutes of life time for each vm

[19:43] <Kaiepi> js backend rakudo builds are broken but i'm working on a fix for it

[19:43] <Kaiepi> i think it's just a config error

[19:44] <Kaiepi> i'll find out when all three backends finish building

[20:00] <b2gills> That last commit shouldn't have been applied until after a MoarVM and NQP bump.

[20:01] <ugexe> well the current windows failure goes back at least to last month

[20:02] <b2gills> It broke my build script

[20:02] <b2gills> It also breaks --gen-moar

[20:03] <ugexe> anything that builds rakudo master without building moar master is already broke

[20:03] <ugexe> if you are building HEAD then you should be using --gen-moar=HEAD. sure you dont*have* to but then situations like this shouldnt be surprising

[20:04] <b2gills> My build script uses NQP_REVISION to checkout NQP, and MOAR_REVISION to checkout MoarVM. It works very reliably.

[20:04] <ugexe> by sheer coincidence it has worked reliably based on the times you happened to run it

[20:05] <b2gills> It works reliably because most commits that require a NQP or MoarVM bump are applied after said bump.

[20:06] <ugexe> im not sure you can quantify that "most" because my instinct tells me its not

[20:07] <b2gills> I purposely rebuild on commits that may be broken because of issues like that.

[20:07] <ugexe> CI will already catch those, as well as show that --gen-moar=HEAD indeed works

[20:08] <b2gills> Which it just did catch.

[20:09] <ugexe> ...yes

[20:10] <ugexe> it is almost like we wanted to see if --gen-moar=HEAD was fixed

[20:10] <ugexe> but really we wanted to break everyones build scripts on blead

[20:11] <b2gills> I purposely made it so that it worked like --gen-moar, even though that is more work

[20:13] <ugexe> im done trying to find this windows regression so bump away

[20:29] *** |Tux| left
[20:35] <Geth> ¦ nqp: f2b319db94 | (Nick Logan)++ (committed using GitHub Web editor) | tools/templates/MOAR_REVISION

[20:35] <Geth> ¦ nqp: Bump MoarVM

[20:35] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f2b319db94

[20:36] <Geth> ¦ rakudo: 80a5a41a06 | (Nick Logan)++ (committed using GitHub Web editor) | tools/templates/NQP_REVISION

[20:36] <Geth> ¦ rakudo: Bump NQP

[20:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/80a5a41a06

[20:37] <Geth> ¦ rakudo: b8669fe6f5 | (Nick Logan)++ (committed using GitHub Web editor) | tools/templates/NQP_REVISION

[20:37] <Geth> ¦ rakudo: Bump NQP

[20:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b8669fe6f5

[20:54] <lizmat> hmmm... after this upgrade, I'm getting MVMArray: slice index out of bound  :-(

[20:56] <ugexe> oops. i didnt spectest, i had tunnel vision re: CI going green

[20:56] <lizmat> in code that worked before the upgrade

[20:57] * lizmat also runs spectest

[20:59] <lizmat> showing the values before the nqp::slice, it shows valid values  :-(

[21:00] <MasterDuke> lizmat: what's the code?

[21:01] <lizmat> start_pos = 1787140, end_pos = 1787152, elems = 5173603

[21:01] <lizmat> both values are within the 5M buffer, and start_pos is before the end_pos

[21:01] <lizmat> yet it decides to MVMArray: Slice index out of bounds

[21:02] <lizmat> ugexe: spectest is clean for me

[21:05] <lizmat> problem goes away with MVM_JIT_DISABLE=1

[21:06] <lizmat> and returns with MVM_JIT_EXPR_DISABLE=1

[21:07] <lizmat> since the actual code does nqp;:strfromcodes(nqp::slice(...))

[21:07] <lizmat> and this moar has a JITted nqp::strfromcodes

[21:08] <ugexe> i was just gonna say... try reverting 6053919 heh

[21:08] <lizmat> I have to assume that the problem is really with nqp::strfromcodes 

[21:12] <MasterDuke> lizmat: got a golf to share?

[21:12] <lizmat> alas, not really... it happens when running the new "from-json" on a 5MB unpretty JSON file

[21:13] <ugexe> hmm. i ran my jit change on the ecosystem json 50 times as a benchmark

[21:13] <lizmat> the JSON::Fast test-suite passes (apart from a known issue wrt to wrongly encoded \u sequences

[21:13] <ugexe> ah but it wouldnt have *your* new code

[21:14] <MasterDuke> lizmat: hm, well mind sharing the json file? i can try adding some context to the 'MVMArray: Slice index out of bounds' error message to see if it helps

[21:15] <lizmat> MasterDuke: sorry, cannot share that with you  :-(

[21:15] <MasterDuke> k, np

[21:16] *** |Tux| joined
[21:20] <lizmat> hmmm... I seem to be able to work around it by putting the nqp::slice into a separate sub, and call that inside the nqp::strfromcodes

[21:23] *** squashable6 left
[21:24] *** squashable6 joined
[21:26] <lizmat> also: --profile appears to be borked

[21:27] <ugexe> lizmat: maybe try reverting b55658b ? thats a different jit commit (so the op should still get jitted)

[21:27] <lizmat> the first 4 routines in the profile, all have exactly 25%, and the rest all 0%

[21:27] <lizmat> (exclusive time)

[21:27] *** travis-ci joined
[21:27] <travis-ci> Rakudo build passed. Nick Logan 'Bump NQP'

[21:27] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/543481558 https://github.com/rakudo/rakudo/compare/80a5a41a066e...b8669fe6f581

[21:27] *** travis-ci left
[21:28] <lizmat> with the first 4 entries having more exclusive time than inclusive time

[21:28] <MasterDuke> lizmat: hm, that's likely a result of my recent change

[21:32] <lizmat> MasterDuke: https://gist.github.com/lizmat/2ed4732f8acff8bba03aa371a130b78c

[21:32] <lizmat> 2 profiles: the first ok, the second borked, basically the same code run

[21:38] <MasterDuke> hm, i put in a check for that kind of overflow, but it wasn't *completely* rigorous. maybe that does in fact need to be beefed up...

[21:40] <lizmat> m: use nqp; my uint32 @a = 65..127; nqp::strfromcodes(nqp::slice(@a,10,13)) for ^100000

[21:40] <evalable6> lizmat, rakudo-moar b8669fe6f: OUTPUT: «(exit code 1) MVMArray: Slice index out of bounds␤  in block <unit> at /tmp/R0WWal2rkf line 1␤␤»

[21:41] <lizmat> ugexe: ^^^ golf

[21:49] <jnthn> D'oh, managed to pour boiling water over my fingers while cooking and it hurt too much to type for a few hours :/

[21:51] <ugexe> lizmat: it must be my commit that breaks it. but there is nothing wrong with my commit either as far as i can tell

[21:52] <lizmat> yeah, so maybe it's tickling an underlying bug in the JIT

[21:53] <lizmat> the fact that it happens at 57251, but not at 57250 iterations, feels like an inlining / OSR issue

[21:53] <ugexe> locally for me it always happens between 3000-4000, otherwise it finishes

[21:54] <ugexe> use nqp; my uint32 @a = 65..127; say($++) && nqp::strfromcodes(nqp::slice(@a,10,13)) for ^100000 # although this say probably slows it down alot

[21:58] <lizmat> yeah, for ma as well, around 3800

[22:15] * lizmat calls it a day

[22:16] <Geth> ¦ nqp/match-speedup: 335434dbb4 | (Jonathan Worthington)++ | src/core/NQPRoutine.nqp

[22:16] <Geth> ¦ nqp/match-speedup: Bring back the onlyname optimization

[22:16] <Geth> ¦ nqp/match-speedup: review: https://github.com/perl6/nqp/commit/335434dbb4

[22:35] <Geth> ¦ nqp/match-speedup: 63d4b74efc | (Jonathan Worthington)++ | src/core/NQPRoutine.nqp

[22:35] <Geth> ¦ nqp/match-speedup: Use flags/bitmask to cheapen/avoid some work

[22:35] <Geth> ¦ nqp/match-speedup: 

[22:35] <Geth> ¦ nqp/match-speedup: Now cheaper to see if we have any captures at all, and if so to find out

[22:35] <Geth> ¦ nqp/match-speedup: if any of them are quantified, which saves effort when none of them are.

[22:35] <Geth> ¦ nqp/match-speedup: review: https://github.com/perl6/nqp/commit/63d4b74efc

[23:19] <MasterDuke> lizmat: do you happen to have some code you can share to generate the broken profile?

[23:34] <jnthn> Urgh, `make` will now go and try to helpfully rebuild NQP for me? :/

[23:34] <jnthn> How do I get my "I worked on this thing for 10+ years and know what I'm doing" behavior back?

[23:35] <jnthn> I can kinda live with it automatically doing that as a default at configure time

[23:37] <jnthn> Well, maybe, but I think I still want an option to just complain about the NQP being out of date

[23:37] <jnthn> Since otherwise it goes and leaves my development NQP repo with a detached head

[23:38] <Geth> ¦ rakudo/match-speedup: 4 commits pushed by (Jonathan Worthington)++

[23:38] <Geth> ¦ rakudo/match-speedup: 6fffe2d941 | Re-arrange top level of Match construction

[23:38] <Geth> ¦ rakudo/match-speedup: 71966a1f10 | Cheapean Match object construction

[23:38] <Geth> ¦ rakudo/match-speedup: 5af9f9780f | Tune handling of positional captures

[23:38] <Geth> ¦ rakudo/match-speedup: b5c354d9e6 | Fast-path for integer case of Str.Numeric

[23:38] <Geth> ¦ rakudo/match-speedup: review: https://github.com/rakudo/rakudo/compare/6fffe2d9417e^...b5c354d9e65e

[23:39] <jnthn> sleep &

[23:39] <evalable6> jnthn, rakudo-moar b8669fe6f: OUTPUT: «Use of uninitialized value of type Callable in numeric context␤  in block <unit> at /tmp/9…»

[23:39] <evalable6> jnthn, Full output: https://gist.github.com/cd7a4c31f6c3bf8fbd05446571f2555b

