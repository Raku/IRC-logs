[02:17] *** epony left
[04:02] *** epony joined
[04:08] *** gugod left
[05:24] <Kaiepi> why does $*W.add_object_if_no_sc get called for enum values, but not the enum itself?

[05:41] <lizmat> Files=1275, Tests=108136, 206 wallclock secs (26.53 usr  7.26 sys + 2876.03 cusr 278.92 csys = 3188.74 CPU)

[06:07] *** zostay_ joined
[06:14] *** ZombieByte joined
[06:15] *** zostay left
[06:15] *** tailgate left
[06:15] *** zostay_ is now known as zostay

[06:22] *** tailgate joined
[06:50] <Kaiepi> m: sub commit-a-sin { my $curlex := $*W.pop_lexpad; $*W.install_lexical_symbol: $*W.cur_lexpad, 'lmao', 'lmao'; $*W.push_lexpad: $curlex }; BEGIN commit-a-sin

[06:50] <camelia> rakudo-moar 865238697: ( no output )

[06:50] <Kaiepi> m: sub commit-a-sin { my $curlex := $*W.pop_lexpad; $*W.install_lexical_symbol: $*W.cur_lexpad, 'lmao', 'lmao'; $*W.push_lexpad: $curlex }; { BEGIN commit-a-sin }

[06:50] <camelia> rakudo-moar 865238697: OUTPUT: «===SORRY!===␤Internal error: find_var_decl could not find $_␤»

[06:50] <Kaiepi> is this a bug or am i just doing something i'm really not supposed to be doing?

[07:03] * [Tux] just spotted yet another advantage of kebab-style: the '-' never disappears, where the '_' will disappear on *some* fonts* in *some* editors under *some* conditions

[07:04] <[Tux]> (I just had to use a graphic editor on some old linux box over ssh, with antialiassing and a weird font and I did not understand the code at all. All syntax errors to my eyes till I noticed that all '_' showed as spaces.

[07:14] <[Tux]> Rakudo version 2019.03.1-648-g865238697 - MoarVM version 2019.05-91-g81e5cbf2a

[07:14] <[Tux]> csv-test-xs-20      0.431 -  0.439

[07:14] <[Tux]> csv-ip5xs           0.695 -  0.731

[07:14] <[Tux]> test-t --race       0.830 -  0.839

[07:14] <[Tux]> test-t              1.719 -  1.734

[07:14] <[Tux]> csv-ip5xs-20        5.426 -  5.604

[07:14] <[Tux]> test                6.828 -  7.221

[07:14] <[Tux]> test-t-20 --race    9.578 - 11.079

[07:14] <[Tux]> csv-parser         24.314 - 24.665

[07:14] <[Tux]> test-t-20          29.279 - 30.361

[07:15] *** patrickb joined
[07:59] *** epony left
[08:21] *** robertle_ joined
[08:23] *** epony joined
[08:43] *** squashable6 left
[08:47] *** squashable6 joined
[08:52] <robertle_> after reading https://perl6.online/2019/06/24/102-insertion-sort-in-perl-6/ I am wondering what the time complexity of splice() itself is. I am experimenting, but am getting pretty erratic results, I guess optimization or so wreaks havoc on my tests. I guess it's going to be pretty linear with the size of the array in the general case?

[10:38] *** BeastieBot joined
[11:44] *** brrt joined
[11:44] <brrt> .seen jmerello

[11:44] <yoleaux> I haven't seen jmerello around.

[11:55] <tobs> brrt: do you mean

[11:55] <tobs> .seen jmerelo

[11:55] <yoleaux> I saw jmerelo 23 Jun 2019 05:30Z in #perl6: <jmerelo> releasable6: status

[11:56] <Kaiepi> <Kaiepi> is this a bug or am i just doing something i'm really not supposed to be doing?

[11:56] <Kaiepi> never mind i was doing it wrong

[11:57] <Kaiepi> m: sub commit-a-sin { $*W.install_lexical_symbol: $*W.context.blocks[+$*W.context.blocks - 2], 'lmao', 'lmao' }; { BEGIN commit-a-sin }; say lmao

[11:57] <camelia> rakudo-moar 865238697: OUTPUT: «lmao␤»

[12:02] <Kaiepi> thought $*W.push_lexpad took an ast as an argument, it doesn't

[12:30] *** lucasb joined
[12:37] <brrt> thanks tobs

[12:57] *** pamplemousse joined
[13:02] *** ggoebel left
[13:04] *** pamplemousse left
[13:05] *** pamplemousse joined
[13:23] *** brrt left
[13:27] <lizmat> reportable6: 2019-06-17T12:00:00 2019-06-24T00:00:00Z

[13:27] <reportable6> lizmat, OK, working on it! This may take up to 40 seconds

[13:28] <reportable6> lizmat, https://gist.github.com/3062fbed3e6f47e056cbf16ccfc182f7

[13:44] <[Coke]> team: I hope everyone is having a great day.

[13:45] <kawaii> You too!

[13:48] <Geth> ¦ rakudo/master: 6 commits pushed by (Vadim Belman)++

[13:48] <Geth> ¦ rakudo/master: 8b9c7f7097 | Revert "Decontainerize non-scalar symbols upon import"

[13:48] <Geth> ¦ rakudo/master: 3979acc28f | Merge branch 'master' of https://github.com/rakudo/rakudo into rakudo_3012

[13:48] <Geth> ¦ rakudo/master: 93f20871e0 | Implement more fine-grained deconting of exported symbols

[13:48] <Geth> ¦ rakudo/master: b87f7971ba | Merge branch 'master' of https://github.com/rakudo/rakudo into rakudo_3012

[13:48] <Geth> ¦ rakudo/master: 28d8eb032c | Small optimization

[13:48] <Geth> ¦ rakudo/master: e98e42eaf6 | Merge pull request #3016 from vrurg/rakudo_3012

[13:48] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/865238697405...e98e42eaf6ca

[13:57] <lizmat> notable6: weekly

[13:57] <notable6> lizmat, 13 notes: https://gist.github.com/6e3e47ed0e24d0e710ebb59865f4c482

[14:00] <lizmat> notable6: weekly reset

[14:00] <notable6> lizmat, Moved existing notes to “weekly_2019-06-24T14:00:41Z”

[14:03] *** ggoebel joined
[14:24] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/06/24/2019-25-on-toolsets/

[14:28] <Geth> ¦ rakudo: vrurg++ created pull request #3019: Typecheck against nqp::what() not the object itself.

[14:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3019

[14:29] <vrurg> lizmat++

[14:36] <Geth> ¦ rakudo: f62cf1bf4f | (Vadim Belman)++ | src/Perl6/World.nqp

[14:36] <Geth> ¦ rakudo: Typecheck against nqp::what() not the object itself.

[14:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f62cf1bf4f

[14:36] <Geth> ¦ rakudo: 577265d7ca | niner++ (committed using GitHub Web editor) | src/Perl6/World.nqp

[14:36] <Geth> ¦ rakudo: Merge pull request #3019 from vrurg/rakudo_3012

[14:36] <Geth> ¦ rakudo: 

[14:36] <Geth> ¦ rakudo: Typecheck against nqp::what() not the object itself.

[14:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/577265d7ca

[14:57] *** ufobat joined
[15:13] *** robertle_ left
[15:18] *** patrickb left
[15:46] *** pamplemousse left
[15:46] *** pamplemousse joined
[16:11] *** gugod joined
[16:14] <Kaiepi> m: { say MY.WHO.WHICH }

[16:14] <camelia> rakudo-moar 577265d7c: OUTPUT: «Cannot call method 'WHICH' on a null object␤  in block <unit> at <tmp> line 1␤␤»

[16:15] <Kaiepi> m: { say MY.WHO.Map::WHICH }

[16:15] <camelia> rakudo-moar 577265d7c: OUTPUT: «Cannot call method 'WHICH' on a null object␤  in block <unit> at <tmp> line 1␤␤»

[16:15] <Kaiepi> the wrong dispatchee is indeed getting called

[16:15] <Kaiepi> PseudoStash.EXISTS-KEY isn't a multi and has this comment:     # for some reason we get a ambiguous dispatch error by making this a multi

[16:16] <Kaiepi> should PseudoStash.WHICH also not be a multi or would it be a better idea to look deeper into why the error's happening with both these methods?

[16:17] *** vrurg left
[16:47] <Kaiepi> ...ohhh, i see what the problem is lmao

[16:47] <Kaiepi> >method WHICH(PseudoStash:D --> ObjAt:D) { self.Mu::WHICH }

[16:47] <Kaiepi> >not method WHICH(PseudoStash:D: --> ObjAt:D) { self.Mu::WHICH }

[16:54] <Geth> ¦ rakudo: Kaiepi++ created pull request #3020: Fix PseudoStash.WHICH's signature

[16:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3020

[17:05] <Geth> ¦ rakudo: 66d92c6219 | (Ben Davies)++ | src/core/PseudoStash.pm6

[17:05] <Geth> ¦ rakudo: Fix PseudoStash.WHICH's signature

[17:05] <Geth> ¦ rakudo: 

[17:05] <Geth> ¦ rakudo: It included PseudoStash:D as an argument when it's supposed to be the

[17:05] <Geth> ¦ rakudo: type of the object itself.

[17:05] <Geth> ¦ rakudo: 

[17:05] <Geth> ¦ rakudo: Fixes #3018

[17:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/66d92c6219

[17:05] <synopsebot_> RAKUDO#3018 [closed]: https://github.com/rakudo/rakudo/issues/3018 Regression in PseudoStash.WHICH

[17:05] <Geth> ¦ rakudo: e35180dc31 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core/PseudoStash.pm6

[17:05] <Geth> ¦ rakudo: Merge pull request #3020 from Kaiepi/pseudostash-which

[17:05] <Geth> ¦ rakudo: 

[17:05] <Geth> ¦ rakudo: Fix PseudoStash.WHICH's signature

[17:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e35180dc31

[17:18] *** pamplemousse left
[17:19] *** pamplemousse joined
[17:20] *** ggoebel left
[17:20] *** BeastieBot left
[17:29] *** BeastieBot joined
[17:36] *** ggoebel joined
[17:44] <dogbert17> lizmat: stupid signature question, why isn't this signature Bag:D: ? https://github.com/rakudo/rakudo/blob/master/src/core/Bag.pm6#L71

[17:56] *** pamplemousse left
[18:21] *** Kaiepi left
[18:22] *** Kaiepi joined
[18:22] *** eponym joined
[18:23] *** eponym left
[18:42] *** ZombieByte left
[19:00] <AlexDaniel> kawaii: mm, the changelog needs some doing :)

[19:02] <timotimo> dogbert17: yeah, that looks like it wants : there as well

[19:07] <timotimo> and MaxHash, too, of course, but i'm sure you already saw that

[19:25] <lizmat> m: dd <a b c>.Bag.BagHash

[19:25] <camelia> rakudo-moar e35180dc3: OUTPUT: «("a"=>1,"c"=>1,"b"=>1).BagHash␤»

[19:25] <lizmat> hmmm... how does that work then ?

[19:26] <lizmat> I guess it took the Any.BagHash variant

[19:26] <timotimo> m: say <a b c>.Bag.^lookup("BagHash").filename

[19:26] <camelia> rakudo-moar e35180dc3: OUTPUT: «No such method 'filename' for invocant of type 'Method+{is-nodal}'␤  in block <unit> at <tmp> line 1␤␤»

[19:26] <timotimo> m: say <a b c>.Bag.^lookup("BagHash").file

[19:26] <camelia> rakudo-moar e35180dc3: OUTPUT: «SETTING::src/core/Any.pm6␤»

[19:26] <timotimo> m: say <a b c>.Bag.^lookup("BagHash").line

[19:26] <camelia> rakudo-moar e35180dc3: OUTPUT: «454␤»

[19:27] <lizmat> yep, that's the one

[19:27] <dogbert17> dunno, but I'm no signature expert. I did get inspired by kaiepi++ PR above and started to look for suspects

[19:27] <timotimo> oh, that's the proto

[19:27] <timotimo> m: say <a b c>.Bag.^can("BagHash", \())

[19:27] <camelia> rakudo-moar e35180dc3: OUTPUT: «Too many positionals passed; expected 3 arguments but got 4␤  in block <unit> at <tmp> line 1␤␤»

[19:27] <timotimo> m: say <a b c>.Bag.^cando("BagHash", \())

[19:27] <camelia> rakudo-moar e35180dc3: OUTPUT: «No such method 'cando' for invocant of type 'Perl6::Metamodel::ClassHOW+{<anon>}+{<anon>}'. Did you mean 'can'?␤  in block <unit> at <tmp> line 1␤␤»

[19:27] <timotimo> how do you spell that again ...

[19:28] <lizmat> dogbert17: already testing with 3 places fixed

[19:28] <dogbert17> did you make a fix in Set.pm6 as well?

[19:28] <Geth> ¦ rakudo: 8969399b31 | (Elizabeth Mattijsen)++ | 2 files

[19:28] <Geth> ¦ rakudo: Add a few missing colons, spotted by dogbert++

[19:28] <Geth> ¦ rakudo: 

[19:28] <Geth> ¦ rakudo: There were no issues because of this, as the Any variant did the

[19:28] <Geth> ¦ rakudo: right thing, albeit much less efficiently

[19:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8969399b31

[19:29] <lizmat> dogbert17: where in Set ?

[19:29] <dogbert17> src/core/Set.pm6:    multi method grabpairs(Set:D $count?) {

[19:29] <lizmat> good catch!

[19:30] <dogbert17> that's all I found but my search was a bit sloppy so there might possibly be more

[19:30] <lizmat> m: say <a b c>.Set.grabpairs

[19:30] <camelia> rakudo-moar e35180dc3: OUTPUT: «Parameter '$count' of routine 'grabpairs' must be an object instance of type 'Set', not a type object of type 'Set'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[19:31] <lizmat> it dies, which it should  :-)

[19:32] <lizmat> $ 6 'say <a b c>.Set.grabpairs'

[19:32] <lizmat> Cannot call 'grabpairs' on an immutable 'Set'

[19:32] <lizmat> but that is better ^^  :-)

[19:32] <dogbert17> Iaha

[19:32] <dogbert17> *aha

[19:33] <Geth> ¦ rakudo: 9b639961c0 | (Elizabeth Mattijsen)++ | src/core/Set.pm6

[19:33] <Geth> ¦ rakudo: Another missing colon, spotted by dogbert++

[19:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9b639961c0

[19:33] <dogbert17> perhaps AlexDaniel has a bot which can check the Rakudop codebase :)

[19:34] <AlexDaniel> not yet :)

[19:34] <AlexDaniel> dogbert17: git grep?

[19:34] <AlexDaniel> :)

[19:35] <dogbert17> I used normal grep which might not have been optimal

[19:35] <kawaii> AlexDaniel: yes I noticed, pretty big gap so lots to do, probably make a start on that tomorrow with your guidance? Not 100% sure which commits deserve their own changelog entries and such - will need to run those by you

[19:35] <kawaii> I gather that there is a tool which can do some of this work for me IIRC

[19:36] <AlexDaniel> kawaii: I usually start by removing some junk – reverted commits, merge commits, other stuff

[19:36] <AlexDaniel> commits that touch comments only, whitespace, tests, etc.

[19:37] <AlexDaniel> then I move the stuff that needs to be changelogged into the categories

[19:37] <AlexDaniel> and finally I reword the commit messages so that they're consistent

[19:37] <AlexDaniel> usually all that is done in like 5 passes or so… I'm really slow at it

[19:38] <AlexDaniel> would've been easier if I was a native speaker :)

[19:44] <lizmat> dogbert17: thanks for the spots!   I haven't been able to spot any others

[19:45] <dogbert17> thanks for looking, perhaps we got all of them

[19:45] <lizmat> hopefully, yes  :-)

[19:46] <dogbert17> btw, is timotimo still lurking around :)

[19:46] <lizmat> he said he was going to afk for a bit

[19:47] <Kaiepi> m: say Mix.new('a' => 1).^lookup('MixHash').file

[19:47] <camelia> rakudo-moar e35180dc3: OUTPUT: «SETTING::src/core/Any.pm6␤»

[19:47] <Kaiepi> another one

[19:49] <dogbert17> ah, I'll catch him a bit later then

[19:50] <lizmat> Kaiepi: I think I just fixed that one

[19:50] <Kaiepi> oh

[19:51] <Kaiepi> i just ran egrep on src/core and am going through all the files for any missing colons

[19:51] <lizmat> did you just do  git pull ?

[19:51] <Kaiepi> not since my commit was merged

[19:52] <lizmat> then you should  :-)

[19:56] <Kaiepi> doesn't look like there's anything apart from that that's the same kind of error

[19:57] <Kaiepi> there is this though

[19:57] <Kaiepi> m: IterationBuffer.push: 1

[19:57] <camelia> rakudo-moar 9b639961c: OUTPUT: «(signal SEGV)»

[19:57] <Kaiepi> m: IterationBuffer.elems

[19:57] <camelia> rakudo-moar 9b639961c: OUTPUT: «elems requires a concrete object (got a IterationBuffer type object instead)␤  in block <unit> at <tmp> line 1␤␤»

[19:57] <lizmat> interesting...

[19:57] <Kaiepi> m: IterationBuffer.append: IterationBuffer.new

[19:57] <camelia> rakudo-moar 9b639961c: OUTPUT: «elems requires a concrete object (got a IterationBuffer type object instead)␤  in block <unit> at <tmp> line 1␤␤»

[19:57] <Kaiepi> they're missing an IterationBuffer:D: at the beginning

[19:58] <lizmat> m: class A is repr("VMArray") { }.push: 1

[19:58] <camelia> rakudo-moar 9b639961c: OUTPUT: «Cannot modify an immutable 'A' type object␤  in block <unit> at <tmp> line 1␤␤»

[19:59] <lizmat> m: (class A is repr("VMArray") { }).push: 1

[19:59] <camelia> rakudo-moar 9b639961c: OUTPUT: «Cannot modify an immutable 'A' type object␤  in block <unit> at <tmp> line 1␤␤»

[19:59] <lizmat> hhmmm

[20:00] <lizmat> Kaiepi: if you're to add signatures / multis there, you should keep track that it doesn't affect performance too much  :-)

[20:00] <Kaiepi> m: use nqp; nqp::push(class A is repr('VMArray') {}, 1)

[20:00] <camelia> rakudo-moar 9b639961c: OUTPUT: «(signal SEGV)»

[20:00] <kawaii> AlexDaniel: we should probably pick a commit to pin 2019.06 to then, as people will continue to commit well past us prepping the release

[20:01] <lizmat> "This type is engineered for performance over friendliness, and should not be encountered in normal use of Perl 6. Do NOT add any checks and validation to methods in here. They need to remain trivially inlineable for performance reasons.

[20:01] <AlexDaniel> you mean start a release branch

[20:01] <AlexDaniel> not really until most of the blockers are fixed

[20:02] <MasterDuke> lizmat: hm, but maybe we can still prevent a segv?

[20:03] <Kaiepi> how can i test the performance of iterationbuffer? if changing the signature reduces it, i could see if i could make a fix for nqp::push in moarvm

[20:04] <Kaiepi> doubt there'd be much more to it than an IS_CONCRETE check or something along those lines

[20:04] <MasterDuke> a backtrace of that segv if anyone is interested https://gist.github.com/MasterDuke17/6a36951a69019bcf8afd76e611286c1e

[20:04] <lizmat> Kaiepi: whatever is done, I think jnthn would need to greenlight it

[20:08] <Kaiepi> bastille% perl6 -Mnqp -e 'nqp::push(IterationBuffer, 1)'

[20:08] <Kaiepi> MVMArray: push expected a concrete object with MVMArray representation

[20:08] <Kaiepi>   in block <unit> at -e line 1

[20:08] <Kaiepi> yeah it's just an IS_CONCRETE check

[20:08] <lizmat> Kaiepi: so how come it segfaults in Perl 6, but not in nqp ?

[20:09] <Geth> ¦ roast: a178a561aa | (Elizabeth Mattijsen)++ | 6 files

[20:09] <Geth> ¦ roast: Add tests for inter-QuantHash coercions

[20:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a178a561aa

[20:11] <Kaiepi> wdym lizmat? it doesn't

[20:11] <Kaiepi> bastille% nqp -e 'nqp::push(NQPArray, 1)'

[20:11] <Kaiepi> zsh: bus error (core dumped)  nqp -e 'nqp::push(NQPArray, 1)'

[20:11] <Kaiepi> oh wait

[20:13] <lizmat> m: IterationBuffer.push: 1

[20:13] <camelia> rakudo-moar 9b639961c: OUTPUT: «(signal SEGV)»

[20:13] <Kaiepi> thought it didn't have the REPR for a sec, but it does

[20:13] <Kaiepi> so it doesn't work in nqp either

[20:13] <Kaiepi> m: nqp::push(class :: {}, 1)

[20:13] <camelia> rakudo-moar 9b639961c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::push, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3nqp::push(class :: {}, 1)7⏏5<EOL>␤»

[20:13] <Kaiepi> m: use nqp; nqp::push(class :: {}, 1)

[20:13] <camelia> rakudo-moar 9b639961c: OUTPUT: «This type (<anon|1>) does not support positional operations␤  in block <unit> at <tmp> line 1␤␤»

[20:19] <Kaiepi> hm there's more than just nqp::push that could use a check like that

[20:20] <Kaiepi> m: nqp::atpos(IterationBuffer, 0)

[20:20] <camelia> rakudo-moar 9b639961c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::atpos, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3nqp::atpos(IterationBuffer, 0)7⏏5<EOL>␤»

[20:20] <Kaiepi> m: use nqp; nqp::atpos(IterationBuffer, 0)

[20:20] <camelia> rakudo-moar 9b639961c: ( no output )

[20:20] <Kaiepi> or not

[20:25] <Kaiepi> ok good thing i checked how/whether the other ops check it or not, i wrote it the wrong way originally

[20:25] <lizmat> m: use nqp; nqp::say(~nqp::atpos(IterationBuffer, 0))

[20:25] <camelia> rakudo-moar 9b639961c: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Any but got Mu (Mu)␤  in block <unit> at <tmp> line 1␤␤»

[20:25] <lizmat> m: use nqp; nqp::say(nqp::atpos(IterationBuffer, 0))

[20:25] <camelia> rakudo-moar 9b639961c: OUTPUT: «Cannot unbox a type object (VMNull) to a str.␤  in block <unit> at <tmp> line 1␤␤»

[20:26] * lizmat wonders what ASAN would have to say to that ^^^

[20:26] <lizmat> m: use nqp; nqp::say(nqp::atpos(IterationBuffer, 1))

[20:26] <camelia> rakudo-moar 9b639961c: OUTPUT: «Cannot unbox a type object (VMNull) to a str.␤  in block <unit> at <tmp> line 1␤␤»

[20:26] <lizmat> m: use nqp; nqp::atpos(IterationBuffer, 1)

[20:26] <camelia> rakudo-moar 9b639961c: ( no output )

[20:26] <lizmat> m: use nqp; nqp::atpos(IterationBuffer, 9999)

[20:26] <camelia> rakudo-moar 9b639961c: ( no output )

[20:26] <lizmat> yikes

[20:27] <Kaiepi> m: use nqp; nqp::bindpos(IterationBuffer, 0, 1)

[20:27] <camelia> rakudo-moar 9b639961c: OUTPUT: «(signal SEGV)»

[20:27] <Kaiepi> another one

[20:28] <Kaiepi> lizmat, that just returns VMNull, it doesn't do anything scary

[20:29] <lizmat> for *any* index value ?

[20:30] <Kaiepi> if the object it's called on isn't concrete, yes

[20:30] <Kaiepi> i'm more worried about this

[20:30] <Kaiepi> m: nqp::atpos_i(IterationBuffer, 9999)

[20:30] <camelia> rakudo-moar 9b639961c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::atpos_i, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3nqp::atpos_i(IterationBuffer, 9999)7⏏5<EOL>␤»

[20:30] <Kaiepi> m: use nqp; nqp::atpos_i(IterationBuffer, 9999)

[20:30] <camelia> rakudo-moar 9b639961c: OUTPUT: «MVMArray: atpos expected object register␤  in block <unit> at <tmp> line 1␤␤»

[20:31] <Kaiepi> ok good it doesn't do anything too bad, though it could use a clearer error message for this case

[20:33] <Kaiepi> m: use nqp; nqp::pop(IterationBuffer)

[20:33] <camelia> rakudo-moar 9b639961c: OUTPUT: «(signal SEGV)»

[20:34] <Kaiepi> m: use nqp; nqp::shift(IterationBuffer)

[20:34] <camelia> rakudo-moar 9b639961c: OUTPUT: «(signal SEGV)»

[20:34] <Kaiepi> m: use nqp; nqp::unshift(IterationBuffer, 0)

[20:34] <camelia> rakudo-moar 9b639961c: OUTPUT: «(signal SEGV)»

[20:35] <Kaiepi> ok this is bad

[20:35] <Kaiepi> m: use nqp; nqp::splice(IterationBuffer, IterationBuffer, 0, 1)

[20:35] <camelia> rakudo-moar 9b639961c: OUTPUT: «Unable to allocate an array of 18446744069414588416 elements␤  in block <unit> at <tmp> line 1␤␤»

[21:07] <Kaiepi> hm... adding concreteness checks to the array ops that were missing them causes some of feeds' spec tests to fail

[21:10] <Kaiepi> btw what's the status on my feed parallelization pullreq?

[21:15] <lizmat> Kaiepi: I thought that wasn't ready yet ?

[21:16] <Kaiepi> i'm not entirely sure what needs to be done, i remember there was some disagreement over how to implement it or something

[21:21] <jnthn> I thought I'd answered at least the lang design parts of the feed thing on problem-solving; if I missed something let me know what :)

[21:21] <yoleaux> 23 Jun 2019 15:04Z <patrickb> jnthn: I think the install location of perl6.moarvm did not change. It was and is installed to ${RAKUDO_PREFIX}/share/perl6/runtime/perl6.moarvm. Do you still hit a problem with this?

[21:27] <Kaiepi> oh, feed tests don't actually fail with my changes to moarvm, i just forgot to switch back to master after working on the feeds pullreq

[22:00] <Geth> ¦ nqp: cc13c5ec77 | (Timo Paulssen)++ | src/vm/moar/HLL/Backend.nqp

[22:00] <Geth> ¦ nqp: make sure confprog with empty strings read ok

[22:00] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cc13c5ec77

[22:19] <lizmat> weekly: https://wakelift.de/2019/05/22/close-look-at-controlling-moarvm-profiler/

[22:19] <notable6> lizmat, Noted!

[23:00] *** ggoebel left
[23:53] *** ggoebel joined
