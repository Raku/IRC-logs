[00:59] *** travis-ci joined
[00:59] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Add support for the "N$" index feature

[00:59] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/518009216 https://github.com/rakudo/rakudo/compare/417fa68e9f9f...745053891b8b

[00:59] *** travis-ci left
[01:10] *** Kaiepi left
[01:13] *** Kaiepi joined
[01:16] *** lucasb left
[01:23] *** MasterDuke joined
[01:24] *** MasterDuke left
[01:24] *** MasterDuke joined
[01:57] *** epony left
[02:09] *** travis-ci joined
[02:09] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Fix issue with "u"

[02:09] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/518014416 https://github.com/rakudo/rakudo/compare/745053891b8b...d000a12557ae

[02:09] *** travis-ci left
[03:14] *** travis-ci joined
[03:14] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make sure the EVAL doesn't show in any backtraces'

[03:14] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/518017982 https://github.com/rakudo/rakudo/compare/d000a12557ae...dc02335dd972

[03:14] *** travis-ci left
[03:18] *** epony joined
[03:39] *** Xliff joined
[03:39] <Xliff> \o -- Please look at https://gist.github.com/Xliff/ce03bf24897d3b6c86333014c35fd3d5

[03:40] <Xliff> If you've seen it before, please look again. It's been updated.

[05:24] *** robertle left
[05:54] *** vrurg left
[06:08] <ugexe> you change just one file, but that changes the checksum/sha1 of the entire distribution auth/ver/api 

[06:08] <ugexe> that used to not be the case, and I suppose it would have made things much faster in this case. but at the cost of being wrong

[06:10] <ugexe> the old way treated (when using -Ilib) every single file as its own distribution

[06:10] <ugexe> so changing one file would not change the sha1 used to seed the other distributions

[06:13] <ugexe> stale precomps being loaded was a problem, but not obvious because most people's stale precomps probably still did what they wanted

[06:15] <Xliff> OK. 

[06:16] <Xliff> But from an end-user standpoint, all I am seeing is MUCH slower execution of code.

[06:16] <Xliff> I can understand being right.

[06:16] <Xliff> But at that cost point... that's enough to force a change of language.

[06:16] <ugexe> at least the problem is obvious now, unlike before

[06:16] <Xliff> True.

[06:16] <Xliff> But still. That's a bad setback, regardless.

[06:16] <ugexe> require everything as files then

[06:16] <Xliff> Which brings me to another problem.

[06:17] <Xliff> I am using a lot of -I directives. I expect if I compile everything in one dir, then if I -I that lib dir, I should not expect those files to be recompiled again.

[06:18] <Xliff> This is not the case. I switch CWD to another directory and still include that same dir via -I stuff is still recompiled

[06:18] <Xliff> I think this is contributing to the larger recompile times.

[06:18] <ugexe> are you using aboslute paths so the path fed to -I is always the same, and not differing based on being a relative path?

[06:18] <Xliff> No. Relative paths.

[06:19] <Xliff> Why should that matter?

[06:19] <Xliff> I would expect -I to convert relative to absolute, in that case.

[06:19] <ugexe> because of the path is used to seed the sha1 then ./ and ././ are not the same

[06:20] <Xliff> Why is the path using a relative path?

[06:20] <Xliff> I can understand -I being used to see the SHA, but in that case, convert relative to absolute to avoid this problem.

[06:21] <Xliff> It should be as simple as http://man7.org/linux/man-pages/man3/realpath.3.html

[06:22] <ugexe> it probably does, so i wouldnt focus too much on that. im just spit balling on a complex topic 

[06:23] <Xliff> OK. Apologies on this end. My frustration is leaking through.

[06:23] <Xliff> I am trying to second guess design decisions that I have no clue about.

[06:23] <Xliff> I just came up with a use-case (maybe) -- CURI staging?

[06:24] <ugexe> the recompiling related to -I is likely because the next repo in the chain's id is taken into account when seeding its own id

[06:24] <ugexe> so if the repo chain is not the same for two runs then the same -I $PATH will have two different ids

[06:24] <Xliff> OK. So if I start recompiling using absolute paths, I shouldn't see this issue?

[06:25] <Xliff> But now you are telling about repo chain, so even doing abs paths may not help??!? *headdesk*

[06:25] <ugexe> if you run all the commands with absolute paths and using the same -I flags in the same order I think it shoudl go away

[06:25] <ugexe> e.g. do -I dep1 -I dep2 -I dep3 for everything, even if it doesnt depend on e.g. dep2

[06:25] <Xliff> Well. The -I flags are dependencies.

[06:26] <Xliff> Ew.

[06:26] <ugexe> they are CompUnit::RepositoryFileSystem (each one)

[06:27] <ugexe> -I dep1 -Idep2 -Idep3 vs -I dep1 -Idep2 <-- dep1 will have a different id between these two

[06:27] <Xliff> OK. So in my case I have to do -I /home/cbwood/Projects/p6-Pango/lib -I /home/cbwood/Projects/p6-GtkPlus/lib -I /home/cbwood/Projects/p6-SourceViewGTK for *all* of the project dirs listed?

[06:27] <Xliff> Eesh!

[06:27] <Xliff> So compiling Pango:  -I /home/cbwood/Projects/p6-Pango/lib -I /home/cbwood/Projects/p6-GtkPlus/lib -I /home/cbwood/Projects/p6-SourceViewGTK/lib

[06:28] <Xliff> Even though the last 2 are unnecessary.

[06:28] <Xliff> Same with GTK and same with SourceView?

[06:28] <ugexe> i suspect it will work

[06:28] <Xliff> Hahaha!

[06:28] <Xliff> You suspect? OK. I'll be yo huckleberreh.

[06:29] <Xliff> If you see me tomorrow, remind me to recompile *everyzing!*

[06:29] <Xliff> ugexe++ # For dealing with my insanity.

[06:29] <ugexe> good luck

[06:29] <Xliff> Yeah. Thanks. I think I'll need it.

[06:30] <ugexe> there is a CURI staging btw

[06:30] <ugexe> rakudo/lib/CompUnit/Repository/Staging.pm6

[06:40] <Xliff> Yeah.

[06:40] <Xliff> I think you told me about that one.

[06:41] <Xliff> Because there is no way I can unleash p6-GtkPlus on the masses without severe warnings, and a faster install path.

[06:41] <Xliff> Takes over 2100 seconds to do a full compile on all modules.

[07:14] <lizmat> Files=1254, Tests=87994, 386 wallclock secs (20.74 usr  6.61 sys + 2765.40 cusr 230.44 csys = 3023.19 CPU)

[07:30] *** robertle joined
[07:40] <lizmat> afk for most of the day&

[07:56] <Xliff> m: say 1 xx 2, 3

[07:56] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: «(1 1)3␤»

[07:57] <Xliff> m: say |(1 xx 2), 3

[07:57] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: «113␤»

[07:57] <Xliff> m: say |(1 xx 2), 3, 4

[07:57] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: «1134␤»

[07:57] <Xliff> m: say (|(1 xx 2), 3, 4)

[07:57] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: «(1 1 3 4)␤»

[08:16] <Xliff> m: my ($a, $b, $c, $d) =  (|(1 xx 2), 3, 4); say ($a, $b, $c, $d)

[08:16] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: «(1 1 3 4)␤»

[08:16] <Xliff> m: my ($a, $b, $c, $d) =  (|(1 xx 2), 3, 4); say $a; say $b; say $c; say $d

[08:16] <evalable6> Xliff, rakudo-moar dc02335dd: OUTPUT: «1␤1␤3␤4␤»

[11:08] *** AlexDaniel left
[12:25] *** robertle left
[12:27] *** robertle joined
[12:46] *** Kaiepi left
[12:46] *** Kaiepi joined
[12:49] *** MasterDuke left
[13:12] *** Kaiepi left
[13:14] <|Tux|> Rakudo version 2019.03.1-184-gdc02335dd - MoarVM version 2019.03-75-g9b1b60f66

[13:14] <|Tux|> csv-test-xs-20      0.435 -  0.437

[13:14] <|Tux|> csv-ip5xs           0.700 -  0.704

[13:14] <|Tux|> test-t --race       0.886 -  0.890

[13:14] <|Tux|> test-t              1.773 -  1.863

[13:14] <|Tux|> csv-ip5xs-20        5.976 -  6.126

[13:15] <|Tux|> test                7.546 -  7.643

[13:15] <|Tux|> test-t-20 --race   11.565 - 11.775

[13:15] <|Tux|> csv-parser         22.301 - 23.483

[13:15] <|Tux|> test-t-20          30.394 - 30.618

[13:16] *** Kaiepi joined
[13:19] *** vrurg joined
[13:38] *** Kaiepi left
[13:40] *** Kaiepi joined
[14:50] *** Kaiepi left
[14:54] *** Kaiepi joined
[15:15] *** Kaiepi left
[15:16] *** Kaiepi joined
[15:30] *** vrurg left
[15:33] *** vrurg joined
[15:35] *** vrurg left
[15:36] *** vrurg joined
[15:47] *** robertle left
[16:22] *** dogbert17 left
[16:27] *** Kaiepi left
[16:30] *** Kaiepi joined
[16:31] *** AlexDaniel joined
[16:52] *** Kaiepi left
[16:55] *** Kaiepi joined
[17:16] *** vrurg left
[17:16] *** vrurg joined
[17:27] *** lucasb joined
[17:42] *** Kaiepi left
[17:46] *** Kaiepi joined
[18:01] *** lgtaube left
[18:19] *** lgtaube joined
[18:32] <ugexe> on some systems (such as cygwin) libuv's uv_cpu_info can return 0 items, which means nqp::cpucores would be 0. However -- ThreadPoolScheduler does a division by nqp::cpucores which would result in Inf when using that 0

[18:33] <ugexe> i believe ThreadPoolScheduler might be better using `my $... = nqp::cpucores() || 1`

[18:51] <Geth> ¦ nqp: 3921b1e6c7 | usev6++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java

[18:51] <Geth> ¦ nqp: [JVM] Be more picky when trying to rmdir or unlink

[18:51] <Geth> ¦ nqp: 

[18:51] <Geth> ¦ nqp: Throw an exception when trying to rmdir something that isn't

[18:51] <Geth> ¦ nqp: a directory or when trying to unlink a directory.

[18:51] <Geth> ¦ nqp: 

[18:51] <Geth> ¦ nqp: This mimics the behaviour of MoarVM. Also there is a spectest

[18:51] <Geth> ¦ nqp: in S32-io/mkdir_rmdir.t that expects a complaint from an attempt

[18:51] <Geth> ¦ nqp: to rmdir a non-existing directory.

[18:51] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3921b1e6c7

[19:01] <tony-o> that seems sane

[19:43] *** Kaypie joined
[19:50] <Kaiepi> writing the script to bisect R#2824 for me ended up being too big a pain in the ass so i'm doing it manually

[19:50] <synopsebot> R#2824 [open]: https://github.com/rakudo/rakudo/issues/2824 [BLOCKER] Cannot install zef (or run much of anything without MVM_JIT_DISABLE)

[19:50] *** Kaypie left
[20:31] *** sortiz joined
[21:16] *** sortiz left
[22:39] *** ggoebel left
