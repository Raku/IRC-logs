[00:39] *** MasterDuke joined
[00:40] *** MasterDuke left
[00:40] *** MasterDuke joined
[01:31] <mst> .tell patrickb I never actively organised anything, maybe talk to mdk, sorry

[01:31] <yoleaux> mst: I'll pass your message to patrickb.

[01:43] <MasterDuke> moritz: it looks like a bunch of Cro (i.e., the repos under https://github.com/croservices) is missing from perl6-all-modules

[02:41] *** Kaiepi left
[02:43] *** Kaiepi joined
[03:55] *** ufobat joined
[03:57] *** ufobat_ left
[06:16] <moritz> MasterDuke: are these modules? If yes, which ones?

[08:15] *** patrickb joined
[08:30] *** robertle_ joined
[08:54] <lizmat> Files=1266, Tests=88054, 381 wallclock secs (20.57 usr  6.12 sys + 2712.61 cusr 238.26 csys = 2977.56 CPU)

[09:07] <gfldex> m: subset Foo of Str; subset Bar of Str; sub f(Foo $f){}; say [&f.signature ~~ :(Str), &f.signature ~~ :(Bar), &f.signature ~~ :(Foo)];

[09:07] <camelia> rakudo-moar 5b231e099: OUTPUT: «[False True True]␤»

[09:07] <gfldex> is that ^^^ intentional?

[09:28] <lizmat> gfldex: you mean that the first one is False ?

[09:33] <ufobat> i am surprised that the 2nd one is true

[09:37] <lizmat> m: subset A of Str; subset B of Str; dd A ~~ B; dd B ~~ A

[09:37] <camelia> rakudo-moar 5b231e099: OUTPUT: «Bool::True␤Bool::True␤»

[09:37] <lizmat> hmmm

[09:40] <ufobat> because on the other hand a array of Str is not an Array[Str]

[10:12] <lizmat> m: subset A of Str; subset B of Str; use nqp; dd nqp::istype(A,B); dd nqp::istype(B,A)   # this goes deep

[10:12] <camelia> rakudo-moar 5b231e099: OUTPUT: «1␤1␤»

[10:14] *** llfourn_ left
[10:21] *** llfourn joined
[11:24] <Kaiepi> now that i fixed Crypt::CAST5 finally the next thing i'll work on is a library that abstracts the logic for implementing different block cipher modes away from the crypto modules that would need them

[11:25] <Kaiepi> since i'm only willing to write libraries for CAST5 and DES and i'm not going to write 5 different block cipher modes for the two of them individually

[11:28] <timotimo> pure-perl6 implementations of ciphers? i hope they aren't vulnerable to timing attacks :)

[11:29] <Kaiepi> no they're written in c

[11:29] <Kaiepi> mostly

[11:29] <timotimo> ah, that makes it easier to get exactness for that

[11:30] <timotimo> https://github.com/smcameron/open-simplex-noise-in-c/blob/master/open-simplex-noise.c - i'd like this for perl6 :3

[11:33] <timotimo> once i had considered porting it to pure perl6, maybe also as a piece of performance testing code

[11:33] <timotimo> but it is a lot of code

[11:36] <Kaiepi> Crypt::CAST5 was originally purely in perl 6 but it was awful and didn't work properly since i forgot to test whether the ciphertext was accurate

[11:36] <timotimo> d'oh

[11:37] <Kaiepi> it was some kind of cipher but not CAST5 lol

[11:37] <timotimo> i'm not sure i have heard of CAST5 yet

[11:37] <timotimo> anywhere in particular that i'd see it?

[11:38] <Kaiepi> telnet

[11:39] <Kaiepi> that's why i wrote it

[11:39] <timotimo> i expected that, but didn't want to assume :)

[11:45] *** lucasb joined
[11:46] <Kaiepi> oh wait this isn't #perl6

[11:50] *** Kaiepi left
[11:50] *** Kaiepi joined
[12:04] *** AlexDaniel left
[12:05] *** j3nnn1 joined
[12:53] *** dogbert2_ left
[12:58] *** MasterDuke left
[14:43] *** robertle_ left
[14:44] *** robertle_ joined
[14:46] *** robertle_ left
[14:52] <lizmat> bisectable6: my @a = (^1000).map: { my $a = Proc::Async.new("sleep",1); $a.stdout; $a.start }; await @a

[14:52] <bisectable6> lizmat, Bisecting by exit signal (old=2015.12 new=5b231e0). Old exit signal: 6 (SIGABRT)

[14:53] <bisectable6> lizmat, bisect log: https://gist.github.com/006a81e0c3403f84a7d404e75e74a2b8

[14:53] <bisectable6> lizmat, (2016-07-29) https://github.com/rakudo/rakudo/commit/02b2e304239bcefb7b8579020511c0b130fe474e

[15:07] *** ExtraCrispy left
[15:15] *** lucasb left
[15:41] *** ExtraCrispy joined
[15:51] *** ExtraCrispy left
[16:25] *** patrickb left
[16:37] *** jmerelo joined
[16:37] <jmerelo> Hi

[16:38] <jmerelo> www.p6c.org seems to be down. Who's responsible for that?

[16:38] <jmerelo> (I mean the machine, not being down)

[16:39] *** AlexDaniel joined
[16:52] *** Util joined
[17:10] *** patrickb joined
[17:50] *** statisfiable6 left
[18:05] *** statisfiable6 joined
[18:05] *** ChanServ sets mode: +v statisfiable6

[18:13] *** statisfiable6 left
[18:25] *** statisfiable6 joined
[18:25] *** ChanServ sets mode: +v statisfiable6

[20:08] *** jmerelo left
[20:21] *** [Coke] joined
[21:12] *** patrickb left
[22:15] *** MasterDuke joined
[22:15] *** MasterDuke left
[22:15] *** MasterDuke joined
[22:16] *** Kaiepi left
[22:16] *** Kaiepi joined
[22:20] *** Kaypie joined
[22:20] *** Kaiepi left
[22:46] *** Merfont joined
[22:46] *** Kaypie left
[23:16] *** Merfont is now known as Kaiepi

[23:20] <Kaiepi> bisectable6: use NativeCall; sub strlen(Str --> size_t) is native {*}; strlen(explicitly-manage('ayy lmao'))

[23:20] <bisectable6> Kaiepi, Bisecting by output (old=2015.12 new=5b231e0) because on both starting points the exit code is 0

[23:20] <bisectable6> Kaiepi, bisect log: https://gist.github.com/19e84247183b3299a401b1712d6777c7

[23:20] <bisectable6> Kaiepi, (2019-01-11) https://github.com/rakudo/rakudo/commit/c4723cbafa9171cabbf65b880a7ae60ab2e85321

[23:21] <Kaiepi> bisectable6: use NativeCall; sub strlen(Str --> size_t) is native {*}; my $foo = explicitly-manage('ayy lmao'); strlen($foo)

[23:21] <bisectable6> Kaiepi, On both starting points (old=2015.12 new=5b231e0) the exit code is 0 and the output is identical as well

[23:21] <bisectable6> Kaiepi, Output on both points: «»

[23:22] <Kaiepi> bisectable6, use NativeCall; sub strlen(Str --> size_t) is native {*}; sub free(Pointer[void]) is native {*}; my Str $foo = 'ayy lmao'; explicitly-manage($foo); say strlen($foo); free(nativecast(Pointer[void], $foo))

[23:22] <bisectable6> Kaiepi, Bisecting by output (old=2015.12 new=5b231e0) because on both starting points the exit code is 1

[23:23] <bisectable6> Kaiepi, bisect log: https://gist.github.com/7ee199c1464daa3bce9ded7bfaa90637

[23:23] <bisectable6> Kaiepi, (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb52eb1fd07397659f19a5cf36dc61f84053

[23:23] <bisectable6> Kaiepi, The result looks a bit unrealistic, doesn't it? Most probably the output is different on every commit (e.g. ｢bisect: say rand｣)

[23:33] <AlexDaniel> c: 2015.12,HEAD use NativeCall; sub strlen(Str --> size_t) is native {*}; sub free(Pointer[void]) is native {*}; my Str $foo = 'ayy lmao'; explicitly-manage($foo); say strlen($foo); free(nativecast(Pointer[void], $foo))

[23:33] <committable6> AlexDaniel, https://gist.github.com/04bf9d9ce541d8ba47a5e78e35e90e7e

[23:33] <AlexDaniel> Kaiepi: ↑

[23:35] <timotimo> i think that just changed the error message?

[23:35] <AlexDaniel> yes

[23:36] <Kaiepi> shouldn't it work though?

[23:37] <Kaiepi> or is it just something that needs to be documented

[23:43] <timotimo> i think it should work

[23:43] <Kaiepi> working on it now

[23:44] <Kaiepi> should be an easy fix

[23:44] <timotimo> hopefully

[23:55] *** MasterDuke left
