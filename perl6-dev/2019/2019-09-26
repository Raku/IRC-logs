[01:06] *** cognominal joined
[01:09] *** cognomin_ left
[02:17] *** dogbert11 left
[04:07] *** committable6 left
[04:07] *** statisfiable6 left
[04:07] *** bloatable6 left
[04:07] *** nativecallable6 left
[04:07] *** evalable6 left
[04:07] *** coverable6 left
[04:07] *** squashable6 left
[04:07] *** notable6 left
[04:07] *** reportable6 left
[04:07] *** tellable6 left
[04:07] *** shareable6 left
[04:07] *** greppable6 left
[04:07] *** releasable6 left
[04:07] *** unicodable6 left
[04:07] *** benchable6 left
[04:07] *** bisectable6 left
[04:07] *** quotable6 left
[04:07] *** benchable6 joined
[04:08] *** evalable6 joined
[04:08] *** ChanServ sets mode: +v evalable6

[04:08] *** squashable6 joined
[04:08] *** nativecallable6 joined
[04:08] *** ChanServ sets mode: +v nativecallable6

[04:08] *** releasable6 joined
[04:08] *** epony left
[04:09] *** tellable6 joined
[04:09] *** committable6 joined
[04:09] *** ChanServ sets mode: +v committable6

[04:10] *** shareable6 joined
[04:10] *** ChanServ sets mode: +v shareable6

[04:10] *** unicodable6 joined
[04:10] *** ChanServ sets mode: +v unicodable6

[04:10] *** coverable6 joined
[04:10] *** epony joined
[04:10] *** greppable6 joined
[04:10] *** bloatable6 joined
[04:10] *** notable6 joined
[04:10] *** bisectable6 joined
[04:10] *** ChanServ sets mode: +v bisectable6

[04:11] *** reportable6 joined
[04:11] *** quotable6 joined
[04:11] *** ChanServ sets mode: +v quotable6

[04:12] *** statisfiable6 joined
[06:32] <[Tux]> https://www.perlmonks.org/?node_id=11106712 ← vague Inline::Perl5 question

[06:38] <nine> It's possible that the destructor tests won't pass on all machines. It's really hard to reliably get an object garbage collected.

[06:45] <nine> AlexDaniel: jnthn finding you more and more unreasonable was more a message about him than about you. Narrowing of view and lessened empathy are unfortunate results of stress and it reads to me like jnthn recognized those in him and prescribed himself some time off.

[06:46] <AlexDaniel> I see, I misread then

[06:48] <AlexDaniel> thanks

[07:12] *** [Coke] left
[07:45] <discord6> <Vendethiel> AlexDaniel: as a single data point, CoffeeScript’s file extension is .coffee and we’ve never really had people complaining

[07:45] <discord6> <Vendethiel> It’s still 1 or 2 chars shorter though.

[07:48] <AlexDaniel> Vendethiel: I see. From extension-stats: ".coffee": 165, ".coffeescript": 2

[07:48] <AlexDaniel> there are actually many long extensions that are a bit shorter

[07:49] <AlexDaniel> like .haddock => 3042

[07:49] <AlexDaniel> there's also .egg-info => 4525 with a dash

[07:50] <AlexDaniel> ok I meant not shorter but with less results :)

[07:50] <discord6> <Vendethiel> I don’t know many people who used .coffeescript (some used .js.coffee though)

[07:55] <discord6> <Vendethiel> (I’m not saying .t.rk/.rk.t is a similar case)

[07:56] <AlexDaniel> I don't mind slightly longer extensions, but they'll be one of the longest out there, and as I said, I just want to know why we're going that route

[07:57] <AlexDaniel> the dealbreaker with short extensions was .rkt, but it no longer is for me

[07:57] <AlexDaniel> that is, we surely can't use .rkt, but we can use .t or even .rk.t

[08:00] <AlexDaniel> we were so focused on avoiding bikeshedding that the actual productive discussion was cut off short, and we didn't even get to see all the options. For example, I don't remember seeing .rk.t

[08:06] <AlexDaniel> though I'm still not sure how I feel about the similarity of .rk itself to .rkt

[08:12] *** robertle joined
[08:37] <lizmat> [Tux]: with already PerlMonks(TM) "useful" Anonymous Monk answer

[08:38] <lizmat> if people wonder why Perl has such a bad name, it's interactions like that  :-(

[08:38] <[Tux]> true that

[08:52] <lizmat> hmmm... just spotted something weird:

[08:52] <[Tux]> Rakudo version 2019.07.1-357-gd00674b31 - MoarVM version 2019.07.1-241-gacb04a448

[08:52] <[Tux]> csv-test-xs-20      0.433 -  0.437

[08:52] <[Tux]> csv-ip5xs           0.802 -  0.803

[08:52] <[Tux]> test-t --race       0.944 -  1.000

[08:52] <[Tux]> test-t              1.821 -  1.946

[08:52] <[Tux]> csv-ip5xs-20        6.429 -  6.902

[08:52] <[Tux]> test                7.554 -  8.166

[08:52] <[Tux]> test-t-20 --race    9.505 - 10.059

[08:52] <[Tux]> csv-parser         22.904 - 24.783

[08:52] <[Tux]> test-t-20          30.349 - 32.321

[08:52] <lizmat> when I run "make spectest", processes appear as "moarvm" in the process list

[08:53] <lizmat> when I run a single spectest with "perl6 t/spec/foo, it appears as "perl6"

[08:53] <lizmat> what is "make spectest" doing differently ?

[08:53] <lizmat> s/moarvm/moar/

[08:56] *** SyrupThinker joined
[09:05] <lizmat> So I was looking at the setting up of Proxy, and realized why you can *not* use the first parameter to access the proxy: it's put inside of a Scalar for *every* access

[09:05] <lizmat> so I thought I'd remove that: https://gist.github.com/lizmat/71c32456b5de3cab33a5a833f3a8ea6a

[09:06] <lizmat> alas, this makes t/spec/S03-operators/buf.t eat all of available memory *very* quickly

[09:06] <lizmat> specifically subbuf-rw, which indeed returns a Proxy object

[09:07] <lizmat> jnthn: what is the rationale of putting stuff inside of a Scalar for every access ??

[09:10] <jnthn> lizmat: Same as any .VAR, I think

[09:11] <jnthn> (To prevent the thing becoming unwrapped)

[09:11] <lizmat> unwrapped ?

[09:11] <lizmat> I mean, the first parameter is usually *ignored* in most of the Proxy uses I've seen

[09:13] <jnthn> Remember that self is decont'd, and if we passed in the Proxy itself, then it'd decont into the underlying value represented by the proxy, which would mean an infinite recursion

[09:13] <jnthn> Well, it would on FETCH anyway

[09:14] <lizmat> but if we're just passing a block, there is no self ?

[09:15] <lizmat> ah, so you're saying, that *if* we use an actual method in the Proxy setup, it *would* decont self, and thus cause the infinite loop

[09:17] <lizmat> or anything with a $ I guess, only a \foo would not do that decont

[09:18] <jnthn> Right

[09:18] <lizmat> pity

[09:20] <lizmat> hmmm... is there a reason why Proxy needs to be setup in the Bootstrap?

[09:20] <lizmat> couldn't we do this in the setting ?

[09:20] <lizmat> afk for 2 hours or so&

[09:32] <jnthn> Maybe, if you can use a BEGIN block to sneak the invocation protocol in

[10:29] *** [Coke] joined
[11:46] <lizmat> jnthn: "Cannot invoke object with invocation handler in this context" does that ring a bell

[11:47] <lizmat> (after having made Proxy a "normal" class and excising it from the bootstrap

[11:47] <lizmat> https://gist.github.com/lizmat/90974d3d89f7f64d02122362ff39c6cc

[12:12] <jnthn> Maybe you discovered why it's in the bootstrap :)

[12:13] <jnthn> I'm not convinced those are right?

[12:13] <jnthn> Probably instead of the my $ = ... you need nqp::p6var

[12:20] <lizmat> nqp::p6var ?

[12:24] <jnthn> Hm, isn't that what is used in the NQP version?

[12:25] <jnthn> How did it do the wrapping? You need to replicate that precisely.

[12:26] <lizmat> my $var := nqp::create(Scalar);

[12:26] <lizmat> -        nqp::bindattr($var, Scalar, '$!value', $cont);

[12:26] <lizmat> -        nqp::decont(nqp::getattr($cont, Proxy, '&!FETCH')($var))

[12:30] <jnthn> There you are

[12:30] <jnthn> You can't use = to set up $!value, for one because you wrongly get a rw wrapper (though that may not matter), but mostly because = will decont its RHS

[12:31] <jnthn> May not matter as in "probably doesn't prevent the example from working"

[12:31] <jnthn> It's wrong for it to be rw

[12:31] <lizmat> but, that's the code from the bootstrap

[12:32] <lizmat> anyway, updated the gist: https://gist.github.com/lizmat/90974d3d89f7f64d02122362ff39c6cc

[12:32] <jnthn> Yes, I'm explaing why the code you have in your non-bootstrap version has different behavior to the bootstrap one

[12:32] <lizmat> ok, so now I think I mimicked it completely

[12:33] <lizmat> it builds ok, but that's because the settings themselves don't use any Proxy

[12:33] <lizmat> the first time one is created, immediate hang and eating of memory at 1+ GB / sec

[12:34] <lizmat> could it be because I use a "method" here?

[12:34] <lizmat> in any case, the reason I wanted it to be lifted to the setting, is to add more smartness

[12:35] <lizmat> like not having to create a scalar if the block's parameter for FETCH would not decont anyway

[12:35] <lizmat> saving a scalar creation for *every* FETCH call

[12:35] <timotimo> you're probably aware, but "hang and eat memory extremely fast" is almost always an infinite recursion

[12:36] <lizmat> yeah, I got that ?

[12:36] <timotimo> OK

[12:36] <timotimo> i didn't read closely enough

[12:36] <lizmat> it's probably trying to decont itself deconting itself

[12:36] <timotimo> yeah that seems likely

[12:36] <lizmat> it's just that I don't see how

[12:36] <timotimo> don't forget you can attach a debugger to get a stacktrace

[12:41] *** lucasb joined
[12:41] <lizmat> hmmm... it's not recursing on a call to FETCH (unless it recursing in parameter binding of the FETCH

[12:41] <lizmat> )

[12:50] <jnthn> Could be, if it has to type-check it

[12:50] <jnthn> Maybe needs a Mu throwing in the signautre somewhere

[12:52] <lizmat> hmmm...

[12:53] <lizmat> adding a Mu doesn't make a difference

[12:53] <jnthn> I'd just leave it in BOOTSTRAP then

[12:53] <jnthn> That or disassemble the bytecode of each one and read them to spot the difference

[12:54] * lizmat is close to giving up but will try just a bit longer  :-)

[12:56] <lizmat> how about adding a containerless Proxy in the E bootstrap

[12:59] <lizmat> hmmm... looks like that adds another can of worms  :-)

[12:59] <lizmat> ok, end of exercise 

[13:01] <jnthn> This stuff is...delicate.

[13:01] <jnthn> It wasn't easy to get it to work in the first place.

[13:15] <lizmat> yeah, that's clear to me....

[14:29] *** robertle left
[14:30] *** robertle joined
[15:10] <nine> lizmat: make (spec)test uses ./perl6-m which is still a shell script, while the installed perl6-m is a compiled program

[15:10] <lizmat> isn't that, eh, weird ?   Or WIP ?

[15:20] *** robertle left
[15:24] *** robertle joined
[15:29] *** robertle left
[15:44] *** robertle joined
[15:44] <vrurg> nine: is it a shell script? 

[15:45] <vrurg> ⇒ file ./perl6-m                                                                           26-09-19 11:44:47 [problem-solving-103]

[15:45] <vrurg> ./perl6-m: Mach-O 64-bit executable x86_64

[15:46] <nine> Oh, apparently not anymore

[15:47] <vrurg> Ok, I was afraid something is missing.

[15:48] <nine> It's not a shell script but it still launches moar

[15:48] *** robertle left
[16:16] *** dogbert11 joined
[16:23] <vrurg> .ask patrickb can we have perl6-m in rakudo source not run moar but be linked against moar's dynlib, same as inst-perl6-m?

[16:23] <tellable6> vrurg, I'll pass your message to patrickb

[16:28] *** MasterDuke joined
[17:02] *** chloekek joined
[17:08] *** robertle joined
[17:48] <AlexDaniel> vrurg: fwiw, if you're thinking “we'll fix that later”, it's not good enough for me. I want to know exactly what will happen because I have no idea what you all have in mind, and most of the arguments I'm seeing are very assfetched

[17:51] <vrurg> AlexDaniel: sorry, but I've nothing to add. To me the most compelling argument is that voting was in favor of this option. I would equally well accept any other voting results. All other my arguments are only to explain why my choice was in favor of long extensions. Though I also understand why you don't like them and share your view too. It's just so that I weigh and my scales are in favor of the long ones.

[17:52] <AlexDaniel> vrurg: ok, hold on

[17:52] <AlexDaniel> vrurg: you agree with this? https://github.com/perl6/problem-solving/pull/89/files#diff-94c7450ef7d64cc9a0320d8f232017cfR152-R154

[17:55] <vrurg> AlexDaniel: yes. Might as well remove the part about deprecation and removal. Then people can choose what works better for them.

[17:55] <AlexDaniel> what do you mean “yes” and “remove the part” at the same time

[17:56] <AlexDaniel> but that's right, you edit the PR and remove that part, yes

[17:56] <AlexDaniel> that's a good start!

[17:57] <AlexDaniel> then you define what'd be with `.t`

[17:57] <AlexDaniel> for example, if I open a ticket for some editor that doesn't have raku support, do I ask them to associate .t files too or not?

[17:57] <vrurg> I'm not editing it because I'm not on the list. If you strongly opposed to the deprecation – propose it. But rejecting long extensions altogether? Nah, not now.

[17:58] <AlexDaniel> that's literaly what I'm saying

[17:58] <AlexDaniel> did you even read my review?

[17:58] <AlexDaniel> because it doesn't sound like it

[17:59] <AlexDaniel> I think you do have the rights to change it, and if you don't feel comfortable then you can PR a change to the branch

[18:00] <AlexDaniel> we won't be voting on a PR that changes a non-master branch, obviously

[18:01] <vrurg> I have the rights technically, but not "oficially". Anyway, I have a couple of urgent things to be done. And yes, I read your review. Perhaps need to re-read it because some details are lost now.

[18:02] <AlexDaniel> because I'm not rejecting long extensions. I basically said you either: 1) expand more on long extensions 2) change them to short ones 3) remove extensions from the PR completely

[18:03] <AlexDaniel> so basically whatever you do right, I'll probably approve it…

[18:03] <AlexDaniel> and then there's a test thing, which is different

[18:04] <AlexDaniel> OK the only option I won't approve is denial

[18:28] <Geth_> ¦ problem-solving: 999684ba5d | (Moritz Lenz)++ | README.md

[18:28] <Geth_> ¦ problem-solving: No more moritz reviewer

[18:28] <Geth_> ¦ problem-solving: 

[18:28] <Geth_> ¦ problem-solving: see https://github.com/perl6/problem-solving/pull/89#issuecomment-535629589 for context

[18:28] <Geth_> ¦ problem-solving: review: https://github.com/perl6/problem-solving/commit/999684ba5d

[18:45] *** TreyHarris left
[18:55] <vrurg> AlexDaniel: It's not really clear to me how to produce a PR for PR. I would just leave a comment. for that paragraph.

[18:58] *** TreyHarris joined
[19:09] <AlexDaniel> vrurg: the PR itself is this branch: https://github.com/perl6/problem-solving/tree/path-to-raku

[19:09] <AlexDaniel> so you should be able to create a PR to change this branch

[19:10] <vrurg> Ah, my habbit of forking repos plays bad to me. 

[19:10] <[Coke]>  

[19:11] <AlexDaniel> forking should be fine too

[19:28] <Geth_> ¦ problem-solving: vrurg++ created pull request #109: Clarify the situation with .t extension

[19:28] <Geth_> ¦ problem-solving: review: https://github.com/perl6/problem-solving/pull/109

[19:29] <vrurg> AlexDaniel: ^

[19:34] <AlexDaniel> vrurg: unfortunately I'm falling asleep as I type this

[19:34] <AlexDaniel> buut

[19:35] <AlexDaniel> what does it mean for editors?

[19:35] <AlexDaniel> for example, if some editor is supporting .t6, when can it drop the support?

[19:35] <vrurg> It means developer chooses what's appropriate for him. If intelliJ treats .t as perl – one can use .rakutest. 

[19:36] <AlexDaniel> not talking about that right now

[19:36] <vrurg> For .t6 – yes, it can. Same as for .p6 and the rest.

[19:36] <AlexDaniel> “`.t6` will continue to be supported for 6.e” yet tools will be dropping support for it?

[19:36] <AlexDaniel> previously I suggested writing something like

[19:38] <AlexDaniel> “Using `.t6` extension is discouraged, and tools should not include `.t6` when adding support for Raku. However, tools that already support `.t6` should continue doing so for the time being.”

[19:38] <vrurg> AlexDaniel: depends on when dropping is ok. As stated later in the same section: "Around the time of 6.f, a `.p6` association

[19:38] <vrurg> could be deselected by default, and perhaps dropped entirely by 6.g." That could be applied to .t6

[19:38] *** MasterDuke left
[19:39] <vrurg> AlexDaniel: good point about adding support for Raku, though. 

[19:40] <vrurg> As to dropping moment – I'll add it to .p6 part.

[20:15] *** chloekek left
[20:20] <dogbert11> releasable: next

[20:20] <releasable6> dogbert11, Next release in ≈22 days and ≈22 hours. R6 is down. At least 4 blockers. Unknown changelog format

[20:20] <releasable6> dogbert11, Details: https://gist.github.com/459037fa778f6daae6056199f8bfebf8

[20:20] <dogbert11> more than three weeks, I see

[20:28] *** robertle left
[20:45] <Geth_> ¦ problem-solving/path-to-raku: 0de1d74e16 | (Vadim Belman)++ | solutions/language/PATH-TO-RAKU.md

[20:45] <Geth_> ¦ problem-solving/path-to-raku: Clarify the situation with .t extension

[20:45] <Geth_> ¦ problem-solving/path-to-raku: 

[20:45] <Geth_> ¦ problem-solving/path-to-raku: After carefully considering @AlexDaniel review, #108, and

[20:45] <Geth_> ¦ problem-solving/path-to-raku: [some IRC chatting](https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-09-26#l179),

[20:45] <Geth_> ¦ problem-solving/path-to-raku: I would like to propose to remove the part about `.t` deprecation. I do

[20:45] <Geth_> ¦ problem-solving/path-to-raku: it with a some regret as this proposal would postpone the voting if

[20:45] <Geth_> ¦ problem-solving/path-to-raku: accepted, but:

[20:45] <Geth_> ¦ problem-solving/path-to-raku: 

[20:45] <Geth_> ¦ problem-solving/path-to-raku: 1. Tools currently supporting TAP are used to this extension. We can't ask all of them to produce the deprecation message for Raku only.

[20:45] <Geth_> ¦ problem-solving/path-to-raku: 2. This would allow a user to choose the extension more suitable to the tools he/she is using and even up to his personal preferences.

[20:45] <Geth_> ¦ problem-solving/path-to-raku: 3. In a way, this conform to TIMTOWTDI.

[20:45] <Geth_> ¦ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/0de1d74e16

[20:45] <Geth_> ¦ problem-solving/path-to-raku: dd8dcd5b4e | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | solutions/language/PATH-TO-RAKU.md

[20:45] <Geth_> ¦ problem-solving/path-to-raku: Merge pull request #109 from vrurg/path-to-raku

[20:45] <Geth_> ¦ problem-solving/path-to-raku: 

[20:45] <Geth_> ¦ problem-solving/path-to-raku: Clarify the situation with .t extension

[20:45] <Geth_> ¦ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/dd8dcd5b4e

[21:22] *** AlexDaniel left
[22:07] *** epony left
[22:26] *** patrickb joined
[23:08] *** epony joined
[23:10] *** lucasb left
[23:19] <patrickb> .tell vrurg It's not easily possible to replace the build perl6 runners with native executables. Reason: The C runners rely on the directory layout of a perl6 installation. In the build directory the files are lying around differently. Unless one creates a copy of src/vm/moar/runner/main.c and adapt it heavily there is no way to have a native executable that works in the build directory.

[23:19] <tellable6> patrickb, I'll pass your message to vrurg

[23:21] <vrurg> ok :)

[23:21] <vrurg> patrickb: did you see my question from tellable6 ?

[23:22] <patrickb> The above was meant to be an answer.

[23:22] <patrickb> Or did you mean a different question?

[23:23] <vrurg> Yes, different. I didn't see tellable6 reporting to you. Neither it reported to me now.

[23:23] <vrurg> .

[23:25] <patrickb> tellable6 told me over in #moarvm

[23:26] <vrurg> Ah, ok. And I was probably ignored because of instant reply.

[23:30] <patrickb> So is there another question?

[23:33] *** patrickz joined
[23:36] *** patrickz left
[23:38] *** patrickb left
