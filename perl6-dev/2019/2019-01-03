[00:18] *** Kaiepi joined
[00:19] *** p6bannerbot sets mode: +v Kaiepi

[01:33] *** Ven`` left
[04:35] *** Ven`` joined
[04:35] *** p6bannerbot sets mode: +v Ven``

[04:41] *** Ven`` left
[07:49] *** squashable6 left
[07:49] *** releasable6 left
[07:49] *** committable6 left
[07:49] *** evalable6 left
[07:49] *** benchable6 left
[07:49] *** shareable6 left
[07:49] *** reportable6 left
[07:49] *** quotable6 joined
[07:49] *** ChanServ sets mode: +v quotable6

[07:50] *** undersightable6 joined
[07:50] *** p6bannerbot sets mode: +v quotable6

[07:50] *** p6bannerbot sets mode: +v undersightable6

[07:51] *** coverable6 joined
[07:51] *** committable6 joined
[07:51] *** notable6 joined
[07:51] *** greppable6 joined
[07:51] *** evalable6 joined
[07:51] *** ChanServ sets mode: +v evalable6

[07:51] *** p6bannerbot sets mode: +v coverable6

[07:51] *** releasable6 joined
[07:51] *** p6bannerbot sets mode: +v committable6

[07:51] *** p6bannerbot sets mode: +v notable6

[07:51] *** reportable6 joined
[07:52] *** p6bannerbot sets mode: +v greppable6

[07:52] *** bisectable6 joined
[07:52] *** p6bannerbot sets mode: +v evalable6

[07:52] *** bloatable6 joined
[07:52] *** ChanServ sets mode: +v bloatable6

[07:52] *** shareable6 joined
[07:52] *** p6bannerbot sets mode: +v releasable6

[07:52] *** p6bannerbot sets mode: +v reportable6

[07:52] *** unicodable6 joined
[07:52] *** ChanServ sets mode: +v unicodable6

[07:52] *** p6bannerbot sets mode: +v bisectable6

[07:53] *** p6bannerbot sets mode: +v bloatable6

[07:53] *** benchable6 joined
[07:53] *** p6bannerbot sets mode: +v shareable6

[07:53] *** nativecallable6 joined
[07:53] *** p6bannerbot sets mode: +v unicodable6

[07:53] *** p6bannerbot sets mode: +v benchable6

[07:53] *** squashable6 joined
[07:53] *** ChanServ sets mode: +v squashable6

[07:54] *** lizmat left
[07:54] *** statisfiable6 joined
[07:54] *** ChanServ sets mode: +v statisfiable6

[07:54] *** p6bannerbot sets mode: +v nativecallable6

[07:54] *** p6bannerbot sets mode: +v squashable6

[07:54] *** p6bannerbot sets mode: +v statisfiable6

[08:19] *** robertle joined
[08:20] *** p6bannerbot sets mode: +v robertle

[08:59] *** lizmat joined
[08:59] *** p6bannerbot sets mode: +v lizmat

[09:04] <lizmat> Files=1264, Tests=88002, 374 wallclock secs (20.08 usr  5.95 sys + 2669.44 cusr 226.93 csys = 2922.40 CPU)

[09:26] <Geth> ¦ rakudo: 0797f93ec4 | (Elizabeth Mattijsen)++ | src/core/Rat.pm6

[09:26] <Geth> ¦ rakudo: Add return signatures to FatRat returning candidates

[09:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0797f93ec4

[09:27] *** pmurias joined
[09:27] *** p6bannerbot sets mode: +v pmurias

[09:38] <lizmat> ok: I think I have a very simple idea for making a pragma that will force all Rats to become FatRats in that scope

[09:42] <Geth> ¦ rakudo: 5625ebc155 | (Elizabeth Mattijsen)++ | 2 files

[09:42] <Geth> ¦ rakudo: Add full-precision pragma

[09:42] <Geth> ¦ rakudo: 

[09:42] <Geth> ¦ rakudo: Really a proof of concept, and name up for bike-shedding.  The solution

[09:42] <Geth> ¦ rakudo: is really simple: just make Rat the same as FatRat in that scope.  And

[09:42] <Geth> ¦ rakudo: this even covers rational literals automagically.  :-)

[09:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5625ebc155

[09:42] <lizmat> 6 'dd 0.01; { use full-precision; dd 0.02; dd Rat }; dd 0.03'

[09:42] <lizmat> 0.01

[09:42] <lizmat> FatRat.new(1, 50)

[09:42] <lizmat> FatRat

[09:42] <lizmat> 0.03

[09:43] <lizmat> this also elegantly bypasses any version issues, I would think, as we could also provide this in module space

[09:44] <lizmat> (or in module space only, should we decide that that is where this is going to live)

[09:48] <lizmat> jnthn: ^^  

[10:07] *** pmurias left
[10:09] *** pmurias joined
[10:09] *** p6bannerbot sets mode: +v pmurias

[10:27] *** robertle left
[11:11] <|Tux|> Rakudo version 2018.12-122-g5625ebc15 - MoarVM version 2018.12-13-g473324ee3

[11:11] <|Tux|> csv-test-xs-20      0.426 -  0.435

[11:11] <|Tux|> test-t --race       0.814 -  0.837

[11:11] <|Tux|> csv-ip5xs           0.929 -  0.937

[11:11] <|Tux|> test-t              1.887 -  1.900

[11:11] <|Tux|> csv-ip5xs-20        7.135 -  7.222

[11:12] <|Tux|> test                7.170 -  7.176

[11:12] <|Tux|> test-t-20 --race    9.617 -  9.842

[11:12] <|Tux|> csv-parser         23.052 - 23.495

[11:12] <|Tux|> test-t-20          31.744 - 31.904

[11:26] <lizmat> bisectable6: dd < 42/17 > + 1

[11:26] <bisectable6> lizmat, Bisecting by exit code (old=2015.12 new=5625ebc). Old exit code: 0

[11:26] <bisectable6> lizmat, bisect log: https://gist.github.com/66cd49f6556cde5424b0e84e1aca5e20

[11:26] <bisectable6> lizmat, (2019-01-02) https://github.com/rakudo/rakudo/commit/29d7f709586930ed5b8dc1ed6253958f66097d10

[11:27] <lizmat> *sigh*

[11:42] *** pmurias left
[11:49] <Geth> ¦ rakudo: e29554f5c3 | (Elizabeth Mattijsen)++ | src/core/Rat.pm6

[11:49] <Geth> ¦ rakudo: Revert using nqp::getattr instead of accessors

[11:49] <Geth> ¦ rakudo: 

[11:49] <Geth> ¦ rakudo: Makes operations on Rats a tiny bit slower, but makes operations on

[11:49] <Geth> ¦ rakudo: RatStr's work again.

[11:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e29554f5c3

[11:56] <Geth> ¦ roast: 48223c25da | (Elizabeth Mattijsen)++ | S32-num/rat.t

[11:56] <Geth> ¦ roast: Make sure we test ops on RatStr's

[11:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/48223c25da

[12:01] *** pmurias joined
[12:01] *** p6bannerbot sets mode: +v pmurias

[12:12] <AlexDaniel> lizmat: heh, that's lovely :)

[12:12] <AlexDaniel> commit, find a bug, bisect, revert, add tests :)

[12:13] <lizmat> yeah, rather would have done: find a bug, adapt, commit

[12:17] <Geth> ¦ rakudo: c47d95f217 | (Elizabeth Mattijsen)++ | lib/full-precision.pm6

[12:17] <Geth> ¦ rakudo: Make sure we also make / create FatRats

[12:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c47d95f217

[12:27] <Geth> ¦ rakudo: 4a152da504 | (Elizabeth Mattijsen)++ | lib/full-precision.pm6

[12:27] <Geth> ¦ rakudo: Make sure we use old infix:</> logic

[12:27] <Geth> ¦ rakudo: 

[12:27] <Geth> ¦ rakudo: So we can handle also non-integer values on infix:</> when

[12:27] <Geth> ¦ rakudo:     use full-precision;

[12:27] <Geth> ¦ rakudo: is active.

[12:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4a152da504

[12:27] *** robertle joined
[12:28] *** p6bannerbot sets mode: +v robertle

[12:39] *** lucasb joined
[12:39] *** p6bannerbot sets mode: +v lucasb

[13:06] <AlexDaniel> squashable6: next

[13:06] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in ≈20 hours (2019-01-05 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[13:15] *** MasterDuke left
[13:46] *** ExtraCrispy joined
[13:46] *** p6bannerbot sets mode: +v ExtraCrispy

[13:51] <lizmat> bisectable6: BEGIN my $*FOO = 42

[13:51] <bisectable6> lizmat, On both starting points (old=2015.12 new=4a152da) the exit code is 1 and the output is identical as well

[13:51] <bisectable6> lizmat, Output on both points: «04===SORRY!04=== Error while compiling /tmp/ZQmu4RdRnH␤An exception occurred while evaluating a BEGIN␤at /tmp/ZQmu4RdRnH:1␤Exception details:␤  Dynamic variable $*FOO not found␤    in code  at /tmp/ZQmu4RdRnH line 1␤␤»

[13:52] <lizmat> hmmm... I was convinced this worked at some time

[13:52] <lizmat> should it?

[13:56] <jnthn> m: BEGIN { my $*FOO = 42 }

[13:56] <camelia> rakudo-moar 4a152da50: ( no output )

[13:56] <jnthn> It's problematic because without the curlies the declaration is actually outside of the code that is compiled for the BEGIN block

[13:57] <jnthn> And that is run in the compiler's dynamic scope

[13:57] <jnthn> The enclosing block isn't yet compiled, let alone in dynamic scope :)

[13:57] <lizmat> yeah... and I actually want to have it run outside of the block  :-)

[13:57] <lizmat> yeah, makes sense

[13:58] <jnthn> But I thought in a context like this it'd do the initialization lexically

[13:58] <lizmat> jnthn: I was testing an approach with a $*FULL-PRECISION dynamic variable

[13:58] <jnthn> I'm not entirely sure why it's doing a dynamic lookup

[13:59] <lizmat> m: BEGIN PROCESS::<$FOO> = 0; BEGIN $*FOO = 42; say $*FOO

[13:59] <camelia> rakudo-moar 4a152da50: OUTPUT: «42␤»

[14:00] <lizmat> perhaps the Failure gets thrown when it shouldn't ?

[14:07] <jnthn> Even then, where's the Failure coming from?

[14:08] *** MasterDuke joined
[14:08] *** p6bannerbot sets mode: +v MasterDuke

[14:08] *** MasterDuke left
[14:08] *** MasterDuke joined
[14:08] *** herbert.freenode.net sets mode: +v MasterDuke

[14:08] *** p6bannerbot sets mode: +v MasterDuke

[14:21] <MasterDuke> i just got a new flapper in t/spec/S04-exceptions/fail.t

[14:22] <MasterDuke> the output when run directly: https://gist.github.com/MasterDuke17/70f83854c84f9c9420564934861ca616

[14:25] <jnthn> Yeah, I've seen that too.

[14:26] <jnthn> I tracked it down to being sensitive to MVM_SPESH_INLINE_DISABLE=1, but even with MVM_SPESH_BLOCKING=1 set it still only happens some of the time, which is weird.

[14:26] *** pmurias left
[14:26] <jnthn> Didn't see any access to uninit or other oddities under valgrind though, so no idea what the source of randomness is that makes it do different things on different runs.

[14:27] <MasterDuke> does the env variable carry over to spawned threads?

[14:27] <jnthn> Threads, or procs?

[14:27] <jnthn> The env is per process, I believe, so threads shoudln't make a difference.

[14:27] <Geth> ¦ rakudo/lower-topic: 64d08ad637 | (Jonathan Worthington)++ | 2 files

[14:27] <Geth> ¦ rakudo/lower-topic: Differentiate required and optional implicit topic

[14:27] <Geth> ¦ rakudo/lower-topic: 

[14:27] <Geth> ¦ rakudo/lower-topic: When we have `for @a { }` then there is no need for the `$_` parameter

[14:27] <Geth> ¦ rakudo/lower-topic: to be optional, since we know we'll always be invoking the block with a

[14:27] <Geth> ¦ rakudo/lower-topic: parameter. This should lead to slightly more compact/efficient code for

[14:27] <Geth> ¦ rakudo/lower-topic: such cases, and will make the static optimizer's job easier with regard

[14:27] <Geth> ¦ rakudo/lower-topic: to having to try and track outer lexical accesses.

[14:27] <Geth> ¦ rakudo/lower-topic: review: https://github.com/rakudo/rakudo/commit/64d08ad637

[14:28] <MasterDuke> well, whatever get_out and is_run do

[14:28] <jnthn> If they spawn a proc then yeah, I'd expect it to pass them along

[14:28] <Geth> ¦ nqp: c4d2aa6f1b | (Daniel Green)++ | src/QRegex/NFA.nqp

[14:28] <Geth> ¦ nqp: Another micro-opt to NFA code

[14:28] <Geth> ¦ nqp: 

[14:28] <Geth> ¦ nqp: Move some list creations into a smaller scope.

[14:28] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c4d2aa6f1b

[14:29] <MasterDuke> hm, any easy way to check that?

[14:32] *** Ven`` joined
[14:33] *** p6bannerbot sets mode: +v Ven``

[14:33] *** pmurias joined
[14:33] *** p6bannerbot sets mode: +v pmurias

[14:36] <jnthn> Just print the env var in the sub-proc?

[14:40] <timotimo> MasterDuke: is $send <= 3 often in that piece of code?

[14:42] <MasterDuke> it happens occasionally while building rakudo. not in the muldis grammar though

[14:42] <timotimo> OK. probably still worth it, though

[14:44] <timotimo> if that block is not inlined statically or dynamically it'll also reduce the lifetime of those arrays, so GC can get it earlier after the block is left

[14:45] <timotimo> probably not worth thinking too much about the finer details

[14:45] <MasterDuke> finer details?

[14:46] <timotimo> whether the block gets inlined and stuff like that

[14:47] <MasterDuke> ah

[14:47] <timotimo> i wonder if it'd be worth it to count the number of remaining epsilon edges in step 2 and quit step 3 early when the same number of epsilon edges was found

[14:49] <MasterDuke> timotimo: btw, do you see mergesubrule only half-jitted?

[14:52] <timotimo> i at least don't see anything in the spesh log

[14:53] <MasterDuke> was the jit log removed?

[14:54] <Geth> ¦ rakudo/lower-topic: 2a33bb1a35 | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[14:54] <Geth> ¦ rakudo/lower-topic: Don't emit unused parameter decont instructions

[14:54] <Geth> ¦ rakudo/lower-topic: 

[14:54] <Geth> ¦ rakudo/lower-topic: Sure, spesh will throw them out, but it's better to produce nicer code

[14:54] <Geth> ¦ rakudo/lower-topic: in the first place. The unused decont instructions could happen with

[14:54] <Geth> ¦ rakudo/lower-topic: Mu-typed `is raw` or `is rw` args.

[14:54] <Geth> ¦ rakudo/lower-topic: review: https://github.com/rakudo/rakudo/commit/2a33bb1a35

[14:54] <jnthn> MasterDuke: Yes, JIT log's important details were folded into spesh log, I believe

[14:55] <MasterDuke> right, thanks

[14:56] <timotimo> aye, could grep out the line following "After:" and "JIT was not"

[14:58] <timotimo> looks like statistically the last edge with an epsilon is near the end and the first edge with an epsilon is near the start

[14:58] <MasterDuke> ugh, i keep trying to use my smaller example and forgetting that it segfaults now

[14:58] <timotimo> so starting where we know the first one to be and stopping where we know the last one to be is not worth anything

[15:01] <AlexDaniel> robertle: any news?

[15:24] <Geth> ¦ rakudo/lower-topic: 83c2070e4e | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[15:24] <Geth> ¦ rakudo/lower-topic: Update default topic signature lowering

[15:24] <Geth> ¦ rakudo/lower-topic: 

[15:24] <Geth> ¦ rakudo/lower-topic: Now it can do its job on the required case also.

[15:24] <Geth> ¦ rakudo/lower-topic: review: https://github.com/rakudo/rakudo/commit/83c2070e4e

[15:28] *** lucasb left
[16:22] <Geth> ¦ rakudo/lower-topic: ab7f07dbbe | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[16:22] <Geth> ¦ rakudo/lower-topic: Track usages of $_ during topic preservation

[16:22] <Geth> ¦ rakudo/lower-topic: 

[16:22] <Geth> ¦ rakudo/lower-topic: Once we will lower $_, then we shall need to be able to update these

[16:22] <Geth> ¦ rakudo/lower-topic: references.

[16:22] <Geth> ¦ rakudo/lower-topic: review: https://github.com/rakudo/rakudo/commit/ab7f07dbbe

[16:22] <Geth> ¦ rakudo/lower-topic: 91a4b3b1d9 | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[16:22] <Geth> ¦ rakudo/lower-topic: Properly track and fixup getlexouter usages

[16:22] <Geth> ¦ rakudo/lower-topic: 

[16:22] <Geth> ¦ rakudo/lower-topic: These are only normally emitted as part of $_ handling, so naturally

[16:22] <Geth> ¦ rakudo/lower-topic: need to be fixed up properly when doing block inlining or respected

[16:22] <Geth> ¦ rakudo/lower-topic: then doing lexical to local lowering.

[16:22] <Geth> ¦ rakudo/lower-topic: review: https://github.com/rakudo/rakudo/commit/91a4b3b1d9

[16:23] <jnthn> With those two, I can now lower $_ from lexical to local and pass `make test`.

[16:23] <jnthn> Next to try and get `make install` and `make spectest` working with it

[16:36] <dogbert11> jnthn, MasterDuke: the flapping test, i.e.  t/spec/S04-exceptions/fail.t, seems to originate from https://github.com/rakudo/rakudo/commit/e73853a17766209f48d58ed46ca1e1d8c1dee6cf 

[16:37] <jnthn> dogbert11: Ah, which gives spesh more opportunities, so yeah, it's probably just exposing an existing bug

[16:41] <dogbert11> the thing is, it breaks with MVM_SPESH_DISABLE=1 !

[16:43] <jnthn> Oh?

[16:43] <jnthn> I never got that to happen

[16:46] <dogbert11> for me it breaks more often if spesh is disabled. The previous commit, i.e. https://github.com/rakudo/rakudo/commit/c869a6ed890884ef7779313f10a22a1322656069 is good

[16:47] <Geth> ¦ rakudo: 9f956aff4a | (Elizabeth Mattijsen)++ | src/core/Rat.pm6

[16:47] <Geth> ¦ rakudo: Introducing $*FULL-PRECISION

[16:47] <Geth> ¦ rakudo: 

[16:47] <Geth> ¦ rakudo: By default False.  When set to True, it will *not* downgrade a Rat to a

[16:47] <Geth> ¦ rakudo: Num (float) but instead upgrade it to a FatRat.

[16:47] <Geth> ¦ rakudo: 

[16:47] <Geth> ¦ rakudo: This is an alternate approach to "use full-precision": whereas the pragma

[16:47] <Geth> ¦ rakudo: only functions in the lexical scope it is used, using the dynamic variable

[16:47] <Geth> ¦ rakudo: <…commit message has 6 more lines…>

[16:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9f956aff4a

[16:49] <Geth> ¦ rakudo: 3f8fea9bc0 | (Elizabeth Mattijsen)++ | 2 files

[16:49] <Geth> ¦ rakudo: Remove "full-precision" pragma

[16:49] <Geth> ¦ rakudo: 

[16:49] <Geth> ¦ rakudo: Mostly because it turned out to be very hard to transparently handle the

[16:49] <Geth> ¦ rakudo: case of creating a FatRat constant: it would get downgraded before it could

[16:49] <Geth> ¦ rakudo: be turned into a FatRat.

[16:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3f8fea9bc0

[16:50] * dogbert11 wonders if this comment is something to worry about: '# Seems good; lower it. Note we need to retain a lexical in case of binder failover to generate errors. (TODO: only retain them for parameters.)'

[16:53] <jnthn> I think it's out of date by now

[16:53] <dogbert11> phew :)

[16:53] <jnthn> I thought I edited it even...

[16:53] <jnthn> We can't actually get rid of them after all, 'cus it breaks a spectest

[16:54] <jnthn> We need to leave a trace that there used to be a leixcal

[16:56] *** pmurias left
[16:56] <dogbert11> indeed, the comment was changed with a later commit, sorry for the noise

[16:58] <Geth> ¦ rakudo/lower-topic: 6b44c5815a | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[16:58] <Geth> ¦ rakudo/lower-topic: Track and fixup getlexouter in parameter defaults

[16:58] <Geth> ¦ rakudo/lower-topic: 

[16:58] <Geth> ¦ rakudo/lower-topic: This case will also need to be handled properly in order to lower $_.

[16:58] <Geth> ¦ rakudo/lower-topic: review: https://github.com/rakudo/rakudo/commit/6b44c5815a

[17:04] <Geth> ¦ rakudo/lower-topic: eb3917c260 | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[17:04] <Geth> ¦ rakudo/lower-topic: Start to lower $_ from lexical to local

[17:04] <Geth> ¦ rakudo/lower-topic: 

[17:04] <Geth> ¦ rakudo/lower-topic: This almost passes spectest, thanks to the various preparatory changes

[17:04] <Geth> ¦ rakudo/lower-topic: that were done. It also gives a quite nice speedup on the empty range

[17:04] <Geth> ¦ rakudo/lower-topic: benchmark, since the unused `$_` now uses a local, which we can in turn

[17:04] <Geth> ¦ rakudo/lower-topic: see is completely unused, and therefore throw out a boxing operation,

[17:04] <Geth> ¦ rakudo/lower-topic: thus meaning it can JIT into a rather tighter loop. Alas, it seems that

[17:04] <Geth> ¦ rakudo/lower-topic: despite the wins, this costs us something on some benchmarks, which will

[17:04] <Geth> ¦ rakudo/lower-topic: need further examination.

[17:04] <Geth> ¦ rakudo/lower-topic: review: https://github.com/rakudo/rakudo/commit/eb3917c260

[17:06] *** Ven`` left
[17:11] <jnthn> 2 spectests need attention, one actually hangs, looks like I busted -ne or something (curiously, that test has a comment saying it hangs on the JVM :P)

[17:11] <jnthn> And the other one is 'cus I need to not do this opt under 6.c

[17:27] <jnthn> Time for a break...will work on it some more tomorrow :)

[17:27] <lizmat> jnthn++

[17:59] <lizmat> m: dd Rat.new(1,999999999999999999999999999).^name   # should we consider this a bug or a feature ?

[17:59] <camelia> rakudo-moar 3f8fea9bc: OUTPUT: «"Rat"␤»

[17:59] <lizmat> if the denominator on Rat would be really uint, then this would fail

[17:59] <lizmat> so one could either expect it to return a Num (float) or a FatRat

[18:00] <lizmat> I seem to recall jnthn complaining about it after I added some relatively long running test-files to spectest

[18:01] <lizmat> when he was still mainly developing on Windown

[18:01] <lizmat> *s

[18:08] *** pmurias joined
[18:08] *** p6bannerbot sets mode: +v pmurias

[18:43] *** squashable6 left
[18:44] *** squashable6 joined
[18:44] *** ChanServ sets mode: +v squashable6

[18:44] *** p6bannerbot sets mode: +v squashable6

[18:51] *** Ven`` joined
[18:52] *** p6bannerbot sets mode: +v Ven``

[18:54] <Geth> ¦ nqp: 49f061242a | (Daniel Green)++ | src/QRegex/NFA.nqp

[18:54] <Geth> ¦ nqp: Another micro-opt to NFA code

[18:54] <Geth> ¦ nqp: 

[18:54] <Geth> ¦ nqp: Since operations use floats by default in NQP, explicitly making an int

[18:54] <Geth> ¦ nqp: variable out of an array access reduces the BOOTNums allocated during

[18:54] <Geth> ¦ nqp: compilation.

[18:54] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/49f061242a

[18:57] <MasterDuke> timotimo: ^^^

[18:59] *** pmurias left
[19:00] *** pmurias joined
[19:00] *** p6bannerbot sets mode: +v pmurias

[19:20] <timotimo> ah, that's not bad

[19:21] <timotimo> do you know if the == just below that is working with nums?

[19:37] <MasterDuke> i had a slightly more extensive patch, but it only removed about 14k nums more

[19:38] <MasterDuke> might do that as another commit

[20:08] *** AlexDaniel left
[20:16] <MasterDuke> huh. got my nqp branch updated with a bunch of the recent changes and made new bootstrap files, but now actually building nqp give an `Attempt to read past end of string heap when locating string` , but then dies with `Malformed UTF-8 at line 1 col 1`

[20:16] *** dct joined
[20:16] *** p6bannerbot sets mode: +v dct

[20:21] <MasterDuke> oh wait, the rebase didn't finish

[20:32] <MasterDuke> hm, still getting those

[20:32] <MasterDuke> first one happens during the configure

[20:49] <Geth> ¦ rakudo: 91f674945c | (Elizabeth Mattijsen)++ | src/core/Rational.pm6

[20:49] <Geth> ¦ rakudo: Shave off a few % off of Rational.new

[20:49] <Geth> ¦ rakudo: 

[20:49] <Geth> ¦ rakudo: - only allow for instantiated NuT and DeT

[20:49] <Geth> ¦ rakudo: - create object at one place

[20:49] <Geth> ¦ rakudo: - use cheaper bindattr instead of bindattrvinres where possible

[20:49] <Geth> ¦ rakudo: - simplify -1 0 1 logic when denominator is 0

[20:49] <Geth> ¦ rakudo: - about 1-2% faster

[20:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/91f674945c

[20:57] *** MasterDuke left
[21:05] <Geth> ¦ rakudo: f976c85e2a | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION

[21:05] <Geth> ¦ rakudo: Bump NQP to get Daniel Green's NFA optimizations

[21:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f976c85e2a

[21:05] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.12-42-g0d461d6...2018.12-45-g49f0612

[21:23] *** pmurias left
[21:27] *** travis-ci joined
[21:27] *** p6bannerbot sets mode: +v travis-ci

[21:27] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Shave off a few % off of Rational.new

[21:27] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/475031163 https://github.com/rakudo/rakudo/compare/3f8fea9bc0a0...91f674945c83

[21:27] *** travis-ci left
[21:27] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[21:28] <lizmat> looks like a flapper in one of the jobs

[21:35] <dogbert11> lizmat: the error seems to be - Stage parse      : Unknown constant 'BINARY_ENDIAN_NATIVE'

[21:35] <lizmat> then it's using the wrong version of NQP

[21:37] <dogbert11> could it be that the JVM backend still expects it?

[21:40] <dogbert11> ah, so that's a new constant

[22:14] *** lucasb joined
[22:14] *** p6bannerbot sets mode: +v lucasb

[22:14] <japhb> .tell jnthn OO::Monitors is failing tests on a fresh Rakudo build due to something about lexical lowering:

[22:14] <yoleaux> japhb: I'll pass your message to jnthn.

[22:14] <japhb> ===> Testing: OO::Monitors:ver<1.1>

[22:15] <japhb> No such method 'get_value' for invocant of type 'Rakudo::Internals::LoweredAwayLexical'

[22:15] <japhb>   in any  at t/condition.t line 44

[22:20] <jnthn> japhb: Yeah, already got a ticket about that on OO::Monitors. It might or might not already be fixed in the branch I was working on today.

[22:20] <yoleaux> 22:14Z <japhb> jnthn: OO::Monitors is failing tests on a fresh Rakudo build due to something about lexical lowering:

[22:21] <jnthn> Will figure it out tomorrow; most issues like that have been quite obviously apparent once I look at the --target=optimize output.

[22:28] *** lizmat left
[22:28] *** lizmat joined
[22:28] *** p6bannerbot sets mode: +v lizmat

[22:41] <timotimo> i wonder if perhaps rakudo (or whatever is responsible for putting the files there) should make source files for installed modules read-only on the filesystem

[23:03] <lizmat> that would actually not be a bad idea :-)

[23:04] <Geth> ¦ rakudo: cbc3e72e2b | (Elizabeth Mattijsen)++ | src/core/Duration.pm6

[23:04] <Geth> ¦ rakudo: Provide return types to Duration methods

[23:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cbc3e72e2b

[23:38] <timotimo> to give people a little weak signal of "don't change these, k?"

[23:43] <jnthn> .oO( CompUnit::Installation::SQLite :P )

[23:43] <timotimo> CompUnit::Installation::Blockchain

[23:43] <jnthn> .oO( "I ran an UPDATE query to update the source but..." :) )

[23:44] <timotimo> "but then a trigger ran that displayed a big red blinking text on screen"

