[00:49] <Geth> ¦ rakudo: vrurg++ created pull request #2966: Added test for async bug

[00:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2966

[01:13] *** evalable6 left
[01:16] *** evalable6 joined
[01:16] *** ChanServ sets mode: +v evalable6

[02:09] <Geth> ¦ rakudo: kazcw++ created pull request #2967: add tests for #2965

[02:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2967

[02:09] <synopsebot> RAKUDO#2965 [open]: https://github.com/rakudo/rakudo/issues/2965 I can't HAS stub?

[03:10] <Kaiepi> m: say sub () { LEAVE return 1 }()

[03:10] <camelia> rakudo-moar a643b8be1: OUTPUT: «Attempt to return outside of any Routine␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:11] <Kaiepi> m: EVAL "say sub () { LEAVE return 1 }()"

[03:11] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤EVAL is a very dangerous function!!! (use the MONKEY-SEE-NO-EVAL pragma to override this error,␤but only if you're VERY sure your data contains no injection attacks)␤at <tmp>:1␤------> 3EVAL "say…»

[03:11] <Kaiepi> m: use MONKEY-SEE-NO-EVAL; EVAL "say sub () { LEAVE return 1 }()"

[03:11] <camelia> rakudo-moar a643b8be1: OUTPUT: «Attempt to return outside of any Routine␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[03:12] <Kaiepi> evalable6, say sub () { LEAVE return 1 }()

[03:12] <evalable6> Kaiepi, rakudo-moar 163f0a036: OUTPUT: «(exit code 1) Attempt to return outside of any Routine␤  in sub  at /tmp/wmjLFMatY3 line 1␤  in block <unit> at /tmp/wmjLFMatY3 line 1␤␤»

[03:12] <Kaiepi> ok weird i can get this to run fine outside of eval, but not when i'm using it

[03:19] <Kaiepi> wait never mind

[03:19] <Kaiepi> MoarVM panic: Internal error: Unwound entire stack and missed handler

[03:36] *** Kaiepi left
[03:38] *** Kaiepi joined
[03:42] *** Kaiepi left
[03:42] *** Kaiepi joined
[03:47] *** Kaiepi left
[03:51] *** Kaiepi joined
[04:06] *** vrurg left
[04:52] <timotimo> Kaiepi: probably the fact that you were using " instead of ' and the LEAVE was running outside of the eval anyway :)

[05:24] *** epony left
[06:43] *** notable6 left
[06:43] *** nativecallable6 left
[06:43] *** coverable6 left
[06:43] *** evalable6 left
[06:43] *** benchable6 left
[06:43] *** undersightable6 left
[06:43] *** unicodable6 left
[06:43] *** quotable6 left
[06:43] *** reportable6 left
[06:43] *** releasable6 left
[06:43] *** squashable6 left
[06:43] *** greppable6 left
[06:43] *** bisectable6 left
[06:43] *** bloatable6 left
[06:43] *** statisfiable6 left
[06:43] *** committable6 left
[06:43] *** shareable6 left
[06:44] *** releasable6 joined
[06:44] *** nativecallable6 joined
[06:44] *** quotable6 joined
[06:44] *** statisfiable6 joined
[06:45] *** shareable6 joined
[06:45] *** greppable6 joined
[06:45] *** ChanServ sets mode: +v greppable6

[06:45] *** coverable6 joined
[06:45] *** squashable6 joined
[06:45] *** ChanServ sets mode: +v squashable6

[06:46] *** undersightable6 joined
[06:46] *** reportable6 joined
[06:46] *** bloatable6 joined
[06:46] *** ChanServ sets mode: +v bloatable6

[06:47] *** committable6 joined
[06:47] *** notable6 joined
[06:47] *** unicodable6 joined
[06:47] *** ChanServ sets mode: +v unicodable6

[06:47] *** benchable6 joined
[06:47] *** evalable6 joined
[06:47] *** ChanServ sets mode: +v evalable6

[06:48] *** bisectable6 joined
[07:19] *** robertle joined
[09:13] <lizmat> Files=1262, Tests=107959, 205 wallclock secs (26.67 usr  7.79 sys + 2857.02 cusr 284.08 csys = 3175.56 CPU)

[09:14] <lizmat> looks like S11-modules/export.t is broken: Could not instantiate role 'Foo::Bar':

[09:14] <lizmat> vrurg  ^^  ??

[09:19] <lizmat> ah, fixed in a commit last night, so please ignore  ^^  :-)

[11:21] <Geth> ¦ rakudo: db46aeb3ac | (Tom Browder)++ (committed using GitHub Web editor) | docs/rakudo-nqp-and-pod-notes.md

[11:21] <Geth> ¦ rakudo: move plural s outside bold type

[11:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/db46aeb3ac

[13:28] *** lucasb joined
[13:35] *** pamplemousse joined
[13:54] *** pamplemousse left
[14:45] <tbrowder>  hi, #perl6-dev

[14:51] <tbrowder> i have a pod question: why do we need to completely parse pod during a program execution? i know the current specs require it, but what about, in a future version, just bypassing it and having p6doc do that? for one thing, maybe it would speed up execution.

[14:52] *** vrurg joined
[14:53] <tbrowder> plus it should require less memory.

[14:55] <tbrowder> better security (see github concerns)?

[14:55] <tbrowder> just cogitating...

[14:59] <ugexe> well, $=pod for one

[14:59] <timotimo> execution wouldn't speed up, and we're almost good at not deserializing things that aren't used

[14:59] <timotimo> so the pod objects are in the .moarvm file, but won't be blown up to actual objects

[15:03] <ugexe> also what if you want to write pod that changes the perl6 grammar

[15:04] <timotimo> how do you mean?

[15:05] <ugexe> as a joke lets say i wanted to create a DSL but implemented in pod such that when out of the pod one can write in the dsl

[15:05] <ugexe> and by "in pod" i most likely mean executing perl6 code inside pod

[15:06] <ugexe> is this not possible?

[15:07] <timotimo> you can't really put perl6 code inside of pod, just in between pod bits

[15:07] <timotimo> but of course if you have a slang that looks inside pod bits, there can be code in there

[15:07] <ugexe> so id have to write another slang to allow to run perl6 code in pod

[15:10] <tbrowder> timotimo: i'm really asking the question because i want to start working in pod again but may be up against the "no-double-parse" rule.

[15:10] <timotimo> yeah, that makes it a little trickier

[15:16] <tbrowder> fundamentally the pod chunks (pod between ambient code) are a list of lines that unfortunately require a lot of look back or really ugly code. my current look is trying to delay assembly of the tokens to qast until all the parts are defined but, by first analyzing grossly by lines, the pain may be eased.

[17:13] <timotimo> i kind of wish the samecase and samemark subs/methods would support a way to repeat the pattern

[17:16] <lizmat> m: dd Rakudo::Internals::JSON.from-json(Q/+1/)   # /me is surprised that "+1" is not a valid numeric JSON string

[17:16] <camelia> rakudo-moar a643b8be1: OUTPUT: «Invalid JSON: at 1: expected a json object, but got + (context: "+1")␤  in block <unit> at <tmp> line 1␤␤»

[17:16] <lizmat> m: dd Rakudo::Internals::JSON.from-json(Q/-1/)   # while -1 is

[17:16] <camelia> rakudo-moar a643b8be1: OUTPUT: «-1␤»

[17:17] <lizmat> timotimo: ^^^ is that correct ?

[17:18] *** lucasb left
[17:18] <jnthn> lizmat: Just about to head out for dinner, but: yes, pretty sure that leading + is not supported in JSON

[17:18] <jnthn> lizmat: See the number rule at https://www.json.org/

[17:19] <lizmat> thanks  :-)

[17:22] <Kaiepi> m: say my @ = from-json '[]'

[17:22] <camelia> rakudo-moar a643b8be1: OUTPUT: «[[]]␤Saw 1 occurrence of deprecated code.␤================================================================================␤Sub from-json (from GLOBAL) seen at:␤  <tmp>, line 1␤Please use JSON::Fast, JSON::Tiny or JSON::Pretty from https://mo…»

[17:23] <Kaiepi> hm still makes a nested array

[17:26] <Kaiepi> i'll take a stab at making it parse arrays properly

[17:26] <ugexe> that is proper

[17:27] <timotimo> it's because JSON::Fast was born as a drop-in replacement of JSON::Tiny

[17:27] <timotimo> which returns arrays inside scalar containers

[17:27] <timotimo> m: say my @ = (from-json '[]')<>

[17:27] <camelia> rakudo-moar a643b8be1: OUTPUT: «[]␤Saw 1 occurrence of deprecated code.␤================================================================================␤Sub from-json (from GLOBAL) seen at:␤  <tmp>, line 1␤Please use JSON::Fast, JSON::Tiny or JSON::Pretty from https://modu…»

[17:27] <Kaiepi> yeah, i know

[17:27] <Kaiepi> i raised an issue on JSON::Fast a while ago about it

[17:28] <timotimo> i've been negligient :(

[17:28] <ugexe> m: my $ = from-json "{}"; # this seems broken though

[17:28] <camelia> rakudo-moar a643b8be1: OUTPUT: «Use of Nil in string context␤  in block <unit> at <tmp> line 1␤Invalid JSON: reached end of string when looking for something␤  in block <unit> at <tmp> line 1␤␤Saw 1 occurrence of deprecated code.␤=========================================…»

[17:28] <timotimo> ugexe: nope, "{}" is the empty string

[17:29] <timotimo> you want '{}'

[17:29] <ugexe> oh right

[17:31] <Kaiepi> m: use nqp; sub a { my $foo = []; $foo }; my @a = a; say @a

[17:31] <camelia> rakudo-moar a643b8be1: OUTPUT: «[[]]␤»

[17:32] <Kaiepi> m: use nqp; sub a { my \foo; nqp::p6store(foo, []); $foo }; my @a = a; say @a

[17:32] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Term definition requires an initializer␤at <tmp>:1␤------> 3use nqp; sub a { my \foo7⏏5; nqp::p6store(foo, []); $foo }; my @a =␤»

[17:32] <Kaiepi> m: use nqp; sub a { my $foo := Nil; nqp::p6store($foo, []); $foo }; my @a = a; say @a

[17:32] <camelia> rakudo-moar a643b8be1: OUTPUT: «Cannot modify an immutable Str (Nil)␤  in sub a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:33] <Kaiepi> m: use nqp; sub a { my $foo; nqp::p6assign($foo, []); $foo }; my @a = a; say @a

[17:33] <camelia> rakudo-moar a643b8be1: OUTPUT: «[[]]␤»

[17:33] <Kaiepi> m: use nqp; sub a { my \foo := []; $foo }; my @a = a; say @a

[17:33] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$foo' is not declared. Did you mean 'foo'?␤at <tmp>:1␤------> 3use nqp; sub a { my \foo := []; 7⏏5$foo }; my @a = a; say @a␤»

[17:33] <Kaiepi> m: use nqp; sub a { my \foo := []; foo }; my @a = a; say @a

[17:33] <camelia> rakudo-moar a643b8be1: OUTPUT: «[]␤»

[17:34] <Kaiepi> m: use nqp; sub a { my \foo := []; foo }; my @a = a; @a = 1,2,3

[17:34] <camelia> rakudo-moar a643b8be1: ( no output )

[17:35] <Kaiepi> m: use nqp; sub a { my \foo := []; foo }; my $a = a; $a = 1

[17:35] <camelia> rakudo-moar a643b8be1: ( no output )

[17:36] <Kaiepi> ok good looks like the return value being immutable doesn't matter when assigning it

[17:46] <lizmat> Kaiepi: ftr, I'm currently working at completely re-imagining "from-json"

[17:47] <lizmat> should be ready by tomorrow

[17:47] <lizmat> and hopefully at least 2x as fast

[17:47] <Kaiepi> well shit

[17:47] <Kaiepi> oh well at least i didn't spend too much time on this

[17:48] <lizmat> Kaiepi: hope you learned something from it, even though the result wasn't what you expected ?

[17:48] <Kaiepi> should i still pullreq it anyway in case there are issues with the rewrite?

[17:48] <lizmat> Kaiepi: sure... at least it won't be lost, if someone want to go back later  :-)

[17:48] <Kaiepi> i learned bound values become mutable again after being returned from functions, so that's a plus i guess

[17:50] <lizmat> Kaiepi: @a = a, is basically the same as @a.STORE(a)

[17:50] <lizmat> which takes an iterator of a and stores it in the array

[17:50] <lizmat> so it doesn't matter if a is bound / ro or not

[17:51] <lizmat> as long as it has an .iterator method that produces values, it is ok

[18:01] <Geth> ¦ rakudo: Kaiepi++ created pull request #2968: Fix RI's from-json creating nested arrays on assign

[18:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2968

[19:02] <tobs> I want to parse expressions (mostly polynomials, but extensibility would be nice). The operator precedence parser part of nqp's HLL::Grammar looks really neat. Is that available in a stable form (as I hear you shouldn't use nqp in Perl 6 code).

[19:02] <tobs> s/.$/?/

[19:03] <tobs> (oh, sorry, I mistook this for #perl6)

[20:32] <Geth> ¦ rakudo: b7e0e894d7 | (Ben Davies)++ | src/core/Rakudo/Internals/JSON.pm6

[20:32] <Geth> ¦ rakudo: Fix RI's from-json creating nested arrays on assign

[20:32] <Geth> ¦ rakudo: 

[20:32] <Geth> ¦ rakudo: `my @ = from-json '[]'` would return `[[]]` before this since the result

[20:32] <Geth> ¦ rakudo: of parsing the array was being assigned to a Scalar.

[20:32] <Geth> ¦ rakudo: 

[20:32] <Geth> ¦ rakudo: The other parser subroutines also have some minor changes in case any

[20:32] <Geth> ¦ rakudo: similar bugs happen with them.

[20:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b7e0e894d7

[20:32] <Geth> ¦ rakudo: fd1d626c95 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/core/Rakudo/Internals/JSON.pm6

[20:32] <Geth> ¦ rakudo: Merge pull request #2968 from Kaiepi/from-json

[20:32] <Geth> ¦ rakudo: 

[20:32] <Geth> ¦ rakudo: Fix RI's from-json creating nested arrays on assign

[20:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fd1d626c95

[20:32] <timotimo> i'm glad rakudo's internal from-json can make this change %)

[20:32] <Kaiepi> :)

[21:17] <ugexe> did you benchmark the change?

[21:18] <ugexe> all that truly matters for the internal parser is speed

[22:25] *** Kaiepi left
[22:30] *** Kaiepi joined
[23:34] <Geth> ¦ nqp/match-speedup: 116ef733ed | (Jonathan Worthington)++ | 2 files

[23:34] <Geth> ¦ nqp/match-speedup: Always produce integers in captures hash

[23:34] <Geth> ¦ nqp/match-speedup: 

[23:34] <Geth> ¦ nqp/match-speedup: So we don't have to coerce things during comparison.

[23:34] <Geth> ¦ nqp/match-speedup: review: https://github.com/perl6/nqp/commit/116ef733ed

[23:34] <Geth> ¦ nqp/match-speedup: 97d40c8395 | (Jonathan Worthington)++ | 2 files

[23:34] <Geth> ¦ nqp/match-speedup: Use a better data structure for Match setup info

[23:34] <Geth> ¦ nqp/match-speedup: 

[23:34] <Geth> ¦ nqp/match-speedup: So we can calculate once what we would previously re-calculate on every

[23:34] <Geth> ¦ nqp/match-speedup: Match object construction.

[23:35] <Geth> ¦ nqp/match-speedup: review: https://github.com/perl6/nqp/commit/97d40c8395

[23:37] <jnthn> Got similar patches for Rakudo too, and some further match construction re-working; in the benchmark I've been playing with (a regex with a few positional captures) I'm seeing Match construction come out at under 60% of the time it used to.

[23:38] <timotimo> whoa

[23:39] <jnthn> The above seems to make several percent improvement to CORE.setting parse time

[23:40] <jnthn> Will tinker with it some more tomorrow

[23:40] <timotimo> would you think generating from-capnames with compiler services sometimes could be a win?

[23:41] <timotimo> oh

[23:41] <timotimo> the loop goes over the passed-in capnames

[23:42] <timotimo> not as trivial to compile-time-build

[23:42] <timotimo> i'm pretty sure i need a sleep real soon now

[23:42] <timotimo> gnite jnthn :)

[23:43] <jnthn> from-capnames is called at compile time, that's the point :)

[23:43] <jnthn> Then the result serialized

[23:45] <timotimo> i thought that's prepare-hash

[23:45] <timotimo> but yes, i think i see that now

[23:45] <timotimo> i love it

[23:54] <MasterDuke> jnthn++

[23:55] <MasterDuke> but speaking of always producing integers, https://github.com/perl6/nqp/pull/518 should help with that when i merge after the next release

[23:57] <jnthn> MasterDuke: Yeah, we might be able to simplify what I did after that :)

[23:58] <jnthn> The nums are quite horrible, we have a >= in MATCH and since it's `num >= int` then it goes the whole Bridge path...

[23:59] <MasterDuke> i think i checked and after my PR there aren't any nums allocated (at least when building nqp, not sure about rakudo)

