[03:04] *** ufobat_ joined
[03:04] *** p6bannerbot sets mode: +v ufobat_

[03:07] *** ufobat left
[03:07] *** lizmat left
[06:16] *** robertle left
[06:27] <nine> .tell patrickb Though I don't remember the thoughts behind RAKUDO_PREFIX, it seems to be a documented interface and I'd guess one used in some packaging or build scripts. I'd rather not break those without good reason.

[06:27] <yoleaux> nine: I'll pass your message to patrickb.

[07:33] *** brrt joined
[07:34] *** p6bannerbot sets mode: +v brrt

[07:57] *** robertle joined
[07:57] *** p6bannerbot sets mode: +v robertle

[08:16] *** lizmat joined
[08:16] *** p6bannerbot sets mode: +v lizmat

[08:18] <lizmat> Files=1265, Tests=88017, 379 wallclock secs (20.26 usr  6.21 sys + 2699.20 cusr 231.20 csys = 2956.87 CPU)

[09:28] *** ExtraCrispy joined
[09:28] *** p6bannerbot sets mode: +v ExtraCrispy

[11:16] <|Tux|> Rakudo version 2018.12-217-g54fe8a1a8 - MoarVM version 2018.12-29-g1ff55bf1c

[11:16] <|Tux|> csv-test-xs-20      0.426 -  0.437

[11:16] <|Tux|> csv-ip5xs           0.740 -  0.755

[11:16] <|Tux|> test-t --race       0.837 -  0.876

[11:16] <|Tux|> test-t              1.842 -  1.877

[11:16] <|Tux|> csv-ip5xs-20        6.548 -  6.671

[11:16] <|Tux|> test                7.661 -  7.984

[11:16] <|Tux|> test-t-20 --race    9.635 -  9.808

[11:16] <|Tux|> csv-parser         22.174 - 22.968

[11:16] <|Tux|> test-t-20          31.219 - 31.932

[11:37] <Geth> ¦ rakudo: 2ed2f39813 | (Elizabeth Mattijsen)++ | src/Perl6/Actions.nqp

[11:37] <Geth> ¦ rakudo: Allow for my %h is Set[Int] = ... to work

[11:37] <Geth> ¦ rakudo: 

[11:37] <Geth> ¦ rakudo: More specifically, any "is" trait with a type and a parameterization will

[11:37] <Geth> ¦ rakudo: now perform the parameterization if the .HOW of the type has a "parameterize"

[11:37] <Geth> ¦ rakudo: method.

[11:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2ed2f39813

[11:38] *** MasterDuke left
[12:04] <Geth> ¦ rakudo: eb50d8cefc | (Elizabeth Mattijsen)++ | src/core/Parameter.pm6

[12:04] <Geth> ¦ rakudo: Update comment

[12:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eb50d8cefc

[12:27] *** brrt` joined
[12:27] *** p6bannerbot sets mode: +v brrt`

[12:29] *** brrt left
[12:33] *** brrt`` joined
[12:34] *** p6bannerbot sets mode: +v brrt``

[12:35] *** brrt` left
[12:41] <dogbert17> lizmat: should we be worried about t/spec/S14-traits/attributes.t ?

[12:42] <lizmat> interesting...  I assumed that it was a flapper  :-(

[12:43] <dogbert17> unfurtunately it's fails very consistently

[12:46] <lizmat> yeah, I see that now   :-(

[12:49] * lizmat investigate

[12:49] <lizmat> s

[12:49] <dogbert17> perhaps it's an easy fix

[12:50] <lizmat> looking at the diff, I don't see how I changed the code path for "is doc('barks')"

[12:51] <timotimo> maybe the debugserver could help by putting a breakpoint in the relevant places and seeing what triggers them

[13:18] *** brrt`` is now known as brrt

[13:19] <lizmat> dogbert17: yeah, fix is easy, although one could argue that the test is iffy

[13:20] <lizmat> because "doc" is actually a type in that file, "is doc" without any parameter does not do what you expect

[13:20] <lizmat> even if you make the second argument on the trait_mod optional

[13:23] <lizmat> "is Type" is just handled specifically and especially

[13:28] <Geth> ¦ rakudo: 8ad750ab57 | (Elizabeth Mattijsen)++ | src/Perl6/Actions.nqp

[13:28] <Geth> ¦ rakudo: Limit is Type[OtherType] parameterization to QuantHashes

[13:28] <Geth> ¦ rakudo: 

[13:28] <Geth> ¦ rakudo: Unbreaks S14-traits/attributes.t , dogbert17++ for spotting

[13:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8ad750ab57

[14:09] <Geth> ¦ rakudo: 6a8f08b95f | (Elizabeth Mattijsen)++ | src/core/Rakudo/QuantHash.pm6

[14:09] <Geth> ¦ rakudo: Show the actual value instead of its type

[14:09] <Geth> ¦ rakudo: 

[14:09] <Geth> ¦ rakudo: Improves the error message for "Set[Int}.new = <a b c>" from:

[14:09] <Geth> ¦ rakudo: 

[14:09] <Geth> ¦ rakudo:     Type check failed in binding; expected Int but got Str (Str)

[14:09] <Geth> ¦ rakudo: 

[14:09] <Geth> ¦ rakudo: to:

[14:09] <Geth> ¦ rakudo: 

[14:09] <Geth> ¦ rakudo:     Type check failed in binding; expected Int but got Str ("a")

[14:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6a8f08b95f

[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. 6 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[15:00] <lizmat> afk for a bit&

[15:01] <jnthn> Every time I look the blockers count goes up :P

[15:05] *** brrt left
[15:08] <nine> So why do you keep looking? :P

[15:10] <jnthn> Good question :P

[15:19] <jnthn> Well, now I have a bit of time to see if I can help with any of 'em... :)

[15:23] *** patrickb joined
[15:23] *** p6bannerbot sets mode: +v patrickb

[15:24] <patrickb> o/

[15:24] <yoleaux> 06:27Z <nine> patrickb: Though I don't remember the thoughts behind RAKUDO_PREFIX, it seems to be a documented interface and I'd guess one used in some packaging or build scripts. I'd rather not break those without good reason.

[15:24] <jnthn> m: for 1..3 { { say $_ ; last } if $_ == 2 }

[15:24] <camelia> rakudo-moar 6a8f08b95: OUTPUT: «True␤»

[15:24] <jnthn> committable6: 2018.12 for 1..3 { { say $_ ; last } if $_ == 2 }

[15:24] <committable6> jnthn, ¦2018.12: «2␤»

[15:25] <jnthn> Huh, this one is broken even with --optimize=off

[15:25] <jnthn> (On HEAD)

[15:25] <patrickb> Google just opened registration for summer of code mentoring organisations!

[15:28] <patrickb> Or is at least bound to do so today...

[15:30] <patrickb> I'd very much like perl6 (or tpf or whatever makes most sense) to take part again.

[15:32] <patrickb> I'll see what I can do (even if it's only buggering the right people).

[15:33] <jnthn> In https://github.com/rakudo/rakudo/issues/2601 are we really sure that 541a4f16 is the one to blame...

[15:33] <jnthn> committable6: 541a4f16 for 1..3 { { say $_ ; last } if $_ == 2 }

[15:33] <committable6> jnthn, ¦541a4f1: «True␤»

[15:33] <jnthn> committable6: 541a4f16~1 for 1..3 { { say $_ ; last } if $_ == 2 }

[15:33] <committable6> jnthn, ¦541a4f16~1: «2␤»

[15:34] <jnthn> How on earth can a commit that only touches Optimizer.nqp have an effect if --optimize=off

[15:35] <jnthn> committable6: 541a4f16~1 --optimize=off for 1..3 { { say $_ ; last } if $_ == 2 }

[15:35] <committable6> jnthn, https://gist.github.com/49ccc7dfdebae3ff92e1e191ddb61ff3

[15:35] <jnthn> AlexDaniel: Is there a way to do ^^ (that is, run a commit with a command line option passed to Rakudo)?

[15:36] <jnthn> I'm wondering if the optimizer hid a problem introduced in an earlier commit, then got fixed so it didn't hide the bug

[15:36] <AlexDaniel> committable6: 541a4f16~1 run <perl6 --optimize=off -e>, ｢for 1..3 { { say $_ ; last } if $_ == 2 }｣

[15:36] <committable6> AlexDaniel, ¦541a4f16~1: «True␤»

[15:36] <AlexDaniel> is this good enough?

[15:36] <jnthn> Yes, and confirms the hypothesis...now, can I bisset...

[15:37] <jnthn> bisectable6: run <perl6 --optimize=off -e>, ｢for 1..3 { { say $_ ; last } if $_ == 2 }｣

[15:37] <bisectable6> jnthn, Bisecting by output (old=2015.12 new=6a8f08b) because on both starting points the exit code is 0

[15:37] <bisectable6> jnthn, bisect log: https://gist.github.com/e8f56bde082cb4bddcf2adab63f9854e

[15:37] <bisectable6> jnthn, (2018-02-10) https://github.com/rakudo/rakudo/commit/dfb6d951d7ef9ffea53940f2947ad9671e512898

[15:37] <jnthn> Wow!

[15:38] <AlexDaniel> c: dfb6d951d7e^,dfb6d951d7e run <perl6 --optimize=off -e>, ｢for 1..3 { { say $_ ; last } if $_ == 2 }｣

[15:38] <committable6> AlexDaniel, ¦dfb6d951d7e^: «2␤» ¦dfb6d95: «True␤»

[15:38] <jnthn> committable6: 2018.12 run <perl6 --optimize=off -e>, ｢for 1..3 { { say $_ ; last } if $_ == 2 }｣

[15:38] <committable6> jnthn, ¦2018.12: «True␤»

[15:38] <jnthn> Gosh.

[15:39] <jnthn> So what's happening is that `{ say $_ ; last } if $_ == 2` is getting compiled as if it was `if $_ == 2 { say $_ ; last }`

[15:40] <jnthn> But it appears it has been for a while, but an optimizer flattening bug covered it up

[15:40] <jnthn> committable6: 2018.12 for 1..3 { { say $_ ; last } if $_ == 2 }

[15:40] <committable6> jnthn, ¦2018.12: «2␤»

[15:40] <jnthn> committable6: 2018.12 for 1..3 { { my $x = 42; say $_ ; last } if $_ == 2 }

[15:40] <committable6> jnthn, ¦2018.12: «True␤»

[15:41] <jnthn> Yup; that declaration of $x was enough to prevent the old flattener from doing its work.

[15:42] <jnthn> And probably the commit bissectable just found us was when code-gen changed so as to start respecting .count or something on a QAST::Block

[15:43] <jnthn> And the optimizer hid the regression, and nobody wrote something complex enough in the block on the LHS to unveil the bug

[15:43] <AlexDaniel> heh

[15:43] <jnthn> So finally, I correct the block flattener to (correctly, given the AST it's looking at) not flatten that inner one because it's a block taking an arg, and...suddenly it appears. Serves me right for fixing things :P

[15:44] <AlexDaniel> haha :D

[15:44] <jnthn> So now the interesting question is how to fix it properly. :)

[15:45] <AlexDaniel> jnthn: it's a new button, btw

[15:45] <jnthn> Yeah, it's a really nice idea to have it

[15:45] <AlexDaniel> it appeared around the same time they introduced “Transfer issue” feature

[15:45] <AlexDaniel> I think

[15:59] * jnthn spectests a fix

[15:59] *** cfa joined
[15:59] *** p6bannerbot sets mode: +v cfa

[16:00] <cfa> 👋🏽

[16:00] <jnthn> m: use Test; my $res; for 1..3 { { $res = $_; last } if $_ == 2; }; is $res, 2

[16:00] <camelia> rakudo-moar 6a8f08b95: OUTPUT: «not ok 1 - ␤# Failed test at <tmp> line 1␤# expected: '2'␤#      got: 'True'␤»

[16:00] * AlexDaniel relocates to another room…

[16:00] <jnthn> m: use Test; my $res; for 1..3 { { $res = $_; last } unless $_ != 2; }; is $res, 2

[16:00] <camelia> rakudo-moar 6a8f08b95: OUTPUT: «not ok 1 - ␤# Failed test at <tmp> line 1␤# expected: '2'␤#      got: 'False'␤»

[16:00] <AlexDaniel> neighbour above is using their rotary hammer… to drill holes in the floor??

[16:00] <AlexDaniel> right on top of my head…

[16:00] <jnthn> !!

[16:01] <jnthn> That sounds headache-inducing...

[16:02] <dogbert17> AlexDaniel: are they spying on you :)

[16:20] <Geth> ¦ rakudo: c0f8378827 | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[16:20] <Geth> ¦ rakudo: Fix handling of $_ in blocks to if/unless mods

[16:20] <Geth> ¦ rakudo: 

[16:20] <Geth> ¦ rakudo: The program:

[16:20] <Geth> ¦ rakudo: 

[16:20] <Geth> ¦ rakudo:     for 1..3 { { say $_; last } if $_ == 2 }

[16:20] <Geth> ¦ rakudo: 

[16:20] <Geth> ¦ rakudo: Recently started to output `True` instead of `2`. This bissected to the

[16:20] <Geth> ¦ rakudo: <…commit message has 11 more lines…>

[16:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c0f8378827

[16:21] <Geth> ¦ roast: 9cdec2fd9c | (Jonathan Worthington)++ | 2 files

[16:21] <Geth> ¦ roast: Test $_ behavior in block with if/unless mods

[16:21] <Geth> ¦ roast: 

[16:21] <Geth> ¦ roast: Covers the regression reported in

[16:21] <Geth> ¦ roast: https://github.com/rakudo/rakudo/issues/2601.

[16:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9cdec2fd9c

[16:23] <jnthn> That's one half of #2601

[16:28] <cfa> jnthn: wow, that sounds a bit gnarly

[16:28] <cfa> nice one

[16:31] * patrickb relocates

[16:31] *** patrickb left
[16:36] *** lucasb joined
[16:36] *** p6bannerbot sets mode: +v lucasb

[16:42] <jnthn> m: use Test; { $_ = 42; is (do if 42 { $_ }), 42; }

[16:42] <camelia> rakudo-moar c0f837882: OUTPUT: «not ok 1 - ␤# Failed test at <tmp> line 1␤# expected: '42'␤#      got: (Rakudo::Internals::LoweredAwayLexical)␤»

[16:45] *** brrt joined
[16:45] *** p6bannerbot sets mode: +v brrt

[16:49] <Geth> ¦ rakudo: 623450d805 | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[16:49] <Geth> ¦ rakudo: Remove an unused parameter

[16:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/623450d805

[16:51] <Geth> ¦ rakudo: 08d87f7061 | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[16:51] <Geth> ¦ rakudo: Do not copy $_ upon immediate block inlining

[16:51] <Geth> ¦ rakudo: 

[16:51] <Geth> ¦ rakudo: Otherwise, in some circumstances, it can lead to lexical accesses

[16:51] <Geth> ¦ rakudo: that were meant to read outer $_ reading the lowered stub one. This

[16:51] <Geth> ¦ rakudo: addresses the second issue that was reported in #2601.

[16:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/08d87f7061

[16:54] <Geth> ¦ roast: 7c08f8f29a | (Jonathan Worthington)++ | S04-statements/do.t

[16:54] <Geth> ¦ roast: Cover `do if 42 { $_ }` evaluating correctly

[16:54] <Geth> ¦ roast: 

[16:54] <Geth> ¦ roast: Covers a bug reported in https://github.com/rakudo/rakudo/issues/2601.

[16:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7c08f8f29a

[16:55] *** ilmari_ left
[17:00] *** lizmat left
[17:03] *** robertle left
[17:04] *** patrickb joined
[17:05] *** p6bannerbot sets mode: +v patrickb

[17:05] <AlexDaniel> jnthn++

[17:07] *** patrickz joined
[17:07] *** lizmat joined
[17:07] *** p6bannerbot sets mode: +v lizmat

[17:07] *** p6bannerbot sets mode: +v patrickz

[17:10] *** patrickb left
[17:24] *** dct joined
[17:24] *** p6bannerbot sets mode: +v dct

[18:07] *** robertle joined
[18:08] *** p6bannerbot sets mode: +v robertle

[18:16] *** dct left
[18:24] *** brrt left
[19:11] *** dct joined
[19:11] *** p6bannerbot sets mode: +v dct

[20:05] *** lucasb left
[20:20] *** lizmat left
[20:25] *** lizmat joined
[20:25] *** p6bannerbot sets mode: +v lizmat

[20:27] <Geth> ¦ rakudo: bdc63f0a8d | (Elizabeth Mattijsen)++ | src/core/Rat.pm6

[20:27] <Geth> ¦ rakudo: Revert "Introducing $*FULL-PRECISION"

[20:27] <Geth> ¦ rakudo: 

[20:27] <Geth> ¦ rakudo: This reverts commit 9f956aff4a9c0e90c223f18bbaa63603bf859d65.

[20:27] <Geth> ¦ rakudo: 

[20:27] <Geth> ¦ rakudo: Jonathan need to mull over this some more, so carry this across the release.

[20:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bdc63f0a8d

[20:56] *** lizmat left
[21:03] *** lizmat joined
[21:03] *** p6bannerbot sets mode: +v lizmat

[21:41] *** entonian joined
[21:42] *** p6bannerbot sets mode: +v entonian

[21:47] *** entonian left
[21:50] <Geth> ¦ roast: 73e63d5aba | (Elizabeth Mattijsen)++ | 3 files

[21:50] <Geth> ¦ roast: Add basic parameterized Set/Bag/Mix tests

[21:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/73e63d5aba

[22:05] *** ufobat_ left
[22:05] *** patrickz left
[22:26] <Geth> ¦ roast: 7df0786dec | (Elizabeth Mattijsen)++ | 3 files

[22:26] <Geth> ¦ roast: Unskip tests for SetHash/BagHash/MixHash

[22:26] <Geth> ¦ roast: 

[22:26] <Geth> ¦ roast: Also correct some tests as they were originally written at a time when the

[22:26] <Geth> ¦ roast: semantics weren't as clear as they are now.

[22:26] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7df0786dec

[22:45] <Geth> ¦ rakudo: 87b71c2758 | (Elizabeth Mattijsen)++ | src/core/MixHash.pm6

[22:45] <Geth> ¦ rakudo: Oops, forgot to check on types in MixHash.AT-KEY

[22:45] <Geth> ¦ rakudo: 

[22:45] <Geth> ¦ rakudo: Found thanks to the power of tests!

[22:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/87b71c2758

[22:46] <Geth> ¦ roast: 2df8f54493 | (Elizabeth Mattijsen)++ | 3 files

[22:46] <Geth> ¦ roast: Add basic parameterized SetHash/BagHash/MixHash tests

[22:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2df8f54493

[22:46] <lizmat> and that concludes my hacking for today&

[22:51] *** cfa left
[22:52] *** dct left
[22:57] * lizmat just spotted a new error in S32-basics/xxKEY.t, will look at this tomorrow

[22:57] <lizmat> afk&

