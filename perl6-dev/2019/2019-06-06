[00:53] *** pierce_ joined
[00:56] *** pierce_ left
[01:05] <Kaiepi> oh i was thinking of supporting both jnthn

[01:06] <Kaiepi> just maybe deprecating :localhost and :localport in 6.e and removing it in 6.f (or whatever the next release is called)

[01:08] <Kaiepi> actually since i'm refactoring IO::Socket::INET anyway i might be able to give it the same api as IO::Socket::Async for creating sockets

[01:08] <Kaiepi> since i'm doing similar changes to IO::Socket::Async and splitting creating sockets and binding/connecting thme

[01:10] *** MasterDuke left
[01:12] *** MasterDuke joined
[01:13] *** MasterDuke left
[01:13] *** MasterDuke joined
[01:47] *** MasterDuke left
[02:08] <Geth> ¦ rakudo: vrurg++ created pull request #2953: Make v6.* work again.

[02:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2953

[06:14] *** Kaypie joined
[06:15] *** Kaiepi left
[07:32] *** patrickb joined
[08:24] <Geth> ¦ rakudo: patzim self-assigned Rakudo no longer builds properly on OpenBSD https://github.com/rakudo/rakudo/issues/2904

[08:24] <Geth> ¦ rakudo: patzim unassigned from vrurg Issue Rakudo no longer builds properly on OpenBSD https://github.com/rakudo/rakudo/issues/2904

[09:16] *** AlexDani` is now known as AlexDaniel

[09:16] *** AlexDaniel left
[09:16] *** AlexDaniel joined
[09:56] *** AlexDaniel left
[09:56] *** AlexDaniel joined
[10:59] <jnthn> grmbl, trying to tweak attribute initialization so we only need the attrinited stuff in some (a minority) of cases, and Mu.BUILDALL is a horror to refactor

[11:02] *** |Tux| left
[11:05] *** |Tux| joined
[11:21] <timotimo> it's the big blob of nqp ops, right?

[11:21] <timotimo> may want to parse it into a tree and work on the tree rather than with a text editor

[11:38] *** Kaypie left
[11:38] *** Kaypie joined
[12:04] *** squashable6 left
[12:07] *** squashable6 joined
[12:12] <jnthn> timotimo: It is. Thing I've got it updated, anyway...now onto the code-gen path in World, then will see if any of this can work at all :)

[12:15] <jnthn> *Think

[12:51] <dogbert17> are major opts in the works here?

[12:53] *** pamplemousse joined
[12:54] <jnthn> Well, work towards I guess :)

[12:56] <dogbert17> very cool

[12:56] <jnthn> This should make the code we spit out in the JIT for attribute access a lot smaller in many cases, and probably will be a small object construction speedup.

[12:56] <jnthn> But it'll also mean the escape analyzer can understand/deal with objects better too

[12:56] <dogbert17> sounds like a win win :)

[12:57] <jnthn> Well, provided I can preserve all the semantics that matter to spectest along the way, yes :)

[12:58] <dogbert17> I guess there'll be a surprise or two when running the spectests

[12:59] <jnthn> Hopefully none that scupper the whole effort...

[12:59] <dogbert17> we can't have that :)

[12:59] <dogbert17> sigh, today it's 27 degrees outside and the same temp inside

[13:00] <jnthn> 26 out and 25 in the office, with thunderstorm forecast

[13:01] <jnthn> I've got things unbusted enough to pass `make test` at least :)

[13:02] <dogbert17> that's very promising

[13:08] <jnthn> I can't quite see the full fallout of things until I do the REPR protocol and MoarVM side of the changes, however

[13:10] <dogbert17> are those changes larger than the ones you've just made

[13:16] <jnthn> In code, or in consequence? :)

[13:16] <jnthn> In code, probably a bit less

[13:17] <jnthn> The spectest has only a handful of failures, and there's some stuff I know is still to do to in theory pass it, so fingers crossed...

[13:19] * dogbert17 crosses fingers :)

[13:26] *** Kaypie left
[13:26] *** Kaypie joined
[13:44] * [Coke] waves

[13:49] <jnthn> o/ [Coke] 

[13:59] <Kaypie> o/

[14:00] *** Kaypie is now known as Kaiepi

[14:11] <jnthn> Hmm, if I change World.nqp I sometimes have to `make clean` to not get spurious failures in `make test`; it seems that changes there maybe ain't invalidating precomps.

[14:20] <jnthn> Wow, 1 failing spectest as a result of my heap of changes...that's less than I expected

[14:20] <timotimo> very cool

[14:21] <jnthn> Didn't do the second stage (actually eliminating use of auto-viv) yet, but this is nearly all the prep in initialization for that

[14:28] *** skids joined
[14:53] *** pamplemousse left
[15:11] <Geth> ¦ rakudo/p6o-setup: aecf4e86d2 | (Jonathan Worthington)++ | 5 files

[15:11] <Geth> ¦ rakudo/p6o-setup: Re-work object initialization

[15:11] <Geth> ¦ rakudo/p6o-setup: 

[15:11] <Geth> ¦ rakudo/p6o-setup: This greatly reduces the need for attrinited, paving the way for using

[15:11] <Geth> ¦ rakudo/p6o-setup: it - and the implied attribute auto-viv - in only some very specific

[15:11] <Geth> ¦ rakudo/p6o-setup: situations. An attribute only will need the auto-viv approach if both

[15:11] <Geth> ¦ rakudo/p6o-setup: of the following are true:

[15:11] <Geth> ¦ rakudo/p6o-setup: 

[15:11] <Geth> ¦ rakudo/p6o-setup: <…commit message has 16 more lines…>

[15:11] <Geth> ¦ rakudo/p6o-setup: review: https://github.com/rakudo/rakudo/commit/aecf4e86d2

[15:23] <dogbert17> very cool

[15:29] <timotimo> aye

[15:36] *** ggoebel left
[16:06] *** patrickb left
[16:50] <Kaiepi> i'm adding support for getting free and total memory

[16:51] <Kaiepi> seems weird to have kernel methods for cpu information but nothing for memory

[16:56] <timotimo> is memory ever truly free …

[16:56] <ugexe> well, what does memory even mean?

[16:57] <ugexe> memory it can access?

[16:57] <ugexe> memory of the system?

[16:58] <timotimo> childhood memories?

[16:58] <ugexe> im guessing the answer will be "whatever uv_get_total_memory does" :P

[17:04] <Kaiepi> it means memory the system has access to yes

[17:04] <Kaiepi> not physical memory

[17:06] <timotimo> so you'll typically get a couple of terabytes for a 64bit machine?

[17:07] <timotimo> or do 64bit machines already have access to petabytes?

[17:07] <ugexe> i could have swore the libuv functions would return e.g. the host memory and not the memory available to the slave running the code

[17:07] <timotimo> i think x86_64 doesn't actually have physical addresses 64 bits wide?

[17:07] <ugexe> maybe thats changed though

[17:09] <timotimo> aha, the initial x86_64 specified only 2^48 bits of physical addresses

[17:10] <ugexe> hmm seems earlier this month it may have been made possible to pick which one

[17:10] <ugexe> uv_get_constrained_memory()

[17:10] <ugexe> https://github.com/libuv/libuv/issues/2286

[17:11] <ugexe> although the implementation is currently about useless

[17:11] <ugexe> uint64_t uv_get_constrained_memory(void) {

[17:11] <ugexe>   return 0;  /* Memory constraints are unknown. */

[17:11] <ugexe> }

[17:12] <ugexe> for OSX^

[17:12] <ugexe> im not sure how wise it is to expose stuff like that

[17:13] <ugexe> for internal moarvm use or something where its known, sure. but externally users are going to not be aware of these limitations, and even when they are its going to result in nasty platform specific code in libraries

[17:14] <ugexe> so in that sense i would argue we should only expose uv_get_total_memory

[17:16] <ugexe> oh its even more useless than i thought -- uv_get_constrained_memory only works on linux

[17:17] <timotimo> ouch

[17:19] <Kaiepi> m: use NativeCall; my CArray $mib .= new: 1, 5; my Pointer[int32] $mem .= new; sub sysctl(Str, uint32, Pointer, size_t, Pointer, size_t) is native {*}; sysctl($mib, 2, $mem, nativesizeof(int32), Pointer, 0); say $mem

[17:20] <camelia> rakudo-moar a643b8be1: OUTPUT: «Cannot resolve caller protect(Lock:U: Block:D); none of these signatures match:␤    (Lock:D: &code, *%_)␤␤5===SORRY!5=== Error while compiling <tmp>␤Calling sysctl(NativeCall::Types::CArray, Int, NativeCall::Types::Pointer[int32], Mu, Nati…»

[17:20] <Kaiepi> what

[17:20] <Kaiepi> m: use NativeCall; my CArray $mib .= new: 1, 5; my Pointer[int32] $mem .= new; sub sysctl(Str, uint32, Pointer[int32], size_t, Pointer[void], size_t) is native {*}; sysctl($mib, 2, $mem, nativesizeof(int32), Pointer[void].new, 0); say $mem

[17:20] <camelia> rakudo-moar a643b8be1: OUTPUT: «Cannot resolve caller protect(Lock:U: Block:D); none of these signatures match:␤    (Lock:D: &code, *%_)␤␤CArray cannot be used without a type␤  in method AT-POS at /home/camelia/rakudo-m-inst-1/share/perl6/sources/8660F65A7B3492675BB3B2058DB3…»

[17:21] <ugexe> sysctl is not going to get you accessable memory. it will get you total memory

[17:21] <Kaiepi> ik

[17:21] <timotimo> c: HEAD use NativeCall; my CArray $mib .= new: 1, 5; my Pointer[int32] $mem .= new; sub sysctl(Str, uint32, Pointer[int32], size_t, Pointer[void], size_t) is native {*}; sysctl($mib, 2, $mem, nativesizeof(int32), Pointer[void].new, 0); say $mem

[17:21] <committable6> timotimo, https://gist.github.com/3844b7e4bd58fc42500824a9045cbbd3

[17:21] <timotimo> CArray cannot be used without a type

[17:22] <timotimo> super strange error message though

[17:22] <Kaiepi> m: use NativeCall; my CArray[int32] $mib .= new: 1, 5; my Pointer[int32] $mem .= new; sub sysctl(CArray[int32], uint32, Pointer[int32], size_t, Pointer[void], size_t) is native {*}; sysctl($mib, 2, $mem, nativesizeof(int32), Pointer[void].new, 0); say $mem

[17:22] <camelia> rakudo-moar a643b8be1: OUTPUT: «Cannot resolve caller protect(Lock:U: Block:D); none of these signatures match:␤    (Lock:D: &code, *%_)␤␤Cannot resolve caller protect(Lock:U: Block:D); none of these signatures match:␤    (Lock:D: &code, *%_)␤  in method create-optimized-c…»

[17:23] <timotimo> do note that camelia is a little behind on commits i believe

[17:23] <timotimo> m: say $*PERL.version; say $*VM.version

[17:23] <camelia> rakudo-moar a643b8be1: OUTPUT: «v6.d␤v2019.03.110.g.081823.ffc␤»

[17:23] <timotimo> c: HEAD say $*PERL.version; say $*COMPILER.version; say $*VM.version

[17:23] <committable6> timotimo, ¦HEAD(bd2ceef): «v6.d␤Dynamic variable $*COMPILER not found␤  in block <unit> at /tmp/Wwx7kk6lbg line 1␤␤ «exit code = 1»»

[17:23] <timotimo> c: HEAD say $*PERL.version; say $*VM.version

[17:23] <committable6> timotimo, ¦HEAD(bd2ceef): «v6.d␤v2019.05.36.ge.865.f.43.df␤»

[17:25] <ugexe> on osx it simply deadlocks

[17:25] <timotimo> nativecall? with a current version?

[17:26] <ugexe> 2019.03.1

[17:27] <Kaiepi> m: use NativeCall; my Pointer[void] $ptr .= new; my CArray[int32] $mib .= new: 1, 5; my Pointer[int32] $mem .= new; sub sysctl(Str, uint32, Pointer[int32], size_t, Pointer[void], size_t --> int32) is native {*}; sysctl($mib, 2, $mem, nativesizeof(int32), $ptr, 0); say $mem

[17:27] <camelia> rakudo-moar a643b8be1: OUTPUT: «Cannot resolve caller protect(Lock:U: Block:D); none of these signatures match:␤    (Lock:D: &code, *%_)␤␤5===SORRY!5=== Error while compiling <tmp>␤Calling sysctl(NativeCall::Types::CArray[int32], Int, NativeCall::Types::Pointer[int32], M…»

[17:31] <ugexe> Stage parse      : New type Sub+{Callable[Nil]} for Sub is not a mixin type

[17:31] <ugexe> i just got that trying to rakudobrew build moar-blead

[17:31] <timotimo> does rakudobrew need to "git submodule update"?

[17:43] <ugexe> oh shit

[17:44] <vrurg> timotimo: no, the first run of Configure.pl fetches submodule if finds no LICENSE file 

[17:44] <ugexe> er, not as bad as i thought

[17:44] <ugexe> but its building into

[17:44] <ugexe> /Users/nicklogan/.rakudobrew/versions/moar-blead-2019.03.1/

[17:44] <ugexe> that isn't right

[17:47] <ugexe> it should be just /moar-blead... why is it including a 2019.03.1 at the end?

[17:50] <Geth> ¦ rakudo/p6o-setup: a3107d500c | (Jonathan Worthington)++ | src/Perl6/Metamodel/REPRComposeProtocol.nqp

[17:50] <Geth> ¦ rakudo/p6o-setup: Start initializing most attributes at creation

[17:50] <Geth> ¦ rakudo/p6o-setup: 

[17:50] <Geth> ¦ rakudo/p6o-setup: Rather than waiting for their first touch. As well as the expected cases

[17:50] <Geth> ¦ rakudo/p6o-setup: that we need to exclude (BUILD + default or required), we also need to

[17:50] <Geth> ¦ rakudo/p6o-setup: for now exclude non-P6opaque cases. This is actually a broad brush for

[17:50] <Geth> ¦ rakudo/p6o-setup: the storage of arrays and hashes; we rely on the auto-viv there too

[17:50] <Geth> ¦ rakudo/p6o-setup: (though will address that in future changes).

[17:50] <Geth> ¦ rakudo/p6o-setup: 

[17:50] <Geth> ¦ rakudo/p6o-setup: A handful of spectests are unhappy about this change, and will need a

[17:50] <Geth> ¦ rakudo/p6o-setup: closer look.

[17:50] <Geth> ¦ rakudo/p6o-setup: review: https://github.com/rakudo/rakudo/commit/a3107d500c

[18:08] <Geth> ¦ rakudo/p6o-setup: 02afae9d5a | (Jonathan Worthington)++ | 4 files

[18:08] <Geth> ¦ rakudo/p6o-setup: Eliminate most non-construction use of attrinited

[18:08] <Geth> ¦ rakudo/p6o-setup: 

[18:08] <Geth> ¦ rakudo/p6o-setup: These were to blame for the spectest fallout after the object setup

[18:08] <Geth> ¦ rakudo/p6o-setup: changes.

[18:08] <Geth> ¦ rakudo/p6o-setup: review: https://github.com/rakudo/rakudo/commit/02afae9d5a

[18:08] <jnthn> Whew, back to a clean spectest :)

[18:19] <Geth> ¦ rakudo: e51d2adbef | (Vadim Belman)++ | 4 files

[18:19] <Geth> ¦ rakudo: Make v6.* work again.

[18:19] <Geth> ¦ rakudo: 

[18:19] <Geth> ¦ rakudo: - Also modifications like v6.*.*, or v6.a+, or v6.e.* or anything else

[18:19] <Geth> ¦ rakudo: what Version accepts would work as expected. Contrary to incorrect

[18:19] <Geth> ¦ rakudo: behavior of older releases now the highest version available will be

[18:19] <Geth> ¦ rakudo: used. If compiler supports modifiers for a revision they are ignored

[18:19] <Geth> ¦ rakudo: unless a three-part version is used. I.e.

[18:19] <Geth> ¦ rakudo: <…commit message has 13 more lines…>

[18:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e51d2adbef

[18:19] <Geth> ¦ rakudo: 1655e73ce0 | (Vadim Belman)++ | src/Perl6/World.nqp

[18:19] <Geth> ¦ rakudo: Loose requirements, make v6.* match anything.

[18:19] <Geth> ¦ rakudo: 

[18:19] <Geth> ¦ rakudo: Followup to ugexe notes on rakudo/rakudo#2953

[18:19] <synopsebot> RAKUDO#2953 [closed]: https://github.com/rakudo/rakudo/pull/2953 Make v6.* work again.

[18:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1655e73ce0

[18:19] <Geth> ¦ rakudo: 89f8f6046e | (Vadim Belman)++ (committed using GitHub Web editor) | 4 files

[18:19] <Geth> ¦ rakudo: Merge pull request #2953 from vrurg/rakudo_2952

[18:20] <Geth> ¦ rakudo: 

[18:20] <Geth> ¦ rakudo: Make v6.* work again.

[18:20] <Geth> ¦ rakudo: 

[18:20] <Geth> ¦ rakudo: - Also modifications like `v6.*.*`, or `v6.a+`, or `v6.e.*` or anything else

[18:20] <Geth> ¦ rakudo: what `Version` accepts would work as expected. Contrary to incorrect

[18:20] <Geth> ¦ rakudo: behavior of older releases now the highest version available will be

[18:20] <Geth> ¦ rakudo: <…commit message has 12 more lines…>

[18:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/89f8f6046e

[20:26] *** sivoais left
[20:27] *** sivoais joined
[20:37] <japhb> vrurg: Thank you for that; it gets my rebuild-all script much farther than it has in a while (by getting it past JSON::Unmarshal, which is a dependency of one of my usual installs).  Of course, now the script sticks on NativeHelpers-Blob instead ... (https://github.com/salortiz/NativeHelpers-Blob/issues/9)

[20:38] *** ggoebel joined
[20:40] <timotimo> japhb: fortunately the problem in JSON::Unmarshal is only in a single one of the test files

[20:52] <japhb> japhb: Right, but with vrurg's commit, it doesn't even break on that one file anymore.  :-)

[20:53] <timotimo> %)

[21:14] *** skids left
[21:16] *** Kaiepi left
[21:53] *** Kaiepi joined
[21:55] *** Kaiepi left
[21:55] *** Kaiepi joined
[21:58] *** Kaiepi left
[22:21] <Geth> ¦ rakudo: patzim++ created pull request #2956: Remove harmful stale files during build

[22:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2956

[22:45] *** Kaiepi joined
[23:00] *** Kaiepi left
[23:07] *** skids joined
[23:15] *** Kaiepi joined
[23:16] *** AlexDaniel left
[23:25] <vrurg> japhb: welcome! :)

[23:29] *** Kaiepi left
[23:31] *** Kaiepi joined
