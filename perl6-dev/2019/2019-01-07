[00:19] *** dct left
[01:19] *** coverable6 left
[01:19] *** evalable6 left
[01:19] *** unicodable6 left
[01:19] *** quotable6 left
[01:19] *** benchable6 left
[01:19] *** statisfiable6 left
[01:19] *** bloatable6 left
[01:19] *** undersightable6 left
[01:19] *** squashable6 left
[01:19] *** greppable6 left
[01:19] *** notable6 left
[01:19] *** shareable6 left
[01:19] *** nativecallable6 left
[01:19] *** bisectable6 left
[01:19] *** reportable6 left
[01:19] *** committable6 left
[01:19] *** releasable6 left
[01:19] *** coverable6 joined
[01:20] *** evalable6 joined
[01:20] *** ChanServ sets mode: +v evalable6

[01:20] *** undersightable6 joined
[01:20] *** p6bannerbot sets mode: +v coverable6

[01:20] *** committable6 joined
[01:20] *** ChanServ sets mode: +v committable6

[01:20] *** p6bannerbot sets mode: +v evalable6

[01:20] *** nativecallable6 joined
[01:20] *** ChanServ sets mode: +v nativecallable6

[01:20] *** shareable6 joined
[01:21] *** quotable6 joined
[01:21] *** p6bannerbot sets mode: +v undersightable6

[01:21] *** p6bannerbot sets mode: +v committable6

[01:21] *** p6bannerbot sets mode: +v nativecallable6

[01:21] *** p6bannerbot sets mode: +v shareable6

[01:21] *** p6bannerbot sets mode: +v quotable6

[01:21] *** benchable6 joined
[01:21] *** ChanServ sets mode: +v benchable6

[01:22] *** unicodable6 joined
[01:22] *** ChanServ sets mode: +v unicodable6

[01:22] *** bloatable6 joined
[01:22] *** ChanServ sets mode: +v bloatable6

[01:22] *** squashable6 joined
[01:22] *** p6bannerbot sets mode: +v benchable6

[01:23] *** p6bannerbot sets mode: +v unicodable6

[01:23] *** p6bannerbot sets mode: +v bloatable6

[01:23] *** notable6 joined
[01:23] *** p6bannerbot sets mode: +v squashable6

[01:23] *** bisectable6 joined
[01:23] *** ChanServ sets mode: +v bisectable6

[01:24] *** p6bannerbot sets mode: +v notable6

[01:24] *** greppable6 joined
[01:24] *** ChanServ sets mode: +v greppable6

[01:24] *** releasable6 joined
[01:24] *** reportable6 joined
[01:24] *** ChanServ sets mode: +v reportable6

[01:24] *** statisfiable6 joined
[01:24] *** ChanServ sets mode: +v statisfiable6

[01:24] *** p6bannerbot sets mode: +v bisectable6

[01:24] *** p6bannerbot sets mode: +v greppable6

[01:25] *** p6bannerbot sets mode: +v releasable6

[01:25] *** p6bannerbot sets mode: +v reportable6

[01:25] *** p6bannerbot sets mode: +v statisfiable6

[03:33] *** Kaiepi left
[03:34] *** Kaiepi joined
[03:35] *** p6bannerbot sets mode: +v Kaiepi

[03:58] *** squashable6 left
[04:03] *** squashable6 joined
[04:03] *** p6bannerbot sets mode: +v squashable6

[04:06] *** Ven`` left
[04:12] *** vendethiel- left
[06:00] *** Kaypie joined
[06:00] *** Kaiepi left
[06:01] *** p6bannerbot sets mode: +v Kaypie

[06:05] *** Kaypie left
[06:06] *** Kaypie joined
[06:07] *** p6bannerbot sets mode: +v Kaypie

[08:32] *** patrickb joined
[08:32] *** p6bannerbot sets mode: +v patrickb

[09:02] <Geth> ¦ rakudo: JJ++ created pull request #2590: Adds README.md to avoid deletion

[09:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2590

[09:16] *** travis-ci joined
[09:16] *** p6bannerbot sets mode: +v travis-ci

[09:16] <travis-ci> Rakudo build errored. JJ Merelo 'Merge branch 'master' of github.com:JJ/rakudo'

[09:16] <travis-ci> https://travis-ci.com/JJ/rakudo/builds/96442048 https://github.com/JJ/rakudo/compare/084b8d5129b7...f18392c46c41

[09:16] *** travis-ci left
[09:52] *** travis-ci joined
[09:52] *** p6bannerbot sets mode: +v travis-ci

[09:52] <travis-ci> Rakudo build failed. JJ Merelo 'Adds README.md to avoid deletion

[09:52] <travis-ci> https://travis-ci.com/JJ/rakudo/builds/96442761 https://github.com/JJ/rakudo/compare/f18392c46c41...b0d5d818a983

[09:52] *** travis-ci left
[10:04] <AlexDaniel> lizmat: last week addded https://github.com/rakudo/rakudo/wiki/Ticket-updates

[10:52] *** travis-ci joined
[10:52] *** p6bannerbot sets mode: +v travis-ci

[10:52] <travis-ci> Rakudo build failed. JJ Merelo 'Follow @jnthn advice re #2590'

[10:52] <travis-ci> https://travis-ci.com/JJ/rakudo/builds/96449191 https://github.com/JJ/rakudo/compare/b0d5d818a983...1cd7a51bf3af

[10:52] *** travis-ci left
[10:56] <|Tux|> Rakudo version 2018.12-165-g6d58e0b0b - MoarVM version 2018.12-19-gec8a240e3

[10:56] <|Tux|> csv-test-xs-20      0.435 -  0.441

[10:56] <|Tux|> test-t --race       0.793 -  0.802

[10:56] <|Tux|> csv-ip5xs           0.935 -  0.953

[10:56] <|Tux|> test-t              1.818 -  1.867

[10:56] <|Tux|> csv-ip5xs-20        7.119 -  7.502

[10:56] <|Tux|> test                7.345 -  7.420

[10:56] <|Tux|> test-t-20 --race    9.535 -  9.537

[10:56] <|Tux|> csv-parser         21.974 - 22.397

[10:56] <|Tux|> test-t-20          30.511 - 30.736

[10:59] <gfldex> m: my $counter = 0; $counter++ for CORE::.values; say [$counter, CORE::.values.elems];

[10:59] <camelia> rakudo-moar 6d58e0b0b: OUTPUT: «[229 758]␤»

[10:59] <gfldex> m: my $counter = 0; $counter++ for CORE::.values; say [$counter, CORE::.values.elems];

[10:59] <camelia> rakudo-moar 6d58e0b0b: OUTPUT: «[699 758]␤»

[10:59] <gfldex> why does that count so badly

[10:59] <gfldex> and so randomly?

[11:00] <jnthn> Hash randomization + the IterationEnd sentinel

[11:02] <Geth> ¦ rakudo: b0d5d818a9 | (JJ Merelo)++ | 2 files

[11:02] <Geth> ¦ rakudo: Adds README.md to avoid deletion

[11:02] <Geth> ¦ rakudo: 

[11:02] <Geth> ¦ rakudo: Because one could imply move the .gitignore thing to the general file,

[11:02] <Geth> ¦ rakudo: and this directory would be deleted. Also eliminated *.moarvm from it,

[11:02] <Geth> ¦ rakudo: since it's already in the general file.

[11:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b0d5d818a9

[11:02] <Geth> ¦ rakudo: 1cd7a51bf3 | (JJ Merelo)++ | 2 files

[11:02] <Geth> ¦ rakudo: Follow @jnthn advice re #2590

[11:02] <synopsebot> RAKUDO#2590 [closed]: https://github.com/rakudo/rakudo/pull/2590 Adds comment to avoid deletion

[11:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1cd7a51bf3

[11:02] <Geth> ¦ rakudo: 307ae381ea | (Jonathan Worthington)++ (committed using GitHub Web editor) | blib/Perl6/.gitignore

[11:02] <Geth> ¦ rakudo: Merge pull request #2590 from JJ/master

[11:02] <Geth> ¦ rakudo: 

[11:02] <Geth> ¦ rakudo: Adds comment to avoid deletion

[11:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/307ae381ea

[11:02] <gfldex> it's not just counting badly. If I iterate the list to output names of the types in CORE::, it never outputs all type objects and often stops really early.

[11:03] <gfldex> and that used to work

[11:03] <lizmat> gfldex: it stops as soon as it encounters IterationEnd

[11:03] <gfldex> i see :)

[11:03] <lizmat> m: say (1,2,IterationEnd,4,5)

[11:03] <camelia> rakudo-moar 6d58e0b0b: OUTPUT: «(1 2)␤»

[11:03] <lizmat> a case of DIHWIDT  :-)

[11:04] <gfldex> I shall find a workaround for that feature when I come back from $dayjob.

[11:04] <gfldex> :->

[11:04] <lizmat> m: say (1,2,IterationEnd,4,5).map: *.Str   # perhaps ?

[11:04] <camelia> rakudo-moar 6d58e0b0b: OUTPUT: «(1 2)␤»

[11:04] <lizmat> ah no

[11:04] <lizmat> grr  :-)

[11:06] <gfldex> It's been a while since I blogged so this is actually quite a welcome.

[11:06] * gfldex work &

[11:27] <jnthn> I've considered making IterationEnd a special term and storing the actual implementation of it somewhere else, to avoid this.

[11:34] *** robertle_ joined
[11:34] *** p6bannerbot sets mode: +v robertle_

[11:36] *** Kaypie is now known as Kaiepi

[12:57] <Geth> ¦ rakudo: 8ae4310e9d | (Elizabeth Mattijsen)++ | 2 files

[12:57] <Geth> ¦ rakudo: Make Map/Hash.sort about 11x faster

[12:57] <Geth> ¦ rakudo: 

[12:57] <Geth> ¦ rakudo: - instead of first generating a list of Pairs and sort on .key

[12:57] <Geth> ¦ rakudo: - create native str array of keys and sort that

[12:57] <Geth> ¦ rakudo: - then create Pairs on a new iterator on the native str array of keys

[12:57] <Geth> ¦ rakudo: - this delays the creation of Pairs until they're really needed

[12:57] <Geth> ¦ rakudo: - the removes the need unpack each pair to be able to sort

[12:57] <Geth> ¦ rakudo: - prevents unneeded Pairs from being created, e.g. %h.sort.head(100)

[12:57] <Geth> ¦ rakudo: - keep old logic for object hashes for now

[12:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8ae4310e9d

[13:40] *** travis-ci joined
[13:40] *** p6bannerbot sets mode: +v travis-ci

[13:40] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Make Map/Hash.sort about 11x faster

[13:40] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/476345652 https://github.com/rakudo/rakudo/compare/307ae381eaf7...8ae4310e9da2

[13:40] *** travis-ci left
[14:45] <patrickb> Hi everyone!

[14:45] <patrickb> I'm (once again) working on relocatability of perl6.

[14:47] <jnthn> o/ patrickb 

[14:47] <jnthn> yay :)

[14:47] <timotimo> that does sound lovely

[14:49] <patrickb> I think I arrived at the point that I have loads of questions and something working of which I don't know entirely why...

[14:50] <patrickb> For a start: What is the --nqp-lib intended for? I currently just use it without really knowing what its intent is...

[14:51] <timotimo> i'd expect for whenever you "use QAST:from<nqp>" or similar

[14:51] <timotimo> oh, and parts of the compiler are written in nqp and thus use the nqp core setting for subs and such

[14:52] <patrickb> Is it bad to give that parameter in the production perl6 runner?

[14:52] <timotimo> does it work without it? if my assessment is correct, perl6 wouldn't work without it

[14:52] <patrickb> It doesn't.

[14:53] <timotimo> though tbh multiple of those paths should be able to be derived from just one path

[14:53] <patrickb> The only place I know where rakudo makes use of the hard wired install path (that I know of) is: rakudo/src/Perl6/ModuleLoader.nqp:load_module()

[14:54] <patrickb> And the logic using the hard wired path is overridden by --nqp-lib

[14:57] <patrickb> My working version is in https://github.com/patzim/{MoarVM,nqp,rakudo}/tree/reloc

[14:57] <patrickb> Linux only. I haven't tried much, but simple scripts seem to work.

[14:59] <patrickb> Some more design-y questions...

[15:00] <patrickb> The way I currently do it is using bash in the runner scripts to determine the script folder and making all lib parameters relative to that path.

[15:00] <patrickb> That puts the burden of the relocatability on the runner script.

[15:02] <patrickb> The only alternative I see is to put the dynamic search for the core libraries into perl6 itself. That is complex though as there currently is no good way to determine the runtime path of a compiled script. So on the perl6 side one does not currently have a good way to determine a path to start working with.

[15:04] <patrickb> And the runner script would still need to locate the perl6.moarvm file relative to its own location at least.

[15:06] <patrickb> So is the approach of doing all of the actual relocatability work (i.e. determining the library paths dynamically) in the runner scripts a good idea?

[15:06] <timotimo> do we have a bit of research written down anywhere how other langs do it?

[15:06] <patrickb> I have looked into python.

[15:06] <patrickb> But long story short: Most other langs don't have that problem

[15:07] <patrickb> In the case of python: It's just a single binary.

[15:07] <timotimo> none of them need to load a bunch of files, eh?

[15:07] <patrickb> They do!

[15:07] <patrickb> But they can just work from that executable files location.

[15:07] <patrickb> That's exactly what python does.

[15:08] <patrickb> I'll create a gist of my writeup...

[15:08] <patrickb> give me a sec

[15:08] <timotimo> in that case perhaps using the bash script as the "root" could be all right?

[15:11] <b2gills> patrickb: I think that it would be preferable if the runner script was a compiled program (written in C maybe?) which uses the MoarVM library. There are several other problems associated with using a runner script.

[15:11] <timotimo> right, that should be doable

[15:12] <patrickb> https://gist.github.com/patzim/710baab43da6e8f127df563b5b81c923

[15:13] <patrickb> b2gills: I'm thinking about that too. But I'm not yet at that point.

[15:16] <patrickb> timotimo, b2gills: The C replacement of the runner scripts, would you use libmoar.so directly or just call moar as the current runner scripts do?

[15:17] *** squashable6 left
[15:18] *** travis-ci joined
[15:18] *** p6bannerbot sets mode: +v travis-ci

[15:18] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make Map/Hash.sort about 11x faster

[15:18] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/476345652 https://github.com/rakudo/rakudo/compare/307ae381eaf7...8ae4310e9da2

[15:18] *** travis-ci left
[15:19] <b2gills> My guess (and it is only a guess) would be to use libmoar.so. That way there would be fewer steps to run a Perl 6 program.

[15:19] <patrickb> Do we want to keep the ability to have a non-relocatable build?

[15:21] <timotimo> you could even statically link libmoar

[15:21] *** squashable6 joined
[15:22] *** p6bannerbot sets mode: +v squashable6

[15:27] <patrickb> also: The current runner scripts reference three library paths: $install/share/nqp/lib, $install/share/perl6/lib, $install/share/perl6/runtime. share/perl6/lib is empty in a clean install though. What libs would go there? Do we need that lib path?

[15:28] *** brrt joined
[15:29] <jnthn> timotimo: You can't do that until the extops are gone, I think...

[15:29] *** p6bannerbot sets mode: +v brrt

[15:29] <timotimo> d'oh, you're right

[15:31] *** travis-ci joined
[15:31] *** p6bannerbot sets mode: +v travis-ci

[15:31] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make Map/Hash.sort about 11x faster

[15:31] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/476345652 https://github.com/rakudo/rakudo/compare/307ae381eaf7...8ae4310e9da2

[15:31] *** travis-ci left
[15:31] <patrickb> timotimo: Did you have a look at my small write up?

[15:31] * lizmat just restarted two jobs that had failed

[15:31] <lizmat> jnthn: ^^^

[15:34] <timotimo> patrickb: yeah, good starting point i'd say

[15:34] <timotimo> i wonder if pypy does anything very specific different there

[15:35] <timotimo> m: use nqp; say(nqp::p6reprname("hi"))

[15:35] <camelia> rakudo-moar 8ae4310e9: OUTPUT: «P6opaque␤»

[15:35] <timotimo> m: use nqp; say(nqp::reprname("hi"))

[15:35] <camelia> rakudo-moar 8ae4310e9: OUTPUT: «P6opaque␤»

[15:35] <timotimo> oh, 2018.08's changelog says p6reprname was turned into a desugar, eh?

[15:36] * timotimo looks at removing p6reprname from perl6_ops.c

[15:38] <patrickb> Do we want to keep the ability to have a non-relocatable build?

[15:39] <timotimo> "ability" :D

[15:39] <lizmat> patrickb: I don't think anybody thought of that as a feature, but I might be wrong

[15:39] <timotimo> i mean, i guess

[15:40] *** brrt left
[15:40] <patrickb> Well, we rely on non-relocatability in the runners that are used during build.

[15:41] <patrickb> The feature of non-relocatability is that you can move the executable around independent of the installation location and it keeps working.

[15:41] <b2gills> patrickb: I'm sure the only reason it is non-relocatable is because it was easier.

[15:42] <patrickb> The runners during build could be replaced with environment variables to pass in the correct lib paths though...

[15:43] <patrickb> So can I take this as a "Yes, we do not need any nonrelocatability!"

[15:43] *** brrt joined
[15:43] <b2gills> I say do [ what you want | what is easier ]. If it turns out to be a problem it could be dealt with later.

[15:44] *** p6bannerbot sets mode: +v brrt

[15:44] <patrickb> OK. I take the missing protest as a confirmation. :-)

[15:48] <timotimo> the C-based runner could switch modes based on the presence of --blah-path flags

[15:48] <timotimo> so it could be called directly to use its relocatable mode, or from a script just like what we currently have as "moar"

[15:49] <patrickb> timotimo: True. That might work.

[15:49] <patrickb> Given I'll introduce environment variables to specify the install paths, what should I call them? $PERL6_NQP_LIB, $PERL6_RUNTIME_LIB, $PERL6_LIB?

[15:50] <lizmat> these are specific for the MOARVM backend, are they not ?

[15:50] <patrickb> Or should I assume we have a stable file layout and go for: $PERL6_INSTALL_PATH

[15:51] <lizmat> if they are specific to MoarVM, I guess s/PERL_6/MVM/ ?

[15:52] <patrickb> Well, these aren't really MoarVM specific. Perl6 being build in NQP requires the NQP libraries. That should be the same on all backends.

[15:53] <lizmat> then not  :-)

[15:54] <patrickb> What about: $NQP_HOME and $PERL6_HOME which should point to /share/nqp and /share/perl6 respectively?

[15:55] <timotimo> we're already putting both moar and jvm stuff in the same paths, aren't we?

[15:55] <timotimo> maybe it'd be good to make the perl6 home easier to share between different impls

[15:58] *** brrt left
[15:58] <patrickb> that would mean using $NQP_HOME and $PERL6_HOME

[15:59] <patrickb> Since then I don't imply anything about what's in those folders

[16:00] <timotimo> and PERL6_HOME could be used for (currently theoretical) other implementations

[16:01] <patrickb> Should that be $RAKUDO_HOME or $PERL6_HOME?

[16:02] <timotimo> maybe check both and prioritize RAKUDO_ over PERL6_? i'm barely doing better than bikeshedding right now %)

[16:03] *** Kaiepi left
[16:04] *** Kaiepi joined
[16:05] *** p6bannerbot sets mode: +v Kaiepi

[16:05] *** squashable6 left
[16:05] <patrickb> I think $RAKUDO_HOME makes more sense actually, since multiple implementations would very likely not install into the same location...

[16:06] <patrickb> But then the folder is actually called install/share/perl6/. Ugh!

[16:07] <timotimo> that's the idea behind making the layout suitable for putting different compiler's stuff in the same base path

[16:08] <patrickb> So the idea is that multiple implementations can put their stuff in share/perl6/?

[16:08] <timotimo> right

[16:08] <patrickb> Is that also what cpython/pypy do?

[16:08] <timotimo> not sure about that

[16:09] *** squashable6 joined
[16:09] *** ChanServ sets mode: +v squashable6

[16:09] <patrickb> So $PERL6_HOME (-> install/share/perl6) and $NQP_HOME (-> install/share/nqp) it is. Any objections?

[16:09] *** p6bannerbot sets mode: +v squashable6

[16:10] * patrickb has learned how to ask questions on $perl6-dev without having to wait for answers long.

[16:10] <timotimo> haha

[16:23] <patrickb> There is no reason for the RPATH of moar to not be relative to the executable, right?

[16:24] <patrickb> I.e. it is fine to just switch it over to be relative and be done with it.

[16:25] <mornfall> i don't think that's possible?

[16:25] *** hankache joined
[16:25] *** p6bannerbot sets mode: +v hankache

[16:26] <mornfall> there's $ORIGIN, but it's not universally supported IIRC

[16:26] *** Ven`` joined
[16:26] <timotimo> i don't know where RPATH comes from

[16:26] *** p6bannerbot sets mode: +v Ven``

[16:28] <Geth> ¦ rakudo/more-block-flattening: 19e4ace62d | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[16:28] <Geth> ¦ rakudo/more-block-flattening: Move optimization level check a level up

[16:28] <Geth> ¦ rakudo/more-block-flattening: 

[16:28] <Geth> ¦ rakudo/more-block-flattening: So we do a bit less work if it's below that level.

[16:28] <Geth> ¦ rakudo/more-block-flattening: review: https://github.com/rakudo/rakudo/commit/19e4ace62d

[16:28] <Geth> ¦ rakudo/more-block-flattening: fcfd51beba | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[16:28] <Geth> ¦ rakudo/more-block-flattening: Account for the nqp::handle body getting thunked

[16:28] <Geth> ¦ rakudo/more-block-flattening: 

[16:28] <Geth> ¦ rakudo/more-block-flattening: It's not just the handlers that do, but also the handled code.

[16:28] <Geth> ¦ rakudo/more-block-flattening: review: https://github.com/rakudo/rakudo/commit/fcfd51beba

[16:33] *** lizmat_ joined
[16:33] *** p6bannerbot sets mode: +v lizmat_

[16:35] <patrickb> mornfall: $ORIGIN is not universally supported? Do you know some place to read up on this?

[16:35] *** lizmat left
[16:35] *** lizmat_ is now known as lizmat

[16:39] <timotimo> we're only limited by the maximum size of the environment :P

[16:41] <mornfall> patrickb: something about -z origin needed on macos, and i don't think openbsd supports origin at all? i can't find any standard-ish document describing it anyway

[16:41] <mornfall> (freebsd should have it and it presumably works as on glibc's ld.so)

[16:41] <Geth> ¦ rakudo/more-block-flattening: 541a4f1628 | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[16:41] <Geth> ¦ rakudo/more-block-flattening: More aggressive scope flattening

[16:41] <Geth> ¦ rakudo/more-block-flattening: 

[16:41] <Geth> ¦ rakudo/more-block-flattening: Previously, we would only ever flatten away lexical scopes if we saw

[16:41] <Geth> ¦ rakudo/more-block-flattening: that there were no declarations inside of that scope, the only special

[16:41] <Geth> ¦ rakudo/more-block-flattening: case being `$_`, which was handled specially. There was also some

[16:41] <Geth> ¦ rakudo/more-block-flattening: special mechanism in place to try and handle topic rebinds correctly.

[16:41] <Geth> ¦ rakudo/more-block-flattening: 

[16:41] <Geth> ¦ rakudo/more-block-flattening: <…commit message has 24 more lines…>

[16:41] <Geth> ¦ rakudo/more-block-flattening: review: https://github.com/rakudo/rakudo/commit/541a4f1628

[16:42] <timotimo> nice to see -^

[16:43] <patrickb> mornfall: I'll peek into python to see how they do it...

[16:46] <jnthn> timotimo: Yeah, though for some reason I need to look in to, not immediately good for benchmarks.

[16:52] <timotimo> in any case, p6reprname at least can go from the perl6_ops

[17:07] <jnthn> D'oh, I did a thinko

[17:07] <jnthn> And probably can easily get back the lost perf.

[17:08] *** hankache left
[17:14] <Geth> ¦ rakudo: 7229c674ab | (Timo Paulssen)++ | src/vm/moar/ops/perl6_ops.c

[17:14] <Geth> ¦ rakudo: Remove Unused p6reprname Ext-Op For MoarVM

[17:14] <Geth> ¦ rakudo: 

[17:14] <Geth> ¦ rakudo: it has been turned into a desugar in the compiler

[17:14] <Geth> ¦ rakudo: a few months ago already, just not deleted from

[17:14] <Geth> ¦ rakudo: this file yet.

[17:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7229c674ab

[17:17] <Geth> ¦ rakudo: b4d114a312 | (Elizabeth Mattijsen)++ | src/core/Map.pm6

[17:17] <Geth> ¦ rakudo: Streamline Map.gist

[17:17] <Geth> ¦ rakudo: 

[17:17] <Geth> ¦ rakudo: - makes it about 20% faster still

[17:17] <Geth> ¦ rakudo: - together with the Map.sort improvements now 2.5x as fast

[17:17] <Geth> ¦ rakudo: - on a 500 element Map

[17:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b4d114a312

[17:17] <Geth> ¦ rakudo: edb5308155 | (Elizabeth Mattijsen)++ | src/core/Map.pm6

[17:17] <nine> There has also been a decodelocaltime op in MoarVM for quite a while

[17:17] <Geth> ¦ rakudo: Remove unnecessary comma

[17:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/edb5308155

[17:19] *** patrickz joined
[17:20] *** p6bannerbot sets mode: +v patrickz

[17:22] *** patrickb left
[17:23] <Geth> ¦ rakudo: f010ef57a4 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals.pm6

[17:23] <Geth> ¦ rakudo: There is a nqp::decodelocaltime

[17:23] <Geth> ¦ rakudo: 

[17:23] <Geth> ¦ rakudo: So I think that means we can get rid of nqp::p6decodelocaltime

[17:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f010ef57a4

[17:23] <lizmat> nine timotimo ^^^

[17:23] <lizmat> m: nqp::decodegmtime(time)   # alas  :-)

[17:23] <camelia> rakudo-moar 8ae4310e9: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::decodegmtime, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3nqp::decodegmtime(time)7⏏5   # alas  :-)␤»

[17:24] <lizmat> m: use nqp; nqp::decodegmtime(time)   # alas  :-)

[17:24] <camelia> rakudo-moar 8ae4310e9: OUTPUT: «===SORRY!===␤No registered operation handler for 'decodegmtime'␤»

[17:35] <patrickz> java seems to rely on $ORIGIN too

[17:35] <patrickz> on 64bit linux that is 

[17:36] <patrickz> python by default does not need a separate library

[17:40] *** robertle_ left
[17:44] <Geth> ¦ rakudo/more-block-flattening: d2df5b805d | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[17:44] <Geth> ¦ rakudo/more-block-flattening: Correct tracking of vars used in `handle` handler

[17:44] <Geth> ¦ rakudo/more-block-flattening: 

[17:44] <Geth> ¦ rakudo/more-block-flattening: We need to propagate information about this outward. A previous fix for

[17:44] <Geth> ¦ rakudo/more-block-flattening: this issue actually wasn't a real fix, and just pessimized enough in

[17:44] <Geth> ¦ rakudo/more-block-flattening: order to not run into the real problem. This fixes it properly, gaining

[17:44] <Geth> ¦ rakudo/more-block-flattening: back lost performance.

[17:44] <Geth> ¦ rakudo/more-block-flattening: review: https://github.com/rakudo/rakudo/commit/d2df5b805d

[18:02] <patrickz> mornfall: My little research revealed: -z origin is required on openbsd to work, but then seems to do what it should...

[18:04] <patrickz> Any objections for me to just go that route and just see where it'll break afterwards?

[18:23] <AlexDaniel> patrickz++

[18:59] *** Ven`` left
[19:24] *** dct joined
[19:24] *** p6bannerbot sets mode: +v dct

[19:59] <patrickz> Any idea why Perl6/BOOTSTRAP can't be loaded like any other module in rakudo/src/Perl6/ModuleLoader.nqp load_module() ?

[20:17] <lizmat> not much will function without it in Perl 6

[21:30] <patrickz> I seem to have been able to work around it. The code will definitely need a review of someone knowledgeable of that area...

[21:31] *** ExtraCrispy left
[21:38] <lizmat> where are you trying to load it, and why ?

[21:43] *** ExtraCrispy joined
[21:43] *** p6bannerbot sets mode: +v ExtraCrispy

[21:46] *** patrickz left
