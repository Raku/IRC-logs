[00:00] <jnthn> m: dd &await.candidates; EVAL 'use v6.c; dd &await.candidates'

[00:00] <camelia> rakudo-moar 20e74837a: OUTPUT: «(multi sub await { #`(Sub|38935760) ... }, multi sub await (Any:U $x) { #`(Sub|38935912) ... }, multi sub await (Awaitable:D \a) { #`(Sub|38936064) ... }, multi sub await (*@awaitables) { #`(Sub|38936216) ... })␤(multi sub await { #`(Sub|38935760) .…»

[00:00] <vrurg> I'm spectesting without EVAL loading CORE.

[00:00] <jnthn> m: dd &await.candidates.map(*.signature); EVAL 'use v6.c; dd &await.candidates.map(*.signature)'

[00:00] <camelia> rakudo-moar 20e74837a: OUTPUT: «(:(), :(Any:U $x), :(Awaitable:D \a), :(*@awaitables)).Seq␤(:(), :(Any:U $x), :(Awaitable:D \a), :(*@awaitables)).Seq␤»

[00:01] <jnthn> Those should be different if it actually wedged 6.c stuff in there

[00:01] <vrurg> Ah, it doesn't reveal clearly. It's my fix for CORE loading which does it.

[00:02] <jnthn> m: sub foo() { EVAL 'whenever Supply.interal(1) { }' }; supply { foo() }

[00:02] <camelia> rakudo-moar 20e74837a: ( no output )

[00:02] <jnthn> m: sub foo() { EVAL 'whenever Supply.interal(1) { }' }; supply { foo() }.tap

[00:02] <camelia> rakudo-moar 20e74837a: OUTPUT: «5===SORRY!5=== Error while compiling /home/camelia/EVAL_0␤Cannot have a 'whenever' block outside the scope of a 'supply' or 'react' block␤at /home/camelia/EVAL_0:1␤------> 3whenever7⏏5 Supply.interal(1) { }␤»

[00:02] <jnthn> m: sub foo() { EVAL 'use v6.c; whenever Supply.interal(1) { }' }; supply { foo() }.tap

[00:02] <camelia> rakudo-moar 20e74837a: OUTPUT: «No such method 'interal' for invocant of type 'Supply'. Did you mean 'interval'?␤  in block <unit> at EVAL_0 line 1␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[00:03] <jnthn> Hm, so it applies the 6.c parser semantics but without the 6.c setting, in whatever commit is running here. That's...not liable to end so well. :)

[00:03] <vrurg> m: use v6.d; use nqp; say nqp::p6box_s(nqp::getcomp(q<perl6>).language_version()); EVAL q|use v6.c; use nqp; say nqp::p6box_s(nqp::getcomp(q<perl6>).language_version())|; say nqp::p6box_s(nqp::getcomp(q<perl6>).language_version());

[00:03] <camelia> rakudo-moar 20e74837a: OUTPUT: «6.d␤6.c␤6.c␤»

[00:05] <vrurg> I think everything would work smoothly if EVAL creates own instance of compiler. But I don't know if this would work.

[00:05] <jnthn> m: await start for ^1000 { EVAL q|use v6.c; use nqp; die unless '6.c' eq nqp::p6box_s(nqp::getcomp(q<perl6>).language_version())| }, start { for ^1000 { EVAL q|use v6.d; use nqp; die unless '6.d' eq '' nqp::p6box_s(nqp::getcomp(q<perl6>).language_version())|| }

[00:05] <camelia> rakudo-moar 20e74837a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing required term after infix␤at <tmp>:1␤------> 3getcomp(q<perl6>).language_version())|| 7⏏5}␤    expecting any of:␤        prefix␤        term␤»

[00:06] <jnthn> m: await start for ^1000 { EVAL q|use v6.c; use nqp; die unless '6.c' eq nqp::p6box_s(nqp::getcomp(q<perl6>).language_version())| }, start { for ^1000 { EVAL q|use v6.d; use nqp; die unless '6.d' eq '' nqp::p6box_s(nqp::getcomp(q<perl6>).language_version())| } }

[00:06] <camelia> rakudo-moar 20e74837a: OUTPUT: «An operation first awaited:␤  in block <unit> at <tmp> line 1␤␤Died with the exception:␤    5===SORRY!5=== Error while compiling /home/camelia/EVAL_1␤    Two terms in a row␤    at /home/camelia/EVAL_1:1␤    ------> 3se v6.d; use nqp…»

[00:07] <jnthn> huh

[00:07] <vrurg> m: await ^1000 .map: {start '{my $x}'.EVAL}; say "all good"

[00:07] <camelia> rakudo-moar 20e74837a: OUTPUT: «===SORRY!===␤Decoder may not be used concurrently␤»

[00:07] <vrurg> This is zoffix sample. But in his case the error was different.

[00:07] <jnthn> But yeah, the current language can't be stuck as a property in Perl6::Compiler

[00:08] <jnthn> Perl6::Compiler isn't meant to be stateful like that

[00:08] <jnthn> Should really be hung off the language braid at compile time...and maybe annoted on UNIT for runtime, though that brings back the whole "what is UNIT in EVAL" kind of question.

[00:10] <jnthn> Sleep time for me, alas. 'night o/

[00:10] <vrurg> Unfortunately, that's a kind of question beyond my knowledge too. g'night! o/

[00:20] <AlexDaniel> .tell jnthn what do you think about this commit? The same test is in 6.c-errata (so it needs a change also). https://github.com/perl6/roast/commit/d60f851775c2e5944db00f946b39430250243809

[00:20] <yoleaux> AlexDaniel: I'll pass your message to jnthn.

[00:36] <Geth> ¦ roast/6.c-errata: e96297869f | (Vadim Belman)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | S14-roles/parameterized-mixin.t

[00:36] <Geth> ¦ roast/6.c-errata: Remove invalid fudged tests

[00:36] <Geth> ¦ roast/6.c-errata: 

[00:36] <Geth> ¦ roast/6.c-errata: These two tests apparently must not pass.

[00:36] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/e96297869f

[00:52] *** pamplemousse joined
[01:06] <vrurg> .tell jnthn I think I have R#3040 finalized and ready for merge. Would you please have another look at it?

[01:06] <yoleaux> vrurg: I'll pass your message to jnthn.

[01:06] <synopsebot> R#3040 [open]: https://github.com/rakudo/rakudo/pull/3040 Implement support for defining new symbols in CORE.e.setting

[01:32] *** epony left
[02:11] <AlexDaniel> and another, much simpler one: https://github.com/rakudo/rakudo/issues/3046

[02:21] *** epony joined
[02:52] *** pamplemousse left
[04:52] *** vrurg left
[04:53] *** vrurg joined
[04:54] *** tbrowder left
[04:54] *** tbrowder joined
[06:03] *** squashable6 left
[06:08] *** squashable6 joined
[06:08] *** ChanServ sets mode: +v squashable6

[06:10] *** squashable6 left
[06:13] *** squashable6 joined
[06:13] *** ChanServ sets mode: +v squashable6

[06:39] *** patrickb joined
[06:40] <[Tux]> http://modules.perl6.org/search/?q=CSV

[06:40] <[Tux]>  1. http://modules.perl6.org/dist/Text::CSV:cpan:HMBRAND

[06:40] <[Tux]>  2. http://modules.perl6.org/dist/Text::CSV:github:H.Merijn%20Brand%20(Tux)

[06:40] <[Tux]> How do I force the second with zef?

[06:40] <[Tux]> $ zef install Text::CSV github

[06:40] <[Tux]> ===> Searching for: github

[06:40] <[Tux]> ===> Updating cpan mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json

[06:40] <[Tux]> ===> Updating p6c mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/p6c1.json

[06:40] <[Tux]> ===> Updated p6c mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/p6c1.json

[06:40] <[Tux]> ===> Updated cpan mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json

[06:40] <[Tux]> No candidates found matching identity: github

[06:40] <[Tux]> $ zef install Text::CSV github

[06:40] <[Tux]> ===> Searching for: github

[06:40] <[Tux]> ===> Updating cpan mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json

[06:40] <[Tux]> ===> Updating p6c mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/p6c1.json

[06:40] <[Tux]> ===> Updated p6c mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/p6c1.json

[06:40] <[Tux]> ===> Updated cpan mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan1.json

[06:40] <[Tux]> No candidates found matching identity: github

[06:41] <[Tux]> $ zef install Text::CSV github_ 'github:H.Merijn Brand (Tux)'

[06:41] <[Tux]> Don't understand identity: github:H.Merijn Brand (Tux)

[06:43] <[Tux]> lizmat, I Cc'd you on a mail that describes this problem in Dutch to someone moving to perl6 :)

[06:57] *** robertle_ joined
[07:41] *** Tux__ joined
[07:41] *** |Tux| left
[08:22] *** Tux__ is now known as |Tux|

[08:22] <|Tux|> Rakudo version 2019.03.1-683-g20e74837a - MoarVM version 2019.07-5-gdefe0a959

[08:22] <|Tux|> csv-test-xs-20      0.433 -  0.435

[08:22] <|Tux|> csv-ip5xs           0.703 -  0.716

[08:22] <|Tux|> test-t --race       0.847 -  0.861

[08:22] <|Tux|> test-t              1.740 -  1.790

[08:22] <|Tux|> csv-ip5xs-20        5.282 -  5.380

[08:22] <|Tux|> test                6.881 -  7.017

[08:22] <|Tux|> test-t-20 --race    9.255 -  9.280

[08:22] <|Tux|> csv-parser         22.181 - 22.409

[08:22] <|Tux|> test-t-20          27.512 - 28.203

[10:22] *** AlexDaniel left
[10:22] *** AlexDaniel joined
[12:05] <lizmat> Files=1275, Tests=108166, 207 wallclock secs (26.93 usr  8.01 sys + 2853.95 cusr 280.60 csys = 3169.49 CPU)

[12:05] <timotimo> [Tux]: please try "Text::CSV:ver<0.009>:auth<github:Tux>"

[12:06] <timotimo> which is what "zef list | grep Text" shows

[12:06] <timotimo> oh

[12:06] <lizmat> oh?

[12:06] <timotimo> actually it also has Text::CSV:ver<0.008>:auth<github:Tux> in the list

[12:06] <timotimo> but from cpan

[12:06] <timotimo> anyway, you can --/cpan in zef, iirc

[12:07] <timotimo> or is that only for "zef update"?

[12:07] <lizmat> not sure... 

[12:13] <Geth> ¦ rakudo: 7668301dd6 | (Elizabeth Mattijsen)++ | src/core/Main.pm6

[12:13] <Geth> ¦ rakudo: Further refine test for showing message

[12:13] <Geth> ¦ rakudo: 

[12:13] <Geth> ¦ rakudo: - prompted by R#3046

[12:13] <Geth> ¦ rakudo: - only show message if nothing has been said on $*OUT or $*ERR

[12:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7668301dd6

[12:13] <synopsebot> R#3046 [open]: https://github.com/rakudo/rakudo/issues/3046 [BLOCKER][regression] Unnecessary warnings on stderr

[12:18] <Geth> ¦ rakudo: tbrowder self-unassigned Diagnostic or definition problem? https://github.com/rakudo/rakudo/issues/3036

[12:59] *** lizmat_ joined
[13:00] *** evalable6 left
[13:00] *** notable6 left
[13:00] *** statisfiable6 left
[13:01] *** lizmat left
[13:05] *** AlexDaniel left
[13:05] *** AlexDaniel joined
[13:13] *** pamplemousse joined
[13:19] *** lizmat_ is now known as lizmat

[13:33] *** lucasb joined
[13:59] *** evalable6 joined
[14:01] *** notable6 joined
[14:01] *** ChanServ sets mode: +v notable6

[14:02] *** statisfiable6 joined
[14:41] *** pamplemousse left
[14:54] * [Coke] 's flight was canceled last night, ended up renting a car and driving six hours instead.

[15:01] <lizmat> wow

[15:04] <[Coke]> beat the alternative, which was not being able to fly out for another 24h

[15:04] <lizmat> yeah... good to have such an alternative...

[15:04] <timotimo> i hope the airline paid for the rental

[15:04] <lizmat> for transatlantic flights, the car rental option doesn't work as well

[15:05] <timotimo> oh, yeah

[15:05] <timotimo> ship rental isn't as affordable, and also not nearly fast enough to be a viable alternative

[15:07] <[Coke]> airline gave a refund on the flight, car rental was cheaper, and it's all work travel

[15:14] *** patrickb left
[15:19] *** nubie joined
[15:21] *** robertle_ left
[15:33] <timotimo> OK

[15:57] <Geth> ¦ rakudo: f13ac2c036 | (Stefan Seifert)++ | 2 files

[15:57] <Geth> ¦ rakudo: Fix "Missing serialize REPR function for REPR NativeRef (StrLexRef)"

[15:57] <Geth> ¦ rakudo: 

[15:57] <Geth> ¦ rakudo: ASN::META parses a definition with a grammar and creates classes and methods

[15:57] <Geth> ¦ rakudo: from the parsed description. This leads to a StrLexRef getting used as a method

[15:57] <Geth> ¦ rakudo: name which ends up in the serialization context. Decont the names of added

[15:57] <Geth> ¦ rakudo: methods to ensure we have a plain old string.

[15:57] <Geth> ¦ rakudo: 

[15:57] <Geth> ¦ rakudo: Fixes GH #3045

[15:57] <synopsebot> RAKUDO#3045 [open]: https://github.com/rakudo/rakudo/issues/3045 [BLOCKER][regression] Cro::LDAP regression since 2019.03.1

[15:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f13ac2c036

[16:04] <lizmat> nine++  # good catch!

[16:06] <Geth> ¦ rakudo/release-2019.07: 600ece3b7e | (Stefan Seifert)++ | 2 files

[16:06] <Geth> ¦ rakudo/release-2019.07: Fix "Missing serialize REPR function for REPR NativeRef (StrLexRef)"

[16:06] <Geth> ¦ rakudo/release-2019.07: 

[16:06] <Geth> ¦ rakudo/release-2019.07: ASN::META parses a definition with a grammar and creates classes and methods

[16:06] <Geth> ¦ rakudo/release-2019.07: from the parsed description. This leads to a StrLexRef getting used as a method

[16:06] <Geth> ¦ rakudo/release-2019.07: name which ends up in the serialization context. Decont the names of added

[16:06] <Geth> ¦ rakudo/release-2019.07: methods to ensure we have a plain old string.

[16:06] <Geth> ¦ rakudo/release-2019.07: 

[16:06] <Geth> ¦ rakudo/release-2019.07: Fixes GH #3045

[16:06] <Geth> ¦ rakudo/release-2019.07: review: https://github.com/rakudo/rakudo/commit/600ece3b7e

[16:10] <Kaiepi> releasable6, status

[16:10] <releasable6> Kaiepi, Next release will happen when it's ready. R6 is down. At least 2 blockers. 666 out of 685 commits logged

[16:10] <releasable6> Kaiepi, Details: https://gist.github.com/950a7c40c825c1f319254dde82aea67c

[16:10] <AlexDaniel> oh, right in the release branch, too! Thanks!

[16:12] <tbrowder> hi, all

[16:12] <yoleaux> 8 Jul 2019 15:27Z <jmerelo> tbrowder: thanks!Ç

[16:16] <tbrowder> i need to create a doc to show the unicode details  of the STD opener chars in Rakudo repo src/Perl6/Grammar.nqp. i can get the details ok, but i also need tp

[16:20] <tbrowder> *to show the rendered fonts.  my first thought is to use david warring's pdf modules in a p6 script, but does anyone have a better or easier suggestion?

[16:53] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue Running some scripts without any input sometimes leads users to believe that the program is hanging https://github.com/perl6/problem-solving/issues/60

[16:54] <Geth> ¦ rakudo/release-2019.07: 8aea1a68c7 | (Aleks-Daniel Jakimenko-Aleksejev)++ | src/core/Main.pm6

[16:54] <Geth> ¦ rakudo/release-2019.07: Revert "Warn when reading from keyboard in a MAIN-powered script"

[16:54] <Geth> ¦ rakudo/release-2019.07: 

[16:54] <Geth> ¦ rakudo/release-2019.07: This reverts commits:

[16:54] <Geth> ¦ rakudo/release-2019.07: * 3060d1d0bd7e902d8ee501667df456b99dec2748

[16:54] <Geth> ¦ rakudo/release-2019.07: * ad8b5a649755abfe8290a5d77f4f53ecfc91df49

[16:54] <Geth> ¦ rakudo/release-2019.07: 

[16:54] <Geth> ¦ rakudo/release-2019.07: There is a clear problem that these commits attempt to solve, but we

[16:54] <Geth> ¦ rakudo/release-2019.07: <…commit message has 5 more lines…>

[16:54] <Geth> ¦ rakudo/release-2019.07: review: https://github.com/rakudo/rakudo/commit/8aea1a68c7

[17:03] <Kaiepi> i think i'm gonna take a crack at that windows cstruct issue since i've been dealing with nativecall for the past week or so

[17:04] <Kaiepi> i've never done any coding on windows before so i don't really know what i'm doing

[17:08] *** pamplemousse joined
[17:08] <Kaiepi> are there any docs on how to build moar/nqp/rakudo on windows?

[17:12] <AlexDaniel> Kaiepi: maybe https://github.com/rakudo/rakudo/blob/e9351cbaa961c4d1e4ef8b4cb52418d55766a8d6/docs/windows.md ?

[17:14] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue Ambiguity in pseudo-package and package reaction on missing symbols. https://github.com/perl6/problem-solving/issues/58

[17:18] <Kaiepi> thanks

[17:18] <Kaiepi> i worked out the visual studio and git stuff, didn't know i needed strawberryperl

[17:18] <timotimo> only to run Configure.pl, right?

[17:18] <Kaiepi> should've known though, the build scripts are perl

[17:18] <AlexDaniel> .tell patrickb btw there's this document too: https://github.com/rakudo/rakudo/blob/master/docs/windows.md

[17:18] <yoleaux> AlexDaniel: I'll pass your message to patrickb.

[17:18] <Kaiepi> i think so timotimo 

[17:18] <Kaiepi> also some tools scripts but i won't be running any of those

[17:19] <timotimo> also to get "make spectest", but you can "make spectest6" which uses a perl6-implemented prove

[17:19] <Kaiepi> i'm only worried about make test, this is just changes to nativecall

[17:20] <timotimo> i'm not sure we have a make test6

[17:20] <Kaiepi> it's no big deal to install perl

[17:20] <AlexDaniel> interesting, doesn't git rely on perl scripts too?

[17:21] <Kaiepi> i did node dev on windows briefly years ago and didn't need perl

[17:21] <AlexDaniel> I'm just wondering, if so, then is there any way to use it without having to install strawberryperl?

[17:23] <Kaiepi> ¯\_(ツ)_/¯

[17:23] <Kaiepi> now this is meta, visual studio has an installer that has an installer that has an installer

[17:23] <AlexDaniel> also, how much do we rely on perl5?

[17:24] <ugexe> just install strawberry perl. its actually good.

[17:24] <timotimo> to my knowledge, only "prove" and Configure.pl, also some development-time stuff in moarvm that you don't have to use unless you're developing moarvm itself

[17:25] * AlexDaniel sees more than a 1000 lines of code in nqp-configure

[17:25] <AlexDaniel> ok fine :)

[17:29] <[Coke]> there was talk a decade ago about removing the perl dep for Configure.pl... but it's a huge cost to switch.

[17:29] <Kaiepi> what would we switch to?

[17:29] <[Coke]> (we still need some cross platform tool to do those bits.)

[17:29] <[Coke]> right.

[17:29] <AlexDaniel> vrurg: ↑ (just making sure you see this discussion)

[17:31] <ugexe> perl is basically the default for untar on windows with zef for installing cpan modules. unless they've installed gnu tar

[17:32] <ugexe> git on windows sometimes comes with it

[17:32] <Kaiepi> what's wrong with pa

[17:32] <Kaiepi> *pa

[17:32] <Kaiepi> *pax

[17:33] <vrurg> I discussed this with patrickb a while ago. Our only chance of steeping away from Perl is having moar pre-built for every platform we can think of.

[17:33] <vrurg> Otherwise we're doomed to be using perl for initial configuration.

[17:34] <vrurg> Or shell, for that matter...

[17:34] <Kaiepi> we could use node and wish for death

[17:34] <ugexe> not just shell -- windows compat shell

[17:35] <Kaiepi> fs.readFile('CORE.setting', utf8, (err, res) => { if (err) { throw new Error("Failed to read CORE.setting!"); } else { /* ... */ } })

[17:35] <Kaiepi> every configure script needs callback hell

[17:35] <lizmat> perhaps a better idea would be to get some form of nqp installed on all platforms ?

[17:36] <timotimo> lizmat: that's what we mean with "prebuilt moar for all platforms"

[17:36] <lizmat> I seem to recall that was an idea that nwc10 was playing with some time ago

[17:36] <lizmat> ok

[17:36] <timotimo> we already have nqpmake, which is pretty neat

[17:36] <vrurg> lizmat: that's what I mean by having moar pre-compiled. And available.

[17:37] <lizmat> gotcha

[17:37] <Kaiepi> i don't like the idea of prebuilt moar because it locks us into one backend

[17:37] <lizmat> only for config, like we're locked into Perl 5 atm

[17:37] <vrurg> Kaiepi: the life locks us to bootstrap tools anyway.

[17:37] <Kaiepi> fair

[17:38] <timotimo> hmm

[17:38] <vrurg> The only question is: what would bootstrap MoarMV build? NQP-moar too?

[17:38] <timotimo> provide bootable linux livecds that build and install rakudo

[17:39] <timotimo> well, the nqp repo already comes with a nqp that can immediately be used if you have a moar

[17:44] <vrurg> timotimo: what would we do about win, *BSD, etc? ;)

[17:44] <AlexDaniel> vrurg: what about having moar prebuilt for common platforms?

[17:44] <vrurg> AlexDaniel: having stage0 nqp we can have the rest of it in nqp.

[17:44] <AlexDaniel> I mean, how many platforms are we talking about

[17:45] <timotimo> vrurg: we only need to support their filesystems, everything else we can (try to) crosscompile, lol

[17:45] <vrurg> AlexDaniel: depends on what people use. Basically, we'd need cross-compiling for moar.

[17:46] <vrurg> Then anyone with a new platform would be able to compile moar for it on, say, a unix box. And share his work.

[17:46] <vrurg> For start, if we cover linux, mac, windows, *BSD – that'd be sufficient. 

[17:47] <Kaiepi> i'd cover solaris as well

[17:50] <vrurg> Another problem I didn't find good solution for yet is how to automate downloading of moar. I wish things to be as easy, as they're now if Perl 5 is already installed: just run a script, get the result.

[17:51] <Kaiepi> before you think about it curl's a no

[17:51] <Kaiepi> ditto wget

[17:51] <Kaiepi> not installed by default on *bsd

[17:52] <vrurg> Though pre-compiled moar's could be included into distribution source tarbals. And if sources are fetched with git there could be a repo of pre-compiled moars.

[17:52] <vrurg> Kaiepi: FreeBSD has fetch by default, nothing else.

[17:52] <Kaiepi> yep

[17:54] <lizmat> Kaiepi: does solaris have libuv support?  if not, supporting solaris doesn't make much sense

[17:55] <Kaiepi> it does

[17:58] <timotimo> isn't joyent behind libuv, and isn't joyent a solaris shop?

[18:00] <Kaiepi> joyent has one distro of solaris it looks like

[18:00] <Kaiepi> not the one most people use though

[18:00] <timotimo> i think they invest heavily in the "jails" tech?

[18:00] <Kaiepi> like freebsd jails?

[18:00] <timotimo> hm. "zones", then?

[18:00] <Kaiepi> what do they do

[18:01] <timotimo> honestly, i don't actually know much about what they have

[18:02] <timotimo> https://www.joyent.com/smartos - i barely know more than what this page has

[18:03] <Kaiepi> Inspired by FreeBSD jails, the fundamental technology behind a SmartMachine is the concept of zones.

[18:03] <Kaiepi> more oses should follow openbsd's approach with pledge and unveil

[18:04] <timotimo> yeah, those system calls seem very elegant

[18:04] <timotimo> gotta be AFK for a bit

[18:04] <Kaiepi> aight

[18:14] <AlexDaniel> lizmat: once I merge the release branch back to master, the revert will come too, I think. Though there will be a merge conflict because there's one more commit…

[18:15] *** nubie left
[18:19] <nine> What problem would all this work actually solve? perl is widely available and easy to install

[18:19] <AlexDaniel> ehhhhh https://github.com/rakudo/rakudo/issues/3045#issuecomment-510983743

[18:34] <Geth> ¦ rakudo: stmuk++ created pull request #3047: hopefully a more stable link for Star than the previous broken one

[18:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3047

[18:43] <TreyHarris> Apologies, I'm showing my ignorance of compiler technology developed this century: Is augment designed such that it can be used in individual distributed (CPAN, etc.) packages without destroying performance optimizations and type-checking across an entire program? I know the history of "finalization" in early OO languages and I'm wondering what today's state of the art is

[18:45] <TreyHarris> One of the things I admired about Ruby and Eiffel were the innovative uses that the lack of finalization provided, but it had penalties (in Ruby, performance in general, in Eiffel, having to hand-finalize via an external build system to get sufficient performance).

[18:46] <AlexDaniel> oh wow issue transfers are perhaps not as fun as I thought them to be

[18:46] <AlexDaniel> example: https://github.com/perl6/problem-solving/issues/42

[18:46] <ugexe> TreyHarris: augment prevents precomp afaik

[18:48] <TreyHarris> ugexe: oh, I'm aware of _now_; I asked the question wondering if there were theoretical limits

[18:48] <TreyHarris> I think most of us use Perl 6 with a belief that performance has a long glide path of improvement

[18:49] <TreyHarris> AlexDaniel: ooh, ugly... does it work better when labels are harmonized between the two repos?

[18:50] <AlexDaniel> TreyHarris: I think the labels just disappear

[18:51] <MasterDuke> AlexDaniel: do you have any objection to merging https://github.com/ajs/perl6-Math-Sequences/pull/151 ?

[18:51] <AlexDaniel> TreyHarris: the biggest mess there is from my actions because I didn't realize it moved

[18:51] <AlexDaniel> MasterDuke: no, except that I'd prefer to see a perf rakudobug too

[18:52] <AlexDaniel> merged

[18:53] <MasterDuke> thansk

[18:53] <TreyHarris> And speaking of, that reminded me... should we get some folks with write access to perl6 and rakudo to start transferring those issues that are filed into perl6/doc but are properly compiler issues? We've generally been closing them with a suggestion to re-file there. (Sometimes making the call on whether it's a problem-solving topic or a rakudo topic is fuzzy, but often it's clear.)

[18:54] <TreyHarris> People file doc tickets when their problem is with the language itself (problem-solving) or implementation (rakudo)

[18:58] <TreyHarris> ugexe: but basically, my question was is `augment` gated behind the monkeying pragma because it is now and always will be dangerous and anti-performant, or may there be a day when surgical use of `augment` can be done safely and without impacting performance (much)?

[19:04] <TreyHarris> Just thinking out loud but maybe at least there could be augments involving multi methods dispatched on the invocant and that could be defined external to the class?

[19:06] <TreyHarris> (I'm aware that that sentence makes no sense with "multi-dispatch" as it's designed today since dispatch doesn't happen until after method resolution.)

[19:08] <nine> TreyHarris: I'm not sure there is a theoretical limit. Especially considering that most of our performance comes from runtime specialization and optimization anyway.

[19:22] <AlexDaniel> 6c: say ‘a’.uniprop(‘Numeric’)

[19:22] <committable6> AlexDaniel, https://gist.github.com/79fcc260fa5cf59cc00f623549dc2103

[19:23] <AlexDaniel> TreyHarris: you can't transfer like that. Only close and open a new one

[19:23] <AlexDaniel> TreyHarris: more: https://github.com/perl6/problem-solving/issues/49#issuecomment-510992187

[19:23] <lizmat> AlexDaniel: then revert the last commit, merge, revert the revert ?

[19:24] <AlexDaniel> lizmat: it's not a big problem, I'll figure it out when resolving the merge conflict

[19:24] <lizmat> yeah, should be simple

[19:24] <lizmat> it's basically another if

[19:24] <lizmat> that got added

[19:24] <AlexDaniel> I can leave it either way on master, I don't mind having these `note` calls on master, actually

[19:25] <AlexDaniel> but then I'd prefer to get to some consensus on the problem-solving ticket before the next release

[19:25] <TreyHarris> AlexDaniel: ah, I missed that org-to-org transfers weren't permitted

[19:43] *** vrurg left
[19:46] *** vrurg joined
[20:23] <MasterDuke> i don't think i have an account, but if someone else wants to comment on http://blogs.perl.org/users/athanasius/2019/06/perl-weekly-challenge-014.html, changing the fors/maps over `m:g/../` to use .comb.rotor(2) instead halved the run time for me

[20:28] <timotimo> only half?

[20:37] <Kaiepi> am i installing the right stuff i need to compile moarvm on windows by installing visual studio build tools 2019?

[20:38] <MasterDuke> timotimo: pretty much exactly (after not too terribly rigorous testing though). 7.2s to 3.6s

[20:38] <Kaiepi> i have vs code as well for editing stuff

[20:40] <timotimo> mhm

[20:41] <Kaiepi> fucking hell i've been waiting since...

[20:41] <Kaiepi> an hour and a half ago

[20:42] <Kaiepi> i should get around to dual booting at some point but i need a bigger hard drive

[20:42] <Kaiepi> for now i'm stuck using an old desktop to test

[20:44] <Kaiepi> at least it's given me enough time to come up with a theory for why the cstruct tests flap

[20:45] <MasterDuke> a vm on new hardward might be faster than bare-metal on old hardward

[20:45] <Kaiepi> vmd on openbsd is very very unstable

[20:45] <Kaiepi> i tried running linux on it and it was borderline unusable

[20:45] <MasterDuke> oO(how did i make that error twice?)

[21:08] <MasterDuke> took another 0.5s off of http://blogs.perl.org/users/athanasius/2019/06/perl-weekly-challenge-014.html by re-writing get-solutions() with tail/first or grep

[21:28] <Kaiepi> i fucked up the visual studio install and boy it's a royal pain in the ass to fix

[21:29] <Kaiepi> thank god i'll only have to do this once

[21:50] *** pamplemousse left
[23:01] <Kaiepi> for R#3009, is 250 iterations of the test enough to ensure the bug's fixed?

[23:01] <synopsebot> R#3009 [open]: https://github.com/rakudo/rakudo/issues/3009 [BLOCKER][intermittent] Intermittent failure in 06-struct.t on Windows

[23:02] <Kaiepi> or do i need to do like 1000 like the op did

[23:02] <timotimo> leave it on in the background and forget about it :D

[23:04] <Kaiepi> aight i'll check up on it in a few hours

[23:20] <Geth> ¦ rakudo: 33844cb4be | (Vadim Belman)++ | 3 files

[23:20] <Geth> ¦ rakudo: Move VERSION file back to the root of build directory

[23:20] <Geth> ¦ rakudo: 

[23:20] <Geth> ¦ rakudo: This would simplify life for some infrastructure scripts.

[23:20] <Geth> ¦ rakudo: 

[23:20] <Geth> ¦ rakudo: Following the discussion here:

[23:20] <Geth> ¦ rakudo: 

[23:20] <Geth> ¦ rakudo: https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-07-11#l47

[23:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/33844cb4be

[23:23] * vrurg wish there be a way to force call DESTROYs at exit time for tests...

[23:24] <timotimo> try --full-cleanup, it's a moarvm flag but i think the launcher might forward it

[23:24] *** patrickb joined
[23:25] *** patrickz joined
[23:27] <vrurg> timotimo: perl6-m doesn't forward it. But perl6 supports. But ends with SIGABRT. ;)

[23:29] *** patrickb left
[23:33] <timotimo> yeah, that's a drawback of it

[23:36] <vrurg> Anyway, it didn't help. I stumbled upon a rare combination of a random error resulting in a Failure which randomly explodes in DESTROY...

[23:42] <Geth> ¦ rakudo: patzim++ created pull request #3049: Files for binary releases

[23:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3049

[23:46] <timotimo> is that a "unhandled failure detected in DESTROY" thing?

[23:50] *** Kaiepi left
[23:50] *** Kaiepi joined
[23:54] <vrurg> timotimo: it is.

[23:54] <timotimo> that can be annoying to track down, yeah

[23:55] <timotimo> it's hard to find where something doesn't happen

[23:55] <vrurg> I think have done it. X::Numeric::CannotConvert uses its $!source in a string without actually checking if its a defined value.

[23:56] <vrurg> Just wonder why was it a random issue happening in repeat.t spectest.

[23:57] *** lucasb left
[23:57] <timotimo> the DESTROY thing is triggered by the GC, which can sometimes be a little nondeterministic depending on whatever factors

