[00:42] *** klapperl left
[00:49] *** klapperl joined
[05:07] *** vrurg left
[06:22] *** robertle left
[06:32] *** Kaiepi left
[06:32] *** Kaiepi joined
[06:40] *** epony joined
[07:40] *** ufobat joined
[07:46] *** robertle joined
[07:56] *** committable6 left
[07:56] *** undersightable6 left
[07:56] *** shareable6 left
[07:56] *** squashable6 left
[07:56] *** unicodable6 left
[07:57] *** benchable6 left
[07:57] *** coverable6 left
[07:57] *** statisfiable6 left
[07:57] *** greppable6 left
[07:57] *** notable6 left
[07:57] *** nativecallable6 left
[07:57] *** reportable6 left
[07:57] *** evalable6 left
[07:57] *** releasable6 left
[07:57] *** bloatable6 left
[07:58] *** quotable6 left
[07:58] *** bisectable6 left
[08:08] *** quotable6 joined
[08:08] *** ChanServ sets mode: +v quotable6

[08:09] *** releasable6 joined
[08:09] *** statisfiable6 joined
[08:09] *** ChanServ sets mode: +v statisfiable6

[08:09] *** committable6 joined
[08:09] *** ChanServ sets mode: +v committable6

[08:09] *** greppable6 joined
[08:09] *** ChanServ sets mode: +v greppable6

[08:10] *** squashable6 joined
[08:10] *** shareable6 joined
[08:10] *** undersightable6 joined
[08:10] *** coverable6 joined
[08:10] *** ChanServ sets mode: +v coverable6

[08:10] *** bisectable6 joined
[08:10] *** evalable6 joined
[08:10] *** ChanServ sets mode: +v evalable6

[08:10] *** nativecallable6 joined
[08:10] *** ChanServ sets mode: +v nativecallable6

[08:10] *** bloatable6 joined
[08:10] *** ChanServ sets mode: +v bloatable6

[08:10] *** unicodable6 joined
[08:10] *** ChanServ sets mode: +v unicodable6

[08:11] *** notable6 joined
[08:11] *** ChanServ sets mode: +v notable6

[08:11] *** benchable6 joined
[08:11] *** ChanServ sets mode: +v benchable6

[08:11] *** reportable6 joined
[08:11] *** ChanServ sets mode: +v reportable6

[08:43] *** leont joined
[10:22] *** pmurias joined
[10:31] *** ExtraCrispy joined
[10:42] *** ExtraCrispy left
[10:51] <lizmat> Files=1266, Tests=88069, 410 wallclock secs (21.15 usr  6.55 sys + 2959.26 cusr 242.88 csys = 3229.84 CPU)

[10:55] *** ExtraCrispy joined
[11:38] * pmurias is ashamed to admit he has to run roast in rakudo.js (bundling the js and running it in chrome) overnight :(

[11:39] <timotimo> hmm

[11:43] <pmurias> I'll have to experiment more with parceling/compiling and loading multiple test files at once

[12:28] *** pmurias left
[12:58] <lizmat> notable6: weekly

[12:58] <notable6> lizmat, 11 notes: https://gist.github.com/fad50d8156f1c0ab0a000fcfe3414246

[12:59] <AlexDaniel> also: 2019.03.1 released

[13:28] <lizmat> reportable6: 2019-03-11T12:00:00Z 2019-03-18T00:00:00Z

[13:28] <reportable6> lizmat, OK, working on it! This may take up to 40 seconds

[13:29] <reportable6> lizmat, https://gist.github.com/e627d4ff823c9ba647f1a85439ab3f91

[13:30] <AlexDaniel> that doesn't look right

[13:30] <AlexDaniel> oh, actually

[13:30] <AlexDaniel> all of these were labeled O_O

[13:30] <AlexDaniel> lucasb++

[13:31] <AlexDaniel> that probably deserves a mention in the weekly

[13:31] <lizmat> AlexDaniel: what does ?

[13:32] <AlexDaniel> lizmat: lucasb++ labeled more than 250 tickets

[13:32] <lizmat> aaahh  ok

[13:32] <AlexDaniel> https://gist.github.com/Whateverable/e627d4ff823c9ba647f1a85439ab3f91#updated-tickets-294

[13:36] *** leont left
[13:42] * lizmat hopes we'll see a Rakudo Star release before the P6W is published

[13:59] *** vrurg joined
[14:19] <lizmat> notable6: weekly reset

[14:19] <notable6> lizmat, Moved existing notes to “weekly_2019-03-18T14:19:10Z”

[14:58] *** vrurg left
[15:00] *** vrurg joined
[15:38] *** pyrimidine left
[15:48] *** gfldex left
[15:48] *** gfldex joined
[15:51] *** ggoebel joined
[15:56] *** pyrimidine joined
[16:06] *** robertle left
[16:14] <lizmat> and another Perl 6 weekly hits the Net: https://p6weekly.wordpress.com/2019/03/18/2019-11-complete-course/

[16:20] <jnthn> lizmat++

[16:20] <yoleaux> 06:24Z <nwc10> jnthn: will master merged in, more-pea gets all the way to Rakudo spectests (but does not pass all of them)

[16:28] *** ufobat left
[16:43] <AlexDaniel> I don't understand

[16:43] <AlexDaniel> why people submit grant proposals without coming here first and asking for feedback

[16:44] <timotimo> not everybody is as irc-centric as we are

[16:45] <AlexDaniel> send an email then

[16:45] <AlexDaniel> start a git repo

[16:45] <AlexDaniel> whatever

[16:47] <lizmat> AlexDaniel: add a comment ?  It's not too late  :-)

[16:47] <AlexDaniel> of course I will, except that I don't think it's going to change anything

[16:48] <AlexDaniel> if it's accepted, they will do whatever they want without really trying to integrate their work with the community

[16:48] <AlexDaniel> if it's not accepted, then we're losing the chance to get some of the proposed stuff done

[16:49] <AlexDaniel> lose-lose

[16:49] <lizmat> well, it's that type of comment that the grant committee would like to know about

[16:50] <ugexe> "they will do whatever they want without really trying to integrate their work with the community" -- can you back this up?

[16:53] <AlexDaniel> they have a plan, and it is described in detail in the proposal. The plan is to create a separate resource that is independent from the docs, and to solve some problems (e.g. code execution) for that separate website

[16:53] <ugexe> can the docs infrastructure support his plan?

[16:54] <AlexDaniel> now of course maybe they'll rethink some of the parts, but it's going to change the proposal significantly, so I don't believe that can happen. I co

[16:54] <AlexDaniel> I can't prove it to you unless we actually wait and see what happens, obviously

[16:54] <AlexDaniel> no, but there is no infrastructure yet

[16:54] <timotimo> proposals can be resubmitted in the next round

[16:55] <AlexDaniel> instead of modifying the doc website the proposal is to create a new website from zero

[16:55] <ugexe> i see him as trying to get the actual valuable work done and avoiding the bike-shedding stuff that can be handled later by whoever

[16:57] <AlexDaniel> I see him not giving a fuck about everything and everyone else and doing everything his way

[16:57] <AlexDaniel> and when the bus comes, *we* will have to maintain that separately

[16:57] <ugexe> if it needs to be integrated into the docs site at a later time then im sure they are not going to stop anyone. but thats lots of additional scope that isnt strictly needed for deliverable

[16:59] <AlexDaniel> so, fund his work so that someone else can then later clean it up and integrate into what we've been working on?

[16:59] <AlexDaniel> this is making zero sense to me

[17:06] <ugexe> its not often i hear the sentiment of 'we need more scope'

[17:06] <AlexDaniel> it's not more scope, it's in fact about reducing the amount of work in total

[17:07] <AlexDaniel> we need code execution on the docs too, why not solve that also with one shot

[17:07] <ugexe> well you are trivializing the complexities of these features

[17:07] <ugexe> maybe you are right. i dont think you are.

[17:08] <ugexe> "why not just ..."

[17:08] *** jmerelo joined
[17:09] <ugexe> if you could convince me its actually a reduction of scope, then i'm sure you could convince them as well.

[17:10] <AlexDaniel> the scope is same, but all the details will be different

[17:11] <jmerelo> Infrastructure maintenance is difficult enough as it is now. Throwing another thing would be the proverbial straw that broke Camelia's back.

[17:11] <AlexDaniel> e.g. not markdown but pod6, not a separate domain but docs.perl6.org, etc.

[17:12] <AlexDaniel> and then you don't have to worry about user experience issues like users having to jump from docs to that website and back (like if they want to see other methods of some class like Str or whatever), everything is in the same place

[17:14] <jmerelo> Plus being able to run whatever is in the doc sites would also mean we would be able to test the output of everything that's in there, and that would be just awesome. Wd don't do that now. From time to time, "output is not that" issues appear.

[17:14] <AlexDaniel> btw I feel like using rakudo-js is a good idea for that thing. The plan is to have some introductory tutorial, and most basics I think work with rakudo-js

[17:15] <jmerelo> AlexDaniel: The problem with rakudo-js is that right now it takes a while to load; it's rather heavy. If we found some way of lazy loading, that would be much better for mobile devices, for instance. It's great for desktop, however.

[17:24] <AlexDaniel> jmerelo: yeah but if you want to go through the course, it's probably OK to wait a bit for it to load

[17:40] *** |Tux| left
[17:44] <jmerelo> AlexDaniel: right.

[17:46] <timotimo> AlexDaniel: unless you say that "for every 0.5s a site takes longer to load, you lose 50% of your audience" or so

[17:47] <timotimo> i believe there's a new API that lets you decouple the computations inside an iframe from the frame that contains it

[17:47] *** |Tux| joined
[17:48] *** robertle joined
[18:35] *** lgtaube left
[18:51] *** lgtaube joined
[19:57] <AlexDaniel> well, I wrote something

[19:59] <AlexDaniel> there are however certain limits on how much time I'm willing to spend on justifying my position when the submitter spent zero time on doing the same besides saying that it will be “different from the documentation”

[20:01] *** Kaiepi left
[20:02] *** Kaiepi joined
[20:48] *** hankache joined
[21:04] *** jmerelo left
[21:17] *** epony left
[21:17] <gfldex> I'm getting:

[21:17] <gfldex> Type check failed in binding to parameter '$s'; expected Str but got Int (100000)

[21:18] <gfldex> the line in question is:

[21:18] <gfldex> CATCH { .fail }; from-json post |c

[21:18] <gfldex> where is that $s coming from?

[21:19] <gfldex> jnthn: can your inlining improvements cause Rakudo to point to the wrong line?

[21:20] *** lucasb joined
[21:21] <gfldex> also that is clearly a regression

[21:23] *** epony joined
[21:25] <jnthn> gfldex: There's long been cases of optimizations throwing line numbers off a bit; you can always run without if you think that's to blame (just set MVM_SPESH_DISABLE=1 in the environment)

[21:27] <jnthn> There's something a bit up with line numbers even without that, though, I think; line numbers around while loops, for example, seem to have something a bit iffy, because coverage data comes out showing a loop body statement being hit, but not the loop's opening line, which is trivially wrong.

[21:27] <jnthn> The $s will come from some varible inside of from-json or post, I guess

[21:28] <gfldex> jnthn: I will dig deeper.

[21:30] *** hankache left
[21:32] <gfldex> jnthn: it can't be post because the whole file doesn't contain a single $s. It is: https://github.com/perl6-community-modules/perl6-WWW/blob/master/lib/WWW.pm6

[21:33] <gfldex> cant't be from-json either

[21:35] <gfldex> here is a complete stacktrace https://gist.github.com/74f72a5f25badd4ee3f44d77a880b1b9

[21:48] <timotimo> it does have from-json in there

[21:48] <timotimo> and it looks like it's trying to stringify a failure object perhaps?

[21:50] <timotimo> but yeah, there doesn't seem to be a parameter or variable named $s anywhere in there, but perhaps it has something to do with the coercer?

[22:13] <jnthn> Well, it could also be in the setting, which is, after all, just a bunch of Perl 6 code :)

[22:15] <gfldex> jnthn: golfed: https://gist.github.com/c357af88e042d5af396e7fccc7188dde

[22:17] <gfldex> shall I rakudobug?

[22:25] <timotimo> gfldex: can you golf the contents of the jpost sub a little? maybe cut out the http request completely?

[22:25] <timotimo> oh, does it die before it can even do that?

[22:41] <gfldex> looks like it

[22:44] <gfldex> bisectable6: https://gist.github.com/c357af88e042d5af396e7fccc7188dde

[22:44] <bisectable6> gfldex, It looks like a URL, but mime type is ‘text/html; charset=utf-8’ while I was expecting something with ‘text/plain’ or ‘perl’ in it. I can only understand raw links, sorry.

[22:44] <gfldex> bisectable6: https://gist.githubusercontent.com/gfldex/c357af88e042d5af396e7fccc7188dde/raw/4b65ad19a03b114184c15a70e21a7b7455972be8/wrong-line-or-identifier.p6

[22:44] <bisectable6> gfldex, Successfully fetched the code from the provided URL

[22:44] <bisectable6> gfldex, Bisecting by output (old=2015.12 new=6d8077c) because on both starting points the exit code is 1

[22:45] <bisectable6> gfldex, bisect log: https://gist.github.com/f800892956479ed78497f58e7b6157a4

[22:45] <bisectable6> gfldex, (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb52eb1fd07397659f19a5cf36dc61f84053

[22:45] <bisectable6> gfldex, The result looks a bit unrealistic, doesn't it? Most probably the output is different on every commit (e.g. ｢bisect: say rand｣)

[22:53] *** Kaiepi left
[22:53] *** Kaiepi joined
[23:00] <vrurg> When ACCEPTS is being called by a metaobject at compile time find_best_dispatchee only considers the two candidates from Mu ignoring one(s) from the invocant class. Is it normal?

[23:01] <jnthn> Probably, yes. Multi-dispatch candidates are not incorporated until composition time.

[23:01] <jnthn> And further, cannot be.

[23:02] <jnthn> And I guess you're saying that the class hasn't been composed yet

[23:02] <jnthn> By "compile time"

[23:02] <jnthn> Nothing specific to ACCEPTS, just a genreal properly of multi-methods

[23:02] <AlexDaniel> gfldex: yeah it doesn't have that module

[23:03] <vrurg> jnthn: ACCEPTS is just what I've got on my hands. But generally, yes – it'd be any method.

[23:03] <vrurg> Then, so far, it means there is no way to make subsets bahave similarly to definities. 

[23:03] <vrurg> *behave

[23:05] <jnthn> It's not clear how that follows

[23:05] <jnthn> Example?

[23:06] <vrurg> SubsetHOW, method accepts_type checks against $!refinement by calling ACCEPTS on it. This is a universal way to handle any kind of refinees: blocks, regexes, etc.

[23:08] <jnthn> Yes, following so far.

[23:08] <vrurg> In actions default value is checked with check_default_value_type.

[23:10] <vrurg> subset S of Any where { True }; my S $v; – fails to compile.

[23:11] <jnthn> Why? Block is composed (it comes from CORE.setting) and S is composed by that point

[23:12] <jnthn> m: subset S of Any where { True }; BEGIN say Any ~~ S

[23:12] <camelia> rakudo-moar 6d8077cec: OUTPUT: «True␤»

[23:14] <vrurg> This is what I'm trying to find out now. A smal but important note: current code avoids calling ACCEPTS on SubsetHOW because the $!default is set to the subset itself and accepts_type validates against subset itself.

[23:14] <vrurg> So, this happens to be enough. I have removed the check against self making $!refinement.ACCEPTS mandatory.

[23:51] *** MasterDuke joined
[23:52] *** MasterDuke left
[23:52] *** MasterDuke joined
