[00:07] *** anatofuz left
[00:35] <vrurg> What's the purpose of ObjAt class and how ValueObjAt is different considering that it adds nothing to its parent?

[01:08] *** squashable6 left
[01:09] *** squashable6 joined
[01:09] *** ChanServ sets mode: +v squashable6

[01:19] *** squashable6 left
[01:24] *** squashable6 joined
[01:24] *** squashable6 left
[01:28] <timotimo> ValueObjAt is for objects that are value types, ObjAt is for everything else

[01:29] <timotimo> hashes that take object keys look at this

[01:29] *** squashable6 joined
[01:29] *** ChanServ sets mode: +v squashable6

[02:03] *** anatofuz joined
[02:17] *** anatofuz left
[02:17] *** anatofuz joined
[02:31] <vrurg> timotimo: thanks, makes more sense. But I

[02:32] <vrurg> I'm overexhausted today and can't grasp what is value type in Perl6. Stuck thinking of C-like languages.

[02:35] <timotimo> oh, it's just the difference whether an object is identified via its contained values or its identity as "memory location"

[02:35] <timotimo> i.e. will Foo.new(x => 1, y => 2) eqv Foo.new(x => 1, y => 2) or not

[02:36] <vrurg> timotimo: Thanks! I was close but not enough. ;)

[03:42] *** zostay left
[03:44] *** kawaii joined
[03:45] *** zostay joined
[05:38] *** robertle left
[06:12] *** gdonald left
[06:14] *** gdonald joined
[06:56] *** anatofuz left
[06:57] *** anatofuz joined
[06:58] *** anatofuz left
[06:58] *** anatofuz joined
[07:41] *** anatofuz left
[07:42] *** anatofuz joined
[07:47] *** anatofuz left
[08:27] *** anatofuz joined
[08:31] *** anatofuz_ joined
[08:35] *** anatofuz left
[08:57] *** robertle joined
[08:59] *** leont joined
[09:03] <|Tux|> Rakudo version 2019.07.1-260-g9dd67cb37 - MoarVM version 2019.07.1-191-g15a8725e3

[09:03] <|Tux|> csv-test-xs-20      0.434 -  0.438

[09:03] <|Tux|> test-t --race       0.773 -  0.775

[09:03] <|Tux|> csv-ip5xs           0.678 -  0.790

[09:03] <|Tux|> test-t              1.734 -  1.739

[09:03] <|Tux|> csv-ip5xs-20        4.866 -  4.887

[09:03] <|Tux|> test                6.934 -  7.016

[09:03] <|Tux|> test-t-20 --race    9.050 -  9.245

[09:03] <|Tux|> csv-parser         20.873 - 21.052

[09:03] <|Tux|> test-t-20          29.431 - 29.473

[09:19] *** leont left
[09:59] <lizmat> m: dd [].WHICH.^name, 42.WHICH.^name   # vrurg: technical distinction

[09:59] <evalable6> lizmat, rakudo-moar fce964231: OUTPUT: ¬´"ObjAt"‚ê§"ValueObjAt"‚ê§¬ª

[10:19] <nine> |Tux|: is your Inline::Perl5 up to date (0.41). I expected a noticable slow down after merging my memory leak fix

[11:08] *** squashable6 left
[11:08] *** squashable6 joined
[11:08] *** ChanServ sets mode: +v squashable6

[11:32] *** anatofuz joined
[11:36] *** anatofuz_ left
[11:37] *** anatofuz left
[11:37] *** lucasb joined
[12:20] *** squashable6 left
[12:21] *** squashable6 joined
[12:21] *** ChanServ sets mode: +v squashable6

[12:27] *** anatofuz joined
[12:37] *** anatofuz left
[12:52] *** hankache joined
[12:58] *** anatofuz joined
[13:07] <nine> '/home/nine/rakudo/perl6-m' '/home/nine/rakudo/tools/build/upgrade-repository.p6' '/home/nine/rakudo/install/share/perl6/core'

[13:07] <nine> Missing or wrong version of dependency 'src/Perl6/World.nqp' (from 'gen/moar/CORE.c.setting')

[13:08] <nine> Build's broken?

[13:10] <vrurg> nine: not really. delete CORE.*.moarvm from source root. 

[13:11] <vrurg> We should probably remove implicit support for ./ for build.

[13:12] <nine> If it doesn't build, the build is broken.

[13:13] <vrurg> nine: they're now build in blib. But you have old ones from previous build in rakudo root.

[13:14] <|Tux|> $ p6 -e 'use Inline::Perl5; say Inline::Perl5.^ver;'

[13:14] <|Tux|> (Mu)

[13:20] <jnthn> vrurg: Does a `make clean` get rid of such files?

[13:22] <vrurg> jnthn: no, unfortuantely. I wanted to fix this yesterday, but sunk in other stuff. 

[13:22] <jnthn> OK, that's probably a good thing to do

[13:23] <jnthn> Folks really shouldn't need to manually fix their build tree

[13:27] <Geth> ¬¶ rakudo: 1e148100b2 | (Vadim Belman)++ | tools/templates/Makefile-backend-common.in

[13:27] <Geth> ¬¶ rakudo: Remove stale CORE.<rev>.setting precompiles from base dir

[13:27] <Geth> ¬¶ rakudo: 

[13:27] <Geth> ¬¶ rakudo: Prevent 'Missing or wrong version of dependency' issue.

[13:27] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/1e148100b2

[13:29] <vrurg> Done. 

[13:34] <jnthn> vrurg++

[13:37] *** anatofuz left
[13:38] *** anatofuz joined
[13:42] <vrurg> lizmat: unfortunately, recompilation of all COREs id inevitable because we generate hll-config() which incliudes sha sum over all source files used. 

[13:42] <vrurg> s/id/is/

[13:45] <Geth> ¬¶ rakudo: vrurg++ created pull request #3180: Fix dependencies for CORE.<rev>.setting

[13:45] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3180

[13:56] <Geth> ¬¶ rakudo: d938e2fc77 | (Vadim Belman)++ | tools/templates/Makefile-backend-common.in

[13:57] <Geth> ¬¶ rakudo: Fix dependencies for CORE.<rev>.setting

[13:57] <Geth> ¬¶ rakudo: 

[13:57] <Geth> ¬¶ rakudo: CORE_ALL_SOURCES is not used anymore.

[13:57] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/d938e2fc77

[13:57] <Geth> ¬¶ rakudo: b6bbc36429 | (Vadim Belman)++ (committed using GitHub Web editor) | tools/templates/Makefile-backend-common.in

[13:57] <Geth> ¬¶ rakudo: Merge pull request #3180 from vrurg/rakudo_3151

[13:57] <Geth> ¬¶ rakudo: 

[13:57] <Geth> ¬¶ rakudo: Fix dependencies for CORE.<rev>.setting

[13:57] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/b6bbc36429

[14:36] *** hankache left
[14:43] *** anatofuz left
[14:45] *** anatofuz joined
[14:49] *** anatofuz left
[14:59] *** robertle left
[15:14] *** ufobat__ joined
[15:18] *** ufobat_ left
[15:43] *** cognominal joined
[15:44] <cognominal> what is the canonical way to test if an argument has been given to a positional parameter?

[15:45] <cognominal> oops, either in nqp or Perl 6

[15:45] <timotimo> in nqp we often have a default value that acts as a sentinel

[15:46] <timotimo> ideally a value that the caller has no access to without doing evil stuff

[15:46] <timotimo> see the implementation of QAST nodes for example

[15:46] <timotimo> hm, i wonder if that's the most performant implementation

[15:46] <cognominal> Apparently with no argument, it is bound to []. Which is no different from having [] as an argument

[15:47] <timotimo> otherwise you can use slurpy positionals or slurpy captures

[15:47] <timotimo> and count the arity

[15:47] <timotimo> or multi candidates, of course

[15:47] <cognominal> My concern is nqp right now. But I don't know for Perl6 either

[15:50] <cognominal> QAST use slurpy everywhere so I probably will do the same. I can always use a(|@a) to feed it to a slurpy. 

[15:50] <cognominal> thx timotimo

[15:50] <jnthn> m: sub foo(@a = (my $a-missing = True, [])) { say so $a-missing }; foo([1,2,3]); foo();

[15:50] <evalable6> jnthn, rakudo-moar b6bbc3642: OUTPUT: ¬´False‚ê§True‚ê§¬ª

[15:54] <cognominal> n: say(NO_VALUE.HOW.name(NO_VALUE))

[15:54] <timotimo> are we using the most performant version of optional parameters in QAST nodes, i wonder

[15:55] <timotimo> all i'd have to do is look at a spesh log

[15:55] <timotimo> maybe later.

[15:55] <cognominal> n-m: say(NO_VALUE.HOW.name(NO_VALUE))

[15:56] <timotimo> nqp: say("hi")

[15:56] <timotimo> i think we don't have an nqp evalbot at the moment

[16:02] <cognominal> in nqp, using NQPArray as a default parameter is the obvious way. Thx jnthn, timotimo

[16:06] <cognominal> nqp is so strange. So powerful, and very unfriendly.

[16:08] <timotimo> yeah, the hope is to keep the nqp compiler small

[16:08] <timotimo> i think, at least

[16:08] <cognominal> yup, just enough to booststrap  Rakudo which means... a lot.

[16:10] <jnthn> I figure pretty much all the effort on being friendly goes into Rakudo, which has a vastly largely userbsae

[16:12] <cognominal> I was spoiled by rakudo friendliness so going back to nqp is a setback :) 

[16:18] <MasterDuke> cognominal: just idle curiosity, but what's causing the need to go back to nqp?

[16:22] <cognominal> I am writing a nicer text based parse dumper and eventually from json output browsing a parse from a web browser. That would involve a .chunks at nqp level with no match overlap at a given level.  'abc' ~~ / $<abc>=[ a $<b>=b c ] /  

[16:23] *** leont joined
[16:24] <cognominal> I already tweaked the parse engine  to get the specific matched multi. I will have to tweak EXPR too to get better info 

[16:25] <timotimo> is that only for rakudo's parser?

[16:25] <cognominal> It will benefit rakudo as well.

[16:26] <timotimo> what do you do if there are legit overlapping matches? like when you capture in a lookahead or lookbehind?

[16:27] <cognominal> If we go crazy with slang we should have a way to correctly highlighy code. So we must have a way to output a usable parse.

[16:28] <cognominal> What I will do with overlapping matches is that I push them down the tree and append a dash to show I have cheated.

[16:29] <cognominal> I append a dash to the name of the named match.

[16:29] *** [Tux] left
[16:29] <cognominal> In fact this is the code that triggered my question.

[16:43] *** [Tux] joined
[17:27] *** ggoebel joined
[17:28] <ggoebel> in nqp how does one test if a scalar has been declared but not bound?

[17:29] <timotimo> a scalar not being declared is a compile-time error

[17:29] <timotimo> are you working with nqp or with nqp ops inside perl6 code?

[17:31] <ggoebel> nqp... I'm looking at the self-contained-executable branch and trying to resolve a bug "Error while reading from file: Cannot find method 'slurp' on object of type NQPMu"

[17:32] <ggoebel> which happens because it is trying to slurp an $in-handle which was declared but never bound to anything...

[17:32] <timotimo> one way is to use nqp::defined

[17:35] <ggoebel> thanks!

[17:37] *** Xliff joined
[17:37] <Xliff> .

[18:21] <Geth> ¬¶ nqp: ggoebel++ created pull request #577: Self contained executable

[18:21] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/pull/577

[18:25] *** robertle joined
[19:38] *** ufobat__ left
[21:16] *** anatofuz joined
[21:27] *** lucasb left
[21:36] *** pyrimidi_ left
[22:00] *** ggoebel left
[22:08] *** anatofuz left
[22:36] *** anatofuz joined
[23:01] *** anatofuz left
[23:03] *** anatofuz joined
[23:06] *** ggoebel joined
[23:12] *** anatofuz left
[23:13] *** anatofuz joined
[23:17] *** anatofuz left
[23:19] *** anatofuz joined
[23:24] *** anatofuz left
[23:25] *** anatofuz joined
[23:27] *** anatofuz left
[23:27] *** anatofuz joined
[23:54] <Geth> ¬¶ problem-solving: vrurg assigned to jnthn Issue A threat of full CORE duplication for each language revision https://github.com/perl6/problem-solving/issues/104

[23:58] *** leont left
