[00:53] *** epony joined
[01:13] <Geth> ¦ nqp: 9eb5f2549c | (Vadim Belman)++ | tools/build/gen-js-makefile.nqp

[01:13] <Geth> ¦ nqp: Fix wrong makefile variable name

[01:13] <Geth> ¦ nqp: 

[01:13] <Geth> ¦ nqp: M_RUNNER -> M_BUILD_RUNNER

[01:13] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/9eb5f2549c

[01:14] *** sivoais joined
[01:30] *** squashable6 left
[01:33] *** squashable6 joined
[01:33] *** ChanServ sets mode: +v squashable6

[01:40] <vrurg> .tell pmurias Thanks for the link. Unfortunately, it's not relevant bacuse I always have the command line tools installed. Anyway, it builds in a Linux VM, I can work with this.

[01:40] <tellable6> vrurg, I'll pass your message to pmurias

[01:40] <vrurg> .seen patrickb

[01:40] <tellable6> vrurg, I saw patrickb 2019-08-31T13:55:03Z in #moarvm: <patrickb> afk for a bit

[01:41] <vrurg> .tell patrickb Could you, pls, review and test R#3166?

[01:41] <synopsebot> R#3166 [open]: https://github.com/rakudo/rakudo/pull/3166 [WIP][build] [WIP] [HEADSUP] Extract common parts of backend makefiles into a common template

[01:41] <tellable6> vrurg, I'll pass your message to patrickb

[01:43] <vrurg> Anybody else willing to give a try for the new MoarVM/JVM makefile templates is welcome to try the above PR.

[03:14] <vrurg> .tell pmurias I have drafted makefile template for JS. You can check it out in R#3166. It doesn't work yet but perhaps you can help me with that.

[03:14] <synopsebot> R#3166 [open]: https://github.com/rakudo/rakudo/pull/3166 [WIP][build] [WIP] [HEADSUP] Extract common parts of backend makefiles into a common template

[03:14] <tellable6> vrurg, I'll pass your message to pmurias

[05:47] <Geth> ¦ problem-solving: fecundf assigned to jnthn Issue Clean interpolation for enumerated character classes https://github.com/perl6/problem-solving/issues/97

[06:16] <bartolin> vrurg: maybe I've done something wrong but I wasn't able to build Rakudo (neither on MoarVM, nor on JVM) with your branch. I've to go now, but two things caught my eyes:

[06:19] <bartolin> vrurg: 1) when M_SET_NQP_LIB is used there is no space after it: $(M_SET_NQP_LIB)$(M_RUN_PERL6) ... There is a trailing whitespace on the line where it is set, though: 'M_SET_NQP_LIB = NQP_LIB=blib '

[06:21] <bartolin> vrurg: 2) It looks like the prerequisites like Actions.nqp, Grammar.nqp, etc. are not compiled at all

[06:23] <bartolin> vrurg: that's on FreeBSD 11.2-RELEASE-p4. I'll try to take another look later today.

[08:16] *** chloekek joined
[08:19] *** camelCaser left
[08:22] *** pmurias joined
[08:26] <pmurias> vrurg: I haven't encoutered that error before so it's hard for me to help (and the message is not helpfull at all)

[08:26] <tellable6> 2019-09-04T01:40:36Z #perl6-dev <vrurg> pmurias Thanks for the link. Unfortunately, it's not relevant bacuse I always have the command line tools installed. Anyway, it builds in a Linux VM, I can work with this.

[08:26] <tellable6> 2019-09-04T03:14:39Z #perl6-dev <vrurg> pmurias I have drafted makefile template for JS. You can check it out in R#3166. It doesn't work yet but perhaps you can help me with that.

[08:26] <synopsebot> R#3166 [open]: https://github.com/rakudo/rakudo/pull/3166 [WIP][build] [WIP] [HEADSUP] Extract common parts of backend makefiles into a common template

[08:29] <pmurias> vrurg: looking at stuff online people have "solved" such errors by things like removing the ~/.node-gyp, node_modules and rebooting (?!)

[08:47] <Geth> ¦ problem-solving/path-to-raku: 3021673634 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[08:47] <Geth> ¦ problem-solving/path-to-raku: Also mention "p6" in repo names

[08:47] <Geth> ¦ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/3021673634

[09:10] *** chloekek left
[09:11] *** Xliff joined
[09:17] <Xliff> jmerelo: https://paste.fedoraproject.org/paste/xJhTkmM05pP36~-ybZ2mLg

[09:17] <tellable6> Xliff, I'll pass your message to jmerelo

[09:18] *** titsuki left
[09:18] *** Kaiepi left
[09:18] *** Kaiepi joined
[09:19] *** titsuki joined
[09:23] *** squashable6 left
[09:25] *** squashable6 joined
[09:25] *** ChanServ sets mode: +v squashable6

[09:53] <Geth> ¦ nqp: 1b0230a92d | (Paweł Murias)++ | tools/build/gen-js-makefile.nqp

[09:53] <Geth> ¦ nqp: [js] Fix preprocessing the qregex tests

[09:53] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/1b0230a92d

[10:12] <pmurias> any ideas why https://paste.debian.net/1098712/ this prints 1

[10:12] <pmurias> I think it's a bug

[10:14] <pmurias> I can't reproduce that on the rakudo level tho

[10:41] <moritz> pmurias: I guess it's related to literal parsing and valdation

[10:42] <moritz> don't floats go up only to e+238?

[10:42] *** pmurias left
[10:53] *** nebuchadnezzar left
[10:53] *** nebuchadnezzar joined
[11:18] *** pmurias joined
[11:47] <pmurias> moritz: you can print out that float

[11:48] <pmurias> moritz: ok I figure it out

[11:48] <pmurias> * figured

[11:53] *** camelCaser joined
[11:58] *** chloekek joined
[12:11] <pmurias> how can I check in nqp tests if a backend is 32 or 64 bits?

[12:12] <pmurias> in the old days it seemed we had ./nqp-p -e 'say(nqp::backendconfig(){"intvalsize"})'

[12:12] <pmurias> which now seems to be only supported on the js backend

[12:27] <nine> Apparently Perl6::Actions uses integer overflow to detect it: my int $?BITS := nqp::isgt_i(nqp::add_i(2147483648, 1), 0) ?? 64 !! 32;

[12:30] <moritz> somebody needs to manically shout and scream "UNDEFINED BEHAIVOR" please :D

[12:35] * |Tux| maniacally shouts UNDEFINE BEHAVIOR

[12:35] <|Tux|> (D omitted on purpose)

[12:36] <nine> Noooo....now we no longer know how to behave!

[12:36] <|Tux|> I see no change :}

[12:50] *** lucasb joined
[12:58] <Geth> ¦ nqp: ba5c67be39 | (Paweł Murias)++ | src/vm/js/Compiler.nqp

[12:58] <Geth> ¦ nqp: [js] Fix bug cause by == now being nqp::iseq_i in NQP

[12:58] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ba5c67be39

[12:58] <Geth> ¦ nqp: 1100382840 | (Paweł Murias)++ | t/nqp/060-bigint.t

[12:58] <Geth> ¦ nqp: [js] Skip a 64bit test

[12:58] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/1100382840

[12:59] <|Tux|> Rakudo version 2019.07.1-254-g17d036ad4 - MoarVM version 2019.07.1-176-g1b67a94cc

[12:59] <|Tux|> csv-test-xs-20      0.429 -  0.430

[12:59] <|Tux|> csv-ip5xs           0.659 -  0.687

[12:59] <|Tux|> test-t --race       0.787 -  0.789

[12:59] <|Tux|> test-t              1.733 -  1.765

[12:59] <|Tux|> csv-ip5xs-20        4.875 -  5.268

[12:59] <|Tux|> test                6.761 -  6.999

[12:59] <|Tux|> test-t-20 --race    9.308 -  9.315

[12:59] <|Tux|> csv-parser         21.970 - 22.174

[12:59] <|Tux|> test-t-20          29.124 - 29.662

[13:02] *** pamplemousse joined
[13:22] <pmurias> moritz: is that UNDEFINED BEHAVIOR in NQP?

[13:22] <pmurias> nine: maybe moving that into the nqp setting would make sense?

[13:24] <moritz> pmurias: probably not, just carrying prejudices from C over :D

[13:33] *** pmurias left
[13:33] *** pmurias joined
[13:52] <vrurg> pmurias: thanks for looking into it. But it seems that the only solution for gyp is python2 being the system default. :( 

[13:53] <vrurg> bartolin: thanks for testing! I was afraid that BSD would have its own opinion about the makefile. :)

[14:07] <pmurias> vrurg: did using python2 as system default fix your second issue?

[14:08] <vrurg> pmurias: aha. And it's the only way. npm config doesn't work – somewhere inside they're still using the default.

[14:08] <vrurg> luckily, macports has very simple way of switching defaults. Not a big deal to do it just for a build.

[14:09] <pmurias> they do claim that they are looking up python2 (instead of python) first

[14:09] <vrurg> pmurias: BTW, is installing indo node_modules for JS is mandatory? Can't we use blib as other backends do?

[14:10] <vrurg> macports doesn't install python2, they use full versions in names. Perhaps I shall symlink manually for it.

[14:13] <vrurg> Ha, python2 is being ignored either. :D

[14:14] <pmurias> vrurg: it's not technically mandatory, for npm releases I was mangling files so that they only had relative dependencies

[14:14] <pmurias> vrurg: I'll think how we should migrate to using blib

[14:15] <vrurg> pmurias: also, how deep directory structure would work? I mean, BOOTSTRAP is now BOOTSTRAP/v6<rev>

[14:16] <pmurias> why do we have a deep directory structure in the first place?

[14:17] <vrurg> because bootstrap is now provided for each CORE version separately and must be versionized.

[14:18] <pmurias> I mean why not BOOTSTRAPv6<rev>?

[14:19] <vrurg> To have things structured. There is also something about ModuleLoader, I think, but not really sure right now.

[14:20] <vrurg> No, nothing in the moduleloader. Fake memory of mine.

[14:37] <pmurias> vrurg: ok, I'll think about the blib stuff

[14:38] <pmurias> vrurg: if we get all the build things js analogous to the other backends they won't get broken by build changes right?

[14:39] <vrurg> pmurias: I would rather say "less chances to break, easier to fix". This is the purpose.

[14:41] <jnthn> Current HEAD of everything seems to come with some very significant performance regressions compared to a month or so ago

[14:41] <pmurias> vrurg: is "will get fixed by whoever is changing the build system doing the required tweaks" a realistic goal? ;)

[14:41] <pmurias> jnthn: :(

[14:43] <vrurg> pmurias: I think yes for most cases. There're still pretty much backend-specific stuff in corresponding templates, but at least everything is unified and looks alike.

[14:45] <jnthn> heck, even an empty for range loop has become incredibly slower

[14:46] <vrurg> jnthn: that reminds me... When I created separate BOOTSTRAP for each core, I bundled spesh-plugin with 6.c BOOTSTRAP only. Two days ago it came to my mind that it might break optimization for other cores.

[14:47] <jnthn> vrurg: The things it registers are global, so as long as it gets loaded, it's fine

[14:47] <jnthn> It's really odd, though, it seems like MoarVM doesn't even get logs

[14:47] <vrurg> jnthn: Ok, that was my hope. 

[14:48] * vrurg is afk. will follow later today.

[15:03] *** pmurias left
[15:37] *** pamplemousse left
[15:42] *** chloekek left
[15:49] <Geth> ¦ rakudo: 9d1505d184 | (Jonathan Worthington)++ | 2 files

[15:49] <Geth> ¦ rakudo: Fix exception propagation with race inside race

[15:49] <Geth> ¦ rakudo: 

[15:49] <Geth> ¦ rakudo: Or hyper inside of hyper. We should always propagate the exception, even

[15:49] <Geth> ¦ rakudo: if it is already wrapped. Fixes #3165.

[15:49] <synopsebot> RAKUDO#3165 [closed]: https://github.com/rakudo/rakudo/issues/3165 Exception in nested race/hyper deadlocks

[15:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9d1505d184

[15:50] <Geth> ¦ roast: 270dafd944 | (Jonathan Worthington)++ | S07-hyperrace/basics.t

[15:50] <Geth> ¦ roast: Cover exception in race inside race

[15:50] <Geth> ¦ roast: 

[15:50] <Geth> ¦ roast: And the same with hyper.

[15:50] <Geth> ¦ roast: 

[15:50] <Geth> ¦ roast: Covers https://github.com/rakudo/rakudo/issues/3165

[15:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/270dafd944

[16:16] *** chloekek joined
[16:54] *** chloekek left
[16:56] <Xliff> Last call for thoughts: https://gist.github.com/Xliff/d426039cc162e1cb84d1b7f8067fe9fb

[16:56] <tellable6> 2019-09-04T10:53:30Z #perl6 <jmerelo> Xliff thanks.

[16:56] <Xliff> Otherwise I am sending this to problem-solving

[17:02] <Xliff> m: ("MY_INSANE_ENUM => 2 << 33" ~~ /( <[_ A..Z]>+ ) ( [ '=' <m>?<d>+<L>? [ '<<' (<d>+) ]? ]? ) ','? \v*/).gist.say

[17:02] <evalable6> Xliff, rakudo-moar 9d1505d18: OUTPUT: «｢MY_INSANE_ENUM｣␤ 0 => ｢MY_INSANE_ENUM｣␤ 1 => ｢｣␤»

[17:02] *** travis-ci joined
[17:02] <travis-ci> Rakudo build failed. Jonathan Worthington 'Fix exception propagation with race inside race

[17:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/580793471 https://github.com/rakudo/rakudo/compare/17d036ad45b6...9d1505d1843f

[17:02] *** travis-ci left
[17:02] <Xliff> m: ("MY_INSANE_ENUM = 2 << 33" ~~ /( <[_ A..Z]>+ ) ( [ '=' <m>?<d>+<L>? [ '<<' (<d>+) ]? ]? ) ','? \v*/).gist.say

[17:02] <evalable6> Xliff, rakudo-moar 9d1505d18: OUTPUT: «｢MY_INSANE_ENUM｣␤ 0 => ｢MY_INSANE_ENUM｣␤ 1 => ｢｣␤»

[17:03] <Xliff> m: ("MY_INSANE_ENUM = 2 << 33" ~~ /( <[_ A..Z]>+ ) \s* ( [ '=' \s* <m>?<d>+<L>? \s* [ '<<' (<d>+) ]? ]? ) ','? \v*/).gist.say

[17:03] <evalable6> Xliff, rakudo-moar 9d1505d18: OUTPUT: «(exit code 1) No such method 'm' for invocant of type 'Match'␤  in block <unit> at /tmp/pRTSSY8tlU line 1␤␤»

[17:04] <Xliff> m: ("MY_INSANE_ENUM = 2 << 33" ~~ /( <[_ A..Z]>+ ) \s* ( [ '=' \s* '-'?[0..9]+'L'? \s* [ '<<' ([0..9]+) ]? ]? ) ','? \v*/).gist.say

[17:04] <evalable6> Xliff, rakudo-moar 9d1505d18: OUTPUT: «｢MY_INSANE_ENUM ｣␤ 0 => ｢MY_INSANE_ENUM｣␤ 1 => ｢｣␤»

[17:04] <Xliff> m: ("MY_INSANE_ENUM = 2 << 33" ~~ /( <[_ A..Z]>+ ) \s* ( [ '=' \s* '-'?[0..9]+'L'? \s* [ '<<' \s* ([0..9]+) ]? ]? ) ','? \v*/).gist.say

[17:04] <evalable6> Xliff, rakudo-moar 9d1505d18: OUTPUT: «｢MY_INSANE_ENUM ｣␤ 0 => ｢MY_INSANE_ENUM｣␤ 1 => ｢｣␤»

[17:05] <Xliff> m: my token d { <[0..9 x]> }; my token L { 'L' }; my rule enum_entry { /( <[_ A..Z]>+ ) ( [ '=' <m>?<d>+<L>? [ '<<' (<d>+) ]? ]? ) ','? \v*/ }; ("MY_INSANE_ENUM => 2 << 33" ~~ /<enum_entry>/).gist.say

[17:05] <evalable6> Xliff, rakudo-moar 9d1505d18: OUTPUT: «(exit code 1) 04===SORRY!04===␤Unrecognized regex metacharacter / (must be q…»

[17:05] <evalable6> Xliff, Full output: https://gist.github.com/3f0a53d1816a1897a904fb8f0dbb202f

[17:06] <Xliff> m: my token d { <[0..9 x]> }; my token L { 'L' }; my rule enum_entry { ( <[_ A..Z]>+ ) ( [ '=' <m>?<d>+<L>? [ '<<' (<d>+) ]? ]? ) ','? \v* }; ("MY_INSANE_ENUM => 2 << 33" ~~ /<enum_entry>/).gist.say

[17:06] <evalable6> Xliff, rakudo-moar 9d1505d18: OUTPUT: «(exit code 1) No such method 'm' for invocant of type 'Match'␤  in regex enum_entry at /tmp/hpOg6eBQHA line 1␤  in block <unit> at /tmp/hpOg6eBQHA line 1␤␤»

[17:06] <Xliff> m: my token d { <[0..9 x]> }; my token m { '-' }; my token L { 'L' }; my rule enum_entry { ( <[_ A..Z]>+ ) ( [ '=' <m>?<d>+<L>? [ '<<' (<d>+) ]? ]? ) ','? \v* }; ("MY_INSANE_ENUM => 2 << 33" ~~ /<enum_entry>/).gist.say

[17:06] <evalable6> Xliff, rakudo-moar 9d1505d18: OUTPUT: «｢MY_INSANE_ENUM ｣␤ enum_entry => ｢MY_INSANE_ENUM ｣␤  0 => ｢MY_INSANE_ENUM ｣␤  1 => ｢｣␤»

[17:06] <Xliff> m: my token d { <[0..9 x]> }; my token m { '-' }; my token L { 'L' }; my rule enum_entry { ( <[_ A..Z]>+ ) ( [ '=' <m>?<d>+<L>? [ '<<' (<d>+) ]? ]? ) ','? \v* }; ("MY_INSANE_ENUM = 2 << 33" ~~ /<enum_entry>/).gist.say

[17:06] <evalable6> Xliff, rakudo-moar 9d1505d18: OUTPUT: «｢MY_INSANE_ENUM = 2 << 33｣␤ enum_entry => ｢MY_INSANE_ENUM = 2 << 33｣␤  0 => ｢MY_INSANE_ENUM ｣␤  1 => ｢= 2 << 33｣␤   d => ｢2｣␤   0 => ｢33｣␤    d => ｢3｣␤    d => ｢3｣␤»

[17:08] <Xliff> m: my token d { <[0..9 x]> }; my token m { '-' }; my token L { 'L' }; my rule enum_entry { ( <[_ A..Z]>+ ) ( [ '=' <m>?<d>+<L>? [ '<<' (<d>+) ]? ]? ) ','? \v* }; my $m = "MY_INSANE_ENUM = 2 << 33" ~~ /<enum_entry>/; $m[1][0].say

[17:08] <evalable6> Xliff, rakudo-moar 9d1505d18: OUTPUT: «Nil␤»

[17:08] <Xliff> m: my token d { <[0..9 x]> }; my token m { '-' }; my token L { 'L' }; my rule enum_entry { ( <[_ A..Z]>+ ) ( [ '=' <m>?<d>+<L>? [ '<<' (<d>+) ]? ]? ) ','? \v* }; my $m = "MY_INSANE_ENUM = 2 << 33" ~~ /<enum_entry>/; $m<enum_entry>[1][0].say

[17:08] <evalable6> Xliff, rakudo-moar 9d1505d18: OUTPUT: «｢33｣␤ d => ｢3｣␤ d => ｢3｣␤»

[17:14] *** Xliff left
[18:28] *** chloekek joined
[18:48] *** sortiz joined
[19:35] *** vrurg left
[19:37] *** vrurg joined
[20:18] *** MasterDuke joined
[20:20] *** pmurias joined
[20:26] *** MasterDuke left
[20:27] *** MasterDuke joined
[20:35] *** Ven`` joined
[20:52] *** Ven`` left
[21:29] *** pmurias left
[21:30] *** pmurias joined
[22:13] <Geth> ¦ problem-solving: Xliff assigned to jnthn Issue Perl6 is missing the ability to store sub signatures for later use. Think Callbacks. https://github.com/perl6/problem-solving/issues/98

[22:20] *** chloekek left
[22:32] *** pmurias left
[22:41] *** MasterDuke left
[23:41] *** j3nnn1 left
[23:55] *** vrurg left
