[00:04] *** leont left
[00:09] <ugexe> If you set the flag you just break lots of stuff in other hard to fix ways. 

[00:09] <ugexe> There is no good answer I’m aware of 

[00:09] <ugexe> both options suck rather 

[00:10] <ugexe> Other languages I believe make a .bat and a .com or some shit because that somehow changes the processing or something? It’s been so long I forget 

[00:12] <ugexe> I remember looking at electron and Julia for guidance in these areas 

[00:13] <MasterDuke> patrickb: btw, i think the relocatable merge doesn't play nice with appveyor

[00:14] <MasterDuke> https://ci.appveyor.com/project/rakudo/rakudo/builds/23310650/job/6t90xb36xw6oy6ub

[00:15] <patrickb> ugexe: I've been looking at this problem for quite some hours now.

[00:15] <b2gills> Programs on Windows are able to get the text given on the commandline directly and parse it however it sees fit. That is what cmd.exe apparently does.

[00:15] <patrickb> MasterDuke: That's what I'm working on right now. (Though a little side tracked, I have to admit)

[00:18] <patrickb> ugexe: I think I don't like the libuv API in that spot. Too much magic for my taste...

[00:18] <MasterDuke> ah, cool

[00:23] * patrickb reboots

[00:24] *** patrickz joined
[00:26] <patrickz> This is my write up of the bug hunt so far: https://gist.github.com/patzim/73d4e9c7f0cfc07d2db0f21c82aa1354

[00:27] *** patrickb left
[00:30] <patrickz> ugexe: I'm trying to make this bit of code work with spaces in path: https://github.com/rakudo/rakudo/blob/master/src/core/CompUnit/PrecompilationRepository.pm6#L264

[00:31] <patrickz> All easy, unless when on windows and during the build, where the perl6 executable happens to be a bat file.

[00:33] <patrickz> I'd appreciate any pointers on what's the best way forward...

[00:46] <patrickz> The only idea I have is porting the "shell" option of node.js with all its magic over to perl6. But that'd require making changes to the spawnprocasync OP. And that's no simple endeavor.

[00:50] *** leont joined
[01:10] <Geth> ¦ rakudo: patzim++ created pull request #2795: Fix gdb and lldb runners.

[01:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2795

[01:12] <ugexe> if you've only spent hours on this specific problem so far, consider yourself lucky

[01:12] <ugexe> i spent a few days working on builds with spaces before i got bored

[01:14] <patrickz> ugexe: I have moarvm and nqp working

[01:15] <patrickz> rakudo succeeds with the build and fails in the make install phase when it starts to precompile stufff

[01:15] <ugexe> maybe there is something /s can help with

[01:16] <patrickz> ugexe: have you had a look at the gist I posted above?

[01:16] <ugexe>          If command starts with a quote, the first and last quote chars in command

[01:16] <ugexe>          will be removed, whether /s is specified or not.

[01:16] <ugexe>  /S    Strip " quote characters from command.

[01:17] <ugexe> well i guess that would need to strip \ not "

[01:18] <patrickz> True. I've looked at an strace of node.js and perl6 respectively and it's definitely the \ in there that kill it.

[01:18] <patrickz> The libuv api seems tailored to node.js a lot in that area.

[01:19] <ugexe> unsurprising

[01:20] <ugexe> but this isn't a libuv specific thing i dont believe. if this behavior did not occur then some other common form of passing commands on windows breaks

[01:20] <ugexe> although yes the behavior breaking this specific thing for you is libuv

[01:21] <patrickz> That might be true. I'm not pledging to change that unconditionally in moar.

[01:22] <AlexDaniel> patrickz: did you send a CLA?

[01:22] <AlexDaniel> I'm just thinking that you should be able to commit such fixes directly

[01:23] <ugexe> fwiw here is some old discussion on uv windows process args verbatim

[01:23] <ugexe> https://github.com/rakudo/rakudo/issues/2005

[01:23] <patrickz> Maybe replicating the `shell` feature as closely as possible is the best way forward. Then we don't have to think the consequences of the changes we make, because we can rely on that it's a sensible way to do it...

[01:24] <patrickz> AlexDaniel: Didn't. Anywhere I can read up on this?

[01:24] <ugexe> what i dont like about exposing it as an option is it then should be part of spec, and i sure as hell dont want to try and spec this crazy .bat behavior

[01:24] <AlexDaniel> CLA: https://www.perlfoundation.org/contributor-license-agreement print it out, sign it, scan it in (resize your scan to 250KB or less). Email to trademark -at- perlfoundation.org (please scan and email if you can, it's so much more efficient)

[01:25] <AlexDaniel> patrickz: when you send it, please CC Coke and jnthn

[01:25] <patrickz> ugexe: Thanks for the link.

[01:25] <patrickz> ugexe: As little magic as possible.

[01:26] <Geth> ¦ rakudo: 7846144e6a | (Patrick Böker)++ | tools/build/create-moar-runner.p6

[01:26] <Geth> ¦ rakudo: Fix gdb and lldb runners.

[01:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7846144e6a

[01:26] <Geth> ¦ rakudo: 6ba54fb929 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | tools/build/create-moar-runner.p6

[01:26] <Geth> ¦ rakudo: Merge pull request #2795 from patzim/debug-runner-fix

[01:26] <Geth> ¦ rakudo: 

[01:26] <Geth> ¦ rakudo: Fix gdb and lldb runners.

[01:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6ba54fb929

[01:29] <AlexDaniel> patrickz: fwiw the commit message here is not very descriptive, IMO it's a good idea to add an extra sentence or two to describe some what and why

[01:30] <patrickz> AlexDaniel: Thanks for the hint. Will add some more next time

[01:31] <AlexDaniel> patrickz: also check out some guidelines on how to write commit messages, your titles tend to be too long

[01:33] <AlexDaniel> which is why this happens: https://screenshots.firefox.com/1o5DJLtqhQQFnouU/github.com

[01:35] <patrickz> Ah! I always took the width of the commit message field of `git gui` as a reference for how wide is ok. Seems github breaks off a little bit earlier than git gui does. :-P

[01:37] <AlexDaniel> patrickz: if you're interested in more nitpicking, then I'd love to tell you that it's probably more common to not use a dot at the end x)

[01:37] <AlexDaniel> although you're extremely consistent with it :)

[01:38] <patrickz> I have no strong feelings toward that dot. So yeah...

[01:39] <AlexDaniel> once your CLA is received, please add yourself to https://github.com/rakudo/rakudo/blob/master/CREDITS :)

[02:13] *** SqrtNegInf left
[02:47] <patrickz> o/

[02:47] <patrickz> off to bed

[02:47] *** patrickz left
[03:21] *** ufobat__ joined
[03:25] *** ufobat_ left
[03:45] *** leont left
[06:30] *** robertle left
[06:32] *** MasterDuke left
[08:36] *** robertle joined
[11:24] *** leont joined
[11:42] <lizmat> notable6: weekly

[11:42] <notable6> lizmat, 8 notes: https://gist.github.com/c094dfbd4f45695e87bbdc840b8b33d1

[11:44] *** epony left
[11:45] *** Kaiepi left
[13:20] *** discord63 joined
[13:22] *** ExtraCrispy left
[13:22] *** discord6 left
[13:22] *** ExtraCrispy joined
[13:23] *** discord63 is now known as discord6

[13:32] *** Guest27580 left
[13:36] <AlexDaniel> weekly: New rakudo release manager! https://github.com/rakudo/rakudo/commit/4189e20c464d2991475da6c91e66ae5a821e3c14

[13:36] <notable6> AlexDaniel, Noted!

[13:36] <AlexDaniel> lizmat: :)

[14:40] *** SqrtNegInf joined
[14:55] *** scovit joined
[14:56] <scovit> Hi, I just opened this issue: #2796 . If anybody can enlighten me on the reasoning behind the logic in CatHandle, that will be good for Karma, thanks!

[14:59] <scovit> m: my $inflist = 1..*; my @inflist = $inflist.map: { "$_.txt" }; my $*ARGFILES = IO::CatHandle.new(@inflist);

[14:59] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «IO::CatHandle is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 2␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 1␤␤»

[14:59] <scovit> well..

[15:03] <lizmat> scovit: will look at it after finishing the P6W

[15:04] <scovit> lizmat: no hurry!

[15:04] <scovit> thanks

[15:10] <ugexe> in SET-SELF it does `@handles.elems; # reify`

[15:10] <lizmat> reportable6: 2019-03-18T12:00:00Z 2019-03-25T00:00:00Z

[15:10] <reportable6> lizmat, Couldn't find a snapshot for 2019-03-18T12:00:00Z (try ｢list｣ command to see what's available).

[15:11] <lizmat> reportable6: list

[15:11] <reportable6> lizmat, https://gist.github.com/cad679e9f6bfc26f06b4d54943281deb

[15:11] <lizmat> reportable6: 2019-03-18T12:00:00Z 2019-03-24T00:12:00Z

[15:11] <reportable6> lizmat, Couldn't find a snapshot for 2019-03-18T12:00:00Z (try ｢list｣ command to see what's available).

[15:11] <ugexe> originally `@handles.elems or die 'Must have at least one item to create IO::CatHandle from';`

[15:12] <lizmat> AlexDaniel: what up with reportable ?

[15:13] <ugexe> https://github.com/rakudo/rakudo/commit/ac39c9a07e3c40c30edb2e5e8f91762195ab7236 # here is where that .elems is originally introduced

[15:14] <scovit> ugexe, yep, it is my understanding that it should not reify in general. If it is reified already instead, specific optimizations can be implemented

[15:22] <scovit> also automatic optimizations, at least intuitively, but I am not an expert of that field

[15:39] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/03/25/2019-12-cool-truck/

[15:39] <lizmat> moritz: ^^

[15:39] <lizmat> notable6: weekly reset

[15:39] <notable6> lizmat, Moved existing notes to “weekly_2019-03-25T15:39:56Z”

[15:42] <AlexDaniel> reportable6: 2019-03-18T00:00:00Z 2019-03-25T00:00:00Z

[15:42] <reportable6> AlexDaniel, Couldn't find a snapshot for 2019-03-25T00:00:00Z (try ｢list｣ command to see what's available).

[15:42] <AlexDaniel> reportable6: 2019-03-18T00:00:00Z 2019-03-24T12:00:00Z

[15:42] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[15:43] <reportable6> AlexDaniel, https://gist.github.com/55c43bc6789adfcb75d3ffc94765714a

[15:43] <AlexDaniel> lizmat: that's as close as it will get

[15:44] <lizmat> AlexDaniel++  # updated post

[15:47] <AlexDaniel> lizmat: “Missing math/statistics functions” there's no link

[15:48] *** dogbert joined
[15:48] *** dogbert is now known as Guest5277

[15:48] <lizmat> AlexDaniel++  # oops, missed a ", fixed now

[15:49] <Guest5277> lizmat: "Provided are a challenge for Begi*nnn*ers, and a challenge for Experts"

[15:51] <lizmat> Guest5277++ +   # fixed  :-)

[15:52] * Guest5277 is dogbert17 in disguise :-)

[15:52] *** robertle left
[15:53] <lizmat> dogbert17++  :-)

[15:53] <lizmat> afk for a bit&

[16:24] *** vrurg left
[16:27] *** vrurg joined
[16:44] <scovit> I found this wikipedia page https://en.wikipedia.org/wiki/Strictness_analysis

[16:50] *** robertle joined
[17:25] *** epony joined
[18:47] <masak> brrt++ # https://brrt-to-the-future.blogspot.com/2019/03/reverse-linear-scan-allocation-is.html

[18:51] <TreyHarris> I'm not sure if perl6-language is dead or not at this point, but I just sent a message about a problem with MAIN argument handling that I think necessitates an EnumStr allomorph in the language. (Or otherwise, MAIN argument handling in general is broken and must be changed somehow.)

[18:52] <timotimo> how does that work with enum values that come from multiple types?

[18:52] <timotimo> oh

[18:52] <TreyHarris> Such as?

[18:52] <timotimo> now i get what you mean

[18:52] <ugexe> sub MAIN($s) { if $s { say 42 } }; # how could EnumStr work with this?

[18:53] <ugexe> Planned and Same for instance would both not print anything

[18:53] <ugexe> and arguable the string "False" (such as a module named False being fed to zef) should be true

[18:53] <timotimo> i think it'd only be for True and False perhaps?

[18:53] <timotimo> oh, and of course the third boolean value: FileNotFound

[18:53] <TreyHarris> There's literally no way I can find to get a single string argument to take both "True" and "Bool::True". So a BoolStr might be all that's needed?

[18:54] <TreyHarris> (er, to take and not collapse both to the same value, I mean)

[18:54] <ugexe> if we have BoolStr() then we need to encourage use of Str() vs Str in MAIN documentation

[18:54] <ugexe> * as appropriate

[18:55] <timotimo> maybe a solution that has MAIN check parameter lists for enum-acceptance would be better?

[18:55] <ugexe> for some reason i'm OK with string 0 from command line being false, but False being false bothers me

[18:55] <TreyHarris> ugexe: already on that, was entering an issue into the docs GitHub that I was going to assign to myself about Str() in MAIN

[18:56] <TreyHarris> ugexe: because that's traditional in Unix command lines?

[18:56] <timotimo> AFKBBL

[18:56] <TreyHarris> A general EnumStr couldn't provide truthy and falsy values?

[18:57] <ugexe> well "Planned".so == True, but Planned.so == False

[18:58] <ugexe> so if you type "Planned" on the command line, what do you expect?

[18:59] <ugexe> it also probably means adding any EnumStr at anytime is a breaking change

[18:59] <ugexe> adding any Enum (resulting in new EnumStr rather)

[19:00] <TreyHarris> I'd suggested BoolStr initially but in the rakudo issue lizmat++ suggested EnumStr and I thought that was better--but assumed EnumStr.(True, "True") would be true and EnumStr.new(False, "False") would be false. It's a good question though, what I think I'd *expect* is that, if my arg is typed, the type would control, and a Str (or Str()) would be true if it weren't empty, while a Bool or ... what's this

[19:00] <TreyHarris> type with Planned, etc? EnumTypeX argument would respect that Enums truthiness

[19:00] <TreyHarris> But I don't know how to make that happen in the language we have

[19:00] <ugexe> it makes more sense to me for the developer to know they want "False" to be false, and thus $arg = EVAL $arg;

[19:01] <TreyHarris> The current situation where a directory with files "True" and "Bool::True" will access just one of those files twice if the program is called with * is just untenable, though, agreed?

[19:01] <ugexe> if you want to pass types on the command line then you should know what you are doing. otherwise you shouldn't have to worry about what weird strings users might enter that can break your code

[19:02] <ugexe> should know what you are doing (and hence do the EVAL thing)

[19:02] <TreyHarris> ugexe: exactly. That's what I mean by "untenable".

[19:02] <ugexe> yeah agreed on your comment

[19:03] <TreyHarris> I don't have a strong opinion on the fix, but I'll mention that for non-Str cases the current behavior is _very_ nice.

[19:04] <TreyHarris> I find it ironic that this is a very PHP problem :-D

[19:04] *** lucasb joined
[19:04] <ugexe> m: sub MAIN(*@_) { .WHAT.say for @_ }; BEGIN @*ARGS = "False";

[19:05] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «(Bool)␤»

[19:05] <ugexe> so much for Str() :P

[19:05] <TreyHarris> I said that in my email--Str, Str(), untyped, slurpy, they all break

[19:06] <TreyHarris> But, separately, `Str()` is in fact what most users will want when they say Str in a MAIN constraint.

[19:07] <TreyHarris> We can probably deal with that through education rather than special-casing MAIN though

[19:07] <ugexe> its too bad allmorphs don't just automatically coerce to the correct type if its given

[19:07] <TreyHarris> ugexe: yes, if you recall that really startled me a few days ago when it came up on #perl6

[19:10] <TreyHarris> Liskov substitution in Perl6 is... weird. It's pragmatic in 99% of cases, but that other 1% you end having to mess with the MOP or just workaround it.

[19:10] <ugexe> my short term memory isnt great, but im probably subconsciously regurgitating what i read you say

[19:12] <TreyHarris> You can't really treat Perl as a fully-untyped language even if you never mention a type in your own code, but you can't treat it as strongly-typed either even if you always type constrain everything. The liminal spaces are few but surprising.

[19:22] <TreyHarris> lucasb: Is your labeling that 'CLI' correct? 'CLI' refers to the executables' CLI's, right, not 'MAIN' behavior, which is for users creating CLI's. Unless the code to do the one is re-used to do the other in Rakudo (I honestly haven't looked)?

[19:34] <TreyHarris> m: my $x = Kept; put $x.WHAT

[19:34] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «Use of uninitialized value of type PromiseStatus in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤␤  in block <unit> at <tmp> line 1␤»

[19:34] <TreyHarris> Is that correct behavior?

[19:36] <lucasb> TreyHarris: I tagged MAIN sub issues with the CLI label (meaning not only the perl6(1) executable interface itself, but user-programs that uses the MAIN feature)

[19:37] <lucasb> see the others CLI labelled issues: https://github.com/rakudo/rakudo/issues?q=is%3Aissue+is%3Aopen+label%3ACLI

[19:37] <lucasb> the label can be renamed if it's not appropriate

[19:37] *** scovit left
[19:38] <lucasb> hmm, maybe better to split the labels in CLI (only perl6 executable) and MAIN?

[19:39] *** scovit joined
[19:41] <lucasb> anyway, CLI is just an umbrella term to help organize :)

[19:41] <TreyHarris> MAIN seems like a different skill/difficulty set to me

[19:42] <TreyHarris> Which is the usual reason to split labels in GitHub I think

[19:43] *** a3f left
[19:44] <TreyHarris> m: sub f(Str() $x) { put $x }; f($_) for 42, True, Kept, Nil, &sort;

[19:44] <camelia> rakudo-moar 6ba54fb92: OUTPUT: «42␤Use of Nil in string context␤True␤Kept␤␤sort␤  in sub f at <tmp> line 1␤Sub object coerced to string (please use .gist or .perl to do that)␤  in sub f at <tmp> line 1␤»

[19:45] *** a3f joined
[19:45] <TreyHarris> Is ^ all correct? (I am trying to answer ugexe's question in the rakudo issue, not moving a question better asked on #perl6 here.)

[19:47] <ugexe> well, what strings things coerce to isn't in question

[19:49] <leont> This sort of thing is half of why I started writing Getopt::Long

[19:53] <Geth> ¦ rakudo: f03c781423 | tony-o++ | src/core/operators.pm6

[19:53] <Geth> ¦ rakudo: merges class symbols into stub when using require stub:file<>

[19:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f03c781423

[19:53] <Geth> ¦ rakudo: 17c9d88f28 | (Nick Logan)++ (committed using GitHub Web editor) | src/core/operators.pm6

[19:53] <Geth> ¦ rakudo: Merge pull request #2789 from tony-o/master

[19:53] <Geth> ¦ rakudo: 

[19:53] <Geth> ¦ rakudo: merges class symbols into stub when using require stub:file<>

[19:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/17c9d88f28

[19:54] <Geth> ¦ roast: 5ff9d379a9 | tony-o++ | 2 files

[19:54] <Geth> ¦ roast: add tests for require:file<> containing classes

[19:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5ff9d379a9

[19:54] <Geth> ¦ roast: 492fa32bb7 | tony-o++ | S11-modules/require.t

[19:54] <Geth> ¦ roast: simplify require stub:file test, rescope and more clearly name $class-name to $class-path

[19:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/492fa32bb7

[19:54] <Geth> ¦ roast: b9364f9247 | (Nick Logan)++ (committed using GitHub Web editor) | 2 files

[19:54] <Geth> ¦ roast: Merge pull request #522 from tony-o/master

[19:54] <Geth> ¦ roast: 

[19:54] <Geth> ¦ roast: add tests for require:file<> containing classes

[19:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b9364f9247

[21:30] *** vrurg left
[21:59] <lizmat> gfldex: re https://gfldex.wordpress.com/2019/03/25/i-like-rakudo-100x/

[21:59] <lizmat> s/peace of code/piece of code/

