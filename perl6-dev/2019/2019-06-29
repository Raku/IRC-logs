[00:01] <vrurg> timotimo: only have what is enough for nqp.moarvm to be loaded and run.

[00:01] <vrurg> *ran

[00:01] <timotimo> throw out all of nativecall and the reprs it has

[00:01] <timotimo> nqp doesn't use native refs either i think

[00:01] <timotimo> not sure how much you can save that way

[00:02] <vrurg> That's not a big deal to spare some space. After all, who would be worried about downloading 5-10MB? The main point is anyway to have a place to fetch it for a wide range of OSes and hardware architechtures.

[00:03] <vrurg> That'd be a task to build 'em all and keep up to date and available 24/7.

[00:03] <timotimo> our stage0 blobs have made the nqp repo rather bloaty, in my opinion

[00:05] <patrickb83> moar stage0 ~3mb, jvm stage0 ~1mb

[00:06] <timotimo> but we rebootstrapped so often :(

[00:06] <timotimo> before moar and jvm there were also a bunch of parrot stage0s

[00:06] <patrickb83> True. Every rebootstrap, githistorysize++

[00:08] <vrurg> timotimo: BTW, as you're still here. :) Can you tell me how to get the outer of a QAST::Block? ctxouter doesn't like it. ;)

[00:08] <timotimo> at the point you have a Context, you usually don't have any QAST any more

[00:08] <timotimo> i may be misunderstanding the question

[00:09] <vrurg> That's reverse situation. A loaded setting is set as the outer to $*UNIT_OUTER which is a QAST::Block. 

[00:10] <timotimo> qast nodes don't have a pointer to what contains them

[00:10] <timotimo> not in general, anyway

[00:10] <vrurg> I'm trying to find out why find_symbol doesn't find new symbols defined in CORE.e which are not defined in CORE. 

[00:11] <timotimo> have you ever tried the moar debug remote thingie?

[00:12] <patrickb83> But I think using Lua isn't such a bad idea actually. It's yet-another-language‚Ñ¢, true. But I'm not sure what makes the build process more complex, having and supporting a minimoar or having a build system in a different language...

[00:12] <vrurg> timotimo: Nah. I'm mad about command line debuggers. My hope is that Comma will work for me at some point.

[00:12] <vrurg> Until then I'm stuck with debug prints. :)

[00:12] <timotimo> "mad about command line debuggers"? that sounds like you like them, rather than hate them

[00:13] <patrickb83> Off to bed for real now. o/

[00:13] <vrurg> Pardon my English... Hate them, for sure.

[00:13] <vrurg> patrickb83: o/

[00:13] *** patrickb83 left
[00:14] <vrurg> Anyway... World.load_setting sets up a fixup with nqp::forceouterctx($*UNIT_OUTER, $setting). 

[00:15] <vrurg> So, somehow I must be able to pull it back with ctxouter.

[00:35] *** squashable6 left
[00:37] <vrurg> afk. o/

[00:40] *** squashable6 joined
[00:40] *** ChanServ sets mode: +v squashable6

[01:01] *** pamplemousse left
[01:58] *** Kaiepi left
[01:59] *** Kaiepi joined
[02:05] *** Kaiepi left
[02:05] *** Kaiepi joined
[03:42] *** evalable6 left
[03:42] *** squashable6 left
[03:42] *** committable6 joined
[03:42] *** ChanServ sets mode: +v committable6

[03:42] *** releasable6 joined
[03:42] *** ChanServ sets mode: +v releasable6

[03:43] *** notable6 joined
[03:43] *** shareable6 joined
[03:43] *** coverable6 joined
[03:43] *** ChanServ sets mode: +v coverable6

[03:43] *** unicodable6 joined
[03:43] *** ChanServ sets mode: +v unicodable6

[03:44] *** squashable6 joined
[03:45] *** bloatable6 joined
[03:45] *** ChanServ sets mode: +v bloatable6

[03:46] *** evalable6 joined
[03:46] *** ChanServ sets mode: +v evalable6

[03:46] *** greppable6 joined
[03:46] *** ChanServ sets mode: +v greppable6

[03:46] *** quotable6 joined
[03:46] *** undersightable6 joined
[03:46] *** statisfiable6 joined
[03:46] *** benchable6 joined
[03:46] *** ChanServ sets mode: +v benchable6

[03:46] *** bisectable6 joined
[03:47] *** nativecallable6 joined
[03:47] *** reportable6 joined
[03:47] *** ChanServ sets mode: +v reportable6

[04:47] *** evalable6 left
[04:51] *** evalable6 joined
[04:51] *** ChanServ sets mode: +v evalable6

[06:20] *** ufobat_ joined
[06:24] *** ufobat left
[07:54] *** titsuki joined
[12:26] <lizmat> bisectable6: $_ = "3"; my regex decimal { \d }; say &decimal.Bool

[12:26] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=2dc68c9) because on both starting points the exit code is 0

[12:27] <bisectable6> lizmat, bisect log: https://gist.github.com/13ce8b2a7cf5572c0c91a3700111012f

[12:27] <bisectable6> lizmat, (2019-01-28) https://github.com/rakudo/rakudo/commit/8ef7c15ed5bff6674270dfe209962aaafd0ac825

[13:17] *** lucasb joined
[13:20] *** hankache joined
[13:58] <dogbert11> m: my @a = [1,1],[2,2],[3,3]; dd @a; @a.splice: 0, 2, $[4,4]; dd @a

[13:58] <camelia> rakudo-moar 2dc68c922: OUTPUT: ¬´Array @a = [[1, 1], [2, 2], [3, 3]]‚ê§Array @a = [4, 4, [3, 3]]‚ê§¬ª

[14:40] *** hankache left
[14:41] *** AlexDaniel left
[14:42] *** AlexDaniel joined
[15:16] <AlexDaniel> kawaii: so, blin results?

[15:16] <AlexDaniel> it should be clean but still

[15:20] <lucasb> a release approaches? yay

[15:21] <dogbert11> AlexDaniel: note that the bug just reported is almost a year old

[15:24] <AlexDaniel> lucasb: not exactly, this needs to be fixed: https://github.com/rakudo/rakudo/issues/3000

[15:31] <lizmat> bisectable6: (when %()<>:exists { ... })

[15:31] <bisectable6> lizmat, Bisecting by exit code (old=2015.12 new=2dc68c9). Old exit code: 0

[15:31] <bisectable6> lizmat, bisect log: https://gist.github.com/425b0eccf9cf0622b86c2b9c629e2f24

[15:31] <bisectable6> lizmat, (2018-05-22) https://github.com/rakudo/rakudo/commit/91359141fb7501636b073ccaf6fb6598dc273bec

[15:31] <lizmat> ah, this got merged reve

[15:32] <lizmat> *recently, no ?

[15:33] <AlexDaniel> lizmat: reverted? No

[15:33] <AlexDaniel> lizmat: I considered reverting it but that feels so wrong given how many issues it resolves

[15:34] <lizmat> yeah...

[15:34] <AlexDaniel> lizmat: I looked at the code but I just don't get it. See https://github.com/rakudo/rakudo/issues/3000#issuecomment-506779356

[15:35] <AlexDaniel> what's $*FAKE_INFIX_FOUND and why is it even set there

[15:35] <AlexDaniel> https://github.com/rakudo/rakudo/commit/91359141fb7501636b073ccaf6fb6598dc273bec#diff-deae5f68054ef8116f04d6cb78bc4395R6442

[15:35] <lizmat> all I know is that adverb parsing is fraught with hacks, because it basically violates the "only parse once" principle

[15:38] <AlexDaniel> I wish skids was around

[15:39] <AlexDaniel> c: 2019.03.1,HEAD say (if %(a => ‚Äòb‚Äô)<b>:exists { 42 })

[15:39] <committable6> AlexDaniel, ¬¶2019.03.1: ¬´()‚ê§¬ª ¬¶HEAD(2dc68c9): ¬´===SORRY!===‚ê§internal problem: parser did not give circumfix an EXPR‚ê§ ¬´exit code = 1¬ª¬ª

[15:39] <AlexDaniel> c: 2019.03.1,HEAD say (if %(a => ‚Äòb‚Äô)<a>:exists { 42 })

[15:39] <committable6> AlexDaniel, ¬¶2019.03.1: ¬´42‚ê§¬ª ¬¶HEAD(2dc68c9): ¬´===SORRY!===‚ê§internal problem: parser did not give circumfix an EXPR‚ê§ ¬´exit code = 1¬ª¬ª

[15:39] <AlexDaniel> lizmat: ‚Üë it's not likely writing something like this is wrong

[15:39] <AlexDaniel> in fact I'd say it's relatively common, I do that stuff sometimes

[15:40] <AlexDaniel> and there's one module broken because of it

[15:40] <lizmat> yeah... I'm not saying it's not a blocker  :-)

[15:40] <AlexDaniel> I stared at it for quite a bit and I have so many questions‚Ä¶ :)

[15:40] <AlexDaniel> TimToady: maybe you know?

[15:42] <Kaiepi> how do i get nqp to install after making a breaking change to serialization?

[15:44] <Kaiepi> trying to build it throws "Unhandled exception: Unsupported serialization format version 21 (current version is 22)" because of the bootstrap files but i can't build the bootstrap files because nqp requires them before i can rebuild them

[15:45] <lizmat> Kaiepi: timotimo might know

[15:45] <lizmat> and jnthn 

[15:48] *** pamplemousse joined
[15:53] <timotimo> moar always tries to support more than one serialization version

[15:54] <timotimo> so you'll just‚Ñ¢ put an if/else for the bytecode version around your changes

[15:54] <AlexDaniel> lizmat: so I tried removing nqp::die and adding `if nqp::defined($EXPR) {` instead

[15:54] <timotimo> and rebootstrapping just to up the bytecode version is IMO not necessary

[15:54] <AlexDaniel> lizmat: it does ‚Äúwork‚Äù

[15:54] <AlexDaniel> as in it does make the golf work, I guess

[15:54] <timotimo> just wait for a rebootstrap that's going to happen anyway, and then increase the minimum version supported

[15:55] <AlexDaniel> running spectest now but I wouldn't be surprised if it's clean

[15:55] *** hankache joined
[15:55] <AlexDaniel> lizmat: but if my random understanding that $*FAKE_INFIX_FOUND is set when it shouldn't be is right, then it could cause all kinds of weird stuff‚Ä¶

[15:55] <AlexDaniel> like adverbs being applied to random stuff

[15:55] <lizmat> how does your fix spectest ?

[15:55] <timotimo> that's already how they work to most people :P

[15:56] <AlexDaniel> lizmat: waiting for that

[15:57] <AlexDaniel> lizmat: but knowing our spectests, I'm pretty sure they wouldn't cover a case where adverbs are applied in some weird nested manner

[15:57] <lizmat> I tried to change it to // last

[15:57] <lizmat> but there seems to be another thing borked:

[15:57] <lizmat> $ perl6 t/spec/S06-operator-overloading/imported-subs.t

[15:57] <lizmat> ===SORRY!===

[15:57] <lizmat> Missing or wrong version of dependency 'gen/moar/Perl6-Actions.nqp' (from '/Users/liz/Github/rakudo.moar/t/spec/packages/Exportops/lib/Exportops.pm6 (Exportops)

[15:57] <lizmat> grrr

[15:57] * lizmat runs a reconfig

[15:59] <lizmat> my fix with // last seems to spectest cleanly

[16:00] * lizmat runs a full spectest to be sure

[16:04] <lizmat> yeah, spectests clean...

[16:04] <lizmat> MessagePack installs ok with this patch as well

[16:07] *** AlexDaniel left
[16:07] <Geth> ¬¶ rakudo: c227693a66 | (Elizabeth Mattijsen)++ | src/Perl6/Actions.nqp

[16:07] <Geth> ¬¶ rakudo: Probably temporary fix for R#3000

[16:07] <Geth> ¬¶ rakudo: 

[16:07] <Geth> ¬¶ rakudo: Somehow the empty outer () or [] is being included when it shouldn't.

[16:07] <Geth> ¬¶ rakudo: Instead of assuming some internal problem, just assume we're done.

[16:07] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/c227693a66

[16:17] *** hankache left
[16:31] *** AlexDaniel joined
[16:32] <AlexDaniel> lizmat: yeah

[16:32] <AlexDaniel> lizmat: maybe it'd be better to do `next` there instead of last

[16:33] <AlexDaniel> say you have something like `(); foo<>:bar` or something

[16:33] <lizmat> well, the error seems to be related to the outer set of parens

[16:33] <AlexDaniel> yeah but that'd be a single semi, right?

[16:34] <lizmat> yep

[16:34] <AlexDaniel> well, I honestly don't get that code whatsoever‚Ä¶

[16:34] <lizmat> there are two places where this error could occur: with () as outer parens, and with [] as outer parens

[16:35] <lizmat> so it feels to me that skids thought: what would happen if... and decided to do an nqp::die

[16:36] <AlexDaniel> yes but if you're doing `last` then you're preventing proper processing in next semis

[16:36] <lizmat> I don't think there are any next semis?

[16:36] <lizmat> that's the whole problem ?

[16:37] <AlexDaniel> lizmat: no, the repeat until is basically a foreach for every semi

[16:37] <AlexDaniel> for every semi, an error can occur

[16:38] <AlexDaniel> m: say (if %(a => ‚Äòb‚Äô)<a>:exists { 42 }; say 42)

[16:38] <camelia> rakudo-moar c227693a6: OUTPUT: ¬´===SORRY!===‚ê§QAST::Block with cuid 1 has not appeared‚ê§¬ª

[16:38] <AlexDaniel> c: HEAD^^^ say (if %(a => ‚Äòb‚Äô)<a>:exists { 42 }; say 42)

[16:38] <committable6> AlexDaniel, ¬¶HEAD^^^: ¬´===SORRY!===‚ê§internal problem: parser did not give circumfix an EXPR‚ê§ ¬´exit code = 1¬ª¬ª

[16:38] <AlexDaniel> uhhh‚Ä¶

[16:38] <AlexDaniel> c: 2019.03.1 say (if %(a => ‚Äòb‚Äô)<a>:exists { 42 }; say 42)

[16:38] <committable6> AlexDaniel, ¬¶2019.03.1: ¬´42‚ê§(42 True)‚ê§¬ª

[16:38] <AlexDaniel> goddamit

[16:39] <lizmat> bisectable6: say (if %(a => ‚Äòb‚Äô)<a>:exists { 42 }; say 42)

[16:39] <bisectable6> lizmat, Bisecting by exit code (old=2015.12 new=c227693). Old exit code: 0

[16:39] <AlexDaniel> lizmat: ‚Üë in that code there are more than one semi

[16:39] <bisectable6> lizmat, bisect log: https://gist.github.com/4c8dcf9c6153eff908e3c124c919e326

[16:39] <bisectable6> lizmat, (2018-05-22) https://github.com/rakudo/rakudo/commit/91359141fb7501636b073ccaf6fb6598dc273bec

[16:39] <lizmat> bisects to the same,... o

[16:39] <lizmat> k lemme test with "next"

[16:40] <AlexDaniel> bisect: HEAD^^^^^^^^^^^^^,HEAD say (if %(a => ‚Äòb‚Äô)<a>:exists { 42 }; say 42)

[16:40] <bisectable6> AlexDaniel, Using old=HEAD^^^^^^^^^^^^^ new=HEAD in an attempt to DWIM

[16:40] <bisectable6> AlexDaniel, Bisecting by output (old=HEAD^^^^^^^^^^^^^ new=c227693) because on both starting points the exit code is 1

[16:40] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/2c5e1172ea75c381610dc28f83f3caaa

[16:40] <bisectable6> AlexDaniel, (2019-06-29) https://github.com/rakudo/rakudo/commit/c227693a660200cd2bda42dd28a3946a7d812b01

[16:40] <AlexDaniel> lizmat: or your commit, depending on the range :)

[16:40] <AlexDaniel> cuz the error changed

[16:40] <AlexDaniel> lizmat: it can't be exactly next because of `$semi++;`

[16:41] <AlexDaniel> lizmat: just make sure to increment that‚Ä¶

[16:41] <AlexDaniel> but if my understanding is correct, you'd still get `QAST::Block with cuid 1 has not appeared`

[16:41] <AlexDaniel> wtf is cuid

[16:41] <AlexDaniel> this stuff drives me nuts and I want to get rid of all of it

[16:42] <AlexDaniel> is it ‚Äúcursor id‚Äù or something? why not say cursor id then

[16:42] <AlexDaniel> we're moving into the right direction though

[16:42] <AlexDaniel> LHF is now ‚Äúgood first issue‚Äù, ‚Äúnom‚Äù is no longer a thing and now it's just ‚Äúmaster‚Äù, etc.

[16:43] <AlexDaniel> all these unnecessary terms should just die, IMO

[16:43] <lizmat> cuid is compilation unit id  I believe

[16:43] <lizmat> makes sense in this context  :-)

[16:44] <AlexDaniel> also I noticed that we have no `flapper` label on github, I think we had it on RT or somewhere else?

[16:45] <lizmat> hmmm... turning it into a { ++semi, next }   makes it hang on say (if %(a => ‚Äòb‚Äô)<a>:exists { 42 }; say 42)

[16:45] <AlexDaniel> so I added a label, called it ‚Äúintermittent‚Äù because nobody outside the bubble knows what a flapper is

[16:46] <AlexDaniel> but I'll go for a walk now instead of continuing the rant :)

[16:46] <lizmat> :-)

[16:51] *** pamplemousse left
[17:46] *** pamplemousse joined
[17:55] <Kaiepi> figured out how to get nqp installed, i just needed to split up the breaking change into smaller pieces and rebuild bootstrap 4 or 5 times, gradually adding the smaller changes

[18:16] *** tyilanmenyn joined
[18:20] *** tyilanmenyn left
[18:20] <timotimo> noooooo

[18:22] <timotimo> what changes can these be that would require multiple rebootstraps? :o

[18:25] *** tyilanmenyn joined
[18:41] *** tyilanmenyn left
[18:41] *** tyilanmenyn joined
[18:43] *** tyilanmenyn left
[18:44] *** tyilanmenyn joined
[19:02] *** tyilanmenyn left
[19:06] *** tyilanmenyn joined
[19:13] *** hankache joined
[19:18] *** hankache left
[19:23] *** tyilanmenyn left
[19:24] *** tyilanmenyn joined
[19:39] *** pamplemousse left
[19:39] *** pamplemousse joined
[19:46] *** lucasb left
[19:51] *** pamplemousse left
[19:51] *** pamplemousse joined
[19:56] *** patrickb joined
[20:05] *** pamplemousse left
[20:05] *** pamplemousse joined
[20:22] *** tyilanmenyn left
[20:34] *** pamplemousse_ joined
[20:37] *** pamplemousse left
[20:44] <lizmat> m: dd (:a(2) :b(3) :c(4))

[20:44] <camelia> rakudo-moar c227693a6: OUTPUT: ¬´(:a(2), :b(3), :c(4))‚ê§¬ª

[20:44] <patrickb> o/

[20:44] <lizmat> hmmm.... I'm surprised that is actually legal

[20:44] <lizmat> AlexDaniel:  ^^

[20:44] <timotimo> yeah it's legal to leave out the commas

[20:45] <timotimo> m: dd (:a :b :c)

[20:45] <camelia> rakudo-moar c227693a6: OUTPUT: ¬´(:a, :b, :c)‚ê§¬ª

[20:45] <patrickb> vrurg: I'd like to access the @moar::whatever@ variables in nqp\tools\templates\moar\Makefile.in but they seem not to be defined. Do you have a hint on where I have to look?

[20:46] <vrurg> patrickb: is it being expanded under for_backends context?

[20:47] <patrickb> Dunno. :-)  I'll look

[20:47] <vrurg> Actually, there is not config variable moar::whatever in nqp --show-config

[20:47] <vrurg> *no config

[20:47] <vrurg> Ah, gotcha! Sorry.

[20:47] <patrickb> not literally moar::whatever, but all the moar::* variables...

[20:48] <vrurg> Ok, by default Makefile.in templates from backend-specific dirs are expanded under for_backends, unless something has been changed.

[20:49] <patrickb> I need to compile stuff in nqp ( the runners are gonna be binaries soon ) and I need the compiler stuff e.g. moar::ccswitch 

[20:49] <vrurg> And it is currently expanding moar::cc, moar::ld, etc. So, check the variable name if it's not expanding 

[20:49] <patrickb> hm, I copied the fragment from the rakudo Makefile.in...

[20:49] <vrurg> Oops, nqp... missed that

[20:50] <patrickb> @moar::ccswitch@ @moar::cflags@ @moar::ccout@ @moar::obj@ all don't work

[20:51] <vrurg> And they shouldn't they were never needed previously.

[20:52] <vrurg> That's why my "oops". I have re-checked it.

[20:52] <patrickb> :-(  I do now. I'm in progress of replacing all the .bat runners in nqp with binaries.

[20:52] <patrickb> Any reason why I shouldn't change it, so I have them available?

[20:55] <vrurg> No reason, you can do it. I'd be away for some time.

[20:55] <patrickb> quick pointer where I should look?

[20:57] <AlexDaniel> lizmat: it was meant to be legal, yes

[20:58] <AlexDaniel> lizmat: it didn't work in many places though

[20:58] <lizmat> AlexDaniel: ok, gotcha, almost done with a real fix for #3000

[20:58] <AlexDaniel> m: dd (:a(2):b(3):c(4))

[20:58] <camelia> rakudo-moar c227693a6: OUTPUT: ¬´(:a(2), :b(3), :c(4))‚ê§¬ª

[20:58] <AlexDaniel> m: dd (:2a:3b3:4c)

[20:58] <camelia> rakudo-moar c227693a6: OUTPUT: ¬´(:a(2), :b3(3), :c(4))‚ê§¬ª

[20:58] <AlexDaniel> m: dd (:2a:3b:4c)

[20:58] <camelia> rakudo-moar c227693a6: OUTPUT: ¬´(:a(2), :b(3), :c(4))‚ê§¬ª

[21:06] <vrurg> patrickb: no, unfortunately. And the worst part is that I'm busy now and can't recall where the nqp config is built!

[21:07] *** HarmtH_ joined
[21:13] *** pamplemousse_ left
[21:14] <vrurg> patrickb: I have to leave for 1-2hrs. Briefly, to get moar::* you would need bootstrapped nqp. For that you surely need to have moar ready. If you get into a problem with that I'd do it ASAP, but most likely on Monday.

[21:16] <vrurg> BTW, if you do it: backend-dependen variables are installed in impls key. Look for {impls}{$backend}{config} or alikes.

[21:16] * vrurg is afk

[21:30] *** tyilanmenyn joined
[21:37] *** tyilanmenyn is now known as tyil

[21:39] <lizmat> hmmm... looks like we lost Geth again  :(

[21:40] * lizmat just pushed https://github.com/rakudo/rakudo/commit/a26e95bab41e7b787

[21:40] <lizmat> A more complete solution to #3000

[21:44] <lizmat> AlexDaniel: ^^

[21:45] <AlexDaniel> lizmat: looks cleaner also

[21:45] <lizmat> yeah, there was a lot of code duplication

[21:45] <lizmat> I guess the underlying question is: why are some EXPR's undef

[21:46] <lizmat> but this is at least better maintainable, and if we find the underlying cause

[21:46] <lizmat> then that piece of code that basically does a grep, can be removed

[21:57] * lizmat calls it a day&

[21:58] <timotimo> so the day has come to an &

[22:01] <AlexDaniel> lizmat: thank you!

[22:01] <AlexDaniel> lizmat: it's not that the expr is undef, it's just that the AST is different

[22:02] <AlexDaniel> lizmat: see https://github.com/rakudo/rakudo/issues/3000#issuecomment-506779356

[22:06] *** pamplemousse_ joined
[22:16] *** pamplemousse_ left
[23:07] *** vrurg left
[23:08] *** vrurg joined
[23:15] *** vrurg left
[23:18] *** vrurg joined
[23:26] <vrurg> .tell patrickb Tell please if you need me to implement access for moar::*.

[23:26] <yoleaux> vrurg: I'll pass your message to patrickb.

[23:26] <patrickb> vrurg: I'm currently looking into this. But given you have time I'd suspect you'd be faster.

[23:26] <yoleaux> 23:26Z <vrurg> patrickb: Tell please if you need me to implement access for moar::*.

[23:27] <vrurg> patrickb: not today, unfortunately. :(

[23:27] <vrurg> And quite unlikely tomorrow (big grocery shopping day, hate them...)

[23:27] <patrickb> vrurg: I'll see how far I get. If I'm stuck I'll let you know.

[23:28] <vrurg> Rakudo.pm should be pretty helpful with this. It sets these vars in gen_nqp.

[23:29] <patrickb> Yeah found that. It calls nqp --show-config

[23:29] <patrickb> the stage0 works with that param too

[23:29] <patrickb> the nqp::* stuff is wrong (stage0 stuff) but the moar::* vars should be fine

[23:32] <vrurg> That's what I was expecting. We don't need nqp:: at this point anyway ‚Äì we already know it because we set it. ;)

[23:32] <patrickb> Yup

[23:44] *** patrickb left
[23:45] *** patrickb joined
