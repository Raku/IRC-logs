[00:00] *** lizmat joined
[00:44] <MasterDuke> .ask jnthn if you've got some spare time, any thoughts on https://github.com/perl6/nqp/pull/518 and https://github.com/rakudo/rakudo/pull/2670 ?

[00:44] <yoleaux> MasterDuke: I'll pass your message to jnthn.

[00:47] <Geth> ¦ rakudo: 31e534cf4d | (Daniel Green)++ | src/Perl6/Compiler.nqp

[00:47] <Geth> ¦ rakudo: Update help text for reworked profiling options

[00:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/31e534cf4d

[01:21] *** AlexDaniel joined
[04:37] *** nacyro joined
[05:13] *** vrurg left
[05:13] *** AlexDaniel left
[06:11] *** nacyro left
[06:35] *** ufobat joined
[06:36] *** lizmat left
[07:43] *** AlexDaniel joined
[07:50] *** lizmat joined
[07:54] *** robertle left
[07:55] *** robertle joined
[08:06] <lizmat> .

[08:06] <yoleaux> 18 May 2019 11:33Z <sena_kun> lizmat: thanks for merging! reminding that https://github.com/perl6/nqp/pull/540 should be merged too, for https://github.com/rakudo/rakudo/pull/2907 to pass all tests. :)

[08:47] *** lizmat left
[08:49] <[Tux]> Rakudo version 2019.03.1-409-g31e534cf4 - MoarVM version 2019.05-11-g248e2980a

[08:49] <[Tux]> csv-test-xs-20      0.425 -  0.448

[08:49] <[Tux]> csv-ip5xs           0.709 -  0.716

[08:49] <[Tux]> test-t --race       0.783 -  0.810

[08:49] <[Tux]> test-t              1.701 -  1.794

[08:49] <[Tux]> csv-ip5xs-20        5.948 -  6.008

[08:49] <[Tux]> test                7.618 -  7.852

[08:49] <[Tux]> test-t-20 --race    9.517 -  9.856

[08:49] <[Tux]> csv-parser         21.747 - 21.762

[08:49] <[Tux]> test-t-20          27.908 - 28.385

[12:10] *** dogbert11 joined
[12:13] *** dogbert17 left
[12:13] *** brrt joined
[12:35] *** ufobat left
[13:06] *** brrt left
[13:40] *** brrt joined
[13:58] <Kaiepi> AH HAH

[13:58] <Kaiepi> bastille% ./perl6 test.p6

[13:58] <Kaiepi> Feed:   avg. 0.0003595710510049321

[13:58] <Kaiepi> Method: avg. 0.001721516886617255

[13:58] <Kaiepi> No ops: avg. 0.0022695014322236338

[13:59] <Kaiepi> I FIGURED OUT HOW TO MAKE PARALLELIZED FEED OPERATORS RUN FAST

[13:59] <timotimo> ooooh

[13:59] <timotimo> hey, you don't happen to know stuff about C macros? :)

[14:00] <Kaiepi> a little

[14:00] <timotimo> cool. let me bounce this off of you

[14:00] <timotimo> i turned all instances of (MVMVeryLongTypeName *)MVM_malloc(formula * sizeof(MVMVeryLongTypeName)); into MVM_MALLOCOBJ(formula, MVMVeryLongTypeName);

[14:01] <timotimo> in the hopes of being able to put a DTrace point into MVM_MALLOCOBJ that has the type name as a string

[14:01] <brrt> but why have the cast to (MVMVeryLongTypeName * ) at all, we're not compiling C++?

[14:01] <timotimo> i don't know how to properly make the macro expand to something that first has a DTRACE_PROBE2(...); and then the MVM_malloc(...);

[14:01] <timotimo> brrt: *shrug*, it was there in some places, but not in all of them

[14:02] <Kaiepi> i've never used dtrace before

[14:03] <timotimo> i don't think that's important

[14:03] <timotimo> the problem comes from gcc complaining that there has to be an expression before "do", which seems to be part of the DTRACE_PROBE2 macro. i assume it does the do { ... } while (0) thing

[14:04] <timotimo> actually, perhaps i am actually forced to put the dtrace probe in just one spot

[14:04] <timotimo> so it'll have to be inside a function, rather than inside the macro expansion

[14:05] <brrt> I don't think there can be an expression before do

[14:05] <brrt> int x = do { ... } while (0); is valid perl maybe, not C

[14:05] <brrt> idk

[14:05] * brrt afk

[14:05] *** brrt left
[14:08] <timotimo> now all i need to figure out is how to get a string from the type_name

[14:11] <timotimo> ah, it's just #type_name

[14:53] <Kaiepi> what is the purpose of WANTED in Perl6::Actions?

[14:55] <timotimo> that powers the "useless use of blah in void context" stuff

[14:59] <Kaiepi> i'm not sure what you mean

[14:59] <Kaiepi> like "useless use of x in sink context"?

[15:00] <b2gills> m: 1;

[15:00] <camelia> rakudo-moar a643b8be1: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 1 in sink context (line 1)␤»

[15:00] <b2gills> The 1 above is not WANTED

[15:08] <Kaiepi> ahh

[15:08] <Kaiepi> ok

[15:09] <Kaiepi> i don't need to worry about it for the feed operators pullreq then, i already have everything that's supposed to be wanted wanted

[15:55] *** ufobat joined
[16:33] <ugexe> $output := $output.cache -- Kaiepi: should this be automatic, or should the user have to apply eager/cache themselves?

[16:35] <ugexe> i can't think of a good reason for it *not* to be automatic, but i feel like there is probably a reason none-the-less (even if its not very good)

[16:36] <Kaiepi> the spec mentions something about eager, lemme check

[16:40] <ugexe> my @squares <== eager map { $_ ** 2 } <== 1...*; vs my @squares <== map { $_ ** 2 } <== 1...*;

[16:56] <Kaiepi> looks like this needs more work, it's failing S03-feeds/basic.t

[17:10] *** evalable6 left
[17:11] *** evalable6 joined
[17:11] *** ChanServ sets mode: +v evalable6

[17:25] *** ggoebel joined
[17:58] *** ggoebel left
[18:25] *** vrurg joined
[18:46] <nine> Turning the SQL BNF grammar into an SQL parser for Perl 6 runs into surprising issues. Like bugs in the actual BNF grammar or that rakudo scales terribly when compiling simple but large grammars and 32 GiB of RAM are just not enough...

[18:48] <ugexe> does BNF have anything that translate to |? I thought they only did ||

[18:53] <timotimo> holy ...

[18:55] <nine> Note that Grammar::ABNF actually creates a Grammar object and succeeds by compiling each token individually and stiching them together. That's also pretty fast.

[18:57] <timotimo> that memory usage though

[18:57] <timotimo> any clue what does that?

[18:58] <nine> none

[18:59] <timotimo> well, there's this tool i'm supposed to be working on

[18:59] <timotimo> just a few layers of yaks on top of it at the moment

[18:59] <nine> Splitting the grammar into a couple of roles makes it compile pretty fast

[18:59] <timotimo> oh

[18:59] <timotimo> i wonder if every time you add a single thing it'll recalculate and reoptimize all the NFAs

[19:00] <nine> Definitely feels like O(n^2). I'm pretty sure it's no individual part of the grammar

[19:07] <nine> Oh, apparently I did something wrong in my earlier test. Splitting it doesn't actually help. Even the empty grammar that just does the roles with the individual parts compiles forever

[19:07] <MasterDuke> that's something i'd tried to start on (and even the little ways i got required extensive hand-holding from jnthn++), but was making such slow process i got distracted by other stuff

[19:11] <timotimo> nine: you could get a "sampling profile" from the program by just sending ctrl-c to the program at regular intervals and calling MVM_dump_backtrace(tc) inside of gdb :)

[19:20] <nine> timotimo: always looks like https://gist.github.com/niner/b21b7691ade0b7559e75665cb496a165

[19:20] <timotimo> wow, ouch

[19:21] <timotimo> that's pretty deep

[19:25] <nine> Why does it work with the stiched together tokens?

[19:26] <timotimo> how do you mean?

[19:27] <nine> https://github.com/tadzik/Grammar-BNF/blob/master/lib/Grammar/ABNF.pm#L257

[19:28] <nine> Btw speaking of suprising issues: did I mention that Grammar::ABNF only succeeds in parsing the BNF if Grammar::Tracer is included?

[19:28] <timotimo> oh no

[19:43] *** brrt joined
[19:45] <nine> I wonder if there is any way for me to continue if rakudo is just not good enough for compiling deeply nested grammars?

[19:45] <timotimo> i'd be interested to see what these NFAs look like that it's trying to merge there

[19:46] <timotimo> clearly things are kind of deeply nested? maybe?

[19:46] <timotimo> perhaps you need to terminate some declarative prefixes early :)

[19:48] <nine> timotimo: https://github.com/niner/SQL-Grammar/blob/master/generated.pl6

[19:48] <timotimo> that is pretty big, but nothing compared to the perl6 grammar

[19:49] <timotimo> token window_frame_exclusion { 'EXCLUDE' 'CURRENT' 'ROW' | 'EXCLUDE' 'GROUP' | 'EXCLUDE' 'TIES' | 'EXCLUDE' 'NO' 'OTHERS' }

[19:49] <timotimo> that seems wrong :D

[19:49] <timotimo> no spaces allowed in between

[19:49] <timotimo> but that's for another time

[19:49] <ugexe> change all the | to ||

[19:49] <brrt> nine: there's more than one possible SQL grammar...

[19:57] <nine> ugexe: then it parses in seconds! But...why?

[19:57] <ugexe> because BNF was not written to try and parse every alterations and find the longest match. it is ordered

[19:57] <timotimo> because | isn't supported in the NFA

[19:58] <timotimo> so no nfa will be built

[19:58] <timotimo> otherwise if you only have | you'll be getting one NFA spanning the entire grammar

[19:59] <timotimo> and of course every token will also have its own little subset of the whole, but basically a copy of it

[20:05] <nine> Of course, it doesn't yet finish parsing even the simplest of statements. Probably because of white space treatment

[20:06] <timotimo> yeah

[20:06] <timotimo> just remove all whitespace from the input before parsing :D

[20:06] <nine> And because the BNF makes no distinction between * and + repetition. Using * everywhere makes it match too often

[20:09] *** ufobat_ joined
[20:09] *** brrt left
[20:13] *** ufobat left
[20:24] <nine> How can I dump the string to be matched in a grammar rule?

[20:25] <ugexe> `<foo> {say $/}`?

[20:26] <ugexe> n/m, the string to be matched against, not the match

[20:28] <timotimo> that'd be $/.orig

[20:28] <timotimo> or .target

[20:31] <nine> .orig and .target seem to be the whole string

[20:32] <nine> substr($/.target, $/.pos) is what I'm after

[20:33] <nine> So why would "customers" not match "\w"?

[20:35] <nine> Ah, it must be token identifier_start not rule

[20:38] <nine> Success!

[20:44] <timotimo> why not .Str?

[20:44] <timotimo> oh, you're looking for starting at $/.pos to the end

[20:50] *** brrt joined
[21:10] <Kaiepi> ok i'm having another problem with qast

[21:11] <Kaiepi> how do i get the compile-time value of a variable from another statement?

[21:12] <Kaiepi> like with "my @a = 1,2,3; @a ==> map { $_ ** 2 } ==> my @b;" i want to get value assigned to @a in the first statement from the second one

[21:12] <Kaiepi> from what i've tried so far all i can manage to get is an empty array

[21:14] <timotimo> oof

[21:14] <timotimo> you can get that at the earliest in the optimizer i think

[21:15] <timotimo> what do you need it for?

[21:18] <Kaiepi> i need it to pass to RI.EVALUATE-FEED

[21:20] <timotimo> you want to get Array.new(1, 2, 3)?

[21:22] <timotimo> m: my @a = 1, 2, 3; say "using @a[]"; sub infix:<,>($a, $b) { say "lol nope" }

[21:22] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling infix:<,>(Int, Int, Int) will never work with declared signature ($a, $b)␤at <tmp>:1␤------> 3my @a = 1, 27⏏5, 3; say "using @a[]"; sub infix:<,>($a,␤»

[21:22] <timotimo> m: my @a = 1, 2, 3; say "using @a[]"; sub infix:<,>(*@a) { say "lol nope" }

[21:22] <camelia> rakudo-moar a643b8be1: OUTPUT: «lol nope␤using True␤»

[21:22] <timotimo> Kaiepi: ^- this will frustrate your attempt to get the data before the optimizer stage

[21:24] <Kaiepi> argh

[21:35] *** brrt left
[21:39] *** lizmat joined
[22:57] *** vrurg left
[22:57] *** gfldex left
[22:58] *** gfldex joined
