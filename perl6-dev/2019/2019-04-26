[00:13] *** epony left
[00:28] *** epony joined
[00:32] *** fake_space_whale left
[01:00] *** lizmat joined
[01:00] *** lizmat left
[03:03] *** vrurg left
[04:54] *** statisfiable6 left
[04:54] *** greppable6 left
[04:54] *** nativecallable6 left
[04:54] *** unicodable6 left
[04:54] *** bloatable6 left
[04:54] *** notable6 left
[04:54] *** undersightable6 left
[04:54] *** squashable6 left
[04:54] *** releasable6 left
[04:54] *** committable6 left
[04:54] *** evalable6 left
[04:54] *** shareable6 left
[04:54] *** bisectable6 left
[04:54] *** coverable6 left
[04:54] *** quotable6 left
[04:54] *** reportable6 left
[04:54] *** benchable6 left
[04:54] *** greppable6 joined
[04:54] *** reportable6 joined
[04:54] *** nativecallable6 joined
[04:54] *** committable6 joined
[04:55] *** benchable6 joined
[04:55] *** evalable6 joined
[04:55] *** releasable6 joined
[04:55] *** bisectable6 joined
[04:55] *** ChanServ sets mode: +v bisectable6

[04:56] *** unicodable6 joined
[04:56] *** ChanServ sets mode: +v unicodable6

[04:56] *** coverable6 joined
[04:57] *** undersightable6 joined
[04:57] *** ChanServ sets mode: +v undersightable6

[04:57] *** statisfiable6 joined
[04:57] *** notable6 joined
[04:57] *** quotable6 joined
[04:57] *** ChanServ sets mode: +v quotable6

[04:58] *** bloatable6 joined
[04:58] *** squashable6 joined
[04:59] *** shareable6 joined
[05:22] *** robertle left
[06:52] *** ufobat__ joined
[06:55] *** ufobat_ left
[07:20] *** epony left
[07:26] *** Geth joined
[07:27] *** epony joined
[07:52] *** [TuxCM] left
[07:57] *** lizmat joined
[08:12] *** [TuxCM] joined
[08:20] *** robertle joined
[08:32] *** fake_space_whale joined
[09:19] *** lizmat_ joined
[09:20] <[TuxCM]> Rakudo version 2019.03.1-236-g9ce179292 - MoarVM version 2019.03-99-g2e9df2ad8

[09:20] <[TuxCM]> csv-test-xs-20      0.429 -  0.431

[09:20] <[TuxCM]> csv-ip5xs           0.686 -  0.719

[09:20] <[TuxCM]> test-t --race       0.757 -  0.778

[09:20] <[TuxCM]> test-t              1.638 -  1.654

[09:20] <[TuxCM]> csv-ip5xs-20        5.811 -  6.119

[09:21] <[TuxCM]> test                7.387 -  7.553

[09:21] <[TuxCM]> test-t-20 --race    8.769 -  9.037

[09:21] <[TuxCM]> csv-parser         21.902 - 22.447

[09:21] <[TuxCM]> test-t-20          28.124 - 28.233

[09:22] *** lizmat left
[09:27] *** lizmat_ is now known as lizmat

[10:25] *** pmurias joined
[11:06] *** pmurias left
[11:19] *** lizmat left
[11:43] *** pmurias joined
[12:08] *** lizmat joined
[12:51] *** pmurias left
[12:53] *** pmurias joined
[12:54] *** lucasb joined
[13:18] <pmurias> //e/exit

[13:18] *** pmurias left
[13:23] *** vrurg joined
[13:23] <lizmat> I was thinking on making a module that would parse a spesh-log and allow for some object oriented introspection of it

[13:24] <lizmat> does such a thing already exist?  timotimo jnthn brrt ^^^

[13:24] <jnthn> No, though also that format wasn't really designed with easy parsing in mind :)

[13:25] <jnthn> Though it's relatively regular

[13:26] <jnthn> Just any parser will be fragile as we add new things to it

[13:29] <lizmat> that's why I was thinking of adding it to the "lib" directory

[13:29] <lizmat> so we can keep it inn sync, similar to Telemetry

[13:29] <jnthn> I'd be more inclined to have a way to request it in a sensible format :)

[13:30] <lizmat> in the long run, I'd agree

[13:30] <jnthn> I did discuss that with timotimo recently; was thinking of a profiler option where the hottest code gets its specializations dumped too

[13:31] <lizmat> I was thinking of something like "snapper", which would by default dump all of the nqp::ops that didn't get JITted after the program has run

[13:33] <jnthn> (I want that, of course, to be able to get them included alongside the code in Comma, and potentially for some analyses to suggest how to improve performance :))

[13:33] *** squashable6 left
[13:35] *** AlexDani` joined
[13:36] <jnthn> It occurs to me that we could, if we had a structured form of the data, even then expose an op where you can query the specializations

[13:36] <jnthn> For a given code objet

[13:37] <jnthn> c

[13:37] *** squashable6 joined
[13:37] *** ChanServ sets mode: +v squashable6

[13:41] *** AlexDani` is now known as AlexDaniel

[13:41] *** AlexDaniel left
[13:41] *** AlexDaniel joined
[13:45] <AlexDaniel> kawaii: what's the situation with the release? I'm out of the loop

[13:46] <kawaii> AlexDaniel: I've notified the MoarVM guys and awaiting a release from them.

[13:47] <AlexDaniel> releasable6: status

[13:47] <releasable6> AlexDaniel, Next release will happen when it's ready. 4 blockers. 61 out of 236 commits logged (⚠ 51 warnings)

[13:47] <releasable6> AlexDaniel, Details: https://gist.github.com/85b139dca0c79365eb03dac289fd9c60

[13:47] <kawaii> I didn't want to keep annoying them though.

[13:47] <AlexDaniel> kawaii: what about https://github.com/rakudo/rakudo/issues/2856 ?

[13:48] <lizmat> AlexDaniel: nine is looking at that afaik...  

[13:49] <kawaii> So I'm waiting on both a MoarVM release and a fix for 2856 currently.

[13:49] <AlexDaniel> are we positive that 2856 is not a Moar issue?

[13:50] <kawaii> Looks like it could be actually.

[13:50] <jnthn> It's not

[13:50] <AlexDaniel> ok

[13:50] <jnthn> It's almost certainly due to my change to fix a BUILDALL performance issue, whereby constructing an object with no attributes was inexplicably slower :)

[13:51] <jnthn> I was about to settle down to fix it 10 minutes ago, then got stolen to look at an urgent $dayjob project issue

[13:51] <lizmat> meanwhile, I've removed the BLOCKER tag, as nine doesn't consider it a blocker for release anymore

[13:51] <jnthn> I suspect it'll be a single line of code to fix, just need some spare moments to figure out which line :)

[13:52] <kawaii> If it's a trivial fix then I don't mind waiting for it alongside the Moar release.

[13:52] <jnthn> I hope $urgent-thing will not take me long, so I should get to it soon.

[13:53] <AlexDaniel> lizmat: maybe you can check 2758? Looks like a non-issue if nobody else is complaining, maybe it's already fixed or something?

[13:53] <kawaii> Good luck with $urgent-thing

[13:56] <lizmat> AlexDaniel: looking

[14:20] <ugexe> if i try to --profile zef it works unless i use sqlite e.g. --profile-filename=demo.sql

[14:20] <ugexe> MoarVM panic: Internal error: zeroed target thread ID in work pass

[14:34] <ugexe> sqlite profile *does* work if i do MVM_JIT_DISABLE=1

[14:39] <ugexe> moarperf, when given the sqlite file or not, just shows a blank page. the only hint is `[ERROR] 403 /js/main.js - ::1`

[14:46] <jnthn> ugexe: Haven't worked on moarperf, but at a guess, main.js would be generated by some kind of frontend build

[14:46] <jnthn> Maybe that failed somehow?

[14:46] *** hankache joined
[14:47] <ugexe> jnthn: yeah thats it

[14:53] <ugexe> segfaults generating the flame graph, (or whatever is after it)

[15:03] <timotimo> yeah, did "npm run build" succeed?

[15:06] <ugexe> yeah i got past that. now im trying to view the data in moarperf, but it just says 'Hold on...'. I can click through to whatever the second tab is (Routines?), but clicking back to Overview segfaults

[15:06] <ugexe> https://gist.github.com/ugexe/814d52de9693d947620cbdb84f1131cf

[15:07] <timotimo> huh. i wonder what's up with that; you could remove the flame graph part of moarperf

[15:07] <timotimo> oh, but the flamegraph succeeded

[15:07] <timotimo> it isn't even big

[15:07] <ugexe> [OK] 200 /flamegraph-for/0 - ::1

[15:07] <ugexe> Segmentation fault: 11

[15:08] <ugexe> so its not always the closed socket thing it complains about in the gist either

[15:10] <timotimo> did you try getting a backtrace with gdb?

[15:12] *** robertle left
[15:13] <ugexe> no gdb on latest osx

[15:13] <ugexe> or rather you can get it, but it doesnt work

[15:14] <timotimo> oh crap

[15:14] <timotimo> lldb at least?

[15:20] <ugexe> perl6-lldm-m just does the initial output from lldb/gdb and never runs the script

[15:21] <ugexe> https://gist.github.com/ugexe/0621096386c43573f9031d9047ac1c76

[15:25] <timotimo> maybe it doesn't understand the "run" command?

[15:26] <timotimo> i mean the "when you start, immediately run" commandline flag

[15:26] <timotimo> i've gotta head out now, sorry!

[15:32] *** hankache left
[15:37] *** lizmat left
[15:39] *** lizmat joined
[15:43] *** hankache joined
[15:49] <hankache> hello #perl6

[15:51] <hankache> can someone have a look at this issue: https://github.com/rakudo/rakudo/issues/2782

[15:51] <hankache> <3

[15:54] <lizmat> bisectable6: class A { has $.a; }; class B { has $.b }; class C is B is A { }; say C.new(:a(1), :b(2))

[15:54] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=cb691da) because on both starting points the exit code is 0

[15:55] <bisectable6> lizmat, bisect log: https://gist.github.com/2bf89d7b2cc83eecd958330360f36043

[15:55] <bisectable6> lizmat, (2017-10-07) https://github.com/rakudo/rakudo/commit/16cb67980a7591a66d9259680b980c81067d3f8c

[15:56] <jnthn> Oops :)

[15:56] <yoleaux> 15:20Z <guifa> jnthn: sadly I ended up having to go with the custom associative class (re GH question).  I managed to find a way to do the backtracking to work well enough to warn my users though the calling file check isn’t the prettiest (one liner, but still).  But it’s actually given me some cool other ideas for instantiating some other class objects along the way so it’s not for naught

[15:56] <jnthn> Hm, but that still doesn't answer much

[15:57] <AlexDaniel> hmm almost 10000 gists on whateverable account

[15:58] <jnthn> Does it even need MI I wonder...

[15:58] <AlexDaniel> I'll be slapped for that eventually…

[15:59] <jnthn> "# Take the first "super"class's BUILDALLPLAN if possible" - the code below that is wrong

[16:02] <jnthn> Pushed a fix for https://github.com/rakudo/rakudo/issues/2856 in case anything else would be broken by it

[16:02] <jnthn> hankache: Testing a fix for that issue

[16:03] <hankache> jnthn++

[16:04] <jnthn> The fix works, just need spectest to finish before I push

[16:05] <jnthn> m: use Test; class A { has $.a; }; class B { has $.b }; class C is B is A { }; given C.new(:a(1), :b(2)) { is .a, 1, "Initialization of attributes in multiple inheritance works (1)"; is .b, 2, "Initializatino of attributes in multiple inheritance works (2)"; }

[16:05] <evalable6> jnthn, rakudo-moar cb691da51: OUTPUT: «(exit code 1) not ok 1 - Initialization of attributes in multiple inheritance works (1)␤# …»

[16:05] <evalable6> jnthn, Full output: https://gist.github.com/9c6df881dd249a31d335a181ed8be84c

[16:09] <jnthn> hankache: Pushed fix, along with a spectest to cover it :)

[16:10] <hankache> jnthn <3

[16:21] <nine> ugexe: https://github.com/rakudo/rakudo/commit/50699817b5d0166ffc598c792414150674e963b1

[16:22] <nine> Good thing the release did not actually happen before the PTS

[16:24] *** vrurg left
[16:25] *** vrurg joined
[16:25] *** vrurg left
[16:29] *** vrurg joined
[16:29] *** fake_space_whale left
[16:34] <AlexDaniel> rakudo in debian is currently stuck at 2018.12 anyway

[16:37] *** hankache left
[16:37] *** travis-ci joined
[16:37] <travis-ci> Rakudo build errored. Jonathan Worthington 'Merge pull request #2858 from patzim/moar-option-doc

[16:37] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/525013693 https://github.com/rakudo/rakudo/compare/cb691da514a4...6e2dc965b97e

[16:37] *** travis-ci left
[16:37] *** hankache joined
[16:43] <timotimo> i'm back; ugexe, did lldb give you anything?

[16:50] <ugexe> changing `lldb $DIR/perl6-m -- "$@"` to `lldb -o run $DIR/perl6-m -- "$@"` makes it run

[16:50] <ugexe> and naturally it doesn't segfault when using lldb

[16:51] <timotimo> ah, of course :(

[16:51] <timotimo> i know that feeling

[17:00] <ugexe> https://gist.github.com/ugexe/94d6061dcb2f0b39297fc70440cd993d (this is related to generating the profile)

[17:00] <ugexe> subsequent runs worked (mind you I mentioned earlier i couldnt run that without doing MVM_JIT_DISABLE=1

[17:01] <timotimo> ah dang

[17:04] <ugexe> that command seems to always segfault if i delete .precomp first

[17:06] <timotimo> which one? the one that gives "profiler lost sequence" otherwise?

[17:07] <ugexe> yeah. but i only got that "profiler lost sequence" once

[17:07] <ugexe> after that it ran

[17:07] <ugexe> (it wasnt precompiling during that "profiler los sequence" fwiw)

[17:08] <ugexe> https://gist.github.com/ugexe/6c246e4884903c35af0a854e887cfeb7

[17:08] <ugexe> i just got profiler lost sequence again

[17:08] <ugexe> but it didnt dump a stack trace like the previous one

[17:09] <timotimo> "profiler lost sequence" happens when it leaves more frames than it entered, iirc

[17:09] <ugexe> oh wait

[17:09] <ugexe> that error *is* different

[17:09] <ugexe> MoarVM panic: Profiler lost sequence in continuation control

[17:10] <ugexe> additional "in continuation control"

[17:23] <AlexDaniel> jnthn: https://github.com/perl6/problem-solving/issues/18 is an interesting one. Is it about the language or is it about the compiler?

[17:26] <ugexe> given `-lwc` what if you want a multi MAIN(:$lwc)

[17:27] <ugexe> means you cant have `multi MAIN(:$lwc, :$l, :$w, :$c)

[17:27] <ugexe> that is inconsistent with a normal subroutine. inconsistent behavior like that should go in external modules.

[17:37] *** [TuxCM] left
[17:39] *** lizmat left
[18:01] *** [TuxCM] joined
[18:03] *** hankache left
[18:05] *** hankache joined
[18:19] <bartolin_> since Geth isn't here: I've just committed https://github.com/rakudo/rakudo/commit/07b4f74381 as a workaround for the JVM backend

[18:47] *** robertle joined
[19:17] *** hankache left
[19:38] <jnthn> AlexDaniel: Well, about language in the sense that it's about how MAIN's signatures are interpreted as command line arguments

[19:38] <jnthn> AlexDaniel: Trouble is, I'm not sure one semantics for mapping those can please everybody.

[19:39] <jnthn> AlexDaniel: Like, if I'm building something in Perl 6, I just use whatever is made easy by the way MAIN's argument handling works :)

[19:40] <AlexDaniel> jnthn: well… the broken ones we have right now only please those who'd be fine with any semantics…

[19:40] <jnthn> But if folks are wanting a matching implementation of something that already exists and need to match its interface, as the person originally opening that issue does, then it's trickier...

[19:41] <jnthn> AlexDaniel: The other general design principle was that we were meant to 1) transform command line arguments to a Capture, 2) let multi-dispatch take care of the rest

[19:41] <jnthn> Rather than going and looking through all the signatures and doing ad-hoc matching up of stuff

[19:41] <AlexDaniel> hm

[19:42] <jnthn> So for -lwc you'd have to make a policy that -abc always becomes (:a, :b, :c), for example

[19:43] <jnthn> And so could never match a sub MAIN(:$abc) { }

[19:44] <AlexDaniel> that sounds about right, actually. There are tools that do that, but I'm not sure if that's the norm

[19:44] <jnthn> Whereas today it does

[19:44] <jnthn> But if we change *that*, then anyone who wants the -foo ==> :foo style will be disappointed :)

[19:45] <jnthn> And as ugexe++ points out, if you try and do too much magic then you create ambiguous cases

[19:46] <jnthn> So what we maybe want is 1) refined default semantics for arguments ==> capture, 2) a way to load a module that that replaces that arguments ==> capture transform for different schemes

[19:47] <jnthn> Maybe shipping one or two alternatives that we feel are common

[19:48] <jnthn> I'd quite like to retain the "first you transform, then you dispatch" approach, though. In that folks have a hope fo debugging it: at least they can get hold of the Capture and see which side is misbehaving :)

[19:52] *** Kaypie joined
[19:52] *** Kaiepi left
[20:15] <nine> +1 for transform, then dispatch

[20:19] <nine> jnthn: is it OK for a DESTROY submethod to create a new reference to the to-be destroyed object, thereby resurrecting it?

[20:19] <timotimo> yes

[20:19] <nine> \o/

[20:19] <timotimo> the semantics you get are "DESTROY will only be called once"

[20:19] <timotimo> so if your finalizer resurrects the object, it will not become finalized again

[20:19] <nine> oh

[20:20] <nine> That's unfortunate

[20:20] <timotimo> spawn a new object that hangs off of the object with its own DESTROY :)

[20:20] <timotimo> then you can pass the "got destroyed" message "back up", while the original object is being kept alive only by the sentinel object

[20:20] <nine> That....could work. But also sounds quite expensive

[20:21] <timotimo> how often do you expect this object to die? :D

[20:23] <nine> Think of a Perl 6 subclass of a Perl 5 object. It consists of a P5 object and a matching P6 object. At any time the only reference to the combined thing may be in P5 code or P6 code. What I need the magic in the destructor for is to check if the counter part is still alive and abort destruction.

[20:24] <nine> If the object in question is just passed around a lot, the destructor could run quite often

[20:25] <timotimo> resurrection won't push the object back to the nursery

[20:25] <timotimo> so it'll be until the next full collection before the object would be considered dead again

[20:25] <timotimo> oh, you mean the newly created object i was refering to

[20:26] <timotimo> ... have a pool of objects that do nothing but wait until they go to the old generation, at which point they may be used :D

[20:26] <nine> Of course if you have a better idea for cutting this circle, I'm all ears :)

[20:27] <timotimo> i do not :|

[20:28] <nine> Actually, a third object may be the solution.

[20:29] <nine> We declar the P6 part of the whole to be the master. It's life time decides the life time of both. The P5 side of the program will only see yet another P5 object that encapsulates the P6 object (which wraps the P5 object core).

[20:32] <nine> Seems like even after removing the build-date, there's one more reproducibility issue left.

[20:33] <nine> This one's only affecting rakudo, not nqp

[20:43] <nine> SC deps seem to be in a different order for one

[21:11] *** lizmat joined
[22:20] *** lizmat left
[23:47] *** MasterDuke left
[23:53] *** lucasb left
