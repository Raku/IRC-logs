[00:08] *** MasterDuke left
[00:39] *** epony joined
[00:48] *** sivoais left
[00:59] *** lucasb left
[01:02] *** sivoais joined
[01:16] *** AlexDani` joined
[01:20] *** AlexDaniel left
[06:15] *** [Tux] left
[06:20] *** [Tux] joined
[06:46] *** TreyHarris left
[06:51] *** TreyHarris joined
[07:25] *** AlexDani` is now known as AlexDaniel

[07:25] *** AlexDaniel left
[07:25] *** AlexDaniel joined
[07:27] *** squashable6 left
[07:30] *** squashable6 joined
[08:00] *** leont joined
[08:14] *** leont left
[08:20] <|Tux|> Rakudo version 2019.07.1-351-g554f91e88 - MoarVM version 2019.07.1-238-gfc78a13b6

[08:20] <|Tux|> csv-test-xs-20      0.429 -  0.485

[08:20] <|Tux|> csv-ip5xs           0.761 -  0.777

[08:20] <|Tux|> test-t --race       0.822 -  0.854

[08:20] <|Tux|> test-t              1.754 -  1.760

[08:20] <|Tux|> csv-ip5xs-20        6.471 -  6.490

[08:20] <|Tux|> test                6.884 -  7.074

[08:20] <|Tux|> test-t-20 --race    9.012 -  9.157

[08:20] <|Tux|> csv-parser         22.318 - 23.171

[08:20] <|Tux|> test-t-20          29.394 - 29.876

[08:55] <lizmat> AlexDaniel: are you ok with me merging https://github.com/rakudo/rakudo/pull/3196 ?

[08:57] <AlexDaniel> lizmat: any particular reason you ask? I can't see how this can immediately break things, only Blin can eventually tell. By any chance did you miss this commit? https://github.com/rakudo/rakudo/commit/c1e0e386cfad51bd4f4743701ca23325de7f9dd5

[08:58] <lizmat> ah, yes, I did

[08:58] <lizmat> so I'll merge then  :-)

[08:58] <AlexDaniel> yes, please

[08:59] <AlexDaniel> nine++ asked for a release branch, maybe we'll have it earlier for this release

[08:59] <AlexDaniel> we'll see how things go

[09:02] <Geth_> ¬¶ rakudo/master: 6 commits pushed by (Elizabeth Mattijsen)++

[09:02] <Geth_> ¬¶ rakudo/master: 4a76778c52 | Allow sub-classing of Proxy objects

[09:02] <Geth_> ¬¶ rakudo/master: ead4fcc3c3 | Make sure we decont whatever we create a Proxy subclass with

[09:02] <Geth_> ¬¶ rakudo/master: 963646644f | Don't assign to "local" atteribute

[09:02] <Geth_> ¬¶ rakudo/master: fe1dcadaec | Remove special case

[09:02] <Geth_> ¬¶ rakudo/master: 5eea5f4eb6 | .compose_repr is only needed in the bootstrap

[09:02] <Geth_> ¬¶ rakudo/master: d00674b31c | Merge pull request #3196 from rakudo/subclass-proxy

[09:02] <Geth_> ¬¶ rakudo/master: review: https://github.com/rakudo/rakudo/compare/554f91e88c85...d00674b31cdb

[09:33] <lizmat> hmmm... git diff on the newer-sprintf branch is telling me now:

[09:33] <lizmat> -Subproject commit 6245bf980e224c8202a88b774c5488c0e5fe2126

[09:33] <lizmat> +Subproject commit 9c948ec47b23c93e3b9736debb669ee6734a41cd

[09:34] <lizmat> whereas git stash tells me: No local changes to save

[09:34] <lizmat> ah, a "git submodule update" seems to fix that

[09:35] <Geth_> ¬¶ rakudo/newer-sprintf: 2b52313203 | (Elizabeth Mattijsen)++ | src/core.e/Rakudo/Internals/Sprintf.pm6

[09:35] <Geth_> ¬¶ rakudo/newer-sprintf: Yet another try, yet another branch

[09:35] <Geth_> ¬¶ rakudo/newer-sprintf: 

[09:35] <Geth_> ¬¶ rakudo/newer-sprintf: I sincerely hope this one sticks

[09:35] <Geth_> ¬¶ rakudo/newer-sprintf: review: https://github.com/rakudo/rakudo/commit/2b52313203

[09:35] <lizmat> yes, that was a forced update

[10:24] *** squashable6 left
[10:25] *** squashable6 joined
[10:25] *** ChanServ sets mode: +v squashable6

[11:06] *** squashable6 left
[11:08] *** squashable6 joined
[11:35] *** ufobat__ left
[12:56] *** pmurias joined
[13:17] *** vrurg joined
[13:46] *** cognomin_ joined
[13:48] *** lucasb joined
[13:50] *** cognominal left
[14:31] *** pmurias left
[15:10] <Geth_> ¬¶ roast: bf7d0fbe51 | (Elizabeth Mattijsen)++ | S06-routine-modifiers/proxy.t

[15:10] <Geth_> ¬¶ roast: Add tests for subclassed Proxy

[15:10] <Geth_> ¬¶ roast: review: https://github.com/perl6/roast/commit/bf7d0fbe51

[15:50] *** |Tux| left
[15:50] *** |Tux| joined
[16:02] *** MasterDuke joined
[16:18] <lizmat> so I had this nice idea to make a module for an "is tracked" variable traits

[16:18] <lizmat> my $a is tracked = 42

[16:18] <lizmat> $a = 666;

[16:18] <lizmat> say $a.VAR.history   # [42]

[16:18] <lizmat> proof of concept: https://gist.github.com/lizmat/8c0476706a473405f5b48793eff69f72

[16:19] <lizmat> however, it appears that a new Scalar is bound *after* the trait is run

[16:20] <lizmat> aaah... of course, the trait only runs once at compile time, while the lexical could be created many times

[16:20] <lizmat> so maybe I should be working on the descriptor of the Variable object ?

[16:20] <lizmat> jnthn: any pointers on that?  ^^

[16:21] <jnthn> I don't think you want a trait there, I think you just want the type?

[16:21] <jnthn> Like `my %bomb is Set`

[16:21] <timotimo> like "my $a is TrackedScalar = 5"?

[16:21] <jnthn> Right

[16:21] <lizmat> hmmm...

[16:23] <lizmat> m: class A { }; my $a is A

[16:23] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§is trait on $-sigil variable not yet implemented. Sorry.‚ê§Did you mean: my A $a?‚ê§at <tmp>:1‚ê§------> 3class A { }; my $a is A7‚èè5<EOL>‚ê§    expecting any of:‚ê§        constraint‚ê§¬ª

[16:23] <lizmat> seems to me that won't work on scalars

[16:24] *** leont joined
[16:24] <lizmat> I mean, it's all about syntactic sugar

[16:24] <lizmat> the reason I want a trait, is that one can expand the trait:

[16:24] <lizmat> my $a is tracked<values sites> = 42;

[16:25] <lizmat> would track both values and sites where they would get changed

[16:26] <timotimo> the type could also be parameterized though

[16:26] <lizmat> true

[16:26] <lizmat> still, type atm won't work for scalars

[16:26] <lizmat> I guess mainly because we haven't figured out the semantics

[16:29] <SmokeMachine> if that worked, should `my $a is Scalar` work?

[16:29] <jnthn> Presumably, yes :)

[16:29] <timotimo> we don't look up "Scalar" in the local lexical environment any more, right?

[16:29] <lizmat> what I see as the big issue making this work

[16:30] <lizmat> is that there is no way to set up a descriptor in such a way that it will create a Proxy object (or subclass thereof)

[16:30] <lizmat> or am I missing something there ?

[16:31] *** leont left
[16:32] * lizmat must admit she's sorta lost track on how descriptors work in one of jnthn's refactoring rounds

[16:33] <jnthn> It's not really about descriptors at all, but rather about what gets bound to the variable

[16:33] <jnthn> I'm not sure exactly what makes it complicated to support is Type on scalars

[16:34] <lizmat> well, I'm willing to do that, it's just that atm I need pointers on how to do that  :-)

[16:35] <lizmat> because if that works, a "is tracked" should also be possible  :-)

[16:36] <lizmat> if I look at the codegen of "my $a = 42", I see a nqp::assign being codegenned

[16:37] <lizmat> so either something else would need to be codegenned, or nqp::assign should be made smarter ?

[16:37] <jnthn> Sure, which is fine

[16:37] <jnthn> The runtime semantics of this are an assign. It's the declaration semantics that are interesting here

[16:37] <lizmat> QAST::Var(lexical $a :decl(static)) you mean ?

[16:38] <jnthn> Yes

[16:38] <jnthn> Probably somewhere in Perl6::World, build_container or whatever the thing was called (it's been a while... :))

[16:38] <lizmat> ok, will see if I can make sense of that  :-)

[16:40] <lizmat> looks like build_container assumes any unrecognized cont_type is to be bound to the descriptor in the container_base

[17:01] *** dogbert11 joined
[17:22] <dogbert11> hmm, looks as if the commands perl6-valgrind-m and perl6-gdb-m are broken

[17:22] <dogbert11> I get 'Unhandled exception: While looking for 'ModuleLoader.moarvm': no such file or directory'

[18:09] *** [Tux] left
[18:14] <MasterDuke> dogbert11: running them from the rakudo root directory? what if you try from somewhere else?

[18:32] *** chloekek joined
[19:18] *** hoelzro joined
[19:21] *** [Tux] joined
[20:02] <nine> The following step can take a long time, please be patient.

[20:02] <nine> Unhandled exception: While looking for 'ModuleLoader.moarvm': no such file or directory

[20:06] <nine> And I don't even get to see the command that led to this error anymore...

[20:07] <nine> So the build's broken and I don't know how to debug it

[20:07] <timotimo> yeah, to see the commands there's a Configure.pl flag

[20:08] <timotimo> --no-silent-build or so

[20:08] <MasterDuke> nine: i get that if i run e.g., ./perl6-gdb-m in my rakudo directory. but they work fine if i run the installed versions

[20:10] <nine> Why do we hide this important information by default?

[20:11] <timotimo> builds are not supposed to give error messages, so there's no need to see what might have caused an error because no errors happen move along

[20:12] <nine> If I wanted to have a useless splash screen instead of information on my screen, I'd have stayed with Windows 20 years ago

[20:15] <timotimo> dunno, take it up with vrurg or just put --no-silent-build in whatever alias or script runs Configure.pl

[20:15] <timotimo> (in my case it's reverse shell history search that does it)

[20:17] <timotimo> when i asked why there is nothing like "make VERBOSE=1" the answer was that it'd bloat the makefile too much because we target some makes that lack lots of stuff

[20:17] <nine> Looks like the issue's actually in NQP

[20:19] <nine> So why hide information at all? Who is helped by this in what situation? It definitely created issues for me as a developer and it will create issues for me as a packager as I will probably only remember adding that switch to the .spec file when I'm already staring at the useless log of a failed build

[20:22] <nine> Seems like running nqp's Configure.pl fixed rakudo's build.

[20:32] *** chloekek left
[21:17] *** lucasb left
[22:07] *** MasterDuke left
