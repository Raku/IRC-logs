[00:28] *** Kaiepi joined
[01:14] *** dct left
[01:15] *** Kaiepi left
[01:17] *** Kaiepi joined
[01:21] <Kaiepi> bisectable6, say [+] [0..1000000]; say [+] [0..1000000];

[01:21] <bisectable6> Kaiepi, On both starting points (old=2015.12 new=3d581c8) the exit code is 0 and the output is identical as well

[01:21] <bisectable6> Kaiepi, Output on both points: «500000500000␤500000500000␤»

[01:22] <Kaiepi> htrm

[01:22] <Kaiepi> tht's no help with my issue

[01:34] <AlexDaniel> Kaiepi: interesting…

[01:34] <AlexDaniel> Kaiepi: so how much memory does it use?

[01:39] <Kaiepi> didnt check

[01:39] <Kaiepi> i can't build on HEAD

[01:41] <Kaiepi> oh i was on the wrong branch

[01:55] <MasterDuke> Kaiepi: have you heard anything about your grant proposal?

[01:56] <Kaiepi> i have

[01:57] <Kaiepi> the voters' responses have been neutral to positive

[01:57] <Kaiepi> so it'll probably go through

[01:57] <Kaiepi> problem is with the amount of money i requested wont' fit in their 2018 budget and they haven't finished their 2019 budget

[01:59] <Kaiepi> so i may get pushed back until the next round of proporals

[02:06] <MasterDuke> cool to the first part, annoying to the second

[02:06] <MasterDuke> btw, i tried to comment a +1, but it looks like it got lost

[02:20] <Kaiepi> well thanks anyway

[02:45] <MasterDuke> currently my default-int NQP branch still has prefix:<+> numifying instead of intifying. something broke when i made it intify, but i now realize what a solution might be

[02:46] <MasterDuke> does anyone have an opinion on whether it remain as numifying or change to intifying? (assuming of course i do come up with a fix for whatever broke last time)

[02:49] * leont doesn't have enough details

[02:59] *** MasterDuke left
[03:03] *** leont left
[03:13] *** tyil left
[03:23] *** tyil joined
[03:45] *** ufobat_ joined
[03:49] *** ufobat left
[06:10] *** robertle left
[06:49] <nine> .tell MasterDuke I remember lots of +@some_arr in NQP code. In fact I think that that's the most common use of prefix:<+>. This use case would benefit from intification for sure.

[06:49] <yoleaux> nine: I'll pass your message to MasterDuke.

[07:56] *** patrickb joined
[09:17] <lizmat> Files=1266, Tests=88056, 376 wallclock secs (20.13 usr  5.85 sys + 2685.12 cusr 227.66 csys = 2938.76 CPU)

[10:21] *** robertle joined
[11:03] *** leont joined
[11:17] *** leont left
[12:16] <|Tux|> Rakudo version 2018.12-266-g3d581c8d2 - MoarVM version 2018.12-38-g6f92a01d9

[12:16] <|Tux|> csv-test-xs-20      0.430 -  0.431

[12:16] <|Tux|> csv-ip5xs           0.754 -  0.763

[12:16] <|Tux|> test-t --race       0.849 -  0.908

[12:16] <|Tux|> test-t              1.819 -  1.949

[12:16] <|Tux|> csv-ip5xs-20        6.397 -  6.569

[12:16] <|Tux|> test                7.188 -  7.679

[12:16] <|Tux|> test-t-20 --race   10.179 - 10.288

[12:16] <|Tux|> csv-parser         22.098 - 22.130

[12:16] <|Tux|> test-t-20          31.447 - 31.889

[13:12] *** lucasb joined
[13:27] <lizmat> .tell ugexe https://stackoverflow.com/questions/54421415/how-to-prevent-the-perl-compiler-from-changing-the-name-of-dynamic-link-library  

[13:27] <yoleaux> lizmat: I'll pass your message to ugexe.

[13:27] <AlexDaniel> releasable6: status

[13:27] <releasable6> AlexDaniel, Next release will happen when it's ready. 6 blockers. 160 out of 266 commits logged

[13:27] <releasable6> AlexDaniel, Details: https://gist.github.com/7848e09958c1750cf0e3b2172e3a0def

[13:28] <AlexDaniel> jnthn: have you looked at R#2644 ?

[13:28] <synopsebot> R#2644 [open]: https://github.com/rakudo/rakudo/issues/2644 [regression][⚠ blocker ⚠] Some regression with Cro::WebSocket

[13:32] <jnthn> AlexDaniel: Not got to that one yet; working on my other blocker (debug info regression)

[13:32] <AlexDaniel> ok!

[13:33] * AlexDaniel pokes Data::StaticTable again…

[13:33] <jnthn> But that'll come afterwards :)

[13:48] <AlexDaniel> jnthn: uh, it's probably obvious, but maybe you can help me understand

[13:48] <AlexDaniel> jnthn: so I did this patch to Data::StaticTable https://gist.github.com/AlexDaniel/719b855bc2f76ce1a8d2bbd14d0862a8

[13:48] <AlexDaniel> jnthn: and the tests pass, great… however

[13:48] <AlexDaniel> why is that needed? $matcher in that case is a regex, in boolean context

[13:49] <AlexDaniel> so if it's not doing $matcher by itself is not doing $_ ~~ $matcher, what does it do then?

[13:49] <AlexDaniel> oops

[13:50] <AlexDaniel> I mean, I was expecting $matcher in boolean context to do $_ ~~ $matcher, am I wrong?

[13:50] <AlexDaniel> by the way, `use v6.c` does not help there

[13:50] <jnthn> You'd need `use v6.c` in the place containing the regex that is passed in also

[13:51] <jnthn> A regex in boolean context per 6.d captures the $_ at the point where the regex literal appears

[13:51] <jnthn> It then matches agaisnt *that* `$_`, not the one of its caller

[13:51] <AlexDaniel> yes, `use v6.c` in both the test file and the library are not fixing it

[13:52] <jnthn> Hmm...that's odd, I'd expect they would

[13:52] <AlexDaniel> m: say 42

[13:52] <camelia> rakudo-moar 3d581c8d2: OUTPUT: «42␤»

[13:53] <AlexDaniel> yea, I'm using the latest version…

[13:54] <jnthn> A block { .defined && $matcher } would evaluate to $matcher provided .defined is True, I think?

[13:55] <jnthn> So that should be ending up hitting the "we got a Regex back" case in grep, which I left in place

[13:55] <AlexDaniel> oh, and True helps

[13:56] <AlexDaniel> so under v6.c this works: {.defined and $matcher and True}

[13:56] <jnthn> https://github.com/rakudo/rakudo/blob/master/src/core/Any-iterable-methods.pm6#L943

[13:57] <jnthn> m: my $x = (True and /42/); dd $x

[13:57] <camelia> rakudo-moar 3d581c8d2: OUTPUT: «Regex $x = /42/␤»

[13:57] <jnthn> I think that grep block should be evaluating to $matcher

[13:57] <jnthn> And then hitting `nqp::istype(result, Regex) ?? result.ACCEPTS($_) !! result,`

[13:58] <AlexDaniel> oh…

[13:58] <jnthn> In the place I linked

[13:58] <jnthn> Which I'd expect to then handle it

[13:58] <jnthn> I wonder why it isn't...

[13:59] <AlexDaniel> doesn't it mean that we will be using the regex twice?

[13:59] <jnthn> Why?

[14:00] <jnthn> `and` doesn't boolify it's second argument, it just evaluates to it if the first one is True

[14:00] <jnthn> *its

[14:01] <jnthn> And then the code in the grep implementation receives the Regex and calls .ACCEPTS on it, rather than boolifying it

[14:02] <jnthn> Actually, that partiuclar code should work, per the code in .grep, *regardless* of my recent change, I think?

[14:29] <timotimo> .o( missing decont? :P )

[14:30] <timotimo> i do believe istype deconts usually

[14:30] <jnthn> It does, yes

[14:44] *** j3nnn1 joined
[15:17] *** b2gills left
[15:26] *** b2gills joined
[15:40] <Geth> ¦ nqp: 9058fc4479 | (Jonathan Worthington)++ | 2 files

[15:40] <Geth> ¦ nqp: Have MoarVM bytecode writer write debug locals

[15:40] <Geth> ¦ nqp: 

[15:40] <Geth> ¦ nqp: This includes a MoarVM version bump to support bytecode version 6, which

[15:40] <Geth> ¦ nqp: we now produce.

[15:40] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/9058fc4479

[15:40] <Geth> ¦ nqp: 6cf6e9a721 | (Jonathan Worthington)++ | src/NQP/Optimizer.nqp

[15:40] <Geth> ¦ nqp: Add local debug names for NQP code

[15:40] <Geth> ¦ nqp: 

[15:40] <Geth> ¦ nqp: This means that the debugger will now include vastly more symbols. Prior

[15:40] <Geth> ¦ nqp: to this change, any lexical lowered into a local (the majority in much

[15:40] <Geth> ¦ nqp: code) would not be available through the MoarVM debug server interface.

[15:40] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6cf6e9a721

[15:43] <Geth> ¦ rakudo: ba7827123c | (Jonathan Worthington)++ | tools/build/NQP_REVISION

[15:43] <Geth> ¦ rakudo: Bump to NQP/MoarVM with local debug name support

[15:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ba7827123c

[15:43] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2018.12-81-g6e75b0476...2018.12-84-g6cf6e9a

[15:43] <Geth> ¦ rakudo: 6fe537758c | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[15:43] <Geth> ¦ rakudo: Use new local symbol debug name support

[15:43] <Geth> ¦ rakudo: 

[15:43] <Geth> ¦ rakudo: When we lower lexicals into locals, it makes them invisible to all that

[15:43] <Geth> ¦ rakudo: uses the MoarVM debug server interface. This was already the case, but

[15:43] *** lucasb left
[15:43] <Geth> ¦ rakudo: became rather more serious of late, since we now lower many further

[15:43] <Geth> ¦ rakudo: variables. With this change, we now record the mappings of registers

[15:43] <Geth> ¦ rakudo: into debug names, which are on the MoarVM backend now passed along to

[15:43] <Geth> ¦ rakudo: the VM for its use in debugging. Since we did lower some things prior to

[15:43] <Geth> ¦ rakudo: this change, however, this not only keeps the debug experience from

[15:43] <Geth> ¦ rakudo: getting worse with this release, but also makes it better than it was

[15:43] <Geth> ¦ rakudo: before.

[15:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6fe537758c

[15:48] *** pmurias joined
[15:55] <jnthn> So, now onto another blocker...

[16:05] <jnthn> AlexDaniel: Which test file in StaticTable were you looking at?

[16:06] <AlexDaniel> jnthn: t/StaticTable-query.t

[16:06] <AlexDaniel> jnthn: you can delete all tests after the first failing one

[16:06] <AlexDaniel> ok($q2.grep(rx/6/, "Dim3"):n                 ~~ (2, 4),    "Grep test returns rows 2,4");

[16:06] <AlexDaniel> that's the first one that fails

[16:09] <jnthn> AlexDaniel: Thanks

[16:21] <jnthn> Think I know what's going on

[16:24] *** robertle left
[16:27] <jnthn> Oh goodness...

[16:27] <jnthn> I can fix test 8 just fine

[16:28] <jnthn> But test 9 onwards with the junctions...uff

[16:28] <jnthn> Well, maybe

[16:29] * jnthn tries something

[16:34] <AlexDaniel> yeah, these junctions xD

[16:34] *** lucasb joined
[16:34] <jnthn> Now I'm really confused. I added Junction to the set of things we just .ACCEPTS on, and now it passes...most of the tests, but fails a few still, and I don't quite see why

[16:34] <yoleaux> 16:33Z <atroxaper> jnthn: Hello. We have talked about debugger and mac in CommaIDE 2018-06-23. MoarVM uses 'localhost' word and CommaIDE uses '127.0.0.1'. That is why I'm getting CouldNotConnectException while starting a debug. You were going to change the word in CommaIDE, but as I see in decompiled code you didn't :) This is right? Could you fix it in the next release?

[16:34] <AlexDaniel> whenever I see some code with junctions I'm like “wow, well… and it works?”

[16:41] <jnthn> bah, why'd I open this code in Vim...it manages to hang it...

[16:45] <jnthn> I don't see at all why this one fails, though. Hm.

[16:47] <timotimo> jnthn: it could just be the syntax highlighter; does the file have comments with many - or = or something in it?

[16:50] <jnthn> timotimo: yes

[16:50] <jnthn> Ctrl+C fixes it

[16:51] <timotimo> aye, that's this particular vim highlighting bug that i see often enough

[16:51] <timotimo> but i'm not sure i want to descend into vim debugging

[16:51] <jnthn> I write a lot less Perl 6 in Vim than I used to. :)

[16:51] <jnthn> I'm still very confused by how this almost works but not quite...

[16:51] *** patrickb left
[16:52] <timotimo> i haven't looked at the code in question yet, but i'll also be AFK for a bit soon

[16:57] <jnthn> Ah, d'oh, think it was a silly thinko

[16:59] <jnthn> Well, now it fails just two tests near the end :/

[16:59] <jnthn> AlexDaniel: Was this test file completely clean before?

[16:59] <jnthn> oh wat

[16:59] <jnthn> Now it passed them all

[17:00] <jnthn> Oh, right, the original ticket mentioned it was flappy

[17:00] <AlexDaniel> jnthn: it may flap a bit

[17:00] <AlexDaniel> other tests should not flap though

[17:00] <jnthn> Yeah, it does, I bet it's hash ordering

[17:01] <jnthn> Alright, running now

[17:01] <jnthn> In theory, I have a fix such that it won't be needed to patch the module at all

[17:01] <AlexDaniel> my PR was already merged :)

[17:02] <jnthn> All Tests Successful

[17:02] <AlexDaniel> \o/

[17:03] <jnthn> Without the PR

[17:03] <AlexDaniel> jnthn++ # awesome!

[17:03] <jnthn> Next question: will it blend^Wspectest? :)

[17:04] <AlexDaniel> .oO( blind? )

[17:04] <jnthn> .oO( I didn't say that one coming... )

[17:04] <jnthn> *see

[17:05] <jnthn> d'oh!

[17:06] <AlexDaniel> btw R#2642 is interesting, I'll try to take a look tomorrow if not today

[17:06] <synopsebot> R#2642 [open]: https://github.com/rakudo/rakudo/issues/2642 [SEGV][regression][⚠ blocker ⚠] Algorithm::LibSVM and segfaults

[17:07] <AlexDaniel> I don't think that the tests are ok on 2018.12, but on HEAD it segfaults

[17:08] <jnthn> valgrind it

[17:08] <AlexDaniel> I think I did, and even though my moar is not stripped it still gave me a useless stacktrace

[17:09] <AlexDaniel> but I really didn't spend much time looking at this issue yet, so who knows…

[17:09] <jnthn> Hm, that might mean it's crashing inside of the libsvm

[17:10] <AlexDaniel> I think it does, yeah, but how did we manage to cause that?

[17:10] <jnthn> Potentially, better memory management

[17:11] <jnthn> One result of the lexical to local lowering is that some things are reachable for a shorter amount of time

[17:11] <jnthn> And so the GC can get them earlier

[17:12] <jnthn> I wonder if it was relying on us being a bit tardy to collect things...

[17:12] <jnthn> Looking at the WebSocket test now

[17:13] <jnthn> It does indeed seem to nom 3GB of memory...wow

[17:14] <AlexDaniel> yeah, that sounds about right. https://gist.github.com/AlexDaniel/46ffa7ae8e1084c04cc1fc304eecf3f9

[17:15] <AlexDaniel> jnthn: note that I don't know if the memory issue is a regression… the failing test is

[17:16] <timotimo> i think soon as part of my grant i'll have to give the heap snapshot profiler a good look-over; i sometimes see data that seems odd, but i couldn't yet tell if it's just surprising data or borked writing/reading

[17:17] <timotimo> in case you want to use the heap profiler for that websocket test and it's giving you surprising data, perhaps it's actually not quite correct

[17:35] <jnthn> I'm now at the point of "I wonder how this ever worked..." :)

[17:37] <jnthn> m: loop { $_ = 42; when 42 { } }

[17:37] <camelia> rakudo-moar 6fe537758: ( no output )

[17:37] <jnthn> committable6: 2018.12 loop { $_ = 42; when 42 { } }

[17:37] <committable6> jnthn, ¦2018.12: «»

[17:38] *** pmurias left
[17:38] <jnthn> So, this: perl6 --optimize=0 -e 'loop { $_ = 42; when 42 { } }'

[17:38] <jnthn> Will loop forever

[17:38] <jnthn> And, this: perl6 -e 'loop { $_ = 42; when 42 { } }'

[17:38] <jnthn> Terminates

[17:40] <AlexDaniel> c: 2018.12 run <perl6 --optimize=0 -e>, ｢loop { $_ = 42; when 42 { } }｣

[17:41] <jnthn> c: 2018.12 loop { $_ = 42; when 42 { my $a = 10 } }

[17:41] <AlexDaniel> well… we'll have to wait for mine to terminate :)

[17:41] <jnthn> hah

[17:42] <jnthn> .oO( I spend years building parallelism support, and get a bot that can do one thing at a time?! :) )

[17:42] <AlexDaniel> well make rakudo relocatable then we'll talk :)

[17:42] <jnthn> I don't quite have a golf that captures the different between 2018.12 and HEAD yet, but...it's probably going to be in this space.

[17:43] <jnthn> Basically, I think that a `when` doing a `suceed` was terminating a loop

[17:43] *** pmurias joined
[17:43] <jnthn> And then it ceased to do so

[17:44] <jnthn> *succeed

[17:44] <AlexDaniel> committable6: vars

[17:44] <committable6> AlexDaniel, timeout=25

[17:44] <AlexDaniel> stupid creature… that's definitely not 25

[17:44] <lizmat> jnthn: when you're working on "when", there's also a ticket about when returning False instead of Empty if it doesn't match

[17:44] <jnthn> In its slight defense, it didn't specify units ;)

[17:45] <jnthn> lizmat: Given I'm going to be offline Thu-Sun, I'm planning to work on just the release blocker things for now :-)

[17:45] <AlexDaniel> .oO( defensi? )

[17:45] <jnthn> :D

[17:45] <lizmat> jnthn: sounds like a plan

[17:46] <jnthn> star: perl6 -e 'loop { $_ = 42; when 42 { my $a = 10 } }'

[17:46] <camelia> star-m 2017.07: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3perl6 -e7⏏5 'loop { $_ = 42; when 42 { my $a = 10 }␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤…»

[17:46] <jnthn> star: loop { $_ = 42; when 42 { my $a = 10 } }

[17:46] <camelia> star-m 2017.07: ( no output )

[17:46] <jnthn> wow, that's old :)

[17:47] <jnthn> But anyway, that now hangs on HEAD

[17:47] * AlexDaniel kicks committable6

[17:47] *** committable6 left
[17:48] <AlexDaniel> bisectable6: old=2017.07 loop { $_ = 42; when 42 { my $a = 10 } }

[17:48] <bisectable6> AlexDaniel, Bisecting by exit signal (old=2017.07 new=6fe5377). Old exit signal: 0 (None)

[17:49] *** committable6 joined
[17:49] *** ChanServ sets mode: +v committable6

[17:50] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/9715620a85ff869641dcc7d350ef9502

[17:50] <bisectable6> AlexDaniel, (2019-01-07) https://github.com/rakudo/rakudo/commit/541a4f1628e4e156f6eefc547938746f7b736104

[17:51] <AlexDaniel> jnthn: there it is, though maybe not that helpful

[17:52] <jnthn> Well, sort of, but hmm

[17:52] <AlexDaniel> bisectable6: vars

[17:52] <bisectable6> AlexDaniel, On both starting points (old=2015.12 new=6fe5377) the exit code is 1 and the output is identical as well

[17:52] <bisectable6> AlexDaniel, Output on both points: «04===SORRY!04=== Error while compiling /tmp/Ze_uJqhQcn␤Undeclared routine:␤    vars used at line 1. Did you mean 'VAR'?␤␤»

[17:52] *** pmurias left
[17:53] <AlexDaniel> .oO( Consistency? Nah… )

[17:54] *** pmurias joined
[17:55] <jnthn> bisectable6: old=2017.07 run 'perl6', '--optimize=off', '-e', 'loop { $_ = 42; when 42 { my $a = 10 } }'

[17:56] <jnthn> Am I don't it wrong, or will it just take a bit if it hangs at both starting points?

[17:56] <jnthn> *doing

[17:56] <AlexDaniel> jnthn: yeah, it's trying to figure out what to do by doing a run on each point

[17:56] <jnthn> OK

[17:56] <jnthn> But anyway, that confirms my fear :(

[17:57] <jnthn> It seems that the optimizer accidentally made the succeed exist the loop

[17:57] <jnthn> Before recent changes

[17:57] <AlexDaniel> these timeouts used to be much smaller, but then they were too small… then I bumped them… now they're too big :)

[17:57] <jnthn> And with optimization disabled it seems it always looped forever

[17:57] <jnthn> Cro::WebSocket depends on `succeed` after a `when` terminating the enclosing loop

[17:58] *** bisectable6 left
[17:59] <AlexDaniel> also it seems like using `run` like this ends up not propagating sighup, or something like that…

[18:00] *** bisectable6 joined
[18:01] <Geth> ¦ rakudo: c2e272ef68 | (Jonathan Worthington)++ | src/core/Any-iterable-methods.pm6

[18:01] <Geth> ¦ rakudo: Further fix grep with regex returns

[18:01] <Geth> ¦ rakudo: 

[18:01] <Geth> ¦ rakudo: A fix was applied, but did not cover the case where we had adverbs.

[18:01] <Geth> ¦ rakudo: Additionally, fix the case where we have a Junction of Regex being

[18:01] <Geth> ¦ rakudo: returned from the `grep` block. This fixes the regressions reported

[18:01] <Geth> ¦ rakudo: in #2643.

[18:01] <synopsebot> RAKUDO#2643 [open]: https://github.com/rakudo/rakudo/issues/2643 [⚠ blocker ⚠] Something going on in Data::StaticTable

[18:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c2e272ef68

[18:01] <AlexDaniel> bisectable6: old=2017.07 run 'perl6', '--optimize=off', '-e', 'start { sleep 5; exit 42 }; loop { $_ = 42; when 42 { my $a = 10 } }'

[18:02] <bisectable6> AlexDaniel, On both starting points (old=2017.07 new=6fe5377) the exit code is 1 and the output is identical as well

[18:02] <bisectable6> AlexDaniel, Output on both points: «The spawned command 'perl6' exited unsuccessfully (exit code: 42)␤  in block <unit> at /tmp/sZwdXrtTAN line 1␤␤»

[18:02] <AlexDaniel> jnthn: yeah, both time out.

[18:05] *** robertle joined
[18:07] <jnthn> committable6: 2018.12 run 'perl6', '--target=optimize', '-e', 'loop { $_ = 42; when 42 { my $a = 10 } }'

[18:07] <committable6> jnthn, https://gist.github.com/620c516773c1f73422a16257502fd678

[18:08] <jnthn> Yeah, in 2018.12 the optimizer flattened in the loop block

[18:08] <jnthn> Now it does not

[18:09] <jnthn> committable6: 2018.12 loop { $_ = 42; when 42 { my $a = 10 } }; say "after the loop"

[18:09] <committable6> jnthn, ¦2018.12: «»

[18:09] <jnthn> Wow!

[18:09] <AlexDaniel> O_O

[18:10] <jnthn> And because it wrongly flattened it in, the SUCCEED handler's p6return op then caused the enclosing block to be returned from, which was the main program

[18:11] <jnthn> So the succeed leaving the loop both worked by accident *and* caused code in the same block as the loop not to be executed.

[18:11] <lizmat> .oO( what a way to succeed :-)

[18:11] *** pmurias left
[18:11] <jnthn> The optimizer changes - perhaps by luck, admittedly, since I don't look for p6return yet - don't make this mistake.

[18:12] <jnthn> However, they break code relying on it

[18:12] <jnthn> This is a pretty awful situation, in that we have a situation where a `when` would *sometimes* leave the enclosing loop, and that could be relied on in programs where it happend, and not relied on in programs where it did not.

[18:13] <jnthn> Um, I didn't phrase that the best, but...

[18:13] <jnthn> The point is that we can make the behavior caused by the bug "official" and break other code too.

[18:13] *** pmurias joined
[18:13] <lizmat> I guess in that situation, standardize on the situation it is supposed to be and see how that breaks the ecosystem

[18:13] <jnthn> I don't actually know which is correct :P

[18:14] <jnthn> Maybe a careful reading of S04 will give some clue to original intent

[18:14] <jnthn> But my gut feeling would be that `when` causes us to leave the enclosing block

[18:14] <lizmat> I don't think "when" is actually in S04

[18:14] <lizmat> it was a late addition

[18:14] <lizmat> argh

[18:15] <jnthn> Late? Smartmatch came pretty early?

[18:15] <lizmat> confused with "with"  :-)

[18:15] <jnthn> Oh :)

[18:15] <jnthn> Anyway, my feeling is that `when` causes us not to execute any further statements in the enclosing block, but not to end a loop

[18:15] <jnthn> m: for 1,2,3,4 { when * %% 2 { say "even" }; default { say "odd" } }

[18:15] <camelia> rakudo-moar c2e272ef6: OUTPUT: «odd␤even␤odd␤even␤»

[18:15] <jnthn> There we rely on it *not* terminating the loop, for example

[18:16] <jnthn> (Because the optimizer can't flatten in the body of a `for`)

[18:16] <jnthn> And I'm pretty sure *that* will be used extensively in the wild

[18:17] <jnthn> In fact, I bet that very example is in the spectests and design docs

[18:17] <jnthn> So, now I think I am sure which is correct: a successful `when` should not terminate the enclosing loop, and Cro::WebSocket relies on a bug in the optimizer that has now been fixed.

[18:18] <jnthn> And in fact, would always have been broken if compiled with the optimizer disabled

[18:18] <jnthn> And while there's some things in the optimizer that aren't purely optimizations, this sure isn't one of them :)

[18:18] <lizmat> sounds about right: fwiw, if it doesn't work when untouched by the optimizer, it sounds broken to me

[18:19] <jnthn> So probably the bset I can do is to release a fixed Cro::WebSocket. If it only tripped up one module, it seems rare enough.

[18:19] <jnthn> And then I should also patch the optimizer to look out for p6return and make it imply the block is unflattenable

[18:19] <jnthn> Since the reason it isn't being now is as much fortune as anything

[18:21] <timotimo> impressive bughunt

[18:25] <jnthn> https://github.com/croservices/cro-websocket/commits/master

[18:25] <jnthn> um, https://github.com/croservices/cro-websocket/commit/c3d3ce8d0db805782ebdca99d485fdf64346b418 is better

[18:29] <jnthn> Updated https://github.com/rakudo/rakudo/issues/2644 with notes about this

[18:29] <jnthn> Dinner time :)

[18:33] *** patrickb joined
[19:14] *** lucasb left
[19:34] *** pmurias left
[19:50] *** pmurias joined
[20:10] *** pmurias left
[20:19] *** japhb left
[20:52] *** pmurias joined
[21:16] *** lizmat_ joined
[21:19] *** lizmat left
[21:22] *** patrickb left
[21:32] <gfldex> jnthn: why could moarvm say: „continuationinvoke expects an MVMContinuation“ ?

[21:35] <timotimo> it doesn't say what it got instead?

[21:36] <timotimo> can you breakpoint that and print STABLE(whatever-object-variable-it-has)?

[21:36] <jnthn> Because something tried to invoke a continuation, but the thing it was given wasn't one

[21:36] *** pmurias left
[21:37] <timotimo> it could be as simple as "it's a Scalar with a continuation in it"

[21:37] <jnthn> There's very few instances of continuationinvoke

[21:37] <jnthn> In fact, probably 2: gather/take, and the thread pool.

[21:37] <timotimo> or it's a type object or a null

[21:37] <gfldex> I'm starting quite a lot of threads and there is recursion as well. If I can reproduce it I will golf.

[21:48] *** pmurias joined
[21:49] <gfldex> is there a way to tell how many threads there are already running or waiting to run?

[21:50] <jnthn> When you say threads, do you actually mean `Thread`, or tasks on the thread pool?

[21:50] <jnthn> I think the Telemetry module might provide such info, though

[21:50] <jnthn> For both cases

[21:51] <gfldex> actually both. I'm trying to implement a cuncurrent dir('loads/of/files') that actually gets faster. Just starting loads of threads is not cutting it.

[21:52] *** |Tux| left
[21:52] *** |Tux| joined
[21:53] <jnthn> Since I think it reads the whole directory and hands back an eager array, then there's probably not much to be had in the actual listing

[21:54] *** pmurias left
[21:54] <gfldex> I'm at 2x speed by 10x load. My power company will like it, I don't. :->

[22:00] <timotimo> you could try a "perf record" to see if it's actually spending lots of time in syscalls already or if it's doing mostly MVM_interp_run (may need -g for this purpose, and either deactivate the jit or set MVM_JIT_PERF_MAP to 1)

[22:10] *** pmurias joined
[22:12] *** robertle left
[22:26] <gfldex> I'm getting pretty repeatable:

[22:26] <gfldex> Unhandled exception in code scheduled on thread 7

[22:26] <gfldex> continuationinvoke expects an MVMContinuation

[22:26] <gfldex> Unhandled exception in code scheduled on thread 7

[22:26] <gfldex> continuationinvoke expects an MVMContinuation

[22:27] <gfldex> I shall golf tomorrow.

[22:29] <gfldex> my $workers = nqp::atpos_i($*SCHEDULER.usage, 2);

[22:29] <gfldex> ^^^ seams to be at least close to the culprit.

[22:45] *** pmurias left
[22:56] <gfldex> Telemetry::Instrument::ThreadPool::Snap.new<gw> > 4 # <-- what i was looking for (I shall blog!)

[22:57] * gfldex sleep &

[23:01] *** leont joined
[23:16] *** lizmat_ is now known as lizmat

[23:33] *** entonian joined
[23:40] *** entonian left
[23:44] *** leont left
