[00:08] *** lucasb left
[00:32] <patrickb> I'm not merging my spaces-in-path PRs in nqp and rakudo yet. Travis for the nqp PR fails. Interestingly the exact same command that fails on travis works locally (it's the linker not finding references to some functions in libmoar.so). I'm pretty clueless as to what could be the cause or how to debug sumething like that.

[00:33] <patrickb> https://travis-ci.org/perl6/nqp/jobs/560773407 <- that's the failing job

[00:34] <patrickb> I'm open for any clues on what could be done to track this down.

[00:34] <patrickb> The nqp-configure and MoarVM PRs that belong to the same set are already merged, but shouldn't break anything else.

[00:34] * patrickb is off to bed

[00:35] <patrickb> o/

[00:35] *** patrickb left
[00:49] <AlexDaniel> so I'm about to autocreate a bunch of rakudo github releases

[00:49] <AlexDaniel> please don't kill me if it goes wrong :)

[00:54] *** Kaiepi joined
[03:13] <Geth> ¦ rakudo: ecf2b1e4fa | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/releasable/github-release.p6

[03:13] <Geth> ¦ rakudo: Add a script for managing github releases

[03:13] <Geth> ¦ rakudo: 

[03:13] <Geth> ¦ rakudo: This script was used to upload all previously released tarballs to

[03:13] <Geth> ¦ rakudo: github releases.

[03:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ecf2b1e4fa

[03:13] <AlexDaniel> done!

[03:13] <AlexDaniel> https://github.com/rakudo/rakudo/releases https://github.com/perl6/nqp/releases https://github.com/MoarVM/MoarVM/releases

[03:14] <AlexDaniel> moarvm releases are a bit LTA because there's no announcement file, but feel free to hack a bit of code to pull sections from the changelog

[03:14] <AlexDaniel> I can the rerun it and it'll update descriptions

[03:39] *** pamplemousse left
[05:14] *** Kaypie joined
[05:14] *** Kaiepi left
[05:36] *** squashable6 left
[05:37] *** squashable6 joined
[06:33] <lizmat> Files=1281, Tests=108646, 200 wallclock secs (27.06 usr  7.97 sys + 2781.76 cusr 288.49 csys = 3105.28 CPU)

[06:43] *** hankache joined
[06:45] <nine> I just read that the 2012.06 release is finally out of the door. About time!

[06:45] <yoleaux> 18 Jul 2019 22:26Z <MasterDuke> nine: what is https://github.com/perl6/nqp/blob/master/mbc.nqp used for?

[06:47] <Geth> ¦ nqp: cf84b86dd4 | (Stefan Seifert)++ | mbc.nqp

[06:47] <Geth> ¦ nqp: Remove prototype for the bytecode writer

[06:47] <Geth> ¦ nqp: 

[06:47] <Geth> ¦ nqp: This code has long moved on to QASTCompilerMAST and friends.

[06:47] <Geth> ¦ nqp: Thanks to MasterDuke++ for noticing!

[06:47] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cf84b86dd4

[06:48] <nine> .tell MasterDuke what mbc.nqp? I don't see an mbc.nqp. Why would there be a leftover prototype lying around? You must be imaginging things! *slowlybacksoutoftheroom*

[06:48] <yoleaux> nine: I'll pass your message to MasterDuke.

[06:53] *** robertle_ joined
[07:01] *** hankache left
[07:07] *** patrickb joined
[09:35] *** robertle_ left
[09:37] *** robertle_ joined
[10:15] <lizmat> https://www.reddit.com/r/perl6/comments/cejmv9/up_up_and_away_veesh/eu7gzbe/

[11:14] *** patrickb left
[11:37] *** patrickb joined
[11:49] *** patrickb left
[11:58] *** patrickb joined
[12:54] <lizmat> m: my \foo = "a"; dd (foo => 42)   # wonder if that is a bug or not

[12:54] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «:foo(42)␤»

[12:54] <lizmat> one could also expect :a(42) as the result

[12:55] <lizmat> m: sub foo() { "a" }; dd (foo => 42)   # I guess not, as with subs it's the same

[12:55] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «:foo(42)␤»

[12:55] <jnthn> Not at all, `<ident> \h+ '=>'` always beats just the name as a term in LTM

[12:55] <jnthn> (By design.)

[12:56] <jnthn> It'd be pretty horrible if you couldn't reason about that syntactically :)

[12:56] <lizmat> still, I don't see what LTM has to do with this ?

[12:57] <lizmat> isn;t it about what it matched and how that gets interpreted ?   aka the "foo" ?

[12:57] <lizmat> ahh... **including** the fat comma

[12:57] <lizmat> ok, gotcha

[12:57] <jnthn> No, it literally wins in the parse because `<ident> \h+ '=>'` is the longest token :)

[12:57] <jnthn> "token" :)

[12:58] <lizmat> somehow "token" means "whitespace delimited" in my head  :-)

[12:58] <lizmat> but it's not  :-)

[12:58] <lizmat> https://twitter.com/khaledelboray/status/1152190498859364353

[13:06] <nine> I love reading blog posts where people stumble upon cases where Perl 6 is just faster than Perl 5 :)

[13:07] <timotimo> something must be wrong!!

[13:10] <lizmat> yeah: what's wrong is that you shouldn't do "use bigint" in Perl 5

[13:10] <[Coke]> I know that the was the plan, but it does surprise me (happily) to read those.

[13:10] <lizmat> also: in the code of http://blogs.perl.org/users/veesh/2019/07/up-up-and-away.html#comments

[13:11] <lizmat> I found that 90+% of CPU is spent in stringfying the value

[13:12] <lizmat> my startup of rakudo is .12, total run is about .38, and .2 is for stringifying

[13:13] <lizmat> the 90+% is from a --profile

[13:13] <lizmat> the .2 is from timing the actual stringification

[13:13] <timotimo> does the figure change much when you use now - $before?

[13:13] <lizmat> which figure ?

[13:13] <lizmat> I mean, the .2 is just that

[13:14] <timotimo> i mean does the profiler overhead skew the result noticeably?

[13:14] <lizmat>   my $a :=  A($m, $n);  my $then = now; my $s := $a.Str; say "stringification took { now - $then } seconds";

[13:15] <lizmat> profiler said it ran for .21

[13:15] <timotimo> wonderful

[13:15] <lizmat> so the .2 I'm seeing is definitely in the 90+% range in respect to that

[13:15] <jnthn> I thought that stringifying a bigint largely delegated to libtommath and so the hard work is done in C code. Hmm.

[13:18] <lizmat> maybe it is just a lot of hard work  :)

[13:19] <lizmat> I mean, turning it into hex should be a lot easier  :-)

[13:19] <timotimo> yeah, probably

[13:24] <jnthn> callgrind it, maybe :)

[13:28] <[Coke]> jnthn: no pressure, but have you seen my Proc::Async ticket?

[13:30] <jnthn> [Coke]: Yes, if it's the handle leaking one

[13:31] <[Coke]> Cool. I did try to remove the conditional close that bind-stdin does (and just close all the time), same error, so I've exceeded my cleverness setting. :)

[13:32] <[Coke]> Thanks, again, no pressure.

[14:17] <|Tux|> Rakudo version 2019.07-69-gecf2b1e4f - MoarVM version 2019.07-15-g53a6308c4

[14:17] <|Tux|> csv-test-xs-20      0.417 -  0.426

[14:17] <|Tux|> csv-ip5xs           0.703 -  0.717

[14:17] <|Tux|> test-t --race       0.774 -  0.806

[14:17] <|Tux|> test-t              1.711 -  1.753

[14:17] <|Tux|> csv-ip5xs-20        5.242 -  5.446

[14:17] <|Tux|> test                6.349 -  6.839

[14:17] <|Tux|> test-t-20 --race    8.977 -  9.153

[14:17] <|Tux|> csv-parser         21.936 - 22.213

[14:17] <|Tux|> test-t-20          28.082 - 28.463

[14:21] *** discord6 left
[14:21] *** discord6 joined
[14:21] *** discord6 left
[14:21] *** discord6 joined
[14:22] <patrickb> I'm still puzzled by this travis failure which I'm unable to reproduce locally: https://travis-ci.org/perl6/nqp/jobs/560773407

[14:23] <timotimo> yes, wtf happened there

[14:23] <nine> So, I successfully restored the performance optimized code paths after fixing my Inline::Perl5 memory leak and could run a first test: csv-ip5xs took 3x as long with the fix

[14:23] <patrickb> Any hints on what I could do to debug this are very welcome.

[14:23] <[Coke]> nine, that sounds amazing.

[14:24] <nine> Then I did a first optimization of the new code and got rid of a `$value.^mro.grep: {$_.HOW ~~ Inline::Perl5::ClassHOW}` in the cases where I knew that to be True and I'm now down to ~10% performance loss

[14:25] <timotimo> good

[14:26] <nine> I'm actually surprised how little it is

[14:27] <timotimo> patrickb: any reason why perhaps MVM_PUBLIC wouldn't have the right value?

[14:28] <patrickb> timotimo: But it links libmoar.so to which the moar executable of the preceding moar build already linked to successfully

[14:29] <timotimo> hum ...

[14:29] <nine> That's an odd error indeed

[14:29] <patrickb> The error message would be different if it didn't find libmoar.so, right?

[14:30] <timotimo> i think so

[14:30] <timotimo> sometimes the problem is the order of -l flags, but it doesn't seem to be the case here either

[14:41] <nine> Btw. for my memory leak fix I implemented creating P5 wrapper packages for P6 classes. This will eventually lead to a `use v6-inline 'Foo'; Foo->new` for Perl 5 code.

[14:42] <jnthn> nine++

[14:44] <vrurg> jnthn: I just have opened a problem-solving ticket with perhaps a biggest language design problem I've seen so far: https://github.com/perl6/problem-solving/issues/71

[14:47] *** lucasb joined
[14:50] <nine> Of course, there's also new issues: t/use.t .............. Can't load '/home/nine/Inline-Perl6/blib/arch/auto/Inline/Perl6/Perl6.so' for module Inline::Perl6: libmoar.so: cannot open shared object file: No such file or directory at /usr/lib/perl5/5.28.1/x86_64-linux-thread-multi/DynaLoader.pm line 193.

[14:50] <nine> patrickb: any idea?

[14:51] <nine> Seems like the library path no longer gets compiled into Inline::Perl6' Perl6.so

[14:51] *** robertle_ left
[14:52] * nine needs to get off the train

[14:53] <discord6> <Nobody> Does Rakudo do tail call optimizations?

[14:53] <timotimo> it doesn't

[14:53] <discord6> <Nobody> Ok, thanks

[14:53] <timotimo> not automatically anyway

[14:53] <discord6> <Nobody> Was this the wrong channel to ask this

[14:53] <timotimo> no, it's fine

[14:54] <timotimo> i'm not entirely sure if nextsame will keep the number of stack frames the same

[14:54] <patrickb> nine: That's also a strange one.

[15:00] <patrickb> nine: I'll have a look later.

[15:10] *** patrickb left
[15:12] *** squashable6 left
[15:16] *** squashable6 joined
[15:27] *** pamplemousse joined
[15:45] *** robertle left
[16:02] <AlexDaniel> c: all sub f(--> Nil) { say "{1}"; }; sub g(--> 2) { say "{1}"; }; sub h { say "{1}"; }; f; g; h;

[16:03] <committable6> AlexDaniel, https://gist.github.com/5d984e23482807fb04214c05e10e3d6f

[16:04] *** pamplemousse left
[16:05] <Geth> ¦ rakudo: AlexDaniel assigned to chloekek Issue String interpolation with block evaluates to declared return value of enclosing routine, if any https://github.com/rakudo/rakudo/issues/3070

[16:08] <ugexe> something weird about that is `say 1` should be returning True, and thus fail the Nil type check. but it doesnt?

[16:08] <ugexe> m: sub f(--> Nil) { say 1; }; say f()

[16:08] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «1␤Nil␤»

[16:09] <ugexe> m: sub f(--> Bool) { say 1; }; say f()

[16:09] <jnthn> --> Nil isn't a type check, but rather a request to return Nil

[16:09] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «1␤True␤»

[16:10] <ugexe> ah of course

[16:45] *** pamplemousse joined
[17:03] <timotimo> i just turned a bunch of modules and a bin/ script into one single file with a little perl6 script :3

[17:07] *** MasterDuke joined
[17:08] <MasterDuke> lizmat: http://code.activestate.com/lists/tcl-core/13692/ would seem to suggest libtommath could be made a bunch faster at stringifying big numbers

[17:08] <yoleaux> 06:48Z <nine> MasterDuke: what mbc.nqp? I don't see an mbc.nqp. Why would there be a leftover prototype lying around? You must be imaginging things! *slowlybacksoutoftheroom*

[17:09] <MasterDuke> nine: my mind must be playing tricks with me…

[17:09] *** MasterDuke left
[17:09] <timotimo> https://github.com/timo/App-MoarVM-ConfprogCompiler/blob/master/tools/generate_single_file_script.p

[17:09] <timotimo> https://github.com/timo/App-MoarVM-ConfprogCompiler/blob/master/tools/generate_single_file_script.p6

[17:39] <timotimo> is it bad and i should feel bad?

[17:40] <ugexe> it is bad. but you should not feel bad

[17:40] <timotimo> i'm relieved

[17:40] <timotimo> do you have ideas how to improve upon it? i mean, string replacement is of course not a great idea in general for code :)

[17:41] <timotimo> but maybe something i can change that's not an amount of work equivalent to a full rewrite?

[17:45] <ugexe> all the problems i see with it i'm sure you're well aware of lol

[17:45] <timotimo> haha

[17:46] <timotimo> i had to put a "don't make a dependency of a module to itself" check in because the ConfprogCompiler module has some pod in it with a usage example that has "use [...]ConfprogCompiler" in it

[17:47] <ugexe> what does $?FILE output?

[17:48] <timotimo> in what position?

[17:50] *** robertle joined
[17:52] <ugexe> inside a module that is packed with the script

[17:52] <ugexe> will it give the module file path, the script file path, or non-sense?

[17:59] <timotimo> i'd assume the script file path

[18:01] <timotimo> yes, that is the case

[18:02] <ugexe> i wonder how we'll get scripts that use e.g. $*DISTRIBUTION or %?RESOURCES working with that

[18:27] *** patrickb joined
[18:54] <timotimo> build a slang that has some special syntax to cut the module into pieces?

[18:55] <timotimo> i mean, perl5's FatPack or what it's called is dependency-less, right? apart from perl5's core?

[18:55] <timotimo> core and included modules

[19:07] <ugexe> i guess it'd juts have its own CUR to handle that

[19:16] * patrickb is setting up a xenial ubuntu VM to reproduce the travis environment :-S

[19:28] <vrurg> Funny, CORE.setting doesn't build if default language is set to 6.c...

[19:34] *** lucasb left
[19:55] <TreyHarris> Anyone happen to know if I can subscribe and configure Slack/GitHub integrations (er, "apps" now I guess) on (for instance) perl6/perl6-mode (for which I'm an admin) on my family Slack without its affecting anyone else?

[19:56] <TreyHarris> It's a nicer interface than email to watch the stream of issues go by

[20:00] <TreyHarris> The docs are rather unclear since they appear to envision GitHub orgs as having one-to-one relationships with business groups who would have a single Slack

[20:07] *** MasterDuke joined
[20:13] <patrickb> nine: I can't manage to reproduce the Inline::Perl6 test failure.

[20:15] <patrickb> nine: I have installed a perl6 2019.07 using rakudobrew, then a perl 5.30 using perlbrew, then `zef install Inline::Perl5`, then cloned Inline-Perl6, `perl Makefile.PL`, `make`, `make test`

[20:18] <TreyHarris> timotimo: did you write that script by hand? B/c it seems like nearly every package will have a "use <itself>" line in pod in a synopsis or something

[20:21] <AlexDaniel> jnthn++

[20:21] <AlexDaniel> (great progress on problem-solving tickets)

[20:22] <timotimo> TreyHarris: i wrote it by hand

[20:22] <AlexDaniel> jnthn: re “searching the IRC log doesn't seem to work”, maybe try quotable?

[20:22] <AlexDaniel> quotable6: QuantHash

[20:22] <quotable6> AlexDaniel, OK, working on it! This may take up to three minutes (4582161 messages to process)

[20:22] <AlexDaniel> slow but you can give it any perl6 regex

[20:23] <quotable6> AlexDaniel, 193 messages (2013-10-02⌁2018-04-12): https://gist.github.com/649fd2ad0865dec41d3e106719815678

[20:23] <patrickb> YAAAY I can reproduce the travis failure!

[20:24] <patrickb> I start to suspect the gcc version used on travis

[20:24] <AlexDaniel> aw crap :)

[20:25] <AlexDaniel> patrickb: favorite kind of issues https://github.com/rakudo/rakudo/issues/2988

[20:26] <patrickb> it's gcc 5 on travis

[20:27] <ugexe> openbsd probably uses some old ass gcc too

[20:33] <patrickb> it's the order of arguments

[20:33] <patrickb> -lmoar needs to be behind the .o file

[20:33] <timotimo> it does?

[20:33] <timotimo> why doesn't it have to be before?!

[20:34] <patrickb> Dunno. But I guess I know what I'll have to do now.

[20:46] <patrickb> Yup. Stuff is working now.

[20:46] <Geth> ¦ nqp/master: 23 commits pushed by (Patrick Böker)++

[20:46] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/cf84b86dd430...bc70e4214753

[20:49] <patrickb> Is there a way to retrigger an appveyor build of a PR?

[20:50] <patrickb> Wait, I think an nqp bump might be in order anyways. How does one do that?

[20:50] <timotimo> aye, on the appveyor page of the build there's a restart button

[20:50] <timotimo> i used to know how to do that but then the files moved

[20:50] <patrickb> timotimo: Not for me

[20:50] <timotimo> also there's a script that gives you a nice output of the commits your bump brought in

[20:51] <patrickb> I'll just look at a previous bump...

[20:51] <timotimo> that ought to do it

[20:52] <patrickb> tools/templates/NQP_REVISION is the file

[20:52] <jnthn> AlexDaniel: Can you constrain quotable6 to a nick?

[20:56] <patrickb> timotimo: Where's the bump utility?

[20:56] <jnthn> quotable6: TimToady set flattening

[20:56] <quotable6> jnthn, OK, working on it! This may take up to three minutes (4582161 messages to process)

[20:56] <timotimo> the Z script has one, at the very least

[20:57] <timotimo> but it really wants to own your checkouts of moar, nqp, and rakudo

[20:57] <quotable6> jnthn, 4 messages (Inf⌁-Inf): https://gist.github.com/41ea817936a4a81147ed5db2c651cd19

[20:58] <jnthn> Inf? :D

[20:58] <jnthn> oh...it's Perl 6 regex

[20:59] <jnthn> quotable6: TimToady .+ "set flattening"

[20:59] <quotable6> jnthn, OK, working on it! This may take up to three minutes (4582161 messages to process)

[20:59] <quotable6> jnthn, Found nothing!

[21:00] <patrickb> TIL the string in the version file is just the output of `git describe`.

[21:01] <[Coke]> :)

[21:01] <jnthn> quotable6: TimToady .+ "set" .+ "flattening"

[21:01] <quotable6> jnthn, OK, working on it! This may take up to three minutes (4582161 messages to process)

[21:01] <jnthn> I don't seem to be very good at this bot :)

[21:02] <jnthn> I'm sure the topic was about sets, flattening, and set of set

[21:02] <quotable6> jnthn, Found nothing!

[21:03] <jnthn> afk for a bit

[21:04] <AlexDaniel> timotimo: not exactly, I use separate repos for that

[21:04] <AlexDaniel> but I only use it for bumps

[21:05] <AlexDaniel> jnthn: I don't think you can constrain it to some specific nick :(

[21:06] <AlexDaniel> https://github.com/perl6/whateverable/issues/271

[21:06] <AlexDaniel> it's unlikely I'll ever work on quotable6 unless it is fixed to work with colabti, or something

[21:07] <AlexDaniel> quotable6: .+ "set" .+ "flattening"

[21:07] <quotable6> AlexDaniel, OK, working on it! This may take up to three minutes (4582161 messages to process)

[21:08] <AlexDaniel> timotimo: https://github.com/rakudo/star/issues/141

[21:08] <AlexDaniel> timotimo: can you fix that?

[21:09] <AlexDaniel> same link but should be https://rakudostar.com/latest/star/win64 I think

[21:09] <AlexDaniel> so a redirect will do

[21:10] <timotimo> but we don't have rakudo star releases on github?

[21:10] <AlexDaniel> https://rakudostar.com/latest/star/

[21:10] <AlexDaniel> we have them here :)

[21:10] <AlexDaniel> for now, at least

[21:10] <quotable6> AlexDaniel, «timed out after 180 seconds» «exit signal = SIGHUP (1)»

[21:10] <timotimo> oh

[21:10] <timotimo> not the same link as the other redirects you mean

[21:10] <AlexDaniel> yeah

[21:11] <timotimo> seems to work now

[21:13] <AlexDaniel> timotimo: the one for windows doesn't: https://rakudo.org/latest/star/win64

[21:13] <AlexDaniel> other ones have an extra slash after a redirect: https://rakudo.org/files/star//macos

[21:14] *** rml joined
[21:15] <timotimo> ah, it must turn win64 into windows?

[21:15] <timotimo> that works now

[21:16] <AlexDaniel> timotimo: thank you!

[21:17] <AlexDaniel> “FYI, rt.perl.org went read-only for Perl6 bugs ~4 months ago.”

[21:17] <AlexDaniel> xD

[21:17] <AlexDaniel> I didn't know

[21:20] <AlexDaniel> is anybody waiting for a point release, by the way?

[21:20] <AlexDaniel> does it make sense to make one?

[21:20] <AlexDaniel> here's the discussion: https://github.com/rakudo/rakudo/issues/3067

[21:21] <AlexDaniel> fwiw even though the next one is scheduled for September, there's no guarantee that it will actually happen in September

[21:21] <AlexDaniel> given how explosive the current development efforts are

[21:21] <timotimo> moar had some very important changes just after the release

[21:22] <AlexDaniel> timotimo: “some” which are linked from that ticket or not?

[21:22] <AlexDaniel> ( https://github.com/rakudo/rakudo/issues/3067 )

[21:23] <timotimo> i'd also love the confprog changes

[21:24] <timotimo> 9cf16bb7b and e07c0f252

[21:24] <patrickb> appveyor currently shows some test failures for my spaces-in-path PR. I looked a bit in to them, they are all far away from any build system concerns. I'm inclined to merge. Any objections?

[21:24] <AlexDaniel> timotimo: leave a comment, please

[21:25] <AlexDaniel> patrickb: you can do whatever you want on master :)

[21:25] <AlexDaniel> especially that far from the next release

[21:25] <timotimo> OK

[21:26] <Geth> ¦ rakudo/master: 11 commits pushed by (Patrick Böker)++

[21:26] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/ecf2b1e4fa96...8728730e7023

[21:26] <AlexDaniel> patrickb: why is appveyor unhappy though? Didn't we fix that 06-struct.t issue?

[21:26] <MasterDuke> interesting. my first attempt at implementing that Barrett stringification algorithm starts getting faster than plain ~ at around 2**75000, which has 22578 chars

[21:26] <patrickb> AlexDaniel: https://ci.appveyor.com/project/rakudo/rakudo/builds/26113813/job/di0vo8lyug97qbxc

[21:27] <MasterDuke> and that's implementing it in pure perl6

[21:27] <AlexDaniel> patrickb: that's not right, please file a ticket :S

[21:27] <AlexDaniel> patrickb: and yeah, the struct problem is still there…

[21:28] <AlexDaniel> this was the ticket: https://github.com/rakudo/rakudo/issues/3009

[21:29] <MasterDuke> though i've not done it exactly right, my stringification is a couple chars shorter

[21:31] <timotimo> that's pretty neat

[21:43] <patrickb> AlexDaniel: Any objections to merging te binary release guide?

[21:43] <AlexDaniel> ah, that PR was not merged

[21:43] <AlexDaniel> geez

[21:43] <patrickb> I didn't want to merge it before the spaces-in-path thing was in.

[21:44] <patrickb> I guess that's a yes. :-)

[21:44] <AlexDaniel> no, not that one

[21:44] <AlexDaniel> this https://github.com/MoarVM/MoarVM/pull/1138

[21:44] <AlexDaniel> ok, merged it

[21:44] <Geth> ¦ nqp: 8e7ba123a7 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/templates/MOAR_REVISION

[21:44] <Geth> ¦ nqp: [MoarVM Bump] Brings 5 commits

[21:44] <Geth> ¦ nqp: 

[21:44] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2019.07-12-gab7bac5ad...2019.07-17-ga7563e71b

[21:44] <Geth> ¦ nqp: a7563e71b Merge pull request #1138 from Kaiepi/cstruct-inlined-arrays

[21:44] <Geth> ¦ nqp: 53a6308c4 Get moar build working with spaces in path

[21:44] <Geth> ¦ nqp: f0978d6a5 Jit getuniprop_(int|bool|str)

[21:44] <Geth> ¦ nqp: c3c9d7dfa Bump level until after instrumenting

[21:44] <Geth> ¦ nqp: 67384082e Fix pointer arithmetic in inlined CArrays in CStruct/CPPStruct REPRs

[21:44] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/8e7ba123a7

[21:44] <Geth> ¦ rakudo: 7da5744976 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/templates/NQP_REVISION

[21:44] <Geth> ¦ rakudo: [NQP Bump] 8e7ba123a [MoarVM Bump] Brings 5 co […]

[21:44] <Geth> ¦ rakudo: 

[21:44] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2019.07-45-gbc70e4214...2019.07-46-g8e7ba123a

[21:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7da5744976

[21:46] <AlexDaniel> patrickb: yes, call it release-guide-binary.md :)

[21:46] <AlexDaniel> patrickb: release_guide.pod needs to be renamed anyway

[21:46] <patrickb> I tried to align it to release_guide.pd

[21:46] <patrickb> OK

[21:46] <AlexDaniel> or something… that's perl5 pod?

[21:47] *** rml left
[21:48] <AlexDaniel> patrickb: otherwise yeah, it's good to go

[21:49] <Geth> ¦ rakudo: 3427391631 | (Patrick Böker)++ | 8 files

[21:49] <Geth> ¦ rakudo: Files for binary releases

[21:49] <Geth> ¦ rakudo: 

[21:49] <Geth> ¦ rakudo: Documentation + auxiliary files for doing binary releases.

[21:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3427391631

[21:49] <Geth> ¦ rakudo: cde40557d3 | (Patrick Böker)++ (committed using GitHub Web editor) | 8 files

[21:49] <Geth> ¦ rakudo: Merge pull request #3049 from patzim/binary-release

[21:49] <Geth> ¦ rakudo: 

[21:49] <Geth> ¦ rakudo: Files for binary releases

[21:49] <AlexDaniel> we can tweak it as we go, it's just docs

[21:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cde40557d3

[21:50] <dogbert17> hmm, I'm unable to build ...

[21:52] <dogbert17> "read_config_from_command" is not exported by the NQP::Config module # what am I missing

[21:53] <patrickb> dogbert17: You have a stale nqp-configure submodule. Did you do a `git pull`?

[21:53] <dogbert17> yup

[21:53] <patrickb> It should automatically update that submodule on pull...

[21:53] <dogbert17> I see this: M 3rdparty/nqp-configure

[21:54] <MasterDuke> does anyone want to take a look at my Barrett implementation (https://gist.github.com/MasterDuke17/b7a68b6e36d2b38f803f58251174226c) and compare it to http://code.activestate.com/lists/tcl-core/13692/ to see what i've done wrong? knowing tcl might help

[21:54] <Geth> ¦ star: ronaldxs++ created pull request #142: Update README.md

[21:54] <Geth> ¦ star: review: https://github.com/rakudo/star/pull/142

[21:54] <patrickb> dogbert17: can you check what `git config --get submodule.recurse` returns?

[21:56] <dogbert17> from the rakudo dir ?

[21:56] <patrickb> Yes

[21:57] <patrickb> checking in the nqp dir as well might not hurt

[21:57] <dogbert17> it returns true

[21:57] <dogbert17> building with rakudobrew also fails

[21:57] <patrickb> same error?

[21:58] <dogbert17> yup

[21:58] <dogbert17> I ran "rakudobrew build moar master"

[21:59] <patrickb> I start to suspect that submodule recurse business doesn't do how it was intended...

[22:01] <patrickb> Something along the lines of `git submodule sync 3rdparty/nqp-configure && git submodule update 3rdparty/nqp-configure` should fix it.

[22:01] <dogbert17> I'm on git version 2.7.4 if that makes a difference

[22:01] <patrickb> For rakudobrew a `rakudobrew nuke moar-blead && rakudobrew build moar-blead` should fix it.

[22:03] <dogbert17> trying now

[22:03] <dogbert17> if I'm the only one having a problem I guess we can relax a bit :)

[22:06] <AlexDaniel> MasterDuke: how off are your results?

[22:07] <MasterDuke> for 2**256, just 2 chars. for 2**300000, 1593 chars

[22:08] <AlexDaniel> MasterDuke: where's      `incr index -1` ?

[22:09] <AlexDaniel> ah, you simply do $index - 1 later

[22:09] <MasterDuke> i just pass $index - 1 later on instead. otherwise i'd have to `is copy` $index

[22:09] <MasterDuke> the missing chars all seem to be 0s, so it's something about the padding

[22:10] <patrickb> dogbert17: Does it work?

[22:13] <dogbert17> patrickb: I wiped my rakudo install and I wiped my moar-master in rakudobrew. That seems to have fixed it

[22:15] <AlexDaniel> MasterDuke: $left is always only 0 or 1 in their version?

[22:16] <AlexDaniel> because their format line is a bit different, fwiw

[22:16] <AlexDaniel> also could it be the difference between sprintf and tcl's format?

[22:16] <MasterDuke> yeah

[22:16] <MasterDuke> how is it different?

[22:17] <AlexDaniel> ahhh you have precedence error

[22:17] <AlexDaniel> hm no… hold on

[22:17] <AlexDaniel> no, it's fine

[22:18] <AlexDaniel> MasterDuke: it's different because if $left is say 2 then their output is "" and yours will be the number itself

[22:18] <AlexDaniel> but that doesn't matter if $left is always just 0 or 1

[22:18] <AlexDaniel> so it's not that…

[22:19] <AlexDaniel> could it be something like

[22:19] <AlexDaniel> m: say +"0005"

[22:19] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «5␤»

[22:20] <AlexDaniel> so in Barrett_todigits_rec you sometimes return a string

[22:20] <AlexDaniel> and if that is then numified, it'll drop leading zeroes

[22:21] <MasterDuke> but it isn't numified, just concatenated

[22:22] <MasterDuke> fwiw, putting ~ before all the calls doesn't change anything

[22:22] <AlexDaniel> m: sub foo { if True { 60 } else { 42 } }; say foo

[22:22] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «60␤»

[22:22] <AlexDaniel> m: sub foo { if False { 60 } else { 42 } }; say foo

[22:22] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «42␤»

[22:23] *** pamplemousse left
[22:31] * patrickb is off to bed

[22:31] <patrickb> o/

[22:32] *** patrickb left
[22:32] <timotimo> o/

[22:34] <AlexDaniel> MasterDuke: heh, it's a nice little puzzle… I'd love to know what's different

[22:37] <AlexDaniel> MasterDuke: what about  `my @nL = $n;` ?

[22:38] <AlexDaniel> MasterDuke: `set nL [list $n]` seems to be like `my @nL = $n;`

[22:39] <AlexDaniel> like: set n 1000; set nL [list $n]; puts [lindex $nL 0] # that's 1000

[22:40] <AlexDaniel> geez it has been like 5 or more years since the last time I touched tcl, absolutely zero stuff remembered :)

[22:40] <MasterDuke> i've never used it before

[22:41] <MasterDuke> but no, that really throws it off, completely the wrong value

[22:41] <AlexDaniel> MasterDuke: did you fix it for shiftL too?

[22:41] <AlexDaniel> and also @mL

[22:42] <AlexDaniel>  my @nL = $n;  my @shiftL = $shift;  my @mL = 1049;

[22:42] <MasterDuke> oh ho!

[22:42] <AlexDaniel> I'm a bit surprised I didn't see it right away

[22:43] <AlexDaniel> *even if* the value is wronger now, it's still closer to the actual algorithm :)

[22:44] <MasterDuke> AlexDaniel++ correct value now. though a bunch slower

[22:44] <AlexDaniel> whew, geez

[22:46] <AlexDaniel> MasterDuke: I don't know what's the current state of rakudo's performance, but what about getting rid of recursion?

[22:47] <MasterDuke> now it doesn't get faster until around 2**250000

[22:47] <AlexDaniel> also I wonder how fast +> is

[22:47] <AlexDaniel> it should be like really fast, but is it?

[22:47] <MasterDuke> AlexDaniel: yeah, now i can start optimizing the implementation. though really it should be done in C

[22:47] <MasterDuke> i tested, it's faster than div or /

[22:48] <AlexDaniel> nice

[22:50] <MasterDuke> the sprintf is what really slows it down

[22:52] <MasterDuke> is lizmat's experimental one available?

[22:52] <AlexDaniel> it's just 2 zeros, do some if-elses ?

[22:59] <AlexDaniel> m: my $number = 3; say $number >= 100 ?? $number !! $number >= 10 ?? ‘0’ ~ $number !! ‘00’ ~ $number;

[22:59] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «003␤»

[22:59] <AlexDaniel> m: my $number = 30; say $number >= 100 ?? $number !! $number >= 10 ?? ‘0’ ~ $number !! ‘00’ ~ $number;

[22:59] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «030␤»

[22:59] <AlexDaniel> m: my $number = 300; say $number >= 100 ?? $number !! $number >= 10 ?? ‘0’ ~ $number !! ‘00’ ~ $number;

[22:59] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «300␤»

[22:59] <AlexDaniel> m: my $number = 3000; say $number >= 100 ?? $number !! $number >= 10 ?? ‘0’ ~ $number !! ‘00’ ~ $number;

[22:59] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «3000␤»

[23:03] <MasterDuke> now it's faster at 2**50000

[23:05] <MasterDuke> at 2**2500000, building the tables takes 7s and the rest of the stringification took 11s

[23:07] <AlexDaniel> what about precompiling the tables?

[23:07] <AlexDaniel> how big are the tables anyway?

[23:09] <MasterDuke> 86% of the exclusive time is spent here https://github.com/rakudo/rakudo/blob/master/src/core/Int.pm6#L339-L341

[23:09] <timotimo> is it inlined a lot?

[23:09] <MasterDuke> `Inlining eliminated the need to create 8427689 call frames (that's 87.81%).`

[23:10] <timotimo> that's not bad

[23:11] <timotimo> i didn't even read the code yet

[23:11] <timotimo> did you update the gist to the latest code?

[23:12] <MasterDuke> the arrays are 18 elems for 2**2500000

[23:12] <MasterDuke> no, i'll do that

[23:12] <timotimo> and i guess those numbers are easily outside of 64bit?

[23:13] <MasterDuke> gist updated

[23:15] <MasterDuke> @nL and @mL yeah, @shiftL values are pretty small

[23:15] <timotimo> in the recursion step where you concat two invocations of barrett__rec, you could calculate $index - 1 only once!

[23:15] <timotimo> that's surely a great saving

[23:18] <AlexDaniel> interesting: “for small integer values of n […], it's always faster to use direct multiplication rather than exponentiation via std::pow(x, n)” https://baptiste-wicht.com/posts/2017/09/cpp11-performance-tip-when-to-use-std-pow.html

[23:19] <AlexDaniel> timotimo: but then you need a variable :)

[23:19] <AlexDaniel> I can probably guess which one is faster :P

[23:19] <timotimo> $index could be a native int, surely

[23:24] <MasterDuke> making stuff native ints didn't seem to help

[23:25] <timotimo> OK

[23:26] <MasterDuke> neither did not passing around the arrays in every Barrett_todigits_rec call

[23:26] <timotimo> how deep is this recursion? as deep as the elems for the arrays, plus one branch to the other side always?

[23:27] <MasterDuke> let's see. 501723 calls to Barrett_todigits_rec

[23:28] <timotimo> oof

[23:28] <timotimo> but index is always decremented by 1

[23:28] <timotimo> i don't know how $q moves, though

[23:29] <timotimo> how often does the thing happens where it calls todigits_rec only once?

[23:29] <timotimo> if that happens a lot, maybe the whole function could become a loop

[23:29] <timotimo> i.e. manual tail recursion optimization

[23:29] <AlexDaniel> I think tcl folks argued that if you want to implement that in C, do it without recursion

[23:30] <AlexDaniel> for whatever reason, see the original thread :)

[23:30] <AlexDaniel> so maybe getting rid of it is a good idea anyway

[23:31] <MasterDuke> timotimo: heh, only 6 times for 2**2500000

[23:31] <timotimo> OK, so not worth much, then

[23:33] <timotimo> does difference change much when you go for different numbers?

[23:33] <MasterDuke> what difference?

[23:36] <timotimo> er

[23:36] <timotimo> performance*

[23:39] <MasterDuke> what kind of different numbers then? i'm assuming you mean roughly the same number of digits, but different in some other way?

[23:40] <MasterDuke> seems to mostly just depend on number of digits

[23:40] <timotimo> oh, hold up, 2 ** 300000 isn't just 10000000000000000000 in base 10

[23:41] <timotimo> i'm smart today, aren't i

[23:44] <MasterDuke> anyway, i'm off to sleep

[23:45] <MasterDuke> this certainly seems promising, hope we can get it into rakudo somehow

[23:45] <timotimo> good night!

[23:45] <timotimo> maybe we just ask the libtommath people ...

[23:49] *** MasterDuke left
