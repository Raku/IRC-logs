[00:00] *** AlexDaniel left
[00:07] *** entonian joined
[00:11] *** entonian left
[00:11] *** japhb joined
[01:34] *** j3nnn1 left
[02:16] *** MasterDuke joined
[02:16] *** MasterDuke left
[02:16] *** MasterDuke joined
[03:03] <Geth> ¦ rakudo: ugexe++ created pull request #2660: Use path-spec instead of path for module-not-found errors

[03:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2660

[03:44] *** ufobat__ joined
[03:48] *** ufobat_ left
[06:12] *** robertle joined
[06:58] *** ufobat__ is now known as ufobat

[07:04] *** AlexDaniel joined
[07:12] *** ufobat left
[07:21] *** ufobat joined
[08:02] *** patrickb joined
[08:11] *** dct joined
[08:39] <patrickb> AlexDaniel: wrt relocatability, I'm working on that atm. It is actually working already. Still to do is JVM, Windows and more testing.

[09:05] *** dct left
[09:11] <|Tux|> Rakudo version 2018.12-269-gc2e272ef6 - MoarVM version 2018.12-45-ga9d02578a

[09:11] <|Tux|> csv-test-xs-20      0.436 -  0.445

[09:11] <|Tux|> csv-ip5xs           0.734 -  0.766

[09:11] <|Tux|> test-t --race       0.838 -  0.839

[09:11] <|Tux|> test-t              1.849 -  1.873

[09:11] <|Tux|> csv-ip5xs-20        6.337 -  6.417

[09:11] <|Tux|> test                7.703 -  8.223

[09:11] <|Tux|> test-t-20 --race   10.030 - 10.277

[09:11] <|Tux|> csv-parser         21.678 - 22.615

[09:11] <|Tux|> test-t-20          31.527 - 32.054

[10:32] <AlexDaniel> patrickb: yes, that is wonderful

[10:34] <lizmat> Files=1266, Tests=88056, 401 wallclock secs (19.92 usr  5.72 sys + 2661.59 cusr 227.44 csys = 2914.67 CPU)

[10:34] <lizmat> that's quite a bit more than yesterday, jnthn  ^^^

[10:35] <lizmat> (376 -> 401)

[10:35] <jnthn> Curious, at most here I saw a second or two

[10:35] * jnthn runs it again

[10:35] <lizmat> well, could be a fluke, but won't know for sure until next night

[10:39] <jnthn> Huh, and my latest run was faster than many I've had in recent days (but only within noise)

[10:42] <lizmat> Files=1266, Tests=88056, 392 wallclock secs (21.58 usr  7.10 sys + 2771.88 cusr 231.77 csys = 3032.33 CPU)

[10:43] <lizmat> ok, on a hot machine and less than last night's, I guess last night's was a fluke

[10:43] <lizmat> sorry for the noise

[10:45] <jnthn> np, given I added us producing extra debug info, it was entirely reasonable to think something might have had more effect than expected

[11:00] <Geth> ¦ rakudo: f7704267de | (Nick Logan)++ | 3 files

[11:00] <Geth> ¦ rakudo: Use path-spec instead of path for module-not-found errors

[11:00] <Geth> ¦ rakudo: 

[11:00] <Geth> ¦ rakudo: The path portion of the path-spec is often not enough to debug

[11:00] <Geth> ¦ rakudo: what wasn't found. This change includes the entire path-spec

[11:00] <Geth> ¦ rakudo: when giving an error for e.g. `use NotFound;`

[11:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f7704267de

[11:00] <Geth> ¦ rakudo: 82fde76874 | niner++ (committed using GitHub Web editor) | 3 files

[11:00] <Geth> ¦ rakudo: Merge pull request #2660 from ugexe/path-spec-in-error

[11:00] <Geth> ¦ rakudo: 

[11:00] <Geth> ¦ rakudo: Use path-spec instead of path for module-not-found errors

[11:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/82fde76874

[11:45] *** dogbert2_ joined
[11:52] *** robertle_ joined
[11:58] *** robertle_ left
[11:59] *** AlexDaniel left
[12:00] *** robertle_ joined
[12:02] *** brrt joined
[12:05] *** leont joined
[12:24] *** robertle_ left
[12:57] *** leont left
[13:02] *** patrickb left
[13:03] *** brrt left
[13:10] <jnthn> m: use Test; plan 1; my $i = 0; loop { last if ++$i == 5; $_ = 42; when Int { } }; is $i, 5;

[13:10] <camelia> rakudo-moar 82fde7687: OUTPUT: «1..1␤# Looks like you planned 1 test, but ran 0␤»

[13:10] <jnthn> committable6: 2018.12 use Test; plan 1; my $i = 0; loop { last if ++$i == 5; $_ = 42; when Int { } }; is $i, 5;

[13:10] <committable6> jnthn, ¦2018.12: «1..1␤# Looks like you planned 1 test, but ran 0␤ «exit code = 255»»

[13:12] <dogbert2_> jnthn: another stab at the blockers?

[13:13] <jnthn> dogbert2_: Taking care of the things I said I'd do  at the end of https://github.com/rakudo/rakudo/issues/2644

[13:18] <jnthn> Got an optimizer patch that fixes the above

[13:22] *** patrickb joined
[13:24] <dogbert2_> jnthn: very cool

[13:29] <Geth> ¦ rakudo: c6053e6a5d | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[13:29] <Geth> ¦ rakudo: Don't inline immediate blocks using p6return

[13:29] <Geth> ¦ rakudo: 

[13:29] <Geth> ¦ rakudo: Otherwise, we can end up with, for instance, a `loop` that does a

[13:29] <Geth> ¦ rakudo: smart-match ending up causing a return from the block containing the

[13:29] <Geth> ¦ rakudo: loop itself, thus terminating not only the loop, but also skipping any

[13:29] <Geth> ¦ rakudo: code in the block after the loop. Related to #2644.

[13:29] <synopsebot> RAKUDO#2644 [open]: https://github.com/rakudo/rakudo/issues/2644 [regression][⚠ blocker ⚠] Some regression with Cro::WebSocket

[13:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c6053e6a5d

[13:34] <Geth> ¦ roast: e95d29d6c1 | (Jonathan Worthington)++ | S04-statements/when.t

[13:34] <Geth> ¦ roast: Successful `when` should not terminate a loop

[13:34] <Geth> ¦ roast: 

[13:34] <Geth> ¦ roast: A Rakudo optimizer bug made it do so in some cases (including the one

[13:34] <Geth> ¦ roast: provided here). Covers https://github.com/rakudo/rakudo/issues/2644.

[13:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e95d29d6c1

[14:06] *** patrickb left
[14:42] *** patrickb joined
[15:18] *** dogbert2_ left
[15:26] *** leont joined
[15:51] *** brrt joined
[16:00] *** patrickb left
[16:17] *** brrt left
[16:34] *** patrickb joined
[17:02] *** AlexDaniel joined
[17:29] <patrickb> o/

[17:36] *** gfldex left
[17:37] *** gfldex joined
[18:11] *** gfldex left
[18:26] <MasterDuke> nqp: my $a := 5.4; $a := "now a string"; say($a)

[18:26] <camelia> nqp-moarvm: OUTPUT: «now a string␤»

[18:26] <MasterDuke> is ^^^ more efficient than vvv?

[18:27] <MasterDuke> nqp: my num $a := 5.4; my str $b := "now a string"; say($b)

[18:27] <camelia> nqp-moarvm: OUTPUT: «now a string␤»

[18:31] <jnthn> MasterDuke: Naively, no, since the first two require a boxing

[18:32] <jnthn> MasterDuke: But I guess maybe SSA form would split it and then the boxing might be eliminated

[18:33] <jnthn> MasterDuke: I'd probably write the second just for readability, though. ;)

[18:33] <MasterDuke> jnthn: thanks, i thought the first might be a little worse and it looks like it is slightly so in practice

[18:34] <MasterDuke> trying to decide how much cleanup of https://github.com/perl6/nqp/blob/master/src/HLL/sprintf.nqp i really want to do along with the minimal changes needed for my branch to pass tests

[18:36] <MasterDuke> nqp: my int $a := 0; my str $c; my num $s := nqp::time_n(); while $a++ < 10_000_000 { my $b := nqp::sub_n(1.0, $a); $b := ~$b ~ " is a string"; $c := $b }; say($c); say(nqp::sub_n(nqp::time_n(), $s))

[18:36] <camelia> nqp-moarvm: OUTPUT: «-9999999 is a string␤2.3138508796691895␤»

[18:36] <MasterDuke> nqp: my int $a := 0; my str $c; my num $s := nqp::time_n(); while $a++ < 10_000_000 { my num $b := nqp::sub_n(1.0, $a); my $d := ~$b ~ " is a string"; $c := $d }; say($c); say(nqp::sub_n(nqp::time_n(), $s))

[18:36] <camelia> nqp-moarvm: OUTPUT: «-9999999 is a string␤2.244842529296875␤»

[18:37] <MasterDuke> i see a slightly larger difference locally, but maybe that's also my branches coming into play

[18:37] <MasterDuke> 2.55 vs 2.9

[18:47] <jnthn> dinner time &

[19:23] *** masak left
[19:25] *** masak joined
[20:39] <MasterDuke> nqp: my num $a := 0.0; say(nqp::sprintf("%#e5.2", [$a]))

[20:39] <camelia> nqp-moarvm: OUTPUT: «0.000000e+005.2␤»

[20:39] <MasterDuke> after my most recent cleanup to sprintf i'm getting `Directive e not applicable for type BOOTNum`

[20:40] <MasterDuke> which i don't understand

[20:40] <MasterDuke> nqp: my num $a := 0.0; say($a.HOW.name($a))

[20:40] <camelia> nqp-moarvm: OUTPUT: «BOOTNum␤»

[20:46] <MasterDuke> nqp: my str $a := "492384e2394"; my $b; my int $i := 0; my num $s := nqp::time_n(); while $i++ < 10_000_000 { $b := nqp::indexic($a, "e", 0) }; say($b); say(nqp::sub_n(nqp::time_n(), $s))

[20:46] <camelia> nqp-moarvm: OUTPUT: «6␤1.7762081623077393␤»

[20:46] <MasterDuke> nqp: my str $a := "492384e2394"; my $b; my int $i := 0; my num $s := nqp::time_n(); while $i++ < 10_000_000 { $b := nqp::index($a, "e", 0) }; say($b); say(nqp::sub_n(nqp::time_n(), $s))

[20:46] <camelia> nqp-moarvm: OUTPUT: «6␤0.18055200576782227␤»

[20:47] <MasterDuke> didn't realize indexic is that much slower than index, 10x

[20:56] *** dct joined
[20:57] *** leont left
[21:01] *** dct left
[21:09] <timotimo> it probably can't use the fast string search thing that can skip a bunch of letters at once when it sees the right letters in the haystack

[21:11] <MasterDuke> boyer-moore?

[21:13] <MasterDuke> timotimo: any idea about the error i'm getting?

[21:15] <MasterDuke> if anyone is interested, here's the diff https://gist.github.com/MasterDuke17/cc73afa856b21163138c1a4692c9b42d (on my branch, so there are some other changes compared to what's in NQP right now)

[21:16] <MasterDuke> but the branch is ok, it's just the diff that breaks things

[21:41] <timotimo> could it be a missing decont somewhere?

[21:42] <timotimo> like, is the check looking at a Scalar, but the error message is deconting to output the type it unexpectedly got?

[22:00] <MasterDuke> hm. name in message comes from `$type.HOW.name($type)`

[22:04] <MasterDuke> it goes through this https://github.com/perl6/nqp/blob/master/src/HLL/sprintf.nqp#L107 branch of next_argument()

[22:08] <timotimo> ah, bad-type-for-derctive gets called from an indiscriminate CATCH

[22:08] <timotimo> so who knows what the original exception was

[22:09] <MasterDuke> ah, right

[22:12] <MasterDuke> huh, i put `note('exception is: ' ~ $_);` here https://github.com/perl6/nqp/blob/master/src/HLL/sprintf.nqp#L404, but it doesn't get printed

[22:13] <timotimo> i'd say remove the CATCH and let the "regular" exception printer print it maybe?

[22:13] <timotimo> does "doesn't get printed" mean it makes absolutely no output? or just an empty text where the stringification is supposed to be?

[22:13] <MasterDuke> no output at all

[22:14] <timotimo> clearly something strange is happening, then?

[22:14] <lizmat> git diff

[22:14] <lizmat> oops

[22:14] <timotimo> what does removing the CATCH block entirely do?

[22:14] <MasterDuke> huh, no different output/error when i comment out the CATCH

[22:17] <timotimo> are your changes being properly respected in compilation?

[22:17] *** gfldex joined
[23:11] *** leont joined
