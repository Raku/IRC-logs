[00:01] *** ggoebel joined
[00:03] *** MasterDuke joined
[00:03] *** MasterDuke left
[00:03] *** MasterDuke joined
[00:06] *** lucasb left
[00:32] *** Kaiepi left
[00:38] *** vrurg left
[00:39] *** vrurg joined
[01:00] *** ggoebel left
[01:46] <Geth> ¦ rakudo: MasterDuke17++ created pull request #2835: Fix parsing of Unicode brackets in interpolation

[01:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2835

[02:27] *** Kaiepi joined
[02:39] *** TimToady left
[02:40] *** TimToady joined
[03:17] *** vrurg left
[06:58] <Geth> ¦ rakudo: ba07a62f2e | (Daniel Green)++ | src/Perl6/Grammar.nqp

[06:58] <Geth> ¦ rakudo: Fix parsing of Unicode brackets in interpolation

[06:58] <Geth> ¦ rakudo: 

[06:58] <Geth> ¦ rakudo: Add them as a possibility in postcircumfix bracket ending check.

[06:58] <Geth> ¦ rakudo: 

[06:58] <Geth> ¦ rakudo: Will be a fix for #2825 when tests are added.

[06:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ba07a62f2e

[06:58] <synopsebot> RAKUDO#2825 [open]: https://github.com/rakudo/rakudo/issues/2825 Different behavior between Unicode and ASCII operators

[06:58] <Geth> ¦ rakudo: 634c5de024 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | src/Perl6/Grammar.nqp

[06:58] <Geth> ¦ rakudo: Merge pull request #2835 from MasterDuke17/fix_parsing_of_unicode_brackets_in_interpolation

[06:58] <Geth> ¦ rakudo: 

[06:58] <Geth> ¦ rakudo: Fix parsing of Unicode brackets in interpolation

[06:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/634c5de024

[07:21] *** robertle joined
[08:03] <lizmat> m: sub a() { say "a" }; await start &a   # why doesn't this say anything ?

[08:03] <evalable6> lizmat, rakudo-moar 634c5de02: OUTPUT: «»

[08:03] <lizmat> m: sub a() { say "a" }; say await start &a   # aha!

[08:03] <evalable6> lizmat, rakudo-moar 634c5de02: OUTPUT: «&a␤»

[08:03] <lizmat> this feels like a  bug to me?

[08:04] <lizmat> m: sub a() { say "a" }; say await Promise.start(&a)

[08:04] <evalable6> lizmat, rakudo-moar 634c5de02: OUTPUT: «a␤True␤»

[08:05] *** Xliff left
[08:16] <masak> m: sub a() { say "a" }; say await start &a()

[08:16] <evalable6> masak, rakudo-moar 634c5de02: OUTPUT: «a␤True␤»

[08:16] <masak> lizmat: ^

[08:19] <lizmat> masak: that runs &a and then uses the result to start ?

[08:19] <lizmat> sub a() { sleep 1; say "a" }; my $a = await start &a(); say "b"; await $a

[08:19] <lizmat> m: sub a() { sleep 1; say "a" }; my $a = await start &a(); say "b"; await $a

[08:19] <evalable6> lizmat, rakudo-moar 634c5de02: OUTPUT: «(exit code 1) a␤An operation first awaited:␤  in block <unit> at /tmp/OwfTD4mmtu line 1␤␤D…»

[08:19] <evalable6> lizmat, Full output: https://gist.github.com/d5b19fab92a39b9fc3baabb8e049e42c

[08:23] <masak> m: start { sleep 1; say "a" }; say "b"

[08:23] <evalable6> masak, rakudo-moar 634c5de02: OUTPUT: «b␤»

[08:23] <masak> m: my $a = start { sleep 1; say "a" }; say "b"; await $a

[08:23] <evalable6> masak, rakudo-moar 634c5de02: OUTPUT: «b␤a␤»

[08:24] <masak> pretty clear to me that `start` expects "immediate code", not a reference to code which it'll call

[08:24] <masak> so if you do `start &a` without the parens, it'll go "yup, I just evaluated &a, it's a Sub" and consider itself done

[08:24] <masak> it won't call &a

[08:32] <lizmat> that feels LTA to me, as Promise.start(&a) *will* call the sub

[08:32] <lizmat> and start { } is nothing but syntactic sugar for that

[08:37] <masak> `start { }` is a phaser-like block, so I'd expect it to run the block immediately, like `BEGIN { }`

[08:38] <masak> with `Promise.start(&a)`, I have to pass &a in indirectly, otherwise it'll run too early, before it even gets passed as an argument

[08:38] <masak> I'm sorry, I don't see the LTA/inconsistency you do

[08:39] <masak> I wouldn't consider `start &a` desugaring to `start a()` to be an improvement; not unless all the phasers started doing the same, and probably not even then

[08:41] <timotimo> could also be awkward if something you "start ..." returns a callable (a closure over data that was legnthily evaluated for example) and immediately calls that

[08:46] <lizmat> hmmm...  ok

[08:59] <masak> zooming out, it's common for built-in syntax and API routines to differ in this way. the built-in syntax can thunk things for you -- with a routine, it's "Bring Your Own Thunk"

[08:59] * masak waves from macro land

[09:04] <jnthn> `start` is a statement prefix, meaning it implies a thunk if you don't follow it by a block

[09:04] <jnthn> And that thunk is what is passed to Promise.start

[09:04] <jnthn> So there's already a level of code implicitly there

[09:07] <lizmat> it just feels to me that "start &a" silently is not doing a thing you'd expect

[09:07] <lizmat> anyways, I get the thunkiness

[09:07] <lizmat> m: say await start 42

[09:07] <evalable6> lizmat, rakudo-moar 634c5de02: OUTPUT: «42␤»

[09:08] <lizmat> waterbed and all  :-)

[09:24] <masak> yes, that's what I mean. if you only have API for something, you have to thunk it yourself, with more syntax. if something is supported syntactically, the thunking can be done by the compiler.

[10:02] <lizmat> m: dd sprintf("%-05.0f", 42.3)   # this feels wrong

[10:02] <evalable6> lizmat, rakudo-moar 634c5de02: OUTPUT: «"00420"␤»

[10:02] <lizmat> m: dd sprintf("%-06.1f", 42.3)  # actually, an off by one it appears

[10:02] <evalable6> lizmat, rakudo-moar 634c5de02: OUTPUT: «"042.30"␤»

[10:20] <Guest16965> lizmat: perl -E 'say sprintf("%-05.0f", 42.3)' # 42

[10:20] <Guest16965> same with Ruby

[10:26] <Geth> ¦ rakudo: e6cbbcc822 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/Sprintf.pm6

[10:26] <Geth> ¦ rakudo: First stab at supporting %f

[10:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e6cbbcc822

[10:27] <Guest16965> in your secont example, i.e. 'sprintf("%-06.1f", 42.3)' both P5 and ruby returns 42.3

[10:27] <Guest16965> ignore the crappy spelling :)

[10:28] <lizmat> Guest16965++  # so the - is ignored in favour of the prefix 0

[10:29] <lizmat> Guest16965: how about spaces ?

[10:29] <Guest16965> good question :) (dogbert17 in disguise)

[10:31] <lizmat> $ 5 'say "---" . sprintf("%-08.1f", 42.3) . "---"'

[10:31] <lizmat> ---42.3    ---

[10:31] <lizmat> 6 'say "---" ~ sprintf("%-08.1f", 42.3) ~ "---"'

[10:31] <lizmat> ---00042.30---

[10:31] <lizmat> so looks like Perl 5 favours the - over the prefix 0

[10:32] <Guest16965> wasn't the minus for left/right justification?

[10:32] <lizmat> yes

[10:32] <lizmat> for "d" the behaviour is the same:

[10:32] <lizmat> $ 5 'say "---" . sprintf("%-08d", 42) . "---"'

[10:32] <lizmat> ---42      ---

[10:32] <lizmat> $

[10:33] <lizmat> $ 6 'say "---" ~ sprintf("%-08d", 42) ~ "---"'

[10:33] <lizmat> ---42      ---

[10:33] <lizmat> need to go afk for quite a while&

[10:33] <lizmat> well, today  :-)

[10:34] *** lizmat left
[10:34] <Guest16965> $ ruby -e 'puts "---" + sprintf("%-08d", 42) + "---"'

[10:34] <Guest16965> ---42      ---

[11:44] <|Tux|> Rakudo version 2019.03.1-187-ge6cbbcc82 - MoarVM version 2019.03-75-g9b1b60f66

[11:44] <|Tux|> csv-test-xs-20      0.432 -  0.448

[11:44] <|Tux|> csv-ip5xs           0.689 -  0.691

[11:44] <|Tux|> test-t --race       0.898 -  0.899

[11:44] <|Tux|> test-t              1.772 -  1.861

[11:44] <|Tux|> csv-ip5xs-20        5.774 -  5.836

[11:44] <|Tux|> test                6.912 -  6.974

[11:44] <|Tux|> test-t-20 --race   10.199 - 10.931

[11:44] <|Tux|> csv-parser         22.160 - 22.267

[11:44] <|Tux|> test-t-20          29.833 - 30.928

[12:00] *** llfourn left
[12:11] *** AlexDaniel` left
[12:12] *** tyil[m] left
[12:33] *** ggoebel joined
[12:35] *** llfourn joined
[12:41] *** llfourn left
[13:17] *** vrurg joined
[13:33] *** lucasb joined
[13:42] *** |Tux| left
[13:48] *** |Tux| joined
[14:06] <lucasb> m: sub foo { my $a=0; while $a++ < 5 { say ++(state $x) } }; foo()

[14:06] <evalable6> lucasb, rakudo-moar e6cbbcc82: OUTPUT: «1␤2␤3␤4␤5␤»

[14:06] <lucasb> m: sub foo { my $a=0; while $a++ < 5 { say ++(state $x); LAST {} } }; foo()

[14:06] <evalable6> lucasb, rakudo-moar e6cbbcc82: OUTPUT: «1␤1␤1␤1␤1␤»

[14:07] <lucasb> R#2836

[14:07] <synopsebot> R#2836 [open]: https://github.com/rakudo/rakudo/issues/2836 `LAST` loop inside `sub` increments `$` for every iteration

[14:26] <lucasb> m: while False { FIRST {} }

[14:26] <evalable6> lucasb, rakudo-moar e6cbbcc82: OUTPUT: «WARNINGS for /tmp/eQp6tELmdO:␤Useless use of LOOP_BLOCK_1 symbol in sink context (line 1)␤»

[14:28] <lucasb> m: my $a=0; while $a++ < 5 { LAST { say "a=$a" } }  # ok

[14:28] <evalable6> lucasb, rakudo-moar e6cbbcc82: OUTPUT: «a=6␤»

[14:28] <lucasb> m: sub foo { my $a=0; while $a++ < 5 { LAST { say "a=$a" } } }; foo()  # inside sub?

[14:28] <evalable6> lucasb, rakudo-moar e6cbbcc82: OUTPUT: «a=0␤»

[14:36] *** llfourn joined
[14:41] *** llfourn left
[14:49] <lucasb> m: while False { LAST { say 'ok' } }  # this should not run, right?

[14:49] <evalable6> lucasb, rakudo-moar e6cbbcc82: OUTPUT: «ok␤»

[14:51] <lucasb> m: sub foo { my $a=0; while ++$a < 5 { LAST say 'ok' } }; foo

[14:51] <evalable6> lucasb, rakudo-moar e6cbbcc82: OUTPUT: «(exit code 1) ok␤No such method '!capture_phasers' for invocant of type 'Code'␤  in block <unit> at /tmp/JtaFN8kX8Y line 1␤␤»

[14:58] *** llfourn joined
[15:03] *** llfourn left
[15:47] *** llfourn joined
[15:50] *** vrurg left
[15:52] *** llfourn left
[15:58] *** llfourn joined
[16:00] *** vrurg joined
[16:03] *** llfourn left
[16:11] *** robertle left
[16:44] *** dogbert17 joined
[17:54] *** robertle joined
[17:59] *** llfourn joined
[18:04] *** llfourn left
[19:00] <MasterDuke> i get an odd error at the very end when doing a make install in rakudo. here's a gist https://gist.github.com/MasterDuke17/06c3abd8b028c2e2229718b9fad9ce7f with some context, this is the actual error `cp: cannot create regular file '/home/dan/Source/perl6/install/bin/perl6-m': Text file busy`

[19:02] <MasterDuke> oh, nm, looks like it was because some stray processes had it open

[19:02] <MasterDuke> killed them and everything was fine

[20:00] *** llfourn joined
[20:05] *** llfourn left
[20:17] *** lizmat joined
[20:49] <dogbert17> lizmat: gcc warns about (s)printf("%-05.0f\n", 42.3), "warning: '0' flag ignored with '-' flag in gnu_printf format"

[21:02] *** vrurg left
[21:15] *** vrurg joined
[21:15] *** vrurg left
[21:23] *** llfourn joined
[21:28] *** llfourn left
[21:57] *** vrurg joined
[22:07] <AlexDaniel> hm, how come there are two Cro::WebSockets https://modules.perl6.org/search/?q=websocket

[22:09] <jnthn> Beats me, I think I've only ever released it to CPAN...

[22:09] <timotimo> good question, but one of them is a month older

[22:09] <AlexDaniel> jnthn: both are on cpan :)

[22:09] <jnthn> AlexDaniel: Yeah, just saying it's not the usual "in both ecosystems" situation

[22:10] <jnthn> Also: the process of producing the tarballs has been scripted for a long while, so I dunno right off what mistake could have been made

[22:10] <timotimo> haha

[22:11] <timotimo> [Thu Apr 11 19:51:59 2019] [info] Using ModulesPerl6::DbBuilder::Dist::Source::CPAN to load cpan://id/J/JN/JNTHN/Perl6/Cro-WebSocket-0.8.0.1.meta

[22:11] <timotimo> [Thu Apr 11 19:51:59 2019] [info] Loading META file from dists-from-CPAN/id/J/JN/JNTHN/Perl6/Cro-WebSocket-0.8.0.1.meta

[22:11] <timotimo> [Thu Apr 11 19:59:30 2019] [info] Using ModulesPerl6::DbBuilder::Dist::Source::CPAN to load cpan://id/J/JN/JNTHN/Perl6/cro-websocket-0.8.0.meta

[22:11] <timotimo> [Thu Apr 11 19:59:30 2019] [info] Loading META file from dists-from-CPAN/id/J/JN/JNTHN/Perl6/cro-websocket-0.8.0.meta

[22:11] <timotimo> you see the difference? :)

[22:12] <AlexDaniel> Cro-WebSocket and cro-websocket?

[22:12] <timotimo> yeah

[22:12] <jnthn> Oh...huh...

[22:12] <timotimo> jnthn: you should be able to delete the all-lowercase variant from your cpan folder somehow

[22:12] <timotimo> probably through the pause web interface?

[22:12] <timotimo> or the module updater should learn about this

[22:13] <jnthn> But uhh....

[22:13] <jnthn> Isn't that just about the tarball name?

[22:13] <timotimo> no clue :(

[22:13] <jnthn> I thought that wasn't important at all...

[22:13] <jnthn> Just the META6.json content

[22:13] <timotimo> you'd think that, yeah :D

[22:15] * jnthn goes to rest a bit

[22:15] <timotimo> good rest

[23:21] *** epony left
[23:21] *** jdv79 left
[23:21] *** b2gills left
[23:24] *** llfourn joined
[23:28] *** epony joined
[23:28] *** jdv79 joined
[23:28] *** b2gills joined
[23:29] *** llfourn left
