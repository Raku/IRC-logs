[00:02] <MasterDuke> vrurg: you should add yourself to the CREDITS

[00:03] <vrurg> MasterDuke: lizmat already said that. I'm waiting until something really interesting would be pulled in.

[00:04] <vrurg> Thanks anyway! :)

[00:06] <MasterDuke> i think 4 fixed issues is 3 more than you need to be included

[00:06] <MasterDuke> but that's up to you of course

[00:14] <vrurg> :D too focused on getting things fixed, perhaps. Just every time I get into a bug it turns out there is more bug lurking behind it. I just can't stop chasing them...

[00:16] <MasterDuke> you definitely didn't start with the easiest possible bugs...

[00:17] *** ggoebel joined
[00:19] <vrurg> MasterDuke: Not really. What would be so difficult in making Subset matching only the where constraint? (It is currently matching itself). But behind it there is a bug with about cloning proto methods (and, probably, not only them).

[00:19] <vrurg> Without fixing the latter the former can't be fixed too.

[00:20] <vrurg> Otherwise there no complications. ;)

[00:27] *** lucasb left
[00:52] *** ggoebel left
[01:59] *** leont left
[01:59] <ugexe> There was no global deoptimization triggered by the profiled code.

[01:59] <ugexe> There was one global deoptimization triggered by the profiled code.

[01:59] <ugexe> There were 17 global deoptimization triggered by the profiled code.

[01:59] <ugexe> why does that say 3 seemingly different things

[02:00] <ugexe> results from a --profile ^

[02:00] <ugexe> e.g. how were there 17 global deoptimizations triggered by the profiled code when it just said there was 0 (and 1)

[03:20] *** ufobat_ joined
[03:22] *** ufobat left
[03:27] *** squashable6 left
[03:27] *** squashable6 joined
[03:27] *** ChanServ sets mode: +v squashable6

[03:54] <ugexe> .tell patrickb https://gist.github.com/ugexe/a88a63154eeedb1ada9c2581390e6d5b

[03:54] <yoleaux> ugexe: I'll pass your message to patrickb.

[04:11] *** epony left
[04:24] *** epony joined
[04:32] *** kawaii left
[04:34] *** kawaii joined
[06:26] *** robertle left
[07:46] *** epony left
[08:00] *** [Tux] left
[08:28] *** [Tux] joined
[09:35] *** samcv left
[09:38] *** samcv joined
[09:43] *** robertle joined
[10:14] *** leont joined
[10:14] <lizmat> ugexe: maybe it is a junction ?   :-)

[11:07] *** epony joined
[11:28] <AlexDaniel> jnthn: maybe https://github.com/rakudo/rakudo/issues/1501#issuecomment-475580927

[11:28] <AlexDaniel> pretty sure it also affects Cro, and I'm suffering because of leaks too…

[12:39] *** AlexDaniel left
[12:39] *** robertle left
[12:40] *** AlexDaniel joined
[12:40] *** lucasb joined
[12:58] <jnthn> AlexDaniel: Maybe next week; really hope to have more time then.

[12:59] *** patrickb joined
[13:31] <vrurg> jnthn: thank for your advises! I found the fix seemingly. Just didn't have time to test it throughly.

[14:08] *** robertle joined
[14:18] *** TimToady left
[14:27] *** TimToady joined
[14:36] *** MasterDuke left
[15:01] *** AlexDaniel left
[15:01] *** AlexDaniel joined
[16:10] *** robertle left
[16:12] <vrurg> Could somebody merge PR 2780, please?

[16:16] <jnthn> vrurg: Should let it pass CI first, but I took a look over it and it looks sensible

[16:17] <vrurg> jnthn: Thanks!

[16:17] <vrurg> I wanna get back to subsets and would prefer to merge the fix from the master.

[16:24] <lizmat> oops, saw this too late

[16:24] <lizmat> looks like we lost Geth ?

[16:25] <lizmat> moritz timotimo ^^

[16:25] <lizmat> jnthn vrurg builds clean for me... running tests now

[16:29] <moritz> seems we have lost hack

[16:30] <moritz> reboot

[16:30] *** p6lert left
[16:30] *** dalek joined
[16:30] *** ChanServ sets mode: +v dalek

[16:30] *** synopsebot joined
[16:30] *** p6lert joined
[16:30] *** Geth joined
[16:30] *** ChanServ sets mode: +v synopsebot

[16:30] *** ChanServ sets mode: +v Geth

[16:31] <lizmat> moritz++

[16:34] <lizmat> jnthn vrurg spectests ok for me

[16:43] <Geth> ¦ rakudo: bea5199342 | (Elizabeth Mattijsen)++ | src/core/Parameter.pm6

[16:43] <Geth> ¦ rakudo: Added helper method Parameter.cool_constant

[16:43] <Geth> ¦ rakudo: 

[16:43] <Geth> ¦ rakudo: Not intended to be used outside of the core.  Returns the Cool value of

[16:43] <Geth> ¦ rakudo: a Parameter if it is a Cool constant.  Otherwise returns Nil  E.g.:

[16:43] <Geth> ¦ rakudo: 

[16:43] <Geth> ¦ rakudo:     sub a("foo") { }; dd &a.signature.params[0].cool_constant;  # "foo"

[16:43] <Geth> ¦ rakudo:     sub b($foo ) { }; dd &a.signature.params[0].cool_constant;  # Nil

[16:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bea5199342

[16:45] <ugexe> curious, why not make it a private method and call that private method through nqp so as note to expose it publically?

[16:47] <ugexe> im probably misremembering and its private attributes that can be accessed

[16:48] <Geth> ¦ rakudo: dd1c805949 | (Elizabeth Mattijsen)++ | src/core/Main.pm6

[16:48] <Geth> ¦ rakudo: Simplify candidate selection in MAIN usage

[16:48] <Geth> ¦ rakudo: 

[16:48] <Geth> ¦ rakudo: A recent change tried to be smarter on which MAIN candidates to show.  This

[16:48] <Geth> ¦ rakudo: was however too smart for its own good, omitting candidates when it shouldn't.

[16:48] <Geth> ¦ rakudo: Now limiting of candidates will only happen if the first given parameter

[16:48] <Geth> ¦ rakudo: matches a **constant** value as the first parameter.  So if you have multiple

[16:48] <Geth> ¦ rakudo: MAIN candidates that have "foo" as the first parameter, and you give "foo"

[16:48] <Geth> ¦ rakudo: <…commit message has 6 more lines…>

[16:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dd1c805949

[16:48] <lizmat> ugexe: I needed the method in Main.pm, not in Parameter.pm

[16:49] <lizmat> also: "trusts" doesn't work in the setting

[16:49] <ugexe> right but i thought one could nqp::foobar('!methodname', $someobj)

[16:50] <ugexe> but im pretty sure im thinking of attributes now

[16:50] <lizmat> nqp::getattr you mean ?

[16:50] <ugexe> probably

[16:50] <lizmat> yes, you can, but this is Parameter.pm6 logic.  Felt weird to put that in Main

[16:52] *** patrickb left
[17:10] <Geth> ¦ rakudo: 2b991664d4 | (Elizabeth Mattijsen)++ | 2 files

[17:10] <Geth> ¦ rakudo: Move "cool_constant" logic to Main

[17:10] <Geth> ¦ rakudo: 

[17:10] <Geth> ¦ rakudo: Thereby effectively hiding it from the outside world.  ugexe++

[17:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2b991664d4

[17:56] <vrurg> BTW, is there branch for the upcoming 6e? 

[18:36] *** leont left
[19:04] *** robertle joined
[19:21] *** travis-ci joined
[19:21] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Move "cool_constant" logic to Main

[19:21] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/510017981 https://github.com/rakudo/rakudo/compare/dd1c805949b5...2b991664d415

[19:21] *** travis-ci left
[19:35] *** hankache joined
[19:58] <timotimo> anybody want to proofread my blergpost?

[19:58] <timotimo> https://wakelift.de/p/2dc5d8df-2b40-4706-87a1-88bd90d569b7/

[20:20] <robertle> I'd start by calling it a blogpost, 'blerg' has negative connotations for some poeple ;)

[20:25] <timotimo> but it's on my blagoblag

[20:32] <hankache> timotimo++

[20:46] <lizmat> timotimo: "type name like MixBag"  MixBag  ??  BagHash perhaps??  /me dunno about MixBag

[20:58] *** hankache left
[20:58] <lizmat> timotimo: that's my only nit

[20:58] <lizmat> timotimo++

[21:05] <timotimo> ha, you're right, mixhash or baghash not mixbag

[21:05] <timotimo> i mean there could be a custom type named that of course

[21:08] <lizmat> could be  :-)

[22:09] *** lucasb left
[22:41] <timotimo> published that blog post: https://wakelift.de/2019/03/22/intermediate-progress-report-heap-snapshots/

[22:53] *** MasterDuke joined
[22:53] *** MasterDuke left
[22:53] *** MasterDuke joined
[22:59] <MasterDuke> timotimo: "The very first post on this blog already had a little bit about the heap snapshot profiler in the first post on this very blog." has a redundant beginning and ending

[23:03] <timotimo> haha

[23:04] <timotimo> good catch

[23:06] <MasterDuke> timotimo: and i think "The individual attributes can be uncompressed and stored away in parallel and since there's one count shared between many attributes." has an extra 'and' between 'parallel' and 'since'

[23:07] <AlexDaniel> m: use v6.e.PREVIEW

[23:07] <camelia> rakudo-moar 2b991664d: OUTPUT: «===SORRY!===␤Cannot call method 'typed_panic' on a null object␤»

[23:07] <AlexDaniel> mmm…

[23:08] <jnthn> m: use v6.e

[23:08] <camelia> rakudo-moar 2b991664d: OUTPUT: «===SORRY!===␤Cannot call method 'typed_panic' on a null object␤»

[23:08] <jnthn> Well, oops 

[23:08] <jnthn> I mean, it's better than silently accepting it, but still LTA

[23:10] <MasterDuke> timotimo: maybe missing some words at the end here? "relocatable perl6 binary in,"

[23:12] <timotimo> fixed, or tried at least

[23:12] <MasterDuke> nice work, definitely looking forward to getting heap snapshot support in moarperf

[23:12] <timotimo> thanks

[23:12] <timotimo> tell me about your favourite features? :)

[23:12] <timotimo> what you'd like to see, i mean

[23:15] <MasterDuke> well, don't remember if it does it now, but being able to know what exactly is getting collected in each run

[23:17] <timotimo> *gasp*

[23:17] <timotimo> impossible

[23:18] <MasterDuke> hm, maybe not each exact object, but counts of types

[23:25] <timotimo> that's quite a bit easier :)

[23:35] <timotimo> there's loooooots of space in between snapshots for ... basically anything at all

[23:37] <timotimo> it'll quickly turn into a horrifying hodgepodge of everything forever

[23:43] <Geth> ¦ roast: vrurg++ created pull request #521: Test for GH #2772

[23:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/521

[23:47] <Geth> ¦ rakudo: vrurg++ created pull request #2784: New roast test

[23:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2784

[23:59] <jnthn> Actually if you run both the normal profiler *and* the heap profiler than you'd have the data to calculate what was allocated but then collected, no? :)

