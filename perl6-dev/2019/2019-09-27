[00:15] *** b2gills left
[00:26] *** b2gills joined
[02:39] *** dogbert11 left
[04:28] *** statisfiable6 left
[04:28] *** reportable6 left
[04:28] *** benchable6 left
[04:28] *** greppable6 left
[04:28] *** squashable6 left
[04:28] *** unicodable6 left
[04:28] *** notable6 left
[04:28] *** quotable6 left
[04:28] *** committable6 left
[04:28] *** bisectable6 left
[04:28] *** releasable6 left
[04:28] *** tellable6 left
[04:28] *** bloatable6 left
[04:28] *** coverable6 left
[04:28] *** shareable6 left
[04:28] *** evalable6 left
[04:28] *** nativecallable6 left
[04:29] *** reportable6 joined
[04:29] *** statisfiable6 joined
[04:29] *** ChanServ sets mode: +v statisfiable6

[04:29] *** committable6 joined
[04:29] *** ChanServ sets mode: +v committable6

[04:29] *** coverable6 joined
[04:29] *** ChanServ sets mode: +v coverable6

[04:29] *** notable6 joined
[04:29] *** ChanServ sets mode: +v notable6

[04:30] *** shareable6 joined
[04:30] *** nativecallable6 joined
[04:30] *** bisectable6 joined
[04:30] *** ChanServ sets mode: +v bisectable6

[04:30] *** quotable6 joined
[04:30] *** ChanServ sets mode: +v quotable6

[04:31] *** unicodable6 joined
[04:31] *** ChanServ sets mode: +v unicodable6

[04:31] *** tellable6 joined
[04:31] *** ChanServ sets mode: +v tellable6

[04:32] *** squashable6 joined
[04:32] *** ChanServ sets mode: +v squashable6

[04:32] *** benchable6 joined
[04:32] *** releasable6 joined
[04:32] *** ChanServ sets mode: +v releasable6

[04:33] *** greppable6 joined
[04:33] *** evalable6 joined
[04:33] *** bloatable6 joined
[04:33] *** ChanServ sets mode: +v bloatable6

[05:15] *** Xliff joined
[05:16] *** Xliff left
[05:19] *** AlexDaniel joined
[05:19] *** AlexDaniel left
[05:19] *** AlexDaniel joined
[05:35] *** epony left
[09:24] <|Tux|> Rakudo version 2019.07.1-357-gd00674b31 - MoarVM version 2019.07.1-241-gacb04a448

[09:24] <|Tux|> csv-test-xs-20      0.423 -  0.425

[09:24] <|Tux|> csv-ip5xs           0.769 -  0.781

[09:24] <|Tux|> test-t --race       0.795 -  0.830

[09:24] <|Tux|> test-t              1.747 -  1.750

[09:25] <|Tux|> csv-ip5xs-20        6.388 -  6.456

[09:25] <|Tux|> test                6.852 -  7.147

[09:25] <|Tux|> test-t-20 --race    9.033 -  9.228

[09:25] <|Tux|> csv-parser         22.306 - 22.506

[09:25] <|Tux|> test-t-20          29.614 - 29.737

[10:13] <lizmat> Files=1274, Tests=109501, 204 wallclock secs (26.80 usr  7.47 sys + 2887.37 cusr 245.55 csys = 3167.19 CPU)

[11:36] *** |Tux| left
[11:42] *** |Tux| joined
[11:44] *** |Tux| left
[11:46] <lizmat> bisectable6 my $y := 666 if 0; dd $y

[11:46] <lizmat> bisectable6: my $y := 666 if 0; dd $y

[11:46] <bisectable6> lizmat, On both starting points (old=2015.12 new=d00674b) the exit code is 0 and the output is identical as well

[11:46] <bisectable6> lizmat, Output on both points: ¬´Mu‚ê§¬ª

[11:47] *** |Tux| joined
[11:48] <lizmat> bisectable6: my $y := 666 if 0; say $y.perl

[11:48] <bisectable6> lizmat, On both starting points (old=2015.12 new=d00674b) the exit code is 1 and the output is identical as well

[11:48] <bisectable6> lizmat, Output on both points: ¬´Cannot call method 'perl' on a null object‚ê§  in block <unit> at /tmp/x46IxO2CAH line 1‚ê§‚ê§¬ª

[11:49] *** |Tux| left
[11:49] *** |Tux| joined
[12:02] *** |Tux| left
[12:03] *** |Tux| joined
[12:39] *** lucasb joined
[13:20] <vrurg> greppable6: is hidden

[13:20] <greppable6> vrurg, 180 lines, 35 modules: https://gist.github.com/5dc88e01ff6be350d61825a3ba4be6d8

[13:21] <vrurg> greppable6: is\s+hidden\s+

[13:21] <greppable6> vrurg, 7 lines, 5 modules: https://gist.github.com/6c8a63cca65a278c7debc7ed24524313

[13:45] *** [Tux] left
[14:28] <Geth_> ¬¶ rakudo: 559c24f066 | (Elizabeth Mattijsen)++ | src/core.c/Backtrace.pm6

[14:28] <Geth_> ¬¶ rakudo: Make sure that Backtrace.list lists all the frames

[14:28] <Geth_> ¬¶ rakudo: 

[14:28] <Geth_> ¬¶ rakudo: Well, conceivably: raised max number of elements from 101 to 1_000_001

[14:28] <Geth_> ¬¶ rakudo: Addresses GH#3148

[14:28] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/559c24f066

[14:28] <synopsebot> GH#3148 [open]: https://github.com/rakudo/rakudo/issues/3148 Backtrace.new.list.elems doesn't reflect the depth of the "callstack"

[15:16] *** MasterDuke joined
[15:53] *** dogbert11 joined
[15:57] *** dogbert11 left
[16:04] *** cognomin_ joined
[16:08] *** cognominal left
[16:19] *** dogbert17 joined
[16:45] <AlexDaniel> quick question: will rakudo support raku goodies before the release of 6.e?

[16:46] <jnthn> AlexDaniel: Which kind of things do you have in mind?

[16:47] <jnthn> AlexDaniel: Some things we can't put behind a `use v6.e` anyway, and even those we can we might want to just ship anyway

[16:47] <AlexDaniel> jnthn: let's say .raku and $*RAKU

[16:47] <jnthn> So the point where most folks with an installed Rakudo can expect them to be there arrives sooner

[16:47] <jnthn> Well, .raku is a method so not subject to versioning

[16:48] <jnthn> Or at least, we can't make it so you only get it with a `use v6.e`

[16:48] <jnthn> So that one I'd say we put in whenever we get to it. $*RAKU I'm not sure what our options are, but given it's additive, it won't break anything to have it available sooner

[16:49] <AlexDaniel> hmm

[16:49] *** [Tux] joined
[16:49] <jnthn> Also, I don't really want pressure on us to do a 6.e, and tying adding Raku stuff into Rakudo to that would make us want to do it sooner.

[16:50] <AlexDaniel> nah I just was reading the document top to bottom, and at the very end it says ‚ÄúAround the release of 6.e...‚Äù and suggests to do some changes

[16:50] <AlexDaniel> which I'm fine with, I'm just wondering

[16:50] <AlexDaniel> like, won't we get into the situation when people will start changing things, but most rakudo versions in the wild won't support something

[16:50] <AlexDaniel> but I guess we're fine

[16:50] <jnthn> I think we'd want to make sure that by the time 6.e is released, then all the goodies are there. But I think that's likely to happen anyway.

[16:51] <jnthn> Well, my intention in that document was to try and discourage people from changing things too soon, and making their modules incompatible for folks running some releases back ('cus they installed what was packaged, etc.)

[16:51] <jnthn> (Or the latest MSI, or...)

[16:51] <AlexDaniel> yeah, it does say that

[16:52] <AlexDaniel> I guess support of everything in .e, some deprecation in .f and removal of stuff later makes sense

[16:52] <jnthn> I figure "when 6.e is released" is an easy thing for people to know if has/has not happened, and it gives us freedom to determine exactly when that happens

[16:53] <Geth_> ¬¶ problem-solving/path-to-raku: dc7f4512e8 | (Aleks-Daniel Jakimenko-Aleksejev)++ | solutions/language/PATH-TO-RAKU.md

[16:53] <Geth_> ¬¶ problem-solving/path-to-raku: Remove accidental markdown

[16:53] <Geth_> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/dc7f4512e8

[16:53] <Geth_> ¬¶ problem-solving/path-to-raku: 2d57afe177 | (Aleks-Daniel Jakimenko-Aleksejev)++ | solutions/language/PATH-TO-RAKU.md

[16:53] <Geth_> ¬¶ problem-solving/path-to-raku: Replace the mention of ‚ÄúDarkPan‚Äù

[16:53] <Geth_> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/2d57afe177

[16:53] <Geth_> ¬¶ problem-solving/path-to-raku: 51890ebe26 | (Aleks-Daniel Jakimenko-Aleksejev)++ | solutions/language/PATH-TO-RAKU.md

[16:53] <Geth_> ¬¶ problem-solving/path-to-raku: Minor fixes

[16:53] <Geth_> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/51890ebe26

[16:53] <jnthn> Which felt preferable to me to putting in "in N months" or some such.

[16:54] <AlexDaniel> it's a nice document, btw

[16:54] <AlexDaniel> lizmat++

[16:55] <vrurg> Anybody remembers what was the purpose of inventing hidden classes? ('is hidden' and 'hides' traits)

[16:57] <vrurg> greppable6: \shides\s

[16:57] <greppable6> vrurg, 32 lines, 18 modules: https://gist.github.com/2e3c2b368a9c120a3840434b7a5b5628

[16:57] <jnthn> vrurg: Probably see S12 if you didn't already, but iirc it's to hide methods in the class from the deferral mechanism, which in turn implies no default implicit `*%_`

[16:58] <vrurg> jnthn: thanks! 

[17:00] <AlexDaniel> treegrep: \.pod6

[17:00] <greppable6> AlexDaniel, https://gist.github.com/9d727d673ef8b065df004c6be2fdd8df

[17:01] <vrurg> jnthn: Still, I don't see what's the advatages of this? Faster method calls?

[17:05] <jnthn> vrurg: I think that's a side-effect and the purpose is to be hidden from deferral

[17:05] <jnthn> It's possible folks have used it for the optimization side-effect, though we're often smart enough to optimize it away for them anyway now :)

[17:08] <vrurg> So far, neither trait is used in the core nor in the ecosystem.

[17:12] <tbrowder> hi, all

[17:14] <tbrowder> i've just released File::Copy on cpan and hope it might be a start toward inclusion in core someday. eyeballs and testing appreciated. thnx.

[17:15] <japhb> AlexDaniel, jnthn: Which document where you talking about that had 6.e references?

[17:15] <AlexDaniel> japhb: path-to-raku

[17:15] * japhb is trying to follow along with name change stuff but only has time to catch up like once or twice a week.

[17:15] <japhb> So I miss stuff.

[17:16] <AlexDaniel> japhb: https://github.com/perl6/problem-solving/pull/89/files?short_path=94c7450#diff-94c7450ef7d64cc9a0320d8f232017cf

[17:16] <japhb> Since there doesn't seem to be a single place to go, or single channel to watch, or single GH issue to track that has everything

[17:16] <japhb> Thanks, AlexDaniel 

[17:17] <AlexDaniel> japhb: it's a single PR, really, everything else is a discussion on how to change the PR

[17:26] *** patrickb joined
[17:28] *** patrickb left
[17:29] <jnthn> vrurg: Also see the Interface Consistency section in https://www.perl6.org/archive/doc/design/apo/A12.html

[17:29] <jnthn> dinner &

[17:32] <japhb> AlexDaniel: Yeah, that's a good doc.  BTW, in the Ecosystem changes section: META6.json contains a 'perl' key; presumably that would need to change too.  Also the name of that file, to e.g. RAKUMETA.json?

[17:33] <AlexDaniel> japhb: I think we should try not to pile additional changes on top of the rename

[17:33] <AlexDaniel> ahh wait meta *6*

[17:33] <AlexDaniel> and yeah, the perl field I did notice yesterday‚Ä¶ hmm

[17:34] <AlexDaniel> lizmat: maybe that's something you can tackle

[17:35] <AlexDaniel> why does it have a 6 in there?

[17:35] <AlexDaniel> treegrep: META.json

[17:35] <greppable6> AlexDaniel, https://gist.github.com/286ff90becbc62662b49991e20f4724a

[17:35] <AlexDaniel> oh wow

[17:35] <AlexDaniel> but it was META.json at some point, no?

[17:36] <AlexDaniel> japhb: I don't know, I guess it can stay‚Ä¶ it's still raku 6

[17:36] <AlexDaniel> I mean, the version is still technically 6

[17:37] <AlexDaniel> I'd love to change the versioning at some point but not now

[17:39] <japhb> Sure, that's less important than the 'perl' key in that file.

[17:43] *** [Tux] left
[17:44] *** robertle joined
[17:45] *** [Tux] joined
[17:49] *** epony joined
[17:58] <AlexDaniel> so while I'm playing devil's advocate here, I'm wondering, what'd be a good reason to dismiss .raku.t ?

[17:58] <AlexDaniel> compared to .rakutest that is

[17:58] *** [Tux] left
[18:00] <vrurg> AlexDaniel: twextension? Again?

[18:01] <vrurg> (facepalm) ;)

[18:03] <AlexDaniel> vrurg: ‚ÄúAgain?‚Äù is your reason?

[18:03] <vrurg> Not this one, but as concept.

[18:03] <AlexDaniel> so, why?

[18:05] <AlexDaniel> it's not one of your twextensions, btw

[18:05] <nine> is hidden implies no implicit *%_? Now that can be useful!

[18:06] <AlexDaniel> I know how to argue against .t.raku but not .raku.t

[18:08] <vrurg> AlexDaniel: I know it's different. Just kidding. 

[18:08] <[Coke]> nine: how goes?

[18:08] <vrurg> I would still .t.rk like more, but as it was said ‚Äì don't care that much.

[18:10] <AlexDaniel> well, .raku.t won't even require changes to tools, and plain `prove` will work as long as you have shebangs

[18:11] <AlexDaniel> and .t.rk doesn't bring any benefit unless you do all your extensions this way

[18:11] <AlexDaniel> and if you do, then suddenly all your modules are also executable

[18:11] <AlexDaniel> so .t.rk is a no go

[18:12] <nine> Going to attack that resolve_using_guards issue now for good :)

[18:12] *** [Tux] joined
[18:38] *** MasterDuke left
[18:50] *** MasterDuke joined
[19:08] *** MasterDuke left
[19:10] *** cognominal joined
[19:14] *** cognomin_ left
[19:16] <lizmat> japhb: we can't change the name of META6.json without also needing to make changes to PAUSE

[19:16] <lizmat> so that will most definitely stay, as we don't want to burden the toolchain people with more work

[19:27] <japhb> lizmat: Yeah, totally fair.  And TBH, the name is another easter egg like Camelia's wings.

[19:27] <lizmat> indeed   :-)

[19:31] <lizmat>  RT131014

[19:31] <synopsebot> RT#131014 [open]: https://rt.perl.org/Ticket/Display.html?id=131014 [BUG] multi dispatch error on signature with coerce and smiley

[19:59] <Geth_> ¬¶ rakudo: c3926928a6 | (Elizabeth Mattijsen)++ | 2 files

[19:59] <Geth_> ¬¶ rakudo: Make .starts-with / .ends-with quite a bit faster

[19:59] <Geth_> ¬¶ rakudo: 

[19:59] <Geth_> ¬¶ rakudo: Especially the Cool variants.  Mostly by making them share the same

[19:59] <Geth_> ¬¶ rakudo: proto and getting rid of the |c signature.

[19:59] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/c3926928a6

[20:24] <Geth_> ¬¶ rakudo: 44a6a0de06 | (Elizabeth Mattijsen)++ | 2 files

[20:24] <Geth_> ¬¶ rakudo: Make .substr-eq quite a bit faster

[20:24] <Geth_> ¬¶ rakudo: 

[20:24] <Geth_> ¬¶ rakudo: Especially the Cool variants.  Mostly by making them share the same

[20:24] <Geth_> ¬¶ rakudo: proto and getting rid of the |c signature.

[20:24] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/44a6a0de06

[20:45] <Geth_> ¬¶ rakudo: 696eea2de6 | (Elizabeth Mattijsen)++ | 2 files

[20:45] <Geth_> ¬¶ rakudo: Make .contains quite a bit faster

[20:45] <Geth_> ¬¶ rakudo: 

[20:45] <Geth_> ¬¶ rakudo: Especially the Cool variants.  Mostly by making them share the same

[20:45] <Geth_> ¬¶ rakudo: proto and getting rid of the |c signature.

[20:46] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/696eea2de6

[20:59] <japhb> I love seeing 'Make ... faster' commits.

[20:59] <japhb> lizmat++

[21:00] <lizmat> it also makes the code bigger

[21:00] <lizmat> but it also helps with IDE's  :-)

[21:00] <lizmat> afk&

[21:11] *** vrurg left
[21:16] <tbrowder> why

[21:17] <tbrowder> chg .t file extensions at all?

[21:18] <tbrowder> seems lang agnostic to me,

[22:16] *** vrurg joined
[22:38] *** lucasb left
[23:05] <lizmat> m: class A { our sub a() { }; A::a for ^10000000 }; say now - INIT now

[23:05] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´3.2299664‚ê§¬ª

[23:05] <lizmat> m: class A { our sub a() { }; a for ^10000000 }; say now - INIT now

[23:05] <camelia> rakudo-moar 17d036ad4: OUTPUT: ¬´0.22196523‚ê§¬ª

[23:05] <lizmat> feels to me these timings should be more or less the same ?

[23:05] <lizmat> jnthn: ^^ ?

[23:17] <jnthn> A::a compiles into A.WHO<&a>() - e.g. a hash lookup

[23:18] <jnthn> We can in principle inline the call itself, modulo an sf guard

[23:18] <jnthn> But the hash access dominates

[23:19] <jnthn> In the second one the sub call optimizes away totally. You're not actaully calling it via the package, but as a lexical (because even an `our` declaration gets a lexical alias, so its as if the `our` wasn't even there).

