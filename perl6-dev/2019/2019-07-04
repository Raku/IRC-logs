[00:36] *** nebuchadnezzar left
[00:38] *** nebuchadnezzar joined
[00:44] *** squashable6 left
[00:47] *** squashable6 joined
[00:47] *** ChanServ sets mode: +v squashable6

[01:15] *** lizmat left
[01:16] *** lizmat joined
[01:16] *** lucasb left
[02:59] *** rba left
[04:16] *** AlexDaniel left
[04:16] *** AlexDaniel joined
[05:19] *** rba joined
[05:22] *** rba left
[05:23] *** rba joined
[05:35] *** rba left
[05:35] *** rba joined
[05:45] *** rba left
[05:45] *** rba joined
[05:58] *** [TuxCM] left
[06:31] *** vrurg left
[06:31] *** vrurg joined
[06:46] *** lizmat left
[07:03] *** lizmat joined
[07:07] *** patrickb joined
[07:11] *** lizmat left
[07:51] *** lizmat joined
[07:53] *** [TuxCM] joined
[07:54] <|Tux|> Rakudo version 2019.03.1-667-gd4ceb97e0 - MoarVM version 2019.05-99-g729303de7

[07:54] <|Tux|> csv-test-xs-20      0.428 -  0.443

[07:54] <|Tux|> csv-ip5xs           0.717 -  0.719

[07:54] <|Tux|> test-t --race       0.781 -  0.859

[07:54] <|Tux|> test-t              1.757 -  1.764

[07:54] <|Tux|> csv-ip5xs-20        5.114 -  Rakudo version 2019.03.1-667-gd4ceb97e0 - MoarVM version 2019.05-99-g729303de7

[07:54] <|Tux|> csv-test-xs-20      0.428 -  0.443

[07:54] <|Tux|> csv-ip5xs           0.717 -  0.719

[07:54] <|Tux|> test-t --race       0.781 -  0.859

[07:54] <|Tux|> test-t              1.757 -  1.764

[07:54] <|Tux|> csv-ip5xs-20        5.114 -  5.256

[07:54] <|Tux|> test                7.050 -  7.053

[07:54] <|Tux|> test-t-20 --race    9.311 -  9.319

[07:54] <|Tux|> csv-parser         22.945 - 23.177

[07:54] <|Tux|> test-t-20          28.755 - 28.998

[07:54] <|Tux|> 5.256

[07:54] <|Tux|> test                7.050 -  7.053

[07:54] <|Tux|> test-t-20 --race    9.311 -  9.319

[07:54] <|Tux|> csv-parser         22.945 - 23.177

[07:54] <|Tux|> test-t-20          28.755 - 28.998

[08:09] *** lizmat left
[08:32] *** lizmat joined
[10:26] *** |Tux| left
[10:34] *** [TuxCM] left
[10:35] *** [TuxCM] joined
[11:11] *** [TuxCM] left
[12:36] *** [TuxCM] joined
[13:17] *** lucasb joined
[13:17] *** vrurg left
[13:18] *** vrurg joined
[13:23] *** vrurg left
[13:26] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/7bd3b3a0a8a3c1faaef602d2d3fe1e619e4ef640

[13:26] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2019.03-7-g87771ea33...2019.03-19-gda96d39

[13:29] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/fc4aca08

[13:29] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2019.03-19-gda96d39...2019.03-21-gd780b76

[13:37] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/b5bf7cd4

[13:37] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2019.03-31-g75bfba0...2019.03-43-g0e5f3d0

[13:39] *** vrurg joined
[14:10] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/f1c80fdd

[14:10] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2019.03-52-ga20a24f...2019.03-57-gddb5d2d

[14:24] *** vrurg left
[14:26] *** vrurg joined
[14:47] *** vrurg_ joined
[14:49] *** vrurg left
[14:49] *** vrurg_ is now known as vrurg

[15:42] *** patrickb left
[15:47] <MasterDuke> AlexDaniel: you created release branches for NQP and Rakudo, right? so i could merge my PRs now?

[15:47] <AlexDaniel> yes

[15:55] <Geth> ¬¶ nqp/master: 14 commits pushed by (Daniel Green)++, MasterDuke17++

[15:55] <Geth> ¬¶ nqp/master: review: https://github.com/perl6/nqp/compare/4300d4213995...ebe9672a7b84

[16:11] *** lizmat left
[16:46] <MasterDuke> is t/02-rakudo/reproducible-builds.t failing on windows (appveyor) a known thing? or a legitimate problem with my Rakudo PR?

[16:46] *** lucasb left
[16:47] <MasterDuke> it only failed for the `Environment: RAKUDO_OPTIONS=--backends=moar --gen-nqp=master --gen-moar=master` run

[16:50] <MasterDuke> huh. and jvm build in travis can't find Test? the jvm build actually works locally

[16:54] <AlexDaniel> MasterDuke: where do you even see that?

[17:20] <TreyHarris> Any cases to think about where `cmp-ok($got, &[==], $expected)` should be preferred over `is($got, $expected)` except for allomorphs? I was about to write an `is-equal` but I realized that's so obvious there must be a reason it isn't included. (I know `ok` is even simpler but you don't get the automatic diagnostics; OTOH, `cmp-ok`'s saying `# expected: 5‚ê§#  matcher: 'infix:<==>'‚ê§#      got: 4` is kinda

[17:20] <TreyHarris> crufty itself

[17:21] <TreyHarris> s:s/cases to think/cases (of Numerics) to think/

[17:23] <TreyHarris> And that question was meant for #perl6, apologies, I'm on a narrower-than-usual screen and didn't notice the ambiguity in my channel sidebar

[17:44] *** epony left
[17:49] <jnthn> MasterDuke++ # NQP int changes

[18:02] <timotimo> TreyHarris: there's is-deeply, which is often "the right thing" where you mean "is-equal"

[18:08] *** patrickb joined
[18:09] <TimToady> well, a bare eqv oughta do that

[18:23] <Geth> ¬¶ rakudo/master: 5 commits pushed by (Daniel Green)++, MasterDuke17++

[18:23] <Geth> ¬¶ rakudo/master: 290cd79249 | Bump NQP for default-int

[18:23] <Geth> ¬¶ rakudo/master: 5876d38aa7 | Use num ops in NQP code

[18:23] <Geth> ¬¶ rakudo/master: 62e2555ee7 | Fix for bare_complex_number

[18:23] <Geth> ¬¶ rakudo/master: 1e4d3ac468 | More fixes for default-int behavior

[18:23] <Geth> ¬¶ rakudo/master: 669a3b9f3e | Merge pull request #2670 from MasterDuke17/default_nqp_vars_and_ops_to_int_instead_of_num

[18:23] <Geth> ¬¶ rakudo/master: review: https://github.com/rakudo/rakudo/compare/d4ceb97e06cd...669a3b9f3e1e

[18:23] *** epony joined
[18:38] <ugexe> MasterDuke: it must be an issue with your PR

[18:52] <ugexe> MasterDuke: its never shown up on a appveyor run before anyway. But I ran that test locally on windows using moar-blead and it passes

[19:02] *** brrt joined
[19:03] <timotimo> i'm glad to put MasterDuke int charge of that

[19:13] *** lizmat joined
[19:22] *** brrt left
[19:28] *** brrt joined
[19:29] <timotimo> TimToady: i've got to say i didn't actually take an actionable idea from our discussion on NFA enhancements for future pass-fate-down-iness

[19:30] <TimToady> a way to access the current Match (or an attribute of it) from within the NFA would help

[19:31] <timotimo> right. how did the suggestion sound to add to the nqp::nfarun op an argument that takes an array that info will be pushed into?

[19:33] <TimToady> that would help, though long-term we might find it a bottleneck if the NFA wants to do other things with the current match

[19:33] <TimToady> don't have anything particular in mind though

[19:33] <TimToady> maybe caches of previous dispatches

[19:34] <timotimo> that'd be something hung off of the NFA itself, or maybe thread-local (or maybe using atomic ops)?

[19:35] <TimToady> mebbe

[19:36] <TimToady> the way the NFA works, we probably need to push on multiple arrays depending on how 'sub' the sub-NFA is, unless we go with unique fates

[19:36] <TimToady> but an array of arrays could be passed in as an array

[19:36] <timotimo> right

[19:36] <timotimo> that'll "just"‚Ñ¢ make the addressing more interesting in the NFA "code"

[19:38] <TimToady> I'm kinda leaning back toward unique fates to avoid rewriting sub-NFAs, in which case a single list works, but we might need to copy sub-NFAs in anyway until we figure out how to tail-ref things for the NFA

[19:39] <timotimo> allow me to swing back towards a "simplest thing that can possibly already work" approach so i can actually do something :P

[19:40] * TimToady is fine with that

[19:40] <TimToady> esp since the simplest thing that can possibly work is only barely within current branepower limits...

[19:42] *** travis-ci joined
[19:42] <travis-ci> Rakudo build errored. MasterDuke17 'Merge pull request #2670 from MasterDuke17/default_nqp_vars_and_ops_to_int_instead_of_num

[19:42] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/554367871 https://github.com/rakudo/rakudo/compare/d4ceb97e06cd...669a3b9f3e1e

[19:42] *** travis-ci left
[19:43] <timotimo> will the values that get pushed onto that array be statically put into the nfa op stream?

[19:44] <timotimo> hm, but there's also the question which array in the array-of-arrays gets its data

[19:45] <TimToady> well, it's all relative to which proto is going to pay attention to which sub-array

[19:45] <TimToady> or which range of fates, with the uniqueness approach

[19:49] <TimToady> with the array-of-arrays approach, you merely have to check or guarantee that the right array goes to the right proto; with the unique approach, you probably need both high and low guards before the switch to avoid grief, unless something can be guaranteed monotonic, in which case one guard is probably sufficient

[19:49] <TimToady> certainly one would want to avoid reallocating arrays of arrays on every token match somehow

[19:51] * TimToady doesn't recall whether STD used guards at all, or just asssumed everything would proceed in lockstep

[19:53] <TimToady> to the first approximation, you only need one fate per level, if the NFA got it right

[19:54] <TimToady> but there are places in the grammar these days that probably rely on backtracking to earlier fates when the "longer" one is vetoed

[19:54] <timotimo> not sure what to guard against; position in the target string?

[19:54] <timotimo> yeah, i bet

[19:55] <TimToady> that is needed to avoid combinitoric explosion, yes

[19:55] <masak> I realize I probably need to study these array-of-arrays and unique approaches. is STD still the state-of-the-art to read up on this?

[19:55] <TimToady> if you start stacking fates for subsequent positions, you get 'kaboom'

[19:56] <TimToady> masak: well, I dunno, it was always pretty grotty even when it worked :)

[19:56] <MasterDuke> AlexDaniel: https://ci.appveyor.com/project/rakudo/rakudo/builds/25753810/job/exlcxluld8yn02la?fullLog=true is the job that had the reproducible test failure

[19:57] <TimToady> given that it had to do backtracking by emulating lazy lists with closures of closures of closures....

[20:00] <MasterDuke> all: the default-int merges pass a spectest (using MoarVM, i didn't try with any other backends), but i'd be lying if i thought i got everything 100% perfect

[20:00] <committable6> MasterDuke, https://gist.github.com/0662ec44589049b40843c9a9d5299130

[20:00] <MasterDuke> i'm hoping to be a little bit more available the next couple days than usual, so please ping me if anything comes up

[20:01] <TimToady> oops, forgot to eat... &

[20:05] *** travis-ci joined
[20:05] <travis-ci> Rakudo build failed. MasterDuke17 'Merge pull request #2670 from MasterDuke17/default_nqp_vars_and_ops_to_int_instead_of_num

[20:05] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/554367871 https://github.com/rakudo/rakudo/compare/d4ceb97e06cd...669a3b9f3e1e

[20:05] *** travis-ci left
[20:35] *** brrt left
[20:35] *** brrt joined
[20:51] <MasterDuke> was kind of able to repro the t/04-nativecall/20-concurrent.t error. got a `MoarVM panic: Internal error: zeroed target thread ID in work pass` while running it in a loop with a spectest running in the background

[20:59] <MasterDuke> ooo, now a segfault

[21:06] <masak> TimToady: I'm looking to implement a mutable parser, in order to support `is parsed` in 007

[21:07] <masak> so the NFA needs to be recomputed at some points during the parse

[21:19] <jnthn> masak: It's a similar case to introducing new operators, I guess? Or do you not handle that yet?

[21:21] <masak> yes, new operators are a special case, since it only hits the optable parser

[21:22] <masak> I want to bring that to the whole grammar, including statements, terms, and other categories

[21:23] <masak> (and lexically scoped, of course, so the parser "pops" on parsing a block `}` and loses the added rules)

[21:23] <timotimo> i find that optable

[21:23] <masak> timotimo: I think a lot of people will :)

[21:24] <masak> it's a little bit of a relief to go from having my brain melt from thinking about macro hygiene to having it melt from thinking about mutable parsers instead

[21:25] <jnthn> masak: In Rakudo that's largely handled by mixing in to the grammar type

[21:25] <jnthn> And making sure it uses the correct language for the next statement

[21:26] <MasterDuke> jnthn: does the backtrace in https://github.com/rakudo/rakudo/issues/3030 look at all useful? i'm running now with the jit disabled, but it hasn't triggered yet

[21:26] <masak> yeah, I think that's fine. but "mixing in" just an implementation detail here. right now when I'm playing around, my grammar is just a JSON-like data structure, and so "mixing in" would just mean adding more data into it (and be prepared to undo it later)

[21:26] <masak> is*

[21:27] <masak> 'night, #perl6-dev

[21:27] <timotimo> gnite masak 

[21:28] <jnthn> masak: Well, it's more that you just throw it away, since it's a `but` rather than a `does`. But of course, the immutability and easy impl strategy of "just copy everything" is why it's slow to add new operators in Rakudo :)

[21:28] <jnthn> masak: Not really, though try with a small nursery and MVM_GC_DEBUG=1 to try and tease it out, and probably without JIT

[21:29] <timotimo> i thought it's mostly the "optimize the NFA all over again" that is slow

[21:30] <jnthn> Well, calculate the NFA all over again too :)

[21:31] <MasterDuke> what size nursery do people use when debugging?

[21:32] <timotimo> true, merging all the substates and such

[21:36] <jnthn> MasterDuke: I typically go for somewhere in the 8KB-32KB region

[21:39] <MasterDuke> neither error has shown up again so far with jit disabled and MVM_GC_DEBUG=1, now adding in the nursery change

[21:39] <MasterDuke> oh. `MoarVM panic: Must not GC when in the specializer/JIT`

[21:40] <jnthn> Oh!!

[21:40] <jnthn> Now, bp that panic and you'll have a *really* useful stack trace

[21:41] <MasterDuke> lost that gdb session, but running again

[21:43] * MasterDuke doesn't remember how to get perl6-gdb-m to run in a loop, but stop and drop into the gdb shell if there's a non-normal exit

[21:43] * MasterDuke is just hitting 'r' a lot right now

[21:49] <jnthn> bp exit

[21:49] <jnthn> commands

[21:49] <jnthn> r

[21:49] <jnthn> end

[21:49] <jnthn> set pagination off

[21:49] <jnthn> Or something like that; typed from memory

[21:49] <jnthn> If "commands" doesn't work, try "actions" :)

[21:50] <MasterDuke> jnthn++ that seems to be working

[21:57] <MasterDuke> jnthn: got a much more involved backtrace now, issue just updated

[22:00] <Kaiepi> should rakudo include information about all the env variables that can be passed to it when you do `perl6 --help`, not just NQP_HOME/PERL6_HOME/whatever?

[22:00] <timotimo> like moar --help does?

[22:00] <Geth> ¬¶ nqp: patzim++ created pull request #561: Support build with spaces in path

[22:00] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/pull/561

[22:00] <Kaiepi> yes timotimo 

[22:00] *** vrurg left
[22:08] <Geth> ¬¶ rakudo: patzim++ created pull request #3031: Spaces in path

[22:08] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3031

[22:12] <patrickb> .tell vrurg I'd be grateful for testing on MacOS of these branches. There are changes and respective PRs in MoarVM, nqp-configure, nqp and rakudo. All necessary to get it to work.

[22:12] <yoleaux> patrickb: I'll pass your message to vrurg.

[22:13] <patrickb> .tell vrurg No hurry, this is for post release anyways.

[22:13] <yoleaux> patrickb: I'll pass your message to vrurg.

[22:50] *** patrickb left
[23:12] <ugexe> wonder if we should change our CI to build in a directory containing a space

[23:13] <ugexe> so it doesn't regress later

[23:42] *** brrt left
