[00:15] *** Merfont joined
[00:15] *** Kaypie left
[00:16] *** p6bannerbot sets mode: +v Merfont

[00:17] *** Kaypie joined
[00:17] *** Merfont left
[00:18] *** p6bannerbot sets mode: +v Kaypie

[00:43] *** Ven`` left
[03:16] <Geth> ¬¶ rakudo/precompile-on-require: 4c859ae342 | (Nick Logan)++ | src/core/CompUnit/Repository/FileSystem.pm6

[03:16] <Geth> ¬¶ rakudo/precompile-on-require: Back CURFS.load with .need, allowing auto precomp

[03:16] <Geth> ¬¶ rakudo/precompile-on-require: 

[03:16] <Geth> ¬¶ rakudo/precompile-on-require: Auto precompile modules loaded with `require` / $*REPO.load

[03:16] <Geth> ¬¶ rakudo/precompile-on-require: similar to `use` / $*REPO.need. It also allows CURFS.load to

[03:16] <Geth> ¬¶ rakudo/precompile-on-require: take and load a precompiled file path.

[03:16] <Geth> ¬¶ rakudo/precompile-on-require: 

[03:16] <Geth> ¬¶ rakudo/precompile-on-require: Mostly works. However it breaks on `require "lib/Zef/CLI.pm6"`

[03:16] <Geth> ¬¶ rakudo/precompile-on-require: for some reason.

[03:16] <Geth> ¬¶ rakudo/precompile-on-require: review: https://github.com/rakudo/rakudo/commit/4c859ae342

[04:54] *** AlexDani` joined
[04:54] *** p6bannerbot sets mode: +v AlexDani`

[05:02] *** Tux__ left
[05:02] *** AlexDaniel left
[05:08] *** Tux__ joined
[05:09] *** p6bannerbot sets mode: +v Tux__

[07:05] *** [TuxCM] joined
[07:06] *** p6bannerbot sets mode: +v [TuxCM]

[07:29] *** Tux__ left
[07:30] *** |Tux| joined
[07:31] *** p6bannerbot sets mode: +v |Tux|

[07:48] *** [TuxCM] left
[08:03] *** lgtaube left
[08:19] *** lgtaube joined
[08:20] *** p6bannerbot sets mode: +v lgtaube

[09:05] *** |Tux| left
[09:05] *** |Tux| joined
[09:06] *** p6bannerbot sets mode: +v |Tux|

[09:16] *** |Tux| left
[09:16] *** |Tux| joined
[09:16] *** [TuxCM] joined
[09:17] *** p6bannerbot sets mode: +v |Tux|

[09:17] *** p6bannerbot sets mode: +v [TuxCM]

[09:25] *** robertle_ joined
[09:26] *** p6bannerbot sets mode: +v robertle_

[09:35] *** |Tux| left
[09:36] *** |Tux| joined
[09:37] *** p6bannerbot sets mode: +v |Tux|

[09:53] *** [TuxCM] left
[10:04] *** patrickb joined
[10:05] *** |Tux| left
[10:05] *** p6bannerbot sets mode: +v patrickb

[10:06] *** |Tux| joined
[10:06] *** p6bannerbot sets mode: +v |Tux|

[10:16] *** lizmat joined
[10:16] *** p6bannerbot sets mode: +v lizmat

[10:35] *** |Tux| left
[10:36] *** |Tux| joined
[10:37] *** p6bannerbot sets mode: +v |Tux|

[10:54] *** lizmat left
[10:57] *** lizmat joined
[10:57] *** p6bannerbot sets mode: +v lizmat

[11:05] *** |Tux| left
[11:06] *** |Tux| joined
[11:06] *** p6bannerbot sets mode: +v |Tux|

[11:55] *** [TuxCM] joined
[11:56] *** p6bannerbot sets mode: +v [TuxCM]

[12:26] *** lucasb joined
[12:26] *** p6bannerbot sets mode: +v lucasb

[12:52] <lucasb> hmm, I noticed R#2541 was closed

[12:52] <synopsebot> R#2541 [closed]: https://github.com/rakudo/rakudo/issues/2541 Post-incrementing native integers across overflow boundary

[12:52] <lucasb> m: say my int8 $x = 127; say $x++; say $x

[12:52] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´127‚ê§-129‚ê§-128‚ê§¬ª

[12:53] <lucasb> to be clear, I'm not questioning the wrap-around behavior, I *do* expect that. I'm questioning the -129 value there

[12:53] <lucasb> -129 is not in int8 range

[12:54] <lizmat> I completely missed that

[12:54] <timotimo> ha

[12:54] * lizmat reopened the ticket

[12:54] <timotimo> is it returning $resultvalue - 1 to do that?

[12:54] <lucasb> ah, thanks lizmat :)

[12:56] <lizmat> timotimo: no, it's not afaics

[12:57] <timotimo> so how does it cross the boundary once, and then goes backwards? :)

[12:57] <lizmat> good question, looking into it now

[12:59] <lizmat> looks like $a++ is not calling the int variant of postfix:<++> in Int.pm6

[13:04] <jnthn> How did you determine that?

[13:04] <jnthn> I think in some cases it'll inline the thing...

[13:04] <lizmat> by putting a "say" inside the candidate and not seeing any output

[13:05] <jnthn> OK, that'll prevent the static optimizer from inlining it...

[13:05] <jnthn> Though I guess if it's an intlexref or whatever it should still end up in the right candidate anyway

[13:06] <lizmat> well, it's not winding up in the Int candidate either

[13:13] *** AlexDani` is now known as AlexDaniel

[13:15] <timotimo> it could be the optimizer is rewriting it

[13:15] <timotimo> like, without consulting the normal inliner

[13:16] <jnthn> That'd be naughty, but it's possible

[13:16] <lizmat> perl6 --optimize=0 -e 'my int8 $a = 127; say $a++'

[13:17] <lizmat> int ++ 127

[13:17] <lizmat> 127

[13:17] <lizmat> so, yes, it's the optimizer

[13:17] <lizmat> because it then does call the candidate

[13:35] <lizmat> comment in the optimizer:

[13:35] <lizmat>                     # need to assign original value; it's cheaper to just

[13:35] <lizmat>                     # do the reverse operation than to use a temp var

[13:36] <timotimo> that's what breaks it, surely

[13:37] *** scovit_ joined
[13:37] <lizmat> yup

[13:37] <lizmat> looking at the effect of removing that opt now

[13:37] *** p6bannerbot sets mode: +v scovit_

[13:40] <scovit_> would anybody be against (or would there be any particular technical difficulties) in adding a submethod BUILD on the Parameter class? (defined in BOOTSTRAP.nqp and expanded in core/Parameter.pm6)

[13:41] *** scovit_ is now known as scovit

[13:43] <lizmat> scovit: to what end ?

[13:43] <scovit> lizmat: to be able to dynamically type signatures

[13:43] <scovit> can be useful for instance with nativecast

[13:44] <scovit> that can take a signature as the first argument

[13:44] <lizmat> could you turn that into a ticket with an example ?

[13:44] <scovit> I can

[13:44] <lizmat> scovit++

[13:44] <lizmat> timotimo: removing the opt makes $a++ 2x as slow

[13:48] <timotimo> d'oh

[13:49] <patrickb> What does -- do exactly in perl6?

[13:50] <patrickb> On the command line that is

[13:53] <patrickb> Could exec-name also be a candidate for forwarding from the perl6 commandline to moar?

[13:54] <patrickb> Currently I try to do the forwarding for: --debug-suspend --dump --full-cleanup --tracing --debug-port=

[13:54] <patrickb> Still unsure about exec-name.

[13:54] <lizmat> timotimo: but I'm not sure how we could get around that :-(

[13:55] <lizmat> for any but "int"

[13:57] <lizmat> m: my int32 $a = 0x7fffffff; say $a; say $a++

[13:57] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´2147483647‚ê§-2147483649‚ê§¬ª

[13:57] <timotimo> we should know the size of the register in question, right?

[13:57] <lizmat> m: my int16 $a = 0x7fff; say $a; say $a++

[13:57] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´32767‚ê§-32769‚ê§¬ª

[13:57] <timotimo> maybe all we need to do is emit a truncate op?

[13:57] <lizmat> m: my int64 $a = 0x7fffffffffffffff; say $a; say $a++

[13:57] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´9223372036854775807‚ê§9223372036854775807‚ê§¬ª

[13:58] <lizmat> do we know the size of the int there?

[14:00] <timotimo> not sure, actually

[14:03] <lizmat> hmmm... looking at the profile without the opt

[14:03] <lizmat> the prefix:<++> only takes 18% of total

[14:03] <lizmat> my int8 $a = 0; for ^10_000_000 { my int8 $b = $a++ }

[14:03] <jnthn> By runtime I think you can't recover it, but I think at compile time it'll probably be in the symbol table

[14:12] <lizmat> hmmm... potential memory leak with return signatures: R#2593

[14:12] <synopsebot> R#2593 [open]: https://github.com/rakudo/rakudo/issues/2593 'index' routine shows severe performance decline in a loop

[14:17] <lizmat> timotimo: oddly enough, removing the opt breaks the spectest

[14:21] <patrickb> The more I think about it, exec-name will never be interesting for perl6 users. It's merely a tool to help the current script based perl6 runners fake it's executable name from within perl6. Users never want to do that.

[14:22] <lizmat> m: say EVAL(q/my uint8 $var = 255; $var++; say $var; $var/)    # que?

[14:22] <camelia> rakudo-moar 4d7cdc0f4: OUTPUT: ¬´0‚ê§0‚ê§¬ª

[14:22] <lizmat> ah

[14:23] <lizmat> with the postfix:<++> opt removed, I get 0 / 256

[14:25] <lizmat> bisectable6: my int8 $a = 127; say $a++

[14:25] <bisectable6> lizmat, On both starting points (old=2015.12 new=4d7cdc0) the exit code is 0 and the output is identical as well

[14:25] <bisectable6> lizmat, Output on both points: ¬´-129‚ê§¬ª

[14:25] <lizmat> wow, that's been sitting there a long time

[14:28] <AlexDaniel> c: 2015.12,HEAD my int8 $a = 127; say $a++

[14:28] <committable6> AlexDaniel, ¬¶2015.12,HEAD(4d7cdc0): ¬´-129‚ê§¬ª

[14:28] <AlexDaniel> c: 2015.12,HEAD my int8 $a = 127; say $a++; say $a++; say $a++

[14:28] <committable6> AlexDaniel, ¬¶2015.12,HEAD(4d7cdc0): ¬´-129‚ê§-128‚ê§-127‚ê§¬ª

[14:28] <AlexDaniel> lucasb++

[14:31] <scovit> lizmat: https://github.com/rakudo/rakudo/issues/2594

[14:31] <scovit> R#2594

[14:31] <synopsebot> R#2594 [open]: https://github.com/rakudo/rakudo/issues/2594 [wishlist] add BUILD submethods to Parameter and Signature classes

[14:49] <AlexDaniel> btw I love R#2593

[14:49] <synopsebot> R#2593 [open]: https://github.com/rakudo/rakudo/issues/2593 [regression][‚ö† blocker ‚ö†] 'index' routine shows severe performance decline in a loop

[14:49] <AlexDaniel> short description, bisected and with valgrind output

[14:50] * AlexDaniel tweaks the issue template‚Ä¶

[14:51] <Geth> ¬¶ rakudo: 095d216ae8 | (Aleks-Daniel Jakimenko-Aleksejev)++ | .github/ISSUE_TEMPLATE.md

[14:51] <Geth> ¬¶ rakudo: Tweak ISSUE_TEMPLATE

[14:51] <Geth> ¬¶ rakudo: 

[14:51] <Geth> ¬¶ rakudo: Make it even clearer that parts of the template can be

[14:51] <Geth> ¬¶ rakudo: deleted. Inspired by a short yet amazing ticket #2593.

[14:51] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/095d216ae8

[14:51] <synopsebot> RAKUDO#2593 [open]: https://github.com/rakudo/rakudo/issues/2593 [regression][‚ö† blocker ‚ö†] 'index' routine shows severe performance decline in a loop

[14:53] *** go|dfish joined
[14:53] *** p6bannerbot sets mode: +v go|dfish

[15:12] *** go|dfish left
[15:14] <scovit> lizmat: my last comment was bogus. I think it makes sense to have both Signature and Parameter as first class. But certain detail, as you said, should be provided behind a decent interface.

[15:21] *** Kaypie is now known as Kaiepi

[15:27] *** go|dfish joined
[15:27] *** p6bannerbot sets mode: +v go|dfish

[15:30] <|Tux|> Maybe a stupid question, but

[15:31] <|Tux|> if I have a class with a public mutable attribute, is there a way to make a shortcut so I can write $classs.field = 42 as $class = 42

[15:32] <|Tux|> so that an assignment to the (immutable) class defaults to assigning to a specific attribute of the class

[15:33] <|Tux|> I'd also accept a class method that would be invoked on assigning to the class

[15:38] <lizmat> [Tux]: if you let .new return a Proxy object, with the actual object inside it, that should work, but would cause overhead

[15:38] * |Tux| does not want overhead (obviously :)

[15:39] <AlexDaniel> this is not it, but kinda similar:

[15:39] <AlexDaniel> m: class Foo { method ASSIGN-POS($index, $new) { say 42 } }; Foo.new[0] = 50

[15:39] <camelia> rakudo-moar 095d216ae: OUTPUT: ¬´42‚ê§¬ª

[15:39] <AlexDaniel> m: class Foo { method STORE($new) { say 42 } }; Foo.new = 50

[15:39] <camelia> rakudo-moar 095d216ae: OUTPUT: ¬´42‚ê§¬ª

[15:39] <AlexDaniel> hmmmm

[15:40] <|Tux|> interesting

[15:40] <AlexDaniel> why the hell does that work? :S

[15:40] <AlexDaniel> maybe it should, I don't know :)

[15:40] *** Ven`` joined
[15:40] <AlexDaniel> 6c: class Foo { method STORE($new) { say 42 } }; Foo.new = 50

[15:41] <committable6> AlexDaniel, ¬¶6c (36 commits): ¬´42‚ê§¬ª

[15:41] *** p6bannerbot sets mode: +v Ven``

[15:41] <AlexDaniel> |Tux|: if we think that it should work, maybe it's a good idea to create a ticket to ensure we have tests for it

[15:42] <|Tux|> I didn't know about ASSIGN-POS and ASSIGN-KEY, which most likely are the two that I would need

[15:44] <lizmat> [Tux] do you really want to have your object look like an array or a hash ?

[15:44] <|Tux|> Yep :)

[15:44] <|Tux|> like an array *and* a hash :P

[15:44] <AlexDaniel> like https://github.com/zostay/perl6-ArrayHash ?

[15:45] <|Tux|> no

[15:45] *** MasterDuke joined
[15:45] *** p6bannerbot sets mode: +v MasterDuke

[15:45] *** MasterDuke left
[15:45] *** MasterDuke joined
[15:45] *** herbert.freenode.net sets mode: +v MasterDuke

[15:45] *** p6bannerbot sets mode: +v MasterDuke

[15:45] <|Tux|> summary, I have CSV::Row, which is an object that holds the parser itself and a list of CSV::Field's

[15:46] <|Tux|> *if* the csv has header row (the columns are labelled), I want the row $r to be addressed by the column label $r<field1>

[15:47] <|Tux|> which then return the CSV::Field object in that column

[15:47] <|Tux|> which might be $r[14]

[15:47] <lizmat> yeah, then AT-KEY is what you want

[15:48] <lizmat> for $r<field1>

[15:48] <|Tux|> when *assigning* to CSV::Field, I'd just want to write $r[0] = 42 instead of $r[0].text = 42

[15:48] <|Tux|> I already have a working AT-KEY and AT-POS

[15:49] <|Tux|> https://github.com/Tux/CSV/blob/master/lib/Text/CSV.pm#L388

[15:51] <scovit> Tux: you want something siilar to a R data frame

[15:52] <jnthn> AlexDaniel: Yes, implementing STORE is the correct way for a non-Scalar/Proxy to implement its assignment semantics.

[15:52] <jnthn> AlexDaniel: See Array.STORE and Hash.STORE for example

[15:53] <AlexDaniel> roast#509

[15:53] <jnthn> The rules are: 1) if $ or & sigil, compile into a scalar assignment, 2) @ or % sigil compile into a call to STORE, 3) if not a variable (so no sigil) compile into something late-bound that looks at iscont

[15:53] <AlexDaniel> SPEC#509

[15:53] <synopsebot> SPEC#509 [open]: https://github.com/perl6/roast/issues/509 STORE on custom classes is not tested

[15:54] <scovit> Tux: it seems to me that the way to go is to get something that share the carachteristic of a multidim array and a Hash

[15:55] <jnthn> AlexDaniel: +1 for the ticket; I think it's fine to be spec.

[16:00] <lizmat> but how should that work?

[16:00] <lizmat> m: class A { method STORE(|) { say "STORE" } }; my $a := A.new; dd $a; $a = 666; dd $a   # assigns the container

[16:00] <camelia> rakudo-moar 095d216ae: OUTPUT: ¬´A.new‚ê§Cannot assign to an immutable value‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:01] <lizmat> m: class A { method STORE(|) { say "STORE" } }; my $a = A.new; dd $a; $a = 666; dd $a   # assigns the container

[16:01] <camelia> rakudo-moar 095d216ae: OUTPUT: ¬´A $a = A.new‚ê§Int $a = 666‚ê§¬ª

[16:01] <lizmat> m: class A { method STORE(|) { say "STORE" } }; my $a := A.new; dd $a; $a = 666; dd $a   # fails

[16:01] <camelia> rakudo-moar 095d216ae: OUTPUT: ¬´A.new‚ê§Cannot assign to an immutable value‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:01] *** robertle_ left
[16:01] <jnthn> lizmat: Read the 3 rules I wrote above again.

[16:01] * lizmat missed that, jnthn++

[16:01] <jnthn> s/again// :)

[16:02] <|Tux|> FYI it proves that ASSIGN-KEY and ASSIGN-POS are exactly what I was looking for, and it works!

[16:02] <|Tux|> and because I did not know about them, I asked the wrong question

[16:05] <Geth> ¬¶ rakudo: f329d6c6ca | (Elizabeth Mattijsen)++ | src/core/Signature.pm6

[16:05] <Geth> ¬¶ rakudo: Make Signature a first class citizen

[16:05] <Geth> ¬¶ rakudo: 

[16:05] <Geth> ¬¶ rakudo: Signature.new(params => (Parameter.new,), returns => Int, arity => 1, count => Inf)

[16:05] <Geth> ¬¶ rakudo: now works.  Part of fix for R#2594

[16:05] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/f329d6c6ca

[16:05] <synopsebot> R#2594 [open]: https://github.com/rakudo/rakudo/issues/2594 [wishlist] Make Signatures and Parameters first class citizens

[16:07] <lizmat> afk&

[16:13] <scovit> lizmat++

[16:26] *** lucasb left
[16:35] *** [TuxCM] left
[16:46] *** travis-ci joined
[16:46] *** p6bannerbot sets mode: +v travis-ci

[16:46] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make Signature a first class citizen

[16:46] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/477414640 https://github.com/rakudo/rakudo/compare/095d216ae82b...f329d6c6cab9

[16:46] *** travis-ci left
[17:34] *** coverable6 left
[17:34] *** coverable6 joined
[17:35] *** p6bannerbot sets mode: +v coverable6

[17:42] *** Ven`` left
[17:56] *** [TuxCM] joined
[17:57] *** p6bannerbot sets mode: +v [TuxCM]

[18:15] *** releasable6 left
[18:15] *** notable6 left
[18:15] *** quotable6 left
[18:15] *** shareable6 left
[18:15] *** undersightable6 left
[18:16] *** undersightable6 joined
[18:16] *** quotable6 joined
[18:16] *** shareable6 joined
[18:16] *** notable6 joined
[18:16] *** releasable6 joined
[18:16] *** p6bannerbot sets mode: +v undersightable6

[18:16] *** p6bannerbot sets mode: +v quotable6

[18:16] *** p6bannerbot sets mode: +v shareable6

[18:16] *** p6bannerbot sets mode: +v notable6

[18:16] *** p6bannerbot sets mode: +v releasable6

[18:30] <Geth> ¬¶ rakudo/precompile-on-require: 840018e61a | (Nick Logan)++ | src/core/CompUnit/Repository/FileSystem.pm6

[18:30] <Geth> ¬¶ rakudo/precompile-on-require: Extract precomp id from path only once

[18:30] <Geth> ¬¶ rakudo/precompile-on-require: review: https://github.com/rakudo/rakudo/commit/840018e61a

[21:07] *** patrickb left
[21:12] <gfldex> m: say X::Multi::NoMatch.new.Str;

[21:12] <camelia> rakudo-moar f329d6c6c: OUTPUT: ¬´Something went wrong in (NoMatch)‚ê§¬ª

[21:12] <gfldex> Who alloed a Microsoft dev to write that error message? :->

[21:23] *** Kaiepi left
[21:24] *** Kaiepi joined
[21:24] *** p6bannerbot sets mode: +v Kaiepi

[21:27] *** Kaiepi left
[21:29] *** Kaiepi joined
[21:30] *** p6bannerbot sets mode: +v Kaiepi

[21:31] *** lizmat left
[22:39] *** MasterDuke left
[22:59] *** dct joined
[22:59] *** p6bannerbot sets mode: +v dct

[23:21] *** Ven`` joined
[23:22] *** p6bannerbot sets mode: +v Ven``

[23:27] *** dct left
[23:47] *** MasterDuke joined
[23:47] *** p6bannerbot sets mode: +v MasterDuke

[23:47] *** MasterDuke left
[23:47] *** MasterDuke joined
[23:47] *** herbert.freenode.net sets mode: +v MasterDuke

[23:47] *** p6bannerbot sets mode: +v MasterDuke

