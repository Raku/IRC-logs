[00:05] *** travis-ci joined
[00:05] <travis-ci> Rakudo build passed. Nick Logan 'Merge pull request #2777 from vrurg/fix_Configure_for_relocatable

[00:05] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/509191450 https://github.com/rakudo/rakudo/compare/e20dcc4e9892...68c2c9fea187

[00:05] *** travis-ci left
[00:48] *** MasterDuke joined
[00:49] *** MasterDuke left
[00:49] *** MasterDuke joined
[01:25] *** leont left
[02:02] <MasterDuke> now that rakudo is relocatable, can the windows install file select where to install to?

[02:09] <ugexe> isn't part of the reason it installs to that location is because it doesnt have any spaces in the path, like a typical windows username e.g. C:\Users\My Name\

[02:10] <ugexe> i dont think rakudo is installable to a path with a space in it. or at least it was not a few  years back

[02:33] <MasterDuke> hm, i don't have a windows machine to test with, but hopefully somebody can. there have been multiple people asking about being able to install to a chosen path over the past couple years

[02:37] <ugexe> now that i think about it the msi might be ok. it might have just been the Makefile which doesn't quote its paths

[03:43] *** squashable6 left
[03:45] *** squashable6 joined
[03:45] *** ChanServ sets mode: +v squashable6

[05:13] *** discord61 joined
[05:14] *** discord6 left
[05:14] *** discord61 is now known as discord6

[05:20] *** discord62 joined
[05:21] *** discord6 left
[05:21] *** discord62 is now known as discord6

[06:16] *** robertle left
[09:01] <lizmat> Files=1253, Tests=87982, 398 wallclock secs (21.00 usr  6.57 sys + 2857.38 cusr 241.60 csys = 3126.55 CPU) 

[09:01] <lizmat> it's been a long time since it was below 400!

[09:12] <Geth> ¬¶ rakudo: 4189e20c46 | (Kane Valentine)++ (committed using GitHub Web editor) | docs/release_guide.pod

[09:12] <Geth> ¬¶ rakudo: claim the next rakudo release

[09:12] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/4189e20c46

[09:16] <lizmat> kawaii++

[09:32] <Geth> ¬¶ rakudo: 0e07079bad | (Elizabeth Mattijsen)++ | src/core/Rakudo/QuantHash.pm6

[09:32] <Geth> ¬¶ rakudo: Move QuantHash.kv build logic to !SET-SELF

[09:32] <Geth> ¬¶ rakudo: 

[09:32] <Geth> ¬¶ rakudo: So that it can be more easily overridden in a class

[09:32] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/0e07079bad

[09:32] <Geth> ¬¶ rakudo: 9399ea1198 | (Elizabeth Mattijsen)++ | 2 files

[09:32] <Geth> ¬¶ rakudo: Add basic check for keys in SETTING:: and PROCESS::

[09:32] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/9399ea1198

[10:01] *** robertle joined
[10:04] <kawaii> AlexDaniel: do you have some time perhaps on Saturday to run through 'releasing' a mock 2019.03.2 with me? :)

[10:04] <kawaii> I will need some practice using the Sakefile and other tools before we do it for real

[10:06] <AlexDaniel> kawaii: OK, so the sakefile is cool because it does everything locally. So you'll have rakudo and nqp repos on your computer with all the commits and tags, and also the tars. All of that you can inspect without pushing it anywhere

[10:08] <kawaii> So does the sakefile spit out a tar.gz I can actually `perl Configure.pl`, `make` and `make install`?

[10:09] <AlexDaniel> yeah, the same ones you see on https://rakudo.org/files/rakudo

[10:10] <AlexDaniel> kawaii: so you just go to the tools/releasable directory and run something like `VERSION=2019.04 sake all`

[10:10] <AlexDaniel> kawaii: `all` is not exactly all, it excludes the last step which pushes and uploads stuff

[10:12] <kawaii> sure, do you need my keys again by the way? for when it's time for me to actually upload a 'real' release?

[10:12] <[Tux]> Rakudo version 2019.03.1-97-g9399ea119 - MoarVM version 2019.03-44-g079d67002

[10:12] <[Tux]> csv-test-xs-20      0.440 -  0.455

[10:12] <[Tux]> csv-ip5xs           0.756 -  0.813

[10:12] <[Tux]> test-t --race       0.879 -  1.053

[10:12] <[Tux]> test-t              1.781 -  1.963

[10:12] <AlexDaniel> releasable6: status

[10:12] <[Tux]> csv-ip5xs-20        6.380 -  6.845

[10:12] <releasable6> AlexDaniel, Next release in ‚âà30 days and ‚âà8 hours. 0 blockers. 0 out of 97 commits logged

[10:12] <[Tux]> test                7.256 -  8.301

[10:12] <releasable6> AlexDaniel, Details: https://gist.github.com/93f9e23bb2d5a59fc09063bee78831e6

[10:12] <[Tux]> test-t-20 --race   10.160 - 10.238

[10:12] <[Tux]> csv-parser         25.831 - 27.263

[10:12] <[Tux]> test-t-20          31.574 - 33.286

[10:12] <[Tux]> (working from home, so the box is "in use")

[10:12] <AlexDaniel> kawaii: in around 30 days

[10:14] <AlexDaniel> kawaii: ok, another thing is that the sakefile is designed to ssh into a faster machine to run tests and stuff

[10:15] <AlexDaniel> kawaii: the whole process takes around 1 hour if I'm not mistake, most of it is spent on running the spectest excessively :)

[10:15] <kawaii> my laptop has 8 cores and 16gb of RAM, is that 'faster' enough to just run locally?

[10:15] <AlexDaniel> kawaii: for example, if a single test file flaps, it reruns the spectest‚Ä¶

[10:15] <AlexDaniel> kawaii: pretty much any machine is fine as long as you're willing to wait, my laptop at the time was just much slower than my server so that's why

[10:16] <kawaii> I will spin up a VM at $work then with a dozen or so cores for a few hours then :)

[10:16] <AlexDaniel> kawaii: https://github.com/rakudo/rakudo/blob/9399ea11989b4731b65da5d22db92e3653f62a2a/tools/releasable/Sakefile#L91-L108

[10:17] <AlexDaniel> kawaii: these are the only lines that do ssh stuff, and you can simply replace them with a non-ssh equivalent

[10:17] <kawaii> so if I want to run locally only, how do I negate that?

[10:17] <kawaii> ah okay understood

[10:17] <AlexDaniel> the thing might benefit from a configurable flag, or something‚Ä¶ of course :)

[10:18] <kawaii> https://github.com/rakudo/rakudo/blob/9399ea11989b4731b65da5d22db92e3653f62a2a/tools/releasable/Sakefile#L26

[10:18] <kawaii> looks like I can just cheat and have it SSH into localhost too

[10:19] <AlexDaniel> maybe, yeah

[10:21] <kawaii> so aside from releases, is there anything I should be doing on a day-to-day basis too? i.e. checking over and assigning issues in the rakudo repo, choosing which issues are blockers etc?

[10:31] <AlexDaniel> kawaii: yes, though maybe not exactly day-to-day but like week-to-week

[10:32] <AlexDaniel> kawaii: so the list of issues here you'll need to go through, yes: https://github.com/rakudo/rakudo/issues

[10:32] <AlexDaniel> kawaii: if something looks like it breaks stuff for people and you don't want to make a release with that, use the blocker label on it

[10:33] <AlexDaniel> we used to have this thing: https://fail.rakudo.party/

[10:33] <kawaii> AlexDaniel: sure okay, I will probably ping you excessively about which issues are actually important over the next few releases until I learn better :) 

[10:33] <AlexDaniel> and there were like checkboxes near every ticket to make sure that you did indeed check if its a blocker or not

[10:34] <AlexDaniel> we sorta lost that nice thing once we moved to github, and I was hoping that https://fail.rakudo.party/ will start listing github tickets eventually

[10:34] <AlexDaniel> but nobody implemented that in the end, so here we are, just look through the issues carefully :)

[10:35] <kawaii> I want to make a PR to Blin at some point over the next few weeks, to allow for it to scp/rsync the output files somewhere to be rendered as HTML upon completion - this will help for running it in Docker/containers hopefully. Will add some level of automation to ecosystem testing.

[10:36] <AlexDaniel> kawaii: there are some rules of thumb ‚Äì if the issue existed in previous releases, then it's probably not a blocker

[10:37] <AlexDaniel> kawaii: that said, sometimes it's worth to consider when was the last release of rakudo star, so maybe if the issue existed in the last 2-3 releases but didn't exist in the latest star, maybe it's better to fix it now

[10:38] <AlexDaniel> kawaii: and in my view, anything that breaks a module or anything that is likely to break someone's code, is a blocker, even if it's a fix‚Ä¶

[10:39] <kawaii> understood :)

[10:41] <AlexDaniel> some changes to the language can be versioned, i.e. you only get them if you `use v6.e` or whatever. So anything that can potentially break stuff should use that mechanism. There are limitations to that, unfortunately‚Ä¶ you'll see‚Ä¶

[10:42] <AlexDaniel> kawaii: do you have an account on https://rt.perl.org/ ?

[10:42] <AlexDaniel> I think you should be able to login with auth0 using your github account‚Ä¶

[10:43] <kawaii> I do now

[10:43] <AlexDaniel> ok now who is able to give privs for that thing‚Ä¶

[10:44] <AlexDaniel> Coke probably‚Ä¶

[10:46] <AlexDaniel> kawaii: at the top it says ‚ÄúLogged in as ‚Ä¶‚Äù, can you mail Coke asking for privs on RT for that ‚Äú‚Ä¶‚Äù ?

[10:46] <AlexDaniel> kawaii: now, this is the old issue tracker that we no longer use, you won't be touching it often

[10:46] <kawaii> Will do, I assume Coke works at/has some affiliation with TFP then?

[10:47] <AlexDaniel> I guess so!

[10:47] <AlexDaniel> :)

[10:47] <AlexDaniel> you do need access to that just because eventually you'll get someone asking to close/move a ticket or whatever, and it'd be stupid if you didn't have privs for that

[10:47] <AlexDaniel> CC me just in case

[10:50] <AlexDaniel> kawaii: you asked about keys, it's all fine except that I probably need to figure out how to sign your gpg key

[10:50] <AlexDaniel> and your ssh key needs to be added to the rakudo user on www.p6c.org so that you can upload tars

[10:52] <AlexDaniel> kawaii: can you try ssh [email@hidden.address]
[10:53] <kawaii> AlexDaniel: got asked for a password

[10:53] <AlexDaniel> kawaii: I added the one on top: https://github.com/kawaii.keys

[10:54] <kawaii> yep that's right, how old is this box? Some people have issues using my key on older systems

[10:54] <kawaii> ah

[10:54] <kawaii> my mistaje

[10:54] <kawaii> mistake*

[10:54] <kawaii> I'm in!

[10:56] <AlexDaniel> ok there's another machine, but I have to run real quick‚Ä¶ we'll be back in 30 mins

[10:56] <kawaii> no problem!

[11:05] *** leont joined
[11:42] *** leont left
[11:45] <Geth> ¬¶ rakudo: a6a607054a | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals.pm6

[11:45] <Geth> ¬¶ rakudo: Add R:I.ITERATIONSET2LISTITER method

[11:45] <Geth> ¬¶ rakudo: 

[11:45] <Geth> ¬¶ rakudo: Takes an IterationSet type / object and returns a nqp::list iterator for

[11:45] <Geth> ¬¶ rakudo: its keys.  To be used in SetHash/BagHash/MixHash iterators.

[11:45] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/a6a607054a

[11:45] <Geth> ¬¶ rakudo: 1f066d96a2 | (Elizabeth Mattijsen)++ | src/core/SetHash.pm6

[11:45] <Geth> ¬¶ rakudo: Make SetHash iterators more safe

[11:45] <Geth> ¬¶ rakudo: 

[11:45] <Geth> ¬¶ rakudo: Currently, deleting a key from a nqp::iterator of an nqp::hash and then

[11:45] <Geth> ¬¶ rakudo: continuing iterating over the hash, may cause segfaults.  Prevent that

[11:45] <Geth> ¬¶ rakudo: situation by letting the SetHash.kv/pairs/values methods run on an iterator

[11:45] <Geth> ¬¶ rakudo: on a pre-made list of keys, rather than directly on the nqp::hash iterator.

[11:45] <Geth> ¬¶ rakudo: 

[11:45] <Geth> ¬¶ rakudo: <‚Ä¶commit message has 6 more lines‚Ä¶>

[11:45] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/1f066d96a2

[11:50] <AlexDaniel> kawaii: ah no, that's the only machine you need access to

[11:51] <AlexDaniel> kawaii: the sakefile attempts to upload to p6c.org and rakudo.org, these used to be different at the time

[11:52] <AlexDaniel> but not anymore

[12:42] *** squashable6 left
[12:43] *** squashable6 joined
[13:21] <Geth> ¬¶ rakudo: 63657986f9 | (Elizabeth Mattijsen)++ | src/core/BagHash.pm6

[13:21] <Geth> ¬¶ rakudo: Make BagHash iterators more safe

[13:21] <Geth> ¬¶ rakudo: 

[13:21] <Geth> ¬¶ rakudo: Currently, deleting a key from a nqp::iterator of an nqp::hash and then

[13:21] <Geth> ¬¶ rakudo: continuing iterating over the hash, may cause segfaults.  Prevent that

[13:21] <Geth> ¬¶ rakudo: situation by letting the BagHash.kv/pairs/values methods run on an iterator

[13:21] <Geth> ¬¶ rakudo: on a pre-made list of keys, rather than directly on the nqp::hash iterator.

[13:21] <Geth> ¬¶ rakudo: 

[13:21] <Geth> ¬¶ rakudo: <‚Ä¶commit message has 6 more lines‚Ä¶>

[13:21] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/63657986f9

[13:57] *** robertle left
[13:58] <Geth> ¬¶ rakudo: c5664301b8 | (Elizabeth Mattijsen)++ | src/core/BagHash.pm6

[13:58] <Geth> ¬¶ rakudo: Fix adding object to BagHash after it having been removed

[13:58] <Geth> ¬¶ rakudo: 

[13:58] <Geth> ¬¶ rakudo: This was a forgotten fix from the previous commit

[13:58] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/c5664301b8

[13:58] <Geth> ¬¶ rakudo: 787d5bf6e2 | (Elizabeth Mattijsen)++ | src/core/MixHash.pm6

[13:58] <Geth> ¬¶ rakudo: Make MixHash iterators more safe

[13:58] <Geth> ¬¶ rakudo: 

[13:58] <Geth> ¬¶ rakudo: Currently, deleting a key from a nqp::iterator of an nqp::hash and then

[13:58] <Geth> ¬¶ rakudo: continuing iterating over the hash, may cause segfaults.  Prevent that

[13:58] <Geth> ¬¶ rakudo: situation by letting the MixHash.kv/pairs/values methods run on an iterator

[13:58] <Geth> ¬¶ rakudo: on a pre-made list of keys, rather than directly on the nqp::hash iterator.

[13:58] <Geth> ¬¶ rakudo: 

[13:58] <Geth> ¬¶ rakudo: <‚Ä¶commit message has 6 more lines‚Ä¶>

[13:58] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/787d5bf6e2

[13:58] *** robertle joined
[14:05] *** lizmat left
[14:05] *** lizmat joined
[14:10] *** lizmat_ joined
[14:10] *** lizmat left
[14:10] *** lizmat__ joined
[14:14] *** lizmat_ left
[14:20] *** lizmat__ left
[14:29] *** lizmat joined
[14:39] *** squashable6 left
[14:42] *** squashable6 joined
[14:50] *** squashable6 left
[14:52] *** lizmat left
[14:56] *** squashable6 joined
[14:56] *** ChanServ sets mode: +v squashable6

[15:22] *** ExtraCrispy joined
[15:35] *** robertle left
[16:16] *** epony left
[16:17] <vrurg> what does nqp::freshcoderef do?

[16:30] *** epony joined
[16:34] *** leont joined
[16:51] *** TimToady left
[16:52] *** TimToady joined
[17:37] *** lucasb joined
[17:46] *** robertle joined
[17:47] *** lizmat joined
[17:48] *** lizmat left
[17:48] *** lizmat joined
[17:58] <timotimo> vrurg: i think it strips a closure from a code object

[17:59] <timotimo> m: my $foo = 999; sub test { say $foo }; use nqp; my $blubb = nqp::freshcoderef(nqp::decont(&test)); $blubb()

[17:59] <camelia> rakudo-moar 787d5bf6e: OUTPUT: ¬´freshcoderef requires a coderef‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[17:59] <timotimo> m: my $foo = 999; sub test { say $foo }; use nqp; my $blubb = nqp::freshcoderef(nqp::decont(nqp::getattr(&test, Code, '$!do')); $blubb()

[17:59] <camelia> rakudo-moar 787d5bf6e: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Cannot use variable $blubb in declaration to initialize itself‚ê§at <tmp>:1‚ê§------> 3nt(nqp::getattr(&test, Code, '$!do')); $7‚èè5blubb()‚ê§    expecting any of:‚ê§        argument list‚ê§        ‚Ä¶¬ª

[17:59] <vrurg> timotimo: thanks! 

[17:59] <timotimo> m: my $foo = 999; sub test { say $foo }; use nqp; my $blubb = nqp::freshcoderef(nqp::decont(nqp::getattr(&test, Code, '$!do'))); $blubb()

[17:59] <camelia> rakudo-moar 787d5bf6e: OUTPUT: ¬´999‚ê§¬ª

[17:59] <timotimo> ah, well

[17:59] <timotimo> needs a sub around test and $foo to work i guess

[18:02] <jnthn> In MoarVM, iirc, it clones the StaticFrame

[18:02] <jnthn> As well as the code object

[18:02] <jnthn> So that you get a new "family" of closures

[18:02] <jnthn> Which is used so that in the compiler we can install the same compile-me-on-demand thunk

[18:03] <jnthn> But distinguish between clones of each one

[18:04] <timotimo> huh, interesting

[18:04] <timotimo> i don't think i recall compile-me-on-demand stuff in moar/nqp/rakudo

[18:05] <vrurg> jnthn: It doesn't help in the case with onlystar proto cloned for a child class. R#2772

[18:06] <vrurg> Thunk used in the stub sub wrapped in freshcoderef lazy-compiles the original code from the parent class even though it is a clone.

[18:08] <vrurg> So, when multi method is called on a child class at compile time ‚Äì it actually calls proto from the parent class effectively loosing all candidates from childrent.

[18:09] <jnthn> timotimo: It's for when things are called at BEGIN time that are in the current compilation unit

[18:15] *** lizmat left
[18:19] <timotimo> oh, so "on demand" isn't like "lazily at some later point"

[18:21] *** lizmat joined
[18:35] *** ggoebel joined
[18:40] <ggoebel> jnthn: is there an link to an index of your papers?  www.jnthn.net/papers/ gives "forbidden"

[18:53] *** patrickb joined
[19:09] <timotimo> ggoebel: slides.html has many links into the papers/ folder

[19:10] <timotimo> not sure if it's all of them, but i'm sure it's most

[19:15] *** patrickb left
[19:16] <ggoebel> thanks, I'm wondering if one is a symbolic link to the other

[19:21] *** ggoebel left
[19:34] *** lizmat left
[19:36] *** lizmat joined
[19:39] <vrurg> jnthn: are you available yet?

[19:45] <vrurg> looks like freshcoderef doesn't work the way I expected... :(

[19:46] <timotimo> maybe it's more of a lookup problem than a cloning problem? just spibtalling

[19:47] <vrurg> I just don't see a new closure created for a new code. 

[19:48] <timotimo> is the closure responsible for finding the candidates? i'm not familiar with this code tbh

[19:48] <vrurg> https://gist.github.com/vrurg/26a12bfe47582cb3dd72d911dd2379a9 - this code outputs 1 then 2

[19:49] <vrurg> timotimo: No, it is responsible for compiling a code object on the fly, before serialization is ready.

[19:50] <vrurg> And two different code object get same bytecode because of the same closure used.

[19:52] <lizmat> m: say "\x0075\x0308".chars   # ok

[19:52] <camelia> rakudo-moar 787d5bf6e: OUTPUT: ¬´1‚ê§¬ª

[19:52] <vrurg> nqp::getcodeobj then always returns code object for the parent class because it sees the same precompiled block. Im guessing the cause, but not the result.

[19:52] <lizmat> m: say "\x0075 \x0308".chars   # huh?  sorta expected "3"

[19:52] <camelia> rakudo-moar 787d5bf6e: OUTPUT: ¬´2‚ê§¬ª

[19:53] <lizmat> m: .say for "\x0075 \x0308".uninames

[19:53] <camelia> rakudo-moar 787d5bf6e: OUTPUT: ¬´LATIN SMALL LETTER U‚ê§SPACE‚ê§COMBINING DIAERESIS‚ê§¬ª

[19:53] <lizmat> ahhh... the diaeresis got combined with the space, duh

[19:53] <lizmat> m: say "\x0075 \x0308"

[19:53] <camelia> rakudo-moar 787d5bf6e: OUTPUT: ¬´u Ãà‚ê§¬ª

[19:54] <lizmat> right, sorry for the noise  :-)

[19:57] *** MasterDuke left
[20:03] <timotimo> i wonder if for freshcoderef to do what you want, you'd still have to have a takeclosure call somewhere

[20:05] <vrurg> timotimo: I'll check it. Thank you!

[20:06] <timotimo> or is it capturelex?

[20:07] <vrurg> Dunno. My deepest wish is to get complete documentation on moar ops.

[20:07] <timotimo> i'm sure you've seen the partial docs we have?

[20:07] <vrurg> Ideally ‚Äì a book/docs on MoarVM, including internals.

[20:08] <timotimo> the ops.md or something similar in nqp/docs

[20:08] <vrurg> I'm not closing nqp/ops.markdown tab in the browser. :)

[20:08] <timotimo> good :)

[20:09] <vrurg> But it lags behind. And sometimes too brief.

[20:10] <timotimo> aye, it's rather brief indeed

[20:10] <timotimo> have you ever tried the debugserver? it could a) help you inspect what's happening or b) tell me what else is missing :D

[20:11] <vrurg> timotimo: we've already discussed it. Debugging is probably on of a few things where I hate CLI. 

[20:12] <timotimo> oh!

[20:12] <timotimo> OK, then the next step has to be that comma can run the debugger against a "foreign" process :)

[20:12] <timotimo> i.e. one that it didn't start itself

[20:13] <vrurg> This is another thing: neither comma nor intelliJ work for me. comma fails with vim plugin, intelliJ fails with comma plugin.

[20:13] <timotimo> ugh! sorry to hear that!

[20:13] <timotimo> (and now i remember that you already told us about that)

[20:14] <vrurg> I can help with debugging intelliJ some time later, if you wish.

[20:15] <vrurg> Lunch time. I'll be gone for some time...

[20:15] <timotimo> perhaps sena_kun would be a better candidate for a debug session like that; i haven't had my feet dipped into the code for a while now :(

[20:20] *** lizmat left
[20:25] *** lizmat joined
[20:30] *** lizmat left
[21:05] *** ufobat joined
[21:25] <Geth> ¬¶ rakudo: ugexe++ created pull request #2778: Retain original provides metadata structure

[21:25] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/2778

[22:22] <vrurg> jnthn: if you're here by chance. Do I understand it correctly that nqp::freshcoderef creates new "family" of closures but the lexicals in those closures are shared?

[22:32] *** lizmat joined
[22:39] <lizmat> Something's amiss with Inline::Perl5 detection in "make spectest"

[22:39] <lizmat> $ zef install Inline::Perl5

[22:39] <lizmat> All candidates are currently installed

[22:39] <lizmat> Testing Roast version 6.d-proposals using test file list from t/spectest.data

[22:39] <lizmat> Inline::Perl5 not installed: not running Perl 5 integration tests

[22:40] <lizmat> I tried force-installing Inline::Perl5, but that didn't make a difference

[22:46] <vrurg> lizmat: I didn't dig deep, but I suspect that spectest is using local perl6 in the build directory. And you seemingly use installed binary.

[22:46] <vrurg> $ENV{'HARNESS_PERL'} = ".${slash}perl6-" . ($js ? "js" : $moar ? "m" : $jvm ? "j" : "m");

[22:46] <vrurg>  

[22:46] <vrurg> A line from harness5 script

[22:46] <lizmat> but that would imply that the Inline::Perl5 tests would *never* get run

[22:47] <lizmat> and they did get run in the past...  hmmm...

[22:47] <vrurg> kinda. That amazed me too at some point.

[22:47] <lizmat> ok, too tired now to think straight

[22:47] <lizmat> if nobody has filed an issue about this tomorrow, I will

[22:49] <vrurg> that one must be easy to fix. Though I would avoid using the installation path because it may influence spectest results.

[22:50] <vrurg> Perhaps Inline::Perl5 must be installed on request.

[22:56] <gfldex> I filed the odd bug that regessed WWW in #2779 .

[22:57] <gfldex> As a side-effect I got Rakudo now 100x on my harddisk :)

[22:57] <gfldex> That's how much I like Perl¬†6.

[23:01] <jnthn> vrurg: What do you mean by "the lexicals"?

[23:02] <vrurg> https://gist.github.com/vrurg/26a12bfe47582cb3dd72d911dd2379a9

[23:02] <jnthn> vrurg: Each one would be lexically capture per clone

[23:02] <jnthn> Ah, in that case there's no capturelex going on

[23:03] <jnthn> Or closure clone

[23:03] <jnthn> So yeah, they'd see the same $a.

[23:03] <vrurg> Is it possible to have closures cloned? That'd be the best solution for proto methods cloning.

[23:04] <jnthn> Hm, I thought deriving a dispatcher already did a clone?

[23:05] <vrurg> It does. But it's a stub which is cloned, actually, during compile time.

[23:05] <vrurg> So, when stub runs its thunk it happens only once ‚Äì for the parent class and the original proto.

[23:06] <jnthn>     Routine.HOW.add_method(Routine, 'derive_dispatcher', nqp::getstaticcode(sub ($self) {

[23:06] <jnthn>             my $clone := $self.clone();

[23:06] <jnthn>             nqp::bindattr($clone, Routine, '@!dispatchees',

[23:06] <jnthn>                 nqp::clone(nqp::getattr($self, Routine, '@!dispatchees')));

[23:06] <jnthn>             $clone

[23:06] <vrurg> Just because $precomp in World::finish_code_object is shared among stubs.

[23:07] <jnthn> Hm, did you figure out why it the ends up with the wrong set of dispatchees?

[23:07] <vrurg> I know this code. But it gets called before the actual method is called and the stub got its change to complete the work.

[23:08] <jnthn> s/change/chance/ ?

[23:08] <vrurg> Yes, I did. It takes them from the original proto returned by getcodeobj 

[23:08] <vrurg> Not the cloned proto in the class.

[23:09] <vrurg> So, what happens is the proto is kept in AST form until the method is called. But before that it is cloned by derive_dispatcher.

[23:09] *** Geth left
[23:10] <vrurg> Now we have two+ copies. Both as AST. Then the method gets called ‚Äì stubs is executed ‚Äì and it returns the code tied to the code object of the original proto. Always.

[23:11] <vrurg>         my $stub := nqp::freshcoderef(sub (*@pos, *%named) {

[23:11] <vrurg>             unless $precomp {

[23:11] <vrurg>                 $compiler_thunk();

[23:11] <vrurg>                 nqp::say("PRECOMP:" ~ $precomp.HOW.name($precomp)) if nqp::getenvhash<RAKUDO_DEBUG>;

[23:11] <vrurg>             }

[23:11] <vrurg>             $precomp(|@pos, |%named);

[23:11] <vrurg>         });

[23:12] <vrurg> This is where it happens. Now, it doesn't matter on what other class the proto is called ‚Äì $precomp is what it gets.

[23:13] <vrurg> This wouldn't happen if closures of the cloned stubs would be cloned too.

[23:15] <jnthn> Hmm...I wonder if there's a more general issue that can be demonstrated here...

[23:16] <jnthn> m: sub foo($a) { -> { $a } }; BEGIN { my @a = foo(1), foo(2); say @a[1]() }

[23:16] <camelia> rakudo-moar 787d5bf6e: OUTPUT: ¬´2‚ê§¬ª

[23:17] <jnthn> m: sub foo($a) { -> { $a } }; BEGIN { my @a = foo(1), foo(2); say @a[0]() }

[23:17] <camelia> rakudo-moar 787d5bf6e: OUTPUT: ¬´1‚ê§¬ª

[23:17] <jnthn> Ah, of course, that won't 'cus we compile foo() before ever dealing with the closure

[23:18] <vrurg> So far I can only observe it within a module.

[23:19] <vrurg> Moving the classes from a module into a script "fixes" the bug.

[23:19] <jnthn> I wonder if perhaps replacing `$precomp(|@pos, |%named);` with `nqp::curcode()(|@pos, |%named) could do it

[23:20] <vrurg> I'm not that good with the ops. But wouldn't it call the stub again?

[23:21] <vrurg> But I'd try.

[23:22] <jnthn> Ah, right, I guess it needs to be nqp::getcodeobj(nqp::curcode())

[23:22] <jnthn> Which I believe gets updated by calling $compiler_thunk

[23:22] <jnthn> The aim being that we when invoke it on the correct code object instance with the correct @!dispatchees

[23:23] <jnthn> But I've got a feeling something else might be afoot. I'm probably too exhausted to figure it out right now.

[23:23] <vrurg> I wasn't shure if $!do is updated at this point. And doubt it is.

[23:23] <vrurg> But it can be taken care of. I'll investigate. Thank you!

[23:24] <jnthn> $compiler_thunk calls compile_in_context which I'm pretty sure does do that

[23:24] *** MasterDuke joined
[23:24] *** MasterDuke left
[23:24] *** MasterDuke joined
[23:24] <jnthn> See the chunk of code beneath the comment "# We un-stub any code objects for already-compiled inner blocks"

[23:25] <vrurg> Yep, already found it. 

[23:26] <vrurg> Deep recursion. But I think I'll manage it now. Thanks! 

[23:27] <vrurg> I was looking for a way to avoid $precomp and you gave it to me.

[23:29] <jnthn> Glad I could help a bit; thanks for working on this stuff

[23:29] <timotimo> \o/

[23:29] <jnthn> That whole area (compile_in_context and the machinery around it) is a tad fraught; I suspect there's a better way, but I never managed to put my finger on it yet.

[23:41] <jnthn> 'night o/

[23:47] <vrurg> gnight, jnthn !

[23:56] <MasterDuke> ugh. nqp was rebootstrapped recently and now my default-int PR has conflicts. what's a good way to go about rebasing it and creating its new bootstraps?

