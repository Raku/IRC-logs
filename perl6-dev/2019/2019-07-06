[01:46] <vrurg> .tell patrickb It's been totally crazy last two weeks for me. Will try to find some time over the weekend.

[01:46] <yoleaux> vrurg: I'll pass your message to patrickb.

[02:15] *** MasterDuke left
[02:32] <vrurg> Hm, looks like I've got CORE setting loading and binding on dynamic/chained pseudo stashes... 

[03:56] *** BeastieBot left
[04:16] *** BeastieBot joined
[06:07] *** lizmat left
[06:39] *** lizmat joined
[07:01] *** lizmat left
[07:12] *** MasterDuke joined
[07:26] *** vrurg left
[09:44] *** Kaiepi left
[09:45] *** Kaiepi joined
[10:01] *** Kaiepi left
[10:05] *** Kaiepi joined
[10:21] *** Kaiepi left
[10:21] *** Kaiepi joined
[10:38] *** Kaiepi left
[10:39] *** Kaiepi joined
[11:15] <AlexDaniel> squashable6: status

[11:15] <squashable6> AlexDaniel, üçïüçï SQUASHathon is in progress! The end of the event in 1 day and ‚âà2 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[11:34] *** |Tux| joined
[12:14] *** |Tux| left
[12:14] *** |Tux| joined
[12:23] <AlexDaniel> .tell lizmat another weird bug: https://github.com/ajs/perl6-Math-Sequences/issues/47

[12:23] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[12:23] <AlexDaniel> .tell lizmat (with the same code)

[12:23] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[13:08] <Kaiepi> bastille% perl6 test.p6

[13:08] <Kaiepi> Converting üòÇ to a wide string...

[13:08] <Kaiepi> 4 wide characters

[13:08] <Kaiepi> 4 elements after converting

[13:08] <Kaiepi> slowly getting there...

[13:08] <Kaiepi> that should be 2 though

[13:08] <Kaiepi> i feel like i'm missing bits and pieces in moar and rakudo

[13:12] *** Tux__ joined
[13:12] *** |Tux| left
[13:52] *** Tux__ left
[13:54] *** Tux__ joined
[14:09] <timotimo> i wonder what exactly makes my code cause the scheduler to kick its heuristic deadlock detection into high gear and asplode to perhaps maximum thread count in just a few moments

[14:10] <Kaiepi> i was right about stuff missing, i'm missing code to deal with passing wide strings to nativecall and handle encoding them properly with it

[14:11] <MasterDuke> maybe one of the heuristics is '$username.contains("timo")'?

[14:11] <Kaiepi> how much work would be involved in writing that?

[14:11] <timotimo> nah, it stops

[14:11] <Kaiepi> sorry if i interrupted

[14:12] <timotimo> i mean it stops adding more workers before RAKUDO_MAX_THREADS is reached

[14:12] <timotimo> if that's even what that variable is called

[14:13] <Kaiepi> it is

[14:13] *** Tux__ left
[14:16] <timotimo> massively parallelizing work with nested promises and hypers; maybe not the greatest approach

[14:16] *** Tux__ joined
[14:16] <timotimo> i guess i probably don't need a hyper splitter and joiner task to parallelize over four or six rather heavy tasks

[14:16] <timotimo> might as well try to await do for ... start

[14:19] *** HarmtH_ left
[14:19] *** HarmtH_ joined
[14:21] *** HarmtH_ is now known as HarmtH

[14:23] <timotimo> Kaiepi: i'm not sure where code like that would actually go

[14:24] <Kaiepi> i need to be able to transcode between c strings, wide strings, and MVMString

[14:25] <timotimo> i mean, rakudo already has a thing for when it passes a Str to a native sub and it causes an encoding to happen

[14:26] <Kaiepi> it does, but the problem is it uses MVMString to accomplish that

[14:26] <Kaiepi> transcoding between c strings and wide strings is simple enough but idk about MVMStrings

[14:27] *** vrurg joined
[14:28] <timotimo> for MVMString it's just an encoding step, no?

[14:28] <timotimo> since MVMString doesn't care about wide/narrow

[14:28] <timotimo> it's all in the signature of the native sub

[14:41] *** [TuxCM] left
[14:43] <timotimo> bleh, the work needed for the references is so much slower that it dictates the total run time of the task :|

[14:49] *** [TuxCM] joined
[14:51] <timotimo> huh. 3/4 of the time, but about 25% less cpu used. what did i do, lol

[15:19] <AlexDaniel> squashable6: status

[15:19] <squashable6> AlexDaniel, üçïüçï SQUASHathon is in progress! The end of the event in ‚âà22 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[15:19] <AlexDaniel> Now with an issue tracker! https://github.com/ajs/perl6-Math-Sequences/issues

[15:49] <timotimo> ha! 27s as compared to the 1:10 it sometimes was before

[15:50] <timotimo> and it's below a gigabyte of ram usage, too

[15:53] <MasterDuke> nice

[16:14] <[Tux]> Rakudo version 2019.03.1-673-gcf6f6d926 - MoarVM version 2019.05-99-g729303de7

[16:14] <[Tux]> csv-test-xs-20      0.432 -  0.438

[16:14] <[Tux]> csv-ip5xs           0.700 -  0.705

[16:14] <[Tux]> test-t --race       0.856 -  0.921

[16:14] <[Tux]> test-t              1.862 -  1.867

[16:14] <[Tux]> csv-ip5xs-20        5.279 -  5.374

[16:14] <[Tux]> test                7.509 -  7.535

[16:14] <[Tux]> test-t-20 --race    9.467 -  9.681

[16:14] <[Tux]> test-t-20          29.590 - 29.849

[16:14] <[Tux]> csv-parser         34.673 - 35.603

[18:46] <TreyHarris> Since "die" at the top-level of a program is no longer really congruent with Perl 5's, and it lacks the behavior of a newline at the end of the message string suppressing the backtrace, should there be sugar for "-> $msg { $msg.note and exit 1}" ?

[18:47] <TreyHarris> For communicating human-interaction errors?

[18:49] <vrurg> m: say MY::NoExists

[18:49] <camelia> rakudo-moar cf6f6d926: OUTPUT: ¬´Nil‚ê§¬ª

[18:49] <TreyHarris> Seems like a discussion topic, I'll throw it into a problem-solving issue

[18:50] <vrurg> In roast MY::NotExists is exppected to throw. I just made it conform to roast and got broken build.

[18:51] <vrurg> I wonder how many modules rely on current behavior?

[18:53] *** robertle joined
[18:58] <vrurg> Great, ForeignCode doesn't conform to roast. ;)

[18:59] *** lizmat joined
[19:19] <vrurg> m: module Foo { }; say Foo::<NotExists>

[19:19] <camelia> rakudo-moar cf6f6d926: OUTPUT: ¬´(Any)‚ê§¬ª

[19:19] <vrurg> m: say MY::<NotExists>

[19:19] <camelia> rakudo-moar cf6f6d926: OUTPUT: ¬´Nil‚ê§¬ª

[19:20] <vrurg> I'm lost.

[19:27] <TreyHarris> That's weird... did you bisect?

[19:29] <vrurg> TreyHarris: No, but I suspect it always was this way.

[19:29] * vrurg is creating a problem-solving case for this.

[19:45] <TreyHarris> I just created https://github.com/perl6/problem-solving/issues/59 for the die-with-newline question.

[19:50] <ugexe> CATCH { default { try { ::("Rakudo::Internals").?LL-EXCEPTION } ?? .rethrow !! .message.&note; &*EXIT(1) } }

[19:50] <ugexe> thats what im using atm

[19:51] <Geth> ¬¶ problem-solving: AlexDaniel assigned to jnthn Issue Need a substitute for Perl 5 die with newline for raising end-user errors? https://github.com/perl6/problem-solving/issues/59

[19:52] <TreyHarris> ugexe: Yes, I actually considered changing die's example to something like that before submitting the problem-solving issue. I like the special exception class the best, though; if other do, I'm happy to write up a proposed class spec

[19:52] <TreyHarris> But "Rakudo::Internals" is exactly correct, but also not something we mention in the Perl6 docs

[19:53] <TreyHarris> Er, no... nearly correct. Correct for CPAN modules. Not quite correct for executables.

[19:53] <ugexe> its not required, it just puts the backtrace back in if --ll-exception is used

[19:54] <timotimo> how about "quietly die 'oh no'" :P

[19:55] <ugexe> die :no-backtrace 'too much typing'

[19:55] <ugexe> throw a comma in there

[19:56] <timotimo> m: sub bloop { say %_; say @_ }; bloop "oh no" :no-backtrace

[19:56] <camelia> rakudo-moar cf6f6d926: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§You can't adverb "oh no"‚ê§at <tmp>:1‚ê§------> 3_; say @_ }; bloop "oh no" :no-backtrace7‚èè5<EOL>‚ê§    expecting any of:‚ê§        pair value‚ê§¬ª

[19:56] <timotimo> m: sub bloop { say %_; say @_ }; bloop :no-backtrace "oh no"

[19:56] <camelia> rakudo-moar cf6f6d926: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3 { say %_; say @_ }; bloop :no-backtrace7‚èè5 "oh no"‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement‚Ä¶¬ª

[19:56] <timotimo> m: sub bloop { say %_; say @_ }; bloop("oh no"):no-backtrace

[19:56] <camelia> rakudo-moar cf6f6d926: OUTPUT: ¬´{no-backtrace => True}‚ê§[oh no]‚ê§¬ª

[19:57] <lizmat> .oO( exit 1, :message<Goodbye> }

[19:57] <TreyHarris> that's one of the things right there, though: user-oriented errors shouldn't be handled with say.

[19:57] <TreyHarris> lizmat: yes, could work except that you may want it to be catchable and you may not want to abort finalizers

[19:58] <lizmat> exit doesn't abort finaloizers, afaik

[19:58] <TreyHarris> lizmat: oh? the exit docs say it does

[19:58] <TreyHarris> I didn't test it

[19:58] <timotimo> finalizers are not guaranteed to run

[19:58] <timotimo> but that's not the same as END blocks

[19:58] <lizmat> END blocks will be run with exit

[19:58] <ugexe> well, if you want it to be catchable then using plain `die` seems silly

[19:58] <timotimo> i actually wouldn't expect LEAVE blocks to be run from exit

[19:58] <lizmat> m: END say "goodbye"; exit 1

[19:58] <camelia> rakudo-moar cf6f6d926: OUTPUT: ¬´goodbye‚ê§¬ª

[19:59] <TreyHarris> user-oriented errors should at the very least go to $*ERR, but mentioning $*ERR explicitly is kinda wrong too since you may want to intercept it for things like GUI's.

[19:59] <lizmat> m: LEAVE say "goodbye"; exit 1

[19:59] <camelia> rakudo-moar cf6f6d926: ( no output )

[20:00] <lizmat> perhaps: "exit 1, :note<Foo Bar>"   for message on STDERR

[20:00] <lizmat> and "exit 1, :say<Too Bad>" for message on STDOUT

[20:01] <TreyHarris> Well, exit is supposed to be extraordinary, I think... Saying, "erm, I can't write to that directory you told me to write to" isn't really extraordinary, it's just exceptional

[20:01] <timotimo> exitraordinary

[20:04] <TreyHarris> One can't inject a top-level CATCH from another module, can one? After rejecting changing the docs but before going to problem-solving, I'd considered just writing an "X::UserError" module to throw up on CPAN but I couldn't figure out how to avoid requiring the CATCH in the caller.

[20:04] <ugexe> since you want it to be catchable then let the user remove the backtrace. otherwise anyone catching this has to handle detecting/acting-on this switch

[20:05] <timotimo> let's introduce a differentiation like php has. it has fatal errors, errors, exceptions, crashes, and something else

[20:05] <lizmat> perhaps https://docs.perl6.org/language/variables#&*EXIT could be of use ?

[20:05] <TreyHarris> Do they? I don't think so. I would think that library code should never encounter such an exception?

[20:06] <ugexe> then you, the sole consumer of this, is the user

[20:09] <TreyHarris> I feel like there should be a way that doesn't involve an explicit top-level CATCH block, because it's too easy (especially in a case like this where one is doing selective action) to make a mistake. The very example in the docs doesn't work right

[20:10] <ugexe> but one would argue thats pushing the dev to do the right thing and use typed exceptions in the first place

[20:11] <TreyHarris> I did note that that would be one side-effect. If the answer to, "how do I get the perl5 die-with-newline behavior?" is, "used typed exceptions for those cases at least", that doesn't feel like a huge burden.

[20:11] <ugexe> the example i showed before was only needed because 1) i liked the backtrace but others thought it was too much 2) i was too lazy to refactor using typed exceptions.

[20:14] <TreyHarris> So the die-with-newline was correct in one way: the place in the code where one is die'ing is the correct place to signal that this is an error that needs no debug information because it's a "normal exception". The problem was that the mechanism was unacceptably fugly and hard to generalize.

[20:14] <TreyHarris> Having to deal with this in two places, both where the error is discovered and at the top level, seems like an avoidable burden

[20:15] <ugexe> if die could default to no backtrace, and add a backtrace option i might be more inclined. or make a `trace` that dies with a backtrace. but as it exists now... i'm not sure any new options feel right

[20:17] <TreyHarris> Maybe exit with a non-Int could be hijacked for the purpose.

[20:18] <TreyHarris> `exit "Can't write to directory $d";` or `exit X::UserError::DirectoryAccess(:dir($d));`

[20:18] <TreyHarris> exit's already a multi, so that's doable in CPAN now

[20:19] <ugexe> i expect that i can recover from die, not exit

[20:19] <TreyHarris> er, my syntax was some other language's there, but I think it's clear what I meant...

[20:21] <TreyHarris> ugexe: right. I'm not sure one does want to catch such cases... I think you're being too clever by half if you do, like, "oh, there's no directory by that name and I just learned that by catching the DirectoryNoExisty exception, so I'll create it and retry" or whatever

[20:22] <TreyHarris> The main reason to "catch" them is to hijack the output when not running on standard I/O, and as lizmat pointed out, &*EXIT appears to exist for that very purpose

[20:22] <ugexe> i used &*EXIT in my example :P

[20:23] <ugexe> although not in a very fancy way

[20:23] <TreyHarris> I know, I said your CATCH was the sort of thing that should be made implicit for a class different from Rakudo::Internals

[20:25] <TreyHarris> But that was wrong anyway: &*EXIT is just for the exiting step (what right now is exit(Int:D $)), so it can't affect error output before it was called

[20:26] <TreyHarris> a different exit multi that got the output, like I outlined before, _could_ do that. So maybe I should just do that as a CPAN module and see how it feels

[20:26] <ugexe> sure it can

[20:26] <ugexe> it can print \b a bunch of times

[20:26] <TreyHarris> :UP

[20:26] <TreyHarris> er, very big nosed version of :-P

[20:37] <ugexe> .tell patrickb I imagine we'll drop travis-ci and just use circle-ci eventually, but right now the familiarity of travis is still helpful to have around. as for testing e.g. reloc, names-with-spaces, etc these can probably be done with circle-ci using cron jobs that run specific jobs, but i dont think appveyor has anything beyond "run default branch nightly"

[20:37] <yoleaux> ugexe: I'll pass your message to patrickb.

[20:45] *** lizmat_ joined
[20:49] *** lizmat left
[20:53] *** lizmat_ is now known as lizmat

