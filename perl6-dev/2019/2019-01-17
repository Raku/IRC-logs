[00:59] *** undersightable6 left
[00:59] *** undersightable6 joined
[00:59] *** benchable6 left
[00:59] *** reportable6 left
[00:59] *** coverable6 left
[00:59] *** reportable6 joined
[00:59] *** benchable6 joined
[01:00] *** p6bannerbot sets mode: +v undersightable6

[01:00] *** p6bannerbot sets mode: +v reportable6

[01:00] *** p6bannerbot sets mode: +v benchable6

[01:16] *** dct left
[02:01] *** coverable6 joined
[02:01] *** ChanServ sets mode: +v coverable6

[02:02] *** p6bannerbot sets mode: +v coverable6

[02:15] *** AlexDani` joined
[02:16] *** p6bannerbot sets mode: +v AlexDani`

[02:19] *** AlexDaniel left
[02:27] *** AlexDani` is now known as AlexDaniel

[02:35] *** Kaiepi left
[02:35] *** squashable6 left
[02:36] *** Kaiepi joined
[02:37] *** p6bannerbot sets mode: +v Kaiepi

[02:40] *** btyler_ joined
[02:40] *** AlexDani` joined
[02:40] *** p6bannerbot sets mode: +v btyler_

[02:41] *** p6bannerbot sets mode: +v AlexDani`

[02:42] *** masak_ joined
[02:43] *** p6bannerbot sets mode: +v masak_

[02:44] *** tyilanmenyn joined
[02:44] *** p6bannerbot sets mode: +v tyilanmenyn

[02:44] *** samcv_ joined
[02:44] *** p6bannerbot sets mode: +v samcv_

[02:45] *** dogbert11 joined
[02:46] *** p6bannerbot sets mode: +v dogbert11

[02:46] *** AlexDaniel left
[02:46] *** reportable6 left
[02:46] *** benchable6 left
[02:46] *** undersightable6 left
[02:46] *** bisectable6 left
[02:46] *** evalable6 left
[02:46] *** dogbert17 left
[02:46] *** quotable6 left
[02:46] *** committable6 left
[02:46] *** timotimo left
[02:46] *** masak left
[02:46] *** samcv left
[02:46] *** btyler left
[02:46] *** tyil left
[02:49] *** MasterDuke joined
[02:49] *** p6bannerbot sets mode: +v MasterDuke

[02:49] *** MasterDuke left
[02:49] *** MasterDuke joined
[02:49] *** herbert.freenode.net sets mode: +v MasterDuke

[02:49] *** p6bannerbot sets mode: +v MasterDuke

[02:54] *** timotimo joined
[02:54] *** p6bannerbot sets mode: +v timotimo

[03:11] *** evalable6 joined
[03:11] *** p6bannerbot sets mode: +v evalable6

[03:16] *** evalable6 left
[03:16] *** evalable6 joined
[03:17] *** p6bannerbot sets mode: +v evalable6

[03:36] *** bisectable6 joined
[03:36] *** ChanServ sets mode: +v bisectable6

[03:37] *** p6bannerbot sets mode: +v bisectable6

[03:39] *** benchable6 joined
[03:40] *** squashable6 joined
[03:40] *** p6bannerbot sets mode: +v benchable6

[03:40] *** committable6 joined
[03:41] *** p6bannerbot sets mode: +v squashable6

[03:41] *** p6bannerbot sets mode: +v committable6

[03:42] *** quotable6 joined
[03:42] *** ChanServ sets mode: +v quotable6

[03:42] *** reportable6 joined
[03:43] *** p6bannerbot sets mode: +v quotable6

[03:43] *** p6bannerbot sets mode: +v reportable6

[03:46] *** undersightable6 joined
[03:46] *** ChanServ sets mode: +v undersightable6

[03:47] *** p6bannerbot sets mode: +v undersightable6

[03:56] *** lizmat left
[05:39] *** robertle joined
[05:40] *** p6bannerbot sets mode: +v robertle

[07:00] <releasable6> Next release in ≈2 days and ≈11 hours. 5 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[08:04] <[Tux]> Rakudo version 2018.12-230-gbb36f04a6 - MoarVM version 2018.12-31-geccbc8541

[08:04] <[Tux]> csv-test-xs-20      0.432 -  0.434

[08:04] <[Tux]> csv-ip5xs           0.767 -  0.772

[08:04] <[Tux]> test-t --race       0.848 -  0.879

[08:04] <[Tux]> test-t              1.815 -  1.875

[08:04] <[Tux]> csv-ip5xs-20        6.681 -  6.820

[08:04] <[Tux]> test                8.134 -  8.163

[08:04] <[Tux]> test-t-20 --race   10.085 - 10.312

[08:04] <[Tux]> csv-parser         23.113 - 23.896

[08:04] <[Tux]> test-t-20          29.908 - 30.469

[08:08] *** samcv_ is now known as samcv

[08:32] *** ufobat joined
[08:33] *** p6bannerbot sets mode: +v ufobat

[08:58] *** lizmat joined
[08:58] *** p6bannerbot sets mode: +v lizmat

[09:20] <lizmat> Files=1265, Tests=88016, 382 wallclock secs (20.23 usr  5.98 sys + 2724.97 cusr 228.74 csys = 2979.92 CPU)

[09:47] *** tyilanmenyn is now known as tyil

[10:01] *** Kaiepi left
[10:01] *** Kaiepi joined
[10:02] *** p6bannerbot sets mode: +v Kaiepi

[11:48] *** pmurias joined
[11:48] *** p6bannerbot sets mode: +v pmurias

[12:02] *** pmurias left
[12:03] *** pmurias joined
[12:03] *** p6bannerbot sets mode: +v pmurias

[12:13] *** pmurias left
[12:13] *** pmurias joined
[12:13] *** p6bannerbot sets mode: +v pmurias

[13:37] *** pmurias left
[13:38] *** pmurias joined
[13:38] *** p6bannerbot sets mode: +v pmurias

[13:44] *** pmurias left
[13:45] *** pmurias joined
[13:45] *** p6bannerbot sets mode: +v pmurias

[13:45] *** lucasb joined
[13:45] *** p6bannerbot sets mode: +v lucasb

[13:47] *** masak_ is now known as masak

[14:19] *** AlexDani` is now known as AlexDaniel

[14:25] <AlexDaniel> releasable6: status

[14:25] <releasable6> AlexDaniel, Next release in ≈2 days and ≈4 hours. 5 blockers. 109 out of 230 commits logged (⚠ 41 warnings)

[14:25] <releasable6> AlexDaniel, Details: https://gist.github.com/0cb9a178389c15ce93b2777fb00c34e7

[14:25] <AlexDaniel> pmurias: I think you were planning to log your changes :)

[14:46] *** lizmat left
[15:16] *** cfa joined
[15:16] *** p6bannerbot sets mode: +v cfa

[15:32] *** AlexDaniel` left
[15:33] *** tyil[m] left
[15:36] *** tyil[m] joined
[15:36] *** p6bannerbot sets mode: +v tyil[m]

[15:41] *** AlexDaniel` joined
[15:41] *** p6bannerbot sets mode: +v AlexDaniel`

[15:41] <cfa> thanks for the reply jnthn; AlexDaniel`: i re-patched URI::Encode, this one might be a better fix 

[15:52] *** dct joined
[15:52] *** p6bannerbot sets mode: +v dct

[15:55] <cfa> hmm

[15:56] *** ExtraCrispy joined
[15:56] *** p6bannerbot sets mode: +v ExtraCrispy

[16:15] *** dct left
[16:34] <Geth> ¦ rakudo: 5d70797742 | (Jonathan Worthington)++ | src/core/control.pm6

[16:34] <Geth> ¦ rakudo: Add an `is raw` onto the THROW helper

[16:34] <Geth> ¦ rakudo: 

[16:34] <Geth> ¦ rakudo: It's always called from within another control exception sub, which can

[16:34] <Geth> ¦ rakudo: do the correct thing with the return value. Avoids some decont logic on

[16:34] <Geth> ¦ rakudo: each use of `THROW`; given control exceptions don't really return in the

[16:34] <Geth> ¦ rakudo: common case, this will only really help much with things like `take`,

[16:34] <Geth> ¦ rakudo: although it does make the code smaller, and - thanks to `THROW` being a

[16:34] <Geth> ¦ rakudo: juicy inline target - will make everything it's inlined into smaller

[16:34] <Geth> ¦ rakudo: too.

[16:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5d70797742

[16:36] <jnthn> https://github.com/rakudo/rakudo/issues/2606 is resolved thanks to MoarVM fixes

[16:36] <jnthn> (That was one of the release blockers)

[16:38] <cfa> re: rx, lexical topic, https://github.com/perl6-community-modules/URI-Encode/pull/11 is a simpler fix for now

[16:38] <cfa> $rx => /$rx/ seems problematic (at least, there are coercion warnings which make me hesitant to commit as is)

[16:38] <cfa> #11 should be fairly innocuous

[16:40] <cfa> (https://colabti.org/irclogger/irclogger_log/perl6?date=2019-01-17#l825)

[16:53] *** ExtraCrispy left
[17:20] *** cfa left
[18:34] *** pmurias left
[18:35] *** pmurias joined
[18:35] *** p6bannerbot sets mode: +v pmurias

[19:28] <AlexDaniel> wait uh, so just sticking v6.c in there fixes the thing?

[19:29] <AlexDaniel> jnthn: isn't it weird?

[19:29] <AlexDaniel> but if it is so, then it's a non-issue, right?

[19:56] *** cfa joined
[19:56] *** p6bannerbot sets mode: +v cfa

[19:57] <cfa> AlexDaniel: 6.c isn't lexically scoping $_

[19:57] <cfa> see https://github.com/rakudo/rakudo/issues/2608#issuecomment-454085241

[19:57] <cfa> so in specifying the version we hit case (i) rather than (ii)

[19:57] <cfa> without having to change anything else

[19:58] <cfa> at least, that's my understanding of the situation---if we don't specify a version then we have to ensure that topic capture is done inside the map sub scope

[20:00] <cfa> situation for URI::Encode, that is

[20:13] <jnthn> AlexDaniel: 6.d by spec allows the optimizer to do something that 6.c by spec did not. I made sure when I did the work to respect `use v6.c`.

[20:14] *** MasterDuke left
[20:19] <cfa> jnthn++ :)

[20:20] <cfa> i should really mention that i only realised the simpler patch was possible from jnthn's #2, https://github.com/rakudo/rakudo/issues/2608#issuecomment-455200826

[20:20] <cfa> hence closing the older pr, opening this one

[20:20] <cfa> AlexDaniel: tested under HEAD, passes

[20:22] *** dct joined
[20:22] *** p6bannerbot sets mode: +v dct

[20:44] *** lucasb left
[20:54] *** cfa left
[21:19] *** dct left
[22:36] *** pmurias left
[22:56] <AlexDaniel> c: 2018.12,HEAD use v6.c; my token blah { foo }; dd ("foo").grep: { /<blah>/ }

[22:56] <committable6> AlexDaniel, ¦2018.12: «("foo",).Seq␤» ¦HEAD(5d70797): «().Seq␤»

[22:56] <AlexDaniel> bisect: old=2018.12 use v6.c; my token blah { foo }; dd ("foo").grep: { /<blah>/ }

[22:56] <bisectable6> AlexDaniel, Bisecting by output (old=2018.12 new=5d70797) because on both starting points the exit code is 0

[22:56] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/37e92ebd6710533dba3a10dfe260dcbc

[22:56] <bisectable6> AlexDaniel, (2019-01-03) https://github.com/rakudo/rakudo/commit/eb3917c260bce1cb56e2ee40abebd12c4dbcd9b2

[22:58] <jnthn> ...how does that work in the first place?

[22:59] <jnthn> Does grep set $_?

[22:59] <AlexDaniel> c: 2018.12,HEAD use v6.c; my token blah { foo }; dd ("foo").grep: -> $_ { /<blah>/ }

[22:59] <committable6> AlexDaniel, ¦2018.12: «("foo",).Seq␤» ¦HEAD(5d70797): «().Seq␤»

[22:59] <AlexDaniel> c: 2018.12,HEAD use v6.c; my token blah { foo }; dd ("foo").grep: -> $_ { $_ ~~ /<blah>/ }

[22:59] <committable6> AlexDaniel, ¦2018.12,HEAD(5d70797): «("foo",).Seq␤»

[23:00] <AlexDaniel> c: 2018.12,HEAD use v6.c; my token blah { foo }; dd ("foo").grep: -> { /<blah>/ }

[23:00] <committable6> AlexDaniel, ¦2018.12,HEAD(5d70797): «Too many positionals passed; expected 0 arguments but got 1␤  in block <unit> at /tmp/X2uYIdHg2E line 1␤␤ «exit code = 1»»

[23:00] <AlexDaniel> jnthn: nah it just passes it to the block

[23:00] <jnthn> AlexDaniel: But the regex isn't evaluated in the block?

[23:00] <jnthn> It's returned from the block and boolified inside of grep

[23:00] <AlexDaniel> oooh

[23:01] <AlexDaniel> c: 2018.12,HEAD use v6.c; my token blah { foo }; dd ("foo").grep: { so /<blah>/ }

[23:01] <committable6> AlexDaniel, ¦2018.12,HEAD(5d70797): «("foo",).Seq␤»

[23:01] <AlexDaniel> riiight

[23:01] <jnthn> Thus my question "is grep setting $_"?

[23:01] <AlexDaniel> now that I look at it, it's a weird piece of code… never thought about it…

[23:01] <jnthn> And we compile the setting with full optimizations on, and grep is in the setting, so the use v6.c in the program won't make a bit of difference

[23:01] <jnthn> Yeah, it's obvious until you think about it :P

[23:02] <AlexDaniel> c: 2018.12,HEAD use v6.c; my token blah { foo }; dd ("foo").grep: /<blah>/

[23:02] <committable6> AlexDaniel, ¦2018.12,HEAD(5d70797): «("foo",).Seq␤»

[23:02] <AlexDaniel> that should make the golf smaller

[23:03] <AlexDaniel> c: 2018.12,HEAD use v6.c; dd ("foo").grep: /<foo>/

[23:03] <committable6> AlexDaniel, ¦2018.12,HEAD(5d70797): «No such method 'foo' for invocant of type 'Match'␤  in block <unit> at /tmp/ZiK5eDdJeL line 1␤␤ «exit code = 1»»

[23:03] <AlexDaniel> c: 2018.12,HEAD use v6.c; dd ("foo").grep: /foo/

[23:03] <committable6> AlexDaniel, ¦2018.12,HEAD(5d70797): «("foo",).Seq␤»

[23:03] <AlexDaniel> c: 2018.12,HEAD use v6.c; dd ("foo").grep: { /foo/ }

[23:03] <committable6> AlexDaniel, ¦2018.12: «("foo",).Seq␤» ¦HEAD(5d70797): «().Seq␤»

[23:03] <AlexDaniel> there

[23:04] <jnthn>             { nqp::if($test($_),$_,Empty) },

[23:05] <jnthn> That's how it worked

[23:05] <AlexDaniel> anyway it's R#2614

[23:05] <b2gills> AlexDaniel: Regexes are code in Perl6

[23:06] <jnthn> Yeah, this one I'll find a fix for of some kind

[23:08] <AlexDaniel> aaaaand 6 more modules ahead…

[23:13] * jnthn builds an attempted fix

[23:14] *** lizmat joined
[23:14] *** p6bannerbot sets mode: +v lizmat

[23:15] <jnthn> m: use Test; is-deeply ("foo").grep({ /foo/ }), ("foo",)

[23:15] <camelia> rakudo-moar 5d7079774: OUTPUT: «not ok 1 - ␤# Failed test at <tmp> line 1␤# expected: $("foo",)␤#      got: $( )␤»

[23:17] <AlexDaniel> lizmat: hello!

[23:19] <jnthn> Fix works, now waiting on spectest, which on this machine is about twice as long as at the office 

[23:20] <jnthn> Added the above case as a spectest too

[23:20] <jnthn> This worked for pretty terrible reasons, but I don't really want to try arguing it shouldn't DWIM when there's an easy enough fix...

[23:21] <lizmat> AlexDaniel: hello, just back from NR.PM meeting

[23:22] <AlexDaniel> lizmat: maybe this is something that will be easy to figure out for you: https://github.com/rakudo/rakudo/issues/2615

[23:23] <AlexDaniel> something about .succ, I'm not sure

[23:24] <lizmat> too tired now, will look at it first thing tomorrow

[23:35] <AlexDaniel> uhhh also P5tie fails after https://github.com/rakudo/rakudo/commit/685f6cc3b6af59a7df92fcd33eef5f1cc36e34de

[23:35] <Geth> ¦ rakudo: lizmat self-assigned Weird issue with Date creation and Date::WorkdayCalendar module https://github.com/rakudo/rakudo/issues/2615

[23:36] <Geth> ¦ rakudo: f71ca0de12 | (Jonathan Worthington)++ | src/core/Any-iterable-methods.pm6

[23:36] <Geth> ¦ rakudo: Make `.grep: { /regex/ }` work again

[23:36] <Geth> ¦ rakudo: 

[23:36] <Geth> ¦ rakudo: This worked for the slightly dubious reason that `grep` happened to set

[23:36] <Geth> ¦ rakudo: `$_`, and boolify the regex that was returned. This was relying on an

[23:36] <Geth> ¦ rakudo: implementation detail - there's nothing that says `grep` has to have the

[23:36] <Geth> ¦ rakudo: test element in its `$_` - however there's code in the wild that relies

[23:36] <Geth> ¦ rakudo: on this construct, and it's hard to argue that it shouldn't DWIM.

[23:36] <Geth> ¦ rakudo: <…commit message has 9 more lines…>

[23:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f71ca0de12

[23:36] <Geth> ¦ roast: ae6ebade28 | (Jonathan Worthington)++ | S32-list/grep.t

[23:36] <Geth> ¦ roast: Test .grep: { /foo/ }

[23:36] <Geth> ¦ roast: 

[23:36] <Geth> ¦ roast: Covers https://github.com/rakudo/rakudo/issues/2614.

[23:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ae6ebade28

[23:43] <AlexDaniel> jnthn++

[23:43] <lizmat> this last fix doesn't fix P5tie :-(

[23:43] <jnthn> AlexDaniel: How confident are you in the bissect result of https://github.com/rakudo/rakudo/issues/2616 ?

[23:43] <lizmat> will also look at that tomorrow

[23:43] <jnthn> I think I'm going to fix P5tie by just making `use P5.*` eliminate a much broader swathe of optimizations :)

[23:44] <AlexDaniel> jnthn: 0% confident… one second…

[23:44] <lizmat> jnthn: well, I could just also just drop all of the P5 modules that use $_ dynamically from CPAN

[23:45] <jnthn> lizmat: I guess if people use them as a porting aid, they can live with things being a bit slower until they switch to native Perl 6 constructs, though?

[23:45] <AlexDaniel> ok maybe a some more seconds… the test passes when it's in the same file (?!)

[23:45] <jnthn> lizmat: This one isn't use $_ dynamically

[23:45] <lizmat> ah

[23:45] <jnthn> I think it's this:

[23:45] <jnthn> https://github.com/lizmat/P5tie/blob/master/lib/P5tie.pm6#L35

[23:45] <jnthn> The comment is accurate ;)

[23:46] <AlexDaniel> c: 685f6cc^,685f6cc https://gist.github.com/AlexDaniel/674e67f02353737cc462ee26e1bef615

[23:46] <committable6> AlexDaniel, Using file “scalar.p6” as a main file, other files are placed in “sandbox/”

[23:46] <jnthn> I'm surprised that BIND-KEY is allowed though, given the variable is not `is dynamic`

[23:46] <committable6> AlexDaniel, ¦685f6cc^,685f6cc: «not ok 1 - did we get Int␤# Failed test 'did we get Int'␤# at sandbox/scalar.p6 line 17␤# expected: (Int)␤#      got: (Any)␤ «exit code = 1»»

[23:46] <jnthn> AlexDaniel: If you place things in the same file, the presence of CALLER:: will poison all kinds of opts

[23:47] <jnthn> AlexDaniel: It actually just looks for any use of a pseudostash and poisons them

[23:47] <AlexDaniel> c: 2018.12 https://gist.github.com/AlexDaniel/674e67f02353737cc462ee26e1bef615

[23:47] <committable6> AlexDaniel, Using file “scalar.p6” as a main file, other files are placed in “sandbox/”

[23:47] <committable6> AlexDaniel, ¦2018.12: «ok 1 - did we get Int␤»

[23:47] <AlexDaniel> well ok let's try this then…

[23:47] <AlexDaniel> bisect: old=2018.12 https://gist.github.com/AlexDaniel/674e67f02353737cc462ee26e1bef615

[23:47] <bisectable6> AlexDaniel, Using file “scalar.p6” as a main file, other files are placed in “sandbox/”

[23:47] <bisectable6> AlexDaniel, Bisecting by exit code (old=2018.12 new=f71ca0d). Old exit code: 0

[23:48] <jnthn> lizmat: Anyway, it looks like BIND-KEY isn't even checking if the thing is `is dynamic`, so this arguably shouldn't have worked before now.

[23:49] <lizmat> what and how should it check ?

[23:49] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/59a3d9a9dd40009056b9cc8badb5fc4d

[23:49] <bisectable6> AlexDaniel, There are 2 candidates for the first “new” revision. See the log for more details

[23:50] <jnthn> lizmat: Well, one way would be to see what's there now, though I'm kind of thinking about starting to attach static information to frames about what dynamic symbols they have, since we actually have other problems in this area.

[23:50] <AlexDaniel> c: e73853a1^,e73853a1,c28a0924 https://gist.github.com/AlexDaniel/674e67f02353737cc462ee26e1bef615

[23:50] <committable6> AlexDaniel, Using file “scalar.p6” as a main file, other files are placed in “sandbox/”

[23:51] <committable6> AlexDaniel, https://gist.github.com/384dda83bbb41117a03ebd901cc967cc

[23:51] <jnthn> m: class C { method m { say CALLER::<$foo> } }; { my $foo is dynamic = 42; C.m }

[23:51] <camelia> rakudo-moar 5d7079774: OUTPUT: «42␤»

[23:51] <lizmat> jnthn: I always assumed they already did

[23:51] <jnthn> m: class C { method m { say CALLER::<$foo> } }; { my $foo is dynamic := 42; C.m }

[23:51] <camelia> rakudo-moar 5d7079774: OUTPUT: «42␤»

[23:51] <jnthn> Hm, I wonder how that one works too

[23:52] <AlexDaniel> jnthn: hm I wonder why Blin managed to complain about a different commit… this last result is correct though

[23:52] <jnthn> lizmat: No, at the moment we look up the variable, do .VAR on it, and check .dynamic

[23:52] <lizmat> and then die if it isn't dynamic ?

[23:53] *** Kaypie joined
[23:53] <jnthn> Yeah, but I don't really follow how the bound case works today

[23:53] <jnthn> I'll have to dig into it

[23:53] <jnthn> I think we're doing a good amount of cheating.

[23:53] <lizmat> also: I've always understood that CALLER:: and friends had nothing to do with being dynamic or not

[23:53] <jnthn> CALLER:: should only be allowed on things declared `is dynamic`

[23:53] <lizmat> I've always understood that to be a kind of PadWalker

[23:54] *** p6bannerbot sets mode: +v Kaypie

[23:54] <jnthn> m: class C { method m { say CALLER::<$foo> } }; { my $foo = 42; C.m }

[23:54] <camelia> rakudo-moar f71ca0de1: OUTPUT: «Cannot access '$foo' through CALLER, because it is not declared as dynamic␤  in method m at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:54] <jnthn> m: class C { method m { say CALLER::<$foo> } }; { my $foo := 42; C.m }

[23:54] <camelia> rakudo-moar f71ca0de1: OUTPUT: «Cannot access '$foo' through CALLER, because it is not declared as dynamic␤  in method m at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:54] <jnthn> m: class C { method m { say CALLER::<$foo> } }; { my $foo is dynamic := 42; C.m }

[23:54] <camelia> rakudo-moar f71ca0de1: OUTPUT: «42␤»

[23:54] <jnthn> Huh, I wonder how it knows the difference there...

[23:54] *** Kaiepi left
[23:54] *** Kaypie left
[23:55] <jnthn> m: class C { method m { say CALLER::<$foo>.VAR } }; { my $foo is dynamic := 42; C.m }

[23:55] <camelia> rakudo-moar f71ca0de1: OUTPUT: «42␤»

[23:55] <AlexDaniel> yeah, Blin--, unfortunately

[23:55] *** Kaiepi joined
[23:55] <lizmat> "CALLER	Contextual symbols in the immediate caller's lexical scope"

[23:55] <lizmat> doesn't say anything about having to be dynamic

[23:55] <jnthn> lizmat: But anyway, it was intended all the way back in the design docs that things had to be "is dynamic"

[23:56] <jnthn> "Contextual variable" is the old word for "dynamic variable"

[23:56] *** p6bannerbot sets mode: +v Kaiepi

[23:56] <jnthn> Or a synonym at least

[23:56] <jnthn> I guess "environmental variable" is the term for them that absolutely didn't survive.

[23:57] <jnthn> (I think it was dropped 10 years ago or so... :))

[23:57] <jnthn> Anyway, the intent absolutely is things have to be `is dynamic`, and there's even spectets to that effect.

[23:58] <lizmat> m: sub a() { dd CALLER::.keys }; a   # shouldn't this list less then ?

[23:58] <camelia> rakudo-moar f71ca0de1: OUTPUT: «("!UNIT_MARKER", "\&a", "GLOBALish", "\$=pod", "\$!", "\$=finish", "\$?PACKAGE", "EXPORT", "::?PACKAGE", "\$¢", "\$_", "\$/").Seq␤»

[23:59] <jnthn> Yup :)

