[00:00] *** reportable6 left
[00:00] <vrurg> There're few locations in World where nqp::getcomp is used. Why isn't it pre-cached in an attribute?

[00:00] <vrurg> Wouldn't it be slightly faster?

[00:00] *** reportable6 joined
[00:09] <timotimo> i could imagine that getcomp is fast

[00:09] <timotimo> it's a hash lookup, i see

[00:10] <timotimo> though i suppose with the typical number of compilers registered at the same time being probably between 2 and 5 a little list could be faster

[00:34] *** lucasb left
[00:57] <vrurg> timotimo: World only deals with "perl6". So, I gues this one could be pre-cached in an attribute.

[00:58] <vrurg> Just hope that attribute access is optimizied.

[01:04] <timotimo> do you have a benchmark or measurement or something?

[01:05] <timotimo> i've got some outputs

[01:07] <timotimo> hm. while running, every time INITIALIZE-DYNAMIC is called, eh?

[01:08] <timotimo> ah, that is to get at language version

[01:09] <timotimo> my code uses array access and runs into the "out of range" condition quite often

[01:09] <timotimo> which wants to see if $*INDEX is there to put in the exception

[01:10] <vrurg> timotimo: I didn't do any testing so far. Just completing new subtest semantics for 6.e and stumbled upon this.

[01:10] <vrurg> It was just thinking aloud.

[01:11] <timotimo> right

[01:12] <vrurg> BTW, I postponed my games with gdb. I realized that it was hanging before even reaching any mutex on the thread context. Moreover, the freezing point is deeply inside utf8 processing, where it walks over graphemes.

[01:12] <vrurg> I tried to debug it and it was even more confusing because as long as I tried to step opver the macro ‚Äì it was freezing. But step into ‚Äì and it worked! 

[01:13] <vrurg> So long, as I don't currently have direct need in debuging moar, I decided to postpone it for better times. :)

[01:14] <timotimo> in some places getcomp is used to check if the backend is moar or jvm or whatever

[01:14] <timotimo> in files that use gen-comp, we could replace that with #?if pieces

[01:14] <timotimo> get-cat*

[01:14] <timotimo> gen-cat*

[01:15] <vrurg> BTW, I never seen #? been documented. Is it somewhere?

[01:16] <timotimo> hm, dunno

[01:16] <timotimo> it's entirely a thing gen-cat.pl does, though, so not sure where that doc would go

[01:18] <vrurg> Oh, ok, sure.

[01:19] <vrurg> I didn't know gen-cat does it. Now the meaning of what you said above makes better sense. 

[01:21] <timotimo> oops, the gist makes my browser kind of freeze up

[01:21] <vrurg> And I found the backend piece. Makes total sense replacing it with #?if

[01:22] <timotimo> well, many places that do it

[01:22] <timotimo> i don't think it's exceptionally slow, but it could be 100% faster

[01:23] <vrurg> A little bit here, a little bit there... 

[01:23] <timotimo> https://gist.githubusercontent.com/timo/1546434174a4556a64e5a26b31e185a4/raw/7132d3932bfcb51b7dfed33df0bb992fee97a9ce/gistfile1.txt - this is a very very large text file

[01:23] <timotimo> it has a stack trace whenever nqp::getcomp is called

[01:23] <timotimo> during the compilation and running of a little script, rc-forest-fire

[01:24] <timotimo> hm, actually

[01:24] <timotimo> about 1/3rd in the compiler ends

[01:24] <timotimo> the rest is almost all just DYNAMIC -> INITIALIZE-DYNAMIC

[01:32] <vrurg> Method calls on getcomp are definitely not the fastest thing even if getcomp itself is fast enough.

[01:32] <vrurg> So, in some cases it worth caching not the compiler itself, but method output if it's persistent per-unit.

[03:02] *** pamplemousse left
[03:10] <Geth> ¬¶ rakudo/master: 21 commits pushed by (Vadim Belman)++

[03:10] <Geth> ¬¶ rakudo/master: review: https://github.com/rakudo/rakudo/compare/7e1062659fb6...ef9d1354979a

[03:11] <Geth> ¬¶ roast/master: 5 commits pushed by (Vadim Belman)++

[03:11] <Geth> ¬¶ roast/master: b49238995b | Modified tests to conform new subset logic.

[03:11] <Geth> ¬¶ roast/master: 26ff0d6766 | Merge branch 'master' of https://github.com/perl6/roast into problem-solving-3

[03:11] <Geth> ¬¶ roast/master: f2be3b23af | Revert "Modified tests to conform new subset logic."

[03:11] <Geth> ¬¶ roast/master: c15db774c3 | Change tests for the new subset semantics.

[03:11] <Geth> ¬¶ roast/master: 9bd7dcdec2 | Merge pull request #547 from vrurg/problem-solving-3

[03:11] <Geth> ¬¶ roast/master: review: https://github.com/perl6/roast/compare/381974e9fa94...9bd7dcdec2b0

[03:13] <vrurg> Almost half a year marathon is finally over. Perhaps...

[03:54] *** travis-ci joined
[03:54] <travis-ci> Rakudo build passed. Vadim Belman 'Merge pull request #2946 from vrurg/problem-solving-3

[03:54] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/572575092 https://github.com/rakudo/rakudo/compare/7e1062659fb6...ef9d1354979a

[03:54] *** travis-ci left
[04:12] *** Kaiepi left
[04:12] *** Kaiepi joined
[06:00] *** reportable6 left
[06:03] *** reportable6 joined
[06:03] *** ChanServ sets mode: +v reportable6

[06:52] <Geth> ¬¶ nqp: cygx++ created pull request #573: Enable DLL-releated MoarVM ops

[06:52] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/pull/573

[06:54] <Geth> ¬¶ rakudo: cygx++ created pull request #3123: implement Nativecall::DLL

[06:54] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3123

[06:55] *** lizmat joined
[06:56] *** lizmat left
[08:57] *** lizmat joined
[09:04] <Geth> ¬¶ problem-solving/path-to-raku: 31a00384a6 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[09:04] <Geth> ¬¶ problem-solving/path-to-raku: Refince external references section

[09:04] <Geth> ¬¶ problem-solving/path-to-raku: 

[09:04] <Geth> ¬¶ problem-solving/path-to-raku: Add specific mention of Rosetta Code

[09:04] <Geth> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/31a00384a6

[09:05] <lizmat> s/refince/refine/  duh  :-(

[09:30] *** Kaiepi left
[09:34] *** Kaiepi joined
[09:37] <Geth> ¬¶ problem-solving/path-to-raku: 92fd411b67 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[09:37] <Geth> ¬¶ problem-solving/path-to-raku: Open the door to a joint rename / next version event

[09:37] <Geth> ¬¶ problem-solving/path-to-raku: 

[09:37] <Geth> ¬¶ problem-solving/path-to-raku: Also fix some erroneous backslashes

[09:37] <Geth> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/92fd411b67

[09:47] <Geth> ¬¶ problem-solving/path-to-raku: cfd072d974 | (Elizabeth Mattijsen)++ | solutions/language/PATH-TO-RAKU.md

[09:47] <Geth> ¬¶ problem-solving/path-to-raku: Mention a "Raku Foundation" as part of YAS

[09:47] <Geth> ¬¶ problem-solving/path-to-raku: review: https://github.com/perl6/problem-solving/commit/cfd072d974

[10:04] *** patrickb joined
[10:04] <patrickb> o/

[10:16] *** lizmat left
[10:53] <kawaii> \o

[11:05] <|Tux|> Rakudo version 2019.07.1-160-gef9d13549 - MoarVM version 2019.07.1-74-g5b174f528

[11:05] <|Tux|> csv-test-xs-20      0.437 -  0.440

[11:05] <|Tux|> csv-ip5xs           0.679 -  0.738

[11:05] <|Tux|> test-t --race       0.785 -  0.807

[11:05] <|Tux|> test-t              1.662 -  1.692

[11:06] <|Tux|> csv-ip5xs-20        4.966 -  4.970

[11:06] <|Tux|> test                6.539 -  7.056

[11:06] <|Tux|> test-t-20 --race    9.014 -  9.165

[11:06] <|Tux|> csv-parser         21.629 - 22.302

[11:06] <|Tux|> test-t-20          29.532 - 29.689

[11:09] <patrickb> .tell AlexDaniel I keep extending one of my "Perl 6 rename discussion" posts that contains a list of steps to do. It believe it can serve as a good starting point for the actual work given we do decide to rename.

[11:11] <patrickb> .tell AlexDaniel But I'm reluctant to put that in a more formal place, as that might be seen as taking the second step before the first one. (First one being actually deciding on the rename.)

[11:13] <patrickb> And with that I'm back to vacationing. o/

[11:13] *** patrickb left
[11:14] *** patrickb joined
[11:15] <patrickb> .tell AlexDaniel Forgot the link, here it is: https://github.com/perl6/problem-solving/issues/81#issuecomment-520216031

[11:15] *** patrickb left
[11:19] *** lizmat joined
[12:00] *** reportable6 left
[12:04] *** reportable6 joined
[12:11] *** lizmat left
[12:14] *** lizmat joined
[12:33] <AlexDaniel> hmm

[12:34] <AlexDaniel> lizmat: ‚Üë see that list

[12:43] <lizmat> AlexDaniel: sorry, what list (was offline for a bit)

[12:44] <AlexDaniel> lizmat: https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-08-16#l102

[12:45] <AlexDaniel> lizmat: this comment: https://github.com/perl6/problem-solving/issues/81#issuecomment-520216031

[12:45] <lizmat> Ah, hadn't noticed it is being expanded... wlll look at that

[12:46] <AlexDaniel> lizmat: how about we close the thread for a week?

[12:46] <AlexDaniel> lizmat: I'm tired waking up to a pagefull of notifications

[12:46] <lizmat> I'm fine, if you can... seems I can not  :-)   Just close it, but that wouldn't stop comments

[12:47] <AlexDaniel> there are still some useful bits being mentioned, but you have to look really close to see them

[12:47] <AlexDaniel> reason ‚Äútoo heated‚Äù that sounds about right

[12:50] <lizmat> yeah, thanks

[12:51] <AlexDaniel> lizmat: do you see the comment box right now?

[12:51] <jnthn> Yes, but...some folks (like moritz++) who will vote on it are still chiming in, among those who are being unpleasant. But maybe those who are part of the perl 6 org can still post?

[12:51] <lizmat> I think moritz can still post now

[12:51] <AlexDaniel> lizmat: but can you?

[12:52] <AlexDaniel> I think I made you the owner of perl6 org a few days ago

[12:52] <lizmat> seems I can

[12:52] <jnthn> Ah, it's limited to collaborators

[12:52] <jnthn> I guess that's folks in the Perl 6 org?

[12:53] <jnthn> If so, I'm fine with it.

[12:53] <jnthn> I think I've heard enough from the outside by now. :P

[12:54] <jnthn> (Also, I marked a couple of them that were general rants about Perl 6 as off-topic because, well, they are.)

[12:54] <AlexDaniel> thank you

[12:55] <AlexDaniel> kawaii: hello

[12:55] <kawaii> AlexDaniel: hello to you too friend

[12:56] <AlexDaniel> kawaii: can you tell me if you can still see the comment box here? https://github.com/perl6/problem-solving/issues/81

[12:56] <AlexDaniel> kawaii: like, can you still leave comments on that thread or not?

[12:57] <kawaii> AlexDaniel:  doesn't look like I can!

[12:59] <AlexDaniel> kawaii: ok, I see. Thanks!

[12:59] <AlexDaniel> anyway https://github.com/perl6/problem-solving/issues/81#issuecomment-522000319

[13:02] * AlexDaniel takes a deep breath

[13:03] <AlexDaniel> jnthn: I think it's limited to this list: https://github.com/orgs/perl6/people?utf8=%E2%9C%93&query=+role%3Aowner

[13:05] <AlexDaniel> btw toddr is in it because there were some potential limitations for repo management for the upcoming old-issue-tracker repo

[13:06] <kawaii> It was an excellent thread with some really good discussion points

[13:06] <kawaii> AlexDaniel: do you know about the status of the star release?

[13:07] <AlexDaniel> kawaii: no, you need to ask hankache and clarkema

[13:07] <AlexDaniel> kawaii: or maybe open a new ticket here? https://github.com/rakudo/star/issues

[13:07] <AlexDaniel> asking for a new release

[13:07] <kawaii> I'm sure one of them will be notified by you mentioning their names, no need for me to harass further :)

[13:09] <AlexDaniel> kawaii: not exactly

[13:09] <AlexDaniel> kawaii: clarkema is on #perl6 but not here

[13:10] <kawaii> ah then I must be annoying it seems :(

[13:10] <kawaii> oh looks like you already poked him in #perl6

[13:10] <kawaii> :)

[13:12] <AlexDaniel> maybe today is the day when I'll finally bring tellable6 up

[13:12] <AlexDaniel> wish me luck x)

[13:12] <vrurg> AlexDaniel: good luck! :)

[13:15] <vrurg> greppable6: use v6\.\*

[13:15] <greppable6> vrurg, 6 lines, 3 modules: https://gist.github.com/5d3859367f37a5561e7cba03ae59883a

[13:16] <vrurg> greppable6: use v6\.e

[13:16] <greppable6> vrurg, Found nothing!

[13:31] *** Kaiepi left
[13:31] *** Kaiepi joined
[13:33] <lizmat> AlexDaniel jnthn looks like you cannot add emojis to comments anymore

[13:33] <AlexDaniel> lizmat: yeah

[13:33] <AlexDaniel> there's no fine-grained control over this

[13:52] *** lucasb joined
[13:58] * [Coke] wonders how many gists Whateverable has at this point

[13:58] <[Coke]> Oh: 10,147

[13:58] * [Coke] wasn't expecting that to be public for some reason. :)

[14:03] <moritz> jnthn, lizmat: yes, I can still comment (I'm org owner as well)

[14:45] <AlexDaniel> [Coke]: it's weird, there are several ways I'm abusing github yet the only complaint I got so far was that I have more than two accounts

[14:47] <[Coke]> regarding nuance comment on the ticket: I think we already lost the nuance battle, and this will not make it worse.

[14:47] <AlexDaniel> it's more like using than abusing, but I'm surprised I didn't trigger any automated ban hammer

[14:56] *** pamplemousse joined
[15:12] <timotimo> vrurg: did the list of "every place that calls getcomp" end up helping more than what we already discussed?

[15:48] <Geth> ¬¶ rakudo: 238f8e5739 | (Timo Paulssen)++ | src/core/CompUnit/PrecompilationRepository.pm6

[15:48] <Geth> ¬¶ rakudo: Show stagestats for dependent precompilation

[15:48] <Geth> ¬¶ rakudo: 

[15:48] <Geth> ¬¶ rakudo: This way you can get much more info when your "stage parse"

[15:48] <Geth> ¬¶ rakudo: takes long, and you can more easily see the dependency

[15:48] <Geth> ¬¶ rakudo: structure of your projects (though of course modules that

[15:48] <Geth> ¬¶ rakudo: were already precompiled won't show up here)

[15:48] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/238f8e5739

[15:48] <Geth> ¬¶ rakudo: 960e5b4a43 | (Timo Paulssen)++ | src/core/CompUnit/PrecompilationRepository.pm6

[15:48] <Geth> ¬¶ rakudo: flush stderr in stagestats report

[15:48] <timotimo> ^- stagestats just became a whole lot funkier

[15:48] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/960e5b4a43

[15:48] <Geth> ¬¶ rakudo: 0fbf92ca32 | (Timo Paulssen)++ | src/core/CompUnit/PrecompilationRepository.pm6

[15:48] <Geth> ¬¶ rakudo: Merge branch 'nested_stagestats'

[15:48] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/0fbf92ca32

[15:51] <timotimo> i'd kind of like a RAKUDO_COMPILER_REPORT_PORT=9999 where it'd spit out like udp messages or something at different points in compilation, including when it precompiles dependent modules and such

[15:59] *** pamplemousse left
[15:59] *** pamplemousse joined
[16:15] <vrurg> timotimo: I didn't get time for this. Finished with subsets at 11pm.

[16:17] <timotimo> no problem at all :)

[16:18] <vrurg> But I have noted it alongside some other stuff. And if things go this way, in few months my personal task list would be the size of issues list on rakudo... ;)

[16:19] <timotimo> i know that feeling

[16:19] <vrurg> m: subset SS of Int where { .defined }; my SS $v;

[16:19] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[16:19] <vrurg> Which bot follows master, I don't remember?

[16:19] <MasterDuke> benchable6: HEAD compare sub foo($a, $b, $c, $d) { my $e = $a; my $f = $b; my $g = $c; my $h = $d; $e++; $f++; $g++; $h++; $e+$f+$g+$h }; my $s1 = 0; for ^1_000_000 -> $a, $b, $c, $d { $s1 = foo($a, $b, $c, $d) }; say $s1; ||| sub bar($a is copy, $b is copy, $c is copy, $d is copy) { $a++; $b++; $c++; $d++; $a+$b+$c+$d }; my $s2 = 0; for ^1_000_000

[16:19] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[16:19] <MasterDuke>  -> $a, $b, $c, $d { $s2 = bar($a, $b, $c, $d) }; say $s2;

[16:19] <benchable6> MasterDuke, No new data found

[16:20] <vrurg> m: use v6.e.PREVIEW; subset SS of Int where { .defined }; my SS $v;

[16:20] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[16:21] <MasterDuke> benchable6: compare HEAD sub foo($a, $b, $c, $d) { my $e = $a; my $f = $b; my $g = $c; my $h = $d; $e++; $f++; $g++; $h++; $e+$f+$g+$h }; my $s1 = 0; for ^1_000_000 -> $a, $b, $c, $d { $s1 = foo($a, $b, $c, $d) }; say $s1; ||| sub bar($a is copy, $b is copy, $c is copy, $d is copy) { $a++; $b++; $c++; $d++; $a+$b+$c+$d }; my $s2 = 0; for ^1_000_000

[16:21] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[16:21] <MasterDuke>  -> $a, $b, $c, $d { $s2 = bar($a, $b, $c, $d) }; say $s2;

[16:21] <benchable6> MasterDuke, https://gist.github.com/10b2bab00c6eeb58f34555ef43f91e49

[16:22] <timotimo> oh no, the message was too long

[16:23] <MasterDuke> benchable6: compare HEAD sub foo($a,$b,$c,$d){my $e=$a;my $f=$b;my $g=$c;my $h=$d;$e++;$f++;$g++;$h++;$e+$f+$g+$h};my $s1=0; for ^1_000_000 -> $a,$b,$c,$d {$s1=foo($a,$b,$c,$d)}; say $s1; ||| sub bar($a is copy,$b is copy,$c is copy,$d is copy) {$a++;$b++;$c++;$d++;$a+$b+$c+$d};my $s2=0; for ^1_000_000 -> $a,$b,$c,$d {$s2=bar($a,$b,$c,$d)};say $s2;

[16:23] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[16:24] <benchable6> MasterDuke, ¬¶HEAD: ¬´Benchmark: ‚ê§¬´timed out after 10 seconds¬ª¬ª

[16:24] <AlexDaniel> vrurg: ‚ÄúWhich bot follows master, I don't remember?‚Äù any bot that's not broken xD

[16:24] <MasterDuke> benchable6: compare HEAD sub foo($a,$b,$c,$d){my $e=$a;my $f=$b;my $g=$c;my $h=$d;$e++;$f++;$g++;$h++;$e+$f+$g+$h};my $s1=0; for ^500_000 -> $a,$b,$c,$d {$s1=foo($a,$b,$c,$d)}; say $s1; ||| sub bar($a is copy,$b is copy,$c is copy,$d is copy) {$a++;$b++;$c++;$d++;$a+$b+$c+$d};my $s2=0; for ^500_000 -> $a,$b,$c,$d {$s2=bar($a,$b,$c,$d)};say $s2;

[16:24] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[16:24] <benchable6> MasterDuke, ¬¶HEAD: ¬´Benchmark: ‚ê§¬´timed out after 10 seconds¬ª¬ª

[16:24] <AlexDaniel> moritz: I think camelia is still not fixed

[16:25] <AlexDaniel> MasterDuke: maybe try committable first?

[16:25] <MasterDuke> AlexDaniel: can you increase benchable6's timeout?

[16:25] <AlexDaniel> aaah sorry it's `compare` thing

[16:25] <AlexDaniel> benchable6: vars

[16:25] <benchable6> AlexDaniel, timeout=10

[16:25] <AlexDaniel> benchable6: timeout=30

[16:25] <benchable6> AlexDaniel, timeout is now set to ‚Äú30‚Äù (default value is ‚Äú10‚Äù)

[16:25] <AlexDaniel> try again?

[16:25] <MasterDuke> ah ha, forgot about that!

[16:25] <MasterDuke> benchable6: compare HEAD sub foo($a,$b,$c,$d){my $e=$a;my $f=$b;my $g=$c;my $h=$d;$e++;$f++;$g++;$h++;$e+$f+$g+$h};my $s1=0; for ^500_000 -> $a,$b,$c,$d {$s1=foo($a,$b,$c,$d)}; say $s1; ||| sub bar($a is copy,$b is copy,$c is copy,$d is copy) {$a++;$b++;$c++;$d++;$a+$b+$c+$d};my $s2=0; for ^500_000 -> $a,$b,$c,$d {$s2=bar($a,$b,$c,$d)};say $s2;

[16:25] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[16:25] <AlexDaniel> I'm not sure if that thing works, actually

[16:25] <AlexDaniel> but let's see

[16:25] <benchable6> MasterDuke, https://gist.github.com/0e4acc92e80490b6ee2b5827093f08b4

[16:26] <AlexDaniel> wow it does work xD

[16:26] *** lizmat left
[16:26] <MasterDuke> occasionally i write some code that works some of the time

[16:26] <timotimo> so "is copy" is a lot faster?

[16:26] <MasterDuke> other way around

[16:27] <timotimo> oh?

[16:27] <timotimo> damn.

[16:27] *** lizmat joined
[16:27] *** lizmat left
[16:28] <AlexDaniel> timotimo: yeah, I've seen that somewhere in real code

[16:28] <MasterDuke> benchable6: timeout=120

[16:28] <benchable6> MasterDuke, timeout is now set to ‚Äú120‚Äù (default value is ‚Äú10‚Äù)

[16:28] <MasterDuke> benchable6: compare HEAD sub foo($a,$b,$c,$d){my $e=$a;my $f=$b;my $g=$c;my $h=$d;$e++;$f++;$g++;$h++;$e+$f+$g+$h};my $s1=0; for ^1_000_000 -> $a,$b,$c,$d {$s1=foo($a,$b,$c,$d)}; say $s1; ||| sub bar($a is copy,$b is copy,$c is copy,$d is copy) {$a++;$b++;$c++;$d++;$a+$b+$c+$d};my $s2=0; for ^1_000_000 -> $a,$b,$c,$d {$s2=bar($a,$b,$c,$d)};say $s2;

[16:28] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[16:29] <benchable6> MasterDuke, https://gist.github.com/85051c7cf2fe0fab83918ba26b5c94f6

[16:29] <MasterDuke> hm, i didn't see quite that big a difference locally

[16:32] *** Ven`` joined
[16:32] <MasterDuke> jnthn: fyi, ^^^

[16:35] <jnthn> MasterDuke: Is the `is copy` itself slower, or is it to do with an effect it has on how the ++ and + can be optimized?

[16:36] <MasterDuke> jnthn: dunno. that was just the first thing i thought of that would exercise the need for `is copy` (or the equivalent)

[16:40] <MasterDuke> same different if i assign `rand` to the variables instead of increment them

[16:40] <MasterDuke> *difference in time taken

[16:45] *** Kaiepi left
[16:45] *** Kaiepi joined
[16:49] <MasterDuke> c

[16:55] <moritz> m: say $*PERL.version 

[16:55] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´v6.d‚ê§¬ª

[16:55] <moritz> m: say $*COMPILER.version

[16:55] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´Dynamic variable $*COMPILER not found‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:57] <moritz> the version number at start looks stuck, yes. Will need to look at this in more detail

[17:07] *** Ven`` left
[17:09] *** Ven`` joined
[17:13] *** Ven`` left
[17:14] <vrurg> m: say $*PERL.compiler.version

[17:14] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´v2019.07.69.gecf.2.b.1.e.4.f‚ê§¬ª

[17:17] *** lucasb left
[17:34] <vrurg> jnthn: do you mind of introducing CORE::<lang-rev>:: pseudo-packages?

[17:34] <vrurg> R#3112

[17:34] <synopsebot> R#3112 [open]: https://github.com/rakudo/rakudo/pull/3112 [6.e] Implement CORE::<lang-rev> pseudo-packages

[17:43] *** samcv left
[17:48] *** samcv joined
[18:00] *** reportable6 left
[18:02] *** reportable6 joined
[18:02] *** ChanServ sets mode: +v reportable6

[18:21] *** lucasb joined
[18:47] <Geth> ¬¶ rakudo/master: 8 commits pushed by (Vadim Belman)++

[18:47] <Geth> ¬¶ rakudo/master: da65fb5bae | Fix for rakudo/rakudo#2178

[18:47] <Geth> ¬¶ rakudo/master: 6e24ad57f3 | Merge branch 'master' of https://github.com/rakudo/rakudo into issue_2178

[18:47] <Geth> ¬¶ rakudo/master: 2e915d74ee | Fixed a bug when a wrapped method is called first

[18:47] <Geth> ¬¶ rakudo/master: f5e40b2f7b | Removed extra spaces before signatures

[18:47] <Geth> ¬¶ rakudo/master: 7d8cba1cf3 | Merge branch 'master' of https://github.com/rakudo/rakudo into issue_2178

[18:47] <Geth> ¬¶ rakudo/master: d6985fd67d | Merge branch 'master' of https://github.com/rakudo/rakudo into issue_2178

[18:47] <synopsebot> RAKUDO#2178 [open]: https://github.com/rakudo/rakudo/issues/2178 .wrap of a method breaks callsame/nextsame/etc.

[18:47] <Geth> ¬¶ rakudo/master: 1463ce02ff | Merge branch 'master' of https://github.com/rakudo/rakudo into issue_2178

[18:47] <Geth> ¬¶ rakudo/master: 2a5b642de3 | Merge pull request #2749 from vrurg/issue_2178

[18:47] <Geth> ¬¶ rakudo/master: review: https://github.com/rakudo/rakudo/compare/0fbf92ca3227...2a5b642de3eb

[18:47] <Geth> ¬¶ roast/master: 5 commits pushed by (Vadim Belman)++

[18:47] <Geth> ¬¶ roast/master: 632cde2831 | Tests for dispatching with wrapped methods

[18:47] <Geth> ¬¶ roast/master: f97749dd8c | Merge branch 'master' of https://github.com/perl6/roast into issue_2178

[18:47] <Geth> ¬¶ roast/master: 6e200b9b16 | Merge branch 'master' of https://github.com/perl6/roast into issue_2178

[18:47] <Geth> ¬¶ roast/master: c248592dc5 | Merge branch 'master' of https://github.com/perl6/roast into issue_2178

[18:47] <Geth> ¬¶ roast/master: 012b723210 | Merge pull request #518 from vrurg/issue_2178

[18:47] <Geth> ¬¶ roast/master: review: https://github.com/perl6/roast/compare/9bd7dcdec2b0...012b7232109d

[19:10] *** grayrider joined
[19:33] *** grayrider left
[19:42] *** Ven`` joined
[19:56] *** pamplemousse left
[20:07] *** pamplemousse joined
[20:26] *** pamplemousse left
[20:32] *** pamplemousse joined
[21:25] *** epony left
[21:51] *** Ven`` left
[22:20] <vrurg> AlexDaniel: since you're available yet, I'm not really happy about `CORE::v6d` naming as it's rather long. Besides, it is not decided yet if we keep or drop 6. version prefix, even though I'd be strongly opposed to changing versioning model.

[22:25] <AlexDaniel> vrurg: it is not yet decided if we're going to drop it or not, yet you're dropping it :)

[22:26] <AlexDaniel> and what do you mean ‚Äúlong‚Äù

[22:26] <AlexDaniel> two characters?

[22:26] <AlexDaniel> honestly, that doesn't sound very convincing to me :)

[22:26] <vrurg> AlexDaniel: No, I'm not. Terminlogy-wise we have version (6.e, v6.e) and we have revision (e).

[22:27] <jnthn> I don't think it'll be used often enough to justify making it especially short

[22:27] <vrurg> I'm not dropping.

[22:28] <AlexDaniel> if not dropping, then it should also work with 7.d even if we never bump the version to 7

[22:28] <vrurg> Another point for just letter is readability. CORE::v6c::Class, CORE::v6d::Class vs CORE::c::Class, CORE::d::Class

[22:28] <AlexDaniel> v6d is more readable in this case to me

[22:28] <AlexDaniel> stands out a bit more

[22:28] * jnthn agrees with AlexDaniel 

[22:29] <jnthn> Though I still wonder about the adverb approach (CORE:ver<6.d>)

[22:29] <vrurg> My braing is still in all-uppercase variant of CORE::V6D which looked really ugly.

[22:30] <vrurg> jnthn: CORE:ver<6.d>::PseudoStash ‚Äì pretty much line noise looking.

[22:30] <jnthn> I parse "line noise" as "I don't need to consider this argument" :P

[22:31] * vrurg is just trying to formulate it properly.

[22:31] <jnthn> But seriously, if adverbs - with feature all over Perl 6 - are line noise, well... :)

[22:31] <jnthn> *which

[22:31] <jnthn> The argument for it is regularity, I guess.

[22:31] <vrurg> I like PseudoStash:ver<6.d> for direct reference. But for introspection CORE::v6d:: is better.

[22:31] <AlexDaniel> jnthn: actually, I kinda agree that it is a bit too symbol-y

[22:31] <jnthn> use Foo:ver<1.2>

[22:32] <AlexDaniel> but I wouldn't say it's too bad‚Ä¶

[22:32] <jnthn> m: use v6.d

[22:32] <vrurg> TIMTOWTDI

[22:32] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[22:32] <jnthn> m: use v6d

[22:32] <camelia> rakudo-moar ecf2b1e4f: ( no output )

[22:32] <jnthn> Huh, I'd forgotten you can write the second :)

[22:32] <AlexDaniel> O_o

[22:33] <vrurg> We can have both and use depending on personal taste and task.

[22:33] <AlexDaniel> you‚Ä¶ can‚Ä¶?

[22:33] <jnthn> Maybe I hadn't forgot :P

[22:33] <AlexDaniel> m: say v6d

[22:33] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´v6.d‚ê§¬ª

[22:33] <vrurg> m: say Version.new('v6d')

[22:33] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: ¬´vv.6.d‚ê§¬ª

[22:33] <jnthn> Anyway, there goes my argument that it's different from what you write in the `use` statement :P

[22:33] <AlexDaniel> ok then I don't see anything wrong with ::v6d::

[22:33] <vrurg> besides that it does it this way.

[22:33] <AlexDaniel> I thought it wasn't really a valid version, but turns out it is

[22:34] <vrurg> Ok, I rename it. The only thing made me using ::D is to follow all-uppercase standard. 

[22:35] <vrurg> But since it's second level, it can be treated differently.

[22:36] <vrurg> Thanks! I get it fixed and merge. This will unblock R#3103

[22:36] <synopsebot> R#3103 [open]: https://github.com/rakudo/rakudo/pull/3103 [6.e][tests needed] Return Failure from failed P6-level .parse on 6.e

[22:36] <jnthn> I'm still just a tiny bit...discontented, I guess...that we're introducing a discontinuity where CORE::foo means a lookup in CORE, except when it's followed by a specific pattern.

[22:36] <jnthn> I agree that we're not going to have a symbol v6d or so on

[22:36] <vrurg> jnthn: consider it a lookup too. It's like symbols containting the specific cores. Why not?

[22:37] <jnthn> vrurg: Well, how is it actually implemented? :)

[22:37] <jnthn> If it's by each CORE.setting saying `my constant v6c := UNIT` or something I guess I can buy it...kind of :)

[22:38] <timotimo> CORE::v6d::v6c::v6e::... :)

[22:38] <jnthn> :P

[22:39] <jnthn> Anyway, I can go with CORE::v6d, I think

[22:39] <MasterDuke> but, eventually, how will distinguish between CORE::v60 and CORE::v6d in casual conversation!?!?!

[22:39] <vrurg> jnthn: Because it has to work compile time, it's supported by World::find_symbol_in_setting 

[22:39] <vrurg> And run-time is provided by PseudoStash.

[22:39] <jnthn> Hm, OK

[22:40] <vrurg> timotimo: v6e will be a Failure

[22:40] <jnthn> Hm, compile time?

[22:40] <jnthn> What if I say CORE::v6d::.keys, for example?

[22:41] <jnthn> Or are you saying it resolves up to the v6d bit at compile time?

[22:41] <MasterDuke> btw, in case anybody wants something else to work on, `--profile-compile` of the rakudo build still dies

[22:41] <vrurg> jnthn: It will be handled by run-time. :)

[22:41] <jnthn> OK

[22:47] *** MasterDuke left
[22:49] <vrurg> Now, I can't get rid of the idea of installing the actual symbols on COREs...

[22:50] <vrurg> Ah, nevermind, it won't work...

[23:02] *** pamplemousse left
[23:07] *** pamplemousse joined
[23:11] *** pamplemousse left
[23:40] <AlexDaniel> Dogbert4711 dogbert11 dogbert17 dogbert17_ dogbert2 dogbert21 dogbert2_

[23:40] <AlexDaniel> :D

