[00:09] *** lizmat_ joined
[00:12] *** lizmat left
[02:31] *** vrurg joined
[04:45] *** lizmat_ is now known as lizmat

[04:56] <lizmat> is this a known issue on HEAD? 

[04:56] <lizmat> $ perl6 -e 'use Inline::Perl5'

[04:56] <lizmat> ===SORRY!===

[04:56] <lizmat> Cannot unbox a type object (int64) to int.

[04:57] *** vrurg left
[05:23] *** lizmat left
[05:54] *** lizmat joined
[05:58] <MasterDuke> lizmat: oh, i didn't have Inline::Perl5 installed, that's probably because of my default-int merges

[05:58] <lizmat> which is post-release, right ?

[05:59] <MasterDuke> yeah

[06:00] *** [TuxCM] left
[06:01] *** brrt joined
[06:11] *** lizmat left
[06:17] *** krunen left
[06:17] *** krunen joined
[06:38] *** lizmat joined
[06:45] * lizmat hopes MasterDuke will be able to fix Inline::Perl5 soon

[06:50] <MasterDuke> lizmat: making progress

[06:50] <lizmat> MasterDuke++

[06:52] <lizmat> fwiw, this also affects zef, at least for me:

[06:52] <lizmat> $ zef upgrade

[06:52] <lizmat> ===SORRY!===

[06:52] <lizmat> Cannot unbox a type object (NQPMu) to int.

[06:52] <MasterDuke> yep, saw that too

[06:52] <lizmat> ok  :-)

[06:53] *** patrickb joined
[06:53] <lizmat> MasterDuke: do you have any rollback suggestions at this time ?

[06:54] <MasterDuke> ?

[06:54] <MasterDuke> if you rollback to right before the nqp bump it should be fine

[06:54] <Kaiepi> .tell timotimo can we talk about whether or not i need to rebootstrap nqp for my nativecall wide string support pullreq again? i ran into an issue that may require it

[06:54] <yoleaux> Kaiepi: I'll pass your message to timotimo.

[06:56] <lizmat> git checkout d4ceb97e06cd01babdd34356140 and a reconfigure, does not even build  :-(

[06:59] <MasterDuke> lizmat: using --gen-nqp ?

[06:59] <lizmat> perl Configure.pl --gen-moar --gen-nqp --make-install

[06:59] <lizmat> to be exact

[07:00] <lizmat> I actually nuked the nqp dir, but it didn't refetch not recompile it

[07:00] <lizmat> guess I need to nuke more

[07:00] <MasterDuke> the install directory probably

[07:01] <MasterDuke> is there a way to pass --ll-exception through all the calls zef makes?

[07:02] <MasterDuke> if not, definitely ++ to ugexe's suggestion of a LL_EXCEPTIONS env variable

[07:02] <lizmat> I think you can call zef as "perl6 --ll-exception .../zef ?

[07:02] <MasterDuke> yep, but it doesn't pass that through

[07:03] <MasterDuke> ===> Testing: Inline::Perl5:ver<0.40>:auth<github:niner>===SORRY!===Cannot unbox a type object (int64) to int.  in block <unit> at t/argv.t line 8

[07:03] <lizmat> well, I have Inline::Perl5 already installed

[07:03] <lizmat> and I can give you a trace of 'use Inline::Perl5

[07:03] <lizmat> ?

[07:03] <MasterDuke> please

[07:04] <lizmat> https://gist.github.com/lizmat/83476091b86901b90fb0a005bab53986

[07:11] * lizmat hopes that is helpful

[07:12] <MasterDuke> got farther, but new error

[07:13] <MasterDuke> ==> Testing: Inline::Perl5:ver<0.40>:auth<github:niner>This type cannot unbox to a native number: P6opaque, Int===SORRY!===Serialization Error: missing static code ref for closure '' (core#sources/947BDAB9F96E0E5FCCB383124F923A6BF6F8D76B (NativeCall):531)  in block <unit> at t/argv.t line 8This type cannot unbox to a native number: P6opaque, Int

[07:13] <MasterDuke> unfortunately, i gotta afk for a bit

[07:18] <lizmat> MasterDuke: ok, I'm nuking all of my install and rebuild from before the NQP bump

[07:18] <lizmat> annoying, but that's life on the edge  :-)

[07:19] *** [TuxCM] joined
[07:43] *** brrt left
[07:54] *** lizmat_ joined
[07:57] *** lizmat left
[08:07] <patrickb> .tell ugexe Putting a space in the appveyor build path sounds good! But note that non-Windows currently does not work in a path with spaces (the dyncall build currently doesn't support that on Linux).

[08:07] <yoleaux> patrickb: I'll pass your message to ugexe.

[08:08] <patrickb> .tell ugexe On a related note. There are many different build setups that we support and don't want to break, but that do break time and time again. (Windows: cl/mingw/clang, 1/3 prefixes, non-reloc/reloc, Linux: gcc/clang, 1/3 prefixes, non-reloc/reloc)

[08:08] <yoleaux> patrickb: I'll pass your message to ugexe.

[08:08] <patrickb> .tell ugexe I do like to have a way to automatically test all of these when making changes to the build system. But I don't like inflating the CI. Do you know whether it's possible to have travis/appveyor/circleci jobs that don't run automatically, but can be triggered?

[08:08] <yoleaux> patrickb: I'll pass your message to ugexe.

[08:09] <patrickb> .tell ugexe Also, do you intend to get rid of Travis, now that we have CircleCI up and running?

[08:09] <yoleaux> patrickb: I'll pass your message to ugexe.

[08:15] *** lizmat_ is now known as lizmat

[09:04] <Kaiepi> so i'm starting my work on the changes to CStr's REPR needed for wide string support

[09:05] <Kaiepi> should i add a variable to storage specs containing the native type of whatever they contain or should it stay separate?

[09:05] <Kaiepi> since P6int and P6num already have native type variables in their state as well

[09:49] <MasterDuke> nine: ping

[10:09] <MasterDuke> lizmat: think it's fixed. just running a spectest to make sure it didn't cause any other regressions

[10:27] *** brrt joined
[10:30] <Geth> Â¦ rakudo: cf6f6d926f | (Daniel Green)++ | 3 files

[10:30] <Geth> Â¦ rakudo: Default-int fixes for zef and Inline::Perl5

[10:30] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cf6f6d926f

[10:30] <MasterDuke> lizmat: can you pull and try at current HEAD?

[10:55] <Kaiepi> .tell timotimo never mind, i didn't end up needing to rebootstrap after all

[10:55] <yoleaux> Kaiepi: I'll pass your message to timotimo.

[11:03] <[TuxCM]> Rakudo version 2019.03.1-672-g669a3b9f3 - MoarVM version 2019.05-99-g729303de7

[11:03] <[TuxCM]> csv-test-xs-20      0.426 -  0.432

[11:03] <[TuxCM]> test-t --race       0.787 -  0.858

[11:03] <[TuxCM]> test-t              1.701 -  1.735

[11:03] <[TuxCM]> test-t-20 --race    8.975 - 10.169

[11:03] <[TuxCM]> test-t-20          27.922 - 28.614

[11:03] <[TuxCM]> csv-parser         33.645 - 34.349

[11:03] <[TuxCM]> BUT

[11:03] <[TuxCM]> ===SORRY!===

[11:03] <[TuxCM]> Cannot unbox a type object (int64) to int.

[11:03] <[TuxCM]> .===SORRY!===

[11:03] <[TuxCM]> Cannot unbox a type object (int64) to int.

[11:03] <[TuxCM]> .===SORRY!===

[11:03] <[TuxCM]> Cannot unbox a type object (int64) to int.

[11:03] <[TuxCM]> .===SORRY!===

[11:03] <[TuxCM]> Cannot unbox a type object (int64) to int.

[11:03] <[TuxCM]> .===SORRY!===

[11:04] <[TuxCM]> Cannot unbox a type object (NQPMu) to int.

[11:04] <[TuxCM]> .===SORRY!===

[11:04] <[TuxCM]> Cannot unbox a type object (NQPMu) to int.

[11:04] <[TuxCM]> Those are new

[11:08] *** squashable6 left
[11:10] *** brrt left
[11:10] *** reportable6 left
[11:10] *** shareable6 left
[11:10] *** greppable6 left
[11:10] *** committable6 left
[11:11] *** greppable6 joined
[11:11] *** squashable6 joined
[11:11] *** ChanServ sets mode: +v squashable6

[11:12] *** reportable6 joined
[11:12] *** ChanServ sets mode: +v reportable6

[11:12] *** committable6 joined
[11:12] *** ChanServ sets mode: +v committable6

[11:14] *** shareable6 joined
[11:14] *** ChanServ sets mode: +v shareable6

[11:15] <MasterDuke> [TuxCM]: those are hopefully fixed on the very next commit after the one you're at. mind pulling and trying again?

[11:16] <[TuxCM]> rrrrrunnnnninggggg

[11:17] <MasterDuke> thanks

[11:54] *** brrt joined
[11:57] *** brrt` joined
[11:59] *** brrt left
[12:37] <[TuxCM]> Rakudo version 2019.03.1-673-gcf6f6d926 - MoarVM version 2019.05-99-g729303de7

[12:37] <[TuxCM]> csv-test-xs-20      0.431 -  0.436

[12:37] <[TuxCM]> csv-ip5xs           0.684 -  0.694

[12:37] <[TuxCM]> test-t --race       0.791 -  0.815

[12:37] <[TuxCM]> test-t              1.707 -  1.708

[12:37] <[TuxCM]> csv-ip5xs-20        5.259 -  5.299

[12:37] <[TuxCM]> test                7.387 -  7.414

[12:37] <[TuxCM]> test-t-20 --race    8.801 -  8.990

[12:37] <[TuxCM]> test-t-20          28.206 - 28.660

[12:37] <[TuxCM]> csv-parser         33.031 - 33.629

[12:37] <[TuxCM]> (and it was clean)

[12:40] <MasterDuke> glad to hear it

[12:41] <masak> MasterDuke: it strikes me that the issue cf6fd926 fixes could have been detected statically. I feel strangely inclined to put together something that would check for that, maybe as early as tonight. what's your opinion?

[12:47] <MasterDuke> masak: that seems possible. i was just concerned with getting the bugs fixed (and getting something merged at all)

[12:47] <MasterDuke> i'd be very curious to see what you come up with

[12:49] <masak> hey, no criticism implied at all -- great work on fixing the direct problem! :+1:

[12:50] <masak> I'm thinking a quick-and-dirty approach might use Perl 5, regexes, and Text::Balanced

[12:50] <masak> a longer-term fix could maybe hook into the AST stage of the nqp compiler

[12:54] <MasterDuke> no worries, didn't think that was criticism

[13:01] *** brrt` left
[13:01] *** brrt` joined
[13:04] <masak> it's just that I've gotten attuned lately to issues of the type "this could have been prevented by a machine that can double-check the code on a structural level"

[13:04] <masak> linting-ish stuff

[13:29] *** brrt` left
[13:32] *** vrurg joined
[13:45] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/f077f57c

[13:45] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2019.03-83-g0adfd6ada...2019.03-175-g25114a3f1

[14:07] <nine> MasterDuke: pong

[14:07] <yoleaux> 28 Jun 2019 23:50Z <patrickb83> nine: I'd appreciate a look: https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-06-28#l257

[14:12] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/f077f57c

[14:12] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2019.03-83-g0adfd6ada...2019.03-175-g25114a3f1

[15:02] <Geth> Â¦ nqp: Kaiepi++ created pull request #562: Add a note about the JVM and ulimit to the README

[15:02] <Geth> Â¦ nqp: review: https://github.com/perl6/nqp/pull/562

[15:14] <patrickb> vrurg: Ping

[15:37] *** patrickb left
[15:41] <Kaiepi> when should REPRs have a storage spec?

[15:48] *** [TuxCM] left
[16:16] <MasterDuke> nine: sorry, think i solved it (problem with inline::perl6 and my default-int merge)

[16:17] <nine> MasterDuke: all the better :)

[16:23] *** llfourn joined
[16:28] <MasterDuke> heh, i've gotten used to typing a 6, that was supposed to be inline::perl5

[17:06] *** vrurg left
[17:21] *** vrurg joined
[18:03] *** lizmat left
[18:07] *** vrurg left
[18:39] *** vrurg joined
[18:43] *** brrt` joined
[18:51] *** lucasb joined
[19:16] *** [TuxCM] joined
[19:16] <vrurg> m: my $*AAA; { my $*BBB; for DYNAMIC::.keys { say $sym, " dyn? ", ( try { DYNAMIC::{$sym}.VAR.dynamic } || "NO" ) } }'

[19:16] <yoleaux> 4 Jul 2019 22:12Z <patrickb> vrurg: I'd be grateful for testing on MacOS of these branches. There are changes and respective PRs in MoarVM, nqp-configure, nqp and rakudo. All necessary to get it to work.

[19:16] <camelia> rakudo-moar cf6f6d926: OUTPUT: Â«5===SORRY!5=== Error while compiling <tmp>â¤Variable '$sym' is not declaredâ¤at <tmp>:1â¤------> 3A; { my $*BBB; for DYNAMIC::.keys { say 7â5$sym, " dyn? ", ( try { DYNAMIC::{$sym}.â¤Â»

[19:16] <yoleaux> 4 Jul 2019 22:13Z <patrickb> vrurg: No hurry, this is for post release anyways.

[19:35] *** patrickb joined
[19:37] *** vrurg left
[19:50] *** vrurg joined
[19:56] <vrurg> m: my $*AAA; { my $*BBB; for DYNAMIC::.keys { say $_, " is dynamic? ", try { DYNAMIC::{$_}.VAR.dynamic } || "No" } }

[19:56] <camelia> rakudo-moar cf6f6d926: OUTPUT: Â«$_ is dynamic? Noâ¤$*DISPATCHER is dynamic? Noâ¤$*BBB is dynamic? Trueâ¤Â»

[19:57] <vrurg> Isn't it supposed to have $*AAA in the output? 

[19:57] <vrurg> my $*AAA; { my $*BBB; my $bbb; for DYNAMIC::.keys { say $_, " is dynamic? ", try { DYNAMIC::{$_}.VAR.dynamic } || "No" } }

[19:57] <evalable6> vrurg, rakudo-moar cf6f6d926: OUTPUT: Â«$bbb is dynamic? Noâ¤$_ is dynamic? Noâ¤$*BBB is dynamic? Trueâ¤$*DISPATCHER is dynamic? Noâ¤Â»

[19:58] <vrurg> And I wouldn't expect $_ and $bbb in the list.

[20:22] *** brrt` is now known as brrt

[20:41] *** lizmat joined
[21:10] *** brrt left
[21:12] *** b2gills joined
[21:13] *** Kaiepi left
[21:24] *** Kaiepi joined
[21:28] <Kaiepi> i asked before, but what are storage specs used for with reprs? would it be a good idea to add a variable stating the type of what's being stored to it?

[21:29] <timotimo> storage spec is for a lower-level thing than types are

[21:29] <timotimo> a storage spec will, for example, allow P6opaque to inline a native int inside of its parent object

[21:30] <timotimo> so that a class with has int8 $.foo; int8 $.bar; int8 $.baz; int8 $.bloop; will actually only use 4 bytes for that piece of data

[21:30] <Kaiepi> ohh

[21:30] <Kaiepi> neat

[21:31] <timotimo> almost everything that "holds a type" will have a reference, though

[21:31] <Kaiepi> why do P6int and P6num copy members between their repr data and the storage spec though?

[21:32] <Kaiepi> on moar at least

[21:33] <timotimo> not sure what you are refering to; do you have a link?

[21:35] <Kaiepi> my dns is shitting itself, check mk_storage_spec and type_object_for in src/6model/reprs/P6int.c

[21:36] <Kaiepi> nvm http://fpaste.scsys.co.uk/585208

[21:37] <timotimo> i'm looking at it locally

[21:37] <timotimo> that's less "what does it store", that's more of "what am i"

[21:39] <Kaiepi> so it specifies what's getting inlined?

[21:41] <timotimo> every ST has a WHAT in it

[21:41] <timotimo> you can get from a type object to the STable and from the STable to its type object

[21:45] <Kaiepi> STABLE(typeobj), st->WHAT right?

[21:48] <Kaiepi> last question, does CStr need a storage spec in its REPR data when i'm storing a type, number of bits, and its sign in it?

[21:50] <timotimo> yep, though STABLE goes with every object

[21:51] <timotimo> storage spec is for the other types to use, whereas the repr data is for the type itself to use

[21:51] <timotimo> the storage spec is basically a unified API that is the same across all 6model objects

[21:51] <timotimo> whereas the REPR_data can be freely defined by the type using it

[21:57] <Kaiepi> so it sounds like no since afaik strings can't be inlined in REPRs like CStruct/CPPStruct/CUnion

[21:58] <timotimo> we do have support for CArray inlined in CStruct/CPPStruct at least

[21:58] <timotimo> but strings have even less theoretical support for a specified length

[22:03] <Kaiepi> making that possible sounds out of the scope of what i'm doing

[22:05] *** squashable6 left
[22:05] *** squashable6 joined
[22:07] <timotimo> aye

[22:07] <timotimo> i'm still not sure i understand how the inlining of arrays inside of structs actually worked

[22:10] *** lucasb left
[22:12] *** vrurg left
[22:12] *** epony left
[22:14] *** vrurg joined
[22:34] *** epony joined
[22:36] *** patrickb left
[22:50] <vrurg> Anyboudy with good understanding what is supposed to be visible in pseudo-packages?

