[01:12] <japhb> Is there a way from the Rakudo level to know when a GC pass happens, or to know how many nursery and full GCs have occured since the last check/program start?  It seems like the kind of thing Telemetry would support, but I don't see it.

[01:45] *** leont left
[02:06] <Geth> ¦ rakudo: 0ecd037b7d | (Nick Logan)++ (committed using GitHub Web editor) | src/core/Kernel.pm6

[02:06] <Geth> ¦ rakudo: [js] Use uname op for sysname and release

[02:06] <Geth> ¦ rakudo: 

[02:06] <Geth> ¦ rakudo: Uses the new uname op for sysname and release info. version and machine are not exposed in node, and thus still shell out to uname.

[02:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0ecd037b7d

[02:26] *** dalek left
[02:49] *** Geth left
[08:21] *** dalek joined
[08:21] *** ChanServ sets mode: +v dalek

[08:21] *** synopsebot left
[08:21] *** p6lert_ left
[08:21] *** p6lert joined
[08:21] *** synopsebot_ joined
[08:21] *** Geth joined
[08:21] *** ChanServ sets mode: +v synopsebot_

[08:21] *** ChanServ sets mode: +v Geth

[09:17] <lizmat> japhb: Telemetry could support it, if it was somehow available through nqp:: ops

[09:19] <timotimo> someone want to bikeshed an API for this? :)

[09:21] <lizmat> I would say, similar to nqp::getrusage, but with a type int as the first parameter

[09:21] <lizmat> nqp::stats(type,int @array)

[09:21] <lizmat> if the type is out of range, then simply don't touch the array

[09:22] <lizmat> this would allow "later" versions of Telemetry to run on earlier versions of the VM

[09:23] <lizmat> and also, it would allow other backends to gradually support it (in the beginning it could just be a stub)

[09:31] <lizmat> Files=1254, Tests=87994, 393 wallclock secs (21.13 usr  6.60 sys + 2819.55 cusr 234.68 csys = 3081.96 CPU)

[09:33] <timotimo> what would be passed as type for example?

[09:36] <lizmat> an int

[09:37] <lizmat> (constant)

[09:41] <timotimo> ah, so there would be nqp::const:: for, for example, STATS_GC?

[09:42] <timotimo> i can imagine stats with different "output" types, such as "how many of each type were deleted in the last gc run" (which incidentally i'm just now implementing for the profiler)

[09:43] <timotimo> though of course having "int @array" as the second parameter isn't a thing we enforce at the nqp compiler level

[09:44] <timotimo> and since we only need backward compat, we can just "know" which value needs what type to be passed

[09:47] <lizmat> there's something to be said for forward compat as well, especially wrt to different backends and dual-living Telemetry

[09:48] <timotimo> in that case, you can just pass an untyped array for whenever you don't know what type would be right, and you'd get the right data

[09:49] <lizmat> that'd work for me. but wouldn't that be rather more work on the VM side??  Plus add unnecessary overhead on something that you want to be as lean as possible

[09:49] <lizmat> to avoid affecting the measurements taken ?

[09:49] <timotimo> hmm

[09:49] * lizmat goes afk for a few hours

[09:49] <timotimo> mumble mumble fast path/slow path, mumble mumble branch predictor, mumble mumble

[09:49] <timotimo> not sure, actually

[09:50] <timotimo> but i'd hope the "put stuff into array to give to perl6 code" is either dwarfed by the work done to collect stats, or getting the stats out is so simple that it's at almost no cost in total

[10:04] <timotimo> i'm not sure how something like "how many of each type got deleted during the last collection" would be represented in a simple telemetry output log

[10:06] <timotimo> since it's not only one dimension more but the size in the "other" direction isn't known in advance

[11:43] *** llfourn left
[12:03] *** llfourn joined
[12:07] *** llfourn left
[12:26] *** llfourn joined
[12:31] *** llfourn left
[12:58] *** llfourn joined
[13:03] *** llfourn left
[13:14] <Geth> ¦ rakudo: 3e51bd4e17 | usev6++ | t/spectest.data

[13:14] <Geth> ¦ rakudo: [JVM] Don't run tests for utf16

[13:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3e51bd4e17

[13:15] <Geth> ¦ roast: 445062c150 | usev6++ | 9 files

[13:15] <Geth> ¦ roast: [JVM] Skip a couple of dying tests

[13:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/445062c150

[13:31] *** llfourn joined
[13:36] *** llfourn left
[13:38] *** llfourn joined
[13:45] *** llfourn left
[13:51] *** llfourn joined
[13:55] *** llfourn left
[14:10] *** leont joined
[14:19] <Geth> ¦ roast: f4f8290cec | usev6++ | 8 files

[14:19] <Geth> ¦ roast: [JVM] Fudge a couple of failing tests

[14:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f4f8290cec

[14:22] * bartolin hopes the next spectest run will be much cleaner

[14:22] *** llfourn joined
[14:23] <lizmat> bartolin++   # keeping the JVM backend alive

[14:27] *** llfourn left
[14:58] *** lucasb joined
[15:16] *** llfourn joined
[15:21] *** llfourn left
[15:31] *** llfourn joined
[15:32] *** TimToady left
[15:37] *** llfourn left
[15:40] *** llfourn joined
[15:45] *** llfourn left
[15:48] *** llfourn joined
[15:52] *** llfourn left
[16:46] *** llfourn joined
[16:51] *** llfourn left
[16:56] <[Tux]> Rakudo version 2019.03.1-140-g3e51bd4e1 - MoarVM version 2019.03-61-g645a70c0d

[16:56] <[Tux]> csv-test-xs-20      0.441 -  0.446

[16:56] <[Tux]> csv-ip5xs           0.749 -  0.757

[16:56] <[Tux]> test-t --race       0.937 -  1.016

[16:56] <[Tux]> test-t              1.818 -  1.838

[16:56] <[Tux]> csv-ip5xs-20        6.424 -  6.475

[16:56] <[Tux]> test                7.485 -  7.638

[16:56] <[Tux]> test-t-20 --race   10.278 - 11.392

[16:57] <[Tux]> csv-parser         22.532 - 22.801

[16:57] <[Tux]> test-t-20          29.812 - 29.851

[16:57] <timotimo> hey [Tux] 

[16:57] <[Tux]> o/

[16:57] <timotimo> is something wrong with the "[ast 10 days" graph? it seems to only show one day actually

[16:57] <timotimo> http://tux.nl/Talks/CSV6/speed4.html

[16:58] <[Tux]> I've been away - no internet connection whatsoever. Did not even *touch* a keyboard

[16:58] <timotimo> ah :)

[16:58] *** llfourn joined
[16:58] <[Tux]> https://tux.nl/Files/guirlande2.jpg

[17:00] <timotimo> cool helmet

[17:03] *** llfourn left
[17:37] <MasterDuke> [Tux]: nice

[18:28] <AlexDaniel> very nice pic :)

[18:30] <AlexDaniel> dang it someone please implement a deflap arg in bisectable :)

[18:32] <AlexDaniel> c: HEAD https://gist.github.com/AlexDaniel/861cce5b5085508cd427e55d3316474f

[18:32] <committable6> AlexDaniel, Using file “run.p6” as a main file, other files are placed in “sandbox/”

[18:32] <committable6> AlexDaniel, ¦HEAD(3e51bd4): « «exit code = 42»»

[18:32] <AlexDaniel> c: 6c https://gist.github.com/AlexDaniel/861cce5b5085508cd427e55d3316474f

[18:33] <committable6> AlexDaniel, Using file “run.p6” as a main file, other files are placed in “sandbox/”

[18:33] <committable6> AlexDaniel, ¦6c (37 commits): « «exit code = 42»»

[18:33] <AlexDaniel> of course…

[18:33] <AlexDaniel> c: HEAD https://gist.github.com/AlexDaniel/861cce5b5085508cd427e55d3316474f

[18:34] <committable6> AlexDaniel, Using file “run.p6” as a main file, other files are placed in “sandbox/”

[18:34] <committable6> AlexDaniel, ¦HEAD(3e51bd4): «RUN 1␤RUN 2␤RUN 1␤BUG␤  in block  at sandbox/r2805 line 12␤  in sub anastates at sandbox/r2805 line 7␤  in block <unit> at sandbox/r2805 line 3␤␤RUN 2␤ «exit code = 42»»

[18:34] <AlexDaniel> c: 6c https://gist.github.com/AlexDaniel/861cce5b5085508cd427e55d3316474f

[18:34] <committable6> AlexDaniel, Using file “run.p6” as a main file, other files are placed in “sandbox/”

[18:36] <committable6> AlexDaniel, https://gist.github.com/4e4c7bc46e1c37e0a826bf4a2b9a8837

[18:36] <AlexDaniel> yea that's clearly a new issue

[18:36] <AlexDaniel> bisect: old=2018.05 https://gist.github.com/AlexDaniel/861cce5b5085508cd427e55d3316474f

[18:37] <bisectable6> AlexDaniel, Using file “run.p6” as a main file, other files are placed in “sandbox/”

[18:37] <bisectable6> AlexDaniel, Bisecting by exit code (old=2018.05 new=3e51bd4). Old exit code: 0

[18:37] <AlexDaniel> or at least it can only be triggered now by this code…

[18:37] <AlexDaniel> whatever, let's see what we get

[18:37] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/4ecfc253cdf3753ca89305fc0f7e53cd

[18:37] <bisectable6> AlexDaniel, There are 3 candidates for the first “new” revision. See the log for more details

[18:40] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/7bd3b3a0a8a3c1faaef602d2d3fe1e619e4ef640

[18:40] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2019.03-7-g87771ea33...2019.03-19-gda96d39

[18:40] <AlexDaniel> Geth: ver https://github.com/perl6/nqp/commit/da96d399aa7d920af5dd0c7211ea4d4b5760f902

[18:40] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/MoarVM/MoarVM/compare/2019.03-2-gbb2dc6619...2019.03-31-g6c7810c

[18:43] *** llfourn joined
[18:48] *** llfourn left
[20:04] *** robertle left
[20:44] *** llfourn joined
[20:49] *** llfourn left
[20:56] *** entonian joined
[20:57] <Geth> ¦ rakudo/master: 6 commits pushed by (Paweł Murias)++

[20:57] <Geth> ¦ rakudo/master: 4f8a16e01e | [js] Update rakudo-library to source maps being on by default

[20:57] <Geth> ¦ rakudo/master: 6e650cd3a8 | [js] Implement parameterization of Blobs with 64 bit integers

[20:57] <Geth> ¦ rakudo/master: b0668b2636 | [js] Add a run(:fake-run, ...) multi candidate

[20:57] <Geth> ¦ rakudo/master: 75e2fb7017 | Serialize a Perl 6 level string instead of a raw NQP one

[20:57] <Geth> ¦ rakudo/master: 9d1872871c | [js] Add a bunch of ifdefs to work around problems with serializing

[20:57] <Geth> ¦ rakudo/master: 7aa72ce096 | [js] Temporary workaround for a bug breaking the js build

[20:57] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/3e51bd4e178b...7aa72ce0965b

[21:02] *** entonian left
[22:46] *** llfourn joined
[22:51] *** llfourn left
[22:56] *** llfourn joined
[23:28] *** lucasb left
