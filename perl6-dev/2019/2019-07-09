[00:02] <timotimo> of course those CArrays that were allocated were in the tens or hundreds of kilobytes i believe

[00:03] <timotimo> greppable6: CArray.*allocate

[00:03] <greppable6> timotimo, 33 lines, 8 modules: https://gist.github.com/c068c1d34dca677c276f85af8fb4ee76

[00:04] <timotimo> doesn't look like many modules obviously allocated huge CArrays, so might not have such a big effect on the ecosystem

[00:04] <timotimo> any modules that work with big chunks of data and don't have to go to C would use Buf.allocate instead

[00:05] <timotimo> which already uses setelemspos to create the right amount of slots

[00:20] <japhb> Still, 3 orders of magnitude improvement for that particular case is nothing to sneeze at!

[00:27] <timotimo> one day we'll emit memset, memcpy, and memmove when we detect equivalent loops

[00:52] <vrurg> m: class Foo { method foo is raw { nqp::list(1,2) } }; Foo.new.foo.^name.say

[00:52] <camelia> rakudo-moar 82fc4e570: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Could not find nqp::list, did you forget 'use nqp;' ?‚ê§at <tmp>:1‚ê§------> 3Foo { method foo is raw { nqp::list(1,2)7‚èè5 } }; Foo.new.foo.^name.say‚ê§¬ª

[00:52] <vrurg> m: use nqp; class Foo { method foo is raw { nqp::list(1,2) } }; Foo.new.foo.^name.say

[00:52] <camelia> rakudo-moar 82fc4e570: OUTPUT: ¬´List‚ê§¬ª

[00:52] <vrurg> So, `is raw` is ignored for methods?

[01:06] *** yoleaux left
[01:34] *** AlexDaniel left
[01:35] *** AlexDani` joined
[01:46] *** AlexDani` is now known as AlexDaniel

[01:46] *** AlexDaniel left
[01:46] *** AlexDaniel joined
[03:06] *** yoleaux joined
[05:35] *** nubie joined
[05:35] *** nubie left
[06:24] <bartolin> just a quick note: I've skimmed through the discussion about moving RT issues to github. I'll be afk until end of July, but I'd volunteer to help with the migration after that (I hope that's not too late)

[06:50] *** [TuxCM] joined
[07:16] *** patrickb joined
[07:53] *** [TuxCM] left
[08:06] *** tyil[m] left
[08:06] *** tyil[m] joined
[08:21] <lizmat> Files=1275, Tests=108165, 206 wallclock secs (27.05 usr  7.78 sys + 2851.82 cusr 279.11 csys = 3165.76 CPU)

[09:12] *** [TuxCM] joined
[10:03] *** MasterDuke left
[10:55] *** vrurg left
[11:46] <Geth> ¬¶ rakudo: tbrowder self-assigned Diagnostic or definition problem? https://github.com/rakudo/rakudo/issues/3036

[11:51] *** ugexex joined
[11:56] *** ugexe left
[12:01] *** a3f joined
[12:01] *** kawaii joined
[12:02] *** a3f left
[12:02] *** a3f joined
[12:18] *** go|dfish joined
[13:02] <AlexDaniel> bartolin: there's not much to do, actually

[13:02] *** pamplemousse joined
[13:02] <AlexDaniel> bartolin: they already have a script to do all the work, we just tell them where to put the issues and give permissions to open the tickets. That's about it

[13:25] *** vrurg joined
[13:46] *** ugexex is now known as ugexe

[14:01] *** vrurg left
[14:12] *** vrurg joined
[14:14] <nine> Regarding the CLA discussion: I think we've destroyed any benefit that a CLA might have brought long ago. Yes, if all contributions are made by people who have signed a CLA (which says TPF gets to own the code), then it'd be easy to relicense.

[14:15] <nine> But! Not all contributions were done this way. We've merged lots and lots and lots of pull requests of people without a signed CLA (at that time).

[14:15] <nine> Their code still belongs to them. I really don't see how the PR/merge process changes that in any way.

[14:20] <patrickb> I partly disagree. Doing a relicensing requires us to track down the contributors we don't have a CLA for. For those we can't, we have to throw the code out and rewrite. The more CLAs we already have, the fewer contributors we have to track down.

[14:21] <patrickb> Having 100% coverage would be ideal. But every CLA we have helps.

[14:23] <ugexe> node got rid of their CLA long ago fwiw

[14:26] <patrickb> Question is whether we want to keep the option to relicense open or not. Artistic 1.0 seems to be a solid license that has gotten quite some real world usage. Artistic 2.0 is younger, but only a fresh up of Artistic 1.0 so I would say we might just accept the risk of "Oh noes, we didn't see this change in laws/loophole coming, we need to do somethi

[14:26] <patrickb> ng about the license!"

[14:27] *** lucasb joined
[14:45] *** epony left
[15:02] *** patrickb left
[15:22] *** epony joined
[15:27] <AlexDaniel> but isn't Artistic 2.0 very permissive anyway? So what kind of potential relicensing do we have in mind?

[15:28] <kawaii> BSD-3 is also a viable candidate fwiw

[15:29] <AlexDaniel> like, if you want to go into the copyleft direction, then you can already do that regardless of CLAs (Artistic 2.0 ‚Üí GPLv3, easy)

[15:30] <AlexDaniel> in the opposite direction we have what, CC0 ?

[15:33] <AlexDaniel> it's also a bit weird that there's no ‚Äúor later‚Äù clause, like in GPL

[15:36] <japhb> m: sub postfix:<!>($n) { [*] 1..$n }; say 4!;

[15:36] <camelia> rakudo-moar 82fc4e570: OUTPUT: ¬´24‚ê§¬ª

[15:37] <nine> patrickb: you'd also need to hunt down contributors we have a CLA for if they made any contributions before signing. Which will probably be most of us, since there will usually be a couple of PRs until someone figures it's less tedious to give out the commit bit which is where we require the CLA

[15:37] <japhb> m: say $*PERL.compiler.version

[15:37] <camelia> rakudo-moar 82fc4e570: OUTPUT: ¬´v2019.03.1.680.g.82.fc.4.e.570‚ê§¬ª

[15:49] *** robertle joined
[16:01] *** Kaiepi left
[16:06] *** [TuxCM] left
[16:11] <pamplemousse> I was wondering if anyone knows why adding print statements for debugging purposes in NQP causes a rebuild of Rakudo to fail?

[16:11] <pamplemousse> For example, I added a print statement after the line here: https://github.com/perl6/nqp/blob/master/src/HLL/Compiler.nqp#L444

[16:12] <jnthn> Probbly because we use NQP scripts during the build, to generate code

[16:12] <jnthn> And so your debug output ends up being compiled

[16:12] <pamplemousse> And the rebuild of nqp goes just fine, but when I rebuild Rakudo, it prints out the text, then says it's confused near the print statement

[16:12] <jnthn> Use note instead of print, so it goes to stderr

[16:12] <pamplemousse> Oh that makes sense, thanks

[16:23] *** Kaiepi joined
[17:21] *** [TuxCM] joined
[18:08] *** AlexDaniel left
[18:19] <bartolin> jnthn++ mentioned the many roast tickets that have been created some years ago (in order to have an issue for every fudged test in roast). Here is a blog post about the process: https://www.perl.com/article/174/2015/5/12/Script-fu--how-to-raise-641-request-tracker-tickets/ . Some of those tickets have been triaged (rejected, resolved, enriched with information), but I agree that the rest isn't particular useful.

[18:19] <bartolin> Since I merged the PR to roast back in 2015, I could as well do some cleanup work. I plan to identify the placeholder tickets, create a PR for roast to remove the references to those tickets and after that close (reject) them in RT.

[18:20] <bartolin> Any thought?

[18:20] <bartolin> *RT tickets in the first sentence

[18:23] *** vrurg left
[18:32] *** AlexDaniel joined
[18:32] *** pamplemousse left
[18:37] *** AlexDaniel left
[18:40] *** pamplemousse joined
[18:44] *** pamplemousse left
[19:16] *** lucasb left
[19:32] *** MasterDuke joined
[21:00] *** Kaiepi left
[21:10] *** Kaiepi joined
[21:47] *** nebuchadnezzar left
[21:59] *** AlexDaniel joined
[22:11] <Geth> ¬¶ roast: usev6++ created pull request #556: Remove reference to placeholder tickets from RT

[22:11] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/pull/556

[22:40] <AlexDaniel> please comment: https://github.com/perl6/roast/pull/556#issuecomment-509835289

[23:13] *** Kaiepi left
[23:13] *** Kaypie joined
[23:40] *** vrurg joined
