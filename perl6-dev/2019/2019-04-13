[00:17] *** tbrowder left
[00:49] *** tbrowder joined
[03:00] *** vrurg left
[03:01] *** vrurg joined
[07:11] *** sivoais_ joined
[07:11] *** sivoais left
[08:10] <bartolin> haha, it looks like the implementation of bindlexdyn on the JVM backend expects its arguments in the wrong order: https://github.com/perl6/nqp/blob/7a28dfc651/src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java#L1581 vs. https://github.com/perl6/nqp/blob/7a28dfc651/src/vm/jvm/QAST/Compiler.nqp#L2719

[08:11] <bartolin> since bindlexdyn is used that way in https://github.com/perl6/nqp/blob/7a28dfc651/src/vm/jvm/QAST/Compiler.nqp#L4543 changing this requires a rebootstrap. I'm struggling to get instruction list right, so I'll commit a workaround first.

[08:12] <Geth> ¦ nqp: db3e4a043f | usev6++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java

[08:12] <Geth> ¦ nqp: [JVM] Add second version of bindlexdyn as bandaid

[08:12] <Geth> ¦ nqp: 

[08:12] <Geth> ¦ nqp: nqp::bindlexdyn expects the name as the first and the value as the

[08:12] <Geth> ¦ nqp: second argument (on MoarVM, too). It looks like that op wasn't used

[08:12] <Geth> ¦ nqp: in rakudo-j -- until https://github.com/rakudo/rakudo/commit/69c535ecfb

[08:12] <Geth> ¦ nqp: 

[08:12] <Geth> ¦ nqp: Since bindlexdyn is currently used in NQP's src/vm/jvm/QAST/Compiler.nqp

[08:12] <Geth> ¦ nqp: we need a change there and a rebootstrap in order to remove the old

[08:12] <Geth> ¦ nqp: version of bindlexdyn. For now, this should fix the Rakudo build.

[08:12] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/db3e4a043f

[08:43] *** sivoais_ left
[08:43] *** sivoais joined
[11:43] *** MasterDuke left
[11:57] <jnthn> bartolin++ # taking care of JVM

[12:03] *** MasterDuke joined
[12:03] *** MasterDuke left
[12:03] *** MasterDuke joined
[13:02] <Geth> ¦ rakudo: 056e45527c | usev6++ | src/vm/jvm/runtime/org/perl6/rakudo/Binder.java

[13:02] <Geth> ¦ rakudo: [JVM] Fix small-ish typos

[13:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/056e45527c

[14:29] <Geth> ¦ rakudo: 0990ecc4b7 | (Elizabeth Mattijsen)++ | src/core/CompUnit/Repository/Installation.pm6

[14:29] <Geth> ¦ rakudo: Don't copy the ENV hash into precomp files

[14:29] <Geth> ¦ rakudo: 

[14:29] <Geth> ¦ rakudo: By assigning, rather than binding, we appear not to keep the environment

[14:29] <Geth> ¦ rakudo: hash alive.  Fixes #2838

[14:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0990ecc4b7

[14:29] <synopsebot> RAKUDO#2838 [open]: https://github.com/rakudo/rakudo/issues/2838 [BLOCKER][regression] Precomp files contain ENV variables breaking packaging and reproducible builds

[14:48] <Geth> ¦ rakudo: e84845ad05 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/Sprintf.pm6

[14:48] <Geth> ¦ rakudo: First attempt at %e support

[14:48] <Geth> ¦ rakudo: 

[14:48] <Geth> ¦ rakudo: WIP: Seems to die for very small values still...

[14:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e84845ad05

[16:48] *** titsuki_ left
[16:48] *** tailgate left
[16:48] *** masak left
[17:05] *** titsuki joined
[17:06] *** masak joined
[17:06] *** tailgate joined
[17:06] <Geth> ¦ rakudo: ad8b5a6497 | (Elizabeth Mattijsen)++ | src/core/Main.pm6

[17:06] <Geth> ¦ rakudo: Warn when reading from keyboard in a MAIN-powered script

[17:06] <Geth> ¦ rakudo: 

[17:06] <Geth> ¦ rakudo: Inspired by https://www.reddit.com/r/perl6/comments/bc0efq/sql2png_turn_create_table_statements_into_a_graph/ekq6khy/ .

[17:06] <Geth> ¦ rakudo: 

[17:06] <Geth> ¦ rakudo: It basically mixes in specific versions of the slurp/lines/words methods that

[17:06] <Geth> ¦ rakudo: put a hopefully understandable message on STDERR.

[17:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ad8b5a6497

[17:06] *** masak is now known as Guest47580

[17:08] <lizmat> afk&

[17:19] <nine> lizmat: "which is usually only done when debugging" is just not true. It's also done, when I'm pasting stuff into the terminal or even when I type it in manually.

[17:20] <nine> That's just how UNIX tools have worked for many decades

[17:29] *** Kaiepi left
[17:40] *** lucasb joined
[18:34] <nine> .tell jnthn I fear identify-mixin-types broke Inline::Perl5: New type P6Bar for Foo is not a mixin type in method new at /home/nine/Inline-Perl5/lib/Inline/Perl5/ClassHOW.pm6 (Inline::Perl5::ClassHOW) line 48

[18:34] <yoleaux> nine: I'll pass your message to jnthn.

[18:41] <nine> .tell jnthn And 45e2902d0210cc24376229800569e1dbb7856093 (Generate an empty BUILDALL for class with no attrs) may have broken it some more: This representation (VMArray) does not support attribute storage (for type IterationBuffer) at src/Perl6/World.nqp:3374  (/home/nine/rakudo/install/bin/../share/nqp/lib/Perl6/World.moarvm:generate_buildplan_executor)

[18:41] <yoleaux> nine: I'll pass your message to jnthn.

[18:48] <MasterDuke> m: $_ = "foo"; s/(o)/$999999999999999999999999999999999999999999999999999999999999999/; .say

[18:48] <evalable6> MasterDuke, rakudo-moar ad8b5a649: OUTPUT: «(exit code 1) Index out of range. Is: -9223372036854775808, should be in 0..^Inf␤  in block <unit> at /tmp/lQDdoiH97f line 1␤␤»

[18:49] <MasterDuke> AlexDaniel++ an example that's fixed in my default-int branch (it gives `Use of Nil in string context   in code  at -e line 1 fo`)

[18:50] <AlexDaniel> and that's it? Just one example?

[18:54] <AlexDaniel> MasterDuke: also, are you sure it is not broken for other huge numbers?

[18:56] <MasterDuke> just the first one i've looked at

[18:56] <MasterDuke> it still is for another example

[18:56] <MasterDuke> m: $_ = "foo"; s/(o)/$9999999999999999999999999999999999999999999999999999999999999/; .say

[18:57] <evalable6> MasterDuke, rakudo-moar ad8b5a649: OUTPUT: «(exit code 1) Index out of range. Is: -6917529027641081856, should be in 0..^Inf␤  in block <unit> at /tmp/lu05zpREnn line 1␤␤»

[18:57] <MasterDuke> my branch gives `Index out of range. Is: -6917529027641081857, should be in 0..^Inf`

[18:58] <AlexDaniel> soo… maybe not really fixed

[19:12] <[Tux]> Rakudo version 2019.03.1-202-gad8b5a649 - MoarVM version 2019.03-76-gc10fee65c

[19:12] <[Tux]> csv-test-xs-20      0.440 -  0.455

[19:12] <[Tux]> csv-ip5xs           0.733 -  0.808

[19:12] <[Tux]> test-t --race       0.849 -  0.962

[19:12] <[Tux]> test-t              1.709 -  1.852

[19:12] <[Tux]> csv-ip5xs-20        5.955 -  6.007

[19:12] <[Tux]> test                7.248 -  7.904

[19:12] <[Tux]> test-t-20 --race    9.961 - 11.921

[19:12] <[Tux]> csv-parser         23.291 - 23.791

[19:12] <[Tux]> test-t-20          28.693 - 29.278

[19:46] *** vrurg left
[19:50] <MasterDuke> AlexDaniel: i think there's something unrelated to my branch. https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.nqp#L1769 might be it, using nqp::radix instead of nqp::radix_I

[20:11] <AlexDaniel> yeah

[20:28] <Geth> ¦ nqp: 0610e04ed2 | usev6++ | 10 files

[20:28] <Geth> ¦ nqp: [JVM] Rebootstrap for new version of bindlexdyn

[20:28] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/0610e04ed2

[20:28] <Geth> ¦ nqp: 56efbb0700 | usev6++ | 2 files

[20:28] <Geth> ¦ nqp: [JVM] Switch to new version of bindlexdyn

[20:28] <Geth> ¦ nqp: 

[20:28] <Geth> ¦ nqp: There should be a cleaner way to achieve this than swapping the

[20:28] <Geth> ¦ nqp: two values on top of the stack, but I was unable to come up

[20:28] <Geth> ¦ nqp: with a better solution.

[20:28] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/56efbb0700

[21:13] <lizmat> .ask nine would you rather see a rephrasing of the message, or a revert of the commit ?

[21:13] <yoleaux> lizmat: I'll pass your message to nine.

[21:24] <MasterDuke> can a QAST::IVal have something bigger than a native int in it?

[21:24] <timotimo> it can not

[21:25] <timotimo> must be a WVal with an Int object for that

[21:25] <MasterDuke> thanks

[21:30] <MasterDuke> timotimo: btw, did you find anything useful in rr?

[21:31] *** Guest47580 is now known as masak

[21:31] <timotimo> i didn't actually run it yet, but i definitely should

[21:31] <timotimo> i'm worried the recording could explode my hard drive :D

[21:31] <timotimo> but i bet it'll let me put the recording on my other hard drive

[21:33] <MasterDuke> ha

[21:33] <MasterDuke> btw, `Object of type Int in QAST::WVal, but not in SC` ?

[21:33] <jnthn> .tell nine If you're going to use a type as the target type in an nqp::rebless, then :is_mixin now needs to be passed to ClassHOW.new_type.

[21:33] <yoleaux> jnthn: I'll pass your message to nine.

[21:33] <yoleaux> 18:34Z <nine> jnthn: I fear identify-mixin-types broke Inline::Perl5: New type P6Bar for Foo is not a mixin type in method new at /home/nine/Inline-Perl5/lib/Inline/Perl5/ClassHOW.pm6 (Inline::Perl5::ClassHOW) line 48

[21:33] <yoleaux> 18:41Z <nine> jnthn: And 45e2902d0210cc24376229800569e1dbb7856093 (Generate an empty BUILDALL for class with no attrs) may have broken it some more: This representation (VMArray) does not support attribute storage (for type IterationBuffer) at src/Perl6/World.nqp:3374  (/home/nine/rakudo/install/bin/../share/nqp/lib/Perl6/World.moarvm:generate_buildplan_executor)

[21:36] <timotimo> MasterDuke: at some point it was necessary to $*W.add_object before putting it into a WVal's value

[21:36] <timotimo> i thought that'd mostly be done implicitly by now

[21:37] <jnthn> .tell nine No guesses on the second; unfortunately the line number just points at the generate_buildplan_executor method. Don't suppose --ll-exception gives a better trace? Or I can try it out when I get some time to do that :)

[21:37] <yoleaux> jnthn: I'll pass your message to nine.

[21:41] <MasterDuke> m: $_ = "foo"; s/(o)/$9999999999999999999999999999999999999999999999999999999999999/; .say

[21:41] <evalable6> MasterDuke, rakudo-moar ad8b5a649: OUTPUT: «(exit code 1) Index out of range. Is: -6917529027641081856, should be in 0..^Inf␤  in block <unit> at /tmp/G5GeYFU3OU line 1␤␤»

[21:42] <MasterDuke> is `Cannot unbox 203 bit wide bigint into native integer at SETTING::src/core/Capture.pm6:58  (/home/dan/Source/perl6/install/bin/../share/perl6/runtime/CORE.setting.moarvm:AT-POS)` better?

[21:45] <jnthn> Can we make it "What on earth are you doing????!!!1" :)

[21:46] <jnthn> But yeah, the second is probably better

[21:46] <MasterDuke> heh

[21:47] <MasterDuke> this is the patch https://gist.github.com/MasterDuke17/60a7a8b9f3ee1a5d2ebacaed361de85f

[21:51] <lizmat> m: dd sprintf("%#b",0)   # unexpected, is there a reasoning behind this?  Perl 5 does the same

[21:51] <evalable6> lizmat, rakudo-moar ad8b5a649: OUTPUT: «"0"␤»

[21:53] <MasterDuke> jnthn: should i have it throw if nqp::isbig($val)? 

[21:57] <timotimo> the explosion in the rr run i've got right now happens when it's trying to free a callsite object that looks pretty bogus

[21:57] <lizmat> m: dd sprintf("%+b",0)   # Perl 5 says "0"

[21:57] <timotimo> it has a few thousand flags and about 800 arguments

[21:57] <evalable6> lizmat, rakudo-moar ad8b5a649: OUTPUT: «"+0"␤»

[21:57] <MasterDuke> timotimo: ha!

[21:57] <timotimo> so i've now got a watchpoint on one of those values to see when it was last written

[21:58] <timotimo> uv_signal_init (loop=0x3400e00, handle=handle@entry=0x34af368) at 3rdparty/libuv/src/unix/signal.c:324

[21:58] <timotimo> 324   uv__handle_init(loop, (uv_handle_t*) handle, UV_SIGNAL);

[21:59] <timotimo> um, yes, that is absolutely not a place where a callsite's values should be updated

[21:59] <MasterDuke> does seem suspect

[21:59] <timotimo> it's quite possibly a use-after-free thing

[22:01] <timotimo> unfortunately there's not really a good way to break when a specific address is freed, apart from putting a conditional breakpoint in MVM_free, which is slow :(

[22:03] <timotimo> ok, that's weird, the time before that that memory location was part of a VMArray that got resized while evaluating an argument guard

[22:04] <MasterDuke> timotimo: have you every used https://github.com/gperftools/gperftools ? if so, any good?

[22:04] <MasterDuke> *ever

[22:05] *** squashable6 left
[22:05] <timotimo> i don't think i have

[22:05] <MasterDuke> timotimo: i think some of the valgrind output i posted the other day had VMArray stuff in them

[22:09] <timotimo> MasterDuke: looks like if you want to move an rr trace across machines you can use "rr pack" to make it system-independent (by making it a lot larger)

[22:09] <MasterDuke> cool

[22:10] *** squashable6 joined
[22:10] *** ChanServ sets mode: +v squashable6

[22:10] <timotimo> _RR_TRACE_DIR is also a thing

[22:10] <MasterDuke> how about `===SORRY!=== Error while compiling -e Cannot declare a match variable at -e:1 ------> 9999999999999999999999999999999999999999⏏/; .say`

[22:35] *** MasterDuke left
[22:40] <AlexDaniel> .tell MasterDuke “Cannot declare a match variable” why not?

[22:40] <yoleaux> AlexDaniel: I'll pass your message to MasterDuke.

[22:41] <AlexDaniel> .tell MasterDuke I mean why should it behave differently than say $99999

[22:41] <yoleaux> AlexDaniel: I'll pass your message to MasterDuke.

[22:49] <AlexDaniel> a pessimistic one https://github.com/perl6/problem-solving/issues/9

[23:12] *** MasterDuke joined
[23:12] *** MasterDuke left
[23:12] *** MasterDuke joined
[23:12] <MasterDuke> .

[23:12] <yoleaux> 22:40Z <AlexDaniel> MasterDuke: “Cannot declare a match variable” why not?

[23:12] <yoleaux> 22:41Z <AlexDaniel> MasterDuke: I mean why should it behave differently than say $99999

[23:13] <MasterDuke> AlexDaniel: because that's really shorthand for $/[99999] and arrays can only be so long

[23:14] <MasterDuke> i'm open to suggestions for other exceptions, that just seemed the closes at first glance

[23:14] <AlexDaniel> m: say $/[9999999999999999999999999999999999999999999999]

[23:14] <evalable6> AlexDaniel, rakudo-moar ad8b5a649: OUTPUT: «Nil␤»

[23:14] <AlexDaniel> a shorthand that's not really a shorthand?

[23:14] <AlexDaniel> just make it work, maybe?

[23:17] <MasterDuke> m: my @a = 1,2; say @a[9999999999999999999999999999999999999999999999]

[23:17] <evalable6> MasterDuke, rakudo-moar ad8b5a649: OUTPUT: «(exit code 1) Cannot unbox 153 bit wide bigint into native integer␤  in block <unit> at /tmp/ldjuzMCrIl line 1␤␤»

[23:17] <MasterDuke> what do you mean just make it work? don't throw and just give the unbox error i showed earlier?

[23:19] <AlexDaniel> hm, why $/ behaves a bit differently…

[23:19] <AlexDaniel> MasterDuke: yeah, I guess that qualifies as “work”, yes…

[23:19] <MasterDuke> down the rabbit hole...

[23:20] <AlexDaniel> MasterDuke: wait but, does that happen at run time or compile time?

[23:20] <MasterDuke> AlexDaniel: which? the "cannot declare" or the "cannot unbox"?

[23:20] <AlexDaniel> cannot unbox

[23:20] <MasterDuke> compile time

[23:23] <AlexDaniel> MasterDuke: oh well… then I don't know

[23:24] <AlexDaniel> in my mind it shouldn't behave differently than this:

[23:24] <AlexDaniel> m: $_ = "foo"; s/(o)/$99999/; .say

[23:24] <evalable6> AlexDaniel, rakudo-moar ad8b5a649: OUTPUT: «Use of Nil in string context␤fo␤  in code  at /tmp/j2bGYSkLGI line 1␤»

[23:24] <AlexDaniel> I'd also accept the unbox error at run time, I guess…

[23:24] <AlexDaniel> but compile time is better?… I don't know, actually. I'm very confused now :)

[23:25] <MasterDuke> problem-solving repo?

[23:25] <AlexDaniel> yeah, you can try that

[23:34] <MasterDuke> AlexDaniel: https://github.com/perl6/problem-solving/issues/10

[23:39] *** lucasb left
[23:45] *** llfourn left
[23:47] <dogbert17> lizmat: wrt your sprintf examples, perhaps it has something to do with how P5 handles True/False

[23:57] *** llfourn joined
[23:57] *** Kaiepi joined
[23:59] *** Kaiepi left
[23:59] *** Kaiepi joined
