[02:09] <AlexDaniel> interesting

[02:09] <AlexDaniel> https://github.com/rakudo/rakudo/commit/e943f3eb

[02:09] <AlexDaniel> GH-2916 is linked properly

[02:10] <AlexDaniel> https://help.github.com/en/articles/autolinked-references-and-urls

[02:10] <AlexDaniel> lizmat: that's the format that should be used then

[02:10] <AlexDaniel> or we can ask them to add GH#123 too

[02:10] <synopsebot> GH#123 [closed]: https://github.com/rakudo/rakudo/pull/123 For infix:<ne>, use nqp::isne_s instead of !eq

[02:17] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/3b4a4719

[02:17] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2019.03-212-gfa9039dce...2019.03-218-g8c8d0a820

[02:21] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/80a5a41a

[02:21] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2019.03-218-g8c8d0a820...2019.03-222-g23d91629d

[02:21] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/b8669fe6

[02:21] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2019.03-222-g23d91629d...2019.03-223-gf2b319db9

[02:22] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/cbb9034a

[02:22] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2019.03-223-gf2b319db9...2019.03-229-g9d14819

[02:25] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/8a37b931

[02:25] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2019.03-229-g9d14819...2019.03-240-g8c90f6266

[03:15] <Geth> ¬¶ rakudo: vrurg++ created pull request #3040: Implement support for defining new symbols in CORE.e.setting

[03:15] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3040

[03:16] <Geth> ¬¶ roast: vrurg++ created pull request #557: Support for fixed pseudo-packages

[03:16] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/pull/557

[04:53] *** nebuchadnezzar joined
[05:31] *** robertle left
[06:40] *** [TuxCM] left
[07:06] *** patrickb joined
[08:05] *** [TuxCM] joined
[09:51] *** MasterDuke left
[14:43] <vrurg> jnthn: would you review R#3040, please? It would allow me to move on with https://github.com/perl6/problem-solving/issues/47 :)

[14:43] <synopsebot> R#3040 [open]: https://github.com/rakudo/rakudo/pull/3040 Implement support for defining new symbols in CORE.e.setting

[14:43] *** lucasb joined
[14:44] *** pamplemousse joined
[14:45] <jdv79> is any of the pea stuff merged yet?

[14:49] <jnthn> jdv79: Yes, the initial basic round of it was merged a while ago. The next round of it give some nice wins, but is still a bit explosive. :)

[14:50] <jnthn> vrurg: OK, will try and do that later today

[14:50] <vrurg> jnthn: Thanks! 

[14:51] <jnthn> (The next round does: transitive analysis, partial escapes, and can avoid the GC-based allocations associated with Int)

[14:52] *** TimToady joined
[14:52] <jnthn> The big known problem is that the partial escape materializations break the SSA form. After that, it's just all of the other problems. :)

[14:54] <jdv79> nice.  was just wondering cause i thought something from that was merged but tux's numbers and my personal stuff didn't seem to change much yet.

[15:01] *** dogbert11 left
[15:06] <vrurg> jnthn++ 

[15:23] *** patrickb left
[15:24] *** MasterDuke joined
[15:41] *** Kaypie left
[15:42] *** Kaypie joined
[15:52] <jdv79> anything on the radar for perf after pea?

[15:52] *** epony left
[15:53] <jnthn> Well, various things in parallel with it too. Currently some invocation speedups.

[15:53] <jnthn> (pea is *really* tricky, so I'm doing a few relatively easier things alongside it)

[15:57] <jdv79> neat.  iirc invocation is one of the perf issue with p5.

[15:57] <jdv79> *issues

[15:57] <jnthn> For Perl 6 it's not that great at present either, the big difference being that we have multi-level inlining

[15:58] <jnthn> So in a lot of cases you invocations disappear

[15:58] <jnthn> Inlining rates in micro-benchmarks tend to be around 99%; for a more realistic situation, they can still exceed 80%.

[15:59] <jnthn> (Depends on the micro-benchmark, but I mean the "tight loop doing primitive thing" ones.)

[16:01] *** epony joined
[16:11] *** [TuxCM] left
[16:20] <|Tux|> Rakudo version 2019.03.1-680-g82fc4e570 - MoarVM version 2019.05-99-g729303de7

[16:20] <|Tux|> csv-test-xs-20      0.439 -  0.441

[16:20] <|Tux|> csv-ip5xs           0.685 -  0.701

[16:20] <|Tux|> test-t --race       0.778 -  0.809

[16:20] <|Tux|> test-t              1.684 -  1.787

[16:20] <|Tux|> csv-ip5xs-20        5.284 -  5.313

[16:20] <|Tux|> test                7.358 -  7.980

[16:20] <|Tux|> test-t-20 --race    8.975 -  9.322

[16:20] <|Tux|> test-t-20          28.148 - 28.586

[16:20] <|Tux|> csv-parser         33.085 - 33.843

[16:38] *** Kaypie is now known as Kaiepi

[16:55] <jnthn> vrurg: I took a look and let some comments; seems good overall

[17:04] <vrurg> jnthn: thank you! 

[17:22] <vrurg> jnthn: I would make SETTING a precise scope. See no point of having SETTINS because it would be an alias to CORE.

[17:23] <vrurg> As to MY: making it precise invalidates a test in S02-names/pseudo.t where an outer dynamic symbol is visible inside a sub.

[17:25] <lizmat> fwiw, I think MY: should be precise, and maybe add a LEXICAL:: pseudo for the current meaning

[17:26] *** klapperl joined
[17:26] <vrurg> I like LEXICAL.

[17:26] <vrurg> what about: sub foo { my $foo; { say MY::<$foo> } }?

[17:27] <vrurg> If MY is precise this must fail.

[17:28] <lizmat> it would be Any or Nil, I guess

[17:28] <lizmat> or a Failure...

[17:28] <vrurg> lizmat: Failure is what I chose ‚Äì following ::() semantics. Seems very reasonable to me.

[17:29] <lizmat> yup, works for me  :-)

[17:29] <vrurg> I would even change module Foo { }; Foo::<DoesntExists> to return Failure too (it currently returns Any)

[17:29] <lizmat> for 6.e semantics, yeah  :-)

[17:30] <vrurg> Aha. Oki, have some work for today then. 

[17:30] * vrurg hopes to have this merged by tonight.

[17:31] <lizmat> vrurg++

[17:33] <Geth> ¬¶ rakudo: af10886354 | (Elizabeth Mattijsen)++ | src/core/Match.pm6

[17:33] <Geth> ¬¶ rakudo: Don't use HLL ! for negation

[17:33] <Geth> ¬¶ rakudo: 

[17:33] <Geth> ¬¶ rakudo: since the rest is already in nqp:: ops.  Shaves off just a little

[17:33] <Geth> ¬¶ rakudo: bit on !MATCH-PASS in a tight loop.

[17:33] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/af10886354

[17:47] <vrurg> m: use nqp; class Foo { method foo is raw { nqp::list(1,2) } }; say Foo.new.foo.^name;

[17:47] <camelia> rakudo-moar 82fc4e570: OUTPUT: ¬´List‚ê§¬ª

[17:47] <vrurg> ^ I wonder if this is intended behaviour?

[17:48] <vrurg> m: use nqp; sub foo is raw { nqp::list(1,2) }; say foo.^name

[17:48] <camelia> rakudo-moar 82fc4e570: OUTPUT: ¬´BOOTArray‚ê§¬ª

[17:49] <lizmat> vrurg: nqp::list and nqp::hash auto-HLLize

[17:50] <lizmat> that's why we have IterationBuffer for nqp::list, and IterationSet for nqp::hash

[17:50] <vrurg> Even with `is raw`?

[17:50] <lizmat> with methods, I think yes

[17:51] <lizmat> but jnthn would know for sure

[17:51] <vrurg> But not with subs. Obscure, but accepted.

[17:51] <vrurg> I hoped to have a little bit of speed up in my code by avoiding Array in a return and using nqp::list

[17:54] <lizmat> well, it should be a List, now?  immutable and all ?

[17:54] <lizmat> not an Array ?

[17:58] <vrurg> lizmat: it should be BOOTArray, like with sub foo.

[17:58] *** MasterDuke left
[17:59] <lizmat> ok, so no HLL Array  :-)  that's ok

[17:59] <vrurg> My point is that when nqp::list is returned from a raw routine it gets HLLized for methods but not for subs.

[18:00] <vrurg> m: use nqp; sub foo is raw { nqp::list(1,2) }; say foo.^name

[18:00] <camelia> rakudo-moar af1088635: OUTPUT: ¬´BOOTArray‚ê§¬ª

[18:00] <vrurg> ^

[18:00] <vrurg> m: use nqp; class Foo { method foo is raw { nqp::list(1,2) } }; say Foo.new.foo.^name;

[18:00] <camelia> rakudo-moar af1088635: OUTPUT: ¬´List‚ê§¬ª

[18:00] <vrurg> I was pretty confused when got an error from nqp::atpos... ;)

[18:00] <lizmat> yeah, I see it...  I'm surprised the "is raw" actually works on the sub

[18:01] <lizmat> I wonder what jnthn has to say about the "is raw" not working on methods

[18:01] <vrurg> I like the way it is now. Handy way if avoiding extra cost when already dealing with low-level types.

[18:02] <vrurg> s/if//

[18:10] <vrurg> lizmat: BTW, do you use macOS?

[18:10] <lizmat> yes

[18:10] <vrurg> does utf8 test in roast fail for you too?

[18:10] <lizmat> yes

[18:10] <lizmat> has been doing that for months

[18:11] <lizmat> looked at it once for a few hours... but could not make heads or tails of that

[18:11] <vrurg> Considering I'm in rakudo for 1yr it fails for me like forever. ;)

[18:11] <lizmat> yeah, could well be a year

[18:11] <lizmat> time flies when you're having -Ofun

[18:11] <vrurg> :D 

[18:12] <vrurg> ok, I'm off for installing SSD into an old mac mini... 

[18:26] *** pamplemousse left
[18:34] *** MasterDuke joined
[18:43] *** lucasb left
[19:34] *** MasterDuke left
[19:35] *** MasterDuke joined
[19:54] *** pamplemousse2 joined
[20:04] *** pamplemousse2 left
[21:00] <samcv> AlexDaniel, release has been done

[21:37] *** squashable6 left
[21:38] *** squashable6 joined
[21:56] <AlexDaniel> oh wow rly

[21:57] <AlexDaniel> nice!

[21:59] <japhb> AlexDaniel: Are you doing the nqp and rakudo releases, or will it be kawaii?

[22:00] <AlexDaniel> japhb: mostly me, I think, as kawaii is currently figuring out some real life stuff

[22:00] <AlexDaniel> unless there are any objections :)

[22:00] <japhb> Of course not!

[22:01] <japhb> Just wondering who to ++  :-)

[22:01] <japhb> samcv++; ++AlexDaniel;

[22:03] <AlexDaniel> both then, kawaii also did some work for this release

[22:04] <japhb> kawaii++ then for work already done.  :-)

[22:18] <vrurg> Does anybody knows why EVAL adds two extra contexts on top of its unit? Is it avoidable?

[22:56] <jnthn> vrurg: I'd guess one of them - though maybe only needed during compile - is to make all the symbols visible in the context of the EVAL visible

[22:57] <vrurg> Ok, then from SETTING:: with PRECISE_SCOPE point of view EVAL is different from normal code.

[22:58] <jnthn> That said, I'm not sure if that needs to be the case by runtime

[22:59] <vrurg> Actually, PseudoStash can take care of it if knows it's been currently under EVAL. 

[23:00] <vrurg> Another thing: MY with PRECISE_SCOPE breaks require in EVAL too. That's currently a mystery to me.

[23:00] <jnthn> Eww

[23:02] <vrurg> Could be a combination of MY and SETTING changed together. I stumbled upon this just a few mintes ago and still trying to work out what's going on.

[23:05] <vrurg> SETTING with PRECISE_SCOPE breaks some other cases of require. Phew...

[23:06] <jnthn> Yeah, I suspect SETTING is going to have to at least flatten the various CORE versions

[23:07] <vrurg> I this is what STATIC_CHAIN was doing.

[23:07] <vrurg> But then SETTING is almost no different from CORE. If differrent at all.

[23:09] <jnthn> CORE is always the CORE.setting. SETTING would factor in any custom ones the language user might write

[23:11] <vrurg> So, CORE is 6.c CORE only? No CORE.d, CORE.e included?

[23:12] <Kaiepi> just need to update CStr, P6int, P6num, and P6str's REPRs on the JVM and JS backend and nativecall wide string support is ready to pullreq!

[23:14] <jnthn> No, I think CORE should include your 6.d/6.e

[23:15] <jnthn> But if you do perl6 --setting=RESTRICTED, for example, then SETTING would point to that, while CORE would always point to the CORE.setting

[23:16] <jnthn> Of course, such a RESTRICTED would have to chose a version of CORE to use as its setting.

[23:16] <jnthn> (Always point to the CORE.*.setting, I should say)

[23:17] <jnthn> If you don't pass a --setting= argument, then SETTING and CORE would be identical.

[23:17] <vrurg> Ok, this is what I was missing.

[23:17] <vrurg> Then SETTING:: is a STATIC_CHAIN thing. 

[23:17] <jnthn> Yes, settings are effectively the outer lexical environment of a program

[23:18] <jnthn> Rather than having a default set of imports, Perl 6 does this as having a default lexical environment

[23:18] <vrurg> m: use nqp; sub foo is raw { nqp::list(1,2) }; say foo.^name

[23:18] <camelia> rakudo-moar af1088635: OUTPUT: ¬´BOOTArray‚ê§¬ª

[23:18] <vrurg> m: use nqp; class Foo { method foo is raw { nqp::list(1,2) } }; say Foo.new.foo.^name;

[23:18] <camelia> rakudo-moar af1088635: OUTPUT: ¬´List‚ê§¬ª

[23:19] <vrurg> jnthn: That's ^ another question I had. Why method HLLise with is raw? 

[23:20] <jnthn> Because we assume that anything that's a sub is part of our language, so needn't be hllized, while methods could be from some other language, so we hllize them

[23:20] <vrurg> I though I could spare a couple of CPU cycles on using nqp::list instead of an Array in PseudoStash, but ...

[23:20] <jnthn> The hllize happens on the *caller* side, so the `is raw` isn't relevant

[23:20] <jnthn> You can save them; use a Perl 6 type with the VMArray REPR. IterationBuffer is convenient for that.

[23:21] <jnthn> m: say IterationBuffer.REPR

[23:21] <camelia> rakudo-moar af1088635: OUTPUT: ¬´VMArray‚ê§¬ª

[23:21] <vrurg> Ok, will try that. Thanks!

[23:22] <jnthn> nqp::list compiles into an nqp::create and then a sequence of nqp::push, iirc

[23:22] <jnthn> (I think it's push rather than indexes)

[23:23] <vrurg> I gues it would still be faster than [1,2] -> return -> @a[0]? 

[23:25] <jnthn> Yes

[23:25] <jnthn> For now ;)

[23:27] * vrurg is looking for üëçüèª button :)

[23:29] *** vrurg left
[23:29] *** vrurg joined
[23:30] <vrurg> Heh, my IRC client died from a uncode char...

[23:34] <jnthn> hah, mine rendered it wrong too...I wondered why, then realized that my linode got rebooted, and it seems I'm using irssi instead of weechat after... :)

[23:34] <jnthn> I *think* I got the latter rendering things better, at least :)

[23:43] <vrurg> Mine dies while having the symbol in the input field. :(

[23:53] *** MasterDuke left
