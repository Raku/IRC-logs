[00:09] *** Ven`` left
[00:22] *** dct left
[00:33] *** lucasb left
[05:49] *** AlexDaniel joined
[05:49] *** p6bannerbot sets mode: +v AlexDaniel

[07:56] *** robertle_ joined
[07:57] *** p6bannerbot sets mode: +v robertle_

[09:26] *** benchable6 left
[09:26] *** coverable6 left
[09:26] *** benchable6 joined
[09:26] *** coverable6 joined
[09:27] *** p6bannerbot sets mode: +v benchable6

[09:27] *** p6bannerbot sets mode: +v coverable6

[09:53] <lizmat> Files=1264, Tests=88010, 372 wallclock secs (20.06 usr  5.95 sys + 2651.01 cusr 229.49 csys = 2906.51 CPU)

[09:56] <AlexDaniel> robertle: hello? :)

[10:07] <robertle_> hi, how's it?

[10:23] <AlexDaniel> robertle_: I'm alirght! Wondering if there was any progress with rakudo package

[10:23] <AlexDaniel> or if there's anything specific that we can do

[10:50] <gfldex> jnthn: a chain of .subst seams to have gotten a hell of a lot faster

[10:51] <jnthn> gfldex: When? :)

[10:51] <jnthn> (If you know...)

[10:53] <gfldex> last 2 days of less

[10:53] <lizmat> perhaps Daniel Green's NQP opts on NFA's ?

[10:53] <gfldex> jnthn: (ungolfed) code: https://gist.github.com/a88776b16929d8817dba41cc646762b8

[10:56] <timotimo> those wouldn't use the NFA i don't think

[10:56] <timotimo> it could very well be that .HOW.compose and such got faster instead

[11:03] <AlexDaniel> c: HEAD https://gist.github.com/gfldex/a88776b16929d8817dba41cc646762b8

[11:04] <committable6> AlexDaniel, ¦HEAD(cbc3e72): «1000000␤1000000␤0.524634␤»

[11:04] <AlexDaniel> c: 2018.12 https://gist.github.com/gfldex/a88776b16929d8817dba41cc646762b8

[11:04] <committable6> AlexDaniel, ¦2018.12: «1000000␤1000000␤0.5774985␤»

[11:04] <AlexDaniel> gfldex: is there any reliable way to reproduce it?

[11:04] <AlexDaniel> ah wait

[11:04] <AlexDaniel> you said *faster*

[11:05] <AlexDaniel> nvm me I can't read

[11:05] <AlexDaniel> it's still within noise though

[11:40] <Geth> ¦ rakudo: c45d2b82da | (Elizabeth Mattijsen)++ | src/core/Any.pm6

[11:40] <Geth> ¦ rakudo: Provide some return types in Any signatures

[11:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c45d2b82da

[11:42] <Geth> ¦ rakudo/lower-topic: a4c994f544 | (Jonathan Worthington)++ | 4 files

[11:42] <Geth> ¦ rakudo/lower-topic: Don't lower $_ when in 6.c

[11:42] <Geth> ¦ rakudo/lower-topic: 

[11:42] <Geth> ¦ rakudo/lower-topic: Turns out the `is dynamic` markings alone are not quite enough, so

[11:42] <Geth> ¦ rakudo/lower-topic: simply don't perform this optimization when we are in 6.c. Gets the

[11:42] <Geth> ¦ rakudo/lower-topic: previous specs appendix test covering $CALLER::_ passing again.

[11:42] <Geth> ¦ rakudo/lower-topic: review: https://github.com/rakudo/rakudo/commit/a4c994f544

[11:43] <lizmat> jnthn: OOC, how does it know it's in 6.c there ?

[11:43] <lizmat> ah,: $*CAN_LOWER_TOPIC := 0 if $lang eq 'c';

[11:43] <jnthn> Yes :)

[11:44] <jnthn> I'm also planning to do a /^P5/ on the name of any module in `use` and set that too :)

[11:44] <lizmat> (at the very end  :-)

[11:44] <jnthn> (Which is a total hack, but will keep the P5foo modules that want to do $CALLER::_ working until we figure out a better way)

[11:44] <lizmat> jnthn: not sure that I follow that

[11:45] <lizmat> aha.. ok

[11:45] <jnthn> I hope they're all called P5foo :)

[11:45] * lizmat will keep calling them P5xxx   :-)

[11:45] <lizmat> yes, they are

[11:46] <lizmat> fwiw, I could easily set something in those modules to make it less hacky 

[11:46] <jnthn> We'll provide a proper mechanism too, but...I realized that even if we do that, it'd still take time for it to be available.

[11:46] <lizmat> if the proper mechanism is a pragma

[11:46] <jnthn> Well, the problem is that we need the pragma to affect the using module

[11:46] <lizmat> maybe introduce a non-functioning pragma now, so that I can update the modules

[11:46] <lizmat> ah

[11:46] <lizmat> ok

[11:47] <jnthn> I've thought about an EXPORTPRAGMA (along the lines of EXPORTHOW)

[11:47] <lizmat> hmmm...  sounds like something that could work

[11:47] <jnthn> I guess that also is a nice "progressive enhancement" in that it's just a package, and so quietly ignored by compiler versions that do't understand it.

[11:47] <jnthn> *don't

[11:48] <jnthn> The problem I'm left with is that, in all the discussion of making $_ non-dynamic, this case was missed:

[11:48] <lizmat> yup... well as soon as you have the functionality sketched out, I could add it in the modules

[11:48] <jnthn> m: $_ = 'abcd'; say so /ab/; /cd/; say $/;

[11:48] <camelia> rakudo-moar cbc3e72e2: OUTPUT: «True␤｢cd｣␤»

[11:49] <jnthn> What's quite incredible is that breaking that in some cases only manages to break a single spectest...

[11:49] <lizmat> yeah, that functionality of $/ is a pain implementation wise as well, having to bind $/ for each call

[11:49] <lizmat> jnthn: be glad it broke 1 spectest: I've had plenty of cases when I did some opts where no spectest broke

[11:50] <lizmat> but it broke modules in the ecosystem :-(

[11:50] <jnthn> Blin.

[11:50] <jnthn> Anyway, I see two options...

[11:51] <jnthn> 1. We see the presence of a regex in the optimizer and refuse to lower $_ in that case. Pros: least invasive possible change. Cons: we lose the ability to lower $_.

[11:52] <jnthn> 2. We start storing the topic inside of an attribute on Regex, passing it in to the `clone` call. Then we use that rather than a dynamic lookup. Pros: we keep the opt and avoid a dynamic lookup. Cons: tiny bit more memory usage, maybe some problem I didn't think of yet.

[11:52] <lizmat> that gets hairy if Regexes are passed around in untyped variables, no ?

[11:52] <jnthn> Hmm

[11:53] <lizmat> so my feeling would be 2.

[11:53] <jnthn> m: my $rx = /bc/; $_ = 'abcd'; $rx; say $/;

[11:53] <camelia> rakudo-moar c45d2b82d: OUTPUT: «WARNINGS for <tmp>:␤Nil␤Useless use of $rx in sink context (line 1)␤»

[11:53] <jnthn> m: my $rx = /bc/; $_ = 'abcd'; so $rx; say $/;

[11:53] <camelia> rakudo-moar c45d2b82d: OUTPUT: «WARNINGS for <tmp>:␤｢bc｣␤Useless use of "so " in expression "so $rx" in sink context (line 1)␤»

[11:53] <jnthn> Hmmm...

[11:54] <jnthn> That's awkward indeed.

[11:54] <jnthn> (The second case with `so`)

[11:57] <jnthn> Case 2 could result in subtle behavior changes also, in that we'd be capturing the $_ where the regex literal lives, but with the boolification caes you can apply it at a distance.

[12:01] <jnthn> Oh, interesting, the sink case seems to be a special compiler form...

[12:02] * jnthn gives 2 a try

[12:03] <jnthn> Actually, lunch first, then will :)

[12:09] *** |Tux| joined
[12:09] <Geth> ¦ rakudo: bb84b66ded | (Elizabeth Mattijsen)++ | src/core/Slip.pm6

[12:09] <Geth> ¦ rakudo: Provide return type info for Slip

[12:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bb84b66ded

[12:10] *** p6bannerbot sets mode: +v |Tux|

[12:11] *** AlexDani` joined
[12:12] *** p6bannerbot sets mode: +v AlexDani`

[12:12] *** AlexDani` left
[12:12] *** AlexDani` joined
[12:12] *** hitchcock.freenode.net sets mode: +v AlexDani`

[12:12] *** p6bannerbot sets mode: +v AlexDani`

[12:12] *** AlexDaniel left
[12:12] *** AlexDani` is now known as AlexDaniel

[12:30] <robertle_> AlexDaniel: I will have a look again theis evening and over the weekend, my current understanding is that the big-endian problems are sorted, but that we have flappers on two little-endian archs, and that they are not immediately reproducible...

[12:30] *** AlexDani` joined
[12:31] *** p6bannerbot sets mode: +v AlexDani`

[12:32] *** AlexDaniel left
[12:32] *** AlexDani` is now known as AlexDaniel

[12:32] *** AlexDaniel left
[12:32] *** AlexDaniel joined
[12:32] *** barjavel.freenode.net sets mode: +v AlexDaniel

[12:32] *** p6bannerbot sets mode: +v AlexDaniel

[12:39] <lizmat> m: say now + now   # I think the error on this is LTA, agree ?

[12:39] <camelia> rakudo-moar bb84b66de: OUTPUT: «Ambiguous call to 'infix:<+>(Instant, Instant)'; these signatures all match:␤:(Instant:D $a, Real:D $b)␤:(Real:D $a, Instant:D $b)␤  in block <unit> at <tmp> line 1␤␤»

[12:54] <Geth> ¦ rakudo: 50f0bb2b73 | (Elizabeth Mattijsen)++ | src/core/Instant.pm6

[12:54] <Geth> ¦ rakudo: Provide return types for Instant

[12:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/50f0bb2b73

[13:03] *** |Tux| left
[13:05] *** |Tux| joined
[13:05] *** p6bannerbot sets mode: +v |Tux|

[13:06] <Geth> ¦ rakudo: 93b5e2ef2d | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals.pm6

[13:06] <Geth> ¦ rakudo: Streamline R:I.get-local-timezone-offset a bit

[13:06] <Geth> ¦ rakudo: 

[13:06] <Geth> ¦ rakudo: - 1 scalar alloc less because of binding

[13:06] <Geth> ¦ rakudo: - use positional interface to DateTime.new, instead of named

[13:06] <Geth> ¦ rakudo: 

[13:06] <Geth> ¦ rakudo: FWIW, it feels to me this should be easier to do, e.g. by looking at the

[13:06] <Geth> ¦ rakudo: gmtime and localtime C functions and the difference in their value.

[13:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/93b5e2ef2d

[13:18] <Geth> ¦ rakudo: e58e376417 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals.pm6

[13:18] <Geth> ¦ rakudo: Use return signatures for R:I.PRECOMP-(EXT|TARGET)

[13:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e58e376417

[13:18] <Geth> ¦ rakudo: e48712a30a | (Elizabeth Mattijsen)++ | src/core/Instant.pm6

[13:18] <Geth> ¦ rakudo: Give Instant + Instant a more helpful error message

[13:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e48712a30a

[13:18] <lizmat> m: say now + now

[13:18] <camelia> rakudo-moar 93b5e2ef2: OUTPUT: «Ambiguous call to 'infix:<+>(Instant, Instant)'; these signatures all match:␤:(Instant:D $a, Real:D $b --> Instant:D)␤:(Real:D $a, Instant:D $b --> Instant:D)␤  in block <unit> at <tmp> line 1␤␤»

[13:18] <lizmat> becomes: Adding two Instant values has no meaning, did you mean to subtract?

[13:24] <timotimo> could it also suggest to .Numeric both before continuing?

[13:24] <timotimo> (rather than .Num which will numify, Numeric would more likely ratify?)

[13:25] <lizmat> still, what would that mean ?

[13:25] <timotimo> "i have numbers. i want to work with these numbers"?

[13:26] <lizmat> how about: Adding two Instant values has no meaning.

[13:26] <lizmat> Did you mean to subtract?  Perhaps you need to convert to .Numeric first?

[13:26] <timotimo> sounds good to me

[13:29] <Geth> ¦ roast: 73eb90d847 | (Elizabeth Mattijsen)++ | S02-types/instants-and-durations.t

[13:29] <Geth> ¦ roast: Make test for Instant + Instant less picky

[13:29] <Geth> ¦ roast: 

[13:29] <Geth> ¦ roast: In light of https://github.com/rakudo/rakudo/commit/e48712a30a

[13:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/73eb90d847

[13:29] <Geth> ¦ roast/6.c-errata: 2bec1d8808 | (Elizabeth Mattijsen)++ | S02-types/instants-and-durations.t

[13:29] <Geth> ¦ roast/6.c-errata: Make Instant + Instant test less picky

[13:29] <Geth> ¦ roast/6.c-errata: 

[13:29] <Geth> ¦ roast/6.c-errata: In light of https://github.com/rakudo/rakudo/commit/e48712a30a

[13:29] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/2bec1d8808

[13:31] <lizmat> the difference in performance on these surprises me:

[13:31] <lizmat> for ^100_000 -> int $_ { my ($a,$b) = (1,2) }; say now - ENTER now'

[13:31] <lizmat> m: for ^100_000 -> int $_ { my ($a,$b) = (1,2) }; say now - ENTER now'

[13:31] <camelia> rakudo-moar 93b5e2ef2: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3y ($a,$b) = (1,2) }; say now - ENTER now7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤…»

[13:31] <lizmat> m: for ^100_000 -> int $_ { my ($a,$b) = (1,2) }; say now - ENTER now

[13:31] <camelia> rakudo-moar 93b5e2ef2: OUTPUT: «0.239366␤»

[13:31] <lizmat> m: for ^100_000 -> int $_ { my ($a,$b) := (1,2) }; say now - ENTER now

[13:31] <camelia> rakudo-moar 93b5e2ef2: OUTPUT: «1.3546617␤»

[13:31] <timotimo> does one go through the slow-path binder perhaps?

[13:32] <lizmat> yeah. looks like

[13:32] <lizmat> bind_one_param  in RED at the top in a profile

[13:32] <timotimo> time to figure out how to generate good code for a limited set of signatures in this situation

[13:33] <lizmat> the reason I was looking at this, is that we have some methods in core that return a List of some values

[13:33] <lizmat> e.g. Instant.to-posix

[13:34] <lizmat> so: my ($posix,$leap) = now.to-posix

[13:34] <lizmat> generally means that you don't want to change the $posix / $leap values

[13:35] <lizmat> so I figured that: my ($posix,$leap) := now.to-posix

[13:35] <lizmat> would not only make them constants, but would also be faster

[13:35] <lizmat> as it wouldn't have to create Scalars etc etc etc...

[13:35] <lizmat> or create iterators

[13:36] <lizmat> anyways.. should I make an issue for that, timotimo?

[13:36] <lizmat> afk&

[14:12] <jnthn> Hmm, it looks like we might have been compiling a throw-away QAST::Block duplicating all the hash construction logic

[14:13] <jnthn> No partiuclar runtime cost, but certainly extra compilation work and extra stuff in the precomp

[14:13] <lizmat> jnthn++   # leaning up compiling

[14:14] <jnthn> Discovered this 'cus the duped up nodes confused the optimizer

[14:15] *** |Tux| left
[14:15] *** |Tux| joined
[14:16] *** p6bannerbot sets mode: +v |Tux|

[14:21] <jnthn> m: sub foo() { $_ = 'wat'; bar(); dd $/; }; sub bar() { /at/; dd $/ };

[14:21] <camelia> rakudo-moar e48712a30: ( no output )

[14:21] <jnthn> m: sub foo() { $_ = 'wat'; bar(); dd $/; }; sub bar() { /at/; dd $/ }; foo()

[14:21] <camelia> rakudo-moar e48712a30: OUTPUT: «Nil $/ = Nil␤Match $/ = Match.new(pos => 3, made => Any, hash => Map.new(()), list => (), orig => "wat", from => 1)␤»

[14:21] *** titsuki joined
[14:22] <jnthn> This is weird. We look down the call stack for a defined $_ and then update the $/ where that is

[14:22] <jnthn> Which means action at a distance

[14:22] <jnthn> So `given surprisingly-undefined-thing() { if /foo/ { } }` would be setting some $/ in some caller somewhere

[14:22] *** p6bannerbot sets mode: +v titsuki

[14:23] <jnthn> I'm quite sure this is not intended behavior...

[14:24] *** |Tux| left
[14:24] <lizmat> jnthn: perhaps this is from the time where each frame always had a $_ ?

[14:24] <jnthn> Every frame still does have a $_

[14:24] <timotimo> but not necessarily a defined one, yeah

[14:24] <lizmat> ah, ok,   :-)

[14:24] <jnthn> Right, that's what I'm saying :)

[14:25] <jnthn> What I am quite worried about, however, is what actual problem this might have been covering...

[14:25] <jnthn> I suspect I'm about to find out, and I suspect it's going to be ungood... :S

[14:25] <lizmat> :-(

[14:25] * jnthn runs spectest

[14:26] *** |Tux| joined
[14:27] <jnthn> Into S05 and already 4 failing tests :/

[14:27] *** p6bannerbot sets mode: +v |Tux|

[14:29] <Geth> ¦ rakudo: 59bafb832d | (Elizabeth Mattijsen)++ | src/core/Instant.pm6

[14:29] <Geth> ¦ rakudo: Augment the Instant + Instant error message, timotimo++

[14:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/59bafb832d

[14:29] <Geth> ¦ rakudo: f2ed3db750 | (Elizabeth Mattijsen)++ | src/core/Instant.pm6

[14:29] <Geth> ¦ rakudo: Bind tai to Instant.tai, rather than assigning

[14:29] <Geth> ¦ rakudo: 

[14:29] <Geth> ¦ rakudo: Since Instants are value types, there is no point wasting a Scalar

[14:29] <Geth> ¦ rakudo: on each created Instant.  This makes Instant:D.SET-SELF() about 5x

[14:29] <Geth> ¦ rakudo: as fast, and saves one Scalar allocation per Instant.

[14:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f2ed3db750

[14:41] <Geth> ¦ rakudo/lower-topic: 31c8fda287 | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[14:41] <Geth> ¦ rakudo/lower-topic: Empty the unused QAST::Block if { ... } is a hash

[14:41] <Geth> ¦ rakudo/lower-topic: 

[14:41] <Geth> ¦ rakudo/lower-topic: We take the contents of the QAST::Block and use it as the hash.

[14:41] <Geth> ¦ rakudo/lower-topic: However, we then failed to clear out the entries inside of that

[14:41] <Geth> ¦ rakudo/lower-topic: QAST::Block. This means we would compile that part of the tree twice,

[14:41] <Geth> ¦ rakudo/lower-topic: which is both a waste of compilation time and a bunch of bytecode we'll

[14:41] <Geth> ¦ rakudo/lower-topic: never run. Furthermore, it turns out this tree duplication in separate

[14:41] <Geth> ¦ rakudo/lower-topic: blocks could confuse the optimizer (which is how I discovered it).

[14:41] <Geth> ¦ rakudo/lower-topic: review: https://github.com/rakudo/rakudo/commit/31c8fda287

[14:42] <jnthn> OK, got my regex topic hanlding changes down to just two spectest files. Let's see how bad they are...

[14:45] <jnthn> Aha

[14:46] <jnthn> We were relying on it for `not /foo/`, using the lack of a defined $_ inside of the `not` as the hint to keep looking. D'oh.

[14:49] <jnthn> And the other case is this:

[14:49] <jnthn> $var = rx/<&abc>/;

[14:49] <jnthn> ok("aaabccc" ~~ m/aa <{ $var ?? $var !! rx{<.null>} }> cc/, 'Rule block first');

[14:49] <jnthn> What on earth...

[14:56] <jnthn> This second one pretty much does demand the "skip over undefined $_" semantics

[14:56] <jnthn> Guess I'd better try solution #1

[14:57] <lizmat> jnthn: is that something specced ?

[14:57] <jnthn> Yes, it's straight out of a spectest file

[14:57] <lizmat> how old is that test :-)

[14:58] <jnthn> 2009 or 2012, depending which git blame line you pick

[14:59] <jnthn> Ah, the 2012 commit was keeping up with a semantic change

[14:59] <jnthn> So, 2009. Nearly 10 years :)

[15:00] * lizmat wonders if that test is esoteric enough to wind up in 6.c-errata

[15:01] <jnthn> I dunno...I fear if it's in spectest it'll be elsewhere in the wild too

[15:02] <jnthn> Let's see if plan 1 works out at all

[15:02] <lizmat> let's hope  :-)

[15:05] <jnthn> At least we got the hash code-gen improvement out of attempt 2... :)

[15:05] <lizmat> indeed

[15:07] <timotimo> i wonder how much better the core setting's filesize becomes from that; i don't think we have that many literal hash blocks in there?

[15:07] *** |Tux| left
[15:08] <jnthn> I don't think so, no

[15:08] <lizmat> m: role A { has Int $.a }; class B does A { method b(\a) { $!a := a } }; B.new.b(42)  # this feels like a bug

[15:08] <camelia> rakudo-moar f2ed3db75: OUTPUT: «Type check failed in binding; expected NQPMu but got Int (42)␤  in method b at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:09] *** |Tux| joined
[15:09] <lizmat> m: class B { has Int $.a; method b(\a) { $!a := a } }; B.new.b(42)  # this works

[15:09] <camelia> rakudo-moar f2ed3db75: ( no output )

[15:09] <jnthn> Yeah, that looks a bit wrong

[15:09] *** p6bannerbot sets mode: +v |Tux|

[15:10] <lizmat> m: role A { has $.a }; class B does A { method b(\a) { $!a := a } }; B.new.b(42)  # regardless of type on the attribute

[15:10] <camelia> rakudo-moar f2ed3db75: OUTPUT: «Type check failed in binding; expected NQPMu but got Int (42)␤  in method b at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:11] <jnthn> Hurrah, clean spectest...

[15:11] <lizmat> :-)

[15:11] <jnthn> Now to make sure it still actually optimizes stuff it should...

[15:11] *** |Tux| left
[15:13] <jnthn> Apparently yes

[15:14] <lizmat> R#2581

[15:14] <synopsebot> R#2581 [open]: https://github.com/rakudo/rakudo/issues/2581 Cannot bind to an attribute from a role

[15:16] <Geth> ¦ rakudo/lower-topic: 17bf7415e4 | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[15:16] <Geth> ¦ rakudo/lower-topic: For blocks containing regexes, don't lower $_

[15:16] <Geth> ¦ rakudo/lower-topic: 

[15:16] <Geth> ¦ rakudo/lower-topic: Since we need to look it up when doing `/foo/` in sink or boolean

[15:16] <Geth> ¦ rakudo/lower-topic: contexts. Unfortunately, the current semantics of that rely on some

[15:16] <Geth> ¦ rakudo/lower-topic: action at a distance (find the nearest defined `$_`, and update the `$/`

[15:16] <Geth> ¦ rakudo/lower-topic: in that block); these probably want revisiting. I did attempt to try,

[15:16] <Geth> ¦ rakudo/lower-topic: when we closure-clone a regex, to copy the appropriate `$_` into it;

[15:16] <Geth> ¦ rakudo/lower-topic: this mostly works, but the case of `not /foo/` depends on it to skip

[15:16] <Geth> ¦ rakudo/lower-topic: over the `not` frame, and there is another test which even further

[15:16] <Geth> ¦ rakudo/lower-topic: relies on the current behavior. So for now, just don't optimize those

[15:16] <Geth> ¦ rakudo/lower-topic: cases.

[15:16] <Geth> ¦ rakudo/lower-topic: review: https://github.com/rakudo/rakudo/commit/17bf7415e4

[15:28] <Geth> ¦ rakudo/lower-topic: 8aa733062b | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[15:28] <Geth> ¦ rakudo/lower-topic: Poison lowering if we see a quasi quote

[15:28] <Geth> ¦ rakudo/lower-topic: 

[15:28] <Geth> ¦ rakudo/lower-topic: It might refer to variables outside of itself, and we can't yet easily

[15:28] <Geth> ¦ rakudo/lower-topic: track if that is the case. Macros are used very little, and will

[15:29] <Geth> ¦ rakudo/lower-topic: probably be completely re-done based on the 007 work, so for now just do

[15:29] <Geth> ¦ rakudo/lower-topic: the easiest thing possible to fix things like OO::Monitors that make use

[15:29] <Geth> ¦ rakudo/lower-topic: of them.

[15:29] <Geth> ¦ rakudo/lower-topic: review: https://github.com/rakudo/rakudo/commit/8aa733062b

[15:31] <Geth> ¦ rakudo/lower-topic: 11884e032d | (Jonathan Worthington)++ | src/Perl6/World.nqp

[15:31] <Geth> ¦ rakudo/lower-topic: Don't lower $_ when using a P5* module

[15:31] <Geth> ¦ rakudo/lower-topic: review: https://github.com/rakudo/rakudo/commit/11884e032d

[15:37] *** |Tux| joined
[15:37] *** p6bannerbot sets mode: +v |Tux|

[15:40] <Geth> ¦ rakudo: 9f28a42357 | (Elizabeth Mattijsen)++ | 3 files

[15:40] <Geth> ¦ rakudo: Streamline creation of Date/DateTime

[15:40] <Geth> ¦ rakudo: 

[15:40] <Geth> ¦ rakudo: - bind attributes to objects, as they are immutable

[15:40] <Geth> ¦ rakudo: - saves 3 Scalars per Date / 5 Scalars per DateTime

[15:40] <Geth> ¦ rakudo: - makes Date.new(y,m,d) about 60% faster

[15:40] <Geth> ¦ rakudo: - makes DateTime.new(y,m,d,h,m,s) about 15% faster

[15:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9f28a42357

[15:49] *** lucasb joined
[15:49] *** p6bannerbot sets mode: +v lucasb

[15:50] <jnthn> Seems the various perf regressions I'm seeing are things being pushed a tad over the inline limit and/or the $_ allocation happening unconditionally now (and without PEA we can't kill it off in spesh). But maybe now it's not dynamic I can do something about that... :)

[15:55] <timotimo> you know ...

[15:55] <timotimo> not could return a modified regex and rely on it being boolified "the next step down"

[15:55] <timotimo> actually

[15:55] <timotimo> forget that

[15:55] <timotimo> that'd only ever work for places that already boolify themselves, or sink for that matter

[15:59] <jnthn> Yeah :S

[16:16] *** SqrtNegInf left
[16:24] <AlexDaniel> not ok 28 - accessing Seq from multiple threads does not segfault

[16:24] <AlexDaniel> uh huh

[16:25] <AlexDaniel> ahhhh that's fudged, ok…

[16:31] <Geth> ¦ roast: 3bc17b6b97 | (Aleks-Daniel Jakimenko-Aleksejev)++ | integration/weird-errors.t

[16:31] <Geth> ¦ roast: Add tests for a weird segv issue

[16:31] <Geth> ¦ roast: 

[16:31] <Geth> ¦ roast: Resolves rakudo/rakudo#2486.

[16:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3bc17b6b97

[16:31] <synopsebot> RAKUDO#2486 [closed]: https://github.com/rakudo/rakudo/issues/2486 [Moar][regression][testneeded] New SEGV issue in Moar

[16:43] *** robertle_ left
[16:56] <[Tux]> Rakudo version 2018.12-139-g9f28a4235 - MoarVM version 2018.12-13-g473324ee3

[16:56] <[Tux]> csv-test-xs-20      0.433 -  0.442

[16:56] <[Tux]> test-t --race       0.840 -  0.845

[16:56] <[Tux]> csv-ip5xs           0.943 -  1.017

[16:56] <[Tux]> test-t              1.910 -  1.921

[16:56] <[Tux]> test                7.039 -  7.356

[16:56] <[Tux]> csv-ip5xs-20        7.166 -  7.269

[16:56] <[Tux]> test-t-20 --race    9.735 -  9.844

[16:56] <[Tux]> csv-parser         23.471 - 24.707

[16:56] <[Tux]> test-t-20          31.236 - 31.692

[17:03] <Geth> ¦ rakudo/lower-topic: 87fcda819b | (Jonathan Worthington)++ | src/Perl6/Optimizer.nqp

[17:03] <Geth> ¦ rakudo/lower-topic: More aggressive unused $_ deletion

[17:03] <Geth> ¦ rakudo/lower-topic: 

[17:03] <Geth> ¦ rakudo/lower-topic: Now that $_ is lexical (at least, under 6.d), we can in most cases

[17:03] <Geth> ¦ rakudo/lower-topic: better understand its usage, and delete it when we see there is no use

[17:03] <Geth> ¦ rakudo/lower-topic: of it at all. This recovers the performance we lost in the lowering of

[17:03] <Geth> ¦ rakudo/lower-topic: $_, caused by the fact that the reliance on lazy lexical initialization

[17:03] <Geth> ¦ rakudo/lower-topic: went away, and we were thus always initializing it.

[17:03] <Geth> ¦ rakudo/lower-topic: review: https://github.com/rakudo/rakudo/commit/87fcda819b

[17:07] <jnthn> So, do I dare merge this... :)

[17:09] <jnthn> With this, even *including* our high startup time, we're now winning `for 1..10_000_000 { }` against my system Perl, Python, and Ruby :)

[17:09] <dogbert11> why not :)

[17:10] <jnthn> It passes test, spectest, and even has a fix for an issue in master that I accidentally introduced a few days back

[17:11] <dogbert11> I'd say go for it

[17:11] <jnthn> Just throwing the test suite of a sizable/complex $dayjob project at it to get another measure of how it handles

[17:11] <jnthn> (complex in that it has quite a lot of deps that are themselves quite involved)

[17:12] <jnthn> Yay, all passed

[17:12] <dogbert11> cool

[17:15] <Geth> ¦ rakudo/master: 17 commits pushed by (Jonathan Worthington)++

[17:15] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/9f28a4235734...483bb59e924f

[17:15] <AlexDaniel> releasable6: status

[17:15] <releasable6> AlexDaniel, Next release in ≈15 days and ≈1 hour. 3 blockers. 0 out of 139 commits logged

[17:15] <releasable6> AlexDaniel, Details: https://gist.github.com/d2b1c3685a1f09de2ae82756441e8946

[17:15] <AlexDaniel> jnthn: looks like a perfect time to merge it

[17:15] <jnthn> There we go. \o/

[17:16] <jnthn> AlexDaniel: Yeah, I figured it's a good time for me to work on these opts :)

[17:16] <jnthn> Enough testing time.

[17:22] <jnthn> Next week, I'll look at more aggressive block flattening

[17:25] <jnthn> And then after that, back to the EA

[17:59] *** lucasb left
[22:01] *** SqrtNegInf joined
[22:02] *** p6bannerbot sets mode: +v SqrtNegInf

