[00:25] *** MasterDuke joined
[00:25] *** MasterDuke left
[00:25] *** MasterDuke joined
[00:33] <Geth> ¦ rakudo: vrurg++ created pull request #2941: Fix incorrect handling of unknown 6.c modifiers

[00:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2941

[00:56] <Geth> ¦ rakudo: 0296102e65 | (Vadim Belman)++ | tools/templates/main-version.in

[00:56] <Geth> ¦ rakudo: Fix incorrect handling of unknown 6.c modifiers

[00:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0296102e65

[00:56] <Geth> ¦ rakudo: e522d082f5 | (Vadim Belman)++ (committed using GitHub Web editor) | tools/templates/main-version.in

[00:56] <Geth> ¦ rakudo: Merge pull request #2941 from vrurg/add_version_6e

[00:56] <Geth> ¦ rakudo: 

[00:56] <Geth> ¦ rakudo: Fix incorrect handling of unknown 6.c modifiers

[00:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e522d082f5

[02:17] <vrurg> notable6: https://tenesianu.blogspot.com/2019/05/perl-6s-given-switch-on-steroids.html

[02:17] <notable6> vrurg, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Notable

[02:18] <vrurg> note: weekly https://tenesianu.blogspot.com/2019/05/perl-6s-given-switch-on-steroids.html

[02:18] <notable6> vrurg, Noted!

[04:02] *** Kaypie left
[04:02] *** Kaypie joined
[04:35] *** chansen_ left
[04:38] *** vrurg left
[04:39] *** chansen_ joined
[04:44] *** chansen_ left
[04:52] *** chansen_ joined
[05:35] *** squashable6 left
[05:39] *** squashable6 joined
[05:39] *** ChanServ sets mode: +v squashable6

[07:10] <lizmat> Files=1262, Tests=108002, 202 wallclock secs (26.71 usr  7.48 sys + 2839.43 cusr 269.16 csys = 3142.78 CPU)

[07:43] *** MasterDuke left
[08:46] *** patrickb joined
[10:04] *** HarmtH joined
[10:30] *** patrickb left
[10:30] *** robertle left
[10:40] <Geth> ¦ roast: 660bcf1645 | (Elizabeth Mattijsen)++ | S07-hyperrace/basics.t

[10:40] <Geth> ¦ roast: Update comment; instead of hanging, it now segfaults

[10:40] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/660bcf1645

[10:41] <Geth> ¦ rakudo: 667c75d315 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/JSON.pm6

[10:41] <Geth> ¦ rakudo: Make to-json about 60% faster.

[10:41] <Geth> ¦ rakudo: 

[10:41] <Geth> ¦ rakudo: Ported from a PR for JSON::Fast, with the Exception handling built

[10:41] <Geth> ¦ rakudo: in again.

[10:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/667c75d315

[10:46] <Geth> ¦ rakudo: 161d7eeff0 | (Elizabeth Mattijsen)++ | lib/MoarVM/Profiler.pm6

[10:46] <Geth> ¦ rakudo: Make Callee.file always return something

[10:46] <Geth> ¦ rakudo: 

[10:46] <Geth> ¦ rakudo: So we can reliable use .file on the _by_file methods.

[10:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/161d7eeff0

[10:52] *** patrickb joined
[10:54] *** lizmat left
[11:02] *** lizmat joined
[11:36] <AlexDaniel> lizmat: that's 66.7% faster or 1.67 as fast… :)

[11:37] <lizmat> whatever... I had a 5MB unpretty JSON file that took 10 seconds to jsonify, it now only takes 6

[11:37] <lizmat> ± noise...

[11:37] <lizmat> so I figured I'd be conservative in the speed improvement claim

[11:38] <AlexDaniel> yeah that's pretty cool, just a reminder that we have tools/speedup.p6 that is meant to consistify these numbers :)

[11:39] <AlexDaniel> for anyone interested: https://gist.github.com/AlexDaniel/481618bfc56f95ba89e86ec7efdb95f9

[11:42] <lizmat> AlexDaniel++

[11:53] *** ufobat_ left
[12:37] <Geth> ¦ rakudo/SetHash-set-unset: b9d9943c34 | (Elizabeth Mattijsen)++ | src/core/SetHash.pm6

[12:37] <Geth> ¦ rakudo/SetHash-set-unset: Give SetHash a set/unset method

[12:37] <Geth> ¦ rakudo/SetHash-set-unset: 

[12:37] <Geth> ¦ rakudo/SetHash-set-unset: Inspired by seeing things like:

[12:37] <Geth> ¦ rakudo/SetHash-set-unset: 

[12:37] <Geth> ¦ rakudo/SetHash-set-unset:     %sethash{$_} = True for @to-be-added;

[12:37] <Geth> ¦ rakudo/SetHash-set-unset: 

[12:37] <Geth> ¦ rakudo/SetHash-set-unset: in the wild.  Instead, one can now do:

[12:37] <Geth> ¦ rakudo/SetHash-set-unset: <…commit message has 5 more lines…>

[12:37] <Geth> ¦ rakudo/SetHash-set-unset: review: https://github.com/rakudo/rakudo/commit/b9d9943c34

[12:38] <Geth> ¦ rakudo: lizmat++ created pull request #2942: Give SetHash a set/unset method

[12:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2942

[12:53] <Geth> ¦ rakudo: lizmat self-unassigned @a[-1;0]:exists returns True https://github.com/rakudo/rakudo/issues/2929

[13:08] <lizmat> bisectable6: dd (2, 4 ... 1_000_000).iterator

[13:08] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=161d7ee) because on both starting points the exit code is 0

[13:09] <bisectable6> lizmat, bisect log: https://gist.github.com/696698f1e1a770a001d9e269da5b885a

[13:09] <bisectable6> lizmat, (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb52eb1fd07397659f19a5cf36dc61f84053

[13:09] <bisectable6> lizmat, The result looks a bit unrealistic, doesn't it? Most probably the output is different on every commit (e.g. ｢bisect: say rand｣)

[13:10] <patrickb> .seen vrurg

[13:10] <yoleaux> I saw vrurg 02:18Z in #perl6-dev: <vrurg> note: weekly https://tenesianu.blogspot.com/2019/05/perl-6s-given-switch-on-steroids.html

[13:13] *** Kaypie left
[13:13] *** Kaypie joined
[13:18] <ugexe> m: to-json({ Foo => v1 })

[13:18] <camelia> rakudo-moar a643b8be1: OUTPUT: «Saw 1 occurrence of deprecated code.␤================================================================================␤Sub to-json (from GLOBAL) seen at:␤  <tmp>, line 1␤Please use JSON::Fast, JSON::Tiny or JSON::Pretty from https://modules.per…»

[13:18] <ugexe> that could be considered a regression

[13:19] <ugexe> i'm not sure how careful we have been about stringifying versions in meta data before to-json'ing it

[13:19] <ugexe> infact that was a difference between the port from JSON::Fast

[13:20] <ugexe> lizmat: the new json code didn't port this bit of logic: `return "\"" ~ str-escape(~$obj) ~ "\"" if $obj ~~ Str|Version;`

[13:21] <lizmat> ugexe: good catch, will fix

[13:23] <nine> .tell patrickb won't be able to review anything this weekend. I'm at my bachelor (LAN-)party

[13:23] <yoleaux> nine: I'll pass your message to patrickb.

[13:23] <patrickb> I don't seem to have a commit bit for to perl6/nqp-configure and perl6/nqp. Even though I do have one for rakudo. Is that on purpose? If not, can I also get one for those two repos?

[13:23] <yoleaux> 13:23Z <nine> patrickb: won't be able to review anything this weekend. I'm at my bachelor (LAN-)party

[13:23] <patrickb> hi nine!

[13:25] <AlexDaniel> patrickb: I don't think so, let me fix that…

[13:25] <lizmat> ugexe: do we need string escaping for Version objects

[13:26] <AlexDaniel> patrickb: ok, there's an invite that you need to accept

[13:27] <patrickb> AlexDaniel: Thanks!

[13:28] <patrickb> nine: That's ok. I'm not blocked by those PRs.

[13:28] <Geth> ¦ rakudo: 8540c94d3d | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/JSON.pm6

[13:28] <Geth> ¦ rakudo: Oops, forgot to support version objects, ugexe++

[13:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8540c94d3d

[13:30] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue Helper function on SetHashes https://github.com/perl6/problem-solving/issues/35

[13:31] <patrickb> Hm. I am inclinded to merge the huge fix-everyhing PRs without nines review. They fix so many failures I'm quite sure stuff won't be worse after the merge.

[13:34] <AlexDaniel> patrickb: better now than later

[13:36] <ugexe> lizmat: i don't think so... " would always get turned into . anyway

[13:37] <lizmat> well, anyway, I copied the current behaviour in the patch

[13:41] <AlexDaniel> e: my @to-be-added = eager 1..200_000; my %sethash = SetHash.new(@to-be-added); %sethash{$_} = True for @to-be-added;

[13:42] <evalable6> AlexDaniel, rakudo-moar 8540c94d3: OUTPUT: «»

[13:42] <AlexDaniel> err that's not what I wanted

[13:42] <AlexDaniel> e: my @to-be-added = eager 1..200_000; %sethash{$_} = True for @to-be-added; say now - INIT now;

[13:42] <evalable6> AlexDaniel, rakudo-moar 8540c94d3: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/OwtMoRazl8␤Variabl…»

[13:42] <evalable6> AlexDaniel, Full output: https://gist.github.com/6b3fe4dc6de4cf8f0667314ed940fc0c

[13:42] <AlexDaniel> e: my @to-be-added = eager 1..200_000; my %sethash = SetHash.new(); %sethash{$_} = True for @to-be-added; say now - INIT now;

[13:42] <evalable6> AlexDaniel, rakudo-moar 8540c94d3: OUTPUT: «0.2608523␤»

[13:43] <AlexDaniel> e: my @to-be-added = eager 1..200_000; my %sethash = SetHash.new(@to-be-added); say now - INIT now;

[13:43] <evalable6> AlexDaniel, rakudo-moar 8540c94d3: OUTPUT: «4.1744451␤»

[13:47] <lizmat> wow

[13:48] <lizmat> e: my @to-be-added = eager 1..200_000; my %sethash is SetHas = @to-be-added; say now - INIT now;

[13:48] <evalable6> lizmat, rakudo-moar 8540c94d3: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/RjihIRQKs0␤Can't u…»

[13:48] <evalable6> lizmat, Full output: https://gist.github.com/46533e29a6d11ddfec52452f9aa4d338

[13:48] <lizmat> e: my @to-be-added = eager 1..200_000; my %sethash is SetHash = @to-be-added; say now - INIT now;

[13:48] <evalable6> lizmat, rakudo-moar 8540c94d3: OUTPUT: «0.7373008␤»

[13:49] <lizmat> e: my @to-be-added = eager 1..200_000; my $then = now; my %sethash is SetHash = @to-be-added; say now - $then;

[13:49] <evalable6> lizmat, rakudo-moar 8540c94d3: OUTPUT: «0.67547787␤»

[13:49] <lizmat> e: my @to-be-added = eager 1..200_000; my $then = now; my %sethash is SetHash; %sethash{$_} = True for @to-be-added; say now - $then;

[13:50] <evalable6> lizmat, rakudo-moar 8540c94d3: OUTPUT: «1.99042913␤»

[13:50] <lizmat> ah... 

[13:51] <lizmat> my %sethash = SetHash.new does 2 things: it creates a SetHash, *and* then stores that in a Hash

[13:51] <lizmat> AlexDaniel: did you mean to use := instead of = perhaps ?

[13:52] <lizmat> e: my @to-be-added = eager 1..200_000; my $then = now; my %sethash := SetHash.new(@to-be-added); say now - $then;

[13:52] <evalable6> lizmat, rakudo-moar 8540c94d3: OUTPUT: «0.35582762␤»

[13:52] <lizmat> e: my @to-be-added = eager 1..200_000; my $then = now; my %sethash is SetHash; %sethash{$_} = True for @to-be-added; say now - $then;

[13:52] <evalable6> lizmat, rakudo-moar 8540c94d3: OUTPUT: «1.9214767␤»

[13:52] <lizmat> *phew*

[13:54] <dogbert17> patrickb: thx for fixing the 'nuke' bug in rakudobrew

[13:54] <patrickb> dogbert17: Your welcome!

[14:00] <AlexDaniel> e: my @to-be-added = eager 1..200_000; my $then = now; my %sethash is SetHash; %sethash{$_} = True for @to-be-added; say now - $then;

[14:00] <evalable6> AlexDaniel, rakudo-moar 8540c94d3: OUTPUT: «2.06118205␤»

[14:00] <AlexDaniel> e: my @to-be-added = eager 1..200_000; my $then = now; my %sethash is SetHash; %sethash ,= SetHash.new(@to-be-added); say now - $then;

[14:00] <evalable6> AlexDaniel, rakudo-moar 8540c94d3: OUTPUT: «0.2771428␤»

[14:00] <AlexDaniel> lizmat: can you bench this against your proposed .set method?

[14:03] <lizmat> will in a mo

[14:06] <lizmat> AlexDaniel: 0.2206553 vs 0.2176162  I would say, pretty much within noise

[14:06] <lizmat> ah, sorry...missed the first one

[14:07] <AlexDaniel> the first one is just a for loop so yeah, it'll be 10 times slower

[14:08] <lizmat> 1.383803 (for), 0.2206553 (,=) and 0.2176162 (.set)

[14:08] <AlexDaniel> I don't have an alternative for unset though

[14:09] <AlexDaniel> greppable6: \=\ True\ for

[14:09] <greppable6> AlexDaniel, 3 lines, 3 modules: https://gist.github.com/c79a76cf88ee72e7bba32f5c3d1da30c

[14:10] *** patrickb left
[14:10] <lizmat> AlexDaniel: (-)=   :-)

[14:23] <AlexDaniel> e: my @to-be-added = eager 1..200_000; my $then = now; my %sethash is SetHash; %sethash (+)= SetHash.new(@to-be-added); say now - $then;

[14:23] <evalable6> AlexDaniel, rakudo-moar 8540c94d3: OUTPUT: «2.76878196␤»

[14:25] <lizmat> e: my @to-be-added = eager 1..200_000; my $then = now; my %sethash is SetHash; %sethash (+)= @to-be-added; say now - $then;

[14:26] <evalable6> lizmat, rakudo-moar 8540c94d3: OUTPUT: «7.0819087␤»

[14:26] <lizmat> wow

[14:26] <lizmat> expected that to be fasterer

[14:30] <AlexDaniel> timotimo: what do you think, am I the only one who struggles with JSON::Fast? :) Like all the time I do something like `for %foo<blah>` and it doesn't work and then I have to add @() or [0] randomly until it works

[14:30] <AlexDaniel> like, I can never get it to work right away on the first try…

[14:32] <AlexDaniel> for example

[14:32] <AlexDaniel> m: use JSON::Fast; my %data = from-json(‘{"array": [1, 2, 3]}’); .say for %data<array>

[14:32] <camelia> rakudo-moar a643b8be1: OUTPUT: «===SORRY!===␤Could not find JSON::Fast at line 1 in:␤    inst#/home/camelia/.perl6␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/site␤    inst#/home/camelia/rakudo-m-inst-1/share/perl6/vendor␤    inst#/home/camelia/rakudo-m-inst-1/share…»

[14:32] <AlexDaniel> mmmm

[14:32] <AlexDaniel> star: say 42

[14:32] <camelia> star-m 2017.07: OUTPUT: «sudo: /home/camelia/bin/perl6-m: command not found␤»

[14:32] <AlexDaniel> e: my %data = from-json(‘{"array": [1, 2, 3]}’); .say for %data<array>

[14:32] <evalable6> AlexDaniel, rakudo-moar 8540c94d3: OUTPUT: «[1 2 3]␤Saw 1 occurrence of deprecated code.␤=============================================…»

[14:32] <evalable6> AlexDaniel, Full output: https://gist.github.com/424b6cbc586bbc3c3bd8ccce41a72138

[14:33] <AlexDaniel> so that's [1 2 3], definitely not what I wanted

[14:33] <AlexDaniel> and how do I fix that, uhh…

[14:33] <AlexDaniel> e: my %data = from-json(‘{"array": [1, 2, 3]}’); .say for %data<array>[0]

[14:33] <evalable6> AlexDaniel, rakudo-moar 8540c94d3: OUTPUT: «1␤Saw 1 occurrence of deprecated code.␤===================================================…»

[14:33] <evalable6> AlexDaniel, Full output: https://gist.github.com/94d838d1152199e36f0bcdc43c50cfd4

[14:33] <AlexDaniel> that doesn't work…

[14:33] <AlexDaniel> e: my %data = from-json(‘{"array": [1, 2, 3]}’); .say for @(%data<array>)

[14:33] <evalable6> AlexDaniel, rakudo-moar 8540c94d3: OUTPUT: «1␤Saw 1 occurrence of deprecated code.␤===================================================…»

[14:33] <evalable6> AlexDaniel, Full output: https://gist.github.com/14e5d0cd7c4f8b2faa9b0428f849a535

[14:33] <AlexDaniel> yaaay

[14:33] <AlexDaniel> timotimo: and that's how it goes like constantly

[14:34] *** vrurg joined
[14:35] *** patrickb joined
[14:37] <timotimo> AlexDaniel: i'm sure everybody struggles like that

[14:37] <timotimo> i'm not yet sure how to correctly go forward

[14:37] <timotimo> like, just changing it would break people's code, so it'll have to be :api<2> or something, but what?

[14:46] <AlexDaniel> timotimo: JSON::Easy? :)

[14:46] <timotimo> but then it won't be fast :P

[14:47] <AlexDaniel> timotimo: what about JSON

[14:47] <timotimo> then it will be neither easy nor fast :P

[14:47] <AlexDaniel> but it will be very easy to type

[14:50] <timotimo> for gradual typing enthusiasts we shall offer J, JS, JSO, and JSON

[15:06] *** Kaypie left
[15:06] <AlexDaniel> e: my @to-be-added = eager 1..200_000; my $then = now; my %sethash is SetHash; %sethash = |%sethash, |SetHash.new(@to-be-added); say now - $then;

[15:06] <evalable6> AlexDaniel, rakudo-moar 8540c94d3: OUTPUT: «6.1007064␤»

[15:18] <lizmat> AlexDaniel: yeah, there isn't currently a cheap way of doing that :-(

[15:18] <lizmat> e: my @to-be-added = eager 1..200_000; my $then = now; my %sethash is SetHash; %sethash = |%sethash, |@to-be-added; say now - $then;

[15:19] <evalable6> lizmat, rakudo-moar 8540c94d3: OUTPUT: «1.18713267␤»

[15:19] <lizmat> you don't need to make the new thing a SetHash first

[15:20] <patrickb> vrurg: I'd be grateful for another look here: https://github.com/rakudo/rakudo/pull/2939#discussion_r289604989

[15:30] *** squashable6 left
[15:32] *** squashable6 joined
[16:27] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue Removed Syntactic Feature https://github.com/perl6/problem-solving/issues/36

[16:41] *** squashable6 left
[16:43] *** squashable6 joined
[16:52] *** vrurg left
[17:00] *** AlexDaniel left
[17:02] *** gfldex left
[17:02] *** AlexDaniel joined
[17:03] *** gfldex joined
[17:16] <Geth> ¦ rakudo: b20ccbae44 | (Elizabeth Mattijsen)++ | src/core/array_operators.pm6

[17:16] <Geth> ¦ rakudo: push|append|unshift|prepend as sub die on named parameters

[17:16] <Geth> ¦ rakudo: 

[17:16] <Geth> ¦ rakudo: Fixes #2943

[17:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b20ccbae44

[17:16] <synopsebot> RAKUDO#2943 [open]: https://github.com/rakudo/rakudo/issues/2943 Sub push doesn't die on named parameters

[17:26] <Geth> ¦ roast: dd9a661f02 | (Elizabeth Mattijsen)++ | S32-array/push.t

[17:26] <Geth> ¦ roast: Add tests for R#2943

[17:26] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dd9a661f02

[17:26] <synopsebot> R#2943 [closed]: https://github.com/rakudo/rakudo/issues/2943 Sub push doesn't die on named parameters

[18:08] *** lizmat left
[18:12] *** lizmat joined
[18:22] *** patrickb left
[18:50] *** leont joined
[18:54] *** gfldex left
[18:55] *** gfldex joined
[19:24] <tobs> Does anyone have an idea about R#2571? I'm bundling an executable with my module but the executable is stripped when installed.

[19:24] <synopsebot> R#2571 [open]: https://github.com/rakudo/rakudo/issues/2571 %?RESOURCES execute bit lost on installation

[19:25] <tobs> Don't know if it's too hairy to support that in a cross-platform way. Maybe the easiest solution is to make a copy to $*TMPDIR on startup and chmod that?

[19:36] <ugexe> what needs to happen is META6.json extended to store attributes of all files in the distribution, so that upon installation CURI can try to accommodate 

[19:37] <ugexe> something like `"manifest" => [ {"path" : "lib/Foo.pm6", "perms" : "..." }, {"path" : "resources/whatever.exe" : "perms" : "..." }]`

[19:38] <ugexe> we'd eventually also use that to mark files that are generated at build time vs not actually included in the distribution, and so on

[19:39] <ugexe> sha1 name, file modified times, etc

[19:41] <lizmat> m: dd [{ a => 42}], dd [{ a => 42},]   # subtle differencve... and a bit of a WAT ?

[19:41] <camelia> rakudo-moar a643b8be1: OUTPUT: «Array element = [{:a(42)},]␤Array element = [:a(42)]␤Nil␤»

[19:41] <lizmat> m: dd [{}]  # also maybe a WAT ?

[19:41] <camelia> rakudo-moar a643b8be1: OUTPUT: «Array element = []␤»

[19:43] <tobs> ugexe: That sounds like a bigger project. Guess I'll be able to turn the executable into something I can NativeCall into by midnight instead.

[19:43] <tobs> To be honest, I've been mostly cargo-culting META6 so far. I wouldn't be able to file an appropriate issue right now.

[19:44] <tobs> well, the file itself is documented. What I lack is understanding of CURI

[19:46] <ugexe> you can to be able to tell CURI what to do with the file. its api doesn't take "file paths", it takes a Distribution which can be an e.g. socket. This means CURI has no way to infer what the original e.g. permissions of a file are

[19:47] <ugexe> so those things needs to be described in META6.json somewhere, and CURI made to understand that new description

[19:47] <ugexe> of course tooling would usually generate those entries into META6.json for path based distributions

[19:51] <tobs> it feels a bit like reinventing tar

[19:52] <ugexe> pretty much

[19:52] <tobs> but it sheds some light for me on the abstractions involved, thanks

[19:54] <ugexe> using tar files as our main distribution format (ala install literal .tar files) would solve the unicode name and case sensitivity issues on various systems

[19:54] <ugexe> although that wouldnt work so well for non pure-perl6 distributions (i.e. NativeCall)

[19:57] <Geth> ¦ rakudo: a6a2ba90f9 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/JSON.pm6

[19:57] <Geth> ¦ rakudo: Remove unnecessary code

[19:57] <Geth> ¦ rakudo: 

[19:57] <Geth> ¦ rakudo: Probably stuck around from a different path in the to-json refactor.

[19:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a6a2ba90f9

[20:10] <timotimo> lizmat: that's "just" single-argument rule; just like [<foo bar baz>] is the syntax to get an array of strings, though with [{ }] it's not quite as useful

[20:11] <lizmat> yeah, I realized it was the 1arg rule..  :-)   but that's really not very clear from that context

[20:11] <lizmat> m: my @a = { a => 42 }; dd @a'

[20:11] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3my @a = { a => 42 }; dd @a7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statem…»

[20:11] <lizmat> m: my @a = { a => 42 }; dd @a

[20:11] <camelia> rakudo-moar a643b8be1: OUTPUT: «Array @a = [:a(42)]␤»

[20:11] <lizmat> ^^^ but I guess that's the same thing

[20:12] <timotimo> yeah, that's a more explicit way to write it i guess

[20:20] *** MasterDuke joined
[20:20] *** MasterDuke left
[20:20] *** MasterDuke joined
[20:33] <Geth> ¦ rakudo: 2566db7b9d | (Elizabeth Mattijsen)++ | src/core/List.pm6

[20:33] <Geth> ¦ rakudo: Revert "Re-imagine PR #2493"

[20:33] <Geth> ¦ rakudo: 

[20:33] <Geth> ¦ rakudo: This reverts commit 8f424c9d8ecac7c6fbf4f3aa7e0e5fc4b46ea8fe.

[20:33] <Geth> ¦ rakudo: 

[20:33] <Geth> ¦ rakudo: Not seeing a way to fix this atm, so reverting and re-opening the

[20:33] <Geth> ¦ rakudo: pull request on which this was based (as well as the issue that

[20:33] <synopsebot> RAKUDO#2493 [closed]: https://github.com/rakudo/rakudo/pull/2493 Fix is-lazy propagation bug in List::Reifier

[20:33] <Geth> ¦ rakudo: caused this).

[20:33] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2566db7b9d

[21:09] *** squashable6 left
[21:14] *** squashable6 joined
[21:36] *** gfldex left
[21:38] *** gfldex joined
[21:43] * lizmat calls it a day

[21:51] *** squashable6 left
[21:54] *** squashable6 joined
[22:07] *** gfldex left
[22:10] *** vrurg joined
[23:03] *** leont left
[23:35] *** HarmtH left
[23:41] *** HarmtH joined
