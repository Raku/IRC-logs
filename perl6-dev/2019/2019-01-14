[00:14] *** Ven`` joined
[00:15] *** lizmat left
[00:15] *** p6bannerbot sets mode: +v Ven``

[00:20] *** lizmat joined
[00:20] *** p6bannerbot sets mode: +v lizmat

[01:05] *** Ven`` left
[02:16] *** SqrtNegInf left
[02:30] <Geth> ¦ rakudo: 5fcba5b366 | MasterDuke17++ (committed using GitHub Web editor) | src/Perl6/Optimizer.nqp

[02:30] <Geth> ¦ rakudo: Fix typo in comment

[02:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5fcba5b366

[03:01] *** remi_ness left
[03:05] *** martin__ joined
[03:06] *** p6bannerbot sets mode: +v martin__

[03:09] *** ufobat left
[03:15] *** remi_ness joined
[03:16] *** p6bannerbot sets mode: +v remi_ness

[04:08] *** SqrtNegInf joined
[04:09] *** p6bannerbot sets mode: +v SqrtNegInf

[04:49] *** MasterDuke left
[06:22] *** martin__ is now known as ufobat

[06:51] *** remi_ness left
[07:45] *** brrt joined
[07:46] *** p6bannerbot sets mode: +v brrt

[10:21] <lizmat> Files=1264, Tests=87705, 378 wallclock secs (20.31 usr  5.98 sys + 2689.09 cusr 232.83 csys = 2948.21 CPU)

[11:22] *** robertle_ joined
[11:23] *** p6bannerbot sets mode: +v robertle_

[12:02] *** |Tux| joined
[12:02] *** Tux__ left
[12:03] *** p6bannerbot sets mode: +v |Tux|

[12:05] *** ExtraCrispy left
[12:07] *** ExtraCrispy joined
[12:07] *** p6bannerbot sets mode: +v ExtraCrispy

[12:35] *** Ven`` joined
[12:36] *** p6bannerbot sets mode: +v Ven``

[12:53] *** MasterDuke joined
[12:53] *** p6bannerbot sets mode: +v MasterDuke

[12:54] *** MasterDuke left
[12:54] *** MasterDuke joined
[12:54] *** herbert.freenode.net sets mode: +v MasterDuke

[12:54] *** p6bannerbot sets mode: +v MasterDuke

[13:13] *** brrt left
[13:37] <lizmat> notable6: weekly

[13:37] <notable6> lizmat, 12 notes: https://gist.github.com/a35ea99cb820cc65da62a2f6da606761

[13:38] <lizmat> notable6: weekly reset

[13:38] <notable6> lizmat, Moved existing notes to “weekly_2019-01-14T13:38:26Z”

[13:46] <nine> jnthn: wanna see something odd? This apparently used to work in our production code: method !watch-for(@folders, $watch_for) { for @folders -> $folder { whenever $folder.IO.watch -> $e { ...

[13:49] <jnthn> nine: In 6.d the `whenever` must be lexically within the `supply` or `react` block

[13:49] <nine> Apparently also in 6.c

[13:57] <nine> Though I can't find a golf for that.

[14:00] <nine> WAT? The golf is: use v6.c; unit class Foo; use File::Find::Rule:from<Perl5>; method !foo() { whenever "foo" { } }

[14:00] <nine> The use File::Find::Rule:from<Perl5> makes the difference

[14:00] <timotimo> does it accidentally export use v6.d somehow?

[14:01] <timotimo> does it trigger the "we need $_ for perl5 backcompat modules" behaviour?

[14:01] *** Ven`` left
[14:09] *** brrt joined
[14:10] *** p6bannerbot sets mode: +v brrt

[14:18] *** Ven`` joined
[14:19] *** p6bannerbot sets mode: +v Ven``

[14:32] *** titsuki left
[14:35] *** titsuki joined
[14:36] *** p6bannerbot sets mode: +v titsuki

[14:40] <lizmat> reportable6: 2019-01-07 2019-01-14

[14:40] <reportable6> lizmat, OK, working on it! This may take up to 40 seconds

[14:41] <reportable6> lizmat, https://gist.github.com/7292e558989e1b974949bdca60e94686

[14:43] <AlexDaniel> wow, a new ticket on RT… :)

[14:45] <lizmat> yeah...daxim's right ?

[14:45] <lizmat> should be closable by tomorrow... unless something weird happens

[15:08] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/01/14/2019-02-is-it-spring/

[15:08] <lizmat> moritz: ^^

[15:14] <jnthn> m: use Test; my $p = Promise.new; start react { my $c = Channel.new; whenever $c { }; $c.close; for $c.list { }; $p.keep; }; await Promise.anyof($p, Promise.in(5)); ok $p, "No hang when we close and then drain a channel we have a subscription to"

[15:14] <camelia> rakudo-moar 5fcba5b36: OUTPUT: «ok 1 - No hang when we close and then drain a channel we have a subscription to␤»

[15:16] <jnthn> Hmm

[15:16] <jnthn> m: use Test; react { my $c = Channel.new; whenever $c { }; $c.close; for $c.list { }; }; pass "Did not hang"

[15:16] <camelia> rakudo-moar 5fcba5b36: OUTPUT: «(timeout)»

[15:17] <jnthn> m: use Test; my $p = start react { my $c = Channel.new; whenever $c { }; $c.close; for $c.list { } }; await Promise.anyof($p, Promise.in(5)); ok $p, "No hang when we close and then drain a channel we have a subscription to"

[15:17] <camelia> rakudo-moar 5fcba5b36: OUTPUT: «ok 1 - No hang when we close and then drain a channel we have a subscription to␤»

[15:18] <jnthn> m: use Test; for ^5 { my $p = start react { my $c = Channel.new; whenever $c { }; $c.close; for $c.list { } }; await Promise.anyof($p, Promise.in(5)); ok $p, "No hang when we close and then drain a channel we have a subscription to ($_)" }

[15:18] <camelia> rakudo-moar 5fcba5b36: OUTPUT: «ok 1 - No hang when we close and then drain a channel we have a subscription to (0)␤ok 2 - No hang when we close and then drain a channel we have a subscription to (1)␤ok 3 - No hang when we close and then drain a channel we have a subscription to…»

[15:18] <jnthn> OK, guess I have to test if with the `pass "we ddin't hang"` approach...

[15:20] <jnthn> It's odd in that this was golfed out of a $dayjob app that wedged a thread, but that was off in the pool

[15:20] <jnthn> I already have a local patch to address the bug, but was hoping for a slightly better test than "just pass if it doesn't hang"

[15:31] <Geth> ¦ roast: 1aaa01506e | (Jonathan Worthington)++ | S17-channel/subscription-drain-in-react.t

[15:31] <Geth> ¦ roast: Cover a Channel close/drain/subscription hang

[15:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1aaa01506e

[15:33] <Geth> ¦ rakudo: 9b77459b8d | (Jonathan Worthington)++ | 2 files

[15:33] <Geth> ¦ rakudo: Fix hang in Channel subscribe/close/drain

[15:33] <Geth> ¦ rakudo: 

[15:33] <Geth> ¦ rakudo: When we polled a Channel, we forgot to re-insert the CLOSE or FAIL

[15:33] <Geth> ¦ rakudo: message. This meant that under certain use patterns, such as when we

[15:33] <Geth> ¦ rakudo: had a subscription to a Channel, closed it, and then tried to drain it

[15:33] <Geth> ¦ rakudo: with a `for` loop, we could get a hang, since the draining loop never

[15:34] <Geth> ¦ rakudo: saw the CLOSE message.

[15:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9b77459b8d

[15:35] *** Ven`` left
[15:35] <lizmat> jnthn: does that fix https://stackoverflow.com/questions/54088520/when-too-few-threads-program-hangs ?

[15:39] <jnthn> Doubt it

[15:39] <jnthn> I don't recall that code using a channel

[15:40] <jnthn> That fix was for a bug I golfed out of a complex $dayjob app

[15:42] <lizmat> ah, too  bad  :-)

[15:43] <jnthn> StackOverflow reputation is nice, but $dayjob puts food on the table... :-) Will see if I can reply to that one at some point though.

[15:43] <jnthn> I'm curious what's going on

[15:50] <jnthn> lizmat++ # weekly

[16:05] *** brrt left
[16:08] <|Tux|> Rakudo version 2018.12-213-g9b77459b8 - MoarVM version 2018.12-29-g1ff55bf1c

[16:08] <|Tux|> csv-test-xs-20      0.435 -  0.437

[16:08] <|Tux|> test-t --race       0.824 -  0.860

[16:08] <|Tux|> csv-ip5xs           0.929 -  0.932

[16:08] <|Tux|> test-t              1.831 -  1.910

[16:08] <|Tux|> csv-ip5xs-20        7.029 -  7.348

[16:08] <|Tux|> test                7.632 -  7.645

[16:08] <|Tux|> test-t-20 --race    9.570 -  9.664

[16:08] <|Tux|> csv-parser         22.263 - 23.366

[16:09] <|Tux|> test-t-20          29.836 - 31.242

[16:22] *** brrt joined
[16:23] *** p6bannerbot sets mode: +v brrt

[16:36] <Geth> ¦ rakudo: fe38bdba62 | (Elizabeth Mattijsen)++ | 6 files

[16:36] <Geth> ¦ rakudo: Allow parameterization of Bag/BagHash

[16:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fe38bdba62

[17:02] *** brrt left
[17:07] <AlexDaniel> lizmat++

[17:13] <Geth> ¦ rakudo: 1c101a04f9 | (Stefan Seifert)++ | 2 files

[17:13] <Geth> ¦ rakudo: Fix Inline::Perl5 failing to load when installed through the Staging repository

[17:13] <Geth> ¦ rakudo: 

[17:13] <Geth> ¦ rakudo: Marking the %quote_lang_cache as neverrepossess was not enough. It gets

[17:13] <Geth> ¦ rakudo: serialized anyway and the MVM_CF_NEVER_REPOSSESS on the object doesn't survive

[17:13] <Geth> ¦ rakudo: serialization/deserialization. This caused references to

[17:13] <Geth> ¦ rakudo: CompUnit::Repository::Staging's serialization context to end up in the installed

[17:13] <Geth> ¦ rakudo: Inline::Perl5::Parent when they shouldn't have. And That's why we ended up with

[17:13] <Geth> ¦ rakudo: <…commit message has 6 more lines…>

[17:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1c101a04f9

[17:14] <nine> Nice to get that issue off my chest :)

[17:14] <lizmat> nine++

[17:16] *** patrickb joined
[17:17] *** p6bannerbot sets mode: +v patrickb

[17:19] <nine> Maybe this would be the right time to have a look at in-process precompilation again. I got stuck on that due to some repossession issues and I didn't have the debug foo back then to get around them. Maybe I have it now :)

[17:20] <timotimo> i wonder if we can do in-process precompilation, but have it in one separate process anyway, so that memory usage from precomp won't stick around for long-running processes

[17:22] <nine> Well once we can precompile multiple comp units in the same process without running into weird dependency issues, we have all the options for tricks like that :)

[17:23] <timotimo> nice

[18:00] <patrickb> nine: Thanks for the poke. I definitely will have an eye on performance. Currently I suspect the performance penalty of the code I inserted will be minimal (it's basically looking up two environment variables and minimal string manipulation) and I'm mostly concerned about the coupling of an "external" runner script and the internals of rakudo which I'd like not to have.

[18:01] *** robertle_ left
[18:01] *** AlexDaniel left
[18:05] <patrickb> nine: There is an environment variable used in RepositoryRegistry.pm6 "RAKUDO_PREFIX" to specify the rakudo installation path. Would you object to renaming that to PERL6_HOME?

[18:06] <patrickb> It is currently documented here: https://docs.perl6.org/programs/03-environment-variables#Affecting_Precompilation

[18:18] <Geth> ¦ rakudo: bcc8054a4d | (Elizabeth Mattijsen)++ | 5 files

[18:18] <Geth> ¦ rakudo: Allow parameterization of Mix/MixHash

[18:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bcc8054a4d

[18:19] *** gfldex left
[18:45] *** AlexDaniel joined
[18:45] *** p6bannerbot sets mode: +v AlexDaniel

[18:46] *** ChanServ sets mode: +o AlexDaniel

[18:46] *** AlexDaniel sets mode: -m
 
[18:46] *** ChanServ sets mode: -o AlexDaniel

[18:47] *** remi_ness joined
[18:48] *** p6bannerbot sets mode: +v remi_ness

[18:54] *** remi_ness left
[19:00] <releasable6> Next release in ≈4 days and ≈23 hours. 6 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[19:22] *** brrt joined
[19:22] *** p6bannerbot sets mode: +v brrt

[19:25] *** remi_ness joined
[19:26] *** p6bannerbot sets mode: +v remi_ness

[20:00] <patrickb> I'm off o/

[20:01] *** patrickb left
[20:05] *** remi_ness left
[20:30] *** brrt left
[20:59] *** brrt joined
[21:00] *** p6bannerbot sets mode: +v brrt

[21:04] *** d4l3k_ joined
[21:04] *** ChanServ sets mode: +v d4l3k_

[21:05] *** p6bannerbot sets mode: +v d4l3k_

[21:11] *** d4l3k_ is now known as dalek

[21:22] *** gfldex joined
[21:23] *** p6bannerbot sets mode: +v gfldex

[21:42] *** brrt left
[22:05] <lizmat> hmmm.. looks like we lost the zofbots ?   

[22:05] <lizmat> AlexDaniel ^^

[22:05] * lizmat just committed https://github.com/rakudo/rakudo/commit/54fe8a1a8bc8332faf2402b

[22:06] <lizmat> Make X::Trait::Unknown a bit more resilient

[22:28] *** ExtraCrispy left
[23:23] <AlexDaniel> timotimo: Geth?

[23:24] <AlexDaniel> lizmat: actually, the only zofbots were buggable, huggable and ZofBot

[23:24] <AlexDaniel> the last one is not very useful to everyone else

[23:24] <AlexDaniel> huggable can be easily brought up, I'll do it next weekend maybe

[23:24] <AlexDaniel> and tyil is working on buggable

[23:24] <AlexDaniel> lizmat: what we're seeing right now is hack being down…

[23:25] <AlexDaniel> I think?

[23:26] <AlexDaniel> actually, hack is up!

[23:26] <AlexDaniel> and only Geth is down…

[23:27] *** Geth joined
[23:27] *** ChanServ sets mode: +v Geth

[23:27] <AlexDaniel> lizmat: I fixed it \o/

[23:28] * AlexDaniel followed the instructions on https://github.com/perl6/geth/

[23:28] *** p6bannerbot sets mode: +v Geth

[23:28] <AlexDaniel> ah, btw by zofbots I meant “those hosted by Zoffix”

[23:28] <AlexDaniel> of course there are more bots

[23:32] *** noname__ left
[23:38] <AlexDaniel> oooooooohh I just realized something

[23:38] <AlexDaniel> admin privileges on private repos are not a thing, apparently?

[23:38] <AlexDaniel> wrong channel :)

