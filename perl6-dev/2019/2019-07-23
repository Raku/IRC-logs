[00:10] *** lucasb left
[01:10] *** Kaiepi left
[01:14] *** Kaiepi joined
[01:19] *** Kaiepi left
[01:19] *** Kaiepi joined
[01:31] <Geth> ¦ rakudo: ZhongnianTao++ created pull request #3079: Add gb2312 to the encoding lists

[01:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3079

[02:21] *** pamplemousse_ left
[02:32] *** Kaiepi left
[02:32] *** Kaiepi joined
[03:18] <Geth> ¦ roast: ZhongnianTao++ created pull request #563: Add test for gb2312 encoding

[03:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/563

[04:46] <lizmat> Files=1268, Tests=108554, 193 wallclock secs (26.74 usr  7.82 sys + 2684.23 cusr 255.44 csys = 2974.23 CPU)

[05:52] <lizmat> m: dd :{ 42 => 666 }   # behold, an object hash

[05:52] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «:{42 => 666}␤»

[05:52] <lizmat> m: dd :{ 42, 666 }   # behold, a block ???

[05:52] <camelia> rakudo-moar ecf2b1e4f: OUTPUT: «-> ;; $_? is raw { #`(Block|58607360) ... }␤»

[05:53] <lizmat> bisectable6: dd :{ 42, 666 }

[05:53] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=60cfbb3) because on both starting points the exit code is 0

[05:53] <bisectable6> lizmat, bisect log: https://gist.github.com/a5fcda2d7bdf0e43dbd3810f2d4d0f2d

[05:53] <bisectable6> lizmat, (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb52eb1fd07397659f19a5cf36dc61f84053

[05:53] <bisectable6> lizmat, The result looks a bit unrealistic, doesn't it? Most probably the output is different on every commit (e.g. ｢bisect: say rand｣)

[05:54] <lizmat> yeah, so it's always been a block

[05:55] <lizmat> ah, this is even mentioned in the doc: "Note: Rakudo implementation currently erroneously applies the same rules for :{ } as it does for { } and can construct a Block in certain circumstances."

[05:59] *** |Tux| left
[06:09] <[Tux]> Rakudo version 2019.07-86-g60cfbb39e - MoarVM version 2019.07-28-gd605648fe

[06:09] <[Tux]> csv-test-xs-20      0.431 -  0.442

[06:09] <[Tux]> csv-ip5xs           0.702 -  0.705

[06:09] <[Tux]> test-t --race       0.813 -  0.877

[06:09] <[Tux]> test-t              1.710 -  1.723

[06:09] <[Tux]> csv-ip5xs-20        5.165 -  5.317

[06:09] <[Tux]> test                6.881 -  6.950

[06:09] <[Tux]> test-t-20 --race    9.132 -  9.311

[06:09] <[Tux]> csv-parser         21.284 - 22.726

[06:09] <[Tux]> test-t-20          28.720 - 29.285

[06:19] *** |Tux| joined
[06:37] *** squashable6 left
[06:40] *** squashable6 joined
[06:40] *** ChanServ sets mode: +v squashable6

[07:15] *** patrickb joined
[07:24] *** mst left
[07:24] *** mst joined
[07:24] *** mst left
[07:24] *** mst joined
[07:37] *** b2gills left
[07:38] *** b2gills joined
[08:32] <AlexDaniel> I feel so weird about deepmap, nodemap, duckmap

[08:33] <AlexDaniel> I read the docs, totally makes sense. They Look like very useful features

[08:33] <AlexDaniel> but then

[08:34] <AlexDaniel> greppable6: deepmap

[08:34] <greppable6> AlexDaniel, 72 lines, 8 modules: https://gist.github.com/dc8dc3763646666fd70cad09e8f22671

[08:34] <AlexDaniel> greppable6: nodemap

[08:34] <greppable6> AlexDaniel, 12 lines, 1 module: https://gist.github.com/99151d0c9c84a97a2e5d8d886fa580cb

[08:34] <AlexDaniel> greppable6: duckmap

[08:34] <greppable6> AlexDaniel, 16 lines, 2 modules: https://gist.github.com/6f6ecd173efb2d5dd7c7b6dc9f65ed2c

[08:34] <AlexDaniel> one of the “modules” is the doc repo itself

[08:34] <AlexDaniel> so we have not a single module using nodemap, one module using duckmap

[08:34] <AlexDaniel> deepmap is probably fine

[09:24] <jnthn> Yeah, I've got a load of use of deepmap in $dayjob codebase also

[09:25] <jnthn> duckmap always feels a bit too swallowy to me

[09:25] <jnthn> Though I can imagine using it in some cases

[09:43] * masak had completely missed those

[09:44] <masak> probably more a statement of my attention (or lack thereof) of recent features, than of the features themselves :)

[10:09] <AlexDaniel> “recent” features? :)

[10:10] <AlexDaniel> c: 2014.01 <a b c d e f g>.duckmap(-> $_ where <c d e>.any { .uc }).say;

[10:10] <committable6> AlexDaniel, ¦2014.01: «Cannot find method 'duckmap'␤  in block  at /tmp/8d6S5VAYPr:1␤␤ «exit code = 1»»

[10:10] <AlexDaniel> c: all <a b c d e f g>.duckmap(-> $_ where <c d e>.any { .uc }).say;

[10:11] *** |Tux| left
[10:12] <jnthn> Wll, if you've been following Perl 6 for the better part of 2 decades, then relatively... ;)

[10:13] * AlexDaniel slaps committable

[10:13] *** reportable6 left
[10:13] *** shareable6 left
[10:13] *** greppable6 left
[10:13] *** committable6 left
[10:14] *** bisectable6 left
[10:14] *** quotable6 left
[10:14] *** evalable6 left
[10:14] *** shareable6 joined
[10:14] *** ChanServ sets mode: +v shareable6

[10:14] *** committable6 joined
[10:14] *** ChanServ sets mode: +v committable6

[10:14] *** bisectable6 joined
[10:15] <AlexDaniel> c: all <a b c d e f g>.duckmap(-> $_ where <c d e>.any { .uc }).say;

[10:17] *** greppable6 joined
[10:17] *** quotable6 joined
[10:17] *** evalable6 joined
[10:18] *** |Tux| joined
[10:18] *** reportable6 joined
[10:20] <committable6> AlexDaniel, https://gist.github.com/ad4ef87725bf43e9f9847760b2eb825e

[10:21] <AlexDaniel> O_o

[10:22] <AlexDaniel> this one is indeed very recent

[10:22] <AlexDaniel> c: all say [[1,2,3], [[4,5],6,7], 7].nodemap(*+1);

[10:23] <committable6> AlexDaniel, https://gist.github.com/6e4c32cc232ec9ac99d82d976f04e4ac

[13:21] *** lucasb joined
[13:28] *** pamplemousse joined
[13:56] *** hankache joined
[13:56] *** pamplemousse left
[13:57] <hankache> Hello #perl6-dev

[14:01] <hankache> .tell kawaii regarding the Rakudo Star release we'll start as soon 2019.07.1 is released

[14:01] <yoleaux> hankache: I'll pass your message to kawaii.

[14:08] *** robertle joined
[14:14] *** hankache left
[15:17] *** robertle left
[15:32] *** patrickb left
[15:33] *** hankache joined
[15:34] *** hankache left
[16:03] <ugexe> loop { say ++$; run("xxx", :err).err.slurp(:close); run("xxx", :err).err.slurp(:close); }

[16:03] <ugexe> why does that deadlock at 32

[16:04] <timotimo> hm, if there's no :in, you don't have to .close-stdin?

[16:04] <timotimo> but 32 sounds like that's the default thread pool size limit

[16:05] *** robertle joined
[16:05] <timotimo> try the thread pool scheduler debug env var maybe

[16:10] <ugexe> it doesn't do anything beyond setting up the initial general worker thread

[16:12] <ugexe> it wont deadlock if the command exists fwiw

[16:14] <ugexe> a non-zero exitcode is fine. the command must not exist afaict

[16:16] <dogbert17> ugexe: perhaps a spesh problem

[16:18] <ugexe> if I add `:out` / `$proc.out.close` then it immediately throws an exception

[16:18] <ugexe> The spawned command 'xxx' exited unsuccessfully (exit code: 1)

[16:19] <ugexe> it seems like the same should happen when accessing .err

[16:27] *** AlexDaniel left
[17:08] *** chloekek joined
[17:15] *** pamplemousse joined
[18:10] <Voldenet> the real question is "why does loop { say ++$; my $r = run("xxx"); }" deadlock after a while

[18:14] <Voldenet> …while this works flawlessly: loop { say ++$; await Proc::Async.new("xxx").start.then({$}); }

[18:19] <ugexe> because has syncronization and one does not

[18:20] <ugexe> since the former is built using the later

[18:34] <Voldenet> Oh, that makes sense

[18:37] <ugexe> so its something like a command that doesn't exist can finish faster than a normal command, and this occurs before all the setup can occur

[18:38] <ugexe> and it gets stuck awaiting X promises (and doesn't add more threads to compensate?)

[18:50] <Voldenet> > MoarVM panic: Internal error: Unwound entire stack and missed handler

[18:50] <Voldenet> that's a cooler error

[18:54] <ugexe> that just randomly pops up too?

[18:55] <Voldenet> my $is-spawned = await $!proc.ready.then({ if .status ~~ Broken { self!set-status(0x100); return False; }; $!pid = .result; return True; });

[18:55] <Voldenet> I know, return there is wrong and this isn't js ¯\_(ツ)_/¯ 

[18:55] <ugexe> how does self!set-status not throwing an error? is there more to this?

[18:57] <Voldenet> I've just replaced the relevant line in Proc.pm6

[18:57] <ugexe> ah thats code from Proc.pm6, i see

[18:59] <ugexe> im guessing that error is because you removed the CATCH { } handler

[18:59] <ugexe> (although that much is obvious)

[19:00] <ugexe> i dont think .ready means the .status is ready though

[19:07] <Voldenet> > my $is-spawned = await $!proc.ready.then({ if .status ~~ Broken { self!set-status(0x100); False } else { $!pid = .result; True } });

[19:08] <Voldenet> this seems to work correctly, sets the proper is-spawned result in this case, but I'm not sure if there are other cases

[19:24] <Voldenet> btw, .then is invoked after invocant is kept or broken

[19:25] <Voldenet> and ready is a promise created with Proc::Async, so i'm pretty convinced that this should work

[19:25] <ugexe> yea, but does .ready mean anything more than ready to start the process?

[19:26] <Voldenet> ready means that vow containing PID was resolved

[19:27] <ugexe> sounds like it doesn't mean the process is finished then

[19:29] <Voldenet> Ah, yes, it's only a replacement for this is-spawned block

[19:29] <Voldenet> wait-for-finish is still in spawn-internal

[19:31] <Voldenet> https://github.com/rakudo/rakudo/blob/925c1134336687f580474bfe197329ca03365ec9/src/core/Proc.pm6#L179

[19:34] <ugexe> you think thats where the threads are getting blocked?

[19:35] <Voldenet> Yes, I've tested it and `await $!proc.ready` is where the problem is

[19:36] <ugexe> so something about await $!proc.ready + non-existant command

[19:37] <ugexe> still seems weird it doesn't happen for any non-zero exit though

[19:38] <Voldenet> > $!pid = await $!proc.ready.then({$});

[19:39] <Voldenet> well, this just ignores the problem, I'm guessing it's some problem with the promise

[19:42] <Voldenet> Whoa, you don't even need a process promise to cause a deadlock there

[19:43] <Voldenet> any broken promise works

[19:49] <samcv> i'm working on updating unicode from 11.0 to 12.1 for MoarVM

[20:00] <Geth> ¦ nqp: 9d7d90aa52 | (Patrick Böker)++ | tools/templates/windows/nqp-m-build.c

[20:00] <Geth> ¦ nqp: Fix return code of nqp build runner

[20:00] <Geth> ¦ nqp: 

[20:00] <Geth> ¦ nqp: Don't use `exec()` as that's broken on Windows. Directly use

[20:00] <Geth> ¦ nqp: `CreateProcess()`, wait for it to finish, retrieve the exit code and

[20:00] <Geth> ¦ nqp: exit with that ourselves.

[20:00] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/9d7d90aa52

[20:00] <Geth> ¦ nqp: c0f3ab3d77 | (Patrick Böker)++ | tools/templates/moar/Makefile.in

[20:00] <Geth> ¦ nqp: Link build runners with correct flags

[20:00] <Geth> ¦ nqp: 

[20:00] <Geth> ¦ nqp: Forgot to include them as given.

[20:00] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c0f3ab3d77

[20:00] <Geth> ¦ nqp: fde335ddf6 | (Patrick Böker)++ (committed using GitHub Web editor) | 2 files

[20:00] <Geth> ¦ nqp: Merge pull request #566 from patzim/fix-windows-build-runner

[20:00] <Geth> ¦ nqp: 

[20:00] <Geth> ¦ nqp: Fix return code of nqp build runner + A little makefile cleanup

[20:00] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/fde335ddf6

[20:03] <Geth> ¦ rakudo/master: 4 commits pushed by (Patrick Böker)++

[20:03] <Geth> ¦ rakudo/master: ceb457e12f | Fix return code of perl6 build runners

[20:03] <Geth> ¦ rakudo/master: 12d9e34a65 | Link build runner with correct flags

[20:03] <Geth> ¦ rakudo/master: 165f3fbfbc | Perl6 is now an .exe file on windows

[20:03] <Geth> ¦ rakudo/master: ee584d2999 | Merge pull request #3078 from patzim/fix-windows-build-runner

[20:03] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/60cfbb39e967...ee584d299924

[20:09] <Voldenet> ugexe: I've reduced that problem into something more apparent

[20:09] <Voldenet> loop { say ++$; do { CATCH { default { } }; await Promise.broken(":("); }; }

[20:10] <Voldenet> I don't think that code is supposed to deadlock

[20:33] *** pamplemousse left
[20:51] <Voldenet> more reduced case: loop { say ++$; CATCH { default { } }; { CATCH { }; X::AdHoc.new(payload => ":(").rethrow; }}

[20:51] <ugexe> it took me a minute to realize :( was a frown face and not part of :(")

[20:53] <ugexe> nice work

[20:59] <Voldenet> use nqp; loop { say ++$; CATCH { default { } }; { CATCH { }; my $ex := nqp::newexception(); try nqp::setmessage($ex, "test"); nqp::rethrow($ex) }}

[21:12] *** chloekek left
[21:20] *** robertle left
[22:43] *** pamplemousse joined
[23:15] <ugexe> Voldenet: https://github.com/rakudo/rakudo/issues/3080

[23:42] *** pamplemousse left
[23:43] *** pamplemousse joined
