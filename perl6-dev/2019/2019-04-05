[00:06] *** Kaiepi left
[00:12] *** Kaiepi joined
[00:44] *** lucasb left
[00:48] *** MasterDuke joined
[00:48] *** MasterDuke left
[00:48] *** MasterDuke joined
[01:16] <AlexDaniel> hmmm… relatively soon we'll have more tickets on github than on RT

[01:17] <AlexDaniel> 800 vs 1429, more than half way there

[06:22] <Geth> ¦ roast: aaf7ad02fc | usev6++ | 6 files

[06:22] <Geth> ¦ roast: [JVM] Unfudge some passing tests

[06:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/aaf7ad02fc

[06:31] *** tyil[m] left
[06:31] *** AlexDaniel` left
[06:42] *** AlexDaniel` joined
[07:12] *** tyil[m] joined
[07:51] <masak> AlexDaniel: I was always resistant to transfer off of RT, but I'm glad the shift to Github is happening

[07:57] <masak> gone forever are the days, apparently, when I found on average one bug a day and submitted it to RT... :>

[08:09] <timotimo> "Unquoted string "gggijgziifiiffif" may clash with future reserved word at - line 1.)

[08:09] <timotimo> do we want to introduce gggijgziifiiffif as a sub or term in perl6 just as a joke reference to this paper?

[08:10] <timotimo> https://docs.google.com/document/d/1ZGGNMfmfpWB-DzWS3Jr-YLcRNRjhp3FKS6v0KELxXK8/preview - this is the paper, if you hadn't seen it yet

[08:15] <|Tux|> Rakudo version 2019.03.1-149-g7b4dd3006 - MoarVM version 2019.03-65-g5f7065155

[08:15] <|Tux|> csv-test-xs-20      0.426 -  0.439

[08:15] <|Tux|> csv-ip5xs           0.717 -  0.773

[08:15] <|Tux|> test-t --race       1.007 -  1.015

[08:15] <|Tux|> test-t              1.849 -  1.897

[08:15] <|Tux|> csv-ip5xs-20        6.331 -  6.436

[08:15] <|Tux|> test                7.029 -  7.056

[08:15] <|Tux|> test-t-20 --race   10.315 - 10.551

[08:15] <|Tux|> csv-parser         21.002 - 21.121

[08:15] <|Tux|> test-t-20          30.932 - 31.743

[08:17] *** robertle_ joined
[09:53] *** tyil[m] left
[09:56] *** AlexDaniel` left
[10:03] *** AlexDaniel` joined
[10:30] *** tyil[m] joined
[10:46] <lizmat> m: my %h; %h.push("a"|"b", "a"); dd %h

[10:46] <evalable6> lizmat, rakudo-moar 7b4dd3006: OUTPUT: «(exit code 1) Type check failed in binding to parameter '&call'; expected Callable but got Method+{is-nodal} (Method+{is-nodal}.new)␤  in block <unit> at /tmp/yd3GStFFQj line 1␤␤»

[10:46] <lizmat> bisectable6: my %h; %h.push("a"|"b", "a")

[10:46] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=7b4dd30) because on both starting points the exit code is 1

[10:46] <lizmat> ok, since forever then

[10:46] <bisectable6> lizmat, bisect log: https://gist.github.com/923c2a2f04dce12d6f8f8220d0e66f67

[10:46] <bisectable6> lizmat, (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb52eb1fd07397659f19a5cf36dc61f84053

[10:46] <bisectable6> lizmat, The result looks a bit unrealistic, doesn't it? Most probably the output is different on every commit (e.g. ｢bisect: say rand｣)

[10:47] <lizmat> bisectable6: or no output at all ?

[10:47] <bisectable6> lizmat, On both starting points (old=2015.12 new=7b4dd30) the exit code is 1 and the output is identical as well

[10:47] <bisectable6> lizmat, https://gist.github.com/f6dac05f9e577112732fff2200c1dcd9

[10:47] <lizmat> :-)

[11:40] *** vrurg left
[12:20] *** pmurias joined
[12:20] <pmurias> we don't want to use the deprecated IO::Path.child method in roast unless we are testing it specifically?

[13:08] <jnthn> Interesting, just did my first Moar/NQP/Rakudo build in a while and make test is 100% fail...

[13:09] * jnthn tries a `make realclean` and fresh build, just in case

[13:09] *** robertle_ left
[13:10] *** ufobat_ joined
[13:11] <jnthn> Hmm, probably something to do with this:

[13:11] <jnthn> $ ./perl6-m

[13:11] <jnthn> Unhandled exception: Missing or wrong version of dependency 'gen/moar/stage2/QAST.nqp' (from 'src/Perl6/Pod.nqp')

[13:14] *** ufobat__ left
[13:15] *** vrurg joined
[13:16] <jnthn> huh, ok, after `make install` then `make test` starts to work.

[13:17] <jnthn> Did we somehow regress being able to run `make test` before installing? That'd be bad.

[13:19] <lizmat> well, there's been another "regression": make spectest will not test Inline::Perl5

[13:19] <lizmat> probably because it does *not* use the installed version?

[13:20] <jnthn> make spectest should not use installed versions either, I don't think

[13:20] <jnthn> Both should build the version that's just been built

[13:20] <jnthn> *should use

[13:21] <lizmat> then what use are the Inline::Perl5 integration tests?  A fresh rakudo would never have that installed, no ?

[13:22] <jnthn> Modules aren't installed per Rakudo version, though, which is why you don't lose all your modules when you upgrade your Rakudo?

[13:23] <jnthn> Trouble is that when doing a lot of the trickier low-level changes, I'll quite often break stuff to the degree that `make install` is simply not going to be possible. If it's not possible to run the sanity tests, or even ./perl6-m -e '...' to work out what's wrong, then it's going to be impossible to do such work.

[13:24] * lizmat makes an issue for Inline::Perl5

[13:27] *** Guest16965 joined
[13:53] <ugexe> Windows appveyor does nmake test before nmake install 

[13:56] <ugexe> same with circleci https://github.com/rakudo/rakudo/blob/7b4dd30060229076835fdef63bc655c995ff91c7/.circleci/config.yml#L40-L42

[13:56] <ugexe> (thats a flake failure fwiw)

[14:07] *** lucasb joined
[14:31] *** squashable6 left
[14:33] *** squashable6 joined
[14:33] *** ChanServ sets mode: +v squashable6

[14:55] *** pmurias left
[15:11] *** pmurias joined
[15:18] <ugexe> m: say ([1,2],2,3).values

[15:18] <evalable6> ugexe, rakudo-moar 7b4dd3006: OUTPUT: «([1 2] 2 3)␤»

[15:18] <ugexe> m: say ([1,2],2,3).any.values

[15:18] <evalable6> ugexe, rakudo-moar 7b4dd3006: OUTPUT: «any((1 2), (2), (3))␤»

[15:23] <b2gills> jnthn: I think it was the relocatable executable merge that made it so that `make test` doesn't work until after a `make install`

[15:28] <ugexe> make test works before a make install -- see the links above

[15:47] *** pmurias left
[16:03] *** jdv79 left
[16:10] <Geth> ¦ rakudo: d5044de2f7 | (Jonathan Worthington)++ | src/core/Channel.pm6

[16:10] <Geth> ¦ rakudo: Avoid notification queue growth in Channel.Supply

[16:10] <Geth> ¦ rakudo: 

[16:10] <Geth> ¦ rakudo: If the code that `tap`s the Supply then does a `send` on the Channel,

[16:10] <Geth> ¦ rakudo: then that will happen synchronously with the loop pulling from the

[16:10] <Geth> ¦ rakudo: Channel. The result is that the loop never ends. However, to avoid

[16:10] <Geth> ¦ rakudo: races in other situations, we subscribe to the async notifications of

[16:10] <Geth> ¦ rakudo: new items in the Channel before starting that loop. Since we cannot

[16:10] <Geth> ¦ rakudo: process any `whenever` events until setup logic is complete, this will

[16:10] <Geth> ¦ rakudo: cause those events to queue up, causing memory growth.

[16:10] <Geth> ¦ rakudo: 

[16:10] <Geth> ¦ rakudo: This helps with #2803.

[16:10] <synopsebot_> RAKUDO#2803 [open]: https://github.com/rakudo/rakudo/issues/2803 [leak] Memory growth in Channel usage

[16:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d5044de2f7

[16:13] *** Kaiepi left
[16:13] *** Kaiepi joined
[16:46] *** jdv79 joined
[16:53] *** vrurg left
[16:57] *** vrurg joined
[16:59] <AlexDaniel> m: say ‘Life, the Universe and Everything’.WHY

[16:59] <evalable6> AlexDaniel, rakudo-moar d5044de2f: OUTPUT: «42␤»

[16:59] <AlexDaniel> timotimo: we already have this, so…

[17:04] <ugexe> it would be nice if that only happened on string literal

[17:04] <ugexe> e.g. never triggered by my $foo = prompt; say $foo.WHY

[17:12] <lucasb> IMO ‘Life, the Universe and Everything’.WHY was fun in the past, but maybe it shouldn't be that ingrained in the language

[17:13] <lucasb> Python's "import this" is a external module, for example :)

[17:15] <lucasb> https://github.com/vim/vim/blob/master/runtime/doc/index.txt#L1117 

[17:50] *** Kaiepi left
[17:51] *** Kaiepi joined
[17:52] *** Kaiepi left
[17:53] *** Kaiepi joined
[18:02] <Kaiepi> why do nqp::setobjsc and nqp::scsetobj get called when enums, subsets, etc. are created? are there docs somewhere on what they do?

[18:26] <moritz> Kaiepi: just guessing, assigning the object's serialization context?

[18:27] <Kaiepi> yeah i looked through moarvm's code and that's what it does but i don't know what the serialization context is or is used for

[18:29] <moritz> I've opened https://github.com/perl6/nqp/issues/527

[18:36] <Kaiepi> same with the rest of the sc ops

[18:37] <ugexe> have you read https://edumentab.github.io/rakudo-and-nqp-internals-course/slides-day2.pdf ?

[18:52] <Kaiepi> i didn't know there was a part two

[18:58] <Kaiepi> >The word HOW is often used in connection with meta-objects. By convention, the meta-object for the keyword class will have a name like ClassHOW. It’s not strictly followed, even in Rakudo and NQP. But all of the meta-objects for types do end in HOW.

[18:59] <Kaiepi> does that mean i should rename my sum type package from Type::Sum to Metamodel::SumHOW?

[18:59] <Kaiepi> or something along those lines

[19:30] *** epony joined
[19:48] *** vrurg left
[19:49] *** vrurg joined
[19:59] *** pmurias joined
[20:20] <MasterDuke> pmurias: i think building the js backend doesn't respect a --prefix

[20:21] <Geth> ¦ star: 139ba6333a | (Mike Clarke)++ | tools/star/mac-dmg.pod

[20:21] <Geth> ¦ star: Add SHASUM and GPG sig steps to DMG instructions

[20:21] <Geth> ¦ star: review: https://github.com/rakudo/star/commit/139ba6333a

[21:10] *** releasable6 left
[21:14] *** releasable6 joined
[21:56] *** Kaypie joined
[21:58] *** tobs` joined
[22:00] *** samcv_ joined
[22:00] *** pmurias_ joined
[22:01] *** samcv left
[22:01] *** [Tux] left
[22:01] *** Ulti_ joined
[22:01] *** pmurias left
[22:01] *** gugod left
[22:01] *** Ulti left
[22:01] *** Kaiepi left
[22:01] *** tobs left
[22:01] *** tobs` is now known as tobs

[22:01] *** gugod1 joined
[22:01] *** [Tux] joined
[22:05] <Geth> ¦ rakudo: vrurg++ created pull request #2816: Revamp of Configure.pl

[22:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2816

[22:36] <AlexDaniel> releasable6: status

[22:36] <releasable6> AlexDaniel, Next release in ≈14 days and ≈20 hours. 10 blockers. 0 out of 150 commits logged

[22:36] <releasable6> AlexDaniel, Details: https://gist.github.com/220aa0a9cc300b85c4b47e9ffc25b0d2

[22:43] <vrurg> AlexDaniel: you were asking me about the reason to change Configure.pl. It's all explained in the PR above.

[22:44] <AlexDaniel> vrurg: yes, yes, very nice

[22:44] <vrurg> Sorry, don't mean to bother you. Just felt uncomfortable leaving your question with no answer. :)

[22:49] <AlexDaniel> vrurg: we have to figure out who's going to review your PR though… otherwise it might end up with the rest of unmerged work

[22:49] <jnthn> On configure stuff, my reaction tends to be "omg, somebody who wants to work on configure stuff, merge it!" :P

[22:50] <AlexDaniel> that's true

[22:50] <AlexDaniel> but maybe patrickb?

[22:50] <vrurg> jnthn: "wants" is a big overestimation. I hate wasting time. Just less than I hate handwork... 

[22:50] <jnthn> Yes, that makes sense. :)

[22:52] <jnthn> I need to try and figure out what my early problems with `make test` were about too (they went away after my first `make install`, but now I worry whether it somehow is using an installed thing when it should use a non-installed one...)

[22:52] <jnthn> Was glad to finally have time for some leak hunting. Had a number of work "surprises", and then promptly got sick when they were all sorted out.

[22:54] <AlexDaniel> vrurg: pinged some people, if nobody responds just tell us when to merge it :)

[22:55] <vrurg> AlexDaniel: I would need patrickb and pmurias_ help anyway. JS doesn't build and windows is not tested.

[22:55] <jnthn> AlexDaniel++

[22:55] <vrurg> Though I work a windows VM now.

[22:58] * vrurg apologizes for mistakes. Quick typing...

[23:02] <AlexDaniel> jnthn: that ticket went wrong right from the start… :)

[23:02] <MasterDuke> speaking of PRs that need eyes on... https://github.com/perl6/nqp/pull/518 and https://github.com/rakudo/rakudo/pull/2670

[23:03] <AlexDaniel> jnthn: (problem-solving#6)

[23:03] <jnthn> AlexDaniel: #6?

[23:03] <jnthn> Ah

[23:03] <jnthn> Well, yeah, but let's see what useful, if anything, we can get out of it.

[23:04] <jnthn> I think I'm surprised at the proposed semantics of :produce; I expected them to be about the values per classification, not the classifications themselves

[23:04] <jnthn> Will probably write something on that tomorrow when I can figure out good words for what I mean :)

[23:05] <AlexDaniel> well, one thing is that we should probably take a chunk of the README and put it into CONTRIBUTING.md

[23:05] <AlexDaniel> this way when you are about to submit a ticket it'll show up in “Helpful resources”

[23:05] <jnthn> Well, maybe we should have some minimal issue template

[23:06] <AlexDaniel> or that, yes

[23:06] <jnthn> I think for now we can keep the thing quite freeform, but at least a comment in there with a hint or two

[23:07] <jnthn> (And maybe we'll always want to keep it quite freeform)

[23:09] <AlexDaniel> MasterDuke: so, what exactly are we supposed to do with it? :)

[23:10] <MasterDuke> see if the changes look sensible, and sufficient

[23:11] <AlexDaniel> MasterDuke: why is this one reversed? https://github.com/rakudo/rakudo/pull/2670/files#diff-deae5f68054ef8116f04d6cb78bc4395L11137

[23:12] <ugexe> what is the justification for classify's `into` parameter?

[23:12] <MasterDuke> they were incorrect previously. and `$*INTERPOLATION` was the wrong name (i.e., it didn't exist anywhere else, but `$*INTERPOLATE` does)

[23:13] <ugexe> `@years.classify( *.is-leap-year , into => my %leap-years );` vs `my %leap-years = @years.classify( *.is-leap-year );`

[23:14] <MasterDuke> ugexe: the first one seems to remind me of clojure

[23:17] <AlexDaniel> https://github.com/rakudo/rakudo/commit/656c8cb8b9b7eac69869cdbbac7c435e58661169

[23:18] <AlexDaniel> oddball way of doing it, instead of having a method on Hash…

[23:19] <AlexDaniel> also the *-list variants are kinda weird

[23:19] <ugexe> pretty fragile too, since it expects a hash of a specific shape

[23:19] <ugexe> if i give it a deeply nested hash, how can it know how to properly add the classified elements to certain fields?

[23:20] <AlexDaniel> IMO it's a good idea to rethink the whole situation with categorize/classify

[23:20] <AlexDaniel> there's probably a more straightforward way of doing things

[23:22] <jnthn> I think they're useful, but I'd be wary about piling too many more options atop of them

[23:22] <jnthn> And yes, there may be semantic refinements that we want too

[23:23] <ugexe> i use the hell out of classify fwiw

[23:23] <ugexe> my (:@local, :@remote) := @candidates.classify: {.dist ~~ Zef::Distribution::Local ?? <local> !! <remote>}

[23:23] <ugexe> building up chains of things like the above

[23:23] <jnthn> Yeah, it's really neat with such binding

[23:24] <jnthn> I guess the argument for reduce is that it turns an O(n) memory into an O(1) memory

[23:25] *** AlexDaniel left
[23:28] *** ExtraCrispy left
[23:29] *** AlexDaniel joined
[23:32] <AlexDaniel> I needed classify like once or twice, and I was really confused by the docs and everything. Do I need classify? Do I need categorize? Do I need the *-list form?

[23:32] <AlexDaniel> maybe I'm just dense :)

[23:32] <ugexe> categorize is like classify but things can go into multiple keys

[23:33] <ugexe> although i admit if the naming was reversed i wouldnt bat an eye

[23:33] <ugexe> i just know the naming at this point

[23:35] <MasterDuke> i've used at least one, maybe both, but have to look up which is which and how it's used every time

[23:35] <AlexDaniel> maybe if you use classify/categorize every day then it's perfectly readable, but even though that code above looks neat, I have no idea what it does. I'd need to open the docs to figure out…

[23:36] <AlexDaniel> although, ok, maybe thinking a bit more about it makes it clearer :)

[23:37] <MasterDuke> i do find that example pretty readable

[23:38] <AlexDaniel> .oO( time to get a carbon dioxide meter )

[23:45] <AlexDaniel> MasterDuke: so “int” as in native integers, right? Not bigints?

[23:46] <jnthn> Needing to look up and check what something does isn't automatically an argument against it; that might still be quicker than figuring out what a bunch of code achieving the same effect does. :)

[23:47] <MasterDuke> AlexDaniel: yep

[23:47] <AlexDaniel> MasterDuke: I'm just thinking… I've filed many tickets where sticking really big numbers into things resulted in relatively shitty behaviors, I wonder if now we will see wrapping around in such places instead of Infs and imprecision

[23:48] <MasterDuke> jnthn: true, but i do think the docs for them need to be very clear and have some good descriminating examples

[23:48] <jnthn> MasterDuke: Yes, no arguemnt there :)

[23:49] <MasterDuke> AlexDaniel: maybe

[23:49] <ugexe> let give .tree some exotic parameters

[23:50] <AlexDaniel> kawaii: ↑ “maybe”, the very thing you'd love to hear as a release manager :D

[23:50] <MasterDuke> AlexDaniel: those branches do pass a spectest, but i didn't run blin

[23:50] <AlexDaniel> I don't think Blin understands branches

[23:51] <AlexDaniel> the same way whateverable doesn't

[23:51] <AlexDaniel> MasterDuke: but that is irrelevant, no one is sticking 999999999999 in weird places normally

[23:51] <MasterDuke> but they might in tests...

[23:52] <AlexDaniel> so spectest can be green, the ecosystem can be fine, and then you'd have an actual web service somewhere where you could put a huge number and it'll wrap around…

[23:52] <MasterDuke> greppable6: 9..5***

[23:52] <greppable6> MasterDuke, Sorry, can't do that

[23:52] <AlexDaniel> greppable6: 99999

[23:52] <greppable6> AlexDaniel, 201 lines, 44 modules: https://gist.github.com/ef166874cf783240068de9ce1f439525

[23:53] <AlexDaniel> that's not big enough

[23:53] <AlexDaniel> greppable6: 999999999999999999

[23:53] <greppable6> AlexDaniel, 20 lines, 4 modules: https://gist.github.com/f2c8df49505d5165c25c4a1ba0acd35e

[23:53] <ugexe> you assume everyone is testing via 9 repeating

[23:54] <AlexDaniel> ugexe: yeah, not a good way to find out

[23:54] <ugexe> and not 1 and a bunch of 0 repeating

[23:54] <AlexDaniel> greppable6: \d{15}

[23:55] <greppable6> AlexDaniel, No! It wasn't me! It was the one-armed man! Backtrace: https://gist.github.com/e620f4f6bb1055d2e3816b52216bce33

[23:56] <ugexe> \d ** 15

[23:56] <ugexe> or is it not perl6?

[23:56] <AlexDaniel> I think greppable6 is a perl5 regex

[23:57] <AlexDaniel> greppable6: [0-9]{15}

[23:57] <greppable6> AlexDaniel, No! It wasn't me! It was the one-armed man! Backtrace: https://gist.github.com/1f0fb352a42f2f0caebe3c4b57c0a807

[23:57] <AlexDaniel> don't know what's wrong…

[23:58] <AlexDaniel> I think it matched some weird line in the ecosystem

[23:58] <ugexe> greppable6: [0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]

[23:58] <greppable6> ugexe, No! It wasn't me! It was the one-armed man! Backtrace: https://gist.github.com/57dfd92ae05ea75539f876b134d55918

[23:58] <AlexDaniel> one sec…

[23:59] <jnthn> sleep; 'night

[23:59] *** greppable6 left
