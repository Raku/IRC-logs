[00:30] <vrurg> 2019.03 doesn't build on macOS with MacPorts.

[00:41] <vrurg> Ok, found it's moar, found the README. Bailing out because of "wong" make?? Seriously???

[00:41] * vrurg is furios

[00:48] <vrurg> s/wong/wrong/

[00:51] <timotimo> vrurg, you mean ports vs xcode?

[00:52] <timotimo> perhaps the detection of that pathological situation is a bit too sensitive

[00:52] <timotimo> but bailing out early is much preferable to getting the other failure mode

[00:52] <vrurg> aha. MacPorts installs gnu make as a dependency. This is normal. XCode uses GNU make too. What was the point of checking for make in Configure.pl?

[00:52] <timotimo> which is a message that is just wrong and completely misleading

[00:54] <vrurg> I'm thinking to patch it. Maybe with a hack to use /usr/bin/make if cc is found in that location.

[00:54] <timotimo> https://github.com/MoarVM/MoarVM/pull/1055

[00:54] <timotimo> check the pr

[00:54] <vrurg> And anyway I totally agree to the need of validating ar/ld/cc for consistency.

[00:55] <vrurg> timotimo: thank! I found the commit, it's self-explanatory.

[00:56] <timotimo> ok, if checking make doesn't make sense, a patch would be welcome, perhaps even a short comment I. the file

[00:56] <timotimo> for now I will go to bed and may not be able to do anything all day tomorrow

[00:56] <timotimo> if I'm not reacting to your patch, it's not you, it's me ;)

[00:57] <vrurg> timotimo: no problem. Thanks! :)

[01:42] <AlexDaniel> vrurg: um, sorry, so is it a new issue?

[01:42] <AlexDaniel> or was it just a problem with your setup?

[01:42] * AlexDaniel is confused

[01:43] <vrurg> AlexDaniel: it's a new one. Arises from a good intention to prevent a mixture of XCode and gnu tools.

[01:43] <AlexDaniel> hmm

[01:43] <vrurg> timotimo pointed to the pull request which introduced it. I'm trying to figure out a better way to achieve the goal.

[01:44] <vrurg> Basically, it's either about ignoring make which from another toolchain or about enforcing the right one. 

[01:45] <vrurg> Though I would probably combine both and make rakudo and moar rely on /usr/bin/make if /usr/bin/cc or clang is used.

[01:54] *** lgtaube left
[01:55] *** lgtaube joined
[02:44] <Geth> ¬¶ rakudo: vrurg++ created pull request #2750: Follow up to PR MoarVM/MoarVM#1067

[02:44] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/2750

[03:45] <vrurg> bisectable6: multi f(Str) { say "Str" }; multi f(Int) { say "Int" }; &f.candidates[1].wrap( sub (|) { note "Wrapper"; callsame } ); f(42); CATCH { when X::AdHoc { exit 0 } }

[03:45] <bisectable6> vrurg, On both starting points (old=2015.12 new=70d61b2) the exit code is 0 and the output is identical as well

[03:45] <bisectable6> vrurg, Output on both points: ¬´¬ª

[03:45] <vrurg> bisectable6: help

[03:45] <bisectable6> vrurg, Like this: bisectable6: old=2015.12 new=HEAD exit 1 if (^‚àû).grep({ last })[5] // 0 == 4 # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Bisectable

[03:50] <vrurg> bisectable6: good=2018.12 bad=2019.03 multi f(Str) { say "Str" }; multi f(Int) { say "Int" }; &f.candidates[1].wrap( sub (|) { note "Wrapper"; callsame } ); f(42); CATCH { when X::AdHoc { say "ok"; exit 0 } }

[03:50] <bisectable6> vrurg, On both starting points (old=2018.12 new=2019.03) the exit code is 0 and the output is identical as well

[03:50] <bisectable6> vrurg, Output on both points: ¬´ok‚ê§¬ª

[03:51] <vrurg> bisectable6: good=2018.12 bad=70d61b21446fb5156d0b00a9187de7b04add6b8c multi f(Str) { say "Str" }; multi f(Int) { say "Int" }; &f.candidates[1].wrap( sub (|) { note "Wrapper"; callsame } ); f(42); CATCH { when X::AdHoc { say "ok"; exit 0 } }

[03:51] <bisectable6> vrurg, On both starting points (old=2018.12 new=70d61b2) the exit code is 0 and the output is identical as well

[03:51] <bisectable6> vrurg, Output on both points: ¬´ok‚ê§¬ª

[03:52] <vrurg> m: multi f(Str) { say "Str" }; multi f(Int) { say "Int" }; &f.candidates[1].wrap( sub (|) { note "Wrapper"; callsame } ); f(42); CATCH { when X::AdHoc { say "ok"; exit 0 } }

[03:52] <camelia> rakudo-moar 70d61b214: OUTPUT: ¬´ok‚ê§¬ª

[03:54] <vrurg> m: $*PERL.compiler.version.say

[03:54] <camelia> rakudo-moar 70d61b214: OUTPUT: ¬´v2019.03.22.g.70.d.61.b.214‚ê§¬ª

[04:11] <MasterDuke> .ask pmurias i'm trying to get the jvm backing working with my default-nqp-to-int branch, but am getting an error i'm not familiar with. i've got some backtrace from before any code change, backtrace from after code change, and the change diff here https://gist.github.com/MasterDuke17/b69bf98b0681a80a00986a4473842af1. any suggestions?

[04:11] <yoleaux> MasterDuke: I'll pass your message to pmurias.

[04:54] *** dhyan_nataraj joined
[07:07] *** lizmat joined
[07:23] *** jdv79 left
[07:37] *** lizmat left
[07:39] *** sortiz joined
[07:40] *** jdv79 joined
[08:38] <AlexDaniel> 6c: multi f(Str) { say "Str" }; multi f(Int) { say "Int" }; &f.candidates[1].wrap( sub (|) { note "Wrapper"; callsame } ); f(42); CATCH { when X::AdHoc { exit 0 } }

[08:38] <committable6> AlexDaniel, ¬¶6c (37 commits): ¬´¬ª

[08:39] <AlexDaniel> vrurg: ‚Üë this way it's a bit easier to see what was going on

[08:39] <AlexDaniel> so on all releases since 2015.12 the result is the same

[08:43] <Geth> ¬¶ rakudo: AlexDaniel self-unassigned Issues with contributors generating script https://github.com/rakudo/rakudo/issues/2028

[09:08] <gfldex> I got a script that can segfault moarvm quite fast. Needs linux and iostat. If a single line is commented out, it runs the whole night without a segfault: https://raw.githubusercontent.com/gfldex/bin/master/iostat.p6

[09:09] <gfldex> Also it's quite resistent to golfing (or I would have).

[09:24] <AlexDaniel> gfldex: so I'm running that in a loop and nothing is happening, what am I doing wrong?

[09:28] <gfldex> AlexDaniel: ohh, please start it with 1 a parameter

[09:28] <gfldex> it tends to segfault after 4-8 secs for me. Sometimes it takes a little longer.

[09:33] <gfldex> I golfed it a little more. Update is on github.

[09:58] <AlexDaniel> yeah, I see a segfault

[09:58] <AlexDaniel> gfldex: it'd help if you manage to include JSON::Stream in that golfed file

[10:04] <gfldex> AlexDaniel: That module is not mine and fairly big. I should be able to simulate it and get rid of shelling out altogether.

[10:04] *** pmurias joined
[10:04] <AlexDaniel> gfldex: yeah but once it is all in the same script we'll have an actual golf

[10:05] <AlexDaniel> and we'll be able to throw that into committable

[10:06] <AlexDaniel> well‚Ä¶ we can also make it work with a module, too

[10:06] <AlexDaniel> I'm just not in the mood :D

[10:07] <pmurias> MasterDuke: I don't have a direct solution, an obvious solution would be figure out what that type is

[10:07] <yoleaux> 04:11Z <MasterDuke> pmurias: i'm trying to get the jvm backing working with my default-nqp-to-int branch, but am getting an error i'm not familiar with. i've got some backtrace from before any code change, backtrace from after code change, and the change diff here https://gist.github.com/MasterDuke17/b69bf98b0681a80a00986a4473842af1. any suggestions?

[10:25] <gfldex> AlexDaniel: No luck. When I take the module out the segfault goes away.

[10:38] <|Tux|> Rakudo version 2019.03-22-g70d61b214 - MoarVM version 2019.03-7-gabdddb018

[10:38] <|Tux|> csv-test-xs-20      0.431 -  0.432

[10:38] <|Tux|> csv-ip5xs           0.739 -  0.761

[10:38] <|Tux|> test-t --race       0.837 -  0.989

[10:38] <|Tux|> test-t              1.870 -  1.935

[10:38] <|Tux|> csv-ip5xs-20        6.204 -  6.408

[10:38] <|Tux|> test                7.778 -  7.791

[10:38] <|Tux|> test-t-20 --race   10.194 - 10.894

[10:38] <|Tux|> csv-parser         22.317 - 22.650

[10:38] <|Tux|> test-t-20          32.163 - 32.491

[10:45] *** lizmat joined
[10:52] *** lizmat left
[11:07] *** lizmat joined
[11:47] *** AlexDaniel left
[11:54] *** lizmat left
[12:19] *** lizmat joined
[12:36] *** lizmat left
[12:37] *** lizmat joined
[12:37] *** lizmat left
[12:39] *** lizmat joined
[12:41] *** pmurias left
[12:57] *** lizmat left
[13:02] *** AlexDaniel joined
[13:06] *** lizmat joined
[13:06] *** pmurias joined
[13:13] *** lizmat left
[13:30] *** lizmat joined
[13:31] *** lizmat left
[13:48] *** lizmat joined
[13:49] *** lizmat left
[13:52] *** lizmat joined
[13:52] *** lizmat left
[13:56] *** lucasb joined
[13:56] *** lizmat joined
[13:57] *** lizmat left
[13:58] *** lizmat joined
[14:03] *** lizmat left
[14:07] *** pmurias left
[14:07] *** lizmat joined
[14:08] *** pmurias joined
[14:09] *** lizmat left
[14:11] *** lizmat joined
[14:11] *** lizmat left
[14:14] *** robertle joined
[14:22] *** lizmat joined
[14:22] *** lizmat left
[14:23] *** lizmat joined
[14:23] *** lizmat left
[14:32] *** lizmat joined
[14:33] *** lizmat left
[14:34] *** sortiz left
[14:49] *** lizmat joined
[14:53] *** lizmat left
[15:24] *** pmurias left
[15:50] *** patrickb joined
[15:50] <patrickb> o/

[15:50] <patrickb> Congratulations all around! Great to have a release again.

[15:51] <patrickb> I don't have much time in the coming week for  post merge fixups, but I'd  like to get my relocatable branches merged soon after, given there is are no other objections to the merge.

[15:57] *** patrickb left
[16:24] *** AlexDaniel left
[17:12] *** |Tux| left
[17:18] *** |Tux| joined
[18:03] *** dhyan_nataraj left
[18:05] *** lucasb left
[18:11] *** AlexDaniel joined
[18:13] <AlexDaniel> gfldex: submit a ticket anyway, maybe someone else will have more luck

[18:16] <vrurg> AlexDaniel: thanks for the advice.

[18:16] * vrurg was trying to locate a leftover of own experiments, as it turend out...

[18:20] <Kaiepi> has 2019.03 been released yet?

[18:27] <robertle> yes: https://github.com/rakudo/rakudo/releases

[18:27] <Kaiepi> perfect

[18:27] <Kaiepi> can someone review https://github.com/rakudo/rakudo/pull/2478 and the related pullreqs?

[18:28] <AlexDaniel> robertle: the signature is going to change for the next release

[18:29] <AlexDaniel> robertle: I'll let you know as soon as it's 100% clear who is going to do the next release :)

[18:31] <robertle> what do you mean with "signature"? I don't understand...

[18:34] <AlexDaniel> robertle: gpg stuff, there's automation in debian that does some checks, right?

[18:35] <AlexDaniel> or am I making stuff up? :)

[18:38] <AlexDaniel> this stuff https://sources.debian.org/src/rakudo/2018.12-5/debian/upstream/

[18:44] *** cfa joined
[18:44] <cfa> morning all

[18:44] <cfa> m: sub panic-stations { await start { die "‚ò†"; CATCH { default { return #`(oops!) } } } }; panic-stations

[18:44] <camelia> rakudo-moar 70d61b214: OUTPUT: ¬´MoarVM panic: Internal error: Unwound entire stack and missed handler‚ê§¬ª

[18:44] <cfa> this seems lta; encountered during a refactor

[18:44] <cfa> i think the panic's been there or a long time

[18:45] <cfa> bisectable6: help

[18:45] <bisectable6> cfa, Like this: bisectable6: old=2015.12 new=HEAD exit 1 if (^‚àû).grep({ last })[5] // 0 == 4 # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Bisectable

[18:45] <cfa> bisect: sub panic-stations { await start { die "‚ò†"; CATCH { default { return #`(oops!) } } } }; panic-stations

[18:45] <bisectable6> cfa, Bisecting by output (old=2015.12 new=70d61b2) because on both starting points the exit code is 1

[18:45] <robertle> AlexDaniel: hm, but if noone signed the original tarball on github, where we get it from? 

[18:46] <bisectable6> cfa, bisect log: https://gist.github.com/3a1f1d15dc73a63a1b59479f11b444ef

[18:46] <bisectable6> cfa, (2016-11-01) https://github.com/rakudo/rakudo/commit/b4dfed2a86b8af0e46d14b74077d907b49ddf957

[18:46] <AlexDaniel> robertle: from here? https://rakudo.org/files/rakudo

[18:46] <cfa> oh, even simpler

[18:46] <cfa> m: sub { await start { return } }()

[18:46] <camelia> rakudo-moar 70d61b214: OUTPUT: ¬´MoarVM panic: Internal error: Unwound entire stack and missed handler‚ê§¬ª

[18:46] <AlexDaniel> robertle: also, all my commits and tags are signed

[18:47] <cfa> vs.

[18:47] <cfa> m: await start { return }

[18:47] <camelia> rakudo-moar 70d61b214: OUTPUT: ¬´An operation first awaited:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Died with the exception:‚ê§    Attempt to return outside of any Routine‚ê§      in block  at <tmp> line 1‚ê§‚ê§¬ª

[18:47] <AlexDaniel> robertle: so you can also check it in git by looking at the tagged commit

[18:47] <AlexDaniel> actually, the tag itself is also signed!

[18:48] <AlexDaniel> everything is signed. Everything!

[18:48] <AlexDaniel> 6c: sub { await start { return } }()

[18:49] <committable6> AlexDaniel, https://gist.github.com/99ac72bb06c33274dfa177b56117bbd3

[18:50] <AlexDaniel> cfa: wow, this is really simple, but I haven't seen a bug report for that! Yeah, the code of course doesn't make much sense, but MoarVM panic is not the right answer :)

[18:50] <cfa> right

[18:50] <cfa> i mean, the toplevel versoin gives a reasonable error

[18:50] <cfa> my refactor was closer to the first golf

[18:50] <cfa> where a return ended up inside an await start { }

[18:51] <cfa> version*

[18:51] <robertle> right, I was confused. we do get the files from https://rakudo.perl6.org/downloads/rakudo/ where they do have signatures. who will be doing the releases in the future?

[18:51] <AlexDaniel> actually, I don't understand why the top level version works but the same thing in a sub doesn't

[18:51] <cfa> me neither! 

[18:52] <cfa> but the error makes sense 

[18:52] <cfa> the panic does not (from a user perspective ofc)

[18:52] <AlexDaniel> robertle: there's a volunteer but it's not official yet

[18:54] <robertle> awesome! viele haende schnelles ende

[19:02] <AlexDaniel> cfa: soo, file a bug report? :)

[19:10] <cfa> yep

[19:10] <cfa> (sorry, was afk)

[19:12] <cfa> m: sub { start { return } }(); sleep 1;

[19:12] <camelia> rakudo-moar 70d61b214: OUTPUT: ¬´Unhandled exception in code scheduled on thread 4‚ê§Attempt to return outside of immediately-enclosing Routine (i.e. `return` execution is outside the dynamic scope of the Routine where `return` was used)‚ê§  in block  at <tmp> line 1‚ê§‚ê§¬ª

[19:12] <cfa> interesting contrast there too

[19:15] *** dhyan_nataraj joined
[19:18] *** dhyan_nataraj left
[19:18] *** dhyan_nataraj joined
[19:18] <cfa> https://github.com/rakudo/rakudo/issues/2753

[19:23] <cfa> issue title can probably use work :)

[19:45] *** TreyHarris joined
[20:28] *** dhyan_nataraj left
[20:35] *** go|dfish left
[20:48] *** go|dfish joined
[22:05] <MasterDuke> there's a small chance i could go to either the swiss perl workshop or the europe perlcon. any recommendation for one over the other?

[22:10] <timotimo> i know i will not be at riga, i don't know if i will make it to SPW

[22:10] <timotimo> OTOH, riga has the potential to draw a much bigger crowd in general

[22:11] <MasterDuke> any thought on the locations (non-conf stuff to see/do)?

[22:13] * timotimo somehow managed a segfault in readint

[22:13] <timotimo> no thoughts

[22:13] <timotimo> only dinner

[22:31] *** epony left
[22:55] *** squashable6 left
[22:57] *** squashable6 joined
[23:17] <MasterDuke> .tell pmurias it's a P6num (not surprisingly)

[23:17] <yoleaux> MasterDuke: I'll pass your message to pmurias.

[23:19] *** cfa left
[23:43] *** SergiusUA joined
[23:48] *** lizmat joined
[23:58] *** lizmat left
