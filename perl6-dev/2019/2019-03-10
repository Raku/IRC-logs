[00:00] *** gfldex left
[00:02] <hankache> MSI release candidate: http://www.hankache.com/rakudostar/rakudo-star-2019.03-x86_64%20(JIT)-RC.msi

[00:20] *** hankache left
[00:26] *** ufobat_ joined
[00:30] *** ufobat left
[00:33] *** lucasb left
[01:27] *** lizmat_ joined
[01:30] *** lizmat left
[02:19] *** lizmat joined
[02:22] *** lizmat_ left
[02:22] *** Kaiepi left
[02:37] <Geth> ¬¶ rakudo: 5a9b720d70 | (Nick Logan)++ (committed using GitHub Web editor) | src/core/Kernel.pm6

[02:37] <Geth> ¬¶ rakudo: Check for fexistence before checking if executable

[02:37] <Geth> ¬¶ rakudo: 

[02:37] <Geth> ¬¶ rakudo: See #2756

[02:37] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/5a9b720d70

[02:37] <synopsebot> RAKUDO#2756 [open]: https://github.com/rakudo/rakudo/issues/2756 $*KERNEL.bits on Windows

[02:52] <Geth> ¬¶ rakudo: 6e8df010f7 | (Nick Logan)++ (committed using GitHub Web editor) | src/core/Kernel.pm6

[02:52] <Geth> ¬¶ rakudo: Ensure we boolify our value

[02:52] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/6e8df010f7

[03:18] *** travis-ci joined
[03:18] <travis-ci> Rakudo build failed. Nick Logan 'Check for fexistence before checking if executable

[03:18] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/504182141 https://github.com/rakudo/rakudo/compare/a1591fbe2933...5a9b720d709f

[03:18] *** travis-ci left
[03:27] *** AlexDani` joined
[03:29] *** AlexDaniel left
[04:05] *** TreyHarris left
[04:19] *** TreyHarris joined
[04:20] *** Kaiepi joined
[04:26] *** lizmat left
[05:23] *** MasterDuke left
[06:11] *** Kaiepi left
[06:12] *** Kaiepi joined
[06:27] *** dhyan_nataraj joined
[06:42] *** AlexDani` is now known as AlexDaniel

[06:53] *** hoelzro_ joined
[06:57] *** hoelzro left
[06:57] *** synopsebot left
[06:57] *** tailgate left
[07:32] *** ufobat_ left
[08:41] *** lizmat joined
[08:53] <lizmat> commute home&

[08:53] *** lizmat left
[09:55] *** dhyan_nataraj left
[09:55] *** dhyan_nataraj joined
[09:55] *** dhyan_nataraj left
[11:58] *** tailgate joined
[12:05] *** lucasb joined
[12:32] *** lucasb left
[12:32] *** lucasb joined
[12:44] *** AlexDaniel left
[13:00] <[Tux]> Rakudo version 2019.03-27-g6e8df010f - MoarVM version 2019.03-10-g81284a077

[13:00] <[Tux]> csv-test-xs-20      0.438 -  0.439

[13:00] <[Tux]> csv-ip5xs           0.738 -  0.746

[13:00] <[Tux]> test-t --race       0.856 -  0.881

[13:00] <[Tux]> test-t              1.848 -  1.880

[13:00] <[Tux]> csv-ip5xs-20        6.228 -  6.381

[13:00] <[Tux]> test                7.746 -  8.019

[13:00] <[Tux]> test-t-20 --race   10.625 - 10.652

[13:00] <[Tux]> csv-parser         23.418 - 23.481

[13:00] <[Tux]> test-t-20          32.058 - 32.898

[13:33] *** AlexDaniel joined
[16:51] *** MasterDuke joined
[16:51] *** MasterDuke left
[16:51] *** MasterDuke joined
[17:19] <MasterDuke> anybody think they'd be able to help with my jmv-on-my-default-to-int-branch-in-nqp problem?

[18:31] *** AlexDaniel left
[18:41] *** lizmat joined
[19:50] *** ufobat joined
[20:03] *** lucasb left
[20:13] *** AlexDaniel joined
[20:14] *** epony left
[20:19] *** AlexDaniel left
[20:25] *** gfldex joined
[20:26] *** epony joined
[20:34] <Geth> ¬¶ roast: 3562c2f90d | (Ben Davies)++ | S32-io/IO-Socket-Async.t

[20:34] <Geth> ¬¶ roast: Stub IO::Socket::Async IPv6 tests on the JVM on OpenBSD

[20:34] <Geth> ¬¶ roast: 

[20:34] <Geth> ¬¶ roast: The OpenJDK's package on OpenBSD uses custom patches that force it to

[20:34] <Geth> ¬¶ roast: use IPv4, meaning these tests always fail.

[20:34] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/3562c2f90d

[21:06] <timotimo> Compress::Zlib leaks like a sieve i think %)

[21:08] *** AlexDaniel joined
[21:17] <MasterDuke> timotimo: it's internals should still be re-written to directly use the encoder/decoder api, that might help (or might just make it leak faster)

[21:19] <MasterDuke> timotimo: are you using :bin? that would be much better if my open PR was merged. i should probably email retupmoca, i think i had to do that to get my last PR merged

[21:20] <timotimo> ah

[21:20] <timotimo> if retupmoca's anything like me, github notifications are a torrent of noise and signal gets drowned out 100% of the time

[21:21] <timotimo> anyway, this is a development-only script, so i've just reimplemented gzslurp based on run "zcat" :)

[21:22] *** AlexDaniel left
[21:28] <MasterDuke> just sent an email

[21:32] <timotimo> m: sub testsub(Int $a, Str $b) { }; testsub("hi")

[21:32] <camelia> rakudo-moar 6e8df010f: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Calling testsub(Str) will never work with declared signature (Int $a, Str $b)‚ê§at <tmp>:1‚ê§------> 3sub testsub(Int $a, Str $b) { }; 7‚èè5testsub("hi")‚ê§¬ª

[21:32] <timotimo> m: sub testsub(Int $a, Str $b) { }; "hi".&testsub()

[21:32] <camelia> rakudo-moar 6e8df010f: OUTPUT: ¬´Too few positionals passed; expected 2 arguments but got 1‚ê§  in sub testsub at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:32] <timotimo> ^- LTA

[22:02] <timotimo> m: say +"a" xx 10_000

[22:02] <camelia> rakudo-moar 6e8df010f: OUTPUT: ¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5a' (indicated by ‚èè)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[22:03] <timotimo> m: say +("a" x 10_000);

[22:03] <camelia> rakudo-moar 6e8df010f: OUTPUT: ¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa‚Ä¶¬ª

[22:03] <timotimo> m: say +("a" x 100_000);

[22:03] <camelia> rakudo-moar 6e8df010f: OUTPUT: ¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa‚Ä¶¬ª

[22:03] <timotimo> m: say +("a" x 1_000_000); say now - INIT now;

[22:03] <camelia> rakudo-moar 6e8df010f: OUTPUT: ¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa‚Ä¶¬ª

[22:03] <timotimo> m: say +("\x[1]" x 1_000_000);

[22:04] <camelia> rakudo-moar 6e8df010f: OUTPUT: ¬´(timeout)¬ª

[22:05] <timotimo> ^- LTA

[22:38] <japhb> .ask jnthn Why doesn't the run-one() tail recursion in your _Understanding react, supply, and whenever_ talk cause super-deep invocation stacks?  Let alone the problem of whether memory would grow, what would profiling and backtraces look like?

[22:38] <yoleaux> japhb: I'll pass your message to jnthn.

[22:39] <MasterDuke> japhb: is the talk available online?

[22:39] <japhb> MasterDuke: https://twitter.com/jnthnwrthngtn/status/1104504926775005184

[22:40] <MasterDuke> cool, thanks

[22:41] <timotimo> japhb: "whenever" is asynchronous, so it'll just be installed as a handler when the whenever it's in is finished

[22:41] *** Kaiepi left
[23:01] <japhb> Ah, so you're saying each call to run-one() installs a bunch of handlers and phasers and such into a dynamically found react/supply, then unwinds the stack (leaving the exhausted whenever it was called from) and allows the react/supply to process the next event.  OK, so that keeps the invocation stack from growing needlessly.

[23:01] <japhb> But what about the backtrace attached to an exception thrown inside a whenever inside the run-one()?  What does that actually look like?

[23:02] <timotimo> lexically found, actually

[23:02] <timotimo> it doesn't have to unwind a stack, i don't think

[23:03] <timotimo> it's more like a regular closure

[23:05] <timotimo> i think the call actually looks like it comes from the react implementation directly

[23:14] <jnthn> japhb: The `whenever` subscribes, the events are delivered asynchronously. By the one-message-at-a-time rule, they *can't* be delivered until the current message is processed.

[23:14] <yoleaux> 22:38Z <japhb> jnthn: Why doesn't the run-one() tail recursion in your _Understanding react, supply, and whenever_ talk cause super-deep invocation stacks?  Let alone the problem of whether memory would grow, what would profiling and backtraces look like?

[23:15] <jnthn> japhb: So by the time the events come, then the code that did the subscription is no longer in dynamic scope

[23:17] <MasterDuke> jnthn: if you're in the mood for a really "fun" problem, the attempting to fix the jvm backend for my nqp default-int branch is currently giving me this https://gist.github.com/MasterDuke17/b69bf98b0681a80a00986a4473842af1 (the file named '2')

[23:18] <MasterDuke> this is the precise change that causes it https://gist.github.com/MasterDuke17/b69bf98b0681a80a00986a4473842af1#file-3-patch-L20-L21

[23:18] <japhb> timotimo: Hmmm, so you're saying an exception thrown from a whenever block will have its immediate backtrace caller be the react/supply implementation?

[23:19] <timotimo> well, it won't be shown by the default backtrace printer of course

[23:19] <japhb> timotimo: I'm guessin the default backtrace printer would skip the implementation frames and just print the surrounding react.

[23:21] <japhb> Also, let me pull on that lexically found bit ... are you saying you wouldn't be able to have whenever blocks inside a subroutine defined lexically outside the react block?

[23:21] <timotimo> yeah, though i'd have to try it myself

[23:21] <timotimo> that is correct

[23:21] <timotimo> it has to be inside the react/supply block

[23:22] <timotimo> if you don't want that, "just" have it be a supply block and whenever it from inside the original react block

[23:22] <japhb> hrmm.  That difference from gather/take is One More Thing to Know.

[23:22] <japhb> nodnod

[23:22] <timotimo> can always "use v6.c" to get the other semantics :P

[23:22] <japhb> Nah, I've just been around here for long enough to have mixed all the various versions of Perl 6 semantics into a fine slurry.

[23:23] <timotimo> i guess it'd be possible to have "react :dynamic { ... }"

[23:23] <timotimo> wait, no, the whenevers outside will error

[23:23] <timotimo> so it'd also have to have a flag somewhere for that

[23:23] <japhb> Not worth it.  But hopefully we explain that difference from gather/take in the docs somewhere.

[23:24] <timotimo> that'd be good, yeah

[23:24] <japhb> *fine mental slurry

[23:24] <timotimo> heavy mental slurry

[23:25] <japhb> There are scenes from the original Heavy Metal movie that could be described as that, yes.

[23:25] <timotimo> i have not yet seen that!

[23:25] <timotimo> though a friend recommended it to me a long time ago already

[23:25] <timotimo> and multiple times since

[23:26] <japhb> Oh, very worth it.  I mean, at this point I suspect the obvious fan service to have not aged well, but taken as a product of its time period?  Quite a thing.

[23:26] <jnthn> Forcing the whenevers to be lexically enclosed in the react/supply is to facilitate static analysis and optimization

[23:27] <japhb> jnthn: Totally believe you.  (And not at all asking to change it.)

[23:28] <jnthn> MasterDuke: Still resting off the GPW trip, so not much brane for fun problems today.

[23:29] <MasterDuke> completely understandable, i'm still reeling from the DST change...

[23:29] <japhb> jnthn: Do you still have time on your Perl 6 grants left, or are those coffers emptied?

[23:30] <timotimo> Remaining funding-approved hours on current grant period: 160:51

[23:30] <timotimo> Remaining community-approved hours on current grant period: 326:51

[23:30] <timotimo> ^- that was posted on february 11th

[23:31] <jnthn> japhb: Still a decent amount left...the figures timotimo quoted don't include February's work; will do that report in the next day or two

