[01:25] *** vrurg joined
[01:54] *** ggoebel joined
[02:41] *** llfourn left
[02:43] *** llfourn joined
[04:41] *** ggoebel left
[08:24] <nine> .tell pmurias My plan with Inline::Perl5 is to record all loaded modules and all executed code during precompilation and replay it at runtime in an exported INIT phaser. My last attempt at this failed though due to unrelated precomp issues with closures in my meta class.

[08:24] <yoleaux> nine: I'll pass your message to pmurias.

[08:33] <Geth> ¦ nqp: Kaiepi++ created pull request #558: Make socket family handling portable

[08:33] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/558

[08:35] <Geth> ¦ rakudo: Kaiepi++ created pull request #3008: [IP6NS Grant] Make socket family handling portable

[08:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3008

[09:21] *** AlexDaniel joined
[09:31] <lizmat> Files=1275, Tests=108134, 207 wallclock secs (26.83 usr  7.26 sys + 2896.95 cusr 263.14 csys = 3194.18 CPU)

[09:41] <Kaiepi> the jvm takes well over half an hour to build on my openbsd machine but on my freebsd vps that's a quarter as powerful it takes only 5 minutes? what?

[09:44] <jnthn> Maybe the openbsd w^x rules mean that its JIT doesn't run? :)

[09:44] <Kaiepi> the jit should run, w^x is allowed on the partition i have it installed on

[09:45] <Kaiepi> unless it's like the current moarvm port, which entirely disables the jit even though it would run if it were enabled

[09:45] <Kaiepi> maybe it could just be a matter of hdd vs ssd

[09:45] <jnthn> Could be that

[09:45] <jnthn> But...that feels odd

[09:46] <jnthn> Unless it swaps

[09:46] <jnthn> Or if it swaps on any disk on the BSD machine

[09:50] <nine> TBH I'd be very pleasently surprised if the JIT would be responsible for a 6x speedup

[09:52] <|Tux|> Rakudo version 2019.03.1-640-g63b9e1fe3 - MoarVM version 2019.05-89-g5b597acc1

[09:52] <|Tux|> csv-test-xs-20      0.426 -  0.427

[09:52] <|Tux|> test-t --race       0.788 -  0.789

[09:52] <|Tux|> csv-ip5xs           1.157 -  1.161

[09:52] <|Tux|> test-t              1.729 -  1.742

[09:52] <|Tux|> test                6.465 -  7.203

[09:52] <|Tux|> test-t-20 --race    9.111 -  9.177

[09:52] <|Tux|> csv-parser         22.785 - 23.317

[09:52] <|Tux|> test-t-20          28.484 - 29.197

[09:52] <|Tux|> csv-ip5xs-20       59.426 - 60.134

[10:29] *** |Tux| left
[10:40] *** BeastieBot joined
[10:48] *** |Tux| joined
[10:49] *** |Tux| left
[11:19] *** |Tux| joined
[11:57] <AlexDaniel> ah so zscript no longer works because MOAR_REVISION moved :)

[12:05] <Geth> ¦ nqp: 5190ce9356 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/templates/MOAR_REVISION

[12:05] <Geth> ¦ nqp: [MoarVM Bump] Brings 38 commits

[12:05] <Geth> ¦ nqp: 

[12:05] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2019.05-53-gcce71cdbf...2019.05-91-g81e5cbf2a

[12:05] <Geth> ¦ nqp: 81e5cbf2a Merge pull request #1127 from dogbert17/fix-m1104

[12:05] <Geth> ¦ nqp: ee829bc29 Restore accidentally deleted call to mp_neg()

[12:05] <Geth> ¦ nqp: 5b597acc1 Merge pull request #1125 from Kaiepi/syncsocket-mem

[12:05] <Geth> ¦ nqp: 3241e9f54 Fix memory leak in socket_read_bytes

[12:05] <Geth> ¦ nqp: <…commit message has 34 more lines…>

[12:05] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5190ce9356

[12:05] <Geth> ¦ rakudo: 9733471101 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/templates/NQP_REVISION

[12:05] <Geth> ¦ rakudo: [NQP Bump] Brings 13 commits

[12:05] <Geth> ¦ rakudo: 

[12:05] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2019.03-240-g8c90f6266...2019.03-253-g5190ce935

[12:05] <Geth> ¦ rakudo: 5190ce935 [MoarVM Bump] Brings 38 commits

[12:05] <Geth> ¦ rakudo: 4c5ec49dd [js] Allow calling methods on a wrapped js function

[12:05] <Geth> ¦ rakudo: 33ed626d4 Document missing nqp::getrusage constants

[12:05] <Geth> ¦ rakudo: ab21c2dec add missing ?, thanks bartolin++

[12:05] <Geth> ¦ rakudo: <…commit message has 9 more lines…>

[12:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9733471101

[12:18] *** epony left
[12:20] *** ilogger2 joined
[12:22] <Geth> ¦ rakudo: c5830f4c83 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/releasable/Sakefile

[12:22] <Geth> ¦ rakudo: Fix paths to *_REVISION files

[12:22] <Geth> ¦ rakudo: 

[12:22] <Geth> ¦ rakudo: The build process was changed a bit and the files are now in a

[12:22] <Geth> ¦ rakudo: different directory.

[12:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c5830f4c83

[12:22] <AlexDaniel> greppable6: _REVISION

[12:22] <greppable6> AlexDaniel, 19 lines, 3 modules: https://gist.github.com/da7a0402c3a7bfb317a391a3fe596709

[12:41] *** pmurias joined
[12:43] <pmurias> nine: re replaying code, won't that be a bit crazy when io side effects etc. are present

[12:43] <yoleaux> 08:24Z <nine> pmurias: My plan with Inline::Perl5 is to record all loaded modules and all executed code during precompilation and replay it at runtime in an exported INIT phaser. My last attempt at this failed though due to unrelated precomp issues with closures in my meta class.

[12:50] *** pmurias left
[13:22] *** vrurg joined
[13:23] *** epony joined
[13:24] *** pamplemousse joined
[13:42] *** lucasb joined
[13:50] <vrurg> .

[14:49] *** vrurg left
[15:06] *** vrurg joined
[15:34] <vrurg> releasable6: status

[15:35] <releasable6> vrurg, Next release will happen when it's ready. 4 blockers. 258 out of 642 commits logged (⚠ 3 warnings)

[15:35] <releasable6> vrurg, Details: https://gist.github.com/ec6dd0b683624567f15c55f21f954832

[15:50] *** vrurg_ joined
[15:51] *** vrurg left
[15:51] *** vrurg_ is now known as vrurg

[16:41] *** pamplemousse left
[16:42] <vrurg> m: SetHash.new(a=>1,b=>2).perl.say

[16:42] <camelia> rakudo-moar c5830f4c8: OUTPUT: «SetHash.new()␤»

[16:43] <vrurg> m: SetHash.new(a=>1,b=>2).elems.say

[16:43] <camelia> rakudo-moar c5830f4c8: OUTPUT: «0␤»

[16:43] <vrurg> That's weird.

[16:47] <masak> m: say SetHash.new((a=>1), (b=>2)).perl

[16:47] <camelia> rakudo-moar c5830f4c8: OUTPUT: «SetHash.new(:a(1),:b(2))␤»

[16:48] <masak> (unparenthesized pairs interpreted as named method arguments, and ignored due to the Interface Consistency principle)

[16:55] <masak> m: say SetHash.new("a" => 1, "b" => 2).perl

[16:55] <camelia> rakudo-moar c5830f4c8: OUTPUT: «SetHash.new(:b(2),:a(1))␤»

[16:55] <masak> also works

[16:55] <masak> basically, anything to make the pairs not be interpreted as method arguments

[16:58] <vrurg> masak: Argh, right. Stepped over the same mistake which was explaining to another person yesterday... ;)

[17:07] <masak> Interface Consistency is the most frustrating design decision that I actually _agree_ with in Perl 6

[17:25] *** ggoebel joined
[17:26] *** pamplemousse joined
[17:31] *** pamplemousse_ joined
[17:35] *** pamplemousse left
[17:44] *** pamplemousse_ left
[18:07] <nine> .tell pmurias yes, it will. But I don't see another way without losing all the benefits. And the user still has the choice to opt out via no precompilation;

[18:07] <yoleaux> nine: I'll pass your message to pmurias.

[18:49] *** pamplemousse_ joined
[18:51] *** lucasb left
[18:57] <vrurg> ugexe: ping

[19:01] *** vrurg left
[19:15] *** MasterDuke joined
[19:16] *** MasterDuke left
[19:16] *** MasterDuke joined
[19:18] *** vrurg joined
[19:20] *** pamplemousse_ left
[19:29] *** pamplemousse_ joined
[19:48] * AlexDaniel stares at Digest::BubbleBabble

[20:00] <AlexDaniel> aaa, ok

[20:01] <AlexDaniel> 6c: [1,2,3][1..^*].say

[20:01] <committable6> AlexDaniel, https://gist.github.com/32f85b68563ebb5667ac73b02021530f

[20:01] <AlexDaniel> 6c: [1,2,3][1..*-1].say

[20:01] <AlexDaniel> 6c: [1,2,3][1..*-2].say

[20:02] <committable6> AlexDaniel, ¦6c (37 commits): «(2 3)␤»

[20:02] <committable6> AlexDaniel, ¦6c (37 commits): «(2)␤»

[20:04] <ugexe> vrurg: pong

[20:04] <vrurg> ugexe: nevermind, just wanted to make sure that then env var turns off JIT

[20:08] *** pamplemousse_ left
[20:08] * AlexDaniel wonders why * expands to the number of elements and not the index of the last element

[20:09] <AlexDaniel> cuz then * and *-1 for the endpoint do the same thing…

[20:09] <AlexDaniel> actually I'm not even sure if this commit is right https://github.com/rakudo/rakudo/commit/35b69f074b9db3ffeb1638fc8a548fc2c0643d5a

[20:10] <AlexDaniel> I mean, yeah, it's kinda right because *-1 is useless anyway…

[20:24] *** ggoebel left
[20:24] <AlexDaniel> alright, two modules fixed

[20:33] <AlexDaniel> m: class X::IO is Exception { }

[20:33] <camelia> rakudo-moar c5830f4c8: ( no output )

[20:33] <AlexDaniel> m: class Foo { class X::IO is Exception { } }

[20:33] <camelia> rakudo-moar c5830f4c8: ( no output )

[20:34] <AlexDaniel> arrr

[20:34] <AlexDaniel> m: say X::IO

[20:34] <camelia> rakudo-moar c5830f4c8: OUTPUT: «(IO)␤»

[20:34] <AlexDaniel> I remember this issue https://github.com/jonathanstowe/RPi-Device-SMBus/blob/2994e198e4eda977c580ed7b7870a2c301d9a753/lib/RPi/Device/SMBus.pm#L164

[20:34] <AlexDaniel> I think we hit it before, like months ago?

[20:35] <AlexDaniel> # P6M Merging GLOBAL symbols failed: duplicate definition of symbol IO

[20:35] <AlexDaniel> I agree with the error, actually, but somehow it used to work

[20:35] <AlexDaniel> how come this commit triggers it is beyond me https://github.com/rakudo/rakudo/commit/84b0e38048ff606ebd8515c14f250fc80bd6e53b

[20:36] <AlexDaniel> jnthn: thoughts?

[20:37] <AlexDaniel> I can fix the module, of course

[20:37] <AlexDaniel> but is that what we want?

[20:38] <AlexDaniel> greppable6: ::IO

[20:38] <greppable6> AlexDaniel, 698 lines, 42 modules: https://gist.github.com/1b46ab334b70a0718adb49b6e8bb0f33

[20:38] *** vrurg left
[20:38] <AlexDaniel> greppable6: ::IO\s

[20:38] <greppable6> AlexDaniel, 60 lines, 14 modules: https://gist.github.com/cdf771027ca7372436bb183de1a177b8

[20:40] <jnthn> AlexDaniel: Huh, that's very odd

[20:40] <jnthn> Does getting rid of the X:: in the name of the exception that I introduced help matters?

[20:40] <jnthn> It's lexical so it doesn't matter what it's called

[20:41] <jnthn> But it still feels off 

[20:41] <AlexDaniel> jnthn: so you don't want me to change the module, right?

[20:48] *** vrurg joined
[20:55] <ugexe> vrurg: MVM_SPESH_DISABLE=1 would be another one to try next time youre on windows vm

[20:57] <vrurg> ugexe: this helps so far.

[20:57] <vrurg> I'll let it run for at least 1000 times to make sure.

[21:00] <AlexDaniel> vrurg++

[21:01] <ugexe> anyone have an idea what could cause a test called t\04-nativecall\04-pointers.t to fail on windows if spesh is enabled?

[21:01] <timotimo> hm, bad assumptions in optimizations? maybe regarding aligning or something?

[21:01] <ugexe> around 4-5 months back i stop seeing it (but maybe just coincidence since i stopped at 6 months, checking *most* red builds)

[21:02] <ugexe> just looking at the appveyor output

[21:05] <jnthn> AlexDaniel: Well, could try changing Test.pm6 :)

[21:06] <AlexDaniel> ugexe: 04-pointers.t or 06-struct.t?

[21:06] <ugexe> 06-struct.t

[21:07] <ugexe> oh wait let me go over this again heh

[21:08] <AlexDaniel> ugexe: which test triggers the segfault? this one? https://github.com/rakudo/rakudo/blob/c5830f4c8377f37e2d0b38d98f571e5710c1771f/t/04-nativecall/06-struct.t#L199

[21:08] <AlexDaniel> if it's a segfault at all

[21:08] <ugexe> yeah i meant 06-struct.t

[21:09] <AlexDaniel> maybe a golf of the issue can help figure it out?

[21:09] <ugexe> its the test after that one

[21:11] <AlexDaniel> vrurg: I think there's something wrong with this commit https://github.com/rakudo/rakudo/commit/3af3bde70eaed13b235bc55c54cf0ca604be6fcf

[21:11] <AlexDaniel> vrurg: https://github.com/perl6-community-modules/perl6-Pastebin-Shadowcat/blob/7e8769e51fd27618681b2d6be623c6c64c996a9b/lib/Pastebin/Shadowcat.pm6#L31

[21:11] <AlexDaniel> vrurg: https://github.com/Mouq/HTML-Entity/blob/57931c74f08344fe06459368d80f2b3a16cc5dee/lib/HTML/Entity.pm6#L25

[21:12] <AlexDaniel> vrurg: the error is “Cannot invoke this object (REPR: Null; VMNull)”

[21:17] <vrurg> AlexDaniel: I'll have a look. Perhaps the problem needs different solution, after all. But didn't find it.

[21:21] <Geth> ¦ rakudo: vrurg++ created pull request #3013: Correct assignment to SetHash

[21:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3013

[21:23] <Geth> ¦ roast: vrurg++ created pull request #555: Test for SetHash assignment

[21:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/555

[21:28] <vrurg> ugexe, AlexDaniel More that 1150 runs of the test with MVM_SPESH_DISABLE are ok.

[21:28] <AlexDaniel> lizmat: this is not right:

[21:28] <AlexDaniel> c: HEAD my $s = (1, 2, 3).Seq; say $s.iterator.pull-one; say $s[0]

[21:28] <committable6> AlexDaniel, ¦HEAD(c5830f4): «1␤1␤»

[21:29] <AlexDaniel> it makes me feel that all sequences are now cached…

[21:29] <AlexDaniel> which sounds horrifying :)

[21:34] <AlexDaniel> OK two more modules left: https://github.com/rakudo/rakudo/issues/2998

[21:34] <AlexDaniel> but I think I'm done for today…

[21:34] <vrurg> AlexDaniel: how did you get HTML::Entity to fail?

[21:35] <AlexDaniel> vrurg: it doesn't fail directly, only through Pastebin::Shadowcat

[21:35] <vrurg> Ok. Thanks!

[21:41] <Geth> ¦ rakudo: AlexDaniel self-assigned Unwanted caching of Seqs https://github.com/rakudo/rakudo/issues/3014

[21:41] <AlexDaniel> ok that I can fix myself easily :)

[21:48] <vrurg> AlexDaniel: prove6 -l passes for pastebin module

[21:49] <AlexDaniel> vrurg: ummm… it shouldn't?

[21:49] <AlexDaniel> weird… you're on HEAD, right?

[21:49] <vrurg> I am.

[21:49] <vrurg> wait... Damn

[21:50] <vrurg> rakudobrew didn't deactivate.

[21:57] *** vrurg left
[21:57] *** vrurg joined
[22:29] <Geth> ¦ rakudo: AlexDaniel self-unassigned Unwanted caching of Seqs https://github.com/rakudo/rakudo/issues/3014

[22:32] <japhb> m: my $foo = "a"; my $bar = "b"; my $quux = $foo => $bar; $bar = "c"; dd $quux;  # Why does $bar need to be decontainerized to avoid this WAT?

[22:33] <camelia> rakudo-moar c5830f4c8: OUTPUT: «Pair $quux = :a("c")␤»

[22:35] <timotimo> m: my %foo = :1a, :2b, :3c; for %foo { .value++ }; say %foo

[22:35] <camelia> rakudo-moar c5830f4c8: OUTPUT: «{a => 2, b => 3, c => 4}␤»

[22:36] <japhb> timotimo: You're saying my WAT exists so that your case will DWIM?

[22:37] <timotimo> potentially

[22:37] <japhb> hmmm

[22:37] <japhb> I can see that

[22:45] <vrurg> timotimo: your case is reasonable. But I wouldn't expect a container to be stored in a hash value. That's asking for troubles.

[22:46] <vrurg> *in a pair value

[22:48] <timotimo> you mean when created with the => operator?

[22:48] <vrurg> timotimo: yes

[22:48] <vrurg> m: my %h; my $foo = "a"; my $bar = 42; %h = $foo => $bar.VAR; $bar++; say %h

[22:48] <camelia> rakudo-moar c5830f4c8: OUTPUT: «{a => 43}␤»

[22:48] <vrurg> That what I'd expect to be more valid to achieve the same outcome.

[22:49] <jnthn> m: my $x = 42; my $p = a => $x; $p.value = 99; say $x

[22:49] <camelia> rakudo-moar c5830f4c8: OUTPUT: «99␤»

[22:49] <jnthn> I'm quite sure this was an intended feature

[22:50] <timotimo> oh vrurg can i get you to do something terrible to the moarvm build system?

[22:50] <jnthn> And it specified behavior

[22:50] <jnthn> *is

[22:51] <vrurg> timotimo: not sure I'd want to get into that.

[22:52] <timotimo> https://bitbucket.org/wolfpld/tracy/src/master/ - i only want this (its C interface to be exact) to be usable in moarvm optionally

[22:52] <timotimo> it's a cpp library

[22:52] <timotimo> that's the issue

[22:53] <vrurg> jnthn: Thanks, I checked for other possible variants, and no other valid solution for your case. So, it makes sense, though still somewhat unexpected. :)

[22:54] <jnthn> vrurg: I forget the original motivation for this, alas; TimToady++ probably remembers :)

[22:55] <vrurg> timotimo: the point is that I never looked inside moar's build. But if nobody else takes that I could try next week.

[22:56] <vrurg> jnthn: I could guess: for timotimo's example with the loop, perhaps.

[22:56] <timotimo> i'd be glad if you could

[22:57] <vrurg> timotimo: ok, I'm exhausted after TPC yet and have my flight back tomorrow. So, just remind me next week, plese. Maybe make a ticket with the details?

[23:01] <timotimo> don't worry, i had an exhausting today, too

[23:01] <timotimo> first a far too early flight, then a nap and another couple hours of driving, then a suddenly dead desktop pc :)

[23:03] <vrurg> BTW, while a few people here: is it possible that a Setty could be is-lazy somehow? https://github.com/rakudo/rakudo/pull/3013

[23:05] <jnthn> vrurg: Well, not of the core ones would be...whether somebody could implement that role in a module and make it lazy is another matter, though generally we've only ever associated laziness with list-y things, not associative things.

[23:05] <jnthn> *none of

[23:07] <timotimo> listy things are easier to make lazy, because grabbing "one specific item" lets you know exactly where to go look, whereas a "foo" in a hash that's backed by a generator-like thing can take an arbitrary amount of time, up to infinity

[23:07] <timotimo> though of course you could have a generator that just maps a key to a value rather than a function that spits out key/value pairs

[23:07] <timotimo> BBL

[23:07] <vrurg> Don't want extra performance lost on an unnecessary check. Would leave it like that.

[23:07] <vrurg> *loss

[23:08] <jnthn> Yeah, I'd say is-lazy isn't really applicable for associative things

[23:08] <vrurg> Thanks!

[23:10] <vrurg> Actually, that's more/less how I considered it too.

[23:13] <Geth> ¦ rakudo: vrurg self-assigned Some issue after “Decontainerize non-scalar symbols upon import” commit https://github.com/rakudo/rakudo/issues/3012

[23:17] <Geth> ¦ rakudo: f1512e9f97 | (Vadim Belman)++ | 2 files

[23:17] <Geth> ¦ rakudo: Do correct assignment to SetHash

[23:17] <Geth> ¦ rakudo: 

[23:17] <Geth> ¦ rakudo: Fix for rakudo/rakudo#1203

[23:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f1512e9f97

[23:17] <Geth> ¦ rakudo: ed3db12c73 | (Vadim Belman)++ (committed using GitHub Web editor) | 2 files

[23:17] <Geth> ¦ rakudo: Merge pull request #3013 from vrurg/rakudo_1203

[23:17] <synopsebot_> RAKUDO#1203 [open]: https://github.com/rakudo/rakudo/issues/1203 [data types] Would be nice to have an easy way to work with SetHashes and its kin

[23:17] <Geth> ¦ rakudo: 

[23:17] <Geth> ¦ rakudo: Correct assignment to SetHash

[23:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ed3db12c73

[23:17] <Geth> ¦ roast: 12298da5a6 | (Vadim Belman)++ | S03-operators/assign.t

[23:17] <Geth> ¦ roast: Test for SetHash assignment

[23:17] <Geth> ¦ roast: 

[23:17] <Geth> ¦ roast: Support for rakudo/rakudo#3013

[23:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/12298da5a6

[23:17] <Geth> ¦ roast: 2924a0cf71 | (Vadim Belman)++ (committed using GitHub Web editor) | S03-operators/assign.t

[23:17] <Geth> ¦ roast: Merge pull request #555 from vrurg/rakudo_1203

[23:17] <synopsebot_> RAKUDO#3013 [closed]: https://github.com/rakudo/rakudo/pull/3013 Correct assignment to SetHash

[23:17] <Geth> ¦ roast: 

[23:17] <Geth> ¦ roast: Test for SetHash assignment

[23:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2924a0cf71

[23:41] <vrurg> m: use nqp; sub foo { }; my &f = &foo; say nqp::decont(&f).WHAT

[23:41] <camelia> rakudo-moar ed3db12c7: OUTPUT: «(Sub)␤»

[23:41] <vrurg> use nqp; sub foo { }; my &f = &foo; say nqp::decont(&f).VAR.^name

[23:41] <evalable6> vrurg, rakudo-moar ed3db12c7: OUTPUT: «Sub␤»

[23:43] <vrurg> m: use nqp; sub foo { }; our &f = &foo; say nqp::decont(&f).VAR.^name

[23:43] <camelia> rakudo-moar ed3db12c7: OUTPUT: «Out-of-sync package detected in LANG1 at .VAR.^name␤Sub␤  (value in braid: GLOBAL, value in $*PACKAGE: GLOBAL)␤»

[23:44] <vrurg> m: module Foo { use nqp; sub foo { }; our &f is export = &foo; }; import Foo; say nqp::decont(&f).VAR.^name

[23:44] <camelia> rakudo-moar ed3db12c7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::decont, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3&foo; }; import Foo; say nqp::decont(&f)7⏏5.VAR.^name␤»

[23:45] <vrurg> m: use nqp; module Foo { sub foo { }; our &f is export = &foo; }; import Foo; say nqp::decont(&f).VAR.^name

[23:45] <camelia> rakudo-moar ed3db12c7: OUTPUT: «Callable␤»

[23:45] <vrurg> Why??

[23:45] <vrurg> m: use nqp; module Foo { sub foo { }; our &f is export = &foo; say "iscont=", nqp::iscont(&f); }; import Foo; say nqp::decont(&f).VAR.^name

[23:45] <camelia> rakudo-moar ed3db12c7: OUTPUT: «iscont=1␤Callable␤»

[23:46] <vrurg> m: use nqp; module Foo { sub foo { }; our &f is export = &foo; say "iscont=", nqp::iscont(&f); say "cont:", &f.VAR.^name }; import Foo; say nqp::decont(&f).VAR.^name

[23:46] <camelia> rakudo-moar ed3db12c7: OUTPUT: «iscont=1␤cont:Scalar␤Callable␤»

[23:48] <vrurg> Anybody around to tell me this is ok for &f to be a Scalar container??

