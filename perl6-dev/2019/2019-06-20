[01:10] *** vrurg_ joined
[01:10] *** vrurg left
[01:10] *** vrurg_ is now known as vrurg

[01:47] *** ggoebel left
[02:12] *** AlexDani` joined
[02:16] *** AlexDaniel left
[05:48] <japhb> Thank you to vrurg++ and the other folks fixing blockers; I've managed to complete my first full rebuild-and-install-everything runs in a good while.

[06:09] *** AlexDani` is now known as AlexDaniel

[06:09] *** AlexDaniel left
[06:09] *** AlexDaniel joined
[06:14] *** gfldex left
[06:20] *** gfldex joined
[06:48] *** [TuxCM] left
[06:49] *** AlexDaniel left
[07:23] <lizmat> Files=1275, Tests=108114, 206 wallclock secs (26.62 usr  7.36 sys + 2883.17 cusr 281.17 csys = 3198.32 CPU)

[07:58] *** gfldex left
[08:03] *** gfldex joined
[08:10] *** Guest69029 is now known as masak

[08:24] <|Tux|> Rakudo version 2019.03.1-635-g6c0235463 - MoarVM version 2019.05-87-ga601746d6

[08:24] <|Tux|> csv-test-xs-20      0.428 -  0.444

[08:24] <|Tux|> test-t --race       0.776 -  0.791

[08:24] <|Tux|> csv-ip5xs           1.125 -  1.222

[08:24] <|Tux|> test-t              1.733 -  1.742

[08:24] <|Tux|> test                6.657 -  6.878

[08:24] <|Tux|> test-t-20 --race    8.882 -  8.907

[08:24] <|Tux|> csv-parser         22.710 - 23.694

[08:24] <|Tux|> test-t-20          28.693 - 29.115

[08:24] <|Tux|> csv-ip5xs-20       62.010 - 62.070

[08:25] *** [TuxCM] joined
[08:39] <|Tux|> The beauty of using Unicode to print a bold comma:

[08:39] <|Tux|> m: 'say "\x[002c]\x[0327]\x[0326]"'

[08:39] <camelia> rakudo-moar 6c0235463: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant string "say \"\\x[002c]\\x[0327]\\x[0326]\"" in sink context (line 1)‚ê§¬ª

[08:39] <|Tux|> m: say "\x[002c]\x[0327]\x[0326]"

[08:39] <camelia> rakudo-moar 6c0235463: OUTPUT: ¬´,ÃßÃ¶‚ê§¬ª

[08:45] <lizmat> m: say "\x[002c]\x[0327]\x[0326]".uninames

[08:45] <camelia> rakudo-moar 6c0235463: OUTPUT: ¬´(COMMA COMBINING CEDILLA COMBINING COMMA BELOW)‚ê§¬ª

[09:11] <jnthn> morning, #perl6 o/

[09:11] <yoleaux> 14 Jun 2019 06:34Z <Xliff> jnthn: How often are the DLLs on gtk-dlls.p6c.org refreshed?

[09:12] <jnthn> .tell Xliff I'm pretty sure I didn't put those there, so no idea; sorry

[09:12] <yoleaux> jnthn: I'll pass your message to Xliff.

[09:13] *** Tux__ joined
[09:19] *** |Tux| joined
[09:32] *** |Tux| left
[09:33] *** |Tux| joined
[09:34] *** |Tux| left
[09:35] *** |Tux| joined
[09:35] *** |Tux| left
[09:37] *** AlexDaniel joined
[09:37] *** |Tux| joined
[09:38] *** |Tux| left
[09:45] <Guest77572> jnthn: did you have a good trip?

[09:48] *** |Tux| joined
[09:54] <jnthn> Guest77572: Yes, overall very good, just a bit too hot in the last couple of days.

[09:55] <Guest77572> I thought Scandinavia was cooler than Prague

[09:55] <jnthn> It was; the last couple of days were spent in Germany :)

[09:55] <Guest77572> ah

[10:10] <Guest77572> releasable: next

[10:10] <releasable6> Guest77572, Next release in ‚âà8 hours. 6 blockers. 258 out of 635 commits logged (‚ö† 3 warnings)

[10:10] <releasable6> Guest77572, Details: https://gist.github.com/1337a2edefb7640ead43007a59941959

[10:10] <Guest77572> cool

[10:15] *** AlexDaniel left
[10:36] *** Tux__ left
[11:34] *** dogbert11 joined
[11:49] *** ggoebel joined
[12:12] *** AlexDaniel joined
[12:22] *** vrurg left
[12:35] *** AlexDaniel left
[12:41] *** vrurg joined
[12:50] *** vrurg left
[12:55] *** vrurg joined
[12:55] *** ggoebel left
[13:00] *** pmurias joined
[13:01] <pmurias> I have a new use foo:from<node.js> problem

[13:01] <pmurias> the problem is that Perl 6 can be split into compilation and runtime

[13:02] <pmurias> so do we want to call the require at runtime and install a stub at compile time?

[13:03] <Geth> ¬¶ nqp: 4c5ec49dd0 | (Pawe≈Ç Murias)++ | 3 files

[13:03] <Geth> ¬¶ nqp: [js] Allow calling methods on a wrapped js function

[13:03] <Geth> ¬¶ nqp: 

[13:03] <Geth> ¬¶ nqp: Wrap js functions in a full class when passing them to Perl 6

[13:03] <Geth> ¬¶ nqp: land

[13:03] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/4c5ec49dd0

[13:16] *** vrurg left
[13:24] <pmurias> does such a scheme seem sane?

[13:25] <Geth> ¬¶ rakudo: 8abfbbc48e | (Pawe≈Ç Murias)++ | src/core/Kernel.pm6

[13:25] <Geth> ¬¶ rakudo: [js] Use nqp::uname on the js backend too

[13:25] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/8abfbbc48e

[13:25] <Geth> ¬¶ rakudo: 07f6ccc319 | (Pawe≈Ç Murias)++ | src/vm/js/README.md

[13:25] <Geth> ¬¶ rakudo: [js] Add a rakudo.js specific README for npm package

[13:25] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/07f6ccc319

[13:25] <Geth> ¬¶ rakudo: 8871219911 | (Pawe≈Ç Murias)++ | 3 files

[13:25] <Geth> ¬¶ rakudo: [js] Add a basic form of use Foo:from<node.js>

[13:25] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/8871219911

[13:30] *** vrurg joined
[13:51] *** lucasb joined
[14:00] *** [TuxCM] left
[14:00] <pmurias> nine: I have the same problem that Inline-Perl5 has requiring node.js modules at compile time and loading them at runtime

[14:16] <vrurg> pmurias: Funny, I have similar issue with require.

[14:20] *** vrurg_ joined
[14:22] *** vrurg left
[14:22] *** vrurg_ is now known as vrurg

[14:33] *** lizmat joined
[14:37] <pmurias> vrurg: what's your issue? 

[14:38] <vrurg> I need require to install a stub at compile time to be replaced with actually imported type objects or constants at runtime.

[14:39] <pmurias> vrurg: in pure Perl 6?

[14:39] <vrurg> You mean moar backend? Yes, but it should eventually work anywhere.

[14:40] <vrurg> The point is that require installs stubs already ‚Äì but does so with QAST::Var.

[14:41] <vrurg> That later gets optimized so when require tries to replace it with actual role it gets containerized into a Scalar and puned into a class. 

[14:42] <pmurias> vrurg: my problem is with the JavaScript node.js require() function loading js modules and compile time

[14:43] <pmurias> vrurg: it's more a conceptual problem with js not having a compile time execution stages as Perl 6 does

[14:45] <vrurg> pmurias: I see. But the requirement is similar: have a way to install an abstract stub to be replaced later with actual symbol at runtime. Right?

[14:45] <jnthn> vrurg: "gets optimized" - by what, lexical to local lowering?

[14:46] <jnthn> vrurg: If so, one can mark such things so that won't happen

[14:46] <vrurg> jnthn: right, lexical to local.

[14:46] <vrurg> jnthn: but installing a variable as a stub for class/role ‚Äì is it a right thing to do?

[14:50] <jnthn> Probably, because lexpads are immutable at runtime (well, the set of keys they have are)

[14:50] <jnthn> And QAST::Var is the way you get such a slot

[14:50] *** lizmat_ joined
[14:51] <jnthn> So the only thing that's needed is to make sure l2l doesn't go and eat it

[14:51] <jnthn> Probably also to make sure it's not being set up as a container viv slot

[14:52] <jnthn> And that require is then binding into it, not assigning

[14:52] *** lizmat left
[14:52] <vrurg> jnthn: I would prefer a more abstract QAST::Sym which would later turn into anything non-variable. But I'm not an expert in QAST whatsoever.

[14:52] <pmurias> jnthn: any thoughts how using modules from languages that load stuff at runtime should work?

[14:52] <vrurg> Anyway. REQUIRE_IMPORT does bind ‚Äì that's ok.

[14:54] *** AlexDaniel joined
[14:54] <vrurg> What does look wrong is Actions using declare_variable to install a stub. I would try working it out by adding a declare_symbol for sigilless entitites and which would take care of not allowing lowering.

[14:55] <pmurias> jnthn: does a scheme where at compile time we return stub objects that are filled in a runtime seem sane?

[14:57] <jnthn> vrurg: The number of node types in QAST is kept intentionally small; QAST::Var can mean a number of things.

[14:57] <jnthn> Including things that don't actually vary

[14:57] <jnthn> There's already a $*W.install_lexical_symbol that does what you want, I think :)

[14:58] <vrurg> Ok. Hopefully, last question: what annotation to use to prevent lowering? They're not documented and gathering them across the source is time consuming. 

[14:58] <jnthn> So declare_symbol is probably not needed, or just sugar for that.

[14:59] <vrurg> Somehow install_lexical_symbol didn't satisfy me. But I will re-check with the new knowledge.

[14:59] <jnthn> vrurg: Looks like if you call install_lexical_symbol then the lowerer won't touch it

[15:00] <vrurg> Ok, will work into this direction. Thanks!

[15:00] <jnthn> It only wants to work on var, param, and contvar

[15:00] <jnthn> And if you're using declare_variable you have contvar, so it noms it

[15:00] <jnthn> I'm surprised it uses declare_variable in require; that sounds wrong to me.

[15:03] <vrurg> jnthn: I agree, it is wrong. Though there is no hard if importing sigilled stuff. My plan is to choose between declare_variable/install_lexical_symbol depending on this. Hope it works.

[15:03] <TimToady> jnthn: yesterday I was asked if it's possible to introspect the allocated size of a REPR from npq, and I didn't know the answer offhand...

[15:04] <vrurg> Though this are is so much new to me that I'm certainly gonna make a lot of bumps.

[15:04] <vrurg> s/are/area/

[15:05] <TimToady> .oO(first bump)

[15:06] <pmurias> TimToady: it's not possible on js and jvm backends (not 100% about moar)

[15:07] <vrurg> pmurias: a stub would report back an error then. But having it where the backend allows for it would be beneficial for profiling.

[15:09] <TimToady> pmurias: thanks

[15:09] <pmurias> vrurg: I haven't actually checked if something like that is present on MoarVM

[15:10] <vrurg> pmurias: It is not yet.

[15:11] <pmurias> afk&

[15:11] <jnthn> vrurg: I think it would always be install_lexical_symbol, because we'd be binding the symbol exported by the module, not assigning it

[15:11] <jnthn> vrurg: Unless we think that we should be able to assign to the symbol before the `require`...though that feels dubious

[15:12] <TimToady> I don't see any reason to allow for that

[15:12] <[Coke]> TimToady: I heard your name in a dream today. someone told me you wanted a vi installer that let you run a basic version immediately, then swapped that running copy out for a full featured version when done. My brain is weird.

[15:12] <vrurg> jnthn: I got the point. 

[15:12] <[Coke]> Maybe it's sad that I couldn't get to TPC this year. :)

[15:13] <TimToady> [Coke]: nice to know there's someone out there crazier than me :)

[15:13] <jnthn> TimToady: I don't believe we provide a means for that during "normal" execution (though timotimo++ would probably have implemented it if anyone other than me has :)). The only way at present is the heap snapshot mechanism.

[15:13] <[Coke]> HA!

[15:15] <timotimo> oh greetings TimToady 

[15:16] <timotimo> yeah, i was thinking of allowing an op that gives you at the very least managed and unmanaged size of a given object

[15:17] <TimToady> me is still trying to get his brane back from a number of different assaults, but feels he's improving

[15:17] <timotimo> one way to get it to work, which is admittedly rather complicated, is to connect to your own running process via the debugger protocol :)

[15:17] *** pmurias left
[15:17] <[Coke]> Hope you feel better soon.

[15:18] <timotimo> aye, i wish for a brief reload period :)

[15:20] <timotimo> the debug protocol allows more direct access to an object's reference targetts, though. like, isn't there still something like accessing a p6opaque's attribute and causing it to initialize just by reading? or did we finally get rid of that completely?

[15:36] *** lizmat_ left
[15:40] <Kaiepi> i did some work to make it possible to build rakudo with the js vm but i got stuck at the very end on the part where it compiles CORE.setting.x because node kept running out of memory

[15:40] <Kaiepi> anyone know how to fix that?

[15:47] <vrurg> Kaiepi: try catching pmurias

[15:52] <jnthn> TimToady: Best wishes; glad you're feeling improvement and hope it continues that way.

[15:53] <jnthn> I'm aware there's lots of problem-solving tickets assigned to me (they piled up nicely while I doing a work trip, and some vacation); will try and pick those off in the coming days.

[16:13] <AlexDaniel> jnthn: maybe it's better to do it this way, actually

[16:13] <AlexDaniel> so that you see multiple problems at the same time

[16:13] <AlexDaniel> jnthn: some time ago I asked why we have rakudo and moar orgs separately. Thoughts?

[16:14] <AlexDaniel> jnthn: I don't see any advantage but I do see that it's impossible to move tickets from rakudo to problem-solving

[16:16] <AlexDaniel> AlexDaniel: sounds like something you should create a ticket for!

[16:20] * rba is asking myself if there are devs with multiple cores, ahm personalities

[16:20] <AlexDaniel> jnthn: https://github.com/perl6/problem-solving/issues/46

[16:20] <AlexDaniel> rba: oh that'd be great for multitasking. As far as I know I have only one core, if not less

[16:22] <rba> AlexDaniel+++

[16:22] <Geth> ¬¶ problem-solving: AlexDaniel self-assigned Moving tickets between rakudo and problem-solving repos is impossible https://github.com/perl6/problem-solving/issues/46

[16:26] <Kaiepi> rba, i may

[16:26] <Kaiepi> not entirely sure

[16:29] <AlexDaniel> .oO(two developers for the price of one)

[16:32] <jnthn> Hmm, did the location that perl6.moarvm is installed to change at some point?

[16:33] <jnthn> Seems some share => lib change, or vice versa?

[16:53] *** benchable6 joined
[16:55] *** greppable6 joined
[16:55] *** reportable6 joined
[16:55] *** ChanServ sets mode: +v reportable6

[16:56] *** TreyHarris joined
[16:57] *** nativecallable6 joined
[16:57] *** ChanServ sets mode: +v nativecallable6

[16:57] *** squashable6 joined
[17:02] <vrurg> jnthn: I gues it did. patrickb separated nqp and rakudo installs.

[17:17] *** vrurg left
[17:31] *** vrurg joined
[17:37] <jnthn> dinner &

[17:43] <TreyHarris> Could I have contributor access to rakudo on GitHub? I wanted to modify a few tickets

[17:46] <AlexDaniel> TreyHarris: sure, there: https://github.com/rakudo/rakudo/invitations

[17:47] <AlexDaniel> TreyHarris: though for committing significant chunks to rakudo you'll need to sign a CLA and stuff, but all the other minor things you can already do now

[17:49] <TreyHarris> AlexDaniel: I already do pullreqs for any large changes in perl6 org (though someone always reminds me I don't have to when I do ;-)

[17:55] <AlexDaniel> TreyHarris: if you need me to raise Write privs to Admin let me know

[17:56] <AlexDaniel> I guess some useful issue tracker features are admin only

[17:57] <TreyHarris> AlexDaniel: It's okay for what I wanted--I just marked a duplicate. Is there a convention on whether to close dupes or keep them open?

[17:57] <AlexDaniel> TreyHarris: I typically close the old one

[17:57] <TreyHarris> k. Thanks!

[17:58] <AlexDaniel> if the new one has better info, of course, and that's usually the case

[17:58] <TreyHarris> Well, the new one is mine, so of course it does ;-)

[18:00] <TreyHarris> I asked a question on #perl6 last night nobody answered, so I thought I'd try again here... is there a package on CPAN or GitHub that shows good use of inline POD to self-document all the methods, attributes, and arguments of a class?

[18:00] <TreyHarris> Sorry, not "is there", but "would you recommend one to look at"?

[18:01] <TreyHarris> There's an entirely undocumented library I'm using and I thought I might as well document it as I'm learning it, but I want to do it right

[18:02] <AlexDaniel> TreyHarris: yeah, I guess that library is a good example, just check it in like two weeks after your PRs are merged :)

[18:02] <TreyHarris> AlexDaniel: what library?

[18:03] <TreyHarris> It annoys me to no end when someone sends me a pull req for a docfix that doesn't use the correct doc syntax, whatever the language, so I don't want to be That Guy

[18:04] <AlexDaniel> TreyHarris: it's a joke, I'm saying we'll have a package with good example of POD6 usage once *you* add the docs to whatever library you're trying to use :)

[18:04] <TreyHarris> AlexDaniel: oh, I get it. heh. p6doc doesn't seem to work correctly in a lot of cases anyway, so I'm not sure how I'll know, but I'll give it the old college try.

[18:05] <AlexDaniel> greppable6: =head2

[18:05] <AlexDaniel> hellooo?

[18:06] <greppable6> AlexDaniel, 9052 lines, 390 modules: https://gist.github.com/6dc650316070473937e2370710e03f86

[18:06] <AlexDaniel> TreyHarris: ‚Üë seems to be a list of documented modules!

[18:07] <tobs> fwiw, I was avoiding #| and #= so far and made the headings and signatures myself. #|¬´¬ª and #=¬´¬ª sure are nice but I wasn't content with how whatever mi6 used then rendered them, iirc

[18:08] <tobs> (my example would be https://github.com/taboege/p6-OEIS/blob/master/lib/OEIS.pm6)

[18:08] <TreyHarris> This is (one example of) what I got when I cleared out my p6docs and tried to rebuild them: https://gist.github.com/treyharris/bf75917d17375aa5ee109b1df7332899

[18:09] <TreyHarris> And `p6doc list` ends with a ton of "sub whatever" output, but you can't look up the items containing a space AFAICT

[18:11] <TreyHarris> Yikes, even more `method whatever` lines--almost 800.

[18:13] <TreyHarris> oh... that's what p6doc -f is for, and you leave out the "sub " or "method " bit. hrm. that was a bit unclear

[18:16] <TreyHarris> still don't know what's going on with the `p6doc Str` example I gist'ed, though...

[18:18] <TreyHarris> Ah, looks like Str is broken, as `p6doc -f uniparse` dies the same way

[19:25] *** vrurg left
[19:46] *** vrurg joined
[19:51] *** ggoebel joined
[20:20] *** lucasb left
[20:28] *** lizmat joined
[20:52] *** lizmat left
[21:41] *** go|dfish joined
[21:44] <Geth> ¬¶ rakudo: vrurg++ created pull request #3005: Make require import any kind of symbols correctly

[21:44] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3005

[21:48] <Geth> ¬¶ roast: vrurg++ created pull request #554: Tests for rakudo/rakudo#3005

[21:48] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/pull/554

[21:48] <synopsebot_> RAKUDO#3005 [open]: https://github.com/rakudo/rakudo/pull/3005 Make require import any kind of symbols correctly

[21:59] *** pmurias joined
[21:59] <pmurias> Kaiepi: ping

[21:59] <pmurias> Kaiepi: re building rakudo.js when changing the build system did you pass to node the option that increases the memory limit

[22:00] <pmurias> Kaiepi: --max-old-space-size=8192

[22:02] <Kaiepi> i tried that pmurias but i think it was set too low

[22:08] <pmurias> Kaiepi: maybe, what did you change so that you get the out of memory limit?

[22:09] <Kaiepi> nothing

[22:09] <Kaiepi> at least on the part that makes it run out of memory

[22:11] <pmurias> Kaiepi: so you are just building rakudo HEAD and it runs out of memory?

[22:11] <Kaiepi> HEAD from 2 weeks ago at least

[22:13] <pmurias> I sometimes had that error when I had too many tabs open in Chrome and it was eating too much memory for rakudo.js to build

[22:14] *** AlexDaniel left
[22:14] <pmurias> Kaiepi: I built HEAD rakudo.js (with head NQP) on my machine today

[22:15] <Kaiepi> any changes in the past couple weeks?

[22:16] <Geth> ¬¶ rakudo: 9dca33b620 | (Vadim Belman)++ | src/Perl6/Actions.nqp

[22:16] <Geth> ¬¶ rakudo: Make require import any kind of symbols correctly

[22:16] <Geth> ¬¶ rakudo: 

[22:16] <Geth> ¬¶ rakudo: Prevent extra containerization of type objects and constants.

[22:16] <Geth> ¬¶ rakudo: 

[22:16] <Geth> ¬¶ rakudo: rakudo/rakudo#2983

[22:16] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/9dca33b620

[22:16] <synopsebot_> RAKUDO#2983 [open]: https://github.com/rakudo/rakudo/issues/2983 [regression] Cannot mix in non-composable type Any into object 

[22:16] <Geth> ¬¶ rakudo: 63b9e1fe37 | (Vadim Belman)++ (committed using GitHub Web editor) | src/Perl6/Actions.nqp

[22:16] <Geth> ¬¶ rakudo: Merge pull request #3005 from vrurg/rakudo_2983

[22:16] <Geth> ¬¶ rakudo: 

[22:16] <Geth> ¬¶ rakudo: Make require import any kind of symbols correctly

[22:16] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/63b9e1fe37

[22:16] <Geth> ¬¶ roast: 708b2d3a46 | (Vadim Belman)++ | 2 files

[22:16] <Geth> ¬¶ roast: Tests for rakudo/rakudo#3005

[22:16] <synopsebot_> RAKUDO#3005 [closed]: https://github.com/rakudo/rakudo/pull/3005 Make require import any kind of symbols correctly

[22:16] <Geth> ¬¶ roast: 

[22:16] <Geth> ¬¶ roast: Testing if type objects and constants are imported as is while scalars

[22:16] <Geth> ¬¶ roast: preserve their container.

[22:16] <Geth> ¬¶ roast: 

[22:16] <Geth> ¬¶ roast: rakudo/rakudo#2983

[22:16] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/708b2d3a46

[22:16] <Geth> ¬¶ roast: b24d9400ef | (Vadim Belman)++ (committed using GitHub Web editor) | 2 files

[22:16] <Geth> ¬¶ roast: Merge pull request #554 from vrurg/rakudo_2983

[22:16] <Geth> ¬¶ roast: 

[22:16] <Geth> ¬¶ roast: Tests for rakudo/rakudo#3005

[22:16] <pmurias> Kaiepi: hmm, I don't think anything that should affect memory usage

[22:16] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/b24d9400ef

[22:17] <pmurias> Kaiepi: I updated the deps to onces that work on newer nodes

[22:17] <Kaiepi> what versions are you talking about

[22:17] <Kaiepi> i'm running 10.something

[22:17] <pmurias> v12.3.1

[22:19] <pmurias> that's what I built on today

[22:19] <pmurias> Kaiepi: what os are you using?

[22:19] <Kaiepi> openbsd 6.5

[22:19] <Kaiepi> current

[22:20] <pmurias> I haven't tried it on anything bsd maybe it's just a question of a bigger memory limit being used there

[22:21] <pmurias> * being needed

[22:37] *** pmurias left
[22:44] *** vrurg left
[22:47] *** ggoebel left
[22:48] *** vrurg joined
[22:50] *** vrurg left
[22:56] *** lizmat joined
[23:10] *** a3f left
[23:22] *** a3f joined
