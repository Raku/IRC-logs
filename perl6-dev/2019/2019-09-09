[00:04] *** lucasb left
[00:05] *** Kaiepi left
[00:41] *** Xliff left
[00:45] <Geth> ¦ roast: vrurg++ created pull request #575: Add tests for decontainerization of Hash -> Map coercion

[00:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/575

[00:56] <Geth> ¦ rakudo: vrurg++ created pull request #3174: Provide means of preserving the decontainerization of values on Hash -> Map coercion

[00:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3174

[01:01] <Geth> ¦ rakudo: vrurg self-assigned Unpacking a |%h.Map has a different behaviour from 2019.07.1 https://github.com/rakudo/rakudo/issues/3168

[02:02] *** Kaiepi joined
[02:39] <Geth> ¦ rakudo: vrurg++ created pull request #3175: Further cleanup of build subsystem.

[02:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3175

[02:41] <Geth> ¦ rakudo/master: 7 commits pushed by (Vadim Belman)++

[02:41] <Geth> ¦ rakudo/master: 499b15b4fd | nqp-configure submodule update

[02:41] <Geth> ¦ rakudo/master: 7cf2481d34 | Merge branch 'master' of https://github.com/rakudo/rakudo into rakudo_3151

[02:41] <Geth> ¦ rakudo/master: ab7e5559e5 | Add rakudo.js and perl6-debug.js to .gitignore

[02:41] <Geth> ¦ rakudo/master: a69fdc41e6 | Futher unification of JS backend with others

[02:41] <Geth> ¦ rakudo/master: 6c1af04e14 | Fix <backend>_HARNESS_TYPE not been set

[02:41] <Geth> ¦ rakudo/master: b0fc0fa158 | Make COREs compile in blib

[02:41] <Geth> ¦ rakudo/master: 59e683f680 | Merge pull request #3175 from vrurg/rakudo_3151

[02:41] <Geth> ¦ rakudo/master: review: https://github.com/rakudo/rakudo/compare/66e0561f91c6...59e683f68075

[02:42] <vrurg> .tell pmurias Please, check my latest merge. I made it compile perl6.js and copy it into rakudo.js for back compat purpose. Otherwise things work on my macos and even passes most core tests.

[02:42] <tellable6> vrurg, I'll pass your message to pmurias

[03:04] *** evalable6 left
[03:05] *** Kaiepi left
[03:05] *** evalable6 joined
[04:30] <[Tux]> Rakudo version 2019.07.1-260-g9dd67cb37 - MoarVM version 2019.07.1-188-g289e9dfce

[04:30] <[Tux]> csv-test-xs-20      0.440 -  0.440

[04:30] <[Tux]> csv-ip5xs           0.740 -  0.746

[04:30] <[Tux]> test-t --race       0.892 -  0.920

[04:30] <[Tux]> test-t              1.810 -  1.875

[04:30] <[Tux]> csv-ip5xs-20        5.100 -  5.424

[04:30] <[Tux]> test                6.943 -  7.278

[04:30] <[Tux]> test-t-20 --race    9.471 -  9.673

[04:30] <[Tux]> csv-parser         21.994 - 23.820

[04:30] <[Tux]> test-t-20          30.187 - 31.124

[04:30] <[Tux]> (from yesterday)

[05:01] *** Kaiepi joined
[05:48] *** robertle left
[06:04] *** Kaiepi left
[06:54] <Geth> ¦ problem-solving: AlexDaniel assigned to jnthn Issue stage0 is a binary blob, how can we do without it? https://github.com/perl6/problem-solving/issues/100

[07:50] *** robertle joined
[08:16] *** Kaiepi joined
[08:45] *** Kaiepi left
[08:51] *** leont joined
[08:57] *** leont left
[10:57] *** Kaiepi joined
[11:53] *** lizmat joined
[12:02] <lizmat> .

[12:02] <tellable6> 2019-08-26T21:53:56Z #moarvm <japhb> lizmat: I have not been using forcegc; frankly I'd just like to detect that a GC *happened*, and get an idea of which parts of a complicated test run are causing GC churn and which ones are relatively "GC quiet"

[12:02] <tellable6> 2019-09-05T01:28:32Z #perl6-dev <AlexDaniel> lizmat: .unival is now *much* faster than just 2x https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-09-05#l7

[12:02] <tellable6> 2019-09-05T15:29:59Z #perl6 <Grinnz> lizmat: maybe you should edit your early post that suggests camelia to indicate the direction changed to raku, since new commenters (understandably) aren't reading all of the posts to find this out

[12:02] <tellable6> 2019-09-08T15:28:40Z #whateverable <Xliff> lizmat Do you still have plushie camelias available?

[12:02] <tellable6> https://gist.github.com/80cd35795ecc19710e53c992c8c1c31d

[12:45] *** lizmat left
[12:50] *** lizmat joined
[13:28] *** camelCaser left
[13:42] *** lucasb joined
[13:56] <japhb> OK, it's a little weird that it would gist a single remaining line.  Is it because of that line's length?

[13:57] <japhb> Also, if it's going to decide to gist at all, why not gist all of them sent to the same user?

[13:57] <japhb> (in one gist, I mean)

[14:05] <timotimo> tellable6: source

[14:05] <tellable6> timotimo, https://github.com/perl6/whateverable

[14:05] <timotimo> :P

[14:10] <vrurg> japhb: the last line just happens to be too long to fit into IRC standard.

[14:13] <lizmat> how did it get into it then ?

[14:13] <lizmat> I mean, from an IRC message, I presume ?

[14:13] <timotimo> tellable puts a bunch of stuff in front of the message itself

[14:37] <AlexDaniel> actually it's probably not too long, but almost too long. Tellable is probably overcautious

[14:38] <AlexDaniel> but yeah, it should be fixed

[14:38] <timotimo> the whateverables could talk to each other to figure out the maximum message length

[14:45] <AlexDaniel> jnthn: I don't quite get your answer… So you think that what we have is OK for debian, and we're going to ignore that issue until they tell us otherwise?

[14:59] <jnthn> AlexDaniel: I don't know what we can realistically do about the issue even if they did tell us otherwise.

[15:00] <jnthn> But such a policy would essentially mean "you can't use a bootstrapped compiler unless you're so successful you have multiple competing implementations" or something.

[15:02] <AlexDaniel> jnthn: what about creating a micro implementation of nqp that's full enough for bootstrapping purposes?

[15:04] <AlexDaniel> it doesn't sound fun or quick, but still

[15:04] <jnthn> a) it wouldn't be very micro given it needs to compile a large part of grammers, support OO, etc. b) "what about" - *who* is going to do that?

[15:05] <jnthn> The answer is "probably nobody".

[15:05] <jnthn> Unless somebody shows up who is specifically interested to do that :)

[15:06] <AlexDaniel> like a gsoc project, or something? ;)

[15:06] <jnthn> There's so many better things I can think of to do with a gsoc project :/

[15:06] <AlexDaniel> ok I got it, thanks

[15:07] <jnthn> Basically, I find the issue a bit academic/unpragmatic.

[15:09] <AlexDaniel> .tell robertle please let me know if what we have with stage0 is ok for debian or not. I created this ticket https://github.com/perl6/problem-solving/issues/100

[15:09] <tellable6> AlexDaniel, I'll pass your message to robertle

[15:09] <AlexDaniel> .tell robertle Basically, the upstream guide talks about compiling for other architectures, but we don't have this problem. The only problem is purity of the build itself (“Reflections on Trusting Trust” stuff)

[15:09] <tellable6> AlexDaniel, I'll pass your message to robertle

[15:11] <AlexDaniel> if it's not ok for debian and they throw our package away, then the issue is very pragmatic

[15:12] <AlexDaniel> so that's why asked my first question the way I did, so it's ok and we just wait

[15:39] *** robertle left
[16:07] *** Kaiepi left
[16:19] *** MasterDuke left
[16:37] *** Kaiepi joined
[16:51] *** robertle joined
[17:07] *** grayrider left
[17:19] *** camelCaser joined
[17:28] *** camelCaser left
[17:28] *** camelCaser joined
[18:28] *** MasterDuke joined
[19:39] *** sortiz joined
[19:44] *** sortiz left
[20:38] *** Ven`` joined
[20:42] *** Xliff joined
[20:43] <Xliff> SmokeMachine: https://paste.fedoraproject.org/paste/XL0L6I5tOQTg8kDkxzb9BQ

[20:43] <tellable6> 2019-09-09T19:03:00Z #perl6 <patrickb> Xliff re DBIish and MSSQL using DBDish::ODBC. I use that in a production system at work

[20:43] <tellable6> 2019-09-09T19:04:21Z #perl6 <patrickb> Xliff Prepared statements do not work and are not trivial to implement.

[20:43] <tellable6> 2019-09-09T19:07:39Z #perl6 <patrickb> Xliff there is also a PR waiting for merge that fixes some column types https://github.com/salortiz/DBDish-ODBC/pull/5

[20:44] <Xliff> .tell patrickb Thanks for the information. I was hoping it would be as simple as mapping to the right routine. 

[20:44] <tellable6> Xliff, I'll pass your message to patrickb

[20:44] <SmokeMachine> Xliff: What's the code you are using to test?

[20:44] <Xliff> Coming up.

[20:45] <Xliff> https://paste.fedoraproject.org/paste/chSTlQ4tqhhIe8Y7vObucg

[20:54] <SmokeMachine> Xliff: does it work if you run: `say $*RED-DB.execute: "select * from poe"`?

[21:00] <lizmat> notable6: weekly

[21:00] <notable6> lizmat, 20 notes: https://gist.github.com/a30f53468e16743882deff43ca71c3b3

[21:11] <Geth> ¦ rakudo: b11e856f3d | (Nick Logan)++ (committed using GitHub Web editor) | src/Perl6/World.nqp

[21:11] <Geth> ¦ rakudo: Remove redundant exception reporting

[21:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b11e856f3d

[21:18] <lizmat> notable6: weekly reset

[21:18] <notable6> lizmat, Moved existing notes to “weekly_2019-09-09T21:18:12Z”

[21:34] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/09/09/2019-35-6-ovid-trepidated/

[21:45] <Xliff> SmokeMachine: Using that gives the same error. See: say $*RED-DB.execute: "select * from poe

[21:46] <Xliff> *See: https://paste.fedoraproject.org/paste/E1dXRP2k4MJrMtiFILeTEQ

[22:16] *** tobs joined
[22:24] *** Ven`` left
[22:24] *** Ven`` joined
[22:24] *** Ven`` left
[22:38] *** Kaiepi left
[22:39] *** Xliff left
[22:39] *** Kaiepi joined
[22:42] <SmokeMachine> Xliff: your model has no columns...

[22:42] <tellable6> SmokeMachine, I'll pass your message to Xliff

[23:23] *** Kaiepi left
[23:23] *** Kaypie joined
[23:45] <SmokeMachine> https://github.com/FCO/Red/wiki

[23:45] <SmokeMachine> sorry, wrong channel

[23:52] *** lucasb left
