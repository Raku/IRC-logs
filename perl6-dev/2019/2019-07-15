[00:02] <AlexDaniel> 6c: say Int + 0

[00:02] <committable6> AlexDaniel, https://gist.github.com/e51dfe0c33cb5515befead515591d9e9

[00:02] <AlexDaniel> timotimo: ?

[00:02] <timotimo> huh, really?

[00:03] <timotimo> i did not know that

[00:04] <AlexDaniel> so the issue is that it didn't just change, but there's a 6.c test too

[00:04] <AlexDaniel> https://github.com/perl6/roast/commit/d60f851775c2e5944db00f946b39430250243809

[00:07] <AlexDaniel> 6c: my $x; say $x + 5

[00:07] <committable6> AlexDaniel, https://gist.github.com/939ebc603c40b83f3d98f6912262065f

[00:08] <AlexDaniel> hm, that didn't really change

[00:08] <AlexDaniel> 6c: my Int $x; say $x + 5

[00:08] <timotimo> Any vs Int, right?

[00:08] <committable6> AlexDaniel, https://gist.github.com/a24604cbc614ae9f450189ccd2f1e443

[00:12] <AlexDaniel> well, here's a ticket: https://github.com/rakudo/rakudo/issues/3051

[00:48] <Geth> Â¦ problem-solving: AlexDaniel assigned to jnthn Issue What can and what cannot be changed in 6.c-errata? https://github.com/perl6/problem-solving/issues/62

[01:11] <Geth> Â¦ rakudo: vrurg++ created pull request #3052: Protect class Perl version method with Lock

[01:11] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3052

[01:30] *** epony left
[01:44] <Geth> Â¦ rakudo: 4c10373b87 | (Vadim Belman)++ | src/core/Perl.pm6

[01:44] <Geth> Â¦ rakudo: Protect class Perl version method with Lock

[01:44] <Geth> Â¦ rakudo: 

[01:44] <Geth> Â¦ rakudo: Make it thread-safe, as noticed by Jonathan:

[01:44] <Geth> Â¦ rakudo: https://github.com/rakudo/rakudo/commit/65207879172e6203dde3b40d2b8eb75d8e7c7978#r34296824

[01:44] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4c10373b87

[01:44] <Geth> Â¦ rakudo: 4eb4c0c795 | (Vadim Belman)++ (committed using GitHub Web editor) | src/core/Perl.pm6

[01:44] <Geth> Â¦ rakudo: Merge pull request #3052 from vrurg/perl-version-threadsafe

[01:44] <Geth> Â¦ rakudo: 

[01:44] <Geth> Â¦ rakudo: Protect class Perl version method with Lock

[01:44] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4eb4c0c795

[03:19] *** AlexDani` joined
[03:23] *** AlexDaniel left
[03:30] *** AlexDani` is now known as AlexDaniel

[03:30] *** AlexDaniel left
[03:30] *** AlexDaniel joined
[05:18] *** ufobat joined
[05:56] *** epony joined
[06:23] *** ufobat_ joined
[06:26] *** ufobat left
[06:42] *** MasterDuke left
[06:50] *** notable6 left
[06:50] *** benchable6 left
[06:50] *** coverable6 left
[06:50] *** zostay left
[06:50] *** tyil[m] left
[06:50] *** shareable6 left
[06:50] *** committable6 left
[06:50] *** reportable6 left
[06:50] *** nine left
[07:16] *** tyil[m] joined
[07:16] *** shareable6 joined
[07:16] *** committable6 joined
[07:16] *** reportable6 joined
[07:16] *** nine joined
[07:16] *** card.freenode.net sets mode: +vvv shareable6 committable6 reportable6

[07:16] *** notable6 joined
[07:16] *** benchable6 joined
[07:16] *** coverable6 joined
[07:16] *** zostay joined
[07:16] *** card.freenode.net sets mode: +vvv notable6 benchable6 coverable6

[07:23] <lizmat> Files=1275, Tests=108183, 205 wallclock secs (26.92 usr  8.11 sys + 2835.26 cusr 278.60 csys = 3148.89 CPU)

[07:58] <|Tux|> Rakudo version 2019.03.1-714-g4eb4c0c79 - MoarVM version 2019.07-5-gdefe0a959

[07:58] <|Tux|> csv-test-xs-20      0.434 -  0.439

[07:58] <|Tux|> csv-ip5xs           0.683 -  0.696

[07:58] <|Tux|> test-t --race       0.798 -  0.905

[07:58] <|Tux|> test-t              1.668 -  1.668

[07:58] <|Tux|> csv-ip5xs-20        4.947 -  5.196

[07:58] <|Tux|> test                6.817 -  7.112

[07:58] <|Tux|> test-t-20 --race    8.773 -  8.862

[07:58] <|Tux|> csv-parser         21.829 - 22.384

[07:58] <|Tux|> test-t-20          27.444 - 28.610

[08:26] *** tyil[m] left
[08:26] *** shareable6 left
[08:26] *** committable6 left
[08:26] *** reportable6 left
[08:26] *** nine left
[08:27] *** notable6 left
[08:27] *** benchable6 left
[08:27] *** coverable6 left
[08:27] *** zostay left
[08:30] *** patrickb joined
[08:36] *** notable6 joined
[08:36] *** coverable6 joined
[08:36] *** benchable6 joined
[08:36] *** ChanServ sets mode: +v notable6

[08:36] *** ChanServ sets mode: +v coverable6

[08:36] *** ChanServ sets mode: +v benchable6

[08:36] *** zostay joined
[08:36] *** nine joined
[08:36] *** reportable6 joined
[08:36] *** committable6 joined
[08:36] *** shareable6 joined
[08:36] *** ChanServ sets mode: +v reportable6

[08:36] *** ChanServ sets mode: +v committable6

[08:36] *** ChanServ sets mode: +v shareable6

[08:37] <Geth> Â¦ star: hankache self-assigned Offer zip builds https://github.com/rakudo/star/issues/140

[08:40] *** ufobat_ left
[08:42] *** tyil[m] joined
[08:43] *** tyil[m] is now known as Guest1109

[08:52] * lizmat hopes for a release today

[10:56] *** patrickb left
[11:14] *** ufobat joined
[11:21] <timotimo> can my last nqp commit make it into the release?

[11:35] <lizmat> I think there is already an NQP and a MoarVM released

[11:35] *** patrickb joined
[11:35] <lizmat> but I think nine also had a fix in Moar that probably should be in the release

[11:35] <lizmat> so maybe a point release is warranted ?

[11:54] <tbrowder> hi, all. i'm working on a fix for GH #3036 and shortly will post a gist showing results of a WIP PR. the PR, ideally, will improve error msgs for embedded comments, leading declarator blocks, and trailing declarator blocks.

[11:56] <tbrowder> so far i have been fairly successful with the first two, but have not found a working solution for the trailing declarator. maybe moritz can suggest a solution.

[11:56] <timotimo> cool, is that the errors that normally tell you that the infix operator "=" is in a wrong spot or something?

[11:59] <tbrowder> well, my solution shows the invalid opening bracket. the message is basically a dup of the panic msg in the current code for the embedded comment. let me go post the gist.

[12:00] <tbrowder> here it is: https://gist.github.com/tbrowder/085ceedebabd38d1a73a46e360e3c2db

[12:00] <timotimo> ah, it's that kind of comment

[12:01] <timotimo> pretty amazing that the error seems to also have had a newline in there

[12:10] <tbrowder> well, i so far haven't had much luck with tidying stuff--there be dragons!

[12:12] <tbrowder> i mean as far as editing the remaing cruft after the error msg...not sure if it can be done

[12:14] <timotimo> the "expecting any of", you mean?

[12:15] <tbrowder> yes!

[12:16] <timotimo> if there isn't yet a way, should be possible to make one

[12:17] <tbrowder> i'll push the current state of the PR soon so folks can see what works so far.

[12:19] <tbrowder> i've tried many iterations of the grammar tokens for the trailing decl blk but no progress yet.

[13:09] *** lucasb joined
[13:22] *** pamplemousse joined
[14:12] *** vrurg left
[14:13] *** vrurg joined
[14:26] <Geth> Â¦ nqp/release-2019.07: a2e8d634ae | (Timo Paulssen)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | src/vm/moar/HLL/Backend.nqp

[14:26] <Geth> Â¦ nqp/release-2019.07: fix profiling gc/deallocations bug swapping thread/seqnum

[14:26] <Geth> Â¦ nqp/release-2019.07: review: https://github.com/perl6/nqp/commit/a2e8d634ae

[14:26] <AlexDaniel> timotimo: like this?

[14:27] <AlexDaniel> lizmat: https://github.com/rakudo/rakudo/issues/3051#issuecomment-511425123

[14:27] <timotimo> yes, that's lovely

[14:28] <AlexDaniel> I agree about the revert, yes

[14:28] *** pamplemousse left
[14:41] *** mst_ joined
[14:41] *** mst_ left
[14:41] *** mst_ joined
[14:43] <lizmat> reportable6: 2019-07-08T00:00:00 2019-07-15T00:00:00Z

[14:43] <reportable6> lizmat, OK, working on it! This may take up to 40 seconds

[14:43] <lizmat> notable6: weekly

[14:43] <notable6> lizmat, 17 notes: https://gist.github.com/178db23888f621e2403310f26a1c39f6

[14:44] <reportable6> lizmat, https://gist.github.com/d1b9ed765a76ca4af8390f5020293cbf

[14:44] <Geth> Â¦ rakudo/release-2019.07: b1cb2b040a | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[14:44] <Geth> Â¦ rakudo/release-2019.07: Revert "Made all operators in Real require definite objects"

[14:44] <Geth> Â¦ rakudo/release-2019.07: 

[14:44] <Geth> Â¦ rakudo/release-2019.07: This reverts commit d8ad62249ae0e2eca954a1cc92d62accbb9078ad.

[14:44] <Geth> Â¦ rakudo/release-2019.07: 

[14:44] <Geth> Â¦ rakudo/release-2019.07: Resolves GH-3051.

[14:44] <Geth> Â¦ rakudo/release-2019.07: review: https://github.com/rakudo/rakudo/commit/b1cb2b040a

[14:44] *** mst left
[14:46] *** mst_ is now known as mst

[14:47] <Geth> Â¦ rakudo/release-2019.07: a67ba0c09f | (Vadim Belman)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | 3 files

[14:47] <Geth> Â¦ rakudo/release-2019.07: Move VERSION file back to the root of build directory

[14:47] <Geth> Â¦ rakudo/release-2019.07: 

[14:47] <Geth> Â¦ rakudo/release-2019.07: This would simplify life for some infrastructure scripts.

[14:47] <Geth> Â¦ rakudo/release-2019.07: 

[14:47] <Geth> Â¦ rakudo/release-2019.07: Following the discussion here:

[14:47] <Geth> Â¦ rakudo/release-2019.07: 

[14:47] <Geth> Â¦ rakudo/release-2019.07: https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-07-11#l47

[14:47] <Geth> Â¦ rakudo/release-2019.07: review: https://github.com/rakudo/rakudo/commit/a67ba0c09f

[14:49] <AlexDaniel> lizmat: I also do hope for a release today :)

[14:49] <lizmat> :-)

[14:49] <AlexDaniel> as for moarvm point release, I'm not sure

[14:49] <AlexDaniel> there was also a fix by Kaiepi

[14:49] <AlexDaniel> (for the ticket that was marked as blocker, but we decided that it's alright to release with that bug)

[15:11] *** pamplemousse joined
[15:16] *** patrickb left
[15:24] *** pamplemousse left
[15:27] *** pamplemousse joined
[15:52] *** pamplemousse left
[15:58] <Geth> Â¦ roast/rakudo-release-2019.07: 40098aa714 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S03-operators/misc.t

[15:58] <Geth> Â¦ roast/rakudo-release-2019.07: Revert "Changes to conform with fix of use of Real type object in operators"

[15:58] <Geth> Â¦ roast/rakudo-release-2019.07: 

[15:58] <Geth> Â¦ roast/rakudo-release-2019.07: This reverts commit d60f851775c2e5944db00f946b39430250243809.

[15:58] <Geth> Â¦ roast/rakudo-release-2019.07: 

[15:58] <Geth> Â¦ roast/rakudo-release-2019.07: See rakudo/rakudo#3051.

[15:58] <Geth> Â¦ roast/rakudo-release-2019.07: review: https://github.com/perl6/roast/commit/40098aa714

[15:58] <synopsebot> RAKUDO#3051 [closed]: https://github.com/rakudo/rakudo/issues/3051 [6.c][BLOCKER] 6.c and `Int < 0`

[15:59] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/07/15/2019-28-perl-6-documentation/

[15:59] <lizmat> notable6: weekly

[15:59] <notable6> lizmat, 18 notes: https://gist.github.com/3483c156b5d72159d19c3216294c1c44

[16:00] <lizmat> notable6: weekly reset

[16:00] <notable6> lizmat, Moved existing notes to âweekly_2019-07-15T16:00:25Zâ

[16:00] <lizmat> weekly: new pkgs for recently released distributions: https://github.com/nxadm/rakudo-pkg/releases/tag/v2019.03.1-03

[16:00] <notable6> lizmat, Noted!

[16:02] <AlexDaniel> âIs that programming verbosity? No, it's programming clarity.â

[16:02] <AlexDaniel> frame it :)

[16:04] <AlexDaniel> greppable6: Â»\.

[16:04] <greppable6> AlexDaniel, 882 lines, 145 modules: https://gist.github.com/d2896cfa8e64dfff922c5b2eebb2d362

[16:07] *** Guest1109 left
[16:07] *** Guest1109 joined
[16:47] *** b2gills1 joined
[16:49] *** b2gills left
[16:50] *** b2gills joined
[16:52] *** b2gills1 left
[16:53] *** b2gills1 joined
[16:54] *** TreyHarris joined
[16:55] *** b2gills left
[16:56] *** b2gills joined
[16:57] *** b2gills1 left
[16:58] *** b2gills1 joined
[16:59] <TreyHarris> Question that I'll pose on problem-solving if it's a discussion topic, but wanted to see if it is... unless doesn't take else or other chained followups because "if not" is exactly equivalent. But there isn't an exact equivalent for without except "if not defined(...)" [with the parens necessary for exact equivalence, yes?], is there? I'm finding myself really wishing for "without...[orwithout...]else" in

[16:59] <TreyHarris> top-level executables where you often have a lot of logic checking if conditions for execution exist, often including checking the presence of user flags, where without is much clearer than "if not defined..."

[17:00] *** b2gills left
[17:01] *** b2gills joined
[17:03] *** b2gills1 left
[17:05] *** pamplemousse joined
[17:10] <AlexDaniel> TreyHarris: it also prevents double negation which is just hard to read

[17:10] <AlexDaniel> there are also some weird things we have like `orelse`

[17:11] <AlexDaniel> so I'd prefer not to add orwithout :)

[17:11] <AlexDaniel> greppable6: orelse

[17:11] <greppable6> AlexDaniel, 64 lines, 21 modules: https://gist.github.com/31071b3428a7b24fcf5d69542fa13532

[17:14] <TreyHarris> AlexDaniel: Ah, you were just a moment too late: https://github.com/perl6/problem-solving/issues/63 -- but I'd say that "without EXPR1 orelse EXPR2 orelse EXPR3" isn't really a substitute any more than "if EXPR1 or EXPR2 or EXPR3" is for elsif.

[17:20] <AlexDaniel> that's right, yes

[17:20] <AlexDaniel> I'm just saying that âorelseâ and the proposed âorwithoutâ are just too similar and a bit confusing

[17:23] <TreyHarris> Is it a naming thing? "butwithout" is getting long but seeems equivalent to me. "andwithout" and "orwithout" would be pretty much equivalent if it weren't for the fact that we can't read the words "or" and (or!) "and" in a program without assuming it has the Boolean-logic meaning rather than the English one. "nor" would work too.

[17:24] <AlexDaniel> TreyHarris: there's `but` too

[17:24] <TreyHarris> (Yes, "nor" has a boolean-specific meaning too, but I don't think it's as strongly attached.)

[17:24] <AlexDaniel> m: my $x = âfooâ but 42; say $x.Str; say $x.Int

[17:24] <camelia> rakudo-moar 4eb4c0c79: OUTPUT: Â«fooâ¤42â¤Â»

[17:26] <TreyHarris> Right, but `but` doesn't have a meaning that overlaps here. I suppose you _could_ mixin to a control-flow block, but if you actually named your control-flow role that might be mixed in to "without" "without" so that "butwithout" could be a legitimate typo for "but without"... I think you're asking for trouble, no? :-)

[17:26] <Geth> Â¦ nqp: 88592344dd | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/templates/MOAR_REVISION

[17:26] <Geth> Â¦ nqp: [MoarVM Bump] Brings 15 commits

[17:26] <Geth> Â¦ nqp: 

[17:26] <Geth> Â¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2019.05-94-g459e68675...2019.07-6-gf1b26bb0e

[17:26] <Geth> Â¦ nqp: f1b26bb0e Fix Configure.pl failing when --prefix /usr is passed

[17:26] <Geth> Â¦ nqp: defe0a959 Merge pull request #1136 from MasterDuke17/jit_captureposarg_n

[17:26] <Geth> Â¦ nqp: 06dd9c0d5 Merge pull request #1133 from MasterDuke17/jit_and_spesh_optimize_smrt_intify

[17:26] <Geth> Â¦ nqp: e5321a366 Jit captureposarg_n

[17:27] <Geth> Â¦ nqp: <â¦commit message has 11 more linesâ¦>

[17:27] <Geth> Â¦ nqp: review: https://github.com/perl6/nqp/commit/88592344dd

[17:27] <Geth> Â¦ rakudo: 63a4d958ee | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/templates/NQP_REVISION

[17:27] <Geth> Â¦ rakudo: [NQP Bump] Brings 2 commits

[17:27] <Geth> Â¦ rakudo: 

[17:27] <Geth> Â¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2019.03-273-gebe9672a7...2019.03-275-g88592344d

[17:27] <Geth> Â¦ rakudo: 88592344d [MoarVM Bump] Brings 15 commits

[17:27] <AlexDaniel> TreyHarris: I mean, if we keep adding these things for every single case, then yeah, *we* are asking for trouble :)

[17:27] <Geth> Â¦ rakudo: fd8a7e5f9 fix profiling gc/deallocations bug swapping thread/seqnum

[17:27] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/commit/63a4d958ee

[17:27] <AlexDaniel> greppable: if not defined

[17:27] <greppable6> AlexDaniel, 14 lines, 9 modules: https://gist.github.com/5a2f680115c492343486aea64541f5a1

[17:28] <AlexDaniel> TreyHarris: `if not defined` does not even seem to be so common

[17:28] <TreyHarris> AlexDaniel: I agree in general, but I don't think either the slippery slope nor the ambiguity argument applies here. I think it's less cognitive load.

[17:28] <AlexDaniel> greppable: if \.defined\.not

[17:28] <greppable6> AlexDaniel, Found nothing!

[17:28] <AlexDaniel> greppable: if .*\.defined\.not

[17:28] <greppable6> AlexDaniel, 1 line, 1 module: https://gist.github.com/4c32e0e9e5a55864ef48450778729d11

[17:28] <AlexDaniel> greppable: if not .*\.defined

[17:28] <greppable6> AlexDaniel, 107 lines, 49 modules: https://gist.github.com/3f2a48d7f906606b2ad1cff50fd203d9

[17:29] <AlexDaniel> ok that's what people use

[17:29] <TreyHarris> AlexDaniel: And in any case, it's not a strong argument against--I've found numerous times where people have tested for truth when they really should be testing for definedness but they can get away with it.

[17:29] <AlexDaniel> TreyHarris: it's not a slippery slope, we're already past the point where the user has to learn way too much

[17:30] <AlexDaniel> I personally don't even know what orelse is without looking at the docs

[17:31] <AlexDaniel> OH there is `notandthen` ???

[17:31] <AlexDaniel> âAt first glance, notandthen might appear to be the same thing as the orelse operator. The difference is subtleâ

[17:31] <ugexe> i generally use !$foo.defined 

[17:31] <AlexDaniel> you've got to be kidding meâ¦

[17:31] <ugexe> dunno why

[17:32] <AlexDaniel> ugexe: oh! Yes, that's another way to write it, yeah

[17:33] <TreyHarris> So it becomes a question of least surprise--and I was surprised that without disallowed chaining. Because `unless` not allowing chaining has always been a normative argument (double negation is confusing and people will just chain onto whichever, if or unless, comes first rather than switching as they should do, so let's just force them to do so) which doesn't apply here--there's no such thing as "double

[17:33] <TreyHarris> undefinition". The opposite of True is False and False is True. But the opposite of defined is undefined while the opposite of defined is literally almost everything

[17:34] <TreyHarris> sorry, s/while the opposite of UNDEFINED is literally almost anything/

[17:35] <TreyHarris> I mean... you can't rewrite a without as a with, can you?

[17:35] <TreyHarris> You have to rewrite it as an "if not defined"

[17:38] <AlexDaniel> ugexe: ! is probably better in case somebody else comes later and adds &&

[17:38] <AlexDaniel> like

[17:38] <AlexDaniel> m: say (not Nil.defined && 42)

[17:38] <camelia> rakudo-moar 63a4d958e: OUTPUT: Â«Trueâ¤Â»

[17:38] <AlexDaniel> m: say (!Nil.defined && 42)

[17:38] <camelia> rakudo-moar 63a4d958e: OUTPUT: Â«42â¤Â»

[17:38] <ugexe> yeah

[17:38] <AlexDaniel> yeah yeah people should learn recedence but I'd prefer my code to be idiot-proof

[17:39] <AlexDaniel> precedence*

[17:39] <TreyHarris> I think people forget (or, let's face it, weren't yet born or old enough to program at) the time when the low-precedence Booleans were first introduced and what a revolution in Perl's readability they made

[17:40] <AlexDaniel> TreyHarris: no, there is double negation in double indefinition. Not not defined.

[17:40] <AlexDaniel> TreyHarris: but I like your passion :)

[17:41] <AlexDaniel> TreyHarris: can we steal it to simplify the language instead of making it more complex? :)

[17:41] <TreyHarris> AlexDaniel: that's double negation of double indefinition. The danger presented by chained unless is here: how do you write "without $foo" using "with"?

[17:42] <TreyHarris> s/double indefinition/undefiniton/ no double double there

[17:45] <TreyHarris> Complexity isn't measured by quantity of things, it's quantity of arbitrary things. And `without`'s very existence without (sorry, no other word there) a followup makes it an odd duck since it can't be refactored using a single additional keyword

[17:47] <TreyHarris> `with` was originally a specialized variant of 'given', a guarded topicalization. And `given` itself is just syntactic sugar. I'd agree with `without` being removed from the language as readily as not having follow-ups.

[17:47] <TreyHarris> It's current state is just totally arbitrary, which is the sort of thing that does increase language complexity in a cognitive sense

[17:48] <TreyHarris> Or removal of `orwith` and `else` after `with`. That would also parsimonize.

[17:48] <TreyHarris> But the current state is almost maximally arbitrary.

[17:49] <AlexDaniel> greppable6: notandthenÂ§

[17:49] <greppable6> AlexDaniel, Found nothing!

[17:49] <AlexDaniel> greppable6: notandthen

[17:49] <greppable6> AlexDaniel, 12 lines, 1 module: https://gist.github.com/0122234263ff535d78a1b311de54bca0

[17:49] <AlexDaniel> greppable6: andthen

[17:49] <greppable6> AlexDaniel, 170 lines, 26 modules: https://gist.github.com/1c96879c97ca004d2ce6e1771fb2f179

[17:50] <AlexDaniel> well yeah, IMO we should start pulling things out that are not very useful or justified

[17:51] <AlexDaniel> notandthen can easily goâ¦

[17:52] * AlexDaniel reads the docs a bit more

[17:52] <AlexDaniel> âThe notandthen operator is a close relative of without statement modifier, and some compilers compile without to notandthen, meaning these two lines have equivalent behaviorâ

[17:52] <AlexDaniel> come onâ¦

[17:53] <Geth> Â¦ problem-solving: AlexDaniel assigned to jnthn Issue Should `without` allow chaining? https://github.com/perl6/problem-solving/issues/63

[18:05] <Geth> Â¦ problem-solving: AlexDaniel self-assigned [WIP] Decluttering of the language and other things https://github.com/perl6/problem-solving/issues/64

[18:07] <ugexe> their inclusion seems consistent

[18:07] <ugexe> is the lack of consistency worth slightly less clutter?

[18:08] <AlexDaniel> it depends

[18:20] <AlexDaniel> lizmat: nice blogpost, by the way

[19:43] <Geth> Â¦ roast/6.d-errata: 0ebe8e674c | (Vadim Belman)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | S14-roles/parameterized-mixin.t

[19:43] <Geth> Â¦ roast/6.d-errata: Remove invalid fudged tests

[19:43] <Geth> Â¦ roast/6.d-errata: 

[19:43] <Geth> Â¦ roast/6.d-errata: These two tests apparently must not pass.

[19:43] <Geth> Â¦ roast/6.d-errata: review: https://github.com/perl6/roast/commit/0ebe8e674c

[19:46] <AlexDaniel> ok, now 6.d-errata

[19:46] <AlexDaniel> lizmat: should I cherry-pick https://github.com/perl6/roast/commit/88abcf8be8 ?

[19:46] <AlexDaniel> this one looks much more innocent to me

[19:47] <AlexDaniel> then there's also https://github.com/perl6/roast/commit/073388dea66758b6e7a798b384fb5f2fcfa492ad

[19:49] <AlexDaniel> and also this one I think https://github.com/perl6/roast/commit/75132b836be58a487b1c1bc2b68d81175f063d28

[19:50] *** patrickb joined
[19:55] <lizmat> yes to 88abcf8be8

[19:55] <lizmat> and 073388dea667

[19:57] <lizmat> not too sure about 75132b836be as that ticket is still not resolved and might actually require a problem solving ticket

[20:04] <AlexDaniel> greppable: is dynamic

[20:04] <greppable6> AlexDaniel, 13 lines, 3 modules: https://gist.github.com/40fa185837cc4f5a4f6b58e5208702a5

[20:05] <Geth> Â¦ roast/6.d-errata: 8ef1ce8353 | (Elizabeth Mattijsen)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | S03-operators/context-forcers.t

[20:05] <Geth> Â¦ roast/6.d-errata: Make test use proper dynamic variables

[20:05] <Geth> Â¦ roast/6.d-errata: 

[20:05] <Geth> Â¦ roast/6.d-errata: "is dynamic" forces one to have to use the CALLER:: syntax, which is a bad

[20:05] <Geth> Â¦ roast/6.d-errata: idea from an optimization point of view.

[20:05] <Geth> Â¦ roast/6.d-errata: review: https://github.com/perl6/roast/commit/8ef1ce8353

[20:05] <Geth> Â¦ roast/6.d-errata: 9b623d6853 | (Elizabeth Mattijsen)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | S32-exceptions/misc.t

[20:05] <Geth> Â¦ roast/6.d-errata: Adapt/Add tests for R#2729

[20:06] <synopsebot> R#2729 [closed]: https://github.com/rakudo/rakudo/issues/2729 Better error message for `map: * xx 2`

[20:06] <Geth> Â¦ roast/6.d-errata: review: https://github.com/perl6/roast/commit/9b623d6853

[20:06] <AlexDaniel> lizmat: riiight, so what do we do? Revert?

[20:12] <AlexDaniel> bisect: say Failure.new.min

[20:12] <bisectable6> AlexDaniel, Bisecting by exit code (old=2015.12 new=63a4d95). Old exit code: 0

[20:12] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/0b2ad5450fd06eda7767cc2b7f965427

[20:12] <bisectable6> AlexDaniel, (2016-07-11) https://github.com/rakudo/rakudo/commit/362536920e627a1f0a5c00be42880a065c8186fc

[20:13] <AlexDaniel> nonoâ¦

[20:13] <AlexDaniel> bisect: old=2019.03.1 say Failure.new.min

[20:13] <bisectable6> AlexDaniel, Bisecting by output (old=2019.03.1 new=63a4d95) because on both starting points the exit code is 1

[20:13] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/411aee724ccda9d1520546401b83adc0

[20:13] <bisectable6> AlexDaniel, (2019-07-12) https://github.com/rakudo/rakudo/commit/96456b6e7ecf868b66467dbce50a6e11ee58c65a

[20:13] <AlexDaniel> bisect: old=2019.03.1 my $x = Failure.new.min

[20:13] <bisectable6> AlexDaniel, Bisecting by exit code (old=2019.03.1 new=63a4d95). Old exit code: 0

[20:13] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/f775cf5c4c57fcd54704799abdabc135

[20:13] <bisectable6> AlexDaniel, (2019-03-15) https://github.com/rakudo/rakudo/commit/23fca8f6fb45d2a2d694c63862c27a26ec0df252

[20:14] *** TreyHarris left
[20:51] *** robertle left
[20:53] *** TreyHarris joined
[20:58] *** lucasb left
[21:14] *** patrickb left
[22:29] <lizmat> AlexDaniel: good question, I refer to jnthn for a decision

[22:51] *** pamplemousse left
