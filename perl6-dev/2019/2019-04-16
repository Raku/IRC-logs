[00:02] <Geth> ¦ rakudo: patzim++ created pull request #2842: Fix build runners

[00:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2842

[00:04] <patrickz> .tell vrurg I made a change to the build system (r#2842). Once that's merged I'll have a look at your branch and try to incorporate the change there as well.

[00:04] <yoleaux> patrickz: I'll pass your message to vrurg.

[00:04] <synopsebot> R#2842 [open]: https://github.com/rakudo/rakudo/pull/2842 Fix build runners

[00:05] <vrurg> patrickz: ok, thanks!

[00:05] <yoleaux> 00:04Z <patrickz> vrurg: I made a change to the build system (r#2842). Once that's merged I'll have a look at your branch and try to incorporate the change there as well.

[00:06] <patrickz> Time for bed. o/

[00:06] *** patrickz left
[00:20] *** AlexDaniel left
[01:23] *** vrurg left
[01:23] *** vrurg joined
[02:29] <Geth> ¦ nqp: 56c12ad070 | (Daniel Green)++ | src/HLL/Compiler.nqp

[02:29] <Geth> ¦ nqp: Whitespace fixes

[02:29] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/56c12ad070

[03:27] *** Kaiepi left
[03:29] *** Kaiepi joined
[04:18] *** Kaiepi left
[04:23] *** SqrtNegInf left
[04:47] <Geth> ¦ roast: 25b776bc0b | usev6++ | S32-io/mkdir_rmdir.t

[04:47] <Geth> ¦ roast: [JVM] Unfudge now passing test

[04:47] <Geth> ¦ roast: 

[04:47] <Geth> ¦ roast: Fixed with https://github.com/perl6/nqp/commit/3921b1e6c7

[04:47] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/25b776bc0b

[05:36] *** b2gills left
[06:02] *** b2gills joined
[06:11] *** SqrtNegInf joined
[06:25] *** SmokeMachine left
[06:33] <lizmat> Files=1255, Tests=90107, 398 wallclock secs (23.56 usr  7.10 sys + 2823.79 cusr 240.67 csys = 3095.12 CPU)

[06:33] *** SmokeMachine joined
[06:42] *** SmokeMachine left
[06:51] *** ufobat_ joined
[06:52] *** SmokeMachine joined
[06:55] *** ufobat left
[07:19] <lizmat> .tell kawaii I have a slight preference for a release before the PTS, which is on 25-28 April: work will be done on the CUR subsystem with potential ecosystem fallout

[07:19] <yoleaux> lizmat: I'll pass your message to kawaii.

[07:28] <kawaii> o/

[07:28] <yoleaux> 07:19Z <lizmat> kawaii: I have a slight preference for a release before the PTS, which is on 25-28 April: work will be done on the CUR subsystem with potential ecosystem fallout

[07:28] <lizmat> kawaii o\

[07:29] <kawaii> lizmat: I will see if we can cut the release early next week then, this week I am moving to a new apartment so a little busy IRL :)

[07:29] <lizmat> kawaii: as I said, a slight preference

[07:30] <lizmat> if you cut a release branch, then all should be ok

[07:30] <lizmat> AleksDaniel has done that in the past, not sure if it's now part of standard procedure

[07:31] *** patrickb joined
[07:32] <kawaii> I'm going to attempt to cut a 2019.04-rc1 this weekend, just to practice :)

[07:34] <lizmat> kawaii++

[08:05] *** SmokeMachine_ joined
[08:06] *** SmokeMachine left
[08:06] *** SmokeMachine_ is now known as SmokeMachine

[08:29] *** go|dfish left
[09:27] *** MasterDuke left
[10:06] <lizmat> m: https://gist.github.com/lizmat/aa814fb01832eea7bc6998d031937600   # timotimo: something like that ?

[10:06] <evalable6> lizmat, rakudo-moar 9ce87eeb9: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /home/bisectable/git/wh…»

[10:06] <evalable6> lizmat, Full output: https://gist.github.com/2caee5c7532927a160df80496be2e7f8

[10:06] <lizmat> (without the m:  :-))

[10:16] <|Tux|> Rakudo version 2019.03.1-208-g9ce87eeb9 - MoarVM version 2019.03-76-gc10fee65c

[10:16] <|Tux|> csv-test-xs-20      0.425 -  0.435

[10:16] <|Tux|> csv-ip5xs           0.731 -  0.824

[10:16] <|Tux|> test-t --race       0.828 -  0.863

[10:16] <|Tux|> test-t              1.666 -  1.706

[10:16] <|Tux|> csv-ip5xs-20        5.924 -  5.959

[10:16] <|Tux|> test                6.985 -  6.990

[10:16] <|Tux|> test-t-20 --race   10.100 - 10.731

[10:16] <|Tux|> csv-parser         21.859 - 22.308

[10:16] <|Tux|> test-t-20          28.899 - 28.983

[10:16] <|Tux|> 20190415 1.669❙20190416 1.666❙20180928 1.662❙20181015 1.659❙20181011 1.647❙

[10:17] *** patrickb left
[10:18] *** patrickb joined
[10:20] <Geth> ¦ rakudo: afc9f84949 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[10:20] <Geth> ¦ rakudo: Add message capability to snap()

[10:20] <Geth> ¦ rakudo: 

[10:20] <Geth> ¦ rakudo: snap("checkpoint one") will now store that message with the period and will

[10:20] <Geth> ¦ rakudo: show it in the report:

[10:20] <timotimo> lizmat: oops, i just saw that

[10:20] <Geth> ¦ rakudo: 

[10:20] <Geth> ¦ rakudo:   $ perl6 -e 'use Telemetry; snapper; sleep .2; snap("checkpoint"); sleep .1'

[10:20] <Geth> ¦ rakudo: Telemetry Report of Process #89112 (2019-04-16T10:18:37Z)

[10:20] <Geth> ¦ rakudo: <…commit message has 14 more lines…>

[10:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/afc9f84949

[10:20] <timotimo> it looks quite good, yeah!

[10:20] *** patrickb left
[10:21] <timotimo> hm, though snap("foo") doesn't read very well for the "insert this into the profiler's data" use case

[10:21] <lizmat> so what would read well then ?

[10:22] <lizmat> checkpoint("foo") ?

[10:23] <timotimo> i'd like that wording

[10:23] <timotimo> though not entirely sure about putting subs in the main namespace when Telemetry is used; that's why i thought of T<checkpoint> = "hi"

[10:24] <timotimo> snap is probably not something user code would be likely to have, but "checkpoint" seems like a much more common word maybe?

[10:24] <timotimo> greppable6: checkpoint

[10:24] <greppable6> timotimo, 19 lines, 7 modules: https://gist.github.com/2f41a56827d91853e5aede81538ecd0f

[10:24] <timotimo> ok, not really used yet at all in the ecosystem at least

[10:25] <lizmat> timotimo: the thing is that T creates a throwaway Telemetry object and gives you the current values for that

[10:25] <lizmat> it won't get snapped, so it won't appear in snapper output

[10:25] <timotimo> mhhh, i see

[10:25] <timotimo> though my first thought was to return a Proxy from that specific lookup

[10:26] <timotimo> so that assigning to it would be "an action"

[10:26] <timotimo> but that's pretty "foreign" to the current telemetry api, so we can probably forget about that :)

[10:26] <lizmat> technically, I could have T<checkpoint> = "foo" create a Telemetry object and have that snapped, but that feels too magic to me

[10:27] <lizmat> especially since you can create your own Telemetry instruments, which could interfere with <checkpoint>

[10:27] <timotimo> that makes sense

[10:31] *** patrickb joined
[10:32] <lizmat> wrt to snapshot maker, that could be a named arg to snap()

[10:33] <lizmat> *heap snapshot

[10:33] <lizmat> snap( :heap )

[10:34] *** patrickb left
[10:34] *** patrickb joined
[10:37] *** patrickb left
[11:13] * lizmat wonders if we lost Travis?

[11:13] <lizmat> just found out that "make test" isn't clean...  and I borked that yesterday already

[11:14] <timotimo> travis seems to think that "make test" is clean

[11:14] <timotimo> maybe you have to "make install" first?

[11:16] <lizmat> that shouldn't be necessary

[11:17] <timotimo> jnthn has complained recently that he had to do that

[11:17] <timotimo> but perhaps that was only for moarvm changes, not perl6 changes

[11:18] <timotimo> wow, the jvm builds take a loooong time, don't they?

[11:19] <lizmat> hmmm... can't reproduce it anymore either now.... weird

[11:20] <timotimo> looks like they always hit the 50 minute timeout

[11:34] <lizmat> m: dd sprintf('%+.0d',0)

[11:34] <evalable6> lizmat, rakudo-moar afc9f8494: OUTPUT: «"+"␤»

[11:34] <lizmat> that's unexpected to me

[11:35] <lizmat> but consistent with Perl 5

[11:50] *** AlexDaniel` joined
[11:58] <Geth> ¦ roast: d69eba76f8 | (Elizabeth Mattijsen)++ | S32-str/sprintf-d.t

[11:58] <Geth> ¦ roast: Parameterize sprintf testing of "d" and "i" formats

[11:58] <Geth> ¦ roast: 

[11:58] <Geth> ¦ roast: Mostly intended to register the behaviour of the current sprintf

[11:58] <Geth> ¦ roast: implementation, which was not testing some combinations of flags and values.

[11:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d69eba76f8

[12:00] <Geth> ¦ rakudo: 91218bccc3 | (Elizabeth Mattijsen)++ | t/spectest.data

[12:00] <Geth> ¦ rakudo: Add extensive testing of "d" and "i" formats in sprintf

[12:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/91218bccc3

[12:02] <Geth> ¦ roast: 505f5c23c3 | (Elizabeth Mattijsen)++ | S32-str/sprintf-d.t

[12:02] <Geth> ¦ roast: Oops, forgot to disable debugging help

[12:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/505f5c23c3

[12:10] <timotimo> oh lizmat btw you can already put support in for heap snapshots; all you need to put there is nqp::startprofile followed by nqp::endprofile with the heap snapshot profile type passed in a hash

[12:13] <lizmat> are those nqp ops documented ?

[12:14] <timotimo> oh, perhaps not

[12:14] <timotimo> nope

[12:15] <lizmat> that would help  :-)

[12:15] <timotimo> perhaps that's what i'll do right now

[12:15] <timotimo> oh it's mvmstartprofile apparently

[12:24] <lizmat> m: say sprintf("%#o",-64)   # another one that looks like it's off

[12:24] <evalable6> lizmat, rakudo-moar 91218bccc: OUTPUT: «0-100␤»

[12:36] <timotimo> the cat is now on my lap and if i don't hold his butt with my left hand he starts slipping which causes the positioning claws to extend straight into my legs %)

[12:36] <timotimo> makes it hard to write that documentation

[12:38] <lizmat> .oO( devs will do anything to prevent documenting :-)

[12:40] <Geth> ¦ nqp: 3093f22f34 | timo++ (committed using GitHub Web editor) | docs/ops.markdown

[12:40] <Geth> ¦ nqp: document mvmstartprofile and mvmendprofile

[12:40] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3093f22f34

[12:42] <Geth> ¦ nqp: 8fe62740a3 | timo++ (committed using GitHub Web editor) | docs/ops.markdown

[12:42] <Geth> ¦ nqp: fix formatting

[12:42] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/8fe62740a3

[12:44] *** tyil[m] joined
[12:52] <lizmat> Sometimes I feel we need a hook for this as well: https://github.com/perl6/problem-solving/issues/11

[12:52] <lizmat> "sprintf is a mess"

[12:57] <timotimo> Python has variants that could be worth a look

[13:00] <timotimo> https://pyformat.info/

[13:13] *** Kaiepi joined
[13:16] *** Kaiepi left
[13:16] *** Kaiepi joined
[13:45] <Geth> ¦ roast: 50851f8882 | (Elizabeth Mattijsen)++ | S32-str/sprintf-o.t

[13:45] <Geth> ¦ roast: Parameterize sprintf testing of "o" formats

[13:45] <Geth> ¦ roast: 

[13:45] <Geth> ¦ roast: THIS IS TESTING FOR THE CURRENT BROKEN BEHAVIOUR OF sprintf("%o"), while we can

[13:45] <Geth> ¦ roast: hopefully decide on a way forward:

[13:45] *** sivoais left
[13:45] <Geth> ¦ roast: 

[13:45] <Geth> ¦ roast:     https://github.com/perl6/problem-solving/issues/11

[13:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/50851f8882

[13:46] *** sivoais joined
[13:47] *** lucasb joined
[13:47] <Geth> ¦ rakudo: 873de2da53 | (Elizabeth Mattijsen)++ | t/spectest.data

[13:47] <Geth> ¦ rakudo: Add extensive testing of "o" format in sprintf

[13:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/873de2da53

[13:52] *** Guest2775 joined
[13:53] *** patrickb joined
[14:04] *** AlexDaniel joined
[14:05] <lizmat> afk for a bit&

[14:05] *** tyil[m] left
[14:06] *** AlexDaniel` left
[14:11] <AlexDaniel> hehe

[14:11] <AlexDaniel> can't commit, can't merge my own pull request

[14:17] *** discord6 left
[14:17] *** discord6 joined
[14:17] *** discord6 left
[14:17] *** discord6 joined
[14:25] <AlexDaniel> lizmat: I'm so happy to see https://github.com/perl6/problem-solving/issues/11 :)

[14:30] <AlexDaniel> m: say “$0 $1 $2” with $/ = <5 6 7>

[14:30] <evalable6> AlexDaniel, rakudo-moar 873de2da5: OUTPUT: «Cannot test 873de2da53cb31c695aabe0edc983ff4718cec65 (Commit exists, but a perl6 executable could not be built for it)»

[14:30] *** reportable6 left
[14:30] *** shareable6 left
[14:31] *** reportable6 joined
[14:31] *** ChanServ sets mode: +v reportable6

[14:31] <AlexDaniel> c: HEAD^ say “$0 $1 $2” with $/ = <5 6 7>

[14:31] <committable6> AlexDaniel, ¦HEAD^: «5 6 7␤»

[14:32] <AlexDaniel> heh

[14:33] *** AlexDaniel` joined
[14:34] *** shareable6 joined
[14:34] *** ChanServ sets mode: +v shareable6

[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. 12 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[15:01] *** tyil[m] joined
[15:10] *** llfourn left
[15:29] *** patrickb left
[15:36] *** patrickb joined
[15:41] *** pmurias joined
[15:50] <AlexDaniel> Geth: help

[15:50] <Geth> AlexDaniel, Source at https://github.com/perl6/geth To add repo, add an 'application/json' webhook on GitHub pointing it to http://hack.p6c.org:8888/?chan=%23perl6,%23perl6-dev and choose 'Send me everything' for events to send | use `ver URL to commit` to fetch version bump changes

[15:53] <Geth> ¦ problem-solving: 146ed82b73 | (Aleks-Daniel Jakimenko-Aleksejev)++ | solutions/meta/00002 – Problem Solving.md

[15:53] <Geth> ¦ problem-solving: Fix link to the README

[15:53] <Geth> ¦ problem-solving: review: https://github.com/perl6/problem-solving/commit/146ed82b73

[15:55] <AlexDaniel> weekly: first PR in the problem solving repo was merged! Yes, the PR is about the problem-solving repo itself. https://github.com/perl6/problem-solving/pull/2

[15:55] <notable6> AlexDaniel, Noted!

[15:56] <Geth> ¦ nqp/truffle: 0a33ab15fc | (Paweł Murias)++ | src/vm/jvm/runtime/org/perl6/nqp/truffle/sixmodel/REPRRegistry.java

[15:56] <Geth> ¦ nqp/truffle: [truffle] Sort reprs alphabetically

[15:56] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/0a33ab15fc

[15:56] <Geth> ¦ nqp/truffle: f314fc7150 | (Paweł Murias)++ | 9 files

[15:56] <Geth> ¦ nqp/truffle: [truffle] Implement Decoder/ConcBlockingQueue/ConditionVariable/ReentrantMutex reprs

[15:56] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/f314fc7150

[15:56] <Geth> ¦ nqp/truffle: c5a9698833 | (Paweł Murias)++ | 3 files

[15:56] <Geth> ¦ nqp/truffle: [truffle] Stub VMArray and VMIter reprs

[15:56] <Geth> ¦ nqp/truffle: review: https://github.com/perl6/nqp/commit/c5a9698833

[15:56] <AlexDaniel> weekly: please use the problem-solving repo file tickets about issues in the language (previously https://github.com/rakudo/rakudo/ was used for that)

[15:56] <notable6> AlexDaniel, Noted!

[16:02] <timotimo> lizmat: opening Telemetry.pm6 gives me an error that the syntax highlighter reached its memory limit and was turned off

[16:11] *** pmurias left
[16:26] <lizmat> timotimo: odd

[16:29] *** AlexDaniel left
[16:38] <Geth> ¦ roast: 395926a5fa | (Elizabeth Mattijsen)++ | S32-str/sprintf-x.t

[16:38] <Geth> ¦ roast: Parameterize sprintf testing of "x" and X formats

[16:38] <Geth> ¦ roast: 

[16:38] <Geth> ¦ roast: THIS IS TESTING FOR THE CURRENT BROKEN BEHAVIOUR OF sprintf("%x"), while we

[16:38] <Geth> ¦ roast: hopefully decide on a way forward:

[16:38] <Geth> ¦ roast: 

[16:38] <Geth> ¦ roast:         https://github.com/perl6/problem-solving/issues/11

[16:38] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/395926a5fa

[16:42] <Geth> ¦ rakudo: 448f525cd3 | (Elizabeth Mattijsen)++ | t/spectest.data

[16:42] <Geth> ¦ rakudo: Add extensive testing of "x" and "X" formats in sprintf

[16:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/448f525cd3

[17:09] *** llfourn joined
[17:21] *** Kaiepi left
[17:25] *** Kaiepi joined
[17:29] *** Kaiepi left
[17:31] <lizmat> m: say sprintf("%02s","")   # another weird one, but consistent with Perl 55

[17:31] <evalable6> lizmat, rakudo-moar 448f525cd: OUTPUT: «00␤»

[17:31] <lizmat> *5

[17:32] *** Kaiepi joined
[17:36] <timotimo> lizmat: the perl6 vim syntax has a bug with lines like # foo ---------------------

[17:36] <timotimo> it seems to go exponential or something

[17:37] <lizmat> is it the number of --- ?

[17:37] <lizmat> so you're also saying it was not a recent change I introduced

[17:37] <timotimo> no, it's been that way for a long time

[17:38] <timotimo> same with the autogenerated native array files, i think

[17:38] <timotimo> they also have pretty headings and such, don't they?

[17:39] <lizmat> yeah...

[17:39] <timotimo> https://gist.github.com/timo/802d9d04b3ca8819fc4b48cffd564e2c - making a snap right after starting the snapper lets you get negative wallclock times, that's funny

[17:39] <lizmat> well... what happens there is that you didn't segfault

[17:40] <lizmat> snap / snapper are pushing to the same array from different threads...

[17:40] <lizmat> was hoping I wouldn't get caught  :-)

[17:40] <timotimo> oh, it pushes literally into an array

[17:40] <timotimo> that's dangerous :)

[17:42] <lizmat> guess I will have to use the concbllockingqueue

[17:44] <timotimo> as long as you don't have to have positional access that should be just fine

[17:44] <lizmat> only when making the report

[17:44] <timotimo> that's perfect, then

[17:45] <timotimo> Telemetry.pm6 can't use #?if moar, right?

[17:45] <timotimo> so putting nqp::mvmstartprofile in there is not a good idea :|

[17:45] <lizmat> indeed

[17:45] <lizmat> well, we have constants that indicate the backend

[17:45] <lizmat> ah yes, but then we'd have to wrap them in an EVAL  yuck

[17:46] <timotimo> yep, yuck indeed

[17:46] <timotimo> we could put mvmstartprofile and mvmendprofile on other backends to just throw an "not supported" exception

[17:47] <timotimo> or maybe we expose it through the HLL Backend, atwo methods on the compiler object perhaps

[17:49] <lizmat> just as a class method on the Compiler class ?

[17:50] <timotimo> yeah

[17:52] <timotimo> https://gist.github.com/timo/802d9d04b3ca8819fc4b48cffd564e2c#file-heapsnapshot-patch

[17:52] <timotimo> i have this patch and it misbehaves in the strangest way

[17:52] <timotimo> the $filename always ends up "heapsnapshot-.mvmheap" with two "use of nil" warnings

[17:52] <timotimo> and then it errors out trying to unbox a VMNull in the startprofile line ?!?

[17:54] <lizmat> perhaps related to c10fee65c839b7e60fb748dfb5 ?

[17:54] <lizmat> (in MoarVM repo)

[17:54] <timotimo> huh. it shouldn't though? :|

[17:54] *** Kaiepi left
[17:54] <timotimo> should be able to see by disabling spesh

[17:55] <lizmat> if you mate the $snapshot-idx an Int rather than an int ?

[17:55] <lizmat> *make

[17:55] <timotimo> doesn't help

[17:55] <lizmat> weird

[17:56] <timotimo> but using $(...) instead of {...} did help

[17:56] <lizmat> yikes

[17:57] <timotimo> OK, the null error goes away when i put "path" instead of "filename" (because filename isn't correct there)

[17:57] *** Kaiepi joined
[17:59] <lizmat> may I say I find the API for nqp::mvmstartprofile in the case of a heap dump, strange ?

[17:59] <timotimo> https://gist.github.com/timo/802d9d04b3ca8819fc4b48cffd564e2c#file-output_with_heapsnapshots-txt - check it out!

[17:59] <timotimo> in what way?

[17:59] <lizmat> so what happens if you do not do the mvmendprofile?

[17:59] <timotimo> it'll create a single file that gets a new snapshot every time the gc runs

[18:00] <timotimo> just like when you --profile=heap

[18:00] <lizmat> ah...  hmm... wasn't clear to me from the documentation :-)

[18:00] <timotimo> stopping it immediately makes it take one snapshot and stop, i.e. not one every time the gc runs

[18:00] <timotimo> i can put some more docs in there

[18:01] <timotimo> the snap :heap could also take a message, i'm not entirely sure how that should work, though; put the message first, the heap snapshot filename second?

[18:01] <timotimo> and maybe the :heap named argument could be a path or filename

[18:02] <lizmat> that would make sense to me

[18:02] <timotimo> also, now that i'm at it already, why not start work on the stats nqp op, the one that'd expose things like how often the GC ran so far

[18:02] <timotimo> we'll have the ~fun~ of making that work regardless of backend used, too

[18:03] <Geth> ¦ roast: e985c7d7cd | (Elizabeth Mattijsen)++ | S32-str/sprintf-s.t

[18:03] <Geth> ¦ roast: Parameterize sprintf testing of "s" format

[18:03] <Geth> ¦ roast: 

[18:03] <Geth> ¦ roast: Mostly intended to register the behaviour of the current sprintf

[18:03] <Geth> ¦ roast: implementation, which was not testing some combinations of flags and values.

[18:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e985c7d7cd

[18:03] <lizmat> ^^ another bit of fun  :-)

[18:04] <timotimo> oh btw, can you think of a way we could subtract time spent taking heap snapshots from the wallclock snap?

[18:04] <Geth> ¦ rakudo: 7ee08bb10f | (Elizabeth Mattijsen)++ | t/spectest.data

[18:04] <Geth> ¦ rakudo: Add extensive testing of "s" format in sprintf

[18:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7ee08bb10f

[18:05] <timotimo> maybe it'd be enough to push two T's; one before and one after taking the snapshot

[18:05] <timotimo> then it'd be clearer how much time is spent taking the snapshot exactly

[18:05] <lizmat> indeed

[18:06] <timotimo> the first T could have the message that's passed as a positional parameter (if one is passed), the second one the filename

[18:06] *** AlexDaniel joined
[18:06] <lizmat> sounds like a pla 

[18:06] <lizmat> n

[18:07] <timotimo> check the gist again

[18:07] <timotimo> it looks kind of odd

[18:07] <lizmat> why do you have the snapper running ?

[18:08] <lizmat> does that add anything ?

[18:08] <timotimo> i guess i don't have to?

[18:08] <lizmat> nope, you don't

[18:08] <lizmat> snapper is just for continuous watching

[18:08] <timotimo> right

[18:08] <lizmat> if you want to snap at certain stages of your program, you can just add snap statements

[18:08] <timotimo> the report appears without a snapper, too

[18:09] <lizmat> yup

[18:09] <timotimo> i don't know why, but now i don't get the first "taking heap snapshot" message

[18:09] <lizmat> anytime you do a single snap, it will

[18:09] <lizmat> m: use Telemetry; snap

[18:09] <evalable6> lizmat, rakudo-moar 448f525cd: OUTPUT: «Telemetry Report of Process #16344 (2019-04-16T18:09:27Z)␤Number of Snapshots: 2␤Initial/F…»

[18:09] <evalable6> lizmat, Full output: https://gist.github.com/2e41529bdf65f1985dbae7333da3d302

[18:10] <timotimo> also, the 641% cpu usage in the gist is funny

[18:10] <timotimo> probably has something to do with the time being -3

[18:10] <lizmat> yup

[18:10] * lizmat looks forward to the nqp::stats op  :-)

[18:11] <timotimo> i'll teach the heap snapshot profiler to actually return a summary of what it saw to nqp::mvmendprofile; any idea how that should be displayed in the telemetry report if there were heap snapshots taken?

[18:11] <timotimo> how does nqp::backendstats sound as an op name?

[18:11] <lizmat> sounds good

[18:11] <timotimo> harder to confuse with the stat system call and such

[18:12] <lizmat> wrt to the heap snapshots info: what kind of data would that contain?

[18:12] <timotimo> oh, also, would it make sense for the snapper report to display how much util% corresponds to one cpu core?

[18:13] <timotimo> at the very least "how many objects, how many references between objects, how many frames, how many STables, total managed object size, total unmanaged object size", perhaps also "rankings" of types by count and size

[18:13] <lizmat> before you said "perhaps", I thought about a thing similar to nqp::getrusage

[18:14] <lizmat> perhaps we could put that into an instrument

[18:14] <timotimo> mhm

[18:14] <lizmat> although the information is really of a different type

[18:14] <timotimo> what kind of stuff gets returned could be configurable via the mvmstartprofile op

[18:15] <timotimo> but it'll have to be compatible with "multiple heap snapshots were taken between start and end"

[18:16] <ugexe> re per-core stats: remember nqp::cpucores isn't always a relevant number, or mean usable cores, or etc

[18:16] <lizmat> perhaps Telemetry should be agnostic of this

[18:17] <timotimo> mhm

[18:17] <lizmat> an nqp::profilestats could fetch information collected by snapshots

[18:17] <lizmat> if there is none, then there was no profiling

[18:17] <lizmat> if there was, it will automatically pick it up

[18:17] <lizmat> (and reset it for the next batch)

[18:17] <timotimo> if you call it twice after only one profiling?

[18:17] <timotimo> ah, that's what i wanted to hear :)

[18:19] <lizmat> afk for a bit&

[18:22] <Geth> ¦ nqp: e9807a613c | timo++ (committed using GitHub Web editor) | docs/ops.markdown

[18:22] <Geth> ¦ nqp: elaborate a little on mvmstartprofile and mvmendprofile

[18:22] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e9807a613c

[18:31] <Geth> ¦ rakudo: Kaiepi++ created pull request #2845: Don't use nqp::execname on OpenBSD

[18:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2845

[18:41] <patrickb> Kaiepi++

[18:41] <patrickb> Kaiepi: I really appreciate the work you put into this!

[18:41] <Kaiepi> :)

[18:43] <Kaiepi> i like issues like this that are specific to bsd in general since i'm forced to learn more about how the oses work

[18:44] <patrickb> From what I can see the changes look good.

[18:49] * patrickb boots into Windows

[18:49] *** patrickb left
[18:50] <Kaiepi> i have some changes i need to propose to libuv that i found out about from this since there's a better way they could be handling uv_exepath than they do now

[18:51] <Kaiepi> the only reason i didn't use it for this issue was because it'd only work on moarvm

[18:51] <Kaiepi> but basically sysctl let's you get the program's cwd

[18:52] <Kaiepi> combine that with it allowing you to get the binary name from argv and you have a full path

[18:54] <Kaiepi> only issue with that is if the program chdir's at some point but the current implementation doesn't deal with that either so whatever

[18:55] <timotimo> afaik we don't chdir in maorvm, though of course there's nativecall

[19:01] *** patrickb joined
[19:14] *** patrickb_ joined
[19:14] *** patrickb left
[19:22] *** Kaiepi left
[19:59] *** Kaiepi joined
[20:52] <Geth> ¦ nqp/master: 5 commits pushed by (Timo Paulssen)++

[20:52] <Geth> ¦ nqp/master: 792bfe54e7 | factor out type remapping logic

[20:52] <Geth> ¦ nqp/master: aa6844a7db | profiler: give gcs a proper primary key

[20:52] <Geth> ¦ nqp/master: 7e6169b45e | profiler: if deallocations exist, remap their types

[20:52] <Geth> ¦ nqp/master: ac3ed2f376 | profiler: output deallocations to sql

[20:52] <Geth> ¦ nqp/master: 1140a17ffe | remove a "next" by restructuring an if

[20:52] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/e9807a613c24...1140a17ffe62

[20:55] <timotimo> ^- deallocations weren't actually being written to the profiler's output until now, oops :)

[21:02] *** AlexDani` joined
[21:04] *** AlexDaniel left
[21:12] *** Kaiepi left
[21:12] *** Kaiepi joined
[21:15] *** Kaiepi left
[21:32] *** AlexDani` left
[21:38] *** vrurg left
[21:38] *** vrurg joined
[22:07] *** MasterDuke joined
[22:07] *** MasterDuke left
[22:07] *** MasterDuke joined
[22:19] *** vrurg left
[22:19] *** vrurg joined
[22:29] <Geth> ¦ rakudo: patzim++ created pull request #2846: Remove relative elements from NQP_HOME and PERL6_HOME

[22:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2846

[22:38] *** patrickb_ left
[22:47] *** patrickb joined
[22:50] <jnthn> .tell patrickb I'll take a look at your PR tomorrow :)

[22:50] <yoleaux> jnthn: I'll pass your message to patrickb.

[22:50] <patrickb> No hurry.

[22:50] <yoleaux> 22:50Z <jnthn> patrickb: I'll take a look at your PR tomorrow :)

[22:54] <jnthn> I need to try and look at the spesh-related release blocker ticket this week too

[23:01] <jnthn> Sleep for now o/

[23:40] *** patrickz joined
[23:43] *** patrickb left
[23:45] *** AlexDani` joined
[23:46] *** AlexDani` is now known as AlexDaniel

[23:46] *** AlexDaniel left
[23:46] *** AlexDaniel joined
[23:47] *** lucasb left
[23:50] *** ufobat_ left
