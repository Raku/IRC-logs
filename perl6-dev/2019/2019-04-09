[00:16] *** MasterDuke joined
[00:16] *** MasterDuke left
[00:16] *** MasterDuke joined
[00:54] <MasterDuke> uh, does --target=parse (even for -e '') work for anybody?

[00:54] <yoleaux> 7 Apr 2019 18:11Z <Kaiepi> MasterDuke: no it still segfaults

[00:54] <yoleaux> 7 Apr 2019 18:11Z <Kaiepi> MasterDuke: er, trace trap

[00:56] <MasterDuke> on two different systems at HEAD, it's just chewing up 100% of a core and ram used keeps growing

[00:56] <MasterDuke> --target=optimize works fine

[01:03] <MasterDuke> committable6: 2018.12 say run <perl6 --target=optimize -e ''>

[01:03] <committable6> MasterDuke, https://gist.github.com/56903b7d96c11d6f019bf38eb0ff22ee

[01:03] <MasterDuke> committable6: 2018.12 say run <perl6 --target=parse -e ''>

[01:06] <MasterDuke> hm, its default timeout may be too long for this...

[01:08] <committable6> MasterDuke, ¦2018.12: ««timed out after 40 seconds» «exit signal = SIGHUP (1)»»

[01:09] <MasterDuke> committable6: 2018.08 say run <perl6 --target=parse -e ''>

[01:09] <committable6> MasterDuke, https://gist.github.com/158ea0f9d9ce9dd87bb907df97cd7923

[01:09] <MasterDuke> committable6: 2018.09 say run <perl6 --target=parse -e ''>

[01:09] <committable6> MasterDuke, https://gist.github.com/bbaf0dabd274fc316fb3c61b9053371d

[01:09] <MasterDuke> committable6: 2018.10 say run <perl6 --target=parse -e ''>

[01:09] <committable6> MasterDuke, https://gist.github.com/78830f5e024c21614b741bab8e32e448

[01:09] <MasterDuke> committable6: 2018.11 say run <perl6 --target=parse -e ''>

[01:10] <MasterDuke> ok, looks like it happened sometime between 2018.10 and 2018.11

[01:11] <committable6> MasterDuke, ¦2018.11: ««timed out after 40 seconds» «exit signal = SIGHUP (1)»»

[02:03] *** epony left
[03:08] *** vrurg left
[03:24] *** epony joined
[03:38] *** AlexDani` joined
[03:42] *** AlexDaniel left
[04:29] *** AlexDani` is now known as AlexDaniel

[04:29] *** AlexDaniel left
[04:29] *** AlexDaniel joined
[04:52] <AlexDaniel> bisectable: old=2018.10 new=2018.11 say run <perl6 --target=parse -e ''>

[04:52] <AlexDaniel> worth a try :)

[04:55] <AlexDaniel> sooooo…?

[04:55] <AlexDaniel> bisectable6: help

[04:55] *** bisectable6 left
[04:58] *** bisectable6 joined
[04:59] *** bisectable6 left
[05:04] *** bisectable6 joined
[05:18] *** evalable6 left
[05:18] *** committable6 left
[05:18] *** bisectable6 left
[05:20] *** bisectable6 joined
[05:22] *** evalable6 joined
[05:22] *** ChanServ sets mode: +v evalable6

[05:23] <AlexDaniel> let's try again

[05:23] *** committable6 joined
[05:23] <AlexDaniel> bisectable: old=2018.10 new=2018.11 say run <perl6 --target=parse -e ''>

[05:24] <AlexDaniel> … what

[05:26] *** bisectable6 left
[05:27] *** bisectable6 joined
[05:31] <AlexDaniel> bisectable: old=2018.10 new=2018.11 start { sleep 5; exit 1 }; say run <perl6 --target=parse -e ''>

[05:31] <AlexDaniel> :|

[05:32] <AlexDaniel> aaah actually

[05:33] *** shareable6 left
[05:33] <bisectable6> AlexDaniel, Bisecting by exit code (old=2018.10 new=2018.11). Old exit code: 0

[05:33] *** reportable6 left
[05:33] *** reportable6 joined
[05:34] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/d5a0aa39c2773cb4858f5287fa160f26

[05:34] <bisectable6> AlexDaniel, (2018-10-27) https://github.com/rakudo/rakudo/commit/46ef0ea08cae96db25c7b5a9543ba696034408c8

[05:35] <AlexDaniel> c: 46ef0ea08cae96^,46ef0ea08cae96 start { sleep 5; exit 1 }; say run <perl6 --target=parse -e ''>

[05:36] *** shareable6 joined
[05:36] *** ChanServ sets mode: +v shareable6

[05:37] *** AlexDaniel left
[05:48] *** AlexDaniel joined
[05:50] <committable6> AlexDaniel, https://gist.github.com/fabb5bd36bec34e81fd8c6a344854ccc

[06:37] *** patrickb joined
[06:37] <patrickb> releasable6: status

[06:37] <yoleaux> 8 Apr 2019 18:55Z <brrt> patrickb: yes, I have seen it, I couldn't really do anything with it

[06:38] <yoleaux> 8 Apr 2019 18:55Z <brrt> patrickb: actually I had not

[06:38] <releasable6> patrickb, Next release in ≈11 days and ≈12 hours. 12 blockers. 0 out of 172 commits logged

[06:38] <releasable6> patrickb, Details: https://gist.github.com/1a5d67397bad04a180832c413dc535e8

[06:51] *** ufobat_ left
[07:14] *** tobs` joined
[07:15] *** tobs left
[07:15] *** tobs` is now known as tobs

[07:16] *** |Tux| left
[07:17] *** |Tux| joined
[07:31] <lizmat> Files=1254, Tests=87994, 386 wallclock secs (20.90 usr  6.54 sys + 2759.31 cusr 231.45 csys = 3018.20 CPU)

[07:32] <lizmat> ~10 seconds faster  :-)

[07:41] <AlexDaniel> that's awesome

[07:50] <timotimo> that's neat

[08:06] *** pmurias joined
[09:08] <jnthn> 10 seconds wallclock, but more CPU, yes? :)

[09:09] <jnthn> (As in, the saving in CPU is larger than that, because it's running in parallel.)

[09:29] <timotimo> no, the CPU time is also at a low point compared to the last few days

[09:29] <timotimo> for as far back as my scroll buffer goes

[09:31] <jnthn> Ah yes, yesterdays was 3059.02 CPU

[09:31] <jnthn> m: say 3018 / 3059

[09:31] <evalable6> jnthn, rakudo-moar 847783e26: OUTPUT: «0.986597␤»

[09:31] <jnthn> Hmm, not so impressive as what I got locally

[09:32] <timotimo> it was even 3028 a few days ago

[09:32] <jnthn> But still, nice.

[09:32] <timotimo> aye

[09:32] <jnthn> Not bad for just changing a number :)

[09:33] <timotimo> we need a mode where the test file runs five times start to finish so that spesh perhaps has a chance to kick in

[09:33] <timotimo> then we can measure if the cpu time goes up 5x or less

[09:33] <timotimo> (also, hooray, half an hour spec test time again!)

[09:42] <Geth> ¦ rakudo/more-precise-return-tracking: 165f918403 | (Jonathan Worthington)++ | 2 files

[09:42] <Geth> ¦ rakudo/more-precise-return-tracking: Better tracking of what needs return handlers

[09:42] <Geth> ¦ rakudo/more-precise-return-tracking: 

[09:42] <Geth> ¦ rakudo/more-precise-return-tracking: So that we can produce code with a lot less of them. This can give a

[09:42] <Geth> ¦ rakudo/more-precise-return-tracking: speedup since it results in code that's easier to analyze and slightly

[09:42] <Geth> ¦ rakudo/more-precise-return-tracking: more compact.

[09:42] <Geth> ¦ rakudo/more-precise-return-tracking: review: https://github.com/rakudo/rakudo/commit/165f918403

[09:45] <jnthn> Sticking that in a branch for later digging; it triggers some kind of spesh bug

[09:49] *** AlexDaniel left
[09:49] *** AlexDaniel joined
[09:57] *** AlexDaniel left
[09:57] *** AlexDaniel joined
[10:06] *** AlexDaniel left
[11:03] <Geth> ¦ nqp: 34bfa2c71e | (Paweł Murias)++ | 2 files

[11:03] <Geth> ¦ nqp: [js] Fix nqp::uname and make it call the uname command

[11:03] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/34bfa2c71e

[11:03] <Geth> ¦ nqp: 85ec713c6c | (Paweł Murias)++ | src/vm/js/nqp-runtime/browser.js

[11:03] <Geth> ¦ nqp: [js] Add a placeholder nqp::uname in the browser

[11:03] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/85ec713c6c

[11:03] <Geth> ¦ nqp: 74d95cb65f | (Paweł Murias)++ | src/vm/js/const_map.nqp

[11:03] <Geth> ¦ nqp: [js] Add UNAME constants

[11:03] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/74d95cb65f

[11:09] *** AlexDaniel joined
[12:02] *** bloatable6 left
[12:02] *** bloatable6 joined
[12:02] *** ChanServ sets mode: +v bloatable6

[13:03] <Geth> ¦ rakudo: 8fc53ec263 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/Sprintf.pm6

[13:03] <Geth> ¦ rakudo: WIP: re-implementation of sprintf()

[13:03] <Geth> ¦ rakudo: 

[13:03] <Geth> ¦ rakudo: For now available as "zprintf()" to allow for easier testing.

[13:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8fc53ec263

[13:14] *** pmurias left
[13:16] *** lucasb joined
[13:29] *** vrurg joined
[13:42] *** pmurias joined
[13:57] <Geth> ¦ rakudo/more-precise-return-tracking: 451b864b00 | (Jonathan Worthington)++ | lib/Test.pm6

[13:57] <Geth> ¦ rakudo/more-precise-return-tracking: Avoid hack involving early return in Test.pm6

[13:57] <Geth> ¦ rakudo/more-precise-return-tracking: 

[13:57] <Geth> ¦ rakudo/more-precise-return-tracking: Instead, implement it with a control exception. This means that we could

[13:57] <Geth> ¦ rakudo/more-precise-return-tracking: lift the restriction on needing a `Callable` that can be returned from

[13:57] <Geth> ¦ rakudo/more-precise-return-tracking: in this place too; unfortunately, we have spectests that make sure it

[13:57] <Geth> ¦ rakudo/more-precise-return-tracking: fails, so simply lifting the restriction will cause failures in the

[13:57] <Geth> ¦ rakudo/more-precise-return-tracking: spectest for released language versions. For now, just preserve the

[13:57] <Geth> ¦ rakudo/more-precise-return-tracking: existing behavior, but in a way that won't break our more accurate

[13:57] <Geth> ¦ rakudo/more-precise-return-tracking: tracking of which things need return handlers.

[13:57] <Geth> ¦ rakudo/more-precise-return-tracking: review: https://github.com/rakudo/rakudo/commit/451b864b00

[14:05] <Guest16965> lizmat: the original sprintf implementation is incomplete, is the new one better, i.e. supports more formatting flags?

[14:24] *** ctilmes left
[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: 84b0e38048 | (Jonathan Worthington)++ | lib/Test.pm6

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: Avoid hack involving early return in Test.pm6

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: 

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: Instead, implement it with an exception. This means that we could lift

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: the restriction on needing a `Callable` that can be returned from in

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: this place too; unfortunately, we have spectests that make sure it

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: fails, so simply lifting the restriction will cause failures in the

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: spectest for released language versions. For now, just preserve the

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: existing behavior, but in a way that won't break our more accurate

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: tracking of which things need return handlers.

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: review: https://github.com/rakudo/rakudo/commit/84b0e38048

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: 9072278092 | (Jonathan Worthington)++ | src/core/Mu.pm6

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: Fix .&fail after better return handler tracking

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: 

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: Also, the fact this was needed points to us missing optimizing the

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: $foo.&bar case into &bar($foo) rather than going through the dispatch

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: helper.

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: review: https://github.com/rakudo/rakudo/commit/9072278092

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: 69c535ecfb | (Jonathan Worthington)++ | src/Perl6/Grammar.nqp

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: Retain current return from default behavior

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: 

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: Currently, `sub { sub foo($x = return 42) { } say foo }` sees the return

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: actually return from the enclosing sub! While that's probably a bug,

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: unfortunately a spectest exists specifying it this way. So, retain the

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: semantics that the test suite wants for now.

[15:14] <Geth> ¦ rakudo/more-precise-return-tracking: review: https://github.com/rakudo/rakudo/commit/69c535ecfb

[15:29] *** pmurias left
[15:32] *** pmurias joined
[15:35] *** patrickb left
[15:44] <Geth> ¦ specs: pmqs++ created pull request #124: tell: use the term "bytes" instead of "octets"

[15:44] <Geth> ¦ specs: review: https://github.com/perl6/specs/pull/124

[16:05] *** pmurias left
[16:05] <lizmat> Guest16965: for now, it is trying to do the same as the current implementation, but to be (much) faster on repeated calls with the same format

[16:06] <lizmat> since it is all written in Perl 6, adding new formatting flags should be pretty straightforward

[16:08] <Geth> ¦ specs: d0393d762d | (Paul Marquess)++ (committed using GitHub Web editor) | S32-setting-library/IO.pod

[16:08] <Geth> ¦ specs: tell: use the term "bytes" instead of "octets"

[16:08] <Geth> ¦ specs: 

[16:08] <Geth> ¦ specs: Make "tell" and "seek" use the same unit. 

[16:08] <Geth> ¦ specs: 

[16:08] <Geth> ¦ specs: https://github.com/perl6/specs/issues/85

[16:08] <Geth> ¦ specs: review: https://github.com/perl6/specs/commit/d0393d762d

[16:08] <Geth> ¦ specs: 8d471152f4 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | S32-setting-library/IO.pod

[16:08] <Geth> ¦ specs: Merge pull request #124 from pmqs/master

[16:08] <Geth> ¦ specs: 

[16:08] <Geth> ¦ specs: tell: use the term "bytes" instead of "octets"

[16:08] <Geth> ¦ specs: review: https://github.com/perl6/specs/commit/8d471152f4

[16:10] *** MasterDuke left
[16:10] *** vrurg left
[16:12] *** vrurg joined
[16:13] *** vrurg left
[16:13] *** vrurg joined
[16:21] *** ggoebel joined
[16:30] *** Kaiepi left
[16:31] *** Kaiepi joined
[16:50] <timotimo> lizmat: anycontingency for when some code keeps generating more and more different format strings?

[16:50] <timotimo> this isn't something you should be doing, but for example for ^100_000 { sprintf "number $_: %s", "lol" } will give 100k different format strings, technically

[16:54] <Geth> ¦ rakudo: 12a094ad5d | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/Sprintf.pm6

[16:54] <Geth> ¦ rakudo: Streamline flag handling

[16:54] <Geth> ¦ rakudo: 

[16:54] <Geth> ¦ rakudo: Since we don't enforce any order in the flags, it feels like we can simplify

[16:54] <Geth> ¦ rakudo: flag checking significantly by just storing the flags in a single Match, and

[16:54] <Geth> ¦ rakudo: then just use .contains to see whether a flag is set.

[16:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/12a094ad5d

[16:55] <lizmat> timotimo: yeah, I'm aware of that eventuality.  I was thinking of adding a maximum to the number of keys in FORMATS and deleting the first from the hash iterator if that number is exceeded

[17:02] <lizmat> timotimo: but in real situations, I don't think this will occur so much

[17:02] <lizmat> timotimo: so it's more about preventing a DOS rather than anything else

[17:04] <Geth> ¦ rakudo: 7201d89e5a | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/Sprintf.pm6

[17:04] <Geth> ¦ rakudo: Make sure we only keep 100 formats around

[17:04] <Geth> ¦ rakudo: 

[17:04] <Geth> ¦ rakudo: To prevent a DOS attack by eating memory by generating many, many different

[17:04] <Geth> ¦ rakudo: format specifications.

[17:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7201d89e5a

[17:06] *** llfourn left
[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: 2eb93b2d7d | (Jonathan Worthington)++ | 2 files

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: Don't emit unrequired init code for natives

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: 

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: When we assign to them immediately, then we don't need to retain the

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: initial zeroing out. Shaves a few cycles off all the things that use

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: natively typed lexicals.

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: review: https://github.com/rakudo/rakudo/commit/2eb93b2d7d

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: 286aa29e2a | (Jonathan Worthington)++ | src/core/Array.pm6

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: Simplify array fast-path checking

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: 

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: We need to evaluate all the pieces anwyay; this means we get less

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: control flow in the resulting generated code. (We do trade off doing

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: some evaluations, but the common case is that all of these are true.)

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: review: https://github.com/rakudo/rakudo/commit/286aa29e2a

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: a21cf6ae0b | (Jonathan Worthington)++ | src/Perl6/Metamodel/BOOTSTRAP.nqp

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: Initialize $!reified/$!todo to a type object

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: 

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: Which means spesh turns it into something simpler; together with a JIT

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: improvement in MoarVM, we save over 300 bytes off the machine code that

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: is produced for ASSIGN-POS.

[17:21] <Geth> ¦ rakudo/more-precise-return-tracking: review: https://github.com/rakudo/rakudo/commit/a21cf6ae0b

[17:42] <Kaiepi> can someone running oracle's jdk run this and tell me what its output looks like? https://hastebin.com/kimuvucini.cs

[17:44] <vrurg> Kaiepi: I have jdk, but never used java. How do I run this?

[17:45] <Geth> ¦ rakudo: 29107b172d | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/Sprintf.pm6

[17:45] <Geth> ¦ rakudo: Fix various issues with order of flag checks

[17:45] <Geth> ¦ rakudo: 

[17:45] <Geth> ¦ rakudo: Also, if there is no size specified, we don't need to check for anything

[17:45] <Geth> ¦ rakudo: wrt to justification or padding.

[17:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/29107b172d

[17:46] <Kaiepi> vrurg, save it as Test.java, then run javac Test.java, then java Test

[17:47] <vrurg> Kaiepi: Found myself. ;)

[17:47] <lizmat> m: dd sprintf("%#o",65)    # shouldn't this need to be 0o101  ??

[17:47] <evalable6> lizmat, rakudo-moar 7201d89e5: OUTPUT: «"0101"␤»

[17:47] <vrurg> I'll make https://hastebin.com/ohaxasejis.coffeescript

[17:48] <Kaiepi> and you're sure it's oracle's jdk, not openjdk?

[17:48] <vrurg> It's macOS and I was downloading from Oracle.

[17:49] <vrurg> javac 1.8.0_201

[17:49] <Kaiepi> alright

[17:49] <Kaiepi> it matches openjdk's output, perfect

[17:51] <Kaiepi> actually wait, what i was planning to do with this probably isn't the best idea, which is to allow SO_SNDTIMEO/SO_RCVTIMEO support for getsockopt/setsockopt by adding 1 and 2 to whatever the highest value is to get their values for the SockOpt enum

[17:52] <Kaiepi> i'm not sure what the best way to write this is

[18:11] <Geth> ¦ rakudo: 972a242f9a | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/Sprintf.pm6

[18:11] <Geth> ¦ rakudo: Add ssupport for "o" and "x" formats

[18:11] <Geth> ¦ rakudo: 

[18:11] <Geth> ¦ rakudo: By generalizing the "b" format handling.  This deviates "o" format handling

[18:11] <Geth> ¦ rakudo: from the current implementation, which I deem to be in error.  See R#2830

[18:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/972a242f9a

[18:11] <synopsebot> R#2830 [open]: https://github.com/rakudo/rakudo/issues/2830 dd sprintf("%#o",65)    # is 0101, shouldn't this be 0o101  ??

[18:17] <dogbert17> lismat: FWIW both P5 and Ruby returns 0101

[18:18] <dogbert17> gah

[18:18] <dogbert17> lizmat: FWIW both P5 and Ruby returns 0101

[18:19] <lizmat> dogbert17: but does that make it right ?

[18:20] <dogbert17> that's how it seems to be specced, "For o, x, X types, the text 0, 0x, 0X, respectively, is prepended to non-zero numbers"  https://en.wikipedia.org/wiki/Printf_format_string

[18:23] <lizmat> m: use MONKEY; dd EVAL sprintf("%#x",65)    

[18:23] <evalable6> lizmat, rakudo-moar 972a242f9: OUTPUT: «65␤»

[18:23] <lizmat> m: use MONKEY; dd EVAL sprintf("%#b",65)    

[18:23] <evalable6> lizmat, rakudo-moar 972a242f9: OUTPUT: «65␤»

[18:23] <lizmat> m: use MONKEY; dd EVAL sprintf("%#o",65)    

[18:23] <evalable6> lizmat, rakudo-moar 972a242f9: OUTPUT: «Potential difficulties:␤    Leading 0 has no meaning. If you meant to create an octal numb…»

[18:23] <evalable6> lizmat, Full output: https://gist.github.com/5f7896da3fe0bfae268ca9e4f5298463

[18:24] <lizmat> feels to me the output of sprintf("%#o"...) should roundtrip

[18:24] <lizmat> it does so in C, Perl 5 and Ruby, but not so in Perl 6

[18:26] <lizmat> also, usually octal literals are used for things like chmod()

[18:27] <lizmat> but in Perl 6 you *also* have to specify them with 0o, like chmod(0o644, $file)

[18:37] <dogbert17> that complicates thing

[18:37] <dogbert17> *things

[18:38] <Geth> ¦ rakudo: 1cad10b76e | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/Sprintf.pm6

[18:38] <Geth> ¦ rakudo: Revert "o" format to Perl 5 / C / Ruby behaviour

[18:38] <Geth> ¦ rakudo: 

[18:38] <Geth> ¦ rakudo: Which I think is wrong, but here you go.

[18:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1cad10b76e

[18:40] <dogbert17> lizmat: possibly insane suggestion but perhaps you could introduce another specifier for outputting P6 octal values, e.h. O instead of o ?

[18:53] <Kaiepi> so i'm writing support for SO_SNDTIMEO/SO_RCVTIMEO for my setsockopt/getsockopt pullreq

[18:53] <Kaiepi> i ran into a problem on the jvm though

[18:53] <Kaiepi> async sockets allow you to set a separate timeout for sending/receiving data, but sync sockets don't, they just use one timeout for both

[18:54] <Kaiepi> should i allow having separate read/write timeouts with async sockets or make it follow the same behaviour as sync sockets?

[18:58] <vrurg> Kaiepi: I would allow it.

[19:01] <Kaiepi> ok good, that's what i already wrote lol

[19:30] <Geth> ¦ rakudo: 4ae023c717 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/Sprintf.pm6

[19:30] <Geth> ¦ rakudo: Introduce "O" format for Perl 5 semantics

[19:30] <Geth> ¦ rakudo: 

[19:30] <Geth> ¦ rakudo: The "o" format conforms to the way "x" and "b" are rendered.  dogbert17++

[19:30] <Geth> ¦ rakudo: for the suggestion.

[19:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4ae023c717

[19:44] *** lucasb left
[19:45] <dogbert17> lizmat: cool, just wondering if 'o' should be P5 style and 'O' P6 style instead?

[19:48] <bartolin> lizmat: I think about adding a return type --> Nil to method !RE-INITIALIZE here: https://github.com/rakudo/rakudo/blob/4ae023c717/src/core/ShapedArray.pm6#L281 This seems to help with two spectest failures in S02-types/array-shapes.t on the JVM backend. Do you think such a change would be ok moar, too? (There are no spectest failures on moar, at least.)

[19:50] <lizmat> dogbert17: but then the O format would generate a 0o123 string 

[19:51] <lizmat> bartolin: looks ok to me

[19:51] <bartolin> lizmat: thanks!

[19:52] <Geth> ¦ rakudo: af7b833f0d | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/Sprintf.pm6

[19:52] <Geth> ¦ rakudo: Make sure that "x" creates lowercase hex characters

[19:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/af7b833f0d

[19:52] <lizmat> bartolin: good catch!

[19:53] <dogbert17> lizmat: yes, and 'o' would create 0123, just like P5/Ruby/C etc

[19:53] <bartolin> roast++ :)

[19:55] <lizmat> dogbert17: will think about it...  it feels wrong to me to perpetuate an inconsistency if it is not necessary

[19:57] <dogbert17> lizmat: sounds like a plan, sorry for the bikeshedding :)

[19:57] <lizmat> no pb...  glad to have someone look at my code  :-)

[20:02] <Geth> ¦ rakudo: 417fa68e9f | usev6++ | src/core/ShapedArray.pm6

[20:02] <Geth> ¦ rakudo: Don't return internal value from !RE-INITIALIZING

[20:02] <Geth> ¦ rakudo: 

[20:02] <Geth> ¦ rakudo: This fixes internal errors for the JVM backend for code like

[20:02] <Geth> ¦ rakudo: 

[20:02] <Geth> ¦ rakudo:   'my @c[2;2] .= new(:shape(2, 2), <a b>, <c d>)'

[20:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/417fa68e9f

[20:02] <lizmat> bartolin++

[20:04] <Geth> ¦ roast: 07ad1f284b | usev6++ | S02-types/array-shapes.t

[20:04] <Geth> ¦ roast: [JVM] Unfudge now passing tests

[20:04] <Geth> ¦ roast: 

[20:04] <Geth> ¦ roast: Fixed with https://github.com/rakudo/rakudo/commit/417fa68e9f

[20:04] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/07ad1f284b

[20:04] <lizmat> m: dd sprintf(q/%#X--%2$d/,0xFF)   # feels to me this should die

[20:04] <evalable6> lizmat, rakudo-moar af7b833f0: OUTPUT: «"0XFF--0"␤»

[20:05] <lizmat> m: dd sprintf(q/%#X--%0$d/,0xFF)   # this is definitely LTA

[20:05] <evalable6> lizmat, rakudo-moar af7b833f0: OUTPUT: «(exit code 1) This representation (Null) does not support elems (for type VMNull)␤  in block <unit> at /tmp/Z2_ibreN2O line 1␤␤»

[20:35] *** Kaiepi left
[20:35] *** Kaiepi joined
[20:37] *** lucasb joined
[20:37] *** Kaiepi left
[20:37] *** Kaiepi joined
[20:43] <dogbert17> lizmat: in your first example P5 prints the same result while Ruby dies with an ArgumentError

[20:46] <dogbert17> Ruby dies, ArgumentError, in the second example as well

[20:47] *** ggoebel left
[20:48] <lizmat> dogbert17++

[20:59] *** Kaiepi left
[21:01] *** Kaiepi joined
[21:02] *** Kaiepi left
[21:02] *** Kaiepi joined
[21:12] *** ggoebel joined
[21:15] *** llfourn joined
[21:22] *** vrurg left
[21:24] *** vrurg joined
[21:54] <Geth> ¦ rakudo: 745053891b | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/Sprintf.pm6

[21:54] <Geth> ¦ rakudo: Add support for the "N$" index feature

[21:54] <Geth> ¦ rakudo: 

[21:54] <Geth> ¦ rakudo: TIL you can actually access specific arguments in your format string.

[21:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/745053891b

[22:06] <Geth> ¦ rakudo: d000a12557 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/Sprintf.pm6

[22:06] <Geth> ¦ rakudo: Fix issue with "u"

[22:06] <Geth> ¦ rakudo: 

[22:06] <Geth> ¦ rakudo: Caused by running value() in a scope that didn't have a valid $/

[22:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d000a12557

[22:16] <Geth> ¦ rakudo: dc02335dd9 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/Sprintf.pm6

[22:16] <Geth> ¦ rakudo: Make sure the EVAL doesn't show in any backtraces

[22:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dc02335dd9

[22:16] <lizmat> and that concludes my hacking for today

[22:25] <Geth> ¦ roast: tony-o++ created pull request #527: add tests of rounding methods (adverbs for basic rounding methods) se…

[22:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/527

[22:35] <Geth> ¦ rakudo: tony-o++ created pull request #2831: see:rakudo/rakudo#2826; add HALF-[UP|DOWN|EVEN|ODD] | [TO|FROM]-ZERO …

[22:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2831

[22:35] <synopsebot> RAKUDO#2826 [open]: https://github.com/rakudo/rakudo/issues/2826 [math] Rounding behaviors

[22:43] *** travis-ci joined
[22:43] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Introduce "O" format for Perl 5 semantics

[22:43] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/517949480 https://github.com/rakudo/rakudo/compare/1cad10b76e97...4ae023c717ce

[22:43] *** travis-ci left
[23:52] *** travis-ci joined
[23:52] <travis-ci> Rakudo build passed. usev6 'Don't return internal value from !RE-INITIALIZING

[23:52] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/517963829 https://github.com/rakudo/rakudo/compare/af7b833f0dff...417fa68e9f9f

[23:52] *** travis-ci left
