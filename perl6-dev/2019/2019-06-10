[00:37] <vrurg> .tell jnthn If'm getting right your complaint about NQP in detached head, then the solution would be to use --gen-nqp=master

[00:37] <yoleaux> vrurg: I'll pass your message to jnthn.

[00:54] <Kaiepi> .tell lizmat, the RI::JSON optimization broke the JVM since it doesn't support NFD yet

[00:54] <yoleaux> Kaiepi: What kind of a name is "lizmat,"?!

[00:54] <Kaiepi> .tell lizmat the RI::JSON optimization broke the JVM since it doesn't support NFD yet

[00:54] <yoleaux> Kaiepi: I'll pass your message to lizmat.

[01:15] <ugexe> vrurg: that is a side effect of their complaint, not the primary complaint

[01:17] <ugexe> so why not only rebuild moar/nqp when running Configure.pl instead of when running make?

[01:18] <vrurg> ugexe: sorry, what's them main one then? :) Anyway, I didn't see make rebuilding nqp yet.

[01:21] <vrurg> Oops, I see the point. Too late for today, but will get it straighten out tomorrow. 

[01:21] <vrurg> Configure.pl must not be worried about `nqp` with `--expand`. 

[01:22] <vrurg> .tell jnthn Got the problem reproduced, will have it fixed Monday.

[01:23] <yoleaux> vrurg: I'll pass your message to jnthn.

[01:33] <Kaiepi> can someone merge https://github.com/rakudo/rakudo/pull/2959/ and its related commits now that the moarvm one's been committed or do they still need to be reviewed?

[01:35] <ugexe> Kaiepi: spacing/tabs are off in the java one

[01:36] <MasterDuke> i restarted travis to see if it shows anything different now

[01:36] <ugexe> they were already off, but your changes just put them somewhere else that is wrong

[01:37] <ugexe> also if you make a test in nqp your PR will tell you if your java implementation is correct

[01:37] <MasterDuke> oh wait, shouldn't https://github.com/perl6/nqp/pull/553 be merged first?

[01:38] <ugexe> yes, if we know the java version works.

[01:38] <MasterDuke> why don't we have appveyor for nqp?

[01:42] <ugexe> we should

[01:42] <MasterDuke> Kaiepi: https://travis-ci.org/perl6/nqp/jobs/542696075#L883

[01:43] <MasterDuke> so we need another nqp bump first, right?

[01:43] <Kaiepi> shit i forgot to update the bootstrap files again

[01:44] <ugexe> why do you need to rebootstrap?

[01:44] <MasterDuke> the --gen-moar=master job passed

[01:45] <ugexe> i didnt think that'd require rebootstraping...

[01:46] <ugexe> anyways, Kaiepi did you manage to find a way to test this on jvm ?

[01:49] <Kaiepi> oh

[01:51] <Kaiepi> actually wait --gen-moar=master passed

[01:51] <Kaiepi> so i did remember

[01:51] <Kaiepi> i tested it on the jvm, but not properly

[01:52] <Kaiepi> well, i guess there isn't a proper way to test if there are no tests written for this

[01:52] <Kaiepi> but i did check to see if nqp::freemem and nqp::totalmem worked

[01:53] *** evalable6 left
[01:54] <ugexe> yeah thats all i really meant

[01:54] <ugexe> are you sure you needed to rebootstrap nqp at all though?

[01:54] *** evalable6 joined
[01:54] <ugexe> i thought that was only if you changed an existing op

[01:55] <Kaiepi> i didn't, i thought the test you posted that failed was the --gen-moar one, not --gen-moar=master

[01:56] <Kaiepi> i did change nqp::cpucores to return an int64 instead of an int32

[01:57] <MasterDuke> i don't think it's really whether or not you change vs add an op, but whether that op is used in nqp itself when compiling

[01:59] <ugexe> Kaiepi: there are a bunch of .moarvm and .jar files in that PR

[02:00] <Kaiepi> yeah, because i ran m-bootstrap-files and j-bootstrap-files after updating nqp::cpucores

[02:00] <MasterDuke> i don't think that was required

[02:03] <ugexe> its also good to decouple your PR from the rebootstrap since they are unrelated

[02:04] <ugexe> we cannot revert one without the other for instance

[02:04] <Kaiepi>  QAST::OperationsJAST.map_classlib_core_op('totalmem', $TYPE_OPS, 'freemem', [], $RT_INT, :tc);

[02:04] <Kaiepi> shit i didn't notice that

[02:08] <Kaiepi> also nqp::cpucores is called as soon as $*SCHEDULER is created, which iirc complained about cpucores having the wrong return type before i ran m-bootstrap-files

[02:08] <ugexe> ah that sounds plausible 

[02:09] <Kaiepi> do i need to move the changes to the bootstrap files to a separate commit or are they fine where they are?

[02:11] <ugexe> it would be better if they were split, but i wont let that stop me from merging it anyway

[02:17] <ugexe> i'll at least wait for the s/totalmem/freemem/

[02:54] *** evalable6 left
[02:59] *** evalable6 joined
[02:59] *** ChanServ sets mode: +v evalable6

[03:06] *** AlexDani` joined
[03:11] *** AlexDaniel left
[07:25] *** klapperl_ left
[07:25] *** klapperl joined
[08:59] <jnthn> .

[09:00] <jnthn> hah, just got messages in #moarvm...ain't I awake this mroning :)

[09:00] <jnthn> *morning

[09:02] <jnthn> .tell vrrug My complaint is that I just configured with a --prefix so it would use the NQP I build as I please (which I'm pleased to do :-)), and then it decided to try and rebuild it automatically for me in `make`, leaving me with a detached HEAD in NQP. I'm not saying that's wrong for everyone, just that I'd like a way to have it leave my other source trees alone. :)

[09:02] <yoleaux> jnthn: I'll pass your message to vrrug.

[09:12] <Geth> ¬¶ rakudo: dc78257514 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/JSON.pm6

[09:12] <Geth> ¬¶ rakudo: Restore old str-escapes version for JVM backend

[09:12] <Geth> ¬¶ rakudo: 

[09:12] <Geth> ¬¶ rakudo: Since the JVM backend doesn't know about NFD yet

[09:12] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/dc78257514

[09:14] <lizmat> Kaiepi: ^^

[09:27] <jnthn> m: say 26.40 / 32.98

[09:27] <evalable6> jnthn, rakudo-moar dc7825751: OUTPUT: ¬´0.800485‚ê§¬ª

[09:27] <jnthn> That's the improvement on the Rakudo speedup-match branch for `my $x = "foo bar  baz     wat is it"; my $total = 0; for ^1_000_000 { $total = $total + $x.split(/\s+/).elems }`

[09:28] <lizmat> faster?  or less memory?  :)

[09:28] <lizmat> cool

[09:28] <jnthn> Oddly, the NQP one doesn't show much difference on Rakudo build time now I measure it here at the office.

[09:29] <jnthn> Not immediately sure why

[09:30] <jnthn> Maybe match construction is just far less dominant

[09:30] <jnthn> Ah, damn, failing spectests :(

[09:31] <jnthn> Oh, nearly all of them in :P5 tests though

[09:34] <Kaiepi> i've been messing with the js backend

[09:34] <Kaiepi> i can almost get perl6-js to build, but i need to add support for bindlexdyn because that's causing it to fail right at the very end of compiling

[09:35] <Kaiepi> also thanks lizmat 

[09:36] <jnthn> nqp: my $m := "a" ~~ /<ident> & <alpha>/; say(nqp::elems($m.list))

[09:36] <jnthn> ah, darn, no but here for NQP

[09:36] <jnthn> Also that should be .hash :)

[09:37] <jnthn> m: use nqp; nqp::getcomp('nqp').eval(q|my $m := "a" ~~ /<ident> & <alpha>/; say(nqp::elems($m.hash))|)

[09:37] <evalable6> jnthn, rakudo-moar dc7825751: OUTPUT: ¬´(exit code 1) Cannot call method 'eval' on a null object‚ê§  in block <unit> at /tmp/M9prxiAQbR line 1‚ê§‚ê§¬ª

[09:37] <jnthn> aww

[09:38] <jnthn> m: use NQP:from<nqp>; use nqp; nqp::getcomp('nqp').eval(q|my $m := "a" ~~ /<ident> & <alpha>/; say(nqp::elems($m.hash))|)

[09:38] <evalable6> jnthn, rakudo-moar dc7825751: OUTPUT: ¬´(exit code 1) ===SORRY!===‚ê§Could not find NQP at line 1 in:‚ê§    file#/home/bisectable/git/‚Ä¶¬ª

[09:38] <evalable6> jnthn, Full output: https://gist.github.com/467c4596c0ee14bb14a2d3557051e0fd

[09:40] <jnthn> Hm, that's 0 on mater of NQP also, though

[09:40] <jnthn> m: say ("a" ~~ /<alpha> & <ident>/).hash.elems

[09:40] <evalable6> jnthn, rakudo-moar dc7825751: OUTPUT: ¬´2‚ê§¬ª

[09:52] <Geth> ¬¶ nqp/match-speedup: 4 commits pushed by (Jonathan Worthington)++

[09:52] <Geth> ¬¶ nqp/match-speedup: f3ed439155 | Always produce integers in captures hash

[09:52] <Geth> ¬¶ nqp/match-speedup: d97f3084ad | Use a better data structure for Match setup info

[09:52] <Geth> ¬¶ nqp/match-speedup: 0c398702b6 | Bring back the onlyname optimization

[09:52] <Geth> ¬¶ nqp/match-speedup: fbe7595a90 | Use flags/bitmask to cheapen/avoid some work

[09:52] <Geth> ¬¶ nqp/match-speedup: review: https://github.com/perl6/nqp/compare/63d4b74efc00...fbe7595a90ea

[09:52] <Geth> ¬¶ nqp/match-speedup: d7ab1e7d12 | (Jonathan Worthington)++ | src/QRegex/P6Regex/Actions.nqp

[09:52] <Geth> ¬¶ nqp/match-speedup: Fix capnames with &

[09:52] <Geth> ¬¶ nqp/match-speedup: 

[09:52] <Geth> ¬¶ nqp/match-speedup: Not sure how we ever passed a Rakudo test for /<alpha> & <ident>/ in the

[09:52] <Geth> ¬¶ nqp/match-speedup: past with this broken.

[09:52] <Geth> ¬¶ nqp/match-speedup: review: https://github.com/perl6/nqp/commit/d7ab1e7d12

[09:56] <Kaiepi> now that the issues brought up with the nqp pullreq are fixed can this be merged? https://github.com/rakudo/rakudo/pull/2959

[10:02] <Geth> ¬¶ nqp: Kaiepi++ created pull request #554: Use --release 9 instead of -source 1.9 in the JVM's Makefile

[10:02] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/pull/554

[10:06] <jnthn> Wow, the capnames construction in P5Regex was totally wrong for quantifiers, and we just got away with it before because we didn't use that information to avoid work.

[10:06] <jnthn> *avoid

[10:08] <jnthn> Kaiepi: Hm, seems it totally fails CI?

[10:10] <Kaiepi> oh for fuck's sake 

[10:10] <Kaiepi> it was just working yesterday

[10:10] <Geth> ¬¶ nqp/match-speedup: 9d14819169 | (Jonathan Worthington)++ | src/QRegex/P5Regex/Actions.nqp

[10:10] <Geth> ¬¶ nqp/match-speedup: Correct construction of capnames in P5Regex

[10:10] <Geth> ¬¶ nqp/match-speedup: 

[10:10] <Geth> ¬¶ nqp/match-speedup: We got it totally wrong for anything quantified, and never noticed

[10:10] <Geth> ¬¶ nqp/match-speedup: before because we didn't really use this information.

[10:10] <Geth> ¬¶ nqp/match-speedup: review: https://github.com/perl6/nqp/commit/9d14819169

[10:11] <jnthn> Does it need an NQP bump maybe?

[10:11] <jnthn> I'll do one shortly

[10:11] <jnthn> Well, if the spectest passes this time :P

[10:12] <Kaiepi> i think i forgot to run m-bootstrap-files after fixing nqp::totalmem actually calling nqp::freemem's function

[10:13] <jnthn> Hm, shouldn't need to rebootstrap just for adding ops

[10:13] <Geth> ¬¶ nqp/master: 6 commits pushed by (Jonathan Worthington)++

[10:13] <Geth> ¬¶ nqp/master: f3ed439155 | Always produce integers in captures hash

[10:13] <Geth> ¬¶ nqp/master: d97f3084ad | Use a better data structure for Match setup info

[10:13] <Geth> ¬¶ nqp/master: 0c398702b6 | Bring back the onlyname optimization

[10:13] <Geth> ¬¶ nqp/master: fbe7595a90 | Use flags/bitmask to cheapen/avoid some work

[10:13] <Geth> ¬¶ nqp/master: d7ab1e7d12 | Fix capnames with &

[10:13] <Geth> ¬¶ nqp/master: 9d14819169 | Correct construction of capnames in P5Regex

[10:13] <Geth> ¬¶ nqp/master: review: https://github.com/perl6/nqp/compare/f2b319db9485...9d1481916993

[10:15] <jnthn> huh, where on earth did tools/build/NQP_REVISION go?

[10:15] <timotimo> it's now under templates/

[10:15] <jnthn> huh

[10:17] <Geth> ¬¶ rakudo/master: 5 commits pushed by (Jonathan Worthington)++

[10:17] <Geth> ¬¶ rakudo/master: 9dad99b8bc | Re-arrange top level of Match construction

[10:17] <Geth> ¬¶ rakudo/master: 36fa16bb38 | Cheapean Match object construction

[10:17] <Geth> ¬¶ rakudo/master: 0e7c6e77cc | Tune handling of positional captures

[10:17] <Geth> ¬¶ rakudo/master: c361736e07 | Fast-path for integer case of Str.Numeric

[10:17] <Geth> ¬¶ rakudo/master: cbb9034a08 | Bump NQP version

[10:17] <Geth> ¬¶ rakudo/master: review: https://github.com/rakudo/rakudo/compare/dc782575147a...cbb9034a08b0

[10:18] <timotimo> Cheapean

[10:18] <timotimo> nice

[10:18] <jnthn> haha

[10:19] <lizmat> timotimo: did you see MasterDuke's find re nqp::slice ?

[10:19] <jnthn> Coulda fixed it if I'd seen it before the branch merge :P

[10:19] <timotimo> i don't think i did

[10:23] <Kaiepi> bastille% nqp -e 'nqp::say(nqp::coerce_is(nqp::freemem()))'

[10:23] <Kaiepi> 2049646592

[10:23] <Kaiepi> bastille% nqp-j -e 'nqp::say(nqp::coerce_is(nqp::freemem()))'

[10:23] <Kaiepi> 78787256

[10:23] <Kaiepi> bastille% nqp-js -e 'nqp::say(nqp::coerce_is(nqp::freemem()))'

[10:23] <Kaiepi> 1965273088

[10:23] <Kaiepi> bastille% nqp -e 'nqp::say(nqp::coerce_is(nqp::totalmem()))'

[10:23] <Kaiepi> 8180408320

[10:23] <Kaiepi> bastille% nqp-j -e 'nqp::say(nqp::coerce_is(nqp::totalmem()))'

[10:23] <Kaiepi> 98566144

[10:23] <Kaiepi> bastille% nqp-js -e 'nqp::say(nqp::coerce_is(nqp::totalmem()))'

[10:23] <Kaiepi> 8180408320

[10:23] <Kaiepi> ok everything should work now with the latest commit i pushed to the nqp pullreq

[10:24] <Kaiepi> (don't worry about the jvm returning different numbers, it measures what's free or available to the jvm itself, not the system)

[10:32] <timotimo> lizmat: where do i look for that?

[10:33] <lizmat> timotimo: comments on https://github.com/MoarVM/MoarVM/commit/6053919e0ca4ff1d36e90a35acb3dcd25b1abf19

[10:35] <timotimo> nooooo i broke it

[10:39] <timotimo> doesn't b0rk on my end :(

[10:39] <timotimo> oh

[10:39] <timotimo> maybe i don't have that moar commit yet

[10:43] *** AlexDani` is now known as AlexDaniel

[10:43] *** AlexDaniel left
[10:43] *** AlexDaniel joined
[10:49] <Geth> ¬¶ nqp: 479c5dd1ba | (Jonathan Worthington)++ | src/core/NQPRoutine.nqp

[10:49] <Geth> ¬¶ nqp: Add int to constants to avoid a lot of unboxing

[10:49] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/479c5dd1ba

[10:56] <timotimo> oh, hm, the fastcreate uses the size of MVMArray even though it might actually be a different kind of repr being used

[10:59] <timotimo> considering just dropping that piece for now, reintroducing it later when i've had enough time to get it right

[11:12] <Geth> ¬¶ nqp: a917b00517 | (Jonathan Worthington)++ | src/QRegex/Cursor.nqp

[11:12] <Geth> ¬¶ nqp: Some small optimizations to !cursor_init

[11:12] <Geth> ¬¶ nqp: 

[11:12] <Geth> ¬¶ nqp: These save a bit when it's used many times, as it is when we match lots

[11:12] <Geth> ¬¶ nqp: of simple regexes in a loop.

[11:12] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/a917b00517

[11:13] *** Kaiepi left
[11:15] <Geth> ¬¶ rakudo: 9107215a99 | (Jonathan Worthington)++ | src/core/Rakudo/Iterator.pm6

[11:15] <Geth> ¬¶ rakudo: ReifiedListIterator can be a PredictiveIterator

[11:15] <Geth> ¬¶ rakudo: 

[11:15] <Geth> ¬¶ rakudo: Since the list is already reified, we know how many elements there are.

[11:15] <Geth> ¬¶ rakudo: This is a significant speedup for things like `$foo.split(/\s+/).elems`

[11:15] <Geth> ¬¶ rakudo: as it can just return the elements of the list (in fact, the `.elems`

[11:15] <Geth> ¬¶ rakudo: part is now fully inlined into the caller).

[11:15] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/9107215a99

[11:15] <Geth> ¬¶ rakudo: ce30ff2aa9 | (Jonathan Worthington)++ | src/core/Str.pm6

[11:15] <Geth> ¬¶ rakudo: Avoid a little indirection in split(/regex/)

[11:15] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/ce30ff2aa9

[11:15] *** Kaiepi joined
[11:20] *** roho joined
[11:21] *** roho left
[11:34] <Geth> ¬¶ rakudo: bed0695df2 | (Jonathan Worthington)++ | src/core/Str.pm6

[11:34] <Geth> ¬¶ rakudo: Call !match-list directly in split

[11:34] <Geth> ¬¶ rakudo: 

[11:34] <Geth> ¬¶ rakudo: Rather than going through .match with all of its related checks along

[11:34] <Geth> ¬¶ rakudo: the way.

[11:34] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/bed0695df2

[11:35] <lizmat> timotimo:could you run another module indexing ?

[11:35] <lizmat> https://modules.perl6.org/dist/Pod::To::Man:cpan:CLARKEMA  is a 404  :-(

[11:35] <timotimo> jj said he runs it via a cron job

[11:35] <timotimo> oh, but only daily?

[11:35] <lizmat> yeah... and this was a new entry 17 hours ago

[11:35] <timotimo> i'll do it right now

[11:35] <lizmat> timotimo++

[11:36] <jnthn> That split/elems benchmark is now running in 64% of the time it used to. :)

[11:36] <lizmat> it's the only new module in this week's PsW

[11:36] <lizmat> *P6w

[11:36] <jnthn> Lunch, lesson, etc. &

[11:36] <lizmat> jnthn++

[11:37] <timotimo> wow, nice.

[11:39] <lizmat> notable6: weekly

[11:39] <notable6> lizmat, 6 notes: https://gist.github.com/a12afe2a4f3a02f9e1744114bc827f14

[11:43] <Geth> ¬¶ nqp: 104a5ce4d4 | (Ben Davies)++ | tools/templates/jvm/Makefile.in

[11:43] <Geth> ¬¶ nqp: Use --release 9 instead of -source 1.9 in the JVM's Makefile

[11:43] <Geth> ¬¶ nqp: 

[11:43] <Geth> ¬¶ nqp: This shuts up warnings about the target being the wrong version of the

[11:43] <Geth> ¬¶ nqp: JDK and warnings about -bootclasspath being needed.

[11:43] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/104a5ce4d4

[11:43] <Geth> ¬¶ nqp: 655b50b5d0 | (Christian Bartolom√§us)++ (committed using GitHub Web editor) | tools/templates/jvm/Makefile.in

[11:43] <Geth> ¬¶ nqp: Merge pull request #554 from Kaiepi/jvm-release

[11:43] <Geth> ¬¶ nqp: 

[11:43] <Geth> ¬¶ nqp: Use --release 9 instead of -source 1.9 in the JVM's Makefile

[11:43] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/655b50b5d0

[11:45] <Geth> ¬¶ nqp: Kaiepi++ created pull request #555: [js] Refactor src/vm/js/nqp-runtime/global-context.js

[11:45] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/pull/555

[12:02] <lizmat> cycling, before it starts to rain&

[12:15] <timotimo> modules.perl6.org should be up to date now

[12:59] *** pmurias joined
[12:59] <pmurias> Kaiepi: I looked at the PR

[13:00] <pmurias> Kaiepi: all the adhoc tweaks/cleanups seem fine (scs where not kept in a map because that code is from before I started depending on Map being present)

[13:02] <Kaiepi> alright

[13:02] <pmurias> Kaiepi: restoreThisGlobalContext seems to be only used in rakudo.js

[13:03] <pmurias> here https://github.com/rakudo/rakudo/blob/master/src/vm/js/perl6-runtime/runtime.js#L16

[13:03] <pmurias> Kaiepi: so I think we could just get rid of the entire complex mechanism at store stuff on the context

[13:04] <pmurias> the runtime cost of a redirection to a singleton instead of a global is that high right?

[13:10] <Kaiepi> looks like you're right, none of the methods on GlobalContextWrapper besides initialize are actually used and initialize shouldn't even exist

[13:13] <pmurias> Kaiepi: the early design was to just save and restore globals on the context, then I decided to just move that over there and maybe migrate back to globals if the indirection is too costly

[13:16] <Kaiepi> wait

[13:16] <Kaiepi> the methods on GlobalContextWrapper are used in rakudo

[13:23] <pmurias> Kaiepi: yes

[13:24] <pmurias> Kaiepi: I was considering just moving everything on top of the context and removing the saving/restoring dance

[13:41] *** skids joined
[13:42] <vrurg> .tell jnthn not sure you'd have time to reply this week. In short about the subsets: their current behavior is a bug. It's not like breaking backward compat just for the sake of a new feature.

[13:42] <yoleaux> vrurg: I'll pass your message to jnthn.

[13:58] <pmurias> Kaiepi: any thoughts on that?

[14:09] <Kaiepi> i agree, after poring through the code i don't see much of a point in saving/restoriing the global context

[14:55] <pmurias> Kaiepi: should I merge the PR in?

[14:57] <vrurg> ugexe: You're a great critic. May you have a look at https://github.com/perl6/problem-solving/issues/3 too and say what you think?

[15:00] <Kaiepi> sure pmurias, since removing the need for GlobalContextWrapper is pretty annoying to do and spreads over two repos

[15:01] <ugexe> vrurg: i'll try and remember to take a look at it after work

[15:06] <pmurias> Kaiepi: I'll make rakudo.js just keep everything on the global context tommorow

[15:07] <Kaiepi> ok

[15:12] *** pmurias left
[15:26] *** ggoebel joined
[15:49] *** Kaiepi left
[15:52] *** pamplemousse joined
[16:21] *** pamplemousse left
[16:23] *** pamplemousse joined
[16:34] *** pamplemousse_ joined
[16:35] *** pamplemousse left
[16:56] *** pamplemousse_ is now known as pamplemousse

[17:07] *** pamplemousse left
[17:11] *** pamplemousse joined
[17:46] *** Kaiepi joined
[18:02] <Geth> ¬¶ nqp: vrurg++ created pull request #556: nqp-configure submodule update

[18:02] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/pull/556

[18:04] <Geth> ¬¶ rakudo: vrurg++ created pull request #2970: Prevent rebuild of nqp without --gen-nqp.

[18:04] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/2970

[18:09] *** pamplemousse_ joined
[18:13] *** pamplemousse left
[18:14] *** pamplemousse_ is now known as pamplemousse

[18:21] <Geth> ¬¶ nqp: 852a32c7eb | (Vadim Belman)++ | 3rdparty/nqp-configure

[18:21] <Geth> ¬¶ nqp: nqp-configure submodule update

[18:21] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/852a32c7eb

[18:21] <Geth> ¬¶ nqp: 86f2366472 | (Vadim Belman)++ (committed using GitHub Web editor) | 3rdparty/nqp-configure

[18:21] <Geth> ¬¶ nqp: Merge pull request #556 from vrurg/build-revamp

[18:21] <Geth> ¬¶ nqp: 

[18:21] <Geth> ¬¶ nqp: nqp-configure submodule update

[18:21] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/86f2366472

[18:42] *** Kaiepi left
[18:51] *** brrt joined
[18:51] <brrt> \o

[18:51] <brrt> why do I have to redownload NQP?

[18:51] <brrt> (when invoking rakudo Configure.pl)

[18:53] <ugexe> maybe https://github.com/rakudo/rakudo/pull/2970 fixes it

[18:54] <vrurg> brrt: aha, 2970 does. Only waiting for CI to complete before merging. 

[18:55] <brrt> Hm. Ok

[18:55] <brrt> I'll wait for a bit then

[18:59] <vrurg> appveyor is still broken. I thought it was fixed already.

[19:03] <nine> I think....this elaborate plan to fix the P6 subclass of a P5 class in Inline::Perl5 may actually work thanks to Perl 5 destructors being able to resurrect their object multiple times

[19:03] <yoleaux> 7 Jun 2019 19:40Z <japhb> nine: Is there any chance of a python3-compatible Inline::Python this year?  (Asking because of the global deprecation of python2 at EOY, and because my $dayjob is switching over presently.)

[19:03] <nine> .tell japhb Yes, Python 3 compatibility should be pretty straight forward. Especially since Perl 5's Inline::Python can serve as a template

[19:03] <yoleaux> nine: I'll pass your message to japhb.

[19:04] *** ggoebel left
[19:12] <ugexe> vrurg: weeks ago appeveyor went red. since then 3 other windows regressions have occured.

[19:13] <ugexe> so everytime we think we fixed that last one... we see a new test failure :/

[19:14] <vrurg> Ok, so I don't rely on it yet.

[19:15] <Geth> ¬¶ rakudo: f15f56875a | (Vadim Belman)++ | 3 files

[19:15] <Geth> ¬¶ rakudo: Prevent rebuild of nqp without --gen-nqp.

[19:15] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/f15f56875a

[19:15] <Geth> ¬¶ rakudo: f935bd20ad | (Vadim Belman)++ | tools/lib/NQP/Config/Rakudo.pm

[19:15] <Geth> ¬¶ rakudo: Don't try parse version when no binary found.

[19:15] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/f935bd20ad

[19:15] <Geth> ¬¶ rakudo: 1ccfc01349 | (Vadim Belman)++ (committed using GitHub Web editor) | 3 files

[19:15] <ugexe> it should just be failing tests now, not failing build

[19:15] <Geth> ¬¶ rakudo: Merge pull request #2970 from vrurg/build-revamp

[19:15] <Geth> ¬¶ rakudo: 

[19:15] <Geth> ¬¶ rakudo: Prevent rebuild of nqp without --gen-nqp.

[19:15] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/1ccfc01349

[19:15] <vrurg> brrt: try now, pls. 

[19:15] <ugexe> ===SORRY!===

[19:15] <ugexe>   Cannot determine the brand of your nmake utility. at C:/projects/rakudo/nqp/3rdparty/nqp-configure/lib/NQP/Config.pm line 171.

[19:16] <vrurg> ugexe: Cannot catch this problem. Is it reproducible in your case?

[19:17] <brrt> vrurg: complains bitterly, but is otherwise moving ahead

[19:18] <vrurg> brrt: It should complain because your nqp is seemingly old.

[19:18] <brrt> i don'

[19:18] <brrt> t think that's true though

[19:19] <vrurg> What is it complaining about then?

[19:19] <brrt> that it's old

[19:19] <brrt> :-P

[19:20] <vrurg> Yep, but what versions does it report as expected/current? And check what binary path it checks against.

[19:23] <vrurg> Another thing about the fix: Configure.pl would only update nqp if --gen-nqp or --gen-moar is specified. I think this is how it must be.

[19:24] <brrt> yes, that's how it used to be

[19:25] <ugexe> vrurg: maybe you should add debug output to see why it does not match. this error is seemingly random, yes, but didnt happen last release

[19:25] <ugexe> even just create dummy PR with the debug changes so you can use appveyor itself to discover

[19:25] <vrurg> ugexe: already planned. Need to have some things done first right now.

[19:26] <brrt> vrurg: works now

[19:26] <vrurg> brrt: üëçüèª

[19:27] <vrurg> ugexe: unfortunately, I still don't have access to 'restart' button on appveyour. It complicates debugging.

[19:27] <ugexe> only guess is output of `run` has not fully populated whatever it string checks for valid data for, but IPC::Cmd->run doesn't work like that so i dont see how

[19:28] <ugexe> vrurg: you can just open a dummy PR that you dont expect to merge

[19:28] <ugexe> and force push empty commit to rerun

[19:28] <ugexe> or just push new commits since PR wont be merged

[19:28] <vrurg> ugexe: Sure, as a workaround. Just an annoyance. ;)

[19:28] <ugexe> I think you need someone with higher privs than me to set that up for you on appveyor

[19:33] <ugexe> at very least seems like you should be pattern matching on out_buffer or error_buffer, not on the mixed buffer

[19:35] <lizmat> reportable6: 2019-06-03T12:00:00 2019-06-10T00:00:00Z

[19:35] <reportable6> lizmat, OK, working on it! This may take up to 40 seconds

[19:36] <reportable6> lizmat, https://gist.github.com/3de2432737660198c1c9791205d02571

[19:36] <Geth> ¬¶ rakudo: vrurg++ created pull request #2971: Debug PR 

[19:36] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/2971

[19:38] <ugexe> NQP::Config::__ANON__("Command failed (status 512): nmake install\x{a}") called at  -- vrurg, wonder if that \x{a} is legit

[19:41] <vrurg> ugexe: where did you get this?

[19:41] <ugexe> https://ci.appveyor.com/project/rakudo/rakudo/builds/25176121/job/k6koj3o5jfpdcyn7#L1023

[19:41] <ugexe> line 1023 and line 1030

[19:43] <ugexe> seems like maybe its trying to do "nmake install\n" or something

[19:43] <ugexe> a missing chomp or some such

[19:43] <vrurg> Ah, this is how Carp::longmesg outputs \n from a string paramter.

[19:44] <ugexe> ah, then nevermind

[19:46] <ugexe> now that there is debug output it will never fail :P

[19:46] <lizmat> notable6: weekly

[19:46] <notable6> lizmat, 7 notes: https://gist.github.com/fbe9b7f213cd97b876f8e703cfd6a876

[19:47] <vrurg> The output is matched against /Microsoft .* NMAKE/s ‚Äì how simplier could that be? Not even mix of stdout/stderr could break it unless something totally unrelated is printed.

[19:47] <lizmat> notable6: weekly reset

[19:47] <notable6> lizmat, Moved existing notes to ‚Äúweekly_2019-06-10T19:47:33Z‚Äù

[19:49] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/06/10/2019-23-complete-course/

[19:50] <vrurg> lizmat++

[20:09] <ugexe> vrurg: i just looked around in appveyor and I can't find any permissions with my name, just moritz, so i'm not sure why I can restart builds

[20:24] <ugexe> vrurg: where are all these "need?" coming from? https://ci.appveyor.com/project/rakudo/rakudo/builds/25177210/job/8vfcc3o79d97h618?fullLog=true#L43

[20:39] *** Kaiepi joined
[20:51] *** pamplemousse left
[20:52] *** pamplemousse joined
[21:01] *** brrt left
[21:25] *** skids left
[22:09] <japhb> .

[22:09] <yoleaux> 19:03Z <nine> japhb: Yes, Python 3 compatibility should be pretty straight forward. Especially since Perl 5's Inline::Python can serve as a template

[22:10] <japhb> .tell nine Ah, good to know re: python3, thank you.

[22:10] <yoleaux> japhb: I'll pass your message to nine.

[22:17] <vrurg> ugexe: "need?" is a debug leftover.

[22:25] <Geth> ¬¶ rakudo: vrurg++ created pull request #2972: Remove overlooked debug print.

[22:25] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/2972

[22:27] *** pamplemousse left
[22:27] <Geth> ¬¶ rakudo: e3df375275 | (Vadim Belman)++ | tools/lib/NQP/Config/Rakudo.pm

[22:27] <Geth> ¬¶ rakudo: Remove overlooked debug print.

[22:27] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/e3df375275

[22:27] <Geth> ¬¶ rakudo: 8a6a0aeaa7 | (Vadim Belman)++ (committed using GitHub Web editor) | tools/lib/NQP/Config/Rakudo.pm

[22:27] <Geth> ¬¶ rakudo: Merge pull request #2972 from vrurg/build-revamp

[22:27] <Geth> ¬¶ rakudo: 

[22:27] <Geth> ¬¶ rakudo: Remove overlooked debug print.

[22:27] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/8a6a0aeaa7

[22:31] <ugexe> vrurg: so what is happening in appveyor is Microsoft is matched from STDERR and NMAKE from STDOUT

[22:31] <ugexe> seems like IPC::Cmd bug

[22:31] *** pamplemousse joined
[22:32] <ugexe> but the bug might only be with mixing stderr/stdout streams

[22:33] <vrurg> Could be a bug. I would limit the regexp to the version line only. It is sufficient to make sure it is nmake.

[22:38] <Geth> ¬¶ nqp/master: 4 commits pushed by (Ben Davies)++, (Nick Logan)++

[22:38] <Geth> ¬¶ nqp/master: 7978b426ff | Implement freemem and totalmem ops

[22:38] <Geth> ¬¶ nqp/master: 0ccd87a06d | Make nqp::totalmem call the right function

[22:38] <Geth> ¬¶ nqp/master: 4e9178a1c4 | Update bootstrap files

[22:38] <Geth> ¬¶ nqp/master: 26754f16e1 | Merge pull request #553 from Kaiepi/mem

[22:38] <Geth> ¬¶ nqp/master: review: https://github.com/perl6/nqp/compare/86f236647222...26754f16e14e

[22:38] <Geth> ¬¶ rakudo: 31671f8f71 | (Ben Davies)++ | src/core/Kernel.pm6

[22:38] <Geth> ¬¶ rakudo: Implement support for Kernel.free-memory and Kernel.total-memory

[22:38] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/31671f8f71

[22:38] <Geth> ¬¶ rakudo: ab738b4ee1 | (Nick Logan)++ (committed using GitHub Web editor) | src/core/Kernel.pm6

[22:38] <Geth> ¬¶ rakudo: Merge pull request #2959 from Kaiepi/mem

[22:38] <Geth> ¬¶ rakudo: 

[22:38] <Geth> ¬¶ rakudo: Implement support for Kernel.free-memory and Kernel.total-memory

[22:38] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/ab738b4ee1

[22:45] *** pamplemousse left
[22:49] <vrurg> ugexe: As to appveyor permission, I was asking their support but they're sending me to the project owners. Maybe moritz knowns better what could be the cause.

[22:56] *** travis-ci joined
[22:56] <travis-ci> NQP build failed. Nick Logan 'Merge pull request #553 from Kaiepi/mem

[22:56] <travis-ci> https://travis-ci.org/perl6/nqp/builds/543962497 https://github.com/perl6/nqp/compare/86f236647222...26754f16e14e

[22:56] *** travis-ci left
[22:59] <vrurg> My build just've failed too.

[22:59] *** Kaiepi left
[23:00] <Geth> ¬¶ nqp: 8c90f62668 | (Nick Logan)++ (committed using GitHub Web editor) | tools/templates/MOAR_REVISION

[23:00] <Geth> ¬¶ nqp: Bump MoarVM

[23:00] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/8c90f62668

[23:01] <Geth> ¬¶ rakudo: 8a37b9311c | (Nick Logan)++ (committed using GitHub Web editor) | tools/templates/NQP_REVISION

[23:01] <Geth> ¬¶ rakudo: Bump NQP

[23:01] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/8a37b9311c

[23:17] *** travis-ci joined
[23:17] <travis-ci> NQP build passed. Nick Logan 'Bump MoarVM'

[23:17] <travis-ci> https://travis-ci.org/perl6/nqp/builds/543970341 https://github.com/perl6/nqp/compare/26754f16e14e...8c90f62668e8

[23:17] *** travis-ci left
[23:25] <timotimo> make: *** No rule to make target 'tools/build/gen-moar-runner.pl', needed by 'nqp-m'.  Stop.

[23:25] <timotimo> mhhh ... huh?

[23:26] <vrurg> timotimo: Re-run Configure.pl. Looks like Makefile is outdated.

[23:27] <timotimo> ah, i did run configure, but it errored

[23:27] <timotimo> i don't have IPC/Cmd.pm

[23:27] <timotimo> when did we start requiring that?

[23:28] <timotimo> "install 11 packages"

[23:28] <vrurg> I would need to bisect it, but for a couple of weeks now.

[23:28] <timotimo> damn

[23:28] <timotimo> fedora users all over the world will groan at that

[23:29] <vrurg> How did fedora choose what modules come included with Perl5?

[23:29] <vrurg> Mostly a rethoric question though...

[23:30] <timotimo> ha

[23:30] <timotimo> yeah

[23:31] <vrurg> I checked out with https://perldoc.perl.org/index-modules-I.html as to avoid anything non-standard.

[23:31] <vrurg> Guessing that CentOS would do the same.

[23:31] <timotimo> most probably

[23:34] <vrurg> Anyway, I'd vote for leaving this one in. qx{} isn't sufficient in many respects. 

[23:36] <timotimo> i guess that's fair

[23:37] <timotimo> i wonder if we want to put in specific verbiage for users of distros that cut everything out of the perl installation? like "fedora users can run `sudo dnf install perl-IPC-Cmd` to install the missing package"

[23:40] <MasterDuke> lizmat: around? if so, do you have a repro for that bad profile you showed me?

[23:46] <vrurg> timotimo: when I was working on Foswiki there was a branch for autoinstalling necessary modules using cpanm. But a message is definitely easier to implement. ;)

[23:47] <timotimo> well, then a user would ahve to install cpanm first

[23:47] <timotimo> and probably also set up that local lib stuff

[23:47] <vrurg> No because cpanm can be used as module. I integrated it. Not that it was a simple task but eventually I got it working.

[23:48] *** travis-ci joined
[23:48] <travis-ci> Rakudo build failed. Vadim Belman 'Merge pull request #2972 from vrurg/build-revamp

[23:48] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/543958685 https://github.com/rakudo/rakudo/compare/1ccfc013498d...8a6a0aeaa724

[23:48] *** travis-ci left
[23:49] <ugexe> how is qx insufficient?

[23:49] <ugexe> i haven't seen any advanced usage that would suggest that

[23:51] <vrurg> ugexe: Complications with spaces in pathnames.

[23:51] <vrurg> With run() I use @cmd.

[23:58] <ugexe>  if (ref($cmd) eq 'ARRAY') {$cmd = join(" ", @{$cmd});}

[23:58] <ugexe> thats the code from IPC::Cmd

[23:59] <vrurg> ü§¶üèª‚Äç‚ôÇÔ∏è

[23:59] <ugexe> it does have a quote_args utility function though

