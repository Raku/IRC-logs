[00:30] *** patrickz left
[01:13] *** AlexDaniel left
[03:19] *** dalek left
[05:02] <japhb> jnthn: Seeing a weird slowdown when run()'ing many child processes (each one getting .spurt(:close)'ed some input, but out/err left unopened).  Even though I close the input after spurt, and my reading of the Proc code indicates it should await the process when the last pipe handle closes, it *appears* like all these Proc's are making rakudo fall over.  (I don't see the subprocesses using any CPU in top, 

[05:02] <japhb> just the perl6 process chewing all my cores.)

[05:03] <japhb> Any idea what I'm missing?  Is there a way to force Proc to await the child and release all resources/pipes/taps/etc.?

[05:05] <japhb> FWIW, I simplified the child processes to just 'echo foo bar baz', since echo accepts but ignores its input, and the problem remains.

[06:23] <timotimo> japhb: any help from strace with its follow-children mode, or with perf top or record/report?

[06:23] <yoleaux> 02:34Z <MasterDuke> timotimo: i just tried profiling lizmat's code in https://github.com/rakudo/rakudo/issues/1421 and it's saying `push SETTING::native_array:682` isn't getting jitted. but a spesh log just shows two `# expr bail: Cannot handle DEOPT_ONE (ins=sp_guard)` for the after of that function. any idea what's up?

[06:59] *** Geth left
[06:59] *** synopsebot left
[06:59] *** dalek joined
[06:59] *** ChanServ sets mode: +v dalek

[06:59] *** Geth joined
[06:59] *** synopsebot joined
[06:59] *** ChanServ sets mode: +v Geth

[06:59] *** ChanServ sets mode: +v synopsebot

[06:59] *** p6lert joined
[07:42] *** patrickb joined
[07:51] *** ufobat_ joined
[08:31] <lizmat> Files=1259, Tests=98237, 396 wallclock secs (25.15 usr  7.16 sys + 2834.53 cusr 242.17 csys = 3109.01 CPU)

[08:35] <Geth> ¦ rakudo: 194e37788f | (Ben Davies)++ | 3 files

[08:35] <Geth> ¦ rakudo: Don't use nqp::execname on OpenBSD

[08:35] <Geth> ¦ rakudo: 

[08:35] <Geth> ¦ rakudo: Fixess one of two parts to #2824

[08:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/194e37788f

[08:35] <Geth> ¦ rakudo: cec0839fa6 | (Elizabeth Mattijsen)++ (committed using GitHub Web editor) | 3 files

[08:35] <Geth> ¦ rakudo: Merge pull request #2845 from Kaiepi/executable

[08:35] <synopsebot> RAKUDO#2824 [open]: https://github.com/rakudo/rakudo/issues/2824 [BLOCKER][BSD] Cannot install zef (or run much of anything without MVM_JIT_DISABLE)

[08:35] <Geth> ¦ rakudo: 

[08:35] <Geth> ¦ rakudo: Don't use nqp::execname on OpenBSD

[08:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cec0839fa6

[09:18] <Geth> ¦ roast: a675a0a1b2 | (Elizabeth Mattijsen)++ | S32-str/sprintf-u.t

[09:18] <Geth> ¦ roast: Parameterize sprintf testing of "u" format

[09:18] <Geth> ¦ roast: 

[09:18] <Geth> ¦ roast: Mostly intended to register the behaviour of the current sprintf

[09:18] <Geth> ¦ roast: implementation, which was not testing some combinations of flags and values.

[09:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a675a0a1b2

[09:20] <Geth> ¦ rakudo: bdf6f151db | (Elizabeth Mattijsen)++ | t/spectest.data

[09:20] <Geth> ¦ rakudo: Add extensive testing of "u" format in sprintf

[09:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bdf6f151db

[09:22] <lizmat> m: dd PROCESS::.keys

[09:22] <evalable6> lizmat, rakudo-moar cec0839fa: OUTPUT: «("\$SCHEDULER", "\$OUT", "\$AWAITER", "\$SPEC", "\$ERR", "\&chdir", "\$PID", "\%ENV", "\$IN").Seq␤»

[09:25] <lizmat> m: PROCESS:<$*FOO> =  42; say $*FOO

[09:26] <evalable6> lizmat, rakudo-moar cec0839fa: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/8PkLPDv7RG␤Precedi…»

[09:26] <evalable6> lizmat, Full output: https://gist.github.com/b7f6698fe1796f428b335876c7d5f197

[09:26] <lizmat> m: PROCESS::<$*FOO> =  42; say $*FOO

[09:26] <evalable6> lizmat, rakudo-moar cec0839fa: OUTPUT: «(exit code 1) Dynamic variable $*FOO not found␤  in block <unit> at /tmp/V44G1Licum line 1␤␤»

[09:26] <SmokeMachine> m: PROCESS::<$FOO> =  42; say $*FOO

[09:26] <evalable6> SmokeMachine, rakudo-moar bdf6f151d: OUTPUT: «42␤»

[09:27] <lizmat> indeed

[09:28] <SmokeMachine> lizmat: now I got it! thanks!

[09:33] <SmokeMachine> m: $PROCESS::FOO =  42; say $*FOO

[09:33] <evalable6> SmokeMachine, rakudo-moar bdf6f151d: OUTPUT: «42␤»

[10:19] <|Tux|> Rakudo version 2019.03.1-216-gbdf6f151d - MoarVM version 2019.03-76-gc10fee65c

[10:19] <|Tux|> csv-test-xs-20      0.437 -  0.441

[10:19] <|Tux|> csv-ip5xs           0.703 -  0.729

[10:19] <|Tux|> test-t --race       0.855 -  0.858

[10:19] <|Tux|> test-t              1.630 -  1.732

[10:19] <|Tux|> csv-ip5xs-20        6.020 -  6.022

[10:19] <|Tux|> test                6.979 -  7.515

[10:19] <|Tux|> test-t-20 --race    9.947 - 10.565

[10:19] <|Tux|> csv-parser         21.582 - 23.107

[10:19] <|Tux|> test-t-20          27.776 - 29.021

[10:19] <|Tux|> 20190416 1.666❙20180928 1.662❙20181015 1.659❙20181011 1.647❙20190417 1.630❙

[10:19] <|Tux|> pompomtiedom

[10:22] <lizmat> whee!

[10:22] <|Tux|> https://twitter.com/Tux5/status/1118459720623435776

[10:23] <jnthn> Nice :)

[10:23] <lizmat> [Tux]: have you tried cleaning out the .precomp dirs for an additional gain ?

[10:24] <|Tux|> yes: https://tux.nl/Files/rebuild

[10:25] <lizmat> okido  :-)

[10:40] <lizmat> m: dd sprintf('%-08.2f,2.71)   # huh ?

[10:40] <evalable6> lizmat, rakudo-moar bdf6f151d: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/5haTnRHBvz␤Unable …»

[10:40] <evalable6> lizmat, Full output: https://gist.github.com/6aeb4ebda3901ccb40a825dd57cd70ee

[10:40] <lizmat> m: dd sprintf("'%-08.2f",2.71)   # huh ?

[10:40] <evalable6> lizmat, rakudo-moar bdf6f151d: OUTPUT: «"'0002.710"␤»

[10:40] <lizmat> 3 digits ??

[10:40] <lizmat> m: dd sprintf("'%-08.2f",3.1415)   # huh ?

[10:40] <evalable6> lizmat, rakudo-moar bdf6f151d: OUTPUT: «"'0003.140"␤»

[10:40] <lizmat> m: dd sprintf("'%-08.2f",3.145)   # huh ?

[10:40] <evalable6> lizmat, rakudo-moar bdf6f151d: OUTPUT: «"'0003.150"␤»

[10:52] *** benchable6 left
[10:53] *** benchable6 joined
[10:53] *** ChanServ sets mode: +v benchable6

[10:53] <Geth> ¦ roast: 95322a5d18 | (Elizabeth Mattijsen)++ | S32-str/sprintf-f.t

[10:53] <Geth> ¦ roast: Parameterize sprintf testing of "f" format

[10:53] <Geth> ¦ roast: 

[10:53] <Geth> ¦ roast: THIS IS TESTING FOR THE CURRENT BROKEN BEHAVIOUR OF sprintf("%f"), while we

[10:53] <Geth> ¦ roast: hopefully decide on a way forward:

[10:53] <Geth> ¦ roast: 

[10:53] <Geth> ¦ roast:     https://github.com/perl6/problem-solving/issues/11

[10:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/95322a5d18

[10:55] <Geth> ¦ rakudo: d87aec38f4 | (Elizabeth Mattijsen)++ | t/spectest.data

[10:55] <Geth> ¦ rakudo: Add extensive testing of "f" format in sprintf

[10:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d87aec38f4

[11:00] <releasable6> Next release in ≈3 days and ≈7 hours. 12 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[11:03] *** benchable6 left
[11:03] *** benchable6 joined
[11:03] *** ChanServ sets mode: +v benchable6

[11:16] *** travis-ci joined
[11:16] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Add extensive testing of "u" format in sprintf'

[11:16] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/521161365 https://github.com/rakudo/rakudo/compare/cec0839fa634...bdf6f151dbe8

[11:16] *** travis-ci left
[12:33] <Guest2775> lizmat: test.c:4:12: warning: '0' flag ignored with '-' flag in gnu_printf format [-Wformat=]   printf("'%-08.2f",2.71);

[12:34] <Guest2775> result is '2.71     plus 4 spaces at the end

[13:13] <Geth> ¦ roast: a12713caea | (Elizabeth Mattijsen)++ | S32-str/sprintf-e.t

[13:13] <Geth> ¦ roast: Parameterize sprintf testing of "e" format

[13:13] <Geth> ¦ roast: 

[13:13] <Geth> ¦ roast: Mostly intended to register the behaviour of the current sprintf

[13:13] <Geth> ¦ roast: implementation, which was not testing some combinations of flags and values.

[13:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a12713caea

[13:13] <Geth> ¦ rakudo: 298c313c1d | (Elizabeth Mattijsen)++ | t/spectest.data

[13:13] <Geth> ¦ rakudo: Add extensive testing of "e" format in sprintf

[13:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/298c313c1d

[13:18] <lizmat> m: use Test; ok sprintf('%20.2e', 3.1415)      eq '           3.14e+000' | '            3.14e+00', '20.2 %e';   # weird test

[13:18] <evalable6> lizmat, rakudo-moar 298c313c1: OUTPUT: «ok 1 - 20.2 %e␤»

[13:30] <Guest2775> gcc outputs 3.14e+00

[13:31] <lizmat> which is what one would expect if the precision is 2

[13:31] <lizmat> I wonder why that test is also testing for the erroneous result with 3 digits in the exponent

[13:32] <Geth> ¦ roast: 0958f70f08 | (Elizabeth Mattijsen)++ | S32-str/sprintf-f.t

[13:32] <Geth> ¦ roast: Simplify sprintf("%f") testing, also test "F"

[13:32] <Geth> ¦ roast: 

[13:32] <Geth> ¦ roast: The results of all formats with "#" are the same to the results without

[13:32] <Geth> ¦ roast: "#", so create those tests programatically.  Also perform the tests for "F"

[13:32] <Geth> ¦ roast: by uppercasing the format string.

[13:32] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0958f70f08

[13:38] <Geth> ¦ roast: 78d5fe2c9e | (Elizabeth Mattijsen)++ | S32-str/sprintf-e.t

[13:38] <Geth> ¦ roast: Simplify sprintf("%e") testing, also test "E"

[13:38] <Geth> ¦ roast: 

[13:38] <Geth> ¦ roast: The results of all formats with "#" are the same to the results without

[13:38] <Geth> ¦ roast: "#", so create those tests programatically.  Also perform the tests for "E"

[13:38] <Geth> ¦ roast: by uppercasing the format string and the expected result.

[13:38] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/78d5fe2c9e

[13:39] <lizmat> afk for a bit&

[13:39] <lizmat> s/if the precision is 2//

[13:53] <Geth> ¦ roast: 2624c93600 | (Elizabeth Mattijsen)++ | S32-str/sprintf-d.t

[13:53] <Geth> ¦ roast: Simplify sprintf("%d"|"%i") testing

[13:53] <Geth> ¦ roast: 

[13:53] <Geth> ¦ roast: The results of all formats with "#" are the same to the results without

[13:53] <Geth> ¦ roast: "#", so create those tests programatically.

[13:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2624c93600

[13:55] <Geth> ¦ roast: 795a3b67ac | (Elizabeth Mattijsen)++ | S32-str/sprintf-u.t

[13:55] <Geth> ¦ roast: Simplify sprintf("%u") testing

[13:55] <Geth> ¦ roast: 

[13:55] <Geth> ¦ roast: The results of all formats with "#" are the same to the results without

[13:55] <Geth> ¦ roast: "#", so create those tests programatically.

[13:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/795a3b67ac

[13:56] <lizmat> really afk&

[15:47] *** patrickb left
[15:56] *** patrickb joined
[16:03] <japhb> timotimo: `strace -r -T -o strace-out -f -ff perl6 my-top-level-program` gave interesting results.  For one thing, it started a bit slower, but performance seemed steady -- it had short pauses of < 1 second every 1-2 dozen subprocess launches, but continued for 1000 subprocesses without incident

[16:03] <japhb> In comparison, just removing the strace, perl6 ground to a halt after launching 198 subprocesses.

[16:04] <japhb> heisenbug.  :-(

[16:37] *** vrurg left
[16:37] *** vrurg joined
[17:28] <japhb> timotimo, jnthn: Any idea what else to try in tracking this down?

[17:44] <timotimo> "perf record" could help you find out what it's doing; https://github.com/Netflix/flamescope would let you go by time-of-execution, i.e. what was done near the start, what was going on while it was so slow

[17:56] <japhb> Actually, before I try perf, I'm going to try *not* following the children in the strace and see if that makes a heisendifference.

[17:57] <timotimo> mhm

[17:57] <japhb> Oooh, tracing only the parent (not following the children) slows to a halt the same way it does with no tracing at all.  So something about the tracing wrapper affects the behavior of the kids.

[17:58] * japhb wonders about -D

[17:58] <timotimo> japh-D?

[17:59] <japhb> trace as a Detached grandchild of the tracee, rather than as a wrapper of the tracee.

[17:59] <timotimo> hm, not sure that makes such a big difference

[17:59] <timotimo> but perf ought to have much less of an impact

[17:59] <timotimo> there's also perf trace which gives similar data to strace, but much much faster

[17:59] <japhb> OK, strace -D of just the parent fails slightly faster than otherwise (189 children)

[17:59] <timotimo> and then there is the ftrace tracing framework in the linux kernel that just lets you do anything and everything you could possibly imagine

[18:00] <japhb> timotimo: Ah, interesting.  I'll try that after my last strace variant

[18:01] <japhb> OK strace -f -D (Follow and Detach) is even smoother than just strace -f; it completes all 1000 subprocesses at (as far as I can tell) a nearly perfectly even rate.

[18:02] <japhb> Bah, meeting

[18:02] <timotimo> oh, bleh

[18:18] *** lucasb joined
[20:07] *** patrickb left
[20:11] *** patrickb joined
[20:53] <jnthn> japhb: Are you using Proc::Async directly, or the sync layer atop of it?

[21:10] <japhb> jnthn: Sync layer on top of it (intentionally, as I was trying to demonstrate to someone how their Perl 5 code using `open '|-', ...` would look in Perl 6.  But the demo doesn't work so well if the Perl 6 version deadlocks.  ;-P

[21:12] <Geth> ¦ nqp: 8fc46c3b98 | usev6++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/ExceptionHandling.java

[21:12] <Geth> ¦ nqp: Fix typo in comment

[21:12] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/8fc46c3b98

[21:16] <jnthn> japhb: Yeah, it's interesting to know if it deadlocks on Proc::Async also

[21:20] <japhb> jnthn: OK, I'll try to work up an equivalent in Proc::Async and see what happens.

[21:28] *** vrurg left
[21:28] *** vrurg joined
[21:42] <japhb> jnthn: Can gather/take and react/whenever cross-nest?  (Either as `@results = gather { react { whenever { take } } }` or as `react { @results = gather { whenever { take } } }`)

[21:48] <samcv> .

[21:48] <yoleaux> 16 Apr 2019 07:42Z <jmerelo> samcv: OK. Good luck. Keep me posted.

[21:55] <jnthn> No

[22:09] <japhb> jnthn: That's what I figured, just wanted to confirm.

[22:10] <japhb> Dang it, my Proc::Async version dies with an error message after a few processes.

[22:12] <japhb> It fails with `This process is not opened for write` after 4-5 subprocesses, even though I created all of them with `my $proc = Proc::Async.new: :w, << my-child and args here >>`.

[22:13] <timotimo> perhaps some sharing is going on between the threads?

[22:14] <japhb> timotimo: I'm not sure how.  I'm following the basic structure of jnthn's answer in https://stackoverflow.com/questions/55265176/why-dont-all-the-shell-processes-in-my-promises-start-blocks-run-is-this-a

[22:14] <japhb> ... except I'm writing in to the proc, rather than reading from it.

[22:15] <japhb> But otherwise pretty dang similar.

[22:16] <timotimo> hmm, yeah, that's probably correct :/

[22:17] <timotimo> rakudo version and such?

[22:19] <japhb> This is Rakudo version 2019.03.1-213-g7ee08bb10 built on MoarVM version 2019.03-76-gc10fee65c

[22:19] <timotimo> thought so, OK

[22:19] <jnthn> Worth an issue, for sure.

[22:20] <japhb> jnthn: Rakudo, I assume?

[22:20] <japhb> I'll see if I can golf a bit

[22:23] *** vrurg left
[22:23] *** vrurg joined
[22:29] <jnthn> japhb: Yes, though not sure where the bug will turn out to be

[22:32] <MasterDuke> jnthn: have you looked at https://github.com/rakudo/rakudo/issues/2827 any? it bisected to https://github.com/rakudo/rakudo/commit/46ef0ea08cae96db25c7b5a9543ba696034408c8, but i don't really know why and haven't been able to figure out much since

[22:33] *** AlexDaniel joined
[22:34] <AlexDaniel> p6lert: help

[22:34] <p6lert> AlexDaniel, https://github.com/perl6/alerts P6lert commands: [insta]?add ALERT, update ID ALERT, delete ID; ALERT format: ['severity:'\S+]? ['affects:['<-[\]]>+']']? ALERT_TEXT

[22:41] <AlexDaniel> p6lert: severity:info Future Rakudo and NQP releases will come with tarballs that are signed with a different key. This only affects those who run automation that performs related checks.

[22:42] <AlexDaniel> p6lert: add severity:info Future Rakudo and NQP releases will come with tarballs that are signed with a different key. This only affects those who run automation that performs related checks.

[22:42] <p6lert> AlexDaniel, Added alert ID 10: https://alerts.perl6.org/alert/10

[22:42] <AlexDaniel> kawaii: this is an interesting tool ↑

[22:42] <AlexDaniel> kawaii: see all alerts here: https://alerts.perl6.org/

[22:42] <AlexDaniel> use it if things go wrong :)

[22:54] <jnthn> MasterDuke: No; it's not really on my todo list either. https://github.com/rakudo/rakudo/issues/2805 I hope to figure out tomorrow.

[22:57] <japhb> jnthn, timotimo: OK, golfed and added the async version of the problem in https://github.com/rakudo/rakudo/issues/2847

[22:58] <MasterDuke> jnthn: no worries, i wasn't really thinking of it as a release blocker or anything like that, just annoying. but any suggestions for where to look? i was able to change some of the behavior, but it didn't really help me understand what/how to fix

[23:01] <jnthn> MasterDuke: No immediate guesses, alas; I'd probably run it with debug server and then look at the stack trace or some such

[23:02] <MasterDuke> k, i'll see if i find anything useful

[23:10] <jnthn> sleep time o/

[23:17] <japhb> jnthn, timotimo: Synchronous case added as https://github.com/rakudo/rakudo/issues/2848

[23:20] <ugexe> in the synchronous case it is deadlocking -- see: https://github.com/rakudo/rakudo/issues/2834

[23:22] <ugexe> i would guess that strace slows things down enough that the deadlock doesn't occur

[23:26] <japhb> ugexe: Why does it get slower for a while before actually deadlocking?

[23:27] <japhb> Also, this is a LOT more spawns than just the thread count, and the spawns don't happen super fast (a few per second, not thousands per second)

[23:27] <ugexe> but does it get further before deadlocking when setting RAKUDO_MAX_THREADS=500 ?

[23:27] <japhb> And finally, I'm not using 'start' at all -- I'm synchronously running the children.  There should only ever be one child alive.

[23:28] <japhb> Need to head for a bus, will check when I get there.

[23:29] <ugexe> you assume that sync run/shell do not themselves spawn threads

[23:34] <ugexe> im guessing something like rakudo slows down when it tries to create some more FOO type threads in the thread pool, until it eventually reaches the maximum threads when trying to create more e.g. reader threads

[23:37] <ugexe> i don't see any explicit thread spawning in Proc.pm6 itself, but it sure seems like its happening indirectly

[23:41] <ugexe> well, the promises

[23:47] *** lucasb left
[23:50] <japhb> ugexe: Sure, definitely wrapping the sync API around the async API will result in the thread pool doing a lot of work while the child is alive ... but why would it still be holding resources after the synchronous run completes?

[23:51] <ugexe> it must depend on how fast new processes are spawned, at least i'm guessing based on the fact using strace makes the problem go away

[23:51] <MasterDuke> what about adding a small sleep after each process is finished?

[23:52] <ugexe> so how fast new processes are spawned vs whatever rakudo is doing in the background to create the needed threads to read/whatever/close

[23:56] <japhb> MasterDuke: Just tested with 'sleep .1;' after closing the input pipe, and while it slowed down the overall run, the behavior was essentially the same (and deadlocked after nearly the same number of children).  Interestingly, since it was going slower, I watched it in atop and noticed the CPU stayed relatively low (11% of one core) for a while before suddenly ramping up near the end to nearly filling all 

[23:56] <japhb> cores.

[23:56] <japhb> So something has very non-linear behavior.

[23:58] <MasterDuke> and does smaller or larger values for MAX_THREADS change anything?

[23:59] <ugexe> when running with RAKUDO_SCHEDULER_DEBUG=1 i eventually get

