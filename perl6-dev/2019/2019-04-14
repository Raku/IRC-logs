[00:02] *** Kaiepi left
[00:09] *** Kaiepi joined
[00:10] <Kaiepi> huh, oracle's jdk is supported on openbsd 6.5 now

[00:17] *** Kaiepi left
[00:20] *** Kaiepi joined
[00:35] *** vrurg joined
[00:43] *** Kaiepi left
[00:44] *** Kaiepi joined
[01:07] *** Kaiepi left
[01:10] *** Kaiepi joined
[01:18] *** squashable6 left
[01:18] *** squashable6 joined
[02:11] <Geth> ¬¶ rakudo: ugexe assigned to patzim Issue Default repository path specs should not contain relative path parts https://github.com/rakudo/rakudo/issues/2840

[02:50] *** epony left
[03:00] <releasable6> Next release in ‚âà6 days and ‚âà15 hours. 12 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[03:39] *** Kaiepi left
[03:42] *** epony joined
[05:37] *** bloatable6 left
[05:37] *** bisectable6 left
[05:37] *** shareable6 left
[05:37] *** benchable6 left
[05:37] *** notable6 left
[05:37] *** committable6 left
[05:37] *** undersightable6 left
[05:37] *** statisfiable6 left
[05:37] *** evalable6 left
[05:37] *** nativecallable6 left
[05:37] *** quotable6 left
[05:37] *** squashable6 left
[05:37] *** reportable6 left
[05:37] *** releasable6 left
[05:37] *** coverable6 left
[05:37] *** unicodable6 left
[05:37] *** greppable6 left
[05:38] *** unicodable6 joined
[05:38] *** ChanServ sets mode: +v unicodable6

[05:38] *** squashable6 joined
[05:39] *** bisectable6 joined
[05:39] *** ChanServ sets mode: +v bisectable6

[05:39] *** evalable6 joined
[05:39] *** ChanServ sets mode: +v evalable6

[05:39] *** bloatable6 joined
[05:39] *** ChanServ sets mode: +v bloatable6

[05:39] *** quotable6 joined
[05:39] *** greppable6 joined
[05:40] *** benchable6 joined
[05:40] *** ChanServ sets mode: +v benchable6

[05:40] *** reportable6 joined
[05:40] *** committable6 joined
[05:40] *** ChanServ sets mode: +v committable6

[05:40] *** releasable6 joined
[05:40] *** ChanServ sets mode: +v releasable6

[05:41] *** coverable6 joined
[05:41] *** ChanServ sets mode: +v coverable6

[05:41] *** undersightable6 joined
[05:41] *** ChanServ sets mode: +v undersightable6

[05:42] *** nativecallable6 joined
[05:42] *** ChanServ sets mode: +v nativecallable6

[05:42] *** statisfiable6 joined
[05:42] *** ChanServ sets mode: +v statisfiable6

[05:42] *** notable6 joined
[05:42] *** ChanServ sets mode: +v notable6

[05:42] *** shareable6 joined
[05:42] *** ChanServ sets mode: +v shareable6

[05:48] *** squashable6 left
[05:54] *** squashable6 joined
[05:54] *** ChanServ sets mode: +v squashable6

[06:11] <Geth> ¬¶ roast: 600c100b96 | usev6++ | S32-io/IO-Socket-Async.t

[06:11] <Geth> ¬¶ roast: [JVM] Skip disruptive test

[06:11] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/600c100b96

[06:39] *** Guest16965 left
[07:24] *** squashable6 left
[07:24] *** squashable6 joined
[08:13] *** squashable6 left
[08:15] *** squashable6 joined
[08:15] *** ChanServ sets mode: +v squashable6

[08:36] <lizmat> Files=1254, Tests=88117, 407 wallclock secs (20.24 usr  6.31 sys + 2721.26 cusr 231.91 csys = 2979.72 CPU)

[08:36] <lizmat> quite a bit slower :-(

[08:59] <nine> ~~

[08:59] <yoleaux> 13 Apr 2019 21:13Z <lizmat> nine: would you rather see a rephrasing of the message, or a revert of the commit ?

[08:59] <yoleaux> 13 Apr 2019 21:33Z <jnthn> nine: If you're going to use a type as the target type in an nqp::rebless, then :is_mixin now needs to be passed to ClassHOW.new_type.

[08:59] <yoleaux> 13 Apr 2019 21:37Z <jnthn> nine: No guesses on the second; unfortunately the line number just points at the generate_buildplan_executor method. Don't suppose --ll-exception gives a better trace? Or I can try it out when I get some time to do that :)

[09:00] <lizmat> nine o/

[09:00] <nine> \o

[09:04] <lizmat> re message: the message is only shown for scripts that use MAIN

[09:04] <lizmat> *not* in general when reading from a keyboard

[09:08] <nine> I still vote for reverting the commit. MAIN's purpose is for writing command line tools and waiting for input from STDIN when no other source was given is common and expected behaviour.

[09:10] <nine> E.g. I've often started something like "grep foobar > filtered-list" and then pasted output from another command from another terminal into that, even when doing development of rakudo.

[09:11] <nine> Or fired up psql, worked on a query and when I got it right wrapped it in a copy( ... ) to stdout with csv; and pasted the resulting CSV data into another script waiting to process it further

[09:13] <nine> .tell jnthn I only got that line number with --ll-exception in the first place.

[09:13] <yoleaux> nine: I'll pass your message to jnthn.

[09:19] <lizmat> nine: fwiw, this has bitten me a few times as well: https://www.reddit.com/r/perl6/comments/bc0efq/sql2png_turn_create_table_statements_into_a_graph/ekq6khy/

[09:20] <lizmat> it would only save me maybe a few seconds now before I figured it out

[09:20] <lizmat> but this feels like a trap to me, hence my solution

[09:21] <lizmat> nine: maybe only do this if STDOUT and STDERR also have .t true ?

[10:42] <Geth> ¬¶ rakudo: 3060d1d0bd | (Elizabeth Mattijsen)++ | src/core/Main.pm6

[10:42] <Geth> ¬¶ rakudo: Only display STDIN message if a person is doing this

[10:42] <Geth> ¬¶ rakudo: 

[10:42] <Geth> ¬¶ rakudo: As in, if .t is true for $*IN, $*OUT and $*ERR.  This should hopefully only

[10:42] <Geth> ¬¶ rakudo: trigger when it is really needed.

[10:42] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/3060d1d0bd

[10:44] <nine> lizmat: still doesn't feel right but it may be the best compromise we will find :)

[10:45] <nine> Is there any way for a class or rather that class' meta class to find out when a subclass is created?

[10:49] *** squashable6 left
[10:49] *** squashable6 joined
[10:49] <lizmat> parents don't know of their children afaik, so no ?

[10:52] <nine> .oO(What has the world come to, when parents don't even know their own children anymore?)

[10:53] <nine> On the bright side, I may not actually need that anyway.

[10:54] <lizmat> yeah, Perl 6 is a harsh world and sets a bad example  :-)

[10:55] <lizmat> still, children knowing about their parents is a good thing

[10:55] <lizmat> plenty of children in the world who don't know that

[10:55] <nine> Right now, Perl 5 classes get a representation in Perl 6 via Inline::Perl5::ClassHOW. To get rid of the rebless hack I mentioned as broken yesterday, I'm gonna need Perl 6 classes to be represented in the Perl 5 world. But that's true for all classes that are used, not just instances of Inline::Perl5::ClassHOW.

[10:57] <nine> I guess I'm gonna need to create that representation whenever I encounter an object of a previously unseen Perl 6 class getting passed to Perl 5 code.

[11:00] <lizmat> feels a bit like synthetic codepoints to me  :-)

[11:09] <nine> This will be a very useful but also a very large refactor. I'm not sure if I feel up to it :/

[11:30] <[Tux]> Rakudo version 2019.03.1-203-g3060d1d0b - MoarVM version 2019.03-76-gc10fee65c

[11:30] <[Tux]> csv-test-xs-20      0.434 -  0.445

[11:30] <[Tux]> csv-ip5xs           0.754 -  0.759

[11:30] <[Tux]> test-t --race       0.841 -  0.913

[11:30] <[Tux]> test-t              1.725 -  1.795

[11:30] <[Tux]> csv-ip5xs-20        6.042 -  6.170

[11:30] <[Tux]> test                7.681 -  7.741

[11:30] <[Tux]> test-t-20 --race   10.105 - 10.453

[11:30] <[Tux]> csv-parser         22.103 - 22.966

[11:30] <[Tux]> test-t-20          27.809 - 30.235

[11:36] *** Ulti_ is now known as Ulti

[11:59] *** Kaiepi joined
[13:07] *** ufobat joined
[13:11] *** ufobat_ joined
[13:15] *** ufobat left
[13:53] <Kaiepi> for the $*SCHEDULER.cue pullreq, how would i properly unit test that the block past never gets invoked when the timeout is Inf?

[13:54] <Kaiepi> i was thinking of using a Supplier and emitting to it in each block passed for that series of tests then counting how many blocks were invoked at the end to decide whether to pass or flunk

[13:54] <Kaiepi> s/past/passed/

[13:58] <MasterDuke> AlexDaniel: i ran through most of those examples from your history with master and my default-int branch. the only significant differences were further cases of illegal array accesses turning into `cannot unbox` errors

[13:59] <AlexDaniel> hm

[13:59] <AlexDaniel> sounds good then, I guess

[14:00] <AlexDaniel> I mean, if anybody feels like, maybe the same should be done on a 32-bit system

[14:05] *** Kaiepi left
[14:07] *** Kaiepi joined
[14:30] *** Kaiepi left
[14:31] *** Kaiepi joined
[15:05] <MasterDuke> m: my $b; say try $b.VAR.?name

[15:05] <evalable6> MasterDuke, rakudo-moar 3060d1d0b: OUTPUT: ¬´Nil‚ê§¬ª

[15:05] <MasterDuke> m: my $b = 1; say try $b.VAR.?name

[15:05] <evalable6> MasterDuke, rakudo-moar 3060d1d0b: OUTPUT: ¬´Nil‚ê§¬ª

[15:05] <MasterDuke> m: my $b = 1; say try $b.VAR.name

[15:05] <evalable6> MasterDuke, rakudo-moar 3060d1d0b: OUTPUT: ¬´$b‚ê§¬ª

[15:05] <MasterDuke> m: my $b; say try $b.VAR.name

[15:05] <evalable6> MasterDuke, rakudo-moar 3060d1d0b: OUTPUT: ¬´$b‚ê§¬ª

[16:39] *** AlexDaniel left
[17:14] <MasterDuke> interesting. if i change https://github.com/rakudo/rakudo/blob/master/src/core/Mu.pm6#L548 to remove the '?' from the method call and then try `my $b; say "a $b c"`, $name becomes 'element', so the warning is `Use of uninitialized value element of type Any in string context.`

[17:15] <MasterDuke> 'element' seems to come from here https://github.com/rakudo/rakudo/blob/master/src/Perl6/Metamodel/BOOTSTRAP.nqp#L1697

[17:16] <MasterDuke> m: my $b; sub f(Mu \v) { say try v.VAR.name }; f($b)

[17:16] <evalable6> MasterDuke, rakudo-moar 3060d1d0b: OUTPUT: ¬´$b‚ê§¬ª

[17:17] <MasterDuke> m: my $b; sub f(Mu \v) { say try v.VAR.name; say v.VAR.WHAT }; f($b)

[17:17] <evalable6> MasterDuke, rakudo-moar 3060d1d0b: OUTPUT: ¬´$b‚ê§(Scalar)‚ê§¬ª

[17:18] <MasterDuke> i'm not sure why it's picking up the Scalar's default_cont_spec in the case of interpolating

[17:19] <MasterDuke> m: my $b; say "a $b c" # what i'm testing with

[17:19] <evalable6> MasterDuke, rakudo-moar 3060d1d0b: OUTPUT: ¬´Use of uninitialized value of type Any in string context.‚ê§Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.‚ê§a  c‚ê§  in block <unit> at /tmp/mG9XAoCSEi line 1‚ê§¬ª

[17:34] <MasterDuke> bisectable6: old=2018.04.1 my $b; say "a $b c"

[17:34] <bisectable6> MasterDuke, Bisecting by output (old=2018.04.1 new=3060d1d) because on both starting points the exit code is 0

[17:34] <bisectable6> MasterDuke, bisect log: https://gist.github.com/f85c820e89c0313742cb00ec075435c1

[17:34] <bisectable6> MasterDuke, (2018-06-12) https://github.com/rakudo/rakudo/commit/bdbfee55f9c937288c705884a76b547e85c59631

[17:39] <MasterDuke> https://github.com/rakudo/rakudo/issues/2841

[17:40] <MasterDuke> jnthn: ^^^

[18:16] *** Kaiepi left
[18:16] *** Kaiepi joined
[18:42] <lizmat> m: dd .0.Str

[18:42] <evalable6> lizmat, rakudo-moar 3060d1d0b: OUTPUT: ¬´"0"‚ê§¬ª

[18:42] <lizmat> bisectable6: dd .0.Str

[18:43] <bisectable6> lizmat, On both starting points (old=2015.12 new=3060d1d) the exit code is 0 and the output is identical as well

[18:43] <bisectable6> lizmat, Output on both points: ¬´"0"‚ê§¬ª

[18:43] <lizmat> wow

[18:43] <lizmat> bisectable6: dd .1.Str

[18:43] <bisectable6> lizmat, On both starting points (old=2015.12 new=3060d1d) the exit code is 0 and the output is identical as well

[18:43] <bisectable6> lizmat, Output on both points: ¬´"0.1"‚ê§¬ª

[18:43] <lizmat> ah, ok

[18:46] *** hankache joined
[19:12] *** brrt joined
[19:17] <Geth> ¬¶ roast: 44c1ede286 | (Elizabeth Mattijsen)++ | S32-str/sprintf-b.t

[19:17] <Geth> ¬¶ roast: Parameterize sprintf testing of "b|B" formats

[19:17] <Geth> ¬¶ roast: 

[19:17] <Geth> ¬¶ roast: Mostly intended to register the behaviour of the current sprintf

[19:17] <Geth> ¬¶ roast: implementation, which was not testing some combinations of flags and was

[19:17] <Geth> ¬¶ roast: not testing for special behaviours related to 0.

[19:17] <Geth> ¬¶ roast: 

[19:17] <Geth> ¬¶ roast: Upped the number of test from 165 tests to 1626 tests with 8 subtests each.

[19:17] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/44c1ede286

[19:20] *** hankache left
[19:37] *** brrt left
[19:42] *** brrt joined
[20:22] <Geth> ¬¶ roast: e4db6fd9de | (Elizabeth Mattijsen)++ | S32-str/sprintf-c.t

[20:22] <Geth> ¬¶ roast: Parameterize sprintf testing of "c" format

[20:22] <Geth> ¬¶ roast: 

[20:22] <Geth> ¬¶ roast: Mostly intended to register the behaviour of the current sprintf

[20:22] <Geth> ¬¶ roast: implementation, which was not testing some combinations of flags and was

[20:22] <Geth> ¬¶ roast: not testing for special behaviours to unicode characters like ü¶ã

[20:22] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/e4db6fd9de

[20:25] <Geth> ¬¶ rakudo: dbf3638ea3 | (Elizabeth Mattijsen)++ | t/spectest.data

[20:25] <Geth> ¬¶ rakudo: Add extensive testing of "c" format in sprintf

[20:25] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/dbf3638ea3

[20:42] *** brrt left
[20:45] <Kaiepi> damn it i'm close to fixing the issue with executable names on openbsd but it gets perl6.moarvm, not the binary itself

[20:45] <Kaiepi> turns out MVM_exepath was actually there for a reason

[20:47] <Kaiepi> i tried deleting it, lazily getting the executable name in MVM_executable_name, and just using uv_exepath in rakudo but that doesn't work

[20:48] <Kaiepi> i think all i need to do is just add it back and use it in rakudo again

[21:00] *** brrt joined
[21:17] *** brrt left
[21:52] *** robertle left
[21:55] *** AlexDaniel joined
[23:00] <releasable6> Next release in ‚âà5 days and ‚âà19 hours. 12 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[23:48] *** evalable6 left
[23:50] *** evalable6 joined
