[00:43] *** patrickb left
[01:00] *** lucasb left
[01:36] *** TreyHarris left
[03:34] <Geth> ¦ rakudo: vrurg++ created pull request #2731: Fix for rakudo/rakudo#2169

[03:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2731

[03:34] <synopsebot> RAKUDO#2169 [open]: https://github.com/rakudo/rakudo/issues/2169 Assigning Nil to a scalar declared with captured type changes it's container metaclass to GenericHOW

[03:34] <Geth> ¦ roast: vrurg++ created pull request #516: Tests for rakudo/rakudo#2169

[03:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/516

[03:37] *** sortiz left
[05:45] *** MasterDuke left
[06:19] <Geth> ¦ roast/cur-emulates: 2ae093b893 | (Nick Logan)++ | 5 files

[06:19] <Geth> ¦ roast/cur-emulates: Add tests for `emulates`

[06:19] <Geth> ¦ roast/cur-emulates: review: https://github.com/perl6/roast/commit/2ae093b893

[06:29] <Geth> ¦ rakudo: ugexe++ created pull request #2732: Add basic `emulates` support to CURs

[06:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2732

[08:41] *** eater joined
[08:42] <lizmat> Files=1267, Tests=88067, 403 wallclock secs (20.61 usr  6.41 sys + 2909.33 cusr 227.66 csys = 3164.01 CPU)

[08:43] *** eater left
[08:44] *** eater joined
[08:45] *** eater left
[08:54] *** eater joined
[09:24] *** ufobat joined
[10:08] *** leont joined
[10:20] *** leont left
[11:09] *** squashable6 left
[11:10] *** squashable6 joined
[11:31] *** epony left
[11:33] *** epony joined
[13:00] *** lucasb joined
[13:07] <lizmat> notable6: weekly

[13:07] <notable6> lizmat, 5 notes: https://gist.github.com/4b1ddb69ac3369d24bf29b6b6e645ebd

[13:16] *** scovit joined
[13:17] <scovit> Hello, can I propose a small change, $out.say(x) instead of what is already there in src/core/io_operators.pm6, line 14

[13:18] <scovit> speedsup quite a lot: yes | head -n1000000 | time perl6 -e 'for lines() { .say }' > /dev/null

[13:22] <Geth> ¦ rakudo: scovit++ created pull request #2734: Speed up Mu.say

[13:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2734

[13:33] *** ufobat_ joined
[13:36] *** ufobat left
[14:10] <Geth> ¦ rakudo: 9770c1aa15 | (Elizabeth Mattijsen)++ | src/core/io_operators.pm6

[14:10] <Geth> ¦ rakudo: Make say(\x) about 8% faster

[14:10] <Geth> ¦ rakudo: 

[14:10] <Geth> ¦ rakudo: Adaptation of https://github.com/rakudo/rakudo/pull/2734 , scovit++ for the

[14:10] <Geth> ¦ rakudo: spotting of this opportunity.  Alas, we need to call .gist in the say sub

[14:10] <Geth> ¦ rakudo: as we have spectest that depend on `say` calling `.gist` even on `Str`.

[14:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9770c1aa15

[14:15] <|Tux|> Rakudo version 2018.12-337-ga8cd286a4 - MoarVM version 2018.12-117-gdcafbc4c7

[14:15] <|Tux|> csv-test-xs-20      0.426 -  0.430

[14:15] <|Tux|> csv-ip5xs           0.730 -  0.750

[14:15] <|Tux|> test-t --race       0.855 -  0.859

[14:15] <|Tux|> test-t              1.818 -  1.905

[14:15] <|Tux|> csv-ip5xs-20        5.948 -  6.076

[14:15] <|Tux|> test                7.854 -  7.913

[14:15] <|Tux|> test-t-20 --race   10.217 - 10.489

[14:15] <|Tux|> csv-parser         22.328 - 22.719

[14:15] <|Tux|> test-t-20          31.336 - 32.197

[14:20] *** dogbert2_ joined
[14:21] <dogbert2_> lizmat: did you see https://colabti.org/irclogger/irclogger_log/perl6?date=2019-03-02#l662 ?

[14:21] <lizmat> nope, didn't

[14:21] <lizmat> I don't backlog that much anymore

[14:22] <lizmat> would help if there was an issue for it  :-)

[14:24] <dogbert2_> let me see what I can do about that :)

[14:24] <lizmat> ++dogbert2_ 

[14:24] <timotimo> lizmat: https://github.com/timo/perl6-kate-syntax/issues/1 - could this go in the weekly? point out that what i've built is barely a start on that kate syntax file, but if somebody feels up to the task they could take it and run with it?

[14:24] <yoleaux> 07:36Z <Xliff> timotimo: OK, much of the gdk_x11_ calls that use GdkWindow as the first parameter are now in, please let me know what other routines you are looking for.

[14:30] <dogbert2_> grr, the examples have disappeared, I'll see if I can get hold of them again

[14:49] <dogbert2_> lizmat, timotimo: R#2735

[14:49] <synopsebot> R#2735 [open]: https://github.com/rakudo/rakudo/issues/2735 %h{$a}{$b}{$c} = True in a loop with different abcs is really slow

[14:52] <lucasb> sorry if a silly question, but why the check against IO::Handle is needed in the previous commit?

[14:52] <lizmat> lucasb: because you can create your own class with a "print" method and put that in $*OUT

[14:52] <lizmat> and all should still work

[14:53] <lizmat> (as in: you don't have to supply a "say" method)

[14:53] <lucasb> this is just because method 'print' is part of some contract and method 'say' isn't?

[14:53] <lizmat> nqp::can(...,'say') was another option, but that drowned out the optimization

[14:53] <lizmat> indeed.... although I'm not sure that contract is formalized anywhere else but the spectest

[14:56] <timotimo> perhaps not very surprisingly, the code spends a lot of time in method assigned of ContainerDescriptor::VivifyHash

[14:56] <timotimo> out of BOOTSTRAP.nqp

[14:57] <lucasb> what about sub put()? IO::Handle also has a 'put' method.

[14:57] <timotimo> it looks like it also hits the "slow path" of the rakudo_scalar contspec's 'store' entry, also in BOOTSTRAP.nqp at line 1610 here

[14:58] <timotimo> oh, my benchmark isn't doing exactly what i thought i wanted to do

[15:00] <timotimo> m: my @akeys = "aa".."zz"; for ^1_000 { my %h; for @akeys -> $ak { %h{$ak}{$ak}{1} = True } }

[15:00] <camelia> rakudo-moar 9770c1aa1: ( no output )

[15:00] <timotimo> is this an acceptable golfing of the benchmark?

[15:00] <timotimo> dogbert2_: ^

[15:02] <lizmat> timotimo: not sure...  looks like it is not acceptable to have more than 1 key in the top level hashes

[15:03] <timotimo> the outermost you mean?

[15:06] <timotimo> or the innermost?

[15:06] <timotimo> i didn't actually download the code itself :S

[15:07] <dogbert2_> timotimo: the zipfile is only 2 Meg :)

[15:07] <timotimo> it's more that i don't have a nice workflow yet for "download an archive file, extract it to a temporary folder, then open a shell there"

[15:07] <lizmat> I think one of the main slowdowns is that the keys are Match objects that need to be stringified each time they're used

[15:08] <lizmat> changing them to strings once makes it go from 10 secs -> 8.8 seconds for me

[15:10] <timotimo> OK, i started with strings right away, so i didn't see that in my profile

[15:10] <timotimo> i used to have zsh aliases for "path to the last file i downloaded" and also "dtrx the last file i downloaded here"

[15:10] <lizmat> I also changed the for loop to "for $log.IO.lines -> $l {"

[15:10] <jdv79> i got a segfault last night and it surprised me cause i havent seen one since the major async segfault cleanups

[15:11] <jdv79> couldnt repro though

[15:11] <timotimo> you don't happen to have the core dump lying around in "coredumpctl list"?

[15:11] <Geth> ¦ rakudo: scovit++ created pull request #2736: Speed-up reading $*ARGFILEs

[15:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2736

[15:12] <scovit> didn't understand my commit, but it seems to work on my workstation\

[15:12] <scovit> I don't understand what flat is there for

[15:13] <scovit> the speedup is dramatical

[15:13] <scovit> which means that even if wrong, I'm sure you will find another optimization :)

[15:14] <timotimo> oh

[15:15] <timotimo> there's a difference there

[15:15] <timotimo> the sub version also passes the gather block to flat, whereas the method one doesn't

[15:15] <scovit> ah

[15:15] <scovit> now I get it

[15:16] *** releasable6 left
[15:16] *** nativecallable6 left
[15:16] *** shareable6 left
[15:16] *** committable6 left
[15:16] *** nativecallable6 joined
[15:16] *** ChanServ sets mode: +v nativecallable6

[15:16] *** shareable6 joined
[15:16] *** releasable6 joined
[15:16] *** committable6 joined
[15:16] *** ChanServ sets mode: +v shareable6

[15:16] *** ChanServ sets mode: +v releasable6

[15:16] *** ChanServ sets mode: +v committable6

[15:17] <scovit> maybe you do not want a gather block there?

[15:17] <timotimo> building a "real" iterator there could be faster, yeah

[15:19] <dogbert2_> lizmat: just printing all the lines on screen takes quite a bit of time, at least on my system

[15:19] <lizmat> dogbert2_: yeah, that's the bottleneck of having to look up $*OUT every time mostly

[15:23] <lizmat> BTW

[15:24] <lizmat> perl6 -e 'for ^1000000 { print "a" }' >/dev/null    # 2.3 seconds

[15:24] <lizmat> perl6 -e 'my $*OUT = PROCESS::<$OUT>; for ^1000000 { print "a" }' >/dev/null    # 1 second

[15:25] <lizmat> getting a lexical $*OUT in your scope, already speeds up printing significantly

[15:25] <lizmat> this all due to &DYNAMIC having to do much less in that case

[15:26] <timotimo> in theory we have a dynamic cache, but i guess in that situation it literally just sees the lexical and is happy?!

[15:26] <lizmat> I think it already matches the nqp::getlexdyn(name) in that case

[16:02] <dogbert2_> lizmat: do you think Str vs Match is the only problem wrt the Hash assignment code ?

[16:23] <Geth> ¦ nqp: 374e9fddbc | (Paweł Murias)++ | src/vm/js/nqp-runtime/resolve-sourcemap-browser.js

[16:23] <Geth> ¦ nqp: [js] Fix .wasm for source maps loading

[16:23] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/374e9fddbc

[16:23] <Geth> ¦ nqp: 89587e5f20 | (Paweł Murias)++ | src/vm/js/nqp-runtime/core.js

[16:23] <Geth> ¦ nqp: [js] Fix evalling js code at runtime in the browser

[16:23] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/89587e5f20

[16:23] <Geth> ¦ nqp: 2d4f2a977a | (Paweł Murias)++ | 5 files

[16:23] <Geth> ¦ nqp: [js] Make nqp::getcodelocation work in the browser

[16:23] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/2d4f2a977a

[16:58] <Geth> ¦ rakudo: scovit++ created pull request #2737: Speedup ARGFILES read when there is only one input

[16:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2737

[17:44] *** ufobat_ left
[18:31] <lizmat> dogbert2_: no, but it really doesn't help  :-)

[19:34] <lizmat> notable6: weekly reset

[19:34] <notable6> lizmat, Moved existing notes to “weekly_2019-03-04T19:34:58Z”

[20:07] <lizmat> reportable6: 2019-02-25T12:00:00Z 2019-03-04T00:00:00Z

[20:07] <reportable6> lizmat, OK, working on it! This may take up to 40 seconds

[20:08] <reportable6> lizmat, https://gist.github.com/099f7143ff7356bb8837d55133088133

[20:09] <lizmat> reportable6: 2019-02-01T12:00:00Z 2019-03-01T00:00:00Z

[20:09] <reportable6> lizmat, OK, working on it! This may take up to 40 seconds

[20:10] <reportable6> lizmat, https://gist.github.com/09786ffe61de5a44486c816a426ff614

[20:16] <jnthn> Turns out the place I have been having a long weekend has busted wifi, and very weak edge. At least I've rested a bit. :) I'll be back about tomorrow, and try to catch up on things. :)

[20:16] <yoleaux> 2 Mar 2019 12:29Z <lizmat> jnthn: looks like rakudo.org seems to be missing a IPv6 port setting (see https://screenshots.page)

[20:17] <jnthn> lizmat: Hm, it has an AAAA record, any idea what else it needs?

[20:17] <jnthn> I couold just delete that and make it IPv4 only for a while, though.

[20:17] <lizmat> the nginx / apache config needs to know about it in its Listen statement ?

[20:18] <jnthn> Oh, that's not something I even have access to do, I think?

[20:18] <jnthn> I only control the domain.

[20:18] <lizmat> then... who controls the server ?

[20:18] <jnthn> And so DNS

[20:18] <jnthn> Dunno, isn't it the p6c.org one?

[20:19] <lizmat> yep, I think so

[20:19] <jnthn> moritz++ likely knows

[20:20] <jnthn> I think there's a collection of people with access to that; I ain't one of them, so far as I know. :)

[20:20] * lizmat neither, but timotimo is afaik ?

[20:21] <jnthn> Well, that's two folks mentioned who might be able to look :)

[20:53] * AlexDaniel is reminded that he needs to set up AAAA records on all his websites… uhhh…

[21:03] <moritz> whatcha need?

[21:03] <moritz> you can use 2001:780:101:ff00::80:1 as AAAA record for rakudo.org

[21:05] <jnthn> moritz: My best guess is: I did that, but the previous DNS wasn't set up for IPv6

[21:05] <jnthn> And so the server ain't configured for it either (probably by "the server" I mean "the web server configuration"

[21:05] <jnthn> )

[21:06] <jnthn> But because the previous DNS host dropped the records the moment the domain was transferred, I didn't have chance to look at what was there before, so just put in the A and AAAA

[21:11] *** epony left
[21:20] <moritz> $ curl -s6 https://rakudo.org/|grep title

[21:20] <moritz>     <title>Rakudo Perl 6 Compiler

[21:20] <moritz>       - Rakudo Compiler for Perl 6 Programming Language</title>

[21:20] <moritz> better?

[21:23] <jnthn> Seems like :)

[21:23] <jnthn> moritz++

[21:29] <lizmat> and yet another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/03/04/2019-09-cool-stuff-this-summer/

[21:31] <moritz> lizmat: ... and twot :D

[21:31] <lizmat> moritz++   # thanks!

[21:42] *** ExtraCrispy left
[22:22] <jnthn> lizmat++ # weekly

[22:22] <jnthn> Sleep time...rest of the way to Munich for me tomorrow :)

[23:01] *** gfldex joined
[23:20] *** lucasb left
[23:34] *** MasterDuke joined
[23:35] *** MasterDuke left
[23:35] *** MasterDuke joined
[23:41] *** sortiz joined
