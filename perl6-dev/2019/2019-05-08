[02:13] *** squashable6 left
[02:14] *** squashable6 joined
[02:14] *** ChanServ sets mode: +v squashable6

[04:25] *** vrurg left
[05:30] *** robertle left
[05:31] *** Geth left
[05:31] *** Geth joined
[05:37] *** Geth_ joined
[05:37] *** Geth left
[06:03] <[Tux]> Sorry woolfy

[06:03] <[Tux]> Rakudo version 2019.03.1-284-gb0dd44b00 - MoarVM version 2019.05-1-g807c2dab1

[06:03] <[Tux]> csv-test-xs-20      0.433 -  0.437

[06:03] <[Tux]> csv-ip5xs           0.719 -  0.726

[06:03] <[Tux]> test-t --race       0.820 -  0.860

[06:03] <[Tux]> test-t              1.730 -  1.732

[06:03] <[Tux]> csv-ip5xs-20        5.778 -  6.204

[06:03] <[Tux]> test                6.974 -  7.003

[06:03] <[Tux]> test-t-20 --race    9.097 -  9.788

[06:03] <[Tux]> csv-parser         22.250 - 22.464

[06:03] <[Tux]> test-t-20          28.489 - 28.798

[06:14] *** [TuxCM] left
[06:23] *** patrickb joined
[07:51] <patrickb> .tell Kaiepi WRT support of 6.e in your grant - have you seen https://github.com/rakudo/rakudo/pull/2852 ?

[07:51] <yoleaux> patrickb: I'll pass your message to Kaiepi.

[09:06] *** squashable6 left
[09:07] *** squashable6 joined
[09:07] *** ChanServ sets mode: +v squashable6

[09:57] *** robertle joined
[11:06] *** AlexDaniel left
[11:14] *** squashable6 left
[11:18] *** squashable6 joined
[11:18] *** ChanServ sets mode: +v squashable6

[13:30] *** lucasb joined
[13:30] *** vrurg joined
[13:45] *** squashable6 left
[13:46] *** squashable6 joined
[13:47] *** squashable6 left
[13:48] *** squashable6 joined
[13:48] *** ChanServ sets mode: +v squashable6

[14:11] *** AlexDaniel joined
[15:28] *** robertle left
[15:41] *** patrickb left
[16:25] *** epony left
[17:30] *** patrickb joined
[17:33] *** epony joined
[17:50] *** epony left
[17:56] *** epony joined
[18:39] *** lucasb left
[18:41] *** lizmat joined
[19:11] <patrickb> Is there a release branch for 2019.05? Should we hold back committing to master until the release?

[19:11] * lizmat has a similar question

[19:12] *** robertle joined
[19:13] * lizmat merged Kaiepi's changes

[19:14] <lizmat> hmmm... so why is Geth reporting on doc changes, but not on core changes ?

[19:14] <timotimo> the url has to be updated in the github hook

[19:16] <lizmat> and who can do that ?  pmichaud ? jnthn ? TimToady ?

[19:16] <timotimo> i cannot, at least not for rakudo/rakudo

[19:18] <timotimo> owners of the repo/organization are jnthn, masak, moritz, and pmichaud

[19:39] *** robertle left
[19:49] <AlexDaniel> feel free to open a post-release branch

[19:54] <timotimo> test

[19:59] <Geth_> ¦ rakudo: 44a6468f96 | (Elizabeth Mattijsen)++ | src/core/set_subset.pm6

[19:59] <Geth_> ¦ rakudo: Make Iterable (<=) 2..3x faster

[19:59] <Geth_> ¦ rakudo: 

[19:59] <Geth_> ¦ rakudo: - 2x as fast on object hashes

[19:59] <Geth_> ¦ rakudo: - 3x as fast on normal hashes

[19:59] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/44a6468f96

[20:00] <lizmat> yeah!   timotimo++ moritz++ masak++   :-)

[20:01] <moritz> lizmat+ # making things faster

[20:04] <timotimo> yay

[20:05] <Geth_> ¦ problem-solving: AlexDaniel self-unassigned Issues with security and reliability of our infrastructure https://github.com/perl6/problem-solving/issues/9

[20:06] <Geth_> ¦ problem-solving: AlexDaniel assigned to maettu Issue Issues with security and reliability of our infrastructure https://github.com/perl6/problem-solving/issues/9

[20:06] <Geth_> ¦ problem-solving: AlexDaniel assigned to rba Issue Issues with security and reliability of our infrastructure https://github.com/perl6/problem-solving/issues/9

[20:08] *** ufobat__ joined
[20:12] *** ufobat_ left
[20:13] <Geth_> ¦ problem-solving: AlexDaniel assigned to jnthn Issue Semantics of coercion type on an "rw" parameter https://github.com/perl6/problem-solving/issues/21

[20:15] <Geth_> ¦ roast: 2916ad0942 | (Elizabeth Mattijsen)++ | S17-scheduler/every.t

[20:15] <Geth_> ¦ roast: Update test count

[20:15] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/2916ad0942

[20:33] <Geth_> ¦ rakudo: 48a12551f9 | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm6

[20:33] <Geth_> ¦ rakudo: Fix $*SCHEDULER.cue( times => 5 )

[20:33] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/48a12551f9

[20:33] <lizmat> that should be the last fix for now

[20:34] <patrickb> bisectable6: role Meow { method iterator {…} }; class Bar does Meow {}

[20:34] <bisectable6> patrickb, Bisecting by exit code (old=2015.12 new=44a6468). Old exit code: 1

[20:34] <bisectable6> patrickb, bisect log: https://gist.github.com/3250098e49374f4a8ae0590eefc15eb3

[20:34] <bisectable6> patrickb, (2018-10-18) https://github.com/rakudo/rakudo/commit/fd5d5bdfb97930cfae1f9b2572d2ab6eea7ca92f

[20:34] <tyil> lizmat: Geth_ seems to still work :D

[20:35] <lizmat> it didn't before 10pm today for rakudo/rakudo and many other rrpos

[20:35] <lizmat> *repos

[20:35] <tyil> ah

[21:35] *** MasterDuke left
[22:21] <gfldex> m: my $m = my method m() {}; say $m.Method;

[22:21] <camelia> rakudo-moar 48a12551f: OUTPUT: «No such method 'Method' for invocant of type 'Method'␤  in block <unit> at <tmp> line 1␤␤»

[22:24] <gfldex> That does work for most other build in types. Is this ^^^ intentional?

[22:27] * ugexe chuckles at the thought of $repo.CompUnit::Repository::Filesystem

[22:28] <ugexe> m: my $repo = CompUnit::Repository::FileSystem.new(prefix => $*CWD.absolute); say $repo.CompUnit::Repository::Filesystem

[22:28] <camelia> rakudo-moar 48a12551f: OUTPUT: «Cannot invoke this object (REPR: P6opaque; NQPMu)␤  in block <unit> at <tmp> line 1␤␤»

[22:51] *** epony left
[22:53] *** patrickb left
[23:16] <ugexe> vrurg: classes/roles don't close over variables

[23:16] <ugexe> or at least you shouldn't expect them to do so

[23:17] <vrurg> ugexe: Ok, but picking data from a parallel thread isn't something anybody would expect.

[23:17] <ugexe> sub via-class ($obj, $name) { my class Bar { method test-name {$name} }.new }

[23:17] <ugexe> would need to be

[23:17] <ugexe> sub via-class ($obj, $name) { my class Bar { has $.name; method test-name {$name} }.new(:$name) }

[23:18] <ugexe> sub via-class ($obj, $name) { my class Bar { has $.name; method test-name {$.name} }.new(:$name) }

[23:19] <vrurg> ugexe: Perhaps, this is what I'd have done. I stubled upon this in Red and what it does is caching (if got the intentions correctly) via mixing in a method with a scalar: $col but role :: { method class { $class } }

[23:19] <ugexe> what behavior are you expecting? i'm not sure what i'm expecting tbh

[23:19] <ugexe> i'm going to go out on a limb and say Red is making wrong assumption about its closures

[23:19] <vrurg> I'm producing a fix for it. But generally there must be at least a warning in such behaviour.

[23:21] <vrurg> You tread on my pet corn with closures. There is a huge problem with pre-compiled code losing them.

[23:22] <ugexe> should be doing something like 'role MyRole[$class] { method class { $class } }; $col but MyRole[$class]

[23:22] <vrurg> ugexe: precisely what I've done.

[23:28] *** epony joined
