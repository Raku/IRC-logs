[00:34] *** Kaiepi left
[00:34] *** Kaypie joined
[00:53] *** Kaypie left
[00:53] *** Kaypie joined
[02:14] *** pamplemousse left
[02:21] *** klapperl_ joined
[02:21] *** klapperl left
[02:29] *** Kaypie left
[02:29] *** Kaypie joined
[02:33] *** Kaypie left
[02:34] *** Kaypie joined
[04:50] *** BeastieBot left
[04:50] *** BeastieBot joined
[06:30] *** patrickb joined
[06:31] *** ufobat joined
[06:49] <lizmat> Files=1268, Tests=108561, 192 wallclock secs (26.68 usr  7.76 sys + 2691.76 cusr 252.97 csys = 2979.17 CPU)

[07:06] *** robertle joined
[08:02] <lizmat> .ask jnthn would it make sense to fix thread safety of state variables / once blocks by using an atomic int increment to signal initialization on the MoarVM backend?  

[08:02] <yoleaux> lizmat: I'll pass your message to jnthn.

[08:33] *** robertle left
[09:26] *** patrickb left
[09:30] <|Tux|> Rakudo version 2019.07-91-gdcf8c16d4 - MoarVM version 2019.07-34-g57a6d475b

[09:30] <|Tux|> csv-test-xs-20      0.424 -  0.430

[09:30] <|Tux|> csv-ip5xs           0.687 -  0.703

[09:30] <|Tux|> test-t --race       0.775 -  0.777

[09:30] <|Tux|> test-t              1.652 -  1.704

[09:30] <|Tux|> csv-ip5xs-20        5.125 -  5.178

[09:30] <|Tux|> test                6.018 -  6.729

[09:30] <|Tux|> test-t-20 --race    9.076 -  9.104

[09:30] <|Tux|> csv-parser         21.393 - 21.529

[09:30] <|Tux|> test-t-20          30.195 - 30.401

[09:38] *** patrickb joined
[11:42] *** MasterDuke joined
[11:43] <MasterDuke> an interesting article and commentary about doing parallel programming in julia that seems relevant here https://news.ycombinator.com/item?id=20507628

[12:06] *** MasterDuke left
[12:55] *** llfourn joined
[13:26] *** Voldenet left
[13:31] *** lucasb joined
[13:32] *** Voldenet joined
[13:32] *** Voldenet left
[13:32] *** Voldenet joined
[13:35] <jdv79> I thought the Hash:Map::Array:List stuff was all settled a while ago

[13:36] *** robertle joined
[13:46] <lizmat> jdv79: apparently not ?  :-)

[13:46] <lizmat> the fact that I created a PR should not be construed as supporting that change, merely as a tool to make the discussion clear

[13:47] <lizmat> since vrurg is trying to fix the issue of exporting scalar values

[13:48] *** AlexDaniel left
[13:48] *** AlexDaniel joined
[13:49] <vrurg> lizmat: Actually, your PR will fix things for those exporting with Map. The rest is in the core already.

[13:49] <lizmat> jdv79: ^^

[14:04] <Geth> ¦ rakudo/nested_stagestats: d0c6b6b7f6 | (Timo Paulssen)++ | src/core/CompUnit/PrecompilationRepository.pm6

[14:04] <Geth> ¦ rakudo/nested_stagestats: Show stagestats for dependent precompilation

[14:04] <Geth> ¦ rakudo/nested_stagestats: 

[14:04] <Geth> ¦ rakudo/nested_stagestats: This way you can get much more info when your "stage parse"

[14:04] <Geth> ¦ rakudo/nested_stagestats: takes long, and you can more easily see the dependency

[14:04] <Geth> ¦ rakudo/nested_stagestats: structure of your projects (though of course modules that

[14:04] <Geth> ¦ rakudo/nested_stagestats: were already precompiled won't show up here)

[14:04] <Geth> ¦ rakudo/nested_stagestats: review: https://github.com/rakudo/rakudo/commit/d0c6b6b7f6

[14:04] <Geth> ¦ rakudo: timo++ created pull request #3082: Show stagestats for dependent precompilation

[14:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3082

[14:08] <timotimo> may be a good idea to shorten that excerpt a bit, haha

[14:27] *** patrickb left
[14:39] *** Kaypie left
[14:41] *** Kaiepi joined
[14:57] *** pamplemousse joined
[15:31] *** chloekek joined
[15:43] *** robertle left
[15:47] <ugexe> lizmat: you'd probably have to use a lock for the same reason you would for //= -- knowing if its initialized isn't enough, the second thread must also wait for the value to be available

[15:47] <ugexe> if the initialization marker was the value itself then it'd be fine

[15:48] <ugexe> i guess maybe cas could work

[15:48] <ugexe> on systems that support it

[15:51] <ugexe> as for `once { }` you are left choosing if a second thread can skip past while the first thread is still inside the once block

[15:52] <ugexe> i'm assuming thats ok but would still catch people up using once to initialize things

[16:36] *** pamplemousse left
[16:45] *** robertle joined
[17:09] <AlexDaniel> lizmat: “Perl 6 is a brand new language that brings fun back into programming” ? :)

[17:29] *** pamplemousse joined
[17:38] *** pamplemousse_ joined
[17:40] *** pamplemousse left
[17:41] *** pamplemousse_ is now known as pamplemousse

[17:44] *** chloekek left
[18:18] *** BeastieBot left
[18:19] *** BeastieBot joined
[18:20] *** AlexDaniel left
[18:22] *** pamplemousse_ joined
[18:24] *** pamplemousse left
[18:24] *** pamplemousse_ is now known as pamplemousse

[18:34] <Geth> ¦ rakudo/release-2019.07.1: bd29d3f643 | (Aleks-Daniel Jakimenko-Aleksejev)++ | t/08-performance/99-misc.t

[18:34] <Geth> ¦ rakudo/release-2019.07.1: Bump the margin of a performance test

[18:34] <Geth> ¦ rakudo/release-2019.07.1: 

[18:34] <Geth> ¦ rakudo/release-2019.07.1: According to the original issue one of the variants wasn't simply

[18:34] <Geth> ¦ rakudo/release-2019.07.1: slower but rather used to hang. To test for the hang, the margin can

[18:34] <Geth> ¦ rakudo/release-2019.07.1: be relatively large. Currently the difference is about 2x, which means

[18:34] <Geth> ¦ rakudo/release-2019.07.1: that the test flapped depending on the system's load. Bumping it to 5x

[18:34] <Geth> ¦ rakudo/release-2019.07.1: should be good enough in most of the cases.

[18:34] <Geth> ¦ rakudo/release-2019.07.1: 

[18:34] <Geth> ¦ rakudo/release-2019.07.1: Resolves GH-3065.

[18:34] <Geth> ¦ rakudo/release-2019.07.1: review: https://github.com/rakudo/rakudo/commit/bd29d3f643

[18:36] *** AlexDaniel joined
[19:01] *** pamplemousse_ joined
[19:03] *** pamplemousse left
[19:50] *** pamplemousse_ is now known as pamplemousse

[20:10] *** MasterDuke joined
[20:17] *** TimToady left
[20:17] *** TimToady joined
[21:04] *** Kaiepi left
[21:17] *** Kaiepi joined
[21:30] *** MasterDuke left
[22:15] <pamplemousse> Quick question. When I run "perl6 --target=mbc --output=foo.mbc foo.pl6", and foo.pl6 uses a module (in this case Date::Names), I get this output to the terminal: https://gist.github.com/pamplemoussecache/6cd6b6c3d6f552e021d50d505aafb5d1

[22:15] <pamplemousse> It appears to be produced on this line: https://github.com/perl6/nqp/blob/master/src/HLL/Compiler.nqp#L553

[22:16] <pamplemousse> But I can't find where that $grammar.parse() function actually lives. Does anyone have any ideas?

[22:17] <timotimo> yeah, that is probably derived from NQP

[22:17] <timotimo> but you're probably most interested in the TOP method in the grammar in question

[22:21] <pamplemousse> The TOP method? How would I find that?

[22:21] <timotimo> that'd be Perl6::Grammar's TOP

[22:22] <timotimo> the method parse in question actually lives in QRegex/Cursor.nqp i believe

[22:23] <timotimo> but it doesn't do much besides call the TOP method/token (by default) of the grammar

[22:29] <pamplemousse> It looks like it is the one in Cursor.nqp, thanks! I'll take a look at TOP next

[22:29] <timotimo> it does a *lot*

[22:30] <timotimo> https://github.com/rakudo/rakudo/pull/3082 - this PR happens to have a little bit to do with what you might be looking at at the moment

[22:31] <timotimo> at least i think you're looking in that general direction

[22:31] <timotimo> of course the output you're getting gives all dependencies, whereas what i changed in that code is only for dependencies that haven't been precompiled yet

[22:33] <pamplemousse> Thank you, that's extremely helpful

[22:35] <timotimo> glad to hear it

[22:35] <timotimo> i'm about to head to bed

[22:36] <pamplemousse> Alright, thank you for your help!

[22:37] <timotimo> thank you for your contributions :)

[23:01] *** pamplemousse left
[23:11] *** lucasb left
