[00:43] <vrurg> ugexe: Even if takes several seconds to start doing anything?

[00:44] <vrurg> Or with network timeouts it could be tens of seconds even.

[00:51] <Geth> ¦ nqp: vrurg++ created pull request #548: moar_prefix wasn't set when --with-moar is used

[00:51] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/548

[00:54] <ugexe> Several seconds doesn’t bother me for how frequent it is done. But don’t let me stop you from doing it faster.

[01:27] <vrurg> Perhaps it's me oversensitive to these kind if things because at times I run it every other 5-10 mintues. 

[01:31] <Geth> ¦ nqp: 5e62694aea | (Vadim Belman)++ | tools/lib/NQP/Config/NQP.pm

[01:31] <Geth> ¦ nqp: moar_prefix wasn't set when --with-moar is used

[01:31] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5e62694aea

[01:31] <Geth> ¦ nqp: 0bb6592054 | (Vadim Belman)++ (committed using GitHub Web editor) | tools/lib/NQP/Config/NQP.pm

[01:31] <Geth> ¦ nqp: Merge pull request #548 from vrurg/build-revamp

[01:31] <Geth> ¦ nqp: 

[01:31] <Geth> ¦ nqp: moar_prefix wasn't set when --with-moar is used

[01:31] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/0bb6592054

[02:47] <Geth> ¦ rakudo: vrurg++ created pull request #2927: Make it build when nqp resides not in --prefix

[02:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/2927

[05:04] *** vrurg left
[07:46] *** squashable6 left
[07:51] *** squashable6 joined
[07:51] *** ChanServ sets mode: +v squashable6

[08:48] <lizmat> Files=1262, Tests=107961, 401 wallclock secs (28.25 usr  6.71 sys + 2847.72 cusr 242.47 csys = 3125.15 CPU)

[08:48] <yoleaux> 25 May 2019 23:05Z <vrurg> lizmat: Hopefully, I found an acceptable solution which won't affect Configure startup times whatsoever and would update submodule on each pull request.

[08:48] <lizmat> cool

[09:54] <[Tux]> Rakudo version 2019.03.1-452-g9e8da7476 - MoarVM version 2019.05-18-g2ccc20fb5

[09:54] <[Tux]> csv-test-xs-20      0.430 -  0.449

[09:54] <[Tux]> csv-ip5xs           0.704 -  0.722

[09:54] <[Tux]> test-t --race       0.785 -  0.855

[09:54] <[Tux]> test-t              1.696 -  1.732

[09:54] <[Tux]> csv-ip5xs-20        6.148 -  6.195

[09:54] <[Tux]> test                7.708 -  7.730

[09:54] <[Tux]> test-t-20 --race    9.384 - 10.451

[09:54] <[Tux]> csv-parser         23.281 - 24.802

[09:54] <[Tux]> test-t-20          28.677 - 31.193

[10:42] *** epony left
[14:22] *** vrurg joined
[14:25] *** vrurg left
[17:26] <timotimo> hrmpf. how do i get a string out of an nqp::list_s ...

[17:26] <timotimo> i can only get it to say "atpos expected a string register"

[17:43] <lizmat> atpos_s ?

[17:44] <lizmat> m: my $s := nqp::list_s("a","b","c"); say nqp::atpos_s($s,1)

[17:44] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::list_s, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3my $s := nqp::list_s("a","b","c")7⏏5; say nqp::atpos_s($s,1)␤»

[17:44] <lizmat> m: use nqp; my $s := nqp::list_s("a","b","c"); say nqp::atpos_s($s,1)

[17:44] <camelia> rakudo-moar a643b8be1: OUTPUT: «b␤»

[17:46] <timotimo> huh

[17:47] <timotimo> m: my $s := nqp::list_s("a","b","c"); say $s.HOW.name($s)

[17:47] <camelia> rakudo-moar a643b8be1: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::list_s, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3my $s := nqp::list_s("a","b","c")7⏏5; say $s.HOW.name($s)␤»

[17:47] <timotimo> m: use nqp; my $s := nqp::list_s("a","b","c"); say $s.HOW.name($s)

[17:47] <camelia> rakudo-moar a643b8be1: OUTPUT: «BOOTStrArray␤»

[17:48] <timotimo> m: use nqp; my $s := nqp::list_s("a","b","c"); say $s.HOW.name($s); say nqp::atpos_s($s, 1);

[17:48] <camelia> rakudo-moar a643b8be1: OUTPUT: «BOOTStrArray␤b␤»

[17:48] <timotimo> why does that work but on my end it complains?

[17:50] <timotimo> huh, it's the nqp::existspos actually

[17:51] <timotimo> m: use nqp; my $s := nqp::list_s("a","b","c"); say $s.HOW.name($s); say nqp::existspos($s, 5)

[17:51] <camelia> rakudo-moar a643b8be1: OUTPUT: «BOOTStrArray␤0␤»

[17:51] <timotimo> m: use nqp; my $s := nqp::list_s("a","b","c"); say $s.HOW.name($s); if nqp::existspos($s, 5) { say nqp::atpos_s($s, 5) }

[17:51] <camelia> rakudo-moar a643b8be1: OUTPUT: «BOOTStrArray␤»

[17:51] <timotimo> m: use nqp; my $s := nqp::list_s("a","b","c", "d", "e", "f"); say $s.HOW.name($s); if nqp::existspos($s, 5) { say nqp::atpos_s($s, 5) }

[17:51] <camelia> rakudo-moar a643b8be1: OUTPUT: «BOOTStrArray␤MVMArray: atpos expected string register␤  in block <unit> at <tmp> line 1␤␤»

[17:51] <timotimo> there it is

[17:52] <timotimo> m: use nqp; my $s := nqp::list_s("a","b","c", "d", "e", "f"); say $s.HOW.name($s); if 5 < nqp::elems($s) { say nqp::atpos_s($s, 5) }

[17:52] <camelia> rakudo-moar a643b8be1: OUTPUT: «BOOTStrArray␤f␤»

[17:53] <timotimo> it seems rude to say that, but What The F?

[18:16] <lizmat> m: use nqp; my $s := nqp::list_s("a","b","c", "d", "e", "f"); say $s.HOW.name($s); if nqp::existspos_s($s, 5) { say nqp::atpos_s($s, 5) }

[18:16] <camelia> rakudo-moar a643b8be1: OUTPUT: «===SORRY!===␤No registered operation handler for 'existspos_s'␤»

[18:16] <lizmat> I guess someone forgot to implement existspos_s ?

[18:17] <MasterDuke> there aren't any _* existspos

[18:18] <lizmat> m: use nqp; my $s := nqp::list_i(1,2,3,4,5,6); say $s.HOW.name($s); if nqp::existspos($s, 5) { say nqp::atpos_i($s, 5) }   # same for list_i

[18:18] <camelia> rakudo-moar a643b8be1: OUTPUT: «BOOTIntArray␤MVMArray: atpos expected int register␤  in block <unit> at <tmp> line 1␤␤»

[18:18] <timotimo> existspos_s doesn't really make sense

[18:19] <timotimo> all existspos_* would be the exact same

[18:19] <lizmat> m: use nqp; my $s := nqp::list_n(1e0,2e0,3e0,4e0,5e0,6e0); say $s.HOW.name($s); if nqp::existspos($s, 5) { say nqp::atpos_n($s, 5) }  # and for list_n

[18:19] <camelia> rakudo-moar a643b8be1: OUTPUT: «BOOTNumArray␤MVMArray: atpos expected num register␤  in block <unit> at <tmp> line 1␤␤»

[18:19] <lizmat> perhaps one check too many somewhere ?

[18:19] <lizmat> I mean, there is a nqp::isnull and there is an nqp::isnull_s

[18:20] <timotimo> isnull_s accepts "" as null, too, or something?

[18:21] <lizmat> no, it doesn't

[18:22] <lizmat> m: use nqp; my $s := nqp::list_s; nqp::bindpos_s($s,1,"b"); say nqp::isnull_s(nqp::atpos_s($s,0))

[18:22] <camelia> rakudo-moar a643b8be1: OUTPUT: «1␤»

[18:24] <MasterDuke> nqp: my @a := ("a", "b", "c"); say(nqp::existspos(@a, 1))

[18:24] <camelia> nqp-moarvm: OUTPUT: «1␤»

[18:24] <MasterDuke> nqp: my @a := nqp::list_s("a", "b", "c"); say(nqp::existspos(@a, 1))

[18:24] <camelia> nqp-moarvm: OUTPUT: «MVMArray: atpos expected string register␤   at <tmp>:1  (<ephemeral file>:<mainline>)␤ from gen/moar/stage2/NQPHLL.nqp:1732  (/home/camelia/rakudo-m-inst-1/bin/../share/nqp/lib/NQPHLL.moarvm:eval)␤ from gen/moar/stage2/NQPHLL.nqp:1936  (/home/camelia/rakud…»

[18:26] <MasterDuke> m: use nqp; my @a := ("a", "b", "c"); say(nqp::existspos(@a, 1))

[18:26] <camelia> rakudo-moar a643b8be1: OUTPUT: «This type (List) does not support elems␤  in block <unit> at <tmp> line 1␤␤»

[18:29] <MasterDuke> that ^^^ seems odd, that a `List` doesn't support elems

[18:29] <timotimo> that needs a getattr for its $!reified

[18:29] <timotimo> also, lists can be lazy

[18:29] <MasterDuke> ah, right

[20:10] *** ufobat_ joined
[20:13] *** ufobat__ left
[20:19] <lizmat> m: my @a = ^10; my $s := @a.Slip; @a.push(42); dd $s   # oh, how I wish this wasn't a bug

[20:19] <camelia> rakudo-moar a643b8be1: OUTPUT: «slip(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 42)␤»

[20:21] <lizmat> bisectable6: my @a = ^10; my $s := @a.Slip; @a.push(42); dd $s 

[20:21] <bisectable6> lizmat, On both starting points (old=2015.12 new=aec9887) the exit code is 0 and the output is identical as well

[20:21] <bisectable6> lizmat, Output on both points: «slip(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 42)␤»

[20:21] <lizmat> guess it has been around for a while already

[21:53] *** reportable6 left
[21:53] *** undersightable6 left
[21:53] *** committable6 left
[21:53] *** shareable6 left
[21:53] *** notable6 left
[21:54] *** committable6 joined
[21:54] *** shareable6 joined
[21:54] *** ChanServ sets mode: +v shareable6

[21:55] *** reportable6 joined
[21:55] *** notable6 joined
[21:58] *** undersightable6 joined
[21:58] *** ChanServ sets mode: +v undersightable6

[23:05] *** undersightable6 left
[23:05] *** shareable6 left
[23:05] *** squashable6 left
[23:05] *** committable6 left
[23:05] *** unicodable6 left
[23:05] *** greppable6 left
[23:05] *** notable6 left
[23:05] *** evalable6 left
[23:05] *** nativecallable6 left
[23:05] *** benchable6 left
[23:05] *** bloatable6 left
[23:05] *** statisfiable6 left
[23:05] *** bisectable6 left
[23:05] *** releasable6 left
[23:05] *** coverable6 left
[23:05] *** quotable6 left
[23:05] *** reportable6 left
[23:08] *** notable6 joined
[23:08] *** coverable6 joined
[23:09] *** statisfiable6 joined
[23:09] *** ChanServ sets mode: +v statisfiable6

[23:09] *** greppable6 joined
[23:09] *** ChanServ sets mode: +v greppable6

[23:09] *** unicodable6 joined
[23:10] *** benchable6 joined
[23:10] *** evalable6 joined
[23:10] *** ChanServ sets mode: +v evalable6

[23:10] *** undersightable6 joined
[23:10] *** ChanServ sets mode: +v undersightable6

[23:11] *** reportable6 joined
[23:11] *** ChanServ sets mode: +v reportable6

[23:11] *** quotable6 joined
[23:11] *** ChanServ sets mode: +v quotable6

[23:11] *** bisectable6 joined
[23:11] *** bloatable6 joined
[23:12] *** shareable6 joined
[23:12] *** ChanServ sets mode: +v shareable6

[23:12] *** committable6 joined
[23:12] *** nativecallable6 joined
[23:12] *** ChanServ sets mode: +v nativecallable6

[23:13] *** releasable6 joined
[23:13] *** ChanServ sets mode: +v releasable6

[23:13] *** squashable6 joined
[23:13] *** ChanServ sets mode: +v squashable6

[23:48] *** vrurg joined
