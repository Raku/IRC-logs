[00:58] *** vrurg joined
[01:25] <AlexDaniel> uhhh

[01:25] <AlexDaniel> c: 2018.09 for 0..0x10FFFF { say .uniname if .unival == 25 }; say now - BEGIN now

[01:25] <committable6> AlexDaniel, ¦2018.09: «CIRCLED NUMBER TWENTY FIVE␤«timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[01:25] <AlexDaniel> c: HEAD for 0..0x10FFFF { say .uniname if .unival == 25 }; say now - BEGIN now

[01:25] <committable6> AlexDaniel, ¦HEAD(9d1505d): «CIRCLED NUMBER TWENTY FIVE␤0.54908169␤»

[01:25] <AlexDaniel> this is so fast now!?

[01:25] <AlexDaniel> bisect: old=2018.09 for 0..0x10FFFF { say .uniname if .unival == 25 }; say now - BEGIN now

[01:25] <bisectable6> AlexDaniel, Bisecting by exit signal (old=2018.09 new=9d1505d). Old exit signal: 1 (SIGHUP)

[01:27] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/7e8c13b98a0bb33a5285c5a6ce60fa11

[01:27] <bisectable6> AlexDaniel, (2019-01-05) https://github.com/rakudo/rakudo/commit/08ae9bfcff78d60673c799f1932d1db55e9799a2

[01:28] <AlexDaniel> lizmat: .unival is now *much* faster than just 2x https://colabti.org/irclogger/irclogger_log/perl6-dev?date=2019-09-05#l7

[01:28] <tellable6> AlexDaniel, I'll pass your message to lizmat

[01:43] *** epony left
[03:00] *** lucasb left
[03:00] *** epony joined
[05:41] *** Elronnd joined
[05:41] <Elronnd> I am making an api to embed perl6 in c

[05:42] <Elronnd> I want to be able to say something like p6eval("my $x = 5;"); p6eval("say $x;").  Simply running EVAL on whatever string does not work because EVAL does not affect the external scope

[05:43] <Elronnd> how can I get that to work?  My first thought was to have some kind of namespace variable I could pass to EVAL each time, in which new names persist

[05:43] <Elronnd> but neither the *%n nor the PseudoStash parameters seem to do that.  Is it possible?

[05:43] <Elronnd> And how does the repl do it?

[05:50] *** sortiz left
[06:32] <nine> Elronnd: AFAIK the repl uses nested lexical contexts to keep those symbols available

[06:37] <Elronnd> HA

[06:37] <Elronnd> haha

[06:37] <Elronnd> that's clever

[06:38] <Elronnd> I could do something like that--but it would have some overhead

[06:38] <Elronnd> is there a way to do what I want to do?

[06:47] <nine> I don't think there's a good one. Feeding a program line by line into a compiler like this just goes fundamentally against the compiler's architecture. The question is: why do you even think you need it?

[06:48] <nine> FWIW I ran into the exact same issue with Inline::Perl6 and my conclusion was that I couldn't come up with an actual use case (besides writing tests for Inline::Perl6) where such functionality was actually needed.

[06:49] <nine> What I do need is be able to load Perl 6 modules, create those objects and call functions and methods. And that's quite possible without EVAL

[07:01] <Elronnd> ok

[07:02] <Elronnd> the main thing I want it for is defining functions

[07:02] <Elronnd> I want to be able to expose functions, to say 'I have this c function; now feed it to perl6'

[07:26] *** robertle joined
[08:42] <nine> Elronnd: how would the Perl 6 code then use such functions?

[08:46] *** dogbert17 left
[11:50] *** pmurias joined
[11:56] *** lucasb joined
[12:03] *** Guest15407 joined
[12:31] *** pmurias left
[12:32] *** pmurias joined
[12:36] *** epony left
[12:38] *** epony joined
[12:57] <|Tux|> Rakudo version 2019.07.1-255-g9d1505d18 - MoarVM version 2019.07.1-177-g38915b934

[12:57] <|Tux|> csv-test-xs-20      0.429 -  0.443

[12:57] <|Tux|> csv-ip5xs           0.672 -  0.759

[12:57] <|Tux|> test-t --race       0.779 -  0.785

[12:57] <|Tux|> test-t              1.721 -  1.750

[12:58] <|Tux|> csv-ip5xs-20        5.001 -  5.046

[12:58] <|Tux|> test                6.939 -  7.001

[12:58] <|Tux|> test-t-20 --race    9.528 -  9.687

[12:58] <|Tux|> csv-parser         21.061 - 22.777

[12:58] <|Tux|> test-t-20          29.350 - 29.930

[12:59] *** ufobat joined
[13:14] *** pmurias left
[13:14] *** pmurias joined
[13:14] <Geth> ¦ rakudo: fa238cac19 | (Paweł Murias)++ | tools/build/gen-js-makefile.nqp

[13:14] <Geth> ¦ rakudo: [js] Remove no longer needed script that generated a Makefile.in

[13:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fa238cac19

[14:02] *** squashable6 left
[14:03] *** squashable6 joined
[14:03] *** ChanServ sets mode: +v squashable6

[14:06] <kawaii> AlexDaniel: are you interested in another ecosystem roast?

[14:07] <vrurg> kawaii: what is it about?

[14:10] <timotimo> always!

[14:10] <timotimo> (dunno)

[14:14] <vrurg> Sounds like there is ecosystem roas around

[14:56] *** pmurias left
[15:09] <AlexDaniel> kawaii: hmm let's see

[15:09] <kawaii> AlexDaniel: it's in progress, will bother you later :)

[15:10] <AlexDaniel> kawaii: ah ok! most issues here were fixed https://github.com/rakudo/rakudo/issues/3132

[15:10] <AlexDaniel> so doing another one is probably a good idea

[15:13] *** ufobat_ joined
[15:14] *** ufobat_ left
[15:14] <jnthn> Finally...I get around to fixing some things :)

[15:15] <japhb> jnthn: \o/  (And there was much rejoicing ....)

[15:17] *** ufobat left
[15:21] <Guest15407> jnthn: [Coke] offered free coffee to whoever fixed R#3057

[15:21] <synopsebot> R#3057 [open]: https://github.com/rakudo/rakudo/issues/3057 "too many open files" when repeatedly using Proc::Async

[15:21] <jnthn> $ perl6 -e 'run ‘perl6’, ‘-e’, ‘use NativeCall; sub strdup(int64) is native(Str) {*}; strdup(0)’'

[15:21] <jnthn> The spawned command 'perl6' exited unsuccessfully (exit code: 0, signal: 11) in block <unit> at -e line 1

[15:21] <jnthn> That looks better :)

[15:21] <jnthn> Guest15407: If I drink any more coffee today it'll mean I don't sleep well tonight :P

[15:22] <Guest15407> :-)

[15:26] <jnthn> And the good news is that our tests didn't depend on such kinds of exit being ignored

[15:28] <japhb> jnthn: Any hope of merging PEA in this burst of activity?  (I ask because a few commenters on your perf talk at Riga asked when they'd see those improvements in a default rakudo build)

[15:29] <Kaiepi> when will breaking changes stop being merged in preparation for the next release?

[15:33] <jnthn> japhb: There's still some fixes to do before that can happen; the math is a bit tricky, and I've not quite felt up to it in the last weeks. Almost feeling normalish again by now, though. Maybe next week. :)

[15:34] <japhb> Best of luck with fully working brain.  :-)

[15:35] <jnthn> Yes, this stuff is still a bit of a stretch even when I have one... :)(

[15:35] <jnthn> *:)

[15:37] <jnthn> Known problems are: 1) materialization on two branches breaks SSA form 2) the analysis is smart enough to do away with circular data structures but the materialization/deopt ain't, 3) the unboxing of bigints is still leak-tastic if they actually are upgraded

[15:38] <japhb> Heh

[15:42] <jnthn> m: https://gist.github.com/jnthn/51f33103301b41bdcc6d1695f92f9b62

[15:42] <evalable6> jnthn, rakudo-moar fa238cac1: OUTPUT: «(exit code 2)     1..2␤    not ok 1 - code dies␤    # Failed test 'code dies'␤    # at san…»

[15:42] <evalable6> jnthn, Full output: https://gist.github.com/328f8b5bd2af85b6e757f5a966903b34

[15:45] <Geth> ¦ rakudo: 225b1c56f9 | (Jonathan Worthington)++ | src/core.c/Proc.pm6

[15:45] <Geth> ¦ rakudo: Take signal part of process outcome into account

[15:45] <Geth> ¦ rakudo: 

[15:45] <Geth> ¦ rakudo: So that if something exists with a SEGV, then:

[15:45] <Geth> ¦ rakudo: * The Proc is falsey

[15:45] <Geth> ¦ rakudo: * Sinking the Proc will explode

[15:45] <Geth> ¦ rakudo: Fixes #3149.

[15:45] <synopsebot> RAKUDO#3149 [closed]: https://github.com/rakudo/rakudo/issues/3149 [severe] Processes that segfault should return a failure (just like they do for non-zero exit codes)

[15:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/225b1c56f9

[15:45] <Geth> ¦ rakudo: 89fc9f356b | (Jonathan Worthington)++ | src/core.c/Exception.pm6

[15:45] <Geth> ¦ rakudo: Report signal in X::Proc::Unsuccessful

[15:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/89fc9f356b

[15:45] <Geth> ¦ rakudo: 6b42d3148a | (Jonathan Worthington)++ | src/core.c/Proc.pm6

[15:45] <Geth> ¦ rakudo: Align Proc.signal with Proc.exitcode

[15:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6b42d3148a

[15:46] <Geth> ¦ roast: 618eefb482 | (Jonathan Worthington)++ | S29-os/system.t

[15:46] <Geth> ¦ roast: Test Proc.[Bool|Sink] accounts for signal

[15:46] <Geth> ¦ roast: 

[15:46] <Geth> ¦ roast: Covers https://github.com/rakudo/rakudo/issues/3149.

[15:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/618eefb482

[15:46] <AlexDaniel> jnthn: thank you

[15:48] <japhb> AlexDaniel: Might be worth a moar/nqp bump in order to pick up the Moar-level fixes from earlier.

[15:48] <AlexDaniel> sure

[15:49] <Geth> ¦ nqp: 18d11a94eb | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/templates/MOAR_REVISION

[15:49] <Geth> ¦ nqp: [MoarVM Bump] Brings 46 commits

[15:49] <Geth> ¦ nqp: 

[15:49] <Geth> ¦ nqp: MoarVM bump brought: https://github.com/MoarVM/MoarVM/compare/2019.07.1-134-ga37504d12...2019.07.1-180-gcf3b545e5

[15:49] <Geth> ¦ nqp: cf3b545e5 Reinstate callsite during uninlining

[15:49] <Geth> ¦ nqp: 5f177f582 Make MVM_HASH_RANDOMIZE properly control hash rand

[15:49] <Geth> ¦ nqp: 1fd0fdcd6 Fix stack simulation losing track in some cases

[15:49] <Geth> ¦ nqp: 38915b934 Tweak spesh logging's new compunit handling/quotas

[15:49] <Geth> ¦ nqp: <…commit message has 42 more lines…>

[15:49] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/18d11a94eb

[15:49] <Geth> ¦ rakudo: 9dd67cb37b | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/templates/NQP_REVISION

[15:49] <Geth> ¦ rakudo: [NQP Bump] Brings 8 commits

[15:49] <Geth> ¦ rakudo: 

[15:49] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2019.07.1-86-g5abf0ff16...2019.07.1-94-g18d11a94e

[15:49] <Geth> ¦ rakudo: 18d11a94e [MoarVM Bump] Brings 46 commits

[15:49] <Geth> ¦ rakudo: 110038284 [js] Skip a 64bit test

[15:49] <Geth> ¦ rakudo: ba5c67be3 [js] Fix bug cause by == now being nqp::iseq_i in NQP

[15:49] <Geth> ¦ rakudo: 1b0230a92 [js] Fix preprocessing the qregex tests

[15:49] <Geth> ¦ rakudo: 9eb5f2549 Fix wrong makefile variable name

[15:49] <Geth> ¦ rakudo: 079fd8257 [JVM] Improve some error messages

[15:49] <Geth> ¦ rakudo: 726917eaf Merge pull request #576 from patzim/rakudo_3136

[15:49] <Geth> ¦ rakudo: 75ef1a51e Use cincludes configuration variable from MoarVM

[15:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9dd67cb37b

[15:50] <japhb> AlexDaniel: Thanks!

[15:52] *** robertle left
[16:16] <japhb> jnthn: FWIW, on rakudo master now I find `time perl6 -e ''` bounces (bimodally) between ~140ms and ~210ms on my machine.  Could be an antagonist on my machine, but thought I'd mention it since you just fixed one bug that resulted in bimodal timings.

[16:21] <jnthn> Curious, i just did 10 invocations and they're all within around 3ms of each other.

[16:26] <[Coke]> (bimodal timings) ... weird.

[16:32] <Kaiepi> can someone review https://github.com/MoarVM/MoarVM/pull/1166 and https://github.com/rakudo/rakudo/pull/3164 ? the former's more pressing since i can't really continue with my grant without the third commit

[17:00] *** robertle joined
[17:30] <Elronnd> nine: it would just be able to just call them like any other NativeCall function

[17:31] <Elronnd> like

[17:31] <Elronnd> my &func = nativecase(:(int32, int32 -> Str), $ptr-from-c);

[17:51] <Geth> ¦ problem-solving: vrurg assigned to jnthn Issue Unification of Array/List and Hash/Map behaviors. https://github.com/perl6/problem-solving/issues/99

[18:27] <AlexDaniel> greppable6: PF_MAX

[18:27] <greppable6> AlexDaniel, Found nothing!

[18:35] <AlexDaniel> Kaiepi: I see a few MVM_free(wi->req); lines removed, why is that?

[18:38] <jnthn> I was trying to figure that out too, but then saw quite a few other bits of refactoring, so figured I'd try and work it out...then ran out of time. 

[18:38] <tellable6> https://gist.github.com/9a0773464530e2c33ea7e6bc858b518c

[18:38] <AlexDaniel> jnthn: message for you ↑

[18:38] <AlexDaniel> I should fix tellable6 with long messages

[18:38] <jnthn> It...should maybe say it's for me :P

[18:39] <AlexDaniel> it shouldn't gist stuff, but it adds a few extra characters to the original message so there's a chance that it won't fit

[18:42] <AlexDaniel> jnthn: fwiw slapping ?w=1 on the pr links really helps :D

[18:42] <AlexDaniel> as in https://github.com/MoarVM/MoarVM/pull/1166/files?w=1

[18:44] <AlexDaniel> Kaiepi: but yeah, I'm interested to know if it leaks more, less or same

[18:51] <Kaiepi> AlexDaniel, i think it was because uv_close now takes a callback that does the freeing, but i'd need to check the pullreq to see if i didn't actually remove some by accident

[18:52] <AlexDaniel> maybe also try a test script with thousands of connections or something like that

[18:58] *** dogbert17 joined
[18:59] *** [Coke] joined
[18:59] *** [Coke] left
[18:59] *** [Coke] joined
[19:51] <timotimo> i finally found my mistake with Concurrent::Progress

[19:51] <timotimo> i used .new(:target(1)) where new doesn't take that argument

[19:51] <timotimo> so i was off by one

[20:13] *** irced joined
[20:18] *** pmurias joined
[20:32] *** MasterDuke joined
[20:57] *** pmurias left
[20:58] *** pmurias joined
[21:04] *** lucasb left
[21:23] *** pmurias left
[21:25] *** japhb left
[21:30] *** pmurias joined
[21:47] *** japhb joined
[22:35] *** irced left
[22:36] *** BeastieBot left
[22:37] *** irced joined
[22:45] *** pmurias left
