[00:00] <vrurg> jnthn: It demoes that $.a could fail in methods too.

[00:00] <vrurg> Anyway, I still don't see why submethod should be limited in using `$.a`? Maybe I'm missing something, but it's just a shortcut for self.a which just works.

[00:03] <vrurg> jnthn: I noted it in the ticket: all tests and spectests are passing if I lift this limitation. I would consider allowing it as it definitely provides more good with no harm.

[00:04] <jnthn> vrurg: That just means we're missing spectests covering the behavior.

[00:04] <jnthn> Commented on the rationale in the ticket. This is not an accident. It was discussed and decided on way back.

[00:05] <jnthn> It's a pity that it didn't receive spectests at the time, though.

[00:05] <jnthn> Sleep time here; 'night

[00:07] <vrurg> g'night!

[00:07] <AlexDaniel> more operators??

[00:09] <vrurg> AlexDaniel: extension for .+: .- for reverse MRO order. Because I didn't find any good analog for .* I came up with .?- which logically pulled in .?+

[00:11] <vrurg> AlexDaniel: tests are in https://github.com/perl6/roast/pull/581

[00:22] <AlexDaniel> I'm just wondering, do these have to be operators? I understand that's kinda their nature, but I'll never in my life remember the difference between them

[00:23] <vrurg> AlexDaniel: because you never used them. :)

[00:23] <vrurg> More precisely: never needed.

[00:23] <AlexDaniel> that's absolutely true, yes

[00:23] <AlexDaniel> do you think they'll be used often?

[00:24] <AlexDaniel> .? is ok, but everything else… uhhh

[00:25] <vrurg> A MOP method? But there .+ already. I just slightly modified it and made all four share same base method.

[00:25] <AlexDaniel> yeah, but maybe it's .+ that is in the wrong :)

[00:26] <vrurg> .* is extensively used in spectest

[00:26] <AlexDaniel> and .*…

[00:29] <vrurg> They do make sense for submethods anyway. My best example is a custom app built from a number of roles/classes implementing certain functionality. Each role/class provide their own command line options. Instead of manually collecting them I can call cli-opt submethod and get a list of definitions.

[00:29] <AlexDaniel> these remind me so much of perl5's $… vars

[00:30] <AlexDaniel> vrurg: right, IRC::Client is doing something similar if I recall correctly

[00:30] <vrurg> Operator look very much natural here because $app.-cil-opts( ... ) is way much tidier than $app.^batch-call('cli-opts', \( ... args ... ))

[00:30] <AlexDaniel> I like the second one more

[00:30] <vrurg> Ah, worse: $app.^batch-call('cli-opts', \( ... args ... ), :reverse)

[00:31] <AlexDaniel> it's longer, but we're fine with longer things :P

[00:31] <vrurg> "To whom how" ;)

[00:31] <vrurg> I'm usually anti-op too, but here I just like it.

[00:31] <AlexDaniel> it's cute

[00:32] <AlexDaniel> but unreadable

[00:32] <vrurg> No worse than $a (-) $b, anyway.

[00:33] <AlexDaniel> a bit worse, actually

[00:33] <AlexDaniel> I mean, the unicode one kinda sucks too

[00:33] <AlexDaniel> but otherwise it's a well-known notation

[00:34] <AlexDaniel> and your example is just an ascii alternative

[00:34] <AlexDaniel> and we do have things like (elem) which are ok-ish

[00:35] <AlexDaniel> also, it's literally set subtraction, so that makes sense too

[00:35] <vrurg> BTW, I hate it's unicode ∖ which with many fonts no different from \

[00:37] <vrurg> If you need to work with method calls extensively, those will also make sense. ., .+, .- fail if no method found, respectively .?, .?+, .?- don't

[00:38] <vrurg> I mean, I didn't want any linenoise. And initially I was more like kidding about .?-, but then it seemed like logical.

[00:38] <AlexDaniel> that's nice, yeah

[00:39] <AlexDaniel> ok, well, I don't know :)

[00:40] <vrurg> Actually, would there be a non-unicode reverse-order analog for .* – I would use it for shortness. But...

[00:42] <vrurg> In either case, the PR is much more than those ops. Unless I miss something, it fully implements https://github.com/perl6/problem-solving/issues/103 and I didn't belive I could manage it. ;)

[00:45] *** anatofuz left
[00:46] *** anatofuz joined
[00:53] *** anatofuz left
[01:01] *** lucasb left
[01:09] *** anatofuz joined
[01:20] *** MasterDuke left
[01:50] *** AlexDani` joined
[01:51] *** Kaiepi joined
[01:54] *** AlexDaniel left
[02:20] *** squashable6 left
[02:23] *** squashable6 joined
[02:23] *** ChanServ sets mode: +v squashable6

[02:51] *** anatofuz left
[02:52] *** anatofuz joined
[02:58] *** anatofuz left
[02:58] *** epony left
[03:08] *** anatofuz joined
[03:28] *** softmoth left
[03:35] *** anatofuz left
[03:41] *** anatofuz joined
[03:46] *** anatofuz left
[04:43] *** ZzZombo joined
[05:01] *** anatofuz joined
[05:03] *** anatofuz left
[05:08] *** ZzZombo left
[05:09] *** ZzZombo joined
[05:29] *** anatofuz joined
[05:33] *** anatofuz left
[05:41] *** anatofuz joined
[05:45] *** anatofuz left
[06:14] *** ZzZombo_ joined
[06:16] *** ZzZombo left
[06:16] *** ZzZombo_ is now known as ZzZombo

[06:20] *** anatofuz joined
[06:27] *** anatofuz left
[06:37] *** epony joined
[06:56] *** anatofuz joined
[07:36] *** anatofuz left
[07:37] *** anatofuz joined
[07:42] *** anatofuz left
[07:47] *** anatofuz joined
[07:52] *** anatofuz left
[07:52] *** epony left
[07:52] *** anatofuz joined
[07:54] *** epony joined
[08:00] *** anatofuz left
[08:02] *** anatofuz joined
[08:02] *** anatofuz left
[08:10] *** anatofuz joined
[08:20] *** anatofuz left
[08:21] *** anatofuz joined
[08:36] *** ZzZombo_ joined
[08:39] *** ZzZombo left
[08:39] *** ZzZombo_ is now known as ZzZombo

[08:43] <nine> On the one hand one needs to be very careful to not have things like Failures serialized, on the other hand I constantly run into "Cannot invoke this object (REPR: Null; VMNull)"

[08:44] <nine> Even more frustrating since the things that definitely cannot be called are subs like "say" and "note", which robs me of my primary debug tools

[08:46] *** ZzZombo_ joined
[08:48] *** ZzZombo left
[08:48] *** ZzZombo_ is now known as ZzZombo

[08:50] *** anatofuz left
[08:50] *** anatofuz joined
[08:54] <nine> Apparently there's an issue with EXPORT here. Can be easily reproduced with: echo 'sub EXPORT() { Map.new("&foo" => sub () { note "foo!" }) }' > A.pm6 && echo 'use A; our sub test() is export { foo }' > B.pm6 && perl6 -I. -e 'use B; test'

[09:01] <nine> Same happens with: echo 'my package EXPORT::DEFAULT { our sub foo() { note "foo!" } }' > A.pm6 && echo 'use A; our sub test() is export { foo }' > B.pm6 && perl6 -I. -e 'use B; test'

[09:02] <nine> This however works just fine: echo 'our sub foo() is export { note "foo!" }' > A.pm6 && echo 'use A; our sub test() is export { foo }' > B.pm6 && perl6 -I. -e 'use B; test'

[09:08] <nine> As does this: echo 'my package EXPORT::DEFAULT { }; BEGIN EXPORT::DEFAULT.WHO<&foo> := our sub () { note "foo!" }' > A.pm6 && echo 'use A; our sub test() is export { foo }' > B.pm6 && perl6 -I. -e 'use B; test'

[09:08] <nine> Note that the BEGIN is essential in this case

[09:09] <nine> And a "no precompilation;" fixes all cases

[09:14] *** epony left
[09:15] *** epony joined
[09:19] *** anatofuz left
[09:29] *** ZzZombo left
[09:41] *** anatofuz joined
[09:45] *** anatofuz left
[09:59] *** anatofuz joined
[10:03] *** ZzZombo joined
[10:04] *** anatofuz left
[10:24] *** softmoth joined
[10:24] *** AlexDani` is now known as AlexDaniel

[10:24] *** AlexDaniel left
[10:24] *** AlexDaniel joined
[11:43] *** squashable6 left
[11:47] *** squashable6 joined
[11:47] *** ChanServ sets mode: +v squashable6

[13:50] *** vrurg_ joined
[13:53] *** eaterof joined
[13:53] *** tony-o_ joined
[13:53] *** DrForr_ joined
[13:55] *** literal_ joined
[13:55] *** eater left
[13:55] *** tony-o left
[13:55] *** vrurg left
[13:55] *** kawaii left
[13:55] *** literal left
[13:55] *** DrForr left
[13:55] *** [Coke] left
[13:55] *** mornfall left
[13:55] *** vrurg_ is now known as vrurg

[13:55] *** [Coke] joined
[13:55] *** [Coke] left
[13:55] *** [Coke] joined
[13:55] *** kawaii joined
[13:58] *** mornfall joined
[13:58] *** epony left
[14:04] *** lucasb joined
[14:32] <[Coke]> .

[14:51] <|Tux|> Rakudo version 2019.07.1-386-g7e76762c5 - MoarVM version 2019.07.1-257-g39f577438

[14:51] <|Tux|> csv-test-xs-20      0.428 -  0.429

[14:51] <|Tux|> test-t --race       0.775 -  0.777

[14:51] <|Tux|> csv-ip5xs           0.754 -  0.783

[14:51] <|Tux|> test-t              1.709 -  1.735

[14:51] <|Tux|> csv-ip5xs-20        6.420 -  6.566

[14:51] <|Tux|> test                7.153 -  7.321

[14:51] <|Tux|> test-t-20 --race    8.888 -  9.053

[14:51] <|Tux|> csv-parser         20.994 - 21.812

[14:51] <|Tux|> test-t-20          29.505 - 30.145

[15:42] <nine> Wait....what?!

[15:42] <nine> nine@sphinx:~/test/precomp12> echo 'BEGIN Rakudo::Internals.EXPORT_SYMBOL(q<&foo>, ["DEFAULT"], sub () { note "foo!" })' > A.pm6 && echo 'use A; our sub test() is export { foo }' > B.pm6 && perl6 -I. -e 'use B; test'

[15:42] <nine> foo!

[15:42] <nine> nine@sphinx:~/test/precomp12> echo 'BEGIN { Rakudo::Internals.EXPORT_SYMBOL(q<&foo>, ["DEFAULT"], sub () { note "foo!" }) }' > A.pm6 && echo 'use A; our sub test() is export { foo }' > B.pm6 && perl6 -I. -e 'use B; test'

[15:42] <nine> Cannot invoke this object (REPR: Null; VMNull)

[16:14] <TreyHarris> statement BEGIN vs block BEGIN would differ in this case in... hm, they should be semantically equivalent in the end. but they aren't semantically equivalent in terms of what the phaser must do, right? Because of the closure?

[16:14] <nine> Apparently, everything's fine as long as an exported sub is declared in the top level lexical scope of the comp unit.

[16:17] <nine> But then, so is BEGIN { sub foo() is export { note "foo!" } }

[16:17] <TreyHarris> I am right here, yeah? Been awhile since I've looked at rakudo internals, but phaser BLOCK vs phaser STATEMENT do actually work by constructing a closure of the block and executing it, it's not some special-case macro thing that immediately ingests the block and treats it just like a phaser statement?

[16:18] <nine> AFAIK yes

[16:34] *** patrickb joined
[16:55] <nine> Looking at the block vs. statement versions with --target=ast, I see definitely more fixup code for the statement version.

[17:01] <nine> Ok, I'm beginning to form first vague suspicions

[17:02] <nine> There's this comment in Perl6::Actions for begin_time_lexical_fixup:

[17:02] <nine> When code runs at BEGIN time, such as role bodies and BEGIN blocks, we need to ensure we get lexical outers fixed up properly when deserializing after pre-comp. To do this we make a list of closures, which each point to the outer context. These survive serialization and thus point at what # has to be fixed up

[17:03] <nine> I think these fixups are not propagated down to nested blocks. And they are missing entirely for EXPORT subs which are also run at BEGIN time (of the caller)

[17:04] <TreyHarris> that sounds rather plausible

[17:04] *** epony joined
[17:22] <nine> Yes, yes indeed! The issue is definitely limited to subroutines in lexical scope. Calling methods OTOH is just fine.

[17:23] <nine> I can get it to work by turning this: [flat $self, |@args] into: List.new($self, @args.Slip).flat.Array

[17:24] <nine> Like this example demonstrates, it's just hard to find all the implicit subroutine calls in Perl 6 code...

[17:34] *** looker joined
[17:37] *** looker left
[17:44] <vrurg> nine: can you get it fixed?

[17:48] <nine> vrurg: given enough time...probably. Do I have that time? That's the more difficult question

[17:50] <vrurg> :( :( :( It's a kind of issue affecting lots of code around. I'm not well-enough known with with area to do something about it.

[17:51] <vrurg> https://github.com/rakudo/rakudo/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+closure

[17:53] <nine> vrurg: given your endeavours into the MOP and role composition, I don't doubt your ability to fix something like this. It's just a different area that you'd have to dig into. My whole understanding of this part of the code comes from making BEGIN time EVAL work. Which I started without knowing anything really. 

[17:54] <nine> It usually comes down to time, effort and patience

[17:56] <vrurg> nine: I was able to track similar case down to a lost closure long ago. But no more. Serialization is still some magic for me. ;)

[17:56] <vrurg> Maybe you're right and it's time to start digging this fields...

[17:57] <nine> And yes, this area really could use some love. Our support for BEGIN time code really feels half baked still

[17:57] <vrurg> *field

[17:58] <vrurg> My biggest problem is lack of understanding how exactly contexts/frames work. No docs, no papers... Tracing MOP is much easier because it's mostly introspectable. 

[18:05] <nine> No docs, no papers, but you got the implementation instead :)

[18:10] <nine> Serialization is actually not that magical. There's a serialization context for the currently compiled comp unit. That's just a pile that objects get added to (via $*W.add_object or $*W.add_object_if_no_sc mostly). At the end of compilation, this pile is dumped into the precomp file.

[18:11] <nine> What makes issues surrounding serialization so hard to debug is usually just that the objects on this pile don't have any connection anymore to the code that caused their addition. So it's hard to say, _why_ something got serialized.

[18:12] *** epony left
[18:17] *** epony joined
[18:18] <nine> And just for completeness: there's also something called "repossession". This comes into play, when during compilation, we load an object from another comp unit (read: from a module we loaded) and this object gets modified in some way. We then have to dump this modified version into the precomp file as well, even if it didn't originate in this comp unit.

[18:19] <vrurg> nine: Thanks! That sorts out some bits in my head. 

[18:19] <vrurg> afk&

[18:20] <nine> So the current comp unit sort of takes possession of the modified object. The VM tracks modifications to objects from other serialization contexts (modules) and does this repossesion thing automatically for us. In some cases we don't want that and that's what the obscure scwb ops are about.

[18:31] *** MasterDuke joined
[19:04] *** Kaiepi left
[19:24] *** patrickb left
[19:26] *** committable6 left
[19:27] *** committable6 joined
[20:05] <vrurg> nine: perhaps, you've convinced me to give it a try. R#2897 is a good and simple candidate for the starting point.

[20:05] <synopsebot> R#2897 [open]: https://github.com/rakudo/rakudo/issues/2897 VMNull in add_method in indirect use

[20:06] *** leont joined
[20:36] <nine> vrurg: yeah, looks exactly like the issue with echo 'sub EXPORT() { Map.new("&foo" => sub () { note "foo!" }) }' > A.pm6 && echo 'use A; our sub test() is export { foo }' > B.pm6 && perl6 -I. -e 'use B; test'

[21:03] *** Kaiepi joined
[21:10] <Geth_> ¦ rakudo: patzim++ created pull request #3224: Add BuildTools installation assistant

[21:10] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/3224

[21:12] <Geth_> ¦ rakudo: f7b4d71f46 | (Patrick Böker)++ | 2 files

[21:12] <Geth_> ¦ rakudo: Add BuildTools installation assistant

[21:12] <Geth_> ¦ rakudo: 

[21:12] <Geth_> ¦ rakudo: Add a script to help with installing the MSVC compiler needed to install

[21:12] <Geth_> ¦ rakudo: binary packages on Windows. Also adapt the documentation to explain when

[21:12] <Geth_> ¦ rakudo: a compiler is needed and how to install it.

[21:12] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f7b4d71f46

[21:12] <Geth_> ¦ rakudo: 1fef78388c | (Patrick Böker)++ (committed using GitHub Web editor) | 2 files

[21:12] <Geth_> ¦ rakudo: Merge pull request #3224 from patzim/msvc-installer

[21:12] <Geth_> ¦ rakudo: 

[21:12] <Geth_> ¦ rakudo: Add BuildTools installation assistant

[21:12] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1fef78388c

[21:16] *** leont left
[21:45] *** leont joined
[22:09] *** anatofuz joined
[22:17] *** anatofuz left
[22:37] *** anatofuz joined
[22:39] *** softmoth left
[22:44] *** anatofuz left
[23:16] *** Kaiepi left
[23:33] *** lucasb left
[23:58] *** leont left
