[00:06] *** patrickb left
[01:06] <MasterDuke> timotimo: you mean do i see output printing while building nqp?

[01:10] <MasterDuke> whoops, i commented out the CATCH block of directive b

[01:13] <MasterDuke> ah ha. `This representation (P6str) cannot unbox to a native num (for type BOOTStr)`

[01:45] *** MasterDuke left
[01:54] *** MasterDuke joined
[01:55] *** MasterDuke left
[01:55] *** MasterDuke joined
[02:05] *** AlexDani` joined
[02:09] *** lizmat left
[02:10] *** AlexDaniel left
[02:39] *** Kaypie left
[02:39] *** Kaypie joined
[02:42] *** leont left
[03:30] *** |Tux| left
[03:31] *** |Tux| joined
[05:59] *** AlexDani` is now known as AlexDaniel

[07:21] *** ufobat_ joined
[07:25] *** ufobat left
[08:00] *** lizmat joined
[08:27] *** patrickb joined
[08:57] <lizmat> Files=1266, Tests=88057, 383 wallclock secs (20.53 usr  5.98 sys + 2730.56 cusr 244.06 csys = 3001.13 CPU)

[11:02] *** leont joined
[11:09] <[Tux]> timing is slow today. maybe because I am working from home

[11:09] <AlexDaniel> m: say <foo>.Int

[11:09] <camelia> rakudo-moar c6053e6a5: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5foo' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[11:10] <AlexDaniel> hmm, why are we using ascii quotes in error messages?

[11:10] <AlexDaniel> even g++ seems to be happy to use ‘’

[11:11] <timotimo> because while you may often copy-paste stuff into perl6 code or the repl, you would more often coyp-paste error messages out of perl6 into something that doesn't "get it"

[11:11] <timotimo> (not actually the reason, just an idea)

[11:13] <AlexDaniel> yeah… I didn't even get your point, to be honest :)

[11:13] <timotimo> ha

[11:13] <AlexDaniel> note that there's ⏏ right next to '

[11:14] <[Tux]> Rakudo version 2018.12-272-gc6053e6a5 - MoarVM version 2018.12-45-ga9d02578a

[11:14] <[Tux]> csv-test-xs-20      0.433 -  0.451

[11:14] <[Tux]> csv-ip5xs           0.760 -  0.805

[11:14] <[Tux]> test-t --race       0.864 -  0.935

[11:14] <[Tux]> test-t              1.922 -  2.133

[11:14] <[Tux]> csv-ip5xs-20        6.602 -  7.191

[11:14] <[Tux]> test                7.353 -  7.829

[11:14] <[Tux]> test-t-20 --race   10.244 - 10.315

[11:14] <[Tux]> csv-parser         22.600 - 23.795

[11:15] <[Tux]> test-t-20          31.895 - 32.937

[11:17] <lizmat> AlexDaniel timotimo FWIW, I think those error messages are from a time when Perl 6 did not allow other quotes yet

[11:18] <timotimo> that's fair. if you want machine-readable errors, you'd go for JSON output anyway, right?

[11:18] <timotimo> does the json exception renderer also do compile-time exceptions?

[11:25] <lizmat> probably

[11:37] *** dct joined
[11:51] <lizmat> m: sub postfix:<.foo>(|) { say "bar" }; 42.foo    # wheee!

[11:51] <camelia> rakudo-moar c6053e6a5: OUTPUT: «No such method 'foo' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[11:51] <lizmat> huh?

[11:51] <lizmat> that works locally ?

[11:53] <lizmat> ah, the comment is disrupting

[11:53] <lizmat> m: sub postfix:<.foo>(|) { say "bar" }; 42.foo;    # wheee!

[11:53] <camelia> rakudo-moar c6053e6a5: OUTPUT: «bar␤»

[14:08] *** leont left
[15:55] *** Ven`` joined
[16:15] *** patrickb left
[16:35] *** dct left
[16:35] *** dct_ joined
[19:38] *** Ven`` left
[20:04] <masak> um. why is the comment disrupting?

[20:21] <gfldex> m: my @a = 1..3; while @a.shift -> $n { say $n }

[20:21] <camelia> rakudo-moar c6053e6a5: OUTPUT: «1␤2␤3␤»

[20:21] <gfldex> Is that ^^^ specced? If so it's an ENODOC.

[20:22] <timotimo> what about it is what you're asking for?

[20:22] <timotimo> that while passes the thing it checks to the block?

[20:23] <timotimo> m: my @a = 0..3; while @a.shift -> $n { say $n } # btw

[20:23] <camelia> rakudo-moar c6053e6a5: ( no output )

[20:35] <gfldex> We don't doc that while/until takes a pointy to alias (or replace) $_ .

[20:36] <timotimo> fair enough. hopefully we do doc the thing about if doing that

[20:38] *** j3nnn1 joined
[20:39] <gfldex> if and else are covered in the docs.

[20:39] <timotimo> with/without?

[20:39] <timotimo> i mean, all other things and such

[20:40] <gfldex> checking …

[20:40] <gfldex> with, orwith, without are missing -> too

[20:41] <timotimo> m: with Any -> $m { $m.say } orwith 1 -> $n { $n.say }

[20:41] <camelia> rakudo-moar c6053e6a5: OUTPUT: «1␤»

[20:45] <masak> m: given 42 -> $n { say $n } # by the way :)

[20:45] <camelia> rakudo-moar c6053e6a5: OUTPUT: «42␤»

[20:46] <gfldex> m: given 42 -> $n { dd $_, $n }

[20:46] <camelia> rakudo-moar c6053e6a5: OUTPUT: «Any $_ = Any␤42␤»

[20:46] * gfldex .oO( snap goes the trap )

[20:48] <gfldex> I would even consider given with a pointy warn-worthy.

[20:49] <b2gills> gfldex: `while … -> $n {…}` works for the same reason the following works `given … -> $n {…}` `if … -> $n {…}` `with … -> $n {…}` `whenever … -> $n {…}`

[20:49] <b2gills> In fact I think it works with all keywords of the form `keyword (CONDITION) {BLOCK}`

[20:50] <gfldex> ENODOC files as #2598

[20:53] *** ufobat_ left
[20:55] <masak> gfldex: why in the world would you want to warn on given with a pointy?

[20:55] <masak> do you detest every feature you don't have a use case for? ;)

[20:56] <masak> (off the top of my head, one possible use: parameter destructuring)

[20:57] <timotimo> i like given for introducing a limited scope for a variable, and i think it can sometimes read better than a regular assignment

[20:58] <masak> I'm pretty sure I've used it like that somewhere too, yes

[21:09] <gfldex> masak: I don't detest it's because I don't got a use for it. I can clearly see the use. But from the standpoint of a beginner it might be pretty confusion, given that given is advertised as being „Perl 6's topicalizing keyword“.

[21:10] <timotimo> but nobody except for perl5ers would know what a "topicalizer" is

[21:11] <gfldex> that is a different problem

[21:12] <timotimo> well, if they're already completely new to the concept, the docs could at that point just throw in "$_ by default" to clear everything up

[21:15] <masak> gfldex: sorry if I went off on the offensive on that one -- I think Perl 6 should stay out of the way of creative uses of features and their corner cases, especially if (a) they're consistent, and (b) they don't get anyone harmed

[21:16] <masak> I think `given` with a pointy is a great example of something that just worked. what's to say the beginner (or someone else) just decided to try it, see if it does what they suspect it would?

[21:16] <masak> s/just worked/just works/

[21:17] <gfldex> If you write code that might be true. If you change code that might lead to staring at the source for halve an hours without spotting where the Any comes from.

[21:18] <masak> I think a warning would be of negative use -- `given` with a pointy works just the way `for` with a pointy does, or for that matter a first-class block. all of these bind $_ if you don't specify `->`, and bind whatever you specify if you do

[21:18] <gfldex> I know what I'm talking about. I have done the staring thing way to often. :)

[21:20] <masak> I hear you, and I understand. I still don't think there's anything _a priori_ wrong about a `given` with a pointy

[21:20] <masak> we tend to give people enough rope to shoot themselves in the foot

[21:21] <masak> what's the difference between introducing a pointy on a `given`, and any other inconsistent change to one's source code that happens to introduce a bug?

[21:22] <masak> m: given "outer" { given "inner" -> $s { say $_ } }

[21:22] <camelia> rakudo-moar c6053e6a5: OUTPUT: «outer␤»

[21:22] <gfldex> lizmat: while stealing code I notices that Rakudo::Internals.FILETEST-* unbox a lot and are used pretty much all the time after boxing the $abspath.

[21:25] <timotimo> i wouldn't be surprised if Comma couldn't highlight a $_ that's not being set, but already used, at least for common cases

[21:25] <timotimo> like, you could totally have set-the-value $_ be a sub call with an "is rw" argument

[21:25] <gfldex> lizmat: I also learned that nqp is faster then threading (for traversing directory trees) what I shall blog about.

[21:47] *** robertle left
[22:13] *** dct_ left
[23:07] *** j3nnn1 left
[23:45] *** dct_ joined
[23:55] *** leont joined
