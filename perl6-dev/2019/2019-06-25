[00:09] *** lucasb left
[01:12] *** ggoebel left
[03:55] *** grayrider joined
[03:56] *** grayrider left
[04:47] *** ufobat left
[04:53] <lizmat> Files=1275, Tests=108166, 206 wallclock secs (26.60 usr  7.57 sys + 2883.92 cusr 281.38 csys = 3199.47 CPU)

[06:13] <[Tux]> Rakudo version 2019.03.1-660-g9b639961c - MoarVM version 2019.05-93-g80bc744fa

[06:13] <[Tux]> csv-test-xs-20      0.432 -  0.437

[06:13] <[Tux]> csv-ip5xs           0.692 -  0.713

[06:13] <[Tux]> test-t --race       0.849 -  0.884

[06:13] <[Tux]> test-t              1.831 -  1.871

[06:13] <[Tux]> csv-ip5xs-20        5.199 -  5.460

[06:13] <[Tux]> test                7.067 -  7.362

[06:13] <[Tux]> test-t-20 --race    9.844 -  9.997

[06:13] <[Tux]> csv-parser         23.605 - 23.775

[06:13] <[Tux]> test-t-20          29.356 - 30.959

[07:21] *** patrickb joined
[08:45] *** squashable6 left
[08:48] *** squashable6 joined
[08:48] *** ChanServ sets mode: +v squashable6

[10:39] *** gfldex joined
[10:47] <Geth> ¬¶ rakudo: taboege++ created pull request #3021: Warn when x..^* range is used as subscript

[10:47] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/3021

[12:14] *** ggoebel joined
[12:28] *** squashable6 left
[12:31] *** squashable6 joined
[12:52] *** squashable6 left
[12:55] *** squashable6 joined
[13:54] *** pamplemousse joined
[14:26] *** pamplemousse left
[14:26] *** pamplemousse joined
[14:37] <dogbert17> a bit OT but perhaps someone missed this news: https://www.raspberrypi.org/products/raspberry-pi-4-model-b/

[14:53] <[Coke]> ... and I bought one. :P

[14:56] *** lucasb joined
[14:59] <dogbert17> [Coke]: the 4 Gig one?

[15:44] *** pamplemousse left
[15:45] *** pamplemousse joined
[15:57] *** MasterDuke left
[16:05] <Geth> ¬¶ problem-solving: AlexDaniel assigned to jnthn Issue Ambiguity in slicing with Ranges / WhateverCodes https://github.com/perl6/problem-solving/issues/50

[16:19] *** patrickb left
[16:36] *** vrurg joined
[16:36] <[Coke]> got the 4g with a kit from cana.

[16:37] *** MasterDuke joined
[17:16] *** patrickb joined
[17:17] *** squashable6 left
[17:17] *** squashable6 joined
[17:45] *** AlexDaniel joined
[18:06] <AlexDaniel> releasable6: status

[18:06] <releasable6> AlexDaniel, Next release will happen when it's ready. 6 blockers. 262 out of 660 commits logged (‚ö† 1 warnings)

[18:06] <releasable6> AlexDaniel, Details: https://gist.github.com/62ed128cef3ca634bdfaa77dac6fd0dc

[18:13] *** patrickb left
[18:35] <dogbert17> AlexDaniel: how's the release work going?

[18:38] <Kaiepi> got a rudimentary implementation of wchar_t, wint_t, char16_t, and char32_t implementation working! üéâ (just on moarvm for the time being)

[18:39] <Kaiepi> this is a hell of a lot more work than i originally thought when i tried implementing it around a year ago

[18:40] <vrurg> .tell timotimo I remember about your request. If it's still actuall I could try looking into it. But cannot promise much as my laptop has been sent out for repair and might not be back until Friday.

[18:40] <yoleaux> vrurg: I'll pass your message to timotimo.

[18:40] <Kaiepi> for wide string support i'd probably need to create a wide string repr right?

[18:43] <Kaiepi> for nativecall i mean

[18:45] <timotimo> don't we already have support for that?

[18:45] <yoleaux> 18:40Z <vrurg> timotimo: I remember about your request. If it's still actuall I could try looking into it. But cannot promise much as my laptop has been sent out for repair and might not be back until Friday.

[18:45] <timotimo> strings are already turned into c-strings and back anyway when going through nativecall

[18:45] <timotimo> since nothing likes our internal representation of strings

[18:48] <Kaiepi> cstrs use char * on moar so no

[18:50] <Kaiepi> there isn't really a good way to handle them currently since the size and what sign wchar_t and wint_t are heavily dependent on the platform and char16_t and char32_t are always unsigned 16 and 32 bit ints, while uint16 and uint32 aren't necessarily

[18:50] <Kaiepi> also char16_t and char32_t are mangled differently iirc

[18:54] <timotimo> ugh

[18:55] <timotimo> but that sounds more like a different setting for CString rather than a whole new repr

[18:57] <Kaiepi> how would i set that up?

[19:01] <Kaiepi> also just to show how ridiculous wchar_t and wint_t are, this is what src/platform/wchar.h looks like atm http://fpaste.scsys.co.uk/585137

[19:02] <Kaiepi> on other backends it's way easier to implement

[19:02] <Kaiepi> though i can't actually implement it on the js backend without making changes to one of its dependencies

[19:03] <vrurg> timotimo: if you could remind me about details of your request? A ticket, perhaps?

[19:14] <AlexDaniel> dogbert17: slowly

[19:20] <AlexDaniel> lizmat: now I'm even more confused

[19:21] <AlexDaniel> lizmat: ‚Äú0..^* is NOT the same as ^*‚Äù yea but you'll get the same elements, right?

[19:21] <AlexDaniel> m: say (^10)[0..^*]

[19:21] <camelia> rakudo-moar 9b639961c: OUTPUT: ¬´(0 1 2 3 4 5 6 7 8 9)‚ê§¬ª

[19:21] <AlexDaniel> m: say (^10)[^*]

[19:21] <camelia> rakudo-moar 9b639961c: OUTPUT: ¬´(0 1 2 3 4 5 6 7 8 9)‚ê§¬ª

[19:22] <AlexDaniel> so how come 35b69f074 should be reverted if it made things more consistent

[19:24] <TreyHarris> Is there a way these days to do an incremental HTML build of perl6/doc? I had one mismatched pair of POD angle brackets, and I don't want it to rebuild everything

[19:25] <AlexDaniel> TreyHarris: maybe file a ticket?

[19:26] <TreyHarris> AlexDaniel: just searched and found one. It's closed, though; maybe it should stay open? https://github.com/perl6/doc/issues/2668

[19:27] <AlexDaniel> TreyHarris: done

[19:27] <AlexDaniel> Trey

[19:27] <TreyHarris> Hah

[19:27] <TreyHarris> AlexDaniel: we stepped on each other

[19:27] <AlexDaniel> TreyHarris: there seems to be a lot of progress on the doc build process (GSoC project), so I think that will be resolved soon-ish

[19:27] <TreyHarris> Cool.

[19:29] <TreyHarris> I introduced a site-breaking commit once a couple years ago because I thought it was tiny and mostly a copy-paste from another file and therefore safe, but I didn't realize the tag I copied started with guillemets, and I ended it with a >. Since then I've been hesitant to push without rebuilding, but it takes forever

[19:30] <dogbert17> AlexDaniel: made a comment on R#3015

[19:30] <synopsebot_> R#3015 [open]: https://github.com/rakudo/rakudo/issues/3015 [BLOCKER][regression] Some issue in LMDB module

[19:31] <AlexDaniel> dogbert17: doesn't it suggest that the module itself is in the wrong?

[19:55] <dogbert17> AlexDaniel: perhaps, it would be interesting to hear what timotimo thinks

[19:57] <timotimo> i'm sure you think that would be interesting now, but don't say i haven't warned you if it comes to pass!

[19:57] <timotimo> just kidding

[19:57] <timotimo> what's up?

[19:58] <dogbert17> timotimo: can you take a quick peek at the comments to R#3015

[19:58] <synopsebot_> R#3015 [open]: https://github.com/rakudo/rakudo/issues/3015 [BLOCKER][regression] Some issue in LMDB module

[20:00] <timotimo> should elems just return 0 for unconcrete objects?

[20:00] <timotimo> it feels a little more like that should be a high-level thing we'd do

[20:00] <lizmat> m: dd Mu.elems

[20:00] <camelia> rakudo-moar 9b639961c: OUTPUT: ¬´No such method 'elems' for invocant of type 'Mu'. Did you mean 'bless'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:00] <timotimo> i.e. implement a multi elems on CArray for CArray:U

[20:00] <timotimo> m: dd Any.elems

[20:00] <camelia> rakudo-moar 9b639961c: OUTPUT: ¬´1‚ê§¬ª

[20:00] <lizmat> m: dd Any.elems

[20:00] <camelia> rakudo-moar 9b639961c: OUTPUT: ¬´1‚ê§¬ª

[20:00] <timotimo> oh, that thing

[20:00] <timotimo> m: dd List.elems

[20:00] <lizmat> ah, yes...

[20:00] <camelia> rakudo-moar 9b639961c: OUTPUT: ¬´1‚ê§¬ª

[20:00] <timotimo> m: dd Array.elems

[20:00] <camelia> rakudo-moar 9b639961c: OUTPUT: ¬´1‚ê§¬ª

[20:01] <timotimo> um

[20:01] <timotimo> hold on

[20:01] <timotimo> elems on a CArray isn't sensible in all cases anyway

[20:01] <timotimo> only if it's managed

[20:02] <timotimo> so, did the test so far expect to get 0 back or something?

[20:03] <timotimo> calling elems on a CArray until that patch would have been reading garbage data

[20:03] <lizmat> m: sub a(Real() $a) { }; dd &a.signature   # looks like Real() is missing from the .perl of the signature

[20:03] <camelia> rakudo-moar 9b639961c: OUTPUT: ¬´:($a)‚ê§¬ª

[20:04] <timotimo> c: ca322cf^ use NativeCall; CArray[uint8].elems.say for ^100

[20:04] <committable6> timotimo, https://gist.github.com/386513710915de0ddb42706f2dd19def

[20:04] <timotimo> Failed to create directory '/home/bisectable/.perl6/short' with mode '0o777': Failed to mkdir: Read-only file system

[20:04] <timotimo> ha

[20:06] <timotimo> so anyway. until that patch, it seems like elems on an undefined array gave 0

[20:07] <timotimo> which would also be changed by making it match what Array.elems does with an undefined object

[20:12] <timotimo> i scared everybody off :(

[20:13] <ugexe> i wonder why it fails to create that directory when you aren't doing anything that should require new precompilation

[20:14] <ugexe> it must be doing a -I lib or something

[20:14] <timotimo> pretty possible; that should be find-out-able

[20:14] <timotimo> c: ca322cf^ use nqp; say nqp::clargs

[20:14] <committable6> timotimo, ¬¶ca322cf^: ¬´===SORRY!===‚ê§No registered operation handler for 'clargs'‚ê§ ¬´exit code = 1¬ª¬ª

[20:14] <ugexe> even still i'd expect it to point to ./precomp, not ~/.perl6

[20:14] <timotimo> what's that called again ...

[20:15] <timotimo> oh damn, it's not mapped, it's only directly emitted as a QAST::VM node in the code

[20:24] <dogbert17> timotimo: I'm watching a film on TV only showing up during commercials :)

[20:26] <dogbert17> trying your snipper above on 2018.12 returns a lot of '65207712'

[20:26] <dogbert17> *snippet

[20:27] <dogbert17> and it changes with each run

[21:04] <lizmat> m: my @a = ^10; dd @a["a"..*]

[21:04] <camelia> rakudo-moar 9b639961c: OUTPUT: ¬´()‚ê§¬ª

[21:04] <lizmat> hmmm...

[21:18] <timotimo> yeah, it's reading unrelated memory

[21:20] <dogbert17> I guess that means your fix is good :)

[21:21] <dogbert17> btw, how are you going to survive tomorrow, some parts of Europe will be getting 35 degrees

[21:23] <tobs> m: my @a = ^10; dd @a["a"..Inf]

[21:23] <camelia> rakudo-moar 9b639961c: OUTPUT: ¬´()‚ê§¬ª

[21:24] <tobs> hah, it hangs here

[21:24] <tobs> as opposed to the one with ..*

[21:25] *** squashable6 left
[21:25] *** squashable6 joined
[21:25] *** ChanServ sets mode: +v squashable6

[21:26] *** pamplemousse left
[21:36] <lizmat> dogbert17: we had 35.9 here today

[21:37] <lizmat> tomorrow only 32  :-)

[21:39] <jnthn> 36C forecast here tomorrow :(

[21:39] <jnthn> "only" 32 here today and I could barely think

[21:48] *** dogbert11 joined
[21:49] *** krunen left
[21:50] *** krunen joined
[21:50] *** dogbert17 left
[22:17] *** tobs left
[22:35] *** tobs joined
[22:44] <AlexDaniel> dogbert11: it's pretty cold here, so I won't mind if some of that heat reaches us‚Ä¶

[22:53] *** pamplemousse joined
[22:55] *** lucasb left
[23:13] *** squashable6 left
[23:18] *** squashable6 joined
[23:18] *** ChanServ sets mode: +v squashable6

[23:40] *** pamplemousse left
[23:49] <vrurg> jnthn: are still available?

[23:49] <vrurg> *are you

[23:51] <jnthn> vrurg: Sleeping soon, but around for another 10 mins

[23:51] <jnthn> Got any easy questions? :-)

[23:51] <vrurg> One question. Is it supposed behavior that CORE.<letter> cannot add new symbols and only overrides existing ones?

[23:52] <vrurg> I mean, if I add a sub in CORE.d/CORE.e ‚Äì it's not available compile time.

[23:52] <jnthn> No, it should be able to add new subs/types also

[23:53] <jnthn> I thought CORE.d sort-of already did that, in that it replaces `await`'s proto and has a completely new candidate set

[23:53] <vrurg> Ok, it's a bug then. Would try to get some help tomorrow, perhaps.

[23:53] <jnthn> I'm not sure why we'd not be able to resolve new ones

[23:53] <jnthn> What's the symptom?

[23:54] <vrurg> Multi-dispatches are extended with new candidates, it's ok. 

[23:54] <jnthn> Yes, but I believe CORE.d completely replaces the candidates.

[23:54] <vrurg> Added, say, sub for-e-only. Dumping CORE:: reveals the symbol is not there. Surely, referring it in the code ends up with compiler error.

[23:54] <jnthn> Yes, new proto: https://github.com/rakudo/rakudo/blob/master/src/core.d/await.pm6#L11

[23:55] <vrurg> Replacing seemingly works too.

[23:55] <vrurg> It's only new ones which are ignored.

[23:55] <jnthn> Hm, that sounds like it's - at some point - looking in the wrong place

[23:55] <jnthn> I wonder if CORE:: is somehow resolving to the outermost setting

[23:56] <vrurg> And I'm not touching a subject of replacing a role. Not before your bedtime. :)

[23:56] <jnthn> Well, you can, but none of the types in the outer setting are going to do it ;)

[23:56] <vrurg> I'll try to do as much diagnosis as possible. Though have like 40-45 minutes left for this.

[23:57] <vrurg> Yeah, I guess so. It's about changing QuantHash and looks like all consumers are to be added to CORE.e too. But, again, that's another matter.

[23:57] <jnthn> Occurs to me that actually SETTING and CORE are kind of tricky, because when we have 6.d/6.e going on, they actually need to represent the symbols from a range of nested lexical scopes, perhaps.

[23:58] <jnthn> And I bet that isn't happening.

[23:58] <jnthn> But that introspection issue aside, I'd still expect the new sub to be "normally" visible

[23:58] <jnthn> Maybe the same problem does crop up elsewhere, though

[23:59] <vrurg> Ok, leave it for now. All I needed to make sure is that it's not expected. Now, it's a good excersise to dig into that code too. :) Thanks and g'night!

