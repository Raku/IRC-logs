[00:01] <gfldex> m: my @a; @a.push: Slip;

[00:01] <camelia> rakudo-moar f010ef57a: OUTPUT: ¬´Invocant of method 'iterator' must be an object instance of type 'List', not a type object of type 'Slip'.  Did you forget a '.new'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[00:01] <gfldex> m: my @a; @a[$++] := Slip;

[00:01] <camelia> rakudo-moar f010ef57a: ( no output )

[00:01] <gfldex> do we have a method that does a BIND-POS the pushy way?

[00:02] <gfldex> working with CORE::.values is really quite difficult :)

[00:03] <gfldex> however, the whole thing turns out to be a good example why we need :=

[00:14] *** dct left
[01:01] <japhb> m: my $counter = 0; $counter++ for CORE::.pairs; say [$counter, CORE::.values.elems];

[01:01] <camelia> rakudo-moar f010ef57a: OUTPUT: ¬´[758 758]‚ê§¬ª

[01:01] <japhb> gfldex: Why not just iterate the .pairs instead?

[01:03] <timotimo> or .keys

[01:18] *** lizmat left
[01:34] *** Ven`` joined
[01:35] *** p6bannerbot sets mode: +v Ven``

[02:23] *** Ven`` left
[02:58] *** Kaiepi left
[06:03] *** ZzZombo joined
[06:03] *** p6bannerbot sets mode: +v ZzZombo

[08:15] *** robertle_ joined
[08:16] *** p6bannerbot sets mode: +v robertle_

[08:50] *** patrickb joined
[08:51] *** p6bannerbot sets mode: +v patrickb

[09:26] *** ZzZombo left
[09:43] <AlexDaniel> weekly: Kaiepi is the winner of the last squashathon

[09:43] <notable6> AlexDaniel, Noted!

[09:51] <AlexDaniel> .tell jmerelo no, I just looked at the numbers and wrote the summary :)

[09:51] <yoleaux> AlexDaniel: I'll pass your message to jmerelo.

[10:16] *** Kaiepi joined
[10:17] *** p6bannerbot sets mode: +v Kaiepi

[10:21] *** lizmat joined
[10:21] *** p6bannerbot sets mode: +v lizmat

[10:21] <lizmat> Files=1264, Tests=87970, 382 wallclock secs (19.95 usr  6.28 sys + 2689.03 cusr 241.44 csys = 2956.70 CPU)

[10:34] *** Kaiepi left
[10:37] *** Kaiepi joined
[10:38] *** p6bannerbot sets mode: +v Kaiepi

[10:46] <|Tux|> Rakudo version 2018.12-173-gf010ef57a - MoarVM version 2018.12-19-gec8a240e3

[10:46] <|Tux|> csv-test-xs-20      0.438 -  0.446

[10:46] <|Tux|> test-t --race       0.817 -  0.831

[10:46] <|Tux|> csv-ip5xs           0.928 -  0.929

[10:46] <|Tux|> test-t              1.804 -  1.811

[10:46] <|Tux|> test                6.978 -  7.267

[10:46] <|Tux|> csv-ip5xs-20        7.164 -  7.238

[10:47] <|Tux|> test-t-20 --race    9.663 -  9.704

[10:47] <|Tux|> csv-parser         21.861 - 22.280

[10:47] <|Tux|> test-t-20          30.013 - 30.324

[11:58] <lizmat> And yet another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2019/01/08/2019-01-wishes-for-2019/

[12:05] *** yoleaux joined
[12:06] *** p6bannerbot sets mode: +v yoleaux

[12:06] *** AlexDaniel left
[13:08] *** lucasb joined
[13:08] *** p6bannerbot sets mode: +v lucasb

[13:08] *** AlexDaniel joined
[13:08] *** p6bannerbot sets mode: +v AlexDaniel

[13:57] <Geth> ¬¶ rakudo: 225d2f9669 | (Elizabeth Mattijsen)++ | 2 files

[13:57] <Geth> ¬¶ rakudo: Streamline Map/Hash.gist a bit more

[13:57] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/225d2f9669

[14:05] *** AlexDaniel left
[14:29] *** lizmat left
[14:36] <Geth> ¬¶ rakudo: 6b078a052a | (Jonathan Worthington)++ | lib/NativeCall.pm6

[14:36] <Geth> ¬¶ rakudo: Reduce per-invocation NativeCall overhead

[14:36] <Geth> ¬¶ rakudo: 

[14:36] <Geth> ¬¶ rakudo: By lifting the most common cases out, avoiding calls and a lock

[14:36] <Geth> ¬¶ rakudo: acquisition, we can make quite some savings on each native call that

[14:36] <Geth> ¬¶ rakudo: we do. On a SQLite/DBIish benchmark, which is extremely native call

[14:36] <Geth> ¬¶ rakudo: heavy, this is worth over 10%.

[14:36] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/6b078a052a

[14:37] <jnthn> That will also help multi-threaded apps doing lots of NativeCall, since now they won't content to acquire the setup lock

[14:37] <jnthn> *contend

[15:17] <Geth> ¬¶ rakudo/more-block-flattening: 7fb098d7d1 | (Jonathan Worthington)++ | src/Perl6/World.nqp

[15:17] <Geth> ¬¶ rakudo/more-block-flattening: Fix leakage of lowered/flattened lexicals

[15:17] <Geth> ¬¶ rakudo/more-block-flattening: 

[15:17] <Geth> ¬¶ rakudo/more-block-flattening: This can only happen because things like throws-like are naughty with

[15:17] <Geth> ¬¶ rakudo/more-block-flattening: contexts; an actual EVAL would never really leak the context. This fixes

[15:17] <Geth> ¬¶ rakudo/more-block-flattening: a spectest regression thanks to the more aggressive block flattening.

[15:17] <Geth> ¬¶ rakudo/more-block-flattening: review: https://github.com/rakudo/rakudo/commit/7fb098d7d1

[15:17] <jnthn> That gets that branch passing spectest

[15:23] <Geth> ¬¶ rakudo/master: 6 commits pushed by (Jonathan Worthington)++

[15:23] <Geth> ¬¶ rakudo/master: 19e4ace62d | Move optimization level check a level up

[15:23] <Geth> ¬¶ rakudo/master: fcfd51beba | Account for the nqp::handle body getting thunked

[15:23] <Geth> ¬¶ rakudo/master: 541a4f1628 | More aggressive scope flattening

[15:23] <Geth> ¬¶ rakudo/master: d2df5b805d | Correct tracking of vars used in `handle` handler

[15:23] <Geth> ¬¶ rakudo/master: 7fb098d7d1 | Fix leakage of lowered/flattened lexicals

[15:23] <Geth> ¬¶ rakudo/master: 4d7cdc0f41 | Merge branch 'more-block-flattening'

[15:23] <Geth> ¬¶ rakudo/master: review: https://github.com/rakudo/rakudo/compare/6b078a052a7c...4d7cdc0f415a

[15:25] <dogbert2_> cool, a merge

[15:26] <jnthn> The 541a4f1 is the interesting commit in there, the rest is all just making it possible :)

[15:26] <jnthn> This lets us do more lexical -> local lowering

[15:26] <jnthn> As well as flattening away more unrequired scopes

[15:27] <jnthn> Which means less Code allocations

[15:27] <dogbert2_> what kind of gains might we be talking about or are they still to come with pea?

[15:28] <jnthn> In the DBIish benchmark I was playing with earlier, it seemed to give a few percent.

[15:28] <jnthn> But yes, this work is in part happening now in order to give pea more to work with :)

[15:30] <dogbert2_> does that mean you're going to work on pea next or are there more preparatory steps to complete first?

[15:30] <jnthn> I'm thinking about exactly that :)

[15:31] <dogbert2_> :)

[15:32] <jnthn> Actually the next logical step on the flattening is to make it so we can flatten away one-arg blocks, which'd mean that `with $foo { .bar }` would be able to flatten in the inner scope, which could be possible now that $_ is lowered in the inner one

[15:32] <jnthn> Which'll make every single `with` cheaper

[15:33] <dogbert2_> is that a difficult fix you think?

[15:33] <jnthn> And then the same can apply to other constructs

[15:33] <jnthn> It's...probably not quite trivial, but not awful either

[15:33] <jnthn> Thing is

[15:34] <jnthn> It's logical to make it also apply to for @xs -> $x { } too

[15:34] <jnthn> But PEA can't yet handle loops, and that's some way down the line :)

[15:34] <jnthn> (That *is* hard)

[15:35] <jnthn> So if I do that `for` opt first, then early PEA is less useful

[15:35] <jnthn> So yeah, probably I get PEA a bit further along, then make it loop-aware, and then come back and do the next round of flattening, when doing it won't hurt the pea.

[15:36] <jnthn> releasable6: status

[15:36] <releasable6> jnthn, Next release in ‚âà11 days and ‚âà3 hours. 3 blockers. 0 out of 181 commits logged

[15:36] <releasable6> jnthn, Details: https://gist.github.com/d779f54b639cf00e1bd5d8f131f86c9b

[15:36] <dogbert2_> plenty of time until next release :)

[15:37] <jnthn> Well, I think in the best case I'll have an initial pea branch ready for merge just after the next release...don't want to risk it earlier than that.

[15:39] <dogbert2_> yeah, that's probably the way to go

[15:39] <patrickb> I'm successfully compiling a moar executable during the rakudo build. Now on to turning that into a perl6 runner.

[15:47] <patrickb> Perl6 currently doesn't understand the --debug-port option. It would make sense to build support for that into a runner in C, right?

[15:48] <patrickb> Are there any other options that one should consider mapping through from perl6 land to moar VM?

[16:17] <jnthn> patrickb: --debug-suspend also I think

[16:38] <timotimo> oh, yes, the debug server thing

[16:42] <timotimo> i never actually got around to building a proper runner maker script

[16:43] <patrickb> timotimo: Why a separate runner script instead of just forwarding options?

[16:51] *** robertle_ left
[17:00] <timotimo> because my shell scripting skills are ... subpar to say the least :)

[17:04] <patrickb> Ah, then I'll try to go that route. :-)

[17:08] *** AlexDaniel joined
[17:08] *** p6bannerbot sets mode: +v AlexDaniel

[17:28] *** lizmat joined
[17:28] *** p6bannerbot sets mode: +v lizmat

[18:13] *** ExtraCrispy left
[18:16] *** Kaiepi left
[18:19] <AlexDaniel> releasable6: status

[18:19] <releasable6> AlexDaniel, Next release in ‚âà11 days and ‚âà0 hours. 3 blockers. 0 out of 181 commits logged

[18:19] <releasable6> AlexDaniel, Details: https://gist.github.com/3219a6e891b46c91910f509464f939fa

[18:22] *** Kaiepi joined
[18:22] *** p6bannerbot sets mode: +v Kaiepi

[18:37] *** lucasb left
[19:30] *** [TuxCM] joined
[19:30] *** p6bannerbot sets mode: +v [TuxCM]

[19:41] *** [TuxCM] left
[19:46] *** [TuxCM] joined
[19:47] *** p6bannerbot sets mode: +v [TuxCM]

[20:01] *** Tux__ joined
[20:01] *** |Tux| left
[20:01] *** p6bannerbot sets mode: +v Tux__

[20:44] *** [TuxCM] left
[20:46] *** [TuxCM] joined
[20:47] *** p6bannerbot sets mode: +v [TuxCM]

[21:17] *** [TuxCM] left
[21:18] *** patrickb left
[21:29] *** Kaiepi left
[21:32] *** lizmat left
[21:53] *** Kaiepi joined
[21:54] *** p6bannerbot sets mode: +v Kaiepi

[22:09] *** Kaypie joined
[22:09] *** Kaiepi left
[22:10] *** p6bannerbot sets mode: +v Kaypie

[23:03] *** Ven`` joined
[23:04] *** p6bannerbot sets mode: +v Ven``

