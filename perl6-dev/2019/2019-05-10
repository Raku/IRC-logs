[00:22] <ugexe> lizmat: fwiw that WHICH thing goes back to pre-6c, before we had a repo chain. So I‚Äôm not sure caching in this way makes sense 

[00:23] <ugexe> because having identical repos should not have identical next-repo 

[00:25] <ugexe> caching makes sense if we have no repo-chain, e.g. the best match from ALL repos is chosen when loading, not the best match from the FIRST repo containing a match 

[02:50] <ugexe> the one thing i've felt CUR::Locally is mean to do is normalize file paths (make them absolute + cleanup stuff so ../foo../ and ../ are treated as the same repo)

[02:50] <ugexe> https://github.com/rakudo/rakudo/blob/7a3f468d2c481011c73345f77785cb249616f86a/src/core/CompUnit/RepositoryRegistry.pm6#L34

[02:51] <ugexe> that $class.?absolutify is from pre 6.c as well, but it seems like the idea was to allow classes to provide the api for normalizing the path spec

[02:51] <ugexe> note nothing uses or has *ever* had a method absolutify

[02:53] <ugexe> see the notes from lizmat here: https://github.com/rakudo/rakudo/pull/468

[04:01] *** elcaro joined
[05:03] *** vrurg left
[06:49] *** robertle joined
[07:10] *** patrickb joined
[08:15] *** [TuxCM] joined
[09:13] <[TuxCM]> Rakudo version 2019.03.1-310-g3c5a53229 - MoarVM version 2019.05-3-gf3aeae67c

[09:13] <[TuxCM]> csv-test-xs-20      0.428 -  0.434

[09:13] <[TuxCM]> csv-ip5xs           0.721 -  0.744

[09:13] <[TuxCM]> test-t --race       0.802 -  0.805

[09:13] <[TuxCM]> test-t              1.660 -  1.774

[09:13] <[TuxCM]> csv-ip5xs-20        6.004 -  6.011

[09:13] <[TuxCM]> test                6.989 -  7.445

[09:13] <[TuxCM]> test-t-20 --race    9.033 -  9.129

[09:13] <[TuxCM]> csv-parser         22.373 - 23.015

[09:13] <[TuxCM]> test-t-20          27.935 - 28.602

[09:42] <lizmat> Files=1262, Tests=107940, 410 wallclock secs (30.15 usr  7.17 sys + 2914.55 cusr 255.38 csys = 3207.25 CPU)

[11:21] *** Guest55475 left
[11:31] <timotimo> m: $_ = 128; with Str { say "str is defined" } else { say "str is not defined. dollar underscore is now"; say $_.perl; }

[11:31] <camelia> rakudo-moar 3c5a53229: OUTPUT: ¬´str is not defined. dollar underscore is now‚ê§Str‚ê§¬ª

[11:32] <timotimo> ^- should this be the case? that the $_ in the else takes the value of $_ inside the with block?

[11:37] *** [TuxCM] left
[12:11] <jnthn> timotimo: Yes, that's an intended behavior

[12:11] <jnthn> Or at least, I'm pretty sure TimToady++ made it that way on purpose

[12:12] <timotimo> OK!

[12:13] <timotimo> i guess i can see how it makes sense to have it, if the undefined value can have different types, or interesting values i guess?

[12:19] <jnthn> Especially if it's a Failure 

[12:26] <timotimo> ah, indeed

[12:39] *** lucasb joined
[13:24] *** vrurg joined
[14:33] <nine> Looks like it would actually have been a good idea for me to document how certain parts of Inline::Perl5 really work. Because....wow, this stuff is advanced :D

[15:01] <TimToady> timotimo: yes, one of our explicit design goals was to allow for interesting values of both failure and success

[15:02] <timotimo> i have very personal reasons to find that very appealing :P :P

[15:02] * TimToady succeeds in failing to understand :)

[15:04] * timotimo fails to succeed at the humor

[15:05] <timotimo> i deprecated self just for this humor and it wasn't worth Any!

[15:05] <jnthn> Clearly, a joke that's only funny once is self-deprecating humor...

[15:06] <timotimo> i'd call that one idempotent, because no matter how often i think of it, i'll always be able to laugh

[15:13] *** [TuxCM] joined
[15:24] *** patrickb left
[15:42] *** robertle left
[16:03] *** [TuxCM] left
[16:44] *** robertle joined
[17:17] *** ufobat joined
[17:32] *** patrickb joined
[18:22] <Geth_> ¬¶ rakudo/master: 4 commits pushed by skids++, (Patrick B√∂ker)++, (Elizabeth Mattijsen)++

[18:22] <Geth_> ¬¶ rakudo/master: 76e5ee1b39 | Add some missing commas discoverd while hacking on colon lists

[18:22] <Geth_> ¬¶ rakudo/master: 91359141fb | Re-implement colon list processing.

[18:22] <Geth_> ¬¶ rakudo/master: 79a1d22c05 | Merge branch 'master' into colon_lists

[18:22] <Geth_> ¬¶ rakudo/master: 2ff4a88b5b | Merge pull request #1858 from skids/colon_lists

[18:22] <Geth_> ¬¶ rakudo/master: review: https://github.com/rakudo/rakudo/compare/3c5a5322982c...2ff4a88b5b00

[18:27] *** skids joined
[18:27] * skids crosses fingers for limited ecosystem fallout :-)

[18:29] <patrickb> skids, kawaii: Do you think it makes sense to make the release to be done this weekend to be based on the commit before this merge to just give it a little bit more time to be tested out?

[18:30] <patrickb> i.e. create a release-2019.05 branch and base it on the commit before the colon_list merge.

[18:32] <lizmat> hmmm... /me assumed a release branch was already made  :-(

[18:33] <skids> Makes sense to me.

[18:34] <lizmat> afaik there is no R* release planned based on the 2019.05 release, is there ?

[18:36] *** brrt joined
[18:38] <patrickb> lizmat: That's not really a problem, the release branch can just be based on some older commit. I'd say the thing a release branch mostly prevents the situation where people stop committing stuff in fear of breaking things.

[18:39] <lizmat> indeed  :-)

[18:42] <skids> I'm pretty amazed that PR survived nearly a year without conflicts.

[18:42] <lizmat> skids: that just shows you dare to tread where few others do  :-)

[18:43] *** ufobat left
[18:43] <Geth_> ¬¶ rakudo: 1db7e4b1ff | (Elizabeth Mattijsen)++ | 2 files

[18:43] <Geth_> ¬¶ rakudo: Remove some superstitious parentheses

[18:43] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/1db7e4b1ff

[18:45] <patrickb> skids: Could you have a look at https://github.com/rakudo/rakudo/pull/1170 ? I think it might be easy for you to say whether that other commit I referenced there actually fixes the bug or just hides/partially fixes it.

[18:46] <Geth_> ¬¶ roast: 45fb3ccdb9 | (Elizabeth Mattijsen)++ | integration/advent2013-day10.t

[18:46] <Geth_> ¬¶ roast: Unfudge now passing test, skids++

[18:46] <Geth_> ¬¶ roast: review: https://github.com/perl6/roast/commit/45fb3ccdb9

[19:05] <vrurg> Any news about the release? Is it still planned for May or postponed till June?

[19:07] <Geth_> ¬¶ rakudo: e9bbefd3c3 | (Elizabeth Mattijsen)++ | 2 files

[19:07] <Geth_> ¬¶ rakudo: Allow an IO::Path for CUR::FileSystem

[19:07] <Geth_> ¬¶ rakudo: 

[19:07] <Geth_> ¬¶ rakudo: - fixes #2879

[19:07] <Geth_> ¬¶ rakudo: - moved the $!lock attribute from CUR::Locally to CUR::Installation

[19:07] <Geth_> ¬¶ rakudo:   - as it is only needed there

[19:07] <Geth_> ¬¶ rakudo: - added $!abspath attribute to CUR::Locally

[19:07] <Geth_> ¬¶ rakudo:   - as this appears to be really needed for all classes consuming CUR::Locally

[19:07] <Geth_> ¬¶ rakudo:   - and it is always calculated, so why not keep it then

[19:07] <Geth_> ¬¶ rakudo: - move cache to role lexical, lose the state (potential race condition)

[19:07] <Geth_> ¬¶ rakudo:   - also add a lock so that all access/changes are done by a single thread

[19:07] <Geth_> ¬¶ rakudo: - make $!WHICH a ValueObjAt, indicating a CUR::Locally is a value type

[19:07] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/e9bbefd3c3

[19:08] <nine> vrurg: AFAIK this weekend

[19:08] <lizmat> vrurg: kawaii said he most likely had time for it this weekend, so I hope to be able to report the release in the next P6W

[19:10] <vrurg> Thanks! That's crazy, but I'm hit by #2166 again. Have fix for it, but it depends on #2816 which depends on release... 

[19:10] * vrurg is in despair...

[19:11] <nine> So...why don't we switch to release branches as MoarVM already uses?

[19:12] <patrickb> vrurg: My plan to get p6 with spaces on windows to work depends on #2816 as well, so, you're not the only one waiting ;-)

[19:13] <vrurg> patrickb: ok, it's easier to wait together. ;)

[19:14] <vrurg> nine: that'd be the best, I think. 

[19:15] <vrurg> But it suggests less frequent release cycle. Which we tend to fall into anyway.

[19:16] <nine> Why does it suggest that?

[19:17] <skids> patrickb: I'll take a look.

[19:18] <lizmat> vrurg: is #2816 still a "proposal for review" or is it ready as far as you are concernned ?

[19:18] <vrurg> nine: Because to me it comes with different support model where releases are incorporating critical fixes over some period of time.

[19:18] <vrurg> lizmat: it is ready for as much as I was able to test it on macOS, Linux, and Windows. 

[19:19] <nine> Not necessarily. That's of course possible when you have the branch. But you could do that just as well by branching after the fact.

[19:21] <vrurg> nine: Yes, but monthly cicle means too many releases and loads of work to maintain them. Plus we have user expectations. I mean, it is not mandatory, but very much expected scenario.

[19:22] <vrurg> Either way, branching for releases is what I'd be happy to see as I'm living on master branch for some time now anyway.

[19:22] <lizmat> vrurg: PR #2816 doesn't work for me, output pasted

[19:23] <timotimo> R#2816

[19:23] <vrurg> lizmat: thanks! I knew something would be missing. I can't test all possible use cases.

[19:24] <timotimo> oh, we don't have a synopsebot at the moment?

[19:29] <vrurg> nine: BTW, I played a bit with make.nqp. It needed some fixing with regard to handling malformed Makefiles. But more important, there are no target variables like $@, $<.

[19:30] <vrurg> lizmat: fixed, you can try now.

[19:32] <patrickb> I think 3c5a5322982c2fe6bb5cc87934b9b419fc81d591 might be a good commit for the 2019.05 release.

[19:35] <nine> vrurg: do we use those?

[19:35] <lizmat> vrurg: will do, in about 15 mins

[19:35] <vrurg> nine: That's why I mention it.

[19:36] <nine> Oh, apparently we now do

[19:36] <vrurg> nine: no rush. I would commmit it to my branch and get back to this when merged.

[19:37] * vrurg wouldn't do any more sharp movements.

[19:37] <nine> Looks like $@ is used in rakudo. I find $< only in MoarVM which needs a bit more anyway

[19:40] <vrurg> nine: I wasn't sure which one is needed. 

[19:41] <vrurg> BTW, I have doubts about make.nqp not having problems with spaces in batch names. You call cmd.exe with /c which might imply same rules about quoting.

[19:43] <nine> Well what I meant when suggesting make.nqp was not as much that it already supports spaces in paths but that it should be vastly easier to fix make.nqp than to work around nmake

[19:44] <nine> Ok $@ is just the name of the target? That should be easy to implement :)

[19:47] <Geth_> ¬¶ rakudo: b2e72d6d74 | (Elizabeth Mattijsen)++ | src/core/CompUnit/Repository/Locally.pm6

[19:47] <Geth_> ¬¶ rakudo: IO::Path has .absolute, not .abspath

[19:47] <Geth_> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/b2e72d6d74

[19:48] <vrurg> nine: [email@hidden.address] has it with my fixes.

[19:48] <vrurg> Perhaps it would make sense to make this repo its home.

[19:48] <patrickb> I start loosing faith in cmd being usable for any more complex calling scenarios. I'm seriously pondering replacing the Windows build perl6 runners with binaries as well, just to get rid of bat.

[19:50] <vrurg> patrickb: that's about what I was thinking about too last week. :)

[19:51] * vrurg would be gone for ~1hr

[19:52] <vrurg> Any additional testing of #2816 is very much welcome, BTW...

[20:13] *** brrt left
[20:15] <Geth_> ¬¶ roast: 56dd56ad41 | (Elizabeth Mattijsen)++ | S02-literals/adverbs.t

[20:15] <Geth_> ¬¶ roast: Add test for R #2863

[20:15] <Geth_> ¬¶ roast: review: https://github.com/perl6/roast/commit/56dd56ad41

[20:25] <skids> Can the evalbots eval against a PR?

[20:34] <skids> commit: b50aa51e0 role FFFF { method gah {...} }; enum f does FFFF <Fee Fie Foo Fum>;

[20:34] <committable6> skids, ¬¶b50aa51: ¬´04===SORRY!04=== Error while compiling /tmp/WarfwQYRkQ‚ê§Method 'gah' must be implemented by f because it is required by roles: FFFF.‚ê§at /tmp/WarfwQYRkQ:1‚ê§ ¬´exit code = 1¬ª¬ª

[20:34] <skids> commit: fd5d5bdfb role FFFF { method gah {...} }; enum f does FFFF <Fee Fie Foo Fum>;

[20:34] <committable6> skids, ¬¶fd5d5bd: ¬´¬ª

[20:35] <skids> patrickb: ^^ one problem with that commit.  There might be more, I'll have to dig in deeper than I did before to figure it out.

[20:36] <skids> But I don't know if my PR did anything about the "handles" issue.

[21:14] *** skids left
[21:33] *** DrForr joined
[22:41] *** patrickb left
