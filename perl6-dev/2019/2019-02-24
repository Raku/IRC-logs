[00:12] *** [Tux] joined
[02:29] *** grayrider joined
[02:44] *** grayrider left
[07:10] <samcv> releasable6, status

[07:10] <releasable6> samcv, Next release will happen when it's ready. 3 blockers. 262 out of 312 commits logged

[07:10] <releasable6> samcv, Details: https://gist.github.com/d6b7e07a17ec4536f33f91047febb7d8

[07:10] <samcv> sounds good

[07:36] <lizmat> Files=1267, Tests=88064, 402 wallclock secs (20.75 usr  6.30 sys + 2915.36 cusr 224.46 csys = 3166.87 CPU)

[07:59] <Geth> ¦ rakudo: 616b757a46 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm6

[07:59] <Geth> ¦ rakudo: Make sure hash slice auto-vivifies using infix metaop

[07:59] <Geth> ¦ rakudo: 

[07:59] <Geth> ¦ rakudo: Fixes R#2718

[07:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/616b757a46

[07:59] <synopsebot> R#2718 [open]: https://github.com/rakudo/rakudo/issues/2718 [regression] Assigning to Hash slice with »=» no longer auto-vivifies the Hash

[07:59] <Geth> ¦ roast: a3b365fcda | (Elizabeth Mattijsen)++ | S13-overloading/metaoperators.t

[07:59] <Geth> ¦ roast: Add test for R#2718

[07:59] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a3b365fcda

[10:04] *** dct joined
[10:09] *** dct left
[13:03] <[Tux]> Rakudo version 2018.12-313-g616b757a4 - MoarVM version 2018.12-114-g7ca628263

[13:03] <[Tux]> csv-test-xs-20      0.436 -  0.436

[13:03] <[Tux]> csv-ip5xs           0.739 -  0.763

[13:03] <[Tux]> test-t --race       0.837 -  0.863

[13:03] <[Tux]> test-t              1.827 -  1.923

[13:03] <[Tux]> csv-ip5xs-20        6.150 -  6.155

[13:03] <[Tux]> test                7.182 -  7.722

[13:03] <[Tux]> test-t-20 --race   10.066 - 10.198

[13:03] <[Tux]> csv-parser         21.457 - 21.613

[13:03] <[Tux]> test-t-20          30.729 - 31.206

[13:12] *** lucasb joined
[15:05] *** gfldex_ is now known as gfldex

[16:29] <AlexDaniel> samcv: ok, running Blin for the last time (hopefully)

[16:57] <MasterDuke> AlexDaniel: how long does a full Blin run take?

[16:57] <AlexDaniel> MasterDuke: I think about an hour

[16:57] <AlexDaniel> ± something

[17:00] <AlexDaniel> some luck involved also :) If it starts bisecting the last tested module then it might take some extra time doing just that, even though everything else is finished

[17:02] <AlexDaniel> I think you can shave off a few minutes if you reorder modules taking into account the time it took to install them during the last run

[17:02] <AlexDaniel> or, well, just stop rakudo development so that there's nothing to bisect xD

[17:04] <MasterDuke> that's not too bad at all

[17:04] <AlexDaniel> I'm not sure…

[17:04] <AlexDaniel> the ecosystem is growing, so I wouldn't be surprised if we somewhat soon get like 10x the modules we have now

[17:05] <AlexDaniel> that'd mean you either wait more than 10 hours or you create a machine with 240 cores xD

[17:06] <AlexDaniel> although… if you make zef faster, then it can get much faster

[17:06] <MasterDuke> or just divide the list and run on 10 machines?

[17:06] <AlexDaniel> yes

[17:06] <AlexDaniel> what's the progress on getting JSON::Fast into rakudo, btw?

[17:06] <AlexDaniel> or, more precisely, replacing the built-in internal parser with code from JSON::Fast

[17:08] <AlexDaniel> though currently we only get around 300 new modules per year or so?

[17:09] <MasterDuke> iirc, the internal one and JSON::Fast aren't 100% compatible

[17:10] <AlexDaniel> yeah, I think a lot of json libs are not very compatible

[17:10] <AlexDaniel> but does that incompatibility affect us in any way?

[17:12] <MasterDuke> don't remember exactly, but i think the reason for not using JSON::Fast in zef was because it could lead to problems

[17:13] <MasterDuke> but i don't know why rakudo's internals couldn't be replaced by JSON::Fast

[17:13] <MasterDuke> maybe someone could try that, do a Blin run, and see if anything can't be installed

[17:14] <AlexDaniel> mmm I don't think this is going to show anything

[17:14] <MasterDuke> if everything is fine, then just use that going forward (and zef will get that change automatically, because i think it uses the internal parser)

[17:14] <AlexDaniel> Blin starts from scratch and attempts to install thing on HEAD first

[17:15] <AlexDaniel> it won't even try the --old version if something installs fine on HEAD

[17:19] <MasterDuke> AlexDaniel: i don't see the problem?

[17:21] <AlexDaniel> MasterDuke: maybe I don't understand how that's going to help… but you can change the internal rakudo to-json/from-json routines to produce xml instead of json and Blin won't notice :)

[17:21] <AlexDaniel> or not?

[17:21] <AlexDaniel> ahhhh, wait now I remember

[17:22] <AlexDaniel> zef is using from-json to parse the huge list of modules, right? That's what we were trying to speed up?

[17:22] <AlexDaniel> but then you can just test that the list of modules is parsed correctly

[17:23] <MasterDuke> yeah. i don't remember if it's one big blob of json, or lots of small blobs though

[17:23] <MasterDuke> hm, maybe for that part. but zef also has to parse the META6.json, and i think that's where there are worries about incompatibility

[17:23] <AlexDaniel> mmm

[17:23] <AlexDaniel> right

[17:24] <AlexDaniel> well, I'm not too worried. Who's going to put combiners at the start of the strings in META6.json

[17:24] <AlexDaniel> or what the other edge cases are

[17:25] <AlexDaniel> IIRC there was a consensus that the code of the rakudo json parser can be replaced, and there was someone working on it

[17:25] <AlexDaniel> except that it never happened in the end

[17:27] <MasterDuke> timotimo? don't know who else it would be

[17:28] <timotimo> i didn't work on it

[17:37] <AlexDaniel> o there's a ticket https://github.com/rakudo/rakudo/issues/2311

[17:40] <AlexDaniel> looks like nobody was working on it…

[17:40] *** Kaiepi left
[17:41] <timotimo>  and it got forgot

[17:42] <MasterDuke> m: my @a = ("a".."k").pick(*) xx 100; my $b; for @a -> $a { $b = $a.starts-with("b" | "j") }; say so $b  # what am i doing wrong here?

[17:42] <camelia> rakudo-moar 616b757a4: OUTPUT: «Type check failed for return value; expected Bool:D but got Junction (any(Bool::False, Bool...)␤  in block <unit> at <tmp> line 1␤␤»

[17:45] <AlexDaniel> oooh…

[17:45] <AlexDaniel> c: 2018.12 my @a = ("a".."k").pick(*) xx 100; my $b; for @a -> $a { $b = $a.starts-with("b" | "j") }

[17:45] <committable6> AlexDaniel, ¦2018.12: «»

[17:45] <AlexDaniel> c: HEAD my @a = ("a".."k").pick(*) xx 100; my $b; for @a -> $a { $b = $a.starts-with("b" | "j") }

[17:45] <committable6> AlexDaniel, ¦HEAD(616b757): «Type check failed for return value; expected Bool:D but got Junction (any(Bool::False, Bool...)␤  in block <unit> at /tmp/2fxq5B351T line 1␤␤ «exit code = 1»»

[17:45] <AlexDaniel> MasterDuke: I don't think you're doing anything wrong

[17:45] <AlexDaniel> bisect: old=2018.12 my @a = ("a".."k").pick(*) xx 100; my $b; for @a -> $a { $b = $a.starts-with("b" | "j") }

[17:45] <timotimo> i'd expect the return value of the loop body has to be an Any

[17:45] <bisectable6_> AlexDaniel, Bisecting by exit code (old=2018.12 new=616b757). Old exit code: 0

[17:45] <bisectable6_> AlexDaniel, bisect log: https://gist.github.com/53c4d742899c8d64d64d5f66b223f632

[17:45] <bisectable6_> AlexDaniel, (2018-12-28) https://github.com/rakudo/rakudo/commit/2ce79561d9ad9a0aea707ada4bd64b7d8fcbebc6

[17:46] <AlexDaniel> yeah

[17:46] <AlexDaniel> that's what I was looking for

[17:46] <timotimo> oh, huh

[17:46] <timotimo> the starts-with sub takes a capture, so the autothread the junctions part doesn't trigger there, right

[17:47] <AlexDaniel> m: say ‘foo’.starts-with(‘a’ | ‘b’)

[17:47] <camelia> rakudo-moar 616b757a4: OUTPUT: «any(False, False)␤»

[17:47] <AlexDaniel> but why does that work?

[17:47] <AlexDaniel> m: say <foo bar>.starts-with(‘a’ | ‘b’)

[17:47] <camelia> rakudo-moar 616b757a4: OUTPUT: «Type check failed for return value; expected Bool:D but got Junction (any(Bool::False, Bool...)␤  in block <unit> at <tmp> line 1␤␤»

[17:47] <AlexDaniel> ahhh I see, only on Cool

[17:47] <timotimo> m: my @a = ("a".."k").pick(*) xx 100; my $b; for @a -> $a --> Mu { $b = $a.starts-with("b" | "j") }; say so $b 

[17:47] <camelia> rakudo-moar 616b757a4: OUTPUT: «Type check failed for return value; expected Bool:D but got Junction (any(Bool::False, Bool...)␤  in block <unit> at <tmp> line 1␤␤»

[17:47] <AlexDaniel> MasterDuke: yeah btw you're calling .starts-with on a list

[17:48] <MasterDuke> ah, right. AlexDaniel++

[17:48] <AlexDaniel> I'm pretty sure that needs to be reverted

[17:48] <AlexDaniel> MasterDuke: can you file a ticket?

[17:49] <AlexDaniel> maybe not fully, but for anything that can potentially take a Junction as an argument

[17:54] <AlexDaniel> m: <foo %s bar>.printf(‘abc’ | ‘bca’)

[17:54] <camelia> rakudo-moar 616b757a4: OUTPUT: «This representation (Null) does not support elems (for type VMNull)␤  in block <unit> at <tmp> line 1␤␤»

[17:54] <AlexDaniel> interesting

[17:54] <AlexDaniel> c: 2018.12 <foo %s bar>.printf(‘abc’ | ‘bca’)

[17:54] <committable6> AlexDaniel, ¦2018.12: «This representation (Null) does not support elems (for type VMNull)␤  in block <unit> at /tmp/uU1_VVBdCG line 1␤␤ «exit code = 1»»

[17:54] <AlexDaniel> c: all <foo %s bar>.printf('abc' | 'bca')

[17:54] <AlexDaniel> probably never worked

[17:55] <committable6> AlexDaniel, https://gist.github.com/66f6be2225f8e8cf106cc36b0b45ef8a

[17:55] <AlexDaniel> somehow only these are affected: starts-with ends-with substr-eq contains

[17:55] <MasterDuke> btw, the reason i was trying the above code, https://github.com/ugexe/zef/blob/master/lib/Zef/Identity.pm6#L50-L93

[17:55] <AlexDaniel> hah… huh…

[17:56] <AlexDaniel> it's interesting that we didn't catch it earlier

[17:58] <MasterDuke> i'm not sure this profile (of `zef info zef`) can be trusted (the numbers are insane), but it's pointing out those as some of thing at the top by exclusive time

[18:01] *** lucasb left
[18:05] <MasterDuke> benchable6: compare HEAD my @a = ("a".."k").pick(*).join xx 50000; my $b; for @a -> $a { $b = $a.starts-with("b" | "j") }; ||| my @a = ("a".."k").pick(*).join xx 100000; my $b; for @a -> $a { $b = ($a.starts-with("b") || $a.starts-with("j")) };

[18:05] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[18:05] <benchable6> MasterDuke, ¦HEAD: «Benchmark: ␤«timed out after 25 seconds»»

[18:06] <MasterDuke> benchable6: compare HEAD my @a = ("a".."k").pick(*).join xx 50000; my $b; for @a -> $a { $b = $a.starts-with("b" | "j") }; ||| my @a = ("a".."k").pick(*).join xx 50000; my $b; for @a -> $a { $b = ($a.starts-with("b") || $a.starts-with("j")) };

[18:06] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[18:06] <benchable6> MasterDuke, ¦HEAD: «Benchmark: ␤«timed out after 25 seconds»»

[18:06] <MasterDuke> benchable6: compare HEAD my @a = ("a".."k").pick(*).join xx 10000; my $b; for @a -> $a { $b = $a.starts-with("b" | "j") }; ||| my @a = ("a".."k").pick(*).join xx 10000; my $b; for @a -> $a { $b = ($a.starts-with("b") || $a.starts-with("j")) };

[18:06] <benchable6> MasterDuke, starting to benchmark the 1 given commit

[18:07] <benchable6> MasterDuke, https://gist.github.com/7235651a82ff79fd2dbd1a026fccfdf1

[18:44] <AlexDaniel> MasterDuke: so, ticket?

[18:48] <AlexDaniel> thanks

[19:50] *** Kaiepi joined
[21:24] *** dct joined
[21:29] *** Kaiepi left
[21:37] <Geth> ¦ rakudo: b27a7381ac | (Nick Logan)++ (committed using GitHub Web editor) | .circleci/config.yml

[21:37] <Geth> ¦ rakudo: Add CircleCI config

[21:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b27a7381ac

[21:54] <Geth> ¦ roast/6.c-errata: 1af03334be | (Elizabeth Mattijsen)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | S15-unicode-information/unival.t

[21:54] <Geth> ¦ roast/6.c-errata: Make unival tests less picky about how they die

[21:54] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/1af03334be

[21:55] <Geth> ¦ roast/6.d-errata: 94c9b40b48 | (Elizabeth Mattijsen)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | S02-types/WHICH.t

[21:55] <Geth> ¦ roast/6.d-errata: Remove mention of ForeignCode

[21:55] <Geth> ¦ roast/6.d-errata: 

[21:55] <Geth> ¦ roast/6.d-errata: As discussed in https://github.com/rakudo/rakudo/issues/2575

[21:55] <Geth> ¦ roast/6.d-errata: review: https://github.com/perl6/roast/commit/94c9b40b48

[21:55] <Geth> ¦ roast/6.d-errata: f3dee0dc6c | (Elizabeth Mattijsen)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | S02-types/instants-and-durations.t

[21:55] <Geth> ¦ roast/6.d-errata: Make test for Instant + Instant less picky

[21:55] <Geth> ¦ roast/6.d-errata: 

[21:55] <Geth> ¦ roast/6.d-errata: In light of https://github.com/rakudo/rakudo/commit/e48712a30a

[21:55] <Geth> ¦ roast/6.d-errata: review: https://github.com/perl6/roast/commit/f3dee0dc6c

[21:55] <Geth> ¦ roast/6.d-errata: f6ff2a7788 | (Elizabeth Mattijsen)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | S15-unicode-information/unival.t

[21:55] <Geth> ¦ roast/6.d-errata: Make unival tests less picky about how they die

[21:55] <Geth> ¦ roast/6.d-errata: review: https://github.com/perl6/roast/commit/f6ff2a7788

[21:55] <Geth> ¦ roast/6.d-errata: 94c9b40b48 | (Elizabeth Mattijsen)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | S02-types/WHICH.t

[21:55] <Geth> ¦ roast/6.d-errata: Remove mention of ForeignCode

[21:55] <Geth> ¦ roast/6.d-errata: 

[21:55] <Geth> ¦ roast/6.d-errata: As discussed in https://github.com/rakudo/rakudo/issues/2575

[21:55] <Geth> ¦ roast/6.d-errata: review: https://github.com/perl6/roast/commit/94c9b40b48

[21:55] <Geth> ¦ roast/6.d-errata: f3dee0dc6c | (Elizabeth Mattijsen)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | S02-types/instants-and-durations.t

[21:55] <Geth> ¦ roast/6.d-errata: Make test for Instant + Instant less picky

[21:55] <Geth> ¦ roast/6.d-errata: 

[21:55] <Geth> ¦ roast/6.d-errata: In light of https://github.com/rakudo/rakudo/commit/e48712a30a

[21:55] <Geth> ¦ roast/6.d-errata: review: https://github.com/perl6/roast/commit/f3dee0dc6c

[21:55] <Geth> ¦ roast/6.d-errata: f6ff2a7788 | (Elizabeth Mattijsen)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | S15-unicode-information/unival.t

[21:55] <Geth> ¦ roast/6.d-errata: Make unival tests less picky about how they die

[21:55] <Geth> ¦ roast/6.d-errata: review: https://github.com/perl6/roast/commit/f6ff2a7788

[22:04] <Geth> ¦ rakudo: 176127fe44 | (Nick Logan)++ (committed using GitHub Web editor) | README.md

[22:04] <Geth> ¦ rakudo: Add CircleCI badge

[22:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/176127fe44

[22:13] *** robertle left
[23:25] <Geth> ¦ roast/6.c-errata: 894dee8d4d | (Aleks-Daniel Jakimenko-Aleksejev)++ | S11-repository/curli-install.t

[23:25] <Geth> ¦ roast/6.c-errata: Test installation with proper Distribution usage

[23:25] <Geth> ¦ roast/6.c-errata: 

[23:25] <Geth> ¦ roast/6.c-errata: This change was adapted from

[23:25] <Geth> ¦ roast/6.c-errata: b82233a6973ad18d7b74a2fdd0ae8789a1977a76 (@ugexe++).

[23:25] <Geth> ¦ roast/6.c-errata: 

[23:25] <Geth> ¦ roast/6.c-errata: “The intent of this test is installing a Distribution, and the fact

[23:25] <Geth> ¦ roast/6.c-errata: it used a class called Distribution to do it should be irrelevant.

[23:26] <Geth> ¦ roast/6.c-errata: This instead installs something that *does* Distribution.”

[23:26] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/894dee8d4d

[23:40] *** Kaiepi joined
