[00:15] <vrurg> Where can I find info on how natives are handled internally? Trying to trace down a bug with uint and can't trace things down to MoarVM functions.

[00:48] <MasterDuke> vrurg: a lot of the uint functionality is currently handled by the int functions (part of the reason for a lot of the uint bugs)

[00:49] <MasterDuke> but what do you mean by handled? 

[00:49] <vrurg> MasterDuke: I mean pretty much everything. Any info would be useful. 

[00:51] <vrurg> In particular, I'm trying to find out why assigning a value with signature bit set (like 128) to uint results in the same value ‚Äì but negative (-128). For now can't even determine wether it happens upon assignment or upon reading.

[00:51] <MasterDuke> well, any of the nqp::*_(i|n|s) ops operate on natives

[00:52] <vrurg> But none of them are involved in this case. R#2354 ‚Äì it's about attrref

[00:53] <MasterDuke> i believe in that case it's kind of both. i.e., 64bits are being passed around, if you interpret them an unsigned you get one value, if you interpret them as signed (which most moarvm functions do) you get a different value

[00:54] <MasterDuke> i had a branch in moarvm where i tried to add uint support to a bunch of stuff, but it was a while ago and i got over my head

[00:54] <MasterDuke> let me see if i can find it, its commits should show you some of the relevant places to look

[00:56] <vrurg> MasterDuke: thanks! Might be helpful. Though if it requires some major overhaul of MoarVM ‚Äì I'd better pass it over to somebody else. I'm not ready for this level yet.

[00:57] <MasterDuke> hm, https://github.com/MasterDuke17/MoarVM/commits/add_unsigned_int_ops_where_missing is the only thing i found that seems immediately relevant, but i thought i had done more. oh well, maybe not...

[00:59] <vrurg> Ok, new ops are needed, as I see from your commits...

[01:00] <MasterDuke> well, i wouldn't take my work there as gospel truth

[01:00] <vrurg> I have to go now. Will check it out more close tomorrow.

[01:00] <MasterDuke> good luck

[01:01] <vrurg> MasterDuke: I just think you were right. I don't see how _i can handle unsigneds correctly.

[01:01] <vrurg> MasterDuke: thanks! 

[01:01] <vrurg> o/

[02:40] *** lucasb left
[04:05] *** sortiz joined
[04:09] *** ExtraCrispy left
[05:13] *** Kaiepi left
[05:15] *** Kaiepi joined
[06:26] *** robertle left
[07:45] *** ExtraCrispy joined
[08:09] *** robertle joined
[09:07] *** lizmat left
[09:34] *** vrurg left
[09:55] <Geth> ¬¶ nqp/master: 6 commits pushed by (Pawe≈Ç Murias)++

[09:55] <Geth> ¬¶ nqp/master: 0f91c4e83c | [js] Bump version numbers

[09:55] <Geth> ¬¶ nqp/master: 3ab85beab1 | [js] Add async/await to karma harness hook

[09:55] <Geth> ¬¶ nqp/master: c422444d02 | [js] Add support for emitting an end of test script event for testing in browser

[09:55] <Geth> ¬¶ nqp/master: 6313b26259 | [js] Hack around dependency bug

[09:55] <Geth> ¬¶ nqp/master: aef47ad989 | [js] Implement missing parts of NFA serialize and deserialization NFAs

[09:55] <Geth> ¬¶ nqp/master: 1e464a7d2e | [js] Add a hack to disable a sanity check that broken by missing NFG

[09:55] <Geth> ¬¶ nqp/master: review: https://github.com/perl6/nqp/compare/e60119f05ea7...1e464a7d2e26

[10:10] *** lizmat joined
[10:58] *** lizmat left
[11:02] *** lucasb joined
[11:08] <|Tux|> Rakudo version 2019.03-32-g33e2d7f4c - MoarVM version 2019.03-11-g7ae6684f4

[11:08] <|Tux|> csv-test-xs-20      0.438 -  0.441

[11:08] <|Tux|> csv-ip5xs           0.744 -  0.767

[11:08] <|Tux|> test-t --race       0.868 -  0.872

[11:08] <|Tux|> test-t              1.822 -  1.854

[11:08] <|Tux|> csv-ip5xs-20        6.116 -  6.149

[11:08] <|Tux|> test                7.736 -  8.260

[11:08] <|Tux|> test-t-20 --race    9.657 -  9.801

[11:08] <|Tux|> csv-parser         23.097 - 23.513

[11:08] <|Tux|> test-t-20          31.940 - 32.164

[11:09] *** lizmat joined
[11:11] <sortiz> lizmat: Can you take a look to https://github.com/rakudo/rakudo/issues/2764

[11:12] *** lizmat left
[11:17] *** lizmat joined
[11:18] <lucasb> hello

[11:18] <lucasb> m: dd Failure.new; say 'ok'

[11:18] <camelia> rakudo-moar 33e2d7f4c: OUTPUT: ¬´Failure.new(exception => X::AdHoc.new(payload => "Failed"), backtrace => Backtrace.new)‚ê§ok‚ê§¬ª

[11:18] <lizmat> sortiz lucasb 

[11:18] <yoleaux> 14 Mar 2019 14:48Z <|Tux|> lizmat: https://github.com/Tux/CSV/issues/13 ‚Üê any ideas?

[11:19] <lizmat> will look at R#2764

[11:21] <lucasb> m: dd Failure.new.new; say 'ok'  # Failure:D as invocant

[11:21] <camelia> rakudo-moar 33e2d7f4c: OUTPUT: ¬´Failure.new(exception => X::AdHoc.new(payload => "Failed"), backtrace => Backtrace.new)‚ê§ok‚ê§¬ª

[11:21] <sortiz> m: (+"a").new.perl.say; say "ok"

[11:21] <camelia> rakudo-moar 33e2d7f4c: OUTPUT: ¬´Failure.new(exception => X::AdHoc.new(payload => "Failed"), backtrace => Backtrace.new)‚ê§ok‚ê§¬ª

[11:23] *** Guest4810 left
[11:25] *** Guest4810 joined
[11:25] <sortiz> Found that while researching for open Failure related tickets.

[11:28] <lizmat> spectesting fix now

[11:29] <sortiz> Thank you!

[11:33] <sortiz> m: Failure(+"a").perl.say; # Another corner case.

[11:33] <camelia> rakudo-moar 33e2d7f4c: OUTPUT: ¬´Invocant of method 'CALL-ME' must be an object instance of type 'Failure', not a type object of type 'Failure'.  Did you forget a '.new'?‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:57] <Geth> ¬¶ rakudo: c9110654bd | (Elizabeth Mattijsen)++ | src/core/Failure.pm6

[11:57] <Geth> ¬¶ rakudo: Make sure creating a Failure from a Failure object throws

[11:57] <Geth> ¬¶ rakudo: 

[11:57] <Geth> ¬¶ rakudo: Fixes R#2764, sortiz++ for the spot

[11:57] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/c9110654bd

[12:00] <lizmat> sortiz: ^^

[12:00] <lizmat> must be offline for a bit again&

[12:04] *** lizmat left
[12:04] *** lizmat_ joined
[12:13] *** lizmat_ left
[12:19] *** lizmat joined
[13:21] *** vrurg joined
[13:25] *** AlexDani` joined
[13:29] *** AlexDaniel left
[13:43] *** AlexDani` is now known as AlexDaniel

[13:43] *** sortiz left
[13:45] *** AlexDaniel left
[13:46] *** AlexDaniel joined
[14:08] *** MasterDuke left
[14:12] *** Guest4810 left
[14:19] *** Guest77544 joined
[14:21] *** pmurias joined
[14:21] <pmurias> m: use nqp;say nqp::getattr(nqp::decont(1.FatRat),Rat,"\$!numerator")'

[14:21] <yoleaux> 14 Mar 2019 21:07Z <MasterDuke> pmurias: output from my kubuntu box (on my default-int branch if it matters) https://gist.github.com/MasterDuke17/ba12fcb1219810126e39074e1593e9bd

[14:21] <camelia> rakudo-moar c9110654b: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3qp::decont(1.FatRat),Rat,"\$!numerator")7‚èè5'‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§‚Ä¶¬ª

[14:21] <pmurias> jnthn: ^^^ why does that nqp::getattr work on moar?

[14:21] <pmurias> j: say(123)

[14:22] <camelia> rakudo-jvm 08b449e1a: OUTPUT: ¬´123‚ê§¬ª

[14:22] <pmurias> j: use nqp;say nqp::getattr(nqp::decont(1.FatRat),Rat,"\$!numerator")'

[14:22] <camelia> rakudo-jvm 08b449e1a: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3qp::decont(1.FatRat),Rat,"\$!numerator")7‚èè5'‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§ ‚Ä¶¬ª

[14:22] <pmurias> m: use nqp;say nqp::getattr(nqp::decont(1.FatRat),Rat,"\$!numerator")

[14:22] <camelia> rakudo-moar c9110654b: OUTPUT: ¬´1‚ê§¬ª

[14:22] <pmurias> j: use nqp;say nqp::getattr(nqp::decont(1.FatRat),Rat,"\$!numerator")

[14:22] <camelia> rakudo-jvm 08b449e1a: OUTPUT: ¬´java.lang.RuntimeException: No such attribute '$!numerator' for this object‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[14:23] <pmurias> jnthn: this causes as a problem on the js backend (as well as on the jvm but that doesn't seem like something that should work at all)

[14:23] <jnthn> pmurias: Probably because there's that slot optimization where we access attributes by index, and Moar doesn't bother to be strict about it (it does just enough for memory safety but nothing more)

[14:23] <jnthn> pmurias: Any code doing that is wrong and should be changed.

[14:25] <lizmat> m: use nqp;say nqp::getattr(nqp::decont(1.FatRat),Rat,"\$!numerator")

[14:25] <camelia> rakudo-moar c9110654b: OUTPUT: ¬´1‚ê§¬ª

[14:25] <lizmat> m: use nqp;say nqp::getattr(nqp::decont(1.FatRat),Rat,"\$!numerator")'

[14:25] <camelia> rakudo-moar c9110654b: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Two terms in a row‚ê§at <tmp>:1‚ê§------> 3qp::decont(1.FatRat),Rat,"\$!numerator")7‚èè5'‚ê§    expecting any of:‚ê§        infix‚ê§        infix stopper‚ê§        postfix‚ê§        statement end‚ê§‚Ä¶¬ª

[14:25] <pmurias> the trailing ' was a typo 

[14:25] <lizmat> there was a trailing ' in pmurias' code

[14:26] <lizmat> ack

[14:26] <pmurias> lizmat: but the problem is that a FatRat is not a Rat

[14:26] <lizmat> http://news.perlfoundation.org/2019/03/february-report-of-the-perl-6-.html

[14:26] <jnthn> It's possible, given we have spesh and the like, that the optimization in question is no longer very valurable

[14:27] <lizmat> pmurias: indeed, they're just both doing the Rational role

[14:29] <pmurias> jnthn: other thing is that we have a bunch of nqp lowlevel objects that are special cased during serialization, should all backends forcing serialization of them as regular objects (by putting them into a serialization context)

[14:37] *** Kaiepi left
[14:37] *** Kaiepi joined
[14:38] *** Kaypie joined
[14:38] *** Kaiepi left
[14:46] <pmurias> lizmat: how do we want to fix that? add accessor methods back in or duplicate code with both a Rat version and accessor one?

[14:53] <pmurias> if we duplicate code I would add both a multi with Rat and a multi with Rational, which would duplicate a fair bit of lines

[14:57] <lizmat> pmurias: or put that in a role that could be mixd in ?

[14:59] <jnthn> Can it not go in Rational? (disclaimer: didn't look at the code :))

[15:02] <lizmat> fwiw, I'm not sure what methods would need to be added?

[15:03] *** pmurias left
[15:08] <jnthn> Hmm, t/spec/S32-str/utf8-c8.t seems to have a compile error in it

[15:09] *** pmurias joined
[15:12] *** lizmat_ joined
[15:12] <lizmat_> wow

[15:15] *** lizmat left
[15:15] <jnthn> Currently testing out some branches over moar/nqp/rakudo to merge, and that one failed spectest...but it seems not due to the branches :)

[15:15] <Geth> ¬¶ roast: f090aa6d36 | (Elizabeth Mattijsen)++ | S32-str/utf8-c8.t

[15:15] <Geth> ¬¶ roast: Remove mystery closing brace that broke compilation

[15:15] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/f090aa6d36

[15:15] <lizmat_> jnthn: ^^

[15:15] <lizmat_> does that help?

[15:15] <jnthn> Probably :)

[15:15] <jnthn> Thanks

[15:16] <jnthn> (Was gonna look at it, but was checking into if the branches cause a regression in one benchmark)

[15:17] *** Guest77544 left
[15:17] *** lizmat_ is now known as lizmat

[15:17] <jnthn> Hm, no, it's same-ish on HEAD without the branches. Hmm.

[15:17] <jnthn> I'm sure it used to be better

[15:21] <lizmat> class ListFailure is Failure does Iterable { method iterator { self.exception.throw }  }   # interesting idea by leont

[15:21] <lizmat> to be returned by those cases where an Iterable is returned, and we want to return a Failure

[15:22] <lizmat> #2650

[15:22] <jnthn> Is doing that to iterator in Failure problematic?

[15:22] <lizmat> yes

[15:22] <jnthn> OK, why?

[15:22] <lizmat> hmm... maybe I misunderstood the question, could you rephrase ?

[15:23] <jnthn> m: sub foo() { fail "bar" }; dd foo().iterator

[15:23] <camelia> rakudo-moar c9110654b: OUTPUT: ¬´Rakudo::Iterator::ReifiedListIterator.new‚ê§¬ª

[15:24] <jnthn> If Failure got the method iterator that is proposed for ListFailure, does it break spectests? Ecosystem?

[15:24] <lizmat> ah... ok,. interesting... lemme check

[15:32] <pmurias> lizmat: https://github.com/rakudo/rakudo/blob/master/src/core/Rat.pm6#L331 - the multi signature uses Rational while the method body has a nqp::getattr with Rat

[15:33] <pmurias> jnthn: the copy & pasted & modified code could go into Rational

[15:34] <jnthn> Oh, that should just be using the accessors

[15:34] <jnthn> If it's going to constrain on Rational

[15:34] <jnthn> Not getattr etc.

[15:35] <lizmat> the initial idea about that was to make them faster

[15:35] <jnthn> Yeah but it also makes them wronger

[15:35] <lizmat> but using accessors now wouldn't make that much difference, would it ?

[15:35] <jnthn> No

[15:35] <jnthn> They'll be inlined

[15:35] <lizmat> ok, cool...

[15:35] <lizmat> pmurias: am about to go out, so if you beat me to it, that's fine

[15:36] <lizmat> otherwise I'll de-nqp those ops tonight

[15:36] <jnthn> Hmm, Geth? :)

[15:36] <pmurias> lizmat: I'll handle that ;)

[15:36] <jnthn> I just merged some opts I'd been holding back until post-release, anyways

[15:38] <lizmat> jnthn: re adding Failure.iterator: minor  breakage in S03-operators/minmax related to Failure vs thrown exception

[15:38] <lizmat> jnthn: so that seems a sensible solution 

[15:40] <jnthn> Does it fix the issue being discussed? :)

[15:41] <lizmat> m: dd Failure.new.min

[15:41] <camelia> rakudo-moar c9110654b: OUTPUT: ¬´Failure.new(exception => X::AdHoc.new(payload => "Failed"), backtrace => Backtrace.new)‚ê§¬ª

[15:41] <lizmat> with the new code, that throws

[15:41] <lizmat> $ 6 'dd Failure.new.min'

[15:41] <lizmat> Failed

[15:41] <lizmat> so yes, I think it solves the issue being discussed

[15:42] <jnthn> Hm, maybe throwing in .iterator is too eager, and we should be returning self there, so that it's the .pull-one that fails

[15:42] <jnthn> uh, throws

[15:42] <jnthn> Or something along those lines

[15:42] <jnthn> Seems we can find a solution that doesn't make us introduce another new type, though.

[15:43] <lizmat> but then it would throw because there is no Failure.pull-one ?

[15:44] <jnthn> Hmm, yeah

[15:46] <lizmat> hmm...  seems to work just fine

[15:46] <lizmat> I guess the FALLBACK ?

[15:46] <jnthn> Perhaps

[15:46] <lizmat> yeah, looks like

[15:46] <jnthn> But does it still blow up somewhere in the cases we wish it to?

[15:47] <lizmat> $ 6 'sub foo() { fail }; for foo() { dd $_ }'

[15:47] <lizmat> Failed

[15:47] <lizmat> yup, I'd say

[15:47] <jnthn> Nice

[15:47] <lizmat> m: sub foo() { fail }; for foo() { dd $_ }

[15:47] <camelia> rakudo-moar c9110654b: OUTPUT: ¬´Failure.new(exception => X::AdHoc.new(payload => "Failed"), backtrace => Backtrace.new)‚ê§¬ª

[15:48] <lizmat> need to go out now... will commit later tonight and fix the tests

[16:11] *** robertle left
[16:43] <Geth> ¬¶ rakudo: c21054de65 | (Pawe≈Ç Murias)++ | src/core/Rat.pm6

[16:43] <Geth> ¬¶ rakudo: Fix use of nqp::getattr with sometimes wrong class

[16:43] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/c21054de65

[16:55] *** pmurias left
[17:25] <Geth> ¬¶ rakudo: 29878d8239 | (Jonathan Worthington)++ | src/vm/moar/ops/container.c

[17:25] <Geth> ¬¶ rakudo: Produce simpler spesh op for decont

[17:25] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/29878d8239

[17:34] *** ExtraCrispy left
[17:34] *** ExtraCrispy joined
[18:29] <Geth> ¬¶ rakudo: 23fca8f6fb | (Elizabeth Mattijsen)++ | src/core/Failure.pm6

[18:29] <Geth> ¬¶ rakudo: Make a Failure throw when it is used as something Iterable

[18:29] <Geth> ¬¶ rakudo: 

[18:29] <Geth> ¬¶ rakudo: Fixes R#2650.  Makes .iterator throw immediately.  There was some discussion

[18:29] <Geth> ¬¶ rakudo: on #perl6-dev on whether or not to have .iterator just return self, rather

[18:29] <Geth> ¬¶ rakudo: than throwing.  But that would just delay the throwing until the FALLBACK of

[18:29] <Geth> ¬¶ rakudo: Failure would catch the "pull-one", which felt as just wasting extra cycles.

[18:29] <Geth> ¬¶ rakudo: 

[18:29] <Geth> ¬¶ rakudo: <‚Ä¶commit message has 5 more lines‚Ä¶>

[18:29] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/commit/23fca8f6fb

[18:30] <bartolin> oh, the nqp::getattr for Rat turned out to be a bug. I've asked about it a while ago, but didn't fully understand whether it was wrong (or what exactly): https://colabti.org/irclogger/irclogger_log/perl6?date=2019-01-28#l806

[18:30] <bartolin> pmurias++  # fixing it

[18:31] <lizmat> yeah, those opts where done assuming that FatRat ~~ Rat was True

[18:31] <lizmat> before I had a complete appreciation of the Rational role

[18:33] * bartolin re-reads today's discussion -- hoping to understand the issue better

[18:34] <timotimo> bartolin: your nickname sounds vaguely like a musical instrument :D

[18:35] <bartolin> does it? I've never had that association :)

[18:38] <timotimo> well, it took a while for me, too. and also i'm just now playing on my keyboard

[18:42] * bartolin feels a bit 're-motivated' to look at the jvm backend again (by pmurias's commit)

[18:42] <bartolin> or do you consider the jvm backend dead by now?

[18:45] <lizmat> bisectable6: dd "a".subst( /(.)/, "b$0b")

[18:45] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=23fca8f) because on both starting points the exit code is 0

[18:45] <lizmat> hmmm.. that never worked ?

[18:45] <bisectable6> lizmat, bisect log: https://gist.github.com/728d1ae1e1959602184e3c06aafe0afc

[18:45] <bisectable6> lizmat, (2016-09-01) https://github.com/rakudo/rakudo/commit/631e2f770e83da5420b0b3ecfe611e6892a7df4f

[18:46] <lizmat> m: dd "a".subst( /(.)/, "b$0b")

[18:46] <camelia> rakudo-moar 29878d823: OUTPUT: ¬´Use of Nil in string context‚ê§  in block <unit> at <tmp> line 1‚ê§"bb"‚ê§¬ª

[18:47] <nine_> bartolin: having a working JVM backend can only help

[18:47] *** Kaypie is now known as Kaiepi

[18:47] <lizmat> m: my $a = "√Ö"; $a ~~ s:s/(.)/b$0b/; dd $a    # huh ??

[18:47] <camelia> rakudo-moar 29878d823: OUTPUT: ¬´Str $a = "bÃä√ÖbÃä"‚ê§¬ª

[18:48] <lizmat> feels like a bug to me

[18:50] <AlexDaniel> 6c: dd "a".subst( /(.)/, "b$0b")

[18:50] <lizmat> bisectable6 

[18:50] <lizmat> bisectable6: my $a = "√Ö"; $a ~~ s:s/(.)/b$0b/; dd $a

[18:50] <bisectable6> lizmat, On both starting points (old=2015.12 new=23fca8f) the exit code is 0 and the output is identical as well

[18:50] <bisectable6> lizmat, Output on both points: ¬´Str $a = "bÃä√ÖbÃä"‚ê§¬ª

[18:50] <committable6> AlexDaniel, https://gist.github.com/18e0678ae6f583a098aaad67a7407e97

[18:50] <lizmat> been there like forever then

[19:01] <Geth> ¬¶ roast: 75132b836b | (Elizabeth Mattijsen)++ | S03-operators/minmax.t

[19:01] <Geth> ¬¶ roast: Trying to iterate a Failure now throws immediately

[19:01] <Geth> ¬¶ roast: 

[19:01] <Geth> ¬¶ roast: In response to R#2650

[19:01] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/75132b836b

[19:06] <bartolin> in the past I've tried to keep 'make spectest' on the jvm backend as clean as possible. For (new) test failures, that I wasn't able to fix, I added backend specific fudges to roast -- generating a lot of noise. As far as I understood Zoffix++ wasn't keen on all those commits. Do you have (strong?) opinions about such fudges?

[19:07] * bartolin wonders how pmurias handles this for the js backend

[19:58] *** committable6 left
[19:58] *** reportable6 left
[19:58] *** shareable6 left
[19:58] *** greppable6 left
[19:58] *** evalable6 left
[19:58] *** releasable6 left
[19:59] *** committable6 joined
[19:59] *** ChanServ sets mode: +v committable6

[19:59] *** greppable6 joined
[20:00] *** releasable6 joined
[20:00] *** ChanServ sets mode: +v releasable6

[20:00] *** shareable6 joined
[20:00] *** ChanServ sets mode: +v shareable6

[20:01] *** reportable6 joined
[20:02] *** evalable6 joined
[20:02] *** ChanServ sets mode: +v evalable6

[20:29] *** AlexDaniel left
[20:29] *** AlexDaniel joined
[20:38] *** AlexDaniel left
[20:55] *** Euph0ria joined
[20:56] *** Euph0ria left
[21:12] *** pmurias joined
[21:58] *** leont joined
[22:47] <jnthn> bartolin: I've no objections to fudges going in to roast, fwiw

[23:18] <leont> Failures do the weirdest things

[23:19] <leont> m: use Test; my @foo = (Failure.new("")); @foo[0]; try { @foo[0] }; dd $1;

[23:19] <camelia> rakudo-moar 23fca8f6f: OUTPUT: ¬´Nil‚ê§¬ª

[23:19] <leont> m: use Test; my @foo = (Failure.new("")); @foo[0]; try { @foo[0] }; dd $!;

[23:19] <camelia> rakudo-moar 23fca8f6f: OUTPUT: ¬´X::AdHoc $! = X::AdHoc.new(payload => "")‚ê§¬ª

[23:20] <leont> @foo[0] is fine outside the try, but throws inside of it???

[23:22] <leont> I can't explain this

[23:26] <jnthn> Side point: the parens around the Failure don't change anything

[23:27] <jnthn> But the answer is that `use fatal` is in effect inside of a try

[23:28] <jnthn> try { foo } is really like { use fatal; CATCH { default { $! = $_ } }; foo }()

[23:32] <leont> I see

[23:33] <leont> That does explain why lives-ok fails when throws-ok also fails.

[23:34] <leont> (on the same coderef)

[23:40] <leont> I'm not entirely sure which behavior is desirable, but I'm pretty sure consistency is

[23:57] *** sortiz joined
