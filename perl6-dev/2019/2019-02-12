[00:15] *** leont left
[00:39] *** dct left
[04:19] *** MasterDuke left
[06:08] *** ufobat___ left
[08:50] *** Ulti joined
[09:27] *** ufobat joined
[09:34] <|Tux|> Rakudo version 2018.12-293-gd904b7048 - MoarVM version 2018.12-100-gf818bd6d5

[09:34] <|Tux|> csv-test-xs-20      0.436 -  0.492

[09:34] <|Tux|> csv-ip5xs           0.744 -  0.758

[09:34] <|Tux|> test-t --race       0.882 -  1.000

[09:34] <|Tux|> test-t              1.926 -  1.932

[09:34] <|Tux|> csv-ip5xs-20        6.224 -  6.348

[09:34] <|Tux|> test                7.189 -  7.955

[09:34] <|Tux|> test-t-20 --race   10.875 - 11.039

[09:34] <|Tux|> csv-parser         22.346 - 22.771

[09:34] <|Tux|> test-t-20          33.155 - 33.378

[10:59] <Geth> ¦ nqp: c267ae40e8 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTCompilerMAST.nqp

[10:59] <Geth> ¦ nqp: Force latebound lexical lookups in dyncomp'd code

[10:59] <Geth> ¦ nqp: 

[10:59] <Geth> ¦ nqp: When we compile some code to run it at BEGIN time, and a closure is

[10:59] <Geth> ¦ nqp: taken and retained there, then it may have some connections to the

[10:59] <Geth> ¦ nqp: faked-up lexical environment it was compiled in. In such cases, force

[10:59] <Geth> ¦ nqp: lookups of lexicals to be late-bound, so that we do not get wrong

[10:59] <Geth> ¦ nqp: indexes. Fixes the issue exposed in

[10:59] <Geth> ¦ nqp: https://github.com/rakudo/rakudo/issues/2684.

[10:59] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c267ae40e8

[11:02] <jnthn> Hm, and it didn't report it, but I just did an NQP_VERSION bump too.

[11:03] <timotimo> that's a good catch

[12:15] *** leont joined
[12:28] *** leont left
[13:01] *** lucasb joined
[14:09] <Geth> ¦ rakudo: 5e5c909d1a | (Elizabeth Mattijsen)++ | lib/NativeCall/Types.pm6

[14:09] <Geth> ¦ rakudo: Better fix for R#2681 and related

[14:09] <Geth> ¦ rakudo: 

[14:09] <Geth> ¦ rakudo: Instead of adding the Iterable role to the CArray class itself, apply it to

[14:09] <Geth> ¦ rakudo: each of the underlying roles that are used to compose the final class.  Not

[14:09] <Geth> ¦ rakudo: quite sure why that makes a difference, but it also makes the problem of

[14:09] <Geth> ¦ rakudo: R#2687 go away.

[14:09] <synopsebot> R#2681 [open]: https://github.com/rakudo/rakudo/issues/2681 [regression][testneeded][⚠ blocker ⚠] Crypt::TweetNacl test suite fails since 762c708fdcef

[14:09] <synopsebot> R#2687 [open]: https://github.com/rakudo/rakudo/issues/2687 [regression][⚠ blocker ⚠] NativeCall issue exposed by Audio::Convert::Samplerate

[14:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5e5c909d1a

[14:22] <Geth> ¦ rakudo: 30fc5146ca | (Elizabeth Mattijsen)++ | lib/NativeCall/Types.pm6

[14:22] <Geth> ¦ rakudo: Revert original fix for R#2681

[14:22] <Geth> ¦ rakudo: 

[14:22] <Geth> ¦ rakudo: Which should at least unbreak R#2687 and associated

[14:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/30fc5146ca

[14:22] <synopsebot> R#2681 [open]: https://github.com/rakudo/rakudo/issues/2681 [regression][testneeded][⚠ blocker ⚠] Crypt::TweetNacl test suite fails since 762c708fdcef

[14:22] <synopsebot> R#2687 [open]: https://github.com/rakudo/rakudo/issues/2687 [regression][⚠ blocker ⚠] NativeCall issue exposed by Audio::Convert::Samplerate

[14:36] *** Tux__ joined
[14:36] *** |Tux| left
[14:44] *** Tux__ is now known as |Tux|

[15:00] <releasable6> Next release in ≈4 days and ≈3 hours. 7 blockers. Please log your changes in the ChangeLog: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[15:18] * lizmat just committed https://github.com/rakudo/rakudo/commit/84ed8548f97ff66c1ad80d0

[15:18] <lizmat> Add Buf/Blob.STORE candidates for non-iterables

[15:26] <lizmat> afk for a few hours&

[16:04] *** ufobat left
[16:51] *** lucasb left
[19:04] *** bisectable6_ joined
[19:04] *** ChanServ sets mode: +v bisectable6_

[19:04] *** reportable6 left
[19:04] *** bisectable6 left
[19:04] *** reportable6 joined
[19:04] *** [Tux] left
[19:04] *** evalable6 left
[19:04] *** masak left
[19:04] *** dalek left
[19:04] *** dalek joined
[19:04] *** ChanServ sets mode: +v reportable6

[19:04] *** ChanServ sets mode: +v dalek

[19:04] *** [TuxCM] joined
[19:05] *** masak joined
[19:06] *** masak is now known as Guest32385

[19:42] *** ufobat joined
[19:54] *** patrickb joined
[19:56] *** evalable6 joined
[20:37] <japhb> .tell AlexDaniel You may already have this data, but it would be interesting to know which ecosystem modules are most sensitive to bugs, meaning those that are most likely to change from passing to failing or vice versa with each new Rakudo commit.

[20:37] <yoleaux> japhb: I'll pass your message to AlexDaniel.

[20:37] <japhb> .tell AlexDaniel Given my own experience, I'd bet IO::Socket::Async::SSL would be on the short list.

[20:37] <yoleaux> japhb: I'll pass your message to AlexDaniel.

[20:50] *** travis-ci joined
[20:50] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Add Buf/Blob.STORE candidates for non-iterables

[20:50] <travis-ci> https://travis-ci.org/vrurg/rakudo/builds/492351411 https://github.com/vrurg/rakudo/compare/1f004dce252c...84ed8548f97f

[20:50] *** travis-ci left
[21:04] *** d4l3k_ joined
[21:04] *** ChanServ sets mode: +v d4l3k_

[21:05] *** ufobat left
[21:06] *** reportable6 left
[21:06] *** dalek left
[21:06] *** d4l3k_ is now known as dalek

[21:22] *** lizmat left
[21:35] *** lizmat joined
[22:02] *** reportable6 joined
[22:02] *** ChanServ sets mode: +v reportable6

[22:03] <lizmat> so Geth is still AWOL ?

[22:08] * lizmat just committed https://github.com/rakudo/rakudo/commit/bfadefaa6799

[22:08] <lizmat> Add test for R#2687

[22:08] <synopsebot> R#2687 [closed]: https://github.com/rakudo/rakudo/issues/2687 [regression][testneeded] NativeCall issue exposed by Audio::Convert::Samplerate

[22:08] * lizmat just committed https://github.com/rakudo/rakudo/commit/05b9aa0df802ab4

[22:08] <lizmat> Speed up storing non-iterables in Buf/Blob

[22:08] * lizmat just committed https://github.com/rakudo/rakudo/commit/b394b63c27c22bf6495

[22:09] <lizmat> Add tests for R#2681

[22:09] <synopsebot> R#2681 [open]: https://github.com/rakudo/rakudo/issues/2681 [regression][testneeded] Crypt::TweetNacl test suite fails since 762c708fdcef

[22:18] <AlexDaniel> .

[22:18] <yoleaux> 20:37Z <japhb> AlexDaniel: You may already have this data, but it would be interesting to know which ecosystem modules are most sensitive to bugs, meaning those that are most likely to change from passing to failing or vice versa with each new Rakudo commit.

[22:18] <yoleaux> 20:37Z <japhb> AlexDaniel: Given my own experience, I'd bet IO::Socket::Async::SSL would be on the short list.

[22:18] <AlexDaniel> japhb: I don't think there's any module that stands out

[22:19] <AlexDaniel> japhb: see https://github.com/rakudo/rakudo/issues?q=IO%3A%3ASocket%3A%3AAsync%3A%3ASSL+is%3Aissue+is%3Aclosed

[22:20] <AlexDaniel> japhb: and also I'm pretty sure that IO::Socket::Async::SSL was skipped in Toaster in Blin since forever

[22:21] <AlexDaniel> japhb: but from what I recall, I don't think more than one blocker was spotted by any module

[22:22] <AlexDaniel> and I don't have any data for that, unfortunately… you'd have to dig through the issue tracker

[22:24] * lizmat is looking at R#2686

[22:24] <synopsebot> R#2686 [open]: https://github.com/rakudo/rakudo/issues/2686 [regression][⚠ blocker ⚠] Some issue exposed by IO::Glob

[22:30] *** robertle left
[22:38] *** leont joined
[23:02] * lizmat just committed https://github.com/rakudo/rakudo/commit/9d6e508d0d4b3fd2e

[23:02] *** patrickz joined
[23:02] <lizmat> Hacky fix for R#2686

[23:02] <synopsebot> R#2686 [open]: https://github.com/rakudo/rakudo/issues/2686 [regression][⚠ blocker ⚠] Some issue exposed by IO::Glob

[23:05] *** patrickb left
[23:18] <japhb> m: 'corruption'.comb.race(batch => 1).map({ sleep .1e0.rand; $_ }).join xx 4  # Explaining threading risks to someone

[23:18] <camelia> rakudo-moar 9d6e508d0: ( no output )

[23:18] <japhb> m: 'corruption'.comb.race(batch => 1).map({ sleep .1e0.rand; $_ }).join.say xx 4  # Explaining threading risks to someone

[23:18] <camelia> rakudo-moar 9d6e508d0: OUTPUT: «ocrrutpion␤oructrpoin␤cropiurnot␤rrucponoti␤»

[23:39] <timotimo> that's a pretty succinct way to spell that. nice.

