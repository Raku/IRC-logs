[00:01] <japhb> IOninja: ack, thank you.

[00:04] <IOninja> m: say '√ü T' ~~ m:i/T/

[00:04] <camelia> rakudo-moar cb4147: OUTPUT: ¬´False‚ê§¬ª

[00:11] <TimToady> japhb: also, if you have your own slangs, they may need some fixing since last release

[00:12] <TimToady> (the kind where you mix into %*LANG<MAIN>, not mere operator definitionss, which are fine)

[00:55] <travis-ci> Rakudo build failed. Jonathan Worthington 'Run S17-procasync/nonexistent.t'

[00:55] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/208965807 https://github.com/rakudo/rakudo/compare/f73d98473825...8c777b112367

[00:55] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[04:01] <naxieAlDle> u: ‚ò∫

[04:01] <unicodable6> naxieAlDle, U+263A WHITE SMILING FACE [So] (‚ò∫)

[04:01] <naxieAlDle> u: { .chr.fc.chars > 1 }

[04:01] <unicodable6> naxieAlDle, U+00DF LATIN SMALL LETTER SHARP S [Ll] (√ü)

[04:01] <unicodable6> naxieAlDle, U+0149 LATIN SMALL LETTER N PRECEDED BY APOSTROPHE [Ll] (≈â)

[04:01] <unicodable6> naxieAlDle, 80 characters in total: https://gist.github.com/0b2631ffb617ab38646ead2b8e4903f2

[04:04] <naxieAlDle> (thing is, when you give unicodable some query that returns a couple thousands characters, it craps out trying to gist it)

[06:27] <nine> [6~/win 10

[07:14] <samcv> u: { .chr.fc.chars > 1 }

[07:14] <samcv> pls unicodeable

[07:14] <unicodable6> samcv, U+00DF LATIN SMALL LETTER SHARP S [Ll] (√ü)

[07:14] <unicodable6> samcv, U+0149 LATIN SMALL LETTER N PRECEDED BY APOSTROPHE [Ll] (≈â)

[07:14] <unicodable6> samcv, 80 characters in total: https://gist.github.com/27ec3adcd1d3116741d036910d37f79f

[07:21] <[Tux]> This is Rakudo version 2017.02-214-gcb4147624 built on MoarVM version 2017.02-35-gdc40845b

[07:21] <[Tux]> csv-ip5xs        2.825

[07:21] <[Tux]> test            12.399

[07:21] <[Tux]> test-t           5.030 - 5.114

[07:21] <[Tux]> csv-parser      12.662

[07:27] <samcv> u: { .chr.fc.chars > 2 }

[07:27] <unicodable6> samcv, U+FB03 LATIN SMALL LIGATURE FFI [Ll] (Ô¨É)

[07:27] <unicodable6> samcv, U+FB04 LATIN SMALL LIGATURE FFL [Ll] (Ô¨Ñ)

[07:27] <nine> .tell llfourn It's Perl6;:Actions::instantiated_type! This gives us 2 options for avoiding the static reference to the stub: prevent the stub from entering the SC and making it a "generic" type (($type.HOW.archetypes.generic). Or we extend the check in instantiated_type to a third option.

[07:27] <yoleaux2> nine: I'll pass your message to llfourn.

[07:27] <samcv> u: { .chr.fc.chars > 3 }

[07:27] <unicodable6> samcv, Found nothing!

[07:56] <nine> Introducing a new PackageStubHOW seems to be the cleanest option, Extending PackageHOW to make it optionally generic may be the easiest one.

[07:58] <samcv> nice, I have a prototype that fixes the fold case issue and correctly handles when the haystack expands

[07:58] <samcv> only problem is it crashes 40% of the time and the 60% it works fine. will have to track that down

[08:01] <samcv> \o/ yeah it passes all the tests i had written

[08:03] <nine> samcv++

[08:04] <samcv> working with both needles and haystacks that have special foldcase characters in them so woo

[08:07] <llfourn> nine: from reading comments in Archetypes.nqp it sounds like generic is appropriate enough.

[08:07] <yoleaux2> 8 Mar 2017 20:41Z <nine> llfourn: Tried to find out where the QAST::WVal(Cat( is coming from, without success :/

[08:07] <yoleaux2> 07:27Z <nine> llfourn: It's Perl6;:Actions::instantiated_type! This gives us 2 options for avoiding the static reference to the stub: prevent the stub from entering the SC and making it a "generic" type (($type.HOW.archetypes.generic). Or we extend the check in instantiated_type to a third option.

[08:08] <llfourn> nine++ investigations

[08:10] <llfourn> do we even have to extend package? Couldn't we just use GenericHOW?

[08:15] * llfourn gives it a shot

[08:21] <samcv> seems the answer to my MVM crash was adding a MVMROOT. not 100% fixed or even understand totally how MVMROOT works but progress

[08:28] <llfourn> GenericHOW won't work because it doesn't have a stash

[08:46] <nine> exactly

[08:46] <nine> But giving PackageHOW a $!generic which defaults to 1 should be all we need

[08:53] <llfourn> defaults to 0 I guess and then add is_generic override method

[09:05] <llfourn> nine: that won't work actually: look at instantiated type it directly checks the archetypes

[09:05] <llfourn> or at least we'd have to change that too

[09:46] <llfourn> (errr looking back an hour later yes -- defaults to 1)

[09:47] <llfourn> wait no 0

[09:47] * llfourn should take a break

[10:00] <jnthn> nine: PackageStubHOW sounds a little odd in so far as packages already are stubby (that you can re-open them any time is what makes them different from modules) :)

[10:01] <llfourn> jnthn: just StubHOW better?

[10:01] <jnthn> llfourn: I didn't quite figure out what the problem is yet :)

[10:02] <llfourn> ah. we want require Pod::To::Text; to insert a stub package into the lexical scope which gets replaced by the class later.

[10:03] <llfourn> m: require Pod::To::Text; Pod::To::Text.new

[10:03] <camelia> rakudo-moar cb4147: OUTPUT: ¬´You cannot create an instance of this type (Text)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[10:03] <llfourn> it's because the Pod::To::Text reference gets resolved at compile time as the stub package

[10:03] <jnthn> Hmmm

[10:04] <llfourn> and at runtime when we want to replace it, it's too late.

[10:05] <jnthn> m: class A::B::C { }; my \x = A::B; class A::B { }; say x.HOW.^name

[10:05] <camelia> rakudo-moar cb4147: OUTPUT: ¬´Perl6::Metamodel::PackageHOW‚ê§¬ª

[10:05] <jnthn> Is this not a golf of the same thing?

[10:05] <samcv> hmm Inline::Perl5 is failing for me

[10:05] <llfourn> that is the same thing

[10:06] <llfourn> but I wasn't aware of that being a problem with constants too :o

[10:08] <jnthn> :-)

[10:09] <jnthn> So maybe the solution is to just ever make a compile-time reference to something that resolves to PackageHOW, 'cus it can be replaced at any point.

[10:09] <jnthn> *just *NEVER* make

[10:09] <jnthn> Then we'd fix both cases, perhaps

[10:09] <jnthn> And maybe more things

[10:15] <nine> jnthn: would be very fine with me :)

[10:16] <jnthn> I don't immediately see the downsides

[10:16] <jnthn> If there are any

[10:27] <llfourn> I just tried it. It worked *gasp*.

[10:27] <jnthn> :)

[10:27] * jnthn likes solutions that don't involve adding more things :-)

[10:28] <llfourn> if $is_generic || nqp::isnull(nqp::getobjsc($type)) || istype($type.HOW,$pkg) { # is this right?

[10:28] <llfourn> in the check for whether we should do runtime lookup

[10:28] <jnthn> What's $pkg

[10:28] <llfourn> %*HOW<package>

[10:28] <jnthn> Then yeah, looks right

[10:28] <llfourn> (good point)

[10:29] <jnthn> Hm, %*HOW survived TimToady's braidery...

[10:29] <llfourn> but for HOW long...

[10:30] <jnthn> Dunno, but they're lexically effective and affect the meaning of the language, so they prolly belong in there

[10:37] <llfourn> \o/ passes spectest and everything!

[10:44] <nine> Epic team work :)

[10:54] <llfourn> nine: Yep. ++'s all around. PR with https://github.com/rakudo/rakudo/pull/1034

[10:54] <Geth> ¬¶ roast: b7f83a8a34 | LLFourn++ | S11-modules/require.t

[10:54] <Geth> ¬¶ roast: We can now stop using indirect lookups for require'd symbols

[10:54] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/b7f83a8a34

[10:55] <llfourn> and tests using the literal required class names ^

[10:58] <Geth> ¬¶ rakudo/nom: 4fce405763 | LLFourn++ | 2 files

[10:58] <Geth> ¬¶ rakudo/nom: Fix multiple requires & require clobbering pre-existing pacakges

[10:58] <Geth> ¬¶ rakudo/nom:

[10:58] <Geth> ¬¶ rakudo/nom: Fixes:

[10:58] <Geth> ¬¶ rakudo/nom: ```

[10:58] <Geth> ¬¶ rakudo/nom: class Test::Foo { }; { require Test; say Test::Foo }

[10:58] <Geth> ¬¶ rakudo/nom: require This;

[10:58] <Geth> ¬¶ rakudo/nom: require This::And::That;

[10:58] <Geth> ¬¶ rakudo/nom: ```

[10:58] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4fce405763

[10:58] <Geth> ¬¶ rakudo/nom: e73ff23e2e | LLFourn++ | src/Perl6/Actions.nqp

[10:58] <Geth> ¬¶ rakudo/nom: Make lookups for PackageHOW things happen at runtime

[10:58] <Geth> ¬¶ rakudo/nom:

[10:58] <Geth> ¬¶ rakudo/nom: Fixes our problems with require stubs **and** fixes the following:

[10:58] <Geth> ¬¶ rakudo/nom:

[10:58] <Geth> ¬¶ rakudo/nom: `class A::B::C { }; my \x = A::B; class A::B { }; say x.new`

[10:58] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e73ff23e2e

[10:58] <Geth> ¬¶ rakudo/nom: 030c4c58e3 | niner++ | 2 files

[10:58] <Geth> ¬¶ rakudo/nom: Merge pull request #1034 from LLFourn/require-fix-2017

[10:58] <Geth> ¬¶ rakudo/nom:

[10:58] <Geth> ¬¶ rakudo/nom: Fix multiple requires & require clobbering pre-existing pacakges

[10:58] <llfourn> hmmm should probably also test that ^

[10:58] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/030c4c58e3

[11:08] <Geth> ¬¶ roast: 0ea6c6b408 | LLFourn++ | S12-class/namespaced.t

[11:08] <Geth> ¬¶ roast: Test stub packages later defined as classes updating references

[11:08] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/0ea6c6b408

[11:10] <llfourn> m: class A::B::C { }; constant \x = A::B; class A::B { }; say x.new

[11:10] <camelia> rakudo-moar cb4147: OUTPUT: ¬´You cannot create an instance of this type (A::B)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:10] <llfourn> ^ that still won't work though :\

[11:10] <IOninja> it's still using an old commit though?

[11:11] <llfourn> IOninja: yeah there was no point in me m: ing there

[11:12] <IOninja> m: class A::B::C { }; constant \x = A::B; class A::B { }; say x.new

[11:12] <camelia> rakudo-moar 030c4c: OUTPUT: ¬´You cannot create an instance of this type (A::B)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:12] <IOninja> NOW it still won't work :)

[11:13] <llfourn> how do you tell when camelia updates herself?

[11:13] <IOninja> +camelia ‚îÇ rakudo-moar 030c4c: <-- it has sha in the output

[11:13] <IOninja> Also...:

[11:13] <IOninja> huggable: camelia

[11:13] <huggable> IOninja, Camelia updates every 20m at 8, 28, and 48 minutes of the hour

[11:13] <jnthn> llfourn: I'd not expect it to work with constant

[11:13] <llfourn> Wow. I literally never noticed that.

[11:14] <jnthn> Constants are computed at BEGIN time, so you get whatever value was effective then

[11:14] <llfourn> jnthn: yeah neither did I, just noting it :)

[11:14] <jnthn> OK :)

[12:11] <timotimo> naxieAlDle: the "u: { .chr.fc.chars > 1 }" example makes me thing we might want to teach unicodable to output an extra piece of information along with each line. like in this case what it fcs to each time

[12:11] <naxieAlDle> m: say 0x10FFFF

[12:11] <camelia> rakudo-moar 030c4c: OUTPUT: ¬´1114111‚ê§¬ª

[12:11] <naxieAlDle> timotimo: well, that will make it die consistently :)

[12:12] <timotimo> i didn't see what makes it die

[12:13] <naxieAlDle> I don't remember exactly. There was an issue with JSON::Fast (it was broken for some inputs), and JSON::Tiny just cannot handle a piece of data that large

[12:14] <naxieAlDle> in a long term I want to make it dump the data into a plain file directly, and then serve that with a webserver myself

[12:14] <naxieAlDle> to avoid this JSON hell altogether

[12:15] <timotimo> what part uses json to move stuff around?

[12:16] <naxieAlDle> this one: https://github.com/zoffixznet/perl6-Pastebin-Gist/blob/master/lib/Pastebin/Gist.pm6#L2

[12:17] <timotimo> can you dump a value that b0rks it when running to-json on it?

[12:17] <timotimo> even though i'm not the one who wrote that part of JSON::Tiny, i may still be able to fix it

[12:18] <naxieAlDle> timotimo: JSON::Tiny doesn't break, that's why it is using it. This is related: https://github.com/zoffixznet/perl6-Pastebin-Gist/commit/ac13153a29e126b512753476d091f968b8faad53

[12:18] <timotimo> sorry

[12:18] <timotimo> i meant JSON::Fast of course

[12:18] <naxieAlDle> timotimo: and this is the ticket for ::Fast: https://github.com/timo/json_fast/issues/16

[12:19] <timotimo> oh

[12:19] <timotimo> that bug seemed so academic and uninteresting and harmless

[12:19] <timotimo> hm, it doesn't escape nullbytes? but it has an explicit entry in its .subst

[12:19] <naxieAlDle> u: \

[12:19] <unicodable6> naxieAlDle, U+005C REVERSE SOLIDUS [Po] (\)

[12:20] <timotimo> m: "hello\0world\0".subst("\0", "\\u0000").say

[12:20] <camelia> rakudo-moar 030c4c: OUTPUT: ¬´hello\u0000world‚êÄ‚ê§¬ª

[12:21] <timotimo> perl6 -Ilib -e 'use JSON::Fast; say to-json "\0"'

[12:21] <timotimo> "\u0000"

[12:21] <naxieAlDle> timotimo: yes, interesting

[12:22] <timotimo> wanna write a correct & fast escaper for control characters for me?

[12:22] <naxieAlDle> timotimo: have no idea how to do it fast

[12:22] <timotimo> ugh :)

[12:22] <timotimo> certainly not with regex, i'd say

[12:23] <timotimo> actually, trans should be somewhat fast.

[12:23] <naxieAlDle> timotimo: if I recall correctly, there was another issue with combining characters

[12:23] <timotimo> ugh :)

[12:24] <naxieAlDle> timotimo: "ÃÖ" is supposed to be a string containing just the combiner alone

[12:24] <timotimo> ah, yeah

[12:24] <timotimo> how do we get that?

[12:24] <naxieAlDle> timotimo: but perl¬†6 has a different opinion, which is probably right‚Ä¶ but other json parsers disagree :)

[12:24] <timotimo> is that for parsing json?

[12:25] <timotimo> or does to-json F that up?

[12:25] * naxieAlDle tries to remember when this issue popped out

[12:25] <lizmat> re RT #130963 , perhaps we should allow a named parameter to Array.^paramerize, like Array[:default(Nil)] ?

[12:25] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130963

[12:26] <timotimo> i might want to work on the Uni level rather than the Str level to make from-json correct

[12:26] <naxieAlDle> timotimo: this is the ticket: https://github.com/moritz/json/issues/25

[12:29] <naxieAlDle> u: u+0000 u+0000 u+0000 u+0000

[12:29] <unicodable6> naxieAlDle, U+0000 <control-0000> [Cc] (control character)

[12:29] <unicodable6> naxieAlDle, 4 characters in total: https://gist.github.com/846f083ce4ea9ca00cfaa4c477c4d9a3

[12:30] <naxieAlDle> u: u+0000 u+0000 u+0022 U+005C

[12:30] <unicodable6> naxieAlDle, U+0000 <control-0000> [Cc] (control character)

[12:30] <unicodable6> naxieAlDle, 4 characters in total: https://gist.github.com/dbd93d73a5e9e41c0b31e97b7e802766

[12:30] <naxieAlDle> ah

[12:30] <naxieAlDle> right

[12:30] <naxieAlDle> u: ÃÖtest

[12:30] <unicodable6> naxieAlDle, Found nothing!

[12:30] <naxieAlDle> u: ÃÖ‚àû√ó

[12:30] <unicodable6> naxieAlDle, U+221E INFINITY [Sm] (‚àû)

[12:30] <unicodable6> naxieAlDle, U+00D7 MULTIPLICATION SIGN [Sm] (√ó)

[12:31] <naxieAlDle> nope‚Ä¶ I don't know then :)

[12:31] <timotimo> oh, also: when you .perl.EVAL a string starting with a combining character, it won't round-trip, i'd expect. it won't parse at all, probably

[12:32] <naxieAlDle> timotimo: but generally, I don't think I've seen any issues with unicodable when Pastebin::Gist switched to Tiny, except that it is so slow that it simply cannot manage to gist so many lines

[12:32] <timotimo> why are "many lines" a problem? isn't it just a string?

[12:32] <timotimo> maybe JSON::Tiny needs a faster escaping function, too

[12:33] <naxieAlDle> .subst .subst .subst .subst :)

[12:33] <timotimo> does it handle the control characters properly, then?

[12:33] <timotimo> yeah, .subst with one-character needles sucks

[12:33] <naxieAlDle> if I recall correctly, .trans wasn't any faster

[12:33] <timotimo> when was that tested?

[12:33] <timotimo> i recall liz made it much better at some point

[12:34] <naxieAlDle> timotimo: 3 months ago: https://github.com/timo/json_fast/commit/d638b2557012488d903b58bee45a4c60067f6ec6

[12:35] <naxieAlDle> timotimo: but whatever I know now, could very well be wrong today. So feel free to play with it :)

[12:36] <timotimo> that's not .trans

[12:36] <timotimo> that's just using constant strings instead of single-literal regexes

[12:36] <timotimo> which, yeah, is loads faster. i would have expected far more than 2x, tbh

[12:36] <naxieAlDle> yes, but at the time I suggested .trans, and I think it wasn't changed because it didn't bring any increase

[12:36] <timotimo> oh

[12:36] <timotimo> ok, i understand that

[12:37] <timotimo> i'm working on from-json losing lone combiners, btw

[12:37] <naxieAlDle> nice!

[12:37] <timotimo> m: say '"ÃÖ"'.Uni

[12:37] <camelia> rakudo-moar 030c4c: OUTPUT: ¬´No such method 'Uni' for invocant of type 'Str'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[12:38] <timotimo> hmm, how best to do this ...

[12:38] <naxieAlDle> timotimo: fwiw, this is the function that is used by unicodable: https://github.com/perl6/whateverable/blob/8281f80d2aca64613dad31812e301346daf6a59e/Unicodable.p6#L59-L68

[12:38] <naxieAlDle> timotimo: you can try converting the whole range (0..0x10FFFF) using it‚Ä¶ and then see what happens with JSON modules :)

[12:39] <timotimo> i'll definitely be losing codepoint-level information

[12:39] <timotimo> i should be using utf8-c8 all in all, i'd say?

[12:39] <naxieAlDle> I guess.

[12:40] <timotimo> hm.

[12:41] <timotimo> i'll have to figure out how best to deal with all of it

[12:41] <timotimo> do i deal with the characters it creates to deal with non-encodable utf8? i think json requires properly encoded utf8?

[12:42] <naxieAlDle> ü§∑

[12:43] <timotimo> really, JSON::Fast should be working on Uni level from the start

[12:59] <timotimo> oh lord

[12:59] <timotimo> i'll also have to deal with combining characters after escape sequences

[13:02] <timotimo> burgh. this sucks.

[13:53] <IOninja> .tell MasterDuke IIRC you fixed this ticket. Were any tests added? Would you please close it? https://rt.perl.org/Ticket/Display.html?id=126793#ticket-history

[13:53] <yoleaux2> IOninja: I'll pass your message to MasterDuke.

[14:16] <timotimo> perl6 -Ilib -MJSON::Fast -e 'say from-json(q{"ÃÖhaha"}).perl'

[14:16] <timotimo> "\\u0305haha"

[14:16] <timotimo> not quite, but almost!

[14:18] <timotimo> perl6 -Ilib -MJSON::Fast -e 'say from-json(q{"ÃÖhaha"}).perl'

[14:18] <timotimo> "\x[305]haha"

[14:18] <timotimo> better.

[14:22] <timotimo> oh, huh, i'm getting an ascii decode error

[15:12] <IOninja> This type constraint look bogus: https://github.com/rakudo/rakudo/blob/nom/src/core/Signature.pm#L6

[15:12] <IOninja> m: dd WHAT &infix:<+>.signature.count

[15:12] <camelia> rakudo-moar 030c4c: OUTPUT: ¬´Int‚ê§¬ª

[15:12] <IOninja> We rebind it to an Int somewhere along the way

[15:13] <IOninja> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Metamodel/BOOTSTRAP.nqp#L1405

[15:15] <IOninja> Here is where rebind happens: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/World.nqp#L2102-L2108

[15:41] <timotimo> now it properly escapes control characters

[15:43] <IOninja> t/spec/S17-supply/interval.t flopped on me

[15:44] <timotimo> i wonder how much slower i made it ;(

[15:44] <jnthn> IOninja: It probably uses sleep, so will be vulnerable to it

[15:44] <IOninja> Ah

[16:21] <IOninja> ZOFVM: Files=1228, Tests=132837, 122 wallclock secs (21.07 usr  3.60 sys + 2342.88 cusr 272.80 csys = 2640.35 CPU)

[16:37] <Geth> ¬¶ rakudo/nom: 032b283d5a | (Zoffix Znet)++ | src/core/operators.pm

[16:37] <Geth> ¬¶ rakudo/nom: Make infix:<‚àò> fake out original routine's .count and .arity

[16:37] <Geth> ¬¶ rakudo/nom:

[16:37] <Geth> ¬¶ rakudo/nom: - Mix in a role that provides faked out .count and .arity values

[16:37] <Geth> ¬¶ rakudo/nom:     that match those of the RHS's Callable; jnthn++ for the tip

[16:38] <Geth> ¬¶ rakudo/nom: - Makes composed routines usable in grep, map, infix:<‚àò>, and any

[16:38] <Geth> ¬¶ rakudo/nom:     others that change behaviour based on given Callable's .count

[16:38] <Geth> ¬¶ rakudo/nom:     or .arity

[16:38] <Geth> ¬¶ rakudo/nom: - Fixes RT#130891: https://rt.perl.org/Ticket/Display.html?id=130891

[16:38] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130891

[16:38] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/032b283d5a

[16:39] <Geth> ¬¶ roast: 270dcf82f2 | (Zoffix Znet)++ | S03-operators/composition.t

[16:39] <Geth> ¬¶ roast: Test infix:<‚àò> and infix:<o> keep RHS's .arity and .count

[16:39] <Geth> ¬¶ roast:

[16:39] <Geth> ¬¶ roast: RT#130891: https://rt.perl.org/Ticket/Display.html?id=130891

[16:39] <Geth> ¬¶ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/032b283d5a

[16:39] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/270dcf82f2

[16:39] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130891

[16:49] <timotimo> does somebody want to exercise JSON::Fast a little bit?

[16:55] <Geth> ¬¶ rakudo/nom: dde3407d38 | (Elizabeth Mattijsen)++ | src/core/IO/Path.pm

[16:55] <Geth> ¬¶ rakudo/nom: Make sure IO::Path.split *always* closes its file-handle

[16:55] <Geth> ¬¶ rakudo/nom:

[16:55] <Geth> ¬¶ rakudo/nom: By slurping the file, and then using Str.split.  This actually may

[16:55] <Geth> ¬¶ rakudo/nom: make it about 10% faster (at the expense of higher memory usage).

[16:55] <Geth> ¬¶ rakudo/nom: It also makes it work for all of the parameters that Str.split accepts.

[16:55] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dde3407d38

[17:13] <Geth> ¬¶ rakudo/nom: f91bf4f00c | (Elizabeth Mattijsen)++ | src/core/IO/Path.pm

[17:13] <Geth> ¬¶ rakudo/nom: Make sure IO::Path.split *always* closes its file-handle

[17:13] <Geth> ¬¶ rakudo/nom:

[17:13] <Geth> ¬¶ rakudo/nom: By slurping the file, and then using Str.split.  This actually may

[17:13] <Geth> ¬¶ rakudo/nom: make it about 10% faster (at the expense of higher memory usage).

[17:13] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f91bf4f00c

[17:14] <lizmat> Oops, that should have been .words  :-(

[17:14] <timotimo> ah, that's why! :)

[17:14] <lizmat> got my Terminal to crash 5x before I could enter the commit message

[17:14] <lizmat> without crashing

[17:15] <lizmat> and then the last time I forgot to s/split/words/

[17:15] <lizmat> grrrr

[17:15] * IOninja is slightly confused about such changes

[17:15] <IOninja> Like were I to add them to the IO Action Plan, they'd be in the "for 6.d" section.

[17:15] <lizmat> IOninja: ??

[17:15] <lizmat> why ?

[17:15] <lizmat> I see this as a bug fix, no?

[17:16] <IOninja> 'cause behaviour changed :) I dunno. If someone's code was passing an encoding option to open it no longer works.

[17:16] <lizmat> ah, ok, good points

[17:17] <IOninja> Well, I originally was fine with changing anything that doesn't break 6.c-errata right now. But I know people voiced concernes when http://rakudo.org/2017/02/26/advance-notice-of-significant-changes/ went out that perhaps stuff like this should be deferred to 6.d even if the changes dpnt

[17:18] <IOninja> 'don't break 6.cerrata... simply because many of the tests are poor

[17:18] <Geth> ¬¶ rakudo/nom: ed8d581265 | (Elizabeth Mattijsen)++ | src/core/IO/Path.pm

[17:18] <Geth> ¬¶ rakudo/nom: Need to keep params to open, so reverting this version

[17:18] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ed8d581265

[17:19] <IOninja> So in my notes I currently add anything that changes behaviour without maintining backwards-compattible support for doing under 6.d.PREVIEW pragma so the change would be only in 6.d

[17:22] <lizmat> afk&

[17:23] <lizmat> IOninja: leaving IO::Path.split/words in your caring hands  :-)

[17:23] <lizmat> really afk&

[17:23] <IOninja> Alright :)

[17:25] <TimToady> IOninja: if your patch copies the RHS's incoming signature, does it copy the LHS's return type?

[17:25] <IOninja> TimToady: nope

[17:25] <IOninja> It doesn't copy the signature, it mixes a role that lies about .arity and .count

[17:26] <TimToady> maybe it could lie about .of then

[17:26] <IOninja> OK

[17:28] <TimToady> 'course, maybe we'll want to know purity someday as well...dunno where it stops...well, I do know, but don't want to reinvent Haskell

[17:28] <IOninja> :)

[17:52] <Geth> ¬¶ rakudo/nom: cb149a836e | (Zoffix Znet)++ | src/core/operators.pm

[17:52] <Geth> ¬¶ rakudo/nom: Make infix:<‚àò>/infix:<o> fake .of

[17:52] <Geth> ¬¶ rakudo/nom:

[17:52] <Geth> ¬¶ rakudo/nom: Take it from LHS and fake it on the returned block

[17:52] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cb149a836e

[17:53] <Geth> ¬¶ roast: f31eeabab5 | (Zoffix Znet)++ | S03-operators/composition.t

[17:53] <Geth> ¬¶ roast: Test infix:<‚àò>/infix:<o> fake .of

[17:53] <Geth> ¬¶ roast:

[17:53] <Geth> ¬¶ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/cb149a836e

[17:53] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/f31eeabab5

[17:54] <TimToady> and yes, the intent was to put %*HOW into the braid eventually too, just lacking in round tuition

[18:36] <Geth> ¬¶ rakudo/nom: f9294c3837 | (Zoffix Znet)++ | src/core/operators.pm

[18:36] <Geth> ¬¶ rakudo/nom: Add `my` to FakeSignature infix:<‚àò>'s role

[18:36] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f9294c3837

[19:20] <Geth> ¬¶ roast: fe3b86e171 | usev6++ | 2 files

[19:20] <Geth> ¬¶ roast: Adjust fudging for JVM

[19:20] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/fe3b86e171

[20:36] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make sure IO::Path.split *always* closes its file-handle

[20:36] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/209425405 https://github.com/rakudo/rakudo/compare/032b283d5ac8...dde3407d38a8

[20:36] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[20:39] <IOninja> Command failed (status 32768): git clone https://github.com/perl6/nqp.git nqp

[20:40] <Geth> ¬¶ rakudo/nom: 68a40f7d95 | TimToady++ | src/Perl6/Actions.nqp

[20:40] <Geth> ¬¶ rakudo/nom: propagate purity up through meta-meta asts

[20:40] <Geth> ¬¶ rakudo/nom:

[20:40] <Geth> ¬¶ rakudo/nom: We can do this because, by and large, operators must be predeclared or

[20:40] <Geth> ¬¶ rakudo/nom: the metaops wouldn't recognize them in the first place.  (The setting

[20:40] <Geth> ¬¶ rakudo/nom: violates this in spots while bootstrapping, but doesn't happen to run

[20:40] <Geth> ¬¶ rakudo/nom: afoul the "useless use" checks that depend on it.)

[20:40] <Geth> ¬¶ rakudo/nom:

[20:40] <Geth> ¬¶ rakudo/nom: Previously, Zxx simply assumed that no one in their right mind would

[20:40] <Geth> ¬¶ rakudo/nom: use that with side effects on the left.  Now, since xx isn't pure,

[20:40] <Geth> ¬¶ rakudo/nom: it allows them.

[20:40] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/68a40f7d95

[20:40] <TimToady> doubtless that fixes a bug report of two, but I'm going to go eat lunch now...

[20:41] <IOninja> \o/

[21:22] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make sure IO::Path.split *always* closes its file-handle

[21:22] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/209433504 https://github.com/rakudo/rakudo/compare/dde3407d38a8...f91bf4f00c53

[21:22] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[22:29] <MasterDuke> IOninja: i did part of the work of making sure case-insensitive comparisons use fc instead of uc/lc, samcv is working on the rest

[22:29] <yoleaux2> 13:53Z <IOninja> MasterDuke: IIRC you fixed this ticket. Were any tests added? Would you please close it? https://rt.perl.org/Ticket/Display.html?id=126793#ticket-history

[22:31] <MasterDuke> i believe she's already written some tests, i'll try to add some more

[23:17] <Geth> ¬¶ roast: 40c7c4b37b | (Daniel Green)++ | S03-operators/repeat.t

[23:17] <Geth> ¬¶ roast: Test that creating too large strings throws

[23:17] <Geth> ¬¶ roast:

[23:17] <Geth> ¬¶ roast: For https://rt.perl.org/Ticket/Display.html?id=127971

[23:17] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/40c7c4b37b
