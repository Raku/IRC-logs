[08:16] <Geth> ¦ rakudo/nom: a2090821b4 | (Timo Paulssen)++ | src/core/IO/Socket.pm

[08:16] <Geth> ¦ rakudo/nom: make sure IO::Socket passes a list to set-line-separators

[08:16] <Geth> ¦ rakudo/nom:

[08:16] <Geth> ¦ rakudo/nom: should unbreak Net::SMTP

[08:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a2090821b4

[08:16] <FROGGS> o/

[08:33] <nine> Good morning!

[08:37] <timotimo> greetings nine

[08:39] <Geth> ¦ roast: ab290effa1 | (Timo Paulssen)++ | S32-io/IO-Socket-INET.t

[08:39] <Geth> ¦ roast: test setting nl-in before the first get in IO::Socket::INET

[08:39] <Geth> ¦ roast:

[08:39] <Geth> ¦ roast: this used to explode in Net::SMTP

[08:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ab290effa1

[08:53] <lizmat> Files=1209, Tests=64165, 220 wallclock secs (13.29 usr  5.03 sys + 1338.71 cusr 136.92 csys = 1493.95 CPU)

[09:00] <nine> I somehow need to find my Perl 6 mojo again. Haven't done anything useful in weeks :/

[09:18] <Geth> ¦ nqp: 8453fac89e | (Stefan Seifert)++ | src/HLL/Compiler.nqp

[09:18] <Geth> ¦ nqp: Factor out part of compile for easier re-use.

[09:18] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/8453fac89e

[11:24] <Geth> ¦ rakudo/nom: e1e9091f74 | (Timo Paulssen)++ | src/core/CompUnit/Repository/FileSystem.pm

[11:24] <Geth> ¦ rakudo/nom: stop looking after finding a matching module file

[11:24] <Geth> ¦ rakudo/nom:

[11:24] <Geth> ¦ rakudo/nom: if both a .pm6 and a .pm exist with a matching name, only the

[11:24] <Geth> ¦ rakudo/nom: .pm would be used, which is clearly not right.

[11:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e1e9091f74

[12:10] * lizmat is contemplating https://perl6.party/post/The-Hot-New-Language-Named-Rakudo over the weekend

[13:15] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1109: Only create Exception messages when gisting

[13:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1109

[13:24] <Geth> ¦ rakudo/nom: 1a4d94930c | (Daniel Green)++ | src/core/Exception.pm

[13:24] <Geth> ¦ rakudo/nom: Only create Exception messages when gisting

[13:24] <Geth> ¦ rakudo/nom:

[13:24] <Geth> ¦ rakudo/nom: With the recent change to suggest similar method names when throwing

[13:24] <Geth> ¦ rakudo/nom: X::Method::NotFound, it got a lot slower to try possible methods (e.g.,

[13:24] <Geth> ¦ rakudo/nom: `try Int.sin`) even if you didn't care about the exception message. This

[13:24] <Geth> ¦ rakudo/nom: commit removes the .message call from .throw and puts it in both

[13:24] <Geth> ¦ rakudo/nom: branches of .gist.

[13:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1a4d94930c

[13:24] <Geth> ¦ rakudo/nom: 60b9acef30 | lizmat++ (committed using GitHub Web editor) | src/core/Exception.pm

[13:24] <Geth> ¦ rakudo/nom: Merge pull request #1109 from MasterDuke17/only_create_Exception_messages_when_gisting

[13:24] <Geth> ¦ rakudo/nom:

[13:24] <Geth> ¦ rakudo/nom: Only create Exception messages when gisting

[13:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/60b9acef30

[13:25] <jnthn> I was just reviewing that

[13:25] <jnthn> It has the slight issue that we're now throwing exceptions with a message unset

[13:26] <jnthn> Which means that if they're ever unhandled to the degree that they're spat out by the VM, then they'll all have empty messages

[13:26] <MasterDuke> how would that happen?

[13:26] <jnthn> MasterDuke: When something went very wrong, usually

[13:27] <jnthn> So "normally it won't".

[13:27] <llfourn> MasterDuke: did that pass spectests?

[13:27] <MasterDuke> llfourn: yep

[13:27] <llfourn> oh nice

[13:28] <jnthn> I think we can leave the change in and see what happens

[13:29] <jnthn> But if you have a situation where you are seeing a crash with no exception message, just a backtrace, then this commit will be worth looking at.

[13:29] <MasterDuke> put in a placeholder message in .throw that doesn't call .message?

[13:29] <MasterDuke> or is that no better than no message?

[13:29] <jnthn> Not really

[13:29] <jnthn> tbh I'd probably have just overridden gist

[13:30] <jnthn> And left message as a cheap "Method 'foo' not found on invocant of type Bar"

[13:30] <jnthn> And put the espensive stuff in the .gist

[13:30] <jnthn> Though that probably has trade-offs too

[13:30] <jnthn> Maybe let's leave it as it is now and see if it actually bites us

[13:31] <MasterDuke> cool

[13:31] <jnthn> Because it only will if we manage to miss all of the Perl 6 installed exception handlers

[13:31] <jnthn> The place I fear it biting us is when compiling CORE.setting

[13:31] <jnthn> But even maybe then it could be OK

[13:32] <jnthn> Guess we've a week until the next release; we'll keep an eye on it :)

[13:32] <MasterDuke> and i didn't time anything other than the snippet in the PR, but this should speed up all exceptions that aren't gisted, though probably none quite so much as that Method::NotFound

[13:33] <jnthn> Indeed

[14:11] <Geth> ¦ roast: 0b36afb8b4 | (Elizabeth Mattijsen)++ | S15-unicode-information/uniprop.t

[14:11] <Geth> ¦ roast: Untodo now passing high codepoint test

[14:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0b36afb8b4

[14:12] <dogbert17> if anyone is insterested in taking a peek at some new ASAN barfage then look no further :-) https://gist.github.com/dogbert17/db210a75ab12862c46c19233a0579fd9

[14:19] <jnthn> dogbert17: Please file that as a MoarVM issue so it doesn't get forgotten :)

[14:21] <dogbert17> do you really think that Zoffix is innocent :)

[14:22] * dogbert17 creates issue ...

[14:24] <jnthn> This time, maybe... :)

[14:26] <dogbert17> done, https://github.com/MoarVM/MoarVM/issues/611

[14:27] <jnthn> Thanks :)

[14:27] <MasterDuke> .oO(who needs automated continuous integration when they have a dogbert17++?)

[14:28] <dogbert17> btw, don't know if you have backlogged today but samcv's font program works when spesh is disabled

[14:29] <dogbert17> MasterDuke: at $work I'm far from being a role model when it comes to writing tests

[14:30] <MasterDuke> heh, same here. in fact, not sure if i've ever written a test at $work

[14:30] <dogbert17> totally OT, I have received most components for my new computer, only the PSU is still on order

[14:31] <MasterDuke> i'm hoping i'll only need a MB+CPU+RAM and can re-use everything else

[14:32] <dogbert17> reuse is good, my current PSU should probably work fine, also a Seasonic, but it's more than 10 years old, it's already been reused once

[14:36] <MasterDuke> i think my current setup finally ditched the last part carried along from when i first built it in 1999 when i did the most recent CPU+MB+RAM upgrade in 2010

[14:37] <dogbert17> cool, my current system is also from 2010

[14:38] <lizmat> .ask ab5tract do we agree that [(^)] $a, $b, $c is the same as ($a (^) $b) (^) $c ?

[14:38] <yoleaux> lizmat: I'll pass your message to ab5tract.

[14:52] <dogbert17> if I have a small program, ~10 lines, which crashes during a normal run but works when MVM_SPESH_DISABLE=1, is there anything I can do to narrow things down?

[14:54] <llfourn> dogbert17: what does it crash with?

[14:55] <llfourn> (the error)

[14:56] <dogbert17> ==6370== ERROR: AddressSanitizer: heap-use-after-free on address 0x8ad139c0 at pc 0xb58a1400 bp 0xbf8a40a8 sp 0xbf8a409c

[14:56] <dogbert17> READ of size 4 at 0x8ad139c0 thread T0

[14:56] <dogbert17> #0 0xb58a13ff in gc_mark /home/dogbert/repos/rakudo/nqp/MoarVM/src/6model/reprs/MVMCallCapture.c:50

[14:57] <llfourn> oh the one above. Sorry I have no idea, but would also love to know.

[14:57] <MasterDuke> that looks like the same thing the whateverables are hitting and timotimo was trying to figure out yesterday

[14:59] <dogbert17> here's the code, it's a slightly slaughtered test from a file called .../stress.t https://gist.github.com/dogbert17/0b0baed4ac8aaf762a3e26f8c74110f1

[14:59] <moritz> dogbert17: you can try with leaving out SPESH_DISABLE, and instead only run with MVM_SPESH_INLINE_DISABLE or MVM_SPESH_OSR_DISABLE

[14:59] <dogbert17> moritz: will do

[14:59] <moritz> dogbert17: if you 'git grep getenv' in moarvm, you get an idea of what env variables are supported

[15:02] <dogbert17> moritz: it fails with both MVM_SPESH_INLINE_DISABLE and MVM_SPESH_OSR_DISABLE

[15:02] <moritz> dogbert17: that kinda suggests it's a generic spesh bug

[15:03] <moritz> and likely lucky, because inlining is rather tricky :-)

[15:03] <dogbert17> I generated a spesh log, it doesn't tell me anything and besides, it's 25 megs

[15:06] <[Tux]> This is Rakudo version 2017.06-176-g60b9acef3 built on MoarVM version 2017.06-49-g6011f876

[15:06] <[Tux]> csv-ip5xs        2.529

[15:06] <[Tux]> test            12.381

[15:06] <[Tux]> test-t           4.133 - 4.138

[15:06] <[Tux]> csv-parser      12.072

[15:06] <MasterDuke> dogbert17: maybe trying running it in rr, saving the recording, and seeing if timotimo can make anything from it

[15:09] <dogbert17> MasterDuke: rr: command not found :( where can I find it?

[15:10] <AlexDaniel> should be in your distro repos

[15:10] <AlexDaniel> (e.g. apt install rr)

[15:11] <AlexDaniel> MasterDuke: “that looks like the same thing the whateverables are hitting” I'm pretty sure [Coke] was hitting it yesterday as well

[15:11] <AlexDaniel> although he didn't give any details

[15:14] <AlexDaniel> dogbert17: also, “Fails when run normally but works with MVM_SPESH_DISABLE=1” is probably not entirely true

[15:14] <AlexDaniel> maybe bump ^80 to something higher to see it fail again

[15:15] <AlexDaniel> buggable: status

[15:15] <AlexDaniel> buggable: help

[15:15] <buggable> AlexDaniel, tags | tag SOMETAG | eco | eco Some search term | author github username | speed | testers CPANTesters report ID

[15:15] <AlexDaniel> NeuralAnomaly: status

[15:15] <NeuralAnomaly> AlexDaniel, [✘] Next release will be in 6 days and 13 hours. Since last release, there are 22 new still-open tickets (1 unreviewed and 0 blockers) and 179 unreviewed commits. See http://perl6.fail/release/stats for details

[15:16] <Geth> ¦ rakudo/nom: 80b3e89b53 | (Elizabeth Mattijsen)++ | src/core/set_symmetric_difference.pm

[15:16] <Geth> ¦ rakudo/nom: Replace different type handling by multiple candidates

[15:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/80b3e89b53

[15:16] <dogbert17> it wasn't in the repo, not with that name anyway, trying to build from src

[15:16] <AlexDaniel> what distro?

[15:17] <dogbert17> Linux Mint

[15:17] <AlexDaniel> oh, I see, it's not even in debian stable probably

[15:18] <moritz> is that mozilla's tool for debugging stuff?

[15:18] <dogbert17> Fails => Fails with ASAN barfage

[15:19] <AlexDaniel> moritz: yes

[15:20] <AlexDaniel> ah, by the way, do we have a ticket already?

[15:21] <AlexDaniel> .tell timotimo https://irclog.perlgeek.de/perl6-dev/2017-07-08#i_14844351 same issue? But with a lot less code to reproduce

[15:21] <yoleaux> AlexDaniel: I'll pass your message to timotimo.

[15:22] <AlexDaniel> MasterDuke: hey, let's bisect it?

[15:22] <AlexDaniel> MasterDuke: dogbert17's code doesn't require anything

[15:22] <AlexDaniel> except no restricted setting, but that we can do

[15:24] <moritz> well, you might need ASAN to reproduce it reliably

[15:29] <AlexDaniel> well, whateverables are reliably not working, so I'm hoping that it should be ok…

[15:33] * dogbert17 blah, rr doesn't work under VirtualBox it seems :(

[15:40] <timotimo> AlexDaniel: different issue

[15:40] <yoleaux> 15:21Z <AlexDaniel> timotimo: https://irclog.perlgeek.de/perl6-dev/2017-07-08#i_14844351 same issue? But with a lot less code to reproduce

[15:40] <AlexDaniel> hm ok

[15:41] <timotimo> the other one, though, the one in MVMCallCapture, that's probably the same issue

[15:51] <timotimo> i'm glad i was able to at least fix two little things today

[15:52] <dogbert17> perhaps you can fix a third as well :)

[15:54] <AlexDaniel> dogbert17: well, with your code, I got it bisected to 92c187d2dc. I can't get the segfault on any commit before that

[15:54] <AlexDaniel> dogbert17: this makes sense in a way because it touched Proc::Async, but obviously that's not the reason why it segfaults

[15:57] <dogbert17> AlexDaniel: perhaps you should try using the bots with a version preceeding that commit then

[15:57] * AlexDaniel laughs

[15:57] <dogbert17> :)

[15:57] <AlexDaniel> well, it may work :D

[15:58] <AlexDaniel> dogbert17: but really, I bumped it to “for ^1000”, segfaults reliably on 92c187d2dc but not on commits before it

[16:01] <dogbert17> I could try reverting that change in my environment and see if the example program works

[16:03] <AlexDaniel> pretty sure it will

[16:03] <AlexDaniel> but that doesn't really help :|

[16:04] <dogbert17> but it might give jnthn and timotimo a clue as to what's going on

[16:07] <nine> Well destructuring a slurpy arg is probably not used all that often.

[16:08] <timotimo> is this about the MVMCallCapture explosion?

[16:09] <dogbert17> yes, i.e. https://gist.github.com/dogbert17/0b0baed4ac8aaf762a3e26f8c74110f1

[16:09] <dogbert17> the explosion vanishes if MVM_SPESH_DISABLE=1

[16:09] <timotimo> i believe this will happen whenever there's a callsite that's not interned, for example because it has some kind of flattening going on

[16:10] <dogbert17> AlexDaniel suspects this commit: https://github.com/rakudo/rakudo/commit/92c187d2dc395f7ec31ada38ee0724a9dba6f13e

[16:10] <AlexDaniel> well I don't really suspect it, but the segfault appeared after that commit, yes

[16:11] <timotimo> we might want to hotfix this by having @args again but passing path => @args[0]

[16:12] <dogbert17> my rebuild takes forever, suits me right, have both ASAN and --no-optimize enabled

[16:14] <nine> How can I run rakudo with ASAN?

[16:14] <timotimo> asan is something you have to compile your stuff with

[16:14] <timotimo> so you'd have to pass --asan to moarvm's Configure.pl

[16:15] <nine> I did that. Anything else?

[16:15] <timotimo> nope. every invocation of rakudo will now be super slow

[16:15] <dogbert17> but much faster than valgrind

[16:15] <timotimo> yup

[16:17] <nine> Ok, now my moarvm just segfaults :_

[16:17] <nine> :)

[16:19] <timotimo> it might be necessary to recompile rakudo

[16:19] <timotimo> because rakudo has that shared library it loads

[16:19] <timotimo> the extops and the containers and such

[16:19] <nine> I tried. But even a rakudo/install/bin/moar just segfaults

[16:19] <timotimo> wow

[16:19] <dogbert17> reverting https://github.com/rakudo/rakudo/commit/92c187d2dc395f7ec31ada38ee0724a9dba6f13e seems to do the trick

[16:19] <nine> #1  0x00007ffff38f31c1 in __asan::MaybeInstallSigaction (signum=signum@entry=11, handler=0x7ffff38f3140 <__asan::ASAN_OnSIGSEGV(int, siginfo_t*, void*)>) at ../../../../libsanitizer/asan/asan_posix.cc:39

[16:20] <nine> Even tried a make realclean and built MoarVM again

[16:20] <AlexDaniel> dogbert17: try a higher number of iterations please

[16:21] <AlexDaniel> dogbert17: because I've seen things not segfault otherwise

[16:21] <AlexDaniel> like 10000 or something :)

[16:22] <dogbert17> works at 480

[16:26] <dogbert17> also works with 2480 iterations

[16:28] * nine utterly failed at golfing this issue

[16:29] <nine> oooooh!

[16:29] <nine> The nqp::force_gc makes a huge difference :)

[16:30] <nine> Maybe I should have looked at the failing example instead of writing one from scratch :P

[16:31] <nine> m: use nqp; class Foo { multi method new(*@args ($p, *@a), *%_) { self.bless(:$p, :@a, |%_) } } ; my @a = <foo bar baz quz>; my int $i = 0; sub foo(*@a) { with Foo.new(|@a) { $i++ }; $i--; $i++; say $i.Int; nqp::force_gc; }; for ^10000 { foo(|@a); }

[16:31] <camelia> rakudo-moar 80b3e8: OUTPUT: «(signal SEGV)1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30␤31␤32␤33␤34␤35␤36␤37␤38␤39␤40␤41␤42␤43␤44␤45␤46␤47␤48␤49␤50␤…»

[16:31] <nine> Smallest example so far...

[16:32] <dogbert17> nine: and if you MVM_SPESH_DISABLE=1

[16:34] <dogbert17> AlexDaniel: 5000 iterations also works

[16:34] <nine> dogbert17: then it succeeds

[16:34] <dogbert17> that should be quite a clue for our speshialists :-)

[16:35] <nine> Actually it sometimes even runs to completion with spesh enabled

[16:35] <nine> Though most of the time it segfaults after 79 or 258 iterations

[16:35] <dogbert17> I bet that it would stop if you had ASAN working

[16:36] <nine> Well if ASAN didn't completely kill my moarvm I'd be happy to test :/

[16:36] <dogbert17> you could do valgrind ofc but it will be sloooow

[16:36] <nine> Need to leave for dinner now. If someone would be so kind to add my golfed version to the bug report, please :)

[16:37] <dogbert17> timotimo, your hot fix is beginning to sound tempting :-)

[16:38] <dogbert17> *hotfix

[16:40] <dogbert17> hmm, do we have bug report?

[16:47] <MasterDuke> asan output of nine's example: https://gist.github.com/MasterDuke17/fc12f33fd8e271b0b15bf2acd0d8ef55

[16:52] <MasterDuke> the summary and consumed views in heaptrack of running Zoffix's perl6-Toaster webapp and doing a couple gets (leaks a lot of memory, believed to be due to DBIish): http://i.imgur.com/N8mi3e2.png http://i.imgur.com/FkKudKN.png

[16:54] <Zoffix> wow that app looks really cool

[16:57] <dogbert17> Zoffix: how's your studies going, have you passed 25% ?

[17:01] <Zoffix> m: printf "%.2f", 201/831

[17:01] <camelia> rakudo-moar 80b3e8: OUTPUT: «0.24»

[17:01] <Zoffix> Nope

[17:01] <Zoffix> I didn't do any this week, though I started again about 15 minutes ago.

[17:02] <dogbert17> have you backlogged? one of your commits seems to have uncovered a spesh bug

[17:03] <Zoffix> No. Which commit?

[17:04] <dogbert17> https://github.com/rakudo/rakudo/commit/92c187d2dc395f7ec31ada38ee0724a9dba6f13e

[17:05] <Zoffix> ok

[17:06] <dogbert17> is it possible to get the effect you want without the destructuring?

[17:06] <Zoffix> multi method new(*@args, *%_) { my $path = @args.shift; self.bless(:$path, :@args, |%_) }

[17:06] <Zoffix> Probably faster too

[17:06] <dogbert17> cool

[17:08] <Zoffix> We still have a kludge for bit shift ops: https://github.com/rakudo/rakudo/blob/80b3e89/src/core/Int.pm#L400-L415

[17:08] <Zoffix> https://rt.perl.org/Ticket/Display.html?id=131306

[17:09] <Zoffix> m: use nqp; class Foo { multi method new(*@a, *%_) { my $p = @a.shift; self.bless(:$p, :@a, |%_) } } ; my @a = <foo bar baz quz>; my int $i = 0; sub foo(*@a) { with Foo.new(|@a) { $i++ }; $i--; $i++; say $i.Int; nqp::force_gc; }; for ^10000 { foo(|@a); }

[17:09] <camelia> rakudo-moar 80b3e8: OUTPUT: «1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30␤31␤32␤33␤34␤35␤36␤37␤38␤39␤40␤41␤42␤43␤44␤45␤46␤47␤48␤49␤50␤51␤52␤53…»

[17:09] <Zoffix> m: use nqp; class Foo { multi method new(*@a, *%_) { my $p = @a.shift; self.bless(:$p, :@a, |%_) } } ; my @a = <foo bar baz quz>; my int $i = 0; sub foo(*@a) { with Foo.new(|@a) { $i++ }; $i--; $i++; say $i.Int; nqp::force_gc; }; for ^10000 { foo(|@a); }

[17:09] <camelia> rakudo-moar 80b3e8: OUTPUT: «1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30␤31␤32␤33␤34␤35␤36␤37␤38␤39␤40␤41␤42␤43␤44␤45␤46␤47␤48␤49␤50␤51␤52␤53…»

[17:11] <dogbert17> what happens if you run it locally?

[17:11] <Zoffix> m: class Foo { method x (*@ ($a, *@b)) {} }; for ^100_000 { $ = Foo.x: 1, 2, 3, 4 }; say now - INIT now

[17:11] <camelia> rakudo-moar 80b3e8: OUTPUT: «3.1004012␤»

[17:11] <Zoffix> m: class Foo { method x (*@b) {$ = @b.shift} }; for ^100_000 { $ = Foo.x: 1, 2, 3, 4 }; say now - INIT now

[17:11] <camelia> rakudo-moar 80b3e8: OUTPUT: «0.324994␤»

[17:11] <Zoffix> m: say 3.1/.32

[17:11] <camelia> rakudo-moar 80b3e8: OUTPUT: «9.6875␤»

[17:11] <dogbert17> that's quite some difference

[17:15] <dogbert17> is the correct term for stuff like '*@args ($p, *@a)' parameter destructuring?

[17:15] <Zoffix> ¯\_(ツ)_/¯

[17:16] <dogbert17> ok, I'll write a MoarVM issue for that

[17:24] <dogbert17> ok, https://github.com/MoarVM/MoarVM/issues/612

[17:25] <dogbert17> so, who should implement Zoffix optimized workaround ?

[17:26] <Zoffix> I was about to commit, but it's wrong

[17:26] <Zoffix> m: class Foo { method x (*@b where .so) {$ = @b.shift} }; for ^100_000 { $ = Foo.x: 1, 2, 3, 4 }; say now - INIT now

[17:26] <camelia> rakudo-moar 80b3e8: OUTPUT: «0.5779238␤»

[17:26] <Zoffix> Right way is still faster tho

[17:27] <dogbert17> Zoffix++, I suspect that your fix will make quite a few people very happy

[17:27] <Zoffix> It's not a fix. It's a workaround a problem :)

[17:28] <dogbert17> :)

[17:28] <dogbert17> and you have an issue to refer to

[17:29] <dogbert17> I tried a sloppy grep of the Rakudo src but I only managed to find one case of parameter destructuring (the one you're changing), but there has to be more of them or ?

[17:40] <Zoffix> Why has to be?

[17:40] <Zoffix> ZOFFLOP: t/spec/S32-io/open.t

[17:42] <Geth> ¦ rakudo/nom: f6d4fbd24b | (Zoffix Znet)++ | src/core/Proc/Async.pm

[17:42] <Geth> ¦ rakudo/nom: Work around SEGV on sig unpacking

[17:42] <Geth> ¦ rakudo/nom:

[17:42] <Geth> ¦ rakudo/nom: - Also makes invocation 6x faster

[17:42] <Geth> ¦ rakudo/nom: - Bug worked around: https://github.com/MoarVM/MoarVM/issues/612

[17:42] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f6d4fbd24b

[17:42] <Zoffix> It would've been here, but it's already using the `where .so` thing: https://github.com/rakudo/rakudo/blob/nom/src/core/Proc.pm#L221

[17:43] * dogbert17 rebuilds

[17:51] <dogbert17> samcv's Font program now works

[17:52] <dogbert17> perhaps the bots will work better as well

[17:56] <Geth> ¦ rakudo/nom: b391692644 | (Elizabeth Mattijsen)++ | src/core/set_symmetric_difference.pm

[17:56] <Geth> ¦ rakudo/nom: Fix a few edge cases of (^) wrt QuantHash type permutations

[17:56] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b391692644

[18:03] <AlexDaniel> timotimo: so should I just rebuild rakudo on the server and enjoy now working bots?

[18:04] <AlexDaniel> .tell [Coke] https://irclog.perlgeek.de/perl6-dev/2017-07-08#i_14844908

[18:04] <yoleaux> AlexDaniel: I'll pass your message to [Coke].

[18:04] <AlexDaniel> .tell [Coke] this may help your Proc::Async issue

[18:04] <yoleaux> AlexDaniel: I'll pass your message to [Coke].

[18:10] <dogbert17> AlexDaniel: Zoffix has worked around the problem

[18:10] <AlexDaniel> yes, I see

[18:16] <Geth> ¦ rakudo/nom: 05c255c14b | (Elizabeth Mattijsen)++ | src/core/set_symmetric_difference.pm

[18:16] <Geth> ¦ rakudo/nom: Simplify [(^)] for 2+ with Baggy semantics

[18:16] <Geth> ¦ rakudo/nom:

[18:16] <Geth> ¦ rakudo/nom: Fixes the failing test in S03-operator/mix.t

[18:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/05c255c14b

[18:18] <lizmat> .tell ab5tract https://github.com/rakudo/rakudo/commit/05c255c14b

[18:18] <yoleaux> lizmat: I'll pass your message to ab5tract.

[18:18] <dogbert17> afk &

[18:21] <MasterDuke> huh, earlier today i built rakudo with asan, but now even nqp won't build

[18:22] <MasterDuke> https://gist.github.com/MasterDuke17/3f461a964e0a92426a5a923543b6e454

[18:23] <lizmat> afk again&

[18:23] <MasterDuke> moar/nqp/rakudo all at HEAD

[18:36] <Zoffix> damn, I'm still getting "Failed to rename" with precomp on Windows

[22:41] <Geth> ¦ roast: 20c194f0f4 | (Samantha McVey)++ | S17-procasync/stress.t

[22:41] <Geth> ¦ roast: Let S17-procasync/stress.t be launched from roast folder

[22:41] <Geth> ¦ roast:

[22:41] <Geth> ¦ roast: Previously it had to be launched from t/spec/ assuming it was in

[22:41] <Geth> ¦ roast: rakudo's folder. This fixes that so it can be started from both.

[22:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/20c194f0f4

[23:31] <samcv> wow. i just got all Emoji V4.0 passing. and no more of GraphemeClusterBreak.t failing

[23:31] <samcv> 240 emoji in one swoop

[23:32] <samcv> :D

[23:52] <Zoffix> samcv++
