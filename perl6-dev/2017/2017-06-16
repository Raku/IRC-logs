[01:06] <eveo> Thanks. Fixed.

[02:41] <ugexe> eveo: https://github.com/labster/p6-file-directory-tree/commit/48d3b3da48ae46512b3c664590c53b01de606519#diff-53b8959a065de77c4e07c0a7d730005bR28

[02:41] <ugexe> (thats line 28 if not clear)

[02:41] <ugexe> windows blows up there... dunno if its supposed to or not

[02:42] <ugexe> Failed to create directory 'C:\Users\Nick\AppData\Local\Temp\file-directory-tree-module-tests\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a\a' with mode '0o777': Failed to mkdir: 206

[02:45] <ugexe> must be the path limit length

[02:50] <geekosaur> isn't there like a 64 character limit without using the new format and the APIs that support it?

[02:51] <ugexe> the above is 249 characters

[02:52] <ugexe> but yeah its probably a limitation from the dos subsystem

[02:54] <ugexe> i would have thought that got avoided though, since we can get around other limitations from that like what is allowed in a file name

[02:54] <geekosaur> ohh, it's actually 260 without the \\?\ thing

[02:55] <geekosaur> amusingly it's often 255 *with* \\?\

[02:55] <ugexe> heh, ecosystem needs a Spec::UNC

[02:56] <geekosaur> (has to be a new enough NTFS to support more)

[03:01] <ugexe> i wonder what happens if your home directory is over 260 characters

[03:46] * BenGoldberg gives up for the night.

[06:36] <[Tux]> This is Rakudo version 2017.05-452-gcc4d9091d built on MoarVM version 2017.05-100-g5ea6aaab

[06:36] <[Tux]> csv-ip5xs        2.523

[06:36] <[Tux]> test            12.557

[06:36] <[Tux]> test-t           4.071 - 4.293

[06:36] <[Tux]> csv-parser      12.561

[06:51] <samcv> ugexe, i'm sure things would randomly freeze. anything not using the newer api heh

[07:49] <Geth> ¬¶ rakudo/nom: 96e6b338c1 | (Samantha McVey)++ | src/Perl6/ModuleLoader.nqp

[07:49] <Geth> ¬¶ rakudo/nom: Fix ModuleLoader.nqp so RAKUDO_MODULE_DEBUG works the same as elsewhere

[07:49] <Geth> ¬¶ rakudo/nom:

[07:49] <Geth> ¬¶ rakudo/nom: Fixes a bug that would cause Rakudo to die during compilation

[07:49] <Geth> ¬¶ rakudo/nom: if RAKUDO_MODULE_DEBUG were set to anything other than a number. This was

[07:49] <Geth> ¬¶ rakudo/nom: discovered by the Rakudo AppImage builder here:

[07:49] <Geth> ¬¶ rakudo/nom: https://travis-ci.org/samcv/rakudo-appimage-module-test-automation/jobs/242732276#L1204

[07:49] <Geth> ¬¶ rakudo/nom:

[07:49] <Geth> ¬¶ rakudo/nom: <‚Ä¶commit message has 10 more lines‚Ä¶>

[07:49] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/96e6b338c1

[07:49] <Geth> ¬¶ rakudo/nom: 5facb268e4 | niner++ (committed using GitHub Web editor) | src/Perl6/ModuleLoader.nqp

[07:49] <Geth> ¬¶ rakudo/nom: Merge pull request #1101 from samcv/RAKUDO_MODULE_DEBUG

[07:49] <Geth> ¬¶ rakudo/nom:

[07:49] <Geth> ¬¶ rakudo/nom: Fix ModuleLoader.nqp so RAKUDO_MODULE_DEBUG works the same as elsewhere

[07:49] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5facb268e4

[07:51] <samcv> thanks nine

[09:45] <dogbert17_> [Tux]: impressive timings, maybe jnthn will bring test-t under 4 secs today :)

[10:01] <nine> Sadly csv-ip5xs is still quite a bit slower than it used to be.

[10:03] <dogbert17_> nine: any idea what might have happened with it?

[10:03] <nine> dogbert17_: none at all :/

[10:04] <dogbert17_> :(

[10:04] <dogbert17_> and how's your Ryzen rig performing?

[10:28] <nine> dogbert17_: just excellent :) The random freezes I had initially once or twice a week seem to have vanished with some update. Thing is just that now that I cannot hear my computer anymore, I've noticed a lot of noises my flat makes by itself.

[10:28] <nine> Probably from the ventilation system

[10:50] <nine> Good stuff on benchmarks: https://perf.readthedocs.io/en/latest/system.html

[10:53] <eveo> ugexe: sent a PR to just skip that test on Windows: https://github.com/labster/p6-file-directory-tree/pull/11

[10:56] <eveo> buggable: speed 6

[10:56] <buggable> eveo, ‚ñÜ‚ñÜ‚ñÉ‚ñà‚ñÑ‚ñÅ data for 2017-06-14‚Äì2017-06-16; range: 4.071s‚Äì4.533s; 7% faster

[10:56] <eveo> w00t

[12:20] <dogbert17_> eveo: I'm seeing failures in t/spec/S32-io/pipe.t. Is that something you have noticed?

[12:21] <eveo> I saw it flop but no failures

[12:21] * lizmat also saw it flap a few times

[12:21] <lizmat> Failed tests:  12-13

[12:21] <dogbert17_> same here

[12:52] <lizmat> m: sub a(+@a) { say @a.iterator.is-lazy }; a ^Inf   # this feels wrong

[12:52] <camelia> rakudo-moar 5facb2: OUTPUT: ¬´False‚ê§¬ª

[12:59] <lizmat> m: my $s = Set.new(my $ = 42); $_ = 0 for $s.keys; dd $s  # so much for immutability

[12:59] <camelia> rakudo-moar 5facb2: OUTPUT: ¬´Set $s = set(0)‚ê§¬ª

[13:03] * lizmat is fixing

[13:10] <[Coke]> I started seeing the proc piping failure errors locally

[13:13] <MasterDuke> i don't suppose there's a perl6 builtin i don't know about that will condense a list of numbers into a list of numbers and Ranges where the original numbers are contiguous?

[13:14] * [Coke] doesn't think so.

[13:25] <[Coke]> you want to turn 1,4,5,2,3 into 1..5 ?

[13:25] <timotimo> so .minmax?

[13:25] <[Coke]> timotimo: that doesn't help collapse ranges.

[13:25] <timotimo> well, you'd have to also check if all parts are contiguous

[13:26] <[Coke]> m: say (1,3,4,5).minmax ; say (1,2,3,4,5).minmax

[13:26] <camelia> rakudo-moar 5facb2: OUTPUT: ¬´1..5‚ê§1..5‚ê§¬ª

[13:27] <[Coke]> right. so no, no builtin. but it seems like a SMOP (esp. if your input is sorted)

[13:27] <timotimo> right

[13:33] <[Coke]> jj/win 3

[13:46] <lizmat> MasterDuke: https://gist.github.com/lizmat/063358317dc17a87d32f6d01de1c2687  :-)

[13:47] <lizmat> .oO( it's been a while I coded without nqp:: ;-)

[13:48] <lizmat> .tell MasterDuke https://gist.github.com/lizmat/063358317dc17a87d32f6d01de1c2687  :-)

[13:48] <yoleaux> lizmat: I'll pass your message to MasterDuke.

[13:53] <lizmat> afk&

[13:58] <Geth> ¬¶ rakudo/nom: 3267386b70 | (Elizabeth Mattijsen)++ | src/core/Rakudo/QuantHash.pm

[13:58] <Geth> ¬¶ rakudo/nom: Introducing R:Q.ADD-ITERATOR-TO-SET

[13:58] <Geth> ¬¶ rakudo/nom:

[13:58] <Geth> ¬¶ rakudo/nom: Abstracted Set.new logic, with decont() fix applied.

[13:58] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3267386b70

[13:58] <Geth> ¬¶ rakudo/nom: aa5d6f5460 | (Elizabeth Mattijsen)++ | src/core/Setty.pm

[13:58] <Geth> ¬¶ rakudo/nom: Use new R:Q.ADD-ITERATOR-TO-SET

[13:58] <Geth> ¬¶ rakudo/nom:

[13:58] <Geth> ¬¶ rakudo/nom: Also fixes problem with values not being deconted.

[13:58] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aa5d6f5460

[13:58] <lizmat> really afk&

[15:53] <eveo> hmmm

[15:53] <eveo> C:\Temp\zef>zef install Inline::Perl5

[15:53] <eveo> ===SORRY!===

[15:53] <eveo> Failed to rename 'C:\Users\zoffi\.perl6\precomp\2A37703AAE6EC1F1B73611353136DF8699DEDD67.1497625661.30178\D3\D3EDFFC895935AACCE255AE00550C10AD9162CE3.tmp' to 'C:\Users\zoffi\.perl6\precomp\2A37703AAE6EC1F1B73611353136DF8699DEDD67.1497625661.30178\D3\D3EDFFC895935AACCE255AE00550C10AD9162CE3': Failed to rename file: operation not permitted

[15:54] <eveo> C:\Temp\zef>perl6 -v

[15:54] <eveo> This is Rakudo version 2017.05-456-gaa5d6f5 built on MoarVM version 2017.05-100-g5ea6aaa

[15:54] <timotimo> can that error mean something unexpected?

[15:54] <timotimo> like "that file already exists"?

[15:55] <eveo> more likely it means "filehandle isn't closed yet, so OS won't let you rename it"

[15:57] <timotimo> ah

[15:57] <ugexe> i think its permissions, ive been trying to track that bug down

[15:57] <timotimo> is it sort of like a heisenbug?

[15:57] <ugexe> i went through all the CUR sources and added :close to all the slurps, but it didnt help

[15:57] <ugexe> no, it happens every time

[15:57] <timotimo> damn

[15:58] <timotimo> otherwise we could have tried it multiple times in a for loop ...

[15:58] <eveo> definitely a release blocker then :(

[15:58] <timotimo> there must be a strace-like for windows, a log from that could surely be helpful?

[15:58] <ugexe> https://github.com/rakudo/rakudo/blob/nom/src/core/CompUnit/PrecompilationStore/File.pm#L227

[15:59] <ugexe> thats where it happens

[15:59] <timotimo> (it'd also show information about where things happen if we leave in rakudo module debug or --verbose for zef or something)

[15:59] <timotimo> could it be something's running in parallel?

[16:00] <ugexe> i cant test just this second, but i wonder if running the command prompt as administrator and trying it would work

[16:00] <timotimo> the filenames are based on contents only, right?

[16:00] <jnthn> Every time I saw an issue like that, it was about file handle not closed, fwiw

[16:01] <eveo> ugexe: same issue as admin

[16:03] <ugexe> if true then the proc changes are somehow leaving an open handle during precomp that they did not before

[16:03] <ugexe> or is an open proc holding a handle still somehow

[16:06] * eveo digs into it

[16:06] <eveo> It's lunch time and I could use a nice juicy bug desert

[16:06] <eveo> ZofBot: om nom nom nom

[16:06] <ZofBot> eveo, (This has already happened with the circled numbers, for instance!) For such ranges, Perl will pretend that the characters are contiguous for calculating successors and predecessors, and will fail if you run off of either end

[16:25] <eveo> ugexe: how did you find out that was the line where it dies? I added some print statements around it and looks like it's dying elsewhere

[16:26] <ugexe> looked at the last line of RAKUDO_MODULE_DEBUG=1 and followed the logic to the rename

[16:26] <eveo> Ah

[16:52] <eveo> hehe. On Windows I get sub-60-second parse time. Faster build time than even on my 24-core box... Sounds like I should move to Windows as default rakudo dev env

[16:55] <ugexe> windows is slow at lot of stuff though

[16:55] <ugexe> process launching seems especially slow

[16:56] <ugexe> *seems* - naturally i have never quantified this other than how long zef takes to install

[17:02] <ugexe> https://github.com/rakudo/rakudo/blob/nom/src/core/Proc.pm#L127 - if we are doing this (allowing an %*ENV to affect process spawning) maybe we should go all the way and add a PERL6SHELL (perl5 has a similar one; only for windows)

[17:05] <ugexe> PERL5SHELL for windows defaults to `cmd /c /x` fwiw (we aren't using /x)

[17:13] <eveo> nooooo

[17:13] <eveo> Geth quit

[17:13] <eveo> Damn. Over a month of uptime

[17:13] <eveo> I think people using the toaster that noms too much ram caused it

[17:15] <ugexe> how can people use the toaster?

[17:16] <timotimo> go to its website

[17:17] <eveo> depends on what you mean by "use"

[17:17] <eveo> The data is on https://toast.perl6.party/

[17:17] <eveo> But if you want to toast, get https://github.com/zoffixznet/perl6-Toaster and run ./toast

[17:18] <ugexe> ah, so the website is using up too much ram? or someone running a toaster instance on the same server?

[17:19] <ugexe> im just trying to parse whats using too much ram :x

[17:20] <eveo> ugexe: the website. It's running my off-the-hip Perl 6 web app and I think something in DBIish module is keeping stuff around that it's not meant to keep

[17:21] <eveo> hm, Geth is still running, just not connected to IRC.

[17:21] * eveo waits a bit

[17:21] <ugexe> ah. fwiw heres another variant of off-the-hip perl6 web app tony-o posted the other day https://gist.github.com/tony-o/06833c25519fdaaf40a0a907def5ae63

[17:24] <timotimo> eveo: what's the difference between unkn and unknown?

[17:24] <timotimo> is one a known unknown and the other is an unknown unknown?

[17:25] <eveo> oh hehe

[17:26] <eveo> timotimo: I think Unkn is when a proc exited with non-zero status, but there were no "FAIL" messages and Unknown is when the run never happened (probably because I placed the module into exclusion list, for hanging)

[17:27] <eveo> Yeah, that seems to be it

[17:29] <timotimo> i see

[17:29] <timotimo> i expect you'll be adding a tiny note to explain that to the site?

[17:29] <eveo> Nah, I'll fix "Unknown" to read "No data" or something along those lines

[17:29] <timotimo> that's good, too

[17:44] <[Coke]> eveo++ getting all the shit done

[17:45] <timotimo> yes \o/

[17:45] <eveo> Still no Geth... oh well, there goes the uptime

[17:45] <timotimo> d'oh :|

[17:45] <timotimo> got any logs that might tell us what's wrong?

[17:46] <eveo> Probably some IRC events IRC::Client is failing to handle properly

[17:46] <eveo> or at all :)

[17:46] <eveo> Geth: uptime

[17:46] <Geth> eveo, 33 seconds

[17:46] <perlpilot> eveo++ yeah, what Coke said

[17:50] <ugexe> i wonder if changing those 2 renames (both for completeness) to `try { ... }` would work as a temp fix

[17:52] <ugexe> or maybe thats what it really should be, and throw a warning instead (if code still otherwise works being loaded from source)

[17:58] <eveo> It wasn't needed before, so there's some more serious problem happening.

[17:58] <eveo> It goes to rename the same file 23 times while installing Inline::Perl5... that's not normal, is it?

[17:59] <ugexe> i dont think so... we need a RAKUDO_MODULE_DEBUG=1 output differ

[18:16] <eveo> Looks like the issue's got nothing to do with precomp or or proc refactors. Still exists on a commit from 18 days ago

[18:16] * eveo builds olders tuff

[18:33] * dogbert17 couldn't even install Inline::Perl5, it crapped out with '/usr/bin/ld: cannot find -lperl'

[18:37] <ugexe> i've installed inline::perl5 ok

[18:37] <dogbert17> could my error be that there's some lib missing perhaps

[18:39] <eveo> ugexe: on Windows?

[18:40] <eveo> ugexe: which module were failing for you with rename thing on Windows, BTW?

[18:40] <ugexe> inline::perl5 im talking about linux

[18:41] <eveo> hm, trying to repro the rename problem on 2017.05 drops me into some powershell stuff when running `zef install Inline::Perl5` :S

[18:42] <eveo> oh it continued running... but failed eventually, though not with the rename thing

[18:43] <ugexe> windows the two I know of are 1) install zef and then do `zef ...` 2) git clone https://github.com/ugexe/Perl6-App--ecogen running bin/ecogen locally with -Ilib more than once

[18:43] <eveo> just died of Unhandled exception: failed to load library 'dynext/perl6_ops_moar.dll'

[18:44] <eveo> ugexe: that gives the rename issue?

[18:46] <eveo> man, lengthy build times wear out

[18:46] <ugexe> well it did on my windows vm, but its not on a windows workstation

[18:56] <eveo> I'm not having issues with ecogen

[18:56] <eveo> I think I'm just gonna give up with this one.

[19:04] <dogbert17> m: say [^3].tail

[19:04] <camelia> rakudo-moar aa5d6f: OUTPUT: ¬´2‚ê§¬ª

[19:05] <dogbert17> m: say [^3].tail(1) # why the difference, are different tails called?

[19:05] <camelia> rakudo-moar aa5d6f: OUTPUT: ¬´(2)‚ê§¬ª

[19:05] <lizmat> dogbert17: because you can also specify a number > 1 there, it needs to return a Seq for that

[19:06] <lizmat> m: my $count =1;   dd [^3].tail($count)

[19:06] <camelia> rakudo-moar aa5d6f: OUTPUT: ¬´(2,).Seq‚ê§¬ª

[19:06] <dogbert17> lizmat: but are they both calling the same method

[19:06] <lizmat> m: my $count = 2;   dd [^3].tail($count)

[19:06] <camelia> rakudo-moar aa5d6f: OUTPUT: ¬´(1, 2).Seq‚ê§¬ª

[19:07] <lizmat> dogbert17: no, there are different candidates for tail() and tail(N)

[19:07] <dogbert17> in Array.pm we have 'multi method tail(Array:D: $n)'

[19:07] <dogbert17> will that be called if no argument is given?

[19:08] * dogbert17 just trying to get to grips with the nuances so I can doc it

[19:08] <[Coke]> seen in zef: "Failed to update p6c mirror No such method 'IO' for invocant of type 'Any'"

[19:09] <dogbert17> lizmat: my bad, didn't se your candidate reply

[19:09] <lizmat> dogbert17: one could argue that Array.tail() should be a candidate as well

[19:09] <dogbert17> the candidate without a count, is that in Any?

[19:09] <lizmat> but the no-param case is handled by tail in Any-iterable-methods.pm

[19:10] <dogbert17> so if I doc it, should I mention both candidates or only the one with a count?

[19:11] <lizmat> from a doc point of view, they should both be documented

[19:11] <dogbert17> in Array.pod6?

[19:12] <lizmat> well, I'm not sure: where are things like .grep and .first documented?

[19:12] <[Coke]> are we testing that the various signatures exist explicitly, or that, for example, an arg is effective optional?

[19:12] <lizmat> are they mentioned in Array.pod6 ?

[19:12] <dogbert17> no

[19:12] <[Coke]> I wouldn't lock in detail in the docs that isn't required if we don't have to.

[19:12] <dogbert17> tail is documented in List.pod6

[19:12] <lizmat> then I wouldn't document it in Array

[19:13] <dogbert17> ok, makes my job easier :)

[19:13] <lizmat> the fact that it exists in Array.pm is an optimization, not a specific feature

[19:13] <dogbert17> ah, cool

[19:14] <eveo> greppable6: Build\.pm

[19:14] <greppable6> eveo, https://gist.github.com/026bd641e7da675401f05193cb4a950c

[19:16] <dogbert17> lizmat: do you have any opinions about https://docs.perl6.org/language/typesystem#trait_is_nodal, is there anything that has been overlooked there?

[19:16] <eveo> I guess I should rewrite toaster to use a perl5 app for the time being. I can't keep restarting it every half hour :P

[19:17] * lizmat looks

[19:17] <dogbert17> eveo: why do you have to restart it, memory?

[19:18] <lizmat> dogbert17: what I always find confusing with these examples, is that the last value is also the number of elements

[19:18] <lizmat> but I guess there's no way around it

[19:19] <dogbert17> what about the textual description

[19:19] <lizmat> dogbert17: so, yes, I think that makes it clear and nothing was omitted that I can think of right now

[19:19] <dogbert17> cool, then I will close a doc issue

[19:20] <lizmat> dogbert17: s/ which is not/which is not nodal/

[19:20] <lizmat> to drive the point  :-)

[19:20] <lizmat> in literature, I think the redundancy would be troubling, but I feel that in documentation you cannot be explicit enough

[19:21] <dogbert17> lizmat: thx, will fix

[19:21] <lizmat> not all people reading the doc have had english as their first language

[19:21] <lizmat> (and that include me :-)

[19:21] * dogbert17 and me :)

[19:21] <eveo> .ask nine are you around by any chance? Does this MODULE_DEBUG output tell you anything why on windows even `zef --help` fails with some kind of rename issue. The code that writes to the file in question definitely closes it: https://gist.github.com/zoffixznet/87541b1b135620a656595f18235238e0

[19:21] <yoleaux> eveo: I'll pass your message to nine.

[19:22] <eveo> hmmm.... but is the file that somehow creating the file it's being renamed to already closes it...

[19:24] * lizmat just pushd https://github.com/rakudo/rakudo/commit/b55a0f166b52dff9364a5808    # Geth being incommunicado

[19:25] <eveo> hmm.. ."[ERROR] [22084] [17] No such method 'slurp-rest' for invocant of type 'Any'   in sub  at /home/zoffix/services/geth/lib/Geth/GitHub/Hooks.pm6 (Geth::GitHub::Hooks) line 28"

[19:25] <eveo> It's now running on updated perl6. I do hope it's just a missing module :/

[19:27] * dogbert17 notes that Geth has left #perl6

[19:27] <eveo> oh, but then it wouldn't even start

[19:27] <eveo> oh god, it's the web guys changing the API without concern for the users :/ line 28 is HTTP::Server::Tiny

[19:27] <eveo> I mean $env<p6sgi.input>.slurp-rest;

[19:28] <eveo> They already broke my other app

[19:29] <dogbert17> Geth++

[19:29] <eveo> Serious? They simply renamed it to "p6w.input"?

[19:29] <eveo> and zofbot ded too

[19:30] <eveo> freaking rapture.. All the things are broken

[19:32] <zostay> sweet, someone else is trying to implement P6WAPI then tokuhirom++

[19:34] <eveo> zostay: it's tokushirom's module, dude

[19:34] <eveo> And I'll be telling people to stay the hell away from it from now on. It's the second time this month they break my production apps with minute, cosmetic changes.

[19:39] <eveo> great. It's not a handle anymore either, it's a Supply now

[19:42] <eveo> just gonna install an older version

[19:42] <eveo> Don't have time for this idiocy

[19:44] <lizmat> eveo: which module are we talking about ?

[19:44] <lizmat> HTTP::Server::Tint ?

[19:44] <lizmat> *Tiny?

[19:45] <eveo> Yeah

[19:46] <eveo> Guess it's my own fault for using a module that can't even commit to a version number...

[19:48] <Geth> ¬¶ geth: 3fb833f7c5 | (Zoffix Znet)++ | lib/Geth/GitHub/Hooks.pm6

[19:48] <Geth> ¬¶ geth: Update env key name

[19:48] <Geth> ¬¶ geth:

[19:48] <Geth> ¬¶ geth: Broken by https://github.com/tokuhirom/p6-HTTP-Server-Tiny/commit/bc1620b53719a477fb86dec1f0e458ffce6cd54e

[19:48] <Geth> ¬¶ geth: review: https://github.com/perl6/geth/commit/3fb833f7c5

[19:48] <eveo> \o/

[19:48] <Geth> ¬¶ geth: 0fcc87beb5 | (Zoffix Znet)++ | lib/Geth/GitHub/Hooks.pm6

[19:48] <Geth> ¬¶ geth: Revert "Update env key name"

[19:48] <Geth> ¬¶ geth:

[19:48] <Geth> ¬¶ geth: This reverts commit 3fb833f7c51c93df119f5585a3ad71415787df82.

[19:48] <Geth> ¬¶ geth: review: https://github.com/perl6/geth/commit/0fcc87beb5

[19:48] <Geth> ¬¶ geth: e8e62a09c7 | (Zoffix Znet)++ | lib/Geth/GitHub/Hooks.pm6

[19:48] <Geth> ¬¶ geth: Add a note to install a working version of HTTP::Server::Tiny

[19:48] <Geth> ¬¶ geth: review: https://github.com/perl6/geth/commit/e8e62a09c7

[19:50] <TimToady> S11 specced that all official modules should have version numbers more than 12 years ago, sigh...

[19:50] <eveo> Well, it's using "*" as a version number

[19:51] <TimToady> that's not really a valid version number; it's a valid version number matcher

[19:51] <eveo> ZofBot: I missed you

[19:51] <ZofBot> eveo, type; "Cannot bind to {$

[19:52] <eveo> TimToady: so it should be forbidden in META6.json?

[19:52] <eveo> There was talk about that in the past, because it's causing a module to never get updated if it's already installed, because it thinks it's already on latest version.

[19:52] <TimToady> wildcards should not be part of the identity of a module; they should only be used where dependencies are being checked

[19:52] <eveo> Cool

[19:53] <zostay> the problem is that there's not a lot of releasing tooling available for managing the version numbers, so maintaining version numbers in the current ecosystem is pretty painful

[19:53] <eveo> huggable: version :is: * as version in meta file should not be allowed: https://irclog.perlgeek.de/perl6-dev/2017-06-16#i_14743468

[19:53] <huggable> eveo, Added version as * as version in meta file should not be allowed: https://irclog.perlgeek.de/perl6-dev/2017-06-16#i_14743468

[19:54] <TimToady> and if it's too hard to increment a version number, we should find a way to make it easier

[19:54] <lizmat> afaik, mi6 does this for you

[19:55] <zostay> yeah, but mi6 is so new there are very few module authors who've had a chance to have even heard of it yet

[19:55] <Geth> ¬¶ rakudo/nom: 11f27a30bd | (Elizabeth Mattijsen)++ | src/core/Baggy.pm

[19:55] <Geth> ¬¶ rakudo/nom: Make Baggy.new(@a) about 2x as fast

[19:55] <Geth> ¬¶ rakudo/nom:

[19:55] <Geth> ¬¶ rakudo/nom: - based on an array with 1000 unique elements

[19:55] <Geth> ¬¶ rakudo/nom: - replace +@ signature by 2 candidates: \value and **@args

[19:55] <Geth> ¬¶ rakudo/nom: - apparently there is a relatively large overhead involved with +@a sigs

[19:55] <Geth> ¬¶ rakudo/nom: - also now properly complains if the single argument is lazy

[19:55] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/11f27a30bd

[19:55] <TimToady> basically, the official module system must support immutability

[19:56] <TimToady> you have to be able to name a module somehow and depend on it not changing out from under you

[19:59] <zostay> yeah, the ecosystem encourages module authors to put a master branch in META.list, but ideally, it should be tags and the release process switches to a new tag... but at that point you probably need PAUSE-type infrastructure to manage the details without having every author editing the main list each time

[19:59] <eveo> We already have PAUSE support; the only piece missing is the frontend for browsing what's available.

[20:02] <eveo> I added `try` to precomp renames and now "zef --help" doesn't crash, but based on how long it takes to run, seems like it's precomping everything on each run

[20:03] <zostay> if modules.perl6.org can be made to work off of CPAN + Ecosystem and Ecosystem can become deprecated, I think production Perl 6 becomes a lot more feasible... as it is, it's one of the reasons I do not use it outside of O(fun) projects

[20:08] <eveo> ok, progress. Inline::Perl5 install now dies same way on HEAD as on 2017.05. So I should continue looking for some commit in 2017.05...HEAD that introed the rename brekage.

[20:16] <ugexe> https://github.com/rakudo/rakudo/commit/8ec4dc5bbf872aa76cd605b640f84f6b086608c1 ?

[20:18] <eveo> but this one's closing

[20:18] <jdv79> wut?  the eco and cpan are separate things.

[20:19] <jdv79> kinda one or the other type deal

[20:19] <eveo> why?

[20:19] <eveo> Currently we support both

[20:20] <eveo> there are people who don't want to switch from github system

[20:20] <jdv79> ok

[20:20] <jdv79> just saying they are different and cant really be merged

[20:20] <eveo> Ah. Yeah

[20:21] <eveo> I meant that it's unlikely to become "one or the other" but rather they'd both exist, with CPAN being more "solid" infrustructure and the github being more of a hippy, bleeding-edge type of stuff

[20:21] <eveo> :)

[20:21] <jdv79> happy friday, btw

[20:22] <jdv79> yup

[20:22] <eveo> k, 0c5fe56 still has rename issue

[20:22] <jdv79> ive been sucked into python land for cash lately and i dont appreciate it

[20:23] <eveo> which sucks, 'cause it's meant to fix some other rename issue and if I go further back I won't know which rename issue is hitting me -_-

[20:23] <eveo> OK. Plan C: do version bumps and stresstest everything, then hunt that bug on HEAD.

[20:40] <eveo> ZOFFLOP: t/spec/S17-supply/syntax.t

[20:47] <pmurias> we have a roast test (fuged for the MoarVM) that tests that VM.properties exists, what is that supposed to be on VMs that are not JVM?

[20:48] <geekosaur> I think that question is why it's currently fudged :)

[20:48] <geekosaur> that is, it's suspected something liek that will be needed to allow programs to adapt to different backends, but nobody knows what it would need to look like yet

[20:49] <Geth> ¬¶ nqp: f6459b6d4d | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[20:49] <Geth> ¬¶ nqp: Bump MoarVM

[20:49] <Geth> ¬¶ nqp:

[20:49] <Geth> ¬¶ nqp: MoarVM bump brought commits:

[20:49] <Geth> ¬¶ nqp: https://github.com/MoarVM/MoarVM/compare/2017.05-100-g5ea6aaa...2017.05-115-g369c0c5

[20:49] <Geth> ¬¶ nqp:

[20:49] <Geth> ¬¶ nqp: 369c0c5 Only update last accepted position when needed.

[20:49] <Geth> ¬¶ nqp: b885d99 Save a deref by introducing a local variable.

[20:49] <Geth> ¬¶ nqp: <‚Ä¶commit message has 13 more lines‚Ä¶>

[20:49] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/f6459b6d4d

[20:49] <Geth> ¬¶ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.05-100-g5ea6aaa...2017.05-115-g369c0c5

[20:49] <Geth> ¬¶ rakudo/nom: 51b63bf9f0 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[20:49] <Geth> ¬¶ rakudo/nom: Bump NQP

[20:49] <Geth> ¬¶ rakudo/nom:

[20:49] <Geth> ¬¶ rakudo/nom: NQP bump brought commits:

[20:49] <Geth> ¬¶ rakudo/nom: https://github.com/perl6/nqp/compare/2017.05-191-g0658604...2017.05-192-gf6459b6

[20:49] <Geth> ¬¶ rakudo/nom:

[20:49] <Geth> ¬¶ rakudo/nom: f6459b6 Bump MoarVM

[20:49] <Geth> ¬¶ rakudo/nom:

[20:49] <Geth> ¬¶ rakudo/nom: <‚Ä¶commit message has 18 more lines‚Ä¶>

[20:49] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/51b63bf9f0

[20:49] <Geth> ¬¶ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.05-191-g0658604...2017.05-192-gf6459b6

[20:50] <pmurias> Oracle is developing a JVM based node.js so I supposed the js backend could support getting JVM properties on that

[20:51] <pmurias> are the commit messages with a lists of bumped commits useful? :/

[20:56] <ugexe> i kinda like it

[20:57] <eveo> pmurias: saves me about 5 minutes each, when writing the changlog

[20:57] <eveo> Otherwise I have to fish for nqp bump link, feed it to geth, then find the moarvm bump link, feed it to geth again, and then look through commits to find all the changes

[20:58] <eveo> ZOFFLOP: t/spec/S17-procasync/kill.t

[20:59] <Geth> ¬¶ rakudo/nom: 6e2e4f9aa8 | (Zoffix Znet)++ | src/core/Array.pm

[20:59] <Geth> ¬¶ rakudo/nom: Fix Array.append for multiple Iterable args

[20:59] <Geth> ¬¶ rakudo/nom:

[20:59] <Geth> ¬¶ rakudo/nom: Flatten them all instead of using .push semantics.

[20:59] <Geth> ¬¶ rakudo/nom: Brings interface in line with native arrays' and Buf's .append

[20:59] <Geth> ¬¶ rakudo/nom:

[20:59] <Geth> ¬¶ rakudo/nom: Bug find: https://www.reddit.com/r/perl/comments/6hlyny/push_vs_append_on_arrays_in_perl_6/dizyiaz/

[20:59] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6e2e4f9aa8

[21:01] <pmurias> eveo: if I wrote a 'git log' wrapper that displayed all the info for any bump commits would that be useful for your?

[21:01] <pmurias> s/your/you

[21:01] <lizmat> eveo: are you sure this fix is correct ?

[21:02] <Geth> ¬¶ roast: 76ccac8013 | (Elizabeth Mattijsen)++ | 6 files

[21:02] <Geth> ¬¶ roast: Add tests for QuantHash.new() not accepting laziness

[21:02] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/76ccac8013

[21:02] <eveo> pmurias: what's the problem with them being in the commit message? I don't use command line when writing changelog, but the commits from https://perl6.fail/release/stats

[21:02] <lizmat> eveo: seems like it is very to release to do such a change: if it is a bug, it's been around for a long time already afaik

[21:03] <lizmat> *close

[21:03] <lizmat> if it isn't a bug, then we've messed up a Rakudo Star release candidate

[21:03] <pmurias> eveo: it's not a significant problem for me

[21:04] <japhb> lizmat: Doesn't https://gist.github.com/lizmat/063358317dc17a87d32f6d01de1c2687#file-gistfile1-txt-L24 risk blowing callstack if there are many consecutive numbers in the input?  Or am I misreading?

[21:04] <japhb> (Given lack of TCO, that is)

[21:04] <eveo> 1 sec

[21:06] <lizmat> japhb: well, potentially, but Perl 6 is not that afraid of recursion :-)

[21:06] <pmurias> sleep&

[21:07] <Geth> ¬¶ roast: 859d37ef3f | (Zoffix Znet)++ | S32-array/create.t

[21:07] <Geth> ¬¶ roast: Test Array.append for multiple Iterables as args

[21:07] <Geth> ¬¶ roast:

[21:07] <Geth> ¬¶ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/6e2e4f9aa8

[21:07] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/859d37ef3f

[21:07] <eveo> ok

[21:08] <eveo> lizmat: now I'm sure, as the tests I wrote matched behaviour. This new sig is the same as native arrays and bufs and the old sig is the same as .push. As for close to release. I'm still going to do another toast run to ensure there's no breakage

[21:08] <lizmat> ok

[21:08] <eveo> m: my %h = :42a, :72b; my @a; @a.append: %h, %h; dd @a

[21:08] <camelia> rakudo-moar 51b63b: OUTPUT: ¬´Array @a = [{:a(42), :b(72)}, {:a(42), :b(72)}]‚ê§¬ª

[21:08] <eveo> m: my %h = :42a, :72b; my @a; @a.append: %h; dd @a

[21:08] <camelia> rakudo-moar 51b63b: OUTPUT: ¬´Array @a = [:a(42), :b(72)]‚ê§¬ª

[21:08] <japhb> lizmat: I guess it depends on how big the invocation records are ....

[21:09] <eveo> ^ other wise that's very surpsing and likely unwanted (since you have .push for that) behaviour

[21:10] <eveo> lizmat: but this release isn't a rakudo star candidate, is it?

[21:10] <eveo> huggable: star

[21:10] <huggable> eveo, Estimated Rakudo Star releases for 2017: .01, .04, .07 & .10

[21:10] <eveo> Yeah, looks like it'll be next month

[21:11] <lizmat> ah, ok

[21:11] <lizmat> I guess we want more of jnthn's performance improvements first eh?

[21:11] <eveo> \o/

[21:23] <eveo> hmm

[21:23] * eveo tweaks the sig a bit more

[21:23] <eveo> 'cause right now it ends up containerizing stuff before passing it to another multi

[21:25] <eveo> no *@ sig :/

[21:25] <eveo> I meant *foo

[21:27] <eveo> m: my @b = (1, 2, 3), <d e f>; multi foo (\v) { dd v }; multi foo(**@foo) { multi @foo }(@b¬ª.List, @b¬ª.List)

[21:27] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´5===SORRY!5===‚ê§Cannot use '(unknown scope)' with variable declaration‚ê§at <tmp>:1‚ê§------> 3 dd v }; multi foo(**@foo) { multi @foo 7‚èè5}(@b¬ª.List, @b¬ª.List)‚ê§    expecting any of:‚ê§        constraint‚ê§Other potential difficulties:‚ê§  ‚Ä¶¬ª

[21:27] <lizmat> japhb: rewrote https://gist.github.com/lizmat/063358317dc17a87d32f6d01de1c2687 without recursion

[21:27] <eveo> hehe unknown scope? :)

[21:27] <jnthn> Heh...

[21:29] <lizmat> ^100000 .condense down from 137 seconds to 5 seconds, 1GB to 100MB   # japhb

[21:29] <lizmat> of course, adding a Range.condense variant would make more sense  :-)

[21:29] <timotimo> wow, though

[21:30] <jnthn> In terms of call stack - you can recurse as deep as you want, except you'll run out of heap at some point :)

[21:31] <lizmat> japhb: still, having it recurse 1M times and still live, is something that I don't think P5 can do  :-)

[21:31] <lizmat> or maybe it can... it's just a warning after N recursions, right ?

[21:32] <eveo> lizmat: ok, now I'm less sure...

[21:32] <eveo> m: my @b = (1, 2, 3), <d e f>; dd [].append: @b¬ª.List

[21:32] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´[(1, 2, 3), ("d", "e", "f")]‚ê§¬ª

[21:32] <ugexe> eveo: how were you building those 20ish+ day old rakudo commits on windows? seems like there were moarvm fixes that came after (revealing the bug that may had been happening)

[21:32] <eveo> m: my @b = (1, 2, 3), <d e f>; dd [].append: @b¬ª.List, @b¬ª.List

[21:32] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´[1, 2, 3, "d", "e", "f", 1, 2, 3, "d", "e", "f"]‚ê§¬ª

[21:32] <ugexe> cause i get failures with ./perl6.bat (seems to be mishandling arguments)

[21:32] <jnthn> lizmat: I think it can, just a warning that you'd need to disable

[21:32] <lizmat> yeah, probably

[21:32] <jnthn> ugexe: Wouldn't it have to be .\perl6.bat ? :)

[21:33] <eveo> huggable, build-rakudo-win

[21:33] <huggable> eveo, perl Configure.pl --gen-moar --gen-nqp --backends=moar & gmake & gmake test & gmake install

[21:33] <eveo> ugexe: ^ just running that in the repo

[21:33] <ugexe> ah, im using nmake... wonder if it matters

[21:33] <jnthn> ugexe: I did an nmake build last night

[21:33] <jnthn> It at least passed make test

[21:33] <ugexe> and yea .\perl6.bat

[21:34] <ugexe> jnthn: yeah, but there is a bug that goes back some 20+ days that gives me this error

[21:34] <ugexe> (is building olderish commit)

[21:35] <jnthn> ugexe: Is this the rename file one I saw float by earlier?

[21:35] <ugexe> yeah

[21:36] <jnthn> I've hunted those before

[21:37] <jnthn> I *think* I used https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/logger-and-logviewer one time

[21:42] <eveo> m: my @d; my @b = (1, 2, 3), (4, 5, 6); @d.append: @b¬ª.List; dd @d # I'd expect this to just get flattened

[21:42] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´Array @d = [(1, 2, 3), (4, 5, 6)]‚ê§¬ª

[21:44] <lizmat> eveo: we need either jnthn or TimToady decision on that...

[21:46] <jnthn> m: my @d; my @b = (1, 2, 3), (4, 5, 6); @d.append: |@b¬ª.List; dd @d

[21:46] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´Array @d = [1, 2, 3, 4, 5, 6]‚ê§¬ª

[21:46] <jnthn> .append doesn't flatten sublists

[21:48] <eveo> jnthn: so the behaviour for when it's given two iterables should be the same as wish .push?

[21:48] <jnthn> We've been down the "lots of magical flattening that wasn't asked for" road before

[21:51] <jnthn> eveo: .push will always result in one more entry in the array per argument given to it

[21:51] <jnthn> .append follows the single argument rule

[21:52] <jnthn> Or that's how I remember us deciding it.

[21:52] <eveo> jnthn: It feels a bit of an inbetweener compared to the rest of the language. It flattens an Iterable argument, but doesn't flatten non-containerized elements like a normal slurpy or .flat call would

[21:52] <eveo> m: my %h = :42a, :72b; my @a; @a.append: %h; dd @a

[21:52] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´Array @a = [:a(42), :b(72)]‚ê§¬ª

[21:52] <eveo> m: my %h = :42a, :72b; my @a; @a.append: %h, %h; dd @a

[21:52] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´Array @a = [:a(42), :b(72), :a(42), :b(72)]‚ê§¬ª

[21:52] <eveo> Wait, that's not it

[21:52] <eveo> c: HEAD~2 my %h = :42a, :72b; my @a; @a.append: %h; dd @a

[21:52] <committable6> eveo, ¬¶HEAD~2: ¬´Array @a = [:a(42), :b(72)]¬ª

[21:52] <jnthn> And @b>>.List produces a list (due to >>) which has two sublists

[21:52] <eveo> c: HEAD~2 my %h = :42a, :72b; my @a; @a.append: %h, %h; dd @a

[21:52] <committable6> eveo, ¬¶HEAD~2: ¬´Array @a = [{:a(42), :b(72)}, {:a(42), :b(72)}]¬ª

[21:52] <jnthn> So that top-level list is the single argument

[21:53] <eveo> jnthn: ^ like this. you either get pairs, but then all of a sudden switch to hashes. And the Hash gets flattened like you'd have it with a slurpy, but non-containerized inner iterables don't get flattened, like with a slurpy

[21:53] <lizmat> jnthn: there's maybe the argument now that it is inconsistent with native array.push/append and Buf.push/append

[21:53] <lizmat> because .append on them flattens because the destination cannot take anything else

[21:53] <eveo> m: dd buf8.new: (1, 2, 3), (4, 5, 6)

[21:53] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´Buf[uint8].new(1,2,3,4,5,6)‚ê§¬ª

[21:54] <lizmat> if we would want to be consistent with Array.append, ^^^ should perhaps fail ?

[21:54] <jnthn> Well, it could have been an error

[21:54] <eveo> m: dd buf8.new: (1, 2, 3), (4, "5", 6)

[21:54] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´Type check failed in initializing element #4 to Buf[uint8]; expected uint8 but got Str ("5")‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:54] <jnthn> But yeah, I see we've made it inconsistent

[21:54] <jnthn> But looking at append in CORE.setting

[21:54] <eveo> jnthn: well, 1 sec, let me revert HEAD

[21:54] <jnthn> It's ended up not following the single argument rule anyway :S

[21:55] <jnthn> (*@values)

[21:55] <lizmat> it used to

[21:55] <jnthn> Oh :/

[21:55] <Geth> ¬¶ rakudo/nom: a38cb68373 | (Zoffix Znet)++ | src/core/Array.pm

[21:55] <Geth> ¬¶ rakudo/nom: Revert "Fix Array.append for multiple Iterable args"

[21:55] <Geth> ¬¶ rakudo/nom:

[21:55] <Geth> ¬¶ rakudo/nom: This reverts commit 6e2e4f9aa83786c16ee854b9afd8ec02e8fee911.

[21:55] <Geth> ¬¶ rakudo/nom:

[21:55] <Geth> ¬¶ rakudo/nom: Makes things inconsistent still. Discussion:

[21:55] <Geth> ¬¶ rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2017-06-16#i_14743982

[21:55] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a38cb68373

[21:55] <lizmat> with a \item and a **@a candidate

[21:56] <jnthn> Yeah, this is the problem. During the GLR TimToady and I tried to make things consistent. Then others seem to been to "fix" them for making some use case prettier. :/

[21:56] <Geth> ¬¶ roast: 97665df6e6 | (Zoffix Znet)++ | S32-array/create.t

[21:56] <Geth> ¬¶ roast: Revert "Test Array.append for multiple Iterables as args"

[21:56] <Geth> ¬¶ roast:

[21:56] <Geth> ¬¶ roast: This reverts commit 859d37ef3f5aa39cc5bc99be274f48ebebc86203.

[21:56] <Geth> ¬¶ roast:

[21:56] <Geth> ¬¶ roast: Makes things inconsistent still. Discussion:

[21:56] <Geth> ¬¶ roast: https://irclog.perlgeek.de/perl6-dev/2017-06-16#i_14743982

[21:56] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/97665df6e6

[21:56] <jnthn> *been keen

[21:56] <jnthn> Which will only get us back to the pre-GLR state where it was unpredictable.

[21:56] <eveo> ok. now the sig is same as .push

[21:57] <lizmat> eveo: note there are also \item candidates, that provide single arg semantics

[21:57] <jnthn> The reason we did the GLR was, among other things, to try and get more consistency

[21:57] <lizmat> the \item candidates between Array.push and Array.append differ

[21:57] <jnthn> And yes, it *does* mean that sometimes you have to ask for a bit more flattening explicitly.

[21:58] <jnthn> </grumpy> :-)

[21:58] <eveo> Yeah, I meant the .append: @a, @b; is same as .push: @a, @b;

[21:58] <jnthn> (Also, have been here through about 6 different list implementations. :))

[21:58] <eveo> :)

[21:59] <eveo> jnthn: so what's the ruling? If all parts of current behaviour are nominal, then I'll add tests to cover the .append: @a, @b; case, 'cause there aren't any

[22:00] <jnthn> The interesting push/append difference is when it receives a single argument

[22:00] <jnthn> m: my @a; @a.push: ((1,2,3),(4,5,6)); dd @a

[22:00] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´Array @a = [((1, 2, 3), (4, 5, 6)),]‚ê§¬ª

[22:00] <jnthn> m: my @a; @a.append: ((1,2,3),(4,5,6)); dd @a

[22:00] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´Array @a = [(1, 2, 3), (4, 5, 6)]‚ê§¬ª

[22:00] <jnthn> m: my @a; @a.push: ((1,2,3),(4,5,6)); say @a.elems

[22:00] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´1‚ê§¬ª

[22:00] <timotimo> single arg rules.

[22:00] <jnthn> m: my @a; @a.append: ((1,2,3),(4,5,6)); say @a.elems

[22:00] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´2‚ê§¬ª

[22:01] <eveo> m: my @a; @a.push: (1,2,3), (4,5,6); dd @a

[22:01] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´Array @a = [(1, 2, 3), (4, 5, 6)]‚ê§¬ª

[22:01] <eveo> m: my @a; @a.append: (1,2,3), (4,5,6); dd @a

[22:01] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´Array @a = [1, 2, 3, 4, 5, 6]‚ê§¬ª

[22:01] <eveo> noooo

[22:01] <jnthn> On multiple arguments, pretty sure we intended that arg list to be "the list" and so push/append would be doing the same

[22:02] <jnthn> That's how +@a works

[22:02] <eveo> m: my @a; @a.append: [1,2,3], [4,5,6]; dd @a

[22:02] <camelia> rakudo-moar 6e2e4f: OUTPUT: ¬´Array @a = [1, 2, 3, 4, 5, 6]‚ê§¬ª

[22:02] <eveo> Oh, wait. It's still using my commit

[22:02] <jnthn> And the multi candidates we have presumably exist because this is faster than +@a :)

[22:02] <eveo> c: HEAD~4 my @a; @a.append: (1,2,3), (4,5,6); dd @a

[22:02] <committable6> eveo, ¬¶HEAD~4: ¬´Array @a = [(1, 2, 3), (4, 5, 6)]¬ª

[22:02] <eveo> *phew*

[22:02] <jnthn> :)

[22:02] <lizmat> http://www.0racle.info/articles/perl_6_on_rails

[22:03] <timotimo> perlawhirl++

[22:03] <eveo> OK. I'll write extra tests to cover the multi-Iterable args. The +@a explanation makes sense.

[22:04] <timotimo> is there an opportunity to get around the high cost for +@a arguments?

[22:04] * japhb can't install p6doc on a current Rakudo (it dies during testing)

[22:04] <japhb> Is this already a known problem?

[22:04] <eveo> japhb: what does it die with?

[22:05] <eveo> IIRC I saw it burnt on the last toast run

[22:05] <timotimo> https://github.com/rakudo/rakudo/commit/11f27a30bd  -  see also

[22:05] <eveo> Last two even, but the errors about "not a git repository". Sounds like new tests assumed too much?

[22:12] <lizmat> does p6doc use Bags ?

[22:19] <eveo> lizmat: just see one instance in tests: xt/examples-compilation.t:my $counts = BagHash.new;

[22:22] * lizmat checks

[22:23] * eveo fires up the toaster

[22:26] <eveo> buggable, eco

[22:26] <buggable> eveo, Out of 843 Ecosystem dists, 0 have warnings, 0 have errors, and 0 have no tags in META file. See https://modules.perl6.org/update.log for details

[22:27] <eveo> curious... toaster tells me .. ooohhh

[22:27] <eveo> It told me 825 dists for toasting, but that's after it excluded dists I banned for hanging

[22:27] <eveo> (like IRC::Client)

[22:28] <eveo> or rather unkillable via Proc::Async.kill for some reason

[22:43] <japhb> Sorry, got pulled away just after asking my question.

[22:44] <japhb> eveo: Yes, it's the not a git repository error

[22:46] <japhb> eveo: https://gist.github.com/japhb/8f091d1fe77f60f435ba3478a1215cd5

[22:48] <ugexe> "fatal: Not a git repository (or any parent up to mount point /usr/local)"?

[22:49] <ugexe> n/m i misparsed your statement

[22:50] <ugexe> looks like the cwd is changing somewhere

[22:51] <japhb> Yeah, that was going to be my guess -- lost track of CWD or spooky CWD action at a distance or so.

[22:52] <ugexe> `qx <git rev-parse --short HEAD>, :cwd($*CWD.add("zef"));` this fails for me (1 directory above /zef) but works if I use run

[22:52] <eveo> ugexe: thanks. Yeah, it's a regression in qx/false/

[22:52] <eveo> I mean thanks japhb

[22:52] <eveo> ZofBot: thanks for everyone!

[22:52] <ZofBot> eveo, name) }); }; for ^2 { my $v does IO = class Foo { method close { say "closed" } }

[22:54] <ugexe> QX works, but not qx/qqx

[22:56] <eveo> m: class Foo { method sink { say "sunk" } }; my $res; try { my $x := 42; $res := Foo.new }

[22:56] <camelia> rakudo-moar a38cb6: OUTPUT: ¬´sunk‚ê§¬ª

[22:56] <eveo> I'm surprised it worked before

[22:57] <eveo> Ohhh. It "worked". The Proc probably got sunk before exitcode and whatnot got set :/

[22:58] <eveo> I don't get why it's binding status at all: https://github.com/rakudo/rakudo/blob/a38cb68/src/core/Proc.pm#L197

[22:58] <japhb> Wait, why does $res get sunk there?

[22:58] <japhb> Does := not count as used?

[22:58] <eveo> Oh. nevermind it's new code :)

[22:58] <eveo> *phew* I thought it was that way for ages. Will fix soon

[22:59] * ugexe is still looking for where qx/qqx is relted to QX

[22:59] * japhb does not understand.

[22:59] <eveo> japhb: try returns a value of last statement

[22:59] <japhb> Ah, and *that* is what is getting sunk, not the binding itself.

[22:59] <japhb> OK, that makes sense.

[23:00] <japhb> Thanks, eveo

[23:00] <eveo> I'll fix it in ~30m. Need to finish up something for work

[23:02] <eveo> ugexe: somewhere around here, I'm guessing: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.nqp#L9527

[23:02] <eveo> tehre's method postprocess_run that gens a call to QX

[23:02] <eveo> a few lines below

[23:12] <Geth> ¬¶ rakudo/nom: 5e0377366c | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[23:12] <Geth> ¬¶ rakudo/nom: Add some suggestions for "skip" and "continue"

[23:12] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5e0377366c

[23:18] <lizmat> and that concludes my hacking for today

[23:18] <lizmat> good night, #perl6-dev!

[23:18] <eveo> night

[23:33] <eveo> ZOFVM: Files=1254, Tests=139499, 117 wallclock secs (19.29 usr  3.26 sys + 2218.77 cusr 205.66 csys = 2446.98 CPU)

[23:37] <Geth> ¬¶ rakudo/nom: c532b790e0 | (Zoffix Znet)++ | src/core/Proc.pm

[23:37] <Geth> ¬¶ rakudo/nom: Fix regression in qx//

[23:37] <Geth> ¬¶ rakudo/nom:

[23:37] <Geth> ¬¶ rakudo/nom: The Great Proc Refactor‚Ñ¢[1] accidentally created a condition where

[23:37] <Geth> ¬¶ rakudo/nom: a Proc returned from a try {} was being sunk. This caused qx// with

[23:37] <Geth> ¬¶ rakudo/nom: processes that returned a non-zero exit status to explode.

[23:37] <Geth> ¬¶ rakudo/nom:

[23:37] <Geth> ¬¶ rakudo/nom: Fix by simplifying the code

[23:37] <Geth> ¬¶ rakudo/nom:

[23:37] <Geth> ¬¶ rakudo/nom: [1] https://github.com/rakudo/rakudo/commit/2ccd5cb1f5f0f88244afe971622f399e5aeee840

[23:37] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c532b790e0

[23:38] <Geth> ¬¶ roast: 9cc1cb0bcd | (Zoffix Znet)++ | S02-literals/quoting.t

[23:38] <Geth> ¬¶ roast: Test qx// with error conditions

[23:38] <Geth> ¬¶ roast:

[23:38] <Geth> ¬¶ roast: - Test STDERR passes through

[23:38] <Geth> ¬¶ roast: - Test non-zero-exit processes don't explode

[23:38] <Geth> ¬¶ roast:

[23:38] <Geth> ¬¶ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/c532b790e0

[23:38] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/9cc1cb0bcd

[23:38] <eveo> japhb: ^ fixes it

[23:38] <eveo> I guess the toast run that just completed is already outdated.

[23:38] * eveo re-runs another one

[23:42] * eveo reads #perl6

[23:43] <eveo> timotimo: FWIW some methods on Nil would explode or give some value: https://github.com/rakudo/rakudo/commit/c532b790e0   We also have this awful behaviour that calling most Cool methods on Nil will throw with "wanted a :D but got :U" exception

[23:51] <eveo> ZofBot: everyone's away! It's just you and me, bud. Like the good old times.

[23:51] <ZofBot> eveo, Either way is fine; if you want to throw extra stuff in as part of the grant report, I am not going to stop you

[23:51] <eveo> ZofBot: I'm done with the grant tho, bruh. You're too slow.

[23:51] <ZofBot> eveo, synacor

[23:57] <japhb> eveo: Starting a rebuild now, thank you!
