[02:00] <AlexDaniel> does anybody know why this counts up?

[02:00] <AlexDaniel> m: say (True ff 0) xx 5

[02:00] <camelia> rakudo-moar ae02bc299: OUTPUT: «(1 2 3 4 5)␤»

[02:09] <timotimo> - QAST::Op(bind) <sunk>

[02:09] <timotimo> - QAST::Var(local FLIPFLOP_STATE__1_orig :decl(var))

[02:09] <timotimo> - QAST::Op(call &prefix:<++>)

[02:09] <timotimo> - QAST::Var(lexical !FLIPFLOP_STATE__1)

[02:11] <timotimo> i need something that can connect the vertical lines for me ...

[02:13] <timotimo> i'm not sure the state was ever supposed to be returned

[02:14] * timotimo bedtime

[05:22] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Streamline Array.AT-POS for better inlineability

[05:22] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/311928336 https://github.com/rakudo/rakudo/compare/fe8312b7edba...af29a227c8b7

[06:18] <Geth> ¦ roast: 93ee959c08 | usev6++ | S05-mass/properties-general.t

[06:18] <Geth> ¦ roast: [jvm] Skip dying Unicode test

[06:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/93ee959c08

[07:23] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Streamline List.AT-POS a bit

[07:23] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/312001553 https://github.com/rakudo/rakudo/compare/af29a227c8b7...9a2f53250ecb

[08:19] <[Tux]> After a reboot and minor system update

[08:19] <[Tux]> Rakudo version 2017.11-71-gae02bc299 - MoarVM version 2017.11-28-gba1fb9542

[08:19] <[Tux]> csv-test-xs-20      0.419 -  0.466

[08:19] <[Tux]> csv-ip5xs           1.085 -  1.260

[08:19] <[Tux]> test-t --race       1.178 -  1.288

[08:19] <[Tux]> test-t              2.900 -  2.907

[08:19] <[Tux]> test               11.591 - 11.596

[08:19] <[Tux]> csv-parser         12.155 - 12.182

[08:19] <[Tux]> csv-ip5xs-20       12.775 - 12.949

[08:19] <[Tux]> test-t-20 --race   18.150 - 18.235

[08:19] <[Tux]> test-t-20          51.419 - 52.196

[08:40] <DrForr> o/

[09:29] <lizmat> Files=1229, Tests=75904, 318 wallclock secs (14.83 usr  5.38 sys + 2195.55 cusr 215.98 csys = 2431.74 CPU)

[09:29] <yoleaux> 07:13Z <piojo> lizmat: Would you say it's a bad idea to use Pair as a member in a Set (or check $pair ∈ @array)? Because it seems awkward that Pair.WHICH is sometimes static (Pair.new(1,2)) but sometimes dynamic (Pair.new($a,2)). The ambiguity makes causes hard debugging since $foo !== EVAL($foo.perl), but EVAL($foo.perl) === EVAL($foo.perl)

[10:16] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make Array.ASSIGN-POS about 1.7x faster

[10:16] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/312027117 https://github.com/rakudo/rakudo/compare/9a2f53250ecb...c5afc97e30f1

[10:27] <tbrowder> could someone please review PR #1287 (with roast PR #361 for tests)? it affects proper handling of pod tables:  when cell data has a visual column separator it must be escaped to avoid being recognized as such.

[10:32] <tbrowder> this PR will allow the docs (language/regexes) table showing unicode properties combined with set operators to display properly

[10:33] <tbrowder> .tell samcv PR #1287 would help the unicode docs

[10:33] <yoleaux> tbrowder: I'll pass your message to samcv.

[10:34] <samcv> i can review

[10:34] <yoleaux> 10:33Z <tbrowder> samcv: PR #1287 would help the unicode docs

[10:34] <tbrowder> thnx!

[10:34] <samcv> link?

[10:36] <tbrowder> https://github.com/rakudo/rakudo/pull/1287

[10:37] <tbrowder> note that you will also need the roast PR #361 you want to see and use the added tests

[10:38] <tbrowder> https://github.com/perl6/roast/pull/361

[10:38] <tbrowder> s/you/if you/

[10:42] <wander> \o

[10:43] <tbrowder> AlexDaniel: i closed PR #1291 because it involved too many fixes. i will break it up into at least two PRs: one to address the caption attribute data and one to address the quote issues.

[10:43] <AlexDaniel> GH#1291

[10:43] <synopsebot> GH#1291 [closed]: https://github.com/rakudo/rakudo/pull/1291 Fix table caption RT #126740

[10:44] <AlexDaniel> sure

[10:45] <tbrowder> i have submitted a CLA to the perl foundation and am bidding for commit privs after my next two PRs

[10:46] <AlexDaniel> :)

[10:46] <AlexDaniel> all POD stuff needs more eyes definitely

[10:47] <AlexDaniel> tbrowder: by the way, have you seen this? https://irclog.perlgeek.de/perl6/2017-12-06#i_15537013

[10:47] <tbrowder> yes, i have

[10:50] <AlexDaniel> c: bbeb40d55 say 42

[10:50] <committable6> AlexDaniel, ¦bbeb40d: «Cannot find this revision (did you mean “a85b654”?)»

[10:50] <DrForr> I've got a partially-refactored Pod::To::HTML repo that I'm repurposing to do Blogspot-ready HTML and hoping to be able to refactor it to where the Blogspot changes are just either a role you introduce or a subclass you wrap around the existing HTML.

[10:51] <AlexDaniel> hmmm *able is still unable to track branches… argh

[10:51] <DrForr> The first "big" change was getting rid of the exported methods that were being used for testing. It also meant that everything had to be just a function.

[11:01] <DrForr> (looking at backlog here that AlexDaniel was talking about.)

[11:03] <samcv> tbrowder: reviewed! :-)

[11:03] <samcv> about time for bed

[11:04] <samcv> ++<AlexDaniel> all POD stuff needs more eyes definitely

[11:04] <samcv> tbrowder++

[11:05] <tbrowder> .tell samcv thanks!

[11:05] <yoleaux> tbrowder: I'll pass your message to samcv.

[11:11] <wander> tbrowder++

[12:03] <tbrowder> .tell samcv i made yr suggested chgs

[12:03] <yoleaux> tbrowder: I'll pass your message to samcv.

[12:17] <lizmat> m: dd (a => my $ = 42)  # jnthn: if we .perl this without the container

[12:17] <camelia> rakudo-moar ae02bc299: OUTPUT: «:a(42)␤»

[12:17] <lizmat> m: dd (a => my $ = 42).WHICH   # shouldn't .WHICH follow the same logic ?

[12:17] <camelia> rakudo-moar ae02bc299: OUTPUT: «ObjAt.new("Pair|57247968")␤»

[12:22] <jnthn> m: dd flat 0, (a => my $ = (1,2,3)).value, 4

[12:22] <camelia> rakudo-moar ae02bc299: OUTPUT: «(0, $(1, 2, 3), 4).Seq␤»

[12:22] <jnthn> m: dd flat 0, (a => my $ = (1,2,3)).perl.EVAL.value, 4

[12:22] <camelia> rakudo-moar ae02bc299: OUTPUT: «(0, $(1, 2, 3), 4).Seq␤»

[12:22] <jnthn> m: dd flat 0, (a => (1,2,3)).perl.EVAL.value, 4

[12:22] <camelia> rakudo-moar ae02bc299: OUTPUT: «(0, 1, 2, 3, 4).Seq␤»

[12:22] <jnthn> huh

[12:22] <jnthn> m: say (a => my $ = (1,2,3)).perl

[12:22] <camelia> rakudo-moar ae02bc299: OUTPUT: «:a($(1, 2, 3))␤»

[12:23] <jnthn> m: say (a => my $ = 42).perl

[12:23] <camelia> rakudo-moar ae02bc299: OUTPUT: «:a(42)␤»

[12:23] <jnthn> Oh, interesting. It only shows it when it makes a difference. Hmm :)

[12:23] <jnthn> lunch, bbiab

[12:25] <tbrowder> thou: can you list the pod bugs you need fixed?

[12:26] <tbrowder> .ask thou can you list the pod bugs you need to have fixed?

[12:26] <yoleaux> tbrowder: I'll pass your message to thou.

[13:29] <pmurias> if we have a test that tests for incorrect behavior how should it be fixed?

[13:30] <pmurias> we have this in the tests: is "\t \t" ~~ /<:space>+/, ' ', 'space chars';  # RT #130483

[13:30] <synopsebot> RT#130483 [new]: https://rt.perl.org/Ticket/Display.html?id=130483 [UNI] Regex Unicode properties check string values before checking bool properties

[13:30] <pmurias> the problem is: <:space> actually matches \t

[14:54] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make R:It:ReifiedArray 15% to 30% faster

[14:54] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/312049106 https://github.com/rakudo/rakudo/compare/c5afc97e30f1...a974de9ba6a1

[17:00] <TimToady> m: say "\t" ~~ /<:space>/

[17:00] <camelia> rakudo-moar ae02bc299: OUTPUT: «Nil␤»

[17:01] <TimToady> m: say "\t" ~~ /<space>/

[17:01] <camelia> rakudo-moar ae02bc299: OUTPUT: «｢       ｣␤ space => ｢   ｣␤»

[17:19] <tbrowder> ref rakudo PR #1287 (and companion roast PR #361): samcv has approved it and i would appreciate someone else reviewing and merging it.

[19:17] <lizmat> m: my @a = ^10; my $b = List.new(|@a); dd $b; $b[0] = 42; dd $b   # that's unexpected to me

[19:17] <camelia> rakudo-moar ae02bc299: OUTPUT: «List $b = $(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)␤List $b = $(42, 1, 2, 3, 4, 5, 6, 7, 8, 9)␤»

[19:17] <lizmat> am I wrong in expecting decontainerization ?

[19:28] <timotimo> why wouldn't changing $b change $b?

[19:29] <timotimo> did you mean to output @a after the change?

[19:29] <lizmat> well, if I turn an Array into a List, I sorta expected it to lose its containers

[19:29] <timotimo> oh

[19:30] <timotimo> now i get what you mean :)

[19:30] <lizmat> m: my @a = ^10; my $b = @a.List; dd $b; $b[0] = 42  # expected this

[19:30] <camelia> rakudo-moar ae02bc299: OUTPUT: «List $b = $(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)␤Cannot modify an immutable List ((0 1 2 3 4 5 6 7 8 9))␤  in block <unit> at <tmp> line 1␤␤»

[19:31] <lizmat> so, List.new(|@a) and @a.List are subtly different

[20:49] <Geth> ¦ rakudo: 00632edb6f | (Elizabeth Mattijsen)++ | src/core/multidim_slice.pm

[20:49] <Geth> ¦ rakudo: Fix for GH #1297

[20:49] <Geth> ¦ rakudo:

[20:49] <Geth> ¦ rakudo: The indices were hard checked for Int, it's a bit smarter now

[20:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/00632edb6f

[20:49] <synopsebot> RAKUDO#1297 [open]: https://github.com/rakudo/rakudo/issues/1297 Indices for shaped arrays need manually coerced to numbers

[21:02] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Streamline Array.iterator.push-until-lazy a bit

[21:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/312096572 https://github.com/rakudo/rakudo/compare/a974de9ba6a1...ae02bc2994f0

[21:11] <Zoffix> R#1260 is related to List.new above though the fix in it won't fix the slipping stuff.

[21:11] <synopsebot> R#1260 [open]: https://github.com/rakudo/rakudo/issues/1260 List.new creates unwanted containers

[21:12] <Zoffix> Dunno if it should outright strip containers. Should prolly be similar to (...). If I put a Proxy up in it, I don't want it vanishing, no?

[21:16] <lizmat> A Proxy *is* a container

[21:16] <lizmat> so it *will* be removed

[21:17] <lizmat> m: use nqp; say nqp::iscont(Proxy.new( FETCH => {}, STORE => {} ))

[21:17] <camelia> rakudo-moar 00632edb6: OUTPUT: «1␤»

[21:20] <Zoffix> I know. I'm saying that might not be what the user wants. It won't be removed in (....)

[21:21] <Zoffix> And if they want decont, they can do it manually. Array.List to me says convert it to immutable list; List.new to me says "make a List out of this stuff"

[21:22] <Zoffix> m: my $x := Proxy.new: :STORE(-> $, $ {;}), :FETCH{;}; my @l := ($x,); @l[0] = 42

[21:22] <camelia> rakudo-moar 00632edb6: ( no output )

[21:22] * Zoffix 

[21:22] <lizmat> m: use nqp; say nqp::decont(Proxy.new( FETCH => { say "fetching"; 42 }, STORE => {} ))

[21:22] <camelia> rakudo-moar 00632edb6: OUTPUT: «fetching␤42␤»

[21:23] <Zoffix> It fetched the value and removes the proxy; can't store stuff in it no mote

[21:23] <Zoffix> *more

[21:23] * Zoffix &

[21:23] <jnthn> Having List.new consistent with infix:<,> feels sensible overall to me

[21:30] <lizmat> m: use nqp; say nqp::iscont(List.new(1,2,3)[0])  # so this would be inconsistent, right?

[21:30] <camelia> rakudo-moar 00632edb6: OUTPUT: «1␤»

[21:30] <lizmat> m: say use nqp; List.new(1,2,3)[0] = 42

[21:30] <camelia> rakudo-moar 00632edb6: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    nqp used at line 1␤    use used at line 1␤␤»

[21:30] <lizmat> m: say List.new(1,2,3)[0] = 42

[21:30] <camelia> rakudo-moar 00632edb6: OUTPUT: «42␤»

[21:31] <lizmat> jnthn: you would consider ^^^ wrong, right ?

[21:31] <jnthn> Yes.

[21:31] <jnthn> Very.

[21:31] <lizmat> ok, will look at it bow

[21:31] <lizmat> *now

[21:31] <jnthn> lizmat++

[21:31] <jnthn> Uff, not many days until my advent post is due

[21:32] <lizmat> jnthn: looks like the error is in handling of the sig: method new(**@things)

[21:32] <lizmat> that appears to be creating containers for 1,2,3

[21:32] <jnthn> Yeah, it would

[21:32] <jnthn> **@things is raw ?

[21:33] <lizmat> no, just **@things

[21:33] <jnthn> I was suggesting the fix ;)

[21:33] <lizmat> ah

[21:33] <lizmat> testing

[21:35] <lizmat> $ 6 'say List.new(1,2,3)[0] = 42'

[21:35] <lizmat> Cannot modify an immutable List ((1 2 3))

[21:37] <jnthn> :)

[21:37] <jnthn> bbiab

[21:45] <Geth> ¦ rakudo: d80df073ad | (Elizabeth Mattijsen)++ | src/core/List.pm

[21:45] <Geth> ¦ rakudo: Make List.new not create containers

[21:45] <Geth> ¦ rakudo:

[21:45] <Geth> ¦ rakudo: List.new should not create containers, it did through a faulty sig.

[21:45] <Geth> ¦ rakudo: jnthn++ for suggesting the fix.

[21:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d80df073ad

[21:46] <timotimo> that's sig, broh

[22:29] <jnthn> :)

[22:35] <gfldex> one of my benchmark got 15% faster in the last 2 weeks

[22:38] <MasterDuke> i think jnthn, lizmat, timotimo, and Zoffix have all commited optimizations in that timespan

[22:38] <timotimo> i only did the tinyest thing

[22:39] <lizmat> if it's in the past 2 weeks, it's probably jnthn's inlining prevention removing work

[22:39] <lizmat> :w

[22:39] <lizmat> oops  :-)

[22:39] <lizmat> why don't we have a raffle for that  :-)

[22:39] <timotimo> i'd maybe call it "inlining enablement work"?

[22:40] * gfldex .oO( inline moarification )
