[00:00] <Zoffix> .

[00:02] <Zoffix> oh right it told me in private

[00:16] <japhb> Zoffix: I think it is hard for anyone to live up to the example Audrey left for us (even she had trouble being everything she wanted to be, and I'm fairly certain she'd qualify as a straight-up genius.)

[00:17] <BenGoldberg> This conversation reminds me Azer Koçulu, who unpublished 250 of his javascript modules on NPM, some of which was in very active use (most notably a string "leftpad" function).

[00:17] <japhb> But she left an enduring legacy in the community to be better not just as programmers but as people and as friends.  It's worth keeping that legacy alive, and even when we start to lose control, reminding ourselves to be the people we wish we could form a community around.

[00:22] <Zoffix> Yeah. I also read this post of hers: http://pugs.blogs.com/audrey/2009/08/my-hobby-troll-hugging.html

[00:27] <Zoffix> I recall my time as an op in #css. Reading a log right now of a conversation and 2007's Zoffix is just linking newbies W3C's specs instead of giving any useful answers and being a giant dick to everyone...

[00:28] <samcv> good *

[00:28] <samcv> i'm back from seeing the total eclipse. traffic was so bad coming home

[00:28] <Zoffix> And I'd say a lot of that could've been curbed if someone told me to STFU instead of letting me do whatever I want 'cause I was a channel op and answers to 99.99% questions.

[00:29] <Zoffix> \o

[00:29] <Zoffix> I only seen a slightly darkened sky and blinded myself a bit by trying to look at the sun :)

[00:30] <geekosaur> we had about 80% here, I used a pinhole projector to watch like the last time we had an eclipse

[00:31] <samcv> i had some binoculars. was at full eclipse for 2 minutes or so. 2 minutes is shorter than you might think. though it's exactly as long as you might think

[00:31] <Zoffix> :)

[00:33] <geekosaur> I see "8 second rule" got redefined for the Internet

[00:33] <geekosaur> used to be "people remember a total eclipse lasting 8 seconds"

[00:34] <samcv> heh

[00:36] <samcv> oh yeah i was working on changing synthetic's moarvm struct to have a different format. Instead of having MVMGrapheme32 base; MVMGrapheme32 *combs; MVMint32 num_combs; i'm instead going to have it just be a single array

[00:37] <samcv> instead of storing base separately. and then i will store `base_index` which will point to which in the array is the base character. since currently ignoremark and other ops don't work properly for graphemes whose first codepoint is NOT the base character

[00:37] <samcv> m: say "\c[arabic number sign]9" ~~ /:m 9 /

[00:37] <camelia> rakudo-moar 636a3c: OUTPUT: «Nil?»

[00:37] <samcv> m: say "\c[arabic number sign]9" ~~ /:m "\c[arabic number sign]" /

[00:37] <camelia> rakudo-moar 636a3c: OUTPUT: «??9??»

[00:38] <samcv> but making a change like this means i have to make changes tons of other places :\ and getting segfaults

[01:11] * [Coke] makes a double batch of homemade onion dip

[01:39] <[Coke]> http://news.perlfoundation.org/2017/08/unicode-membership.html

[01:50] <japhb> Didn't even realize that was a thing we needed, but good, I think?

[02:39] <samcv> oh nice i didn't know that

[02:39] <samcv> so that means i can ask them random questions?

[02:45] <BenGoldberg> Probably.

[02:46] <BenGoldberg> http://unicode.org/consortium/levels.html#associate

[02:46] <BenGoldberg> "As an Associate member, your organization has full access to email lists and technical committee meetings allowing you to contribute to the ongoing development of the Unicode Standard."

[02:51] <BenGoldberg> I expect that the Unicode Consortium would be happy if some member of The Perl Foundation (or someone appointed by them) were to join one or more of their mailing lists.

[02:51] <samcv> i thought everyone could get email lists?

[02:51] <samcv> well i am on their main one but there's so much volume

[02:51] * BenGoldberg doesn't know.  *Shrug*

[02:51] <samcv> unless there's any secret lists for contributors or members or whatever

[02:51] <samcv> hmm

[02:51] <geekosaur> committee lists, likely

[02:52] <BenGoldberg> Being able to send someone to the next technical committee meeting sounds more interesting.

[02:52] <BenGoldberg> (Assuming it's physical, not virtual ;))

[02:53] * BenGoldberg wonders what TUC thinks of rakudo's synthetic codepoints.

[02:55] <BenGoldberg> Something ranging from "Ooh clever!" to "Madness!" to "yuck!"

[02:57] <geekosaur> ...and then the next Unicode standard includes an NFG appendix...

[02:58] <samcv> LOL

[02:58] <geekosaur> (which will inevitably be *different*)

[04:52] <MasterDuke> .ask jnthn in the atomicint example in the docs `my atomicint $total = 0; start { for ^20000 { $total?++ } } xx 4; say $total;`, shouldn't it be `await start`? with await i always get 80000 printed, without it's always some random number less than that

[04:52] <yoleaux> MasterDuke: I'll pass your message to jnthn.

[05:57] <nine> t/spec/S17-lowlevel/atomic.t seems to be failing here more often than not. At least when I run spectest with TEST_JOBS=22 which is kinda ironic considering the functionality it tests ;)

[06:55] <nine> 6 hours 25 minutes to Zurich :)

[07:10] <lizmat_> commute to SPW&

[07:11] * samcv sends best wishes

[07:14] <brrt> yes, have fun

[08:35] * lizmat is being commuted

[09:07] <nine> Oh great... track is blocked near Rosenheim

[09:42] <nine> already one hour late

[09:47] <lizmat_> :-(

[09:47] <lizmat_> so far only minor delays on account of roadworks

[10:03] <Zoffix> .tell jnthn I added the missing `awaits` in atomic docs

[10:03] <yoleaux> 10:01Z <gfldex> Zoffix: you are not the reason why I stepped back from Perl 6. Your behaviour was just a casus belli. I wanted to actually use Perl 6 instead of making it more useable for others for a change. Sadly every time I try, I end up sending complains toward jnthn reguarding crashs and moar eating all my rams.

[10:03] <yoleaux> Zoffix: I'll pass your message to jnthn.

[10:03] <Zoffix> MasterDuke: yeah, there should've been awaits.

[10:35] <nine> Finally moving again. 2 hours 5 minutes late

[13:55] <Geth> ¦ nqp/jit_nativecall: 068419589f | (Stefan Seifert)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[13:55] <Geth> ¦ nqp/jit_nativecall: Map the new nativecallinvokejit OP

[13:55] <Geth> ¦ nqp/jit_nativecall:

[13:55] <Geth> ¦ nqp/jit_nativecall: nativecallbuild now has a return value indicating whether we were able

[13:55] <Geth> ¦ nqp/jit_nativecall: to JIT compile code for the call site

[13:55] <Geth> ¦ nqp/jit_nativecall: review: https://github.com/perl6/nqp/commit/068419589f

[13:55] <Geth> ¦ rakudo/jit_nativecall: 503bcdb367 | (Stefan Seifert)++ | lib/NativeCall.pm6

[13:55] <Geth> ¦ rakudo/jit_nativecall: Use the new nativecallinvokejit for calling JITed NC code directly

[13:55] <Geth> ¦ rakudo/jit_nativecall: review: https://github.com/rakudo/rakudo/commit/503bcdb367

[15:04] <Zoffix> .tell tbrowder Small world. Just noticed that half a decade ago you reviewed one of my Perl modules :) http://cpanratings.perl.org/dist/Spreadsheet-DataToExcel

[15:04] <yoleaux> Zoffix: I'll pass your message to tbrowder.

[15:17] <dogbert17> todays c language question: both coverity and gcc complains about this line, https://github.com/MoarVM/MoarVM/blob/master/src/gc/finalize.c#L16

[15:17] <dogbert17> the complaint is 'warning: statement with no effect [-Wunused-value]'

[15:19] <dogbert17> the question is why does it complain, this macro is used in other places and the compiler does not complain about those

[15:20] <dogbert17> coverity states 'CID 141567 (#1 of 1): Misused comma operator (NO_EFFECT)extra_comma: Part tc of statement tc , obj has no effect due to the comma.'

[15:22] * pmurias looks into it

[15:22] * dogbert17 ++pmurias

[15:25] <Zoffix> Because the macro is defined as empty and so the code after preprocessing ends up as (tc, obj);

[15:27] <tbrowder> Zoffix: ref Spreadsheet::DataToExcel, I'm still using it, but could use a Perl 6 version!

[15:27] <yoleaux> 15:04Z <Zoffix> tbrowder: Small world. Just noticed that half a decade ago you reviewed one of my Perl modules :) http://cpanratings.perl.org/dist/Spreadsheet-DataToExcel

[15:28] <Zoffix> And the rest of the uses use something more complex as arguments, which  perhaps make it think there is some effect, so it doesn't warn?

[15:29] <Zoffix> tbrowder: me too, though Rakudo version is a bit too hard for me :) I don't know how to make Excel without using a module

[15:29] <pmurias> so I assume the macro should be fixed?

[15:30] <Zoffix> pmurias: it's defined as something else when debug mode is used. I think the warning is benign.

[15:30] <dogbert17> I noticed that in all other uses the line is enclosed by a '#if MVM_GC_DEBUG' but not in this particular case

[15:30] <Zoffix> Ohhhh

[15:30] <Zoffix> dogbert17++

[15:30] <Zoffix> pmurias: ^ that would explain it. The line should be put inside that stuff.

[15:32] <Zoffix> /src/gc/debug.h defines that macro to do things when #if MVM_GC_DEBUG and for it to be empty when it's turned off, so the line where the macro is used should go undere the same thing

[15:33] <dogbert17> Zoffix: I get the impression that you've managed to work through your C language book :)

[15:33] <pmurias> Zoffix: I made a PR to fix that

[15:33] <dogbert17> pmurias++

[15:34] <Zoffix> Or, and I'm not an expert here, but when the case when #if MVM_GC_DEBUG is off, define macro as MVM_ASSERT_NOT_FROMSPACE(a, b) instead of just MVM_ASSERT_NOT_FROMSPACE, that way the variables will be replaced with empty too and we won't need to stick #if MVM_GC_DEBUG around the macro

[15:34] <Zoffix> dogbert17: nah, I'm still only on page 265 out of 831, but I'm gettin' there! :)

[15:34] <dogbert17> perhaps we'll expose some nasty GC bug when that PR is applied

[15:34] <dogbert17> Zoffix: and how's your vacation going

[15:35] <Zoffix> Oh, I forgot I was on one :)

[15:35] <Zoffix> I guess good. :)

[15:35] <dogbert17> :)

[15:35] <dogbert17> just avoid reddit and twitter :)

[15:35] <pmurias> Zoffix: the later is what the PR does

[15:36] <Zoffix> pmurias++ sweet

[15:36] <Zoffix> dogbert17: nah, I'm trying something new and reddit and twitter are good now.

[15:36] <Zoffix> .oO( It's working! )

[15:38] * dogbert17 relocates &

[16:29] <Geth> ¦ rakudo: Skarsnik++ created pull request #1137: Add a source-address parameter to IO::Socket::INet.pm

[16:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1137

[16:30] <Skarsnik> gah this pr sucks. It added some dumb commit ><

[16:36] <Zoffix> git pull --rebase will avoid merge commits and will rebase instead

[16:46] <Skarsnik> I think I will wait for the previous pr to be pulled before redoing this x)

[17:39] <Zoffix> Observation: last release was 200th release of Rakudo, based on the available git release tags: https://github.com/rakudo/rakudo/releases

[17:39] <Skarsnik> Yes !

[19:32] <samcv> i'm trying to decide on the maximum length of a needle allowed for knuth morris pratt algorithm

[19:33] <samcv> so basically, we need to allocate an array the same size as the size of the string, so a 32bit integer array for the length of the needle. i haven't merged the KMP algorithm in yet but

[19:33] <samcv> atm i had it set at 100. but i could set it much higher. the thing is, it must process the needle before starting the index operation, so it does take some time

[19:34] <samcv> though most of the time needles are a lot smaller than 100 long

[19:35] <samcv> idk maybe i should set it to 200? anybody have any ideas?

[19:36] <moritz> doesn't the algorithm become more efficient with larger needle length?

[19:36] <moritz> I'd go with something like 16k as the upper boundary or so

[19:39] <Skarsnik> running out of space on / is not fun x)

[19:40] <samcv> 16k?

[19:40] <samcv> i mean it has to process the whole size of the needle though

[19:41] <moritz> is that slow?

[19:41] <samcv> it's not slow but it does take the time you need to access all the elements in the needle

[19:42] <perlpilot> samcv: what would happen when they specify a needle bigger than the maximum?  Does it use a different algorithm?

[19:42] <samcv> it falls back to how it did before which is brute force

[19:43] <samcv> like a needle that's 1000004 long it ends up being slower

[19:43] <perlpilot> samcv: maybe 4K?

[19:43] <samcv> a needle 100004 it's about even

[19:43] <samcv> yeah 4k i could do

[19:44] <samcv> also it has to allocate double the size of the needle in memory fyi

[19:44] <samcv> to do the algorithm

[19:45] <samcv> 4k seems fine though

[19:47] <samcv> not sure if i should allocate onto the stack or use malloc. could put 4k graphemes on the stack if i wanted to

[19:47] <samcv> (i think)

[19:48] <samcv> not sure of stack sizes on non-linux os's

[19:48] <samcv> that's only like 16kb

[19:49] <samcv> should be fine and avoid a call to malloc

[19:49] <perlpilot> you could make it auto-tune to the OS in use   :)

[19:50] <samcv> well since i already know the max size of 4000 graphemes that's 16kb which is small enough to put on the stack. though if i didn't have an upper bound i'd want it to use malloc

[19:51] <samcv> also if the needle is made up of strands it flattens it for the operation as well. so we could end up using even more space (though the flattened needle is malloced not put onto the stack)

[19:52] <samcv> but in my tests that is faster since accesses to the needle are just straight array lookups

[23:20] <Geth> ¦ rakudo/nom: 593fa5f87f | (Samantha McVey)++ | tools/build/NQP_REVISION

[23:20] <Geth> ¦ rakudo/nom: Bump NQP/Moar to get Knuth-Morris-Pratt string search

[23:20] <Geth> ¦ rakudo/nom:

[23:20] <Geth> ¦ rakudo/nom: Plus other fixes and improvements.

[23:20] <Geth> ¦ rakudo/nom: Full MoarVM changes brought in:

[23:20] <Geth> ¦ rakudo/nom: 371b579a Set the needle limit to 4096 for KMP algorithm

[23:20] <Geth> ¦ rakudo/nom: 01a35b27 Shorten text of 'failed to resolve' exception

[23:20] <Geth> ¦ rakudo/nom: 62f66cbf Ensure strings created with MVM_string_repeat are in NFG form

[23:20] <Geth> ¦ rakudo/nom: <…commit message has 12 more lines…>

[23:20] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/593fa5f87f

[23:20] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.08...2017.08-1-g99f01d2cd

[23:20] <samcv> bam

[23:25] <MasterDuke> i don't see the moarvm bump in nqp?

[23:43] <samcv> MasterDuke, ok fixed :) sorry

[23:43] <Geth> ¦ nqp: 99f01d2cd8 | (Samantha McVey)++ | tools/build/MOAR_REVISION

[23:43] <Geth> ¦ nqp: Bump MoarVM to get Knuth-Morris-Pratt string search

[23:43] <Geth> ¦ nqp:

[23:43] <Geth> ¦ nqp: Plus other fixes and improvements.

[23:43] <Geth> ¦ nqp: Full changes brought in:

[23:43] <Geth> ¦ nqp: 371b579a Set the needle limit to 4096 for KMP algorithm

[23:43] <Geth> ¦ nqp: 01a35b27 Shorten text of 'failed to resolve' exception

[23:43] <Geth> ¦ nqp: 62f66cbf Ensure strings created with MVM_string_repeat are in NFG form

[23:43] <Geth> ¦ nqp: <…commit message has 12 more lines…>

[23:43] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/99f01d2cd8

[23:43] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.08.1...2017.08.1-19-g151a2563
