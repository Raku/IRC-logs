[01:25] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1068: Better error if punning role with required methods

[01:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1068

[01:53] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1069: Make errors in MultipleInheritance more awesome

[01:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1069

[03:00] <Geth> ¦ rakudo/nom: 84eb359903 | (Zoffix Znet)++ | src/core/IO/Handle.pm

[03:00] <Geth> ¦ rakudo/nom: Don't sink IO::Handle.close's value in .slurp

[03:00] <Geth> ¦ rakudo/nom:

[03:00] <Geth> ¦ rakudo/nom: This lets users .slurp a ::Pipe of a failed proc without explosions

[03:00] <Geth> ¦ rakudo/nom: and mirrors old .slurp-rest's behaviour.

[03:00] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/84eb359903

[03:01] <Geth> ¦ roast: 172e5dfd1d | (Zoffix Znet)++ | S32-io/io-handle.t

[03:01] <Geth> ¦ roast: Test failed Proc can be .slurp(:close)'ed

[03:01] <Geth> ¦ roast:

[03:01] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/84eb359903

[03:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/172e5dfd1d

[03:01] <Zoffix> "MasterDuke+│ fwiw, slurp(:close) would cause `The spawned command '<...>' exited unsuccessfully (exit code: 2)`"

[03:01] <Zoffix> ^ the above commit fixes that

[03:02] <MasterDuke_> Zoffix: cool

[03:04] <MasterDuke_> i can rebase my PR and add the :close back in

[03:08] <MasterDuke_> PR updated

[05:58] <Zoffix> https://xkcd.com/1822/

[05:58] <Zoffix> I'm gonna respond with that to all our tickets from now on.

[06:11] <Geth> ¦ rakudo/nom: 6d28d7887e | MasterDuke17++ | src/Perl6/Metamodel/MultipleInheritance.nqp

[06:11] <Geth> ¦ rakudo/nom: Make errors in MultipleInheritance more awesome

[06:11] <Geth> ¦ rakudo/nom:

[06:11] <Geth> ¦ rakudo/nom: Include relevant information where possible.

[06:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6d28d7887e

[06:11] <Geth> ¦ rakudo/nom: c76a15d602 | niner++ (committed using GitHub Web editor) | src/Perl6/Metamodel/MultipleInheritance.nqp

[06:11] <Geth> ¦ rakudo/nom: Merge pull request #1069 from MasterDuke17/make_errors_in_MultipleInheritance_more_awesome

[06:11] <Geth> ¦ rakudo/nom:

[06:11] <Geth> ¦ rakudo/nom: Make errors in MultipleInheritance more awesome

[06:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c76a15d602

[06:37] <[Tux]> This is Rakudo version 2017.04.3-33-gc76a15d60 built on MoarVM version 2017.04-44-gf0db8822

[06:37] <[Tux]> csv-ip5xs        3.035

[06:37] <[Tux]> test            13.567

[06:37] <[Tux]> test-t           5.116 - 5.176

[06:37] <[Tux]> csv-parser      13.074

[07:10] <Zoffix> samcv: m// is not the same thing as rx//

[07:10] <samcv> yeah

[07:10] <samcv> apparently

[07:11] <Zoffix> It executes the match, whereas you need to give .match a regex.

[07:12] <samcv> ah i see

[07:12] <samcv> is there a way we can throw?

[07:16] <Zoffix> Yes.

[07:20] <Geth> ¦ rakudo/nom: 1c21974d29 | (Zoffix Znet)++ | 3 files

[07:20] <Geth> ¦ rakudo/nom: Fix dispatch hang in Str.match: Nil

[07:20] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1c21974d29

[07:21] <Geth> ¦ roast: 0a67c4316e | (Zoffix Znet)++ | S05-substitution/match.t

[07:21] <Geth> ¦ roast: Test Str.match: Nil does not hang

[07:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0a67c4316e

[07:22] <samcv> \o/ Zoffix

[11:42] <Geth> ¦ rakudo/nom: cf733e963c | MasterDuke17++ | t/05-messages/01-errors.t

[11:42] <Geth> ¦ rakudo/nom: Add missing '.' to end of expected text

[11:42] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cf733e963c

[11:42] <Geth> ¦ rakudo/nom: 43f193ae59 | lizmat++ (committed using GitHub Web editor) | t/05-messages/01-errors.t

[11:42] <Geth> ¦ rakudo/nom: Merge pull request #1067 from MasterDuke17/fix_RT79288_tests

[11:42] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=79288

[11:42] <Geth> ¦ rakudo/nom:

[11:42] <Geth> ¦ rakudo/nom: Add missing '.' to end of expected text for RT #79288 test

[11:42] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=79288

[11:42] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/43f193ae59

[11:42] <Geth> ¦ rakudo/nom: d87de586b6 | MasterDuke17++ | src/core/traits.pm

[11:42] <Geth> ¦ rakudo/nom: Better error if punning role with required methods

[11:42] <Geth> ¦ rakudo/nom:

[11:42] <Geth> ¦ rakudo/nom: `role R {method a{...};method b{say"b"};method c{...}}; class C is R {}`

[11:42] <Geth> ¦ rakudo/nom: used to say `Method 'a' must be implemented by R because it is required

[11:42] <Geth> ¦ rakudo/nom: by roles: R.`, but now it says `Class C can't pun role R because it has

[11:42] <Geth> ¦ rakudo/nom: required methods: a, c. Did you mean to use "does" instead?`.

[11:42] <Geth> ¦ rakudo/nom:

[11:42] <Geth> ¦ rakudo/nom: Fixes RT #118263

[11:42] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=118263

[11:42] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d87de586b6

[11:42] <Geth> ¦ rakudo/nom: 32d4a36dd6 | lizmat++ (committed using GitHub Web editor) | src/core/traits.pm

[11:42] <Geth> ¦ rakudo/nom: Merge pull request #1068 from MasterDuke17/better_error_when_trying_to_is_a_role_with_required_methods

[11:42] <Geth> ¦ rakudo/nom:

[11:42] <Geth> ¦ rakudo/nom: Better error if punning role with required methods

[11:43] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/32d4a36dd6

[12:11] <Zoffix> .

[12:11] <yoleaux> 07:33Z <eater> Zoffix: your "Thanks." looks very passive aggressive on PRs :')

[12:11] <jnthn> Why do people think that?! :)

[12:11] <Zoffix> Passive agressive thanks?

[12:11] <Zoffix> People are fucking weird.

[12:12] <jnthn> Maybe some people are so attuned to lack of niceness online that when it happens they just look for an alternative explanation :P

[12:13] <brrt> people have arms that are adapted to tree climbing and afterwards to tool holding. they are pretty weird, yes

[12:29] <stmuk> it's a joke isn't it since it has a smiley on the end of it?

[12:31] <Zoffix> I thought jokes were supposed to be funny

[12:46] <[Coke]> Hello thought I'm dad.

[12:47] <[Coke]> (so, not always. :)

[13:15] <Zoffix> m: with '/tmp/foo42'.IO { my $fh = .open(:w, :bin); $fh.spurt: Buf.new(200,200); $fh.close; dd .slurp(:bin) }

[13:15] <camelia> rakudo-moar 32d4a3: OUTPUT: «Buf[uint8].new(200,200)␤»

[13:15] <Zoffix> Oh, nevermind.

[13:15] * Zoffix read that as `Buf[utf8]` first >_<

[13:16] <timotimo> yeah, utf8 is already a buf-like (a blob, really)

[13:17] <Geth> ¦ rakudo/nom: 6fa4bbcb6c | (Zoffix Znet)++ | src/core/io_operators.pm

[13:17] <Geth> ¦ rakudo/nom: [io grant] Straighten out &slurp/&spurt/&get/&getc/&close

[13:17] <Geth> ¦ rakudo/nom:

[13:17] <Geth> ¦ rakudo/nom: - Pass all args via captures, not just some

[13:17] <Geth> ¦ rakudo/nom: - Fail, not throw

[13:17] <Geth> ¦ rakudo/nom: - Add IO::Handle candidate for spurt, to maintain consistency

[13:17] <Geth> ¦ rakudo/nom: - Change Cool:D slurp candidate to IO()

[13:17] <Geth> ¦ rakudo/nom: - Add type constraints on subs that are missing it

[13:17] <Geth> ¦ rakudo/nom:     (IO::ArgFiles is IO::Handle)

[13:17] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6fa4bbcb6c

[13:17] <Geth> ¦ roast: 18d9c0441d | (Zoffix Znet)++ | S32-io/spurt.t

[13:17] <Geth> ¦ roast: [io grant] Cover IO::Handle.spurt

[13:17] <Geth> ¦ roast:

[13:17] <Geth> ¦ roast: With direct tests, rather than indirect tests via IO::Path.spurt.

[13:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/18d9c0441d

[13:46] <MasterDuke_> anyone mind merging https://github.com/rakudo/rakudo/pull/1066 ? then i can close the RT

[13:48] <Geth> ¦ rakudo/nom: d00de936d1 | MasterDuke17++ | t/05-messages/01-errors.t

[13:48] <Geth> ¦ rakudo/nom: Add tests for RT #113954

[13:48] <Geth> ¦ rakudo/nom:

[13:48] <Geth> ¦ rakudo/nom: Spaces or quotes in literal params to MAIN() are quoted correctly in the

[13:48] <Geth> ¦ rakudo/nom: useage statement.

[13:48] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=113954

[13:48] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d00de936d1

[13:48] <Geth> ¦ rakudo/nom: a87d708e30 | MasterDuke17++ | t/05-messages/01-errors.t

[13:48] <Geth> ¦ rakudo/nom: Make sure to :close the output when slurp()ing it

[13:48] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a87d708e30

[13:48] <Geth> ¦ rakudo/nom: 64c303297f | (Zoffix Znet)++ (committed using GitHub Web editor) | t/05-messages/01-errors.t

[13:48] <Geth> ¦ rakudo/nom: Merge pull request #1066 from MasterDuke17/tests_for_RT113954_fix

[13:48] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=113954

[13:48] <Geth> ¦ rakudo/nom:

[13:48] <Geth> ¦ rakudo/nom: Add tests for RT #113954

[13:48] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=113954

[13:48] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/64c303297f

[13:50] <MasterDuke_> Zoffix++ thanks

[13:58] <Geth> ¦ nqp: cee4a7ed16 | (Pawel Murias)++ | t/nqp/083-math.t

[13:58] <Geth> ¦ nqp: Test nqp::cos with infs

[13:58] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cee4a7ed16

[13:58] <Geth> ¦ nqp: 485855ad5e | (Pawel Murias)++ | src/vm/js/nqp-runtime/runtime.js

[13:58] <Geth> ¦ nqp: [js] Less annoying js exception handling

[13:58] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/485855ad5e

[13:58] <Geth> ¦ nqp: d2eb8081d4 | (Pawel Murias)++ | src/vm/js/Compiler.nqp

[13:58] <Geth> ¦ nqp: [js] Fix using locals in pre_deserialize/post_deserialize

[13:58] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d2eb8081d4

[14:24] <Geth> ¦ rakudo/nom: 34b58d1b5e | (Zoffix Znet)++ | 2 files

[14:24] <Geth> ¦ rakudo/nom: [io grant] Straighten out &lines/&words

[14:24] <Geth> ¦ rakudo/nom:

[14:24] <Geth> ¦ rakudo/nom: - Just pass all args via captures; don't do own processing

[14:24] <Geth> ¦ rakudo/nom: - Make &words default to $*ARGFILES, just like the rest of the routines

[14:24] <Geth> ¦ rakudo/nom:     in this group.

[14:24] <Geth> ¦ rakudo/nom: - Add rudimentary IO::ArgFiles.words impl; will be replaced by IO::CatHandle

[14:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/34b58d1b5e

[14:24] <Geth> ¦ roast: 8f78ca604c | (Zoffix Znet)++ | S16-io/words.t

[14:24] <Geth> ¦ roast: [io grant] Test &words with IO::ArgFiles

[14:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8f78ca604c

[14:58] <japhb> My full-screened chat window is showing an almost solid wall of Geth.  Must be a productive morning 'round these parts.

[14:58] <japhb> :-)

[14:58] <Zoffix> buggable: speed 30

[14:58] <buggable> Zoffix, ▃▃▁▃▁▂▇▅▂▁▃▃▃▃▃▃▄▃▃█▄▆▄▄▄▄▆▅▄▃ data for 2017-04-12–2017-04-24; range: 4.994s–5.479s; 1% faster

[14:58] <Zoffix> buggable: speed 10

[14:58] <buggable> Zoffix, ▂▄▃▃▃▂▄▃▂▁ data for 2017-04-21–2017-04-24; range: 5.116s–5.351s; 1% faster

[14:59] <[Coke]> what do those mean?

[14:59] <[Coke]> is there a help link?

[14:59] <Zoffix> Don't think so.

[14:59] <Zoffix> buggable: speed

[14:59] <buggable> Zoffix, █▂▃▂▂▁▂▂▂▃▆▂▆▃▆▂▃▂▂▂▄▄▃▄▃▃▆▅▃▂▄▃▄▄▃▃▄▃▃▇▄▅▅▄▄▄▅▅▄▃ data for 2017-04-03–2017-04-24; range: 4.829s–5.646s; 10% faster

[14:59] <japhb> [Coke]: It's a sparkline graph of the last N days of [Tux]'s benchmark.

[14:59] <Zoffix> ^ that's the data from [Tux]'s bench. And if you give it N in the command, it uses only last N entries

[15:00] <japhb> And I think the "faster" bit is last versus first within the sparkline

[15:00] <Zoffix> Not N days, last N entries. There are at least two measurements per day

[15:00] <Zoffix> Yes, the faster is 1st vs last

[15:00] <japhb> Zoffix: Ah, that's new.  Fair enough.

[15:01] <Zoffix> Gonna try avoiding all the IO() coercers and adding a multi for IO::Path:D to them; that's the only thing I can think of as the cause of recent slowage

[15:03] <[Coke]> shorter is better?

[15:04] <Zoffix> Yes

[15:05] <[Coke]> Thanks.

[15:08] <MasterDuke_> buggable: bench

[15:09] <timotimo> huggable: speed

[15:09] <huggable> timotimo, http://tux.nl/Talks/CSV6/speed4.html

[15:10] <MasterDuke_> isn't there also a buggable command to show how to run the bench yourself?

[15:12] <MasterDuke_> oh, you used huggable

[15:12] <MasterDuke_> huggable: bench

[15:12] <huggable> MasterDuke_, nothing found

[15:14] <Zoffix> huggable: bench

[15:14] <huggable> Zoffix, nothing found

[15:14] <Zoffix> huggable: bench csv

[15:14] <huggable> Zoffix, export PATH=`pwd`/install/bin:$PATH; cd CSV; for i in $(seq 1 10000); do echo 'hello,","," ",world,"!"'; done > /tmp/hello.csv; time perl6 -Ilib -MText::CSV test-t.pl </tmp/hello.csv

[15:14] <MasterDuke_> thanks

[15:18] <Geth> ¦ roast: dc7d1a7dbb | (Pawel Murias)++ | S02-literals/radix.t

[15:18] <Geth> ¦ roast: [js] Fudge unicode problem

[15:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dc7d1a7dbb

[15:18] <Geth> ¦ roast: 3569cfd1bf | (Pawel Murias)++ | S02-names/pseudo.t

[15:18] <Geth> ¦ roast: Fix test

[15:18] <Geth> ¦ roast:

[15:18] <Geth> ¦ roast: CALLER only looks in the immediate caller's scope

[15:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3569cfd1bf

[15:18] <Geth> ¦ roast: 29c8a9da4a | (Pawel Murias)++ | S02-names/pseudo.t

[15:18] <Geth> ¦ roast: Test CALLERS

[15:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/29c8a9da4a

[15:23] <Zoffix> ZOFFLOP: t/spec/S11-modules/nested.t

[15:24] <Zoffix> ZOFFLOP: t/spec/S10-packages/use-with-class.t

[15:24] <MasterDuke_> use-with-class.t, i don't remember seeing that ever flop before?

[15:24] <Geth> ¦ rakudo/nom: d0cd137294 | (Zoffix Znet)++ | src/core/io_operators.pm

[15:24] <Geth> ¦ rakudo/nom: [io grant] Make dir take any IO(), not just Cool

[15:24] <Geth> ¦ rakudo/nom:

[15:24] <Geth> ¦ rakudo/nom: To maintain consistency with all the other routines

[15:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d0cd137294

[15:33] <Zoffix> Nope. IO() coercer isn't it. It's only really present on a few routines.

[15:33] <Zoffix> ZofBot: must be solar flares

[15:33] <ZofBot> Zoffix, it's kind of hard to get a good result when it already switches directions at 4

[15:52] <Geth> ¦ nqp/master: 4 commits pushed by (Pawel Murias)++

[15:52] <Geth> ¦ nqp/master: c16081e3f8 | [js] Implement nqp::elems on a ctx

[15:52] <Geth> ¦ nqp/master: 54d64e212a | Test nqp::elems on a ctx

[15:52] <Geth> ¦ nqp/master: 8972fea84e | [js] Fix iterating over a ctx

[15:52] <Geth> ¦ nqp/master: d0e6aeb3d7 | Test that you can get variable values while iterating over a ctx

[15:52] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/d2eb8081d4...d0e6aeb3d7

[16:06] <Zoffix> m: with "/tmp".IO.add(rand) { .spurt: "abc"; with .open { dd .getc; dd .tell; dd .getc; dd .tell } }

[16:06] <camelia> rakudo-moar d0cd13: OUTPUT: «"a"␤2␤"b"␤3␤»

[16:06] <Zoffix> seems off, isn't it?

[16:07] <Zoffix> m: with "/tmp".IO.add(rand) { .spurt: "abc"; with .open(:bin) { dd .read(1).decode; dd .tell; dd .read(1).decode; dd .tell } }

[16:07] <camelia> rakudo-moar d0cd13: OUTPUT: «"a"␤1␤"b"␤2␤»

[16:07] <Zoffix> m: with "/tmp".IO.add(rand) { .spurt: "abc"; with .open { dd .readchars(1); dd .tell; dd .readchars(1); dd .tell } }

[16:07] <camelia> rakudo-moar d0cd13: OUTPUT: «"a"␤2␤"b"␤3␤»

[16:07] <Zoffix> Also bustified like .getc

[16:08] <geekosaur> need to think about how the unget affects things

[16:09] <geekosaur> also is that exposed, such that someone could unget a different thing than was read (C stdio allows this)? which means the file offset is in fact distinct and should behave like that

[16:10] <Zoffix> Don't think we have an unget

[16:10] <cygx> Zoffix: binary and char-based routines don't mix well

[16:10] <cygx> ages ago, I started doing something about it: https://github.com/MoarVM/MoarVM/pull/319/files , but it did not go anywhere

[16:11] <Zoffix> cygx: the implication being that .tell is binary?

[16:11] <geekosaur> effectively yes

[16:11] <geekosaur> seeking and non-byte/record IO don't mix very well

[16:11] <geekosaur> in any language

[16:11] <Zoffix> :/

[16:12] <geekosaur> I mean, you can try, but contemplate for example the difference between seek/tell and setpos/getpos in POSIX

[16:13] <geekosaur> one might argue that tell should be left as is and a getpos/setpos type thing should be used to paper over the utf8 readahead the same way it is used to paper over newline differences

[16:14] <geekosaur> but it will be imperfect at best

[16:15] <cygx> geekosaur: why? in case of random access files (and ignoring concurrent access), perfection is possible in principle

[16:16] <geekosaur> is it? can you reliably get to the next position from the current one and the contents of a string you have read?

[16:16] <geekosaur> (tail is an example of a program that wants to do this)

[16:17] <Geth> ¦ roast: ea137f64d3 | (Zoffix Znet)++ | S32-io/tell.t

[16:17] <Geth> ¦ roast: [io grant] Cover IO::Handle.tell

[16:17] <Geth> ¦ roast:

[16:17] <Geth> ¦ roast: Closes RT#123838: https://rt.perl.org/Ticket/Display.html?id=123838

[16:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ea137f64d3

[16:17] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123838

[16:20] <cygx> not sure I understand the scenario: the OS tracks the position in the file, and the decoding buffer knows how many bytes it has read ahead

[16:21] <geekosaur> but does the user code know, or can it get at that information?

[16:21] <geekosaur> that's the specific difference between seek/tell and setpos/getpos

[16:22] <geekosaur> or does the lanbguage try to paper it over and can it do so with 100% reliability (i.e. knowing the user program didn't decide to seek by some different amount instead)?

[16:29] <cygx> what I woud provide are byte-oriented seek/tell methods and the ability to skip (from current position) in any of the unites of interest (bytes, codepoints, graphemes)

[16:42] * Zoffix is burnt out

[16:42] <Zoffix> Gonna take a break until next weekend.

[16:42] <Zoffix> Ping me if need anything

[16:43] * Zoffix &

[16:44] <cygx> have fun

[16:44] * cygx isn't burnt out, but needs to get groceries

[16:52] <MasterDuke_> if anyone is interested, here is a profile of test-t.pl: https://gist.github.com/MasterDuke17/0f579d524c1371a0bb1bd0463cd6c8b8

[18:02] <Geth> ¦ nqp: 5c29d1840c | (Pawel Murias)++ | 2 files

[18:02] <Geth> ¦ nqp: [js] Implement nqp::setdispatcherfor

[18:02] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5c29d1840c

[18:02] <Geth> ¦ nqp: 43c520138c | (Pawel Murias)++ | t/nqp/100-dispatcher.t

[18:02] <Geth> ¦ nqp: Test nqp::setdispatcherfor

[18:02] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/43c520138c

[18:02] <Geth> ¦ nqp: 05b51d4564 | (Pawel Murias)++ | 4 files

[18:02] <Geth> ¦ nqp: [js] Run fixjsstyle

[18:02] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/05b51d4564

[19:02] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1070: Add test for RT #118263 fix

[19:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1070

[19:02] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=118263

[19:43] <stmuk> timotimo: is it possible to disable telemeh from being compiled? I ask since "x86intrin.h" isn't present on old GCC versions it seems

[19:43] <stmuk> I mean is there a compile time option?

[19:48] <timotimo> not yet

[19:49] <timotimo> i can put a define in

[19:49] <timotimo> i.e. put a -DNO_TELEMEH

[19:49] <timotimo> in the cflags

[19:49] <timotimo> nit sure how to work the configure.pl script

[19:50] <timotimo> would be best if there wqs a probe in the configure script

[19:50] <timotimo> but dont know how to

[19:50] <stmuk> that might help on platforms such as OpenBSD with its ancient gcc 4.2.1

[19:50] <timotimo> damn

[19:56] <stmuk> I have a old note of rakudobrew build moar --configure-opts=--moar-option=--cc=clang36

[19:57] <stmuk> I assume a -DNO_TELEMEH might be passed in a similar way .. at least as a start

[19:58] <stmuk> I could probably work out how to add that into the Configure.pl

[20:00] <timotimo> actually, no, not just like that

[20:01] <timotimo> but i'm about to write a probe for this

[20:01] <stmuk> ok

[20:17] <dogbert17> are the versions of 'say' called on lines 517 and 523 different or the same, i.e. is say != nqp::say ?

[20:18] <dogbert17> oops, https://github.com/perl6/nqp/blob/master/src/HLL/Compiler.nqp#L515

[20:19] <MasterDuke_> i think nqp's say() is just sugar for nqp::say()

[20:20] <timotimo> it's probably a sub in nqp's setting though

[20:21] <MasterDuke_> yeah, like note(). which is why i also think it doesn't work in some places, if it's too early in the nqp compilation

[20:22] <dogbert17> MasterDuke_, timotimo: thx, have just written this https://gist.github.com/dogbert17/f97842d671848b75f01a0995b0409155

[20:24] <dogbert17> if it doesn't look like junk it will be part of a PR for RT #130760

[20:24] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130760

[20:27] <timotimo> yeah, if you don't have note, you need to use nqp::sayfh(nqp::getstderr, "foobar")

[20:27] <dogbert17> when I tried the code it definitely looked as if note was available

[20:39] <timotimo> stmuk: can you review my attempt at making --no-telemeh/--telemeh and also "probe if rdtscp exists" exist?

[20:42] <Geth> ¦ nqp: dogbert17++ created pull request #355: Fix for RT #130760

[20:42] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/355

[20:42] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130760

[20:43] <timotimo> stmuk: i pushed a branch to moarvm, i called it configure-telemeh-probe-rdtscp

[20:47] <timotimo> stmuk: it's not much perl5 i wrote, but i did write a bit of perl5, and i'm not experienced with perl5 whatsoever

[20:48] <Geth> ¦ rakudo/nom: 956a880556 | MasterDuke17++ | t/05-messages/01-errors.t

[20:48] <Geth> ¦ rakudo/nom: Add test for RT #118263 fix

[20:48] <Geth> ¦ rakudo/nom:

[20:48] <Geth> ¦ rakudo/nom: The message when trying to pun a role with required methods should have

[20:48] <Geth> ¦ rakudo/nom: the names of the child, parent, required methods, and suggest "does".

[20:48] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/956a880556

[20:48] <Geth> ¦ rakudo/nom: c0c9a7d7a1 | MasterDuke17++ | t/05-messages/01-errors.t

[20:48] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=118263

[20:48] <Geth> ¦ rakudo/nom: Check for desired parts of message, not exact text

[20:48] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c0c9a7d7a1

[20:48] <Geth> ¦ rakudo/nom: f0414c4681 | lizmat++ (committed using GitHub Web editor) | t/05-messages/01-errors.t

[20:48] <Geth> ¦ rakudo/nom: Merge pull request #1070 from MasterDuke17/add_test_for_RT118263_fix

[20:48] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=118263

[20:48] <Geth> ¦ rakudo/nom:

[20:48] <Geth> ¦ rakudo/nom: Add test for RT #118263 fix

[20:48] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=118263

[20:48] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f0414c4681

[21:46] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/04/24/2017-17-interesting-times/

[21:52] <timotimo> hm. can we get %?RESOURCES not break apart?

[21:55] * lizmat tries

[21:58] <lizmat> alas

[21:58] <lizmat> suggestions ?

[21:58] <timotimo> no clue

[21:58] <lizmat> .u question

[21:58] <yoleaux> U+003F QUESTION MARK [Po] (?)

[21:58] <yoleaux> U+00BF INVERTED QUESTION MARK [Po] (¿)

[21:58] <yoleaux> U+037E GREEK QUESTION MARK [Po] (;)

[22:00] <lizmat> rephrased the line so it should come out better (usually)

[22:00] <lizmat> fwiw, in my preview, it did not break up  :-(

[22:01] <timotimo> yeah, i tend to view websites at some amount of zoomage

[22:04] <lizmat> good night, #perl6-dev!

[22:05] <timotimo> gnite lizmat

[22:05] <timotimo> lizmat++ #weekly

[22:09] <Zoffix> lizmat++ good weekly

[22:09] <yoleaux> 20:29Z <El_Che> Zoffix: I'll release updated 2017.03 packages tomorrow with Windows 10 bash support. I'll wait with 2014.04 until npq get released.
