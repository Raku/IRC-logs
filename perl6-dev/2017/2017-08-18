[01:22] <AlexDaniel> .tell jnthn if I tap on $procasync.stdout (without :bin), what kind of data am I getting? And what kind of assumptions can I have about it?

[01:22] <yoleaux> AlexDaniel: I'll pass your message to jnthn.

[01:22] <AlexDaniel> .tell jnthn I'm asking because I was expecting lines (stuff separated by \n), but apparently this is a dumb assumption given the limit of 65536

[01:22] <yoleaux> AlexDaniel: I'll pass your message to jnthn.

[01:28] <AlexDaniel> and if I want to read null-separated stuff, then what?

[01:30] <AlexDaniel> I'll get a bunch of Blobs and then I'll be doing some gluing business to get them the way I want? Hmm…

[01:53] <ugexe> oh -without- bin... ignore everything ive said :)

[03:37] <AlexDaniel> .tell Zoffix Try “treegrep: password”. It's undocumented, untested and unfinished, but may be helpful anyway

[03:37] <yoleaux> AlexDaniel: I'll pass your message to Zoffix.

[03:37] <AlexDaniel> treegrep: hello

[03:37] <greppable6> AlexDaniel, https://gist.github.com/a0f31a8418beb7c128cf21ea1030591d

[03:38] <AlexDaniel> .tell Zoffix and also uncommitted :P

[03:38] <yoleaux> AlexDaniel: I'll pass your message to Zoffix.

[09:07] <stmuk> I assume I can approximate a crude equivalent of Toaster with "zef smoke --force"?

[09:10] <stmuk> Zoffix: I don't see https://github.com/perl6-community-modules/uri/blob/master/META6.json being tested at https://toast.perl6.party/ (maybe I'm missing something?)

[09:10] <stmuk> this passed under 2017.07 and fails currently

[09:13] <nine> stmuk: there's also emmentaler

[09:21] <stmuk> I'll probably eat some next weekend

[11:58] <Zoffix> stmuk: look harder. It's there

[11:58] <yoleaux> 03:37Z <AlexDaniel> Zoffix: Try “treegrep: password”. It's undocumented, untested and unfinished, but may be helpful anyway

[11:58] <yoleaux> 03:38Z <AlexDaniel> Zoffix: and also uncommitted :P

[12:06] <Zoffix> treegrep: password

[12:06] <greppable6> Zoffix, https://gist.github.com/6e3548eb604125b70466eac6c030daea

[12:07] <Zoffix> .tell AlexDaniel treegrep seems to work

[12:07] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[12:20] <Zoffix> m: Supply.from-list("foo", "bar").split("x")

[12:20] <camelia> rakudo-moar a30ce6: OUTPUT: «Cannot resolve caller split(Supply, Str); Routine does not have any candidates. Is only the proto defined??  in block <unit> at <tmp> line 1??»

[12:25] <Zoffix> (last one was meant for #zofbot)

[12:28] <Geth> ¦ rakudo/less-wrapping: 9a3bc77632 | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[12:28] <Geth> ¦ rakudo/less-wrapping: Try to produce less containers for $ parameters.

[12:28] <Geth> ¦ rakudo/less-wrapping:

[12:28] <Geth> ¦ rakudo/less-wrapping: We wrap them up in a Scalar if we can't, at compile-time, see a type

[12:28] <Geth> ¦ rakudo/less-wrapping: constraint that rules out Iterable. This patch attempts to do that

[12:28] <Geth> ¦ rakudo/less-wrapping: only if a runtime check determines the parameter to be Iterable, and

[12:28] <Geth> ¦ rakudo/less-wrapping: just deconts it if not. Unfortunately, this breaks a few tests, and I

[12:28] <Geth> ¦ rakudo/less-wrapping: don't have time to look into that at the moment. But leaving this here

[12:28] <Geth> ¦ rakudo/less-wrapping: <…commit message has 5 more lines…>

[12:28] <Geth> ¦ rakudo/less-wrapping: review: https://github.com/rakudo/rakudo/commit/9a3bc77632

[12:28] <jnthn> nine: ^^ is the patch I mentioned on #moarvm that didn't work out so well, if you feel like exploring further

[12:34] <nine> jnthn: is the compile-time type check even enough? Nothing prevents me from passing an Int+Iterable to a sub foo(Int $a) {}

[12:34] <jnthn> nine: That's a "DIHWIDT" :)

[12:35] <jnthn> We've gotten away with it for years, so I suspect we'll continue to do so.

[12:38] <nine> But is it worth it? If spesh will remove the check and the wrapping when it's not needed anyway, why bother with the compile time check at all?

[12:38] <jnthn> Smaller code

[12:38] <jnthn> But yeah, good point :)

[12:39] <mst> DIHWIDT?

[12:39] <nine> mst: http://design.perl6.org/S99.html#DIHWIDT

[12:41] <jnthn> nine: Also there was no spesh back then :)

[12:41] <Geth> ¦ rakudo/nom: 866405067a | (Jonathan Worthington)++ | src/core/atomicops.pm

[12:41] <Geth> ¦ rakudo/nom: Optimization to get better code for Scalar atomics

[12:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/866405067a

[12:41] <mst> aha

[12:52] <lizmat> m: my int $a; for ^100000 { ++$a }; say now - INIT now

[12:52] <camelia> rakudo-moar 866405: OUTPUT: «0.03365874?»

[12:53] <lizmat> my int $a; use nqp; for ^100000 { $a = nqp::add_i($a,1) }; say now - INIT now

[12:53] <lizmat> m: my int $a; use nqp; for ^100000 { $a = nqp::add_i($a,1) }; say now - INIT now

[12:53] <camelia> rakudo-moar 866405: OUTPUT: «0.0335588?»

[12:53] <lizmat> hmmm... on my machine the prefix ++ version has become slight faster

[12:53] <nine> maybe just noise?

[12:53] <lizmat> m: my int $a; for ^100000 { ++$a }; say now - INIT now

[12:53] <camelia> rakudo-moar 866405: OUTPUT: «0.0341122?»

[12:53] <lizmat> m: my int $a; use nqp; for ^100000 { $a = nqp::add_i($a,1) }; say now - INIT now

[12:53] <camelia> rakudo-moar 866405: OUTPUT: «0.032682?»

[12:53] <jnthn> It may manage to only resolve the symbol once

[12:54] <jnthn> But I'd expect it to be within noise

[12:54] <jnthn> Also I'd imagine that is faster than the last release

[12:54] * nine hates noise

[12:54] <jnthn> Since it probably gets the block inlined now

[12:54] <lizmat> jnthn: which version?

[12:54] <jnthn> Both

[12:55] <jnthn> Every for blah() { ...tiny operation here... }

[12:56] <lizmat> ok

[12:58] <jnthn> That's a big part of why we can win on the million lines benchmark now :)

[13:46] <[Coke]> Robert Lemmen++

[14:30] <Zoffix> [Coke]: RE #perl6 password on www.p6c.org .... I don't see your account in home. What's your username?

[14:30] <Zoffix> Also password? y u no key? :)

[14:34] <[Coke]> I have changed laptops since then, and don't tend to keep keys

[14:34] <[Coke]> I'd create a new one if my documented password worked. It was 'coke', back in the day; no clue if i've been removed. was just going to check on the doc build failures reported in #perl6

[14:35] <[Coke]> I can give you the new key, that is also fine (I just realized this is probably what youw ere asking)

[14:35] <Zoffix> [Coke]: the doc build is on hack. It's failing because npm stuff is missing: https://irclog.perlgeek.de/perl6/2017-08-18#i_15037611

[14:36] <[Coke]> ok, if you're on it, that's great. I only saw the original report, not the followup. Thanks.

[14:37] <ugexe> the password was pepsi

[14:38] <[Coke]> That's just hurtful. :|

[14:38] <Zoffix> "you must login to services to message this user" ffs

[14:39] <Zoffix> k

[14:39] <Zoffix> [Coke]: account added, login/pass /msg'ed  you can set the key yourself, if yuou want :)

[14:39] <raschipi> Why is it even saving clear text passwords? That's a no no.

[14:40] <Zoffix> What?

[14:41] <raschipi> ugexe was able to retrieve Coke's clear password. That's a problem.

[14:41] * Zoffix snickers

[14:42] <[Coke]> raschipi: He's joking, in case it wasn't cleqar.

[14:42] <[Coke]> *clear

[14:42] <[Coke]> Coke and Pepsi have a brand rivalry.

[14:42] <ugexe> crytal clear pepsi

[14:42] <raschipi> Right, whoosh right over my head.

[14:43] <Zoffix> :)

[14:44] <[Coke]> btw, the new coke zero sugar is meh. I really prefer the "old" coke zero.

[14:46] <stmuk> club mate!

[14:46] <lucasb> :D

[14:47] <raschipi> I'm from the region mate comes from...

[14:47] <[Coke]> I tried that the SPW, I know many of you were super excited about it. I don't recall it being my cup of mate.

[14:47] <[Coke]> I'm at the point now where I'm considering stocking up on whatever's left of old Coke Zero so I have a stash. :)

[14:48] <raschipi> Mate is sold everywhere around here...

[14:49] <jnthn> I was one of the handful of kids that didn't like any <coke pepsi sprite fanta ...>. Pretty much anything with gas.

[14:50] <nine> A very healthy trait :)

[14:50] * Zoffix has a carbonation machine and drinks carbonated tap water

[14:50] <jnthn> I'm OK with, but don't care much for, sprite/fanta by now. I don't know if I ever drank one yet this year.

[14:50] <jnthn> Carbonated water I really disliked.

[14:50] <jnthn> Now I can tolerate it.

[14:51] <jnthn> Beer is fine. :)

[14:51] <Zoffix> eww beer

[14:51] <jnthn> Though even then, I don't like the more heavily carbonated lagers

[14:53] <raschipi> My city grew out of packaging mate for exporting. This created a paper industry and print shops. That attracted publishers and marketing shops. And they brought creatives with them. Which made the city an awesome place.

[14:55] <stmuk> I was fairly shocked when my mother returned from Chile with Coca Tea (for altitude sickness she claimed)

[14:56] <ilmari> we were serverd that when we arrived in cusco on our way to the world scout jamboree in 1998

[14:56] <ilmari> it is (was?) apaprently the only known remedy for altitude sickness

[14:57] <raschipi> Tea from Coca leaves is fine. Cocaine is actually hard to refine from it.

[14:57] <ilmari> it's still illegal to import coca leaves to most countries

[14:58] <raschipi> And the tree that gives out the leaves for Caca tea is different from the one used for extracting Cocaine.

[14:58] <ilmari> one of the scout leaders had bought some bags of it when they were on a recce before the jaboree

[14:58] <ilmari> he wasn't sure if it was legal to bring in, so he went on red at customs and asked, and got a _very_ stern talking to

[14:59] <ilmari> "some bags" as in a box of tebags

[14:59] <ilmari> *teabags

[15:00] <raschipi> I don't know if that's usually the case around the world, but in the Mercosur borders it's forbidden to carry *any* plant matter or animals or even fresh food.

[15:00] <ilmari> this was peru -> norway

[15:01] <raschipi> Only highly-processed food is allowed.

[15:01] <ilmari> I'd have thought teabags counted as highly-processed

[15:01] <raschipi> They're pieces of leaves, they're not very processed at all.

[15:02] <ilmari> they're dried and ground up

[15:02] <ilmari> are you allowed to take tobacco across borders?

[15:04] <AlexDaniel> Zoffix: any toaster news?

[15:04] <yoleaux> 08:37Z <jnthn> AlexDaniel: You're getting what you'd get with :bin fed into a streaming decoder, then with everything that's "ready" taken out of it; bytes representing incomplete codepoints in the encoding, or codepoint(s) that might form a grapeheme with what comes next, will be held back.

[15:04] <yoleaux> 08:38Z <jnthn> AlexDaniel: Note that you can use $procasync.stdout.lines to have the output broken up into lines as it arrives if that's what you want.

[15:04] <yoleaux> 12:07Z <Zoffix> AlexDaniel: treegrep seems to work

[15:05] <Zoffix> AlexDaniel: about to start another run

[15:06] <AlexDaniel> jnthn: so how can I do line-by-line processing?

[15:07] <AlexDaniel> jnthn: ah, missed your second message

[15:09] <AlexDaniel> I see

[15:12] <AlexDaniel> jnthn: ok, but what if it's 0-separated? I see no .split, and newlines seem to be hardcoded into .lines

[15:13] <Skarsnik> I wonder is NC and Test get a defined status concerning Perl6 release? like if it was discussed? I remember having NC dieing on bad type giveng and sub and it was reverted to keep 6.c compatible stuff not breaking

[15:13] <jnthn> AlexDaniel: Then you're on your own for now

[15:13] <jnthn> AlexDaniel: Though lines could be expanded to handle it better

[15:13] <Geth> ¦ tap-harness6/preprocess: 16 commits pushed by (Leon Timmermans)++

[15:13] <Geth> ¦ tap-harness6/preprocess: review: https://github.com/perl6/tap-harness6/compare/0000000000...c0c1dcaf67

[15:13] <jnthn> Do you actually need this? :)

[15:15] <AlexDaniel> jnthn: yes

[15:15] <AlexDaniel> I mean, how else would you do processing of stuff with newlines?

[15:15] <AlexDaniel> like file paths and stuff

[15:16] <jnthn> I meant the zero separated stuff :)

[15:16] <jnthn> Not .lines

[15:16] <raschipi> He needs 0-separated because the data has newlines in it.

[15:17] <jnthn> Anyway, it's pretty easy to write yourself

[15:17] <jnthn> Soemthing like

[15:17] <AlexDaniel> or *may* have newlines in it. Like, normally you don't put a newline into your file name, but it's legal

[15:17] <jnthn> supply { my $buffer = ''; whenever $stdout { $buffer ~= $_; while $buffer.index("\0") -> $idx { emit $buffer.substr(0, $idx); $buffer .= substr($idx + 1); } LAST emit $buffer } }

[15:18] <AlexDaniel> hmm

[15:18] <jnthn> Which is approximately what .lines is doing

[15:18] <jnthn> Just it's been micro-optimized

[15:18] <AlexDaniel> I see! Ok

[15:31] <Zoffix> AlexDaniel: well, bleed toast is failing to even start, if that says anything: https://gist.github.com/zoffixznet/8a5a4d80dd7983c23cf1cd2426ae9ab6

[15:31] * Zoffix tries using 2017.07 for toaster itself again, with updated zef

[15:33] <TimToady> yeah, that's definitely an unchecked .parse error

[15:33] <Zoffix> Yeah, no idea in what tho

[15:33] <Zoffix> oh damn, should've used --ll-exception >_<

[15:33] <Zoffix> gonna build it again after the toast run and do so

[15:36] <AlexDaniel> alright, RT #131923

[15:36] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131923

[15:45] <Geth> ¦ tap-harness6/preprocess: 9a5c60d36d | (Leon Timmermans)++ | lib/TAP.pm

[15:45] <Geth> ¦ tap-harness6/preprocess: Explicitly devnull stderr output when asked

[15:45] <Geth> ¦ tap-harness6/preprocess: review: https://github.com/perl6/tap-harness6/commit/9a5c60d36d

[16:27] <TimToady> so where is the source code for this Toaster?  neither zef nor cpanm seem to know about it

[16:27] <nine> TimToady: https://toast.perl6.party/ contains a link to the Github repo

[16:27] <TimToady> google also found it

[16:29] <Zoffix> https://github.com/zoffixznet/perl6-Toaster

[16:30] <TimToady> so looks like the failure is out of JSON::Fast probably

[16:31] <Zoffix> oh

[16:46] <stmuk> damm you Log::Minimal

[16:47] <Geth> ¦ tap-harness6/preprocess: 0a7be0bb67 | (Leon Timmermans)++ | lib/TAP.pm

[16:47] <Geth> ¦ tap-harness6/preprocess: Add a loose mode to the Harness

[16:47] <Geth> ¦ tap-harness6/preprocess: review: https://github.com/perl6/tap-harness6/commit/0a7be0bb67

[16:47] <Zoffix> stmuk: ?

[16:48] <stmuk> I've reproduced https://github.com/moznion/p6-Log-Minimal/issues/8

[16:48] <Zoffix> heh

[16:49] <Geth> ¦ tap-harness6/preprocess: 9e385534c4 | (Leon Timmermans)++ | lib/TAP.pm

[16:49] <Geth> ¦ tap-harness6/preprocess: Add a loose mode to the Harness

[16:49] <Geth> ¦ tap-harness6/preprocess: review: https://github.com/perl6/tap-harness6/commit/9e385534c4

[16:53] <Geth> ¦ rakudo/nom: 7154638f48 | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/ChangeLog

[16:53] <Geth> ¦ rakudo/nom: Log all changes

[16:53] <Geth> ¦ rakudo/nom:

[16:53] <Geth> ¦ rakudo/nom: Some less important internal changes were removed from the log.

[16:53] <Geth> ¦ rakudo/nom:

[16:53] <Geth> ¦ rakudo/nom: Deliberately not logged:

[16:53] <Geth> ¦ rakudo/nom: 01553585 7ab6eb6a 9d5e9295 cbfda906 9501edae 591f69af 435f7e36 63cdc426

[16:53] <Geth> ¦ rakudo/nom: a30ce6bc 3e70d44d 01b6d3f5 40853b4f de312452 5ea85965 79c62c0b 6eb8f7e7

[16:53] <Geth> ¦ rakudo/nom: 413b5331 46b1a7f2 22e25da2 cdbb0858 027e25fb 86640506 e7e33173 a45ede9c

[16:53] <Geth> ¦ rakudo/nom:

[16:53] <Geth> ¦ rakudo/nom: e86bdfca 5f68c775 e4802f4a

[16:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7154638f48

[16:54] <AlexDaniel> [Coke]: do we want some special mention of '.' and 'blib' issue?

[16:57] <[TuxCM]> This is Rakudo version 2017.07-149-g93a5eff7c built on MoarVM version 2017.07-382-g348b4262

[16:57] <[TuxCM]> csv-ip5xs        1.384 - 1.400

[16:57] <[TuxCM]> test            12.257

[16:57] <[TuxCM]> test-t           4.416 - 4.400

[16:57] <[TuxCM]> csv-parser      14.316

[16:59] <Skarsnik> where are my comparaison and defined operator! I am tired for writing if $foo.defined and $foo eq $bar !

[16:59] <Zoffix> $foo andthen $_ eq $bar

[16:59] <AlexDaniel> Skarsnik: By the way, do you know about “with”?

[17:00] <Skarsnik> hm

[17:01] <Zoffix> ($foo//'') eq $bar

[17:01] <Skarsnik> but will be with $foo { if $foo eq $bar} ?

[17:01] <Zoffix> hm, unless $bar can be empty :)

[17:01] <AlexDaniel> Skarsnik: or just use andthen. with and andthen are very similar

[17:02] <Skarsnik> dunno if $foo:D eq $bar could be fun? x)

[17:02] <Zoffix> nope

[17:03] <AlexDaniel> m: my $foo:D = ‘pizza’; say $foo:D

[17:03] <camelia> rakudo-moar 866405: OUTPUT: «pizza?»

[17:03] <AlexDaniel> :D

[17:03] <Zoffix> Skarsnik: see #perl :)

[17:03] <Zoffix> Skarsnik: see #perl6 :)

[17:05] <TimToady> or I could just dup it here

[17:05] <TimToady> m: say "foo" when "bar" given Any

[17:05] <camelia> rakudo-moar 866405: ( no output )

[17:05] <TimToady> m: say "foo" when "bar" given "bar"

[17:05] <camelia> rakudo-moar 866405: OUTPUT: «foo?»

[17:05] <TimToady> (sorry 'bout the mischan)

[17:06] <Skarsnik> well, there is still a request/duplicate test for bar

[17:09] <Skarsnik> m: sub infix<def-eq>($a, $b) { $a.defined and $b.defined and $a eq $b} ; my $a; my $b = "b"; say $b def-eq $a;

[17:09] <camelia> rakudo-moar 866405: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>?Missing block?at <tmp>:1?------> 3sub infix7?5<def-eq>($a, $b) { $a.defined and $b.def?    expecting any of:?        new name to be defined?»

[17:09] <Skarsnik> m: sub infix:<def-eq>($a, $b) { $a.defined and $b.defined and $a eq $b} ; my $a; my $b = "b"; say $b def-eq $a;

[17:09] <camelia> rakudo-moar 866405: OUTPUT: «False?»

[17:12] <Geth> ¦ nqp: f34562f5fb | TimToady++ | 2 files

[17:12] <Geth> ¦ nqp: uncollide nqp's starter/stopper from rakudo's

[17:12] <Geth> ¦ nqp:

[17:12] <Geth> ¦ nqp: Turns out rakudo's starter/stopper use dynvars, while rakudo's use mixins, so

[17:12] <Geth> ¦ nqp: accidentally calling rakudo's starter/stopper greatly confuse nqp.  Here we

[17:12] <Geth> ¦ nqp: rename nqp's starter/stopper to dynstarter/dynstopper to reflect their use

[17:12] <Geth> ¦ nqp: of dynamic vars, since there are likely to be fewer grammars derived from

[17:12] <Geth> ¦ nqp: nqp grammars than from rakudo grammars.

[17:12] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f34562f5fb

[17:13] * Skarsnik love to wait 1mn for his script to run

[17:13] <TimToady> that should be completely benign, and doesn't really need changelogging

[17:15] <Skarsnik> unrelated. when trying to track/fix #127345 I noticed that moar get the line of the start of statement. So it was probably what build the ast that does not mark corectly the line. Should I search in nqp code?

[17:15] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=127345

[17:19] <timotimo> Skarsnik: i believe we deliberately leave out line numbers for anything but QAST::Stmt or Stmts or something

[17:21] <Skarsnik> I mean if I understand correctly a Statement is the whole instruction up to the ; and each part is a callframe?

[17:24] <Skarsnik> You have the right to tell me that I know nothing about writing compiler and stuff, since it's true xD

[17:24] <Zoffix> buggable: toast

[17:24] <buggable> Zoffix, Between 2017.07-195-g8664050 and 2017.07: 35 (4.08%) modules got burnt; 36 (4.20%) got unsucced; 267 (31.16%) out of 857 modules appear unusable. See https://toast.perl6.party/ for details.

[17:24] <Zoffix> AlexDaniel: ^ new run

[17:25] <timotimo> is JSON::Fast in trouble?

[17:25] <timotimo> Skarsnik: callframes are related to what subroutine invokes what other subroutine

[17:26] <AlexDaniel> this does not look too bad

[17:35] <Zoffix> Really?

[17:35] <Zoffix> Last toast was only like 4 or 8 modules burnt

[17:35] <AlexDaniel> I didn't say that it wasn't bad :)

[17:35] <AlexDaniel> it's just that I expected worse

[17:36] <AlexDaniel> a couple of things have common problem with URI module it seems

[17:37] <AlexDaniel> … even p6doc

[17:38] <Geth> ¦ rakudo/nom: 9e61827bf0 | TimToady++ | 2 files

[17:38] <Geth> ¦ rakudo/nom: make sure expected list is flattened

[17:38] <Geth> ¦ rakudo/nom:

[17:38] <Geth> ¦ rakudo/nom: (This ensures that each entry prints on a separate line.)

[17:38] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9e61827bf0

[17:38] <TimToady> that one is also very minor

[17:38] <TimToady> both pass all spectests too

[17:40] <Skarsnik> hm everycall to a // will update $0,$1.. ?

[17:40] <TimToady> it will update $/, from which $0, etc are derived

[17:41] <timotimo> did you already respond to "is X::Comp really the right exception for user-provided grammars?"?

[17:41] <Skarsnik> Ok make sense. Should have named the capture in the first regex x)

[17:41] <timotimo> i find it a bit surprising that i'd get a ===SORRY!=== for MyGrammar.parse

[17:41] <TimToady> timotimo: nope, haven't seen that

[17:41] <TimToady> we could split it out, but I was lazy :)

[17:43] <timotimo> my role X::HighExplain

[17:50] <Zoffix> ZOFFLOP: t/spec/S17-lowlevel/cas.t

[17:50] <Zoffix> failed during stresstest, passed when run by itself

[17:50] <[Coke]> (special mention) since we don't have our act together, perhaps if we still have changelogs broken out by section, we can have a new "Security" section.

[17:56] * TimToady just updated #131922 to note that "slurpy" and "variadic" do not mean the same thing

[17:59] <Geth> ¦ rakudo/nom: 97f9eb7f3e | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/ChangeLog

[17:59] <Geth> ¦ rakudo/nom: “Security:” section

[17:59] <Geth> ¦ rakudo/nom:

[17:59] <Geth> ¦ rakudo/nom: [Coke]++

[17:59] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/97f9eb7f3e

[17:59] <AlexDaniel> [Coke]: like this? Anything else?

[18:00] <[Coke]> AlexDaniel: +1 from me. Thanks for doing the release.

[18:01] <Geth> ¦ rakudo/nom: 9303a6e422 | (Zoffix Znet)++ | lib/Test.pm6

[18:01] <Geth> ¦ rakudo/nom: Correctly handle test descriptions with new lines in them

[18:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9303a6e422

[18:03] <Zoffix> mc: use Test; plan 1; skip "FOo", 1; ok 0

[18:03] <committable6> Zoffix, ¦2015.12: «1..1?ok 1 - # SKIP FOo?not ok 2 - ??# Failed test at /tmp/0HpzdfHO_c line 1?# Looks like you planned 1 test, but ran 2?# Looks like you failed 1 test of 2 «exit code = 1»»

[18:06] <Geth> ¦ roast: 85edce2344 | (Zoffix Znet)++ | S24-testing/3-output.t

[18:06] <Geth> ¦ roast: Test newlines in descriptions get properly `#`-prefixed

[18:06] <Geth> ¦ roast:

[18:06] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/9303a6e422

[18:06] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/85edce2344

[18:17] <Zoffix> Another bunch of floppers, including lowlevel/cas.t one: https://gist.github.com/zoffixznet/d5494710f16dc1ad5efc95bc546b35de

[18:18] <AlexDaniel> huh… why am I never getting floppers

[18:18] <AlexDaniel> or is it from stress test?

[18:18] <Geth> ¦ rakudo/nom: eb529f1495 | (Zoffix Znet)++ | lib/Test.pm6

[18:18] <Geth> ¦ rakudo/nom: Fix wrongful escaping of `# SKIP` TAP instruction

[18:18] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eb529f1495

[18:18] <Zoffix> AlexDaniel: stresstest on 24-core box with 30 jobs

[18:19] <Geth> ¦ roast: 423cc68bf9 | (Zoffix Znet)++ | S24-testing/3-output.t

[18:19] <Geth> ¦ roast: Test skip() correctly prints skip TAP instruction

[18:19] <Geth> ¦ roast:

[18:19] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/eb529f1495

[18:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/423cc68bf9

[18:19] <AlexDaniel> right

[18:28] <AlexDaniel> ugexe: can you take a look at this https://github.com/perl6-community-modules/uri/pull/36 ?

[18:31] <Geth> ¦ rakudo/nom: 1599873d14 | TimToady++ | tools/build/NQP_REVISION

[18:31] <Geth> ¦ rakudo/nom: bump nqp to get dynstarter/dynstopper tweak

[18:31] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1599873d14

[18:31] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.07-48-gb084530...2017.07-54-gf34562f

[18:33] <AlexDaniel> # expected: "Subject: test\n\rTo: foo\n\r\n\rfoo\n\r"

[18:33] <AlexDaniel> #      got: "Subject: test\n\rTo: foo\n\r\n\rfoo\n\r"

[18:35] <TimToady> o_O

[18:36] <TimToady> is it not an "is"?

[18:36] <AlexDaniel> it has some “odd newlines”

[18:37] <TimToady> so could be something odd in the NFGness

[18:38] <AlexDaniel> if somebody is interested: https://github.com/retupmoca/p6-Email-Simple/blob/master/t/basic.t#L42-L48

[18:38] <AlexDaniel> “Round trip nasty” is failing

[18:38] <TimToady> sounds like something for samcv++ or jnthn++

[18:41] <jnthn> Does MVM_SPESH_DISABLE=1 help? :)

[18:41] <jnthn> (When yes, it tends to be me that's on the hook :P)

[18:42] <geekosaur> when I saw that I tried to point samcv at it and then got confused as to what triggered it

[18:42] <geekosaur> but yes, I suspect that NFG is going weird on the backwards newlines

[18:43] <AlexDaniel> jnthn: does not help

[18:43] <AlexDaniel> I just dd-ed .ords of both strings, they are identical

[18:43] <AlexDaniel> yet say ~$mail eq $nasty; # false ???

[18:44] <AlexDaniel> or am I blind

[18:44] <geekosaur> if you are then so am I... over two different days

[18:44] <AlexDaniel> say (~$mail).ords.list ~~ ($nasty).ords.list; # true

[18:44] <evalable6> AlexDaniel, rakudo-moar 1599873d1: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/fcAr3EER0a?Variabl…»

[18:44] <evalable6> AlexDaniel, Full output: https://gist.github.com/47e14ad8c23f73371e6fe705f4b7bebe

[18:44] * AlexDaniel slaps evalable6

[18:47] <AlexDaniel> dd (~$mail).substr(23, 1).ords;  # (13,).Seq

[18:47] <AlexDaniel> dd (~$nasty).substr(23, 1).ords; # (13, 10).Seq

[18:50] <AlexDaniel> I'll have to go in ?10 minutes (food!). It won't hurt to have more eyes on this. There are a couple of modules depending on Email::Simple

[18:52] <AlexDaniel> hm, maybe something is not being renormalized?

[18:52] <AlexDaniel> I really don't know

[19:27] <yoleaux> Zoffix: fix xtest on doc

[19:36] <timotimo> AlexDaniel: there used to be a bug in eq where we were able to concat two strings and \n and \r didn't fuse into one grapheme

[19:36] * AlexDaniel back

[19:36] <timotimo> should also give you two different amounts for nqp::graphs

[19:36] <timotimo> also, i saw you already found the exact place where it happened

[19:37] <AlexDaniel> timotimo: “used to be” means that it was fixed?

[19:38] <timotimo> i thought it was, but it could easily have resurfaced from another change being not-perfect

[19:38] <AlexDaniel> well… let's see

[19:40] <AlexDaniel> commit: 2017.07 https://gist.githubusercontent.com/AlexDaniel/64032cb24876d9a1cfac44a752921d20/raw/c90314e620df087fc6434c9e39a3406b92a99215/basic.t

[19:40] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[19:40] <committable6> AlexDaniel, https://gist.github.com/503541f1e0e6f3791ee30fb2b46ceed8

[19:40] <AlexDaniel> argh

[19:41] <AlexDaniel> commit: 2017.07 https://gist.githubusercontent.com/AlexDaniel/64032cb24876d9a1cfac44a752921d20/raw/2d242fa49eef2b74da1b6626e337631463471182/basic.t

[19:41] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[19:41] <committable6> AlexDaniel, ¦2017.07: «ok 1 - got correct line terminator?ok 2 - got correct body?ok 3 - Round trip nasty»

[19:41] <AlexDaniel> commit: HEAD https://gist.githubusercontent.com/AlexDaniel/64032cb24876d9a1cfac44a752921d20/raw/2d242fa49eef2b74da1b6626e337631463471182/basic.t

[19:41] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[19:41] <committable6> AlexDaniel, https://gist.github.com/820d2ad816882da36e9206866e312ab9

[19:41] <AlexDaniel> bisect: old=2017.07 https://gist.githubusercontent.com/AlexDaniel/64032cb24876d9a1cfac44a752921d20/raw/2d242fa49eef2b74da1b6626e337631463471182/basic.t

[19:41] <bisectable6> AlexDaniel, Successfully fetched the code from the provided URL.

[19:41] <bisectable6> AlexDaniel, Bisecting by exit code (old=2017.07 new=1599873). Old exit code: 0

[19:41] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/d16b49e55a1102e25b95be5df7bbf902

[19:41] <bisectable6> AlexDaniel, (2017-07-20) https://github.com/rakudo/rakudo/commit/b81597bd867a0072cea6453529da89a13ede808c

[19:42] <AlexDaniel> “String concatenation improvements” OK, seems relevant

[19:43] <timotimo> good to find this before the release

[19:43] <AlexDaniel> Zoffix++ for his toaster

[19:46] <timotimo> is it wrong to expect "zef test" to also run Build.pm for me?

[19:46] <timotimo> i'm looking at a module that relies on LibraryMake, but it doesn't work properly

[19:49] <AlexDaniel> .tell samcv I'm marking RT #131924 as a blocker. Would be great if you could take a look

[19:49] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131924

[19:49] <yoleaux> AlexDaniel: I'll pass your message to samcv.

[19:49] <samcv> hey AlexDaniel

[19:49] <yoleaux> 13:29Z <Zoffix> samcv: would you be able to unbust the doc build. After hack's upgrade it's missing some sort of npm bits and I can't figure out which: https://github.com/perl6/doc/issues/1457#issue-251240775

[19:49] <yoleaux> 19:49Z <AlexDaniel> samcv: I'm marking RT #131924 as a blocker. Would be great if you could take a look

[19:49] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131924

[19:49] <AlexDaniel> samcv: oh, hi! :)

[19:49] <samcv> ok thanks for letting me know. will look at the blocker first

[19:50] <samcv> just got my tea so ready to go

[19:50] <samcv> AlexDaniel, have we run the toaster yet

[19:50] <AlexDaniel> samcv: yes, this bug is exactly from toaster :)

[19:50] <samcv> yay

[19:50] <AlexDaniel> https://toast.perl6.party/

[19:51] <AlexDaniel> a lot of it is because of URI module which is now broken after Grammar.parse changes

[19:51] <AlexDaniel> I've submitted a pull request here: https://github.com/perl6-community-modules/uri/pull/36

[19:52] <AlexDaniel> then a bunch of stuff is not installable because Email::Simple is failing

[19:53] <AlexDaniel> and that's when I had to take a break for some food :)

[19:54] <timotimo> the appveyor failure is because of a not-windows-compatible change i just fixed recently

[19:54] <timotimo> when samcv fixes the concatenation/synthetic bug there'll be a bump anyway

[19:54] <AlexDaniel> okay

[19:56] <AlexDaniel> damn, everyone on this channel is so helpful. Thank you

[19:59] <Zoffix> m: cas $i, -> int $current { $current * 2 }

[19:59] <camelia> rakudo-moar 159987: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>?Variable '$i' is not declared?at <tmp>:1?------> 3cas 7?5$i, -> int $current { $current * 2 }?»

[19:59] <Zoffix> [Coke]: you around? xtest complaining about that ^ code sample with "Something went wrong in (Undeclared)". What do I do?

[20:00] <timotimo> aha! it fails because Panda::Common can't be use-d

[20:00] <timotimo> (the Build.pm i'm looking at)

[20:01] <Zoffix> m: say atomicsize

[20:01] <camelia> rakudo-moar 159987: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>?Undeclared routine:?    atomicsize used at line 1. Did you mean 'atomic-inc'???»

[20:01] <Zoffix> What's atomicsize ?

[20:02] <Zoffix> In docs "If C<$value> otherwise overflows C<atomicsize> then it will be silently truncated before the addition is performed."

[20:02] <AlexDaniel> c: 2017.07 say [$*DISTRO.Str|$*KERNEL.Str] ~~ m:i/linux/;

[20:02] <committable6> AlexDaniel, ¦2017.07: «?linux?»

[20:02] <AlexDaniel> bisect: old=2017.07 say [$*DISTRO.Str|$*KERNEL.Str] ~~ m:i/linux/;

[20:02] <bisectable6> AlexDaniel, Bisecting by exit code (old=2017.07 new=1599873). Old exit code: 0

[20:02] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/aa04676317f2df828e775a4bafad6954

[20:02] <bisectable6> AlexDaniel, (2017-08-09) https://github.com/rakudo/rakudo/commit/1761f953dba58b5a1f59be3f9fe402dab082750c

[20:02] <AlexDaniel> …

[20:02] <AlexDaniel> oh…

[20:02] <samcv> my current \r\n test doesn't catch it S15-nfg/concat-stable.t so once i install Mail::Simple imma test this out

[20:03] <AlexDaniel> c: 2017.07,HEAD say [$*DISTRO.Str|$*KERNEL.Str].Str

[20:03] <committable6> AlexDaniel, ¦2017.07: «any("debian", "linux")» ¦HEAD(1599873): «This type cannot unbox to a native string: P6opaque, Junction?  in block <unit> at /tmp/2a4rDBAlUa line 1? «exit code = 1»»

[20:03] <timotimo> perhaps zef should put a custom CUR into the path that detects and maybe even handles Panda::Common being missing

[20:04] <samcv> ok i found the issue

[20:04] <Zoffix> \o/

[20:04] <AlexDaniel> \o/ I didn't expect it to happen so fast

[20:04] <samcv> m: "\r\n".chars.say; "\x0a\x0d".chars.say

[20:04] <camelia> rakudo-moar 159987: OUTPUT: «1?2?»

[20:04] <AlexDaniel> Zoffix: any chance you can rerun toastor a little bit later?

[20:04] <samcv> hmm. why would it...

[20:05] <AlexDaniel> toastor, heh…

[20:05] <Zoffix> ok

[20:05] <AlexDaniel> Zoffix: ?

[20:05] <samcv> bisectable6, "\x0a\x0d".chars.say

[20:05] <bisectable6> samcv, On both starting points (old=2015.12 new=1599873) the exit code is 0 and the output is identical as well

[20:05] <bisectable6> samcv, Output on both points: «2»

[20:05] <samcv> ok so it's not a new bug?

[20:06] <samcv> still a bug though

[20:06] <AlexDaniel> samcv: maybe not, yes. Perhaps previously things were renormalized more than they should have, so the bug was hidden by this?

[20:06] <AlexDaniel> lizmat: here?

[20:07] <samcv> i mean. the thing that introduces it is  "\x0a\x0d"

[20:07] <samcv> but i guess that's possible it renormalized \r\n unneededly. in that case probably a speedup when i changed when we trigger

[20:08] <samcv> to not trigger for \r or \n unless it sees \r\n (has a short circuit case for \r or \n characters now)

[20:08] <samcv> which is within unicode spec

[20:08] <timotimo> so the upgrade path for Build.pm is probably just throwing out the Panda bits and make the Builder class just a Plain Old Class?

[20:08] <samcv> what i want to know is how it constructs the string  "\x0a\x0d" that it ends up not being normalized though

[20:10] <AlexDaniel> c: 2017.07 say [$*DISTRO.Str|$*KERNEL.Str] ~~ m:i/‘any’/

[20:10] <committable6> AlexDaniel, ¦2017.07: «?any?»

[20:10] <AlexDaniel> c: HEAD say [$*DISTRO.Str|$*KERNEL.Str] ~~ m:i/‘any’/

[20:10] <committable6> AlexDaniel, ¦HEAD(1599873): «This type cannot unbox to a native string: P6opaque, Junction?  in block <unit> at /tmp/8HQpdDUTkr line 1? «exit code = 1»»

[20:11] <Zoffix> m: say [<a b>.any].Str

[20:11] <camelia> rakudo-moar 159987: OUTPUT: «This type cannot unbox to a native string: P6opaque, Junction?  in block <unit> at <tmp> line 1??»

[20:11] <Zoffix> s: [], 'Str', \()

[20:11] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/1599873d1/src/core/List.pm#L369

[20:12] <Zoffix> m: say [<a b>.any].join: "meows"

[20:12] <camelia> rakudo-moar 159987: OUTPUT: «This type cannot unbox to a native string: P6opaque, Junction?  in block <unit> at <tmp> line 1??»

[20:12] <Zoffix> s: [], 'join', \()

[20:12] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/1599873d1/src/core/List.pm#L1149

[20:12] <samcv> AlexDaniel, the problem happens during compilation

[20:12] <AlexDaniel> Zoffix: the code is wrong, obviously, but I'm seeing something weird anyway

[20:12] <samcv> so it compiles in the wrong string

[20:13] <AlexDaniel> FWIW it's https://github.com/dnmfarrell/System-Passwd/blob/master/lib/System/Passwd.pm6#L12

[20:13] <Zoffix> AlexDaniel: FWIW: https://irclog.perlgeek.de/perl6-dev/2017-08-09#i_14992203

[20:13] <AlexDaniel> Zoffix: I've seen that, but the idea of reverting it makes me cry

[20:14] <Zoffix> Why?

[20:14] <Zoffix> The native-string-Junction will keep popping up.

[20:14] <AlexDaniel> m: say $*DISTRO.Str|$*KERNEL.Str ~~ /‘debian’/

[20:14] <camelia> rakudo-moar 159987: OUTPUT: «any(Nil, Nil)?»

[20:14] <AlexDaniel> m: say $*DISTRO.Str|$*KERNEL.Str ~~ /‘linux’/

[20:14] <camelia> rakudo-moar 159987: OUTPUT: «any(Nil, ?linux?)?»

[20:14] <AlexDaniel> m: say so $*DISTRO.Str|$*KERNEL.Str ~~ /‘linux’/

[20:14] <camelia> rakudo-moar 159987: OUTPUT: «True?»

[20:14] <AlexDaniel> m: say $*DISTRO.Str|$*KERNEL.Str ~~ m/‘linux’/

[20:14] <camelia> rakudo-moar 159987: OUTPUT: «False?»

[20:14] <AlexDaniel> is it correct?

[20:15] <samcv> bisectable6, "\x[0a,0d]".chars.say

[20:15] <bisectable6> samcv, On both starting points (old=2015.12 new=1599873) the exit code is 0 and the output is identical as well

[20:15] <bisectable6> samcv, Output on both points: «2»

[20:15] <samcv> ok so it's always been a problem

[20:15] <samcv> it compiles in the wrong string...

[20:15] <samcv> goddamit

[20:15] <samcv> ok so how does it construct that string though?

[20:15] <samcv> should be in nqp i think

[20:16] <AlexDaniel> Zoffix: it's a very promising feature, I've needed this personally a couple of times

[20:16] <AlexDaniel> Zoffix: but I'm not saying that we shouldn't revert it, just that it's sad

[20:17] <AlexDaniel> Zoffix: do you have any idea why smartmatching a junction agains m// gives false in this case?

[20:17] <Zoffix> m: say $*DISTRO.Str|$*KERNEL.Str

[20:17] <camelia> rakudo-moar 159987: OUTPUT: «any(opensuse, linux)?»

[20:18] <Zoffix> m: say ($*DISTRO.Str|$*KERNEL.Str).perl

[20:18] <camelia> rakudo-moar 159987: OUTPUT: «any("opensuse", "linux")?»

[20:18] <samcv> hmm wait that's not the issue that's just a reversed \r\n. sorry was misreading things

[20:18] <Zoffix> s: /^/, 'ACCEPTS', \(any("opensuse", "linux"))

[20:18] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/1599873d1/src/core/Code.pm#L7

[20:18] <AlexDaniel> m: $_ = $*DISTRO.Str|$*KERNEL.Str; say m/‘linux’/;

[20:18] <camelia> rakudo-moar 159987: OUTPUT: «any(Nil, ?linux?)?»

[20:18] <moritz> m: say so $*DISTRO.Str|$*KERNEL.Str ~~ /linux/

[20:18] <camelia> rakudo-moar 159987: OUTPUT: «True?»

[20:18] <moritz> m: say so $*DISTRO.Str|$*KERNEL.Str ~~ m/linux/

[20:18] <camelia> rakudo-moar 159987: OUTPUT: «False?»

[20:18] <moritz> aha

[20:19] <moritz> it's possibly related to the weird stuff that we do to make m/.../ matching work in general

[20:19] <moritz> m/.../ matches immediately, and returns a Match

[20:20] <moritz> and then smart-matching against a Match returns True (or the Match), always

[20:23] <AlexDaniel> moritz: so it's a bug, right?

[20:24] <moritz> AlexDaniel: yes, I'd say so

[20:25] <Geth> ¦ roast: e9a2bda8c4 | (Christopher Bottoms)++ | S02-literals/heredocs.t

[20:25] <Geth> ¦ roast: Added failing heredoc tests

[20:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e9a2bda8c4

[20:26] <AlexDaniel> moritz: RT #131925

[20:26] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131925

[20:29] <AlexDaniel> Pull request for System::Passwd https://github.com/dnmfarrell/System-Passwd/pull/12

[20:32] <Geth> ¦ roast: 9be474c12c | (Christopher Bottoms)++ | S02-literals/heredocs.t

[20:32] <Geth> ¦ roast: Revert "Added failing heredoc tests"

[20:32] <Geth> ¦ roast:

[20:32] <Geth> ¦ roast: This reverts commit e9a2bda8c4596f04b4549e416bba7b191a181999.

[20:32] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9be474c12c

[20:35] <AlexDaniel> alright, next module…

[20:39] <AlexDaniel> alright, DOM::Tiny suffers from the Grammar.parse change

[20:41] <AlexDaniel> my plan is to fix as many modules as I can today, so that it will be easier for us next time when we introduce Grammar.parse change again

[20:42] <samcv> ok i found the issue. it's in `split`

[20:43] <samcv> well maybe. investigating

[20:44] <Geth> ¦ roast: molecules++ created pull request #295: additional failing heredoc tests

[20:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/295

[20:51] <timotimo> AlexDaniel: what a coinkidink, i'm also fixing a few modules!

[20:52] <AlexDaniel> Could not find META6:ver<0.0.4..*>

[20:52] <AlexDaniel> META6:ver('0.0.12'):auth('github:jonathanstowe')

[20:52] <AlexDaniel> so 0.0.12 is installed but it cannot find 0.0.4..*, why?

[20:52] <Zoffix> AlexDaniel: are you sure you're on latest zef?

[20:53] <AlexDaniel> Zoffix: totally unsure

[20:53] <Zoffix> I thought I saw some mention of this stuff awhile back and zef getting a fix for it

[20:56] * AlexDaniel zef uninstall zef

[20:57] <timotimo> i went on latest zef and it still complained

[20:57] <timotimo> so i used zef nuke site home and reinstalled zef and some stuff

[20:57] <Zoffix> oh :(

[20:58] <Zoffix> What module is the issue in?

[20:58] <AlexDaniel> DOM::Tiny

[20:58] <AlexDaniel> there's another issue in it with Grammar.parse and for that I have a pull request ready

[20:58] <timotimo> oh, do you know about the citations project?

[20:59] <AlexDaniel> ?

[20:59] <timotimo> https://github.com/finanalyst/ModuleCitation - this has the code and data files but there's also a web frontend somewhere

[21:00] * Zoffix knows about

[21:00] <Zoffix> it

[21:00] <timotimo> http://finanalyst.github.io/ModuleCitation/

[21:00] <Zoffix> It's linked to from the nav of modules.perl6.org afterall :)

[21:00] <timotimo> if we could cross-reference this with the toaster we could concentrate on things most used

[21:00] <Zoffix> true

[21:01] <AlexDaniel> yea

[21:02] <AlexDaniel> ok, yeah, it works!

[21:02] <AlexDaniel> nuking the whole thing helped

[21:02] <Zoffix> Well, I'm not having any META issues, so I'd say you guys have too old zef

[21:02] <Zoffix> nuke

[21:03] <Zoffix> nuke ~/.zef

[21:03] <timotimo> if you're having meta problems i feel bad for you son

[21:03] <timotimo> i got 99 problems but perl6 ain't one

[21:03] <timotimo> ~ hit me!

[21:03] * Zoffix resist the urge to ask huggable for nuclear option >:)

[21:04] <AlexDaniel> boom https://github.com/zostay/p6-DOM-Tiny/pull/3

[21:04] <AlexDaniel> next module!

[21:07] <samcv> AlexDaniel, i'm not able to golf the problem so far with the email module

[21:07] <samcv> i'm not quite sure what it's actually doing. i mean i've tried splitting the string up many ways and joining it, and even creating only the codepoints and concatting it at every index by codepoint (not grapheme) and it always turns out the same

[21:08] <AlexDaniel> samcv: should I try golfing it?

[21:08] <samcv> file was last edited dec 2015...

[21:08] <samcv> Fix things after unicode \r\n changes

[21:08] <samcv> i feel it may do something really weird

[21:08] <samcv> yeah if you colud golf it that would be awesome

[21:09] <AlexDaniel> meanwhile, does anybody know if SSL module is supposed to work?

[21:10] <timotimo> the async ssl one?

[21:10] <AlexDaniel> I don't know, this one: https://github.com/grondilu/openssl

[21:10] <AlexDaniel> toaster says that it Succ-ed on 2017.07, but its test files don't even have “use experimental :pack;”

[21:11] <timotimo> oh, that one is probably not used terribly much, since it only covers digests?

[21:11] <timotimo> or am i looking wrong?

[21:12] <Zoffix> Where are you people finding these wrong URLs to repos?

[21:12] <Zoffix> [Coke] did it. Now AlexDaniel did it

[21:12] <timotimo> hah what :)

[21:12] <Zoffix> buggable: eco OpenSSL

[21:12] <buggable> Zoffix, OpenSSL 'OpenSSL bindings': https://github.com/sergot/openssl 4 other matching results: https://modules.perl6.org/s/OpenSSL

[21:13] <AlexDaniel> https://modules.perl6.org/dist/SSL

[21:13] <AlexDaniel> buggable: eco SSL

[21:13] <buggable> AlexDaniel, SSL 'Perl6 interface to a OpenSSL (so far only digests though)': https://github.com/grondilu/openssl 5 other matching results: https://modules.perl6.org/s/SSL

[21:13] <AlexDaniel> pffffft :D

[21:14] <jnthn> buggable: SSL async

[21:14] <Zoffix> Never mind

[21:14] <jnthn> buggable: eco SSL async

[21:14] <buggable> jnthn, Nothing found

[21:14] <Skarsnik> m: use NativeCall; sub foo(num $foo) is native(){};

[21:14] <camelia> rakudo-moar 159987: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>?Cannot resolve caller infix:<==>(NQPMu, Int); none of these signatures match:?    ($?)?    (\a, \b)?    (Real \a, Real \b)?    (Int:D \a, Int:D \b)?    (int $a, int $b)?    (Num:D \a, Num:D \b …»

[21:14] <jnthn> aww :)

[21:14] <Zoffix> AlexDaniel: but Succ toaster seems to have installed sergot's openssl?

[21:15] <Zoffix> "===> Filtering: OpenSSL:ver('0.1.14'):auth('github:sergot')"

[21:15] <Zoffix> https://toast.perl6.party/module?module=SSL&commit=2017.07

[21:15] <Skarsnik> I should fix this error

[21:15] <Zoffix> buggable: eco SSL author:jnthn

[21:15] <buggable> Zoffix, IO::Socket::Async::SSL 'Provides an API like IO::Socket::Async, but with SSL support.': https://github.com/jnthn/p6-io-socket-async-ssl

[21:19] <AlexDaniel> boom another pull request https://github.com/stmuk/p6-app-p6tags/pull/3

[21:20] * AlexDaniel is tired of this, now will look into the unicode issue

[21:20] <Zoffix> Yeah, no idea why that output in toaster shows the result for OpenSSL one :S

[21:23] <AlexDaniel> releasable6: status

[21:23] <releasable6> AlexDaniel, Next release in ?21 hours. 2 blockers. 195 out of 201 commits logged

[21:23] <releasable6> AlexDaniel, Details: https://gist.github.com/c6847c34071813e827674d2f483076aa

[21:25] <stmuk> AlexDaniel: thanks

[21:28] <AlexDaniel> stmuk: by the way, I feel your pain regarding the security issue. I really want to figure something out for it. If you have any ideas I'd love to hear them (probably after the release)

[21:30] <stmuk> yeah I'm thinking there should be some sort of star release

[21:31] <AlexDaniel> samcv: hey

[21:31] <samcv> hey

[21:32] <AlexDaniel> samcv: ah sorry, I already see that you noticed it: “hmm wait that's not the issue ”

[21:36] <AlexDaniel> samcv: is there any way I can check if a string somewhere is weird?

[21:36] <AlexDaniel> samcv: like to force renormalization or something

[21:37] <Skarsnik> is-weird

[21:37] <samcv> $a.NFC.Str eq $a

[21:37] <samcv> if it's not equal then that means it got messed up somewhere

[21:37] <travis-ci> Rakudo build failed. TimToady 'bump nqp to get dynstarter/dynstopper tweak'

[21:37] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/266076340 https://github.com/rakudo/rakudo/compare/eb529f14952b...1599873d1420

[21:37] <buggable> [travis build above] ? All failures are due to timeout (0), missing build log (0), GitHub connectivity (1), or failed make test (0).

[21:37] <Skarsnik> good night people, good luck with your awesome work :)

[21:40] <Zoffix> \p

[21:42] <samcv> AlexDaniel, i have it down to this: https://gist.github.com/5b8d633188baba6297ada02fd7bc8516

[21:43] <samcv> if $mail-str.NFC.Str ne $nasty then usually it means Email::Simple gave us back a string that's not the same as we originally had, changed it in some way

[21:43] <timotimo> samcv: maybe we want a piece of code in moarvm that optionally gets run after every string op that ensures nfg-related issues don't exist in any of our strings

[21:44] <samcv> hmm

[21:44] <samcv> like STRAND_CHECK but for NFG?

[21:46] <timotimo> yeah

[21:51] <samcv> writing one now

[22:12] <AlexDaniel> alright, now that's *very* golfed down

[22:16] <AlexDaniel> I give it 10 more minutes, it can't run away for me for so long

[22:16] <AlexDaniel> from*

[22:21] <AlexDaniel> it goes away if you move it out of the module

[22:22] <samcv> hmm

[22:22] <timotimo> it could have to do with how we serialize and read the string heap

[22:24] <AlexDaniel> samcv: can you try this? https://gist.github.com/AlexDaniel/3882bc44b0b34def762aeb949035a59c

[22:24] <samcv> does that trigger AlexDaniel ?

[22:25] <timotimo> oh, don't forget to check if it differs between concat and join

[22:25] <AlexDaniel> samcv: I've added sample output to the gist

[22:25] <timotimo> and whether it's strings procured from a substr or literal or whatever that you use there

[22:25] <AlexDaniel> samcv: I'd say yes, definitely

[22:25] <samcv> ok give me a sec. almost done with my NFG_CHECK function

[22:27] <AlexDaniel> I'm really surprised that $z makes any difference there

[22:28] <AlexDaniel> you can't just replace it with ‘’

[22:28] <AlexDaniel> but you can do this: “: {‘’}\n\r”

[22:31] <AlexDaniel> slightly different version here, if needed: https://gist.github.com/AlexDaniel/bdba740bf8bacd44991bc133f760ae87

[22:31] * Zoffix leaves gaming, then sleeping

[22:31] <Zoffix> Gonna toast tomorrow moarning if needed. Morning being in ~16 hours

[22:32] <AlexDaniel> Zoffix: OK, perfect

[22:32] <AlexDaniel> Zoffix: thank you for your effort

[22:46] <Geth> ¦ roast/master: 4 commits pushed by (Christopher Bottoms)++

[22:46] <Geth> ¦ roast/master: 6c5c800cde | additional failing heredoc tests

[22:46] <Geth> ¦ roast/master: 000966549d | made test messages more concise

[22:46] <Geth> ¦ roast/master: 5c6661c5c4 | Add RT #131927

[22:46] <Geth> ¦ roast/master: 8ae46602f9 | Merge pull request #295 from molecules/master

[22:46] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131927

[22:46] <Geth> ¦ roast/master: review: https://github.com/perl6/roast/compare/9be474c12c...8ae46602f9

[22:50] <AlexDaniel> .oO( since when flappers became floppers? )

[22:50] <AlexDaniel> but in any case, boom: https://github.com/tony-o/perl6-event-emitter/pull/11

[22:50] <AlexDaniel> (so that we won't see this module again getting burned)

[22:51] <Zoffix> flip-flopping is going from one position to another one

[22:51] <Zoffix> hence floppers

[22:53] <AlexDaniel> I thought it was about bugs with wings

[22:53] <AlexDaniel> hence flappers

[22:54] <timotimo> AlexDaniel: that looks like a good place to use a "start react" :)

[22:54] <AlexDaniel> timotimo: I agree, yes.

[22:56] <AlexDaniel> timotimo: the world would have been different if I had time to refactor everything I have to fix :)

[22:56] <timotimo> true

[22:59] <AlexDaniel> .oO( /different/better/ … but who knows… )

[23:04] <timotimo> i wish you the best of luck for the release!

[23:06] <AlexDaniel> thanks

[23:06] <AlexDaniel> Hiker module is simply a flapper, forget about it

[23:07] * timotimo goes to bed

[23:08] <AlexDaniel> boom: https://github.com/tony-o/perl6-hiker/issues/8 and time to move on

[23:10] <samcv> working on that function right now AlexDaniel

[23:19] <AlexDaniel> .tell TimToady Perhaps take a look at this failing test: https://github.com/tadzik/Grammar-BNF/blob/0e0f8d21d1eca7889c2d41bebe3c14d44b0733c5/t/abnf.t#L400 And here's some sample output: https://gist.github.com/AlexDaniel/7e6ebb6e4aa07e22dcf88693fd004b48

[23:19] <yoleaux> AlexDaniel: I'll pass your message to TimToady.

[23:20] <AlexDaniel> maybe there's an easy backward-compatible way to fix it ¯\_(?)_/¯

[23:22] <AlexDaniel> hm, and that's it I think. This should be enough to unburn all modules

[23:22] <AlexDaniel> unless there are other failures of course

[23:42] <samcv> AlexDaniel, if you checkout the latest moarvm. you can edit src/strings/ops.c at the top and uncomment and set MVM_DEBUG_NFG to 1

[23:42] <samcv> then it will check all concat operations, and give nice debug info

[23:43] <samcv> also MVM_DEBUG_NFG_STRICT must be set to 0 or 1 (comment that one out too)

[23:44] <samcv> NFG failure. Got different grapheme count. Got 8 but after re_nfg got 7

[23:44] <samcv> First differing grapheme was at index 5

[23:44] <samcv> orig: 13  (\r)  after re_nfg: -1  (\r\n)

[23:44] <samcv> that was with my previous thing. let me download that gist now and run it

[23:46] <samcv> yeah i get similar error but it got 6 instead of 5 graphemes, but the differing graphemes were the same

[23:46] <samcv> this one differing at index 3
