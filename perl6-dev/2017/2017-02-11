[01:08] <Geth> ¦ rakudo/nom: 79553d0fc3 | (Zoffix Znet)++ | src/core/Rational.pm

[01:08] <Geth> ¦ rakudo/nom: Finalize fix for Rational.ceiling/.floor

[01:08] <Geth> ¦ rakudo/nom:

[01:08] <Geth> ¦ rakudo/nom: The original fix[^1] is good; the <4/2> Rat gets created during

[01:08] <Geth> ¦ rakudo/nom: addition of two Rats and it's not reduced there for performance reasons.

[01:08] <Geth> ¦ rakudo/nom:

[01:08] <Geth> ¦ rakudo/nom: So keep the reduction in .ceiling and toss it from .floor as it's not

[01:08] <Geth> ¦ rakudo/nom: needed there.

[01:08] <Geth> ¦ rakudo/nom:

[01:08] <Geth> ¦ rakudo/nom: [1] https://github.com/rakudo/rakudo/commit/6372417035b959f971a58490101

[01:08] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/79553d0fc3

[01:10] <Geth> ¦ roast: 50e33352e9 | (Zoffix Znet)++ | 2 files

[01:10] <Geth> ¦ roast: Test .ceiling works for whole Rationals without 1 in denominator

[01:10] <Geth> ¦ roast:

[01:10] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/79553d0fc3

[01:10] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/50e33352e9

[03:20] <travis-ci> Rakudo build passed. Zoffix Znet 'Finalize fix for Rational.ceiling/.floor

[03:20] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/200549770 https://github.com/rakudo/rakudo/compare/6372417035b9...79553d0fc3a0

[14:32] <IOninja> so quiet...

[15:01] <dogbert17> hmm, there's still something wrong when spectesting under harness6

[15:05] <dogbert17> timotimo, jnthn: see anything suspicious here? https://gist.github.com/dogbert17/ffdabdb6edfdb64aff1d2e06d596434f

[15:15] <IOninja> ZOFVM: Files=1224, Tests=132886, 131 wallclock secs (22.17 usr  3.28 sys + 2638.71 cusr 267.61 csys = 2931.77 CPU)

[15:16] <Geth> ¦ rakudo/nom: 266f345718 | (Zoffix Znet)++ | t/spectest.data

[15:16] <Geth> ¦ rakudo/nom: Mark some slow tests as... slow

[15:16] <Geth> ¦ rakudo/nom:

[15:16] <Geth> ¦ rakudo/nom: So they get spread out through the run

[15:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/266f345718

[15:17] <jnthn> dogbert17: Hmm, that's an interesting one...

[15:20] <dogbert17> annoyingly I don't seem to be able to do an MVM_dump_backtrace since gdb is acting up..

[15:21] <dogbert17> hopefully there's a least a sliver of clue there :)

[15:21] <jnthn> It's odd because it blows up freeing some memory, but that memory apparently contaiend a valid pointer which we freed successfully

[15:21] <jnthn> Or the line number is off-by-one

[15:21] <jnthn> MVM_free(cur_chars->chars);

[15:21] <jnthn> MVM_free(cur_chars);

[15:22] <jnthn> 515 is the second of those two

[15:22] <dogbert17> don't forget that I'm running the 'fixed' orchestrate.c

[15:23] <jnthn> Yeah, but don't think that'd cause anything to be off in decodestream.c. :)

[15:23] <dogbert17> doh

[15:23] <dogbert17> :)

[15:23] <dogbert17> for me line 515 is MVM_free(cur_chars);

[15:24] <jnthn> Yeah, we too :)

[15:24] <jnthn> So hmm

[15:25] <dogbert17> problem is that I can run the spectest several times before this happens

[15:25] <jnthn> I guess no luck with ASAN?

[15:25] <dogbert17> haven't tried that on this but I could give it a go

[15:26] <dogbert17> if ASAN triggers while running a spectest will I see the output or does the test harness hide it somehow?

[15:27] <dogbert17> ok ASAN it is then...to be continued

[15:28] <jnthn> If it's spat out by a test itself, it'd be eaten I guess, but if it's the harness itself that blows up it'll halt

[15:28] <jnthn> And I think it's the harness that's the trouble, so should do the right thing

[15:29] <dogbert17> this might take a while ...

[15:31] <dogbert17> also, moarvm was probably compiled without --no-optimize :(

[15:33] <jnthn> At least ASAN is only a little slowdown :)

[15:33] <jnthn> Compared to valgrind ;)

[15:36] <dogbert17> yes, valgrinding this would be a nightmare

[15:37] <dogbert17> I wonder if this intermittent problem is the one that lizmat has been complaining about

[15:37] <jnthn> Quite possibly

[15:38] <jnthn> I had bad frees but in P6bigint

[15:39] <timotimo> hm, running both the harness and the tests with asan ...

[15:39] <dogbert17> it's at least running :)

[15:40] <jnthn> :)

[15:42] <dogbert17> hmm, I have a vague menory that there's at least one test file which hangs when ASAN i enabled, wish I could remember which one it is

[15:43] <dogbert17> (brilliant) spelling, and here I thought that my cataract operation would make things better, grr

[15:47] <timotimo> so, we had the problem where maxrss was growing way out of proportion, but that was fixed with your PR, right?

[15:48] <dogbert17> yes I hope so :)

[15:48] <timotimo> OK

[15:48] <timotimo> if not, it might have been interesting to try getting vmhealth reports regularly

[15:48] <timotimo> but not important any more :)

[15:49] <dogbert17> maybe we should trick IOninja into trying this, doesn't he have access to a monster box with hundreds of cores

[15:49] <[Tux]> This is Rakudo version 2017.01-204-g266f34571 built on MoarVM version 2017.01-49-g7ff91dbb

[15:50] <[Tux]> csv-ip5xs        2.856

[15:50] <[Tux]> test            12.359

[15:50] <[Tux]> test-t           5.033 - 5.048

[15:50] <[Tux]> csv-parser      13.097

[15:51] <timotimo> i mean regularly within one run

[15:52] <dogbert17> the problem was actually an overflow in a percentage calculation

[15:55] <timotimo> yup

[15:58] <dogbert17> so there are at least two bugs left wrt harness6, the one ASAN is trying to find and the file descriptor one when running with TEST_JOBS=1

[16:04] <IOninja> buggable: speed

[16:04] <buggable> IOninja, ▃▂▁▂▃▂▂▃▃▂▅▂▂▂▁▂▂▂▁▂▂▂▄▂▃▃▂▂▂▂▂▂▂▃▂▃▃█▂▃▂▂▁▁▂▁▂▁▂▂ data for 2017-01-11–2017-02-11; range: 4.808s–6.505s

[16:05] <IOninja> I was hopping removing the IO::Handle.lines close check for each pull-one would improve speed :(

[16:05] <IOninja> hoping too

[16:07] <IOninja> s: $*PROGRAM.IO, 'lines', \()

[16:07] <SourceBaby> IOninja, Sauce is at https://github.com/rakudo/rakudo/blob/266f345/src/core/IO/Path.pm#L511

[16:07] <IOninja> s: $*PROGRAM.IO.open, 'lines', \()

[16:07] <SourceBaby> IOninja, Sauce is at https://github.com/rakudo/rakudo/blob/266f345/src/core/Cool.pm#L190

[16:07] <IOninja> wa

[16:08] <IOninja> s: $*PROGRAM.IO.open, 'lines', \(:close)

[16:08] <SourceBaby> IOninja, Sauce is at https://github.com/rakudo/rakudo/blob/266f345/src/core/Cool.pm#L190

[16:08] <IOninja> s: $*PROGRAM.IO.open, 'Str', \()

[16:08] <SourceBaby> IOninja, Sauce is at https://github.com/rakudo/rakudo/blob/266f345/src/core/Failure.pm#L73

[16:11] <IOninja> ah

[16:12] <IOninja> s: say $*PROGRAM.IO.open

[16:12] <SourceBaby> IOninja, Something's wrong: ␤ERR: Failed to open file /home/zoffix/services/sourceable/perl6/-e: no such file or directory␤  in block <unit> at -e line 6␤␤Actually thrown at:␤  in block <unit> at -e line 6␤␤

[16:12] <timotimo> hehe.

[19:35] * [Coke] wonders if we need a --pod-only that skips any phasers that would normally run code.

[19:40] * IOninja wonders if that's still unsafe, 'cause you can stuff code into table's params IIRC

[19:40] <IOninja> though you may need a BEGIN block to run 'em... I think

[19:41] <timotimo> i think we only run DOC when pod is turned on

[19:41] <timotimo> potentially BEGIN

[20:29] <samcv> m: #| here is a thing␤my $var; say $var.WHY

[20:29] <camelia> rakudo-moar 266f34: OUTPUT«(Any)␤»

[20:29] <samcv> m: #| here is a thing␤my $var; sub thingy { ... }; say &thingy.WHY

[20:29] <camelia> rakudo-moar 266f34: OUTPUT«here is a thing␤»

[20:29] <samcv> why does the first one not work

[20:30] <moritz> dunno if .WHY is implemented for variiables

[21:11] <japhb> m: my $var; #= This is the var␤say $var.WHY; say $var.VAR.WHY;

[21:11] <camelia> rakudo-moar 266f34: OUTPUT«(Any)␤(Any)␤»

[21:11] <japhb> Dang

[21:36] <samcv> moritz, it's in synopsis at least

[22:48] <timotimo> isn't it just the other way around?

[22:48] <timotimo> m: #= here is a thing␤my $var; say $var.WHY

[22:48] <camelia> rakudo-moar 266f34: OUTPUT«(Any)␤»

[22:48] <timotimo> m: #= here is a thing␤my $var; say $var.VAR.WHY

[22:48] <camelia> rakudo-moar 266f34: OUTPUT«(Any)␤»

[22:48] <timotimo> m: #| here is a thing␤my $var; say $var.VAR.WHY

[22:48] <camelia> rakudo-moar 266f34: OUTPUT«(Any)␤»

[22:48] <timotimo> *shrug*

[22:48] <samcv> timotimo, both are allowed i think

[22:49] <samcv> m: #= this thing is great!␤sub great-thing { };␤ say &great-thing.WHY

[22:49] <camelia> rakudo-moar 266f34: OUTPUT«Nil␤»

[22:49] <samcv> m: #= this thing is great!␤sub great-thing { };␤ say &great-thing.WHAT

[22:49] <camelia> rakudo-moar 266f34: OUTPUT«(Sub)␤»

[22:49] <samcv> hmm

[22:50] <samcv> m: my $var; #= here is a thing␤ say $var.WHY

[22:50] <camelia> rakudo-moar 266f34: OUTPUT«(Any)␤»

[22:50] <samcv> m: my $var; $var.WHY = 'this is a thing'

[22:50] <camelia> rakudo-moar 266f34: OUTPUT«Cannot modify an immutable Any␤  in block <unit> at <tmp> line 1␤␤»

[22:52] <timotimo> both are allowed, but one means "annotate the thing before the comment" and the other "annotate the thing after the comment"

[22:52] <samcv> yeah that's it
