[07:34] <[Tux]> This is Rakudo version 2017.01-113-g5b3ac83b9 built on MoarVM version 2017.01-14-g357438a9

[07:34] <[Tux]> csv-ip5xs        2.847

[07:34] <[Tux]> test            12.305

[07:34] <[Tux]> test-t           5.027

[07:34] <[Tux]> csv-parser      14.210

[07:34] <[Tux]> second run 5.111

[08:46] <gfldex> m: sub f { say Backtrace }

[08:46] <camelia> rakudo-moar 5b3ac8: ( no output )

[08:46] <gfldex> m: sub f { say Backtrace };

[08:46] <camelia> rakudo-moar 5b3ac8: ( no output )

[08:46] <gfldex> m: sub f { say Backtrace }; f

[08:46] <camelia> rakudo-moar 5b3ac8: OUTPUT«(Backtrace)␤»

[08:47] <gfldex> m: sub f { say Backtrace.Str }; f

[08:47] <camelia> rakudo-moar 5b3ac8: OUTPUT«Use of uninitialized value of type Backtrace in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in sub f at <tmp> line 1␤␤»

[08:47] <gfldex> m: sub f { say Backtrace.new.Str }; f

[08:47] <camelia> rakudo-moar 5b3ac8: OUTPUT«  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[08:47] <gfldex> m: sub f { say Backtrace.new }; f

[08:47] <camelia> rakudo-moar 5b3ac8: OUTPUT«Backtrace.new␤»

[08:47] <gfldex> m: sub f { say Backtrace.new.full }; f

[08:47] <camelia> rakudo-moar 5b3ac8: OUTPUT«  in code  at SETTING::src/core/Backtrace.pm line 85␤  in method new at SETTING::src/core/Backtrace.pm line 85␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:55] <Geth> rakudo: usev6++ created pull request #1007: [JVM] Set nqp-lib=blib for building CORE.d.setting

[12:55] <Geth> rakudo: review: https://github.com/rakudo/rakudo/pull/1007

[12:57] * bartolin can't commit directly to rakudo, yet

[12:57] <yoleaux2> 22 Jan 2017 23:53Z <MasterDuke> bartolin: do you have an opinion on Nd's in sprintf format strings? e.g., https://irclog.perlgeek.de/perl6-dev/2017-01-22#i_13970314. should they be made to work?

[12:57] <Geth> rakudo/nom: bfbf348ade | usev6++ | tools/build/Makefile-JVM.in

[12:57] <Geth> rakudo/nom: [JVM] Set nqp-lib=blib for building CORE.d.setting

[12:57] <Geth> rakudo/nom:

[12:57] <Geth> rakudo/nom: ... as we do for CORE.setting

[12:57] <Geth> rakudo/nom: This unbreaks the JVM build.

[12:57] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bfbf348ade

[12:57] <Geth> rakudo/nom: 87d40ab183 | niner++ | tools/build/Makefile-JVM.in

[12:57] <Geth> rakudo/nom: Merge pull request #1007 from usev6/jvm_core.d.setting

[12:57] <Geth> rakudo/nom:

[12:57] <Geth> rakudo/nom: [JVM] Set nqp-lib=blib for building CORE.d.setting

[12:57] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/87d40ab183

[15:12] <brokenchicken> bartolin: ask jnthn++ to give you (and ugexe) commit bit

[15:14] <jnthn> Ah, they sent CLA but didn't get the bits yet?

[15:14] <timotimo> i seem to recall the arrival of the CLA has been confirmedon the channel at some point

[15:15] <ugexe> Coke confirmed the CLAs. Not sure if I have a bit or not but I dont think so

[15:17] <jnthn> Yeah, it even made it into p6weekly

[15:18] <bartolin> [Coke] confirmed that TPF got our CLAs: https://irclog.perlgeek.de/perl6-dev/2017-01-18#i_13943097

[15:23] <jnthn> Invites sent

[15:23] <bartolin> thanks a lot!

[15:40] <[Coke]> jnthn++ handling the last mile

[16:28] <Geth> roast: bcb8ea57c2 | usev6++ | 3 files

[16:28] <Geth> roast: Fudge some newly added tests for JVM

[16:28] <Geth> roast: review: https://github.com/perl6/roast/commit/bcb8ea57c2

[16:35] <Geth> roast: 69493573bd | usev6++ | S32-basics/warn.t

[16:35] <Geth> roast: Unfudge passing test for JVM

[16:35] <Geth> roast: review: https://github.com/perl6/roast/commit/69493573bd

[19:51] <Geth> rakudo/nom: 3e28b1eb3e | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm

[19:51] <Geth> rakudo/nom: Optimize Any::IterateOneWithoutPhasers.push-all a bit

[19:51] <Geth> rakudo/nom:

[19:51] <Geth> rakudo/nom: - change the return sig to IterationEnd

[19:51] <Geth> rakudo/nom: - add an extra scope for faster JITting and OSRing

[19:51] <Geth> rakudo/nom: - makes @b = @a.map: { } about 10% faster

[19:51] <Geth> rakudo/nom: - makes @b = do for @a { } about 20% faster

[19:51] <Geth> rakudo/nom:

[19:51] <Geth> rakudo/nom: Having an additional scope make things faster feels counter-intuitive.

[19:51] <Geth> rakudo/nom: Feels to me something's wrong with the way a scope of a method/sub is

[19:51] <Geth> rakudo/nom: handled wrt to spesh/JIT, if a bare scope gives us so much extra

[19:51] <Geth> rakudo/nom: performance.

[19:51] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3e28b1eb3e

[20:21] <jnthn> lizmat: Smaller things will be spesh'd/JIT-compiled sooner (smaller things get hot faster)

[20:21] <jnthn> So it may be that

[20:21] <jnthn> It may also be one of a whole load of thing things, including a finer-grained deopt

[20:21] <lizmat> jnthn: the extra scope does not have any code outside of it  :-)

[20:22] <lizmat> it is literally sub a { { ... } }

[20:22] <jnthn> Hm, yes, wat

[20:22] <jnthn> I wonder if it's spesh at all or something with the static optimizer...

[20:23] <lizmat> my @a = ^1000; for ^1000 { my @b = do for @a { 42 } }   # my benchmark

[20:23] <jnthn> Note that it's still smaller in so far as the signature is compiled in the outer block, but even then that'd not add a ton

[20:23] <lizmat> my @a = ^1000; for ^1000 { my @b = @a.map: { 42 } }  # other benchmark

[20:23] <jnthn> Feel free to file it as a MoarVM oddity :)

[20:23] <lizmat> ok, will do  :-)

[20:24] <lizmat> after I finish the P6W  :-)

[20:25] <jdv79> another one?  seems every other day there's a new one!

[20:26] <jnthn> D'oh, another week when I didn't get a blog post done. I have like 2 blog post in my queue of "stuff to write about"...

[20:26] <lizmat> well, if did feel like a week of blue mondays the past week

[20:28] <stmuk_> http://rakudo.org/2017/01/30/announce-rakudo-star-release-2017-01/

[20:29] <lizmat> stmuk_++

[20:30] <jnthn> \o/

[20:49] <TimToady> throwing extras scopes in sounds offhand like it could bite us on closure cloning policy

[20:55] <TimToady> though it doesn't seem to in this case

[20:57] <TimToady> and I was worried about inserting scopes into the user's AST, and I see this is just in iterator implementation, so nevermind :)

[21:04] <lizmat> yeah, it's pretty harmless I think, but weird nonetheless

[21:10] <lizmat> https://twitter.com/perl6org/status/825392308606611458   # seem to miss something essential here

[21:10] <RabidGravy> bit 10% for a common pattern isn't to be sneezed at

[21:10] <lizmat> m: say "a" ~~ <:Letter>

[21:10] <camelia> rakudo-moar 3e28b1: OUTPUT«False␤»

[21:12] <RabidGravy> but

[21:12] <RabidGravy> m: say "a" ~~ /<:Letter>/

[21:12] <camelia> rakudo-moar 3e28b1: OUTPUT«｢a｣␤»

[21:13] <lizmat> arg

[21:13] <brokenchicken> m: say ":Letter" ~~ <:Letter>

[21:13] <camelia> rakudo-moar 3e28b1: OUTPUT«True␤»

[21:13] <lizmat> flu has muddled my brain

[21:13] <stmuk_> get better for FOSDEM!

[21:13] <RabidGravy> my brain is always mouddled :)

[21:13] <lizmat> m: say "a" ~~ /<:Digit>/  # huh ?

[21:13] <camelia> rakudo-moar 3e28b1: OUTPUT«｢a｣␤»

[21:14] <lizmat> m: say "g" ~~ /<:Digit>/  # not just hex ?

[21:14] <camelia> rakudo-moar 3e28b1: OUTPUT«｢g｣␤»

[21:14] <jnthn> Think there's already an RT about that one :)

[21:14] <lizmat> ah, ok

[21:14] <jnthn> Digit apparently matches anything

[21:14] <lizmat> I guess it all depends on your base :-)

[21:15] <jnthn> All your base are belong to us!

[22:11] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/01/30/2017-05-a-week-of-blue-mondays/

[22:17] <jnthn> lizmat++ # thanks for doing these!

[22:18] <jnthn> Wow, I totally missed the couple of percent TimToady++ parse speedup

[22:18] <lizmat> well, I will be on holiday for the next two weeks

[22:19] <jnthn> Ah, found the patch

[22:19] <jnthn> TimToady++

[22:20] <[Coke]> lizmat: OH NOES HAVE FUN

[22:22] <lizmat> [Coke]: we will, if we make it past immigration in time

[22:23] <[Coke]> you coming to the US?

[22:23] <[Coke]> if so, best of luck. :|

[22:24] <lizmat> [Coke]: yeah, we have a window of about 14 hour to make it from Orlando to Tampa

[22:25] <lizmat> fortunately, I'm from a country aspiring to be #2

[22:26] <lizmat> https://www.youtube.com/watch?v=j-xxis7hDOE   # in case you didn't get the #2 reference

[22:36] <lizmat> good night, #perl6-dev!

[22:36] <brokenchicken> night

[23:38] <b2gills> m: #`(It seems like <:Digit> is reversed) .print for (^0x30000)».chr.grep: /<:!Digit>/ # note the ｢!｣

[23:39] <camelia> rakudo-moar 3e28b1: OUTPUT«0123456789²³¹¼½¾٠١٢٣٤٥٦٧٨٩۰۱۲۳۴۵۶۷۸۹߀߁߂߃߄߅߆߇߈߉०१२३४५६७८९০১২৩৪৫৬৭৮৯৴৵৶৷৸৹੦੧੨੩੪੫੬੭੮੯૦૧૨૩૪૫૬૭૮૯୦୧୨୩୪୫୬୭୮୯୲୳…»
