[00:37] <timotimo> i wonder if we can get an op built that lets elems figure out the state of $!reified without causing it to be vivified

[01:41] <elaADnlxie> timotimo: but it's not just elems

[01:48] <elaADnlxie> or maybe it is, I'm a bit late to the party :)

[01:56] <timotimo> well, clearly there's some things you can do with a List or Array that will touch $!reified in a way that makes it spring into existence

[07:22] <[Tux]> This is Rakudo version 2017.02-109-g75e070fde built on MoarVM version 2017.02-9-gc5379702

[07:22] <[Tux]> csv-ip5xs        2.899

[07:22] <[Tux]> test            13.016

[07:22] <[Tux]> test-t           4.990 - 5.232

[07:22] <[Tux]> csv-parser      13.366

[07:24] <samcv> yo [Tux]

[09:33] <lizmat> m: use nqp; class A { has $!a; method a() { $!a.DEFINITE; say nqp::attrinited(self,A,q/$!a/) } }; A.new.a   # checking whether an attribute is DEFINITE makes attrinited return 1

[09:33] <camelia> rakudo-moar 75e070: OUTPUT: «1␤»

[09:33] <lizmat> timotimo: ^^^

[09:33] <lizmat> m: use nqp; class A { has $!a; method a() { say nqp::attrinited(self,A,q/$!a/) } }; A.new.a   # without DEFINITE it is 0

[09:33] <camelia> rakudo-moar 75e070: OUTPUT: «0␤»

[09:34] <lizmat> so if anything needs to be fixed, it looks to me like .DEFINITE should not init the attr  :-)

[09:44] <jnthn> attrinited just means "did we touch it at some point"

[09:44] <jnthn> It's computed by seeing if we bound or vivified a Scalar container there yet

[09:45] <jnthn> And as such needs to extra storage

[09:45] <jnthn> Calling .DEFINITE counts as touching :)

[09:45] <jnthn> In fact, there's nothing that doesn't

[09:45] <jnthn> Except asking atttrinited itself

[09:50] <lizmat> ok, so unless you have deep control over the touching, using attrinited is basically too fragile

[09:57] <Geth> ¦ rakudo/nom: a274bdd122 | (Elizabeth Mattijsen)++ | src/core/REPL.pm

[09:57] <Geth> ¦ rakudo/nom: Fix for RT #130874

[09:57] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a274bdd122

[09:57] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130874

[09:57] <jnthn> Yes; it was intended solely to decide whether to run default attribute initializations

[09:58] <jnthn> has $.foo = this-thing-here

[09:58] <lizmat> oki  :-)

[10:01] <lizmat> m: my Nil $a; dd $a   # does this even make sense ?

[10:01] <camelia> rakudo-moar 75e070: OUTPUT: «Nil $a = Nil␤»

[10:01] <lizmat> m: my Nil $a = 42; dd $a   # does this even make sense ?

[10:01] <camelia> rakudo-moar 75e070: OUTPUT: «Type check failed in assignment to $a; expected Nil but got Int (42)␤  in block <unit> at <tmp> line 1␤␤»

[10:02] <lizmat> perhaps we should disallow Nil as a type spec ?

[10:02] <lizmat> this in light of RT #130875

[10:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130875

[10:19] <Geth> ¦ rakudo/nom: b11dc88a3e | (Elizabeth Mattijsen)++ | src/Perl6/Grammar.nqp

[10:19] <Geth> ¦ rakudo/nom: Fix for RT #130877

[10:19] <Geth> ¦ rakudo/nom:

[10:19] <Geth> ¦ rakudo/nom: Feels to me that we cannot say whether a method exists or not, because

[10:19] <Geth> ¦ rakudo/nom: we don't know the object on which the method could be called.  So changed

[10:19] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130877

[10:19] <Geth> ¦ rakudo/nom: the wording of the error message to hopefully make the intent of the

[10:19] <Geth> ¦ rakudo/nom: suggestion clearer.

[10:19] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b11dc88a3e

[10:44] <Geth> ¦ rakudo/nom: 6cb9be294d | (Elizabeth Mattijsen)++ | src/Perl6/Grammar.nqp

[10:44] <Geth> ¦ rakudo/nom: Another fix for #130877, zefram++

[10:44] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6cb9be294d

[10:44] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130877

[10:51] <Geth> ¦ rakudo/nom: 4ef1e69566 | (Elizabeth Mattijsen)++ | src/core/Str.pm

[10:51] <Geth> ¦ rakudo/nom: Some more nqp::list -> IterationBuffer migration

[10:51] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4ef1e69566

[11:18] * lizmat hopes for some more eyes on https://rt.perl.org/rt3//Public/Bug/Display.html?id=130877

[11:47] <masak> "So I think it's reasonable for these error messages to suggest calling those methods that do actually exist in Mu." -- +1

[12:01] <Geth> ¦ rakudo/nom: f595733009 | (Elizabeth Mattijsen)++ | src/core/Str.pm

[12:01] <Geth> ¦ rakudo/nom: Make sure Str.split always returns a Seq

[12:01] <Geth> ¦ rakudo/nom:

[12:01] <Geth> ¦ rakudo/nom: This actually pessimizes one case of Str.trans, probably needs some

[12:01] <Geth> ¦ rakudo/nom: deeper looking into.

[12:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f595733009

[12:32] <Geth> ¦ rakudo/nom: 8301a30603 | (Elizabeth Mattijsen)++ | src/core/Str.pm

[12:32] <Geth> ¦ rakudo/nom: Unpessimize multi needle Str.trans

[12:32] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8301a30603

[12:41] <Zoffix> use different trap number for stuff that can't be used as a method.

[12:41] <Zoffix> and generate diff message for it

[12:43] <Zoffix> wonder what case would be that `bag` without parens is wrong :/

[12:43] <lizmat> m: bag()

[12:43] <camelia> rakudo-moar f59573: ( no output )

[12:43] <lizmat> m: bag

[12:43] <camelia> rakudo-moar f59573: OUTPUT: «5===SORRY!5===␤Argument to "bag" seems to be malformed␤at <tmp>:1␤------> 3bag7⏏5<EOL>␤Other potential difficulties:␤    Function "bag" may not be called without arguments (please use () or whitespace to denote arguments, or &bag to r…»

[12:44] <lizmat> m: say()

[12:44] <camelia> rakudo-moar f59573: OUTPUT: «␤»

[12:44] <lizmat> m: say

[12:44] <camelia> rakudo-moar f59573: OUTPUT: «5===SORRY!5===␤Argument to "say" seems to be malformed␤at <tmp>:1␤------> 3say7⏏5<EOL>␤Other potential difficulties:␤    Unsupported use of bare "say"; in Perl 6 please use .say if you meant to call it as a method on $_, or use an exp…»

[12:44] <Zoffix> `say` I can understand as a Perl 5-sm catcher, since there it means "print $_"; but there's no bag in Perl 5, so what's it catching?

[12:44] <lizmat> perhaps this check should be moved to the optimizer ?

[12:45] <lizmat> as an addition to the undispatchable error ?

[13:06] <lizmat> Zoffix: there is no bag in Perl 5 yet  :-)

[13:06] <Zoffix> ...yet? :)

[13:09] <lizmat> there's been some osmosis of Perl 6 features recently

[13:09] <lizmat> this *could* go on  :-)

[13:16] <Zoffix> hah

[13:18] <timotimo> personally, i'd love a pragma that allows the use of "say" to output an empty line

[13:46] <[Coke]> I need to update the list of volunteers for RT meta-bug-admining. Right now, in order of activity it's me, froggs, pmichaud, and a dozen others that probably date from parrot.

[13:51] <Zoffix> Are you asking for more volunteers? What's involved in meta-bug-admining?

[13:53] <moritz> [Coke]: I can do that

[13:53] <moritz> Zoffix: given folks RW rights in RT, afaict

[13:54] <Zoffix> I could do that.

[13:54] <[Coke]> You have privs to give other people bug-admin rights to the p6 queue. You get listened to (more) when you ask the rt admins for things.

[13:54] <[Coke]> moritz++ Zoffix++

[13:58] <lizmat> commute to Amsterdam&

[14:11] <[Coke]> "is 6.d still planned to hatch in summer?" as far as I know that was never a plan.

[14:11] <[Coke]> (from gfldex at https://irclog.perlgeek.de/perl6-dev/2017-02-26#i_141700240)

[14:24] <llfourn> I just logged in to RT for first time in years. When I try to go to a ticket I get "No permission to display that ticket".

[14:26] <[Coke]> What URL are you trying to hit, and are you logged in?

[14:27] <llfourn> just some random recent RT: https://rt.perl.org/Ticket/Display.html?id=130862

[14:27] <llfourn> yes I'm logged in

[14:27] <llfourn> "Logged in as [email@hidden.address]
[14:29] <[Coke]> llfourn: try: https://rt.perl.org/Public/Bug/Display.html?id=130862

[14:30] <llfourn> I just get empty page with "my open tickets" above an empty grey area

[14:30] <llfourn> but no "no permission"

[14:30] <llfourn> it redirects me to: https://rt.perl.org/SelfService/

[14:32] <[Coke]> ok. Please send an email to the address at the bottom of the page describing the symptoms.

[14:33] <[Coke]> buggable: help

[14:33] <buggable> [Coke], tags | tag SOMETAG | eco | eco Some search term | speed

[14:33] <llfourn> [Coke]: sure thanks.

[14:33] <[Coke]> buggable: tags

[14:33] <buggable> [Coke], Total: 1536; BUG: 1027; UNTAGGED: 343; LTA: 154; NYI: 95; RFC: 61; CONC: 57; JVM: 57; REGEX: 49; SEGV: 28; UNI: 28; PERF: 27; TESTNEEDED: 24; NATIVECALL: 22; @LARRY: 20; POD: 20; IO: 18; TODO: 18; REGRESSION: 15; PRECOMP: 13; BUILD: 11; OO: 11; TESTCOMMITTED: 11; OPTIMIZER: 9; STAR: 7; BOOTSTRAP: 5; GLR: 4; MATH: 4; OSX: 4; REPL: 4; WEIRD: 4; SPESH: 3; WINDOWS: 3; RT: 2; BELL:

[14:51] <ugexe> whats BELL?

[14:51] <ilmari> .u BELL

[14:51] <yoleaux2> U+0007 BELL [Cc] (␇)

[14:52] <[Coke]> [JVM] [UNI] \c[BELL] returns the U+0007 control code not U+1F514 BELL

[14:52] <[Coke]> ^^

[14:52] <ilmari> .u 🔔

[14:52] <yoleaux2> U+1F514 BELL [So] (🔔)

[14:52] <[Coke]> u: BELL

[14:52] <unicodable6> [Coke], U+237E BELL SYMBOL [So] (⍾)

[14:52] <unicodable6> [Coke], U+2407 SYMBOL FOR BELL [So] (␇)

[14:52] <unicodable6> [Coke], https://gist.github.com/ec0d5a2539c69357d5e4495bcbd5f970

[14:52] <[Coke]> .u is old. use u:

[14:52] <yoleaux2> U+0020 SPACE [Zs] ( )

[14:52] <yoleaux2> U+002E FULL STOP [Po] (.)

[14:52] <yoleaux2> U+003A COLON [Po] (:)

[14:52] <ilmari> u: ALERT

[14:53] <unicodable6> ilmari, Found nothing!

[14:53] <ilmari> uh..

[14:53] <ilmari> u: U+0007

[14:53] <unicodable6> ilmari, U+0007 <control-0007> [Cc] (control character)

[15:13] <b2gills> m: my Nil $nil = Failure.new; dd $nil; # lizmat there is *some* use to allowing Nil as a type spec

[15:13] <camelia> rakudo-moar 8301a3: OUTPUT: «Failure $nil = Failure.new(exception => X::AdHoc.new(payload => "Failed"), backtrace => Backtrace.new)␤»

[15:14] <lizmat> and what is the use then ?

[15:15] <lizmat> that could get a failure if you don't get a failure ?

[15:15] <lizmat> *you

[15:15] <lizmat> m: my Nil $fail = Failure.new

[15:15] <camelia> rakudo-moar 8301a3: ( no output )

[15:15] <lizmat> m: my Nil $fail = 42

[15:15] <camelia> rakudo-moar 8301a3: OUTPUT: «Type check failed in assignment to $fail; expected Nil but got Int (42)␤  in block <unit> at <tmp> line 1␤␤»

[15:15] <lizmat> is that what you mean ?

[15:16] <b2gills> It might be used by only 0.0000001% of code, but that still isn't 0%

[15:17] <b2gills> I don't know how it could be used, but that is likely a Failure.new( 'of imagination' )

[15:17] * Zoffix doesn't see it...

[15:17] <Zoffix> m: my Failure $x = Failure.new;

[15:17] <camelia> rakudo-moar 8301a3: ( no output )

[15:17] <Zoffix> m: my Failure|Int $x = 42

[15:17] <camelia> rakudo-moar 8301a3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed my␤at <tmp>:1␤------> 3my Failure7⏏5|Int $x = 42␤»

[15:17] <Zoffix> m: my $x where Failure|Int = 42

[15:17] <camelia> rakudo-moar 8301a3: ( no output )

[15:18] <Zoffix> m: my $x where Failure|Int = Failure.new

[15:18] <camelia> rakudo-moar 8301a3: ( no output )

[15:21] <b2gills> m: multi sub t ( Nil $_ ){ say 'You gave me something empty or an error ' }; multi sub t ( Any $ ){}; t(42); t(try +'hello')

[15:21] <camelia> rakudo-moar 8301a3: OUTPUT: «You gave me something empty or an error ␤»

[15:22] <Zoffix> m: multi sub t (Nil){ say 'You gave me something empty or an error ' }; multi sub t ( Any $ ){}; t(42); t(try +'hello')_

[15:22] <camelia> rakudo-moar 8301a3: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3ub t ( Any $ ){}; t(42); t(try +'hello')7⏏5_␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement mod…»

[15:22] <Zoffix> m: multi sub t (Nil){ say 'You gave me something empty or an error ' }; multi sub t ( Any $ ){}; t(42); t(try +'hello')

[15:22] <camelia> rakudo-moar 8301a3: OUTPUT: «You gave me something empty or an error ␤»

[15:22] <b2gills> If someone thinks it does something that it doesn't do, they will get an error and fix it. If exactly one person in the history of Perl 6 finds a **really really** good use-case, then it will be a good thing it wasn't an error.

[15:29] <b2gills> The only reason I can see to make it an error is so that if someone uses it incorrectly they get a different error.

[16:29] <Geth> ¦ rakudo/nom: 13cfd76b6b | (Elizabeth Mattijsen)++ | src/core/Baggy.pm

[16:29] <Geth> ¦ rakudo/nom: Make clearer what we return from Baggy!LISTIFY

[16:29] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/13cfd76b6b

[17:26] <Geth> ¦ rakudo/nom: db70a1fda8 | (Zoffix Znet)++ | 2 files

[17:26] <Geth> ¦ rakudo/nom: Fix previous output in REPL silencing errors

[17:26] <Geth> ¦ rakudo/nom:

[17:26] <Geth> ¦ rakudo/nom: When an exception occurs in user's code, it ends up in $output,

[17:26] <Geth> ¦ rakudo/nom: but we only print it if user's code did not produce any output.

[17:26] <Geth> ¦ rakudo/nom:

[17:26] <Geth> ¦ rakudo/nom: Fix by always printing the result of the code when:

[17:26] <Geth> ¦ rakudo/nom: - code did not produce any output

[17:26] <Geth> ¦ rakudo/nom: <…commit message has 7 more lines…>

[17:26] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/db70a1fda8

[17:31] <Geth> ¦ rakudo/nom: 1891b6b50c | (Zoffix Znet)++ | t/02-rakudo/repl.t

[17:31] <Geth> ¦ rakudo/nom: Fix typo in test description

[17:31] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1891b6b50c

[18:00] <lizmat> fwiw, I'm close to a fix for RT #130870

[18:00] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130870

[18:02] <Zoffix> Oh, I was about to comment on it.

[18:02] * Zoffix speeds up the typing...

[18:07] <Zoffix> done: https://rt.perl.org/Ticket/Display.html?id=130870#txn-1451643

[18:07] <Zoffix> Well, it's just a generic comment. I don't have an optinion on what the final fix should be.

[18:10] <lizmat> Zoffix: noted

[18:29] <lizmat> hmmm...  it looks like some tests needs fixing

[18:31] <lizmat> m: my Int %h = a => 42; my Str %s = b => "foo"; try %h = %s; dd %h

[18:31] <camelia> rakudo-moar 1891b6: OUTPUT: «Hash[Int] %h = (my Int %)␤»

[18:31] <lizmat> should %h be empty here ???

[18:50] <Geth> ¦ rakudo/nom: ae7bcf1b8e | (Elizabeth Mattijsen)++ | src/core/Map.pm

[18:50] <Geth> ¦ rakudo/nom: Fix for RT #130870

[18:50] <Geth> ¦ rakudo/nom:

[18:50] <Geth> ¦ rakudo/nom: Basically, make Map.STORE create a temporary hash to which the

[18:50] <Geth> ¦ rakudo/nom: assignment is done, and then transplant the internal $!storage

[18:50] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130870

[18:50] <Geth> ¦ rakudo/nom: back to the original object.

[18:50] <Geth> ¦ rakudo/nom:

[18:50] <Geth> ¦ rakudo/nom: This actually breaks some tests in S09-typed-arrays/hashes.t, but

[18:50] <Geth> ¦ rakudo/nom: I think these tests are faulty.  On the brighter side, this actually

[18:50] <Geth> ¦ rakudo/nom: also makes some todo tests pass.

[18:50] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ae7bcf1b8e

[18:55] <Zoffix> \o/

[18:56] <Geth> ¦ roast: 9f79b505fd | (Elizabeth Mattijsen)++ | 2 files

[18:56] <Geth> ¦ roast: Unfudge now passing TODOed tests

[18:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9f79b505fd

[18:57] <timotimo> isn't it fantastic when tests contradict each other ...

[18:58] <lizmat> yeah

[19:11] <b2gills> m: my \tester = (|flat(eager (False xx 9),True) xx *).iterator; multi sub foo ( $_ where tester.pull-one){ say 'test'; nextsame}; multi sub foo ( $_ ) {.say;$_}; eager ^100 .map: &foo # is this caused by spesh?

[19:11] <camelia> rakudo-moar ae7bcf: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤Constraint type check failed for parameter '$_'␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[19:11] <b2gills> : my \tester = (|flat(eager (True xx 9),False) xx *).iterator; multi sub foo ( $_ where tester.pull-one){ say 'test'; nextsame}; multi sub foo ( $_ ) {.say;$_}; eager ^100 .map: &foo # it works when it is True more often than not

[19:11] <b2gills> m: my \tester = (|flat(eager (True xx 9),False) xx *).iterator; multi sub foo ( $_ where tester.pull-one){ say 'test'; nextsame}; multi sub foo ( $_ ) {.say;$_}; eager ^100 .map: &foo # it works when it is True more often than not

[19:11] <camelia> rakudo-moar ae7bcf: OUTPUT: «test␤0␤test␤1␤test␤2␤3␤test␤4␤test␤5␤test␤6␤7␤test␤8␤test␤9␤test␤10␤11␤test␤12␤test␤13␤test␤14␤15␤test␤16␤test␤17␤test␤18␤19␤test␤20␤test␤21␤test␤22␤23␤test␤24␤test…»

[19:14] <Zoffix> "is this caused by spesh"  you can see if you run it with MVM_SPESH_DISABLE=1

[19:17] <b2gills> I thought that something like that would be useful for logging every tenth value, so I tried it and it didn't work as you can see.

[22:01] <Geth> ¦ rakudo: AlexDaniel++ created pull request #1028: Make TimToady happy

[22:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1028

[23:05] <elaADnlxie> m: say ^∞ .grep: { last }

[23:05] <camelia> rakudo-moar ae7bcf: OUTPUT: «(...)␤»

[23:05] <elaADnlxie> mch: say ^∞ .grep: { last }

[23:05] <committable6> elaADnlxie, ¦«2015.12»: ()␤¦«HEAD»: (...)

[23:08] <elaADnlxie> bisect: old=2016.07 say ^∞ .grep: { last }

[23:08] <bisectable6> elaADnlxie, Bisecting by output (old=2016.07 new=ae7bcf1) because on both starting points the exit code is 0

[23:08] <bisectable6> elaADnlxie, bisect log: https://gist.github.com/7c3f68d6f70e4b97e699e329f4a18765

[23:08] <bisectable6> elaADnlxie, (2016-07-29) https://github.com/rakudo/rakudo/commit/22949d8efef15e70023157d587462a263efba2ea

[23:08] <elaADnlxie> c: all say ^∞ .grep: { last }

[23:09] <committable6> elaADnlxie, https://gist.github.com/db570f212263c5206a36ae0297ae99de

[23:09] <elaADnlxie> 6c: say (^∞ .grep: { last })[^5]

[23:10] <committable6> elaADnlxie, ¦«2015.12,2016.02,2016.12,2017.01,HEAD»: (Nil Nil Nil Nil Nil)␤¦«2016.03,2016.04,2016.05,2016.06,2016.07.1,2016.08.1,2016.09,2016.10,2016.11»: (0 1 2 3 4)

[23:10] <elaADnlxie> bisect: old=2016.11 say (^∞ .grep: { last })[^5]

[23:10] <bisectable6> elaADnlxie, Bisecting by output (old=2016.11 new=ae7bcf1) because on both starting points the exit code is 0

[23:10] <bisectable6> elaADnlxie, bisect log: https://gist.github.com/fb866f4a8e578028c3d01feb1515a9ec

[23:10] <bisectable6> elaADnlxie, (2016-12-17) https://github.com/rakudo/rakudo/commit/7021861705f03b105d9fcc63b9f8f43f2913ce8e

[23:14] <elaADnlxie> heh, not the first time I find that I reported the same problem twice…
