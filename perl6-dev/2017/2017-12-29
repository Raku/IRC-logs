[00:54] <tbrowder> .tell AlexDaniel i’m revisiting Text::ParseWords when i remembered nqp’s built-in routine “match”.

[00:54] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[00:54] <AlexDaniel> .

[00:54] <yoleaux> 28 Dec 2017 12:41Z <tbrowder> AlexDaniel: see the docs for my latest take on pod %config formats. i suggest specifically limiting list and hash strings to being delimited by single or double quotes, i.e., no Q or q delimited forms.

[00:54] <yoleaux> 00:54Z <tbrowder> AlexDaniel: i’m revisiting Text::ParseWords when i remembered nqp’s built-in routine “match”.

[01:34] <Geth> ¦ rakudo: 418fc068f3 | (Timo Paulssen)++ | src/core/Rat.pm

[01:34] <Geth> ¦ rakudo: microoptimize DON'T_DIVIDE_NUMBERS

[01:34] <Geth> ¦ rakudo:

[01:34] <Geth> ¦ rakudo: a little benchmark adding integers to rats gets

[01:34] <Geth> ¦ rakudo: sped up by about 22%.

[01:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/418fc068f3

[01:35] <timotimo> ^- deleted the microoptimize_dont_divide_numbers branch with this

[01:40] <AlexDaniel> tbrowder: yeah the previous version didn't make any sense

[01:40] <AlexDaniel> ah, no

[01:40] * AlexDaniel misread it

[01:41] <AlexDaniel> so the Q syntax is no longer there. *shrug*

[01:42] <tbrowder> well, you suggested it, not i!  :-)

[01:43] <tbrowder> anyhoo, still truckin’...

[03:25] <Geth> ¦ alerts: 331b5d5dc4 | (Zoffix Znet)++ | bin/server.p6

[03:25] <Geth> ¦ alerts: Fix up hosts

[03:25] <Geth> ¦ alerts: review: https://github.com/perl6/alerts/commit/331b5d5dc4

[03:28] <Geth> ¦ alerts: d54667d80d | (Zoffix Znet)++ | START-WEB

[03:28] <Geth> ¦ alerts: Improve START-WEB script

[03:28] <Geth> ¦ alerts:

[03:28] <Geth> ¦ alerts: - Add sassifier run

[03:28] <Geth> ¦ alerts: - Pop server into screen

[03:28] <Geth> ¦ alerts: review: https://github.com/perl6/alerts/commit/d54667d80d

[03:57] <Geth> ¦ alerts: 8fcb1f3b76 | (Zoffix Znet)++ | bin/server.p6

[03:57] <Geth> ¦ alerts: Fix host name

[03:57] <Geth> ¦ alerts: review: https://github.com/perl6/alerts/commit/8fcb1f3b76

[04:26] <Geth> ¦ alerts: 10c28df4a4 | (Zoffix Znet)++ | .gitignore

[04:26] <Geth> ¦ alerts: Ignore screen logs

[04:26] <Geth> ¦ alerts: review: https://github.com/perl6/alerts/commit/10c28df4a4

[04:26] <Geth> ¦ alerts: 8ac052ff0e | (Zoffix Znet)++ | static/widget.js

[04:26] <Geth> ¦ alerts: Fix widget URL

[04:26] <Geth> ¦ alerts: review: https://github.com/perl6/alerts/commit/8ac052ff0e

[05:05] <Geth> ¦ alerts: 08f49979be | (Zoffix Znet)++ | bin/bot.p6

[05:05] <Geth> ¦ alerts: Allow empty `affects`

[05:05] <Geth> ¦ alerts:

[05:05] <Geth> ¦ alerts: Needed by update command

[05:05] <Geth> ¦ alerts: review: https://github.com/perl6/alerts/commit/08f49979be

[05:09] <Geth> ¦ alerts: 71cd2cc73e | (Zoffix Znet)++ | README.md

[05:09] <Geth> ¦ alerts: Add bot usage docs

[05:09] <Geth> ¦ alerts: review: https://github.com/perl6/alerts/commit/71cd2cc73e

[05:10] <Geth> ¦ alerts: 1d6941fdea | (Zoffix Znet)++ | README.md

[05:10] <Geth> ¦ alerts: Link to future blog post for info on severity

[05:10] <Geth> ¦ alerts: review: https://github.com/perl6/alerts/commit/1d6941fdea

[05:22] <Geth> ¦ alerts: b65fca5da4 | (Zoffix Znet)++ | README.md

[05:22] <Geth> ¦ alerts: Update blog URL

[05:22] <Geth> ¦ alerts: review: https://github.com/perl6/alerts/commit/b65fca5da4

[07:24] <piojo> Hi

[07:25] <piojo> does MVMObject have fields, or is MVMObject* basically like a null pointer?

[07:26] <piojo> I'm trying to examine some objects to understand why type_check_store (in container.c) is giving wrong type check results

[07:30] <geekosaur> you may mean (void *) pointer

[07:30] <geekosaur> but this is more #moarvm stuff

[07:31] <piojo> geekosaur: thanks. ahh, yes, src/vm/moar/ is the directory

[07:31] <geekosaur> right, that's moarvm internals

[07:31] <geekosaur> perl 6 can't see any deeper, you need to poke moarvm's guts

[07:32] <piojo> geekosaur: I did mean (void*), it's been a long time since I've used C++, and never C

[07:36] <piojo> aha, MVMObject is defined in 6model.h--it's a collectable entity and has a MVMSTable

[08:14] <lizmat> Files=1232, Tests=75973, 328 wallclock secs (14.46 usr  5.20 sys + 2255.99 cusr 226.74 csys = 2502.39 CPU)

[10:24] <|Tux|> Hmm, no builtin factorisation?

[10:24] <|Tux|> m: say 2018!

[10:24] <camelia> rakudo-moar 418fc068f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus postfix␤at <tmp>:1␤------> 3say 20187⏏5!␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤        statement modifier␤        …»

[11:14] <Zoffix> m: say [*] 1..2018

[11:14] <camelia> rakudo-moar 418fc068f: OUTPUT: «94669195079106133410208895519607008070766538126446529431923538268126742573134184711825858078487167925210794632827155310700833183261829640370350750860383241895871257555971431939430698349263626612930807504115910063817414699394734307643180411397666807494…»

[11:14] <Zoffix> |Tux|: ^

[11:24] <Zoffix> Announcing P6lert: Perl 6 Alerts Directly From Core Developers: https://rakudo.party/post/Announcing-P6lert-Perl-6-Alerts-Directly-From-Core-Developers

[11:24] <lizmat> m: sub postfix:<!>($a) { [*] 1..$a }; say 2018!

[11:24] <yoleaux> 11:20Z <Zoffix> lizmat: looks like the value-type-list thing violates 6.c spec. Is there a way of making that change a 6.d-only change? https://irclog.perlgeek.de/perl6/2017-12-29#i_15631590

[11:24] <camelia> rakudo-moar 418fc068f: OUTPUT: «94669195079106133410208895519607008070766538126446529431923538268126742573134184711825858078487167925210794632827155310700833183261829640370350750860383241895871257555971431939430698349263626612930807504115910063817414699394734307643180411397666807494…»

[11:25] <lizmat> Zoffix: that was the whole point of the value type change

[11:26] <lizmat> m: dd [1,2,3],[1,2,3].Set

[11:26] <camelia> rakudo-moar 418fc068f: OUTPUT: «[1, 2, 3]␤Set.new(1,3,2)␤»

[11:26] <lizmat> m: dd ([1,2,3],[1,2,3]).Set

[11:26] <camelia> rakudo-moar 418fc068f: OUTPUT: «Set.new(1,3,2)␤»

[11:26] <lizmat> hmmm

[11:26] <lizmat> that's an unintended side affect

[11:26] <lizmat> *effect

[11:26] <lizmat> or not

[11:26] <lizmat> hmmm... no time to look at now, will look at it tonight

[11:26] <lizmat> afk&

[11:28] <|Tux|> Rakudo version 2017.12-58-g418fc068f - MoarVM version 2017.12-13-g01619e0d0

[11:28] <|Tux|> csv-test-xs-20      0.444 -  0.462

[11:28] <|Tux|> csv-ip5xs           1.102 -  1.122

[11:28] <|Tux|> test-t --race       1.179 -  1.248

[11:28] <|Tux|> test-t              2.922 -  2.952

[11:28] <|Tux|> test               11.661 - 11.939

[11:28] <|Tux|> csv-parser         12.512 - 12.589

[11:28] <|Tux|> csv-ip5xs-20       12.780 - 13.030

[11:28] <|Tux|> test-t-20 --race   17.879 - 17.931

[11:28] <|Tux|> test-t-20          53.208 - 53.999

[11:29] <Zoffix> lizmat: the new behaviour does look to be better, but IMO we should stick to not changing 6.c tests that aren't wrong.

[11:30] <Zoffix> .tell moritz would be nice for perl6feed tweeter to retweet this: https://twitter.com/zoffix/status/946703693507907584

[11:30] <yoleaux> Zoffix: I'll pass your message to moritz.

[11:32] <Zoffix> .tell AlexDaniel RSS feed is implemented on alerts.perl6.org, but IMO we shouldn't stick it into the blog agregator, because it's not a blog. There are 6 different ways for interested users to receive the alerts and trying to shove them into every hole we can just makes the feeds where the alerts don't belong noisier.

[11:32] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[13:15] <Geth> ¦ alerts: jnthn++ created pull request #2: Missing space in footer text

[13:15] <Geth> ¦ alerts: review: https://github.com/perl6/alerts/pull/2

[13:16] <Geth> ¦ alerts: 71bcfa4265 | (Jonathan Worthington)++ (committed using GitHub Web editor) | bin/server.p6

[13:16] <Geth> ¦ alerts: Missing space in footer text

[13:16] <Geth> ¦ alerts: review: https://github.com/perl6/alerts/commit/71bcfa4265

[13:16] <Geth> ¦ alerts: b29541266a | (Zoffix Znet)++ (committed using GitHub Web editor) | bin/server.p6

[13:16] <Geth> ¦ alerts: Merge pull request #2 from jnthn/missing-space

[13:16] <Geth> ¦ alerts:

[13:16] <Geth> ¦ alerts: Missing space in footer text

[13:16] <Geth> ¦ alerts: review: https://github.com/perl6/alerts/commit/b29541266a

[14:37] <tbrowder> nqp question please: can i use a token (e.g.,  token blah { <[‘“]> }) inside a ~~ expression? i have tried ~~ / <blah> / but got an error. i haven’t yet tried it in a match() or subst(). i know this works: $m := / <[‘“]> /; if “ab’c” ~~ $m {}

[14:50] <AlexDaniel> .

[14:50] <yoleaux> 11:32Z <Zoffix> AlexDaniel: RSS feed is implemented on alerts.perl6.org, but IMO we shouldn't stick it into the blog agregator, because it's not a blog. There are 6 different ways for interested users to receive the alerts and trying to shove them into every hole we can just makes the feeds where the alerts don't belong noisier.

[15:41] <I_> Brandi

[15:41] <I_> Stop attacking my whole family

[15:52] <Geth> ¦ rakudo: 24f4609ec5 | (Timo Paulssen)++ | src/core/Buf.pm

[15:52] <Geth> ¦ rakudo: guard subbuf against negative ranges

[15:52] <Geth> ¦ rakudo:

[15:52] <Geth> ¦ rakudo: a range like 10..2 is supposed to be degenerate

[15:52] <Geth> ¦ rakudo: and have no elements, but the code just used

[15:52] <Geth> ¦ rakudo: int-bounds to calculate how many items to take.

[15:52] <Geth> ¦ rakudo: This would cause attempts to allocate around 2**64

[15:52] <Geth> ¦ rakudo: elements for the results, which is clearly bogus.

[15:52] <Geth> ¦ rakudo:

[15:52] <Geth> ¦ rakudo: Now it'll just behave as if you had specified a

[15:52] <Geth> ¦ rakudo: length of 0 elements.

[15:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/24f4609ec5

[15:52] <Geth> ¦ roast: ac0962de8c | (Timo Paulssen)++ | S03-operators/buf.t

[15:52] <Geth> ¦ roast: test subbuf with corner-case ranges

[15:52] <Geth> ¦ roast:

[15:53] <Geth> ¦ roast: empty range, negative range, single-element range

[15:53] <Geth> ¦ roast: (aka same start and end point)

[15:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ac0962de8c

[15:53] <timotimo> there are no tests for subbuf on Blob at all; there isn't terribly much to test for our implementation, but it'd be good to check that types match up and such

[15:58] <Zoffix> timotimo: do those new tests pass? They look broken. `10..10` is not an empty range.

[15:58] <timotimo> oh, hah, that's a problem with the commit message only

[15:59] <timotimo> uh

[15:59] <timotimo> okay, i messed something up, i thought it passed?!

[16:00] <Geth> ¦ roast: 86eb1fee63 | (Timo Paulssen)++ | S03-operators/buf.t

[16:00] <Geth> ¦ roast: correct subbuf range tests

[16:00] <Geth> ¦ roast:

[16:00] <Geth> ¦ roast: Zoffix++

[16:00] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/86eb1fee63

[16:01] <timotimo> that's better.

[16:01] <Zoffix> timotimo: you got off-by-one in the conditional. It needs to be $pos ≤ $max

[16:01] <Zoffix> FWIW, I got an nqp version of it. It might be faster

[16:02] <timotimo> if your nqp version also fixes the off-by-one, feel free to push it

[16:02] <Zoffix> OK. lemme measure it

[16:02] <timotimo> i don't see effects of an off-by-one, though?

[16:03] <timotimo> is it just that it's doing the "expensive" calculation in one too many cases?

[16:03] <Zoffix> m: (10..10).int-bounds((my int $pos), (my int $max)); dd [ $pos, $max ]; say 10 - 10 + 1

[16:03] <camelia> rakudo-moar 418fc068f: OUTPUT: «[10, 10]␤1␤»

[16:03] <Zoffix> ^ that now gives 0

[16:04] <Zoffix> m: dd Buf.new(^100).subbuf(10..10)

[16:04] <camelia> rakudo-moar 418fc068f: OUTPUT: «Buf.new(10)␤»

[16:04] <Zoffix> and ^ that will give an empty buff once camelia updates

[16:05] <timotimo> huh?

[16:06] * timotimo recompiles to make sure

[16:07] <timotimo> oh, i have a - 1 in there locally already

[16:08] <timotimo> wow, my head is surely working correctly right now

[16:08] <Zoffix> "NEW version is 5.12x faster"

[16:09] <timotimo> somehow i fixed the off-by-one you told me about, then tested stuff, then wondered "hey, there's on off-by-one here at all!"

[16:09] <timotimo> oh, that's quite nice

[16:09] <timotimo> only for cases with a Range passed as argument, i assume?

[16:09] <timotimo> or did you nqp-ify the whole method?

[16:09] <timotimo> well, probably the latter

[16:10] <timotimo> do you know why we have a loop there instead of using nqp::splice?

[16:10] <timotimo> welp, time for an RSI rest break

[16:11] <Zoffix> The whole method, tho there are some spec failures, so the timing isn't accurate. nqp::splice won't work on a Blob, which is immutable.

[16:11] <timotimo> okay, then how does the loop work on blobs if it's immutable?

[16:12] <timotimo> m: Blob.new(1, 2, 3, 4, 5).subbuf(3..5).perl.say

[16:12] <camelia> rakudo-moar 24f4609ec: OUTPUT: «Blob.new(4,5,0)␤»

[16:12] <Zoffix> it's shoving stuff into the new array

[16:13] <Zoffix> you could use splice, but you'd have to make an entire copy of the original first

[16:22] <timotimo> i forgot that splice doesn't let us specify a start position in the source array

[16:22] <timotimo> if we had that, we could use splice (nqp::subsplice?) here and be super fast

[16:23] <timotimo> we can do a two-step splice, but that would very likely waste memory, because our buffers don't tend to shrink

[16:31] <Zoffix> nqp::copypartarray(@new,@old,$start,

[16:31] <Zoffix> $end)

[16:31] <Zoffix> Maybe that'd be useful in some [native] array code too?

[16:32] <timotimo> yeah

[16:41] <Zoffix> I one-upped you and made an off-by-two error in that very same line of code :P

[16:41] <timotimo> :D

[16:41] <timotimo> i should get in the habit of drawing diagrams and such

[16:48] <Zoffix> ZOFFLOP: t/spec/S17-procasync/kill.t

[16:48] <Zoffix> ZOFVM: Files=1286, Tests=152981, 159 wallclock secs (21.28 usr  3.40 sys + 3406.90 cusr 188.14 csys = 3619.72 CPU)

[16:52] <Geth> ¦ rakudo: 5f48c0695c | (Zoffix Znet)++ | src/core/Buf.pm

[16:52] <Geth> ¦ rakudo: Make Blob.subbuf 1.8x faster

[16:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5f48c0695c

[16:52] <timotimo> we might also want to do something so that subbuf-rw also likes Range objects

[16:54] <Zoffix> mhm

[16:54] <Zoffix> \o

[17:02] <Geth> ¦ tap-harness6: 8745e27168 | (Leon Timmermans)++ | bin/prove6

[17:02] <Geth> ¦ tap-harness6: Make TAP parsing loose by default before rakudo 2017.09 in prove too

[17:02] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/commit/8745e27168

[17:02] <Geth> ¦ tap-harness6: be425ac774 | (Leon Timmermans)++ | bin/prove6

[17:02] <Geth> ¦ tap-harness6: Update prove --version for 0.0.3

[17:02] <Geth> ¦ tap-harness6:

[17:02] <Geth> ¦ tap-harness6: Got rid of the TAP::Harness version, as hard coding it made no sense and

[17:02] <Geth> ¦ tap-harness6: apparently there's no way to reliably get the version.

[17:02] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/commit/be425ac774

[17:14] <timotimo> the subbuf improvement made the benchmark i was using go from ~5.95s to ~5.65s

[18:34] <lizmat> timotimo++

[18:34] <timotimo> actually, that was all zoffix :)

[19:50] <Geth> ¦ rakudo: clsn++ created pull request #1348: Add ⏨ as exponent notation for floats.

[19:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1348

[21:49] <dogbert17> it's quiet around here

[21:50] <lizmat> Zoffix++   # https://github.com/rakudo/rakudo/commit/5f48c0695c

[21:50] <lizmat> dogbert17: silence before the storm?

[21:50] <dogbert17> indeed, I have a question :)

[21:51] <dogbert17> m: say (1..5).map({$_}).skip(*-3)

[21:51] <camelia> rakudo-moar 5f48c0695: OUTPUT: «No such method 'Int' for invocant of type 'WhateverCode'␤  in block <unit> at <tmp> line 1␤␤»

[21:51] <dogbert17> shouldn't that work?

[21:52] <lizmat> dogbert17: yeah, that should

[21:52] <timotimo> m: say (1..5).map({$_}).tail(3) # that's the same as this, isn't it?

[21:52] <camelia> rakudo-moar 5f48c0695: OUTPUT: «(3 4 5)␤»

[21:52] <dogbert17> so you're in agreement with the docs then :) https://docs.perl6.org/type/Seq#method_skip

[21:53] <dogbert17> timotimo: yes

[21:54] <dogbert17> bisect: say (1..5).map({$_}).skip(*-3)

[21:54] <bisectable6> dogbert17, Bisecting by output (old=2015.12 new=5f48c06) because on both starting points the exit code is 1

[21:54] <bisectable6> dogbert17, bisect log: https://gist.github.com/62f171b0942fe68b46f90e5a915d8f29

[21:54] <bisectable6> dogbert17, (2016-09-27) https://github.com/rakudo/rakudo/commit/222d16b0b94911fdedb06ee6ad817d0f14b9c05c

[21:55] <lizmat> that's the error message changing format

[21:56] <dogbert17> c: 201601 say (1..5).map({$_}).skip(*-3)

[21:56] <committable6> dogbert17, ¦201601: «Cannot find this revision (did you mean “2016.01”?)»

[21:56] <dogbert17> c: 2016.01 say (1..5).map({$_}).skip(*-3) # grr

[21:56] <committable6> dogbert17, ¦2016.01: «Method 'skip' not found for invocant of class 'Seq'␤  in block <unit> at /tmp/TRtPUn8PX1 line 1␤␤ «exit code = 1»»

[21:56] <dogbert17> c: 2017.01 say (1..5).map({$_}).skip(*-3)

[21:56] <committable6> dogbert17, ¦2017.01: «No such method 'skip' for invocant of type 'Seq'␤  in block <unit> at /tmp/kD961U1gcE line 1␤␤ «exit code = 1»»

[21:56] <dogbert17> has this ever worked

[21:58] <dogbert17> should I report it?

[21:58] <lizmat> yes please

[21:58] <lizmat> should be an easy fix

[21:59] <dogbert17> perhaps you already know what might be wrong?

[21:59] <lizmat> the Callable candidate is missing

[22:00] <dogbert17> aha, give me two minutes to write up the issue :-)

[22:00] <lizmat> it needs to route to .tail with the value -a(0).Int

[22:02] <dogbert17> https://github.com/rakudo/rakudo/issues/1349

[22:08] <AlexDaniel> c: all say (1..5).map({$_}).skip(*-3)

[22:08] <committable6> AlexDaniel, https://gist.github.com/e8c0dd7ab75edfd7c9cb3f3c192267db

[22:09] <dogbert17> interesting

[22:12] <Geth> ¦ rakudo: 38897d19cd | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[22:12] <Geth> ¦ rakudo: Fix some export issues

[22:12] <Geth> ¦ rakudo:

[22:12] <Geth> ¦ rakudo: - roles are our and thus visible through the exported Telemetry

[22:12] <Geth> ¦ rakudo: - "is export" on them would only export the last part of the name

[22:12] <Geth> ¦ rakudo: - constants are for internal use only, so should be my to prevent exporting

[22:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/38897d19cd

[22:25] <dogbert17> m: say Any.skip(*-1)

[22:25] <camelia> rakudo-moar 5f48c0695: OUTPUT: «No such method 'Int' for invocant of type 'WhateverCode'␤  in block <unit> at <tmp> line 1␤␤»

[22:26] <lizmat> that's because of the Int() sig

[22:26] <lizmat> should probably be Int(Cool)

[22:28] <dogbert17> you mean https://github.com/rakudo/rakudo/blob/master/src/core/Any-iterable-methods.pm#L1925

[22:29] <lizmat> yup

[22:29] * lizmat is tired and goes to bed

[22:30] <timotimo> gnite lizmat

[22:30] <dogbert17> good night lizmat

[22:31] * dogbert17 tries lizmat's Cool suggestion
