[09:30] <Geth> ¦ nqp: d40d6dc3c2 | (Jonathan Worthington)++ | tools/build/MOAR_REVISION

[09:30] <Geth> ¦ nqp: Bump to get latest MoarVM invocation opts.

[09:30] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d40d6dc3c2

[09:30] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.07-347-g127fa2ce...2017.07-365-gc0f7a3b

[09:31] <jnthn> NeuralAnomaly: status

[09:31] <NeuralAnomaly> jnthn, [?] Next release will be in 1 week and 2 days. Since last release, there are 45 new still-open tickets (11 unreviewed and 1 blockers) and 139 unreviewed commits. See http://perl6.fail/release/stats for details

[09:32] <Geth> ¦ rakudo/nom: f590863e17 | (Jonathan Worthington)++ | tools/build/NQP_REVISION

[09:32] <Geth> ¦ rakudo/nom: Bring in latest MoarVM invocation opts.

[09:32] <Geth> ¦ rakudo/nom:

[09:32] <Geth> ¦ rakudo/nom: Plus various other specializer fixes. So they get a bit more testing.

[09:32] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f590863e17

[09:32] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.07-19-g82d06cc...2017.07-32-gd40d6dc

[11:01] <Geth> ¦ rakudo/nom: cd7dc4ce93 | (Stefan Seifert)++ | lib/NativeCall.pm6

[11:01] <Geth> ¦ rakudo/nom: Speed up NativeCall subs by compiling specialized subroutine body

[11:01] <Geth> ¦ rakudo/nom:

[11:01] <Geth> ¦ rakudo/nom: Instead of having a generic code block handle all NativeCall subs, we

[11:01] <Geth> ¦ rakudo/nom: compile a specialized one for every sub. This way we can actually

[11:01] <Geth> ¦ rakudo/nom: utilize the information from the signature to identify the arguments

[11:01] <Geth> ¦ rakudo/nom: that need deconting and save the looping over the arguments at runtime.

[11:01] <Geth> ¦ rakudo/nom:

[11:01] <Geth> ¦ rakudo/nom: This also leaves the argument checks to the call dispatcher.

[11:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cd7dc4ce93

[11:02] <nine> This ^^^ of course passes all tests but could probably still use someone looking at it as I'm really just stumbling along here :)

[11:39] <dogbert17_> ZOFFLOP: t/spec/S03-junctions/autothreading.t

[11:49] <Geth> ¦ rakudo/nom: 5e8d461325 | (Elizabeth Mattijsen)++ | src/core/Junction.pm

[11:49] <Geth> ¦ rakudo/nom: Fix Junction ~ Str and Str ~ Junction

[11:49] <Geth> ¦ rakudo/nom:

[11:49] <Geth> ¦ rakudo/nom: The continuing story of concatenating a Str to Junction

[11:49] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5e8d461325

[11:50] <dogbert17_> lizmat: does that fix have something to do with the test failure?

[11:53] <lizmat> dogbert17_: yes

[11:53] <lizmat> if its about the auto-threading test you're talking about

[12:07] <Zoffix> nine: so what's the new speed? :)

[12:14] <dogbert17_> yes, didn't work tough ...

[12:15] <dogbert17_> still ZOFFLOPPING

[12:19] <dogbert17_> atm 5-6 ZOFFLOPS

[12:21] <dogbert17_> S03-junctions/autothreading.t, S05-modifier/ignoremark.t, S05-modifier/samemark.t, S32-io/IO-Socket-INET.t and integration/eval-and-threads.t

[12:47] <nine> Zoffix: csv-ip5xs from 14.838s to down to 13.042s (best of 5, 100000 iterations)

[12:47] <Zoffix> neat

[12:53] <nine> Zoffix: was m17.483s

[12:53] <nine> before I started optimizing on Monday :)

[12:55] <Zoffix> :o

[12:55] <Zoffix> nine++

[12:56] <nine> Also the code we produce now is much easier to optimize on the lower levels which is where I'll have to go next to make progress.

[13:00] <Zoffix> sweet

[13:14] <dogbert17_> lizmat: not ok 88 - an & junction right of a | junction will be autothreaded first     This type cannot unbox to a native string: P6opaque, Junction

[13:15] <Zoffix> FWIW, jnthn's comments on the topic: https://irclog.perlgeek.de/perl6-dev/2017-08-09#i_14992203

[13:22] <dogbert17_> m: use Test; sub tp($a, $b, $c) { "$a $b $c" }; my Mu $res = tp("dog", 1|2, 10&20); is $res.Str eq q{all(any("dog 1 10", "dog 2 10"), any("dog 1 20", "dog 2 20"))}, "an & junction right of a | junction will be autothreaded first";

[13:22] <camelia> rakudo-moar 5e8d46: OUTPUT: «not ok 1 - ??# Failed test at <tmp> line 1?This type cannot unbox to a native string: P6opaque, Junction?  in block  at /home/camelia/rakudo-m-inst-2/share/perl6/sources/C712FE6969F786C9380D643DF17E85D06868219E (Test) line 177?  in sub is at /h…»

[13:28] <stmuk> I really think the html generation code in https://github.com/perl6/doc should be moved into another repo

[13:40] <Zoffix> stmuk: well, don't leave us hanging. Why you think things

[13:45] <stmuk> well it means we can't ship basic docs and the command line client in R* without shipping dependencies which aren't particularly useful (used as part the HTML generation)

[13:46] <stmuk> also if the raw docs were on their own it would encourage others to write alternative viewers

[13:47] <stmuk> also when distro packagers just want to package docs it makes more sense

[14:06] <stmuk> it even contains coffeescript

[14:08] <Zoffix> mmmm coffee. Good idea

[14:08] <nine> Did I hear coffee?

[14:09] <stmuk> no it was tea :P

[14:18] <Zoffix> stmuk: yeah, all good points. I have another to add: I notice a few times new docs contributors struggling with build system because they want to "check" how their addition renders, even ater being told it's not that important to pre-check. Having docs as just docs in a repo would make it easier to contribute

[14:24] * Zoffix browses through the 263 docs issues

[14:24] <Zoffix> .... yeah... https://media.giphy.com/media/4pMX5rJ4PYAEM/giphy.gif

[14:27] <stmuk> not sure how to get from current https://github.com/perl6/doc to two repos

[14:28] <stmuk> maybe moving doc/doc and some support files to a new repo and renaming the old might be easier

[14:29] <stmuk> so just-docs & web-docs exist (the latter having a submodule checkout of just-docs)

[14:36] * stmuk decides to email a git guru about it

[14:40] <Zoffix> So the next step for modules.perl6.org will be rsyncing Rakudo dists off CPAN and unpacking them, giving users of the site the option to browse the files in the distro. The rsyncage and unpackage will be done on www.p6c.org box, under modules.perl6.org user.

[14:40] <Zoffix> (just mentioning in case someone sees a problem with that)

[14:43] <lizmat> fwiw, it looks like test-t has become a lot slower on my machine after f590863e17

[14:47] <awwaiid> stmuk: maybe isolate the build tools more in the current doc repo rather than being totally separate; like make building different outputs have different dependencies or something

[14:47] <Zoffix> nine: lizmat BTW, if you see Damian, would you ask if "Quantum::Computing" module actually exists and if yes, where's the sauce? That question pops up not infrequently ( https://www.reddit.com/r/perl6/comments/6prdkv/quantumcomputing/ ) and there's never a good answer. (Perhaps he should incorporate a clear answer into the "On Shoulder of Giants" talk)

[14:48] <awwaiid> stmuk: I mean, as a first step; another way to say this is instead of separate repos make them separate directories -- keep doc/ and move a lot of the other stuff into some other subdir like website/

[14:49] <awwaiid> stmuk: then you'd keep things like the bit that runs the code samples to verify them

[14:50] <stmuk> awwaiid: yes that sounds a good idea

[14:52] <stmuk> I did consider pointing an installer at a parallel META6.json (but maybe too confusing)

[14:52] <stmuk> certainly moving files around would be good in itself and probably help if moved into different repos

[14:55] <awwaiid> I wouldn't worry too much about git slicing/dicing; my recommendation is to start a new repo called like doc-site or similar and copy files in; part of it's build process would be to clone the existing doc/ repo with it's current structure (ignore overlap). Once you get that going and you get the site building off of it, you then delete the overlap files from the doc/ repo

[14:55] <awwaiid> (if you go the new repo route)

[14:57] <Zoffix> Hm, actually it's not just dists off CPAN, it'll also be git clones of GitHub/GitLab repos

[15:01] <Zoffix> Oh, actually not as needed as CPAN dists, so maybe not yet.

[15:05] <stmuk> hmm if the doc-site was still called "doc" no server processes would have to be changed

[15:05] <stmuk> doc & new p6doc?

[15:21] <Geth_> ¦ tap-harness6: 39b2469c1a | (Leon Timmermans)++ | bin/prove6

[15:21] <Geth_> ¦ tap-harness6: Allow multiple -I arguments

[15:21] <Geth_> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/commit/39b2469c1a

[15:23] <Zoffix> Geth is ded?

[15:23] <Zoffix> Just re-set the hook to new geth and re-delivered it. The hook said OK but nothing on IRC

[15:23] <Zoffix> Geth: he;[p

[15:23] <Zoffix> Geth: help

[15:23] <Geth> Zoffix, Source at https://github.com/perl6/geth To add repo, add an 'application/json' webhook on GitHub pointing it to https://geth.perl6.party/?chan=#perl6 and choose 'Send me everything' for events to send | use `ver URL to commit` to fetch version bump changes

[15:24] <Zoffix> Oh, I redilibered the wrong hook

[15:24] <Geth> ¦ tap-harness6: 39b2469c1a | (Leon Timmermans)++ | bin/prove6

[15:24] <Geth> ¦ tap-harness6: Allow multiple -I arguments

[15:24] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/commit/39b2469c1a

[15:27] <lizmat> Zoffix: there is a tarbal at bit.do/Perl6SOG

[15:35] <Zoffix> lizmat++ thanks

[15:35] <Zoffix> So it *is* a real module. Just done with classical methods

[15:37] <Zoffix> huggable: Quantum::Computation :is: Shoulder of Giants talk code exmples in https://bit.do/Perl6SOG the Quantum::Computation module is in lib6/Quantum/

[15:37] <huggable> Zoffix, Added Quantum::Computation as Shoulder of Giants talk code exmples in https://bit.do/Perl6SOG the Quantum::Computation module is in lib6/Quantum/

[16:26] <Geth> ¦ tap-harness6: aa5dbdbabe | (Leon Timmermans)++ | bin/prove6

[16:26] <Geth> ¦ tap-harness6: Fix empty $incdir in prove6

[16:26] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/commit/aa5dbdbabe

[17:13] <Geth> ¦ rakudo/nom: ec7bc25c4f | (Stefan Seifert)++ | 2 files

[17:13] <Geth> ¦ rakudo/nom: Make RAKUDO_MODULE_DEBUG output reproducible

[17:13] <Geth> ¦ rakudo/nom:

[17:13] <Geth> ¦ rakudo/nom: Turns out it's more helpful for debugging if one is able to diff the

[17:13] <Geth> ¦ rakudo/nom: output of different RAKUDO_MODULE_DEBUG runs than having exact PIDs or

[17:13] <Geth> ¦ rakudo/nom: timing information.

[17:13] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ec7bc25c4f

[17:17] <timotimo> aye!

[17:55] <AlexDaniel> Zoffix: hey. What's the idea behind making it possible to browse the code from modules.perl6.org ? Is there a ticket with discussion somewhere? I don't see a problem with that, but at the same time I don't understand what problem it can possibly solve (normally I want to go the actual repo, and I'm fine with github or wherever it takes me).

[17:56] <AlexDaniel> just being curious. I may have misunderstood something though

[17:57] <Zoffix> The problem being solved is there's no front end to browse Rakudo's CPAN dists

[17:57] <AlexDaniel> aaaah

[18:00] <AlexDaniel> Zoffix++

[18:01] <Zoffix> And code/docs from github might be made browseable on the site as a matter of unified interface, but that's why I said "not yet", exactly because users can just go to the repo

[18:01] <Zoffix> Like once we figure out how to safely render POD6, for example

[18:16] <ugexe> m: class Foo { has $.bar = 1; multi method gist(Foo:D:) { $.bar };  }; say Foo.new

[18:16] <camelia> rakudo-moar ec7bc2: OUTPUT: «This type cannot unbox to a native string: P6opaque, Int?  in block <unit> at <tmp> line 1??»

[18:16] <ugexe> m: class Foo { has $.bar = 1; multi method gist(Foo:D:) { ~$.bar };  }; say Foo.new

[18:16] <camelia> rakudo-moar ec7bc2: OUTPUT: «1?»

[18:17] <jdv79> uh.  so i updated to the latest and tried to install JSON::Tiny and all my gnome-terminal instances disappear whilst trying

[18:17] <jdv79> that's impressive

[18:18] <Zoffix> There is (was?) a ticket for .gist and my response to it was that .gist is on the same level as .Str; there's an expected return type for it and if you don't obey it, you get to keep the pieces.

[18:21] * Zoffix doesn't get what the problem is in https://rt.perl.org/Ticket/Display.html?id=123016#ticket-history

[18:23] <Zoffix> I think that ticket is closed now; it was by smsl

[18:25] <geekosaur> Zoffix, they want the default gist behavior for classes to defer to .perl on a per-attribute basis

[18:26] <Zoffix> ok

[18:28] * Zoffix tries

[18:35] <geekosaur> (I actually suspect what they *really* want is that .gist maps to .perl on non-collective types and to recursive .gist on collectives)

[18:49] <Zoffix> damn lots of failures.

[18:59] <travis-ci> Rakudo build failed. Stefan Seifert 'Make RAKUDO_MODULE_DEBUG output reproducible

[18:59] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/263181009 https://github.com/rakudo/rakudo/compare/5e8d461325e0...ec7bc25c4f4d

[18:59] <buggable> [travis build above] ? All failures are due to timeout (0), missing build log (0), GitHub connectivity (1), or failed make test (0).

[19:06] <Zoffix> fucking 'ell. I have more failures than I can count by just glancing and that's without my patch.

[19:06] <Zoffix> https://gist.github.com/zoffixznet/091f2ba722e073dca5ea1d88aa99dd1d

[19:07] <Zoffix> What happened to master-always-passes :/

[19:07] <Zoffix> Kinda pointless in having tests if I can't tell whether the change I'm introducing makes stuff fail :/

[19:13] <Zoffix> "You planned 106 tests but ran 88." can't even test

[19:15] <Zoffix> And google killed my VM while I was trying to figure out which failures were mine...

[19:15] <Zoffix> (?°?°??? ???

[19:17] <Zoffix> Commented my patch on the ticket, if anyone wants to tinker with it: https://rt.perl.org/Ticket/Display.html?id=123016#txn-1480860

[19:27] <ugexe> is it a moar/nqp/rakudo version mismatch thing?

[19:29] <Zoffix> The test failures? No idea. I just pulled in latest changes and ran `make stresstest`

[19:39] <ugexe> whats your moarvm version? curious if your command ultimately did  `moar HEAD` or `moar whatever-the-last-bump-was`

[19:40] <Zoffix> Don't know. I didn't restart the VM. The command is perl Configure.pl --gen-moar --gen-nqp --backends=moar; make; make test; make install

[19:41] <Zoffix> Are you saying your stresstest passes clean on rakudo HEAD?

[19:42] <ugexe> install/bin/perl6 -v

[19:43] <ugexe> im not able to stress test right this moment

[19:43] <Zoffix> <Zoffix> Don't know. I didn't restart the VM.

[19:44] <ugexe> vm is getting too ambiguous :/

[19:45] <Zoffix> heh

[19:45] * Zoffix relocates

[19:45] <dogbert17> Zoffix: I have the same failures, nested.t is a flapper though

[19:47] <dogbert17> they have been present a couple of days

[19:48] <dogbert17> I don't think they are in any way related to the recent spesh changes though

[20:01] <ugexe> bisect: bisect: use lib "inst#/home/camelia/star-2017.07/share/perl6/site"; use JSON::Tiny; use Test; my @t = '{ "a" : "b\u00E5" }' => { 'a' => 'bå' }, '[ "\u2685" ]' => [ '?' ], qq{"x\c[ZERO WIDTH JOINER]a"} => "x\c[ZERO WIDTH JOINER]a", qq{"\c[ZERO WIDTH JOINER]"} => "\c[ZERO WIDTH JOINER]"; plan (+@t); for @t -> $p { my $got = from-json($p.key); is-deeply $got, $p.value; }

[20:01] <bisectable6> ugexe, Bisecting by output (old=2015.12 new=ec7bc25) because on both starting points the exit code is 1

[20:01] <ugexe> bisect: use lib "inst#/home/camelia/star-2017.07/share/perl6/site"; use JSON::Tiny; use Test; my @t = '{ "a" : "b\u00E5" }' => { 'a' => 'bå' }, '[ "\u2685" ]' => [ '?' ], qq{"x\c[ZERO WIDTH JOINER]a"} => "x\c[ZERO WIDTH JOINER]a", qq{"\c[ZERO WIDTH JOINER]"} => "\c[ZERO WIDTH JOINER]"; plan (+@t); for @t -> $p { my $got = from-json($p.key); is-deeply $got, $p.value; }

[20:01] <bisectable6> ugexe, bisect log: https://gist.github.com/e6c720be2d5c07884156409e38a873d3

[20:01] <bisectable6> ugexe, (2016-07-16) https://github.com/rakudo/rakudo/commit/b45faa533624c019db6883846900c955e66fb646

[20:01] <bisectable6> ugexe, Bisecting by output (old=2015.12 new=ec7bc25) because on both starting points the exit code is 1

[20:01] <bisectable6> ugexe, bisect log: https://gist.github.com/5b2edae66e9adb6816b7676784f3c508

[20:01] <bisectable6> ugexe, (2016-07-16) https://github.com/rakudo/rakudo/commit/b45faa533624c019db6883846900c955e66fb646

[20:03] <ugexe> bisect: old=2017.07 use lib "inst#/home/camelia/star-2017.07/share/perl6/site"; use JSON::Tiny; use Test; my @t = '{ "a" : "b\u00E5" }' => { 'a' => 'bå' }, '[ "\u2685" ]' => [ '?' ], qq{"x\c[ZERO WIDTH JOINER]a"} => "x\c[ZERO WIDTH JOINER]a", qq{"\c[ZERO WIDTH JOINER]"} => "\c[ZERO WIDTH JOINER]"; plan (+@t); for @t -> $p { my $got = from-json($p.key); is-deeply $got, $p.value; }

[20:03] <bisectable6> ugexe, Bisecting by output (old=2017.07 new=ec7bc25) because on both starting points the exit code is 1

[20:03] <bisectable6> ugexe, bisect log: https://gist.github.com/006657caab9b57a136e50a764c2c840b

[20:03] <bisectable6> ugexe, (2017-07-15) https://github.com/rakudo/rakudo/commit/d37be2496137807515e2e38dbb96290de30596dd

[20:04] <ugexe> star: use lib "inst#/home/camelia/star-2017.07/share/perl6/site"; use JSON::Tiny; use Test; my @t = '{ "a" : "b\u00E5" }' => { 'a' => 'bå' }, '[ "\u2685" ]' => [ '?' ], qq{"x\c[ZERO WIDTH JOINER]a"} => "x\c[ZERO WIDTH JOINER]a", qq{"\c[ZERO WIDTH JOINER]"} => "\c[ZERO WIDTH JOINER]"; plan (+@t); for @t -> $p { my $got = from-json($p.key); is-deeply $got, $p.value; }

[20:04] <camelia> star-m 2017.07: OUTPUT: «1..4?ok 1 - ?ok 2 - ?ok 3 - ?ok 4 - ?»

[20:04] <ugexe> m: use lib "inst#/home/camelia/star-2017.07/share/perl6/site"; use JSON::Tiny; use Test; my @t = '{ "a" : "b\u00E5" }' => { 'a' => 'bå' }, '[ "\u2685" ]' => [ '?' ], qq{"x\c[ZERO WIDTH JOINER]a"} => "x\c[ZERO WIDTH JOINER]a", qq{"\c[ZERO WIDTH JOINER]"} => "\c[ZERO WIDTH JOINER]"; plan (+@t); for @t -> $p { my $got = from-json($p.key); is-deeply $got, $p.value; }

[20:04] <camelia> rakudo-moar ec7bc2: OUTPUT: «1..4?ok 1 - ?ok 2 - ?ok 3 - ?Input (2 characters) is not a valid JSON string?  in sub from-json at /home/camelia/star-2017.07/share/perl6/site/sources/9B467EEF9267A777BB53BAA2F19BE2C9D756BEED (JSON::Tiny) line 59?  in block <unit> at <tmp> li…»

[20:05] <ugexe> i thought I could get bisectable to figure it out :/

[20:59] <MasterDuke> ugexe: bisectable6 doesn't have a "inst#/home/camelia/star-2017.07/share/perl6/site", but you could create an issue https://github.com/perl6/whateverable/issues about making modules available

[20:59] <yoleaux> 17:51Z <AlexDaniel> MasterDuke: I've created a ticket. Please leave some comments there: RT #131879

[20:59] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131879

[21:00] <AlexDaniel> there was this idea but unfortunately nothing came out of it yet: https://github.com/perl6/whateverable/issues/55

[21:01] <AlexDaniel> MasterDuke: buuuuuuuuuuuut why can't we do it already? There's perl6-all-modules thingy almost in the same directory

[21:02] <AlexDaniel> c: HEAD use lib ‘data/all-modules/moritz/json/lib/’; use JSON::Tiny

[21:02] <committable6> AlexDaniel, ¦HEAD(ec7bc25): «»

[21:02] <AlexDaniel> there you go

[21:02] <AlexDaniel> however, note that precomp files may be left hanging

[21:02] <MasterDuke> yeah, shouldn't be too bad

[21:03] <AlexDaniel> bisect: HEAD use lib ‘data/all-modules/moritz/json/lib/’; use JSON::Tiny; use Test; my @t = '{ "a" : "b\u00E5" }' => { 'a' => 'bå' }, '[ "\u2685" ]' => [ '?' ], qq{"x\c[ZERO WIDTH JOINER]a"} => "x\c[ZERO WIDTH JOINER]a", qq{"\c[ZERO WIDTH JOINER]"} => "\c[ZERO WIDTH JOINER]"; plan (+@t); for @t -> $p { my $got = from-json($p.key); is-deeply $got, $p.value; }

[21:03] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=ec7bc25) because on both starting points the exit code is 1

[21:03] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/26e25d33e728b74379ae37bcc1c34fb3

[21:03] <bisectable6> AlexDaniel, (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb52eb1fd07397659f19a5cf36dc61f84053

[21:03] <bisectable6> AlexDaniel, The result looks a bit unrealistic, doesn't it? Most probably the output is different on every commit (e.g. ?bisect: say rand?)

[21:03] <AlexDaniel> my bad…

[21:03] <AlexDaniel> bisect: use lib ‘data/all-modules/moritz/json/lib/’; use JSON::Tiny; use Test; my @t = '{ "a" : "b\u00E5" }' => { 'a' => 'bå' }, '[ "\u2685" ]' => [ '?' ], qq{"x\c[ZERO WIDTH JOINER]a"} => "x\c[ZERO WIDTH JOINER]a", qq{"\c[ZERO WIDTH JOINER]"} => "\c[ZERO WIDTH JOINER]"; plan (+@t); for @t -> $p { my $got = from-json($p.key); is-deeply $got, $p.value; }

[21:03] <bisectable6> AlexDaniel, Bisecting by exit code (old=2015.12 new=ec7bc25). Old exit code: 1

[21:03] <ugexe> old=2017.07

[21:03] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/6c72470cbdefdd5e3048da22e1a35c25

[21:03] <bisectable6> AlexDaniel, (2017-08-10) https://github.com/rakudo/rakudo/commit/f590863e1736c75207c9ce0335ea646e3529060e

[21:04] <AlexDaniel> ugexe: what do you think about this?

[21:04] <AlexDaniel> we can even check what's going on there

[21:04] <AlexDaniel> c: f590863e17^,f590863e17 use lib ‘data/all-modules/moritz/json/lib/’; use JSON::Tiny; use Test; my @t = '{ "a" : "b\u00E5" }' => { 'a' => 'bå' }, '[ "\u2685" ]' => [ '?' ], qq{"x\c[ZERO WIDTH JOINER]a"} => "x\c[ZERO WIDTH JOINER]a", qq{"\c[ZERO WIDTH JOINER]"} => "\c[ZERO WIDTH JOINER]"; plan (+@t); for @t -> $p { my $got = from-json($p.key); is-deeply $got, $p.value; }

[21:04] <committable6> AlexDaniel, https://gist.github.com/43c5f3fadc0a2f6dce75e6b732b8af68

[21:05] <ugexe> well it just figured out what broke JSON::Tiny

[21:05] <ugexe> jdv79: ^

[21:05] <AlexDaniel> is it correct that one test is failing both before and after f590863e17?

[21:06] <AlexDaniel> “Input (2 characters) is not a valid JSON string” is the new part though

[21:06] <ugexe> m: use lib "inst#/home/camelia/star-2017.07/share/perl6/site"; use JSON::Tiny; use Test; my @t = '{ "a" : "b\u00E5" }' => { 'a' => 'bå' }, '[ "\u2685" ]' => [ '?' ], qq{"x\c[ZERO WIDTH JOINER]a"} => "x\c[ZERO WIDTH JOINER]a", qq{"\c[ZERO WIDTH JOINER]"} => "\c[ZERO WIDTH JOINER]"; plan (+@t); for @t -> $p { my $got = from-json($p.key); is-deeply $got, $p.value; }

[21:06] <camelia> rakudo-moar ec7bc2: OUTPUT: «1..4?ok 1 - ?ok 2 - ?ok 3 - ?Input (2 characters) is not a valid JSON string?  in sub from-json at /home/camelia/star-2017.07/share/perl6/site/sources/9B467EEF9267A777BB53BAA2F19BE2C9D756BEED (JSON::Tiny) line 59?  in block <unit> at <tmp> li…»

[21:06] <ugexe> oops

[21:06] <ugexe> star: use lib "inst#/home/camelia/star-2017.07/share/perl6/site"; use JSON::Tiny; use Test; my @t = '{ "a" : "b\u00E5" }' => { 'a' => 'bå' }, '[ "\u2685" ]' => [ '?' ], qq{"x\c[ZERO WIDTH JOINER]a"} => "x\c[ZERO WIDTH JOINER]a", qq{"\c[ZERO WIDTH JOINER]"} => "\c[ZERO WIDTH JOINER]"; plan (+@t); for @t -> $p { my $got = from-json($p.key); is-deeply $got, $p.value; }

[21:06] <camelia> star-m 2017.07: OUTPUT: «1..4?ok 1 - ?ok 2 - ?ok 3 - ?ok 4 - ?»

[21:06] <ugexe> they all pass here

[21:08] <AlexDaniel> m: say 'bå'.uninames

[21:08] <camelia> rakudo-moar ec7bc2: OUTPUT: «(LATIN SMALL LETTER B LATIN SMALL LETTER A WITH RING ABOVE)?»

[21:08] <AlexDaniel> e: say 'bå'.uninames

[21:08] <evalable6> AlexDaniel, rakudo-moar ec7bc25c4: OUTPUT: «(LATIN SMALL LETTER B LATIN SMALL LETTER A WITH RING ABOVE)»

[21:08] <AlexDaniel> MasterDuke: do you see anything?

[21:10] <AlexDaniel> ah sorry

[21:10] <MasterDuke> looks the same to me?

[21:10] <AlexDaniel> because that's exactly how I copy-pasted it

[21:10] <AlexDaniel> because I copy-pasted it guess from where

[21:11] <AlexDaniel> c: f590863e17^,f590863e17 use lib ‘data/all-modules/moritz/json/lib/’; use JSON::Tiny; use Test; my @t = '{ "a" : "b\u00E5" }' => { 'a' => 'bå' }, '[ "\u2685" ]' => [ '?' ], qq{"x\c[ZERO WIDTH JOINER]a"} => "x\c[ZERO WIDTH JOINER]a", qq{"\c[ZERO WIDTH JOINER]"} => "\c[ZERO WIDTH JOINER]"; plan (+@t); for @t -> $p { my $got = from-json($p.key); is-deeply $got, $p.value; }

[21:11] <committable6> AlexDaniel, https://gist.github.com/2a9088ddcff37fd6f748b77ba3339af2

[21:11] <MasterDuke> emacs?

[21:11] <AlexDaniel> MasterDuke: that's a very interesting idea, but no :) https://irclog.perlgeek.de/perl6-dev/2017-08-10#i_14998134

[21:12] <AlexDaniel> (it has ? instead of ?)

[21:13] <AlexDaniel> jdv79: can you submit a ticket for this?

[21:15] <AlexDaniel> .tell jnthn FWIW some kind of breakage due to f590863e17 https://gist.github.com/Whateverable/2a9088ddcff37fd6f748b77ba3339af2

[21:15] <yoleaux> AlexDaniel: I'll pass your message to jnthn.

[21:43] <jdv79> should i?

[21:43] <jdv79> thinks its pretty obvious but sure

[21:46] <jdv79> [Coke]: shouldn't it be possible to log a bug directly on rt?

[21:46] <jdv79> the web interface i mean

[21:48] <MasterDuke> jdv79: that was disabled because of spammers

[21:56] <jdv79> AlexDaniel: RT#131881

[21:56] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131881

[22:13] <japhb> Wow, that's an impressive bug.

[22:14] <japhb> .oO( Expected result: JSON parses correctly.   Actual result: Moon alters orbit, solar eclipse suddenly moved to today. )

[22:17] <geekosaur> actual result: that one stackoverflow >.>

[22:17] <MasterDuke> .oO(isn't there an emacs command for altering the moon's orbit?)

[22:19] <AlexDaniel> MasterDuke: no, that's a vim thing when you attempt to exit it

[22:19] <AlexDaniel> https://github.com/search?q=%3Awq&type=Commits

[22:20] <MasterDuke> ha!

[22:27] <AlexDaniel> by the way, is there any good reason to use JSON::Tiny nowadays?

[22:27] <AlexDaniel> instead of JSON::Fast

[22:36] <timotimo> its code isn't messy :)

[22:38] <jnthn> AlexDaniel: To see how much harder we need to optimize grammars yet ;)

[22:39] <timotimo> very true

[22:41] <ugexe> Grammar::HTTP still doesn't work from after braids stuff was merged in :(

[22:42] <ugexe> someone finally opened an issue about it the other day

[22:45] <nine> Ok, with the latest Inline::Perl5 commits, I'm now at 9.881s for csv-ip5xs (best of 5 runs, 100000 iterations). Used to be 13.042s earlier today and 17.483s last week.

[22:46] <jnthn> :)

[22:46] * jnthn wonders if his efforts today might have shaved something off test-t

[22:47] <jnthn> Nice if *that* number goes down as well as the one relating to Inline::Perl5 :D

[22:47] <nine> I hope we'll see tomorrow :) But I should have a comfortable 50+ % advantage still ;)

[22:47] <jnthn> :P

[22:47] <nine> I'm now at a point where the startup overhead accounts for 30 % of the runtime

[22:47] <jnthn> Anything that makes native calls faster is very good for us

[22:48] <jnthn> In that it makes a ton of modules faster

[22:48] <nine> in the standard 10000 iterations tests that is

[22:48] <jnthn> Including such stuff as IO::Socket::Async::SSL :)

[22:49] <nine> jnthn: have you looked at my NativeCall commit from today? https://github.com/rakudo/rakudo/commit/cd7dc4ce93

[22:49] <nine> Actually already yesterday ;)

[22:50] <jnthn> nine: Not yet, trying to inline closures was fairly absorbing...

[22:51] <jnthn> Looks very much along the right lines though :)

[22:51] * nine exhales a little

[22:52] <nine> Ok, will now let my subconcious practice this breathing thing a little ;) Good night!

[22:53] <jnthn> 'night o/
