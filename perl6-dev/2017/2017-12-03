[00:00] <lizmat> hmmm, looks like Geth is gone ?

[00:01] * lizmat committed https://github.com/rakudo/rakudo/commit/e5b660ee05a6decc5ffd3

[00:01] * lizmat committed https://github.com/rakudo/rakudo/commit/cd24b1c55d0c798c8fd776

[00:02] <lizmat> sleep&

[00:31] <Zoffix> Geth is ded 'cause hack is ded. Can't ssh into it. Really need to figure out what's happening with it. The Hypervizor said 30% of RAM is still available last couple times it happened, but maybe RAM usage just grows so fast that's the last measurement it was able to take?

[00:33] <timotimo> Zoffix: i believe it has to do with virtual disks getting lost

[00:33] <timotimo> i'll restart it

[00:34] <timotimo> oh, seems like you were faster than me?

[00:34] <timotimo> ah, no, just a little glitch in the viewer

[00:35] <timotimo> hack is coming back up

[00:35] <Zoffix> I was faster than you...

[00:35] <timotimo> huh?

[00:35] <Zoffix> But then it said "error disconnected" while I was trying to login to console to look at stuff :)

[00:36] <timotimo> oh, you wanted to see what the error looks like on hack itself?

[00:36] <timotimo> "warning: task [random program name here] hung for more than 120 seconds"

[00:36] <Zoffix> How does it know that it hung?

[00:36] <Zoffix> :)

[00:37] <gfldex> by looking at CPU registers

[00:37] <timotimo> it seems like khungtaskd is responsible for this?

[00:38] <timotimo> looks like there's a boot parameter that'd let us get a kernel panic whenever the hung task thing fires

[00:38] <timotimo> not sure if we can get it to reboot immediately in that case

[00:41] <gfldex> looks like it: https://unix.stackexchange.com/questions/29567/configure-reboot-on-linux-kernel-panic

[01:01] <japhb> What type do I specify for a return value in a signature to say a routine must return something that will flatten like a list when assigned to a @variable?

[01:13] <timotimo> hm, iterable perhaps?

[01:13] <timotimo> oh, it's about the presence or absence of a container, right?

[01:18] <japhb> timotimo: Yeah, iterable and not containerized.

[01:34] <timotimo> i'm not sure our type system covers that without a "where" constraint

[05:31] <wander> m: use Test;{ my sub infix:<;> ($a, $b) { say "here"; $a + $b };is $(infix:<;>(3, 2)), 5}

[05:31] <camelia> rakudo-moar e5b660ee0: OUTPUT: «here␤ok 1 - ␤»

[05:31] <wander> m: use Test;{ my sub infix:<;> ($a, $b) { say "here"; $a + $b };is $(3 ; 2), 5}

[05:31] <camelia> rakudo-moar e5b660ee0: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 3 in sink context (line 1)␤not ok 1 - ␤# Failed test at <tmp> line 1␤# expected: '5'␤#      got: '2'␤»

[05:31] <wander> rt#124981

[05:31] <synopsebot> RT#124981 [new]: https://rt.perl.org/Ticket/Display.html?id=124981 Roast rakudo skip/todo test:./S06-operator-overloading/sub.t line:173 reason: 'infix:<;>'

[05:34] <wander> RT#124983 RT#124982 RT#124981

[05:34] <synopsebot> RT#124983 [new]: https://rt.perl.org/Ticket/Display.html?id=124983 Roast rakudo skip/todo test:./S06-operator-overloading/sub.t line:231 reason: 'infix Z will never work; no lexical Z'

[05:34] <synopsebot> RT#124982 [new]: https://rt.perl.org/Ticket/Display.html?id=124982 Roast rakudo skip/todo test:./S06-operator-overloading/sub.t line:188 reason: 'missing block, apparently if not an op'

[05:35] <wander> all of there are about overloading built-in operators

[06:21] <Geth> ¦ roast: 77deb4a6a5 | (Alex Chen)++ | S12-enums/basic.t

[06:21] <Geth> ¦ roast: Set relevant issue of fudge test

[06:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/77deb4a6a5

[07:18] <yoleaux> AlexDaniel`: RT/GH weekly

[09:17] <Geth> ¦ rakudo: e31a414b9c | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/BOOTSTRAP.nqp

[09:17] <Geth> ¦ rakudo: Fix for RT #126099

[09:17] <Geth> ¦ rakudo:

[09:17] <Geth> ¦ rakudo: - could be golfed to a simple "Block but True"

[09:17] <Geth> ¦ rakudo: - turns out we simply needed a check for concreteness in the bootstrap .clone

[09:17] <Geth> ¦ rakudo: - also fixed for "Code but True"

[09:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e31a414b9c

[09:17] <synopsebot> RT#126099 [open]: https://rt.perl.org/Ticket/Display.html?id=126099 [BUG] .WHICH fails for Block but True

[09:18] <lizmat> breakfast&

[09:43] <[Tux]> Rakudo version 2017.11-53-ge31a414b9 - MoarVM version 2017.11-28-gba1fb9542

[09:43] <[Tux]> csv-test-xs-20      0.421 -  0.435

[09:43] <[Tux]> csv-ip5xs           1.053 -  1.073

[09:43] <[Tux]> test-t --race       1.161 -  1.189

[09:43] <[Tux]> test-t              2.910 -  2.933

[09:43] <[Tux]> test               11.413 - 11.677

[09:43] <[Tux]> csv-parser         11.787 - 12.197

[09:43] <[Tux]> csv-ip5xs-20       12.529 - 12.892

[09:43] <[Tux]> test-t-20 --race   18.097 - 18.292

[09:43] <[Tux]> test-t-20          52.253 - 52.300

[10:24] <Geth> ¦ roast: 96cb67daac | (Elizabeth Mattijsen)++ | S12-enums/basic.t

[10:24] <Geth> ¦ roast: Fix fudging specification error

[10:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/96cb67daac

[10:26] <Geth> ¦ rakudo: c9699ab2ce | (Elizabeth Mattijsen)++ | src/core/List.pm

[10:26] <Geth> ¦ rakudo: Fix for RT #125964

[10:26] <Geth> ¦ rakudo:

[10:26] <Geth> ¦ rakudo: - Any.ASSIGN-POS is not the right candidate to handle this case

[10:26] <Geth> ¦ rakudo: - make sure there's a List.ASSIGN-POS that can handle it

[10:26] <Geth> ¦ rakudo: - please note that you *CAN* assign to a List element if it is a container!

[10:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c9699ab2ce

[10:26] <synopsebot> RT#125964 [open]: https://rt.perl.org/Ticket/Display.html?id=125964 [LTA] assigning to AOB List elem does not hint right

[11:56] <Geth> ¦ roast: e290ddd508 | (Alex Chen)++ | S14-roles/mixin.t

[11:56] <Geth> ¦ roast: Add test for RT#126099

[11:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e290ddd508

[11:56] <synopsebot> RT#126099 [open]: https://rt.perl.org/Ticket/Display.html?id=126099 [BUG] .WHICH fails for Block but True

[12:14] <Geth> ¦ roast: 2e62c00de9 | (Alex Chen)++ | S02-types/list.t

[12:14] <Geth> ¦ roast: Add test for RT#125964

[12:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2e62c00de9

[12:14] <synopsebot> RT#125964 [open]: https://rt.perl.org/Ticket/Display.html?id=125964 [LTA] assigning to AOB List elem does not hint right

[12:34] <AlexDaniel`> Oh wow, wander++

[13:20] <dogbert17> t/spec/S02-types/list.t                                         (Wstat: 65280 Tests: 74 Failed: 3)

[13:20] <dogbert17> Failed tests:  72-74

[13:20] <dogbert17> Non-zero exit status: 255

[13:20] <dogbert17> Parse errors: Bad plan.  You planned 71 tests but ran 74.

[13:40] <dogbert17> t/spec/S02-types/range.t (Wstat: 512 Tests: 191 Failed: 2)

[13:40] <dogbert17> Failed tests:  55-56

[13:41] <dogbert17> t/spec/S14-roles/mixin.t                                        (Wstat: 65280 Tests: 55 Failed: 2)

[13:41] <dogbert17> Failed tests:  54-55

[13:41] <dogbert17> Parse errors: Bad plan.  You planned 53 tests but ran 55.

[13:55] <Geth> ¦ roast: c712b1980a | (Alex Chen)++ | 2 files

[13:55] <Geth> ¦ roast: Modify numbers of plan

[13:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c712b1980a

[13:56] <wander> sorry, it runs with latest rakudo, I test on camelia but not locally, that's why I forget about 'plan'

[14:47] <dogbert17> wander++ let me make another run to verify

[15:06] <dogbert17> there are two test failures in t/spec/S02-types/range.t

[15:06] <dogbert17> not ok 55 - is Range.bounds[0] ro

[15:06] <dogbert17> not ok 56 - is Range.bounds[1] ro

[16:25] <wander> lizmat mentioned it, let me take a close look

[16:35] <wander> I think as below, the former tests the same thing as the latter

[16:35] <wander> https://github.com/perl6/roast/blob/c712b1980a306554e3ad41d4a5d7392d3fbcb9bf/S02-types/range.t#L106-L114

[16:35] <wander> https://github.com/perl6/roast/blob/c712b1980a306554e3ad41d4a5d7392d3fbcb9bf/S02-types/list.t#L167-L170

[16:36] <wander> with lizmat's commit c9699ab2ce7, the exception it throws becomes a little different, however, the core is the same

[16:37] <wander> so I suggest just delete the former test, at most set a link to the latter.

[16:49] <Geth> ¦ roast/W4anD0eR96-patch-2: 172b50b5b8 | (Alex Chen)++ | 2 files

[16:49] <Geth> ¦ roast/W4anD0eR96-patch-2: Merge tests for same purpose

[16:49] <Geth> ¦ roast/W4anD0eR96-patch-2: review: https://github.com/perl6/roast/commit/172b50b5b8

[16:50] <Geth> ¦ roast: W4anD0eR96++ created pull request #364: Merge tests for same purpose

[16:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/364

[16:50] <synopsebot> SPEC#364 [open]: https://github.com/perl6/roast/pull/364 Merge tests for same purpose

[16:52] <Geth> ¦ roast/W4anD0eR96-patch-2: a84ff52bf3 | (Alex Chen)++ (committed using GitHub Web editor) | S02-types/range.t

[16:52] <Geth> ¦ roast/W4anD0eR96-patch-2: Update range.t

[16:52] <Geth> ¦ roast/W4anD0eR96-patch-2: review: https://github.com/perl6/roast/commit/a84ff52bf3

[16:58] <Geth> ¦ roast: 172b50b5b8 | (Alex Chen)++ | 2 files

[16:58] <Geth> ¦ roast: Merge tests for same purpose

[16:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/172b50b5b8

[16:58] <Geth> ¦ roast: a84ff52bf3 | (Alex Chen)++ (committed using GitHub Web editor) | S02-types/range.t

[16:58] <Geth> ¦ roast: Update range.t

[16:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a84ff52bf3

[16:58] <Geth> ¦ roast: 5ae87d0223 | lizmat++ (committed using GitHub Web editor) | 2 files

[16:58] <Geth> ¦ roast: Merge pull request #364 from perl6/W4anD0eR96-patch-2

[16:58] <Geth> ¦ roast:

[16:58] <Geth> ¦ roast: Merge tests for same purpose

[16:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5ae87d0223

[17:20] <japhb> .ask pmurias In https://github.com/perl6/nqp/commit/1c217fbeed87c6d5322af6ab040605b9690b4567 why are new lines 33-35 necessary?  Why can't the function just end with 'return correct;' instead of splitting and then rejoining?

[17:20] <yoleaux> japhb: I'll pass your message to pmurias.

[17:32] <Ven``> japhb: maybe in case correct is 1e2e3?

[17:33] <Ven``> (more than a single e)

[17:35] <wander> 1e

[18:21] <japhb> Ven``: But if that's coming from num.toPrecision() why would that ever happen?

[20:52] <tbrowder> .tell AlexDaniel I added more code to PR #1291 to fix RT #126742 and RT #130477. I added tests for them in roast PR #363.

[20:52] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[20:52] <synopsebot> RT#126742 [new]: https://rt.perl.org/Ticket/Display.html?id=126742 [POD]  config items should not include quotes for string values

[20:52] <synopsebot> RT#130477 [new]: https://rt.perl.org/Ticket/Display.html?id=130477 [BUG][POD] Pod config parses colopairs but simply stringifies whatever it matched

[21:12] <pmurias> japhb: it seems like it's just a historical leftover ;)

[21:12] <yoleaux> 17:20Z <japhb> pmurias: In https://github.com/perl6/nqp/commit/1c217fbeed87c6d5322af6ab040605b9690b4567 why are new lines 33-35 necessary?  Why can't the function just end with 'return correct;' instead of splitting and then rejoining?

[21:13] <Geth> ¦ nqp: 5f25c81ea6 | pmurias++ | src/vm/js/nqp-runtime/coercions.js

[21:13] <Geth> ¦ nqp: [js] Remove useless leftover code

[21:13] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5f25c81ea6

[22:12] <AlexDaniel> .

[22:12] <yoleaux> 20:52Z <tbrowder> AlexDaniel: I added more code to PR #1291 to fix RT #126742 and RT #130477. I added tests for them in roast PR #363.

[22:12] <synopsebot> RT#126742 [new]: https://rt.perl.org/Ticket/Display.html?id=126742 [POD]  config items should not include quotes for string values

[22:12] <synopsebot> RT#130477 [new]: https://rt.perl.org/Ticket/Display.html?id=130477 [BUG][POD] Pod config parses colopairs but simply stringifies whatever it matched
