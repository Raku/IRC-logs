[00:02] <Geth> ¦ roast: e3d5196640 | (Samantha McVey)++ | 2 files

[00:02] <Geth> ¦ roast: Add additional tests for Unassigned characters (Cn) and <:C>

[00:02] <Geth> ¦ roast:

[00:02] <Geth> ¦ roast: Also untodo the now passing tests. These tests are for RT#124863

[00:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e3d5196640

[00:02] <synopsebot> RT#124863 [open]: https://rt.perl.org/Ticket/Display.html?id=124863 [UNI] Roast rakudo skip/todo test:./S05-mass/properties-general.t line:735 reason: Unions of properties of non-existent codepoints

[00:04] <Zoffix> Missed the "wait" :)

[00:05] <Zoffix> All tests successful.

[00:05] <Zoffix> Files=1283, Tests=152832, 153 wallclock secs (21.64 usr  3.23 sys + 3282.18 cusr 167.58 csys = 3474.63 CPU)

[00:05] <Zoffix> Result: PASS

[00:09] <travis-ci> NQP build failed. Zoffix Znet 'Bump MoarVM'

[00:09] <travis-ci> https://travis-ci.org/perl6/nqp/builds/296545753 https://github.com/perl6/nqp/compare/b8c85f824b30...a3f7bb81776a

[00:15] <Zoffix> jvm stuff fails

[00:15] <Zoffix> Oh, I guess it's missing the nqp::boxI_I op?

[00:15] <Zoffix> Dunno; fails in t/nqp/014-while.t  and t/nqp/044-try-catch.t

[00:18] <jnthn> sleep &

[00:27] <samcv> o/ jnthn

[00:49] <Geth> ¦ nqp: 31844c5f88 | MasterDuke17++ | 2 files

[00:49] <Geth> ¦ nqp: Implement nqp::fromI_I for JVM

[00:49] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/31844c5f88

[01:13] <travis-ci> NQP build failed. MasterDuke17 'Implement nqp::fromI_I for JVM'

[01:13] <travis-ci> https://travis-ci.org/perl6/nqp/builds/296563077 https://github.com/perl6/nqp/compare/a3f7bb81776a...31844c5f88d4

[01:18] <Zoffix> t/nqp/014-while.t  and t/nqp/044-try-catch.t

[04:15] <MasterDuke> nqp-m: my $x := 0; repeat until $x >= 2 -> $another_x {if $x == 0 { nqp::say(nqp::isnull($another_x)) } else { nqp::say($another_x) }; $x := $x + 1; }

[04:15] <camelia> nqp-moarvm: OUTPUT: «1␤0␤»

[04:15] <MasterDuke> nqp-j: my $x := 0; repeat until $x >= 2 -> $another_x {if $x == 0 { nqp::say(nqp::isnull($another_x)) } else { nqp::say($another_x) }; $x := $x + 1; }

[04:16] <MasterDuke> well, that prints 0, 0 for nqp-j (t/nqp/014-while.t)

[06:31] <Geth> ¦ nqp: 72487f7d81 | usev6++ | 2 files

[06:31] <Geth> ¦ nqp: [jvm] Skip two newly added tests that fail on JVM

[06:31] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/72487f7d81

[06:58] <travis-ci> NQP build failed. usev6 '[jvm] Skip two newly added tests that fail on JVM'

[06:58] <travis-ci> https://travis-ci.org/perl6/nqp/builds/296639149 https://github.com/perl6/nqp/compare/31844c5f88d4...72487f7d81fa

[07:02] <bartolin> hmm, looks like the travis job for jvm didn't run to completion ^^

[07:07] <bartolin> how does one bump nqp? does it suffice to update rakudo's tools/build/NQP_REVISION with the output of 'git describe' (from the nqp repo)?

[07:14] <Geth> ¦ nqp: 5f9e354ccf | (Christian Bartolomäus)++ (committed using GitHub Web editor) | t/nqp/014-while.t

[07:14] <Geth> ¦ nqp: [jvm] Fix skip command (we skip two tests here)

[07:14] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5f9e354ccf

[07:31] <travis-ci> NQP build passed. Christian Bartolomäus '[jvm] Fix skip command (we skip two tests here)'

[07:31] <travis-ci> https://travis-ci.org/perl6/nqp/builds/296648915 https://github.com/perl6/nqp/compare/72487f7d81fa...5f9e354ccfcf

[07:32] <bartolin> \o/

[07:37] <[Tux]> Rakudo version 2017.10-106-g264eef798 - MoarVM version 2017.10-47-gf88ab169d

[07:37] <[Tux]> csv-test-xs-20      0.438 -  0.484

[07:37] <[Tux]> csv-ip5xs           1.113 -  1.129

[07:37] <[Tux]> test-t              3.307 -  3.556

[07:37] <[Tux]> test               12.043 - 12.147

[07:37] <[Tux]> csv-parser         12.386 - 12.520

[07:37] <[Tux]> csv-ip5xs-20       13.179 - 13.247

[07:37] <[Tux]> test-t-20 --race   21.258 - 21.820

[07:37] <[Tux]> test-t-20          60.880 - 61.919

[08:50] <pmurias> The hint when getting attributes on moarvm and jvm isn't always correct?

[10:06] <jnthn> pmurias: It's invalid in the presence of MI

[10:09] <pmurias> jnthn: the get attribute code is expected to verify if the hint is correct?

[10:13] <jnthn> It's expected to ignore it in the case of MI; see the MoarVM impl where that's probably clearest

[10:20] <Zoffix> bartolin: yeah, that's the way to do it. FWIW, here are my bumping bash aliases: https://gist.github.com/zoffixznet/8274ecdb83763b2509bca972d496c604

[10:20] <pmurias> jnthn: thank you, I see it now

[10:21] <Zoffix> (the second one is for manual push for when stresstest flops)

[10:37] <patrickz> Hey! I'm trying to get my first doc commit ready. I'm struggling with `=begin code` blocks, which seem to indent further with every line in them (somehow even spanning multiple blocks).

[10:37] <patrickz> This is how the code looks: https://gist.github.com/patzim/4b6d2c83132eb9f1b038d59f828904bf

[10:38] <patrickz> This is the result: https://imgur.com/a/lXLGi

[10:38] <patrickz> Any ideas?

[10:39] <bartolin> Zoffix: thanks!

[10:46] <Zoffix> patrickz: unsure what you mean. Got a screenshot/markup pastebin of problematic rendering?

[10:49] <patrickz> Zoffix: https://imgur.com/a/lXLGi < I added a second image with the spaces I'm worried about marked.

[10:52] <Zoffix> patrickz: and what's the resultant markup?

[10:52] <Zoffix> That's not the render I get and I don't see how you end up with your version with the markup I get

[10:53] <patrickz> Ah, the images are the html/perl6.xhtml file opened directly in firefox.

[10:54] <patrickz> Is that at least somehow representative how it will end up on the website?

[10:58] <Zoffix> patrickz: then I would ignore it and just commit and see what it comes out as on the website. html/perl6.xhtml has some escaping bugs ( https://github.com/perl6/doc/issues/1285 ) so it wouldn't surprise me if it also generates invalid markup that causes your issue

[10:59] <Zoffix> patrickz: personally, I just push docs as is and don't worry much about rendering. It can be fixed later, if needed and this method lets me write all the docs quicker, without spending time to render them.

[10:59] * Zoffix &

[10:59] <patrickz> Will do. Thanks!

[12:13] <lizmat> https://blog.toggl.com/world-created-programmer/  # made me lol

[12:15] <Zoffix> This rings too true to be funny :) "To create darkness, you need to hide the land, but that's OK cause creatures won't be added until later"

[12:51] <moritz> lizmat: me too. Thanks!

[13:05] <Geth> ¦ nqp/master: 5 commits pushed by pmurias++

[13:05] <Geth> ¦ nqp/master: 66caf96673 | [js] Fix mixing default positional with slurpy positional

[13:05] <Geth> ¦ nqp/master: 7f05f60b5c | Test mixing slurpy positionals with default positionals

[13:05] <Geth> ¦ nqp/master: fcce8ab5ce | [js] Multi cache native refs separately

[13:05] <Geth> ¦ nqp/master: 4e58cc54a5 | [js] Add types to variables

[13:05] <Geth> ¦ nqp/master: 87000502c5 | [js] Stop using a dynamic variable when a regular one is enough

[13:05] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/5f9e354ccf...87000502c5

[13:26] <MasterDuke> anyone have an opinion on https://github.com/rakudo/rakudo/pull/1221/? if it is going to be merged, it'll be easier to do it now rather than later, since it touches so many lines it's fragile to conflicts from other changes

[13:29] <MasterDuke> pmurias: i added the new nqp::fromI_I recently for moar and jvm, but i don't know javascript enough to do it for that backend

[13:30] <perlpilot> MasterDuke: my opinion:  +1   :)

[13:34] <MasterDuke> cool

[13:38] <Zoffix> MasterDuke: is that just for consistency?

[13:38] <Zoffix> Or will `{ * }` stop working soon and this is to avoid that breakage? I thougth I saw something along those lines mentioned somewhere

[13:39] <MasterDuke> `{ * }` breaks if you add scope around it

[13:39] <Zoffix> Ah

[13:39] <MasterDuke> i don't think it's intended to break otherwise

[13:41] <Geth> ¦ rakudo: 0edd0cc9c1 | MasterDuke17++ | 23 files

[13:41] <Geth> ¦ rakudo: Normalize proto bodies

[13:41] <Geth> ¦ rakudo:

[13:41] <Geth> ¦ rakudo: Convert all `{ * }` to `{*}` for consistency.

[13:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0edd0cc9c1

[13:41] <Geth> ¦ rakudo: 733d50c03d | MasterDuke17++ (committed using GitHub Web editor) | 23 files

[13:41] <Geth> ¦ rakudo: Merge branch 'master' into normalize_proto_bodies

[13:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/733d50c03d

[13:41] <Geth> ¦ rakudo: 2cadb2bc01 | (Zoffix Znet)++ (committed using GitHub Web editor) | 23 files

[13:41] <Geth> ¦ rakudo: Merge pull request #1221 from MasterDuke17/normalize_proto_bodies

[13:41] <synopsebot> RAKUDO#1221 [closed]: https://github.com/rakudo/rakudo/pull/1221 Normalize proto bodies

[13:41] <Geth> ¦ rakudo:

[13:41] <Geth> ¦ rakudo: Normalize proto bodies

[13:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2cadb2bc01

[13:42] <MasterDuke> thanks

[13:43] <perlpilot> MasterDuke: I even think that `proto sub foo(|) {*}` would be better written as `proto sub foo(|) { {*} }`  but that might just be some foolish consistency on my part :)

[13:43] <perlpilot> (I think the latter helps remind that there can be other code in the proto)

[13:44] <perlpilot> and {*} makes a nice visual pill

[13:46] <MasterDuke> perlpilot: that does have its appeal...but i wonder if the extra scope would noticeably slow down parsing and/or execution?

[13:47] <Zoffix> A quick glance at optimized AST tells me `{ {*} }` might not be considered an "only star" proto and misses some optimizations

[13:48] <perlpilot> Then, yeah, it's a foolish consistency on my part :)

[13:49] <Zoffix> Don't see any dif in time measurements tho

[13:49] <Zoffix> (or maybe it's just drowned by noise of the bench

[13:49] <Zoffix> )

[13:50] <Zoffix> Ah nah

[13:50] <Zoffix> m: proto z(|) { * }; multi z ($) { }; for ^1000_000 { $ = z 42;  }; say now - INIT now

[13:50] <camelia> rakudo-moar 264eef798: OUTPUT: «0.1827956␤»

[13:50] <Zoffix> m: proto z(|) { {*} }; multi z ($) { }; for ^1000_000 { $ = z 42;  }; say now - INIT now

[13:50] <camelia> rakudo-moar 264eef798: OUTPUT: «0.5886782␤»

[13:50] <Zoffix> m: say .58867/.1827

[13:50] <camelia> rakudo-moar 264eef798: OUTPUT: «3.222058␤»

[13:52] <MasterDuke> wow, didn't expect it'd be quite that big

[13:55] * jnthn isn't surprised

[13:56] <jnthn> The first form can skip the call to the proto entirely once it's cached

[13:56] <jnthn> The second form can't

[14:00] <Geth> ¦ rakudo: fccc75152d | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[14:00] <Geth> ¦ rakudo: Quite extensive refactor of Telemetry

[14:00] <Geth> ¦ rakudo:

[14:00] <Geth> ¦ rakudo: - just store the nqp::getrusage struct instead of already dissecting

[14:00] <Geth> ¦ rakudo:   - makes Telemetry.new about 15% faster

[14:00] <Geth> ¦ rakudo:   - adapt all instance method logic accordingly

[14:00] <Geth> ¦ rakudo:   - moves burden to Telemetry::Period creation, but that's when we need

[14:00] <Geth> ¦ rakudo:     and all of the snapping is already done

[14:00] <Geth> ¦ rakudo: <…commit message has 10 more lines…>

[14:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fccc75152d

[14:28] <dogbert17> ZOFFLOP: t/spec/S11-modules/nested.t

[14:29] <dogbert17> there's something fishy with this test, it failed under spectest and when I ran it standalone I got (on the first run): Use of uninitialized value $repo-id of type Any in string context.

[14:29] <dogbert17> Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.

[14:29] <dogbert17> in any statement_control at blib/Perl6/Grammar.moarvm line 1

[14:33] <Zoffix> I observed the same behaviour for it during my flops

[14:43] <dogbert17> Zoffix: are you still experiencing RT #132273 ?

[14:43] <synopsebot> RT#132273 [new]: https://rt.perl.org/Ticket/Display.html?id=132273 [SEGV] while running t/spec/S17-supply/supplier-preserving.t

[14:45] <Zoffix> haven't tried

[14:45] <dogbert17> ok, just checking :)

[14:45] <Zoffix> |6h https://rt.perl.org/Ticket/Display.html?id=132273

[14:45] <ZofBot> Zoffix, Will remind you on 2017-11-03T16:45:22.427746-04:00 about https://rt.perl.org/Ticket/Display.html?id=132273

[14:46] <dogbert17> will try to repro but suspect that I'll fail

[14:58] <lizmat> m: constant method = 1; my @a; @a[method] = 42   # DIHWIDT  :-(

[14:58] <camelia> rakudo-moar fccc75152: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3constant method = 1; my @a; @a[method7⏏5] = 42   # DIHWIDT  :-(␤»

[15:01] <Zoffix> m: constant method = 1; my @a; @a[::method] = 42; say @a

[15:01] <camelia> rakudo-moar fccc75152: OUTPUT: «[(Any) 42]␤»

[15:01] <Zoffix> m: constant constant = 1; constant @a = constant; say @a

[15:01] <camelia> rakudo-moar fccc75152: OUTPUT: «(1)␤»

[15:02] <Zoffix> ^_^

[15:43] <ugexe> what is List.to / List.from intended to solve?

[15:44] <[Coke]> |1m /me wonders what this does.

[15:45] <ugexe> it expects either the first or last item of a list to be a specific type (Match), and one works on the first item and one works on the last

[15:46] <Geth> ¦ rakudo: 1c2c7d845e | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[15:46] <Geth> ¦ rakudo: Added formatting capabilities to Telemetry report

[15:46] <Geth> ¦ rakudo:

[15:46] <Geth> ¦ rakudo: - :@format named parameter

[15:46] <Geth> ¦ rakudo: - expects a list with lists of: column name, method name, format, legend

[15:46] <Geth> ¦ rakudo:   - format *without* the preceding '%'

[15:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1c2c7d845e

[15:46] * [Coke] has been spending way too much time at $dayjob lately, and misses hacking on p6. keep up the good work, everyone. ;)

[15:46] <lizmat> gfldex: ^^^

[15:46] <lizmat> afk for a bit&

[15:46] <ugexe> m: my @a = ("a" ~~ /a/, "bb" ~~ /b/); say @a.from; say @a.to

[15:46] <camelia> rakudo-moar fccc75152: OUTPUT: «0␤1␤»

[15:46] <ugexe> m: my @a = ("a" ~~ /a/, "bb" ~~ /a/); say @a.from; say @a.to

[15:46] <camelia> rakudo-moar fccc75152: OUTPUT: «0␤No such method 'to' for invocant of type 'Any'. Did you mean 'so'?␤  in block <unit> at <tmp> line 1␤␤»

[15:47] <ugexe> that seems to indicate its not very robust

[15:48] <jnthn> ugexe: m:g

[15:48] <ugexe> right, but even the error message implies something strange

[15:48] <ugexe> its calling .to on a List, but the error complains about calling .to on an item in the list items

[15:49] <jnthn> m:g will only ever produce a list of Match objects

[15:49] <evalable6> jnthn, rakudo-moar fccc75152: OUTPUT: «(exit code 1) 04===SORRY!04=== Error while compiling /tmp/kGiCf5ENky␤Missing…»

[15:49] <evalable6> jnthn, Full output: https://gist.github.com/716eef5e734b1efc50252d1fe93826f6

[15:50] <Zoffix> ugexe: IIRC it's 'cause List.to/.from are an, awful hackl

[15:50] <Zoffix> s: (), 'to', \()

[15:50] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/4fca94743/src/core/List.pm#L372

[15:50] <Zoffix> It basically *assumes* if such a method is called, the list is a list of Match objects

[15:50] <ugexe> thats why i wonder what its useful for

[15:50] * AlexDaniel slaps evalable6

[15:50] <ugexe> i assume its useful for -something-

[15:51] * Zoffix has no idea what for and wouldn't mind the hack going away :P

[15:52] <Zoffix> But I'm guessing it's for uniform use with $/.to and $/.from giving the right result regardless of whether the $/ has a list of Matches (e.g. from + quantifier) or just one Match

[15:52] <ugexe> then maybe its not needed since the cursor rework stuff awhile back

[15:54] <Zoffix> m: 'abc' ~~ /(.)+/; say $/[0].^name

[15:54] <camelia> rakudo-moar 1c2c7d845: OUTPUT: «Array␤»

[15:54] <Zoffix> Wouldn't it need to be here ^

[15:54] <Zoffix> m: 'abc' ~~ /(.)+/; say [.from, .to] with $/[0]

[15:54] <camelia> rakudo-moar 1c2c7d845: OUTPUT: «[0 3]␤»

[16:22] <ugexe> removing it causes two spectest files to fail, but it still passed the Grammar::HTTP tests

[16:30] <mst> if unicode gets more than one pile of poo glyph can we have an [[:excremoji:]] matcher for it?

[16:30] <Zoffix> :}

[16:41] <ilmari> \p{oo}

[16:41] <ilmari> \poo even

[16:46] <buggable> New CPAN upload: cro-0.7.1.tar.gz by JNTHN https://cpan.metacpan.org/authors/id/J/JN/JNTHN/Perl6/cro-0.7.1.tar.gz

[16:46] <buggable> New CPAN upload: cro-core-0.7.1.tar.gz by JNTHN https://cpan.metacpan.org/authors/id/J/JN/JNTHN/Perl6/cro-core-0.7.1.tar.gz

[16:46] <buggable> New CPAN upload: cro-http-0.7.1.tar.gz by JNTHN https://cpan.metacpan.org/authors/id/J/JN/JNTHN/Perl6/cro-http-0.7.1.tar.gz

[16:46] <buggable> New CPAN upload: cro-tls-0.7.1.tar.gz by JNTHN https://cpan.metacpan.org/authors/id/J/JN/JNTHN/Perl6/cro-tls-0.7.1.tar.gz

[16:46] <buggable> New CPAN upload: cro-websocket-0.7.1.tar.gz by JNTHN https://cpan.metacpan.org/authors/id/J/JN/JNTHN/Perl6/cro-websocket-0.7.1.tar.gz

[16:46] <buggable> New CPAN upload: cro-zeromq-0.7.1.tar.gz by JNTHN https://cpan.metacpan.org/authors/id/J/JN/JNTHN/Perl6/cro-zeromq-0.7.1.tar.gz

[16:46] <timotimo> nice

[16:48] * Zoffix ponders what could be put into cro-magnon namespace...

[16:48] <Zoffix> https://en.wikipedia.org/wiki/Cro-Magnon

[16:55] <Zoffix> ZofBot: the humans did not appreciate the joke about their ancenstor. Abort Mission!

[16:55] <ZofBot> Zoffix, When the time came for me to join the firm, I put it to dad straight

[16:56] <Zoffix> Didn't know you had a dad, bruh.

[16:58] <[Coke]> is it intentional to get cpan upload info to both #perl6 & #perl6-dev ?

[17:04] <ilmari> Zoffix: I thought you were the dad?

[17:04] <Zoffix> [Coke]: yes. My logic is not everyone is present in both of those channels to select just a single one to have those reports appear in.

[17:04] <Zoffix> ilmari: it's complicated! :o

[17:04] * ilmari likes how Jeph Jacques refers to his ebooks bot as "my idiot robot son"

[17:05] <Zoffix> heh

[17:05] <ilmari> https://twitter.com/jephjacques / https://twitter.com/jeph_ebooks

[17:05] <Zoffix> [Coke]: you're the second person to ask that tho. I think I'll move #perl6-dev reports to #zofbot...

[17:06] <[Coke]> eh. irc sucks. I get it. :)

[17:07] <Zoffix> Done.

[17:21] <El_Che> any alpine devs around?

[18:05] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1229: Test for RT #132291

[18:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1229

[18:05] <synopsebot> RT#132291 [new]: https://rt.perl.org/Ticket/Display.html?id=132291 [LTA] Too few positionals passed to '' (for [:a] X [:b] -> ($i, $j) { })

[18:05] <synopsebot> RAKUDO#1229 [open]: https://github.com/rakudo/rakudo/pull/1229 Test for RT #132291

[18:07] <Geth> ¦ rakudo: cd9f66eff5 | MasterDuke17++ | t/05-messages/02-errors.t

[18:07] <Geth> ¦ rakudo: Test for RT #132291

[18:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cd9f66eff5

[18:07] <Geth> ¦ rakudo: 32412170b3 | (Zoffix Znet)++ (committed using GitHub Web editor) | t/05-messages/02-errors.t

[18:07] <Geth> ¦ rakudo: Merge pull request #1229 from MasterDuke17/test_for_RT132291

[18:07] <Geth> ¦ rakudo:

[18:07] <Geth> ¦ rakudo: Test for RT #132291

[18:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/32412170b3

[18:11] <El_Che> I am working on alpine packages, and I have a failing test: https://gist.github.com/nxadm/f1c10be2a03b22c34471345fbde35c72 ( t/04-nativecall/01-argless.t)

[18:11] <El_Che> I know alpine is not the nicest for C and C++ code, but I haven't seen this one

[18:11] <El_Che> Failed test 'called argless function returning char' at t/04-nativecall/01-argless.t line 25 expected: '2' got: '94117762201346'

[18:12] <El_Che> if someone has seen it, ping me

[18:12] <Zoffix> m: say 94117762201346.log: 2

[18:12] <camelia> rakudo-moar 32412170b: OUTPUT: «46.4195322521493␤»

[18:12] * Zoffix shrugs

[18:12] <El_Che> good ... how :)

[18:13] <AlexDaniel> MasterDuke: :D

[18:14] <AlexDaniel> ( https://rt.perl.org/Ticket/Display.html?id=132291#txn-1504393 )

[18:15] <AlexDaniel> I hope twice is enough! :)

[18:15] <MasterDuke> heh, that's one thoroughly resolved ticket

[18:16] <El_Che> is there a 2017.10.1 coming or is it for 2017.11?

[18:16] <El_Che> I asked becuase fpm (what I use to generate pkgs) is broken on alpine

[18:17] <El_Che> so I went into the rabbit hole to create the pkg manually

[18:17] <El_Che> using the tools (that downloads and compiles the stuff for you) you can get a package, but you loose a lot of flexibility

[18:17] <El_Che> I don't want to figure out how patches work on the alpine build system :)

[18:18] <MasterDuke> i don't think there are any plans for a 2017.10.1

[18:18] <El_Che> there are no alpine packages, so it's not like it's blocking or something :)

[18:18] <Zoffix> 2017.11 is gonna be here in just 2 weeks

[18:18] <El_Che> indeed

[18:34] <AlexDaniel> El_Che: what's the ticket id for that issue?

[18:35] <AlexDaniel> releasable6: next

[18:35] <releasable6> AlexDaniel, Next release in 15 days and ≈0 hours. No blockers. 0 out of 113 commits logged

[18:35] <releasable6> AlexDaniel, Details: https://gist.github.com/03c27e76a8a89b9c11fe7f49b6de1969

[18:37] <El_Che> AlexDaniel: 13229

[18:37] <AlexDaniel> RT#13229

[18:37] <AlexDaniel> mm

[18:37] <AlexDaniel> ?

[18:38] <Zoffix> There ain't no such ticket. The number's missing a digit

[18:39] <El_Che> 132291

[18:39] <El_Che> sorry

[18:39] <Zoffix> RT#132291

[18:39] <synopsebot> RT#132291 [resolved]: https://rt.perl.org/Ticket/Display.html?id=132291 [LTA] Too few positionals passed to '' (for [:a] X [:b] -> ($i, $j) { })

[18:40] <Zoffix> El_Che: are you sure? That's just some LTA error, why's that blocking alpine?

[18:40] <Geth> ¦ nqp/master: 4 commits pushed by pmurias++

[18:40] <Geth> ¦ nqp/master: be6a7a167d | [js] Implement nqp::fromI_I

[18:40] <Geth> ¦ nqp/master: 1639c2b87a | Test nqp::fromI_I

[18:40] <Geth> ¦ nqp/master: c3e3d9bb25 | [js] Check that no unhandled named arguments are passed

[18:40] <Geth> ¦ nqp/master: 20536d98a5 | Test that unhandled named arguments to subs are not allowed

[18:40] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/87000502c5...20536d98a5

[18:40] <El_Che> Zoffix: i meant the other way round

[18:41] <El_Che> Zoffix: as in "it's literally not important"

[18:41] <El_Che> I am working on a first alpine pkg

[18:41] <El_Che> so it's ok if the fix in in 2017.11 or later

[18:41] * Zoffix is confused

[18:41] <Zoffix> El_Che: fix for what?

[18:42] <Zoffix> For alpine issue? Then the question is: what's that issue? What's the ticket ID for it?

[18:42] <El_Che> ok, let me rephrase, read as no-sarcasm

[18:42] <El_Che> so, there is a bug that make a test fail, that is already fixed in rakudo upstream

[18:43] <El_Che> I didn't know that

[18:43] <Zoffix> Ah ok

[18:43] <El_Che> So, now I'll continue without make test

[18:43] <El_Che> in order to figure the alpine packaging out

[18:43] <El_Che> by the time I have a pkg, rakudo 2017.11 will be out and the tests will pass

[18:44] <AlexDaniel> El_Che: OK cool. If you notice any further issues on alpine, please file a bug report and ping me the ticket ID. I'll make sure we do something about it before the release.

[18:44] <El_Che> I am half way in understanding how alpine building works :)

[19:12] <travis-ci> NQP build failed. pmurias 'Test that unhandled named arguments to subs are not allowed'

[19:12] <travis-ci> https://travis-ci.org/perl6/nqp/builds/296926994 https://github.com/perl6/nqp/compare/87000502c5ef...20536d98a51e

[19:48] <El_Che> ok, --gen-* is a no-no on alpine as it tries to write in the --prefix dir before make install

[20:15] <Geth> ¦ rakudo: 8b24bf5cd4 | usev6++ | src/vm/jvm/runtime/org/perl6/rakudo/RakudoContainerSpec.java

[20:15] <Geth> ¦ rakudo: [jvm] Also do a type check when assigning Nil

[20:15] <Geth> ¦ rakudo:

[20:15] <Geth> ¦ rakudo: Fixes GH#1225, pmurias++

[20:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8b24bf5cd4

[20:15] <synopsebot> GH#1225 [open]: https://github.com/rakudo/rakudo/issues/1225 [JVM] Do a type check when resetting a default when asigning a Nil

[21:17] <Zoffix> dogbert17: RT#132273 no longer segfaults; closed ticket

[21:17] <synopsebot> RT#132273 [resolved]: https://rt.perl.org/Ticket/Display.html?id=132273 [SEGV] while running t/spec/S17-supply/supplier-preserving.t

[21:50] <jnthn> evening o/

[21:53] <Zoffix> \o

[22:06] <jnthn> https://github.com/rakudo/rakudo/issues/1230 is the bug I ran into the other day

[22:06] <jnthn> Filed it so we don't forget on it, but intend to work on it next week or so

[22:08] <jnthn> Did we pick a way to refer to GitHub issues from roast?

[22:08] * Zoffix just used full URL so far

[22:09] <Zoffix> Also makes GitHub include reference to the commit on the issue

[22:10] <Zoffix> Like here: https://github.com/perl6/roast/blob/master/S04-statements/return.t#L106

[22:11] <Zoffix> Oh the ref happens if you also include link in commit

[22:11] <jnthn> Alright, will follow that convention

[22:11] <Zoffix> or write "rakudo/1234"

[22:11] <Zoffix> (in commit message I meant)

[22:12] <jnthn> I was mostly thinking about the test file itself

[22:12] <jnthn> But yeah, "Test for rakudo/1234" getting linked in the commit message is handy

[22:14] <jnthn> hah, phew...the heap of Travis fail notifications I got for Cro were because there was some minutes between me removing META.list entries and the CPAN additions being visible to zef

[22:20] <El_Che> About travis. I now also create Ubuntu 14.04 rakudo debs (OS that travis run), so I can speedup tests of my stuff: https://github.com/nxadm/rakudo-pkg/blob/master/.travis.yml#L27 . Is there a use case for me providing debs for older rakudo releases? Maybe in a repo? Or is there no use case before rakudbrew is more flexible?

[22:20] <El_Che> s/before/because/

[22:29] <jnthn> oh heck, I must update some of mine for that

[22:29] <jnthn> El_Che: Do you do 16.04 ones, ooc?

[22:29] <jnthn> Oh wait, Travis doesn't support that yet

[22:29] <jnthn> Heh

[22:30] <jnthn> El_Che: But in terms of "older releases" - yes, for example I'd like to be able to test against the last Rakudo that was used to make an R*.

[22:31] <El_Che> well, 14.04 shoould die in 2019 :)

[22:31] <jnthn> I don't think Travis does 16.04 yet, though.

[22:31] <El_Che> no, travis is 14.04, hence the new 14.04 pkgs

[22:33] <jnthn> Once there's a 6.d language release, most probably the first release of Rakudo that supported that will be an interesting thing to test against long-term too

[22:35] <El_Che> well, from 2017.10 onwards there will be a deb for 14.04

[22:35] <El_Che> it's automated :)

[22:35] <jnthn> Ah, I see

[22:36] <El_Che> my point is that regular modules probably wont test against random commits

[22:36] <jnthn> For me personally, that'll suffice

[22:36] <El_Che> so If we can provide a matrix of debs, it will shave 10minutes of every build

[22:38] <El_Che> jnthn: cheers on cro, btw. I just had a look at the docs

[22:38] <El_Che> fancy site :)

[22:50] <jnthn> :)

[22:50] <jnthn> Site built using Cro, of course :)

[22:52] <El_Che> I remember the crust author talking about threading problems at fosdem

[22:52] <El_Che> you skip that middellayer?

[22:53] <El_Che> it was this talk: https://archive.fosdem.org/2016/schedule/event/crust/

[22:53] <jnthn> Well, between then and now there's been a lot of fixes also

[22:54] <jnthn> Cro uses IO::Socket::Async though

[22:54] <jnthn> It doesn't do any explicit threading; it's built entirely out of the higher-level Perl 6 constructs

[22:55] <jnthn> Meaning that a server under low load will run with just a handful of threads, and one under load will happily start some more

[22:56] <Geth> ¦ roast: fd3ba22c63 | usev6++ | S32-io/io-handle.t

[22:56] <Geth> ¦ roast: [jvm] Fudge failing tests in S32-io/io-handle.t

[22:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/fd3ba22c63

[22:56] <jnthn> Cro so far takes the Node.js approach of "run our own HTTP server"

[22:57] <El_Che> jnthn: or go's

[22:57] <jnthn> That too

[22:57] <jnthn> Or .Net or... :)

[22:57] <jnthn> That said, Cro is just a way to build async pipelines

[22:57] <gfldex> i'm afraid of using Perl 6 in a coding competion in fear of being accused of cheating. :->

[22:58] <jnthn> So there's no reason at all that we couldn't provide FastCGI support

[22:58] <El_Che> jnthn: I heard an interesting talk about the jvm and docker at oss summit last week. About how only java 9 was party aware of limit set to the container

[22:58] <El_Che> and I wondered how rakudo worked

[22:59] <El_Che> e.g. problem was that the jvm saw x cores, while it only had access to let's say 2

[22:59] <El_Che> but because it saw all the cores in the machines it started X threads per core for housekeeping

[22:59] <jnthn> We're not quite that aggressive.

[22:59] <El_Che> so each container used way to much memory

[23:00] <jnthn> But still somewhat vulnerable to that issue

[23:00] <El_Che> java 9 now can take the heap hint from the container limits, and support dedicated cores (not percentages, what most people use)

[23:00] <jnthn> MoarVM only starts one or two internal threads

[23:01] <El_Che> jnthn: that's ok

[23:01] <jnthn> So that's OK

[23:01] <jnthn> Rakudo's thread pool scheduler is more interesting.

[23:01] <El_Che> indeed

[23:01] <jnthn> It will add threads if it sees that there's more work than the current are rapidly chewing through

[23:01] <jnthn> Up until the CPU core count

[23:01] <jnthn> It probably, though we'd have to check this, seeing the same number the JVM was

[23:02] <El_Che> so it can exhaust the ram

[23:02] <jnthn> Beyond the CPU core count it'll reluctantly add threads if it things the program is deadlocked

[23:02] <El_Che> resulting in OOM for the container

[23:02] <jnthn> *nod*

[23:03] <jnthn> It's probably worth factoring memory into the scheduler's decision making too

[23:03] <El_Che> I think that probably 70% of the talks at linux con were about containers

[23:03] <El_Che> so that's something to keep in mind

[23:04] <jnthn> For sure

[23:04] <El_Che> besides that containers make the more fragile dependency installation less of an issue

[23:04] <El_Che> kind-of levels the playfiel

[23:04] <El_Che> d

[23:05] <jnthn> Yeah; we'll be providing Cro docker images in the near future :)

[23:05] <El_Che> I want to provide rakudo alpine pkgs

[23:05] <El_Che> so paranoid people like me can build their own cro images

[23:05] <jnthn> :)

[23:06] <jnthn> I'll probably look for a base image that has an OpenSSL with ALPN support, so folks can get HTTP/2.0 support out of the box with them

[23:06] <El_Che> centos 7.4?

[23:07] <El_Che> centos, debian, ubuntu are popular and sane picks

[23:07] <El_Che> but alpine is sooo small :)

[23:07] <jnthn> I'm most likely to go debian or ubuntu, out of familiarity more than anything :)

[23:07] <El_Che> I run production on centos 7 images though

[23:07] <El_Che> linux team run centos

[23:07] <El_Che> otherwise would have been debian/ubuntu

[23:08] <El_Che> I have a few things in alpine though

[23:08] <El_Che> small apps in prod

[23:08] <El_Che> specially good for go code

[23:08] <El_Che> I wonder how alpine will be for the perl 6 ecosystem

[23:08] <El_Che> some things are tough to compile

[23:09] <jnthn> Yeah, we had to patch MoarVM a bit because of its small stack size

[23:09] <El_Che> yes, I remember that

[23:10] <jnthn> With regards to the thread scheduler, I have the unenviable task of trying to make it sufficiently smart and also sufficiently understandable.

[23:10] <jnthn> Because one can never make it so smart that nobody will ever thing to ask how it makes its choices :)

[23:10] <jnthn> *think

[23:10] <El_Che> bus bus bus

[23:10] <El_Che> :)

[23:11] <jnthn> And it used to be so stupid I could explain, "well, it just predictably does this really awful thing" :)

[23:11] <jnthn> And now it's more like "It tries to do X, and it depends on Y and Z" :)

[23:11] <El_Che> soon you'll need those 3D screens from science fiction movies

[23:11] <jnthn> There are at least env vars one can set to see the data and decisions though

[23:12] <El_Che> "I see dead threads"

[23:38] <Zoffix> So a wild guess: edits to issues aren't re-sent to people who only read them via email, right?

[23:38] <Zoffix> On GitHub

[23:39] <jnthn> Zoffix: Matches what I've observed, yes
