[00:25] <IOninja> .oO( why isn't Range.Seq a thing... )

[02:24] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1026: Add nil return constraints where possible v2

[02:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1026

[05:25] <Geth> ¦ rakudo/nom: e8af8553ea | (Zoffix Znet)++ | src/core/Baggy.pm

[05:25] <Geth> ¦ rakudo/nom: Fix .Bool, .so, .not, .hash, and .elems on Baggy:U

[05:25] <Geth> ¦ rakudo/nom:

[05:25] <Geth> ¦ rakudo/nom: Currently all of these crash, begging for Baggy:D

[05:25] <Geth> ¦ rakudo/nom:

[05:25] <Geth> ¦ rakudo/nom: Use `multi` instead of `only` methods to handle Baggy:D invocants,

[05:25] <Geth> ¦ rakudo/nom: so that Mu:U/Any:U candidates take care of the Baggy:U ones.

[05:25] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e8af8553ea

[05:25] <Geth> ¦ roast: f1c074e9d4 | (Zoffix Znet)++ | S02-types/baggy.t

[05:25] <Geth> ¦ roast: Test .Bool, .so, .not, .hash, and .elems on Baggy:U

[05:25] <Geth> ¦ roast:

[05:25] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/e8af8553ea

[05:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f1c074e9d4

[06:17] <IOninja> I think I spotted the place where test files get lost in t/harness6

[06:17] <IOninja> m: say <a b c> Z <A B C D>

[06:17] <camelia> rakudo-moar e8af85: OUTPUT: «((a A) (b B) (c C))␤»

[06:17] <IOninja> ^ has a construct like that and 'D' is lost; 'D' being a batch of test files

[06:18] <IOninja> (I *think*; it maaay be getting lucky and spliting up very evenly)

[06:42] <IOninja> well, tried a bunch of alterations to the way slow tests are batched in the spectest and they did exactly zero difference.

[06:43] <IOninja> My slowage of stresstest is probably due to all the new tests, not to when slow tests are run.

[06:43] <Geth> ¦ rakudo/nom: cdc71cb16c | (Zoffix Znet)++ | t/harness5

[06:43] <Geth> ¦ rakudo/nom: Fix shebang

[06:43] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cdc71cb16c

[06:46] <IOninja> don't know how I ended up trying to speed up the harness when I started this evening by trying to implement .FatRat coercers :|

[06:46] <IOninja> 2am

[06:46] * IOninja drops to bed

[08:17] <Geth> ¦ rakudo/nom: 18 commits pushed by (Daniel Green)++, lizmat++

[08:17] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/compare/cdc71cb16c...3ff01249f1

[10:43] <Geth> ¦ rakudo/nom: fafe663908 | (Elizabeth Mattijsen)++ | src/core/Junction.pm

[10:43] <Geth> ¦ rakudo/nom: Make Junction creation about 20% faster

[10:43] <Geth> ¦ rakudo/nom:

[10:43] <Geth> ¦ rakudo/nom: Also make sure we use an IterationBuffer internally

[10:43] <Geth> ¦ rakudo/nom:

[10:43] <Geth> ¦ rakudo/nom: I also tried to nqpize the "values.eager.list" combo, but that only

[10:43] <Geth> ¦ rakudo/nom: slowed things down.  Looks like the static optimizer already does a

[10:43] <Geth> ¦ rakudo/nom: good job optimizing that one, and nqpizing misses that code path so

[10:43] <Geth> ¦ rakudo/nom: making things slower.

[10:43] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fafe663908

[10:46] <Geth> ¦ roast: hchienjo++ created pull request #245: Add tests for `flat`.

[10:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/245

[10:47] <lizmat> m: my @a = ^10; my $a = now; for ^10000 { my $b = Junction.new("all",@a) }; say now - $a; $a = now; for ^10000 { Junction.new("all",@a) }; say now - $a  # something really screwy going on when sinking a Junction

[10:47] <camelia> rakudo-moar 3ff012: OUTPUT: «0.0254874␤0.19851161␤»

[10:50] * lizmat commented on hchienjo's PR

[10:50] <lizmat> m: say ("a",<b c>).flat; say <a b c>.flat

[10:50] <camelia> rakudo-moar fafe66: OUTPUT: «(a b c)␤(a b c)␤»

[11:00] <Woodi_> lizmat: testing it on 2017.01 I got: ~ 0.0790697 0.07914240 timings. but 32bit here

[11:52] <timotimo> lizmat: a long time ago i noticed that calling .sink on something that doesn't have it is very costly, maybe that's related

[11:52] <timotimo> i added a method sink to some class that didn't use to have it and some test ran much faster

[11:53] <timotimo> interesting

[11:53] <[Tux]> This is Rakudo version 2017.02-92-g3ff01249f built on MoarVM version 2017.02-9-gc5379702

[11:53] <[Tux]> csv-ip5xs        2.833

[11:53] <[Tux]> test            12.615

[11:53] <[Tux]> test-t           4.800 - 4.827

[11:53] <[Tux]> csv-parser      13.247

[11:53] <timotimo> profiler says the sink case spends 54% of its time in dispatch:<.?> and 12.38% of its time in sink (of Junction)

[11:54] <timotimo> dispatch:<.?> doesn't even show up in the first code examplo

[11:55] <timotimo> i expect it'll get much faster when you turn the .?sink in Junction's sink method into something nqp-ish

[11:57] <jnthn> I'm curious why we'd ever need to .?sink given that Mu.sink exists

[11:57] <jnthn> m: Mu.sink

[11:57] <camelia> rakudo-moar fafe66: ( no output )

[11:57] <timotimo> fair enough

[11:58] <jnthn> So just turning it into .sink is probably a win :)

[11:59] <jnthn> There's some issues with spesh at present whereby it runs out of specializations for Mu.sink because it ain't smart enough to realize there's nothing special about it :)

[12:04] <[Tux]> This is Rakudo version 2017.02-93-gfafe66390 built on MoarVM version 2017.02-9-gc5379702

[12:04] <[Tux]> csv-ip5xs        2.888

[12:04] <[Tux]> test            12.633

[12:04] <[Tux]> test-t           4.788 - 4.848

[12:04] <[Tux]> csv-parser      13.227

[12:04] <[Tux]> neat :)

[12:04] <timotimo> mhm

[12:11] <timotimo> i'm going to spectest the change of throwing out that ?

[12:12] <timotimo> it shouldn't give us trouble, but you know how things are sometimes :D

[12:17] <timotimo> it's happy so i'll push

[12:18] <Geth> ¦ rakudo/nom: b283e52bb2 | (Timo Paulssen)++ | src/core/Junction.pm

[12:18] <Geth> ¦ rakudo/nom: since Mu has a sink method, Junction.sink don't need to .?sink

[12:18] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b283e52bb2

[12:19] <timotimo> it's not blazing fast, but it's far faster than it used to be

[12:24] <timotimo> m: my @a = ^50; my $a = now; for ^100_000 { my $b = Junction.new("all",@a) }; say now - $a; $a  = now; for ^100_000 { Junction.new("all",@a) }; say now - $a

[12:25] <timotimo> (i made the work load 50x bigger)

[12:25] <camelia> rakudo-moar fafe66: OUTPUT: «0.1707645␤8.5596342␤»

[12:25] <timotimo> now let's wait for the rebuild

[12:32] <timotimo> m: say "hi"

[12:32] <camelia> rakudo-moar b283e5: OUTPUT: «hi␤»

[12:32] <timotimo> m: my @a = ^50; my $a = now; for ^100_000 { my $b = Junction.new("all",@a) }; say now - $a; $a  = now; for ^100_000 { Junction.new("all",@a) }; say now - $a

[12:32] <camelia> rakudo-moar b283e5: OUTPUT: «0.1640936␤1.12867647␤»

[12:33] <timotimo> yeah, it's a bit better. still a large impact

[13:46] <Geth> ¦ rakudo/nom: 0be724727f | (Elizabeth Mattijsen)++ | src/core/List.pm

[13:46] <Geth> ¦ rakudo/nom: Use IterationBuffer instead of nap::list where needed

[13:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0be724727f

[13:54] <IOninja> m: 1.Rat: 42; 1.0.Rat: 42

[13:54] <camelia> rakudo-moar 0be724: ( no output )

[13:55] <IOninja> Gonna remove these (dummy params that take an epsillon that's never used), unless someone has an objection.

[13:56] <IOninja> List of types that do and don't take it: https://gist.github.com/zoffixznet/c8c4325e1a0c55ab3ee0bd39fea59c79

[13:56] <IOninja> And will add an epsion to complex, since it uses nums for its components, so there it makes sense.

[16:06] <IOninja> .tell jnthn I forcee some largish changes due to IO grant work. Some things have zero tests at all. Others, only tests in master. I currently plan to write an advance notice and publish it today-ish. The changes will land in 2017.04 release and will include a detailed info on what changed. If that's a bad plan, let me know.

[16:06] <yoleaux2> IOninja: I'll pass your message to jnthn.

[16:13] <IOninja> .tell jnthn Some examples: is `link` taking args in reverse (and being documented as such), despite using them in right order in error message. So I forcee this being changed to follow the same order of args as `ln` Linux command, which follows the "sub($existing-thing, $new-thing)" order that `move`, `rename` and ilk follow. The other change I'll propose is tossing Seek* enum and passing position to

[16:13] <yoleaux2> IOninja: I'll pass your message to jnthn.

[16:13] <IOninja> .seek() as named args. The `link()` has no tests at all. The `seek()` only has the tests I added in January, 2017.

[16:13] <IOninja> .tell .seek() as named args. The `link()` has no tests at all. The `seek()` only has the tests I added in January, 2017

[16:13] <yoleaux2> IOninja: What kind of a name is ".seek()"?!

[16:13] <IOninja> .tell jnthn .seek() as named args. The `link()` has no tests at all. The `seek()` only has the tests I added in January, 2017

[16:13] <yoleaux2> IOninja: I'll pass your message to jnthn.

[16:42] <nine_> Slowly a plan forms in my mind for how to fix indirect name lookup of symbols loaded via "require".

[16:42] <nine_> It's nice to be able to think clearly again :) cold--

[16:43] <IOninja> \o/

[16:45] <MasterDuke> nine_: did you happen to see the discussion a little while ago in #moarvm about t/spec/S11-modules/nested.t?

[16:45] <MasterDuke> there are very occasional flaps, but haven't been able to repro

[16:48] <nine_> MasterDuke: no, have missed quite a bit :/

[16:53] <MasterDuke> nine_: do you have any idea what the fix should be that jnthn mentions here http://irclog.perlgeek.de/perl6-dev/2016-09-08#i_13173728 ?

[17:02] <nine_> MasterDuke: yes, I think, I see it.

[17:02] <nine_> MasterDuke: the check is hard coded to 64 bits, but in the signed case we actually only have 63 bits available.

[17:14] <MasterDuke> nine_: thanks, will trying playing around with that check

[17:15] <nine_> The fix seems trivial, but it fails one of nqp's tests.

[17:15] <nine_> https://gist.github.com/niner/da7d13490b3548b5176fa2192eaeee8b

[17:15] <nine_> t/serialization/01-basic.t ............. 1/1502 Cannot unbox 64 bit wide bigint into native integer

[17:15] <nine_> at t/serialization/01-basic.t:671  (<ephemeral file>:<mainline>)

[17:20] <MasterDuke> does it do anything to t/spec/S02-types/int-uint.t?

[17:21] <nine_> t/spec/S02-types/int-uint.t .. 1/75 Cannot unbox 64 bit wide bigint into native integer in block <unit> at EVAL_69 line 1 in block <unit> at t/spec/S02-types/int-uint.t line 33

[17:26] <MasterDuke> and i still see the same behavior with "a" x <large values>

[18:04] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1027: Change atpos of @!named_names to atpos_s

[18:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1027

[18:41] <nine_> While I have a somewhat reasonable plan for getting the required symbols into MY::, I don't actually understand why require ::($foo) is broken. REQUIRE_IMPORT merges the symbols into GLOBAL at runtime. And that's the same GLOBAL as the caller sees.

[18:41] <nine_> It should actually still just work.

[18:44] <nine_> Aaah...as soon as I wrote that it became clear. It's only an issue with nested name spaces. Top level symbols work just fine, but if the caller has the top part of the name space as a lexical symbol, it won't see the global one into which we imported.

[18:47] <Geth> ¦ rakudo/nom: 74573d0684 | (Daniel Green)++ | src/core/Signature.pm

[18:47] <Geth> ¦ rakudo/nom: Change atpos of @!named_names to atpos_s

[18:47] <Geth> ¦ rakudo/nom:

[18:47] <Geth> ¦ rakudo/nom: These were missed in the recent conversion of @!named_names to an

[18:47] <Geth> ¦ rakudo/nom: nqp::list_s.

[18:47] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/74573d0684

[18:47] <Geth> ¦ rakudo/nom: 356feee99b | (Zoffix Znet)++ | src/core/Signature.pm

[18:47] <Geth> ¦ rakudo/nom: Merge pull request #1027 from MasterDuke17/fix_some_atpos_of_named_names_in_Signature

[18:47] <Geth> ¦ rakudo/nom:

[18:47] <Geth> ¦ rakudo/nom: Change atpos of @!named_names to atpos_s

[18:47] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/356feee99b

[18:47] <nine_> To stay with the lexical_module_load spirit, I'll have to make those require'd symbols lexical as well. But that requires me to change indirect name lookup ::() to look into the lexical scope, too.

[18:48] <nine_> Otherwise require ::($foo); cannot work, as that compiles to something like require $foo; ::($foo);

[18:48] <mst> surely indirect name lookup *should* look into the lexical scope?

[19:11] <Geth> ¦ roast: dcc20bbc5a | (David Warring)++ | S14-roles/mixin.t

[19:11] <Geth> ¦ roast: add role mixin multi-dispatch sanity tests

[19:11] <Geth> ¦ roast:

[19:11] <Geth> ¦ roast: See https://irclog.perlgeek.de/perl6/2017-02-25#i_14165034

[19:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dcc20bbc5a

[19:12] <Geth> ¦ roast: f6f8c08377 | (Zoffix Znet)++ | S14-roles/mixin.t

[19:12] <Geth> ¦ roast: Scope test role and class to test's block

[19:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f6f8c08377

[19:27] <lizmat> nine: looking in the lexical scope is something I expect ?

[19:28] <lizmat> m: my $a = 42; say ::(q/$a/)   # seems it already dpoes ?

[19:28] <camelia> rakudo-moar 356fee: OUTPUT: «42␤»

[19:28] <lizmat> *does

[19:51] <Geth> ¦ rakudo/nom: a4af702d65 | (Zoffix Znet)++ | 5 files

[19:51] <Geth> ¦ rakudo/nom: Fix/Improve .Rat and .FatRat coercers

[19:51] <Geth> ¦ rakudo/nom:

[19:51] <Geth> ¦ rakudo/nom: - Make Complex coercers take $epsilon arg since their components are Nums

[19:51] <Geth> ¦ rakudo/nom: - Fix Instant.Rat routing the conversion through Num;

[19:51] <Geth> ¦ rakudo/nom:     TAI is already a Rat, so just return it

[19:51] <Geth> ¦ rakudo/nom: - Implement Cool.FatRat

[19:51] <Geth> ¦ rakudo/nom: - Implement Numeric.FatRat that does .Rat.FatRat; any type that can provide

[19:51] <Geth> ¦ rakudo/nom: <…commit message has 12 more lines…>

[19:51] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a4af702d65

[19:52] <nine_> lizmat: ooooh...that makes things easy :)

[19:56] <nine_> Ah, of course, that's because PseudoStash's $!storage is the caller's lexpad.

[19:58] <Geth> ¦ roast: be6f6cd86f | (Zoffix Znet)++ | S32-num/rat.t

[19:58] <Geth> ¦ roast: Test .Rat/.FatRat coercers

[19:58] <Geth> ¦ roast:

[19:58] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/a4af702d65

[19:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/be6f6cd86f

[20:00] <Geth> ¦ roast: 6cb09469af | (Zoffix Znet)++ | S32-num/rat.t

[20:00] <Geth> ¦ roast: OCD

[20:00] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6cb09469af

[20:16] <Geth> ¦ rakudo/nom: 79d5670863 | (Elizabeth Mattijsen)++ | 4 files

[20:16] <Geth> ¦ rakudo/nom: Some more nqp::list -> IterationBuffer migration

[20:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/79d5670863

[20:28] <Geth> ¦ rakudo/nom: 81fcd1bfe3 | (Elizabeth Mattijsen)++ | 4 files

[20:28] <Geth> ¦ rakudo/nom: Give Mu its own .iterator

[20:28] <Geth> ¦ rakudo/nom:

[20:28] <Geth> ¦ rakudo/nom: Should make "Mu Z 42" work

[20:28] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/81fcd1bfe3

[20:35] <lizmat> m: dd Mu.list   # should this be fixed ?

[20:35] <camelia> rakudo-moar 79d567: OUTPUT: «No such method 'list' for invocant of type 'Mu'␤  in block <unit> at <tmp> line 1␤␤»

[20:39] <IOninja> IMO not, otherwise we'd be drifting all the Any methods into Mu

[20:39] <IOninja> What sort of Mu stuff do we have?

[20:39] <IOninja> other than Junctions

[20:39] <IOninja> I mean Mu, but not Any.

[20:39] <timotimo> well, everything from nqp is Mu, but not Any

[20:40] <IOninja> Like what?

[20:40] <IOninja> I mean from user's perspective.

[20:40] <lizmat> IOninja: so maybe I should revert https://github.com/rakudo/rakudo/commit/81fcd1bfe3 ?

[20:41] <IOninja> lizmat: ¯\_(ツ)_/¯ I'm no expert

[20:41] <IOninja> m: Mu Z 42

[20:41] <camelia> rakudo-moar 79d567: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "Z" in expression "Mu Z 42" in sink context (line 1)␤No such method 'iterator' for invocant of type 'Mu'␤  in block <unit> at <tmp> line 1␤␤»

[20:42] <IOninja> Are there real-world cases where this situation would occur; that a Mu would be involved

[20:44] <lizmat> not sure... but the error is LTA in any case, because apparently Z takes Mu, but then doesn't know what to do with it

[20:44] <lizmat> otherwise  :-)

[20:44] <IOninja> :)

[20:46] <IOninja> m: say elems gather for Any.^methods(:local)».name { Mu.can: $_ or .take }

[20:46] <camelia> rakudo-moar 79d567: OUTPUT: «87␤»

[22:12] <Geth> ¦ rakudo/nom: 313e7b28c9 | (Elizabeth Mattijsen)++ | src/core/Parameter.pm

[22:12] <Geth> ¦ rakudo/nom: Streamline Parameter.named_name|type_captures

[22:12] <Geth> ¦ rakudo/nom:

[22:12] <Geth> ¦ rakudo/nom: Also make sure they have an IterationBuffer inside of their List

[22:12] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/313e7b28c9

[22:22] <Geth> ¦ rakudo/nom: e723e001da | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[22:22] <Geth> ¦ rakudo/nom: Make sure R:It.ShapeBranch.dims returns proper List

[22:22] <Geth> ¦ rakudo/nom:

[22:22] <Geth> ¦ rakudo/nom: With an IterationBuffer for its $!reified

[22:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e723e001da

[22:23] <Geth> ¦ rakudo/nom: 5843ee6b08 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[22:23] <Geth> ¦ rakudo/nom: Make sure R:It.RoundRobinIterables returns proper List

[22:23] <Geth> ¦ rakudo/nom:

[22:23] <Geth> ¦ rakudo/nom: With an IterationBuffer for its $!reified

[22:23] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5843ee6b08

[22:36] <Geth> ¦ rakudo/nom: 7c279c383e | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[22:36] <Geth> ¦ rakudo/nom: Make sure R:It.ShapeIndex returns a proper List

[22:36] <Geth> ¦ rakudo/nom:

[22:36] <Geth> ¦ rakudo/nom: With an IterationBuffer for its $!reified

[22:36] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7c279c383e

[22:36] <Geth> ¦ rakudo/nom: 318f8eec4e | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[22:36] <Geth> ¦ rakudo/nom: Make sure R:It.ZipIterables returns proper List

[22:36] <Geth> ¦ rakudo/nom:

[22:36] <Geth> ¦ rakudo/nom: With an IterationBuffer for its $!reified

[22:36] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/318f8eec4e

[22:37] <lizmat> and that concludes my hacking for today

[22:37] <lizmat> good night, #perl6-dev!

[22:37] <IOninja> night
