[02:56] <AlexDaniel> samcv: great!

[03:14] <AlexDaniel> dogbert17: here?

[05:30] <AlexDaniel> hey what a cool fix I found to the annoying segv in whateverable

[05:30] <AlexDaniel> you just run it under valgrind and the segfault goes away!

[05:30] <AlexDaniel> awesome! :'(

[07:17] <yoleaux> AlexDaniel`: RT/GH weekly

[07:36] <Geth> ¦ roast/run-with-prove: 175e3af168 | (Nick Logan)++ | 222 files

[07:36] <Geth> ¦ roast/run-with-prove: Allow testing from rakudo or roast root

[07:36] <Geth> ¦ roast/run-with-prove:

[07:36] <Geth> ¦ roast/run-with-prove: While it makes sense to expect the roast to run from the rakudo

[07:36] <Geth> ¦ roast/run-with-prove: directory, it is generally accepted that tests should be invoked

[07:36] <Geth> ¦ roast/run-with-prove: from inside of the repo to be tested.

[07:36] <Geth> ¦ roast/run-with-prove: review: https://github.com/perl6/roast/commit/175e3af168

[07:36] <Geth> ¦ roast/run-with-prove: 1b0a473aa9 | (Nick Logan)++ | 2 files

[07:36] <Geth> ¦ roast/run-with-prove: Spawn procs in the same location

[07:36] <Geth> ¦ roast/run-with-prove:

[07:36] <Geth> ¦ roast/run-with-prove: Adds :%proc-args to Test::Util, which passes through its

[07:36] <Geth> ¦ roast/run-with-prove: options to shell ala `shell( ..., |%proc-args )`. This allows

[07:36] <Geth> ¦ roast/run-with-prove: commands that get spawned to know any relative paths used will

[07:36] <Geth> ¦ roast/run-with-prove: point to the expected location (regardless if run from rakudo/

[07:36] <Geth> ¦ roast/run-with-prove: or roast/).

[07:36] <Geth> ¦ roast/run-with-prove: review: https://github.com/perl6/roast/commit/1b0a473aa9

[07:36] <Geth> ¦ roast/run-with-prove: 9bfb1201b3 | (Nick Logan)++ | 23 files

[07:36] <Geth> ¦ roast/run-with-prove: Adjust relative lib / file paths to be more correct

[07:36] <Geth> ¦ roast/run-with-prove:

[07:36] <Geth> ¦ roast/run-with-prove: This removes more assumptions about the directory that the tests

[07:36] <Geth> ¦ roast/run-with-prove: have been launched from, allowing them to pass when not cloned

[07:36] <Geth> ¦ roast/run-with-prove: into rakudo/t/spec.

[07:36] <Geth> ¦ roast/run-with-prove: review: https://github.com/perl6/roast/commit/9bfb1201b3

[09:21] <ufobat_> .tell Zoffix I've updated the PR https://github.com/rakudo/rakudo/pull/1249 with your suggestions

[09:21] <yoleaux> ufobat_: I'll pass your message to Zoffix.

[10:37] <ufobat> what is ::CORE.WHO, or why does this actually not work https://github.com/rakudo/rakudo/blob/master/src/core/Exception.pm#L2881

[10:37] <ufobat> m: require IO::XXX

[10:37] <camelia> rakudo-moar 85105077a: OUTPUT: «IO::XXX is a builtin type, not an external module␤  in block <unit> at <tmp> line 1␤␤»

[10:38] <ufobat> in the 2nd iteration, for XXX, $ns{ 'XXX' }:exists seems to be True

[10:50] <ufobat> m: my $ns := ::CORE.WHO; say $ns<IO>.WHO<XXX>:exists'

[10:50] <camelia> rakudo-moar 85105077a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3 ::CORE.WHO; say $ns<IO>.WHO<XXX>:exists7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤…»

[10:51] <ufobat> m: my $ns := ::CORE.WHO; say $ns<IO>.WHO<XXX>:exists'

[10:51] <camelia> rakudo-moar 85105077a: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3 ::CORE.WHO; say $ns<IO>.WHO<XXX>:exists7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        postfix␤        statement end␤…»

[10:51] <ufobat> m: my $ns := ::CORE.WHO; say $ns<IO>.WHO<XXX>:exists

[10:51] <camelia> rakudo-moar 85105077a: OUTPUT: «False␤»

[11:58] <[Tux]> Due to (very) high system load today, I don't think it is wise to do timing. System load is for the kids and is required

[13:08] <tbrowder> after the release i hope someone can please evaluate my PR #1240

[14:17] <AlexDaniel> lizmat: alright, your answer makes sense after looking at this: https://github.com/torvalds/linux/blob/c9b012e5f4a1d01dfa8abc6318211a67ba7d5db2/kernel/sys.c#L1731

[14:17] <AlexDaniel> although the comment there is still confusing

[14:18] <AlexDaniel> so everything is in KiB, alright

[14:23] <lizmat> aha!  :-)

[14:28] <dogbert17> AlexDaniel: have you by any chance managed to golf down your whateverable SEGV ?

[14:28] <AlexDaniel> dogbert17: it goes away once I reduce the amount of code

[14:28] <AlexDaniel> dogbert17: and if I run it under valgrind there's no SEGV

[14:29] <AlexDaniel> dogbert17: we had this issue for more than one release so that's not a blocker really as far as I'm concerned, but it would be great to fix it

[14:29] <AlexDaniel> because otherwise I can't really use whateverable as a canary

[14:29] <MasterDuke> AlexDaniel: what about running it under gdb? does it go away there?

[14:30] <AlexDaniel> oh, hmm

[14:30] <AlexDaniel> I can try

[14:30] <AlexDaniel> dogbert17: it should be related to Proc::Async in some way, I think

[14:31] <AlexDaniel> more rambling here: https://github.com/perl6/whateverable/issues/24#issuecomment-345493646

[14:31] <dogbert17> +1 on MasterDukes suggestion

[14:39] <AlexDaniel> dogbert17: not sure if my gdb-fu is strong enough, wanna try yourself?

[14:41] <dogbert17> what do I have to install?

[14:42] <AlexDaniel> dogbert17: you'll actually have to do that on the server where the bots are running… give me your ssh pub key and we can move to #whateverable channel to discuss the rest

[14:42] <dogbert17> haha, here I come up as a NoOb, don't have an ssh pub key :) perhaps better to give the honors to MasterDuke

[14:44] <AlexDaniel> dogbert17: well, maybe it's a good idea to create one? :)

[14:45] <AlexDaniel> it's not just for ssh-ing to servers, you can use it to commit to github too

[14:45] <AlexDaniel> to push*

[14:45] <dogbert17> hmm, perhaps I should look into that

[14:45] <MasterDuke> i probably only have a couple minutes now, but will have more time this afternoon

[14:46] <AlexDaniel> dogbert17: I'd recommend ed25519 :)

[14:47] <AlexDaniel> dogbert17: then, once you have the key generated, the easiest way is probably to add it to your github account, so that others can see it here: https://github.com/AlexDaniel.keys

[14:47] <AlexDaniel> well, here of course: https://gist.github.com/dogbert17.keys :)

[14:49] <AlexDaniel> I'm really hoping that one day we'll get stable enough so that I can declare any rakudo-related issue in whateverable a blocker… :)

[14:51] <dogbert17> what about the other error, i.e. the Gumbo one, has that been solved?

[14:51] <AlexDaniel> no

[14:51] <dogbert17> I tried to reproduce it a couple of weeks ago but my 32 bit system seems immune to the problem

[14:52] <AlexDaniel> I'm currently working on a project that does some web scraping, so I simply built it in a way that expects MoarVM to panic every few runs…

[14:52] <dogbert17> :(

[14:52] <AlexDaniel> yes, 32-bit systems are immune to that issue

[14:52] <dogbert17> and it's not jit related then ?

[14:52] <AlexDaniel> no, I don't think so

[14:53] <AlexDaniel> it is reproducible with MVM_JIT_DISABLE=1 for sure

[14:55] <dogbert17> interesting

[14:56] <AlexDaniel> (for anyone else wondering, the discussion is about RT#131003)

[14:57] <synopsebot> RT#131003 [open]: https://rt.perl.org/Ticket/Display.html?id=131003 [SEVERE][SEGV] Heap corruption when using Gumbo

[14:57] <dogbert17> ok, I'll bite and setup a 64 bit vm temporarily

[14:58] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/40a953f5d9f5c661d8cf9b043643002d348a2000

[14:58] <AlexDaniel> hey Geth ?

[14:58] <dogbert17> then I can try out Linux Mint 18.3 (beta) at the same time

[14:59] <AlexDaniel> :)

[15:49] <lizmat> T-Dose shutting down&

[15:51] <dogbert17> .oO(MoarVM panic: Heap corruption detected: pointer 0x7f8b7470c668 to past fromspace)

[15:56] <AlexDaniel> .tell lizmat https://gist.github.com/AlexDaniel/bf7d91648417f95bf8a87e604981b70e

[15:56] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[16:13] <dogbert17> AlexDaniel, timotimo, jnthn: https://gist.github.com/dogbert17/2a4be541952da0cbe2620a72c321dd65

[17:03] <AlexDaniel> who knows more about https://github.com/rakudo/rakudo/issues/1257 ?

[17:03] <AlexDaniel> timotimo: ?

[17:08] <timotimo> do we forget to byteswap something somewhere?

[17:14] <timotimo> did previous versions build fine on the big endian systems?

[17:14] <timotimo> hm, looks like

[17:16] <AlexDaniel> yeah, 2017.06 was ok at least

[18:10] <timotimo> that's a really long span :\

[18:34] <AlexDaniel> timotimo: so what do you think we can do about it?

[18:34] <AlexDaniel> if I had a system like that at hand I'd try bisecting, but I don't

[18:35] <timotimo> should be able to use qemu to run a different architecture on your machine

[18:36] <timotimo> it's probably dreadfully slow though

[19:29] <AlexDaniel> it is

[19:30] * DrForr pushes a first cut at Format::Lisp to the ecosystem.

[19:43] <timotimo> DrForr: into the ecosystem rather than onto cpan?

[19:44] <moritz> we should really update the docs to advise uploading to CPAN

[19:48] <timotimo> we can also put it into the pr text template, right?

[19:48] <moritz> but only after we update the docs, IMHO

[19:49] * moritz now very glad that he didn't put instructions on how upload modules into his book, but rather linked to the official docs

[19:51] <timotimo> of course

[19:51] <DrForr> Yes, right now I'm on the ass end of the Intartubes and don't have the patience to both babysit the laptop and straighten out CPAN redentials.

[20:21] <Geth> ¦ roast/run-with-prove: 23846a42c6 | (Nick Logan)++ | 213 files

[20:21] <Geth> ¦ roast/run-with-prove: Find local lib in a `FindBin`-esq manner

[20:21] <Geth> ¦ roast/run-with-prove:

[20:21] <Geth> ¦ roast/run-with-prove: * Use $?FILE to create absolute paths based on the layout of the

[20:21] <Geth> ¦ roast/run-with-prove: spectest repo.

[20:21] <Geth> ¦ roast/run-with-prove: * Some cases, such as when `run` is used and the cwd can be

[20:21] <Geth> ¦ roast/run-with-prove: controlled, still use a relative path (to keep some testing on it)

[20:21] <Geth> ¦ roast/run-with-prove: review: https://github.com/perl6/roast/commit/23846a42c6

[20:21] <Geth> ¦ roast/run-with-prove: 1427f9c76e | (Nick Logan)++ | 24 files

[20:21] <Geth> ¦ roast/run-with-prove: Absolutify references to 't/spec'

[20:21] <Geth> ¦ roast/run-with-prove:

[20:21] <Geth> ¦ roast/run-with-prove: The contents of 't/spec/foo'.IO.slurp depend on the users cwd but

[20:21] <Geth> ¦ roast/run-with-prove: can be rewritten with $?FILE to work from any cwd.

[20:22] <Geth> ¦ roast/run-with-prove: review: https://github.com/perl6/roast/commit/1427f9c76e

[21:19] <b2gills> m: my atomicint $a; my $s = supply { whenever Nil { $a⚛++; say 'Promise'; done } }; $s.act: *.say; $s.wait xx 5; say $a

[21:19] <camelia> rakudo-moar 85105077a: OUTPUT: «Promise␤Promise␤Promise␤Promise␤Promise␤Promise␤6␤»

[21:21] <b2gills> It seems a little weird that `.wait` on a `supply` causes `whenever` to be called even after it is done

[21:33] <AlexDaniel> oh gosh… this is probably too slow to be useful

[21:34] <AlexDaniel> I have troubles starting the system, let alone trying to build rakudo…

[21:59] <AlexDaniel> oh…

[22:01] <jnthn> b2gills: You are tapping the supply twice: once in .act, once again in .wait

[22:02] <jnthn> Uh, actually 6 times :)

[22:10] <timotimo> b2gills: did you want to .share?

[22:14] <MasterDuke> AlexDaniel: qemu is usually pretty fast for me, but you're emulating a big-endian architecture, right?

[22:14] <timotimo> yeah, qemu on x86 for x86 is likely blazing fast

[22:14] <timotimo> mips on x86, not so much

[22:14] <AlexDaniel> MasterDuke: actually I just noticed that there's some other problem… trying something right now

[22:15] <AlexDaniel> MasterDuke: are you up for some gdb-ing with whateverable? :)

[22:20] <MasterDuke> might have a couple minutes

[22:22] <MasterDuke> AlexDaniel: how do you have things set up?

[22:26] <AlexDaniel> → #whateverable
