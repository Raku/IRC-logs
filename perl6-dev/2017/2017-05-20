[00:14] <Zoffix> Finally have some useful data. Comparing 100-top-modules install on 2017.04.3 rakudo and nom HEAD, same amount fails (18 on head, 17 + 1 hang on 04): https://gist.github.com/zoffixznet/6e8277b4cd64ab64750bebf1a540f735

[00:14] <Zoffix> BUT, a lot of *different* modules fail :/

[00:14] <Zoffix> # Failed test 'Add to index one page'

[00:14] <Zoffix> # at t/storage/index.t line 28

[00:14] <Zoffix> # expected: '["Foo"]'

[00:14] <Zoffix> #      got: '$["Foo"]'

[00:14] <Zoffix> failure in November for example :/

[00:15] <Zoffix> Actually 1-fewer failed on HEAD, as I have a fix for Digest

[00:16] <Zoffix> Basically 4 new module failure: Bailador  GraphQL  Perl6::Maven  WebSocket

[00:16] <Zoffix> Might be just my testing setup. Gonna try to reinstall and stuff

[00:21] <ugexe> GraphQL is because of Bailador

[00:21] <ugexe> i assume

[00:25] <Zoffix> oh and Perl6::Maven too

[00:26] <Zoffix> oh and WebSocket depends on Digest, so should be good too after I push my fix

[00:26] <Zoffix> So just Bailador basically :)

[00:26] <Zoffix> Ohh.. wait

[00:26] <Zoffix> Yes, Bailador deps on Digest \o/ so no regressing modules \o/

[00:31] <ugexe> now start harassing p6c testers and cpan testers with the reports >:)

[00:32] <Zoffix> :)

[00:34] <Geth> ¦ rakudo/nom: 2f22b701d4 | (Zoffix Znet)++ | src/core/Int.pm

[00:34] <Geth> ¦ rakudo/nom: Add kludge to +>, <+ ops to prevent inlining bug

[00:34] <Geth> ¦ rakudo/nom:

[00:34] <Geth> ¦ rakudo/nom: Works around RT#131306: https://rt.perl.org/Ticket/Display.html?id=131306

[00:34] <Geth> ¦ rakudo/nom:

[00:34] <Geth> ¦ rakudo/nom: Fixes https://github.com/grondilu/libdigest-perl6/issues/18

[00:34] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2f22b701d4

[00:34] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131306

[00:35] <Geth> ¦ roast: c1d62112f3 | (Zoffix Znet)++ | S03-operators/bit.t

[00:35] <Geth> ¦ roast: Cover spesh bug with bit shift ops

[00:35] <Geth> ¦ roast:

[00:35] <Geth> ¦ roast: RT#131306: https://rt.perl.org/Ticket/Display.html?id=131306

[00:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c1d62112f3

[00:35] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131306

[00:41] <Zoffix> .tell jnthn for that shift-op-inlining bug ( RT#131306 ), instead of reverting previous fixes and re-introducing old bugs, I managed to work around it with the nqp::ctx thing in https://github.com/rakudo/rakudo/commit/2f22b701d4

[00:41] <yoleaux> Zoffix: I'll pass your message to jnthn.

[00:41] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131306

[00:55] <Zoffix> Windows spectest failures after my fix to make-temp-file: https://gist.github.com/zoffixznet/9b1285309f8abf73267862ecbe379469

[01:27] <Zoffix> ZOFVM: Files=1242, Tests=135586, 113 wallclock secs (21.65 usr  3.13 sys + 2328.31 cusr 165.67 csys = 2518.76 CPU)

[01:29] <Geth> ¦ rakudo/nom: 4ae7c6976a | (Zoffix Znet)++ | src/core/Process.pm

[01:29] <Geth> ¦ rakudo/nom: Fix unwanted warnings on Windows with $*HOME

[01:29] <Geth> ¦ rakudo/nom:

[01:29] <Geth> ¦ rakudo/nom: When HOME and (HOMEDRIVE or HOMEPATH) are unset

[01:29] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4ae7c6976a

[01:29] <Zoffix> Well, that fixes one failure...

[01:29] <Zoffix> ...dozens more to go :(

[01:49] <Zoffix> neither CTRL+Z nor CTRL+D exits REPL and it also appears to be one of the failures in t\spec\S16-filehandles\argfiles.t because closing Proc.in crashes the child process

[01:49] <Zoffix> ^ I mean on Windows

[01:50] * Zoffix calls it a day

[01:56] <Geth> ¦ roast: 6bad631d37 | (Zoffix Znet)++ | packages/Test/Util.pm

[01:56] <Geth> ¦ roast: Re-try deleting working files in is_run

[01:56] <Geth> ¦ roast:

[01:56] <Geth> ¦ roast: It appears on Windows, when the `is_run` code launches it's own Proc

[01:56] <Geth> ¦ roast: that does STDIN things, there's some delay before `.in` file can

[01:56] <Geth> ¦ roast: be deleted by `is_run` so if we detect failurage to delete a working

[01:56] <Geth> ¦ roast: file, before dying, sleep a bit and retry and only if we fail then,

[01:56] <Geth> ¦ roast: then die.

[01:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6bad631d37

[02:25] <AlexDaniel> bisectable6… why?

[03:42] <ugexe> m: DEPRECATED("foo");

[03:42] <camelia> rakudo-moar 4ae7c6: OUTPUT: «Indexing requires an instance, tried to do: $bt[ (Any) ]␤  in block <unit> at <tmp> line 1␤␤»

[03:43] <ugexe> self documenting at least

[07:19] <[Tux]> This is Rakudo version 2017.04.3-295-g4ae7c6976 built on MoarVM version 2017.04-68-g5f233249

[07:19] <[Tux]> csv-ip5xs        2.545

[07:19] <[Tux]> test            12.764

[07:19] <[Tux]> test-t           4.225 - 4.246

[07:19] <[Tux]> csv-parser      13.169

[07:20] <lizmat> Files=1192, Tests=58610, 205 wallclock secs (12.36 usr  4.74 sys + 1218.35 cusr 114.14 csys = 1349.59 CPU)

[07:52] <lizmat> m: dd <a b b c c c>.Bag.pick(-3) # more strangeness  :-(

[07:52] <camelia> rakudo-moar 4ae7c6: OUTPUT: «("c", "c", "b", "c", "a", "b").Seq␤»

[07:52] <lizmat> m: dd <a b b c c c>.Bag.roll(-3) # and infiniloops

[07:52] <camelia> rakudo-moar 4ae7c6: OUTPUT: «(timeout)»

[08:00] <Geth> ¦ rakudo/nom: bb64d85f0b | (Elizabeth Mattijsen)++ | src/core/Baggy.pm

[08:00] <Geth> ¦ rakudo/nom: Baggy!ROLLPICKGRABN now returns Iterator

[08:00] <Geth> ¦ rakudo/nom:

[08:00] <Geth> ¦ rakudo/nom: For easier integration with other Iterator returning logic

[08:00] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bb64d85f0b

[08:21] <Geth> ¦ rakudo/nom: 40e4e13200 | (Elizabeth Mattijsen)++ | src/core/Baggy.pm

[08:21] <Geth> ¦ rakudo/nom: Fix handling of <1 and NaN in Baggy.pick

[08:21] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/40e4e13200

[08:39] <Geth> ¦ rakudo/nom: e5d2c6f67a | (Elizabeth Mattijsen)++ | src/core/Baggy.pm

[08:39] <Geth> ¦ rakudo/nom: Fix handling of <1 and NaN in Baggy.roll

[08:39] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e5d2c6f67a

[09:02] <Geth> ¦ rakudo/nom: 44c89ed959 | (Elizabeth Mattijsen)++ | src/core/Baggy.pm

[09:02] <Geth> ¦ rakudo/nom: Fix handling of Baggy.pick(N) on empty Baggys

[09:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/44c89ed959

[09:52] <Geth> ¦ rakudo/nom: 4b1b349424 | (Elizabeth Mattijsen)++ | src/core/Rakudo/QuantHash.pm

[09:52] <Geth> ¦ rakudo/nom: Introducing R:Q.TODO

[09:52] <Geth> ¦ rakudo/nom:

[09:52] <Geth> ¦ rakudo/nom: Sanity check on number of items to fetch, throws on NaN

[09:52] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4b1b349424

[09:52] <Geth> ¦ rakudo/nom: 22ba231738 | (Elizabeth Mattijsen)++ | src/core/Baggy.pm

[09:52] <Geth> ¦ rakudo/nom: Fix handling of Baggy.pick(NaN) on empty Baggys

[09:52] <Geth> ¦ rakudo/nom:

[09:52] <Geth> ¦ rakudo/nom: Before, emptiness was checked before NaNness

[09:52] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/22ba231738

[10:25] <Geth> ¦ rakudo/nom: 23b62eb89c | (Elizabeth Mattijsen)++ | src/core/BagHash.pm

[10:25] <Geth> ¦ rakudo/nom: Simplify $count test on BagHash.grab(N)

[10:25] <Geth> ¦ rakudo/nom:

[10:25] <Geth> ¦ rakudo/nom: Now that we have R:Q.TODO

[10:25] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/23b62eb89c

[10:25] <Geth> ¦ rakudo/nom: abc0509c5c | (Elizabeth Mattijsen)++ | src/core/Rakudo/QuantHash.pm

[10:25] <Geth> ¦ rakudo/nom: Fix various issues with Baggy.(pick|grab)pairs

[10:25] <Geth> ¦ rakudo/nom:

[10:25] <Geth> ¦ rakudo/nom: - handle empty Baggy handling (a Mu was missing)

[10:25] <Geth> ¦ rakudo/nom: - handle NaN consistently with the new R:Q.TODO

[10:25] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/abc0509c5c

[10:44] <Geth> ¦ rakudo/nom: 316399cf7b | (Elizabeth Mattijsen)++ | 2 files

[10:44] <Geth> ¦ rakudo/nom: Remove references to pand  :-(

[10:44] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/316399cf7b

[10:44] <lizmat> panda rather  :-(

[10:58] <timotimo> that's pandaring

[10:58] <Zoffix> NeuralAnomaly: status

[10:58] <NeuralAnomaly> Zoffix, [✘] Next release is today. Since last release, there are 39 new still-open tickets (2 unreviewed and 0 blockers) and 14 unreviewed commits. See http://perl6.fail/release/stats for details

[10:59] <lizmat> Zoffix: about to fix the SetHash.values c.s. issues

[11:01] <Zoffix> .tell AlexDaniel BTW, latest and greatest Rakudo fixed a bug that was affecting Digest, so you can use it now for your sha256 thing

[11:01] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[11:03] <Zoffix> Ah, zostay's right.. hyper does stange things

[11:03] <jnthn> .oO( No, *this* is pandaring... http://bit.ly/2qByjCj )

[11:03] <yoleaux> 00:41Z <Zoffix> jnthn: for that shift-op-inlining bug ( RT#131306 ), instead of reverting previous fixes and re-introducing old bugs, I managed to work around it with the nqp::ctx thing in https://github.com/rakudo/rakudo/commit/2f22b701d4

[11:03] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131306

[11:03] <Zoffix> m: my Pair @p = a => 1, b => 2; dd  @p».key

[11:03] <camelia> rakudo-moar 316399: OUTPUT: «Array[Pair].new("a", "b")␤»

[11:03] <jnthn> Zoffix: Nice cheat :-)

[11:03] <Zoffix> :)

[11:06] <timotimo> yowch

[11:06] <Zoffix> Filed as https://rt.perl.org/Ticket/Display.html?id=131332

[11:08] <lizmat> Zoffix: re https://github.com/rakudo/rakudo/commit/2f22b701d4,. wouldn't a simple nqp::ctx have been enough ?

[11:09] <lizmat> without need to assign it ?

[11:09] <lizmat> if there's a need to assign it, maybe binding would be better (save on a Scalar container creation?)

[11:13] <jnthn> An nqp::ctx() without its result used will be optimized out pre-inlining, and so not block inlining.

[11:13] <jnthn> (The optimizer knows that an unused nqp::ctx is a no-op)

[11:14] <lizmat> jnthn: binding vs assignment ?

[11:14] <jnthn> I don't know about assignment/binding. But we do lower lexicals that are binded to locals in some cse.

[11:14] <jnthn> We don't do that with assignent yet

[11:14] <lizmat> so you're saying binding may or may not block inlining

[11:14] <jnthn> Spesh can't analyze things so well when there's a container there

[11:14] <lizmat> ok, fair enough

[11:14] <jnthn> But binding of a lower local it can see the bound value isn't used and rip out the whole chain, potentially

[11:15] <jnthn> (Like, there's code there that can do that, and probably will.)

[11:15] <jnthn> We'll fix it relatively soon and then the workaround can go

[11:15] <lizmat> perhaps we need something like a "nqp::dontoptimize"  ?

[11:16] <jnthn> Or maybe a noinline trait that sets a routine flag

[11:16] <lizmat> my worry is that some optimization may get smart enough to see $ignore isn't being used and rip it out

[11:16] <lizmat> *before* the inlining bug is fixed

[11:16] <jnthn> Heh

[11:17] <jnthn> If there's time to implement something that sophisticated there's sure as heck time to fix the inlining bug ;)

[11:17] <jnthn> Plus, we can shove a spectest in to cover it

[11:17] <lizmat> yeah, but the order in which things happen, isn't always logical  :-)

[11:17] <jnthn> So if the workaround becomes ineffective by somebody making opts better, we'll know about it. :)

[11:18] <lizmat> spectest++  :-)

[11:18] <jnthn> True. I'll try and jump on this next week, anyways.

[11:18] <jnthn> I have some tuits. :)

[11:18] <jnthn> But either way, yes, we totally want a spectest for this

[11:22] <timotimo> ... what if we had a nqp::preventinlining op :)

[11:31] <Zoffix> huh

[11:31] <Zoffix> m: sub infix:<ei'oych8:;=$\x7Fzboxe$ieg%Femcd$zbz YzoickfEdo'bcgksk godof}k=knfkf9kybxk5+> { $^a + $^b }; say 42 ei'oych8:;=$\x7Fzboxe$ieg%Femcd$zbz YzoickfEdo'bcgksk godof}k=knfkf9kybxk5+ 70

[11:31] <camelia> rakudo-moar 316399: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Too many symbols provided for categorical of type infix; needs only 1␤at <tmp>:1␤------> 3YzoickfEdo'bcgksk godof}k=knfkf9kybxk5+>7⏏5 { $^a + $^b }; say 42 ei'oych8:;=$\x7Fz␤»

[11:31] <Zoffix> "only 1"? I made infixes larger than that

[11:31] <Zoffix> Tho on this font I see there's spaces in it

[11:33] <AlexDaniel> m: sub infix:<a b> { $^a + $^b }'

[11:33] <camelia> rakudo-moar 316399: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Too many symbols provided for categorical of type infix; needs only 1␤at <tmp>:1␤------> 3sub infix:<a b>7⏏5 { $^a + $^b }'␤»

[11:33] <yoleaux> 11:01Z <Zoffix> AlexDaniel: BTW, latest and greatest Rakudo fixed a bug that was affecting Digest, so you can use it now for your sha256 thing

[11:33] <AlexDaniel> \o/

[11:35] <AlexDaniel> thanks

[11:43] <Zoffix> Oh, OK, now I see what "only 1" means. *symbol* != *character*

[11:44] <timotimo> it could be rewritten as "parts"

[11:44] <timotimo> and also tell how many it thinks there were

[11:46] <timotimo> lizmat: would it make sense for hypers to return a seq? hypers are meant to mimic the input structure, and they are also the opposite of lazy

[11:47] <timotimo> m: ((:1a, :2b), ((:3c, :4d), :9z))>>.key.perl.say

[11:47] <camelia> rakudo-moar 316399: OUTPUT: «($("a", "b"), $($("c", "d"), "z"))␤»

[11:47] <lizmat> ah, then what is the problem with RT #131332 ?

[11:47] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131332

[11:52] <Zoffix> Is it possible to make it throw the typecheck just as if you'd try to assign strings on your own?

[11:52] <Zoffix> m: Array[Pair].new("a", "b")

[11:52] <camelia> rakudo-moar 316399: OUTPUT: «Type check failed in assignment to ; expected Pair but got Str ("a")␤  in block <unit> at <tmp> line 1␤␤»

[11:54] <Zoffix> "Plus, we can shove a spectest in to cover it"  That's already done in https://github.com/perl6/roast/commit/c1d62112f3951ef8a399822d243082ed11996f17

[11:58] <Zoffix> m: dd Buf.new(1, 2, 3)».Str

[11:58] <camelia> rakudo-moar 316399: OUTPUT: «("1", "2", "3")␤»

[11:58] <Zoffix> hmmmm

[11:58] <timotimo> lizmat: the problem is that it results in an Array[Pair] that contains Str instead of Pair

[11:59] <lizmat> ah!

[11:59] <lizmat> ok

[11:59] <Zoffix> m: dd (1, 2, 3).Seq».self

[11:59] <camelia> rakudo-moar 316399: OUTPUT: «(1, 2, 3)␤»

[12:01] <timotimo> oh, cool, i didn't know we have a self method

[12:02] <Geth> ¦ rakudo/nom: e5b5d3461d | (Elizabeth Mattijsen)++ | src/core/SetHash.pm

[12:02] <Geth> ¦ rakudo/nom: Fix SetHash.(iterator|values|kv)

[12:02] <Geth> ¦ rakudo/nom:

[12:02] <Geth> ¦ rakudo/nom: - simplification

[12:02] <Geth> ¦ rakudo/nom: - give the same semantics as (Bag|Mix)Hash.(iterator|values|kv)

[12:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e5b5d3461d

[12:06] <lizmat> Zoffix:  I think ^^^ fixed the issues you found with SetHash

[12:07] <lizmat> I *think* I covered all of the other issues you mentioned in earlier commits today

[12:07] <lizmat> all that is needed, are more tests

[12:07] <lizmat> which I will start working on now

[12:07] <Zoffix> lizmat++ thanks

[12:21] <lizmat> m: my $s = <a b c>.SetHash; for $s.values { $_ = 0; last; $_ = 1 }; dd $s   # now also lazy

[12:21] <camelia> rakudo-moar e5b5d3: OUTPUT: «SetHash $s = SetHash.new("a","c")␤»

[12:25] <lizmat> m: my $s = <a b c>.SetHash; for $s.values { $_ = 0; $_ = 1 }; dd $s   # now also recovering

[12:25] <camelia> rakudo-moar e5b5d3: OUTPUT: «SetHash $s = SetHash.new("a","c","b")␤»

[12:36] <dogbert17> m: say ∅ ⊂ (1)

[12:36] <camelia> rakudo-moar e5b5d3: OUTPUT: «True␤»

[12:37] <dogbert17> m: say ∅ ⊂ () # is this correct?

[12:37] <camelia> rakudo-moar e5b5d3: OUTPUT: «False␤»

[12:37] <lizmat> I think the empty set is a subset of any set

[12:37] <lizmat> m: say ∅ ⊂ ∅

[12:37] <camelia> rakudo-moar e5b5d3: OUTPUT: «False␤»

[12:37] <lizmat> hmmm....

[12:37] <lizmat> m: say ∅ ⊂ set()

[12:37] <camelia> rakudo-moar e5b5d3: OUTPUT: «False␤»

[12:37] <lizmat> m: say ∅ ⊂ set(1)

[12:37] <camelia> rakudo-moar e5b5d3: OUTPUT: «True␤»

[12:38] <lizmat> m: say ∅ ⊂ (1).set

[12:38] <camelia> rakudo-moar e5b5d3: OUTPUT: «No such method 'set' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[12:38] <lizmat> m: say ∅ ⊂ (1).Set

[12:38] <camelia> rakudo-moar e5b5d3: OUTPUT: «True␤»

[12:38] <dogbert17> commit: 2016.12 say ∅ ⊂ set()

[12:38] <committable6> dogbert17, ¦2016.12: «False»

[12:38] <dogbert17> doesn't look new

[12:38] <lizmat> indeed

[12:39] <lizmat> please RT it, will look at it

[12:39] <dogbert17> consider it done :)

[12:42] <Zoffix> m: say ∅ ⊆ set()

[12:42] <camelia> rakudo-moar e5b5d3: OUTPUT: «True␤»

[12:42] <Zoffix> m: say 0 < 0

[12:42] <camelia> rakudo-moar e5b5d3: OUTPUT: «False␤»

[12:42] <Zoffix> m: say 0 <= 0

[12:42] <camelia> rakudo-moar e5b5d3: OUTPUT: «True␤»

[12:44] <dogbert17> lizmat: RT #131335

[12:44] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131335

[12:45] <Zoffix> Also: https://www.wolframalpha.com/input/?i=%E2%88%85+%E2%8A%82+%E2%88%85

[12:49] <Geth> ¦ roast: 8cd62dba84 | (Elizabeth Mattijsen)++ | S02-types/baghash.t

[12:49] <Geth> ¦ roast: Add tests for BagHash.(values|kv|pairs) modifying

[12:49] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8cd62dba84

[12:49] <dogbert17> so if ⊂ signifies a 'proper subset' then my report is bogus?

[12:50] <lizmat> perhaps

[12:51] <lizmat> https://en.wikipedia.org/wiki/Empty_set

[12:53] <dogbert17> m: say (1) ⊂ (1)

[12:53] <camelia> rakudo-moar e5b5d3: OUTPUT: «False␤»

[12:54] <dogbert17> m: say (1) ⊆ (1)

[12:54] <camelia> rakudo-moar e5b5d3: OUTPUT: «True␤»

[12:55] <dogbert17> seems to me that ⊂ should be interpreted at 'proper subset'

[12:56] <Zoffix> m: say ∅ ⊂ set ∅

[12:56] <camelia> rakudo-moar e5b5d3: OUTPUT: «True␤»

[12:57] <Geth> ¦ roast: f80ad6c9b9 | (Elizabeth Mattijsen)++ | S02-types/mixhash.t

[12:57] <Geth> ¦ roast: Add tests for MixHash.(values|kv|pairs) modifying

[12:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f80ad6c9b9

[13:01] <dogbert17> m: say ∅ ⊂ ∅

[13:01] <camelia> rakudo-moar e5b5d3: OUTPUT: «False␤»

[13:01] <dogbert17> m: say ∅ ⊂ set ∅ # why the difference?

[13:01] <camelia> rakudo-moar e5b5d3: OUTPUT: «True␤»

[13:02] <Zoffix> dogbert17: one is a set() ⊂ set(), the other is a set() ⊂ set(set())

[13:03] <dogbert17> aha

[13:04] <Zoffix> NeuralAnomaly: status

[13:04] <NeuralAnomaly> Zoffix, [✘] Next release is today. Since last release, there are 43 new still-open tickets (4 unreviewed and 0 blockers) and 15 unreviewed commits. See http://perl6.fail/release/stats for details

[13:04] * dogbert17 leaning towards rejecting my own RT ...

[13:04] <Zoffix> I guess it's time \o/

[13:05] * Zoffix finishes up a level of Trine first...

[13:05] * dogbert17 waits for lizmat's judgement

[13:06] <lizmat> hmmm.... re set() being a subset of set() ?

[13:06] <lizmat> masak or jnthn would be a better judge of that, I think

[13:07] <lizmat> Zoffix: writing new SetHash tests now, found an issue  :-(

[13:09] <lizmat> ah, the issue appears to be in the test  :-)

[13:10] <Geth> ¦ roast: b580fffa36 | (Elizabeth Mattijsen)++ | 2 files

[13:10] <Geth> ¦ roast: Add tests for SetHash.(values|kv|pairs) modifying

[13:10] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b580fffa36

[13:11] <Zoffix> If we assume ∅ ⊂ ∅ => True, that means there's $x we can put into ∅ to make ∅, since there is no such $x, then False is the right answer. WolframAlpha also says the False is the answer.

[13:12] <lizmat> ah, actually, a subset always implies fewer elements on the left than on the right

[13:13] <lizmat> since the empty set does not have fewer elements than the empty set, it is by definition not a subset

[13:13] <lizmat> so the current behaviour appears correct

[13:14] <dogbert11> lizmat: the 'subset with fewer elements' is what is often called 'proper subset'

[13:14] <lizmat> ok, and it appears that's how it is implemented

[13:15] <dogbert11> guru4711

[13:15] <dogbert11> :(

[13:15] <lizmat> time to change the pw ?

[13:15] <dogbert11> yup

[13:15] <dogbert11> I'll close the report, sorry for the noise

[13:16] <lizmat> no pb, we need inquisitive minds  :-)

[13:16] <lizmat> and they need to know  :-)

[13:17] <lizmat> Zoffix: thinking of stopping writing tests right now, so you can do a release   ;-)

[13:20] <Zoffix> OK

[13:21] <dogbert17> and I can't seem to close my own ticket (sigh)

[13:21] <dogbert17> I could :)

[14:03] * Zoffix takes a final look over Win32 spectest failures and starts cutting release after that

[14:09] <Zoffix> C:\release-rakudo>perl6 -e "my $proc = Proc::Async.new: $*EXECUTABLE, '-e', 'say 42'; $proc.stdout.tap: { say qq|Meow: $_| }; await $proc.start"

[14:09] <Zoffix> ===SORRY!===

[14:09] <Zoffix> Argument to "say" seems to be malformed

[14:09] <Zoffix> Don't know what it's on about ¯\_(ツ)_/¯

[14:09] <Zoffix> Seems Test::Util's doesn't-hang is busted on Windows

[14:13] <Zoffix> C:\release-rakudo>perl6 -e "with Proc::Async.new($*EXECUTABLE, '-e', '$*OUT.write(Blob.new(65, 66, 67, 13, 10))') { .stdout.tap: *.say; await .start }"

[14:13] <Zoffix> ===SORRY!=== Error while compiling -e

[14:13] <Zoffix> Unable to parse expression in argument list; couldn't find final ')'

[14:13] <Zoffix> Or seems it's Proc::Async that's busted on windows :/

[14:14] <Zoffix> which doesn't-hang usess

[14:14] <Zoffix> Was already busted in last release, so I guess I'll skip it.

[14:17] <yoleaux> Zoffix: Zoffix: ensure these (and and few lines up/below) issues are resolved/filed before release: https://irclog.perlgeek.de/perl6-dev/2017-05-19#i_14607286

[14:17] <Zoffix> botsnack

[14:17] <synopsebot6> om nom nom

[14:20] <Zoffix> Looks committable6 has a race in it. If you give it code to run too fast, it hangs

[14:22] * lizmat goes afk for a few hours

[14:29] <MasterDuke> Zoffix: can you create a whateverable issue?

[14:42] <Zoffix> https://github.com/perl6/whateverable/issues/148

[14:43] <MasterDuke> Zoffix++

[14:54] <Geth> ¦ roast: 998f3d45b3 | (Zoffix Znet)++ | S05-match/capturing-contexts.t

[14:54] <Geth> ¦ roast: Add more tests for <( and )>

[14:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/998f3d45b3

[14:56] <Zoffix> m: my $b = <a b b c c c>.SetHash; $_ = -1 for $b.values; dd $b

[14:56] <camelia> rakudo-moar e5b5d3: OUTPUT: «SetHash $b = SetHash.new("b","a","c")␤»

[14:56] <Zoffix> m: my $b = <a b b c c c>.BagHash; $_ = -1 for $b.values; dd $b

[14:56] <camelia> rakudo-moar e5b5d3: OUTPUT: «BagHash $b = ().BagHash␤»

[14:57] <Zoffix> lizmat: are you around by any chance? Was ^ SetHash version meant to also return ().SetHash above?

[14:59] <Zoffix> Like this line https://github.com/rakudo/rakudo/blob/e5b5d34/src/core/SetHash.pm#L35

[14:59] <Zoffix> Should it be nqp::isgt_i($value,0) ?

[14:59] <Zoffix> c: 2017.04.3 my $b = <a b b c c c>.BagHash; $_ = -1 for $b.values; dd $b

[14:59] <committable6> Zoffix, ¦2017.04.3: «BagHash $b = ("b"=>-1,"a"=>-1,"c"=>-1).BagHash»

[15:00] <Zoffix> c: 2017.04.3 my $b = <a b b c c c>.SetHash; $_ = -1 for $b.values; dd $b

[15:00] <committable6> Zoffix, ¦2017.04.3: «SetHash $b = SetHash.new("b","a","c")»

[15:00] <Zoffix> Guess we can figure it out after release...

[15:01] <Zoffix> "give the same semantics as (Bag|Mix)Hash.(iterator|values|kv)"  e5b5d3461d300fe4ae36d3a

[15:01] <Zoffix> So then yeah, it's a typo. /me fixes

[15:11] <Geth> ¦ rakudo/nom: e9ae004751 | (Zoffix Znet)++ | src/core/SetHash.pm

[15:11] <Geth> ¦ rakudo/nom: Fix SetHash internal `proxy` sub from treating negatives as positive

[15:11] <Geth> ¦ rakudo/nom:

[15:11] <Geth> ¦ rakudo/nom: Adjusts behaviour to follow commit message in previous[^1] commit about

[15:11] <Geth> ¦ rakudo/nom: giving SetHash same semantics as Bag/MixHashes; such as:

[15:11] <Geth> ¦ rakudo/nom: `$_ = -1 for $sethash.values` deleting elements instead of leaving them in.

[15:11] <Geth> ¦ rakudo/nom:

[15:11] <Geth> ¦ rakudo/nom: [1] https://github.com/rakudo/rakudo/commit/e5b5d3461d300fe4ae36d3a1f1909613c222ab26

[15:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e9ae004751

[15:15] <Geth> ¦ roast: cf06354b88 | (Zoffix Znet)++ | S02-types/sethash.t

[15:15] <Geth> ¦ roast: Test negatives assigned to .value delete from SetHash

[15:15] <Geth> ¦ roast:

[15:15] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/e9ae004751

[15:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cf06354b88

[15:22] <Zoffix> crap

[15:23] <Zoffix> 6.c-errata fails in t/spec/integration/advent2011-day07.t with some weird error: https://gist.github.com/zoffixznet/841902c4f511ee1044e29fb8f09e6333

[15:23] <Zoffix> Zoffix-- # forgetting to test 6.c-errata in the past few days :(

[15:24] <dogbert17> oops

[15:26] <Geth> ¦ rakudo/nom: 35df8adc1e | (Zoffix Znet)++ | docs/ChangeLog

[15:26] <Geth> ¦ rakudo/nom: Log all commits to date

[15:26] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/35df8adc1e

[15:29] <Zoffix> weird.. if I add `$ = $meth.^name;` after this line https://github.com/perl6/roast/blob/master/packages/Advent/GrammarProfiler.pm#L8 then the test passes :S

[15:29] <MasterDuke> i think there was some conversation about that error recently

[15:29] <Zoffix> oh wait

[15:29] <Zoffix> it passes on my local box but fails on my google VM

[15:29] <Zoffix> MasterDuke: where?

[15:29] <MasterDuke> here

[15:30] <Zoffix> Then when? I don't recall it and I read pretty much everything

[15:30] <MasterDuke> couple weeks ago maybe?

[15:31] <MasterDuke> https://irclog.perlgeek.de/perl6-dev/2017-05-03#i_14525903

[15:32] <Zoffix> Ah ok. I see Apr fixes in master

[15:32] <Zoffix> I thought April was ancient history, but yeah, it was after last release..

[15:32] <Zoffix> *phew* :)

[15:33] <Zoffix> *insert obligatory grumble about people mending tests in master but forgetting to do the same in errata*

[15:33] <Geth> ¦ roast/6.c-errata: 1260b6c88a | TimToady++ (committed by Zoffix Znet) | 2 files

[15:33] <Geth> ¦ roast/6.c-errata: fix for correct BUILD semantics of grammar

[15:33] <Geth> ¦ roast/6.c-errata:

[15:33] <Geth> ¦ roast/6.c-errata: This test uses a module that lists a bunch of internal methods.  This is

[15:33] <Geth> ¦ roast/6.c-errata: suboptimal, but for now just add the methods that are called when a proper

[15:33] <Geth> ¦ roast/6.c-errata: new/BUILDALL are done.  (The old code only worked because class Grammar

[15:33] <Geth> ¦ roast/6.c-errata: bypassed all that and went straight to nqp, which in turn made it impossible

[15:33] <Geth> ¦ roast/6.c-errata: to support user grammars with their own attributes.)

[15:33] <Geth> ¦ roast/6.c-errata: <…commit message has 5 more lines…>

[15:33] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/1260b6c88a

[15:36] <Geth> ¦ roast/6.c-errata: 4aa4064d27 | (Elizabeth Mattijsen)++ (committed by Zoffix Znet) | 2 files

[15:36] <Geth> ¦ roast/6.c-errata: Fix final tests broken by fix to RT #131241

[15:36] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/4aa4064d27

[15:36] <Geth> ¦ roast/6.c-errata: 9dc81f0f69 | (Elizabeth Mattijsen)++ (committed by Zoffix Znet) | 2 files

[15:36] <Geth> ¦ roast/6.c-errata: Fix more tests broken by fix to RT #131241

[15:36] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131241

[15:36] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/9dc81f0f69

[15:36] <Geth> ¦ roast/6.c-errata: a45360edbb | (Elizabeth Mattijsen)++ (committed by Zoffix Znet) | 2 files

[15:36] <Geth> ¦ roast/6.c-errata: Fix tests broken by fix to RT #131241

[15:36] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131241

[15:36] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/a45360edbb

[15:39] <Zoffix> k. it's time

[15:39] <ugexe> last call on o/u for hotfixes

[15:40] <Zoffix> "o/u"?

[15:40] <ugexe> over/under.. its a gambling term basically saying you want this or that side of some number

[15:40] <MasterDuke> Zoffix: forgot to mention this earlier, might suggest an edit to the changelog

[15:41] <MasterDuke> "Added primary and foreign key constraints to profiler's SQL output [c776c087]". also some of the field names were changed

[15:43] <Geth> ¦ rakudo/nom: 8a763d0be9 | (Zoffix Znet)++ | docs/ChangeLog

[15:43] <Geth> ¦ rakudo/nom: Change ChangeLog Entry

[15:43] <Geth> ¦ rakudo/nom:

[15:43] <Geth> ¦ rakudo/nom: Per https://irclog.perlgeek.de/perl6-dev/2017-05-20#i_14611505

[15:43] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8a763d0be9

[15:43] <MasterDuke> Zoffix++

[15:44] <Zoffix> NeuralAnomaly: status

[15:44] <NeuralAnomaly> Zoffix, [✘] Next release is today. Since last release, there are 41 new still-open tickets (0 unreviewed and 0 blockers) and 3 unreviewed commits. See http://perl6.fail/release/stats for details

[15:44] <Zoffix> NeuralAnomaly: status

[15:44] <NeuralAnomaly> Zoffix, [✔] Next release is today. Since last release, there are 41 new still-open tickets (0 unreviewed and 0 blockers) and 0 unreviewed commits. See http://perl6.fail/release/stats for details

[15:44] <Zoffix> NeuralAnomaly: cut the release

[15:44] <Zoffix> hmm

[15:45] <Zoffix> NeuralAnomaly: cut the release

[15:45] <NeuralAnomaly> Zoffix, Will do! If you're feeling particularly naughty, you can watch me at http://perl6.fail/release/progress or go look at some cats http://icanhas.cheezburger.com/lolcats

[15:45] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠☠☠☠☠ ABNORMAL EXIT!

[15:46] <Zoffix> NeuralAnomaly: cut the release

[15:46] <NeuralAnomaly> Zoffix, Will do! If you're feeling particularly naughty, you can watch me at http://perl6.fail/release/progress or go look at some cats http://icanhas.cheezburger.com/lolcats

[15:46] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Prep done

[15:47] <Geth> ¦ nqp: 982acbda15 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[15:47] <Geth> ¦ nqp: bump MoarVM version to 2017.05

[15:47] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/982acbda15

[15:47] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.04-68-g5f23324...2017.05

[15:47] <Geth> ¦ nqp: 0d2e99a8dc | (Zoffix Znet)++ | VERSION

[15:47] <Geth> ¦ nqp: bump VERSION to 2017.05

[15:47] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/0d2e99a8dc

[15:47] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.04-68-g5f23324...2017.05

[15:53] <Zoffix> tbrowder: RE https://github.com/perl6/doc/commit/9e5d047f27   isn't  `experiemental` user-facing? like to include experimental features. Never heard of newline, but it might be too

[15:57] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ nqp tests OK

[15:58] <tbrowder> hm, maybe we should eliminate the two categories and reword the lead-in a bit?

[15:58] <Zoffix> maybe

[15:59] <tbrowder> i'll give it a shot....

[15:59] <MasterDuke> is there a way to run the nqp tests in parallel?

[16:08] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ nqp release tarball tests OK

[16:08] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ nqp release DONE

[16:08] <MasterDuke> hm, jnthn said something about `--jobs=20` here https://irclog.perlgeek.de/moarvm/2017-05-06#i_14542434, but that doesn't have any effect for me

[16:08] <Geth> ¦ rakudo/nom: 38441cb5a6 | (Zoffix Znet)++ | docs/announce/2017.05.md

[16:08] <Geth> ¦ rakudo/nom: Generate release announcement for 2017.05

[16:08] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/38441cb5a6

[16:08] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.04-118-gde324a2...2017.05

[16:08] <Geth> ¦ rakudo/nom: 756645b3bf | (Zoffix Znet)++ | tools/build/NQP_REVISION

[16:08] <Geth> ¦ rakudo/nom: [release] bump NQP revision

[16:08] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/756645b3bf

[16:08] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.04-118-gde324a2...2017.05

[16:08] <Geth> ¦ rakudo/nom: f609e69e1a | (Zoffix Znet)++ | VERSION

[16:08] <Geth> ¦ rakudo/nom: [release] bump VERSION to 2017.05

[16:09] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f609e69e1a

[16:09] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.04-118-gde324a2...2017.05

[16:10] <Zoffix> MasterDuke: I see --jobs arg in `prove`, so I would've thought that'd do something

[16:12] <MasterDuke> `make --jobs=10 m-test` takes exactly the same amount of time as without the `--jobs=10`

[16:13] <ugexe> does that send --jobs=10 to prove?

[16:14] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠ Rakudo: install Inline::Perl5

[16:14] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠☠☠☠☠ ABNORMAL EXIT!

[16:14] <Zoffix> boo

[16:14] <Zoffix> "fetch stage failed for Inline::Perl5: Unable to handle source 'http://www.cpan.org/authors/id/N/NI/NINE/Perl6/Inline-Perl5-0.26.tar.gz'"

[16:14] <Zoffix> wtf :/

[16:14] <Zoffix> and by wtf I mean "I've just did a clean install on the same box an hour ago and it was fine"

[16:15] <Zoffix> Ohhh

[16:15] <Zoffix> NeuralAnomaly's script is still using panda

[16:16] <Zoffix> Stupid robot. Don't you follow the news?

[16:16] <mst> LOL

[16:16] <MasterDuke> ugexe: looks like it does not. if i run prove manually with `--jobs=10` it takes one-fifth the time

[16:16] <mst> well, no, --jobs is for *make* jobs

[16:16] <ugexe> just rewrite bin/panda as a zef front end

[16:16] <mst> that's obviously not going to work

[16:16] <MasterDuke> mst: but it does

[16:17] <mst> MasterDuke: lol?

[16:17] <mst> MasterDuke: no it doesn't, you already said it didn't

[16:17] <mst> again: 'make --jobs=10' is obviously not going to work

[16:17] <MasterDuke> using make it doesn't do anything, running prove manually it does

[16:17] <mst> yes, that's what I'm telling you

[16:18] <mst> because make also accepts a --jobs argument for the number of *make* jobs to run

[16:18] <mst> prove is run by a *single* make job

[16:18] * mst wonders if you're even reading what I'm writing here :(

[16:18] <MasterDuke> yeah. any way to get that option passed to prove?

[16:18] <ugexe> isn

[16:18] <ugexe> isnt there some -j10 variant for env?

[16:18] <ugexe> to just do TAP_HARNESS_J=10 make whatever

[16:19] <MasterDuke> mst: i thought i was understanding what you were saying

[16:19] <mst> I was explaining why 'make --jobs=10' was irrelevnt because that's an argument to make, which does something different to the argument to prove

[16:19] <mst> also, where's the Makefile?

[16:20] <MasterDuke> TEST_JOBS=n for rakudo, but that doesn't do anything for NQP

[16:20] <mst> try HARNESS_OPTIONS=j9

[16:20] <MasterDuke> mst: it's built by Configure.pl, there isn't one in the NQP repo

[16:20] <Zoffix> NeuralAnomaly: steps

[16:20] <NeuralAnomaly> Zoffix, all pre nqp r post pre-r6 pre-blank-slate nqp-clone nqp-bump-vers nqp-build nqp-test nqp-tar nqp-tar-build nqp-tag nqp-tar-sign nqp-tar-copy r-clone r-prep-ann r-bump-vers r-build r-p5 r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[16:21] <Zoffix> NeuralAnomaly: run r-p5 r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[16:21] <MasterDuke> mst++ that worked

[16:23] <mst> there might equally be a way to get the Makefile to pass it to prove ... but I don't think we care now

[16:23] <mst> though you might want to add a note in the docs somewhere

[16:23] <MasterDuke> heh, was just going to ask that

[16:24] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠ Rakudo: make stresstest (master)

[16:24] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠☠☠☠☠ ABNORMAL EXIT!

[16:28] <Zoffix> NeuralAnomaly: yo

[16:28] <NeuralAnomaly> Zoffix, Yo, yo, yo! What up, homeslice?

[16:28] <mst> MasterDuke: well, I could look, but you still didn't show me the makefile like I asked, so I can't

[16:28] <Zoffix> What's up with that error...

[16:29] <ugexe> so exit. much abnormal

[16:30] * Zoffix wishes the bot had a command to execut arbitrary shell command :/

[16:30] <mst> yes because that would be a totally safe and sane idea

[16:31] <MasterDuke> mst: my NQP makefile https://gist.github.com/MasterDuke17/e92c9d731419d742c4e97420430e8f83

[16:34] <Zoffix> mst: it would :) 'cause the IP for the box the bot uses is valid for a short time period so even if someone managed to run a command as admin, the box would be offline

[16:35] <mst> MasterDuke: make PROVE='prove -j9' looks like it'd work?

[16:35] <mst> (not sure if that's really an improvement but still)

[16:36] <Zoffix> NeuralAnomaly: steps

[16:36] <NeuralAnomaly> Zoffix, all pre nqp r post pre-r6 pre-blank-slate nqp-clone nqp-bump-vers nqp-build nqp-test nqp-tar nqp-tar-build nqp-tag nqp-tar-sign nqp-tar-copy r-custom r-clone r-prep-ann r-bump-vers r-build r-p5 r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[16:37] <Zoffix> NeuralAnomaly: run r-custom

[16:37] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Rakudo: custom command

[16:37] <MasterDuke> mst: yep, that works also, thanks

[16:37] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠☠☠☠☠ ABNORMAL EXIT!

[16:39] <Geth> ¦ roast: afead9ccad | (Zoffix Znet)++ | S32-io/io-handle.t

[16:39] <Geth> ¦ roast: Fix tty detection in new test

[16:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/afead9ccad

[16:39] <MasterDuke> any reason we couldn't/shouldn't add TEST_JOBS support to NQP? pass it's value to prove's -j?

[16:40] <Zoffix> MasterDuke: that seems the best option.

[16:40] <Zoffix> I already have that env var set due to its use in rakudo

[16:41] <Zoffix> NeuralAnomaly: run r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[16:42] <MasterDuke> i can give it a try, but my make-fu is weak and my last Configure.pl/Makefile commit got reverted

[16:42] <Zoffix> try and try again :)

[16:43] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠ Rakudo: make stresstest (master)

[16:43] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠☠☠☠☠ ABNORMAL EXIT!

[16:43] <Zoffix> *sigh*

[16:43] <Zoffix> ZOFFLOP: t/spec/S17-supply/supplier-preserving.t

[16:43] <Zoffix> NeuralAnomaly: run r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[16:43] <Zoffix> c'mon, robot! I ain't got all day

[16:45] <Zoffix> ZofBot: give a hand to your pal, don't just stand there!

[16:45] <ZofBot> Zoffix, IO; $p

[16:46] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Rakudo stresstest (master) OK

[16:46] <Zoffix> yey

[16:48] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Rakudo stresstest (6.c-errata) OK

[16:54] <Zoffix> damn door-to-door spammers... Why yes, I'd love to talk to a random dude with an iPad about improving my Internet connection speeds while wearing nothing but underwear

[16:56] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Rakudo release DONE

[16:56] <NeuralAnomaly> Zoffix, ????????????????????????????????????????????????????????????

[16:56] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Post: upload tarballs to rakudo.org and rakudo.perl6.org

[16:56] <NeuralAnomaly> Zoffix, The release of **Rakudo #111 2017.05** has now been completed

[16:56] <NeuralAnomaly> Zoffix, ????????????????????????????????????????????????????????????

[16:56] * NeuralAnomaly celebrates with an appropriate amount of fun

[16:56] <Zoffix> weeee

[16:56] <Zoffix> NeuralAnomaly: thanks

[16:56] <NeuralAnomaly> Zoffix, any time, buddy!

[16:57] <mst> your bots are fucking ridiculous

[16:57] <mst> http://trout.me.uk/mstcat.jpg

[16:58] <Zoffix> :)

[16:59] <AlexDaniel> .oO( bye-bye bot )

[17:00] <Zoffix> Just placed into "safe" mode... just in case... :) https://github.com/zoffixznet/na/commit/4e382a40c02ee2c833389d628817103a64c1241a

[17:01] * AlexDaniel slaps committable6

[17:01] <AlexDaniel> committable6: 96 open issues and you solved none

[17:01] <committable6> AlexDaniel, ¦96: «Cannot find this revision (did you mean “v6.c”?)»

[17:04] <Geth> ¦ rakudo/nom: 598361a943 | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/release_guide.pod

[17:04] <Geth> ¦ rakudo/nom: 2017.05 is now in the past

[17:04] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/598361a943

[17:05] <Zoffix> NeuralAnomaly: status

[17:05] <NeuralAnomaly> Zoffix, [✘] Next release will be in 3 weeks and 6 days. Since last release, there are 3 new still-open tickets (0 unreviewed and 0 blockers) and 4 unreviewed commits. See http://perl6.fail/release/stats for details

[17:05] <mst> Zoffix: ohhh, right, it only runs stuff at all when in a "release" mode?

[17:05] <Zoffix> mst: yeah + I need to tell it the IP of my google VP it connects to, and that IP changes all the time

[17:06] <Zoffix> s/VP/VM/;

[17:06] <mst> ok, then I see why you suspect it's probably safe enough

[17:06] <Zoffix> :)

[17:08] <MasterDuke> is ?= supported in makes other than GNU Make?

[17:11] <MasterDuke> mst, geekosaur: ^^^ ?

[17:11] <geekosaur> not generally

[17:13] <MasterDuke> sonofa

[17:13] <geekosaur> now you see why so many projects just insist you use gnu make

[17:15] <mst> Get New Utilities

[17:17] <MasterDuke> how about `$(or $X,$X,abc)`?

[17:18] <geekosaur> all make "functions" are gnu extensions

[17:18] <geekosaur> bsdmake has completely different functions; nmake doesn't have any that I know of

[17:20] <MasterDuke> ok, so the problem i have is that if i just do `PROVE = 'prove -j$(TEST_JOBS)'`, if you don't specify TEST_JOBS then prove complains

[17:20] <MasterDuke> what's a cross-make way to pull a value from an env variable, but give a default if that env variable isn't defined?

[17:21] <geekosaur> if I were targeting unix only I'd use the shell version. but I don't think that flies with nmake either

[17:23] <geekosaur> (it doesn't; naturally it uses CMD.EXE syntax)

[17:25] <geekosaur> you're going to have to do this by forcing it to be defined before running it, in whatever platform appropriate way

[17:25] <MasterDuke> don't quite follow

[17:37] <MasterDuke> geekosaur: does (n|bsd)make support this: `$(shell expr $(TEST_JOBS) + 0)`?

[17:42] <lizmat> m: say "truthy" if -1  # Zoffix, re SetHash.values $_ = -1

[17:42] <camelia> rakudo-moar 598361: OUTPUT: «truthy␤»

[17:42] <lizmat> so yes, it is supposed to be that way

[17:42] <lizmat> afk again&

[17:43] <geekosaur> neither does $(shell) which is a make function which is gnumake-only as I already said

[17:44] <geekosaur> and as I also already said, nmake uses CMD.EXE not a Unix shell

[17:45] <MasterDuke> ugh. i may just leave this alone and make sure to have the non-TEST_JOBS NQP make command in my Ctrl-r history

[17:47] <MasterDuke> i don't have (n|bsd)make to test with, nor do i know enough to write something that i'm certain will work with them

[17:48] <geekosaur> unfortunately you can't use 0 as the default for that, so you don't get to use about the only hack that would be portable: -j0$(TEST_JOBS)

[18:02] <MasterDuke> OH! that does actually work

[18:06] <MasterDuke> geekosaur: why did you think that wouldn't work? it does for me: `make m-test` runs `prove -j0` and that acts just like `prove`, and `TEST_JOBS=10 make m-test` runs `prove -j010` which does do multiple jobs in parallel

[18:07] <geekosaur> because -j0 often means "as many as possible" instead of meaning the same as -j1. if that is what you want, fine. if not, you have a problem

[18:07] <geekosaur> (want to be the default, that is)

[18:09] <MasterDuke> well, does prove work the same across platforms? because for me `prove -j0` runs just one job at a time

[18:10] <geekosaur> how many cpus does the os think you have?

[18:10] <MasterDuke> 4 on my ubuntu machine, 8 on my arch machine. same behavior on both

[18:11] <geekosaur> ok. I don;t know enough about prove to know what it will do but I recall someone (zoffix I think) running into this earlier and finding corner cases

[18:12] <geekosaur> the number of cpus matters because, for example, make somewhat infamously treats -j0 or bare -j as use as many cpus as possible... but some (incuding different gmake versions!) take that as # cpus, some as #cpus - 1, some as "just spawn as many jobs as possible and let the OS scheduler sort it out"

[18:13] <geekosaur> (granted, not many of the latter, but at least one gmake version does do that... and apple shipped it on several OS X versions)

[18:14] <geekosaur> oh, and # cpus + 1 (on the theory that at least one will be blocked on I/O and available to run something CPU-bound)

[18:15] <MasterDuke> Zoffix: have you ever ran into any problems running `prove -j0`?

[18:15] <Zoffix> never heard of that option even

[18:15] <yoleaux> 17:22Z <araraloren> Zoffix: Em, thanks, I'll look at `upload to CPAN`

[18:17] <MasterDuke> quotable6: /prove .+ '-j0'/

[18:18] <quotable6> MasterDuke, Found nothing!

[18:18] <MasterDuke> quotable6: /prove .+ '--jobs=0'/

[18:19] <quotable6> MasterDuke, Found nothing!

[18:21] <MasterDuke> well, since prove is written in Perl i'm going to assume it'll work the same cross-platform

[18:22] <MasterDuke> i'll go ahead and commit since it's a simple change, we can revert if necessary

[18:26] <Geth> ¦ nqp: 728ca975d1 | MasterDuke17++ | tools/build/Makefile-common.in

[18:26] <Geth> ¦ nqp: Add TEST_JOBS=n support to NQP's `make test`

[18:26] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/728ca975d1

[18:26] <MasterDuke> mst++ geekosaur++

[18:27] <mst> MasterDuke: please do it with a PROVE_OPTIONS variable otherwise now somebody overriding which prove binary to use will be fucked

[18:29] <Zoffix> ZOFFLOP: t/spec/S17-supply/supplier-preserving.t

[18:29] <Geth> ¦ rakudo/nom: a36f0c4487 | (Zoffix Znet)++ | src/core/SetHash.pm

[18:29] <Geth> ¦ rakudo/nom: Revert "Fix SetHash internal `proxy` sub from treating negatives as positive"

[18:29] <Geth> ¦ rakudo/nom:

[18:29] <Geth> ¦ rakudo/nom: This reverts commit e9ae004751705bd4220ad951173249b0bc9cc1a1.

[18:29] <Geth> ¦ rakudo/nom:

[18:29] <Geth> ¦ rakudo/nom: Per: https://irclog.perlgeek.de/perl6-dev/2017-05-20#i_14611927

[18:29] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a36f0c4487

[18:30] <Geth> ¦ roast: 360378c3a4 | (Zoffix Znet)++ | S02-types/sethash.t

[18:30] <Geth> ¦ roast: Change test to test opposite behaviour

[18:30] <Geth> ¦ roast:

[18:30] <Geth> ¦ roast: The test was added earlier today and isn't part of 6.c language.

[18:30] <Geth> ¦ roast: Test per: https://irclog.perlgeek.de/perl6-dev/2017-05-20#i_14611927

[18:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/360378c3a4

[18:31] * mst comments on the commit

[18:38] <Geth> ¦ nqp: af678371e2 | MasterDuke17++ | tools/build/Makefile-common.in

[18:38] <Geth> ¦ nqp: Add PROVE_OPTIONS variable

[18:38] <Geth> ¦ nqp:

[18:38] <Geth> ¦ nqp: So you can override the prove binary but still get TEST_JOBS support.

[18:38] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/af678371e2

[19:26] <MasterDuke> nqp: say(nqp::iseq_i(2**62, 2**62-1))

[19:26] <camelia> nqp-moarvm: OUTPUT: «1␤»

[19:27] <MasterDuke> m: use nqp; say(nqp::iseq_i(2**62, 2**62-1))

[19:27] <camelia> rakudo-moar a36f0c: OUTPUT: «0␤»

[19:27] <Zoffix> m: dd [ 2**62, 2**62-1 ]

[19:27] <camelia> rakudo-moar a36f0c: OUTPUT: «[4611686018427387904, 4611686018427387903]␤»

[19:28] <Zoffix> nqp: say(2**62); say(2**62-1)

[19:28] <camelia> nqp-moarvm: OUTPUT: «4.61168601842739e+18␤4.61168601842739e+18␤»

[19:29] <MasterDuke> nqp: my int $a := 2**62; my int $b := 2**62-1; say($a); say($b); say(nqp::iseq_i($a, $b))

[19:29] <camelia> nqp-moarvm: OUTPUT: «4611686018427387904␤4611686018427387904␤1␤»

[19:30] <MasterDuke> nqp: my int64 $a := 2**62; my int64 $b := 2**62-1; say($a); say($b); say(nqp::iseq_i($a, $b))

[19:30] <camelia> nqp-moarvm: OUTPUT: «4611686018427387904␤4611686018427387904␤1␤»

[19:31] <MasterDuke> timotimo, jnthn: ^^^ i presume that's not expected?

[19:48] <jnthn> It's probably 'cus NQP does math as floating point in a bunch of cases, including apparently this one where it makes no sense at all

[19:52] <MasterDuke> heh. i was trying out the even-moar-jit branch and had added eq_i to it, which broke nqp and rakudo, and thought i had an easy test case, but decided to double check what normal moarvm+nqp did

[19:55] <MasterDuke> nqp: say(nqp::iseq_i(4611686018427387904, 4611686018427387903))

[19:55] <camelia> nqp-moarvm: OUTPUT: «1␤»

[19:56] <MasterDuke> huh, i assumed it was something during the parsing and conversion of the exponential form

[20:12] <MasterDuke> decint and string_to_int both have the correct values (no surprise there), but --target=ast gives `...QAST::Op(iseq_i) - QAST::IVal(4611686018427387904) - QAST::IVal(4611686018427387904)...`

[20:55] <Geth> ¦ rakudo/nom: 5528b10644 | (Elizabeth Mattijsen)++ | src/core/Rakudo/QuantHash.pm

[20:55] <Geth> ¦ rakudo/nom: Shortcut random value determination

[20:55] <Geth> ¦ rakudo/nom:

[20:55] <Geth> ¦ rakudo/nom: Natives automatically coerce from / to num / int

[20:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5528b10644

[20:55] <Geth> ¦ rakudo/nom: d28540bea2 | (Elizabeth Mattijsen)++ | src/core/Setty.pm

[20:55] <Geth> ¦ rakudo/nom: Make SetHash.grab about 1.8x faster

[20:55] <Geth> ¦ rakudo/nom:

[20:55] <Geth> ¦ rakudo/nom: By using R:Q.ROLL, which saves us from having to create a whole list of

[20:55] <Geth> ¦ rakudo/nom: keys to randomly select one from.  Based on grabbing 26x from a 26 elem

[20:55] <Geth> ¦ rakudo/nom: SetHash.

[20:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d28540bea2

[20:56] <lizmat> which concludes my hacking for today

[20:56] <lizmat> good night, #perl6-dev!

[20:56] <lizmat> almost forgot: Zoffix++ for the 2017.05 release!

[21:41] <MasterDuke> nqp: my int $a := 100000000000000009; say($a)

[21:41] <camelia> nqp-moarvm: OUTPUT: «100000000000000016␤»

[21:42] <MasterDuke> weird. inside IVal.new it's correct, but is wrong when IVal.value is called

[21:47] <geekosaur> there's so many places that could happen...

[21:48] <MasterDuke> it's the bindattr_i

[21:49] <MasterDuke> right after this line in IVal.new: `nqp::bindattr_i($node, QAST::IVal, '$!value', $value);`

[21:50] <MasterDuke> i added: `note("IVal.new: " ~ $value); note("IVal.new: " ~ nqp::getattr_i($node, QAST::IVal, '$!value'));`

[21:50] <MasterDuke> the note of $value has the right number. the note of the getattr_i has the wrong number

[22:17] <MasterDuke> wrong value in P6opaque.bind_attribute

[22:52] <MasterDuke> timotimo, jnthn: right before this line ( https://github.com/perl6/nqp/blob/master/src/QAST/IVal.nqp#L7 ) i put `note("IVal.new: " ~ $value);` and right after it i put `note("IVal.new: " ~ nqp::getattr_i($node, QAST::IVal, '$!value'));`

[22:54] <MasterDuke> and in this if ( https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6opaque.c#L367-L370 ) i put `fprintf(stderr, "bi: %li\n", value_reg.i64);`

[22:54] <MasterDuke> and then ran `./nqp-m -e 'my int $a := 100000000000000009; say($a)'`

[22:55] <MasterDuke> the first note prints 100000000000000009, the print in bind_attribute and the second note both print 100000000000000016

[22:58] <MasterDuke> if anybody has an idea of how to debug further i'm all ears
