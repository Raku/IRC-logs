[02:41] <ugexe> $++ is too useful imo

[03:10] <BenGoldberg> m: print $+^=1 for 1..5;

[03:10] <camelia> rakudo-moar c56f0a: OUTPUT: «10101»

[09:39] <lizmat> commit: 2016.03 dd <a a c>.Bag (<) <a b b c>.Bag

[09:39] <committable6> lizmat, ¦2016.03: «Bool::True»

[09:39] <lizmat> that is incorrect in my view, as there are more a's on the left than on the right

[09:40] <lizmat> hmmm...

[09:40] <lizmat> unless we think Setty semantics

[09:41] <lizmat> commit: 2016.03 dd <a a c>.Bag.Set (<) <a b b c>.Bag.Set

[09:41] <committable6> lizmat, ¦2016.03: «Bool::True»

[09:42] <lizmat> hmmm.. perhaps I have conflated (<+) and (<)

[10:04] <Geth> ¦ rakudo/nom: 43fc751be2 | (Elizabeth Mattijsen)++ | src/core/Failure.pm

[10:04] <Geth> ¦ rakudo/nom: Make sure unhandled failures don't coerce QuantHashy

[10:04] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/43fc751be2

[10:22] <dogbert2> lizmat: just ran a few code examples from docs and stumbled upon the difference

[10:23] <lizmat> dogbert2: yeah, you probably found a bug I introduced  :-(

[10:23] * lizmat is watching https://www.youtube.com/watch?v=VqhLWgvIbz0

[10:26] <dogbert2> m: my ($a, $b) = BagHash.new(2, 2, 4), BagHash.new(2, 3, 3, 4); say $a (^) $b # what about this

[10:26] <camelia> rakudo-moar 43fc75: OUTPUT: «bag(3(2), 2)␤»

[10:26] <dogbert2> commit: 2016.12 my ($a, $b) = BagHash.new(2, 2, 4), BagHash.new(2, 3, 3, 4); say $a (^) $b

[10:26] <committable6> dogbert2, ¦2016.12: «set(3)»

[10:27] <dogbert2> interesting, is that jnthn

[11:50] <masak> aye

[11:54] <lizmat> dogbert2: maybe adding baggy semantics to (<) and (^) wasn't such a good idea

[11:55] <lizmat> dogbert2: thing is, when I did it, it did not break any spectests :-(

[11:55] <lizmat> except the one in mix.t atm

[11:58] <Geth> ¦ rakudo/nom: 06379113bd | (Elizabeth Mattijsen)++ | src/core/Failure.pm

[11:58] <Geth> ¦ rakudo/nom: We probably want to QuantHash handled Failures

[11:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/06379113bd

[12:12] <dogbert2> perhaps we should 'borrow' some of the docs examples

[12:14] <dogbert2> as for the semantics perhaps we need more input wrt those

[12:17] <lizmat> well, for now I'm reverting the baggy semantics for (<) and (<=) and (^)

[12:17] <lizmat> baggy semantics for (^) was troublesome anyway, specially in the [(^)] @a case

[12:27] <dogbert2> begone with it then :)

[12:30] <dogbert2> I can add those test if you want, have to go out on an errand first though &

[12:32] <lizmat> dogbert2: tests are not the issue *now* :-)

[12:33] <dogbert2> I know, but if you revert it can be good to have them there :)

[12:34] <Geth> ¦ rakudo/nom: 724cbca710 | (Elizabeth Mattijsen)++ | 2 files

[12:34] <Geth> ¦ rakudo/nom: Revert to Setty semantics for (<=)

[12:34] <Geth> ¦ rakudo/nom:

[12:34] <Geth> ¦ rakudo/nom: Documentation assumes Setty semantics, as dogbert2++ pointed out.

[12:34] <Geth> ¦ rakudo/nom: Also, there *is* a Baggy equivalent of (<=) already, it's called (<+)

[12:34] <Geth> ¦ rakudo/nom: which I hadn't realized at the time of adding Baggy semantics to

[12:34] <Geth> ¦ rakudo/nom: (<=) around March 2016.

[12:34] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/724cbca710

[12:35] <Geth> ¦ roast: 3bab9ac2a3 | (Elizabeth Mattijsen)++ | S03-operators/set_subset.t

[12:35] <Geth> ¦ roast: Follow revert to Setty semantics of (<=)

[12:35] <Geth> ¦ roast:

[12:35] <Geth> ¦ roast: As done in https://github.com/rakudo/rakudo/commit/724cbca710

[12:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3bab9ac2a3

[12:57] <Geth> ¦ rakudo/nom: d4436e18ce | (Elizabeth Mattijsen)++ | src/core/set_proper_subset.pm

[12:57] <Geth> ¦ rakudo/nom: Revert to Setty semantics for (<)

[12:57] <Geth> ¦ rakudo/nom:

[12:57] <Geth> ¦ rakudo/nom: Because we also did this for (<=).

[12:57] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d4436e18ce

[12:59] <Geth> ¦ roast: f8d8bff1cc | (Elizabeth Mattijsen)++ | S03-operators/set_proper_subset.t

[12:59] <Geth> ¦ roast: Follow revert to Setty semantics of (<)

[12:59] <Geth> ¦ roast:

[12:59] <Geth> ¦ roast: As done in https://github.com/rakudo/rakudo/commit/d4436e18ce

[12:59] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f8d8bff1cc

[13:30] <lizmat> hmmm.. seems reverting now breaks 4 tests in mix.t  :-(

[13:31] <lizmat> maybe we should think about deprecating (<+) and allow baggy semantics for (<) and (<=) after all ??

[13:31] <lizmat> afk&

[13:57] <dogbert2> commit: 2016.01 #`

[13:57] <committable6> dogbert2, ¦2016.01: «»

[13:57] <dogbert2> commit: 2015.01 #`

[13:57] <committable6> dogbert2, ¦2015.01: «»

[13:57] <dogbert2> commit: 2014.08 #`

[13:57] <committable6> dogbert2, ¦2014.08: «»
