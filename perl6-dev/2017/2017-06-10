[00:05] <eveo> ZofBot: drumroll please!

[00:05] <ZofBot> eveo, Perl 6 code stays "GLOBAL" in that situation

[00:05] <eveo> "Status: 36 (0.04%) of modules got burnt."

[00:05] <eveo> 36 modules work on 2015.05 but not on near-HEAD

[00:05] <eveo> barring any flops and bugs in my toaster

[00:06] <MasterDuke> and the reverse number?

[00:06] <eveo> 72 (0.09%) of modules

[00:06] <eveo> (failed on 2017.05 but work on HEAD)

[00:07] <eveo> that % is missing multiplication by 100

[00:17] <MasterDuke> twice as many now work as now fail, better than the other way around

[00:19] <eveo> heh

[01:20] <eveo> Aaand it's up: https://toast.perl6.party/

[01:20] <eveo> Powered by Tardigrade \o/

[01:21] <eveo> Still need to add a feature where you can examine STDOUT/STDERR of the install session to see why it failed.

[01:25] <MasterDuke> cool. and you plan to run it for every commit? or just once a day?

[01:26] <eveo> Once I figure out what's hanging up the toasting run and it can do a run all on it's on, it'll do it continuously, prioritizing newest commits (and building older ones if there aren't any unbuilt new ones)

[01:27] <eveo> And if all are built, it'll rebuild them (to test for module updates). It'll only be doing all the commits since last release.

[01:30] <MasterDuke> all the modules in the ecosystem?

[01:30] <eveo> Yup

[01:30] <eveo> And making it test on more than one OS is also a possibility in the future.

[01:30] <MasterDuke> nice

[01:31] <MasterDuke> approx how long does a run take?

[01:32] <eveo> ~50 minutes on a 24core/24GB ram box. The continuous runs will run on a 2-core box tho

[01:34] <MasterDuke> oof, that'll probably be a relatively linear slow down, so ~10 hours

[01:35] <eveo> :)

[01:42] <MasterDuke> wonder if you could apply for a grant just to pay for running it on a larger VM?

[01:47] <eveo> meh

[01:47] <eveo> if it does 1 run a day on latest commit that's already more than enough valuable data

[01:47] <MasterDuke> true

[02:05] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1096: Suggest methods when missing method in optimizer

[02:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1096

[02:10] <Geth> ¦ rakudo/nom: c249723422 | MasterDuke17++ | 2 files

[02:10] <Geth> ¦ rakudo/nom: Suggest methods when missing method in optimizer

[02:10] <Geth> ¦ rakudo/nom:

[02:10] <Geth> ¦ rakudo/nom: Pass the right thing as the invocant so it can be introspected for

[02:10] <Geth> ¦ rakudo/nom: possible suggestions.

[02:10] <Geth> ¦ rakudo/nom:

[02:10] <Geth> ¦ rakudo/nom: Also add a '!' to the beginning of the name of private methods in the

[02:10] <Geth> ¦ rakudo/nom: message saying it doesn't exist to be consistent with names in

[02:10] <Geth> ¦ rakudo/nom: suggestions.

[02:10] <Geth> ¦ rakudo/nom:

[02:10] <Geth> ¦ rakudo/nom: Should finish up resolving

[02:10] <Geth> ¦ rakudo/nom: https://rt.perl.org/Ticket/Display.html?id=123078

[02:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c249723422

[02:10] <Geth> ¦ rakudo/nom: c356d88f94 | (Zoffix Znet)++ (committed using GitHub Web editor) | 2 files

[02:10] <Geth> ¦ rakudo/nom: Merge pull request #1096 from MasterDuke17/suggest_methods_when_missing_method_caught_by_optimizer

[02:10] <Geth> ¦ rakudo/nom:

[02:10] <Geth> ¦ rakudo/nom: Suggest methods when missing method in optimizer

[02:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c356d88f94

[02:13] <samcv> eveo, you removed WWW::Google::Time but i still seem to be using it fine without it blocking me? do you have more details about why it wsa removed?

[02:15] <eveo> Because the box where I used it heavily on newyears of 2017 is now "blacklisted" by Google. It gives me the captcha on any non-basic query (e.g. "wiki whatever").

[02:15] <eveo> It's pointless to use for anything other most rudimentary stuff and I have no interest in maintaining software that's against Google's TOS

[02:16] <eveo> It = module

[02:16] <samcv> oh. well i'm not blacklisted :\ hm. well i guess i'll just use the repo then

[02:17] <samcv> thanks for the info

[02:19] <eveo> It's only a matter of time 'till google's AI gets smarter. The module was fine on 2016 new years party. Now it's smart enough to detect group use. Next, it'll detect when a single person's violating their ToS

[02:19] <eveo> And that captcha is annoying AF. Really good deterrent IMO.

[02:20] <eveo> It's not the "click to prove not a robot" but where you have to click all the squares with mountains or store fronts or signs.

[02:20] <samcv> yeah, fair enough

[02:20] <samcv> i hate those capchas :(

[02:27] <eveo> Looks like the current toast data is a bit bogus. For example, it's listed this module as burnt and this is its install output: https://gist.github.com/zoffixznet/a78fb398221398db576ba7f4a361d95e

[02:27] <ugexe> just need WWW::MechanicalTurk

[02:27] <eveo> heh

[02:27] <eveo> I think the db builder looks for string 'FAIL' and here there isn't any, so it thought the module installed fine

[02:28] <MasterDuke> can't go off the exit code?

[02:29] <eveo> Probably can

[02:29] <eveo> A task for another day

[02:30] * eveo calls it a day

[02:34] <ugexe> hmm you can probably avoid that problem (getting served invalid json from p6c) and improve performance by disabling auto-update for p6c in zef config

[02:36] <eveo> I'll look into that. Thanks.

[02:37] <ugexe> http://ecosystem-api.p6c.org/projects.json

[02:38] <ugexe> i keep getting json parse errors from ff lol

[02:38] <ugexe> thats the real problem

[02:40] <eveo> samcv: and well, you could fork it and add to ecosystem and maintain it too

[02:40] * eveo goes to sleep

[02:45] <ugexe> hmm the full error looks like it should have been `note "Failed to update $!name mirror {$_ ~~ JSONException??'Invalid JSON'!!$_}"`

[02:49] <ugexe> well maybe not. im trying to figure out why zef is not trying the next mirror (which is *my* copy of th eecosystem which is still valid)

[02:51] <ugexe> heh it rendered once out of many retries

[07:53] <[Tux]> This is Rakudo version 2017.05-391-gc356d88f9 built on MoarVM version 2017.05-71-gad6ab26f

[07:53] <[Tux]> csv-ip5xs        2.916

[07:53] <[Tux]> test            13.420

[07:53] <[Tux]> test-t           4.380 - 4.423

[07:53] <[Tux]> csv-parser      13.481

[09:36] <lizmat> Files=1204, Tests=61802, 223 wallclock secs (13.47 usr  5.03 sys + 1359.45 cusr 122.72 csys = 1500.67 CPU)

[11:09] <eveo> booo toaster viewer "leaks" 129MB of RAM on each page load :/

[11:10] <eveo> I seem to have very bad luck with Perl 6 and web apps.

[11:11] <jnthn> Why "leaks" and not leaks?

[11:11] <jnthn> Either it's leaking or it's converging on a suitable amount

[11:12] <eveo> Because I'm unsure whether there's not just some piece of code that keeps stuff it's meant to throw away :)

[11:13] <jnthn> That'd still be a leak. :)

[11:13] <eveo> heh

[11:13] <jnthn> But yeah, not a VM-level leak.

[11:14] <lizmat> perhaps we need an installable Mu.DESTROY to at least keep track of things that *do* get collected   :-)

[11:14] <jnthn> lizmat: That's a pretty invasive way to do it, alas, because the moment something has a DESTROY it lives at least one collection longer

[11:15] <jnthn> --profile=heap and feed it to moar-ha can tell you what is surviving after each collection

[11:15] <jnthn> (moar-ha being installed using zef install App::MoarVM::HeapAnalyzer)

[11:17] <jnthn> 129 MB is a huge amount to leak, though o.O

[11:17] <eveo> It's loading a 30MB sqlite db on each load.

[11:18] <eveo> maybe something in DBIish

[11:18] * eveo will look at it later

[11:18] <jnthn> Hm, maybe it doesn't release that

[11:24] <dogbert17> o/

[11:25] <dogbert17> just noticed that Supply.on-close is not documented in Supply.pod6

[11:27] <dogbert17> Any suggestions as to what it should say, atm I have:

[11:27] <dogbert17> method on-close(Supply:D: &on-close --> Supply:D)

[11:27] <dogbert17> Returns a new supply which will run C<&on-close> when ...

[11:29] <dogbert17> "one of its Taps is closed"?

[11:32] <jnthn> Returns a new C<Supply> which will run C<&on-close> whenever a <Tap> of that C<Supply> is closed. This includes if further operations are chained on to the C<Supply> (for example, C<$supply.on-close(&on-close).map(*.uc)>). When using a C<react> or C<supply> block, using the L<CLOSE> phaser is usually a better choice.

[11:33] <dogbert17> jnthn++, many thanks

[11:34] <dogbert17> do you remember if you refactored/removed/added more more methods ín 2015, i.e. how correct do you believe that the Sypply docs are?

[11:35] <jnthn> I'd have to go through them, I think that many things have been fixed up though

[11:35] <jnthn> I mean, the Supply => Supplier things have been

[11:39] <dogbert17> thanks for looking

[11:46] <dogbert17> docs have definitely improved, compared to say a year ago, but there are still a few holes here and there (plus 260 doc issues, grr)

[11:50] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1097: Test suggestions of misspelled method names

[11:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1097

[11:54] <Geth> ¦ rakudo/nom: 9b8d135827 | MasterDuke17++ | t/05-messages/01-errors.t

[11:54] <Geth> ¦ rakudo/nom: Test suggestions of misspelled method names

[11:54] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9b8d135827

[11:54] <Geth> ¦ rakudo/nom: 8b86b50046 | (Zoffix Znet)++ (committed using GitHub Web editor) | t/05-messages/01-errors.t

[11:54] <Geth> ¦ rakudo/nom: Merge pull request #1097 from MasterDuke17/test_method_suggestions

[11:54] <Geth> ¦ rakudo/nom:

[11:54] <Geth> ¦ rakudo/nom: Test suggestions of misspelled method names

[11:54] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8b86b50046

[11:57] <lizmat> afk until much later&

[12:18] <dogbert17> there was a discussion a couple of days ago wrt 'redo' started by juerd. He pointed out that the example https://docs.perl6.org/syntax/redo was broken. Should I change it to :

[12:18] <dogbert17> loop {

[12:18] <dogbert17> my $x = prompt("Enter a number");

[12:18] <dogbert17> redo unless $x ~~ /\d+/;

[12:18] <dogbert17> last;

[12:18] <dogbert17> }

[12:18] <dogbert17> or is this not idiomatic enough?

[12:21] <eveo> last if ...

[12:22] <eveo> It'll redo automatically

[12:22] <eveo> Which makes it a bad example for redo, I guess :)

[12:22] <dogbert17> :)

[12:57] <Geth> ¦ roast: 4bfd6d2374 | MasterDuke17++ | S32-exceptions/misc.t

[12:57] <Geth> ¦ roast: X::Method::NotFound shouldn't die with no message

[12:57] <Geth> ¦ roast:

[12:57] <Geth> ¦ roast: For RT #131492

[12:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4bfd6d2374

[12:57] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131492

[13:06] <dogbert17> travis seems to suck today

[13:08] <dogbert17> speaking of Supplies, I saw that jnthn had written another excellent piece of documentation wrt Supply.migrate (https://github.com/perl6/doc/issues/1344). Guess we should add that to Supply.pod6 :)

[13:47] <AlexDaniel> MasterDuke++

[13:48] <AlexDaniel> m: say ‘foo’.starts-wizh(‘f’)

[13:48] <camelia> rakudo-moar 8b86b5: OUTPUT: «No such method 'starts-wizh' for invocant of type 'Str'. Did you mean 'starts-with'?␤  in block <unit> at <tmp> line 1␤␤»

[13:48] <AlexDaniel> \o/

[14:11] <eveo> m: dd "".split("=", 2) «||=« ''

[14:11] <camelia> rakudo-moar 8b86b5: OUTPUT: «Non ast passed to WANTED: NQPMu␤Non ast passed to WANTED: NQPMu␤Weird node in analyze: NQPMu␤===SORRY!===␤Unknown QAST node type NQPMu␤»

[14:12] <eveo> https://rt.perl.org/Ticket/Display.html?id=131552

[14:13] <eveo> m: dd "".split("=", 2) Z||= ''

[14:13] <camelia> rakudo-moar 8b86b5: OUTPUT: «===SORRY!===␤Cannot find method 'ann' on object of type NQPMu␤»

[14:21] <AlexDaniel> at least it says “sorry” :)

[14:26] <eveo> Detail views with STDERR/STDOUT are now available for toaster https://toast.perl6.party/

[14:27] <eveo> And yeah, I mixed up args when toasting and STDERR/STDOUT are swapped ATM

[14:27] <eveo> Looks like a lot of burnt toast is because when I toasted 2015.05 the ecosystem JSON issue happened and those registered as Succ incorrectly

[14:27] <eveo> ZofBot: time to re-toast!

[14:27] <ZofBot> eveo, Cannot resolve caller rt107638(1); none of these signatures match:

[14:46] <eveo> Anyone got .cpanreporter/config.ini file for Zef::CPANReporter ? Would be nice to send reports while toasting, but ATM it just tells me it couldn't send a report

[14:48] <ugexe> email_from=foo@bar.com

[14:58] <eveo> That's it?

[14:59] <eveo> Then maybe that PR that just got merged should instead die/warn saying "Found no email in your config file"

[15:00] <eveo> Damn. Having no luck finding which modules beg for github password when installing :/

[15:00] <eveo> and more importantly why, so I could avoid it :/

[15:02] <ugexe> the 'why' is because the source-url is wrong almost always

[15:03] <eveo> Wrong how? I dumped source URLs from ecosystem json and failing to find any modules that beg for passwords based on differnet types of source urls

[15:04] <ugexe> i just added a default email of email_from=anon@mailinator.com and added a die if .cpanreporter/config.ini exists but is missing email_from=

[15:04] <ugexe> git clone https://github.com/far/shit

[15:04] <ugexe> asks for credentials

[15:05] <eveo> Oh, awesome. ugexe++

[15:09] <mst> ugexe: being able to identify which smoker is which and contact the author is important

[15:09] <mst> ugexe: please don't add that default

[15:15] <eveo> Well, `git clone https://github.com/z/z` does ask me for pass, but I can't find any module that causes it with for i in $(perl6 -MWWW -e '.say for jget("http://ecosystem-api.p6c.org/projects.json").map({.<support><source> || .<source-url>}).grep: {.so and .starts-with: "http"}' | sort); do echo "Trying '$i'"; git clone $i; done

[15:16] <ugexe> well you'd have to test the git:// ones as well

[15:16] <ugexe> but s{git://}{https://}

[15:17] <ugexe> also i think it asks for a pass if you exceed your request limit

[15:18] <eveo> Oh, yeah, finally got a match. https://github.com/Altai-man/perl6-Slang-Kazu

[15:19] <ugexe> ok so no default email, but it will die and tell you it cant find email_from... in ~/.cpantesters/config.ini

[15:20] <ugexe> s/cpantesters/cpanreporter/

[15:22] <mst> ugexe: that would be much better, I think

[16:14] * dogbert17 sigh, can't get any doc changes past travis due to timeouts

[16:50] <dogbert17> does Supply.skip(<number>) return a Supply that will throw away the first <number> messages that it receives instead of emitting them?

[17:05] <b2gills> m: for 1..5 { .say; redo if $_ == 2 && ++$ < 3 }

[17:05] <camelia> rakudo-moar 8b86b5: OUTPUT: «1␤2␤2␤2␤3␤4␤5␤»

[17:07] <ugexe> m: my $supplier = Supplier.new; my $supply = $supplier.Supply; $supply = $supply.skip(3); $supply.tap({ say $_ }); $supply.skip(3); $supplier.emit($_) for 1..10; # dogbert17 looks like it

[17:07] <camelia> rakudo-moar 8b86b5: OUTPUT: «4␤5␤6␤7␤8␤9␤10␤»

[17:08] <dogbert17> ugexe: thanks, then I can write some docs for it and hope that Travis won't bog down again :)

[17:11] <dogbert17> ugexe: what do you think of this? https://gist.github.com/dogbert17/18e2818e5256147d38462f823397a70c

[17:14] <dogbert17> hmm, guess I should remove the second '$supply.skip(3);'

[17:15] * dogbert17 does that

[17:19] <ugexe> $supply = $supply.skip(3); probably isn't the idiomatic way to do it, i just did it that way to show it wasn't a setter (with some extra code not in that example)

[17:20] <ugexe> $supply .= skip(3), or my $supply = $supplier.Supply.skip(3) could arguably be used as well

[17:21] <dogbert17> I just commited it but do you think we should change the code example?

[17:24] <ugexe> i'd just use whatever style is used by the other examples for Supply docs (which i dont know what that is)

[17:26] <dogbert17> ugexe: agreed

[17:36] <eveo> Well, sent PRs for all 4-6 repos that had wrong URL that caused github to wait for pass and worked around it in the mean time with echo -e '#!/usr/bin/env perl6\nsay 42' > ~/bin/fake-ask-pass;  chmod +x ~/bin/fake-ask-pass; echo 'export GIT_ASKPASS=~/bin/fake-ask-pass' >> ~/.bashrc

[17:37] <eveo> Pretty sure there are more wrong source URLs, but they didn't ask for passes and just failed

[17:50] <eveo> b2gills: was there an issue in that code?

[17:50] <b2gills> no "redo" discussion from earlier

[17:50] <eveo> Ah

[17:51] <dogbert17> bgills: can I steal your example for the docs?

[17:53] <b2gills> It was meant more as inspiration for someone other than me to come up with something better, but I don't care, use it

[17:57] <dogbert17> cool, I'll put it in the docs for redo a little later unless your example do inspire someone to come up with something that's even better

[18:01] <eveo> ugexe: does zef use http://ecosystem-api.p6c.org/projects.json ? Like that exact URL? I'm still getting JSON errors, even tho I made ecosystem writer write that file atomically :/

[18:06] <ugexe> yeah

[18:06] <ugexe> i could not reproduce the problem with zef yesterday, even though firefox tells me there are errors parsing the json

[18:07] <eveo> ugexe: how to turn autoupdate for p6c from command line?

[18:07] <eveo> turn off I mean

[18:07] <ugexe> you cant, you have to `zef --help` and edit the config file shown

[18:07] <eveo> OK

[18:07] <eveo> Thanks.

[18:10] <ugexe> i *think* the ecosystem json is so big that the 5 second timeout is no longer enough to load it all

[18:12] <ugexe> in that case switching the mirrors to use my ecosystem would work

[18:12] <eveo> I'm running 40 zef procs at the same time BTW

[18:44] * eveo looks over some of the module failures in current toasting run

[18:45] <eveo> Looks like it needs to do three passes or something. 1 run -> take all failed and run them again -> repeat 1 more time -> the failures we currently have are most likely real failure and aren't just flops

[18:46] <eveo> Like DBIish failed due to NativeHelpers::Blob failure which is "The spawned command 'gcc -shared -fPIC  -O3 -DNDEBUG -Wl,-rpath,"//home/cpan/toaster/build/nom/install/lib" -lm -lpthread -lrt -ldl -o lib02-cstruct.so 02-cstruct.o' exited unsuccessfully"

[18:46] <eveo> But the toaster itself is using DBIish that was successfully installed on the same rakudo commit on the same box already

[18:58] <eveo> heh, looks like this toaster doubles as a stresstester for zef too. Got a billion failures with "Must specify something as a path: did you mean '.' for the current directory?

[18:58] <eveo> in code  at /home/cpan/toaster/build/nom/install/share/perl6/site/sources/517DB792F23156A0B0853D9058EA87B5266F5E7F (Zef::Repository::LocalCache) line 29

[18:58] <eveo> "

[18:58] * eveo turns off cache and tries again

[19:20] <eveo> looks like there's a race or something with cpan mirror update too https://gist.github.com/zoffixznet/964c8c2462f9e522fe1476e7689294ac

[19:20] * eveo turns that off as well

[19:37] <ugexe> probably need to add file locking to reading/writing ecosystem index files

[20:03] <eveo> Wonder what's causing dep resolution failure like this one https://gist.github.com/zoffixznet/0d60a0d082f323cced42b5c886a12344

[20:04] <eveo> A few modules have that issue yet install just fine outside the toaster and also I notice it doesn't actually say which dep failed to resolve

[20:05] <eveo> Or this no extracting backend available error, despite the URL being just a plain http https://gist.github.com/zoffixznet/ebe7081df755c48e871236b685dd2c55

[20:06] <eveo> ohhhh

[20:07] <eveo> hm, nope. Thought it was a wrong URL that asked a pass, but it's right

[20:07] <eveo> fails on my other box too

[20:09] <ugexe> it should say which dependencies were missing

[20:09] <ugexe> https://github.com/ugexe/zef/blob/master/lib/Zef/Client.pm6#L155

[20:10] <ugexe> same with the extraction error... its missing the "Maybe you need to enable one of the following backends: ..." message

[20:11] <ugexe> Test::Spintax might be failing because its source-url does not start with git:// or end with .git

[20:11] <eveo> ah

[20:14] <ugexe> https://github.com/daleevans/perl6-Text-Spintax/pull/4/commits :P

[20:15] <eveo> oh heh

[20:20] <eveo> .ask tony-o tony-o/perl6-http-server-threaded and perl6/perl6-http-server-async appear to be the same module. Should one of them be removed from the ecosystem?

[20:20] <yoleaux> eveo: I'll pass your message to tony-o.

[20:30] <ugexe> thats confusing because thats two different modules. but yeah i understand both he and the perl6/ repo now contain both of those modules

[22:01] <Geth> ¦ nqp/master: 11 commits pushed by pmurias++

[22:01] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/3f0b63c9b4...0898da50d7

[22:02] <Geth> ¦ nqp: 0eaf3cb8c0 | pmurias++ | src/vm/js/nqp-runtime/io.js

[22:02] <Geth> ¦ nqp: [js] Make stderr actually write to stderr

[22:02] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/0eaf3cb8c0

[22:02] <Geth> ¦ nqp: 8ec5932b6b | pmurias++ | src/vm/js/nqp-runtime/code-ref.js

[22:02] <Geth> ¦ nqp: [js] Make nqp::istype work on a CodeRef

[22:02] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/8ec5932b6b

[23:34] <eveo> sweet. Blocked a couple of modules that were hanging toast run and just completed a run on HEAD + 2017.05, with double-retesting of failures, and the run took 159656.13user 5954.85system 2:53:43elapsed 1588%CPU (0avgtext+0avgdata 1245832maxresident)k

[23:37] <jnthn> eveo++

[23:37] <MasterDuke> very cool

[23:37] <eveo> db on site updated: https://toast.perl6.party/

[23:38] <eveo> 17 burnt modules. That should be fairly accurate

[23:40] <jnthn> "burnt" :D

[23:40] <eveo> burnt toast :)

[23:40] <jnthn> I was wondering why you were calling it toaster

[23:40] <jnthn> Now it all makes sense :D

[23:40] <eveo> because smoking is bad for you, so toasting :)

[23:40] <eveo> toasting =~= testing

[23:41] <jnthn> mmmm...toasties

[23:41] <jnthn> https://toast.perl6.party/module?module=Log::Async&commit=2017.05-393-g8b86b50 I think I know how to fix next week :)

[23:42] <eveo> ok

[23:43] <jnthn> (IO::Handle refactor fallout)

[23:43] <jnthn> Given basically the entire internals of I/O handles changed in this release, I'm kinda relieved the fallout from that hasn't been bigger. :)

[23:43] <eveo> Yeah :)

[23:44] <jnthn> https://toast.perl6.party/module?module=Audio::Sndfile&commit=2017.05-393-g8b86b50 looks IO-ish too, but maybe more in the bits you were twiddling with

[23:45] <eveo> hm, weird this one says it's already installed: https://toast.perl6.party/module?module=Testing&commit=2017.05 'cause I'm using per-commit temp dir https://github.com/zoffixznet/perl6-Toaster/blob/master/lib/Toaster.pm6#L48 and per-module `-to=` zef dir https://github.com/zoffixznet/perl6-Toaster/blob/master/lib/Toaster.pm6#L61

[23:50] <eveo> ah, but not changing the dir when retrying previous failures.

[23:53] <jnthn> Rest time here; 'night

[23:54] <eveo> night
