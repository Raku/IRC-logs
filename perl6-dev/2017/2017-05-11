[01:11] <samcv> hm i'm thinking of making the comments in pod

[01:11] <samcv> that actually looks pretty nice rendered in pod

[01:11] <samcv> rendering with p6doc: https://gist.github.com/samcv/4c17eb4d7a0b17526a0a175667adb1cf i think i'm gonna go for it

[03:07] <MasterDuke_> .ask masak the inconsistent examples in https://rt.perl.org/Ticket/Display.html?id=122990 now are errors. e.g., `say \(1) ~~ :(int as Str)` gives `===SORRY!=== Error while compiling -e Malformed parameter at -e:1 ------> say \(1) ~~ :(int⏏ as Str)     expecting any of:         constraint         formal parameter`. is that ok or should the ticket be re-worded to make them work at all?

[03:07] <yoleaux> MasterDuke_: I'll pass your message to masak.

[05:29] <lizmat> Files=1192, Tests=56910, 207 wallclock secs (12.38 usr  4.53 sys + 1229.09 cusr 119.04 csys = 1365.04 CPU)

[05:29] <yoleaux> 10 May 2017 09:29Z <nine> lizmat: I do in fact have a filter machine with a timer :) Guess what? In the sleepy state before going to bed, errors are made. Like...forgetting to put the pot in its place. Great way to ensure the next day starts as badly as possible ;)

[07:12] <brrt> good * #perl6-dev

[07:12] <brrt> fun wished for all attendees at the perl toolchain summit

[07:17] <lizmat> thanks

[07:17] <lizmat> we're on #pts@irc.perl.org

[07:33] <brrt> heh, might as well join :-)

[07:51] <chansen_> You may find this document <https://github.com/apple/swift/blob/master/docs/StringManifesto.md> interesting, discusses strings in Swift.

[08:07] <[TuxCM]> This is Rakudo version 2017.04.3-215-g6409ee582 built on MoarVM version 2017.04-62-g362277b7

[08:07] <[TuxCM]> csv-ip5xs        2.903

[08:07] <[TuxCM]> test            12.538

[08:07] <[TuxCM]> test-t           4.245 - 4.252

[08:07] <[TuxCM]> csv-parser      12.601

[09:19] <Geth> ¦ rakudo/nom: 6ea2f12e1c | (Elizabeth Mattijsen)++ | src/core/Mixy.pm

[09:19] <Geth> ¦ rakudo/nom: Simplify Mixy.roll()

[09:19] <Geth> ¦ rakudo/nom:

[09:19] <Geth> ¦ rakudo/nom: Don't need to check for definedness and elems twice.

[09:19] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ea2f12e1c

[09:19] <Geth> ¦ rakudo/nom: acb657fc06 | (Elizabeth Mattijsen)++ | 2 files

[09:19] <Geth> ¦ rakudo/nom: Exit R:Q.MIX-TOTAL-POSITIVE

[09:19] <Geth> ¦ rakudo/nom:

[09:19] <Geth> ¦ rakudo/nom: It was made under the assumption it could be useful for Mixy.pick

[09:19] <Geth> ¦ rakudo/nom: and Mixy.grab, but these methods are not supported on Mixy, so

[09:19] <Geth> ¦ rakudo/nom: abstracting the functionality was not needed.

[09:19] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/acb657fc06

[09:40] <Geth> ¦ roast/master: 4 commits pushed by (Samantha McVey)++

[09:40] <Geth> ¦ roast/master: b2f7c721ae | [unicode-grant] Remove old version of GraphemeBreakTest.t and -gen.p6

[09:40] <Geth> ¦ roast/master: 54c96043c7 | [unicode-grant] Commit New version of GraphemeBreakTest.t

[09:40] <Geth> ¦ roast/master: b4b72e8f29 | Use POD6 for information about this test instead of normal comments

[09:40] <Geth> ¦ roast/master: ad4ee6c27b | Merge pull request #267 from samcv/gcb--

[09:40] <Geth> ¦ roast/master: review: https://github.com/perl6/roast/compare/2b0c18926d...ad4ee6c27b

[09:50] <Geth> ¦ roast: 740ce8f3a9 | (Samantha McVey)++ | S15-nfg/GraphemeBreakTest.t

[09:50] <Geth> ¦ roast: [unicode-grant] Add some usage info and clean up some incorrect comments

[09:50] <Geth> ¦ roast:

[09:50] <Geth> ¦ roast: Test functions the same as previously.

[09:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/740ce8f3a9

[10:35] <Zoffix> m: my @a = ^10; say @a[none 3]

[10:35] <camelia> rakudo-moar acb657: OUTPUT: «none(3)␤»

[10:36] <Zoffix> Ah

[10:52] <Zoffix> NeuralAnomaly: status

[10:52] <NeuralAnomaly> Zoffix, [✘] Next release will be in 1 week and 2 days. Since last release, there are 25 new still-open tickets (12 unreviewed and 0 blockers) and 242 unreviewed commits. See http://perl6.fail/release/stats for details

[10:58] <Zoffix> NeuralAnomaly: blockers

[10:58] <NeuralAnomaly> Zoffix, There is 1 release blocker. See http://perl6.fail/release/blockers

[10:58] <NeuralAnomaly> Zoffix, http://perl6.fail/131247 : )> in regex results in stuff being matched wrongly ( /)> . <(/ )

[10:59] <Zoffix> The OP issue itself isn't a blocker, but I suspect there may be more capture-stuff broken. Gonna write more tests for it this weekened; marked ticket as blocker as a reminder

[11:36] <Geth> ¦ rakudo/nom: c1e681958e | (Elizabeth Mattijsen)++ | src/core/Rakudo/QuantHash.pm

[11:36] <Geth> ¦ rakudo/nom: Fix copy-pasto in R:Q.MIX-ROLL

[11:36] <Geth> ¦ rakudo/nom:

[11:36] <Geth> ¦ rakudo/nom: The last tested element would never be selected thanks to unnecessary

[11:36] <Geth> ¦ rakudo/nom: Intifying.

[11:36] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c1e681958e

[11:46] <Geth> ¦ rakudo/nom: b9222061a3 | (Elizabeth Mattijsen)++ | 2 files

[11:46] <Geth> ¦ rakudo/nom: Make Mixy.roll(N) about 3x faster

[11:46] <Geth> ¦ rakudo/nom:

[11:46] <Geth> ¦ rakudo/nom: - this reverts acb657fc0607bc74253 , as we do need R:Q.MIX-TOTAL-POSITIVE

[11:46] <Geth> ¦ rakudo/nom: - since we need to iterate over the hash anyway, why not use iterator

[11:46] <Geth> ¦ rakudo/nom: - so use R:Q.MIX-ROLL always

[11:46] <Geth> ¦ rakudo/nom: - also get rid of now unneeded R:Q.WeightedRoll class

[11:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b9222061a3

[12:13] <dogbert11> .ask Zoffix any comments about Prey?

[12:13] <yoleaux> dogbert11: I'll pass your message to Zoffix.

[12:14] <Zoffix> .

[12:14] <yoleaux> 12:13Z <dogbert11> Zoffix: any comments about Prey?

[12:15] <Zoffix> dogbert11: I didn't buy it yet. I looked through steam reviews and some people having issues with their save files being corrupted after 20 hours. I figured I got other games ATM and just placed Prey on wishlist; maybe I'll snag it on sale some time in the future

[12:28] <dogbert11> Zoffix: interesting, saw some tests on youtube where they said that the game performs really well (fps wise) even on 'budget' hardware

[12:28] <Zoffix> The only game that performed poorly on my hardware so far is Mass Effect Andromefail

[12:30] <Zoffix> Well, it performed OK after I shut down my VM to free more RAM, but it's the only game that required doing so

[12:31] <timotimo> Zoffix: you may really want to update your weechat

[12:31] <Zoffix> Why?

[12:31] <timotimo> there's been a security vulnerability in versions up to 1.7

[12:32] <timotimo> also, there's been versions between your 1.0.1 and 1.7.1 :)

[12:32] <Zoffix> Which one? The one freenode msged about? I don't care about it.

[12:32] <timotimo> i didn't know freenode msged about that

[12:32] <timotimo> oh, yeah

[12:32] <timotimo> there

[12:33] * dogbert11 runs WeeChat 1.2

[12:33] * timotimo has 1.7 still

[12:33] * Zoffix runs whatever's in the repo

[12:33] <timotimo> would just have to /upgrade, though

[12:34] <Zoffix> Setting up weechat (1.0.1-1+deb8u1) ...

[13:05] <Zoffix> m: class { has Str() $.host = '0.0.0.0' }

[13:05] <camelia> rakudo-moar b92220: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Coercion Str(Any) is insufficiently type-like to qualify a variable␤at <tmp>:1␤------> 3class { has Str() $.host7⏏5 = '0.0.0.0' }␤    expecting any of:␤        constraint␤»

[13:05] <Zoffix> waaat

[13:06] <Zoffix> TWEAK it is, I guess

[13:06] <jnthn> Coercion types are only supported on parameters

[13:07] <Zoffix> That's too bad

[13:07] * Zoffix removes `()` parts and stops careing :)

[13:07] <jnthn> They were added to Perl 6 fairly late on, replacing the parameter syntax `Foo $x as Bar`

[13:08] <jnthn> So they were implemented simply by deconstructing them to use the same internals that `as` did

[13:08] <jnthn> And `as` was tossed before 6.c

[13:09] <jnthn> At some point we'll have to try and figure out a good way to generalize them

[13:09] <jnthn> But it's a bit icky

[13:09] <Zoffix> cool

[13:11] <dogbert11> jnthn: have you seen Zoffix report https://github.com/MoarVM/MoarVM/issues/594 ?

[13:18] <jnthn> Glanced it last night

[13:19] <dogbert11> if you have a hint, given that there's some kind of cast missing, we could do a PR

[13:31] <Geth> ¦ rakudo/nom: 87a95fc135 | (Elizabeth Mattijsen)++ | 2 files

[13:31] <Geth> ¦ rakudo/nom: Make BagHash.grab(N) about 10% faster

[13:31] <Geth> ¦ rakudo/nom:

[13:31] <Geth> ¦ rakudo/nom: - also make it lazy: only items grabbed are actually removed

[13:31] <Geth> ¦ rakudo/nom: - abstract grabbing logic into R:Q.BAG-GRAB

[13:31] <Geth> ¦ rakudo/nom: - give another 20% improvement when moving to containerless BagHashes

[13:31] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/87a95fc135

[14:35] <tadzik> timotimo: oi, does your profiler-tui require some additional rakudo patches?

[14:38] <tadzik> says no such column: callee_id" when I try it

[14:51] <Zoffix> tadzik: are you sure you got latest nqp? That sounds like you might be missing one of the recent updates to its SQL profiler

[14:52] <timotimo> tadzik: it does not

[14:52] <timotimo> oh

[14:52] <timotimo> there was just a rename

[14:53] <timotimo> perhaps the tui needs to be updated for latest nqp?

[14:59] <MasterDuke_> timotimo: is your tui operational? src somewhere?

[14:59] <timotimo> it's not interactive yet

[14:59] <timotimo> it only shows a little part of the call graph

[15:00] <MasterDuke_> ah

[15:00] <timotimo> https://github.com/timo/p6profiler-tools

[15:00] <timotimo> i've decided against making arrow keys and similar things work and just let you navigate with hjkl

[15:02] <MasterDuke_> heh, taking a hard line on the vim/emacs debate i see

[15:02] <tadzik> timotimo: nah, I have the fresh stuff; renames did help, yes

[15:03] <tadzik> timotimo: https://gist.github.com/tadzik/80060834fa015f7938cd4153cfcbe94e

[15:03] <timotimo> EZ

[15:03] <tadzik> but can I config it to use hnei on my colemak? :(

[15:03] <timotimo> only if i'm allowed to use liae

[15:04] <tadzik> you have my blessing

[15:05] <tadzik> also, how did you make it so that when I do SIGINT it prints "Buf[uint8].new(3)" :D

[15:05] <timotimo> makeraw means i get ctrl-c before the shell does ... or something?

[15:07] <tadzik> hm, mebbe

[15:10] <timotimo> perhaps all i need is noecho, though

[15:12] <tadzik> now that I look at it, http://valgrind.org/docs/manual/cl-format.html doesn't look that scary

[15:12] <tadzik> it won't be useful for all of the profiling data we get, but being able to just use qcachegrind would be sick

[15:13] <timotimo> feel free to write something

[15:14] <tadzik> yep, mite do

[15:14] <timotimo> cool

[15:14] <timotimo> did you see the graphviz output for the sqlite data?

[15:17] <tadzik> I saw the file :P Haven't run it yet

[15:17] <timotimo> then allow me to ...

[15:17] <timotimo> give you this link: http://hack.p6c.org/~timo/forestfire_callgraph_4.svg

[15:17] <Geth> ¦ rakudo/nom: 788e6de6dc | (Elizabeth Mattijsen)++ | 8 files

[15:17] <Geth> ¦ rakudo/nom: Bind all values in Baggys

[15:17] <Geth> ¦ rakudo/nom:

[15:17] <Geth> ¦ rakudo/nom: - (Bag|Mix)Hash no longer have containers, so easier on memory

[15:17] <Geth> ¦ rakudo/nom: - updates are handled by special iterators or proxies

[15:17] <Geth> ¦ rakudo/nom: - simplifies Baggy creation/handling significantly

[15:17] <Geth> ¦ rakudo/nom: - removes !PAIR specific methods, just use Pair.new always

[15:17] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/788e6de6dc

[15:17] <timotimo> (it'll start you out on the top left where there's nothing)

[15:18] <tadzik> mm, quite a graph :)

[15:18] <tadzik> sweet

[15:18] <timotimo> isn't it

[15:19] <timotimo> it's amusing that almost every routine has an add_to_cache call coming off of it

[15:19] <timotimo> might want to have a filter option for those

[15:19] <Zoffix> timotimo: what code is that graph for?

[15:20] <Zoffix> Curious to see ->[Numeric]->[Numeric] in it

[15:20] <tadzik> Zoffix: forestfire, I guess :)

[15:20] <timotimo> yup

[15:20] <Zoffix> What's that?

[15:20] <timotimo> hover your mouse over the boxes to see the filename

[15:20] <timotimo> it's the forest fire cellular automaton you can find on rosettacode

[15:20] <Zoffix> Ah, those are Numerics of different types

[15:21] <timotimo> yup

[15:34] <MasterDuke_> can anyone else profile forestfire? it's segfaulting for me

[15:45] <Zoffix> wooo \o/ Tardigrade just took its first breath :) An app with two static pages: https://temp.perl6.party/tg.gif

[15:45] <Zoffix> And the code for it is just `use TG; TG.new.get('/' => 'index').get('/hello').start`

[15:45] <Zoffix> :)

[15:46] <timotimo> MasterDuke_: throw out the signal tap

[15:46] <Zoffix> Well, I was hesitant in the past year, but I guess I *am* writing a web frame work in Perl 6, 'cause I need it for $work and current options don't make me smile

[15:47] <MasterDuke_> timotimo: yeah, thanks, just figured that out

[15:48] <timotimo> i've got some other local changes somewhere

[15:54] <timotimo> Zoffix: one-line web apps, the wave of the future?

[15:54] <Zoffix> Yeah, Serverless is currently the hot trend, I'm predicting Codeless will be next :p

[15:55] <llfourn> Userless is the way of the future.

[16:00] <MasterDuke_> timotimo: are blocks, i.e., { }, free in nqp? i don't think they are, so `if $foo { ... }` is slower than `... if $foo` even in nqp, correct?

[16:00] <timotimo> nqp is a lot better at inlining stuff

[16:01] <timotimo> so it could very well be that such a block is free

[16:01] <MasterDuke_> but not guaranteed?

[16:01] <timotimo> correct

[16:03] <Geth> ¦ rakudo/nom: 3fb3c27ed3 | (Elizabeth Mattijsen)++ | 3 files

[16:03] <Geth> ¦ rakudo/nom: Remove a lot of superstitious decont()s

[16:03] <Geth> ¦ rakudo/nom:

[16:03] <Geth> ¦ rakudo/nom: Probably some case of copy-pasto/cargo culting

[16:03] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3fb3c27ed3

[16:04] <MasterDuke_> are they more expensive even if the block is never descended into?

[16:04] <timotimo> i expect a containing block would start off with a "takeclosure" op for each inner block

[16:04] <timotimo> that allocates a BOOTCode usually

[16:05] <MasterDuke_> i understand some of those words

[16:06] <MasterDuke_> so `if $foo { ... }` could make things slower even if $foo is never true?

[16:07] <timotimo> possibly

[16:07] <timotimo> if the block is inlined fully, it won't make things slower

[16:42] <perlpilot> since the grant for replacing the engine behind blogs.perl.org stalled, it would be neat if someone could put together a Perl 6 solution.   :)

[16:47] <stmuk> or just got "november" working

[16:47] * Zoffix is perfectly happy with perl6.party

[16:48] <Zoffix> In fact, I think the repo even has a beta-quality Perl 6 version of it, back when I gave up due to memory leaks last year

[16:53] <stmuk> s/got/ge

[16:53] <stmuk> t

[16:59] <tadzik> https://tadzik.net/pub/VVqTQ082Wm.png

[16:59] <tadzik> how's that \o/

[17:00] <MasterDuke_> !! nice

[17:02] <tadzik> the inclusive time (at least) is off, but the call structure seems to be preserved

[17:11] <lizmat> cool

[17:58] <Zoffix> Interesting that none of the DateTime::Format modules did the obvious thing and just provide routines one could give to DateTime.format attribute

[17:58] <Zoffix> I meant formatter attr

[17:59] <Zoffix> Not very comfortable that attr is

[18:00] <Zoffix> m: DateTime.now.clone(:formatter{sprintf "%02d/%02d/%04d", .day, .month, .year}).say

[18:00] <camelia> rakudo-moar 3fb3c2: OUTPUT: «11/05/2017␤»

[18:00] <Zoffix> .oO( DateTime.now.format({sprintf "%02d/%02d/%04d", .day, .month, .year}).say )

[18:00] <Zoffix> meh

[18:05] <Zoffix> m: sprintf "%02d/%02d/%04d", .day, .month, .year with DateTime.now

[18:05] <camelia> rakudo-moar 3fb3c2: ( no output )

[18:06] <Zoffix> So I guess printing DateTime objects you got from somewhere isn't reliable, since they could have custom formatters

[18:07] <Zoffix> m: Date.today.clone(:formatter{ .day }).say

[18:07] <camelia> rakudo-moar 3fb3c2: OUTPUT: «2017-05-11␤»

[18:17] <Zoffix> ZOFFLOP: t/spec/S11-modules/nested.t

[18:22] <Geth> ¦ rakudo/nom: a9a161aef4 | (Zoffix Znet)++ | src/core/Date.pm

[18:22] <Geth> ¦ rakudo/nom: Make Date.clone take a formatter

[18:22] <Geth> ¦ rakudo/nom:

[18:22] <Geth> ¦ rakudo/nom: - It's one of the easiest ways to alter the formatter

[18:22] <Geth> ¦ rakudo/nom:     on an existing Date

[18:22] <Geth> ¦ rakudo/nom: - DateTime.clone does take a formatter already

[18:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a9a161aef4

[18:22] <Geth> ¦ roast: f304b9910a | (Zoffix Znet)++ | S32-temporal/Date.t

[18:22] <Geth> ¦ roast: Test Date.clone can take a formatter

[18:22] <Geth> ¦ roast:

[18:22] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/a9a161aef4

[18:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f304b9910a

[18:44] <MasterDuke_> jnthn: are you around? did you happen to see my question yesterday about the change in error message from `my %h{Any} of Str; %h<a>=2` caused by https://github.com/rakudo/rakudo/commit/06729d91e6e2d0c96ee700012827677ee518b737

[18:48] <MasterDuke_> c: 06729d9~1 my %h{Any} of Str; %h<a>=2

[18:48] <committable6> MasterDuke_, ¦06729d9~1: «Type check failed in assignment to %h; expected Str but got Int␤  in block <unit> at /tmp/WQi_IzXz30:1␤ «exit code = 1»»

[18:49] <MasterDuke_> c: 06729d9 my %h{Any} of Str; %h<a>=2

[18:49] <committable6> MasterDuke_, ¦06729d9: «Type check failed in binding assignval; expected Str but got Int␤  in block <unit> at /tmp/poGJVjlhFd:1␤ «exit code = 1»»

[18:49] <Zoffix> ZOFVM: Files=1229, Tests=135468, 114 wallclock secs (22.04 usr  3.25 sys + 2329.11 cusr 172.40 csys = 2526.80 CPU)

[18:49] <MasterDuke_> jnthn: ^^^ lost the name of the variable

[19:12] <MasterDuke_> timotimo: i noticed that a profile of forestfire had bind_one_param as the top by exclusive time, so i tried making a bunch of its ifs postfix, but that actually resulted in 2million more frames created. any idea why? here's the diff https://gist.github.com/MasterDuke17/bc1c749cd9b33b41ff87d9228154956c

[19:21] <Zoffix> One thing I miss from Perl 5 is sub import... Can't for the life of me make `use ... ` line take the args I want it to take

[19:22] <Zoffix> Even passing `[42, :bar<70>]` as positionals make it complain about there being no :bar tag :S

[19:36] <timotimo> MasterDuke_: i have changes locally that make bind_one_param almost completely disappear

[19:36] <timotimo> making the lists flat instead of two-elements for all the cases where it has $x, $y makes that work

[19:38] <MasterDuke_> timotimo: nice. i've seen bind_one_param in other profiles though, so making it faster would also be good

[19:38] <MasterDuke_> don't understand why my patch made it worse

[19:42] <Zoffix> Random fact: Rakudo's version is NOT `before` v42

[19:42] * Zoffix found it out while writing some tests :)

[19:42] <Zoffix> that failed :()

[19:47] <timotimo> MasterDuke_: yeah, we hit it when we can't lower a signature for some reason (there are multiple things the lowerer just refuses to try)

[20:26] <jnthn> c: 06729d9~1 my Str %h{Any}; %h<a> = 2

[20:26] <committable6> jnthn, ¦06729d9~1: «Type check failed in binding assignval; expected Str but got Int␤  in block <unit> at /tmp/SMorwcYVNR:1␤ «exit code = 1»»

[20:26] <jnthn> c: 06729d9 my Str %h{Any}; %h<a> = 2

[20:26] <committable6> jnthn, ¦06729d9: «Type check failed in binding assignval; expected Str but got Int␤  in block <unit> at /tmp/1z8Y0hmleW:1␤ «exit code = 1»»

[20:26] <jnthn> MasterDuke_: You fixed the bug that means, I guess, that the TypedHash[::TValue, ::TKey] didn't get mixed in

[20:27] <jnthn> MasterDuke_: Now that it was been, the type check in the signautre at https://github.com/rakudo/rakudo/blob/eb1ce4142ffa482f03fdca16dda6e091b881a50c/src/core/Hash.pm#L582 fails

[20:27] <jnthn> And so it gives the same error as the case without the "of"

[20:28] <jnthn> So we got the better error due to a bug prior to this :P

[20:28] <MasterDuke_> i fixed something?

[20:31] <jnthn> You made `my %h{Any} of Str` behave the same as `my Int %h{Any}`

[20:31] <jnthn> See my evals above

[20:31] <MasterDuke_> you mean https://github.com/rakudo/rakudo/commit/06729d91e6e2d0c96ee700012827677ee518b737 ?

[20:32] <MasterDuke_> that was you

[20:33] <jnthn> oh wow

[20:33] <jnthn> I presumed you were asking me about a commit you'd done :P

[20:33] <jnthn> Didn't even look at who authored it :D

[20:33] <jnthn> But yeah, it's a fix

[20:33] <MasterDuke_> c

[20:34] <MasterDuke_> c: all my Str %h{Any}; %h<a> = 2

[20:34] <jnthn> That made things better, except in the case it made it works :)

[20:34] <jnthn> *worse

[20:34] <committable6> MasterDuke_, https://gist.github.com/387791da733e822f6d83bf0675f95c60

[20:34] <MasterDuke_> definition of an upgrade...old bugs out, new bugs  in :)

[20:35] <MasterDuke_> huh, last releases that show '%h' were 2014.02,2014.03.01

[20:37] <MasterDuke_> then a bunch of `cannot stringify this` until 2014.09

[20:41] <jnthn> m: dd :p[1]

[20:41] <camelia> rakudo-moar a9a161: OUTPUT: «block <unit>␤»

[20:41] <jnthn> m: dd (:p[1])

[20:41] <camelia> rakudo-moar a9a161: OUTPUT: «:p([1])␤»

[20:42] <jnthn> Zoffix: https://rt.perl.org/Ticket/Display.html?id=131279 doesn't work because :p[1] is the syntax for constructing an adverb with a value that is the array [1] ;)

[20:43] <timotimo> m: dd

[20:43] <camelia> rakudo-moar a9a161: OUTPUT: «block <unit>␤»

[20:43] <timotimo> ^- i still find this kind of a  puzzlin feature

[20:44] <Zoffix> doh :)

[20:44] <Zoffix> Totally slipped my mind :)

[20:44] <Zoffix> m: sub foo { dd }()

[20:44] <camelia> rakudo-moar a9a161: OUTPUT: «sub foo␤»

[21:35] <Zoffix> m: use Test; cmp-ok "foo", '~~', *.contains('bar')

[21:35] <camelia> rakudo-moar a9a161: OUTPUT: «not ok 1 - ␤␤# Failed test at <tmp> line 1␤WhateverCode object coerced to string (please use .gist or .perl to do that)␤  in sub cmp-ok at /home/camelia/rakudo-m-inst-1/share/perl6/sources/C712FE6969F786C9380D643DF17E85D06868219E (Test) line 243…»

[21:36] * Zoffix wonders if there's a good way to improve that...
