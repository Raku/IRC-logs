[00:10] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make Baggy coercion to Set|SetHash 10x faster

[00:10] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/217641653 https://github.com/rakudo/rakudo/compare/6686abbff7c9...f947a197179f

[04:25] <Zoffix> t/spec/S17-promise/nonblocking-await.t flopped

[04:37] <Geth> ¦ rakudo/nom: a62b221a80 | (Zoffix Znet)++ | 4 files

[04:37] <Geth> ¦ rakudo/nom: Fix $/ failing to be set when matching in loops

[04:37] <Geth> ¦ rakudo/nom:

[04:37] <Geth> ¦ rakudo/nom: Bug affects &infix:<~~>, Cool/Str.subst-mutate, Cool/Str.subst,

[04:37] <Geth> ¦ rakudo/nom: Grammar.parse, Grammar.parse-file, Grammar.subparse

[04:37] <Geth> ¦ rakudo/nom:

[04:37] <Geth> ¦ rakudo/nom: We lookup $/ with nqp::getlexdyn(), but for/map loops don't have

[04:37] <Geth> ¦ rakudo/nom: their own $/, so we need to look further up the food chain.

[04:37] <Geth> ¦ rakudo/nom: <…commit message has 6 more lines…>

[04:37] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a62b221a80

[04:44] <Geth> ¦ roast: 2ec8a3ab31 | (Zoffix Znet)++ | S05-capture/match-object.t

[04:44] <Geth> ¦ roast: Test $/ is being set when matching in a loop

[04:44] <Geth> ¦ roast:

[04:44] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/a62b221a80

[04:44] <Geth> ¦ roast: Bug find: https://irclog.perlgeek.de/perl6/2017-04-02#i_14362509

[04:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2ec8a3ab31

[05:22] <Zoffix> A'ight. April 2nd. Time to...

[05:22] <IOninja> Ninja it \o/

[05:42] <Geth> ¦ rakudo/nom: 9d8d7b26dc | (Zoffix Znet)++ | docs/2017-IO-Grant--Action-Plan.md

[05:42] <Geth> ¦ rakudo/nom: [io grant] Log all changes to plan made during review period

[05:42] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9d8d7b26dc

[06:01] <Geth> ¦ roast: 07b5260611 | (Zoffix Znet)++ | S06-multi/type-based.t

[06:01] <Geth> ¦ roast: Remove trailing whitespace

[06:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/07b5260611

[06:03] <Geth> ¦ roast: 14b6844d29 | (Zoffix Znet)++ | S06-multi/type-based.t

[06:03] <Geth> ¦ roast: [io grant] Use Numeric instead of IO role in dispatch test

[06:03] <Geth> ¦ roast:

[06:03] <Geth> ¦ roast: The test uses IO role to test dispatch based on a role, but IO role

[06:03] <Geth> ¦ roast: is being removed. Since this test is about testing dispatch and not the

[06:03] <Geth> ¦ roast: IO role itself, it's OK to change it to test dispatch using Numeric

[06:03] <Geth> ¦ roast: role instead.

[06:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/14b6844d29

[06:07] <Geth> ¦ roast/6.c-errata: fa5d0bc5c1 | (Zoffix Znet)++ | S06-multi/type-based.t

[06:07] <Geth> ¦ roast/6.c-errata: [io grant] Use Numeric instead of IO role in dispatch test

[06:07] <Geth> ¦ roast/6.c-errata:

[06:07] <Geth> ¦ roast/6.c-errata: The test uses IO role to test dispatch based on a role, but IO role

[06:07] <Geth> ¦ roast/6.c-errata: is being removed. Since this test is about testing dispatch and not the

[06:07] <Geth> ¦ roast/6.c-errata: IO role itself, it's OK to change it to test dispatch using Numeric

[06:07] <Geth> ¦ roast/6.c-errata: role instead.

[06:07] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/fa5d0bc5c1

[06:08] <Geth> ¦ rakudo/nom: 87987c2dcb | (Zoffix Znet)++ | 5 files

[06:08] <Geth> ¦ rakudo/nom: [io grant] Remove `role IO` and its .umask method

[06:08] <Geth> ¦ rakudo/nom:

[06:08] <Geth> ¦ rakudo/nom: Moved the IO enums to the next file listed in the _core_sources

[06:08] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/87987c2dcb

[06:43] <Geth> ¦ rakudo/nom: 36ad92a8b4 | (Zoffix Znet)++ | src/core/IO/Handle.pm

[06:43] <Geth> ¦ rakudo/nom: [io grant] Remove 15 methods from IO::Handle

[06:43] <Geth> ¦ rakudo/nom:

[06:43] <Geth> ¦ rakudo/nom: Removes .chmod, .IO, .e, .d, .f, .s, .l, .r, .w, .x,

[06:43] <Geth> ¦ rakudo/nom: .modifies, .accessed, .changed, .mode, .watch

[06:43] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/36ad92a8b4

[06:44] <IOninja> Good riddance. Not a single stresstest failure with that change :/

[06:45] <Geth> ¦ rakudo/nom: 16a201cc95 | (Zoffix Znet)++ | t/spectest.data

[06:45] <Geth> ¦ rakudo/nom: Mark S10-packages/precompilation.t as slow test

[06:45] <Geth> ¦ rakudo/nom:

[06:45] <Geth> ¦ rakudo/nom: Takes 21s on my box

[06:45] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/16a201cc95

[07:02] <Geth> ¦ rakudo/nom: 7dc40a43de | (Zoffix Znet)++ | docs/2017-IO-Grant--Action-Plan.md

[07:02] <Geth> ¦ rakudo/nom: List IO::Handle.Supply(:bin) change as a 6.c change, not 6.d change

[07:02] <Geth> ¦ rakudo/nom:

[07:02] <Geth> ¦ rakudo/nom: It was miscategorized.

[07:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7dc40a43de

[07:04] <IOninja> ugh

[07:05] <IOninja> A portion of the plan was written with my assumption that we can do whatever we want in 6.d, not that it was additive :/

[07:05] <IOninja> So changes like "Make IO::Path.abspath a private method in 6.d" are kinda weird :/

[07:08] <IOninja> m: use MONKEY; augment class IO::Path { method !abspath { 'meow' }; method abspath { die 'No such method in 6.d' }; method x { self!abspath }; method new(|) {self.bless}; }; with IO::Path.new("x") { dd .x; dd .abspath}

[07:08] <camelia> rakudo-moar 16a201: OUTPUT: «"meow"␤No such method in 6.d␤  in method abspath at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[07:09] <IOninja> Is the idea to do stuff like that like that ^?

[07:10] <IOninja> I guess there's a way to remove the methods in augmentations... I just don't know it

[07:25] <Geth> ¦ rakudo/nom: e3d487c345 | (Zoffix Znet)++ | docs/2017-IO-Grant--Action-Plan.md

[07:25] <Geth> ¦ rakudo/nom: Move IO::Handle.lock and IO::Path.new-from-absolute-path changes to 6.c

[07:25] <Geth> ¦ rakudo/nom:

[07:25] <Geth> ¦ rakudo/nom: - Neither is documented, tested, or used in ecosystem (just one use in zef)

[07:25] <Geth> ¦ rakudo/nom:     so it's safe to change in 6.c

[07:25] <Geth> ¦ rakudo/nom: - In addition, IO::Path.new-from-absolute-path has a security issue in it

[07:25] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e3d487c345

[07:27] <samcv> .cc6539bcfba9

[07:27] <samcv> <samcv> idk is there a remove method magic thig

[07:27] <samcv> <samcv> like how you can add them

[07:27] <samcv> <samcv> https://docs.perl6.org/language/mop

[07:27] <samcv> <samcv> probably one that will let you remove one

[07:27] <samcv> IOninja, maybe that is helpful? idk

[07:29] <IOninja> Well yeah, there's an .^add_method but no .^remove_method IIRC

[07:29] <IOninja> But I'd guess there might be a way to poke into symbol table or something

[07:29] <samcv> :/

[07:30] <IOninja> t/pod-htmlify.t ...... 1/4 No such method 'IO' for invocant of type 'IO::Handle+{File::Temp::File::Temp::AutoUnlink}'

[07:30] <IOninja> And the IO Grant claims its first victim :( that didn't take long

[07:30] <samcv> heh

[08:34] <Zoffix> ❗❗❗🌟🌟🌟❇️❇️❇️🌠🌠🌠🎉🎉🎉⚠️⚠️⚠️🚧🚧🚧🌈🌈🌈

[08:34] <Zoffix> Upgrade Information for Changes Due to IO Grant Work: http://rakudo.org/2017/04/02/upgrade-information-for-changes-due-to-io-grant-work/

[08:34] <Zoffix> ❗❗❗🌟🌟🌟❇️❇️❇️🌠🌠🌠🎉🎉🎉⚠️⚠️⚠️🚧🚧🚧🌈🌈🌈

[08:57] <Geth> ¦ rakudo/nom: 6e24854971 | (Zoffix Znet)++ | docs/2017-IO-Grant--Action-Plan.md

[08:57] <Geth> ¦ rakudo/nom: Mark IO Action Plan as archived doc

[08:57] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6e24854971

[08:58] <Geth> ¦ rakudo/nom: a5800a1f1e | (Zoffix Znet)++ | 2 files

[08:58] <Geth> ¦ rakudo/nom: [io grant] Implement IO::Handle.spurt

[08:58] <Geth> ¦ rakudo/nom:

[08:58] <Geth> ¦ rakudo/nom: - Move IO::Path.spurt into IO::Handle

[08:58] <Geth> ¦ rakudo/nom: - Mirror old arguments for IO::Path.spurt; will improve them a bit

[08:58] <Geth> ¦ rakudo/nom:     later, when the self.open(|c) stuff in IO::Path is sorted out.

[08:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a5800a1f1e

[09:24] <Geth> ¦ rakudo/nom: aa62cd5b8c | (Zoffix Znet)++ | src/core/io_operators.pm

[09:24] <Geth> ¦ rakudo/nom: [io grant] Remove &tmpdir and &homedir

[09:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aa62cd5b8c

[10:00] <Geth> ¦ roast: 5a7a365d27 | (Zoffix Znet)++ | S16-io/tmpdir.t

[10:00] <Geth> ¦ roast: [io grant] Expand IO::Spec::*.tmpdir tests

[10:00] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5a7a365d27

[10:02] <Geth> ¦ rakudo/nom: 45530cbea1 | (Zoffix Znet)++ | docs/2017-IO-Grant--Action-Plan.md

[10:02] <Geth> ¦ rakudo/nom: Fix typo

[10:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/45530cbea1

[10:10] <Geth> ¦ rakudo/nom: 7b3b62ef98 | (Zoffix Znet)++ | docs/2017-IO-Grant--Action-Plan.md

[10:10] <Geth> ¦ rakudo/nom: Log making all IO routines consistently fail()

[10:10] <Geth> ¦ rakudo/nom:

[10:10] <Geth> ¦ rakudo/nom: This was part of the original IO grant proposal, but apparently was

[10:10] <Geth> ¦ rakudo/nom: missed in the Plan.

[10:10] <Geth> ¦ rakudo/nom:

[10:10] <Geth> ¦ rakudo/nom: Currently many IO methods fail() but many IO subroutines catch those

[10:10] <Geth> ¦ rakudo/nom: failures and throw them. The change will remove that catching and propagate

[10:10] <Geth> ¦ rakudo/nom: <…commit message has 5 more lines…>

[10:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7b3b62ef98

[10:15] <Geth> ¦ rakudo/nom: fb5d7260d9 | (Elizabeth Mattijsen)++ | src/core/Hash.pm

[10:15] <Geth> ¦ rakudo/nom: Make Object Hash.Set(Hash) coercion 12x faster

[10:15] <Geth> ¦ rakudo/nom:

[10:15] <Geth> ¦ rakudo/nom: - for a 10 element object hash, larger hashes will probably be faster still

[10:15] <Geth> ¦ rakudo/nom: - basically first clone the internal hash, then replace values

[10:15] <Geth> ¦ rakudo/nom: - doesn't need any possibly expensive .WHICH re-calculations

[10:15] <Geth> ¦ rakudo/nom: - should also affect many set operators that do a lot of coercions

[10:15] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fb5d7260d9

[10:40] <[Tux]> This is Rakudo version 2017.03-104-g7b3b62ef9 built on MoarVM version 2017.03-88-g21fc7a22

[10:40] <[Tux]> csv-ip5xs        3.021

[10:40] <[Tux]> test            12.366

[10:40] <[Tux]> test-t           4.891 - 4.898

[10:40] <[Tux]> csv-parser      12.666

[10:46] <Geth> ¦ rakudo/nom: 94cb73b9ba | (Elizabeth Mattijsen)++ | src/core/Any.pm

[10:46] <Geth> ¦ rakudo/nom: Baggy/Setty coercers need listification by default

[10:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/94cb73b9ba

[11:09] <Zoffix> m: $ = $*CWD; $*CWD = 42

[11:09] <camelia> rakudo-moar 94cb73: ( no output )

[11:09] <Zoffix> m: $*CWD = 42

[11:09] <camelia> rakudo-moar 94cb73: OUTPUT: «Cannot modify an immutable IO::Path␤  in block <unit> at <tmp> line 1␤␤»

[11:09] <Zoffix> What makes it die on the second version? :/

[11:10] <lizmat> m: $*CWD; $*CWD = 42

[11:10] <camelia> rakudo-moar 94cb73: ( no output )

[11:10] <lizmat> perhaps the $*CWD initializer doesn't return a container

[11:10] <lizmat> before you call $*CWD the first time, it doesn't really exist

[11:11] <Zoffix> hmm

[11:11] <Zoffix> m: $*INITTIME = 42

[11:11] <camelia> rakudo-moar 94cb73: OUTPUT: «Cannot modify an immutable Instant␤  in block <unit> at <tmp> line 1␤␤»

[11:11] <Zoffix> m: m: $*INITTIME; $*INITTIME = 42

[11:11] <camelia> rakudo-moar 94cb73: OUTPUT: «Cannot modify an immutable Instant␤  in block <unit> at <tmp> line 1␤␤»

[11:11] <Zoffix> m: $ = $*INITTIME; $*INITTIME = 42

[11:11] <camelia> rakudo-moar 94cb73: OUTPUT: «Cannot modify an immutable Instant␤  in block <unit> at <tmp> line 1␤␤»

[11:12] <lizmat> I was talking about the specific $*CWD initializer

[11:12] <lizmat> which lives in src/core/Env

[11:13] <Zoffix> m: $*HOME; $*HOME = 42

[11:13] <camelia> rakudo-moar 94cb73: ( no output )

[11:13] <Zoffix> m: $*HOME = 42

[11:13] <camelia> rakudo-moar 94cb73: OUTPUT: «Cannot modify an immutable IO::Path␤  in block <unit> at <tmp> line 1␤␤»

[11:13] <Zoffix> This one's affected too :/

[11:13] * lizmat is testing a fix

[11:13] <Zoffix> Is there a way to avoid this?

[11:13] <Zoffix> OK

[11:16] <lizmat> hmm.... that doesn't work

[11:16] <Zoffix> What?

[11:17] <lizmat> my fix  :-)

[11:17] <Zoffix> Yeah, I mean what did you try?

[11:18] <lizmat> PROCESS::<$CWD> = IO::Path.new($CWD, :$CWD); # need :CWD to prevent looping

[11:18] <lizmat> +    PROCESS::<$CWD>;

[11:18] <Zoffix> Ah

[11:19] <lizmat> ah, I know what it is

[11:19] <Zoffix> INITIALIZE-DYNAMIC

[11:19] <lizmat> I think  :-)

[11:19] <lizmat> missing an "is raw" maybe ?

[11:19] * lizmat tries that

[11:20] <Zoffix> s: &DYNAMIC

[11:20] <SourceBaby> Zoffix, Something's wrong: ␤ERR: Unhandled exception: Missing or wrong version of dependency 'src/Perl6/Grammar.nqp' (from 'gen/moar/main.nqp')␤   at <unknown>:1  (/home/zoffix/services/sourceable/building-perl6/perl6.moarvm:<dependencies+deserialize>)␤

[11:21] <lizmat> yup, that's it, spectesting now

[11:21] <Zoffix> sweet

[11:26] <Zoffix> huggable: atom ide

[11:26] <huggable> Zoffix, https://github.com/perl6/Atom-as-a-Perl6-IDE

[11:27] <Geth> ¦ rakudo/nom: 1b9d53ce5e | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals.pm

[11:27] <Geth> ¦ rakudo/nom: Allow assigning system dynamics on initialization

[11:27] <Geth> ¦ rakudo/nom:

[11:27] <Geth> ¦ rakudo/nom: Spotted by Zoffix++

[11:27] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1b9d53ce5e

[11:30] <Zoffix> lizmat++ thanks

[11:36] <Zoffix> m: -> *@_, *%_ { dd [@_, %_] }("/", :r:w:d:x)

[11:36] <camelia> rakudo-moar 1b9d53: OUTPUT: «[["/"], {:r}]␤»

[11:36] <Zoffix> m: -> *@_, *%_ { dd [@_, %_] }(:r:w:d:x, "/")

[11:36] <camelia> rakudo-moar 1b9d53: OUTPUT: «[["/"], {:d, :r, :w, :x}]␤»

[11:36] * Zoffix wonders if that's a bug :/

[11:36] <lizmat> looks like a bug to me

[11:37] <lizmat> parser bug even  :(

[11:38] <Zoffix> m: dd [:r:w:d:x]

[11:38] <camelia> rakudo-moar 1b9d53: OUTPUT: «[:r]␤»

[11:50] <Zoffix> Filed as https://rt.perl.org/Ticket/Display.html?id=131089

[12:11] <timotimo> Zoffix: seems like you missed the part where jnthn explained why changing methods between 6.c and 6.d is a Very Bad Idea™

[12:11] <timotimo> i'll see if i can find the gist again that has all the explains

[12:11] <timotimo> oh that was quick

[12:11] <timotimo> https://gist.github.com/jnthn/c10742f9d51da80226fa

[12:12] <timotimo> Removal of existing methods, classes, roles, and grammars must go through the deprecation process.

[12:12] <timotimo> that'd be fair

[12:13] <timotimo> The key difference compared to lexical changes is that no attempt is made by the Perl 6 language to prevent changes being visible to a caller using an earlier version of the language. This requires an addition-only backward compatibility policy (which is largely like the Liskov Substitution Principle: the class, after changes, should be usable in place of an earlier version of itself).

[12:13] <timotimo> this is an important part of what i mean

[12:17] <Zoffix> "<timotimo> Zoffix: seems like you missed the part"  what made you say that?

[12:18] <timotimo> you were talking about removing methods

[12:19] <Zoffix> Ah

[12:19] <timotimo> and augmenting classes when some part of the whole program uses 6.d is plenty terrible

[12:19] <timotimo> imagine one module you were using suddenly requires 6.d, and out of nowhere your code no longer works because it used pre-6.d IO api

[12:21] <Zoffix> huggable: versioning :is: https://gist.github.com/jnthn/c10742f9d51da80226fa

[12:21] <huggable> Zoffix, Added versioning as https://gist.github.com/jnthn/c10742f9d51da80226fa

[12:23] <Zoffix> "Any desired changed of behavior that cannot be made while meeting the above rules should be handled by instead providing a new method, or a new type, that provides the desired new behavior."

[12:24] <Zoffix> .oO( .6c-chdir, .6d-chdir, .6e-chdir )

[12:24] <Zoffix> timotimo: yeah, it's the first time I see that gist.

[12:25] <timotimo> dang, that means we messed up!

[12:25] <Zoffix> But based on those rules a lot of what I planned to go to 6.d can be done in 6.c, then

[12:25] <Zoffix> Actually.. *has to* be done in 6.c

[12:26] <Zoffix> Well, I need to re-read the Action Plan.

[12:26] <Zoffix> IO::Path.child -> proposed 6.d change is to make it croak on non-child paths; but adding that in 6.c breaks no test

[12:27] <Zoffix> Gonna re-read after a sleep period.

[12:27] * lizmat hopes Zoffix won't get IO based nightmares

[12:30] <timotimo> sorry :S

[12:33] <Zoffix> heh

[12:34] <Zoffix> timotimo: no, it's good. Would be bad if this was mentioned AFTER I added all the stuff to 6.d :)

[12:34] <Zoffix> I'd just need to publish an addition to the upgrade notice I wrote today.

[12:34] <Zoffix> "Oh BTW, we're also changing all of this stuff, 'cause adding it to 6.d is a PITA" :)

[12:36] <timotimo> %)

[13:09] <Geth> ¦ rakudo/nom: 6636dd7b1f | (Zoffix Znet)++ | src/core/Deprecations.pm

[13:09] <Geth> ¦ rakudo/nom: Reword a conditional

[13:09] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6636dd7b1f

[13:11] <Geth> ¦ rakudo/nom: 32368235cb | (Zoffix Znet)++ | src/core/Deprecations.pm

[13:11] <Geth> ¦ rakudo/nom: Allow Whatever :$up in sub DEPRECATED

[13:11] <Geth> ¦ rakudo/nom:

[13:11] <Geth> ¦ rakudo/nom: - Using Whatever for $up, makes the sub exclude setting from

[13:11] <Geth> ¦ rakudo/nom:     backtrace

[13:11] <Geth> ¦ rakudo/nom: - Seems this would be desired as a default, but unsure what else

[13:11] <Geth> ¦ rakudo/nom:     depends on it reporting stuff for the setting, so adding this

[13:11] <Geth> ¦ rakudo/nom:     as an addon feature

[13:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/32368235cb

[13:20] <Geth> ¦ rakudo/nom: a0ef2ed6ff | (Zoffix Znet)++ | 2 files

[13:20] <Geth> ¦ rakudo/nom: [io grant] Improve &chdir, &indir, and IO::Path.chdir

[13:20] <Geth> ¦ rakudo/nom:

[13:20] <Geth> ¦ rakudo/nom: - Deprecate `:$test` param

[13:20] <Geth> ¦ rakudo/nom: - Use :r, :w, :d, :x named args for tests

[13:20] <Geth> ¦ rakudo/nom: - Use :d test as default instead of :d + :r

[13:20] <Geth> ¦ rakudo/nom: - Make &chdir and &indir propagate Failure, instead of throwing

[13:20] <Geth> ¦ rakudo/nom: - Fix incorrect dir used in &indir if a relative IO::Path is given

[13:20] <Geth> ¦ rakudo/nom: <…commit message has 8 more lines…>

[13:20] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a0ef2ed6ff

[14:21] <Zoffix> TIL sub { END do-stuff }; runs do-stuff even when sub was never run :)

[14:21] <Zoffix> don't know what I was thinking heh

[14:36] <Geth> ¦ roast: d03e936d29 | (Zoffix Znet)++ | packages/Test/Util.pm

[14:36] <Geth> ¦ roast: Implement Test::Util:: make-test-file and make-test-dir

[14:36] <Geth> ¦ roast:

[14:36] <Geth> ¦ roast: - Creates file, optionally spurting content and setting chmod

[14:36] <Geth> ¦ roast: - Creates directory, optionally setting chmod

[14:36] <Geth> ¦ roast: - Removes them on END

[14:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d03e936d29

[14:50] <Geth> ¦ roast: 76a6dad5e5 | (Zoffix Znet)++ | packages/Test/Util.pm

[14:50] <Geth> ¦ roast: Tweak randomized temp path name a bit

[14:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/76a6dad5e5

[15:57] <Geth> ¦ roast: be8a972499 | (Zoffix Znet)++ | packages/Test/Util.pm

[15:57] <Geth> ¦ roast: Make make-temp-dir take chmod as positional

[15:57] <Geth> ¦ roast:

[15:57] <Geth> ¦ roast: To save on typing.

[15:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/be8a972499

[16:08] <Zoffix> I only now got what "unandled Failure in destroy" actually means... :|

[16:27] <tbrowder> Zoffix: ref docs, I just made a change I hope is ok given yr current work; https://github.com/perl6/doc/commit/14ab6b5156

[16:27] <Zoffix> tbrowder: that code example is wrong. You're calling all those methods on Str

[16:29] <tbrowder> arg, i forgo the .IO., thanks; any other problem you see?

[16:30] <Zoffix> Nope.

[16:31] <tbrowder> the reference in the L<> block may need tweaking i know, i just added the IOs

[16:50] <Zoffix> isa-ok would benefit from handling Failures. But adding that feature makes a couple of tests fail because they assume the failure is still explosive after isa-ok :/

[16:50] <Zoffix> I'm getting spammed with "unandled Failure in destroy" in my test run :\

[16:54] <Zoffix> fails-like {…}, Some::Exception would be handy :/

[17:11] <timotimo> i think we have that

[17:11] <timotimo> oh

[17:11] <timotimo> "fails", you are already aware of "dies-like"

[17:11] <timotimo> you can cook your own typecheck that won't disarm a failure by going through the object's .WHAT

[17:13] <Zoffix> I *do* want to disarm it.

[17:14] <timotimo> oh!

[17:14] <Zoffix> Well, not anymore because I changed my code to do it manually, but I'd hope `isa-ok` would do it for me

[17:26] <Geth> ¦ roast: f48198fd10 | (Zoffix Znet)++ | S32-io/indir.t

[17:26] <Geth> ¦ roast: [io grant] Test &indir

[17:26] <Geth> ¦ roast:

[17:26] <Geth> ¦ roast: Rakudo impl: https://github.com/rakudo/rakudo/commit/a0ef2ed6ff

[17:26] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f48198fd10

[17:27] <Geth> ¦ roast: b2d17da92d | (Zoffix Znet)++ | S32-io/indir.t

[17:27] <Geth> ¦ roast: Use proper plan and add vim markings

[17:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b2d17da92d

[18:08] <Geth> ¦ rakudo/nom: ca1acb727b | (Zoffix Znet)++ | src/core/io_operators.pm

[18:08] <Geth> ¦ rakudo/nom: [io grant] Fix race in &indir(IO::Path …)

[18:08] <Geth> ¦ rakudo/nom:

[18:08] <Geth> ¦ rakudo/nom: Do not use IO::Path.chdir… at least for now… as it is racy. Instead,

[18:08] <Geth> ¦ rakudo/nom: copy over the file tests into &indir impl.

[18:08] <Geth> ¦ rakudo/nom:

[18:08] <Geth> ¦ rakudo/nom: Fixes race for IO::Path argument, but not for Str, which probably

[18:08] <Geth> ¦ rakudo/nom: can't be fixed, since the race is inside teh coercer when Str gets

[18:08] <Geth> ¦ rakudo/nom: coerced into an IO::Path.

[18:08] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ca1acb727b

[18:10] <Geth> ¦ roast: bd468366eb | (Zoffix Znet)++ | S32-io/indir.t

[18:10] <Geth> ¦ roast: [io grant] Amend &indir race tests

[18:10] <Geth> ¦ roast:

[18:10] <Geth> ¦ roast: - Make the race conditions much more racy

[18:10] <Geth> ¦ roast: - Remove tests for &indir(Str), as that race probably can't be fixed

[18:10] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bd468366eb

[18:19] <Zoffix> 2:20PM... looks like I'm way past my bed time :}

[18:19] * Zoffix goes for a power nap

[18:20] <ugexe> # NOTE: we need this extra block <- wonder if that block is still needed since it was referring to $*CWD being empty (which was fixed recently?)

[18:24] <Zoffix> Nope, not fixed. The code's basically ends up as my $*CWD; $path = "foo".IO; $*CWD = $path; but the extra block moves that `my` after the coercer coerces the parameter

[18:25] <ugexe> ah

[18:25] <Zoffix> m: -> IO() $ { my $*CWD }(class Foo { method IO { dd $*CWD } })

[18:25] <camelia> rakudo-moar a0ef2e: OUTPUT: «Any $*CWD = Any␤»

[18:25] <Zoffix> m: -> IO() $ {  }(class Foo { method IO { dd $*CWD } })

[18:25] <camelia> rakudo-moar a0ef2e: OUTPUT: «IO::Path <element> = "/home/camelia".IO(:SPEC(IO::Spec::Unix),:CWD("/home/camelia"))␤»

[18:25] <Zoffix> m: -> IO() $ { { my $*CWD }  }(class Foo { method IO { dd $*CWD } })

[18:25] <camelia> rakudo-moar a0ef2e: OUTPUT: «IO::Path <element> = "/home/camelia".IO(:SPEC(IO::Spec::Unix),:CWD("/home/camelia"))␤»

[22:26] <Geth> ¦ rakudo/nom: dcebce4d60 | (Elizabeth Mattijsen)++ | 3 files

[22:26] <Geth> ¦ rakudo/nom: Streamline tai/epoch conversion / leap-second check

[22:26] <Geth> ¦ rakudo/nom:

[22:26] <Geth> ¦ rakudo/nom: - make internal tables native, adapt update script accordingly

[22:26] <Geth> ¦ rakudo/nom: - use native ints in calculation

[22:26] <Geth> ¦ rakudo/nom:   This assumes we will no longer have 32bit machines by 2038.

[22:26] <Geth> ¦ rakudo/nom: - rewrite in nqp ops

[22:26] <Geth> ¦ rakudo/nom: - e.g. makes now 20% faster

[22:26] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dcebce4d60

[22:28] <lizmat> and this concludes my hacking for today

[22:28] <lizmat> good night, #perl6-dev!

[22:37] <Zoffix> Night!

[22:38] <Zoffix> You're gonna miss the party tho :)

[22:38] * Zoffix cracks open a bottle of carbonated water and bakes a pizza
