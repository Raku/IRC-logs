[00:06] <TimToady> .tell lizmat It makes very little sense to me to do >>+<< lazily, since hypers are eager (unlike Z), and the common case will be that the lengths will match, because why try otherwise? And surely eager can be more efficient...

[00:06] <yoleaux2> TimToady: I'll pass your message to lizmat.

[00:44] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Put the new Zop handling live for 13x improvement

[00:44] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/190745233 https://github.com/rakudo/rakudo/compare/865438983232...f66d4b3a581b

[00:45] <samcv> nice

[00:50] <gfldex> jnthn: running bigpage went from 44s to 28s. Whatever you did, do more of the same. :)

[01:00] <timotimo> *nice*

[01:03] <samcv> \o/ awesome

[01:03] <timotimo> gfldex: did you also measure what happened when samcv put in the new highlighter

[01:03] <gfldex> bigpage doesnt use that

[01:04] <timotimo> oh, OK

[01:04] <timotimo> does it do no highlighting or does it use Inline::Python?

[01:04] <samcv> it just does no highlighting

[01:04] <samcv> there's no Inline::Python anymore

[01:05] <timotimo> mhm

[01:27] <samcv> seems i missed a bunch of atom-language-perl6 tickets. gonna fix then now

[01:45] <samcv> i think i'm going to add a .editorconfig to nqp and rakudo

[01:45] <samcv> it's a file editor agnostic way of specifying things like indentation and line endings

[01:45] <samcv> http://editorconfig.org/

[01:46] <samcv> the atom plugin is actually super nice. it will even warn you when another plugin is interfering with applying the correct settings

[03:43] <MasterDukeLaptop> .ask jnthn do you mind taking a look at https://github.com/perl6/nqp/pull/340? many thanks

[03:43] <yoleaux2> MasterDukeLaptop: I'll pass your message to jnthn.

[03:43] <MasterDukeLaptop> .ask timotimo do you mind taking a look at https://github.com/perl6/nqp/pull/340? many thanks

[03:43] <yoleaux2> MasterDukeLaptop: I'll pass your message to timotimo.

[03:45] <timotimo> it worries me that there's no invalidation for that cache anywhere

[03:45] <yoleaux2> 03:43Z <MasterDukeLaptop> timotimo: do you mind taking a look at https://github.com/perl6/nqp/pull/340? many thanks

[03:52] <MasterDukeLaptop> what would cause it to need invalidation?

[04:00] <MasterDukeLaptop> timotimo: ^^^

[04:09] <timotimo> i'm not sure

[04:09] <timotimo> i don't really know what the exact lifetime of the NFA object is, i'm not sure if it should survive serialization into Grammar.moarvm, for example

[04:10] <timotimo> have you tried if it's possible to use nqp::findmethod instead of find_method?

[04:16] <MasterDukeLaptop> ah, you mentioned that before, but no, i haven't yet

[04:16] <MasterDukeLaptop> is it pretty similar?

[04:20] <MasterDukeLaptop> the expensive call is: $meth := $cursor.HOW.find_method($cursor, $name, :no_trace(1));

[04:21] <MasterDukeLaptop> nqp::findmethod takes an $obj and a $method

[04:21] <MasterDukeLaptop> i guess i'll try $cursor and $name as the $obj and $method

[04:34] <timotimo> yeah

[04:40] <MasterDukeLaptop> so that passes `make m-test` and is ~6s faster than my add_method_cache branch

[04:40] <MasterDukeLaptop> seeing what a rakudo spectest looks like now

[04:41] <MasterDukeLaptop> hmm, but i did just build a moar with all jnthn++

[04:41] <MasterDukeLaptop> 's changes...

[04:42] <MasterDukeLaptop> before i just had the work_lifetime branch checked out

[04:43] <MasterDukeLaptop> so not sure those times are directly comparable

[04:44] <MasterDukeLaptop> and of course would the cache+change to nqp op be even better...

[04:52] <timotimo> ?

[04:54] <MasterDukeLaptop> looks like it passes a spectest

[04:54] <MasterDukeLaptop> yep

[04:55] <timotimo> honestly, i'd prefer only the nqp op, rather than adding a custom cache here. but that's just because i don't know enough about everything going on there

[04:56] <MasterDukeLaptop> well, i think i'd agree that my cache implementation is not the best possible solution

[04:57] <timotimo> can you do an apples-to-apples measurement for just changing to use the nqp op?

[04:58] <MasterDukeLaptop> but it seems like something is non-optimal (given that my cache does make things better) and i'm not sure what the best possible solution s

[04:58] <MasterDukeLaptop> *is

[04:58] <MasterDukeLaptop> yeah, doing that now

[04:58] <MasterDukeLaptop> on the laptop on battery, so stuff is a good bit slower though...

[04:59] <timotimo> oh damn

[04:59] <timotimo> can you try to do it on whateverable's server? power management can really screw up timings

[05:01] <MasterDukeLaptop> this is nearly finished, but i'll see about switching. but >10s swings seems like it would be outside the noise of power management (given that everything else is equal)

[05:02] <timotimo> if you have a sufficient N, then yeah, sure.

[05:09] <MasterDukeLaptop> just re-ran on my branch, now trying branch+plus nqp op

[05:22] <MasterDukeLaptop> these numbers are obviously not perfect, but it looks like 59.6s for stock NQP, 44.5s for my branch, 40.3s for stock NQP+change to nqp:: op, and 42s for stock NQP+change to nqp:: op

[05:25] <MasterDukeLaptop> i

[05:26] <MasterDukeLaptop> 'm off to bed now, but i'll try getting numbers while on AC

[05:27] <timotimo> i *think* you typod something there?

[05:28] <timotimo> the 40s and 42s numbers seem to be for the same thing?

[05:30] <MasterDukeLaptop> timotimo++ right, 42s was my branch+nqp op

[05:30] <MasterDukeLaptop> and now truly off to bed

[05:30] <timotimo> wait so

[05:30] <timotimo> your branch made it a tiny bit slowre

[06:14] <Geth> roast: d3b084f2db | usev6++ | 2 files

[06:14] <Geth> roast: Fudge tests for JVM

[06:14] <Geth> roast: review: https://github.com/perl6/roast/commit/d3b084f2db

[06:54] <[Tux]> This is Rakudo version 2016.12-272-g9a11eacdb built on MoarVM version 2016.12-100-gf9e14e9c

[06:54] <[Tux]> csv-ip5xs        3.188

[06:54] <[Tux]> test            13.323

[06:54] <[Tux]> test-t           5.296

[06:54] <[Tux]> csv-parser      14.764

[06:56] <samcv> hi [Tux] o/

[07:12] <samcv> u: null

[07:12] <unicodable6> samcv, U+0000 NULL [Cc] (control character)

[07:12] <unicodable6> samcv, U+2400 SYMBOL FOR NULL [So] (‚êÄ)

[07:12] <unicodable6> samcv, U+1D159 MUSICAL SYMBOL NULL NOTEHEAD [So] (ùÖô)

[08:22] <arnsholt> [Tux]: Do I remember correctly when I think I've seen a CSV file of historical timings for your benchmark?

[08:24] <[Tux]> yes

[08:25] <arnsholt> What's the address?

[08:29] <[Tux]> http://tux.nl/Talks/CSV6/speed4.html - the link is "Timing log"

[08:31] <lizmat> Files=1164, Tests=56526, 199 wallclock secs (11.84 usr  4.76 sys + 1204.93 cusr 118.17 csys = 1339.70 CPU)

[08:31] <yoleaux2> 00:06Z <TimToady> lizmat: It makes very little sense to me to do >>+<< lazily, since hypers are eager (unlike Z), and the common case will be that the lengths will match, because why try otherwise? And surely eager can be more efficient...

[08:33] <arnsholt> [Tux]: No similar log for the other timings (like csv-ip5xs)?

[08:38] <lizmat> .tell TimToady one would expect this to be lazy, no?   .say for "fileA".IO.lines >>~<< "fileB".IO.lines

[08:38] <yoleaux2> lizmat: I'll pass your message to TimToady.

[08:40] <lizmat> .tell TimToady or something like: ("fileA".IO.lines >>~<< "fileB".IO.lines).head(5)  ???

[08:40] <yoleaux2> lizmat: I'll pass your message to TimToady.

[08:40] <[Tux]> arnsholt, nope, but you can scan the IRC log

[08:41] <diakopter> [Tux]: since the changes have been so dramatic over time, can you make a logarithmic graph edition of those?

[08:42] <[Tux]> don't the zoom'd versions not satisfy that quest?

[08:42] <diakopter> a bit, yes

[08:43] <arnsholt> [Tux]: I could, but that's more work than I have time for right now (should probably be doing $work stuff instead =)

[08:45] <[Tux]> http://www.xs4all.nl/~hmbrand/csv-ip5xs.log

[08:49] <arnsholt> Oh, cheers!

[08:51] <lizmat> https://www.reddit.com/r/perl6/comments/5naomy/where_can_i_start_looking_to_speed_up_regular   # Where can I start looking to speed up regular expressions in Rakudo/NQP/MoarVM?

[08:51] <lizmat> any takers ?

[08:51] <Geth> nqp: 0c249e7236 | (Samantha McVey)++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java

[08:51] <Geth> nqp: Fix RT #117683 on JVM \c[LINE FEED] \c[CARRIAGE RETURN]

[08:51] <Geth> nqp:

[08:51] <Geth> nqp: Also fixes \c[NEXT LINE] as well.

[08:51] <Geth> nqp: review: https://github.com/perl6/nqp/commit/0c249e7236

[08:55] <Geth> rakudo/nom: 5ba982a27e | (Samantha McVey)++ | tools/build/NQP_REVISION

[08:55] <Geth> rakudo/nom: Bump NQP to pull in fix for RT #117683

[08:55] <Geth> rakudo/nom:

[08:55] <Geth> rakudo/nom: https://github.com/perl6/nqp/commit/0c249e7236

[08:55] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5ba982a27e

[08:58] <samcv> anybody know what file in nqp to add nqp::getstrfromname in

[08:59] <samcv> moarvm will have its own op, but other backends need a sub. so putting it in the jvm and js sections would not be correct

[09:08] <arnsholt> samcv: Wait, on MoarVM there will be an nqp::op but on the other backends it'll be a subroutine? Isn't that a bit odd?

[09:10] <samcv> well i mean unless you know some way to make it so that i don't have to add it to the jvm and js sections both

[09:10] <samcv> unless that would be preferred. it's not a very long function

[09:10] <samcv> so I could def do that

[09:18] <arnsholt> I think if there'll be an op on one backend, it should be an op in all backends

[09:18] <arnsholt> Unless it's something VM-specific, like JVM interop of course

[09:18] <samcv> yeah it's not

[09:19] <samcv> ok

[09:19] <arnsholt> But yeah, you can probably just not implement it as well =)

[09:19] <samcv> not sure how to program an op

[09:19] <arnsholt> It's pretty easy on JVM at least (which is where I've done it)

[09:20] <samcv> https://gist.github.com/f385f19111df9ad282472a6d3610fc6f

[09:20] <samcv> well this is what it is

[09:20] <samcv> i don't know how to add an op though‚Ä¶

[09:20] <arnsholt> It's pretty easy!

[09:20] <arnsholt> The implementation itself is just Java code

[09:21] <arnsholt> Then you add a mapping between nqp::op name and Java method backing that op (somewhere, can't remember off-hand, but I'll find it)

[09:22] <arnsholt> The trickiest bit is figuring out where in the 7000 lines of Ops.java to put the code, TBH =)

[09:22] <samcv> hm i don't know java though :(

[09:22] <arnsholt> Oh, right!

[09:23] <arnsholt> In that case, I can just give you the implementation

[09:23] <samcv> ok :D

[09:23] <arnsholt> If you know Perl 6, Java is a breeze =)

[09:24] <samcv> though tbh eventually let's say we have 10 backends. what are we going to do

[09:24] <samcv> not add an op for all 9 other backends that don't have moar's feature. i would think then having it as a sub for the other ones would be fine

[09:25] <Geth> rakudo/nom: 0f149dea15 | (Elizabeth Mattijsen)++ | 3 files

[09:26] <Geth> rakudo/nom: Abstract iterator selection logic into R:I.ZipIterablesOpIterator

[09:26] <Geth> rakudo/nom:

[09:26] <Geth> rakudo/nom: DRY, right?

[09:26] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0f149dea15

[09:36] <arnsholt> samcv: I've added a comment to your gist

[09:37] <samcv> cool, thanks

[09:38] <arnsholt> HTH

[09:39] <arnsholt> I try to take advantage of small things like this to ease more people into doing more things with the internals stuff

[09:39] <arnsholt> (Like any good dealer }:)

[09:39] <samcv> heh

[09:40] <arnsholt> timotimo: IIRC you've done a bit of work on the NFA stuff. Could you sanity-check my comment on the Reddit post lizmat linked?

[09:41] <samcv> nqp-jvm: say 'test'

[09:41] <camelia> nqp-jvm: OUTPUT¬´Error occurred during initialization of VM‚ê§Could not allocate metaspace: 1073741824 bytes‚ê§¬ª

[09:41] <samcv> not sure why this ishappening. sadly it doesn't tell me the revision it's using >:(

[09:44] <travis-ci> Rakudo build failed. Samantha McVey 'Bump NQP to pull in fix for RT #117683

[09:44] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/190884857 https://github.com/rakudo/rakudo/compare/9a11eacdb28e...5ba982a27e01

[09:44] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[10:05] <jnthn> gfldex: (bigpage) Wow, that's a nice result. :)

[10:05] <yoleaux2> 03:43Z <MasterDukeLaptop> jnthn: do you mind taking a look at https://github.com/perl6/nqp/pull/340? many thanks

[10:05] <samcv> hi jnthn morning

[10:05] <jnthn> morning o/

[10:07] <DrForr> Local mornin'.

[10:08] <jnthn> lizmat: I've always had hypers as eager, fwiw

[10:09] <jnthn> lizmat: And Z as being the lazy thing

[10:09] <jnthn> Since hypers visit structure and parallelize...

[10:09] <jnthn> ...and reproduce the structure that came in.

[10:10] <lizmat> jnthn: so you're saying, don't ("fileA".IO.lines >>~<< "fileB".IO.lines).head(5)

[10:10] <lizmat> but do ("fileA".IO.lines Z~"fileB".IO.lines).head(5)  if you want lazy

[10:10] <jnthn> Right

[10:10] <jnthn> That's why we have the both :)

[10:11] <lizmat> well,  TIMTOWTDI  :-)

[10:11] <jnthn> So you can opt in to parallel vs. lazy processing.

[10:11] <lizmat> ok

[10:11] <jnthn> It's just like how .hyper and .race are forms of eager that happen to also paralelize

[10:11] <jnthn> *ll

[10:12] <lizmat> ack

[10:14] <jnthn> m: PROCESS::<&chdir>('src')

[10:14] <camelia> rakudo-moar 0f149d: OUTPUT¬´Failed to change the working directory to 'src': chdir failed: Unknown system error 2‚ê§  in any  at /home/camelia/rakudo-m-inst-1/share/perl6/runtime/CORE.setting.moarvm line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[10:14] <jnthn> m: PROCESS::<&chdir>('..')

[10:14] <camelia> rakudo-moar 0f149d: OUTPUT¬´Failed to change the working directory to '..': Cannot modify an immutable IO::Path‚ê§  in any  at /home/camelia/rakudo-m-inst-1/share/perl6/runtime/CORE.setting.moarvm line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[10:15] <jnthn> Any idea why that explodes with "Cannot modify an immutable IO::Path"?

[10:15] * jnthn ran into this in $dayjob code yesterday

[10:15] <jnthn> Temporarily hacked it to nqp::chdir

[10:15] <jnthn> chdir won't work as I really need to OS-level chdir which is what PROCESS::chdir is meant to do.

[10:16] <jnthn> (Because a NativeCall library I'm calling relies on it...though I filed an issue about making it not need this too)

[10:21] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Abstract iterator selection logic into R:I.ZipIterablesOpIterator

[10:21] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/190891716 https://github.com/rakudo/rakudo/compare/5ba982a27e01...0f149dea15e9

[10:21] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[10:59] <gfldex> jnthn: it's not surprising tho. Bigpage is basicly one multi that is happily calling itself while moving strings around.

[11:01] <jnthn> Does it do a lot of closures, ooc?

[11:01] <gfldex> let me check

[11:01] <jnthn> It's a pretty dramatic win...

[11:01] <jnthn> Does it do I/O also?

[11:04] <gfldex> it does IO and that part is still not thread save (*hint* *hint*)

[11:04] <gfldex> https://github.com/perl6/perl6-pod-to-bigpage/blob/master/lib/Pod/To/BigPage.pm6#L214

[11:04] <gfldex> the business end is about 200 lines long if you want to take a look

[11:05] <jnthn> Ohh...does it delegate to the Perl 6 parser for Pod parsing? I guess yes

[11:06] <gfldex> it does

[11:06] <gfldex> and that part is cached

[11:06] <gfldex> it's loading precomp modules (kind of)

[11:06] <jnthn> Hm, OK :)

[11:06] <gfldex> with a cold cache it takes 2m45s to run

[11:19] <jnthn> .tell MasterDukeLaptop left a comment; hope that helps :)

[11:19] <yoleaux2> jnthn: I'll pass your message to MasterDukeLaptop.

[11:48] <brokenchdir> m: $*CWD = 'x'

[11:48] <camelia> rakudo-moar 0f149d: OUTPUT¬´Cannot modify an immutable IO::Path‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:48] <brokenchdir> a wild guess is somewhere we do $*CWD := IO::Path.new.....

[11:51] <brokenchdir> hm, don't see a place

[11:51] <brokenchdir> m: use nqp; dd nqp::iscont($*CWD)

[11:51] <camelia> rakudo-moar 0f149d: OUTPUT¬´0‚ê§¬ª

[11:52] <lizmat> m:  my $*CWD = 'x'

[11:52] <camelia> rakudo-moar 0f149d: ( no output )

[11:55] <brokenchdir> lizmat: so it's supposed to be immutable?

[11:55] <lizmat> *CWD is supposed to be only changed with chdir()

[11:55] <lizmat> hence its immutabllity

[11:56] <brokenchdir> I guess mistery solved then :)

[11:56] <brokenchdir> 'cause PROCESS::<&chdir> doesn't follow that rule: https://github.com/rakudo/rakudo/blob/0f149de/src/core/io_operators.pm#L148

[11:56] <brokenchdir> jnthn: ^

[13:07] <arnsholt> [Tux]: http://imgur.com/a/vwa4i # Development of csv-ip5xs relative to test-t

[13:08] <arnsholt> Looks like something happened in/to Inline::Perl5 about a year ago, but it's starting to creep back to 1 again

[13:13] <mst> arnsholt: "creep back to 1" ?

[13:15] <ilmari> mst: look at the graph

[13:15] <ilmari> itw as about 0.8, then jumped up to 2.2, but is creeping back down

[13:17] <mst> ah

[13:18] <arnsholt> The numbers compared being running Text::CSV::XS (IIRC) via Inline::Perl5 and [Tux]'s pure Perl 6 Text::CSV

[13:19] <|Tux|> perl5 Text::CSV_XS + Inline::Perl5

[13:23] <arnsholt> Right, right. Almost got it =)

[13:56] <jnthn> lizmat, brokenchicken: I'm still confused though. It seems that both PROCESS::<&chdir> and chdir are assigning to $*CWD

[13:57] <jnthn> But one of them explodes doing so and the other doesn't

[13:57] <lizmat> jnthn: am doing some $otherwork atm, will look tonight

[13:57] * brokenchicken doesn't know why...

[13:57] <jnthn> Sure, no hurry

[14:22] <Geth> rakudo/nom: 563d117694 | (Zoffix Znet)++ | src/core/io_operators.pm

[14:22] <Geth> rakudo/nom: Remove chdir canary

[14:22] <Geth> rakudo/nom:

[14:22] <Geth> rakudo/nom: No longer needed:

[14:22] <Geth> rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2016-12-28#i_13810892

[14:22] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/563d117694

[14:34] <jnthn> ooh, my need to use chdir at all has probably just gone away: https://github.com/frithnanth/perl6-Archive-Libarchive/issues/4 :)

[14:34] <jnthn> But still, guess it's nice to fix PROCESS::chdir still :)

[14:48] <MasterDukeLaptop> jnthn: i just tried using nqp::findmethod() only if not traced, rakudo built fine, but `make install` died with `Cannot find method 'traced' on object of type Perl6::Metamodel::GrammarHOW`

[14:48] <yoleaux2> 11:19Z <jnthn> MasterDukeLaptop: left a comment; hope that helps :)

[14:49] <MasterDukeLaptop> `in block <unit> at tools/build/install-core-dist.pl line 27`

[14:50] <jnthn> Perhaps need an nqp::can($cursor.HOW, 'traced') also

[14:51] <MasterDukeLaptop> yep, gonna add that now

[14:53] <MasterDukeLaptop> i assume if it can't 'traced' i can use the nqp op?

[14:59] <jnthn> aye

[15:03] <MasterDukeLaptop> ah, that works and provides about the same speedup

[15:07] <MasterDukeLaptop> i'll submit a new PR once it passes a spectest

[15:10] <jnthn> \o/

[15:20] <timotimo> arnsholt: your answer was good, i put some extra stuff in about the optimizer

[15:20] <MasterDukeLaptop> spectest passed

[15:21] <arnsholt> timotimo: Cheers!

[15:23] <travis-ci> Rakudo build passed. Zoffix Znet 'Remove chdir canary

[15:23] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/190968362 https://github.com/rakudo/rakudo/compare/0f149dea15e9...563d117694dd

[15:30] <Geth> nqp: MasterDuke17++ created pull request #341: Use nqp::findmethod instead of *.HOW.find_method

[15:30] <Geth> nqp: review: https://github.com/perl6/nqp/pull/341

[15:37] <MasterDukeLaptop> Geth++, was just about to paste the link here myself

[16:38] <jnthn> spectest6 update: fixed the known issue in MoarVM that could affect it. So there's now one way less for it to break. Unfortunately, the way it usually does is still present. I'm looking into it, but it's slow going to reproduce it.

[16:47] <brokenchicken> \o/

[16:49] <jnthn> Darm, I think it's about to hit my first run without triggering the bug, when I'm looking for the bug :P

[16:49] <brokenchicken> :P

[16:49] <timotimo> %)

[16:50] <timotimo> fantastic

[16:50] <jnthn> Not really

[16:50] <jnthn> Since the bug is doubtless still there

[16:50] <timotimo> yeah, it's the not-fun kind of fantastic

[16:53] <Geth> nqp: de709396b6 | MasterDuke17++ | src/QRegex/NFA.nqp

[16:53] <Geth> nqp: Use nqp::findmethod instead of *.HOW.find_method

[16:53] <Geth> nqp:

[16:53] <Geth> nqp: If the meta-object is not being traced we can use the much faster NQP

[16:53] <Geth> nqp: op. This reduces the time needed to compile a script that just defines

[16:53] <Geth> nqp: 50 custom operators from ~60s to ~40s.

[16:53] <Geth> nqp: review: https://github.com/perl6/nqp/commit/de709396b6

[16:53] <Geth> nqp: ac431ced05 | (Jonathan Worthington)++ | src/QRegex/NFA.nqp

[16:53] <Geth> nqp: Merge pull request #341 from MasterDuke17/use_nqp_findmethod_in_QRegex-NFA_when_possible

[16:53] <Geth> nqp:

[16:53] <Geth> nqp: Use nqp::findmethod instead of *.HOW.find_method

[16:53] <Geth> nqp: review: https://github.com/perl6/nqp/commit/ac431ced05

[16:54] <timotimo> cool

[18:02] <jnthn> Think I have a lead on the spectest6 issue

[18:02] <jnthn> (The end-entries/made one)

[18:02] <brokenchicken> \o/

[18:19] <samcv> u: bell

[18:19] <unicodable6> samcv, U+0007 BELL [Cc] (control character)

[18:19] <unicodable6> samcv, U+237E BELL SYMBOL [So] (‚çæ)

[18:19] <unicodable6> samcv, https://gist.github.com/57e7834fb21df6cefe17c1d4d7e17dce

[18:32] <Geth> roast: 1b84a47dbc | (Samantha McVey)++ | S02-literals/char-by-name.t

[18:32] <Geth> roast: Add test that \c[BELL] returns üîî not U+0007

[18:32] <Geth> roast:

[18:32] <Geth> roast: RT #130542

[18:32] <Geth> roast: https://rt.perl.org/Ticket/Display.html?id=130542

[18:32] <Geth> roast: review: https://github.com/perl6/roast/commit/1b84a47dbc

[18:33] <samcv> brokenchicken, where is the code for Geth?

[18:34] <samcv> also what have you done to notviki

[18:34] <[Coke]> I mean, brokenchicken is still not viki.

[18:35] <brokenchicken> Geth: source

[18:35] <Geth> brokenchicken, Source at https://github.com/zoffixznet/geth To add repo, add an 'application/json' webhook on GitHub pointing it to http://geth.perl6.party/?chan=#perl6

[18:35] <brokenchicken> samcv: ^

[18:36] <samcv> what happened to the bold text? also you can use my IRC::TextColor module if you want for bolding/coloring things

[18:36] <brokenchicken> I am using it.

[18:37] <brokenchicken> The channel is +c is what happened.

[18:37] <samcv> oh ok

[18:37] <brokenchicken> Someone with op privs could -c it

[18:37] <samcv> making that a public module was def a good idea

[18:38] <brokenchicken> I didn't really like its interface TBH

[18:38] <samcv> how can it be improved?

[18:39] <samcv> open to suggestions but I wasn't sure what its interface should be in the 1st place :\

[18:41] <brokenchicken> Basically the main issue is the text I'm outputting is already being made up from all sorts of bits and pieces and the last thing I want is length function names and args adding more noise. So the first thing I did is shortened the routine name with constant &Œî = &irc-style-text; and the second thing I'd do to shorten the footprint of the function call is use, say :bold instead of :style<bold> and :red,

[18:41] <brokenchicken> instead of :color<red> and :bgred instead of :bgcolor<red> etc.

[18:41] <brokenchicken> *lengthy

[18:42] <samcv> ah ok

[18:43] <brokenchicken> irc-style-text(:color<red>, :style<bold>, blah blah blah) vs ircstyle(:red, :bold, blah blah blah)

[18:43] <brokenchicken> This is what it currently looks like: https://github.com/zoffixznet/geth/blob/master/lib/Geth/Plugin/GitHub.pm6#L67-L81

[18:45] <samcv> brokenchicken, can i have arbitrary named arguments or do i need to put them all in the sig?

[18:46] <samcv> i will make an ircstyle sub which allows shortened versions

[18:47] <brokenchicken> You could slurp them as *%args and then poke in that hash; die on conflicts (e.g. :red, :blue are passed at the same time) or unknown names (:rainbowcolour) and the rest is the same I think

[18:48] <samcv> thanks :)

[18:55] <Geth> rakudo/nom: 3d86286842 | (Jonathan Worthington)++ | src/core/Mu.pm

[18:55] <Geth> rakudo/nom: Tweak dispatch:<hyper> to avoid a bug, speed up.

[18:55] <Geth> rakudo/nom:

[18:55] <Geth> rakudo/nom: There's currently a code-gen bug in `"{$foo}"`, which affects multi-

[18:55] <Geth> rakudo/nom: threaded programs. Unfortunately, the obvious fix for it regresses a

[18:55] <Geth> rakudo/nom: spectest. In the meantime, we can avoid it in `>>.foo`. This is a

[18:55] <Geth> rakudo/nom: positive change anyway: it's cheaper to simply interpolate a variable,

[18:55] <Geth> rakudo/nom: and pulling the `Str` coercion up to the signature will avoid that

[18:55] <Geth> rakudo/nom: being done multiple times if a non-string is interpolated as the

[18:55] <Geth> rakudo/nom: method name. The `made` and `end-entries` methods are both called in

[18:55] <Geth> rakudo/nom: TAP::Harness with the `>>.foo` syntax, which led to this discovery.

[18:55] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3d86286842

[18:56] <brokenchicken> m: my %styles = <bold italic>.antipairs; my %colours = <red green>.antipairs; sub ircs (*%args) { if %args.keys ‚àñ %styles.keys ‚àñ %colours.keys -> $wrong { die "Unknown argument $wrong passed"; }; my @color = keys %args.keys ‚à© %colours.keys; dd @color; @color > 1 and die "Can't specify more than one colour; you gave @color[]"; my @styles = keys %args.keys ‚à© %styles.keys; dd "Styling with @color[]

[18:56] <camelia> rakudo-moar 563d11: OUTPUT¬´===SORRY!=== Error while compiling <tmp>‚ê§Unable to parse expression in double quotes; couldn't find final '"' ‚ê§at <tmp>:1‚ê§------>  %styles.keys; dd "Styling with @color[]‚èè<EOL>‚ê§¬ª

[18:56] <brokenchicken> and @styles[]"; }; ircs :bold :red; ircs :red :blue;

[18:56] <brokenchicken> :(

[18:58] <brokenchicken> m: my %styles = <bold italic>.antipairs; my %colours = <red green>.antipairs; sub ircs (*%args) {if %args.keys ‚àñ %styles.keys ‚àñ %colours.keys -> $wrong { die "bad: $wrong";}; my @color = keys %args.keys ‚à© %colours.keys; dd @color; @color > 1 and die "too many color @color[]"; my @styles = keys %args.keys ‚à© %styles.keys; dd "using @color[] and @styles[]";}; ircs :bold :red;

[18:58] <camelia> rakudo-moar 563d11: OUTPUT¬´Array @color = ["red"]‚ê§"using red and bold"‚ê§¬ª

[18:58] <brokenchicken> m: my %styles = <bold italic>.antipairs; my %colours = <red green>.antipairs; sub ircs (*%args) {if %args.keys ‚àñ %styles.keys ‚àñ %colours.keys -> $wrong { die "bad: $wrong";}; my @color = keys %args.keys ‚à© %colours.keys; dd @color; @color > 1 and die "too many color @color[]"; my @styles = keys %args.keys ‚à© %styles.keys; dd "using @color[] and @styles[]";}; ircs :bold :blue;

[18:58] <camelia> rakudo-moar 563d11: OUTPUT¬´bad: blue‚ê§  in sub ircs at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:58] <brokenchicken> yey set ops

[19:00] <lizmat> jnthn: will start a HARNESS_TYPE=6 make spectest right away

[19:02] <jnthn> lizmat: OK. I'm running with a MoarVM branch that wasn't merged yet also

[19:03] <jnthn> Still seeing some flakiness

[19:03] <jnthn> But never seen the made/end-entries

[19:03] <jnthn> So seems we're past that one at least

[19:03] <jnthn> Time to go cook dal :) bbl

[19:47] <timotimo> .o( man, what is his dal? )

[19:48] <timotimo> i have no idea why that there is a bug and why that commit fixes anything %)

[19:48] <lizmat> https://en.wikipedia.org/wiki/Dal

[19:49] * lizmat loves Dal

[19:50] <timotimo> was just a bad pun

[19:54] <lizmat> ah, ok  :-)

[19:55] <lizmat> jnthn: 3 consecutive runs without problems  :-)

[19:56] <Geth> rakudo/nom: ba8a2846c0 | (Elizabeth Mattijsen)++ | src/core/Mu.pm

[19:56] <Geth> rakudo/nom: Also adapt two other cases of 3d86286842

[19:56] <Geth> rakudo/nom:

[19:56] <Geth> rakudo/nom: Well, presumably, couldn't hurt  :-)

[19:56] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ba8a2846c0

[20:09] <Geth> nqp/master: 4 commits pushed by samcv++

[20:09] <Geth> nqp/master: d21b11e19a | Add getstrfromname to ops and bump Moar‚Ä¶

[20:09] <Geth> nqp/master: 3f7c360e25 | Regenerate stage0‚Ä¶

[20:09] <Geth> nqp/master: 31b2b51eae | Change Actions.nqp to use getstrfromname on MoarVM‚Ä¶

[20:09] <Geth> nqp/master: 21bfbb9c20 | Merge branch 'getstrfromname'‚Ä¶

[20:09] <Geth> nqp/master: review: https://github.com/perl6/nqp/compare/d21b11e19a‚Ä¶21bfbb9c20

[20:12] <b2gills> samcv: You removed the ÔΩ¢$<integer>ÔΩ£ from the !moar codepath

[20:13] <samcv> https://github.com/perl6/nqp/compare/d21b11e19a%E2%80%A621bfbb9c20#diff-bc544fee7e7dfd7bf9971fd9ded3b25aR214

[20:13] <samcv> looks like it's there to me

[20:14] <samcv> spectest pass as well

[20:14] <b2gills> lines 206 and 207

[20:15] <brokenchicken> samcv: this one: https://github.com/perl6/nqp/blob/master/src/HLL/Actions.nqp#L207

[20:16] <brokenchicken> looks like stuff's missing before "??"

[20:16] <samcv> ah. ok

[20:16] <[Coke]> m: say ( ?? 3 !! 4);

[20:16] <camelia> rakudo-moar ba8a28: OUTPUT¬´===SORRY!=== Error while compiling <tmp>‚ê§Expected a term, but found either infix ?? or redundant prefix ?‚ê§  (to suppress this message, please use a space like ? ?)‚ê§at <tmp>:1‚ê§------> say ( ??‚èè 3 !! 4);‚ê§¬ª

[20:17] <[Coke]> m: my $a := ?? 3 !! 4;

[20:17] <camelia> rakudo-moar ba8a28: OUTPUT¬´===SORRY!=== Error while compiling <tmp>‚ê§Expected a term, but found either infix ?? or redundant prefix ?‚ê§  (to suppress this message, please use a space like ? ?)‚ê§at <tmp>:1‚ê§------> my $a := ??‚èè 3 !! 4;‚ê§¬ª

[20:17] <[Coke]> nqp-j: my $a := ?? 3 !! 4;

[20:17] <lizmat> make: *** [m-spectest6] Segmentation fault: 11   # jnthn  :-(

[20:19] <Geth> nqp: 7b6fff991e | (Samantha McVey)++ | src/HLL/Actions.nqp

[20:19] <Geth> nqp: Add missing <integer> from section in Actcions.nqp for !moar

[20:19] <Geth> nqp:

[20:19] <Geth> nqp: Accidently removed in

[20:19] <Geth> nqp: 31b2b51eae5b9a7ea8dc3c1043544714e0809fd8

[20:19] <Geth> nqp: review: https://github.com/perl6/nqp/commit/7b6fff991e

[20:20] <samcv> there we go. that also pasess nqp test if i reverse the !moar and moar sections

[20:21] <brokenchicken> \o/

[20:21] <samcv> otherwise should be fine and i can bump NQP in rakudo?

[20:23] * brokenchicken has no comments... this stuff's is not what I currently know about.

[20:24] <lizmat> samcv: lemme see if a bump works out ok here :-)

[20:24] <samcv> kk. i know it does for rakudo.moar at least

[20:28] <samcv> hopefully it is all "\c[woman gesturing OK]"

[20:28] <samcv> :P

[20:29] <lizmat> t/spec/S05-mass/properties-general.rakudo.moar  # failed 1 test

[20:29] <samcv> yeah that happened before

[20:29] <lizmat> (still running)

[20:30] <lizmat> samcv: test 602

[20:30] <samcv> from that file?

[20:30] <samcv> yeah

[20:31] <lizmat> yup "space chars"

[20:31] <lizmat> #130483

[20:31] <lizmat> RT #130483

[20:31] <samcv> ye

[20:31] <samcv> i *knew* i opened an RT for it

[20:31] <lizmat> hmmm... seems we lost synopsebot ?

[20:32] <samcv> even though i couldn't find it searching rt for <:space>

[20:32] <samcv> does it not search the body text?

[20:34] <lizmat> m: dd "        " ~~ /<:space>+/

[20:34] <camelia> rakudo-moar ba8a28: OUTPUT¬´Match.new(ast => Any, list => (), hash => Map.new(()), orig => "        ", to => 8, from => 0)‚ê§¬ª

[20:34] <lizmat> $ 6 'dd "        " ~~ /<:space>+/'

[20:34] <lizmat> Nil

[20:34] <lizmat> samcv: that's a regression, I'm afraid

[20:34] <Geth> roast: 9729f3849c | (Samantha McVey)++ | S05-mass/properties-general.t

[20:34] <Geth> roast: Todo failing test RT #130483

[20:34] <Geth> roast:

[20:34] <Geth> roast: https://rt.perl.org/Ticket/Display.html?id=130483

[20:34] <Geth> roast: \#130483: [UNI] Regex Unicode properties check values before checking

[20:34] <Geth> roast: property names

[20:34] <Geth> roast: review: https://github.com/perl6/roast/commit/9729f3849c

[20:34] <samcv> no that failed before

[20:34] <lizmat> it doesn't fail before bumping NQP ?

[20:34] <samcv> before the most recent change

[20:35] <samcv> you sure? well. it's sort of a regression

[20:35] <samcv> but also sort of not

[20:35] <samcv> read the RT https://rt.perl.org/Ticket/Display.html?id=130483

[20:35] <lizmat> camelia is not bumped yet

[20:36] <lizmat> m: say "        " ~~ /<:space>+/

[20:36] <camelia> rakudo-moar ba8a28: OUTPUT¬´ÔΩ¢        ÔΩ£‚ê§¬ª

[20:36] <samcv> well then maybe it broke before the other time i changed the unicode database

[20:36] <samcv> well. the bug is in nqp not moarvm

[20:36] <lizmat> well, but that sorta implies we can't bump nqp  :-(

[20:36] <samcv> m: use nqp; say nqp::unipropcode('space') == nqp::unipropcode('White_Space')

[20:36] <camelia> rakudo-moar ba8a28: OUTPUT¬´False‚ê§¬ª

[20:36] <samcv> it's broken

[20:36] <samcv> right now

[20:37] <samcv> i mean <:space> doesn't work but that's not moarvm's fault

[20:37] <samcv> and we've bumped it before with <:space> failing

[20:38] <samcv> <ws> works fine. so does \s etc.

[20:38] <samcv> but <:space> is matching the LF property

[20:38] <samcv> use nqp; say nqp::unipropcode('space') == nqp::unipropcode('LF')

[20:38] <samcv> m: use nqp; say nqp::unipropcode('space') == nqp::unipropcode('LF')

[20:38] <camelia> rakudo-moar ba8a28: OUTPUT¬´True‚ê§¬ª

[20:38] <lizmat> camelia is currently at HEAD

[20:38] <samcv> yeah

[20:38] <lizmat> and there it works

[20:38] <samcv> well it also doesn't work

[20:38] <lizmat> I bump NQP, and it doesn't work anymore

[20:38] <b2gills> it works for the wrong reason

[20:38] <samcv> because 'space' resolves to 'LF'

[20:38] <lizmat> as a rakudo user, that's all I see

[20:39] <samcv> so it should be broken then?

[20:39] <lizmat> b2gills: so the test is wrong ?

[20:39] <samcv> see bisect from a while ago lizmat https://gist.github.com/Whateverable/50acf5fe072680085746459f144a106f

[20:40] <samcv> it works because it's checking the LF property. and it checks property values before names

[20:41] <Geth> rakudo/nom: c99fbc6793 | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION

[20:41] <Geth> rakudo/nom: Bump NQP to get latest NQP/Moar improvements

[20:41] <Geth> rakudo/nom:

[20:41] <Geth> rakudo/nom: This makes one spectest fail, see:

[20:41] <Geth> rakudo/nom:

[20:41] <Geth> rakudo/nom:   https://irclog.perlgeek.de/perl6-dev/2017-01-11#i_13902378

[20:41] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c99fbc6793

[20:42] <samcv> i mean if people want me to break it again before the next rakudo release i could do it. but that seems wrong to break moarvm on purpose

[20:42] <samcv> but it's basically checking if the 'space' property has the value 'space'. it doesn't. it's a bool property

[20:43] <lizmat> ok, well, we've bumped and the test is fudged

[20:46] <samcv> here is the code https://github.com/perl6/nqp/blob/master/src/vm/moar/QAST/QASTRegexCompilerMAST.nqp#L1439

[20:46] <samcv> that is causing the problem atm

[20:49] <samcv> yay jnth just merged another PR. can make more roast tests after bumping nqp and moar again heh

[20:51] <jnthn> lizmat: Hmm...interseting that it works reliably for you now

[20:51] <lizmat> well, apart from 1 segfault  :-(

[20:51] <samcv> m: say  "\c[woman gesturing OK]"

[20:51] <camelia> rakudo-moar c99fbc: OUTPUT¬´üôÜ‚Äç‚ôÄÔ∏è‚ê§¬ª

[20:51] <samcv> \o/

[20:52] <samcv> really awesome

[20:52] <timotimo> neat. (except my terminal shows only the woman symbol after an empty space)

[20:52] <samcv> yeah mine too

[20:52] <samcv> oh i don't have a space though

[20:52] <samcv> well i don't see one. there's a ZWJ in there tho

[20:52] <jnthn> lizmat: Oh, OK.

[20:52] <jnthn> lizmat: Then "me too"

[20:52] <geekosaur> I got a block [0 1 F/6 4 6]

[20:52] <geekosaur> (which is expected for this version of my client)

[20:52] <lizmat> samcv: I see a woman with hands above her head, is that OK?

[20:52] <samcv> yes

[20:53] <jnthn> lizmat: Except I get the SEGV really often now

[20:53] <lizmat> then it works on OSX

[20:53] <timotimo> really often? :o

[20:53] <lizmat> eh,. macOS

[20:53] <jnthn> Yeah, nearly every spectest6 run

[20:53] <lizmat> hmmm...

[20:53] <jnthn> It's happening in the same place

[20:53] <jnthn> I'm on a branch, will try off that

[20:53] <jnthn> But it happens when it runs into a corrupt Int when doing a full GC collection

[20:54] <jnthn> And I suspect spectest6 does full collections more often

[20:54] <jnthn> After matches perged earlier this week

[20:54] <jnthn> wtf

[20:54] <jnthn> patches merged

[20:54] <timotimo> ah, because of those huge buffers

[20:54] <jnthn> Yeah

[20:54] <lizmat> spooner is everywhere

[20:54] <jnthn> It also likely uses less memory :)

[20:54] <samcv> m: say "\c[woman construction worker]" ~ "\c[PERSONAL COMPUTER]"

[20:54] <camelia> rakudo-moar c99fbc: OUTPUT¬´üë∑‚Äç‚ôÄÔ∏èüíª‚ê§¬ª

[20:55] <samcv> jnthn, if we are segv it is best to do with as little memory as possible

[20:55] <jnthn> Indeed :)

[20:55] <samcv> though one could argue after SEGV we use 0 memory

[20:55] <jnthn> ;)

[20:55] <jnthn> Anyway, I don't think it's a regression, just an unhidden

[20:55] <samcv> memory reduction cut across the board 100x!

[20:56] <timotimo> that's what we get for employing a 100x programmer

[20:56] <jnthn> It's also always an Int that's corrupted

[20:57] <jnthn> Think I've used up my debugging energies for today, though.

[21:01] <timotimo> were you able to figure out in what way it gets corrupted? pointer points off in a random direction?

[21:01] <jnthn> timotimo: Not really, just that it ends up in a state where it's interpreted as a bigint but the digits pointer is junk and so is the size etc.

[21:02] <timotimo> ugh. okay!

[21:02] <Geth> nqp: 10fa80827a | (Samantha McVey)++ | tools/build/MOAR_REVISION

[21:02] <Geth> nqp: Bump MoarVM Fix RT #117683 \c[LINE FEED] \c[CARRIAGE RETURN]

[21:02] <Geth> nqp:

[21:02] <Geth> nqp: Also fixes \c[NEXT LINE] and \c[FORM FEED] as well.

[21:02] <Geth> nqp: MoarVM/MoarVM@ef734fc8d7abaf687c5108f06c181f1bd6333634

[21:02] <Geth> nqp: review: https://github.com/perl6/nqp/commit/10fa80827a

[21:02] <timotimo> so, build moar/master, try "make spectest6", wait for segfault?

[21:02] <jnthn> Yeah

[21:02] <jnthn> Well, do it in gdb

[21:03] <jnthn> But don't use perl6-gdb-m otherwise you end up running all the spectests with that

[21:03] <jnthn> And then things get crazy confused :)

[21:03] <jnthn> And then get bt

[21:03] <timotimo> maybe i can get it to spit out a core file for me

[21:03] <jnthn> If the bt points to gc_cleanup of P6bigint or similar then it matches

[21:05] <Geth> nqp/master: 9 commits pushed by pmurias++

[21:05] <Geth> nqp/master: 1b9f96a64a | [js] Turn nqp::throwpayloadlex into an direct return when possible.‚Ä¶

[21:05] <Geth> nqp/master: 83e0c3395f | [js] When compiling nqp code omit the exception catching mechanism if the return is done directly.‚Ä¶

[21:05] <Geth> nqp/master: 0e7c43fd24 | [js] Fix bug.‚Ä¶

[21:05] <Geth> nqp/master: ef6d29bb0c | [js] Improve error message when a REPR doesn't have defined serialization.‚Ä¶

[21:05] <Geth> nqp/master: 7e96e4e68a | [js] Make nqp::throwpayloadlexcaller skip compiler stubs correctly.‚Ä¶

[21:05] <Geth> nqp/master: 69c3b31a26 | [js] Dump less info about Objects but in a way that's not broken by Proxy usage.‚Ä¶

[21:05] <Geth> nqp/master: 89c0460389 | [js] Check if nqp::handlepayload is toplevel.‚Ä¶

[21:05] <Geth> nqp/master: e9f64b93b9 | [js] Add support for nqp::p6captureouters2.‚Ä¶

[21:05] <Geth> nqp/master: 4bdddb6fd4 | [js] Serialize placeholder ctxs for scopes that haven't been invoked yet as if they didn't exist yet.‚Ä¶

[21:05] <Geth> nqp/master: review: https://github.com/perl6/nqp/compare/1b9f96a64a‚Ä¶4bdddb6fd4

[21:05] <Geth> rakudo/nom: 644cd342d7 | (Samantha McVey)++ | tools/build/NQP_REVISION

[21:05] <Geth> rakudo/nom: Bump MoarVM Fix RT #117683 \c[LINE FEED] \c[CARRIAGE RETURN]

[21:05] <Geth> rakudo/nom:

[21:05] <Geth> rakudo/nom: Also fixes \c[NEXT LINE] and \c[FORM FEED] as well.

[21:05] <Geth> rakudo/nom: MoarVM/MoarVM@ef734fc8d7abaf687c5108f06c181f1bd6333634

[21:05] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/644cd342d7

[21:06] <samcv> mst, do you have ops in #perl6-dev?

[21:06] <samcv> i forget who does

[21:06] <mst> samcv: what do you need?

[21:07] <samcv> remove -c

[21:07] <samcv> so Geth can use bold

[21:07] <brokenchicken> +1

[21:07] <timotimo> mst has all the ops everywhere

[21:07] <timotimo> (+1 on -c)

[21:12] <samcv> also how do i get a fancy perl6 hostmask ;)

[21:12] <samcv> always good to get exciting things to tweet about https://twitter.com/samcv6/status/819290726919872512

[21:13] * moritz always happy for Perl 6 news to retweet as @perl6org :-)

[21:16] <brokenchicken> yey

[21:17] <Geth> roast/6.c-errata: 3eb86fd12c | (Samantha McVey)++ | 2 files

[21:17] <Geth> roast/6.c-errata: Replace Unicode 1 names with Alias Names in \c[‚Ä¶]

[21:17] <Geth> roast/6.c-errata:

[21:17] <Geth> roast/6.c-errata: As per discussion with @TimToady

[21:17] <Geth> roast/6.c-errata: https://irclog.perlgeek.de/perl6-dev/2017-01-10#i_13888858

[21:17] <Geth> roast/6.c-errata: review: https://github.com/perl6/roast/commit/3eb86fd12c

[21:17] <timotimo> hooray

[21:17] <moritz> what a bold move!

[21:18] <samcv> we all know THIS IS HOW TO TYPE IN BOLD

[21:18] <moritz> equal rights for bots and humans!

[21:18] <samcv> heh

[21:18] * moritz nearly wrote "butts" instead of "bots" above

[21:18] <timotimo> :P

[21:19] <mst> it's ok, if it actually annoys me I'll turn filtering on on my clients

[21:19] <timotimo> it took me a moment to notice that i actually did get kicked, that it wasn't just a fancy /me or something

[21:20] <timotimo> 'til now i had no idea how my client would display getting kicked

[21:20] <timotimo> because i'm so nice

[21:22] <samcv> looks like ignoremark doesn't work for emoji

[21:23] <samcv> m: say "\c[PREGNANT WOMAN, ZERO WIDTH JOINER, MALE SIGN]"

[21:23] <camelia> rakudo-moar 644cd3: OUTPUT¬´ü§∞‚Äç‚ôÇ‚ê§¬ª

[21:23] <samcv> heh

[21:24] <samcv> tho pretty sure that makes sense not to have gendered emoji

[21:24] <moritz> samcv: you've opened a can of ... smilies there :-)

[21:35] <Geth> roast: 23c7461aa5 | (Samantha McVey)++ | 2 files

[21:35] <Geth> roast: Replace Unicode 1 names with Alias Names in \c[‚Ä¶]

[21:35] <Geth> roast:

[21:35] <Geth> roast: As per discussion with @TimToady

[21:35] <Geth> roast: https://irclog.perlgeek.de/perl6-dev/2017-01-10#i_13888858

[21:35] <Geth> roast:

[21:35] <Geth> roast: Remove fudged test for rakudo since it has been fixed on JVM and MoarVM

[21:35] <Geth> roast: review: https://github.com/perl6/roast/commit/23c7461aa5

[21:36] <Geth> roast: 6902a3e69a | (Samantha McVey)++ | S02-literals/char-by-name.t

[21:36] <Geth> roast: Fix test plan for S02-literals/char-by-name.t

[21:36] <Geth> roast: review: https://github.com/perl6/roast/commit/6902a3e69a

[21:41] <Geth> roast: 0993df4a30 | (Samantha McVey)++ | S02-literals/char-by-name.t

[21:41] <Geth> roast: Add test for \c and Emoji Sequences

[21:41] <Geth> roast:

[21:41] <Geth> roast: skip the test for JVM though.

[21:41] <Geth> roast: review: https://github.com/perl6/roast/commit/0993df4a30

[21:45] <Geth> rakudo/nom: 8f3476d5d4 | (Elizabeth Mattijsen)++ | src/core/List.pm

[21:45] <Geth> rakudo/nom: Streamline List.from-iterator about 10%

[21:45] <Geth> rakudo/nom:

[21:45] <Geth> rakudo/nom: Mainly possible because it doesn't need to call reification-target,

[21:45] <Geth> rakudo/nom: because Array has its own .from-iterator.

[21:45] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8f3476d5d4

[21:46] <lizmat> and with that I wish #perl6-dev a good night

[21:46] <samcv> night o/

[22:03] <brokenchicken> night

[22:17] <brokenchicken> m: use Test; is '                ' ~~ /<:space>+/, ' ', 'space chars';

[22:17] <camelia> rakudo-moar 8f3476: OUTPUT¬´not ok 1 - space chars‚ê§‚ê§# Failed test 'space chars'‚ê§# at <tmp> line 1‚ê§# expected: ' '‚ê§#      got: (Nil)‚ê§¬ª

[22:17] <brokenchicken> star: use Test; is '                ' ~~ /<:space>+/, ' ', 'space chars';

[22:17] <camelia> star-m 2016.10: OUTPUT¬´not ok 1 - space chars‚ê§‚ê§# Failed test 'space chars'‚ê§# at <tmp> line 1‚ê§# expected: " "‚ê§#      got: Match.new(ast => Any, list => (), hash => Map.new(()), orig => "                ", to => 16, from => 0)‚ê§¬ª

[22:17] <brokenchicken> .oO( how was it ever passing... )

[22:18] <brokenchicken> star: use Test; is '        ' ~~ /<:space>+/, ' ', 'space chars';

[22:18] <camelia> star-m 2016.10: OUTPUT¬´not ok 1 - space chars‚ê§‚ê§# Failed test 'space chars'‚ê§# at <tmp> line 1‚ê§# expected: " "‚ê§#      got: Match.new(ast => Any, list => (), hash => Map.new(()), orig => "        ", to => 8, from => 0)‚ê§¬ª

[22:19] <brokenchicken> poorly-written test. should've used proper "\t" or whatever the actual whitespace up in there is :(

[22:20] <brokenchicken> star: use Test; is "\t \t" ~~ /<:space>+/, ' ', 'space chars';

[22:20] <camelia> star-m 2016.10: OUTPUT¬´ok 1 - space chars‚ê§¬ª

[22:20] <brokenchicken> m: use Test; is "\t \t" ~~ /<:space>+/, ' ', 'space chars';

[22:20] <camelia> rakudo-moar 8f3476: OUTPUT¬´not ok 1 - space chars‚ê§‚ê§# Failed test 'space chars'‚ê§# at <tmp> line 1‚ê§# expected: ' '‚ê§#      got: (Nil)‚ê§¬ª

[22:20] <brokenchicken> there we go.

[22:20] <brokenchicken> NeuralAnomaly: status

[22:20] <NeuralAnomaly> brokenchicken, [‚úò] Next release will be in 1 week and 2 days. Since last release, there are 81 new still-open tickets (1 unreviewed and 0 blockers) and 258 unreviewed commits. See http://perl6.fail/release/stats for details

[22:21] <brokenchicken> So we're fudging that test in 6.c-errata, right?

[22:23] <Geth> roast: 4808c1f90f | (Zoffix Znet)++ | S05-mass/properties-general.t

[22:23] <Geth> roast: Make test more clear

[22:23] <Geth> roast:

[22:23] <Geth> roast: No functional change. Simple change tabs in string to "\t" chars to make it

[22:23] <Geth> roast: more obvious what's in that string.

[22:23] <Geth> roast: review: https://github.com/perl6/roast/commit/4808c1f90f

[22:23] * brokenchicken is off for the night

[22:40] <brokenchicken> .ask samcv would you mind fudging the /<:space>+/ test in S05-mass/properties-general.t in 6.c-errata? I vaguely recall you explaining it was passing earlier for the wrong reason; I figure you'd be able to write a better commit message than me.

[22:40] <yoleaux2> brokenchicken: I'll pass your message to samcv.

[22:47] <samcv> brokenchicken, is the commit message from https://github.com/perl6/roast/commit/9729f3849 fine

[22:47] <yoleaux2> 22:40Z <brokenchicken> samcv: would you mind fudging the /<:space>+/ test in S05-mass/properties-general.t in 6.c-errata? I vaguely recall you explaining it was passing earlier for the wrong reason; I figure you'd be able to write a better commit message than me.

[22:51] <Geth> roast/6.c-errata: b6ffcf6347 | (Zoffix Znet)++ | S05-mass/properties-general.t

[22:51] <Geth> roast/6.c-errata: Fudge test that was passing for the wrong reason.

[22:51] <Geth> roast/6.c-errata:

[22:51] <Geth> roast/6.c-errata: See RT#130483 https://rt.perl.org/Ticket/Display.html?id=130483

[22:51] <Geth> roast/6.c-errata: for full explanation

[22:51] <Geth> roast/6.c-errata:

[22:51] <Geth> roast/6.c-errata: (Also: make it more clear what it's supposed to be testing by changing

[22:51] <Geth> roast/6.c-errata: literal tabs to "\t")

[22:51] <Geth> roast/6.c-errata: review: https://github.com/perl6/roast/commit/b6ffcf6347

[22:51] <brokenchicken> samcv++ thanks
