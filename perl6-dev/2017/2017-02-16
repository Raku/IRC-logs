[01:27] <lizmat> Files=1176, Tests=55916, 181 wallclock secs (11.00 usr  4.29 sys + 1066.04 cusr 104.47 csys = 1185.80 CPU)

[03:27] <MasterDuke> timotimo: i don't remember, how familiar are you with the jvm stuff?

[03:58] <lizmat> .tell jnthn 62bd30b3d7953ea9b did not fix segfaults on HARNESS_TYPE=6  :-(

[03:58] <yoleaux2> lizmat: I'll pass your message to jnthn.

[04:32] <Geth> ¦ nqp/braids: 15 commits pushed by (Pawel Murias)++, (Jonathan Worthington)++, TimToady++

[04:32] <Geth> ¦ nqp/braids: review: https://github.com/perl6/nqp/compare/7b1b83de01...4dce9e8221

[04:32] <Geth> ¦ rakudo/braids: 14 commits pushed by (Zoffix Znet)++, (Ronald Schmidt)++, (Jonathan Worthington)++, TimToady++

[04:32] <Geth> ¦ rakudo/braids: review: https://github.com/rakudo/rakudo/compare/b04f41385d...a431523b1c

[08:37] <[Tux]> This is Rakudo version 2017.01-215-ga628826e2 built on MoarVM version 2017.01-49-g7ff91dbb

[08:37] <[Tux]> csv-ip5xs        2.846

[08:37] <[Tux]> test            12.318

[08:37] <[Tux]> test-t           4.963 - 5.071

[08:37] <[Tux]> csv-parser      13.346

[10:51] <timotimo> MasterDuke: mildly familiar

[12:38] <IOninja> gonna do version bumps in ~20m; wanna run stresstest on all the latest and greatest as prep for upcoming releaee

[12:40] <llfourn> m: my @a = <one two three>; my $b = @a.clone; @a.push("four"); say $b; # bug?

[12:40] <camelia> rakudo-moar a62882: OUTPUT«[one two three four]␤»

[12:41] <IOninja> there's already a ticket

[12:41] <llfourn> IOninja: cheers. Found it.

[12:42] <IOninja> IIRC I even "took" it but my kungfu was too weak to resolve it... and I forgot to untake it

[12:43] <llfourn> s/kungfu/ninjitsu/

[12:43] <IOninja> :)

[12:43] <llfourn> :)

[12:45] <llfourn> m: my @a = <one two three>; my $b = [@a]; @a.push("four"); say $b; # I expect it to just do this

[12:45] <camelia> rakudo-moar a62882: OUTPUT«[one two three]␤»

[13:11] <IOninja> m: my @a = 1, {rand} ... *; my $b = [@a]; say $b[^3]; say @a[^3];

[13:11] <camelia> rakudo-moar a62882: OUTPUT«(1 0.123251572505615 0.435959887423071)␤(1 0.123251572505615 0.435959887423071)␤»

[13:11] <IOninja> Wonder if that's good or bad...

[13:13] <timotimo> as soon as you @a = you'll make it caching

[13:18] <IOninja> I mean the clone and original sharing the reifier

[13:19] <IOninja> and $!reified too I guess

[13:21] <IOninja> m: my @a = 1, {say "reifying"; rand} ... *; my $b = [@a]; $ = $b[^3]; $ = @a[^3];

[13:21] <camelia> rakudo-moar a62882: OUTPUT«reifying␤reifying␤»

[13:25] <IOninja> m: my @a = 1, {say "reifying"; rand} ... *; my $b = [@a]; $ = $b[^3]; $ = @a[^5]; say $b[^5]

[13:25] <camelia> rakudo-moar a62882: OUTPUT«reifying␤reifying␤reifying␤reifying␤(1 0.763841320571926 0.183329790594665 0.75564195143579 0.738884744266966)␤»

[13:25] <IOninja> Well, I guess tis a clone. Can't make it do anything undesirable so will commit shortly

[13:30] <IOninja> though it's a race condition innit?

[13:30] <timotimo> well, yeah, reifying from the same array from two threads is a Bad Idea

[13:31] <timotimo> m: my @a = 1, {say "reifying"; rand} ... *; my $b = [@a]; $ = $b[^3]; $ = @a[^5]; $ = $b[^7]; $ = @a[^9]; say @a; say $b

[13:31] <camelia> rakudo-moar a62882: OUTPUT«reifying␤reifying␤reifying␤reifying␤reifying␤reifying␤reifying␤reifying␤[...]␤[...]␤»

[13:31] <timotimo> haha

[13:32] <timotimo> m: my @a = 1, {print "."; rand} ... *; my $b = [@a]; $ = $b[^3]; $ = @a[^5]; $ = $b[^7]; $ = @a[^9]; say @a[^9]; say $b[^9]

[13:32] <camelia> rakudo-moar a62882: OUTPUT«........(1 0.692395968887147 0.970311879204904 0.452104353656019 0.809563295224363 0.379891089633615 0.518240110298025 0.735838685526754 0.975253899596657)␤(1 0.692395968887147 0.970311879204904 0.452104353656019 0.809563295224363 0.379891089633615 0.518…»

[13:32] <jnthn> Yeah, Array is not threadsafe (nor Hash and friends)

[13:32] <timotimo> look, it gets different results

[13:32] <timotimo> probably .pull-one from the Seq whenever you ask for new elements

[13:32] <timotimo> and so you're distributing elements from the Seq across both?

[13:33] <IOninja> I don't see it getting different results

[13:33] <IOninja> m: my $c = 0; my @a = 1, {$c++; rand} ... *; my $b = [@a]; for ^1000 { start { $ = @a[^$_] }; start { $ = $b[^$_] }}; say @a[^1000] eqv $b[^1000]; say $c

[13:33] <camelia> rakudo-moar a62882: OUTPUT«True␤0␤»

[13:33] <IOninja> 0? it doesn't close over?

[13:34] <timotimo> oh

[13:34] <timotimo> i accidentally continued from the end of the 2nd line to the start of the 2nd line

[13:35] <IOninja> m: my $c = 0; my @a = 1, {say $c++; rand} ... *; my $b = [@a]; for ^10 -> $i { start { $ = @a[^$i] }; start { $ = $b[^$i] }}; say @a[^10] eqv $b[^10]; say $c

[13:35] <camelia> rakudo-moar a62882: OUTPUT«True␤0␤»

[13:35] <IOninja> m: my $c = 0; my @a = 1, {say $c++; rand} ... *; my $b = [@a]; for ^10 -> $i { start { $ = @a[^$i] }; start { $ = $b[^$i] }}; say @a[^10] eqv $b[^10]; say $c; say $b[^10]

[13:35] <camelia> rakudo-moar a62882: OUTPUT«True␤0␤((Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any))␤»

[13:35] <IOninja> wat

[13:36] <Geth> ¦ nqp: 575e92bfe2 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[13:36] <Geth> ¦ nqp: Bump MoarVM

[13:36] <Geth> ¦ nqp:

[13:36] <Geth> ¦ nqp: Brings https://github.com/MoarVM/MoarVM/compare/2017.01-45-g2b0739d...2017.01-72-g542baec

[13:36] <Geth> ¦ nqp:

[13:36] <Geth> ¦ nqp: 542baec Merge pull request #537 from MasterDuke17/minor_optimization_to_MVM_string_indexing_optimized

[13:36] <Geth> ¦ nqp: 7b2e3d9 Factor out repeated code.

[13:36] <Geth> ¦ nqp: 5538029 Del unused var, don't call MVM_string_graphs twice

[13:36] <Geth> ¦ nqp: <…commit message has 24 more lines…>

[13:36] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/575e92bfe2

[13:37] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.01-45-g2b0739d...2017.01-72-g542baec

[13:37] <Geth> ¦ rakudo/nom: 8f53a6fbad | (Zoffix Znet)++ | tools/build/NQP_REVISION

[13:37] <Geth> ¦ rakudo/nom: Bump NQP

[13:37] <Geth> ¦ rakudo/nom:

[13:37] <Geth> ¦ rakudo/nom: NQP bump brings:

[13:37] <Geth> ¦ rakudo/nom: https://github.com/perl6/nqp/compare/2017.01-78-g8371cb2...2017.01-95-g575e92b

[13:37] <Geth> ¦ rakudo/nom:

[13:37] <Geth> ¦ rakudo/nom: 575e92b Bump MoarVM

[13:37] <Geth> ¦ rakudo/nom: 6f3417a Fix data race in NFA cache.

[13:37] <Geth> ¦ rakudo/nom: <…commit message has 45 more lines…>

[13:37] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8f53a6fbad

[13:37] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.01-78-g8371cb2...2017.01-95-g575e92b

[13:37] <IOninja> I don't get what's happening with the (Any) (Any) stuff...

[13:38] <IOninja> m: my $c = 0; my @a = 1, {say $c++; rand} ... *; my $b = [@a]; for ^10 -> $i { start { $ = @a[^$i] }; start { $ = $b[^$i] }}; sleep 3; say @a[^10] eqv $b[^10]; say $c; say @a[^10]

[13:38] <camelia> rakudo-moar a62882: OUTPUT«True␤0␤((Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any))␤»

[13:38] <timotimo> m: my $c = 0; my @a = 1, {say $c++; rand} ... *; my $b = [@a]; for ^10 -> $i { start { $ = @a[^$i] }; start { $ = $b[^$i] }}; say @a[^10] eqv $b[^10]; say $c; say $b[^11]

[13:38] <camelia> rakudo-moar a62882: OUTPUT«True␤0␤((Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any))␤»

[13:39] <IOninja> m: my $c = 0; my @a = 1, {say $c++; rand} ... *; my $b = [@a]; for ^10 -> $i { start { $ = @a[^$i] }; start { $ = $b[^$i] }}; sleep 3; say @a[^10] eqv $b[^10]; say $c; say @a[^10]

[13:39] <camelia> rakudo-moar a62882: OUTPUT«True␤0␤((Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any))␤»

[13:39] <IOninja> Well,in #zofbot taht gave me <camelia> rakudo-moar a62882: OUTPUT«0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30␤31␤32␤33␤34␤35␤36␤37␤Type check failed in binding to <anon>; expected Any but got Mu (Mu)␤  in …»

[13:39] <IOninja> m: my $c = 0; my @a = 1, {say $c++; rand} ... *; my $b = [@a]; for ^10 -> $i { await start { $ = @a[^$i] }, start { $ = $b[^$i] }}; say @a[^10] eqv $b[^10]; say $c; say @a[^10]

[13:39] <camelia> rakudo-moar a62882: OUTPUT«True␤0␤((Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any))␤»

[13:40] <IOninja> m: my $c = 0; my @a = 1, {say $c++; rand} ... *; my $b = [@a]; for ^10 -> $i { await start { $ = @a[^$i] }, start { $ = $b[^$i] }}; say @a[^10] eqv $b[^10]; say $c; say @a[^10]

[13:40] <camelia> rakudo-moar a62882: OUTPUT«True␤0␤((Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any))␤»

[13:40] <IOninja> :(

[13:40] <IOninja> In #zofbot that gave me: "<camelia> rakudo-moar a62882: OUTPUT«0␤1␤2␤3␤4␤5␤6␤This continuation has already been invoked␤  in block <unit> at <tmp> line 1␤␤»"

[13:41] <timotimo> right, that's to be expected

[13:41] <IOninja> And this time I'm doing it thread-safely for each array, but there these races because they still share Refier

[13:41] <timotimo> when you don't lock the reifier

[13:41] <IOninja> Right, but should clones be tied to each other this way?

[13:42] <IOninja> IMO not; and circumfix:<[ ]> (Iterable) {} needs a fixing too

[13:42] <timotimo> not sure

[13:43] <IOninja> 'cause you get this action at a distance basically. You have two things that may or may not be thread-unsafe clones

[13:43] <timotimo> you're not really "cloning" though?

[13:44] <IOninja> m: my $c = 0; my @a = 1, {rand} ... *; my @b = 1, {rand} ... *; for ^10 -> $i { await start { $ = @a[^$i] }, start { $ = @b[^$i] }}; say @a[^10] eqv @b[^10]; say $c; say @a[^10]

[13:44] <camelia> rakudo-moar a62882: OUTPUT«True␤0␤((Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any) (Any))␤»

[13:45] <IOninja> I don't get why this happens...

[13:47] <IOninja> I'm awaiting both promises on each iteration and they each touch separate arrays with separate seqs, wtf

[13:48] <jnthn> m: my $c = 0; my @a = 1, {rand} ... *; my @b = 1, {rand} ... *; for ^10 -> $i { { $ = @a[^$i] }(), { $ = @b[^$i] }() }; say @a[^10] eqv @b[^10]; say $c; say @a[^10]

[13:48] <camelia> rakudo-moar a62882: OUTPUT«False␤0␤(1 0.383855112963563 0.190191991937813 0.129289902338896 0.864548452700285 0.584260348000255 0.14556147270636 0.769068733490131 0.792574010809423 0.674349557873372)␤»

[13:49] <IOninja> and getting a bunch of "This continuation has already been invoked" and even SEGV

[13:49] <jnthn> m: my $c = 0; my @a = 1, {rand} ... *; my @b = 1, {rand} ... *; for ^10 -> $i { await start { { $ = @a[^$i] }(), { $ = @b[^$i] }() } }; say @a[^10] eqv @b[^10]; say $c; say @a[^10]

[13:49] <camelia> rakudo-moar a62882: OUTPUT«False␤0␤(1 0.038331178164205 0.77736543204001 0.521697040555523 0.931298139738119 0.523021845288893 0.265838958249769 0.0967418282566458 0.864203498554505 0.703111596980713)␤»

[13:49] <timotimo> oh, that's weird

[13:50] <jnthn> m: my $c = 0; my @a = 1, {rand} ... *; my @b = 1, {rand} ... *; for ^10 -> $i { await start { $ = @a[^$i] }, start { $ = @b[^$i] } }; say @a[^10] eqv @b[^10]; say $c; say @a[^10]

[13:50] <camelia> rakudo-moar a62882: OUTPUT«This continuation has already been invoked␤  in block <unit> at <tmp> line 1␤␤»

[13:50] <IOninja> Here are the outputs I got in #zofbot: https://gist.github.com/zoffixznet/53436c4f001de41dbc748908fbe34355

[13:50] <jnthn> I wonder if there's something awry in SEQUENCE

[13:50] <IOninja> s: &SEQUENCE

[13:50] <SourceBaby> IOninja, Sauce is at https://github.com/rakudo/rakudo/blob/a628826/src/core/operators.pm#L112

[13:52] <jnthn> m: my $c = 0; my @a = lazy gather { take 1; loop { take rand } }; my @b = lazy gather { take 1; loop { take rand } }; for ^10 -> $i { await start { $ = @a[^$i] }, start { $ = @b[^$i] } }; say @a[^10] eqv @b[^10]; say $c; say @a[^10]

[13:52] <camelia> rakudo-moar 8f53a6: OUTPUT«False␤0␤(1 0.756330359944868 0.618837045723082 0.198287349311726 0.696631172498147 0.329312724413971 0.324949280871508 0.597838155425997 0.627620741322145 0.434517286709839)␤»

[13:52] <jnthn> m: my $c = 0; my @a = lazy gather { take 1; loop { take rand } }; my @b = lazy gather { take 1; loop { take rand } }; for ^10 -> $i { await start { $ = @a[^$i] }, start { $ = @b[^$i] } }; say @a[^10] eqv @b[^10]; say $c; say @a[^10]

[13:52] <camelia> rakudo-moar 8f53a6: OUTPUT«False␤0␤(1 0.517685008703888 0.406042977439581 0.0789016444057807 0.825124610951737 0.238677816060427 0.328078729529237 0.284027643066457 0.404746614724066 0.752322767245437)␤»

[13:52] <jnthn> That works, for example

[13:54] <IOninja> Seems less busted, but still got it to produce "This continuation has already been invoked" twice:  https://gist.github.com/zoffixznet/8bcc916ef3e683b8e6cd879a75ab4282

[13:56] <IOninja> gonna ticket it

[13:58] <jnthn> Ah, then maybe that is where it is...

[14:01] <IOninja> https://rt.perl.org/Ticket/Display.html?id=130796

[14:19] <Geth> ¦ rakudo/nom: dc69dafc42 | (Zoffix Znet)++ | src/core/Array.pm

[14:19] <Geth> ¦ rakudo/nom: Implement Array.clone; llfourn++

[14:19] <Geth> ¦ rakudo/nom:

[14:19] <Geth> ¦ rakudo/nom: Fixes RT#129762: https://rt.perl.org/Ticket/Display.html?id=129762

[14:19] <Geth> ¦ rakudo/nom:

[14:19] <Geth> ¦ rakudo/nom: Note that the clone shares the reifier with the original.

[14:19] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129762

[14:19] <Geth> ¦ rakudo/nom: That was discussed and is desirable:

[14:19] <Geth> ¦ rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2017-02-16#i_14113154

[14:19] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dc69dafc42

[14:19] <Geth> ¦ roast: a460cdc7ac | (Zoffix Znet)++ | S32-array/create.t

[14:19] <Geth> ¦ roast: Test Array.clone

[14:19] <Geth> ¦ roast:

[14:19] <Geth> ¦ roast: RT#129762: https://rt.perl.org/Ticket/Display.html?id=129762

[14:19] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/dc69dafc42

[14:19] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129762

[14:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a460cdc7ac

[14:59] <IOninja> t/spec/S17-channel/stress.t hung :(

[15:01] <IOninja> unless randomness was seriously not on my side :)

[15:02] <IOninja> m: < p e r l s i x >.combinations.elems.say

[15:02] <camelia> rakudo-moar dc69da: OUTPUT«128␤»

[15:03] <IOninja> hm, hung again. I guess my Mu:U.clone patch is no good

[15:04] <IOninja> nevermind. I'm just impatient apparently :)

[15:08] <IOninja> ZOFVM: Files=1225, Tests=132895, 196 wallclock secs (21.60 usr  3.10 sys + 3804.91 cusr 270.19 csys = 4099.80 CPU)

[15:10] <Geth> ¦ rakudo/nom: 11d005e605 | (Zoffix Znet)++ | src/core/Array.pm

[15:10] <Geth> ¦ rakudo/nom: Implement Mu:U.clone / Fix Array:U.clone

[15:10] <Geth> ¦ rakudo/nom:

[15:10] <Geth> ¦ rakudo/nom: - Make clone a multi

[15:10] <Geth> ¦ rakudo/nom: - Add Mu:U candidate that just returns self (and complains about

[15:10] <Geth> ¦ rakudo/nom:     any twiddles it recieves

[15:10] <Geth> ¦ rakudo/nom:     (should it warn instead? should it not bother at all?))

[15:10] <Geth> ¦ rakudo/nom: - Fixes Array:U.clone returning `[Array,]` instead of Array:U

[15:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/11d005e605

[15:10] <IOninja> ugh

[15:11] <Geth> ¦ rakudo/nom: 4b85db6e8c | (Zoffix Znet)++ | src/core/Mu.pm

[15:11] <Geth> ¦ rakudo/nom: [Part 2] Implement Mu:U.clone / Fix Array:U.clone

[15:11] <Geth> ¦ rakudo/nom:

[15:11] <Geth> ¦ rakudo/nom: Missed file for commit

[15:11] <Geth> ¦ rakudo/nom: https://github.com/rakudo/rakudo/commit/11d005e605

[15:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4b85db6e8c

[15:11] <Geth> ¦ roast: ea5cc0d8c2 | (Zoffix Znet)++ | S32-array/create.t

[15:11] <Geth> ¦ roast: Test Array:U.clone

[15:11] <Geth> ¦ roast:

[15:11] <Geth> ¦ roast: Rakudo fix:

[15:11] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/11d005e605

[15:11] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/4b85db6e8c

[15:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ea5cc0d8c2

[17:00] <IOninja> NeuralAnomaly: status

[17:00] <NeuralAnomaly> IOninja, [✘] Next release will be in 1 day and 12 hours. Since last release, there are 45 new still-open tickets (0 unreviewed and 0 blockers) and 9 unreviewed commits. See http://perl6.fail/release/stats for details

[17:00] <IOninja> nqp tests pass; rakudo's stresstest passes.

[17:00] * IOninja takes a break from Perl 6 things until tomorrow (hopefully)

[17:22] <TimToady> m: my @a = <one two three>; my $b = [@a,]; @a.push("four"); say $b;  # [@a] copies by one-arg rule

[17:22] <camelia> rakudo-moar 4b85db: OUTPUT«[[one two three four]]␤»

[17:22] <TimToady> llfourn: ^^^

[17:26] <travis-ci> Rakudo build failed. Zoffix Znet 'Implement Mu:U.clone / Fix Array:U.clone

[17:26] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/202281678 https://github.com/rakudo/rakudo/compare/dc69dafc42a3...11d005e605fe

[17:26] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[17:30] <IOninja> that's just 'cause I forgot to add all the files to the commit; the next commit fixed it

[18:31] <Geth> ¦ rakudo/nom: 67aeefacf5 | (Zoffix Znet)++ | src/core/Mu.pm

[18:31] <Geth> ¦ rakudo/nom: Fix .perl.EVAL roundtripping for circular Arrays and Hashes

[18:31] <Geth> ¦ rakudo/nom:

[18:31] <Geth> ¦ rakudo/nom: Currently generated my \foo = [\foo] thing doesn't have the

[18:31] <Geth> ¦ rakudo/nom: correct value when EVALed (foo is still a Mu when its value is used).

[18:31] <Geth> ¦ rakudo/nom:

[18:31] <Geth> ¦ rakudo/nom: Fix for Array and Hashes by using (my @foo) = … and (my %foo) = …

[18:31] <Geth> ¦ rakudo/nom: thing instead. Everything else will still get the \foo thing.

[18:31] <Geth> ¦ rakudo/nom:

[18:31] <Geth> ¦ rakudo/nom: This can probably fixed for the rest of circular stuff like Pairs

[18:31] <Geth> ¦ rakudo/nom: and classes with (my $foo) = … but I don't know if the containerization

[18:31] <Geth> ¦ rakudo/nom: has some sort of impact that would produce the wrong results.

[18:31] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/67aeefacf5

[18:32] <Geth> ¦ roast: 8b009ad405 | (Zoffix Znet)++ | 2 files

[18:32] <Geth> ¦ roast: Test .perl.EVAL roundtripping of circular Arrays and Hashes

[18:32] <Geth> ¦ roast:

[18:32] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/67aeefacf5

[18:32] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8b009ad405

[18:37] <TimToady> IOninja: I thought you said you was gonna take a break :)

[18:38] <IOninja> I forgot about it! :)

[19:08] <Geth> ¦ roast: b6fa7adbf2 | usev6++ | S17-supply/supplier-preserving.t

[19:08] <Geth> ¦ roast: Fudge test for Supplier::Preserving on JVM

[19:08] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b6fa7adbf2

[21:23] <nine> ~~

[21:23] <yoleaux2> 14 Feb 2017 04:38Z <MasterDuke> nine: does this seem precomp related? https://gist.github.com/MasterDuke17/5f07124670c43c819c6e230f388b51d4

[21:23] <nine> .tell ugexe your patch looks fine. It uncovered an interesting riddle though

[21:23] <yoleaux2> nine: I'll pass your message to ugexe.

[21:50] <travis-ci> Rakudo build passed. Zoffix Znet 'Fix .perl.EVAL roundtripping for circular Arrays and Hashes

[21:50] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/202352390 https://github.com/rakudo/rakudo/compare/4b85db6e8cbd...67aeefacf5fb

[22:19] <MasterDuke> jnthn: i've started looking into Binder.java. however, i don't see any uses of nqp::lists to crib from (or in other places besides Binder.java)

[22:24] <jnthn> MasterDuke: There's probably a .at_pos somewhere, though?

[22:24] <jnthn> And a mention of named_names?

[22:25] <MasterDuke> get_attribute_native() looks like it'll give int, num, str, or jvm objects. would the list be a jvm_object?

[22:25] <MasterDuke> yes

[22:25] <jnthn> You don't have a native attribute though

[22:25] <jnthn> It's the elements of the list that are native

[22:27] <MasterDuke> ah, i had looked for at_pos_native, but didn't find any. however, i just found them in nqp

[22:27] <jnthn> https://github.com/rakudo/rakudo/blob/nom/src/vm/jvm/runtime/org/perl6/rakudo/Binder.java#L946 is the line that'd need to change
