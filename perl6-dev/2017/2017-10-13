[00:12] <Zoffix> for crying out loud... "No such method 'slurp-rest' for invocant of type 'Any'   in sub  at /home/zoffix/services/geth/lib/Geth/GitHub/Hooks.pm6"

[00:12] <Zoffix> Why did I restart it :()

[00:16] <Geth_> ¦ roast: bcaaad4d42 | (Zoffix Znet)++ | 2 files

[00:16] <Geth_> ¦ roast: Consolidate bug cover tests

[00:16] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/bcaaad4d42

[00:16] <Zoffix> I see. If you precompile modules with FileSystem CUR and then uninstall a module with zef, then the precomp files still remain untouched, using whatever version was installed

[00:17] <Geth_> ¦ rakudo/nom: f72be0f130 | (Zoffix Znet)++ | t/spectest.data

[00:17] <Geth_> ¦ rakudo/nom: Remove dir-stress test file

[00:17] <Geth_> ¦ rakudo/nom:

[00:17] <Geth_> ¦ rakudo/nom: It was consolidated with other lone bug cover stresstests in

[00:17] <Geth_> ¦ rakudo/nom: https://github.com/perl6/roast/commit/bcaaad4d42

[00:17] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f72be0f130

[00:45] <Zoffix> m: use Test; for (NaN..NaN) => NaN, (Inf..0) => Inf, (-Inf..0) => -Inf -> (:key($range), :value($expected)) { .map: { next unless $++ > 1050; is-deeply $_, $expected, "$_ range keeps producing $expected ad infinitum"; last } }

[00:45] <camelia> rakudo-moar f72be0: ( no output )

[00:45] <Zoffix> dahell?

[00:46] <Zoffix> Ah, missing $range

[00:51] <Geth_> ¦ roast: bfc143e0ac | (Zoffix Znet)++ | S02-types/range.t

[00:51] <Geth_> ¦ roast: no floating point drifts in degenerate Ranges

[00:51] <Geth_> ¦ roast:

[00:51] <Geth_> ¦ roast: RT#125336: https://rt.perl.org/Ticket/Display.html?id=125336

[00:51] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/bfc143e0ac

[00:51] <synopsebot> RT#125336 [new]: https://rt.perl.org/Ticket/Display.html?id=125336 Weird infinite ranges: Inf..0, -Inf..0 and NaN..0

[00:59] <AlexDaniel-> Zoffix++

[02:37] <AlexDaniel-> \o/

[02:38] <AlexDaniel-> OK I think I got regressionable working

[04:51] <AlexDaniel-> bisect: ("foo" => 10000000000000000000).BagHash.grab(1)

[04:51] <bisectable6> AlexDaniel-, Bisecting by exit code (old=2015.12 new=f72be0f). Old exit code: 0

[04:51] <AlexDaniel-> I think somebody mentioned this a few days ago

[04:51] <bisectable6> AlexDaniel-, bisect log: https://gist.github.com/bf8346742ef61f4d599b870077131430

[04:51] <bisectable6> AlexDaniel-, (2017-05-11) https://github.com/rakudo/rakudo/commit/87a95fc1355e01972670895b55b02bc382797fc9

[04:52] <AlexDaniel-> aw yeah, that's exactly how I found out about it

[06:11] <AlexDaniel-> ha… almost submitted a ticket asking to unfix a bug

[06:14] <AlexDaniel-> .tell Zoffix should this fail like it does now? ｢-> (*%_) {dd %_}(Failure.new)｣ https://gist.github.com/41a100146ec62ece32d91833060faf00

[06:14] <yoleaux> AlexDaniel-: I'll pass your message to Zoffix.

[06:23] <AlexDaniel-> .tell lizmat this does not look right, but the commit seems to be innocent. What do you think? Let me know if I have to rakudobug it https://gist.github.com/AlexDaniel/de2c5f1fe66b1606589041ca10c82f50

[06:23] <yoleaux> AlexDaniel-: I'll pass your message to lizmat.

[06:24] <AlexDaniel-> c: releases Blob[num32].new(2e0)

[06:24] <committable6> AlexDaniel-, https://gist.github.com/3a8ab6ac823d9b25491388a99934471d

[06:25] <AlexDaniel-> bisect: old=2017.06 Blob[num32].new(2e0)

[06:25] <bisectable6> AlexDaniel-, Bisecting by output (old=2017.06 new=f72be0f) because on both starting points the exit code is 1

[06:25] <bisectable6> AlexDaniel-, bisect log: https://gist.github.com/41e9da04c8065b7888ef65534a3e98fb

[06:25] <bisectable6> AlexDaniel-, (2017-06-26) https://github.com/rakudo/rakudo/commit/823011281de7fcb4ae5b542ff41c313ed693f9cb

[06:27] <AlexDaniel-> c: 823011281^,823011281 Blob[num32].new(2e0)

[06:27] <committable6> AlexDaniel-, https://gist.github.com/72544ca121a3ff6c7f0bac78b8885689

[06:28] <AlexDaniel-> bisect: old=823011281 Blob[num32].new(2e0)

[06:28] <bisectable6> AlexDaniel-, Bisecting by output (old=8230112 new=f72be0f) because on both starting points the exit code is 1

[06:28] <bisectable6> AlexDaniel-, bisect log: https://gist.github.com/9dcb237e77570f9dccd1328fa6b963ec

[06:28] <bisectable6> AlexDaniel-, (2017-07-08) https://github.com/rakudo/rakudo/commit/1a4d94930c581e915a2351049e8ee12246c4c26c

[06:28] <AlexDaniel-> c: 1a4d94930^,1a4d94930 Blob[num32].new(2e0)

[06:28] <committable6> AlexDaniel-, https://gist.github.com/70e94426796265d6213581e0c1df36b1

[06:28] <AlexDaniel-> actually I thought that I'm on #whateverable

[06:28] <AlexDaniel-> so nevermind this spam

[06:31] <AlexDaniel-> .tell MasterDuke fwiw RT #132285

[06:31] <yoleaux> AlexDaniel-: I'll pass your message to MasterDuke.

[06:31] <synopsebot> RT#132285 [new]: https://rt.perl.org/Ticket/Display.html?id=132285 [REGRESSION] Error message talks about null strings when trying to create a num32 Blob (Blob[num32].new(2e0))

[06:36] <AlexDaniel-> by the way, why the numbers suddenly became bigger?

[06:36] <AlexDaniel-> mch: my $x; my $y := $x; $x = (42,$y); say $x

[06:36] <committable6> AlexDaniel-, ¦2015.12: «(\List_82832240 = (42 List_82832240))» ¦HEAD(f72be0f): «(\List_93951630447504 = (42 List_93951630447504))»

[06:37] <moritz> Zoffix: I think I can connect to the box on which geth runs... now what?

[06:44] <AlexDaniel-> .tell Zoffix also maybe see https://irclog.perlgeek.de/perl6/2017-10-03#i_15250701 which does not work anymore

[06:44] <yoleaux> AlexDaniel-: I'll pass your message to Zoffix.

[08:58] <jnthn> AlexDaniel: Those numbers are just memory addresses (or, likely, future memory addresses), which tend to be unpredictable by design.

[09:12] <Zoffix> moritz: Dunno. I can connect too, but thought maybe you know more about it. For some reason connections to it are blocked. `telnet geth.niner.name 8888` fails for example

[09:12] <yoleaux> 06:14Z <AlexDaniel-> Zoffix: should this fail like it does now? ｢-> (*%_) {dd %_}(Failure.new)｣ https://gist.github.com/41a100146ec62ece32d91833060faf00

[09:12] <yoleaux> 06:44Z <AlexDaniel-> Zoffix: also maybe see https://irclog.perlgeek.de/perl6/2017-10-03#i_15250701 which does not work anymore

[09:13] <Zoffix> AlexDaniel: yes and yes

[09:19] <Zoffix> First one documented in https://docs.perl6.org/type/Failure#method_Capture second on in https://docs.perl6.org/type/Str#method_Capture

[09:19] <Zoffix> m: try ｢sub c(:&funk! (:(:$param))) { &funk(:parrrrrrrrrrrrrrrrrrrrrrrrrrrrram('finally. Zoffix++')) }; c( funk => {say $:parrrrrrrrrrrrrrrrrrrrrrrrrrrrram} );｣.EVAL; say $!.^name

[09:19] <camelia> rakudo-moar f72be0: OUTPUT: «X::Cannot::Capture␤»

[09:20] <Zoffix> yup

[09:22] <Zoffix> AlexDaniel: heh: https://irclog.perlgeek.de/perl6/2017-10-13#i_15297137

[09:22] <Zoffix> That's one of the bot evals

[09:30] <Geth_> ¦ roast: 11fb4415f0 | (Zoffix Znet)++ | S32-io/open.t

[09:30] <Geth_> ¦ roast: .open error does not incorrectly complain about malformed UTF-8

[09:30] <Geth_> ¦ roast:

[09:30] <Geth_> ¦ roast: RT#125813: https://rt.perl.org/Ticket/Display.html?id=125813

[09:30] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/11fb4415f0

[09:30] <synopsebot> RT#125813 [open]: https://rt.perl.org/Ticket/Display.html?id=125813 [UNI] Malformed UTF-8 (string out of bounds) with “say ('a' x 10000).IO.open”

[09:35] <Geth_> ¦ roast: c8ebdbbf89 | (Zoffix Znet)++ | S03-smartmatch/any-num.t

[09:35] <Geth_> ¦ roast: can smartmatch num64 against Num

[09:35] <Geth_> ¦ roast:

[09:35] <Geth_> ¦ roast: RT#126927: https://rt.perl.org/Ticket/Display.html?id=126927

[09:35] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/c8ebdbbf89

[09:35] <synopsebot> RT#126927 [open]: https://rt.perl.org/Ticket/Display.html?id=126927 [BUG] Spurious warning when trying to smartmatch num64 against Num in Rakudo

[09:39] <Geth_> ¦ roast: 809abcd5a7 | (Zoffix Znet)++ | S06-advanced/return.t

[09:39] <Geth_> ¦ roast: Can return from parameter defaults

[09:39] <Geth_> ¦ roast:

[09:39] <Geth_> ¦ roast: RT#122345: https://rt.perl.org/Ticket/Display.html?id=122345

[09:39] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/809abcd5a7

[09:39] <synopsebot> RT#122345 [open]: https://rt.perl.org/Ticket/Display.html?id=122345 [TESTNEEDED] Returning from a parameter list default counts as returning 'outside of any Routine' in Rakudo on Moar

[09:45] <Geth_> ¦ roast: e0d3c550f1 | (Zoffix Znet)++ | S32-io/open.t

[09:45] <Geth_> ¦ roast: Make test more specific

[09:45] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/e0d3c550f1

[09:50] <[TuxCM]> This is Rakudo version 2017.09-383-gf72be0f13 built on MoarVM version 2017.09.1-594-gb9d3f6da

[09:50] <[TuxCM]> csv-ip5xs        1.154 -  1.182

[09:50] <[TuxCM]> test             9.424 -  9.481

[09:50] <[TuxCM]> test-t           3.094 -  3.156

[09:50] <[TuxCM]> csv-parser       0.837 -  0.862

[10:03] <Geth_> ¦ rakudo/nom: 969853c673 | (Zoffix Znet)++ | t/05-messages/01-errors.t

[10:03] <Geth_> ¦ rakudo/nom: Use actual test plan

[10:03] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/969853c673

[10:05] <Zoffix> Actually, startup boost likely had a much better improvement to spectest/stresstest, since we have a ton of `is_run` tests that fire up an $*EXECUTABLE

[10:10] <timotimo> oh, neat :)

[10:15] <Geth_> ¦ rakudo/nom: fb7abf064e | (Zoffix Znet)++ | t/05-messages/01-errors.t

[10:15] <Geth_> ¦ rakudo/nom: Test sane error when missing variables with my and where

[10:15] <Geth_> ¦ rakudo/nom:

[10:15] <Geth_> ¦ rakudo/nom: RT#125902: https://rt.perl.org/Public/Bug/Display.html?id=125902

[10:15] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fb7abf064e

[10:15] <synopsebot> RT#125902 [open]: https://rt.perl.org/Ticket/Display.html?id=125902 [LTA] error message “Type 'Str' is not declared” (my Str where 'foo' $test;)

[11:25] <Geth_> ¦ rakudo/nom: 975fcf6cfd | (Elizabeth Mattijsen)++ | src/core/Rakudo/QuantHash.pm

[11:25] <Geth_> ¦ rakudo/nom: Fix for RT #132279

[11:25] <Geth_> ¦ rakudo/nom:

[11:25] <Geth_> ¦ rakudo/nom: Cannot be sure we have int64 range on BagHash

[11:25] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/975fcf6cfd

[11:25] <synopsebot> RT#132279 [new]: https://rt.perl.org/Ticket/Display.html?id=132279 [REGRESSION][9999] BagHash.grab with huge values (("foo" => 10000000000000000000).BagHash.grab(1))

[11:36] <AlexDaniel> Zoffix: ok

[11:37] <AlexDaniel> and yeah, I knew this would've happened (bot evals)

[11:39] <AlexDaniel> maybe I should've put some irc keywords into the blacklist, hmm…

[11:40] <AlexDaniel> “13721 snippets tested, 3983 are known to be unstable”

[11:40] <AlexDaniel> ZofBot: when are you going to be smart enough to do this work?

[11:40] <ZofBot> AlexDaniel, IO::Spec subclasses The following methods should be provided by the "IO::Spec" subclasses, or may be inherited from another class

[11:44] <AlexDaniel> oh… right. it printed “Hi, blub” 5 times because it tests every snippet on 5 revisions…

[11:44] <Zoffix> imma move Geth to hack tonight

[11:44] <Zoffix> And update all the hooks in perl6 org to use that

[11:44] <AlexDaniel> and it does it in random order so we're going to see more of these soon I think

[11:58] <Zoffix> "NotZoffix joined #perl6"

[11:58] * Zoffix squints

[11:58] <Zoffix> ZofBot: EXTERMINATE!

[11:58] <ZofBot> Zoffix, html?id=132128 Link: https://rt

[12:10] <Zoffix> buggable: christmas

[12:10] <buggable> Zoffix, Christmas is in 10 weeks, 2 days, 11 hours, 49 minutes, and 22 seconds

[12:10] <Zoffix> \o/

[12:17] <Geth_> ¦ roast: bitrauser++ created pull request #347: Add test for RT#131490 | Crash in Junction:D.BUILDALL `This type (Scalar) does not support elems`

[12:17] <Geth_> ¦ roast: review: https://github.com/perl6/roast/pull/347

[12:17] <synopsebot> RT#131490 [open]: https://rt.perl.org/Ticket/Display.html?id=131490 [TESTNEEDED] Crash in Junction:D.BUILDALL `This type (Scalar) does not support elems`

[12:19] <Geth_> ¦ roast: 5ebf6f9303 | Joel++ (committed by Zoffix Znet) | S03-junctions/misc.t

[12:19] <Geth_> ¦ roast: Add test for RT#131490 (#347)

[12:19] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/5ebf6f9303

[12:21] <Geth_> ¦ roast: 1b0d85a39c | (Zoffix Znet)++ (committed using GitHub Web editor) | S03-junctions/misc.t

[12:21] <Geth_> ¦ roast: Fix up test description

[12:21] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/1b0d85a39c

[12:21] <Zoffix> Hm, it was fixed in https://github.com/rakudo/rakudo/commit/61ecfd51172b0e3cf20dc23a87dba9307fa94da6 so presumably test already existed :/

[12:23] <Zoffix> ah nope. Tests were added but they don't catch the bug in the ticket: https://github.com/perl6/roast/blob/master/S03-junctions/misc.t#L526-L530

[12:24] <Geth_> ¦ roast: c2788cce70 | (Zoffix Znet)++ (committed using GitHub Web editor) | S03-junctions/misc.t

[12:24] <Geth_> ¦ roast: Consolidate related tests

[12:24] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/c2788cce70

[12:53] <MasterDuke> arg, how do i get the message out of a BOOTException?

[12:54] <Zoffix> nqp::getmessage or nqp::getpayload maybe? Some ops are listed here: https://github.com/perl6/nqp/blob/master/docs/ops.markdown#-exceptional-opcodes

[12:55] <MasterDuke> getmessage doesn't work, but maybe i haven't tried getpayload

[13:30] <Geth_> ¦ rakudo: MasterDuke17++ created pull request #1189: Correctly explain why couldn't instantiate a role

[13:30] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1189

[13:31] <Geth_> ¦ rakudo/nom: b3bb8c406a | MasterDuke17++ | src/Perl6/Metamodel/ParametricRoleHOW.nqp

[13:31] <Geth_> ¦ rakudo/nom: Correctly explain why couldn't instantiate a role

[13:31] <Geth_> ¦ rakudo/nom:

[13:31] <Geth_> ¦ rakudo/nom: This broke when Exceptions were changed to not create their message

[13:31] <Geth_> ¦ rakudo/nom: unless .gist'ed.

[13:31] <Geth_> ¦ rakudo/nom:

[13:31] <Geth_> ¦ rakudo/nom: Fixes RT #132285.

[13:31] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b3bb8c406a

[13:31] <synopsebot> RT#132285 [new]: https://rt.perl.org/Ticket/Display.html?id=132285 [REGRESSION] Error message talks about null strings when trying to create a num32 Blob (Blob[num32].new(2e0))

[13:31] <Geth_> ¦ rakudo/nom: f4f36915f5 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/Perl6/Metamodel/ParametricRoleHOW.nqp

[13:31] <Geth_> ¦ rakudo/nom: Merge pull request #1189 from MasterDuke17/RT132285

[13:31] <Geth_> ¦ rakudo/nom:

[13:32] <Geth_> ¦ rakudo/nom: Correctly explain why couldn't instantiate a role

[13:32] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f4f36915f5

[13:45] * Zoffix grumbles about using RT for dick measuring contests

[13:46] <Zoffix> .ask AlexDaniel what do you think of this ticket? https://rt.perl.org/Ticket/Display.html?id=131626#txn-1493785 The problem is swept under the rug and it the cause appears to be just that we shuttle a capture around from Unicode ops to ASCII ones, so that issue will be resolved on its own. So should the ticket be closed? What about tests?

[13:46] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[13:46] <Zoffix> *people using

[13:47] <MasterDuke> i'd almost think we should have spectest, stresstest, and perftest

[13:48] <MasterDuke> and perftest would get things like that

[13:48] <Zoffix> Yeah. Definitely

[13:48] <Zoffix> .ask AlexDaniel also this one can prolly be closed entirely? https://rt.perl.org/Ticket/Display.html?id=131515#ticket-history

[13:48] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[13:48] <MasterDuke> are those moarvm benchmarks still generated daily?

[13:48] * Zoffix shrugs

[14:04] <Zoffix> oh oops. Modules.perl6.org hasn't updated since oct 9

[14:06] <yoleaux> Zoffix: make separate t/spectest.data for each language version, bruh

[14:06] <Zoffix> yoleaux: dun it long time ago, bruh

[14:07] <Zoffix> modules.perl6.org@www:/tmp$ ls -1 | wc -l

[14:07] <Zoffix> 3339

[14:07] <Zoffix> yu

[14:07] <Zoffix> Looks like File::Temp doesn't delete the temp dirs :/

[14:12] <Zoffix> oh hahaha

[14:13] <Zoffix> RE: https://irclog.perlgeek.de/perl6/2017-10-09#i_15276445

[14:13] <Zoffix> I have the answer: it'll break the entire build :P

[14:15] <Zoffix> .tell ugexe this may have been a misnamed upload for zef? Dunno if fixed version was uploaded already. modules.perl6.org will ignore it due to lack of name in the filename itself that it uses to figure this stuff out: https://irclog.perlgeek.de/perl6/2017-10-09#i_15276439

[14:15] <yoleaux> Zoffix: I'll pass your message to ugexe.

[14:17] <Zoffix> And yeah, theoretically it could figure it out from the .meta file, I guess, but then this kinda makes the build process depend on processing all the dists of the user before knowing which dists are what.

[14:17] <Zoffix> Didn't consider this during making of original version of the CPAN dist source

[14:18] <Zoffix> (this = that filenames could be different than what the dist is)

[14:22] <ugexe> it kind has to eventually, because dists can have dashes and version like strings in their name

[14:22] <yoleaux> 14:15Z <Zoffix> ugexe: this may have been a misnamed upload for zef? Dunno if fixed version was uploaded already. modules.perl6.org will ignore it due to lack of name in the filename itself that it uses to figure this stuff out: https://irclog.perlgeek.de/perl6/2017-10-09#i_15276439

[14:24] <ugexe> Eg cant reliably decode module name + version from a file name alone

[14:24] <Zoffix> Right now it treats `-([^-]+)$` as version part (sans file extension). So basically everything after last dash

[14:25] <Zoffix> m: say Version.new: "42-x"

[14:25] <camelia> rakudo-moar f4f369: OUTPUT: «v42.x␤»

[14:26] * Zoffix scratches head

[14:26] <MasterDuke> Zoffix: whoops, completely missed that you commented on 132285

[14:26] <Zoffix> m: say Version.new: "-"

[14:26] <camelia> rakudo-moar f4f369: OUTPUT: «v␤»

[14:26] <Zoffix> m: Version.new("-").perl.say

[14:26] <camelia> rakudo-moar f4f369: OUTPUT: «Version.new␤»

[14:30] <ugexe> App::ecogen handles it ok I believe

[14:30] <Zoffix> MasterDuke: "Not sure where tests should go, roast or rakudo?" It'd go to rakudo

[14:31] <Zoffix> MasterDuke: if the new version threw some useful typed exception, then it could go to roast, but I see both buggy and non-buggy versions throw X::AdHoc and the non-buggy says it's NYI, so there's nothing really we can spec to be language behaviour, so the tests to cover the content of error would go to t/05-messages/errors.t instead of the roast

[14:32] <MasterDuke> Zoffix: and then we're fine removing those tests if/when the NYI behavior is implemented?

[14:33] <Zoffix> Right, t/* tests can be modified whenever we need to.

[14:33] <MasterDuke> or should the test be something like: if exception was thrown, it has "NYI" and "num32" in it?

[14:33] <Zoffix> Yeah, prolly

[14:35] <Zoffix> c: 2017.09,HEAD use Test; throws-like ｢Blob[num32].new: 2e0｣, Exception, :message{.contains: ｢not yet implemented｣ & ｢num32｣ and not .contains: ｢got null｣}, 'sane error for num32 Blob'

[14:35] <committable6> Zoffix, https://gist.github.com/80672fba1cba63a1cbf789ff053488b4

[14:37] * Zoffix &

[14:41] <Geth_> ¦ rakudo: MasterDuke17++ created pull request #1190: Test RT132285, correct error for Blob with num32

[14:41] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1190

[14:41] <synopsebot> RT#132285 [open]: https://rt.perl.org/Ticket/Display.html?id=132285 [REGRESSION] Error message talks about null strings when trying to create a num32 Blob (Blob[num32].new(2e0))

[14:45] <Geth_> ¦ rakudo/nom: e611978f54 | MasterDuke17++ | t/05-messages/01-errors.t

[14:45] <Geth_> ¦ rakudo/nom: Test RT132285, correct error for Blob with num32

[14:45] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e611978f54

[14:45] <Geth_> ¦ rakudo/nom: e475ae8e05 | (Zoffix Znet)++ (committed using GitHub Web editor) | t/05-messages/01-errors.t

[14:45] <Geth_> ¦ rakudo/nom: Merge pull request #1190 from MasterDuke17/test_for_RT132285

[14:45] <Geth_> ¦ rakudo/nom:

[14:45] <Geth_> ¦ rakudo/nom: Test RT132285, correct error for Blob with num32

[14:45] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e475ae8e05

[14:53] <MasterDuke> Zoffix++

[15:42] <Zoffix> .tell tyil the "my App::MPD::AutoQueue still appears twice, even though I removed it from the META.list" was now fixed. If CPAN modules are missing from mp6o while there generated PAUSE .meta files for them, let me know. If PAUSE isn't generating .meta for some dists. Try to track down PAUSE people and ask them why

[15:42] <yoleaux> Zoffix: I'll pass your message to tyil.

[15:59] * Zoffix received a sad private message about RT

[16:00] <Zoffix> Would be nice if new comers were

[16:01] <Zoffix> Would be nice if new comers were not ridiculed/attacked in ticket responses. You don't have to be Einstein to file a ticket and if there's some misconception about user's ticket, just clarify it, if the clarification is needed to resolve the ticket, or just leave it alone. Writing miles of text arguing who is most right ain't helping—especially ain't helping the person who'll be fixing the ticket later

[16:01] <Zoffix> on and has to read through miles of pointless dialogue

[16:02] <Zoffix> (I'm not an angel myself; but we can all aim towards some ideal)

[16:04] <Zoffix> ZofBot: so when will the robots kill all humans?

[16:04] <ZofBot> Zoffix, ^name}"; } } X::Range::InvalidArg Thrown when an argument to "Range

[16:05] <Zoffix> :( I need to reset your brain.

[16:10] <Zoffix> ZofBot: aho matey

[16:10] <ZofBot> Zoffix, Think you, but that I know our state secure, I would be so triumphant as I am? STANLEY

[16:10] <Zoffix> Ah, I love robots.

[16:29] <Zoffix> Seems we need some `make extratest` that runs extra rakudo-only tests that aren't spec. Like tests for this ticket would need installation fo the debugger module, for example: https://rt.perl.org/Ticket/Display.html?id=131481#ticket-history

[16:29] <Zoffix> Also, I imagine the bug-cover error message tests isn't really something end users need to run, so that can be shoved to make extratest too. Make it run on travis

[16:30] <Zoffix> also need `make dangeroustest` that will run dangerous roast tests.

[16:30] <Zoffix> s:g/'make extratest'/make xtest/;

[16:32] <Zoffix> And stuff like RT#127671 would go to dangeroustest

[16:32] <synopsebot> RT#127671 [open]: https://rt.perl.org/Ticket/Display.html?id=127671 [EXOTICTEST] ｢dir｣ dies if weird unicode sequences are encountered (dir;)

[16:32] <Zoffix> That'd be run only by people using some destructable VM and stuff

[16:53] <Geth_> ¦ rakudo/nom: 4473591b0a | (Zoffix Znet)++ | t/05-messages/01-errors.t

[16:53] <Geth_> ¦ rakudo/nom: Add NYI to test description

[16:53] <Geth_> ¦ rakudo/nom:

[16:53] <Geth_> ¦ rakudo/nom: So that when it is implemented the failure of the test would be

[16:53] <Geth_> ¦ rakudo/nom: more informative as to why it's failing.

[16:53] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4473591b0a

[16:55] <Geth_> ¦ rakudo/nom: 80cee36223 | (Zoffix Znet)++ | t/05-messages/01-errors.t

[16:55] <Geth_> ¦ rakudo/nom: Test callframe.my throws sane NYI error message

[16:55] <Geth_> ¦ rakudo/nom:

[16:55] <Geth_> ¦ rakudo/nom: RT#77754: https://rt.perl.org/Ticket/Display.html?id=77754

[16:55] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/80cee36223

[16:55] <synopsebot> RT#77754 [open]: https://rt.perl.org/Ticket/Display.html?id=77754 [BUG] Null PMC access when calling .perl on callframe.my in Rakudo

[17:10] <buggable> New CPAN upload: Propius-0.1.0.tar.gz by ATROXAPER https://cpan.metacpan.org/authors/id/A/AT/ATROXAPER/Perl6/Propius-0.1.0.tar.gz

[17:10] <buggable> New CPAN upload: TimeUnit-0.1.2.tar.gz by ATROXAPER https://cpan.metacpan.org/authors/id/A/AT/ATROXAPER/Perl6/TimeUnit-0.1.2.tar.gz

[17:15] <Geth_> ¦ roast: 522e3da803 | (Zoffix Znet)++ | S02-types/mix.t

[17:15] <Geth_> ¦ roast: Test Mix.roll with fractional weights does not crash

[17:15] <Geth_> ¦ roast:

[17:15] <Geth_> ¦ roast: RT#131855: https://rt.perl.org/Ticket/Display.html?id=131855

[17:15] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/522e3da803

[17:15] <synopsebot> RT#131855 [open]: https://rt.perl.org/Ticket/Display.html?id=131855 [REGRESSION] Mix.roll doesn't work with fractional weights

[17:28] <travis-ci> Rakudo build failed. Zoffix Znet 'Merge pull request #1190 from MasterDuke17/test_for_RT132285

[17:28] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/287594754 https://github.com/rakudo/rakudo/compare/f4f36915f564...e475ae8e0542

[17:28] <buggable> [travis build above] ✓ All failures are due to: GitHub connectivity (1 failure).

[17:30] <Geth_> ¦ roast: 2a45053f2b | (Zoffix Znet)++ | S17-procasync/kill.t

[17:30] <Geth_> ¦ roast: Test Proc::Async.kill doesn't hang

[17:30] <Geth_> ¦ roast:

[17:30] <Geth_> ¦ roast: If killing immediately after .start

[17:30] <Geth_> ¦ roast:

[17:30] <Geth_> ¦ roast: RT#125653: https://rt.perl.org/Ticket/Display.html?id=125653

[17:30] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/2a45053f2b

[17:30] <synopsebot> RT#125653 [new]: https://rt.perl.org/Ticket/Display.html?id=125653 [CONC] A promise returned by Proc::Async.start will never be kept or broken if the process is killed by the current process

[17:37] <Geth_> ¦ roast: 7f52f7a4e4 | (Zoffix Znet)++ | S17-procasync/kill.t

[17:37] <Geth_> ¦ roast: Simplify tests

[17:37] <Geth_> ¦ roast:

[17:37] <Geth_> ¦ roast: - Use a temp file routine instead of rolling the feature manually

[17:37] <Geth_> ¦ roast: - Use a heredoc instead of poorly idented string

[17:37] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/7f52f7a4e4

[17:59] <Zoffix> RT#132258 is making me cry. Not the security part, but the more I research the issue the more it seems there's no sane way to pass args on Windows if you don't know what you're passing them to.

[17:59] <synopsebot> RT#132258 [new]: https://rt.perl.org/Ticket/Display.html?id=132258 [SECURITY][WINDOWS] `run "perl6" ...` can be made to execute shell commands

[18:00] <Zoffix> And we have a bunch of Proc::Async.new: $*EXECUTABLE in roast, which basically will remain LTA, as even with some :cmd-windows-quoting arg to Proc::Async, the tests will work only for implementatinos that use a batch file for perl6 like we do and will break for those that don't :|

[18:19] <Geth_> ¦ rakudo/nom: 3acde358c1 | (Samantha McVey)++ | src/core/Int.pm

[18:19] <Geth_> ¦ rakudo/nom: Show hex value as well as dec in char() error message

[18:19] <Geth_> ¦ rakudo/nom:

[18:19] <Geth_> ¦ rakudo/nom: When char() is requested to too large a value, also show the hex value

[18:19] <Geth_> ¦ rakudo/nom: and not just the decimal one.

[18:19] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3acde358c1

[18:19] <Geth_> ¦ rakudo/nom: 7bea3a2ddd | (Samantha McVey)++ | src/core/IO/Path.pm

[18:19] <Geth_> ¦ rakudo/nom: Add .parent(Int) for getting up more than one level

[18:19] <Geth_> ¦ rakudo/nom:

[18:19] <Geth_> ¦ rakudo/nom: .parent only gets the path one level up. Now .parent(Int) will

[18:19] <Geth_> ¦ rakudo/nom: get the nth parent of the requested directory. This is different

[18:19] <Geth_> ¦ rakudo/nom: than adding ../ to the path as when there are links it acts

[18:19] <Geth_> ¦ rakudo/nom: differently.

[18:19] <Geth_> ¦ rakudo/nom: In addition:

[18:19] <Geth_> ¦ rakudo/nom: `Path::IO.add('../').absolute ne Path::IO.parent.absolute`

[18:19] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7bea3a2ddd

[18:30] <Zoffix> FWIW we have UInt type for non-negative Ints

[18:35] <ugexe> almost feels like parent should do cleanup

[18:40] <[Coke]> Zoffix++ #UInt

[18:40] <[Coke]> ugexe: isn't that add?

[18:41] <ugexe> add() adds a path part to a path, parent(1) returns the path with 1 path part removed

[18:42] <samcv> should I change it to UInt?

[18:43] <ugexe> e.g. "foo/../bar".IO.parent does the programmer usually want "foo/" or "foo/../"

[18:43] <ugexe> foo/../ or "" whatever

[18:44] <samcv> ugexe, depends on if they want to remove part of the path or not. ../ will follow links

[18:45] <samcv> most of the time people also don't want to see /foo/bar/baz/raz/this/../../../../../

[18:45] <samcv> but if you want to follow links on the way one level up, then you should use ../

[18:46] <Zoffix> samcv: IMO yeah. It'd unify the error with the rest of our errors rather than having an Ad::Hoc with a custom message (that can't really be specced properly) and moves the logic defining acceptable params into signature, so it can be inspected, for example with .cando()

[18:46] <samcv> ok

[18:46] <samcv> don't need a full error message. just need a more generic error than negative .parent's make no sense :P

[18:47] <Zoffix> m: sub (Int) {}.cando(\(-42)).so.say; sub (UInt) {}.cando(\(-42)).so.say

[18:47] <camelia> rakudo-moar 7bea3a2dd: OUTPUT: «True␤False␤»

[18:47] <samcv> cool :)

[18:47] <Zoffix> Wonder why Block don't got a .cando

[18:47] * Zoffix &

[20:12] <Geth_> ¦ rakudo: dwarring++ created pull request #1191: optimize recently added AT-POS for typed pointers

[20:12] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1191

[21:41] <Geth_> ¦ rakudo/nom: bc5fbfcbf5 | (David Warring)++ | lib/NativeCall/Types.pm6

[21:41] <Geth_> ¦ rakudo/nom: optimize recently added AT-POS for typed pointers

[21:41] <Geth_> ¦ rakudo/nom:

[21:41] <Geth_> ¦ rakudo/nom: inline the add method and subsequent calls to nativecast and Int and add

[21:41] <Geth_> ¦ rakudo/nom: methods. Improves performance by 4-5x.

[21:41] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bc5fbfcbf5

[21:41] <Geth_> ¦ rakudo/nom: a54da11aa6 | (Zoffix Znet)++ (committed using GitHub Web editor) | lib/NativeCall/Types.pm6

[21:41] <Geth_> ¦ rakudo/nom: Merge pull request #1191 from dwarring/pointer-optimize

[21:41] <Geth_> ¦ rakudo/nom:

[21:41] <Geth_> ¦ rakudo/nom: optimize recently added AT-POS for typed pointers

[21:41] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a54da11aa6

[22:00] <tyil> Zoffix: alright, thanks

[22:00] <yoleaux> 15:42Z <Zoffix> tyil: the "my App::MPD::AutoQueue still appears twice, even though I removed it from the META.list" was now fixed. If CPAN modules are missing from mp6o while there generated PAUSE .meta files for them, let me know. If PAUSE isn't generating .meta for some dists. Try to track down PAUSE people and ask them why

[22:01] <Zoffix> :)

[22:06] <Geth_> ¦ rakudo/nom: 012c80f336 | (Nick Logan)++ (committed using GitHub Web editor) | src/core/ThreadPoolScheduler.pm

[22:06] <Geth_> ¦ rakudo/nom: Remove unused variable

[22:06] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/012c80f336

[22:27] <timotimo> my disappearance (of json::fast) from the ecosystem made JSON::Tiny get the #1 spot on the module citation site :S

[22:35] <travis-ci> Rakudo build passed. Samantha McVey 'Add .parent(Int) for getting up more than one level

[22:36] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/287676452 https://github.com/rakudo/rakudo/compare/80cee3622363...7bea3a2dddcf

[22:53] <Geth_> ¦ roast: 2800632eb0 | (Zoffix Znet)++ | S02-types/baghash.t

[22:53] <Geth_> ¦ roast: Can .grab() a BagHash key with weight larger than 64 bits

[22:53] <Geth_> ¦ roast:

[22:53] <Geth_> ¦ roast: RT#132279: https://rt.perl.org/Ticket/Display.html?id=132279

[22:53] <Geth_> ¦ roast: review: https://github.com/perl6/roast/commit/2800632eb0

[22:53] <synopsebot> RT#132279 [open]: https://rt.perl.org/Ticket/Display.html?id=132279 [REGRESSION][9999] BagHash.grab with huge values (("foo" => 10000000000000000000).BagHash.grab(1))

[23:42] <Geth_> ¦ rakudo: MasterDuke17++ created pull request #1192: Convert INTERPOLATE into multis

[23:42] <Geth_> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1192
