[00:35] <AlexDaniel> buggable: tags

[00:35] <buggable> AlexDaniel, Total: 1649; 6.D: 2; 9999: 10; @LARRY: 25; ANNOYING: 8; BOOTSTRAP: 4; BUG: 599; BUILD: 12; CONC: 47; DOCS: 1; EXOTICTEST: 1; GLR: 3; IO: 22; JVM: 53; LHF: 5; LTA: 176; MATH: 4; META: 2; MOAR: 1; NATIVECALL: 22; NYI: 56; OO: 13; OPTIMIZER: 8; OSX: 2; PARSER: 5; PERF: 28; POD: 19; PRECOMP: 15; REGEX: 49; REGRESSION: 37; REPL: 6; RFC:

[00:35] <buggable> AlexDaniel, 62; RT: 2; SECURITY: 1; SEGV: 25; SINK: 1; SITE: 1; SPESH: 1; STAR: 7; TESTCOMMITTED: 10; TESTNEEDED: 54; TODO: 13; UNI: 26; UNTAGGED: 418; WEIRD: 2; WINDOWS: 3; See http://fail.rakudo.party/ for details

[00:36] <weabot> so many jvm-related

[00:49] <samcv> heh there's a "WEIRD" tag

[00:57] <AlexDaniel> and some have already expressed their disapproval of [ANNOYING] :)

[00:58] <AlexDaniel> but REGRESSION tag is doing well I see…

[00:58] <AlexDaniel> releasable6: status

[00:58] <releasable6> AlexDaniel, Next release in 16 days and ≈18 hours. 1 blocker. Changelog for this release was not started yet

[00:58] <releasable6> AlexDaniel, Details: https://gist.github.com/d606caf23ce10ec93e8f0525e48a2a77

[01:12] <yoleaux> Zoffix: check if we can change X::Numeric::CannotConvert's $.target.^name to just $.target, which the .^name bit done by the user, if needed

[03:07] <travis-ci> Rakudo build passed. Zoffix Znet 'Merge pull request #1180 from Tyil/resolve-not-found-warning

[03:07] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/283447604 https://github.com/rakudo/rakudo/compare/cef3bf3e7541...a28c00a1f36e

[06:25] <[Tux]> This is Rakudo version 2017.09-210-ga28c00a1f built on MoarVM version 2017.09.1-553-ga4fef0bd

[06:25] <[Tux]> csv-ip5xs        1.215 -  1.235

[06:25] <[Tux]> test            10.552 - 10.706

[06:25] <[Tux]> test-t           3.264 -  3.283

[06:25] <[Tux]> csv-parser       0.857 -  0.903

[06:25] <[Tux]> and CSV::Parser is currently broken.

[06:25] <[Tux]> that is up to TonyO

[07:53] <lizmat> Files=1226, Tests=75556, 347 wallclock secs (14.82 usr  5.31 sys + 2436.34 cusr 225.72 csys = 2682.19 CPU)

[09:06] <jnthn> morning o/

[09:14] <dogbert17> good morning jnthn

[09:46] <jnthn> m: say 114948 / 139220

[09:46] <camelia> rakudo-moar a28c00: OUTPUT: «0.825657␤»

[09:49] <jnthn> m: say 76896 / 85104

[09:49] <camelia> rakudo-moar a28c00: OUTPUT: «0.903553␤»

[10:55] <Geth> ¦ rakudo/nom: b33c2d6f85 | (Elizabeth Mattijsen)++ | src/Perl6/Actions.nqp

[10:55] <Geth> ¦ rakudo/nom: Remove superfluous line

[10:55] <Geth> ¦ rakudo/nom:

[10:55] <Geth> ¦ rakudo/nom: The scope of 'self' is already set 3 lines earlier

[10:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b33c2d6f85

[12:57] <lizmat> FWIW, I don't see the utility in the "will build" trait on Attributes

[12:59] <lizmat> m: sub trait_mod:<will>(Attribute $, Block $) { say "hi" }; class A { has $.a }   # doesn't say "hi"

[12:59] <camelia> rakudo-moar b33c2d: ( no output )

[13:00] <timotimo> doesn't it have to have a name, too?

[13:00] <lizmat> m: sub trait_mod:<will>(Attribute $, Block :$build!) { say "hi" }; class A { has $.a }  # doesn't say it either

[13:00] <camelia> rakudo-moar b33c2d: ( no output )

[13:00] <timotimo> i don't think i've heard of "will build" until today :)

[13:01] <lizmat> well, me neither actually

[13:01] <lizmat> but apparently when you stick your nose in Attribute initialization, you run into that

[13:02] <timotimo> aye

[13:43] <lizmat> afk&  # emergency social meeting in Brussels

[14:11] * japhb hopes the 'emergency' part of that is tongue in cheek and not actual

[14:17] <moritz> it typically is :-)

[15:39] <Zoffix> Moving EVAL/EVALFILE later in the setting... Shoved them into src/core/ForeignCode.pm that looks appropriate enough if you squint

[15:40] <Zoffix> (moving 'cause I need it to know about `Blob` and adding stubs into src/core/control.pm is unweildy because all the role mixins and the stubs for the roles need to be added as well)

[15:42] * japhb is reminded of writing the standard words for a Forth implementation -- definition order being absolutely critical for that

[15:53] <Geth> ¦ rakudo/nom: c73221225f | (Zoffix Znet)++ | 2 files

[15:53] <Geth> ¦ rakudo/nom: Move &EVAL/&EVALFILE further down the setting

[15:53] <Geth> ¦ rakudo/nom:

[15:53] <Geth> ¦ rakudo/nom: I need it to know about `Blob` and adding stubs into

[15:53] <Geth> ¦ rakudo/nom: src/core/control.pm is unweildy because all the role

[15:53] <Geth> ¦ rakudo/nom: mixins and the stubs for the roles need to be added as well

[15:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c73221225f

[16:14] <AlexDaniel_> Zoffix: can you set up a webhook for nqp/ repo?

[16:16] <AlexDaniel_> and rakudo repo also

[16:16] <Zoffix> AlexDaniel_: what's the content type? JSON?

[16:16] <AlexDaniel_> yes

[16:16] <Zoffix> AlexDaniel_: I don't have the keys for rakudo repo

[16:17] <Zoffix> AlexDaniel_: nqp: "Okay, that hook was successfully created. We sent a ping payload to test it out! "

[16:17] <AlexDaniel_> is it green?

[16:18] <Zoffix> Yeah

[16:18] <AlexDaniel_> Zoffix: ah! Roast also please

[16:19] <AlexDaniel_> squashable6: status

[16:19] <squashable6> AlexDaniel_, ⚠🍕 Next SQUASHathon in ≈17 hours (2017-10-07 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[16:20] <Zoffix> oh damn, AlexDaniel_ I re-did the nqp hook. I accentally had it set on www-form encoded instead of JSOPN

[16:20] <Zoffix> AlexDaniel_: roast is now done too

[16:20] <AlexDaniel_> to be honest, squashable6 ignores everything before the SQUASHathon starts, so there's no quick way to tell if it's set up correctly right now… :S

[16:23] <AlexDaniel_> ( https://github.com/perl6/whateverable/issues/243 )

[16:23] <AlexDaniel_> hmm I think I can do it quickly right now…

[16:24] <AlexDaniel_> ah, also, should squashable6 send stuff to #perl6 or #perl6-dev this time?

[16:26] <Zoffix> #perl6

[16:26] <Zoffix> Keep it consistent + more people watch #perl6 and might be encouraged to join in

[16:27] <AlexDaniel_> ok!

[16:32] <Zoffix> looks we have no non-deprecated way to slurp from a pipe in binary mode :)

[16:34] <Zoffix> (I mean, because IO::Pipe.encoding is busted up; gonna fix it later today)

[16:44] <AlexDaniel_> Zoffix: any chance you can hit “redeliver” on the ping payloads?

[16:46] <AlexDaniel_> Zoffix: inactive? https://irclog.perlgeek.de/perl6/2017-10-05#i_15261350

[16:46] <Zoffix> AlexDaniel_: I gave you admin perms. Rediliver ytourself

[16:47] <AlexDaniel_> Zoffix: thanks

[16:55] <Zoffix> ZOFFLOP: t/spec/S17-procasync/kill.t t/spec/S11-modules/export.t

[16:55] <timotimo> is S17-supply/lines.t flappy for anybody else?

[16:55] <timotimo> fails in about 1 out of 8 runs

[16:56] <timotimo> but i'm gc-stress-testing, so it could be an artifact from that

[16:57] <timotimo> yeah, reset moar to its normal state and it doesn't want to fail any more

[17:03] <Zoffix> ZOFFLOP: t/spec/S11-modules/nested.t

[17:37] <Zoffix> grr

[17:37] <Zoffix> EVAL defaults to "perl6".... and the other option is "Perl5"

[17:37] <Zoffix> ZofBot: dat casing bruh

[17:37] <ZofBot> Zoffix, c”… :S well if people think i should just remove them I will as long as other devs are okay with it I'm OK with it

[17:43] <Geth> ¦ rakudo/nom: 6c928d61d9 | (Zoffix Znet)++ | src/core/ForeignCode.pm

[17:43] <Geth> ¦ rakudo/nom: Implement &EVAL/&EVALFILE with Bufs per S29; ilmari++

[17:43] <Geth> ¦ rakudo/nom:

[17:43] <Geth> ¦ rakudo/nom: Closes RT#122256: https://rt.perl.org/Ticket/Display.html?id=122256

[17:43] <Geth> ¦ rakudo/nom:

[17:43] <Geth> ¦ rakudo/nom: - Make EVALFILE slurp in binary and let EVAL handle encodings

[17:43] <Geth> ¦ rakudo/nom: - Implement EVAL(Blob), decoding the same way source file would

[17:43] <Geth> ¦ rakudo/nom:     be read by $lang (per S29)

[17:43] <Geth> ¦ rakudo/nom:     - For Perl 6: use value of `--encoding` command line arg or utf8

[17:43] <synopsebot> RT#122256 [open]: https://rt.perl.org/Ticket/Display.html?id=122256 [NYI] Support EVAL(Buf)

[17:43] <Geth> ¦ rakudo/nom:     - For Perl 5: decode in utf-c8 and let perl handle the rest.

[17:43] <Geth> ¦ rakudo/nom:         Appears to produce the same output as running the code

[17:43] <Geth> ¦ rakudo/nom:         with perl directly. ilmari++ for pointers on how perl does this

[17:43] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6c928d61d9

[17:45] <Geth> ¦ roast: 6949cb13ad | (Zoffix Znet)++ | 3 files

[17:45] <Geth> ¦ roast: Spec &EVAL(Blob) and &EVALFILE's encoding use

[17:45] <Geth> ¦ roast:

[17:45] <Geth> ¦ roast: - EVAL/EVALFILE must eval using the same encoding as reading the

[17:45] <Geth> ¦ roast:     source file in $lang would, per S29

[17:45] <Geth> ¦ roast:

[17:45] <Geth> ¦ roast: RT#122256: https://rt.perl.org/Ticket/Display.html?id=122256

[17:45] <Geth> ¦ roast: Rakudo impl: https://github.com/rakudo/rakudo/commit/6c928d61d9

[17:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6949cb13ad

[17:51] <Zoffix> hm, there's a fudged test for Blob.EVAL, but I did't wanna add it. Str.EVAL is kinda meh as is

[17:54] <Geth> ¦ roast: 60f4bd7850 | (Zoffix Znet)++ | S29-context/eval.t

[17:54] <Geth> ¦ roast: Unfudge now-passing test

[17:54] <Geth> ¦ roast:

[17:54] <Geth> ¦ roast: Keeping the fudge for Blob.EVAL; don't wanna spec us having

[17:54] <Geth> ¦ roast: this method, but the fudge exists in 6.c-errata. Will give more

[17:54] <Geth> ¦ roast: comment on ticket RT#122256

[17:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/60f4bd7850

[17:54] <synopsebot> RT#122256 [open]: https://rt.perl.org/Ticket/Display.html?id=122256 [NYI] Support EVAL(Buf)

[18:06] <Geth> ¦ nqp: 7954f9b0c1 | (Samantha McVey)++ | 2 files

[18:06] <Geth> ¦ nqp: Fix getuniname for control's. Fixes RT122470 RT122471

[18:06] <Geth> ¦ nqp:

[18:06] <Geth> ¦ nqp: Also adds tests for the lowest and highest codepoint for each of the

[18:06] <Geth> ¦ nqp: ranges of control codepoints, as well as one above and below these

[18:06] <Geth> ¦ nqp: to ensure the range is correct.

[18:06] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/7954f9b0c1

[18:06] <synopsebot> RT#122470 [open]: https://rt.perl.org/Ticket/Display.html?id=122470 [UNI][JVM] uniname("\0") returns NULL

[18:06] <synopsebot> RT#122471 [open]: https://rt.perl.org/Ticket/Display.html?id=122471 [UNI][JVM] uniname("\x[80]") returns empty string

[18:21] <samcv> yay i just fixed JVM so .uniname works on CP's higher than 16bit in size

[18:22] <[Coke]> samcv++

[18:22] <samcv> and fixing "\c[BELL]" which i didn't even realize it didn't support codepoits like that previously. i mean higher than 16bits

[18:24] <TimToady> \o/

[18:36] <samcv> i think i'm going to have it get the first half, and then if it doesn't find it, get the 2nd half

[18:37] <samcv> fill the hash with the 2nd half of codepoint names

[18:42] <samcv> then it won't be any slower than it was previously

[18:47] <Geth> ¦ nqp: deb8cb03ec | (Samantha McVey)++ | 2 files

[18:47] <Geth> ¦ nqp: [jvm] fix getstrfromname for codepoints not fitting in 16bits

[18:47] <Geth> ¦ nqp:

[18:47] <Geth> ¦ nqp: Also fixes RT#130542 where BELL would return a control character

[18:47] <Geth> ¦ nqp: instead of U+1F514 🔔.

[18:47] <Geth> ¦ nqp:

[18:47] <Geth> ¦ nqp: Add tests to cover the RT as well as test another higher than 16bit

[18:47] <Geth> ¦ nqp: codepoint's name.

[18:47] <Geth> ¦ nqp: <…commit message has 5 more lines…>

[18:47] <synopsebot> RT#130542 [open]: https://rt.perl.org/Ticket/Display.html?id=130542 [JVM] [UNI] \c[BELL] returns the U+0007 control code not U+1F514 BELL

[18:47] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/deb8cb03ec

[18:49] <samcv> yay

[18:50] <samcv> no there are no more [JVM] [UNI] tagged tickets at least

[18:50] <bartolin> \o/ samcv++

[18:51] <samcv> maybe there is one that isn't tagged that, or maybe i need to create a ticket

[19:25] * Zoffix bumps

[19:42] <Zoffix> holy crap. t/spec/S17-channel/stress.t now takes like double the time than the entire stresstest run :|

[19:43] <Zoffix> S32-io/lock.t and S32-num/power.t don't wanna finish :\

[19:44] <Zoffix> Gonna kill and try restarting the stresstest

[19:45] <Zoffix> Ah, no, t/fudgeandrun S32-io/lock.t hangs on its own

[19:46] <Zoffix> and so does S32-num/power.t

[19:47] <Zoffix> And S17-channel/stress.t ran for 46s before I killed it. Don't think it was that slow before the bump :/

[19:47] <Zoffix> k

[19:47] <Zoffix> ☠☠☠ Do not bump NQP/MoarVM ☠☠☠

[19:51] <Zoffix> ping jnthn++ in #moarvm

[19:51] <Zoffix> Also, made a bash alias to do the bumps... I think it works... https://gist.github.com/zoffixznet/c778b93f2f3b902e467ab4c3d65a86ac

[19:51] * Zoffix relocates

[19:51] <Zoffix> s/ping/pinged/;

[20:12] <MasterDuke> shouldn't https://github.com/perl6/roast/blob/master/S32-num/power.t#L151 be `await start ...` instead of just `start ...`?

[20:16] <Geth> ¦ nqp/master: 7 commits pushed by pmurias++

[20:16] <Geth> ¦ nqp/master: 4d75db83b0 | [js] Partial implementation of ConcBlockingQueue

[20:16] <Geth> ¦ nqp/master: e9c5ea217f | [js] Fix bug in closure deserialization

[20:16] <Geth> ¦ nqp/master: 659fee4f61 | [js] Make nqp::spawnprocasync pass through STDERR when not capturing it

[20:16] <Geth> ¦ nqp/master: 2354d8c54e | [js] Make native refs do coercions

[20:16] <Geth> ¦ nqp/master: 854dc59a88 | [js] Fix bug

[20:16] <Geth> ¦ nqp/master: 8e2ba6c79c | [js] Implement getting the Numeric_Value_{Denominator,Numerator}

[20:16] <Geth> ¦ nqp/master: a9c4965991 | [js] Port over a closure workaround from moarvm

[20:16] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/deb8cb03ec...a9c4965991

[20:17] <Zoffix> MasterDuke: no, that's an exit hatch in case the power op takes too long to run

[20:19] <MasterDuke> hm, the tests pass and don't hang if i add await (and that's the test it's hanging on)

[20:20] <Zoffix> In such a case the test doesn't run.

[20:21] <Zoffix> Ah ok, the start is there to expect the op to "hang" as it'll take a long time to compute. The failure mode is when the op throws

[20:22] <Zoffix> And the io lock tests hang due to shared mutex or whatever. They used to hang similarly when lizmat++ was adding handle closing on exit

[20:23] <Zoffix> (I'm guessing here; I don't know if they actually do)

[20:23] <Zoffix> And there it too has similar setup with a background promise bailing outta the test

[20:23] <Zoffix> m: start 42

[20:23] <camelia> rakudo-moar 6c928d: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 42 in sink context (line 1)␤»

[20:24] <pmurias> m: say(1.0001 ** 10000000000000000000000)

[20:24] <camelia> rakudo-moar 6c928d: OUTPUT: «Numeric overflow␤  in block <unit> at <tmp> line 1␤␤»

[20:26] <Zoffix> m: start { sleep 2; exit }; say "meow"

[20:26] <camelia> rakudo-moar 6c928d: OUTPUT: «meow␤»

[20:26] <Zoffix> m: start { sleep 2; exit }; sleep 4

[20:26] <camelia> rakudo-moar 6c928d: ( no output )

[20:26] * Zoffix shrugs

[20:27] <pmurias> Zoffix: testing that a power explodes due to an implementation detail seems a bit weird

[20:28] <Zoffix> pmurias: that's not what the test we're discussing does

[20:28] <Zoffix> pmurias: but there is another one next to it that tests overflow

[20:30] <Zoffix> power.t looks totally messed up on my phone

[20:30] * Zoffix notices self slowly shifting to ASCII-only camp

[20:34] <Zoffix> pmurias: overflow tests are part of 6.c langauge. It'd be weird to test the actual boundary of throwage, but they test for values that'd take a huge amount of time to compute, so effevtively they test the program doesn't just hang when it's given too big an input to handle

[20:35] <Zoffix> oh wait, they're not part of 6.'

[20:36] <Zoffix> or maybe they don't know anore

[20:36] <Zoffix> phone browsing

[20:36] * Zoffix &

[21:22] <buggable> New CPAN upload: Text-More-Perl6-01.8.tar.gz by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Text-More-Perl6-01.8.tar.gz

[21:22] <buggable> New CPAN upload: Text-More-Perl6-01.8.zip by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Text-More-Perl6-01.8.zip

[21:23] <Geth> ¦ nqp: 1e17529bdf | (Samantha McVey)++ | 2 files

[21:23] <Geth> ¦ nqp: [jvm] Add support for <noncharacter-XXX> for getuniname op

[21:23] <Geth> ¦ nqp:

[21:23] <Geth> ¦ nqp: Also add a test as well.

[21:23] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/1e17529bdf

[21:26] <MasterDuke> samcv: a bunch of the JVM RTs with subject `Roast rakudo skip/todo test:*` look like they might be unicode/string stuff related

[21:31] <samcv> that seems likely

[21:31] <samcv> thx

[21:32] <MasterDuke> welcome

[21:42] <buggable> New CPAN upload: Text-More-Perl6-0.1.8.tar.gz by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Text-More-Perl6-0.1.8.tar.gz

[21:46] <Zoffix> Wonder why this appers to hang :/ my $d := nqp::getattr($_, IO::Handle, '$!decoder'); say $d.consume-exactly-bytes($d.bytes-available);

[21:46] <Zoffix> Trying to grab all the bytes in the decoder

[21:48] <jnthn> Zoffix: No idea, I'm sure there's code doing exactly that somewhere in IO::Handle

[21:49] <Zoffix> I saw one that does .read-slow-path or whatever, but I think I don't need to be slow. Trying to make .slurp(:bin) work. I just need to drain the decoder and then slurp the rest in binary?

[21:50] <Zoffix> oh wow. It doesn't hang, but just takes ages for some reason

[21:50] <Zoffix> or maybe it's Buf's .gist that takes ages :)

[21:51] <Zoffix> Yup. It's the .gist

[21:51] <MasterDuke> what's ages? and how much data?

[21:52] <buggable> New CPAN upload: Text-More-Perl6-0.1.8.zip by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Text-More-Perl6-0.1.8.zip

[21:52] <buggable> New CPAN upload: Geo-Ellipsoid-Perl6-0.2.0.tar.gz by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Geo-Ellipsoid-Perl6-0.2.0.tar.gz

[21:52] <buggable> New CPAN upload: Geo-Ellipsoid-Perl6-0.2.0.zip by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Geo-Ellipsoid-Perl6-0.2.0.zip

[21:56] <dogbert2> jnthn: FWIW, I suspect there's something wrong with https://github.com/MoarVM/MoarVM/commit/a9f477011079e35667622089b73faf41835cdfe4

[22:01] <jnthn> dogbert2: Any more detailed analysis welcome

[22:02] <jnthn> Re-reading the patch, nothing immediately stands out as being off

[22:02] <dogbert2> jnthn: I have the same problems described by Zoffix, hanging tests etc but reverting that commit seems to fix it for me

[22:02] <buggable> New CPAN upload: META6-To-Man-Perl6-0.2.0.zip by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/META6-To-Man-Perl6-0.2.0.zip

[22:02] <jnthn> Ah, ok

[22:02] <jnthn> Then I guess no need to bisect

[22:03] <jnthn> It's still pretty odd

[22:03] <dogbert2> it's probably something ridiculous :)

[22:04] * dogbert2 or I'm totally wrong

[22:06] <Zoffix> jnthn: the comment reads "if fromspace was already at maximum size" but the code reads `if (tc->nursery_tospace_size < MVM_NURSERY_SIZE) {`   should it be ->nursery_fromspace_size ?

[22:07] <timotimo> i always get confused by the code because it flips fromspace and tospace at one point

[22:07] <Zoffix> ZofBot: what are these spaces?

[22:07] <ZofBot> Zoffix, Therefore a private attribute declared using "has" is private to the class, not to the role

[22:08] <dogbert2> "In (from)space no one can hear you scream"

[22:12] <buggable> New CPAN upload: META6-To-Man-Perl6-0.2.0.tar.gz by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/META6-To-Man-Perl6-0.2.0.tar.gz

[22:16] <jnthn> Zoffix: At that point tospace is becoming fromspace, and we just tweak tospace_size in-place if needed

[22:16] <Zoffix> Ah, OK.

[22:17] <jnthn> Will probably sticking some logging in again and run tests to see what it's doing though

[22:17] <Zoffix> Damn, can't wait until all this stuff will be known to my brain :)

[22:17] <Zoffix> Maybe in a year...

[22:22] <buggable> New CPAN upload: Net-IP-Lite-Perl6-0.1.4.tar.gz by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Net-IP-Lite-Perl6-0.1.4.tar.gz

[22:22] <buggable> New CPAN upload: Net-IP-Lite-Perl6-0.1.4.zip by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Net-IP-Lite-Perl6-0.1.4.zip

[22:27] * sjn plays around with Cro again.

[22:27] <yoleaux> 1 Oct 2017 04:24Z <nine> sjn: IMHO named-anywhere is a hack that works around rather than fixes the issue. PR 688 replaces the hack by convention and still does not fix the whole thing.

[22:28] <Zoffix> ZOFFLOP: t/spec/S17-promise/nonblocking-await.t

[22:28] <sjn> can't get cro-zeromq to pass it's tests. is it out of commission or is it supposed to work?

[22:28] <Zoffix> spectest on my box: Files=1226, Tests=75559, 717 wallclock secs (12.80 usr  1.93 sys + 2223.94 cusr 189.78 csys = 2428.45 CPU)

[22:29] * Zoffix looks at lizmat's 340s runs jealously

[22:32] <timotimo> i'm wondering what my next notebook should be, not entirely pleased with the options i get for lenovo t470 and t570

[22:32] <buggable> New CPAN upload: Number-More-Perl6-0.2.0.tar.gz by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Number-More-Perl6-0.2.0.tar.gz

[22:38] <Geth> ¦ rakudo/nom: ac8e5f430b | (Zoffix Znet)++ | src/core/Buf.pm

[22:38] <Geth> ¦ rakudo/nom: Make Blob.gist trim its guts to 100 els

[22:38] <Geth> ¦ rakudo/nom:

[22:38] <Geth> ¦ rakudo/nom: Large blobs take ages to render and we already limit to 100 els

[22:38] <Geth> ¦ rakudo/nom: for Lists and Maps.

[22:38] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ac8e5f430b

[22:38] <Zoffix> prolly Setty and Baggy need that too

[22:38] <Zoffix> Uhhhh....

[22:39] <Zoffix> so Hash.gist trims to 100 els, but Map.gist doesn't

[22:39] <Zoffix> and justs uses Mu.gist

[22:43] <Geth> ¦ roast: 1871724d47 | (Zoffix Znet)++ | S32-container/buf.t

[22:43] <Geth> ¦ roast: Spec Blob.gist's trimming to 100 els

[22:43] <Geth> ¦ roast:

[22:43] <Geth> ¦ roast: Rakudo impl: https://github.com/rakudo/rakudo/commit/ac8e5f430b

[22:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1871724d47

[22:52] <buggable> New CPAN upload: Proc-More-Perl6-0.3.0.tar.gz by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Proc-More-Perl6-0.3.0.tar.gz

[22:52] <buggable> New CPAN upload: Proc-More-Perl6-0.3.0.zip by TBROWDER https://cpan.metacpan.org/authors/id/T/TB/TBROWDER/Perl6/Proc-More-Perl6-0.3.0.zip

[22:53] <Zoffix> samcv: you were looking for uni tickets ealier. RT#132216 looks to be in that area

[22:53] <synopsebot> RT#132216 [new]: https://rt.perl.org/Ticket/Display.html?id=132216 'a' coll 'A" not Same but More

[23:20] <Geth> ¦ roast: 3513c1f600 | (Samantha McVey)++ | S32-str/tc.t

[23:20] <Geth> ¦ roast: Update JVM todo reason after RT124684 merged into RT124500

[23:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3513c1f600

[23:20] <synopsebot> RT#124684 [open]: https://rt.perl.org/Ticket/Display.html?id=124684 [JVM] [NYI] [UNI] NFC/NFG

[23:20] <synopsebot> RT#124500 [open]: https://rt.perl.org/Ticket/Display.html?id=124500 [JVM] [NYI] [UNI] NFC/NFG

[23:21] <samcv> ah yeah i was going to work on that yesterday but got busy with something

[23:30] <timotimo> so, reading the thread about <<>> on the users list

[23:30] <timotimo> m: my $x = "123"; my @foo = <<abc{$x}xyz>>; say @foo.perl

[23:30] <camelia> rakudo-moar ac8e5f: OUTPUT: «["abc", IntStr.new(123, "123"), "xyz"]␤»

[23:30] <timotimo> is it really supposed to put the $x that got interpolated into a separate element?

[23:32] <TimToady> m: my $x = "123"; my @foo = <<"abc{$x}xyz">>; say @foo.perl

[23:32] <camelia> rakudo-moar ac8e5f: OUTPUT: «["abc123xyz"]␤»

[23:32] <TimToady> easy enough to get the other bahavior

[23:32] <TimToady> but arguably not much like shell quoting

[23:32] <timotimo> yeah

[23:35] <TimToady> m: my $x = "123 456"; my @foo = <<abc{$x}xyz>>; say @foo.perl

[23:35] <camelia> rakudo-moar ac8e5f: OUTPUT: «["abc", IntStr.new(123, "123"), IntStr.new(456, "456"), "xyz"]␤»

[23:36] <timotimo> cool. i get finnish spam now. the "my dead client had lots of money" kind. google translate turned the second sentence into "I'm Andrew Allen, a lawyer and a lawyer"

[23:36] <timotimo> i find that amusing for some reason

[23:37] <timotimo> "lakimies ja asianajaja"
