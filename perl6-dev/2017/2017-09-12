[01:15] <AlexDaniel> skids: hey. Do you have clean ｢make spectest｣ over there? :)

[01:15] <AlexDaniel> beacuse t/spec/S02-literals/pairs.t is failing here

[01:16] <skids> Hrm... I ran it straight from roast.  I'll try a 'make spectest'

[01:19] <skids> Oh it can't find the extra test lib...

[01:19] <AlexDaniel> “beacuse” heh

[01:22] <Geth> ¦ roast: skids++ created pull request #312: add missing 'use lib' from last commit

[01:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/312

[01:22] <Geth> ¦ roast: 82600ac7ca | skids++ | S02-literals/pairs.t

[01:22] <Geth> ¦ roast: add missing 'use lib' from last commit

[01:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/82600ac7ca

[01:22] <Geth> ¦ roast: 5e23ada6bc | skids++ (committed using GitHub Web editor) | S02-literals/pairs.t

[01:22] <Geth> ¦ roast: Merge pull request #312 from skids/rt129008

[01:22] <Geth> ¦ roast:

[01:22] <Geth> ¦ roast: add missing 'use lib' from last commit

[01:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5e23ada6bc

[01:22] <skids> Yeah that file is just issing a 'use lib'.  That should do it.

[01:22] <AlexDaniel> ah-ha, okay

[01:26] <AlexDaniel> skids: thanks

[01:26] <skids> np thanks for letting me know.

[01:33] <AlexDaniel> well, it was preventing the dry run of the release process here :)

[02:26] <AlexDaniel> m: my $x = set “abc”, “xyz”; say $x.WHICH

[02:26] <camelia> rakudo-moar 760530: OUTPUT: «Set|A3ACBF2BA1F70F182B28FC68DCDF8C2FC3E48E33␤»

[02:26] <AlexDaniel> m: my $x = set “abc\0Str|xyz”; say $x.WHICH

[02:26] <camelia> rakudo-moar 760530: OUTPUT: «Set|A3ACBF2BA1F70F182B28FC68DCDF8C2FC3E48E33␤»

[02:26] <AlexDaniel> is it supposed to be this way?

[02:28] <skids> Value type literals are still a bit of a mess.  At least someone was unhappy enough with that to file an RT.

[02:29] <AlexDaniel> which ticket is that?

[02:29] <skids> RT#132033

[02:29] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132033

[02:29] <skids> Other ticket along that vein: 129019

[02:31] <AlexDaniel> ah-ha. OK, it's already known then

[03:12] <AlexDaniel> was t/spec/S11-modules/require.t always a flapper or is it a recent thing?

[03:55] <MasterDuke> at least a long time, if not always

[05:19] <masak> jnthn: re "already in RT" -- good.

[05:19] <masak> and it's no big blocker either, now that I know the cause. I can work around it quite easily.

[07:30] <lizmat> timotimo: good catch, fixed

[07:30] <lizmat> Files=1223, Tests=67641, 291 wallclock secs (11.04 usr  4.65 sys + 1974.04 cusr 208.56 csys = 2198.29 CPU)

[08:14] <samcv> i'm going to be adding ignoremark tests, that test Prepend+Extend degenerates i.e. not base character

[08:15] <samcv> what i've decided is that if there's no base character, we treat the first codepoint as the base character. so if it's 10 Prepend's in a row. the 1st one is the base (since no normal cp's follow)

[08:15] <samcv> and if it's Prepend+Extend degenerate by itself, then the first codepoint is the base as well

[08:16] <nine> Ok, here's a solution for the NativeCall "sub foo() is native(Str) returns(Int)" issue: NativeCall can export an INIT phaser and we can compile the subroutine bodies there.

[08:18] <samcv> AlexDaniel, guessing you see nothing wrong with this approach but let me know your thoughts on this

[08:19] <lizmat> nine: too bad we can't export a COMPOSE phaser, right ?

[08:23] <nine> lizmat: well technically we can't really export INIT phasers either ;) But with $*W available, we do have a lot of rope for hanging: https://github.com/niner/Inline-Perl5/blob/master/lib/Inline/Perl5.pm6#L814

[08:24] <lizmat> nine: but if we had a COMPOSE phaser, to be run at compile time, all of this could be done at compile time instead of runtime, right ?

[08:26] <nine> INIT is still compile time either?

[08:27] <lizmat> no, INIT is runtime afaik

[08:28] <nine> Oh...I actually meant CHECK

[08:29] <lizmat> m: CHECK say "CHECK"; ENTER say "ENTER"; INIT say "INIT"; BEGIN say "BEGIN"

[08:29] <camelia> rakudo-moar 760530: OUTPUT: «BEGIN␤CHECK␤INIT␤ENTER␤»

[08:29] <nine> Otherwise this wouldn't buy use anything :)

[08:29] <lizmat> ok, so it should the the CHECK phaser you're "exporting", right ?

[08:31] <nine> Yes, tested it here: https://gist.github.com/niner/66a72dbe737dcff4ab862ca782ce706f

[08:34] <nine> At some point having an EXPORTPHASERS would be lovely

[08:55] <lizmat> afk for a few hours&

[11:26] <Skarsnik> Hello

[11:42] <AlexDaniel> samcv: so we are talking about this handful of characters? https://gist.github.com/Whateverable/e1e6419550d0c5b81f560b0fb14713b3

[11:43] <samcv> yep

[11:43] <AlexDaniel> samcv: the problem with asking me questions like this is that I know so much less than you about the topic :)

[11:43] <samcv> well it was more informing you :)

[11:43] <AlexDaniel> samcv: so prepend characters are like reverse combiners?

[11:43] <samcv> yes exactly like reverse combiners

[11:44] <samcv> so it messed up casechanges and ignoremark since we always assumed the 1st codepoint was the base

[11:44] <AlexDaniel> well, that was wrong, yeah

[11:44] <samcv> i also changed the representation we have for synthetics. before we stored the base character in the struct and then had a MVMCodepoint pointer to an array of the combiners

[11:44] <timotimo> no, it was correct

[11:44] <timotimo> it just no longer is correct :)

[11:45] <samcv> now we have just one array of codepoints, and we have base_index which stores the index of the base character in the array

[11:45] <samcv> well it was introduced in unicode 9

[11:45] <AlexDaniel> propdump: U+0600

[11:45] <unicodable6> AlexDaniel, https://gist.github.com/99bf5ab484e3564ab9687616c1b1d6db

[11:46] <samcv> m: "\c[arabic number sign]a".uc.say

[11:46] <camelia> rakudo-moar 760530: OUTPUT: «؀a␤»

[11:46] <samcv> m: use nqp; nqp::ordbaseat("\c[arabic number sign]a", 0).say

[11:46] <camelia> rakudo-moar 760530: OUTPUT: «1536␤»

[11:46] <samcv> m: use nqp; nqp::ordbaseat("\c[arabic number sign]a", 0).uniname.say

[11:46] <camelia> rakudo-moar 760530: OUTPUT: «ARABIC NUMBER SIGN␤»

[11:46] <samcv> so that is incorrect

[11:46] <samcv> m: use nqp; nqp::ordbaseat("\c[arabic number sign]\c[combining caron]", 0).uniname.say

[11:46] <camelia> rakudo-moar 760530: OUTPUT: «ARABIC NUMBER SIGN␤»

[11:47] <samcv> though i'm making sure that if there is no base character that the base is just the first one. i think that's the least suprising thing

[11:47] <samcv> and having the base be the first Extend would be odd

[11:47] <AlexDaniel> gosh… reverse combiners :S

[11:47] <samcv> though easier to implement

[11:48] <AlexDaniel> this breaks all my previous expectations

[11:49] <timotimo> unicode tends to do that

[11:49] <AlexDaniel> m: “\c[arabic number sign]a”.chars.say

[11:49] <camelia> rakudo-moar 760530: OUTPUT: «1␤»

[11:49] <AlexDaniel> I remember somebody commenting on a strand bug ticket that combiners go *after* the character

[11:50] <samcv> oh with repeat?

[11:50] <AlexDaniel> yeah that one

[11:50] <samcv> yeah i fixd that one

[11:50] <AlexDaniel> “Combining chars look forward now? This breaks *my* expectations.”

[11:50] <samcv> now anything with `x` stays normalized. before it didn't in a lot of cases

[11:50] <samcv> i call them Extend and Prepend now to be more specific :p

[11:51] <AlexDaniel> that's more correct, yeah

[11:51] <samcv> though there's ZWJ which i guess can combine but not always

[11:51] <samcv> but combiners combine with anything

[11:51] <AlexDaniel> any potential issues with strands and a combination of prepend, extend and ZWJ? :)

[11:52] <samcv> nope shouldn't be

[11:52] <AlexDaniel> anyway, samcv++

[11:52] <AlexDaniel> TIL :)

[11:53] <samcv> there aren't that many .uc tests actually hm

[11:53] <samcv> i must add more :)

[12:22] <lizmat> moritz Zoffix no tweet about the P6W yet ??  :-(

[12:27] <moritz> lizmat: sorry, @daughter[0] just had first day of school, I didn't have any time for Perl 6 yet

[12:28] <moritz> twot now

[12:33] <timotimo> twoth the raven: nevermoar

[12:35] <|Tux|> This is Rakudo version 2017.08-108-g760530a52 built on MoarVM version 2017.08.1-150-g0b81969d

[12:35] <|Tux|> csv-ip5xs        1.314 -  1.341

[12:35] <|Tux|> test             9.422 -  9.767

[12:35] <|Tux|> test-t           3.457 -  3.519

[12:35] <|Tux|> csv-parser      10.851 - 11.146

[12:39] <Skarsnik> hm, is that slower?

[12:39] <moritz> .speed

[12:40] * moritz can't bot anymore

[12:40] <MasterDuke> hm, buggable and huggable aren't here

[12:40] <MasterDuke> Zoffix: ^^^

[12:41] <moritz> aren't they run by somebody else now? nine maybe?

[12:41] <MasterDuke> i think nine just runs Geth, but i could be wrong

[12:42] <moritz> ah

[12:42] <MasterDuke> but maybe they're all running on hack now and anybody with admin there could restart them? i don't know

[13:12] <nine> I run Geth and camelia

[13:20] <jnthn> At least the test-t times there, which are the ones I watch, don't seem slower

[13:56] <jnthn> m: class Foo { has $!z is default(Nil); method x { dd $!z } }.new.x

[13:56] <camelia> rakudo-moar 760530: OUTPUT: «Nil $!z = Nil␤»

[13:56] <jnthn> https://rt.perl.org/Ticket/Display.html?id=131387 seems to be fixed

[14:16] <Skarsnik> m: class Foo { has $!z is default(42); method x { dd $!z } }.new.x

[14:16] <camelia> rakudo-moar 760530: OUTPUT: «Int $!z = 42␤»

[14:18] <lizmat> jnthn: is there a reason why we check for a compile-time value in trait processing (L5406 in Actions.nqp) but not in attribute / parameter processing?

[14:20] <lizmat> the reason I'm asking, is that "has $.a = 42" is codegenned as calling a closure that returns the 42, rather than having the constant 42 just assigned

[14:20] <lizmat> and am considering optimising for that very common case

[14:23] <jnthn> I was going to avoid the special case and just let inlining take care of it once we do the build plan :)

[14:26] <jnthn> Zoffix: is https://rt.perl.org/Ticket/Display.html?id=129081 still needed? :)

[14:27] <lizmat> jnthn: ok, then I'll focus on that

[14:28] <lizmat> (doing the build plan I mean)

[14:29] <lizmat> although that still feels a bit awkward to me

[14:32] <Skarsnik> Should http://rakudo.org/tickets/ point to the sexy Zoffix page?

[14:32] <Skarsnik> releasable6, status

[14:32] <releasable6> Skarsnik, Next release in 4 days and ≈4 hours. 1 blocker. Changelog for this release was not started yet

[14:32] <releasable6> Skarsnik, Details: https://gist.github.com/695b8235b1a3532985fcee778610c36f

[14:33] <jnthn> lizmat: Awkward as in, not quite sure how to go about it?

[14:34] <lizmat> no, awkward as in a having a clear opportunity for direct optimizing something that would be immediately beneficial, instead of only getting faster when it is actually in hot code

[14:34] <lizmat> also wrt to precomp size

[14:35] <jnthn> Inlining happens at runtime

[14:35] <jnthn> So no impact on precomp size

[14:36] <jnthn> Unless you mean that we could reduce it for not having the generated method

[14:36] <lizmat> right, that's my idea

[14:36] <lizmat> I mean, it also means that the Attribute object needs to be around during execution as well

[14:37] <lizmat> but I guess that will always be the case anyway, right ?

[14:37] <jnthn> I was kinda hoping code-genning the build plan might mean we can have those be lazily deserialized

[14:37] <jnthn> At least in some cases where nothing wants the whole meta-object

[14:38] <lizmat> well, needing it to assign the default value, is not helpful for that, right ?

[14:38] <nine> Wouldn't this be just a call to .has_compile_time_value and a branch, i.e. a trivial amount of code in the compiler to generate optimized code directly?

[14:38] <lizmat> well, that is my feeling at the moment

[14:38] <jnthn> Yeah, but then we also need code on the other end

[14:39] <lizmat> use code #4 in the buildplan for the compile time case

[14:39] <jnthn> And we don't really want to check every time if it's a value or a block to invoke

[14:39] <lizmat> and introduce a higher value for the call method case

[14:39] <jnthn> So it'd need a different build plan code

[14:39] <jnthn> So it scatters out into a few places

[14:39] <jnthn> It's not too bad

[14:39] <jnthn> .tell samcv I think https://rt.perl.org/Ticket/Display.html?id=127048 is perhaps resolved and closable?

[14:39] <yoleaux> jnthn: I'll pass your message to samcv.

[14:39] <lizmat> jnthn: In think I know the few places where it scatters to

[14:40] <jnthn> Yeah. I'm not really against it, I just prefer general optimizations solving many problems to lots of specific ones.

[14:41] <lizmat> I think the added complexity is well worth it atm

[14:42] <lizmat> also: I'd like to investigate the possibility of setting the default value on the attribute rather than codegenning an assignment

[14:43] <lizmat> I know there are semantic differences, but I'd like to check the fallout of that in the ecosystem

[14:43] <lizmat> which I think will be minimal

[14:45] <jnthn> I'd rather not go that path

[14:45] <lizmat> why ?

[14:46] <jnthn> It'll introduce differences with the attrinitted stuff

[14:46] <lizmat> ah  hmmm...

[14:46] <jnthn> Also will make the value is visible earlier than it "should" be

[14:46] <jnthn> Potentially other inconsistencies

[14:46] <lizmat> hmmm...

[14:46] <lizmat> would you mind such an approach for parameters?

[14:47] <lizmat> (as in non-rw parameters)

[14:47] <jnthn> We don't both creating Scalar containers at all in many cases of that

[14:47] <jnthn> So there's nothing reliably there to put an "is default" on

[14:47] <lizmat> ah, ok

[14:47] <lizmat> too bad  :-)

[14:47] <jnthn> Fetching a wval is almost free too

[14:47] <jnthn> Which is what we compile that into

[14:48] <jnthn> iirc after JIT it can just turn into a single instruction that loads the memory address

[14:51] <jnthn> Gosh, the number of RTs about hyper/race

[14:51] * jnthn is actually going through them looking for ones that relate to scheduler issues

[16:02] <Geth> ¦ nqp: d35cdbdd35 | (Samantha McVey)++ | tools/build/MOAR_REVISION

[16:02] <Geth> ¦ nqp: Bump Moar: Prepend support for casechanges, ignoremark, ordbaseat

[16:02] <Geth> ¦ nqp:

[16:02] <Geth> ¦ nqp: Changes: 2017.08.1-150-g0b81969d..2017.08.1-156-g49b90b99

[16:02] <Geth> ¦ nqp: 49b90b99 Fix case change when base cp isn't the first cp in synthetic

[16:02] <Geth> ¦ nqp: db3102c4 For degenerate Synth's with Prepend and Extend set base cp to 1st cp

[16:02] <Geth> ¦ nqp: f8a639e2 Fix ignoremark with Prepend characters and ordbaseat op

[16:02] <Geth> ¦ nqp: d78c3707 ULL is the proper suffix for a 64 bit integer literal

[16:02] <Geth> ¦ nqp: 22000677 Nativecall code : fix invalid pointer creation

[16:02] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d35cdbdd35

[16:02] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.08.1-150-g0b81969d... No newline at end of file

[16:04] <Geth> ¦ rakudo/nom: 7f526c1efd | (Samantha McVey)++ | tools/build/NQP_REVISION

[16:04] <Geth> ¦ rakudo/nom: Bump NQP/Moar: Prepend support for casechanges, ignoremark

[16:04] <Geth> ¦ rakudo/nom:

[16:04] <Geth> ¦ rakudo/nom: Previously Prepend codepoints in a synthetic grapheme would cause case

[16:04] <Geth> ¦ rakudo/nom: changes and ignoremark not to function properly. Prepend codepoints are

[16:04] <Geth> ¦ rakudo/nom: the reverse of normal combining characters, and come before instead of after

[16:04] <Geth> ¦ rakudo/nom: the base glyph.

[16:04] <Geth> ¦ rakudo/nom:

[16:04] <Geth> ¦ rakudo/nom: <…commit message has 6 more lines…>

[16:04] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7f526c1efd

[16:04] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.08-61-g731fcc381... No newline at end of file

[16:10] <Zoffix> jnthn: thanks; closed 129081

[16:11] <jnthn> Yay, another one down :)

[16:11] <jnthn> I ended up closing several other old ones as I was going back through the queue today :)

[16:12] <Geth> ¦ rakudo/nom: 5f33506567 | (Samantha McVey)++ | 2 files

[16:12] <Geth> ¦ rakudo/nom: .collate/coll/unicmp no longer experimental. $*COLLATION still is

[16:12] <Geth> ¦ rakudo/nom:

[16:12] <Geth> ¦ rakudo/nom: The .collate method, coll and unicmp infix functions are no longer

[16:12] <Geth> ¦ rakudo/nom: experimental. I am still keeping $*COLLATION the dynamic variable

[16:12] <Geth> ¦ rakudo/nom: which allows you to configure the sort as experimental for now.

[16:12] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5f33506567

[16:12] <samcv> no more experimental \o/

[16:12] <yoleaux> 14:39Z <jnthn> samcv: I think https://rt.perl.org/Ticket/Display.html?id=127048 is perhaps resolved and closable?

[16:12] <Zoffix> lizmat: tweeted P6W on my account; I was just taking a break from all humans so didn't use Twitter :)

[16:13] * samcv &

[16:13] <samcv> jnthn, yes that's resolved. i'll close it right now

[16:13] <jnthn> yay :)

[16:14] <Zoffix> MasterDuke: brought the bots back

[16:15] <samcv> ok closed

[16:15] * samcv &

[16:18] <Zoffix> Huge amount of backlog

[16:18] * Zoffix gives up trying to read it

[16:21] <Zoffix> The IO::Handle.lines seek error... Yes, it should seek in sink-all, because otherwise file's position isn't predictable for users. I don't understand why the error would show up in that place, as `try` would take care of it. Perhaps it's not from IO::Handle.lines or gfldex was using too-old rakudo, without that fix

[16:21] <Zoffix> m: try $*OUT.seek: 10; say "meow"

[16:21] <camelia> rakudo-moar 7f526c: OUTPUT: «␀␀␀␀␀␀␀␀␀␀meow␤»

[16:22] <Zoffix> m: try $*IN.seek: 10; say "meow"

[16:22] <camelia> rakudo-moar 7f526c: OUTPUT: «meow␤»

[16:23] <Skarsnik_> bugs are not at fail.rakudo.org ?

[16:24] <Zoffix> fail.rakudo.party

[16:25] <Skarsnik_> Zoffix, is toaster runnable on a 'shit' vps?

[16:26] <Zoffix> Try

[16:27] <AlexDaniel> .

[16:27] <yoleaux> 16:10Z <Zoffix> AlexDaniel: no toaster from me this month. I'm away on vacation.

[16:27] <AlexDaniel> okay

[16:28] <Zoffix> lizmat: thanks for fixing S24-testing/8-die_on_fail.t ... How come they were passing before? Don't they run as part of `make [spec|streee]test`?

[16:29] <Skarsnik_> Zoffix, how much space I would need?

[16:29] <jnthn> fwiw, my current ponderings on ThreadPoolScheduler changes: https://gist.github.com/jnthn/398d84b088d6c4ed8b79c2a5bfe89497

[16:29] <Zoffix> I don't remember. 10GB maybe more

[16:29] <Skarsnik_> hm

[16:29] <jnthn> Started exploring this in code a bit too

[16:29] <Skarsnik_> I don't have that, damn

[16:30] <jnthn> But hometime now :)

[16:30] <timotimo> jnthn: "unlikely to lead to more process" -> "progress"?

[16:31] <jnthn> yeah

[16:31] <jnthn> I ain't fixing typos though, it's just my scribbles

[16:31] <Zoffix> Skarsnik_: sign up for google compute engine. They give $300 credit.

[16:31] <timotimo> no prob :)

[16:31] <Zoffix> Skarsnik_: or run a debian in a VirtualBox

[16:33] <AlexDaniel> Skarsnik_: fwiw if it takes 10 hours instead of 40 minutes it's ok too, as long as we get some result

[16:33] * jnthn bbl

[16:33] <AlexDaniel> jnthn++ # RT queue

[16:36] <AlexDaniel> Skarsnik_: but google compute engine is probably a worthy suggestion

[16:39] <Skarsnik_> 1$ hourly for something crazy if I read this right?

[16:40] <AlexDaniel> but 300$ free

[16:40] <Skarsnik_> https://cloud.google.com/compute/pricing?hl=fr

[16:40] <Skarsnik> if I understand correctly I can have 300h or like a 8-16 core + 8-16Gb memory? x)

[16:40] <Zoffix> .tell lizmat fixes to S24-testing/8-die_on_fail.t look good. The only thing I don't get is why they were passing before or what do you mean by "core returns the wrong exit codes". perl6 -e 'exit 255'; echo $? gives me 255. Some glitch in is_run() routine?

[16:40] <yoleaux> Zoffix: I'll pass your message to lizmat.

[16:41] <Zoffix> Skarsnik: use the "pre-emptive" option. They shut it off once in a while, but it's a lot cheaper.

[16:42] <Zoffix> Skarsnik: that page just lists the free stuff. When you sign up to GCE you get a $300 credit

[16:43] <Skarsnik> I will look at that after my movie ^^

[16:43] <AlexDaniel> Skarsnik: thank you very much, that'd help a lot

[16:44] <Zoffix> lizmat++ # good weekly

[16:44] <AlexDaniel> Skarsnik: feel free to ping me if there are any issues with this, I'm very interested in toaster results before the release

[16:44] <Zoffix> Man. Lots of catching up after just ~5 days. I originally planned not to come back until I finished both C Programming: Modern Approach and The GC Handbook :)

[16:46] <Skarsnik> random bad though for next releases: pick 10 bugs in rt at random and make them blockers?

[16:46] <Geth> ¦ 6.d-prep: 330ffdeccb | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[16:46] <Geth> ¦ 6.d-prep: List `use experimental` stuff in TODO

[16:46] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/330ffdeccb

[16:47] <Zoffix> [Coke]: RE: experimental. Yeah, making things that are solid non-experimental in 6.d sounds like a plan. RE: clean up and review of roast; I plan to get on that in a few weeks, when I get back; same with the making doc site support language versions.

[16:48] <Zoffix> lizmat++ pushing for earlier 6.d release :)

[16:48] <Zoffix> Skarsnik: that sounds pretty bad :)

[16:49] <Skarsnik> I remember playing around having way to put multi language in pod for perl 5

[16:49] <Skarsnik> like you repeat your = instruction with a =inst-i10n

[16:49] * Zoffix goes back into isolation for another week

[16:49] <Zoffix> \o

[16:50] <Skarsnik> good vacation ^^

[16:50] <AlexDaniel> Zoffix: have fun

[18:15] <gfldex> m: sub s($a, :$b){ constant @a = &?ROUTINE.signature; dd @a }; s(1, :1b);

[18:15] <camelia> rakudo-moar 5f3350: OUTPUT: «(:(),)␤»

[18:15] <gfldex> what is &?ROUTINE pointing at at compile time?

[18:16] <ugexe> yeah, thats what the ? means

[18:16] <gfldex> m: sub s($a, :$b){ my @a = &?ROUTINE.signature; dd @a }; s(1, :1b);

[18:16] <camelia> rakudo-moar 5f3350: OUTPUT: «Array @a = [:($a, :$b)]␤»

[18:16] <gfldex> m: sub s($a, :$b){ my @a = &?ROUTINE.signature; dd @a }; s(1);

[18:16] <camelia> rakudo-moar 5f3350: OUTPUT: «Array @a = [:($a, :$b)]␤»

[18:16] <gfldex> m: sub s($a, :$b){ my @a = &?ROUTINE.signature; dd @a }; s();

[18:16] <camelia> rakudo-moar 5f3350: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling s() will never work with declared signature ($a, :$b)␤at <tmp>:1␤------> 3{ my @a = &?ROUTINE.signature; dd @a }; 7⏏5s();␤»

[18:18] <gfldex> if it's meaningless at compile time, it should complain

[19:09] <jnthn> It's pointing at the Routine, but I think the signature object is attached at the closing } at present

[19:13] <Geth> ¦ roast: 0948c61db2 | usev6++ | S17-supply/Channel.t

[19:13] <Geth> ¦ roast: [jvm] Unskip passing test RT #127947

[19:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0948c61db2

[19:13] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=127947

[21:23] <[Coke]> yay, so much java.

[21:45] <samcv> m: "\c[arabic number sign]a".uc.say

[21:45] <camelia> rakudo-moar 5f3350: OUTPUT: «؀A␤»

[21:45] <samcv> m: say "\c[arabic number sign]a" ~~ /:m a/

[21:45] <camelia> rakudo-moar 5f3350: OUTPUT: «｢؀a｣␤»

[21:46] <Geth> ¦ roast: aa2ea1a76a | (Samantha McVey)++ | S05-modifier/ignoremark.t

[21:46] <Geth> ¦ roast: Add ignoremark regex tests for when there are Prepend cp's

[21:46] <Geth> ¦ roast:

[21:46] <Geth> ¦ roast: Test to make sure that we match the correct base codepoint when we

[21:46] <Geth> ¦ roast: have Prepend characters. If we have all Prepend and no base or Prepend

[21:46] <Geth> ¦ roast: + Extend only, then match the first codepoint instead.

[21:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/aa2ea1a76a

[21:46] <Geth> ¦ roast: 00554ccbd9 | (Samantha McVey)++ | S15-nfg/case-change.t

[21:46] <Geth> ¦ roast: Add tests for case changes when we have Prepend codepoints

[21:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/00554ccbd9

[21:46] <Geth> ¦ roast: 6a4bc5450b | (Samantha McVey)++ | S15-unicode-information/uniname.t

[21:46] <Geth> ¦ roast: Test that hangul syllables return the correct Unicode name

[21:46] <Geth> ¦ roast:

[21:46] <Geth> ¦ roast: These are not listed directly in the Unicode data files and are

[21:46] <Geth> ¦ roast: pregenerated during Unicode database creation on MoarVM.

[21:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6a4bc5450b

[21:52] <gfldex> m: loop { react { last if $++ > 3 } }; say 'done';

[21:52] <gfldex> should that ^^^ work?

[21:52] <camelia> rakudo-moar 5f3350: OUTPUT: «(timeout)»

[21:56] <yoleaux> Zoffix: Do stuff with tutorials: https://www.reddit.com/r/perl/comments/6qvf55/the_3_most_important_things_missing_from_perl_6/dl0r510/

[22:07] <b2gills> m: my $a = 0; loop { last if ++$a > 20; react { say $++, ':', $a } }; say 'done';

[22:07] <camelia> rakudo-moar 5f3350: OUTPUT: «0:1␤0:2␤0:3␤0:4␤0:5␤0:6␤0:7␤0:8␤0:9␤0:10␤0:11␤0:12␤0:13␤0:14␤0:15␤0:16␤0:17␤0:18␤0:19␤0:20␤done␤»

[22:08] <b2gills> gfldex: the `$++` is bound to the `react` block. so it gets a new one for each time through the loop

[22:08] <b2gills> m: my $a = 0; loop { last if ++$a > 20; react say $++, ':', $a }; say 'done';

[22:08] <camelia> rakudo-moar 5f3350: OUTPUT: «0:1␤1:2␤2:3␤3:4␤4:5␤5:6␤6:7␤7:8␤8:9␤9:10␤10:11␤11:12␤12:13␤13:14␤14:15␤15:16␤16:17␤17:18␤18:19␤19:20␤done␤»

[22:09] <timotimo> aye, the inner block gets closure-cloned each time around the loop, and that gives you new state values

[22:16] <Geth> ¦ rakudo/nom: ec18efa056 | (Elizabeth Mattijsen)++ | src/core/List.pm

[22:16] <Geth> ¦ rakudo/nom: Any.collate will also handle List.collate

[22:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ec18efa056

[22:48] <gfldex> i got reading from a fifo working now. It's a big longer then in Perl 5: https://gist.github.com/gfldex/7eae7537df6779a128df13a91f545a22

[22:49] <gfldex> $fifo-in.lines doesn't block like while <$fifo> does in Perl 5

[22:59] <gfldex> m: loop { react { last if True } }; say 'done';

[22:59] <camelia> rakudo-moar ec18ef: OUTPUT: «(timeout)»

[22:59] <gfldex> m: last; say 'done';

[22:59] <camelia> rakudo-moar ec18ef: OUTPUT: «===SORRY!===␤last without loop construct␤»

[23:00] <AlexDaniel> gah

[23:01] <AlexDaniel> mch: last; say 'done';

[23:01] <committable6> AlexDaniel, ¦2015.12: «last without loop construct␤  in block <unit> at /tmp/EdcwTyuDFN line 1␤ «exit code = 1»» ¦HEAD(ec18efa): «===SORRY!===␤last without loop construct «exit code = 1»»

[23:01] <AlexDaniel> how did we lose the line number there?

[23:01] <AlexDaniel> c: releases last; say 'done';

[23:01] <committable6> AlexDaniel, https://gist.github.com/9b726ffb56ddbd9c2e7b0a485c0a647e

[23:01] <AlexDaniel> bisect: old=2016.05 last; say 'done';

[23:01] <bisectable6> AlexDaniel, Bisecting by output (old=2016.05 new=ec18efa) because on both starting points the exit code is 1

[23:01] <AlexDaniel> what the

[23:02] <gfldex> jnthn: should last and react mix?

[23:02] <Geth> ¦ roast: skids++ created pull request #313: Add tests for RT#126332

[23:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/313

[23:02] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126332

[23:02] <Geth> ¦ roast: cd4b226082 | skids++ | 2 files

[23:02] <Geth> ¦ roast: Add tests for RT#126332

[23:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cd4b226082

[23:02] <Geth> ¦ roast: b2142be764 | skids++ (committed using GitHub Web editor) | 2 files

[23:02] <Geth> ¦ roast: Merge pull request #313 from skids/rt126332

[23:02] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126332

[23:02] <Geth> ¦ roast:

[23:02] <Geth> ¦ roast: Add tests for RT#126332

[23:02] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126332

[23:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b2142be764

[23:03] <AlexDaniel> bisect: old=2016.05 last; say 'done';

[23:03] <bisectable6> AlexDaniel, Bisecting by output (old=2016.05 new=ec18efa) because on both starting points the exit code is 1

[23:03] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/51cd499fbe0e5a8a1b040a9c1237143a

[23:03] <bisectable6> AlexDaniel, There are 10 candidates for the first “new” revision. See the log for more details

[23:04] <AlexDaniel> gfldex: I can't find a ticket for “last without loop construct”, can you make one?

[23:05] <gfldex> RT doesn't like my e-mails anymore

[23:05] <AlexDaniel> m: next; say 'done';

[23:05] <camelia> rakudo-moar ec18ef: OUTPUT: «===SORRY!===␤next without loop construct␤»

[23:05] <AlexDaniel> gfldex: that's too bad. What about creating them on the website?

[23:05] <timotimo> gfldex: i think last should only work inside a whenever

[23:05] <timotimo> the react block's body is only run once for setup

[23:05] <skids> Oh hey, did someone do something to get spectest runs to actually parallize?  Up to now the S17 tests always ran first for me.

[23:05] <AlexDaniel> gfldex: https://rt.perl.org/m/ticket/create?Queue=16 if you're logged in

[23:06] <gfldex> timotimo: it doesn't work inside a whatever either

[23:06] <gfldex> whenever even

[23:06] <AlexDaniel> skids: it has been possible to parallelize it for a long time, now it simply defaults to 6

[23:06] <skids> Ah.

[23:06] <AlexDaniel> skids: TEST_JOBS=8 make spectest

[23:07] <AlexDaniel> (does it default to 6 or 4? Don't remember)

[23:07] <AlexDaniel> (I guess 4)

[23:08] <ugexe> last inside a supply yes, inside a react though? isn't that just .done?

[23:09] <ugexe> i guess its not quite the same thing

[23:09] <skids> .oO(It should default to http://www.urbandictionary.com/define.php?term=Threven :-)

[23:09] <gfldex> it does what last does for a react block. If a loop is enclosing that the last would have to do done and then the last.

[23:13] <ugexe> seems like it might work with labels though

[23:13] <ugexe> m: FOO: while 1 { react { last FOO } LAST { say 42 } }

[23:13] <camelia> rakudo-moar ec18ef: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3FOO: while 1 { react { last FOO }7⏏5 LAST { say 42 } }␤    expecting any of:␤        infix␤        infix stopper…»

[23:14] <ugexe> m: FOO: while 1 { react { last FOO }; LAST { say 42 } }

[23:14] <camelia> rakudo-moar ec18ef: OUTPUT: «42␤»

[23:20] <gfldex> m: react { whenever Supply.from-list(<a b c>) { last if /b/ }; }; LAST { say 42 }

[23:20] <camelia> rakudo-moar ec18ef: OUTPUT: «(timeout)»

[23:20] <gfldex> m: FOO: while 1 { react { whenever Supply.from-list(<a b c>) { last FOO if /b/ }; }; LAST { say 42 } }

[23:20] <camelia> rakudo-moar ec18ef: OUTPUT: «42␤»

[23:21] <gfldex> react doesn't react as expected to last :)

[23:23] <ugexe> m: react { say 1; last; say 2 };

[23:23] <camelia> rakudo-moar ec18ef: OUTPUT: «(timeout)1␤»

[23:23] <ugexe> m: react { say 1; next; say 2; };

[23:23] <camelia> rakudo-moar ec18ef: OUTPUT: «1␤»

[23:25] <timotimo> okay that's strange

[23:27] <gfldex> react seams to catch nqp::const::CONTROL_LAST where it shouldn't

[23:29] <ugexe> it does handle control stuff differently than one might be used to

[23:30] <ugexe> m: while 1 { sub foo { react { whenever start { 1 } { return 1; } } }; foo() }

[23:30] <camelia> rakudo-moar ec18ef: OUTPUT: «MoarVM panic: Internal error: Unwound entire stack and missed handler␤»

[23:52] <b2gills> `react` is an alternative to `supply`, and `supply` does have a reason to handle `last`

[23:52] <b2gills> m: (supply { emit 0; last if True; emit 1 }).act: *.say; sleep 1

[23:52] <camelia> rakudo-moar ec18ef: OUTPUT: «0␤»

[23:53] <timotimo> oh, huh.

[23:53] <timotimo> that's fair

[23:53] <gfldex> so it's just a trap, not a bug.

[23:53] <AlexDaniel> .oO( “did you mean “done”?” )

[23:55] <b2gills> The `last` control exception may happen deep down in code you don't have control of.
