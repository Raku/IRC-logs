[05:14] <MasterDuke> earlier today i noticed an occasional fail in t/spec/S17-supply/interval.t, not sure if this is a known thing, but got some valgrind output here: https://gist.github.com/MasterDuke17/5f07124670c43c819c6e230f388b51d4

[07:24] <Geth> ¦ roast: ce7fb0f723 | (Moritz Lenz)++ | S02-magicals/sub.t

[07:24] <Geth> ¦ roast: RT #130761: if-block confuses &?ROUTINE

[07:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ce7fb0f723

[07:24] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130761

[07:47] <[Tux]> This is Rakudo version 2017.01-204-g266f34571 built on MoarVM version 2017.01-49-g7ff91dbb

[07:47] <[Tux]> csv-ip5xs        2.917

[07:47] <[Tux]> test            12.739

[07:47] <[Tux]> test-t           5.027 - 5.068

[07:47] <[Tux]> csv-parser      13.873

[14:14] <Geth> ¦ rakudo/nom: 98413136df | (Elizabeth Mattijsen)++ | src/core/Int.pm

[14:14] <Geth> ¦ rakudo/nom: Make Int.WHICH about 1.7x faster

[14:14] <Geth> ¦ rakudo/nom:

[14:14] <Geth> ¦ rakudo/nom: This should help when using Ints as keys in typed hashes, Sets, Bags

[14:14] <Geth> ¦ rakudo/nom: or Mixes.

[14:15] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/98413136df

[14:16] <timotimo> yes! very good!

[14:16] <timotimo> ah, so just constant-folding "Int|" if the type is actually Int

[14:16] <timotimo> nice catch

[14:24] <Geth> ¦ rakudo/nom: aac9efcbda | (Zoffix Znet)++ | src/core/Rational.pm

[14:24] <Geth> ¦ rakudo/nom: Fix Rational.norm

[14:24] <Geth> ¦ rakudo/nom:

[14:24] <Geth> ¦ rakudo/nom: It assumes the Rationals are always reduced, however, that's not the

[14:24] <Geth> ¦ rakudo/nom: case for optimization reasons.

[14:24] <Geth> ¦ rakudo/nom:

[14:24] <Geth> ¦ rakudo/nom: Fix by reducing before returning self.

[14:24] <Geth> ¦ rakudo/nom:

[14:24] <Geth> ¦ rakudo/nom: Bug find: https://irclog.perlgeek.de/perl6/2017-02-13#i_14092899

[14:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aac9efcbda

[14:25] <jnthn> I think !REDUCE-ME probably has to go

[14:25] <jnthn> Yeah, it does, it's a data race

[14:26] <jnthn> Rat is meant to be immutable

[14:26] <IOninja> oh :(

[14:26] <jnthn> So we can't have a REDUCE-ME that works in-place

[14:26] <timotimo> well, we can. but only if we call it just after (for example) cloning the one we were called on

[14:26] <timotimo> in which case, REDUCE-ME can just go ahead and do that, too

[14:27] <jnthn> Right, it can only work in-place if we didn't leak the thing yet...immutability is really about outward behavior

[14:27] <jnthn> m: say (1/6 + 1/6).perl

[14:27] <camelia> rakudo-moar 266f34: OUTPUT«<1/3>␤»

[14:27] <jnthn> m: say (1/6 + 1/6).numerator

[14:27] <camelia> rakudo-moar 266f34: OUTPUT«2␤»

[14:28] <jnthn> m: say (1/6 + 1/6).denominator

[14:28] <camelia> rakudo-moar 266f34: OUTPUT«6␤»

[14:29] <jnthn> m: say (1/6 + 1/6).nude

[14:29] <camelia> rakudo-moar 266f34: OUTPUT«(1 3)␤»

[14:29] <Geth> ¦ roast: 7d0daf5286 | (Zoffix Znet)++ | 2 files

[14:29] <Geth> ¦ roast: Test Rational.norm actual returns reduced form

[14:29] <Geth> ¦ roast:

[14:29] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/aac9efcbda

[14:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7d0daf5286

[14:30] <jnthn> m: for ^100 { my $a = 1/6 + 1/6; (start { die if $a.nude ne (1, 3) }) xx 2 }

[14:30] <camelia> rakudo-moar 266f34: ( no output )

[14:30] <jnthn> m: for ^10000 { my $a = 1/6 + 1/6; (start { die if $a.nude ne (1, 3) }) xx 2 }

[14:30] <camelia> rakudo-moar 266f34: ( no output )

[14:30] <jnthn> m: for ^10000 { my $a = 1/6 + 1/6; (start { die if $a.nude ne (1, 3) }) xx 2 }

[14:30] <camelia> rakudo-moar 266f34: ( no output )

[14:30] <jnthn> oh, wait

[14:30] <jnthn> m: for ^10000 { my $a = 1/6 + 1/6; await (start { die if $a.nude ne (1, 3) }) xx 2 }

[14:30] <camelia> rakudo-moar 266f34: ( no output )

[14:31] <jnthn> Guess it's tricky to trigger

[14:44] <IOninja> s: 1.5, 'nude', \()

[14:44] <SourceBaby> IOninja, Sauce is at https://github.com/rakudo/rakudo/blob/9841313/src/core/Rational.pm#L43

[14:45] <IOninja> I don't get why it'd be triggered that way.

[14:46] <IOninja> $a => 2/6; you then start two calls to .nude that race to .REDUCE-ME and update it with reduction, which in both cases would end up as 1/3

[14:46] <IOninja> Or is there a crash that could happen?

[14:47] <IOninja> s: 1.5, 'REDUCE-ME', \()

[14:47] <SourceBaby> IOninja, Sauce is at https://github.com/rakudo/rakudo/blob/9841313/src/core/Rational.pm#L213

[14:49] <IOninja> there's a race between methods that do REDUCE-ME and stuff that doesn't.

[14:50] <IOninja> m: for ^10000 { my $a = 1/6 + 1/6; await start { die if ($a + 1/6) != .5 }, start { $ = $a.nude } }

[14:50] <camelia> rakudo-moar aac9ef: ( no output )

[14:50] <IOninja> m: for ^10000 { my $a = 1/6 + 1/6; await start { die if ($a + 1/6) != .5 }, start { $ = $a.nude } }

[14:51] <camelia> rakudo-moar aac9ef: ( no output )

[14:51] <IOninja> m: for ^100000 { my $a = 1/6 + 1/6; await start { die if ($a + 1/6) != .5 }, start { $ = $a.nude } }

[14:51] <camelia> rakudo-moar aac9ef: OUTPUT«(signal )»

[14:51] <jnthn> Not a crash so much as a wrong answer

[14:51] <IOninja> Ah, OK, now I see it

[14:51] <jnthn> my $gcd = $!denominator gcd $!numerator;

[14:51] <IOninja> One REDUCE-ME updates numerator and the other uses the updated value in that ^

[14:51] <jnthn> Even within REDUCE-ME

[14:52] <jnthn> We could read the denominator here, in another thread denominator and numerator would be updated, and then we'd read the new numerator

[14:52] <IOninja> yeah

[14:52] <jnthn> And various other permutations :)

[15:35] <lizmat> commuting a bit&

[16:07] <Geth> ¦ nqp: b2c0b3cbbe | MasterDuke17++ | docs/ops.markdown

[16:07] <Geth> ¦ nqp: FH output ops return the number of bytes written

[16:07] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/b2c0b3cbbe

[16:27] <Geth> ¦ nqp: 3268b0524c | MasterDuke17++ | docs/ops.markdown

[16:27] <Geth> ¦ nqp: Add very basic nqp::seekfh documentation

[16:27] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3268b0524c

[17:44] <Geth> ¦ roast: ronaldxs++ created pull request #231: Fudgeandrun move to roast

[17:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/231

[20:24] <Geth> ¦ roast: 183bf96e99 | usev6++ | 2 files

[20:24] <Geth> ¦ roast: Fudge newly added test for JVM

[20:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/183bf96e99

[20:35] <Geth> ¦ roast: 2685afc22e | usev6++ | S02-types/list.t

[20:35] <Geth> ¦ roast: [JVM] Fudge test that blows up under t/harness5

[20:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2685afc22e
