[01:53] <Geth> ¦ roast: 88635564e5 | (Samantha McVey)++ | S15-normalization/test-gen.p6

[01:53] <Geth> ¦ roast: Add concatenation tests for NFC to ensure concat is safe.

[01:53] <Geth> ¦ roast:

[01:53] <Geth> ¦ roast: This commit was prompted by the improvements in logic when concatenating

[01:53] <Geth> ¦ roast: strings in MoarVM. The logic on whether a string needs to be

[01:53] <Geth> ¦ roast: renormalized when concat'd was improved. These tests were added to ensure

[01:53] <Geth> ¦ roast: that the improvements did not cause any breakage with things that change

[01:53] <Geth> ¦ roast: under NFC.

[01:53] <Geth> ¦ roast:

[01:53] <Geth> ¦ roast: Luckily the MoarVM changes pass all the new tests. These tests will be useful

[01:53] <Geth> ¦ roast: to have as concatenation is further worked on.

[01:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/88635564e5

[01:54] <Geth> ¦ roast: a363e3ff14 | (Samantha McVey)++ | 10 files

[01:54] <Geth> ¦ roast: Commit the NFC tests generated from the previous commit

[01:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a363e3ff14

[01:54] <samcv> ok. The previous mention of not to bump MoarVM until i added some tests is rescinded. with this ^^ commits

[01:54] <samcv> all is good :)

[01:54] <samcv> just wanted to be extra safe

[03:24] <Geth> ¦ rakudo/rt130919: 32b72cdaa7 | (Nick Logan)++ (committed using GitHub Web editor) | src/core/Supply.pm

[03:24] <Geth> ¦ rakudo/rt130919: Call done/quit on all taps - RT #130919

[03:24] <Geth> ¦ rakudo/rt130919:

[03:24] <Geth> ¦ rakudo/rt130919: https://rt.perl.org/Ticket/Display.html?id=130919

[03:24] <Geth> ¦ rakudo/rt130919:

[03:24] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130919

[03:24] <Geth> ¦ rakudo/rt130919: `perl6 -e 'my $supplier = Supplier.new; my $supply = $supplier.Supply; $supply.tap(done => { say 1 }); $supply.tap(done => { say 2 }); $supplier.done;'`

[03:24] <Geth> ¦ rakudo/rt130919:

[03:24] <Geth> ¦ rakudo/rt130919: Actual (current) output:

[03:24] <Geth> ¦ rakudo/rt130919: <…commit message has 5 more lines…>

[03:24] <Geth> ¦ rakudo/rt130919: review: https://github.com/rakudo/rakudo/commit/32b72cdaa7

[03:24] <Geth> ¦ rakudo: ugexe++ created pull request #1112: Call done/quit on all taps - RT #130919

[03:24] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130919

[03:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1112

[05:17] <Geth> ¦ rakudo/rt130883: 075ddefa9b | (Nick Logan)++ (committed using GitHub Web editor) | src/core/CompUnit/RepositoryRegistry.pm

[05:17] <Geth> ¦ rakudo/rt130883: Avoid magic $cwd in module search path RT #130883

[05:17] <Geth> ¦ rakudo/rt130883:

[05:17] <Geth> ¦ rakudo/rt130883: https://rt.perl.org/Ticket/Display.html?id=130883

[05:17] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130883

[05:17] <Geth> ¦ rakudo/rt130883:

[05:17] <Geth> ¦ rakudo/rt130883: Similar to the Perl dot-inc security issue, but limit to when PERL6LIB (or `use lib`) is set to an empty string:

[05:17] <Geth> ¦ rakudo/rt130883:

[05:17] <Geth> ¦ rakudo/rt130883: $ echo 'package { say "all your base" }' > NativeCall.pm6

[05:17] <Geth> ¦ rakudo/rt130883: <…commit message has 9 more lines…>

[05:17] <Geth> ¦ rakudo/rt130883: review: https://github.com/rakudo/rakudo/commit/075ddefa9b

[05:18] <Geth> ¦ rakudo: ugexe++ created pull request #1113: Avoid magic $cwd in module search path RT #130883

[05:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1113

[05:18] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130883

[06:02] <nine> "When you are not writing a Novel use Rakudo", love it :)

[06:24] <[Tux]> This is Rakudo version 2017.06-221-gc86090e35 built on MoarVM version 2017.06-75-g8aa657d6

[06:24] <[Tux]> csv-ip5xs        2.775

[06:24] <[Tux]> test            13.170

[06:24] <[Tux]> test-t           4.359 - 4.591

[06:24] <[Tux]> csv-parser      11.658

[06:24] <[Tux]> Error encoding UTF-8 string: could not encode codepoint 1570066 (0x17F512), codepoint out of bounds. Cannot encode higher than 1114111 (0x10FFFF)

[06:24] <[Tux]> in block  at 88.t line 21

[07:55] <Geth> ¦ roast: 750b3b0b4e | (Nick Logan)++ (committed using GitHub Web editor) | S29-os/system.t

[07:55] <Geth> ¦ roast: Fix proc test failing due to prior chdir

[07:55] <Geth> ¦ roast:

[07:55] <Geth> ¦ roast: Use `LEAVE { chdir $orig-cwd }` to fix being left in a different directory for remaining tests.

[07:55] <Geth> ¦ roast:

[07:55] <Geth> ¦ roast: Use `$*EXECUTABLE.absolute` so the proper interpreter is always used.

[07:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/750b3b0b4e

[07:55] <Geth> ¦ roast: 5833e2670d | lizmat++ (committed using GitHub Web editor) | S29-os/system.t

[07:55] <Geth> ¦ roast: Merge pull request #281 from perl6/ugexe-patch-1

[07:55] <Geth> ¦ roast:

[07:55] <Geth> ¦ roast: Fix proc test failing due to prior chdir

[07:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5833e2670d

[07:56] <Geth> ¦ rakudo/nom: 075ddefa9b | (Nick Logan)++ (committed using GitHub Web editor) | src/core/CompUnit/RepositoryRegistry.pm

[07:56] <Geth> ¦ rakudo/nom: Avoid magic $cwd in module search path RT #130883

[07:56] <Geth> ¦ rakudo/nom:

[07:56] <Geth> ¦ rakudo/nom: https://rt.perl.org/Ticket/Display.html?id=130883

[07:56] <Geth> ¦ rakudo/nom:

[07:56] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130883

[07:56] <Geth> ¦ rakudo/nom: Similar to the Perl dot-inc security issue, but limit to when PERL6LIB (or `use lib`) is set to an empty string:

[07:56] <Geth> ¦ rakudo/nom:

[07:56] <Geth> ¦ rakudo/nom: $ echo 'package { say "all your base" }' > NativeCall.pm6

[07:56] <Geth> ¦ rakudo/nom: <…commit message has 9 more lines…>

[07:56] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/075ddefa9b

[07:57] <Geth> ¦ rakudo/nom: b1c412aa31 | lizmat++ (committed using GitHub Web editor) | src/core/CompUnit/RepositoryRegistry.pm

[07:57] <Geth> ¦ rakudo/nom: Merge pull request #1113 from rakudo/rt130883

[07:57] <Geth> ¦ rakudo/nom:

[07:57] <Geth> ¦ rakudo/nom: Avoid magic $cwd in module search path RT #130883

[07:57] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130883

[07:57] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b1c412aa31

[08:13] <lizmat> .tell ugexe t/spec/S29-os/system.t fails tests 35-36 for me consistently now (macOS)

[08:13] <yoleaux> lizmat: I'll pass your message to ugexe.

[09:17] <Geth> ¦ rakudo/nom: f6025eb92d | (Elizabeth Mattijsen)++ | 8 files

[09:17] <Geth> ¦ rakudo/nom: Make all non-texas set operators aliases where possible

[09:17] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f6025eb92d

[09:18] <Geth> ¦ rakudo/nom: 32b72cdaa7 | (Nick Logan)++ (committed using GitHub Web editor) | src/core/Supply.pm

[09:18] <Geth> ¦ rakudo/nom: Call done/quit on all taps - RT #130919

[09:18] <Geth> ¦ rakudo/nom:

[09:18] <Geth> ¦ rakudo/nom: https://rt.perl.org/Ticket/Display.html?id=130919

[09:18] <Geth> ¦ rakudo/nom:

[09:18] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130919

[09:18] <Geth> ¦ rakudo/nom: `perl6 -e 'my $supplier = Supplier.new; my $supply = $supplier.Supply; $supply.tap(done => { say 1 }); $supply.tap(done => { say 2 }); $supplier.done;'`

[09:18] <Geth> ¦ rakudo/nom:

[09:18] <Geth> ¦ rakudo/nom: Actual (current) output:

[09:18] <Geth> ¦ rakudo/nom: <…commit message has 5 more lines…>

[09:18] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/32b72cdaa7

[09:18] <Geth> ¦ rakudo/nom: 5196e0cded | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/core/Supply.pm

[09:18] <Geth> ¦ rakudo/nom: Merge pull request #1112 from rakudo/rt130919

[09:18] <Geth> ¦ rakudo/nom:

[09:18] <Geth> ¦ rakudo/nom: Call done/quit on all taps - RT #130919

[09:18] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130919

[09:18] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5196e0cded

[11:18] <Geth> ¦ roast/6.c-errata: ab07be7fb1 | (Elizabeth Mattijsen)++ | S03-operators/mix.t

[11:18] <Geth> ¦ roast/6.c-errata: Fix faulty not a proper subset test

[11:18] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/ab07be7fb1

[11:41] <Geth> ¦ roast: 2450d645a1 | (Elizabeth Mattijsen)++ | 3 files

[11:41] <Geth> ¦ roast: Removed superfluous (^) tests

[11:41] <Geth> ¦ roast:

[11:41] <Geth> ¦ roast: All these cases are being handled by set_symmetric_difference.t now

[11:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2450d645a1

[12:10] <Zoffix> m:           say 1.0e-1 + 2.0e-1 == 3.0e-1;

[12:10] <camelia> rakudo-moar 5196e0: OUTPUT: «True␤»

[12:10] <Zoffix> m: $ = .3e0; say 1.0e-1 + 2.0e-1 == 3.0e-1;

[12:10] <camelia> rakudo-moar 5196e0: OUTPUT: «False␤»

[12:10] <Zoffix> trippy, eh?

[12:11] <Zoffix> .3e0 is different from 3.0e-1 and if you use the former first it gets cached.

[12:12] <Zoffix> different in the amount of f.p. noise I mean (or at least that's the apparent cause)

[12:28] <Zoffix> huggable: num discrepancy :is: 1.0e-1 is not same as .1e0; discrepancy reproed with C code equivalent to our parsing: https://gist.github.com/zoffixznet/46ae8dd7d85096d58dc557f60f82a179

[12:28] <huggable> Zoffix, Added num discrepancy as 1.0e-1 is not same as .1e0; discrepancy reproed with C code equivalent to our parsing: https://gist.github.com/zoffixznet/46ae8dd7d85096d58dc557f60f82a179

[12:28] <Zoffix> gonna figure it out some time later

[12:45] <Geth> ¦ roast: 388234a22d | (Elizabeth Mattijsen)++ | S03-operators/set_symmetric_difference.t

[12:45] <Geth> ¦ roast: Fix a few comment typos

[12:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/388234a22d

[12:45] <Geth> ¦ roast: 5096f004ff | (Elizabeth Mattijsen)++ | S03-operators/set_union.t

[12:45] <Geth> ¦ roast: Add no/one/lazy tests for (|)

[12:45] <Geth> ¦ roast:

[12:45] <Geth> ¦ roast: These were done for all of the other set operators that don't return

[12:45] <Geth> ¦ roast: Bool, so it should be done here as well.

[12:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5096f004ff

[12:47] <Geth> ¦ rakudo/nom: c16334e5f3 | (Elizabeth Mattijsen)++ | src/core/set_union.pm

[12:47] <Geth> ¦ rakudo/nom: Add more (|) union candidates

[12:47] <Geth> ¦ rakudo/nom:

[12:47] <Geth> ¦ rakudo/nom: - spotted when adding some more (|) tests

[12:47] <Geth> ¦ rakudo/nom: - should make several coercion cases a lot faster

[12:47] <Geth> ¦ rakudo/nom: - now properly handles lazy lists

[12:47] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c16334e5f3

[13:00] <Geth> ¦ roast: 0b142b877c | (Elizabeth Mattijsen)++ | S03-operators/set_union.t

[13:00] <Geth> ¦ roast: Add some [(|)] tests with 3 values

[13:00] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0b142b877c

[13:13] <Geth> ¦ rakudo/nom: 46e009bf15 | (Elizabeth Mattijsen)++ | src/core/set_union.pm

[13:13] <Geth> ¦ rakudo/nom: Simplify infix:<(|)>(**@) candidate

[13:13] <Geth> ¦ rakudo/nom:

[13:13] <Geth> ¦ rakudo/nom: - now that all 0,1,2 candidates are in place, doing necessary coercions

[13:13] <Geth> ¦ rakudo/nom: - the N parameters candidate only needs to repeat the same action

[13:13] <Geth> ¦ rakudo/nom: - this should probably provide quite a significant speedup in some situations

[13:13] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/46e009bf15

[13:30] <Geth> ¦ roast: 48fe31dc0e | (Elizabeth Mattijsen)++ | S03-operators/set_union.t

[13:30] <Geth> ¦ roast: Add some more (|) testing

[13:30] <Geth> ¦ roast:

[13:30] <Geth> ¦ roast: - lazy lists should be tested for any incarnation of (|)

[13:30] <Geth> ¦ roast: - add tests for the union of 3 empty QuantHashes

[13:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/48fe31dc0e

[13:52] <Zoffix> ZOFFLOP: t/spec/S32-io/open.t

[13:54] <Zoffix> And t/spec/S29-os/system.t fails test "not ok 36 - run sets $cwd and $env"

[13:54] <Zoffix> s: &run

[13:54] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/46e009b/src/core/Proc.pm#L221

[13:54] <Zoffix> holy crap. "Files=1260, Tests=164555, 160 wallclock secs (26.32 usr  4.25 sys + 3190.66 cusr 242.21 csys = 3463.44 CPU)"

[13:55] <Zoffix> m: say 113/160

[13:55] <camelia> rakudo-moar 46e009: OUTPUT: «0.70625␤»

[13:55] <Zoffix> m: say 160/113

[13:55] <camelia> rakudo-moar 46e009: OUTPUT: «1.415929␤»

[13:55] <Zoffix> Unless google is pwning me, our stresstest got 40% slower in like last 2-3 days

[13:55] <Zoffix> buggable: speed 20

[13:55] <buggable> Zoffix, ▂▁▂▇▂▂▂▂▂▄▃▂▅▄█▂▁▁↑▅ data for 2017-07-05–2017-07-13; range: 4.099s–4.591s; 5% slower

[13:57] <Geth> ¦ roast: 0d05bd3c48 | (Elizabeth Mattijsen)++ | S03-operators/set_union.t

[13:57] <Geth> ¦ roast: Add quite a few [(|)] $a, $b, $c tests

[13:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0d05bd3c48

[13:58] <lizmat> Zoffix: I've added quite a few set operator tests, but each file typically runs within 1 second wallclock

[13:59] <lizmat> so I don't think that can explain

[13:59] <lizmat> at least not the whole difference

[14:00] <Zoffix> I've noticed my parse time was 87s instead of usual ~67s, so it's possible the google's pwning is a possibility

[14:01] <lizmat> yeah, I don't see that difference in parse time

[14:02] <lizmat> fwiw, my setting parse time is between 49 and 52 generally

[14:09] <Geth> ¦ roast: f53e85fac8 | (Elizabeth Mattijsen)++ | S03-operators/set_symmetric_difference.t

[14:09] <Geth> ¦ roast: Add some more (^) testing

[14:09] <Geth> ¦ roast:

[14:09] <Geth> ¦ roast: - lazy lists should be tested for any incarnation of (^)

[14:09] <Geth> ¦ roast: - add tests for the symmetric difference of 3 empty QuantHashes

[14:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f53e85fac8

[14:13] <Geth> ¦ rakudo/nom: f6e25b54ea | (Zoffix Znet)++ | src/Perl6/Actions.nqp

[14:13] <Geth> ¦ rakudo/nom: Fix f.p. noise in denominator of Rat literals

[14:13] <Geth> ¦ rakudo/nom:

[14:13] <Geth> ¦ rakudo/nom: When parsing a rat we rountrip the fractional part through a num,

[14:13] <Geth> ¦ rakudo/nom: which creates the f.p. noise in the denominator.

[14:13] <Geth> ¦ rakudo/nom:

[14:13] <Geth> ¦ rakudo/nom: Fixes RT#130845: https://rt.perl.org/Ticket/Display.html?id=130845

[14:13] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130845

[14:13] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f6e25b54ea

[14:14] <Geth> ¦ roast: 8e533b544b | (Zoffix Znet)++ | S32-num/rat.t

[14:14] <Geth> ¦ roast: Test no f.p. noise in Rat literals with >64 denominator

[14:14] <Geth> ¦ roast:

[14:14] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/f6e25b54ea

[14:14] <Geth> ¦ roast: RT#130845: https://rt.perl.org/Ticket/Display.html?id=130845

[14:14] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130845

[14:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8e533b544b

[14:17] <Zoffix> Well, this is temporarish fix. Until our Rats can do uint64 denominator at which point the parsing will make possibly a RatStr

[14:30] <b2gills> Perhaps another Rational that isn't as aggressive as FatRat?

[14:31] <Zoffix> Yeah, like a non-infectious FatRat

[14:32] <ugexe> lizmat: those tests always pass for me. perhaps its my invocation worked due to it testing via relative paths. the invocation i'm usign is `rakudo$ install/bin/perl6 t/spec/S29-os.t`

[14:32] <ugexe> on osx

[14:33] <Zoffix> I use t/fudgeandrun t/spec/S29-os.t and it fails for me on Debian

[14:33] <Zoffix> Um... well, not sure which test fails for lizmat; for me the "not ok 36 - run sets $cwd and $env" fails

[14:34] <ugexe> ok when i run it with Zoffix's invocation it fails for me

[14:36] <lizmat> install/bin/perl6  t/spec/S29-os/system.rakudo.moar   # test 35 fails

[14:37] <ugexe> interesting, that invocation is not failing for me (after my pr) now matter how many times i retry

[14:37] <ugexe> /no/now/

[14:37] <ugexe> grr, s/now/no/

[14:38] <ugexe> i should be able to figure it out though since t/fudgerun will fail it for me

[14:40] <ugexe> i get the same as Zoffix though, only test 36 fails. test 35 still passing here

[14:43] <ugexe> ah i see

[14:52] <Geth> ¦ roast: da03a91b43 | (Elizabeth Mattijsen)++ | S03-operators/set_symmetric_difference.t

[14:52] <Geth> ¦ roast: Add quite a few [(^)] $a, $b, $c tests

[14:52] <Geth> ¦ roast:

[14:52] <Geth> ¦ roast: With one test de-activated, as it doesn't give the correct result :-(

[14:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/da03a91b43

[14:53] <lizmat> ugexe: double checked, but it's test 35 that fails for me

[15:01] <jnthn> I'm getting a failure in system too fwiw

[15:05] <lizmat> m: dd mix() (^) (a=>-42).Mix   # grrrr

[15:05] <camelia> rakudo-moar f6e25b: OUTPUT: «("a"=>-42).Mix␤»

[15:05] <lizmat> should be (:42a).Mix

[15:06] <lizmat> should be fixable before the release

[15:06] <lizmat> but first a bit of R&R   &

[15:09] <ugexe> lizmat: from what I can tell test 35 could have been failing before while testing ok

[15:09] <ugexe> isnt run("dir", "t"), BEGIN { run("dir", "t") }, 'run() is affected by chdir()'; # original test

[15:10] <ugexe> i do have a fix for test 36 though

[15:18] <Geth> ¦ roast: a46cdf94c2 | (Nick Logan)++ (committed using GitHub Web editor) | S29-os/system.t

[15:18] <Geth> ¦ roast: Fix unit test to work with test tooling

[15:18] <Geth> ¦ roast:

[15:18] <Geth> ¦ roast: The previous code worked with `install/bin/perl6 t/spec/S29-os/system.t` but not `t/fudgeandrun t/spec/S29-os/system.t` due to the later invoking perl6 with `./perl6`.

[15:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a46cdf94c2

[16:00] <Geth> ¦ roast: 3e5042feb6 | (Nick Logan)++ (committed using GitHub Web editor) | S29-os/system.t

[16:00] <Geth> ¦ roast: Test for cwd with perl6

[16:00] <Geth> ¦ roast:

[16:00] <Geth> ¦ roast: Also groups some blocks into subtests with additional test description

[16:00] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3e5042feb6

[16:01] <ugexe> lizmat: does that pass for you ^ ?

[16:01] <yoleaux> 08:13Z <lizmat> ugexe: t/spec/S29-os/system.t fails tests 35-36 for me consistently now (macOS)

[16:16] <ugexe> jnthn: thinking about the Supply PR I made earlier breaking the interface: the only thing I can think of is maybe it should prevent done() from being called again *if quit has been called*

[16:17] <jnthn> ugexe: Well, the thing we're trying to ensure is that a given tapper will always see emit* [done|quit]

[16:18] <jnthn> But it didn't seem to break that, given that it closes the tap after

[16:18] <jnthn> (in the cleanup handling)

[16:18] <ugexe> but is it ok for a quit to be called, immediately followed by a done (before cleanup on the quit has stopped this?)

[16:19] <ugexe> maybe that cant happen without the user doing it explicitly though

[16:22] <jnthn> I don't think it can happen because of .serial

[16:22] <jnthn> uh, .serialize

[16:22] <jnthn> Which is called by .sanitize

[16:22] <jnthn> And that enforces one-at-a-time messages

[16:26] <ugexe> ah ok

[17:25] <dogbert17> ugexe: do you remember if this gist (https://gist.github.com/ugexe/7ce08d3ad4cfd36f275c437ba9713471), from RT #128553 used to SEGV or did it only demonstrate that a some bytes went missing?

[17:25] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=128553

[17:51] <Geth> ¦ roast: 927b026c31 | (Nick Logan)++ (committed using GitHub Web editor) | S17-supply/basic.t

[17:51] <Geth> ¦ roast: Test all done/quit callbacks called - RT #130919

[17:51] <Geth> ¦ roast:

[17:51] <Geth> ¦ roast: https://rt.perl.org/Ticket/Display.html?id=130919

[17:51] <Geth> ¦ roast:

[17:51] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130919

[17:51] <Geth> ¦ roast: Added to rakudo in: https://github.com/rakudo/rakudo/commit/32b72cd

[17:51] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/927b026c31

[18:03] <ugexe> dogbert17: i dont think it segfaulted, but that gist will work if you change the `Buf.new($ords || 0)` to `Buf.new($ords) || Buf.new(0)`

[18:09] <dogbert17> ugexe: wanted to test if the SEGV that was originally reported is gone

[18:10] <dogbert17> jnthn has been on a roll today :)

[18:37] <Geth> ¦ rakudo/nom: 3f6bffdbce | (Elizabeth Mattijsen)++ | src/core/Rakudo/QuantHash.pm

[18:37] <Geth> ¦ rakudo/nom: Introducing R:Q.MIX-CLONE-ALL-POSITIVE

[18:37] <Geth> ¦ rakudo/nom:

[18:37] <Geth> ¦ rakudo/nom: Make sure that all values of keys in a R:I:IterationSet with Mixy

[18:37] <Geth> ¦ rakudo/nom: semantics have a positive value.

[18:37] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3f6bffdbce

[18:37] <Geth> ¦ rakudo/nom: 8d5f3324a3 | (Elizabeth Mattijsen)++ | src/core/set_symmetric_difference.pm

[18:37] <Geth> ¦ rakudo/nom: Fix mix() (^) (a=>-42).Mix

[18:37] <Geth> ¦ rakudo/nom:

[18:37] <Geth> ¦ rakudo/nom: This would improperly give (a=>-42).Mix, it should give (:42a).Mix.

[18:37] <Geth> ¦ rakudo/nom: It now does.

[18:37] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8d5f3324a3

[18:38] <lizmat> m: dd (a=>-42) (^) mix() (^) (:42a).Mix   # on to fixing this one

[18:38] <camelia> rakudo-moar f6e25b: OUTPUT: «("a"=>41).Mix␤»

[18:38] <lizmat> m: dd (a=>-42).Mix (^) mix() (^) (:42a).Mix   # eh, this one  :-)

[18:38] <camelia> rakudo-moar f6e25b: OUTPUT: «("a"=>84).Mix␤»

[18:41] <Geth> ¦ roast: dd195c62c2 | (Elizabeth Mattijsen)++ | S03-operators/set_symmetric_difference.t

[18:41] <Geth> ¦ roast: Add tests for mix() (^) (a=>-42).Mix

[18:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dd195c62c2

[18:45] <lizmat> .

[18:45] <lizmat> ugexe: All tests successful.

[18:45] <lizmat> Files=1210, Tests=69638, 251 wallclock secs (14.54 usr  5.28 sys + 1464.39 cusr 164.19 csys = 1648.40 CPU)

[18:45] <lizmat> so no more breakage in S29-os/system.t

[18:50] <lizmat> afk to watch some Apes&

[19:01] <b2gills> .oO( a whole planet of them? )

[19:05] <dogbert17> lizmat: does this work for you on OSX? perl6 -e 'run("ls", :merge).out.slurp.say'

[19:24] <ugexe> it works for me on osx

[19:31] <dogbert17> ugexe: cool, should we close RT#128594 then?

[19:31] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=128594

[19:45] <ugexe> dogbert17: yeah. https://github.com/perl6/roast/blob/master/S29-os/system.t#L83 - this test verifies (even though its on a nonexistent the result would still be the same: deadlock or pass)

[19:46] <ugexe> nonexistent command^

[19:49] <dogbert17> ugexe: done, have you fixed any other RT's recently?

[20:01] <ugexe> 130919 130883

[20:05] <dogbert17> ugexe: close 130919. Do you know if we have tests for 130883?

[20:05] <dogbert17> *closed

[20:11] <ugexe> i dont think so

[20:19] <japhb> NeuralAnomaly: status

[20:19] <NeuralAnomaly> japhb, [✘] Next release will be in 1 day and 8 hours. Since last release, there are 27 new still-open tickets (5 unreviewed and 0 blockers) and 41 unreviewed commits. See http://perl6.fail/release/stats for details

[20:25] <ugexe> perl6 -e 'my $output = qx|perl6 -e "BEGIN { BEGIN { q{NativeCall.pm6}.IO.spurt(q{package { say q{all your base} }}); %*ENV<PERL6LIB>=qq{}; }; use NativeCall; };"|; use Test; isnt "all your base", $output.chomp;'

[20:26] <ugexe> that'll test it

[20:37] <Zoffix> Anyone looking at [Tux]'s Malformed UTF-8 issue? I seen it mentioned a few times and now there's a bug report of the same happening in LWP::Simple: https://github.com/perl6/perl6-lwp-simple/issues/13

[20:39] <Zoffix> FWIW, the 'isnt' test isn't a good test for output (I saw some other tests go in that used the same technique). The output could be "Syntax error...." and the test would still pass

[20:40] <Zoffix> We have is_run test in t/spec/Test/Util.pm that's good for testing stuff like this

[20:45] <ugexe> a syntax error would be acceptable

[20:46] <ugexe> n/m i see

[20:53] <MasterDuke> has the malformed utf-8 been golfed?

[20:56] <ugexe> probably somehow related to that getc issue

[20:56] <ugexe> my $pipe = run("perl6", "-e", "q|a♥c|.print", :out).out; say $pipe.getc.chars; say $pipe.getc.chars;

[20:59] <ugexe> that one is in moarvm somewhere

[21:01] <ugexe> because replacing .consume-all-chars with .consume-available-chars inside !getc-slow-path results in just "a" (the 2nd getc, which would usually just be incorrect number of characters(2) would be Nil)

[21:08] <Zoffix> m: with '/tmp/foo70'.IO { .spurt: "a♥c"; with .open { dd ( .getc xx 10 ) } }

[21:08] <camelia> rakudo-moar 8d5f33: OUTPUT: «("a", "♥c", Nil, Nil, Nil, Nil, Nil, Nil, Nil, Nil).Seq␤»

[21:08] <Zoffix> The too-many-chars issue is that ^. Not sure what even causes the malformed utf8 one. Maybe [Tux] would know more

[21:09] <Zoffix> Alternatively, trying to golf down LWP::Simple failure (I'm assuming it's one of the tests that's failing)

[21:09] * Zoffix &

[21:16] <ugexe> it only takes the encoder being off by one to cause utf errors

[21:16] <ugexe> m: "a♥c".encode.subbuf(0,3).decode

[21:16] <camelia> rakudo-moar 8d5f33: OUTPUT: «Malformed termination of UTF-8 string␤  in block <unit> at <tmp> line 1␤␤»

[21:17] <AlexDaniel> MasterDuke: you can try golfing it perhaps? :) https://github.com/perl6/whateverable/issues/153

[21:17] <AlexDaniel> MasterDuke: but it also could be that the input data is indeed shitty

[21:18] <AlexDaniel> A bigger question I have is why :enc<utf8-c8> is not doing what I expect… hmm…

[21:18] <AlexDaniel> but I don't really remember any details now so *shrug*

[21:24] <MasterDuke> hm, the LWP::Simple test file doesn't always give it

[21:25] <MasterDuke> ok, it's actually making a get, so the return data probably isn't deterministic

[21:27] <MasterDuke> fwiw, --ll-exception output of a lwp::simple failure https://gist.github.com/MasterDuke17/05c53e79a5b2ec39224af59d5e7310c6

[21:28] <MasterDuke> where line 17 is `ok(LWP::Simple.getstore('http://www.opera.com', $fname),  'getstore() returned success');

[21:41] <MasterDuke> gist updated with valgrind output. havne't gotten then malformed utf-8 error yet, but it complains about invalid reads/writes

[21:45] <ugexe> if it only happens sometimes I would look at the chunked encoder

[21:46] <jnthn> MasterDuke: That valgrind is just an issue at VM shitdown, fwiw

[21:46] <jnthn> *shutdown

[21:46] <jnthn> ...though I was about right first time anyway :P

[21:46] <MasterDuke> ha. kind of thought so, but hoped there was something there anyway

[21:47] <jnthn> Though I'd kinda like to clean that up

[21:47] <MasterDuke> yeah, it didn't used to do that

[21:47] <jnthn> It's a hard problem for a multi-threaded app but should be ok for that case

[21:48] <MasterDuke> the malformed utf8 error happens about once every 5 runs normally, but i haven't seen it in about 20 valgrind runs

[21:49] <MasterDuke> ugh, just got it in valgrind, but valgrind doesn't show anything at all (not even that stuff from before)

[21:50] <jnthn> MasterDuke: Do you have a golf of the issue?

[21:50] <jnthn> It's getting to be bedtime here but I can look tomorrow

[21:51] <MasterDuke> well, nothing that doesn't use LWP::Simple so far

[21:52] <MasterDuke> but i'll let you know if i come up with anything

[21:53] <jnthn> Alright, thanks

[21:53] <MasterDuke> jnthn: did the --ll-exception output point out anything to you?

[21:54] <MasterDuke> the line in Buf.pm is `nqp::p6box_s(nqp::decode(self, Rakudo::Internals.NORMALIZE_ENCODING($encoding)))`

[21:55] <jnthn> I can't imagine much that could go wrong with that line, provided the contents of the buffer is OK

[21:57] <ugexe> yep its chunked encoder is borked

[21:57] <ugexe> it creates a file with the html, but there are random lines with the chunk size interlaced

[21:57] <jnthn> oops

[21:57] <jnthn> That'd do it

[21:57] <MasterDuke> heh

[21:58] <ugexe> but the chunked encoder shouldnt have just started not working... what i know from how you write them though you would have to count on getc or read(1) or some such (which goes back to the getc issue above)

[21:58] <jnthn> That's not how *I'd* write one, but yeah, it's a way :P

[21:59] <ugexe> you had to if you didnt know the full size. if you asked for a size that was too big it would deadlock

[21:59] <jnthn> .read(1) is binary reading which I think should be OK; .readchars(1) and .getc apparently have some kind of issue near the end of input

[22:00] <ugexe> if it wasnt a Connection: close

[22:00] <jnthn> .recv doesn't block, though?

[22:01] <jnthn> And IO::Socket::Async sure as heck don't, but I suspect that only got stable *after* LWP::Simple was written :)

[22:01] <jnthn> Anyways, if .getc is busted near end of input (which I seem to recall seeing an RT about) that'd want a fix.

[22:02] <jnthn> Will see if I can look at that tomorrow, so it's in before the release.

[22:03] <ugexe> there was something wonky with it where I had to do `while (my $byte = $.recv(1, :bin)).DEFINITE {` for method get of a http streaming parser

[22:05] <jnthn> OK

[22:05] * jnthn wonders if that got cleared up some with the socket changes

[22:05] <jnthn> Anyways, should go and rest so I might be usefulish tomorrow :)

[22:06] <jnthn> 'night

[22:08] <Zoffix> .tell jnthn "if .getc is busted near end of input (which I seem to recall seeing an RT about)". Yeah, there's a ticket for it: https://rt.perl.org/Ticket/Display.html?id=131365#ticket-history

[22:08] <yoleaux> Zoffix: I'll pass your message to jnthn.

[22:08] <Zoffix> Thank you, robot!

[22:14] <ugexe> Net::HTTP::GET("http://www.opera.com").content.say doesn't seem to have the same problem. i suspect http::useragent doesn't either

[22:16] <ugexe> `LWP::Simple.get("http://www.opera.com").say` keeps showing a 0 at the end for me (which shouldnt be shown as its denoting the chunk size/chunk end)

[23:13] <samcv> is there anyway to deprecate things in the nqp side? it's only in Rakudo yes?

[23:13] <timotimo> that's right

[23:14] <samcv> hmm how to deprecate ornamental parens

[23:14] <samcv> that's in nqp

[23:16] <timotimo> only way i can think of is to make everything more expensive :<
