[00:17] <El_Che> New 2017.11 Linux packages: https://github.com/nxadm/rakudo-pkg/releases/tag/v2017.11

[01:06] <samcv> interesting testing related problem semi humorous https://unix.stackexchange.com/questions/405783/why-does-man-print-gimme-gimme-gimme-at-0030

[01:06] <samcv> looks like a `man` easter egg caused someones tests to fail but only at 00:30

[01:07] <ugexe> i dont think it occured under valid flag/arg combinations

[01:08] <ugexe> heh maybe it did

[01:44] <ilmari[m]> ugexe: it wasn't meant to, but accidentally did under -w. fixed in git master now

[01:44] <ilmari[m]> See the reply/comment from Colin Watson

[02:20] <samcv> i personally think time based easter eggs that are not identical each run are a bad idea

[06:53] <Geth> ¦ rakudo: 0a24efc32d | usev6++ | src/vm/jvm/runtime/org/perl6/rakudo/Binder.java

[06:53] <Geth> ¦ rakudo: [jvm] Throw X::Parameter::InvalidConcreteness

[06:53] <Geth> ¦ rakudo:

[06:53] <Geth> ¦ rakudo: and give better error messages. This follows the code for MoarVM

[06:53] <Geth> ¦ rakudo: in src/Perl6/Metamodel/BOOTSTRAP.nqp

[06:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0a24efc32d

[07:20] <lizmat> Files=1228, Tests=75867, 313 wallclock secs (14.50 usr  5.18 sys + 2164.05 cusr 212.16 csys = 2395.89 CPU)

[07:20] <lizmat> afk for most of the rest of the day&

[07:27] <[Tux]> I stopped my browser(s) before running tests this time. I see no diff:

[07:27] <[Tux]> Rakudo version 2017.11-3-g0a24efc32 - MoarVM version 2017.11-2-g26ad7cc55

[07:27] <[Tux]> csv-test-xs-20      0.440 -  0.457

[07:27] <[Tux]> csv-ip5xs           1.105 -  1.114

[07:27] <[Tux]> test-t --race       1.329 -  1.340

[07:27] <[Tux]> test-t              3.220 -  3.269

[07:27] <[Tux]> test               12.093 - 12.182

[07:27] <[Tux]> csv-parser         12.299 - 12.583

[07:27] <[Tux]> csv-ip5xs-20       12.804 - 13.195

[07:27] <[Tux]> test-t-20 --race   20.152 - 20.849

[07:27] <[Tux]> test-t-20          59.915 - 60.010

[07:34] <[Tux]> and something broke HP-UX: https://smoke.procura.nl/

[10:42] <|Tux|> that last line is obviously in the wrong channel

[15:57] <pmurias> in docs/op.markdown should we also mention the return type of the op?

[15:57] <yoleaux> 20 Nov 2017 17:57Z <samcv> pmurias: you want "ducet" for co

[16:45] <[Coke]> pmurias: yes, probably

[17:13] <pmurias> samcv: thank you

[17:15] <pmurias> samcv: what is that shifter vs non-ignorable stuff we have a test for?

[17:15] <Geth> ¦ nqp/master: 5 commits pushed by pmurias++

[17:15] <Geth> ¦ nqp/master: 0872b4d990 | Fix srand signature

[17:15] <Geth> ¦ nqp/master: 886aa20d01 | Document return types of ops

[17:15] <Geth> ¦ nqp/master: e1a2233e8c | [js] Fix exception handling bug

[17:15] <Geth> ¦ nqp/master: 6f15a2db80 | [js] Start of nqp::unicmp_s implementation

[17:15] <Geth> ¦ nqp/master: 2e4e29a9da | [js] Handle context with no code in stub check

[17:15] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/e664aa53b4...2e4e29a9da

[20:06] <El_Che> 

[21:10] <Geth> ¦ rakudo: f40c381811 | usev6++ | tools/build/Makefile-JVM.in

[21:10] <Geth> ¦ rakudo: [jvm] Don't pass --nqp-lib=blib in 'make install'

[21:10] <Geth> ¦ rakudo:

[21:10] <Geth> ¦ rakudo: This unbreaks the installed versions of perl6 and perl6-j.

[21:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f40c381811

[21:43] <Geth> ¦ nqp: 3927afb302 | pmurias++ | docs/ops.markdown

[21:43] <Geth> ¦ nqp: Add more return types to op docs, fix some signatures

[21:43] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3927afb302

[22:39] <lizmat> .

[22:43] <Geth> ¦ rakudo: 2c1a2860b8 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[22:43] <Geth> ¦ rakudo: Add While/Until iterators

[22:43] <Geth> ¦ rakudo:

[22:43] <Geth> ¦ rakudo: - While: pass on values until the first false value returned by block

[22:43] <Geth> ¦ rakudo: - Until: don't pass values on until the first true value returned by block

[22:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2c1a2860b8

[22:49] <Geth> ¦ rakudo: 76fcea1e18 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm

[22:49] <Geth> ¦ rakudo: Expose new R:I:While/Until in .head/.tail

[22:49] <Geth> ¦ rakudo:

[22:49] <Geth> ¦ rakudo: - .head taking a Callable:D: block should return trueish while values

[22:49] <Geth> ¦ rakudo:   should be passed on.  The first falsish value will end the iterator.

[22:49] <Geth> ¦ rakudo: - .tail taking a Callable:D: block should return falsish while values

[22:49] <Geth> ¦ rakudo:   are being skipped.  The first trueish value will start passing on

[22:49] <Geth> ¦ rakudo:   values until iterator is exhausted.

[22:49] <Geth> ¦ rakudo: <…commit message has 7 more lines…>

[22:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/76fcea1e18

[22:51] <jnthn> star: dd (1..10).head(*-2) # curious

[22:51] <camelia> star-m 2017.07: OUTPUT: «(1, 2, 3, 4, 5, 6, 7, 8).Seq␤»

[22:51] <jnthn> star: dd (1..10).head({ $_ -2 }) # curious

[22:51] <camelia> star-m 2017.07: OUTPUT: «(1, 2, 3, 4, 5, 6, 7, 8).Seq␤»

[22:52] <jnthn> Ah, that was in the bit of the commit message I had to follow the link to see.

[22:52] <lizmat> yup

[22:52] <jnthn> Yeah, I'm a bit uneasy about that

[22:53] <jnthn> head-while and head-until are a little long but workable

[22:53] <jnthn> .while and .until don't let us have a subroutine form

[22:53] <jnthn> Which in turn don't let us use them with ==>

[22:53] <jnthn> Took me a while to realize that conflict was why I was so uneasy about those names

[22:54] <jnthn> Naming aside, I'm in agreement we want methods that do this, though

[22:54] <jnthn> Plus they're desirable on Supply

[22:57] <MasterDuke> skip-while and skip-until (with reversed meaning)?

[22:58] <lizmat> well, actually, I see .skip as the reverse of .grep

[22:58] <lizmat> a bit like .split and .comb

[22:58] <lizmat> with grep you specify what you want, with .skip you specify what you don't want

[22:59] <lizmat> but that's for later...

[23:01] <jnthn> .skip is culturally a bit awkward in that it's typically been used for .skip($number-of-elements)

[23:02] <jnthn> And .skip(2) would, like grep(2), "work" by smart-matching against 2...which will probably give people some headaches

[23:10] <jnthn> Actually skip-while and skip-until, with skip($n) being the numeric thing, could work I guess

[23:13] <lizmat> I see 4 types of semantics:

[23:13] <lizmat> 1. pass on values while condition is true, end iterator on first false

[23:14] <lizmat> 2. pass on values while condition is false, end iterator on first true

[23:15] <lizmat> 3. skip values while condition is true, pass on rest of iterator on first false

[23:15] <lizmat> 4. skip values while condition is false, pass on rest of iterator on first true

[23:16] <lizmat> or do you think 2 and 4 should not be possible and should be handled by the developer negating the condition?

[23:19] <jnthn> Well, if we decide that the developer should negate the conditions, then we get .grep, .initial (which probably needs a better name), and .skip

[23:19] <jnthn> Oh no, .skip can't really if it should do the numeric thing

[23:19] <jnthn> Hmm

[23:20] <jnthn> I guess an interesting question would be: do people find the lack of negative grep and having to negate a pain point?

[23:20] <lizmat> well, apparently not  :-)

[23:20] <lizmat> or not a lot anyway

[23:21] <jnthn> Yeah, I haven't personally felt it alot

[23:21] <jnthn> m: say (1, 1.5, 2, 2.5).grep(* !~~ Int)

[23:21] <camelia> rakudo-moar 76fcea1e1: OUTPUT: «(1.5 2.5)␤»

[23:21] * lizmat is tired though after getting up waaay to early, then being on the road for ~7 hours, and then doing some shopping to top it off

[23:21] <jnthn> Since that worked, it's been less annoying

[23:21] <timotimo> opposite-of-grep could be called ƃɹǝd

[23:22] <jnthn> /o\

[23:22] * jnthn revokes timotimo's language design license :P

[23:22] <timotimo> it's not hard to use grep(none(blah)) to get the negative of grep(blah)

[23:22] <timotimo> it's not very performant, of course :)

[23:22] <jnthn> ah, the junction approach...I'd forgotten that one

[23:22] <lizmat> yeah, that's not the opposite, that's the upsidedownite

[23:22] <jnthn> Well, true

[23:23] <jnthn> Lots to think about, anyway :)

[23:23] <lizmat> yup

[23:23] <lizmat> meanwhile, I'll revert that last commit as we appear to agree it's too magic, right ?

[23:23] <jnthn> I think it's too surprising, yeah

[23:24] <MasterDuke> i seem to recall a couple people asking how to negate a grep in #perl6, but i could be imaging it (don't really remember any details)

[23:25] <Geth> ¦ rakudo: c967cb6cc8 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm

[23:25] <Geth> ¦ rakudo: Revert "Expose new R:I:While/Until in .head/.tail"

[23:25] <Geth> ¦ rakudo:

[23:25] <Geth> ¦ rakudo: This reverts commit 76fcea1e18455fac9e71ab4ecc2ef42789d7035e.

[23:25] <Geth> ¦ rakudo:   https://irclog.perlgeek.de/perl6-dev/2017-11-22#i_15484290

[23:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c967cb6cc8

[23:28] <jnthn> If we do decide we want an inverse grep, omit would be a nice name

[23:29] <jnthn> Though I'm not convinced we do

[23:29] <jnthn> Discovered that while trying to figure out something better than .initial(&cond)

[23:29] <jnthn> Best I found so far is .leading(&cond)

[23:29] <timotimo> omit is fantastic, especially because it's just "timo" backwards

[23:31] <MasterDuke> clojure has some good names

[23:31] <MasterDuke> drop-while, drop-last

[23:32] <jnthn> Does it have drop taking an integer number to drop too?

[23:33] <timotimo> if you decide upon it based on "is it integer?" that can lead to surprises when you change your calculation to accidentally give a Rat and suddenly you're smartmatching against Rats rather than taking the first $n

[23:33] <MasterDuke> that's nthnext

[23:34] <jnthn> That's almost got jnthn in it :P

[23:35] <MasterDuke> oO(have Rick Hickey and jnthn ever been seen in the same room?)

[23:39] * lizmat goes to bed&
