[00:00] <lizmat> m: class A { method ^while($) { "foo" } }; dd A.^while   # a .while method excluding the endpoint ?

[00:00] <camelia> rakudo-moar 99f38f9fe: OUTPUT: «"foo"␤»

[00:00] <lizmat> yes, I know it's doing something else than what you expect :-)

[00:01] <jnthn> o.O

[00:01] <jnthn> lol? :)

[00:05] <jnthn> AlexDaniel: Don't know why, but I can reproduce it

[00:05] <AlexDaniel> everything non-ascii does not work, right?

[00:05] <jnthn> Seems. Though it works fine with -e

[00:06] <jnthn> Somebody clueful about this things patched env vars and command line args

[00:06] <jnthn> *these things

[00:06] <jnthn> (That somebody wasn't me)

[00:07] <lizmat> m: use MONKEY; augment class Seq { method ^while(Seq:D $self) { "foo" } }; say (^10).map( * + 2 ).^while  # jnthn: worth pursuing or not?

[00:07] <camelia> rakudo-moar 99f38f9fe: OUTPUT: «foo␤»

[00:08] <jnthn> What, you mean actually using that? :P

[00:09] <jnthn> I think the ... operator already provides a nice way to solve the problem, and I'm not so keep on .while and .until as method names

[00:09] <jnthn> *so keen

[00:09] <lizmat> well, from a language point of view, it would make sense?

[00:10] <lizmat> ok, I disagree about the ... operator being a nice way to do it

[00:10] <lizmat> but I will pursue this no further

[00:11] <jnthn> What do you find disagreeable about it, ooc?

[00:11] <lizmat> it's not something that comes naturally

[00:11] <lizmat> .while and .^while are (to me at least)

[00:11] <AlexDaniel> for myself: RT#130363 RT#131925

[00:11] <synopsebot> RT#130363 [open]: https://rt.perl.org/Ticket/Display.html?id=130363 [@LARRY] there's no match for Any aka /./ codegens differently from m/./ 

[00:11] <synopsebot> RT#131925 [open]: https://rt.perl.org/Ticket/Display.html?id=131925 [BUG] [REGEX] Smartmatch against `m//` operator mishandles junctions

[00:17] <lizmat> m: say ((^10).map( * + 2 ) ... * == 5).map: * * 2   # jnthn: also need another set of parens when chaining

[00:18] <camelia> rakudo-moar 6db51f975: OUTPUT: «(4 6 8 10)␤»

[00:18] * lizmat goes to bed

[00:21] <jnthn> An argument for a method form would be that we could implemnet it on Supply also

[00:21] <jnthn> And also potentially hyper and race but the semantics there would be very interesting :)

[00:22] <jnthn> I'm more uncomfortable with the names while and until, though I can't put my finger on why. TimToady maybe has some thoughts on that.

[00:22] <jnthn> And abusing .^ is not going to fly :)

[01:27] <wander> dogbert17: yes you can fix it temporarily in that way, but our purpose is showing the link properly. The main problem is our `htmlify.p6`(and somewhere module Pod::To::HTML) be too work-only.

[01:34] <wander> `htmlify.p6` can be modified directly without hesitation, while the module's design is so ugly that we even need change its interface, painful.

[01:38] <wander> IMO Pod::To::HTML should only produce the <body>, and provide a dynamic wrapper variable if user wants customization.

[01:43] <wander> oops, i removed my try to build p2h. i will bring this topic up again with codes :P

[02:09] <b2gills> m: https://gist.github.com/b2gills/b877658f38dae51e3c88fbdc0990f581 # lizmat I was talking about .accept-while and .accept-until back in Jan

[02:09] <camelia> rakudo-moar 6db51f975: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3https:7⏏5//gist.github.com/b2gills/b877658f38dae5␤    expecting any of:␤        colon pair␤»

[02:57] <Zoffix> How do you even notice that...

[02:59] <AlexDaniel> I don't know, but it's really infuriating :)

[03:01] <AlexDaniel> Zoffix: there's another page with big “Concise” title on it, and there's a “Try this out!” block. This particular green text color does not work very well on that red-ish background

[03:01] <AlexDaniel> I don't know why it is though…

[03:02] <Zoffix> I'll try to remember these changes the next time I'm working on it

[03:03] <Zoffix> You can also open an Issue on the repo

[03:04] <Zoffix> (don't wanna do anything today; spent the whole day running errands and got an hour to relax before sleep)_

[03:04] <AlexDaniel> GODDAMN LOGGER

[03:04] <AlexDaniel> alright I'll just inline it…

[03:07] <AlexDaniel> done

[03:07] <Zoffix> Thanks.

[03:07] <AlexDaniel> Zoffix: fwiw I like it a lot

[03:08] <Zoffix> Thanks.

[03:09] <AlexDaniel> another fwiw: stock images do create a strange feeling, but I don't think I care about it enough. It's ok

[03:11] <Zoffix> ¯\_(ツ)_/¯   maybe years of staring at them twisted my mind, but I find sexy people smiling, looking at content, or pointing to it, make the piece more personable and friendlier

[03:13] <Zoffix> I have one woman at work who hates stock models and always asks me to change them to stock of flowers... Maybe you two should meet :P

[03:14] <AlexDaniel> ( three? :) )

[03:15] <Zoffix> three? three what?

[03:15] <AlexDaniel> well, I thought stmuk didn't like the stock models too?

[03:16] <Zoffix> Ah :) I should start a list :)

[03:16] <AlexDaniel> yeah! Let's make a party!

[03:18] <japhb> Zoffix: Note that you say "sexy people smiling".  This indicates that they are window dressing, there for their attractiveness, not because they are essential.

[03:19] <japhb> (Essential would be for example if they are demonstrating how something is done, but for programming that's not as likely to be valuable.)

[03:19] <Zoffix> japhb: sure. That's what stock photos are for.

[03:20] <japhb> Some people find that use of people in marketing material off-putting, or even offensive.  Others like it.

[03:21] <japhb> I'm saying that someone who always asks you to change out the stock (human) models for something else may have an actual narrative in their head about why they don't like that -- and some portion of the audience is likely to share that narrative.

[03:21] <Zoffix> Some people like beef. Others like pork.

[03:23] <japhb> I guess it depends on whether your audience is vegetarian, kosher, or omnivore then.  And whether you are wanting to appeal one or both of the former groups.

[03:23] <japhb> *to appeal to

[03:24] <Zoffix> I'm not removing stock pictures just because you think using pictures of people as decoration is offensive.

[03:25] <japhb> I didn't ask you to.  I'm offering you more viewpoints.

[03:25] <japhb> (You'll often find that I don't argue a point directly, but merely explain why there is a reasonable argument to be made.)

[03:26] <Zoffix> Well, make your own fucking brochure then.

[03:26] <japhb> *I'm not trying to pick a fight*

[03:26] <japhb> I'm not trying to pick on your work either.

[03:27] <japhb> It just seemed like you didn't understand where others were coming from, and I was trying to explain it

[03:28] <japhb> FWIW, I'm not about to pick on someone for putting out honest effort to do good.

[03:28] <japhb> Some things work perfectly, some don't, but I certainly don't want you to feel like I'm saying your work isn't appreciated.

[03:31] * japhb realizes he neglected to ask if Zoffix was even interested in his help before starting

[03:31] <japhb> Sorry about that, Zoffix.

[03:32] <MasterDuke> this is nice, seems like firefox 57 loads rakudo profiles noticeably faster

[08:03] <Geth> ¦ rakudo: 5a29a0ce41 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm

[08:03] <Geth> ¦ rakudo: Make .head and .tail only take WhateverCode

[08:03] <Geth> ¦ rakudo:

[08:03] <Geth> ¦ rakudo: Instead of Callable.  Being able to take a Callable is not documented

[08:03] <Geth> ¦ rakudo: at the moment, and restricting it to WhateverCode does not break any

[08:03] <Geth> ¦ rakudo: tests.  Should allow for more uses of Callable with .head/.tail.

[08:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5a29a0ce41

[12:09] <tbrowder> .tell timotimo mind talking table pod cell formatting sometime?

[12:09] <yoleaux> tbrowder: I'll pass your message to timotimo.

[12:29] <tbrowder> .tell timotimo see gist https://gist.github.com/tbrowder/d8a48ae70cb1fb192bb2b2f0c0c4192e

[12:29] <yoleaux> tbrowder: I'll pass your message to timotimo.

[12:30] <timotimo> wasn't there some commits that threw out twines in favor of just requiring the user to typecheck individual elements?

[12:30] <yoleaux> 12:09Z <tbrowder> timotimo: mind talking table pod cell formatting sometime?

[12:30] <yoleaux> 12:29Z <tbrowder> timotimo: see gist https://gist.github.com/tbrowder/d8a48ae70cb1fb192bb2b2f0c0c4192e

[12:30] <timotimo> because a whole lot of empty strings kept ballooning the memory usage or something?

[12:31] <tbrowder> i don't know anything about that, but if that's the case, it needs to be in the docs IMHO.  doesn't seem to be an elegant way to handle it (i.e., LTA).

[12:32] <timotimo> if you're already traversing a pod tree with multi subs and such, you're already typechecking stuff implicitly

[12:33] <tbrowder> another way to handle it is change to structure of the table class to have an addition data member which will be empty unless there is a twine to be used instead of the string

[12:35] <tbrowder> for each cell maybe...

[12:35] <timotimo> i'm not sure what that will solve

[12:36] <tbrowder> as far as the user type-checking, there are notes inside Pod::To::* griping about cell formatting

[12:43] <tbrowder> anyway, any past problem with memory and empty strings i'll bet is not as much a problem now with a more mature code base.  i'll be glad to work on this if it's not shot down.

[12:50] <tbrowder> BTW, this would address Rakudo issue #1244

[12:58] <tbrowder> also maybe RT #126966 and others: #126654, etc.

[12:59] <synopsebot> RT#126966 [open]: https://rt.perl.org/Ticket/Display.html?id=126966 [POD] empty strings in .contents with single formatting code

[14:03] <liztormato> jnthn: I was thinking of using .head( { condition } ) instead of .while

[14:03] <liztormato> As long as the block returns true, it will

[14:04] <liztormato> pass on values. And end on first False

[14:05] <liztormato> Vice versa, .tail would skip while False, and start passing on

[14:05] <liztormato> on first True

[14:06] <liztormato> And possibly .skip could

[14:07] <liztormato> be considered the opposite of .grep

[14:23] <stmuk> ZofBot: I was joking about the stock models

[14:23] <ZofBot> stmuk, I called after him that it was only Fred and me, but at that moment a gun went off with a tremendous bang, so he couldn't have heard me

[14:24] <stmuk> damm tab complete

[14:43] <tbrowder> timotimo: lizmat would like someone more familiar with Pod.nqp to accept my PR #1240, would you mind considering it?

[14:43] <tbrowder> (or deny, of course)

[14:44] <tbrowder> *accept (or deny)

[14:45] <tbrowder> to pass spectests you also have to use my roast PR #353

[14:46] <Geth> ¦ nqp: 98f6e54c02 | pmurias++ | 2 files

[14:46] <Geth> ¦ nqp: [js] Implement some uniprop matching

[14:46] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/98f6e54c02

[14:46] <Geth> ¦ nqp: 626e60c81f | pmurias++ | src/vm/js/RegexCompiler.nqp

[14:46] <Geth> ¦ nqp: [js] Remove captures from cstack when backtracking a capture

[14:46] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/626e60c81f

[14:46] <pmurias> bartolin: found a new bug bug where the fix can be copied over to the JVM: https://github.com/rakudo/rakudo/issues/1251

[15:46] <Geth> ¦ nqp: af3b775a7c | pmurias++ | src/vm/js/RegexCompiler.nqp

[15:46] <Geth> ¦ nqp: [js] Implement zerowidth anchor type

[15:46] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/af3b775a7c

[16:01] <AlexDaniel> releasable6: status

[16:01] <releasable6> AlexDaniel, Next release in 2 days and ≈2 hours. No blockers. 109 out of 205 commits logged

[16:01] <releasable6> AlexDaniel, Details: https://gist.github.com/997ac6ce10947260fe92c9df1fb4c589

[16:02] <Geth> ¦ rakudo: 028b7d22ca | (Moritz Lenz)++ | tools/commit-stats.pl

[16:02] <Geth> ¦ rakudo: Remove outdated tool (issue #1252)

[16:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/028b7d22ca

[16:02] <synopsebot> RAKUDO#1252 [open]: https://github.com/rakudo/rakudo/issues/1252 [meta] Rakudo repo cleanup (mainly tools/ directory)

[16:03] <AlexDaniel> \o/

[16:03] <Geth> ¦ rakudo: 5baede5915 | (Moritz Lenz)++ | tools/progress-graph.pl

[16:03] <Geth> ¦ rakudo: Remove outdated tool (issue #1252)

[16:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5baede5915

[16:14] <Geth> ¦ rakudo: 825a8b0d09 | (Moritz Lenz)++ | tools/available-pm-names.pl6

[16:14] <Geth> ¦ rakudo: No need for available-pm-names.pl6

[16:14] <Geth> ¦ rakudo:

[16:14] <Geth> ¦ rakudo: we do not name our releases after PM groups. Issue #1252

[16:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/825a8b0d09

[16:14] <synopsebot> RAKUDO#1252 [open]: https://github.com/rakudo/rakudo/issues/1252 [meta] Rakudo repo cleanup (mainly tools/ directory)

[16:40] <|Tux|> did I post a timing today?

[16:45] <japhb> |Tux|: Not that I've seen.

[16:52] <|Tux|> Rakudo version 2017.10-208-g825a8b0d0 - MoarVM version 2017.10-80-ga0dc2747c

[16:52] <|Tux|> csv-test-xs-20      0.435 -  0.440

[16:52] <|Tux|> csv-ip5xs           1.075 -  1.106

[16:52] <|Tux|> test-t --race       1.235 -  1.331

[16:52] <|Tux|> test-t              3.175 -  3.238

[16:52] <|Tux|> test               11.801 - 12.126

[16:52] <|Tux|> csv-parser         12.063 - 12.099

[16:52] <|Tux|> csv-ip5xs-20       12.606 - 12.852

[16:52] <|Tux|> test-t-20 --race   19.480 - 20.186

[16:52] <|Tux|> test-t-20          58.480 - 59.791

[16:52] <japhb> buggable: speed :4

[16:52] <buggable> japhb,    ▃     ▂     ▃   ▅  █   ▃↑▃  ▃    ▅ █  ↑       dates: 2017-10-26–2017-11-16

[16:52] <buggable> japhb,    █ ▂   █    ▁█  ▆█  █▇ ▆███  █▅ ▇ █ █▁▄█▅▂     range: 19.341s–23.185s

[16:52] <buggable> japhb,   ▆█▄█   █▆▆▅▇██  ██▄████████▇ ██▆█▇█ ██████▇▃▂  speed: 1% slower (widths: 9/3)

[16:52] <buggable> japhb, ▁▂████▅▇▇███████▆▇████████████▄██████▃█████████▂

[16:53] <japhb> More noise than anything else, it looks like.

[16:58] <ilmari> buggable: speed :4 test-t

[16:58] <buggable> ilmari,          ▅           ↑     ↑█  ↑     ▂             dates: 2017-10-26–2017-11-16

[16:58] <buggable> ilmari,          █ ▄    ▂▄  ▂█ ▄▂▃▁██  █     █   ▇   ▂     range: 3.067s–3.701s

[16:58] <buggable> ilmari,      ▂ ▂ █ █▄▅▃▅██▅███▇██████▅██▃▃▆▆▅█▆▂██▅▇▇█▂▄ ▅ speed: 4% slower (widths: 9/3)

[16:58] <buggable> ilmari, ▃▃▁▃▇█▅█▃█▇███████████████████████████████████████

[16:58] * sjn thinks zoffix's buggable bot would be a little less noisy if it's output wasn't as wide as it is now.

[16:58] <ilmari> sjn: here's a penny, get yourself a wider terminal ;-P

[16:59] <|Tux|> or a smaller font

[16:59] * ilmari fits four 120x38 terminals with a comfortable font size on this 23" monitor

[16:59] <sjn> ideal output width would be max 78-25-$nick.chars :)

[17:00] * |Tux| thinks ideal is in the eyes of the beholder

[17:01] <ilmari> you have 25 characters of cruft on each line?

[17:01] <sjn> that sounds painful

[17:01] <ugexe> just turn the graph 90 degrees :P

[17:01] <ilmari> m: "16:58 <+buggable> ".length

[17:01] <camelia> rakudo-moar 825a8b0d0: OUTPUT: «No such method 'length' for invocant of type 'Str'. Did you mean any of these?␤    chars␤    codes␤␤  in block <unit> at <tmp> line 1␤␤»

[17:01] <ilmari> m: "16:58 <+buggable> ".chars

[17:01] <camelia> rakudo-moar 825a8b0d0: ( no output )

[17:01] <ilmari> m: "16:58 <+buggable> ".chars.say

[17:01] <camelia> rakudo-moar 825a8b0d0: OUTPUT: «18␤»

[17:02] <ilmari> okay, if you have second-precision timestamps that does add up

[17:02] <|Tux|> ----+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9----+----0----+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8----+----9

[17:02] <|Tux|> I see that my text area is ± 136 characters wide

[17:02] <sjn> nah, I actually have 18 chars, like you :)

[17:04] <|Tux|> m: "16-11 17:14| synopsebot|".chars.say

[17:04] <camelia> rakudo-moar 825a8b0d0: OUTPUT: «24␤»

[17:04] <|Tux|> I win

[17:05] <sjn> see there, I knew 25 was a reasonable expectation :)

[17:07] * |Tux| => *$HOME

[17:47] <japhb> .oO( $person ==> &commute ==> $person.home )

[17:49] * [Coke] uses vi & 80x25, as required by the Michigan Terminal System

[19:32] <Geth> ¦ nqp: c918b9d8e0 | pmurias++ | 2 files

[19:32] <Geth> ¦ nqp: [js] Implement some negated uniprops

[19:32] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c918b9d8e0

[19:32] <Geth> ¦ nqp: 8292e8b721 | pmurias++ | t/nqp/031-grammar.t

[19:32] <Geth> ¦ nqp: Test a uniprop in a regex

[19:32] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/8292e8b721
