[00:01] <Geth> ¦ roast: 693f5d56fb | (Zoffix Znet)++ | S02-types/pair.t

[00:01] <Geth> ¦ roast: Remove faulty Pair.invert tests

[00:01] <Geth> ¦ roast:

[00:01] <Geth> ¦ roast: The tests index return value with `[0]` failing to check what type

[00:01] <Geth> ¦ roast: the return value is. Due to this, they failed to detect a bug where

[00:01] <Geth> ¦ roast: .invert was returning a Pair instead of a Seq in some cases.

[00:01] <Geth> ¦ roast:

[00:01] <Geth> ¦ roast: That bug is now fixed[^1] and I'm removing these tests entirely,

[00:01] <Geth> ¦ roast: <…commit message has 5 more lines…>

[00:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/693f5d56fb

[00:01] <Zoffix> "... because I added better tests in previous commit so these tests are covered and not needed"

[00:11] <AlexDaniel> Zoffix: hello

[00:11] <AlexDaniel> what do you think about this

[00:11] <AlexDaniel> greppable6: password

[00:11] <greppable6> AlexDaniel, https://gist.github.com/b7445dc99dc22301ed4ab382511011ab

[00:11] <AlexDaniel> greppable6: 4\d

[00:12] <greppable6> AlexDaniel, https://gist.github.com/9f0eb52f8abd8ecea57b504ff393d9d4

[00:13] <Zoffix> AlexDaniel: what do I need to think?

[00:13] <Zoffix> Oh

[00:13] <AlexDaniel> Zoffix: I don't know… you asked for a bot, is this what you wanted?

[00:13] <Zoffix> AlexDaniel: you threw me off with the 'password' thing :)

[00:13] <AlexDaniel> is there anything I can do for you?

[00:14] <Zoffix> Got me paranoid a bit :D

[00:14] <Zoffix> AlexDaniel: awesome! AlexDaniel++

[00:14] <Zoffix> I thought it was the channel log grepper and you grepping for password :D

[00:14] <Zoffix> greppable6: '(<)'

[00:14] <greppable6> Zoffix, https://gist.github.com/5c35f676589371ba6c6ec51429178d45

[00:14] <AlexDaniel> it takes a --perl-regexp, so should be flexible enough

[00:15] <AlexDaniel> yeah… yeah…

[00:15] <AlexDaniel> greppable6: \(\<\)

[00:15] <greppable6> AlexDaniel, https://gist.github.com/8eb24ab626611bcfbd2b85ac578010a8

[00:15] <Zoffix> Very cool. AlexDaniel++ thanks!

[00:16] <AlexDaniel> Zoffix: maybe eventually I can add a perl 6 mode that will take forever but will take proper regexes…

[00:16] <AlexDaniel> just like quotable6 does

[00:21] <Zoffix> greppable6: hack|kludge|bad\s+idea

[00:21] <greppable6> Zoffix, https://gist.github.com/e5f24e6d394a8a7921c61171b4deee82

[00:21] <AlexDaniel> Zoffix: pffffff XD

[00:22] <Zoffix> :D

[00:22] <Zoffix> greppable6: \$\!PIO

[00:22] <greppable6> Zoffix,

[00:23] <Zoffix> That means nothing found?

[00:23] <Zoffix> greppable6: \bPIO\b

[00:23] <greppable6> Zoffix, https://gist.github.com/7f35d3025e5b4cea92f9adc5a3648a47

[00:23] <Zoffix> cool. Very useful

[00:27] <AlexDaniel> Zoffix: this means I'm an idiot, but yes, you kinda guessed it

[00:29] <Zoffix> :)

[00:43] <AlexDaniel> grep: No username and password are sent to the server

[00:43] <greppable6> AlexDaniel, Juerd/p6-mqtt/lib/MQTT/Client.pm:250:No username and password are sent to the server.

[00:43] <AlexDaniel> not sure if this is by design… :)

[00:44] <Zoffix> grep: Zoffix

[00:44] <greppable6> Zoffix, https://gist.github.com/f35e6ee6f6a42fcde2bab94567791e68

[00:46] <Zoffix> .oO( what if the gist was a Markdown document, with the lines linking to actual repos )

[00:48] <AlexDaniel> that would be perfect, except that last time I checked there was no proper way to escape things in markdown

[00:48] <Zoffix> Ah

[00:49] <ugexe> do any of the formats? README.pod gets rendered, for instance

[00:51] <AlexDaniel> at least, I don't really know how to do that with markdown: https://gist.github.com/AlexDaniel/1c055fe340d442f5707df9bd8cd28097

[00:51] <AlexDaniel> maybe there is a way

[00:51] <AlexDaniel> but yes, we can try .pod or something else

[00:52] <AlexDaniel> this would also work for quotable

[00:54] <AlexDaniel> alright, I have to get some sleep

[00:54] <AlexDaniel> good *, #perl6*!

[00:55] <Zoffix> \o

[00:55] * Zoffix does so as well

[00:56] <ugexe> maybe we should put the cpan index on p6c as well. https://github.com/ugexe/Perl6-App--ecogen

[05:11] <Geth> ¦ rakudo/nom: 833c12ef02 | usev6++ | src/core/IO/Socket/INET.pm

[05:11] <Geth> ¦ rakudo/nom: Use nqp::getport with MoarVM backend only

[05:11] <Geth> ¦ rakudo/nom:

[05:11] <Geth> ¦ rakudo/nom: That op is only implemented in MoarVM at the moment.

[05:11] <Geth> ¦ rakudo/nom: Unbreaks the JVM build.

[05:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/833c12ef02

[05:24] <Geth> ¦ nqp: dd09bbc15d | (Samantha McVey)++ | Configure.pl

[05:24] <Geth> ¦ nqp: Error out when trying to build with the js backend without moar

[05:24] <Geth> ¦ nqp:

[05:24] <Geth> ¦ nqp: It does not appear to be possible to build with

[05:24] <Geth> ¦ nqp: Configure.pl --backend=js

[05:24] <Geth> ¦ nqp: So stop and display a useful error message instead of erroring out

[05:24] <Geth> ¦ nqp: with weird error messages later on.

[05:24] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/dd09bbc15d

[06:23] <[Tux]> This is Rakudo version 2017.05-63-g833c12ef0 built on MoarVM version 2017.05-24-gd86a35b6

[06:23] <[Tux]> csv-ip5xs        2.590

[06:23] <[Tux]> test            12.834

[06:23] <[Tux]> test-t           4.315 - 4.357

[06:23] <[Tux]> csv-parser      13.668

[07:20] <nine> ~

[07:20] <yoleaux> 23 May 2017 18:34Z <Zoffix> nine: seems camelia's JVM rakudo is stuck again. Uses Jan 3rd commit

[07:20] <nine> WTH? fatal: unable to access 'https://github.com/rakudo/rakudo.git/': Failed to connect to github.com port 443: Connection timed out

[07:24] <nine> Seems like all networking is broken in camelia's VM

[07:25] <nine> Except of course that it's still in the IRC channel?

[07:33] * nine is using this opportunity to install some security updates

[07:45] <nine> Ok, the reboot seems to have fixed network connectivity in camelia's VM

[07:59] <lizmat> Files=1195, Tests=58920, 203 wallclock secs (12.62 usr  4.85 sys + 1221.23 cusr 115.67 csys = 1354.37 CPU)

[08:20] <nine> j: say $*PERL.compiler.version

[08:20] <camelia> rakudo-jvm 833c12: OUTPUT: «v2017.05.63.g.833.c.12.ef.0␤»

[08:25] <lizmat> whee!

[08:25] <lizmat> m: say $*PERL.compiler.version

[08:25] <camelia> rakudo-moar 833c12: OUTPUT: «v2017.05.63.g.833.c.12.ef.0␤»

[08:37] <Geth> ¦ roast: 7216d6890e | (Elizabeth Mattijsen)++ | S03-operators/elem.t

[08:37] <Geth> ¦ roast: Also test negative of is not elem / does not contain

[08:37] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7216d6890e

[08:43] <jnthn> mornin,g

[08:43] <jnthn> heh, good start :P

[08:57] <nwc10> are we in the happy post-release place?

[09:02] <lizmat> nwc10: hmmm... not sure

[09:04] <nine> Hey, we haven't done any point releases yet ;)

[09:05] <jnthn> After last month's release, that is reason for happiness :)

[09:06] <nwc10> so, I was wondering when the Rakduo test harness default will switch from Five to Six

[09:07] <lizmat> there's still one bug in there: it doesn't show total number of tests while running ?

[09:08] <nwc10> er yes, good point

[09:08] <nwc10> I had noticed that a few days ago and then forgot it again

[09:08] <nwc10> lots of other things sloshing around in my head, such as "what colour should a house be?"

[09:09] <lizmat> white  # better to keep global warming out

[09:09] <jnthn> Chatreuse!

[09:20] <nine> jnthn certainly got more style ;) but I'm with lizmat on practicality

[09:23] <nwc10> you will be pleased to know that the current plan is "roughly white" and if there is a second colour, I decided on the paler version (because the colour chart does explicitly mention the solar reflectance of each)

[09:24] <lizmat> j: say VM.osname

[09:24] <camelia> rakudo-jvm 833c12: OUTPUT: «Linux␤»

[09:24] <lizmat> m: say VM.osname

[09:24] <camelia> rakudo-moar 833c12: OUTPUT: «linux␤»

[09:24] * lizmat is adding an lc to make sure they match

[09:25] <Geth> ¦ rakudo/nom: 122aca1c5d | (Elizabeth Mattijsen)++ | src/core/VM.pm

[09:25] <Geth> ¦ rakudo/nom: Make sure VM.osname always returns lowercase string

[09:25] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/122aca1c5d

[09:39] <Geth> ¦ rakudo/nom: 5b25836f21 | (Elizabeth Mattijsen)++ | src/core/List.pm

[09:39] <Geth> ¦ rakudo/nom: Don't assume the key of a Pair is a Str

[09:39] <Geth> ¦ rakudo/nom:

[09:39] <Geth> ¦ rakudo/nom: Spotted by nadim++ at:

[09:39] <Geth> ¦ rakudo/nom:   https://irclog.perlgeek.de/perl6/2017-05-24#i_14628878

[09:39] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5b25836f21

[09:48] <Zoffix> that's wrong tho

[09:49] <Zoffix> Ah, they all end up as named args

[09:49] <Zoffix> Guess https://rt.perl.org/Ticket/Display.html?id=131351 can be closed then

[09:51] <jnthn> The alternative woulda been to make non-Str key Pairs just go through as positionals

[09:51] <Zoffix> meh

[09:51] <Zoffix> too surprising

[09:52] <jnthn> Could argue the same about calling .Str :)

[09:52] <Zoffix> Why do they end up as named tho?

[09:53] <jnthn> 'cus otherwise you'd break stuff like

[09:54] <jnthn> m: sub foo() { 1, b => 2 }; my ($a, :$b) := foo(); say $a; say $b;

[09:54] <camelia> rakudo-moar 5b2583: OUTPUT: «1␤2␤»

[09:55] <Zoffix> ok

[09:56] <Zoffix> I would've thought you'd my ($a, :$b) := |foo() that

[09:56] <Zoffix> 'cause right now it's unsafe to unpack a list if you don't know what's in it. You migth lose your data

[09:56] <jnthn> That'd make a Slip

[09:56] <jnthn> And then you'd only move the problem

[09:56] <jnthn> Even if it made sense

[09:57] <Zoffix> m: class { method x ( (*@a) ) { dd @a } }.x: [1, :42a, 'c' ],

[09:57] <camelia> rakudo-moar 5b2583: OUTPUT: «Unexpected named argument 'a' passed in sub-signature␤  in method x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[09:57] <Zoffix> OK

[10:01] <Zoffix> m: dd (4242342 => 42,).Capture

[10:01] <camelia> rakudo-moar 5b2583: OUTPUT: «\("4242342" => 42)␤»

[10:05] <lizmat> yeah that also seems wrong  :-(

[10:06] <Geth> ¦ rakudo/nom: 03486fd1a6 | (Elizabeth Mattijsen)++ | src/core/List.pm

[10:06] <Geth> ¦ rakudo/nom: Revert "Don't assume the key of a Pair is a Str"

[10:06] <Geth> ¦ rakudo/nom:

[10:06] <Geth> ¦ rakudo/nom: This reverts commit 5b25836f21b2a84d4271a7a66c67b67f9ac79a82.

[10:06] <Geth> ¦ rakudo/nom:

[10:06] <Geth> ¦ rakudo/nom: The fix is wrong, it should probably become an object hash.

[10:06] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/03486fd1a6

[10:07] <jnthn> ...object hash?

[10:07] <Zoffix> m: -> *%_ { dd  %_ }( |(4242342 => 42)  )

[10:07] <camelia> rakudo-moar 5b2583: OUTPUT: «{"4242342" => 42}␤»

[10:07] <jnthn> We're trying to coerce to a Capture

[10:07] <Zoffix> it does get stringified here too

[10:07] <Zoffix> jnthn: how come it gets stringfiied though?

[10:08] <Zoffix> It's not a valid name for a named arg anyway

[10:08] <jnthn> Named args can be called anything

[10:08] <jnthn> The restrictions on which you can conveniently write are only syntactic

[10:09] <Zoffix> I see

[10:09] <jnthn> Hurrah, finally I have a working make test again...

[10:10] <jnthn> I knew doing this refactor for file handles would turn out much trickier than for sockets...

[10:10] <Zoffix> \o/

[10:10] <jnthn> (And this isn't even the big step, it's just preparation for it.)

[10:11] <jnthn> Aww,  some spectest failures

[10:12] <jnthn> not ok 19 - unopened handle has utf8 encoding

[10:12] <jnthn> tsssk

[10:13] <jnthn> If it's unopened we dunno if it's even gonna be binary mode yet

[10:13] <Zoffix> jnthn: that sounds like one of the new tests I added a week ago that test default values of attributes (in this case .encoding)

[10:13] <jnthn> Ah

[10:13] <Zoffix> So they're not part of 6.c-errata

[10:14] <jnthn> Locally I've got has Str $.encoding; - that is, it's now allowed to be undefined

[10:14] <jnthn> with open PATH, :w, :bin, :enc<e>, :!chomp, :nl-in[<a b>], :nl-out<meow>

[10:15] <jnthn> This test now explodes

[10:15] <jnthn> "Cannot open a handle in binary mode (:bin) and also specify an encoding"

[10:15] <jnthn> in t/S32-io/open.t

[10:16] <Zoffix> That also looks like something I wrote

[10:17] <jnthn> :)

[10:17] <jnthn> My new working model on this is that encoding undefined if the handle is opened in binary mode

[10:17] <Zoffix> m: use Test;  is-deeply (Mu => Any,).Capture, \('Mu' => Any)

[10:17] <camelia> rakudo-moar 03486f: OUTPUT: «not ok 1 - ␤␤# Failed test at <tmp> line 1␤# expected: \(:Mu(Any))␤#      got: \(:Mu(Any))␤»

[10:18] <Zoffix> Looks the same to me? :/

[10:18] <Zoffix> m: use Test;  is-deeply (Mu => Any,).Capture, \(:Mu(Any))

[10:18] <camelia> rakudo-moar 03486f: OUTPUT: «ok 1 - ␤»

[10:18] <Zoffix> I see

[10:19] <jnthn> Looks like a .perl bug

[10:19] <jnthn> But yeah, the issue boils down to the named vs. positional parameter distinction being syntactic usually

[10:19] <jnthn> But when we're doing .Capture we don't have any syntax to go on

[10:24] <Geth> ¦ rakudo/nom: 84e9794c9b | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[10:24] <Geth> ¦ rakudo/nom: Express (cont) purely as (elem) internally

[10:24] <Geth> ¦ rakudo/nom:

[10:24] <Geth> ¦ rakudo/nom: So we don't need to do optimizations more than once.

[10:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/84e9794c9b

[10:27] <Geth> ¦ rakudo/nom: 352b252b77 | (Zoffix Znet)++ | src/core/List.pm

[10:27] <Geth> ¦ rakudo/nom: Revert "Revert "Don't assume the key of a Pair is a Str""

[10:27] <Geth> ¦ rakudo/nom:

[10:27] <Geth> ¦ rakudo/nom: This reverts commit 03486fd1a67dc1ee8c1d49d8d9cae5a1353e3248.

[10:27] <Geth> ¦ rakudo/nom:

[10:27] <Geth> ¦ rakudo/nom: Stringification is valid, per:

[10:27] <Geth> ¦ rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2017-05-24#i_14629113

[10:27] <Geth> ¦ rakudo/nom:

[10:27] <Geth> ¦ rakudo/nom: Fixes RT#131351: https://rt.perl.org/Ticket/Display.html?id=131351

[10:27] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131351

[10:27] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/352b252b77

[10:27] <Geth> ¦ roast: ae935c92eb | (Zoffix Znet)++ | S02-types/capture.t

[10:27] <Geth> ¦ roast: Test List.Capture stringifies Pairs' keys

[10:27] <Geth> ¦ roast:

[10:27] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/5b25836f21

[10:27] <Geth> ¦ roast: RT#131351: https://rt.perl.org/Ticket/Display.html?id=131351

[10:27] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131351

[10:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ae935c92eb

[10:34] <Geth> ¦ rakudo/nom: e65800a84b | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[10:34] <Geth> ¦ rakudo/nom: Make Any (elem) Iterable:D between 1.3x and 110x faster

[10:34] <Geth> ¦ rakudo/nom:

[10:34] <Geth> ¦ rakudo/nom: - based on a 1000 elem array

[10:34] <Geth> ¦ rakudo/nom: - 1.3x faster if matched on last array element or no match

[10:34] <Geth> ¦ rakudo/nom: - 110x faster if matched on first array element

[10:34] <Geth> ¦ rakudo/nom: - gain caused by not needing to coerce to Set, but check on the fly

[10:34] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e65800a84b

[10:36] <Zoffix> Sweet. lizmat++

[10:36] <Zoffix> I like to use Any (elem) Iterable

[10:43] <Geth> ¦ rakudo/refactor-handle-encoding: 338d51a8d0 | (Jonathan Worthington)++ | 5 files

[10:43] <Geth> ¦ rakudo/refactor-handle-encoding: Start to refactor IO::Handle encoding/bin mode.

[10:43] <Geth> ¦ rakudo/refactor-handle-encoding:

[10:43] <Geth> ¦ rakudo/refactor-handle-encoding: This introduces a $!decoder attribute to IO::Handle. The presence of

[10:43] <Geth> ¦ rakudo/refactor-handle-encoding: this is now used internally to determine if the handle is in binary

[10:43] <Geth> ¦ rakudo/refactor-handle-encoding: mode. The $.encoding attribute is now a `Str` rather than a `str`,

[10:43] <Geth> ¦ rakudo/refactor-handle-encoding: and will be the Str type object in the case where the file is in

[10:43] <Geth> ¦ rakudo/refactor-handle-encoding: binary mode.

[10:43] <Geth> ¦ rakudo/refactor-handle-encoding: <…commit message has 17 more lines…>

[10:43] <Geth> ¦ rakudo/refactor-handle-encoding: review: https://github.com/rakudo/rakudo/commit/338d51a8d0

[10:43] <jnthn> Zoffix: Since you're doing IO stuff, you might like to look over that a bit :)

[10:48] <Zoffix> jnthn: would this need updating as well? https://github.com/rakudo/rakudo/blob/338d51a8d0133123d3d3d2ba504bb2526b30ad14/src/core/IO/Handle.pm#L612-L624

[10:49] <jnthn> Very much so, but still deciding on exactly now

[10:49] <jnthn> *how

[10:49] <Zoffix> k

[10:49] <Zoffix> looks good to me :)

[10:49] <jnthn> Like, should you be able to do .encoding(Nil) to turn the file into a binary mode one

[10:59] <lizmat> hmmm.. what is the best way to test if something returns actual True or False?

[10:59] <lizmat> m: use Test; ok 1,"doesn't cut it"

[10:59] <camelia> rakudo-moar e65800: OUTPUT: «ok 1 - doesn't cut it␤»

[10:59] <lizmat> m: use Test; is 1, True

[10:59] <camelia> rakudo-moar e65800: OUTPUT: «not ok 1 - ␤␤# Failed test at <tmp> line 1␤# expected: 'True'␤#      got: '1'␤»

[10:59] <lizmat> m: use Test; is 0, False

[10:59] <camelia> rakudo-moar e65800: OUTPUT: «not ok 1 - ␤␤# Failed test at <tmp> line 1␤# expected: 'False'␤#      got: '0'␤»

[10:59] <jnthn> is-deeply

[10:59] <lizmat> m: use Test; is False, False

[10:59] <camelia> rakudo-moar e65800: OUTPUT: «ok 1 - ␤»

[10:59] <jnthn> m: use Test; is-deeply 1, True

[10:59] <camelia> rakudo-moar e65800: OUTPUT: «not ok 1 - ␤␤# Failed test at <tmp> line 1␤# expected: Bool::True␤#      got: 1␤»

[11:00] <lizmat> m: use Test; is True, True

[11:00] <camelia> rakudo-moar e65800: OUTPUT: «ok 1 - ␤»

[11:00] <lizmat> m: use Test; is False, "False"

[11:00] <camelia> rakudo-moar e65800: OUTPUT: «ok 1 - ␤»

[11:00] <lizmat> ok, is-deeply it is  :-)

[11:00] <lizmat> m: use Test; is-deeply False, "False"

[11:00] <camelia> rakudo-moar e65800: OUTPUT: «not ok 1 - ␤␤# Failed test at <tmp> line 1␤# expected: "False"␤#      got: Bool::False␤»

[11:01] <lizmat> m: use Test; is-deeply False, False

[11:01] <camelia> rakudo-moar e65800: OUTPUT: «ok 1 - ␤»

[11:03] <Geth> ¦ rakudo/refactor-handle-encoding: 4c8b395edc | (Jonathan Worthington)++ | src/core/IO/Handle.pm

[11:03] <Geth> ¦ rakudo/refactor-handle-encoding: Re-work slurp[-rest] to use the streaming decoder.

[11:03] <Geth> ¦ rakudo/refactor-handle-encoding:

[11:03] <Geth> ¦ rakudo/refactor-handle-encoding: Introduces a temporary regression in one test file until .encoding is

[11:03] <Geth> ¦ rakudo/refactor-handle-encoding: sorted out.

[11:03] <Geth> ¦ rakudo/refactor-handle-encoding: review: https://github.com/rakudo/rakudo/commit/4c8b395edc

[11:04] <jnthn> lunch; bbl

[11:10] <Geth> ¦ rakudo/nom: b43303f254 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[11:10] <Geth> ¦ rakudo/nom: Make Str:D (elem) Map:D 1.3x faster

[11:10] <Geth> ¦ rakudo/nom:

[11:10] <Geth> ¦ rakudo/nom: By using nqp::p6bool() rather than badly jitting .Bool

[11:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b43303f254

[11:49] <lizmat> bisect: my %h{Any} = ^10 Z=> ^10; say 4 (elem) %h

[11:49] <bisectable6> lizmat, Bisecting by output (old=2015.12 new=b43303f) because on both starting points the exit code is 0

[11:49] <bisectable6> lizmat, bisect log: https://gist.github.com/9723bd6dd364979425445be485513dd2

[11:49] <bisectable6> lizmat, (2017-05-24) https://github.com/rakudo/rakudo/commit/e65800a84bba1a5c3b5bf1cf80fa0797a601e351

[11:50] <lizmat> *phew*

[12:06] <AlexDaniel> lizmat: phew? :)

[12:06] <lizmat> that I broke it just now

[12:06] <AlexDaniel> ah, well

[12:07] <AlexDaniel> I'll work on regressionable soon, hopefully it will help to catch that kind of stuff fast enough :)

[12:07] <lizmat> afk for a bit&

[12:07] <AlexDaniel> markdown is insane :(

[12:23] <mst> it's a bit limited in places, hence ingy's swim, but it's such a nice format to write

[12:45] <Zoffix> hm, OpenSSL fails to install on doc build. Wonder if that's the fallout of the sock refactor: https://travis-ci.org/perl6/doc/jobs/235583729

[12:49] <Zoffix> AlexDaniel: bisectable seems sick

[12:49] * AlexDaniel slaps bisectable6

[12:50] <Zoffix> AlexDaniel: look in #zofbot. It doesn't want to finish up. And same happened yesterday in #perl6-dev

[12:50] <AlexDaniel> let's see…

[12:50] <Zoffix> Happened here: https://irclog.perlgeek.de/perl6-dev/2017-05-23#i_14625722

[12:53] <AlexDaniel> Zoffix: ah-ha, corrupted archive… this happens too

[12:53] <AlexDaniel> anyway, should be fixed now

[12:54] <AlexDaniel> (at least, for now)

[12:54] <Zoffix> AlexDaniel++ thanks

[12:56] <Geth> ¦ rakudo/nom: af895626cd | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[12:56] <Geth> ¦ rakudo/nom: Make sure we handle Any (elem) Map:D correctly

[12:56] <Geth> ¦ rakudo/nom:

[12:56] <Geth> ¦ rakudo/nom: This can only work if the Map:D is actually an object hash, since

[12:56] <Geth> ¦ rakudo/nom: it can only work on normal hashes if the Any is a Str:D, and that

[12:56] <Geth> ¦ rakudo/nom: case is already handled in a separate candidate.

[12:56] <Geth> ¦ rakudo/nom:

[12:56] <Geth> ¦ rakudo/nom: Fixes a regression caused by e65800a84bba1a5c3

[12:56] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/af895626cd

[13:05] <pmurias> what's DESTDIR in the nqp Makefile supposed to be?

[13:07] <pmurias> ah, I found it

[13:07] <pmurias> s/found/googled/

[13:08] <pmurias> Should the perl6-js and nqp-js runners use a node from path or resolve one at Configure time?

[13:23] <Geth> ¦ roast: dd7f7949dc | (Elizabeth Mattijsen)++ | S03-operators/elem.t

[13:23] <Geth> ¦ roast: Tighten up tests for (elem) and friends

[13:23] <Geth> ¦ roast:

[13:23] <Geth> ¦ roast: - use more picky is-deeply instead of ok/nok

[13:23] <Geth> ¦ roast: - add tests for non-Str for hashes, and Str for object hashes

[13:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dd7f7949dc

[13:42] <Geth> ¦ roast: fd5c5321c7 | (Elizabeth Mattijsen)++ | S03-operators/elem.t

[13:42] <Geth> ¦ roast: Oops, fix copy-pasto

[13:42] <Geth> ¦ roast:

[13:42] <Geth> ¦ roast: Unfortunately, the test was passing for the wrong reason :-(

[13:42] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/fd5c5321c7

[13:54] <Geth> ¦ roast: 89bb970ed0 | (Elizabeth Mattijsen)++ | S03-operators/subset.t

[13:54] <Geth> ¦ roast: Initial thorough testing of (<=) and friends

[13:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/89bb970ed0

[13:55] <Geth> ¦ rakudo/nom: 020c8cd56c | (Elizabeth Mattijsen)++ | t/spectest.data

[13:55] <Geth> ¦ rakudo/nom: Add testing of (<=) and friends

[13:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/020c8cd56c

[13:59] <pmurias> do we have a way to copy a whole directory while installing stuff from a Makefile? $(CP) seems to only copy files

[13:59] <pmurias> ?

[14:07] <cono> perl6 has 256 members and gives push access to 48 perl6 repositories.

[14:07] <cono> byte of members!

[14:07] <cono> lets celebrate

[14:08] <Zoffix> :)

[14:11] * Zoffix reads https://szabgab.com/the-phases-of-a-crowdfunding-campaign-launching.html

[14:11] <Zoffix> So sounds like Bailador will be the cornerstone of that book.

[14:12] * Zoffix feels uneasy about it

[14:12] <[Coke]> If you're writing about the ecosystem as it stands today, what else would you use?

[14:13] <Zoffix> Dunno, I see a whole bunch of projects on http://modules.perl6.org/#q=web

[14:14] <Zoffix> I glances through Bailador's commit log and it doesn't appear to be actively developed and probably still doesn't allow concurrency, making it entirely useless for production apps

[14:14] <Zoffix> s/ces/ced/

[14:15] <Zoffix> And if Gabor's plan is to both bring Baildor up to speed and write a book, the December deadline seems awfully optimistic

[14:19] <nine> Zoffix: see http://niner.name/talks/Web%20development%20and%20Perl%206/Web%20development%20and%20Perl%206.pdf for the state of our web ecosystem as of 2016-12

[14:21] <Zoffix> nine: stuck in resolving stage...

[14:21] <Zoffix> nevermind, wget fetched it

[14:21] <Zoffix> 82 pages!

[14:21] <nine> Half of it is slides without comments to be repeated by slides with comments.

[14:21] <nine> "comments" being the full transscript of my talk

[14:22] <nine> Still haven't figured out how to only export with the notes

[14:22] <Zoffix> tl;dr. Quickly paging through that slide show shows me a buch Bailador/Crust code and then it just switches to Mojolicious/Catalyst

[14:23] <Zoffix> Suggesting my suspicions on it being too early to write a Perl 6 Web book founded on some specific Perl 6 project.

[14:26] <lizmat> afk for a few hours

[14:55] <jnthn> Ahhh...finally back to work :)

[14:56] <Zoffix> jnthn: not sure if you've seen or interested in my comment: Zoffix │ hm, OpenSSL fails to install on doc build. Wonder if that's the fallout of the sock refactor: https://travis-ci.org/perl6/doc/jobs/235583729

[14:56] <AlexDaniel> Zoffix:

[14:56] <AlexDaniel> oops

[14:56] <AlexDaniel> hey

[14:57] <AlexDaniel> greppable6: pa..word

[14:57] <jnthn> Zoffix: Will have a look

[14:57] <jnthn> Wonder if it's being a little too cosy with internals

[14:57] <AlexDaniel> xD

[15:00] <Zoffix> damn, people should stop listening to me. My tweeted travis setup got into the updated travis docs: https://github.com/travis-ci/docs-travis-ci-com/pull/1190#issuecomment-303750710

[15:00] <Zoffix> And since I never read the travis docs, of course my travis setup is off a bit :}|\

[15:03] <jnthn> Zoffix: gah, it's 'cus passing Inf to recv is apparently OK

[15:03] <Zoffix> ah heh

[15:03] <jnthn> But we had no spectests to confirm that

[15:03] <jnthn> At least that's an easy fix :)

[15:03] <Zoffix> :)

[15:05] <jnthn> m: sub f(Int(Cool) $n) { say $n.WHAT }; f(42); f(Inf)

[15:05] <camelia> rakudo-moar 020c8c: OUTPUT: «(Int)␤(Failure)␤»

[15:05] <jnthn> Ah, that's where the Failure comes from

[15:08] <Zoffix> m: sub f(Int(Cool) $n) { say $n.WHAT }; f(42); f '-'.IO; f NaN; f 0/0; f 1/0; f -1/0

[15:08] <camelia> rakudo-moar 020c8c: OUTPUT: «(Int)␤(Failure)␤(Failure)␤(Failure)␤(Failure)␤Attempt to divide -1 by zero using div␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:08] <Zoffix> heh

[15:08] <Zoffix> m: sub f(Int(Cool) $n) { say $n.WHAT }; f(42); f '-'.IO; f NaN; f 0/0; f 1/0; f <-1/0>

[15:08] <camelia> rakudo-moar 020c8c: OUTPUT: «(Int)␤(Failure)␤(Failure)␤(Failure)␤(Failure)␤Attempt to divide -1 by zero using div␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in sub f at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:09] <Zoffix> m: say WHAT (-1/0).Int

[15:09] <camelia> rakudo-moar 020c8c: OUTPUT: «Attempt to divide -1 by zero using div␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[15:09] <Zoffix> m: say WHAT (1/0).Int

[15:09] <camelia> rakudo-moar 020c8c: OUTPUT: «(Failure)␤»

[15:09] <Zoffix> weird

[15:10] <Zoffix> s: (-1/0), 'Int', \()

[15:10] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/020c8cd/src/core/Rational.pm#L70

[15:10] <Zoffix> s: (1/0), 'Int', \()

[15:10] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/020c8cd/src/core/Rational.pm#L70

[15:12] <Zoffix> Ah, I see you, bug!

[15:12] <Zoffix> Lunchtime. Perfect timing.

[15:12] * Zoffix readies the bread

[15:13] <jnthn> d'oh, I needed an updated moar/nqp

[15:14] <jnthn> Anyway, got a patch that hopefully addresses the openssl thing

[15:18] <ugexe> i think passing Inf to recv was only ok on moar

[15:18] <jnthn> It'll be OK on everything now :)

[15:27] <Geth> ¦ rakudo/nom: 17c052e818 | (Jonathan Worthington)++ | src/core/IO/Socket.pm

[15:27] <Geth> ¦ rakudo/nom: Re-allow Inf as an argument to .recv.

[15:27] <Geth> ¦ rakudo/nom:

[15:27] <Geth> ¦ rakudo/nom: This got broken in recent refactoring, and the module ecosytem was

[15:27] <Geth> ¦ rakudo/nom: relying on it.

[15:27] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/17c052e818

[15:29] <Geth> ¦ roast: 30e17330ed | (Jonathan Worthington)++ | S32-io/socket-recv-vs-read.t

[15:29] <Geth> ¦ roast: Test to cover .recv(Inf) on socket.

[15:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/30e17330ed

[15:29] <jnthn> OpenSSL is again happy :)

[15:29] <jnthn> Zoffix++ for reporting

[15:31] <Zoffix> jnthn++ for fixing \o/

[15:41] <AlexDaniel> Zoffix: alright, take №2

[15:41] <AlexDaniel> greppable6: pa..word

[15:41] <greppable6> AlexDaniel, https://gist.github.com/462a7280c6d48f00b125dfa5ce1756b8

[15:42] <AlexDaniel> Zoffix: what do you think about this ↑ ?

[15:43] <Zoffix> AlexDaniel: I think it's awesome!

[15:43] <Zoffix> greppable6: .+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+

[15:43] * Zoffix giggles

[15:43] <AlexDaniel> let's see

[15:44] <AlexDaniel> it should time out

[15:44] <AlexDaniel> what was the default… 30s I think?

[15:44] <AlexDaniel> the problem is that it will manage to match all that stuff during these 30 seconds

[15:44] <AlexDaniel> maybe…

[15:45] <Zoffix> Shouldn't :)

[15:45] <AlexDaniel> No such method 'chars' for invocant of type 'Any'

[15:45] <AlexDaniel> right, so it did time out

[15:46] <Zoffix> m: ('a' x 1000) ~~ /.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+/; say now - INIT now

[15:46] <Zoffix> Yeah. it's backtrack hell :)

[15:46] <camelia> rakudo-moar 17c052: OUTPUT: «(timeout)»

[15:46] <AlexDaniel> okay, but still, it should work just fine

[15:46] <AlexDaniel> it's using the same code that all whateverables use, so let's see why it didn't work…

[15:47] <AlexDaniel> LINE fatal: pcre_exec failed with error code -8

[15:47] <AlexDaniel> refused to work with this :)

[15:48] <AlexDaniel> a, a-ha

[15:51] <timotimo> i've found a nice (?) way to crash rakudo

[15:51] <timotimo> m: my %foo = "a".."z" Z=> 1..*; for ^100 { for %foo.values { .say; %foo{("a".."z").pick}:delete } }

[15:51] <camelia> rakudo-moar 17c052: OUTPUT: «(signal SEGV)24␤16␤11␤8␤7␤26␤1␤25␤19␤17␤4␤13␤6␤3␤21␤2␤10␤18␤12␤24␤11␤7␤1␤»

[15:52] <AlexDaniel> awesome

[15:52] <timotimo> sometimes the explosion is in trying to hllize a value that has a nulled out STable

[15:52] <AlexDaniel> mc: my %foo = "a".."z" Z=> 1..*; for ^100 { for %foo.values { .say; %foo{("a".."z").pick}:delete } }

[15:52] <committable6> AlexDaniel, https://gist.github.com/3ed3aab7dafbf72fb08cbea1714c62ac

[15:52] <AlexDaniel> that seems wrong also? ↑

[15:53] <timotimo> depends on what you expect

[15:53] <timotimo> i wanted to point out the lazyness of .values for the mailing list

[15:53] <timotimo> and my example went crashy

[15:53] <timotimo> now it's dinner time

[15:54] <timotimo> it deletes most values until only 10 remains and then it keeps giving that until 10 also got deleted

[15:54] <timotimo> well, the letter for 10 really

[16:14] <cono> timotimo: Do I need anything else to add? +#define MVM_GC_DEBUG (MVM_GC_DEBUG_ORCHESTRATE | MVM_GC_DEBUG_COLLECT)

[16:14] <cono> still don't see anything

[16:21] <AlexDaniel> ppppppppppppppppppfffffffffffffftttttttt

[16:21] <AlexDaniel> was getting this:

[16:21] <AlexDaniel> Unhandled exception in code scheduled on thread 20

[16:21] <AlexDaniel> Malformed UTF-8

[16:21] <AlexDaniel> 

[16:21] <AlexDaniel> so I thought, well, maybe $proc.stdout(:enc<utf8-c8>) then?

[16:22] <AlexDaniel> … malloc(): memory corruption: 0x00007f62e0d9dcb0 ***

[16:22] <Zoffix> heh

[16:22] <Zoffix> s: Proc::Async, 'stdout'

[16:22] <SourceBaby> Zoffix, Something's wrong: ␤ERR: Unhandled exception: Missing or wrong version of dependency 'src/Perl6/Grammar.nqp' (from 'gen/moar/main.nqp')␤   at <unknown>:1  (/home/zoffix/services/sourceable/building-perl6/perl6.moarvm:<dependencies+deserialize>)␤

[16:22] <Zoffix> SourceBaby: your mom

[16:22] <AlexDaniel> SourceBaby: I got your back!

[16:22] <AlexDaniel> Zoffif: https://github.com/rakudo/rakudo/blob/nom/src/core/Proc/Async.pm#L82

[16:22] <AlexDaniel> … fail…

[16:22] <jnthn> nine: Hmm, iiuc precomp files contain some dependency information at the top, then the bytecode? Do we always slurp-rest that bytecode or is there some other path?

[16:23] <Zoffix> https://github.com/rakudo/rakudo/blob/nom/src/core/Proc/Async.pm#L82-L86

[16:24] <AlexDaniel> actually, this will always crash

[16:27] <jnthn> nine: Ah, I found the answer. Turns out that it's "no" and "ouch, this will be a bit of fun now we pull char I/O management into userspace", but I think there'll be a relatively good fix :)

[16:27] <Geth> ¦ rakudo/nom: e22508d41a | (Zoffix Znet)++ | src/core/Exception.pm

[16:27] <Geth> ¦ rakudo/nom: Add $.details to X::Numeric::DivideByZero

[16:27] <Geth> ¦ rakudo/nom:

[16:27] <Geth> ¦ rakudo/nom: We don't always end up dividing by zero in user's code, so the

[16:27] <Geth> ¦ rakudo/nom: "using..." bit isn't always appropriate.

[16:27] <Geth> ¦ rakudo/nom:

[16:27] <Geth> ¦ rakudo/nom: Add $.details attribute that will allow us to specify details on

[16:27] <Geth> ¦ rakudo/nom: why the divide by zero happened

[16:27] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e22508d41a

[16:27] <Geth> ¦ rakudo/nom: 6dbe85eda0 | (Zoffix Znet)++ | src/core/Rational.pm

[16:27] <Geth> ¦ rakudo/nom: Fix inconsistency in .Int on zero-denominator rats

[16:28] <Geth> ¦ rakudo/nom:

[16:28] <Geth> ¦ rakudo/nom: In 0/0 and 1/0 cases we `fail` but in `-1/0` case we ended up

[16:28] <Geth> ¦ rakudo/nom: throwing, because the path goes through .ceiling rather than

[16:28] <Geth> ¦ rakudo/nom: .floor.

[16:28] <Geth> ¦ rakudo/nom:

[16:28] <Geth> ¦ rakudo/nom: Fix by detecting zero-denominator rats right in the .Int

[16:28] <Geth> ¦ rakudo/nom: - Always `fail`

[16:28] <Geth> ¦ rakudo/nom: - Improve the Failure's exception by including details that

[16:28] <Geth> ¦ rakudo/nom:     the division by zero happened during Rational -> Int coersion.

[16:28] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6dbe85eda0

[16:28] <Geth> ¦ roast: 71dea12a5e | (Zoffix Znet)++ | S32-num/rat.t

[16:28] <Geth> ¦ roast: Test Rational.Int coercion on 0-denominator Rationals

[16:28] <Geth> ¦ roast:

[16:28] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/6dbe85eda0

[16:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/71dea12a5e

[16:30] <Zoffix> grrr

[16:30] <Zoffix> Had misspelt "coersing" in there.. FIXED IT.... Then reworded the message, making the error again -_-

[16:31] <Zoffix> ZofBot: X::CoercionAttemptFailed.new: :details<User is bad at grammer>

[16:31] <ZofBot> Zoffix, de/perl6/2017-03-24#i_14318239 - and surrounding lines did you ever wonder what a timeline where EBCDIC won over ASCII would look like? OK! http://www

[16:33] <jnthn> I never did wonder that, tbh... :P

[16:33] <Zoffix> :)

[16:33] * jnthn wanders home for dinner

[16:36] <AlexDaniel> greppable6: .+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+

[16:36] <greppable6> AlexDaniel, Sorry, can't do that

[16:36] <AlexDaniel> greppable6: .+.+.+.+.+.+.+.+.+.+.+.+

[16:36] <AlexDaniel> *facepalm*

[16:37] <timotimo> cono: that's not the one i meant

[16:37] <AlexDaniel> greppable6: .+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+

[16:37] <greppable6> AlexDaniel, Sorry, can't do that

[16:37] <timotimo> cono: you just set MVM_GC_DEBUG to 2, it's distinct from the (unfortunately similarly named) logging stuff you can also turn on

[16:38] <Zoffix> .ask jnthn is 65535 the maximum .recv could ever receive? Feels LTA to accept Inf but treat it the same 65535.  Maybe it should be made back to throw, and docs + OpenSSL fixed up?

[16:38] <yoleaux> Zoffix: I'll pass your message to jnthn.

[16:38] <timotimo> cono: if the code runs significantly slower, you'll know that it worked :)

[16:38] <AlexDaniel> Zoffix: anyway, this bot has a very sensitive soul, so use it with care…

[16:38] <AlexDaniel> … as sensitive as rakudo is…

[16:38] <Zoffix> ok :D

[16:38] * Zoffix doesn't believe in souls... but will try to use care :)

[16:39] <Geth> ¦ rakudo/nom: 33819390ea | (Zoffix Znet)++ | src/core/Rational.pm

[16:39] <Geth> ¦ rakudo/nom: Fix typo in error message

[16:39] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/33819390ea

[16:42] <cono> timotimo: I've tried MVM_GC_DEBUG 2, but haven't seen anything

[16:42] <cono> from code perspective looks like it just prints to STDOUT

[16:44] <timotimo> right, it could just be that it doesn't trigger because that's not where the problem happens (or it slips by unnoticed)

[16:46] <AlexDaniel> greppable6: shit

[16:46] <greppable6> AlexDaniel, https://gist.github.com/c890d1228394cffa8fd213552e4b296c

[16:46] <AlexDaniel> “this shit isn't implemented yet​” XD

[16:47] <AlexDaniel> Zoffix: by the way, because of my markdown magic it appears as if there were spaces around “shit”

[16:47] <AlexDaniel> not sure if that's a big problem…

[16:47] <AlexDaniel> but otherwise I wouldn't be able to make it bold

[16:48] <Zoffix> I think it's fine, since users can always click on the link

[16:48] <Zoffix> ZOFVM: Files=1246, Tests=136260, 113 wallclock secs (22.51 usr  3.20 sys + 2355.49 cusr 137.69 csys = 2518.89 CPU)

[16:48] <Geth> ¦ rakudo/nom: 9310127ee7 | (Zoffix Znet)++ | src/core/IO/Socket.pm

[16:48] <Geth> ¦ rakudo/nom: Remove useless code

[16:48] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9310127ee7

[16:55] <timotimo> stmuk_: do we want to keep Task::Galaxy? it currently won't install because it depends on Task::Star which tadzik threw out

[16:55] <timotimo> FWIW, i think it'd be a good idea to pull Task::Star back in and make its Build.pm emit a deprecation warning

[16:55] <Zoffix> m: my @arr = (1,Nil,2,Nil); say @arr.grep: * !=== Nil

[16:55] <camelia> rakudo-moar 338193: OUTPUT: «(1 (Any) 2 (Any))␤»

[16:55] <Zoffix> That looks like a b.... ahhh

[16:55] <Zoffix> The Nil is a lie :P

[16:56] <Zoffix> m: my @arr = (1,Nil,2,Nil); say @arr.grep: * !=== Any

[16:56] <camelia> rakudo-moar 338193: OUTPUT: «(1 2)␤»

[17:10] <cono> huh, found something new :) MoarVM panic: Internal error: invalid thread ID 1182 in GC work pass

[17:11] <geekosaur> wee, another gc error >.>

[17:12] <cono> hate intermittent issues :( in debugger im getting different results...

[17:18] <geekosaur> yep, that's another hallmark of gc-related issues

[17:18] <geekosaur> sadly you'll need jnthn to help figure it out, since it'll be a MoarVM issue with memory management

[17:20] <timotimo> i wouldn't call it a "gc error"

[17:20] <timotimo> it's a memory corruption issue

[17:20] <timotimo> something's writing over the boundary of an object and into the header of another

[17:30] <stmuk_> msg?

[17:31] <timotimo> stmuk_: i didn't yoleaux it

[18:00] <stmuk> timotimo: Task::Galaxy was mainly to test gitlab support in the ecosystem I'll remove Task::Star

[18:02] <Zoffix> .

[18:02] <yoleaux> 18:02Z <lizmat> Zoffix: I seem to recall that's what jnthn decided on

[18:02] <Zoffix> OK

[18:02] <lizmat> afk again&

[18:03] <perlpilot> m: my @a[2;3;4];  dd @a.shape

[18:03] <camelia> rakudo-moar 931012: OUTPUT: «(2, 3, 4)␤»

[18:04] <perlpilot> There's always that if you need the other dimensions

[18:08] <[Coke]> (task star message) yes plz.

[18:09] <stmuk> timotimo: I don't see a Task::Star dep in the META6.json

[18:14] <Zoffix> It does mention it in "description"

[18:15] <Zoffix> "panda", "ufo", "zef" :) hehe

[18:15] <stmuk> yeah I assume someone grep'd or ack'd

[18:15] <stmuk> I'm trying it now anyway

[18:16] <Zoffix> Hm, "JSON::RPC" I recall that was failing for ages

[18:22] <Geth> ¦ nqp/master: 7 commits pushed by pmurias++

[18:22] <Geth> ¦ nqp/master: 627cbdfa06 | [js] Cosmetic changes

[18:22] <Geth> ¦ nqp/master: 6ab8fff5f5 | [js] Keep the generated Makefile template in gen/js

[18:22] <Geth> ¦ nqp/master: cf0c22b8be | [js] Generate the runner in a similiar way as it's done on other backends

[18:22] <Geth> ¦ nqp/master: 692fae36df | [js] Make js-all build nqp-js-on-js

[18:22] <Geth> ¦ nqp/master: c6bd27ef9a | [js] Fix typo in dependency name.

[18:22] <Geth> ¦ nqp/master: 1f8deb68be | [js] 'make js-install' now installs nqp.js

[18:22] <Geth> ¦ nqp/master: 8a7870f578 | [js] make js-clean cleans up more things

[18:22] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/dd09bbc15d...8a7870f578

[18:23] <nine> jnthn: I'm curious about that fix :)

[18:23] <timotimo> stmuk: oh damn, i didn't actually look at the meta6.json, i read that someone claimed it and thought it was true

[18:27] <stmuk> hahah

[18:28] <stmuk> you been reading perl6-users! ;)

[18:29] <stmuk> actually I see a new Template::Mustache failure which didnt happen last month

[18:29] <Zoffix> :D

[18:32] <Zoffix> mustache passes for me on 2017.05-15-g81221c5

[18:32] <Zoffix> m: $*PERL.compiler.version.say

[18:32] <camelia> rakudo-moar 931012: OUTPUT: «v2017.05.77.g.9310127.ee␤»

[18:35] <stmuk> 2017.05-77-g9310127

[18:35] <stmuk> # Failed test 'Inline partial can get filesystem partial'

[18:36] * Zoffix updates to latest and greatest to try again

[18:39] <Zoffix> stmuk: is that on windows? I notice you opened an Issue for Windows a few months ago: https://github.com/softmoth/p6-Template-Mustache/issues/15

[18:40] <stmuk> no debian stable ... I don't use Windows much TBH

[18:42] <Geth> ¦ rakudo/nom: dd2de368e7 | (Elizabeth Mattijsen)++ | 3 files

[18:42] <Geth> ¦ rakudo/nom: Remove trailing whitespace that I let creep in

[18:42] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dd2de368e7

[18:46] <Zoffix> no luck... tests still pass on 2017.05-77-g9310127 This is on Debian GNU/Linux 8.6 (jessie)

[18:47] <stmuk> odd

[18:48] <Zoffix> ===> Extracting: Benchy

[18:48] <Zoffix> No extracting backend available

[18:48] <Zoffix> man, another one :|

[18:49] <stmuk> I'll try building in isolation

[18:50] <stmuk> I basically did zef install . in a Task::Galaxy checkout

[18:50] <stmuk> on jessie

[18:51] <lizmat> Zoffix: fwiw, fails for me the same way

[18:51] <Zoffix> lizmat: which one Benchy or Mustache?

[18:51] <lizmat> benchy

[18:51] <Zoffix> Thanks.

[18:51] <lizmat> $ zef upgrade zef   # noop  :-(

[18:55] <Zoffix> star: use JSON::Tiny; use LWP::Simple; LWP::Simple.get("http://ecosystem-api.p6c.org/projects.json").&from-json.grep({ (.<source-url> // .<support><source> // '').ends-with('.git' | '.tar.gz' | '.zip').not})».<name>.say

[18:55] <camelia> star-m 2016.10: OUTPUT: «(Text::Spintax Math::Constants IO::Dir Benchy)␤»

[18:55] <Zoffix> That's probably it.

[18:56] <Zoffix> yup. IO::Dir fails the same :)

[18:59] * Zoffix sends PRs to fix the other two

[19:03] <stmuk> I still get the Mustache issue

[19:06] <Zoffix> stmuk: can you pastebin detailed output? Like what's not making the test happy?

[19:07] <stmuk> sure

[19:11] <Zoffix> For me Task::Galaxy fails on BioInfo ===> Testing [FAIL]: BioInfo:ver('0.4.3'):auth('Matt Oates') No such method '!make' for invocant of type 'Perl6::Grammar+{BioInfo::Grammar}'

[19:11] <Zoffix> t/slang.t ...... Dubious, test returned 1

[19:11] <jnthn> .

[19:11] <yoleaux> 16:38Z <Zoffix> jnthn: is 65535 the maximum .recv could ever receive? Feels LTA to accept Inf but treat it the same 65535.  Maybe it should be made back to throw, and docs + OpenSSL fixed up?

[19:14] <Zoffix> tried again; even cloned the mustache spec files where it wanted them; nope; still all green

[19:15] <jnthn> Zoffix: recv is doc'd as receiving something like a single packet, and will only ever make one recv call at OS level; this distinguishes it from .read which will do a loop

[19:15] <jnthn> Granted with a TCP streaming socket we could maybe get more

[19:16] <Zoffix> hehe "Receive a package" :)

[19:17] <Zoffix> Well, I'll include 65535 in the docs

[19:18] <stmuk> Zoffix: https://gist.github.com/stmuk/4fdd37938876f11411123a52320442a5

[19:21] <Zoffix> stmuk: what happens if you nuke .zef too?

[19:21] <Zoffix> stmuk: or simpler: try with zef --/cache install Template::Mustache

[19:22] <Zoffix> This is my updation command: rm -fr ~/.zef; rm -fr ~/.perl6; rm -fr ~/.rakudobrew/; git clone https://github.com/tadzik/rakudobrew ~/.rakudobrew; rakudobrew build moar; rakudobrew build zef;

[19:22] <Zoffix> And after doing that I `zef look Template::Mustache` and run `prove -e 'perl6 -Ilib' -vlr t` there and it all green and `zef install Template::Mustache` works too

[19:23] <Zoffix> And it does seem there was a fix in April to "failing to find test template file": https://github.com/softmoth/p6-Template-Mustache/commit/bf26fa0dca37604acf57175dff8819afe9138fcd

[19:23] <Zoffix> So perhaps you're getting a copy from cache

[19:24] <stmuk> Zoffix: https://gist.github.com/stmuk/4fdd37938876f11411123a52320442a5

[19:24] <stmuk> oops

[19:27] <Geth> ¦ roast: 7a0f29ea3a | (Elizabeth Mattijsen)++ | S03-operators/subset.t

[19:27] <Geth> ¦ roast: Add identity checks for (<=) and friends

[19:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7a0f29ea3a

[19:36] <Zoffix> m: my method isNaN(Rational:D: --> Bool:D) {}

[19:36] <camelia> rakudo-moar dd2de3: ( no output )

[19:36] <Zoffix> .ask [Coke] any idea why a whole bunch of code in Rational.pod6 have :skip-test on them? https://github.com/perl6/doc/blob/master/doc/Type/Rational.pod6#L26

[19:36] <yoleaux> Zoffix: I'll pass your message to [Coke].

[19:36] <ugexe> probably because its version * and you are getting a cached version

[19:37] <ugexe> if you run with -v it will tell you where its getting things from as of the latest version

[19:38] <stmuk> rm -rf ~/.zef fixed it

[19:39] <Zoffix> \o/

[19:46] * lizmat confirms that rm -rf ~/.zef fixed it

[19:51] <ugexe> we should start nagging people to not use "version" : "*" in their meta6.json anymore

[19:52] <ugexe> otherwise otherwise --/cached will workaround them

[19:52] <Geth> ¦ tap-harness6/verbose: 53db2fec98 | (Leon Timmermans)++ | 2 files

[19:52] <Geth> ¦ tap-harness6/verbose: Add verbose option to harness

[19:52] <Geth> ¦ tap-harness6/verbose: review: https://github.com/perl6/tap-harness6/commit/53db2fec98

[19:53] <Geth> ¦ tap-harness6: Leont++ created pull request #15: Add verbose option to harness

[19:53] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/pull/15

[19:54] <Geth> ¦ tap-harness6/verbose: e241a07c07 | (Leon Timmermans)++ | 2 files

[19:54] <Geth> ¦ tap-harness6/verbose: Add verbose option to harness

[19:54] <Geth> ¦ tap-harness6/verbose: review: https://github.com/perl6/tap-harness6/commit/e241a07c07

[20:05] <[Coke]> Zoffix: looks like the skip on the docs was due to https://github.com/perl6/doc/commit/ecdb5ada5e5e1cd2a6553e6376fd595642fb3919

[20:06] <[Coke]> We should probably do a review of every skip test and remove it if possible. I think that was a "make the test pass" quick hack.

[20:06] <Zoffix> k

[20:07] <[Coke]> we have whole files that are skipped that should be removed and have individual :skips added where needed, too:

[20:07] <[Coke]> https://github.com/perl6/doc/blob/master/xt/examples-compilation.t#L16-L30

[20:20] <Geth> ¦ rakudo/nom: 2efd812c3c | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[20:20] <Geth> ¦ rakudo/nom: Don't use the generated !(<=) and !(<) ops

[20:20] <Geth> ¦ rakudo/nom:

[20:20] <Geth> ¦ rakudo/nom: We don't need them, we simple need a negation at the end.

[20:20] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2efd812c3c

[20:22] <Geth> ¦ roast: 023a94a248 | (Elizabeth Mattijsen)++ | S03-operators/subset.t

[20:22] <Geth> ¦ roast: Add some more complicated tests for (<=) and friends

[20:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/023a94a248

[20:22] <Geth> ¦ roast: 2342a1dfd9 | (Elizabeth Mattijsen)++ | S03-operators/subset.t

[20:22] <Geth> ¦ roast: Don't test generated !(<=) and !(>=) ops

[20:22] <Geth> ¦ roast:

[20:22] <Geth> ¦ roast: Also add some documentation on which set operators are actually tested

[20:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2342a1dfd9

[20:28] <Geth> ¦ tap-harness6/verbose: 9cfa4e3927 | (Leon Timmermans)++ | 2 files

[20:28] <Geth> ¦ tap-harness6/verbose: Add verbose option to harness

[20:28] <Geth> ¦ tap-harness6/verbose: review: https://github.com/perl6/tap-harness6/commit/9cfa4e3927

[20:29] <Geth> ¦ tap-harness6/verbose: 6fbcc72305 | (Leon Timmermans)++ | 2 files

[20:29] <Geth> ¦ tap-harness6/verbose: Add verbose option to harness

[20:29] <Geth> ¦ tap-harness6/verbose: review: https://github.com/perl6/tap-harness6/commit/6fbcc72305

[20:29] <Geth> ¦ rakudo/nom: 07bff0e54e | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[20:29] <Geth> ¦ rakudo/nom: (>=) and (>) don't need to be multi's

[20:29] <Geth> ¦ rakudo/nom:

[20:29] <Geth> ¦ rakudo/nom: All handling is done by the (<=) and (<) ops respectively

[20:29] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/07bff0e54e

[20:35] <Geth> ¦ tap-harness6/verbose: 631eae7d10 | (Leon Timmermans)++ | 2 files

[20:35] <Geth> ¦ tap-harness6/verbose: Add verbose option to harness

[20:35] <Geth> ¦ tap-harness6/verbose: review: https://github.com/perl6/tap-harness6/commit/631eae7d10

[20:35] <Geth> ¦ roast: a7d0a8de7a | (Elizabeth Mattijsen)++ | S03-operators/elem.t

[20:35] <Geth> ¦ roast: Don't test generated !(elem) and !(cont) ops

[20:35] <Geth> ¦ roast:

[20:35] <Geth> ¦ roast: Also add some documentation on which set operators are actually tested

[20:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a7d0a8de7a

[20:36] <Geth> ¦ tap-harness6/verbose: 43f2886462 | (Leon Timmermans)++ | 2 files

[20:36] <Geth> ¦ tap-harness6/verbose: Add verbose option to harness

[20:36] <Geth> ¦ tap-harness6/verbose: review: https://github.com/perl6/tap-harness6/commit/43f2886462

[20:47] <Geth> ¦ tap-harness6: 43f2886462 | (Leon Timmermans)++ | 2 files

[20:47] <Geth> ¦ tap-harness6: Add verbose option to harness

[20:47] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/commit/43f2886462

[20:56] <Geth> ¦ tap-harness6/has-errors: 1f65c8a021 | (Leon Timmermans)++ | lib/TAP.pm

[20:56] <Geth> ¦ tap-harness6/has-errors: Make Aggregator.has-errors return number of errors

[20:56] <Geth> ¦ tap-harness6/has-errors: review: https://github.com/perl6/tap-harness6/commit/1f65c8a021

[20:56] <Geth> ¦ tap-harness6/has-errors: 26f7586996 | (Leon Timmermans)++ | bin/prove6

[20:56] <Geth> ¦ tap-harness6/has-errors: Make prove6 return pass on failed exit code

[20:56] <Geth> ¦ tap-harness6/has-errors: review: https://github.com/perl6/tap-harness6/commit/26f7586996

[21:07] <Geth> ¦ nqp: 7101d408fb | pmurias++ | 2 files

[21:07] <Geth> ¦ nqp: [js] Fix make js-install

[21:07] <Geth> ¦ nqp:

[21:07] <Geth> ¦ nqp: Make js-all install npm deps.

[21:07] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/7101d408fb

[21:07] <Geth> ¦ nqp: f51152cd40 | pmurias++ | README.pod

[21:07] <Geth> ¦ nqp: [js] Mention the --link flag to Configure.pl

[21:08] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f51152cd40

[21:11] <Geth> ¦ rakudo/nom: 1369632fb1 | (Elizabeth Mattijsen)++ | src/core/Rakudo/QuantHash.pm

[21:11] <Geth> ¦ rakudo/nom: Abstract Set (<=) Set logic into R:Q.SET-IN-SUBSET

[21:11] <Geth> ¦ rakudo/nom:

[21:11] <Geth> ¦ rakudo/nom: Since all Quanthashes share the same internal structure, we can

[21:11] <Geth> ¦ rakudo/nom: actually use this logic for QuantHash (<=) Set and Set (<=) QuantHash

[21:11] <Geth> ¦ rakudo/nom: as well.

[21:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1369632fb1

[21:11] <Geth> ¦ rakudo/nom: 2ac120ced9 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[21:11] <Geth> ¦ rakudo/nom: Use R:Q.SET-IN-SUBSET

[21:11] <Geth> ¦ rakudo/nom:

[21:11] <Geth> ¦ rakudo/nom: So we don't need to coerce QuantHash to Set anymore for (<=) and

[21:11] <Geth> ¦ rakudo/nom: friends.

[21:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2ac120ced9

[21:21] <lizmat> argh s/IN/IS  :-(

[21:33] <Geth> ¦ rakudo/nom: 539415cf7d | (Elizabeth Mattijsen)++ | src/core/Rakudo/QuantHash.pm

[21:33] <Geth> ¦ rakudo/nom: Abstract Mix (<=) Mix logic into R:Q.MIX-IS-SUBSET

[21:33] <Geth> ¦ rakudo/nom:

[21:33] <Geth> ¦ rakudo/nom: Since all Baggy's share the same internal structure, we can

[21:33] <Geth> ¦ rakudo/nom: actually use this logic for Bag(|Hash) (<=) Mix(|Hash) and

[21:33] <Geth> ¦ rakudo/nom: Mix(|Hash) (<=) Bag(|Hash) as well.

[21:33] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/539415cf7d

[21:33] <Geth> ¦ rakudo/nom: 5ebf307af1 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[21:33] <Geth> ¦ rakudo/nom: Use R:Q.MIX-IS-SUBSET

[21:33] <Geth> ¦ rakudo/nom:

[21:33] <Geth> ¦ rakudo/nom: So we don't need to coerce Bag(|Hash) to Mix anymore for (<=) and

[21:33] <Geth> ¦ rakudo/nom: friends.

[21:33] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5ebf307af1

[21:34] <lizmat> and that concludes my hacking for today

[21:34] <lizmat> good night, #perl6-dev!

[21:35] <jnthn> 'night, lizmat++

[21:57] <MasterDuke> jnthn: since you seem to be around, timotimo thought my backtrace confirmed that ./src/vm/moar/QAST/QASTCompilerMAST.nqp was where to address that nqp int bug, but didn't know exactly where. any suggestions?

[22:00] <Geth> ¦ tap-harness6: 1f65c8a021 | (Leon Timmermans)++ | lib/TAP.pm

[22:00] <Geth> ¦ tap-harness6: Make Aggregator.has-errors return number of errors

[22:00] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/commit/1f65c8a021

[22:00] <Geth> ¦ tap-harness6: 26f7586996 | (Leon Timmermans)++ | bin/prove6

[22:00] <Geth> ¦ tap-harness6: Make prove6 return pass on failed exit code

[22:00] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/commit/26f7586996

[22:08] <jnthn> MasterDuke: Not right off. I still think an int constraint into the constructor of the AST node and then work backwards to fix the places that try to pass a num there...

[22:09] <jnthn> *think putting

[22:09] <MasterDuke> its in the number action method

[22:10] <timotimo> grabbing the value out of the list returned by the radix op will explode when you put a int constraint

[22:10] <timotimo> explode in the way that it'll first numify, then intify

[22:10] <Geth> ¦ rakudo/newer-cat-handle: dcd60d5261 | (Zoffix Znet)++ | 2 files

[22:10] <Geth> ¦ rakudo/newer-cat-handle: Add some missing NYI cat handle methods

[22:10] <Geth> ¦ rakudo/newer-cat-handle: review: https://github.com/rakudo/rakudo/commit/dcd60d5261

[22:10] <jnthn> timotimo: Does radix give back a BOOTInt or a BOOTNum?

[22:11] <jnthn> I mean, is it correct or bust at the point we return from string_to_int in HLL::Actions?

[22:11] <timotimo> gotta have a look in the moar code

[22:12] <jnthn> https://github.com/MoarVM/MoarVM/blob/37460c7a2fe9b793d1d0ab7184c1964686e08a11/src/core/coerce.c#L391

[22:12] <jnthn> Says BOOTInt

[22:13] <jnthn> No num shenanigans in there

[22:13] <jnthn> At all

[22:13] <timotimo> oh, we're using radix_i instead of radix_I?

[22:14] <jnthn> Yeah

[22:14] <jnthn> No bigints in NQP

[22:14] <jnthn> But that should mean the chain through decint and integer are good since they just pass on up the .made

[22:15] <timotimo> right, radix only

[22:16] <jnthn> In method number in NQP::Actions it looks like it could go wrong if it's negative

[22:16] <jnthn> https://github.com/perl6/nqp/blob/master/src/NQP/Actions.nqp#L1578

[22:16] <jnthn> I get that line nums it

[22:16] <jnthn> *bet

[22:16] <jnthn> But I thought we had a positive that was going wrong?

[22:17] <timotimo> both the duke and me tried having two separate branches there based on whether the float or the int was taken

[22:17] <MasterDuke> nqp: say(100000000000000009)

[22:17] <camelia> nqp-moarvm: OUTPUT: «100000000000000016␤»

[22:18] <timotimo> would $foo := -$foo numify?

[22:20] <jnthn> timotimo: Yes

[22:21] <timotimo> that'd be bad, of course

[22:21] <timotimo> but still

[22:21] <timotimo> anyway

[22:21] <jnthn> m: my int $i = 100000000000000009; say($i)

[22:21] <camelia> rakudo-moar 5ebf30: OUTPUT: «100000000000000009␤»

[22:22] <timotimo> i just put a my int $result = nqp::atpos instead of just nqp::atpos at the end of string_to_int

[22:22] <timotimo> and nqp::say directly after that gives me the one ending in 16

[22:22] <jnthn> What's the code-gen for that?

[22:23] <timotimo> hm, let's see, it should appear in the spesh log

[22:24] <jnthn> 00043   decont       loc_9_obj, loc_9_obj

[22:24] <jnthn> 00044   smrt_numify  loc_11_num, loc_9_obj

[22:24] <jnthn> 00045   coerce_ni    loc_6_int, loc_11_num

[22:24] <timotimo> ;(

[22:24] <jnthn> Appears in the code-gen or

[22:24] <jnthn> *of

[22:24] <jnthn> my @a := [1,2,3]; my int $i := @a[1];

[22:25] <jnthn> (Around the := bit)

[22:25] <timotimo> right, but we can't nqp::atpos_i because it's not an int-typed array, right?

[22:25] <jnthn> Right

[22:25] <jnthn> But

[22:25] <jnthn> We shouldn't be coercing there, just unboxing, IMO

[22:26] <jnthn> I suspect this is what is going on in the attribute bind inside of the QAST::IVal, though

[22:26] <jnthn> So it gets busted at that point

[22:26] <jnthn> Maybe the coerce was a sop to various bits of unstrictness elsewhere

[22:27] <MasterDuke> yeah, i added a print in bind_attribute and it has the wrong value in the IVal.new

[22:27] <timotimo> we don't have a smart-intify, maybe we should?

[22:27] <jnthn> timotimo: I'd rather just generate unbox_i :)

[22:27] <jnthn> I don't really like smart_numify :)

[22:28] <jnthn> So I'd rather not spread that damage further

[22:28] <timotimo> right

[22:28] <jnthn> Ooh, it's after midnight

[22:28] * jnthn should probably go rest up a bit so he stands a chance of being vaguely useful tomorrow

[22:29] <jnthn> 'night

[22:29] <timotimo> night jnthn!

[22:30] <Zoffix> wonder why `perl6` sometimes isn't there. Only the `perl6-m`

[22:31] <MasterDuke> timotimo: do you know where that decont, smrt_numify, coerce_ni is code-gen'd?

[22:31] <MasterDuke> jnthn: thanks for the help

[22:34] <Geth> ¦ roast/newer-cat-handle: 568eb76ae1 | (Zoffix Znet)++ | fudgeandrun

[22:34] <Geth> ¦ roast/newer-cat-handle: Make fudgeandrun look for perl6-m and perl6-j

[22:34] <Geth> ¦ roast/newer-cat-handle:

[22:34] <Geth> ¦ roast/newer-cat-handle: Before swapping to system perl6 when ./perl6 is not found.

[22:34] <Geth> ¦ roast/newer-cat-handle:

[22:34] <Geth> ¦ roast/newer-cat-handle: Some times the build doesn't create a ./perl6, only ./perl6-m (I think

[22:34] <Geth> ¦ roast/newer-cat-handle: due to running just `make install` after a compile error). This

[22:34] <Geth> ¦ roast/newer-cat-handle: commit fixes the fudgeandrun bailing out of testing in those cases.

[22:34] <Geth> ¦ roast/newer-cat-handle: review: https://github.com/perl6/roast/commit/568eb76ae1

[22:36] <Geth> ¦ rakudo/newer-cat-handle: 4a8aa27365 | (Zoffix Znet)++ | src/core/IO/CatHandle.pm

[22:36] <Geth> ¦ rakudo/newer-cat-handle: [io grant] Implement IO::CatHandle.close

[22:36] <Geth> ¦ rakudo/newer-cat-handle: review: https://github.com/rakudo/rakudo/commit/4a8aa27365

[22:37] <Geth> ¦ roast/newer-cat-handle: 939ca8d275 | (Zoffix Znet)++ | S32-io/io-cathandle.t

[22:37] <Geth> ¦ roast/newer-cat-handle: [io grant] Test IO::CatHandle.close

[22:37] <Geth> ¦ roast/newer-cat-handle: review: https://github.com/perl6/roast/commit/939ca8d275

[22:38] <Geth> ¦ roast/newer-cat-handle: 6e8a0be41f | (Zoffix Znet)++ | S32-io/io-cathandle.t

[22:38] <Geth> ¦ roast/newer-cat-handle: Expand IO::CatHandle.lines tests

[22:38] <Geth> ¦ roast/newer-cat-handle:

[22:38] <Geth> ¦ roast/newer-cat-handle: - Test for $limit = 0

[22:38] <Geth> ¦ roast/newer-cat-handle: - Test lack of :close argument leaves untouched handles open

[22:38] <Geth> ¦ roast/newer-cat-handle: - Test :close arg closes the handles

[22:38] <Geth> ¦ roast/newer-cat-handle: review: https://github.com/perl6/roast/commit/6e8a0be41f
