[01:34] <tbrowder> hi devs, if i want to try out an old rakudo release how do i find the one named "2017.04.3-275-g84502dc"? it's not a tag on the nom branch.

[01:43] <[Coke]> I believe this was answered elsewhere, but that's commit 84502dc

[01:47] <[Coke]> so just 'git checkout 84502dc'

[01:54] <tbrowder> thanks, [Coke]

[02:07] <Zoffix> You can check out the full thing too. `git checkout 2017.04.3-275-g84502dc` and that'll work even when there are more than one commits with the same shorthash

[02:08] <geekosaur> oh the full one does work. I had wondered but not enough to test it :p

[02:39] <Zoffix> c: 2017.04.3-275-g84502dc say $*PERL.compiler.version

[02:39] <committable6> Zoffix, ¦2017.04.3-275-g84502dc: «v2017.04.3.275.g.84502.dc.20»

[03:01] <ugexe> if using rakudobrew you can do `rakudobrew build moar 84502dc`

[03:08] <ugexe> rakudobrew is actually the right tool for comparing multiple versions against each other

[05:58] <[Tux]> This is Rakudo version 2017.06-133-ga7b2304e7 built on MoarVM version 2017.06-30-g389e9732

[05:58] <[Tux]> csv-ip5xs        2.647

[05:58] <[Tux]> test            12.623

[05:58] <[Tux]> test-t           4.141 - 4.227

[05:58] <[Tux]> csv-parser      13.273

[06:45] <nine> Zoffix: just read through your depressing reddit fight with chromatic. If you actually want any other outcome than what occured, you have to give the other party a chance to safe face. I loved your suggestion for chromatic to come back, but he absolutely could not in that conversation.

[09:25] <stmuk> I've abandoned the perl reddit for perl6 stuff and wish I could unread *that* thread too

[10:07] <Zoffix> Isn't that manipulation? It amuses me how humans made what-you're-supposed-to-say-when-into-a-science, but half the time what you're "supposed" to do is lie or say things a specific way that's most likely to manipulate the other human to act in a specific way.

[10:07] <Zoffix> ZofBot: your hair looks lovely today! wink, wink

[10:07] <ZofBot> Zoffix, 122)

[10:08] <nine> Zoffix: what you did was manipulation just as well. You pushed him into a corner where he could not act in a different way even if he desparately wanted to (which may or may not be the case).

[10:10] <nine> And most importantly: you want to manipulate. You want the negativity to stop and you want to have positive interaction. That's your goal. I'm telling you that you won't reach the goal with your current tactics :)

[10:30] <Zoffix> Not at all. I pointed out to the audience the depressing whining about how no one uses Perl anymore reminds me of #perl channels I no longer frequent and that demoralizing Perl 6 core devs while expecting them to get cracking and produce stellar product is contradictory. There isn't any goals, or corners or checkpoints to save faces, or feet, or whatever else people like to save.

[10:32] <Zoffix> And just as predicted complains about Perl 6 https://irclog.perlgeek.de/mojo/2017-06-04#i_14684821 and depressing debates about whether Perl is dead https://irclog.perlgeek.de/mojo/2017-07-03#i_14819507

[10:33] <Zoffix> That's Perl 5 community to me in a nutshell and I'm not deluded enough to think I'll somehow change them all, only if I manipulate people by letting them save bodyparts or whatever.

[10:36] <Zoffix> 'In the English-speaking world, the expression "to save face" describes the lengths that an individual may go to in order to preserve their established position in society, taking action to ensure that one is not thought badly of by his or her peers.'

[10:37] <nine> In a nutshell: giving him a way out of the situation without him looking bad.

[10:37] <Zoffix> I don't even know what chromatic's "established position in society" is.

[10:39] <nine> And honestly, if you go out of your way to _find_ complaints about Perl 6 in the Perl 5 community, it's no wonder that you actually succeed. But that's not a way to arrive at a fair characterization and it's unclear to me how you will help anyone doing that.

[10:44] <stmuk> I don't there is any point in enaging with most of these people

[10:45] <Zoffix> I didn't have to go out of anything. The discussion *started* at with an article complaining about Perl 6, based on something vague TimToady said.

[10:46] <Zoffix> And a week later I'm being told to save face of an individual who obsessively reads Perl 6 chat logs and social media feeds to find anything to weaponize

[10:46] <nine> Zoffix: I meant the IRC logs you linked

[10:46] <nine> Zoffix: and I did not tell you anything!

[10:47] <Zoffix> "<nine> [...] If you actually want any other outcome than what occured [...]"

[10:47] <nine> Zoffix: I suggested that if you actually want to accomplish something, you would have to change tactics. But apparently that's not what you want. Looks like you're quite happy just bickering about those others.

[10:47] <nine> So I'm gonna shut up now instead of wasting my work time on this.

[10:47] <Zoffix> I was quite happy enjoying my morning coffee without incessant bullshit about language politics

[10:47] <nine> There's a god damn "if" in there!

[10:48] <Zoffix> Or what I'm supposed to do

[10:48] <Zoffix> I'm here to write code not to be told how to manipulate people.

[10:49] <nine> Oh sorry for trying to help. I won't make that mistake again.

[10:49] <masak> ...somebody called for hugs?

[10:50] * lizmat hugs nine and Zoffix

[10:50] * masak hugs Zoffix and nine

[10:51] <lizmat> fwiw, I've plonked mr_chromatic mentally

[10:51] <masak> clearly, he hasn't forgotten about us, though :P

[10:51] * masak waves to chromatic

[10:52] <lizmat> "Hell hath no fury like a woman scorned"

[10:52] <lizmat> my mental label for mr_chromatic

[10:53] <jnthn> I've found the Perl community at large both reasonable and hospitable with regard to Perl 6, including during times when the state was much less good than it is today. There have been (and are) reasonable sceptics, who have had worthwhile input over the years. There are then a relatively very small handful of people who seemingly will be satisfied by nothing we do.

[10:54] <masak> well, chromatic likes to talk about opportunity costs. imagine if all of chromatic's ranting were put to some good use.

[10:54] <masak> the time spent on it, I mean.

[10:54] <lizmat> maybe we should introduce a hot air tax  :-)

[10:55] * masak .oO( well, that ballooned quickly )

[10:58] <masak> jnthn: I agree with your categorization.

[10:58] <nine> Conflicts have been solved on a much, much larger scale. I firmly believe that with enough good will and the right approach this particular one can be, too. Apparently and surprisingly though, that's not wanted. Which in my view kinda removes any moral high ground for judging anyone.

[10:59] <stmuk> it's a pity the original blog post was ever posted to reddit .. the title should have been enough to warn people off

[11:00] <stmuk> it's not like any of this is anythng new

[11:00] * masak is wizened enough not to go find any links to waste his time on

[11:01] <masak> oh, that's what "wizened" means. not quite what I meant, then :P

[11:01] <jnthn> haha

[11:01] <masak> but yeah, "old" as in "I've read reddit quite enough, thank you"

[11:02] <masak> and I find a soupçon of chromatic doth not improve the taste of the broth

[11:03] <jnthn> Righty, lunch, then incorporating type feedback into the new spesh model

[11:04] <jnthn> uh, that woulda made more sense on #moarvm

[11:04] <jnthn> Anyway, for those who aren't there, over there I'm doing a bunch of work on the specializer. :-)

[11:04] <jnthn> bbi30

[12:20] <tbrowder> Zoffix: can i extract or find out nqp version from the rakudo id? looks like i need to explicitly define nqp and moar branches to Configure.pl to get the proper Makefile for full installation.

[12:24] <timotimo> tbrowder: tools/build/NQP_REVISION in rakudo and tools/build/MOAR_REVISION in nqp

[13:34] <tbrowder> thnx timotimo

[13:36] <dogbert17> m: my ($a, $b) = BagHash.new(2, 2, 4), BagHash.new(2, 3, 3, 4); say $a (^) $b

[13:36] <camelia> rakudo-moar a7b230: OUTPUT: «bag(3(2), 2)␤»

[13:38] <lizmat> feels correct ?

[13:38] <lizmat> or do you expect setty semantics?

[13:41] <masak> (^) is symmetric difference, yes?

[13:43] <lizmat> yes

[13:45] <masak> well, hmhm, seems to me the baggy generalization of symmetric set difference would be something like "let the lesser count of the element consume the greater"

[13:45] <masak> which seems to be what's happening above, with the 2

[13:45] <dogbert17> commit: 2017.01  ($a, $b) = BagHash.new(2, 2, 4), BagHash.new(2, 3, 3, 4); say $a (^) $b

[13:45] <committable6> dogbert17, ¦2017.01: «04===SORRY!04=== Error while compiling /tmp/dLzTAvBkne␤Variable '$a' is not declared␤at /tmp/dLzTAvBkne:1␤------> 03(08⏏04$a, $b) = BagHash.new(2, 2, 4), BagHash. «exit code = 1»»

[13:46] <dogbert17> commit: 2017.01 my  ($a, $b) = BagHash.new(2, 2, 4), BagHash.new(2, 3, 3, 4); say $a (^) $b

[13:46] <committable6> dogbert17, ¦2017.01: «bag(3(2), 2)»

[13:46] <dogbert17> commit: 2016.06 my  ($a, $b) = BagHash.new(2, 2, 4), BagHash.new(2, 3, 3, 4); say $a (^) $b

[13:46] <committable6> dogbert17, ¦2016.06: «set(3)»

[13:46] <dogbert17> at least it used to be different

[13:48] <masak> yeah, that old semantics looks like a more setty take

[13:48] <dogbert17> which one do you prefer?

[13:49] <masak> I could imagine using both under different circumstances

[13:50] <masak> but the baggy semantics is perhaps slightly nicer to have there, in that if I wanted the setty semantics I could drop down to Sets and then do (^)

[13:50] <lizmat> note that if you want Setty semantics, you can coerce to Set  :-)

[13:50] <masak> right

[13:50] <lizmat> masak: we have a similar issue with (<) and (<=)

[13:50] <lizmat> which I gave baggy semantcs

[13:50] <masak> we talked a little bit about it the other week

[13:51] <lizmat> but reverted after dogbert17's finds

[13:51] <dogbert17> I have to change two rows here but that poses no problem :) https://docs.perl6.org/type/BagHash#Operators

[13:52] <lizmat> masak: I was thinking of deprecating (<+) in favour of baggy semantics of (<=)

[13:52] <lizmat> two reasons: we don't have a baggy equivalent of (<) currently

[13:53] <lizmat> and it would reduce the number of set operators

[13:54] <lizmat> fwiw, when I added baggy semantics to (<) and (<=) there were no spectest fails if I remember correctly

[13:54] <masak> I'd love to discuss this further, but I'm about to decommute

[13:54] <lizmat> masak: ack

[13:54] * lizmat is currently being commuted

[13:55] <dogbert17> lizmat: curveball RT #131561, is it resolved?

[13:55] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131561

[13:56] <lizmat> dogbert17: I beleive so

[13:56] <dogbert17> the tests as well?

[13:56] <lizmat> m: dd (a => 1, a => -1).Mix

[13:56] <camelia> rakudo-moar a7b230: OUTPUT: «mix()␤»

[13:57] <lizmat> m: dd (a => 0, a => 0).Mix

[13:57] <camelia> rakudo-moar a7b230: OUTPUT: «mix()␤»

[13:57] <lizmat> tests?

[13:57] <dogbert17> where's the dot :)

[13:57] <dogbert17> m: dd (0 => 1, 0 => -1, 0 => 0, ).MixHash

[13:57] <camelia> rakudo-moar a7b230: OUTPUT: «()MixHash␤»

[13:58] <lizmat> ah....

[13:58] <lizmat> hmmm... different issue, I think

[13:58] <dogbert17> commit: 2016.12 dd (0 => 1, 0 => -1, 0 => 0, ).MixHash

[13:58] <committable6> dogbert17, ¦2016.12: «().MixHash»

[13:59] <lizmat> dogbert17: fixing now

[13:59] <dogbert17> while commuting ?

[14:00] <jnthn> The wonders of 21st century technology :)

[14:00] <lizmat> yeah... 4G tethering  :-)

[14:01] <dogbert17> cool, I guess you're using your laptop and not a mobile phone like Zoffix

[14:01] <lizmat> yup

[14:01] <lizmat> that makes things a lot easier  :-)

[14:01] <dogbert17> indeed

[14:02] <dogbert17> dunno if we have an RT for this release blocker 'dot bug' :-)

[14:02] <Geth> ¦ rakudo/nom: 9ba5eaef45 | (Elizabeth Mattijsen)++ | src/core/Baggy.pm

[14:02] <Geth> ¦ rakudo/nom: Oops, seems I forgot a dot, dogbert17++

[14:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9ba5eaef45

[14:03] <dogbert17> lizmat++

[14:19] <AlexDaniel> c: 2017.04.3-275-g84502dc say 42

[14:19] <committable6> AlexDaniel, ¦2017.04.3-275-g84502dc: «42»

[14:19] <AlexDaniel> holy…

[14:23] <lizmat> AlexDaniel  ?

[14:23] <AlexDaniel> lizmat: I have never thought that something like this is going to work :)

[14:23] <AlexDaniel> especially in committable6 :)

[14:23] <lizmat> ah  :-)

[14:23] <AlexDaniel> I mean, sure, it asks git to resolve this stuff, but omg that was unexpected

[14:27] <MasterDuke> m: -> UInt @ {}(Array[UInt].new)

[14:27] <camelia> rakudo-moar 9ba5ea: OUTPUT: «Constraint type check failed in binding to parameter '<anon>'; expected UInt but got Array[UInt] (Array[UInt].new())␤  in block <unit> at <tmp> line 1␤␤»

[14:27] <MasterDuke> the ^^^ problem seems to be here: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Metamodel/BOOTSTRAP.nqp#L497

[14:28] <MasterDuke> $cons_type is 'UInt'

[14:28] <MasterDuke> $oval is 'Array[UInt]'

[14:33] <MasterDuke> should $cons_type be something like 'Array[UInt]', or instead of `$result := $cons_type.ACCEPTS($oval);`, should $cons_type be ACCEPTS()ing the parameterized type of $oval?

[14:34] <jnthn> MasterDuke: I suspect it shouldn't have a cons_type at all

[14:36] <MasterDuke> jnthn: but UInt is a subset, i thought those created constraint types?

[14:37] <jnthn> On $ surely

[14:37] <jnthn> But Int @ means Positional[Int]

[14:37] <jnthn> So surely UInt @ means Positional[UInt]

[14:38] <jnthn> I think the mistake is probably being made at signature construction time

[14:41] <MasterDuke> m: -> UInt @ {}.signature.say

[14:41] <camelia> rakudo-moar 9ba5ea: OUTPUT: «(Int @ where { ... })␤»

[14:42] <jnthn> Yeah, that's wrong

[14:42] <jnthn> Shoudln't be pulling the type into pieces in the parametric case

[14:43] <MasterDuke> hm, where do signatures get constructed?

[14:43] <jnthn> actions/world

[14:44] <MasterDuke> thanks, i'll look around

[14:44] <jnthn> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.nqp#L5040

[14:44] <jnthn> I suspect it's wrong a bit before then

[14:44] <jnthn> But it'll be close

[14:45] <jnthn> Maybe around here https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.nqp#L5242

[14:48] <MasterDuke> 'dissect_type_into_parameter', sounds relevant

[16:13] <dogbert17> lizmat: I'm going to add tests for RT #131303. Where should I put them?

[16:13] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131303

[16:39] <Zoffix> m: dd 1..4, 6..7 ... 9..12

[16:39] <camelia> rakudo-moar 9ba5ea: OUTPUT: «No such method 'succ' for invocant of type 'Range'. Did you mean any of these?␤    sec␤    sech␤    sum␤    uc␤␤  in block <unit> at <tmp> line 1␤␤»

[16:40] <Zoffix> m: dd infix:<...>( 1..4, 6..7, 9..12 )

[16:40] <camelia> rakudo-moar 9ba5ea: OUTPUT: «(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12).Seq␤»

[16:40] <Zoffix> m: dd infix:<...^>( 1..4, 6..7, 9..12 )

[16:40] <camelia> rakudo-moar 9ba5ea: OUTPUT: «Cannot resolve caller infix:<...^>(Range, Range, Range); none of these signatures match:␤    (\a, Mu \b)␤  in block <unit> at <tmp> line 1␤␤»

[16:40] <Zoffix> Where is that middle candidate used? Seems it's not reachable via normal operator use and looks like its extra features aren't available in the ...^ version.

[16:41] <Zoffix> m: dd [...] 1..4, 6..7, 9..12

[16:41] <camelia> rakudo-moar 9ba5ea: OUTPUT: «(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12).Seq␤»

[16:41] <Zoffix> I guess this is it

[16:44] <Zoffix> And there's no good meaning for ...^ version, which is why it's lacking

[17:06] <Zoffix> m: dd 'a' … 'b'; dd 'a' …^ 'b';

[17:06] <camelia> rakudo-moar 9ba5ea: OUTPUT: «("a", "b").Seq␤("a",).Seq␤»

[17:06] <Zoffix> m: dd 'aa' … 'bb'; dd 'aa' …^ 'bb';

[17:06] <camelia> rakudo-moar 9ba5ea: OUTPUT: «("aa", "ab", "ba", "bb").Seq␤("aa", "ab", "ba", "bb").Seq␤»

[17:07] <Zoffix> Wonder how good a coverage we got for &SEQUENCE

[17:07] <Zoffix> Undercover: &SEQUENCE

[17:07] <Zoffix> Undercover: coverage &SEQUENCE

[17:07] <Zoffix> coverage: &SEQUENCE

[17:08] <Zoffix> cover: &SEQUENCE

[17:08] <Undercover> Zoffix, Failed to figure out coverage status on http://perl6.WTF/SETTING__src_core_operators_pm.coverage.html#L112

[17:09] <Zoffix> Undercover: you're useless

[17:12] <MasterDuke> Zoffix: https://gist.github.com/Whateverable/720212610b1d77afd5ff459d01acc6c5

[17:12] <MasterDuke> different kind of coverage report though

[17:13] <Zoffix> MasterDuke: how does it figure out the lines?

[17:15] <MasterDuke> runs with MVM_COVER_LOG=1 and then parses the log file

[17:15] <Zoffix> Ah. Then it has same limitations as perl6.wtf

[17:15] <MasterDuke> yep

[17:16] <Geth> ¦ rakudo/nom: 31eefb0d00 | TimToady++ | src/core/CompUnit/Repository/FileSystem.pm

[17:16] <Geth> ¦ rakudo/nom: Don't use .<<$key>> where .{$key} is intended

[17:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/31eefb0d00

[17:16] <Geth> ¦ rakudo/nom: d5d3bd2763 | TimToady++ | src/Perl6/Grammar.nqp

[17:16] <Geth> ¦ rakudo/nom: Warn on ambiguous hyper inside quote words

[17:16] <Geth> ¦ rakudo/nom:

[17:16] <Geth> ¦ rakudo/nom: Fixes #131695

[17:16] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131695

[17:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d5d3bd2763

[17:16] <MasterDuke> but you get to choose the code to run and get coverage of

[17:17] <MasterDuke> i.e., doesn't rely on a roast test existing

[17:21] <Zoffix> Looks like there's some amount of tests for it in S03-sequence/* dir

[17:21] <Zoffix> 781 lines in total

[17:21] * Zoffix is chaffed to use IO::CatHandle in real code for the first time :) perl6 -e 'IO::CatHandle.new(dir).lines.elems.say'

[17:22] <Zoffix> Guess `perl6 -e 'say +lines' *` is shorter, but still :)

[17:27] <Zoffix> spec (master)$ perl6 -MFile::Find -e 'say +lines IO::CatHandle.new: :encoding<latin1>, find :dir<.> :type<file>'

[17:27] <Zoffix> 426222

[17:27] <Zoffix> :)

[17:33] <TimToady> m: my $x = 42; say <<$x>>

[17:33] <camelia> rakudo-moar d5d3bd: OUTPUT: «Potential difficulties:␤    Ambiguous use of >>; use » instead to mean hyper, or insert whitespace before >> to mean a quote terminator (or use different delimiters?)␤    at <tmp>:1␤    ------> 3my $x = 42; say <<$x7⏏5>>␤(42)␤»

[17:34] <TimToady> m: my $x = 42; say << $x >>

[17:34] <camelia> rakudo-moar d5d3bd: OUTPUT: «(42)␤»

[17:35] <TimToady> m: my $x = 42; say <<$x>>[0]>>

[17:35] <camelia> rakudo-moar d5d3bd: OUTPUT: «Potential difficulties:␤    Ambiguous use of >>; use » instead to mean hyper, or insert whitespace before >> to mean a quote terminator (or use different delimiters?)␤    at <tmp>:1␤    ------> 3my $x = 42; say <<$x7⏏5>>[0]>>␤    Ambiguous…»

[17:36] <TimToady> it already found one problem in the core setting :)

[17:43] <Zoffix> ©ol.

[17:43] <Zoffix> *cool

[17:44] <MasterDuke> heh, never seen that typo before

[17:44] <Zoffix> Accidental compose key press :) Compose, C+o = ©

[18:07] <MasterDuke> timotimo: what does it mean for a type to be nominalizable?

[18:08] <MasterDuke> anybody feel free to answer that

[18:20] <nine> Zoffix: It was not my intention to order you to do anything. I was merely trying to be helpful. I obviously failed. Sorry for that.

[18:24] <timotimo> MasterDuke: have you looked at Archetypes.nqp in rakudo's src/Perl6/Metamodel?

[18:24] <timotimo> gotta go AFK now, but maybe that helps a little bit?

[18:24] <MasterDuke> i haven't, but will take a look, thanks

[18:42] <jnthn> MasterDuke: It means that it knows how to turn itself into something that is a nominal type (that is, only the name matters, not any kind of constrainty check)

[18:45] <MasterDuke> jnthn: ah, thanks

[18:45] <MasterDuke> fwiw, in the `elsif $type.HOW.archetypes.nominalizable {` branch of `dissect_type_into_parameter` i wrapped the whole post_contstraint stuff in an `if $type.HOW.name($type) ne 'UInt' {`

[18:45] <jnthn> A role can do it by punning for example

[18:45] <MasterDuke> and the example from the ticket doesn't die

[18:46] <jnthn> Alright

[18:46] <jnthn> So now it just needs a proper solution :)

[18:46] <MasterDuke> but i don't know what the real solution is

[18:46] <MasterDuke> heh. exactly

[18:46] <jnthn> (Namely, not doing the dissection if the sigil is @ or % or &)

[18:46] <MasterDuke> ah

[18:47] <Zoffix> Speaking of & ... YIL:

[18:47] <Zoffix> m: -> & {}(/^/)

[18:47] <camelia> rakudo-moar d5d3bd: ( no output )

[18:47] <Zoffix> I've no idea what sort of arg it's expecting tho

[18:47] <Zoffix> m: /^/('x')

[18:47] <camelia> rakudo-moar d5d3bd: OUTPUT: «No such method '!cursor_start' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[18:47] <jnthn> A Callable

[18:48] <jnthn> m: say Regex ~~ Callable

[18:48] <camelia> rakudo-moar d5d3bd: OUTPUT: «True␤»

[18:48] <jnthn> m: say Regex ~~ Method

[18:48] <camelia> rakudo-moar d5d3bd: OUTPUT: «True␤»

[18:52] <Zoffix> No, I mean what has !cursor_start method..

[18:52] <Zoffix> m: /^/(/^/)

[18:52] <camelia> rakudo-moar d5d3bd: OUTPUT: «No such method '!cursor_start' for invocant of type 'Regex'␤  in block <unit> at <tmp> line 1␤␤»

[18:52] <Zoffix> m: /^/(grammar {})

[18:52] <camelia> rakudo-moar d5d3bd: OUTPUT: «Cannot look up attributes in a <anon|63636064> type object␤  in block <unit> at <tmp> line 1␤␤»

[18:52] <Zoffix> m: /^/(grammar {}.new)

[18:52] <camelia> rakudo-moar d5d3bd: ( no output )

[18:52] <Zoffix> Ah. i see

[18:55] <jnthn> A Cursor :)

[18:55] <jnthn> I wonder a bit why it didn't stick a Curosr type constraint on the invocant there though

[18:57] <MasterDuke> jnthn: it seems like the type constraint stuff doesn't know the containerness (i.e., sigil) of the parameter it's contraining?

[18:58] <Zoffix> m: say /.../(/.../(/.../('foobar' ~~ /.../)))

[18:58] <camelia> rakudo-moar d5d3bd: OUTPUT: «｢bar｣␤»

[19:00] <jnthn> MasterDuke: No, so it'll probably need some refactoring to decide whether to dissect the type later

[19:01] <MasterDuke> ok, thought that might be the case, wanted to make sure i wasn't missing something obvious

[19:03] <AlexDaniel> I would appreciate any feedback on this: https://github.com/perl6/whateverable/issues/117#issuecomment-312935676

[19:03] <AlexDaniel> especially from those who are smarter than me… so everyone is welcome to comment!

[19:11] <AlexDaniel> TimToady: that's a pretty cool fix, by the way

[19:11] <AlexDaniel> TimToady: I did not imagine that that would be possible

[19:17] <dogbert17> Zoffix: didn't you solve RT #131137

[19:17] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131137

[19:18] <Zoffix> dogbert17++ Thanks. Yeah. Closed it now.

[19:19] <dogbert17> yay, one RT down :)

[19:20] <Zoffix> This is hilarious: https://pippinbarr.github.io/itisasifyouweredoingwork/

[19:41] <dogbert17> Zoffix: do you remember if RT #130327 was only a case of a forgotten debug statement

[19:41] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130327

[19:42] <Zoffix> Don't know.

[21:37] <dogbert17> m: my $b = <a b b c d e f>.BagHash; $_ = 0 for $b.values; dd $b

[21:37] <camelia> rakudo-moar d5d3bd: OUTPUT: «BagHash $b = ().BagHash␤»

[21:41] <dogbert17> hmm, looks as if RT #130366 has been fixed

[21:41] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130366

[21:41] <lizmat> m: my $b = <a b b c d e f>.BagHash; $_ = 0, $_ = 2 for $b.values; dd $b

[21:41] <camelia> rakudo-moar d5d3bd: OUTPUT: «BagHash $b = ("d"=>2,"e"=>2,"b"=>2,"a"=>2,"c"=>2,"f"=>2).BagHash␤»

[21:41] <lizmat> whee!  :-)

[21:42] <lizmat> decommute&

[21:44] <AlexDaniel> buggable: https://github.com/rakudo/rakudo/commit/1cafc67b1aad14eafa8d3e6431656524e4d0d5d3

[21:44] <AlexDaniel> blargh

[21:44] <AlexDaniel> dogbert17: interestingly, bisectable points to https://github.com/rakudo/rakudo/commit/1cafc67b1aad14eafa8d3e6431656524e4d0d5d3

[21:45] <AlexDaniel> commit: 1cafc67b1aad14eafa^,1cafc67b1aad14eafa my $b = <a b b c d e f>.BagHash; $_ = 0 for $b.values; dd $b

[21:45] <committable6> AlexDaniel, ¦1cafc67b1aad14eafa^: «BagHash $b = ("a"=>0,"c"=>0,"b"=>0,"e"=>0,"f"=>0,"d"=>0).BagHash» ¦1cafc67: «BagHash $b = ("e"=>0,"d"=>0,"b"=>0,"a"=>0,"f"=>0,"c"=>0).BagHash»

[21:45] <AlexDaniel> … and does so wrongly?

[21:45] <AlexDaniel> ah right, it's not sorted

[21:47] <dogbert17> there are quite a few RT's which have been fixed but lack tests and are therefore not closed. With this one I don't know, perhaps tests have been written.

[21:47] <AlexDaniel> commit: c1bd844e2^,c1bd844e2 my $b = <a b b c d e f>.BagHash; $_ = 0 for $b.values; dd $b,

[21:47] <committable6> AlexDaniel, ¦c1bd844e2^: «BagHash $b = ("e"=>0,"d"=>0,"b"=>0,"a"=>0,"f"=>0,"c"=>0).BagHash» ¦c1bd844: «BagHash $b = ().BagHash»

[21:47] <AlexDaniel> here it is

[21:47] <AlexDaniel> https://github.com/rakudo/rakudo/commit/c1bd844e2752799af8e2d335bd68f10d923ee44a

[21:47] <AlexDaniel> dogbert17: well, look for tests for RT #131241?

[21:47] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131241

[21:48] <dogbert17> ok

[21:49] <AlexDaniel> I don't see any

[21:49] <AlexDaniel> makes me wonder why is it resolved

[21:49] <dogbert17> at least none are marked as testing the RT in question

[21:52] <dogbert17> guess we'll have to ask lizmat

[21:54] <AlexDaniel> dogbert17: I have marked both tickets as testneeded (and reopened the one that is closed)

[21:54] <AlexDaniel> dogbert17: and wrote comments on both

[21:54] <dogbert17> so instead of getting rid of one RT a closed one was reopened instead :)

[21:55] <AlexDaniel> XD

[21:55] <AlexDaniel> I mean… this seemed like a right thing to do…

[21:56] <AlexDaniel> we can merge two tickets though

[21:57] <AlexDaniel> dogbert17++ for reviewing the ticket queue

[22:03] <dogbert17> adding tests should enable us to close quite a few

[22:25] <AlexDaniel> mst: if I reached the limit for the number of user connections on freenode, should I just trick it by using a different ip for some bots, or is there a righter way?

[22:42] <AlexDaniel> committable6: uptime

[22:42] <committable6> AlexDaniel, 5 weeks, 1 day, 18 hours, 5 minutes, and 4 seconds

[22:42] <AlexDaniel> does it mean that the bug was fixed?

[22:42] <AlexDaniel> but I didn't do anything…
