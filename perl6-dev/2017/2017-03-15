[01:01] * geekosaur keeps wanting to look at boxing/unboxing analysis and optimizations based on it, but has not enough reliably available time :/

[01:01] <geekosaur> also I suspect it would mean that code generation would have to change a lot in able to take advantage of it

[01:01] <geekosaur> (and then there's the question  of whether it would confuse spesh enough to lead to pessimization)

[04:34] <samcv> not sure why returns has to be deprecated, i mean. it's basically the same thing as --> right. i mean we have && and `and`

[04:36] <geekosaur> it's not

[04:36] <geekosaur> aside from the fact that --> is in the .signature, there are some other places where returns and --> do different things apparently

[04:37] <samcv> and we have `is raw` and etc and i thought it seemed natural reading the line

[04:37] <samcv> sub foo ( ) is export returns Str

[04:37] <samcv> hmm.

[04:43] <samcv> i mean if we want --> to be the `proper form` we could state that in the docs

[04:43] <samcv> or real form or something and that `returns Str` is syntatic sugar for it or something

[04:43] <samcv> but i don't think we should remove it

[04:46] <samcv> i think having warnings is going to far, but we could heavily tout it in the docs and mention the `returns` as an aside because people will encounter that reading existing code

[04:47] <geekosaur> I perso ally prefer returns because it stands out more

[04:47] <geekosaur> the --> is buried

[04:47] <samcv> yeah i think so too

[09:40] <lizmat> samcv: && and 'and' are *not* the same, they have differente precedence

[09:40] <samcv> yeah i know that

[09:40] <samcv> but they're mostly the same

[09:41] <samcv> you put returns and --> in different locations, so they aren't identical either syntatically. so i thought it was a not terrible comparison

[09:41] <lizmat> m: say .prec<prec> for &[&&],&[and]

[09:41] <camelia> rakudo-moar b19df9: OUTPUT: «l=␤d=␤»

[09:42] <samcv> so high letter is high prec

[09:42] <samcv> d sounds pretty low

[09:42] <lizmat> yeah

[09:42] <samcv> m: say .prec<prec>.uc for &[&&],&[and]

[09:42] <camelia> rakudo-moar b19df9: OUTPUT: «L=␤D=␤»

[09:43] <lizmat> m: sub a() returns Int {}; dd &a.signature   # appears to set the signature

[09:43] <camelia> rakudo-moar b19df9: OUTPUT: «:( --> Int)␤»

[09:44] <lizmat> I think TimToady wants to get rid of "returns" because it is more verbose, and its visual position in the code may make it seem like it is part of the Block, rather than part of the Signature of the Block

[09:45] <masak> at least at some point, `-->` and `returns` were slightly different semantically

[09:50] <samcv> hmm, i always asumed it was not part of the block and was a part of the rest of the signature

[09:51] <samcv> since putting it inside the parens just looks kind of ugly and visually more work to look at

[09:58] <Geth> ¦ rakudo: vendethiel++ created pull request #1038: update name in CREDITS file

[09:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1038

[10:00] <Geth> ¦ rakudo/nom: 7380215fc5 | ven++ | CREDITS

[10:00] <Geth> ¦ rakudo/nom: update name in CREDITS file

[10:00] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7380215fc5

[10:00] <Geth> ¦ rakudo/nom: cc9192f225 | lizmat++ | CREDITS

[10:00] <Geth> ¦ rakudo/nom: Merge pull request #1038 from vendethiel/patch-1

[10:00] <Geth> ¦ rakudo/nom:

[10:00] <Geth> ¦ rakudo/nom: update name in CREDITS file

[10:00] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cc9192f225

[10:12] <IOninja> fwiw, even right now returns doesn't do all the things --> can

[10:12] <IOninja> m: sub (--> -42) {}().say

[10:12] <camelia> rakudo-moar cc9192: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed return value␤at <tmp>:1␤------> 3sub (-->7⏏5 -42) {}().say␤»

[10:12] <IOninja> uuh

[10:12] <moritz> m: sub (--> 42) {}().say

[10:12] <camelia> rakudo-moar cc9192: OUTPUT: «42␤»

[10:12] <IOninja> Nevermind. I thought that worked /o\

[10:12] <moritz> works only for simple literals, not expressions

[10:12] <moritz> m: sub () returns 42  {}().say

[10:12] <camelia> rakudo-moar cc9192: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed trait␤at <tmp>:1␤------> 3sub () returns7⏏5 42  {}().say␤»

[10:13] <moritz> m: sub () returns Int  {}().say

[10:13] <samcv> interesting

[10:13] <IOninja> It's supposed to work for -42 too

[10:13] <camelia> rakudo-moar cc9192: OUTPUT: «Nil␤»

[10:13] <IOninja> But yeah, at least returns 42 don't work. So I was right :)

[10:19] <samcv> i can't find the source for sym

[10:19] <samcv> oh wait hold on. need to up my regex game. but if anybody knows where <sym> token is

[10:19] <jnthn> The thing that implements <sym> to match whatever's in the :sym<foo>?

[10:20] <samcv> yeah

[10:20] <jnthn> Probably handled in P6RegexActions somewhere in an assertion action method

[10:20] <samcv> token quote_mod:sym<w>  { <sym> }

[10:20] <jnthn> yup: https://github.com/perl6/nqp/blob/master/src/QRegex/P6Regex/Actions.nqp#L559

[10:20] <samcv> from Grammar.nqp

[10:21] <samcv> thx jnthn

[10:21] <jnthn> It's just rewritten at compile time

[10:21] <samcv> ah

[10:21] <jnthn> Into $<sym>=[w]

[10:21] <jnthn> Or some such

[10:21] <jnthn> Well, same AST that'd be produced

[10:21] <liAealneDx> NeuralAnomaly: status

[10:21] <NeuralAnomaly> liAealneDx, [✘] Next release will be in 2 days and 18 hours. Since last release, there are 57 new still-open tickets (2 unreviewed and 0 blockers) and 5 unreviewed commits. See http://perl6.fail/release/stats for details

[10:21] <samcv> is that because it happens too early in the setting?

[10:22] <jnthn> Think just because it's the most sensible place to implement it :)

[10:23] <jnthn> It's meant to be declarative

[10:23] <jnthn> So it needs to be handled then

[10:23] <jnthn> Rather than introspection at runtime

[10:24] <jnthn> (Which would also be really slow, though it's the declarative aspect that means it really has to be resolved at compile time)

[10:51] <Geth> ¦ rakudo/nom: 47a2a425dd | (Elizabeth Mattijsen)++ | 26 files

[10:51] <Geth> ¦ rakudo/nom: Eradicate returns in favour of -->

[10:51] <Geth> ¦ rakudo/nom:

[10:51] <Geth> ¦ rakudo/nom: Since there is talk of deprecating the "returns" syntax, I thought

[10:51] <Geth> ¦ rakudo/nom: it would be a good idea to see what would happen if we did this to

[10:51] <Geth> ¦ rakudo/nom: the setting.

[10:51] <Geth> ¦ rakudo/nom:

[10:51] <Geth> ¦ rakudo/nom: This spectests clean.  Please revert if considered too close to the

[10:51] <Geth> ¦ rakudo/nom: release.

[10:51] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/47a2a425dd

[10:52] <lizmat> jnthn: re "nqp::semtryacquire(self) ?? True !! False", any reason you didn't use nqp::p6bool() there ?

[10:52] <lizmat> hmmm... timotimo ^^^  :-)

[10:53] <lizmat> fwiw, I've seen a lot of signatures claiming to e.g. return Int rather than Int:D

[10:53] <lizmat> when clearly Int:D was intented

[10:53] <lizmat> *intended

[10:54] <lizmat> .oO( too much int in that lne )

[10:54] <samcv> lizmat, type checking will just fail right?

[10:55] <lizmat> it won't fail if it returns a type object by some chance

[10:55] <samcv> i mean it would only not return defined if a problem happenend in it right, or is there something i don't know about smiliey

[10:55] <lizmat> otherwise it will fail as expected

[10:55] <samcv> yeah

[10:56] <lizmat> I think most of those signatures predate :D and :U as typecheck options

[10:56] <samcv> can you coerce that way?

[10:56] <samcv> m: sub thing ($blah --> Cool (Str)) { return 10 }; say thing('hi')

[10:56] <camelia> rakudo-moar cc9192: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Type 'Cool' is not declared. Did you mean 'Bool'?␤at <tmp>:1␤------> 3sub thing ($blah --> Cool7⏏5 (Str)) { return 10 }; say thing('hi')␤»

[10:56] <samcv> heh and when you try Bool it says Bool isn't declared did you mean Cool

[10:56] <samcv> m: sub thing ($blah --> Bool (Str)) { return 10 }; say thing('hi')

[10:56] <camelia> rakudo-moar cc9192: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Type 'Bool' is not declared. Did you mean 'Cool'?␤at <tmp>:1␤------> 3sub thing ($blah --> Bool7⏏5 (Str)) { return 10 }; say thing('hi')␤»

[10:57] <lizmat> weird

[10:58] <IOninja> m: sub thing ($blah --> Str(Cool)) { return 10 }; say thing('hi')

[10:58] <camelia> rakudo-moar cc9192: OUTPUT: «10␤»

[10:58] <IOninja> no space; and the thing to coerce from goes inside

[10:58] <samcv> ah thx IOninja

[10:58] <lizmat> http://okmij.org/ftp/papers/LogicT.pdf  # masak jnthn TimToady might be interested ?

[11:01] <samcv> m: sub thing (Str(Mu) $var --> Int(Mu) ) { $var  }; thing(10).WHAT.say

[11:01] <camelia> rakudo-moar cc9192: OUTPUT: «Unable to coerce the return value from Mu to Int; no coercion method defined␤  in sub thing at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:01] <samcv> m: sub thing (Str(Mu) $var --> Int(Cool) ) { $var  }; thing(10).WHAT.say

[11:01] <camelia> rakudo-moar cc9192: OUTPUT: «Unable to coerce the return value from Cool to Int; no coercion method defined␤  in sub thing at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[11:01] <samcv> m: sub thing (Str(Mu) $var --> Str(Cool) ) { $var; 10  }; thing(10).WHAT.say

[11:01] <camelia> rakudo-moar cc9192: OUTPUT: «WARNINGS for <tmp>:␤Useless use of $var in sink context (line 1)␤(Str)␤»

[11:01] <samcv> well at least it works for some things

[12:00] <brrt> .ask nine if he had any plans on going to polyconf

[12:00] <yoleaux2> brrt: I'll pass your message to nine.

[12:05] <IOninja> m: sub thing (Str() $var --> Int(Str) ) { $var  }; thing(10).WHAT.say

[12:05] <camelia> rakudo-moar 47a2a4: OUTPUT: «Unable to coerce the return value from Str to Int; no coercion method defined␤  in sub thing at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[12:05] <IOninja> m: sub thing (Str(Int) $var --> Int(Str) ) { $var  }; thing(10).WHAT.say

[12:05] <camelia> rakudo-moar 47a2a4: OUTPUT: «(Int)␤»

[12:06] <IOninja> well-weird

[12:07] <brrt> so, i think it may be a good idea to give a talk at yapc::eu^W the european perl conference

[12:07] <brrt> but i'm wondering if everybody isn't already quite bored with it

[12:08] <DrForr> Bored with the conference? With the talk?

[12:09] <brrt> with my potential talk topics, which is quite a narrow speciality

[12:10] <DrForr> Well, I submitted "Notes from the Trenches" (what I did at FOSDEM), a new one on Machine Learning and either a full day or 2-hour "intro" course.

[12:11] <brrt> hmmm

[12:12] <DrForr> And by "new" I mean I'm not sure if it's possible to do it yet :)

[12:13] <Geth> ¦ rakudo/nom: 85743228e0 | (Elizabeth Mattijsen)++ | 41 files

[12:13] <Geth> ¦ rakudo/nom: Add :D to return type where it was obviously intended

[12:13] <Geth> ¦ rakudo/nom:

[12:13] <Geth> ¦ rakudo/nom: Spectests clean, please revert if considered too close to release.

[12:13] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/85743228e0

[12:24] <IOninja> lizmat: FWIW the two changes in src/core/CompUnit/Handle.pm  have "# The EXPORTHOW package from the UNIT of the compilation unit; # a Stash type object if none." comments above them. Are those outdated?

[12:26] <lizmat> IOninja: feels more like a question you should ask ugexe nine   :-)

[12:26] <lizmat> I just looked at the code, not at its meaning  :-)

[12:32] <IOninja> .ask nine all the comments in this file say "return blah *type object* if none..." but all the codes return Nil. Is the code wrong or are the comments wrong? https://github.com/rakudo/rakudo/blob/nom/src/core/CompUnit/Handle.pm

[12:32] <yoleaux2> IOninja: I'll pass your message to nine.

[12:43] * lizmat will ba afk for a few hours at least

[13:32] <Geth> ¦ roast: b4d4df1e09 | (Zoffix Znet)++ | S03-operators/ternary.t

[13:32] <Geth> ¦ roast: Remove tests for ⁇ ‼

[13:32] <Geth> ¦ roast:

[13:32] <Geth> ¦ roast: See https://rt.perl.org/Ticket/Display.html?id=131002

[13:32] <Geth> ¦ roast:

[13:32] <Geth> ¦ roast: The tests were added recently and are not part of 6.c-errata

[13:32] <Geth> ¦ roast:

[13:32] <Geth> ¦ roast: This reverts commit b8965869d22f2e24a41aa5c10eef81563cf9d888.

[13:32] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b4d4df1e09

[13:53] <IOninja> ZOFVM: Files=1228, Tests=132839, 132 wallclock secs (22.20 usr  3.48 sys + 2504.87 cusr 294.97 csys = 2825.52 CPU)

[13:53] <Geth> ¦ rakudo/nom: 9644fc360f | (Zoffix Znet)++ | src/Perl6/Grammar.nqp

[13:53] <Geth> ¦ rakudo/nom: Remove ⁇‼ Unicode ternary operator

[13:53] <Geth> ¦ rakudo/nom:

[13:53] <Geth> ¦ rakudo/nom: See https://rt.perl.org/Ticket/Display.html?id=131002

[13:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9644fc360f

[14:01] <ugexe> IOninja: the comments are outdated yes. See: https://github.com/rakudo/rakudo/commit/887c937d1d673ae5a4a0412d1d5d83d33da89c70#diff-edc75bf105ac8530506de08e7310208e

[14:10] <Geth> ¦ rakudo/nom: e1357ac6c3 | (Zoffix Znet)++ | src/core/CompUnit/Handle.pm

[14:10] <Geth> ¦ rakudo/nom: Update info in the comments to match reality

[14:10] <Geth> ¦ rakudo/nom:

[14:10] <Geth> ¦ rakudo/nom: Code switched to use Nil in

[14:10] <Geth> ¦ rakudo/nom: https://github.com/rakudo/rakudo/commit/​887c937d1d673ae5a4

[14:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e1357ac6c3

[14:10] <IOninja> ugexe: thanks

[14:10] <IOninja> .tell nine never mind. ugexe++ found the answer in https://github.com/rakudo/rakudo/commit/​887c937d1d673ae5a4 and I updated the comments

[14:10] <yoleaux2> IOninja: I'll pass your message to nine.

[16:02] <timotimo> one thing i never thought about: p6bool can be speshed (because we have hooks for spesh in extops) but not jitted (because these hooks will only be available once even-more-jit is merged and that feature is added)

[16:22] <lizmat> timotimo: so that implies that p6bool should not be used in hot code paths ?

[16:23] <timotimo> good question

[16:23] <timotimo> if the ternary operator is much more expensive than turning the whole thing into an interpreted frame ... it could be the other way around

[16:23] <timotimo> without measurements, i really can't say

[16:28] <lizmat> preliminary tests: nqp::p6bool is about 2.3x slower

[16:29] <IOninja> that ?? !! ?

[16:29] <IOninja> *than

[16:29] <lizmat> m: my int $a; for ^1000000 { my $ = $a ?? True !! False }; say now - INIT now

[16:29] <camelia> rakudo-moar e1357a: OUTPUT: «0.53784421␤»

[16:29] <lizmat> m: use nqp; my int $a; for ^1000000 { my $ = nqp::p6bool($a) }; say now - INIT now

[16:29] <camelia> rakudo-moar e1357a: OUTPUT: «0.6436974␤»

[16:30] <timotimo> okay, but the bigger that frame gets, the stronger the benefit of jitting the whole thing, maybe?

[16:30] <timotimo> so yeah, in really tight loops it's probably better to use the ternary

[16:30] <lizmat> that's so counter-intuitive  :-)

[16:31] <timotimo> thinking about it a little bit more, we can probably provide a hook for extops to get "simple" jitting going

[16:31] <timotimo> p6bool is a very simple function call, after all

[16:32] <timotimo> we wouldn't have to make moar's minilua + dasc-to-c pipeline available that way

[16:32] <lizmat> we got 222 occurrences in the setting of p6bool  :-(

[16:32] <timotimo> that sounds like it'd be a lot more work to convert all of these properly than it would be to make the simple jit extendable

[16:32] <lizmat> feels like it  :-)

[16:33] <lizmat> OTOH, it would improve readability of the setting  :-)

[16:33] <timotimo> well, when p6bool is jitted it might be a whole lot cheaper

[16:33] <lizmat> I mean, would that improve  it beyond ?? True !! False ?

[16:33] <timotimo> when it's exprjit-jitted it'll be a bit faster still

[16:33] <timotimo> no clue :<

[16:36] <timotimo> of course, adding a piece of API from moarvm that is to be used from rakudo requires a little bit of compatibility-checking or what have you

[16:37] <brrt> let me think about that for a bit

[16:37] * timotimo investigates further

[16:38] <timotimo> oh yeah, it totally gets jitted already

[16:38] <brrt> yea

[16:38] <brrt> but

[16:38] <brrt> that's not a very good JIT, i'd add

[17:13] <Geth> ¦ roast: FCO++ created pull request #252: Fix test for #130998

[17:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/252

[17:13] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130998

[17:13] <Geth> ¦ rakudo: FCO++ created pull request #1039: Fix #130998

[17:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1039

[17:13] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130998

[17:22] <Geth> ¦ rakudo/nom: f94a2c734b | (Timo Paulssen)++ | src/vm/moar/Perl6/Ops.nqp

[17:22] <Geth> ¦ rakudo/nom: make p6bool aware of lexicalref, improving perf with natives

[17:22] <Geth> ¦ rakudo/nom:

[17:22] <Geth> ¦ rakudo/nom: ought to close the performance gap between ?? !! and p6bool op.

[17:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f94a2c734b

[18:36] <Geth> ¦ rakudo/nom: 3de5fb24c9 | (Zoffix Znet)++ | src/core/Bool.pm

[18:36] <Geth> ¦ rakudo/nom: Fix crash on Bool:U.Str

[18:36] <Geth> ¦ rakudo/nom:

[18:36] <Geth> ¦ rakudo/nom: Do not add the proto, as that shadows the Mu.Str one that

[18:36] <Geth> ¦ rakudo/nom: handles the :U case for us.

[18:36] <Geth> ¦ rakudo/nom:

[18:36] <Geth> ¦ rakudo/nom: Part of fixing RT #130867

[18:36] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130867

[18:36] <Geth> ¦ rakudo/nom: https://rt.perl.org/Ticket/Display.html?id=130867

[18:36] <Geth> ¦ rakudo/nom:

[18:36] <Geth> ¦ rakudo/nom: Several other methods being added in the same code area are an issue

[18:36] <Geth> ¦ rakudo/nom: as well, but when I tried to remove a chunk of them, I got compilation

[18:36] <Geth> ¦ rakudo/nom: failures with Numeric...

[18:36] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3de5fb24c9

[18:38] <Geth> ¦ roast: de5f00b909 | (Zoffix Znet)++ | S02-types/bool.t

[18:38] <Geth> ¦ roast: Test Bool:U.Str does not crash

[18:38] <Geth> ¦ roast:

[18:38] <Geth> ¦ roast: RT #130867: https://rt.perl.org/rt3//Public/Bug/Display.html?id=130867

[18:38] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/3de5fb24c9

[18:38] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130867

[18:38] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/de5f00b909

[20:02] <Geth> ¦ rakudo/nom: e1ebb503c6 | (Fernando Correa)++ | src/Perl6/Grammar.nqp

[20:02] <Geth> ¦ rakudo/nom: Fix #130998

[20:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e1ebb503c6

[20:02] <Geth> ¦ rakudo/nom: ee0b6d173c | lizmat++ | src/Perl6/Grammar.nqp

[20:02] <Geth> ¦ rakudo/nom: Merge pull request #1039 from FCO/fix-130998

[20:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130998

[20:02] <Geth> ¦ rakudo/nom:

[20:02] <Geth> ¦ rakudo/nom: Fix #130998

[20:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130998

[20:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ee0b6d173c

[20:16] <lizmat> hmmm... seems we have a spectest error in integration/weird-errors.t, last test

[20:16] <Geth> ¦ roast: 1674c23c9b | (Fernando Correa de Oliveira)++ | integration/weird-errors.t

[20:16] <Geth> ¦ roast: Fix test for #130998 (#252)

[20:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1674c23c9b

[20:16] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130998

[20:17] <IOninja> lizmat, ^ that should fix it

[20:18] <IOninja> it was a bad test that was accidentally testing a buggy result and SmokeMachine++ just fixed that bug in the PR you merged

[20:25] <lizmat> IOninja: oki

[22:09] <timotimo> IOninja: i'm glad you're trusting JSON::Fast to handle data from the wide internets

[22:10] <timotimo> how do you come up with your version numbers? :)

[22:19] <timotimo> maybe i'll be able to figure out the memory hogging thing of JSON::Fast that whateverable found

[22:32] <timotimo> i wonder if i should change the description of json::fast

[22:32] <timotimo> a naive imperative json parser in perl6, to evaluate performance against JSON::Tiny Edit

[22:32] <timotimo> Add topics

[22:32] <timotimo> oops

[22:56] <Geth> ¦ roast: FCO++ created pull request #253: Test for 130998

[22:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/253

[23:01] <Geth> ¦ roast: 79e9f56c6f | (Fernando Correa)++ | integration/weird-errors.t

[23:01] <Geth> ¦ roast: Fix test for #130998

[23:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/79e9f56c6f

[23:01] <Geth> ¦ roast: 156f15d686 | (Fernando Correa)++ | S13-overloading/metaoperators.t

[23:01] <Geth> ¦ roast: Add test for #130998

[23:01] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130998

[23:01] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130998

[23:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/156f15d686

[23:01] <Geth> ¦ roast: c337a9534b | lizmat++ | S13-overloading/metaoperators.t

[23:01] <Geth> ¦ roast: Merge pull request #253 from FCO/test-for-130998

[23:01] <Geth> ¦ roast:

[23:01] <Geth> ¦ roast: Test for 130998

[23:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c337a9534b

[23:02] <IOninja> timotimo: I use semver and start at 1.001001 unless it's a big project that needs thinking and then I start at 0.001001

[23:02] <timotimo> OK

[23:02] <timotimo> but we allow you to use as many . as you need

[23:05] <IOninja> I like normal numbers.

[23:05] <Geth> ¦ nqp: c710edc313 | (Samantha McVey)++ | tools/build/MOAR_REVISION

[23:05] <Geth> ¦ nqp: Bump MoarVM to get new indexic op

[23:05] <Geth> ¦ nqp:

[23:05] <Geth> ¦ nqp: MoarVM commits pulled in by this bump:

[23:05] <Geth> ¦ nqp: 6954d203 Merge pull request #550 from samcv/indexic_s

[23:05] <Geth> ¦ nqp: e05f3960 Use MVMROOT to make sure we don't GC haystack or needle

[23:05] <Geth> ¦ nqp: 1a5ee0da Add indexic_s Op, calls MVM_string_index_ignore_case

[23:05] <Geth> ¦ nqp: 9ac53146 Set update_ops.p6 as executable and add perl6 shebang

[23:05] <Geth> ¦ nqp: <…commit message has 5 more lines…>

[23:05] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c710edc313

[23:05] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.02-38-g58457845...2017.02-47-g6954d203

[23:05] <Geth> ¦ nqp: 19c1885fce | (Samantha McVey)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[23:05] <Geth> ¦ nqp: Add indexic op to QASTOperationsMAST.nqp

[23:05] <Geth> ¦ nqp:

[23:05] <Geth> ¦ nqp: This op has the same arguments and functionality as nqp::index,

[23:05] <Geth> ¦ nqp: except it is case-insensitive. For now we only have it under MoarVM,

[23:05] <Geth> ¦ nqp: but the plan is to support it on other platforms as well.

[23:06] <Geth> ¦ nqp:

[23:06] <Geth> ¦ nqp: On MoarVM uses proper Unicode foldcase type comparison.

[23:06] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/19c1885fce

[23:06] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.02-38-g58457845...2017.02-47-g6954d203

[23:06] <samcv> IOninja, Geth is best :)

[23:11] <Geth> ¦ nqp: bcfb6e5b04 | (Samantha McVey)++ | docs/ops.markdown

[23:11] <Geth> ¦ nqp: Add indexic op to ops.markdown documentation

[23:11] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/bcfb6e5b04
