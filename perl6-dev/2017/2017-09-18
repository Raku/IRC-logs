[00:13] * AlexDaniel has the release ready locally, now is double-checking everything

[00:19] <AlexDaniel> looks alright

[00:22] <AlexDaniel> let's go!

[00:25] * AlexDaniel …

[00:28] <AlexDaniel> let's go! # №2

[00:29] <Geth> ¦ nqp: 4a3a35cbf9 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[00:29] <Geth> ¦ nqp: [release] Bump MoarVM revision to 2017.09.1

[00:29] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/4a3a35cbf9

[00:29] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.09-2-g0f59f0cf...2017.09.1

[00:29] <Geth> ¦ nqp: 13ddad3dbb | (Aleks-Daniel Jakimenko-Aleksejev)++ | VERSION

[00:29] <Geth> ¦ nqp: [release] Bump VERSION to 2017.09

[00:29] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/13ddad3dbb

[00:29] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.09-2-g0f59f0cf...2017.09.1

[00:29] <Geth> ¦ rakudo/nom: b4ba33af43 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[00:29] <Geth> ¦ rakudo/nom: [release] Bump NQP revision to 2017.09

[00:29] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b4ba33af43

[00:29] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.08-76-g1fd30a896...2017.09

[00:29] <Geth> ¦ rakudo/nom: ce12e48031 | (Aleks-Daniel Jakimenko-Aleksejev)++ | VERSION

[00:29] <Geth> ¦ rakudo/nom: [release] Bump VERSION to 2017.09

[00:29] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ce12e48031

[00:29] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.08-76-g1fd30a896...2017.09

[01:17] <Geth> ¦ roast: skids++ created pull request #323: Rt126890

[01:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/323

[01:17] <Geth> ¦ roast: 56ec035996 | skids++ | S02-literals/pairs.t

[01:17] <Geth> ¦ roast: Add test for RT#126890

[01:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/56ec035996

[01:17] <Geth> ¦ roast: 614621d9e7 | skids++ | 4 files

[01:17] <Geth> ¦ roast: Update some links in roast comments.

[01:17] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126890

[01:17] <Geth> ¦ roast:

[01:17] <Geth> ¦ roast: The colabti.de links were not just dead but had been squatted.

[01:17] <Geth> ¦ roast:   Suggest a search of all project trees to eliminate any more.

[01:17] <Geth> ¦ roast:

[01:17] <Geth> ¦ roast:   Also, update comments on boolean pair syntax to match S02 changes

[01:17] <Geth> ¦ roast:   made back in 2009.

[01:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/614621d9e7

[01:17] <Geth> ¦ roast: 10f7c115b6 | skids++ (committed using GitHub Web editor) | 4 files

[01:18] <Geth> ¦ roast: Merge pull request #323 from skids/rt126890

[01:18] <Geth> ¦ roast:

[01:18] <Geth> ¦ roast: Rt126890

[01:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/10f7c115b6

[01:29] <travis-ci> Rakudo build failed. Aleks-Daniel Jakimenko-Aleksejev '[release] Bump VERSION to 2017.09'

[01:29] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/276659273 https://github.com/rakudo/rakudo/compare/8b05c34ac7dd...ce12e480316e

[01:29] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[01:32] <MasterDuke> ^^^ segv when building NQP https://travis-ci.org/rakudo/rakudo/jobs/276659274

[01:33] <MasterDuke> just one of the configurations though

[05:36] <japhb> .ask AlexDaniel Why does Geth report "version bump brought these changes" when bumping the repo's version, rather than the file indicating its *dependency's* version?

[05:36] <yoleaux> japhb: I'll pass your message to AlexDaniel.

[05:52] <geekosaur> isn't the point to allow someone doing a bisect that hits that commit to see what changes in the dependency might be involved, since those changes are not in the dependent's commit history otherwise?

[05:52] <geekosaur> oh, I see. I think what happens is what you want for all but rakudo's own version?

[05:53] <geekosaur> see b4ba33af43

[05:53] <geekosaur> but I don't think geth can track whether a given revision file refers to the current or some other repo

[05:53] <geekosaur> because it's not repo metadata but build metadata

[05:55] <geekosaur> so you get extraneous output for some revision files but the info you need is present for the revision files that need it

[06:28] <Geth> ¦ rakudo: Gnouc++ created pull request #1162: Add trim* subroutines for Cool instance

[06:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1162

[06:28] <Geth> ¦ roast: Gnouc++ created pull request #324: Add tests for trim* subroutines on Cool instance

[06:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/324

[06:40] <[Tux]> This is Rakudo version 2017.09 built on MoarVM version 2017.09.1

[06:40] <[Tux]> csv-ip5xs        1.351 -  1.365

[06:40] <[Tux]> test             9.861 -  9.901

[06:40] <[Tux]> test-t           3.406 -  3.426

[06:40] <[Tux]> csv-parser      10.818 - 11.066

[08:41] <jnthn> morning, #perl6-dev

[08:42] <jnthn> So, we had a release? :)

[08:47] <jnthn> Looks like. Thus...I can merge le new scheduler

[08:50] <lizmat> Files=1227, Tests=75076, 295 wallclock secs (14.58 usr  5.25 sys + 1995.80 cusr 207.07 csys = 2222.70 CPU)

[09:09] <Geth> ¦ rakudo/nom: 14 commits pushed by (Jonathan Worthington)++

[09:09] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/compare/ce12e48031...61a77e60a7

[09:09] <jnthn> There we go.

[09:11] <jnthn> That deals with RT #122709, RT #130370, and perhaps makes enough of a dent in RT #131915 to be happy too

[09:11] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=122709

[09:11] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130370

[09:11] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131915

[09:31] <cuonglm> jnthn: How do you think about this PR https://github.com/rakudo/rakudo/pull/1162#issuecomment-330166633

[09:34] <jnthn> I suspect doing .Stringy inside of the Cool candidate would be preferable from a performance perspective

[09:34] <cuonglm> jnthn: But we already have `trim` for `Cool`, which actually call .Stringy.trim

[09:35] <cuonglm> if anything changed, we have to make changes in 2 places

[09:35] <jnthn> Yeah, but it creates a slightly shallower call graph

[09:35] <jnthn> Probably not a big difference though

[09:36] <jnthn> But if we're going to do that then there's no reason to duplicate the candidate for Cool and Str

[09:36] <jnthn> Just change the existing thing to be Cool and be done with it

[09:37] <jnthn> Otherwise if anything changed, we have to make changes in 2 places :P

[09:39] <cuonglm> jnthn: Hmm, no 2 places in this case, because Cool is Stringy first, so we only have to change in `trim*` methods, not subroutines

[09:39] <cuonglm> From user perspective, `trim*` variants are dedicated for string

[09:40] <jnthn> Yeah, but it's still duplicate code, and it's not like multi is totally free

[09:41] <cuonglm> jnthn: yep, so we will go with Cool for `trim*` subroutines

[09:41] <jnthn> Works fine for me

[09:41] <cuonglm> so the document must change, too :)

[09:42] <cuonglm> Oh, I see no documentation for `trim*` subroutine yet

[09:43] <cuonglm> jnthn: Another problem, do you have any suggestion for fixing this issue

[09:43] <cuonglm> m: my @a is default(0) = 1...*; @a[1]:delete; dd @a[1]:exists; dd @a

[09:43] <camelia> rakudo-moar 61a77e: OUTPUT: «Bool::True␤Array @a = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10... lazy list)␤»

[09:44] <cuonglm> I made some changes to Array `DELETE-POS` method with no luck

[09:44] <cuonglm> not sure what did I missed

[09:52] <jnthn> It seems to be assuming that if we didn't reify that many elems, they won't exist

[09:53] <jnthn> Which isn't actually tree

[09:53] <jnthn> *true

[09:53] <jnthn> In the lazy case

[09:56] <cuonglm> Hmm, I try to reify in DELETE-POS but it isn't work

[09:56] <cuonglm> In the lazy case, does this condition true https://github.com/rakudo/rakudo/blob/nom/src/core/Array.pm#L593

[09:57] <jnthn> Not always; if nothing was reified yet, for example, may not be

[09:57] <cuonglm> I guess it's false, because this print 0

[09:57] <cuonglm> m: my @a is default(0) = 1...*; dd @a[1]:delete; dd @a[1]:exists; dd @a

[09:57] <camelia> rakudo-moar 61a77e: OUTPUT: «0␤Bool::True␤Array @a = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10... lazy list)␤»

[09:58] <cuonglm> Hmm, so I think a check if array is lazy, then reify it first is ok, how do you think?

[09:59] <jnthn> Yeah, I think reify it up to and including the element we'll delete

[09:59] <jnthn> I think $!todo will be always set if there's unreified things

[09:59] <jnthn> So that's probably the cheap thing to check

[10:00] <cuonglm> thanks +1, let me try it

[10:03] <Geth> ¦ rakudo/nom: 48406db639 | (Elizabeth Mattijsen)++ | src/core/Encoding/Registry.pm

[10:03] <Geth> ¦ rakudo/nom: Streamline registering an encoding

[10:03] <Geth> ¦ rakudo/nom:

[10:03] <Geth> ¦ rakudo/nom: Not much for something that only needs to be done once, you might

[10:03] <Geth> ¦ rakudo/nom: argue.  But we're doing *7* of these at *every* perl6 startup.

[10:03] <Geth> ¦ rakudo/nom: This shaves 1-2 milliseconds off of each perl6 startup.

[10:03] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/48406db639

[10:11] <Geth> ¦ rakudo/nom: 4 commits pushed by (Cuong Manh Le)++, lizmat++

[10:11] <Geth> ¦ rakudo/nom: 5a19dffa07 | Add trim* subroutines for Cool instance

[10:11] <Geth> ¦ rakudo/nom: 691f8b7b18 | Remove un-necessary call to Stringy

[10:11] <Geth> ¦ rakudo/nom: e01e5bc387 | Cleanup trim* subroutines

[10:11] <Geth> ¦ rakudo/nom: 9190a3b80c | Merge pull request #1162 from Gnouc/nom

[10:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/compare/48406db639...9190a3b80c

[10:30] <travis-ci> Rakudo build failed. Jonathan Worthington 'Merge branch 'better-sched' into nom'

[10:30] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/276765863 https://github.com/rakudo/rakudo/compare/ce12e480316e...61a77e60a7d9

[10:30] <buggable> [travis build above] ✓ All failures are due to timeout (0), missing build log (0), GitHub connectivity (0), or failed make test (3). Across all jobs, only t/04-nativecall/21-callback-other-thread.t test file failed.

[10:30] <jnthn> Hmm

[10:37] <lizmat> timeouts, jnthn , no worries  :-)

[10:38] <jnthn> ah, ok

[10:49] <Geth> ¦ roast: c1d8794b82 | (Cuong Manh Le)++ (committed by Zoffix Znet) | S32-str/trim.t

[10:49] <Geth> ¦ roast: Add tests for trim* subroutines on Cool instance (#324)

[10:49] <Geth> ¦ roast:

[10:49] <Geth> ¦ roast: * Add tests for trim* subroutines on Cool instance

[10:49] <Geth> ¦ roast:

[10:49] <Geth> ¦ roast: * Test trim* with Int make more sense

[10:49] <Geth> ¦ roast:

[10:49] <Geth> ¦ roast: * Using IO::Path for testing trim* routines

[10:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c1d8794b82

[10:50] <Zoffix> Nah, it's t/04-nativecall/21-callback-other-thread.t test file failed

[10:51] <Zoffix> Though I seen it flop recently

[10:51] <Zoffix> Though now it's 3 jobs that have the same failure

[10:52] <jnthn> urgh

[10:52] <Zoffix> The bot's message is "✓ All failures are due to" (timeout => 0, "missing build log" => 0, "GitHub connectivity" => 0, "or failed make test" => 3) with the number showing how many jobs had such a failure

[10:52] <jnthn> Not sure why failing make test requires a tick

[10:53] <jnthn> I saw the tick and totally ignored the rest :)

[11:16] <Geth> ¦ roast: 8b5e390937 | (Jonathan Worthington)++ | S17-promise/lock-async.t

[11:16] <Geth> ¦ roast: Add tests for Lock::Async

[11:16] <Geth> ¦ roast:

[11:16] <Geth> ¦ roast: A non-blocking mechanism for mutual exclusion soon to be added into

[11:16] <Geth> ¦ roast: Rakudo, most immediately for Supply internals but it's a useful thing

[11:16] <Geth> ¦ roast: to make available to users also.

[11:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8b5e390937

[11:17] <Geth> ¦ rakudo/supply-locking-refactor: 53dd776c9a | (Jonathan Worthington)++ | 2 files

[11:17] <Geth> ¦ rakudo/supply-locking-refactor: Add Lock::Async

[11:17] <Geth> ¦ rakudo/supply-locking-refactor:

[11:17] <Geth> ¦ rakudo/supply-locking-refactor: Which will be used in order to do concurrency control in a more

[11:17] <Geth> ¦ rakudo/supply-locking-refactor: scalable way for supplies.

[11:17] <Geth> ¦ rakudo/supply-locking-refactor: review: https://github.com/rakudo/rakudo/commit/53dd776c9a

[11:17] <Geth> ¦ rakudo/supply-locking-refactor: 4a8038c295 | (Jonathan Worthington)++ | src/core/Supply.pm

[11:17] <Geth> ¦ rakudo/supply-locking-refactor: Start using Lock::Async in some Supply internals

[11:17] <Geth> ¦ rakudo/supply-locking-refactor:

[11:17] <Geth> ¦ rakudo/supply-locking-refactor: No regressions in stresstest from this, which is a promising sign.

[11:17] <Geth> ¦ rakudo/supply-locking-refactor: review: https://github.com/rakudo/rakudo/commit/4a8038c295

[11:17] <Geth> ¦ rakudo/supply-locking-refactor: 0ffff8596c | (Jonathan Worthington)++ | t/spectest.data

[11:17] <Geth> ¦ rakudo/supply-locking-refactor: Run S17-promise/lock-async.t

[11:17] <Geth> ¦ rakudo/supply-locking-refactor: review: https://github.com/rakudo/rakudo/commit/0ffff8596c

[11:18] <AelxDnaiel> buggable: bugs

[11:18] <buggable> AelxDnaiel, Total: 1684; BUG: 1079; UNTAGGED: 398; LTA: 180; NYI: 96; REGEX: 69; RFC: 61; TESTNEEDED: 56; JVM: 53; CONC: 50; REGRESSION: 38; UNI: 29; PERF: 28; SEGV: 26; @LARRY: 23; IO: 23; NATIVECALL: 23; POD: 21; TODO: 18; PRECOMP: 14; OO: 13; BUILD: 11; TESTCOMMITTED: 10; OPTIMIZER: 9; STAR: 7; PARSER: 6; BOOTSTRAP: 5; REPL: 5; GLR: 4; MATH: 4; OSX: 4; WINDOWS: 3; RT: 2; WEIRD: 2; 

[11:19] <AelxDnaiel> buggable: tag untagged

[11:19] <buggable> AelxDnaiel, There are 398 tickets tagged with UNTAGGED; See http://fail.rakudo.party/t/UNTAGGED for details

[11:20] <AelxDnaiel> https://rt.perl.org/Public/Bug/Display.html?id=132114#ticket-history

[11:32] <jnthn> lunch &

[11:33] <Zoffix> jnthn: I added it when it was flopping in make test. I guess I could untick those failures now

[11:54] <tbrowder> .tell jnthn think there are possible future optimizations for ascii read by declaring the encoding?

[11:54] <yoleaux> tbrowder: I'll pass your message to jnthn.

[12:11] <Zoffix> hm, so much for making a small change in buggable. Restarting it made it use updated rakudo and now it dies with "===SORRY!===

[12:11] <Zoffix> Missing serialize REPR function for REPR VMException (BOOTException)"

[12:11] <Zoffix> No line number or even filename :/

[12:14] <AelxDnaiel> :|

[12:20] <Geth> ¦ rakudo/supply-locking-refactor: 85bdd38afa | (Jonathan Worthington)++ | 2 files

[12:20] <Geth> ¦ rakudo/supply-locking-refactor: Use Lock::Async in supply sequencer

[12:20] <Geth> ¦ rakudo/supply-locking-refactor: review: https://github.com/rakudo/rakudo/commit/85bdd38afa

[12:20] <jnthn> Should be able to give a filename for that, but there's no real way to race the point the problem occurs back to a line number

[12:20] <yoleaux> 11:54Z <tbrowder> jnthn: think there are possible future optimizations for ascii read by declaring the encoding?

[12:24] <jnthn> .tell tbrowder I think there are ways to squeeze a bit more out of it, both on the encode and encode paths, and especially so if we get it to better understand strings stored at 8-bit width

[12:24] <yoleaux> jnthn: I'll pass your message to tbrowder.

[12:24] <jnthn> s/race/trace/ about :)

[12:24] <jnthn> *above, grr

[12:26] <jnthn> m: say 0x7FFFFFFF * 0.001

[12:26] <camelia> rakudo-moar 9190a3: OUTPUT: «2147483.647␤»

[12:26] <jnthn> m: say (0x7FFFFFFF * 0.001) / 3600

[12:26] <camelia> rakudo-moar 9190a3: OUTPUT: «596.52323528␤»

[12:26] <jnthn> m: say ((0x7FFFFFFF * 0.001) / 3600) / 24

[12:26] <camelia> rakudo-moar 9190a3: OUTPUT: «24.855134803␤»

[12:26] <jnthn> Hmm.

[12:27] <jnthn> I guess a Perl 6 process could feasibly run for more than 25 days :)

[12:27] <jnthn> Quite a bit mor

[12:27] <jnthn> *more

[12:27] <Zoffix> huggable: uptime

[12:27] <huggable> Zoffix, nothing found

[12:27] * jnthn was wondering about using an atomicint for Supply.interval, but we can only be sure of 32 bits

[12:27] <Zoffix> Geth_: uptime

[12:27] <Geth_> Zoffix, 5 days, 20 hours, 14 minutes, and 30 seconds

[12:28] <jnthn> Note that you'd have to use Supply.interval at its maximum resolution

[12:28] <jnthn> (1ms ticks)

[12:28] <jnthn> So overflow it

[12:28] <jnthn> m: say ((0x7FFFFFFFFFFFFFFF * 0.001) / 3600) / 24

[12:28] <camelia> rakudo-moar 9190a3: OUTPUT: «106751991167.300645914␤»

[12:29] <jnthn> On 64-bit it's less of a problem ;-)

[12:29] <jnthn> m: say ((0x7FFFFFFFFFFFFFFF * 0.001) / 3600) / (365.25 * 24)

[12:29] <camelia> rakudo-moar 9190a3: OUTPUT: «292271023.045313198944␤»

[12:29] <jnthn> If somebody files a but in 292,271 millenia then somebody else can fix it :P

[12:30] <jnthn> *bug

[12:30] <jnthn> So the 64-bit case would be fine

[12:30] <Zoffix> :)

[12:30] * jnthn just switches interval to use Lock::Async for now

[12:31] <jnthn> I guess we could try and detect the size of an atomic int and decide which to use at runtime

[12:31] <jnthn> But probably not worth it for now

[12:35] <Zoffix> Well, I give up.

[12:36] <Zoffix> Commenting out a bunch of modules showed as if the /win lottery plugin was the issue, but commenting out just the lottery plugin while uncommenting other modules made it throw again

[12:37] <Zoffix> https://github.com/zoffixznet/perl6-buggable if anyone wants to give it a go.  perl6 bin/buggable.p6 dies with the aforementioned error

[12:37] * Zoffix &

[12:55] <Geth> ¦ rakudo/supply-locking-refactor: 388964020c | (Jonathan Worthington)++ | src/core/Supply.pm

[12:55] <Geth> ¦ rakudo/supply-locking-refactor: Use Lock::Async in Supply.interval

[12:55] <Geth> ¦ rakudo/supply-locking-refactor: review: https://github.com/rakudo/rakudo/commit/388964020c

[13:00] <jnthn> Nice, those changes seem to not only not break cro, but also increase the requests/second a bit too

[13:00] <jnthn> IO::Socket::Async::SSL tests also look good

[13:01] <jnthn> Seems there's some issues with a test I recently added though; will investigate that

[13:01] <jnthn> And those changes will utterly busticate JVM, so I should look into that also

[13:01] <AlexDaniel> he

[13:01] <yoleaux> 05:36Z <japhb> AlexDaniel: Why does Geth report "version bump brought these changes" when bumping the repo's version, rather than the file indicating its *dependency's* version?

[13:03] <AlexDaniel> japhb: hmmm… I don't understand the question

[13:03] <AlexDaniel> japhb: but perhaps consider creating an issue here https://github.com/perl6/geth/issues

[13:07] <Zoffix> .tell japhb Geth *does* report when bumping the deps file, but the URL it gives are to a list of changes in the dependant repo the bump brought in, not to the file with the change

[13:07] <yoleaux> Zoffix: I'll pass your message to japhb.

[13:13] <tbrowder> jnthn: i suppose using nativecall to access libc read funs

[13:13] <yoleaux> 12:24Z <jnthn> tbrowder: I think there are ways to squeeze a bit more out of it, both on the encode and encode paths, and especially so if we get it to better understand strings stored at 8-bit width

[13:14] <tbrowder> *funcs wouldn't pay off?

[13:15] <jnthn> Those are what we end up calling anyway to do the actual I/O, but that still gives a bunch of bytes that need checking if they really are ASCII (0 < c <= 127), and the \r\n turned into a single grapheme.

[13:16] <jnthn> I suspect an amount of the cost is in that last step

[13:16] <tbrowder> use a pragma to turn off some of that?

[13:17] <jnthn> Well, you can read latin-1 if you don't care about the range check :)

[13:18] <jnthn> And at some point we'll have the Uni type to decide to not care about NFG

[13:19] <tbrowder> thanks!

[13:19] <jnthn> Also, as spesh and the JIT continue to improve, the code from the Perl 6 pieces of it all will speed up some more too

[13:20] <jnthn> So there's some room to improve there

[13:20] <AlexDaniel> buggable: tags

[13:21] <buggable> AlexDaniel, Total: 1685; BUG: 1079; UNTAGGED: 398; LTA: 181; NYI: 96; REGEX: 69; RFC: 61; TESTNEEDED: 56; JVM: 53; CONC: 50; REGRESSION: 38; UNI: 29; PERF: 28; SEGV: 26; @LARRY: 23; IO: 23; NATIVECALL: 23; POD: 21; TODO: 18; PRECOMP: 14; OO: 13; BUILD: 11; TESTCOMMITTED: 10; OPTIMIZER: 9; STAR: 7; PARSER: 6; BOOTSTRAP: 5; REPL: 5; GLR: 4; MATH: 4; OSX: 4; WINDOWS: 3; 

[13:21] <AlexDaniel> Zoffix: can't reproduce. Maybe try with a fresh db, or maybe try deleting precomp files…

[13:22] <AlexDaniel> buggable: version

[13:22] <AlexDaniel> This is Rakudo version 2017.09-19-g9190a3b80 built on MoarVM version 2017.09.1

[13:23] <AlexDaniel> (x86_64 GNU/Linux)

[13:23] <Zoffix> AlexDaniel: fresh db of what?

[13:23] <AlexDaniel> Zoffix: win-db-file

[13:24] <AlexDaniel> I created an empty file for it and it worked

[13:25] <Zoffix> It crashes without the win lottery plugin

[13:26] <Zoffix> This is Rakudo version 2017.09-19-g9190a3b built on MoarVM version 2017.09.1

[13:27] <AlexDaniel> :| no idea then

[13:38] <Geth> ¦ nqp: fc97d64e1b | (Jonathan Worthington)++ | 3 files

[13:38] <Geth> ¦ nqp: Add atomic ref ops and container methods on JVM

[13:38] <Geth> ¦ nqp:

[13:38] <Geth> ¦ nqp: This doesn't actually implement the ops such that they are functional,

[13:38] <Geth> ¦ nqp: it just paves the way for the Rakudo Scalar container handling in the

[13:38] <Geth> ¦ nqp: Rakudo repository to be able to implement them.

[13:38] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/fc97d64e1b

[13:39] <Zoffix> AlexDaniel: what did you use for config.json?

[13:41] <AlexDaniel> Zoffix: { "win-db-file": "foo.db" }

[14:26] <japhb> AlexDaniel, Zoffix: See https://irclog.perlgeek.de/perl6-dev/2017-09-18#i_15178419  -- notice how "version bump brought these changes" is reported twice for nqp and twice for rakudo -- in each case, once for the dependency bump, and then again for the repository *itself* getting a version bump

[14:26] <yoleaux> 13:07Z <Zoffix> japhb: Geth *does* report when bumping the deps file, but the URL it gives are to a list of changes in the dependant repo the bump brought in, not to the file with the change

[14:27] <japhb> It's not that it reports the changes -- I love that -- it's that it reports it both when it's appropriate and when it's not.

[14:27] <Zoffix> Ah

[14:28] <AlexDaniel> yeah, I see it now

[14:29] <Zoffix> Don't know how it manages to do that. There is a check for filename: https://github.com/perl6/geth/blob/master/lib/Geth/GitHub/Hooks/Preprocessor.pm6#L31-L41

[14:31] <Geth> ¦ rakudo/supply-locking-refactor: 32e4a1de29 | (Jonathan Worthington)++ | 2 files

[14:31] <Geth> ¦ rakudo/supply-locking-refactor: Basic atomic reference op support on JVM backend

[14:31] <Geth> ¦ rakudo/supply-locking-refactor:

[14:31] <Geth> ¦ rakudo/supply-locking-refactor: Still missing enforcing any type checks on the container, but enough

[14:31] <Geth> ¦ rakudo/supply-locking-refactor: to allow for Lock::Async to work.

[14:31] <Geth> ¦ rakudo/supply-locking-refactor: review: https://github.com/rakudo/rakudo/commit/32e4a1de29

[14:32] <Geth> ¦ rakudo/supply-locking-refactor: 6170cb9d2a | (Jonathan Worthington)++ | tools/build/jvm_core_sources

[14:32] <Geth> ¦ rakudo/supply-locking-refactor: Add Lock::Async to the JVM CORE.setting build

[14:32] <Geth> ¦ rakudo/supply-locking-refactor:

[14:32] <Geth> ¦ rakudo/supply-locking-refactor: With this, it now successfully sanity tests again (meaning that

[14:32] <Geth> ¦ rakudo/supply-locking-refactor: supplies, which now use Lock::Async, are working at least well enough

[14:32] <Geth> ¦ rakudo/supply-locking-refactor: for Proc::Async, which precomp uses).

[14:32] <Geth> ¦ rakudo/supply-locking-refactor: review: https://github.com/rakudo/rakudo/commit/6170cb9d2a

[14:33] * jnthn really didn't fancy writing a second less efficient version of Lock::Async just for JVM, so ended up putting in support for atomic reference ops (atomic integer ones will be possible, but a good bit of work)

[14:34] * Zoffix kicks Geth

[14:34] <lizmat> .oO( I don't geth it )

[14:34] <nine> jnthn: so you wrote a tool to write a tool to help a tool. Very damiany of you ;)

[14:35] <Zoffix> I'm trying to redeliver the buggy webhook that triggered the version bump thing, but it apparently isn't getting gethed

[14:36] <Geth> ¦ nqp: 4a3a35cbf9 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[14:36] <Geth> ¦ nqp: [release] Bump MoarVM revision to 2017.09.1

[14:36] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/4a3a35cbf9

[14:36] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.09-2-g0f59f0cf...2017.09.1

[14:36] <Geth> ¦ nqp: 13ddad3dbb | (Aleks-Daniel Jakimenko-Aleksejev)++ | VERSION

[14:36] <Geth> ¦ nqp: [release] Bump VERSION to 2017.09

[14:36] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/13ddad3dbb

[14:36] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.09-2-g0f59f0cf...2017.09.1

[14:37] <Zoffix> :|

[14:37] <jnthn> Yeah, my top level task is to make non-blocking await play nicely with supplies, so that was at least 3 levels deep in yak shave :)

[14:40] <jdv79> my app doesnt die with the unknowm lock issue anymore.  yay.

[14:41] <Geth> ¦ rakudo/nom: 66c2d05f29 | (Elizabeth Mattijsen)++ | src/core/Mu.pm

[14:41] <Geth> ¦ rakudo/nom: Fix for RT #132117

[14:41] <Geth> ¦ rakudo/nom:

[14:41] <Geth> ¦ rakudo/nom: This appears to break some test in S03-operators/eqv.t , which by

[14:41] <Geth> ¦ rakudo/nom: the looks of it, are not very good tests.

[14:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/66c2d05f29

[14:41] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132117

[14:41] <jdv79> now it just seems to stall and eat cpu but chugs along eventualky

[14:47] <Geth> ¦ rakudo/supply-locking-refactor: 59c4117ff4 | (Jonathan Worthington)++ | src/vm/jvm/runtime/org/perl6/rakudo/RakudoContainerSpec.java

[14:47] <Geth> ¦ rakudo/supply-locking-refactor: Enforce container types in atomic ops on JVM

[14:47] <Geth> ¦ rakudo/supply-locking-refactor: review: https://github.com/rakudo/rakudo/commit/59c4117ff4

[14:49] <Geth> ¦ rakudo/supply-locking-refactor: 6ba16f84a7 | (Jonathan Worthington)++ | t/spectest.data

[14:49] <Geth> ¦ rakudo/supply-locking-refactor: cas.t and cas-loop.t now pass on JVM

[14:49] <Geth> ¦ rakudo/supply-locking-refactor: review: https://github.com/rakudo/rakudo/commit/6ba16f84a7

[14:50] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Streamline registering an encoding

[14:50] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/276783234 https://github.com/rakudo/rakudo/compare/61a77e60a7d9...48406db63918

[14:51] <Zoffix> k, see the problem with geth

[14:52] <jdv79> what gives?

[14:52] <Zoffix> or maybe more like a glitch with github. One of the hooks has empty <commits> array, with the missing commit shipped in the previous hook

[14:53] <Geth_> ¦ geth: 6718dfdcf8 | (Zoffix Znet)++ | 2 files

[14:53] <Geth_> ¦ geth: Fix duplicate version bump reports

[14:53] <Geth_> ¦ geth:

[14:53] <Geth_> ¦ geth: Report only once even if a hook has multiple commits

[14:53] <Geth_> ¦ geth: review: https://github.com/perl6/geth/commit/6718dfdcf8

[14:53] <japhb> Zoffix: Huh.  That's pretty odd

[14:54] <Zoffix> Well, that may or may not be the fix. I can't test it because geth too now gives me "Missing serialize REPR function for REPR VMException (BOOTException)" error :|

[14:54] * Zoffix tries going back to rakudobrew installation

[14:55] <jdv79> the vm exceptions are frustrating:(

[14:55] <Geth_> ¦ geth: 77b08e52c3 | (Zoffix Znet)++ (committed using GitHub Web editor) | lib/Geth/GitHub/Hooks/Preprocessor.pm6

[14:55] <Geth_> ¦ geth: Fix wrong key name

[14:55] <Geth_> ¦ geth: review: https://github.com/perl6/geth/commit/77b08e52c3

[14:55] <jnthn> Did anyone manage to bisect the VMException issue yet?

[14:56] <lizmat> t/04-nativecall/21-callback-other-thread.t caused the build to fail in travix

[14:56] <lizmat> *travis

[14:56] <jnthn> lizmat: Yeah, I've managed to reproduce it locally also

[14:56] <Zoffix> jnthn: AlexDaniel couldn't repro the problem on his box

[15:02] <Geth> ¦ rakudo/nom: a845ac3d3f | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Mu.pm

[15:02] <Geth> ¦ rakudo/nom: Fix typo in error message; MasterDuke++

[15:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a845ac3d3f

[15:04] <lizmat> MasterDuke++  :-)

[15:05] <Zoffix> lizmat: the failings tests… the look to be failing because only one of the iterables is lazy and types differ. Maybe we don't have to die in those cases since we reliably know the answer is False?

[15:06] <Zoffix> m: dd (1…∞).List eqv (1…∞)

[15:06] <camelia> rakudo-moar 66c2d0: OUTPUT: «Cannoy eqv lazy Iterables␤  in block <unit> at <tmp> line 1␤␤»

[15:06] <travis-ci> Rakudo build failed. lizmat 'Merge pull request #1162 from Gnouc/nom

[15:06] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/276785371 https://github.com/rakudo/rakudo/compare/48406db63918...9190a3b80c6b

[15:06] <Zoffix> c: HEAD~10 dd (1…∞).List eqv (1…∞)

[15:06] <committable6> Zoffix, ¦HEAD~10: «Bool::False»

[15:06] <Zoffix> like ^ here we don't really care that they're lazy. We can see that types don't match

[15:08] * Zoffix wonders where laziness falls on the equivalency landscape.  would `(lazy 1,) eqv (2,)` die or return False because it can see laziness doesn't match

[15:08] <AlexDaniel> .tell Skarsnik I remember you had some patch that improved the situation with Gumbo slightly. Where was it?

[15:08] <yoleaux> AlexDaniel: I'll pass your message to Skarsnik.

[15:09] <Zoffix> The counter argument would be: all the specialness makes it harder to explain when `eqv` would die; "dies if any arg is lazy" is easy to learn

[15:12] <jnthn> Grrr, the moment I go to debug that 21-callback-other-thread.t it runs 100 times in a row without failing :/

[15:12] <Zoffix> :)

[15:13] <jnthn> ah, got it to fail when run under the harness

[15:13] <jnthn> Maybe it needs load

[15:14] <jnthn> hah, yes, running it in a loop while doing make stresstest got it

[15:14] <jnthn> Hmmmm. Wat.

[15:15] <lizmat> uh oh

[15:16] <japhb> Zoffix: Did you notice that the error message you got ~10 minutes ago starts with the typo 'Cannoy'?  ;-)

[15:16] <Zoffix> japhb: yup, it was fixed already

[15:16] <japhb> (y)

[15:16] <japhb> Dangit, I always forget that doesn't convert to thumbs-up in IRC

[15:21] <Zoffix> oh no!

[15:21] <Zoffix> rakudobrewed rakudo works (doesn't have the VMException issue)

[15:21] <Zoffix> Does anyone see an error in my bash alias to install rakudo? https://github.com/zoffixznet/r#linux

[15:22] <Zoffix> Apparently the issue is due to that installation method :\

[15:23] <Zoffix> if only there were a way to find out what exactly that exception  is :\

[15:26] <japhb> Zoffix: FWIW, my rebuild script has gotten *paranoid* over the years.  I never build in a tree I've built in previously; I keep clean clones that I pull into, and then I soft-clone them locally into a fresh new build tree.  Just too many times that leftovers from previous have broken things and no amount of cleaning seems to be sufficient in all cases.

[15:27] <Zoffix> I did try with a clean clone and the issue was still there

[15:31] <Geth_> ¦ nqp: 4a3a35cbf9 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[15:31] <Geth_> ¦ nqp: [release] Bump MoarVM revision to 2017.09.1

[15:31] <Geth_> ¦ nqp: review: https://github.com/perl6/nqp/commit/4a3a35cbf9

[15:31] <Geth_> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.09-2-g0f59f0cf...2017.09.1

[15:31] <Geth_> ¦ nqp: 13ddad3dbb | (Aleks-Daniel Jakimenko-Aleksejev)++ | VERSION

[15:31] <Geth_> ¦ nqp: [release] Bump VERSION to 2017.09

[15:31] <Geth_> ¦ nqp: review: https://github.com/perl6/nqp/commit/13ddad3dbb

[15:31] <Zoffix> bug's fixed

[15:32] <Geth> ¦ geth: f6d935a0fe | (Zoffix Znet)++ | lib/Geth/Plugin/GitHub.pm6

[15:32] <Geth> ¦ geth: Fix incorrect object used to get SHA from

[15:32] <Geth> ¦ geth: review: https://github.com/perl6/geth/commit/f6d935a0fe

[15:32] <Zoffix> Just need to update One True Geth™ to latest commits

[15:35] <Zoffix> https://travis-ci.org/rakudo/rakudo/builds/276785371

[15:35] <buggable> [travis build above] ☠ All failures are due to timeout (0), missing build log (0), GitHub connectivity (0), or failed make test (2). Across all jobs, only t/04-nativecall/21-callback-other-thread.t test file failed.

[15:35] <Zoffix> And this too fixed. No longer shows a check mark if there are test failures

[15:38] <jdv79> woohoo!

[15:39] <jdv79> why are there so many timeouts on test runs?

[15:41] * Zoffix haven't seen any timeouts recently

[15:47] <Geth> ¦ rakudo/nom: 48a84d6aff | (Elizabeth Mattijsen)++ | src/core/Mu.pm

[15:47] <Geth> ¦ rakudo/nom: Return False if only either side is lazy.

[15:47] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/48a84d6aff

[15:51] <Zoffix> https://travis-ci.org/rakudo/rakudo/builds/276785371

[15:51] <buggable> [travis build above] ☠ All failures are due to: failed make test (2 failures). Across all jobs, only t/04-nativecall/21-callback-other-thread.t test file failed.

[15:52] <Zoffix> Made message a bit more understandable (and tossed failures that are 0)

[15:54] <jnthn> Not having much luck fixing it, alas :(

[16:19] <jnthn> Ah, think I finally found it

[16:19] <Zoffix> \o/

[16:19] <jnthn> There were some unlikely races, which I have fixes for all of anyway

[16:20] <jnthn> But even that didn't nail it

[16:20] <jnthn> Turns out that there was an issue that could cause it to not even store the native thread ID correctly in the first place

[16:23] <lizmat> .oO( runaway threads! )

[16:35] <timotimo> run away! threads!

[16:36] <jnthn> MoarVM HEAD should unflap the native calling test on dyncall

[16:36] <jnthn> I want to factor the code out and make dyncall and libffi share it

[16:36] <jnthn> But getting a bit tired, so will do that later, or tomorrow :)

[16:38] <Geth> ¦ rakudo/nom: 476741e77d | (Elizabeth Mattijsen)++ | src/core/Hash.pm

[16:38] <Geth> ¦ rakudo/nom: Map/Hash have their own optimized .sort

[16:38] <Geth> ¦ rakudo/nom:

[16:38] <Geth> ¦ rakudo/nom: So no need to first create a Seq that generates Pairs.  This should

[16:38] <Geth> ¦ rakudo/nom: at least make Hash.perl/gist a bit more memory friendly and a bit faster.

[16:38] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/476741e77d

[16:50] <jnthn> eh, I did the libffi thing anyway

[16:51] <jnthn> So fixed whichever is used

[16:54] <jnthn> I'll leave version bumping to someone else. Time to make dinner :)

[16:59] <[Coke]> jnthn++

[17:17] <Skarsnik> releasable6, status

[17:17] <yoleaux> 15:08Z <AlexDaniel> Skarsnik: I remember you had some patch that improved the situation with Gumbo slightly. Where was it?

[17:17] <releasable6> Skarsnik, Next release in 33 days and ≈1 hour. No blockers. Changelog for this release was not started yet

[17:17] <releasable6> Skarsnik, Details: https://gist.github.com/a67665b9c2149beb461e7257162d3952

[17:18] <Skarsnik> Nice :)

[17:19] <Skarsnik> AlexDaniel, it's pushed, but does not help the gumbo crash really x)

[17:19] <AlexDaniel> it does, a little bit

[17:26] <Zoffix> buggable: speed 3

[17:26] <buggable> Zoffix, ▃▁▁ dates: 2017-09-17–2017-09-18; range: 3.406s–3.503s; speed: 3% faster

[17:26] <Zoffix> Mhhmmm

[17:27] <Zoffix> Nuked rakudobrew and used my rakudo install alias now. The VMException error is gone :/

[17:27] <Zoffix> A wild guess is some prereq module was missing or something. Oh well, we'll never know

[17:30] <Zoffix> or maybe the alias doesn't work for upgrading

[17:30] * Zoffix tries

[18:43] <Geth> ¦ nqp: 862cde8ed4 | (Elizabeth Mattijsen)++ | tools/build/MOAR_REVISION

[18:43] <Geth> ¦ nqp: Bump Moar to get the latest libuv

[18:43] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/862cde8ed4

[18:43] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.09.1...2017.09.1-7-geeb664e

[18:44] <jnthn> Also the flappy test fix :)

[18:46] <lizmat> :-)  that too!  :-)

[18:46] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Fix for RT #132117

[18:46] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/276882202 https://github.com/rakudo/rakudo/compare/9190a3b80c6b...66c2d05f2995

[18:46] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132117

[18:46] <Zoffix> https://travis-ci.org/rakudo/rakudo/builds/276882202

[18:46] <buggable> [travis build above] ☠ All failures are due to: failed make test (1 failure). Across all jobs, only t/04-nativecall/21-callback-other-thread.t test file failed.

[18:46] <Zoffix> Hm. Upgrading with the rakudo bash alias also didn't have the VMException error. Good I guess.

[18:59] <Geth> ¦ rakudo/nom: 198b84971d | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION

[18:59] <Geth> ¦ rakudo/nom: Bump nqp: new libuv and fix for thread ID race

[18:59] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/198b84971d

[18:59] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.09...2017.09-2-g862cde8

[19:08] <AlexDaniel> ⚠ Rakudo SQUASHathon 2017-10-07 https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[19:09] <Skarsnik> hm maybe a toaster run could be nice with a bump of libuv ^^

[19:13] <timotimo> well, we've done it after the release

[19:13] <timotimo> we'll have a full month of bleeding-edge-user testing before stability-craving users get it

[19:58] * skids notices an unreproduceable flapper in S10-packages/basic.t test 83.

[20:02] * lizmat has seen that flap every now and then as well

[20:04] <Geth> ¦ rakudo/nom: 0beeef9baa | (Elizabeth Mattijsen)++ | src/core/Mu.pm

[20:04] <Geth> ¦ rakudo/nom: Iterable eqv Iterable should check types first

[20:04] <Geth> ¦ rakudo/nom:

[20:04] <Geth> ¦ rakudo/nom: All S03-operators/eqv.t tests pass again

[20:04] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0beeef9baa

[20:05] <skids> Maybe we should have a "flapper" test directive that runs the test but won't trigger "TODO passed"

[20:05] <lizmat> this feels like the "meh" command that brian d foy proposed for 5.28

[20:06] <skids> "meh" would work too :-)

[20:22] <Geth> ¦ rakudo: skids++ created pull request #1163: Add Scalar indicators to Hash[].perl when needed (fix RT#132119)

[20:22] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132119

[20:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1163

[20:24] <Geth> ¦ roast: skids++ created pull request #325: Add tests for RT#132119

[20:24] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132119

[20:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/325

[20:50] <Geth> ¦ nqp/jit_nativecall: cc438c5814 | (Stefan Seifert)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[20:50] <Geth> ¦ nqp/jit_nativecall: Map the new nativecallinvokejit OP

[20:50] <Geth> ¦ nqp/jit_nativecall:

[20:50] <Geth> ¦ nqp/jit_nativecall: nativecallbuild now has a return value indicating whether we were able

[20:50] <Geth> ¦ nqp/jit_nativecall: to JIT compile code for the call site

[20:50] <Geth> ¦ nqp/jit_nativecall: review: https://github.com/perl6/nqp/commit/cc438c5814

[20:50] <Geth> ¦ nqp/jit_nativecall: 5d88bb1c98 | (Stefan Seifert)++ | 12 files

[20:50] <Geth> ¦ nqp/jit_nativecall: Turn nativecallinvokejit into a proper invocation op

[20:50] <Geth> ¦ nqp/jit_nativecall:

[20:50] <Geth> ¦ nqp/jit_nativecall: The return type object for boxing is passed as the first child of the

[20:50] <Geth> ¦ nqp/jit_nativecall: MAST::Call node.

[20:50] <Geth> ¦ nqp/jit_nativecall: Includes a rebootstrap for the extension of MAST::Call

[20:50] <Geth> ¦ nqp/jit_nativecall: review: https://github.com/perl6/nqp/commit/5d88bb1c98

[20:56] <Geth> ¦ rakudo/jit_nativecall: 9 commits pushed by (Stefan Seifert)++

[20:56] <Geth> ¦ rakudo/jit_nativecall: b9f6aceffa | Use the new nativecallinvokejit for calling JITed NC code directly

[20:56] <Geth> ¦ rakudo/jit_nativecall: 1d501768e1 | Test more integerial return types in NC

[20:56] <Geth> ¦ rakudo/jit_nativecall: e48bfba584 | Test Pointer return values in argless function

[20:56] <Geth> ¦ rakudo/jit_nativecall: 5c0c821336 | Test argless native functions returning strings

[20:56] <Geth> ¦ rakudo/jit_nativecall: a7df3f5394 | Decont arguments before running JITed native calls

[20:56] <Geth> ¦ rakudo/jit_nativecall: 0dbee5ed80 | Unbox HLL objects passed to JITed native functions

[20:56] <Geth> ¦ rakudo/jit_nativecall: 60e520f416 | Give generated native call function bodies a name

[20:56] <Geth> ¦ rakudo/jit_nativecall: f810b4f846 | Remove unnecessary creation of an extra serialization context

[20:56] <Geth> ¦ rakudo/jit_nativecall: 571cf2c0fc | Explicitly pass the params to nativecallinvokejit

[20:56] <Geth> ¦ rakudo/jit_nativecall: review: https://github.com/rakudo/rakudo/compare/fc4d784617...571cf2c0fc

[21:10] <gfldex> can I tell Rakudo to use more OS threads then it thinks it should?

[21:10] <Geth> ¦ rakudo/nom: 47d6c66e9f | skids++ | src/core/Hash.pm

[21:10] <Geth> ¦ rakudo/nom: Add Scalar indicators to Hash[].perl when needed (fix RT#132119)

[21:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/47d6c66e9f

[21:10] <Geth> ¦ rakudo/nom: da5c36c134 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Hash.pm

[21:10] <Geth> ¦ rakudo/nom: Merge pull request #1163 from skids/rt132119

[21:10] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132119

[21:10] <Geth> ¦ rakudo/nom:

[21:10] <Geth> ¦ rakudo/nom: Add Scalar indicators to Hash[].perl when needed (fix RT#132119)

[21:10] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132119

[21:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/da5c36c134

[21:11] <Geth> ¦ roast: f775ffedaa | skids++ | S32-hash/perl.t

[21:11] <Geth> ¦ roast: Add tests for RT#132119

[21:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f775ffedaa

[21:11] <Geth> ¦ roast: e10819ad1f | skids++ (committed using GitHub Web editor) | S32-hash/perl.t

[21:11] <Geth> ¦ roast: Merge pull request #325 from skids/rt132119

[21:11] <Geth> ¦ roast:

[21:11] <Geth> ¦ roast: Add tests for RT#132119

[21:11] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132119

[21:11] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132119

[21:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e10819ad1f

[21:14] <Zoffix> gfldex: I think that's RAKUDO_MAX_THREADS env var, innit?

[21:16] <Zoffix> skids: FWIW nine++ fixed a flopper with module tests and had a suggestion for how other floppers might be fixed: https://irclog.perlgeek.de/perl6-dev/2017-08-26#i_15072650

[21:18] <timotimo> gfldex: there's multiple knobs you can twist, RAKUDO_MAX_THREADS is one, another is to create a new ThreadPoolScheduler and putting that into your $*SCHEDULER

[21:19] <timotimo> jnthn is also currently working on a new and much improved version of the ThreadPoolScheduler that'll handle creating new threads much more intelligently

[21:20] <skids> Zoffix: hrm, well, that last test does rely on cwd not being changed...

[21:21] <jnthn> timotimo: I already merged it today :)

[21:22] <jnthn> The default maximum is now 64, fwiw

[21:22] <gfldex> my golfed httpd is sieged by 25 worker threads and load is at 0.60 on a 6core/12thread host

[21:22] <timotimo> cool

[21:24] <gfldex> but then, I should check if the network stack is the bottleneck before I complain

[21:27] <yoleaux> Zoffix: go through ecosystem and convert .child -> .add

[21:30] <gfldex> it's the network stack :-/

[21:31] <timotimo> you mean the parts of rakudo that handle networking? or the actual OS?

[21:32] <gfldex> OS

[21:32] <geekosaur> lots of resources for linux tuning, fewer for windows and os x but they exist

[21:33] <geekosaur> for high performance web servers

[21:33] * jnthn enjoys this moment where Rakudo was not the bottleneck ;)

[21:38] <Zoffix> .in 60d go through ecosystem and convert .child -> .add

[21:38] <yoleaux> Zoffix: I'll remind you on 17 Nov 2017 21:38Z

[21:40] <gfldex> i found the culprit. Siege needs more worker threads.

[21:40] <jnthn> Well, there goes my enjoyment :)

[21:41] <lizmat> and yet another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/09/18/2017-38-color-me-booked/

[21:41] * jnthn has typically used ab on Cro with 50 and 100 concurrent workers, fwiw

[21:41] <jnthn> lizmat: Groan :)

[21:46] <timotimo> lizmat++ # good post

[22:01] <japhb> OOC, is there a reason we don't expose nqp::readlink() as a Perl 6 method on IO::Path?  As far as I can see, it's only available internally to the .resolve method, and that's not useful for someone writing code to check symlink correctness (especially if a long path has some symlinks that constantly change, and the user is only caring about the relatively stable symlinks within that path).

[22:02] <lizmat> japhb: I think portability was an issue ?

[22:05] <japhb> lizmat: Hmmm ... it doesn't look like the nqp::readlink() call in IO::Path.resolve is surrounded by #?if marks, so either that should be fixed, or the portability problem was dealt with at some point I'd guess.

[22:05] <timotimo> probably portability between windows and the rest?

[22:05] <timotimo> that'd be "in a different file"

[22:05] <japhb> Oh, hmmm

[22:06] <japhb> Do we have a POSIX or similar module yet, wherein we get to include all that stuff that Windows users don't have?

[22:07] <lizmat> https://github.com/cspencer/perl6-posix

[22:08] <lizmat> but hasn't been updated for the past 2 years

[22:08] <lizmat> so could well be suffering some bitrot

[22:09] <Zoffix> lizmat++ # good weekly

[22:09] <Zoffix> Nice to see someone wrote a plugin for IRC::Client :)

[22:10] <japhb> lizmat: Ah, and only seems to include the bits for passwd/group management

[23:03] <ugexe> you have to use "```perl 6" to get highlighting
