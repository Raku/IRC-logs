[00:21] <AlexDaniel> hmmm it's not up yet?

[00:32] <[Coke]> timotimo: patt of it was to just showcase some features.

[00:32] <[Coke]> *part

[00:32] <[Coke]> AlexDaniel: I had it scheduled, but may have screwed it up. I'll just hit publish.

[00:33] <AlexDaniel> I did screw it up also yesterday :)

[00:34] <[Coke]> done

[00:35] <timotimo> thanks to all the adventeers :)

[00:35] <timotimo> next year i'll try not to RSI myself up during advent times

[04:04] <Geth> ¦ rakudo: 6d65cf4ff9 | (Daniel Green)++ | 2 files

[04:04] <Geth> ¦ rakudo: Add argument to ambiguous call exception message

[04:04] <Geth> ¦ rakudo:

[04:04] <Geth> ¦ rakudo: We already had the capture of the call's argument(s) in the exception,

[04:04] <Geth> ¦ rakudo: just add it to the message to help debugging.

[04:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6d65cf4ff9

[04:04] <Geth> ¦ rakudo: 98be6ab5ec | (Zoffix Znet)++ (committed using GitHub Web editor) | 2 files

[04:04] <Geth> ¦ rakudo: Merge pull request #1321 from MasterDuke17/add_argument_to_ambiguous_call_exception_message

[04:04] <synopsebot> RAKUDO#1321 [closed]: https://github.com/rakudo/rakudo/pull/1321 Add argument to ambiguous call exception message

[04:04] <Geth> ¦ rakudo:

[04:04] <Geth> ¦ rakudo: Add argument to ambiguous call exception message

[04:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/98be6ab5ec

[04:17] <Geth> ¦ roast: 86e7403f9a | (Zoffix Znet)++ | S07-iterators/range-iterator.t

[04:17] <Geth> ¦ roast: [v6.d REVIEW] Use more appropriate test routines

[04:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/86e7403f9a

[04:21] <Geth> ¦ roast: e2639068fe | (Zoffix Znet)++ | S32-str/sprintf.t

[04:21] <Geth> ¦ roast: [v6.d REVIEW] Use better test description

[04:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e2639068fe

[04:24] <Geth> ¦ roast: 85818611a7 | (Zoffix Znet)++ | S32-str/sprintf.t

[04:24] <Geth> ¦ roast: [v6.d REVIEW] DSETEM in sprintf() with wrong args

[04:24] <Geth> ¦ roast:

[04:24] <Geth> ¦ roast: DSETEM = "Do Not Spec Exact Text of Error Messages". These proved

[04:24] <Geth> ¦ roast: of little value and were interfering with readability changes

[04:24] <Geth> ¦ roast: in 6.c. Keep these in Rakudo's tests for now. If other impls need

[04:24] <Geth> ¦ roast: it, we can always do an Appendix set of tests to the spec that impls

[04:24] <Geth> ¦ roast: can optionally follow.

[04:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/85818611a7

[04:27] <Geth> ¦ rakudo: 1ac1a12531 | (Zoffix Znet)++ | t/05-messages/02-errors.t

[04:27] <Geth> ¦ rakudo: Test sprintf() with wrong args

[04:27] <Geth> ¦ rakudo:

[04:27] <Geth> ¦ rakudo: Moved from roast https://github.com/perl6/roast/commit/85818611a7

[04:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1ac1a12531

[04:30] <Geth> ¦ rakudo: ff34ab35ed | (Zoffix Znet)++ | t/05-messages/02-errors.t

[04:30] <Geth> ¦ rakudo: Reformat test

[04:30] <Geth> ¦ rakudo:

[04:30] <Geth> ¦ rakudo: - Fit to 80 char lines

[04:30] <Geth> ¦ rakudo: - Use cheaper .contains tests instead of regexes

[04:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ff34ab35ed

[04:57] <Geth> ¦ rakudo: d9ce5e9b82 | (Zoffix Znet)++ | src/core/Exception.pm

[04:57] <Geth> ¦ rakudo: Use cheaper .contains instead of regex

[04:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d9ce5e9b82

[04:58] <Geth> ¦ roast: 20fe657466 | (Zoffix Znet)++ | S09-typed-arrays/native-int.t

[04:58] <Geth> ¦ roast: [v6.d REVIEW] DSETEM in native array errors

[04:58] <Geth> ¦ roast:

[04:58] <Geth> ¦ roast: DSETEM = "Do Not Spec Exact Text of Error Messages". These proved

[04:58] <Geth> ¦ roast: of little value and were interfering with readability changes

[04:58] <Geth> ¦ roast: in 6.c. Keep these in Rakudo's tests for now. If other impls need

[04:58] <Geth> ¦ roast: it, we can always do an Appendix set of tests to the spec that impls

[04:58] <Geth> ¦ roast: can optionally follow.

[04:58] <Geth> ¦ roast:

[04:58] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/b7507b801f0051729ba484262529b3a6c8f2840a

[04:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/20fe657466

[04:58] <Geth> ¦ rakudo: f35d02031c | (Zoffix Znet)++ | t/05-messages/02-errors.t

[04:58] <Geth> ¦ rakudo: Test native array error content

[04:58] <Geth> ¦ rakudo:

[04:58] <Geth> ¦ rakudo: Moved from roast: https://github.com/perl6/roast/commit/20fe657466

[04:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f35d02031c

[05:07] <Geth> ¦ roast: 6877f7dada | (Zoffix Znet)++ | S09-typed-arrays/native-str.t

[05:07] <Geth> ¦ roast: [v6.d REVIEW] DSETEM in native str array errors

[05:07] <Geth> ¦ roast:

[05:07] <Geth> ¦ roast: DSETEM = "Do Not Spec Exact Text of Error Messages". These proved

[05:07] <Geth> ¦ roast: of little value and were interfering with readability changes

[05:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6877f7dada

[06:59] <Geth> ¦ nqp: d034bf3c49 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[06:59] <Geth> ¦ nqp: Bump MoarVM

[06:59] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d034bf3c49

[06:59] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.12-1-g912f967...2017.12-2-g736cfaa

[06:59] <Geth> ¦ rakudo: 8746b5347f | (Zoffix Znet)++ | tools/build/NQP_REVISION

[06:59] <Geth> ¦ rakudo: Bump NQP

[06:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8746b5347f

[06:59] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.12-1-g8f9722b...2017.12-6-gd034bf3

[07:00] <Geth> ¦ roast: 20b76e6274 | (Zoffix Znet)++ | 2 files

[07:00] <Geth> ¦ roast: Test issues with leftovers due to container resizing

[07:00] <Geth> ¦ roast:

[07:00] <Geth> ¦ roast: RT#127756: https://rt.perl.org/Ticket/Display.html?id=127756

[07:00] <Geth> ¦ roast: Rakudo fix: https://github.com/MoarVM/MoarVM/commit/736cfaa1e5

[07:00] <Geth> ¦ roast:             https://github.com/perl6/nqp/commit/d034bf3c49

[07:00] <Geth> ¦ roast:             https://github.com/rakudo/rakudo/commit/8746b5347f

[07:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/20b76e6274

[07:01] <synopsebot> RT#127756 [new]: https://rt.perl.org/Ticket/Display.html?id=127756 setelems on native arrays doesn't clear the array

[07:18] <yoleaux> AlexDaniel`: RT/GH weekly

[08:00] <travis-ci> Rakudo build passed. Zoffix Znet 'Bump NQP'

[08:00] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/320944013 https://github.com/rakudo/rakudo/compare/f35d02031cdf...8746b5347f59

[10:45] <Geth> ¦ nqp: e64fb5b44b | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[10:45] <Geth> ¦ nqp: Bump MoarVM

[10:45] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e64fb5b44b

[10:45] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.12-2-g736cfaa...2017.12-4-g43c926f

[10:45] <Geth> ¦ rakudo: e5bb9bd20c | (Zoffix Znet)++ | tools/build/NQP_REVISION

[10:45] <Geth> ¦ rakudo: Bump NQP

[10:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e5bb9bd20c

[10:45] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.12-6-gd034bf3...2017.12-7-ge64fb5b

[10:49] <Geth> ¦ roast: 946e42eb08 | (Zoffix Znet)++ | S09-typed-arrays/native.t

[10:49] <Geth> ¦ roast: Additional tests for leftovers due to container resizing

[10:49] <Geth> ¦ roast:

[10:49] <Geth> ¦ roast: To go with https://github.com/perl6/roast/commit/20b76e6274969787e

[10:49] <Geth> ¦ roast:

[10:49] <Geth> ¦ roast: Rakudo fix: https://github.com/MoarVM/MoarVM/commit/43c926f9e0

[10:49] <Geth> ¦ roast:             https://github.com/perl6/nqp/commit/e64fb5b44b

[10:49] <Geth> ¦ roast:             https://github.com/rakudo/rakudo/commit/e5bb9bd20c

[10:49] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/946e42eb08

[10:51] <lizmat> Files=1231, Tests=76004, 323 wallclock secs (14.75 usr  5.26 sys + 2241.25 cusr 223.08 csys = 2484.34 CPU)

[10:52] <Geth> ¦ roast: 8533ec6924 | (Zoffix Znet)++ | 3 files

[10:52] <Geth> ¦ roast: Unfudge now-passing native array tests

[10:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8533ec6924

[11:36] <Geth> ¦ rakudo: 4790587f0d | (Elizabeth Mattijsen)++ | src/core/Pair.pm

[11:36] <Geth> ¦ rakudo: Use logic of List.WHICH also on Pair.WHICH

[11:36] <Geth> ¦ rakudo:

[11:36] <Geth> ¦ rakudo: - if the value is not a value type, then the pair isn't either

[11:36] <Geth> ¦ rakudo: - don't use callsame, but Mu::WHICH, we know where you live

[11:36] <Geth> ¦ rakudo: - make sure subclasses of Pair also work

[11:36] <Geth> ¦ rakudo: - SHA1 the key/value if value type

[11:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4790587f0d

[11:38] <lizmat> sometime I wonder how much we would gain with a nqp::concat3/4/5/6 ops

[11:43] <Geth> ¦ nqp: 3e19553aaa | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[11:43] <Geth> ¦ nqp: Bump MoarVM

[11:43] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3e19553aaa

[11:43] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.12-4-g43c926f...2017.12-5-g09482f9

[11:44] <Geth> ¦ rakudo: 3b48dfba67 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[11:44] <Geth> ¦ rakudo: Bump NQP

[11:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3b48dfba67

[11:44] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.12-7-ge64fb5b...2017.12-8-g3e19553

[12:02] <pmurias> lizmat: those nqp::concat3/4/5/6 ops would just concat a bunch of string together?

[12:02] <lizmat> yeah, that's the idea

[12:03] <lizmat> in any case, it's been the source of quite a remarkable opt in perl 5 recently: the instruction of a multi-value concat

[12:03] <lizmat> I have no idea how much we would gain in Perl 6 though  :-)

[12:04] <lizmat> I have no idea of the overhead of a nqp::concat call, and nested nqp::concat calls

[12:05] <pmurias> it wouldn't help at all on the js backend, but it could be done on the MoarVM backend level

[12:06] <lizmat> well, it was just an idea...  hoping someone would be able to say something sensible about it  :-)

[12:09] <Geth> ¦ nqp: 5f68310a38 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[12:09] <Geth> ¦ nqp: Bump MoarVM

[12:09] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5f68310a38

[12:09] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.12-5-g09482f9...2017.12-6-gcb4c194

[12:09] <Geth> ¦ rakudo: 1ea0c90846 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[12:09] <Geth> ¦ rakudo: Bump NQP

[12:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1ea0c90846

[12:09] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.12-8-g3e19553...2017.12-9-g5f68310

[12:10] <lizmat> m: use nqp; nqp::concat("foo",nqp::concat("bar",nqp::concat("baz","zip"))) for ^1000000; say now - INIT now

[12:10] <camelia> rakudo-moar 3b48dfba6: OUTPUT: «0.4271508␤»

[12:10] <lizmat> m: use nqp; nqp::join("",nqp::list_s("foo","bar","baz","zip")) for ^1000000; say now - INIT now

[12:10] <camelia> rakudo-moar 3b48dfba6: OUTPUT: «0.4313659␤»

[12:10] <lizmat> weird: the latter is signifcantly faster for me

[12:12] <lizmat> m: use nqp; nqp::concat("foo",nqp::concat("bar",nqp::concat("baz","zip"))) for ^1000000; say now - INIT now

[12:12] <camelia> rakudo-moar 3b48dfba6: OUTPUT: «0.40029773␤»

[12:12] <lizmat> m: use nqp; nqp::join("",nqp::list_s("foo","bar","baz","zip")) for ^1000000; say now - INIT now

[12:12] <camelia> rakudo-moar 3b48dfba6: OUTPUT: «0.4079996␤»

[12:14] <lizmat> the join version for me: Initial/Final Size: 91680 / 99044 Kbytes , Total CPU Usage:      0.57 seconds

[12:14] <lizmat> multiple concat version: Initial/Final Size: 90540 / 101044 Kbytes, Total CPU Usage:      0.69 seconds

[12:15] <lizmat> so even allocating a list_s for it, makes it faster and more memory efficient, at least for me

[12:15] <lizmat> and only from 4 concats onward, at 3 they're about the same (within noise)

[12:22] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Use logic of List.WHICH also on Pair.WHICH

[12:22] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/321000462 https://github.com/rakudo/rakudo/compare/e5bb9bd20cdd...4790587f0dd5

[12:22] <buggable> [travis build above] ☠ All failures are due to: failed make test (1 failure). Across all jobs, only t/04-nativecall/12-sizeof.t test file failed.

[12:43] <lizmat> fwiw, t/04-nativecall/12-sizeof.t doesn't fail for me  :-(

[15:21] <Geth> ¦ rakudo: tbrowder++ created pull request #1339: Provides for fixes for several POD bugs:

[15:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1339

[15:23] <tbrowder> .tell AlexDaniel see my new PR 1339

[15:23] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[15:28] <Geth> ¦ roast: tbrowder++ created pull request #371: adds tests for rakudo PR 1339

[15:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/371

[15:29] <tbrowder> .tell AlexDaniel tests for rakudo PR 1339 are in roast PR 371

[15:29] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[16:50] <AlexDaniel`> .

[16:50] <AlexDaniel`> Uh. :)

[17:26] <AlexDaniel> .

[17:26] <yoleaux> 15:23Z <tbrowder> AlexDaniel: see my new PR 1339

[17:26] <yoleaux> 15:29Z <tbrowder> AlexDaniel: tests for rakudo PR 1339 are in roast PR 371

[18:16] <tbrowder> AlexDaniel: replies to yr comments made, changed some code...

[18:23] <tbrowder> which

[18:24] <tbrowder> *which [disregard finger fumble]

[19:53] <Zoffix> So bot reminded me about RT#128090

[19:53] <synopsebot> RT#128090 [open]: https://rt.perl.org/Ticket/Display.html?id=128090 [RFC] Easy Way to Export Only Specific Symbols At Compile Time

[19:53] <Zoffix> Gonna implement it then, since no one commented/beat me to it. The use Test :SYM<&is &ok>; to import just the &is and &ok symbols

[19:58] <Zoffix> OTOH, I hate the difference between `require Foo <&is &ok>` and `use Foo :SYM<&is &ok>`. I recall you can't pass positional Pairs to `use` either, so the whole thing is kinda warty. Gonna leave it for later.

[19:58] <Zoffix> |90d RT#128090 https://rt.perl.org/Ticket/Display.html?id=128090

[19:58] <ZofBot> Zoffix, Will remind you on 2018-03-24T14:58:23.220635-05:00 about RT#128090 https://rt.perl.org/Ticket/Display.html?id=128090

[21:09] <AlexDaniel> tbrowder: my concern is that we have RAKUDO_POD6_TABLE_DEBUG but RAKUDO_POD_TABLE_DEBUG_DEV

[21:09] <AlexDaniel> tbrowder: so POD vs POD6, it's inconsistent

[21:12] <tbrowder> ok, which is better? i’m happy to go either way. if i were to choose, i would pick POD now since it is clearly with rakudo

[21:15] <AlexDaniel> given that it's the only place where “POD6” is written like this, yes. I think it should be just “POD”

[21:16] <tbrowder> ok, will so change!

[21:33] <AlexDaniel> tbrowder: cool. I'm a bit tired today to make a proper review, so maybe someone else will :)

[21:33] <AlexDaniel> or maybe I'll get to it tomorrow

[21:33] <AlexDaniel> but it looks promising for sure!

[21:35] <tbrowder> ok, Merry Christmas! and have a virtual egg nog on me!

[21:41] <AlexDaniel> 🙌

[21:42] <tbrowder> noel!

[21:43] <tbrowder> joyeaux noel!

[23:42] <Geth> ¦ roast: 3567c15ccf | (Zoffix Znet)++ | S03-operators/buf.t

[23:42] <Geth> ¦ roast: [v6.d REVIEW] Test Buf.[re|a]locate structure betterer

[23:42] <Geth> ¦ roast:

[23:42] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/4626476a8d792aae12fa2b8121af25a63b1df65d

[23:42] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3567c15ccf

[23:49] <dogbert17> .seen viki

[23:49] <yoleaux> I saw viki 30 Nov 2016 13:12Z in #perl6: <viki> pmurias: whose is the copyright then? :)

[23:49] <dogbert17> Zoffix: you around?

[23:50] <dogbert17> have a bit of a nOoB problem

[23:50] <dogbert17> m: my SetHash $a = ('0/2', '2/2').SetHash; my @result = (); find-strongest($a); sub find-strongest(SetHash $a) { my $keys = $a.keys; for $keys.List -> $item { my @split-item = $item.comb; $a{$item}:delete; find-strongest($a); }}

[23:50] <camelia> rakudo-moar 1ea0c9084: OUTPUT: «(signal SEGV)»

[23:50] <dogbert17> ^^

[23:51] <dogbert17> I'm obviously doing something wrong but the result was a bit unexpected

[23:52] <dogbert17> any ideas?

[23:53] <timotimo> oh wow

[23:53] <timotimo> spesh is doing that

[23:53] <timotimo> but if spesh is disabled, it also explodes

[23:54] * geekosaur would guess that $keys needs to clone, otherwise you are modifying $keys when you :delete

[23:54] <geekosaur> spooky action at a distance

[23:54] <timotimo> oh, deleting elements while you're iterating

[23:54] <geekosaur> that is, $.keys is not a copy

[23:54] <geekosaur> yes

[23:54] <timotimo> that's not entirely unlikely at all

[23:54] <geekosaur> $.keys

[23:54] <geekosaur> aaa

[23:55] <geekosaur> where's my a $a.keys

[23:56] <timotimo> m: my SetHash $a = ('0/2', '2/2').SetHash; my @result = (); find-strongest($a); sub find-strongest(SetHash $a) { my $keys = $a.keys.eager; for $keys.List -> $item { my @split-item = $item.comb; $a{$item}:delete; find-strongest($a); }}

[23:56] <camelia> rakudo-moar 1ea0c9084: ( no output )

[23:56] <dogbert17> geekosaur: I was actually gonna ask just that. So I need 'my $keys = $a.keys.clone' ?

[23:56] <geekosaur> I think so, yes

[23:57] <dogbert17> or will Timotimos eager have the same effect?

[23:57] <geekosaur> eager should also do it, yes

[23:57] <timotimo> that will clone the Seq, probably?

[23:57] <timotimo> m: my SetHash $a = ('0/2', '2/2').SetHash; my @result = (); find-strongest($a); sub find-strongest(SetHash $a) { my $keys = $a.keys.clone; for $keys.List -> $item { my @split-item = $item.comb; $a{$item}:delete; find-strongest($a); }}

[23:57] <camelia> rakudo-moar 1ea0c9084: OUTPUT: «(signal SEGV)»

[23:57] <geekosaur> because being not-eager is what lets it get away with giving you a view on the innards which then explodes when you :delete

[23:57] <timotimo> yeah, clone doesn't do it at all

[23:57] <geekosaur> hm. feh

[23:58] <timotimo> it's still lazy with clone

[23:58] <dogbert17> is there a way to tell if it's lazy?

[23:58] <geekosaur> yeh, but it should be lazy on a copy. unless .clone doesn't clone deeply enough or something

[23:58] <geekosaur> I don't recall how the internals of SetHash work
