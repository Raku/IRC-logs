[00:46] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Make creating a Promise a bit cheaper

[00:46] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/290151432 https://github.com/rakudo/rakudo/compare/cf1673d9c20e...f980cdafe4a2

[00:46] <buggable> [travis build above] ✓ All failures are due to: timeout (3 failures).

[01:19] <MasterDuke> how is that these two signatures are ambiguous?

[01:19] <MasterDuke> :(Match $: Regex:D \var, int \im, int \monkey, $, $, $, *%_)

[01:19] <MasterDuke> :(Match $: Mu:D \var, int \im, int \monkey, $, int \a, \context, *%_)

[02:06] <BenGoldberg> m: say i ** i

[02:06] <camelia> rakudo-moar dd50d0f02: OUTPUT: «0.207879576350762+0i␤»

[02:06] <yoleaux> 18 Oct 2017 06:00 EDT <Zoffix> BenGoldberg: 'cause quietly is a control thing, not a routine :)

[02:07] <BenGoldberg> m: say e ** (- pi / 2 )

[02:07] <camelia> rakudo-moar dd50d0f02: OUTPUT: «0.207879576350762␤»

[02:08] <BenGoldberg> m: say (i ** i).im

[02:08] <camelia> rakudo-moar dd50d0f02: OUTPUT: «0␤»

[02:09] <BenGoldberg> m: say (i ** i).im.WHAT

[02:09] <camelia> rakudo-moar dd50d0f02: OUTPUT: «(Num)␤»

[04:49] <travis-ci> Rakudo build passed. Zoffix Znet 'Remove trailing whitespace'

[04:49] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/290239042 https://github.com/rakudo/rakudo/compare/ee3f0f4fb8bf...5cd7c7287864

[05:21] <AlexDaniel`> whew! One hell of a changelog

[05:22] <AlexDaniel`> still some editing to do…

[05:57] <travis-ci> Rakudo build passed. Zoffix Znet 'Add buffering test files to list of files to run'

[05:57] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/290240206 https://github.com/rakudo/rakudo/compare/1e5d6f0d4eee...dd50d0f02efa

[07:00] <[Tux]> I'll try to remember to run the timings later today. System is rather busy and 3.253 -  3.311 is due to system load (I think)

[07:50] <yoleaux> jnthn: write tests for `lazy/hyper/race for foo() { }`

[08:58] <AlexDaniel`> jnthn: maybe RT #132287 is something to look at if you have time

[08:58] <synopsebot> RT#132287 [open]: https://rt.perl.org/Ticket/Display.html?id=132287 [REGRESSION][CONC] stall/block in async heavy code

[09:02] <jnthn> MasterDuke: First one is narrower on second parameter (Regex ~~ Mu) but wider on the 7th (Mu !~~ int), which means they are tied in the candidate sort

[09:11] <Geth> ¦ nqp: bae6331d11 | pmurias++ | 2 files

[09:11] <Geth> ¦ nqp: [jvm] Implement nqp::eqatic

[09:11] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/bae6331d11

[09:11] <Geth> ¦ nqp/master: 5 commits pushed by pmurias++

[09:11] <Geth> ¦ nqp/master: d9269982c1 | [js] When evalling js map a js null to a NQP null

[09:11] <Geth> ¦ nqp/master: 3653ede763 | [js] Fix bug

[09:11] <Geth> ¦ nqp/master: 2e08397208 | [js] Fix and simplify the QAST::Regex quant node

[09:11] <Geth> ¦ nqp/master: c509c7246d | [js] When scanning a string also check at the end

[09:11] <Geth> ¦ nqp/master: 39feb38ee7 | [js] Implement nqp::eqatic

[09:11] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/bae6331d11...39feb38ee7

[09:12] <ilmari> Tux++

[09:13] <Geth> ¦ nqp: 48be669296 | pmurias++ | t/nqp/059-nqpop.t

[09:13] <Geth> ¦ nqp: Test nqp::eqatic

[09:13] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/48be669296

[09:13] <jnthn> That op name always makes me think of a seahorse...

[09:24] <gfldex> m: my @a = do lazy for ^3 { now - FIRST now }; @a».put;

[09:24] <camelia> rakudo-moar dd50d0f02: OUTPUT: «Use of Nil in numeric context␤Instant:1508491513.633690␤Instant:1508491513.639123␤Instant:1508491513.640955␤  in block  at <tmp> line 1␤Use of Nil in numeric context␤  in block  at <tmp> line 1␤Use of Nil in numeric context␤  in block …»

[09:24] <gfldex> where does that Nil come from?

[09:27] <jnthn> Does FIRST work as an r-value?

[09:42] <Geth> ¦ nqp: 18a635e7ae | pmurias++ | src/vm/js/nqp-runtime/io.js

[09:42] <Geth> ¦ nqp: [js] Make open throw a nqp level exception on missing file

[09:42] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/18a635e7ae

[09:42] <Geth> ¦ nqp: cbf4654747 | pmurias++ | t/nqp/019-file-ops.t

[09:42] <Geth> ¦ nqp: Test catching an exception when nqp::open is passed a missing file

[09:42] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cbf4654747

[09:44] <Geth> ¦ nqp: f49799985b | pmurias++ | src/QRegex/Cursor.nqp

[09:44] <Geth> ¦ nqp: Remove workaround for lack of nqp::eqatic on the js and jvm

[09:44] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f49799985b

[09:48] <ilmari> pmurias: does the js version handle nqp::eqatic("ss", "ß", 0)?

[09:48] <travis-ci> NQP build failed. pmurias 'Remove workaround for lack of nqp::eqatic on the js and jvm'

[09:48] <travis-ci> https://travis-ci.org/perl6/nqp/builds/290375667 https://github.com/perl6/nqp/compare/cbf465474743...f49799985bfe

[09:49] <ilmari> JS doesn't seem to have .toFoldCase()

[09:49] <ilmari> nqp: nqp::eqatic("ß","ss",0)

[09:49] <camelia> nqp-moarvm: ( no output )

[09:50] <ilmari> nqp: nqp::say(nqp::eqatic("ß","ss",0))

[09:50] <camelia> nqp-moarvm: OUTPUT: «1␤»

[09:50] <ilmari> nqp-js: nqp::say(nqp::eqatic("ß","ss",0))

[09:50] <camelia> nqp-js: OUTPUT: «/bin/sh: node: command not found␤»

[10:19] <Zoffix> [Tux]: it's possible the in-buffer thing made things slower

[10:20] <Zoffix> well, guaranteed even, just not sure by how much

[10:21] <Geth> ¦ nqp: ba2a1863f9 | pmurias++ | src/QRegex/Cursor.nqp

[10:21] <Geth> ¦ nqp: Revert "Remove workaround for lack of nqp::eqatic on the js and jvm"

[10:21] <Geth> ¦ nqp:

[10:21] <Geth> ¦ nqp: This reverts commit f49799985bfe62dbb421f78473a984fd6cb3da1e.

[10:21] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ba2a1863f9

[10:22] <Zoffix> m: class Foo { has int $!x = 0x100000; method x ($v) { $v.abs }; method y { self.x: 0x100000 } }; my $x = Foo.new; $x.y for ^1000_000; say now - INIT now

[10:22] <camelia> rakudo-moar dd50d0f02: OUTPUT: «0.48197415␤»

[10:22] <Zoffix> m: class Foo { has int $!x = 0x100000; method x ($v) { $v.abs }; method y { self.x: $!x } }; my $x = Foo.new; $x.y for ^1000_000; say now - INIT now

[10:22] <camelia> rakudo-moar dd50d0f02: OUTPUT: «0.77565530␤»

[10:22] <Zoffix> m: say 0.77/.48

[10:22] <camelia> rakudo-moar dd50d0f02: OUTPUT: «1.604167␤»

[10:22] <Zoffix> so buffer replenishing is 1.6x slower

[10:23] <pmurias> ilmari: nqp::say(nqp::eqatic("ß","ss",0)) is broken on the js

[10:24] <pmurias> how do I reboostrap the nqp-j?

[10:25] <Zoffix> m: class Foo { has $!x = 0x100000; method x ($v) { $v.abs }; method y { self.x: $!x } }; my $x = Foo.new; $x.y for ^1000_000; say now - INIT now

[10:25] <camelia> rakudo-moar dd50d0f02: OUTPUT: «0.5604632␤»

[10:25] <Zoffix> need to check whether removing `int` type constraint from in-buffer/out-buffer makes things better or worse

[10:26] <Zoffix> or alternatively, adding `int` type constraint on things where $!in-buffer/$!out-buffer is given

[10:26] <Zoffix> in IO::Handle

[10:30] <pmurias> is normalizing to NFD and taking the first codepoint of that normalization a sane way to implement nqp::ordbaseat?

[11:16] <Zoffix> m: $*IN.in-buffer = 0; say get

[11:16] <camelia> rakudo-moar dd50d0f02: OUTPUT: «Out of range: attempted to read 0 bytes from filehandle␤  in block <unit> at <tmp> line 1␤␤»

[11:17] <Zoffix> Just realized this... there's really no way to turn off in buffering, since we don't really have it. It just feeds the decode

[11:17] <Zoffix> I think I'm gonna revert it. It's really iffy

[11:18] <Zoffix> (no buffering for binary, except for slurp; always buffering for char mode, even tho the "buffer" is just our decoder, etc)

[11:39] <lizmat> hhmmmm... the past 2 make spectests I've run, both hung, but on different files

[11:40] <lizmat> once on S05-match/capturing-contexts.t (test 24)

[11:40] <lizmat> and once on S26-documentation/10-doc-cli.t (test 1)

[11:40] <lizmat> Am I the only one seeing this?

[11:40] * lizmat starts of another spectest run

[11:41] <lizmat> *off

[11:41] <lizmat> *sets

[11:47] <lizmat> hmmm... next run completed ok  :-)

[12:00] <jnthn> pmurias: Yes, that's how MoarVM does it

[12:11] <lizmat> hmmm... intriguing bug that I think Zoffix is going to like

[12:11] <lizmat> put "sub MAIN(:$foo) { .say for lines }" into a file, e.g. foo.pl

[12:12] <lizmat> then run the file with "perl6 foo.pl <some_other_file"

[12:12] <lizmat> it will show the lines from some_other_file

[12:12] <lizmat> now run it with:

[12:12] <lizmat> then run the file with "perl6 foo.pl --foo <some_other_file"

[12:13] <lizmat> and get: Failed to open file /Users/liz/Github/rakudo.moar/--foo: No such file or directory

[12:13] <Zoffix> lizmat: not a bug and will be changed in 6.d: https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md#make-argfiles--in-or-ioargfilesnewin-inside-main

[12:14] <Zoffix> well, not a bug in a sense that nothing's broken. Everything works as advertized, except it's not useful, since @*ARGS are fed into MAIN

[12:15] <Zoffix> sub MAIN(:$foo) { .say for $*IN.lines } will workaround it in 6.c

[12:16] <lizmat> ok, so I'll just @*ARGS.pop   :-(

[12:17] <Zoffix> or sub MAIN(:$foo) { $*ARGFILES = IO::CatHandle.new: $*IN;  .say for lines }

[12:17] <Zoffix> (might need `my` on `$*ARGFILES`)

[12:20] <Zoffix> Weird. Stresstest hung. Killed it after 354s, but it still says "pass"

[12:21] <Zoffix> with 2 TODOs in t/spec/S12-construction/destruction.t passing too

[12:22] * lizmat just added a --hyper option to Tux's test-t, making it 2x as fast

[12:23] <[TuxCM]> Whoosh ...

[12:23] <lizmat> so what would be the best way to share an object between all elements of a batch

[12:23] <lizmat> ?

[12:23] <stmuk_> I can't install DBIsh on moar-blead

[12:23] <lizmat> case in point:

[12:24] <Zoffix> stmuk_: are you sure you got latest rakudo? I fixed a bug yesterday in NativeCall that prevented DBIish's installation

[12:24] <lizmat> lines.hyper.map: { my $csv = Text::CSV.new; $csv.parse($_) }

[12:24] <lizmat> I'd like the $csv to be shared by all calls from the same batch

[12:24] <stmuk_> This is Rakudo version 2017.09-464-gdd50d0f02 built on MoarVM version 2017.09.1-608-ge051ee3c

[12:25] <Zoffix> m: $*PERL.compiler.version.say

[12:25] <camelia> rakudo-moar dd50d0f02: OUTPUT: «v2017.09.464.gdd.50.d.0.f.02␤»

[12:25] <Zoffix> stmuk_: what's the error?

[12:26] <lizmat> doing: lines.hyper.map: { my $csv = once Text::CSV.new; $csv.parse($_) }

[12:26] <lizmat> fails spectacularly: moar(28720,0x70000c501000) malloc: *** error for object 0x7f925bd014f0: double free

[12:27] <Zoffix> stresstest hung again; htop shows it's S17-promise/lock-asyunc-stress1 and 2 that are still running.

[12:27] * Zoffix gives them a few more minutes

[12:27] <Zoffix> S17-promise/lock-async-stress1.t and S17-promise/lock-async-stress2.t I mean

[12:28] <Zoffix> zero CPU use tho

[12:29] <stmuk_> https://gist.github.com/stmuk/50bd08160f9d555b2dd259aa65ae33ca

[12:31] <Zoffix> "constant is-win = Rakudo::Internals.IS-WIN();"  seriously?

[12:31] * Zoffix 's distaste for DBIish grown stronger now

[12:35] <jnthn> lizmat: Make the instnace of the object outside of the map block

[12:35] <jnthn> lizmat: But it will only work if Test::CSV is a threadsafe object

[12:36] <jnthn> Which, if it's stateful on the inside, it won't be

[12:36] <jnthn> I think for map I might set it up to closure-clone the block per worker though, so that once/state will be per batch

[12:37] <jnthn> So those don't end up shared between threads

[12:39] <lizmat> Text::CSV is not threadsafe

[12:39] <stmuk_> the gist updated with -v output

[12:39] <Zoffix> stmuk_: how did you make it? Does zef have an option for that?

[12:40] <stmuk_> zef -v install

[12:40] <lizmat> jnthn: "once my $csv = Text::CSV.new;" fails because at some point $csv is not initialized

[12:40] <lizmat> and "my $csv = once Text::CSV.new" crashes with a double free error

[12:41] <jnthn> You just said yourself that Test::CSV is not threadsafe

[12:41] <jnthn> And it's long known that state/once ain't

[12:41] <lizmat> "so that once/state will be per batch"  is what you just said ?

[12:41] <jnthn> Yes, that's a proposal

[12:41] <lizmat> aaaah

[12:41] <lizmat> ok

[12:42] <jnthn> Though it might be a good one :)

[12:42] <lizmat> well, that would make sense

[12:42] <lizmat> yes, I think that would make sense  :-)

[12:42] <lizmat> and a good one  :-)

[12:46] <Geth> ¦ rakudo/nom: e0dabacad2 | (Zoffix Znet)++ | t/spectest.data

[12:46] <Geth> ¦ rakudo/nom: Remove in-buffer tests

[12:46] <Geth> ¦ rakudo/nom:

[12:46] <Geth> ¦ rakudo/nom: - The feature getting the axe for now

[12:46] <Geth> ¦ rakudo/nom: - The tests were added a day ago; not part of 6.c-errata

[12:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e0dabacad2

[12:46] <Geth> ¦ rakudo/nom: 7a2561c24b | (Zoffix Znet)++ | 2 files

[12:46] <Geth> ¦ rakudo/nom: Revert "Implement knob to weak IO::Handle input buffer"

[12:46] <Geth> ¦ rakudo/nom:

[12:46] <Geth> ¦ rakudo/nom: This reverts commit 1e5d6f0d4eee9d3d6b02d064063ed2e633207bd5.

[12:46] <Geth> ¦ rakudo/nom:

[12:46] <Geth> ¦ rakudo/nom: The current implementation of the feature is a bit iffy, so

[12:46] <Geth> ¦ rakudo/nom: I'm reverting it for now. Problems:

[12:46] <Geth> ¦ rakudo/nom:

[12:46] <Geth> ¦ rakudo/nom: <…commit message has 7 more lines…>

[12:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7a2561c24b

[12:46] <Geth> ¦ roast: a61110535d | (Zoffix Znet)++ | S32-io/in-buffering.t

[12:46] <Geth> ¦ roast: Remove in-buffer tests

[12:46] <Geth> ¦ roast:

[12:46] <Geth> ¦ roast: Tests were added a day ago and aren't part of 6.c-errata.

[12:46] <Geth> ¦ roast:

[12:46] <Geth> ¦ roast: Feature currently reverted for reasons[^1]

[12:46] <Geth> ¦ roast:

[12:46] <Geth> ¦ roast: [1]

[12:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a61110535d

[12:46] <Zoffix> [1] https://github.com/rakudo/rakudo/commit/7a2561c24b

[12:48] <timotimo> pmurias: actually there's situations where the first piece of NFD is *not* the base character, because now unicode has "prepend" combining codepoints that go in front

[12:53] <timotimo> i wonder if we can get "once" run in parallel to not segfault

[12:53] <Zoffix> .ask [Coke] what was the judgement for "unneeded" in https://github.com/perl6/doc/commit/0b5126a5772e5047cbd9acda83be81e4b9da8d10 ? There were many IO::Handle tests unskipped and they create files on the filesystem. Seems skipping is advisable

[12:53] <yoleaux> Zoffix: I'll pass your message to [Coke].

[12:54] <timotimo> we usually want users to be incapable of segfaulting (or otherwise crashing) the VM without using NativeCall

[12:55] <jnthn> timotimo: It's not gonna be once doing that, it'll be something inside of Text::CSV, and almost certainly will boil down to the usual suspects of VMArray and VMHash

[12:56] <Zoffix> doing bumps. Gonna need them anyway soon for release testing and will make it easier to debug stmuk_'s bug

[12:56] <timotimo> ah, that's fair then

[12:56] * lizmat looks into it further

[12:57] <stmuk> not "my" bug now :)

[12:58] <Zoffix> "nothing to commit, working directory clean"

[12:58] <Zoffix> Actually, we're already on moar-master

[12:59] <lizmat> jnthn: would this workaround be ok:

[12:59] <lizmat> outside of hyper: my @CSV[64];  # store for CSV objects / thread

[12:59] <lizmat> inside hyper: my $csv = @CSV[$*THREAD.id] //= Text::CSV.new;

[12:59] <timotimo> lizmat: why not map over a list of Text::CSV instances and just use $_

[13:00] <timotimo> oh, because you don't know the number of threads it'll spawn

[13:00] <lizmat> timotimo: que?  normally, in test-t, there's only one Text::CSV object

[13:01] <lizmat> in any case, this brings it down from 1.5 seconds to 1.1 seconds for me

[13:02] <timotimo> rather than guess how many threads there'll be, i'd probably lock additions to that array?

[13:02] <lizmat> timotimo: still wouldn't know which worker would need which object ?

[13:02] <timotimo> because right now if you run it on a 128 core machine it'll crash again :)

[13:02] <lizmat> well, yes

[13:04] <lizmat> my @CSV[$*SCHEDULER.max_threads]   #  voila

[13:04] <lizmat> timotimo: that should be save, no ?   ^^^

[13:04] <lizmat> *safe

[13:05] <timotimo> sounds good

[13:07] <jnthn> lizmat: Just fix it like I said ;)

[13:07] <jnthn> https://github.com/rakudo/rakudo/blob/nom/src/core/Rakudo/Internals/HyperRaceSharedImpl.pm#L39

[13:07] <jnthn> Here, declared my $mapper = $!mapper.clone();

[13:07] <Zoffix> .tell AlexDaniel` when I stresstest on my 24-core VM, S17-promise/lock-async-stress.t and S17-promise/lock-async-stress2.t look to hang (waited up to 700s, where normal stresstest takes ~150s). Tho when I run them individually, they pass (each takes ~50s to run). Based on logs, 2 days ago this did not happen: https://irclog.perlgeek.de/perl6-dev/2017-10-18#i_15317839

[13:07] <yoleaux> Zoffix: I'll pass your message to AlexDaniel`.

[13:07] <jnthn> And then call that inside of the block instead of the attr

[13:08] <AlexDaniel`> .

[13:08] <jnthn> oh, they have the & sigil

[13:08] <yoleaux> 13:07Z <Zoffix> AlexDaniel`: when I stresstest on my 24-core VM, S17-promise/lock-async-stress.t and S17-promise/lock-async-stress2.t look to hang (waited up to 700s, where normal stresstest takes ~150s). Tho when I run them individually, they pass (each takes ~50s to run). Based on logs, 2 days ago this did not happen: https://irclog.perlgeek.de/perl6-dev/2017-10-18#i_15317839

[13:08] <Zoffix> AlexDaniel`: "look to hang" => I see them both in `htop` as the only remaining test files and there's zero CPU use

[13:10] * Zoffix reverts two Promise-affecting commits and tries again

[13:10] <Zoffix> This run: 540 wallclock secs  before I killed it

[13:11] <timotimo> is one of them mine?

[13:11] <Zoffix> Two of them yeah: ee3f0f4fb8bf09c14c4ef26c9b9dc648985b19de 270e7c8a72351c8aa4edfc8f52463bbf51bf09c6 f980cdafe4a2ef103d32e25a9276d972c3cd57aa

[13:12] <Zoffix> Trying right now with those three reverted

[13:13] <lizmat> Zoffix: if reverting those 3 fixes it, then I suggest with just reverting mine

[13:13] <lizmat> I don't think timotimo's changes could affect anything

[13:15] <AlexDaniel`> well if it works without these three then I guess it wouldn't be too hard to bisect

[13:17] <Zoffix> yup, completed now in Files=1282, Tests=152759, 153 wallclock secs (21.52 usr  3.34 sys + 3283.92 cusr 168.13 csys = 3476.91 CPU)

[13:17] * Zoffix tries with just the f980cdafe4a2 remnoved

[13:17] <timotimo> wow, that's fascinating

[13:19] <lizmat> if that fixes it, I suspect some deep gremlins wrt "is default" :-(

[13:19] <timotimo> ;(

[13:21] <AlexDaniel`> heh, a lot of fun stuff going on here :)

[13:23] <AlexDaniel`> by the way, everyone did a great job this month! Still working on the changelog… :)

[13:23] <Zoffix> \o/

[13:23] <Zoffix> ZOFVM: Files=1282, Tests=152761, 153 wallclock secs (21.30 usr  3.30 sys + 3297.22 cusr 167.33 csys = 3489.15 CPU)

[13:24] <timotimo> fwiw, i don't think i did a full spec test run after changing the default values for .keep() and .break()

[13:24] <timotimo> that wasn't great

[13:24] <Zoffix> spectest wouldn't help as these two are stresstests :)

[13:25] <timotimo> right, but there could have been places that indirectly rely on the values

[13:25] <Geth> ¦ rakudo/nom: d20e972a12 | (Zoffix Znet)++ | src/core/Promise.pm

[13:25] <Geth> ¦ rakudo/nom: Revert "Make creating a Promise a bit cheaper"

[13:25] <Geth> ¦ rakudo/nom:

[13:25] <Geth> ¦ rakudo/nom: This reverts commit f980cdafe4a2ef103d32e25a9276d972c3cd57aa.

[13:25] <Geth> ¦ rakudo/nom:

[13:25] <Geth> ¦ rakudo/nom: This commit appears to cause reproducible stresstest hangs in

[13:25] <Geth> ¦ rakudo/nom: S17-promise/lock-async-stress.t and S17-promise/lock-async-stress2.t

[13:25] <Geth> ¦ rakudo/nom:

[13:25] <Geth> ¦ rakudo/nom: IRC: https://irclog.perlgeek.de/perl6-dev/2017-10-20#i_15329963

[13:25] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d20e972a12

[13:25] <AlexDaniel`> Zoffix++

[13:25] <AlexDaniel`> what about that DBIish issue?

[13:26] <Zoffix> I reproed it on its travis

[13:28] <Zoffix> Filed potential is default gremlins as RT#132326

[13:28] <synopsebot> RT#132326 [new]: https://rt.perl.org/Ticket/Display.html?id=132326 Potential issue with `is default` and Promises

[13:29] <jnthn> It'll probably be lazy attribute initialization

[13:30] <lizmat> jnthn: but "is default" init isn't lazy ?

[13:30] <lizmat> is it?

[13:31] <lizmat> hmmm

[13:31] <jnthn> Attribute scalar container creation is

[13:31] <jnthn> Down in The Guts

[13:31] <jnthn> But I'd like to kill that off

[13:31] <jnthn> It makes every attribute access more expensive

[13:32] <lizmat> so how would you like to fix that ?

[13:32] <jnthn> I don't know yet.

[13:32] <lizmat> ah, ok  :-)

[13:32] <lizmat> is cloning a container atomic ?

[13:33] <lizmat> or could it be ?

[13:33] <timotimo> cloning could cause a GC run

[13:34] <lizmat> ah, ok, so cratch that then  :-)

[13:34] <timotimo> i don't think anything that allocates from gc memory can easily be made atomic

[13:34] <timotimo> actually, what does atomic mean here ...

[13:35] <jnthn> The problem isn't the cloning of the container, it's the time between checking if we have one, and installing the clone

[13:35] <lizmat> that no other thread could access that container when half initialized

[13:40] <Zoffix> AlexDaniel`: DBIish failures are segfaults. Full output: https://gist.github.com/zoffixznet/4ded7a07a0c162dc5a8c411bd3d3975d

[13:40] <Zoffix> All three failing test files segfault

[13:41] <Zoffix> perl6 -Ilib t/40-sqlite-common.t # segfaults after 11th test

[13:41] <Zoffix> 100% reliability

[13:41] * Zoffix & for a few hours

[13:43] <Geth> ¦ rakudo/nom: d37a19ea83 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals/HyperRaceSharedImpl.pm

[13:43] <Geth> ¦ rakudo/nom: Make 'once' work in hypered/raced blocks, jnthn++

[13:43] <Geth> ¦ rakudo/nom:

[13:43] <Geth> ¦ rakudo/nom: - by cloning the mapper for each batch

[13:43] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d37a19ea83

[13:47] <Zoffix> t/spec/S07-hyperrace/hyper.t also hung now. I killed stresstrest after 232s; passes on its own

[13:48] * Zoffix will run a few more stresstests later tonight

[13:48] <Zoffix> This is on 2017.09-467-gd20e972

[13:48] <Zoffix> (freshly cloned)

[13:48] * Zoffix &

[13:51] <lizmat> Zoffix: just ran a stresstest, and no hang, but one fail: MISC/bug-coverage-stress.t (test 3)

[14:11] <AlexDaniel`> alright

[14:11] <AlexDaniel`> soooooo

[14:11] <AlexDaniel`> c: 2017.09,HEAD https://gist.githubusercontent.com/AlexDaniel/13a57dbb993d624c877befc137c33ee6/raw/a575bf2e04e24ced60b35665a4ec5a3324369c47/dbiish.p6

[14:11] <committable6> AlexDaniel`, Successfully fetched the code from the provided URL.

[14:11] <committable6> AlexDaniel`, https://gist.github.com/8646c6815619ad858bc01fad44a4b30f

[14:11] <buggable> New CPAN upload: Color-Names-1.001001.tar.gz by HOLLI https://cpan.metacpan.org/authors/id/H/HO/HOLLI/Perl6/Color-Names-1.001001.tar.gz

[14:12] <AlexDaniel`> sooo yeah

[14:12] <AlexDaniel`> bisect: old2017.09 https://gist.githubusercontent.com/AlexDaniel/13a57dbb993d624c877befc137c33ee6/raw/a575bf2e04e24ced60b35665a4ec5a3324369c47/dbiish.p6

[14:12] <bisectable6> AlexDaniel`, On both starting points (old=2015.12 new=d37a19e) the exit code is 1 and the output is identical as well

[14:12] <bisectable6> AlexDaniel`, Output on both points: «04===SORRY!04=== Error while compiling /tmp/xNaBDpld7m␤Malformed postfix call␤at /tmp/xNaBDpld7m:1␤------> 03old2017.08⏏0409 https://gist.githubusercontent.com/Al»

[14:12] <AlexDaniel`> ooops

[14:12] <AlexDaniel`> bisect: old=2017.09 https://gist.githubusercontent.com/AlexDaniel/13a57dbb993d624c877befc137c33ee6/raw/a575bf2e04e24ced60b35665a4ec5a3324369c47/dbiish.p6

[14:12] <bisectable6> AlexDaniel`, Successfully fetched the code from the provided URL.

[14:12] <bisectable6> AlexDaniel`, Bisecting by exit signal (old=2017.09 new=d37a19e). Old exit signal: 0 (None)

[14:13] <AlexDaniel`> why so slow? Because precomp

[14:13] <bisectable6> AlexDaniel`, bisect log: https://gist.github.com/68741e55bc632f1b2d2d969513384dfd

[14:13] <bisectable6> AlexDaniel`, (2017-10-18) https://github.com/rakudo/rakudo/commit/ff063e7b53ab41b79279ffc38e1740d3db2eae7d

[14:13] <AlexDaniel`> let's double-check

[14:14] <timotimo> AlexDaniel`: were you meaning to be in whateverable? ;)

[14:14] <AlexDaniel`> commit: ff063e7b53^,ff063e7b53 https://gist.githubusercontent.com/AlexDaniel/13a57dbb993d624c877befc137c33ee6/raw/a575bf2e04e24ced60b35665a4ec5a3324369c47/dbiish.p6

[14:14] <committable6> AlexDaniel`, Successfully fetched the code from the provided URL.

[14:14] <timotimo> (i have no clue what exactly you're doing)

[14:14] <committable6> AlexDaniel`, https://gist.github.com/e25c6a14d6078e99f6bb46de494565b1

[14:14] <AlexDaniel`> timotimo: not really, someone said that DBIish tests are failing

[14:15] <AlexDaniel`> Geth: ver https://github.com/rakudo/rakudo/commit/ff063e7b53ab41b79279ffc38e1740d3db2eae7d

[14:15] <Geth> AlexDaniel`, version bump brought in these changes: https://github.com/perl6/nqp/compare/2017.09-98-g81c890c...2017.09-99-g254d590

[14:15] <AlexDaniel`> Geth: ver https://github.com/perl6/nqp/commit/254d590bf44fcc8a3a9cac2ec3da18708c68f9f0

[14:15] <Geth> AlexDaniel`, version bump brought in these changes: https://github.com/MoarVM/MoarVM/compare/2017.09.1-602-g676723d...2017.09.1-608-ge051ee3

[14:15] <timotimo> right

[14:15] <AlexDaniel`> nine: any ideas? ↑

[14:17] <Geth> ¦ rakudo/nom: 870eaa316a | (Elizabeth Mattijsen)++ | 5 files

[14:17] <Geth> ¦ rakudo/nom: Optimize hyper/race a bit

[14:17] <Geth> ¦ rakudo/nom:

[14:17] <Geth> ¦ rakudo/nom: - use prefix ++ instead of postfix ++ in sink contexts

[14:17] <Geth> ¦ rakudo/nom: - start at -1 instead of 0, allowing use of prefix ++

[14:17] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/870eaa316a

[14:17] <AlexDaniel`> oh, so we can try with MVM_JIT_DISABLE maybe?

[14:18] <AlexDaniel`> commit: MVM_JIT_DISABLE=1 ff063e7b53^,ff063e7b53 https://gist.githubusercontent.com/AlexDaniel/13a57dbb993d624c877befc137c33ee6/raw/a575bf2e04e24ced60b35665a4ec5a3324369c47/dbiish.p6

[14:18] <committable6> AlexDaniel`, Successfully fetched the code from the provided URL.

[14:18] <committable6> AlexDaniel`, https://gist.github.com/24319e448313c13c16d8b67d7961accb

[14:18] <AlexDaniel`> yup.

[14:20] <nine> AlexDaniel`: can you find out which of those commits is guilty?

[14:20] <yoleaux> 18 Oct 2017 20:55Z <japhb> nine: Should nqp/rakudo bump their moarvm version to catch your nativecall jit improvements?  I would think we should test more before the release, unless it needs more work to be stable again.

[14:21] <AlexDaniel`> nine: only manually. Want me to do it?

[14:22] <nine> AlexDaniel`: please. I'm a bit under the weather unfortunately

[14:22] <AlexDaniel`> nine: alright, I'll get back to you in ≈1h

[14:23] <AlexDaniel`> meanwhile here's a ticket to track the progress: RT #132328

[14:23] <synopsebot> RT#132328 [new]: https://rt.perl.org/Ticket/Display.html?id=132328 [SEGV][REGRESSION] DBIish tests are failing spectacularly (JIT compilation of native calls)

[14:31] <buggable> New CPAN upload: Color-Names-1.001002.tar.gz by HOLLI https://cpan.metacpan.org/authors/id/H/HO/HOLLI/Perl6/Color-Names-1.001002.tar.gz

[14:34] <[Coke]> Zoffix: the skips were unneeded, because that code all compiled.

[14:34] <yoleaux> 12:53Z <Zoffix> [Coke]: what was the judgement for "unneeded" in https://github.com/perl6/doc/commit/0b5126a5772e5047cbd9acda83be81e4b9da8d10 ? There were many IO::Handle tests unskipped and they create files on the filesystem. Seems skipping is advisable

[14:35] <AlexDaniel`> samcv: fyi there's an issue with moarvm RT #132328

[14:35] <synopsebot> RT#132328 [new]: https://rt.perl.org/Ticket/Display.html?id=132328 [SEGV][REGRESSION] DBIish tests are failing spectacularly (JIT compilation of native calls)

[14:35] <[Coke]> so for those few that were generating files, we can re-skip those. it would be nice if we could add a reason to the skip-test

[14:35] <Zoffix> [Coke]: ahhh. Got it

[14:35] <[Coke]> ... except they shouldn't be generating files.

[14:35] <[Coke]> because we're just checking to see if the code compiles with:

[14:35] <AlexDaniel`> [Coke]: for now you can leave a regular pod comment maybe

[14:35] <Zoffix> [Coke]: right, they'd generate files only during run time. I didn't consider that we're only compiling

[14:36] <[Coke]> https://github.com/perl6/doc/blob/master/xt/examples-compilation.t#L85

[14:36] <Zoffix> lizmat: does MISC/bug-coverage-stress.t fail all the time?

[14:36] <[Coke]> (it's code wrapped in an if False { ... } and a few other things, but unless it's got a BEGIN it's not going to run.

[14:36] <Zoffix> Like if you run it on its own; t/fudgeandrun MISC/bug-coverage-stress.t

[14:37] <[Coke]> AlexDaniel`: a pod comment that says what?

[14:37] <[Coke]> I would argue it's not needed.

[14:37] <AlexDaniel`> [Coke]: with a reason for skip-test

[14:37] <[Coke]> skip-test *takes an arg*.

[14:37] <[Coke]> please use that mechanism which is documented rather than adding in a comment that isn't attached to anything.

[14:38] <AlexDaniel`> aaah sorry I misunderstood you

[14:38] <[Coke]> https://github.com/perl6/doc/blob/master/EXAMPLES.md

[14:38] <[Coke]> \o/

[14:38] * AlexDaniel` runs back to his git bisect paradise

[14:41] <jnthn> Righty, those tests I was gonna write...

[14:42] <[TuxCM]> Before merge of Liz' work ...

[14:42] <[TuxCM]> This is Rakudo version 2017.09-467-gd20e972a1 built on MoarVM version 2017.09.1-608-ge051ee3c

[14:42] <[TuxCM]> csv-ip5xs        1.158 -  1.167

[14:42] <[TuxCM]> test             8.391 -  8.468

[14:42] <[TuxCM]> test-t           3.101 -  3.105

[14:42] <[TuxCM]> csv-parser      11.610 - 11.751

[14:47] <[TuxCM]> Liz, --hyper causes a core dump

[14:48] <[TuxCM]> double free corruption

[14:48] <Zoffix> [TuxCM]: it's likely fixed on 468

[14:51] <Geth> ¦ roast: 4a6da2ce57 | (Jonathan Worthington)++ | S07-hyperrace/for.t

[14:51] <Geth> ¦ roast: Test `hyper for`, `race for`, and `for` semantics

[14:51] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4a6da2ce57

[14:52] <Geth> ¦ rakudo/nom: 527b88816a | (Jonathan Worthington)++ | t/spectest.data

[14:52] <Geth> ¦ rakudo/nom: Run S07-hyperrace/for.t

[14:52] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/527b88816a

[14:52] <AlexDaniel`> nine: hello again! It's https://github.com/MoarVM/MoarVM/commit/4eadf94599cc021ec7a9e0e49e198f5861468dc1 (works just fine on its parent and segfaults on that commit)

[14:57] <AlexDaniel`> trisectable6: where are you? :)

[14:57] <bisectable6> AlexDaniel`, On both starting points (old=2015.12 new=870eaa3) the exit code is 1 and the output is identical as well

[14:57] <bisectable6> AlexDaniel`, Output on both points: «04===SORRY!04=== Error while compiling /tmp/fG7RI7XGeI␤Unsupported use of ? and : for the ternary conditional operator; in Perl 6 please use ?? and !!␤at /tmp/fG7RI7XGeI:1␤------> 03where are you?08⏏04 :)»

[14:57] <AlexDaniel`> …

[14:57] <Geth> ¦ roast: 3659ede149 | (Jonathan Worthington)++ | S04-statements/for.t

[14:57] <Geth> ¦ roast: Test lazy for loops

[14:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3659ede149

[14:58] <jnthn> There we go, yesterdays commits testified :)

[14:58] <jnthn> Well, my ones at least :-)

[14:59] <timotimo> mine have testing, too

[14:59] <jnthn> nice :)

[15:00] <timotimo> well, i only made the promise stuff

[15:00] <timotimo> i promised, and i delivered

[15:00] <timotimo> so, what's the over/under of your promise delivery? :P

[15:05] <nine> AlexDaniel`: I pushed a revert of that commit

[15:10] <AlexDaniel`> nine: confirming that it works after a revert

[15:10] <Geth> ¦ rakudo/nom: 7e9b9633d6 | (Jonathan Worthington)++ | src/core/RaceSeq.pm

[15:10] <Geth> ¦ rakudo/nom: Fix copy-pasta spotted by b2gills++

[15:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7e9b9633d6

[15:11] * Zoffix bumps

[15:13] <AlexDaniel`> Zoffix: thanks

[15:14] <AlexDaniel`> OK I'll be away for an hour or two, .tell me if there are any issues meanwhile

[15:14] <AlexDaniel`> fwiw I will run toaster tonight (unless somebody beats me to it)

[15:15] <AlexDaniel`> Zoffix: ah, so what's up with IRC::Client?

[15:15] <AlexDaniel`> any new info?

[15:15] <AlexDaniel`> or old info maybe, I didn't really follow it

[15:16] <Zoffix> AlexDaniel`: I didn't get a chance to investigate what's up with it. Planning to do that in 6h

[15:16] <AlexDaniel`> Zoffix: OK, thank you

[15:18] <AlexDaniel`> here's a wild guess, what if it's just output buffering?

[15:18] <AlexDaniel`> no, probably not, nevermind

[15:19] <Zoffix> ZOFFLOP: t/spec/S11-modules/require.t

[15:19] <Zoffix> ZOFFLOP: TODO PASS: t/spec/S12-construction/destruction.t

[15:20] <Geth> ¦ nqp: 252fd89025 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[15:20] <Geth> ¦ nqp: Bump MoarVM

[15:20] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/252fd89025

[15:20] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.09.1-608-ge051ee3...2017.09.1-609-g1a9be0a

[15:20] <Geth> ¦ rakudo/nom: 6726d4af20 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[15:20] <Geth> ¦ rakudo/nom: Bump NQP

[15:20] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6726d4af20

[15:20] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.09-99-g254d590...2017.09-116-g252fd89

[15:24] <Geth> ¦ rakudo/nom: da977785c6 | (Jonathan Worthington)++ | src/core/Rakudo/Internals/HyperRaceSharedImpl.pm

[15:24] <Geth> ¦ rakudo/nom: Replicate the `map` clone-per-batch in `grep` too

[15:24] <Geth> ¦ rakudo/nom:

[15:24] <Geth> ¦ rakudo/nom: This splitting up also removes a level of indirection for the common

[15:24] <Geth> ¦ rakudo/nom: block case of hyper/race grep, and thus should speed things up a bit

[15:24] <Geth> ¦ rakudo/nom: in that case also.

[15:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/da977785c6

[15:29] <jnthn> Alright, I think that's all I've time/energy for this week

[15:30] <lizmat> Zoffix: MISC/bug-coverage-stress.t runs fine by itself

[15:30] <lizmat> afk&

[15:30] <timotimo> have fun on your vacay, jnthn :)

[15:30] <jnthn> timotimo: Thanks! :) Will be away Sun-Wed afternoon

[15:30] <lizmat> jnthn: have fun!

[15:30] <jnthn> Thanks :)

[15:46] <Zoffix> lizmat: weird. Don't see anything iffy about the test. It's not timing based. So it's possible the failure might indicate the bug it covers isn't fully fixed :/ https://github.com/perl6/roast/blob/master/MISC/bug-coverage-stress.t#L50-L67

[15:53] * Zoffix sticks it into    while t/fudgeandrun MISC/bug-coverage-stress.t; do true; done   while doing @other-things

[15:54] <Zoffix> ZOFFLOP: t/spec/S11-modules/require.t (test 11)

[15:55] <AlexDaniel`> goddamn require.t

[15:56] <Zoffix> heh, well got a failure in it, but in test 1, not 3.  and it's a doesn't-hang() test so it might've just took too long

[15:58] <Zoffix> ZOFVM: Files=1283, Tests=152770, 153 wallclock secs (21.36 usr  3.42 sys + 3228.20 cusr 165.37 csys = 3418.35 CPU)

[15:59] <AlexDaniel`> quotable6: ZOFFLOP

[15:59] <quotable6> AlexDaniel`, OK, working on it! This may take up to three minutes (4412528 messages to process)

[15:59] <quotable6> AlexDaniel`, Found nothing!

[15:59] <AlexDaniel`> *facepalm*

[16:21] <Zoffix> still no failures in MISC/bug-coverage-stress.t; killing the VM

[16:39] <Zoffix> c: 2017.09,HEAD say so 'abc' ~~ /:r a [ b+ || bc ] $ /;

[16:39] <committable6> Zoffix, ¦2017.09: «True» ¦HEAD(da97778): «False»

[16:39] <Zoffix> So here's the golfed IRC::Client issue.

[16:39] <Zoffix> I've no idea which version is correct

[16:39] <Zoffix> moritz: do you know if the above is meant to match or not? How does the ratches thing works?

[16:40] <Zoffix> samcv: or you, do you know? I think this change was introed by your commit

[16:41] <Zoffix> *ratched

[16:41] <Zoffix> ZofBot: you so ratchet

[16:41] <ZofBot> Zoffix, The fiend hath prick'd down Bardolph irrecoverable; and his face is Lucifer's privy-kitchen, where he doth nothing but roast malt-worms

[16:46] <AlexDaniel`> Actually the change was introduced by smls I think

[16:46] <Zoffix> Oh

[16:46] <AlexDaniel`> maybe https://github.com/perl6/nqp/commit/263257a9c73c9a0101faa073d5e0e3cdfc9c7a64 or https://github.com/perl6/nqp/commit/ba165c8d9a1a5bb17841a0fcf2334b8993251155

[16:47] <AlexDaniel`> RT #130117

[16:47] <synopsebot> RT#130117 [resolved]: https://rt.perl.org/Ticket/Display.html?id=130117 [TESTNEEDED] [REGEX] Sequential alternation `||` does not respect `:ratchet`

[16:47] <AlexDaniel`> RT #131973

[16:47] <synopsebot> RT#131973 [resolved]: https://rt.perl.org/Ticket/Display.html?id=131973 [TESTNEEDED] [REGEX] Backtracking modifiers on individual atoms fail to override a regex-global `:ratchet` modifier.

[16:47] <Zoffix> Ohh

[16:48] <Zoffix> Well, then to throw a spanner into ratchet.. what about this case:

[16:48] <Zoffix> c: 2017.09,HEAD say so 'abc' ~~ /:r a [ b**2 || bc ] $ /;

[16:48] <committable6> Zoffix, ¦2017.09,HEAD(da97778): «True»

[16:48] <Zoffix> How come this backtracks?

[16:48] <Zoffix> c: 2017.09,HEAD say so 'abc' ~~ /:r a [ b**{1..2} || bc ] $ /;

[16:48] <committable6> Zoffix, ¦2017.09: «True» ¦HEAD(da97778): «False»

[16:48] <AlexDaniel`> oh, that's my ticket even! I've been searching for it…

[16:48] <Zoffix> Oh, never mind

[16:49] <Zoffix> Well, I don't get how this works, but at least 1..2 range has same behaviour as +

[16:51] <Zoffix> Gonna fix IRC::Client in $n hours

[16:51] <Zoffix> ZofBot: take care, bruhg

[16:51] <ZofBot> Zoffix, ''Ark at 'im! Calls 'isself a barman and don't know what a pint is! Why, a pint's the 'alf of a quart, and there's four quarts to the gallon

[16:51] <AlexDaniel`> Zoffix: ok, well what part exactly? b**2 attempts to match two b's, so it never succeeds (and therefore tries bc)

[16:52] <Zoffix> AlexDaniel`: but does it need to backtrack to do the "therefore" part?

[16:52] <Zoffix> And if not, how come b+ does?

[16:52] <AlexDaniel`> c: 2017.09,HEAD say so 'abc' ~~ /:r a [ b+ || bc ] $ /;

[16:52] <committable6> AlexDaniel`, ¦2017.09: «True» ¦HEAD(da97778): «False»

[16:52] <AlexDaniel`> b+ matches one b, so it moves forward

[16:53] <AlexDaniel`> and fails on $ because there's c

[16:53] <Zoffix> Ah, I get it now. Thanks

[16:53] * Zoffix &

[16:54] <AlexDaniel`> so it seems that IRC::Client is wrong and rakudo on HEAD is right, but how many people were relying on the previous behavior? :S

[17:21] <buggable> New CPAN upload: Color-Named-1.001001.tar.gz by HOLLI https://cpan.metacpan.org/authors/id/H/HO/HOLLI/Perl6/Color-Named-1.001001.tar.gz

[17:40] <Zoffix> ZofBot: killall adobe

[17:40] <ZofBot> Zoffix, We are the dead

[17:41] <Zoffix> What a stupid update system. It sits and waits for you to click "Update" and doesn't let you launch without updating, which of course results in you going in to launch an app to do $work and instead you sit and wait half an hour for an update to finish

[17:42] <[Coke]> Zoffix: sounds like playstation update process. :)

[17:42] <Zoffix> :)

[17:51] <buggable> New CPAN upload: Color-Named-1.001002.tar.gz by HOLLI https://cpan.metacpan.org/authors/id/H/HO/HOLLI/Perl6/Color-Named-1.001002.tar.gz

[17:51] <buggable> New CPAN upload: Color-Names-1.001003.tar.gz by HOLLI https://cpan.metacpan.org/authors/id/H/HO/HOLLI/Perl6/Color-Names-1.001003.tar.gz

[17:51] <buggable> New CPAN upload: Operator-grandpa-1.001001.tar.gz by HOLLI https://cpan.metacpan.org/authors/id/H/HO/HOLLI/Perl6/Operator-grandpa-1.001001.tar.gz

[18:47] <moritz> m: say so 'abc' ~~ /:r a [b+ || bc]/

[18:47] <camelia> rakudo-moar da977785c: OUTPUT: «True␤»

[18:47] <yoleaux> 18:12Z <Zoffix> moritz: why doesn't this pick the longest match of "if else"? m: my $if-st = rule { 'if' | 'if' 'else' };  say "if else" ~~ $if-st;

[18:47] <yoleaux> 18:22Z <Zoffix> moritz: even more weird here where overridden <ws> doesn't match, but a brand new token with same definition matches: https://irclog.perlgeek.de/perl6/2017-10-20#i_15331627

[18:48] <moritz> Zoffix: if the default ws terminates LTM

[18:48] <moritz> s/if//

[18:48] <timotimo> when's the "oh no we missed something we have to build a point release" thing going to start this time :P

[18:49] <Zoffix> Ohhh.

[18:49] <moritz> m: say so 'abc' ~~ /:r a [b+ || bc] $/

[18:49] <camelia> rakudo-moar da977785c: OUTPUT: «False␤»

[18:49] <Zoffix> moritz: is the list of what terminates LTM available somewhere?

[18:50] <moritz> Zoffix: S05 should contain it, just a sec

[18:50] <Zoffix> I should take the time to read all the S* stuff...

[18:50] <moritz> https://design.perl6.org/S05.html#Longest-token_matching

[18:51] <Zoffix> moritz++ thanks

[18:51] <moritz> S05 is quite enlightinging... when you read it the third or fourth time :-)

[18:51] <moritz> also, I don't know if the new semantics above are correct

[18:51] <moritz> ah yes, they are

[18:51] <moritz> never mind

[18:51] <moritz> b+ matches one b

[18:52] <moritz> thus || does not execute the second branch

[18:52] <Zoffix> Thanks.

[18:52] <moritz> and since no backtracking is allowed, the match remains "ab", and $ fails

[18:54] <moritz> the list in S05 might be missing (left) recursion as an LTM terminator

[19:16] <bartolin> pmurias: I had to bootstrap nqp-j some days ago. if I'm not mistaken, you'd have to change the mapping of 'eqat' first (in Compiler.nqp) and then run 'make && make j-bootstrap-files'. Only with the new jars available in src/vm/jvm/stage0 you can change the usage of 'eqat' through the rest of the code and run 'make' again. in my case I made two commits: 11ef6ea37d for the changed bootstrap files, 7ca352fdf5 for the other changes

[19:17] * bartolin messed it up the first time, but found the solution in the logs somewhere

[19:46] <buggable> New CPAN upload: Color-Scheme-1.001001.tar.gz by HOLLI https://cpan.metacpan.org/authors/id/H/HO/HOLLI/Perl6/Color-Scheme-1.001001.tar.gz

[19:48] <Zoffix> :o weabot

[19:48] <xi-> hi

[19:48] <Zoffix> ZofBot: what sort of a bot a weabot is?

[19:48] <ZofBot> Zoffix, As O'Brien passed the telescreen a thought seemed to strike him

[19:49] <Zoffix> hi

[19:49] <xi-> I've actually made that nick a bot using your IRC::Client library on another network

[19:49] <Zoffix> ha cool :)

[21:40] * Zoffix glances at #perl6

[21:41] <Zoffix> ZofBot: pah! Humans and their weird conversations!

[21:41] <ZofBot> Zoffix, They are a form of pressure that you cannot withstand, even if you wished to

[21:41] <Zoffix> Is that how they make diamonds?

[21:46] <timotimo> Zoffix: how important is <tbody>?

[21:47] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1198: Optimize INTERPOLATE even more

[21:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1198

[21:50] <Zoffix> timotimo: in what context?

[21:50] <Zoffix> It's an optional element.

[21:50] <timotimo> ok, maybe the question should be: when is it a good idea or necessary to use tbody inside a table?

[21:51] <Zoffix> BAHAHAA

[21:52] <Zoffix> I just spent like 40 minutes hacking in :out-buffer into IO::CatHandle until I realized: NONE of the output methods on it are implemented :P

[21:52] <timotimo> oh! wow

[21:52] <Zoffix> By design. They're NYI

[21:52] <timotimo> well, how exactly is CatHandle supposed to write stuff?

[21:52] <timotimo> when does it switch? etc

[21:52] <Zoffix> timotimo: it doesn't write anything. It's read-only

[21:52] <timotimo> oh

[21:52] <timotimo> well, then :)

[21:52] <Zoffix> Oh, right yeah, that's why it's NYI

[21:53] <Zoffix> No clear semantics of how that should be done

[21:53] <Zoffix> timotimo: for <tbody>... No idea. There's this page https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody

[21:53] <Zoffix> "In conjunction with a preceding <thead> and/or <tfoot> element, the <tbody> element provides additional semantic information for devices such as printers and displays."

[21:53] <timotimo> ah, ok

[21:54] <timotimo> right, could be a target for css selectors

[21:54] <timotimo> if you have multiple tr and maybe even td in what acts as your table header

[22:14] <Zoffix> ZOFFLOP: t/spec/S11-modules/require.tt

[22:14] <Zoffix> ZOFFLOP: TODO PASS (3-4) t/spec/S12-construction/destruction.rakudo.t

[22:15] <Zoffix> I meant descruction.t

[22:15] <Zoffix> spelt right

[22:15] <Geth> ¦ rakudo/nom: 765dd6944f | (Zoffix Znet)++ | 2 files

[22:15] <Geth> ¦ rakudo/nom: Add IO::CatHandle.out-buffer

[22:15] <Geth> ¦ rakudo/nom:

[22:15] <Geth> ¦ rakudo/nom: Throw NYI. To block out IO::Handle.out-buffer

[22:15] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/765dd6944f
