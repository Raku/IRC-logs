[04:42] <Zoffix> perl -wlnE  'say "$.:$_"; close ARGV if eof' foo bar # Perl 5

[04:42] <Zoffix> perl6 -MLN -ne 'say "$*LN:$_"' foo bar               # Perl 6

[04:42] <Zoffix> :) step aside, Perl 5 :)

[04:44] <Zoffix> Wonder if we can pass options along with `-MSomeModule` like you can in p5

[05:00] <samcv> Unicode Grant Status Update 1 is up https://cry.nu/perl6/grant-status-update-1/

[05:08] <Zoffix> samcv++

[05:19] <BenGoldberg> samcv, There's a broken link in the doc, which goes to "perl6/unicode-property-names" but should go to "/perl6/unicode-property-names"

[05:20] <samcv> thanks!

[05:20] <samcv> BenGoldberg, can you check the link now? should work

[05:21] <BenGoldberg> Yup, looks good

[07:19] <Zoffix> $ p6 -Ilib -MLN -e 'say $*ARGFILES.ln'

[07:19] <Zoffix> (Int:D)

[07:19] <Zoffix> lulz? A :D that ain't a :D :S

[07:22] <Zoffix> m: role Foo { has Int:D $.ln = 0 }; (42.^mixin: Foo).ln.say; (42 does Foo).ln.say

[07:22] <camelia> rakudo-moar 36bc41: OUTPUT: «(Int:D)␤0␤»

[07:24] <Zoffix> Ah; `does` also does `obj.^mixin($role).BUILD_LEAST_DERIVED({});`

[08:03] <[Tux]> This is Rakudo version 2017.05-353-g36bc41022 built on MoarVM version 2017.05-25-g62bc54e9

[08:03] <[Tux]> csv-ip5xs        2.830

[08:03] <[Tux]> test            12.950

[08:03] <[Tux]> test-t           4.406 - 4.515

[08:03] <[Tux]> csv-parser      12.827

[08:09] <Zoffix> m: say '' ~~ <0>

[08:09] <camelia> rakudo-moar 36bc41: OUTPUT: «True␤»

[08:09] <Zoffix> m: say '' ~~ '0'

[08:09] <camelia> rakudo-moar 36bc41: OUTPUT: «False␤»

[08:09] <Zoffix> Kinda annoying. Gonna have to do a bunch of special-casing for this in my code :/

[08:15] <Zoffix> I think I'm too deep in the yak shaving :) I started this weekend wanting to finish the Toaster and I haven't even started on the actual Toaster :/

[08:54] <Zoffix> Benched two pieces of code and surprised just how faster one version is than the other: https://gist.github.com/zoffixznet/30ba2fbc0244a9d19395b4c9486bb157

[08:55] <Zoffix> I guess istype op is so cheap assignment and addition dwarfs it

[08:55] <Zoffix> ZofBot: not sure if istype is too faster or assignment is too slow

[08:55] <ZofBot> Zoffix, my class X::Bind::ZenSlice is X::Bind::Slice { "Cannot bind to {$

[08:57] <Zoffix> well, s/assignment/binding/;

[09:18] <Zoffix> .tell AlexDaniel Present:  dd <00>   vs.   dd <00.0+0i>   vs.   dd <00+0i>

[09:18] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[09:22] <Zoffix> ZFOVM: Files=1253, Tests=138338, 124 wallclock secs (23.57 usr  3.75 sys + 2551.96 cusr 157.57 csys = 2736.85 CPU)

[09:22] <Zoffix> ZOFVM: Files=1253, Tests=138338, 124 wallclock secs (23.57 usr  3.75 sys + 2551.96 cusr 157.57 csys = 2736.85 CPU)

[09:22] <Zoffix> Wonder what commit made stuff slow :/

[09:22] <Zoffix> buggable: speed 12

[09:22] <buggable> Zoffix, ▁▁▄▄↑▃▂▂▆▆▂▃ data for 2017-05-31–2017-06-05; range: 4.364s–4.807s; 3% slower

[09:22] <Zoffix> buggable: speed 40

[09:22] <buggable> Zoffix, ▂▃▂▂▁▁▆▇▂▂▁▁▃▂▃▄▂▆▇▄▆▅▃▃▄▃▄▇▃▃▆▆↑▅▄▄██▄▆ data for 2017-05-18–2017-06-05; range: 4.225s–4.807s; 5% slower

[10:07] <Geth> ¦ rakudo/nom: 8a0b7460e5 | (Zoffix Znet)++ | src/core/allomorphs.pm

[10:07] <Geth> ¦ rakudo/nom: Fix allomorph smartmatching

[10:07] <Geth> ¦ rakudo/nom:

[10:07] <Geth> ¦ rakudo/nom: Currently, we always fall to Numeric smartmatch, which gives incorrect

[10:07] <Geth> ¦ rakudo/nom: results when a string is smartmatched against the allomorph.

[10:07] <Geth> ¦ rakudo/nom:

[10:07] <Geth> ¦ rakudo/nom: Fix by implementing own .ACCEPTS in allomorphs that matches as follows:

[10:07] <Geth> ¦ rakudo/nom: Allomorph ~~ Allomorph => check Numeric part only

[10:07] <Geth> ¦ rakudo/nom: Numeric   ~~ Allomorph => check Numeric part only

[10:07] <Geth> ¦ rakudo/nom: Str       ~~ Allomorph => check Str     part only

[10:07] <Geth> ¦ rakudo/nom: Any       ~~ Allomoprh => check both Str and Numeric parts

[10:07] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8a0b7460e5

[10:08] <Geth> ¦ roast: 4f48067cc5 | (Zoffix Znet)++ | S02-literals/allomorphic.t

[10:08] <Geth> ¦ roast: Spec allomorphic smartmatching

[10:08] <Geth> ¦ roast:

[10:08] <Geth> ¦ roast: Rakudo impl: https://github.com/rakudo/rakudo/commit/8a0b7460e5

[10:08] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4f48067cc5

[10:13] <Zoffix> .oO( wonder if it's illegal to kill pigeons... )

[10:13] <Zoffix> Damn vermin. Harrasing me by landing on my AC and scratching the crap out of it.

[11:20] <Geth> ¦ roast: 9db1e70a54 | (Elizabeth Mattijsen)++ | S03-operators/union.t

[11:20] <Geth> ¦ roast: Fix comment copypasto

[11:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9db1e70a54

[12:03] <Geth> ¦ roast: 4e5c102f3c | (Elizabeth Mattijsen)++ | S03-operators/intersection.t

[12:03] <Geth> ¦ roast: Add thorough intersection testing

[12:03] <Geth> ¦ roast:

[12:03] <Geth> ¦ roast: Includes 3 starred out tests that fail at the moment, which need further

[12:03] <Geth> ¦ roast: investigation.

[12:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4e5c102f3c

[12:04] <[Coke]> .

[12:04] <Geth> ¦ rakudo/nom: 6c6bf36d83 | (Elizabeth Mattijsen)++ | t/spectest.data

[12:04] <Geth> ¦ rakudo/nom: Add thorough set intersection testing

[12:04] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6c6bf36d83

[12:07] <[Coke]> there is a place to send security tickets, very similar to the p5 setup, that never got documented. moritz & I have the keys to it, let me get you the email addy.

[12:09] <lizmat> afk until later today&

[12:11] <moritz> [Coke]: oh, I think I tested it once, and it didn't work; I think I have to re-test evventually

[12:11] <[Coke]> I see your test email in the queue.

[12:11] <[Coke]> I gave zoffix the address (I think), we'll see if it shows up.

[12:28] * Zoffix seent a test mail

[12:30] <Zoffix> Just to clarify for those who didn't backlog in entirety: there's no security bug. IO::Path.mkdir just takes umask into account, but to me it at first looked like the set chmod was broken, so dir with requested chmod 0o000 might've ended up with 0o777

[12:33] <[Coke]> http://news.perlfoundation.org/2017/06/perl-6-travel-grant-proposal.html

[12:34] <[Coke]> This travel grant falls outside the grants committee process and is being handled directly by the board.

[12:43] <AlexDaniel> Zoffix: so which one is wrong? ‘dd <00>’ for not showing the warning?

[12:43] <AlexDaniel> m: say 0000.5

[12:43] <camelia> rakudo-moar 6c6bf3: OUTPUT: «0.5␤»

[12:44] <AlexDaniel> so dd <00.0+0i> is somewhat consistent, dd <00+0i> warns like it would if you just had a 00 literal somewhere, and <00> doesn't warn but should?

[12:45] <Zoffix> AlexDaniel: IMO kinda none should warn. It's a IntStr. What if I *want* it to have extra zeros?

[12:46] <AlexDaniel> who said that it is an IntStr

[12:46] <AlexDaniel> m: dd WHAT <00.0+0i>

[12:46] <camelia> rakudo-moar 6c6bf3: OUTPUT: «Complex␤»

[12:46] <AlexDaniel> m: dd WHAT <00+0i>

[12:46] <Zoffix> m: dd WHAT <00>

[12:46] <camelia> rakudo-moar 6c6bf3: OUTPUT: «Potential difficulties:␤    Leading 0 has no meaning. If you meant to create an octal number, use '0o' prefix; like, '0o0'. If you meant to create a string, please add quotation marks.␤    at <tmp>:1␤    ------> 3dd WHAT <007⏏5+0i>␤Complex␤»

[12:46] <camelia> rakudo-moar 6c6bf3: OUTPUT: «IntStr␤»

[12:46] <Zoffix> well s/IntStr/allomorph/;

[12:46] <Zoffix> Ah, THAT's why it warns

[12:47] <Zoffix> Ok, never mind then.

[12:47] <Zoffix> m: $ = <00/2>

[12:47] <camelia> rakudo-moar 6c6bf3: OUTPUT: «Potential difficulties:␤    Leading 0 has no meaning. If you meant to create an octal number, use '0o' prefix; like, '0o0'. If you meant to create a string, please add quotation marks.␤    at <tmp>:1␤    ------> 3$ = <007⏏5/2>␤»

[12:47] <AlexDaniel> oh, right

[12:47] <Zoffix> OK. Now it makes sense to me :)

[12:47] <AlexDaniel> it does

[12:48] <AlexDaniel> so if you don't have a WhateverStr, it will warn for integers with leading zeros

[12:53] <Zoffix> k, $*NL thing is done: https://github.com/zoffixznet/perl6-LN

[12:53] <Zoffix> Toaster time \o/ \o\ |o| /o/

[12:54] <Zoffix> I mean $*LN thing

[12:54] <Zoffix> :)

[13:11] <timotimo> of course perl6 IO is slow if it has to go through the netherlands for everything

[13:11] <Zoffix> .oO( that was a random comment... )

[14:03] <Geth> ¦ nqp/master: 12 commits pushed by pmurias++

[14:03] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/0ea634c2c3...d5a8007cc2

[14:06] <Geth> ¦ nqp: 39d165dc49 | pmurias++ | src/vm/js/nqp-runtime/core.js

[14:06] <Geth> ¦ nqp: [js] Setup a variable for use by eval

[14:06] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/39d165dc49

[14:10] <Geth> ¦ nqp: 329246667c | pmurias++ | .eslintrc.js

[14:10] <Geth> ¦ nqp: [js] Make the .eslintrc really lax, it will be made more strict once we fix known classes of violations

[14:10] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/329246667c

[14:10] <Geth> ¦ nqp: c27c99f3da | pmurias++ | src/vm/js/nqp-runtime/io.js

[14:10] <Geth> ¦ nqp: [js] Remove debugging leftover

[14:10] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c27c99f3da

[14:10] <Geth> ¦ nqp: 6d0f60068a | pmurias++ | src/vm/js/nqp-runtime/io.js

[14:10] <Geth> ¦ nqp: [js] Tiny bit of stylistic comformance

[14:10] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6d0f60068a

[14:18] <Geth> ¦ rakudo/nom: ac8b4714fd | (Zoffix Znet)++ (committed using GitHub Web editor) | t/harness6

[14:18] <Geth> ¦ rakudo/nom: Fix shebang

[14:18] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ac8b4714fd

[14:18] <Geth> ¦ nqp: 7b7b776391 | pmurias++ | src/vm/js/nqp-runtime/io.js

[14:18] <Geth> ¦ nqp: [js] The exit status of nqp::shell needs to be shifted

[14:18] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/7b7b776391

[14:18] <Geth> ¦ nqp: b62e21514d | pmurias++ | t/nqp/086-pipes.t

[14:18] <Geth> ¦ nqp: [js] Test nqp::closefh_i with a exit status we expect

[14:18] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/b62e21514d

[14:19] <Geth> ¦ nqp: ccdbeb8649 | pmurias++ | 2 files

[14:19] <Geth> ¦ nqp: [js] Run the now passing pipe test

[14:19] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ccdbeb8649

[14:21] <Geth> ¦ rakudo/js: 2d1fb3fd1e | pmurias++ | tools/build/NQP_REVISION

[14:21] <Geth> ¦ rakudo/js: Bump NQP for js backend fixes

[14:21] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/2d1fb3fd1e

[14:48] <[Coke]> moritz, Zoffix: test email/ticket rec'd.

[14:49] <Zoffix> sweet

[15:09] <Geth> ¦ rakudo/proc-using-proc-async: fd3ef6f842 | (Jonathan Worthington)++ | src/core/Proc/Async.pm

[15:09] <Geth> ¦ rakudo/proc-using-proc-async: Give Proc::Async support for merged output.

[15:09] <Geth> ¦ rakudo/proc-using-proc-async:

[15:09] <Geth> ¦ rakudo/proc-using-proc-async: Available through the `.Supply` method, which feels fairly natural.

[15:09] <Geth> ¦ rakudo/proc-using-proc-async: In IO::Socket::Async, .Supply is how you get the data received over

[15:09] <Geth> ¦ rakudo/proc-using-proc-async: the socket; `.Supply` on a process can be seen as "get me the output"

[15:09] <Geth> ¦ rakudo/proc-using-proc-async: without caring which output.

[15:09] <Geth> ¦ rakudo/proc-using-proc-async:

[15:09] <Geth> ¦ rakudo/proc-using-proc-async: Added as part of work towards re-working Proc in terms of Proc::Async,

[15:09] <Geth> ¦ rakudo/proc-using-proc-async: which means giving Proc::Async the features that Proc has. However, as

[15:09] <Geth> ¦ rakudo/proc-using-proc-async: it turns out :merge was busted and disabled for Proc, this counts as a

[15:09] <Geth> ¦ rakudo/proc-using-proc-async: bonus, I guess.

[15:09] <Geth> ¦ rakudo/proc-using-proc-async: review: https://github.com/rakudo/rakudo/commit/fd3ef6f842

[15:11] <AlexDaniel> MasterDuke: should we start changing whateverable according to this ↑ ?

[15:11] * jnthn ponders how, in terms of API, binding Proc::Async stdin/stdout/stderr to a file handle should look

[15:12] <AlexDaniel> moritz: I think you were interested in this thing also ↑

[15:12] <jnthn> Overloading stdout and stderr to take IO::Handle feels a tad smelly

[15:13] <jnthn> Since in that case they'd not return a Supply

[15:13] <jnthn> And there'd be a discontinuity with stdin too

[15:13] <jnthn> Maybe should have explicit .bind-stdin, .bind-stdout, and .bind-stderr or so

[15:15] <jnthn> Will leave that here for pondering

[15:16] <jnthn> And maybe implement it tomorrow :)

[15:16] <jnthn> In the meantime, I'll go find my Windows box and see how syncfile changes are there, and perhaps merge that branch if all's good.

[15:17] <jnthn> (That's a Moar branch, fwiw, that gets file handles off using libuv)

[15:26] <Zoffix> Is there any reason why making X::Method::NotFound.message slower would get significant performance loss in stresstest? https://github.com/rakudo/rakudo/commit/2500e50

[15:26] <Zoffix> m: say (121-118)/121

[15:26] <camelia> rakudo-moar ac8b47: OUTPUT: «0.024793␤»

[15:26] <Zoffix> And by significant I mean 2.5% loss

[15:27] <Zoffix> buggable: speed 20

[15:27] <buggable> Zoffix, ▄▃▁▁▂▁▃▅▁▁▄▄↑▃▂▂▆▆▂▄ data for 2017-05-28–2017-06-05; range: 4.344s–4.807s; ~0% difference

[15:27] <Zoffix> buggable: speed 10

[15:27] <buggable> Zoffix, ▄▃▇▂▁▁▅▅▁▃ data for 2017-06-01–2017-06-05; range: 4.400s–4.807s; 1% faster

[15:29] <jnthn> Wow, that's a lot...

[15:33] <Zoffix> prolly should come up with a comprehensive bench to make hunting stuff like this easier. The randomness in stresstest is LTA

[15:35] * Zoffix tries using spectest instead

[15:36] <Geth> ¦ rakudo/js: 683728bb58 | pmurias++ | tools/build/NQP_REVISION

[15:36] <Geth> ¦ rakudo/js: Correct NQP bump

[15:36] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/683728bb58

[15:36] <Geth> ¦ rakudo/js: 2a64d2f2f2 | pmurias++ | t/spectest.js.data

[15:36] <Geth> ¦ rakudo/js: [js] Correct passing spectest list

[15:36] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/2a64d2f2f2

[15:51] <Geth> ¦ nqp: e624c72e92 | jnthn++ | t/nqp/019-file-ops.t

[15:51] <Geth> ¦ nqp: Correct left-behind use of nqp::tellfh.

[15:51] <Geth> ¦ nqp:

[15:51] <Geth> ¦ nqp: Should just be .tell on an NQP file handle object.

[15:51] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e624c72e92

[16:00] <Zoffix> Well, based on my experiment. looks like the ~2.6% stresstest/spectest loss is due to commit https://github.com/rakudo/rakudo/commit/2500e50

[16:01] <Zoffix> Not 100% sure why. Gonna rewrite it in NQP now and see if it'll make that 2.6% go down

[16:02] <jnthn> Odd. It even only does the work if .message is called to actually get the error

[16:03] <Zoffix> Yeah

[16:04] <Zoffix> zoffix@VirtualBox~/CPANPRC/rakudo/t/spec (master)$ grep -FR 'X::Method::NotFound' | wc -l

[16:04] <Zoffix> 58

[16:04] <Zoffix> And barring loops, there isn't that many of them being tested

[16:04] <jnthn> I wonder if something triggers it accidentally somewhere

[16:17] <Zoffix> m: use nqp; my $sug := nqp::hash; nqp::bindkey_i($sug, 'foo', 1);

[16:17] <camelia> rakudo-moar ac8b47: OUTPUT: «MVMHash representation does not support native type storage␤  in block <unit> at <tmp> line 1␤␤»

[16:17] <Zoffix> How do I get one that does?

[16:19] <Zoffix> grepping for bindkey_i suggests only lexpad is that... /me goes with regular nqp::hash

[16:23] <japhb> Zoffix, re: https://gist.github.com/zoffixznet/30ba2fbc0244a9d19395b4c9486bb157 either my eyes are failing me (totally possible), or the old code does 'nqp::istype(b, Numeric)' twice, meaning the only possible values of the add_i are 0 or 2, so the outer nqp::if will always take the true branch.

[16:27] <Zoffix> japhb: a yeah. Indeed it has a mistake. Though, with it fixed, I still get "NEW version is 52.16x faster"

[17:19] <Zoffix> Well, this was a waste of time.

[17:30] <Zoffix> Filed my results: https://rt.perl.org/Ticket/Display.html?id=131515

[17:30] <Zoffix> Giving up with it.

[18:13] <TimToady> do we know if there are going to be any hackathons around the Amsterdam conference?  (starting to think about plane tickies...)

[18:21] <lizmat> TimToady: I think there will be

[18:21] <lizmat> what would be best for you?  Before or after the conference ?

[18:42] <TimToady> the after ones tend to be slightly more productive in my experience, since before people tend to be writing their talks, or attending classes, which tend to be before

[18:43] <TimToady> but either would work for us

[18:44] <lizmat> ok, I'll make sure we discuss this tomorrow at the amsterdam.pm meeting, should have some more info after that  :-)

[18:45] <TimToady> thanks, ticket prices will go up soon...

[19:03] <Geth> ¦ nqp: 0ac9b4f06f | (Elizabeth Mattijsen)++ | tools/build/MOAR_REVISION

[19:03] <Geth> ¦ nqp: Bump Moar to get the latest delibuvied goodies

[19:03] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/0ac9b4f06f

[19:03] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.05-25-g62bc54e...2017.05-59-gf17adad

[19:08] <Zoffix> m: say 1, 2, 3 …^ 4, 5, 6

[19:08] <camelia> rakudo-moar ac8b47: OUTPUT: «(1 2 3 5 6)␤»

[19:08] <Zoffix> There can be more than one endpoint...

[19:10] <Zoffix> ehhe... I have 2017.05-320-g8ec1810 installed on a box and a module install just failed, telling me my perl6 is too old :)

[19:10] <Zoffix> ZofBot: now that's what I call bleeding edge!

[19:10] <ZofBot> Zoffix, It involves the "serialization" of code and data

[19:15] <Geth> ¦ rakudo/nom: 05f3e9a010 | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION

[19:15] <Geth> ¦ rakudo/nom: Bump NQP version to get latest MoarVM

[19:15] <Geth> ¦ rakudo/nom:

[19:15] <Geth> ¦ rakudo/nom: Specifically because synchronous file I/O now no longer uses libuv.

[19:15] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/05f3e9a010

[19:15] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.05-98-g05e5d75...2017.05-145-g0ac9b4f

[19:28] * [Coke] wonders if he can host an albany conference just to get people to swing by. :)

[19:39] <Zoffix> ZOFVM: Files=1254, Tests=138733, 120 wallclock secs (22.25 usr  3.47 sys + 2434.76 cusr 167.69 csys = 2628.17 CPU)

[19:41] <Geth> ¦ rakudo/nom: 8efffb1d13 | (Zoffix Znet)++ | src/core/Rakudo/Internals.pm

[19:41] <Geth> ¦ rakudo/nom: Fix IO::Path.exception with Range parts

[19:41] <Geth> ¦ rakudo/nom:

[19:41] <Geth> ¦ rakudo/nom: …when end points are excluded.

[19:41] <Geth> ¦ rakudo/nom:

[19:41] <Geth> ¦ rakudo/nom: Range.minmax already returns points with excluded parts excluded.

[19:41] <Geth> ¦ rakudo/nom: Also, it can't be called on non-int Ranges.

[19:41] <Geth> ¦ rakudo/nom:

[19:41] <Geth> ¦ rakudo/nom: Fix by using .min/.max instead (the excluded end already get subtracted)

[19:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8efffb1d13

[19:41] <Geth> ¦ roast: a5d933fcef | (Zoffix Znet)++ | S32-io/io-path-extension.t

[19:41] <Geth> ¦ roast: Test IO::Path.extension with excluded Range as parts

[19:41] <Geth> ¦ roast:

[19:41] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/8efffb1d13

[19:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a5d933fcef

[19:44] <lizmat> Zoffix: re 8efffb1d1326663d7e81 , wonder how that works on 32bit systems

[19:45] <Zoffix> Wouldn't islt_I take any Int?

[19:46] <Zoffix> Wonder where -2**63 came from actually

[19:46] <Zoffix> m: say -2**64

[19:46] <camelia> rakudo-moar 05f3e9: OUTPUT: «-18446744073709551616␤»

[19:46] <Zoffix> oh "# we have isbig_I, but it tells whether the value is above max int32 value"

[19:47] <Zoffix> Yeah, probably needs fixing. I'll check next time I'm at my 32-bit box

[19:48] <Zoffix> I'll go over the whole .extension code. It's noob-Zoffix NQP code :)

[19:53] <Zoffix> BTW that +> ticket was kinda forgotten it seems: https://rt.perl.org/Ticket/Display.html?id=131306#ticket-history

[19:57] <dogbert17> hmm, is getting SEGV's on two spectest files

[19:58] <dogbert17> t/spec/S17-procasync/no-runaway-file-limit.t and t/spec/S17-procasync/many-processes-no-close-stdin.t

[20:01] <dogbert17> Program received signal SIGSEGV, Segmentation fault.

[20:01] <dogbert17> 0xb7c7594c in gc_mark (tc=0x804c458, st=0x8095b78, data=0xa87e438, worklist=0xa87b7e0) at src/6model/reprs/MVMCallCapture.c:54

[20:01] <dogbert17> 54             if (flag_map[flag] & MVM_CALLSITE_ARG_NAMED) {

[20:01] <Zoffix> I noticed more flapping in all the module tests recently.

[20:01] <Zoffix> ZOFFLOP: t/spec/S11-modules/require.t

[20:03] <dogbert17> I ran my spectest with some debug thingies turned on and with a smaller nursery. Haven't seen these asplode earlier though

[20:05] <Zoffix> buggable: tags

[20:05] <buggable> Zoffix, Total: 1623; BUG: 1064; UNTAGGED: 375; LTA: 168; NYI: 95; JVM: 60; RFC: 57; REGEX: 56; CONC: 55; UNI: 30; SEGV: 28; PERF: 26; TESTNEEDED: 25; IO: 23; REGRESSION: 23; NATIVECALL: 22; POD: 21; @LARRY: 20; TODO: 18; PRECOMP: 13; BUILD: 11; OO: 11; TESTCOMMITTED: 11; STAR: 10; OPTIMIZER: 9; BOOTSTRAP: 5; REPL: 5; GLR: 4; MATH: 4; OSX: 4; WEIRD: 4; SPESH: 3; WINDOWS: 3; MOAR: 2; RT

[20:05] <Zoffix> 1623... ~500 more than when I came to Perl 6.

[20:06] <dogbert17> and the doc repo had like 70 issues at the start of 2016, now it's like 260

[20:06] <Zoffix> heh

[20:07] <Zoffix> Guess having no tickets is worse, so I shouldn't complain.

[20:38] <AlexDaniel> .help

[20:38] <yoleaux> AlexDaniel: I'm yoleaux. Type .commands to see what I can do, or see http://dpk.io/yoleaux for a quick guide.

[20:39] <AlexDaniel> .in 1.5y What about 1000 open tickets? “<Zoffix> Guess having no tickets is worse, so I shouldn't complain.”

[20:39] <yoleaux> AlexDaniel: I'll remind you on 5 Dec 2018 08:39Z

[21:00] <ugexe> Zoffix: zef#171 seems to be specific to tap::harness6

[21:05] <Zoffix> ugexe: in what way?

[21:05] <ugexe> it doesn't happen if i use --/tap-harness

[21:06] <ugexe> so i'm either passing in the paths wrong or somewhere in tap::harness it executes a proc without including CURFS repos in $*REPOs

[21:07] <Zoffix> yeah, same here. don't happen with --/tap-harness

[21:08] <ugexe> my guess is https://github.com/perl6/tap-harness6/blob/26f7586996c7abc438f53a99972697812c79d6e7/lib/TAP.pm#L943-L945 isn't doing what they want it to

[21:10] <Geth> ¦ tap-harness6: 65d021cfe1 | (Zoffix Znet)++ (committed using GitHub Web editor) | lib/TAP.pm

[21:10] <Geth> ¦ tap-harness6: Use correct way of stringifying IO::Path

[21:10] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/commit/65d021cfe1

[21:10] <ugexe> I'm passing in the includes the same as prove6, so it must be in TAP::Harness

[21:11] * lizmat tests whether HARNESS_TYPE=6 now updates TAP.pm6  :-)

[21:12] <lizmat> whee!

[21:12] <lizmat> (it does)

[21:12] <Zoffix> \o/

[21:15] <Zoffix> Ah

[21:16] <Zoffix> ugexe: I think the problem is in my test script actually. I'm running $*EXECTUABLE and passing it -Ilib but it's not getting whatever temp path Digest is unpacked at

[21:18] <ugexe> oh, yeah that will do it

[21:20] <ugexe> m: say "-I" <<~<< $*REPO.repo-chain.map(*.path-spec)

[21:20] <camelia> rakudo-moar 8efffb: OUTPUT: «(-Iinst#/home/camelia/.perl6 -Iinst#/home/camelia/rakudo-m-inst-2/share/perl6/site -Iinst#/home/camelia/rakudo-m-inst-2/share/perl6/vendor -Iinst#/home/camelia/rakudo-m-inst-2/share/perl6 -Iap# -Inqp# -Iperl5#)␤»

[21:22] <Zoffix> wond

[21:23] <Zoffix> wonder how prove makes it work

[21:27] <Zoffix> Yup. The fish thing fixes the issue

[21:27] <ugexe> not just prove, perl6

[21:27] <Zoffix> Fish ==  «~«

[21:28] <ugexe> if you do --/tap-harness --/prove it will do `perl6 -I... t/whatever.t` which also works

[21:28] <Zoffix> ugexe: so should I close the issue or do you think it should be possible to make it work without needing changes in my code?

[21:29] <ugexe> i cant figure out why it worked for --prove

[21:29] <Zoffix> .oO( set PERL6LIB to fish thing in TAP::Harness inc thing )

[21:30] <ugexe> you can close the issue, but i would have expected prove to fail before adding the fish thing.

[21:40] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/06/05/2017-23-fulfilled-tap/

[21:44] <lizmat> good night, #perl6-dev!

[21:45] <Zoffix> night

[21:45] <jnthn> 'night

[21:46] <timotimo> cool, night lizmat

[21:50] <Zoffix> lizmat++ # good weekly

[22:03] <AlexDaniel> oh no… now we have File::Temp and Temp::path

[22:03] <AlexDaniel> Temp::Path*

[22:03] <jnthn> Isn't there something built in for that too? :)

[22:17] <Zoffix> AlexDaniel: yeah, but File::Temp is shit

[22:18] <AlexDaniel> Zoffix: well, I created an issue for that

[22:19] * Zoffix closes it

[22:20] * AlexDaniel is confused

[22:33] <Zoffix> AlexDaniel: the module's code is not written for Perl 6 IO. I'm guessing it was written before a billion changes were made for Perl 6 IO. It has awful interface that forces you to close filehandles all the time, without even giving a hint that in Perl 6 it's necessary to do so, and it gives you a Str for a path, instead of proper IO::Path. It takes its arguments as positionals, instead of letting you use

[22:33] <Zoffix> nameds. It doesn't document the template must have at least 4 asterisks. Its code doesn't use proper Perl 6 IO and instead uses $*SPEC. Its code will crash on deleting all the rest of the files if a single dir fails to delete (e.g. when its perms don't program read its contents). And to crown it with a cherry on top. Here's a very simple demonstration of it deleting an imporant customer file (I shortened

[22:33] <Zoffix> the template so I could use a single customer data file, but imagine a directory with some letters, e.g. "jack-bowers".. as that's a possible template name): https://gist.github.com/zoffixznet/b37aea33e78218d01e282dd53e0a7049

[22:34] <Zoffix> And I'm not going to write a paragraph in my docs, slugging off another module. I don't advise using it. If that's not good enough for you, go ahead and use it. I wouldn't care.

[22:35] <AlexDaniel> well, you already say “I advise against using it”. I just think that if you're saying this, why not give some reasons why

[22:37] <Zoffix> I'm just gonna remove that section entirely.

[22:43] <Zoffix> Now I'm sad.

[22:46] <Zoffix> Toaster successfully toasted a first batch of 20 modules \o/

[22:46] <Zoffix> Just need to hook it up to an SQLite DB and bolt a web front end onto it and done.

[22:46] * Zoffix calls it day

[23:14] <timotimo> that sounds like good stuff,zoffix

[23:14] <timotimo> also, good rest!
