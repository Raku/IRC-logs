[00:02] <japhb> timotimo: 0 bytes in a utf-8 encoded buffer mean the same thing they mean in an ASCII string, because codepoints 0..127 are guaranteed to encode the same in ASCII and utf-8.  This is part of the the utf-8 design -- they wanted applications to be able to upgrade to handling the full Unicode charset without having to replace every single function that assumed nul-terminated C strings.

[00:04] <japhb> Unlike, say UCS-2, wherein an aligned pair of 0 bytes marks end of string, and singleton (or unaligned pairs of) 0 bytes can appear randomly and must not be treated as string terminators.

[01:17] <yoleaux> Zoffix: fix up `make test` along with other test (make all the tests in rakudo's t/ actually get run when make test is run)

[02:45] <travis-ci> Rakudo build errored. usev6 'Use nqp::eqaticim on MoarVM only

[02:45] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/273420062 https://github.com/rakudo/rakudo/compare/e5a600997c30...dd52b07b710f

[02:45] <buggable> [travis build above] ✓ All failures are due to timeout (0), missing build log (3), GitHub connectivity (0), or failed make test (0).

[05:28] <bartolin> pmurias++

[07:56] <samcv> almost reading to merge the collation stuff into moarvm. so close

[07:56] <samcv> :-)

[08:01] <samcv> going to try and leave in some debug functions though. since that was super invaluble when i was creating it. and i really don't want to get rid of them. so will try to relegate them to certain functions hidden behind #define's

[08:15] <samcv> there's a lot of code involved in the whole collation thing which you might imagine. like 700 lines of code (not counting the data i mean)

[08:15] <samcv> very happy with it though

[08:16] <samcv> despite having a fair amount of code it's very fast because of the methods i used, so the code that gets run usually doesn't run very much, unless it has to

[08:20] * JimmyZ wonders whether perl6 has something @annotation syntax like java or not

[08:25] <samcv> what is that?

[08:33] <JimmyZ> samcv: https://docs.oracle.com/javase/tutorial/java/annotations/predefined.html

[08:39] <pmurias> samcv: the unimatch tests really want to DWIM and take either a property value or a property name...

[08:39] <samcv> pmurias, unimatch is pretty broken

[08:39] <samcv> well. i think it is :)

[08:40] <samcv> uh i wouldn't bother with unimatch that much. uh yes you will need properly value checking for that

[08:40] <pmurias> samcv: what do you think about spliting the op behavior and having both a nqp::unipropname and nqp::uniproporpvalname

[08:40] <pmurias> ops

[08:40] <samcv> i hate that

[08:41] <pmurias> why?

[08:41] <samcv> properly values are not unique

[08:41] <samcv> they only really make sense with a property value to go along with it

[08:42] <samcv> what does this return? a propcode?

[08:42] <samcv> or does it return whether it has that properly or property value assigned to it?

[08:42] <pmurias> meant to have that op called nqp::unipropcode and nqp::uniproporpvalcode

[08:42] <pmurias> both ones would return the propcode

[08:43] <samcv> well property values are not unique

[08:43] <samcv> so what does it return back when like 8 properties have the same possible prop value?

[08:43] <pmurias> throw an exception?

[08:43] <samcv> tbh i don't think unimatch sholud let you search ALL property values

[08:44] <pmurias> i hate that interface too, but we have to implement the tests somehow :/

[08:44] <samcv> because it is insane to implement when you have proprety values that are shared

[08:44] <samcv> for unimatch?

[08:44] <samcv> i would focus on making unimatch work when the property name *is* specified

[08:44] <samcv> and not on having it work when there's no propname specified

[08:45] <samcv> the design docs don't specify it matching ANYTHING

[08:45] <samcv> i should check the 6.c errata and see what it has

[08:46] <pmurias> the design docs seem to specify that unimatch matches on general category

[08:46] <samcv> but imo i think it should only function the same way that regex functions. like if you give it a script name or a general category or a property name itself. not a property value from any category

[08:46] <samcv> yeah

[08:47] <pmurias> but the design docs commits seem to mention just describing the implementation :/

[08:47] <samcv> what do you mean by just describing the implementation?

[08:48] <samcv> but yeah. unimatch needs to change/be restricted in 6.d i think or at least the docs updated so that it says it only guarentees certain things work like script and proprety names

[08:49] <samcv> anything else is not future portible and not going to be scalable across more than one backend

[08:49] <samcv> thanks for bringing this up though. :-)

[08:53] <pmurias> hmm, maybe moving the crazy unimatch behavior to the setting code and sanitizing nqp::unipropcode makes sense?

[08:54] <samcv> sanitizing?

[08:54] <pmurias> make it more sane

[08:55] <samcv> hm

[08:55] <pmurias> so nqp::uniprocode would take care of the property name to numer matching while unimatch would do the crazy DWIM

[08:55] <samcv> well the unimatch behavior is just caused by moarvm having been created assuming property values were unique and so it'd match property values with propcodes. it had one big hash that had proprety values as keys and the propcodes of their owner propreties

[08:56] <samcv> which ended up messing up all kinds of things becuase they could override each other with idetical names

[08:56] <samcv> which is why we have the weird unimatch functionality

[08:57] <samcv> i mean how would you implement that? have it look up all the properties which contain that property value then check every one of those properties?

[08:57] <samcv> something like that?

[08:58] <samcv> that could be do-able

[08:58] <pmurias> not sure, either just check the 4 or so properties that are used in the test or add an op that does a lookup with DWIM

[08:58] <samcv> DWIM = letting you give it something that could be shared between properties?

[08:59] <samcv> and checking them all?

[08:59] <pmurias> how many property values are there?

[09:02] <pmurias> it seems like there are 3806 ones

[09:03] <pmurias> not sure how big of a performance penalty would having such a hash in Perl 6 land be

[09:04] <pmurias> samcv: if something is shared across the properties I don't think we can do anything better than failing (it's not future proof with new unicode versions but neither is picking a random choice)

[09:06] <samcv> i mean if you're checking if it has a property value you should really know which property you're checking

[09:06] <scovit> Hello, I suspect I found a bug: https://gist.github.com/scovit/3cec65085dcc747fc5aac1d0bfd03cf5

[09:06] <scovit> is it a bug?

[09:17] <[Tux]> This is Rakudo version 2017.08-99-g591b93eaf built on MoarVM version 2017.08.1-128-gde6dceda

[09:17] <[Tux]> csv-ip5xs        1.385 -  1.485

[09:17] <[Tux]> test            10.098 - 10.420

[09:17] <[Tux]> test-t           3.555 -  3.861

[09:17] <[Tux]> csv-parser      11.325 - 11.820

[09:17] <samcv> \o [Tux]

[09:17] <samcv> evalable6, https://gist.githubusercontent.com/scovit/3cec65085dcc747fc5aac1d0bfd03cf5/raw/84592ed8ed289ceaff527fd064ad61de1862ca40/gistfile1.txt

[09:17] <evalable6> samcv, Successfully fetched the code from the provided URL.

[09:17] <evalable6> samcv, rakudo-moar 591b93eaf: OUTPUT: «(exit code 1) (uint8)␤concatenate requires a concrete string, but got null␤  in any protec…»

[09:17] <evalable6> samcv, Full output: https://gist.github.com/57c82d27d2c3271f8ee580886b3677a5

[09:17] <[Tux]> Error encoding UTF-8 string: could not encode codepoint 1696741 (0x19E3E5), codepoint out of bounds. Cannot encode higher than 1114111 (0x10FFFF)

[09:17] <[Tux]> in block <unit> at 88.t line 21

[09:18] <samcv> probably an error scovit

[09:18] <samcv> hm

[09:18] <samcv> well. i will look into it give me one sec

[09:19] <scovit> thanx

[09:24] <scovit> samcv: I found an easy workaround, using a local 'my \ty = T;' and then Blob[ty] instead of Blob[T]

[09:24] <scovit> seems like a bug to me

[09:26] <samcv> bisectable6, https://gist.githubusercontent.com/scovit/3cec65085dcc747fc5aac1d0bfd03cf5/raw/84592ed8ed289ceaff527fd064ad61de1862ca40/gistfile1.txt

[09:26] <bisectable6> samcv, Successfully fetched the code from the provided URL.

[09:26] <bisectable6> samcv, Bisecting by exit code (old=2015.12 new=591b93e). Old exit code: 0

[09:27] <bisectable6> samcv, bisect log: https://gist.github.com/de3e8763a17ffb4f4ea1439acd4eb4e8

[09:27] <bisectable6> samcv, (2016-02-28) https://github.com/rakudo/rakudo/commit/1e33bc5b86706e857688da714c776b4fcf1a4159

[09:27] <samcv> let's see if it was my fault or not

[09:27] <samcv> yay i didn't do it :p

[09:27] <samcv> looks old

[09:28] <samcv> oh nvm

[09:28] <samcv> looks like it was always broken before?

[09:28] <samcv> or i think it may have just found out where it first started working

[09:28] <samcv> i need it to bisect by output

[09:28] <samcv> bisectable6, help

[09:28] <bisectable6> samcv, Like this: bisectable6: old=2015.12 new=HEAD exit 1 if (^∞).grep({ last })[5] // 0 == 4 # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Bisectable

[09:29] <samcv> bisectable6, old=2016.3 new=HEAD https://gist.githubusercontent.com/scovit/3cec65085dcc747fc5aac1d0bfd03cf5/raw/84592ed8ed289ceaff527fd064ad61de1862ca40/gistfile1.txt

[09:29] <bisectable6> samcv, Successfully fetched the code from the provided URL.

[09:29] <bisectable6> samcv, Cannot find revision “2016.3” (did you mean “2016.03”?)

[09:29] <samcv> bisectable6, old=2016.03 new=HEAD https://gist.githubusercontent.com/scovit/3cec65085dcc747fc5aac1d0bfd03cf5/raw/84592ed8ed289ceaff527fd064ad61de1862ca40/gistfile1.txt

[09:29] <bisectable6> samcv, Successfully fetched the code from the provided URL.

[09:29] <bisectable6> samcv, Bisecting by output (old=2016.03 new=591b93e) because on both starting points the exit code is 1

[09:29] <bisectable6> samcv, bisect log: https://gist.github.com/8de3c7acde04637b808d21c289c591cc

[09:29] <bisectable6> samcv, (2016-04-20) https://github.com/rakudo/rakudo/commit/60550d1533f3810ec357f6fd086826f93f46a849

[09:29] <lizmat> Files=1223, Tests=67688, 292 wallclock secs (11.02 usr  4.67 sys + 1977.87 cusr 207.02 csys = 2200.58 CPU)

[09:35] <samcv> bisectable6, old=2016.05 new=HEAD https://gist.githubusercontent.com/scovit/3cec65085dcc747fc5aac1d0bfd03cf5/raw/84592ed8ed289ceaff527fd064ad61de1862ca40/gistfile1.txt

[09:35] <bisectable6> samcv, Successfully fetched the code from the provided URL.

[09:35] <bisectable6> samcv, Bisecting by output (old=2016.05 new=591b93e) because on both starting points the exit code is 1

[09:35] <bisectable6> samcv, bisect log: https://gist.github.com/eff9bc00fce8d7e9b7995c1432d0b2a9

[09:35] <bisectable6> samcv, (2016-08-05) https://github.com/rakudo/rakudo/commit/715b822bfd7dc66efbf041e19d11cf4841fbf12f

[09:35] <samcv> bisectable6, old=2017.03 new=HEAD https://gist.githubusercontent.com/scovit/3cec65085dcc747fc5aac1d0bfd03cf5/raw/84592ed8ed289ceaff527fd064ad61de1862ca40/gistfile1.txt

[09:35] <bisectable6> samcv, Successfully fetched the code from the provided URL.

[09:35] <bisectable6> samcv, Bisecting by output (old=2017.03 new=591b93e) because on both starting points the exit code is 1

[09:36] <bisectable6> samcv, bisect log: https://gist.github.com/9c06534ddc4329b761542d230ef4b8c2

[09:36] <bisectable6> samcv, (2017-05-26) https://github.com/rakudo/rakudo/commit/c4b56f72c8efd9ab6faf4ee73f10d24439bab3db

[09:36] <samcv> bisectable6, old=2017.05 new=HEAD https://gist.githubusercontent.com/scovit/3cec65085dcc747fc5aac1d0bfd03cf5/raw/84592ed8ed289ceaff527fd064ad61de1862ca40/gistfile1.txt

[09:36] <bisectable6> samcv, Successfully fetched the code from the provided URL.

[09:36] <bisectable6> samcv, Bisecting by output (old=2017.05 new=591b93e) because on both starting points the exit code is 1

[09:36] <samcv> lizmat, you know anything about this?

[09:36] <bisectable6> samcv, bisect log: https://gist.github.com/c41af86c061dcb19a57b7bf51038c8a4

[09:36] <bisectable6> samcv, (2017-05-26) https://github.com/rakudo/rakudo/commit/c4b56f72c8efd9ab6faf4ee73f10d24439bab3db

[09:36] <samcv> evalable6, https://gist.githubusercontent.com/scovit/3cec65085dcc747fc5aac1d0bfd03cf5/raw/84592ed8ed289ceaff527fd064ad61de1862ca40/gistfile1.txt

[09:36] <evalable6> samcv, Successfully fetched the code from the provided URL.

[09:36] <evalable6> samcv, rakudo-moar 591b93eaf: OUTPUT: «(exit code 1) (uint8)␤concatenate requires a concrete string, but got null␤  in any protec…»

[09:36] <evalable6> samcv, Full output: https://gist.github.com/a1c2c6b55174ff562b7643dd7ccd0f06

[09:37] <samcv> seems to be related to buffer code

[09:37] <samcv> seems you've worked with that code

[09:37] * lizmat looks

[09:38] <samcv> bisectable6, old=2017.07 new=HEAD https://gist.githubusercontent.com/scovit/3cec65085dcc747fc5aac1d0bfd03cf5/raw/84592ed8ed289ceaff527fd064ad61de1862ca40/gistfile1.txt

[09:38] <bisectable6> samcv, Successfully fetched the code from the provided URL.

[09:38] <bisectable6> samcv, Bisecting by output (old=2017.07 new=591b93e) because on both starting points the exit code is 1

[09:38] <bisectable6> samcv, bisect log: https://gist.github.com/8d983f749fad791765766e3ce48e510e

[09:38] <bisectable6> samcv, (2017-09-04) https://github.com/rakudo/rakudo/commit/4b02b8aadcb47072bc87fb8be8069177b74cd59d

[09:39] <samcv> wow that's not helpful

[09:39] <samcv> the output is the same but the order is different

[09:39] <samcv> due to buffering code

[09:40] <samcv> bisectable6, old=2017.07 new=2017.08 https://gist.githubusercontent.com/scovit/3cec65085dcc747fc5aac1d0bfd03cf5/raw/84592ed8ed289ceaff527fd064ad61de1862ca40/gistfile1.txt

[09:40] <bisectable6> samcv, Successfully fetched the code from the provided URL.

[09:40] <bisectable6> samcv, On both starting points (old=2017.07 new=2017.08) the exit code is 1 and the output is identical as well

[09:40] <bisectable6> samcv, https://gist.github.com/93e61346702eabdb48d150ccee7f2535

[09:40] <lizmat> well, the error seems to occur when trying to say that it couldn't instantiate the rold

[09:40] <lizmat> *role

[09:40] <samcv> yep

[09:51] <lizmat> samcv: not sure what's going on, but I found a workaround

[09:51] <samcv> hm

[09:52] <lizmat> if you put "my $type := T;" at the start of the role, and use "Blob[$type].new" later on, it seems to work

[09:52] <lizmat> this should probably be rakudobugged

[10:09] <bartolin> an update regarding the jvm backend: it's not only precompilation, but most (if not all) file operations that are broken. if i'm not mistaken, this is caused by uses of nqp::filenofh -- e.g. here: https://github.com/rakudo/rakudo/blob/591b93eaf8aa9a051a5c8ffd86cfc859942fb63e/src/core/IO/Handle.pm#L30

[10:09] <bartolin> that op is only stubbed on jvm and always returns -1

[10:12] <bartolin> i suppose, it's above my head to implement a working version of that nqp::filenofh -- but that seems to be the way to go

[10:12] * bartolin will look further

[10:20] <lizmat> bartolin: I will stub out the auto-closing of files for JVM, and perhaps buffering should then also be not default on JVM

[10:30] <pmurias> samcv: the unicode docs suggest that loose matching "Ignore case, whitespace, underscore ('_'), and hyphens." should be used for property names and property value names

[10:30] <pmurias> samcv: do we want to use that?

[10:38] <samcv> well moarvm allows original, lowercase, and lowercase with no underscore

[10:38] <samcv> whitespace isn't allowed

[10:39] <samcv> so: Canonical_Combining_Class OR canonical_combining_class OR canonicalcombiningclass

[10:40] <samcv> no others. but it would be simple enough to make it just lowercase it and remove underscores

[10:40] <Geth> ¦ rakudo/nom: dd8d0d89a3 | (Elizabeth Mattijsen)++ | 2 files

[10:40] <Geth> ¦ rakudo/nom: Make auto-closing files a MoarVM only thing

[10:40] <Geth> ¦ rakudo/nom:

[10:40] <Geth> ¦ rakudo/nom: This should help unbusting the JVM, bartolin++ .  Can be reverted

[10:40] <Geth> ¦ rakudo/nom: when someone makes nqp::filenofh give valid values on the JVM.

[10:40] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dd8d0d89a3

[10:40] <samcv> so you could do CaNoNi_cAl_coMBIN_Ing_ClaSS

[10:40] <samcv> what do you think is sane

[10:41] <samcv> i don't approve of whitespace though

[10:42] <lizmat> .tell bartolin hopefully dd8d0d89a3 will help you

[10:42] <yoleaux> lizmat: I'll pass your message to bartolin.

[10:44] <bartolin> lizmat: thanks! i'll try in a minute

[10:44] <yoleaux> 10:42Z <lizmat> bartolin: hopefully dd8d0d89a3 will help you

[10:53] <pmurias> samcv: I don't have intutions what's sane in unicode, but if there is a defined rule using it will hopefully be consistent with other unicode using things

[10:54] <pmurias> http://unicode.org/reports/tr44/tr44-16.html#UAX44-LM3 - http://unicode.org/reports/tr44/tr44-16.html#Matching_Symbolic

[10:58] <scovit> Some of you might be interested: I made a very useful CBuffer type https://gist.github.com/scovit/a061415aa843ed9aa43b39c6c6901490 . Might make a module out of it, what is the faster way here to make a simple module skeleton? Any git repo to clone?

[10:59] <Skarsnik_> mi6

[11:02] <scovit> Skarsnik_ it is a pity that many things in NativeCall are not composable I could have used a typed role instead of a class

[11:54] <MasterDuke> i was curious, so last night i ran a script to build rakudo at each release and pull out the parse time

[11:55] <MasterDuke> results: 57,58,58,64,56,57,66,67,68,70,73,65,64,64,66,68,65,66,71

[11:55] <timotimo> can you correlate it with the line count of the core setting?

[11:57] <MasterDuke> hm, that gets created by make, not Configure.pl, right?

[11:58] <timotimo> right

[11:59] <MasterDuke> ugh, i'd have to re-run then and also record the line count

[12:00] <MasterDuke> but i guess a rough approx would just be wc -l in the src folder at each release?

[12:00] <jnthn> Well, it just concatenates all the source under src/core/ so I guess you can just count up those

[12:02] <MasterDuke> it'd misscount the #?if <backend> stuff, but woulf prob be close enough for a rough correlation

[12:03] <timotimo> no problem, IIRC we actually put empty lines in for the non-matched things

[12:03] <timotimo> so that line numbers in the concatenated core setting match up with the source files regardless of what parts were included or not includde

[12:05] <MasterDuke> ah, right

[12:23] <Geth> ¦ rakudo/nom: 16f8419a3e | usev6++ | src/core/IO/Handle.pm

[12:23] <Geth> ¦ rakudo/nom: Avoid trailing semicolon for JVM backend

[12:23] <Geth> ¦ rakudo/nom:

[12:23] <Geth> ¦ rakudo/nom: The trailing semicolon in combination with binding nqp::null

[12:23] <Geth> ¦ rakudo/nom: gave a NullPointerException in infix:<,>.

[12:23] <Geth> ¦ rakudo/nom:

[12:23] <Geth> ¦ rakudo/nom: This can be reverted with dd8d0d89a3 when nqp::filenofh

[12:23] <Geth> ¦ rakudo/nom: give valid values on the JVM.

[12:23] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/16f8419a3e

[12:24] <bartolin> ^^ with that precompilation (and other file IO) seems to work again on the jvm backend. 'make test' does not work, yet -- but one can run single test files

[12:26] <bartolin> lizmat: shouldn't the semicolon in this line be a comma (because we are inside nqp::stmts)? https://github.com/rakudo/rakudo/blob/nom/src/core/IO/Handle.pm#L254

[12:26] <bartolin> lizmat: and also here: https://github.com/rakudo/rakudo/blob/nom/src/core/IO/Handle.pm#L813

[12:27] * lizmat checks

[12:27] <bartolin> lizmat: but I tried to use a comma instead and got a lot of failing tests (make test and make spectest)

[12:28] <lizmat> it needs parens  :-)

[12:28] <lizmat> testing that now

[12:28] <bartolin> ah, of course!

[12:31] <Geth> ¦ rakudo/nom: 2762bcc49f | (Elizabeth Mattijsen)++ | src/core/IO/Handle.pm

[12:31] <Geth> ¦ rakudo/nom: Oops, need parens + comma inside nqp::stmts

[12:31] <Geth> ¦ rakudo/nom:

[12:31] <Geth> ¦ rakudo/nom: bartolin++ for spotting

[12:31] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2762bcc49f

[12:31] <bartolin> lizmat++ :-)

[12:42] <AlexDaniel> committable6: releases https://gist.githubusercontent.com/scovit/3cec65085dcc747fc5aac1d0bfd03cf5/raw/84592ed8ed289ceaff527fd064ad61de1862ca40/gistfile1.txt

[12:42] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[12:42] <committable6> AlexDaniel, https://gist.github.com/10f9bc1c3c34f7211e4c26db7711fd4f

[12:45] <AlexDaniel> samcv: LPT use committable with “releases” to get the big picture, then bisect precisely what you need :)

[12:47] <timotimo> i get a whole bunch of "unhandled failure in DESTROY" from t/spec/S11-modules/require.t

[12:47] <timotimo> has that always been there?

[12:52] <lizmat> timotimo: I think so

[12:52] <timotimo> OK

[12:53] <timotimo> that test failed on my spec test run, but not without the harness

[12:53] <lizmat> fwiw, roast as many more of those

[12:53] <timotimo> failed test 13, ok 13 - can require with variable name

[12:53] <lizmat> that one has been a occasional flapper for me for a long time already

[12:56] <timotimo> OK, good

[12:56] <timotimo> in that case, i just fixed junction optimization

[12:57] <lizmat> whee!  :-)

[12:57] <lizmat> you mean, the one that handles 2 eigenstate junctions ?

[12:57] <AlexDaniel> faster junctions? Whee indeed!

[12:57] <timotimo> only static junctions

[12:58] <Geth> ¦ rakudo/nom: 4de858a555 | (Timo Paulssen)++ | src/Perl6/Optimizer.nqp

[12:58] <Geth> ¦ rakudo/nom: junction optimizer shall ignore proto and only look at candidates

[12:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4de858a555

[12:58] <timotimo> you know, when you have if $foo == 1 | 2

[12:58] <Skarsnik> still good ^^

[12:58] <timotimo> one of the first things i contributed to rakudo

[13:02] <timotimo> i wonder if i should put in a test to warn when the junction folding ops get b0rked

[13:07] <travis-ci> Rakudo build canceled. Will "Coke" Coleda 'Note how to build on windows'

[13:07] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/273280313 https://github.com/rakudo/rakudo/compare/347da8e5b1f1...e5a600997c30

[13:07] <buggable> [travis build above] ✓ All failures are due to timeout (0), missing build log (3), GitHub connectivity (0), or failed make test (0).

[13:22] <travis-ci> Rakudo build canceled. usev6 'Use nqp::eqaticim on MoarVM only

[13:22] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/273420062 https://github.com/rakudo/rakudo/compare/e5a600997c30...dd52b07b710f

[13:22] <buggable> [travis build above] ✓ All failures are due to timeout (0), missing build log (3), GitHub connectivity (0), or failed make test (0).

[14:15] <pmurias> is ($foo, $bar) := ($bar, $foo) planned to be implemented?

[14:15] <jnthn> No

[14:16] <pmurias> I'll removed it from roast then (it's fudged)

[14:16] <jnthn> +1

[14:16] <jnthn> pmurias++ # tidying all kinds of things up

[14:19] <Geth> ¦ roast: cb18065737 | pmurias++ | S02-types/lists.t

[14:19] <Geth> ¦ roast: Remove fudged test we don't plan on implementing

[14:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cb18065737

[14:25] <travis-ci> Rakudo build canceled. pmurias 'Refactor a regex in a way that avoids a JVM backend bug and is cleaner'

[14:25] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/273456019 https://github.com/rakudo/rakudo/compare/dd52b07b710f...591b93eaf8aa

[14:25] <buggable> [travis build above] ✓ All failures are due to timeout (0), missing build log (3), GitHub connectivity (0), or failed make test (0).

[14:26] <timotimo> m: my ($foo, $bar) = <ofo aba>; dd $foo, $bar; ($foo, $bar) = ($bar, $foo); dd $foo, $bar

[14:26] <camelia> rakudo-moar 4de858: OUTPUT: «Str $foo = "ofo"␤Str $bar = "aba"␤Str $foo = "aba"␤Str $bar = "ofo"␤»

[14:26] <timotimo> so just not with binding?

[16:41] <[Coke]> bartolin++

[16:46] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make auto-closing files a MoarVM only thing

[16:46] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/273581289 https://github.com/rakudo/rakudo/compare/591b93eaf8aa...dd8d0d89a3f4

[18:52] <bartolin> looks like the reason for 'make test' not working on the jvm backend is that the EvalServer is unable to find BOOTSTRAP.jar. it looks in /nqp/lib/Perl6/BOOTSTRAP.jar. even when installing with --libdir there is no value for nqp::getcomp('perl6').config<libdir>

[18:52] <bartolin> cmp. https://github.com/rakudo/rakudo/blob/4de858a555fe0f6abfa813f0ff29e32edc159c2f/src/Perl6/ModuleLoader.nqp#L53

[18:54] <bartolin> that looks fixable (though i don't know how a clean fix would look like)

[18:55] <AlexDaniel> Skarsnik: any news? :S

[18:56] <Skarsnik> I make it crash faster with a bigger webpage \o/ ?

[18:57] <AlexDaniel> yeey…

[18:58] <Skarsnik> it crash at like 10-12 iterations, but crash with 40 in valgrind and efence fill my ram xD

[19:24] <pmurias> bartolin: the path stuff is looked up was changed, the used to be a /share/ stuck in that path

[19:24] <pmurias> s/stuff/BOOTSTRAP

[19:26] <pmurias> bartolin: if you look at 0d7ea0a0aa you will see the change on moarv

[19:26] <pmurias> m

[19:30] <bartolin> pmurias: thanks! i'll look into this later

[19:39] <bartolin> pmurias: one other question: when a special case for the jvm backend is added -- do you prefer '#?if jvm' or '#?if !moar'? (the latter would affect the js backend as well, wouldn't it?)

[19:41] <pmurias> hmm, for jvm bugs workaround #if jvm is preferable

[19:41] <pmurias> for some brand new moar specific missing feature maybe #?if !moar?

[19:43] <bartolin> ok, that's what I thought. regarding the commits from today: you already implemented nqp::filenofh for js, didn't you?

[19:56] <pmurias> bartolin: yes

[19:57] <pmurias> bartolin: when in doubt you can use '#?if jvm' and I'll change the workarounds to '#?if !moar' when merging stuff into my branch

[20:15] <ugexe> m: while $(1,2) -> @_ { FIRST { say 42 } }

[20:15] <camelia> rakudo-moar 4de858: OUTPUT: «Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at <tmp> line 1␤␤»

[20:21] <lizmat> m: while 1 -> { last }

[20:21] <camelia> rakudo-moar 4de858: ( no output )

[20:22] <lizmat> ugexe: the block gets called without any params in a while structure

[20:23] <jnthn> m: while 1 -> $x { say $x }

[20:23] <camelia> rakudo-moar 4de858: OUTPUT: «(timeout)1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1␤1…»

[20:23] <lizmat> hmmm... that appears to run a lot ?

[20:23] <ugexe> m: while $(1,2) -> @_ { LAST { say 42 }; last if $++ }

[20:23] <camelia> rakudo-moar 4de858: OUTPUT: «42␤»

[20:24] <jnthn> Yeah, it should be passed the thing

[20:24] <lizmat> ah, TIL

[20:24] <jnthn> That's why the (not entirely wise unless you know your data) while @a.pop -> $x { } works

[20:24] <jnthn> Not sure what's up with the example ugexe posted

[20:25] <jnthn> m: while $(1,2) -> @_ { say 42; last }

[20:25] <camelia> rakudo-moar 4de858: OUTPUT: «42␤»

[20:25] <jnthn> m: while $(1,2) -> @_ { say @_; last }

[20:25] <camelia> rakudo-moar 4de858: OUTPUT: «(1 2)␤»

[20:25] <jnthn> Something about the FIRST apparently

[20:28] <ugexe> m: for $(1,2) -> @_ { FIRST { say 42 } }

[20:28] <camelia> rakudo-moar 4de858: OUTPUT: «42␤»

[20:29] <ugexe> m: while $(1,2) { FIRST { say 42 } last if $++ }

[20:29] <camelia> rakudo-moar 4de858: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Strange text after block (missing semicolon or comma?)␤at <tmp>:1␤------> 3while $(1,2) { FIRST { say 42 }7⏏5 last if $++ }␤    expecting any of:␤        infix␤        infix stopper␤     …»

[20:29] <ugexe> m: while $(1,2) { FIRST { say 42 }; last if $++ }

[20:29] <camelia> rakudo-moar 4de858: OUTPUT: «42␤»

[20:33] <jnthn> m: while $(1,2) -> @_ { FIRST { say 42 } }

[20:33] <camelia> rakudo-moar 4de858: OUTPUT: «Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at <tmp> line 1␤␤»

[20:33] <jnthn> m: while $(1,2) -> $_ { FIRST { say 42 } }

[20:33] <camelia> rakudo-moar 4de858: OUTPUT: «Too few positionals passed; expected 1 argument but got 0␤  in block <unit> at <tmp> line 1␤␤»

[20:34] <jnthn> Ah, OK, it's nothing about the @

[20:34] <jnthn> So seems to be while block + parameter + FIRST

[20:37] <ugexe> m: while $(1,2) -> $_? { FIRST { say 42 }; last if $++ }

[20:37] <camelia> rakudo-moar 4de858: OUTPUT: «42␤»

[20:38] <ugexe> m: while $(1,2) -> *@_ { FIRST { say 42 }; say @_.perl; last if $++ }

[20:38] <camelia> rakudo-moar 4de858: OUTPUT: «42␤[]␤[]␤»

[20:41] <ugexe> m: while $(1,2) -> $_? { say $_.perl; last if $++ }

[20:41] <camelia> rakudo-moar 4de858: OUTPUT: «Mu␤Mu␤»
