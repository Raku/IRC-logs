[01:15] * lizmat commented on https://github.com/rakudo/rakudo/commit/25fd1ca3e33666a1264

[01:15] * lizmat gets a few hours of sleep

[01:56] <japhb> .tell jnthn Sheesh, it just took *several hours* to show up.  WTH, RT?

[01:56] <yoleaux2> japhb: I'll pass your message to jnthn.

[02:07] <geekosaur> I swear they only run their mail queue every couple of hours; I get nothing for hours and then a bunch of ticket updates all at once

[05:45] <lizmat> Files=1175, Tests=55878, 188 wallclock secs (11.49 usr  4.37 sys + 1123.80 cusr 110.80 csys = 1250.46 CPU)

[06:17] * lizmat starts commuting&

[06:32] <samcv> .tell pmurias yeah it will happen in march sadly

[06:32] <yoleaux2> samcv: I'll pass your message to pmurias.

[08:25] <nine> .tell lizmat https://github.com/niner/Inline-Perl5/commit/f461fabb67 is the solution :)

[08:25] <yoleaux2> nine: I'll pass your message to lizmat.

[11:35] <Geth> ¬¶ rakudo/nom: 20614854da | (Samantha McVey)++ | 5 files

[11:35] <Geth> ¬¶ rakudo/nom: Add $*COLLATION var and implement coll operator

[11:35] <Geth> ¬¶ rakudo/nom:

[11:35] <Geth> ¬¶ rakudo/nom: $*COLLATION will allow setting of the collation level that the `col`

[11:35] <Geth> ¬¶ rakudo/nom: operator applies.

[11:35] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/20614854da

[11:39] <timotimo> oh, that's coll.

[11:40] <samcv> so unicmp just does language and country inspecefic but coll will use the value of $*COLLATION

[11:40] <samcv> and we can have a .collate similar to .sort

[11:42] <jnthn> Having just gone through a lengthy bisect to try and figure out what busted my $dayjob codebase, fd8df7f2ad is the commit that's apparently to blame

[11:42] <jnthn> There is a use of .rotor in the code in question

[11:45] <samcv> didn't seem too much changed in that commit other than moving locations and adding some #?if jvm

[11:45] <samcv> hm

[11:46] <jnthn> Well, I do something like (gather some-func()).rotor(100, :partial)

[11:47] <jnthn> And previously that would have called .list on the output of the gather prior to the .rotor stuff

[11:47] <jnthn> Indeed, if I stick a .list call explicitly into my program, it seems to fix things.

[11:50] <jnthn> m: sub foo() { for ^20 { take 'x' } }; for (gather foo()).rotor(3, :partial) { .say }

[11:50] <camelia> rakudo-moar c0a907: OUTPUT¬´(x x x)‚ê§(x x x)‚ê§(x x x)‚ê§(x x x)‚ê§(x x x)‚ê§(x x x)‚ê§(x x)‚ê§Cannot invoke this object (REPR: Uninstantiable; Callable)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[11:50] <jnthn> m: sub foo() { for ^20 { take 'x' } }; for (gather foo()).list.rotor(3, :partial) { .say }

[11:50] <camelia> rakudo-moar c0a907: OUTPUT¬´(x x x)‚ê§(x x x)‚ê§(x x x)‚ê§(x x x)‚ê§(x x x)‚ê§(x x x)‚ê§(x x)‚ê§¬ª

[11:50] <jnthn> Aha!

[11:51] <jnthn> bisectable: sub foo() { for ^20 { take 'x' } }; for (gather foo()).rotor(3, :partial) { .say }

[11:51] <bisectable6> jnthn, Bisecting by exit code (old=2015.12 new=2061485). Old exit code: 0

[11:51] <pmurias> jnthn: any quick hints why sub foo($foo, $bar = sub {$foo}) {...} works when using lowered signatures? It's get compiled to QAST::Block.new(my $value, QAST::Var.new(:name<$bar>, :default(...do p6capturelex on WVal with $block1 and invoke it...), $block1 = QAST::Block(do capturelex on WVal with $block2 and invoke it), $block2 = QAST::Block.new(...return $bar...))

[11:51] <yoleaux2> 06:32Z <samcv> pmurias: yeah it will happen in march sadly

[11:51] <bisectable6> jnthn, bisect log: https://gist.github.com/4bfa4dc4835a8c9dd440573eda3d3998

[11:51] <bisectable6> jnthn, (2017-01-18) https://github.com/rakudo/rakudo/commit/fd8df7f2ad509689a64b8825e1c4bb622cf7486f

[11:52] <pmurias> jnthn: I would expect the $block2 that for p6capturelex to work $block2 would need to be inside $block1, right?

[11:56] <jnthn> pmurias: Yeah, I'm guessing we fail to nest stuff properly during the thunking

[11:56] <jnthn> So it "works" (e.g. probably breaks if we recurse)

[11:56] <jnthn> (or thread)

[11:57] <pmurias> jnthn: why does it work at all?

[11:57] <jnthn> pmurias: Probably some kind of autoclose

[11:57] <jnthn> And that perl6_ops.c thing I pointed you at before where we ignore cases where the outer is wrong

[11:58] <jnthn> Instead of blowing up on them

[12:02] <pmurias> jnthn: should I make things nest properly?

[12:03] <jnthn> pmurias: Yes

[12:03] <jnthn> If you've time/motivation to do so :-)

[12:03] <jnthn> They all want sorting out, it's not not always trivial to do so

[12:03] <jnthn> But in this case should be

[12:04] <jnthn> I think we might get it right for where clauses; if so can nab a solution from there

[12:05] <jnthn> rotor bug reported as https://rt.perl.org/Ticket/Display.html?id=130725

[13:06] <Geth> ¬¶ nqp: b5dea6d359 | (Samantha McVey)++ | tools/build/MOAR_REVISION

[13:06] <Geth> ¬¶ nqp: Bump MoarVM to get improvements to unicmp_s

[13:06] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/b5dea6d359

[13:06] <Geth> ¬¶ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.01-31-g20dfa6bb...2017.01-34-gab225fa9

[13:08] <Geth> ¬¶ rakudo/nom: 4efcc29c80 | (Samantha McVey)++ | tools/build/NQP_REVISION

[13:08] <Geth> ¬¶ rakudo/nom: Bump MoarVM/NQP to get improvements for the coll collation operator

[13:08] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4efcc29c80

[13:08] <Geth> ¬¶ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.01-70-g439b51e8...2017.01-71-gb5dea6d3

[13:10] <travis-ci> NQP build passed. Samantha McVey 'Bump MoarVM to get improvements to unicmp_s'

[13:10] <travis-ci> https://travis-ci.org/perl6/nqp/builds/198830106 https://github.com/perl6/nqp/compare/439b51e89a70...b5dea6d35914

[15:06] <Geth> ¬¶ nqp: 83080ffed0 | (Samantha McVey)++ | docs/ops.markdown

[15:06] <Geth> ¬¶ nqp: Update unicmp_s op documentation

[15:06] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/83080ffed0

[15:39] <Geth> ¬¶ nqp: 2909825e5b | (Samantha McVey)++ | docs/ops.markdown

[15:39] <Geth> ¬¶ nqp: Add documentation for getstrfromname op and update unicmp_s desc.

[15:39] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/2909825e5b

[15:47] * lizmat waves from Keflavik

[15:47] <yoleaux2> 08:25Z <nine> lizmat: https://github.com/niner/Inline-Perl5/commit/f461fabb67 is the solution :)

[15:48] <jnthn> o/ lizmat

[15:48] <lizmat> jnthn o/

[15:48] <jnthn> Been a long while since I was at Keflavik

[15:48] <jnthn> Last time I went to Iceland I only ended up there half as many times as planned. :)

[15:49] <lizmat> it's our first time.... and it's grey and raining  :-)

[15:49] <jnthn> heh, and thinking about it, that was the only time I went to Iceland,

[15:49] <jnthn> Was meant to fly out of there. But...volcano :)

[15:49] <lizmat> hehe

[15:49] <jnthn> So ended up flying out of the airport on the north coast :)

[15:49] * lizmat is watching big purple plains with WOW on them

[15:50] <lizmat> *planes

[15:50] <jnthn> Much WOW.

[15:59] <lizmat> .tell nine WOW  :-)

[15:59] <yoleaux2> lizmat: I'll pass your message to nine.

[16:03] <lizmat> https://news.ycombinator.com/item?id=13579838   #nice

[16:05] <Geth> ¬¶ roast: ronaldxs++ created pull request #228: add fudge-usage-stat.pl to show usage of fudge implementations, verbs‚Ä¶

[16:05] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/pull/228

[16:07] <lizmat> commuting again&

[16:36] <IOninja> hm, perl6.wtf builder is failing again to merge master into coverage branch: https://gist.github.com/zoffixznet/24bfd9e5bb378660cb584608b01fa101

[16:37] <IOninja> Something with ops. Maybe it'd be possible to merge that branch to master?

[17:13] <samcv> :(

[17:16] <samcv> IOninja, also that may be the case, sorta. may need to add the op and then regenerate the stuff

[17:17] <samcv> with ./tools/update_ops.p6

[17:17] <samcv> that is what i'd do

[17:30] <[Coke]> samcv: is your grant going to be submitted to the normal GC process in the next round?

[17:30] <yoleaux2> 4 Feb 2017 17:01Z <brokenchicken> [Coke]: BTW is it just a typo on this grant approval page that it says "Test2 Manual" http://news.perlfoundation.org/2017/01/january-2017-grant-votes.html ? I just thought... what if that vote was actually for Test2 Manual

[17:30] <samcv> [Coke], i think it's already submitted

[17:30] <samcv> well he said he'd get back to me if they figure out a way to do it before March

[17:30] <samcv> but i assume it's already submitted for march becasue i emailed him the proposal

[17:31] <[Coke]> brokenchicken: yes, it's a typo. I'll mention it to Makoto.

[17:44] <IOninja> cool :)

[17:54] <[Coke]> given that you have a grant manager, I think you're OK

[19:06] <TimToady> nine: I'm having a problem with my braids branch where when make runs tools/build/install-core-dist.pl, it doesn't successfully re-Precompile CompUnit::Repository::Staging, and it's not clear what's going wrong

[19:06] <TimToady> $core-dist.meta is just returning {ver => v0}

[19:07] <TimToady> any kloo where I should look?

[19:10] <TimToady> any amount of blowing things away doesn't help, so it's some difference in what I've done with the compiler, but I'm not seeing it

[19:11] <TimToady> I don't think any of the REPO stuff depends closely on whether cursors use %*LANG directly, or indirectly via the cursor...

[19:14] <TimToady> unless maybe something went wrong in an EVAL somewhere...

[19:21] <TimToady> hmm, maybe EVAL $!serialized-spec;

[19:28] <TimToady> no, that seems like it's used only for NativeCall stuff, and that all seems to precompile fine...

[19:32] <nine> TimToady: that sounds....odd

[19:32] <yoleaux2> 15:59Z <lizmat> nine: WOW  :-)

[19:33] <nine> Can hardly be the EVAL since CompUnit::Repository::Staging has no dependencies

[19:33] <TimToady> maybe something's going wrong in compile_in_context, when has a weird comment:

[19:34] <TimToady> # For now, EVALed code run during precomp will not get the

[19:34] <TimToady> # outer lexical context's symbols as those may contain or

[19:34] <TimToady> # reference unserializable objects leading to compilation

[19:34] <TimToady> # failures. Needs a smarter approach as noted above.

[19:34] <nine> Oh yeah, I remember that one

[19:35] <TimToady> though I'm not seeing any compilation failures

[19:35] <TimToady> well, a recompilaation failure, I suppose...

[19:35] <TimToady> but I'm not really doing anything with outers

[19:36] <nine> Maybe the JSON decoder?

[19:36] <TimToady> I guess, if it uses cursors

[19:36] <TimToady> a good lead, anyway

[19:38] <Geth> ¬¶ roast: ronaldxs++ created pull request #229: Fix typo misspellings of fudge implementation niezca

[19:38] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/pull/229

[19:47] <mr_ron> Commit message on pull amended to niecza

[19:48] <Geth> ¬¶ roast: 629a459ecf | (Ronald Schmidt)++ | 4 files

[19:48] <Geth> ¬¶ roast: Fix typo misspellings of fudge implementation niecza (#229)

[19:48] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/629a459ecf

[20:01] <TimToady> except it doesn't appear that the offending statement is actually parsing any JSON...

[20:10] <TimToady> will think more about compile_in_context in the context of lunch...

[22:50] <MasterDuke> anybody have comments/thoughts/objections on https://github.com/perl6/nqp/pull/345? if not i'll probably squash and merge later tonight

[22:59] <timotimo> MasterDuke: i think the commit's fine :)

[22:59] * IOninja has no comments.

[22:59] <timotimo> if it doesn't make the jvm unhappy

[22:59] <timotimo> which i think you've checked it doesn't

[23:57] <TimToady> nine: you were right, it was something to do with the JSON decoder, I wasn't setting up the grammar actions right
