[08:27] <lizmat> Files=1207, Tests=62761, 219 wallclock secs (13.15 usr  5.02 sys + 1326.96 cusr 134.70 csys = 1479.83 CPU)

[09:04] <[Tux]> This is Rakudo version 2017.06-64-gfe7ea124c built on MoarVM version 2017.06-14-g888b33d1

[09:04] <[Tux]> csv-ip5xs        2.631

[09:04] <[Tux]> test            13.068

[09:04] <[Tux]> test-t           4.091 - 4.154

[09:04] <[Tux]> csv-parser      12.586

[10:37] <Geth> ¦ rakudo/nom: 1f5bed4b4b | (Elizabeth Mattijsen)++ | src/core/Rakudo/QuantHash.pm

[10:37] <Geth> ¦ rakudo/nom: Introducing R:Q.BAGGY-CLONE

[10:37] <Geth> ¦ rakudo/nom:

[10:37] <Geth> ¦ rakudo/nom: Create a deep clone of any Baggy/Mixy

[10:37] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1f5bed4b4b

[10:37] <Geth> ¦ rakudo/nom: a2a0d5c622 | (Elizabeth Mattijsen)++ | 8 files

[10:37] <Geth> ¦ rakudo/nom: Tighten up all inter-QuantHash coercions/clone

[10:37] <Geth> ¦ rakudo/nom:

[10:37] <Geth> ¦ rakudo/nom: There were quite some cases where coercing a mutable to an immutable

[10:37] <Geth> ¦ rakudo/nom: version or clone would keep the underlying values shared, potentially

[10:37] <Geth> ¦ rakudo/nom: causing quite some action at a distance.

[10:37] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a2a0d5c622

[12:03] <Geth> ¦ rakudo/nom: 19a1caa330 | (Elizabeth Mattijsen)++ | 2 files

[12:03] <Geth> ¦ rakudo/nom: Fix various coercion related issues with (-)

[12:03] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/19a1caa330

[12:13] <dogbert17> .seen lollercopter

[12:13] <yoleaux> I saw lollercopter 24 Jun 2017 17:00Z in #perl6: <lollercopter> \o

[12:15] <dogbert17> .tell lollercopter hasn't IOninja's recent IO work made https://github.com/perl6/doc/issues/852 closable?

[12:15] <yoleaux> dogbert17: I'll pass your message to lollercopter.

[13:03] <Geth> ¦ roast: 274766007d | (Elizabeth Mattijsen)++ | S03-operators/difference.t

[13:03] <Geth> ¦ roast: Add quite a few (-) coercion tests

[13:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/274766007d

[14:05] <dogbert17> I'm trying to fix https://github.com/perl6/doc/issues/858. I have tried to improve the text but there's always a chance that it has become even worse than before. Grateful if anyone would like to look it over

[14:06] <dogbert17> and here's the gist: https://gist.github.com/dogbert17/1674bbf7fff38db92062b4b5cbc300a4

[14:08] <lizmat> dogbert17: looks like an improvement to me :-)

[14:12] <dogbert17> lizmat, thx. If no one else comments I'll add the text and close the issue :)

[14:14] <Geth> ¦ rakudo/nom: f3b2d952d6 | (Elizabeth Mattijsen)++ | src/core/Rakudo/QuantHash.pm

[14:14] <Geth> ¦ rakudo/nom: Fix issue with Baggy (-) Setty

[14:14] <Geth> ¦ rakudo/nom:

[14:14] <Geth> ¦ rakudo/nom: Caught while writing more tests

[14:14] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f3b2d952d6

[14:14] <Geth> ¦ rakudo/nom: b66d87833d | (Elizabeth Mattijsen)++ | 2 files

[14:14] <Geth> ¦ rakudo/nom: Make Setty (-) Iterable about 3.5x faster

[14:14] <Geth> ¦ rakudo/nom:

[14:14] <Geth> ¦ rakudo/nom: - actually infinitely faster when left side is empty Set, as we don't

[14:14] <Geth> ¦ rakudo/nom:   iterate at all in that case

[14:14] <Geth> ¦ rakudo/nom: - also stops iterating as soon as result is the empty Set, which in

[14:14] <Geth> ¦ rakudo/nom:   some case may give significantly better results

[14:14] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b66d87833d

[14:33] <Geth> ¦ rakudo/nom: 36ca2fb4a5 | (Elizabeth Mattijsen)++ | 2 files

[14:33] <Geth> ¦ rakudo/nom: Make Setty (-) Setty stop when result is empty Set

[14:33] <Geth> ¦ rakudo/nom:

[14:33] <Geth> ¦ rakudo/nom: Also abstract the logic into R:Q.SUB-SET-FROM-SET

[14:33] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/36ca2fb4a5

[14:42] <dogbert17> m: say 2.5.^lookup(‘sqrt’).perl

[14:42] <camelia> rakudo-moar b66d87: OUTPUT: «method sqrt (Rat $: *%_) { #`(Method|52406416) ... }␤»

[14:45] <dogbert17> when doing the above is it method 'lookup' hidden in 'role Metamodel::MethodContainer' which is called?

[14:45] <dogbert17> looking ar https://github.com/perl6/doc/issues/875

[14:45] <dogbert17> *at

[14:52] <lizmat> dogbert17: any foo.^method is really foo.HOW(foo).method

[14:52] <lizmat> is that an answer ?

[14:59] <timotimo> since 2.5 has the ClassHOW HOW you can find what roles it looks through in the ClassHOW file

[14:59] <timotimo> and yeah, i'd expect this to be MethodContainer's lookup method

[14:59] <Geth> ¦ roast: 3a994f69e3 | (Elizabeth Mattijsen)++ | S03-operators/difference.t

[14:59] <Geth> ¦ roast: Add two coercions, fix 2 coercions for (-)

[14:59] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3a994f69e3

[15:01] <Geth> ¦ rakudo/nom: a2133dbc6a | (Elizabeth Mattijsen)++ | 2 files

[15:01] <Geth> ¦ rakudo/nom: Fix Baggy/Mixy (-) Any/Iterable

[15:01] <Geth> ¦ rakudo/nom:

[15:01] <Geth> ¦ rakudo/nom: Any/Iterable should be coerced to Set, not Bag/Mix

[15:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a2133dbc6a

[15:31] <dogbert17> lizmat, timotimo, thx, if we're to add docs for lookup it's good to know where :)

[15:39] <dogbert17> m: say 2.5.^lookup(‘sqrt’).perl

[15:39] <camelia> rakudo-moar a2133d: OUTPUT: «method sqrt (Rat $: *%_) { #`(Method|42670208) ... }␤»

[15:39] <dogbert17> m: say 2.5.^lookup(‘not-exist’).perl

[15:39] <camelia> rakudo-moar a2133d: OUTPUT: «Mu␤»

[15:41] <dogbert17> so if no method object can be found it returns a type object?

[15:42] <lizmat> dogbert17: nqp land doesn't know about Nil

[15:53] <dogbert17> lizmat thx ahain

[15:53] <dogbert17> *again

[16:06] <dogbert17> timotimo, lizmat: here's my first attempt, rip it to shreads :) https://gist.github.com/dogbert17/4bb9490a7da02f33c83257aad381925c

[16:09] <dogbert17> I'm a bit unsure if I should write 'method lookup(Metamodel::MethodContainer: $obj, $name)' when the code explicitly says 'method lookup($obj, $name)'

[16:21] <Geth> ¦ rakudo/nom: 9936a3be28 | (Elizabeth Mattijsen)++ | 2 files

[16:21] <Geth> ¦ rakudo/nom: Make Setty (-) Map between 2x and 3x faster

[16:21] <Geth> ¦ rakudo/nom:

[16:21] <Geth> ¦ rakudo/nom: - 3x for objecthashes

[16:21] <Geth> ¦ rakudo/nom: - 2x for normal hashes and Maps

[16:21] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9936a3be28

[16:21] <lizmat> afk&

[16:39] <dogbert17> I've now updated the gist, grateful for feedback

[16:51] <dogbert17> masterduke++, fixed

[20:20] <MasterDuke> an updated example of coverable's output if anybody is interested: https://gist.github.com/Whateverable/2065c047b27e4b12baf7404159bb3fca

[20:20] <MasterDuke> thoughts/suggestions welcome

[20:20] <MasterDuke> timotimo: ^^^

[22:59] <AlexDaniel> more suggestions? https://gist.github.com/Whateverable/a65c0f5ea1f62c274af3a53d5135d3c6

[22:59] <AlexDaniel> timotimo: ↑

[23:01] <timotimo> lovely!

[23:06] <Geth> ¦ rakudo/nom: e4f3358fa8 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[23:06] <Geth> ¦ rakudo/nom: Make Any (-) Map|Iterable about 2x faster

[23:06] <Geth> ¦ rakudo/nom:

[23:06] <Geth> ¦ rakudo/nom: - because the right hand side no longer gets coerced to a Set first

[23:06] <Geth> ¦ rakudo/nom: - but instead is handled on-the-fly

[23:06] <Geth> ¦ rakudo/nom: - possibly without any iteration if the left is equivalent to an empty Set

[23:06] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e4f3358fa8

[23:07] <lizmat> which concludes my hacking for today

[23:07] <lizmat> good night!
