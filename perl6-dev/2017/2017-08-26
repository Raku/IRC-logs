[00:32] <AlexDaniel> is there anybody here suffering from Malformed UTF-8 issue?

[01:09] <AlexDaniel> :'|

[01:10] <MasterDuke> that seems to have dropped off the radar, you just started seeing it again?

[01:10] <AlexDaniel> I have a file here that's failing on 257570th line, you know…

[01:10] <AlexDaniel> if I delete any file before that, it stops failing there

[01:10] <AlexDaniel> any line*

[01:11] <AlexDaniel> and of course it fails elsewhere, like 100000 lines further…

[01:11] <samcv> do you know if it's valid?

[01:12] <AlexDaniel> samcv: I don't know, but given that rakudo is able to parse it under certain conditions, I guess it is valid

[01:13] <AlexDaniel> for example, I tried sed s/[A-Z]/_/; and it stopped failing

[01:13] <AlexDaniel> or, I tried piping into it in different ways

[01:13] <AlexDaniel> like from sed or something

[01:13] <AlexDaniel> and for the same input it may fail in different places

[01:13] <samcv> hm

[01:15] <AlexDaniel> “perl6 -ne '…' < golfed” fails

[01:15] <AlexDaniel> same thing with “perl6 -ne '…' golfed”

[01:16] <AlexDaniel> “cat golfed | perl6 -ne '…'” and… obviously… this one is fine

[01:16] <AlexDaniel> except when you run it again, then it fails

[01:17] <AlexDaniel> does anybody want to play with it?

[01:18] <BenGoldberg> What if you give the program to a non-perl-based utf8 validator?

[01:19] <BenGoldberg> Or maybe I should say, non-perl6-based validator ...

[01:19] <BenGoldberg> cat golfed | perl5 -ne '...'

[01:19] <AlexDaniel> iconv -f UTF-8 golfed -o /dev/null; echo $? # 0

[01:20] <AlexDaniel> isutf8 golfed; echo $? # 0

[01:22] <AlexDaniel> anyway, here's the file: https://files.progarm.org/golfed.gz

[01:22] <AlexDaniel> perl6 --ll-exception -ne 'say $++' < golfed

[01:22] <AlexDaniel> (say $++ makes it a bit slower, but it's easier to see what's happening this way)

[01:23] <AlexDaniel> this thing is driving me crazy actually

[01:24] <AlexDaniel> (when piping into it, make sure to do a couple of runs to see how inconsistent it is)

[01:33] <geekosaur> sounds more likely to be I/O related than unicode related

[01:33] <geekosaur> like it's dropping bytes on the floor and if the utf8 decoder was in (or lands in) the middle of a sequence, boom

[01:35] <AlexDaniel> sure

[01:40] <[Coke]> malformed utf-8 never stopped seeing it.

[01:41] <AlexDaniel> \o/

[01:41] <AlexDaniel> this gives hope!

[01:56] <AlexDaniel> eh, ok: RT #131961

[01:56] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131961

[01:57] <[Coke]> thanks

[07:32] <Skarsnik> .

[08:17] <Geth> ¦ rakudo/nom: 753c9a5ead | (Elizabeth Mattijsen)++ | src/core/Str.pm

[08:17] <Geth> ¦ rakudo/nom: List.join is not guaranteed to return Str in the future

[08:17] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/753c9a5ead

[08:17] <nine> Zoffix: I fixed require.t and possibly other flappers by having S11-modules/perl6lib.t no longer create an empty Test.pm6 where other tests may find it.

[08:19] <lizmat> aaaaahhhh  :-)

[08:27] <Skarsnik> m: use NativeCall; sub foo(num $a) is native {};

[08:27] <camelia> rakudo-moar d0a5cf: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>?Cannot resolve caller infix:<==>(NQPMu, Int); none of these signatures match:?    ($?)?    (\a, \b)?    (Real \a, Real \b)?    (Int:D \a, Int:D \b)?    (int $a, int $b)?    (Num:D \a, Num:D \b …»

[08:28] <Skarsnik> can someone push https://github.com/rakudo/rakudo/pull/1133 to fix this? (the build error is only for win32 when rakudo was not building on it)

[08:35] <Geth> ¦ rakudo/nom: 4077842c87 | (Sylvain Colinet)++ | 2 files

[08:35] <Geth> ¦ rakudo/nom: Fix NativeCall signature check routine dieing on unsuported native type (int, num). Change the tests to catch up this kinda of error

[08:35] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4077842c87

[08:35] <Geth> ¦ rakudo/nom: 3518b13bc8 | lizmat++ (committed using GitHub Web editor) | 2 files

[08:35] <Geth> ¦ rakudo/nom: Merge pull request #1133 from Skarsnik/nc-sig-check-fix

[08:35] <Geth> ¦ rakudo/nom:

[08:35] <Geth> ¦ rakudo/nom: Fix NativeCall signature check routine dieing on unsuported native type

[08:35] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3518b13bc8

[08:35] <Skarsnik> thx :)

[08:39] <lizmat> Skarsnik: no, thank you!

[08:39] <lizmat> :-)

[08:40] <Skarsnik> dunno why suddendly it get an undef and not 0

[08:41] <Skarsnik> m: say Num.^nativesize

[08:41] <camelia> rakudo-moar 753c9a: OUTPUT: «No such method 'nativesize' for invocant of type 'Perl6::Metamodel::ClassHOW'?  in block <unit> at <tmp> line 1??»

[08:41] <Skarsnik> m: say num.^nativesize

[08:41] <camelia> rakudo-moar 753c9a: OUTPUT: «No such method 'gist' for invocant of type 'NQPMu'. Did you mean 'isa'??  in block <unit> at <tmp> line 1??»

[08:43] <Skarsnik> should it return Nil or just not be defined at all§

[08:45] <Skarsnik> m: num.^nativesize == 0

[08:45] <camelia> rakudo-moar 753c9a: OUTPUT: «WARNINGS for <tmp>:?Useless use of "==" in expression ".^nativesize == 0" in sink context (line 1)?Cannot resolve caller infix:<==>(NQPMu, Int); none of these signatures match:?    ($?)?    (\a, \b)?    (Real \a, Real \b)?    (Int:D \a, Int:D…»

[08:45] <Skarsnik> bisectable6, num.^nativesize == 0

[08:45] <bisectable6> Skarsnik, Bisecting by exit code (old=2015.12 new=3518b13). Old exit code: 0

[08:45] <bisectable6> Skarsnik, bisect log: https://gist.github.com/93e0e96d65525813b8e1ac0f4c69f552

[08:45] <bisectable6> Skarsnik, (2017-04-01) https://github.com/rakudo/rakudo/commit/af4aae240d7b2c27556485274eb58cb555485618

[08:47] <Skarsnik> m: uint.^nativesize == 0

[08:47] <camelia> rakudo-moar 753c9a: OUTPUT: «WARNINGS for <tmp>:?Useless use of "==" in expression ".^nativesize == 0" in sink context (line 1)?Cannot resolve caller infix:<==>(NQPMu, Int); none of these signatures match:?    ($?)?    (\a, \b)?    (Real \a, Real \b)?    (Int:D \a, Int:D…»

[09:12] <Geth> ¦ rakudo/jit_nativecall: ac9ea4fe7c | (Stefan Seifert)++ | 2 files

[09:12] <Geth> ¦ rakudo/jit_nativecall: Test Pointer return values in argless function

[09:12] <Geth> ¦ rakudo/jit_nativecall: review: https://github.com/rakudo/rakudo/commit/ac9ea4fe7c

[09:31] <Geth> ¦ rakudo/nom: 6cec6b7218 | (Elizabeth Mattijsen)++ | src/core/Hash.pm

[09:31] <Geth> ¦ rakudo/nom: Fix for RT #126951

[09:31] <Geth> ¦ rakudo/nom:

[09:31] <Geth> ¦ rakudo/nom: Sorry, this appears to have fallen through the cracks.

[09:31] <Geth> ¦ rakudo/nom:

[09:31] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126951

[09:31] <Geth> ¦ rakudo/nom: Please note though that a FLATTENABLE_HASH cannot represent all

[09:31] <Geth> ¦ rakudo/nom: object hashes correctly, only the ones that happen to have Str for

[09:31] <Geth> ¦ rakudo/nom: keys.  If the key is not a Str, it will be coerced to Str in the

[09:31] <Geth> ¦ rakudo/nom: returned hash

[09:31] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6cec6b7218

[11:16] <Geth> ¦ nqp: c368470ddf | (Samantha McVey)++ | 2 files

[11:16] <Geth> ¦ nqp: Add new --ignore-errors flag to ./Configure.pl

[11:16] <Geth> ¦ nqp:

[11:16] <Geth> ¦ nqp: Will allow you to compile nqp even if MoarVM/JVM versions

[11:16] <Geth> ¦ nqp: are not high enough. May ignore certain other errors as well.

[11:16] <Geth> ¦ nqp: It could be extended to allow functioning when other errors

[11:16] <Geth> ¦ nqp: occur, but that will need to be added as needed, since the

[11:16] <Geth> ¦ nqp: script often doesn't pass information along when failing

[11:16] <Geth> ¦ nqp: conditions are encountered.

[11:16] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c368470ddf

[11:40] <timotimo> nice

[11:51] <nine> Regarding 6.d, I'd like to talk about whether to prohibit a use v6.d; anywhere but in the top most scope of a computation unit and maybe even anywhere but as the very first statement there.

[11:54] <nine> Also if we want to continue working in the direction of methods being able to get the caller's language version, it may be useful to have Language objects (stored in a $?LANGUAGE or something like that in the comp units outer lexical scope).

[11:56] <nine> If those are singletons (one per language/version), a comparison might become pretty cheap. Except of course if you need to compare with >

[12:38] <Geth> ¦ nqp: e5e5a3f03c | (Samantha McVey)++ | Configure.pl

[12:38] <Geth> ¦ nqp: Fix a bug in the last commit, that could cause configure errors

[12:38] <Geth> ¦ nqp:

[12:38] <Geth> ¦ nqp: Previous commit added a line to print out errors that wouldn't

[12:38] <Geth> ¦ nqp: get printed out otherwise if you pass in --ignore-errors.

[12:38] <Geth> ¦ nqp: Doing this though would cause builds without --ignore-errors to

[12:38] <Geth> ¦ nqp: fail as often the messages may not be fatal messages. Correct this.

[12:38] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e5e5a3f03c

[13:16] <Geth> ¦ rakudo/nom: a5014fd085 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[13:16] <Geth> ¦ rakudo/nom: Fix RT #131962

[13:16] <Geth> ¦ rakudo/nom:

[13:16] <Geth> ¦ rakudo/nom: - Make sure we accept Mu as a value

[13:16] <Geth> ¦ rakudo/nom: - Use IterationEnd as a sentinel value on JVM (untested)

[13:16] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131962

[13:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a5014fd085

[13:24] <Geth> ¦ rakudo/nom: e8137b45c5 | (Elizabeth Mattijsen)++ | src/core/Junction.pm

[13:24] <Geth> ¦ rakudo/nom: Streamline Junction.defined|Bool|ACCEPTS

[13:24] <Geth> ¦ rakudo/nom:

[13:24] <Geth> ¦ rakudo/nom: - HLLize the value in only one place

[13:24] <Geth> ¦ rakudo/nom: - Remove unnecessary parens

[13:24] <Geth> ¦ rakudo/nom: - use nqp::isfalse($a) instead of nqp::if($a,0,1)

[13:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e8137b45c5

[13:26] <Geth> ¦ rakudo/jit_nativecall: 85c1e8fd39 | (Stefan Seifert)++ | 2 files

[13:26] <Geth> ¦ rakudo/jit_nativecall: Test argless native functions returning strings

[13:26] <Geth> ¦ rakudo/jit_nativecall: review: https://github.com/rakudo/rakudo/commit/85c1e8fd39

[13:35] <stmuk> I'm having problems with  IO::Path::ChildSecure (dependency for Cro)

[13:36] <stmuk> I don't seem to be able to install on .07 or .08

[13:54] <stmuk> hmm probably why --/test is suggested

[14:18] <dogbert11> how's the conference going?

[14:29] <lizmat> watching Sue Spence atm

[14:34] <dogbert11> aha, web crawling

[16:45] <TimToady> nine: the introspection approach kinda smells, and doesn't solve caller's caller; the approach suggested at https://irclog.perlgeek.de/perl6-dev/2017-08-25#i_15070774 doesn't involve introspection, but has other issues if you rely on the contructor from a library that upgrades to 6.d

[16:47] <TimToady> I suppose a constructor could be written to introspect and decide whether to return a 6.c or a 6.d object, but then that would stick via the type, and every method wouldn't have to introspect, just constructors

[16:47] <TimToady> that might be the Least Worst solution

[16:49] <TimToady> but the intent has always been that types have shortnames and longnames, and that shortnames are a lexically scoped alias to the longname for convenience

[16:52] <b2gills> I just ran my shell script I use for pulling and compiling Rakudo, and it just went below 3 minutes for what I think is the first time.

[16:56] <AlexDaniel> releasable6: status

[16:56] <releasable6> AlexDaniel, Next release in 21 days and ?2 hours. R6 is down. Changelog for this release was not started yet

[16:56] <releasable6> AlexDaniel, Details: https://gist.github.com/dbaedb3f2317e71c1ebd7136cd7c8d59

[16:57] <AlexDaniel> heh, instead of showing its guts it says “R6 is down”, cool bot

[16:57] <AlexDaniel> .tell Zoffix so what's up with perl6.fail? I think you were planning to use another domain for it?

[16:57] <yoleaux> AlexDaniel: I'll pass your message to Zoffix.

[16:57] <timotimo> TimToady: what's the obvious reason we have scalar containers just cloned and turned RO when passed as arguments?

[16:58] <timotimo> you know, the one that just escaped my mind

[16:59] <TimToady> because you can avoid even that if you can prove the container isn't written to, and just do things by reference

[17:02] <timotimo> i think also because we need to conserve "this is an item" for anything passed in a $foo

[17:02] <timotimo> that's probably the reason i almost thought of

[17:04] <TimToady> another thing that can be optimized away if provably not used

[17:05] <timotimo> right. most likely blocked by us not speshing into inlined spseh graphs yet

[17:07] <timotimo> i'll close my laptop to take part in the social meeting

[18:12] <Geth> ¦ roast: 1089a7f9b7 | (Moritz Lenz)++ | S05-metasyntax/lookaround.t

[18:12] <Geth> ¦ roast: RT #131964: tests for ^, ^^, $, $$ in <?after>

[18:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1089a7f9b7

[18:12] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131964

[18:49] <samcv> woot! \o/ got stacktraces printing a full backtrace on travis now https://travis-ci.org/MoarVM/MoarVM/jobs/268732500#L1486-L1545 finally can figure out this phantom segfault only happening on master MoarVM. but not on travis if it's my build or a PR build

[18:49] <samcv> no clue how that could be but..

[19:12] <AlexDaniel> samcv++ # p6daily :)

[19:12] <samcv> heh :)

[19:13] <samcv> not sure how often segfaults happen in nqp or rakudo branches if we want that in non-moarvm projects as well

[19:36] <Zoffix> AlexDaniel: it expired. New URL is https://fail.rakudo.party/

[19:36] <yoleaux> 16:57Z <AlexDaniel> Zoffix: so what's up with perl6.fail? I think you were planning to use another domain for it?

[19:37] <AlexDaniel> alright

[19:53] <Zoffix> stmuk: likely failing in Temp::Path used by its tests. It's flopping and I haven't determined why yet

[23:07] <Geth> ¦ rakudo/nom: f097e551bd | (Samantha McVey)++ | tools/build/create-moar-runner.pl

[23:07] <Geth> ¦ rakudo/nom: perl6-valgrind-m: remove --full-cleanup, add ENV conf. var

[23:07] <Geth> ¦ rakudo/nom:

[23:07] <Geth> ¦ rakudo/nom: Remove --full-cleanup because it causes confusing valgrind output,

[23:07] <Geth> ¦ rakudo/nom: (currently not working properly).

[23:07] <Geth> ¦ rakudo/nom: Add a MVM_VALGRIND_OPTS environment variable so you can add options to

[23:07] <Geth> ¦ rakudo/nom: valgrind easily.

[23:07] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f097e551bd

[23:09] <Skarsnik> interesting

[23:21] <AlexDaniel> m: my @x[0];

[23:21] <camelia> rakudo-moar f097e5: OUTPUT: «Illegal dimension in shape: 0. All dimensions must be integers bigger than 0?  in block <unit> at <tmp> line 1??»

[23:21] <AlexDaniel> m: my int @x[0];

[23:21] <camelia> rakudo-moar f097e5: ( no output )

[23:21] <AlexDaniel> m: my int @x[0]; @x[0] = 42

[23:21] <camelia> rakudo-moar f097e5: OUTPUT: «Index 0 for dimension 1 out of range (must be 0..-1)?  in block <unit> at <tmp> line 1??»

[23:21] <AlexDaniel> m: my int @x[-1];

[23:21] <camelia> rakudo-moar f097e5: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 18446744073709551608 bytes?»

[23:24] <AlexDaniel> it feels like we had this already

[23:24] <AlexDaniel> arrays with negative size

[23:24] <AlexDaniel> m: my int @x[-2**63]; say @x.shape

[23:24] <camelia> rakudo-moar f097e5: OUTPUT: «(-9223372036854775808)?»

[23:25] <AlexDaniel> RT #126800

[23:25] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126800

[23:25] <AlexDaniel> hmmm

[23:43] <AlexDaniel> I created a new ticket instead of reopening the old one: RT #131966

[23:43] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131966

[23:51] <samcv> AlexDaniel, the problem i've diagnosed to that it's probably a garbage collection problem

[23:51] <samcv> causing corruption

[23:51] <AlexDaniel> samcv: you mean Malformed UTF-8 thingy?

[23:51] <samcv> yeah that
