[00:53] <MasterDuke> .tell jnthn if it helps, here's the MVM_dump_backtrace output at the problematic coerce_ni when running `say(100000000000000009)` https://gist.github.com/MasterDuke17/a34c63dece4f572d049a9fa67f0249db

[00:53] <yoleaux> MasterDuke: I'll pass your message to jnthn.

[00:53] <MasterDuke> .tell timotimo if it helps, here's the MVM_dump_backtrace output at the problematic coerce_ni when running `say(100000000000000009)` https://gist.github.com/MasterDuke17/a34c63dece4f572d049a9fa67f0249db

[00:53] <yoleaux> MasterDuke: I'll pass your message to timotimo.

[02:31] <ugexe> zef is suddently failing its appveyor tests when using an absolute path ala `zef install C:\my\repo`

[02:44] <ugexe> must be https://github.com/rakudo/rakudo/commit/494659a1c743624493a0d009f53e7ae206340de4 somehow

[02:55] <samcv> i'm deciding on the heirarchy of unicode property values right now

[02:55] <samcv> we will have General_Category and Script for sure. then if we add Grapheme_Cluster_Break that cuts the number of property values with conflicts down to 30

[02:56] <samcv> if anybody wants to see, https://github.com/perl6/specs/issues/118#issuecomment-302968322 the conflicts before resolving General_Category and Script

[02:57] <samcv> and thinking we should resolve Numeric_Type as well. since i'm sure code that does <:Numeric> exists out there. and Numeric is a value of Numeric_Type

[03:08] <ugexe> m: say $*CWD.parts; # regression?

[03:08] <camelia> rakudo-moar 1c16bf: OUTPUT: «Map.new((:basename("camelia"),:dirname("/home"),:volume("")))␤»

[03:09] <ugexe> star: say $*CWD.parts

[03:09] <camelia> star-m 2016.10: OUTPUT: «{basename => star-2016.10, directory => /home/camelia, dirname => /home/camelia, volume => }␤»

[03:11] <samcv> it's going to get more fun now i'm going to add in Property Names as well and how they interact with property aliases

[03:18] <ugexe> Zoffix: ^ note the above... it switched to a Map but more importantly it does not include the "directory" key

[03:20] <MasterDuke> ugexe: i believe the change to Map was intentional, to make it immutable. don't know about the "directory" key though

[03:26] <ugexe> whatever the problem is causing zef to fail was introduced in the last 13 hours anyway

[03:27] <ugexe> zef to fail on *windows*

[03:37] <ugexe> "This type cannot unbox to a native string: P6opaque, Zef::Utils::URI::URI::File"

[03:39] <AlexDaniel> samcv: by the way, um…

[03:40] <AlexDaniel> samcv: why not simply error out on stuff that is ambiguous?

[03:41] <samcv> that is fair enough. but i don't want to break everybodies code

[03:41] <samcv> so i cannot do such a thing for 6.c

[03:41] <samcv> there at least needs to be some heirachy when i retrofit our unicode system for me to not have conflicts and also make sure .unimatch and other random assortted things work properly :>

[03:42] <samcv> sadly it is not that simple from 1. breaking code and 2. how things are already setup inside MoarVM rakudo/nqp etc

[03:43] <samcv> but i'm down for only "Guaranteeing" certain properties which could be a different list

[03:43] <samcv> but even if we don't guarantee certain things i need to at least make some heirarchy.

[03:44] <ugexe> Zoffix: error seems to be a change in coercion. $*SPEC.join($foo, $bar, $baz) - if $foo is a match object it no longer gets stringified (hence the unbox error above)

[06:53] <Zoffix> .parts is not a regression

[06:54] <Zoffix> ugexe: are you using $*SPEC.join directly?

[06:57] <Zoffix> Ah ok, you already committed a patch

[07:05] <Zoffix> ZOFVM: Files=1242, Tests=135655, 112 wallclock secs (21.74 usr  3.25 sys + 2293.68 cusr 157.36 csys = 2476.03 CPU)

[07:06] <Geth> ¦ rakudo/nom: 232cf190d6 | (Zoffix Znet)++ | src/core/IO/Spec/Win32.pm

[07:06] <Geth> ¦ rakudo/nom: Add Str type constraints to IO::Spec::Win32 .join and .catpath

[07:06] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/232cf190d6

[07:23] <Zoffix> ZOFFLOP: t/spec/S17-supply/interval.t

[07:25] <Zoffix> I need to adjust one 6.c-errata test that I'm arguing is incorrect: https://github.com/perl6/roast/blob/6.c-errata/S16-io/print.t#L84-L88

[07:25] <Zoffix> 1) It expects different output for @array than for $array

[07:26] <Zoffix> 2) This is due to the signature in IO::Handle.print being *@, while in IO::Handle.say (and with my patch in .put) and &say, &put, and &print it's **@

[07:28] <Zoffix> 3) It appears the test was merely covering the current, at the time, behaviour. I don't recognize this person and they do not appear to be a member of rakudo org: https://github.com/perl6/roast/commit/d663fb5a4168e76c64f2bafc0eef486b88fabefb

[07:29] <Zoffix> ZofBot: the milk stool is complete!

[07:29] <ZofBot> Zoffix, A call to the scalar version "$o

[07:41] <nine> ZofBot: FWIW zhuomingliang is more of a MoarVM developer

[07:41] <ZofBot> nine, substr($

[07:41] <nine> Zoffix: FWIW zhuomingliang is more of a MoarVM developer

[07:41] <Zoffix> noted

[07:42] <Geth> ¦ rakudo/nom: 613bdcf834 | (Zoffix Znet)++ | src/core/IO/Handle.pm

[07:42] <Geth> ¦ rakudo/nom: [io grant] Make IO::Handle.print/.put sig consistent

[07:42] <Geth> ¦ rakudo/nom:

[07:42] <Geth> ¦ rakudo/nom: ... with IO::Handle.say, &say, &print, and &put

[07:42] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/613bdcf834

[07:42] <Geth> ¦ roast: 050d718a1d | (Zoffix Znet)++ | S16-io/print.t

[07:42] <Geth> ¦ roast: Fix incorrect IO::Handle.print: @array

[07:42] <Geth> ¦ roast:

[07:43] <Geth> ¦ roast: 1) It expects different output for @array than for $array

[07:43] <Geth> ¦ roast: 2) This is due to the signature in IO::Handle.print being *@,

[07:43] <Geth> ¦ roast:     while in IO::Handle.say (and with my patch in .put) and &say,

[07:43] <Geth> ¦ roast:     &put, and &print it's **@

[07:43] <Geth> ¦ roast: 3) Looking at the commit that brought the test, it appears the

[07:43] <Geth> ¦ roast:     test was merely covering the current, at the time, behaviour,

[07:43] <Geth> ¦ roast:     rather than a product of conscious design decision to make

[07:43] <Geth> ¦ roast:     behaviour different from subroutine forms and other methods:

[07:43] <Geth> ¦ roast:     https://github.com/perl6/roast/commit/d663fb5a4168e76c64f2ba

[07:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/050d718a1d

[07:43] <Geth> ¦ roast/6.c-errata: e20b1008ba | (Zoffix Znet)++ | S16-io/print.t

[07:43] <Geth> ¦ roast/6.c-errata: Fix incorrect IO::Handle.print: @array

[07:43] <Geth> ¦ roast/6.c-errata:

[07:43] <Geth> ¦ roast/6.c-errata: 1) It expects different output for @array than for $array

[07:43] <Geth> ¦ roast/6.c-errata: 2) This is due to the signature in IO::Handle.print being *@,

[07:43] <Geth> ¦ roast/6.c-errata:     while in IO::Handle.say (and with my patch in .put) and &say,

[07:43] <Geth> ¦ roast/6.c-errata:     &put, and &print it's **@

[07:43] <Geth> ¦ roast/6.c-errata: 3) Looking at the commit that brought the test, it appears the

[07:43] <Geth> ¦ roast/6.c-errata:     test was merely covering the current, at the time, behaviour,

[07:43] <Geth> ¦ roast/6.c-errata:     rather than a product of conscious design decision to make

[07:43] <Geth> ¦ roast/6.c-errata:     behaviour different from subroutine forms and other methods:

[07:43] <Geth> ¦ roast/6.c-errata:     https://github.com/perl6/roast/commit/d663fb5a4168e76c64f2ba

[07:43] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/e20b1008ba

[08:18] <Geth> ¦ roast: 4d0f97a922 | (Zoffix Znet)++ | S16-io/put.t

[08:18] <Geth> ¦ roast: [io grant] Add &put/IO::Handle.put tests

[08:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4d0f97a922

[08:18] <Geth> ¦ rakudo/nom: 601cdb6d58 | (Zoffix Znet)++ | t/spectest.data

[08:18] <Geth> ¦ rakudo/nom: Add S16-io/put.t to list of test files to run

[08:18] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/601cdb6d58

[08:49] <jnthn> morning o/

[08:49] <yoleaux> 00:53Z <MasterDuke> jnthn: if it helps, here's the MVM_dump_backtrace output at the problematic coerce_ni when running `say(100000000000000009)` https://gist.github.com/MasterDuke17/a34c63dece4f572d049a9fa67f0249db

[09:06] <Zoffix> \o

[09:45] <|Tux|> This is Rakudo version 2017.05-21-g601cdb6d5 built on MoarVM version 2017.05-9-g37460c7a

[09:45] <|Tux|> csv-ip5xs        2.585

[09:45] <|Tux|> test            12.491

[09:45] <|Tux|> test-t           4.264 - 4.275

[09:45] <|Tux|> csv-parser      12.967

[09:48] <lizmat> Files=1192, Tests=58679, 206 wallclock secs (12.44 usr  4.81 sys + 1220.11 cusr 116.30 csys = 1353.66 CPU)

[09:48] <yoleaux> 21 May 2017 21:36Z <Zoffix> lizmat: any idea if the Cool:D and Mu candidates can be merged together? I see the comment about optimization was deleted... do we still need to candidates with identical bodies? https://github.com/rakudo/rakudo/commit/b00d92de142f0d9b8514ca9985dc43a4b7d7625e

[09:50] <Zoffix> buggable: speed 6

[09:50] <buggable> Zoffix, ▁▁▇▇▂▂ data for 2017-05-20–2017-05-22; range: 4.225s–4.607s; 1% slower

[09:50] <Zoffix> \o/

[09:52] <lizmat> m: dd Pair.new(:a<b>)  # now it is silent ?

[09:52] <camelia> rakudo-moar 601cdb: OUTPUT: «(Mu) => Mu␤»

[09:52] <Zoffix> Unless the slowage is still there and got offset by .print/.put sig change

[09:53] <Zoffix> m: sub foo (*@) { }; for ^1000_00 { $ = foo "a", "b", "c" }; say now - INIT now

[09:53] <camelia> rakudo-moar 601cdb: OUTPUT: «0.3198904␤»

[09:53] <Zoffix> m: sub foo (**@) { }; for ^1000_00 { $ = foo "a", "b", "c" }; say now - INIT now

[09:53] <camelia> rakudo-moar 601cdb: OUTPUT: «0.28454634␤»

[09:53] <Zoffix> lizmat: oops. Will fix in a sec

[09:53] <lizmat> Zoffix: I have a fix

[09:53] <Zoffix> ok

[09:54] <Zoffix> Yeah, I only tested for wrong positionals :/

[09:54] <lizmat> spectesting now

[09:54] <Zoffix> m: dd Pair.new: <a b c>

[09:54] <camelia> rakudo-moar 601cdb: OUTPUT: «Cannot resolve caller new(Pair: List); none of these signatures match:␤    (Pair $: Cool:D \key, Mu \value, *%_)␤    (Pair $: Mu \key, Mu \value, *%_)␤    (Pair $: Mu :$key, Mu :$value, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[09:54] <lizmat> m: dd Pair.new(:a<b>)  # will give the same error

[09:54] <camelia> rakudo-moar 601cdb: OUTPUT: «(Mu) => Mu␤»

[09:59] <lizmat> m: my $a = $*VM; for ^100000 { Pair.new($a,42) }; say now - INIT now  # not cool

[09:59] <camelia> rakudo-moar 601cdb: OUTPUT: «0.13321350␤»

[09:59] <lizmat> m: my $a = "foo:; for ^100000 { Pair.new($a,42) }; say now - INIT now  # cool

[09:59] <camelia> rakudo-moar 601cdb: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in double quotes; couldn't find final '"' ␤at <tmp>:1␤------> 3new($a,42) }; say now - INIT now  # cool7⏏5<EOL>␤    expecting any of:␤        horizontal whitespace…»

[09:59] <lizmat> m: my $a = "foo:"; for ^100000 { Pair.new($a,42) }; say now - INIT now  # cool

[09:59] <camelia> rakudo-moar 601cdb: OUTPUT: «0.0984492␤»

[09:59] <lizmat> feels to me the Cool candidate is still needed

[10:00] <lizmat> m: say 0.13321350 / 0.0984492

[10:00] <camelia> rakudo-moar 601cdb: OUTPUT: «1.3531192␤»

[10:00] <Zoffix> OK. Perhaps could use a comment there about it being there for optimization reasons

[10:01] <lizmat> yeah, just added

[10:01] <Geth> ¦ rakudo/nom: 85bef661f0 | (Elizabeth Mattijsen)++ | src/core/Pair.pm

[10:01] <Geth> ¦ rakudo/nom: Make sure that Pair.new(:foo<bar>) dies

[10:01] <Geth> ¦ rakudo/nom:

[10:01] <Geth> ¦ rakudo/nom: Also add comment on the need of the Cool:D candidate.

[10:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/85bef661f0

[10:02] <lizmat> actually, I think the above benchmark is flawed

[10:03] <lizmat> m: my $a = Str; for ^100000 { Pair.new($a,42) }; say now - INIT now  # not Cool:D

[10:03] <camelia> rakudo-moar 601cdb: OUTPUT: «0.102694␤»

[10:03] <lizmat> m: my $a = "foo"; for ^100000 { Pair.new($a,42) }; say now - INIT now  # Cool:D

[10:03] <camelia> rakudo-moar 601cdb: OUTPUT: «0.09789931␤»

[10:04] <lizmat> m: say 0.102694 / 0.09789931

[10:04] <camelia> rakudo-moar 601cdb: OUTPUT: «1.04897573␤»

[10:04] <lizmat> so, more like 5% faster

[10:04] <lizmat> still for something that is done a lot with e.g. iterating over a hash..  seems worthwhile

[10:06] <Geth> ¦ roast: ea41dcd0d5 | (Zoffix Znet)++ | S02-types/pair.t

[10:06] <Geth> ¦ roast: Test wrong named args to Pair.new throw

[10:06] <Geth> ¦ roast:

[10:06] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/85bef661f0

[10:06] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ea41dcd0d5

[10:23] <Zoffix> ehehe, we have exactly 0 tests for &prompt

[10:23] <Zoffix> and it's documented :)

[10:24] * lizmat assumes they will get promptly added now ?

[10:24] <Zoffix> :)

[10:24] <Zoffix> This brings me to wanting to make $msg default to ''

[10:24] <Zoffix> as in: my $foo = prompt; just waits for a line of text on $*IN without showing any messages

[10:25] <Zoffix> 'cause &get uses $*ARGFILES, so you're either left with `my $foo = prompt '';` which is kinda ewww or `my $foo = $*IN.get` which is also ewwy

[10:58] <Geth> ¦ rakudo/nom: b43db636ab | (Elizabeth Mattijsen)++ | 2 files

[10:58] <Geth> ¦ rakudo/nom: Make (Bag|Mix).AT-KEY about 10% faster

[10:58] <Geth> ¦ rakudo/nom:

[10:58] <Geth> ¦ rakudo/nom: By only needing to do a lookup in the underlying hash once on a match.

[10:58] <Geth> ¦ rakudo/nom: Keeps the original Baggy.AT-KEY implementation for subclasses: not

[10:58] <Geth> ¦ rakudo/nom: possible to do the (Bag|Mix) implementation in the role, as we cannot

[10:58] <Geth> ¦ rakudo/nom: initialize a class lexical in a role :-( .  At least not in the Setting.

[10:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b43db636ab

[11:05] <Zoffix> w00t! Another Perl 6 book: https://www.indiegogo.com/projects/book-web-application-development-in-perl-6-website--2#/

[11:05] <Zoffix> wow 11 backers already

[11:06] <Zoffix> Can't say I was all that impressed with a few Gábo's articles that I've read... but it's good to have more books

[11:07] <Zoffix> ZofBot: should I spring the $50 to get preview copies?

[11:07] <ZofBot> Zoffix, ACCEPTS faster now Unhandled exception in code scheduled on thread 27 Unhandled exception in code scheduled on thread 30 too many open files :| ;( m: say 4

[11:08] <Zoffix> I guess that means I should hurry the hell up with Tardigrade so that it might make the book ^_^

[11:12] <pmurias> what's Tardigrade?

[11:13] <tadzik> ZofBot: Are your replies a markov chain of this channel? :o

[11:13] <ZofBot> tadzik, Array rakudo-moar 9ed89d: OUTPUT: «57␤"199:"␤» m:

[11:13] <tadzik> I guess that answers my question

[11:13] <Zoffix> :>

[11:14] <Zoffix> tadzik: the original brain was a scrape of design.perl6.org

[11:14] <Zoffix> it now evolved a bit...

[11:14] <tadzik> hehe

[11:14] <tadzik> ...or did it...

[11:15] <tadzik> or are we all adhering to this design too :o

[11:16] <Zoffix> ugh indiegogo.com doesn't take PayPal :|

[11:30] <lizmat> .seen masak

[11:30] <yoleaux> I saw masak 19 May 2017 08:42Z in #perl6-dev: <masak> it creates a WhateverCode of the whole expression, I guess

[11:31] <Geth> ¦ rakudo/nom: 0646d3fa46 | (Zoffix Znet)++ | src/core/io_operators.pm

[11:31] <Geth> ¦ rakudo/nom: [io grant] Allow no-arg &prompt

[11:31] <Geth> ¦ rakudo/nom:

[11:31] <Geth> ¦ rakudo/nom: It's not entirely unheard of to not want to include any text message

[11:31] <Geth> ¦ rakudo/nom: to the user when prompting for some input. It's a bit antisocial to

[11:31] <Geth> ¦ rakudo/nom: force the user to specify `''` arg for such cases.

[11:31] <Geth> ¦ rakudo/nom:

[11:31] <Geth> ¦ rakudo/nom: Worse, they might introduce a subtle bug into their code by switching

[11:31] <Geth> ¦ rakudo/nom: to use `get` for a message-less `prompt`, but `get` defaults to

[11:31] <Geth> ¦ rakudo/nom: `$*ARGFILES`, instead of `$*IN`

[11:31] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0646d3fa46

[11:31] <Geth> ¦ roast: 125fe18489 | (Zoffix Znet)++ | S16-io/prompt.t

[11:31] <Geth> ¦ roast: [io grant] Add &prompt tests

[11:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/125fe18489

[11:31] <Geth> ¦ nqp: 23cea1133c | pmurias++ | src/vm/js/Operations.nqp

[11:31] <Geth> ¦ nqp: [js] Fix bug with neverreposses being ignore when used in void context

[11:31] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/23cea1133c

[11:31] <Geth> ¦ nqp: f2b5270337 | pmurias++ | 2 files

[11:31] <Geth> ¦ nqp: [js] Implement nqp::loadbytecodefh

[11:31] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f2b5270337

[11:32] <Geth> ¦ rakudo/nom: bf1d0ada35 | (Zoffix Znet)++ | t/spectest.data

[11:32] <Geth> ¦ rakudo/nom: Run S16-io/prompt.t tests as part of spectest

[11:32] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bf1d0ada35

[11:37] <Zoffix> Why yes, atop, close all my instances when I accidentally press CTRL+Q instead of CTRL+W -_

[11:37] <Zoffix> *atom

[11:39] <ilmari> chrome gets this right, by making the quit shortcut ctrl-shift-q (and there's a firefox extension to do the same)

[11:41] <Zoffix> Yeah, I have the firefox extension.

[11:49] <Geth> ¦ nqp: cono++ created pull request #360: Add mapping of the op code get_port_sk

[11:49] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/360

[11:50] <Geth> ¦ rakudo: cono++ created pull request #1086: Update localport if we made bind on port 0

[11:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1086

[11:54] <cono> jnthn: here is PR for what we discussed yesterday: https://github.com/MoarVM/MoarVM/pull/600 at the bottom of it you can find links to the nqp and rakudo PR's. Three is no spec-test PR yet.

[12:11] <lizmat> jnthn: a though re native attributes in Roles: perhaps they could be handled in the Optimizer ?

[12:11] <lizmat> *thought

[12:12] <lizmat> *sigh*

[12:15] <Geth> ¦ rakudo/nom: ff04a37c4b | (Elizabeth Mattijsen)++ | 3 files

[12:15] <Geth> ¦ rakudo/nom: Streamline (Set|Bag|Mix).new(), there can only be one!

[12:15] <Geth> ¦ rakudo/nom:

[12:15] <Geth> ¦ rakudo/nom: Set.new() did not return set(), but it did handle subclassing.

[12:15] <Geth> ¦ rakudo/nom: Bag.new() returned bag(), but did not handle subclassing.

[12:15] <Geth> ¦ rakudo/nom: Mix.new() returned mix(), but did not handle subclassing.

[12:15] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ff04a37c4b

[12:21] <Geth> ¦ roast: eb435234a2 | (Elizabeth Mattijsen)++ | 3 files

[12:21] <Geth> ¦ roast: Set|Bag|Mix.new returns the empty set|bag|mix

[12:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/eb435234a2

[12:30] <nine> Puh...openSSL braucht da kurzfristig scho 900 MB RAM

[12:30] <moritz> nine: wrong channel or wrong language :-)

[12:36] <nine> moritz: argh...wrong channel indeed. As much as I love the discovery of irssi's split window mode, it does require extra care.

[12:37] <lizmat> m: say Set (<=) Set  # awh

[12:37] <camelia> rakudo-moar ff04a3: OUTPUT: «Invocant of method 'total' must be an object instance of type 'Setty', not a type object of type 'Set'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[12:38] <lizmat> fixing now

[12:46] <Geth> ¦ rakudo/nom: accf519850 | (Elizabeth Mattijsen)++ | 3 files

[12:46] <Geth> ¦ rakudo/nom: Get Baggy.AT-KEY optimization back into role

[12:46] <Geth> ¦ rakudo/nom:

[12:46] <Geth> ¦ rakudo/nom: We don't need no lexical, we can BEGIN  :-)

[12:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/accf519850

[12:46] <Geth> ¦ rakudo/nom: ad8fa55297 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[12:46] <Geth> ¦ rakudo/nom: Make sure that Setty:U is treated like any type object

[12:46] <Geth> ¦ rakudo/nom:

[12:46] <Geth> ¦ rakudo/nom: Fixing Set (<) Set and friends.

[12:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ad8fa55297

[13:35] <Geth> ¦ rakudo/js: 0cb7e5f287 | pmurias++ | src/vm/js/perl6-runtime/runtime.js

[13:35] <Geth> ¦ rakudo/js: [js] Hide some debugging messages

[13:35] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/0cb7e5f287

[13:35] <Geth> ¦ rakudo/js: c176289ffe | pmurias++ | Configure.pl

[13:35] <Geth> ¦ rakudo/js: Report a problem when the --backends is incompatible with the --with-nqp

[13:35] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/c176289ffe

[13:46] <Geth> ¦ rakudo/nom: 5c8e3f3ab9 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[13:46] <Geth> ¦ rakudo/nom: Define superset ops in terms of subset ops

[13:46] <Geth> ¦ rakudo/nom:

[13:46] <Geth> ¦ rakudo/nom: No need to implement the same functionality twice.  Done in

[13:46] <Geth> ¦ rakudo/nom: preparation for subset ops refactor.

[13:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5c8e3f3ab9

[13:54] <Geth> ¦ nqp: f9f6667dc5 | (Jonathan Worthington)++ | src/vm/jvm/QAST/Compiler.nqp

[13:54] <Geth> ¦ nqp: Correct decodertakeline op return type.

[13:54] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f9f6667dc5

[13:56] * Zoffix ponders what IO::CatHandle should do for write methods...

[13:56] <Zoffix> like $fh.say: "meows"

[13:58] <Zoffix> Like in here I was thinking of mirroring it into all the given handles: https://github.com/rakudo/rakudo/commit/031aa3322570a97469144305fbbc60605b31d37a

[13:58] <Zoffix> But now I think that's both (a) not really useful; (b) doesn't scale, since it requires all handles to be open for writing, and you hit the open file limit

[13:58] <lizmat> isn't IO::CatHandle just a IO::Handle wrt to writing ??

[13:59] <lizmat> ah... sorry

[13:59] * lizmat shuts up again

[13:59] <lizmat> well, no writing to IO::CatHandle

[13:59] <lizmat> oops

[13:59] <lizmat> :-)

[14:01] <Zoffix> Well, writing to the currently active handle is another option, but then it's like... why use a cathandle for this then. And third option is writing X bytes/chars/lines/words and automatically switching to another file, but that feels more of a narrow use case best left for module-space

[14:01] * Zoffix will go with "die X::NIY" for write methods for now

[14:01] <lizmat> sounds like a plan to me  :-)

[14:18] <Zoffix> .seen cygx

[14:18] <yoleaux> I saw cygx 21 May 2017 16:40Z in #perl6: <cygx> not sure how this is supposed to work, but you could try locating you moarvm's Makefile and remove that part from CFLAGS and build manually

[14:19] <Zoffix> .ask cygx would you recommend .seek/.tell to throw if called on a handle that isn't in binary mode? I recall you saying they are technically binary operations when I had that case where .tell was giving wrong result after some text read operation

[14:19] <yoleaux> Zoffix: I'll pass your message to cygx.

[14:52] <Geth> ¦ rakudo/nom: 32eb285f18 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[14:52] <Geth> ¦ rakudo/nom: Make (<=) and (>=) about 50x faster

[14:52] <Geth> ¦ rakudo/nom:

[14:52] <Geth> ¦ rakudo/nom: Based on a 25/26 elem Set.  Doing a (<=) or (>=) on itself is now

[14:52] <Geth> ¦ rakudo/nom: shortcut, as that is always True, for potentially infinite speed

[14:52] <Geth> ¦ rakudo/nom: improvement (as the identity check is *very* cheap).

[14:52] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/32eb285f18

[14:53] <Geth> ¦ rakudo/js: df77eb6a44 | pmurias++ | 3 files

[14:53] <Geth> ¦ rakudo/js: Add missing paren in message.

[14:53] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/df77eb6a44

[15:06] <lizmat> afk for a bit&

[15:11] <cono> jnthn: Huston we have a problem :D https://pastebin.com/CzhThVRa

[15:12] <cono> somewhere in thread.finish it dies

[15:12] <cono> any tips where to set break point?

[15:20] <cono> hm, in debugger it just works fine :( hate this thing. Walked from this: MVM_thread_join until the end

[15:22] <cono> ah, looks like I was able to segfault it in debugger: https://pastebin.com/0khmkbT3

[15:30] <jnthn> At a guess, you'll have assumed something is thread safe that ain't

[15:31] <jnthn> otoh

[15:31] <jnthn> We know that sockets ain't on master :)

[15:31] <jnthn> (the sync type, not the IO::Socket::Async type)

[15:31] <jnthn> Which is what I'm doing in my branch

[15:31] <jnthn> That kind of segv isn't the typical failure mode though

[15:37] <[Coke]> ... ok, it's weird to me that -dev is filling up backscroll (I hate this irc client!) but #perl6 isn't.

[15:38] <mst> "filling up" ?

[15:40] <[Coke]> too many sends, this client defaults to throwing away the oldest.

[15:40] <[Coke]> so then I have to go back to the web logs to review. if the buffer doesn't fill, I can review in-client.

[15:41] <[Coke]> (irssi)

[15:41] <[Coke]> (and because of how it does it, I can't even see what the last line I read was.)

[16:28] <Zoffix> heh

[16:29] <Zoffix> Well, that's good. There's no such thing as too much -dev :)

[16:29] <Zoffix> #perl6 looks quite filled up to me....

[18:52] * Zoffix notices a spam comment on the IO grant: http://news.perlfoundation.org/2017/01/grant-proposal-standardization.html

[18:52] <Zoffix> How dare they!

[18:53] <Zoffix> Man, there's no end to this grant... I don't think I'll ever be doing another one :|

[18:54] <[Coke]> (spam comment)... I'll delete it.

[18:54] <Zoffix> \o/

[18:55] <[Coke]> ... I can't, it's makoto's post.

[18:55] <Zoffix> ah heh :)

[18:55] <Geth> ¦ rakudo/nom: 431ed4e30e | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[18:55] <Geth> ¦ rakudo/nom: Make (<) and (>) about 40x faster

[18:55] <Geth> ¦ rakudo/nom:

[18:55] <Geth> ¦ rakudo/nom: Based on a 25/26 elem Set.  Doing a (<) or (>) on itself is now

[18:55] <Geth> ¦ rakudo/nom: shortcut, as that is always False, for potentially infinite speed

[18:55] <Geth> ¦ rakudo/nom: improvement (as the identity check is *very* cheap).

[18:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/431ed4e30e

[19:08] <Zoffix> Is there any downside to using method meth (::?CLASS:D:) {} instead of method meth (SomeClass:D:) {} ?

[19:09] <Zoffix> like perf or anything...

[19:25] <dogbert17> commit: 2016.06 my $l = (1, 2, 3); say (0, slip $l).perl;

[19:25] <committable6> dogbert17, ¦2016.06: «(0, $(1, 2, 3))»

[19:26] <dogbert17> m: my $l = (1, 2, 3); say (0, slip $l).perl;

[19:26] <camelia> rakudo-moar 431ed4: OUTPUT: «(0, 1, 2, 3)␤»

[19:26] <dogbert17> commit: 2016.08 my $l = (1, 2, 3); say (0, slip $l).perl;

[19:26] <committable6> dogbert17, ¦2016.08: «(0, $(1, 2, 3))»

[19:26] <dogbert17> commit: 2016.10 my $l = (1, 2, 3); say (0, slip $l).perl;

[19:26] <committable6> dogbert17, ¦2016.10: «(0, $(1, 2, 3))»

[19:26] <dogbert17> commit: 2016.11 my $l = (1, 2, 3); say (0, slip $l).perl;

[19:26] <committable6> dogbert17, ¦2016.11: «(0, 1, 2, 3)»

[19:27] <dogbert17> is the new behavior ^^ correct?

[19:29] <Zoffix> yup

[19:30] <dogbert17> Zoffix: thx, time to update some docs then :)

[19:30] <Zoffix> dogbert17: well, looks correct to me, though seems it got that way by accident

[19:31] <Zoffix> c: 37d0e4661414de827de35 my $l = (1, 2, 3); say (0, slip $l).perl;

[19:31] <committable6> Zoffix, ¦37d0e46: «(0, 1, 2, 3)»

[19:31] <Zoffix> c: 37d0e4661414de827de35~1 my $l = (1, 2, 3); say (0, slip $l).perl;

[19:31] <committable6> Zoffix, ¦37d0e4661414de827de35~1: «(0, $(1, 2, 3))»

[19:31] <Zoffix> And that commit is a perf improvemnt: https://github.com/rakudo/rakudo/commit/37d0e4661414de827de35835de2e77a81d1d23df

[19:31] <Zoffix> hm

[19:31] * Zoffix wishes TimToady was around right now :)

[19:31] <Zoffix> He knows this stuff well

[19:32] <Zoffix> dogbert17: now, I'm starting to feel it's wrong lol :)

[19:32] <Zoffix> if it were (0, |$l) then yeah, it'd be right, but I think (0, slip $l) is a different thing

[19:32] <dogbert17> I haven't made the update just yet :)

[19:32] <Zoffix> or something

[19:32] <Zoffix> I don't know this stuff

[19:33] * Zoffix finally admits and shuts up :D

[19:33] <Zoffix> m: my $l = (1, 2, 3); say (0, $(slip $l)).perl;

[19:33] <camelia> rakudo-moar 431ed4: OUTPUT: «(0, 1, 2, 3)␤»

[19:33] <Zoffix> well, this is definitely wrong :)

[19:34] <dogbert17> one bug at least then :)

[19:35] <dogbert17> and lizmat is writing the weekly atm I think

[19:35] <dogbert17> commit: 2016.10 m: my $l = (1, 2, 3); say (0, $(slip $l)).perl;

[19:35] <committable6> dogbert17, ¦2016.10: «(0, $(1, 2, 3))»

[19:36] <Zoffix> She doesn't have to fix it. Just file it ¯\_(ツ)_/¯

[19:37] <dogbert17> will do

[19:37] <Zoffix> m: multi foo (@a) { say "here"; dd @a }; multi foo (+a) { say "there"; dd a  }; my $l = (1, 2, 3); foo $l

[19:37] <camelia> rakudo-moar 431ed4: OUTPUT: «here␤(1, 2, 3)␤»

[19:37] <Zoffix> m: multi foo (+a) { say "there"; dd a  }; my $l = (1, 2, 3); foo $l

[19:37] <camelia> rakudo-moar 431ed4: OUTPUT: «there␤($(1, 2, 3),)␤»

[19:38] * dogbert17 wonders how this bug managed to slip through our tests :)

[19:39] <Zoffix> m: my $l = (1, 2, 3); say (0, $(item $(slip $l))).perl;

[19:39] <camelia> rakudo-moar 431ed4: OUTPUT: «(0, 1, 2, 3)␤»

[19:39] * Zoffix doesn't get how that one manages to slip all the way through the item stuff :|

[19:40] <Zoffix> /win 8

[19:40] <buggable> Zoffix, Thank you for entering Accidental /win Lottery! The next draw will happen in 2 weeks, 3 days, 4 hours, 19 minutes, and 18 seconds

[19:40] <Zoffix> huh

[19:42] <lizmat> /win 6

[19:42] <buggable> lizmat, Thank you for entering Accidental /win Lottery! The next draw will happen in 2 weeks, 3 days, 4 hours, 17 minutes, and 42 seconds

[19:42] <dogbert17> lizmat: backlog a screenful plz

[19:42] <lizmat> dogbert17: yeah, please RT it

[19:43] <dogbert17> will do

[19:43] <lizmat> dogbert17: fwiw, I found several bugs today in set operators that have gone undetected for years  :-(

[19:43] <dogbert17> oops

[19:44] <[Coke]> lizmat: but also, unreported.

[19:44] <lizmat> m: Date (<=) Date   # now works

[19:44] <camelia> rakudo-moar 431ed4: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "(<=)" in expression "Date (<=) Date" in sink context (line 1)␤»

[19:44] <lizmat> m: say Date (<=) Date   # now works

[19:44] <camelia> rakudo-moar 431ed4: OUTPUT: «True␤»

[19:44] <[Coke]> better that you found them than a user.

[19:44] <lizmat> m: say Set (<=) Set  # now also works

[19:44] <camelia> rakudo-moar 431ed4: OUTPUT: «True␤»

[19:44] <dogbert17> commit: 2016:10 say <a b> X~ |(1, 2, 3) #

[19:44] <committable6> dogbert17, ¦2016:10: «Cannot find this revision (did you mean “2016.10”?)»

[19:45] <dogbert17> commit: 2016.10 say <a b> X~ |(1, 2, 3) #

[19:45] <committable6> dogbert17, ¦2016.10: «(a123 b123)»

[19:45] <awwaiid> lizmat: is that one of those twisty things of a set that contains itself so we can break mathematics?

[19:48] <lizmat> awwaiid: it all boils down that the Set type object is not a set, it needs to be coerced to a set first  :-)

[19:49] <lizmat> m: dd Set.Set

[19:49] <camelia> rakudo-moar 431ed4: OUTPUT: «set(Set)␤»

[19:50] <geekosaur> that sounds wrong

[19:50] <awwaiid> but oh so right

[19:51] <geekosaur> I mean, I read that as a Set containing a Set type object. but I'm not sure what a Set type object should be, aside from a special case or not-a-set

[19:52] <lizmat> m: dd Int.Set   # does this make sense, geekosaur?

[19:52] <camelia> rakudo-moar 431ed4: OUTPUT: «set(Int)␤»

[19:52] <geekosaur> (and yes, this does fall down the Russell rabbit hole)

[19:52] <dogbert17> lizmat: RT #131344

[19:52] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131344

[19:52] <lizmat> dogbert17: noted

[19:52] <geekosaur> same thing, a Set containing a type object. which arguably is not the same as a type object _and_ not the same as whatever a Set type object would mean when used as a Set

[19:53] * dogbert17 was sorely tempted to write '[REGRESSION] behavior of slip has slipped'

[19:53] <Zoffix> $ rakudobrew switch moar-2107.04.3

[19:53] <lizmat> geekosaur: well, anything that's not a set is coerced to a set first before being compared with e.g. (<=)

[19:53] <geekosaur> I mean, I could see a Set type object being autocoerced to an empty set in some circumstances... but *not* all. on the other hand, that is more or less what we expect numbers and strings to do, so.

[19:53] <Zoffix> Sorry, I have no idea what 'moar-2107.04.3' is

[19:54] <Zoffix> k'comn, rakudobrew! 100 year language and what not!

[19:54] <geekosaur> all roads here are wrong, some subtly and some severely

[19:54] <lizmat> the Set type object is *not* the empty set

[19:54] <lizmat> one could argue that the Set type object is an implementation detail

[19:55] <Zoffix> Imagine it called FooBar. You get same behaviour FooBar.Set => set(FooBar)

[19:55] <geekosaur> I guess that means I didn';t just say that? so I guess I'll just back out

[19:58] <lizmat> geekosaur: dealing with sets is difficult enough with one set of eyes: we can use all the eyes we can get!

[20:00] <Zoffix> ugexe: FWIW, I see zef here failing with "no method .as on Seq": https://ci.appveyor.com/project/ufobat/Bailador/branch/master

[20:00] <Zoffix> ugexe: I see some method .as in zef's sauce; looks like there's some path that leads to a Seq rather than whatever has .as object

[20:01] <ugexe> thats also moar-2016.03

[20:02] <Zoffix> oh lol

[20:16] <Geth> ¦ roast: cono++ created pull request #270: Rework IO-Socket-INET test to make it more self-sufficient

[20:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/270

[20:19] <cono> So ran a test one at a time, looks fine, but when I run all of them it segfaults after the third one :( Somewhere in thread.finish. I'll look into it but no guarantee that I can get it to work, so rely on you about thread stuff :)

[20:20] <pmurias> awwaiid: the build instructions for rakudo.js will be "perl Configure --backends=js --gen-nqp", I just have to set up a few things for that to work

[20:35] <AlexDaniel> /win 0

[20:35] <buggable> AlexDaniel, Thank you for entering Accidental /win Lottery! The next draw will happen in 2 weeks, 3 days, 3 hours, 24 minutes, and 2 seconds

[20:36] <AlexDaniel> and 2 seconds!

[20:36] <AlexDaniel> oh that precision!

[20:39] <AlexDaniel> buggable: but how many milliseconds?

[20:41] <Zoffix> It's a secret :)

[20:41] <Zoffix> buggable: lottery

[20:42] <Zoffix> buggable: source

[20:42] <buggable> Zoffix, See: https://github.com/zoffixznet/perl6-buggable

[20:42] <Zoffix> buggable: draw

[20:42] <buggable> Zoffix, The next Accidental /win Lottery draw will happen in 2 weeks, 3 days, 3 hours, 17 minutes, and 35 seconds. Currently have 13 ballots submitted by 10 users!

[20:42] <Zoffix> hehe

[20:44] <AlexDaniel> /win 42

[20:44] <buggable> AlexDaniel, Thank you for entering Accidental /win Lottery! The next draw will happen in 2 weeks, 3 days, 3 hours, 15 minutes, and 15 seconds

[20:44] <AlexDaniel> buggable: draw

[20:44] <buggable> AlexDaniel, The next Accidental /win Lottery draw will happen in 2 weeks, 3 days, 3 hours, 15 minutes, and 9 seconds. Currently have 14 ballots submitted by 10 users!

[20:47] <Geth> ¦ rakudo/newer-cat-handle: c86e8c9098 | (Zoffix Znet)++ | 2 files

[20:47] <Geth> ¦ rakudo/newer-cat-handle: Sketch of IO::CatHandle

[20:47] <Geth> ¦ rakudo/newer-cat-handle:

[20:47] <Geth> ¦ rakudo/newer-cat-handle: Not workable yet, but stashing it so I could work on it from

[20:47] <Geth> ¦ rakudo/newer-cat-handle: other boxes.

[20:47] <Geth> ¦ rakudo/newer-cat-handle: review: https://github.com/rakudo/rakudo/commit/c86e8c9098

[20:48] <Geth> ¦ roast/newer-cat-handle: d638e18587 | (Zoffix Znet)++ | S32-io/io-cathandle.t

[20:48] <Geth> ¦ roast/newer-cat-handle: Start sketching CatHandle tests

[20:48] <Geth> ¦ roast/newer-cat-handle: review: https://github.com/perl6/roast/commit/d638e18587

[20:48] * Zoffix is done hacking for the day

[21:37] <AlexDaniel> c: 2014.05~4 say 42

[21:37] <committable6> AlexDaniel, ¦2014.05~4: «42»

[21:39] <AlexDaniel> there's still a hole between 2014.05 and 2015.02 I think, so stuff isn't bisectable yet… but it's getting close :)

[21:40] <Zoffix> :)

[21:42] <AlexDaniel> actually, I'm not sure

[21:42] <AlexDaniel> bisect: old=2014.01 say ‘hello’

[21:42] <bisectable6> AlexDaniel, Bisecting by exit code (old=2014.01 new=431ed4e). Old exit code: 1

[21:42] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/7b30ac12b4461ce7bd2b3ead0bdb5899

[21:42] <bisectable6> AlexDaniel, (2015-02-23) https://github.com/rakudo/rakudo/commit/a2a1afb9e91a26fe125b80e4faa4626dd4d50300

[21:42] <AlexDaniel> bisect: old=2014.01 say ∞

[21:42] <bisectable6> AlexDaniel, Bisecting by exit code (old=2014.01 new=431ed4e). Old exit code: 1

[21:42] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/ff3d1a30beb2a053311064c39a26b007

[21:42] <bisectable6> AlexDaniel, (2015-12-18) https://github.com/rakudo/rakudo/commit/1f09c1e4f760a138208de229e0e42648b362ab07

[21:43] <AlexDaniel> to be honest I have no idea how much is done

[21:43] <AlexDaniel> it's just not done yet…

[21:57] <Zoffix> heh... "because it's Friday and I'm feeling expansive" I didn't realize we got ∞ kinda on a whim :D

[21:57] * Zoffix likes ∞ a lot

[22:02] <Geth> ¦ rakudo/nom: 379ef6f1d4 | (Zoffix Znet)++ | src/core/IO/Handle.pm

[22:02] <Geth> ¦ rakudo/nom: Move $close handling in IO::Handle.comb/split

[22:02] <Geth> ¦ rakudo/nom:

[22:02] <Geth> ¦ rakudo/nom: To .slurp

[22:02] <Geth> ¦ rakudo/nom: (Also add a TODO comment for when we get Cat)

[22:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/379ef6f1d4

[22:06] <AlexDaniel> bisect: say −42

[22:06] <bisectable6> AlexDaniel, On both starting points (old=2015.12 new=431ed4e) the exit code is 0 and the output is identical as well

[22:06] <bisectable6> AlexDaniel, Output on both points: «-42»

[22:06] <AlexDaniel> bisect: old=2014.01 say −42

[22:06] <bisectable6> AlexDaniel, Bisecting by exit code (old=2014.01 new=431ed4e). Old exit code: 1

[22:06] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/4df2a2749d9ab4db1b5f8a1f99891760

[22:06] <bisectable6> AlexDaniel, There are 2 candidates for the first “new” revision. See the log for more details

[22:06] <AlexDaniel> https://github.com/rakudo/rakudo/commit/332ea4e3b5b7c63a7c57bdb23b04d9f29ee099a4

[22:06] <AlexDaniel> oh, but that's very recent

[22:10] <Zoffix> 1-day less recent than infinity :)

[22:10] <Zoffix> And it's quite the opositite, I hate − and I want it removed :D

[22:23] <AlexDaniel> bisect: old=2014.01 say π

[22:23] <bisectable6> AlexDaniel, Bisecting by exit code (old=2014.01 new=431ed4e). Old exit code: 1

[22:26] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/34c6d5880c782814f6bdd2c86aaba5e0

[22:26] <bisectable6> AlexDaniel, There are 407 candidates for the first “new” revision. See the log for more details

[22:26] <AlexDaniel> told ya, not done yet :)

[22:28] <nebuchadnezzar> Hello

[22:28] <AlexDaniel> o/

[22:29] <Zoffix> \o

[22:31] <nebuchadnezzar> I'm trying to update the Debian packages and I wonder if its normal that --libdir is not passed to gcc: https://paste.debian.net/934241/, because the moar binary ends with “libmoar.so => not found” https://paste.debian.net/934242/, any hints?

[22:32] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/05/22/2017-21-yap6b/

[22:33] <lizmat> that took a little longer than I expected

[22:33] * lizmat decides to call it a day

[22:33] <lizmat> good night, #perl6-dev!

[22:35] <Zoffix> night

[22:41] <Zoffix> nebuchadnezzar: IIRC moar recentlyish had some changes done to its build chain. Maybe worth mentioning in #moarvm to see if some eyes (timotimo) spot it

[22:42] <nebuchadnezzar> I think I found, I'll report there

[22:50] <timotimo> uh oh

[22:50] <timotimo> i've done a boo boo again?
