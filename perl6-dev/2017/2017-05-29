[01:02] <Zoffix> "100.00%

[01:03] <Zoffix> According to me spreadsheet :) Time to rebuild perl6.wtf website, check if any routines want more testing, finish off The Definitive IO Guide, write up final report, and done

[01:04] <MasterDuke> Zoffix++

[01:07] <japhb> m: ':3[4, 22, 1]'.Numeric.say  # MasterDuke

[01:07] <camelia> rakudo-moar a47a78: OUTPUT: «Cannot convert string to number: digit is larger than 2 in ':3' style radix number in '3:3[4⏏5, 22, 1]' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[01:09] <MasterDuke> huh

[01:09] <BenGoldberg> m: '2:[11111]'.Numeric.say

[01:09] <camelia> rakudo-moar a47a78: OUTPUT: «Cannot convert string to number: trailing characters after number in '032⏏5:[11111]' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[01:10] <BenGoldberg> m: ':2[11111]'.Numeric.say

[01:10] <camelia> rakudo-moar a47a78: OUTPUT: «Cannot convert string to number: digit is larger than 1 in ':2' style radix number in '3:2[11111⏏5]' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[01:10] <BenGoldberg> m: ':2[11111'.Numeric.say

[01:10] <camelia> rakudo-moar a47a78: OUTPUT: «Cannot convert string to number: digit is larger than 1 in ':2' style radix number in '3:2[11111⏏' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[01:10] <BenGoldberg> That is a vr strange err message.

[01:14] <MasterDuke> weird, that form is processed in two different spots

[01:16] <MasterDuke> https://github.com/rakudo/rakudo/blob/nom/src/core/allomorphs.pm#L349-L378 and https://github.com/rakudo/rakudo/blob/nom/src/core/Str.pm#L2949-L2968

[01:18] <japhb> MasterDuke: ISTR the speculations were the basis of the Str.Numeric behavior

[01:26] <MasterDuke> hm. ShimmerFairy did the val implementation in 9/2015 and moritz did the UNBASE_BRACKETS implementation in 9/2012. i guess they really should be de-duplicated somehow

[01:28] <MasterDuke> japhb: and you think the val version is more correct?

[01:30] <BenGoldberg> m: val(':2[11111]').say

[01:30] <camelia> rakudo-moar a47a78: OUTPUT: «:2[11111]␤»

[01:31] <BenGoldberg> m: dd val(':2[11111]')

[01:31] <camelia> rakudo-moar a47a78: OUTPUT: «":2[11111]"␤»

[01:32] <BenGoldberg> m: dd val(':2[11111]', :val-or-fail)

[01:32] <camelia> rakudo-moar a47a78: OUTPUT: «Failure.new(exception => X::Str::Numeric.new(source => ":2[11111]", pos => 8, reason => "digit is larger than 1 in ':2' style radix number"), backtrace => Backtrace.new)␤»

[02:24] <Zoffix> ./build-coverakudo.sh: line 60: 13598 Segmentation fault      perl6 bootstrap.pl

[02:24] <Zoffix> Well, crap. I can't finish the grant without coverage report :|

[02:26] * Zoffix tries without pulling in moar master

[02:31] <Zoffix> *phew* seems to be working fine now

[02:54] <japhb> S02:3317

[02:54] <synopsebot6> Link: http://design.perl6.org/S02.html#line_3317

[02:54] <japhb> MasterDuke: ^^

[02:55] <japhb> Gah, link doesn't work.

[02:55] <japhb> MasterDuke: S02:3317 says "   3317 All numbers representing digits must be less than the radix, or an error

[02:55] <synopsebot6> Link: http://design.perl6.org/S02.html#3317_says

[02:55] <japhb> 3318 will result (at compile time if constant-folding can catch it, or at run

[02:55] <japhb> 3319 time otherwise)."

[02:59] <MasterDuke> looks like ShimmerFairy also spotted the inconsistency, RT #125800 and 123572 can probably be merged

[02:59] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125800

[03:23] <Zoffix> perl6.wtf updated. Though it's data is pretty dismal :|

[03:24] <Zoffix> like, every method of CatHandle is tested, but it shows at 27% covered :/ https://perl6.wtf/SETTING__src_core_IO_CatHandle_pm.coverage.html

[03:26] <Zoffix> Oh, wait a second...

[03:26] <Zoffix> haw... I forgot to add S32-io/io-cathandle.t to spectest.data file :P

[03:27] <Zoffix> So I guess I wasted an hour waiting for coverage to build :) Gonna set it to run just 1 stresstest instead of 3; seems to flop less and the failures are consistent

[03:28] <Zoffix> Which, for record, are these: https://gist.github.com/zoffixznet/f210e22e066f7066cbd66e35f8d37ab8

[03:29] <Zoffix> Anyone recall what tool tells you which files aren't in spectest.data? Maybe there're others I forgot about

[03:31] <Zoffix> looks like tools/update-passing-test-data.pl

[03:33] <Zoffix> I'll be damned... t/spec/S32-io/tell.t is another forgotten one

[03:37] <Zoffix> .tell pmurias RE: https://github.com/perl6/roast/blob/master/S24-testing/10-is-approx.t there's actually a more comprehensive test for that routine in rakudo's test suite. Should it be moved to roast, then? https://github.com/rakudo/rakudo/blob/nom/t/02-rakudo/02-new-is-approx.t

[03:37] <yoleaux> Zoffix: I'll pass your message to pmurias.

[03:41] <Zoffix> .tell pmurias nevermind. I moved it. Seems to make sense.

[03:41] <yoleaux> Zoffix: I'll pass your message to pmurias.

[03:45] <Geth> ¦ rakudo/nom: dfdd5439f3 | (Zoffix Znet)++ | t/spectest.data

[03:45] <Geth> ¦ rakudo/nom: Add now-passing test files

[03:45] <Geth> ¦ rakudo/nom:

[03:45] <Geth> ¦ rakudo/nom: - Also a couple of IO test files I forgot to add

[03:45] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dfdd5439f3

[03:45] <Geth> ¦ rakudo/nom: 7aa1c08ceb | (Zoffix Znet)++ | t/02-rakudo/02-new-is-approx.t

[03:45] <Geth> ¦ rakudo/nom: Move is-approx tests to roast

[03:45] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7aa1c08ceb

[03:46] <Geth> ¦ roast: 61ab1c61f4 | (Zoffix Znet)++ | S24-testing/10-is-approx.t

[03:46] <Geth> ¦ roast: Replace is-approx test file

[03:46] <Geth> ¦ roast:

[03:46] <Geth> ¦ roast: With more comprehensive set of tests for this routine that

[03:46] <Geth> ¦ roast: existed in rakudo's test suite.

[03:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/61ab1c61f4

[03:49] <Geth> ¦ roast: e863b9499a | (Zoffix Znet)++ | S24-testing/10-is-approx.t

[03:49] <Geth> ¦ roast: Remove useless `use lib <lib>`

[03:49] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e863b9499a

[03:50] <Zoffix> ZOFVM: Files=1252, Tests=136819, 115 wallclock secs (22.11 usr  2.93 sys + 2334.35 cusr 129.80 csys = 2489.19 CPU)

[04:01] <Zoffix> hm, tried building coverage on 24-core my google VM.... there's like a billion failing tests :/

[04:01] <Zoffix> so many, I just aborted it, 'cause coverage will be crap

[04:22] * Zoffix shudders at https://rt.perl.org/Ticket/Display.html?id=131392

[04:22] <Zoffix> I thought Perl 6 left weird-magic-variables stuff to Perl 5

[04:24] <geekosaur> $/ (match result) is one of the few left

[04:24] <Zoffix> m: 'foo' ~~ /$<meow>=.+/; say %()

[04:24] <camelia> rakudo-moar 7aa1c0: OUTPUT: «Map.new((:meow(Match.new(list => (), made => Any, pos => 3, hash => Map.new(()), orig => "foo", from => 0))))␤»

[04:25] <Zoffix> m: 'foo' ~~ /(.+)/; say @()

[04:25] <camelia> rakudo-moar 7aa1c0: OUTPUT: «(｢foo｣)␤»

[04:25] <Zoffix> m: 'foo' ~~ /(.+)/; say $()

[04:25] <camelia> rakudo-moar 7aa1c0: OUTPUT: «foo␤»

[04:33] <Zoffix> m: class Foo { multi method words(::?CLASS:D:) { say 'meow' };  multi method words(::?CLASS:D \SELF: $limit, :$close) { say 'here' }; multi method words(::?CLASS:D \SELF: :$close) { say 'there' };  }; Foo.new.words; Foo.new.words: :close; Foo.new.words: 4, :close;

[04:33] <camelia> rakudo-moar 7aa1c0: OUTPUT: «there␤there␤here␤»

[04:33] <Zoffix> hm. Any way to make the `meow` one to be called on Foo.new.words?

[04:34] <Zoffix> m: class Foo { multi method words(::?CLASS:D:) { say 'meow' };  multi method words(::?CLASS:D \SELF: $limit, :$close) { say 'here' }; multi method words(::?CLASS:D \SELF: :$close!) { say 'there' };  }; Foo.new.words; Foo.new.words: :close; Foo.new.words: 4, :close;

[04:34] <camelia> rakudo-moar 7aa1c0: OUTPUT: «meow␤there␤here␤»

[04:34] <Zoffix> nm

[04:40] <Zoffix> cpan@perlbuild4~/CPANPRC/rakudo (nom)$ t/fudgeandrun t/spec/S06-other/main.t

[04:40] <Zoffix> t/spec/S06-other/main.t .. ===SORRY!===

[04:40] <Zoffix> Serialized data segment overflows end of stream

[04:40] <Zoffix> Got a whole ton of such failures :S

[04:50] <Zoffix> Rebuilt. Gone now :/

[04:50] <Zoffix> Wonder if it's one of the new test files I added above that's causing global mess up

[04:50] <Zoffix> ZofBot: it's really dead in here!

[04:50] <ZofBot> Zoffix, First, you can convert the angles into radians, by multiplication: sin(90 * Degrees) or by using the "to-radians" method: sin(90

[04:55] <Geth> ¦ rakudo/nom: ed07b2c375 | (Zoffix Znet)++ | 2 files

[04:55] <Geth> ¦ rakudo/nom: Fix thinko in .lines/.words handle candidates

[04:55] <Geth> ¦ rakudo/nom:

[04:55] <Geth> ¦ rakudo/nom: The no-arg candidates were not chosen, but the ones with :$close were

[04:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ed07b2c375

[05:07] <Zoffix> ohhhh

[05:07] <Zoffix> Those weird errors? /dev/sda1       9.8G  9.3G  188K 100% /

[05:13] <Geth> ¦ roast: 899d223abd | usev6++ | S16-filehandles/argfiles.t

[05:13] <Geth> ¦ roast: [JVM] Skip hanging test

[05:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/899d223abd

[07:41] <Geth> ¦ rakudo/nom: f9403b3b8e | (Stefan Seifert)++ | src/core/CompUnit/PrecompilationRepository.pm

[07:41] <Geth> ¦ rakudo/nom: Fix order of RAKUDO_MODULE_DEBUG precomp output

[07:41] <Geth> ¦ rakudo/nom:

[07:41] <Geth> ¦ rakudo/nom: By capturing STDERR of precomp processes, their output will appear later than

[07:41] <Geth> ¦ rakudo/nom: its actually printed. This makes understanding this output much harder as the

[07:41] <Geth> ¦ rakudo/nom: sequence of events is important. Fix by just not capturing STDERR in that case.

[07:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f9403b3b8e

[07:53] <[Tux]> This is Rakudo version 2017.05-290-gf9403b3b8 built on MoarVM version 2017.05-25-g62bc54e9

[07:53] <[Tux]> csv-ip5xs        2.714

[07:53] <[Tux]> test            12.774

[07:53] <[Tux]> test-t           4.372 - 4.422

[07:53] <[Tux]> csv-parser      12.895

[08:44] <jnthn> morning o/

[08:45] <lizmat> jnthn  o/

[11:06] <Geth> ¦ nqp: 81b1f29808 | pmurias++ | src/HLL/Compiler.nqp

[11:06] <Geth> ¦ nqp: [js] Omit useless parens

[11:06] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/81b1f29808

[11:06] <Geth> ¦ nqp: cad6b7d667 | pmurias++ | 4 files

[11:06] <Geth> ¦ nqp: [js] Implement nqp::execname

[11:06] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cad6b7d667

[12:08] <Geth> ¦ rakudo/js: 955748066e | pmurias++ | 2 files

[12:08] <Geth> ¦ rakudo/js: [js] Pass --execname when building rakudo.js

[12:08] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/955748066e

[13:03] <Geth> ¦ rakudo/nom: 36ea86071e | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/2017-IO-Grant--Action-Plan.md

[13:03] <Geth> ¦ rakudo/nom: Update list of plan changes in IO grant

[13:03] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/36ea86071e

[13:27] <Geth> ¦ rakudo/nom: 51d6ff9c01 | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/2017-IO-Grant--Action-Plan.md

[13:27] <Geth> ¦ rakudo/nom: List IO::Cat was renamed to IO::CatHandle

[13:27] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/51d6ff9c01

[14:09] <Zoffix> m: for 'a', 'b' -> $x { my $z = \(my class Foo {}) }

[14:09] <camelia> rakudo-moar 51d6ff: ( no output )

[14:09] <Zoffix> m: https://gist.github.com/zoffixznet/92317fbdfec783ea8a6187bb38bdc4b7

[14:09] <camelia> rakudo-moar 51d6ff: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Redeclaration of symbol 'Foo42'␤at <tmp>:28␤------> 3        7⏏5}, '((Mu) (Foo) I ♥ Perl 6 1 2 [3 5 (foo␤»

[14:09] <Zoffix> redeclaration? wtf is its problem?

[14:11] <Zoffix> Ah. Closing curly instead of a paren

[14:13] <Geth> ¦ roast: ce1b637eab | (Zoffix Znet)++ | S32-io/io-handle.t

[14:13] <Geth> ¦ roast: [io grant] Test IO::Handle.say

[14:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ce1b637eab

[14:22] <Geth> ¦ roast: 0bb629891b | (Zoffix Znet)++ | S32-io/io-handle.t

[14:22] <Geth> ¦ roast: [io grant] Test IO::Handle.print-nl

[14:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0bb629891b

[14:22] <Geth> ¦ roast: 20384dc85c | (Zoffix Znet)++ | S32-io/io-handle.t

[14:22] <Geth> ¦ roast: Remove useless open call

[14:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/20384dc85c

[14:27] <Geth> ¦ roast: 47c88abe40 | (Zoffix Znet)++ | S32-io/pipe.t

[14:27] <Geth> ¦ roast: [io grant] Test IO::Pipe.proc attribute

[14:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/47c88abe40

[14:35] <Geth> ¦ roast: 945621d507 | (Zoffix Znet)++ | S32-io/io-path.t

[14:35] <Geth> ¦ roast: [io grant] Test IO::Path.SPEC attribute

[14:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/945621d507

[14:48] <Geth> ¦ roast: 5fb4b633dc | (Zoffix Znet)++ | S32-io/io-path.t

[14:48] <Geth> ¦ roast: [io grant] Test IO::Path.CWD/.path attributes

[14:48] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5fb4b633dc

[15:04] <Zoffix> ZOFVM: Files=1252, Tests=136825, 119 wallclock secs (22.66 usr  3.35 sys + 2404.00 cusr 166.62 csys = 2596.63 CPU)

[15:05] <Geth> ¦ roast: d0e5701b71 | (Zoffix Znet)++ | S32-io/io-path.t

[15:05] <Geth> ¦ roast: [io grant] Test IO::Path.Numeric and other .numeric methods

[15:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d0e5701b71

[15:05] <Geth> ¦ rakudo/nom: d13d9c2e15 | (Zoffix Znet)++ | src/core/IO/Path.pm

[15:05] <Geth> ¦ rakudo/nom: [io grant] Throw out IO::Path.int

[15:05] <Geth> ¦ rakudo/nom:

[15:05] <Geth> ¦ rakudo/nom: It's already handled via .Numeric

[15:05] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d13d9c2e15

[15:08] <Zoffix> I mean .Int

[15:31] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1090: Error for wrong arity in signature has right value

[15:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1090

[15:33] <Geth> ¦ rakudo/nom: 86fe766aec | MasterDuke17++ | t/05-messages/01-errors.t

[15:33] <Geth> ¦ rakudo/nom: Error for wrong arity in signature has right value

[15:33] <Geth> ¦ rakudo/nom:

[15:33] <Geth> ¦ rakudo/nom: Tests for https://rt.perl.org/Ticket/Display.html?id=123085

[15:33] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/86fe766aec

[15:33] <Geth> ¦ rakudo/nom: a18c0649da | (Zoffix Znet)++ (committed using GitHub Web editor) | t/05-messages/01-errors.t

[15:33] <Geth> ¦ rakudo/nom: Merge pull request #1090 from MasterDuke17/tests_for_RT123085_wrong_arity_in_signatures

[15:33] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123085

[15:33] <Geth> ¦ rakudo/nom:

[15:33] <Geth> ¦ rakudo/nom: Error for wrong arity in signature has right value

[15:33] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a18c0649da

[15:49] <Zoffix> (people who wrote IO::Spec* tests)++ # really thorough job

[15:58] <Geth> ¦ roast: 94d7133661 | (Zoffix Znet)++ | S16-io/bare-say.t

[15:58] <Geth> ¦ roast: [io grant] Test 0-arg &say/&put/&print

[15:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/94d7133661

[16:07] <ugexe> is/when is tap harness being removed from core?

[16:08] * ugexe sees the verbose output stuff was added to the tap-harness6 repo only

[16:09] <Zoffix> ugexe: next Saturday the latest. It's next on my list after finishing IO grant

[16:13] <ugexe> it'll be interesting seeing what happens when a core module is removed (re: upgrades)

[16:16] <ugexe> i imagine they will still have TAP::ver<6.c>:auth<perl> installed - in this case i don't see a problem but might be worth figuring out  if it could be for other modules in the future

[16:17] <Geth> ¦ roast: 4dd22cf61a | (Zoffix Znet)++ | S32-io/slurp.t

[16:17] <Geth> ¦ roast: Remove trailing whitespace

[16:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4dd22cf61a

[16:18] <Geth> ¦ roast: 38c61cd329 | (Zoffix Znet)++ | S32-io/slurp.t

[16:18] <Geth> ¦ roast: [io grant] Test &slurp() and &slurp(IO::Handle)

[16:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/38c61cd329

[16:18] <Zoffix> w00t all testing is done

[16:19] * Zoffix starts last perl6.wtf update run

[16:33] <Zoffix> ZOFFLOP: t/spec/S17-supply/interval.t

[16:34] <Zoffix> BTW hack is doing ( ping moritz )

[16:34] <Zoffix> I mean down

[16:35] <Zoffix> SourceBaby: help

[16:35] <Zoffix> dalek left an hour ago; I'm surprised SourceBaby is still here :S

[16:35] <Zoffix> and I can't ssh [email@hidden.address]
[16:36] <Zoffix> ZOFVM: Files=1252, Tests=136834, 117 wallclock secs (22.78 usr  3.43 sys + 2389.07 cusr 155.78 csys = 2571.06 CPU)

[16:38] <moritz> Zoffix: rebooting now

[16:39] <Zoffix> w00t

[16:39] <Zoffix> Thanks

[17:08] <dogbert17> commit: 2016.06 my $a = 1; say Q:c«{$a}()$b()»;

[17:08] <committable6> dogbert17, ¦2016.06: «1()$b()»

[17:09] <dogbert17> m: 2016.06 my $a = 1; say Q:c«{$a}()$b()»;

[17:09] <camelia> rakudo-moar a18c06: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 032016.067⏏5 my $a = 1; say Q:c«{$a}()$b()»;␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement mo…»

[17:09] <dogbert17> m: my $a = 1; say Q:c«{$a}()$b()»;

[17:09] <camelia> rakudo-moar a18c06: OUTPUT: «1()$b()␤»

[17:11] <dogbert17> Zoffix: have you ever used the BUILDALL method?

[17:11] <Zoffix> nope

[17:12] <dogbert17> :( trying to update some docs and there's an inconsistency in an example

[17:13] <dogbert17> the example has a call to callsame in it but the text explaining the example says you must call nextsame. https://docs.perl6.org/language/traps

[17:17] <Zoffix> Well, I have an article on callsame/nextsame that may assist you in figuring out which is the right routine in there. https://perl6.party/post/Perl6-But-Heres-My-Dispatch-So-Callwith-Maybe

[17:18] <Zoffix> "Which also explains why...'

[17:18] * Zoffix shrugs

[17:18] <Zoffix> Don't explain to me

[17:19] <dogbert17> :) will have a look

[17:34] <lizmat> Zoffix: am looking at RT #131395

[17:41] <MasterDuke> m: class A {}; say A.^methods(:all)

[17:41] <camelia> rakudo-moar a18c06: OUTPUT: «(Method+{<anon|70885904>}.new Method+{<anon|70885904>}.new Method+{<anon|70885904>}.new Method+{<anon|70885904>}.new Method+{<anon|70885904>}.new Method+{<anon|70885904>}.new Method+{<anon|70885904>}.new Method+{<anon|70885904>}.new Method+{<anon|7088590…»

[17:42] <Geth> ¦ rakudo/nom: 9494cbd3b9 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[17:42] <Geth> ¦ rakudo/nom: Fix for RT #131395

[17:42] <Geth> ¦ rakudo/nom:

[17:42] <Geth> ¦ rakudo/nom: Apparently nqp::isnull() is not always the right test for $!reified

[17:42] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9494cbd3b9

[17:52] <Zoffix> cool

[17:56] <lizmat> greppable6: pack(

[17:56] <greppable6> lizmat, Sorry, can't do that

[17:56] <lizmat> greppable6: pack\(

[17:56] <greppable6> lizmat, https://gist.github.com/0450cd99cf5bb95d70234687d457c0b7

[18:33] <BenGoldberg> greppable6: <|w>pack\(

[18:34] <BenGoldberg> Oops?

[18:35] <Zoffix> It's not Perl 6 regex. it's grep -E

[18:36] <Geth> ¦ roast: 0faf3c354f | (Zoffix Znet)++ | S03-metaops/cross.t

[18:36] <Geth> ¦ roast: Test X, with empty-List RHS does not crash

[18:36] <Geth> ¦ roast:

[18:36] <Geth> ¦ roast: RT#131395: https://rt.perl.org/Ticket/Display.html?id=131395

[18:36] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/9494cbd3b9

[18:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0faf3c354f

[18:37] <BenGoldberg> Well, it shouldn't have *died*! ;)

[18:37] * BenGoldberg feels bad about accidentally killing the bot :P

[18:39] <MasterDuke> to be precise it's git grep -P -i -I

[18:39] <BenGoldberg> Also, I notice in the gist it produced:  There's an extra space produced before the matched text, so where the original code had 'unpack', the gist has 'un pack' (or I suppose 'un pack'

[18:40] <BenGoldberg> with bold)

[18:40] <MasterDuke> yeah, something do with the the markdown i believe

[18:40] <MasterDuke> and the way it highlights

[18:42] <BenGoldberg> I think the problem is with beginning and end of <code> sections.

[18:42] <BenGoldberg> E.g.: $buffer.un​</code><strong><code>​pack(​</code></strong><code>​"...

[18:44] <BenGoldberg> There's no *actual* space, but my browser (chrome) is showing it as if there were one.

[18:44] <MasterDuke> do you know a way to fix that?

[18:47] <BenGoldberg> huggable, chromebug

[18:47] <huggable> BenGoldberg, nothing found

[18:47] * BenGoldberg shrugs

[18:48] <MasterDuke> not just chrome, i get it in FF too

[18:50] <[Coke]> BenGoldberg: URL showing the issue?

[18:50] <BenGoldberg> https://gist.github.com/Whateverable/0450cd99cf5bb95d70234687d457c0b7

[18:52] <BenGoldberg> If you *select* the text, it kinda shows that the browser knows there's not really supposed to be a space, since the area before and after "pack(" isn't highlighted.

[18:54] <Zoffix> [Coke]: I'm gonna be submitting my completion report today, as I'm hours away from finsihing the IO grant

[18:54] <Zoffix> Just gonna cleap up .open docs + finish definitive IO Guide + finish the already-half-made report and done

[18:54] <Zoffix> *clean

[18:55] <BenGoldberg> And (when it's not selected) zooming in shows these odd artifacts in the background color.  They're subtle, since it's a super-pale background for the <code> stuff, vs white background for the rest of the page.

[18:58] <Geth> ¦ rakudo/nom: 608e886a9b | usev6++ | src/core/Exception.pm

[18:58] <Geth> ¦ rakudo/nom: Don't use unival on JVM backend (NYI there)

[18:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/608e886a9b

[18:59] <lizmat> Zoffix: would you mind making the IO Grant completion something for next week's P6W ?

[18:59] <[Coke]> Zoffix: sounds good, thanks.

[19:02] <Zoffix> lizmat: sounds fine to me.

[19:02] <lizmat> ok... almost done with the P6W of this week, and it's already quite large

[19:02] <Zoffix> \o/

[19:05] <BenGoldberg> I spy on https://p6weekly.wordpress.com/ a really annoying bug!

[19:06] <BenGoldberg> I wanted to scroll down to the links for the RSS feeds, and the page kept getting longer and longer, pushing them further and further down.

[19:08] * Zoffix sees no RSS feeds links

[19:10] <ugexe> samcv: I think you can do the type of reinstall you want using (new) --force-install flag. there are --force-[resolve|fetch|build|test] flags as well to only force what you want (or everything with --force)

[19:10] <samcv> oh great :) fantastic thanks ugexe

[19:10] <samcv> also --depsonly is the only flag that doesn't have dashes between words. really weird

[19:11] <samcv> i always try and do --deps-only because that's how every single other flag is

[19:12] <ugexe> heh, yeah i should alias that

[19:12] <lizmat> BenGoldberg: if you're interested in just one issue, you can click on the title and get a separate page

[19:12] <lizmat> BenGoldberg: e.g. https://p6weekly.wordpress.com/2017/05/22/2017-21-yap6b/

[19:14] <BenGoldberg> No, I wanted my news reader to subscribe to the rss feed, but I couldn't click the link, since it kept running away :)  Turning off javascript, then copying the link, then turning it back on fixed the silly problem...

[19:17] * BenGoldberg wonders how often you get new people subscribing ;)  You'd have to look at accesses to https://p6weekly.wordpress.com/feed/ whose http "referer" is the main page.

[19:37] <Geth> ¦ roast: d36b837130 | usev6++ | 6 files

[19:37] <Geth> ¦ roast: [JVM] Fudge newly failing tests

[19:37] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d36b837130

[19:40] <Zoffix> bartolin_: I take it all the JVM failures are now fudged? I recall promising long time ago to fudge stuff when I was done with the grant, and I'm done with writing tests... Wondering if I need to build JVM and stresstest

[19:41] <bartolin_> Zoffix: well, there might be a few failing tests left. It's hard to keep up with all the commits and new tests :-)

[19:42] <Zoffix> :)

[19:42] <bartolin_> but I'll fudge the remaining tests as well, so you can use your time for something better. (e.g. relax?)

[19:42] <bartolin_> Zoffix++

[19:42] <Zoffix> bartolin_++ thanks

[19:56] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/05/29/2017-22-up-handle-encoding/

[20:03] <MasterDuke> huh, i can't seem to use $*W in Exceptions.pm or Perl6/Metamodel/BOOTSTRAP.nqp

[20:04] <Zoffix> wow, lots of stuff

[20:04] <Zoffix> lizmat++ good weekly

[20:04] <Zoffix> lizmat: what's 'The Afflighem Affair'? Google-fu is failing me

[20:04] <lizmat> Zoffix: it's the beer I'm drinking there

[20:04] <Zoffix> Ahhhh :)

[20:05] <lizmat> and tonyo coined the term, if I remember correctly  :-)

[20:05] <lizmat> which I may not, due to the nature of the alcoholic beverages involved  :-)

[20:05] <Zoffix> lol

[20:29] <MasterDuke> `Serialization Error: missing static code ref for closure 'suggest_methods' (src/Perl6/World.nqp:4060)`. heh, tried to get around no $*W when/where i wanted it by returning a closure at BEGIN time. oh well

[20:35] <MasterDuke> INIT almost worked

[20:48] <Geth> ¦ nqp/master: 4 commits pushed by pmurias++

[20:48] <Geth> ¦ nqp/master: ddd7bf8849 | [js] Stop running failing tests before our bigint library is fixed

[20:48] <Geth> ¦ nqp/master: bb6add3051 | [js] Support nqp::setinputlinesep and nqp::readallfh on pipes

[20:48] <Geth> ¦ nqp/master: a28cfc34fa | Test nqp::eoffh

[20:48] <Geth> ¦ nqp/master: 08bfc91e5e | [js] Hack with nqp::readlinechompfh on pipes to make rakudo precomp work

[20:48] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/cad6b7d667...08bfc91e5e

[20:48] <Geth> ¦ rakudo/js: 2a84ee0bc3 | pmurias++ | 3 files

[20:48] <Geth> ¦ rakudo/js: [js] Create a perl6-js runner during "make js-all"

[20:48] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/2a84ee0bc3

[20:52] <Zoffix> Writing some examples for IO tutorial and realizing that .lines and .words iterators could probably use .count-only method implementations

[20:53] <Zoffix> Something that still reads the lines, but just tosses them  while bumping up a counter. Dunno... would that get cleaned up by GC well? The goal here is to, say, count words in a huge file:  '500-Petabytes.txt'.IO.words.elems.say

[20:53] <Zoffix> without keeping a huge Seq of words around

[20:54] <jnthn> A Seq by definition doesn't keep things around

[20:54] <jnthn> That's the point of it

[20:54] <Zoffix> s: ().Seq, 'elems', \()

[20:54] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/608e886/src/core/Seq.pm#L97

[20:55] <jnthn> Except the things that call .cache, of course.

[20:55] <Zoffix> jnthn: self.cache.elems

[20:55] <jnthn> Yeah

[20:55] <Zoffix> Yeah

[20:55] <jnthn> :/

[20:55] <jnthn> Taht one was cached because otherwise we couldn't do @foo.grep(&blah)[*-1] and so forth

[20:56] <Zoffix> Ah. OK.

[20:57] <lizmat> Zoffix: count-only only makes sense if you can determine the number *without* iterating at all

[20:57] <jnthn> Which is indeed rather unfortunate for the "just count stuff" case

[20:57] <Zoffix> lizmat: thanks

[20:57] <lizmat> same for bool-only

[20:57] <jnthn> Maybe we need a .count or something

[20:57] <lizmat> (which you *might* get away with?)

[20:57] <jnthn> (where since it's a method call it's the verb, not the noun)

[21:03] <MasterDuke> i'm trying to add a suggest_methods to World.nqp, and call it from either Exception.pm or BOOTSTRAP.nqp. in addition to the error above, also got `X::Method::NotFound exception produced no message` and `Cannot find method 'suggest_methods' on object of type NQPMu`

[21:04] <MasterDuke> anybody have a suggestion?

[21:08] <lizmat> MasterDuke: this is about levenshteining a method name that wasn't found ?

[21:08] <MasterDuke> yeah

[21:09] <lizmat> why not do this in HLL Perl 6 ?

[21:09] <lizmat> I mean, you can call .^methods(:all)>>.name on the object, no ?

[21:09] <MasterDuke> just because the functionality is already mostly done in Word.nqp

[21:10] <lizmat> and it doesn't need to be optimized, as execution is pretty much done by that point, no ?

[21:10] <lizmat> but must it be in nqp ?

[21:11] <MasterDuke> i don't care about that, just didn't want to implement another levenshtein function

[21:13] <lizmat> hmmm...there's also src/core/StrDistance.pm

[21:13] <lizmat> which is used in Actions

[21:14] <MasterDuke> ah!

[21:15] <lizmat> not sure how they all relate, fwiw

[21:15] <lizmat> never got a round tuit for that

[21:17] <MasterDuke> i'll give that a try

[21:21] <lizmat> MasterDuke++

[21:21] <lizmat> meanwhile, I'm going to try to get away from the keyboard for a while

[21:23] <chansen_> I have just read lizmat's excellent weekly summary, I'm just curious why the decision of streaming encodings where pushed to Perl6/NQP, seems like a major degradation of performance for programs targeting MoarVM. In my book implementing support for UTF-8, UTF-16(BE|LE) and UTF-32(LE|BE) is the easiest part of Unicode.

[21:24] <jnthn> chansen_: I wondered when I read it if somebody would read it that way. Apparently, "yes"

[21:25] <jnthn> The VM still provides fast decoding for the most common ones.

[21:26] <jnthn> What changed is that previously there have been a bunch of VM-provided ops for doing char-level I/O

[21:26] <jnthn> While now there's binary I/O and a VM-backed decoder which are decoupled from each other

[21:27] <jnthn> So what's really moved up to Perl 6 is the coordination, *not* the hot loop work of decoding.

[21:28] <jnthn> Though in doing that it will be possible for userspace decoders to be used with the built-in IO handles, at least once we standardize the interface to that.

[21:28] <jnthn> Which it previously wasn't

[21:29] <jnthn> This also allows for a number of simplifications down at the VM level, and further will also make streaming decode support available when you aren't doing I/O through the VM

[21:29] <Zoffix> .ask samcv is there any switch for disabling highlighting in a code block on the docs site? I got these code blocks that just contain text (I use codeblocks for tighter formatting). I can of course just make the text comments, but wondering if there's a switch. https://docs.perl6.org/type/IO::Handle#method_open

[21:29] <yoleaux> Zoffix: I'll pass your message to samcv.

[21:30] <samcv> hey Zoffix

[21:30] <yoleaux> 21:29Z <Zoffix> samcv: is there any switch for disabling highlighting in a code block on the docs site? I got these code blocks that just contain text (I use codeblocks for tighter formatting). I can of course just make the text comments, but wondering if there's a switch. https://docs.perl6.org/type/IO::Handle#method_open

[21:30] <samcv> well yeah just use uh

[21:30] <Zoffix> FWIW neither [Tux]'s bench nor my stresstest runs show any noticeable perf degradation after the encoding refactor

[21:30] <samcv> =begin code :allow< B R >

[21:30] <samcv> literally :allow<anything>

[21:31] <samcv> would prolly trigger it. even if it is not understood as being bold or italic etc

[21:31] <samcv> will cause it to render as pod

[21:31] <samcv> pod code that is

[21:31] <jnthn> BTW, think I figured out the correct solution to the readchars/getc thing; will have time to tinker with it tomorrow.

[21:31] <samcv> oh nice jnthn

[21:31] <jnthn> (Will need a tweak to the decoder API)

[21:32] <Zoffix> samcv: thanks. I'll give ti a go

[21:32] <samcv> Zoffix, alternatively we could add a thing

[21:32] <samcv> but that i know works today

[21:32] <samcv> with no changes to the build script

[21:32] <Zoffix> cool

[21:32] <jnthn> Down with this summer thing. It's still pretty warm. At 11:30pm. :/

[21:32] <samcv> :)

[21:33] <chansen_> jnthn: IIUC, the state of incomplete sequences (is in the host language) while the VM processes any complete sequences in any of the defined Unicode encodings?

[21:35] <jnthn> chansen_: For the built-in decodings the normalization buffer and any partially eaten multi-byte sequences are managed in the VM too

[21:35] <jnthn> chansen_: In the host language we ask the I/O handle for some bytes, then feed those bytes to the decoder, and ask it for chars.

[21:36] <jnthn> chansen_: And it can provide chars in a range of ways (for example, up to a separator, or all that we know are normalized and won't change, or everything assuming we hit eof)

[21:39] <BenGoldberg> Silly question: does the decoder API provide an option to choose whether to throw an error or insert � when it finds invalid bytes?

[21:41] <jnthn> At the moment it always throws an error

[21:41] <BenGoldberg> Hmm...

[21:43] <jnthn> Until now we've had async I/O code paths and sync I/O code paths, and when we did char level I/O at the VM we ended up with every single decoding improvement needing to happen in both of those places.

[21:44] <jnthn> Whereas now we can do the replacement char support and only have to extend one lower-level API to do it.

[21:45] <chansen_> jnthn: That make sense, thank you for the explanation.

[21:49] <AlexDaniel> BenGoldberg: re greppable and spaces: I just don't know how to highlight something in a code block :(

[21:50] <AlexDaniel> maybe I should simply create .html, host it myself and give a link to it

[21:51] <AlexDaniel> this way I will not be abusing github, it will be faster, and we'd be able to do whatever we want with it

[21:54] <AlexDaniel> anyway, I created an issue for it: https://github.com/perl6/whateverable/issues/155

[21:54] <Zoffix> .in 2d Future-Zoffix: Address the .sink-all stuff: https://github.com/rakudo/rakudo/commit/0c6281518e5c78113121968df0cf7404aa949dd3#commitcomment-22320387

[21:54] <yoleaux> Zoffix: I'll remind you on 31 May 2017 21:54Z

[21:55] <Zoffix> BenGoldberg++ thanks for that pointer. I'll fix up that code when I get a chance

[21:56] <AlexDaniel> .in 5d Future-AlexDaniel: Fix all 103 whateverable issues

[21:56] <yoleaux> AlexDaniel: I'll remind you on 3 Jun 2017 21:56Z

[21:57] <Zoffix> heh

[21:57] <BenGoldberg> :)

[21:57] <AlexDaniel> greppable6: <|w>pack\(

[21:58] <chansen_> samcv: I'm glad that you received a grant to improve Unicode support in Perl6! But please learn from existing implementations, there is no need to reinvent structures that have been invented long before Perl6.

[21:58] <AlexDaniel> Unhandled exception in code scheduled on thread 20

[21:58] <AlexDaniel> Malformed UTF-8

[21:58] <AlexDaniel> this is the issue: https://github.com/perl6/whateverable/issues/153

[21:58] <samcv> chansen_, what do you mean by structures

[21:58] <BenGoldberg> AlexDaniel, I think greppable needs \b instead of <|w>.

[21:59] <AlexDaniel> BenGoldberg: sure, but as you said, it shouldn't crash :)

[21:59] <chansen_> samcv: data representation in memory or from I/O

[22:00] <BenGoldberg> greppable6: \bpack\(

[22:00] <greppable6> BenGoldberg, https://gist.github.com/31e6ca66ef71758021395e52c265be3e

[22:00] <samcv> not sure what you're saying i should do. thinking you're talking about the structure of the unicode database?

[22:00] <samcv> do you have a proposal for an existing data implementation to use?

[22:01] <samcv> i'm all ears if there is something that will help me when i start through that phase of my work

[22:02] <samcv> or a library for bitfield creation would be neat as well

[22:05] <chansen_> I'm talking in a more general perspective (bitfield creation?), I assume you are are aware about "compact array"/"folded trie"?

[22:08] <samcv> yes that was one thing i had considered. i will def look further into that. thanks

[22:10] <samcv> the index compresion is one part which i had not fully figured out yet. so that would be great

[22:11] <samcv> since we have way more indexes than we have discreet unique property sets

[22:11] <samcv> there's like 20,000 different combinations of property values but way more codepoints. and compressing the index was one of the things i needed to decide how that would be implemented

[22:17] <BenGoldberg> You might (or might not) get better results looking at each property (especially booleans) separately.

[22:18] <chansen_> There is no magical bullet for the compression of the folded trie, but first decide on the absolute necessary properties (don't try to represent all of the Unicode properties in one trie) once you have decided on the properties (perhaps GC, GCB, BIDI) you can implement it efficiently.

[22:19] <chansen_> samcv: learn from others, you are not the first to encounter these problems!

[22:21] <chansen_> samcv: Unicode Demystified is a good read (even though it's old), learn from ICU, read chapter 5 in Unicode Implementation Guidelines.

[22:22] <MasterDuke> p6 -e 'class A { method foo { say "hi" } }; A.fob' No such method 'fob' for invocant of type 'A'. Did you mean 'foo'?   in block <unit> at -e line 1

[22:23] <MasterDuke> any opinions on whether it should just look through :local methods or :all?

[22:27] <chansen_> samcv: http://www.unicode.org/notes/tn31/ might provide some ideas on how to compress names beside base 40

[22:27] <MasterDuke> or how big a difference to allow?

[22:27] <samcv> i've already figured that out

[22:28] <samcv> using base 40 encoding and also encoding entire words as single characters

[22:28] <samcv> can compress the names a great deal since many names are repeated

[22:28] <BenGoldberg> For example, suppose that *all* you wanted was the 'isDigit' property for all unicode characters.  Since the result is just a true or false, we can use something like a Bloom Filter, Quotient Filter, a Skip List, etc.

[22:28] <samcv> so can have the most common 39 words encoded in only two bytes

[22:28] <samcv> well less

[22:29] <samcv> 2/3 of 2 bytes

[22:29] <samcv> and standard characters as 1/3 of 2 bytes

[22:30] <samcv> and most likely all properties will be equally fast. i only have an issue compressing indexes to ~20,000 unique sets of property value combinations

[22:30] * Zoffix snags the "most commits to docs" title from moritz :)

[22:30] <samcv> but multiple trie's probably for the index

[22:30] <samcv> would make sense

[22:30] <Zoffix> Kinda bittersweet, because I didn't really write that much docs.. :/

[22:31] <timotimo> don't worry, we have a long tail of docs contributors

[22:31] <samcv> the actual property values themself when deduplicates to 20,000 sets is not actually that large when you use a compressed bitfield

[22:33] <Zoffix> COMPLETION Report / Perl 6 IO TPF Grant: http://blogs.perl.org/users/zoffix_znet/2017/05/completion-report-perl-6-io-tpf-grant.html

[22:34] <BenGoldberg> Zoffix++

[22:35] <timotimo> fantastic!

[22:36] <chansen_> samcv: another trick is to use a bitmap for "common" code-points < U+07FF and use a two-level trie for code-points < 0xFFFF and a three level trie for code-points above > 0xFFFF

[22:38] <chansen_> reduces memory considerably

[22:40] * chansen_ anyway it`s past my bedtime, but we can catch up tomorrow

[22:41] <Zoffix> ZofBot: FREEDOM!

[22:41] <ZofBot> Zoffix, Within a submethod the "$

[22:41] * Zoffix leaves to de-IO in EVERSPACE™

[22:42] <MasterDuke> Zoffix++

[22:51] <BenGoldberg> Zoffix, Your Trait::IO auto-close thingy looks insane.  Is there no better solution than 5 nested nqp::ctxcaller's?

[22:58] <AlexDaniel> Zoffix++

[22:58] <AlexDaniel> awesome

[23:09] <Zoffix> BenGoldberg: no idea. I mostly copied the code from another core trait

[23:11] <Zoffix> Maybe not; since it looks up a lexical in a scope. If it just were to start going up scopes, trying to find it, it might get a lexical from a wrong scope, if the names clash

[23:13] <BenGoldberg> Also, what if someone uses $ as the filehandle name?

[23:18] <Zoffix> No point

[23:18] * Zoffix &

[23:46] <AlexDaniel> m: sub foo() { … }; foo

[23:46] <camelia> rakudo-moar 608e88: OUTPUT: «Stub code executed␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[23:46] <AlexDaniel> m: sub foo() { !!! }; foo

[23:46] <camelia> rakudo-moar 608e88: OUTPUT: «Stub code executed␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[23:47] <AlexDaniel> m: sub foo() { ??? }; foo

[23:47] <camelia> rakudo-moar 608e88: OUTPUT: «Stub code executed␤  in sub foo at <tmp> line 1␤»
