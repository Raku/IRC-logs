[01:08] <lizmat> .

[01:08] <yoleaux> 27 Nov 2017 20:41Z <DrForr> lizmat: http://theperlfisher.blogspot.cz/2017/11/test-all-things.html I think the link got missed in the P6W.

[01:10] <lizmat> .tell DrForr the link is in the Meanwhile on FaceBook section ?

[01:10] <yoleaux> lizmat: I'll pass your message to DrForr.

[05:57] <Geth> ¦ nqp: f22b0b2d0e | usev6++ | src/vm/jvm/QAST/Compiler.nqp

[05:57] <Geth> ¦ nqp: [jvm] Remove capture from cstack upon backtracking

[05:57] <Geth> ¦ nqp:

[05:57] <Geth> ¦ nqp: This is a translation of similiar fixes for js (626e60c81f)

[05:57] <Geth> ¦ nqp: and moarvm (d181c8b8d5). It fixes three currently failing test

[05:57] <Geth> ¦ nqp: in S05-match/capturing-contexts.t (see also RT #116895 and RT #125285).

[05:57] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f22b0b2d0e

[05:57] <synopsebot> RT#116895 [open]: https://rt.perl.org/Ticket/Display.html?id=116895 [BUG] [JVM] LTM alternation captures the wrong stuff when backtracking in Rakudo

[05:57] <synopsebot> RT#125285 [resolved]: https://rt.perl.org/Ticket/Display.html?id=125285 Capturing separator (like /something % (.+?)/ ) spews out backtracking

[07:24] <TimToady> m: enum Pows (<A B C> Z=> 1,2,4); say B   # wonder if we have this in our bugs yet...

[07:24] <camelia> rakudo-moar 1668b4f0b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared name:␤    B used at line 1␤␤»

[07:25] <[Tux]> Rakudo version 2017.11-38-g1668b4f0b - MoarVM version 2017.11-2-g26ad7cc55

[07:25] <[Tux]> csv-test-xs-20      0.445 -  0.447

[07:25] <[Tux]> csv-ip5xs           1.117 -  1.128

[07:25] <[Tux]> test-t --race       1.329 -  1.392

[07:25] <[Tux]> test-t              3.260 -  3.271

[07:25] <[Tux]> test               12.137 - 12.238

[07:25] <[Tux]> csv-parser         12.697 - 12.923

[07:25] <[Tux]> csv-ip5xs-20       13.315 - 13.810

[07:25] <[Tux]> test-t-20 --race   20.508 - 20.638

[07:25] <[Tux]> test-t-20          59.335 - 59.452

[07:40] <TimToady> yeah, turns out to be a variant of #130041

[07:44] <Geth> ¦ rakudo: d9021cf16e | TimToady++ | src/Perl6/Actions.nqp

[07:44] <Geth> ¦ rakudo: enums from generated list should handle pairs

[07:44] <Geth> ¦ rakudo:

[07:44] <Geth> ¦ rakudo: The enum actions code could handle literal pairs correctly but

[07:44] <Geth> ¦ rakudo: didn't handle generated pairs such as might be generated from X=>.

[07:44] <Geth> ¦ rakudo:

[07:44] <Geth> ¦ rakudo: Fixes #130041

[07:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d9021cf16e

[07:54] <TimToady> m: enum Foo ( 'A' => 42, 'B', 'C', 'D' ); say +B

[07:54] <camelia> rakudo-moar d9021cf16: OUTPUT: «43␤»

[07:54] <TimToady> m: enum Foo ( 'A' => 42, 'B', 'C', 'D' ); say +A

[07:54] <camelia> rakudo-moar d9021cf16: OUTPUT: «42␤»

[07:54] <TimToady> m: enum Pows (<A B C> Z=> 1,2,4); say +B

[07:54] <camelia> rakudo-moar d9021cf16: OUTPUT: «2␤»

[09:49] <masak> TimToady++

[10:09] <masak> TimToady: you might have answered already, but...

[10:09] <masak> quasi { my $x; {{{ #`[ $x not visible here ] }}} }

[10:09] <masak> would you agree?

[10:10] <masak> both these combinations are visible: macro->quasi, macro->unquote

[10:10] <masak> but not quasi->unquote

[10:11] <masak> (my argumentation is that quasi code is not "real"/"incorporated" enough for it to have real declarational side effects. this is in line with recent design decisions around quasis and BEGIN blocks.)

[10:16] <masak> or, phrasing it from another angle, it kinda makes sense for the code in the unquote to be "unaware" of its surrounding quasi context. in a way it's *not* surrounded by it, because an unquote is... undoing the quasiquoting.

[10:16] <masak> ("it's only surrounded by it textually!")

[10:19] <jnthn> masak: Yeah, it's kinda like how in `my $x = 101; Q:c/my $x = 42; { say $x }/` we expect 100, not 42

[10:20] <masak> I'm deeply insulted at having quasiquotes being compared to text... but yes :)

[10:20] <jnthn> Just with the oddity that the language being parsed inside of the quote construct happens to start in the MAIN grammar rather than the Q grammar

[10:21] <masak> the thing that makes it tricky, of course is that something like `quasi { my $x = 42; $x }` still needs to work

[10:21] <jnthn> An explanation that's good *and* insulting. Go me! :P

[10:21] <masak> that is, the quasi *does* declare things

[10:21] <masak> just not for the unquotes

[10:22] <masak> in terms of nesting depth, the unquotes do a rare -1 instead of a +1, kinda

[10:22] <masak> at least handwavingly-conceptually

[10:23] <jnthn> It declares things, but inside of its own little world, from which the outer program looks kinda like a setting

[10:24] <masak> a recent theme for me has been realizing (and re-realizing) that the quasiquote is a *template*

[10:24] <masak> so while declarations can happen in there, they're not the "real thing" that will eventually happen in the injected code

[10:25] <masak> and in a sense they can't be, because templates aren't fully built yet

[10:26] <masak> the fine balance Perl 6 tries to walk here is that you're doing all these *clearly insane* things with scopes and program fragments... but you still wan't full lexical scoping to apply

[10:26] <masak> want*

[10:26] <jnthn> wan't :D

[10:26] <masak> I blame macros for that typo, somehow

[10:26] * jnthn tries to guess the missing letter :)

[10:28] <masak> a short progress report from the field: 007 is about to turn 3 years old. I've had some encouraging progress with quasis in the past few days/weeks.

[10:28] <jnthn> But yeah, I think "it's just a quote construct that can interpolate, parsing a very interesting language inside" is a fairly nice way to think about it.

[10:28] <jnthn> Wow, time flies

[10:28] <masak> 007 is by far the toughest thing I've ever implemented. some things I have to work with on "good days" because they're just impossible otherwise

[10:35] <masak> I'm still not 100% convinced I have the "right" model to bring back to Perl 6 -- I keep finding cases that don't work well

[10:35] <masak> happy to discuss it with somebody, with lots of examples

[10:36] <masak> though brain meltdown hazard applies, of course

[12:05] <tbrowder> .tell AlexDaniel I added answers to your questions.

[12:05] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[12:16] <tbrowder> .tell Zoffix the pod spec tests now require roast with PR #353 merge.

[12:16] <yoleaux> tbrowder: I'll pass your message to Zoffix.

[12:20] <dogbert2> ZOFFLOP t/spec/MISC/bug-coverage-stress.t (test #5)

[13:51] <Geth> ¦ rakudo: e7c0a64475 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[13:51] <Geth> ¦ rakudo: Fix the .toggle() case

[13:51] <Geth> ¦ rakudo:

[13:51] <Geth> ¦ rakudo: - if no checkers specified, $!done would not be properly initialized

[13:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e7c0a64475

[13:55] <timotimo> TimToady: will you spend a little time on the Z+= thing brian d foy reported (once a few months ago, again more recently)?

[15:22] <AlexDaniel> .

[15:22] <yoleaux> 12:05Z <tbrowder> AlexDaniel: I added answers to your questions.

[16:31] <Geth> ¦ roast/master: 7 commits pushed by (Tom Browder)++, (Aleks-Daniel Jakimenko-Aleksejev)++

[16:31] <Geth> ¦ roast/master: 8420637c7f | save working files

[16:31] <Geth> ¦ roast/master: f90fe21553 | save work

[16:31] <Geth> ¦ roast/master: 72c944464c | save work

[16:31] <Geth> ¦ roast/master: 3636ca7c1d | save work, good tests for Pod fixes

[16:31] <Geth> ¦ roast/master: ccdfb1251a | This commit includes tests for the following bugs:

[16:31] <Geth> ¦ roast/master: 443b934b66 | correct number

[16:31] <Geth> ¦ roast/master: 2342d1d1b8 | Merge pull request #353 from tbrowder/fix-rt-128221

[16:32] <Geth> ¦ roast/master: review: https://github.com/perl6/roast/compare/f1692c05cd...2342d1d1b8

[16:51] <TimToady> timotimo: well, maybe, but no promises; in masakian terms, I haven't had any "good days" for the last couple weeks, due to a tooth extraction that got infected, resulting in a two-week long headache

[16:52] <TimToady> masak: I'm on the mend, but not sure I'm up to brain-melting just yet

[16:56] <[Coke]> TimToady: ugh, hope you feel better soon.

[16:57] <[Coke]> I'm doing my part with some acute tonsillitis, but I think I got the easy job. :)

[17:39] <AlexDaniel> yay! SEGV

[17:41] <AlexDaniel> squashable6: next

[17:41] <squashable6> AlexDaniel, ⚠🍕 Next SQUASHathon in 2 days and ≈16 hours (2017-12-02 UTC-12⌁UTC+14). See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[17:43] <AlexDaniel> hm, has anybody noticed any memory leaks lately?

[17:44] <AlexDaniel> just noticed that some inactive bots are eating a bit too much

[17:47] <timotimo> TimToady: damn, that sucks. i wish you a swift and lasting recovery :)

[17:51] <jnthn> TimToady: Hope you'll be feeling better soon; take care!

[18:27] <AlexDaniel> jnthn: hello. I think I see a reproducible gc-related segfault here. I'm thinking, maybe you want to take a quick look?

[18:28] <AlexDaniel> I did catch it under valgrind but it took more than half an hour and mosh ate the output :(

[18:28] <AlexDaniel> but I happens under gdb also

[18:28] <AlexDaniel> it*

[18:30] <AlexDaniel> dunno if this helps: https://gist.github.com/AlexDaniel/5e0f9e00b3d582f4a2976dadc4c2c4ff

[18:56] <AlexDaniel> o! maybe this is golfable

[18:57] <AlexDaniel> nvm then

[18:58] <timotimo> AlexDaniel: does it happen with jit turned off?

[19:06] <AlexDaniel> timotimo: yes

[19:06] <timotimo> that ought to make the stack trace a bit more digestable

[19:08] <AlexDaniel> timotimo: https://gist.github.com/AlexDaniel/5e0f9e00b3d582f4a2976dadc4c2c4ff

[19:09] <AlexDaniel> (updated)

[19:09] <timotimo> it's probably possible to get this to blow up earlier with GC_DEBUG set?

[19:10] <AlexDaniel> what's GC_DEBUG? https://github.com/rakudo/rakudo/wiki/dev-env-vars

[19:10] <timotimo> oh, it's actually a #define inside moar's c source

[19:11] <AlexDaniel> well… that'd be a bit harder

[19:12] <timotimo> if you set it to 2 rather than just 1, it'll also make things a lot slower

[19:18] <AlexDaniel> ok created this to track the problem: https://github.com/rakudo/rakudo/issues/1278

[19:19] <timotimo> "GC-related" is a bit of a red herring; it's usually just that moar stumbles upon some prior corruption the moment GC runs, because GC basically touches everything

[19:21] <AlexDaniel> timotimo: changed.

[19:21] <AlexDaniel> fwiw, feel free to edit any of my bug reports/comments on github

[19:21] <timotimo> oh

[19:50] <moritz> can somebody please try to create the category 2017 on https://perl6advent.wordpress.com/wp-admin/ ?

[19:50] <moritz> it fails for me

[19:50] <moritz> creating 2018 worked :/

[19:50] <moritz> oops, should've been in #perl6

[19:54] <jnthn> AlexDaniel: Was away doing dinner when you wrote

[19:54] <jnthn> Hm, I'm sure I've seen that stack trace before

[19:54] <jnthn> And it was 'cus sc_idx was a bonkers value

[19:54] <AlexDaniel> well let me know if you want to reproduce it on whateverable server

[19:55] <AlexDaniel> in theory you should also be able to do it on any machine, I'd just have to tar some input files for it

[19:55] <AlexDaniel> but I don't have any easy-to-follow steps yet :)

[19:56] <jnthn> I'm probably a bit too tired for debugging such things today, alas :(

[19:56] <AlexDaniel> sure. I'll update https://github.com/rakudo/rakudo/issues/1278 accordingly once I have more info

[21:02] <AlexDaniel> .tell lizmat I've done the bot. It tends to segfault a little bit (GH#1278), but if that happens just rerun the command again. https://github.com/perl6/whateverable/wiki/Reportable

[21:02] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[21:30] <gfldex> .tell lizmat basic html support is in. I had to cheat because Telemetry::report still resists overloading (and there are a few things not exported).

[21:30] <yoleaux> gfldex: I'll pass your message to lizmat.

[23:12] <Geth> ¦ roast: c39830a610 | usev6++ | S15-unicode-information/uniname.t

[23:12] <Geth> ¦ roast: [jvm] Fudge two failing unicode tests

[23:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c39830a610
