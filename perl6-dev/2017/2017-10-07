[00:12] <MasterDuke> what's a good way in nqp-land to know if something is an enum?

[00:14] <MasterDuke> to be more precise, in World.nqp

[00:15] <timotimo> you can .HOW things, can't you?

[00:15] <timotimo> otherwise probably nqp::gethow

[00:15] <MasterDuke> the .HOW.name is just the name of the enum

[00:16] <timotimo> yeah, but what's the .HOW.HOW.name? :D

[00:16] <MasterDuke> hm, i thought it did try that, but let me check

[00:16] <timotimo> m: say True.HOW.HOW.name(True.HOW)

[00:16] <camelia> rakudo-moar 92e51c: OUTPUT: «Perl6::Metamodel::EnumHOW␤»

[00:17] <MasterDuke> well there you go. wonder what it was i tried...

[00:17] <AlexDaniel_> “Message body is not shown because it is too large.” *facepalm*

[00:17] <timotimo> ;(

[00:26] <samcv> should i just todo all jvm nqp failures?

[00:26] <samcv> y/n

[00:27] <timotimo> modules.perl6.org now updated in about 55 minutes

[00:27] <timotimo> so 20 minutes saved perhaps?

[00:27] <samcv> AlexDaniel_, MasterDuke some of the waste that's in INTERPOLATE. i added some 'note's to nqp

[00:27] <samcv> https://gist.github.com/39c206ff7c45649e26fd39b9156b2323

[00:28] <samcv> 'hi' ~~ /hi/ compared to my $var = 'hi'; 'hi' ~~ /$hi/

[00:28] <samcv> 3 vs 13 times called. the nqp !INTERPOLATE method

[00:29] <MasterDuke> which is 13?

[00:29] <AlexDaniel_> 'hi' ~~ /$hi/

[00:29] <samcv> ^

[00:29] <timotimo> it looks like we can give Pithub an LWP::UserAgent object we create ourselves; if we initialize it with keep_alive => 10 or something we can save a bit of time spinning up and tearing down connections perhaps?

[00:30] <samcv> where it outputs "literal␤" is in `method termish` btw

[00:30] <AlexDaniel_> samcv: by the way, why am I being pinged? What's so special about me in this particular case? :)

[00:30] <samcv> idk

[00:30] <samcv> you are here

[00:31] <samcv> what, 20 seconds before i highlighted you :)

[00:31] <samcv> and you're often interested in text parsing/unicode things

[00:32] <AlexDaniel_> ah ok, I was just thinking that maybe something has to be bisected or whatever

[00:33] <samcv> i've at least added to roast the issues between 'ignorecase' not working properly for INTERPOLATE. so that's decent. wasn't able to figure out the cause though. i wish i understood how nqp worked that way

[00:34] <samcv> may be issues with 'ignoremark' or 'ignorecase+ignoremark' but i have yet to find bigs with those when the /$thing/ is interpolated versus /not/. unless you can think up some (or remember)

[00:36] <MasterDuke> i thought i fixed the ignore* in INTERPOLATE recently?

[00:36] <samcv> well there are at least some bugs still

[00:37] <MasterDuke> i just spotted a wild TimToady over in #perl6, he might have some good input

[00:37] <samcv> https://github.com/perl6/roast/commit/946d2ff79 and also see what i wrote in https://rt.perl.org/Ticket/Display.html?id=132233

[00:38] <samcv> though i can't count on it. i remember it failing in all cases i tried *before* but now it only fails with interpolated haystack  in cases i cannot determine (it fails in roast test)

[00:38] <samcv> so if you say you fixed an issue with interpolated haystack, then maybe i remember correctly and it used to *always* fail with interpolated haystack and only does sometimes. because that test succeeds when i do it in REPL but in roast, it fails

[00:39] <samcv> have not yet figured out WTF is going on

[00:39] <timotimo> going to bed, seeya :)

[00:40] <MasterDuke> c6aacafd1f6cbb069befd0236e9f246092e11640 should have fixed some things, but i guess not everything

[00:42] <samcv> ah nice. so that was the thing that fixed some cases

[00:42] <samcv> though it is still broken on the nqp side

[00:43] <MasterDuke> yeah, i don't think i looked at nqp at all when i was working on INTERPOLATE

[00:43] <samcv> i'm guessing that may be the descrepency. since nqp seems totally broken. but on perl6 some cases it works some cases it does not with interpolate

[00:43] <samcv> though i mean with perl6 at least. it works and doesn't work with perl6. and i'm not sure when/why it works/doesn't just that somee cases work and some don't

[00:44] <samcv> but big ++ to making the situation better :)

[00:59] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1181: Suggest enum values as types

[00:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1181

[01:21] <Geth> ¦ rakudo/nom: 12774237a6 | (Daniel Green)++ | src/Perl6/World.nqp

[01:21] <Geth> ¦ rakudo/nom: Suggest enum values as types

[01:21] <Geth> ¦ rakudo/nom:

[01:21] <Geth> ¦ rakudo/nom: Implements RT #123926, e.g., `enum E <Foo Bar>; sub x(Floo) {}` now says

[01:21] <Geth> ¦ rakudo/nom: `Invalid typename 'Floo' in parameter declaration. Did you mean 'Foo'?`

[01:21] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/12774237a6

[01:21] <Geth> ¦ rakudo/nom: f62ae60c48 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/Perl6/World.nqp

[01:22] <Geth> ¦ rakudo/nom: Merge pull request #1181 from MasterDuke17/RT123926

[01:22] <synopsebot> RT#123926 [new]: https://rt.perl.org/Ticket/Display.html?id=123926 [BUG] LTA error message without Levenshtein distance suggestion when mistyping enum value in signature in Rakudo

[01:22] <Geth> ¦ rakudo/nom:

[01:22] <Geth> ¦ rakudo/nom: Suggest enum values as types

[01:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f62ae60c48

[02:27] <Geth> ¦ rakudo: skids++ created pull request #1182: Warn on typical precedence errors with infix:<..> (RT#127279)

[02:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1182

[02:28] <synopsebot> RT#127279 [new]: https://rt.perl.org/Ticket/Display.html?id=127279 [BUG] Infinite loop with |"a".."z"

[02:35] <Geth> ¦ rakudo/corresponding-starter: 279bae08a5 | (Aleks-Daniel Jakimenko-Aleksejev)++ | src/Perl6/Grammar.nqp

[02:35] <Geth> ¦ rakudo/corresponding-starter: Mention corresponding starter in <, <<, « subscripts

[02:35] <Geth> ¦ rakudo/corresponding-starter:

[02:35] <Geth> ¦ rakudo/corresponding-starter: Resolves part of RT #125641.

[02:35] <Geth> ¦ rakudo/corresponding-starter:

[02:35] <Geth> ¦ rakudo/corresponding-starter: Wordy descriptions were substituted with actual symbols to make it

[02:35] <Geth> ¦ rakudo/corresponding-starter: more consistent with other error messages. Also, this way the error

[02:35] <Geth> ¦ rakudo/corresponding-starter: message is much shorter.

[02:35] <synopsebot> RT#125641 [new]: https://rt.perl.org/Ticket/Display.html?id=125641 [LTA] error messages when right bracket is missing: $<> , <>, () and so on

[02:35] <Geth> ¦ rakudo/corresponding-starter: review: https://github.com/rakudo/rakudo/commit/279bae08a5

[02:35] <Geth> ¦ rakudo/corresponding-starter: 6542bb8032 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[02:35] <Geth> ¦ rakudo/corresponding-starter: Mention corresponding starter for most of the things

[02:35] <Geth> ¦ rakudo/corresponding-starter:

[02:35] <Geth> ¦ rakudo/corresponding-starter: This should handle quotes, parens, brackets, subscripts and many other

[02:35] <Geth> ¦ rakudo/corresponding-starter: things.

[02:35] <Geth> ¦ rakudo/corresponding-starter:

[02:35] <Geth> ¦ rakudo/corresponding-starter: Resolves part of RT #125641.

[02:35] <Geth> ¦ rakudo/corresponding-starter:

[02:35] <Geth> ¦ rakudo/corresponding-starter: Unfortunately I don't know how to print the actual starter, but as

[02:35] <Geth> ¦ rakudo/corresponding-starter: long as the line number is mentioned it's alright.

[02:35] <Geth> ¦ rakudo/corresponding-starter: review: https://github.com/rakudo/rakudo/commit/6542bb8032

[02:36] <Geth> ¦ rakudo: AlexDaniel++ created pull request #1183: “corresponding … was at” RT #125641

[02:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1183

[02:41] <AlexDaniel_> that's depressing

[02:47] <MasterDuke> AlexDaniel_: did you happen to try with passing :cache(1) to lineof()?

[02:48] <AlexDaniel_> MasterDuke: no, I don't know what cache does

[02:49] <AlexDaniel_> MasterDuke: fwiw this commit has no :cache also https://github.com/rakudo/rakudo/commit/382c78a97ae6132d0054e0112cf19ceb2d50fef6

[02:49] <MasterDuke> sometimes the line info has already been calculated and cached, it's a bunch faster

[02:50] <MasterDuke> yeah, i added it more recently than that, when i got backtraces to print the actual filename+linenumber instead of the generated file

[02:52] <Geth> ¦ roast: 3014999fcd | (Daniel Green)++ | S32-exceptions/misc.t

[02:52] <Geth> ¦ roast: Add test for suggesting enum values as types

[02:52] <Geth> ¦ roast:

[02:52] <Geth> ¦ roast: For RT #123926.

[02:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3014999fcd

[02:52] <synopsebot> RT#123926 [new]: https://rt.perl.org/Ticket/Display.html?id=123926 [BUG] LTA error message without Levenshtein distance suggestion when mistyping enum value in signature in Rakudo

[02:54] <AlexDaniel_> MasterDuke: oh, it was you who did that

[02:54] <AlexDaniel_> awesome

[02:56] <MasterDuke> yeah, almost a year ago now

[02:58] <AlexDaniel_> MasterDuke: that seems to be working fine

[02:58] <MasterDuke> cool

[03:00] <Geth> ¦ rakudo/corresponding-starter: a462d0a26e | (Aleks-Daniel Jakimenko-Aleksejev)++ | src/Perl6/Grammar.nqp

[03:00] <Geth> ¦ rakudo/corresponding-starter: Cache some line numbers

[03:00] <Geth> ¦ rakudo/corresponding-starter:

[03:00] <Geth> ¦ rakudo/corresponding-starter: MasterDuke++

[03:00] <Geth> ¦ rakudo/corresponding-starter:

[03:00] <Geth> ¦ rakudo/corresponding-starter: https://irclog.perlgeek.de/perl6-dev/2017-10-07#i_15269029

[03:00] <Geth> ¦ rakudo/corresponding-starter: review: https://github.com/rakudo/rakudo/commit/a462d0a26e

[03:23] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1184: Use cached line numbers for token label

[03:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1184

[05:33] <samcv> going to improve the error when you try and use whitespace with a combiner as a separator

[05:33] <samcv> to try and close this LTA RT

[07:57] <[Tux]> This is Rakudo version 2017.09-230-gf62ae60c4 built on MoarVM version 2017.09.1-576-g64b5dc03

[07:57] <[Tux]> csv-ip5xs        1.257 -  1.360

[07:57] <[Tux]> test             9.982 - 10.344

[07:57] <[Tux]> test-t           3.219 -  3.236

[07:57] <[Tux]> csv-parser       0.883 -  0.901

[08:47] <smls> Does anyone know how variables interpolated into regexes like  / @foo /  are parsed by Rakudo?

[08:48] <smls> P6Regex'es `metachar:sym<var>` looks like it only catches backreferences, not external variables: https://github.com/perl6/nqp/blob/576d78eef/src/QRegex/P6Regex/Grammar.nqp#L334

[08:52] <smls> ah, there's https://github.com/rakudo/rakudo/blob/f62ae60c4/src/Perl6/Grammar.nqp#L5314

[08:52] <buggable> New CPAN upload: IRC-Client-Plugin-Github-0.1.2.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/IRC-Client-Plugin-Github-0.1.2.tar.gz

[09:02] <buggable> New CPAN upload: Config/Config-1.2.1.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/Config/Config-1.2.1.tar.gz

[09:12] <buggable> New CPAN upload: Config-Parser-toml/Config-Parser-toml-1.0.0.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/Config-Parser-toml/Config-Parser-toml-1.0.0.tar.gz

[09:12] <buggable> New CPAN upload: Config-Parser-yaml/Config-Parser-yaml-1.0.0.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/Config-Parser-yaml/Config-Parser-yaml-1.0.0.tar.gz

[09:12] <buggable> New CPAN upload: Hash-Merge/Hash-Merge-0.1.0.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/Hash-Merge/Hash-Merge-0.1.0.tar.gz

[09:12] <buggable> New CPAN upload: MPD-Client/MPD-Client-0.1.2.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/MPD-Client/MPD-Client-0.1.2.tar.gz

[09:36] <Geth> ¦ roast: Tyil++ created pull request #342: WIP: Expand file tests

[09:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/342

[09:44] <lizmat> Files=1227, Tests=75600, 346 wallclock secs (14.70 usr  5.24 sys + 2419.35 cusr 218.79 csys = 2658.08 CPU)

[09:46] <tyil> https://github.com/perl6/roast/pull/342/files#diff-2e27e1eba1084c852dd52a216d3a273fR54 this returns a Failure, not a Bool at this moment, should I adapt the test or is the Failure return incorrect?

[10:41] <Geth> ¦ rakudo/nom: 26bdc95c78 | skids++ | 2 files

[10:41] <Geth> ¦ rakudo/nom: Warn on typical precedence errors with infix:<..> (RT#127279)

[10:41] <Geth> ¦ rakudo/nom:

[10:41] <Geth> ¦ rakudo/nom: Alerts user to potential accidental use of prefix:<|> or

[10:41] <Geth> ¦ rakudo/nom:   prefix:<~> on a range start value, when they are usually intended

[10:41] <Geth> ¦ rakudo/nom:   to apply to the entire range, and encourages use of parens.

[10:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/26bdc95c78

[10:41] <Geth> ¦ rakudo/nom: cb9d2e040d | lizmat++ (committed using GitHub Web editor) | 2 files

[10:41] <synopsebot> RT#127279 [open]: https://rt.perl.org/Ticket/Display.html?id=127279 [BUG] Infinite loop with |"a".."z"

[10:41] <Geth> ¦ rakudo/nom: Merge pull request #1182 from skids/rt127279

[10:41] <Geth> ¦ rakudo/nom:

[10:41] <Geth> ¦ rakudo/nom: Warn on typical precedence errors with infix:<..> (RT#127279)

[10:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cb9d2e040d

[11:50] <Geth> ¦ rakudo/nom: 4868e9271a | (Zoffix Znet)++ | 2 files

[11:50] <Geth> ¦ rakudo/nom: Remove dead code for `use v5`

[11:50] <Geth> ¦ rakudo/nom:

[11:50] <Geth> ¦ rakudo/nom: Dies while complaining about missing `Perl5` module. A thought occured

[11:50] <Geth> ¦ rakudo/nom: to make it load Inline::Perl5, but felt like useless magic, so I

[11:50] <Geth> ¦ rakudo/nom: removed the code entirely and just make it complain there's no

[11:50] <Geth> ¦ rakudo/nom: compiler for v5, like it'd do for `use v6.z`

[11:50] <Geth> ¦ rakudo/nom:

[11:50] <Geth> ¦ rakudo/nom: Fixes RT#130834: https://rt.perl.org/Ticket/Display.html?id=130834

[11:50] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4868e9271a

[11:50] <synopsebot> RT#130834 [open]: https://rt.perl.org/Ticket/Display.html?id=130834 Is `use v5` still a thing?

[12:20] <Geth> ¦ rakudo/full-make-test: 50 commits pushed by (Zoffix Znet)++, skids++, (Elizabeth Mattijsen)++, (Jonathan Worthington)++, (Patrick Spek)++, (Samantha McVey)++, (Daniel Green)++

[12:20] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/compare/c6ff787a67...54d5096732

[12:48] <Geth> ¦ rakudo/full-make-test: 6757f93473 | (Zoffix Znet)++ | t/02-rakudo/01-is_approx.t

[12:48] <Geth> ¦ rakudo/full-make-test: Fix up t/02-rakudo/01-is_approx.t tests

[12:48] <Geth> ¦ rakudo/full-make-test:

[12:48] <Geth> ¦ rakudo/full-make-test: The author of planck tests wrote them without any regard to `e-34`

[12:48] <Geth> ¦ rakudo/full-make-test: part of the number and adjusted the numbers in the decimal portion

[12:48] <Geth> ¦ rakudo/full-make-test: alone, expecting changes to be of 1e-5 magnitude when they were

[12:48] <Geth> ¦ rakudo/full-make-test: actually of 1e-39 magnitude.

[12:48] <Geth> ¦ rakudo/full-make-test:

[12:48] <Geth> ¦ rakudo/full-make-test: Fix by shifting the original value by expected differences instead.

[12:48] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/6757f93473

[12:51] <Geth> ¦ roast: 4f224ec562 | (Patrick Spek)++ (committed by Zoffix Znet) | S32-io/file-tests.t

[12:51] <Geth> ¦ roast: Expand file tests (#342)

[12:51] <Geth> ¦ roast:

[12:51] <Geth> ¦ roast: * Use subtests

[12:51] <Geth> ¦ roast:

[12:51] <Geth> ¦ roast: * Add tests for .d

[12:51] <Geth> ¦ roast:

[12:51] <Geth> ¦ roast: * Add tests for IO.l

[12:51] <Geth> ¦ roast: <…commit message has 34 more lines…>

[12:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4f224ec562

[12:59] <Skarsnik> Hello :)

[12:59] <Geth> ¦ rakudo/full-make-test: 0d5bb9097a | (Zoffix Znet)++ | t/02-rakudo/dump.t

[12:59] <Geth> ¦ rakudo/full-make-test: Fudge failing tests

[12:59] <Geth> ¦ rakudo/full-make-test:

[12:59] <Geth> ¦ rakudo/full-make-test: Not sure there's any point in fixing this, since it's not part of the

[12:59] <Geth> ¦ rakudo/full-make-test: language and we already got `dd` and language-wise we got `.perl`

[12:59] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/0d5bb9097a

[13:00] <Skarsnik> How the squashaton going?

[13:00] <Geth> ¦ rakudo/full-make-test: 93c4555db3 | (Zoffix Znet)++ | t/02-rakudo/dump.t

[13:00] <Geth> ¦ rakudo/full-make-test: Unfudge now-passing test

[13:00] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/93c4555db3

[13:01] <Skarsnik> squashable6, status

[13:01] <squashable6> Skarsnik, 🍕🍕 SQUASHathon is in progress! The end of the event in ≈22 hours. See https://github.com/rakudo/rakudo/wiki/Monthly-Bug-Squash-Day

[13:01] <squashable6> Skarsnik, Log and stats: https://gist.github.com/276df459191e96cb5c8605dcfdc60aef

[13:06] <Zoffix> .tell bartolin I think Proc::Async is already implemented on JVM, so maybe this ticket can be closed and all the fudges unfudged? https://rt.perl.org/Ticket/Display.html?id=126524

[13:06] <yoleaux> Zoffix: I'll pass your message to bartolin.

[13:06] <yoleaux> 12:55Z <tyil> Zoffix: thanks for the tip :>

[13:11] <Zoffix> Hm, looks like we're running with zero REPL tests whatsoever.

[13:12] <Zoffix> Because all the tests are run as non-TTY and it just evals the code instead of firing up REPL.

[13:13] <Zoffix> Do we have a way to make Proc pretend STDIN it as a tty?

[13:13] * Zoffix doesn't know anything about TTY stuff

[13:15] <Geth> ¦ roast: c4d7af0c4d | (Zoffix Znet)++ | 2 files

[13:15] <Geth> ¦ roast: Toss is_run_repl helper routine

[13:15] <Geth> ¦ roast:

[13:15] <Geth> ¦ roast: It's not used anywhere and all but the basic sanity REPL tests have

[13:15] <Geth> ¦ roast: been moved to rakudo's test suite

[13:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c4d7af0c4d

[13:25] <Geth> ¦ rakudo/full-make-test: 78eca2141d | (Zoffix Znet)++ | 2 files

[13:25] <Geth> ¦ rakudo/full-make-test: Start making repl tests work

[13:25] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/78eca2141d

[13:27] <Zoffix> After a bit of googling don't see a sure-fire portable way to fake a TTY, so I'm gonna add a compiler command line flag to force interactive mode even when STDIN aint a TTY

[13:32] <Zoffix> dogbert17: doubt it. I think it was already fixed before. Bisectable can likely tell

[13:32] <Zoffix> "Stage parse      :  94.820" man. And I used to feel sad about low 80s :( this box sucks

[13:39] <lizmat> hmmm... --profile-compile on the setting compile does not appear to generate a profile  :-(

[13:44] <timotimo> does it finish?

[13:46] <dogbert2> Zoffix: can you do IO stuff with that bot?

[13:47] <dogbert2> bistect: my $f = open("test.txt", :rw); $f.write("hello".encode); $f.seek(0); say $f.read(5).decode

[13:47] <dogbert2> bisect: my $f = open("test.txt", :rw); $f.write("hello".encode); $f.seek(0); say $f.read(5).decode

[13:47] <bisectable6> dogbert2, Bisecting by output (old=2015.12 new=4868e92) because on both starting points the exit code is 1

[13:47] <bisectable6> dogbert2, bisect log: https://gist.github.com/3d98e8c1cd197ef3b36ebaa006db2cd7

[13:47] <bisectable6> dogbert2, (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb52eb1fd07397659f19a5cf36dc61f84053

[13:47] <bisectable6> dogbert2, The result looks a bit unrealistic, doesn't it? Most probably the output is different on every commit (e.g. ｢bisect: say rand｣)

[13:47] * Zoffix usually creates all the files in `/tmp` to not pollute dirs with test files

[13:48] <timotimo> yeah, you have to do it in /tmp, otherwise no write access

[13:48] <Zoffix> bisect: my $f = open("/tmp/dasdasdasdastest.txt", :rw); $f.write("hello".encode); $f.seek(0); say $f.read(5).decode

[13:48] <bisectable6> Zoffix, On both starting points (old=2015.12 new=4868e92) the exit code is 0 and the output is identical as well

[13:48] <bisectable6> Zoffix, Output on both points: «hello»

[13:48] <Zoffix> releases: my $f = open("/tmp/dasdasdasdastest.txt", :rw); $f.write("hello".encode); $f.seek(0); say $f.read(5).decode

[13:48] <Zoffix> c: releases my $f = open("/tmp/dasdasdasdastest.txt", :rw); $f.write("hello".encode); $f.seek(0); say $f.read(5).decode

[13:48] <committable6> Zoffix, ¦releases (23 commits): «hello»

[13:48] <Zoffix> c: releases my $f = open("/tmp/dasdasdasdastest.txt", :r, :w); $f.write("hello".encode); $f.seek(0); say $f.read(5).decode

[13:49] <committable6> Zoffix, ¦releases (23 commits): «hello»

[13:49] <dogbert2> so it was fixed ages ago then

[13:51] <dogbert2> ok, if I find some tests in roast I'll close it

[13:54] <lizmat> timotimo: yes, but no file  :-(

[13:54] <timotimo> huh.

[14:02] <Geth> ¦ roast: skids++ created pull request #343: Add tests for new range precedence worries (RT#127279)

[14:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/343

[14:02] <synopsebot> RT#127279 [open]: https://rt.perl.org/Ticket/Display.html?id=127279 [BUG] Infinite loop with |"a".."z"

[14:02] <Geth> ¦ roast: 9d56ba1e58 | skids++ | S03-operators/range.t

[14:02] <Geth> ¦ roast: Add tests for new range precedence worries (RT#127279)

[14:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9d56ba1e58

[14:02] <Geth> ¦ roast: 6e9bab5de4 | skids++ (committed using GitHub Web editor) | S03-operators/range.t

[14:02] <Geth> ¦ roast: Merge pull request #343 from skids/rt127279

[14:02] <Geth> ¦ roast:

[14:02] <Geth> ¦ roast: Add tests for new range precedence worries (RT#127279)

[14:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6e9bab5de4

[14:05] <Zoffix> heh parse stage 96s now! :) It goes up by 2s every time I run it ^_^

[14:06] <timotimo> oops

[14:07] <Zoffix> What's the standard practice to rebuild nqp when I make changes to it?

[14:07] <timotimo> make install; cd ../rakudo; make clean; make install

[14:07] <Zoffix> thanks

[14:08] <timotimo> just what i use

[14:08] * timotimo is taking a heap snapshot of the heap snapshot analyzer analyzing a heap snapshot

[14:11] <Geth> ¦ roast: e3e1f75cc5 | usev6++ | 6 files

[14:11] <Geth> ¦ roast: [jvm] Remove fudges for RT #126524

[14:11] <Geth> ¦ roast:

[14:11] <Geth> ¦ roast: Proc::Async has been implemented for the jvm backend; jnthn++.

[14:11] <Geth> ¦ roast:

[14:11] <Geth> ¦ roast: Unfortunately, some of the fudged tests still fail. I updated

[14:11] <Geth> ¦ roast: the fudge reasons accordingly.

[14:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e3e1f75cc5

[14:11] <synopsebot> RT#126524 [open]: https://rt.perl.org/Ticket/Display.html?id=126524 [JVM] Proc::Async NYI

[14:11] <Zoffix> \o/

[14:11] <bartolin> Zoffix++ I'm gonna close the issue

[14:11] <yoleaux> 13:06Z <Zoffix> bartolin: I think Proc::Async is already implemented on JVM, so maybe this ticket can be closed and all the fudges unfudged? https://rt.perl.org/Ticket/Display.html?id=126524

[14:13] <bartolin> sadly it's not possible to run spectest on the jvm backend atm due to a severe memory leak (RT #132104), but i looked at the aboved tests in isolation

[14:13] <synopsebot> RT#132104 [open]: https://rt.perl.org/Ticket/Display.html?id=132104 [JVM] EvalServer seems to leak memory

[14:13] <timotimo> i've already filtered to only major collections, but it's already past 4 gigs of heap snapshot data

[14:14] <Geth> ¦ rakudo/nom: f59b2887ad | (Zoffix Znet)++ (committed using GitHub Web editor) | lib/NativeCall.pm6

[14:14] <Geth> ¦ rakudo/nom: Fix precedence error; RabidGravy++

[14:14] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f59b2887ad

[14:14] <lizmat> afk for some 2049 &

[14:14] <timotimo> cool

[14:15] <Zoffix> bartolin: sucks about `doesn't-hang` errors. I'm trying to make repl tests in rakudo's test suite run and some of them use it :/ And there's no fudger for `make test`

[14:16] <bartolin> Zoffix: I'll try to take a closer look at that error (haven't seen that specific error before). Please just go ahead and use it, anyway!

[14:16] <Zoffix> OK

[14:17] <Zoffix> By the sounds of it. Proc::Async.kill is not implemented on JVM

[14:17] <Zoffix> (that's what doesn't-hang uses under the hood)

[14:20] <bartolin> yeah, jnthn++ did map that op with nqp commit 76098315da, but it's NYI

[14:23] <timotimo> oh, looks like i was running a moar without the filter functionality %)

[14:35] <Zoffix> man, this is taking too long. Still have trouble rebuilding nqp :/

[14:35] <Zoffix> "/home/zoffix/CPANPRC/rakudo/install/bin/nqp-m: 2: exec: ../install/bin/moar: not found"

[14:35] <Zoffix> $ type build-nqp

[14:35] <Zoffix> build-nqp is aliased to `cd nqp; perl Configure.pl --gen-moar --backend=moar --prefix=../install; make; make install; cd ..; make clean; make install'

[14:38] <timotimo> perhaps the cd fails? :\

[14:41] <Zoffix> timotimo: do I need to manually build MoarVM too then?

[14:41] <timotimo> shouldn't have to

[14:42] <timotimo> as long as the moar binary is in that prefix it should be fine

[14:43] <Zoffix> this is getting on my tits

[14:45] * Zoffix runs `rm -fr install; build-rakudo`

[14:49] <Zoffix> timotimo: how do you get it to the point that all you do is `make install; cd ../rakudo; make clean; make install` ? What's the setup with a fresh checkout of everythinng?

[14:51] <timotimo> i git clone moar, nqp, and rakudo to be side-by-side rather than nested, and the install/ folder which is my prefix lives as another sibling

[14:51] <Geth> ¦ nqp: c20643c97c | (Samantha McVey)++ | docs/ops.markdown

[14:51] <Geth> ¦ nqp: [docs] Document `ordbaseat` op in docs/ops.markdown

[14:51] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c20643c97c

[14:51] <Geth> ¦ nqp: 0bed230bda | (Samantha McVey)++ | src/HLL/Grammar.nqp

[14:51] <Geth> ¦ nqp: Improve error message when space with combiners is encountered

[14:51] <Geth> ¦ nqp:

[14:51] <Geth> ¦ nqp: New message:

[14:51] <Geth> ¦ nqp: q ̌̌(hi)

[14:52] <Geth> ¦ nqp: Whitespace character ‘SPACE’ (0x20) with 2 combining characters

[14:52] <Geth> ¦ nqp: is not allowed as a delimiter at line 2, near " ̌̌(hi)\n"

[14:52] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/0bed230bda

[14:52] <Zoffix> ok, I'll try that

[14:52] <Geth> ¦ rakudo/nom: ba2d858fb2 | (Zoffix Znet)++ (committed using GitHub Web editor) | lib/NativeCall.pm6

[14:52] <Geth> ¦ rakudo/nom: Fix precedence error; RabidGravy++

[14:52] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ba2d858fb2

[14:53] <Zoffix> gah, my terminal's busted now due to that commit message

[14:53] <samcv> oh?

[14:53] <Zoffix> Yeah, crappy unicode support

[14:54] <samcv> can't handle two combining carons or something. or maybe that it's on a space. it shows up in hexchat as on the parenthesis for me

[14:58] <Geth> ¦ nqp: 108db21525 | (Zoffix Znet)++ | src/HLL/Compiler.nqp

[14:58] <Geth> ¦ nqp: Remove trailing whitespace

[14:58] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/108db21525

[15:03] <Zoffix> ZofBot: two combining carrots!

[15:03] <ZofBot> Zoffix, In the absence of that information, the tool can choose either to download and use the compunit directly, or the tool can proceed in ignorance

[15:06] <travis-ci> NQP build failed. Samantha McVey 'Improve error message when space with combiners is encountered

[15:06] <travis-ci> https://travis-ci.org/perl6/nqp/builds/284691199 https://github.com/perl6/nqp/compare/576d78eef877...0bed230bdaa0

[15:12] <travis-ci> NQP build failed. Zoffix Znet 'Remove trailing whitespace'

[15:12] <travis-ci> https://travis-ci.org/perl6/nqp/builds/284693561 https://github.com/perl6/nqp/compare/0bed230bdaa0...108db2152508

[15:14] <Zoffix> `make clean; cd nqp; make install; cd ..; make install` does the trick with the standard nested installation

[15:21] <Geth> ¦ nqp: c38cfe87f5 | (Zoffix Znet)++ | src/HLL/Compiler.nqp

[15:21] <Geth> ¦ nqp: Implement --force-stdin-eval-mode command line arg

[15:21] <Geth> ¦ nqp:

[15:21] <Geth> ¦ nqp: - Takes 'interactive' and 'non-interactive' as valid values

[15:21] <Geth> ¦ nqp: - Provides the means to switch between REPL and plain eval STDIN

[15:21] <Geth> ¦ nqp:     without depending on whether STDIN is a TTY or not. At the

[15:21] <Geth> ¦ nqp:     very least, this lets us easily write REPL tests.

[15:21] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c38cfe87f5

[15:28] <dogbert2> bisect: my @isprime = False,False; say (for 1 .. 10 -> $i { $i if @isprime[$i] //= so $i %% none 2 ...^ * > $i.sqrt.floor; })

[15:28] <bisectable6> dogbert2, Bisecting by output (old=2015.12 new=f59b288) because on both starting points the exit code is 0

[15:28] <bisectable6> dogbert2, bisect log: https://gist.github.com/80f33c40afa832a376148ff73a7626be

[15:28] <bisectable6> dogbert2, (2017-01-13) https://github.com/rakudo/rakudo/commit/d1c2e7649884a48a4733666c1425d8dcb4918120

[15:31] <Skarsnik> hm

[15:31] <Skarsnik> what that resolved at some point?

[15:31] <Skarsnik> m: role A {method foo(){say "a"}}; class B does A { method foo(Str $a) {say "b"}}; my B $b .= new; $b.foo

[15:31] <camelia> rakudo-moar ba2d85: OUTPUT: «Too few positionals passed; expected 2 arguments but got 1␤  in method foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:35] <dogbert2> the bisect above is from RT #126415

[15:36] <synopsebot> RT#126415 [new]: https://rt.perl.org/Ticket/Display.html?id=126415 [BUG] WhateverCode loses its mind inside //=

[15:37] <travis-ci> NQP build failed. Zoffix Znet 'Implement --force-stdin-eval-mode command line arg

[15:37] <travis-ci> https://travis-ci.org/perl6/nqp/builds/284700960 https://github.com/perl6/nqp/compare/108db2152508...c38cfe87f54e

[16:09] <Geth> ¦ rakudo/nom: 5f6896bde8 | (Timo Paulssen)++ | src/core/Str.pm

[16:09] <Geth> ¦ rakudo/nom: use nqp::codes op to speed up Int

[16:09] <Geth> ¦ rakudo/nom:

[16:09] <Geth> ¦ rakudo/nom: not a vast improvement, but having one allocation less

[16:09] <Geth> ¦ rakudo/nom: is a nice bonus.

[16:09] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5f6896bde8

[16:24] <Geth> ¦ rakudo: jonathanstowe++ created pull request #1185: Add tests to cover a common NC usage

[16:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1185

[16:25] <Geth> ¦ rakudo/nom: d8a20d1134 | (Jonathan Stowe)++ | 2 files

[16:25] <Geth> ¦ rakudo/nom: Add tests to cover a common NC usage

[16:25] <Geth> ¦ rakudo/nom:

[16:25] <Geth> ¦ rakudo/nom: C functions that consistently take some struct or pointer

[16:25] <Geth> ¦ rakudo/nom: as the first argument are declared as methods of that

[16:25] <Geth> ¦ rakudo/nom: CStruct or CPointer

[16:25] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d8a20d1134

[16:25] <Geth> ¦ rakudo/nom: 64d41ffa11 | (Zoffix Znet)++ (committed using GitHub Web editor) | 2 files

[16:26] <Geth> ¦ rakudo/nom: Merge pull request #1185 from jonathanstowe/nom

[16:26] <Geth> ¦ rakudo/nom:

[16:26] <Geth> ¦ rakudo/nom: Add tests to cover a common NC usage

[16:26] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/64d41ffa11

[16:36] <Geth> ¦ roast: 5f64bc0c6e | (Zoffix Znet)++ | S03-operators/range.t

[16:36] <Geth> ¦ roast: Fix missing `use lib`

[16:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5f64bc0c6e

[16:39] <Geth> ¦ rakudo/nom: 4 commits pushed by (Aleks-Daniel Jakimenko-Aleksejev)++

[16:39] <Geth> ¦ rakudo/nom: 279bae08a5 | Mention corresponding starter in <, <<, « subscripts

[16:39] <Geth> ¦ rakudo/nom: 6542bb8032 | Mention corresponding starter for most of the things

[16:39] <Geth> ¦ rakudo/nom: a462d0a26e | Cache some line numbers

[16:39] <Geth> ¦ rakudo/nom: d22722e496 | Merge pull request #1183 from rakudo/corresponding-starter

[16:39] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/compare/64d41ffa11...d22722e496

[16:43] <Geth> ¦ roast: 85b9380acd | (Zoffix Znet)++ | S02-lexical-conventions/comments.t

[16:43] <Geth> ¦ roast: Remove incorrect test

[16:43] <Geth> ¦ roast:

[16:43] <Geth> ¦ roast: Per samcv++ from https://github.com/perl6/nqp/commit/02a426e0e6

[16:43] <Geth> ¦ roast:

[16:43] <Geth> ¦ roast: Remove support for ornate parenthesis from quoting constructs

[16:43] <Geth> ¦ roast: Reasons:

[16:43] <Geth> ¦ roast: * These are not recognized by Unicode as being brackets

[16:43] <Geth> ¦ roast: <…commit message has 6 more lines…>

[16:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/85b9380acd

[16:43] <Geth> ¦ roast/6.c-errata: d78ab87a65 | (Zoffix Znet)++ | S02-lexical-conventions/comments.t

[16:44] <Geth> ¦ roast/6.c-errata: Remove incorrect test

[16:44] <Geth> ¦ roast/6.c-errata:

[16:44] <Geth> ¦ roast/6.c-errata: Per samcv++ from https://github.com/perl6/nqp/commit/02a426e0e6

[16:44] <Geth> ¦ roast/6.c-errata:

[16:44] <Geth> ¦ roast/6.c-errata: Remove support for ornate parenthesis from quoting constructs

[16:44] <Geth> ¦ roast/6.c-errata: Reasons:

[16:44] <Geth> ¦ roast/6.c-errata: * These are not recognized by Unicode as being brackets

[16:44] <Geth> ¦ roast/6.c-errata: <…commit message has 6 more lines…>

[16:44] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/d78ab87a65

[16:46] <Geth> ¦ rakudo/nom: 9ce896d8bf | (Zoffix Znet)++ | tools/build/NQP_REVISION

[16:46] <Geth> ¦ rakudo/nom: Bump NQP

[16:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9ce896d8bf

[16:46] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.09-59-g60f79d3...2017.09-65-gc38cfe8

[16:55] <Geth> ¦ rakudo/nom: 20518454ef | (Zoffix Znet)++ | src/Perl6/Compiler.nqp

[16:55] <Geth> ¦ rakudo/nom: Update compiler usage message for STDIN eval

[16:55] <Geth> ¦ rakudo/nom:

[16:55] <Geth> ¦ rakudo/nom: Since recently-ish, if STDIN is not a TTY, we've treated STDIN

[16:55] <Geth> ¦ rakudo/nom: as simply a file with code to eval, without starting REPL.

[16:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/20518454ef

[17:04] <Geth> ¦ rakudo/nom: 5c7bbea0a9 | (Zoffix Znet)++ | src/Perl6/Compiler.nqp

[17:04] <Geth> ¦ rakudo/nom: Add --force-stdin-eval-mode opt to usage msg

[17:04] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5c7bbea0a9

[17:06] <RabidGravy> Ah, that very thing there is probably why the fdreopen fd 0 to a listening socket isn't working

[17:07] * Zoffix doubts it

[17:07] <RabidGravy> why?

[17:07] <Zoffix> If you're talking about --force-stdin-eval-mode. That's only used when deciding whether to start the REPL or just eval code from STDIN without REPL machinery

[17:08] <Zoffix> (without the option, this is decided on whether STDIN is a TTY; starting REPL when it is)

[17:08] <RabidGravy> no I'm talking about " if STDIN is not a TTY, we've treated STDIN as simply a file with code to eval"

[17:08] <Zoffix> *based on

[17:08] <Zoffix> RabidGravy: that's only when otherwise we'd start REPL

[17:08] <Zoffix> RabidGravy: if you passed -e '' or gave some file to read code form, this codepath isn't used

[17:09] <RabidGravy> Oh okay

[17:09] <RabidGravy> misunderstanding

[17:12] <moritz> --force-interactive?

[17:13] <moritz> sorry, I wasn't there for the bikeshedding, so I should shut up

[17:13] <Zoffix> moritz: I thought of that originally, but figured if we're adding an option to force REPL on non-TTY displays, may as well add one to force non-interactive mode on TTY displyas

[17:14] <Zoffix> moritz: there wasn't any bikeshedding. I just added it, 'cause I need to fix REPL tests :) If there's a better name we can change it

[17:15] * Zoffix leaves for a quick jam session

[17:19] <RabidGravy> Mmm jam

[17:30] <Zoffix> "--repl-mode" ? The only thing is that suggests the non-interactive stuff still loads REPL.pm but it doesn't

[17:38] <Zoffix> Don't like `--force-stdin-eval-mode` no more

[17:39] <Zoffix> Gonna swap to `--repl-mode` later, unless someone suggests better name

[18:15] <Skarsnik> hm thoughs on https://gist.github.com/Skarsnik/3fc513cbd7875220d2bd021a64286f51

[18:18] <AlexDaniel_> http://q.viva64.com/ # that's kinda a product ad, but fun anyway

[18:19] <travis-ci> Rakudo build passed. Zoffix Znet 'Add --force-stdin-eval-mode opt to usage msg'

[18:19] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/284733899 https://github.com/rakudo/rakudo/compare/20518454ef6b...5c7bbea0a920

[18:26] * [Coke] waves.

[18:26] <Skarsnik> the 5th one is dubious

[18:27] <Skarsnik> A buffer containing private data should be erased before function returns. The memset() function is used for this task, but it is incorrect. As compiler is aware that after calling memset() the 'final' buffer will not be utilized anymore, it is possible that compiler will remove memset() call altogether.

[18:27] <Skarsnik> what can lead a compilater to remove a function call, that make no sense

[18:34] * AlexDaniel_ shrugs

[18:39] <Skarsnik> that the kind of reason I don't like coding in C++

[18:39] <Skarsnik> You need to much of compiler knowledge

[18:52] <timotimo> C and C++ compilers have heavy optimizations regarding memset and friends

[18:52] <timotimo> they will even recognize a for loop that is equivalent to memset and turn it into memset instead

[18:54] <Skarsnik> I wonder what this tool could give on MoarVM Code

[18:55] <timotimo> i think i've done this quiz before

[19:04] <AlexDaniel_> fwiw I gonna kill anybody who merges my last 5 tickets that I've intentionally submitted separately

[19:06] <Zoffix> :o

[19:06] <Skarsnik> it's fail.6lang.org now?

[19:08] <Zoffix> Skarsnik: no, fail.rakudo.org

[19:08] <Zoffix> err

[19:08] <Zoffix> Skarsnik: no, fail.rakudo.party

[19:08] <Zoffix> ZofBot: too many domain names

[19:08] <ZofBot> Zoffix, However, if it is completely empty or consists of a single list, the first element of which is either a hash or a pair, it is executed immediately to compose a "Hash" object

[19:11] <Skarsnik> ZofBot, fail

[19:11] <ZofBot> Skarsnik, It has been argued that "

[19:12] <Skarsnik> ZofBot, RT

[19:12] <ZofBot> Skarsnik, 2 # false, equivalent to 1 <= 2

[19:13] <Skarsnik> what

[19:13] <AlexDaniel_> Skarsnik: it is retarded

[19:16] <Skarsnik> how the gumbo crash perform with the nc-jit call now btw? x)

[19:17] <AlexDaniel_> I haven't tried it, should I?

[19:18] <Skarsnik> probably change nothing

[19:23] <AlexDaniel_> Skarsnik: ok, that's bad

[19:23] <AlexDaniel_> Skarsnik: it's no longer crashing

[19:24] <Skarsnik> hm

[19:24] <AlexDaniel_> but I really don't think that the issue is resolved, so we just masqueraded it

[19:27] <AlexDaniel_> Skarsnik: 50000 iterations and nothing

[19:28] <AlexDaniel_> ok I can bisect it for fun

[19:28] <Geth> ¦ roast: 34577134e0 | TimToady++ | S32-exceptions/misc.t

[19:28] <Geth> ¦ roast: overspecific test disallows eject in correct spot

[19:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/34577134e0

[19:29] <dogbert2> would anyone be terribly upset if I enabled the test mentioned in RT #122951 and then closed the issue with an appropriate comment?

[19:29] <synopsebot> RT#122951 [open]: https://rt.perl.org/Ticket/Display.html?id=122951 [BUG] negative lookahead doesn't LTM properly

[19:30] <AlexDaniel_> dogbert2: does it pass on HEAD?

[19:30] <dogbert2> m: say "abcde" ~~ / ab <![e]> cde | ab.. /

[19:30] <camelia> rakudo-moar 5c7bbe: OUTPUT: «｢abcd｣␤»

[19:32] <dogbert2> wait a sec, it doesn't work does it

[19:32] * dogbert2 must learn the art of reading

[19:34] <Geth> ¦ rakudo/nom: 5747bc7121 | TimToady++ | src/Perl6/Grammar.nqp

[19:34] <Geth> ¦ rakudo/nom: deconfuse statement modifier errors

[19:34] <Geth> ¦ rakudo/nom:

[19:34] <Geth> ¦ rakudo/nom: Catch missing expressions on statement modifiers earlier so that the

[19:34] <Geth> ¦ rakudo/nom: tests eat_terminator are only for statement controls.  Also, move the

[19:34] <Geth> ¦ rakudo/nom: cursor to the front of the cursor controls to indicate where the semicolon

[19:34] <Geth> ¦ rakudo/nom: is actually perceived to be missing if we report that.  Additionally,

[19:35] <Geth> ¦ rakudo/nom: we change the kok check to use .panic instead of .sorry to avoid multiple

[19:35] <Geth> ¦ rakudo/nom: errors resulting from repeated terminator checks that use statement

[19:35] <Geth> ¦ rakudo/nom: modifier keywords for terminators.

[19:35] <Geth> ¦ rakudo/nom:

[19:35] <Geth> ¦ rakudo/nom: Fixes #125596 and #125674.

[19:35] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5747bc7121

[19:35] <synopsebot> RT#125596 [new]: https://rt.perl.org/Ticket/Display.html?id=125596 [LTA] error message with if; and unless; without conditions

[19:35] <synopsebot> RT#125674 [new]: https://rt.perl.org/Ticket/Display.html?id=125674 [LTA] error message prints wrong eject position (if True if { };)

[19:35] <AlexDaniel_> dogbert2: once you learn how to read, please teach me too

[19:35] <dogbert2> :)

[19:36] <dogbert2> anyway, this is not something we can close atm

[19:37] <dogbert2> another one then RT #126415, according to bisectable it was fixed with https://github.com/rakudo/rakudo/commit/d1c2e7649884a48a4733666c1425d8dcb4918120

[19:38] <synopsebot> RT#126415 [new]: https://rt.perl.org/Ticket/Display.html?id=126415 [BUG] WhateverCode loses its mind inside //=

[19:38] <dogbert2> jnthn: added tests for that commit here, https://github.com/perl6/roast/commit/e797f925515ac93f814fa34b6eef291a05fe8a46

[19:38] <dogbert2> but do they really cover the RT

[19:39] <Skarsnik> btw last week I try to look at https://rt.perl.org/Ticket/Display.html?id=127345 but I was not sure where/how to add the code that annotate the instruction with the line (since MoarVM does not get it)

[19:40] <timotimo> dogbert2: fwiw, the output abcd is the correct one for that alteration

[19:41] <timotimo> dogbert2: the negative lookahead isn't declarative, so the longest declarative prefix is 2 letters on the LHS and 4 on the RHS

[19:41] <Geth> ¦ roast: a0b678199c | (Moritz Lenz)++ | S32-num/rat.t

[19:41] <Geth> ¦ roast: RT #126101: Another test for 0.9999...

[19:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a0b678199c

[19:42] <synopsebot> RT#126101 [open]: https://rt.perl.org/Ticket/Display.html?id=126101 [BUG] 0.lotsof9s badly approximated

[19:42] <dogbert2> timotimo: so the report and test is bogus then ?

[19:42] <dogbert2> or did things change between Parrot and Rakudo?

[19:43] <timotimo> whoa

[19:43] <moritz> there is no parrot.

[19:43] <moritz> and chromatic is its prophet.

[19:43] <timotimo> there was a quote from the synopses

[19:43] <timotimo> i did not know about that detail

[19:43] <timotimo> .o( the regex optimizer could throw that match out )

[19:44] <timotimo> (i mean the negative lookahead)

[19:44] <dogbert2> moritz: what do you think about RT #122951, do you cover this in yout new book?

[19:44] <synopsebot> RT#122951 [open]: https://rt.perl.org/Ticket/Display.html?id=122951 [BUG] negative lookahead doesn't LTM properly

[19:45] <moritz> dogbert2: it doesn't go into that much detail on LTM

[19:45] <dogbert2> it was worth a shot :)

[19:45] <moritz> it's suprising how little fits into ~150 pages :/

[19:45] <moritz> but I trust pmichaud's judgement on this one

[19:46] <dogbert2> which means that the problem still exist even though Parrot does not

[19:47] <moritz> it's not as if parrot dictated Rakudo regex semantics at the time this bug was submitted

[19:49] <dogbert2> interesting, I know to little about the history of these things

[19:50] <timotimo> the regex impl was probably pretty much 1:1 ported to jvm and moar

[19:50] <AlexDaniel_> c: HEAD https://gist.githubusercontent.com/AlexDaniel/b5c38b94ad8fb48c7438257a0d1aa43c/raw/c6cfc27491c2ec2cc814ff5cb170da86aad011da/gumbocrash.p6

[19:50] <committable6> AlexDaniel_, Successfully fetched the code from the provided URL.

[19:50] <committable6> AlexDaniel_, ¦HEAD(5747bc7): «0␤MoarVM panic: Internal error: zeroed target thread ID in work pass «exit code = 17»»

[19:50] <AlexDaniel_> Skarsnik: ummmm

[19:51] <timotimo> that's not nice

[19:51] <AlexDaniel_> Skarsnik: I don't know? How come it happens on the first iteration?

[19:51] <dogbert2> is that Gumbo thing still a problem

[19:51] <AlexDaniel_> dogbert2: not entirely sure. locally it works fine but blows up immediately on committable

[19:52] <Skarsnik> does not crash on my vm

[19:52] <AlexDaniel_> actually, maybe the output is cached so we only see 0 but there was more stuff?

[19:52] <dogbert2> which P6 version does c: use?

[19:52] <Skarsnik> but crash on my dedicated 64bits server

[19:52] <AlexDaniel_> dogbert2: HEAD(5747bc7)

[19:53] <Skarsnik> AlexDaniel, did it fail on fetching the website?

[19:53] <AlexDaniel_> Skarsnik: no because it printed 0

[19:53] <AlexDaniel_> hm or… I don't know

[19:54] <AlexDaniel_> timotimo: RT #131003

[19:54] <synopsebot> RT#131003 [open]: https://rt.perl.org/Ticket/Display.html?id=131003 [ANNOYING][SEGV] Heap corruption when using Gumbo

[19:54] <timotimo> i know about this bug :(

[19:54] <timotimo> hm, i wonder if nativecast is involved there

[19:55] <Skarsnik> could be

[19:55] <timotimo> i had some code where i nativecast one kind of CArray or something to another and it proceeded to double-free the backing array

[19:56] <Skarsnik> I had issue trying to replace the nativecast with a typed pointed object and doing unref on it but it corrupted the addre

[19:56] <timotimo> m: use NativeCall; sub doit { my $foo = CArray[int64].new(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); my $bar = nativecast(CArray[int8], $foo); 1 }; for ^100 { doit }

[19:56] <camelia> rakudo-moar 5747bc: ( no output )

[19:56] <timotimo> well, that's not how

[19:57] <timotimo> m: use NativeCall; sub malloc(int32 $size) is native(Str) returns CArray[int8] {*}; sub doit { my $foo = malloc(128); my $bar = nativecast(CArray[int64], $foo); 1 }; for ^100 { doit }

[19:57] <camelia> rakudo-moar 5747bc: ( no output )

[19:57] <timotimo> well, that's not how i guess?

[19:57] <timotimo> m: use nqp; use NativeCall; sub malloc(int32 $size) is native(Str) returns CArray[int8] {*}; sub doit { my $foo = malloc(128); my $bar = nativecast(CArray[int64], $foo); 1 }; for ^100 { doit; nqp::force_gc }

[19:57] <camelia> rakudo-moar 5747bc: ( no output )

[19:57] <timotimo> m: use nqp; use NativeCall; sub doit { my $foo = CArray[int64].new(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); my $bar = nativecast(CArray[int8], $foo); 1 }; for ^100 { doit; nqp::force_gc }

[19:57] <camelia> rakudo-moar 5747bc: ( no output )

[19:58] <AlexDaniel_> hm but it doesn't crash here so I really don't know

[19:59] * AlexDaniel_ wonders if [ANNOYING] should be capitalized as [aNNOYING]

[20:01] <timotimo> don't make it even harder to work on this kind of bug :)

[20:05] <Skarsnik> I wonder if my typered branch of gptrixie still make MoarVM segfault at compile/init time xD

[20:05] <moritz> ‘789’.comb(/ . {say $/} <!> /)'

[20:05] <moritz> m: ‘789’.comb(/ . {say $/} <!> /)'

[20:05] <camelia> rakudo-moar 5747bc: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3‘789’.comb(/ . {say $/} <!> /)7⏏5'␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statement modifier…»

[20:05] <AlexDaniel_> trailing '

[20:05] <moritz> ‘789’.comb(/ . {say $/} <!> /)

[20:05] <moritz> m: ‘789’.comb(/ . {say $/} <!> /)

[20:05] <camelia> rakudo-moar 5747bc: OUTPUT: «｢7｣␤｢8｣␤｢9｣␤»

[20:05] <AlexDaniel_> oh, I remember that

[20:05] <moritz> AlexDaniel_: thanks

[20:05] <moritz> yes, fun one

[20:05] <AlexDaniel_> wasn't it closed?

[20:06] <AlexDaniel_> or is it TESTNEEDED?

[20:06] <moritz> the latter

[20:08] <Geth> ¦ roast: afa1f74636 | (Moritz Lenz)++ | S03-operators/repeat.t

[20:08] <Geth> ¦ roast: RT #121327: tests for scoping bug in xx

[20:08] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/afa1f74636

[20:08] <synopsebot> RT#121327 [open]: https://rt.perl.org/Ticket/Display.html?id=121327 [TESTNEEDED] Scoping bug with `xx`

[20:09] <AlexDaniel_> errr that's not the ticket I was thinking about

[20:11] <AlexDaniel_> right, because it isn't.

[20:11] <AlexDaniel_> nvm

[20:11] <Geth> ¦ roast: 005b4f76f7 | (Moritz Lenz)++ | S32-str/comb.t

[20:11] <Geth> ¦ roast: RT #130186: $/ inside comb

[20:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/005b4f76f7

[20:12] <synopsebot> RT#130186 [new]: https://rt.perl.org/Ticket/Display.html?id=130186 Match object inside .comb is weird (‘789’.comb(/ . {say $/} <!> /))

[20:12] <Skarsnik> releasable6, status

[20:12] <releasable6> Skarsnik, Next release in 13 days and ≈22 hours. 1 blocker. Changelog for this release was not started yet

[20:12] <releasable6> Skarsnik, Details: https://gist.github.com/a2b5146055cf74468593ea4f181faf04

[20:14] <Geth> ¦ rakudo/nom: 5144216f6e | (Elizabeth Mattijsen)++ | 2 files

[20:14] <Geth> ¦ rakudo/nom: Cache types we always need in the CompilerServices

[20:14] <Geth> ¦ rakudo/nom:

[20:14] <Geth> ¦ rakudo/nom: - this appears to make the setting compilation a bit faster

[20:14] <Geth> ¦ rakudo/nom: - but getting timings on that is always difficult :-(

[20:14] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5144216f6e

[20:22] <dogbert2> interesting, the Gumbo example seems to work on my system as well

[20:23] <Skarsnik> test with a previous release maybe?

[20:24] <dogbert2> ok have 2017.07 available

[20:25] <Skarsnik> I use linuxfr.org to test, it crash faster ^^

[20:27] <AlexDaniel_> Skarsnik: still does not crash

[20:28] <Geth> ¦ nqp/jvm_killprocasync: 11ef6ea37d | usev6++ | 10 files

[20:28] <Geth> ¦ nqp/jvm_killprocasync: [jvm] Update stage0 for modified op killprocasync

[20:28] <Geth> ¦ nqp/jvm_killprocasync: review: https://github.com/perl6/nqp/commit/11ef6ea37d

[20:28] <Geth> ¦ nqp/jvm_killprocasync: 7ca352fdf5 | usev6++ | 3 files

[20:28] <Geth> ¦ nqp/jvm_killprocasync: [jvm] Primitive implementation of killprocasync

[20:28] <Geth> ¦ nqp/jvm_killprocasync: review: https://github.com/perl6/nqp/commit/7ca352fdf5

[20:28] <Skarsnik> it does stuff thou?

[20:31] * AlexDaniel_ facepalm

[20:31] <AlexDaniel_> curl: command not found

[20:31] <bartolin> ^^ it would be nice to get a feedback for that branch (jvm_killprocasync). it's rudimentary but it makes "doesn't-hang" usable -- though not with the default wait of 1.5 sec *g*

[20:32] <AlexDaniel_> Skarsnik: OK nevermind, no change, it still crashes

[20:32] <AlexDaniel_> committable6 is right, I'm wrong

[20:33] <Skarsnik> yay?

[20:33] <dogbert2> works with 2017.07 as well and also with linuxfr.org

[20:33] <AlexDaniel_> … yeeeeeeeeeeey… :'(

[20:33] <AlexDaniel_> dogbert2: nope. Can't be. Do you have curl installed?

[20:33] <dogbert2> yes

[20:33] <AlexDaniel_> dogbert2: or do you have 32-bit system?

[20:33] <dogbert2> and yes :)

[20:34] <dogbert2> have you tried disabling the jit?

[20:34] <AlexDaniel_> ok, that we knew already… yeeeey… :'(

[20:34] <Geth> ¦ rakudo/nom: a09f5f2194 | (Elizabeth Mattijsen)++ | 4 files

[20:34] <Geth> ¦ rakudo/nom: Set up Builtin encodings at setting compile time

[20:34] <Geth> ¦ rakudo/nom:

[20:34] <Geth> ¦ rakudo/nom: - so we don't need to do this each time on startup

[20:34] <Geth> ¦ rakudo/nom: - only saves maybe 1 msec of startup

[20:34] <Geth> ¦ rakudo/nom: - but it makes future optimizations opening STDIN/OUT/ERR easier

[20:34] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a09f5f2194

[20:34] <Skarsnik> it's an old crash

[20:34] <bartolin> .tell jnthn if you have a few minutes to look at my try to implement killprocasync on jvm: https://github.com/perl6/nqp/tree/jvm_killprocasync -- when you stubbed the op, you planned to return $RT_OBJ. do you remember what you expected the op to return?

[20:34] <yoleaux> bartolin: I'll pass your message to jnthn.

[20:34] <AlexDaniel_> dogbert2: yea, doesn't help

[20:35] <dogbert2> annoying

[20:35] <Skarsnik> I should have a closer look at the bt of other threads

[20:35] <Skarsnik> for this

[20:44] <dogbert2> I can get it to fail, if run under valgrind with MVM_SPESH_BLOCKING=1

[20:44] <Skarsnik> interesting

[20:45] <Geth> ¦ roast: 31506095f1 | usev6++ | 2 files

[20:45] <Geth> ¦ roast: [jvm] Update fudge messages: killprocasync NYI

[20:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/31506095f1

[20:46] <dogbert2> but it won't fail outside valgrind with that same flag set, odd

[20:47] <Skarsnik> for me it does not crash with efence before filling the whole memory x)

[20:47] <Skarsnik> same with valgrind

[20:48] <AlexDaniel_> … and people argue whether [ANNOYING] tag is needed…

[20:49] <Skarsnik> [Alexdanielable]

[20:53] <Geth> ¦ rakudo/nom: c7a82d451d | usev6++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | src/Perl6/Grammar.nqp

[20:53] <Geth> ¦ rakudo/nom: Try harder to diagnose problem

[20:53] <Geth> ¦ rakudo/nom:

[20:53] <Geth> ¦ rakudo/nom: instead of reporting 'Malformed my'

[20:53] <Geth> ¦ rakudo/nom:

[20:53] <Geth> ¦ rakudo/nom: Fixes RT #125902

[20:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c7a82d451d

[20:53] <synopsebot> RT#125902 [open]: https://rt.perl.org/Ticket/Display.html?id=125902 [LTA] error message “Type 'Str' is not declared” (my Str where 'foo' $test;)

[21:58] <Geth> ¦ rakudo/nom: ac97a40161 | (Aleks-Daniel Jakimenko-Aleksejev)++ | src/Perl6/Grammar.nqp

[21:58] <Geth> ¦ rakudo/nom: Fix complaints about existing types

[21:58] <Geth> ¦ rakudo/nom:

[21:58] <Geth> ¦ rakudo/nom: Call typo_typename only if <typename> or <value> failed, not if

[21:58] <Geth> ¦ rakudo/nom: something else went wrong.

[21:58] <Geth> ¦ rakudo/nom:

[21:58] <Geth> ¦ rakudo/nom: Resolves ½ of RT #127100.

[21:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ac97a40161

[21:58] <synopsebot> RT#127100 [new]: https://rt.perl.org/Ticket/Display.html?id=127100 [LTA] error message when specifying return type before parameters ( --> Bool, Int $x, Int $y )

[22:12] <Geth> ¦ rakudo/nom: bb5583aeb7 | (Elizabeth Mattijsen)++ | src/core/io_operators.pm

[22:12] <Geth> ¦ rakudo/nom: Streamline initialization of $*IN/$*OUT/$*ERR

[22:12] <Geth> ¦ rakudo/nom:

[22:12] <Geth> ¦ rakudo/nom: - do as much as possible during setting compilation

[22:12] <Geth> ¦ rakudo/nom: - only plug in the handle/encoder/decoder at runtime

[22:12] <Geth> ¦ rakudo/nom: - shaves off about 1.5% from bare startup time

[22:12] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bb5583aeb7

[22:36] <Geth> ¦ rakudo: dwarring++ created pull request #1186: implement typed pointer increment and array dereference salortiz++

[22:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1186

[22:41] <travis-ci> Rakudo build errored. Zoffix Znet 'Merge pull request #1185 from jonathanstowe/nom

[22:41] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/284721668 https://github.com/rakudo/rakudo/compare/5f6896bde81d...64d41ffa1104

[22:41] <buggable> [travis build above] ✓ All failures are due to: missing build log (1 failure).

[22:49] <Geth> ¦ rakudo/nom: 64b001a146 | (Aleks-Daniel Jakimenko-Aleksejev)++ | src/Perl6/Grammar.nqp

[22:49] <Geth> ¦ rakudo/nom: Awesome error message for RT #127100

[22:49] <Geth> ¦ rakudo/nom:

[22:49] <Geth> ¦ rakudo/nom: If you can do this:

[22:49] <Geth> ¦ rakudo/nom:

[22:49] <Geth> ¦ rakudo/nom:     sub foo($x, --> 42) {}

[22:49] <Geth> ¦ rakudo/nom:

[22:49] <Geth> ¦ rakudo/nom: Then why not this?

[22:49] <Geth> ¦ rakudo/nom: <…commit message has 6 more lines…>

[22:49] <synopsebot> RT#127100 [new]: https://rt.perl.org/Ticket/Display.html?id=127100 [LTA] error message when specifying return type before parameters ( --> Bool, Int $x, Int $y )

[22:49] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/64b001a146

[23:02] <buggable> New CPAN upload: Config/Perl6/Config-1.2.1.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/Config/Perl6/Config-1.2.1.tar.gz

[23:02] <buggable> New CPAN upload: Config-Parser-toml/Perl6/Config-Parser-toml-1.0.0.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/Config-Parser-toml/Perl6/Config-Parser-toml-1.0.0.tar.gz

[23:02] <buggable> New CPAN upload: Config-Parser-yaml/Perl6/Config-Parser-yaml-1.0.0.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/Config-Parser-yaml/Perl6/Config-Parser-yaml-1.0.0.tar.gz

[23:02] <buggable> New CPAN upload: Hash-Merge/Perl6/Hash-Merge-0.1.0.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/Hash-Merge/Perl6/Hash-Merge-0.1.0.tar.gz

[23:02] <buggable> New CPAN upload: MDP-Client/Perl6/MPD-Client-0.1.2.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/MDP-Client/Perl6/MPD-Client-0.1.2.tar.gz

[23:43] <Geth> ¦ nqp: 943f7f757c | (Zoffix Znet)++ | src/HLL/Compiler.nqp

[23:43] <Geth> ¦ nqp: Rename `--force-stdin-eval-mode` command line opt

[23:43] <Geth> ¦ nqp:

[23:43] <Geth> ¦ nqp: To `--repl-mode`

[23:43] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/943f7f757c

[23:44] <Geth> ¦ rakudo/nom: 93e599dbf2 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[23:44] <Geth> ¦ rakudo/nom: Bump NQP

[23:44] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/93e599dbf2

[23:44] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.09-65-gc38cfe8...2017.09-66-g943f7f7

[23:44] <Geth> ¦ rakudo/nom: de0533c4d4 | (Zoffix Znet)++ | src/Perl6/Compiler.nqp

[23:44] <Geth> ¦ rakudo/nom: Update compiler usage message

[23:44] <Geth> ¦ rakudo/nom:

[23:44] <Geth> ¦ rakudo/nom: To incorporate renaming of `--force-stdin-eval-mode` command line

[23:44] <Geth> ¦ rakudo/nom: opt to `--repl-mode`

[23:44] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/de0533c4d4

[23:45] <Geth> ¦ rakudo/full-make-test: 19 commits pushed by (Aleks-Daniel Jakimenko-Aleksejev)++, (Zoffix Znet)++, (Timo Paulssen)++, (Jonathan Stowe)++, TimToady++, (Elizabeth Mattijsen)++, usev6++

[23:45] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/compare/78eca2141d...87dc51f514

[23:57] <travis-ci> NQP build failed. Zoffix Znet 'Rename `--force-stdin-eval-mode` command line opt

[23:57] <travis-ci> https://travis-ci.org/perl6/nqp/builds/284860386 https://github.com/perl6/nqp/compare/c38cfe87f54e...943f7f757c9b
