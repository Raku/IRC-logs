[01:09] <japhb> samcv: Even if you get a grant, consider starting the application/interview process at any companies you are interested in, because some of them have long hiring cycles.  Like 6-12 weeks sometimes.

[01:09] <samcv> yeah for sure

[01:39] <brokenchicken> m: .[0.. .first(:k, {$_ == 5})].say with (^20)

[01:39] <camelia> rakudo-moar e5ca5c: OUTPUT«(0 1 2 3 4 5)␤»

[01:40] <brokenchicken> m: .[.first(:k, {$_ == 5})..*].say with (^20)

[01:40] <camelia> rakudo-moar e5ca5c: OUTPUT«(5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)␤»

[01:41] <brokenchicken> .tell b2gills seems we already have the exclude-while/includewhile (https://irclog.perlgeek.de/perl6-dev/2017-01-25#i_13983469 ) that are sufficiently short to type given they aren't an oftused feature. You'd have to check each element anyway, so you don't get the benefit of free skipping with them, like .skip()

[01:41] <yoleaux2> brokenchicken: I'll pass your message to b2gills.

[01:41] <brokenchicken> m: say &skip

[01:41] <camelia> rakudo-moar e5ca5c: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    skip used at line 1. Did you mean 'slip'?␤␤»

[01:42] <brokenchicken> m: use Test; say &skip

[01:42] <camelia> rakudo-moar e5ca5c: OUTPUT«sub skip (;; Mu | is raw) { #`(Sub|72674896) ... }␤»

[01:43] * brokenchicken whispers: "stop added things"

[01:45] <brokenchicken> And yes, I'm a hipocrite, because I added .parse-base, BAIL-OUT, and DateTime infix:<->

[01:45] <brokenchicken> :)

[01:53] <b2gills> m: .[0.. .first(:k, {$_ == 5})].say with (^20).lazy

[01:53] <camelia> rakudo-moar e5ca5c: OUTPUT«This Seq has already been iterated, and its values consumed␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[01:53] <brokenchicken> :(

[01:54] <b2gills> m: say ^20 .map: { $_ == 5 ?? last() !! $_ }

[01:54] <camelia> rakudo-moar e5ca5c: OUTPUT«(0 1 2 3 4)␤»

[01:56] <brokenchicken> hm, why didn't the robot deliver the message?

[01:59] <b2gills> Your incorrectly assuming it didn't

[01:59] <brokenchicken> .tell Zoffix orly

[01:59] <yoleaux2> brokenchicken: I'll pass your message to Zoffix.

[02:00] <brokenchicken> Ah. Didn't know it can take /msg

[02:01] <MasterDuke> brokenchicken: btw, here are the results of a --profile-compile of a rakudo build: https://gist.github.com/MasterDuke17/7723025658833476d5f312805c3274b5

[02:02] <MasterDuke> i used the SQL output option and sqlite to read/query it

[09:54] <|Tux|> This is Rakudo version 2017.01-45-ge5ca5c278 built on MoarVM version 2017.01-10-g76872dbe

[09:54] <|Tux|> csv-ip5xs        2.776

[09:54] <|Tux|> test            12.533

[09:54] <|Tux|> test-t           4.993

[09:54] <|Tux|> csv-parser      13.855

[10:49] <Geth> nqp: c2871d7c21 | (Jonathan Worthington)++ | tools/build/MOAR_REVISION

[10:49] <Geth> nqp: Bump MOAR_REVISION for a leak fix.

[10:49] <Geth> nqp: review: https://github.com/perl6/nqp/commit/c2871d7c21

[10:49] <Geth> nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.01...2017.01-10-g76872db

[11:00] <Geth> rakudo/nom: 483e4fd2f7 | (Jonathan Worthington)++ | tools/build/NQP_REVISION

[11:00] <Geth> rakudo/nom: Get latest MoarVM, with a leak fix.

[11:00] <Geth> rakudo/nom:

[11:00] <Geth> rakudo/nom: * Fix a leak of asynchronous task handles, which affected programs

[11:00] <Geth> rakudo/nom:   using Proc::Async and IO::Socket::Async.

[11:00] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/483e4fd2f7

[11:00] <Geth> rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.01-10-ged1b835...2017.01-14-gc2871d7

[11:19] <Geth> rakudo/nonblocking-await: 3d4ae23218 | (Jonathan Worthington)++ | 6 files

[11:19] <Geth> rakudo/nonblocking-await: Stub in the `Awaitable` role.

[11:19] <Geth> rakudo/nonblocking-await:

[11:19] <Geth> rakudo/nonblocking-await: For now, just a marker role for things that we can `await`. Later, it

[11:19] <Geth> rakudo/nonblocking-await: it will require a method for subscribing a resumption.

[11:19] <Geth> rakudo/nonblocking-await: review: https://github.com/rakudo/rakudo/commit/3d4ae23218

[11:19] <Geth> rakudo/nonblocking-await: 9044fcac38 | (Stefan Seifert)++ | 10 files

[11:19] <Geth> rakudo/nonblocking-await: First attempt at adding a CORE.d setting

[11:19] <Geth> rakudo/nonblocking-await:

[11:19] <Geth> rakudo/nonblocking-await: Patch by nine++ cherry-picked and updated to build/work on HEAD.

[11:19] <Geth> rakudo/nonblocking-await: review: https://github.com/rakudo/rakudo/commit/9044fcac38

[11:19] <Geth> rakudo/nonblocking-await: 6901df36ac | (Jonathan Worthington)++ | 10 files

[11:19] <Geth> rakudo/nonblocking-await: Start sketching out new `await` implementation.

[11:19] <Geth> rakudo/nonblocking-await:

[11:19] <Geth> rakudo/nonblocking-await: This does not yet support non-blocking `await`, but the factoring is

[11:19] <Geth> rakudo/nonblocking-await: designed to enable it to be put in place. For now, only Promise has

[11:19] <Geth> rakudo/nonblocking-await: been updated to support `await` under the new factoring, and only a

[11:19] <Geth> rakudo/nonblocking-await: single result may be `await`ed.

[11:19] <Geth> rakudo/nonblocking-await: review: https://github.com/rakudo/rakudo/commit/6901df36ac

[11:19] <jnthn> Just a rebase of existing work so I don't get dodgy tests :)

[11:19] <jnthn> Or rather, can see what I'm actually breaking :)

[11:20] <Geth> nqp/robust_dentin_dentout: 0e8d180c56 | (Timo Paulssen)++ | src/QRegex/NFA.nqp

[11:20] <Geth> nqp/robust_dentin_dentout: make nfa debugger resistant to negative indents

[11:20] <Geth> nqp/robust_dentin_dentout:

[11:20] <Geth> nqp/robust_dentin_dentout: in at least one case $ind reached far into the negatives, and

[11:20] <Geth> nqp/robust_dentin_dentout: before this patch it'd just straight-up crash during debug output.

[11:20] <Geth> nqp/robust_dentin_dentout: review: https://github.com/perl6/nqp/commit/0e8d180c56

[11:20] <Geth> nqp: timo++ created pull request #344: make nfa debugger resistant to negative indents

[11:20] <Geth> nqp: review: https://github.com/perl6/nqp/pull/344

[11:30] <lizmat> Files=1166, Tests=56206, 183 wallclock secs (10.90 usr  4.47 sys + 1100.83 cusr 108.08 csys = 1224.28 CPU)

[12:05] <Geth> rakudo/nonblocking-await: 7d1f409636 | (Jonathan Worthington)++ | src/core/Awaiter.pm

[12:05] <Geth> rakudo/nonblocking-await: Initial blocking `await-all` implementation.

[12:05] <Geth> rakudo/nonblocking-await: review: https://github.com/rakudo/rakudo/commit/7d1f409636

[12:40] <lizmat> Q: do we consider testing iterators something we should do in roast ?

[12:41] <lizmat> the other day I ran into a problem where my @a = foo  would work ok, but for foo { } did not

[12:41] <lizmat> and that was because there was a bug in the pull-one implementation, but not in the push-all implementation

[12:42] <lizmat> so I'm considering adding tests for all iterator methods on iterators obtained from list / array / map / hash / typed hash / native arrays / baggy / mixy / setty

[12:56] <jnthn> lizmat: The Iterator API is something I consider public/part of the language, so it's reasonable for those to get roasted

[12:57] <lizmat> ok, firing up the barbeque  :-)

[12:58] <lizmat> jnthn: given an existing hash, are we guaranteed the same order of keys for every nqp::iterator in the future ?

[12:58] <jnthn> No

[12:59] <lizmat> note: I'm talking about a single instantiated object

[12:59] <jnthn> Ah, and so in a single process

[12:59] <lizmat> not about the same keys / values

[12:59] <lizmat> yes

[12:59] <jnthn> If you don't modify it at all

[12:59] <lizmat> indeed

[12:59] <jnthn> Then very probably yes

[12:59] <jnthn> But...

[12:59] <jnthn> Hm

[12:59] <jnthn> Actually "maybe not"

[12:59] <lizmat> ah ?

[13:00] <jnthn> If we were to implement robin hood hashing, which moves stuff around on lookups, we might change that?

[13:00] <lizmat> ok, so I can't depend on it

[13:01] <lizmat> ok, will make testing slightly more troublesome

[13:01] <lizmat> but there you go  :-)

[13:01] <jnthn> ah no, just looked it up

[13:01] <jnthn> I mis-remembered exactly what happens

[13:02] <jnthn> I think based on http://codecapsule.com/2013/11/11/robin-hood-hashing/ that we don't permute on lookup

[13:05] <lizmat> ok, then I'll assume same order

[13:05] <lizmat> and when not, we will need to fix the tests

[13:05] <jnthn> Yeah, as long as no mutation, I think you can.

[13:05] <lizmat> oki!

[13:06] <jnthn> Even with the various hashing changes we'll likely make

[13:24] <Geth> rakudo/nonblocking-await: 6fa4f9d608 | (Jonathan Worthington)++ | src/core/Supply.pm

[13:24] <Geth> rakudo/nonblocking-await: Implement get-await-handle for Supply.

[13:24] <Geth> rakudo/nonblocking-await: review: https://github.com/rakudo/rakudo/commit/6fa4f9d608

[13:26] <Geth> nqp: 7cbefd9003 | (Samantha McVey)++ | tools/build/MOAR_REVISION

[13:26] <Geth> nqp: Bump Moar to pull in Unicode name/sequence name improvements.

[13:26] <Geth> nqp:

[13:26] <Geth> nqp: Make getting Uni seq/cp's case insensitive and add seq from NamedSequences.txt

[13:26] <Geth> nqp:

[13:26] <Geth> nqp: https://github.com/MoarVM/MoarVM/compare/76872db...50c87ce

[13:26] <Geth> nqp: review: https://github.com/perl6/nqp/commit/7cbefd9003

[13:26] <Geth> nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.01-10-g76872db...2017.01-13-g4aab5064

[13:27] <samcv> \o/

[13:29] <brokenchicken> m: "\c[couple with heart]".say

[13:29] <yoleaux2> 02:01Z <diakopter> brokenchicken: oyoy

[13:29] <camelia> rakudo-moar 483e4f: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized character name [couple with heart]␤at <tmp>:1␤------> 3"\c[couple with heart7⏏5]".say␤»

[13:29] <brokenchicken> m: "\c[family]".say

[13:29] <camelia> rakudo-moar 483e4f: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Unrecognized character name [family]␤at <tmp>:1␤------> 3"\c[family7⏏5]".say␤»

[13:29] <brokenchicken> diakopter: oyoy what?

[13:30] <Geth> rakudo/nom: 3a774066d5 | (Samantha McVey)++ | tools/build/NQP_REVISION

[13:30] <Geth> rakudo/nom: Bump Moar to pull in Unicode name/sequence name improvements.

[13:30] <Geth> rakudo/nom:

[13:30] <Geth> rakudo/nom: Make getting Uni seq/cp's case insensitive and add seq from NamedSequences.txt

[13:30] <Geth> rakudo/nom: https://github.com/MoarVM/MoarVM/compare/76872db...50c87ce

[13:30] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3a774066d5

[13:30] <Geth> rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.01-14-gc2871d7...2017.01-15-g7cbefd90

[13:30] <samcv> \o/

[13:31] <Geth> rakudo/nom: cca24d8cc3 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[13:31] <Geth> rakudo/nom: Make sure R:It.ReifiedList.skip-one returns correct value

[13:31] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cca24d8cc3

[13:45] <jnthn> Yowser, the await-handle impl for channel is some fun

[14:05] <Geth> rakudo/nonblocking-await: 4d8c32a3f4 | (Jonathan Worthington)++ | src/core/Supply.pm

[14:05] <Geth> rakudo/nonblocking-await: Don't generate an unrequired accessor.

[14:05] <Geth> rakudo/nonblocking-await: review: https://github.com/rakudo/rakudo/commit/4d8c32a3f4

[14:05] <Geth> rakudo/nonblocking-await: 0bb2dbc0ae | (Jonathan Worthington)++ | src/core/Channel.pm

[14:05] <Geth> rakudo/nonblocking-await: Implement get-await-handle for Channel.

[14:05] <Geth> rakudo/nonblocking-await: review: https://github.com/rakudo/rakudo/commit/0bb2dbc0ae

[14:30] <jnthn> Righty, time for fun with continuations...

[14:49] <Geth> rakudo/nom: 3a77cb5519 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[14:49] <Geth> rakudo/nom: Fix R:It:Mappy.skip-one

[14:49] <Geth> rakudo/nom:

[14:49] <Geth> rakudo/nom: It had an off-by-one issue about indicating the end of an iterator

[14:49] <Geth> rakudo/nom: Spotted by writing iterator tests for hashes.

[14:49] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3a77cb5519

[15:04] <Woodi> [6~[5~[6~[6~[5~[5~[6~[6~

[15:05] <brokenchicken> m: say ?6~?5~?6~?6~?5~?5~?6~?6

[15:05] <camelia> rakudo-moar cca24d: OUTPUT«TrueTrueTrueTrueTrueTrueTrueTrue␤»

[15:08] <Woodi> sorry...

[15:08] <brokenchicken> We'll never forgive you!

[15:21] <jnthn> Woo, I can now do sleepsort using `await` for 100 values, and it Works Just Fine

[15:21] <jnthn> Now for the trickier await-all

[15:25] <brokenchicken> lizmat: fwiw, protos don't get auto-created for tokens and you can't put stuff other than * in them: RE: http://stackoverflow.com/questions/41769177/why-would-you-use-a-proto-rule-in-a-perl-6-grammar

[15:25] <brokenchicken> m: grammar { token TOP { <foo> }; token foo:sym<meow> {meow}; token foo:sym<moo> {moo} }.parse: "meow"

[15:25] <camelia> rakudo-moar 3a77cb: OUTPUT«No such method 'foo' for invocant of type '<anon|65049920>'␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[15:25] <brokenchicken> m: grammar { token TOP { <foo> }; proto token foo {"." *}; token foo:sym<meow> {meow}; token foo:sym<moo> {moo} }.parse: "meow"

[15:25] <camelia> rakudo-moar 3a77cb: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Proto regex body must be {*} (or <*> or <...>, which are deprecated)␤at <tmp>:1␤------> 3mmar { token TOP { <foo> }; proto token 7⏏5foo {"." *}; token foo:sym<meow> {meow};␤»

[15:25] <brokenchicken> m: grammar { token TOP { <foo> }; proto token foo {*}; token foo:sym<meow> {meow}; token foo:sym<moo> {moo} }.parse: "meow"

[15:25] <camelia> rakudo-moar 3a77cb: ( no output )

[15:26] <lizmat> brokenchicken: ah, I was extrapolating from subs/methods  :-(

[15:26] <lizmat> please correct me on SO  :-)

[15:27] <brokenchicken> Wonder if there's a barrier for them being auto-made

[15:29] <lizmat> m: my %h{Any} = a => 42, b => 666; my $i = %h.kv.iterator; dd $i.skip-at-least(3); dd $i.pull-one   # bug

[15:29] <camelia> rakudo-moar 3a77cb: OUTPUT«1␤(666, 1)␤»

[15:30] <lizmat> found with new iterator tests

[15:36] <brokenchicken> \o/

[15:36] <brokenchicken> tests++

[15:36] <Geth> rakudo/nom: e7ea4c291c | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[15:36] <Geth> rakudo/nom: Fix issue with R:It.Mappy-kv-from-pairs.skip-one

[15:36] <Geth> rakudo/nom:

[15:36] <Geth> rakudo/nom: Spotted with new Hash.iterator tests

[15:36] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e7ea4c291c

[15:49] <Geth> roast: 15e3d6905a | (Elizabeth Mattijsen)++ | S32-hash/iterator.t

[15:49] <Geth> roast: Initial set of Hash.iterator tests

[15:49] <Geth> roast: review: https://github.com/perl6/roast/commit/15e3d6905a

[15:51] <Geth> rakudo/nom: 608049f711 | (Elizabeth Mattijsen)++ | t/spectest.data

[15:51] <Geth> rakudo/nom: Add Hash.iterator tests

[15:51] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/608049f711

[15:51] <lizmat> afk&

[16:03] <brokenchicken> damn, made a boo-boo in changelog pre-release :/

[16:03] <brokenchicken> .oO( I need a changelog-making robot... )

[16:04] <Geth> rakudo/nom: 42a1effb95 | (Zoffix Znet)++ | docs/ChangeLog

[16:04] <Geth> rakudo/nom: Move change incorrectly logged for 2016.12 instead of 2017.01

[16:04] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/42a1effb95

[16:16] <Geth> rakudo/nonblocking-await: 94bfd71f32 | (Jonathan Worthington)++ | src/core/ThreadPoolScheduler.pm

[16:16] <Geth> rakudo/nonblocking-await: Implement ThreadPoolScheduler non-blocking await.

[16:16] <Geth> rakudo/nonblocking-await:

[16:16] <Geth> rakudo/nonblocking-await: Now, if we do an `await` in code being run in the thread pool, and the

[16:16] <Geth> rakudo/nonblocking-await: awaited value(s) are not yet available, we take a continuation. This

[16:16] <Geth> rakudo/nonblocking-await: frees up the thread to process more work from the thread pool. When

[16:16] <Geth> rakudo/nonblocking-await: all of the awaited results are available, or the production of one of

[16:16] <Geth> rakudo/nonblocking-await: them produces an exception, then the resumption of the continuation

[16:16] <Geth> rakudo/nonblocking-await: will be scheduled in the thread pool.

[16:16] <Geth> rakudo/nonblocking-await:

[16:16] <Geth> rakudo/nonblocking-await: This behavior will only happen if you say `use v6.d.PREVIEW`.

[16:16] <Geth> rakudo/nonblocking-await: review: https://github.com/rakudo/rakudo/commit/94bfd71f32

[16:17] <[Coke]> jnthn: where is "only happens in 6.d.PREVIEW logic for that commit?"

[16:17] * [Coke] misquotes.

[16:17] <jnthn> It isn't

[16:18] <jnthn> https://github.com/rakudo/rakudo/blob/nonblocking-await/src/core.d/await.pm

[16:18] <jnthn> It's in there

[16:19] <jnthn> If you don't use v6.d.PREVIEW, then you get the original `await` implementations, which block.

[16:19] <jnthn> Rather than using the $*AWAITER mechanism.

[16:19] <[Coke]> danke.

[16:19] <jnthn> bitte :)

[16:22] <jnthn> Now to write a bunch of decent tests for this

[16:24] <jnthn> Actually, I need a break first :)

[17:56] <Geth> nqp/master: 10 commits pushed by pmurias++

[17:56] <Geth> nqp/master: review: https://github.com/perl6/nqp/compare/7cbefd9003...cad861b162

[18:05] <Geth> rakudo/nonblocking-await: 658958e284 | (Jonathan Worthington)++ | src/core/Promise.pm

[18:05] <Geth> rakudo/nonblocking-await: Fix thinko in Promise.get-await-handle.

[18:05] <Geth> rakudo/nonblocking-await: review: https://github.com/rakudo/rakudo/commit/658958e284

[18:06] <TimToady> m: grammar { token TOP { <foo> }; proto token foo {"." {*}}; token foo:sym<meow> {meow}; token foo:sym<moo> {moo} }.parse: "meow"

[18:06] <camelia> rakudo-moar 42a1ef: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Proto regex body must be {*} (or <*> or <...>, which are deprecated)␤at <tmp>:1␤------> 3mmar { token TOP { <foo> }; proto token 7⏏5foo {"." {*}}; token foo:sym<meow> {meow␤»

[18:06] <TimToady> brokenchicken: it would have to be written like ^^^, but NYI

[18:06] <brokenchicken> Ah

[18:06] <TimToady> but {*} is unambiguous inside regex as well as mainline braid

[18:06] <Geth> rakudo/js: ab7cf8edde | (Pawel Murias)++ | src/vm/js/Perl6/Ops.nqp

[18:06] <Geth> rakudo/js: [js] Refactor nqp::p6trialbind to have it implemented the same way as similiar ops.

[18:06] <Geth> rakudo/js: review: https://github.com/rakudo/rakudo/commit/ab7cf8edde

[18:06] <Geth> rakudo/js: c820894ecd | (Pawel Murias)++ | src/vm/js/Perl6/Ops.nqp

[18:06] <Geth> rakudo/js: [js] Implement nqp::p6captosig.

[18:06] <Geth> rakudo/js: review: https://github.com/rakudo/rakudo/commit/c820894ecd

[18:06] <Geth> rakudo/js: 105268eab6 | (Pawel Murias)++ | src/vm/js/perl6-runtime/runtime.js

[18:06] <Geth> rakudo/js: [js] Adapt to nqp::istype changes.

[18:07] <Geth> rakudo/js: review: https://github.com/rakudo/rakudo/commit/105268eab6

[18:10] <Geth> roast: d6711ed343 | (Jonathan Worthington)++ | S17-promise/nonblocking-await.t

[18:10] <Geth> roast: Some initial tests for non-blocking `await`.

[18:10] <Geth> roast: review: https://github.com/perl6/roast/commit/d6711ed343

[18:10] <jnthn> (Which, after fixing my silly Promise thinko, now all pass)

[19:42] <Geth> rakudo/nonblocking-await: d088e0e0ad | (Jonathan Worthington)++ | 2 files

[19:42] <Geth> rakudo/nonblocking-await: Fix await-all: $remaining shouldn't go negative.

[19:42] <Geth> rakudo/nonblocking-await:

[19:42] <Geth> rakudo/nonblocking-await: Avoids some wasteful work as well as fixing a race.

[19:42] <Geth> rakudo/nonblocking-await: review: https://github.com/rakudo/rakudo/commit/d088e0e0ad

[19:42] <Geth> roast: c8e03430df | (Jonathan Worthington)++ | S17-promise/nonblocking-await.t

[19:42] <Geth> roast: Further non-blocking await tests.

[19:42] <Geth> roast:

[19:42] <Geth> roast: Covers supplies, channels, and error handling.

[19:42] <Geth> roast: review: https://github.com/perl6/roast/commit/c8e03430df

[19:49] <Geth> rakudo/nonblocking-await: aecbd60017 | (Jonathan Worthington)++ | t/spectest.data

[19:49] <Geth> rakudo/nonblocking-await: Run S17-supply/nonblocking-await.t.

[19:49] <Geth> rakudo/nonblocking-await: review: https://github.com/rakudo/rakudo/commit/aecbd60017

[19:51] <brokenchicken> huggable: 6.d tests :is: https://github.com/rakudo/rakudo/commit/aecbd60017

[19:51] <huggable> brokenchicken, Added 6.d tests as https://github.com/rakudo/rakudo/commit/aecbd60017

[19:51] <brokenchicken> hmm

[19:52] <brokenchicken> Wait, how will this work. (once I stop being lazy) We'll add t/spectest.data-6.c for 6.c tests. t/spectest.data would be for `master` roast branch, and t/spectest.data-6.d would be for 6.d tests

[19:53] <brokenchicken> but 6.d tests would not pass on master, because we're making master still be the stuff the current (6.c) rakudo does

[19:54] <brokenchicken> Or we stick em all in master and have a skip thing to skip the test file if compiler can't do 6.d

[19:55] <brokenchicken> oh ok, so nom will be able to do 6.d.PREVIEW... never mind me then :)

[20:03] <Geth> rakudo: jnthn++ created pull request #1004: Initial implementation of non-blocking await for 6.d.PREVIEW

[20:03] <Geth> rakudo: review: https://github.com/rakudo/rakudo/pull/1004

[20:04] <brokenchicken> w00t

[20:04] <brokenchicken> m: use 6.d.PREVIEW

[20:04] <camelia> rakudo-moar 42a1ef: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    use used at line 1␤␤»

[20:04] <brokenchicken> heh

[20:05] <jnthn> Review welcome, especially from those in-the-known on concurrency stuff

[20:09] <jnthn> fwiw, it's use v6.d.PREVIEW

[20:09] <jnthn> afk for a bit :)

[20:19] <Geth> rakudo/nom: aecbb3efc6 | (Elizabeth Mattijsen)++ | 4 files

[20:19] <Geth> rakudo/nom: Fix count-only on all Hash based .kv methods

[20:19] <Geth> rakudo/nom:

[20:19] <Geth> rakudo/nom: The count-only provided by R:It:Mappy was only giving half of the

[20:19] <Geth> rakudo/nom: actual value for .kv methods.  Spotted by additional iterator testing.

[20:19] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aecbb3efc6

[20:19] <brokenchicken> sweet

[20:21] <Geth> roast: e9d91b90c4 | (Elizabeth Mattijsen)++ | S32-hash/iterator.t

[20:21] <Geth> roast: Add tests for Hash.iterator.count-only/bool-only

[20:21] <Geth> roast: review: https://github.com/perl6/roast/commit/e9d91b90c4

[20:49] * brokenchicken wonders how to get in-the-known on concurrency stuff

[20:49] <brokenchicken> Is there a club?

[20:49] <moritz> there's a subscription, 40USD a month

[20:50] <brokenchicken> hehe, steep!

[20:51] * moritz is only familiar with the very high-level concurrency stuff

[20:52] <Geth> rakudo/nom: ec5dad5e29 | (Elizabeth Mattijsen)++ | src/core/Capture.pm

[20:52] <Geth> rakudo/nom: Give Capture.list the same logic as Capture.hash

[20:52] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ec5dad5e29

[20:52] <Geth> rakudo/nom: 49e2d40a43 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[20:52] <Geth> rakudo/nom: Introducing R:It.Mappy-keys

[20:52] <Geth> rakudo/nom:

[20:52] <Geth> rakudo/nom: Abstracting the Map.keys functionality.

[20:52] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/49e2d40a43

[21:46] <Geth> rakudo/nom: 0ad05ce31c | (Elizabeth Mattijsen)++ | src/core/List.pm

[21:46] <Geth> rakudo/nom: Make List.keys on lazy lists a bit faster

[21:46] <Geth> rakudo/nom:

[21:46] <Geth> rakudo/nom: By using R:It.Callable and a lexical int, instead of a .values.map

[21:46] <Geth> rakudo/nom: and a state variable.

[21:46] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0ad05ce31c

[22:13] <lizmat> good night, #perl6-dev!

[22:16] <brokenchicken> night
