[00:46] <MasterDuke> IOninja: re Signature.$!count, pretty sure i tried to make that an Int, but the possibility of being an Inf prevented it

[00:48] <MasterDuke> i think there was even some discussion here about it (back when i was making a bunch of changes to BOOTSTRAP.nqp), but it was decided that keeping the possibility of Inf was the best option

[00:49] <MasterDuke> so that rebind looks suspect to me, unless maybe it's an optimization?

[00:51] <IOninja> But Num is not an Int...

[00:51] <IOninja> So I'm not surprised your making it an Int failed.

[00:53] <MasterDuke> well, no, i wasn't either after finding out Inf was a possible value

[00:55] <IOninja> and I forget what that rebind looked like, but likely just sets the type contraint to Any

[00:55] <MasterDuke> nqp::bindattr($signature, $sig_type, '$!count', self.add_constant('Int', 'int', $count).value);

[00:56] <IOninja> m: use nqp; class Foo { has Num $.x is rw = 0e0; }; my \x = Foo.new; nqp::bindattr(x, Foo, '$!x', $ = 42); x.x = 'x'; dd x.x

[00:56] <camelia> rakudo-moar 68a40f: OUTPUT: «Str $ = "x"␤»

[00:56] <IOninja> m: use nqp; class Foo { has Num $.x is rw = 0e0; }; my \x = Foo.new; nqp::bindattr(x, Foo, '$!x', $ = 42); x.x = 'x'; dd x.x.VAR.of

[00:56] <camelia> rakudo-moar 68a40f: OUTPUT: «Mu␤»

[00:56] <IOninja> or Mu even

[00:56] <IOninja> m: use nqp; class Foo { has Num $.x is rw = 0e0; }; my \x = Foo.new; nqp::bindattr(x, Foo, '$!x', my Int $ = 42); x.x = 'x'; dd x.x.VAR.of

[00:56] <camelia> rakudo-moar 68a40f: OUTPUT: «Type check failed in assignment; expected Int but got Str ("x")␤  in block <unit> at <tmp> line 1␤␤»

[00:56] <IOninja> m: use nqp; class Foo { has Num $.x is rw = 0e0; }; my \x = Foo.new; nqp::bindattr(x, Foo, '$!x', 42); x.x = 'x'; dd x.x.VAR.of

[00:56] <camelia> rakudo-moar 68a40f: OUTPUT: «Cannot modify an immutable Int␤  in block <unit> at <tmp> line 1␤␤»

[00:57] <MasterDuke> m: say &log.signature.count.WHAT

[00:57] <camelia> rakudo-moar 68a40f: OUTPUT: «(Int)␤»

[00:57] <MasterDuke> m: say &say.signature.count.WHAT

[00:57] <camelia> rakudo-moar 68a40f: OUTPUT: «(Num)␤»

[00:58] <MasterDuke> perl6 -e '' creates 3,286 Signatures, maybe making the $!count's Int is better for performance

[01:04] <IOninja> Why would make it an int be better for performance?

[01:04] <IOninja> *Int

[01:06] <MasterDuke> i don't know about this specific case, but integer operations are almost always faster than floating point operations

[01:07] <IOninja> :/

[01:08] * IOninja still stands behind all the reasons stated last time $!count was proposed to be made an Int

[01:09] <MasterDuke> i'm not re-proposing to make it an Int

[01:09] <MasterDuke> i said rebinding it to an Int was suspect

[01:10] <MasterDuke> and if there's no noticeable performance reason for doing so, i would say it should stay a Num

[01:11] <IOninja> But my point was there's no point in it being a Num, because that type constraint appears to be removed.

[01:11] <MasterDuke> `nqp::bindattr($signature, $sig_type, '$!count', self.add_constant('Int', 'int', $count == -1 ?? nqp::inf() !! $count).value);`

[01:11] * IOninja &

[01:12] <MasterDuke> sure, or leave it a Num and don't remove the constraint

[01:12] <MasterDuke> oops

[01:12] <MasterDuke> `nqp::bindattr($signature, $sig_type, '$!count', self.add_constant('Num', 'num', $count == -1 ?? nqp::inf() !! $count).value);`

[01:12] <MasterDuke> that's what i meant ^^^

[01:57] <samcv> NeuralAnomaly, status

[01:57] <NeuralAnomaly> samcv, [✘] Next release will be in 1 week and 1 day. Since last release, there are 48 new still-open tickets (9 unreviewed and 1 blockers) and 60 unreviewed commits. See http://perl6.fail/release/stats for details

[01:57] <samcv> luckily have almost finished work on fixing that blocker with the case insensitive regex

[01:58] <MasterDuke> nice

[02:21] <travis-ci> Rakudo build passed. TimToady 'propagate purity up through meta-meta asts

[02:21] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/209506945 https://github.com/rakudo/rakudo/compare/f9294c3837ff...68a40f7d95eb

[06:07] <Geth> ¦ nqp: 50233099d5 | TimToady++ | 4 files

[06:07] <Geth> ¦ nqp: move %*HOW into the braid

[06:07] <Geth> ¦ nqp:

[06:07] <Geth> ¦ nqp: We'll just reuse the same slang hash to simplifiy braid cloning, but

[06:07] <Geth> ¦ nqp: prefix with a 'H:' to prevent symbol clashes.

[06:07] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/50233099d5

[06:07] <Geth> ¦ rakudo/nom: 49b1b32345 | TimToady++ | 3 files

[06:07] <Geth> ¦ rakudo/nom: move %*HOW (and %*HOWUSE) into the braid

[06:07] <Geth> ¦ rakudo/nom:

[06:07] <Geth> ¦ rakudo/nom: %*HOWUSE just uses the same braid mechanism with a "U:" on the front.

[06:07] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/49b1b32345

[06:07] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.02-65-g4c0f698...2017.02-67-g5023309

[06:07] <Geth> ¦ rakudo/nom: 9d7c0ab8ff | TimToady++ | tools/build/NQP_REVISION

[06:07] <Geth> ¦ rakudo/nom: bump NQP to get Braid.*how methods

[06:08] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9d7c0ab8ff

[06:08] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.02-65-g4c0f698...2017.02-67-g5023309

[07:09] <[Tux]> This is Rakudo version 2017.02-226-g9d7c0ab8f built on MoarVM version 2017.02-35-gdc40845b

[07:09] <[Tux]> csv-ip5xs        2.863

[07:09] <[Tux]> test            12.565

[07:09] <[Tux]> test-t           4.964 - 5.006

[07:09] <[Tux]> csv-parser      12.707

[08:09] <samcv> o/ [Tux]

[08:09] <samcv> [Tux], does yo,ur CVS script use case insensitive regex anywhere?

[08:09] <samcv> cause that's about to get a lot faster

[12:04] <IOninja> Leaving a Num and not removing the constraint won't work, because Ints aren't Nums :/

[12:04] <IOninja> The closest constraint would be Real, Numeric, or Cool, but I doubt that has any real benefit.

[15:52] <naxieAlDle> does anybody have any ideas about RT #130910 ?

[15:52] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130910

[15:53] * IOninja shakes head

[15:55] <timotimo> naxieAlDle: did you get any interesting results with the heapanalyzer btw?

[15:55] <naxieAlDle> timotimo: I don't think I ever tried it

[15:56] <timotimo> oh, OK

[16:32] <timotimo> hey folks, y'all may want to make sure to run perl Configure.pl inside MoarVM the next time you "git pull"

[16:33] <timotimo> i just turned 3rdparty/libtommath into an actual submodule

[17:20] <lizmat> timotimo: this doesn't matter for people just doing dev work in rakudo, right ?

[17:20] <Geth> ¦ rakudo/nom: f190f241e0 | (Elizabeth Mattijsen)++ | src/core/List.pm

[17:20] <Geth> ¦ rakudo/nom: Partially fix RT #130956

[17:20] <Geth> ¦ rakudo/nom:

[17:20] <Geth> ¦ rakudo/nom: For very large integer values, like: 42 xx 99999999999 .  The thunk

[17:20] <Geth> ¦ rakudo/nom: version is not yet lazy, still looking at two spectest failures :-(

[17:20] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130956

[17:20] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f190f241e0

[17:20] <timotimo> it'll be interesting the moment moar gets bumped i assume

[17:21] <lizmat> but then a configure.PL at the rakudo level should be enough then, no?

[17:21] <lizmat> or should we nuke install to be sure ?

[17:21] <timotimo> hm. to be fair, it'll probably not be a problem at all

[17:29] <IOninja> https://perl6.party/post/Tag-Your-Dists

[17:29] <IOninja> New post: "Camelia wants YOU to tag your dists": https://perl6.party/post/Tag-Your-Dists

[17:31] <timotimo> ugh, the tag "cloud" on that page is ... massive

[17:32] <IOninja> timotimo: <IOninja> Well, I'm gonna leave it like that for now. And will sort out something more usable in ~7-8 hours.

[17:33] <timotimo> oh

[17:33] <timotimo> sorry :)

[17:34] <timotimo> a bit distracted by impending doom

[17:34] <IOninja> doom?

[17:34] <timotimo> oh, you know, just someone i don't know coming into my home and judging stuff in it

[17:34] <IOninja> huh

[17:39] <[Tux]> samcv, yes

[17:39] <timotimo> well, i live in an apartment for rent. the current owner is selling all the small apartments they own and instead buying houses

[17:39] <timotimo> so naturally, someone who wants to buy my apartment has to be found

[17:39] <timotimo> and they're not going to buy it without having a look at it first. for good reasons.

[17:39] <perlpilot> IOninja: "camelion" makes me think of a camel with a lion's head or something  :)

[17:42] <perlpilot> IOninja: If you don't already have a suggestion for the tag cloud, I suggest making it a drop down.

[17:42] <IOninja> gross

[17:43] <timotimo> i'd prefer a click-to-expand. it's already starting with "all" selected anyway

[17:43] <perlpilot> or make a link for the tag cloud, that when hovered over, give you the traditional cloud of words at different font sizes

[17:43] <timotimo> why not make deselecting "all" cause the tabs display to open up

[17:44] <IOninja> tabs display?

[17:45] <timotimo> well, a box full of tabs

[17:45] <timotimo> or whatever we end up with

[17:45] <perlpilot> that also seems LTA

[17:46] <perlpilot> right now, the results of the search box are pushed off the bottom of my screen because of the tags.  I think a box full of tabs would have a similar problem.

[17:46] <timotimo> that box-full-of-tabs can of course already be half-visible, so that you get the clue of "you can expand this, there's more stuff to be seen!"

[17:47] <perlpilot> IOninja++ for the tags though, that's awesome.

[17:47] <timotimo> hm, will the search filter also thin out the list of tags?

[17:49] <IOninja> No

[17:49] <IOninja> Unless you visit the /q/ page (non-JS search)

[17:50] <timotimo> i mean more like: do we want that to happen

[17:50] <perlpilot> huh ... why do all of the modules show up in the list twice?

[17:51] <timotimo> oh, huh, they do

[17:51] <timotimo> but not immediately

[17:51] <perlpilot> sorry, not all, but most

[17:51] <timotimo> and only if no tags are selected

[17:51] <IOninja> I'll shove the 1-2 item tags to the bottom of the list and make the tag box grow-on-hover/tap. If anyone else wants to make it different, they're welcome to it

[17:52] <timotimo> thank you for your work!

[17:52] <perlpilot> IOninja++ sounds good.

[17:53] <IOninja> ... not sure what's up with duplication...

[17:53] <perlpilot> I would have guessed some sort of join error, but I dunno

[17:53] <IOninja> probably 'cause primary keys got changed :|

[17:54] <IOninja> or maybe not

[17:54] <IOninja> gonna check back in ~2 hours to see if it grows on each db rebuild and will debug it after work

[17:54] * IOninja &

[17:57] <IOninja> and if I die before that... old db build is in old.db in modules.perl6.org dir :) just copy it over to modulesperl6.db and checkout a commit before my tags workk

[18:26] <japhb> IOninja: Love that Camelion logo.  :-)

[19:33] <IOninja> :/

[19:34] <IOninja> buggable is nomming all the ram again.

[19:34] <IOninja> Stupid OS. Kill buggable, not Geth!

[19:42] <nine> IOninja: ulimit is your friend :)

[19:44] <IOninja> too hard. I don't want to learn things.

[20:10] <japhb> IOninja: Better stop working on Perl 6 then.  Hazard of the hobby.  :-)

[20:22] <IOninja> my google-foo tells me ulimit can't restrict resident memory or something and that's what buggable is noming. I need cgroups or something.

[20:45] <samcv> morning all

[20:47] <IOninja> \o

[21:47] <samcv> gotta bump nqp and perl6 now to get the m:i fix

[21:52] <IOninja> cool

[21:52] <Geth> ¦ nqp: b083e3471a | (Samantha McVey)++ | tools/build/MOAR_REVISION

[21:52] <Geth> ¦ nqp: Bump Moar to get case insensitive string compare fix

[21:52] <Geth> ¦ nqp:

[21:52] <Geth> ¦ nqp: 58457845 Fix string_equal_at_ignore_case when string `a` changes length (#548)

[21:52] <Geth> ¦ nqp: 1288e7ed update libtommath fork to have expmod hang fix

[21:52] <Geth> ¦ nqp: fbb4c272 turn libtommath into a submodule, use MoarVM's fork

[21:52] <Geth> ¦ nqp: dc40845b Merge pull request #546 from MasterDuke17/add_checks_on_resulting_size_to_string_concatenating_and_repeating

[21:52] <Geth> ¦ nqp: d4d9eb8c Do gen2 sweep before letting stolen thread go.

[21:52] <Geth> ¦ nqp: ffd32f53 MVMROOT decoder when building string result.

[21:52] <Geth> ¦ nqp: beefd2b1 Check result of repeat/concat fit in an MVMString

[21:52] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/b083e3471a

[21:52] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.02-31-g91aab71...2017.02-38-g58457845

[21:53] <Geth> ¦ nqp: 4ceee06de6 | (Samantha McVey)++ | t/moar/07-eqatic.t

[21:53] <Geth> ¦ nqp: Add tests for nqp::eqatic case insensitive string compare

[21:53] <Geth> ¦ nqp:

[21:53] <Geth> ¦ nqp: Add some tests that test when expanding characters are present and when

[21:53] <Geth> ¦ nqp: they are not.

[21:53] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/4ceee06de6

[21:54] * jnthn wonders if we have clean spectest6 now :)

[21:58] <Geth> ¦ rakudo/nom: 22f00cd72d | (Samantha McVey)++ | tools/build/NQP_REVISION

[21:58] <Geth> ¦ rakudo/nom: Bump Moar/NQP to get case insensitive string compare fix

[21:58] <Geth> ¦ rakudo/nom:

[21:58] <Geth> ¦ rakudo/nom: 4ceee06d Add tests for nqp::eqatic case insensitive string compare

[21:58] <Geth> ¦ rakudo/nom: b083e347 Bump Moar to get case insensitive string compare fix

[21:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/22f00cd72d

[21:58] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.02-67-g5023309...2017.02-69-g4ceee06d

[21:58] <IOninja> jnthn: were there fixes for stability of spectest6? As in... should I fire up my 32-core VM and try to make it crash?

[21:58] <samcv> tests should now pass

[21:58] <IOninja> samcv++

[21:58] * IOninja fires up the VM to do some stresstesting :)

[22:00] <IOninja> OHOHOH

[22:00] <IOninja> Google got an upgrade, apparently.

[22:01] <IOninja> I can fire up a 64-core VM :o

[22:01] * IOninja checks the pricing on that one before doing so... :}

[22:02] <samcv> more cores == able to crash faster right?

[22:02] <samcv> hah

[22:04] <lizmat> hmmm... git pull / perl config breaks ?

[22:05] <lizmat> nuking install doesn't help

[22:05] <IOninja> m: say "${3.97/4.345} per hour for 64-core 416GBRAM VM"

[22:05] <camelia> rakudo-moar f190f2: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of ${3.97/4.345}; in Perl 6 please use $(3.97/4.345) for hard ref or $::(3.97/4.345) for symbolic ref␤at <tmp>:1␤------> 3say "${3.97/4.345}7⏏5 per hour for 64-core 416GBRAM VM"␤»

[22:05] <lizmat> Generating tools/check.mk .............................. OK

[22:05] <lizmat> Generating build/mk-moar-pc.pl ......................... OK

[22:05] <lizmat> Configuration FAIL. You can try to salvage the generated Makefile.

[22:05] <IOninja> m: say "\${3.97/4.345} per hour for 64-core 416GBRAM VM"

[22:05] <camelia> rakudo-moar f190f2: OUTPUT: «$0.913694 per hour for 64-core 416GBRAM VM␤»

[22:05] <lizmat> is this a known issue ?

[22:06] <lizmat> git error: fatal: destination path '3rdparty/libtommath' already exists and is not an empty directory.

[22:06] <lizmat> Clone of 'git://github.com/MoarVM/libtommath' into submodule path '3rdparty/libtommath' failed

[22:06] <IOninja> m: say "\${2.57/4.345} per hour for 64-core 57GB RAM VM"

[22:06] <camelia> rakudo-moar f190f2: OUTPUT: «$0.591484 per hour for 64-core 57GB RAM VM␤»

[22:06] <IOninja> lizmat: that looks like what timotimo++ was doing earlier today

[22:07] <IOninja> timotimo: ping... any idea how to fix ^ breakage?

[22:07] <samcv> well it got upgraded lizmat and uh looks like it become a submodule instead of actually being in the Moarvm/moarvm repo

[22:07] <jnthn> IOninja: Yeah, I found a really nasty parallel GC bug

[22:07] <lizmat> yeah, building rakudo is bored atm

[22:07] <jnthn> (And fixed it)

[22:07] <lizmat> *borked

[22:07] <jnthn> Heh, I mentally corrected to boned...

[22:07] <jnthn> lizmat: Toss your MoarVM checkout

[22:08] <samcv> lizmat, hmm it worked fine for me pulling mvm and getting the change. but yeah do what jnthn said maybe

[22:08] <samcv> or uh

[22:08] <samcv> maybe git reset --hard

[22:08] <jnthn> Or that

[22:08] <samcv> and then git pull

[22:08] <jnthn> Oh, may have to clean

[22:08] * lizmat nuked nqp

[22:09] <lizmat> getting past the submodule update now

[22:10] <jnthn> phew :)

[22:14] <IOninja> dammit "Starting VM instance "perlbuild2" failed. Error: Quota 'CPUS' exceeded. Limit: 32.0"

[22:14] <IOninja> wtf

[22:16] <jnthn> 32 CPUs should be enough for anybody :P

[22:17] <IOninja> heh

[22:22] <IOninja> eh, can't see a region with 64-cpu quota :/... gonna try to figure out it some other day. 32-cores it is

[22:27] <timotimo> lizmat: just have to rm -rf 3rdparty/libtommath

[22:27] <lizmat> I nuked nqp

[22:27] <lizmat> :-)

[22:28] * IOninja nuked everything

[22:28] <lizmat> seems to also fixed the problem, albeit a bit more rigorously :-)

[22:28] <lizmat> but not quite as rigorous as IOninja

[22:32] <timotimo> if MoarVM lives under nqp/ on your end, that's fine

[22:36] <lizmat> timotimo: it does, as I use the default build instructions of rakudo all the time

[22:36] <timotimo> understood

[22:39] <samcv> yay blocker fix. now what else to do today. i'm hungry

[22:39] <IOninja> samcv++ awesome

[22:39] <IOninja> NeuralAnomaly: blockers

[22:39] <NeuralAnomaly> IOninja, There is 1 release blocker. See http://perl6.fail/release/blockers

[22:39] <NeuralAnomaly> IOninja, http://perl6.fail/130953 : chars that look different in .fc break :i regex matches

[22:40] <IOninja> m: say "ﬆﬆﬆﬆT" ~~ m:i/T/

[22:40] <camelia> rakudo-moar f190f2: OUTPUT: «False␤»

[22:40] <samcv> NeuralAnomaly, blockers

[22:40] <NeuralAnomaly> samcv, There are no release blockers

[22:40] <IOninja> how... did you... :o

[22:40] <samcv> it just took a sec to update

[22:40] <samcv> or maybe because i visited the webpage idk

[22:41] <samcv> camelia is not up to date yet. should hopefully start working again shortly

[22:41] <IOninja> Oh. I thought you were able to unmark it :)

[22:41] <IOninja> I think camelia will need to nuke its nqp too, won't it?

[22:41] <samcv> well i marked it as resolved in rt

[22:41] <samcv> i didn't have to nuke anything

[22:41] <IOninja> or nqp/MoarVM/3rdparty/libtommath or whatever

[22:42] <samcv> i have moarvm rakudo and nqp in seperate directories under ~/git

[22:42] <IOninja> m: $*PERL.compiler.version.say

[22:42] <camelia> rakudo-moar f190f2: OUTPUT: «v2017.02.227.gf.190.f.24␤»

[22:42] <samcv> and had no problems just pulling

[22:42] <samcv> but camelia sheould have updated by now

[22:43] <samcv> maybe it only breaks if you build rakudo with moarvm and nqp automade

[22:43] <samcv> instea dof having seperate repos

[22:43] <IOninja> hm, commitable updated itself just fine too

[22:43] <samcv> dunno

[22:43] <IOninja> c: HEAD say "ﬆﬆﬆﬆT" ~~ m:i/T/

[22:43] <committable6> IOninja, ¦HEAD(22f00cd): «｢T｣»

[22:43] <IOninja> \o/

[22:44] <IOninja> stresstest6: Files=1209, Tests=132708,  277 wallclock secs

[22:44] * IOninja sticks it to run in a look and goes to eat

[23:00] <Geth> ¦ roast: d30ef47f07 | (Elizabeth Mattijsen)++ | S03-operators/repeat.t

[23:00] <Geth> ¦ roast: Unfudge now passing tests for RT #127971, RT #130924

[23:00] <Geth> ¦ roast:

[23:00] <Geth> ¦ roast: samcv++ I believe

[23:00] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d30ef47f07

[23:00] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=127971

[23:00] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130924

[23:01] <IOninja> Hm. harness6 doesn't pickup passing TODOs then? 'cause I ran it on current HEAD without those roast changes :o

[23:02] <Geth> ¦ roast: 5aa268236e | (Elizabeth Mattijsen)++ | S05-substitution/match.t

[23:02] <Geth> ¦ roast: Unfudge now passing tests for RT #130953

[23:02] <Geth> ¦ roast:

[23:02] <Geth> ¦ roast: Also samcv++ I believe

[23:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5aa268236e

[23:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130953

[23:02] <lizmat> IOninja: no idea really

[23:02] <lizmat> I was waiting for a stable harness6 before delving deeper into it

[23:04] <IOninja> looks like not indicating a failed run with an exit code either; I had while HARNESS_TYPE=6 make stresstest; do true; done loop running and on one run t/spec/S10-packages/precompilation.t flooped, but it kept chugging along

[23:05] <Geth> ¦ rakudo/nom: db1f689b60 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[23:05] <Geth> ¦ rakudo/nom: Introducing R::It.Callable-xx-Times

[23:05] <Geth> ¦ rakudo/nom:

[23:05] <Geth> ¦ rakudo/nom: Basically the 'rand xx 42' functionality.

[23:05] <Geth> ¦ rakudo/nom:

[23:05] <Geth> ¦ rakudo/nom: Also remove specific sink-all in Callable-xx-Whatever, as it needs

[23:05] <Geth> ¦ rakudo/nom: to execute the thunks for their possible side-effects

[23:05] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/db1f689b60

[23:05] <IOninja> Anyway. 6 runs on 32-cores, no weird failures with harness6 \o/

[23:13] <Geth> ¦ rakudo/nom: 1754dc5f7e | (Elizabeth Mattijsen)++ | src/core/List.pm

[23:13] <Geth> ¦ rakudo/nom: Make thunk xx 42 use the new iterator

[23:13] <Geth> ¦ rakudo/nom:

[23:13] <Geth> ¦ rakudo/nom: This breaks 4 tests:

[23:13] <Geth> ¦ rakudo/nom:   t/spec/S03-metaops/cross.t  (56-57)

[23:13] <Geth> ¦ rakudo/nom:   t/spec/S03-metaops/zip.t  (56-57)

[23:13] <Geth> ¦ rakudo/nom:

[23:13] <Geth> ¦ rakudo/nom: I've spent several days trying to figure out why:

[23:13] <Geth> ¦ rakudo/nom: <…commit message has 16 more lines…>

[23:13] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1754dc5f7e

[23:13] <lizmat> I hope someone with more inspiration can figure out why those tests fail ^^^

[23:14] <lizmat> meanwhile, I'm going to get some shuteye

[23:14] <lizmat> good night, #perl6-dev!

[23:17] <samcv> night lizmat

[23:17] <IOninja> night

[23:34] <MasterDuke> samcv: do you think you've completely addressed RT #126793 ?

[23:34] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=126793

[23:35] <samcv> i have not tested ignoremark + ignorecase which has different codepaths in nqp and rakudo, but i will take an educated guess and say yes. but ticket will stay open until some tests get made

[23:38] <samcv> oh looks like there's still some bugs in it. but no more problem than there was before

[23:38] <samcv> before we used foldcase i mean.

[23:38] <samcv> m: say 'aaaaﬆa' ~~ m:i/st/

[23:38] <camelia> rakudo-moar f190f2: OUTPUT: «False␤»

[23:38] <samcv> think that's an old commit actually on camelia

[23:39] <MasterDuke> yeah, that's the one before your bump

[23:40] <samcv> evalable6, $*PERL.compiler.version.say

[23:40] <IOninja> .ask nine camelia seems to be stuck on an old commit. Needs to nuke nqp/MoarVM/3rdparty/libtommath to get it going again

[23:40] <yoleaux2> IOninja: I'll pass your message to nine.

[23:40] <evalable6> samcv, rakudo-moar 1754dc5f7: OUTPUT: «v2017.02.230.g.1754.dc.5.f.7»

[23:41] <samcv> evalable6, say 'ﬆ' ~~ m:i/st/

[23:41] <evalable6> samcv, rakudo-moar 1754dc5f7: OUTPUT: «｢ﬆ｣»

[23:41] <samcv> evalable6, say 'aaaﬆ' ~~ m:i/st/

[23:41] <evalable6> samcv, rakudo-moar 1754dc5f7: OUTPUT: «False»

[23:41] <samcv> pretty sure that's not moar's fault on this one and the issue here is somewhere in rakudo

[23:42] <samcv> so that's fine since it's not a regression

[23:43] <samcv> m: use nqp; say nqp::eqatic('aaaﬆ', 'st', 3)

[23:43] <camelia> rakudo-moar f190f2: OUTPUT: «1␤»

[23:43] <samcv> yeah that works fine

[23:44] <samcv> but that ticket i guess is that we should do fc instead of lc. and i changed all of those to foldcase

[23:45] <samcv> bisectable6, say 'ABﬆEFG' ~~ m:i/st/

[23:45] <bisectable6> samcv, On both starting points (old=2015.12 new=1754dc5) the exit code is 0 and the output is identical as well

[23:45] <bisectable6> samcv, Output on both points: «False»

[23:46] <samcv> bisectable6, say 'ﬆEFG' ~~ m:i/st/

[23:46] <bisectable6> samcv, Bisecting by output (old=2015.12 new=1754dc5) because on both starting points the exit code is 0

[23:46] <bisectable6> samcv, bisect log: https://gist.github.com/3e30751ae31d2808d63628eee7c05ca6

[23:46] <bisectable6> samcv, (2017-02-28) https://github.com/rakudo/rakudo/commit/26e6993bd82a23fb701b91aeb3ee832c543a7d95

[23:46] <samcv> if ﬆ is at the start of the string it works fine, but otherwise has issues

[23:47] <MasterDuke> looks like uc/lc are being used here: https://github.com/perl6/nqp/blob/master/src/QRegex/NFA.nqp#L284

[23:47] <samcv> oh yeah i forgot that one

[23:48] <samcv> yeah that i didn't touch cause i didn't want to break anything

[23:48] <samcv> but maybe it makes character classes with lowercase and uppercase letters?

[23:48] <samcv> and then doesn't use nqp::eqatic

[23:48] <samcv> (which is only availible on moar)

[23:50] <MasterDuke> well, both the `charrange` and `literal` methods use uc/lc, seems like `literal` might be a simpler fix

[23:59] <Geth> ¦ nqp: daea00bd47 | (Samantha McVey)++ | src/QRegex/NFA.nqp

[23:59] <Geth> ¦ nqp: Fit line to 80 columns width in QRegex/NFA.nqp

[23:59] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/daea00bd47

[23:59] <Geth> ¦ nqp: c8b630155e | (Samantha McVey)++ | src/QRegex/NFA.nqp

[23:59] <Geth> ¦ nqp: Strip extra whitespace

[23:59] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c8b630155e
