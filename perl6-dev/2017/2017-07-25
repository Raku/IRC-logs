[00:21] <timotimo> i wonder if it's problematic at all that any user of a class can call BUILD and TWEAK and get access to private attributes that way

[00:34] <Geth> Â¦ rakudo: dwarring++ created pull request #1122: Add Buf subbuf-rw method

[00:34] <Geth> Â¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1122

[00:51] <BenGoldberg> m: my Foo { has $!private = 42 }; dd Foo.^attributes;

[00:51] <camelia> rakudo-moar 2fb8c7: OUTPUT: Â«5===SORRY!5===?Type 'Foo' is not declared?at <tmp>:1?------> 3my Foo7?5 { has $!private = 42 }; dd Foo.^attribu?Malformed my?at <tmp>:1?------> 3my7?5 Foo { has $!private = 42 }; dd Foo.^att??Â»

[00:51] <BenGoldberg> m: class Foo { has $!private = 42 }; dd Foo.^attributes;

[00:51] <camelia> rakudo-moar 2fb8c7: OUTPUT: Â«(Attribute.new,)?Â»

[00:52] <BenGoldberg> m: class Foo { has $!private = 42 }; my ($p) = |Foo.^attributes; $p.get_value(Foo.new);

[00:52] <camelia> rakudo-moar 2fb8c7: ( no output )

[00:53] <BenGoldberg> m: class Foo { has $!private = 42 }; my ($p) = |Foo.^attributes; dd $p.get_value(Foo.new);

[00:53] <camelia> rakudo-moar 2fb8c7: OUTPUT: Â«42?Â»

[00:53] <BenGoldberg> timotimo, Is it any more problematic than ^ ?

[00:57] <BenGoldberg> There exist languages where if you want some data to be private, is it very difficult for users of your class to see it.  Perl6 is not one of those languages.

[00:58] <geekosaur> yes. perl 6 is a perl.

[00:58] <geekosaur> very little is _truly_ private

[00:59] <samcv> u: { .uniprop('Block') ~~ /:i nushu/ }

[01:00] <unicodable6> samcv, Found nothing!

[02:32] <Geth> Â¦ roast: dwarring++ created pull request #289: Add some tests on Buf subbuf-rw method

[02:32] <Geth> Â¦ roast: review: https://github.com/perl6/roast/pull/289

[04:19] <Geth> Â¦ rakudo/nom: 15debeecde | LLFourn++ | src/Perl6/Actions.nqp

[04:19] <Geth> Â¦ rakudo/nom: begin_time_lexical_fixup for constants

[04:19] <Geth> Â¦ rakudo/nom:

[04:19] <Geth> Â¦ rakudo/nom: This patch applies the fix that jnthn created for BEGIN and CHECK

[04:19] <Geth> Â¦ rakudo/nom: blocks to constant assignments (which are also run at compile

[04:19] <Geth> Â¦ rakudo/nom: time). The problem is constant values may have inner blocks that get

[04:19] <Geth> Â¦ rakudo/nom: serialized and used at runtime. This fix needs to be applied for them

[04:19] <Geth> Â¦ rakudo/nom: to work, otherwise these explode when exported and used:

[04:19] <Geth> Â¦ rakudo/nom: <â€¦commit message has 8 more linesâ€¦>

[04:19] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/15debeecde

[04:19] <Geth> Â¦ rakudo/nom: dc4ed746dd | (Nick Logan)++ (committed using GitHub Web editor) | src/Perl6/Actions.nqp

[04:19] <Geth> Â¦ rakudo/nom: Merge pull request #1111 from LLFourn/constant-lexical-fixup

[04:19] <Geth> Â¦ rakudo/nom:

[04:19] <Geth> Â¦ rakudo/nom: begin_time_lexical_fixup for constants

[04:19] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dc4ed746dd

[05:12] <travis-ci> Rakudo build passed. Nick Logan 'Merge pull request #1111 from LLFourn/constant-lexical-fixup

[05:12] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/257160804 https://github.com/rakudo/rakudo/compare/2fb8c72587ff...dc4ed746ddeb

[06:50] <[Tux]> I got a new message (using Inline::Perl5 I think):

[06:50] <[Tux]> Code ref '!LEXICAL_FIXUP' does not exist in serialization context

[06:54] <[Tux]> This is Rakudo version 2017.07-62-gdc4ed746d built on MoarVM version 2017.07-15-g0729f841

[06:54] <[Tux]> test            12.772

[06:54] <[Tux]> test-t           4.381 - 4.497

[06:54] <[Tux]> csv-parser      11.793

[06:54] <[Tux]> Error encoding UTF-8 string: could not encode codepoint 1394424 (0x1546F8), codepoint out of bounds. Cannot encode higher than 1114111 (0x10FFFF)

[07:06] <nine> [Tux]: maybe a regression by https://github.com/rakudo/rakudo/commit/15debeecde

[07:07] <[Tux]> (out of my scope)

[07:22] <stmuk_> https://github.com/Homebrew/homebrew-core/blob/master/Formula/rakudo-star.rb#L42

[07:22] <stmuk_> that's strange .. it claims parrot generated man pages

[07:27] <lizmat> Files=1217, Tests=67437, 227 wallclock secs (13.75 usr  5.09 sys + 1386.62 cusr 140.12 csys = 1545.58 CPU)

[07:40] <stmuk_> hmm it did have some .pod but not much of interest still .. also (c) parrot foundation (what ever that was!)

[08:39] <Geth> Â¦ rakudo/nom: acf9f90d23 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm

[08:39] <Geth> Â¦ rakudo/nom: Make .unique(:as,:with) about 12x faster

[08:39] <Geth> Â¦ rakudo/nom:

[08:39] <Geth> Â¦ rakudo/nom: - based on a 100 elem array with unique values

[08:39] <Geth> Â¦ rakudo/nom: - rewritten as a proper iterator in nqp, rather than with gather/take

[08:39] <Geth> Â¦ rakudo/nom: - also much easier on memory

[08:39] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/acf9f90d23

[09:34] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make .unique(:as,:with) about 12x faster

[09:34] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/257215062 https://github.com/rakudo/rakudo/compare/dc4ed746ddeb...acf9f90d2353

[09:34] <buggable> [travis build above] ? All failures are due to timeout (0), missing build log (0), GitHub connectivity (1), or failed make test (0).

[12:06] <Geth> Â¦ rakudo/nom: d905620742 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[12:06] <Geth> Â¦ rakudo/nom: Introducing R:I.UniqueRepeatedWith

[12:06] <Geth> Â¦ rakudo/nom:

[12:06] <Geth> Â¦ rakudo/nom: - abstracted logic from .unique(:with)

[12:06] <Geth> Â¦ rakudo/nom: - also usable for .repeated(:with)

[12:06] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d905620742

[12:06] <Geth> Â¦ rakudo/nom: c3851aeec6 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm

[12:06] <Geth> Â¦ rakudo/nom: Use new R:I.UniqueRepeatedWith

[12:06] <Geth> Â¦ rakudo/nom:

[12:06] <Geth> Â¦ rakudo/nom: - no noticeable change for .unique(:with)

[12:06] <Geth> Â¦ rakudo/nom: - .repeated(:with) about 4x faster

[12:06] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c3851aeec6

[12:41] <Geth> Â¦ rakudo/nom: a3a3d1a968 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[12:41] <Geth> Â¦ rakudo/nom: Introducing R:I.UniqueRepeatedAsWith

[12:41] <Geth> Â¦ rakudo/nom:

[12:41] <Geth> Â¦ rakudo/nom: - abstracted logic from .unique(:as, :with)

[12:41] <Geth> Â¦ rakudo/nom: - also usable for .repeated(:as, :with)

[12:41] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a3a3d1a968

[12:41] <Geth> Â¦ rakudo/nom: 32ce4afdbc | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm

[12:41] <Geth> Â¦ rakudo/nom: Use new R:I.UniqueRepeatedAsWith

[12:41] <Geth> Â¦ rakudo/nom:

[12:41] <Geth> Â¦ rakudo/nom: - no noticeable change for .unique(:as,:with)

[12:41] <Geth> Â¦ rakudo/nom: - .repeated(:as,:with) about 12x faster

[12:41] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/32ce4afdbc

[13:00] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Use new R:I.UniqueRepeatedWith

[13:00] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/257277731 https://github.com/rakudo/rakudo/compare/acf9f90d2353...c3851aeec62a

[13:01] <[Coke]> jnthn: your recommendation would be to eliminate use of run() in the perl6 doc tests, yes?

[13:02] <[Coke]> (that does avoid the malformed utf-8 error, entirely; still want to eventually track that down.)

[13:11] <AlexDaniel> fwiw I'm seeing malformed utf-8 error with Proc::Async too, but haven't investigated yet (could be complete garbage on the input indeed).

[13:37] <Geth> Â¦ roast: LLFourn++ created pull request #290: Tests for constants with lexical scopes on the RHS

[13:37] <Geth> Â¦ roast: review: https://github.com/perl6/roast/pull/290

[13:38] <Geth> Â¦ roast: LLFourn++ created pull request #291: Tests for constants with lexical scopes on the RHS

[13:38] <Geth> Â¦ roast: review: https://github.com/perl6/roast/pull/291

[13:39] <Geth> Â¦ roast: 725dc7a89f | LLFourn++ | 2 files

[13:39] <Geth> Â¦ roast: Tests for constants with lexical scopes on the RHS

[13:39] <Geth> Â¦ roast:

[13:39] <Geth> Â¦ roast: see RT #127858, #131705

[13:39] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/725dc7a89f

[13:39] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=127858

[13:39] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131705

[13:39] <Geth> Â¦ roast: 6f3a830928 | (Lloyd Fournier)++ (committed using GitHub Web editor) | 2 files

[13:39] <Geth> Â¦ roast: Merge pull request #291 from LLFourn/constant-lexical-fixup

[13:39] <Geth> Â¦ roast:

[13:39] <Geth> Â¦ roast: Tests for constants with lexical scopes on the RHS

[13:39] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/6f3a830928

[13:43] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Use new R:I.UniqueRepeatedAsWith

[13:43] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/257288452 https://github.com/rakudo/rakudo/compare/c3851aeec62a...32ce4afdbcbe

[16:04] <Geth> Â¦ rakudo/nom: d7af4aeb71 | (David Warring)++ | src/core/Buf.pm

[16:04] <Geth> Â¦ rakudo/nom: Add Buf subbuf-rw method

[16:04] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d7af4aeb71

[16:04] <Geth> Â¦ rakudo/nom: 5a58498c89 | (Nick Logan)++ (committed using GitHub Web editor) | src/core/Buf.pm

[16:04] <Geth> Â¦ rakudo/nom: Merge pull request #1122 from dwarring/subbuf-rw

[16:04] <Geth> Â¦ rakudo/nom:

[16:04] <Geth> Â¦ rakudo/nom: Add Buf subbuf-rw method

[16:04] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5a58498c89

[16:09] <ugexe> t/04-nativecall/21-callback-other-thread.t this new test seems to flop a lot on travis, and I believe the fix it is testing was for failures on travis. i wonder if its possible that didn't fix whatever the problem here is

[16:14] <Geth> Â¦ roast: 6f32b4a34b | (David Warring)++ | S03-operators/buf.t

[16:14] <Geth> Â¦ roast: Add some tests on Buf subbuf-rw method

[16:14] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/6f32b4a34b

[16:14] <Geth> Â¦ roast: 5556596005 | (David Warring)++ | S03-operators/buf.t

[16:14] <Geth> Â¦ roast: Add one test on subbuf-rw() sub

[16:14] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/5556596005

[16:14] <Geth> Â¦ roast: 2830e076d7 | (Zoffix Znet)++ (committed using GitHub Web editor) | S03-operators/buf.t

[16:14] <Geth> Â¦ roast: Merge pull request #289 from dwarring/subbuf-rw

[16:14] <Geth> Â¦ roast:

[16:14] <Geth> Â¦ roast: Add some tests on Buf subbuf-rw method

[16:14] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/2830e076d7

[18:43] <Geth> Â¦ rakudo/nom: 90a0f2e09e | (Nick Logan)++ (committed using GitHub Web editor) | tools/build/Makefile-Moar.in

[18:43] <Geth> Â¦ rakudo/nom: Fix quotes for windows

[18:43] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/90a0f2e09e

[19:19] <timotimo> thank you, ugexe

[19:38] <Geth> Â¦ rakudo/nom: 9c0d40aba0 | (Nick Logan)++ (committed using GitHub Web editor) | appveyor.yml

[19:38] <Geth> Â¦ rakudo/nom: Test install target works on appveyor

[19:38] <Geth> Â¦ rakudo/nom:

[19:38] <Geth> Â¦ rakudo/nom: ...just like we do for osx/linux on travis-ci

[19:38] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9c0d40aba0

[20:32] <samcv> good *

[21:25] <travis-ci> Rakudo build errored. Nick Logan 'Test install target works on appveyor

[21:25] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/257450323 https://github.com/rakudo/rakudo/compare/90a0f2e09ef7...9c0d40aba093

[21:25] <buggable> [travis build above] ? All failures are due to timeout (1), missing build log (0), GitHub connectivity (0), or failed make test (0).
