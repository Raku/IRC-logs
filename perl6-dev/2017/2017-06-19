[00:56] <ugexe> i have a script that launches a bunch of processes in sequence, totalling 800ish. 2017.06 keeps dying at 255 though...

[00:57] <ugexe> does 255 correspond to something like a handle limit or something?

[00:58] <timotimo> what does strace tell you?

[00:58] <timotimo> is there any text to the exceptions you get?

[01:00] <ugexe> i dont know how to use strace. but it just stops - no message, but always at 255

[01:01] <ugexe> well, 254

[01:02] <timotimo> you can strace -f textfile.txt perl6 foo bar

[01:02] <timotimo> then you can let me have a quick look

[01:04] <timotimo> so if it "just stops", does it hang, or terminate?

[01:05] <geekosaur> os x by any chance?

[01:06] <geekosaur> oh, changed in 2017.06, n/m

[01:10] <ugexe> strace gives me permissions errors when i try to use it with this https://gist.github.com/ugexe/4ec8a4258819333a7b715658b192c1b4

[01:11] <ugexe> it terminates with no message.

[01:13] <geekosaur> -f does not tell it a file to save tyo

[01:13] <timotimo> it's trying to execve a .txt file

[01:13] <timotimo> oh, sorry

[01:13] <geekosaur> -f means "follow forks"

[01:13] <timotimo> right, it must be -o

[01:13] <timotimo> my bad, i'm tired

[01:13] <geekosaur> so your intended log file is actually the program to run

[01:18] <ugexe> with strace it says Segmentation Fault at least

[01:18] <samcv> ok i need to adjust the Unicode collation bitfield items for the nqp::unicmp_s op. to allow you to configure reverse sorting of things

[01:18] <timotimo> that's interesting. maybe with perl6-gdb-m we can get more info out of it?

[01:18] <ugexe> i'm copying over the log, but its like 80mb

[01:18] <samcv> like for uppercase to come before lowercase and things like that. since lowercase comes first by default in UCA

[01:19] <samcv> so i'm thinking still a bitfield, but primary+ is 1 primary- is 2; secondary+ is 4, secondary- is 8

[01:19] <samcv> added to the bitfiled values. because i need to designate *no* sorting and designate normal direction and also designate reversed sorting

[01:20] <samcv> timotimo, does that seem sane?

[01:20] <ugexe> Program received signal SIGSEGV, Segmentation fault.

[01:20] <ugexe> 0x00007ffff7833b57 in gc_mark () from //home/nickl/.rakudobrew/moar-2017.06/install/lib/libmoar.so

[01:20] <samcv> i've seen that

[01:21] <ugexe> thats what perl6-gdb-m shows

[01:21] <samcv> yep

[01:21] <samcv> maybe the same one i got yseterday

[01:21] <samcv> building without debugging made it go away

[01:21] <timotimo> oh, you probably didn't build with --debug set to anything

[01:21] <ugexe> mine is somehow tied to the number 255

[01:21] <samcv> https://gist.github.com/samcv/9f7d8820cb9e56d14abecd9aaf88b6e2

[01:24] <ugexe> this is the last few hundred lines of the strace https://gist.github.com/ugexe/0d38dcd3d3e6b4776f73d8b1cf1f5a8a

[01:30] <timotimo> i expect the multiple "killed by" is one per thread

[01:32] <ugexe> its not exactly multi threaded... but it does something like `map { run ... }, @bar`

[01:34] <timotimo> hmm, run is now based on proc::async, isn't it?

[01:34] <ugexe> https://github.com/ugexe/Perl6-App--ecogen/blob/master/lib/App/ecogen.pm6#L40 specifically here

[01:34] <ugexe> right

[01:35] <timotimo> sorry, i'm too tired to think straight

[01:35] <timotimo> do i need to grab anything more to run that script?

[01:35] <timotimo> it doesn't have a main by itself, is there a bin/ with a script in it?

[01:35] <timotimo> ah, the readme tells it all

[01:36] <ugexe> yeah. no deps, will want to do `perl6 -Ilib bin/ecogen p6c cpan`

[05:57] <Geth> ¦ nqp: 3ff261cb41 | (Samantha McVey)++ | tools/build/MOAR_REVISION

[05:57] <Geth> ¦ nqp: [unicode-grant] Bump MoarVM to get unicmp_s improvements and changes

[05:57] <Geth> ¦ nqp:

[05:57] <Geth> ¦ nqp: The collation_mode argument has changed semantics and has added

[05:57] <Geth> ¦ nqp: features. It now allows reverse sorting of any of the collation

[05:57] <Geth> ¦ nqp: levels.

[05:57] <Geth> ¦ nqp:

[05:57] <Geth> ¦ nqp: See this MoarVM commit for full details:

[05:57] <Geth> ¦ nqp: https://github.com/MoarVM/MoarVM/commit/b34c3748

[05:58] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3ff261cb41

[05:58] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.06...2017.06-2-gcc27eebf

[06:07] <[Tux]> This is Rakudo version 2017.06-9-g6d4691fbd built on MoarVM version 2017.06

[06:07] <[Tux]> csv-ip5xs        2.537

[06:07] <[Tux]> test            12.925

[06:07] <[Tux]> test-t           4.069 - 4.192

[06:07] <[Tux]> csv-parser      12.586

[06:10] <[Tux]> 88.t still fails sometimes:

[06:11] <[Tux]> Error encoding UTF-8 string: could not encode codepoint 1309219 (0x13FA23), codepoint out of bounds. Cannot encode higher than 1114111 (0x10FFFF)

[06:11] <[Tux]> in block <unit> at 88.t line 21

[06:13] <samcv> [Tux], is it failing any less than usual?

[06:18] <[Tux]> yes, but as it is based on random data, you'll never know :)

[06:19] <samcv> true :)

[06:47] <Geth> ¦ rakudo/nom: 4da85879a7 | (Samantha McVey)++ | src/core/Collation.pm

[06:47] <Geth> ¦ rakudo/nom: [unicode-grant] Collation object updated to work with new unicmp_s semantics

[06:47] <Geth> ¦ rakudo/nom:

[06:47] <Geth> ¦ rakudo/nom: The Collation object now allows setting reverse sort order of different

[06:47] <Geth> ¦ rakudo/nom: collation levels. This is backwards compatible as long as the user

[06:47] <Geth> ¦ rakudo/nom: has not manually set the collation-level themselves. This was strongly

[06:47] <Geth> ¦ rakudo/nom: warned against relying on for this experimental API.

[06:47] <Geth> ¦ rakudo/nom:

[06:47] <Geth> ¦ rakudo/nom: Setting the collation levels the recommended way still yields the same

[06:47] <Geth> ¦ rakudo/nom: result. In addition you can now set the collation levels to negative

[06:47] <Geth> ¦ rakudo/nom: values to reverse the sorting order for just that collation level.

[06:47] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4da85879a7

[06:47] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.06...2017.06-1-g3ff261cb4

[06:47] <Geth> ¦ rakudo/nom: 2ee5fd4125 | (Samantha McVey)++ | src/core/Str.pm

[06:47] <Geth> ¦ rakudo/nom: [unicode-grant] Have unicmp operator use new arguments for nqp::unicmp_s

[06:47] <Geth> ¦ rakudo/nom:

[06:47] <Geth> ¦ rakudo/nom: nqp::unicmp_s(a, b, 85, 0, 0) results in the same functionality as

[06:47] <Geth> ¦ rakudo/nom: nqp::unicmp_s(a, b, 15, 0, 0) did before as of MoarVM commit b34c3748

[06:47] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2ee5fd4125

[06:48] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.06...2017.06-1-g3ff261cb4

[06:48] <Geth> ¦ rakudo/nom: 476780772f | (Samantha McVey)++ | tools/build/NQP_REVISION

[06:48] <Geth> ¦ rakudo/nom: [unicode-grant] Bump Moar/NQP to get new collation features

[06:48] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/476780772f

[06:48] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.06...2017.06-1-g3ff261cb4

[07:53] <pmurias> what's the utf8-c encoding?

[08:15] <pmurias> found that

[08:46] <jnthn> morning, #perl6

[08:47] <masak> morning, jnthn

[08:51] <samcv> pmurias, did you see my recent addition to the docs?

[08:51] <samcv> morning jnthn

[08:57] <pmurias> samcv: yes, samcv++

[08:57] <pmurias> found it in the MoarVM source comments first ;)

[09:07] <samcv> hehe

[09:15] <lizmat> Files=1204, Tests=62523, 221 wallclock secs (13.45 usr  4.99 sys + 1342.21 cusr 137.32 csys = 1497.97 CPU)

[09:16] <jnthn> m: sub foo($?) { ^2 .map: &say }; 1.map({ foo }).sink

[09:16] <camelia> rakudo-moar 476780: ( no output )

[09:16] <jnthn> c: 2017.05 sub foo($?) { ^2 .map: &say }; 1.map({ foo }).sink

[09:16] <committable6> jnthn, ¦2017.05: «»

[09:16] <jnthn> c: 2015.12 sub foo($?) { ^2 .map: &say }; 1.map({ foo }).sink

[09:16] <committable6> jnthn, ¦2015.12: «»

[09:16] <jnthn> c: all sub foo($?) { ^2 .map: &say }; 1.map({ foo }).sink

[09:17] <committable6> jnthn, https://gist.github.com/d052c3d939925b7dee6055ad5e6f6179

[09:36] <dogbert17_> samcv++, utf-c8

[09:46] <jnthn> *sigh* So I got a fix for RT #131593, but it regresses another test, and I'm confused now about however we could have not had that bug and passed the test in question

[09:47] * dogbert17_ gets the feeling that there's a bot missing

[09:47] <lizmat> m: dd (1,2,3).WHICH   # /me is confused as to why List aren't value types

[09:47] <camelia> rakudo-moar 476780: OUTPUT: «ObjAt.new("List|80229648")␤»

[09:48] <jnthn> m: sub foo($?) { ^2 .map: &say }; foo() for 1

[09:48] <camelia> rakudo-moar 476780: ( no output )

[09:48] <jnthn> c: 2017.05 sub foo($?) { ^2 .map: &say }; foo() for 1

[09:48] <committable6> jnthn, ¦2017.05: «»

[09:49] <jnthn> Wait, what was the "this worked since summer of 2016" in https://rt.perl.org/Ticket/Display.html?id=131593 based on?

[09:50] <jnthn> I don't see any example in the ticket that shows that it ever worked

[09:51] <lizmat> m: dd (1,2,3).WHICH   # jnthn do you agree that this .WHICH is faulty ?

[09:51] <camelia> rakudo-moar 476780: OUTPUT: «ObjAt.new("List|69772560")␤»

[09:51] <jnthn> lizmat: List is a reference type, ain't it?

[09:52] <lizmat> is it?

[09:52] <lizmat> A list is supposed to be immutable, no ?

[09:52] <lizmat> granted, it could contain mutable containers

[09:52] <jnthn> Yes, but that doesn't mean "it's a sensible value type"

[09:52] <jnthn> Right, exactly

[09:52] <jnthn> Also it's lazy

[09:53] <pmurias> should I remove a test which tests 'need STD; STD.parse("say <oh hai">)'?

[09:55] <jnthn> Oh, it's the .&foo case that it's claimed changed

[09:58] <Geth> ¦ roast: 336e3c069d | pmurias++ | S05-grammar/std.t

[09:58] <Geth> ¦ roast: Remove a test that doesn't seem to make sense anymore

[09:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/336e3c069d

[09:59] <jnthn> Ah, and phew, I think that one is covered by the fix I already made

[10:06] <Geth> ¦ rakudo/nom: 6b634a3695 | (Jonathan Worthington)++ | src/Perl6/Actions.nqp

[10:06] <Geth> ¦ rakudo/nom: Restore sinking semantics of `for`.

[10:06] <Geth> ¦ rakudo/nom:

[10:06] <Geth> ¦ rakudo/nom: The optimization performed in 9b0b9effe5 caused some previously sunk

[10:06] <Geth> ¦ rakudo/nom: cases to not be sunk. This restores that behavior, thus addressing

[10:06] <Geth> ¦ rakudo/nom: RT #131593.

[10:06] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6b634a3695

[10:07] <Geth> ¦ roast: 3dc96c76dd | (Jonathan Worthington)++ | 2 files

[10:07] <Geth> ¦ roast: Tests for RT #131593.

[10:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3dc96c76dd

[10:33] <samcv> what causes files to be put in ~/.perl6 ? is it zef or something in rakudo

[10:48] <geekosaur> the CompUnitRepo stuff in rakudo. happens automatically when you run a perl 6 script, it gets compiled into the CUR

[10:48] <geekosaur> I think zef/panda just force compilation with perl6 -c or equivalent

[10:49] * lizmat wonders what the rationale is for subst-mutate to return its matches

[10:52] <lizmat> current behaviour prohibits fastpathing Str.subst-mutate(Str,Str)

[10:52] <lizmat> and it is tested for  :-(

[11:09] <lizmat> moritz: shouldn't https://perl6book.com be updated ?

[11:09] <lizmat> :-)

[11:12] <moritz> lizmat: it should

[11:12] <moritz> lizmat: I've asked jj merelo for a pull request, and I'll add my own stuff as well soon :-)

[11:13] * tadzik wonders how could one integrate a "I have no idea what this graph does" into the graph and make it point to "Think Perl6" :P

[11:24] <moritz> tadzik: I tried to not add a bias for one particular book

[11:25] <moritz> tadzik: if there's community-wide consensus that that is the best book for beginners, by all means, send a pull request :-)

[11:25] <tadzik> moritz: sure; I just half-jokingly imagine someone looking at a flowchart not understanding how flowcharts work :P

[11:28] <lizmat> moritz: perhaps make the start point: do you know how to program?  No -> Think Perl 6

[11:28] <lizmat> Yes -> current start point

[11:30] <moritz> lizmat: but there are two multiple books targeting folks who don't know how to program

[11:31] <lizmat> which ones?

[11:32] <moritz> lizmat: Think Perl 6, the new one by JJ merelo, and "Learning Perl 6"

[11:32] <lizmat> ah, yes, good point

[11:33] <lizmat> hmmm...  suggest both ?

[11:36] <moritz> the first question should be: who do you trust in the Perl 6 community?

[11:36] <moritz> and then you get a different flowchart, depending on what you answer :-)

[11:43] <lizmat> hehe  :-)

[12:41] <Geth> ¦ rakudo/encoding-objects: 6959211f59 | (Jonathan Worthington)++ | 4 files

[12:41] <Geth> ¦ rakudo/encoding-objects: Extract Encoding::Decoder role.

[12:41] <Geth> ¦ rakudo/encoding-objects:

[12:41] <Geth> ¦ rakudo/encoding-objects: The API defined in VMBackedDecoder is now used for all of the I/O

[12:41] <Geth> ¦ rakudo/encoding-objects: decoding use cases in Rakudo; additionally, it has been demonstrated

[12:41] <Geth> ¦ rakudo/encoding-objects: that good performance can be attained using it. Therefore, it now

[12:41] <Geth> ¦ rakudo/encoding-objects: becomes the tentative API that userspace decoders will implement also.

[12:41] <Geth> ¦ rakudo/encoding-objects: review: https://github.com/rakudo/rakudo/commit/6959211f59

[12:57] <Geth> ¦ rakudo/encoding-objects: 39efcd9fb7 | (Jonathan Worthington)++ | 4 files

[12:57] <Geth> ¦ rakudo/encoding-objects: Add Encoding and Encoding::Encoder roles.

[12:57] <Geth> ¦ rakudo/encoding-objects:

[12:57] <Geth> ¦ rakudo/encoding-objects: Where Encoding represents an encoding, and can be used to obtain both

[12:57] <Geth> ¦ rakudo/encoding-objects: a streaming decoder and an encoder. The Encoding::Encoder role

[12:57] <Geth> ¦ rakudo/encoding-objects: represents an encoder (which is, thankfully, a far simpler thing than

[12:57] <Geth> ¦ rakudo/encoding-objects: a decoder).

[12:57] <Geth> ¦ rakudo/encoding-objects:

[12:57] <Geth> ¦ rakudo/encoding-objects: It's tempting to call the method just `encode`, but given it will have

[12:57] <Geth> ¦ rakudo/encoding-objects: a different API to `Str.encode` it may be better to have it different

[12:57] <Geth> ¦ rakudo/encoding-objects: (a `Encoding::Encoder` will pre-commit to things like replacement

[12:57] <Geth> ¦ rakudo/encoding-objects: characters and newline translation).

[12:57] <Geth> ¦ rakudo/encoding-objects: review: https://github.com/rakudo/rakudo/commit/39efcd9fb7

[13:51] <Geth> ¦ rakudo/encoding-objects: 203737f652 | (Jonathan Worthington)++ | 4 files

[13:51] <Geth> ¦ rakudo/encoding-objects: Add an Encoding::Registry class.

[13:51] <Geth> ¦ rakudo/encoding-objects:

[13:51] <Geth> ¦ rakudo/encoding-objects: This will hold encodings that have been registered. We'll register the

[13:51] <Geth> ¦ rakudo/encoding-objects: various built-in ones in here, and userspace encodings will also be

[13:51] <Geth> ¦ rakudo/encoding-objects: registered this way too. This will come to be used to look up encodings

[13:51] <Geth> ¦ rakudo/encoding-objects: by name.

[13:51] <Geth> ¦ rakudo/encoding-objects: review: https://github.com/rakudo/rakudo/commit/203737f652

[13:54] <Geth> ¦ roast: 4b979dd7fc | (Jonathan Worthington)++ | S32-encoding/registry.t

[13:54] <Geth> ¦ roast: Add tests for Encoding::Registry.

[13:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4b979dd7fc

[14:01] <travis-ci> NQP build canceled. Samantha McVey '[unicode-grant] Bump MoarVM to get unicmp_s improvements and changes

[14:01] <travis-ci> https://travis-ci.org/perl6/nqp/builds/244394686 https://github.com/perl6/nqp/compare/bc4ffab33a08...3ff261cb41f0

[14:29] <Geth> ¦ rakudo/encoding-objects: 4e6fa79869 | (Jonathan Worthington)++ | t/spectest.data

[14:29] <Geth> ¦ rakudo/encoding-objects: Run S32-encoding/registry.t.

[14:29] <Geth> ¦ rakudo/encoding-objects: review: https://github.com/rakudo/rakudo/commit/4e6fa79869

[14:29] <Geth> ¦ rakudo/encoding-objects: 2c80d5e6aa | (Jonathan Worthington)++ | 7 files

[14:29] <Geth> ¦ rakudo/encoding-objects: Move Rakudo::Internals::VMBackedDecoder.

[14:29] <Geth> ¦ rakudo/encoding-objects:

[14:29] <Geth> ¦ rakudo/encoding-objects: It's now `Encoding::Decoder::Builtin`. We'll not spec or document this

[14:29] <Geth> ¦ rakudo/encoding-objects: type, but rather say that for built-in encodings the exact types you

[14:29] <Geth> ¦ rakudo/encoding-objects: get back from `Encoding::Registry.find`, and from `.decoder` and

[14:29] <Geth> ¦ rakudo/encoding-objects: `.encoder` on the retunred object, are all implementation defined and

[14:29] <Geth> ¦ rakudo/encoding-objects: so subject to change; the only thing to be relied on is them doing the

[14:29] <Geth> ¦ rakudo/encoding-objects: `Encoding`/`Encoding::Encoder`/`Encoding::Decoder` roles.

[14:29] <Geth> ¦ rakudo/encoding-objects:

[14:29] <Geth> ¦ rakudo/encoding-objects: Also generalize various places to the `Encoding::Decoder` role.

[14:29] <Geth> ¦ rakudo/encoding-objects: review: https://github.com/rakudo/rakudo/commit/2c80d5e6aa

[14:51] <Geth> ¦ rakudo/encoding-objects: da1b37a79a | (Jonathan Worthington)++ | 3 files

[14:51] <Geth> ¦ rakudo/encoding-objects: Add Encoding::Builtin; register built-ins.

[14:51] <Geth> ¦ rakudo/encoding-objects:

[14:51] <Geth> ¦ rakudo/encoding-objects: An implementation of `Encoding` for the built-in encodings. Register

[14:51] <Geth> ¦ rakudo/encoding-objects: all of the built-in encodings using it.

[14:51] <Geth> ¦ rakudo/encoding-objects: review: https://github.com/rakudo/rakudo/commit/da1b37a79a

[15:16] <Geth> ¦ rakudo/encoding-objects: 798ce1fbf8 | (Jonathan Worthington)++ | src/core/Encoding/Builtin.pm

[15:16] <Geth> ¦ rakudo/encoding-objects: Register utf8-c8 encoding.

[15:16] <Geth> ¦ rakudo/encoding-objects: review: https://github.com/rakudo/rakudo/commit/798ce1fbf8

[15:18] <Geth> ¦ rakudo/encoding-objects: c4e9a8708a | (Jonathan Worthington)++ | 6 files

[15:18] <Geth> ¦ rakudo/encoding-objects: Use Encoding::Registry to obtain a decoder.

[15:18] <Geth> ¦ rakudo/encoding-objects:

[15:18] <Geth> ¦ rakudo/encoding-objects: This also means that all I/O just got support for userspace decoders.

[15:18] <Geth> ¦ rakudo/encoding-objects: review: https://github.com/rakudo/rakudo/commit/c4e9a8708a

[15:23] <timotimo> the explosion ugexe found in ecogen is the same place that exploded with dogberts program; the gc_mark of MVMCallCapture

[15:25] <Geth> ¦ rakudo/encoding-objects: e62ab72c1c | (Jonathan Worthington)++ | src/core/Encoding/Builtin.pm

[15:25] <Geth> ¦ rakudo/encoding-objects: Use typed exception for illegal new.

[15:25] <Geth> ¦ rakudo/encoding-objects:

[15:25] <Geth> ¦ rakudo/encoding-objects: MasterDuke++ and Zoffix++ for code review.

[15:25] <Geth> ¦ rakudo/encoding-objects: review: https://github.com/rakudo/rakudo/commit/e62ab72c1c

[15:46] <jnthn> Started the encoding side of it, will get that in place tomorrow, along with what should be a nice speedup for output. :)

[16:01] <ugexe> will we be able to do multiple encodings, e.g. encode to latin-1 and then base64 encode?

[16:04] <jnthn> ugexe: Should work out, would just need to write an implementation of the roles that could pass stuff from one to the other or some such

[16:06] <jnthn> I think we should probably allow all the places you can pass an encoding to let you pass either a string (resolved by the registry) or an Encoding object

[16:06] <jnthn> So you don't need to register a chain anywhere

[16:07] <jnthn> Just build it and pass it in when opening the handle

[17:07] * [Coke] waves.

[17:20] * [Coke] wonders if eveo's fix for the proc in/out stuff should be in a fresh-built nom.

[17:22] <eveo> [Coke]: it is. It's in the release too. But it's a fix for a race for lost input. There's another problem that involves segfaults

[17:23] <eveo> [Coke]: https://rt.perl.org/Ticket/Display.html?id=131592

[17:23] <eveo> Which will likely be fixed when the piping of procs is reworked some time later this week.

[17:23] <eveo> (by jnthn++)

[17:23] <[Coke]> I'm having (i think) the lost input in the docs xt/ tests that pipe input.

[17:24] <eveo> Reworked to fix https://rt.perl.org/Ticket/Display.html?id=131576#ticket-history

[17:24] <[Coke]> seems to run fine standalone, but as part of 'make xtest' get a few failures. (2017.06-13-g6b634a369)

[17:24] * [Coke] does a bit more testing

[17:25] <eveo> [Coke]: my fix makes this program not fail the test on multiple runs: https://gist.github.com/zoffixznet/440cf8f7131632aa673b75dbb3a625b3

[17:27] <[Coke]> ah. this may be the segfault then. I just ran one by hand it just stopped after 72 out of 305 tests.

[17:27] <[Coke]> Thanks.

[17:28] <eveo> cooll

[17:50] <ugexe> added file locking to zef because of your blog post :x

[17:51] <ugexe> i probably missed something in the fetching to tmp though...

[19:18] <AlexDaniel> dogbert17: re “gets the feeling that there's a bot missing”: yeah, you can write a bot too :)

[19:29] <dogbert17> AlexDaniel: missing as in crashed

[19:30] <AlexDaniel> dogbert17: we need a bot that will monitor other bots and graph their crashes!

[19:30] <dogbert17> its the RT bot, is it called synapsebot?

[19:30] <dogbert17> RT #131384

[19:33] <geekosaur> synopsebot

[19:33] <dogbert17> thx, who controls it?

[19:34] <geekosaur> actually synopsebot6. checking logs to see if I can spot who normally keeps track of it

[19:35] <dogbert17> seems to have gone missing around a month ago

[19:37] <Geth> ¦ roast: 0f743ddbb0 | (Brad Gilbert)++ (committed using GitHub Web editor) | S04-statements/for.t

[19:37] <Geth> ¦ roast: remove copy pasta-ed 'modifier' from description

[19:37] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0f743ddbb0

[19:37] <geekosaur> looks like you want timotimo

[19:37] <dogbert17> .seen timotimo

[19:37] <yoleaux> I saw timotimo 18:01Z in #perl6: <timotimo> you forgot a "sub" in front and { ... } after the signature

[19:37] <geekosaur> also, last quit was 8 days ago

[19:38] <dogbert17> geekosaur, thx

[19:38] <geekosaur> #perl6.log:2017 Jun 11 05:38:26 *	synopsebot6 has quit (Read error: Connection reset by peer)

[19:38] <dogbert17> .tell timotimo synopsebot6 seems to have died on June 11th, can you restart it?

[19:38] <yoleaux> dogbert17: I'll pass your message to timotimo.

[19:41] <AlexDaniel> should we write that timotimo manages it? https://github.com/perl6/doc/issues/711#issuecomment-235414744

[19:44] <timotimo> hey

[19:44] <yoleaux> 19:38Z <dogbert17> timotimo: synopsebot6 seems to have died on June 11th, can you restart it?

[19:44] <timotimo> oops

[19:44] <dogbert17> yo :)

[19:45] <dogbert17> RT #131384

[19:45] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131384

[19:45] <dogbert17> yay

[19:46] <dogbert17> timotimo: how would you describe synopsebot with a single sentence?

[19:46] <AlexDaniel> .tell dalek It's still alive!!!

[19:46] <yoleaux> AlexDaniel: I'll pass your message to dalek.

[19:46] <timotimo> creates links to the synopses and turns mentions of RT ticket numbers into clickable RT links

[19:47] <dogbert17> thx, I'll add that to the doc issue pointed out by AlexDaniel above

[19:48] <dogbert17> list edited

[19:48] <dogbert17> timotimo++

[19:49] <dogbert17> AlexDaniel, didn't you create a new bot the other day?

[19:50] <AlexDaniel> ooh… should list 9 bots right now

[19:50] <AlexDaniel> dogbert17: full list here: https://github.com/perl6/whateverable/wiki

[19:50] <AlexDaniel> yeah, greppable6 is missing

[19:52] <dogbert17> fixed

[20:12] <AlexDaniel> do we have anything better than an editable comment for this?

[20:13] <AlexDaniel> https://github.com/perl6/doc/wiki ?

[20:42] <lizmat> does anybody know where I can find an updated graph: https://twitter.com/zoffix/status/865690079217561600

[20:42] <lizmat> ?

[20:44] <eveo> benchable6: help

[20:44] <benchable6> eveo, Like this: benchable6: f583f22,HEAD my $a = ‘a’ x 2¹⁶; for ^1000 {my $b = $a.chop($_)} # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Benchable

[20:45] <eveo> benchable6: 2017.05,2017.06 for ^10000000 {}

[20:45] <benchable6> eveo, starting to benchmark the 2 given commits

[20:45] <benchable6> eveo, benchmarked the given commits, now zooming in on performance differences

[20:45] <benchable6> eveo, ¦2017.05: «4.4396» ¦2017.06: «1.6663»

[20:46] <eveo> hm.... I thought it was the bot that spit out that chart in svg

[20:46] <eveo> on gist

[20:46] <lizmat> benchable6: 2017.01,2017.02,2017.03,2017.04,2017.05,2017.06 for ^10000000 {}

[20:46] <benchable6> lizmat, starting to benchmark the 6 given commits

[20:47] <eveo> ah needs more than 5 commits to graph

[20:47] <lizmat> yup, /me just read the documentation

[20:48] <benchable6> lizmat, benchmarked the given commits, now zooming in on performance differences

[20:49] <benchable6> lizmat, https://gist.github.com/601f08c103e3a1a05d9a88664cec570b

[20:50] <eveo> heh, doean't display as an image on my phone :/

[20:52] <lizmat> works fine here  :-)

[21:26] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/06/19/2017-25-perl-6-books/

[21:28] <lizmat> afk for a bit&

[22:17] <AlexDaniel> .tell eveo so is RT #131592 resolved now?

[22:17] <yoleaux> AlexDaniel: I'll pass your message to eveo.

[22:17] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131592

[22:54] <lizmat> good night, #perl6-dev!
