[00:47] <raschipi> Geth: help

[02:24] <Zoffix> OK. I give up :)

[02:24] <Zoffix> timotimo: are you still awake?

[02:36] <Zoffix> .tell timotimo the R#1308 release blocker is due to a JIT commit you made. Perhaps you'd know more what the problem is? I tried to fix it but failed. Some of the info on the bug I gathered: https://github.com/rakudo/rakudo/issues/1308#issuecomment-352154785

[02:36] <yoleaux> Zoffix: I'll pass your message to timotimo.

[02:36] <synopsebot> R#1308 [open]: https://github.com/rakudo/rakudo/issues/1308 [SEGV][severe][⚠ blocker ⚠] Frequent-ish SEQV in Perl 5 integration tests

[04:17] <samcv> Zoffix: how to get the number of cpu's with rakudo?

[04:18] <samcv> releasable6: status

[04:18] <releasable6> samcv, Next release in ≈14 hours. No blockers. 0 out of 125 commits logged

[04:18] <releasable6> samcv, Details: https://gist.github.com/56910980b88b800603ec617f811f483b

[04:39] <raschipi> m: say $*KERNEL.cpu-cores

[04:39] <camelia> rakudo-moar 370073fcd: OUTPUT: «4␤»

[04:41] <raschipi> samcv: Is that what you want?

[04:43] <samcv> yep!

[04:43] <raschipi> Need a recent Rakudo version.

[05:24] <samcv> Zoffix: there's a bug in Test

[05:25] <samcv> or in prove i guess. if you have a multiple line text test, and you TODO it, then prove doesn't pick up that it's been todo'd

[05:26] <samcv> since the # TODO ends up on a different line from the "ok/not ok"

[05:43] <samcv> m: $*PROGRAM.substr(/".t"$/, "").trans: "-" => "/";

[05:43] <camelia> rakudo-moar 370073fcd: OUTPUT: «No such method '!cursor_start' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[05:43] <samcv> anybody know what's going on here?

[05:45] <samcv> anyway i need to go back to sleep. be back in the morning (like 4 hours from now)

[06:13] <Zoffix> samcv: you wrote "substr" instead of "subst"

[06:21] <Zoffix> .tell timotimo One thing I noticed in graph.c, category is MVMint32, but in interp.c it's a MVMuint32 and I think I seen it as MVMint16 somewhere too. Dunno if it matters; tried making 'em the same, but that didn't fix nothing

[06:21] <yoleaux> Zoffix: I'll pass your message to timotimo.

[06:48] <Geth> ¦ rakudo: 04eb1da6af | (Zoffix Znet)++ | t/05-messages/02-errors.t

[06:48] <Geth> ¦ rakudo: Test C3 linearization mentions line number

[06:48] <Geth> ¦ rakudo:

[06:48] <Geth> ¦ rakudo: RT#126539: https://rt.perl.org/Ticket/Display.html?id=126539

[06:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/04eb1da6af

[06:48] <synopsebot> RT#126539 [new]: https://rt.perl.org/Ticket/Display.html?id=126539 [LTA] error message about C3 linearization (no line number)

[06:54] <Zoffix> .tell wander do you have an RT account? You committed tests for a ticket ( https://github.com/perl6/roast/commit/03686da5d7f8d8c359e0ce6a538e29dc95e1d218 ) but nothing's mentioned on the ticket itself and it's still open: https://rt.perl.org/Ticket/Display.html?id=126125#ticket-history

[06:54] <yoleaux> Zoffix: I'll pass your message to wander.

[07:24] <AlexDaniel> samcv: o/

[07:25] <AlexDaniel> ah whoops. Sleep well

[07:25] <AlexDaniel> e: say $*KERNEL.cpu-cores

[07:25] <evalable6> AlexDaniel, rakudo-moar 04eb1da6a: OUTPUT: «8␤»

[07:27] <AlexDaniel> Zoffix++

[07:28] <AlexDaniel> .oO( time to find more blockers before the existing ones are resolved!! )

[07:55] <AlexDaniel> .seen Ulti

[07:55] <yoleaux> I saw Ulti 15 Dec 2017 22:24Z in #perl6: <Ulti> no then they might hire you

[09:39] <AlexDaniel> tbrowder: you here?

[10:22] <[Tux]> Rakudo version 2017.11-126-g04eb1da6a - MoarVM version 2017.11-43-g93a77dc16

[10:22] <[Tux]> csv-test-xs-20      0.456 -  0.483

[10:23] <[Tux]> csv-ip5xs           1.086 -  1.093

[10:23] <[Tux]> test-t --race       1.253 -  1.280

[10:23] <[Tux]> test-t              2.905 -  2.928

[10:23] <[Tux]> test               11.592 - 11.986

[10:23] <[Tux]> csv-parser         12.329 - 12.623

[10:23] <[Tux]> csv-ip5xs-20       12.989 - 13.136

[10:23] <[Tux]> test-t-20 --race   18.063 - 18.168

[10:23] <[Tux]> test-t-20          51.997 - 52.417

[10:26] <lizmat> m: class A {}; sub prefix:<++>(A) { say "foo" }; sub postfix:<++>(A) { say "bar" }; A++  # TimToady feels to me the static ++ optimization is too early

[10:26] <camelia> rakudo-moar 04eb1da6a: OUTPUT: «foo␤»

[10:26] <lizmat> TimToady: expected to see "bar" there

[10:36] <samcv> Zoffix: yeah i know but the error is LTA :(

[10:37] <samcv> m: $*PROGRAM.substr(/".t"$/, "")

[10:37] <camelia> rakudo-moar 04eb1da6a: OUTPUT: «No such method '!cursor_start' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[10:37] <samcv> m: $*PROGRAM.substr(/".t"$/)

[10:37] <camelia> rakudo-moar 04eb1da6a: OUTPUT: «No such method '!cursor_start' for invocant of type 'Int'␤  in block <unit> at <tmp> line 1␤␤»

[10:39] <samcv> i would expect it to give me an error about a signature issue, but it gives a cursor error.

[10:39] <samcv> ah see a github issue open there. thanks!

[11:06] <AlexDaniel> mch: class A {}; sub prefix:<++>(A) { say "foo" }; sub postfix:<++>(A) { say "bar" }; A++

[11:06] <committable6> AlexDaniel, ¦2015.12: «bar␤» ¦HEAD(04eb1da): «foo␤»

[11:06] <AlexDaniel> damn I'm looking at https://github.com/rakudo/rakudo/commit/fc52143b

[11:06] <AlexDaniel> and I remember there was some RT I was working on…

[11:06] <AlexDaniel> and I got stuck exactly because of that error

[11:06] <AlexDaniel> err, issue

[11:09] <AlexDaniel> hmm, I think it was RT#127775

[11:09] <synopsebot> RT#127775 [new]: https://rt.perl.org/Ticket/Display.html?id=127775 Declaring enums with Bools, IntStrs and maybe other things ( enum Foo (:Bar(1), :Baz(True) ))

[11:09] <AlexDaniel> but nothing has changed

[11:10] <AlexDaniel> ok nvm

[11:21] <tbrowder> AlexDaniel i’m here

[11:21] <AlexDaniel> oh, cool

[11:22] <AlexDaniel> e: https://gist.githubusercontent.com/AlexDaniel/165871f62f978eb71323d63eb973efa2/raw/904fd38a8116605627de28b27d17b6fae5e0bfae/podregr.p6

[11:22] <evalable6> AlexDaniel, Successfully fetched the code from the provided URL.

[11:22] <evalable6> AlexDaniel, rakudo-moar 04eb1da6a: OUTPUT: «"'Foo and Bar'"␤»

[11:22] <AlexDaniel> tbrowder: that doesn't look quite right, right?

[11:22] <AlexDaniel> but I'm kinda confused, didn't we fix this already?

[11:23] <tbrowder> no, not yet

[11:24] <AlexDaniel> tbrowder: can you try running Pod::TreeWalker tests?

[11:24] <AlexDaniel> there's one test that is broken now

[11:24] <tbrowder> ok

[11:24] <AlexDaniel> it is related to :caption

[11:25] <tbrowder> noted...

[11:25] <AlexDaniel> tbrowder: let me know if that's something we should fix in rakudo before the release or if it's just something that needs to be adjusted in Pod::TreeWalker

[11:25] <AlexDaniel> (or maybe it's something we should ignore altoghether…)

[11:26] <tbrowder> how much time to release?

[11:27] <AlexDaniel> tbrowder: many-many hours :)

[11:27] <tbrowder> roger...

[11:28] <AlexDaniel> Zoffix: IIRC wander was using emails to leave their comments, and RT shows them only a few days later

[11:29] <AlexDaniel> with unknown success rate…

[11:29] <AlexDaniel> .tell wander by any chance, does that sound relevant? https://irclog.perlgeek.de/perl6/2017-12-15#i_15583699

[11:29] <yoleaux> AlexDaniel: I'll pass your message to wander.

[11:30] <samcv> ok so i have tests now that test lots of codepoints

[11:31] <samcv> tests Name of all codepoints except Hangul's and LineBreak and GeneralCategory

[11:31] <samcv> takes ~14s to run, but if you parallel it then it's faster

[11:31] <tbrowder> ref treewalker, in the test table change “:caption(‘Foo and Bar”) to “:caption<Foo and Bar>” and it should test ok.

[11:31] <samcv> but it uses nqp so it probably needs to go in rakudo test set

[11:39] <AlexDaniel> tbrowder: yeah, but why was it working before and now doesn't?

[11:39] <AlexDaniel> samcv: that sounds awesome!

[11:39] <AlexDaniel> FWIW current blockers: https://github.com/rakudo/rakudo/labels/%E2%9A%A0%20blocker%20%E2%9A%A0

[11:40] <AlexDaniel> huggable: no release :is: See current blockers: https://github.com/rakudo/rakudo/labels/%E2%9A%A0%20blocker%20%E2%9A%A0

[11:40] <huggable> AlexDaniel, Added no release as See current blockers: https://github.com/rakudo/rakudo/labels/%E2%9A%A0%20blocker%20%E2%9A%A0

[11:40] <AlexDaniel> huggable: blockers :is: https://github.com/rakudo/rakudo/labels/%E2%9A%A0%20blocker%20%E2%9A%A0

[11:40] <huggable> AlexDaniel, Added blockers as https://github.com/rakudo/rakudo/labels/%E2%9A%A0%20blocker%20%E2%9A%A0

[11:43] <lizmat> samcv: yeah, should live under "make test"

[11:43] <tbrowder> AlexDaniel: when was before? the :caption capability as a property was recently added.

[11:43] <lizmat> samcv: re substr(Regex), what was the issue number ?

[11:44] <lizmat> m: say Regex ~~ Callable

[11:44] <camelia> rakudo-moar 04eb1da6a: OUTPUT: «True␤»

[11:44] <lizmat> samcv:  underlying issue of the problem

[11:44] <samcv> https://github.com/rakudo/rakudo/issues/1314

[11:50] <samcv> ah

[11:50] <samcv> that makes more sense now :)

[11:52] <AlexDaniel> tbrowder: before (2017-12-11) https://github.com/rakudo/rakudo/commit/2cd266fe08aa386b180dda14c15659c360623c99

[11:53] <AlexDaniel> c: 2cd266fe08^,2cd266fe08 https://gist.githubusercontent.com/AlexDaniel/968e200435b4a706dec2debf7cd9a91f/raw/857229170dc518a7d9d6a1610e4cbd1f67e3cf48/treewalker-regr.p6

[11:53] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[11:53] <committable6> AlexDaniel, https://gist.github.com/ca337853fc2fe8640bdd6576c82f7969

[11:54] <AlexDaniel> tbrowder: ↑

[11:55] <lizmat> samcv: still not suer why it selects the candidate that it does

[12:11] <tbrowder> AlexDaniel: i’m stumped. the caption property fix did nothing i can tell to its representation. how it was working before-hand is a mystery since that string bug has been around since at least 2015.

[12:11] <Geth> ¦ rakudo: samcv++ created pull request #1316: Add tests for testing almost all Unicode codepoints

[12:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1316

[12:11] <synopsebot> RAKUDO#1316 [open]: https://github.com/rakudo/rakudo/pull/1316 Add tests for testing almost all Unicode codepoints

[12:12] <samcv> hmm ok that pr is messed up somehow

[12:13] <samcv> for some reason it shows tons of other commits in the list even though i forked it straight from master

[12:14] <samcv> oh it's trying to merge into nom

[12:14] <lizmat> yeah, been quite a few commits since master diverged from nom :-)

[12:14] <samcv> ok cool that's fixed now. takes ~13 seconds single threaded and much faster if it's threaded

[12:16] <samcv> and is easy to add tests. all you need to do is copy the test file and change the name based on the file the test is generated from. Line_Break:LineBreak.t tests Line_Break property from LineBreak.txt

[12:16] <samcv> and then add an item to the hash in UnipropCheck.pm6 to tell it if it's a str/int/name

[12:18] <samcv> if we start passing more than we are supposed to, a todo will pass. in which case you need to change the number for %expected-loses hash and then the it will then be todo'd and failing (well until which case we get to passing all of them) then it won't be todo'd and won't pass

[12:19] <samcv> which makes sure we get positive confirmation of fixes and negative confirmation of having more failures

[12:19] <Geth> ¦ rakudo: 1da698ab04 | (Elizabeth Mattijsen)++ | src/core/Str.pm

[12:19] <Geth> ¦ rakudo: At least temporarily fix GH #1314

[12:19] <Geth> ¦ rakudo:

[12:19] <Geth> ¦ rakudo: - Regex ~~ Callable is True, that's why it is trying to call it

[12:19] <Geth> ¦ rakudo: - adding a Regex candidate for start did *not* fix the issue

[12:19] <Geth> ¦ rakudo: - I assume that somehow the coercing makes the candidate narrower

[12:19] <Geth> ¦ rakudo: - so fixed by checking for Regex then and there

[12:19] <synopsebot> RAKUDO#1314 [open]: https://github.com/rakudo/rakudo/issues/1314 [LTA] Bad error when mistakenly using `substr` as `subst`

[12:19] <Geth> ¦ rakudo:

[12:19] <Geth> ¦ rakudo: It should be noted that this reminded me of an issue that the sub version

[12:19] <Geth> ¦ rakudo: of an action should call the method version, not the other way around.

[12:19] <Geth> ¦ rakudo: "substr" and others are cases where we didn't fix this yet.  Should maybe

[12:19] <Geth> ¦ rakudo: looked at after the 2017.12 release.

[12:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1da698ab04

[12:43] <tbrowder> AlexDaniel: i see treewalker passing now???

[12:44] <tbrowder> never mind, faked out by last test 8 days ago

[12:54] <tbrowder> one more possibility: test looks for caption property but skips test if property doesn’t exist, so old test worked but now quote prob surfaces.

[13:03] <tbrowder> i recommend changing table caption test to use <> for now to see if that passes. that also should be the best-practice form anyway imho.

[13:23] <AlexDaniel> well yeah the tests pass if you use <>

[14:18] <tbrowder> AlexDaniel: are you still awake?

[14:23] <tbrowder> .tell AlexDaniel my theory is correct. treewalker tests for the caption property and uses it as is if it has content (with bad quotes). if it doesn’t exist, then the value of the config caption key is used AND it is stripped of bad quotes (but the caption property is not stripped). thus the recent failure coincides with the addition of the caption property.

[14:23] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[14:56] <RabidGravy> Hmm AMQP maybe more complicated than my brain thinks it is,  I've typed about half my planned length and I've only got to the first example :-\

[15:09] <AlexDaniel> tbrowder: sooo… how do we fix it if we want to keep it functional for older rakudos also?

[15:09] <yoleaux> 14:23Z <tbrowder> AlexDaniel: my theory is correct. treewalker tests for the caption property and uses it as is if it has content (with bad quotes). if it doesn’t exist, then the value of the config caption key is used AND it is stripped of bad quotes (but the caption property is not stripped). thus the recent failure coincides with the addition of the caption property.

[15:57] <tbrowder> add the stripping action to the treewalker code for the capture property.

[15:58] <timotimo> Zoffix: it's hard to figure out why a given change to the jit causes things to break, because it has big ripple effects; one op missing can prevent entire routines from being jitted, and an inline that wasn't possible before can cause a frame to suddenly have a non-jittable op in it; that was the case with these exception ops

[15:58] <yoleaux> 02:36Z <Zoffix> timotimo: the R#1308 release blocker is due to a JIT commit you made. Perhaps you'd know more what the problem is? I tried to fix it but failed. Some of the info on the bug I gathered: https://github.com/rakudo/rakudo/issues/1308#issuecomment-352154785

[15:58] <yoleaux> 06:21Z <Zoffix> timotimo: One thing I noticed in graph.c, category is MVMint32, but in interp.c it's a MVMuint32 and I think I seen it as MVMint16 somewhere too. Dunno if it matters; tried making 'em the same, but that didn't fix nothing

[15:58] <synopsebot> R#1308 [open]: https://github.com/rakudo/rakudo/issues/1308 [SEGV][severe][⚠ blocker ⚠] Frequent-ish SEQV in Perl 5 integration tests

[15:58] <tbrowder> just as it does now for the same data extracted via the config<caption> access

[16:15] <Geth> ¦ rakudo: 8159e38370 | (Aleks-Daniel Jakimenko-Aleksejev)++ | src/Perl6/Actions.nqp

[16:15] <Geth> ¦ rakudo: Revert "optimize postfix incr to prefix when unwanted"

[16:15] <Geth> ¦ rakudo:

[16:15] <Geth> ¦ rakudo: This reverts commit d98ccea278d1adb23c51139f5572bce840ac6657.

[16:15] <Geth> ¦ rakudo:

[16:15] <Geth> ¦ rakudo: See issue #1315.

[16:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8159e38370

[16:15] <synopsebot> RAKUDO#1315 [open]: https://github.com/rakudo/rakudo/issues/1315 [⚠ blocker ⚠] Postfix→Prefix optimization is too early

[16:15] <Geth> ¦ rakudo: ae6177ca2f | (Aleks-Daniel Jakimenko-Aleksejev)++ | 10 files

[16:15] <Geth> ¦ rakudo: Revert "Revert "Replace postfix ++/-- with prefix where possible""

[16:15] <Geth> ¦ rakudo:

[16:15] <Geth> ¦ rakudo: This reverts commit 370073fcda072566860b970ebf51d4f167945bd9.

[16:15] <Geth> ¦ rakudo:

[16:15] <Geth> ¦ rakudo: See issue #1315.

[16:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ae6177ca2f

[16:19] <AlexDaniel> huggable: blockers

[16:19] <huggable> AlexDaniel, https://github.com/rakudo/rakudo/labels/%E2%9A%A0%20blocker%20%E2%9A%A0

[16:19] <AlexDaniel> OK, then the JIT issue is the only one blocking

[16:28] <tbrowder> AlexDaniel: i have filed PR #4 with treewalker which should fix tests for current and future rakudo

[16:32] <AlexDaniel> tbrowder: OK.

[16:49] <timotimo> Zoffix: another thing you can try after MVM_JIT_DISABLE is MVM_INLINE_DISABLE and MVM_JIT_EXPR_DISABLE

[16:58] <timotimo> AlexDaniel: it's rather easy to fix the postfix/prefix optimization. just have to check $!symbols.is_from_core('&postfix:<++>') and maybe also $!symbols.is_from_core('&prefix:<++>') and the corresponding -- forms in src/Perl6/Optimizer.nqp near line 1500

[16:58] <timotimo> i might not have any opportunity to do and test that before release time happens

[17:03] <timotimo> hm, actually, that part of the optimizer seems to only be about native integer ++ and --

[17:05] <timotimo> not sure where it switches the two around

[17:19] <TimToady> my feeling is anyone who violates the semantic contract of the base operator that way is just asking for it anyway

[17:19] * geekosaur is imagining one of his favorite copypasta schemes

[17:20] <TimToady> there are lots of operators that assume their contract is not overridden like that

[17:21] <geekosaur> 4 cases neary identical but as two opposites: write one, copy to first opposite (and miss simething fixing it up to be the opposite), copy back under first to make the second opposite, copy back under second to complete, forget a fixup at each step, sudenly everything's bass-ackwards

[17:21] <TimToady> guess what happens if you override comma?

[17:21] <TimToady> or EVAL

[17:25] <TimToady> some operators really are "reserved", at least in how you override them, and I'd argue postfix:<++> is in that category

[17:26] <TimToady> and, this is the kicker, if you really follow the contract of the base operator, you *want* that optimization

[17:26] <AlexDaniel> greppable6: sub\ prefix

[17:26] <greppable6> AlexDaniel, https://gist.github.com/ce60156c9adeaddba49cc707d11e18c5

[17:27] <AlexDaniel> greppable6-- markdown escaping

[17:27] <AlexDaniel> greppable6: sub\ postfix

[17:27] <greppable6> AlexDaniel, https://gist.github.com/a57c90abe65d734027603c64fb6ad858

[17:28] <TimToady> so, I would argue that making it optimize only the built-in postfix:<++> would be, in fact, a bug

[17:32] <TimToady> it's an interesting question whether we should attempt to optimize the atomic versions, though...

[17:34] <timotimo> m: my int $foo; sub postfix:<++>(int $a is rw) { say "oh"; $a + 1 }; $foo++

[17:34] <camelia> rakudo-moar ae6177ca2: ( no output )

[17:34] <timotimo> ^- do we want this?

[17:35] <Zoffix> .oO( add a `is not-opt` trait )

[17:35] <TimToady> well, more generally, we could make all optimizations trait-based

[17:35] <TimToady> and then if you equiv to a different op it borrows its traits

[17:36] <TimToady> or borrow the name of, I guess, in this case

[17:36] <Zoffix> There's also a ticket for related topic: should Unicode ops be proper aliases to ASCII versions: https://rt.perl.org/Ticket/Display.html?id=132176#ticket-history

[17:36] <TimToady> but at some point you have to have some axioms

[17:37] <TimToady> I think the ASCII ops should be proper aliases to the Unicode versions :P

[17:38] <Zoffix> :D

[17:39] <AlexDaniel> IIRC that was the case with ∘

[17:40] <AlexDaniel> 786:my &infix:<o> := &infix:<∘>;

[17:40] <AlexDaniel> yea

[17:40] <Zoffix> timotimo: MVM_INLINE_DISABLE=1 MVM_JIT_EXPR_DISABLE=1  both set still have the segfaulkt

[17:41] <timotimo> oh, it has to be MVM_SPESH_INLINE_DISABLE

[17:41] <TimToady> so you see I was thinking that direction when I added infix:<∘> already

[17:41] <TimToady> but yeah, we could do the aliasing better

[17:43] <Zoffix> timotimo: tried all these and still segfaults: MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 MVM_SPESH_OSR_DISABLE=1 MVM_SPESH_INLINE_DISABLE=1 MVM_JIT_EXPR_DISABLE=1 ./perl6 t.t

[17:44] <timotimo> huh

[17:45] <Zoffix> also nine++ commented on the ticket: "So it looks like when P5 code is calling back into P6 code, the P6 subs return value goes missing (retval is NULL). Note that callbacks go through good old fashioned dyncall code."

[17:45] <timotimo> just looking at that right now

[17:46] <nine> Yeah, code in question is SV * retval = cbs->call_p6_callable(p6mg->index, args_rv, &err);

[17:47] <nine> cbs->call_p6_callable is a function pointer passed to from Perl 6 code p5_init_callbacks.

[17:48] <timotimo> Zoffix: if you only comment out one of the cases (throwpayloadlex or throwpayloadlexcaller) which one avoids the bug, i wonder?

[17:49] <Zoffix> IIRC throwpayloadlexcaller

[17:49] * Zoffix tries again

[17:49] <timotimo> hm, if it still does that with inline disabled ... :\

[17:49] <nine> The callback sub should be this one: https://github.com/niner/Inline-Perl5/blob/master/lib/Inline/Perl5.pm6#L775

[17:50] <nine> I guess the CONTROL block is the one thing that's very unusual about that code?

[17:50] <timotimo> you could try removing that, that could be interesting

[17:51] <nine> on it

[17:51] <timotimo> and how about doing it without return?

[17:52] <Zoffix> Yeah, commenting out `case MVM_OP_throwpayloadlexcaller` avoids segfault https://gist.github.com/zoffixznet/e9a216be670f40c9bddd2c75cdf1cd48

[17:53] <nine> Always fails with CONTROL block, never fails without CONTROL block

[17:53] <nine> Also simply moving the return statement to the end of the sub prevents the segfault

[17:55] <timotimo> that's perhaps the "throw out returns at the end of subs" optimization we might have

[17:55] <nine> removing the "return" doesn't change anything

[17:55] <Zoffix> m: sub foo { warn; CONTROL { default { say "meow"; .resume } } }()

[17:55] <camelia> rakudo-moar ae6177ca2: OUTPUT: «meow␤»

[17:55] <Zoffix> m: sub foo { warn; CONTROL { default { say "meow"; .resume } }; return 42 }()

[17:55] <camelia> rakudo-moar ae6177ca2: OUTPUT: «meow␤This exception is not resumable␤  in block  at <tmp> line 1␤  in sub foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤meow␤»

[17:56] <Zoffix> weird this difference happens, no?

[17:57] <Zoffix> running with --optimize=0 still has the segv

[17:58] <Zoffix> compiling moar with perl Configure.pl --no-optimize --optimize=0 still has segv

[18:00] <nine> Something related to exceptions screws up when JITed and a CONTROL block is present. How much code can that be to look through?

[18:03] <timotimo> control blocks introduce a handler for control exceptions; $_.resume shouldn't do something throwish, though, i don't think?

[18:04] <timotimo> and returning with "return" also goes through throwing

[18:04] <timotimo> throwpayload was an optimization introduced for, among other things, returning

[18:04] <b2gills> Note that that postfix:<⚛++> is faster than prefix:<++⚛> which is the opposite of postfix:<++> and prefix:<++>

[18:04] <timotimo> so we don't actually allocate a full exception object for "return" any more since that change

[18:06] <Zoffix> timotimo: the opt for $++ turned into ++$ was recently reverted https://github.com/rakudo/rakudo/commit/8159e38370  . Though I don't know why m: my int $foo; sub postfix:<++>(int $a is rw) { say "oh"; $a + 1 }; $foo++ still goes through some optimization.

[18:07] <timotimo> yeah, that's a different optimization

[18:07] <Zoffix> --optimize=0 still has that behaviour

[18:07] <timotimo> --optimize on perl6 binary?

[18:07] <Zoffix> yeah

[18:07] <timotimo> rakudo has a --optimize=off that turns the optimizer offer than --optimize=0 does

[18:08] <timotimo> though i thought the ++ optimization requires at least level 2

[18:08] <Zoffix> same thing

[18:08] <Zoffix> (I mean optimization still happens)

[18:08] <timotimo> huh, ok, don't know why that is

[18:09] <Zoffix> --target=ast: - QAST::Stmt <sunk final> $foo++

[18:09] <Zoffix> - QAST::Want <sunk>

[18:09] <Zoffix> - QAST::Op(call &prefix:<++>) <sunk> :statement_id<?> ++

[18:10] <Zoffix> Actions, line 257 got an opt

[18:10] <timotimo> it already does it in the parser, eh?

[18:10] <Zoffix> yeah

[18:11] <Zoffix> also on line 382

[18:11] <timotimo> ok, that's not about ++, though, right?

[18:11] <Zoffix> elsif $node.name eq '&postfix:<++>' { $node.name('&prefix:<++>') }

[18:12] <nine> timotimo: note that the .resume won't trigger in our examples

[18:13] <timotimo> i just pulled newest rakudo and that doesn't exist anywhere in my Actions.nqp

[18:13] <tbrowder> .ask AlexaDaniel since you’re supporting backward compatibility for the config quote issue, does that mean a fix should be in 6.d? but i’m not sure it’s a good idea to support a user’s work-around for a known problem. (what do you think about adding a note or warning to that effect in the docs?)

[18:13] <yoleaux> tbrowder: I'll pass your message to AlexaDaniel.

[18:13] <Zoffix> Oh, whoops

[18:13] <Zoffix> Sorry, I wasn't on latest

[18:13] <timotimo> is that what was reverted recently?

[18:14] <timotimo> i only glanced the commit and it looked like all it did was replace $foo++ with ++$foo all over the core setting

[18:14] <Zoffix> A yeah. I didn't even look at the commit.

[18:14] <Zoffix> This one https://github.com/rakudo/rakudo/commit/8159e38370

[18:15] <timotimo> i didn't look at this one at all %)

[18:17] * timotimo is really mostly just fumbling

[18:18] <Zoffix> timotimo: ok, src/Perl6/Optimizer.nqp:1498

[18:18] <Zoffix> That's where it still happens for natives it seems

[18:18] <Zoffix> oh wait ignore me :)

[18:18] <timotimo> right, that's the one that removes calls completely

[18:18] <timotimo> and inlines what it considers the right behavior for ++ and -- to be

[18:20] <Zoffix> Ah, then it *is* it? 'cause I don't see any calls to postfix/prefix ops

[18:20] <Zoffix> in --target=optimize

[18:20] <Zoffix> just QAST::Op(add_i)

[18:20] <timotimo> yeah

[18:20] <timotimo> this is the one that could ask $!symbols.is_from_core

[18:22] <MasterDuke> if i understand the sequence, lizmat converted postfix++ to prefix++ manually, then TimToady added an optimization to do it automatically, then lizmat reverted her commit, then AlexDaniel reverted her revert and TimToady's commit?

[18:22] <AlexDaniel> correct

[18:23] <AlexaDaniel> .

[18:23] <yoleaux> 18:13Z <tbrowder> AlexaDaniel: since you’re supporting backward compatibility for the config quote issue, does that mean a fix should be in 6.d? but i’m not sure it’s a good idea to support a user’s work-around for a known problem. (what do you think about adding a note or warning to that effect in the docs?)

[18:23] <AlexDaniel> tbrowder: no, please fix POD stuff right away

[18:24] <tbrowder> ok

[18:24] <AlexDaniel> tbrowder: my point was that if we're fixing a module, then this fixed module should still work on older rakudos (which is what your PR does, if I understand correctly)

[18:25] <AlexDaniel> so everything is OK

[18:25] <tbrowder> what time zone are you in? you seem to be always working?

[18:27] <tbrowder> ref the module PR: that is a work-around that may not work any more after my quote fix, that is my concern.

[18:27] <MasterDuke> i'm not thinking very quickly today, what's the most generic type that couldn't be a Slip?

[18:30] <Zoffix> m: Slip.^mro.say

[18:30] <camelia> rakudo-moar ae6177ca2: OUTPUT: «((Slip) (List) (Cool) (Any) (Mu))␤»

[18:30] <Zoffix> Anything that ain't those

[18:30] <Zoffix> m: Slip.^roles.say

[18:30] <camelia> rakudo-moar ae6177ca2: OUTPUT: «((Positional) (Iterable))␤»

[18:30] <Zoffix> and those

[18:31] <MasterDuke> hm, that doesn't leave very many "generic" types

[18:32] <Zoffix> yeah

[18:32] <Zoffix> s: &infix:<orelse>

[18:32] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/4fca94743/src/core/operators.pm#L759

[18:33] <Zoffix> ^ another way to handle args without having Slip types slip in

[18:34] <Zoffix> (if that's what you were trying to do that is)

[18:34] <MasterDuke> '+$' ?

[18:34] <Zoffix> and then nqp::p6argvmarray

[18:35] <MasterDuke> yeah, i was going to see if some specialized infix:<,> candidates would be faster

[18:35] <Zoffix> m: use nqp; sub (+a) { dd [a, nqp::p6argvmarray()] }(Empty, Empty)

[18:35] <camelia> rakudo-moar ae6177ca2: OUTPUT: «[(), (Empty, Empty)]␤»

[18:35] <MasterDuke> right now there's only `multi sub infix:<,>()` and `multi sub infix:<,>(|)`

[18:36] <AlexDaniel> tbrowder: UTC+02:00, it's just that my sleeping pattern is a bit irregular https://i.imgur.com/kpPyuRE.png

[18:36] <Zoffix> hah, I can't believe you got a graph for that

[18:38] <AlexDaniel> still a bit unfinished, but it's made with perl 6 \o/

[18:38] <Zoffix> \o/

[18:56] <tbrowder> wow! medical researchers might be interested in that data. do you use some kind of digital tracker like a fit bit to collect the sleep data?

[18:58] <AlexDaniel> no, I just clock in org mode ( http://orgmode.org/manual/Clocking-commands.html )

[19:00] <AlexDaniel> my laptop is the first/last thing I touch when I go to bed anyway, and two key presses is really not that hard

[19:00] <tbrowder> ah, you must use org mode for your all-purpose life organizer, too.

[19:00] <AlexDaniel> no, unfortunately. For that I have a private wiki :)

[19:04] <tbrowder> cool...

[19:22] <Zoffix> So I added a bunch of prints: https://gist.github.com/zoffixznet/f2354880742a51e42520b20568453f66  When I run the segfaulting code, MVM_get_exception_payload shows as it's being called but printf("ZJIT: MVM_OP_getexpayload in\n"); never gets called even tho printf("ZJIT: MVM_OP_throwpayloadlexcaller in\n"); does show up.

[19:22] <Zoffix> Does that say anything?

[19:22] <Zoffix> running with MVM_SPESH_NODELAY=1

[19:36] <bartolin> bisectable6: sub Foo(uint32 :$bar) { say $bar }; Foo(:bar(4)) # RT #127813

[19:36] <bisectable6> bartolin, Bisecting by exit code (old=2015.12 new=ae6177c). Old exit code: 1

[19:36] <synopsebot> RT#127813 [open]: https://rt.perl.org/Ticket/Display.html?id=127813 [BUG] "Bytecode validation error at offset ..., instrucction ..., operand type 160 does not match register type 152"

[19:36] <bisectable6> bartolin, bisect log: https://gist.github.com/47a02a1d446c9ca3b108688f7a450c29

[19:36] <bisectable6> bartolin, (2016-08-19) https://github.com/rakudo/rakudo/commit/25e9fd76e85fabda20e263b6f87e27b0673f26e2

[19:38] <bartolin> Get: ver https://github.com/rakudo/rakudo/commit/25e9fd76e85fabda20e263b6f87e27b0673f26e2

[19:39] <bartolin> Geth: ver https://github.com/rakudo/rakudo/commit/25e9fd76e85fabda20e263b6f87e27b0673f26e2

[19:39] <Zoffix> it's broken

[19:39] <bartolin> hmm

[19:39] <bartolin> ok will look manually, thanks

[19:42] <Zoffix> If I comment out `case MVM_OP_lastexpayload:` in src/jit/graph.c, the segfault goes away....

[19:43] <Zoffix> And ZJIT: MVM_OP_getexpayload in shows up...

[19:43] <Zoffix> timotimo: does that say anything? I see lastexpayload was mentioned in the commit that caused the segv

[19:49] <Zoffix> I guess that just makes teh buggy code avoid JIT and not explode

[19:51] <brrt> whats exploding

[19:51] <brrt> oh, lastexpayload.

[19:51] <Zoffix> c: HEAD use lib '/home/bisectable/git/whateverable/sandbox/Inline-Perl5/lib'; for ^1000 { EVAL('sub { shift->() }', :lang<Perl5>)({;}) }

[19:51] <committable6> Zoffix, ¦HEAD(ae6177c): « «exit signal = SIGSEGV (11)»»

[19:51] <brrt> i recall that one asploding multiple times

[19:51] <brrt> gotcha

[19:52] <Zoffix> brrt: https://github.com/rakudo/rakudo/issues/1308#issuecomment-352154785

[19:52] <brrt> that one, yes

[19:52] <Zoffix> Any idea what it could be? It's blocking release...

[19:52] <brrt> no, that's been mysterious for some time

[19:53] <Zoffix> :'(

[19:53] <Zoffix> I guess that's my cue to give up and go play video games :D

[19:54] <brrt> try reverting this in MoarVM: ba1fb954222810a87f0f5501290877fdcba6aa05

[19:54] <Zoffix> brrt: yeah, that avoids the segv

[19:55] <brrt> that was fast

[19:55] <brrt> then, revert it

[19:55] <Zoffix> brrt: that's 'cause I already did that and mentioned on the comment :) https://github.com/rakudo/rakudo/issues/1308#issuecomment-352154785

[19:55] <brrt> we'll figure out what it breaks after the release

[19:55] <Zoffix> brrt: also, if I comment out `case MVM_OP_lastexpayload:` in src/jit/graph.c, the segfault goes away....

[19:56] <brrt> uhuh

[19:56] <brrt> i recall that one being problematic from before

[19:57] <brrt> good work with the debugging :-)

[19:57] <Zoffix> :)

[19:57] <Zoffix> OK. I think I'll go with just commenting out MVM_OP_throwpayloadlexcaller (basically part of ba1fb954222810a87f0f) 'cause looks like doing just that avoids segv.

[19:57] <Zoffix> Gonna do that after a break.

[20:06] <MasterDuke> anybody have an idea why `multi sub infix:<,>(Str $, Str $) { nqp::p6bindattrinvres(nqp::create(List),List,'$!reified',nqp::p6argvmarray()) }` wouldn't be jitted?

[20:06] <MasterDuke> i see it constructing the jit graph for 'infix:<,>', but i don't see a BAIL

[20:07] <MasterDuke> a profile shows it red

[20:14] <MasterDuke> hm. 2284 times it's going to the` (|)` candidate (marked as OSR), then the remaining 997716 it's going to the `(Str $, Str $)` candidate

[20:15] <MasterDuke> for this code: 'for ^1000000 { my ($a,$b) = "a","b" }'

[20:17] <Zoffix> OOC why mess with nqp::p6argvmarray if you already got 2 strings?

[20:18] <MasterDuke> i just copied the 'no Slip' path from the (|) candidate

[20:18] <Zoffix> Ah

[20:20] <Zoffix> right it's infix:<,>; makes sense

[20:24] <MasterDuke> i'm guessing that a lot of infix:<,> uses are for just two or three elements, might make sense to special case those

[20:26] <MasterDuke> huh, 'my Str $aa = "a"; my Str $bb = "b"; for ^1000000 { my ($a,$b) = $aa,$bb }' doesn't even hit the `(Str $, Str $)` candidate at all

[20:27] <MasterDuke> but 'my Str $aa = "a"; my Str $bb = "b"; for ^1000000 { my (Str $a, Str $b) = $aa,$bb }' does

[20:27] <MasterDuke> oh, and this time it's jitted

[20:45] <Zoffix> ZOFVM: Files=1287, Tests=152976, 155 wallclock secs (21.51 usr  3.18 sys + 3328.27 cusr 175.69 csys = 3528.65 CPU)

[20:54] <Geth> ¦ rakudo: 53a94fe514 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[20:54] <Geth> ¦ rakudo: Bump NQP

[20:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/53a94fe514

[20:54] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.11-59-g499d3f0...2017.11-63-gdc8f067

[20:54] <Geth> ¦ nqp: dc8f0671a2 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[20:54] <Geth> ¦ nqp: Bump MoarVM

[20:54] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/dc8f0671a2

[20:55] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.11-43-g93a77dc...2017.11-48-g0b9f809

[21:05] <DrForr> I'm building out a POD tree that's linked back-n-forth, up--down.

[21:33] <manchicken> Anybody from the docs team around?

[21:34] <manchicken> I submitted a pull request this morning for the perl6/docs repo. I'd be happy to resolve the merge conflict, but I don't know how we'd like to resolve it.

[21:34] <manchicken> Conflict: https://github.com/perl6/doc/pull/1715/conflicts

[21:38] <Zoffix> tbrowder: you around? ^ looks like you'd know about which is right

[21:39] <manchicken> I don't know if there was a reason why that column was pulled from `master`. I pulled that on the 12th.

[21:40] <Zoffix> manchicken: looks like it's this: https://github.com/perl6/doc/commit/1abc77a105df7e87b29e818342bcd3dccce2702f

[21:40] <manchicken> Oooh, I see the log.

[21:40] <manchicken> (That's what I get for not `git log -u`ing)

[21:40] <manchicken> Cool. I'll remove that from my PR :)

[21:44] <manchicken> OK, cool. Conflicts resolved.

[21:48] <tbrowder> Zoffix: i’ll look

[21:50] <tbrowder> oh, i see you found the ref, any probs? i was updating docs for real state of pod as i know it

[22:01] <Zoffix> tbrowder: yeah, we figured it out. Thanks.

[23:49] <timotimo> the day 1 advent post still has the most views and visitors by far

[23:54] <MasterDuke> annoying. `my @b = <5 6>;` causes: Ambiguous call to 'infix:<,>'; these signatures all match: :(Int $, Int $) :(Str $, Str $) :(Int $, Str $) :(Str $, Int $)

[23:55] <Zoffix> It's cause they are IntStrs; you can stick `is default` on one of 'em

[23:56] <Zoffix> m: multi z (Int) { say "here" }; multi z (Str) { say "there" }; z <42>

[23:56] <camelia> rakudo-moar 53a94fe51: OUTPUT: «Ambiguous call to 'z'; these signatures all match:␤:(Int $)␤:(Str $)␤  in block <unit> at <tmp> line 1␤␤»

[23:56] <Zoffix> m: multi z (Int) is default { say "here" }; multi z (Str) { say "there" }; z <42>

[23:56] <camelia> rakudo-moar 53a94fe51: OUTPUT: «here␤»

[23:56] <MasterDuke> huh, wonder if that error message can be improved to include the signature that it's checking

[23:57] <MasterDuke> yep, i tried adding a :(IntStr $, IntStr $) candidate, but then i had to move allomorphs.pm before List.pm and that broke
