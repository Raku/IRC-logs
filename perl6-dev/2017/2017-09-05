[00:32] <AlexDaniel> oh right, Malformed UTF-8 issue fixed!

[00:32] <AlexDaniel> meaning that quotable6 should now work

[00:33] <AlexDaniel> and also that I have to update rakudo on the server…

[05:37] <AlexDaniel> heh, being on the front line again

[05:37] <AlexDaniel> *able tests don't pass, have no idea why

[06:13] <masak> AlexDaniel: there was a point where I felt 007 was often a canary in the coal mine for new bugs/features in Rakudo. :) less so now, though.

[06:13] <masak> mostly because I'm slightly less active myself, I think.

[06:15] <AlexDaniel> I don't think I'll be able to golf it this time

[06:16] <AlexDaniel> no errors, memory usage is ok

[06:16] <AlexDaniel> it just hangs

[06:16] <AlexDaniel> if I remove some of the previous tests it stops hanging

[06:19] <AlexDaniel> .tell MasterDuke maybe you have some idea. committable.t and benchable.t hang on the first “Did you mean …” test

[06:19] <yoleaux> AlexDaniel: I'll pass your message to MasterDuke.

[06:21] <masak> "if I remove some of the previous tests" is always worrying

[06:21] <masak> try running without the JIT?

[06:23] <AlexDaniel> .tell MasterDuke sorry, bisectable.t and benchable.t. So https://github.com/perl6/whateverable/blob/3b1f3ca8ffd277367ff9c5c93adf026215d74167/t/bisectable.t#L165 and https://github.com/perl6/whateverable/blob/3b1f3ca8ffd277367ff9c5c93adf026215d74167/t/benchable.t#L142

[06:23] <yoleaux> AlexDaniel: I'll pass your message to MasterDuke.

[06:23] <AlexDaniel> .tell MasterDuke it may be associated with Sift4 module, which is problematic by itself… for example, it's still leaking memory.

[06:23] <yoleaux> AlexDaniel: I'll pass your message to MasterDuke.

[06:26] <[Tux]> This is Rakudo version 2017.08-79-g4b02b8aad built on MoarVM version 2017.08.1-106-gdd04dd80

[06:26] <[Tux]> csv-ip5xs        1.314 - 1.428

[06:26] <[Tux]> test            10.362

[06:26] <[Tux]> test-t           3.674 - 3.829

[06:26] <[Tux]> csv-parser      12.040

[06:27] <AlexDaniel> masak: same without JIT

[06:27] <masak> ok

[06:27] <masak> well, it seems contingent, so bisecting on Rakudo version might not reveal much

[06:28] <AlexDaniel> I think it can tell a lot

[07:15] <AlexDaniel> .tell jnthn FWIW this is really annoying when running the spectest: RT #132029

[07:15] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132029

[07:15] <yoleaux> AlexDaniel: I'll pass your message to jnthn.

[07:25] <nine> AlexDaniel: a neat trick for a bit of a simpler shell line is: while clear; ./perl6-m -Ilib t/spec/S17-lowlevel/atomic-ops.t ; do true ; done

[07:26] <AlexDaniel> sure

[07:33] <[Tux]> ===> Installing: JSON::Marshal:ver('0.0.13'):auth('github:jonathanstowe')

[07:34] <[Tux]> and later when installing META6

[07:34] <[Tux]> # Could not find JSON::Marshal:ver<0.0.7..*> at line 77 in:

[07:34] <[Tux]> zef has a serious versioning problem

[07:34] <nine> m: { my Int $test-cont = 42; ?$test-cont; }; { my atomicint $set = 0; start { sleep 1; $set ?= 1 }; until ?$set { } }

[07:34] <camelia> rakudo-moar 4b02b8: OUTPUT: «A IntLexRef container does not know how to do an atomic load?  in block <unit> at <tmp> line 1??»

[07:34] <nine> There's the golf :)

[07:34] <nine> Posting to the ticket

[07:35] <[Tux]> CSV tests started to fail

[07:36] <[Tux]> # at t/90_csv.t line 260

[07:36] <[Tux]> # expected: $[["1", "2", "3"], ["2", "a b", ""]]

[07:36] <[Tux]> #      got: $[["1", "2", "3"],]

[07:36] <[Tux]> # Failed test 'AOH parse out'

[07:36] <[Tux]> no time to bisect that right now, must leave for $work

[07:50] <AlexDaniel> [Tux]: it is https://github.com/rakudo/rakudo/commit/4b02b8aadcb47072bc87fb8be8069177b74cd59d

[07:50] <AlexDaniel> bisect log: https://gist.github.com/62a876b09bfecc9aa305061e384f43ce

[07:51] <AlexDaniel> double-check with committable: https://gist.github.com/50bd16934e6bc93ad49a1659cf31bf06

[07:54] <AlexDaniel> ticket created: RT #132030

[07:54] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132030

[07:57] <AlexDaniel> .tell jnthn well, this one is possibly more important: RT #132030

[07:57] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132030

[07:57] <yoleaux> AlexDaniel: I'll pass your message to jnthn.

[07:57] <AlexDaniel> marking as blocker

[08:39] <timotimo> if that commit changes things, maybe an strace of the test run would be interesting

[08:45] <AlexDaniel> [TuxCM]: ?

[08:56] <[TuxCM]> Adding :!buffer to «$io-in = open $in, :r, :!chomp;» did not help

[08:56] <[TuxCM]> on line 1659

[08:56] <[TuxCM]> thanks for the bisect

[09:03] <timotimo> right, it should only matter for handles where isatty returns true

[09:03] <timotimo> and no buffer argument whatsoever was passed

[09:03] <jnthn> :!buffer is irrelevant for an input handle, as it's only about output buffering

[09:03] <yoleaux> 07:15Z <AlexDaniel> jnthn: FWIW this is really annoying when running the spectest: RT #132029

[09:03] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132029

[09:03] <timotimo> iow, that there should already have been buffered anyway

[09:03] <yoleaux> 07:57Z <AlexDaniel> jnthn: well, this one is possibly more important: RT #132030

[09:03] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132030

[09:03] <timotimo> oh, that's a good point, too

[09:04] <timotimo> so something that writes the file you're opening there might be wrong

[09:04] <timotimo> forgot to .close something, for example

[09:04] * jnthn clones Text::CSV to have a look

[09:04] <AlexDaniel> right

[09:04] <jnthn> But I suspect it's going to be a forgotten .close

[09:05] * [TuxCM] is digging ....

[09:06] <jnthn> hm, typing "text csv" on the modules search doesn't find anything

[09:06] <[TuxCM]> csv alone does

[09:06] <jnthn> yeah, just odd :)

[09:08] <[TuxCM]> adding :!buffer to line 1776 fixes the issue

[09:09] <jnthn> $tmpfn doesn't seem to get closed?

[09:09] <[TuxCM]> line 1888 does a .close

[09:09] <jnthn> oh, that's not hte handle

[09:09] <[TuxCM]> $io-out is the handle in question

[09:09] <jnthn> yeah, confused reading

[09:10] <jnthn> I note there's various codepaths that look like they can return early, though

[09:11] <timotimo> so maybe add a LEAVE phaser to handle closing?

[09:11] <jnthn> yeah, trying that

[09:13] <jnthn> Somehow that doesn't do it though

[09:13] <jnthn> It closes it too early?

[09:13] <[TuxCM]> with that :!buffer added (despite a better fix might be in place), only META6 still fails

[09:14] <jnthn> That'll work, but lose a performance benefit on writing CSV to a file, I guess.

[09:14] <jnthn> Trouble with doing it with a LEAVE phaser is that in some cases it actually wants to close it earlier

[09:15] <timotimo> LEAVE try $fh.close :P

[09:19] <jnthn> This lets it work with buffering: https://gist.github.com/jnthn/a999df1f89d24cdc6ffac42ca55be806

[09:23] <[TuxCM]> anyone to prod for the zef versioning problem?

[09:25] <timotimo> it's about META6 again

[09:25] <[TuxCM]> yes

[09:26] <timotimo> that module did something that caused the complete installation directory to become b0rked

[09:26] <timotimo> or something

[09:26] <timotimo> well, the module did something or zef did something with it

[09:28] <[TuxCM]> «zef upgrade» also started failing: https://gist.github.com/Tux/1fd67a242c11db395fefd466877461f4

[09:40] <jnthn> Commented on RT #132030

[09:40] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132030

[09:48] <jnthn> Hm, interestingly the atomic fragility looks like a spesh bug

[09:48] <jnthn> At least, it goes away under MVM_SPESH_DISABLE=1

[09:48] <jnthn> In nine++'s golf

[10:06] <Geth> ¦ roast: 346f058338 | skids++ (committed by Zoffix Znet) | S04-statements/do.t

[10:06] <Geth> ¦ roast: Fix test that expected pre-GLR behavior.  RT##124572. (#305)

[10:06] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=124572

[10:06] <Geth> ¦ roast:

[10:06] <Geth> ¦ roast: * Fix test that expected pre-GLR behavior.  RT##124572.

[10:06] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=124572

[10:06] <Geth> ¦ roast:

[10:06] <Geth> ¦ roast: * Also test some non-constant-folded conditions

[10:06] <Geth> ¦ roast:

[10:06] <Geth> ¦ roast: * Add a comment explaining use of now() to prevent constant folding

[10:06] <Geth> ¦ roast:

[10:06] <Geth> ¦ roast: * Actually, makes more sense to add seconds.

[10:06] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/346f058338

[10:30] <dogbert17> jnthn: it also seems to go away with MVM_SPESH_OSR_DISABLE

[10:31] <jnthn> dogbert17: Yeah, fixed already :)

[10:31] <jnthn> (By HEAD commit in MoarVM)

[10:32] <nine> jnthn: sooo the sleep did not demonstrate a race condition in the code but just gave spesh enough time to replace the code?

[10:34] <jnthn> nine: Yes

[10:34] <nine> Then I guess MVM_SPESH_BLOCKING demonstrated it as well? It's a bit of an irony that the bug showed up in this place of all :)

[10:35] <jnthn> Didn't try that, but in theory yes

[10:35] <jnthn> Well, or "it depends"

[10:35] <jnthn> Blocking only means we block on doing spesh once we have filled the spesh log

[10:36] <jnthn> The thread we start could still assign the value before we did enough loops to fill the log and thus to spesh things

[10:39] <nine> One thing that started to worry me when working on JITed native call: our tests and spec tests are usually very short. So the will be affected by spesh and JIT much less than real world code.

[10:39] <jnthn> Yes, thus why I do runs of them with MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1

[10:40] <jnthn> Ditto with NQP/Rakudo builds

[10:40] <jnthn> The "no delay" means "spesh code that's cold anyway"

[10:40] <jnthn> And helps shake out more issues

[11:02] <pmurias> m: "10000000000000000000000000000" ~~ /^(\d+)$/; say $0.Int

[11:02] <camelia> rakudo-moar 4b02b8: OUTPUT: «-9223372036854775808?»

[11:02] <pmurias> ^^ is that a bug?

[11:06] <pmurias> the Match class is taking the Int method from the NQPMatchRole

[11:13] <Skarsnik> m: "10000000000000000000000000000" ~~ /^(\d+)$/; say $0

[11:13] <camelia> rakudo-moar 4b02b8: OUTPUT: «?10000000000000000000000000000??»

[11:14] <Skarsnik> bisectable6, "10000000000000000000000000000" ~~ /^(\d+)$/; say $0.Int == 10000000000000000000000000000

[11:14] <bisectable6> Skarsnik, Bisecting by output (old=2015.12 new=4b02b8a) because on both starting points the exit code is 0

[11:14] <bisectable6> AlexDaniel, MasterDuke: I'm acting stupid on #perl6-dev. Help me.

[11:15] <bisectable6> Skarsnik, No! It wasn't me! It was the one-armed man! Backtrace: https://gist.github.com/ebb88e2b94e88edafb5e6270d728b2ae

[11:15] <Skarsnik> damn

[11:17] <Skarsnik> c: "10000000000000000000000000000" ~~ /^(\d+)$/; say $0.Int == 10000000000000000000000000000

[11:17] <Skarsnik> commitable not here, hm

[11:39] <dogbert17> jnthn: chances are high that you just fixed https://github.com/MoarVM/MoarVM/issues/653

[12:04] <jnthn> dogbert17: Yes, that's exactly what I fixed :)

[12:04] <jnthn> pmurias: Looks like Rakudo should have its own Int candidate that can do the coercion to a bigint

[12:07] <Zoffix> Skarsnik: ^ it's back now. You need a commit with `c:` tho

[12:07] <Zoffix> c: 2017.01 "10000000000000000000000000000" ~~ /^(\d+)$/; say $0.Int == 10000000000000000000000000000

[12:07] <committable6> Zoffix, ¦2017.01: «True»

[12:07] <Skarsnik> c: old "10000000000000000000000000000" ~~ /^(\d+)$/; say $0.Int == 10000000000000000000000000000

[12:07] <committable6> Skarsnik, ¦old: «Cannot find this revision (did you mean “all”?)»

[12:08] <Skarsnik> c: 2015.1 "10000000000000000000000000000" ~~ /^(\d+)$/; say $0.Int == 10000000000000000000000000000

[12:08] <committable6> Skarsnik, ¦2015.1: «Cannot find this revision (did you mean “2015.12”?)»

[12:08] <Skarsnik> c: 2015.01 "10000000000000000000000000000" ~~ /^(\d+)$/; say $0.Int == 10000000000000000000000000000

[12:08] <committable6> Skarsnik, ¦2015.01: «True»

[12:08] <Zoffix> I'm betting the change came in when Cursor and Match were unified

[12:08] <Skarsnik> c: HEAD "10000000000000000000000000000" ~~ /^(\d+)$/; say $0.Int == 10000000000000000000000000000

[12:08] <committable6> Skarsnik, ¦HEAD(4b02b8a): «False»

[12:08] <Zoffix> c.2017.03

[12:08] <Skarsnik> dunno why bisectable6 die

[12:08] <Zoffix> c: 2017.02,2017.03,2017.04 "10000000000000000000000000000" ~~ /^(\d+)$/; say $0.Int == 10000000000000000000000000000

[12:08] <committable6> Zoffix, ¦2017.02,2017.03: «True» ¦2017.04: «False»

[12:09] <Skarsnik> should be added to roast maybe?

[12:09] <Zoffix> Skarsnik: because it was a weird merge and it can't pick out when it actually broke; it least I recall it having issues with the Match+Cursor introed bugs

[12:12] <Zoffix> Skarsnik: sure, after it's fixed :D

[12:23] <pmurias> Unhandled exception: Missing or wrong version of dependency '/home/pmurias/nqp/install/bin/../share/nqp/lib/MAST/Nodes.nqp' (from 'src/Perl6/Pod.nqp')

[12:23] <pmurias> ^^ why does that happen?

[12:24] <jnthn> pmurias: Hm, thought I fixed that in https://github.com/rakudo/rakudo/commit/fb0b3eb5c79223f3f9b63d9ab1d9a19c649a20c1

[12:25] <jnthn> pmurias: It was due to wrong lib search path order in the (non-install) runner though

[12:30] <pmurias> makefiles -= Inf :/

[12:30] * pmurias goes to grab some lunch&

[12:30] <jnthn> every-makefile-replacement -= 2 * Inf ;)

[12:54] <dogbert17> c: HEAD MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 use Test; { { my sub foo { fail }(); CATCH { default { my $bt = .backtrace; is $bt.list.elems, 4, "we correctly have 4 elements in .list"; }} } }

[12:54] <committable6> dogbert17, https://gist.github.com/d262f427671ac6551a1a41cbe0801228

[12:55] <dogbert17> c: HEAD MVM_SPESH_NODELAY=1 use Test; { { my sub foo { fail }(); CATCH { default { my $bt = .backtrace; is $bt.list.elems, 4, "we correctly have 4 elements in .list"; }} } }

[12:55] <committable6> dogbert17, https://gist.github.com/8578c66774e0902aad01e0182076665d

[12:56] <dogbert17> bad bot

[13:46] <Geth> ¦ nqp: ffa3e56f61 | pmurias++ | src/QRegex/Cursor.nqp

[13:46] <Geth> ¦ nqp: Make Int on rakudo's Match return an Int not a nqp level int.

[13:46] <Geth> ¦ nqp:

[13:46] <Geth> ¦ nqp: Move the Int method from NQPMatchRole to NQPMatch so that rakudo

[13:46] <Geth> ¦ nqp: will use the more correct bignum using Int method from Cool.

[13:46] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ffa3e56f61

[14:46] <robertle> what's the right way to do reflection? I am currently using can() to get the accessor of an attribute by it's name, and I can call that. but it also would like to know if the attribute is Listy or a scalar. how can I do that?

[14:48] <Skarsnik> $obj or Class.^attributes to get a table of the attributes

[14:48] <Skarsnik> m: say IO::Path.^attributes;

[14:48] <camelia> rakudo-moar 4b02b8: OUTPUT: «()?»

[14:49] <Skarsnik> m: say Int.^attributes;

[14:49] <camelia> rakudo-moar 4b02b8: OUTPUT: «(bigint $!value)?»

[14:49] <Skarsnik> m: say Int.^attributes.WHAT;

[14:49] <camelia> rakudo-moar 4b02b8: OUTPUT: «(List)?»

[14:49] <Skarsnik> hm

[14:49] <timotimo> don't forget you can also $myinstance."$attributename"()

[14:49] <Skarsnik> should this be an Array[Attributes] ?

[14:50] <Skarsnik> timotimo, is that not just a method call to the attribyte accessor?

[14:50] <timotimo> yes

[14:50] <[Coke]> jnthn: https://github.com/jnthn/p6-io-socket-async-ssl/issues/19 (a real bug this time, not a META bug. :)

[14:53] <jnthn> [Coke]: Urgh :(

[14:53] <jnthn> Can you include the SSL library version also?

[14:53] <[Coke]> This after a nuke-everything-from-orbit reinstall of rakudo HEAD to avoid dep hell.

[14:54] <jnthn> (the libssl one, I mean)

[14:54] <timotimo> wow, that was easy

[14:55] <[Coke]> jnthn: openssl @1.0.2l (devel, security) (checking for an update in ports now)

[15:58] <lizmat> Files=1223, Tests=67677, 290 wallclock secs (11.13 usr  4.76 sys + 1961.08 cusr 204.06 csys = 2181.03 CPU)

[16:08] <Geth> ¦ rakudo/nom: c39db87895 | (Elizabeth Mattijsen)++ | src/core/Set.pm

[16:08] <Geth> ¦ rakudo/nom: A null byte was intended, Zefram++

[16:08] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c39db87895

[16:10] <timotimo> lizmat: don't we still have to replace null bytes in our strings with something escaped? so you can't write strings with a nullbyte in them and pretend they are multiple consecutive elements

[16:14] <lizmat> timotimo: as long as we keep using strings for .WHICH values, we cannot prevent confusion, just obfuscate the possibilities for it (somewhat)

[16:14] <lizmat> m: sub a(*@a) { dd @a }; a Nil

[16:14] <camelia> rakudo-moar 4b02b8: OUTPUT: «[Nil]?»

[16:14] <lizmat> m: sub a(**@a) { dd @a }; a Nil

[16:14] <camelia> rakudo-moar 4b02b8: OUTPUT: «[Any]?»

[16:15] <lizmat> that last one is a bit counter-intuitive and the issue behind RT #132032

[16:15] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132032

[16:16] <timotimo> we can. escaping is a thing that works.

[16:23] <lizmat> timotimo: maybe I'm not understanding what you mean by escaping

[16:24] <lizmat> I've looked at Zefram's proposal, but that will cause a massive performance drop

[16:24] <lizmat> affecting all QuantHashes and object hashes

[16:25] <lizmat> this needs to be done at the VM level, afaics

[16:28] <timotimo> we only have to escape a string if it has a \ or nullbyte in it, which gives us a decent enough fast path and slow path

[17:05] <[Coke]> jnthn: re the alpn support, looks like it's supposed to be in 1.0.2

[17:06] <jnthn> Oh...right, think I'm confusing versions

[17:06] <jnthn> The issue you reported is nothing to do with ALPN though, fwiw

[17:07] <jnthn> (I don't yet know what it is, alas)

[17:08] <[Coke]> ... I just reran that test and it worked.

[17:08] <jnthn> Yeah, I suspect it's heisenbug-y

[17:08] <jnthn> Which gives me hope I might be able to reproduce it with enough load/runs too

[17:09] <[Coke]> trying to get something to chew up the CPU and will try again.

[17:09] <jnthn> ok; back after dinner :)

[17:09] <[Coke]> yup, did a zef install in another window, then it died again.

[18:03] <ugexe> recently been figuring out I can't casually use | for Slip as much as I thought - notably with positional arguments

[18:03] <ugexe> m: my $bytes = Buf.allocate(1000000); say buf8.new($bytes.Slip).bytes; say buf8.new(|$bytes).bytes;

[18:03] <camelia> rakudo-moar c39db8: OUTPUT: «1000000?Too many arguments in flattening array.?  in block <unit> at <tmp> line 1??»

[18:04] <AlexDaniel> heh, what's wrong with github…

[18:04] <AlexDaniel> “We are investigating issues loading stylesheets”

[18:04] <AlexDaniel> okay

[18:08] <Skarsnik> AlexDaniel, I hate this gumbo crash :)

[18:08] <AlexDaniel> Skarsnik: yes. Me too.

[18:09] <Skarsnik> I can't even make it crash on my vm now x)

[18:14] <Skarsnik> I changed the script to my $response = "index.html".IO.slurp;

[18:14] <Skarsnik> not sure if that should change something, but it does not want to crash on the rakudo I working on

[18:15] <Skarsnik> (I just added some printf to trace nc cal)

[18:18] <Zoffix> ugexe: note that the two are different in that context. | in argument list isn't prefix:<|>, it's special sauce. And $bytes.Slip sends just one argument

[18:21] <Zoffix> (special sauce => special compiler handling that calls secret methods .FLATTENABLE_HASH and .FLATTENABLE_LIST)

[18:21] <ugexe> yeah, i was thinking the limit applied only to named arguments for some reason

[18:23] <ugexe> and have historically reached for | because .Slip looks off to me (i want to see .slip but i understand why its like this)

[19:29] <AlexDaniel> heh, *ables were misbehaving today? :)

[19:29] <AlexDaniel> bisect: "10000000000000000000000000000" ~~ /^(\d+)$/; say $0

[19:29] <bisectable6> AlexDaniel, On both starting points (old=2015.12 new=c39db87) the exit code is 0 and the output is identical as well

[19:29] <bisectable6> AlexDaniel, Output on both points: «?10000000000000000000000000000?»

[19:30] <AlexDaniel> err, already fixed?

[19:30] <AlexDaniel> bisect: "10000000000000000000000000000" ~~ /^(\d+)$/; say $0.Int

[19:30] <bisectable6> AlexDaniel, Bisecting by output (old=2015.12 new=c39db87) because on both starting points the exit code is 0

[19:30] <AlexDaniel> ah

[19:30] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/5eefdbf975e6d19f27747fd5bedd0070

[19:30] <bisectable6> AlexDaniel, (2017-04-15) https://github.com/rakudo/rakudo/commit/c01ebea0a0dcd8175facf3f7f18d4870427291df

[19:30] <AlexDaniel> o_o

[19:31] <AlexDaniel> nah xD

[19:31] <Zoffix> Already fixed but still need nqp bump

[19:32] <AlexDaniel> hm… some troubles when building c01ebea0a0dc

[19:32] <AlexDaniel> Skarsnik: ? this is why it failed today. The build is there but it's broken

[19:33] <AlexDaniel> c: MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 HEAD use Test; { { my sub foo { fail }(); CATCH { default { my $bt = .backtrace; is $bt.list.elems, 4, "we correctly have 4 elements in .list"; }} } }

[19:33] <committable6> AlexDaniel, ¦HEAD(c39db87): «not ok 1 - we correctly have 4 elements in .list?# Failed test 'we correctly have 4 elements in .list'?# at /tmp/1ErKgNSqLK line 1?# expected: '4'?#      got: '3' «exit code = 1»»

[19:33] <AlexDaniel> dogbert17: the syntax is different ?

[19:33] <AlexDaniel> dogbert17: env variables first, then revision

[19:34] <dogbert2> AlexDaniel: thx

[19:34] <dogbert2> c:  HEAD use Test; { { my sub foo { fail }(); CATCH { default { my $bt = .backtrace; is $bt.list.elems, 4, "we correctly have 4elements in .list"; }} } }

[19:34] <committable6> dogbert2, ¦HEAD(c39db87): «ok 1 - we correctly have 4elements in .list»

[19:37] <AlexDaniel> dogbert2: also: https://github.com/perl6/whateverable/issues/228

[20:12] <samcv> good *

[21:54] <ugexe> where do values like @nqp::libdir@ get set for Configure.pl ?

[21:54] <ugexe> and Makefile-*.in

[21:55] <timotimo> i imagine that's a "namespace" populated from nqp --show-config?

[21:55] <timotimo> in fact, that already has the nqp:: and moar:: prefixes in it

[21:58] <ugexe> i see

[21:59] <ugexe> i'm trying to get rakudo/nqp/moar to build on windows when there is a space in the path... its not pretty

[22:03] <timotimo> oof

[22:03] <timotimo> i believe [Coke] worked on this in the past

[22:03] <timotimo> there's potentially still a "spaceless" branch to be found in git

[22:10] <ugexe> i have what should be a mostly working branch, except for nqp::libdir giving me the RHS of a path split on a space

[23:10] <Geth> ¦ nqp/heapsnapshot_binary_format: e85bb796a3 | (Timo Paulssen)++ | src/vm/moar/HLL/Backend.nqp

[23:10] <Geth> ¦ nqp/heapsnapshot_binary_format: support the new heapsnapshot API

[23:10] <Geth> ¦ nqp/heapsnapshot_binary_format:

[23:10] <Geth> ¦ nqp/heapsnapshot_binary_format: No longer returns an object we have to dump ourselves. Instead we

[23:10] <Geth> ¦ nqp/heapsnapshot_binary_format: pass a filename at the beginning where snapshots will be stored

[23:10] <Geth> ¦ nqp/heapsnapshot_binary_format: immediately, with shared data (strings, types, static frames) appended

[23:10] <Geth> ¦ nqp/heapsnapshot_binary_format: at the end.

[23:10] <Geth> ¦ nqp/heapsnapshot_binary_format: review: https://github.com/perl6/nqp/commit/e85bb796a3
