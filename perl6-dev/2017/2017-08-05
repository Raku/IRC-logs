[00:44] <timotimo> i also love reading the p6w

[01:11] <MasterDuke> lizmat++ p6w++ i read it long before i started contributing

[05:55] <lizmat> Files=1217, Tests=67448, 253 wallclock secs (13.52 usr  5.10 sys + 1660.81 cusr 159.66 csys = 1839.09 CPU)

[05:55] <yoleaux> 4 Aug 2017 22:24Z <japhb> lizmat: Everything works and installs with no test problems on 2017.07

[05:55] <yoleaux> 4 Aug 2017 22:27Z <japhb> lizmat: In case you want to replicate: I rebuild rakudo from fresh checkouts of all rakudo/nqp/moar, install panda and zef, then run: zef --/tap-harness --/cached install URI File::Temp p6doc Terminal::ANSIColor Term::termios Debugger::UI::CommandLine JSON::Tiny DBIish Linenoise Inline::Perl5 Inline::Python IRC::Client oo-monitors Grammar::Debugger App::Mi6 HTTP::UserAgent

[09:42] <lizmat> afk for the next 30 hours or so&

[09:57] <Geth> ¦ nqp/master: 6 commits pushed by pmurias++

[09:57] <Geth> ¦ nqp/master: f7f5e48e84 | [js] Make EVAL :lang<JavaScript>, ... work in rakudo.js

[09:57] <Geth> ¦ nqp/master: 2a381800ba | [js] Handle undefined returned from executed JavaScript

[09:57] <Geth> ¦ nqp/master: 8dcbb3c077 | [js] Stringify negative zero as '-0'

[09:57] <Geth> ¦ nqp/master: 0b594ef801 | Test stringifying -0

[09:57] <Geth> ¦ nqp/master: 1b3b1d2f98 | [js] Make nqp::objectid work with nqp::null

[09:57] <Geth> ¦ nqp/master: 980a07ee96 | Add a &dies-ok to the setting so that it can be shared across tests

[09:57] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/82d06ccf35...980a07ee96

[10:12] <Geth> ¦ nqp: dc418da31f | pmurias++ | 2 files

[10:12] <Geth> ¦ nqp: [js] Use SPDX style license identifiers

[10:12] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/dc418da31f

[10:27] <travis-ci> NQP build failed. pmurias 'Add a &dies-ok to the setting so that it can be shared across tests'

[10:27] <travis-ci> https://travis-ci.org/perl6/nqp/builds/261279138 https://github.com/perl6/nqp/compare/82d06ccf350b...980a07ee9621

[10:29] <travis-ci> NQP build failed. pmurias '[js] Use SPDX style license identifiers'

[10:29] <travis-ci> https://travis-ci.org/perl6/nqp/builds/261281620 https://github.com/perl6/nqp/compare/980a07ee9621...dc418da31f09

[10:44] <[Tux]> This is Rakudo version 2017.07-132-gabf1cfe72 built on MoarVM version 2017.07-320-g600c2e9c

[10:44] <[Tux]> csv-ip5xs        2.535

[10:44] <[Tux]> test            12.029

[10:44] <[Tux]> test-t           3.660 - 3.706

[10:44] <[Tux]> csv-parser      14.252

[10:44] <[Tux]> buggable: speed

[10:44] <buggable> [Tux], ?????????????????????????????????????????????????? data for 2017-07-16–2017-08-05; range: 3.660s–4.960s; 17% faster

[10:50] <dogbert2> now that's an impressive boost

[11:27] <timotimo> wowza

[11:40] <dogbert2> #join #moarvm

[11:40] <dogbert2> ww

[11:40] * jnthn wonders if that's a new lowest time for test-t

[11:42] <dogbert2> i'd say so yes

[11:42] <dogbert2> but will it be possible to squeeze below three seconds?

[11:42] <dogbert2> :)

[11:45] <jnthn> m: say 3 / 3.6

[11:45] <camelia> rakudo-moar abf1cf: OUTPUT: «0.833333?»

[11:45] <jnthn> m: say 3 / 3.7

[11:45] <camelia> rakudo-moar abf1cf: OUTPUT: «0.810811?»

[11:45] <jnthn> Will need finding 20% or so

[11:45] <dogbert2> do you think it's possible?

[11:46] <dogbert2> perhaps more data, i.e. profile and/or callgrind results, are needed in order to form an opinion?

[11:47] <jnthn> It's possible, question is more one of how hard it will be :)

[11:48] <dogbert2> perhaps we'll see next week :)

[11:48] <dogbert2> have you gotten rid of the heatwave yet?

[11:48] <jnthn> It's also a bit hard to know up-front the impact of a change.

[11:48] <jnthn> No. But today is the last day.

[11:49] <dogbert2> only have 19 degrees myself

[11:50] <jnthn> For example, the exception flow control representation thing I uncovered yesterday has potential, if I can sort something better out there, to allow for better code inside of hot loops, which may make a notable difference.

[11:52] <dogbert2> that sounds promising, are any ideas bubbling up?

[11:53] <dogbert2> would the above have any impact on 'next' phasers? I know that [Tux] has complained about them

[11:53] <jnthn> next phasers, or just the "next" op?

[11:54] <dogbert2> hmm, without checking the source I'd have to say op

[11:55] <dogbert2> I might misremember but I believe [Tux] has said that it is slow

[11:55] <jnthn> Depending on the code structure there's various things we might be able to do

[11:55] <MasterDuke> https://irclog.perlgeek.de/perl6-dev/2017-04-30#i_14509773

[11:56] <MasterDuke> https://irclog.perlgeek.de/perl6-dev/2017-04-15#i_14431632

[11:56] <dogbert2> MasterDuke++

[11:59] <jnthn> My rough idea to try out on Monday, though, is to see if we can split code into basic blocks in a few more places, so we can put edges from those to the exception handler, instead of anchoring it from the graph root

[12:00] <dogbert2> what would be the gain of doing that?

[12:00] <jnthn> Which should move them further down the dominane tree, meaning that SSA will produce less PHI nodes with spurious merges.

[12:01] <jnthn> If you think of the control flow graph of a program, PHI nodes go at merge points

[12:01] <jnthn> And they say how a value can come to have its data

[12:02] <jnthn> Their significance for optimization is that we have to merge the things we know about values at the PHI node

[12:02] <jnthn> And if one of them is "we know what type this is" and the other is "we don't know anything" then we have to assume we don't know anything" then we have to assume we don't know anything.

[12:03] <jnthn> From that point on

[12:04] <jnthn> Which means that if you call .iterator before a loop, and .pull-one on it in the loop, then today the PHI node at the top of the loop was a merge of "we know it's an Iterator" with "it could be anything 'cus we could arrive here by an exception handler"

[12:04] <jnthn> Whereas if we could place the handler-related edges more precisely, we might instead get to a situation of "we know it's an Iterator"

[12:05] <jnthn> Which would mean we could resolve the .pull-one method lookup and not have to do it every time, and then potentially further resolve it to a particular spesh candidate, and if that's small enough, inline it.

[12:05] <dogbert2> are there many 'spurious merges' done today?

[12:06] <jnthn> I suspect this happens in every loop, except those in NQP that are inferred as never using next/last/redo

[12:06] <jnthn> (Which is a cheat that we can't really do in full Perl 6)

[12:07] <jnthn> And anything optimization you do on code running in a loop multiplies out over the number of iterations :)

[12:08] <dogbert2> very interesting, sound like there are some massive speedups lurking there :)

[12:08] <jnthn> Quite possibly, yeah

[12:42] <MasterDuke> fyi, the previous low for test-t was 3.907

[12:57] <pmurias> what's test-t?

[12:58] <MasterDuke> [Tux]'s Text::CSV benchmark canary

[13:22] <dogbert2> bisect: multi foo ($) {"right" }; multi foo ($ is rw) {"wrong"}; say foo "42"

[13:22] <bisectable6> dogbert2, Bisecting by output (old=2015.12 new=abf1cfe) because on both starting points the exit code is 0

[13:23] <bisectable6> dogbert2, bisect log: https://gist.github.com/c975e82c33c0fdf8b310645cdddf94fa

[13:23] <bisectable6> dogbert2, (2017-01-31) https://github.com/rakudo/rakudo/commit/f8b3469439108fead043bab2bd27bde4bac50dca

[13:24] <dogbert2> Zoffix: you awake?

[13:24] <Zoffix> wow! Those test-t times!

[13:25] <dogbert2> Zoffix: looks as if RT #129812 was fixed by the commit above

[13:25] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=129812

[13:25] <Zoffix> cool

[13:25] <dogbert2> unless you have a trickier example

[13:25] * Zoffix has nothing

[13:35] <nine> Only 1.1 seconds before I really have to speed up Inline::Perl5 somehow :)

[13:35] <yoleaux> 2 Aug 2017 15:06Z <Zoffix> nine: would you have any ideas on this ticket? https://rt.perl.org/Ticket/Display.html?id=131831

[13:37] <Zoffix> nine: FWIW ugexe++ said the original user is incorrectly setting paths, so perhaps the throwage happening is inevitable, but perhaps at least the error could be improved?

[13:42] <jnthn> nine: Native calls becoming cheaper would be one way for it to speed up. :)

[13:44] * Zoffix & # for rest of the long weekened

[13:44] <timotimo> there's a lot of wasted potential in our nativecall

[13:47] <nine> Yes, making NativeCall cheaper sounds like my kind of fun :)

[14:12] <nine> Zoffix: closed https://rt.perl.org/Ticket/Display.html?id=131831

[15:04] <dogbert2> stupid question time: what is the purpose of this line: https://github.com/MoarVM/MoarVM/blob/master/src/io/asyncsocket.c#L445

[15:05] <dogbert2> is it useless or should 'data' be used for something which has possibly been forgotten?

[15:11] <MasterDuke> looks like it changed in https://github.com/MoarVM/MoarVM/commit/2b0739d85b7e2747c403bcf3d60430e4b9f0eedd

[15:11] <MasterDuke> it was used prior to that commit

[15:16] <timotimo> looks like it was refactored to not be needed any more

[15:31] <dogbert2> cool, should we leave it be?

[15:32] <timotimo> we can delete it

[15:40] <dogbert2> ok, while you're still here, what about this, can it also be removed? https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/ReentrantMutex.c#L120

[15:41] <timotimo> that's for the commented out telemetry stuff

[15:42] <dogbert2> I'll ignore that then :)

[15:42] <timotimo> you can comment it out, though

[15:46] <dogbert2> will do, and the last one: https://github.com/MoarVM/MoarVM/blob/master/src/core/fixedsizealloc.c#L227

[15:50] <timotimo> well, it's surely unused there

[15:51] <dogbert2> perhaps a rest from some other refactor

[16:25] <AlexDaniel> regarding latest performance changes… I'm seeing something weird. After upgrading rakudo yesterday, whateverable tests started timing out (so things that used to be fast are now slower?)

[16:25] <AlexDaniel> can't really tell what the issue is precisely, but my guess is that long-running processes are getting slower over time

[16:26] <AlexDaniel> don't have enough data to report something useful though :(

[16:36] <AlexDaniel> I mean, I had to do this to make the tests pass: https://github.com/perl6/whateverable/commit/be9c01a870b6ee945e0c33349e9eb8925aca76e9

[16:36] <AlexDaniel> does not look right to me, but *shrug*

[16:36] <Geth> ¦ nqp: f6c245875f | (Stefan Seifert)++ | t/hll/06-sprintf.t

[16:36] <Geth> ¦ nqp: Fix wrong test count after commit 980a07ee96216a43958d54878e187a7b0abd8cf1

[16:36] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f6c245875f

[16:36] <AlexDaniel> if anybody notices something similar, please let me know

[16:38] <jnthn> AlexDaniel: I don't have any particular ideas, but could also be good to check if memory use is growing unexpectedly

[16:39] <jnthn> Though I already fixed the place I knew we could retain closures a lot longer and "leak" (more like long delay to release) that way.

[16:39] <jnthn> So I've no idea really what could be going on.

[16:40] <nine> jnthn: looks like there's a bit of rain coming your way. ETA 2-3 hours.

[16:40] <jnthn> \o/

[16:41] <jnthn> Last I glanced the forecast we had a chance of a storm in ~2 hours

[16:41] <jnthn> Rain or storm would be nice, it'll take the heat off before bedtime :)

[16:41] <jnthn> Also this is seemingly the last day of the heatwave here :)

[16:41] <AlexDaniel> I should probably write tests to ensure that memory usage of bots is less than some number, that would ring the bell rather quickly if a leak is introduced

[16:43] <nine> Looking at the sat images, it's hard to tell. There's certainly rain moving through Germany in your direction, but the clouds also seem to dissipate a little as they enter Czechia.

[16:47] <jnthn> Forecast still has rain/storms around 9pm-10pm, so here's hoping :)

[16:48] <jnthn> At the moment I'm making it hotter in here by cooking pau bahji... :)

[16:50] <nine> jnthn: sounds delicious :) I'm gonna be lazy again and will throw a couple veggies on the barbeque soon.

[16:51] <jnthn> Mmm. :)

[16:52] * jnthn tries to work on a spesh blog post in the spare moments between doing stuff

[17:04] <dogbert2> .oO(curry tasting blog post :)

[17:06] <AlexDaniel> ooooh yes it does leak!

[17:07] <AlexDaniel> but only in some cases… hmmmm

[17:07] <travis-ci> NQP build passed. Stefan Seifert 'Fix wrong test count after commit 980a07ee96216a43958d54878e187a7b0abd8cf1'

[17:07] <travis-ci> https://travis-ci.org/perl6/nqp/builds/261341707 https://github.com/perl6/nqp/compare/dc418da31f09...f6c245875f05

[17:07] <ugexe> moarvm head is failing on windows

[17:07] <ugexe> c:\projects\rakudo\nqp\moarvm\src\core/alloc.h(34) : error C2036: 'void *' : unknown size

[17:12] <AlexDaniel> ok, I know approximately what is leaking, but now I have to go… later!

[18:37] <nine> ugexe: Windows failure should be fixed

[21:30] <jdv79> yeah, mem usage got worse

[21:31] <jdv79> i think it happens when i use XML in my ap

[21:31] <jdv79> *ap

[21:31] <jdv79> *app

[21:32] <jdv79> i'll try offloading that part of p5 i guess for now

[21:32] <jdv79> *to
