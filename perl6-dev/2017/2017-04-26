[00:46] <Geth> ¦ tap-harness6: samcv++ created pull request #13: Use SPDX identifier in license field of META6.json

[00:46] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/pull/13

[00:47] <samcv> PR for everyone!

[00:47] <samcv> it's like christmas!

[02:38] <MasterDuke_> .ask timotimo i'm trying to work on RT #118555 (typed optional array parameters not working), but have hit a roadblock. some comments here: https://irclog.perlgeek.de/perl6-dev/2017-04-25#i_14485206 . any suggestions?

[02:38] <yoleaux> MasterDuke_: I'll pass your message to timotimo.

[02:39] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=118555

[02:39] <MasterDuke_> .ask lizmat i'm trying to work on RT #118555 (typed optional array parameters not working), but have hit a roadblock. some comments here: https://irclog.perlgeek.de/perl6-dev/2017-04-25#i_14485206 . any suggestions?

[02:39] <yoleaux> MasterDuke_: I'll pass your message to lizmat.

[02:39] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=118555

[02:39] <MasterDuke_> .ask jnthn i'm trying to work on RT #118555 (typed optional array parameters not working), but have hit a roadblock. some comments here: https://irclog.perlgeek.de/perl6-dev/2017-04-25#i_14485206 . any suggestions?

[02:39] <yoleaux> MasterDuke_: I'll pass your message to jnthn.

[02:39] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=118555

[02:39] <MasterDuke_> .ask TimToady i'm trying to work on RT #118555 (typed optional array parameters not working), but have hit a roadblock. some comments here: https://irclog.perlgeek.de/perl6-dev/2017-04-25#i_14485206 . any suggestions?

[02:39] <yoleaux> MasterDuke_: I'll pass your message to TimToady.

[02:39] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=118555

[05:51] <timotimo> MasterDuke_: i'm not really knowledgable on the fine details of creating types that have parameterization applied to them, whether that's different from the more harmless types we have

[05:53] <timotimo> MasterDuke_: you might have gotten "inconsistent bind result" because we generated code with the fast-path binder that caused a failure (because perhaps you haven't modified the fast-path binder yet? it's called lower_signature or some such) and then your modified code was signaling success and then the binder said "well, something's wrong and i can't be bothered to turn into general AI to fix it for you"

[06:32] <[Tux]> This is Rakudo version 2017.04.3-51-gff4a034dd built on MoarVM version 2017.04-44-gf0db8822

[06:32] <[Tux]> csv-ip5xs        3.020

[06:32] <[Tux]> test            12.956

[06:32] <[Tux]> test-t           4.996 - 4.996

[06:32] <[Tux]> csv-parser      12.956

[06:32] <[Tux]> Now, *that* is what I would call stable :)

[06:37] <samcv> nice

[06:37] <samcv> can we do this every time

[06:47] <[Tux]> Error encoding UTF-8 string: could not encode Unicode Surrogate codepoint 56887 (0xDE37)

[06:47] <[Tux]> in using utf8-c8

[06:48] <[Tux]> Error encoding UTF-8 string: could not encode codepoint 1821802 (0x1BCC6A), codepoint out of bounds. Cannot encode higher than 1114111 (0x10FFFF)

[06:48] <[Tux]> Error encoding UTF-8 string: could not encode codepoint 1184858 (0x12145A), codepoint out of bounds. Cannot encode higher than 1114111 (0x10FFFF)

[06:49] <timotimo> it could be argued that for this case, utf8-c8 should also generate synthetics that help us roundtrip

[06:49] <nine> I dare say that's the whole point of utf8-c8, isn't it?

[06:49] * [Tux] nods

[06:50] * [Tux] waits for that to be perferct in order to support real-binary (like images) in Text::CSV

[06:50] <timotimo> yeah

[06:51] <[Tux]> FWIW I finally implemented :strict in Text::CSV_XS and Text::CSV

[06:52] <[Tux]> If this attribute is set to 1, any row that parses to a different number of fields than the previous row will cause the parser to throw error 2014.

[06:52] <[Tux]> 1 → True in perl6

[06:54] * [Tux] => $work

[09:22] <dogbert17> \o

[09:37] <dogbert17> can I trick one of you to merge https://github.com/perl6/nqp/pull/355 or am I supposed to do it myself (I do see a big green merge button...)

[09:41] <samcv> dogbert17, can you change your commit message

[09:41] <samcv> to actually describe what the fix is for

[09:42] <samcv> :)

[09:42] <samcv> just some short thing "Fix RT #8888 words words words words"

[09:43] <dogbert17> You mean on the first line, there are plenty words in the second paragraph

[09:44] <nine> dogbert17: yes. Makes it easier for people who write change logs or the weekly

[09:45] <samcv> ^

[09:45] <samcv> yeah the title/1st line

[09:45] <dogbert17> Hmm, dunno if my git fu is up to it, do I have to create a new PR or is there a more clever way

[09:45] <samcv> nope

[09:46] <samcv> "git commit --amend"

[09:46] <samcv> then git push --force

[09:46] <dogbert17> oh, will try

[09:46] <samcv> if you want to change the date on the commit as well: git commit --amend --date now

[09:46] <samcv> by defualt it doesn't change the date and leaves it identical

[09:47] <dogbert17> do you think I should change the date?

[09:47] <nine> no

[09:47] <samcv> not unless you're changing actual code

[09:47] <dogbert17> which I won't

[09:47] <samcv> or whatever, since it helps github/peolpe looking at it know last time it was modified. yup

[09:54] <dogbert17> well, the change is now visible on my forked repo, wonder if the PR will be updated automatically

[09:55] <nine> dogbert17: it already is, since the PR only points to a repo

[09:55] <dogbert17> cool

[10:09] <Geth> ¦ tap-harness6: 57316c2fb9 | (Samantha McVey)++ | META6.json

[10:09] <Geth> ¦ tap-harness6: Use SPDX identifier in license field of META6.json

[10:09] <Geth> ¦ tap-harness6:

[10:09] <Geth> ¦ tap-harness6: Use the standardized identifier for the license field.

[10:09] <Geth> ¦ tap-harness6: For more details see https://design.perl6.org/S22.html#license

[10:09] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/commit/57316c2fb9

[10:09] <Geth> ¦ tap-harness6: 292b8f8419 | (Zoffix Znet)++ (committed using GitHub Web editor) | META6.json

[10:09] <Geth> ¦ tap-harness6: Merge pull request #13 from samcv/SPDX-license

[10:09] <Geth> ¦ tap-harness6:

[10:09] <Geth> ¦ tap-harness6: Use SPDX identifier in license field of META6.json

[10:09] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/commit/292b8f8419

[10:19] <dogbert17> the build checks passed, wohoo

[10:20] <Zoffix> .

[10:20] <yoleaux> 09:17Z <daxim> Zoffix: please do not forget about nuget/chocolatey specs for vip release

[10:20] <Zoffix> eww

[10:20] <Geth> ¦ nqp: c35494d7fb | (Jan-Olof Hendig)++ | src/HLL/Compiler.nqp

[10:20] <Geth> ¦ nqp: Fix for RT #130760 - print usage instructions to stderr when an invalid command line option is used

[10:20] <Geth> ¦ nqp:

[10:20] <Geth> ¦ nqp: Entering an invalid option when invoking nqp or perl6 leads to an

[10:20] <Geth> ¦ nqp: error message being printed followed by usage instructions. In both

[10:20] <Geth> ¦ nqp: cases this information is written to stdout when it should have been

[10:20] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130760

[10:20] <Geth> ¦ nqp: written to stderr. This fix solves the problem for nqp by introducing

[10:20] <Geth> ¦ nqp: a flag which tells the code doing the writing which fd to use.

[10:20] <Geth> ¦ nqp: In order to fix perl6 a separate Rakudo PR is necessary. That fix

[10:20] <Geth> ¦ nqp: will be dependent on this one but it won't break anything even if this

[10:20] <Geth> ¦ nqp: fix is reverted, it will just continue to work the way it does today.

[10:21] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c35494d7fb

[10:21] <Geth> ¦ nqp: 745c61dbc0 | niner++ (committed using GitHub Web editor) | src/HLL/Compiler.nqp

[10:21] <Geth> ¦ nqp: Merge pull request #355 from dogbert17/fix-for-rt130760

[10:21] <Geth> ¦ nqp:

[10:21] <Geth> ¦ nqp: Fix for RT #130760

[10:21] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130760

[10:21] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/745c61dbc0

[10:31] <dogbert17> nine++

[10:52] <Geth> ¦ rakudo: dogbert17++ created pull request #1071: Fix for RT #130760 - print perl6 usage msg to stderr when an invalid …

[10:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1071

[10:52] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130760

[10:56] <lizmat> dogbert17: so maybe I should bump nqp ?

[10:56] <yoleaux> 02:39Z <MasterDuke_> lizmat: i'm trying to work on RT #118555 (typed optional array parameters not working), but have hit a roadblock. some comments here: https://irclog.perlgeek.de/perl6-dev/2017-04-25#i_14485206 . any suggestions?

[10:56] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=118555

[10:58] <dogbert17> lizmat: to get the most out of the fix yes :)

[11:09] * lizmat tests

[11:10] * dogbert17 hides /o\

[11:25] <Geth> ¦ rakudo/nom: 17921bf282 | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION

[11:25] <Geth> ¦ rakudo/nom: Bump NQP to get dogbert17's improvements

[11:25] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/17921bf282

[11:25] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.04-24-g87501f7b...2017.04-48-g745c61d

[11:26] <Geth> ¦ rakudo/nom: 2a6d3d1e54 | (Jan-Olof Hendig)++ | src/Perl6/Compiler.nqp

[11:26] <Geth> ¦ rakudo/nom: Fix for RT #130760 - print perl6 usage msg to stderr when an invalid cmd line option is used

[11:26] <Geth> ¦ rakudo/nom:

[11:26] <Geth> ¦ rakudo/nom: Entering an invalid option when invoking nqp or perl6 leads to an

[11:26] <Geth> ¦ rakudo/nom: error message being printed followed by usage instructions. In both

[11:26] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130760

[11:26] <Geth> ¦ rakudo/nom: cases this information is written to stdout when it should have been

[11:26] <Geth> ¦ rakudo/nom: written to stderr. This fix solves the problem for perl6 by introducing

[11:26] <Geth> ¦ rakudo/nom: a flag which tells the code doing the writing which fd to use.

[11:26] <Geth> ¦ rakudo/nom: This fix will be dependent on nqp commit 745c61d in order to solve the

[11:26] <Geth> ¦ rakudo/nom: problem described above. In the absence of the nqp commit nothing will

[11:26] <Geth> ¦ rakudo/nom: break however, it will just continue to work the way it does today.

[11:26] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2a6d3d1e54

[11:26] <Geth> ¦ rakudo/nom: 92a93aa853 | lizmat++ (committed using GitHub Web editor) | src/Perl6/Compiler.nqp

[11:26] <Geth> ¦ rakudo/nom: Merge pull request #1071 from dogbert17/fix-rt-130760

[11:26] <Geth> ¦ rakudo/nom:

[11:26] <Geth> ¦ rakudo/nom: Fix for RT #130760 - print perl6 usage msg to stderr when an invalid …

[11:26] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130760

[11:26] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/92a93aa853

[11:32] <dogbert17> lizmat++

[11:47] <Geth> ¦ rakudo/nom: 8b8f66c0d0 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[11:47] <Geth> ¦ rakudo/nom: Turn <(^)> into a multi for faster dispatch

[11:47] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8b8f66c0d0

[11:47] <Geth> ¦ rakudo/nom: d92a212352 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[11:47] <Geth> ¦ rakudo/nom: Make Setty (^) Setty about 20x faster

[11:47] <Geth> ¦ rakudo/nom:

[11:47] <Geth> ¦ rakudo/nom: - with a 100 element Set with itself (worst case)

[11:47] <Geth> ¦ rakudo/nom: - give Setty (^) Setty its own candidate written using nqp ops

[11:47] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d92a212352

[12:04] * Zoffix switches META.info swapper to check every 1hr instead of every 30m

[12:17] <Zoffix> hehe. Fixing up one of my Perl 5 modules and release tool tells me some of my modules are out of date and I should update the following: https://gist.github.com/zoffixznet/3204e9b64924d63484cefc826e89954b

[12:17] <Zoffix> All that to release 1 package :}

[12:18] <Zoffix> "If you're seeing this warning, your toolchain is really, really old* and you'll almost certainly have problems installing CPAN modules from this century. But never fear, dear user, for we have the technology to fix this!"

[12:18] <Zoffix> That has a distinct waft of mst-ware :D

[12:20] <Zoffix> wonder how the hell my toolchain is really really old, if I'm using perlbrewed v5.22.1 :/

[12:23] <Zoffix> Fucking great. Upgrading stuff broke `dzil release`

[12:24] <jnthn> Is the META.info swapper something that means I don't need to manually update the meta list now I've merged a ton of renaming PRs?

[12:24] <yoleaux> 02:39Z <MasterDuke_> jnthn: i'm trying to work on RT #118555 (typed optional array parameters not working), but have hit a roadblock. some comments here: https://irclog.perlgeek.de/perl6-dev/2017-04-25#i_14485206 . any suggestions?

[12:24] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=118555

[12:25] <Zoffix> jnthn: yup. Look at the last line in #perl6. It swapped them for you

[12:25] <jnthn> hah, wow

[12:25] <jnthn> Nice

[12:26] <jnthn> I was about to be like, darn, I don't have time to manually do that now, shoulda thought of it before I started merging :)

[12:26] <Zoffix> ZofBot: it's the future!

[12:26] <ZofBot> Zoffix, exception Exegesis A document originally written by "TheDamian", in which he tried to explain the "Apocalypse"s to the common (wo)man

[12:26] <jnthn> (whoever wrote that updating thingy)++

[12:26] <jnthn> Probably Zoffix++ :)

[12:26] <Zoffix> :)

[12:29] <MasterDuke_> jnthn: got time for a question about typed optional array parameters?

[12:29] <jnthn> 'friad not

[12:30] <jnthn> (Got language class soon)

[12:30] <jnthn> Should have later on today though :)

[12:30] <MasterDuke_> no worries, i'll ping again later if haven't figured it out by then

[12:30] <jnthn> Alright

[12:37] <Geth> ¦ rakudo/nom: 4e37e7c563 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[12:37] <Geth> ¦ rakudo/nom: Make sure Setty (^) Setty always returns a Set

[12:37] <Geth> ¦ rakudo/nom:

[12:37] <Geth> ¦ rakudo/nom: Before, in some cases, it would return a SetHash if a SetHash was given.

[12:37] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4e37e7c563

[12:39] <Geth> ¦ rakudo/nom: 9f0b1218f3 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[12:39] <Geth> ¦ rakudo/nom: Make Mixy (^) Mixy about 150x faster

[12:39] <Geth> ¦ rakudo/nom:

[12:39] <Geth> ¦ rakudo/nom: - with a 100 element Mix with itself (worst case)

[12:39] <Geth> ¦ rakudo/nom: - give Mixy (^) Mixy its own candidate written using nqp ops

[12:39] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9f0b1218f3

[13:15] <nine> # 1 lines longer than coding standard limit (100 columns):

[13:15] <nine> oops, wrong channel

[13:15] * Zoffix wonders when did the "coding standard" became 100 columns

[13:17] <nine> That was output of a failing test in a $work project

[13:17] <Zoffix> Ah

[13:18] <nine> I actually enjoy not having to stick to that strict rule in rakudo code. I just don't enjoy having to read the resulting code ;)

[13:19] <Zoffix> m: use nqp; sub (+args) { dd nqp::atpos(nqp::p6argvmarray, 0) =:= Empty }(Empty)

[13:19] <camelia> rakudo-moar 9f0b12: OUTPUT: «Bool::True␤»

[13:19] <Zoffix> I think I finally came up with the solution that plagues chained andthen/orelse

[13:19] <Zoffix> Or at least, I thought up a lead to follow to try and fix it

[13:37] <dogbert17> Zoffix: so the rest is over?

[13:37] <Zoffix> Nope, still resting.

[13:38] <dogbert17> how was the game with this 'Hung lo' character or whatever his name was?

[13:41] <Zoffix> Well-made, lots of lowbrow humour, but I've read some reviews and seems like it'll get old fast. Levels are procedurally generated and the story is poor.

[13:42] * Zoffix wants Far Cry 5 :/

[13:44] <MasterDuke_> i loved the original shadow warrior, and have the the first new one, but haven't gotten to play it yet

[13:45] <MasterDuke_> the trio of low-brow humor Build engine games (duke nukem, shadow warrior, and redneck rampage) were all surprisingly good

[13:50] <Geth> ¦ rakudo/nom: bea8ac6890 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[13:50] <Geth> ¦ rakudo/nom: Fix problem with Mixy (^) Mixy not caught by spectest

[13:50] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bea8ac6890

[13:51] <Zoffix> m: my Int @a = 1 .. Inf;

[13:51] <camelia> rakudo-moar 9f0b12: ( no output )

[13:51] <Geth> ¦ rakudo/nom: ee45936017 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[13:51] <Geth> ¦ rakudo/nom: Make Baggy (^) Baggy about 150x faster

[13:51] <Geth> ¦ rakudo/nom:

[13:51] <Geth> ¦ rakudo/nom: - with a 100 element Bag with itself (worst case)

[13:51] <Geth> ¦ rakudo/nom: - give Baggy (^) Baggy its own candidate written using nqp ops

[13:51] <Zoffix> This isn't really wrong, eh?

[13:51] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ee45936017

[13:52] <Zoffix> You can't ever reach the Inf end

[13:52] <Zoffix> So there's no binding failure

[13:52] <lizmat> and by the time you would, you'd get a binding fail  :-)

[13:53] <dogbert17> Zoffix: perhaps you should pick up Destiny 2 when it is released

[13:53] <lizmat> sometime I wonder whether we should have a stringy Inf to which all strings would be less

[13:54] <lizmat> afk&   # 1x 20x faster and 2x 150x faster is a good score for today so far  :-)

[13:54] <Zoffix> :)

[13:59] <MasterDuke_> timotimo++  making essentially the same change to lower_signature in Actions.nqp that i did to handle_optional in BOOTSTRAP.nqp gets me much farther

[14:00] <MasterDuke_> there's an error late on make install, but perl6-m is created and `sub foo(Int @a?) { say @a ?? "@a[]" !! "no arg" }; foo();` now gives 'no arg' locally

[14:06] <Geth> ¦ roast: 991cfddd5b | (Zoffix Znet)++ | S32-array/elems.t

[14:06] <Geth> ¦ roast: Fix typo in test descriptino

[14:06] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/991cfddd5b

[14:07] <AlexDaniel> self-referential junctions!

[14:07] <AlexDaniel> nice

[14:09] <Geth> ¦ roast: ada48a6538 | (Zoffix Znet)++ | S32-array/elems.t

[14:09] <Geth> ¦ roast: Add vague test for death in my Int @a = 1..Inf; @a[*-1]

[14:09] <Geth> ¦ roast:

[14:09] <Geth> ¦ roast: RT#125576: https://rt.perl.org/Ticket/Display.html?id=125576

[14:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ada48a6538

[14:09] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=125576

[14:10] <Zoffix> m: my @a; my %h; @a[0] = @a; %h<foo> = %h; my $a; $a = any @a, %h, $a

[14:10] <camelia> rakudo-moar 9f0b12: ( no output )

[14:10] <Zoffix> m: my @a; my %h; @a[0] = @a; %h<foo> = %h; my $a; $a = any @a, %h, $a; say $a

[14:11] <camelia> rakudo-moar ee4593: OUTPUT: «(timeout)»

[14:11] <Zoffix> A self-referential Junction containing self-referential Array and Hash :)

[14:12] <MasterDuke_> heh, every single spectest failed, the patch may need some more work

[14:17] <Zoffix> .ask lizmat what was the problem not caught by tests? I'd like to add a test. RE https://github.com/rakudo/rakudo/commit/bea8ac6890

[14:17] <yoleaux> Zoffix: I'll pass your message to lizmat.

[14:21] <lizmat> .

[14:21] <yoleaux> 14:17Z <Zoffix> lizmat: what was the problem not caught by tests? I'd like to add a test. RE https://github.com/rakudo/rakudo/commit/bea8ac6890

[14:22] <lizmat> Zoffix: actually, it *may* have been me not running a spectest when It should have

[14:22] <Zoffix> c: 9f0b1218f3,HEAD my $a = mix <a a a b c>; my $b = mix <a b>; dd $a (^) $b

[14:22] <committable6> Zoffix, ¦9f0b121: «("c"=>1).Mix» ¦HEAD(ee45936): «("a"=>2,"c"=>1).Mix»

[14:22] <Zoffix> lizmat: ah, OK then

[14:22] <lizmat> I was adding the Baggy (^) Baggy candidate, and the Mixy (^) Mixy candidate started failing

[14:23] <MasterDuke_> is there a way to tell that a Parameter's $!nominal_type is parameterized? other than `if nqp::index($nominal_type.HOW.name($nominal_type), '[') > 0`

[14:23] <lizmat> looking back on it now, I probably didn't run a spectest on 9f0b1218f3

[14:23] <lizmat> afk again&

[14:23] <Zoffix> Happens.

[14:32] <MasterDuke_> ah ha! now all spectests pass and `sub foo(Int @a?) { say @a ?? "@a[]" !! "no arg" }; foo();` gives 'no arg' locally

[15:09] <Zoffix> What's the trick to make a single `shell` invocation execute multiple commands on windows?

[15:10] <jnthn> Like cmd.exe /c "echo Foo && echo Bar"

[15:11] <Zoffix> oh. OK

[15:11] <jnthn> Though that's not very Windows specific I guess :)

[15:13] <MasterDuke_> jnthn: i hope this is a quick question: is there a way to tell that a Parameter's $!nominal_type is parameterized? other than `if nqp::index($nominal_type.HOW.name($nominal_type), '[') > 0`

[15:16] <jnthn> uh, that's a really bad way :-)

[15:17] <jnthn> Either something on .HOW.archetypes will tell you, or you'll often find that .HOW ~~ Metamodel::CurriedRoleHOW

[15:18] <jnthn> Though some others (like Array) do whatever they like on parameterization

[15:18] <jnthn> What's the context where you need to know this?

[15:18] <jnthn> I think you were trying to fix stuff like Int @array?

[15:18] <MasterDuke_> yep

[15:19] <jnthn> Yeah, the thing there is...

[15:19] <jnthn> The type we have there is Positional[Array]

[15:19] <jnthn> gah

[15:19] <jnthn> The type we have there is Positional[Int]

[15:19] <jnthn> But the type we should create by default is Array[Int] :)

[15:20] <jnthn> m: say Positional[Int] ~~ Positional

[15:20] <camelia> rakudo-moar ee4593: OUTPUT: «True␤»

[15:20] <jnthn> m: say Positional[Int].of

[15:20] <camelia> rakudo-moar ee4593: OUTPUT: «(Int)␤»

[15:20] <jnthn> We only want to do this when the sigil is @ however

[15:20] <jnthn> (There's a flag that states this)

[15:21] <MasterDuke_> so right here: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Actions.nqp#L8435 i added `if nqp::index($nomtype.HOW.name($nomtype), '[') > 0 { $var.default(QAST::WVal.new( :value($nomtype) )); } else {`

[15:21] <MasterDuke_> which passes all spectests and makes `Int @a?` work

[15:21] <jnthn> More robust would be something like

[15:22] <jnthn> if nqp::istype($nomtype, $*W.find_symbol(['Positional'])) && !($nomtype.of =:= $*W.find_symbol(['Mu'])

[15:23] <jnthn> But yh

[15:23] <MasterDuke_> thanks, i'll give that a shot

[15:24] <jnthn> But the thing it's doing in the barnch is wrong

[15:24] <jnthn> *branch

[15:25] <jnthn> If it passes the tests you didn't write enough :)

[15:25] <MasterDuke_> heh, haven't added any tests yet

[15:25] <jnthn> sub x(Int @arr?) { @arr.push(42) }

[15:25] <jnthn> Should work :)

[15:25] <jnthn> And won't

[15:25] <jnthn> You'd need to create an Array[Int]

[15:25] <Geth> ¦ roast: 5eb61ccaf2 | (Zoffix Znet)++ | S19-command-line/arguments.t

[15:25] <Geth> ¦ roast: Test fancy chars in command line args stay fancy

[15:25] <Geth> ¦ roast:

[15:25] <Geth> ¦ roast: RT#127925: https://rt.perl.org/Ticket/Display.html?id=127925

[15:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5eb61ccaf2

[15:25] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=127925

[15:26] <jnthn> And then nqp::create that

[15:26] <MasterDuke_> right. `Cannot modify an immutable Positional[Int]`

[15:26] <jnthn> Yeah

[15:26] <jnthn> So that's the second half

[15:26] <MasterDuke_> nqp::create(Array[Int]) doesn't work

[15:27] <MasterDuke_> i already tried hard-coding that

[15:27] <jnthn> That's a mixing of levels

[15:27] <jnthn> Array[Int] doesn't exist in NQP and if it did it'd be the wrong one :)

[15:27] <jnthn> I think there's a $*W.parameterize_type or so

[15:28] <jnthn> Which you can pass $*W.find_symbol(['Array']) and $nomtype.of to

[15:28] <jnthn> Which will build the Array[Int] type

[15:28] <jnthn> Which can then be stuck in a QAST::WVal and used with nqp::create

[15:29] <MasterDuke_> cool, let me try that

[15:32] <timotimo> rrrrrrrrrrrrrrrrrrrrrrrrrrrrttttttttttttttttttttttttttttttttttttttttttttbsMy chances of finishing Persona 5 any time soon are incredibly slim. As much as I loved (yes, loved) forming a crack team of heart thieves, falling in love with a punk rock doctor, eating massive hamburgers for fabulous stats and prizes, and watching films about baked goods superheroes, I just can't see myself finding that much time

[15:32] <timotimo> to do it all over again. I'll just have to live vicariously through just about everyone else on the site.

[15:32] <dogbert17> oops

[15:32] <dogbert17> /usr/bin/perl t/harness5 --fudge --moar --keep-exit-code --verbosity=1 t/spec/S32-list/minmax.t

[15:32] <dogbert17> t/spec/S32-list/minmax.rakudo.moar ..

[15:32] <dogbert17> MoarVM panic: Collectable 0x96a2648 in fromspace accessed

[15:34] <jnthn> Nice find

[15:38] <dogbert17> it was with a small nursery

[15:39] <Geth> ¦ roast: 4e73bea9e8 | (Zoffix Znet)++ | integration/error-reporting.t

[15:39] <Geth> ¦ roast: Test bad `use` gives line number in error message

[15:39] <Geth> ¦ roast:

[15:39] <Geth> ¦ roast: RT#130979: https://rt.perl.org/Ticket/Display.html?id=130979

[15:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4e73bea9e8

[15:39] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130979

[15:39] <dogbert17> let me see if I can get some gdb output ...

[15:41] <timotimo> cool

[15:42] <MasterDuke_> hm, `!($nomtype.of =:= $*W.find_symbol(['Mu']))` won't compile and gives `Cannot find method 'WHY' on object of type Perl6::Metamodel::CurriedRoleHOW`

[15:46] <jnthn> m: say Positional[Int].HOW.WHAT

[15:46] <camelia> rakudo-moar ee4593: OUTPUT: «(CurriedRoleHOW)␤»

[15:46] <jnthn> m: say Positional[Int].of

[15:46] <camelia> rakudo-moar ee4593: OUTPUT: «(Int)␤»

[15:46] <jnthn> Hmm, odd

[15:46] <jnthn> What code won't it compile?

[15:47] <jnthn> If CORE.setting it may be a bootstrap issue

[15:47] <MasterDuke_> `if !($nomtype.of =:= $*W.find_symbol(['Mu'])) {` in Actions.nqp

[15:47] <jnthn> Could always stick a try in there :)

[15:47] <MasterDuke_> yeah, this is during a rakudo build

[15:47] <jnthn> Yeah but the error you showed is a Perl 6 one, not an NQP one

[15:48] <MasterDuke_> in parse

[15:48] <jnthn> In parse of CORE.setting, I guess?

[15:48] <MasterDuke_> yeah

[15:48] <jnthn> Hm

[15:48] <jnthn> I guess another way is

[15:48] <jnthn> m: say Positional[Int].HOW.^method-table

[15:48] <camelia> rakudo-moar ee4593: OUTPUT: «No such method 'method-table' for invocant of type 'NQPClassHOW'␤  in block <unit> at <tmp> line 1␤␤»

[15:48] <jnthn> m: say Positional[Int].HOW.^method_table

[15:48] <camelia> rakudo-moar ee4593: OUTPUT: «No such method 'WHICH' for invocant of type 'NQPRoutine'␤  in block <unit> at <tmp> line 1␤␤»

[15:49] <jnthn> m: dd Positional[Int].HOW.^method_table

[15:49] <camelia> rakudo-moar ee4593: OUTPUT: «No such method 'WHICH' for invocant of type 'NQPRoutine'␤  in block <unit> at <tmp> line 1␤␤»

[15:49] <jnthn> m: dd Positional[Int].HOW.^method_table.keys

[15:49] <camelia> rakudo-moar ee4593: OUTPUT: «("name", "accepts_type", "set_shortname", "new_type", "pretend_to_be", "make_pun", "configure_punning", "shortname", "type_check", "instantiate_generic", "set_pun_repr", "set_name", "pretending_to_be", "inheritalize", "specialize", "find_method", "pun", …»

[15:49] <jnthn> m: dd Positional[Int].HOW.^method_table.keys.grep(/arg/)

[15:49] <camelia> rakudo-moar ee4593: OUTPUT: «("role_arguments",).Seq␤»

[15:49] <jnthn> Ah, that

[15:49] <jnthn> m: say Positional[Int].role_arguments

[15:49] <camelia> rakudo-moar ee4593: OUTPUT: «No such method 'role_arguments' for invocant of type 'Positional[Int]'␤  in block <unit> at <tmp> line 1␤␤»

[15:49] <jnthn> m: say Positional[Int].^role_arguments

[15:49] <camelia> rakudo-moar ee4593: OUTPUT: «((Int))␤»

[15:49] <jnthn> That could be a way

[15:50] <jnthn> m: say Positional.^role_arguments

[15:50] <camelia> rakudo-moar ee4593: OUTPUT: «No such method 'role_arguments' for invocant of type 'Perl6::Metamodel::ParametricRoleGroupHOW'␤  in block <unit> at <tmp> line 1␤␤»

[15:50] <jnthn> Would need to be guarded by an nqp::can

[15:50] <jnthn> But that saves the punning trap

[15:50] <jnthn> And so shouldn't trip up CORE.setting compilation

[15:50] <MasterDuke_> yeah, the stack trace did have make_pun at the top

[15:51] <MasterDuke_> ok, i'll give that a try

[16:14] <dogbert17> jnthn; sorry for the delay, https://gist.github.com/dogbert17/12dc1eb9cf86e2673d221e07402c7bc7

[16:34] <jnthn> dogbert17: No worries, I'm exhausted anyway

[16:51] <MasterDuke_> `Cannot find method 'list' on object of type NQPArray`, i get that from passing `$nomtype.HOW.role_arguments($nomtype)` as the $arglist parameter to $*W.parameterize_type, which does `for @($arglist) {`

[17:01] <Zoffix> nqp: try die("42"); say($!)

[17:01] <camelia> nqp-moarvm: OUTPUT: «␤»

[17:01] <Zoffix> The $! is not a thing in nqp? In Perl6/World in particular?

[17:01] <Zoffix> Looking at this Oohh

[17:02] <Zoffix> Well, was wondering how was this fix apparently was working: https://github.com/FROGGS/p6-if/pull/3/files

[17:02] <Zoffix> But now I realize that code is in Perl 6 and even though it's mixed into $*W, it's still Perl 6

[17:02] * Zoffix 's mind blowns a bit

[17:26] <MasterDuke_> m: say Positional[Int].^role_arguments

[17:26] <camelia> rakudo-moar ee4593: OUTPUT: «((Int))␤»

[17:26] <MasterDuke_> m: say Array[Positional[Int]].^role_arguments

[17:26] <camelia> rakudo-moar ee4593: OUTPUT: «No such method 'role_arguments' for invocant of type 'Perl6::Metamodel::ClassHOW+{<anon>}+{<anon>}'␤  in block <unit> at <tmp> line 1␤␤»

[17:26] <MasterDuke_> huh

[17:29] <pmurias> jnthn: how is our native str to native num conversion supposed to work?

[17:29] <pmurias> currently it's platform specific with on moarvm "Information" being converted to "Inf" on linux but not on windows

[17:30] <pmurias> on the jvm it works even more differently

[17:30] <pmurias> jnthn: I can make it consistent but I need to know what's the behaviour we want

[17:31] <jnthn> m: my num $foo = '4.2'

[17:31] <camelia> rakudo-moar ee4593: OUTPUT: «This type cannot unbox to a native number: P6opaque, Str␤  in block <unit> at <tmp> line 1␤␤»

[17:31] <jnthn> It's supposed to do that :)

[17:31] <jnthn> m: my num $foo = '4.2'.Num

[17:31] <camelia> rakudo-moar ee4593: ( no output )

[17:32] <jnthn> And going through Num should be sane

[17:32] <jnthn> m: my str $s = '4.2'; my num $n = $s;

[17:32] <camelia> rakudo-moar ee4593: ( no output )

[17:32] <jnthn> o.O

[17:32] <jnthn> And that'd be a bug that it compiles

[17:32] <jnthn> m: my str $s = '4.2'; my num $n = $s; say $n

[17:32] <camelia> rakudo-moar ee4593: OUTPUT: «4.2␤»

[17:32] <Zoffix> m: my str $s = 'Infinity and beyond'; my num $n = $s; say $n

[17:32] <camelia> rakudo-moar ee4593: OUTPUT: «Inf␤»

[17:32] <jnthn> :P

[17:33] <Zoffix> m: my str $s = '42 pies'; my num $n = $s; say $n

[17:33] <camelia> rakudo-moar ee4593: OUTPUT: «42␤»

[17:33] <jnthn> I guess this is about the op taht's used at a lower level to do this, though :)

[17:34] <pmurias> jnthn: so I should copy the .Num behavior?

[17:34] <jnthn> pmurias: That'd seem sensible, yeah

[17:35] <jnthn> I'd hope that path is well tested :)

[17:36] <pmurias> our str to num has 4 recently added tests :)

[17:37] <pmurias> jnthn: my num = 'bla bla'.Num;

[17:37] <pmurias> m: my num = 'bla bla'.Num;

[17:37] <camelia> rakudo-moar ee4593: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Malformed my␤at <tmp>:1␤------> 3my num7⏏5 = 'bla bla'.Num;␤»

[17:37] <pmurias> m: my num $x = 'bla bla'.Num;say $x

[17:37] <camelia> rakudo-moar ee4593: OUTPUT: «This type cannot unbox to a native number: P6opaque, Failure␤  in block <unit> at <tmp> line 1␤␤»

[17:38] <pmurias> m: say 'bla bla'.Num

[17:38] <camelia> rakudo-moar ee4593: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5bla bla' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[17:38] <MasterDuke_> jnthn: sorry to keep bothering you about this, but any suggestions for my two comments above (method 'list' on NQPArray, and role_arguments not working on things with multiple parameterizations)?

[17:38] <pmurias> jnthn: do we want the str to num conversion to throw an exception in the cases it can't convert?

[17:39] <pmurias> jnthn: also I spotted a BEGIN nqp::hash in our setting, not sure if it should be put in a WVal as normally BOOTHashes are specially handled

[17:40] <MasterDuke_> pmurias: i think lizmat did the `BEGIN nqp::hash` intentionally as an optimization of some kind

[17:41] <jnthn> Array[...] is handled specially by the Array class rather than being a role parameterization

[17:41] <jnthn> But I don't think for default you need to worry about multi-level, and the outer-most level will always be Positional?

[17:41] <jnthn> pmurias: Probably would have to, because Failure is not an option

[17:42] <MasterDuke_> ah, that's probably true

[17:42] <pmurias> jnthn: we have a choice between NaN and 0

[17:42] <jnthn> pmurias: True, but I'd prefer throw-y to those :)

[17:43] <pmurias> got to go meet a friend, I'll backlog and be back later

[17:48] <MasterDuke_> jnthn: any idea about the method 'list' business with role_arguments and parameterize_types?

[17:51] <MasterDuke_> i gotta agree with Zoffix, working in World.nqp is harder than most of the other stuff

[17:51] <nine> MasterDuke_: it takes some getting used to :)

[17:54] <jnthn> MasterDuke_: Dinner now, will have to look at that a bit more after

[17:54] <MasterDuke_> sure, np

[18:09] <nine> MasterDuke_: nqp/t/nqp/035-prefix-sigil.t shows how this @($array) business is supposed to work. It does so in Perl6::Actions because parameterize_type is passed an $<arglist>.ast which is a QAST::Node which has a method list()

[18:10] <nine> MasterDuke_: a quick n' dirty way around that would be to hllize the NQPArray you get from role_arguments, because Perl6 arrays do have a list() method ;)

[18:10] <MasterDuke_> nine++

[18:11] <nine> A cleaner way would probably be to write a version of parameterize_type that takes an NQPArray. It's mostly just a wrapper around self.parameterize_type_with_args anyway

[18:15] <MasterDuke_> or maybe just inline and adapt the relevant parts of parameterize_type, since i only need it in one spot anyway

[18:15] <nine> yes

[18:19] <MasterDuke_> heh, `Cannot iterate object with P6opaque representation (List)` when i pass in `nqp::hllizefor(@role_args, 'perl6')`. closer...

[18:22] <nine> Add a .FLATTENABLE_LIST()

[18:22] <nine> Then we've come full circle ;)

[18:31] <MasterDuke_> huh again. `Method 'new-unit' must be implemented by CompUnit::PrecompilationStore because it is required by roles: CompUnit::PrecompilationStore.`

[18:32] <MasterDuke_> obviously did something wrong with my parameterize_type adaptation

[18:34] <nine> Looks like you're punning roles there

[18:35] <MasterDuke_> yep, somehow

[18:45] <MasterDuke_> hm. rakudo built, but now `sub foo(Int @a?) { @a.push(42) }; foo();` gives `Cannot resolve caller STORE(Array[Int]: Array[Int]); none of these signatures match:`

[18:46] <jnthn> That looks like a create or .new was missed somewhere

[18:55] <MasterDuke_> jnthn++

[18:56] <MasterDuke_> `sub foo(Int @a?) { @a.push(42); dd @a }; foo();` now gives `Array[Int].new(42)`

[19:22] <jnthn> MasterDuke++

[19:26] <MasterDuke_> just need to run a final spectest before the PR

[19:27] <MasterDuke_> man, that kept alternating between 'looks hard', 'oh, looks approachable', 'nope, looks hard', 'but wait...'

[19:37] <Zoffix> m: say "{236/380*100}% of META.infos are still unmerged"

[19:37] <camelia> rakudo-moar ee4593: OUTPUT: «62.105263% of META.infos are still unmerged␤»

[19:38] <Zoffix> ZofBot: METAcide

[19:38] <ZofBot> Zoffix, On systems with no concept of volume, returns '' (the empty string) for volume

[19:38] <MasterDuke_> 38% after what, 24h? not bad

[19:38] <Zoffix> I thought it was pretty bad :}

[19:39] <Zoffix> Maybe it's just me being hyper about GitHub notifications.

[19:40] <Zoffix> I do wish it let you stash notifications. Sometimes you go look and realize you don't have time to take care of it ATM, but there's no way to re-mark notification as unread :\

[19:40] <Zoffix> Maybe I should complain on Twitter again. Worked with "Blame" view :)

[19:43] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1072: Fix typed optional Array and Hash parameters

[19:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1072

[19:46] <MasterDuke_> i'll also write some tests in a bit

[20:09] <Zoffix> samcv: RabidGravy threatened to removed all his modules? Why?

[20:09] <samcv> i think he was just being stubborn not wanting to fix his projects metadata

[20:10] <samcv> he didn't have any real reason but "this hasn't been discussed enough" even when it had been discussed many places

[20:10] <samcv> being put into practice etc, docs updated and s22 etc.

[20:10] <samcv> he didn't offer any reason he did not like the changes to license guidelines for META files though

[20:10] * Zoffix is sad to have missed the drama :)

[20:11] <samcv> Zoffix, https://irclog.perlgeek.de/perl6/search/?nick=&q=nuclear+blackmail

[20:11] <samcv> can find it when you searach for nuclear blackmail for irc.perl6.org :X

[20:12] <samcv> and he made that claim the day before even

[20:12] <samcv> then said it again more strongly the next day

[20:12] <samcv> he's been absent since a day after that, afaik. and modules still in place at least. i hope he cools off

[20:17] <samcv> interestingly he did fix the metadata on one project. the first one i PR'd

[20:18] <samcv> but then got mad when i wanted him through PR's to change all his modules.. i did the work for him even

[20:18] <Zoffix> .ask RabidGravy reading the log about license thing. Could we get to the issues instead of threatening to remove all the modules? From logs, I see license/license issue; we can handle both. What other concerns do you have?

[20:18] <yoleaux> Zoffix: I'll pass your message to RabidGravy.

[20:20] <nine> Wow, I just found my name on https://docs.perl6.org/language/modules#index-entry-META6 next to a TODO "fix EVAL precomp bug". But I don't even know what that is. Unless it's something long gone?

[20:20] <samcv> Zoffix, licence and license is no issue SPDX even says those two words are equivilant

[20:20] * japhb wonders whether it is considered polite/ethical to just keep forks of every repo that has ever been added to the ecosystem, so that we can say "part of the community agreement in being visible to package managers is that we deprive you of the nuclear option"

[20:21] <samcv> so since i'm following spdx, that is not a problem

[20:21] <japhb> (Where by "package manager" I am being intentionally vague)

[20:21] <samcv> japhb, github says you can

[20:21] <samcv> and it's expected when you put things on github to get forked. you agree to those terms

[20:21] <japhb> samcv: Link?

[20:21] <Zoffix> japhb: it's part of ToS

[20:21] <samcv> yeah

[20:22] <japhb> Well, there's a difference between theoretically possible, and *us actively doing it*.

[20:22] <samcv> well. i think we already do it for every module to keep backups just in case. or something

[20:22] <japhb> samcv: Where?

[20:22] <Zoffix> japhb: also, unless redguard's system is offline, the ecosystem is being regularly released to CPAN, so nuclear option isn't really an option

[20:22] <samcv> japhb, https://github.com/moritz/perl6-all-modules

[20:22] <Zoffix> oh yeah and that too

[20:23] <japhb> samcv: Current commit in that repo is "Remove repos that no longer exist".

[20:23] <samcv> :X

[20:23] <japhb> So that's not actually serving that purpose.

[20:23] <Zoffix> heh :)

[20:23] <Zoffix> Well CPAN them

[20:23] <Zoffix> *then

[20:23] <samcv> japhb, but you can look in the history right?

[20:23] <samcv> git keeps all things

[20:24] <japhb> Zoffix: Is this done automatically for *all* modules in our ecosystem (releasing to CPAN, I mean)

[20:24] <japhb> samcv: git *can* keep all things.  ;-)  But yes, I get your point.

[20:24] <Zoffix> japhb: it was, yeah

[20:24] <samcv> hmm

[20:24] <Zoffix> I don't know the current status

[20:25] <samcv> that's not in our TOS for ecosystem

[20:25] <japhb> Fair enough

[20:25] <samcv> i don't think

[20:25] <Zoffix> jdv79_: what's happening with CPAN?

[20:25] <samcv> will have to check ToS for github. i think you have to allow forking and viewing at least. not sure about repackaging

[20:25] <samcv> since some don't have licenses

[20:26] <samcv> if that's something people should expect we should add it to https://github.com/perl6/ecosystem#legal

[20:27] <Zoffix> Geth: uptime

[20:27] <japhb> Well, the scenario would be "Person A invokes nuclear option, deletes all their repos from Github; one of the core team (or a bot) switches the ecosystem entry over to the community fork, and we consider that the canonical (mutable) repo from then on"

[20:27] <Geth> Zoffix, 1 day, 2 hours, 24 minutes, and 26 seconds

[20:27] <japhb> That's the thing to make sure we can reasonably do.

[20:28] <japhb> So we have to be able to have all the redistro rights we had before when we invoke the de-nuclear fix.

[20:28] <Zoffix> Yeah

[20:28] <Zoffix> One Leftpad is enough :)

[20:28] <mst> if somebody nuclear options, then the community fork is a new authority

[20:30] <mst> Zoffix: that only happend because npm lack a spine

[20:30] <Zoffix> Ah

[20:30] <japhb> mst: Is there any infrastructure for letting the community authority cleanly take over, so that end users stay on the currently-maintained fork, oblivious to the averted disaster?

[20:31] <mst> Zoffix: npm gave one of his other namespaces away because corporate pressure

[20:32] <mst> japhb: the whole point of the authority system is to avoid *needing* a concept of a blessed-by-authority fork

[20:33] <samcv> if you wanted to really suck you'd prolly force overwrite the git repos

[20:33] <samcv> and then wait for the backups to pick it up... and update the meta info

[20:35] <japhb> mst: I meant, is there anyway to let end users know "This isn't just two actively maintained forks -- Authority A which you are currently following has been shut down completely, and here is the replacement"

[20:35] <samcv> Zoffix, to process my frusration using comedy i made a script

[20:35] <japhb> Automated succession.

[20:35] <samcv> https://cry.nu/9PMBST.html that actually does automatically remove all your modules from ecosystem by 9pm bst

[20:36] <samcv> well i never ran it without $TEST = True; or the line to push to ecosystem commented out

[20:36] <japhb> We'd have the same problem if an active maintainer dies suddenly without a secession plan, and the community gets together to find a new maintainer

[20:36] <samcv> but it commits and everything hah

[20:36] <japhb> *succession

[20:36] <samcv> well when people die github doesn't usually remove their account

[20:36] <mst> japhb: this is completely the wrong place to be discussing this, but the ecosystem is basically a giant pile of duct tape anyway, so the general answer to "is there infrastructure for" is "no, because lol what infrastructure"

[20:37] <japhb> mst: :-D   Fair enough.

[20:37] <mst> OTOH this also means nothing is really set in stone

[20:38] <japhb> samcv: Yes, but if you're an end user, you would have no idea that bug/security fixes were no longer happening in that repo, but were happening elsewhere -- right up until the day your service gets owned because it hasn't updated its libraries in a while.

[20:38] <Zoffix> samcv: 404

[20:38] <samcv> ?

[20:38] <samcv> japhb, that's true.

[20:38] <Zoffix> Nevermind..

[20:39] <mst> japhb: right, I think *ideally* we would have certain authority sources that *can* be transferred

[20:39] <Zoffix> mst: what's the right place for discussing this?

[20:39] <mst> Zoffix: I'd've thought the toolchain channel, since that's where all the software that actually has to deal with this lives?

[20:39] <japhb> Didn't we have an -ecosystem or -toolchain or something channel?

[20:39] <Zoffix> Ah

[20:39] <samcv> what toolchain channel...

[20:39] <Zoffix> #perl6-toolchain

[20:39] <mst> the one I set up in 2015 to discuss module installation related stuff

[20:40] <samcv> can you put it in the topic maybe?

[20:40] <samcv> i wouldn't even have known it existed

[20:40] <samcv> and people coming to perl6-dev may want to join it if they are interested in that kind of thing

[20:40] <japhb> samcv: You mean a mention in this channel's topic to look over there for ecosystem/toolchain?

[20:40] <mst> I confess to being a little disappointed nobody bothered to tell you before giving you access to ecosystem

[20:41] <samcv> sure

[20:41] <japhb> mst: I'd heard about it a couple years ago, but had assumed this channel was taking over all of the dev discussions elsewhere.

[20:41] <japhb> Thanks

[20:41] <mst> this channel is for language and compiler development, as was already in the topic

[20:42] <mst> not sure how you assumed it also took over a bunch of other things, but ok

[20:42] <Zoffix> I was cutting releases for like 3 months before I realized there was a #perl6-release channel :p

[20:42] <japhb> Zoffix: I *hadn't* heard about that one ...

[20:42] <samcv> :O

[20:42] <Zoffix> It's closed now :)

[20:43] <samcv> i'm in it now

[20:43] <japhb> mst: Because I'm not always here.  I took a vacation, came back and found this channel existed.

[20:43] <japhb> (where "here" means "paying attention and backlogging these channels")

[21:23] <[Coke]> perl6-release can be ded.

[21:34] <samcv> oh wow madcapjake merged some of my META.info changes. he lives

[21:35] <samcv> gonna comment and tag here here https://github.com/MadcapJake/language-perl6fe/issues/55 maybe get a response

[21:48] <Geth> ¦ rakudo/nom: 139243971a | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[21:48] <Geth> ¦ rakudo/nom: Make Map (^) Map about 50x faster

[21:48] <Geth> ¦ rakudo/nom:

[21:48] <Geth> ¦ rakudo/nom: - with a 26 element Hash with itself (worst case)

[21:48] <Geth> ¦ rakudo/nom: - give Map (^) Map its own candidate written using nqp ops

[21:48] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/139243971a

[21:48] <lizmat> and that concludes my hacking for today

[21:48] <lizmat> good night, #perl6-dev!

[22:04] <Zoffix> night
