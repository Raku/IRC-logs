[08:47] <nine> How can I give a QAST::Var a compile time value? Do I have to generate a bind op?

[08:58] <nine> Ah, I need to give the symbol the value, not the QAST::Var.

[09:10] <Geth> ¦ rakudo/lexical_require: 97788ec17e | (Stefan Seifert)++ | 2 files

[09:10] <Geth> ¦ rakudo/lexical_require: Import symbols from 'require'd modules lexically

[09:10] <Geth> ¦ rakudo/lexical_require:

[09:10] <Geth> ¦ rakudo/lexical_require: This is the first part making indirect lookup operational.

[09:10] <Geth> ¦ rakudo/lexical_require: review: https://github.com/rakudo/rakudo/commit/97788ec17e

[09:10] <Geth> ¦ rakudo/lexical_require: 1018226697 | (Stefan Seifert)++ | 2 files

[09:10] <Geth> ¦ rakudo/lexical_require: Create lexical stub package for 'require'd module.

[09:10] <Geth> ¦ rakudo/lexical_require:

[09:10] <Geth> ¦ rakudo/lexical_require: require Test; will now create a lexically scoped stub package "Test" to be

[09:10] <Geth> ¦ rakudo/lexical_require: replaced by the loaded module's package at runtime. Nested packages NYI.

[09:10] <Geth> ¦ rakudo/lexical_require: With this, "require Test; Test::plan(1);" works again.

[09:10] <Geth> ¦ rakudo/lexical_require:

[09:10] <Geth> ¦ rakudo/lexical_require: Fixes RT #125083

[09:10] <Geth> ¦ rakudo/lexical_require: review: https://github.com/rakudo/rakudo/commit/1018226697

[09:10] <nine> .tell llfourn progress in the lexical_require branch :)

[09:10] <yoleaux2> nine: I'll pass your message to llfourn.

[09:12] <llfourn> Nice. nine++. Will check it out soon.

[09:12] <yoleaux2> 09:10Z <nine> llfourn: progress in the lexical_require branch :)

[09:13] <nine> Next up: nested packages. Still a bit of work to do, but I think I know the way ahead from here

[09:15] <llfourn> nine: What's a nested package?

[09:15] <nine> Foo::Bar::Baz

[09:16] <llfourn> ah for require'ing them. Cool. Interested to see how you solve it :)

[09:17] <nine> I guess the same as with 'use'. Put the nested packages into global scope if required but otherwise just create the package hierarchy lexically.

[09:18] <llfourn> are you going to need predeclare nested pacakges like require Foo <Foo::Bar::Baz>?

[09:19] <Geth> ¦ roast/lexical_require: 5d530ab368 | (Stefan Seifert)++ | S11-modules/require.t

[09:19] <Geth> ¦ roast/lexical_require: WIP for lexical require

[09:19] <Geth> ¦ roast/lexical_require: review: https://github.com/perl6/roast/commit/5d530ab368

[09:19] <llfourn> the thing is I sorta tried to do lexical require myself but I couldn't change the lexical symbols at runtime

[09:20] <llfourn> I mean for the lexical packages part. If you predeclare a stub then it's ok of course.

[09:20] <nine> And as TimToady++ told me, having lexical stubs was the plan all along.

[09:21] <nine> For indirect lookup I have a lexical %REQUIRE_SYMBOLS where I can add symbols at runtime.

[09:21] <llfourn> ah ok great.

[09:21] <llfourn> hmmmm so you won't need to declare stubs for sub-packages then?

[09:22] <nine> I do for cases like require Foo::Bar::Baz;

[09:23] <nine> But for "require <Foo>; say ::('Bar'); # which is contained in Foo"  I won't. And can't, since I don't know what's in Foo.pm

[09:23] <llfourn> yeah

[09:25] <llfourn> When I was looking at it I was thinking we should just remove the ability to do that with require. Maybe force people to use CompUnit interface to do that kind of symbol introspection.

[09:29] <nine> AFAICT the only ability we're going to loose is "require 'lib/Foo.pm'; Foo::bar();" as there's no way for us to create the proper stub symbols.

[09:33] <llfourn> nine: looking at the tests it doesn't look like we can do that now?

[09:57] <nine> llfourn: test number 4 in require.t expected it

[10:02] <llfourn> m: say "got here"; say GLOBAL::NotHERE

[10:02] <camelia> rakudo-moar 11ee2f: OUTPUT: «got here␤Could not find symbol 'NotHERE'␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[10:03] <llfourn> nine: looks like those tests in particular using GLOBAL:: could pass assuming your magic with REQUIRE_SYMBOLS can be the fallback for GLOBAL::.

[10:03] <llfourn> because they are looked up at runtime

[10:04] <llfourn> not that I want them to pass :)

[10:29] <Geth> ¦ rakudo/nom: 2a57bfcb61 | (Elizabeth Mattijsen)++ | 7 files

[10:29] <Geth> ¦ rakudo/nom: Revert "One empty list to rule them all"

[10:29] <Geth> ¦ rakudo/nom:

[10:29] <Geth> ¦ rakudo/nom: This reverts commit 11ee2fe1770b689c2dbbfa96ed7154623dd392e9.

[10:29] <Geth> ¦ rakudo/nom:

[10:29] <Geth> ¦ rakudo/nom: As Zoffix pointed out, this is basically a micro-optimization with

[10:29] <Geth> ¦ rakudo/nom: global consequences.  We need a better way.

[10:29] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2a57bfcb61

[11:30] <[Tux]> This is Rakudo version 2017.02-161-g11ee2fe17 built on MoarVM version 2017.02-20-g773711e1

[11:30] <[Tux]> csv-ip5xs        2.918

[11:30] <[Tux]> test            12.509

[11:30] <[Tux]> test-t           4.915 - 4.916

[11:30] <[Tux]> csv-parser      13.099

[11:31] <timotimo> that's more stable than i remember

[11:32] <jnthn> I guess random noise can be randomly unnoisy :)

[11:32] <timotimo> of course

[11:32] <timotimo> or maybe we improved something ;)

[11:33] <jnthn> o.O ;)

[11:33] <timotimo> inconthievable!

[11:41] <Geth> ¦ rakudo/nom: 3bf734f644 | (Zoffix Znet)++ | 2 files

[11:41] <Geth> ¦ rakudo/nom: Clarify NYI error in partially-dimensioned shaped array views

[11:41] <Geth> ¦ rakudo/nom:

[11:41] <Geth> ¦ rakudo/nom: Fixes RT#130863: https://rt.perl.org/Ticket/Display.html?id=130863

[11:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3bf734f644

[11:43] <IOninja> ZOFVM: Files=1227, Tests=132953, 123 wallclock secs (21.02 usr  3.30 sys + 2307.70 cusr 269.16 csys = 2601.18 CPU)

[18:19] <Geth> ¦ rakudo/nom: c2db930d6b | (Zoffix Znet)++ | docs/ChangeLog

[18:19] <Geth> ¦ rakudo/nom: Log all commits to date

[18:19] <Geth> ¦ rakudo/nom:

[18:19] <Geth> ¦ rakudo/nom: Documents commits:

[18:19] <Geth> ¦ rakudo/nom: 05add43 0be7247 1cafc67 254f76a 25a3cc5 26e6993 2973ccd 2cf9b53 2f6d2c6 313e7b2

[18:19] <Geth> ¦ rakudo/nom: 318f8ee 3bf734f 3de7b08 3e88c41 45b3af8 4ef1e69 556db9d 5843ee6 5c1761a 5e6f30a

[18:19] <Geth> ¦ rakudo/nom: 5ec2517 60a8f9e 61a65ce 6cb9be2 7010ae9 7425737 74573d0 7556498 755e25b 75e070f

[18:19] <Geth> ¦ rakudo/nom: 76f7187 7966dad 796b6a8 79d5670 7c279c3 7f9235c 80e0bce 81fcd1b 829762a 8301a30

[18:19] <Geth> ¦ rakudo/nom: 8e250db 8e8cd14 91a4ac5 9a109c9 9a74cd0 9d497e9 9e8ecb7 9e9a4ad a08e953 a274bdd

[18:19] <Geth> ¦ rakudo/nom: a4af702 adb6f87 ae7bcf1 b11dc88 b1def95 b283e52 b2e0ac0 b2eb115 b61b3c7 beda576

[18:19] <Geth> ¦ rakudo/nom: c1a0fa7 cd47e2a cfe0e04 d66c382 db70a1f dc5fb20 dd4dfb1 e270a15 e723e00 e8af855

[18:19] <Geth> ¦ rakudo/nom: ed971df f595733 f9eb811 fafe663

[18:19] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c2db930d6b

[19:03] <Geth> ¦ nqp: c9a0616d25 | (Pawel Murias)++ | src/vm/js/nqp-runtime/reprs.js

[19:03] <Geth> ¦ nqp: [js] Fix signature.

[19:03] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c9a0616d25

[19:03] <Geth> ¦ nqp: 028c91f8cb | (Pawel Murias)++ | 3 files

[19:03] <Geth> ¦ nqp: [js] Remove ChunkCPS, a leftover from our bitrotted CPS transform style code emitting.

[19:03] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/028c91f8cb

[19:03] <Geth> ¦ nqp: f749428e72 | (Pawel Murias)++ | 7 files

[19:03] <Geth> ¦ nqp: [js] Remove rest of our bitrotted CPS coroutine implementation.

[19:03] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f749428e72

[20:33] <lizmat> .

[20:33] <yoleaux2> 3 Mar 2017 22:35Z <IOninja> lizmat: is there any way of hiding ENL/ENLI constants from user's code? If not, perhaps we should prefix them with Rakduo::Internals. The biggest issue is they mess with sub calls that don't use parentheses: `sub ENL { say "hi" }; ENL` no longer prints "hi" and IMO such short names are fairly likely to occur in user code.

[20:35] <Geth> ¦ roast: c4364a818a | (Aleks-Daniel Jakimenko-Aleksejev)++ | S06-operator-overloading/infix.t

[20:35] <Geth> ¦ roast: Repurpose a test that is otherwise useless

[20:35] <Geth> ¦ roast:

[20:35] <Geth> ¦ roast: Perl 6 already has × operator which does exactly the same, so the test

[20:35] <Geth> ¦ roast: was not achieving anything.

[20:35] <Geth> ¦ roast:

[20:35] <Geth> ¦ roast: When it comes to defining *new* unicode operators, we already have a

[20:35] <Geth> ¦ roast: test for that in the same file (infix:<©>).

[20:35] <Geth> ¦ roast:

[20:35] <Geth> ¦ roast: Therefore, let's make it test for unicode operator overloading.

[20:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c4364a818a

[20:46] <Geth> ¦ rakudo/nom: 20fa14be7a | (Elizabeth Mattijsen)++ | src/core/Int.pm

[20:46] <Geth> ¦ rakudo/nom: Fix RT #130913 and RT #130914

[20:46] <Geth> ¦ rakudo/nom:

[20:46] <Geth> ¦ rakudo/nom: Without slowing down chr() noticeably.

[20:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/20fa14be7a

[20:47] <lizmat> hmmm... we lost the synopsebot ?

[20:51] * IOninja does things

[20:52] <IOninja> RT #130913 and RT #130914

[20:52] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130913

[20:52] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130914

[20:55] <lizmat> whee!

[21:04] <Geth> ¦ rakudo/nom: b59739866b | (Elizabeth Mattijsen)++ | 2 files

[21:04] <Geth> ¦ rakudo/nom: Make sure some more nqp::splice cases don't allocate

[21:04] <Geth> ¦ rakudo/nom:

[21:04] <Geth> ¦ rakudo/nom: repeatedly to splice out elements of a low-level list.

[21:04] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b59739866b

[22:08] <Geth> ¦ rakudo/nom: e114d52043 | (Elizabeth Mattijsen)++ | src/core/metaops.pm

[22:08] <Geth> ¦ rakudo/nom: Make triangle reduce right op with 2 params 2x as fast

[22:08] <Geth> ¦ rakudo/nom:

[22:08] <Geth> ¦ rakudo/nom: Too tired to take care of 2+ param case now.  Will do tomorrow

[22:08] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e114d52043

[22:08] <lizmat> good night, #perl6-dev!
