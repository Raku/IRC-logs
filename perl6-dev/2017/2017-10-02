[05:26] <AlexDaniel> buggable: tags

[05:26] <buggable> AlexDaniel, Total: 1647; 6.D: 1; 9999: 10; @LARRY: 24; ANNOYING: 7; BOOTSTRAP: 5; BUG: 602; BUILD: 12; CONC: 48; DOCS: 1; EXOTICTEST: 1; GLR: 3; IO: 23; JVM: 53; LTA: 177; MATH: 4; META: 1; MOAR: 1; NATIVECALL: 22; NYI: 55; OO: 13; OPTIMIZER: 8; OSX: 2; PARSER: 5; PERF: 28; POD: 19; PRECOMP: 15; REGEX: 48; REGRESSION: 37; REPL: 6; RFC: 63; RT: 1;

[05:26] <buggable> AlexDaniel, SECURITY: 1; SEGV: 25; SINK: 1; SITE: 1; SPESH: 1; STAR: 7; TESTCOMMITTED: 10; TESTNEEDED: 46; TODO: 13; UNI: 26; UNTAGGED: 416; WEIRD: 2; WINDOWS: 3; See http://fail.rakudo.party/ for details

[05:26] <AlexDaniel> buggable: tag EXOTICTEST

[05:26] <buggable> AlexDaniel, There is 1 ticket tagged with EXOTICTEST; See http://fail.rakudo.party/t/EXOTICTEST for details

[05:27] <AlexDaniel> buggable: tag PARSER

[05:27] <buggable> AlexDaniel, There are 5 tickets tagged with PARSER; See http://fail.rakudo.party/t/PARSER for details

[05:42] <samcv> about to update for emoji v5

[05:42] <samcv> after i make sure to automate being backward compatible with old emoji names

[05:59] <Geth> ¦ roast: 2578606b60 | (Samantha McVey)++ | S32-io/open.t

[05:59] <Geth> ¦ roast: Make S32-io/open.t work in a folder other than t/spec

[05:59] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2578606b60

[06:01] <Geth> ¦ roast: b54c7d3fbe | (Samantha McVey)++ | S02-literals/quoting-unicode.t

[06:01] <Geth> ¦ roast: Remove ornate parenthesis from quoting-unicode.t

[06:01] <Geth> ¦ roast:

[06:01] <Geth> ¦ roast: These should never have been added as they are not considered

[06:01] <Geth> ¦ roast: brackets by Unicode. There are no modules in the ecosystem which use it

[06:01] <Geth> ¦ roast: and saving this for Perl 6.d would not be viable or needed.

[06:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b54c7d3fbe

[06:14] <nine> I'm signing off now. Will be back from vacation in Thailand on October 17th. Remember to have fun while I'm gone :)

[06:30] <samcv> have fun!

[07:00] <moritz> nine: have a nice vacation!

[07:00] <moritz> and yes, Thailand sounds like more fun than central Europe right now :-)

[07:12] * AlexDaniel marks a ticket as [6.d] because it says that it's a thing that has to be decided “before Christmas”

[07:12] <AlexDaniel> (RT #126283)

[07:12] <synopsebot> RT#126283 [new]: https://rt.perl.org/Ticket/Display.html?id=126283 [6.d][@LARRY] invocants default to :D ?

[07:29] <|Tux|> This is Rakudo version 2017.09-183-g4ca1fc3c1 built on MoarVM version 2017.09.1-62-g89ca8eb0

[07:29] <|Tux|> csv-ip5xs        1.198 -  1.205

[07:29] <|Tux|> test             9.613 -  9.657

[07:29] <|Tux|> test-t           3.258 -  3.298

[07:29] <|Tux|> csv-parser      12.715 - 12.716

[09:00] <lizmat> ok, now that we've determined that we need to keep Mu.BUILDALL around in its current shape, because classes created by mixing in a role at runtime with "but"

[09:00] <lizmat> cannot have an auto-generated BUILDALL, because we do not have a compiler object ready at runtime

[09:01] <lizmat> how do we go about this then?

[09:02] <lizmat> my original plan was to eradicate the BUILDALLPLAN attribute completely

[09:02] <lizmat> but it is clear now that we at least need that around for those classes created at runtime

[09:30] <jnthn> Ah, I hadn't expected we'd eliminate that :)

[10:58] <Geth> ¦ rakudo/nom: 92f239b557 | (Elizabeth Mattijsen)++ | src/core/Exception.pm

[10:58] <Geth> ¦ rakudo/nom: Attributes set from nqp land wind up unhllized

[10:58] <Geth> ¦ rakudo/nom:

[10:58] <Geth> ¦ rakudo/nom: - circumvent the issue by making the attributes natives

[10:58] <Geth> ¦ rakudo/nom: - fixes failures in S32-str/sprintf.t that occurred since BUILDALL refactor

[10:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/92f239b557

[11:25] <Geth> ¦ rakudo/nom: 7fa707db73 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ClassHOW.nqp

[11:25] <Geth> ¦ rakudo/nom: We shouldn't let BUILDALL installation fail silently

[11:25] <Geth> ¦ rakudo/nom:

[11:25] <Geth> ¦ rakudo/nom: We want to be able to remove the actual BUILDALLPLAN from memory once

[11:25] <Geth> ¦ rakudo/nom: the method is installed.

[11:25] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7fa707db73

[11:25] <timotimo> huh, why?

[11:26] <timotimo> also, is the check for BUILDPLAN but complain about BUILDALL a typo?

[11:26] <lizmat> which check?

[11:26] <timotimo> if nqp::existskey($obj.HOW.method_table($obj),'BUILDPLAN') {

[11:26] <timotimo> nqp::say($obj.HOW.name($obj) ~ ' already has a BUILDALL');

[11:27] <lizmat> hmmm...

[11:27] <lizmat> no, typo

[11:28] <timotimo> OK, that at least prevents the crash when you have a BUILDALL method in your class

[11:28] <timotimo> but it will now output to stdout at compile time when you do that

[11:28] <timotimo> m: say "what version?"

[11:28] <camelia> rakudo-moar : OUTPUT: «Cannot allocate memory»

[11:28] <lizmat> perhaps I should make it a nqp::die()

[11:29] <lizmat> que?

[11:29] <lizmat> m: 42

[11:29] <camelia> rakudo-moar 92f239: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant integer 42 in sink context (line 1)␤»

[11:29] <timotimo> i want the commit after that :P

[11:29] <timotimo> c: 7fa707db73 say "hi"

[11:29] <lizmat> m: say "que?"

[11:29] <committable6> timotimo, ¦7fa707d: «Cannot find this revision (did you mean “4f9fa6b”?)»

[11:29] <camelia> rakudo-moar 92f239: OUTPUT: «que?␤»

[11:29] <lizmat> m: say "what version?"

[11:29] <camelia> rakudo-moar 92f239: OUTPUT: «what version?␤»

[11:29] <timotimo> anyway, run this locally:

[11:29] <lizmat> ok, transient issue

[11:30] <timotimo> m: class Foo { has $.bar; submethod BUILDALL(|) { } }

[11:30] <camelia> rakudo-moar 92f239: ( no output )

[11:30] <lizmat> ah, I should check the submethod table

[11:31] <timotimo> what if someone puts in a method BUILDALL instead?

[11:31] <timotimo> m: class Foo { has $.bar; method BUILDALL(|) { } }

[11:31] <lizmat> argh, I should probably check both

[11:31] <camelia> rakudo-moar 92f239: ( no output )

[11:31] <lizmat> yeah

[11:31] <timotimo> i wonder under what other circumstances add_method can fail

[11:32] <lizmat> m: class A { method a() {}; submethod a() {} }

[11:32] <camelia> rakudo-moar 7fa707: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Package 'A' already has a submethod 'a' (did you mean to declare a multi-method?)␤at <tmp>:1␤»

[11:32] <lizmat> error message LTA

[11:34] <ilmari> class A { submethod a() {}; method a() {} } # ditto

[11:34] <ilmari> m: class A { submethod a() {}; method a() {} } # ditto

[11:34] <camelia> rakudo-moar 7fa707: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Package 'A' already has a method 'a' (did you mean to declare a multi-method?)␤at <tmp>:1␤»

[11:35] <timotimo> hm.

[11:36] <ilmari> it's using the type of the new method, not the existing one

[11:36] <timotimo> if you have a submethod a and a method a, instances of that class would get your submethod and any class that derives from yours gets the method

[11:37] <lizmat> yeah, looking at fixing that

[12:01] <Geth> ¦ rakudo/nom: d76af6aa45 | (Elizabeth Mattijsen)++ | src/core/Exception.pm

[12:01] <Geth> ¦ rakudo/nom: Make the use-case a native str

[12:01] <Geth> ¦ rakudo/nom:

[12:01] <Geth> ¦ rakudo/nom: If we get one passed from NQP land, e.g. with "BEGIN die", we can

[12:01] <Geth> ¦ rakudo/nom: handle it.

[12:01] <Geth> ¦ rakudo/nom:

[12:01] <Geth> ¦ rakudo/nom: This is another ad-hoc fix for an apparent change in behaviour between

[12:01] <Geth> ¦ rakudo/nom: autogenerated BUILDALL and Mu.BUILDALL.

[12:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d76af6aa45

[12:16] <Geth> ¦ rakudo/nom: e513b857c0 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ClassHOW.nqp

[12:16] <Geth> ¦ rakudo/nom: Should check both (sub)method tables for BUILDALL

[12:16] <Geth> ¦ rakudo/nom:

[12:16] <Geth> ¦ rakudo/nom: - because a class could have a custom method BUILDALL

[12:16] <Geth> ¦ rakudo/nom: - also fix typo in name, spotted by timotimo++

[12:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e513b857c0

[12:48] <lizmat> m: grammar A { token a { }; rule a { } }   # ilmari similar but different

[12:48] <camelia> rakudo-moar e513b8: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Package 'A' already has a regex 'a' (did you mean to declare a multi-method?)␤at <tmp>:1␤»

[13:14] <lizmat> jnthn  timotimo Zoffix: how about ^^^ giving this as the error:

[13:15] <lizmat> Package 'A' already has a regex-like 'a' (did you mean to declare a multi regex?)

[13:15] <lizmat> hmmm...

[13:15] <timotimo> m: grammar A { method a { }; rule a {} }

[13:15] <camelia> rakudo-moar e513b8: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Package 'A' already has a regex 'a' (did you mean to declare a multi-method?)␤at <tmp>:1␤»

[13:16] <lizmat> the problem is that token rule regex are all Regex en

[13:16] <lizmat> and I didn't find a way to find out what they are exactly other than looking at the $!source

[13:16] * Zoffix has no opinion

[13:17] <lizmat> afk for a bit&

[13:19] <timotimo> m: grammar A { proto token test { }; multi regex test:sym<foo> { }; multi method test:sym<bar> { } }

[13:19] <camelia> rakudo-moar e513b8: OUTPUT: «5===SORRY!5===␤Null regex not allowed␤at <tmp>:1␤------> 3grammar A { proto token test { 7⏏5}; multi regex test:sym<foo> { }; multi ␤Proto regex body must be {*} (or <*> or <...>, which are deprecated)␤at <tmp>:1␤------> 3grammar A…»

[13:19] <timotimo> m: grammar A { proto token test { }; multi regex test:sym<foo> { foo }; multi method test:sym<bar> { } }

[13:19] <camelia> rakudo-moar e513b8: OUTPUT: «5===SORRY!5===␤Null regex not allowed␤at <tmp>:1␤------> 3grammar A { proto token test { 7⏏5}; multi regex test:sym<foo> { foo }; mu␤Proto regex body must be {*} (or <*> or <...>, which are deprecated)␤at <tmp>:1␤------> 3grammar A…»

[13:19] <timotimo> m: grammar A { proto token test {*}; multi regex test:sym<foo> { foo }; multi method test:sym<bar> { } }

[13:19] <camelia> rakudo-moar e513b8: ( no output )

[13:20] <timotimo> interesting, i would have expected it to complain about the method not having an nfa or something

[13:20] <timotimo> m: grammar A { proto token test {*}; multi regex test:sym<foo> { foo }; multi method test:sym<bar> { say "hello, i'm the method" } }; A.parse("bar")

[13:20] <camelia> rakudo-moar e513b8: OUTPUT: «No such method 'TOP' for invocant of type 'A'␤  in block <unit> at <tmp> line 1␤␤»

[13:20] <timotimo> m: grammar A { rule TOP { test }; proto token test {*}; multi regex test:sym<foo> { foo }; multi method test:sym<bar> { say "hello, i'm the method" } }; A.parse("bar")

[13:20] <camelia> rakudo-moar e513b8: ( no output )

[13:20] <timotimo> m: grammar A { rule TOP { <test> }; proto token test {*}; multi regex test:sym<foo> { foo }; multi method test:sym<bar> { say "hello, i'm the method" } }; A.parse("bar")

[13:20] <camelia> rakudo-moar e513b8: OUTPUT: «hello, i'm the method␤P6opaque: no such attribute '$!pos' in type Match when trying to get a value␤  in regex test at <tmp> line 1␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:20] <timotimo> huh, it Just Works, i assume it just treats it as if it didn't have a declarative prefix

[13:20] <timotimo> that's pretty cool

[13:26] <Zoffix> ZOFFLOP: t/spec/S17-promise/nonblocking-await.t  (flopped twice)

[13:27] <Zoffix> Second time via t/fudgeandrun, so I caught the full failure outpuit: https://gist.github.com/zoffixznet/150e79cd30cf47ebac559dba5c718e3a

[13:28] <Geth> ¦ rakudo/nom: 4906a1de8a | (Zoffix Znet)++ | src/core/IO/Path.pm

[13:28] <Geth> ¦ rakudo/nom: Fix &chdir failing to respect :CWD attribute

[13:28] <Geth> ¦ rakudo/nom:

[13:28] <Geth> ¦ rakudo/nom: The method simply uses Str() coercion, but .Str on IO::Paths

[13:28] <Geth> ¦ rakudo/nom: ignores their :CWD attribute, which causes &chdir into such

[13:28] <Geth> ¦ rakudo/nom: IO::Paths to chdir into the wrong dir.

[13:28] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4906a1de8a

[13:29] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make the use-case a native str

[13:29] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/282218756 https://github.com/rakudo/rakudo/compare/7fa707db7347...d76af6aa4560

[13:29] <buggable> [travis build above] ☠ All failures are due to: failed make test (1 failure). Across all jobs, only t/04-nativecall/12-sizeof.t test file failed.

[13:29] <Geth> ¦ roast: 07e934d274 | (Zoffix Znet)++ | 2 files

[13:29] <Geth> ¦ roast: Test &chdir/&*chdir to IO::Path respect :CWD

[13:29] <Geth> ¦ roast:

[13:29] <Geth> ¦ roast: Rakudo fix for &chdir: https://github.com/rakudo/rakudo/commit/4906a1de8a

[13:29] <Geth> ¦ roast: &*chdir was not affected by the bug; test just covers it

[13:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/07e934d274

[14:31] <jnthn> lizmat: But sticking multi on the regex won't help, so suggesting it won't help

[14:31] <jnthn> lizmat: Probably better not to say anything

[14:31] <jnthn> (anything about multi, that is)

[14:33] <jnthn> On Rakudo HEAD I'm still seeing the missing static coderef thingy fwiw

[14:38] <jnthn> use Cro::HTTP::Client is enough to trigger it

[14:38] <jnthn> Of course, that has a long dep chain

[14:44] <jnthn> But seems it's something in that file itself

[14:45] <jnthn> aha

[14:45] <jnthn> Turns out that the changes have broken OO::Monitors

[14:45] <jnthn> Or at least, precompilation of anything that uses that module

[14:45] <jnthn> :/

[14:49] <lizmat> jnthn: if we're talking "static coderef", what should I be looking for ?

[14:50] <jnthn> A static coderef is something in the codes list of a serialization context

[14:51] <jnthn> In this case apparently one is missing

[14:52] <jnthn> It's odd though because those things all get fixed up at the end of compilation, ordinarily

[14:53] <jnthn> We always call self.add_root_code_ref($stub, $code_past), which makes it odd how it'd ever be managing to go wrong

[14:54] <lizmat> well, the error also mentions a closure, no ?

[14:54] <jnthn> Right

[14:55] <jnthn> It traces closures back to what they were originally a clone of

[14:55] <jnthn> And expects to find that in the root set of code objects

[14:55] * lizmat is testing this fix: https://gist.github.com/lizmat/9c7c9697be9d1e727b34e550bdf91cda

[14:55] <lizmat> jnthn: could that be it ? ^^^

[14:55] <jnthn> Hmmm

[14:56] <jnthn> It'd be...a bit odd...if it is, but possible I guess

[14:56] <lizmat> closing over $BUILDALLPLAN

[14:56] <jnthn> Yeah, but what closes over it?

[14:56] <lizmat> well, BUILDPLAN returns its @!BUILDALLPLAN

[14:57] <lizmat> hmmm...

[14:58] <jnthn> ohhh

[14:58] <jnthn> monitor adds its own BUILDALL

[14:58] <lizmat> aahh

[14:58] <jnthn> 'cus it wants to do the lock setup

[14:58] <lizmat> isn't TWEAK better for that ?>

[14:58] <jnthn> But it's added before the call to compose

[14:58] <jnthn> No, 'cus the user may have one of those too

[14:59] <lizmat> are you on rakudo HEAD ?

[14:59] <jnthn> It looks like we shouldn't even try to create a BUILDALL if there already is one, though

[14:59] <jnthn> Yes

[14:59] <lizmat> because the check for an existing BUILDALL was faulty

[14:59] <lizmat> and I fixed that earlier this afternoon

[15:00] <jnthn> Yeah, I already have e513b857c0

[15:00] * jnthn make install's again just in case

[15:00] <jnthn> Yeah, still broke

[15:00] <lizmat> FWIW, any class can have its own BUILDALL

[15:00] <lizmat> it's documented

[15:00] <jnthn> Sure

[15:00] <jnthn> It handles that mine

[15:00] <jnthn> *fine

[15:00] <jnthn> Just .wraps the existing one

[15:00] <lizmat> sometimes I think we'e exposing too many knobs

[15:02] <jnthn> Hmm

[15:03] <jnthn> I expected perl6-m --target=mbc --output=foo.moarvm -e 'use OO::Monitors; monitor Foo { }' to blow up but it doesn't

[15:04] <lizmat> jnthn: does your BUILDALL take an array as well ?

[15:04] <jnthn> wat

[15:05] <jnthn> It's fine if the monitor is at lexical/at the top level of the file, but not if it's in a nested package? o.O

[15:05] <lizmat> ah, yes, that may be an issue that I worked around with in the setting

[15:05] <jnthn> goodness

[15:05] <jnthn> $ perl6-m --target=mbc --output=foo.moarvm -e 'use OO::Monitors; class A { my monitor Foo { } }'

[15:05] <lizmat> 31a03a41f0e3a609a9248

[15:05] <jnthn> That blows

[15:06] <jnthn> Remove class A and it doesn't

[15:07] <jnthn> I don't get that commit message

[15:08] <jnthn> It claims that we try to .new something that refers to the outer class, but Holder doesn't even mention Lock::Async anywhere in its body

[15:08] <dogbert17> lizmat: the htmlify problem a couple of days ago also involved OO::Monitors

[15:09] <lizmat> jnthn: lemme try to revert that one

[15:10] <jnthn> dogbert17: Is it still a problem, or?

[15:11] <lizmat> jnthn: seems setting compiles fine now with that one reverted

[15:11] <jnthn> Hm, ok

[15:11] <lizmat> so false alarm, sorry for the noise

[15:11] <lizmat> it was needed at the time to get the setting to build

[15:12] <dogbert17> nope, it disappeared when lizmat did something with $\ or somesuch

[15:12] <lizmat> yeah, the hack to get $/ into the generated BUILDALL method

[15:12] <jnthn> Hm, I wonder if it only has monitors at the top-level scope

[15:13] <Geth> ¦ rakudo/nom: f80a84617b | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/ClassHOW.nqp

[15:13] <dogbert17> jnthn: this commit fixed htmlify: https://github.com/rakudo/rakudo/commit/4959df3f314837e2ef658efd0ff0d7ee3b3dadcc

[15:13] <Geth> ¦ rakudo/nom: Only fetch BUILDALLPLAN if we need it

[15:13] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f80a84617b

[15:14] <jnthn> yeah, its ones aren't nested: https://github.com/perl6/doc/blob/master/htmlify.p6#L42

[15:17] <jnthn> What's really odd is that afaict, since it's adding a BUILDALL sub, and only then calling .compose in Perl6::Metamodel:ClassHOW, none of the compiler services code should be even running or doing anything

[15:18] <jnthn> So effectively, nothing should have changed

[15:19] <lizmat> well, it was way over my head when I started, and I still have a "wizard's apprentice" feeling about what I did  :-)

[15:20] <jnthn> bisectable6: help

[15:20] <bisectable6> jnthn, Like this: bisectable6: old=2015.12 new=HEAD exit 1 if (^∞).grep({ last })[5] // 0 == 4 # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Bisectable

[15:20] <jnthn> m: say CORE::<&run>

[15:20] <camelia> rakudo-moar 4906a1: OUTPUT: «sub run (*@args where { ... }, :$in = "-", :$out = "-", :$err = "-", Bool :$bin, Bool :$chomp = Bool::True, Bool :$merge, Str :$enc, Str:D :$nl = "\n", :$cwd = { ... }, :$env) { #`(Sub|39221472) ... }␤»

[15:21] <jnthn> oh but I guess I can't use OO::Monitors on bisectable :(

[15:22] <lizmat> https://youtu.be/Rrm8usaH0sM?list=PLxTRyfCW8nXCfK2qj4XtS4nk8RqcIcvVh&t=109   # :-)

[15:22] <Zoffix> you can

[15:22] <jnthn> Oh, cool

[15:22] <Zoffix> buggable: eco OO::Monitors

[15:22] <buggable> Zoffix, OO::Monitors 'Objects with mutual exclusion and condition variables': https://github.com/jnthn/oo-monitors

[15:22] <Zoffix> c: HEAD use lib <data/all-modules/jnthn/oo-monitors/lib>; use OO::Monitors;

[15:22] <committable6> Zoffix, ¦HEAD(f80a846): «»

[15:23] <jnthn> bisectable6: CORE::<&run>('./perl6-m', '--target=mbc', '--output=foo.moarvm', '-e', 'use lib <data/all-modules/jnthn/oo-monitors/lib>; use OO::Monitors; class A { monitor Foo { } }')

[15:23] <bisectable6> jnthn, Bisecting by output (old=2015.12 new=f80a846) because on both starting points the exit code is 1

[15:23] <bisectable6> jnthn, bisect log: https://gist.github.com/47b841ca5916c91a40e95fb5099b2723

[15:23] <bisectable6> jnthn, (2016-09-17) https://github.com/rakudo/rakudo/commit/c4fd9f515d49deea06d1462057e820608041eb9b

[15:24] <Zoffix> oh, but &run is restricted :}

[15:24] <Zoffix> Or is it

[15:24] <jnthn> bisectable6: CORE::<&run>($*EXECUTABLE, '--target=mbc', '--output=foo.moarvm', '-e', 'use lib <data/all-modules/jnthn/oo-monitors/lib>; use OO::Monitors; class A { monitor Foo { } }')

[15:24] <bisectable6> jnthn, Bisecting by output (old=2015.12 new=f80a846) because on both starting points the exit code is 1

[15:24] <Zoffix> m: say CORE::<&run>('ls')

[15:24] <camelia> rakudo-moar 4906a1: OUTPUT: «Inline-Perl5␤Perlito␤bin␤dalek-queue␤evalbot␤evalbot.log␤hs_err_pid10366.log␤hs_err_pid10555.log␤hs_err_pid1132.log␤hs_err_pid12340.log␤hs_err_pid13296.log␤hs_err_pid1587.log␤hs_err_pid17303.log␤hs_err_pid18415.log␤hs_err_pid1…»

[15:24] <bisectable6> jnthn, bisect log: https://gist.github.com/3ccd92d6186249d6c179a2fed2fd14ee

[15:24] <bisectable6> jnthn, (2016-09-17) https://github.com/rakudo/rakudo/commit/c4fd9f515d49deea06d1462057e820608041eb9b

[15:24] <jnthn> Zoffix: Not if you know how to cheat :)

[15:24] <Zoffix> :D

[15:24] <jnthn> oh darn

[15:24] <jnthn> 'use lib may not be precompiled'

[15:25] <jnthn> bisectable6: CORE::<&run>($*EXECUTABLE, '--target=mbc', '--output=foo.moarvm', '-e', 'use data::all-modules::jnthn::oo-monitors::lib::OO::Monitors; class A { monitor Foo { } }')

[15:25] <bisectable6> jnthn, Bisecting by output (old=2015.12 new=f80a846) because on both starting points the exit code is 1

[15:25] <bisectable6> jnthn, bisect log: https://gist.github.com/a2edd152115becdca4e8f486d3c0dce4

[15:25] <bisectable6> jnthn, (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb52eb1fd07397659f19a5cf36dc61f84053

[15:25] <bisectable6> jnthn, The result looks a bit unrealistic, doesn't it? Most probably the output is different on every commit (e.g. ｢bisect: say rand｣)

[15:26] <jnthn> oh, of course, . isn't in the search paht either

[15:27] <jnthn> bisectable6: CORE::<&run>($*EXECUTABLE, '--target=mbc', '--output=foo.moarvm', '-e', 'BEGIN %*ENV<PERL6LIB> = 'data/all-modules/jnthn/oo-monitors/lib'; use OO::Monitors; class A { monitor Foo { } }')

[15:27] <bisectable6> jnthn, Bisecting by output (old=2015.12 new=f80a846) because on both starting points the exit code is 1

[15:27] <jnthn> :(

[15:27] <bisectable6> jnthn, bisect log: https://gist.github.com/3ae15e0a91efa17853e37d6509764201

[15:27] <bisectable6> jnthn, (2017-08-31) https://github.com/rakudo/rakudo/commit/ed4f6cc998906ab0f868e19c19a7e66efd70a4b2

[15:27] <jnthn> Running out of ways to cheat this :/

[15:27] <jnthn> bisectable6: CORE::<&run>($*EXECUTABLE, '--target=mbc', '--output=foo.moarvm', '-e', 'BEGIN %*ENV<PERL6LIB> = "data/all-modules/jnthn/oo-monitors/lib"; use OO::Monitors; class A { monitor Foo { } }')

[15:28] <bisectable6> jnthn, Bisecting by output (old=2015.12 new=f80a846) because on both starting points the exit code is 1

[15:28] <jnthn> messed up quotes...

[15:28] <bisectable6> jnthn, bisect log: https://gist.github.com/d50df7d301d28c48202cb30e1dab8131

[15:28] <bisectable6> jnthn, (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb52eb1fd07397659f19a5cf36dc61f84053

[15:28] <bisectable6> jnthn, The result looks a bit unrealistic, doesn't it? Most probably the output is different on every commit (e.g. ｢bisect: say rand｣)

[15:28] <jnthn> ah, closer

[15:29] <jnthn> bisectable6: 2017.09 HEAD CORE::<&run>($*EXECUTABLE, '--target=mbc', '--output=foo.moarvm', '-e', 'BEGIN %*ENV<PERL6LIB> = "data/all-modules/jnthn/oo-monitors/lib"; use OO::Monitors; class A { monitor Foo { } }')

[15:29] <bisectable6> jnthn, On both starting points (old=2015.12 new=f80a846) the exit code is 1 and the output is identical as well

[15:29] <bisectable6> jnthn, https://gist.github.com/14d808081b1aac96e5e8caf7d40650bd

[15:29] <Zoffix> bisectable6: old=2017.09,new=HEAD CORE::<&run>($*EXECUTABLE, '--target=mbc', '--output=foo.moarvm', '-e', 'BEGIN %*ENV<PERL6LIB> = "data/all-modules/jnthn/oo-monitors/lib"; use OO::Monitors; class A { monitor Foo { } }')

[15:29] <bisectable6> Zoffix, Bisecting by output (old=2017.09 new=f80a846) because on both starting points the exit code is 1

[15:29] <bisectable6> Zoffix, bisect log: https://gist.github.com/01c6be1fa2c160694a7a04bec58abfcc

[15:29] <bisectable6> Zoffix, (2017-09-18) https://github.com/rakudo/rakudo/commit/5a19dffa075ec8cc66adc4a43966c3d4b897ae90

[15:30] <Zoffix> c: 5a19dffa075e,5a19dffa075e~1 CORE::<&run>($*EXECUTABLE, '--target=mbc', '--output=foo.moarvm', '-e', 'BEGIN %*ENV<PERL6LIB> = "data/all-modules/jnthn/oo-monitors/lib"; use OO::Monitors; class A { monitor Foo { } }')

[15:30] <timotimo> oh, does bisectable run as a systemd service with read-only filesystem?

[15:30] <committable6> Zoffix, https://gist.github.com/0954adac5d3469b9cd4fed2fe744cd36

[15:30] <jnthn> Yeah, looks like it :(

[15:30] <Zoffix> Unable to write bytecode to 'foo.moarvm'

[15:30] <jnthn> dammit

[15:30] <MasterDuke> yeah, that's a relatively new change

[15:30] <MasterDuke> i think there still are some writable locations

[15:30] <timotimo> disable it if the user's host is @jnthn.net :)

[15:30] <jnthn> :P

[15:30] <timotimo> oh, it's no longer that, though

[15:30] <timotimo> your linode is showing, jnthn

[15:31] <jnthn> Didn't try to hide it ;)

[15:31] <timotimo> jnthn is also not registered with services :)

[15:31] <Zoffix> bisectable6: old=2017.09,new=HEAD CORE::<&run>($*EXECUTABLE, '--target=mbc', '--output=/tmp/foo.moarvm', '-e', 'BEGIN %*ENV<PERL6LIB> = "data/all-modules/jnthn/oo-monitors/lib"; use OO::Monitors; class A { monitor Foo { } }')

[15:31] <bisectable6> Zoffix, Bisecting by exit code (old=2017.09 new=f80a846). Old exit code: 0

[15:31] <bisectable6> Zoffix, bisect log: https://gist.github.com/6facd594ef3a5708295d9f478f50dda9

[15:31] <bisectable6> Zoffix, (2017-09-28) https://github.com/rakudo/rakudo/commit/eb9c3d4dd7791ad1b483adb857d1062993455dec

[15:31] <jnthn> oh, nice :)

[15:32] <jnthn> Oh, except it found the other commit (adding $/ to CompilerServices)

[15:32] <MasterDuke> oh right, they should have private /tmp's now

[15:32] <timotimo> aye, we'd have to throw out the $/ so we can find the *real* culprit

[15:33] <jnthn> Well, guess I can run it with c here and manually find it

[15:33] <Zoffix> bisect: old=eb9c3d4dd7791ad1,new=HEAD CORE::<&run>($*EXECUTABLE, '--target=mbc', '--output=/tmp/foo.moarvm', '-e', 'BEGIN %*ENV<PERL6LIB> = "data/all-modules/jnthn/oo-monitors/lib"; use OO::Monitors; class A { monitor Foo { } }')

[15:33] <bisectable6> Zoffix, Bisecting by output (old=eb9c3d4 new=f80a846) because on both starting points the exit code is 1

[15:34] <bisectable6> Zoffix, bisect log: https://gist.github.com/88e8434feb8aebacfdf68d195540715b

[15:34] <bisectable6> Zoffix, (2017-09-28) https://github.com/rakudo/rakudo/commit/145e3156ca4377845db9677f7877223b82d10ae9

[15:34] <Zoffix> c: 145e3156ca4377845db96,145e3156ca4377845db96~1 CORE::<&run>($*EXECUTABLE, '--target=mbc', '--output=/tmp/foo.moarvm', '-e', 'BEGIN %*ENV<PERL6LIB> = "data/all-modules/jnthn/oo-monitors/lib"; use OO::Monitors; class A { monitor Foo { } }')

[15:34] <committable6> Zoffix, https://gist.github.com/980a3d447b5157ed9bd0d3541f961431

[15:34] <jnthn> c: 31a03a41f0e3a CORE::<&run>($*EXECUTABLE, '--target=mbc', '--output=foo.moarvm', '-e', 'BEGIN %*ENV<PERL6LIB> = "data/all-modules/jnthn/oo-monitors/lib"; use OO::Monitors; class A { monitor Foo { } }')

[15:34] <committable6> jnthn, https://gist.github.com/f5396336b7bb72b593ce9db92af61072

[15:35] <jnthn> c: 31a03a41f0e3a CORE::<&run>($*EXECUTABLE, '--target=mbc', '--output=/tmp/foo.moarvm', '-e', 'BEGIN %*ENV<PERL6LIB> = "data/all-modules/jnthn/oo-monitors/lib"; use OO::Monitors; class A { monitor Foo { } }')

[15:35] <committable6> jnthn, https://gist.github.com/88a8eed99393bf3d8fa8edce5ad679eb

[15:35] <jnthn> c: d3c481854ec346 CORE::<&run>($*EXECUTABLE, '--target=mbc', '--output=/tmp/foo.moarvm', '-e', 'BEGIN %*ENV<PERL6LIB> = "data/all-modules/jnthn/oo-monitors/lib"; use OO::Monitors; class A { monitor Foo { } }')

[15:35] <committable6> jnthn, https://gist.github.com/98088e7f9ab5274c700ee23c691fb8d9

[15:36] <jnthn> Darn, so it happened while the $/ thing was in the way of the real error

[15:37] <lizmat> but narrows it down quite a bit

[15:38] <lizmat> I'd say 5cd9197fe3707d513671af6f or 6824e19282e19a0953fc or 7363f898f67ee7d8117ff9

[15:40] <jnthn> None of the changes look obviously to blame, reading the diffs

[15:42] <lizmat> well, all of the other commits have nothing to do with BUILDALL

[15:42] <lizmat> between $/ being added and removed

[15:42] <timotimo> it doesn't have to be buildall

[15:43] <lizmat> well, chances are it *is* buildall

[15:43] <lizmat> I mean, how often have we autogenerated methods before ?

[15:43] <lizmat> that need to be precompilable

[15:43] <timotimo> well, yeah

[15:44] <lizmat> anyways I still cannot revert 5cd9197fe3707d513

[15:44] <lizmat> ===SORRY!===

[15:44] <lizmat> Cannot perform this operation on an uninstantiated definite type

[15:44] <lizmat> on make install

[15:48] <timotimo> ===SORRY!=== Error while compiling /home/timo/.zef/store/DBIish.git/aad9a964651e16cd8c87a75d411580007d5894de/lib/DBDish/Pg/Native.pm6 (DBDish::Pg::Native)

[15:48] <timotimo> Can't use unknown trait 'is native' in a sub+{callable[uint32]} declaration.

[15:49] <timotimo> how did i break this? wow

[15:49] <lizmat> or did I ?

[15:50] <lizmat> :-(

[15:50] <timotimo> that would surprise me

[15:50] <timotimo> if "make test" still passes; that has nativecall stuff, doesn't it?

[15:51] <jnthn> Trying various commits with the $/ removal patch (not quite a cherry-pick of it, since that doesn't quite apply, but close enough)

[15:55] * jnthn notices his time for fixing something else has all vanished trying to hunt this down :(

[15:56] <timotimo> :\

[15:56] <timotimo> it looks like DBIish just didn't put "use NativeCall" into their files?

[15:56] <timotimo> how'd they get away with that

[15:57] <lizmat> perhaps we should put a dummy "is native" trait in core setting, telling you to load it ?

[15:58] <lizmat> brb

[15:58] <jnthn> So far as I can tell all the way back to a89add0bf8bd9e8b164b48f24908f4603d4c0b87 is busted

[15:58] <jnthn> That doesn't leave many commits

[16:00] <lizmat> brb

[16:00] <timotimo> bisectable6: sub foo is native { }

[16:00] <bisectable6> timotimo, On both starting points (old=2015.12 new=f80a846) the exit code is 1 and the output is identical as well

[16:00] <bisectable6> timotimo, https://gist.github.com/920102b9cb4739942cfd149eae822101

[16:01] <jnthn> huh, that gets me right to the commit that added the $/ stuff

[16:05] <timotimo> well, what the heck is even going on

[16:06] <ugexe> timotimo: maybe related? https://github.com/rakudo/rakudo/commit/80d6b425ce0facda1e9e6faa93d834d0668893bc

[16:08] <timotimo> that would surprise me

[16:09] <ugexe> it moves the is native trait into an EXPORT sub, and also doesn't export with the tags :DEFAULT or :traits fwiw

[16:09] <timotimo> oh, huh

[16:10] <timotimo> my PR to dbiish got merged already

[16:14] <ugexe> ah i see, looking at your PR the export was somehow leaking in before.

[16:17] <timotimo> one of the Native mods already had "use NativeCall" in it

[16:17] <lizmat> afk for ~2 hours, and then P6W work

[16:19] <jnthn> Think I've found the problem

[16:20] <jnthn> Yeah, seems so

[16:20] <jnthn> stresstest

[16:25] <Geth> ¦ rakudo/nom: fcbd8adbe5 | (Jonathan Worthington)++ | src/Perl6/World.nqp

[16:25] <Geth> ¦ rakudo/nom: Make only one CompilerServices instance per World

[16:25] <Geth> ¦ rakudo/nom:

[16:25] <Geth> ¦ rakudo/nom: We have to clean it up at the end of compilation; failing to do so can

[16:25] <Geth> ¦ rakudo/nom: break precompilation.

[16:25] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fcbd8adbe5

[16:26] <timotimo> ohdang

[16:26] <jnthn> And now I need to go and make dinner

[16:26] <timotimo> gutes gelingen!

[16:26] <jnthn> o/

[16:37] <timotimo> not sure why the travis for dbiish still fails so violently

[16:38] <timotimo> The command "eval git fetch origin +refs/pull/103/merge: " failed. Retrying, 2 of 3.

[16:38] <timotimo> this i can understand somewhat

[16:38] <timotimo> but somehow in lots of test files it gets "too many positionals passed"

[17:14] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Only fetch BUILDALLPLAN if we need it'

[17:14] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/282291893 https://github.com/rakudo/rakudo/compare/4906a1de8ae7...f80a84617b4a

[17:44] <AlexDaniel> “oh, does bisectable run as a systemd service with read-only filesystem?”

[17:45] <AlexDaniel> both /tmp and ./sandbox should be writable

[17:45] <AlexDaniel> e: spurt ‘/tmp/foo’, 42; say slurp ‘/tmp/foo’

[17:45] <evalable6> AlexDaniel, rakudo-moar fcbd8adbe: OUTPUT: «42»

[17:45] <AlexDaniel> e: spurt ‘sandbox/blah’, 42; say slurp ‘sandbox/blah’

[17:45] <evalable6> AlexDaniel, rakudo-moar fcbd8adbe: OUTPUT: «42»

[17:45] <AlexDaniel> e: spurt ‘blah’, 42; say slurp ‘blah’

[17:45] <evalable6> AlexDaniel, rakudo-moar fcbd8adbe: OUTPUT: «(exit code 1) Failed to open file /home/bisectable/git/whateverable/blah: Read-only file system␤  in block <unit> at /tmp/Le0siP1vPA line 1␤»

[17:46] <AlexDaniel> I'm working on making it start in ./sandbox by default, just not there yet

[17:46] <AlexDaniel> “oh, but &run is restricted :}”

[17:46] <AlexDaniel> not anymore

[17:47] <AlexDaniel> m: say run(:out, ‘ls’, ‘sandbox’).out.slurp;

[17:47] <camelia> rakudo-moar fcbd8a: OUTPUT: «run is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in sub run at src/RESTRICTED.setting line 14␤  in block <unit> at <tmp> line 1␤␤»

[17:47] <AlexDaniel> e: say run(:out, ‘ls’, ‘sandbox’).out.slurp;

[17:47] <evalable6> AlexDaniel, rakudo-moar fcbd8adbe: OUTPUT: «answer␤blah␤»

[17:48] <AlexDaniel> note that if you do rm -rf or whatever, you'll probably wipe out all precomp files and some other stuff… don't do that please :)

[18:18] <Zoffix> m: await IO::Socket::Async.connect('irc.freenode.net', 6667 ).then({given .result {.print("NICK Camelia_\nUSER NotCamelia localhost irc.freenode.net :notCamelia\nJOIN #perl6-dev\nPRIVMSG #perl6-dev :No body run rm -fr!!!\n"); react {whenever .Supply {}}}})

[18:18] <Zoffix> c: await IO::Socket::Async.connect('irc.freenode.net', 6667 ).then({given .result {.print("NICK Camelia_\nUSER NotCamelia localhost irc.freenode.net :notCamelia\nJOIN #perl6-dev\nPRIVMSG #perl6-dev :No body run rm -fr!!!\n"); react {whenever .Supply {}}}})

[18:18] <committable6> Zoffix, ¦await: «Cannot find this revision (did you mean “Sofia”?)»

[18:18] <Camelia_> No body run rm -fr!!!

[18:18] <Zoffix> c: HEAD await IO::Socket::Async.connect('irc.freenode.net', 6667 ).then({given .result {.print("NICK Camelia_\nUSER NotCamelia localhost irc.freenode.net :notCamelia\nJOIN #perl6-dev\nPRIVMSG #perl6-dev :No body run rm -fr!!!\n"); react {whenever .Supply {}}}})

[18:18] <camelia> rakudo-moar fcbd8a: OUTPUT: «(timeout)»

[18:18] <committable6> Zoffix, ¦HEAD(fcbd8ad): ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[18:18] <Zoffix> c: HEAD await IO::Socket::Async.connect('irc.freenode.net', 6667 ).then({given .result {.print("NICK Camelia_\nUSER NotCamelia localhost irc.freenode.net :notCamelia\nJOIN #perl6-dev\nPRIVMSG #perl6-dev :No body run rm -fr!!!\n"); react {whenever .Supply {}}}})

[18:18] <Camelia_> No body run rm -fr!!!

[18:18] <committable6> Zoffix, ¦HEAD(fcbd8ad): ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[18:18] <Zoffix> This was a good 30 seconds of fun :)

[18:38] <jnthn> hah :)

[18:39] <bartolin> FWIW, commit 7fa707db73 fixed the build on jvm (error was 'Serialization Error: could not locate static code ref for closure' during stage jast (introduced with 9837687d93)

[18:39] <bartolin> lizmat++ :-)

[18:51] <lizmat> jnthn: re fcbd8adbe586e21c8bc  wow!

[18:51] <lizmat> jnthn: but I don't get the "we have to clean it up part" of the comment on the commit  :-(

[18:55] <jnthn> grep

[18:56] <jnthn> for $!compiler-services

[18:58] <jnthn> And the reason we have to null that thing out is because the wrapper can end up getting closed over

[18:58] <jnthn> and if it tries to serialize $*W or so things will go pretty bad

[18:59] <lizmat> $!compiler_services  :-)  ok

[19:00] <jnthn> ah, _ :)

[19:01] <jnthn> But yeah, we only kept track of one of them

[19:01] <jnthn> I wonder if the $/ thing went rotten 'cus we needed to null that field out also

[19:02] <lizmat> will try that tomorrow

[19:02] <lizmat> meanwhile, I was wondering, now that we know that Mu.BUILDALL will need to stay around in its current form

[19:03] <lizmat> would it make sense to create a generic 'method BUILDALL(@,%) {Any:D: self }'

[19:03] <lizmat> that would be used by all classes with an empty BUILDALLPLAN ?

[19:03] <jnthn> Why aren't we generating an empty BUILDALL for an empty BUILDPLAN?

[19:04] <jnthn> Oh, that's what you're suggesting, except caching it?

[19:04] <lizmat> well, seemed kinda wasteful to be generating methods that are identical otherwise

[19:04] <jnthn> But that'd get a tad odd in that the invocant type in the sig will be inconsistent

[19:04] <lizmat> well, Any:D: works :-)

[19:04] <jnthn> If anyone went introspecting

[19:04] <jnthn> It does

[19:05] <jnthn> Maybe we'll get awy[Da with it

[19:05] <jnthn> wat

[19:05] <jnthn> *away

[19:05] <lizmat> apart from getting away with it, do you think it makes sense ?

[19:05] <jnthn> But yeah, do it one way or the other...it'll be a heck of a lot cheaper than actually looking up the build plan and seeing it's empty

[19:05] <lizmat> right

[19:05] <timotimo> except not ":D", right?

[19:06] <lizmat> no, :D

[19:06] <jnthn> I've largely learned not to cheat on "users will never notice" because they always darn well do :P

[19:06] <lizmat> well, there's the thing: all these methods would share the same body (I think)

[19:06] <timotimo> i don't get it :)

[19:06] <jnthn> That is true

[19:06] <lizmat> or are things getting copied when you do add_method ?

[19:07] <jnthn> No, that doesn't copy

[19:07] <jnthn> timotimo: BUILDALL is for initializing an instance that was already created by .CREATE

[19:07] <jnthn> So it'd never be called on a type object

[19:08] <timotimo> oooh

[19:08] <timotimo> i see it now, oops. bless is the one that calls nqp::create

[19:11] <jnthn> walk, then code review :) &

[20:03] <AlexDaniel> lizmat: fwiw https://irclog.perlgeek.de/moarvm/2017-09-29#i_15236012 https://irclog.perlgeek.de/moarvm/2017-09-29#i_15236999 https://irclog.perlgeek.de/moarvm/2017-09-29#i_15237114 – maybe that's old, but for occasional readers this stuff is awesome

[20:08] <lizmat> AlexDaniel: did I miss timotimo's explanation on what that svg depicts ?

[20:08] <AlexDaniel> lizmat: I have not seen any explanation :(

[20:08] <AlexDaniel> timotimo: ping? :)

[20:09] <timotimo> whan svg did i show?

[20:09] <AlexDaniel> http://t.h8.lv/nqp_loop_graph.svg

[20:09] <timotimo> ah, that's a piece of spesh log output turned into a graph using graphviz

[20:10] <timotimo> it still has some issues

[20:13] <lizmat> buggable: speed 50

[20:13] <buggable> lizmat, ▇▇▆▆▅▅▆▆▅▆▅▅▆▅▅█▅▆▄▅▅▅▅▅▇▇▅▇▅▃█↑↑█▃▂▁▁▂▁▂▁▂▂▄▇▃▄▂▃ dates: 2017-09-16–2017-10-02; range: 3.183s–4.010s; speed: 7% faster

[20:13] <lizmat> buggable: speed 5

[20:13] <buggable> lizmat, ▇▁▃▁▂ dates: 2017-10-01–2017-10-02; range: 3.258s–3.527s; speed: 7% faster

[20:13] <lizmat> buggable: speed 7

[20:14] <buggable> lizmat, ▁▄▇▂▃▂▂ dates: 2017-10-01–2017-10-02; range: 3.234s–3.527s; speed: 2% slower

[21:28] <lizmat> Zoffix: could you elaborate about the work you've done on supporting multiple roast versions ?

[21:34] <gfldex> lizmat: I think Zoffix called it a night already.

[21:35] <lizmat> could you elaborate ?

[21:35] <Zoffix> Yeah, I can

[21:36] <lizmat> Whee!  :-)

[21:38] <Zoffix> lizmat: "called it a night" <-- I said I was gone, but I still checked the chat to get my Weekly fix :)   "roast versions" <-- Rakudo has a file with a list of roast files it runs. We used to use a single file for all language versions, which sucked because: (a) new files get added to roast master and roast runner complains they're missing when running older language versions; (b) files in master get

[21:38] <Zoffix> restructured, but deleted files still have to live as dummy files, so they same files in another language version get run. So now we made a separate list of files rakudo runs for each language version that solves those problems. Roast runner just looks at VERSION file in roast to figure out which version of the file list to load (the file list is now in t/spectest.data and t/spectest.data.6.c; with future

[21:38] <Zoffix> release to add t/spectest.data.6.d file)

[21:39] <lizmat> Zoffix++

[21:39] <Zoffix> \o/

[22:30] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/10/02/2017-40-unicode-granted/

[22:33] <lizmat> and with that I wish #perl6-dev a good night!

[23:25] <jnthn> lizmat++ # weekly

[23:26] <timotimo> how was your food, jnthn? :)

[23:27] <AlexDaniel> releasable6: next

[23:27] <releasable6> AlexDaniel, Next release in 18 days and ≈19 hours. No blockers. Changelog for this release was not started yet

[23:27] <releasable6> AlexDaniel, Details: https://gist.github.com/b97ee2a58f311a5d21c80872e242833d

[23:32] <jnthn> timotimo: Healthy and fairly spicy :)

[23:32] <jnthn> (Aloo gobi with raita :))

[23:35] <timotimo> i knew one of these words

[23:35] <jnthn> Potato and cauliflower curry, served with yogurt/mint/cucumber

[23:36] <timotimo> i just read up on it :)

[23:36] <timotimo> sounds good, except i'm not trained to enjoy spicy food

[23:42] <AlexDaniel> timotimo: it's the training process that is enjoyable!

[23:52] <timotimo> just uploaded json fast to cpan

[23:54] * Zoffix hopes buggable will work and announce it

[23:55] <timotimo> me, too

[23:56] <timotimo> the ecosystem and what zef internally uses are the only places perl6 dists will appear?

[23:56] <buggable> New CPAN upload: JSON-Fast-0.9.5.tar.gz by TIMOTIMO https://www.cpan.org/authors/id/T/TI/TIMOTIMO/Perl6/JSON-Fast-0.9.5.tar.gz

[23:57] <timotimo> neat

[23:57] <timotimo> in other news, json::fast is only 4x as fast as json::tiny

[23:57] <timotimo> not sure if i made json::fast slower or if json::tiny just naturally caught up, for example from the cursor-match-unification?

[23:58] <jnthn> The race is on :)

[23:58] * jnthn wanders off to bed o/

[23:59] <Zoffix> \o/
