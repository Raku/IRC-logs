[00:17] <travis-ci> Rakudo build passed. Zoffix Znet 'Include default %SUB-MAIN-OPTS arguments in it; AlexDaniel++'

[00:17] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/248577308 https://github.com/rakudo/rakudo/compare/40b0169d0846...e2517f802b64

[00:17] <AlexDaniel> huh

[00:17] <AlexDaniel> ah

[00:22] <HelpBot[perl6]> https://travis-ci.org/rakudo/rakudo/builds/248567744

[00:22] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[00:23] <HelpBot[perl6]> https://travis-ci.org/rakudo/rakudo/builds/248567744

[00:23] <buggable> [travis build above] ✓ All failures are due to timeout (0), missing build log (0), GitHub connectivity (3), or failed make test (0).

[00:38] <timotimo> that wasn't a github connectivity issuethough?

[00:38] <timotimo> it was the ppa:ubuntu-toolchain-r thing that blew up somehow? or whatever contains that neo4j.org repo thingie?

[00:39] * timotimo bedtime

[00:45] <AlexDaniel> .tell dogbert2 I've updated everything. https://github.com/perl6/doc/issues/561

[00:45] <yoleaux> AlexDaniel: I'll pass your message to dogbert2.

[00:50] <AlexDaniel> LHF right here: https://github.com/perl6/doc/blob/a2d9188655f47b370cf0a60bfba0bff660f16d25/doc/Language/performance.pod6#L153

[01:04] <HelpBot[perl6]> I didn't feel like adding yet another category. It's up there in the "travis glitches" category

[06:32] <[Tux]> This is Rakudo version 2017.06-113-ge2517f802 built on MoarVM version 2017.06-30-g389e9732

[06:32] <[Tux]> csv-ip5xs        2.716

[06:32] <[Tux]> test            12.541

[06:32] <[Tux]> test-t           4.196 - 4.326

[06:32] <[Tux]> csv-parser      12.806

[08:12] <lizmat> Files=1208, Tests=63472, 214 wallclock secs (13.02 usr  4.71 sys + 1308.09 cusr 130.26 csys = 1456.08 CPU)

[09:01] <Geth> ¦ nqp/master: 10 commits pushed by pmurias++

[09:01] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/c5fc79f5e0...1971656c28

[09:15] <travis-ci> NQP build failed. pmurias '[js] Fix beautification and running of node

[09:15] <travis-ci> https://travis-ci.org/perl6/nqp/builds/248700516 https://github.com/perl6/nqp/compare/c5fc79f5e0c3...1971656c2847

[09:23] * pmurias is disabling test for the JVM backend

[09:38] <pmurias> no super elegant way to do that, I guess I'll just implement those ops on the JVM backend

[09:39] <lizmat> pmurias++

[10:32] <Geth> ¦ rakudo/nom: da6c6584f7 | (Elizabeth Mattijsen)++ | src/core/Main.pm

[10:32] <Geth> ¦ rakudo/nom: Don't force MAIN-SUB-OPTS overhead on every startup

[10:32] <Geth> ¦ rakudo/nom:

[10:32] <Geth> ¦ rakudo/nom: If a developer of a script wants to use MAIN-SUB-OPTS, she will have

[10:32] <Geth> ¦ rakudo/nom: to create the lexicaly dynamic herself.  This is in the nature of

[10:32] <Geth> ¦ rakudo/nom: dynamic variables: there is no need for the core setting have them

[10:32] <Geth> ¦ rakudo/nom: created automagically.  This also sends a bad cognitive signal about

[10:32] <Geth> ¦ rakudo/nom: dynamic variables.

[10:32] <Geth> ¦ rakudo/nom:

[10:32] <Geth> ¦ rakudo/nom: This patch also for the time being adds temporary support for the old

[10:32] <Geth> ¦ rakudo/nom: MAIN-ALLOW-NAMED-ANYWHERE, so that users of a newer rakudo with an older

[10:33] <Geth> ¦ rakudo/nom: panda, will still work.

[10:33] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/da6c6584f7

[10:33] <Geth> ¦ roast: 417f8e079b | (Elizabeth Mattijsen)++ | S06-other/main.t

[10:33] <Geth> ¦ roast: Adapt SUB-MAIN-OPTS tests

[10:33] <Geth> ¦ roast:

[10:33] <Geth> ¦ roast: The lexical dynamic should be created by the user.

[10:33] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/417f8e079b

[10:34] <lizmat> hope I didn't upset Zoffix with this change

[10:39] <pmurias> jnthn: should nqp::strcodes on the JVM treat NORMALIZE_NONE as NFC? the op docs say so but MoarVM just doesn't accept it

[10:41] <jnthn> NONE would mean "don't do anything"

[10:41] <jnthn> (Just get the original codepoints)

[10:49] <pmurias> jnthn: we use NFG for strings on MoarVM and I assume we don't want to expose that right?

[10:49] <jnthn> Expose what, exactly?

[10:50] <jnthn> We never expose negative codepoints, no

[10:50] <jnthn> At least, certainly not at Perl 6 level, but we don't do it really at VM level either

[10:51] <Geth> ¦ roast: 408be80ff8 | (Zoffix Znet)++ (committed using GitHub Web editor) | S06-other/main.t

[10:51] <Geth> ¦ roast: Remove no-longer needed test

[10:51] <Geth> ¦ roast:

[10:51] <Geth> ¦ roast: The test tested the %*SUB-MAIN-OPTS key exists and it no longer does

[10:51] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/408be80ff8

[10:54] <pmurias> nqp-m: nqp::strtocodes('str', nqp::null(), nqp::const::NORMALIZE_NONE)

[10:54] <camelia> nqp-moarvm: OUTPUT: «Invalid normalization form 0␤   at <tmp>:1  (<ephemeral file>:<mainline>)␤ from gen/moar/stage2/NQPHLL.nqp:1589  (/home/camelia/rakudo-m-inst-2/share/nqp/lib/NQPHLL.moarvm:eval)␤ from gen/moar/stage2/NQPHLL.nqp:1806  (/home/camelia/rakudo-m-inst-2/share/nq…»

[10:54] <HelpBot[perl6]> No, not upset

[10:55] <jnthn> pmurias: Ah, it doesn't make sense in that context to use NORMALIZE_NONE, it was intended for when we have a bytestocodes op

[10:57] * lizmat works on the doc

[10:59] <pmurias> jnthn: do we want nqp::normalizecodes to accept NONE?

[11:00] <jnthn> Um

[11:00] <jnthn> I guess it could return identity :)

[11:00] <jnthn> That's the one that takes a codepoint array and returns a codepoint array, yes?

[11:01] <jnthn> I mean, it's a pointless thing to do, so we don't do it :)

[11:01] <jnthn> (From Perl 6 level)

[11:05] <lizmat> hmmm looks like we lost geth

[11:05] * lizmat just committed https://github.com/perl6/roast/commit/a72b1528684e6685f9

[11:06] <lizmat> eh, https://github.com/perl6/doc/commit/a72b1528684e6685f98d8

[11:11] <travis-ci> NQP build passed. pmurias 'Update docs so that NORMALIZE_NONE to nqp::strtocodes is not allowed'

[11:11] <travis-ci> https://travis-ci.org/perl6/nqp/builds/248734926 https://github.com/perl6/nqp/compare/1971656c2847...cac138c3b66a

[11:13] <lizmat> afk for a bit&

[11:52] * HelpBot[perl6] goes off the grid until Tuesday

[11:54] <[Coke]> ~~

[12:01] <timotimo> .o( afk for a bitwise and )

[12:15] <pmurias> does data derived from the UNIDATA (machine readable unicode info) need to be particulary licencsed?

[12:22] <timotimo> pre-encoding the string to a buf and writing instead of printing that makes it 2x faster

[12:24] <timotimo> and yeah, this is most probably down to buffering, as perl5 writes 8k at once, and p6 writes 100 bytes at a time

[12:28] <jnthn> Pass :buffer to open :)

[12:28] <timotimo> oh, we already have that?

[12:28] <timotimo> fantastic!

[12:28] * timotimo tries

[12:28] <jnthn> Yeah, not the default yet

[12:29] <timotimo> that's only a bit faster

[12:30] <timotimo> 26% time in encode-chars, 22.7% in print, 20.8% in <unit>, 14.9% time in <anon> (which is likely the inner loop that calls "print"), 6.5% in write-internal, 4.88% in pull-one, 3.9% in sink

[12:32] <timotimo> pre-encoding the str in there makes a lot of difference, obviously

[12:32] <timotimo> haha, is John Whitington jnthn's evil twin from another timeline? :D

[12:38] <timotimo> there's like 3/4 overhead from the for loop alone or something like that

[12:47] <timotimo> interestingly, the profler shows a call to sink from write (IO/Handle.pm:542), but i don't see the typical sink bbs in the speshlog for that

[12:48] <timotimo> i might have an old speshlog, actually

[12:48] <timotimo> yeah, no. i don't see a sink there

[14:17] <Geth> ¦ rakudo/nom: 2d07e8a70c | (Elizabeth Mattijsen)++ | src/core/Main.pm

[14:17] <Geth> ¦ rakudo/nom: No need to check MAIN-ALLOW-NAMED-ANYWHERE

[14:17] <Geth> ¦ rakudo/nom:

[14:17] <Geth> ¦ rakudo/nom: if we have an explicit False in SUB-MAIN-OPTS<named-anywhere>

[14:17] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2d07e8a70c

[14:41] <Geth> ¦ rakudo/nom: 385092270a | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[14:41] <Geth> ¦ rakudo/nom: Make Iterable (+) Iterable about 20% faster

[14:41] <Geth> ¦ rakudo/nom:

[14:41] <Geth> ¦ rakudo/nom: - based on 1000 elem @a with itself

[14:41] <Geth> ¦ rakudo/nom: - improvement mostly based on using about 1/3 of memory before

[14:41] <Geth> ¦ rakudo/nom: - as only one final hash is created without 2 additional temporary ones

[14:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/385092270a

[14:46] <Geth> ¦ roast: 51fe30b56a | (Elizabeth Mattijsen)++ | S03-operators/addition.t

[14:46] <Geth> ¦ roast: Add some more (+) tests

[14:46] <Geth> ¦ roast:

[14:46] <Geth> ¦ roast: - more than one pair with same key in Iterable

[14:46] <Geth> ¦ roast: - test for object hash vs normal hash

[14:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/51fe30b56a

[14:49] <raschipi> lizmat++

[15:08] <lizmat> afk again&

[17:14] <cog_> sz=-p=-[

[21:19] <Geth> ¦ roast: 385a2c3e61 | (Elizabeth Mattijsen)++ | S03-operators/addition.t

[21:19] <Geth> ¦ roast: Add tests for infix:<(+)>() and infix:<(+)>(foo)

[21:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/385a2c3e61

[21:21] <Geth> ¦ rakudo/nom: 779e6bb033 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[21:21] <Geth> ¦ rakudo/nom: Remove unnecessary tests for lack of parameters

[21:21] <Geth> ¦ rakudo/nom:

[21:21] <Geth> ¦ rakudo/nom: These are all handled by specific candidates.

[21:21] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/779e6bb033

[21:30] <Geth> ¦ roast: a2c4696753 | (Elizabeth Mattijsen)++ | S03-operators/difference.t

[21:30] <Geth> ¦ roast: Add tests for infix:<(-)>() and infix:<(-)>(foo)

[21:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a2c4696753

[21:38] <lizmat> m: dd ^10 (&) ^Inf   # this feels wrong  :-)

[21:38] <camelia> rakudo-moar 779e6b: OUTPUT: «set()␤»

[21:46] <Geth> ¦ roast: 3ab6c0b353 | (Elizabeth Mattijsen)++ | S03-operators/intersection.t

[21:46] <Geth> ¦ roast: Add tests for infix:<(&)>() and infix:<(&)>(foo)

[21:46] <Geth> ¦ roast:

[21:46] <Geth> ¦ roast: Also add tests for handling lazy lists, which for the moment still

[21:46] <Geth> ¦ roast: fail  :-(

[21:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3ab6c0b353

[22:21] <Geth> ¦ roast: cfbefc8b36 | (Elizabeth Mattijsen)++ | S03-operators/intersection.t

[22:21] <Geth> ¦ roast: Activate now passing tests

[22:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cfbefc8b36

[22:28] <Geth> ¦ roast: 7f75680c83 | (Elizabeth Mattijsen)++ | 2 files

[22:28] <Geth> ¦ roast: Remove now superfluous (+) tests

[22:28] <Geth> ¦ roast:

[22:28] <Geth> ¦ roast: Now done in S03-operators/addition.t

[22:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7f75680c83

[22:28] <Geth> ¦ rakudo/nom: cb06ebacaa | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[22:28] <Geth> ¦ rakudo/nom: Temporary fix for (&)'s handling of lazy lists

[22:28] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cb06ebacaa

[22:54] <Geth> ¦ rakudo/nom: 04746490c9 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[22:54] <Geth> ¦ rakudo/nom: Make sure the (elem) family handles lazy lists

[22:54] <Geth> ¦ rakudo/nom:

[22:54] <Geth> ¦ rakudo/nom: Before it would hang if it couldn't find the elem, such as:

[22:54] <Geth> ¦ rakudo/nom:

[22:54] <Geth> ¦ rakudo/nom:   "a" (elem) ^Inf

[22:54] <Geth> ¦ rakudo/nom:

[22:54] <Geth> ¦ rakudo/nom: It now fails with X::Cannot::Lazy

[22:54] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/04746490c9

[23:00] <lizmat> and this concludes my hacking for today

[23:00] <lizmat> good night!

[23:00] <timotimo> nite liz

[23:00] <jnthn> 'night, lizmat++
