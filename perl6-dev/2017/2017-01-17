[00:16] <MasterDuke> samcv: did you see this? https://github.com/MoarVM/MoarVM/pull/501#pullrequestreview-16889758

[00:17] <samcv> MasterDuke, uhm not all the types have that pointer type?

[00:17] <samcv> but if you make that change does it supress all warnings?

[00:18] <samcv> there's MVMUnicodeGraphemeNameRegistry too

[00:18] <MasterDuke> it surpresses the one warning during a moarvm compile

[00:18] <samcv> yeah

[00:18] <samcv> I wouldn't make this change. i mean

[00:18] <samcv> better to fix the actual source than just suppress the warning

[00:19] <samcv> or maybe have one MVMUnicodeXXX and cast both the other ones to that

[00:19] <samcv> than to cast to a type which it is not

[00:21] <samcv> or maybe there's some way to do it to have the macro HASH_ADD_KEYPTR wants to be something that accepts both of them, i'm not sure

[00:21] <samcv> let me look for a sec

[00:21] <MasterDuke> well, UnicodeNameRegistry and UnicodeGraphemeNameRegistry are pretty much identical

[00:22] <samcv> they aren't the same though

[00:22] <samcv> don't they have different types in the containing items?

[00:22] <samcv> yeah they do

[00:22] <MasterDuke> yeah, but i think the one is just a typedef of the other

[00:22] <samcv> no they are not

[00:22] <MasterDuke> (the differing ones)

[00:23] <samcv> see unicode.h

[00:23] <samcv> here https://github.com/MoarVM/MoarVM/blob/master/src/strings/unicode.h#L14

[00:23] <samcv> one holds a codepoint value and one holds an index of another struct

[00:24] <samcv> so I really don't like the idea of making both the same type

[00:24] <samcv> even though the size of the values inside the struct is the same

[00:24] <MasterDuke> typedef MVMint32 MVMGrapheme32;

[00:25] <MasterDuke> src/6model/reprs/MVMString.h:19:

[00:27] <MasterDuke> i have no strong feelings about what the correct solution is, i just made a (what seemed reasonable at the time without knowing anything about the code) change that silenced the warning

[00:27] <samcv> your other changes seem fine. but I don't like changing that one unless we have a better solution

[00:27] <MasterDuke> so feel free to do or suggest something else/better

[00:28] <MasterDuke> won't hurt my feelings

[00:29] <samcv> we could always use a union tbh

[00:29] <samcv> i think. i am thinking

[00:30] <samcv> or maybe this is the opposite of what i want. i'll get back to when I figure out what will be best :)

[00:32] <MasterDuke> sure

[00:33] <samcv> yeah we can use a union

[00:34] <samcv> but that may require more changes else where. so not a good change to just make quickly

[00:35] <samcv> i'm gonna look at the macro

[00:36] <MasterDuke> do you mind replaying in the comment thread?

[00:36] <MasterDuke> *replying

[00:36] <samcv> ye

[00:36] <MasterDuke> (no need to replay the whole conversation)

[00:36] <MasterDuke> thanks

[00:39] <samcv> MasterDuke, can you try casting as (keyptr)

[00:40] <samcv> see if that works

[00:41] <samcv> er wait that's wrong. ah

[05:44] <Geth> roast: 5d837a7a26 | (Jonathan Scott Duff)++ | S03-operators/range-basic.t

[05:44] <Geth> roast: Add tests for RT#130554

[05:44] <Geth> roast: review: https://github.com/perl6/roast/commit/5d837a7a26

[05:44] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130554

[07:09] <[Tux]> This is Rakudo version 2016.12-337-g7f970357b built on MoarVM version 2016.12-115-ged2df9ac

[07:09] <[Tux]> csv-ip5xs        2.889

[07:09] <[Tux]> test            12.366

[07:09] <[Tux]> test-t           5.024

[07:09] <[Tux]> csv-parser      13.224

[08:25] <lizmat> Files=1163, Tests=56135, 186 wallclock secs (11.01 usr  4.49 sys + 1102.06 cusr 118.87 csys = 1236.43 CPU)

[08:26] <lizmat> samcv: the reason I repeated the string in the text, is that some browser may actually not display the emoji correctly

[08:26] <samcv> kk

[08:29] <samcv> though it seemed redundant. "\c[charname]" (charname)

[08:29] <samcv> that was all

[08:35] <lizmat> yeah, I know, but having the emoji only would have been lost on many

[08:35] <lizmat> and just the text after it would look strange to me without the parens

[09:14] <lizmat> hmmm... is there a reason why the @cycle on a .rotor() cannot be lazy (apart from implementation complexity?)

[09:30] <|Tux|> I had some git mayhem, so I am unsure if this last timing was caused by that. Just to make sure, here is a new one ‚Ä¶

[09:30] <|Tux|> This is Rakudo version 2016.12-351-g0cd921e35 built on MoarVM version 2016.12-115-ged2df9ac

[09:30] <|Tux|> csv-ip5xs        2.803

[09:30] <|Tux|> test            12.007

[09:30] <|Tux|> test-t           4.878

[09:30] <|Tux|> csv-parser      13.332

[09:31] <|Tux|> 337 ‚Üí 351

[09:31] <lizmat> 337 ‚Üí 351  ?

[09:31] <lizmat> ah, git commits

[09:32] <lizmat> a new low!

[09:32] <lizmat> :-)

[09:34] <DrForr> I'd better update :)

[09:35] * lizmat should take more tea: the cycle on a rotor *can* be lazy, and *is* made lazy internally anyway  :-)

[09:41] <lizmat> afk for a few hours&

[11:57] <brokenchicken> lizmat: there's this bug tho: https://rt.perl.org/Ticket/Display.html?id=129175#ticket-history

[11:57] <lizmat> ok, will take care of that

[11:57] <lizmat> :-)

[11:58] <lizmat> well, of the rotor case, not necessarily the slurpy arg case

[11:58] <lizmat> hmmm...  or maybe I must :-(

[12:01] <lizmat> m: sub a(*@a) { say @a.iterator.is-lazy }; a(1...*)   # underlying issue

[12:01] <camelia> rakudo-moar 0cd921: OUTPUT¬´False‚ê§¬ª

[12:01] <lizmat> that should have said True

[12:03] <jnthn> m: sub a(+@a) { say @a.iterator.is-lazy }; a(1...*) # curious

[12:03] <camelia> rakudo-moar 0cd921: OUTPUT¬´True‚ê§¬ª

[12:04] <ilmari> what's the difference betwen *@a and +@a?

[12:05] <ilmari> ah, https://docs.perl6.org/type/Signature#Single_Argument_Rule_Slurpy

[12:07] <ilmari> shouldn't that be s/(engage)d/$0s/?

[12:09] <lizmat> ilmari: there's https://github.com/perl6/doc and PR's  :-)

[12:25] <lizmat> http://stackoverflow.com/questions/41696570/what-is-the-difference-in-contexts-in-nested-and-non-nested-maps-in-perl-6  # why do we need the inner eager ???

[12:25] <lizmat> that feels like a bug to me ?

[12:26] <timotimo> is that just "last statement not being sunk correctly"?

[12:26] <timotimo> i.e. if we put a "say 'finished'" at the end, will it work?

[12:27] <lizmat> trying

[12:28] <lizmat> yup

[12:28] <lizmat> that's it

[12:28] <timotimo> i'm glad my intuition was right :)

[12:29] <lizmat> yeah, adding another statement will make the inner map sink

[12:39] <lizmat> http://stackoverflow.com/questions/41696570/what-is-the-difference-in-contexts-in-nested-and-non-nested-maps-in-perl-6/   # answered

[12:40] <lizmat> timotimo: basically, all is as it should be, it's just that a Seq of .Seqs getting sunk, doesn't iterate over the inner .Seqs

[12:41] <lizmat> .oO( I'm so glad I don't have to read that aloud :-)

[12:41] <timotimo> OK!

[12:41] <lizmat> and I don't think it should

[12:41] * jnthn looks but suspects not a bug

[12:42] <jnthn> Yeah, no bug

[12:42] <lizmat> yeah, the outer Seq is sunk, and that doesn't run the inners Seqs

[12:42] <jnthn> But if you're just using map for the side-effects, why not write it with `for`?

[12:42] <timotimo> lizmat: just pronounce it like "seek"

[12:42] <jnthn> The point of map is you're mapping something to something else :P

[12:42] <lizmat> well, there's that  :-)

[12:42] <timotimo> because after all it's short for Sequence

[12:43] <jnthn> .oO( I just mapped Seqs, and it felt so good... )

[12:44] <lizmat> well, I'm not sure I like being chased by men in turbans  :-)

[12:44] <lizmat> with their kirpans

[12:45] <lizmat> .oO( http://stackoverflow.com/questions/41696570/what-is-the-difference-in-contexts-in-nested-and-non-nested-maps-in-perl-6/41697345#41697345 )

[12:45] <lizmat> oops, wrong paste

[12:45] <lizmat> .oO( https://en.wikipedia.org/wiki/Sikh )

[12:46] <timotimo> jnthn: an array let me put my items inside it?

[12:46] <jnthn> :)

[13:16] <brokenchicken> On the topic of slurpies there's also this ticket: https://rt.perl.org/Ticket/Display.html?id=130441#ticket-history

[13:16] <brokenchicken> buggable: tag regression

[13:16] <buggable> brokenchicken, There are 22 tickets tagged with REGRESSION; See http://perl6.fail/t/REGRESSION for details

[13:17] <brokenchicken> NeuralAnomaly: status

[13:17] <NeuralAnomaly> brokenchicken, [‚úò] Next release will be in 3 days and 16 hours. Since last release, there are 89 new still-open tickets (89 unreviewed and 0 blockers) and 329 unreviewed commits. See http://perl6.fail/release/stats for details

[13:29] <samcv> the newest atom beta that came out a week ago is so much faster brokenchicken

[13:30] <lizmat> brokenchicken: RT #130566 is fixed

[13:30] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130566

[13:30] <samcv> though your computer is probably faster than mine. I can actually open big files and it won't go all funny, and opening any file is like 2x faster

[13:30] <lizmat> brokenchicken: also fixed: RT #130513

[13:30] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130513

[13:31] <lizmat> and RT #130510

[13:31] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130510

[13:32] <brokenchicken> cool

[13:32] <timotimo> that sounds great! (and much needed)

[13:32] <samcv> what I said? or?

[13:32] <samcv> the slurpy

[13:33] <timotimo> no, atom performance

[13:33] <samcv> ah yeah

[13:37] <jnthn> Yeah, I moved to Vim largely because I got tired of <open large file> <hang>

[13:37] <jnthn> Doubt I'll move back, alas.

[13:38] <jnthn> Really liking how decluttered things are in Vim. Me. The code I'm working on. That's all.

[13:39] <timotimo> vim has *big* trouble when a file contains a line like # -----------------------------------

[13:39] <timotimo> it seems like

[13:39] <timotimo> haven't golfed it yet

[13:39] <timotimo> but at least you can ctrl-c and it'll stop the syntax highlighter and you can just scroll away

[13:40] <brokenchicken> .ask geekosaur you know a lot about this topic. Mind looking at https://rt.perl.org/Ticket/Display.html?id=130512#ticket-history ? Is that even a bug?

[13:40] <yoleaux2> brokenchicken: I'll pass your message to geekosaur.

[13:42] <jnthn> brokenchicken: I looked at that and thought "is it really reasonable to expect Perl 6 to do that" too, tbh. But yeah, geekosaur++ will likely know better on it :)

[13:43] <timotimo> ah, yeah, pty support would be good indeed

[13:47] <nine> The pty command sounds useful for that. Maybe one should just push that in between Perl 6 and the program it runs?

[13:47] <yoleaux2> 6 Jan 2017 17:20Z <notviki> nine: is this meant to work? https://gist.github.com/zoffixznet/b6cb79cd6729226a455f35ad08deb68d Seems to only use the sub from first loaded version and keeps using it that version even if I reverse the loading order, unless I also nuke the .precomp

[13:47] <yoleaux2> 6 Jan 2017 17:26Z <notviki> nine: here are the contents of the files in that tree: https://gist.github.com/zoffixznet/ccdd17f79272af98ad863ac06be8afbe

[13:47] <yoleaux2> 6 Jan 2017 17:30Z <notviki> nine: err, `cat v2/Foo.pm6` has { say "two"; } instead of { say "one" } (and yeah, I then changed it to say "ones" and the code kept saying "one" until I nuked precomp

[13:47] <yoleaux2> 9 Jan 2017 04:11Z <japhb> nine: Which phasers are expected to happen *during* precompilation, which ones are expected to happen at need time, and which ones during import time?

[13:56] <nine> .tell notviki the FileSystem repository is meant for development mostly and therefore ignores all version, auth and api requirements and just matches the name of the module.

[13:56] <yoleaux2> nine: I'll pass your message to notviki.

[13:57] <lizmat> nine: I guess you want to leave that for brokenchicken  :-)

[13:58] <Geth> roast: ronaldxs++ created pull request #223: Test for RT #130562

[13:58] <Geth> roast: review: https://github.com/perl6/roast/pull/223

[13:58] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130562

[14:02] <Geth> roast: 89c51acfb9 | (Ronald Schmidt)++ | S05-metasyntax/longest-alternative.t

[14:02] <Geth> roast: Test for RT #130562, ltm alternation only sees first sequential alternative.

[14:02] <Geth> roast: review: https://github.com/perl6/roast/commit/89c51acfb9

[14:02] <Geth> roast: e5efaec7ba | lizmat++ | S05-metasyntax/longest-alternative.t

[14:02] <Geth> roast: Merge pull request #223 from ronaldxs/mixed-ltm-sequential-alternation

[14:02] <Geth> roast:

[14:02] <Geth> roast: Test for RT #130562

[14:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130562

[14:02] <Geth> roast: review: https://github.com/perl6/roast/commit/e5efaec7ba

[14:05] <nine> brokenchicken: the FileSystem repository is meant for development mostly and therefore ignores all version, auth and api requirements and just matches the name of the module.

[14:11] * lizmat wonders whether synopsebot6 should be taught not to mention the same ticket more than once a minute

[14:17] <brokenchicken> hmm

[14:17] <brokenchicken> $ perl6 -e 'use lib </tmp/>; use B; use A'

[14:17] <brokenchicken> ===SORRY!===

[14:17] <brokenchicken> Failed to open dir: 13

[14:19] <brokenchicken> mc: use lib </home/bisectable/test>; use B; use A

[14:19] <committable6> brokenchicken, ¬¶¬´2015.12¬ª:  ¬´exit signal = SIGSEGV (11)¬ª

[14:19] <brokenchicken> bisect: use lib </home/bisectable/test>; use B; use A

[14:19] <bisectable6> brokenchicken, On both starting points (old=2015.12 new=0cd921e) the exit code is 0, exit signal is 11 (SIGSEGV) and the output is identical as well

[14:19] <bisectable6> brokenchicken, Output on both points:

[14:19] <brokenchicken> k

[14:20] <brokenchicken> That was https://rt.perl.org/Ticket/Display.html?id=130553#ticket-history  seems we had the issue for ages

[14:20] <nine> 13 is permission denied

[14:20] <brokenchicken> Ah

[14:21] * nine always loves the scavenger hunt for ERRNO constants in /usr/include

[14:22] <nine> errno.h -> bits/errno.h -> linux/errno.h -> asm/errno.h -> asm-generic/errno.h -> asm-generic/errno-base.h

[14:34] <ilmari> moreutils has errno(1)

[14:35] <Geth> rakudo/nom: 7d5bbefe7f | (Zoffix Znet)++ | docs/ChangeLog

[14:35] <Geth> rakudo/nom: Fix formatting

[14:35] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7d5bbefe7f

[14:35] <ilmari> $ errno ENOSPC

[14:35] <ilmari> ENOSPC 28 No space left on device

[14:35] <ilmari> $ errno 37

[14:35] <ilmari> ENOLCK 37 No locks available

[14:35] <ilmari> etc

[14:39] <brokenchicken> lol

[14:39] <brokenchicken> $ errno 25

[14:39] <brokenchicken> ENOTTY  25 /* Not a typewriter */

[14:41] <lizmat> afk&

[14:42] <ilmari> brokenchicken: the modern wording for that one is ¬´Inappropriate ioctl for device¬ª

[14:48] <[Coke]> samcv: any plans to add a routine to provide a runtime version of "\c[]" ?

[14:49] <samcv> hmm?

[14:49] <samcv> oh.

[14:49] <samcv> that that could be nice

[14:49] <nine> ilmari: wow, I'd have probably needed every single program contained in moreutils at one point or another. Thanks for pointing out that gem!

[14:49] <ilmari> nine: yeah, it's very handy

[14:50] <samcv> moreutils is great

[14:50] <ilmari> I use sponge the most

[14:50] <samcv> same

[14:51] <[Coke]> samcv: without a routine, you end up with: https://github.com/coke/p6-unicode-mangler/blob/master/mangle.p6#L82

[14:51] <samcv> [Coke], how does unifromname sound? though idk maybe makes it sound like it returnrs a Uni object

[14:51] <samcv> but uniname works only on strings or codes not on Uni so

[14:51] <samcv> there's that

[14:53] <[Coke]> I mean, uniname is the right name, but it got stolen for the other direction. :)

[14:53] <[Coke]> I don't like unifromname, but don't have a great alternative. from-unicode-name?

[14:56] <samcv> sure

[14:56] <samcv> idk. we need a poll

[14:57] <[Coke]> I mean, they all suck.

[14:57] <samcv> yeah

[14:57] <samcv> but one of them sucks the least

[14:57] <samcv> also i need to sleep

[14:59] <samcv> i think from-unicode-name could be ok i guess

[16:33] <brokenchicken> Seems this month will have the biggest changelog that we had for a while...

[16:42] <[Coke]> should we have a Uni.Range to show the range of codepoints?

[16:43] <timotimo> btw do we expose our supported unicode version somewhere?

[16:43] <timotimo> $*VM.uni-version or something could be used

[16:47] <[Coke]> timotimo: been asking for that since christmas, nope.

[16:47] <timotimo> oh

[16:47] <[Coke]> even better: make it settable!

[16:48] <[Coke]> what's the highest uni ord?

[16:50] <timotimo> mirror mirror on the wall ..

[16:53] <brokenchicken> m: 0x10FFFF.chr.say

[16:53] <camelia> rakudo-moar 7d5bbe: OUTPUT¬´\x{10FFFF}‚ê§¬ª

[16:53] <nine> timotimo++ # reminding me of Blind Guardian which I haven't listened to in ages.

[16:53] <ilmari> 'Supplementary Private Use Area-B' ends at U+10FFFF

[16:54] <brokenchicken> m: 0x10FFFFFFFFFF.chr.say

[16:54] <camelia> rakudo-moar 7d5bbe: OUTPUT¬´chr codepoint cannot be negative‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:54] <brokenchicken> heh

[16:56] <timotimo> nine: when i think "The Mirror", i'm reminded of Dream Theater

[17:05] <nine> timotimo: :)

[17:14] <TimToady> samcv: I'd just call it "uni", since it'll usually be obvious from the name what the input is :)

[17:14] <TimToady> s/name/argument

[17:15] <TimToady> and it's perfectly fine to name something by what it produces, generally

[17:17] <TimToady> hmm, if she's on california time, looks like she coded all night and then collapsed in a heap

[17:17] * TimToady fondly remembers being young enough to do that...

[17:17] <[Coke]> TimToady: I miss those days myself.

[17:45] <geekosaur> re https://rt.perl.org/Ticket/Display.html?id=130512#ticket-history they are expecting Proc::Async to be an Expect implementation, essentially. although it might be nice if it did provide the option to use a pty instead of a pipe (this should not be default as it's higher overhead and ptys are a limited resource compared to pipes)

[17:45] <yoleaux2> 13:40Z <brokenchicken> geekosaur: you know a lot about this topic. Mind looking at https://rt.perl.org/Ticket/Display.html?id=130512#ticket-history ? Is that even a bug?

[17:55] * b2gills .o( I wonder if Proc::Asyc.new could have a :tty flag added )

[18:05] <geekosaur> the real question is likely whether libuv provides it, since iirc Proc::Async defers to libuv for most stuff

[18:09] <timotimo> it should

[18:10] <jnthn> Seems not

[18:11] <timotimo> huh, seems like

[18:12] <jnthn> At least, the searches I did for libuv pty suggested not

[18:16] <timotimo> it mean: seems like not

[18:20] <geekosaur> actually, looks like it does but it doesn't connect the dots for you. http://docs.libuv.org/en/v1.x/tty.html

[18:22] <geekosaur> nor does it appear to have an API specifically for getting a pty; it just lets you specify one. (uv_process_t *does* support bidirectional "pipes", which only makes sense with a pty or on freebsd)

[20:25] <Geth> rakudo/nom: e041b0f827 | (Pawel Murias)++ | src/Perl6/World.nqp

[20:25] <Geth> rakudo/nom: Fix f67df8ad9d4f920bb63ea40501f3b1db9d8e661d.

[20:25] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e041b0f827

[20:26] <lizmat> pmurias: is that a revert ?

[20:27] <lizmat> Ah, it is...

[20:27] <lizmat> too bad..  :-)

[20:27] <pmurias> lizmat: it's not a revert

[20:28] <lizmat> ah, good !

[20:34] <b2gills> That looks like it is an infinite loop https://github.com/rakudo/rakudo/commit/e041b0f827#diff-934b2f4bf4300d4256d450c3372330fcR1528

[20:36] <pmurias> sorry

[20:38] <b2gills> You can't learn from mistakes that you don't make

[20:39] <lizmat> jnthn: would you mind terribly if I added a .perl method to IterationBuffer ?

[20:39] <lizmat> m: my $l := IterationBuffer.new; $i.push(42); dd $i

[20:39] <camelia> rakudo-moar 7d5bbe: OUTPUT¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Variable '$i' is not declared‚ê§at <tmp>:1‚ê§------> 3my $l := IterationBuffer.new; 7‚èè5$i.push(42); dd $i‚ê§¬ª

[20:40] <lizmat> m: my $l := IterationBuffer.new; $l.push(42); dd $l

[20:40] <camelia> rakudo-moar 7d5bbe: OUTPUT¬´IterationBuffer.new‚ê§¬ª

[20:40] <lizmat> :-(

[20:49] <pmurias> do we loose anything by adding a .perl method to IterationBuffer?

[20:50] <Geth> rakudo: usev6++ created pull request #996: [JVM] Don't use --nqp-lib=blib for evalserver

[20:50] <Geth> rakudo: review: https://github.com/rakudo/rakudo/pull/996

[20:52] <lizmat> pmurias: well, I'm not 100% sure: jnthn was pretty adamant about keeping it as simple as possible

[20:53] <lizmat> multi method perl(IterationBuffer:D:) { nqp::p6bindattrinvres(nqp::create(List),List,'$!reified',self) }

[20:53] <lizmat> should do the trick

[21:18] <jnthn> A .perl is probably only going to help people debug stuff

[21:19] <jnthn> So long as we don't change the REPR or add any validation to the methods it should be fine.

[21:19] <jnthn> I don't see any negatives to adding a .perl method :)

[21:20] <jnthn> I guess the "should do the trick" example is missing a .perl though, and that's not really correct even

[21:20] <jnthn> Because it doesn't actually create the IterationBuffe

[21:20] <jnthn> *IterationBuffer

[21:20] <jnthn> It'd create a List

[21:29] <lizmat> multi method perl(IterationBuffer:D:) { nqp::p6bindattrinvres(nqp::create(List),List,'$!reified',self).perl }

[21:29] <lizmat> it would convert the IterationBuffer to a List and then .perl it

[21:30] <lizmat> that should work, no?

[21:31] <timotimo> doesn't round-trip :)

[21:32] <Geth> rakudo/nom: 39bf63f574 | usev6++ | tools/build/create-jvm-runner.pl

[21:32] <Geth> rakudo/nom: [JVM] Don't use --nqp-lib=blib for evalserver

[21:32] <Geth> rakudo/nom:

[21:32] <Geth> rakudo/nom: ... and perl6-debug-j. That makes them work after

[21:32] <Geth> rakudo/nom: 'make install'. (They still fail to work otherwise.)

[21:32] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/39bf63f574

[21:32] <Geth> rakudo/nom: 71fd4178bf | lizmat++ | tools/build/create-jvm-runner.pl

[21:32] <Geth> rakudo/nom: Merge pull request #996 from usev6/jvm_build_blib

[21:32] <Geth> rakudo/nom:

[21:32] <Geth> rakudo/nom: [JVM] Don't use --nqp-lib=blib for evalserver

[21:32] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/71fd4178bf

[21:32] <lizmat> timotimo: don't care

[21:32] <lizmat> actually, it would, as the reified normally *is* an IterationBuffer

[21:33] <lizmat> well, in a way  :-)

[21:33] <timotimo> hm

[21:36] <jnthn> :P

[21:37] <jnthn> Maybe it should .perl to `do { given IterationBuffer.new { .push(1); .push(2); ... $_ } } :P

[21:38] <jnthn> But yeah, if we add a better .perl it should try to round-trip

[21:39] <lizmat> FLATTENABLE_LIST ?   :-)

[21:43] <lizmat> anyways, we can't build until pmurias has fixed World.nqp, right ?

[21:48] <bartolin> lizmat: btw, it looks like r-j has the same problem with nqp::null/Mu with $!next in R::It.CrossIterables and R::It.CrossIterablesMap as it had in R::It.OneValue :-/

[21:48] <bartolin> lizmat: I'll try a spectest with a similiar workaround tomorrow

[21:48] <lizmat> I feared it would and hoped the nqp::null / Mu issue could be solved at a deeper level

[21:49] <lizmat> the thing is that checking for nqp::null is about 2x as fast as checking for Mu

[21:49] <lizmat> and these are always hot paths, so I would like to keep that  :-)

[21:49] <bartolin> yeah, it definitely should -- but I don't know how to fix it

[21:50] <lizmat> ok, from now on I will add jvm specific code in the new stuff I'm writing

[21:51] * bartolin will keep searching for a fix in nqp-j

[21:52] <lizmat> maybe  jnthn  has some ideas

[21:52] <jnthn> lizmat: No, that's an internal detail that may go away some day :)

[21:52] <jnthn> (to FLATTENABLE_LIST)

[21:58] <lizmat> yeah... and it even doesn't do what I wanted it to do (on a List)

[22:11] <jdv79> so... my laptop froze 2 times in a row running make install

[22:12] <jdv79> wondering if i should try again

[22:12] <jdv79> as in kernel crash

[22:16] <mst> make *install* crashed it

[22:16] <mst> how bizarre

[22:17] <bartolin> .ask [Coke] do you have a suggestion whom I could contact about my CLA (cmp https://irclog.perlgeek.de/perl6-dev/2017-01-14#i_13920361 )

[22:17] <yoleaux2> bartolin: I'll pass your message to [Coke].

[22:17] <jdv79> actually no

[22:17] <lizmat> jdv79: maybe it ates all the memory ?

[22:17] <lizmat> jdv79: also, do you have pmurias' last commit as well ?

[22:17] <jdv79> that seems more plausible.  box was dead but if i wait a few minutes it comes back

[22:17] <jdv79> yes

[22:17] <lizmat> ah, then you need to revert that locally for now

[22:18] <jdv79> oh cool.  thanks!

[22:18] <sortiz> Commit e041b0f broke rakudo's build.

[22:19] <lizmat> pmurias: are you ok with a revert of e041b0f, or are you close to a solution ?

[22:21] <travis-ci> Rakudo build errored. Pawel Murias 'Fix f67df8ad9d4f920bb63ea40501f3b1db9d8e661d.'

[22:21] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/192811365 https://github.com/rakudo/rakudo/compare/7d5bbefe7f73...e041b0f8276b

[22:21] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[22:24] <geekosaur> even travis piling on :p

[22:25] <lizmat> m: say [3] ~~ Cool  # huh ???

[22:25] <camelia> rakudo-moar 7d5bbe: OUTPUT¬´True‚ê§¬ª

[22:25] <lizmat> m: say [Nil] ~~ Cool  # huh ???

[22:25] <camelia> rakudo-moar 7d5bbe: OUTPUT¬´True‚ê§¬ª

[22:26] <sortiz> The problem with the commit is that the new build_container_add_to_sc method (line 1527) calls itself, a typo imo

[22:26] <Geth> rakudo/nom: 5 commits pushed by lizmat++

[22:26] <Geth> rakudo/nom: 04b741a4bc | Introducing R:It.Repeat‚Ä¶

[22:26] <Geth> rakudo/nom: f04b0d2c89 | Introducing R:It.Batch‚Ä¶

[22:26] <Geth> rakudo/nom: add53bbb27 | Make $empty available in all of Rakudo::Iterator‚Ä¶

[22:26] <Geth> rakudo/nom: 2fb326e817 | Give a better error message for illegal batch values‚Ä¶

[22:26] <Geth> rakudo/nom: b93c99cb9b | Give IterationBuffer a simple .perl for debugging‚Ä¶

[22:26] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/compare/71fd4178bf...b93c99cb9b

[22:27] <Geth> rakudo/nom: c6662d14be | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[22:27] <Geth> rakudo/nom: Revert "Fix f67df8ad9d4f920bb63ea40501f3b1db9d8e661d."

[22:27] <Geth> rakudo/nom:

[22:27] <Geth> rakudo/nom: This reverts commit e041b0f8276b2abfbeefc3746c6fd26be33ef598.

[22:27] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c6662d14be

[22:29] <lizmat> hmmm... apparently List is Cool ???

[22:29] <lizmat> that is a bit of a WAT to me

[22:40] <Geth> rakudo/nom: 92e704b4e7 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[22:40] <Geth> rakudo/nom: Introducing R:It.Rotor, the new .rotor workhorse

[22:40] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/92e704b4e7

[22:44] <sortiz> lizmat, the simple change in https://gist.github.com/salortiz/ceccd0c180555003f5327d9d3b04ef89 fix pmurias commit _and_ fix DBIish also.

[22:49] * b2gills .oO( Maybe I should go and get a commit bit, because if I had one I would have done ^ over two hours ago when I pointed the problem out )

[22:51] <brokenchicken> Nil and Failure being Cool are more of a wat to me :/

[22:51] <sortiz> b2gills, sure. As pmurias acknowledged the problem I was only waiting for the fix...

[22:52] <brokenchicken> But yeah, lists are. Recall that debate on stringy methods doing weird things with Lists, like .contains() almost works.

[22:57] <Geth> rakudo/nom: d7b82149d3 | (Elizabeth Mattijsen)++ | src/core/List.pm

[22:57] <Geth> rakudo/nom: Make List.rotor between 15x and 20x faster

[22:57] <Geth> rakudo/nom:

[22:57] <Geth> rakudo/nom: By either using the new R:It.Batch or R:It.Rotor iterators

[22:57] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d7b82149d3

[22:59] * lizmat is testing sortiz' patch

[23:00] <pmurias> sorry, forgot I didn't push the commit :/

[23:03] <lizmat> *sigh*

[23:03] <b2gills> lizmat: I tested it ( or rather I copied it by hand, and tested that ) Spec test passes

[23:03] <lizmat> well, I've learned not to push unless I have done a "make spectest" the hard way

[23:07] <Geth> rakudo/nom: 703799ec24 | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[23:07] <Geth> rakudo/nom: Restore pmurias++ work, sortiz++, b2gills++

[23:07] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/703799ec24

[23:07] <lizmat> and all of a sudden,. t/spec/S12-construction/destruction.t has 2 TODOd tests passing

[23:07] <lizmat> that file hasn't basically been touched since 2009!

[23:08] <lizmat> not sure whether that is a good thing or not

[23:11] <brokenchicken> lizmat++ # dat speed gain :o

[23:12] <pmurias> do we have a 'make spectests' like thing that tests that the important modules in the ecosystem aren't broken?

[23:13] <brokenchicken> none that I know of

[23:14] <sortiz> Well, I can confirm DBIish is now fixed

[23:14] <lizmat> whee!

[23:15] <brokenchicken> pmurias: but that's a good idea. At the very least should be part of pre-release checks

[23:15] <lizmat> well, that's called "cpan-testers" more or less :-)

[23:15] <lizmat> maybe mst has some ideas about that  :-)

[23:27] <pmurias> cpan-testers is awesome
