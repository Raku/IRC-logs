[01:11] <samcv> what repo should i put perl 6 appimage builds in

[01:11] <samcv> i mean. well the script to generate appimages

[01:29] <AlexDaniel> perl6-appimage? :)

[01:46] <samcv> AlexDaniel, can you try out my appimage?

[01:46] <AlexDaniel> samcv: sure, how?

[01:46] <samcv> https://cry.nu/files/org.perl6.rakudo-x86_64.AppImage rakudo star

[01:46] <samcv> should act like perl 6 binary

[01:46] <samcv> see if you can run scripts with it

[01:49] <samcv> but i could probably hack perl6lib too

[01:49] <AlexDaniel> m: say $*CW

[01:49] <camelia> rakudo-moar 6c9f31: OUTPUT: «Dynamic variable $*CW not found␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[01:49] <AlexDaniel> m: say $*CWD

[01:49] <camelia> rakudo-moar 6c9f31: OUTPUT: «"/home/camelia".IO␤»

[01:49] <samcv> $*CWD

[01:49] <AlexDaniel> "/tmp/.mount_K4TBTf/usr".IO

[01:50] <samcv> k same here

[01:50] <AlexDaniel> ok, afk 20min

[01:58] <samcv> nice. printing out %*ENV is helpful. maybe i can use something in there to set the dir properly

[02:08] <samcv> ok i figured out what i need to do. get perl 6 to change directories after it's already started

[02:08] <AlexDaniel> hmmm

[02:08] <samcv> cause if i cd before i start it... then the paths are all wrong

[02:08] <samcv> needs to change directory after starting

[02:09] <samcv> then all problems will be solved

[02:09] <samcv> so maybe a new option for moar?

[02:10] <samcv> or i guess there could be some way to do it in rakudo

[02:10] <samcv> that actually makes more sense i guess. idk

[02:12] <AlexDaniel> samcv: dunno, maybe a module that will chdir? Sounds like a horrible idea…

[02:12] <samcv> i mean perl6 itself has its own command line options right

[02:12] <samcv> we just need to add a new one to made perl6 change directory on start

[02:13] <geekosaur> may want that anyway

[02:13] <samcv> yeah it sounds useful

[02:13] <geekosaur> recall the jdk is weird about changing directory

[02:30] <samcv> i will hack something that will hopefully fix it not running files from relative directories and i think it should mostly work

[04:30] <Geth> ¦ rakudo: dwarring++ created pull request #1059: add todo test for RT #130267

[04:30] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1059

[04:30] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130267

[05:43] <samcv> NeuralAnomaly, status

[05:43] <NeuralAnomaly> samcv, [✘] Next release will be in 4 days and 22 hours. Since last release, there are 23 new still-open tickets (13 unreviewed and 0 blockers) and 214 unreviewed commits. See http://perl6.fail/release/stats for details

[06:33] <[Tux]> This is Rakudo version 2017.03-211-g6c9f31bb0 built on MoarVM version 2017.03-115-ge8231a30

[06:33] <[Tux]> csv-ip5xs        3.249

[06:33] <[Tux]> test            12.901

[06:33] <[Tux]> test-t           4.923 - 5.388

[06:33] <[Tux]> csv-parser      12.726

[08:56] <lizmat> Files=1188, Tests=56576, 200 wallclock secs (12.03 usr  4.77 sys + 1187.78 cusr 113.43 csys = 1318.01 CPU)

[09:00] <Geth> ¦ rakudo/nom: 5cdea61b94 | (David Warring)++ | t/04-nativecall/05-arrays.t

[09:00] <Geth> ¦ rakudo/nom: add todo test for RT #130267

[09:00] <Geth> ¦ rakudo/nom:

[09:00] <Geth> ¦ rakudo/nom: my CArray[uint8] $a .= new(200 xx 16);

[09:00] <Geth> ¦ rakudo/nom: say $a[0];    # expected output: 200, actual output: -56

[09:00] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130267

[09:00] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5cdea61b94

[09:00] <Geth> ¦ rakudo/nom: 5b29d2216d | lizmat++ | t/04-nativecall/05-arrays.t

[09:00] <Geth> ¦ rakudo/nom: Merge pull request #1059 from dwarring/carray-test

[09:00] <Geth> ¦ rakudo/nom:

[09:00] <Geth> ¦ rakudo/nom: add todo test for RT #130267

[09:00] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130267

[09:00] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5b29d2216d

[10:36] <Geth> ¦ rakudo/nom: a8f1727650 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[10:36] <Geth> ¦ rakudo/nom: Remove unnecessary .DEFINITE

[10:36] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a8f1727650

[10:49] <Geth> ¦ rakudo/nom: 2731087c41 | (Elizabeth Mattijsen)++ | src/core/Set.pm

[10:49] <Geth> ¦ rakudo/nom: Make Set.SetHash coercion 12x faster

[10:49] <Geth> ¦ rakudo/nom:

[10:49] <Geth> ¦ rakudo/nom: - for a 100 element Set

[10:49] <Geth> ¦ rakudo/nom: - somehow was missed in the other QuantHash coercion improvements

[10:49] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2731087c41

[10:50] <samcv> so when are we releasing star? in a week?

[10:50] <timotimo> i heard we'll have one this time

[10:50] <samcv> nice

[10:52] <samcv> also what's with the files in roast that are .moarvm it precompiles or something? and not .t

[10:52] <samcv> cause my script can't handle those

[10:53] <geekosaur> they should be .t.moarvm and that indicates that roast for rakudo-moar should run those instead of the standard one, usually because most of the file would need to be fudged

[10:53] <moritz> samcv: those are the result of fudging (those #?rakudo skip "explanation" thingies)

[10:54] <samcv> hm

[10:54] <geekosaur> ah, thought those were inputs not outputs

[10:54] <geekosaur> anyway t/fudgeandrun should deal with those

[10:54] <timotimo> well, they are inputs. but they are also outputs

[10:54] <samcv> ok. i'm thinking about how to go about testing the appimage with roast though

[10:55] <samcv> does it call perl6-m or something else?

[10:55] <samcv> or call moar directly?

[11:13] <samcv> it's late i gotta get to bed. night o/

[11:13] <timotimo> gnite!

[12:25] <Geth> ¦ nqp/master: 6 commits pushed by (Pawel Murias)++

[12:25] <Geth> ¦ nqp/master: a6d66a28d1 | [js] Implement nqp::handle taking a LABELED

[12:25] <Geth> ¦ nqp/master: 6df192b44f | Test nqp::handle taking a LABELED

[12:25] <Geth> ¦ nqp/master: 71dc9f5e70 | [js] Implement :nohandler in while op

[12:25] <Geth> ¦ nqp/master: bf6db45c12 | Test nohandler in while

[12:25] <Geth> ¦ nqp/master: cb2c35cde0 | [js] Implement nohandler in the for op

[12:25] <Geth> ¦ nqp/master: 7ff8f08aac | Test nohandler with the for op

[12:25] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/829346745e...7ff8f08aac

[13:22] <Geth> ¦ rakudo/nom: 10fe02a285 | (Elizabeth Mattijsen)++ | src/core/Setty.pm

[13:22] <Geth> ¦ rakudo/nom: Make Setty.hash about 4x faster

[13:22] <Geth> ¦ rakudo/nom:

[13:22] <Geth> ¦ rakudo/nom: - for a 100 elem Setty

[13:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/10fe02a285

[13:59] <Zoffix> masak: was it you saying something about null bytes?

[13:59] <Zoffix> masak: it's supposed to be *nul* byte or something?

[14:00] <masak> I've learned that the name for ASCII 0 is "NUL"

[14:00] <masak> they're all three-letter names down there

[14:00] <masak> and I *think* I learned it from nwc10

[14:00] <Zoffix> masak: but that's an abbreviation, innit?

[14:01] <Zoffix> "The null character (also null terminator), abbreviated NUL, is a control character with the value zero" https://en.wikipedia.org/wiki/Null_character

[14:01] <Zoffix> m: <X::IO::NullByte  X::IO::NulByte>.pick.say

[14:01] <camelia> rakudo-moar 10fe02: OUTPUT: «X::IO::NullByte␤»

[14:01] * Zoffix goes with X::IO::NUL

[14:01] <masak> could be a difference between "null character" and "NUL byte"

[14:04] * Zoffix changes mind and goes with X::IO::Null

[14:04] <masak> :)

[14:17] <Zoffix> t/spec/S11-modules/require.t flopped

[14:21] <Zoffix> uuuhhh...

[14:21] <Zoffix> We have nul roundtripping via IO::Path as part of 6.c-errata :S https://github.com/perl6/roast/blob/6.c-errata/S32-io/io-path.t#L57-L58

[14:21] <timotimo> # RT #126935

[14:21] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126935

[14:22] <Zoffix> I'm gonna remove it. Seem it was added to test .perl roundtripping

[14:23] <timotimo> ah, yes

[14:24] <timotimo> maybe just unprintables in general, and accidentally a nul byte

[14:40] <Geth> ¦ roast/6.c-errata: 1f1f33e6fc | (Zoffix Znet)++ | S32-io/io-path.t

[14:40] <Geth> ¦ roast/6.c-errata: [io grant] Change \0 roundtrip test to \t roundtrip test

[14:40] <Geth> ¦ roast/6.c-errata:

[14:40] <Geth> ¦ roast/6.c-errata: NUL bytes aren't allowed in paths, so this test is in direct

[14:40] <Geth> ¦ roast/6.c-errata: contradiction with the security bug I'm trying to fix.

[14:40] <Geth> ¦ roast/6.c-errata:

[14:40] <Geth> ¦ roast/6.c-errata: Since it's trying to test roundtrippage of whitespace, change it

[14:40] <Geth> ¦ roast/6.c-errata: to use use \t instead of \0.

[14:40] <Geth> ¦ roast/6.c-errata:

[14:40] <Geth> ¦ roast/6.c-errata: https://irclog.perlgeek.de/perl6-dev/2017-04-10#i_14405645

[14:40] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/1f1f33e6fc

[14:40] <Geth> ¦ roast: 8f73ad855f | (Zoffix Znet)++ | S32-io/io-path.t

[14:40] <Geth> ¦ roast: [io grant] Change \0 roundtrip test to \t roundtrip test

[14:40] <Geth> ¦ roast:

[14:40] <Geth> ¦ roast: NUL bytes aren't allowed in paths, so this test is in direct

[14:40] <Geth> ¦ roast: contradiction with the security bug I'm trying to fix.

[14:40] <Geth> ¦ roast:

[14:40] <Geth> ¦ roast: Since it's trying to test roundtrippage of whitespace, change it

[14:40] <Geth> ¦ roast: to use use \t instead of \0.

[14:40] <Geth> ¦ roast:

[14:40] <Geth> ¦ roast: https://irclog.perlgeek.de/perl6-dev/2017-04-10#i_14405645

[14:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8f73ad855f

[14:46] <masak> what's the security bug, ooc?

[14:46] <Geth> ¦ roast: b16fbd3b24 | (Zoffix Znet)++ | S32-io/null-char.t

[14:46] <Geth> ¦ roast: [io grant] Add tests to check nul byte is rejected

[14:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b16fbd3b24

[14:48] <Geth> ¦ rakudo/nom: e6814986c0 | (Zoffix Znet)++ | 3 files

[14:48] <Geth> ¦ rakudo/nom: [io grant] Make IO::Path throw when path contains NUL byte

[14:48] <Geth> ¦ rakudo/nom:

[14:48] <Geth> ¦ rakudo/nom: Fixes RT#130900: https://rt.perl.org/Ticket/Display.html?id=130900

[14:48] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e6814986c0

[14:48] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130900

[14:48] <Zoffix> masak: https://rt.perl.org/Ticket/Display.html?id=130900#txn-1452154

[14:49] <masak> ah, very well.

[15:11] <ugexe> i wonder if windows lets you use a null byte in the path if you *really* want

[15:11] <ugexe> it lets you do lots of other dumb shit

[15:14] <Zoffix> Some page I read when fixing that bug said Windows reserves NUL

[15:16] <ugexe> the question is which api reverses nul? the low level system (that perl/perl6 use for instance) can create files with "illegal" characters" that you cant even see in explorer

[15:17] <ugexe> ...we could hide precomp files on windows!

[15:37] <timotimo> hide them behind junctions

[15:37] <timotimo> thats a much cooler feature

[15:38] <Zoffix> Hm. I'm already bored with this and it's only 11:38am.

[15:39] <Zoffix> Progress: 33%.

[15:39] <Zoffix> ZofBot: should I call it a day and rest, to have lots of energy for this tomorrow?

[15:39] <ZofBot> Zoffix, If you have a multidimensional array, you can ask for flattening semantics explicitly with "flat": zip(0

[15:39] <Zoffix> Can you?

[15:39] <Zoffix> m: my @a[2;2] = (2, 2;3,4); dd @a

[15:39] <camelia> rakudo-moar e68149: OUTPUT: «Array.new(:shape(2, 2), [2, 2], [3, 4])␤»

[15:39] <Zoffix> m: my @a[2;2] = (2, 2;3,4); dd flat @a

[15:39] <camelia> rakudo-moar e68149: OUTPUT: «(2, 2, 3, 4).Seq␤»

[15:40] <Zoffix> Cool

[15:40] <Zoffix> ZofBot++ # TIL

[15:45] <AlexDaniel> heh, that's something

[15:45] <AlexDaniel> ZofBot: what do you think about other bots?

[15:45] <ZofBot> AlexDaniel, tree" There is a ""list"" operator which imposes a list context on its arguments even if "list" itself occurs in item context

[15:46] <AlexDaniel> ZofBot: …

[15:46] <ZofBot> AlexDaniel, This is likely to be the case on single-core architectures with heavy context switching, and may very well be the case even on manycore CPU architectures when there are more iterators than cores, such that cores may still have to do context switching

[15:47] <AlexDaniel> nice to know, ZofBot…

[15:55] <Geth> ¦ roast: ee7f05bb51 | (Zoffix Znet)++ | S32-io/io-path.t

[15:55] <Geth> ¦ roast: [io grant] Move is-path sub to top so it can be reused

[15:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ee7f05bb51

[15:58] <Zoffix> ZOFVM: Files=1238, Tests=133571, 127 wallclock secs (24.07 usr  3.67 sys + 2644.27 cusr 155.69 csys = 2827.70 CPU)

[16:18] <Geth> ¦ roast: a40ba13554 | (Zoffix Znet)++ | packages/Test/Util.pm

[16:18] <Geth> ¦ roast: Implement fails-like

[16:18] <Geth> ¦ roast:

[16:18] <Geth> ¦ roast: Like throws-like + check that code fail()s instead of throw()ing

[16:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a40ba13554

[16:30] <Geth> ¦ rakudo/nom: 6a8d63d1b6 | (Zoffix Znet)++ | 2 files

[16:30] <Geth> ¦ rakudo/nom: [io grant] Implement :completely param in IO::Path.resolve

[16:30] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6a8d63d1b6

[16:30] <Geth> ¦ roast: a809f0f1f5 | (Zoffix Znet)++ | S32-io/io-path.t

[16:30] <Geth> ¦ roast: [io grant] Expand IO::Path.resolve tests

[16:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a809f0f1f5

[19:12] <chatter29> hey guys

[19:13] <chatter29> allah is doing

[19:13] <chatter29> sun is not doing allah is doing

[19:13] <chatter29> to accept Islam say that i bear witness that there is no deity worthy of worship except Allah and Muhammad peace be upon him is his slave and messenger

[19:13] <Geth> ¦ nqp/uncurse: 4 commits pushed by TimToady++

[19:13] <Geth> ¦ nqp/uncurse: 2b73538d8d | rebootstrap to get constant declarator

[19:13] <Geth> ¦ nqp/uncurse: 0c53231dd9 | start to unify NQPMatch with NQPCursor

[19:13] <Geth> ¦ nqp/uncurse: 2a31c20393 | rebootstrap with temp shim to find lost NQPCursor

[19:13] <Geth> ¦ nqp/uncurse: e32ad16b0e | finish s/NQPCursor/NQPMatch/ tranformation

[19:13] <Geth> ¦ nqp/uncurse: review: https://github.com/perl6/nqp/compare/0000000000...e32ad16b0e

[19:14] <RabidGravy> er

[19:20] <TimToady> ignoring seems to have been the correct response :)

[19:25] <geekosaur> ignore or not, they always do the same thing

[19:26] <geekosaur> and they've been doing this in multiple channels for I don't know how long now, but over a year

[19:28] <Zoffix_> A strange man just entered my apartment and broke the wall behind the sink in the washroom while I was standing in my underwear.

[19:29] <Zoffix_> He was half-way through the job before I realized I was almost naked....

[19:29] <RabidGravy> :-O

[19:30] <Zoffix_> :)

[19:30] <Zoffix_> Apparently there's some sort of flooding (now known to be) above me.

[19:36] <TimToady> my nose is leaking too, but I don't think any repairman is going to break in here for that...

[19:39] <samcv> oh TimToady what are your thoughts on a perl6 command line option to have perl6 start in a directory other than ./

[19:39] <samcv> does perl have such an option? and what are your thoughts on it

[19:39] <samcv> cause that would be nice to have for making AppImages work better

[20:03] <MasterDuke> TimToady: is the nqp/uncurse branch supposed to have any immediate effects for something like rakudo's parsing?

[20:12] <TimToady> MasterDuke: shouldn't

[20:13] <TimToady> well, except in the sense that the rakudo parser will also need a lot of work

[20:13] <TimToady> but that should also be in a branch

[20:14] <MasterDuke> ah, so no faster parsing just yet

[20:14] <TimToady> not yet

[20:15] <TimToady> can't tell how much faster it might be already, given I don't get all the way through compiling the setting yet...

[20:16] <TimToady> and we still have the .MATCH overhead for the moment, it just goes to a different place

[20:17] <TimToady> can't do much about that as long as we're forced to do lookups in an nqp hash that has to be precomputed

[20:17] <TimToady> but it's a step in the direction of getting away from that

[20:18] <TimToady> eventually, for most matches, saying $<foo> will just pull the foo value straight out of the cstack, and only maybe use a hash to cache it en passant

[20:19] <MasterDuke> nice

[20:20] <TimToady> and for some matches that are just liek <statement>*, we can probably just return the cstack itself as the value of $<statement>, if that's the only capture

[20:20] <TimToady> but this will entail turning $<foo> into some kind of method call, not just a hash lookup

[20:21] <TimToady> nqp isn't smart enough to do that yet

[20:22] <TimToady> but that's where I'm headed with it

[20:25] <TimToady> at the moment, fighting a very mysterious error while trying to compose 'class Variable' about 22% through the setting, gets: Cannot invoke this object (REPR: Null; VMNull)

[20:26] <TimToady> when trying to call $compiler_services.generate_accessor

[20:28] <TimToady> so probably some subtle interaction in the parsing of Rakudo::Internals somewhere earlier...

[20:29] <MasterDuke> i don't think i'd ever looked at Variable.pm before, the contents look above my pay grade

[20:29] <TimToady> probably either undersharing or oversharing of some kind of match data, given how nqp has changed underneath ti

[20:30] <MasterDuke> istr a new ticket about either over or under sharing match data somewhat recently

[20:30] <TimToady> Unfortunately, when you reach my paygrade, being promoted to one's level of incompetence is no longer a valid excuse. :)

[20:58] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/04/10/2017-15-kaboom-⁽¹⁾/

[21:10] <MasterDuke> lizmat++, busy week

[21:31] <AlexDaniel> s: 'unique', \(1, 2, 3)

[21:31] <SourceBaby> AlexDaniel, Something's wrong: ␤ERR: Cannot resolve caller sourcery(Str, Capture); none of these signatures match:␤    ($thing, Str:D $method, Capture $c)␤    ($thing, Str:D $method)␤    (&code)␤    (&code, Capture $c)␤  in block <unit> at -e line 6␤␤

[21:32] <AlexDaniel> s: unique, \(1, 2, 3)

[21:32] <SourceBaby> AlexDaniel, Something's wrong: ␤ERR: Cannot resolve caller sourcery(Seq, Capture); none of these signatures match:␤    ($thing, Str:D $method, Capture $c)␤    ($thing, Str:D $method)␤    (&code)␤    (&code, Capture $c)␤  in block <unit> at -e line 6␤␤

[21:32] <AlexDaniel> s: &unique, \(1, 2, 3)

[21:32] <SourceBaby> AlexDaniel, Sauce is at https://github.com/rakudo/rakudo/blob/6a8d63d/src/core/Any-iterable-methods.pm#L2002

[21:32] <AlexDaniel> s: \(1, 2, 3), 'unique'

[21:32] <SourceBaby> AlexDaniel, Something's wrong: ␤ERR: Type check failed in binding to parameter '&code'; expected Callable but got Method+{<anon|71130480>} (Method+{<anon|7113048...)␤  in sub do-sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 42␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 33␤  in blo

[21:32] <AlexDaniel> s: (1, 2, 3), 'unique'

[21:32] <SourceBaby> AlexDaniel, Something's wrong: ␤ERR: Type check failed in binding to parameter '&code'; expected Callable but got Method+{<anon|71130480>} (Method+{<anon|7113048...)␤  in sub do-sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 42␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 33␤  in blo

[21:33] <AlexDaniel> hmmm how do I find a method…

[21:33] <AlexDaniel> SourceBaby: help

[21:33] <SourceBaby> AlexDaniel, Use s: trigger with args to give to sourcery sub. e.g. s: Int, 'base'. See http://modules.perl6.org/dist/CoreHackers::Sourcery

[21:33] <AlexDaniel> s: List, 'unique'

[21:33] <SourceBaby> AlexDaniel, Something's wrong: ␤ERR: Type check failed in binding to parameter '&code'; expected Callable but got Method+{<anon|71130480>} (Method+{<anon|7113048...)␤  in sub do-sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 42␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 33␤  in blo

[21:33] <AlexDaniel> … this fucking bot…

[21:33] <Zoffix_> What do you want from it?

[21:34] <AlexDaniel> Zoffix_: already found it, but still. What if I wanted to find this? https://github.com/rakudo/rakudo/blob/6a8d63d/src/core/Any-iterable-methods.pm#L1496

[21:35] <Zoffix_> You're welcome to fix the Perl 6 bug that's preventing it from finding that method.

[21:35] <AlexDaniel> s: Any, 'unique'

[21:35] <SourceBaby> AlexDaniel, Something's wrong: ␤ERR: Type check failed in binding to parameter '&code'; expected Callable but got Method+{<anon|71130480>} (Method+{<anon|7113048...)␤  in sub do-sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 42␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 33␤  in blo

[21:35] <AlexDaniel> Zoffix_: ah, it's the same bug

[21:35] <AlexDaniel> okay then

[21:35] <geekosaur> glad I'm not the only one who can't figure that thing out...

[21:35] <Zoffix_> Thinking of it now, it might be the bug....

[21:35] <Zoffix_> *might be the augmentation

[21:35] <Zoffix_> m: use MONKEY; say Int.^lookup('abs').file.say

[21:35] <camelia> rakudo-moar 6a8d63: OUTPUT: «SETTING::src/core/Int.pm␤True␤»

[21:36] <AlexDaniel> would be helpful if SourceBaby detected this and said sorry, but you'd probably say that I can fix SourceBaby myself :P

[21:36] <Zoffix_> m: use MONKEY; augment class Int { method abs { 42 } }; Int.^lookup('abs').file.say

[21:36] <camelia> rakudo-moar 6a8d63: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Package 'Int' already has a method 'abs' (did you mean to declare a multi-method?)␤at <tmp>:1␤»

[21:36] <Zoffix_> m: use MONKEY; augment class Int { method abs2 { 42 } }; Int.^lookup('abs2').file.say

[21:36] <camelia> rakudo-moar 6a8d63: OUTPUT: «<tmp>␤»

[21:36] <Zoffix_> AlexDaniel, no, I'd probably say fix the Perl 6 bug

[21:41] <Zoffix_> s: (1,), 'grep'

[21:41] <SourceBaby> Zoffix_, Something's wrong: ␤ERR: Type check failed in binding to parameter '&code'; expected Callable but got Method+{<anon|71130480>} (Method+{<anon|7113048...)␤  in sub do-sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 42␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 33␤  in block

[21:41] <Zoffix_> m: (1,).^lookup('grep').file.say

[21:41] <camelia> rakudo-moar 6a8d63: OUTPUT: «SETTING::src/core/Any-iterable-methods.pm␤»

[21:41] <Zoffix_> m: say (1,).^lookup('grep') ~~ Callable

[21:41] <camelia> rakudo-moar 6a8d63: OUTPUT: «False␤»

[21:42] <Zoffix_> m: say (1,).^lookup($_) ~~ Callable for <first  min  max  batch>

[21:42] <camelia> rakudo-moar 6a8d63: OUTPUT: «False␤False␤False␤False␤»

[21:42] <Zoffix_> m: use MONKEY; augment class Int { method abs2 { 42 } }; Int.^lookup('abs2') ~~ Callable

[21:42] <camelia> rakudo-moar 6a8d63: ( no output )

[21:42] <Zoffix_> m: use MONKEY; augment class Int { method abs2 { 42 } }; say Int.^lookup('abs2') ~~ Callable

[21:42] <camelia> rakudo-moar 6a8d63: OUTPUT: «True␤»

[21:42] <Zoffix_> hmmm

[21:43] <Zoffix_> m: say (1,).^lookup($_) ~~ Callable for <first  min  max  batch  rotor  skip  maxpairs  squish  repeated  unique>

[21:43] <camelia> rakudo-moar 6a8d63: OUTPUT: «False␤False␤False␤False␤False␤True␤True␤False␤False␤False␤»

[21:43] * Zoffix_ shrugs

[21:45] <Zoffix_> lizmat++ good weekly

[21:47] <Zoffix_> Looks like the plumber stood me up. Said he'd check upstairs and then be back. That was more than 2 hours ago :

[21:48] <Zoffix_> ZofBot, I guess that means I can depants myself

[21:48] <ZofBot> Zoffix_, re multi method re( --> Real ) Returns the real part of the complex number

[22:47] <lizmat> good night, #perl6-dev!

[22:51] <Zoffix> night

[23:10] <Geth> ¦ rakudo/nom: b6838ee4df | (Zoffix Znet)++ | src/core/IO/Path.pm

[23:10] <Geth> ¦ rakudo/nom: [io grant] Remove .f check in .z

[23:10] <Geth> ¦ rakudo/nom:

[23:10] <Geth> ¦ rakudo/nom: - This mirrors the same change done to .s a few months back

[23:10] <Geth> ¦ rakudo/nom: - The X::IO::NotAFile exception is no longer needed anywhere,

[23:10] <Geth> ¦ rakudo/nom:     but I kept it, since there's a .WHICH test that tests it.

[23:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b6838ee4df

[23:11] <Geth> ¦ roast: feecaf087b | (Zoffix Znet)++ | S16-filehandles/filetest.t

[23:11] <Geth> ¦ roast: [io grant] Expand file tests

[23:11] <Geth> ¦ roast:

[23:11] <Geth> ¦ roast: - Covers previously uncovered .rw and .rwx

[23:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/feecaf087b

[23:39] <Zoffix> Note to self: when estimating completion time for a grant... multiply the value by 8 :)

[23:40] <Zoffix> ... or by 80

[23:41] <samcv> heh

[23:41] <Zoffix> According to my tacker I've done 10% today. Still have 4 full days before the release, and 3 evenings...

[23:42] <samcv> looks like gonna be more work to get travis to push to repos. argh

[23:42] <samcv> oh well https://gist.github.com/domenic/ec8b0fc8ab45f39403dd

[23:42] <samcv> make ssh key encrypt key, do bunch of weird things then i guess it can push to the github magically

[23:43] <samcv> unless i can figure out how to get this token to work i generated

[23:43] <samcv> maybe i need to use the hashed token not the token...

[23:44] <samcv> if i use that and try and clone it myself, it asks for a password. which i'm guessing travis knows

[23:44] <samcv> .o(if i use the hashed token, what is the good of the nonhashed token if i can't actually access anything with it)
