[01:10] <Geth> ¦ rakudo/nom: d232f3c5f0 | (Nick Logan)++ | .travis.yml

[01:10] <Geth> ¦ rakudo/nom: Re-perlify .travis.yml

[01:10] <Geth> ¦ rakudo/nom:

[01:10] <Geth> ¦ rakudo/nom: .travis.yml should be instructional when possible, so instructing users to explicitly install the jdk in a perl environment makes more sense to an end user than whatever "language: java" might imply.

[01:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d232f3c5f0

[05:54] <Geth> ¦ nqp: 5409c853a3 | (Samantha McVey)++ | t/nqp/106-unicodenames.t

[05:54] <Geth> ¦ nqp: Add tests for getstrfromname and codepointfromname

[05:54] <Geth> ¦ nqp:

[05:54] <Geth> ¦ nqp: These ops previously had no tests written for them.

[05:54] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5409c853a3

[05:54] <Geth> ¦ nqp: 4ffa0c2df6 | (Samantha McVey)++ | src/HLL/Actions.nqp

[05:54] <Geth> ¦ nqp: Remove ifdefs for JVM now that we have getstrfromname op

[05:54] <Geth> ¦ nqp:

[05:54] <Geth> ¦ nqp: Tests are in place so this code is now not needed anymore and we

[05:54] <Geth> ¦ nqp: can use the same code for both backends.

[05:54] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/4ffa0c2df6

[07:46] <[Tux]> This is Rakudo version 2017.02-240-gd232f3c5f built on MoarVM version 2017.02-39-gd7caeba3

[07:46] <[Tux]> csv-ip5xs        3.091

[07:46] <[Tux]> test            12.362

[07:46] <[Tux]> test-t           5.032 - 5.077

[07:46] <[Tux]> csv-parser      12.845

[10:17] <lizmat> afk until P6W time&

[10:17] <yoleaux2> 12 Mar 2017 21:45Z <MasterDuke> lizmat: what are IO::Path.(Numeric|Int) for? you added them in https://github.com/rakudo/rakudo/commit/58709063feee03755a21f530842a02f7af43f3d4

[10:17] <lizmat> MasterDuke: at former $work, we had a lot of log files that just had the epoch as their name

[10:17] <lizmat> (one for every second)

[10:18] <lizmat> so it makes sense to me to allow numerics to convert to IO::Path as well

[10:18] <lizmat> really afk&

[13:49] <Geth> ¦ rakudo: kalkin++ created pull request #1037: Enhance Pod::To::Text

[13:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1037

[14:35] <ugexe> m: say "/123".IO.Int; # didn't expect this to work... but i can see arguments for why it should and shouldnt

[14:35] <camelia> rakudo-moar d232f3: OUTPUT: «123␤»

[14:39] <[Coke]> m: say "/what".IO.Str

[14:39] <camelia> rakudo-moar d232f3: OUTPUT: «/what␤»

[14:39] <[Coke]> m: say "/123".Int

[14:39] <camelia> rakudo-moar d232f3: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5/123' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[14:39] <[Coke]> It's inconsistent, at least. :|

[14:40] <moritz> m: say "/123".IO.basename.perl

[14:40] <camelia> rakudo-moar d232f3: OUTPUT: «"123"␤»

[14:49] <ugexe> m: say "/one/two/three".IO.Str; say "/1/2/3".IO.Int

[14:49] <camelia> rakudo-moar d232f3: OUTPUT: «/one/two/three␤3␤»

[14:54] <IOninja> It's consistent enough, considering making it use full path instead of just basename would make it fail all the time :)

[14:54] <IOninja> And it's handy to have IO::Path that is Cool

[15:46] <ugexe> the argument would be that IO::Path stringifies to whatever it was originally given (so if it was given an absolute path it stringifies to absolute, relative to relative)

[15:46] <ugexe> m: say "foo".IO.Str; say $*CWD.child("foo").IO.Str

[15:46] <camelia> rakudo-moar d232f3: OUTPUT: «foo␤/home/camelia/foo␤»

[15:46] <ugexe> thats the only real problem with it

[16:01] <IOninja> Not "originally given" but "what it is". .child() creates a new IO::Path

[16:01] <IOninja> IO::Path is immutable and stringifying it gives you what it is.

[16:01] * IOninja doesn't see a problem with it.

[16:28] <IOninja> Actually, I see a problem. It doesn't consider IO::Path.Cwd when stringifying

[16:29] <IOninja> my $p = "bar".IO; chdir ".."; $p.slurp.say # still works

[16:29] <IOninja> my $p = "bar".IO; chdir ".."; $p.Str.IO.slurp.say # doesn't

[16:31] <IOninja> same with .path attribute...

[16:32] <IOninja> [Coke]: did anyone ever not finish their grant? Like... gave up on it

[16:34] <[Coke]> I am sure that has happened, yes.

[16:35] <IOninja> Were they ever be able to apply for a grant again?

[16:36] <[Coke]> There is no hard rule, but as a voting member of the committee, I would certainly take that into consideration on future applications

[16:36] <IOninja> OK.

[16:42] <eDeniAxlal> IOninja: please don't :)

[16:42] <IOninja> I won't.

[16:56] <b2gills> I think .Bridge should just be replace by .Numeric, as I think all it does is convert it to a Numeric so that it can further be converted to the actual type asked for

[16:56] <moritz> no

[16:57] <IOninja> No, to .Num

[16:57] <moritz> .Numeric on a Numeric type should be a no-op

[16:57] <moritz> .Num makes more sense

[16:57] <IOninja> AFAIK, all .Bridge methods currently just coerce to Num

[16:58] <b2gills> So it is only used on Numerics that don't know how to convert directly to say an Int, but aren't themselves a Num?

[17:01] <IOninja> It used to bridge ops on numerics that aren't the same, e.g. multi sub infix:<+>(Real \a, Real \b)   { a.Bridge + b.Bridge }

[17:01] <IOninja> instead of adding a ton of ops for all the combinations. And ops that can do higher precision (e.g. Rationals) have their own ops

[17:02] <IOninja> And .Bridge converts to .Num, so what I was saying yesterday is: toss the 2 extra method calls per op and just call Num directly.

[17:06] <b2gills> Well that does make sense since Num supports the most subsets of numbers

[20:01] <Geth> ¦ nqp: af47dd56a4 | usev6++ | 2 files

[20:01] <Geth> ¦ nqp: [JVM] Minor code cleanup

[20:01] <Geth> ¦ nqp:

[20:01] <Geth> ¦ nqp: * use .equals("") to test for empty string

[20:01] <Geth> ¦ nqp: * toss out (typoed) variable that was used only once

[20:01] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/af47dd56a4

[20:17] <Geth> ¦ roast: 7cf1524046 | usev6++ | S03-operators/div.t

[20:17] <Geth> ¦ roast: Test code from RT #112678 with native int

[20:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7cf1524046

[20:17] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=112678

[21:48] <[Tux]> I am currently upgrading my OpenSUSE 13.2 to OpenSUSE 42.2

[21:48] <[Tux]> I hope it will not have any influence on timings

[21:49] <jnthn> That's...quite a version bump :)

[21:49] <[Tux]> not realy. Version numbering changed. 11.4 12.0 12.1 12.2 12.3 13.1 13.2 42.1 42.2

[21:50] <[Tux]> and in parallel TW (TumbleWeed) which is a rolling distribution

[21:50] <[Tux]> they promised 13.1 to be a LTR, but it proves not to be :(

[21:51] <[Tux]> anyway, as 13.2 to 42.1 proved to be a move that caused no problems whatsoever, I decided to skip 42.1 and move to 42.2

[21:54] <jnthn> Aha :)

[21:56] <nine> [Tux]: 13.2 to 42.2 is harmless

[21:56] <nine> The only thing I didn't like was the downgrade of perl from 5.20 to 5.18 :/

[21:59] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/03/13/2017-11-tidy-da-tags/

[22:01] <[Tux]> nine, I do not use system perl. I have my own perl version(s) installed

[22:02] <[Tux]> currently 5.22.0, but I plan to move to 5.24.1 (and 5.26.0 when released)

[22:06] <nine> Tumbleweed (which works incredibly well btw.) is on 5.24.0, which I'm quite happy about :)

[22:10] * lizmat is tired and goes off for some shuteye

[22:10] <lizmat> so good night, #perl6-dev!

[22:15] <nine> Good night, lizmat++ :)
