[03:58] <Zoffix> Is there some easy cause for why a code block (when precomped) runs fine, but as soon as you stick a subroutine call into it, it crashes with "Cannot invoke this object (REPR: Null; VMNull)" at this line: nqp::p6capturelexwhere($phaser.clone())();

[04:31] <ugexe> hmm, i can't do `perl6 -I. -MFoo ...` because CUR::FileSystem iterates -all- files/dirs under the -I directory ($*HOME in this case) and tries to open a directory somewhere it doesnt have permissions for

[04:35] <ugexe> 1132 unintentionally fixes this though

[04:35] <ugexe> perl6 --ll-exception -I. -MFoo -e 'dd A.a'

[04:35] <ugexe> Failed to open dir: 13

[04:47] <Zoffix> Ah, that's the "too many open files" error when dir is too nested

[04:48] <Zoffix> Like in a recursive code that does IO.dir without iterating the Seq to the end

[07:17] <yoleaux> AlexDaniel`: RT/GH weekly

[08:42] <lizmat> Files=1229, Tests=75778, 316 wallclock secs (14.93 usr  5.31 sys + 2185.49 cusr 208.19 csys = 2413.92 CPU)

[08:42] <Geth> ¦ rakudo: 7f154fe22e | (Elizabeth Mattijsen)++ | src/core/Telemetry.pm

[08:42] <Geth> ¦ rakudo: Handle all permutations of infix:<->(Telemetry,Telemetry)

[08:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7f154fe22e

[09:01] <lizmat> m: say $*VM.version  # is camelia stuck ?

[09:01] <camelia> rakudo-moar 4fca94743: OUTPUT: «v2017.10␤»

[09:01] <lizmat> $ 6 'say $*VM.version'

[09:01] <lizmat> v2017.10.26.gad.2.d.6.fb

[10:16] <MasterDuke> maybe the nom -> master switch confused it?

[10:19] <lizmat> ah, that's probably it

[10:19] <lizmat> I guess moritz would be the one to ping?

[10:21] <MasterDuke> or timotimo?

[10:25] * moritz investigates

[10:26] <moritz> ok, I did a "git checkout" in the source trees

[10:26] <moritz> git checkout master, that is

[10:26] <moritz> so the next cron-based trigger should pick up master

[10:32] <lizmat> moritz++

[10:32] <lizmat> m: say $*VM.version

[10:32] <camelia> rakudo-moar 7f154fe22: OUTPUT: «v2017.10.26.gad.2.d.6.fb.0.d␤»

[10:32] <lizmat> whee!

[10:33] <lizmat> m: sub term:<snap>() { Telemetry.new }; say snap - INIT snap

[10:33] <camelia> rakudo-moar 7f154fe22: OUTPUT: «180 / 177␤»

[10:34] <lizmat> shown are CPU time and wallclock in microseconds

[10:35] <moritz> m: sub term:<snap>() { Telemetry.new }; say (snap - INIT snap).new

[10:35] <camelia> rakudo-moar 7f154fe22: OUTPUT: «Cannot unbox a type object (int) to an int.␤  in block <unit> at <tmp> line 1␤␤»

[10:35] <moritz> m: sub term:<snap>() { Telemetry.new }; say (snap - INIT snap).perl

[10:35] <camelia> rakudo-moar 7f154fe22: OUTPUT: «Telemetry::Period.new(:cpu-user(171), :cpu-sys(0), :wallclock(167))␤»

[11:37] <Geth> ¦ nqp: 99ad77f183 | pmurias++ | src/vm/js/Compiler.nqp

[11:37] <Geth> ¦ nqp: [js] Coerce the last value of a block when passed to the exit_handler

[11:37] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/99ad77f183

[11:37] <Geth> ¦ nqp: 2e47a2df8d | pmurias++ | 2 files

[11:37] <Geth> ¦ nqp: [js] Fix wrong number of positionals error messages

[11:37] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/2e47a2df8d

[11:56] <Geth> ¦ rakudo: e00f705d69 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals.pm

[11:56] <Geth> ¦ rakudo: We're returning a native: "is raw" makes that a bit faster

[11:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e00f705d69

[11:56] <Geth> ¦ rakudo: 3dfaa2aedd | (Elizabeth Mattijsen)++ | src/core/Telemetry.pm

[11:56] <Geth> ¦ rakudo: Make sure we actually record since start of program

[11:56] <Geth> ¦ rakudo:

[11:56] <Geth> ¦ rakudo: Instead of number of microseconds since epoch.

[11:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3dfaa2aedd

[12:22] <Geth> ¦ rakudo: 59a59be8a5 | (Elizabeth Mattijsen)++ | 5 files

[12:22] <Geth> ¦ rakudo: Move Telemetry out of the setting

[12:22] <Geth> ¦ rakudo:

[12:22] <Geth> ¦ rakudo: - move it to lib, so you will have to do "use Telemetry"

[12:22] <Geth> ¦ rakudo: - add a snap() sub, to huffmanize Telemetry.new

[12:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/59a59be8a5

[12:31] <jnthn> grrr, figured "git archieve" would be a fine way to make a tar.gz to upload to PAUSE. But no, it whines that it wants everything in some top-level directory

[12:35] <jnthn> Ah, good, git archive takes a --prefix= :)

[12:36] <buggable> New CPAN upload: IO-Socket-Async-SSL-0.5.tar.gz by JNTHN https://cpan.metacpan.org/authors/id/J/JN/JNTHN/Perl6/IO-Socket-Async-SSL-0.5.tar.gz

[12:37] <jnthn> hurrah, seems it accepted it this time

[12:37] <jnthn> Hm, though it gave me some warning that I shouldn't upload the same filename twice, even though I deleted the previous one.

[12:38] <jnthn> So guess we'll see if it really works out

[12:49] <jnthn> heh, it looked confused, so did another upload :)

[12:50] <lizmat> jnthn: PAUSE is very strict: you cannot upload a file with the same name twice

[12:51] <jnthn> That bit of strict is fine. Being fussy about wanting things in a single top-level directory is slightly annoying :)

[12:52] <jnthn> Hopefully it'll report here about the new, fixed, tarball I uploaded

[12:52] <jnthn> And then index it on modules.perl6.org

[12:53] <jnthn> Planning to do the next Cro release next week, and upload that to CPAN, so doing this module as a test/learning run :)

[12:56] <buggable> New CPAN upload: IO-Socket-Async-SSL-0.5.0.tar.gz by JNTHN https://cpan.metacpan.org/authors/id/J/JN/JNTHN/Perl6/IO-Socket-Async-SSL-0.5.0.tar.gz

[12:57] <jnthn> There we go

[13:11] <Geth> ¦ rakudo: 5244048618 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[13:11] <Geth> ¦ rakudo: Remove Telemetry.Period, it was too magical to some

[13:11] <Geth> ¦ rakudo:

[13:11] <Geth> ¦ rakudo: - fix Telemetry.wallclock: it shouldn't return since epoch

[13:11] <Geth> ¦ rakudo: - improved snap() subroutine, now also allows pushing to a given array

[13:11] <Geth> ¦ rakudo: - added periods() subroutine, for generating a Seq of Telemetry::Period objects

[13:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5244048618

[13:12] <lizmat> draft of Telemetry docs: https://gist.github.com/lizmat/9dfe921efe7762c55fba534dfdbcd68c

[13:12] <lizmat> draft of Telemetry::Period docs: https://gist.github.com/lizmat/e601e91c90e93858a8a1836b965ec770

[13:28] <jnthn> hurrah: http://modules.perl6.org/search/?q=author%3A%22JNTHN%22+from%3Acpan

[13:28] <jnthn> Curiously, if you remove the quotes, the search doesn't find anything

[13:33] <jnthn> Urgh, but it seems that module isn't happy on Rakudo HEAD

[13:34] <jnthn> Was fine on 2017.09-479-g7cf5ce7

[13:36] * jnthn gets travis to try it on 2017.10

[13:37] <lizmat> jnthn: how is it unhappy?

[13:53] <Geth> ¦ rakudo: b30916f353 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[13:53] <Geth> ¦ rakudo: Add Telemetry::Period.cpus/utilization

[13:53] <Geth> ¦ rakudo:

[13:53] <Geth> ¦ rakudo: - cpus returns string indicating how many CPU's were used

[13:53] <Geth> ¦ rakudo: - utilization returns a string indicating % of CPU power used

[13:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b30916f353

[13:58] * lizmat hopes that TimToady likes what Telemetry now does, and where it lives

[14:22] <Geth> ¦ rakudo: f7d21b5d6c | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[14:22] <Geth> ¦ rakudo: periods() adds an extra snap() if only one was done

[14:22] <Geth> ¦ rakudo:

[14:22] <Geth> ¦ rakudo: - also, if there are still snaps from snap(), the say periods before exiting

[14:22] <Geth> ¦ rakudo: - this allows for simple timing info on a single or more snaps

[14:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f7d21b5d6c

[14:22] * Zoffix asks again, seeing there are people around...

[14:22] <Zoffix> Is there some easy cause for why a code block (when precomped) runs fine, but as soon as you stick a subroutine call into it, it crashes with "Cannot invoke this object (REPR: Null; VMNull)" at this line: nqp::p6capturelexwhere($phaser.clone())();

[14:23] <Zoffix> precomped phaser codes are busted if they reference some HLL symbols; even as simple as `say` even tho `nqp::say` works

[14:25] <lizmat> Zoffix: other precomped stuff is borked as well: GH #1219

[14:25] <jnthn> Normally because something goes bad with restoring their outer chain

[14:25] * lizmat looks at GH #1220

[14:28] <Zoffix> lizmat: yeah, that's the same cause

[14:28] <Zoffix> Alright. I'll try to figure out where it's restoring stuff :)

[14:31] <jnthn> Removing a module from META.list should be sufficient to keep it from being dupe-listed on modules.perl6.org after also putting in on CPAN?

[14:31] <Zoffix> Yes

[14:31] <jnthn> s/in/it

[14:31] <jnthn> OK, guess I just need to be more patient :)

[14:31] <jnthn> Will check it in another couple of hours

[14:32] <jnthn> Also, is there a way to have a module that's on CPAN still show travis status, issues, etc?

[14:32] <Zoffix> umm.. there's something busted

[14:32] <Zoffix> "Couldn't require ModulesPerl6::DbBuilder::Dist::PostProcessor::p20TravisCI : Attempt to reload ModulesPerl6/DbBuilder/Dist/PostProcessor/p20TravisCI.pm aborted."

[14:32] <Zoffix> jnthn: not implemented at the moment

[14:33] <jnthn> Ah, OK

[14:33] <jnthn> Then it's not that I screwed something up :)

[14:33] <Zoffix> I'm guessing this busted it: https://github.com/perl6/modules.perl6.org/commit/93d02d138a93717c9abe2dd74bb095ac105632fb

[14:34] <Zoffix> sigil's messed up

[14:39] <Zoffix> k, I think it's fixed now, so in 2hr stuff should be OK

[14:44] <dogbert17> Zoffix: do you have any comments about Destiny 2?

[14:45] <Zoffix> "never heard of it" :)

[14:46] <dogbert17> haha

[14:50] <Zoffix> And the "Curiously, if you remove the quotes, the search doesn't find anything" is due to quote option parser being crap. Filed as https://github.com/perl6/modules.perl6.org/issues/91

[14:51] <Zoffix> "Destiny 2 is an online-only multiplayer" I see now why; I'm very much a single-player type of person

[14:51] <dogbert17> so nothing for you then?

[14:52] <Zoffix> Got BeamingNG.drive last night. Super-realistic driving simulator. Here's a sports car smashed into the guard rail at 150km/h: https://i.imgur.com/lartBs5.jpg

[14:53] <dogbert17> only scrap left of that one :)

[14:54] <Zoffix> Nah, scrap is when you levitate the car very high and then drop it: https://i.imgur.com/CxxKevk.jpg :)

[14:55] <Zoffix> Interestingly, if you set "Sun" gravity, the windshield instantly cracks under the weight of the sagging roof

[14:55] <Zoffix> So sun isn't a good place to drive a sports car at :P

[14:56] <dogbert17> cool

[14:58] <lizmat> afk for a bit&

[15:10] <[Tux]> timing running

[15:22] <[Tux]> Rakudo version 2017.10-4-g4fca94743 - MoarVM version 2017.10-1-g213fc774

[15:22] <[Tux]> csv-test-xs-20      0.452 -  0.453

[15:22] <[Tux]> csv-ip5xs           1.162 -  1.183

[15:22] <[Tux]> test-t              3.105 -  3.454

[15:22] <[Tux]> test               11.528 - 11.721

[15:22] <[Tux]> csv-parser         11.939 - 13.361

[15:22] <[Tux]> csv-ip5xs-20       14.210 - 14.229

[15:22] <[Tux]> test-t-20 --race   19.725 - 19.981

[15:22] <[Tux]> test-t-20          57.076 - 59.666

[15:32] <Zoffix> [Tux]: are you still running timings on `nom` branch?

[15:32] <Zoffix> m: $*PERL.compiler.version.say

[15:32] <camelia> rakudo-moar f7d21b5d6: OUTPUT: «v2017.10.36.gf.7.d.21.b.5.d.6␤»

[15:33] <Zoffix> You're 32 commits behind; we've switched to use `master` now

[15:33] <Zoffix> AlexDaniel: what's `nom:` trigger? Looks to be running `master`

[17:05] <Zoffix> [Tux]: also, is there a speed.log ( http://tux.nl/Talks/CSV6/speed.log ) for test-t-20 time? I figured I'd make buggable use that, to get finer resolution.

[17:23] <Zoffix> ZOFFLOP: t/spec/S11-modules/nested.t

[17:29] <Geth> ¦ rakudo: 3c4041eab5 | (Zoffix Znet)++ | 2 files

[17:29] <Geth> ¦ rakudo: Implement hypered nodality for all methodcall variations

[17:29] <Geth> ¦ rakudo:

[17:29] <Geth> ¦ rakudo: Fixes RT#130721: https://rt.perl.org/Ticket/Display.html?id=130721

[17:29] <Geth> ¦ rakudo:

[17:29] <Geth> ¦ rakudo: Depending on dispatch variant, the actual method call we're hypering

[17:29] <Geth> ¦ rakudo: might differ than what the original code assumes to be the name

[17:29] <Geth> ¦ rakudo: (and that name would be `dispatch:<blah>`). Fix by raking the QASTs

[17:29] <Geth> ¦ rakudo: <…commit message has 12 more lines…>

[17:29] <synopsebot> RT#130721 [open]: https://rt.perl.org/Ticket/Display.html?id=130721 [BUG] Hypered conditional method calls `».?foo` don't respect nodal methods

[17:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3c4041eab5

[17:33] <Geth> ¦ roast: 868491aaf5 | (Zoffix Znet)++ | S03-metaops/hyper.t

[17:33] <Geth> ¦ roast: Spec hyper nodality with all methodcall variants

[17:33] <Geth> ¦ roast:

[17:33] <Geth> ¦ roast: Rakudo impl: https://github.com/rakudo/rakudo/commit/3c4041eab5

[17:33] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/868491aaf5

[17:33] <Zoffix> \o/ that was a tough one

[17:33] <Zoffix> Gained a whole level from all the XP

[17:33] * Zoffix rakes through the loot

[17:36] <Zoffix> .oO( rakudo dev RPG.. with a bot )

[18:18] <[Tux]> Zoffix: not yet. I might

[19:06] <buggable> New CPAN upload: URI-Encode-0.000.003_20171029.tar.gz by PSIXDISTS https://cpan.metacpan.org/authors/id/P/PS/PSIXDISTS/Perl6/URI-Encode-0.000.003_20171029.tar.gz

[20:16] <MasterDuke> anyone have an idea why changing a proto's body from `{*}` to `{ * }` would cause `===SORRY!=== This type cannot unbox to a native string: P6opaque, Whatever` during  target 'perl6-m'`?

[20:22] <AlexDaniel> Zoffix: RPG? http://strangelyconsistent.org/blog/perl-6-is-my-mmorpg

[20:23] <MasterDuke> i just tried to normalize all proto sub/method in the setting to `{ * }` (there were about 150 `{*}` and 630 `{ * }`). so i don't know exactly which one changed. it's dying at https://github.com/rakudo/rakudo/blob/master/src/core/Version.pm#L42: my str $s = nqp::atpos($strings,$i);

[20:23] <AlexDaniel> Zoffix: what “nom” trigger are you talking about?

[20:23] <AlexDaniel> nom: say 42

[20:23] <camelia> rakudo-moar 3c4041eab: OUTPUT: «42␤»

[20:23] <AlexDaniel> this?

[20:24] <AlexDaniel> it was changed: https://github.com/perl6/evalbot/commit/b74b19f1229698b50f6dbcd08224cecfe3cfb504

[20:24] <AlexDaniel> but nobody restarted the bot since then

[20:25] <AlexDaniel> master: say 42

[20:25] <AlexDaniel> yeah I guess so

[20:26] <Zoffix> nom: say 42

[20:27] <AlexDaniel> master: say 42

[20:27] <camelia> rakudo-moar 3c4041eab: OUTPUT: «42␤»

[21:48] * Zoffix giggles at MVM_REPR_DEFAULT_ASS_FUNCS

[21:49] <lizmat> .oO( FULL FART )

[21:52] <lizmat> m: dd SetHash()   # that smells wrong

[21:52] <camelia> rakudo-moar 3c4041eab: OUTPUT: «SetHash(Any)␤»

[21:56] <jnthn> Why?

[21:56] <jnthn> SomeTypeName() is a coercion type literal

[21:59] <lizmat> so where does the Any come from then ?

[21:59] <lizmat> m: dd SetHash(<a b c>)

[21:59] <camelia> rakudo-moar 3c4041eab: OUTPUT: «SetHash("b","a","c")␤»

[22:00] <jnthn> Any is the default from type

[22:00] <lizmat> ah, of course  :-(

[22:00] <jnthn> m: sub foo(SetHash() $s) { dd $s }; foo((1,2,1,3))

[22:00] <camelia> rakudo-moar 3c4041eab: OUTPUT: «SetHash $s = SetHash(1,3,2)␤»

[22:00] <jnthn> That's shorthand for SetHash(Any) $s

[22:00] <lizmat> a change in SetHash.perl is needed then

[22:04] <jnthn> Zoffix: Associative is so much to type... Like the Positional above it :P

[22:27] <Geth> ¦ rakudo: af3624d45d | (Elizabeth Mattijsen)++ | src/core/Setty.pm

[22:27] <Geth> ¦ rakudo: Correct (Set|SetHash).perl

[22:27] <Geth> ¦ rakudo:

[22:27] <Geth> ¦ rakudo: An empty Set/SetHash was shown as "Set()"/"SetHash()", which would

[22:27] <Geth> ¦ rakudo: create a Set/SetHash with Any as the only element when EVALled.

[22:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/af3624d45d

[22:30] <jnthn> That's not quite right, it'd actually create a coercion type and evaluate to the type object

[22:30] <lizmat> well, it was not roundtripping  :-)

[22:31] <jnthn> True that :)

[22:42] <Geth> ¦ rakudo: 1949a2bc13 | (Elizabeth Mattijsen)++ | 2 files

[22:42] <Geth> ¦ rakudo: Make 'my %h is Set(|Hash) = ...;' DWIM

[22:42] <Geth> ¦ rakudo:

[22:42] <Geth> ¦ rakudo: - in response to RT #132352 and RT #132353

[22:42] <Geth> ¦ rakudo: - make also sure we can initialize Sets only once

[22:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1949a2bc13

[22:42] <synopsebot> RT#132352 [rejected]: https://rt.perl.org/Ticket/Display.html?id=132352 Set operators unfriendly to mutable types

[22:42] <synopsebot> RT#132353 [new]: https://rt.perl.org/Ticket/Display.html?id=132353 [LTA] error with using meta assign ops with bound SetHash

[22:44] <lizmat> argh, the check for storing a Set is wrong :-(

[22:44] <jnthn> Not sure if you should be able to my %h is Set = ...

[22:44] <lizmat> why not?

[22:44] <jnthn> Or if we do, we need to find some way to make follow-up assignments not work

[22:44] <lizmat> as long as you only do it once, that should be ok ?

[22:45] <jnthn> And it's not clear how to generally do that once

[22:45] <timotimo> ooooh shiny! a few terminal emulators have support for an ansi escape code that lets you put hyperlinks into the terminal that have their text differ from the underlying link

[22:45] <timotimo> https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda

[22:45] <lizmat> jnthn: not sure what problem you're referring to

[22:45] <jnthn> lizmat: my %h is Set = ...; %h = ...; # second one must fail

[22:46] <jnthn> And since the only API we have for this is STORE at the moment

[22:46] <lizmat> yeah, ok, that's what I was going for

[22:46] <jnthn> How can we achieve that

[22:46] <lizmat> yes, I know

[22:46] <lizmat> well, atm an empty Set is basically a nqp::create(Set)

[22:46] <lizmat> that's actually *the* empty set

[22:48] <lizmat> jnthn: actually, my %h is Set = <a b c>; %h = <d e f> is not a problem

[22:48] <lizmat> that's covered (basically)

[22:48] <jnthn> It is if it doens't explode on the second assignment :P

[22:48] <lizmat> it does

[22:48] <lizmat> so that's not the problem

[22:48] * jnthn looks how that's been achieved to see if he likes it

[22:49] <lizmat> it basically checks if the $!elems attribute is definite: it doesn't allow STORE if it is

[22:49] <jnthn> Ah, hm

[22:49] <jnthn> I guess that's not too bad

[22:50] <lizmat> now, since an empty Set doesn't have the $!elems set

[22:50] <lizmat> handling the case: my %h is Set; %h = <a b c>

[22:50] <lizmat> is a problem

[22:50] <jnthn> Yeah

[22:50] <jnthn> I was wondering if we wanted two methods

[22:51] <jnthn> Or a named arg to STORE

[22:51] <jnthn> :initial or some such

[22:51] <lizmat> now, if I bind an empty IterationSet in the Set, other places go wrong that assume the existence of the $!elems attribute means it has elements

[22:51] <jnthn> That'd be more robust

[22:51] <jnthn> Yeah. I think we need something explicit

[22:52] <jnthn> To tell the target of the assignment if this is an initialization or a later assignment

[22:52] <jnthn> This could be quite useful in a number of cases

[22:52] <lizmat> ok, fair enough

[22:52] <lizmat> that would simplify matters :-)

[22:53] <jnthn> Since extra named args are ignored, we could do it that way without upsetting any existing implementers of STORE

[22:54] <lizmat> yeah, I got that  :-)

[22:55] <lizmat> Line 6997 in Actions ?

[22:56] <lizmat> hmm... 8760 perhaps ?

[23:00] <jnthn> The initializer one, whichever that is

[23:01] <lizmat> yeah, I think 8760 and 9790

[23:01] <lizmat> 8790

[23:01] <lizmat> testing now

[23:01] <jnthn> That's the signature case

[23:02] <jnthn> At 8790

[23:02] <jnthn> For "is copy"

[23:03] <jnthn> https://github.com/rakudo/rakudo/blob/master/src/Perl6/Actions.nqp#L3159

[23:03] <jnthn> Here, you'd need to pass some argument to assign_op

[23:03] <jnthn> And then check that around 6997

[23:03] <lizmat> ok

[23:06] <lizmat> compiling...

[23:14] <lizmat> jnthn: apparently, "my %h is Set = a => 42" is not passing by 3159 :-(

[23:22] <jnthn> Hm, odd

[23:23] <jnthn> I can't see why it wouldn't

[23:24] <lizmat> hmmm... ok, something else weird going on then

[23:25] <lizmat> $past := QAST::Op.new(

[23:25] <lizmat> :op('callmethod'), :name('STORE'),

[23:25] <lizmat> $lhs_ast, $rhs_ast);

[23:25] <lizmat> +            if $initialize {

[23:25] <lizmat> +                $past.push(QAST::IVal.new( :value(1), :named('initialize') ));

[23:25] <lizmat> +            }

[23:25] <lizmat> does that look right ?

[23:26] <jnthn> Yeah

[23:27] <jnthn> I mean, it'd probably be better if it was a QAST::WVal passing True

[23:27] <jnthn> But that wouldn't stop it working

[23:28] <lizmat> hmmm...

[23:29] <lizmat> $past.push(QAST::WVal.new(

[23:29] <lizmat> :named('initialize'),

[23:29] <lizmat> :value($*W.find_symbol(['Bool', 'True']))

[23:29] <lizmat> );

[23:29] <lizmat> like that ?

[23:32] <lizmat> apart from a missing )

[23:32] <jnthn> Yes

[23:38] <lizmat> $past := assign_op($/, $past, $initast, :initialize);

[23:38] <lizmat> that's also ok, no ?

[23:46] <jnthn> Looks alright to me

[23:50] <lizmat> hmmm... it's not coming into the @/% sigil case

[23:53] <lizmat> jnthn: looks like if nqp::istype($lhs_ast, QAST::Var) { fails

[23:54] <Zoffix> try $lhs_ast.isa(QAST::Var)

[23:55] <Zoffix> (that was the thing that was used in the actions stuff I was coding today)

[23:55] <lizmat> not sure how that would make a difference, but I'll try

[23:55] <Zoffix> nqp: use QAST; say(nqp::istype(QAST::Var.new(), QAST::Var))

[23:55] <camelia> nqp-moarvm: OUTPUT: «1␤»

[23:55] <Zoffix> Ok nemeverind :)

[23:55] <Zoffix> ZofBot: look, I'm helping!

[23:55] <ZofBot> Zoffix, Well, see you Monday, Bill

[23:56] * Zoffix calls it a night

[23:56] <Zoffix> \o

[23:56] <lizmat> night Zoffix
