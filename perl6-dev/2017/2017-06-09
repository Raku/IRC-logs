[04:14] <eveo> m: class Foo { multi method foo (Int) { self.foo }; multi method foo() { state $l = 42; dd $l} }; with Foo.new { .foo: 42; }

[04:14] <camelia> rakudo-moar f0c3bf: OUTPUT: «Int $l = 42␤»

[04:14] <eveo> m: class Foo { multi method foo (Int) { self.foo }; multi method foo(:$foo) { state $l = 42; dd $l} }; with Foo.new { .foo: 42; }

[04:14] <camelia> rakudo-moar f0c3bf: OUTPUT: «Any $l = Any␤»

[04:15] <eveo> Filed as https://rt.perl.org/Ticket/Display.html?id=131542

[04:43] <eveo> ZOFVM: Files=1254, Tests=138776, 115 wallclock secs (20.30 usr  2.99 sys + 2324.89 cusr 150.79 csys = 2498.97 CPU)

[04:47] <Geth> ¦ rakudo/nom: 3ff29d42f0 | (Zoffix Znet)++ | src/core/CompUnit/RepositoryRegistry.pm

[04:47] <Geth> ¦ rakudo/nom: Permit IO::Path given as path to `use lib`

[04:47] <Geth> ¦ rakudo/nom:

[04:47] <Geth> ¦ rakudo/nom: Fixes RT#131540: https://rt.perl.org/Ticket/Display.html?id=131540

[04:47] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3ff29d42f0

[04:47] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131540

[04:47] <Geth> ¦ roast: 3dce753d7d | (Zoffix Znet)++ | S10-packages/basic.t

[04:47] <Geth> ¦ roast: Remove trailing whitespace

[04:47] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3dce753d7d

[04:48] <Geth> ¦ roast: 0bed372147 | (Zoffix Znet)++ | S10-packages/basic.t

[04:48] <Geth> ¦ roast: Test `use lib` accepts IO::Path objects

[04:48] <Geth> ¦ roast:

[04:48] <Geth> ¦ roast: RT#131540: https://rt.perl.org/Ticket/Display.html?id=131540

[04:48] <Geth> ¦ roast: Rakudo impl: https://github.com/rakudo/rakudo/commit/3ff29d42f0

[04:48] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131540

[04:48] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0bed372147

[05:49] <samcv> .tell Zoffix yay! you read my mind about `use lib` accepting IO::Path objects! did i ever complain about that or are you a mind reader

[05:49] <yoleaux> samcv: I'll pass your message to Zoffix.

[09:57] <eveo> .

[09:57] <eveo> There was a ticket for it.

[10:09] <eveo> Though it was first mentioned here.

[10:09] <eveo> https://irclog.perlgeek.de/perl6/2017-05-02#i_14518610

[10:10] <eveo> .tell mscha It now does. RE: https://irclog.perlgeek.de/perl6/2017-05-02#i_14518610

[10:10] <yoleaux> eveo: I'll pass your message to mscha.

[10:10] <samcv> thanks eveo

[10:11] <lizmat> Files=1204, Tests=61798, 222 wallclock secs (13.24 usr  4.93 sys + 1362.70 cusr 120.20 csys = 1501.07 CPU)

[10:25] <[TuxCM]> This is Rakudo version 2017.05-386-g3ff29d42f built on MoarVM version 2017.05-71-gad6ab26f

[10:25] <[TuxCM]> csv-ip5xs        2.915

[10:25] <[TuxCM]> test            12.865

[10:25] <[TuxCM]> test-t           4.359 - 4.475

[10:25] <[TuxCM]> csv-parser      13.155

[11:28] <cono> jnthn: looks like my issue has been fixed and I don't know how :( anything you can recall recently which fix segv ?

[11:29] <timotimo> under what conditions did that segfault happen?

[11:29] <cono> timotimo: https://github.com/perl6/roast/pull/270

[11:30] <cono> if I understood correctly this object was collected earlier and another nursery was trying to collect it again

[11:30] <cono> in gen2roots array was the object which shouldn't be there

[11:30] <timotimo> oh, ouch

[11:31] <cono> But I just ran the test on the recent rakudo[nom]+nqp+moar and it works

[11:31] <cono> very very intereseted what was the issue :)

[11:32] <timotimo> difficult to say

[11:32] <cono> indeed

[11:33] <cono> could be actually this: 239c6153115c63b8151a45193194b9e112a8ac76

[11:33] <cono> in moar

[11:34] <timotimo> hm, that doesn't look like it would impact SC objects or something

[12:17] <jnthn> Synchronous sockets got a complete rewrite. It's possible a bug got squelched.

[12:18] <jnthn> Well, I know one did, but I meant in addition to the one I was shooting for :P

[12:19] <cono> would you mind to look to my test rework then and merge it?

[12:44] <jnthn> cono: Will try and find a moment for that later on

[12:44] <cono> thanks a lot! :)

[12:50] <eveo> NeuralAnomaly: status

[12:50] <NeuralAnomaly> eveo, [✘] Next release will be in 1 day and 1 week. Since last release, there are 67 new still-open tickets (64 unreviewed and 0 blockers) and 384 unreviewed commits. See http://perl6.fail/release/stats for details

[12:51] <eveo> should have toast data for any regressions since 2017.05 releaste today.

[13:04] <eveo> m: $ = 'tmp/z1/z2/z3'.IO.mkdir; indir '/tmp/z1/z2', { say dir }

[13:04] <camelia> rakudo-moar 3ff29d: OUTPUT: «("z3".IO)␤»

[13:04] <eveo> m: $ = 'tmp/z1/z2/z3'.IO.mkdir; indir '/tmp/z1/', { indir 'z2', { say dir } }

[13:04] <camelia> rakudo-moar 3ff29d: OUTPUT: «Failed to get the directory contents of 'z2': Failed to open dir: 2␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:04] <eveo> and indir got IO() coercer :/ wonder why it don't like being nested

[13:05] <eveo> m: $ = 'tmp/z1/z2/z3'.IO.mkdir; indir '/tmp/z1/', { indir $*CWD.add('z2'), { say dir } }

[13:05] <camelia> rakudo-moar 3ff29d: OUTPUT: «("z3".IO)␤»

[13:06] <eveo> even tho that works :S

[13:17] <dogbert17> eveo: do you understand the last two lines of code on https://docs.perl6.org/type/UInt ? They look a bit bogus to me

[13:19] <eveo> That code block is ridiculous. It's just a subset like any other, so the example should have like 1 basic thing and a link to the subsets docs for those who don't know them. Also the "defined as" bit is wrong. It's actually `where {not .defined or $_ >= 0};` so it allows type objects too.

[13:20] <eveo> And the last two lines are just saying that you can use a UInt type in math operations just like regular Int, which isn't surprising, since it's just a subset

[13:21] <dogbert17> but why declare UInt $d and then not use it on next next line. And $a - 3 doesn't equal -3 since $a == 5. Bizarre

[13:22] <eveo> dogbert17: ah, yeah :) That too is wrong :D

[13:30] <eveo> ah, indir coercer is 'cause IO::Path.new stringifies $*CWD instead of .absoluting it

[13:31] <eveo> The IO::Path.Str issue will haunt for ages

[13:47] <eveo> ZOFVM: Files=1254, Tests=138776, 123 wallclock secs (23.06 usr  3.20 sys + 2523.04 cusr 137.77 csys = 2687.07 CPU)

[13:50] <dogbert17> does the following nqp statement return an Int:D? nqp::p6box_i(nqp::threadid($!vm_thread))

[13:51] <jnthn> Yes

[13:52] <dogbert17> thx jnthn, is doing some minor updates to Thread.pod6

[14:12] <dogbert17> m: say Tap.^methods

[14:12] <camelia> rakudo-moar 3ff29d: OUTPUT: «(BUILD new close)␤»

[14:14] <dogbert17> hmm, according to the docs, i.e. https://docs.perl6.org/type/Tap it has more methods, e.g. emit and supply. Is this correct or should I remove them?

[14:15] <jnthn> No, it doesn't have those

[14:15] <jnthn> And shouldn't

[14:16] <dogbert17> then I'll fix that immediately :)

[14:17] <AlexDaniel> oh no, and again I wrote something without seeing previous responses

[14:17] <ugexe> m: sub foo(Str(Cool) $bar) { say $bar }; foo(IO::Path.new("/xxx")); foo(IO::Path.new("xxx/")) # eveo: i'm trying to say this behavior should be used instead of absolutifying it

[14:17] <camelia> rakudo-moar 3ff29d: OUTPUT: «IO::Path is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 1␤␤»

[14:17] <AlexDaniel> I should first get well, then finally move to another place, set up a proper internet connection there… and then join this kind of discussions

[14:18] <dogbert17> only 'close' will be left

[14:18] <jnthn> Yup

[14:19] <jnthn> Which is all you can do with a Tap

[14:19] <jnthn> That's why you get it; so you can turn it off again later :)

[14:20] <dogbert17> fixed

[14:29] <eveo> ugexe: that's wrong tho. You can't .Str a path if you intend it to use it as path still

[14:29] <ugexe> its not being used as a path at that point

[14:29] <eveo> ugexe: the Str candidate is still there. So all the strings will go through it.

[14:30] <eveo> ugexe: what is it used as then? It's discarding .CWD attribute. my $p = "foo"; chdir "bar"; foo $p; will give wrong path

[14:30] <ugexe> correct

[14:31] <eveo> So why is the wrong path desirable?

[14:31] <dogbert17> more https://docs.perl6.org/type/Tap questions. There is a short example on the page which contains the line 'closing => { say "Tap closed" },'. Is that line legit?

[14:32] <ugexe> because who to say its wrong? the CUR is supposed to decide this

[14:33] <eveo> ugexe: the user is to say. If I do `use lib IO::Path.new: 'foo', :CWD</program1>` and you discard the "/program1" part the "foo" won't be pointing to the right location

[14:34] <ugexe> should pass an already absolutified IO object

[14:34] <eveo> :/

[14:34] <eveo> I'm just gonna move the absolutifcation to `use lib` code in Actions

[14:35] <eveo> ZOFFLOP: t/spec/S11-modules/require.t

[14:38] <ugexe> m: require "lib/Test".IO.absolute.IO

[14:38] <camelia> rakudo-moar 3ff29d: OUTPUT: «===SORRY!===␤No such method 'IO' for invocant of type 'Any'␤»

[14:39] <ugexe> lol

[14:39] <ugexe> m: say "lib/Test".IO.absolute.IO

[14:39] <camelia> rakudo-moar 3ff29d: OUTPUT: «"/home/camelia/lib/Test".IO␤»

[14:40] <Geth> ¦ rakudo/nom: b0fc9eecab | (Zoffix Znet)++ | src/core/io_operators.pm

[14:40] <Geth> ¦ rakudo/nom: Simplify &indir code

[14:40] <Geth> ¦ rakudo/nom:

[14:40] <Geth> ¦ rakudo/nom: - The ||, &&, and ?? !! already codegen to nqp::if/nqp::unless

[14:40] <Geth> ¦ rakudo/nom: - No functional changes

[14:40] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b0fc9eecab

[14:40] <Geth> ¦ rakudo/nom: 9151ebaaec | (Zoffix Znet)++ | src/core/io_operators.pm

[14:40] <Geth> ¦ rakudo/nom: Fix $*CWD inside &indir when using relative paths

[14:40] <Geth> ¦ rakudo/nom:

[14:40] <Geth> ¦ rakudo/nom: $*CWD gets .Str stringified in IO::Path.new, so it should always

[14:40] <Geth> ¦ rakudo/nom: be set to a IO::Path whose .path is an absolute path.

[14:40] <Geth> ¦ rakudo/nom:

[14:40] <Geth> ¦ rakudo/nom: This fixes the issue with nested indirs with relative Str paths

[14:40] <Geth> ¦ rakudo/nom: as args and any other IO::Path creation inside indir

[14:40] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9151ebaaec

[14:41] <Geth> ¦ roast: 0757d88130 | (Zoffix Znet)++ | S32-io/indir.t

[14:41] <Geth> ¦ roast: Test $*CWD is absolute inside indir

[14:41] <Geth> ¦ roast:

[14:41] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/9151ebaaec

[14:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0757d88130

[14:43] <eveo> spec isn't set?

[14:43] <eveo> m: BEGIN dd $*SPEC; require "lib/Test".IO.absolute.IO

[14:43] <camelia> rakudo-moar 3ff29d: OUTPUT: «IO::Spec::Unix <element> = IO::Spec::Unix␤===SORRY!===␤No such method 'IO' for invocant of type 'Any'␤»

[14:43] <eveo> hm.

[14:44] <eveo> Ah, it ends up being (require "lib/Test").IO.absolute.IO ?

[14:45] <ugexe> fwiw we *do* have a way to pass in arguments to a cur in string form, which could possibly be used to handle the cwd issue (but may require a new cur class) ala `path#cwd<...>#some/path`

[14:46] <eveo> but there's no cwd issue there?

[14:46] * eveo is really confused

[14:48] <ugexe> thats what a io::path argument to cur in string form should probably look like, so the cur can decide to absolutify it (with the proper cwd) or use the relative path part

[14:53] <ugexe> https://github.com/ugexe/rakudo/blob/nom/src/core/CompUnit/Repository/AbsolutePath.pm#L13 # if $file.is-absolute {

[14:53] <ugexe> https://github.com/ugexe/rakudo/blob/nom/src/core/CompUnit/Repository/FileSystem.pm#L91 # unless $file.is-absolute {

[14:54] * dogbert17 is confused by the Supply/Tap docs

[14:54] <ugexe> granted we probably should get rid of the first one

[14:54] <eveo> gah. Google killed my toaster VM when it was almost done :( Was doing letter 'S' already

[14:54] <dogbert17> eveo: out of money?

[14:54] <eveo> (the final toaster won't be on pre-emptible VM, but this one is)

[14:55] <eveo> dogbert17: no, it's "pre-emptible". Meaning they can kill it at any time in exchange for it being zillion times cheaper

[14:55] <eveo> Doesn't happen often, so for dev work it's a big win

[14:55] <dogbert17> aha, good to know

[14:56] <dogbert17> eveo: are you any good with supplies and taps?

[14:57] <eveo> Not really.

[14:57] <dogbert17> :(

[14:57] <dogbert17> am a bit suspicious about this line from the Concurrency pod:

[14:57] <dogbert17> "Calling done on the supply object calls the done callback that may be specified for any taps, but does not prevent any further events being emitted to the stream, or taps receiving them."

[14:58] <ugexe> which part?

[14:58] <dogbert17> but does not prevent  ...

[14:59] <dogbert17> perhaps I'm misunderstanding the text but to me it implies that I can do emit's on a supplier after having call 'done' and things will continue to work

[15:00] <ugexe> maybe its referring to race condition

[15:00] <Geth> ¦ rakudo/nom: 326faed6c5 | (Zoffix Znet)++ | 2 files

[15:00] <Geth> ¦ rakudo/nom: Rework `use lib IO::Path...` feature

[15:00] <Geth> ¦ rakudo/nom:

[15:00] <Geth> ¦ rakudo/nom: Remove CURR interface change and instead convert any IO::Paths

[15:00] <Geth> ¦ rakudo/nom: given to `use lib` to Str directly in World.

[15:00] <Geth> ¦ rakudo/nom:

[15:00] <Geth> ¦ rakudo/nom: This reverts commit 3ff29d42f026fde6ed4483aa022c6d9512c61700.

[15:00] <Geth> ¦ rakudo/nom:

[15:00] <Geth> ¦ rakudo/nom: Discussions:

[15:00] <Geth> ¦ rakudo/nom: https://github.com/rakudo/rakudo/commit/3ff29d42f026fde6e#commitcomment-22461302

[15:00] <Geth> ¦ rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2017-06-09#i_14710384

[15:00] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/326faed6c5

[15:00] <eveo> ugexe: ^ that addresses your concerns, I believe.

[15:00] <dogbert17> ugexe: perhaps, guess I'll leave that line alone

[15:01] <ugexe> dogbert17: well, what happens when you try to explicitly .emit after .done? if you cant then I agree its confusing

[15:04] <dogbert17> ugexe, m: my $supplier = Supplier.new; my $supply = $supplier.Supply; my $tap = $supply.tap( -> $v { say $v }); $supplier.emit("OK"); $supplier.done; $supplier.emit("What will happen");sleep 1;  # bad golf

[15:04] <dogbert17> m: my $supplier = Supplier.new; my $supply = $supplier.Supply; my $tap = $supply.tap( -> $v { say $v }); $supplier.emit("OK"); $supplier.done; $supplier.emit("What will happen");sleep 1;  # bad golf

[15:04] <camelia> rakudo-moar 9151eb: OUTPUT: «OK␤»

[15:05] <dogbert17> it is indeed confusing

[15:07] <ugexe> well

[15:07] <ugexe> `await $supplier.done`

[15:07] <ugexe> thats probably what needs to be clarified

[15:07] <ugexe> nevermind thats not right heh

[15:10] <dogbert17> so we have that and then the 'closing' callback mystery in the example here https://docs.perl6.org/type/Tap

[15:11] <dogbert17> running the code in the example does not trigger the 'closing => { say "Tap closed" },' line

[15:19] <ugexe> dogbert17: looks like supply is passing `closing` to something that expects `on-close`

[15:19] <ugexe> well, nevermind that cant be it either (its positional)

[15:21] <ugexe> i'd say this is a bug

[15:24] <dogbert17> oops

[15:27] <dogbert17> ugexe: the closing callback is mentioned in the signature here, https://docs.perl6.org/type/Supply#method_tap, but is is not mentioned in the docs below

[15:27] <ugexe> should turn it into a roast test

[15:28] <ugexe> https://github.com/rakudo/rakudo/blob/6d12cecc955ed997a832cff14346eb082456af19/src/core/Supply.pm#L102

[15:28] <ugexe> https://github.com/rakudo/rakudo/blob/6d12cecc955ed997a832cff14346eb082456af19/src/core/Supply.pm#L12

[15:28] <ugexe> so the docs *should* be right - it just isn't working

[15:29] <Geth> ¦ roast: a520037d7f | (Zoffix Znet)++ | S32-num/power.t

[15:29] <Geth> ¦ roast: Test power ops with uncommon No chars

[15:29] <Geth> ¦ roast:

[15:29] <Geth> ¦ roast: Covers RT#126732: https://rt.perl.org/Ticket/Display.html?id=126732

[15:29] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/pull/1095

[15:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a520037d7f

[15:29] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126732

[15:31] <dogbert17> wonder why it's not working, the code looks innocent enough

[15:32] <Geth> ¦ roast: ed4d510255 | (Zoffix Znet)++ | S32-num/power.t

[15:32] <Geth> ¦ roast: Fill missing test descriptions

[15:32] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ed4d510255

[15:33] <dogbert17> looks at https://github.com/rakudo/rakudo/blob/6d12cecc955ed997a832cff14346eb082456af19/src/core/Supply.pm#L77

[15:35] <eveo> The docs don't match the code.

[15:35] <eveo> .tap is using &!closing and doesn't take :&closing arg

[15:36] <dogbert17> yeah, so who's right, the code or the docs?

[15:37] <eveo> the roast

[15:37] <eveo> So either the docs are wrong or the feature is unspecced

[15:39] <dogbert17> I'm leaning towards unspecced

[15:41] <dogbert17> would be nice to be able to correct the docs though

[15:45] <ugexe> `self.Supply::tap(|c, closing => { ... });` this was in the older code, so I suspect the docs at least *were* correct at one point

[15:52] <dogbert17> ugexe: what about https://github.com/rakudo/rakudo/blob/6d12cecc955ed997a832cff14346eb082456af19/src/core/Supply.pm#L102 is it a leftover?

[16:10] <ugexe> well that is the code that the snippet i pasted above replaces

[16:13] <eveo> "Deprecated use of %*LANG<MAIN> assignment detected in use"

[16:13] <eveo> damn, how to supress that :/ it's in the code path to support old slang interface

[16:15] <eveo> "No such method '!make' for invocant of type 'Perl6::Grammar+{BioInfo::Grammar}'"

[16:16] <eveo> Well, guess it don't matter much since I've no idea how to make the new way work anyway

[16:18] <eveo> Weird. Slang::Tuxic doesn't have the same issues and I basically copied over its method. https://gist.github.com/zoffixznet/fce7475f31492f911deae8fa6ecbbccc

[16:21] <eveo> s:3rd/'$MAIN-grammar'/$MAIN-actions/ # doesn't avoid the issues tho

[16:26] <dogbert17> ugexe: I wonder what the intended workings of this are supposed to be

[16:30] <eveo> .ask TimToady any idea what to do about "No such method '!make'" when trying to mix in a slang? Having trouble fixing BioInfo module: https://github.com/MattOates/BioInfo/issues/7

[16:30] <yoleaux> eveo: I'll pass your message to TimToady.

[16:33] <ugexe> m: my $supplier = Supplier.new; my $supply = $supplier.Supply.on-close({ say "closing" }); my $tap = $supply.tap(-> $v { say "the value is $v" }); $supplier.emit(100); $tap.close;

[16:33] <camelia> rakudo-moar 326fae: OUTPUT: «the value is 100␤closing␤»

[16:35] <dogbert17> aha, so the behaviour has changed a bit from what it used to be

[16:37] <ugexe> i wonder if https://github.com/rakudo/rakudo/blob/nom/src/core/Supply.pm#L102 should be like #L234

[16:38] <dogbert17> who would know, jnthn, lizmat?

[16:39] <ugexe> probably. but you could always try and see what happens :)

[16:39] <lizmat> dogbert17: doesn't ring a bell

[16:39] <lizmat> afk again&

[16:48] * jnthn tries to figure out what the Supply question is :)

[16:48] <dogbert17> ugexe: I'll give it a shot

[16:48] <jnthn> It's certainly the case that Tap takes a thing to run when the tap is closed in its constructor.

[16:49] <jnthn> Not that normal code would ever produce a Tap instance by itself

[16:49] <jnthn> The Supply.on-demand factory method lets the user pass in something to do when the tap is closed, so they can do a resource cleanup

[16:50] <jnthn> .on-close is the more typical user-level way to insert cleanup into a Supply chain

[16:50] <jnthn> Well, Supply.on-demand is user-level too, but you might have a Supply from elsewhere

[16:50] <dogbert17> we were discussing this line, https://github.com/perl6/doc/blob/master/doc/Type/Tap.pod6#L15

[16:51] <dogbert17> which does not seem to to anything

[16:51] <jnthn> Ah

[16:51] <jnthn> method tap does not take a closing named argument any more

[16:52] <jnthn> Hasn't since the big Supply refactor of 2015 :)

[16:52] <jnthn> You'd use .on-close({...}).tap(...) now

[16:52] <dogbert17> aha, the fog begins to lift :)

[16:53] <dogbert17> we also questioned the following text from the concurrency pod: "Calling done on the supply object calls the done callback that may be specified for any taps, but does not prevent any further events being emitted to the stream, or taps receiving them."

[16:54] <dogbert17> the second part of that text "but does not prevent ..." feels slightly wrongish

[16:55] <jnthn> Yeah

[16:55] <eveo> sqlite> select count(*) from toast where status != 'Succ' and rakudo = '2017.05';

[16:55] <eveo> 169

[16:55] <eveo> sqlite> select count(*) from toast where status != 'Succ' and rakudo = 'e538cbc';

[16:55] <eveo> 128

[16:55] <eveo> Well, at least overall looks like a lot more modules are passing on HEAD than on 20167.05 :)

[16:56] <jnthn> Almost every Supply you'll encounter today is "sane"

[16:56] <jnthn> Or "sanitry2

[16:56] <TimToady> eveo: that looks more like assumptions from before the Cursor/Match merge

[16:56] <yoleaux> 16:30Z <eveo> TimToady: any idea what to do about "No such method '!make'" when trying to mix in a slang? Having trouble fixing BioInfo module: https://github.com/MattOates/BioInfo/issues/7

[16:56] <jnthn> Which means that the protocol emit* [done|quit] is enforced

[16:56] <TimToady> I'd just change .'!make' to .make and see if it works

[16:57] <jnthn> So you'd have to really go out of your way to see emit after a done :)

[16:57] <eveo> Ohhhhh... I didn't even notice there was a !make in BioInfo. I assumed it was something from Rakudo/nqp

[16:58] <TimToady> there is no '!make' in either nqp or rakudo anymore

[16:59] <eveo> Thanks.

[16:59] <dogbert17> m: my $supplier = Supplier.new; my $supply = $supplier.Supply; my $tap = $supply.tap( -> $v { say $v }); $supplier.emit("OK"); $supplier.done; $supplier.emit("What will happen");sleep 1;  # bad golf

[16:59] <camelia> rakudo-moar 326fae: OUTPUT: «OK␤»

[17:00] <TimToady> user modules that rely on private nqp implementation methods sometimes get burned  :)

[17:00] <eveo> :)

[17:01] <dogbert17> so emit after done won't do anything it seems

[17:01] <eveo> "Incompatible MROs in P6opaque rebless for types Perl6::Grammar+{BioInfo::Grammar} and Perl6::Grammar"

[17:01] <eveo> Well, not getting the make error anymore :)

[17:02] <dogbert17> thx jnthn and ugexe, will fix up the example

[17:05] <TimToady> eveo: perhaps it's "is"-ing some class it shouldn't be anymore?

[17:09] <eveo> Ah, OK $*LANG.^mixin(Some::Grammar) is not the same as %*LANG<MAIN>.^mixin(Some::Grammar)

[17:10] <eveo> All tests pass \o/

[17:16] <TimToady> you probably want $*LANG.slang_grammar('MAIN').^mixin(Some::Grammar) or so

[17:17] <eveo> Works. Thanks.

[17:18] <TimToady> it currently is still implemented as a hash internally, but with the abstraction layer we're free to change that now

[17:19] <TimToady> once all the module catch up :)

[17:23] <eveo> SQLite db with ecosystem toastings for 2017.05 and e538cbc (almost HEAD): https://temp.perl6.party/2017-06-09.toast.sqlite.db

[17:23] * eveo starts finishing off a viewer for it

[17:33] <eveo> Look at what I got \o/

[17:33] * eveo points at host

[17:35] <timotimo> nice

[17:52] <TimToady> bisect: 3 !! 4

[17:52] <bisectable6> TimToady, On both starting points (old=2015.12 new=326faed) the exit code is 1 and the output is identical as well

[17:52] <bisectable6> TimToady, https://gist.github.com/ce4c901a95671e67e5687865ea452a04

[17:52] <TimToady> coulda sworn that used to complain about a missing ??, but maybe that was STD

[17:55] <eveo> c: all 3 !! 4

[17:55] <committable6> eveo, https://gist.github.com/9b3e459206823af9e5068a6b2d5c2f7f

[17:56] <eveo> All are either TTIAR or "ConfuseD"

[18:30] <eveo> "Your !! was gobbled by the expression in the middle; please parenthesize"

[18:30] <eveo> aw c'mon! I specifically didn't use parens because it was obvious where they should end -_-

[18:30] <eveo> ZofBot: DEATH TO PARENS!

[18:30] <ZofBot> eveo, 22 csys = 1316

[18:33] * lizmat is developing a distaste for Ziggo's ISP qualities

[18:34] <lizmat> looks like the connection goes down about once an hour  :-(

[18:40] <eveo> :(

[19:18] <mst> lucasb: at least you're not using http://www.verelox.com/

[19:19] <lucasb> mst: hello

[19:19] <mst> bah

[19:19] <mst> tabfail

[19:19] <lucasb> mst: but.. sorry, what?

[19:19] <mst> lizmat: ^^

[19:19] <lucasb> ah, ok

[19:19] <mst> lucasb: my tab complete glommed onto your join

[19:26] <eveo> .tell dogbert17 don't know if you want to bother with it, but here's a bug that I can only repro on my 32bit box. Also the apparent dependence on command line args and path suggest this might be a Rakudo bug: https://github.com/perl6/DBIish/issues/93

[19:26] <yoleaux> eveo: I'll pass your message to dogbert17.

[19:52] <dogbert17> eveo: the problem shows up on my machine as well

[19:52] <yoleaux> 19:26Z <eveo> dogbert17: don't know if you want to bother with it, but here's a bug that I can only repro on my 32bit box. Also the apparent dependence on command line args and path suggest this might be a Rakudo bug: https://github.com/perl6/DBIish/issues/93

[20:04] <eveo> sweet

[20:04] <eveo> A reproduceable bug is a fixable bug :)

[20:04] <dogbert17> eveo: running it under strace uncovers the following:

[20:04] <dogbert17> write(2, "Invocant of method 'Bridge' must"..., 581Invocant of method 'Bridge' must be an object instance of type 'Int', not a type object of type 'Int'.  Did you forget a '.new'?

[20:04] <dogbert17> in method _row at /home/dogbert/repos/rakudo/install/share/perl6/site/lib/DBDish/SQLite/StatementHandle.pm6 (DBDish::SQLite::StatementHandle) line 51

[20:04] <dogbert17> in method row at /home/dogbert/repos/rakudo/install/share/perl6/site/lib/DBDish/StatementHandle.pm6 (DBDish::StatementHandle) line 77

[20:04] <dogbert17> in block  at /home/dogbert/repos/rakudo/install/share/perl6/site/lib/DBDish/StatementHandle.pm6 (DBDish::StatementHandle) line 94

[20:05] <dogbert17> in block <unit> at -e line 1

[20:05] <eveo> I saw these errors come up before I started doing .elems too

[20:08] <dogbert17> --ll-exception is a good thing to use here
