[00:09] <travis-ci> Rakudo build passed. Jonathan Worthington 'Fix bad assumption about methods being closures.

[00:09] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/264549001 https://github.com/rakudo/rakudo/compare/29e41b45fa80...231cb3f5fe8f

[00:56] <[Coke]> 6hhh

[00:56] <mst> [Coke]: yes?

[00:57] <timotimo> what's time to the third power useful for in physics?

[01:00] <geekosaur> usualy more useful as a reciprocal

[01:01] <geekosaur> e.g. s^-1 velocity, s^-2 acceleration, and s^-3 (change in acceleration) comes up in various contexts, notably rocketry

[01:01] <geekosaur> (s there being seconds)

[01:02] <[Coke]> mst: missend.

[01:02] <geekosaur> (all of those having a distance, typically meters, as numerator)

[01:02] <mst> [Coke]: cat on keyboard was my first thought :D

[01:03] <[Coke]> I use ssh to a tmux session; if it hangs, I will type out a few characters and if nothing shows up, I'll disconnect the ssh session. sometimes it's up even though it's not responding to me.

[01:11] <timotimo> i get that sometimes

[07:16] <lizmat> Files=1217, Tests=67433, 271 wallclock secs (13.89 usr  5.26 sys + 1810.61 cusr 178.11 csys = 2007.87 CPU)

[07:16] <yoleaux> 02:53Z <zengargoyle> lizmat: did you do that talk thing from a while back?

[07:17] <lizmat> .tell if you're referring to my "talk" at the TPCiA: no.  This was a completely unscripted Q&A session with most of the answers provided by people in the audience

[07:17] <yoleaux> lizmat: I'll pass your message to if.

[07:18] <lizmat> .tell zengargoyle if you're referring to my "talk" at the TPCiA: no.  This was a completely unscripted Q&A session with most of the answers provided by people in the audience

[07:18] <yoleaux> lizmat: I'll pass your message to zengargoyle.

[07:41] <zorin-os> can anyone help me statically compile perl with -Drelocatableinc and with thread support

[07:49] <lizmat> zorin-os: are you talking about Rakudo Perl 6 or Perl 5 ?

[07:50] <lizmat> indeed: wrong channel more than once :-(

[07:54] <zorin-os> depends is perl 6 is compatible with perl5 scripts

[07:59] <zorin-os> are you able to determine how a perl was compiled

[08:13] <nine> zorin-os: Perl 6 is a sister language to Perl 5. You will get better help over in #perl though https://perlbrew.pl/ might be all you need

[08:13] <yoleaux> 00:22Z <AlexDaniel> nine: Can you take a look at RT #131898? It looks scary, I'd say a blocker. Please tell me what you think.

[08:13] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131898

[08:14] <zorin-os> i cant use anything that modifies the environment as it may collide with an existing perlbrew installation

[08:14] <nine> .tell AlexDaniel yes, that's definitely a blocker. Will have a look (though probably only tomorrow)

[08:14] <yoleaux> nine: I'll pass your message to AlexDaniel.

[08:21] <zorin-os> for example, chroot ./perl /bin/perl /script.pl AND the /lib/perl5 directory exists (outside of the chroot it will be ./perl/lib/perl5/) and succesfull execution of the script means the script is then fully portable (except for its shebang)

[09:22] <Geth> ¦ roast: fd43387d40 | (Jonathan Worthington)++ | 2 files

[09:22] <Geth> ¦ roast: Add new atomics tests.

[09:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/fd43387d40

[09:23] <Geth> ¦ roast: 456b87ddbb | (Jonathan Worthington)++ | S17-promise/allof.t

[09:23] <Geth> ¦ roast: Correct test that tried to mis-use CAS.

[09:23] <Geth> ¦ roast:

[09:23] <Geth> ¦ roast: The cheating one didn't have to care for how the world actually works.

[09:23] <Geth> ¦ roast: :-)

[09:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/456b87ddbb

[09:24] <Geth> ¦ rakudo/atomics: de3124522f | (Jonathan Worthington)++ | 2 files

[09:24] <Geth> ¦ rakudo/atomics: Add Scalar atomic load/store, plus full barrier.

[09:24] <Geth> ¦ rakudo/atomics:

[09:24] <Geth> ¦ rakudo/atomics: For now as `Atomic.fetch`, `Atomic.assign`, and `full-barrier`, but

[09:24] <Geth> ¦ rakudo/atomics: they may well become functions instead.

[09:24] <Geth> ¦ rakudo/atomics: review: https://github.com/rakudo/rakudo/commit/de3124522f

[09:24] <Geth> ¦ rakudo/atomics: 7ab6eb6ac4 | (Jonathan Worthington)++ | t/spectest.data

[09:24] <Geth> ¦ rakudo/atomics: Run S17-lowlevel/atomic.t.

[09:24] <Geth> ¦ rakudo/atomics: review: https://github.com/rakudo/rakudo/commit/7ab6eb6ac4

[09:37] <Geth> ¦ nqp/atomics: fa974bc795 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[09:37] <Geth> ¦ nqp/atomics: Add constant mapping atomic integer type.

[09:37] <Geth> ¦ nqp/atomics: review: https://github.com/perl6/nqp/commit/fa974bc795

[09:41] <Geth> ¦ nqp/atomics: 59fd391f29 | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[09:41] <Geth> ¦ nqp/atomics: Add constant mapping atomic integer type.

[09:41] <Geth> ¦ nqp/atomics: review: https://github.com/perl6/nqp/commit/59fd391f29

[10:10] <pmurias> jnthn: do we want to sink for $foo.?method $foo.+method etc.?

[10:12] <pmurias> jnthn: in those cases we set a nosink and then wrap them in a hllize op ignoring the nosink

[10:12] <jnthn> Yes

[10:13] <jnthn> Well, for .? for sure

[10:13] <jnthn> I guess the .* and .+ return a list, which won't do anything on sink

[10:16] <pmurias> seems like we shouldn't be hllizing .+ and .*

[10:16] <jnthn> It's probably pointless, indeed.

[10:54] <Geth> ¦ roast: 45b159756f | (Elizabeth Mattijsen)++ | S03-junctions/autothreading.t

[10:54] <Geth> ¦ roast: One should use Junction.perl instead of .Str for testing

[10:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/45b159756f

[10:56] <Geth> ¦ roast/6.c-errata: ce3e1ec466 | (Elizabeth Mattijsen)++ | S03-junctions/autothreading.t

[10:56] <Geth> ¦ roast/6.c-errata: One should use Junction.perl instead of .Str for testing

[10:56] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/ce3e1ec466

[10:56] <lizmat> that should take care of the autothreading.t fails

[11:06] <lizmat> the only fails I now see on spectest is t/spec/S32-io/IO-Socket-INET.t (12-17)

[11:06] <lizmat> is that just me or just MacOS or what?

[11:06] <jnthn> No, I see it on Linux too. I thought they were about fallout from is default etc.?

[11:10] <lizmat> ah!

[11:10] <lizmat> ok, /me investigates

[11:11] <jnthn> lunch &

[11:14] <dogbert17_> lizmat: chances are that you have to revert a revert of a revert :)

[11:14] <lizmat> yeah, doing that right now

[11:14] <lizmat> yup, reverting is default fixes that

[11:15] <dogbert17_> guess it was 7fdbb49ccc4b

[11:15] <Geth> ¦ rakudo/nom: f1464e22f0 | (Elizabeth Mattijsen)++ | 5 files

[11:15] <Geth> ¦ rakudo/nom: Revert "Revert "Revert potentially confusing "is default" changes""

[11:15] <Geth> ¦ rakudo/nom:

[11:15] <Geth> ¦ rakudo/nom: This reverts commit 7fdbb49ccc4b7edc22dd561e3f42a960ba934f95.

[11:15] <Geth> ¦ rakudo/nom:

[11:15] <Geth> ¦ rakudo/nom: In light of release being near, feels safer to do without "is default"

[11:15] <Geth> ¦ rakudo/nom: for now and investigate after release.

[11:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f1464e22f0

[11:16] <ilmari> revertception

[11:16] <lizmat> and t/spec/S32-io/IO-Socket-INET.t is also clean

[11:16] <dogbert17_> yay

[11:17] <dogbert17_> m: say "Revert " x 3

[11:17] <camelia> rakudo-moar 231cb3: OUTPUT: «Revert Revert Revert ?»

[12:14] <Zoffix> FWIW, when is default went in, there weren't failures in S32-io/IO-Socket-INET.t. It likely merely exposes another bug that was introed sometime between is default going in and like last week

[12:28] <AlexDaniel> .tell nine OK, thank you!

[12:28] <yoleaux> 08:14Z <nine> AlexDaniel: yes, that's definitely a blocker. Will have a look (though probably only tomorrow)

[12:28] <yoleaux> AlexDaniel: I'll pass your message to nine.

[12:29] <Geth> ¦ rakudo/atomics: 5ea8596595 | (Jonathan Worthington)++ | 2 files

[12:29] <Geth> ¦ rakudo/atomics: Add atomicint type.

[12:29] <Geth> ¦ rakudo/atomics:

[12:29] <Geth> ¦ rakudo/atomics: Which will always be of an appropriate size for use with atomic ops

[12:29] <Geth> ¦ rakudo/atomics: on integers. What that size will be is platform specific. The integer

[12:29] <Geth> ¦ rakudo/atomics: atomic ops will work on any native int value that happens to be the

[12:29] <Geth> ¦ rakudo/atomics: current platform's atomic size, but we'll do the documentation so as

[12:29] <Geth> ¦ rakudo/atomics: to strongly encourage using atomicint instead to achieve portability.

[12:29] <Geth> ¦ rakudo/atomics: review: https://github.com/rakudo/rakudo/commit/5ea8596595

[12:29] <Geth> ¦ rakudo/atomics: 79c62c0b61 | (Jonathan Worthington)++ | src/core/Atomic.pm

[12:29] <Geth> ¦ rakudo/atomics: Add various atomic integer operations.

[12:29] <Geth> ¦ rakudo/atomics:

[12:29] <Geth> ¦ rakudo/atomics: Again, these may become functions rather than methods on `Atomic` in

[12:30] <Geth> ¦ rakudo/atomics: the future.

[12:30] <Geth> ¦ rakudo/atomics: review: https://github.com/rakudo/rakudo/commit/79c62c0b61

[12:30] <Geth> ¦ roast: 16e93354f3 | (Jonathan Worthington)++ | S17-lowlevel/atomic.t

[12:30] <Geth> ¦ roast: Basic tests for atomic integer operations.

[12:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/16e93354f3

[12:56] <AlexDaniel> does anybody know why design docs are down? http://design.perl6.org/S01.html

[12:56] <Zoffix> hack upgrade didn't start something it should have?>

[12:59] <AlexDaniel> “www.p6c.org hosts many Perl 6-related websites, including the perl6.org main site, doc.perl6.org, modules.perl6.org and the Perl 6 design documents.”

[12:59] <AlexDaniel> so it's not hack, right?

[13:00] <AlexDaniel> Zoffix: “The following users have root/sudo access, and can potentially help you:” lists your name :) ping

[13:00] <Geth> ¦ rakudo/nom: 2b8115f0e9 | pmurias++ | src/Perl6/Actions.nqp

[13:00] <Geth> ¦ rakudo/nom: Stop hllizing and sinking the result of .+, .* and .= method calls

[13:00] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2b8115f0e9

[13:01] <Geth> ¦ roast: da9a389b28 | pmurias++ | S04-statements/sink.t

[13:01] <Geth> ¦ roast: Test that .= in both forms doesn't sink

[13:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/da9a389b28

[13:01] <perlpilot> AlexDaniel: read the bottom of http://design.perl6.org/ for more clues.

[13:01] <Geth> ¦ rakudo/atomics: 6eb8f7e77c | (Jonathan Worthington)++ | src/core/Atomic.pm

[13:01] <Geth> ¦ rakudo/atomics: Implement loop form of cas for integers.

[13:01] <Geth> ¦ rakudo/atomics: review: https://github.com/rakudo/rakudo/commit/6eb8f7e77c

[13:01] <AlexDaniel> ah, I see

[13:01] <perlpilot> maybe the cron job is broken?

[13:02] <pmurias> jnthn: why are the Atomic operations methods on the type object?

[13:03] <Geth> ¦ roast: 06bdc9b1ea | (Jonathan Worthington)++ | S17-lowlevel/cas-loop-int.t

[13:03] <Geth> ¦ roast: Add cas loop form tests on lexical integers.

[13:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/06bdc9b1ea

[13:03] <AlexDaniel> I don't have access to any of this stuff, so can't really do anything

[13:05] <perlpilot> I have sudo, but I can't easily login from work

[13:11] <jnthn> pmurias: What else would they be on? :)

[13:12] <jnthn> It's just a way to namespace/group them in the interim so I don't have to figure out function names for them :)

[13:12] <pmurias> ok

[13:16] <Zoffix> AlexDaniel: maybe in an hour. I'm occupied at work ATM

[13:25] <Zoffix> Ok. Back.

[13:27] <Zoffix> upgrade Perl is missing a module

[13:27] <Zoffix> Well, more like "missing" :) CGI.pm

[13:28] <Geth> ¦ rakudo/atomics: 413b5331b0 | (Jonathan Worthington)++ | src/core/Atomic.pm

[13:28] <Geth> ¦ rakudo/atomics: Add cas operation on integers.

[13:28] <Geth> ¦ rakudo/atomics: review: https://github.com/rakudo/rakudo/commit/413b5331b0

[14:03] <Zoffix> AlexDaniel: There. Fixed forever: http://design.perl6.org/S01.html

[14:04] <AlexDaniel> Zoffix: thanks!

[15:17] <ugexe> m: my $x but Buf;

[15:17] <camelia> rakudo-moar 2b8115: OUTPUT: «P6opaque: missing attribute protocol in compose of Any+{Buf}?  in block <unit> at <tmp> line 1??»

[15:17] <ugexe> m: my $x = 1 but Buf;

[15:17] <camelia> rakudo-moar 2b8115: OUTPUT: «Cannot have attributes on an array representation?  in block <unit> at <tmp> line 1??»

[15:17] <ugexe> two LTAs

[15:18] <jnthn> Probably should detect roles that demand a specific representation and just complain earlier

[15:41] <Geth> ¦ rakudo/js: cbde083fa2 | pmurias++ | src/vm/js/perl6-runtime/runtime.js

[15:41] <Geth> ¦ rakudo/js: [js] When the scalar has a Mu type don't type check when putting stuff into it

[15:41] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/cbde083fa2

[15:41] <Geth> ¦ rakudo/js: 8c888adf92 | pmurias++ | 2 files

[15:41] <Geth> ¦ rakudo/js: [js] Stop nqp::p6sink from decontainerizing

[15:41] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/8c888adf92

[15:43] <stmuk> anyone here use rakudobrew on windows?

[15:48] * TimToady slept an amazingly large subset of the last twelve hourse...

[15:48] <TimToady> not to mention hours

[15:52] <Zoffix> No, I just build manually on windows.

[15:52] <Zoffix> Speaking of which... Just tried to install rakudo on co-workers Win32-bit box... Crashed and burned on takeoff :(

[15:53] <Zoffix> (I didn't really look at the error, something about failing to make paths)

[15:53] <stmuk> different drive to C:?

[15:53] <stmuk> </guess>

[15:53] <Zoffix> I was installing to C:\rakudo.

[15:54] <Zoffix> cloning the repo there and running...

[15:54] <Zoffix> huggable: rakudo win

[15:54] <huggable> Zoffix, perl Configure.pl --gen-moar --gen-nqp --backends=moar & gmake & gmake test & gmake install

[15:54] <Zoffix> ^ that

[15:54] <ugexe> well you might need to use the Visual Studio Command Tools cmd

[15:54] <ugexe> and use nmake

[15:54] <ugexe> thats how I build on windows anyway

[15:54] <Zoffix> The above works fine on my home box.

[15:55] <ugexe> your home box likely has its PATH set differently than your friend

[15:55] <Zoffix> Ah

[15:56] * lizmat is glad TimToady was able to get such a large subset

[15:56] <ugexe> some cmd prompts carry different PATHs with them

[15:56] <Zoffix> Well, it was mostly a "maybe we'll need it later" install. Gonna debug it when/if we'll actually need it :)

[15:56] <ugexe> e.g. Visual Studio Command Tools cmd has the visual studio toolchain setup in PATH

[15:57] <Geth> ¦ rakudo/nom: c68762f46a | (Aleks-Daniel Jakimenko-Aleksejev)++ | README.md

[15:57] <Geth> ¦ rakudo/nom: “doc/ChangeLog” ? “docs/ChangeLog”

[15:57] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c68762f46a

[15:59] <stmuk> C:\Program Files\Microsoft SDKs\Windows\v7.1\Bin\SetEnv.cmd" /x64

[15:59] <stmuk> - "

[16:00] <Zoffix> AlexDaniel++ # I'm so glad I don't need to release anything this weekend. Burnt out to ashes and they're doing maintenance in my apartment this week

[16:09] <Geth> ¦ rakudo/atomics: 61e1f4d5f5 | (Jonathan Worthington)++ | 2 files

[16:09] <Geth> ¦ rakudo/atomics: Fix native shaped array index to return l-value.

[16:09] <Geth> ¦ rakudo/atomics:

[16:09] <Geth> ¦ rakudo/atomics: Fixes `my @a[2;2]; @a[1;1]++`.

[16:09] <Geth> ¦ rakudo/atomics: review: https://github.com/rakudo/rakudo/commit/61e1f4d5f5

[16:09] <Geth> ¦ rakudo/atomics: 9d5e929504 | (Jonathan Worthington)++ | t/spectest.data

[16:09] <Geth> ¦ rakudo/atomics: Run spectests for CAS on atomic ints.

[16:09] <Geth> ¦ rakudo/atomics: review: https://github.com/rakudo/rakudo/commit/9d5e929504

[16:09] <Geth> ¦ roast: 06230a444d | (Jonathan Worthington)++ | S17-lowlevel/cas-int.t

[16:09] <Geth> ¦ roast: Add tests for CAS on native integers.

[16:09] <Geth> ¦ roast:

[16:09] <Geth> ¦ roast: Covering all the places a native integer might live.

[16:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/06230a444d

[16:48] <Zoffix> ZofBot: .

[16:48] <ZofBot> Zoffix, html?id=130900 ah, very well

[16:49] <pmurias> is it expected for an installed perl6-m to try to load stuff from a subdirectory of where it's running from?

[16:49] <pmurias> my perl6-m doesn't seem to work when run from a different rakudo checkout

[16:52] <pmurias> if perl6-m is loading random stuff from disk rather it seems like a fairly serious security issue

[16:53] <tadzik> did you 'make install'?

[16:57] <pmurias> my perl6-m is installed by 'make install'

[17:21] <samcv> AlexDaniel, found another ignoremark issue as i was adding more tests into nqp before release :)

[17:21] <AlexDaniel> samcv++

[17:21] <samcv> but we will be good for release

[17:22] <samcv> all our ignoremark tests test for lowercase values

[17:22] <samcv> heh

[17:36] <Geth> ¦ nqp: 72be3bbad4 | (Samantha McVey)++ | tools/build/MOAR_REVISION

[17:36] <Geth> ¦ nqp: Bump MoarVM for ignoremark fixes

[17:36] <Geth> ¦ nqp:

[17:36] <Geth> ¦ nqp: Fix uppercase needles not always matching when using ignoremark

[17:36] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/72be3bbad4

[17:36] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.07-403-g712cff33...2017.07-410-g633cb35a

[17:37] <Geth> ¦ nqp: d03c4023ab | (Samantha McVey)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[17:37] <Geth> ¦ nqp: Add nqp::hasuniprop op to QASTOperationsMAST.nqp

[17:37] <Geth> ¦ nqp:

[17:37] <Geth> ¦ nqp: Op already existed, but make it accessible for development and testing.

[17:37] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d03c4023ab

[17:39] <Geth> ¦ nqp: 6fac0036eb | (Samantha McVey)++ | t/moar/10-eqatim.t

[17:39] <Geth> ¦ nqp: Add tests for nqp::eqatim op on MoarVM

[17:39] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6fac0036eb

[17:42] <samcv> ok it's fixed in nqp master and moar bleed now. will finish when i get back from dentist

[19:27] <Zoffix> NeuralAnomaly: status

[19:27] <NeuralAnomaly> Zoffix, [?] Next release will be in 3 days and 9 hours. Since last release, there are 50 new still-open tickets (3 unreviewed and 2 blockers) and 162 unreviewed commits. See http://perl6.fail/release/stats for details

[19:27] <Zoffix> .in 3d fix xtest on doc

[19:27] <yoleaux> Zoffix: I'll remind you on 18 Aug 2017 19:27Z

[20:53] <[Coke]> Zoffix++ taking onthe releases for so long

[21:00] <samcv> i'm encountering an issue with Test

[21:02] <samcv> here's the file: https://gist.github.com/samcv/e80e88ff1ff8adf6da7beaae4d866337

[21:02] <samcv> when i run it i get a failure, but when i run it manually i get the correct result

[21:03] <samcv> all the things expecting True get the correct result but the one wanting False always gets True

[21:03] <samcv> not ok 7 - so('?' ~~ /:m d /), False — Ignoremark: ? doesn't match d — TOPBAR is not a mark

[21:03] <samcv> so running that manually shows the correct result. but maybe i made a mistake on line 30?

[21:04] <samcv> though when i try using is-deeply, that returns Match.new(list => (), made => Any, pos => 0, hash => Map.new(()), orig => "?", from => 0)

[21:04] <samcv> which evaluates as True even through a stringified version is Bool false

[21:05] <samcv> so maybe that's what's causing it to fail? but it gives the correct result when i run it with so manually

[21:08] <samcv> yeah it seems to always show True... it works fine if the code is typed out and compiled but if it's programmic it acts differently

[21:10] <samcv> oh maybe it's how i'm accessing it? when i assign it to new variables instead of accessig it from the array using [0] and [1] it works

[21:32] <Geth> ¦ rakudo/nom: a3b95749f3 | (Samantha McVey)++ | tools/build/NQP_REVISION

[21:32] <Geth> ¦ rakudo/nom: Bump NQP to get ignoremark fixes

[21:32] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a3b95749f3

[21:32] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.07-37-g63d534d6a...2017.07-40-g6fac0036e

[21:33] <Geth> ¦ roast: 810e218c83 | (Samantha McVey)++ | S05-modifier/ignoremark.t

[21:33] <Geth> ¦ roast: Improve ignoremark tests to check different cases

[21:33] <Geth> ¦ roast:

[21:33] <Geth> ¦ roast: Make sure different cases do *not* match when just ignorecase is

[21:33] <Geth> ¦ roast: supplied.

[21:33] <Geth> ¦ roast:

[21:33] <Geth> ¦ roast: Make a function to automate testing of this.

[21:33] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/810e218c83

[21:34] <MasterDuke> samcv: should that comment say "just ignore*mark*"?

[21:35] <samcv> yes it should  X|

[21:35] <samcv> added a comment on github

[22:11] <Geth> ¦ nqp: 99abffd7f7 | MasterDuke17++ | 2 files

[22:11] <Geth> ¦ nqp: Bump Moar to get coveragecontrol op and map it

[22:11] <Geth> ¦ nqp:

[22:11] <Geth> ¦ nqp: nqp::coveragecontrol allows for turning line-coverage logging on and

[22:11] <Geth> ¦ nqp: off. It is enabled with MVM_COVERAGE_CONTROL=1, which also turns off

[22:11] <Geth> ¦ nqp: de-duping of lines logged. MVM_COVERAGE_CONTROL=2 turns off de-duping,

[22:11] <Geth> ¦ nqp: but doesn't require an nqp::coveragecontrol(1) to start the logging.

[22:12] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/99abffd7f7

[22:40] <travis-ci> NQP build failed. MasterDuke17 'Bump Moar to get coveragecontrol op and map it

[22:40] <travis-ci> https://travis-ci.org/perl6/nqp/builds/264930802 https://github.com/perl6/nqp/compare/6fac0036eb91...99abffd7f74f

[23:12] <[Coke]> I have narrowed down my os x malformed-utf8 issue to: 51b63bf9f0d0594687908f0756774f29cde39c1f in rakudo, which is a bump to nqp, which brought in these commits: https://github.com/MoarVM/MoarVM/compare/2017.05-100-g5ea6aaa...2017.05-115-g369c0c5

[23:30] * TimToady wonders what to do about tests that assume .parse returns Nil on failure rather than Failure...

[23:30] * TimToady has a patch to do the latter, y'see...

[23:34] <TimToady> oh gee, one of the tests assumes it can stringify a Nil...

[23:40] <TimToady> and then there's: is rt81136.parse('abc'), Nil

[23:40] <TimToady> which seems rather overspecific when it's just testing for failure
