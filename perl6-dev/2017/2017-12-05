[03:41] <samcv> .tell pmurias it's <:InBlockName> if you see how it is in roast

[03:41] <yoleaux> samcv: I'll pass your message to pmurias.

[06:07] <Geth> ¦ roast: 3beda20320 | usev6++ | S32-basics/xxKEY.t

[06:07] <Geth> ¦ roast: [jvm] Unfudge now passing tests

[06:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3beda20320

[06:11] <bartolin> lizmat: there was no (new) problem with the jvm build. it regularly fails because 'make test' does not work before 'make install' (RT #132101)

[06:11] <synopsebot> RT#132101 [open]: https://rt.perl.org/Ticket/Display.html?id=132101 [JVM] ‘make test’ does not work before ‘make install’

[08:37] <[Tux]> Rakudo version 2017.11-60-g78aeaf469 - MoarVM version 2017.11-28-gba1fb9542

[08:37] <[Tux]> csv-test-xs-20      0.443 -  0.501

[08:37] <[Tux]> csv-ip5xs           1.105 -  1.160

[08:37] <[Tux]> test-t --race       1.227 -  1.262

[08:37] <[Tux]> test-t              2.954 -  2.955

[08:37] <[Tux]> test               11.701 - 11.703

[08:37] <[Tux]> csv-parser         12.091 - 12.485

[08:37] <[Tux]> csv-ip5xs-20       13.060 - 13.768

[08:37] <[Tux]> test-t-20 --race   18.402 - 19.138

[08:37] <[Tux]> test-t-20          53.423 - 54.464

[08:45] <[Tux]> second run test-t              2.994 -  3.048

[10:50] <scovit> Zoffix: I do not understand the logic behind 6c299bf9f8

[10:55] <scovit> to me it seems that the school kid algorithm already reduces the numbers, so I wouldn't do it later again when we possibly already overflowed

[10:55] <scovit> sub DIVIDE_NUMBERS seems like an hack to me

[10:56] <Geth> ¦ rakudo: 47f23fc687 | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[10:56] <Geth> ¦ rakudo: Use IterationBuffer to store let/temp data

[10:56] <Geth> ¦ rakudo:

[10:56] <Geth> ¦ rakudo: - instead of nqp::list, which HLLizes

[10:56] <Geth> ¦ rakudo: - allows for simplification of the let/temp logic later

[10:56] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/47f23fc687

[11:29] <Zoffix> scovit: the logic is we don't reduce twice, so we gain 40% speed. Ints don't overflow. And DIVIDE numbers also handles Rat->Num conversion.

[11:47] <Zoffix> scovit: aye, if the denominators were proper uints they'd overflow, but the same was the case before my patch. They're currently just Ints tho and I expect this issue to be handled when the denominator is made a proper uint64

[11:47] <Zoffix> Hoping to file for a small grant in 2018 to do all the Rat polishing, unless someone beats me to it.

[11:49] <DrForr> Zoffix: https://gist.github.com/drforr/21d6067a74ab9f5c4f4119f91f3dbd0b Not sure if you can fix it, probably is in the Gist module.

[11:50] <DrForr> Actually it's deeper, down in SSL according to the error. I can view github.com and view the gist.github.com inteface without problems.

[11:50] <Zoffix> then it be in HTTP::UserAgent

[11:51] <Zoffix> or deeper

[11:51] <Geth> ¦ rakudo: 126d7b550c | (Elizabeth Mattijsen)++ | 2 files

[11:51] <Geth> ¦ rakudo: Abstract prefix:<temp|let> logic into R:I, use it

[11:51] <Geth> ¦ rakudo:

[11:51] <Geth> ¦ rakudo: Apart from the name of the temporary value storage, there is really no

[11:51] <Geth> ¦ rakudo: difference between prefix:<temp> and prefix:<let>.  So abstract the logic

[11:51] <Geth> ¦ rakudo: into a Rakude::Internals method and use that, while optimizing the logic

[11:51] <Geth> ¦ rakudo: on the fly.

[11:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/126d7b550c

[11:52] <lizmat> saves about 3.5K on settings.moarvm size

[11:52] <Zoffix> nice

[11:52] <DrForr> Right. I'll yank the code that does the github post and just settle for the MD->HTML conversion.

[11:54] <DrForr> Maybe even add a --output to file option.

[12:19] <Geth> ¦ rakudo: 6fb5c8c89e | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals.pm

[12:19] <Geth> ¦ rakudo: Argh, we need to stub X::Localizer::NoContainer

[12:19] <Geth> ¦ rakudo:

[12:19] <Geth> ¦ rakudo: - now that the temp/let logic lives in R:I

[12:19] <Geth> ¦ rakudo: - also put the exception stubs in alphabetical order for easier maintenance

[12:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6fb5c8c89e

[12:55] <pmurias> samcv: <:ascii> and <:space> are in roast (they seem to have been added as part of a bug report rather than a deliberate addition)

[12:55] <Geth> ¦ rakudo: f6c2e70bbc | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals.pm

[12:55] <Geth> ¦ rakudo: Fix typo in comment, MasterDuke17++

[12:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f6c2e70bbc

[12:57] <moritz> pmurias: <:ascii> also appears in S05

[13:49] <pmurias> moritz: in the <:!Blk<ASCII>> form

[13:53] <pmurias> moar horrid property handling "logic" seems to be creeping into roast

[13:54] <Geth> ¦ rakudo: 6601da5c62 | (Elizabeth Mattijsen)++ | src/core/Hash.pm

[13:54] <Geth> ¦ rakudo: Streamline Hash.AT-KEY, jnthn++ for the pointer

[13:54] <Geth> ¦ rakudo:

[13:54] <Geth> ¦ rakudo: With improved inlining we have now, it makes sense to take the capture

[13:54] <Geth> ¦ rakudo: taking logic out of AT-KEY, so that it can be inlined for the most common

[13:54] <Geth> ¦ rakudo: case.  Capture taking/$!whence setting is now done in a private method

[13:54] <Geth> ¦ rakudo: !AT-KEY-WHENCE, which also takes care of the case where there was no

[13:54] <Geth> ¦ rakudo: $!storage allocated yet.  Makes Hash.AT-KEY about 1.7x faster for the common

[13:54] <Geth> ¦ rakudo: case of looking up an existing Str:D key.

[13:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6601da5c62

[14:29] <|Tux|> Rakudo version 2017.11-65-g6601da5c6 - MoarVM version 2017.11-28-gba1fb9542

[14:29] <|Tux|> csv-test-xs-20      0.434 -  0.457

[14:29] <|Tux|> csv-ip5xs           1.065 -  1.067

[14:29] <|Tux|> test-t --race       1.146 -  1.236

[14:29] <|Tux|> test-t              2.882 -  2.889

[14:29] <|Tux|> test               11.436 - 11.477

[14:29] <|Tux|> csv-parser         11.871 - 12.021

[14:29] <|Tux|> csv-ip5xs-20       12.459 - 12.735

[14:29] <|Tux|> test-t-20 --race   17.433 - 17.476

[14:29] <|Tux|> test-t-20          51.779 - 53.072

[14:40] <lizmat> buggable: speed 20 :4 test-t

[14:40] <buggable> lizmat,  ▃▁▃             ▄   dates: 2017-12-01–2017-12-05

[14:40] <buggable> lizmat, ▇███          ▁▂▅█   range: 2.809s–3.048s

[14:40] <buggable> lizmat, ████  ▇▄▄▆█▅  ████▂▁ speed: 2% faster (widths: 9/3)

[14:40] <buggable> lizmat, ████▁███████▆▆██████

[14:50] <Geth> ¦ rakudo: fe8312b7ed | (Elizabeth Mattijsen)++ | 2 files

[14:50] <Geth> ¦ rakudo: Streamline Array.Slip.AT-POS like Hash.AT-KEY

[14:50] <Geth> ¦ rakudo:

[14:50] <Geth> ¦ rakudo: - also use the same postfix for the private helper method

[14:50] <Geth> ¦ rakudo: - WHENCE is an implementation detail, CONTAINER is what it gives

[14:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fe8312b7ed

[14:52] <wander> How can I print symbol table when exec nqp code?

[14:52] <wander> I can print AST by using `--target=parse`, is there something similar on symbol table?

[14:53] <timotimo> i don't think there is, but if you build the moarvm file, you can then moar --dump the resulting file and that has variable names in it

[14:57] <timotimo> though the --target=ast also has definitions in it, i recall now

[15:07] <wander> emmm...seems QAST is right, where are actions of QAST?

[15:10] <pmurias> language design question: do we want <alpha> to match the unicode property alphabetic or work like Letter?

[15:11] <pmurias> wander: you mean what the QAST nodes mean?

[15:12] <timotimo> Actions is where all the QAST nodes get created

[15:13] <timotimo> QASTCompilerMAST turns the QAST into MAST, which is what moarvm consumes and turns into moar bytecode

[15:13] <ilmari> what does QAST stand for? Quite Abstract Syntax Tree?

[15:14] <timotimo> PAST was Parrot AST, QAST is just P+1 AST

[15:14] <timotimo> because Q comes after P

[15:15] <tadzik> Qarrot, pronounced "Carrot"

[15:15] * tadzik hides

[15:15] <ilmari> NQPAST was too long?

[15:15] <timotimo> very good

[15:15] <wander> ok, I use `--target=mast` to generate MAST, let me take a look at it

[15:21] <wander> MAST cannot be executed by moar directly, can it? I got "Unhandled exception: Bytecode stream corrupt (missing magic string)", how to deal with it

[15:21] <timotimo> yeah, mast is a text format

[15:21] <timotimo> you have to --target=mbc to get what moar eats

[15:22] <timotimo> oh, i know why you thought mast is what you needed

[15:23] <timotimo> when you --target=mast, you get a text dump (so humans can understand what's going on (even though it's very hard to read)) but what moar actually gets for the next stage is the objects that were dumped; we don't have a parser for the text format, and there's things missing in the text format that are essential to compilation

[15:26] <jnthn> Usually to look at the bytecode I dod --target=mbc --output=x.moarvm and then moar --dump x.moarvm

[15:26] <jnthn> *do

[15:27] <wander> this time I got "Cannot dump this object; no dump method", anything missed?

[15:28] <wander> command: "./nqp --target=mbc main.nqp --output=main.moarvm"

[15:28] <timotimo> the --foo args need to go before the main.nqp

[15:28] <timotimo> otherwise you'll be passing --output to the program in main.nqp

[15:30] <wander> it works :-)

[15:31] <wander> timotimo jnthn: thank you very much

[15:31] <timotimo> you're welcome

[15:34] <wander> it looks even the dump version is more readable to me

[15:35] <timotimo> i've experienced in the past that the output from --dump was cut off; redirecting to a file or through less usually helps in that case

[15:35] <timotimo> perhaps that's fixed now that we threw out libuv for stdout and stderr

[15:52] <Geth> ¦ rakudo: af29a227c8 | (Elizabeth Mattijsen)++ | src/core/Array.pm

[15:52] <Geth> ¦ rakudo: Streamline Array.AT-POS for better inlineability

[15:52] <Geth> ¦ rakudo:

[15:52] <Geth> ¦ rakudo: - seems to make Array.AT-POS about 1.6x faster on existing elements

[15:52] <Geth> ¦ rakudo: - hardly measurable slowdown on non-existing elements

[15:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/af29a227c8

[15:53] <lizmat> this should also be visible in test-t

[15:58] <timotimo> nice

[16:37] <wander> timotimo: can I generate mbc by dumped code? I'm hacking perl6/nqp#332 and find some questionable lines in the dumped code, I want to modify and exec it to see if my assumption is correct.

[16:37] <synopsebot> NQP#332 [open]: https://github.com/perl6/nqp/issues/332 [Moar] Bug in || on Moar

[16:38] <tbrowder> .ask AlexDaniel what do you think of my last comment on last Rakudo PR-

[16:38] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[16:38] <timotimo> you can create MAST manually and compile that to mbc

[16:39] <timotimo> but it's very difficult to change mbc once it's in file form

[16:45] <tbrowder> .ask AlexDaniel PR? I am getting close to a good solution for the table config key values but I think the last PR is a good interim solution.  Note also the previous PR must also be merged to get the new tests to work.  So I’m respectfully requesting merge of PR #1287 and PR #1291.

[16:45] <yoleaux> tbrowder: I'll pass your message to AlexDaniel.

[16:46] <wander> ok now i have a file includes MAST that's modified (https://gist.github.com/W4anD0eR96/c773390e34d415220f80e98eb9173f3a)

[16:46] <wander> which command should be taken to compile it to mbc

[16:46] <timotimo> we can't go from the text dump format to working mbc, you'll have to hook into the compiler and force it to change what it passes on, i'm afraid

[16:47] <timotimo> i realize that's damn tricky :(

[16:47] <lizmat> dinner&

[16:48] <wander> what is "hook into the compiler" (sorry for so many trivial questions)?

[16:49] <timotimo> go into QASTCompilerMAST and have it check what's being fed to it and then make the necessary changes to result in the code you actually want

[16:50] <wander> let me try. thank you!

[16:50] <timotimo> if you want to build custom qast and run it, you can do it just like in here: https://github.com/perl6/nqp/blob/master/t/moar/02-qast-references.t

[16:51] <timotimo> i don't think anybody manually created MAST ever since nqp started running on moarvm itself

[16:51] <timotimo> or perhaps someone did and it's easier than i think?

[16:52] <timotimo> also: here comes an extra fun part: if you make changes to the nqp compiler, you'll first compile a whole nqp with a compiler that has your change

[16:52] <timotimo> so if your change is too invasive, it can cause the compiler to misbehave before it even reaches the frame you're trying to change

[16:55] <wander> anyway, I find the bug relevant to issue above occurred after QASTtoMAST, that is, QAST is correct but MAST is wrong

[16:56] <wander> https://gist.github.com/W4anD0eR96/39c1b137b20029683982286910793eff

[18:14] <Geth> ¦ rakudo: 9a2f53250e | (Elizabeth Mattijsen)++ | src/core/List.pm

[18:14] <Geth> ¦ rakudo: Streamline List.AT-POS a bit

[18:14] <Geth> ¦ rakudo:

[18:14] <Geth> ¦ rakudo: - only about 5% improvement on the fast path

[18:14] <Geth> ¦ rakudo: - basically same slow path handling as in Array.AT-POS

[18:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9a2f53250e

[18:54] <timotimo> wander: did you look at where unless gets compiled? it's in QASTOperationsMAST line 689 and following

[18:55] <timotimo> annoyingly, it's one implementation for if, unless, with, and without

[18:55] <wander> yes

[18:55] <wander> maybe it's about $res_reg

[18:56] <timotimo> so the bug is that the second-to-last set operation - the one before the label - uses the wrong register as its source?

[18:57] <timotimo> i'm not quite sure why using register 8 there is wrong

[18:58] <wander> before the label?

[18:58] <timotimo> no, why using register 7 is wrong i mean

[18:58] <wander> yes

[18:59] <timotimo> in the "it should be" version there isn't any mention of local number 7 at all

[18:59] <wander> there should have never been about 7, IMO

[19:00] <wander> the result is loc_8, seems like we lose track on it the use a new reg instead

[19:00] <wander> s/is/is in/

[19:01] <timotimo> oh, what does local number 1 store in this example?

[19:02] <wander> code snip `my int $foo = $bar || 200`, loc_1 keeps the value of $bar

[19:02] <wander> if I remove `int`, the it generates (https://gist.github.com/W4anD0eR96/15f6df2c14aa04f46ec6811b7a278f2a)

[19:03] <wander> which gives correct result

[19:03] <timotimo> perhaps it's an optimization gone wrong

[19:04] <timotimo> i mean attempt to make the code gen smarter for native types

[19:06] <wander> moar's optimizer?

[19:06] <wander> since QAST looks fine

[19:08] <timotimo> no, human optimizer

[19:08] <timotimo> trying to make the if/unless/with/without code better

[19:10] <wander> code in QASTOperationsMAST?

[19:11] <timotimo> yes

[19:12] <wander> I think it might be about what $res_reg is, but I cannot print/note it to see what it is.

[19:13] <wander> got "cannot stringify this"

[19:16] <Geth> ¦ rakudo: c5afc97e30 | (Elizabeth Mattijsen)++ | src/core/Array.pm

[19:16] <Geth> ¦ rakudo: Make Array.ASSIGN-POS about 1.7x faster

[19:16] <Geth> ¦ rakudo:

[19:16] <Geth> ¦ rakudo: - making it inline better would cause slowdown on non-fast paths

[19:16] <Geth> ¦ rakudo: - doesn't increase/reduce number of inlined frames in --profile

[19:16] <Geth> ¦ rakudo: - doesn't slow down slow paths noticeably

[19:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c5afc97e30

[19:17] <timotimo> yeah, it'll be an object of type MAST::Register i expect

[19:17] <timotimo> you find that code under moarvm's repository

[19:17] <timotimo> lib/MAST/Nodes.nqp

[19:18] <timotimo> a MAST::Node has a dump method, for example

[19:18] <timotimo> oh it'll be a MAST::Local probably?

[19:22] <wander> yes, it's a MAST::Local, which also has method dump :)

[19:48] <samcv> i don't think <:ascii> should work..

[19:49] <samcv> i don't see ascii as a property value alias or a property alias. and if we did want an ascii thing we'd want it named <ascii> not <:ascii>

[19:50] <samcv> oops nvm. had case sensitive search on. "ASCII" is an alias for Basic_Latin. so <:InASCII> should work but not <:ascii>

[19:53] <Geth> ¦ roast: 8da27758cc | (Samantha McVey)++ | S05-mass/properties-general.t

[19:53] <Geth> ¦ roast: Use <:InASCII> not <:ascii> for searching for ASCII codepoints

[19:53] <Geth> ¦ roast:

[19:53] <Geth> ¦ roast: ASCII is an alias for Block Basic_Latin. Bare ascii is not specced,

[19:53] <Geth> ¦ roast: although it presently works in MoarVM.

[19:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8da27758cc

[19:56] <samcv> also i'm not sure what happens for properties that start with "In" since there are some

[19:57] <samcv> currently moarvm doesn't have any of those in the database. but not sure if it was a great idea to preface blocks with "In" since "In" can occur in actual properterty names

[19:58] <samcv> <:Indic_Positional_Category> will it try to check if Block=dic_Positional_Category ?

[19:58] <samcv> or well it check if the character has a non-default value for Indic_Positional_Category. hm

[19:59] <timotimo> hm, time for longest token matching to shine?

[19:59] <timotimo> though that'd have to query moarvm for "does this exist?"

[19:59] <samcv> yeah

[19:59] <timotimo> we have that op, don't we?

[19:59] <samcv> yeah

[19:59] <samcv> if the pvalue returns 0 it doesn't exist

[20:06] <Geth> ¦ rakudo: a974de9ba6 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[20:06] <Geth> ¦ rakudo: Make R:It:ReifiedArray 15% to 30% faster

[20:06] <Geth> ¦ rakudo:

[20:06] <Geth> ¦ rakudo: - make sure pull-one is as simple as possible

[20:06] <Geth> ¦ rakudo: - add a !hole method for handling holes in $!reified

[20:06] <Geth> ¦ rakudo: - make push-all also use !hole method

[20:06] <Geth> ¦ rakudo: - use lexical $i in push-all for slighly faster performance

[20:06] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a974de9ba6

[20:17] <jnthn> lizmat++ # I see speedups :)

[20:17] <lizmat> jnthn: you mean in code, or just in commit messages ?  :-)

[20:17] <timotimo> whoa

[20:17] * lizmat hopes someone can verify

[20:18] <timotimo> faster iteration over all reified arrays ought to be really nice for a big chunk of all code out there

[20:23] <jnthn> lizmat: in commit messages :)

[20:23] <jnthn> I'm presuming your measurements are accurate

[20:23] <jnthn> I can try them tomorrow on a couple of benchmarks I have at the office though :)

[20:24] * lizmat hopes for good news then  :-)

[20:24] <lizmat> I have thrown out several optimizing attempts because they didn't  :-(

[21:46] <[Tux]> Rakudo version 2017.11-70-ga974de9ba - MoarVM version 2017.11-28-gba1fb9542

[21:46] <[Tux]> csv-test-xs-20      0.424 -  0.434

[21:46] <[Tux]> csv-ip5xs           1.056 -  1.077

[21:47] <[Tux]> test-t --race       1.238 -  1.265

[21:47] <[Tux]> test-t              2.825 -  2.854

[21:47] <[Tux]> test               11.577 - 11.758

[21:47] <[Tux]> csv-parser         11.928 - 12.397

[21:47] <[Tux]> csv-ip5xs-20       12.927 - 12.996

[21:47] <[Tux]> test-t-20 --race   17.546 - 18.069

[21:47] <[Tux]> test-t-20          51.212 - 52.593

[21:48] <lizmat> noise  :-(  :-)

[21:51] <Geth> ¦ rakudo: ae02bc2994 | (Elizabeth Mattijsen)++ | src/core/Array.pm

[21:51] <Geth> ¦ rakudo: Streamline Array.iterator.push-until-lazy a bit

[21:51] <Geth> ¦ rakudo:

[21:51] <Geth> ¦ rakudo: - pretty hard to qualify how much this will save

[21:51] <Geth> ¦ rakudo: - but appears to have a positive effect on make spectest

[21:51] <Geth> ¦ rakudo: - uses lexicals in loops instead of attribute

[21:51] <Geth> ¦ rakudo: - at least, no capture inside it anymore, which would inhibit inlining

[21:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ae02bc2994

[21:53] <lizmat> and this concludes my hacking for today&

[22:40] <samcv> m: say 171.chr ~~ /<:Initial_Punctuation>/

[22:40] <camelia> rakudo-moar ae02bc299: OUTPUT: «｢«｣␤»

[22:40] <samcv> at least this seems to work even though it starts with 'In' so that's good

[23:02] <AlexDaniel> tbrowder: I'm a bit too busy this week. I'll take a look when I can, but please don't hold your breath for it

[23:02] <AlexDaniel> maybe someone else can take a look

[23:04] <tbrowder> ok, but first i’ll keep improving the code—almost there! thnx
