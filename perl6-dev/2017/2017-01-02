[00:17] <dalek> roast/6.c-errata: a80962e | (Zoffix Znet)++ | S03-operators/mix.t:

[00:17] <dalek> roast/6.c-errata: Restructure file to avoid triggering SPESH bug

[00:17] <dalek> roast/6.c-errata:

[00:17] <dalek> roast/6.c-errata: This commit makes no changes to tests themselves. It merely

[00:17] <dalek> roast/6.c-errata: avoids using one set of variables for the entire test file, and

[00:17] <dalek> roast/6.c-errata: insted chops it up into smaller chunks, with (duplicated) sets of

[00:17] <dalek> roast/6.c-errata: those variables in each chunk.

[00:17] <dalek> roast/6.c-errata:

[00:17] <dalek> roast/6.c-errata: This is needed after the merge of the set operator work[^1], as

[00:17] <dalek> roast/6.c-errata: it triggers a SPESH bug[^2] in MoarVM that crashes the test run.

[00:17] <dalek> roast/6.c-errata:

[00:17] <dalek> roast/6.c-errata: [1] https://github.com/rakudo/rakudo/pull/934

[00:18] <notviki> https://github.com/perl6/roast/commit/a80962ef5a75325b34a7a8b7e21fb89f064de278

[00:19] <notviki> It looks scarier than it is. The code was just indented.

[00:19] <notviki> (I was hoping github would show that; alas)

[00:31] <samcv> scarier?

[00:31] <samcv> oh

[00:31] <samcv> you mean less line changes that it looks

[00:31] <samcv> git's diff has much to be desired

[00:36] <dalek> rakudo/nom: cb9ec03 | (Douglas Jenkins)++ | src/core/IO/Socket/INET.pm:

[00:36] <dalek> rakudo/nom: IO::Socket::INET. Fixed bug where IPv6 URIs were not parsed correctly when passed as host:port (E.g. "[::1]:3000"). Split new method into a multi method with type constraints. Now fails when invalid family or port values are passed. Added constants for MIN and MAX port values

[00:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cb9ec035d9

[00:36] <dalek> rakudo/nom: 64de09a | (Douglas Jenkins)++ | src/core/IO/Socket/INET.pm:

[00:36] <dalek> rakudo/nom: Moved host-port splits to own function. Replaced optional new args with %rest parameter. Changed type constraints on port/family to Int(Cool).

[00:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/64de09adc8

[00:36] <dalek> rakudo/nom: df20d8b | (Douglas Jenkins)++ | src/core/IO/Socket/INET.pm:

[00:36] <dalek> rakudo/nom: fixed bugs with uri parsing

[00:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/df20d8ba48

[00:36] <dalek> rakudo/nom: fbd061b | (Douglas Jenkins)++ | src/core/IO/Socket/INET.pm:

[00:36] <dalek> rakudo/nom: Removed ":D" from Str type on :$localhost. :$localhost is no longer "!" required. Checks if :$localhost is undefined, and if so doesn`t try to split it.

[00:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fbd061bcd0

[00:38] <samcv> well i'm off to continue working on full unicode 9.0 support for Moar :)

[00:50] <samcv> WOOO GOT IT WORKING AGAIN

[00:50] <dalek> rakudo/nom: 37941d9 | (Zoffix Znet)++ | src/core/IO/Socket/INET.pm:

[00:50] <dalek> rakudo/nom: Use consistent code style

[00:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/37941d95a7

[00:50] <samcv> prepending working now :)

[01:10] <notviki> FWIW, I checked all modules in ecosystem and all provide a port to IO::Socket::INET, so won't be affected by the removal of iffy default.

[02:01] <samcv> wooo notviki  i am down to only 7 failed unicode graphpme tests!

[02:01] <notviki> sweet

[02:02] * samcv does a dance

[02:03] <samcv> for some reason Extend + letters or a space finds 2 chars though. but using numbers works fine. have to see why the hell

[02:04] <samcv> other than that just failing ones that will require us to save state and track more than 2 characters

[02:04] <samcv> maybe some special emoji path idk

[02:04] <samcv> but i don't think emoji use Extend characters or if it's just part of the test?

[02:04] <samcv> hmm

[02:40] <samcv> i will have to rework the whole thing to be able to switch modes between by character and by sequences

[02:51] <samcv> i think for now i'm just going to save some state iterating over the codepoints or something. have different return values for prepend or extend vs otherwise

[03:04] <samcv> that should actually speed things up a lot. since atm if we seen an extending mark we backtrack to the previous character and 'redo it'

[03:05] <samcv> wait actually may not fix that specific thing at the moment but should allow us to more quickly know without checking properties if we need to extend or not

[05:31] <samcv> notviki, are there any failing tests right now?

[05:32] <samcv> i'm testing my Even_Moar_Unicode_9.0 branch right now that makes much bigger changes so we can pass the other 7. and need to see which were'nt caused by me breaking things

[05:55] <samcv> looks like only two failing atm on moar master. will probably implement all of unicode 9.0 then fix the problems it's having on ENV things

[05:59] <samcv> woooooooooo down to only 3 failing tests :)

[05:59] <samcv> (for unicode grapheme breakup)

[07:49] <nine_web> m: say "'I'm still alive"

[07:49] <camelia> rakudo-moar 37941d: OUTPUT¬´'I'm still alive‚ê§¬ª

[07:49] <nine_web> darn...looks like "only" ssh is broken

[07:52] <samcv> nine_web, you know MoarVM right https://github.com/samcv/MoarVM/commit/86cafe43aa35f7bbea6990b46321a40667d05738

[07:52] <samcv> can you tell me why this made MoarVM randomly crash before starting

[07:53] <samcv> Unhandled exception: should eventually be unreachable; is what I get. and can't gdb cause no stack

[07:56] <nine_web> samcv: wow, that doesn't make any sense

[07:56] <samcv> yeah

[07:57] <samcv> i made WAY more changes the commit before

[07:57] <nine_web> samcv: have you tried without the fprintfs?

[07:57] <samcv> and i've done make clean then make again

[07:57] <samcv> yep

[07:57] <samcv> i removed all of them in commits after it

[07:59] <samcv> gonna run git bisect anyway just because i have no clue wtf

[08:01] <nine_web> samcv: I see no breakage here after compiling that commit?

[08:01] <samcv> really?

[08:02] <nine_web> oh wait...now I get one

[08:02] <samcv> :3

[08:03] <nine_web> BUT I did manage to get a backtrace: https://gist.github.com/niner/c223dcf3c559f57a274c559528a23089

[08:04] <samcv> git bisect says 86cafe43aa35f7bbea6990b46321a40667d05738  Implement breaking on the 3rd regional indicator seen is the bad commit

[08:04] <samcv> nice @backtrace

[08:04] <samcv> weird but i don't think it's bad or maybe it is. probably

[08:04] <samcv> oh well. i have backtrace

[08:05] <nine_web> My suspicion is that you broke the short circuiting in the if, causing it to run should_break when it didn't before. And this time on data it cannot cope with?

[08:05] <samcv> maybe

[08:05] <samcv> maybe it's is_hangul returning weird values? idk i always return proper values

[08:06] <samcv> i didn't write is_hangul though

[08:09] <nine_web> Yeah, nqp builds successfully with: https://gist.github.com/niner/711ce294403778bf0f01bcd51b3f5861

[08:10] <nine_web> But of course, I have no idea if this would break your algorithm or not :)

[08:11] <[Tux]> This is Rakudo version 2016.12-180-g37941d95a built on MoarVM version 2016.12-35-g293bda71

[08:11] <[Tux]> csv-ip5xs        3.136

[08:11] <[Tux]> test            13.218

[08:11] <[Tux]> test-t           5.300

[08:11] <[Tux]> csv-parser      14.124

[08:11] <samcv> hm

[08:11] <samcv> yeah nqp is fine

[08:12] <samcv> nine_web, what happens if you then build rakudo

[08:13] <nine_web> builds and tests fine. Only test failing is one that gets confused by the debug output on STDERR

[08:13] <samcv> rakudo builds fine?

[08:13] <samcv> or nqp?

[08:13] <nine_web> yes

[08:13] <samcv> which one

[08:13] <samcv> rakudo?

[08:14] <nine_web> rakudo

[08:14] <samcv> which commit are you on?

[08:14] <nine_web> 19df3584e68269f719bcc039c9c41d0f9ca4b793

[08:15] <samcv> i mean on my branch though

[08:15] <samcv> that's not a commit i have

[08:16] <nine_web> Ah, MoarVM 86cafe43aa35f7bbea6990b46321a40667d05738

[08:17] <samcv> ah kk

[08:17] <samcv> so you still got errors on it though? but could build rakudo?

[08:17] <samcv> i'm getting crashes trying to build nqp

[08:24] <samcv> that backtrace though MVM_codepoint_to_row_index seems like it's breaking because the row doesn't exist

[08:24] <samcv> but not sure why it would do that

[08:25] <samcv> gonna try breaking up that commit into smaller pieces then bisecting again

[08:28] <samcv> hmm nine_web it seems to be breaking due to should_break_mode = should_break(tc, n->buffer[pos], n->buffer[next_pos], should_break_mode);

[08:28] <samcv> and then checking should_break_mode instead of the return value of the function

[08:28] <nine> samcv: with my patch, MoarVM, nqp and rakudo build just fine even on MoarVM commit 321b8f3bc3d2010593cb8545d0be89e143419821

[08:29] <samcv> which project is that commit for

[08:29] <samcv> or patch

[08:30] <nine> This one: https://gist.github.com/niner/711ce294403778bf0f01bcd51b3f5861

[08:30] <nine> MoarVM commit 321b8f3bc3d2010593cb8545d0be89e143419821 is Even_Moar_Unicode_9.0

[08:33] <samcv> woo!!!

[08:33] <samcv> awesome

[08:33] <samcv> applied it to the head that passes 100% tests

[08:38] <samcv> nine, also similarly this could maybe be causing problems too: https://github.com/samcv/MoarVM/commit/29faba81011d09fb09fe67406968019b1dd60265

[08:38] <samcv> cause i was getting some spec failurs

[08:38] <samcv> though maybe not because i use another function to convert back or something? idfk

[08:47] <samcv> so far everything is passing tho!!! üëç

[08:48] <samcv> oop no now getting some failures :( spoke too soon

[08:49] <samcv> doesn't even run t/spec/S05-substitution/subst.t

[08:49] <samcv> ===SORRY!=== Normalization: illegal call to get grapheme

[08:58] <samcv> not getting any backtraces there either

[08:58] <samcv> gonna try changing kernels or something

[09:03] <samcv> brb for reboot

[09:08] <arnsholt> samcv: If you're dealing with guts, --ll-exception is often quite informative

[09:11] <samcv> arnsholt, as an option for what?

[09:11] <samcv> gcc? moar?

[09:12] <samcv> if i do perl6-gdb-m --ll-exception it really doesn't tell me where in moarvm the issue is

[09:14] <nine> samcv: break MVM_exception_throw_adhoc before run in gdb

[09:14] <samcv> nice :)

[09:15] <samcv> ah crashes in MVM_unicode_normalizer_get_grapheme

[09:15] <samcv> figures. i was worried about that before i remember

[09:21] <samcv> ah weird. gcc didn't fail here compiling

[09:21] <samcv> even though it tries to pass one less argument

[09:22] <samcv> yeah that would give it negative values and thinsgs :)

[09:22] <samcv> well MVM_get_ready_status returns the 'old' expected result from MVM_unicode_normalizer_process_codepoint_to_grapheme

[09:23] <samcv> which only had 0 or positive, and I use negative to act as 'no, and save this state for the next char'

[09:24] <arnsholt> samcv: It's a rakudo option

[09:24] <samcv> i wonder if unicode 10.0 draft has a test yet, though i could just try random ZWJ sequences

[09:25] <arnsholt> But yeah, if it's Moar-level guts, what nine++ said

[09:26] <samcv> gonna grep and make sure no other places it didn't typecheck at :\

[09:30] <samcv> nice! passed some tests that totally crashed it

[11:58] <lizmat> goo *, #perl6-dev!

[11:58] <lizmat> *d

[11:59] <lizmat> m: say "fake news" if True but False; # my hope for this year

[11:59] <camelia> rakudo-moar 37941d: ( no output )

[12:21] <samcv> what True fake news but false?

[12:23] <samcv> m: say "fake news" if False but True;

[12:23] <camelia> rakudo-moar 37941d: OUTPUT¬´fake news‚ê§¬ª

[12:23] <samcv> isn't if True but False just misleading news?

[12:24] <lizmat> I guess it's all a matter perspective

[12:24] <lizmat> :-)

[12:25] <DrForr> liz - Outline for FOSDEM sen.

[12:25] <psch> ...in contrast to an energy perspective :)

[12:25] <DrForr> psch: It's all interchangeable.

[12:25] <samcv> idk

[12:26] <dalek> nqp: e5ef8f5 | (Pawel Murias)++ | src/vm/js/Operations.nqp:

[12:26] <dalek> nqp: [js] Fix the return type of the nqp::setinputlinesep and nqp::setinputlineseps ops.

[12:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e5ef8f5306

[12:26] <dalek> nqp: 2d84e4d | (Pawel Murias)++ | src/vm/js/Compiler.nqp:

[12:26] <dalek> nqp: [js] Tweak the NYI placeholder.

[12:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2d84e4d7a1

[12:26] <dalek> nqp: 9149926 | (Pawel Murias)++ | src/vm/js/Operations.nqp:

[12:26] <dalek> nqp: [js] Add support for the nqp::p6return op in rakudo-js.

[12:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/914992632b

[12:26] <dalek> nqp: 44aed3c | (Pawel Murias)++ | src/vm/js/ (2 files):

[12:26] <dalek> nqp: [js] Stub nqp::backtrace.

[12:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/44aed3ca3a

[12:26] <dalek> nqp: 9f40d1c | (Pawel Murias)++ | src/vm/js/nqp-runtime/co (2 files):

[12:26] <dalek> nqp: [js] Fix nqp::isrwcont.

[14:10] <notviki> samcv: there aren't any failing tests, but you need bleed perl6 for passing bleed roast, because often a bugfix is acompanied by the test for it.

[14:10] <samcv> yeah was a while since i said that. :) thanks tho

[14:12] <stmuk> http://blogs.perl.org/users/steve_mynott/2017/01/rakudo-star-past-present-and-future.html

[14:13] <dalek> roast: ea5c5c0 | dugword++ | S32-io/socket-host-port-split.t:

[14:13] <dalek> roast: Added test for resolved bugfix RT #130474 (#211)

[14:13] <dalek> roast: review: https://github.com/perl6/roast/commit/ea5c5c0d8b

[14:13] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130474

[14:17] <dalek> rakudo/nom: 6ffbbf4 | (Zoffix Znet)++ | t/spectest.data:

[14:17] <dalek> rakudo/nom: Add S32-io/socket-host-port-split.t to list of files to run

[14:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ffbbf4765

[14:18] <dalek> roast: 38a3cf8 | (Zoffix Znet)++ | S32-io/socket-host-port-split.t:

[14:19] <dalek> roast: Add standard header and footer to test file

[14:19] <dalek> roast: review: https://github.com/perl6/roast/commit/38a3cf813e

[14:37] <notviki> NeuralAnomaly: status

[14:37] <NeuralAnomaly> notviki, [‚úò] Next release will be in 2 weeks and 5 days. Since last release, there are 57 new still-open tickets (56 unreviewed and 0 blockers) and 180 unreviewed commits. See http://perl6.fail/release/stats for details

[14:41] <tbrowder> can zef be made the primary installer (i.e., can it replace panda in the whole Rakudo Perl 6 system)?

[14:42] * moritz considers making a Rakudo distribution just like Star, but with zef, and a clearer vision

[14:43] <moritz> the vision part is what's lacking right now

[14:43] <moritz> it might be "only the compiler, and enough to get other modules installed"

[14:44] <notviki> we already have a Rakudo distribution just like Star, but with zef.....

[14:45] <notviki> moritz: http://blogs.perl.org/users/steve_mynott/2017/01/rakudo-star-past-present-and-future.html

[14:47] <arnsholt> I dunno. "Just compiler and zef" might be a good addition to the distribution-space

[14:48] <arnsholt> Kind of a bare minimum distro, but one step up from just the compiler

[14:49] <notviki> Sounds like a good way to even further increase confusion for users.

[14:50] <notviki> Especially when all of this gets package as distro packages

[14:50] <samcv> ^

[14:50] <samcv> +1

[14:50] <samcv> there should be some easy thing for distros to do to package us i think

[14:51] <arnsholt> I guess. OTOH, I think much of the onus for confusion (or lack thereof) in terms of users must fall on the Linux distro packagers

[14:52] <arnsholt> Most notably, they need to be at least moderately clueful about how Perl 6 works in terms of distributions

[14:53] <RabidGravy> yeah it strikes me that they will package all the bits separately anyway

[14:53] <arnsholt> Yep. And different distros have different packaging philosophies

[14:53] <dalek> rakudo/nom: 48e8ccc | samcv++ | src/core/Cool.pm:

[14:53] <dalek> rakudo/nom: uniprop, for Bidi_Mirroring_Glyph return empty string if no BMG

[14:53] <dalek> rakudo/nom:

[14:53] <dalek> rakudo/nom: Before we would return a U+0000 character; returning an empty string is

[14:53] <dalek> rakudo/nom: will evaluate as Falsey, unlike a U+0000 in a string.

[14:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/48e8cccd4d

[14:54] <arnsholt> I'm not sure (Linux) distros having individual packages for different (Perl 6) distros is a terribly useful way to do things

[14:55] <samcv> you mean for rakudo and rakudo star yada yada?

[14:55] <arnsholt> Yeah

[14:56] <samcv> but a blocker for debian was that they had panda, but none of its dependencies

[14:56] <samcv> which was stupid. shouldn't have even put it in the repo then

[14:56] <arnsholt> I think it'd make more sense for distros to package the rakudo compiler, and whatever modules (or not) they want in the base package

[14:56] <arnsholt> And then other modules as separate packages

[14:58] <RabidGravy> totally

[14:59] <RabidGravy> and if for some reason they want to have rakudo star as a package it's just make it some meta thingy that just depends on rakudo and the modules in star

[15:01] <ralisch> They will probably also make the "rakudo" package recommend the "star" package, so if a noob installs just "rakudo" they still get something that works.

[15:02] <tbrowder> whatever, can't zef at least be part of all the packages released by the p6 crew? including the travis one?

[15:04] <samcv> buggable, release

[15:04] <samcv> buggable, help

[15:04] <buggable> samcv, tags | tag SOMETAG | eco | eco Some search term | speed

[15:05] <samcv> ahh

[15:05] <samcv> what do i type

[15:05] <notviki> FWIW, one improvement I'd like to see in Rakudo Star is predictable scheduling of releases. I don't care if it's monthly, every third month, or once a year. When someone asks when's the next release and you can't even ballpark it is annoying.

[15:05] <notviki> stmuk: ^

[15:06] <notviki> And considering it's the only user-facing distro we have, essentially what ends up happing is people asking "when's the next release of Perl 6" and you go "I've no idea"

[15:07] <arnsholt> Yeah, that sounds sensible

[15:07] <samcv> what do we usually do? like a week or two after the last normal release?

[15:07] <arnsholt> But it'll require ata least some additional work to make sure the bits that are packaged actually work properly together

[15:07] <samcv> plus like 'whenever'

[15:07] <notviki> samcv: that's the problem, there's no "usual"

[15:08] <samcv> k

[15:08] <notviki> Some time it's every 3rd month, sometime it's monthly

[15:08] <notviki> samcv: what do you type for what? I think those are the only commands buggable has

[15:08] <samcv> and doesn't change for actual real life reasons?

[15:08] <samcv> oh. when the next release is

[15:09] <notviki> NeuralAnomaly: status

[15:09] <NeuralAnomaly> notviki, [‚úò] Next release will be in 2 weeks and 5 days. Since last release, there are 56 new still-open tickets (55 unreviewed and 0 blockers) and 181 unreviewed commits. See http://perl6.fail/release/stats for details

[15:09] <notviki> samcv: our compiler release date doesn't change for actual real life reasons. If one person can't release it another does the release.

[15:09] <notviki> Same should be for star

[15:10] <samcv> i think should be every 2 months for star

[15:10] <samcv> 1 is too low. 3 seems too high

[15:19] <stmuk> notviki: I'm aiming for .01, .04, .07 & .10

[15:19] <notviki> Noted. Thanks.

[15:20] <notviki> buggable: star releases :is: Estimated Rakudo Star releases for 2017: .01, .04, .07 & .10

[15:20] <notviki> huggable: star releases :is: Estimated Rakudo Star releases for 2017: .01, .04, .07 & .10

[15:20] <huggable> notviki, Added star releases as Estimated Rakudo Star releases for 2017: .01, .04, .07 & .10

[15:20] <stmuk> but if there are BSD or Windows problems with anything large its delayed

[15:21] <samcv> are we shooting for 3 months?

[15:22] <stmuk> thats basically what happened last year (except there would have been two releases delayed)

[15:24] <stmuk> .10 was broken with Windows and .07 with some BSDs

[15:25] <samcv> those version non-stars you mean?

[15:26] <stmuk> both star and non-star

[15:27] <ralisch> Is roast being run on them?

[15:28] <notviki> Not on every OS

[15:29] <notviki> There's a bunch of failures on Windows actually: https://github.com/perl6/roast/issues/197

[15:29] <notviki> Though many are just bogus tests

[15:29] <notviki> (like ones that don't switch the terminal to utf8)

[15:29] <samcv> notviki, RE https://rt.perl.org/Ticket/Display.html?id=130477#ticket-history what file is it in?

[15:30] <notviki> samcv: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Pod.nqp#L131-L146

[15:30] <samcv> so the perl 6 pod is supposed to let you put anything you want there?

[15:31] <notviki> Well, my point in the ticket was that likely it shouldn't

[15:31] <notviki> And we shouldn't parse config with colonpair

[15:33] <samcv> are you only allowed keys and values there? or can it be any code you wish?

[15:34] <notviki> .ask TimToady is Pod supposed to allow arbitrary code to be run? For example, right now I can stuff a BEGIN block into table :config and run anything I want. Is that the idea or should it be just quoted text? RT#130477

[15:34] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130477

[15:34] <yoleaux2> notviki: I'll pass your message to TimToady.

[15:34] <samcv> also variables could be useful there maybe

[15:35] <samcv> not sure about use case atm though

[15:39] <ralisch> If variables are interpolated into POD, the docs would be automatically updated when invariants or constants are changed.

[15:42] <cognominal> Speaking of release, is there a target date for 6.d and feature freeze  date in 6.d ?

[15:42] <notviki> cognominal: nope

[15:43] <samcv> there are proposed things though cognominal https://github.com/perl6/specs/blob/master/v6d.pod

[15:43] <notviki> There's lots of work that needs to be done to make 6.d possible.

[15:43] <samcv> ^

[15:49] <cognominal> I have seen this page. Certainly nothing major in it to justify an incompatible release. I just wanted to know if there was a policy. Probably good to align it with a major feature, possibly unrelated like good JIT to machine code.

[15:50] <stmuk> 6.d is a lang spec and nothing to do with MoarVM

[15:51] <notviki> or Rakudo for that matter

[15:51] <notviki> cognominal: but that list is not the lots of things that need to be done to make 6.d possible. We currently don't have any sane infrastructure to support two language versions and all that needs to be implemented .

[15:52] <notviki> Some relevant docs: https://github.com/rakudo/rakudo/blob/nom/docs/language_versions.md

[15:53] <stmuk> there was a multiple settings branch

[15:54] <notviki> docs site also needs a way to mark stuff as available in language version XYZ

[15:55] <stmuk> and p6doc

[15:56] <cognominal> stmuk : I know but in the past, Larry Wall release a new version of Perl to align with his book. We don¬¥t always suck in marketting

[15:57] <cognominal> *released

[15:57] * notviki is dubious of 6.d happening in 2017

[15:58] <cognominal> I just want to be able to give some kind of answer when asked :)

[15:58] <notviki> Tell them it'll be on Diwalli, but don't tell which year ;)

[15:58] <notviki> We've done this before :P

[15:59] <cognominal> and got a lot of flak until the release

[16:00] <samcv> it'll be done when it's done

[16:00] <samcv> also why do we need 6.d unless we make incompatible changes though

[16:00] <cognominal> on the other hand, it is good to see the page for 6.d so skinny. Either it means people did not got around to it or it means there is no hurry.

[16:02] <samcv> Split the Moar-fudged test files up into the fudged tests (which go in speculation) and the passing ones (which go into 6c).

[16:02] <samcv> what is this implying not to put it in if it doesn't pass rakudo?

[16:02] <stmuk> isn't 6.c complicated enough? :)

[16:02] <samcv> yes

[16:03] <ralisch> There's no hurry because people had a lot of time to think what they wanted in the language already. Just because 6.c was released doesn't mean people will start thinking of things to break already.

[16:03] <jnthn> Note that language versions aren't just - or even primairly - about backwards-incompatible changes, but also about giving people a way to declare in their code that they need a certain new set of things.

[16:04] <cognominal> jnthn++

[16:04] <jnthn> Including the hundreds of small things that got nailed down by bug fixes.

[16:04] <jnthn> (Granted those would we handled by a 6.c.1)

[16:04] <cognominal> but that would be a minor version

[16:06] <dalek> rakudo/nom: 2782836 | samcv++ | docs/language_versions.md:

[16:06] <dalek> rakudo/nom: 2016 is in the past, update the language_versions.md to reflect this

[16:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2782836775

[16:07] <jnthn> And yes, 6.d will also be a marketing opportunity, which will be a consideration for its timing also. :)

[16:07] <samcv> 6.c.1 sounds weird though

[16:08] <samcv> 6.c‚Öí

[16:08] <samcv> why not

[16:08] <notviki> 6.e would be a good marketing opportunity ^_^

[16:08] <AlexDaniel> .oO( let's slap one extra combining character for each minor version )

[16:08] <ralisch> samcv: So, that's what we're gonna do today, bikeshed. Is that it?

[16:09] <samcv> heh

[16:09] <samcv> just make it even crazier. 6.c.¬Ω.‚àã.¬ø

[16:09] <samcv> each one must be from a different type

[16:09] * AlexDaniel wanted to provide a demonstration of that, but then noticed notviki‚Ä¶

[16:10] <notviki> heh

[16:10] <notviki> I have a terminal that doesn't break but I can't get it to look as nice as terminology

[16:10] <ralisch> Which is it?

[16:11] <notviki> gnome terminal and xterm

[16:11] <samcv> why not 6.c.a or something. idk

[16:11] <samcv> or are we only going with minors

[16:11] <ralisch> I'm using solarized in my xterm

[16:11] <samcv> the major will never change though so. idk

[16:11] <notviki> I don't even know how to change the settings in xterm

[16:12] <ralisch> They go into ~/.Xresources

[16:12] <notviki> ain't got that file

[16:12] <cognominal> the good thing it that we can do 6.c.aa if there are more than 26 minors :)

[16:12] <samcv> eww xterm

[16:12] <samcv> bad unicode

[16:12] <notviki> m: say 6.c.aa after 6.c.z

[16:12] <camelia> rakudo-moar 278283: OUTPUT¬´No such method 'c' for invocant of type 'Int'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[16:13] <notviki> m: say v6.c.aa after v6.c.z

[16:13] <camelia> rakudo-moar 278283: OUTPUT¬´False‚ê§¬ª

[16:13] <notviki> cognominal: we can't :)

[16:14] <samcv> m: say 'v6.c.aa' cmp 'v6.c.z'

[16:14] <camelia> rakudo-moar 278283: OUTPUT¬´Less‚ê§¬ª

[16:14] <AlexDaniel> .oO( Perl¬†7 )

[16:14] <AlexDaniel> m: say v6.c.aa cmp v6.c.z

[16:14] <camelia> rakudo-moar 278283: OUTPUT¬´Less‚ê§¬ª

[16:15] <samcv> m: use nqp; say ORDER(nqp::unicmp_s('v6.c.aa','v6.c.z'))

[16:15] <camelia> rakudo-moar 278283: OUTPUT¬´===SORRY!===‚ê§Arg count 2 doesn't equal required operand count 6 for op 'unicmp_s'‚ê§¬ª

[16:15] <cognominal> well, we can  6.c.aa 6.c.ab ... 6.c.z at least

[16:15] <samcv> m: use nqp; say ORDER(nqp::unicmp_s('v6.c.aa','v6.c.z',7,0,0))

[16:15] <camelia> rakudo-moar 278283: OUTPUT¬´Less‚ê§¬ª

[16:15] <timotimo> no matter what you say, we *will* run into that problem at some point :)

[16:15] <ralisch> It also has to fit into what distros expect.

[16:15] <samcv> also what is the problem

[16:15] <samcv> there's lots of numbers

[16:15] <timotimo> we have different meanings for letters in the version and numbers in the version

[16:15] <samcv> why can't we use hex numbers?

[16:16] <notviki> timotimo: which problem?

[16:16] <samcv> or base 32?

[16:16] <samcv> like c comes after 9

[16:16] <samcv> not immediately but it is higher value imo

[16:16] <timotimo> that we run out of the 26 letters :)

[16:16] * notviki doubts

[16:17] <samcv> then add another number

[16:17] <timotimo> maybe we can continue with greek letters :P

[16:17] <notviki> Or at least.... I'll be dead by then

[16:17] <samcv> base 26 numbering system‚Ä¶

[16:17] <timotimo> m: say v6.Œ±

[16:17] <camelia> rakudo-moar 278283: OUTPUT¬´v6.Œ±‚ê§¬ª

[16:17] <samcv> obviously

[16:17] <timotimo> m: say v6.Œ†

[16:17] <camelia> rakudo-moar 278283: OUTPUT¬´v6.Œ†‚ê§¬ª

[16:17] <samcv> naw

[16:18] <ralisch> m: say v6.dÃ¥Ã∏Ã∑ÃπÃ¨Ã≥Ã±Ã∞ÕñÃØÃòÃ™ÃæÃéÕíÃáÕóÕ©Õ™ÕÆÃàÕ¶ÕõÕÇÃÅÃÅÕõÕù

[16:18] <camelia> rakudo-moar 278283: OUTPUT¬´v6.dÃ¥Ã∏Ã∑ÃπÃ¨Ã≥Ã±Ã∞ÕñÃØÃòÃ™ÃæÃéÕíÃáÕóÕ©Õ™ÕÆÃàÕ¶ÕõÕÇÃÅÃÅÕõÕù‚ê§¬ª

[16:18] <samcv> we just go from 6.y to 6.za

[16:18] <samcv> ^ problem solved guys!!!

[16:18] <AlexDaniel> notviki: \o/

[16:18] <ralisch> dpkg agrees 6.c.y < 6.c.za

[16:19] <samcv> yep

[16:19] <AlexDaniel> yea‚Ä¶ interesting solution

[16:19] <AlexDaniel> please don't forget to mention it in 40 years when this may possibly become relevant

[16:19] <samcv> well. it just skips a version

[16:20] <samcv> ok

[16:20] <notviki> :P

[16:20] <samcv> can it be part of 6.d though

[16:20] <samcv> hah

[16:20] <samcv> though i guess doesn't really have to be specified. something something

[16:21] <AlexDaniel> .in 40 years use 6.c.za after 6.c.y

[16:21] <yoleaux2> AlexDaniel: Sorry, I don't understand your duration. Try using units: 1h30m, 1d, etc.

[16:21] <AlexDaniel> .in 14600d use 6.c.za after 6.c.y

[16:21] <yoleaux2> AlexDaniel: I'll remind you on 23 Dec 2056 11:21Z

[16:21] <AlexDaniel> thanks.

[16:21] <samcv> what why 6.c

[16:21] <AlexDaniel> oh, that's right before Christmas!

[16:21] <samcv> implying in 40 years we will still be on 6.c

[16:22] <AlexDaniel> oops

[16:22] <AlexDaniel> .in 14600d use 6.za after 6.y

[16:22] <yoleaux2> AlexDaniel: I'll remind you on 23 Dec 2056 11:22Z

[16:22] <samcv> depressing!

[16:22] <notviki> That's a lot of confidence in my ability to run a server :)

[16:22] <AlexDaniel> notviki: let's distribute it a little bit‚Ä¶

[16:22] <AlexDaniel> ok

[16:22] <notviki> .in 1460000d use 6.za after 6.y

[16:22] <yoleaux2> notviki: I'll remind you on 8 May 6014 12:22Z

[16:22] <AlexDaniel> now THAT is a lot of confidence

[16:23] <AlexDaniel> 2056 is not as unrealistic

[16:23] <samcv> still though

[16:23] <notviki> man, ralisch's stuff messed my terminal I can barely see what I'm typing

[16:24] <AlexDaniel> notviki: :-/ sounds like you need to fix this

[16:24] <notviki> I guess it's a sign that I should abandon IRC and go study the rakudo internals course

[16:24] <notviki> AlexDaniel: it's a pretty beta-looking terminal.

[16:24] <notviki> But it's pretty :)

[16:24] <ralisch> .in 9223372036854775807d use 7 after 6

[16:24] <yoleaux2> ralisch: I'll remind you on 30 Jul 25252734927768571 12:24Z

[16:24] <notviki> Can even use a nyan cat as a selection cursor

[16:27] <notviki> hehe: http://i.imgur.com/KVDkDMA.png

[16:28] <timotimo> that is very important.

[16:29] <ralisch> Sorry for breaking your stuff, I though you were in the better terminal.

[16:31] <dalek> nqp: c782eb7 | samcv++ | tools/build/MOAR_REVISION:

[16:31] <dalek> nqp: Bump MoarVM revision to bring in changes

[16:31] <dalek> nqp:

[16:31] <dalek> nqp: samcv

[16:31] <dalek> nqp:  * Implement Bidi_Mirroring_Glyph as an integer property

[16:31] <dalek> nqp:  * Implement Emoji grapheme breaking and other combined codes as well as

[16:31] <dalek> nqp:    adding Emoji Unicode properties.

[16:31] <dalek> nqp:  * Fix breaking after Prepend characters

[16:31] <dalek> nqp: jnthn

[16:31] <dalek> nqp:  * Re-implement UTF8-C8 streaming decode.

[16:31] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c782eb7cb8

[16:31] <AlexDaniel> ‚ÄúAnd fear not - your background videos will still play across all the Tabs you have‚Äù

[16:32] <AlexDaniel> yea, that's a very interesting terminal emulator‚Ä¶

[16:34] <ralisch> Doesn't have a scrollbar, but can display thumbnails

[16:34] <AlexDaniel> if only it could display combining characters, bwahahahaha

[16:35] <ralisch> xterm also can't but it knows to ignore what it can't handle, instead of blowing up.

[16:36] <dalek> rakudo/nom: 7c8b705 | samcv++ | tools/build/NQP_REVISION:

[16:36] <dalek> rakudo/nom: Bump MoarVM revision to bring in changes

[16:36] <dalek> rakudo/nom:

[16:36] <dalek> rakudo/nom: samcv

[16:36] <dalek> rakudo/nom:  * Implement Bidi_Mirroring_Glyph as an integer property

[16:36] <dalek> rakudo/nom:  * Implement Emoji grapheme breaking and other combined codes as well as

[16:36] <dalek> rakudo/nom:    adding Emoji Unicode properties.

[16:36] <dalek> rakudo/nom:  * Fix breaking after Prepend characters

[16:36] <dalek> rakudo/nom: jnthn

[16:36] <dalek> rakudo/nom:  * Re-implement UTF8-C8 streaming decode.

[16:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7c8b705b33

[16:36] <dalek> roast: b497b7f | jnthn++ | S32-str/ (2 files):

[16:36] <dalek> roast: Move, unfudge, expand UTF8-C8 tests.

[16:36] <dalek> roast:

[16:36] <dalek> roast: Some tests were added in encode.t; they're now in utf8-c8.t so we can

[16:36] <dalek> roast: just fudge the whole file on JVM, which is a tad easier. The failing

[16:36] <dalek> roast: tests for RT #128184 are now unfudged, and some new tests are added to

[16:36] <dalek> roast: provide more complete coverage.

[16:36] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128184

[16:36] <dalek> roast: review: https://github.com/perl6/roast/commit/b497b7f81c

[16:36] <jnthn> \o/

[16:36] <samcv> \o/

[16:40] <ralisch> üôå

[16:44] <samcv> adding an RT for this bug too jnthn

[16:44] <samcv> the space one

[16:45] <ralisch> If you want a teminal recommendation, here's one: rxvt-unicode can display zalgo text.

[16:46] <dalek> roast: 7574838 | samcv++ | S05-mass/properties-general.t:

[16:46] <dalek> roast: TODO failing test, due to a bug in NQP

[16:46] <dalek> roast:

[16:46] <dalek> roast: https://rt.perl.org/Ticket/Display.html?id=130483

[16:46] <dalek> roast: review: https://github.com/perl6/roast/commit/7574838548

[16:46] <samcv> but it doesn't do fall back fonts very well ralisch

[16:47] <samcv> unless you know something I don't. also it doesn't resize the fonts to fit the squares

[16:47] <samcv> it will just silently fail to display if the character is too big to fill the pixel instead of scaling it

[16:47] <samcv> st is sadly the only terminal that does that properly and fallback fonts, but it doesn't even have scrolling without a patch

[16:48] <samcv> so it must not be THAT hard to do. st doesn't have that many lines of code. ugh

[16:48] <samcv> i tried like 12 terminal programs. and that's the only one that resized the characters right AND compose key worked fine

[16:49] <samcv> i mostly use Konsole, and then use st when I need to make sure compose works and text won't get improperly vertically alligned with tall characters

[16:51] <|Tux|> jnthn++; # OHHHHHHHHHHHH! He fixed utf8-c8 OHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH What a way to start 2017

[16:51] <|Tux|> which of course means I have to start working with it

[16:58] <ralisch> Fallback fonts are working fine for me in urxvt, but it does use the system for it, so YMMV. It even did Braile, Runes, Thai for me. Amharic failed even though I have the font for it installed.

[17:02] <notviki> AlexDaniel: oh, and this terminal also freezes once in a while so I think no one is talking, even though it's just the terminal that froze

[17:02] <notviki> BUT IT'S PRETTY!

[17:02] <samcv> yeah looks like i have to not indent

[17:02] <notviki> though I think I saw indented fudges

[17:03] <dalek> rakudo/nom: b183cab | (Fernando Correa de Oliveira)++ | lib/Test.pm6:

[17:03] <dalek> rakudo/nom: Do not backslash every backslash on test description

[17:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b183cabf41

[17:03] <dalek> rakudo/nom: 689a768 | (Zoffix Znet)++ | lib/Test.pm6:

[17:03] <dalek> rakudo/nom: Merge pull request #985 from FCO/nom

[17:03] <dalek> rakudo/nom:

[17:03] <dalek> rakudo/nom: Do not backslash every backslash on test description

[17:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/689a7684d3

[17:04] <dalek> roast: 63af18c | samcv++ | S05-mass/properties-general.t:

[17:04] <dalek> roast: Don't indent the TODO so it actually TODO's

[17:04] <dalek> roast: review: https://github.com/perl6/roast/commit/63af18cbcd

[17:04] <samcv> kk fixed now notviki

[17:06] <samcv> u: { .uniprop-int('Bidi_Mirroring_Glyph') }

[17:06] <unicodable6> samcv, U+0028 LEFT PARENTHESIS [Ps] (()

[17:06] <unicodable6> samcv, U+0029 RIGHT PARENTHESIS [Pe] ())

[17:06] <unicodable6> samcv, U+003C LESS-THAN SIGN [Sm] (<)

[17:06] <unicodable6> samcv, https://gist.github.com/a4b7c885957c12bf76ae5d363499e695

[17:06] <notviki> samcv: still fails and prints "Don't know how to mark statement for TODO!"

[17:06] <samcv> works for me

[17:06] <samcv> err

[17:07] <samcv> maybe need to escape things?

[17:08] <dalek> roast: eebac56 | samcv++ | S05-mass/properties-general.t:

[17:08] <dalek> roast: Make TODO lowercase (todo)

[17:08] <dalek> roast: review: https://github.com/perl6/roast/commit/eebac567b6

[17:08] <samcv> fixed

[17:08] <pmurias> jnthn: do we want the Rakudo setting to depend on arguments with a type constraint being decontainerized?

[17:09] <pmurias> jnthn: there seems to be a few places where the nqp::decont can be removed if so

[17:09] <notviki> TIL git will outright throw out your commit on git pull --rebase if it pulls a commit that makes same changes as your commit :S

[17:10] <samcv> exact same changes? well.

[17:10] <samcv> yeah it does that

[17:10] <samcv> hah

[17:10] <samcv> it can't do it twice

[17:10] <notviki> I expected it to complain

[17:10] <samcv> does it warn you though notviki ?

[17:10] <samcv> i would too

[17:11] <pmurias> throwing out a now noop commits seems reasonable

[17:11] <notviki> nope. Just told me everything's up to date after merge: https://gist.github.com/zoffixznet/df9de12af0803c399920c1f39d96acf4

[17:11] <notviki> pmurias: but the commit messages are entirely different.

[17:12] <samcv> you still have the commit in the log locally?

[17:12] <notviki> no, totally gone

[17:12] <samcv> ah

[17:12] <ralisch> Git can't even see any difference between two commits that do the same thing, it can't even trow a warning.

[17:13] <notviki> samcv: so what's with that failing test anyway?

[17:14] <samcv> before <:space> matched LF=space

[17:14] <samcv> the LF unicode property

[17:14] <samcv> not the space property

[17:14] <notviki> And now?

[17:14] <samcv> now that space == White_Space

[17:14] <notviki> It's just it's part of 6.c-errata. And I see it's failing there too now....

[17:14] <samcv> nqp bug where it tries to check property values instead of boolean property names

[17:15] <samcv> it was broken before

[17:15] <notviki> OK

[17:15] <samcv> in nqp we need to check the property names before the values

[17:16] <samcv> bisectable6, use nqp; say nqp::unipropcode('space') == nqp::unipropcode('White_Space')

[17:16] <bisectable6> samcv, Bisecting by output (old=2015.12 new=689a768) because on both starting points the exit code is 0

[17:16] <notviki> star: say " " ~~ /<:space>/

[17:16] <camelia> star-m 2016.10: OUTPUT¬´ÔΩ¢ ÔΩ£‚ê§¬ª

[17:16] <bisectable6> samcv, bisect log: https://gist.github.com/f8b1850fe0735f576322ca3213691c65

[17:16] <bisectable6> samcv, (2017-01-02) https://github.com/rakudo/rakudo/commit/7c8b705b3375522fc36304b771f82f50246afcf0

[17:16] <notviki> m: say " " ~~ /<:space>/

[17:16] <camelia> rakudo-moar 689a76: OUTPUT¬´Nil‚ê§¬ª

[17:17] <samcv> but if you see the log

[17:17] <notviki> So if all bugs fixed that's supposed to work ^

[17:17] <samcv> of bisectable you can see it's been broken for a while

[17:17] <samcv> yeah

[17:17] <samcv> and so are other LF=space characters in unicode

[17:17] <notviki> OK. Then let's leave the test unfudged in 6.c-errata for now.

[17:17] <samcv> <ws> works fine

[17:18] <samcv> yeah

[17:25] <samcv> m: use nqp; my $var = nqp::unipropcode('Block'); say $var; say nqp::unipvalcode(5, 'Greek')

[17:25] <camelia> rakudo-moar 689a76: OUTPUT¬´5‚ê§8‚ê§¬ª

[17:25] <samcv> m: use nqp; my $var = nqp::unipropcode('space'); say $var; say nqp::unipvalcode(99, 'space')

[17:25] <camelia> rakudo-moar 689a76: OUTPUT¬´99‚ê§0‚ê§¬ª

[17:25] <samcv> yeah

[17:26] <samcv> it's not properly checking boolean ones. and only ever worked on just LF=space because of the bug

[17:27] <samcv> because space=1 for the space/White_Space property NOT 'space'

[17:27] <samcv> that's basically the gist of it

[17:32] <samcv> notviki,

[17:32] <samcv> m: use nqp; my $var = nqp::unipropcode('space'); say $var; say nqp::getuniprop_int(' '.ord, 99)

[17:32] <camelia> rakudo-moar 689a76: OUTPUT¬´99‚ê§1‚ê§¬ª

[17:33] <samcv> it should only check unipvalcode for Script and uh. idk maybe one or two more?

[17:33] <samcv> <:Script> can be used bare, but i'm not sure what else. oh and general category

[17:37] <notviki> .ask jnthn what's your opinion on this 6.c-errata change: New behaviour adds a space before "#TODO" here: https://github.com/perl6/roast/blob/6.c-errata/S24-testing/3-output.t#L46 in exchange for escaping only "#" and not every backslash. Can we make this change to 6.c-errata?

[17:37] <yoleaux2> notviki: I'll pass your message to jnthn.

[17:38] <notviki> .ask jnthn the change being changing the test to look for any amount of space before "#TODO" rather than zero

[17:38] <yoleaux2> notviki: I'll pass your message to jnthn.

[17:39] <jnthn> |Tux|: I started re-doing it at the end of last year for the non-streaming case, and got the streaming case in today so it could be merged. :) Hope it helps.

[17:39] <yoleaux2> 17:37Z <notviki> jnthn: what's your opinion on this 6.c-errata change: New behaviour adds a space before "#TODO" here: https://github.com/perl6/roast/blob/6.c-errata/S24-testing/3-output.t#L46 in exchange for escaping only "#" and not every backslash. Can we make this change to 6.c-errata?

[17:39] <yoleaux2> 17:38Z <notviki> jnthn: the change being changing the test to look for any amount of space before "#TODO" rather than zero

[17:40] <jnthn> pmurias: Well, if we're going to promise the behavior across backends I guess we can. How difficult is it for you to provide it in rakudo-js?

[17:40] <samcv> ok i gotta go to bed. night all

[17:41] <jnthn> 'night, samcv

[17:41] <pmurias> samcv: g'night

[17:41] <pmurias> jnthn: shouldn't be a problem

[17:42] <jnthn> notviki: I assume both are valid by the TAP spec?

[17:43] <pmurias> jnthn: I think I'll switch to using the lower_signature like moarvm does as it seems faster

[17:44] <pmurias> jnthn: and I'll have to do it anyway as the setting already depends on that behavior

[17:44] <notviki> jnthn: it doesn't say anything about preceeding space, but if anything the new behaviour is more correct, because the space we added is present in the examples they show: http://testanything.org/tap-version-13-specification.html#todo-tests

[17:45] <jnthn> pmurias: Yeah, implementing lower_signature will be a big win

[17:45] <jnthn> notviki: OK, don't have any objections

[17:45] <pmurias> why doesn't the JVM us the lower_signature?

[17:45] <notviki> Thanks.

[17:46] <jnthn> pmurias: Never got around to implementing the missing bits so it can do so

[17:47] <jnthn> pmurias: Combined with the fact it'll increase code size

[17:49] <dalek> roast: 3050638 | (Zoffix Znet)++ | S24-testing/3-output.t:

[17:49] <dalek> roast: Relax whitespace requirement before "#TODO" in test output

[17:49] <dalek> roast:

[17:49] <dalek> roast: Needed by https://github.com/rakudo/rakudo/commit/b183cabf41b5c42cce04f68743180386782ee788

[17:49] <dalek> roast: Change approved by jnthn: https://irclog.perlgeek.de/perl6-dev/2017-01-02#i_13838067

[17:49] <dalek> roast: review: https://github.com/perl6/roast/commit/305063809b

[17:49] <pmurias> should I make the nqp-level Binder.bind_sig do the decontainerization too? as it changes the semantics a tiny bit

[17:49] <jnthn> pmurias: That's probably fine

[17:50] <dalek> roast/6.c-errata: c44a181 | (Zoffix Znet)++ | S24-testing/3-output.t:

[17:50] <dalek> roast/6.c-errata: Relax whitespace requirement before "#TODO" in test output

[17:50] <dalek> roast/6.c-errata:

[17:50] <dalek> roast/6.c-errata: Needed by https://github.com/rakudo/rakudo/commit/b183cabf41b5c42cce04f68743180386782ee788

[17:50] <dalek> roast/6.c-errata: Change approved by jnthn: https://irclog.perlgeek.de/perl6-dev/2017-01-02#i_13838067

[17:50] <dalek> roast/6.c-errata: review: https://github.com/perl6/roast/commit/c44a18143d

[18:01] <jnthn> m: use Test; ok qq["\c[COMBINING TILDE]"] ~~ / ^ :ignoremark \"/

[18:01] <camelia> rakudo-moar 689a76: OUTPUT¬´not ok 1 - ‚ê§‚ê§# Failed test at <tmp> line 1‚ê§¬ª

[18:03] <dalek> nqp: 858b946 | jnthn++ | src/QRegex/P6Regex/Actions.nqp:

[18:03] <dalek> nqp: Change rxtype of a literal to use literal.

[18:03] <dalek> nqp:

[18:03] <dalek> nqp: Not quite sure why it used `enumcharlist`; it would work, but the

[18:03] <dalek> nqp: generated code would be lower quality.

[18:03] <dalek> nqp: review: https://github.com/perl6/nqp/commit/858b946f92

[18:03] <dalek> nqp: 1a51a91 | jnthn++ | src/QRegex/P6Regex/Actions.nqp:

[18:03] <dalek> nqp: Fix ignoremark on backslashed literals.

[18:03] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1a51a91032

[18:06] <lizmat> hmmm.... power outage  :-(

[18:07] <dalek> rakudo/nom: 6188771 | jnthn++ | tools/build/NQP_REVISION:

[18:07] <dalek> rakudo/nom: Bump NQP_REVISION for regex fix.

[18:07] <dalek> rakudo/nom:

[18:07] <dalek> rakudo/nom: Fixes compilation of `/:ignoremark \"/` to actually ignore marks.

[18:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/61887712ec

[18:07] <dalek> roast: e0bd1e6 | jnthn++ | S05-modifier/ignoremark.t:

[18:07] <dalek> roast: Test to cover RT #130465.

[18:07] <dalek> roast: review: https://github.com/perl6/roast/commit/e0bd1e62a7

[18:07] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130465

[18:54] * jnthn read it as "power outrage" somehow :)

[19:09] <dugword> PR for new roast tests added for resolved RT issues: https://github.com/perl6/roast/pull/212   Please let me know if I need to make any changes.

[19:40] <notviki> dugword: are those the only possible families; ever? I see there are a couple more constants defined: https://github.com/rakudo/rakudo/blob/nom/src/core/IO/Socket/INET.pm#L3-L7

[19:41] <notviki> ... also makes me wonder if the new :$famility type constraint is too restrictive.

[19:43] <geekosaur> only families with a decent chance of being available everywhere

[19:43] <yoleaux2> 31 Dec 2016 14:47Z <notviki> geekosaur: what were the problems with just using 1/0, -1/0, 0/0 for roundtripping? https://irclog.perlgeek.de/perl6-dev/2016-12-30#i_13826225

[19:44] <geekosaur> ...I do not recall, I only recall it being one of those Zefrem tickets

[19:44] <notviki> Zefram.

[19:44] <geekosaur> but possibly related to the fact that NaNs carry (implementation dependent) information about the kind of NaN and what generated it

[19:45] <geekosaur> (Inf does not)

[19:46] <notviki> pmurias: are you around? A while back you gave me code to make my hand rolled compiler take script filenames and run them. It was something about making @*ARGS available in the program. Do you remember what that code was? This is my current compiler I'm trying to make take script files: https://gist.github.com/zoffixznet/c06ecaf2ac25ddfb5a49b694523f5288

[19:47] <geekosaur> btw I still worry about hardcoding those packet families etc., I don't think there's any guarantee of them being the same everywhere (although there is certainly a tendency to use the standard ones because of people hardcoding values and expecting it to work...)

[19:53] <pmurias> notviki: looking...

[19:55] <notviki> oh damn, I forgot the .new on QAST::Var

[19:55] <notviki> pmurias: thanks. This works now: https://gist.github.com/zoffixznet/59cc8f7413fce7920ae93cdab542a668

[19:56] <notviki> I forgot .new() on Var and also needed :decl<param>

[20:00] * notviki doesn't see any of Zefram's tickets for "Rat" or "roundtriping" mentioning anything for Rat Inf/NaN roundtripping

[20:03] <lizmat> jnthn: yeah, we had about 45 mins of outage, and after that one of our servers didn't automatically reboot and the port forwarding on a router had been shot to bits

[20:03] <lizmat> all ok again now

[20:06] <dugword> notviki: A good point, but would PF_UNIX (Unix sockets) be an INET socket? Perl5 has separate modules for INET and UNIX

[20:07] <dugword> I can also change it to look for $family <= PF_MAX since that implies it should be the max value?

[20:08] <notviki> I don't know. But the constants are in there and currently the test says that all Perl 6 implementations must fail if they detect a family that's neither 2 nor 3. Perhaps that test can be relaxed a bit on what values it should die for

[20:08] <geekosaur> probably not a good idea to conflate AF_LOCAL and AF_INET

[20:08] <notviki> m: PIO::PF_INET

[20:08] <camelia> rakudo-moar 618877: OUTPUT¬´Could not find symbol '&PF_INET'‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[20:09] * geekosaur thinks the test should verify that 2 and 3 are supported, and not try to dictate what other values might be supported

[20:09] <notviki> I don't get why those constants aren't available to the user

[20:10] <dugword> Okay, I have to leave for a while, but I can update the test. I'll also have to update the IO::Socket::INET code to allow for values in addition to 2 and 3? Should it have constraints to the constants, or just no constraints?

[20:11] * notviki has no idea

[20:12] <dugword> I'll look around the code tonight and see if PF_LOCAL or PF_UNIX are ever used, and do some research to refresh on networking to see what would be appropriate

[20:14] <dugword> I think though that we are decades away from a IPv7+, considering the state of IPv6. We could probably deal with a new IP version when it happens :)

[20:43] <dogbert2> m: say ProtocolFamily(PF_INET).value

[20:43] <camelia> rakudo-moar 618877: OUTPUT¬´2‚ê§¬ª

[20:43] <notviki> Thanks

[20:44] <jnthn> lizmat: Glad it's all working again :)

[20:44] <notviki> m: say PF_INET

[20:44] <camelia> rakudo-moar 618877: OUTPUT¬´PF_INET‚ê§¬ª

[20:48] <notviki> Actually, I still don't get.

[20:48] <notviki> We have a duplicated set of those constants? one in IO.pm and another in INET.pm

[21:05] <dogbert2> anyone knows what this means (strace after connecting to hanging process): futex(0xae5070c, FUTEX_WAIT_PRIVATE, 9, NULL

[21:06] <dogbert2> it's what I get when t/spec/S32-io/socket-accept-and-working-threads.t hangs which it does once in a while

[21:09] <lizmat> jnthn: are the utf8-c8 in rakudo HEAD now ?

[21:09] <lizmat> *fixes

[21:10] <lizmat> jnthn: nevermind, it's part of 7c8b705b3375522fc

[21:16] <RabidGravy> dogbert2, it means that most probably there is some threading deadlock

[21:19] <dogbert2> RabidGravy: thx, something is definitely going horribly wrong

[21:23] <geekosaur> sadly, threading issues are not exactly new :/

[21:31] <lizmat> samcv jnthn: am I correct in seeing that nqp::unicmp_s is not yet exposed in Perl 6 ?

[21:44] <dalek> rakudo/js: 2da8192 | (Pawel Murias)++ | src/vm/js/Perl6/Ops.nqp:

[21:44] <dalek> rakudo/js: [js] Fix comment.

[21:44] <dalek> rakudo/js: review: https://github.com/rakudo/rakudo/commit/2da8192d38

[21:44] <dalek> rakudo/js: ee7cd70 | (Pawel Murias)++ | src/vm/js/Perl6/Ops.nqp:

[21:44] <dalek> rakudo/js: [js] :sideffects -> :side-effects

[22:21] <dalek> roast: a14cb3d | (Douglas Jenkins)++ | S32-io/socket-fail-invalid-values.t:

[22:21] <dalek> roast: Added test to fail on invalid port or family values

[22:21] <dalek> roast: review: https://github.com/perl6/roast/commit/a14cb3d8ae

[22:21] <dalek> roast: 4a45af0 | lizmat++ | S32-io/socket-fail-invalid-values.t:

[22:21] <dalek> roast: Merge pull request #212 from dugword/bugfix-RT-130473-130475/fail-invalid-values

[22:21] <dalek> roast:

[22:21] <dalek> roast: Added test to fail on invalid port or family values

[22:21] <dalek> roast: review: https://github.com/perl6/roast/commit/4a45af0134

[22:21] <dalek> rakudo/nom: 6dd2995 | (Douglas Jenkins)++ | t/spectest.data:

[22:21] <dalek> rakudo/nom: Added new test entry for socket-fail-invalid-values.t

[22:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6dd29951ee

[22:21] <dalek> rakudo/nom: a566efb | lizmat++ | t/spectest.data:

[22:21] <dalek> rakudo/nom: Merge pull request #986 from dugword/new-test/socket-fail-invalid-values

[22:21] <dalek> rakudo/nom:

[22:21] <dalek> rakudo/nom: Added new test entry for socket-fail-invalid-values.t

[22:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a566efbce0

[22:23] <dugword> Woo!

[22:27] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/01/02/2017-01-glancing-at-a-prime-time/

[22:30] <notviki> lizmat++

[22:30] <notviki> Yey, first weekly of the week \o/

[22:31] <lizmat> week?

[22:31] <notviki> 150 commits in a week :o

[22:31] <notviki> Err, I mean year :D

[22:31] <lizmat> :-)

[22:35] <notviki> m: say "News" if True but (rand > .5)

[22:35] <camelia> rakudo-moar a566ef: OUTPUT¬´News‚ê§¬ª

[22:49] <samcv> lizmat++

[22:51] <samcv> lizmat, She implemented the Unicode Collation Algorithm in NQP this should say in MoarVM

[22:51] <samcv> well i mean it has a nqp op but. idk

[22:51] <samcv> nqp doesn't have it for all backends though

[22:51] <dalek> roast: a0dbb3b | lizmat++ | S15- (2 files):

[22:51] <dalek> roast: Unfudge now passing tests, samcv++

[22:51] <dalek> roast: review: https://github.com/perl6/roast/commit/a0dbb3b007

[22:51] <samcv> yay!

[22:51] <dugword> Hey I'm on the news letter :)

[22:52] <lizmat> samcv: fixed

[22:53] <lizmat> samcv: changed to MoarVM/nqp

[22:53] <samcv> sweet

[22:58] <jnthn> lizmat++ # weekly

[23:24] <jnthn> 'night, #perl6-dev

[23:43] <samcv> uhm seeing this test in roast

[23:43] <samcv> m: use Test; lives-ok { EVAL "q\x298d test \x298e" },  "Unicode open-298d maps to close-298e";

[23:43] <camelia> rakudo-moar a566ef: OUTPUT¬´ok 1 - Unicode open-298d maps to close-298e‚ê§¬ª

[23:43] <samcv> but it doesn't

[23:43] <samcv> they're not mirroring glyphs and i believe not tested anywhere else. should be ok to change it?

[23:43] <samcv> unless it's testing that it doesn't die not that it works? not sure???

[23:44] <samcv> m: say "q\x298d test \x298e"

[23:44] <camelia> rakudo-moar a566ef: OUTPUT¬´q‚¶ç test ‚¶é‚ê§¬ª

[23:44] <samcv> m: say EVAL "q\x298d test \x298e"

[23:44] <camelia> rakudo-moar a566ef: OUTPUT¬´ test ‚ê§¬ª

[23:44] <samcv> m: '‚¶ç'.uniprop('Bidi_Mirroring_Glyph').ord.base(16).say

[23:44] <camelia> rakudo-moar a566ef: OUTPUT¬´2990‚ê§¬ª

[23:45] <samcv> it has a mirroring glyph. but the tested one is not it

[23:45] * samcv hopes it's not in 6.c-errata

[23:46] <samcv> with my change it looks for the _actual_ matching bracket not the one we have programmed in ;P

[23:46] <samcv> well proposed changed to nqp

[23:48] <samcv> i think if we _have_ exceptions to "only allow Bidi mirroing _glyphs" + some extras

[23:48] <samcv> those 'some extras' should NOT include characters which DO have matching glyphs

[23:49] <samcv> m: say Q<ÔΩ¢>.uniprop('Bidi_Mirroring_Glyph')

[23:49] <camelia> rakudo-moar a566ef: OUTPUT¬´ÔΩ£‚ê§¬ª

[23:50] <samcv> for example this one is fine

[23:51] <samcv> m: "\x[298d]\x[2990]".uninames.say

[23:51] <camelia> rakudo-moar a566ef: OUTPUT¬´(LEFT SQUARE BRACKET WITH TICK IN TOP CORNER RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER)‚ê§¬ª

[23:54] * samcv weeps. sees that is in 6.c-errata :(((

[23:54] <samcv> that is depressing

[23:55] <samcv> Couldn't find terminator ‚¶ê (corresponding ‚¶ç was at line 33)
