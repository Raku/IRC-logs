[01:45] <brokenchicken> My grant proposal to TPF is now online for community feedback: http://news.perlfoundation.org/2017/01/grant-proposal-standardization.html

[02:08] <samcv> ok no it sent

[02:24] <travis-ci> Rakudo build errored. lizmat 'Merge pull request #996 from usev6/jvm_build_blib

[02:24] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/192833829 https://github.com/rakudo/rakudo/compare/e041b0f8276b...71fd4178bf78

[03:33] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Give IterationBuffer a simple .perl for debugging

[03:33] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/192852042 https://github.com/rakudo/rakudo/compare/71fd4178bf78...b93c99cb9b9b

[04:45] <MasterDuke> .ask lizmat how serious were you about wanting an nqp swap op? i wanted to learn about implementing nqp ops, so i just created nqp::swappos(@a, int $a, int $b) (and the associated _i, _n, and _s variants), but wasn't sure if i should actually create a PR

[04:45] <yoleaux2> MasterDuke: I'll pass your message to lizmat.

[04:47] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Revert "Fix f67df8ad9d4f920bb63ea40501f3b1db9d8e661d."

[04:47] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/192852230 https://github.com/rakudo/rakudo/compare/b93c99cb9b9b...c6662d14be23

[04:56] <MasterDuke> .tell lizmat and fyi, compared to doing it manually, the ops are a little bit faster in NQP and quite a bit faster in Rakudo

[04:56] <yoleaux2> MasterDuke: I'll pass your message to lizmat.

[05:37] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Introducing R:It.Rotor, the new .rotor workhorse'

[05:37] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/192855919 https://github.com/rakudo/rakudo/compare/c6662d14be23...92e704b4e711

[06:14] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make List.rotor between 15x and 20x faster

[06:14] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/192861395 https://github.com/rakudo/rakudo/compare/92e704b4e711...d7b82149d31d

[07:39] <nine> brokenchicken: your proposal reads like quite a bargain for us :)

[07:41] <timotimo> what is this, a grant for ants?

[07:41] <timotimo> it needs to be at least ... three times as big!

[08:06] <[Tux]> Could not download module metadata: can't download projects file: .

[08:06] <[Tux]> Falling back to the curl command.

[08:07] <[Tux]> so I cannot time. Something wrong in the ecosystem?

[08:12] <[Tux]> This is Rakudo version 2016.12-364-g703799ec2 built on MoarVM version 2016.12-115-ged2df9ac

[08:12] <[Tux]> csv-ip5xs        2.928

[08:12] <[Tux]> test            13.035

[08:12] <[Tux]> test-t           4.943

[08:12] <[Tux]> csv-parser      14.401

[08:12] <[Tux]> as after above error, I don't know how "valid" those timeings are

[08:14] <samcv> i've been getting lots of ecosystem modules failing tests

[08:15] <timotimo> as long as curl was able to get the projects file, that's probably fine

[08:22] <lizmat> Files=1163, Tests=56144, 184 wallclock secs (10.99 usr  4.54 sys + 1099.21 cusr 112.85 csys = 1227.59 CPU)

[08:22] <yoleaux2> 04:45Z <MasterDuke> lizmat: how serious were you about wanting an nqp swap op? i wanted to learn about implementing nqp ops, so i just created nqp::swappos(@a, int $a, int $b) (and the associated _i, _n, and _s variants), but wasn't sure if i should actually create a PR

[08:22] <yoleaux2> 04:56Z <MasterDuke> lizmat: and fyi, compared to doing it manually, the ops are a little bit faster in NQP and quite a bit faster in Rakudo

[08:22] <lizmat> .tell MasterDuke actually, pretty serious, so please PR

[08:22] <yoleaux2> lizmat: I'll pass your message to MasterDuke.

[08:50] <Geth> rakudo/nom: fd8df7f2ad | (Elizabeth Mattijsen)++ | 4 files

[08:50] <Geth> rakudo/nom: Move .rotor to Any

[08:50] <Geth> rakudo/nom:

[08:50] <Geth> rakudo/nom: .rotor is less abour List these days, and more about iterables.

[08:50] <Geth> rakudo/nom: Since Any has an iterator method that does .list.iterator, we don't

[08:50] <Geth> rakudo/nom: actually need .rotor to live in List anymore.  This may also speed

[08:50] <Geth> rakudo/nom: up things, because no intermediate list is necessary anymore, e.g

[08:50] <Geth> rakudo/nom: when calling .rotor on a .Seq, as in @foo.map( *-42 ).rotor(4)

[08:50] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fd8df7f2ad

[09:41] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Move .rotor to Any

[09:41] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/192964551 https://github.com/rakudo/rakudo/compare/703799ec247e...fd8df7f2ad50

[10:16] <timotimo> someone help me with modules.perl6.org

[10:17] <timotimo> the modules.perl6.org user owns a perlbrew where it has 5.22 which it uses, but it asplodes during startup (begin phase, that is) because it can't find the Toadform module and its @INC contains only paths for perl 5.20 ... whhhyyyyyyyy~

[10:20] <timotimo> ... i just started it manually from the user's shell

[10:20] <timotimo> and it didn't give that error

[10:26] <timotimo> by starting it as ./bin/morbo from the directory of the app, i got it to serve me one request, now i get service unavailable all the time

[10:26] <timotimo> but no noticable output

[10:28] <nine> Does it write a log file?

[10:28] <timotimo> does modules.perl6.org work for anybody else now?

[10:28] <timotimo> it seems good right now

[10:28] <nine> looks good

[10:28] <timotimo> i hope i didn't do too much harm here

[10:28] <timotimo> ctrl-z, bg, disown, logout

[11:00] <brokenchicken> morbo is a dev server

[11:05] <brokenchicken> it's hypnotoad bin/ModulesPerl6.pl

[11:05] <brokenchicken> or rather, it should start automagically, but IIRC I never fixed the init script

[11:06] <brokenchicken> "service unavailable all the time" and that happens when you try to visit the site while it's down..... and Apache seems to cache that for some time and keeps showing it even if you get the service up :(

[11:14] <Geth> rakudo: usev6++ created pull request #997: Bandaid for r-j: don't bind nqp::null to attribute

[11:14] <Geth> rakudo: review: https://github.com/rakudo/rakudo/pull/997

[11:15] <Geth> rakudo/nom: 96185b23ea | usev6++ | src/core/Rakudo/Iterator.pm

[11:15] <Geth> rakudo/nom: Bandaid for r-j: don't bind nqp::null to attribute

[11:15] <Geth> rakudo/nom:

[11:15] <Geth> rakudo/nom: Checking for nqp::null is fast, but does not work on JVM (cmp. RT #130532).

[11:15] <Geth> rakudo/nom:

[11:15] <Geth> rakudo/nom: This commit should be reverted once the underlying issue in nqp-j is fixed.

[11:15] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/96185b23ea

[11:15] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130532

[11:15] <Geth> rakudo/nom: 82a614e1bb | (Zoffix Znet)++ | src/core/Rakudo/Iterator.pm

[11:16] <Geth> rakudo/nom: Merge pull request #997 from usev6/jvm_attribute_null

[11:16] <Geth> rakudo/nom:

[11:16] <Geth> rakudo/nom: Bandaid for r-j: don't bind nqp::null to attribute

[11:16] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/82a614e1bb

[11:29] <timotimo> brokenchicken: will you restart it with hypnotoad? or shall i do that?

[11:31] <brokenchicken> I did

[11:31] <timotimo> thank you

[11:41] <timotimo> moritz: i'm watching a talk about prometheus, maybe it's a good monitoring/alerting system and perhaps i could set it up on p6c if you'd accept that

[11:55] <lizmat> bartolin++

[11:57] <DrForr> I think we're using that here for Tau Station.

[11:57] <timotimo> oh, cool

[11:57] <timotimo> how do you like it?

[11:59] <moritz> timotimo: sure, why not? it just won't work well if it's installed on the host that fails

[11:59] <timotimo> right, i'd install it somewhere else

[12:00] <timotimo> naturally :)

[12:10] <nine> brokenchicken: why init script? Don't you mean systemd service file?

[12:10] <timotimo> it'd be nice to have it migrated to a service file, yeah

[12:11] <nine> service files are so easy to write that I even have one for my screen/irssi session

[12:36] <timotimo> moritz: looks like i can run prometheus on my home network (for funsies on a raspberry pi for example so it can stay on all the time) and use collectd_exporter to have it consume all data we're already getting into our collectd anyway

[12:37] <timotimo> and it can display stuff in grafana, which is very pretty

[12:38] <Geth> rakudo/nom: 40005a3a90 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals.pm

[12:38] <Geth> rakudo/nom: No need to handle .rotor for shaped arrays specially

[12:38] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/40005a3a90

[12:42] <moritz> timotimo: nice

[12:43] <timotimo> there's a project called "blackbox exporter" which you can probe services with by using declarative rules that can also have imperative parts (for example a sort-of kind-of expect script for tcp-based services)

[12:47] <timotimo> also: pushover for notifications seems interesting

[12:49] <Geth> rakudo/nom: c1941b550b | (Elizabeth Mattijsen)++ | 2 files

[12:49] <Geth> rakudo/nom: Move Supplier stub to where it's needed

[12:49] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c1941b550b

[12:56] <Geth> rakudo/nom: 4325ebd8ff | (Elizabeth Mattijsen)++ | 2 files

[12:56] <Geth> rakudo/nom: Move X::TypeCheck::Splice stub to where we need it

[12:56] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4325ebd8ff

[13:04] <Geth> rakudo/nom: 4a78be75f3 | (Elizabeth Mattijsen)++ | 2 files

[13:04] <Geth> rakudo/nom: Move find-reducer-for-op to where we need it

[13:04] <Geth> rakudo/nom:

[13:04] <Geth> rakudo/nom: This used to be visible to any running code, it is no longer.

[13:04] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4a78be75f3

[13:08] <travis-ci> Rakudo build failed. Zoffix Znet 'Merge pull request #997 from usev6/jvm_attribute_null

[13:08] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/193005400 https://github.com/rakudo/rakudo/compare/fd8df7f2ad50...82a614e1bb11

[13:11] <brokenchicken> https://travis-ci.org/rakudo/rakudo/builds/193005400

[13:11] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[13:11] <brokenchicken> one linux job: t/04-nativecall/06-struct.t .............. No subtests run

[13:12] <brokenchicken> nine: no idea. Whatever starts it after system reboot

[13:15] <Geth> rakudo/nom: 6ad9e0b89a | (Elizabeth Mattijsen)++ | src/core/List.pm

[13:15] <Geth> rakudo/nom: Move combinations/permutations to a more logical place

[13:15] <Geth> rakudo/nom:

[13:15] <Geth> rakudo/nom: For some reason they were at the top of the List.pm file.  I like

[13:15] <Geth> rakudo/nom: them better where they are now :-)

[13:15] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ad9e0b89a

[13:34] <[Coke]> ok, some of these have been processed, but we now have CLAs for ugexe, samcv, and usev6.

[13:34] <[Coke]> welcome aboard.

[13:35] <[Coke]> (usev6 aka bartolin)

[13:37] <brokenchicken> \o/

[13:41] <[Coke]> IWBNI someone could make sure they have rakudo access on github.

[13:51] <samcv> you had my cla a while ago, but usev6 and ugexe just very recently have submitted them?

[13:52] <samcv> bartolin++ :)

[13:53] <bartolin> \o/

[13:53] <yoleaux2> 13:35Z <[Coke]> bartolin: got it, pinged on 6-dev, someone will add you shortly.

[13:54] <bartolin> [Coke]: thanks!

[13:54] * bartolin goes back to work

[13:55] <[Coke]> Sorry, apparently I am now on the list of people who get emails when CLAs come in, -and- I have write access to the list of submitted CLAs document, so I guess I'm on the hook for any new CLAs coming in. :)

[13:56] <samcv> ok i'm signing off for possibly up to 24 hours. setting my ZNC buffer higher, will catch you guys on the flip side

[13:57] <Geth> rakudo/nom: 4ae08e0b24 | (Elizabeth Mattijsen)++ | src/core/Backtrace.pm

[13:57] <Geth> rakudo/nom: Fix for RT #130509

[13:57] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4ae08e0b24

[13:57] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130509

[13:58] <jnthn> See you later, samcv o/

[13:58] <jnthn> [Coke]: Somebody needs Rakudo commit access?

[13:59] <Geth> roast: f1640e9f53 | (Elizabeth Mattijsen)++ | S32-str/sprintf.t

[13:59] <Geth> roast: After fixing RT #130509, there is no more panic

[13:59] <Geth> roast: review: https://github.com/perl6/roast/commit/f1640e9f53

[13:59] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130509

[14:01] <brokenchicken> jnthn: yeah bartolin (usev6 on github) and ugexe

[14:01] <brokenchicken> Per https://irclog.perlgeek.de/perl6-dev/2017-01-18#i_13943097

[14:02] <lizmat> laters, samcv++  :-)

[14:02] <lizmat> jnthn: opinions on https://github.com/MoarVM/MoarVM/pull/505 ?

[14:02] <lizmat> it would make e.g. permutations() about 20% faster

[14:05] <jnthn> It's just doing the very same thing that nqp::atpos/nqp::bindpos and a temporary register would do...

[14:05] <jnthn> So the main saving is interpeter overhead

[14:05] <jnthn> Which owuld be JITted away

[14:05] <jnthn> Except this new op ain't JITted

[14:06] <jnthn> And it'll be a pain to JIT because it does a bunch of REPR operations, whihc means it needs special-case devirtualization

[14:06] <jnthn> Which is clutter in the JIT

[14:06] <lizmat> ok, so a bad idea overall, is what you're saying

[14:06] <jnthn> So, -1

[14:06] <jnthn> Yeah

[14:06] <jnthn> What I'd like to know is what MoarVM ops we spit out when *not* using this op

[14:06] <lizmat> MasterDuke: sorry that I lead you there

[14:07] <jnthn> I mean, adding an nqp:: op that desugars to precisely the sequence of atpos/bindpos VM ops we see here may be useful

[14:07] <jnthn> When I saw this in the backlog I thought that's what was happening and I was fine with that if it's a measurable speedup :)

[14:09] <lizmat> hmmm...  can't reproduce it atm :-(

[14:09] <jnthn> The speedup?

[14:10] <lizmat> yeah, I have one profile here where the !swap method takes 20% of total CPU

[14:13] <lizmat> grrr..  of course I don't know what the code was that generated it  :-(

[14:14] <lizmat> for ^10000 { my @a = permutations(5) }

[14:14] <lizmat> ok, lemme see if I can drop the overhead of the private method call

[14:21] <brokenchicken> lizmat: should this one be added to ChangeLog? If yes, how should it be worded: https://github.com/rakudo/rakudo/commit/7ba9f845a503ce4fea9964285e152a3a62560ba8

[14:22] <lizmat> perhaps we should remove that commit until we discussed it further ?

[14:22] <lizmat> I won't get to hypers before the release anyway

[14:23] <brokenchicken> Ok, I won't add it to changelog. Thanks.

[14:29] <Geth> rakudo/nom: c64aeb32dd | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[14:29] <Geth> rakudo/nom: Manually inline swapping logic

[14:29] <Geth> rakudo/nom:

[14:29] <Geth> rakudo/nom: For 35% faster permutations()

[14:29] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c64aeb32dd

[14:33] <Geth> rakudo/nom: dca05c2603 | (Elizabeth Mattijsen)++ | t/spectest.data

[14:33] <Geth> rakudo/nom: Remove destruction tests of doubtful value

[14:33] <Geth> rakudo/nom:

[14:33] <Geth> rakudo/nom: They continue to live in roast though.  But atm they're causing

[14:33] <Geth> rakudo/nom: flappers and unwanted distraction while spectesting.

[14:33] <Geth> rakudo/nom:

[14:33] <Geth> rakudo/nom: See discussion at:

[14:33] <Geth> rakudo/nom: https://irclog.perlgeek.de/moarvm/2017-01-18#i_13943061

[14:33] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dca05c2603

[15:00] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Move Supplier stub to where it's needed'

[15:00] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/193028548 https://github.com/rakudo/rakudo/compare/40005a3a9001...c1941b550bec

[15:04] <Geth> rakudo/nom: 69a66b7fa7 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[15:04] <Geth> rakudo/nom: Make R:It.Batch handle Inf * large ints better

[15:04] <Geth> rakudo/nom:

[15:04] <Geth> rakudo/nom: Inspired by RT #130436

[15:04] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/69a66b7fa7

[15:04] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130436

[15:45] <Geth> rakudo/nom: 7ddc5f7cea | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[15:45] <Geth> rakudo/nom: Fix RT #130436

[15:45] <Geth> rakudo/nom:

[15:45] <Geth> rakudo/nom: Also allow Whatever in rotor, like (^10).rotor( 3,4,* )  # 012 3456 789

[15:45] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7ddc5f7cea

[15:45] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130436

[15:46] <lizmat> afk&

[15:59] <brokenchicken> .ask samcv this test file is still present in 6.c-errata, except now it won't run any more. Can we just rename GraphemeBreakTest.t in master to grapheme-break.t so errata runs its copy and master the updated one? https://github.com/rakudo/rakudo/commit/7f970357bd59c011e9f998ba885d317401851781

[15:59] <yoleaux2> brokenchicken: I'll pass your message to samcv.

[15:59] <brokenchicken> .tell Zoffix ensure this test runs on errata for release: https://github.com/rakudo/rakudo/commit/7f970357bd59c011e9f998ba885d317401851781

[15:59] <yoleaux2> brokenchicken: I'll pass your message to Zoffix.

[16:00] <brokenchicken> Guess as good a time as any to add roast branch markers to t/spectest.data to specifies files that should run only for roast XYZ

[16:01] <[Coke]> ala 6.c ?

[16:02] <[Coke]> do we need also a * for master?

[16:03] <brokenchicken> I guess the question is what sort of release tests are we running when 6.d is released? Will we still be testing 6.c-errata?

[16:03] <brokenchicken> Will it be 6.c-errata + 6.d-errata + master?

[16:04] <[Coke]> I think that our first 6.d-aware rakudo will also support 6.c, yes

[16:05] <[Coke]> and we don't know what the spec test files will look like in that scenario.

[16:05] <brokenchicken> or maybe a better approach is to have a t/spectest.data-6.c-errata that's used for 6.c-errata

[16:05] <brokenchicken> Also why is that file in rakudo and not roast?

[16:05] <[Coke]> I think it'll be: run against each branch: master, 6.d, and 6.c-errata

[16:05] <[Coke]> brokenchicken: because it's rakudo's list of what it supports.

[16:06] <brokenchicken> Ah

[16:08] <brokenchicken> I'll add a t/spectest.data-6.c-errata then

[16:08] <brokenchicken> This will also ensure we don't accidentally remove test files from 6.c-errata when all we want is a file change in master

[16:09] <brokenchicken> AND this will let us get rid of spurious "missing file" warnings on 6.c-errata test run

[16:09] <brokenchicken> or t/spectest.data-6.c I guess

[16:19] <[Coke]> I would do 6.c and then do magic to say "I'm on 6.c-errata branch, that must mean -6.c test file". maybe.

[16:20] <[Coke]> to avoid accidentally running master test file list against 6.c-errata branch

[16:21] <brokenchicken> yeah

[16:25] <brokenchicken> .tell samcv never mind. I'll add a separate test list for 6.c

[16:25] <yoleaux2> brokenchicken: I'll pass your message to samcv.

[16:27] <[Coke]> brokenchicken++ we've basicallyb een avoiding this since christmas.

[16:27] <[Coke]> and it's one of the things we need in place before 6.d

[16:31] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Move X::TypeCheck::Splice stub to where we need it'

[16:31] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/193030242 https://github.com/rakudo/rakudo/compare/c1941b550bec...4325ebd8ff1b

[16:32] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[16:33] <brokenchicken> t/04-nativecall/06-struct.t .............. No subtests run

[16:39] <lizmat> that feels like a flapper

[16:40] <lizmat> afk again&

[16:48] <brokenchicken> hmmm... the module I wrote around The Christmas is now failing on latest rakudo :( https://github.com/zoffixznet/perl6-Color/issues/6

[16:53] <Geth> rakudo/nom: fa36f8f753 | (Zoffix Znet)++ | docs/ChangeLog

[16:53] <Geth> rakudo/nom: Log all commits to date

[16:53] <Geth> rakudo/nom:

[16:53] <Geth> rakudo/nom: Documents commits:      005166e 0c0dd82 0f25d83 1374fcf 19df358 1a54bba 1dc0c01 1e54371

[16:53] <Geth> rakudo/nom: 1ee24cc 1ee9c82 226cb36 2496963 25615c7 268dc92 29f487e 3282813 340bc90 362f674 38ec79c

[16:53] <Geth> rakudo/nom: 393afcf 39bf63f 3baffe7 3c52aa0 3d1d699 3d86286 3fe5893 4038c6c 4320fdc 434bf75 43d20eb

[16:53] <Geth> rakudo/nom: 46cdf16 471f4ba 4724bd6 48e8ccc 4ab020f 4b2cea0 4b529c8 4ff2fb2 502fc77 516e527 528ec53

[16:53] <Geth> rakudo/nom: 541d127 54cc06b 58c79e2 5ba982a 5c4db5e 5c685f2 6188771 62f7027 644cd34 6703b4c 696b1f4

[16:53] <Geth> rakudo/nom: <…commit message has 8 more lines…>

[16:53] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fa36f8f753

[16:53] <brokenchicken> NeuralAnomaly: status

[16:53] <NeuralAnomaly> brokenchicken, [✔] Next release will be in 2 days and 12 hours. Since last release, there are 91 new still-open tickets (0 unreviewed and 0 blockers) and 0 unreviewed commits. See http://perl6.fail/release/stats for details

[16:54] <brokenchicken> 𝐑𝐄𝐌𝐈𝐍𝐃𝐄𝐑: next Rakudo compiler release is this Saturday (in 3 days). Please review the changelog to ensure the work you did is properly documented for our users.

[17:00] <brokenchicken> m: sub x($x is rw) {say $x}; sub y ($rgb) { x $_ for @$rgb }(<a b c>)

[17:00] <camelia> rakudo-moar 7ddc5f: OUTPUT«Parameter '$x' expected a writable container, but got Str value␤  in sub x at <tmp> line 1␤  in sub y at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:00] <brokenchicken> star: sub x($x is rw) {say $x}; sub y ($rgb) { x $_ for @$rgb }(<a b c>)

[17:00] <camelia> star-m 2016.10: OUTPUT«Parameter '$x' expected a writable container, but got Str value␤  in sub x at <tmp> line 1␤  in sub y at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:00] <brokenchicken> .oO( how did it ever work then... )

[17:04] <brokenchicken> Ah, here

[17:04] <brokenchicken> star: class { sub x($x is rw) {say $x}; method new ( Array() :$rgb where $_ ~~ [Real, Real, Real] ) { x $_ for @$rgb } }.new: :rgb<42 42 42>

[17:04] <camelia> star-m 2016.10: OUTPUT«42␤42␤42␤»

[17:04] <brokenchicken> m: class { sub x($x is rw) {say $x}; method new ( Array() :$rgb where $_ ~~ [Real, Real, Real] ) { x $_ for @$rgb } }.new: :rgb<42 42 42>

[17:04] <camelia> rakudo-moar 7ddc5f: OUTPUT«Parameter '$x' expected a writable container, but got IntStr value␤  in sub x at <tmp> line 1␤  in method new at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:05] <brokenchicken> Is the new behaviour correct?

[17:06] <jnthn> Looks like

[17:06] <jnthn> Oh, though...

[17:06] * jnthn wonders why it says $_ ~~ [Real, Real, Real] when `where` already implies a smartmatch

[17:07] <brokenchicken> 'cause I wrote it when I didn't know Perl 6

[17:07] <jnthn> ;)

[17:07] <jnthn> m: sub foo(Array() $x) { .++ for @$x; say $x }; foo [1,2,3]

[17:07] <camelia> rakudo-moar 7ddc5f: OUTPUT«[2 3 4]␤»

[17:07] <jnthn> m: sub foo(Array() $x) { .++ for @$x; say $x }; foo (1,2,3)

[17:07] <camelia> rakudo-moar 7ddc5f: OUTPUT«Cannot resolve caller postfix:<++>(Int); the following candidates␤match the type but require mutable arguments:␤    (Mu:D $a is rw)␤    (Int:D $a is rw)␤␤The following do not match for other reasons:␤    (Bool:D $a is rw)␤    (Bool:U $a is rw…»

[17:08] <jnthn> m: dd (1,2,3)

[17:08] <camelia> rakudo-moar 7ddc5f: OUTPUT«(1, 2, 3)␤»

[17:08] <jnthn> m: dd (1,2,3).Array

[17:08] <camelia> rakudo-moar 7ddc5f: OUTPUT«[1, 2, 3]␤»

[17:08] <jnthn> m: dd [1,2,3]

[17:08] <camelia> rakudo-moar 7ddc5f: OUTPUT«[1, 2, 3]␤»

[17:08] <jnthn> m: (1,2,3).Array[0]++

[17:08] <camelia> rakudo-moar 7ddc5f: OUTPUT«Cannot resolve caller postfix:<++>(Int); the following candidates␤match the type but require mutable arguments:␤    (Mu:D $a is rw)␤    (Int:D $a is rw)␤␤The following do not match for other reasons:␤    (Bool:D $a is rw)␤    (Bool:U $a is rw…»

[17:08] <jnthn> star: (1,2,3).Array[0]++

[17:08] <camelia> star-m 2016.10: ( no output )

[17:08] <jnthn> mc: (1,2,3).Array[0]++

[17:08] <committable6> jnthn, ¦«2015.12»:

[17:09] <jnthn> That's the regression.

[17:09] <brokenchicken> bisect: (1,2,3).Array[0]++

[17:09] <bisectable6> brokenchicken, Bisecting by exit code (old=2015.12 new=fa36f8f). Old exit code: 0

[17:09] <bisectable6> brokenchicken, bisect log: https://gist.github.com/f91347264071e248ff25f7f7cb01f917

[17:09] <bisectable6> brokenchicken, (2017-01-12) https://github.com/rakudo/rakudo/commit/fab1a14f7997be923544b8a2e22865a04441bd21

[17:10] <jnthn> Apparently it made it 30% wronger too :P

[17:10] <brokenchicken> .ask lizmat bisectable points to this commit for (1,2,3).Array[0]++ no longer working. Would you have an idea how to fix that? https://github.com/rakudo/rakudo/commit/fab1a14f7997be923544b8a2e22865a04441bd21

[17:10] <yoleaux2> brokenchicken: I'll pass your message to lizmat.

[17:10] <jnthn> ohh

[17:10] <jnthn> It looks like it decided to skip the Reifier path

[17:11] <jnthn> But that's the thing that makes Scalar containers for arrays

[17:11] <brokenchicken> Ah

[17:11] <jnthn> Though it uses List::Reifier which is a bit odd too

[17:11] <jnthn> *used

[17:11] <jnthn> oh no

[17:11] <jnthn> I misread

[17:11] <jnthn> result.reification-target()

[17:11] <jnthn> That's the important bit

[17:23] <Geth> rakudo/nom: 35a3c08fd1 | (Zoffix Znet)++ | docs/ChangeLog

[17:23] <Geth> rakudo/nom: Fix typo MasterDuke++

[17:23] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/35a3c08fd1

[17:27] <jnthn> Damn, we have a lot of branches in the rakudo repo

[17:44] <Geth> rakudo/nonblocking-await: 9f7452be6f | (Jonathan Worthington)++ | 6 files

[17:44] <Geth> rakudo/nonblocking-await: Stub in the `Awaitable` role.

[17:44] <Geth> rakudo/nonblocking-await:

[17:44] <Geth> rakudo/nonblocking-await: For now, just a marker role for things that we can `await`. Later, it

[17:44] <Geth> rakudo/nonblocking-await: it will require a method for subscribing a resumption.

[17:44] <Geth> rakudo/nonblocking-await: review: https://github.com/rakudo/rakudo/commit/9f7452be6f

[17:44] <Geth> rakudo/nonblocking-await: 2aaadd5bb9 | (Stefan Seifert)++ | 10 files

[17:44] <Geth> rakudo/nonblocking-await: First attempt at adding a CORE.d setting

[17:44] <Geth> rakudo/nonblocking-await:

[17:44] <Geth> rakudo/nonblocking-await: Patch by nine++ cherry-picked and updated to build/work on HEAD.

[17:44] <Geth> rakudo/nonblocking-await: review: https://github.com/rakudo/rakudo/commit/2aaadd5bb9

[17:48] <nine> Looks like we're getting closer to doing a 6.d :)

[17:48] <brokenchicken> :o

[17:48] <brokenchicken> nine++

[18:03] * gfldex .oO( class Christmas does Awaitable {} )

[18:14] <jnthn> nine: Yes, thanks for giving me a mostly-done 6.d setting thingy I could nab :)

[18:15] <jnthn> (It seems to work well. I now have a totally busticated await when I wrote use v6.d.PREVIEW)

[18:17] <jnthn> My rough goal is non-blocking await during Jan, hyper/race on Iterables in Feb, new scheduler in Mar, and hyper/race on reactives in Apr.

[18:18] <jnthn> s/reactives/Supply/ # clearer )

[18:21] * jnthn off to rest a bit

[19:17] <lizmat> .

[19:17] <yoleaux2> 17:10Z <brokenchicken> lizmat: bisectable points to this commit for (1,2,3).Array[0]++ no longer working. Would you have an idea how to fix that? https://github.com/rakudo/rakudo/commit/fab1a14f7997be923544b8a2e22865a04441bd21

[19:17] <lizmat> brokenchicken: will look at it  :-)

[19:52] <lizmat> brokenchicken: I have a fix, do you have an RT ??

[19:53] <brokenchicken> lizmat: https://rt.perl.org/Ticket/Display.html?id=130583

[19:55] <Geth> rakudo/nom: ae050f998a | (Elizabeth Mattijsen)++ | src/core/Array.pm

[19:55] <Geth> rakudo/nom: Fix for RT #130583

[19:55] <Geth> rakudo/nom:

[19:55] <Geth> rakudo/nom: Turns out we need to something extra for iteration buffers in arrays

[19:55] <Geth> rakudo/nom: 1	bassie

[19:55] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130583

[19:55] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ae050f998a

[19:55] <lizmat> 1 bassie ??

[19:56] <lizmat> hmmm... copypasto

[19:56] <brokenchicken> heh

[19:56] <brokenchicken> lizmat++

[19:56] <lizmat> so brokenchicken: should I now just mark this ticket as resolved / testsneeded / REGRESSION ?

[19:57] <brokenchicken> I did it already :)

[19:57] <brokenchicken> But yeah, normally you'd mark it as testneeded and comment a link to the fix

[19:57] <brokenchicken> and if the tests are in, comment with the link to the tests and mark as resolved

[19:58] <lizmat> ok, so not resolve until testsneeded is removed

[19:58] <brokenchicken> Yeah

[19:58] <lizmat> I've also marked it as REGRESSION now

[20:06] <lizmat> m: class A { method a(--> self) { } }   # shouldn't this just work?  :-)

[20:06] <camelia> rakudo-moar 35a3c0: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Type 'self' is not declared␤at <tmp>:1␤------> 3class A { method a(--> self7⏏5) { } }   # shouldn't this just work?  :␤»

[20:34] <timotimo> that commit will confuse people years into the future

[20:34] <timotimo> we should remove all mention of why it says "1 bassie" from the irclogs

[20:36] <brokenchicken> :)

[20:37] <lizmat> hehe  and it wasn't even intentional

[20:42] <[Coke]> until testsneeded is -satisfied- --- doesn't have to be removed.

[20:42] <[Coke]> (that's just too much ticket wonkery)

[20:51] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Move combinations/permutations to a more logical place

[20:51] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/193036023 https://github.com/rakudo/rakudo/compare/4a78be75f395...6ad9e0b89a6a

[20:52] <Geth> rakudo/nom: 93b0ffae52 | (Elizabeth Mattijsen)++ | 2 files

[20:52] <Geth> rakudo/nom: Fix for RT #130285

[20:52] <Geth> rakudo/nom:

[20:52] <Geth> rakudo/nom: Also allow things like * and Inf for .head(N) and .tail(N)

[20:52] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/93b0ffae52

[20:52] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130285

[21:08] * lizmat just rejected RT #130433

[21:09] <masak> +1

[21:09] <masak> don't see why it ought to be a Seq

[21:13] * lizmat also just rejected RT #130438

[21:34] <Geth> rakudo/nom: 76f14a5c1f | (Elizabeth Mattijsen)++ | src/core/Array.pm

[21:34] <Geth> rakudo/nom: Fix for RT #130439

[21:34] <Geth> rakudo/nom:

[21:34] <Geth> rakudo/nom: I think we actually only need 1 candidate to handle .splice(Range).

[21:34] <Geth> rakudo/nom: Which I have now added.  It won't be the fastest route of doing this

[21:34] <Geth> rakudo/nom: as it it just a front-end for .slice(offset,size).

[21:34] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130439

[21:34] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/76f14a5c1f

[21:55] <Geth> rakudo/nom: 99b186ba73 | (Elizabeth Mattijsen)++ | src/core/Range.pm

[21:55] <Geth> rakudo/nom: Make Range.excludes-(min|max|infinite|is-int 2.5x as fast

[21:55] <Geth> rakudo/nom:

[21:55] <Geth> rakudo/nom: By using nqp::p6bool() instead of ?

[21:55] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/99b186ba73

[21:58] <timotimo> nice

[22:22] <Geth> rakudo/nom: b1fd0d4108 | (Elizabeth Mattijsen)++ | src/core/Range.pm

[22:22] <Geth> rakudo/nom: Add Range.int-bound(\from,\to) multi candidate

[22:22] <Geth> rakudo/nom:

[22:22] <Geth> rakudo/nom: This allows us to bypass the current (expensive) way in which:

[22:22] <Geth> rakudo/nom:   my ($a,$b) = foo()

[22:22] <Geth> rakudo/nom: is implemented.  Now use foo(my $a, my $b) for a 4.5x speed improvement.

[22:22] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b1fd0d4108

[22:23] <Geth> rakudo/nom: cd35704b0a | (Elizabeth Mattijsen)++ | 3 files

[22:23] <Geth> rakudo/nom: Use the new Range.int-bounds candidate where possible

[22:23] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cd35704b0a

[22:23] <timotimo> lizmat: that won't complain about requiring read-write containers, though? should it perhaps be "is rw" instead of "is raw" aka \-sigil?

[22:24] <lizmat> well, perhaps, but I consider this an internal method really

[22:24] <timotimo> oh, ok

[22:25] * lizmat checks performance effects of "is rw" nonetheless

[22:30] <Geth> rakudo/nom: a5cac94505 | (Elizabeth Mattijsen)++ | src/core/Range.pm

[22:30] <Geth> rakudo/nom: Make sure we get rw containers for Range.int-bounds

[22:30] <Geth> rakudo/nom:

[22:30] <Geth> rakudo/nom: No performance effects otherwise, timotimo++

[22:30] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a5cac94505

[22:34] <lizmat> good night, #perl6-dev!

[22:36] <timotimo> gnite lizmat

[22:37] <brokenchicken> night

[23:12] <Geth> rakudo/nom: bd46cb7280 | (Zoffix Znet)++ | docs/ChangeLog

[23:12] <Geth> rakudo/nom: Fix typo timotimo++

[23:12] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bd46cb7280

[23:14] <MasterDuke> brokenchicken: how should we specify NQP commits in the changelog? the version bump commit? asking because i didn't see a mention of speeding up compiling multiple custom operators, but that was all implemented in NQP

[23:14] <yoleaux2> 08:22Z <lizmat> MasterDuke: actually, pretty serious, so please PR

[23:16] <timotimo> brokenchicken: there was one more comment :)

[23:18] <brokenchicken> MasterDuke: I just list them as normal and list the version bump commit as the SHA.... Though I think I went by commit messages for those version bumps that included theml; so I think I missed it.

[23:18] <brokenchicken> Geth: ver https://github.com/rakudo/rakudo/commit/06abb07f069b026883648afb4c9092f3a6a5de94

[23:18] <Geth> brokenchicken, version bump brought in these changes: https://github.com/perl6/nqp/compare/2016.12-85-gab0728f...2016.12-87-g9c2f39c

[23:18] <brokenchicken> MasterDuke: is that the one?

[23:18] <brokenchicken> The commits can be seen on http://perl6.fail/release/stats (click Commits tab)

[23:19] <MasterDuke> this was the NQP commit: https://github.com/perl6/nqp/commit/de709396b6c267144e8a40d510764b7a91c90662

[23:21] <brokenchicken> Geth: ver https://github.com/rakudo/rakudo/commit/c99fbc67938479b518919d1651fd05db9f9f42ed

[23:21] <Geth> brokenchicken, version bump brought in these changes: https://github.com/perl6/nqp/compare/2016.12-90-g0c249e72...2016.12-97-g7b6fff9

[23:21] <MasterDuke> yep, it's in that list

[23:21] <brokenchicken> Yeah, I missed it. I'll teach geth to give better version bump summaries for next release

[23:22] <MasterDuke> no worries

[23:22] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Fix for RT #130509'

[23:22] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/193048115 https://github.com/rakudo/rakudo/compare/6ad9e0b89a6a...4ae08e0b245c

[23:22] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130509

[23:22] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[23:24] <Geth> rakudo/nom: 1aeea1062f | (Zoffix Znet)++ | docs/ChangeLog

[23:24] <Geth> rakudo/nom: Fix typo timotimo++ ; add missing commit MasterDuke++

[23:24] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1aeea1062f

[23:25] <brokenchicken> (travis): t/04-nativecall/06-struct.t .............. No subtests run

[23:42] <jnthn> fwiw, that test is clean under valgrind (and I can't get it to fail here either)

[23:54] <MasterDuke> jnthn: not quite sure what you meant by "adding an nqp:: op that desugars to precisely the sequence of atpos/bindpos VM ops we see here may be useful"?

[23:55] <MasterDuke> to me, that sounds like "It's just doing the very same thing that nqp::atpos/nqp::bindpos and a temporary register would do..."

[23:59] <jnthn> MasterDuke: Yeah, it's pretty much that

[23:59] <jnthn> MasterDuke: I think lizmat found that the private method call overhead was the main cost, though

[23:59] <jnthn> (Which surprises me a tad too as I thought it might well get inlined...but would need to look more carefully)
