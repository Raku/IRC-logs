[00:02] <lizmat> [Coke] you around ?

[00:05] <lizmat> .tell [Coke] my blog post is ready for publication: if you need more time for yours, please feel free to swap mine for yours

[00:05] <yoleaux> lizmat: I'll pass your message to [Coke].

[00:06] <lizmat> sleep&

[00:09] <tyil> gn

[00:28] <Geth> ¦ rakudo: 2a8287cf89 | (Zoffix Znet)++ | 2 files

[00:28] <Geth> ¦ rakudo: Rename Str.parse-names to Str.uniparse

[00:28] <Geth> ¦ rakudo:

[00:28] <Geth> ¦ rakudo: The original name was chosen to align with `.parse-base` that parses out

[00:28] <Geth> ¦ rakudo: base-X numbers out strings. However, we have a whole block of more closely

[00:28] <Geth> ¦ rakudo: related routines all named in `.uni*` format, so it makes sense for this

[00:28] <Geth> ¦ rakudo: routine's naming to align with those. They are: `infix:<unicmp>`,

[00:28] <Geth> ¦ rakudo: `unimatch`, `uniname`, `uninames`, `unival`, `univals`, `uniprop`,

[00:28] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[00:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2a8287cf89

[00:29] <Geth> ¦ roast: 3efe6cb8da | (Zoffix Znet)++ | 2 files

[00:29] <Geth> ¦ roast: [6.d REVIEW] Rename Str.parse-names to Str.uniparse

[00:29] <Geth> ¦ roast:

[00:29] <Geth> ¦ roast: The original name was chosen to align with `.parse-base` that parses out

[00:29] <Geth> ¦ roast: base-X numbers out strings. However, we have a whole block of more closely

[00:29] <Geth> ¦ roast: related routines all named in `.uni*` format, so it makes sense for this

[00:29] <Geth> ¦ roast: routine's naming to align with those. They are: `infix:<unicmp>`,

[00:29] <Geth> ¦ roast: `unimatch`, `uniname`, `uninames`, `unival`, `univals`, `uniprop`,

[00:29] <Geth> ¦ roast: <…commit message has 7 more lines…>

[00:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3efe6cb8da

[00:31] <Geth> ¦ 6.d-prep: 075c98619c | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[00:31] <Geth> ¦ 6.d-prep: Update .parse-names -> .uniname status

[00:31] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/075c98619c

[00:32] <Geth> ¦ 6.d-prep: a23c68002e | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[00:32] <Geth> ¦ 6.d-prep: Fix markdown error

[00:32] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/a23c68002e

[00:33] <Zoffix> .tell lizmat .uninames added, if you wanted to mention it in your blog post: https://github.com/perl6/doc/commit/bff42f80b1   (.parse-names will still exist as deprecated until 6.e)

[00:33] <yoleaux> Zoffix: I'll pass your message to lizmat.

[00:33] <Zoffix> .tell lizmat I meant .uniparse :)

[00:33] <yoleaux> Zoffix: I'll pass your message to lizmat.

[00:49] <Zoffix> m: '482,PENGUIN'.uniparse.say

[00:49] <evalable6> Zoffix, rakudo-moar 2a8287cf8: OUTPUT: «(exit code 1) Unrecognized character name [482]␤  in block <unit> at /tmp/UtWehELyOE line 1␤␤»

[00:49] <Zoffix> m: '\c[482,PENGUIN]'.say

[00:49] <evalable6> Zoffix, rakudo-moar 2a8287cf8: OUTPUT: «\c[482,PENGUIN]␤»

[00:49] <Zoffix> m: "\c[482,PENGUIN]".say

[00:49] <evalable6> Zoffix, rakudo-moar 2a8287cf8: OUTPUT: «Ǣ🐧␤»

[00:49] <Zoffix> :/ I thought .uniparse/.parse-names used the same nqp routine as \c :/

[00:49] <Zoffix> u: 482

[00:49] <unicodable6> Zoffix, U+3482 <CJK Ideograph Extension A-3482> [Lo] (㒂)

[00:49] <unicodable6> Zoffix, U+4482 <CJK Ideograph Extension A-4482> [Lo] (䒂)

[00:49] <unicodable6> Zoffix, 789 characters in total: https://gist.github.com/edfe37f7a695aa16d7be4e88b98ac1ba

[00:50] <Zoffix> m: 482.chr.say

[00:50] <evalable6> Zoffix, rakudo-moar 2a8287cf8: OUTPUT: «Ǣ␤»

[00:54] <Zoffix> Well, don't wanna add it. overengineering--

[01:05] <AlexDaniel> fwiw I remember that mine is on 23rd :)

[01:40] <Geth> ¦ 6.d-prep: 72a65c80e3 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[01:40] <Geth> ¦ 6.d-prep: Add HTML version of `glop` 6.d review alias

[01:40] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/72a65c80e3

[01:43] <Geth> ¦ roast: 0fdb8da9b1 | (Zoffix Znet)++ | S04-statements/return.t

[01:43] <Geth> ¦ roast: Remove trailing whitespace

[01:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0fdb8da9b1

[01:44] <Geth> ¦ roast: 4e7e4006f4 | (Zoffix Znet)++ | S04-statements/return.t

[01:44] <Geth> ¦ roast: [6.d REVIEW] Remove unsureness comment

[01:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4e7e4006f4

[01:56] <Geth> ¦ roast: ce4968703b | (Zoffix Znet)++ | S32-num/is-prime.t

[01:56] <Geth> ¦ roast: Remove trailing whitespace

[01:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ce4968703b

[01:57] <Geth> ¦ roast: 0d78a135c7 | (Zoffix Znet)++ | S32-num/is-prime.t

[01:57] <Geth> ¦ roast: [6.d REVIEW] Include Num is-prime cases

[01:57] <Geth> ¦ roast:

[01:57] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/4c91839cf5db03c6d2c6dda6a126ba9e89061116

[01:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0d78a135c7

[02:11] <Geth> ¦ roast: 66d29b7aa8 | (Zoffix Znet)++ | S32-temporal/DateTime.t

[02:11] <Geth> ¦ roast: [6.d REVIEW] Add couple more later/earlier leap sec tests

[02:11] <Geth> ¦ roast:

[02:11] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/5e60103de6e4c7dd73e979b42115c9da0415f591

[02:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/66d29b7aa8

[02:37] <Geth> ¦ roast: ddd5420ba7 | (Zoffix Znet)++ | S02-types/WHICH.t

[02:37] <Geth> ¦ roast: [6.d REVIEW] Add IO::CatHandle to WHICH tests

[02:37] <Geth> ¦ roast:

[02:37] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/d042e87ed5046f0fc61b132b8502ac698afc3dea

[02:37] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ddd5420ba7

[02:39] <Geth> ¦ roast: a049fff21e | (Zoffix Znet)++ | S04-statements/while.t

[02:39] <Geth> ¦ roast: [6.d REVIEW] Don't stringify Seq being tested

[02:39] <Geth> ¦ roast:

[02:39] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/b7777a521fa8101f3114c87ec1a295707cb68b5b

[02:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a049fff21e

[02:41] <Geth> ¦ roast: 1ecd6171da | (Zoffix Znet)++ | S04-statements/while.t

[02:41] <Geth> ¦ roast: [6.d REVIEW] Don't stringify Seq being tested

[02:41] <Geth> ¦ roast:

[02:41] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/a8bbde8fa06d5d55bc6d5879a0c84a669d7f0481

[02:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1ecd6171da

[02:53] <Geth> ¦ roast: 84a4645934 | (Zoffix Znet)++ | S03-operators/range-int.t

[02:53] <Geth> ¦ roast: [6.d REVIEW] Expand empty range sum tests

[02:53] <Geth> ¦ roast:

[02:53] <Geth> ¦ roast: Orig https://github.com/perl6/roast/commit/dffb5e954862c955148c12b0bdd6019f667f0f73

[02:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/84a4645934

[03:01] <Geth> ¦ roast: b939ce4a90 | (Zoffix Znet)++ | S32-temporal/Date.t

[03:01] <Geth> ¦ roast: Remove trailing whitespace

[03:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b939ce4a90

[03:01] <Geth> ¦ roast: 7b86b235a6 | (Zoffix Znet)++ | 2 files

[03:01] <Geth> ¦ roast: [6.d REVIEW] Do not stringify tested Arrays

[03:01] <Geth> ¦ roast:

[03:01] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/5e7d2adefd22de7d300d3d520b3cce528d127b5f

[03:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7b86b235a6

[03:21] <Geth> ¦ roast: e3383ba4d0 | (Zoffix Znet)++ | 2 files

[03:21] <Geth> ¦ roast: [6.d REVIEW] Consolidate similar tests in one file

[03:21] <Geth> ¦ roast:

[03:21] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/bfd3effc0232333b7015a008c6a75c14b198fca2

[03:21] <Geth> ¦ roast:       https://github.com/perl6/roast/commit/b0c17ab00c58eec37bc445a44783b1a34d10f8f8

[03:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e3383ba4d0

[03:22] <Geth> ¦ rakudo: 1f99aa145a | (Zoffix Znet)++ | t/spectest.data

[03:22] <Geth> ¦ rakudo: Remove S03-binding/nonsense.t from list of tests

[03:22] <Geth> ¦ rakudo:

[03:22] <Geth> ¦ rakudo: It was consolidated into another file:

[03:22] <Geth> ¦ rakudo: https://github.com/perl6/roast/commit/e3383ba4d0

[03:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1f99aa145a

[03:46] <Geth> ¦ roast: 76b3925762 | (Zoffix Znet)++ | S32-num/power.t

[03:46] <Geth> ¦ roast: [6.d REVIEW] Reformat for clarity

[03:46] <Geth> ¦ roast:

[03:46] <Geth> ¦ roast: - Get rid of file-global confusingly-named var

[03:46] <Geth> ¦ roast: - Use clearer names for numeric constants

[03:46] <Geth> ¦ roast: - Use `is-deeply` to check types are right

[03:46] <Geth> ¦ roast:

[03:46] <Geth> ¦ roast: Partial orig:

[03:46] <Geth> ¦ roast: https://github.com/perl6/roast/commit/f8842792ee68cc43caedd501103f7e8288f46482

[03:47] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/76b3925762

[03:48] <Geth> ¦ 6.d-prep: 480be92a8f | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[03:48] <Geth> ¦ 6.d-prep: Update Zoffix's 6.d reviewer commit mark

[03:48] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/480be92a8f

[12:54] <Geth> ¦ roast: 629b223fab | usev6++ | 5 files

[12:54] <Geth> ¦ roast: [jvm] Fudge new test failures

[12:54] <Geth> ¦ roast:

[12:54] <Geth> ¦ roast: Also replaces some tabs with whitespaces in S17-supply/syntax.t

[12:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/629b223fab

[13:14] <jnthn> lizmat_: "there is B implicit locking"...B? )

[13:15] <lizmat_> I think I wrote B<no> originally, then wordpress ate the <no>

[13:16] <jnthn> ah

[13:16] <jnthn> lizmat++

[13:16] <lizmat> jnthn++   # fixed

[13:18] <tbrowder> nqp question please: do *all* individual objects, including children of objects (e.g., array elements, hash keys and values) need to have a $*W.add_constant entry for types Str, Int, Num, etc.?

[13:18] <jnthn> No

[13:19] <jnthn> The serializer will walk them recursively

[13:21] <tbrowder> jnthn: thnx. how do i know when i need to do it? for instance, i’m expermenting with taking a config string representing a list or hash and ensuring bare numbers are treated as such rather than as a string as they initially arrive in Pod.nqp.

[13:25] <tbrowder> so far that seems to be working but i’m trying to avoid double stringification (i.e., extra enclosing quotes when not needed) and wonder how serialization affects that.

[13:26] <jnthn> It just serializes object graphs with the types they have

[13:26] <jnthn> You only need to add_object something if it will be referred to by a QAST::WVal node really

[13:27] <jnthn> (Which something like install_lexical_symbol will make)

[13:29] <tbrowder> so a constant str or num in a hash or list don’t need any special treatment as long as their types are known?

[13:31] <tbrowder> e.g., my int $a := 3

[13:33] <tbrowder> $a retains its int type even when put into a generic list or hash key’s value.

[13:33] <jnthn> A hash or list can't contain a native int anyway

[13:33] <jnthn> It'll be automatically boxed

[13:33] <jnthn> But yeah, the boxed object will then know its type

[13:33] <jnthn> Be careful that in NQP code, you won't get things auto-boxed into Perl 6 types

[13:34] <jnthn> Which is something else add_constant would do for you

[13:34] <jnthn> Though looking up the Perl 6 Int type, for example, and then using nqp::box_i, would do it

[13:35] <tbrowder> hm, that’s not what i think i’m seeing. when creating a list from an array of strings of numbers they keep str unless i convert them by assigning to an int or num.

[13:35] <tbrowder> ah, autoboxing? maybe that’s part of the problem!

[13:38] <tbrowder> so, watch out for unnecessary use of add_constant, then!

[13:41] <tbrowder> jnthn: got to leave till later, but helpful hints much appreciated. time to review yr nqp course again!

[16:47] <[Coke]> ]/win 2

[16:54] <samcv> /say 99

[16:54] <samcv> /win 99

[16:54] <buggable> samcv, Thank you for entering Accidental /win Lottery! The next draw will happen in 1 week, 2 days, 7 hours, 5 minutes, and 51 seconds

[20:01] <AlexDaniel> uhhhhh

[20:01] <AlexDaniel> did we just… lose an optimization

[20:02] <AlexDaniel> c: 2017.11,2017.12 6c: for 0..20 { $ = ~(+combinations($^row,$_) for 0..$row) }; say now - BEGIN now

[20:02] <committable6> AlexDaniel, ¦2017.11,2017.12: «04===SORRY!04=== Error while compiling /tmp/pxV5Hb7PUA␤Confused␤at /tmp/pxV5Hb7PUA:1␤------> 03608⏏04c: for 0..20 { $ = ~(+combinations($^row␤    expecting any of:␤        whitespace␤ «exit code = 1»»

[20:02] <AlexDaniel> c: 2017.11,2017.12 for 0..20 { $ = ~(+combinations($^row,$_) for 0..$row) }; say now - BEGIN now

[20:02] <committable6> AlexDaniel, ¦2017.11: «0.12636975␤» ¦2017.12: «8.28950117␤»

[20:02] <AlexDaniel> bisect: old=2017.11 for 0..20 { $ = ~(+combinations($^row,$_) for 0..$row) }; say 5 > (now - BEGIN now)

[20:03] <bisectable6> AlexDaniel, Bisecting by output (old=2017.11 new=1f99aa1) because on both starting points the exit code is 0

[20:03] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/0f7ea65bb208cca3d2bc92a53e6193cd

[20:03] <bisectable6> AlexDaniel, (2017-12-08) https://github.com/rakudo/rakudo/commit/af9812fa732927238715730d6c1e025bd89e74eb

[20:04] <AlexDaniel> c: af9812fa73^ for 0..20 { $ = ~(+combinations($^row,$_) for 0..$row) }; say 5 > (now - BEGIN now)

[20:04] <committable6> AlexDaniel, ¦af9812fa73^: «True␤»

[20:04] <AlexDaniel> c: af9812fa73^ for 0..20 { $ = ~(+combinations($^row,$_) for 0..$row) }; say now - BEGIN now

[20:04] <committable6> AlexDaniel, ¦af9812fa73^: «0.1250381␤»

[20:04] <AlexDaniel> c: af9812fa73 for 0..20 { $ = ~(+combinations($^row,$_) for 0..$row) }; say now - BEGIN now

[20:04] <committable6> AlexDaniel, ¦af9812f: «8.65331035␤»

[20:05] <AlexDaniel> c: af9812fa73^ say combinations 50, 50

[20:05] <committable6> AlexDaniel, ¦af9812fa73^: ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[20:06] <AlexDaniel> c: af9812fa73^ say +combinations 50, 50

[20:06] <committable6> AlexDaniel, ¦af9812fa73^: «1␤»

[20:12] <AlexDaniel> Filed it here: https://github.com/rakudo/rakudo/issues/1330

[20:12] <AlexDaniel> it should've been tested, really :)

[20:34] <timotimo> blame bdfoy for finding that count-only and bool-only are kind of broken in most places

[20:35] <AlexDaniel> :D

[20:37] <Zoffix> AlexDaniel: that's "by design" really

[20:37] <Zoffix> I didn't look too hard for a way around it, but aeveral opts were removes in that commit because they were broken for partially consumed iterators

[20:38] <Zoffix> *several

[20:38] <AlexDaniel> that sucks! :)

[20:38] <Zoffix> Tho I thin in case of combinations simply sticking a counter that keeps track could be a fix. gonna look later tonight

[20:44] <b2gills> The original reason for count-only was so that you could get a count without iterating. The other way of getting a count would exhaust the Iterator. So it wasn't really intended that it would be used in addition with pull-one.

[20:44] <Zoffix> ah hehe I even XXX TODOed the Combinations iterator and yeah I'll fix it tonight

[20:46] <Zoffix> b2gills: except there's no way to tell whether an iterator was ever pulled from and under the paradigm you describe it's unsafe to re-use an iterator you did not create, so you lose all potential benefits re-making iteratorss all over the place

[20:47] <Zoffix> at least with current count-only impl; it could be made to return some sentinel value, like IterationEnd

[20:47] <b2gills> It was added to speed up .elems, it was later used for more internal uses

[20:49] <b2gills> I'm not sure if it should be extended, I'm also not sure it shouldn't

[20:49] <AlexDaniel> hmm where's the markdown→wordpress converter?

[20:49] <Zoffix> eco: advent

[20:49] <buggable> Zoffix, Found 3 results: Game::Crypt, Adventure::Engine, Acme::Advent::Highlighter. See https://modules.perl6.org/s/advent

[20:49] <Zoffix> eco: advent:;high

[20:49] <AlexDaniel> cool thanks!

[20:49] <buggable> Zoffix, Nothing found

[20:49] <Zoffix> eco: advent::high

[20:49] <buggable> Zoffix, Acme::Advent::Highlighter 'Preprocessor for Perl 6 Advent Articles': https://github.com/zoffixznet/perl6-Acme-Advent-Highlighter

[20:50] <b2gills> anyway I'm replacing my CPU cooler with one that doesn't have a broken fan, so will be off-line for however long that takes

[20:50] <Zoffix> \o

[20:51] <b2gills> also gives me a chance to run an update

[23:14] <b2gills> That took longer than it should have. It would be nice if they would have taken into consideration the thickness of the protective pads on the brackets when designing the plastic clips that hold it in place. I ended up using screws and plastic washers that I made out of a margarine container.

[23:14] <b2gills> At least it isn't vibrating from the missing fan blade on the CPU fan, and the case fans are so much quieter than the worn out ones they replace.

[23:43] <Geth> ¦ rakudo: 5eed2b0020 | (Zoffix Znet)++ | 4 files

[23:43] <Geth> ¦ rakudo: Re-implement Combinations iter's .[count|bool]-only

[23:43] <Geth> ¦ rakudo:

[23:43] <Geth> ¦ rakudo: Fixes https://github.com/rakudo/rakudo/issues/1330

[23:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5eed2b0020

[23:43] <Geth> ¦ roast: 9a1d5e7ed9 | (Zoffix Znet)++ | MISC/bug-coverage.t

[23:43] <Geth> ¦ roast: Fix off-by-one in a test

[23:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9a1d5e7ed9
