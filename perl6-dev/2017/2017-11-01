[00:00] <buggable> 🎺🎺🎺 It's time for the monthly Accidental /win Lottery 😍😍😍 We have 2 ballots submitted by 2 users! DRUM ROLL PLEASE!...

[00:00] <buggable> And the winning number is 4! Congratulations to AlexDaniel-! You win a can of WD40!

[02:54] <Geth> ¦ rakudo/curfs-candidates-refactor: 270b355edf | (Nick Logan)++ (committed using GitHub Web editor) | src/core/CompUnit/Repository/FileSystem.pm

[02:54] <Geth> ¦ rakudo/curfs-candidates-refactor: Improved META6 info-from-path logic

[02:54] <Geth> ¦ rakudo/curfs-candidates-refactor:

[02:54] <Geth> ¦ rakudo/curfs-candidates-refactor: This improves the Distribution that gets created for a CURFS repo prefix that does -not- contain a META6.json file. It will guess the dist name (as the shortest module name in provides) as well as resources (trying to do a reverse platform-library-name on files in resources/libraries).

[02:54] <Geth> ¦ rakudo/curfs-candidates-refactor:

[02:54] <Geth> ¦ rakudo/curfs-candidates-refactor: This essentially allows the following to work:

[02:54] <Geth> ¦ rakudo/curfs-candidates-refactor: `$ perl6 -e 'my $dist = CompUnit::Repository::FileSystem.new(prefix => $*CWD.absolute).candidates("Inline::Perl5")[0]; CompUnit::RepositoryRegistry.repository-for-name("site").install($dist)'`

[02:54] <Geth> ¦ rakudo/curfs-candidates-refactor: review: https://github.com/rakudo/rakudo/commit/270b355edf

[03:41] <BenGoldberg> .u 🕷

[03:41] <yoleaux> No characters found

[05:32] <Geth> ¦ roast/cur-candidates-tests: c1de5852d0 | (Nick Logan)++ (committed using GitHub Web editor) | S11-repository/candidates.t

[05:32] <Geth> ¦ roast/cur-candidates-tests: Tests for CUR candidates PRs

[05:32] <Geth> ¦ roast/cur-candidates-tests:

[05:32] <Geth> ¦ roast/cur-candidates-tests: Prerequisites:

[05:32] <Geth> ¦ roast/cur-candidates-tests: https://github.com/rakudo/rakudo/pull/1125

[05:32] <Geth> ¦ roast/cur-candidates-tests: https://github.com/rakudo/rakudo/pull/1132

[05:32] <Geth> ¦ roast/cur-candidates-tests: review: https://github.com/perl6/roast/commit/c1de5852d0

[05:34] <Geth> ¦ roast: ugexe++ created pull request #351: Tests for CUR candidates PRs

[05:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/351

[05:34] <synopsebot> SPEC#351 [open]: https://github.com/perl6/roast/pull/351 Tests for CUR candidates PRs

[05:57] <Geth> ¦ rakudo: 581edd58e9 | usev6++ | src/core/ThreadPoolScheduler.pm

[05:57] <Geth> ¦ rakudo: Add bandaid for JVM: no native array in supervisor

[05:57] <Geth> ¦ rakudo:

[05:57] <Geth> ¦ rakudo: For some reasons using a native num array when starting the supervisor thread

[05:57] <Geth> ¦ rakudo: does not work correctly on the JVM backend. It looks like a VMArrayInstance is

[05:57] <Geth> ¦ rakudo: created (instead of VMArrayInstance_n). See also

[05:57] <Geth> ¦ rakudo: https://irclog.perlgeek.de/perl6-dev/2017-10-31#i_15383761

[05:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/581edd58e9

[06:28] <bartolin> .tell pmurias: leaving a note somewhere about bugs in rakudo.js that have the same cause in rakudo.jvm would be great. I don't have a strong opinion about *where* to write it down, though. probably a short ticket/issue tagged with 'jvm' would make sense

[06:28] <yoleaux> bartolin: What kind of a name is "pmurias:"?!

[06:28] <bartolin> .tell pmurias leaving a note somewhere about bugs in rakudo.js that have the same cause in rakudo.jvm would be great. I don't have a strong opinion about *where* to write it down, though. probably a short ticket/issue tagged with 'jvm' would make sense

[06:28] <yoleaux> bartolin: I'll pass your message to pmurias.

[07:11] <Geth> ¦ rakudo: de92e34013 | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/ChangeLog

[07:11] <Geth> ¦ rakudo: Start the changelog for 2017.11

[07:11] <Geth> ¦ rakudo:

[07:11] <Geth> ¦ rakudo: So that others have some place to log their changes if they want to.

[07:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/de92e34013

[07:30] <[Tux]> Rakudo version 2017.10-66-gde92e3401 - MoarVM version 2017.10-29-g116c7a13

[07:30] <[Tux]> csv-test-xs-20      0.442 -  0.512

[07:30] <[Tux]> csv-ip5xs           1.132 -  1.141

[07:30] <[Tux]> test-t              3.294 -  3.338

[07:30] <[Tux]> test               12.065 - 12.206

[07:30] <[Tux]> csv-parser         12.266 - 12.334

[07:30] <[Tux]> csv-ip5xs-20       13.062 - 13.200

[07:30] <[Tux]> test-t-20 --race   20.798 - 21.685

[07:30] <[Tux]> test-t-20          60.100 - 60.474

[09:42] <lizmat> Files=1229, Tests=75828, 318 wallclock secs (14.62 usr  5.28 sys + 2196.31 cusr 214.70 csys = 2430.91 CPU)

[10:24] <pmurias> bartolin: creating tickets is fine to me

[10:24] <yoleaux> 06:28Z <bartolin> pmurias: leaving a note somewhere about bugs in rakudo.js that have the same cause in rakudo.jvm would be great. I don't have a strong opinion about *where* to write it down, though. probably a short ticket/issue tagged with 'jvm' would make sense

[10:25] <wander> I am looking for the implementation of hyper operator "»". Anyone knows its location?

[10:29] <pmurias> on github should I have a [JVM] in the ticket/issue title or is a JVM github label enough

[10:36] <pmurias> ?

[11:38] <Geth> ¦ nqp: fcc0fedfd4 | pmurias++ | src/vm/js/Operations.nqp

[11:38] <Geth> ¦ nqp: [js] Fix 3 argument while with redo

[11:38] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/fcc0fedfd4

[11:38] <Geth> ¦ nqp: f924509c17 | pmurias++ | t/nqp/014-while.t

[11:38] <Geth> ¦ nqp: Test that redo works with 3 argument while

[11:38] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f924509c17

[11:47] <Geth> ¦ rakudo: 6389cea9f2 | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm

[11:47] <Geth> ¦ rakudo: Add Worker.worked attribute

[11:47] <Geth> ¦ rakudo:

[11:47] <Geth> ¦ rakudo: - number of wallclock seconds the Worker actually worked

[11:47] <Geth> ¦ rakudo: - would be nice to get amount of CPU as well, but that's currently not possible

[11:47] <Geth> ¦ rakudo:   - OTOH, assuming CPU intensive jobs, this is probably 1:1 with CPU

[11:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6389cea9f2

[11:55] <travis-ci> NQP build failed. pmurias 'Test that redo works with 3 argument while'

[11:55] <travis-ci> https://travis-ci.org/perl6/nqp/builds/295707257 https://github.com/perl6/nqp/compare/e4e2f81c694f...f924509c17f9

[12:54] <Geth> ¦ rakudo: 2ec29f20b8 | (Zoffix Znet)++ (committed using GitHub Web editor) | CONTRIBUTING.md

[12:54] <Geth> ¦ rakudo: Add a blurb about filing Issues

[12:54] <Geth> ¦ rakudo:

[12:54] <Geth> ¦ rakudo: Since this document is linked to from "New Issue" page, it's

[12:54] <Geth> ¦ rakudo: helpful to include "rules" for bug reports first and place all

[12:54] <Geth> ¦ rakudo: the info about contributions later.

[12:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2ec29f20b8

[12:54] <Geth> ¦ rakudo: c360d9a28d | (Zoffix Znet)++ (committed using GitHub Web editor) | CONTRIBUTING.md

[12:54] <Geth> ¦ rakudo: Add more separation between sections

[12:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c360d9a28d

[13:05] <jnthn> lizmat: I'm not so keen on 6389cea9f2; calls to time_n are not free

[13:06] <jnthn> Also it's going to give very dubious results with non-blocking awaits

[13:07] <jnthn> Would have to be moved into the top level of the method to be accurate

[13:07] <jnthn> m: for ^1000000 { }; say now - BEGIN now

[13:07] <camelia> rakudo-moar 6389cea9f: OUTPUT: «0.2239942␤»

[13:07] <jnthn> m: for ^1000000 { nqp::time_n }; say now - BEGIN now

[13:07] <camelia> rakudo-moar 6389cea9f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::time_n, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3for ^1000000 { nqp::time_n 7⏏5}; say now - BEGIN now␤    expecting any of:␤        argument list␤»

[13:08] <jnthn> m: use nqp; for ^1000000 { nqp::time_n }; say now - BEGIN now

[13:08] <camelia> rakudo-moar 6389cea9f: OUTPUT: «0.2580639␤»

[13:08] <Geth> ¦ rakudo: d48e446ddb | (Zoffix Znet)++ | .github/ISSUE_TEMPLATE.md

[13:08] <Geth> ¦ rakudo: Add ISSUE_TEMPLATE.md

[13:08] <Geth> ¦ rakudo:

[13:08] <Geth> ¦ rakudo: GitHub uses it as a template for new issues.

[13:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d48e446ddb

[13:08] <jnthn> m: for ^10000000 { nqp::time_n }; say now - BEGIN now

[13:08] <camelia> rakudo-moar 6389cea9f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Could not find nqp::time_n, did you forget 'use nqp;' ?␤at <tmp>:1␤------> 3for ^10000000 { nqp::time_n 7⏏5}; say now - BEGIN now␤    expecting any of:␤        argument list␤»

[13:08] <jnthn> m: use nqp; for ^10000000 { nqp::time_n }; say now - BEGIN now

[13:08] <camelia> rakudo-moar 6389cea9f: OUTPUT: «2.3208378␤»

[13:08] <jnthn> m: use nqp; for ^10000000 { }; say now - BEGIN now

[13:08] <camelia> rakudo-moar 6389cea9f: OUTPUT: «1.8529501␤»

[13:08] <jnthn> m: say 1.85 / 2.32

[13:08] <camelia> rakudo-moar 6389cea9f: OUTPUT: «0.797414␤»

[13:09] <jnthn> I think we should perhaps do that in a module and by using .wrap

[13:09] <jnthn> Like my StuckAwaits finder

[13:10] <Geth> ¦ rakudo: 5e158d9c6b | (Zoffix Znet)++ (committed using GitHub Web editor) | .github/ISSUE_TEMPLATE.md

[13:10] <Geth> ¦ rakudo: Simplify wording

[13:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5e158d9c6b

[13:19] <Geth> ¦ rakudo: b386963a37 | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm

[13:19] <Geth> ¦ rakudo: One last place where we can use push-worker

[13:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b386963a37

[13:27] <lizmat> sorry jnthn, missed your remarks here so far because I was watching #moarvm, but they're noted

[13:42] <lizmat> jnthn: do we have something cheaper than nqp::time_n ?   Guess not  :-(

[13:43] <jnthn> No, but I don't really think profiling should be in "normal" code, we should instrument stuff from the outside

[13:45] <lizmat> ok, removing $!worked atm

[13:45] <lizmat> it was visible in performance for test-t --race

[13:45] <jnthn> I guess that area's a hot path given every single scheduled task goes through it

[13:46] <lizmat> yup

[13:48] <Geth> ¦ rakudo: 2377624729 | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm

[13:48] <Geth> ¦ rakudo: Remove Worker.worked, it was too heavy to be run always

[13:48] <Geth> ¦ rakudo:

[13:48] <Geth> ¦ rakudo: Also move update of Worker.total to run-one

[13:48] <Geth> ¦ rakudo: - so we don't lose any completions not seen by supervisor yet at end

[13:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2377624729

[14:08] <lizmat> jnthn: is it correct that if we start a ThreadPoolScheduler with initial threads > 0, that we don't get a supervisor ?

[14:10] <jnthn> Um, no

[14:10] <lizmat> ok, I guess then we have a buglet  :-)

[14:10] <lizmat> by default, we start with 0 initial threads, right ?

[14:10] <jnthn> Right :)

[14:10] <lizmat> ok, so not something that would cause a problem with all of the things I tried so far :-)

[14:15] <lizmat> ah, scratch that, it *is* doing the right thing

[14:18] <Zoffix> Just reading the code, looks like in this code we create an initial worker in self!general-queue, but then immediatelly throw it away in the following loop and create a new replacement. i.e. we create a new IterationBuffer instead of pushing more workers into the buffer from $!general-workers: https://github.com/rakudo/rakudo/blob/master/src/core/ThreadPoolScheduler.pm#L668-L682

[14:20] <jnthn> Zoffix: Yes

[14:20] <jnthn> Which we MUST do

[14:20] <jnthn> Otherwise those lists are not immutable

[14:20] <jnthn> And we rely on being able to read them elsewhere without a lock acquisition

[14:22] <jnthn> bbi1h

[14:23] <Zoffix> &push-worker doesn't re-create workers.

[14:24] <Zoffix> And just clones the buffer; so we could clone the buffer with one worker up in it and add more instead of paying for 1 worker we never use vOv

[14:24] * Zoffix &

[14:29] <lizmat> Zoffix: good point about push-worker

[14:39] <AlexDaniel> pmurias: I think just using the ｢JVM｣ label is enough, no need to duplicate in the title

[14:40] <[Coke]> yes, -1 on [] tags on github issues.

[14:40] <[Coke]> er, on [] *subject* tags.

[14:41] <Zoffix> lizmat: my point was more about these two lines: https://github.com/rakudo/rakudo/blob/master/src/core/ThreadPoolScheduler.pm#L670-L671  Instead of doing `nqp::create(IterationBuffer);` we could do `nqp::clone($!general-workers)` and change `my int $i = -1;` to `my int $i = 0;` and we save one `GeneralWorker.new`

[14:42] <Zoffix> And this in submethod BUILD and we already writing to $!general-workers there without a lock: https://github.com/rakudo/rakudo/blob/master/src/core/ThreadPoolScheduler.pm#L682  so I don't think the restriction for immutability applies there, so perhaps we can do away with nqp::clone entirely and *just* push

[14:43] <Zoffix> Like we're still building teh scheduler object, there won't be multiple threads accessing things yet, right?

[14:43] <lizmat> Zoffix: that's for creating the ThreadPoolScheduler object

[14:43] <lizmat> indeed, so we could just start at 0 :-)

[14:44] <lizmat> lemme write up some code for that  :-)

[14:45] <Zoffix> yeah, probably can. Just need to also add `$!general-queue := nqp::create(Queue);` `self!maybe-start-supervisor();` calls that self!general-queue does and then we avoid paying for the lock it's doing too.

[14:45] * Zoffix re-&s

[15:19] <Geth> ¦ rakudo: 5d0ccf73a4 | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm

[15:19] <Geth> ¦ rakudo: Use a dedicated first-worker

[15:19] <Geth> ¦ rakudo:

[15:19] <Geth> ¦ rakudo: Instead of cloning an empty buffer and then pushing with push-worker.

[15:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5d0ccf73a4

[15:19] <Geth> ¦ rakudo: bfcc43ec9a | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm

[15:19] <Geth> ¦ rakudo: Easify ThreadPoolScheduler creation with initial_threads > 0

[15:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/bfcc43ec9a

[15:31] <Geth> ¦ rakudo: 87e8720202 | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm

[15:31] <Geth> ¦ rakudo: Simplify ThreadPoolScheduler creation a bit further

[15:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/87e8720202

[16:09] <Geth> ¦ rakudo: 5eeb72a9f5 | (Elizabeth Mattijsen)++ | src/core/Range.pm

[16:09] <Geth> ¦ rakudo: Make Range.sum sensible for -Inf/Inf endpoints

[16:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5eeb72a9f5

[16:10] <lizmat> not 100% sure that (-Inf .. Inf).sum should be 0 or NaN

[16:12] <perlpilot> shouldn't it be Inf?

[16:12] <lizmat> perlpilot: assuminng -Inf and Inf have the same distance from 0, I would think not

[16:12] <Zoffix> Definite NaN for me there, 'cause you're summing up end points and those are NaN per IEEE

[16:13] <Zoffix> Like endpoints are included in the summing

[16:13] <Zoffix> m: say -Inf + Inf

[16:13] <camelia> rakudo-moar 87e872020: OUTPUT: «NaN␤»

[16:13] * lizmat adjusts accordingly

[16:14] <Zoffix> lizmat: well, as I commented on the ticket, that also leaves out excluded Infs :)

[16:14] <Zoffix> And I don't know what those should be

[16:14] * Zoffix adds another comment

[16:15] <lizmat> m: Inf == Inf + 1

[16:15] <camelia> rakudo-moar 87e872020: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "==" in expression "Inf == Inf +" in sink context (line 1)␤»

[16:15] <lizmat> m: say Inf == Inf + 1

[16:15] <camelia> rakudo-moar 87e872020: OUTPUT: «True␤»

[16:15] <lizmat> by that logic, endpoints don't matter when Inf is concerned (at least in my book :-)

[16:16] <lizmat> *exclusion / inclusion of endpoints

[16:16] <Zoffix> Yeah, agreed.

[16:17] <Zoffix> So then (NaN..<anything>).sum => NaN; (<anything>..NaN).sum => NaN; (-Inf..Inf) => NaN; (-Inf..<anything else> .... ummm

[16:18] <Zoffix> What about -Inf..-Inf? :)

[16:18] <lizmat> Inf

[16:18] <lizmat> hmmm  NaN probably

[16:18] <Geth> ¦ rakudo: 21efe96ffb | (Elizabeth Mattijsen)++ | src/core/Range.pm

[16:18] <Geth> ¦ rakudo: -Inf .. Inf should be NaN, not 0

[16:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/21efe96ffb

[16:19] <Zoffix> Or Inf..Inf; both are empty ranges. And that makes exclusion points come into play, since Inf^..Inf is non-empty

[16:19] <Zoffix> m: say -Inf + -Inf

[16:19] <camelia> rakudo-moar 87e872020: OUTPUT: «-Inf␤»

[16:19] <lizmat> I think the distance between Inf and Inf is Inf, really

[16:19] * Zoffix shrugs; feels like throwing an exception in these cases as OP proposed would save some headache :)

[16:20] <Zoffix> m: say eager Inf..Inf

[16:20] <Zoffix> I would've thought that'd return an empty list

[16:21] <Zoffix> ZofBot: the worms! They're escaping the can!

[16:21] <ZofBot> Zoffix, {*} is a "magic" token that means "do the next bit of the multi-dispatch here"

[16:21] <camelia> rakudo-moar 87e872020: OUTPUT: «(timeout)»

[16:22] <lizmat> FWIW, these Range.sum changes don't cause any test breakage

[16:22] <lizmat> so I assume there simply aren't any tests for it

[16:24] * lizmat goes back to hacking on concurrency stuff

[16:25] * Zoffix goes back on playing with the Intro P6 brochure :)

[16:26] <timotimo> Zoffix: your own or the one wendy maintains?

[16:28] <lizmat> woolfy smiles

[16:36] <Zoffix> timotimo: both: Wendy's brochure but with my own take on it. It might end up the new Wendy's brochure or might not. So far I'm treating it just as a design project for fun.

[16:39] <timotimo> OK!

[16:39] <timotimo> i just happen to have a introducing perl6 brochure now, too

[16:39] <lizmat> .oO( they're spreading! :)

[16:56] <buggable> New CPAN upload: JSON-Fast-0.9.6.tar.gz by TIMOTIMO https://cpan.metacpan.org/authors/id/T/TI/TIMOTIMO/Perl6/JSON-Fast-0.9.6.tar.gz

[17:00] <lizmat> still think that URL should point to a modules.perl6.org page, rather than the tarball

[17:02] <Geth> ¦ rakudo: 9254396270 | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm

[17:02] <Geth> ¦ rakudo: Improve readability of ThreadPoolScheduler

[17:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9254396270

[17:05] <Geth> ¦ rakudo: a2ae00edef | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[17:05] <Geth> ¦ rakudo: Remove some superfluous code

[17:05] <Geth> ¦ rakudo:

[17:05] <Geth> ¦ rakudo: - we don't need to stub Telemetry::Period anymore

[17:05] <Geth> ¦ rakudo: - now that we have snapper, we're probably going to be doing less with T

[17:05] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a2ae00edef

[17:22] <lizmat> dinner&

[17:40] <Zoffix> buggable: toast

[17:40] <buggable> Zoffix, Between 2017.10-78-g21efe96 and 2017.10: 19 (2.14%) modules got burnt; 20 (2.26%) got unsucced; 265 (29.91%) out of 886 modules appear unusable. See https://toast.perl6.party/ for details.

[17:41] <Zoffix> Will looks through the burns and PR the fixes for `readonly $/` issues.

[17:41] <Zoffix> *later today

[17:48] <timotimo> aha, yamlish was hit with readonly $/

[17:55] <timotimo> this diff looks ugly

[17:55] <timotimo> i wonder what the right fix for that kind of problem is

[17:57] <timotimo> Zoffix: https://gist.github.com/timo/8c1c395114765624803e5ea8ed223e55

[17:58] <Zoffix> :o

[17:58] <Zoffix> timotimo: just rename the method's parameter

[17:58] <Zoffix> Like:   method single-quoted($_) { .make: $<value>.Str.subst(/<Grammar::foldable-whitespace>/, ' ', :g).subst("''", "'", :g); }

[17:59] <timotimo> ah

[17:59] <Zoffix> Like:   method single-quoted($_) { .make: .<value>.Str.subst(/<Grammar::foldable-whitespace>/, ' ', :g).subst("''", "'", :g); }

[17:59] <timotimo> well, that's easy

[17:59] * Zoffix &

[18:00] <timotimo> fix pushed

[18:53] <Geth> ¦ rakudo: 5c96d554c0 | skids++ | 3 files

[18:53] <Geth> ¦ rakudo: Implement metamethod shorthand syntax (RT#131478)

[18:53] <Geth> ¦ rakudo:

[18:53] <Geth> ¦ rakudo: Silence Perl5 warning on $.<!alpha>

[18:53] <Geth> ¦ rakudo:   Create a faux non-multipart-name desigilname token

[18:53] <Geth> ¦ rakudo:   Teach dissect_longname to digest said token

[18:53] <Geth> ¦ rakudo:   Teach variable action to generate a p6callmethodhow

[18:53] <Geth> ¦ rakudo:   Adjust parsing to handle the meta thrigil

[18:53] <synopsebot> RT#131478 [open]: https://rt.perl.org/Ticket/Display.html?id=131478 Warning about $. when using metamethod

[18:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5c96d554c0

[18:53] <Geth> ¦ rakudo: e4bb219d0c | (Zoffix Znet)++ (committed using GitHub Web editor) | 3 files

[18:53] <Geth> ¦ rakudo: Merge pull request #1178 from skids/rt131478

[18:53] <synopsebot> RAKUDO#1178 [closed]: https://github.com/rakudo/rakudo/pull/1178 Implement metamethod shorthand syntax (RT#131478)

[18:53] <Geth> ¦ rakudo:

[18:53] <Geth> ¦ rakudo: Implement metamethod shorthand syntax (RT#131478)

[18:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e4bb219d0c

[18:56] <timotimo> why do i keep getting yamlish version 0.0.3 even though i pushed 0.0.4 to github?

[18:56] <timotimo> https://github.com/Leont/yamlish/commit/3f9091352d3bfbc6ad6709e03125df1112cd1abe

[18:56] <Zoffix> zef update?

[18:57] <Zoffix> ===> Fetching [OK]: YAMLish:ver<0.0.4>:auth<

[18:58] <timotimo> i thought i did that already

[18:58] <timotimo> maybe before the last meta update

[18:58] <Geth> ¦ rakudo: 86d541f44e | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[18:58] <Geth> ¦ rakudo: Make Telemetry report configurable

[18:58] <Geth> ¦ rakudo:

[18:58] <Geth> ¦ rakudo: - both by the column name as well with the method name

[18:58] <Geth> ¦ rakudo: - add :$legend parameter to add legend of columns shown

[18:58] <Geth> ¦ rakudo: - show report generation time with whole second granularity

[18:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/86d541f44e

[18:59] <timotimo> lizmat: might also want to repeat the header every n lines

[18:59] <timotimo> with the yamlish fix you can now install cro without skipping tests

[18:59] <Zoffix> If update don't fix it; try `zef --/cached ...` to avoid the cached version (no idea if `update` clears the cache)

[18:59] <timotimo> on latest rakudo

[19:10] <AlexDaniel> m: say (5..-5).sum

[19:10] <camelia> rakudo-moar a2ae00ede: OUTPUT: «0␤»

[19:10] <AlexDaniel> m: say (5..-10).sum

[19:10] <camelia> rakudo-moar a2ae00ede: OUTPUT: «0␤»

[19:12] <Geth> ¦ rakudo: 474feb0933 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[19:12] <Geth> ¦ rakudo: Add :header-repeat = 32 parameter to Telemetry report

[19:12] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/474feb0933

[19:12] <lizmat> timotimo: your wish...  :-)  ^^^

[19:17] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Easify ThreadPoolScheduler creation with initial_threads > 0'

[19:17] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/295799738 https://github.com/rakudo/rakudo/compare/23776247298f...bfcc43ec9a9c

[19:18] <gfldex> lizmat: any chance to get some RAM stats into Telemetry?

[19:20] <lizmat> point to a fast way of getting access to that info in code, and I'll put it in  :-)

[19:20] <lizmat> hmmm... perhaps we need to ff timotimo's vmhealth work in Moar ?

[19:22] <Zoffix> AlexDaniel: whoops :}

[19:22] <Zoffix> AlexDaniel: oh wait that's right

[19:22] <AlexDaniel> ?

[19:22] <AlexDaniel> yeah, that's correct

[19:22] * Zoffix is tired :)

[19:23] <timotimo> doesn't getrusage give you memory usage?

[19:25] <jnthn> I think there's some memory stuff in there

[19:25] <Geth> ¦ rakudo: 5e7dfe52fd | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[19:25] <Geth> ¦ rakudo: Further Telemetry tweaks:

[19:25] <Geth> ¦ rakudo:

[19:25] <Geth> ¦ rakudo: - format initialization only needs values

[19:25] <Geth> ¦ rakudo: - remove <s gtq ttq> from default columns

[19:25] <Geth> ¦ rakudo:   - they're really only for deep debugging

[19:25] <Geth> ¦ rakudo: - change some double quotes strings to single quoted (for clarity)

[19:25] <Geth> ¦ rakudo: - make sure no header-repeat doesn't explode

[19:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5e7dfe52fd

[19:26] <lizmat> jnthn: which "in there" ?

[19:29] <jnthn> getrusage

[19:30] <lizmat> m: use nqp; dd nqp::elems(nqp::getrusage)   # indeed !

[19:30] <camelia> rakudo-moar 86d541f44: OUTPUT: «18␤»

[19:30] <lizmat> okidoki wow

[19:31] <lizmat> where are these documented ?

[19:31] <jnthn> http://man7.org/linux/man-pages/man2/getrusage.2.html

[19:32] <jnthn> And our mapping just returns an array of those

[19:32] <jnthn> And there's nqp::const iirc

[19:39] <lizmat> and with struct timeval ru_utime flattened ?

[19:41] * lizmat starts to wonder whether timotimo has JITted getrusage correctly

[19:42] <timotimo> oh?

[19:42] <timotimo> there's not really a way to mis-jit it?

[19:42] <timotimo> what symptom are you seeing?

[19:43] <timotimo> it's probable that some fields are simply not supported in some OSes

[19:44] <timotimo> on my system just outputting getrusage's contents gives me (0 140815 0 16715 75916 0 0 0 14227 1 0 72 0 0 0 0 70 1)

[19:47] <lizmat> timotimo: I seem to recall only expecting 4 return values ?

[19:47] <timotimo> not sure what that's about

[19:47] <lizmat> ok, then nvm

[19:48] <lizmat> sorry for the noise

[19:50] <jnthn> lizmat: yes, timeval flattened in

[19:50] * gfldex .oO( the sound of progress is quite noisy )

[19:56] <lizmat> hmmm... how to find out whether we have a $*SCHEDULER without actually creating one

[19:56] <lizmat> I guess looking in PROCESS

[20:00] <lizmat> is there a specific reason why:

[20:00] <lizmat> https://github.com/rakudo/rakudo/blob/master/src/core/Proc.pm#L177

[20:00] <lizmat> does not say scheduler => $*SCHEDULER ?

[20:01] <lizmat> feels wrong to me

[20:34] <Zoffix> I vaguelly remember (or maybe it's a false memory) jnthn saying he made it that way because people wouldn't expect a Proc (which is meant to be blocking) to depend on what the user might've configured $*SCHEDULER be as.

[20:49] <jnthn> Correct.

[20:49] <jnthn> We always have a scheduler, though?

[20:49] <lizmat> yes

[20:49] <lizmat> nowadays we do

[20:50] <jnthn> I think we found stuff got racey if not :)

[20:50] <lizmat> indeed

[21:02] <Geth> ¦ rakudo: 3b4f0c6ceb | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[21:02] <Geth> ¦ rakudo: More Telemetry additions

[21:02] <Geth> ¦ rakudo:

[21:02] <Geth> ¦ rakudo: - support for max-rss and ix-rss, add max-rss to default report

[21:02] <Geth> ¦ rakudo: - .gist/.Str no longer special case an empty Telemetry / Period

[21:02] <Geth> ¦ rakudo: - only decont a/b once in infix:<->

[21:02] <Geth> ¦ rakudo: - auto-calculate width of "-" footer for a column

[21:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3b4f0c6ceb

[21:22] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Simplify ThreadPoolScheduler creation a bit further'

[21:22] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/295805502 https://github.com/rakudo/rakudo/compare/bfcc43ec9a9c...87e8720202c0

[21:23] <gfldex> lizmat: tyvm :)

[21:23] <lizmat> gfldex: more goodies coming  :-)

[21:33] <El_Che> Native call is still causing non deterministic fails on the native call tests: https://gist.github.com/nxadm/cd7559b6611f2a921eca34265f546e82#file-non-deterministic-failed-test-L2936 . I thought AlexDaniel told me it was supposed to be fixed (Rakudo 2017.10)

[21:33] <El_Che> I don't post a bug because it's a known issue

[21:33] <El_Che> just info that it doesn't seem fixed after all

[21:34] <AlexDaniel> that does not seem to be the same issue?

[21:34] <El_Che> I don't remember the exact test (I can look it up), but it was nativecall ánd very random (1 out of 10 maybe)

[21:35] <El_Che> I think I see it even less now

[21:35] <El_Che> but still there

[21:35] <AlexDaniel> El_Che: I don't think that this particular problem is a known issue, please file a bug report

[21:35] <gfldex> lizmat: gtc may be a bit narrow, see https://gist.github.com/gfldex/d83539e94510fe6f8b0bd5adb68654cc

[21:35] <El_Che> AlexDaniel: I will do

[21:42] <Geth> ¦ roast: 6586549d82 | usev6++ | 6 files

[21:42] <Geth> ¦ roast: [jvm] Skip some tests that fail badly

[21:42] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6586549d82

[21:43] <Geth> ¦ rakudo: ac738b988e | usev6++ | t/spectest.data

[21:43] <Geth> ¦ rakudo: [jvm] Don't run test files that hang regularly

[21:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ac738b988e

[21:47] <El_Che> AlexDaniel: I will try to gather some dat first

[21:49] <Geth> ¦ roast: d0693d9c91 | usev6++ | S32-str/parse-names.t

[21:49] <Geth> ¦ roast: Fix typo in description

[21:49] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d0693d9c91

[21:53] <AlexDaniel> El_Che++

[21:55] <El_Che> Every commit to the rakudo-pkg repo equals 12x compiling rakudo, so we'll end up with something :)

[21:57] <Geth> ¦ rakudo: 7144dc290c | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[21:57] <Geth> ¦ rakudo: Still more Telemetry goodies

[21:57] <Geth> ¦ rakudo:

[21:57] <Geth> ¦ rakudo: - export all of the metrics as subs

[21:57] <Geth> ¦ rakudo:   - so calling "max-rss" will give you the current max-rss value

[21:57] <Geth> ¦ rakudo: - added some internal documentation for clarity

[21:57] <Geth> ¦ rakudo: - removed protos for methods, as we don't need them outside the setting

[21:57] <Geth> ¦ rakudo: - multiple calls to snapper() now allow changing of period size on-the-fly

[21:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7144dc290c

[22:02] <Geth> ¦ rakudo: 73e1faaa71 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[22:02] <Geth> ¦ rakudo: Increase the size of gtc/ttc, gfldex++

[22:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/73e1faaa71

[22:02] <travis-ci> Rakudo build canceled. Elizabeth Mattijsen 'Still more Telemetry goodies

[22:02] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/295977089 https://github.com/rakudo/rakudo/compare/ac738b988e7c...7144dc290c48

[22:02] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[22:03] <gfldex> lizmat: if %format would have a ref to the sub that provides a field, one could output the whole lot easily

[22:03] <lizmat> gfldex: ??

[22:05] <gfldex> %format = max-rss => ["   max-rss", { .max-rss.fmt('%10d') }, "Maximum ...", &max-rss ], ...

[22:06] <gfldex> %format<max-rss wallclock>[*,2]».()

[22:06] <lizmat> I don't understand what it would bring to add the ref to the associated sub

[22:08] <gfldex> Telemetry.new.gist is very lean

[22:08] <gfldex> by building a connection between fields, legend entries and the subs, one can make a fat .gist with ease

[22:09] <lizmat> ok, I see where you're going

[22:10] <gfldex> I still got my golfed httpd around. And I want to blog about Telementry. It would be nice if easy things would be easy. :)

[22:11] <lizmat> yeah yeah...  typing as fast as I can  :-)

[22:14] <Geth> ¦ rakudo/curfs-candidates-refactor: 683df8bf6c | (Nick Logan)++ (committed using GitHub Web editor) | src/core/CompUnit/Repository/FileSystem.pm

[22:14] <Geth> ¦ rakudo/curfs-candidates-refactor: Improve distribution lookup cache

[22:14] <Geth> ¦ rakudo/curfs-candidates-refactor:

[22:14] <Geth> ¦ rakudo/curfs-candidates-refactor: For a single dist CUR like this it doesn't really matter, but following the same template as CURI allows run time generated CURFS lookup to work.

[22:14] <Geth> ¦ rakudo/curfs-candidates-refactor: review: https://github.com/rakudo/rakudo/commit/683df8bf6c

[22:15] <Geth> ¦ roast/cur-candidates-tests: 530b72e5a1 | (Nick Logan)++ (committed using GitHub Web editor) | S11-repository/candidates.t

[22:15] <Geth> ¦ roast/cur-candidates-tests: Ensure module lookup after installation works

[22:15] <Geth> ¦ roast/cur-candidates-tests:

[22:15] <Geth> ¦ roast/cur-candidates-tests: Check that we don't cache when .resolve'ing a missing module by immediately installing said module and seeing if .resolve returns non-Nil.

[22:15] <Geth> ¦ roast/cur-candidates-tests: review: https://github.com/perl6/roast/commit/530b72e5a1

[22:26] <Zoffix> m: .say for <a b>.any

[22:26] <camelia> rakudo-moar 73e1faaa7: OUTPUT: «(Mu)␤»

[22:26] <Zoffix> oh wait, there's already a bug for that..

[22:27] <Zoffix> RT#131639

[22:27] <synopsebot> RT#131639 [new]: https://rt.perl.org/Ticket/Display.html?id=131639 [BUG] Junction:D.iterator returns an iterator that .pulls-one a Mu type object

[22:31] <Geth> ¦ rakudo: cf1742dca0 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[22:31] <Geth> ¦ rakudo: More Telemetry goodness

[22:31] <Geth> ¦ rakudo:

[22:31] <Geth> ¦ rakudo: - add support for id-rss (which is usually 0 for me)

[22:31] <Geth> ¦ rakudo: - add legend by default when in END processing

[22:31] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/cf1742dca0

[22:42] <Geth> ¦ rakudo: 91e00e6801 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[22:42] <Geth> ¦ rakudo: Telemetry exports T, allowing for T<cpu wallclock>

[22:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/91e00e6801

[22:42] <lizmat> gfldex: ^^^

[22:42] <gfldex> :)

[23:16] <gfldex> lizmat: max-rss seams to be in kb not bytes

[23:20] <lizmat> m: use Telemetry; say T<max-rss>

[23:20] <camelia> rakudo-moar 91e00e680: OUTPUT: «92252␤»

[23:20] <lizmat> mine says: 84086784

[23:20] <lizmat> argh, I guess MacOS is returning bytes rather than K's

[23:23] <Geth> ¦ rakudo: 96751ee87c | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[23:23] <Geth> ¦ rakudo: Add Telemetry is-rss,min-flt,maj-flt,nswap,inblock,outblock

[23:23] <Geth> ¦ rakudo:

[23:23] <Geth> ¦ rakudo: Which all return 0 apparently on MacOS

[23:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/96751ee87c

[23:34] <Geth> ¦ rakudo: 7e00908cb2 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[23:34] <Geth> ¦ rakudo: Normalize all Telemetry x-rss to Kbytes

[23:34] <Geth> ¦ rakudo:

[23:34] <Geth> ¦ rakudo: - on MacOS reported values are bytes

[23:34] <Geth> ¦ rakudo: - on Linux they are apparently Kbytes

[23:34] <Geth> ¦ rakudo: - Kbytes seems to be the more sensible scale

[23:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/7e00908cb2

[23:52] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make Range.sum sensible for -Inf/Inf endpoints'

[23:52] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/295824731 https://github.com/rakudo/rakudo/compare/87e8720202c0...5eeb72a9f514

[23:52] <buggable> [travis build above] ✓ All failures are due to: GitHub connectivity (1 failure).
