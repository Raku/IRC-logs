[01:52] <Geth> ¦ rakudo: af9812fa73 | (Zoffix Znet)++ | src/core/Rakudo/Iterator.pm

[01:52] <Geth> ¦ rakudo: Fix incorrect .count-only/.bool-only impls

[01:52] <Geth> ¦ rakudo:

[01:52] <Geth> ¦ rakudo: My undertstanding is these methods need to account for the items

[01:52] <Geth> ¦ rakudo: already pulled from the iterator; that is, a consumer can always

[01:52] <Geth> ¦ rakudo: do `.pull-one xx .count-only` (if .count-only is implemented) to

[01:52] <Geth> ¦ rakudo: legally pull all of the remaining elements from the iterator.

[01:52] <Geth> ¦ rakudo:

[01:52] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[01:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/af9812fa73

[01:53] <Geth> ¦ roast: 88a12f6984 | (Zoffix Znet)++ | MISC/bug-coverage.t

[01:53] <Geth> ¦ roast: Add coverage for .bool-only/.count-only iterator methods

[01:53] <Geth> ¦ roast:

[01:53] <Geth> ¦ roast: Covers bugs fixed by https://github.com/rakudo/rakudo/commit/af9812fa73

[01:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/88a12f6984

[01:53] <Geth> ¦ rakudo: 1dbf5f589d | (Zoffix Znet)++ | t/spectest.data

[01:53] <Geth> ¦ rakudo: Add MISC/bug-coverage.t to list of tests to run

[01:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1dbf5f589d

[02:16] <Geth> ¦ roast: 1743894c03 | (Zoffix Znet)++ | S32-list/tail.t

[02:16] <Geth> ¦ roast: Add more explicit test for .tail(5).tail bug

[02:16] <Geth> ¦ roast:

[02:16] <Geth> ¦ roast: RT#132543: https://rt.perl.org/Ticket/Display.html?id=132543

[02:16] <Geth> ¦ roast:

[02:16] <Geth> ¦ roast: More tests for the underlying cause in:

[02:16] <Geth> ¦ roast: https://github.com/perl6/roast/commit/88a12f6984

[02:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1743894c03

[02:16] <synopsebot> RT#132543 [new]: https://rt.perl.org/Ticket/Display.html?id=132543 Can't tail a tail.

[03:18] <Geth> ¦ rakudo: jstuder-gh++ created pull request #1299: Issue 1268: Fix lazy slicing stopping at the first deleted

[03:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1299

[03:18] <synopsebot> RAKUDO#1299 [open]: https://github.com/rakudo/rakudo/pull/1299 Issue 1268: Fix lazy slicing stopping at the first deleted

[10:25] <lizmat> Files=1229, Tests=75884, 316 wallclock secs (14.64 usr  5.21 sys + 2181.65 cusr 213.45 csys = 2414.95 CPU)

[10:25] <yoleaux> 02:01Z <Zoffix> lizmat: I stole the .tail(5).tail bug. Would you be able review my fix in that and other iterators https://github.com/rakudo/rakudo/commit/af9812fa73 ? Unless I'm misunderstanding iterator protocol, the .count-only/.bool-only need to account for iterator's consumation and adjust their values. I removed some of the impls because I assumed they weren't worth it. The one (IIRC only one...) exception is

[10:25] <yoleaux> 02:02Z <Zoffix> lizmat: RI::I.Combinations; I couldn't figure out how to impl them. I also added tests in https://github.com/perl6/roast/commit/88a12f6984

[10:28] <lizmat> .tell Zoffix will look at this, but am not sure I can look at it today: meanwhile count-only / bool-only should only work on iterators that can determine whether they *will* produce something without actually producing anything

[10:28] <yoleaux> lizmat: I'll pass your message to Zoffix.

[10:29] <lizmat> .tell Zoffix count-only / bool-only should *never* be implemented for an iterator if they need to produce something to determine whether they can produce something

[10:29] <yoleaux> lizmat: I'll pass your message to Zoffix.

[10:29] <lizmat> .tell Zoffix hope this made sense

[10:29] <yoleaux> lizmat: I'll pass your message to Zoffix.

[10:33] <Zoffix> .

[10:33] <yoleaux> 10:28Z <lizmat> Zoffix: will look at this, but am not sure I can look at it today: meanwhile count-only / bool-only should only work on iterators that can determine whether they *will* produce something without actually producing anything

[10:33] <yoleaux> 10:29Z <lizmat> Zoffix: count-only / bool-only should *never* be implemented for an iterator if they need to produce something to determine whether they can produce something

[10:33] <yoleaux> 10:29Z <lizmat> Zoffix: hope this made sense

[10:33] <Zoffix> Yeah. They just calculate.

[10:34] <Zoffix> Also the one more where I removed and couldn't figure out a way to provide them is Mappy iterator. It did just nqp::elems($!hash) and don't seem it tracks how many things it produced

[10:34] <Zoffix> and  Mappy-kv-from-pairs

[10:35] <lizmat> Zoffix: my mind is on a lot of other, family, things at the moment

[10:36] <Zoffix> Sure. No problem.

[10:36] <lizmat> won't probably have the quality time to look at it before Saturday

[10:36] <lizmat> iterators need quality time  :-)

[10:36] <Zoffix> :)

[11:23] <tbrowder> .tell samcv i have answered your question at roast PR #361

[11:23] <yoleaux> tbrowder: I'll pass your message to samcv.

[12:10] <dogbert2> Zoffix: still playing the car crash simulator?

[13:27] <lizmat> .tell Zoffix not really looked at the patch yet, but it feels to me it changes the semantic of "count-only": I intended it as "number of elements the iterator can produce in total", whereas your patch turned it into "number of elements the iterator can produce still"

[13:27] <yoleaux> lizmat: I'll pass your message to Zoffix.

[13:27] <lizmat> .tell Zoffix still in two minds about that whether that is a good thing or not

[13:27] <yoleaux> lizmat: I'll pass your message to Zoffix.

[13:27] <lizmat> afk for a while&

[13:28] <pmurias> When we match a unicode property with an argument like: /<:Numeric_Type<Digit>>/

[13:28] <pmurias> it seems we use match against the short name for some properties like bc, and the long names for others like nt/Numeric_Type

[13:29] <pmurias> how do we want to fix that?

[13:29] <Zoffix> dogbert17: no. It's still early access and it's pretty empty. There's no traffic or.. anything dynamic really, so gets kinda lonely

[13:29] <yoleaux> 13:27Z <lizmat> Zoffix: not really looked at the patch yet, but it feels to me it changes the semantic of "count-only": I intended it as "number of elements the iterator can produce in total", whereas your patch turned it into "number of elements the iterator can produce still"

[13:29] <yoleaux> 13:27Z <lizmat> Zoffix: still in two minds about that whether that is a good thing or not

[13:30] <pmurias> one possible solution would be to use the long name when matching against the prop in long form and the short value alias when we have the prop in the shor form

[13:31] <pmurias> so we would have /<:Numeric_Type<Digit>>/ and /<:nt<Di>>/

[13:31] <pmurias> does this sound sane?

[13:32] <Zoffix> .tell lizmat Yeah, my patch changed .count-only to be "how many can you produce". The original semantic of total is kinda pointless isn't it? Unless, I keep track and know for sure the iterator has never been iterated yet, I can't use that method. That's exactly was the reason for the bug in .tail(5).tail; if .count-only doesn't actually indicate the number of elements the iterator will produce, we can't

[13:32] <yoleaux> Zoffix: I'll pass your message to lizmat.

[13:32] <Zoffix> use it to perform the optimization

[13:33] <Zoffix> .tell lizmat use it to perform the optimization

[13:33] <yoleaux> Zoffix: I'll pass your message to lizmat.

[13:33] <pmurias> other example would be /<:bc<AL>>/ and /<:Bidi_Class<Arabic_Letter>>/

[16:14] <pmurias> the other thing I suggest we do is to make unknown unicode properties cause compile time errors

[16:14] <pmurias> m: say 9 ~~ /<:no_such_property_for_real>/

[16:14] <camelia> rakudo-moar 1dbf5f589: OUTPUT: «Nil␤»

[16:14] <pmurias> m: say 9 ~~ /<:!no_such_property_for_real>/

[16:14] <camelia> rakudo-moar 1dbf5f589: OUTPUT: «｢9｣␤»

[16:38] <pmurias> how do we remove something from Perl 6?

[16:39] <pmurias> "The contributory properties (those of the form Other_XXX) are sets of exceptions used to generate properties in DerivedCoreProperties.txt. They are incomplete by themselves and not intended for independent use, for example an API returning property values would implement the corresponding derived core property instead."

[16:39] <pmurias> we have those in roast unfortunately :(

[16:48] <Geth> ¦ roast: 61c1181c7b | pmurias++ | S05-mass/properties-general.t

[16:48] <Geth> ¦ roast: Add a test for a default value of a unicode property

[16:48] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/61c1181c7b

[16:48] <Geth> ¦ roast: 1d3b5726cb | pmurias++ | S05-mass/properties-general.t

[16:48] <Geth> ¦ roast: Skip strongly suspected wrong test on js

[16:48] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1d3b5726cb

[16:50] <pmurias> I guess I'll just move them to a separate file so that they can be deprecated as they seem useless

[16:54] <timotimo> .tell zoffix all we can do is use a proper iterator for List.tail, i.e. not give a ReifiedList iterator that had pieces skipped.

[16:54] <yoleaux> timotimo: I'll pass your message to zoffix.

[16:56] <[TuxCM]> Hmm, I cannot imagine why working from england would cause this:

[16:56] <[TuxCM]> Rakudo version 2017.11-78-g1dbf5f589 - MoarVM version 2017.11-28-gba1fb9542

[16:56] <[TuxCM]> csv-test-xs-20      0.448 -  0.456

[16:56] <[TuxCM]> csv-ip5xs           1.089 -  1.116

[16:56] <[TuxCM]> test-t --race       1.235 -  1.254

[16:56] <[TuxCM]> test-t              2.833 -  2.839

[16:56] <[TuxCM]> test               11.332 - 11.361

[16:56] <[TuxCM]> csv-parser         11.832 - 12.039

[16:56] <[TuxCM]> csv-ip5xs-20       12.510 - 12.874

[16:56] <[TuxCM]> test-t-20 --race   17.204 - 17.475

[16:56] <[TuxCM]> test-t-20          51.263 - 51.310

[16:57] * [TuxCM] put up glasses and sees nothinh irregular.

[16:57] <eater> it's just

[16:57] <eater> all slower

[16:57] <eater> oh no

[16:57] <Zoffix> .

[16:57] <yoleaux> 16:54Z <timotimo> Zoffix: all we can do is use a proper iterator for List.tail, i.e. not give a ReifiedList iterator that had pieces skipped.

[16:57] <eater> faster!

[16:58] <Zoffix> timotimo: I'm not following at all. What is that in reference to?

[17:03] <Zoffix> timotimo: I mean I know it's about .tail(5).tail, but that's already fixed and the discussion is about whether the user of `.count-only` optimization method must have the responsibility of carrying state information about whether iterator was ever .pulled, .pushed, or .skipped. IMO no, that severely cripples .count-only; if the user has ability to carry that state, often they'd be able to derive count

[17:03] <Zoffix> along with it.

[17:05] <Zoffix> Especially since a large point of iterators is not having to keep previously consumed values around, so makes little sense to me to have two methods that supposed to offer would optimizations require the user to track entire lifetime of the iterator and risk getting invalid data from the methods if they didn't track everything.

[17:18] <Zoffix> + implementor of .count-only that adjusts can either track count or derive it in place or not implement .count-only if tracking ain't worth it, whereas a user of static .count-only must always keep tracking and has less precise idea of whether it's worth it

[17:19] <Zoffix> .count-only/.bool-only adjusting to what's available in the iterator is a clear winner to my mind. By FAR less chance of getting incorrect result, easier use for the user, more optimization wins.

[17:19] * Zoffix &

[21:48] <Geth> ¦ roast: 832ab077c5 | (Tom Browder)++ (committed by Samantha McVey) | 2 files

[21:48] <Geth> ¦ roast: Add new tests for POD tables rakudo/rakudo/#1282

[21:48] <Geth> ¦ roast:

[21:48] <Geth> ¦ roast: Add new tests for fix to rakudo/rakudo#1282

[21:48] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/832ab077c5

[21:48] <synopsebot> RAKUDO#1282 [closed]: https://github.com/rakudo/rakudo/issues/1282 [POD] need to handle table cells with char column separators as data

[21:51] <pmurias> samcv: what do you think about making unrecognized unicode properties cause an error at compile time instead of failing silently?

[21:52] <samcv> well. hmm.

[21:53] <samcv> might be easier to make it a warning to start with.

[23:59] <Geth> ¦ rakudo: softmoth++ created pull request #1300: Untwine Pod

[23:59] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1300

[23:59] <synopsebot> RAKUDO#1300 [open]: https://github.com/rakudo/rakudo/pull/1300 Untwine Pod
