[00:40] <samcv> MasterDuke, looking

[00:40] <samcv> actually going to the bathroom then looking :)

[00:41] * MasterDuke didn't think the code was that bad...

[00:41] <notviki> :D

[00:44] <dalek> roast: 3cc76b8 | (Zoffix Znet)++ | S32-io/seek.t:

[00:44] <dalek> roast: Test IO::Handle.seek

[00:44] <dalek> roast:

[00:44] <dalek> roast: Fixes #219

[00:44] <dalek> roast:

[00:44] <dalek> roast: It currently throws when seeking past start of file, but doesn't complain

[00:44] <dalek> roast: about seeking past end. I left throwage tests commented out for now,

[00:44] <dalek> roast: will make figuring out the failure modes as part of IO improvement stuff.

[00:44] <dalek> roast: review: https://github.com/perl6/roast/commit/3cc76b80d7

[00:51] <geekosaur> um. why would seeking past end be wrong?

[00:53] <geekosaur> is a POSIX module going to need to provide special seek calls then?

[00:54] <notviki> <notviki> hm... seek before start of file throws but seek past end of file doesn't throw. Is that normal?

[00:54] * geekosaur was AFK for around an hour

[00:55] <geekosaur> https://en.wikipedia.org/wiki/Sparse_file

[00:55] <geekosaur> ah, not even limited to POSIX any more, NTFS does sparse files as well

[01:01] <dalek> roast: e220988 | (Zoffix Znet)++ | S32-io/seek.t:

[01:01] <dalek> roast: Test .seek failure modes; geekosaur++

[01:01] <dalek> roast:

[01:01] <dalek> roast: Part of fix for #219

[01:01] <dalek> roast: review: https://github.com/perl6/roast/commit/e220988909

[01:02] <samcv> who here is an admin for rakudo?

[01:02] <samcv> who do I bug to get an M-dash or a horizontal bar used for the rakudo description instead of two hyphen-minus’s on github

[01:03] * notviki doesn't have that access

[01:03] <[Coke]> samcv: what are you looking at?

[01:03] <samcv> https://github.com/rakudo/rakudo

[01:03] <samcv> so do — mdash or ― horizontal bar (usually used for quoting people ― samcv)

[01:04] <samcv> M-dash is probably better for this use since not a quote tho

[01:05] <[Coke]> owners are: jnthn, moritz, perlpilot, pmichaud.

[01:06] <samcv> kk will bug one of them

[01:07] <MasterDuke> samcv: have you taken a look at https://github.com/rakudo/rakudo/pull/991?

[01:07] <MasterDuke> that's another that could use a review

[01:10] * samcv rushes to the bathroom again /s

[01:10] <samcv> looking

[01:13] <dalek> rakudo/nom: 119efbc | samcv++ | appveyor.yml:

[01:13] <dalek> rakudo/nom: Use appveyor-retry for installing Strawberry Perl 5

[01:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/119efbcea6

[01:13] <MasterDuke> thanks. i may not be very available the next week and wanted to get them reviewed while i was still here and it was fresh in people's minds

[01:18] <samcv> MasterDuke, ok that last one, about the ${ } variables. uhm not seeing many roast tests for that

[01:18] <MasterDuke> there aren't tests for any of my three PRs today

[01:19] <samcv> oh :(

[01:19] <samcv> can you please make a test for https://github.com/rakudo/rakudo/pull/991/ ?

[01:19] <dalek> rakudo/nom: ecde669 | (Zoffix Znet)++ | t/spectest.data:

[01:19] <dalek> rakudo/nom: Add S32-io/seek.t to list of test files to run

[01:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ecde669399

[01:19] <MasterDuke> i'll add them in the next couple days

[01:19] * notviki notices a 3K+ tests in stresstest run :i

[01:19] <notviki> *:o

[01:20] <notviki> I mean there are 3K+ tests more than a few days ago ^_^

[01:20] <samcv> what are they tho

[01:20] <notviki> no idea

[01:20] <notviki> Files=1213, Tests=133493, 484 wallclock secs (14.31 usr  2.61 sys + 1632.20 cusr 184.80 csys = 1833.92 CPU)

[01:20] <samcv> are all normal tests in the stresstest?

[01:20] <samcv> cause that's 1900 emoji tests

[01:21] <MasterDuke> samcv: didn't you add a bunch of emoji/unicode tests?

[01:21] <notviki> last one from 2 days ago:  Files=1211, Tests=130982, 165 wallclock secs (21.10 usr  3.39 sys + 2923.98 cusr 288.86 csys = 3237.33 CPU)

[01:21] <samcv> yep

[01:21] <notviki> \o/

[01:21] <MasterDuke> notviki: same computer? cause that's a huge difference in wallclock

[01:22] <notviki> Nah :) The slower one is my home box, the faster one is my 24-core VM :)

[01:23] <MasterDuke> good, i hoped those 3k tests didn't add 300s!

[01:23] <notviki> :)

[01:32] <samcv> i hope not too

[01:34] <samcv> MasterDuke, reviewed that more recent one

[01:36] <MasterDuke> k, i may get a test or two in today

[01:38] <samcv> cool

[01:40] <samcv> ooooooooooooooo

[01:40] <samcv> https://github.com/showcases/programming-languages rakudo is there now!

[01:41] <samcv> \o/

[01:57] <timotimo> yup!

[01:58] <timotimo> a friend of mine hooked me up with a tiny bit of code that 1) reads the high precision timer, 2) sends events out to a thread that gathers them and 3) writes those out to a file

[01:58] <samcv> notviki, hmm seemed the instructions to override the normal perl highlighter for atom on the readme for atom-language-perl6 were wrong :) updating now

[01:58] <samcv> i had never actually tried them before :P

[02:08] <samcv> timotimo, who were you responding to?

[02:12] <timotimo> the yup was about rakudo in the showcase

[02:12] <samcv> ah

[02:12] <samcv> but the one below that

[02:13] <samcv> when sometimes a normal solidus won't do, you have the BIG SOLIDUS ⧸

[02:19] <timotimo> i just blurted that out randomly

[02:19] <timotimo> and now i'm going to bed i think

[04:28] <dalek> roast: 2667e3e | MasterDuke17++ | S (2 files):

[04:28] <dalek> roast: Tests for Rakudo PRs #990 and #991 and NQP PR #337

[04:28] <dalek> roast: review: https://github.com/perl6/roast/commit/2667e3edfc

[04:30] <MasterDuke> samcv: a test for each added, todo'd for PR #991

[05:53] <samcv> nice

[05:56] <samcv> MasterDuke, PR ready for merge?

[06:29] <samcv> .tell notviki seems perl6.fail has… failed. It is not showing any tickets

[06:29] <yoleaux2> samcv: I'll pass your message to notviki.

[06:29] <samcv> .tell yoleaux2 thanks

[06:29] <yoleaux2> samcv: Thanks for the message.

[06:44] <samcv> buggable, new

[06:44] <samcv> buggable, help

[06:44] <buggable> samcv, tags | tag SOMETAG | eco | eco Some search term | speed

[06:44] <samcv> buggable, speed

[06:44] <buggable> samcv, ▇▇█▇█▇██▇▇▇█▄▆▅▃▄▄▂▃▃▄▂▁▁▂▃▂▂▅▂▂▄▂▃▂▂▁▆▄▂▂▃▂▂▂▃▃▃▃ data for 2016-12-16–2017-01-06; range: 5.137s–6.242s

[07:25] <ugexe> m: my $core-repo = CompUnit::RepositoryRegistry.repository-for-name(q|perl|); my $core-tap-harness-path = "$core-repo/sources/" ~ "$core-repo/dist".IO.dir.map({Distribution::Path.new($_.parent, :meta-file($_))}).head.meta<provides><TAP><lib/TAP.pm6><file>; require $core-tap-harness-path; # notviki: so it *is* possible

[07:25] <camelia> rakudo-moar ecde66: ( no output )

[07:34] <ugexe> ...unless someone does zef --install-to=perl install TAP::Harness

[10:04] <[Tux]> This is Rakudo version 2016.12-237-gecde66939 built on MoarVM version 2016.12-71-g331a6b43

[10:04] <[Tux]> csv-ip5xs        3.006

[10:04] <[Tux]> test            13.148

[10:04] <[Tux]> test-t           5.466

[10:04] <[Tux]> csv-parser      13.721

[10:09] <lizmat> Files=1163, Tests=56515, 198 wallclock secs (11.19 usr  4.59 sys + 1176.14 cusr 130.22 csys = 1322.14 CPU)

[10:14] <bartolin_> lizmat: what do you think about this change? Are there any disadvantages in binding to natives in signatures? https://github.com/usev6/rakudo/commit/1b333a03a7

[10:15] <lizmat> there used to be a time that didn't work

[10:15] <lizmat> also, I'm not sure whether that binds or assigns

[10:15] <bartolin_> yes, jnthn++ fixed that not so long ago IIRC

[10:16] <lizmat> and/or whether it has a performance benefit

[10:17] <bartolin_> I see. that was my main question (whether you'd have an idea about performance impacts)

[10:18] <bartolin_> spectest passes for MoarVM an JVM

[10:19] * bartolin_ has never tried to benchmark changes before

[10:21] <bartolin_> I'll put it on my list :-) thanks for looking

[11:02] <lizmat> m: dd $(1, 2) Z <a b c>

[11:02] <camelia> rakudo-moar ecde66: OUTPUT«(($(1, 2), "a"),).Seq␤»

[11:03] <lizmat> m: dd 1 Z <a b c>

[11:03] <camelia> rakudo-moar ecde66: OUTPUT«((1, "a"),).Seq␤»

[11:03] <lizmat> hmmm... guess that makes sense  :-)

[11:03] <lizmat> m: dd  <a b c> Z 1

[11:03] <camelia> rakudo-moar ecde66: OUTPUT«(("a", 1),).Seq␤»

[11:42] <lizmat> jnthn: on the subject of YAGNI, I'm wondering whether push-until-lazy is a bit of a YAGNI currently

[11:42] <lizmat> it appears to be from a time where we also had "plan" planned

[11:43] <lizmat> atm the only thing it does is push-all if the iterator is non-lazy

[12:05] <dalek> rakudo/nom: 8655413 | lizmat++ | src/core/Rakudo/Internals.pm:

[12:05] <dalek> rakudo/nom: Introducing R:I.OneValueIterator

[12:05] <dalek> rakudo/nom:

[12:05] <dalek> rakudo/nom: Create an iterator for a single given value.

[12:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8655413b91

[12:05] <dalek> rakudo/nom: c405f06 | lizmat++ | src/core/ (2 files):

[12:05] <dalek> rakudo/nom: Use the R:I.OneValueIterator where we can

[12:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c405f06724

[12:28] <jnthn> lizmat: push-until-lazy is the thing that gives the "mostly eager" semantics used in assignment, ain't it?

[12:44] <jnthn> iirc, $!todo is a list of iterables, and push-until-lazy just causes a push-all on each iterator until it encounters one that's marked lazy

[12:45] <jnthn> And yes, .plan would use it, though I'm pretty sure I put it in because something *else* needed it

[12:46] <lizmat> jnthn: I think that $!todo is only the one iterator ?

[12:47] <lizmat> ah, yes, it's the one Reifier  :-)

[12:49] <lizmat> hmmm... goes into some more research  :-)

[13:16] <dalek> rakudo/nom: 6888f0c | lizmat++ | src/core/ (3 files):

[13:16] <dalek> rakudo/nom: Change R:I.OneValueIterator to R:I.OneCallableIterator

[13:16] <dalek> rakudo/nom:

[13:16] <dalek> rakudo/nom: Which is a bit more generally useful, and the additional overhead of

[13:16] <dalek> rakudo/nom: needing to do an extra call to get the single value, should drown in

[13:16] <dalek> rakudo/nom: the general iterator overhead.

[13:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6888f0ce2e

[13:43] <dalek> rakudo/nom: 012850d | lizmat++ | src/core/ (3 files):

[13:43] <dalek> rakudo/nom: Revert "Change R:I.OneValueIterator to R:I.OneCallableIterator"

[13:43] <dalek> rakudo/nom:

[13:43] <dalek> rakudo/nom: This reverts commit 6888f0ce2e750af2cbd2d5e0f051c93d01c59735.

[13:43] <dalek> rakudo/nom:

[13:43] <dalek> rakudo/nom: Premature optimization is the root of all evil

[13:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/012850deac

[14:25] * masak smiles at the pair of commits above :)

[14:29] <lizmat> yeah... :-)

[14:31] <dalek> rakudo/nom: c0ac0e9 | lizmat++ | src/core/Rakudo/Internals.pm:

[14:31] <dalek> rakudo/nom: Introducing R:I.ZipIterablesIterator

[14:31] <dalek> rakudo/nom:

[14:31] <dalek> rakudo/nom: Create an iterator of N iterables, returning a List of one pull from

[14:31] <dalek> rakudo/nom: each iterator for each pull.

[14:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c0ac0e9017

[14:31] <dalek> rakudo/nom: 4ab020f | lizmat++ | src/core/List.pm:

[14:31] <dalek> rakudo/nom: Make @a Z @a 5x faster

[14:31] <dalek> rakudo/nom:

[14:31] <dalek> rakudo/nom: - by using the new R:I.ZipIterablesIterator

[14:31] <dalek> rakudo/nom: - benchmarked on "my @a = ^5; for ^10000 { my @b = @a Z @a }

[14:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4ab020f1a5

[14:31] <lizmat> masak: some better commits  :-)

[14:33] <timotimo> ooooooh

[14:34] <timotimo> this'll show up in the benchmarks

[14:34] <timotimo> we do have benchmarks that have Z in them

[14:34] <lizmat> this is just the Z case, other cases are being worked on  :-)

[14:34] <timotimo> fantabular

[14:35] <lizmat> first I'm going to check whether it makes sense to make a special case of @a Z @a (aka only 2 lists)

[14:35] <timotimo> statisfiable6: core0

[14:35] <statisfiable6> timotimo, OK! Working on it…

[14:35] <timotimo> not sure how long those take until a newer build is available

[14:36] <timotimo> 4 minutes may be a bit too optimistic :)

[14:51] <dalek> rakudo/nom: 3d1d699 | lizmat++ | src/core/Rakudo/Internals.pm:

[14:51] <dalek> rakudo/nom: Presize the result list for another 4% improvement

[14:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3d1d6997e7

[15:11] <lizmat> doesn't make sense to make a specialized 2 iterables case

[15:13] <timotimo> good to know the general one is already fast enough :)

[15:13] <lizmat> yeah, it may be about 1% faster

[15:15] <samcv> morning perl 6 *

[15:16] <timotimo> statisfiable6 is taking its sweet time, isn't it?

[15:16] <timotimo> i thought it caches data from already-analysed versions

[15:16] <samcv> nope

[15:18] <timotimo> maybe that means it'll end up catching liz' last commit, too

[15:18] <timotimo> just by virtue of taking so long to reach it

[15:18] <timotimo> though it might start from the newest commit it knows and go back in history

[15:20] <timotimo> https://github.com/perl6/whateverable/blob/master/Statisfiable.p6#L35 - it does seem to have these files there

[15:21] <timotimo> ah, looks like it only saves the last result there

[15:34] <notviki> .

[15:34] <yoleaux2> 06:29Z <samcv> notviki: seems perl6.fail has… failed. It is not showing any tickets

[16:12] <timotimo> i didn't expect statisfiable6 to take *this* long

[16:14] <lizmat> statisfiable6: status

[16:14] <statisfiable6> lizmat, Huh? Available stats: core (CORE.setting size), install (size of the whole installation), …

[16:15] <lizmat> statisfiable6: core

[16:15] <statisfiable6> lizmat, OK! Working on it…

[16:16] <notviki> statisfiable6: install

[16:16] <notviki> statisfiable6: …

[16:17] <lizmat> statisfiable6: status

[16:17] <lizmat> guess it's off into lala land

[16:20] <timotimo> there it goes

[16:21] <notviki> statisfiable6: core

[16:21] <statisfiable6> notviki, OK! Working on it…

[16:23] <notviki> well, it's doing something... at the top of top

[17:57] <samcv> statisfiable6, core

[17:57] <statisfiable6> samcv, OK! Working on it…

[19:56] <timotimo> hm

[19:56] <geekosaur> now you just need stabilifiable6 :p

[19:56] <timotimo> totally

[20:18] <[Coke]> é

[20:26] <AlexDaniel> statisfiable6: core

[20:26] <statisfiable6> AlexDaniel, OK! Working on it…

[20:27] <AlexDaniel> there's some broken tar it trips over…

[20:28] <timotimo> oh damn

[20:28] <AlexDaniel> statisfiable6: core

[20:28] <statisfiable6> AlexDaniel, OK! Working on it…

[20:29] <AlexDaniel> ok now

[20:29] <statisfiable6> AlexDaniel, https://gist.github.com/11acd3d33f9b20c8cd451b8911f29c3e

[20:30] <AlexDaniel> statisfiable6: install

[20:30] <statisfiable6> AlexDaniel, OK! Working on it…

[20:31] <statisfiable6> AlexDaniel, https://gist.github.com/36ff15f9f5662a20fa503f4ef93b946f

[20:31] <AlexDaniel> good

[20:32] <timotimo> that's quite some dip it had there

[20:32] <AlexDaniel> yup

[20:32] <timotimo> immediately went up again for some reason

[20:33] <AlexDaniel> could be something with the archive itself

[20:33] <timotimo> i don't see it in the listing below

[20:34] <AlexDaniel> you have to “view full file”

[20:38] <timotimo> oh, ah

[20:40] <timotimo> 15a2f112ba2e78686bb6f5cc9b92b122254f2b70 11.86428

[20:40] <timotimo> c5e54efc88c5d5e481b3fcb62d412b1826bee25d 10.763264

[20:40] <timotimo> 1e3a325bd1db3402a0065e12e9f26e400f6b2900 11.864208

[20:40] <timotimo> this it?

[20:51] <AlexDaniel> timotimo: yea

[21:13] <dalek> nqp: 189cbd4 | MasterDuke17++ | src/QRegex/P (3 files):

[21:13] <dalek> nqp: Handle Nd's as regex quantifiers

[21:13] <dalek> nqp: review: https://github.com/perl6/nqp/commit/189cbd426b

[21:13] <dalek> nqp: ab0728f | lizmat++ | src/QRegex/P (3 files):

[21:13] <dalek> nqp: Merge pull request #338 from MasterDuke17/correctly_handle_unicode_digits_in_regex_quantifiers

[21:13] <dalek> nqp:

[21:13] <dalek> nqp: Handle Nd's as regex quantifiers

[21:13] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ab0728f1a4

[21:23] <dalek> rakudo/nom: e40a129 | lizmat++ | tools/build/NQP_REVISION:

[21:23] <dalek> rakudo/nom: Bump NQP to get Nd's as regex quantifiers

[21:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e40a129a8d

[21:23] <dalek> nqp: d626cf6 | MasterDuke17++ | src/ (4 files):

[21:23] <dalek> nqp: Micro-optimize Grammars

[21:23] <dalek> nqp:

[21:23] <dalek> nqp: Make  <before>'s non-capturing.

[21:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d626cf6d5f

[21:23] <dalek> nqp: 9c2f39c | lizmat++ | src/ (4 files):

[21:23] <dalek> nqp: Merge pull request #339 from MasterDuke17/make_befores_non-capturing

[21:23] <dalek> nqp:

[21:23] <dalek> nqp: Micro-optimize Grammars

[21:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9c2f39c699

[21:32] <dalek> rakudo/nom: 06abb07 | lizmat++ | tools/build/NQP_REVISION:

[21:32] <dalek> rakudo/nom: Bump NQP to make <before>'s non-capturing

[21:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/06abb07f06

[21:48] <lizmat> TIL that Zop is not taking the infix:<Z>(:$with!) candidate

[21:50] <timotimo> oh?

[21:50] <timotimo> is that good or bad? probably bad

[21:52] <lizmat> not sure yet... I guess it codegens directly to one of the METAOP thingies

[22:02] <timotimo> ah, sounds likely

[22:44] <dalek> rakudo/nom: eba3fe0 | MasterDuke17++ | src/Perl6/Grammar.nqp:

[22:44] <dalek> rakudo/nom: Handle Nd's in ${} special variables

[22:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eba3fe0a24

[22:44] <dalek> rakudo/nom: f6303d7 | samcv++ | src/Perl6/Grammar.nqp:

[22:44] <dalek> rakudo/nom: Merge pull request #991 from MasterDuke17/correctly_error_on_unicode_digits_in_special_variable

[22:44] <dalek> rakudo/nom:

[22:44] <dalek> rakudo/nom: Handle Nd's in ${} special variables

[22:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f6303d7beb

[22:49] <lizmat> good night, #perl6-dev!

[22:49] <notviki> night
