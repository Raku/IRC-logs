[02:45] <BenGoldberg> Say Zoffix, does fixing docs including fixing the code which generates the web docs?  Or is that someone else?

[08:06] <lizmat> Files=1192, Tests=58595, 177 wallclock secs (10.80 usr  4.38 sys + 1016.92 cusr 107.53 csys = 1139.63 CPU)

[08:44] <Geth> ¦ rakudo/nom: c2658245f4 | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[08:44] <Geth> ¦ rakudo/nom: Fix copy-pasto/thinko in Baggy (^) Baggy

[08:44] <Geth> ¦ rakudo/nom:

[08:44] <Geth> ¦ rakudo/nom: perlawhirl++

[08:44] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c2658245f4

[08:53] * lizmat is still recovering from PTS

[08:59] <jnthn> lizmat: Already made the trip back? :)

[09:12] <lizmat> no, we're still in Lyon, preparing for the car-ride back

[09:16] <jnthn> Safe travels, then :)

[09:51] <Zoffix> "No such method 'exit-code' for invocant of type 'Proc'"

[09:51] <Zoffix> .oO( consistent inconsistency )

[09:52] <masak> lizmat! \o/

[09:52] <Zoffix> I remember 10 years ago, Perl folks making fun of PHP having incosistent naming of routines... I'd say this is karma :/

[09:53] <masak> Zoffix: oh, it's "exitcode", is it?

[09:53] <Zoffix> Yeah

[09:54] <masak> mebbe a (weak) argument could be made that it's one indivisible concept, kinda like "substring"

[09:54] <masak> but having said that, it does feel like two words to me

[09:59] <Zoffix> masak: heh, that's not the only instance of such inconsistency :) .print-nl vs. .readchars, .trim-leading vs .samecase, .base-repeating vs .basename, .day-of-year vs .daycount. You can probably find more examples on https://map.perl6.party/

[10:22] <Geth> ¦ roast: 8ae81c0a7c | (Zoffix Znet)++ | S32-io/note.t

[10:22] <Geth> ¦ roast: [io grant] Test no-arg candidate of &note

[10:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8ae81c0a7c

[10:41] <nine> .tell lizmat http://niner.name/blog/ for the weekly

[10:41] <yoleaux> nine: I'll pass your message to lizmat.

[11:25] <timotimo> after sleeping on it i see there's a really good use case for a .started-promise on Proc::Async, so that you can react to a process being started with a .then

[11:26] <timotimo> i.e. if you're building an add-on that'd consume Proc::Async and needs to do some stuff after processes get .start'ed, you could do that that way

[11:32] <masak> timotimo: is there a way to do that without a race condition?

[11:33] <timotimo> we already separate .new and .start for race condition reasons

[11:33] <timotimo> imagine a class like the Piper that eater demonstrated yesterday: it wanted to set up a reader on one Proc::Async and a writer on another

[11:34] <timotimo> the code had a problem unrelated to that that made it seem like it was necessary to have a "wait for .started" where it wasn't

[11:35] <timotimo> they were expecting .^find_method on a Proc::Async would give them a method object they could .wrap to only influence that one instance

[11:48] <eater> timotimo: isn't it better to call the promise ready then?

[11:48] <eater> just like the callback of MoarVM

[11:53] <timotimo> the name is free to be bikeshedded :)

[11:54] <eater> :')

[11:54] <eater> if I have time I will make a PR tonight to add it :)

[12:02] <eater> timotimo: should that Promise be broken if the process fails to start? ????

[12:03] <timotimo> yeah, i'd assume so

[12:16] <jnthn> What's the use case for such a method?

[12:17] <timotimo> i'm not actually sure any more

[12:17] <timotimo> oh, er, it was that you might have an object that'd like to write to a process as soon as it's started

[12:17] <jnthn> Just write to it, there won't be any data loss. :)

[12:17] <timotimo> and you can't just have an await or .then so far, you'd have to loop on .started

[12:18] <timotimo> there'll be an exception "you can't do that before .start is called"

[12:18] <timotimo> isn't that what eater encountered?

[12:18] <jnthn> Well yeah

[12:18] <jnthn> But after that point it's safe to do so :)

[12:19] <jnthn> I've no idea, I don't have time to chase down stuff in

[12:19] <jnthn> #perl6

[12:19] <jnthn> :)

[12:19] <timotimo> right

[12:19] <timotimo> you'll want to not only busy-loop on .started, but also make sure if the .start had failed to not keep busy-looping forever

[12:19] <eater> oh haha, that would happen now

[12:20] <Zoffix> Why not just set the reader on after .start is called?

[12:20] <Zoffix> s: Proc::Async, 'start', \()

[12:20] <SourceBaby> Zoffix, Something's wrong: ␤ERR: Could not find candidate that can do \()␤  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 29␤  in block <unit> at -e line 6␤␤

[12:20] <timotimo> the reader isn't a problem

[12:20] <eater> actually it won't, because $!started is set before it does anything else

[12:20] <Zoffix> s: Proc::Async, 'start'

[12:20] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/c265824/src/core/Proc/Async.pm#L116

[12:20] <Zoffix> So what's the problem then?

[12:20] <timotimo> you can't write to a process before you called .start on it, as i understand it?

[12:21] <jnthn> That's not a problem

[12:21] <jnthn> That's just how the API works :P

[12:21] <eater> I understand that

[12:21] <eater> but now I have to sleep-loop over .started to see if I can write to it

[12:21] <Zoffix> OK, so write only after you started it?

[12:21] <jnthn> eater: Why?

[12:21] <Zoffix> eater: show code

[12:22] <jnthn> Typical use looks like `my $done = $proc.start; await $proc.write(...); await $done;` or so

[12:24] <Zoffix> NeuralAnomaly: status

[12:24] <NeuralAnomaly> Zoffix, [✘] Next release will be in 4 days and 16 hours. Since last release, there are 37 new still-open tickets (13 unreviewed and 1 blockers) and 289 unreviewed commits. See http://perl6.fail/release/stats for details

[12:24] <eater> https://github.com/PostCocoon/P6-SystemPackageManager/blob/master/lib/SystemPackageManager/CommandChain.pm6#L63

[12:24] * Zoffix is getting a cold -_- worst time ever

[12:27] <Zoffix> eater: wouldn't reversing these two lines solve everything? https://github.com/PostCocoon/P6-SystemPackageManager/blob/master/lib/SystemPackageManager/CommandChain.pm6#L31-L32

[12:28] <eater> then you're calling stdout/stderr AFTER the process started and then it will tell you to not do that

[12:28] <Zoffix> guess not, 'cause you won't tap it soon enough

[12:29] <nine> eater: your SystemPackageManager may be of intereste to #perl6-toolchain

[12:30] <ugexe> looks like sparrowdo

[12:30] <eater> nine: it's atm still in design/impl. phase, but if you want to have anything in it, feel free to create an issue or poke me :)

[12:31] <jnthn> Yeah, I can see how a .ready would help in this kinda case

[12:33] <eater> cool :) currently building a patch

[12:33] <Zoffix> ZOFVM: Files=1242, Tests=135571, 117 wallclock secs (23.13 usr  3.31 sys + 2415.86 cusr 164.77 csys = 2607.07 CPU)

[12:35] <Zoffix> "[3 years ago]   # temporary, for the transition period"

[12:35] <Zoffix> Guess the transitional period is over

[12:35] * Zoffix yanks :directory out of IO::Spec::Unix.split

[12:38] <Geth> ¦ rakudo: the-eater++ created pull request #1083: Add ready Promise to Proc::Async

[12:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1083

[12:39] <eater> ^ there you have it

[12:40] <eater> was way easier then expected

[12:40] <Zoffix> did you run spectest?

[12:40] <Zoffix> TEST_JOBS=8 make spectest

[12:40] <Zoffix> Where TEST_JOBS is number of cores in your CPU*1.3

[12:41] <Zoffix> ZOFFLOP: t/spec/S17-supply/interval.t

[12:42] <eater> nope not yet, I guess I also need to add tests for this ready promise?

[12:42] <Zoffix> Sure. And docs :)

[12:42] <eater> ALL THE THINGS :D

[12:42] <timotimo> and get the news out there to the eager masses

[12:43] <timotimo> via all the social media platforms

[12:43] <timotimo> do you have a myspace? i hear that's a popular one

[12:43] <eater> don't forget the newspapers!

[12:43] <timotimo> bring it up on your favourite BBS

[12:43] <timotimo> UUCP it to all your friends!

[12:44] <timotimo> i recently found out that not only does my system have receive and send programs for xmodem, ymodem, and zmodem installed, but Konsole also has a zmodem upload function in the menu

[12:52] <eater> make spectest captures my alt :(

[13:01] <Zoffix> m: sub check-parts($in, $desc, *%parts) {}(1, "foo {.perl}" :basename<42>)

[13:01] <camelia> rakudo-moar c26582: OUTPUT: «Unexpected named argument 'basename' passed␤  in block <unit> at <tmp> line 1␤␤»

[13:01] <yoleaux> 12:53Z <haxmeister> Zoffix: thanks for finding me an HTML parser to work with :-)

[13:01] <Zoffix> What a trippy error hehe :)

[13:02] <Zoffix> :basename is being passed to the block inside that string apparently

[13:02] <Zoffix> 'cause of missing comma

[13:02] <Zoffix> m: my &b = -> :$basename {''}; sub check-parts($in, $desc, *%parts) {}(1.abs, "foo &b()" :basename<42>)

[13:02] <camelia> rakudo-moar c26582: OUTPUT: «Unexpected named argument 'basename' passed␤  in block <unit> at <tmp> line 1␤␤»

[13:03] <Zoffix> or somewhere

[13:03] <Zoffix> m: my &b = -> :$basename {''}; sub check-parts($in, $desc, *%parts) {}(1.abs, "foo" :basename<42>)

[13:03] <camelia> rakudo-moar c26582: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤You can't adverb "foo"␤at <tmp>:1␤------> 3, *%parts) {}(1.abs, "foo" :basename<42>7⏏5)␤»

[13:03] <timotimo> Zoffix: remember how you have that method map that lets you see what stuff may be undocumented? would it make sense to look for "is rw" methods/subs and return-rw and such in there, too?

[13:03] <Zoffix> 'cause if there ain't no callable in the string, you get that ^

[13:04] <Zoffix> timotimo: how do you get that property?

[13:04] <Zoffix> m: sub foo is rw {}.^methods.say

[13:04] <camelia> rakudo-moar c26582: OUTPUT: «(<anon> <anon> soft <anon> <anon> yada perl <anon> <anon> <anon> onlystar candidates unwrap wrap <anon> multi package leave <anon> <anon> <anon> <anon> <anon> <anon> <anon> <anon> cando fire_if_phasers add_phaser has-phaser phasers WHY set_why perl of po…»

[13:04] <Zoffix> m: sub foo is rw {}.of.say

[13:04] <camelia> rakudo-moar c26582: OUTPUT: «(Mu)␤»

[13:04] <Zoffix> m: sub foo is rw {}.returns.say

[13:04] <camelia> rakudo-moar c26582: OUTPUT: «(Mu)␤»

[13:04] * Zoffix shrugs

[13:04] <timotimo> good question

[13:04] <timotimo> let's see

[13:05] <timotimo> simply .rw

[13:05] <timotimo> m: sub foo is rw {}.rw.say

[13:05] <camelia> rakudo-moar c26582: OUTPUT: «True␤»

[13:05] <timotimo> m: sub foo {}.rw.say

[13:05] <camelia> rakudo-moar c26582: OUTPUT: «False␤»

[13:05] <Zoffix> ah cool

[13:05] <Zoffix> eater: what does "captures my alt" mean?

[13:06] <eater> alt as in the key alt

[13:06] <eater> normally I switch in tmux with alt-[nr]

[13:07] <Zoffix> weird

[13:07] <eater> ye

[13:07] <eater> but ctrl-b + [nr] still works

[13:10] <Geth> ¦ rakudo/nom: 6ed14ef6fc | (Zoffix Znet)++ | 2 files

[13:10] <Geth> ¦ rakudo/nom: [io grant] Remove `:directory` from IO::Spec::*.split

[13:10] <Geth> ¦ rakudo/nom:

[13:10] <Geth> ¦ rakudo/nom: It's an alies for :dirname, is not used anywhere, and comments from

[13:10] <Geth> ¦ rakudo/nom: three years ago indicate it was present only for transition period.

[13:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ed14ef6fc

[13:33] <Geth> ¦ rakudo/nom: 9021a48665 | (Zoffix Znet)++ | src/core/IO/Path.pm

[13:33] <Geth> ¦ rakudo/nom: [io grant] Make IO::Path.parts a Map instead of Hash

[13:33] <Geth> ¦ rakudo/nom:

[13:33] <Geth> ¦ rakudo/nom: Since modifying them will produce wrong results from some

[13:33] <Geth> ¦ rakudo/nom: methods (some use $!path, others use %!parts), it makes sense to

[13:33] <Geth> ¦ rakudo/nom: keep this attribute immutable.

[13:33] <Geth> ¦ rakudo/nom:

[13:33] <Geth> ¦ rakudo/nom: P.S.: the nqp::create bit is for perf reasons. Map.new or /.Map

[13:33] <Geth> ¦ rakudo/nom: are up to 35% slower than old way; this way is ~1% faster.

[13:33] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9021a48665

[13:34] <Geth> ¦ roast: fb61306aaa | (Zoffix Znet)++ | S32-io/io-path.t

[13:34] <Geth> ¦ roast: [io grant] Test IO::Path.parts attribute

[13:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/fb61306aaa

[13:34] <[Coke]> Zoffix: don't put semicolons after methods in docs.

[13:34] <Zoffix> [Coke]: doesn't that make one of xtests fail 'cause it can't compile that code block?

[13:35] <[Coke]> (the code checker barfs on them, and they also then don't match the style of the rest of the docs)

[13:35] <[Coke]> the ; makes it fail, yes.

[13:35] <Zoffix> ah, ok

[13:35] <Zoffix> I was putting them 'cause I thought I had an error when I *did*n't have them

[13:36] <[Coke]> also preceeded is not a word.

[13:36] <[Coke]> "preceded"

[13:36] <[Coke]> (I'm assuming those are all you, I didn't check git blame)

[13:39] <[Coke]> Zoffix++

[13:46] <[Coke]> Zoffix: fyi, occurences -> occurrences; coersion -> coercion; coerse -> coerce; symlinked needs to be "learned". (half of those are probably british vs. amerish)

[13:47] <Zoffix> symlinked didn't pop up for me

[13:47] <Zoffix> oh wait, yeah it did

[13:49] <[Coke]> Thanks.

[14:18] <[TuxCM]> This is Rakudo version 2017.04.3-249-gd18a3332e built on MoarVM version 2017.04-64-g6d5ea042

[14:18] <[TuxCM]> csv-ip5xs        2.565

[14:18] <[TuxCM]> test            12.484

[14:18] <[TuxCM]> test-t           4.221 - 4.241

[14:18] <[TuxCM]> csv-parser      12.808

[14:18] <[TuxCM]> (from the train Brussel - AMsterdam)

[16:00] <Zoffix> .ask labster and another question is about '.' in Unix and Win32 IO::SPECs. I see Unix changes empty path parts to '.' and if PATH is not set, returns an empty list; On Windows, empty bits are removed and '.' is always shoved to the head of the list. Was all that done on purpose?

[16:00] <yoleaux> Zoffix: I'll pass your message to labster.

[16:01] * Zoffix hates the "wtf is this done this way" moments when reading code -_-

[16:03] <Zoffix> https://en.wikipedia.org/wiki/PATH_(variable) "When a command is entered in a command shell or a system call is made by a program to execute a program, the system first searches the current working directory and then searches the path"

[16:03] <Zoffix> I guess that explains the "always '.'" on Windows

[16:08] <Zoffix> .tell labster never mind about the '.' in SPECs; figured it all out; still wondering about .join/.catpath tho

[16:08] <yoleaux> Zoffix: I'll pass your message to labster.

[16:10] <Zoffix> wtf :S stresstest ran into 584s before I killed it...

[16:10] <Zoffix> ZofBot: Google is ripping me off!!!

[16:10] <ZofBot> Zoffix, push'" I think the second , would want to be a ; if we do that Oh, wait :) Maybe the "yet" should go away too In that there's more wrong things you can write than NYI things Could just say something like "Only routine calls or variables that can '

[16:18] <Zoffix> m: dd IO::Spec::Win32.path

[16:18] <camelia> rakudo-moar 9021a4: OUTPUT: «(".", ("/home/camelia/perl5/perlbrew/bin:/home/camelia/perl5/perlbrew/perls/perl-5.20.1/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",).Seq)␤»

[16:18] <Zoffix> nice one...

[16:19] <Zoffix> ZofBot: ready the bread! Making a BUG SAMMICH

[16:19] <ZofBot> Zoffix, then(-> $res { given $res

[16:21] <Zoffix> u: ᨀ

[16:21] <unicodable6> Zoffix, U+1A00 BUGINESE LETTER KA [Lo] (ᨀ)

[16:21] <Zoffix> The bugs invented their own language!

[16:21] <Zoffix> I bet that's how they laugh at all the developers ᨀᨀᨀ (ka-ka-ka)

[16:22] <Zoffix> Oh gee, no wonder my VM is slow. I created a new one and forgot to adjust the cores so it's using 1 :(

[16:22] <ilmari> u: ᨖ

[16:22] <unicodable6> ilmari, U+1A16 BUGINESE LETTER HA [Lo] (ᨖ)

[16:22] <Zoffix> hah

[16:23] <Zoffix> m: say 1..ᨖ

[16:23] <camelia> rakudo-moar 9021a4: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    ᨖ used at line 1␤␤»

[16:23] <Zoffix> m: sub term:<ᨖ > { 1 }; say ᨖ ..∞

[16:23] <camelia> rakudo-moar 9021a4: OUTPUT: «1..Inf␤»

[16:33] <Zoffix> ZOFVM: Files=1242, Tests=135572, 110 wallclock secs (21.05 usr  3.07 sys + 2250.13 cusr 160.80 csys = 2435.05 CPU)

[16:35] <Geth> ¦ rakudo/nom: 0547979373 | (Zoffix Znet)++ | src/core/IO/Spec/Unix.pm

[16:35] <Geth> ¦ rakudo/nom: [io grant] Make IO::Spec::Unix.path consistent and 4.6x faster

[16:35] <Geth> ¦ rakudo/nom:

[16:35] <Geth> ¦ rakudo/nom: Return a Seq in all cases, including the empty-list one.

[16:35] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0547979373

[16:35] <Geth> ¦ roast: 7266522699 | (Zoffix Znet)++ | S32-io/io-spec-unix.t

[16:35] <Geth> ¦ roast: [io grant] Test return type of IO::Spec::Unix.path

[16:35] <Geth> ¦ roast:

[16:35] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/0547979373

[16:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7266522699

[16:38] <pmurias> is it normal that a .Slip method is being called while constant folding something in the setting?

[16:42] * Zoffix shrugs

[16:48] <Geth> ¦ rakudo/nom: 8992af131b | (Zoffix Znet)++ | src/core/IO/Spec/Win32.pm

[16:48] <Geth> ¦ rakudo/nom: [io grant] Fix IO::Spec::Win32.path and make 26x faster

[16:48] <Geth> ¦ rakudo/nom:

[16:48] <Geth> ¦ rakudo/nom: - Fix a GLR bug where all path bits were showed into 2nd element of

[16:48] <Geth> ¦ rakudo/nom:     returned list, instead of being flattened into it

[16:48] <Geth> ¦ rakudo/nom: - Make consistent with IO::Spec::Unix.path and always return a Seq

[16:48] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8992af131b

[16:53] <Geth> ¦ roast: ec8d47fbed | (Zoffix Znet)++ | S32-io/io-spec-win.t

[16:53] <Geth> ¦ roast: Replace tabs with space

[16:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ec8d47fbed

[16:56] <Geth> ¦ roast: 6ac3b4aabd | (Zoffix Znet)++ | S32-io/io-spec-win.t

[16:56] <Geth> ¦ roast: [io grant] Test IO::Spec::Win32.path

[16:56] <Geth> ¦ roast:

[16:56] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/8992af131b

[16:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6ac3b4aabd

[16:57] <Zoffix> oh oops, forgot to remove `"` from bits like old code does

[16:58] <Zoffix> And this wouldn't have happened if when the code was written tests were written alongside it :/

[16:58] <Zoffix> ZofBot: 26x faster; 2x wronger

[16:58] <ZofBot> Zoffix, modified }, @files»

[16:59] <Zoffix> What's the story with removing `"` anyway?

[17:00] <Zoffix> even paths with spaces on my Win10 don't got `"` around them

[17:01] <Zoffix> "It seems that Windows can execute programs with "quoted" paths, but the DLL search routine can't handle them." https://serverfault.com/questions/349179/path-variable-and-quotation-marks-windows

[17:02] <Zoffix> Feels like that shouldn't ever been added, but I guess.. too late now

[17:19] <Geth> ¦ rakudo/nom: 816b2d4bfa | (Zoffix Znet)++ | src/core/IO/Spec/Win32.pm

[17:19] <Geth> ¦ rakudo/nom: Remove `"` in IO::Spec::Win32.path

[17:19] <Geth> ¦ rakudo/nom:

[17:19] <Geth> ¦ rakudo/nom: Refactor in previous commit[^1] left out this functionality.

[17:19] <Geth> ¦ rakudo/nom:

[17:19] <Geth> ¦ rakudo/nom: Fix does not appear to affect claimed perf improvement; it's

[17:19] <Geth> ¦ rakudo/nom: still 25x-26x faster than original

[17:19] <Geth> ¦ rakudo/nom:

[17:19] <Geth> ¦ rakudo/nom: [1] https://github.com/rakudo/rakudo/commit/8992af131b

[17:19] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/816b2d4bfa

[17:19] <Geth> ¦ roast: 8e445f8576 | (Zoffix Znet)++ | S32-io/io-spec-win.t

[17:19] <Geth> ¦ roast: Test IO::Spec::Win32.path removes double quotes

[17:19] <Geth> ¦ roast:

[17:19] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/816b2d4bfa

[17:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8e445f8576

[18:42] <Zoffix> ¾ of all IO routines code-reviewed+tested+documented. I can see the light at the end of IO grant tunnel :)

[18:44] <Zoffix> well, maybe more, but only ¼ needs to be verified and possibly tested/documented

[19:06] <Geth> ¦ rakudo/nom: a282b8c896 | (Zoffix Znet)++ | src/core/IO/Handle.pm

[19:06] <Geth> ¦ rakudo/nom: [io grant] Fix IO::Handle.perl.EVAL roundtrippage

[19:06] <Geth> ¦ rakudo/nom:

[19:06] <Geth> ¦ rakudo/nom: - Currently tries to give :path as positional, causing compile error

[19:06] <Geth> ¦ rakudo/nom: - Currently loses most of the attributes

[19:06] <Geth> ¦ rakudo/nom:

[19:06] <Geth> ¦ rakudo/nom: Fix by using Mu.perl

[19:06] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a282b8c896

[19:07] <Geth> ¦ roast: dbbea15728 | (Zoffix Znet)++ | S32-io/io-handle.t

[19:07] <Geth> ¦ roast: [io grant] Test IO::Handle.perl.EVAL roundtrips

[19:07] <Geth> ¦ roast:

[19:07] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/a282b8c896

[19:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dbbea15728

[19:09] <lizmat> .

[19:11] <Zoffix> :

[19:12] <eater> !

[19:17] <Zoffix> m: "foobar".IO.resolve.perl.say

[19:17] <camelia> rakudo-moar a282b8: OUTPUT: «IO::Path.new("/home/camelia/foobar", :SPEC(IO::Spec::Unix), :CWD("foobar"))␤»

[19:18] <Zoffix> that :CWD is yuky. Gonna set it to $!SPEC.dir-sep instead

[19:28] <Geth> ¦ rakudo/nom: a4127884d8 | (Zoffix Znet)++ | src/core/IO/Path.pm

[19:28] <Geth> ¦ rakudo/nom: [io grant] Make IO::Path.resolve set CWD to $!SPEC.dir-sep

[19:28] <Geth> ¦ rakudo/nom:

[19:28] <Geth> ¦ rakudo/nom: The `self` is a bit of a nonsensical value that is still visible

[19:28] <Geth> ¦ rakudo/nom: to the outside via `.perl`. Setting it to .dir-sep will make it

[19:28] <Geth> ¦ rakudo/nom: set CWD to be the root path of the current volume.

[19:28] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a4127884d8

[19:29] <Geth> ¦ roast: 5eb513ce8c | (Zoffix Znet)++ | S32-io/io-path.t

[19:29] <Geth> ¦ roast: [io grant] Test IO::Path.resolve sets CWD to $!SPEC.dir-sep

[19:29] <Geth> ¦ roast:

[19:29] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/a4127884d8

[19:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5eb513ce8c

[19:45] <eater> moritz_:do you have any examples for where vow / promise is used in Rakudo?

[19:47] <Zoffix> eater: should be in some of these places: https://gist.github.com/zoffixznet/439f3a50d33e623b76f82427f1707f87

[19:47] <Zoffix> eater: and here are the docs for the Promise.vow with a small example: https://docs.perl6.org/type/Promise#method_vow

[19:49] <eater> Zoffix: thanks

[19:52] * Zoffix gives nine a #content { width: 1000px; margin: auto; }

[19:53] <Zoffix> On a 32" monitor that's one wide page :P

[19:53] <Zoffix> 1440p

[19:53] <Zoffix> m: say 1440.sqrt.say

[19:53] <camelia> rakudo-moar a41278: OUTPUT: «37.9473319220206␤True␤»

[19:53] <Zoffix> m: say 1440000.sqrt.say

[19:53] <camelia> rakudo-moar a41278: OUTPUT: «1200␤True␤»

[19:53] * Zoffix shrugs

[19:54] <eater> lol

[19:57] <Zoffix> nine++ good post

[20:06] * [Coke] wonders what HAS scope is.

[20:33] <moritz_> [Coke]: you use it in native classes where attributes are inlined, not used by reference/pointer

[20:35] <[Coke]> I'm not sure what that means, but that's enough context.

[20:38] <moritz_> class Foo is repor('CStruct') { has int $.x; HAS int $.y }

[20:38] <moritz_> $.x is a pointer to an int, $.y is an int

[20:39] <moritz_> struct { int* x, int y }

[20:40] <[Coke]> I dislike that those differ only by case :|

[20:42] <eater> that doesn't look nice no

[20:42] <moritz_> I thinkk we considered a trait, but there were technical reasons against it

[20:42] <moritz_> (like, traits coming too late, or something)

[20:45] <Zoffix> .oO( has.. vs... really HAS! )

[20:45] <eater> really-has

[20:45] <eater> fixed!

[20:46] <Geth> ¦ rakudo/nom: d76206e74b | eater++ (committed by Moritz Lenz) | src/core/Proc/Async.pm

[20:46] <Geth> ¦ rakudo/nom: Add ready Promise to Proc::Async

[20:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d76206e74b

[20:52] <eater> :DDD

[20:52] <Geth> ¦ roast: the-eater++ created pull request #269: Add tests for Proc::Async.ready

[20:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/269

[21:00] <Zoffix> ugh stupid github and its reviews foil me again... comment sat unsubmitted :/

[21:02] <[Coke]> glun

[21:02] <[Coke]> .... ww

[21:04] <Zoffix> ZofBot: glun!

[21:04] <ZofBot> Zoffix, (X) Range Any in range

[21:10] <Zoffix> m: use Test; isa-ok X::OS.new, X::OS

[21:10] <camelia> rakudo-moar d76206: OUTPUT: «not ok 1 - The object is-a 'X::OS'␤␤# Failed test 'The object is-a 'X::OS''␤# at <tmp> line 1␤# Actual type: X::OS␤»

[21:10] <Zoffix> huh

[21:10] <eater> ye

[21:11] <Zoffix> m: say X::OS.isa(X::OS)

[21:11] <camelia> rakudo-moar d76206: OUTPUT: «False␤»

[21:11] <Zoffix> m: say Int.isa(Int)

[21:11] <camelia> rakudo-moar d76206: OUTPUT: «True␤»

[21:11] <Zoffix> m: say X::OS.does(X::OS)

[21:11] <camelia> rakudo-moar d76206: OUTPUT: «True␤»

[21:12] <Zoffix> eater: ah, it's cause it's a role; you can use `does-ok`, but `cmp-ok` with '~~' is fine too

[21:13] <eater> Zoffix: ah, thanks :)

[21:14] <eater> Zoffix: fixed :)

[21:15] <Geth> ¦ roast: 6e010dd8d7 | eater++ (committed by Zoffix Znet) | 3 files

[21:15] <Geth> ¦ roast: Add tests for Proc::Async.ready (#269)

[21:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6e010dd8d7

[21:16] <Geth> ¦ roast: 3992ddcf90 | (Zoffix Znet)++ | S17-procasync/nonexistent.t

[21:16] <Geth> ¦ roast: Add test description

[21:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3992ddcf90

[21:16] <Zoffix> eater++

[21:17] <eater> thanks Zoffix :)

[21:30] <eater> anyway, time for me to head home, will build fix the docs tomorrow  o/

[21:35] <Zoffix> \o

[21:36] <AlexDaniel> fwiw, whateverable will now build all recent branches

[21:36] <AlexDaniel> you cannot use the branch name yet, but shas work just fine

[21:36] <AlexDaniel> like

[21:37] <AlexDaniel> c: bb87aff4655 say 42 # lexical-require branch

[21:37] <committable6> AlexDaniel, ¦bb87aff: «42»

[21:37] <AlexDaniel> should be useful if you want to test something quickly but don't want to compile it :)

[21:55] <Zoffix> Cool

[21:55] <Zoffix> AlexDaniel++

[21:56] <Zoffix> c: 031aa33 IO::CatHandle

[21:56] <committable6> Zoffix, ¦031aa33: «Cannot test this commit (Commit exists, but a perl6 executable could not be built for it)»

[21:56] <Zoffix> heh ok then

[21:56] <AlexDaniel> I tried this several times

[21:56] <AlexDaniel> Zoffix: is it actually not buildable?

[21:56] <Zoffix> It might be in mid-progress and doesn't compile at all

[21:56] <AlexDaniel> yeah :)

[21:57] <AlexDaniel> okay then

[21:57] <AlexDaniel> Zoffix: well, if you want to get more excited, we are going to build back to 2014.01 quite soon :)

[22:09] <Zoffix> heh
