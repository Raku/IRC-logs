[00:00] <dogbert17> should it really SEGV though?

[00:01] <geekosaur> modifying an iterator you are using is a known DIHWIDT

[00:01] <geekosaur> one could argue it should try to catch that, but it would add a fair amount of overhead

[00:02] <Zoffix> dogbert17: sup? Or is the SEGV what you wanted to tell me?

[00:02] <dogbert17> SEGV :)

[00:02] <Zoffix> OK. No idea.

[00:02] * Zoffix lurks back

[00:03] <dogbert17> but it turns out that I'm the one doing nasty stuff

[00:04] <timotimo> ideally we wouldn't asplode at all

[00:04] <dogbert17> I guess I'll have to go with eager unless there's another way to do this

[00:06] <timotimo> i wonder what exactly it's looking at there to have something fully nulled out but not be aware it's a null object

[00:06] <timotimo> it may be as easy as saying "if the stable is null, we consider it to be a null object"

[00:07] <dogbert17> Program received signal SIGSEGV, Segmentation fault.

[00:07] <dogbert17> HASH_ITER_NEXT_ITEM (cur_handle=0xa1db1fc, cur_handle=0xa1db1fc, bucket_tmp=0xb76515d0) at 3rdparty/uthash.h:563

[00:07] <dogbert17> 563     while (*bucket_tmp < ht->num_buckets) {

[00:07] <dogbert17> (gdb) bt

[00:07] <dogbert17> #0  HASH_ITER_NEXT_ITEM (cur_handle=0xa1db1fc, cur_handle=0xa1db1fc, bucket_tmp=0xb76515d0) at 3rdparty/uthash.h:563

[00:07] <dogbert17> #1  shift (tc=0x804c5f8, st=0x8078128, root=0xb76515b0, data=0xb76515c0, value=0x8f3dfa8, kind=8) at src/6model/reprs/MVMIter.c:111

[00:07] <timotimo> hm, no, the hash entry is a pointer to an object

[00:07] <timotimo> so how does that work ...

[00:08] <dogbert17> timotimo: it's the second SEGV I've seen today

[00:09] <dogbert17> the other one was very strange

[00:09] <dogbert17> https://irclog.perlgeek.de/moarvm/2017-12-24#i_15618404

[00:09] <timotimo> anyway, yeah, valgrind also shows the hash iter is doing use-after-frees and then it accesses the object it gets in a way that's rather not safe

[00:10] <timotimo> that looks like the class definition of that cstruct has some kind of problem

[00:10] <timotimo> do you have the code to go with that?

[00:11] <dogbert17> it's one of the nativecall tests, sec

[00:11] <timotimo> oh, that's ... fun

[00:11] <dogbert17> t/04-nativecall/12-sizeof.t

[00:12] <timotimo> those usually don't segv

[00:13] <dogbert17> it only SEGV's for me (sometimes) when I run it through gdb

[00:13] <Geth> ¦ roast: 3ef43a8769 | (Zoffix Znet)++ | 2 files

[00:13] <Geth> ¦ roast: [v6.d REVIEW] Improve &first [:end], :kv tests

[00:13] <Geth> ¦ roast:

[00:13] <Geth> ¦ roast: - Test full structure of return, not stringified versions

[00:13] <Geth> ¦ roast: - Shorten descriptions

[00:13] <Geth> ¦ roast: - Get rid of needless variables

[00:13] <Geth> ¦ roast:

[00:13] <Geth> ¦ roast: 6 removed tests are `ok ... ~~ List` typechecks that got subsumed

[00:13] <Geth> ¦ roast: by is-deeply tests.

[00:13] <Geth> ¦ roast:

[00:13] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/210874914e4adfd306222fdd67c7e633fb17d933

[00:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3ef43a8769

[00:15] <timotimo> we could have a stress test that creates a million random cstruct classes with the meta object protocol

[00:17] <dogbert17> could it possibly be a missing MVMROOT again?

[00:18] <timotimo> hm, what allocates in there?

[00:19] <timotimo> perhaps one of the at_key_o or at_pos_o is being used on a native array and that causes boxing? though i think if you at_*_o on a native array it'll explode instead of autoboxing

[00:20] <dogbert17> https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/CStruct.c#L339

[00:22] <dogbert17> it happens within an 'if (inlined) {' might some kind of optimization be involved here perhaps?

[00:23] <dogbert17> I was looking at https://github.com/rakudo/rakudo/issues/1262 and trying to reproduce

[00:23] <timotimo> inlining there refers to whether a struct was a has or a HAS

[00:24] <timotimo> i.e. whether it'd be a pointer to a struct or actually copying all the contents into itself

[00:26] <dogbert17> aha, now I've learned something new :) I suspected some kind of typo when I first saw that

[00:53] * dogbert17 continues with Advent of Code for the 24th

[01:34] <Geth> ¦ roast: 933ad8294c | (Zoffix Znet)++ | S06-parameters/smiley.t

[01:34] <Geth> ¦ roast: Remove trailing whitespace

[01:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/933ad8294c

[01:34] <Geth> ¦ roast: 686e6a68db | (Zoffix Znet)++ | 2 files

[01:34] <Geth> ¦ roast: [v6.d REVIEW] Relocate/expand tests

[01:34] <Geth> ¦ roast:

[01:34] <Geth> ¦ roast: - These are smileys, not coercers

[01:34] <Geth> ¦ roast: - Add tests for :D smileys too

[01:34] <Geth> ¦ roast:

[01:34] <Geth> ¦ roast: Orig: https://github.com/perl6/roast/commit/e7fb85a521e0898b35eda2df1ec2cd741b553a6b

[01:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/686e6a68db

[01:38] <Geth> ¦ roast: fa002d7d62 | (Zoffix Znet)++ | S06-parameters/smiley.t

[01:38] <Geth> ¦ roast: [v6.d REVIEW] Compactify test code

[01:38] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/fa002d7d62

[03:08] <Geth> ¦ roast: a90671fb6e | (Zoffix Znet)++ | S32-list/squish.t

[03:08] <Geth> ¦ roast: [v6.d REVIEW] Format/Improve .squish tests

[03:08] <Geth> ¦ roast:

[03:08] <Geth> ¦ roast: - Organize a bit and shorten descriptions

[03:08] <Geth> ¦ roast: - Test proper returned datastructures instead of just

[03:08] <Geth> ¦ roast:     their stringified versions

[03:08] <Geth> ¦ roast:

[03:08] <Geth> ¦ roast: - Two `squish has === semantics` tests were combined into one

[03:08] <Geth> ¦ roast: <…commit message has 5 more lines…>

[03:08] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a90671fb6e

[07:57] <Geth> ¦ rakudo: 3a8a50b5cd | (Zoffix Znet)++ | 2 files

[07:57] <Geth> ¦ rakudo: Allow anon param with signature unpacking

[07:57] <Geth> ¦ rakudo:

[07:57] <Geth> ¦ rakudo: Fixes R#1326: https://github.com/rakudo/rakudo/issues/1326

[07:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3a8a50b5cd

[07:57] <synopsebot> R#1326 [open]: https://github.com/rakudo/rakudo/issues/1326 [LHF] Parse failure with signature unpacking on anon Callable param

[07:58] <Geth> ¦ roast: dcb982a073 | (Zoffix Znet)++ | S06-signature/closure-parameters.t

[07:58] <Geth> ¦ roast: Spec anon param can have signature unpacking

[07:58] <Geth> ¦ roast:

[07:58] <Geth> ¦ roast: Closes https://github.com/rakudo/rakudo/issues/1326

[07:58] <Geth> ¦ roast: Rakudo impl: https://github.com/rakudo/rakudo/commit/3a8a50b5cd

[07:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dcb982a073

[08:25] <Zoffix> Does anyone know what's up with setting "origin.push_url"? It breaks `git push` on my system, saying permission denied. I fixed that for roast in https://github.com/rakudo/rakudo/commit/9606aea22a341 but now I notice nqp and MoarVM also do it and are also broken for me. How come it does that stuff? Is it safe to remove it?

[08:26] <Geth> ¦ nqp: 98857658c3 | (Zoffix Znet)++ | src/QRegex/P5Regex/Actions.nqp

[08:26] <Geth> ¦ nqp: Remove trailing whitespace

[08:26] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/98857658c3

[08:27] <geekosaur> committers should use what it had there

[08:28] <geekosaur> I think I'd say that the Makefiles should use the public URLs, not the committer private ones

[08:29] <geekosaur> if committers want to have a shortcut, they should get maintainer/committer rules distinct from the normal ones

[08:30] <Zoffix> So it remote mangling should be removed from makefiles?

[08:30] <Zoffix> Both of those look public to me.

[08:31] <Zoffix> s/it //;

[08:31] <geekosaur> the push url is always for maintainers. git:... URLS could be used by anyone, but usually should only be used by maiontainers; https: urls for everyone else

[08:34] <geekosaur> (the git@... format implies [ssh+]git: protocol)

[08:34] <geekosaur> also see what teatime said in #perl6 instead of in here

[08:34] <teatime> whoops sorry

[08:35] <Zoffix> Ah, k, I get it.

[08:35] <Zoffix> I don't use keys. I have my password cached

[08:36] <geekosaur> anyway: for maintainers there might be a separate set of rules, the default should be https: for most checkouts

[08:36] <Geth> ¦ rakudo: 9cb2170ba1 | (Zoffix Znet)++ | tools/build/Makefile-common-rules.in

[08:36] <Geth> ¦ rakudo: Revert "Fix issues with roast checkout"

[08:36] <Geth> ¦ rakudo:

[08:36] <Geth> ¦ rakudo: This reverts commit 9606aea22a341e7718b47a9270e479e6857b4335.

[08:36] <Geth> ¦ rakudo:

[08:36] <Geth> ¦ rakudo: Apparently I'm just speshul:

[08:36] <Geth> ¦ rakudo: https://irclog.perlgeek.de/perl6/2017-12-25#i_15619652

[08:36] <geekosaur> including roast

[08:36] <Geth> ¦ rakudo: https://irclog.perlgeek.de/perl6-dev/2017-12-25#i_15619640

[08:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9cb2170ba1

[08:37] <geekosaur> hm. I would have left that in and raised the issue instead that the Makefiles shouldn't be forcing committer-style ssh+git-based checkouts

[08:38] <Zoffix> But checkouts are over https, no? It's only push that gets converted to git://, and teatime++'s explanation for why that stuff's there makes sense to me

[08:38] <geekosaur> you replaced a git clone git:... with a git clone https:

[08:39] <geekosaur> if I read the diff right

[08:39] <geekosaur> I would say yours was preferable

[08:39] <Zoffix> Ah, right, that was there too.

[08:39] <geekosaur> and the push url should just not be in there, as I said if maintainers want a shortcut there then they should use a different checkout target

[08:40] <geekosaur> so I prefer what your patch did as the general case, and if someone wants the original behavior then it should be a maintainer-checkout rule instead of t/spec

[10:07] <Zoffix> Decided to make a helper script for rakudo core dev that builds stuff and (in the future) fixes remotes, does version bumps, etc: https://github.com/zoffixznet/rdev

[10:08] <Zoffix> huggable: core dev :is: Helper script for Rakudo Perl 6 core development: https://github.com/zoffixznet/rdev

[10:08] <huggable> Zoffix, Added core dev as Helper script for Rakudo Perl 6 core development: https://github.com/zoffixznet/rdev

[10:18] <Zoffix> gah. Started this because I wanted to make changes in nqp and build it, but it still dies with "Unhandled exception: Missing or wrong version of dependency 'gen/moar/stage2/NQPP5QRegex.nqp' (from 'gen/moar/Perl6-Actions.nqp')" even after I built everything into one prefix -_-

[10:21] <Zoffix> looks like need make clean in nqp and rakudos dirs

[10:31] <Zoffix> this's taking ages :| but at least it works

[10:32] <Zoffix> make clean in both nqp and rakudo dirs, then make + make install in nqp, then make + make install in rakudo. That looks right, right? I'm not wasting time re-compiling stuff that ain't needed recompiling, right?

[10:51] <Zoffix> doh... nuked a screenful of new tests while writing that helper script -_-

[12:14] <tbrowder> ‘lo on Christmas Day, #perl6-dev

[12:15] <tbrowder> can i get anyone interested in talking about pod and virtual margins?

[12:16] <timotimo> oh my

[12:19] <tbrowder> or debugging Perl 6 grammar?

[12:20] <timotimo> debugging grammars in general can be rather hairy

[12:21] <tbrowder> i wonder if it’s possible to strip non-perl6 grammar syntax from Grammar.nqp and Actions.nqp and then use Perl 6 to debug at least a large chunk of the language grammar?

[12:22] <timotimo> sounds like a lot of work :(

[12:22] <timotimo> are you still rebuilding all of grammar and core setting every time to test your pod changes?

[12:23] <tbrowder> yeah, but i think the payoff coulld be big for findind subtle problems.

[12:24] <tbrowder> yes, all is rebuilt after each change...

[12:24] <timotimo> oof

[12:24] <timotimo> have you considered using slang functionality?

[12:25] <tbrowder> i know of it but don’t know how to start

[12:27] <tbrowder> for instance i think some pod probs are caused by virtual margins being misused and would like to peer into values of matches as they occur

[12:28] <timotimo> BEGIN $?LANG.refine_slang: 'MAIN', role { token pod_block:sym<finish> { ^^ \h* [ '=finnish' <pod_newline> ] $<finish>=. } }); { }; =finnish say test

[12:28] <tbrowder> where is a good place to start looking into slang?

[12:28] <timotimo> m: BEGIN $?LANG.refine_slang: 'MAIN', role { token pod_block:sym<finish> { ^^ \h* [ '=finnish' <pod_newline> ] $<finish>=. } }); { }; =finnish say test

[12:28] <camelia> rakudo-moar 9cb2170ba: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected closing bracket␤at <tmp>:1␤------> 3finnish' <pod_newline> ] $<finish>=. } }7⏏5); { }; =finnish say test␤»

[12:28] <timotimo> m: BEGIN $?LANG.refine_slang: 'MAIN', role { token pod_block:sym<finish> { ^^ \h* [ '=finnish' <pod_newline> ] $<finish>=. } }; { }; =finnish say test

[12:28] <camelia> rakudo-moar 9cb2170ba: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix = instead.␤Did you make a mistake in Pod syntax?␤at <tmp>:1␤------> 3 <pod_newline> ] $<finish>=. } }; { }; =7⏏5finnish say test␤»

[12:28] <timotimo> m: BEGIN $?LANG.refine_slang: 'MAIN', role { token pod_block:sym<finish> { ^^ \h* [ '=finnish' <pod_newline> ] $<finish>=. } }; { }; { =finnish say test }

[12:28] <camelia> rakudo-moar 9cb2170ba: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Preceding context expects a term, but found infix = instead.␤Did you make a mistake in Pod syntax?␤at <tmp>:1␤------> 3pod_newline> ] $<finish>=. } }; { }; { =7⏏5finnish say test }␤»

[12:28] <timotimo> how do i ...

[12:30] <timotimo> oh, it wants a newline after that, duh

[12:30] <timotimo> m: BEGIN $?LANG.refine_slang: 'MAIN', role { token pod_block:sym<finish> { ^^ \h* [ '=finnish' <pod_newline> ] $<finish>=. } }; { };␤=finnish␤say test

[12:30] <camelia> rakudo-moar 9cb2170ba: ( no output )

[12:30] <timotimo> m: BEGIN $?LANG.refine_slang: 'MAIN', role { token pod_block:sym<finish> { ^^ \h* [ '=finnish' <pod_newline> ] $<finish>=. } }; ␤=finnish␤say test

[12:30] <camelia> rakudo-moar 9cb2170ba: ( no output )

[12:30] <timotimo> m: ␤=finnish␤say test

[12:30] <camelia> rakudo-moar 9cb2170ba: ( no output )

[12:30] <timotimo> oh, that also works

[12:31] <timotimo> m: BEGIN $?LANG.refine_slang: 'MAIN', role { token pod_block:sym<finish> { ^^ \h* [ '=finnish' <pod_newline> { say "lol" } ] $<finish>=. } }; ␤=finnish␤say test

[12:31] <camelia> rakudo-moar 9cb2170ba: ( no output )

[12:31] <timotimo> m: BEGIN $?LANG.refine_slang: 'MAIN', role { token pod_block:sym<finish> { ^^ \h* [ '=finnish' <pod_newline> { say "lol" } ] $<finish>=. } }; { }␤=finnish␤say test

[12:31] <camelia> rakudo-moar 9cb2170ba: OUTPUT: «lol␤5===SORRY!5=== Error while compiling <tmp>␤Undeclared routines:␤    ay used at line 3␤    test used at line 3␤␤lol␤»

[12:31] <timotimo> m: BEGIN $?LANG.refine_slang: 'MAIN', role { token pod_block:sym<finish> { ^^ \h* [ '=finnish' <pod_newline> { say "lol" } ] $<finish>=. } }; { }␤=finnish␤

[12:32] <camelia> rakudo-moar 9cb2170ba: OUTPUT: «lol␤lol␤lol␤lol␤»

[12:32] <timotimo> anyway, you can replace or add individual pieces to the perl6 grammar like that

[12:34] <timotimo> AFK

[12:34] <tbrowder> so say i want to look at the value of token pod_configuration in a p6 file can that be done?

[12:35] <timotimo> how do you mean?

[12:37] <tbrowder> well, pod_configuation is a token in p6 grammar and i would like to see its matched value during parse of a p6 file.

[12:39] <tbrowder> or at least dump it somehow. i tried to write a dumper sub during prep of my latest PR but got sidetracked by a build error.so i’m not sure yet if i can do that.

[12:42] <tbrowder> i would really like to use jnthn’s grammar debugger on p6 grammar, hence my earlier question on stripping the grammar.nqp and actions.nqp files.

[13:26] <Geth> ¦ rakudo: f01c50f1a4 | (Elizabeth Mattijsen)++ | src/core/Cool.pm

[13:26] <Geth> ¦ rakudo: Add Cool candidate for .is-prime

[13:26] <Geth> ¦ rakudo:

[13:26] <Geth> ¦ rakudo: As spotted on StackOverflow:

[13:26] <Geth> ¦ rakudo:   https://stackoverflow.com/questions/47962163/is-there-some-difference-between-is-prime-and-is-prime-in-perl-6

[13:26] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f01c50f1a4

[14:57] <Geth> ¦ rakudo: 237019665b | (Elizabeth Mattijsen)++ | 4 files

[14:57] <Geth> ¦ rakudo: A more thorough handling of is-prime

[14:57] <Geth> ¦ rakudo:

[14:57] <Geth> ¦ rakudo: - sub is-prime now just passes on to method handling

[14:57] <Geth> ¦ rakudo: - Cool.is-prime now just numerifies

[14:57] <Geth> ¦ rakudo: - added optimised Num and Rational candidates

[14:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/237019665b

[15:04] <Geth> ¦ nqp: 4868e7a3dd | (Elizabeth Mattijsen)++ | tools/build/MOAR_REVISION

[15:04] <Geth> ¦ nqp: Bump Moar to get is-prime JITting

[15:04] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/4868e7a3dd

[15:04] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.12-6-gcb4c194...2017.12-7-gaf7d58c

[15:23] <Geth> ¦ rakudo: 5b147fc81f | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION

[15:23] <Geth> ¦ rakudo: Bump NQP to get is-prime JITting

[15:23] <Geth> ¦ rakudo:

[15:23] <Geth> ¦ rakudo: Alas, this makes things green in the profile, but apparently most of the

[15:23] <Geth> ¦ rakudo: work was already done by the VM, so in the end this only provided a few %

[15:23] <Geth> ¦ rakudo: at most.

[15:23] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/5b147fc81f

[15:23] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.12-9-g5f68310...2017.12-11-g4868e7a

[17:04] <FROGGS> o/

[17:11] <lizmat> FROGGS o/

[19:07] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/12/25/2017-52-when-it-is-no-more/

[19:11] <dogbert17> lizmat: "is about to make a same mistake as Rakudo Perl 6"

[19:11] <lizmat> yes?

[19:11] <dogbert17> is it my lack of english but this doesn't read right

[19:12] <lizmat> well, I wanted to emphasize it's not the only mistake  :-)

[19:12] <dogbert17> same -> similar ?

[19:12] <lizmat> ok will reword

[19:14] <dogbert17> lizmat++

[19:15] <dogbert17> lizmat, btw did you see this discussion yeaterday? https://irclog.perlgeek.de/perl6-dev/2017-12-24#i_15619003

[19:15] * dogbert17 my spelling sucks bigtime, grrr

[19:16] <lizmat> dogbert17: no I didn't...

[19:16] <lizmat> is there a ticket / issue already?

[19:16] <lizmat> if not, please make one

[19:16] <lizmat> :-)

[19:17] <dogbert17> only if you think that there's a bug lurking :-)

[19:17] <lizmat> if it segfaults without doing any NativeCall, it's a bug by definition in my book

[19:17] <dogbert17> ok, will report

[19:20] <lizmat> dogbert17++

[19:21] * lizmat goes back to Christmas frolicking

[19:28] <AlexDaniel> reportable6: list

[19:29] <reportable6> AlexDaniel, https://gist.github.com/cfe70d5b5176400f3bbe4395ccb04d24

[19:29] <AlexDaniel> reportable6: 2017-12-18T00:00:00Z 2017-12-25T00:00:00Z

[19:29] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[19:30] <reportable6> AlexDaniel, https://gist.github.com/e022960874b13561a8cb9dd9e98e9769

[19:35] <El_Che> new rakudo, new failing tests: https://travis-ci.org/nxadm/rakudo-pkg/jobs/321506132#L1652

[19:37] <El_Che> never saw that one fail before

[19:57] <dogbert17> lizmat: https://github.com/rakudo/rakudo/issues/1340

[20:13] <Zoffix> lizmat++ # good weekly

[20:20] <Geth> ¦ nqp: 10e3924779 | (Zoffix Znet)++ | src/QRegex/P5Regex/Actions.nqp

[20:20] <Geth> ¦ nqp: Fix crash with named captures in P5 regexes

[20:20] <Geth> ¦ nqp:

[20:20] <Geth> ¦ nqp: Before numerically checking the name, check that its first char

[20:20] <Geth> ¦ nqp: is a number, as named captures can't have that.

[20:20] <Geth> ¦ nqp:

[20:20] <Geth> ¦ nqp: While this fixes https://github.com/rakudo/rakudo/issues/1269 ,

[20:20] <Geth> ¦ nqp: I couldn't come up with code that covered the

[20:20] <Geth> ¦ nqp: `elsif $rxtype eq 'subrule' && $ast.subtype eq 'capture'`

[20:20] <Geth> ¦ nqp: conditional where the same issue appeared to exist, so that won't

[20:20] <Geth> ¦ nqp: be covered by the tests for the Issue.

[20:20] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/10e3924779

[20:57] <lizmat> El_Che: is that repeatable ?

[20:58] <lizmat> afk again&

[21:09] * moritz purged some spam

[21:19] <AlexDaniel> I have no idea what they are trying to achieve with this spam

[21:23] <geekosaur> annoyance. makes them feel powerful because they can mess with other people.

[21:23] <geekosaur> some people are just broken.

[21:33] <tbrowder> AlexDaniel: Merry Christmas! Reviewing PRs today?

[21:34] <AlexDaniel> tbrowder: sure!

[21:35] <tbrowder> was Santa good to you?

[21:35] <tbrowder> Santa always seems to bring me bills...

[21:39] <AlexDaniel> dunno, I was woodworking for the whole day :) Santa probably never found me in the sawdust

[21:40] <tadzik> sounds fun :)

[21:41] <AlexDaniel> what! π in 79 characters!

[21:41] <AlexDaniel> Finally someone found a way!

[21:41] <AlexDaniel> everything I tried was too slow in rakudo

[21:47] <AlexDaniel> tbrowder: “my int $i := $s;” what if it's very large?

[21:48] <AlexDaniel> tbrowder: like 9999999999999999999999999

[21:49] <tbrowder> um, good question, check length of int string and convert to bit int?

[21:49] <tbrowder> *bigint?

[21:50] <tbrowder> or keep as string if still too big?

[21:52] <tbrowder> i should also test neg ints and numbers

[21:52] <tbrowder> s/test neg/test for neg/

[21:53] <tbrowder> um, need to improve those regexes..

[21:56] <AlexDaniel> tbrowder: oh. yeah. fwiw there's fromstr_I but that does not seem to be used very often

[21:57] <tbrowder> ok, looking at that while you continue looking for other warts...

[22:00] <AlexDaniel> tbrowder: and please write tests for that also

[22:00] <AlexDaniel> the 9999 thing

[22:00] <AlexDaniel> because if we end up refactoring everything we probably don't want to regress with that part :)

[22:07] <AlexDaniel> tbrowder: the magic in make-config-hash is rather scary :)

[22:11] <tbrowder> always open to ideas! that’s how i see it now, though. i should at least check for even num of elements.

[22:17] <tbrowder> i’ll make all those chgs and report when rdy. and any ideas about improving hash treatment are very welcome.

[22:18] <AlexDaniel> tbrowder: well, what if the hash contains strings and some of them have => or , ?

[22:25] <Geth> ¦ rakudo: 8aa17f2736 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[22:25] <Geth> ¦ rakudo: [NQP Bump] 10e3924 Fix crash with named captur […]

[22:25] <Geth> ¦ rakudo:

[22:25] <Geth> ¦ rakudo: NQP bump brought: https://github.com/perl6/nqp/compare/2017.12-11-g4868e7a...2017.12-12-g10e3924

[22:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8aa17f2736

[22:25] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.12-11-g4868e7a...2017.12-12-g10e3924

[22:25] <Zoffix> haw

[22:25] <El_Che> lizmat: yes, the failures are on different operating systems and version

[22:25] <El_Che> s

[22:26] <Zoffix> Bumped using my awesome helper script :)  `z bump n` + `z bump push`

[22:26] <Zoffix> huggable: core dev

[22:26] <huggable> Zoffix, Helper script for Rakudo Perl 6 core development: https://github.com/zoffixznet/rdev

[22:26] <Zoffix> That one

[22:26] <El_Che> lizmat: rakudo failed on all the operation systems and versions I build: https://travis-ci.org/nxadm/rakudo-pkg/builds/321506131

[22:28] <Zoffix> That test passes for me on HEAD

[22:29] <Zoffix> "#?rakudo.jvm skip 'OutOfMemoryError: Java heap space'"

[22:29] <tbrowder> hm, without running through the grammar again i don’t think we should be expected to handle all possibilities. i guess we could specify an alternative format with all hash entries having a list form, inside outer {}, and an element separator char NOT used in any value element.  but if you want to handle all possibilities, it will take a big drawing board to return to imho.

[22:30] <Zoffix> Perhaps travis ain't got enough memory? There aren't any issues in rakudos' travis runs tho

[22:30] <Zoffix> El_Che: how are you running the tests? Is that just normal `make test`?

[22:30] <tbrowder> but my thinking is too parochial i’m sure.

[22:30] <El_Che> lizmat: this travis build is a new run (will start shorttly). We'll see if the tests fail everywhere again: https://travis-ci.org/nxadm/rakudo-pkg/builds/321564136

[22:30] <El_Che> Zoffix: yes

[22:31] * Zoffix shrugs

[22:31] <El_Che> same way as the packages are been built for quite some time

[22:31] <Zoffix> m: my $a = 'a' x 1073741824 ; say $a.chars

[22:31] <camelia> rakudo-moar 8aa17f273: OUTPUT: «1073741824␤»

[22:31] <El_Che> only difference with pass and fail was the bump in rakudo, moarvm, nqp versions

[22:34] <AlexDaniel> tbrowder: maybe some TODO tests for things that are not handled yet?

[22:37] <tbrowder> AlexDaniel: i need to investigate the details of the <pblock> more to see if more can be done with the existing format. and i will add tests for all chgs to be made and i can certainly add some tests known to fail unless all is handled properly in the interim.

[22:38] <tbrowder> i’ll touch base with you later this week.

[22:38] <AlexDaniel> tbrowder: cool. Then let me know once that is done and we'll merge it
