[02:13] <Geth> ¦ rakudo: FCO++ created pull request #1029: add ⁇ ‼ unicode version

[02:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1029

[02:16] <Geth> ¦ roast: FCO++ created pull request #246: Add tests for unicode version of ?? !!

[02:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/246

[04:59] <travis-ci> Rakudo build errored. Zoffix Znet 'Test Nil line return in REPL ends up as Nil in output

[04:59] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/206298255 https://github.com/rakudo/rakudo/compare/6c873b9c9393...0f37dd38e061

[06:39] <moritz> IOninja: you now have direct access to star

[07:25] <[Tux]> In the original script I now see:

[07:25] <[Tux]> Tue 14-03-2017	20:00	HAWA	De Burcht			twee maal verplaatst: een keer naar voren, en een keer terug

[07:25] <[Tux]> perl6    test        P6opaque: no such attribute '$storage' in type Map when trying to bind a value

[07:25] <[Tux]> (ignore the middle line :)

[07:27] <[Tux]> This is Rakudo version 2017.02-133-g7966dad5e built on MoarVM version 2017.02-20-g773711e1

[07:27] <[Tux]> csv-ip5xs        2.809

[07:27] <[Tux]> test-t           4.973 - 5.104

[07:27] <[Tux]> csv-parser      12.822

[09:59] <lizmat> Files=1177, Tests=55954, 190 wallclock secs (11.43 usr  4.51 sys + 1131.51 cusr 106.98 csys = 1254.43 CPU)

[11:00] <IOninja> moritz++ thank

[11:01] <IOninja> [TuxCM]: is that good or bad?

[11:01] <IOninja> Or the error is what you see.

[11:01] <IOninja> s/Or/Oh/;

[11:32] * IOninja is mildly amused #1029 fails 25 stresstest files before just hanging the run.

[11:35] <IOninja> samcv: and yeah, the [ || ... ] and [ | ... ] is used all over the place. Lets you have an nice straight line of "||" before each conditional

[11:36] <samcv> that's fine with me then :)

[11:39] <jnthn> It's parsed "specially" so the leading one is a no-op

[11:40] <samcv> night all

[11:40] <IOninja> night

[11:48] <[TuxCM]> IOninja, it is irrelevant: it is the old initial script. I'll have a look later to see if that can be fixed

[11:49] <IOninja> [TuxCM]: which one is the "original script"? `test.pl`?

[11:49] <[TuxCM]> yep

[11:51] <IOninja> ./lib/Text/CSV.pm:690:    multi method column_names (False)

[11:51] <IOninja> That method won't ever be called BTW. You possibly want (Bool:D where {False})

[11:52] <IOninja> Or not

[11:52] <[TuxCM]> that script was the first functional draft, so it will not ever be production code

[11:52] <IOninja> m: multi x($) { say "here" }; multi x(Bool:D where {False}) {say "there"}; x False

[11:52] <camelia> rakudo-moar 7966da: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot do non-typename cases of type_constraint yet␤at <tmp>:1␤------> 3y "here" }; multi x(Bool:D where {False}7⏏5) {say "there"}; x False␤»

[11:52] <IOninja> m: multi x($) { say "here" }; multi x(Bool:D $ where {False}) {say "there"}; x False

[11:52] <camelia> rakudo-moar 7966da: OUTPUT: «here␤»

[11:52] <IOninja> m: multi x($) { say "here" }; multi x(Bool:D $ where *.not) {say "there"}; x False

[11:52] <camelia> rakudo-moar 7966da: OUTPUT: «there␤»

[11:52] <IOninja> Ah. OK then :)

[11:54] <[TuxCM]> «my $line = callframe(1).annotations<line>;» is what is causing the fail

[11:55] <IOninja> Text::CSV is in the repo tho and multi method column_names (False) is in it

[11:55] <IOninja> m: callframe(1).annotations<line>

[11:55] <camelia> rakudo-moar 7966da: OUTPUT: «P6opaque: no such attribute '$storage' in type Map when trying to bind a value␤  in block <unit> at <tmp> line 1␤␤»

[11:55] <IOninja> Thanks.

[11:55] <IOninja> bisect: callframe(1).annotations<line>

[11:55] <bisectable6> IOninja, Bisecting by exit code (old=2015.12 new=7966dad). Old exit code: 0

[11:56] <lizmat> jnthn: so I have a patch that will make .reverse return a Seq, it needs some spectest tweaking, for a 10 element array it is about 30% faster, for a 1000 element array about the same, but reduces the number of GC's to 1/3 of the original

[11:57] <IOninja> Ah, see it.

[11:58] <IOninja> Typo on this line: https://github.com/rakudo/rakudo/blob/7966dad/src/core/CallFrame.pm#L47

[11:58] <IOninja> '$storage' neds to be '$!storage'

[11:58] <IOninja> I'd fix it, but gonna run to work./

[11:58] <lizmat> jnthn: do we consider this worth the potential disruption (my @a := @b.reverse potentially breaking)

[11:58] <lizmat> IOninja: oops, will fix

[11:59] <jnthn> lizmat: What did you test? Iterating over it?

[11:59] <[TuxCM]> (canary in the coalmine)++

[11:59] <jnthn> (to get the 30% I mean)

[11:59] <Geth> ¦ rakudo/nom: 9a74cd0e51 | (Elizabeth Mattijsen)++ | src/core/CallFrame.pm

[11:59] <Geth> ¦ rakudo/nom: Fix typo, spotted by Zoffix++ Tux++

[11:59] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9a74cd0e51

[12:00] <lizmat> my @a = ^10; for ^100000 { for @a.reverse { } }   # jnthn

[12:03] <lizmat> brb

[12:51] <Geth> ¦ rakudo/nom: beda5767ba | (Elizabeth Mattijsen)++ | 4 files

[12:51] <Geth> ¦ rakudo/nom: Make List.reverse return a Seq

[12:51] <Geth> ¦ rakudo/nom:

[12:51] <Geth> ¦ rakudo/nom: This appears to have been the intent in the speculation all along.

[12:51] <Geth> ¦ rakudo/nom: Reason for doing this is mainly to reduce memory pressure, as the

[12:51] <Geth> ¦ rakudo/nom: previous implementation would *always* create a copy of the reified

[12:51] <Geth> ¦ rakudo/nom: list.  By making it a Seq, it will only create a copy if that is

[12:51] <Geth> ¦ rakudo/nom: needed.

[12:51] <Geth> ¦ rakudo/nom: <…commit message has 13 more lines…>

[12:51] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/beda5767ba

[12:52] <Geth> ¦ roast: 93bd430e1a | (Elizabeth Mattijsen)++ | 4 files

[12:52] <Geth> ¦ roast: Handle fallout of List.reverse -> Seq migration

[12:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/93bd430e1a

[12:53] <lizmat> will handle the 6.c-errata case before the release if these commits are not reverted

[12:54] <lizmat> afk for a bit longer&

[13:09] <Geth> ¦ roast: 749ed327f6 | (Zoffix Znet)++ | S06-advanced/callframe.t

[13:09] <Geth> ¦ roast: Test callframe.annotations does not crash

[13:09] <Geth> ¦ roast:

[13:09] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/9a74cd0e51

[13:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/749ed327f6

[13:14] <Geth> ¦ rakudo/nom: cf935ca58f | (Zoffix Znet)++ | t/05-messages/01-errors.t

[13:14] <Geth> ¦ rakudo/nom: Test Str.Rat.nude on non-numerics doesn't reference guts

[13:14] <Geth> ¦ rakudo/nom:

[13:14] <Geth> ¦ rakudo/nom: RT#130630: https://rt.perl.org/Ticket/Display.html?id=130630

[13:14] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cf935ca58f

[13:14] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130630

[13:23] <Geth> ¦ roast: 9c4b563910 | (Zoffix Znet)++ | S03-metaops/cross.t

[13:23] <Geth> ¦ roast: Test `X` works with lazy RHS

[13:23] <Geth> ¦ roast:

[13:23] <Geth> ¦ roast: RT#130566: https://rt.perl.org/Ticket/Display.html?id=130566

[13:23] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130566

[13:23] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/0cd921e351

[13:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9c4b563910

[13:32] <Geth> ¦ rakudo/nom: c5ab28fe2f | (Zoffix Znet)++ | t/05-messages/01-errors.t

[13:32] <Geth> ¦ rakudo/nom: Use same RT ticket labeling format as in roast

[13:32] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c5ab28fe2f

[13:43] <Geth> ¦ rakudo/nom: 53a6d3aff6 | (Zoffix Znet)++ | t/05-messages/01-errors.t

[13:43] <Geth> ¦ rakudo/nom: Test stub code does not reference guts in error when executed

[13:43] <Geth> ¦ rakudo/nom:

[13:43] <Geth> ¦ rakudo/nom: RT#130509: https://rt.perl.org/Ticket/Display.html?id=130509

[13:43] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/53a6d3aff6

[13:43] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130509

[15:23] <Geth> ¦ rakudo/Seq-eqv-List-False: f9eb811dd2 | (Zoffix Znet)++ | src/core/Mu.pm

[15:23] <Geth> ¦ rakudo/Seq-eqv-List-False: Make Seq:D eqv List:D return False even when all elements are same

[15:23] <Geth> ¦ rakudo/Seq-eqv-List-False: review: https://github.com/rakudo/rakudo/commit/f9eb811dd2

[15:28] <Geth> ¦ rakudo: zoffixznet++ created pull request #1030: Make Seq:D eqv List:D return False even when all elements are same

[15:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1030

[15:41] <Geth> ¦ roast: 846e330d96 | (Zoffix Znet)++ | S32-list/rotor.t

[15:41] <Geth> ¦ roast: Test .rotor does not hang with infinite iterable as the cycle

[15:41] <Geth> ¦ roast:

[15:41] <Geth> ¦ roast: RT#129175: https://rt.perl.org/Ticket/Display.html?id=129175

[15:41] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/d7b82149d31da04763

[15:41] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129175

[15:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/846e330d96

[15:46] <Geth> ¦ roast: 3fdfcc0ca3 | (Zoffix Znet)++ | S06-signature/slurpy-params.t

[15:46] <Geth> ¦ roast: Test slurpy positional param does not hang when given inf. list

[15:46] <Geth> ¦ roast:

[15:46] <Geth> ¦ roast: RT#129175: https://rt.perl.org/Ticket/Display.html?id=129175

[15:46] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129175

[15:46] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/51b0aba8e8f3d4083

[15:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3fdfcc0ca3

[16:00] <Geth> ¦ rakudo/nom: f9eb811dd2 | (Zoffix Znet)++ | src/core/Mu.pm

[16:00] <Geth> ¦ rakudo/nom: Make Seq:D eqv List:D return False even when all elements are same

[16:00] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f9eb811dd2

[16:00] <Geth> ¦ rakudo/nom: dd1dab2e35 | (Zoffix Znet)++ | src/core/Mu.pm

[16:00] <Geth> ¦ rakudo/nom: Merge pull request #1030 from rakudo/Seq-eqv-List-False

[16:00] <Geth> ¦ rakudo/nom:

[16:00] <Geth> ¦ rakudo/nom: Make Seq:D eqv List:D return False even when all elements are same

[16:00] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dd1dab2e35

[17:55] <Geth> ¦ roast: dcdcec2441 | (Zoffix Znet)++ | S03-operators/eqv.t

[17:55] <Geth> ¦ roast: Test Seqs !eqv Lists

[17:55] <Geth> ¦ roast:

[17:55] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/dd1dab2e35

[17:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dcdcec2441

[17:58] <[Coke]> shouldn't the subtest name be !eqv ?

[18:01] <IOninja> Well, I'm testing `eqv`... the `!` is just a meta operator on it. I'd use `eqv` if we had cpm-nok;

[18:03] <Geth> ¦ roast: a66cf6d98d | (Zoffix Znet)++ | S03-operators/eqv.t

[18:03] <Geth> ¦ roast: Reword test to better indicate intent; [Coke]++

[18:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a66cf6d98d

[18:03] <[Coke]> ... I mean in the test title, not in the code. ah well. :)

[18:04] <IOninja> I got you, but the test title was accurate and the code was a contortion to make `cmp-ok` succeed :)_

[18:06] <[Coke]> I disagree, but it's fine.

[18:08] <IOninja> Depends on whether you read `Seq eqv List` as having implied `=== True` after it, I guess

[18:14] <[Coke]> right. :)

[18:14] <[Coke]> (which i clearly do. :)

[22:42] <Geth> ¦ rakudo/nom: 9d497e9dbc | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals.pm

[22:42] <Geth> ¦ rakudo/nom: Streamline R:In.MERGESORT* a bit

[22:42] <Geth> ¦ rakudo/nom:

[22:42] <Geth> ¦ rakudo/nom: - remove one level of nqp::stmts

[22:42] <Geth> ¦ rakudo/nom: - make sure we always get a List with an IterationBuffer as reified

[22:42] <Geth> ¦ rakudo/nom:   (well, if we were given an nqp::list, it still might be an nqp::list)

[22:42] <Geth> ¦ rakudo/nom: - remove some unneeded Mu's

[22:42] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9d497e9dbc

[22:46] <jnthn> Input welcome on $*OUT/$*ERR "inheritance": https://github.com/perl6/doc/issues/1226

[22:47] <jnthn> TimToady: Wouldn't mind your take on ^^ also :)

[22:48] <jnthn> In that area: I'm also considering whether to implement shell/run/Proc in terms of Proc::Async

[22:49] <jnthn> They use the same libuv constructs under the hood, but we have to duplicately maintain a bunch of code in MoarVM

[22:50] <IOninja> 'The docs are not arguably not wrong' wa

[22:50] <jnthn> oops :)

[22:50] <IOninja> :)

[22:50] <jnthn> Got rid of the first not

[22:50] <jnthn> I was gonna say "The docs are not wrong" which yeah, they ain't factually, but docs aren't just there to be factual :P

[22:54] <IOninja> Sounds like a useful feature to me.

[22:55] <jnthn> Time for me to get some rest :) 'night o/

[22:55] <IOninja> night
