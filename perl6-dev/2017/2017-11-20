[04:02] <Zoffix> 🍝

[04:02] <yoleaux> 19 Nov 2017 09:21Z <ufobat_> Zoffix: I've updated the PR https://github.com/rakudo/rakudo/pull/1249 with your suggestions

[06:58] <[Tux]> Rakudo version 2017.10-215-g85105077a - MoarVM version 2017.10-86-g89fae17a6

[06:58] <[Tux]> csv-test-xs-20      0.433 -  0.474

[06:58] <[Tux]> csv-ip5xs           1.113 -  1.186

[06:58] <[Tux]> test-t --race       1.385 -  1.496

[06:58] <[Tux]> test-t              3.327 -  3.386

[06:58] <[Tux]> test               12.005 - 12.444

[06:58] <[Tux]> csv-parser         12.596 - 12.846

[06:58] <[Tux]> csv-ip5xs-20       12.907 - 13.671

[06:58] <[Tux]> test-t-20 --race   21.368 - 21.852

[06:58] <[Tux]> test-t-20          60.057 - 60.858

[07:09] <[Tux]> Retry was better,

[07:09] <[Tux]> Rakudo version 2017.10-215-g85105077a - MoarVM version 2017.10-86-g89fae17a6

[07:09] <[Tux]> csv-test-xs-20      0.419 -  0.433

[07:09] <[Tux]> csv-ip5xs           1.108 -  1.126

[07:09] <[Tux]> test-t --race       1.374 -  1.441

[07:09] <[Tux]> test-t              3.237 -  3.263

[07:09] <[Tux]> test               12.173 - 13.059

[07:09] <[Tux]> csv-parser         12.521 - 12.616

[07:09] <[Tux]> csv-ip5xs-20       13.005 - 13.118

[07:09] <[Tux]> test-t-20 --race   20.287 - 20.754

[07:10] <[Tux]> test-t-20          59.445 - 60.790

[07:14] <masak> wait, you're allowed to re-run the perf test if it looks slow? :P

[07:14] <masak> this changes everything!

[07:33] <[Tux]> masak, if I see a (big) change, I run it a second (actually a third and forth run as it already runs twice per test) to check if it was not influenced by heavy load

[07:33] <[Tux]> I do this when I see a change both upwards and downwards

[07:34] <masak> :)

[07:34] <[Tux]> off to work

[07:37] <nine> I always take downward jumps at face value. Because there's just no spurious event that could make a program run too fast. If anything the lowest runtime reflects the actual resource usage of a program best.

[07:37] <yoleaux> 19 Nov 2017 22:13Z <geekosaur> nine: [19 21:36:17] <Brumbazz> Hi guys. I'm using AnyEvent-XMPP(perl5) in my perl6 project. So far I don't get any errors during compilation when I run my script, however after it print's some text is crashed with a "[2]    708 segmentation fault  perl6 xmpp_who_am_i.pl"

[07:41] <masak> during the weekend I got `macro infix:<ff>` to work primitively in 007. this is a significant step up from what Rakudo currently supports. I'm hopeful I'll be able to land this in 007's master branch soon.

[07:50] <nine> masak: sounds like it would get us closer to a LINQ like sublanguage implemented as macros?

[08:07] <Geth> ¦ roast: 05c0fd8365 | (Samantha McVey)++ | S15-unicode-information/uniprop.t

[08:07] <Geth> ¦ roast: uniprop: Add tests for every General Category

[08:07] <Geth> ¦ roast:

[08:07] <Geth> ¦ roast: Tests to close rakudo/rakudo#1254

[08:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/05c0fd8365

[08:07] <synopsebot> RAKUDO#1254 [closed]: https://github.com/rakudo/rakudo/issues/1254 [regression][testneeded][UNI][⚠ blocker ⚠] Incorrect General_Category property for ascii-range uppercase letters (say ‘A’.uniprop)

[08:10] <masak> nine: quite possibly

[08:11] <masak> I still don't feel ready to think about all-out slangs for some reason, but I'd like to move into treating 007 expressions as not something that necessarily gets evaluated but the structure gets used for other things

[08:11] <masak> see https://github.com/masak/007/issues/268

[12:23] <AlexDaniel> timotimo: I guess this doesn't really help? https://github.com/rakudo/rakudo/issues/1257#issuecomment-345680579

[15:08] <AlexDaniel> I no longer see any hopes for GH#1257 fix in this release, so here: https://github.com/rakudo/rakudo/issues/1257#issuecomment-345723351

[15:08] <synopsebot> GH#1257 [open]: https://github.com/rakudo/rakudo/issues/1257 [regression][⚠ blocker ⚠] Rakudo 2017.10 fails to build on Debian big endian systems

[15:08] <AlexDaniel> please comment if you agree, disagree or whatever

[15:11] <moritz> we'd need a CI system on a big endian machine

[15:14] <AlexDaniel> the same ticket talks about some other issue on arm, which may be a little bit easier to fix I think

[15:14] <AlexDaniel> but then there's this also: https://irclog.perlgeek.de/perl6/2017-11-20#i_15472974

[15:20] <Geth> ¦ nqp/master: 7 commits pushed by pmurias++

[15:20] <Geth> ¦ nqp/master: 670aca2bc8 | [js] Get rid of incorrect extra params

[15:20] <Geth> ¦ nqp/master: 2d25a01287 | [js] Fix nqp::slice on an array when removing more elements than it contains

[15:20] <Geth> ¦ nqp/master: a726c471d7 | Add a nqp::slice test for removing more elements than it has

[15:20] <Geth> ¦ nqp/master: d1b7d2371d | [js] Implement nqp::atomicinc_i

[15:20] <Geth> ¦ nqp/master: 3bfea70f18 | [js] Fix coercions with int8

[15:20] <Geth> ¦ nqp/master: c02271bbe9 | [js] Make rethrowing a control exception from CONTROL work

[15:20] <Geth> ¦ nqp/master: 77b102329c | Add test for control exception rethrowing and CATCH/CONTROL interactions

[15:20] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/c6c8b3f873...77b102329c

[15:22] <ilmari> when did Geth start including the branch name for commits to the default branch?

[15:33] <[Coke]> probably when the default branch was changed?

[15:33] <timotimo> oh, huh.

[15:33] <[Coke]> (on rakudo, I mean. but Iunno)

[15:33] <timotimo> nqp has the same problem

[15:33] <timotimo> or "has that problem"

[15:37] <timotimo> just last night the reports for both rakudo and nqp didn't have the default branch name

[15:37] <timotimo> actually, it was the day before last night

[15:56] <[Coke]> ah, good catch

[16:00] <Geth> ¦ geth: 6ad5fe6e28 | (Zoffix Znet)++ (committed using GitHub Web editor) | lib/Geth/GitHub/Hooks/Preprocessor.pm6

[16:00] <Geth> ¦ geth: Fix nqp bump watcher

[16:00] <Geth> ¦ geth:

[16:00] <Geth> ¦ geth: Fixes #11

[16:00] <Geth> ¦ geth: review: https://github.com/perl6/geth/commit/6ad5fe6e28

[16:51] <Geth> ¦ rakudo: 8ccb60e39f | (Zoffix Znet)++ (committed using GitHub Web editor) | .gitignore

[16:51] <Geth> ¦ rakudo: Add /*.dll.a to ignore

[16:51] <Geth> ¦ rakudo:

[16:51] <Geth> ¦ rakudo: These get generated on Windows during make test.

[16:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8ccb60e39f

[17:28] <tyil> I want to implement the EXISTS-KEY method for Distribution::Resources in Rakudo (used for %?RESOURCES), so I can use :exists and :!exists on it, would anyone with more knowledge have any outright objections as to why this could be unwanted or undoable before I spend time tring to understand it better?

[17:56] <japhb> nine, re "there's just no spurious event that could make a program run too fast" -- that presupposes that the program 1. completed successfully, and 2. gave the correct answer.  Failure to detect those two cases has resulted in many bad benchmark results, where faster-but-wrong or faster-but-crashed-partway-through were unnoticed.

[18:03] <[Coke]> I have fallen into that trap before. "my god, this is faster than the thing I ported it from!" "oh, right, because it gave the wrong answer REALLY fast." :)

[18:49] <ugexe> m: say $*VM.desc; # what is this intended to mean?

[18:49] <camelia> rakudo-moar 8ccb60e39: OUTPUT: «2017-11-20T19:49:10.602511+01:00␤»

[18:49] <ugexe> m: say $*VM.desc; # what is this intended to mean?

[18:49] <camelia> rakudo-moar 8ccb60e39: OUTPUT: «2017-11-20T19:49:18.268098+01:00␤»

[18:49] <ugexe> here is a timestamp that represents the first time you called .desc ?

[18:54] <AlexDaniel> huh… the timestamp is introduced in this commit and there's no explanation: https://github.com/rakudo/rakudo/commit/db49f3b7ec8b0b1ab6fd634f4ff228fd78ad72e6#diff-f8c7ea504081c5fcb5fd15d772eefc15

[18:55] <AlexDaniel> before that commit it was just an unitialized Str

[19:11] <lizmat> .

[19:11] <yoleaux> 19 Nov 2017 15:56Z <AlexDaniel> lizmat: https://gist.github.com/AlexDaniel/bf7d91648417f95bf8a87e604981b70e

[19:39] <ugexe> yea but that was when it was $?VM, which makes sense

[19:39] <ugexe> for $*VM, not so much

[19:41] <lizmat> tyil: https://irclog.perlgeek.de/perl6-dev/2017-11-20#i_15474137  can't think of any reason against it

[20:33] <tyil> alright, I'll take a serious look at it :>

[22:28] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/11/20/2017-47-more-tpcia-videos/

[22:36] <El_Che> ha, I made it to the paper :)

[22:38] <lizmat> :-)

[22:43] * lizmat feels knackered and goes to bed

[22:43] <lizmat> &

[22:43] <El_Che> thx lizmat

[22:43] <El_Che> great job
