[00:45] <MasterDuke> re RT #127395 and RT #123078, should the exception say the privacy of the suggested method if it's opposite the given one? e.g., Int!sun would suggest 'public method sin', and Int.sun might suggest 'private method sub'

[00:46] <MasterDuke> or maybe just put a '!' before any private methods regardless?

[01:47] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1091: Suggest misspelled method names

[01:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1091

[06:27] <Geth> ¦ roast: c4dc7ba410 | usev6++ | 5 files

[06:27] <Geth> ¦ roast: [JVM] Fudge newly failing tests

[06:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c4dc7ba410

[06:49] <[Tux]> This is Rakudo version 2017.05-297-g608e886a9 built on MoarVM version 2017.05-25-g62bc54e9

[06:49] <[Tux]> csv-ip5xs        2.741

[06:49] <[Tux]> test            13.498

[06:49] <[Tux]> test-t           4.438 - 4.607

[06:49] <[Tux]> csv-parser      13.494

[06:49] <[Tux]> Error encoding UTF-8 string: could not encode Unicode Surrogate codepoint 55600 (0xD930)

[06:49] <[Tux]> should I tell those 88.t fails on a daily basis now that jnthn is/was working on it?

[08:49] <jnthn> [Tux]: Is it a regression?

[08:50] <|Tux|> nope

[08:50] <|Tux|> that is why 88.t has never been in the default test suite

[08:51] <|Tux|> https://github.com/Tux/CSV/blob/master/88.t ← run till fail

[08:52] <|Tux|> once that passes always, I can finally try to support real-binary data in CSV, like jpg/png images and serialized objects

[10:38] <Zoffix> m: use nqp; my $x = nqp::null_s; dd nqp::ifnull($x, 42)

[10:38] <camelia> rakudo-moar 608e88: OUTPUT: «chars requires a concrete string, but got null␤  in block <unit> at <tmp> line 1␤␤»

[10:39] <Zoffix> Could probably get a bit of boost by adding nqp::ifnull_s() op and getting rid of these variable assignments: https://github.com/rakudo/rakudo/blob/nom/src/core/Rakudo/Internals/VMBackedDecoder.pm#L22-L34

[10:39] <Zoffix> switching those to nqp::ifnull(blah, Str) shows 16%-35% speed boost; tho unsure how accurate that is, given above it gives wrong result.

[10:40] <Zoffix> Benched with this concoction: https://gist.github.com/zoffixznet/2e7bfbc8de1eb21fc1cea3fc844ffc47

[10:40] <Geth> ¦ rakudo/js: 2e0d8b362d | pmurias++ | 3 files

[10:40] <Geth> ¦ rakudo/js: [js] Add a 'make js-spectest' which run a bunch of passing tests

[10:40] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/2e0d8b362d

[10:40] <jnthn> Yes it's totally wrong

[10:41] <jnthn> You're boxing a null string

[10:48] <jnthn> And then null-testing the box

[10:48] <Zoffix> ah

[10:48] <jnthn> I'm not sure why the assignment would be so costly though

[10:48] <jnthn> Will have to look at what code it's generating

[10:49] <jnthn> There ain't even a Scalar container being created/used

[10:49] <jnthn> And it shouldn't need a nativeref either

[12:22] <Geth> ¦ nqp/nqp-io: 5 commits pushed by (Jonathan Worthington)++

[12:22] <Geth> ¦ nqp/nqp-io: f5f1ac9801 | Give NQP a basic file handle class.

[12:22] <Geth> ¦ nqp/nqp-io: f64506d95b | Add a slurp method to NQPFileHandle.

[12:22] <Geth> ¦ nqp/nqp-io: c4be363b93 | Fix whitespace.

[12:22] <Geth> ¦ nqp/nqp-io: 44dee60050 | open/close/spew/spurt use NQPFileHandle.

[12:22] <Geth> ¦ nqp/nqp-io: 6847d807b6 | Update profile dumper to use new handles.

[12:22] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/compare/6857b1c1ba...6847d807b6

[12:22] <jnthn> Just a rebase

[12:33] <Geth> ¦ nqp/nqp-io: 305c8fed7d | (Jonathan Worthington)++ | src/core/IO.nqp

[12:33] <Geth> ¦ nqp/nqp-io: Add a way to get NQP wrapped standard handles.

[12:33] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/305c8fed7d

[12:36] <Geth> ¦ nqp/nqp-io: dff957e5dd | (Jonathan Worthington)++ | src/HLL/Compiler.nqp

[12:36] <Geth> ¦ nqp/nqp-io: Switch HLL compiler code reading to high level I/O

[12:36] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/dff957e5dd

[12:38] <Zoffix> NeuralAnomaly: status

[12:38] <NeuralAnomaly> Zoffix, [✘] Next release will be in 2 weeks and 4 days. Since last release, there are 27 new still-open tickets (24 unreviewed and 0 blockers) and 295 unreviewed commits. See http://perl6.fail/release/stats for details

[12:38] * Zoffix starts working on bot-ified ecosystem smoker to watch for regressions

[12:48] <Zoffix> ... eventually... it was a mistake to run update-perl6 on this network :| cloning at 23KiB/s

[12:48] <jnthn> Zoffix++

[12:53] <Geth> ¦ nqp/nqp-io: aa9a813a02 | (Jonathan Worthington)++ | src/core/IO.nqp

[12:53] <Geth> ¦ nqp/nqp-io: Add further methods to NQP IO handle.

[12:53] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/aa9a813a02

[12:53] <Geth> ¦ nqp/nqp-io: 1c4350e5dd | (Jonathan Worthington)++ | t/docs/opcodes.t

[12:53] <Geth> ¦ nqp/nqp-io: Switch opcodes test to high level I/O.

[12:53] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/1c4350e5dd

[12:53] <Geth> ¦ nqp/nqp-io: 72e6b4d59a | (Jonathan Worthington)++ | t/docs/tests.t

[12:53] <Geth> ¦ nqp/nqp-io: Update t/docs/tests.t to use high level I/O.

[12:53] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/72e6b4d59a

[13:16] <Geth> ¦ nqp/nqp-io: 6261004f93 | (Jonathan Worthington)++ | t/nqp/019-file-ops.t

[13:16] <Geth> ¦ nqp/nqp-io: Start to rework I/O tests to use handle.

[13:16] <Geth> ¦ nqp/nqp-io:

[13:16] <Geth> ¦ nqp/nqp-io: Since readallfh, readlinefh, and friends are going away.

[13:16] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/6261004f93

[13:26] <Geth> ¦ nqp: 1c6dac67ed | pmurias++ | 2 files

[13:26] <Geth> ¦ nqp: [js] Make nqp::mkdir create the missing directories in the path it gets

[13:26] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/1c6dac67ed

[13:26] <Geth> ¦ nqp: fda389d156 | pmurias++ | t/nqp/019-file-ops.t

[13:26] <Geth> ¦ nqp: Test nqp::mkdir with a nested path of missing directories

[13:26] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/fda389d156

[13:30] <Geth> ¦ nqp/nqp-io: c0ec9e725f | (Jonathan Worthington)++ | src/core/IO.nqp

[13:30] <Geth> ¦ nqp/nqp-io: Make print/say/note use high level handle.

[13:30] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/c0ec9e725f

[13:30] <Geth> ¦ nqp/nqp-io: ea0b05884e | (Jonathan Worthington)++ | 3 files

[13:30] <Geth> ¦ nqp/nqp-io: Eliminate final uses of nqp::sayfh.

[13:30] <Geth> ¦ nqp/nqp-io:

[13:30] <Geth> ¦ nqp/nqp-io: Getting cleaner code in the process.

[13:30] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/ea0b05884e

[13:42] <Geth> ¦ nqp/nqp-io: 71982bcac1 | (Jonathan Worthington)++ | src/core/IO.nqp

[13:42] <Geth> ¦ nqp/nqp-io: Implement seek in IO handle class.

[13:42] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/71982bcac1

[13:42] <Geth> ¦ nqp/nqp-io: 46f5261b43 | (Jonathan Worthington)++ | t/nqp/019-file-ops.t

[13:42] <Geth> ¦ nqp/nqp-io: Switch seek/tell tests to use new IO handle.

[13:42] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/46f5261b43

[13:43] <Zoffix> more inconsistency spotting: IO::Path.new takes CWD arg :CWD, Proc.spawn takes it as :cwd, and IO::Path.relative takes it as a positional :)

[13:49] <Geth> ¦ rakudo/io-adaptation: 31c433edc4 | (Jonathan Worthington)++ | tools/build/gen-cat.nqp

[13:49] <Geth> ¦ rakudo/io-adaptation: Update gen-cat to use NQP high level I/O handles.

[13:49] <Geth> ¦ rakudo/io-adaptation: review: https://github.com/rakudo/rakudo/commit/31c433edc4

[13:49] <Geth> ¦ rakudo/io-adaptation: c9347d483d | (Jonathan Worthington)++ | 4 files

[13:49] <Geth> ¦ rakudo/io-adaptation: Eliminate sayfh/printfh use in the compiler.

[13:49] <Geth> ¦ rakudo/io-adaptation: review: https://github.com/rakudo/rakudo/commit/c9347d483d

[13:52] <travis-ci> NQP build failed. pmurias 'Test nqp::mkdir with a nested path of missing directories'

[13:52] <travis-ci> https://travis-ci.org/perl6/nqp/builds/237516616 https://github.com/perl6/nqp/compare/08bfc91e5ea0...fda389d1568e

[13:52] <Geth> ¦ nqp/nqp-io: 3a591e5d16 | (Jonathan Worthington)++ | src/core/IO.nqp

[13:52] <Geth> ¦ nqp/nqp-io: Implement readchars in NQP IO handle.

[13:52] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/3a591e5d16

[13:52] <Geth> ¦ nqp/nqp-io: 78ca850114 | (Jonathan Worthington)++ | t/nqp/019-file-ops.t

[13:52] <Geth> ¦ nqp/nqp-io: Update tests that used nqp::readcharsfh.

[13:52] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/78ca850114

[14:04] <Zoffix> ZOFVM6: Files=1252, Tests=136835,  211 wallclock secs

[14:09] <Zoffix> ZOFVM: Files=1252, Tests=136835, 118 wallclock secs (22.28 usr  3.00 sys + 2373.18 cusr 140.49 csys = 2538.95 CPU)

[14:09] <Zoffix> m: say 211/118

[14:09] <camelia> rakudo-moar 608e88: OUTPUT: «1.788136␤»

[14:14] <Geth> ¦ nqp/nqp-io: 919ba201a6 | (Jonathan Worthington)++ | src/core/IO.nqp

[14:14] <Geth> ¦ nqp/nqp-io: Allow setting line seps on IO handle.

[14:14] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/919ba201a6

[14:14] <Geth> ¦ nqp/nqp-io: 06d1a6ea69 | (Jonathan Worthington)++ | t/nqp/019-file-ops.t

[14:14] <Geth> ¦ nqp/nqp-io: Further re-working of file ops tests.

[14:14] <Geth> ¦ nqp/nqp-io:

[14:14] <Geth> ¦ nqp/nqp-io: Also unskip some that are passing on MoarVM and should also pass on

[14:14] <Geth> ¦ nqp/nqp-io: JVM too, given the multi-char sep logic is covered in decoder tests.

[14:14] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/06d1a6ea69

[14:21] <Zoffix> update finally done :) took almost two hours.

[14:22] <Geth> ¦ nqp/nqp-io: 9d6643c693 | (Jonathan Worthington)++ | t/nqp/019-file-ops.t

[14:22] <Geth> ¦ nqp/nqp-io: Fix outdated comment.

[14:22] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/9d6643c693

[14:22] <Geth> ¦ nqp/nqp-io: 913012ca81 | (Jonathan Worthington)++ | t/moar/03-line-seps.t

[14:22] <Geth> ¦ nqp/nqp-io: Re-work line seps tests to use high-level I/O.

[14:22] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/913012ca81

[14:22] <jnthn> Zoffix: Wow...

[14:22] <jnthn> What a connection...

[14:22] <Zoffix> :)

[14:25] <Geth> ¦ rakudo/io-adaptation: c0b2b020d5 | (Jonathan Worthington)++ | src/core/Proc.pm

[14:25] <Geth> ¦ rakudo/io-adaptation: Eliminate nqp::readallfh in Proc.pm.

[14:25] <Geth> ¦ rakudo/io-adaptation:

[14:25] <Geth> ¦ rakudo/io-adaptation: It should use the IO::Pipe handle instead.

[14:25] <Geth> ¦ rakudo/io-adaptation: review: https://github.com/rakudo/rakudo/commit/c0b2b020d5

[14:28] <Geth> ¦ nqp/nqp-io: 83abc6ffde | (Jonathan Worthington)++ | docs/ops.markdown

[14:28] <Geth> ¦ nqp/nqp-io: Undocument char-level I/O ops, which will go away.

[14:28] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/83abc6ffde

[14:29] <Geth> ¦ rakudo/io-adaptation: 81e3f641d3 | (Jonathan Worthington)++ | src/core/CompUnit/Repository/FileSystem.pm

[14:29] <Geth> ¦ rakudo/io-adaptation: Use slurp rather than re-implementing it.

[14:29] <Geth> ¦ rakudo/io-adaptation:

[14:29] <Geth> ¦ rakudo/io-adaptation: Especially now re-implementing it has become a good bit trickier.

[14:29] <Geth> ¦ rakudo/io-adaptation: review: https://github.com/rakudo/rakudo/commit/81e3f641d3

[14:30] <Geth> ¦ rakudo/nom: ae891f9367 | (Zoffix Znet)++ | 4 files

[14:30] <Geth> ¦ rakudo/nom: Remove TAP.pm6 from core

[14:30] <Geth> ¦ rakudo/nom:

[14:30] <Geth> ¦ rakudo/nom: For easier maintenance, the module will live solely in the

[14:30] <Geth> ¦ rakudo/nom: ecosystem[^1] from now on.

[14:30] <Geth> ¦ rakudo/nom:

[14:30] <Geth> ¦ rakudo/nom: Since HARNESS_TYPE=6 make spectest/stresstest require this module,

[14:30] <Geth> ¦ rakudo/nom: t/harness6 script now clones the module from the repo[^1], or

[14:30] <Geth> ¦ rakudo/nom: <…commit message has 5 more lines…>

[14:30] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ae891f9367

[14:31] <Zoffix> .tell ugexe TAP.pm6 is gone from core now: https://github.com/rakudo/rakudo/commit/ae891f9367

[14:31] <yoleaux> Zoffix: I'll pass your message to ugexe.

[14:43] <Geth> ¦ nqp/nqp-io: 1d6ab48abd | (Jonathan Worthington)++ | src/core/IO.nqp

[14:43] <Geth> ¦ nqp/nqp-io: Add flush method to IO handle.

[14:43] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/1d6ab48abd

[14:43] <Geth> ¦ nqp/nqp-io: 3ef595d8d1 | (Jonathan Worthington)++ | t/nqp/019-file-ops.t

[14:43] <Geth> ¦ nqp/nqp-io: Update outdated comment.

[14:43] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/3ef595d8d1

[14:43] <Geth> ¦ nqp/nqp-io: f7b19f81bb | (Jonathan Worthington)++ | src/vm/jvm/HLL/Backend.nqp

[14:43] <Geth> ¦ nqp/nqp-io: Use high-level I/O in JVM HLL::Backend.

[14:43] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/f7b19f81bb

[14:47] <Zoffix> huggable: swear jar

[14:47] <huggable> Zoffix, Help Perl 6. Donate (specify "Perl 6 fund" in purpose field): https://donate.perlfoundation.org/

[14:47] <Zoffix> huggable: swear jar :is: Help Perl 6. Donate: https://donate.perlfoundation.org/

[14:47] <huggable> Zoffix, Added swear jar as Help Perl 6. Donate: https://donate.perlfoundation.org/

[14:48] <Zoffix> hehe, there are encoding issues on https://donate.perlfoundation.org/

[14:48] <Zoffix> "attempting to claim â€œPerlâ€ as their own."

[14:49] <[Coke]> Zoffix: Reported on the tpf issue site.

[14:49] <[Coke]> (just now.) thanks.

[14:49] <Zoffix> cool

[14:58] <Geth> ¦ nqp/nqp-io: 93aba4941b | (Jonathan Worthington)++ | src/core/IO.nqp

[14:58] <Geth> ¦ nqp/nqp-io: Implement set-encoding in NQP file handle.

[14:58] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/93aba4941b

[14:58] <Geth> ¦ nqp/nqp-io: fcbda508e8 | (Jonathan Worthington)++ | src/core/IO.nqp

[14:58] <Geth> ¦ nqp/nqp-io: There is no die in NQP; it's nqp::die.

[14:58] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/fcbda508e8

[15:01] <[Coke]> jnthn: https://github.com/perl6/nqp/blob/nqp-io/src/core/IO.nqp#L75

[15:10] <Geth> ¦ nqp/nqp-io: 6ed77ec37a | (Jonathan Worthington)++ | src/core/IO.nqp

[15:10] <Geth> ¦ nqp/nqp-io: One more die -> nqp::die; [Coke]++.

[15:10] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/6ed77ec37a

[15:11] <jnthn> Finally getting there clearing up the string I/O op use

[15:12] <jnthn> I hadn't really considered just how much there'd be to do in NQP

[15:13] <Geth> ¦ nqp/nqp-io: f6b79387ab | (Jonathan Worthington)++ | src/HLL/Compiler.nqp

[15:13] <Geth> ¦ nqp/nqp-io: Use new IO handle in HLL::Compiler.

[15:13] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/f6b79387ab

[15:13] <Geth> ¦ rakudo/io-adaptation: a6cd73af77 | (Jonathan Worthington)++ | src/Perl6/Compiler.nqp

[15:13] <Geth> ¦ rakudo/io-adaptation: Update Perl6::Compiler for NQP I/O changes.

[15:13] <Geth> ¦ rakudo/io-adaptation: review: https://github.com/rakudo/rakudo/commit/a6cd73af77

[15:32] <Geth> ¦ nqp/nqp-io: 5d3e388264 | (Jonathan Worthington)++ | 6 files

[15:32] <Geth> ¦ nqp/nqp-io: Eliminate remaining nqp::printfh uses.

[15:32] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/5d3e388264

[15:44] <Geth> ¦ rakudo/io-adaptation: 837c73752b | (Jonathan Worthington)++ | src/core/Exception.pm

[15:44] <Geth> ¦ rakudo/io-adaptation: Eliminate final nqp::printfh use in Rakudo.

[15:44] <Geth> ¦ rakudo/io-adaptation: review: https://github.com/rakudo/rakudo/commit/837c73752b

[15:49] <jnthn> This all still passes NQP test and spec test :)

[15:50] <Zoffix> :}

[15:52] <[Coke]> ooh, I wonder if this last one will eliminate any of the exceptions-going-to-wrong-stderr issue.

[15:54] <jnthn> [Coke]: Yes, I think it might :)

[15:54] <[Coke]> sweet!

[15:57] <Geth> ¦ rakudo: tbrowder++ created pull request #1092: add fix for RT #131400

[15:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1092

[15:58] <Geth> ¦ nqp/nqp-io: 71e653a1f9 | (Jonathan Worthington)++ | t/nqp/086-pipes.t

[15:58] <Geth> ¦ nqp/nqp-io: Update final test using char-level I/O.

[15:58] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/71e653a1f9

[16:00] <Geth> ¦ nqp/nqp-io: 56178e2f8e | (Jonathan Worthington)++ | src/vm/js/HLL/Backend.nqp

[16:00] <Geth> ¦ nqp/nqp-io: Eliminate final use of a char-level I/O op.

[16:00] <Geth> ¦ nqp/nqp-io:

[16:00] <Geth> ¦ nqp/nqp-io: Except nqp::say and nqp::print, which we'll leave be as they can be

[16:00] <Geth> ¦ nqp/nqp-io: very handy for debugging purposes.

[16:00] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/56178e2f8e

[16:02] <Geth> ¦ nqp/nqp-io: 0adb0cf78c | (Jonathan Worthington)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[16:02] <Geth> ¦ nqp/nqp-io: Un-map the char-level I/O ops for MoarVM.

[16:02] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/0adb0cf78c

[16:20] <Geth> ¦ nqp/nqp-io: e8ef675e5b | (Jonathan Worthington)++ | 11 files

[16:20] <Geth> ¦ nqp/nqp-io: Update the MoarVM stage0.

[16:20] <Geth> ¦ nqp/nqp-io:

[16:20] <Geth> ¦ nqp/nqp-io: So that we can remove the char-level I/O from MoarVM.

[16:20] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/e8ef675e5b

[16:42] <Zoffix> *sigh*

[16:42] <Zoffix> ZofBot: ignore travis-ci

[16:42] <ZofBot> Zoffix, because you can do TWEAK now

[16:43] <Zoffix> Doesn't look like our docs build suitable for travis anymore. Like half the builds fail due to job taking too longs

[16:44] <[Coke]> doc build so slow. :|

[16:45] <Zoffix> Situation can probably ameliorated by making travis install rakudo from debs instead of building it from scratch

[16:51] <jnthn> Alright, enough for me today. Time for rest and dinner :)

[16:56] <dogbert17> m: my @letters = <a b c d e f>; dd @letters[3 .. 7]; # should this be a truncating slice?

[16:56] <camelia> rakudo-moar ae891f: OUTPUT: «("d", "e", "f", Any, Any)␤»

[16:57] <perlpilot> dogbert17: why?

[16:57] <Zoffix> dogbert17: no, it does that only when the slice is lazy

[16:57] <Zoffix> m: my @letters = <a b c d e f>; dd @letters[lazy 3 .. 7];

[16:57] <camelia> rakudo-moar ae891f: OUTPUT: «("d", "e", "f")␤»

[16:58] <dogbert17> " However if the outer object passed to (one dimension of) of a positional subscript is a Range, it will be automatically truncated to the actual size of the collection:"

[16:58] <dogbert17> https://docs.perl6.org/language/subscripts

[16:59] <Zoffix> lies

[16:59] <dogbert17> but no statistics :)

[16:59] <Zoffix> The person writing it probably just tested with 1..* which is lazy and hence truncates

[17:00] <dogbert17> the example I tried above is the example used in the docs

[17:01] <dogbert17> commit: 2016.01 my @letters = <a b c d e f>; dd @letters[3 .. 7];

[17:01] <committable6> dogbert17, ¦2016.01: «("d", "e", "f", Any, Any)»

[17:01] <dogbert17> commit: 2015.06 my @letters = <a b c d e f>; dd @letters[3 .. 7];

[17:01] <committable6> dogbert17, ¦2015.06: «("d", "e", "f")»

[17:02] <dogbert17> commit: 2015.09 my @letters = <a b c d e f>; dd @letters[3 .. 7];

[17:02] <committable6> dogbert17, ¦2015.09: «("d", "e", "f")»

[17:02] <dogbert17> commit: 2015.11 my @letters = <a b c d e f>; dd @letters[3 .. 7];

[17:02] <committable6> dogbert17, ¦2015.11: «List $var = $("d", "e", "f")»

[17:02] <dogbert17> commit: 2015.12 my @letters = <a b c d e f>; dd @letters[3 .. 7];

[17:02] <committable6> dogbert17, ¦2015.12: «("d", "e", "f", Any, Any)»

[17:03] <dogbert17> hmm, seems as if some changes will have to be made in that document then

[17:03] <perlpilot> dogbert17: looks like that statement about Range needs to be modified to talk about laziness instead.

[17:04] <perlpilot> (and the example updated, of course)

[17:04] <dogbert17> agreed

[17:05] <dogbert17> I can try to whip something together unless someone else wants to do it

[17:09] <dogbert17> hmm, there is some text about laziness farther down: https://github.com/perl6/doc/blob/master/doc/Language/subscripts.pod6#L261

[17:10] <Zoffix> hm

[17:10] <Zoffix> t/get-w3-redirect.t ............. ok

[17:10] <Zoffix> Malformed UTF-8 at line 8 col 18494

[17:10] <Zoffix> in block  at /home/zoffix/.zef/store/perl6-lwp-simple.git/243de4fdcc38e1d3049d39aeea7320e19cc8125b/lib/LWP/Simple.pm (LWP::Simple) line 126

[17:12] <Zoffix> False alarm. Installs fine on my other box

[17:15] <dogbert17> m: my @letters = <a b c d e f>; dd @letters[3 .. 7]:v;

[17:15] <camelia> rakudo-moar ae891f: OUTPUT: «("d", "e", "f")␤»

[17:17] <Zoffix> That's normal

[17:18] <Zoffix> m: dd { :42a }<foo bar ber>

[17:18] <camelia> rakudo-moar ae891f: OUTPUT: «(Any, Any, Any)␤»

[17:18] <Zoffix> m: dd { :42a }<foo bar ber>:v

[17:18] <camelia> rakudo-moar ae891f: OUTPUT: «()␤»

[17:19] <dogbert17> interesting

[17:21] <dogbert17> interesting

[17:21] * dogbert17 wrong window

[17:21] <Zoffix> m: my $h; $h<booo>.elems.say

[17:21] <camelia> rakudo-moar ae891f: OUTPUT: «1␤»

[17:21] <Zoffix> m: my $h; $h<booo>:v.elems.say

[17:21] <camelia> rakudo-moar ae891f: OUTPUT: «0␤»

[17:22] <Zoffix> ^ handy when you don't know whether the key is inited or not, when looking up elems

[17:25] <dogbert17> nifty trick

[17:40] <Zoffix> How dissapointing. I wanted to go fix doc Issue 1337, but it's a PR... and already merged :(

[17:41] <AlexDaniel> that's pretty cool

[17:41] <AlexDaniel> I wist it was more common

[17:51] <tbrowder> Zoffix: check PR 1092 now, please, when you get a chance

[18:00] <Geth> ¦ rakudo/nom: 807d30c290 | (Tom Browder)++ | lib/Pod/To/Text.pm6

[18:00] <Geth> ¦ rakudo/nom: add fix for RT #131400

[18:00] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/807d30c290

[18:00] <Geth> ¦ rakudo/nom: 654bb30148 | (Tom Browder)++ | lib/Pod/To/Text.pm6

[18:00] <Geth> ¦ rakudo/nom: changes:

[18:00] <Geth> ¦ rakudo/nom:

[18:00] <Geth> ¦ rakudo/nom: # original code on line 23 was unwrapped for debugging:

[18:00] <Geth> ¦ rakudo/nom:   when Positional { $pod.map({pod2text($_)}).join("\n\n") }

[18:00] <Geth> ¦ rakudo/nom:   # fix based on irc #perl6, 2017-05-30, word descrip from

[18:01] <Geth> ¦ rakudo/nom:   # kurahaupo at 23:43 and on 2017-05-30 MasterDuke's hint

[18:01] <Geth> ¦ rakudo/nom:   # at 00:24

[18:01] <Geth> ¦ rakudo/nom: <…commit message has 11 more lines…>

[18:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/654bb30148

[18:01] <Geth> ¦ rakudo/nom: 3721e68d24 | (Zoffix Znet)++ (committed using GitHub Web editor) | lib/Pod/To/Text.pm6

[18:01] <Geth> ¦ rakudo/nom: Merge pull request #1092 from tbrowder/pod2text-fix

[18:01] <Geth> ¦ rakudo/nom:

[18:01] <Geth> ¦ rakudo/nom: add fix for RT #131400

[18:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3721e68d24

[18:08] <Zoffix> buggable: draw

[18:08] <buggable> Zoffix, The next Accidental /win Lottery draw will happen in 1 week, 2 days, 5 hours, 51 minutes, and 5 seconds. Currently have 14 ballots submitted by 10 users!

[18:09] <Zoffix> huh 1 week? I thought it did it on the first of the month

[18:12] <Zoffix> forgot a `:1day` in .clone :)

[18:12] <Zoffix> buggable: draw

[18:12] <buggable> Zoffix, The next Accidental /win Lottery draw will happen in 1 day, 5 hours, 47 minutes, and 17 seconds. Currently have 14 ballots submitted by 10 users!

[18:12] <Zoffix> yey

[18:21] <Zoffix> ZOFVM: Files=1239, Tests=136749, 118 wallclock secs (23.39 usr  3.30 sys + 2415.09 cusr 125.67 csys = 2567.45 CPU)

[18:22] <Geth> ¦ rakudo/nom: 22ef682537 | (Zoffix Znet)++ | lib/Pod/To/Text.pm6

[18:22] <Geth> ¦ rakudo/nom: Refactor code to be shorter

[18:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/22ef682537

[18:38] <Zoffix> tbrowder: seems it don't fix the actual issue, but merely avoids the crash by stringifying the things that were making it crash: https://gist.github.com/zoffixznet/3e9eba8b1d614793b54d07f14a9f410a

[18:39] <Zoffix> m: say Pod::FormattingCode ~~ Pod

[18:39] <camelia> rakudo-moar 22ef68: OUTPUT: «False␤»

[18:39] <Zoffix> m: say Pod::FormattingCode.^mro

[18:39] <camelia> rakudo-moar 22ef68: OUTPUT: «((FormattingCode) (Block) (Any) (Mu))␤»

[18:39] <Zoffix> m: say Pod::FormattingCode.^mro».^name

[18:39] <camelia> rakudo-moar 22ef68: OUTPUT: «List␤»

[18:39] <Zoffix> m: say Pod::FormattingCode.^mro.map: *.^name

[18:39] <camelia> rakudo-moar 22ef68: OUTPUT: «(Pod::FormattingCode Pod::Block Any Mu)␤»

[18:41] <Zoffix> m: say Pod.WHO.^name

[18:41] <camelia> rakudo-moar 22ef68: OUTPUT: «Stash␤»

[18:41] <Zoffix> pod don't look to be a type at all

[18:41] <tbrowder> well, i tried all i know how to do to find the actual problem (i did make some painful debug print progress but stopped when the errors stopped, but never found the actual chunk that caused it. i was planning to send the problem to Damian to use in the grammar parsing tutorial he's having at TPC NA DC in a short while.

[18:41] <Zoffix> oh wait

[18:42] <Zoffix> m: say Pod.HOW.^name

[18:42] <camelia> rakudo-moar 22ef68: OUTPUT: «Perl6::Metamodel::PackageHOW␤»

[18:43] <tbrowder> right, Pod is *not* a type, all else is Pod::Block except for Pod::Config as near as I can tell.

[18:44] <Zoffix> Well, it's hard to fix a problem if you don't know what the problem is. I found the block by taking S26 and deleting chunks from the bottom until I found a chunk that caused the crash

[18:45] <Zoffix> what's "twine" anyway?

[18:45] <tbrowder> well, i was zeroed in on it another misguided direction, glad you found it.

[18:47] <tbrowder> don't know--looks like a desription of how a Pod::Block can get twisted around with Declarations, leading and trailing text and such--Pod is not well documented.

[18:48] <tbrowder> twisted => twine

[18:59] <Geth> ¦ rakudo/nom: 5e3393454c | (Zoffix Znet)++ | lib/Pod/To/Text.pm6

[18:59] <Geth> ¦ rakudo/nom: Fix regresion in from earlier today's commit

[18:59] <Geth> ¦ rakudo/nom:

[18:59] <Geth> ¦ rakudo/nom: Most of the Pod stuff is not `Pod` type but `Pod::Block`.

[18:59] <Geth> ¦ rakudo/nom: Stuff the rest through pod2text; that catches Pod::Config

[18:59] <Geth> ¦ rakudo/nom: and enything else that might get added in teh future.

[18:59] <Geth> ¦ rakudo/nom:

[18:59] <Geth> ¦ rakudo/nom: [1] https://github.com/rakudo/rakudo/pull/1092

[18:59] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5e3393454c

[19:15] <Geth> ¦ roast: 113dab63da | (Zoffix Znet)++ | S26-documentation/02-paragraph.t

[19:15] <Geth> ¦ roast: Test nested paras don't crash

[19:15] <Geth> ¦ roast:

[19:15] <Geth> ¦ roast: RT#131400: https://rt.perl.org/Public/Bug/Display.html?id=131400

[19:15] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/3721e68d24

[19:15] <Geth> ¦ roast:             https://github.com/rakudo/rakudo/commit/22ef682537

[19:15] <Geth> ¦ roast:             https://github.com/rakudo/rakudo/commit/5e3393454c

[19:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/113dab63da

[20:16] <dogbert17> Zoffix: I suspect that your recent IO work has fixed https://github.com/perl6/doc/issues/335

[20:35] <Zoffix> closed thanks

[21:27] * Zoffix tries swapping buggable back to using JSON::Fast

[21:27] <Zoffix> to see if it eats a ton of ram still :)

[21:30] <AlexDaniel> Zoffix: I don't think it does

[21:30] <timotimo> i certainly wouldn't know!~

[21:30] <AlexDaniel> all whateverables switched to JSON::Fast and I think it should be working…

[21:32] <Zoffix> cool

[21:41] <AlexDaniel> Zoffix: good question. I honestly don't know

[21:41] * Zoffix neither

[21:41] <AlexDaniel> ok I'll try to reproduce it and see if it helps…

[21:45] <Zoffix> w00t. perl 5.26 released

[21:46] <AlexDaniel> \o/

[21:59] <MasterDuke> while people seem to be around, any thoughts/comments on https://github.com/rakudo/rakudo/pull/1091 ?

[22:02] <jnthn> Nice touch on the private part

[22:02] <jnthn> uh...wow, that came out bad

[22:02] <jnthn> I meant https://github.com/rakudo/rakudo/pull/1091/files#diff-69f510e10ab6ee1e164e5d37eb0cc00aR175

[22:03] <MasterDuke> ha

[22:03] <jnthn> StrDistance?

[22:03] <jnthn> oh wow

[22:04] <jnthn> I didn't realize that has a levenstein impl in it :D

[22:04] <timotimo> it became magical last year or the year before that

[22:04] <jnthn> Cute

[22:04] <MasterDuke> what was it before?

[22:04] <jnthn> MasterDuke: The only think I'm not sure about is :local

[22:04] <Zoffix> 5.24.0

[22:04] <jnthn> *thing

[22:05] <Zoffix> Oh, the conversation has moved lol :}

[22:06] <jnthn> I'm torn between the default or :all

[22:06] <jnthn> :all would auto-correct methods from Mu/Any/Cool

[22:06] <MasterDuke> yeah, wasn't sure

[22:06] <jnthn> Well, suggest them

[22:07] <jnthn> .gerp .uniqeu and so on

[22:07] <jnthn> Which feels useful

[22:07] <AlexDaniel> MasterDuke: you're not sorting them by distance, don't you?

[22:08] <jnthn> Hm, it seems that it's only taking those with distance 1

[22:08] <AlexDaniel> hm

[22:08] <jnthn> Which is a slight pitty because .uniq won't suggest unique as that's (I guess?) a distance of 2?

[22:09] <AlexDaniel> m: StrDistance.new(‘uniq’, ‘unique’).say

[22:09] <camelia> rakudo-moar 5e3393: OUTPUT: «Default constructor for 'StrDistance' only takes named arguments␤  in block <unit> at <tmp> line 1␤␤»

[22:09] <AlexDaniel> m: StrDistance.new(:before<uniq>, :after<unique>).say

[22:09] <camelia> rakudo-moar 5e3393: OUTPUT: «StrDistance.new(before => "uniq", after => "unique")␤»

[22:09] <MasterDuke> the problem with allowing a too high distance is a distance of 2 for a 3 letter method is going to suggest a lot

[22:09] <AlexDaniel> m: say +StrDistance.new(:before<uniq>, :after<unique>)

[22:09] <camelia> rakudo-moar 5e3393: OUTPUT: «2␤»

[22:09] <jnthn> m: say +StrDistance.new(:before<gerp>, :after<grep>)

[22:09] <camelia> rakudo-moar 5e3393: OUTPUT: «2␤»

[22:09] <MasterDuke> but i could always scale it

[22:10] <jnthn> Typos like that are 2 also, so I think 1 is too low

[22:10] <jnthn> Yeah, scaling on name length also works

[22:10] <jnthn> The only other thing

[22:11] <jnthn> Is that if the they put length or bytes, then they might get two sets of "Did you mean"

[22:11] <jnthn> So I might declare @suggestions a bit earlier and push those into it also

[22:12] <MasterDuke> easy enough

[22:13] <Zoffix> .oO( use large distance and pick first N from the returned list... )

[22:13] <jnthn> As to :local my feeling is :all would be more useful

[22:13] <jnthn> Zoffix: Trouble is that with short method names, a large distance is enough to delete all the chars and type new ones

[22:13] <Zoffix> ah

[22:13] <MasterDuke> right now i suggest no more than three things. 'elems', 'chars', 'graphs' or 'codes' are 4 by themselves

[22:14] <MasterDuke> or maybe push them all together as one?

[22:14] <jnthn> maybe but that'd hash up the plural-or-not thing? :)

[22:15] <MasterDuke> ugh, yeah

[22:16] <MasterDuke> could just say the limit is four, and if the method is length those are the only four they get...

[22:18] <jnthn> Guess so

[22:21] <MasterDuke> ok, i'll update the PR later this evening. now dinner &

[22:21] <jnthn> Enjoy :)

[22:23] <Zoffix> .tell tony-o you got unmerged PR: https://github.com/tony-o/perl6-data-dump/pull/28

[22:23] <yoleaux> Zoffix: I'll pass your message to tony-o.

[22:41] <Zoffix> heh, all the modules that conditionally-load Terminal::ANSIColor seem to be silently broken :) https://github.com/tony-o/perl6-data-dump/issues/27

[22:41] <Zoffix> Same problem's in my IRC::Client

[22:41] <Zoffix> .tell tony-o and one more: https://github.com/tony-o/perl6-data-dump/pull/29

[22:41] <yoleaux> Zoffix: I'll pass your message to tony-o.

[22:42] <Zoffix> Well, if it's isn't the job for...

[22:42] <Zoffix> greppable6: Terminal\:\:ANSIColor

[22:42] <greppable6> Zoffix, https://gist.github.com/22c5cd6f93886b9841ac4454a3a39869

[22:43] <Zoffix> hehe, my Test::Notice also broken :P

[22:44] <Zoffix> hm, prove6 from TAP::Harness promises colour support if Terminal::ANSIColor is installed, but doesn't use it anywhere

[22:45] * Zoffix slaps whoever decided it was a good idea to rename Term::ANSIColor to Terminal::ANSIColor

[22:45] <Zoffix> Thanks for all the extra typing \o

[22:45] <Zoffix> It should've been Term::ANSI

[22:45] <Zoffix> You've misspelt colour :P
