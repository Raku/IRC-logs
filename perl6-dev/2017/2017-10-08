[00:08] <Geth> ¦ rakudo/full-make-test: 6256ec8272 | (Zoffix Znet)++ | 2 files

[00:08] <Geth> ¦ rakudo/full-make-test: Make repl tests force interactive repl mode

[00:08] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/6256ec8272

[00:09] <gfldex> m: my @a = 1..500; @a.=hyper.map(* * 2); say [+] @a;

[00:09] <camelia> rakudo-moar de0533: OUTPUT: «0␤»

[00:09] <gfldex> looks like .hyper has stopped working

[00:10] <Zoffix> It never did.

[00:11] <Zoffix> It's not yet implemented. https://6guts.wordpress.com/2017/03/16/considering-hyperrace-semantics/

[00:11] <gfldex> it did about a week ago, as long as there was no recursion

[00:13] <Geth> ¦ rakudo/full-make-test: e72dedf5cb | (Zoffix Znet)++ | t/02-rakudo/repl.t

[00:13] <Geth> ¦ rakudo/full-make-test: Simplify routine call

[00:13] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/e72dedf5cb

[00:14] <gfldex> it still works in some spots it seams

[00:22] <Geth> ¦ rakudo/full-make-test: 4358871873 | (Zoffix Znet)++ | 2 files

[00:22] <Geth> ¦ rakudo/full-make-test: Add scrubber routine to is-run-repl

[00:22] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/4358871873

[00:24] <Geth> ¦ rakudo/full-make-test: 92bc011ab0 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[00:24] <Geth> ¦ rakudo/full-make-test: Follow convention of core multi sub declarations

[00:24] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/92bc011ab0

[00:33] <Geth> ¦ rakudo/full-make-test: 63643ad042 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[00:33] <Geth> ¦ rakudo/full-make-test: Friendlify is-run-repl()

[00:33] <Geth> ¦ rakudo/full-make-test:

[00:33] <Geth> ¦ rakudo/full-make-test: - If code is a Positional, assume its separate lines to feed REPL with

[00:33] <Geth> ¦ rakudo/full-make-test: - If out/err tests are Positionals, assume they're a bunch of lines

[00:33] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/63643ad042

[00:34] <Geth> ¦ rakudo/full-make-test: 9c4025f33f | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[00:34] <Geth> ¦ rakudo/full-make-test: Improve is-run()

[00:34] <Geth> ¦ rakudo/full-make-test:

[00:34] <Geth> ¦ rakudo/full-make-test: Default to empty Str test for err/out and 0 exit code

[00:34] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/9c4025f33f

[00:47] * BenGoldberg just noticed a very silly limitation in ecosystem module Inline.  If a thousand and one instances of perl6 attempt to create a C function named, say, 'foo', then the thousand-and-first will hang forever (or at least, until one of the earlier thousand perl6s exits).

[00:49] <Geth> ¦ roast: bitrauser++ created pull request #344: Add tests for RT#125466

[00:49] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/344

[00:49] <synopsebot> RT#125466 [open]: https://rt.perl.org/Ticket/Display.html?id=125466 [MATH] bitwise shift is inconsistent on int

[00:49] <BenGoldberg> The problem line is: $name = $basename ~ 1000.rand.Int while $name.IO.e || "$name$o".IO.e || "$name.c".IO.e;

[00:51] <Zoffix> heh :)

[00:59] <BenGoldberg> $basename is roughly "$*TMPDIR/inline_{$subroutine.name}".  The sensible solution would be to incorporate into the filename $*PID and a SHA1 hash of the C code being compiled.

[01:01] <Zoffix> .oO( or just use Temp::Path )

[01:05] <BenGoldberg> (A) that would be cheating ;), (B), by ommiting the $subroutine.name, it makes the code work with anonymous subroutines, (C) if you've got two or more functions with the *exact same* C code body, it doesn't make sense to compile it more than once -- just reuse the compiled code.

[01:05] <Geth> ¦ rakudo/full-make-test: 71a0ad5528 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[01:05] <Geth> ¦ rakudo/full-make-test: Rewrite Positional $code handling

[01:05] <Geth> ¦ rakudo/full-make-test:

[01:05] <Geth> ¦ rakudo/full-make-test: The multi setup isn't working because non-Positional one takes

[01:05] <Geth> ¦ rakudo/full-make-test: precedence when desc is given

[01:05] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/71a0ad5528

[01:07] <Geth> ¦ rakudo/full-make-test: 2f0bb20e82 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[01:07] <Geth> ¦ rakudo/full-make-test: diag() received output when Callable test fails

[01:07] <Geth> ¦ rakudo/full-make-test:

[01:07] <Geth> ¦ rakudo/full-make-test: Otherwise we can't see why exactly it failed

[01:07] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/2f0bb20e82

[02:00] <Geth> ¦ rakudo/full-make-test: 153f133bc2 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[02:00] <Geth> ¦ rakudo/full-make-test: Implement Map test to test specific lines

[02:00] <Geth> ¦ rakudo/full-make-test:

[02:00] <Geth> ¦ rakudo/full-make-test: - Keys are line numbers and values are expected lines

[02:00] <Geth> ¦ rakudo/full-make-test: - Key "t" is total expected line numbers

[02:00] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/153f133bc2

[02:15] <Geth> ¦ rakudo/full-make-test: be4d57deb5 | (Zoffix Znet)++ | t/02-rakudo/repl.t

[02:15] <Geth> ¦ rakudo/full-make-test: Start rewriting REPL tests using new test routine

[02:15] <Geth> ¦ rakudo/full-make-test:

[02:15] <Geth> ¦ rakudo/full-make-test: Tossed sanity tests (what's the point?) and two TODOed tests for

[02:15] <Geth> ¦ rakudo/full-make-test: postfix if/for on next lines. Such behaviour is undesirable, since

[02:15] <Geth> ¦ rakudo/full-make-test: we'll have to force users to use a semicolon at the end, having

[02:15] <Geth> ¦ rakudo/full-make-test: unhelpful behaviour of expecting further lines of input when

[02:15] <Geth> ¦ rakudo/full-make-test: it's missing.

[02:15] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/be4d57deb5

[02:56] <travis-ci> NQP build canceled. Samantha McVey 'Add a removal message if ornate parentheses are used

[02:56] <travis-ci> https://travis-ci.org/perl6/nqp/builds/284315409 https://github.com/perl6/nqp/compare/02a426e0e6ea...576d78eef877

[03:04] <Geth> ¦ rakudo/full-make-test: c45d0cd1b5 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[03:04] <Geth> ¦ rakudo/full-make-test: Disable error colouring

[03:04] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/c45d0cd1b5

[03:31] <Geth> ¦ rakudo/full-make-test: 338a097246 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[03:31] <Geth> ¦ rakudo/full-make-test: Allow :out test given as third positional

[03:31] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/338a097246

[03:32] <Geth> ¦ rakudo/full-make-test: 7c8a2739a5 | (Zoffix Znet)++ | t/02-rakudo/repl.t

[03:32] <Geth> ¦ rakudo/full-make-test: Rewrite remaining REPL tests using new routine

[03:32] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/7c8a2739a5

[03:33] <Geth> ¦ rakudo/full-make-test: d82c09b351 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[03:33] <Geth> ¦ rakudo/full-make-test: Toss `Map` test option

[03:33] <Geth> ¦ rakudo/full-make-test:

[03:33] <Geth> ¦ rakudo/full-make-test: Too convoluted and turned out to be rather useless afterall.

[03:33] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/d82c09b351

[03:46] <samcv> .

[03:46] <yoleaux> 7 Oct 2017 16:33Z <Zoffix> samcv: Do tests need to be adjusted to accomodate ornate stuff? I'm getting failures in t/spec/S02-lexical-conventions/comments.t

[03:46] <yoleaux> 7 Oct 2017 16:44Z <Zoffix> samcv: nevermind. Found the commit with reasonings and tossed the incorrect tests from master and 6.c-errata in https://github.com/perl6/roast/commit/85b9380acd and https://github.com/perl6/roast/commit/d78ab87a65

[03:47] <samcv> Zoffix++ i must have missed that. thanks!

[03:47] <Geth> ¦ rakudo/full-make-test: c9913277c9 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[03:47] <Geth> ¦ rakudo/full-make-test: Consistify interface

[03:47] <Geth> ¦ rakudo/full-make-test:

[03:47] <Geth> ¦ rakudo/full-make-test: By allowing Seq :out/:err tests, since we allow Seqs for $code

[03:47] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/c9913277c9

[03:47] <Geth> ¦ rakudo/full-make-test: f8edb82957 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[03:47] <Geth> ¦ rakudo/full-make-test: Document test helpers

[03:47] <Geth> ¦ rakudo/full-make-test: review: https://github.com/rakudo/rakudo/commit/f8edb82957

[03:48] <Geth> ¦ rakudo: zoffixznet++ created pull request #1187: Full make test

[03:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1187

[04:56] <Geth> ¦ roast: 447ceef0d2 | Joel++ (committed by Zoffix Znet) | S03-operators/bit.t

[04:56] <Geth> ¦ roast: Add tests for RT#125466 (#344)

[04:56] <Geth> ¦ roast:

[04:56] <Geth> ¦ roast: * Add tests for RT#125466

[04:56] <Geth> ¦ roast:

[04:56] <Geth> ¦ roast: * Bump `plan`

[04:56] <Geth> ¦ roast:

[04:56] <Geth> ¦ roast: * Add missing types and "todo fudge" unclear cases

[04:56] <synopsebot> RT#125466 [open]: https://rt.perl.org/Ticket/Display.html?id=125466 [MATH] bitwise shift is inconsistent on int

[04:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/447ceef0d2

[04:58] <Geth> ¦ roast: 6aa3422b63 | (Zoffix Znet)++ | S03-operators/bit.t

[04:58] <Geth> ¦ roast: Change todo fudges to skip

[04:58] <Geth> ¦ roast:

[04:58] <Geth> ¦ roast: So they don't get reported on stresstests as passing todos

[04:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6aa3422b63

[06:06] <Geth> ¦ rakudo/nom: 456358e3c3 | (Zoffix Znet)++ | src/core/array_slice.pm

[06:06] <Geth> ¦ rakudo/nom: Make @a[42..*] 4.2x faster; AlexDaniel++ for persistence

[06:06] <Geth> ¦ rakudo/nom:

[06:06] <Geth> ¦ rakudo/nom: - Faster with any Inf .max Range

[06:06] <Geth> ¦ rakudo/nom: - Faster only with non-lazy @a (we can't .elems lazies)

[06:06] <Geth> ¦ rakudo/nom: - Fixes RT#125344: https://rt.perl.org/Ticket/Display.html?id=125344

[06:06] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/456358e3c3

[06:06] <synopsebot> RT#125344 [open]: https://rt.perl.org/Ticket/Display.html?id=125344 [PERF] Int..Whatever ranges are slow (~20 times slower than Int..Int)

[06:30] <Geth> ¦ roast: bitrauser++ created pull request #345: Add tests for RT#132083 | [REGRESSION] Broken math (-2147483648 != -2147483648)

[06:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/345

[06:30] <synopsebot> RT#132083 [new]: https://rt.perl.org/Ticket/Display.html?id=132083 [REGRESSION] Broken math (-2147483648 != -2147483648)

[06:54] <Geth> ¦ roast: b2a148d684 | bitrauser++ | S03-operators/arith.t

[06:54] <Geth> ¦ roast: Add tests for RT#132083

[06:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b2a148d684

[06:54] <Geth> ¦ roast: 64227ec7a2 | Joel++ (committed using GitHub Web editor) | S03-operators/arith.t

[06:54] <Geth> ¦ roast: Add tests for RT#132083 (#345) 

[06:54] <Geth> ¦ roast:

[06:54] <Geth> ¦ roast: Add tests for RT#132083 | [REGRESSION] Broken math (-2147483648 != -2147483648)

[06:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/64227ec7a2

[06:54] <synopsebot> RT#132083 [resolved]: https://rt.perl.org/Ticket/Display.html?id=132083 [REGRESSION] Broken math (-2147483648 != -2147483648)

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: a757328bdd | (Aleks-Daniel Jakimenko-Aleksejev)++ | src/Perl6/Grammar.nqp

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: Awesomify “malformed loop spec” errors

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops:

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: This is a questionable fix for RT #127857.

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops:

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: Makes each parse of a loop construct 0.04 ms slower. So if you have

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: one hundred ｢loop｣-s in your code, that's already about four

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: milliseconds slower.

[07:48] <synopsebot> RT#127857 [new]: https://rt.perl.org/Ticket/Display.html?id=127857 [RFC] [LTA] error message when using commas in c-style “loop” (loop (my $x = 0, $x < 10, $x++) {})

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops:

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: Also breaks one 6.c-errata test that checks for “loop spec” text.

[07:48] <Geth> ¦ rakudo/awesome-malformed-loops: review: https://github.com/rakudo/rakudo/commit/a757328bdd

[07:49] <Geth> ¦ rakudo: AlexDaniel++ created pull request #1188: Awesomify “malformed loop spec” errors

[07:49] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1188

[07:56] <Geth> ¦ roast: bitrauser++ created pull request #346: Add tests for RT#125215 | [BUG] 10 ** -1 is a Num, but should probably be a Rat since it can in Rakudo

[07:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/346

[07:56] <synopsebot> RT#125215 [open]: https://rt.perl.org/Ticket/Display.html?id=125215 [BUG] 10 ** -1 is a Num, but should probably be a Rat since it can in Rakudo

[07:59] <lizmat> Files=1227, Tests=75630, 356 wallclock secs (14.69 usr  5.14 sys + 2510.32 cusr 218.01 csys = 2748.16 CPU)

[08:12] <Geth> ¦ roast: a55c0f4ae5 | Joel++ (committed using GitHub Web editor) | S32-num/rat.t

[08:12] <Geth> ¦ roast: Add tests for RT#125215 | [BUG] 10 ** -1 is a Num, but should probably be a Rat since it can in Rakudo (#346)

[08:12] <Geth> ¦ roast:

[08:12] <Geth> ¦ roast: * Add tests for RT#125215

[08:12] <Geth> ¦ roast:

[08:12] <Geth> ¦ roast: * Bump `plan`

[08:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a55c0f4ae5

[08:12] <synopsebot> RT#125215 [resolved]: https://rt.perl.org/Ticket/Display.html?id=125215 [BUG] 10 ** -1 is a Num, but should probably be a Rat since it can in Rakudo

[08:20] <Geth> ¦ rakudo/nom: 8300844303 | (Zoffix Znet)++ | 2 files

[08:20] <Geth> ¦ rakudo/nom: Do not explode in IO::CatHandle.nl-out

[08:20] <Geth> ¦ rakudo/nom:

[08:20] <Geth> ¦ rakudo/nom: Doing so breaks .Capture, which is more important than throwing

[08:20] <Geth> ¦ rakudo/nom: in a feature clearly documented as NYI

[08:20] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8300844303

[08:42] <buggable> New CPAN upload: App-MPD-AutoQueue-0.1.0.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/App-MPD-AutoQueue-0.1.0.tar.gz

[09:12] <buggable> New CPAN upload: App-MPD-AutoQueue-0.1.1.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/App-MPD-AutoQueue-0.1.1.tar.gz

[09:22] <buggable> New CPAN upload: perl6-App-MPD-Notify.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/perl6-App-MPD-Notify.tar.gz

[10:57] <lizmat> Zoffix: seeing two fails in t/02-rakudo/repl.t : Failed tests:  6, 28

[10:57] <lizmat> is that to be expected ?

[10:59] <lizmat> in test 6, stdout gives '' instead of '>'

[10:59] <lizmat> on test 28, stdout is also not ok, but not clear what it was or what it should be

[11:30] <lizmat> afk for a while&

[12:42] <buggable> New CPAN upload: IO-Prompt-0.0.2.tar.gz by WBIKER https://cpan.metacpan.org/authors/id/W/WB/WBIKER/Perl6/IO-Prompt-0.0.2.tar.gz

[13:06] <stmuk> PASS for me on linux (although it didn't yesterday!)

[14:32] <buggable> New CPAN upload: Math-Model-0.1.tar.gz by MORITZ https://cpan.metacpan.org/authors/id/M/MO/MORITZ/Perl6/Math-Model-0.1.tar.gz

[14:32] <buggable> New CPAN upload: Math-RungeKutta-0.1.tar.gz by MORITZ https://cpan.metacpan.org/authors/id/M/MO/MORITZ/Perl6/Math-RungeKutta-0.1.tar.gz

[15:27] <Geth> ¦ rakudo/nom: 775c367f34 | (Zoffix Znet)++ | t/02-rakudo/repl.t

[15:27] <Geth> ¦ rakudo/nom: Fudge OSX-failing tests

[15:27] <Geth> ¦ rakudo/nom:

[15:27] <Geth> ¦ rakudo/nom: REPL output differred slightly on OSX for ages and we already

[15:27] <Geth> ¦ rakudo/nom: had fudged tests for that reason. Fudging a couple more of these

[15:27] <Geth> ¦ rakudo/nom: new ones.

[15:27] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/775c367f34

[15:28] <Zoffix> lizmat: thanks. Fudged them.

[16:22] <Geth> ¦ rakudo/nom: 12fcece494 | (Elizabeth Mattijsen)++ | src/core/Hash.pm

[16:22] <Geth> ¦ rakudo/nom: Fix for RT #132246

[16:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/12fcece494

[16:23] <synopsebot> RT#132246 [new]: https://rt.perl.org/Ticket/Display.html?id=132246 .pick and .roll return incorrect results for object hashes

[16:23] <Zoffix> I'm nailing down what .Capture does for core types. Stuff marked with "new" (🆕) is behaviour that's different from current one. Here's the full list https://gist.github.com/zoffixznet/548850d16dcc83dec5641b04bc033113

[16:23] <Zoffix> Gonna impl later today

[16:29] <lizmat> afk again&

[17:01] <dogbert2> bisect: use NativeCall; await start { my $a = "dubba"; explicitly-manage($a); } xx 15

[17:01] <bisectable6> dogbert2, Bisecting by exit code (old=2015.12 new=12fcece). Old exit code: 1

[17:01] <bisectable6> dogbert2, bisect log: https://gist.github.com/df465fe767df61ec6aedbb890d2631c7

[17:01] <bisectable6> dogbert2, There are 13 candidates for the first “new” revision. See the log for more details

[17:03] <[Coke]> buggable's new cpan upload has duplicated info - maybe just show the full URL?

[17:11] <Zoffix> It's name-ver => url. It's hard to see the name of the dist from URL only.

[17:12] <Zoffix> ZofBot: we don't pay character, so what's it matter

[17:12] <ZofBot> Zoffix, pick" instead

[19:22] <buggable> New CPAN upload: Math-Model-0.2.tar.gz by MORITZ https://cpan.metacpan.org/authors/id/M/MO/MORITZ/Perl6/Math-Model-0.2.tar.gz

[19:47] <[Tux]> This is Rakudo version 2017.09-350-g12fcece49 built on MoarVM version 2017.09.1-576-g64b5dc03

[19:47] <[Tux]> csv-ip5xs        1.219 -  1.240

[19:47] <[Tux]> test             9.951 - 10.055

[19:47] <[Tux]> test-t           3.318 -  3.336

[19:47] <[Tux]> csv-parser       0.875 -  0.992

[19:47] <[Tux]> CSV::Parser still br0ken

[19:54] <japhb> [Tux]: Broken how?

[19:55] <japhb> buggable: speed :4

[19:55] <buggable> japhb,         ▂▆ ▅  ▆↑↑█           ▄    ▇                dates: 2017-09-22–2017-10-08

[19:55] <buggable> japhb, ▄▆▁▂▃▄▄▆██▅█▅ ████           █    █                range: 3.154s–4.010s

[19:55] <buggable> japhb, █████████████▄████▄         ██▂▆ ▃█▂    ▁ ▁▂▅   ▆▄ speed: 3% faster

[19:55] <buggable> japhb, ███████████████████▇▃▄▇▄▇▄▅▆████████▂▁▃▅█▅███▇▆▅██

[20:01] <japhb> Is there any way to tell that a particular unicode codepoint is preferred to render as full-width emoji instead of a narrow monochrome glyph?  (Recognizing that due to the vagaries of fonts, this may not be the *actual* rendering)

[20:02] <japhb> It's the preference or default that I'm looking for.

[20:02] <buggable> New CPAN upload: Math-Model-0.3.tar.gz by MORITZ https://cpan.metacpan.org/authors/id/M/MO/MORITZ/Perl6/Math-Model-0.3.tar.gz

[20:22] <ugexe> windows doesn't pass make test anymore

[20:22] <jdv79> there's no real free windows vm, right?

[20:22] <jdv79> i found one that expires in december which is ok i guess

[20:24] <jnthn> Zoffix: Don't break Rat (and friends) and Complex destructuring; those are totally reasonable (and useful) behaviors that fall straight out of the default "objects destructure to their properties". I've used them multiple times in talks as a basic example of signature unpacking.

[20:25] <jnthn> Zoffix: I'm not sure your proposed change to Range is an improvement either, though could argue that one either way.

[20:25] <jnthn> Zoffix: Rest look OK to me

[20:26] <jnthn> Wait, why doesn't Complex destructure already to im/re? :S

[20:26] <jnthn> m: (2 + 3i).Capture.perl.say

[20:26] <camelia> rakudo-moar 12fcec: OUTPUT: «\(:im(3e0), :re(2e0))␤»

[20:26] <jnthn> oh, it does, the gist is just wrong :)

[20:27] <jnthn> Was gonna say, I'm sure I've used that as an example too

[20:29] <cschwenz> is the following a known issue?  «make: *** No rule to make target `/Users/cal/local/bin/../share/nqp/lib/MAST/Ops.nqp', needed by `gen/moar/stage1/MASTOps.moarvm'.  Stop.»  (this issue was encountered while doing a build of rakudo from a fresh git clone.)

[20:31] <jdv79> doesn't look terribly familiar

[20:31] <cschwenz> :-/

[20:32] <jdv79> what platform and how did you configure?

[20:32] <cschwenz> one sec, making gist showing more detail…

[20:35] <jdv79> wonder if my puny rpi will compile rakudo these days

[20:36] <jdv79> its only got 512M ram and 100M swap.  i'm gonna predict its gonna OOM.

[20:36] <cschwenz> jdv79:  https://gist.github.com/cschwenz/e1df3cb057538fb569ada83dbeb7d93b

[20:37] <cschwenz> the above is what i see in my shell when i attempt to build rakudo

[20:37] <cschwenz> :-(

[20:37] <jdv79> but on a single 700M cpu it might take a while

[20:39] <ugexe> i suspect its related to --prefix somehow

[20:40] <jdv79> you could try the simplest configure to whittle it down - something like "perl Configure.pl --gen-moar"

[20:40] <cschwenz> okay, trying that...

[20:41] <ugexe> i wonder if --prefix isn't meant to be used with --gen-moar or --gen-nqp

[20:42] <Zoffix> m: say <42+i>.^name

[20:42] <camelia> rakudo-moar 12fcec: OUTPUT: «Str␤»

[20:42] <cschwenz> so far, «perl Configure.pl --backends=moar --gen-nqp --gen-moar» appears to work

[20:42] <Zoffix> Ah, I thought I had a complex there

[20:42] <cschwenz> ugexe, —prefix used to work :-/

[20:43] <jdv79> i think various people pkg for distros and stuff - maybe look at how those do it?

[20:43] <Zoffix> The current Range.Capture behaviour is useless because it doesn't include .excludes-min/.excludes-max attributes. Maybe they could be made public

[20:44] <ugexe> cschwenz: maybe it doesn't work *if* you already have an installation at the --prefix location then

[20:44] <ugexe> (assuming you even had one)

[20:45] <cschwenz> i had one, but removed it trying to track down an unrelated issue :-(

[20:45] <Zoffix> hmm

[20:45] <Zoffix> m:  < 1/2 >.Capture

[20:45] <camelia> rakudo-moar 12fcec: ( no output )

[20:45] <Zoffix> m:  < 1/2 >.Capture.say

[20:45] <camelia> rakudo-moar 12fcec: OUTPUT: «\(:denominator(2), :numerator(1))␤»

[20:45] <Zoffix> ok, that works out

[20:46] <jdv79> looks like fedora does rakudo, nqp, and moar seperately

[20:47] <cschwenz> jdv79, so the build order to do them seperately is: 1) moar, 2) nqp, 3) rakudo?

[20:48] <jdv79> should be, right?

[20:49] <cschwenz> i think so, just never done it that way, and asking for confirmation. :-)

[20:49] <jdv79> i've not tried.  i just build all three at once with no supplied prefix

[20:49] <Zoffix> OK, here's updated gist with the suggestions incorporated into it: https://gist.github.com/zoffixznet/548850d16dcc83dec5641b04bc033113
