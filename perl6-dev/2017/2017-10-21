[00:06] <Zoffix> 100s parse time on home box. A new record \o/

[00:14] <MasterDuke> i occasionally get 120+ on my laptop, but that's when the power cord has come out or it's gotten too hot

[01:38] <Geth> ¦ rakudo/nom: dd880cad42 | MasterDuke17++ | src/core/Match.pm

[01:38] <Geth> ¦ rakudo/nom: Optimize INTERPOLATE even more

[01:38] <Geth> ¦ rakudo/nom:

[01:38] <Geth> ¦ rakudo/nom: Make as many parameters anonymous or non-sigiled as possible.

[01:38] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dd880cad42

[01:38] <Geth> ¦ rakudo/nom: 44e69a6712 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | src/core/Match.pm

[01:38] <Geth> ¦ rakudo/nom: Merge pull request #1198 from MasterDuke17/even_more_INTERPOLATE_optimizations

[01:38] <Geth> ¦ rakudo/nom:

[01:38] <Geth> ¦ rakudo/nom: Optimize INTERPOLATE even more

[01:38] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/44e69a6712

[01:54] <Geth> ¦ rakudo/nom: 37c0c49759 | (Aleks-Daniel Jakimenko-Aleksejev)++ | src/core/Match.pm

[01:54] <Geth> ¦ rakudo/nom: Whitespace

[01:54] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/37c0c49759

[02:12] <AlexDaniel`> do we advertise untested things in the ChangeLog?

[02:12] <AlexDaniel`> I'm currently looking at ｢+ Added IO::Path.parent(Int) multi for getting up more than one level [7bea3a2d]｣

[02:14] <AlexDaniel`> well, I guess it doesn't hurt to. It's a rakudo changelog after all

[02:20] <AlexDaniel`> greppable6: INITTIME

[02:21] <greppable6> AlexDaniel`, https://gist.github.com/848e1fabd64199c4b41599d3f01e6c18

[02:27] * Zoffix does obligatory grumble about implementing features without writing any tests or docs

[02:37] <travis-ci> Rakudo build passed. Jonathan Worthington 'Replicate the `map` clone-per-batch in `grep` too

[02:37] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/290506389 https://github.com/rakudo/rakudo/compare/6726d4af20ea...da977785c6a4

[03:05] <Geth> ¦ rakudo/nom: 57de65fc28 | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/ChangeLog

[03:05] <Geth> ¦ rakudo/nom: Log all changes

[03:05] <Geth> ¦ rakudo/nom:

[03:05] <Geth> ¦ rakudo/nom: Feel free to tweak it.

[03:05] <Geth> ¦ rakudo/nom:

[03:05] <Geth> ¦ rakudo/nom: Deliberately not logged:

[03:05] <Geth> ¦ rakudo/nom: 89b9ac78 7fcab106 f8a74eab e4c32b3a da5c36c1 3e358199 c46be84c

[03:05] <Geth> ¦ rakudo/nom: 5a9bb4a5 de56c056 b66f5e1c 06fe4c4d 78a4824b 99f90e65 56193b59

[03:05] <Geth> ¦ rakudo/nom: <…commit message has 33 more lines…>

[03:05] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/57de65fc28

[03:05] <AlexDaniel`> whew

[03:05] <AlexDaniel`> feedback welcome

[03:12] <Zoffix> lots of work :o

[03:14] <Zoffix> AlexDaniel`: the "Fixed cmp-ok() to take `=:=` op as comparator" could be better logged as `Made cmp-ok take its arguments raw`. Making =:= work is just one of the features. Another one, for example, would be to make my $s = (1...*); cmp-ok $s, 'eqv', $s work right

[03:15] <Zoffix> AlexDaniel`: also search for "Capture" doesn't turn up anything. Don't know if it's logged; it was a pretty "big" change that might affect users

[03:15] <Zoffix> bisect: 42.Capture.say

[03:15] <bisectable6> Zoffix, Bisecting by exit code (old=2015.12 new=57de65f). Old exit code: 0

[03:15] <bisectable6> Zoffix, bisect log: https://gist.github.com/42659d0fe2e1e3273c4654cc51d6f99b

[03:15] <bisectable6> Zoffix, (2017-10-09) https://github.com/rakudo/rakudo/commit/bad9fefdd7e5e569eced85072bb019eef3997c32

[03:15] <AlexDaniel`> + Added X::Cannot::Capture exception type [4ba12ff1][bad9fefd][cd5864cf]

[03:16] <AlexDaniel`> what would be a better way to log it?

[03:16] <Zoffix> AlexDaniel`: oh, it's logged as "+ Added X::Cannot::Capture exception type [4ba12ff1][bad9fefd][cd5864cf]". That should be reworded as "Solidified .Capture semantics on all core types". The exception was just a small part of that work.

[03:16] <Zoffix> s/Solidified/whatever good word there is/;

[03:17] * Zoffix => bed

[03:17] <AlexDaniel`> Zoffix: thanks

[03:19] * japhb finally got a good rebuild of Rakudo and all his usual modules at "Rakudo version 2017.09-477-g37c0c4975 built on MoarVM version 2017.09.1-609-g1a9be0ad4"

[03:21] * japhb wonders why the startup time is so variable on his work machine

[03:21] <japhb> Trying that build on my personal machine

[03:25] <MasterDuke> interesting. i'm trying to perf record stage parse, but keep needing to expand the VM's storage, last attempt created a 76gb file before there wasn't any space left on the device

[03:26] <MasterDuke> it didn't used to take this much space

[03:26] <travis-ci> Rakudo build passed. Zoffix Znet 'Add IO::CatHandle.out-buffer

[03:26] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/290658549 https://github.com/rakudo/rakudo/compare/da977785c6a4...765dd6944fda

[03:35] <japhb> Timings are more stable on my home machine.  Must have some high-CPU browser tabs open at work.

[03:36] <japhb> (Home is 98-100 ms FWIW)

[03:38] <japhb> My dream is having perl6 startup in significantly less than 17 ms, so that significant work could get done between when the user presses enter and the very next screen refresh.  Effectively instantaneous for interactive purposes.  :-)

[03:39] <AlexDaniel`> isn't it faster than python?

[03:39] <AlexDaniel`> 17 ms I mean

[03:40] <AlexDaniel`> japhb: what's the startup time for python2 and python3 on your machine?

[03:42] <japhb> AlexDaniel`: checking

[03:43] <japhb> python2: 13 ms

[03:43] <japhb> python3: 20-21 ms

[03:43] <japhb> perl5: 4ms

[03:44] <AlexDaniel`> yeah

[03:45] <japhb> ruby: 37-38 ms

[03:45] <Geth> ¦ rakudo/nom: 7cf5ce7efe | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/ChangeLog

[03:45] <Geth> ¦ rakudo/nom: Log more commits and tweak some things (Zoffix++)

[03:45] <Geth> ¦ rakudo/nom:

[03:45] <Geth> ¦ rakudo/nom: Deliberately not logged:

[03:45] <Geth> ¦ rakudo/nom: e0dabaca 5cd7c728 527b8881 44e69a67 37c0c497 57de65fc

[03:45] <Geth> ¦ rakudo/nom: f980cdaf d20e972a 1e5d6f0d 7a2561c2 6726d4af

[03:45] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7cf5ce7efe

[04:03] <samcv> i get 100ms for perl6 -e 'say ""'

[04:21] <japhb> samcv: Your machine must be faster; I was doing each variant with a truly empty program.

[04:22] <AlexDaniel> it's 160ms here and it's not even my previous laptop… :'(

[04:23] <japhb> FWIW, perl6 -e 'say ""' for me is 106-110ms.  So ~10 ms slower

[04:32] <AlexDaniel`> *kaboom*

[04:34] <AlexDaniel`> m: say 42

[04:35] <AlexDaniel`> e: say 42

[04:35] <camelia> rakudo-moar 7cf5ce7ef: OUTPUT: «42␤»

[04:38] <AlexDaniel`> and another kaboom to get IRC::Client fix…

[05:17] <AlexDaniel`> :S

[06:37] <AlexDaniel`> hmmm I guess toaster can be smarter by not installing the same deps over and over again

[06:38] <AlexDaniel`> but alright I'll just let it do its thing and go on with my things o/

[06:38] <AlexDaniel`> (hm, or maybe it doesn't… but why is it so slow)

[07:20] <japhb> AlexDaniel`: Why a whole bunch of different bots, rather than one bot acting as frontend and multiple backends doing the work?

[07:22] <AlexDaniel`> japhb: mainly for historical reasons. When the project was starting I wasn't expecting that at some point there will be 13 bots

[07:24] <AlexDaniel`> in fact, I wasn't expecting more than 1 :)

[07:25] <AlexDaniel`> japhb: also, people tend to do things like this:

[07:25] <AlexDaniel`> evalable6: say 42

[07:25] <evalable6> AlexDaniel`, rakudo-moar 7cf5ce7ef: OUTPUT: «42»

[07:25] <AlexDaniel`> so you don't have to think if it's eval6: eval: e: or something else, you just talk to the bot

[07:25] <AlexDaniel`> eval6: say 42

[07:25] <evalable6> AlexDaniel`, rakudo-moar 7cf5ce7ef: OUTPUT: «42»

[07:25] <AlexDaniel`> eval: say 42

[07:25] <evalable6> AlexDaniel`, rakudo-moar 7cf5ce7ef: OUTPUT: «42»

[07:25] <AlexDaniel`> e: say 42

[07:25] <evalable6> AlexDaniel`, rakudo-moar 7cf5ce7ef: OUTPUT: «42»

[07:26] <AlexDaniel`> well, actually, all these seem to work, so maybe it's not a good reason to keep it that way

[07:27] <AlexDaniel`> but there are some commands that require some specific prefix, like:

[07:27] <AlexDaniel`> propdump: 2②

[07:27] <unicodable6> AlexDaniel`, https://gist.github.com/79ce7f320ed6f142a1011bcf0876b00d

[07:27] <AlexDaniel`> there's no way to get it by talking to unicodable6 directly

[07:31] <AlexDaniel`> japhb: but I don't really see any benefit of having just one bot. The problem with annoying rejoins can be solved by using a bouncer

[09:23] <lizmat> Files=1229, Tests=75743, 319 wallclock secs (14.79 usr  5.33 sys + 2172.76 cusr 212.23 csys = 2405.11 CPU)

[09:23] <pmurias> bartolin: thank you

[09:43] <lizmat> j: use nqp; say nqp::unbox_n(1e0); say nqp::unbox_n(1e0 + 4e-15)

[09:43] <camelia> rakudo-jvm 765dd6944: OUTPUT: «Error while reading '/home/camelia/p6eval-token': No such file or directory at /home/camelia/rakudo-j-inst/bin/eval-client.pl line 10.␤»

[09:43] <lizmat> hmmm

[09:48] <AlexDaniel`> FWIW toaster gives horrible results, or so it seems. Will investigate once it's finished

[09:52] <timotimo> japhb: with an strace -tt it looks like perl6 -e 'say "1"' spends a noticable amount of time between write and actually having exited (not to mention exit_group taking a while, too)

[09:53] <timotimo> 11:51:07.003413 execve("/home/timo/perl6/install/bin/perl6", ["perl6", "-e", "say \"1\""], 0x7fff6e200478 /* 74 vars */) = 0

[09:53] <timotimo> 11:51:07.179548 write(1, "1\n", 21

[09:53] <timotimo> 11:51:07.180473 exit_group(0)

[09:53] <timotimo> 11:51:07.185534 +++ exited with 0 +++

[09:54] <timotimo> annoyingly, the strace makes it take like 50% longer

[09:54] <bartolin> lizmat: I get '1' and '1.000000000000004' from my r-j for your evaluation

[09:55] <lizmat> bartolin: ok, so it seems to be a MoarVM only problem

[09:58] <timotimo> here's an opportunity to make perl6 start up faster: 120.100 (18446744073709.527 ms): moar/17371 mprotect(start: 0x7fdcfc12e000, len: 5623, prot: EXEC|READ            ) ...

[09:59] <timotimo> if we reduce that by less than a thousandths of a percent perl6 -e 'say "1"' will finish before you started it

[09:59] <timotimo> m: say 18446744073709 / 1000 * (1 - 0.0001)

[09:59] <camelia> rakudo-moar 7cf5ce7ef: OUTPUT: «18444899399.3016291␤»

[09:59] <timotimo> m: say 18446744073709 / 1000 * (1 - 0.0001) / 60 / 60 / 24

[10:00] <camelia> rakudo-moar 7cf5ce7ef: OUTPUT: «213482.631936361448␤»

[10:00] <timotimo> m: say 18446744073709 / 1000 * (1 - 0.0001) / 60 / 60 / 24 / 7 / 52

[10:00] <camelia> rakudo-moar 7cf5ce7ef: OUTPUT: «586.49074707791607␤»

[10:00] <timotimo> am i calculating correctly? it'd be done almost 600 years before you started it?

[10:02] <AlexDaniel`> hmm or maybe not. I'm misinterpreting something here :)

[10:22] <lizmat> hmmm... it looks like nqp::indexic ops are not being JITted yet  :-(

[10:22] <lizmat> BAIL: op <indexic_s>  :-(

[10:24] <timotimo> that should be easy

[10:24] <timotimo> i hope i can get it done before the breadrolls leave the oven ☺

[10:26] <timotimo> lizmat: what workload is this from?

[10:27] <lizmat> trying to use nqp::indexic in Num.perl

[10:27] <timotimo> oh

[10:27] <lizmat> it checks twice: once for 'e" and once for "E"

[10:27] <lizmat> thought I'd combine them

[10:28] <timotimo> i just pushed a branch to moarvm

[10:28] <timotimo> if you could spectest it and stuff ... :)

[10:28] <timotimo> bbl, breakfast

[10:29] <lizmat> well, I'm about to leave for most of the rest of the day  :-(

[10:29] <lizmat> we'll wait until after the release, to be on the safe side  :-)

[10:30] <lizmat> afk&

[10:30] <[Tux]> This is Rakudo version 2017.09-479-g7cf5ce7ef built on MoarVM version 2017.09.1-614-g19523568

[10:30] <[Tux]> csv-ip5xs        1.166 -  1.182

[10:31] <[Tux]> test            11.842 - 12.044

[10:31] <[Tux]> test-t           3.187 -  3.199

[10:31] <[Tux]> csv-parser      12.279 - 12.296

[10:31] <AlexDaniel`> hm, why so slow

[10:33] <[Tux]> first double run was test-t           3.304 -  3.432

[10:36] <AlexDaniel`> uh, so is it noise or did it become slower?

[10:44] <[Tux]> no idea

[10:44] <[Tux]> I'll run again later

[12:01] <Geth> ¦ nqp: 137c05269f | pmurias++ | src/vm/js/nqp-runtime/core.js

[12:01] <Geth> ¦ nqp: [js] Implement nqp::ordbaseat

[12:01] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/137c05269f

[12:01] <Geth> ¦ nqp: 5c32f736bb | pmurias++ | src/vm/js/RegexCompiler.nqp

[12:01] <Geth> ¦ nqp: [js] Fix bug

[12:01] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5c32f736bb

[12:01] <timotimo> procasync/kill.rakudo.moar, is that faily sometimes?

[12:06] <timotimo> maybe just sensitive to system load?

[12:07] <timotimo> AlexDaniel`: i think it's not called "sanitry"?

[12:08] <AlexDaniel`> oh, huh. Yeah I think I meant “sane”

[12:08] <AlexDaniel`> that commit https://github.com/rakudo/rakudo/commit/93a66d75

[12:09] <timotimo> well, there's a "sanitize" method

[12:11] <Geth> ¦ rakudo/nom: fece49cf06 | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/ChangeLog

[12:11] <Geth> ¦ rakudo/nom: ChangeLog tweak

[12:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fece49cf06

[12:11] <AlexDaniel`> timotimo: anything else?

[12:11] <timotimo> still looking :)

[12:13] <MasterDuke> AlexDaniel`: you have the INTERPOLATE changes in 'Internal', which is where i'd put something like saying it's now a multi but i'd probably also add a mention in efficiency

[12:14] <AlexDaniel`> MasterDuke: ok

[12:14] <timotimo> oh

[12:15] <timotimo> it's called "ratchet", not "ratched"

[12:16] * AlexDaniel` turns on his spellchecker…

[12:21] <Geth> ¦ rakudo/nom: 312cac7869 | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/ChangeLog

[12:21] <Geth> ¦ rakudo/nom: More ChangeLog tweaks

[12:21] <Geth> ¦ rakudo/nom:

[12:21] <Geth> ¦ rakudo/nom: timotimo++ MasterDuke++

[12:21] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/312cac7869

[12:24] <MasterDuke> AlexDaniel`: sorry, meant to also say that in that section i'd call it something like 'interpolating variables into regexes'. i don't think normal users would know what INTERPOLATE is/does

[12:26] <AlexDaniel`> ok

[12:48] <Zoffix> buggable: speed 10

[12:48] <buggable> Zoffix, ▆▄▁▁▂▂▆↑▃▃ dates: 2017-10-20–2017-10-21; range: 3.101s–3.432s; speed: 3% slower (widths: 5/3)

[12:48] <Zoffix> buggable: speed 100

[12:48] <buggable> Zoffix, ▆▆▆▆▇▆▆█▆▆▅▅▆▆▆▆▇█▆▇▆▄█↑↑█▄▄▃▃▄▃▄▃▃▃▅▇▄▅▄▄█▄▃▂▃▃▄▃▄▄▅▄▃▃▅▄▃▄▃▂▃▂▃▃▆▃▂▂▂▂▁▁▁▂▁▂▄▃▅▃▃▃▄▂▁▂▂▂▄▄▂▂▂▂▄▆▃▃ dates: 2017-09-20–2017-10-21; range: 3.044s–4.010s; speed: 5% faster (widths: 10/3)

[13:37] <Zoffix> Looking at some of the IO code, looks like teaching method cache to handle slippies will be a good win there

[13:38] <Zoffix> &open and .IO.open slip a capture, all the &lines/&words/&slurp, etc do as well.

[13:39] <Zoffix> ZofBot: so get on it, stat

[13:39] <ZofBot> Zoffix, The purpose of Newspeak was not only to provide a medium of expression for the world-view and mental habits proper to the devotees of Ingsoc, but to make all other modes of thought impossible

[14:08] <dogbert17> stresstesting with asan, small nursery and MVM_GC_DEBUG=1 yields two failures, i.e. t/spec/MISC/bug-coverage-stress.t where test 2 fails and t/spec/S17-lowlevel/lock.t which succumbs to asan barfage

[14:27] <Zoffix> dogbert17: that test is time sensitive. You could try rescaling roast timing:  set ROAST_TIMING_SCALE=10

[14:27] <Zoffix> (defaults to 1)

[14:43] <Zoffix> fussake

[14:43] <Zoffix> There's a 6.c-errata test the covers buggy behaviour

[14:43] <Zoffix> m: grammar { token TOP { (.+) } }.parse("Bar", :actions(class { method TOP($/) { put "Foo".subst: /(Foo)/, {uc $/[0] } } }))

[14:43] <camelia> rakudo-moar 312cac786: OUTPUT: «BAR␤»

[14:44] <Zoffix> It blocks fixing that

[14:46] <Zoffix> For this ticket https://rt.perl.org/Ticket/Display.html?id=71514

[14:46] <MasterDuke> aren't you supposed to rename the parameter to TOP in that case?

[14:46] <Zoffix> Yes

[14:46] <Zoffix> The ticketed behaviour isn't what I get now. I get proper moan about $/ being readonly

[14:47] <Zoffix> Gonna change the test. The test description is "Can call Str.subst in an action method without any trouble" and the above case clearly shows there is trouble, because the used code is incorrect.

[14:54] <Geth> ¦ roast/6.c-errata: 803f2452db | (Zoffix Znet)++ | S05-grammar/action-stubs.t

[14:54] <Geth> ¦ roast/6.c-errata: Change buggy code in .subst in actions test

[14:54] <Geth> ¦ roast/6.c-errata:

[14:54] <Geth> ¦ roast/6.c-errata: The test covers RT#71514, where the tested code uses .subst in

[14:54] <Geth> ¦ roast/6.c-errata: a context where we already have a $/ in use for other purpose.

[14:54] <Geth> ¦ roast/6.c-errata: It appears in the past such code silently did Wrong Things™ which

[14:54] <Geth> ¦ roast/6.c-errata: was fixed by adding a `try` into .subst.

[14:54] <Geth> ¦ roast/6.c-errata:

[14:54] <synopsebot> RT#71514 [resolved]: https://rt.perl.org/Ticket/Display.html?id=71514 Calling .subst in a reduction method destroys the effect of make()

[14:54] <Geth> ¦ roast/6.c-errata: <…commit message has 11 more lines…>

[14:54] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/803f2452db

[14:55] <Geth> ¦ roast: 038d346010 | (Zoffix Znet)++ | S05-grammar/action-stubs.t

[14:55] <Geth> ¦ roast: Change buggy code in .subst in actions test

[14:55] <Geth> ¦ roast:

[14:55] <Geth> ¦ roast: The test covers RT#71514, where the tested code uses .subst in

[14:55] <Geth> ¦ roast: a context where we already have a $/ in use for other purpose.

[14:55] <Geth> ¦ roast: It appears in the past such code silently did Wrong Things™ which

[14:55] <Geth> ¦ roast: was fixed by adding a `try` into .subst.

[14:55] <Geth> ¦ roast:

[14:55] <Geth> ¦ roast: <…commit message has 11 more lines…>

[14:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/038d346010

[15:02] <AlexDaniel`> yaaay toaster results!

[15:04] <Geth> ¦ roast: ff1834016b | (Zoffix Znet)++ | S32-str/substr.t

[15:04] <Geth> ¦ roast: Rewrite the test using proper test routine

[15:04] <Geth> ¦ roast:

[15:04] <Geth> ¦ roast: - We test Failure's exception too

[15:04] <Geth> ¦ roast: - We don't leave behind an unhandled Failure

[15:04] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ff1834016b

[15:04] <MasterDuke> nice golden brown toast? or burnt toast?

[15:04] <AlexDaniel`> MasterDuke: not just one, but 35 burnt!

[15:04] <MasterDuke> doh

[15:05] <Geth> ¦ roast/zoffer-post-release: c81c86403c | (Zoffix Znet)++ | S05-grammar/action-stubs.t

[15:05] <Geth> ¦ roast/zoffer-post-release: Write proper test for RT#71514

[15:05] <Geth> ¦ roast/zoffer-post-release:

[15:05] <Geth> ¦ roast/zoffer-post-release: The code in the ticket has a bug and the original test[^1] covered it.

[15:05] <Geth> ¦ roast/zoffer-post-release: Add the test for throwage that should be happening.

[15:05] <Geth> ¦ roast/zoffer-post-release:

[15:05] <Geth> ¦ roast/zoffer-post-release: [1] https://github.com/perl6/roast/commit/803f2452db

[15:06] <Geth> ¦ roast/zoffer-post-release: review: https://github.com/perl6/roast/commit/c81c86403c

[15:06] <synopsebot> RT#71514 [resolved]: https://rt.perl.org/Ticket/Display.html?id=71514 Calling .subst in a reduction method destroys the effect of make()

[15:07] <AlexDaniel`> ohwell, let the fun begin

[15:10] <Geth> ¦ roast/zoffer-post-release: 9585230c26 | (Zoffix Znet)++ | S32-str/substr.t

[15:10] <Geth> ¦ roast/zoffer-post-release: Test .subst works in BEGIN

[15:10] <Geth> ¦ roast/zoffer-post-release:

[15:10] <Geth> ¦ roast/zoffer-post-release: RT#122789: https://rt.perl.org/Ticket/Display.html?id=122789

[15:10] <Geth> ¦ roast/zoffer-post-release: Rakudo fix: https://github.com/rakudo/rakudo/commit/a62b221a8048238edaa1f6e62070b42ed8bd5cd3

[15:10] <Geth> ¦ roast/zoffer-post-release: review: https://github.com/perl6/roast/commit/9585230c26

[15:10] <synopsebot> RT#122789 [open]: https://rt.perl.org/Ticket/Display.html?id=122789 [BUG] `.subst` does not work inside BEGIN block ($/ is set too late)

[15:13] <AlexDaniel`> hm, Data::Dump fails because of RT #132283

[15:13] <synopsebot> RT#132283 [open]: https://rt.perl.org/Ticket/Display.html?id=132283 [REGRESSION] BUILDALL is listed as one of the methods, maybe that's not right (say $foo.^methods)

[15:13] <AlexDaniel`> so it tests the output and does not expect to see BUILDALL there

[15:14] <Zoffix> "Well, it *is* an auto-generated method that is installed in the namespace.  Just like “bar”. So either we should show both, or neither."

[15:14] <Zoffix> +1 on both

[15:17] <AlexDaniel`> that makes sense

[15:20] <tbrowder> hi, #perl6-dev

[15:25] <Geth> ¦ rakudo/zoffer-post-release: 738908be4d | (Zoffix Znet)++ | src/core/Str.pm

[15:25] <Geth> ¦ rakudo/zoffer-post-release: "Do. Or do not. There is no try."

[15:25] <Geth> ¦ rakudo/zoffer-post-release:

[15:25] <Geth> ¦ rakudo/zoffer-post-release: Fixes RT#126721: https://rt.perl.org/Ticket/Display.html?id=126721

[15:25] <Geth> ¦ rakudo/zoffer-post-release:

[15:25] <Geth> ¦ rakudo/zoffer-post-release: Do not silence errors when failing to assign to $/ as that introduces

[15:25] <Geth> ¦ rakudo/zoffer-post-release: action-at-a-distance bugs that can be very hard to debug:

[15:25] <Geth> ¦ rakudo/zoffer-post-release:

[15:25] <synopsebot> RT#126721 [new]: https://rt.perl.org/Ticket/Display.html?id=126721 $/ in closure arg of subst

[15:25] <Geth> ¦ rakudo/zoffer-post-release: <…commit message has 9 more lines…>

[15:25] <Geth> ¦ rakudo/zoffer-post-release: review: https://github.com/rakudo/rakudo/commit/738908be4d

[15:26] <Zoffix> That ^ one could have some fallout. People using .subst and stuff inside actions method and if they're not using $/ inside the subst, they might not even be hitting the bug that's being fixed

[15:27] <Geth> ¦ roast/zoffer-post-release: 80a49c4324 | (Zoffix Znet)++ | S32-str/substr.t

[15:27] <Geth> ¦ roast/zoffer-post-release: Test .subst complains when it can't use $/

[15:27] <Geth> ¦ roast/zoffer-post-release:

[15:27] <Geth> ¦ roast/zoffer-post-release: RT#126721: https://rt.perl.org/Ticket/Display.html?id=126721

[15:27] <Geth> ¦ roast/zoffer-post-release: Rakudo fix: https://github.com/rakudo/rakudo/commit/738908be4d

[15:27] <Geth> ¦ roast/zoffer-post-release: review: https://github.com/perl6/roast/commit/80a49c4324

[15:30] <tbrowder> I have a fix for RT128221 (table pod exception) but I want to discuss the best way to present it.  I believe the fix can be integrated as is (with a little cleanup from debugging), but I would like to then work on improving Pod.nqp for future work. Such improvements will include refactoring to move table-specific code into sub table, renaming sub-sub functions to avoid confusion for editors, and improving table

[15:30] <tbrowder> analysis for warning the user of bad or confusing practices.

[15:30] <synopsebot> RT#128221 [open]: https://rt.perl.org/Ticket/Display.html?id=128221 [BUG] Weird internal error when parsing some very simple Pod with '-' in the first column of a table in Rakudo

[15:32] <AlexDaniel`> one! https://github.com/tony-o/perl6-data-dump/pull/32

[15:36] <tbrowder> The future work will include more robust handling of tables with short rows.

[15:58] <AlexDaniel`> meh

[15:58] <AlexDaniel`> I think we have :r || issue in rakudo itself

[15:59] <AlexDaniel`> c: 2017.09 =SEE-ALSO foo

[15:59] <committable6> AlexDaniel`, ¦2017.09: «»

[15:59] <AlexDaniel`> c: HEAD =SEE-ALSO foo

[15:59] <committable6> AlexDaniel`, ¦HEAD(312cac7): «04===SORRY!04=== Error while compiling /tmp/SoospquUMD␤Preceding context expects a term, but found infix = instead␤at /tmp/SoospquUMD:1␤------> 03=SEE08⏏04-ALSO foo «exit code = 1»»

[15:59] <AlexDaniel`> bisected to https://github.com/rakudo/rakudo/commit/963a0f0657abaa0431d465e601c75b50462b4cd2

[16:01] <AlexDaniel`> or nqp maybe

[16:06] <AlexDaniel`> ok here's a ticket for notes RT #132339

[16:06] <synopsebot> RT#132339 [new]: https://rt.perl.org/Ticket/Display.html?id=132339 [REGRESSION] =SEE-ALSO pod comment can no longer be parsed (=SEE-ALSO foo)

[16:34] <Zoffix> ZofBot: fix! I haz it!

[16:34] <ZofBot> Zoffix, This last difference was cardinal

[16:41] <Geth> ¦ nqp: MasterDuke17++ created pull request #376: Remove some @*comp_line_directives accesses

[16:41] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/376

[16:43] <Zoffix> AlexDaniel`: do you want me to push =SEE-ALSO fix now or into post-releasE?

[16:43] <AlexDaniel`> Zoffix: now

[16:44] <MasterDuke> that NQP PR reduces the number of `N @*comp_line_directives <...>` lines in the dynvar log by 621

[16:44] <MasterDuke> when building the setting

[16:44] <MasterDuke> don't know if it's worth it

[16:51] <AlexDaniel`> WebSocket module is busted

[16:52] <AlexDaniel`> bisectable points at better-sched merge

[16:53] <AlexDaniel`> .seen tokuhirom

[16:53] <yoleaux> I saw tokuhirom 30 Oct 2015 02:34Z in #perl6: <tokuhirom> after: split('=', 'YYY=', 2) returns just 'YYY'

[16:57] <AlexDaniel`> ok I created this for now https://github.com/tokuhirom/p6-WebSocket/issues/15

[16:58] <Zoffix> grr perl6 -e '=SEE-ALSO foo' works, but not when I stick it into a file :())

[16:59] * Zoffix tries a bigger hammer

[17:00] <Zoffix> ^ good reason to write tests along with the fix :)

[17:01] <AlexDaniel`> I was 90% sure that you noticed it this way and that the obligatory grumble will follow :)

[17:10] <AlexDaniel`> Zoffix: hey, what do you think about this:

[17:10] <AlexDaniel`> c: 2017.09,1ea3297b2144^,1ea3297b2144,HEAD class Reals is Range { method new() { nextwith min => -∞, max => ∞, :!excludes-min, :!excludes-max } }; Reals.new

[17:11] <committable6> AlexDaniel`, https://gist.github.com/490cb1f1b65406adc6ff5ff138df447f

[17:11] <AlexDaniel`> ( https://github.com/rakudo/rakudo/commit/1ea3297b214403eb5b584ffe9b0f2b38a6f05ea7 )

[17:11] <AlexDaniel`> that's from a module: https://github.com/ajs/perl6-Math-Sequences/blob/master/lib/Math/Sequences/Real.pm

[17:12] <AlexDaniel`> ah

[17:12] <AlexDaniel`> c: 2017.09,1ea3297b2144^,1ea3297b2144,HEAD class Reals is Range { method new() { nextwith -∞, ∞, :!excludes-min, :!excludes-max } }; Reals.new

[17:12] <committable6> AlexDaniel`, ¦2017.09,1ea3297b2144^,1ea3297,HEAD(312cac7): «»

[17:12] <AlexDaniel`> there

[17:13] <AlexDaniel`> nevermind then!

[17:14] <Zoffix> man we have a million candidates for Range.new and none are even documented

[17:17] <Zoffix> AlexDaniel`: I guess we can add 1 more with :min :max that just passes stuff to other candidates

[17:17] <AlexDaniel`> uhm, what for?

[17:17] <Zoffix> To fix the module, I don't know

[17:17] <AlexDaniel`> I'll just submit a PR

[17:17] <Zoffix> OK

[17:20] <Zoffix> AlexDaniel`: actually  nextwith -∞, ∞, :!excludes-min, :!excludes-max doesn't look right

[17:20] <Zoffix> Or maybe it is

[17:20] <Zoffix> c: 2017.09,1ea3297b2144^,1ea3297b2144,HEAD class Reals is Range { method new() { nextwith -∞, ∞, :!excludes-min, :!excludes-max } }; Reals.new.^name.say

[17:20] <committable6> Zoffix, ¦2017.09,1ea3297b2144^,1ea3297,HEAD(312cac7): «Reals»

[17:21] <Zoffix> c: 2017.09,1ea3297b2144^,1ea3297b2144,HEAD class Reals is Range { has $.x = 42; method new() { nextwith -∞, ∞, :!excludes-min, :!excludes-max };  }; Reals.new.x.say

[17:21] <committable6> Zoffix, ¦2017.09,1ea3297b2144^,1ea3297,HEAD(312cac7): «(Any)»

[17:21] <Zoffix> c: 2017.09,1ea3297b2144^,1ea3297b2144,HEAD class Reals is Range { has $.x = 42; method new() { nextwith min => -∞, max => ∞, :!excludes-min, :!excludes-max };  }; Reals.new.x.say

[17:21] <committable6> Zoffix, https://gist.github.com/6e0cd4a5c8e39dffcbc3185bf1d1a0a9

[17:22] <Zoffix> The past version would've done the BUILD* stuff; current one goes through nqp::create shortcut. There ain't no attributes, so I guess it don't matter

[17:22] <Zoffix> c: 2017.09,1ea3297b2144^,1ea3297b2144,HEAD class Reals is Range { has $.x = 42; method new() { self.Mu::new: min => -∞, max => ∞, :!excludes-min, :!excludes-max };  }; Reals.new.x.say

[17:22] <committable6> Zoffix, ¦2017.09,1ea3297b2144^,1ea3297,HEAD(312cac7): «42»

[17:22] <Zoffix> That one's prolly more right; though it doesn't do all the data checking

[17:23] <Zoffix> Which again bumps against RT#130020

[17:23] <synopsebot> RT#130020 [open]: https://rt.perl.org/Ticket/Display.html?id=130020 [RFC][@LARRY] Create a set of conventions to minimize impact internal changes to user's code

[17:32] <AlexDaniel`> ok, I think this will do https://github.com/ajs/perl6-Math-Sequences/pull/4

[17:39] <Zoffix> ZOFFLOP: t/spec/S10-packages/basic.t

[17:40] <AlexDaniel`> awesome. UNIX::Daemonize kills committable

[17:40] <AlexDaniel`> or… daemonizes it

[17:42] <AlexDaniel`> ah no, it was my bad, nvm

[17:43] <Geth> ¦ rakudo/nom: ba718f4581 | (Zoffix Znet)++ | src/Perl6/Grammar.nqp

[17:43] <Geth> ¦ rakudo/nom: Fix parsing of custom named pod blocks

[17:43] <Geth> ¦ rakudo/nom:

[17:43] <Geth> ¦ rakudo/nom: Fixes RT#132339: https://rt.perl.org/Ticket/Display.html?id=132339

[17:43] <Geth> ¦ rakudo/nom:

[17:43] <Geth> ¦ rakudo/nom: We fixed[^1] ratchet getting disabled in `||` alternations, so here

[17:43] <Geth> ¦ rakudo/nom: we enable it back where it's needed.

[17:43] <Geth> ¦ rakudo/nom:

[17:43] <synopsebot> RT#132339 [new]: https://rt.perl.org/Ticket/Display.html?id=132339 [REGRESSION] =SEE-ALSO pod comment can no longer be parsed (=SEE-ALSO foo)

[17:43] <Geth> ¦ rakudo/nom: [1] https://github.com/rakudo/rakudo/commit/963a0f0657abaa0431d465e601c75

[17:43] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ba718f4581

[17:44] <Geth> ¦ roast: 2ede0d1fc3 | (Zoffix Znet)++ | S02-literals/pod.t

[17:44] <Geth> ¦ roast: Test custom named pod paras with `-` in identifiers work

[17:44] <Geth> ¦ roast:

[17:44] <Geth> ¦ roast: RT#132339: https://rt.perl.org/Ticket/Display.html?id=132339

[17:44] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/ba718f4581

[17:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2ede0d1fc3

[17:46] <AlexDaniel`> no, it really does something

[17:46] <AlexDaniel`> works fine for precomped stuff but the first run gets stuck

[17:55] <AlexDaniel`> meh. Yea, can't bisect. Anyway, created this issue for now: https://github.com/hipek8/p6-UNIX-Daemonize/issues/3

[18:01] <AlexDaniel`> m: multi trait_mod:<is> (Routine $func, :$fuzzed! (:$returns, :&test)) { }; sub foo() is fuzzed {}

[18:01] <camelia> rakudo-moar ba718f458: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot unpack or Capture `True`.␤To create a Capture, add parentheses: \(...)␤If unpacking in a signature, perhaps you needlessly used parentheses? -> ($x) {} vs. -> $x {}␤at <tmp>:1␤»

[18:01] <AlexDaniel`> c: 2017.09 multi trait_mod:<is> (Routine $func, :$fuzzed! (:$returns, :&test)) { }; sub foo() is fuzzed {}

[18:01] <committable6> AlexDaniel`, ¦2017.09: «»

[18:02] <Zoffix> Well, that's due to the Capture semantics fix

[18:02] <Zoffix> c: 2017.09 dd :fuzzed.Capture

[18:02] <committable6> Zoffix, ¦2017.09: «\(:key("fuzzed"), :value)»

[18:02] <Zoffix> hmm

[18:02] <Zoffix> no

[18:03] <Zoffix> c: 2017.09 dd True.Capture

[18:03] <committable6> Zoffix, ¦2017.09: «\()»

[18:04] <AlexDaniel`> Zoffix: should I create a ticket for this?

[18:04] <Zoffix> AlexDaniel`: where's the "fuzzed" stuff from?

[18:04] <Zoffix> AlexDaniel`: no, it works as designed

[18:04] <AlexDaniel`> https://github.com/FCO/Test-Fuzz/blob/master/lib/Test/Fuzz.pm6#L12

[18:05] <Zoffix> So looks like there's a dispatch bug in that code that new semantics have caught

[18:05] <AlexDaniel`> hm

[18:05] <AlexDaniel`> m: multi trait_mod:<is> (Routine $func, :$fuzzed! (:$returns, :&test)) { }; sub foo() is fuzzed() {}

[18:05] <camelia> rakudo-moar ba718f458: ( no output )

[18:05] <Zoffix> The bool candidate is meant to go to the other multi

[18:06] <Zoffix> And in that last eval it's passed as a list

[18:07] <Zoffix> It ain't documented properly so i don't even know how it's meant to work

[18:11] <Zoffix> Well, I got a fix to my best understanding of what this stuff is meant to be called with

[18:14] <Zoffix> Hahaha. Found a unrelated bug in that module while I was at it :P

[18:14] <Zoffix> It's doing %func.push which makes arrays when there's more then one thing in a key

[18:35] <AlexDaniel`> alright another || fallout here: https://github.com/jnthn/p6-docker-file/issues/2

[18:35] <AlexDaniel`> I tried to investigate but I think I'll have to leave it

[18:39] <Zoffix> Test::Fuzz is fixed with this: https://github.com/FCO/Test-Fuzz/pull/6

[18:42] <AlexDaniel`> Zoffix: thanks

[18:49] <AlexDaniel`> another || issue: https://github.com/jsimonet/dns-zone/issues/5

[18:56] <Geth> ¦ rakudo/nom: 9a13759813 | (Elizabeth Mattijsen)++ | docs/ChangeLog

[18:56] <Geth> ¦ rakudo/nom: Small fixes to ChangeLog

[18:56] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9a13759813

[18:58] <Zoffix> Docker::File file tests pass with this: https://github.com/jnthn/p6-docker-file/pull/3

[18:58] <Zoffix> Dunno if more `regex`ation is needed tho.

[19:01] <AlexDaniel`> another PR: https://github.com/marcoonroad/Coro-Simple/pull/8

[19:01] <AlexDaniel`> Three modules left to check! :)

[19:01] <Zoffix> \o/

[19:07] <AlexDaniel`> hmm

[19:07] <AlexDaniel`> can somebody ｢zef install CSS::Specification｣ ?

[19:08] <AlexDaniel`> it failed in toaster with stuff like “# No such symbol 't::CSS::Aural::Spec::Grammar'”

[19:08] <AlexDaniel`> but locally seems to be fine

[19:09] <Zoffix> ===> Install [OK] for CSS::Specification:ver<0.4.4>

[19:10] <AlexDaniel`> :S

[19:10] <AlexDaniel`> well, okay then?

[19:14] <ugexe> it could be problematic in that it includes a lib/t folder but doesn't declare any of those modules in the META6.json provides

[19:19] <AlexDaniel`> Alright, the rest seems to be ok. I'm calling it a day. There are a few modules I want to look at (some segfaults maybe and some seem to hang), but that's for tomorrow

[19:20] <SmokeMachine> Oh! Thanks Zoffix!

[19:24] <ugexe> yep, it passes with -Ilib but not -I.

[19:28] <AlexDaniel`> oh, by the way

[19:28] <AlexDaniel`> volunteers are welcome to spectest rakudo on windows. Previous failures are documented here: https://github.com/perl6/roast/issues/320

[19:29] <AlexDaniel`> o/

[19:56] <Zoffix> Well, it still fails pretty much the same and takes like an hour to run

[19:56] <Zoffix> On 4-core box

[20:03] <Zoffix> moritz: "Umm what?" what? https://twitter.com/perl6org/status/921826392089747462

[20:03] <Zoffix> What do you mean?

[20:05] <moritz> it seems that we fixed a bug that makes it harder ot use $/ in params

[20:05] <moritz> even though that's a pretty common pattern

[20:05] <moritz> or did I misunderstand something?

[20:07] <moritz> using two media for one discussion is inefficient :(

[20:08] <Zoffix> moritz: I don't follow that phrasing. We fixed the bug. Period. In the past, .match threw if $/ was readonly, while .subst silently used the wrong $/ in its substitution block. Now it also throws.

[20:08] <Zoffix> I don't think .match, .subst, and the rest of the ilk should be messing with $/ at all, but I think that ship might've sailed.

[20:09] <moritz> ah, ok

[20:10] <Zoffix> or will fix after the release. The fix is currently in a branch

[20:10] <Zoffix> m: grammar { token TOP {(.+)} }.parse: 'wrong-stuff', actions => class { method TOP ($/) { put "right stuff".subst: /(Foo)/, {uc $/[0] } } }

[20:10] <camelia> rakudo-moar 9a1375981: OUTPUT: «right stuff␤»

[20:10] <Zoffix> m: grammar { token TOP {(.+)} }.parse: 'wrong-stuff', actions => class { method TOP ($/) { put "right stuff".subst: /(.+)/, {uc $/[0] } } }

[20:10] <camelia> rakudo-moar 9a1375981: OUTPUT: «WRONG-STUFF␤»

[20:10] <Zoffix> m: grammar { token TOP {(.+)} }.parse: 'wrong-stuff', actions => class { method TOP ($_) { put "right stuff".subst: /(.+)/, {uc $/[0] } } }

[20:10] <camelia> rakudo-moar 9a1375981: OUTPUT: «RIGHT STUFF␤»

[20:11] <Zoffix> In the second eval, .subst silently fails to set $/ for the match object and the actions' $/ ends up being used inside the replacement block

[20:11] <Zoffix> And in third one, we renamed $/ to $_

[20:11] <Zoffix> Second one will throw

[20:12] <Zoffix> m: grammar { token TOP {(.+)} }.parse: 'wrong-stuff', actions => class { method TOP ($/) { put "right stuff".match: /(.+)/ } }

[20:12] <camelia> rakudo-moar 9a1375981: OUTPUT: «Cannot assign to a readonly variable ($/) or a value␤  in method TOP at <tmp> line 1␤  in regex TOP at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[20:12] <Zoffix> ^ the same way as .match throws here ^

[20:12] <Zoffix> m: grammar { token TOP {(.+)} }.parse: 'wrong-stuff', actions => class { method TOP ($/) { put "right stuff".subst: /(.+)/, {uc $_[0] } } }

[20:12] <camelia> rakudo-moar 9a1375981: OUTPUT: «RIGHT STUFF␤»

[20:13] <Zoffix> And since the match object is already availabel as $_ up in there, it seems the whole $/-setting business is kinda useless ehere and in .match and .subst-mutate

[20:15] <Zoffix> And they'd prolly be faster too if we didn't have to haul it around... worthy 6.e material IMO

[22:20] <samcv> buggable, status

[22:20] <samcv> releasable6, status

[22:20] <releasable6> samcv, Next release will happen when it's ready. No blockers. 478 out of 483 commits logged

[22:20] <releasable6> samcv, Details: https://gist.github.com/82e8c5bb6b1dc977ca70a6c6d573488a

[22:31] <Geth> ¦ rakudo/nom: 78d8d50995 | (Samantha McVey)++ | src/core/IO/Path.pm

[22:31] <Geth> ¦ rakudo/nom: Use UInt signature for .parent($depth)

[22:31] <Geth> ¦ rakudo/nom:

[22:31] <Geth> ¦ rakudo/nom: Instead of having a die inside of the function, change the signature so

[22:31] <Geth> ¦ rakudo/nom: only positive integers are accepted.

[22:31] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/78d8d50995

[23:04] <Zoffix> hm, so `is nodal` stuff applies only to List methods. It's not a user-facing construct tho documentation makes it seem like it is and like you can use it on your own methods (which I thought at some point). Make sense, I guess

[23:05] <jnthn> I don't see why you couldn't use it on your own list-y methods

[23:05] <jnthn> Though I suspect the situations you'd need to are few and far between

[23:05] <jnthn> There's already so many built-in data structures...

[23:06] <Zoffix> I thought you could make any method nodal and it'd prevent hyper from descending into iterables to call that method

[23:08] <jnthn> Yes, that's the idea.

[23:08] <Zoffix> That's not how it's implemented. It does nqp::can(List, $method-name)

[23:08] <Zoffix> m: class Foo { method x { say "called x" } }; (Foo.new, (Foo.new, Foo.new))».x

[23:08] <camelia> rakudo-moar 78d8d5099: OUTPUT: «called x␤called x␤called x␤»

[23:09] <Zoffix> But it makes sense. Otheriwse, ^ that would call `x` on the List and fail

[23:09] <jnthn> Oh :/

[23:15] <timotimo> oh greetings jnthn :)

[23:19] <jnthn> o/ timotimo

[23:24] <samcv> oh my there are so many expression engine commits in moarvm :O

[23:24] <Zoffix> Yeah, moarjit branch got merged this release

[23:24] <Zoffix> 2 years of work

[23:25] <samcv> yeah but i had never checked how many commits it was!

[23:25] <samcv> so we have 614 moarvm commits between last release and this one!

[23:26] <jnthn> o.O

[23:26] <jnthn> .oO( I either picked a great or awful time to delegate the MoarVM release :) )

[23:34] <Zoffix> .hug samcv

[23:34] * huggable hugs samcv

[23:34] <samcv> thanks Zoffix :)

[23:38] <timotimo> looking forward to proofreading the changelog :)
