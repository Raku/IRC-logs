[01:57] <Geth> ¦ rakudo/nom: cef41b2487 | (Samantha McVey)++ | 2 files

[01:57] <Geth> ¦ rakudo/nom: Simplify JVM code now that nqp::getstrfromname has been impl. on JVM

[01:57] <Geth> ¦ rakudo/nom:

[01:57] <Geth> ¦ rakudo/nom: We no longer need to have ifdef's in places where we use getstrfromname.

[01:57] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cef41b2487

[01:57] <Geth> ¦ rakudo/nom: 5b6e0fb26a | (Samantha McVey)++ | src/core/Cursor.pm

[01:57] <Geth> ¦ rakudo/nom: Use foldcase for ignorecase in Cursor.pm

[01:57] <Geth> ¦ rakudo/nom:

[01:57] <Geth> ¦ rakudo/nom: When comparing text case-insensitively the correct way is to fold case,

[01:57] <Geth> ¦ rakudo/nom: instead of just lowercasing the string. Otherwise things like ligatures

[01:57] <Geth> ¦ rakudo/nom: and other characters who may have special upper and lowercase forms will

[01:57] <Geth> ¦ rakudo/nom: not be put in an easily comparable format.

[01:57] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5b6e0fb26a

[02:01] <MasterDuke> samcv: any todo'd tests now pass?

[02:01] <yoleaux2> 7 Mar 2017 14:36Z <IOninja> MasterDuke: any ideas on why this fails to match now? https://irclog.perlgeek.de/perl6-dev/2017-03-07#i_14219666  Bisectable points to a version bump that brought this commit: https://github.com/MoarVM/MoarVM/commit/ab426c147702000cb857cf553c0c062ab7623d9e

[02:01] <samcv> MasterDuke, not yet. working on nqp side now

[02:01] <MasterDuke> cool, samcv++

[02:02] <samcv> :)

[03:17] <samcv> sometimes i have to delete my moar installation files manually. it doesn't always update the versioning

[03:17] <samcv> not sure wtf is going on with that. but it's happened tons of times

[03:18] <samcv> doing a clean or realclean of MoarVM still won't update version even though it is the latest

[03:18] <samcv> if i manually delete moar binary and the .so file and install it again then it's fine

[03:34] <samcv> MasterDuke, got distracted, but running spectest after making some changes to nqp now. do we already have a test for this bug in roast that is `todo`'d?

[03:54] <samcv> oh god what am i looking at

[03:55] <samcv> https://github.com/perl6/nqp/blob/master/src/QRegex/P5Regex/Actions.nqp#L163-L165 looks like for character ranges it does a range between lowercase versions and a range between uppercase versions

[03:58] <samcv> i guess it's ok since it's the P5Regex... i guess

[04:00] <samcv> naxieAlDle, you may be interested in this

[04:01] <naxieAlDle> me? :)

[04:01] <samcv> yeah about the casefolding things

[04:04] <naxieAlDle> samcv: that's interesting but you were looking for someone else, I think ×D

[04:06] <samcv> maybe

[04:06] <samcv> MasterDuke,

[04:27] <Geth> ¦ rakudo/nom: 127338a9dc | TimToady++ | src/Perl6/Optimizer.nqp

[04:27] <Geth> ¦ rakudo/nom: Report useless use of $_ in my $x = 1,$_

[04:27] <Geth> ¦ rakudo/nom:

[04:27] <Geth> ¦ rakudo/nom: The optimizer was not properly propagating void context to comma's args.

[04:27] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/127338a9dc

[04:27] <Geth> ¦ rakudo/nom: 1934a565a3 | TimToady++ | src/Perl6/Actions.nqp

[04:27] <Geth> ¦ rakudo/nom: mark require's import list as wanted

[04:27] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1934a565a3

[04:44] <MasterDuke> samcv: there aren't any tests for what IOninja pointed out

[04:44] <samcv> ok well i'm adding one for nqp at least. then after perl 6

[04:44] <samcv> working on the nqp side atm

[04:44] <samcv> yay I fixed it on nqp

[04:45] <MasterDuke> those places i pointed out? where there others?

[04:45] <samcv> i'm about to push commit

[04:45] <samcv> but it at least fixes it when running nqp test

[04:45] <MasterDuke> *were

[04:46] <MasterDuke> but no todo'd test passing? that's too bad

[04:46] <samcv> i haven't run rakudo

[04:46] <samcv> i mean roast

[04:46] <samcv> i'm working on nqp right now.

[04:57] <llfourn> .botsnack

[04:57] <synopsebot6> om nom nom

[04:57] <yoleaux2> :D

[04:57] <yoleaux2> 7 Mar 2017 22:10Z <nine> llfourn: I've made some progress...I think? https://gist.github.com/niner/349fd7432e5c2c68361b3caf5111532c

[05:36] <samcv> m: say 'ﬆ' ~~ m:i/s/

[05:36] <camelia> rakudo-moar 1934a5: OUTPUT: «｢ﬆ｣␤»

[05:36] <samcv> bisectable6: say 'ﬆ' ~~ m:i/s/

[05:36] <bisectable6> samcv, Bisecting by output (old=2015.12 new=1934a56) because on both starting points the exit code is 0

[05:36] <bisectable6> samcv, bisect log: https://gist.github.com/a317185d00ee00b1b856b77265179b38

[05:36] <bisectable6> samcv, (2017-02-28) https://github.com/rakudo/rakudo/commit/26e6993bd82a23fb701b91aeb3ee832c543a7d95

[05:37] <samcv> m: say 'st' ~~ m:i/ﬆ/

[05:37] <camelia> rakudo-moar 1934a5: OUTPUT: «｢s｣␤»

[05:38] <samcv> m: say 'ﬆ' ~~ m:i/st/

[05:38] <camelia> rakudo-moar 1934a5: OUTPUT: «｢ﬆ｣␤»

[05:38] <samcv> bisectable6, say 'ﬆ' ~~ m:i/st/

[05:38] <bisectable6> samcv, Bisecting by output (old=2015.12 new=1934a56) because on both starting points the exit code is 0

[05:39] <bisectable6> samcv, bisect log: https://gist.github.com/b1787df402db79b32581da354c504586

[05:39] <bisectable6> samcv, (2017-02-28) https://github.com/rakudo/rakudo/commit/26e6993bd82a23fb701b91aeb3ee832c543a7d95

[05:40] <travis-ci> Rakudo build failed. Samantha McVey 'Use foldcase for ignorecase in Cursor.pm

[05:40] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/208818675 https://github.com/rakudo/rakudo/compare/e2db7b80e673...5b6e0fb26ab4

[05:40] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[05:43] <samcv> looks like nativecall flapping

[05:58] <samcv> m: say 'st' ~~ m:i/ﬆ/

[05:58] <camelia> rakudo-moar 1934a5: OUTPUT: «｢s｣␤»

[05:58] <samcv> so this is still broken

[05:59] <samcv> m: say 'ﬆ' ~~ m:i/st/

[05:59] <camelia> rakudo-moar 1934a5: OUTPUT: «｢ﬆ｣␤»

[05:59] <samcv> this works fine though

[05:59] <samcv> m: say 'ﬆo' ~~ m:i/sto/

[05:59] <camelia> rakudo-moar 1934a5: OUTPUT: «｢ﬆo｣␤»

[06:11] <samcv> m: say 'ﬆ' ~~ m:i:m/st/

[06:11] <camelia> rakudo-moar 1934a5: OUTPUT: «False␤»

[06:11] <samcv> ok that's broken

[06:23] <Geth> ¦ roast: 60670004d7 | usev6++ | 2 files

[06:23] <Geth> ¦ roast: Fudge failing tests for JVM

[06:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/60670004d7

[06:28] <Geth> ¦ nqp: 2189077da7 | (Samantha McVey)++ | src/QRegex/P6Regex/Actions.nqp

[06:28] <Geth> ¦ nqp: Use foldcase instead of lowercase for case-insensitive P6Regex

[06:28] <Geth> ¦ nqp:

[06:28] <Geth> ¦ nqp: When comparing text case-insensitively the correct way is to fold case,

[06:28] <Geth> ¦ nqp: instead of just lowercasing the string. Otherwise things like ligatures

[06:28] <Geth> ¦ nqp: and other characters who may have special upper and lowercase forms will

[06:28] <Geth> ¦ nqp: not be put in an easily comparable format.

[06:28] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/2189077da7

[06:28] <Geth> ¦ nqp: ccb5490016 | (Samantha McVey)++ | 2 files

[06:28] <Geth> ¦ nqp: Use nqp::fc instead of nqp::lc and add a test

[06:28] <Geth> ¦ nqp:

[06:28] <Geth> ¦ nqp: Added test did not pass before this and the previous commit had been made.

[06:28] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ccb5490016

[06:28] <Geth> ¦ nqp: 9ab92d5ae0 | (Samantha McVey)++ | t/qregex/rx_modifiers

[06:28] <Geth> ¦ nqp: Add some more ignorecase tests

[06:28] <samcv> MasterDuke, despite these commits i don't think i've fixed anything in rakudo. but at least fixed some nqp bugs

[06:28] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/9ab92d5ae0

[06:29] <samcv> though i could have fixed a bug I do not know about currently. so at least it made it more correct

[06:31] <travis-ci> NQP build failed. Samantha McVey 'Add some more ignorecase tests'

[06:31] <travis-ci> https://travis-ci.org/perl6/nqp/builds/208865943 https://github.com/perl6/nqp/compare/3d6948a79e58...9ab92d5ae0d0

[06:34] <samcv> all seems fine there except for div_i JIT failed on one of the travis'

[07:18] <[Tux]> This is Rakudo version 2017.02-199-g1934a565a built on MoarVM version 2017.02-26-gbe37105f

[07:18] <[Tux]> csv-ip5xs        2.791

[07:18] <[Tux]> test            12.757

[07:18] <[Tux]> test-t           5.095 - 5.129

[07:18] <[Tux]> csv-parser      12.993

[07:18] <travis-ci> Rakudo build failed. TimToady 'mark require's import list as wanted'

[07:18] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/208845690 https://github.com/rakudo/rakudo/compare/5b6e0fb26ab4...1934a565a37d

[07:18] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[07:49] <llfourn> nine: I've been making progress from your patch. I think I'm almost there. The key is to .merge-symbols into the stub/existing pkg rather than trying to lexically replace.

[07:51] <nine> llfourn: sooo...who of us is the night shift and who's the day shift? :)

[07:52] <llfourn> nine: I'm in australia so we it's subjective :D

[07:52] <llfourn> so it's*

[07:52] <nine> Global distribution FTW :)

[07:53] <llfourn> yep, round the clock bugfixing!

[07:54] <llfourn> (assuming we fix it)

[07:55] <llfourn> taking a break &

[07:55] <nine> Yeah, I hope we can make it today. I was pretty drained yesterday. Took me some sweet long time to realize that I already had the information of where the existing scopes and and the stubs begin.

[07:56] <nine> Before that I ran into this weird issue that the stub was no longer a PackageHOW but a ClassHOW. No idea how that could happen.

[09:02] <llfourn> nine: I know. This kind of thing is very muddling and draining. The above issue sounds like you where getting the package and it's stash confused which I do all the time.

[09:24] <Geth> ¦ rakudo/nom: 44b60a560d | TimToady++ | src/Perl6/Grammar.nqp

[09:24] <Geth> ¦ rakudo/nom: all use of .define_slang without setting %*LANG

[09:24] <Geth> ¦ rakudo/nom:

[09:24] <Geth> ¦ rakudo/nom: Only check for mismatches if %*LANG<MAIN> changed without $*LANG changing.

[09:24] <Geth> ¦ rakudo/nom: (The reverse is okay, since someone may use only .define_slang without

[09:24] <Geth> ¦ rakudo/nom: maintaining the old %*LANG entries.)

[09:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/44b60a560d

[09:24] <llfourn> nine: but actually it might also be that the lexically installed packages we are installing from Actions.nqp turn out to be Mu at runtime. I changed to useing install_lexical_symbol and they are there now :)

[09:24] <TimToady> *allow

[09:27] * TimToady should obviously go to bed, if he can't even type straight...

[10:50] * jnthn got a failure in t/spec/S11-modules/require.t on HEAD

[10:50] <jnthn> "Lexical 'Cool' already declared"

[10:51] <IOninja> m: say "ﬆ T" ~~ m:i/T/

[10:51] <camelia> rakudo-moar 44b60a: OUTPUT: «False␤»

[10:53] <jnthn> .u ﬆ

[10:53] <yoleaux2> U+FB06 LATIN SMALL LIGATURE ST [Ll] (ﬆ)

[10:54] <jnthn> m: say "ﬆ".fc

[10:54] <camelia> rakudo-moar 44b60a: OUTPUT: «st␤»

[10:54] <jnthn> m: say "ﬆ".fc.chars

[10:54] <camelia> rakudo-moar 44b60a: OUTPUT: «2␤»

[10:54] <jnthn> m: say "ﬆ".lc.chars

[10:54] <camelia> rakudo-moar 44b60a: OUTPUT: «1␤»

[10:55] <jnthn> It's probably something to do with the foldcase of it expanding the char count

[10:55] <jnthn> Exactly how, I'm not sure

[10:57] <IOninja> Filed it as https://rt.perl.org/Ticket/Display.html?id=130953

[10:57] <IOninja> Also gonna mark as release blocker.

[10:58] <IOninja> m: say "ﬆT" ~~ m:i/T/

[10:58] <camelia> rakudo-moar 44b60a: OUTPUT: «｢T｣␤»

[10:58] <IOninja> ^ goes away if you remove the space

[10:58] <IOninja> (can be any letter instead of space)

[10:58] <IOninja> I think you're onto something with char count...

[10:59] <IOninja> m: say "ﬆﬆT" ~~ m:i/T/

[10:59] <camelia> rakudo-moar 44b60a: OUTPUT: «False␤»

[10:59] <IOninja> m: say "ﬆﬆﬆT" ~~ m:i/T/

[10:59] <camelia> rakudo-moar 44b60a: OUTPUT: «｢T｣␤»

[10:59] <IOninja> m: say "ﬆﬆﬆﬆT" ~~ m:i/T/

[10:59] <camelia> rakudo-moar 44b60a: OUTPUT: «False␤»

[10:59] <IOninja> m: say "ﬆﬆﬆﬆﬆT" ~~ m:i/T/

[10:59] <camelia> rakudo-moar 44b60a: OUTPUT: «｢T｣␤»

[10:59] <jnthn> We can revert the patch if needed, though that'd just mean we have to fudge different spectests

[10:59] <jnthn> NeuralAnomaly: stats

[10:59] <NeuralAnomaly> jnthn, [✘] Next release will be in 1 week and 3 days. Since last release, there are 40 new still-open tickets (11 unreviewed and 0 blockers) and 36 unreviewed commits. See http://perl6.fail/release/stats for details

[10:59] <jnthn> Ah, we've some time to look into a fix

[10:59] <IOninja> Yeah :)

[11:00] <samcv> m: say "ﬆ T" ~~ m:i/T/

[11:00] <camelia> rakudo-moar 44b60a: OUTPUT: «False␤»

[11:00] <samcv> bisectable6, say "ﬆ T" ~~ m:i/T/

[11:00] <bisectable6> samcv, Bisecting by output (old=2015.12 new=44b60a5) because on both starting points the exit code is 0

[11:00] <bisectable6> samcv, bisect log: https://gist.github.com/1d180cd8f09e1dbccdcedda62f84bd0c

[11:00] <bisectable6> samcv, (2017-02-28) https://github.com/rakudo/rakudo/commit/26e6993bd82a23fb701b91aeb3ee832c543a7d95

[11:03] <Geth> ¦ roast: 1994ec2a04 | (Jonathan Worthington)++ | S17-procasync/nonexistent.t

[11:03] <Geth> ¦ roast: Add tests for Proc::Async and non-existent process

[11:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1994ec2a04

[11:20] <travis-ci> Rakudo build passed. TimToady 'all use of .define_slang without setting %*LANG

[11:20] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/208901865 https://github.com/rakudo/rakudo/compare/1934a565a37d...44b60a560d63

[11:38] <IOninja> samcv: yo

[11:38] <samcv> hey

[11:38] <IOninja> samcv: I wanna tweet something. Does this sound normal: "Did you know one of the reasons for #Perl6's logo being so colourful is to fight any misogyny in community? Happy #InternationalWomensDay"

[11:39] <IOninja> Referencing one of the points discussed in the emails about the logo: https://raw.githubusercontent.com/perl6/mu/master/misc/camelia.txt

[11:40] <IOninja> "In addition, you can extend just about anything by attaching "P6" wings to it.  I also take it as a given that we want to discourage misogyny in our community.  You of the masculine persuasion should consider it an opportunity to show off your sensitive side.  :) Hence, Camelia."

[11:41] <samcv> ok could be better. i'm working on rephrasing

[11:41] <IOninja> \o/

[11:45] <samcv> how does this sound IOninja

[11:45] <samcv> #Perl6's logo was designed to be colorful to embrace women and fight misogyny within the community. Happy #InternationalWomensDay"

[11:45] <IOninja> samcv++ thanks

[11:45] <samcv> :)

[11:46] <samcv> also maybe add exclaimation mark at the end

[11:46] <samcv> #Perl6's logo was designed to be colorful to embrace women and fight misogyny within the community. Happy #InternationalWomensDay!

[11:47] <moritz> samcv++

[11:49] <lizmat> samcv++ IOninja++

[11:59] <Geth> ¦ roast: aaa8c0d6d6 | (Jonathan Worthington)++ | S17-procasync/nonexistent.t

[11:59] <Geth> ¦ roast: Test Proc::Async stdout/stderr on spawn failure.

[11:59] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/aaa8c0d6d6

[12:12] <llfourn> m: require Pod::To::Text; Pod::To::Text.new

[12:12] <camelia> rakudo-moar 44b60a: OUTPUT: «You cannot create an instance of this type (Text)␤  in block <unit> at <tmp> line 1␤␤»

[12:12] <llfourn> nine: If it wasn't for this I think I could fix everything

[12:13] <llfourn> but it seems we simply can't make stubs and replace them at runtime

[12:13] <llfourn> because they get their identity at compile time

[12:13] <llfourn> the fact that you change them in the lexpad doesn't matter

[12:13] <llfourn> or at least this is my interpretation of the matter

[12:14] <llfourn> the way stubs are done at compile time is to leave the package uncomposed until the definition comes up

[12:15] <llfourn> but this is impossible with with require with to my knowledge

[12:16] <nine> Have you also noticed the QAST::WVal(Text) in the AST?

[12:16] <llfourn> nope

[12:16] <nine> I wonder where that is even coming from?

[12:16] <nine> - QAST::Op(callmethod new)  new

[12:16] <nine> - QAST::WVal(Text) <wanted> Pod::To::Text

[12:17] <nine> Seems like the Perl6::World is keeping the reference to the stub somewhere.

[12:18] <llfourn> right. It puts the WVal there at compile time after it does the lookup is my interpretation of that.

[12:18] <llfourn> (I didn't think to look at the dump nine++)

[12:19] <nine> If we could defer the lookup till runtime, we'd have won

[12:22] <llfourn> mmm it works for require <&sub> because &sub is lookup up at runtime I guess.

[12:27] <llfourn> I think I'll change the tests to indirect lookups for now because that's at least working now with multiple requires etc...

[12:49] <lizmat> $ perl6 t/spec/S11-modules/require.t

[12:49] <lizmat> ===SORRY!===

[12:49] <lizmat> Lexical 'Cool' already declared

[12:49] <lizmat> Am I the only one seeing this? ^^^

[12:49] <llfourn> no I knew those tests weren't passing and you merged that last night :O

[12:49] <lizmat> I did ?

[12:49] <lizmat> oops

[12:49] <llfourn> I think so lol

[12:50] <llfourn> I thought it was intentional but yeah you can revert that :)

[12:50] <lizmat> Ah, so you mean it's a test that *should* get fixed in rakudo

[12:50] <llfourn> the fix is proving more

[12:51] <llfourn> difficult that I first thought

[12:51] <llfourn> yes :)

[12:51] <lizmat> ok, then I'll leave it for now  :-)

[12:51] <lizmat> I thought I had broken rakudo by the merge, but the merge just shows that rakudo was broken already, right ?

[12:52] <llfourn> yes, I'm going to change them in a sec anyway :)

[13:02] <Geth> ¦ rakudo/nom: fc86084f06 | (Elizabeth Mattijsen)++ | src/core/Str.pm

[13:02] <Geth> ¦ rakudo/nom: Fix for RT #130955

[13:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fc86084f06

[13:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130955

[13:13] <Geth> ¦ rakudo/nom: d6c95ea452 | (Elizabeth Mattijsen)++ | src/core/Parameter.pm

[13:13] <Geth> ¦ rakudo/nom: Presumably allow Parameter.set_default

[13:13] <Geth> ¦ rakudo/nom:

[13:13] <Geth> ¦ rakudo/nom: Haven't tested all of the ramifications of this, so please consider

[13:13] <Geth> ¦ rakudo/nom: this experimental.

[13:13] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d6c95ea452

[13:13] <Geth> ¦ nqp: 4c0f69840b | (Jonathan Worthington)++ | tools/build/MOAR_REVISION

[13:13] <Geth> ¦ nqp: Get MoarVM with async proc error handling fixes

[13:13] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/4c0f69840b

[13:13] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.02-25-g5dd8f04...2017.02-31-g91aab71

[13:14] <IOninja> More on the ligature front:

[13:14] <IOninja> m: "ﬆﬆT".match(m:i/T/)

[13:14] <IOninja> (hangs)

[13:14] <camelia> rakudo-moar fc8608: OUTPUT: «(timeout)Use of uninitialized value of type Any in string context.␤Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.␤  in block <unit> at <tmp> line 1␤»

[13:16] <Geth> ¦ rakudo/nom: c4a4c848c2 | (Jonathan Worthington)++ | src/core/Proc/Async.pm

[13:16] <Geth> ¦ rakudo/nom: Clean up Proc::Async exit handling

[13:16] <Geth> ¦ rakudo/nom:

[13:16] <Geth> ¦ rakudo/nom: * Don't duplicately .done/.quit the stdout and stderr channels

[13:16] <Geth> ¦ rakudo/nom: * A level less wrapping up of errors, fixing error reporting

[13:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c4a4c848c2

[13:16] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.02-61-g3d6948a...2017.02-65-g4c0f698

[13:16] <Geth> ¦ rakudo/nom: f73d984738 | (Jonathan Worthington)++ | tools/build/NQP_REVISION

[13:16] <Geth> ¦ rakudo/nom: Get latest MoarVM

[13:16] <Geth> ¦ rakudo/nom:

[13:16] <Geth> ¦ rakudo/nom: * Fix issues around error handling when writing to or reading from a

[13:16] <Geth> ¦ rakudo/nom:   Proc::Async when the process could not be spawned (for example, if

[13:16] <Geth> ¦ rakudo/nom:   the thing to spawn does not exist)

[13:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f73d984738

[13:16] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.02-61-g3d6948a...2017.02-65-g4c0f698

[13:16] <travis-ci> NQP build passed. Jonathan Worthington 'Get MoarVM with async proc error handling fixes'

[13:16] <travis-ci> https://travis-ci.org/perl6/nqp/builds/208964886 https://github.com/perl6/nqp/compare/9ab92d5ae0d0...4c0f69840b8e

[13:17] <Geth> ¦ rakudo/nom: 8c777b1123 | (Jonathan Worthington)++ | t/spectest.data

[13:17] <Geth> ¦ rakudo/nom: Run S17-procasync/nonexistent.t

[13:17] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8c777b1123

[13:28] <IOninja> oh wait, the .match hand I think is due to candidate dispatch

[13:28] <IOninja> *hang

[13:29] <IOninja> s: "ﬆﬆT", 'match', \(m:i/T/)

[13:29] <SourceBaby> IOninja, Sauce is at https://github.com/rakudo/rakudo/blob/8c777b1/src/core/Cool.pm#L179

[13:29] <IOninja> yeah

[13:30] <lizmat> fwiw, I'm still not understanding (or I forgot) what all that .Stringy / Str business is about  :-(

[13:32] <IOninja> I don't get the point of Stringy either

[13:35] <Geth> ¦ roast: 2fa32e11eb | (Zoffix Znet)++ | S05-substitution/match.t

[13:35] <Geth> ¦ roast: [fudge] Test ligatures do not break :i regex match

[13:35] <Geth> ¦ roast:

[13:35] <Geth> ¦ roast: RT#130953: https://rt.perl.org/Ticket/Display.html?id=130953

[13:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2fa32e11eb

[13:35] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130953

[13:35] <lizmat> it feels overengineered to me, but maybe moritz masak jnthn TimToady can enlighten us?  :-)

[13:37] <lizmat> hmmm... do we actually have the opposite of ($a is rw) in signatures (aka, only accept if it's not a container?)

[13:37] <jnthn> It's to Str what Numeric is to Int

[13:37] <IOninja> m: -> $ is readonly {}($ = 42)

[13:37] <camelia> rakudo-moar 8c777b: ( no output )

[13:37] <jnthn> lizmat: No, though multi-dispatch treats the is rw case more narrowly

[13:38] <IOninja> jnthn: that doesn't really explain it. There's just one Str, while Numeric is used by Int, Num, Rat, and Complex

[13:38] <jnthn> IOninja: Yeah, but you might add your own types that you wish to be treated string-like (I did one in a private project recently)

[13:38] <jnthn> IOninja: And in Perl 6 itself we intend to add Cat (lazy string)

[13:38] <IOninja> Oh ok, I see Blob uses it as well.

[13:39] <jnthn> Which would be stringy, but not Str

[13:39] <IOninja> OK. Thanks.

[13:39] <jnthn> m: say Blob.^roles

[13:39] <camelia> rakudo-moar 8c777b: OUTPUT: «((Positional[T]) (Stringy))␤»

[13:39] <jnthn> Hah, yes

[13:50] <lizmat> hmmm... my fix for RT #130954 causes severe spectest breakage  :-(

[13:50] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130954

[13:50] <Geth> ¦ roast: 81c9ff59e8 | (Zoffix Znet)++ | S32-str/split.t

[13:50] <Geth> ¦ roast: Minor formatting fix

[13:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/81c9ff59e8

[13:50] <Geth> ¦ roast: a8a7ff148e | (Zoffix Znet)++ | S32-str/split.t

[13:50] <Geth> ¦ roast: Test split skip-empty skips all empty chunks

[13:50] <Geth> ¦ roast:

[13:50] <Geth> ¦ roast: RT#130955: https://rt.perl.org/Ticket/Display.html?id=130955

[13:50] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130955

[13:51] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a8a7ff148e

[13:51] <lizmat> $ 6 'dd (my $ = 42).WHICH'

[13:51] <lizmat> ObjAt.new("Scalar|Int|42")

[13:51] <lizmat> $ 6 'dd 42.WHICH'

[13:51] <lizmat> ObjAt.new("Int|42")

[13:51] <lizmat> jnthn: comments ^^^ ?

[13:52] <jnthn> Looks weird

[13:52] <jnthn> .WHAT, .HOW, .WHERE, etc. all look through the Scalar container

[13:52] <jnthn> Why should .WHICH be different?

[13:52] <lizmat> https://rt.perl.org/rt3//Public/Bug/Display.html?id=130954

[13:54] <jnthn> Will have to look after language class; bbiah

[13:54] <lizmat> okidoki

[13:59] <IOninja> ZOFVM: Files=1227, Tests=132791, 117 wallclock secs (20.86 usr  3.17 sys + 2346.55 cusr 259.61 csys = 2630.19 CPU)

[14:05] <IOninja> This check looks pointless: https://github.com/rakudo/rakudo/blob/d6c95ea45208fefd65d51be9f31ef72b82a8fc66/src/core/Parameter.pm#L165 as $!default_value is already type-constrained to be Code: https://github.com/rakudo/rakudo/blob/d6c95ea45208fefd65d51be9f31ef72b82a8fc66/src/core/Parameter.pm#L12

[14:06] <lizmat> is it type constrained ?  I mean, it comes from nqp land

[14:07] <lizmat> ah, looks like in BOOTSTRAP line 1477

[14:07] <IOninja> m: use nqp; dd nqp::getattr(Parameter.new, Parameter, '$!default_value').^name

[14:07] <camelia> rakudo-moar 8c777b: OUTPUT: «"VMNull"␤»

[14:08] <lizmat> m: use nqp; dd nqp::attrinited(Parameter.new, Parameter, '$!default_value')

[14:08] <camelia> rakudo-moar 8c777b: OUTPUT: «0␤»

[14:08] * IOninja tries tossing it

[14:10] <Geth> ¦ roast: 0336dea1a8 | LLFourn++ | 2 files

[14:10] <Geth> ¦ roast: Changed require tests to indirect lookups

[14:10] <Geth> ¦ roast:

[14:10] <Geth> ¦ roast: We can't get importing a class and calling methods directly on it to

[14:10] <Geth> ¦ roast: work yet:

[14:10] <Geth> ¦ roast:

[14:10] <Geth> ¦ roast: ```

[14:10] <Geth> ¦ roast: require Some::Class;

[14:10] <Geth> ¦ roast: Some::Class.new

[14:10] <Geth> ¦ roast: ```

[14:10] <Geth> ¦ roast:

[14:10] <Geth> ¦ roast: So change the tests to indirect lookups for now.

[14:10] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0336dea1a8

[14:11] <IOninja> :/

[14:11] <IOninja> "for now"?

[14:11] <IOninja> m: use nqp; my \x = Parameter.new; nqp::bindattr(x, Parameter, '$!default_value', 42); dd nqp::getattr(x, Parameter, '$!default_value')

[14:11] <camelia> rakudo-moar 8c777b: OUTPUT: «42␤»

[14:11] <llfourn> ^ the above never work fwiw

[14:11] <Geth> ¦ rakudo/nom: 0633f0370e | (Elizabeth Mattijsen)++ | src/core/List.pm

[14:11] <Geth> ¦ rakudo/nom: Make cross() and zip() better optimizable

[14:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0633f0370e

[14:11] <IOninja> Seems bindin g an attribute with nqp bypasses the typecheck...

[14:11] <IOninja> m: use nqp; my \x = class Foo { has Code $!default_value }.new; nqp::bindattr(x, Foo, '$!default_value', 42); dd nqp::getattr(x, Foo, '$!default_value')

[14:11] <camelia> rakudo-moar 8c777b: OUTPUT: «42␤»

[14:12] <llfourn> IOninja: I am just modifying tests I added yesterday :)

[14:12] <lizmat> and which I merged  :-)

[14:12] <IOninja> m: use nqp; my \x = class Foo { has Code $!default_value; method wat { dd $!default_value.^name} }.new; nqp::bindattr(x, Foo, '$!default_value', 42); dd nqp::getattr(x, Foo, '$!default_value'); x.wat

[14:12] <camelia> rakudo-moar 8c777b: OUTPUT: «42␤"Int"␤»

[14:12] <IOninja> llfourn: OK

[14:13] <Geth> ¦ rakudo: LLFourn++ created pull request #1034: Fix multiple requires & require clobbering pre-existing pacakges

[14:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1034

[14:15] <llfourn> ^ Oh and there are a few annoying warnings about "Unhandled failure detected in destroy"

[14:15] <llfourn> in the tests but I think they were there before

[14:15] <llfourn> leme check before merging

[14:17] <llfourn> nine: https://github.com/rakudo/rakudo/pull/1034 # This is the best I can do for now

[14:19] <llfourn> I can confirm the annoying "unhandled Failure detected in destroy" warnings were the before fwiw

[14:21] <llfourn> sleep &

[14:22] <lizmat> good night, llfourn

[14:22] <IOninja> removing that parameter $!default_value type check breaks spectest: https://gist.github.com/zoffixznet/e3d9c0a69217218d18a65b9696b03b97

[14:22] <lizmat> m: dd ((42,666).Seq xx *)[^10]   # this feels off

[14:22] <camelia> rakudo-moar 8c777b: OUTPUT: «((42, 666), (42, 666), (42, 666), (42, 666), (42, 666), (42, 666), (42, 666), (42, 666), (42, 666), (42, 666))␤»

[14:23] <IOninja> Because of same Seq iteration?

[14:23] <lizmat> well, I sorta expected (42,666,42,666 etc.)

[14:24] <IOninja> Awhile back, jnthn++ commited a fix to make Seq contants not to exhaust or something...

[14:24] <IOninja> Ah, you need to slip to get that

[14:24] <IOninja> m: dd (|(42,666).Seq xx *)[^10]

[14:24] <camelia> rakudo-moar 8c777b: OUTPUT: «(42, 666, 42, 666, 42, 666, 42, 666, 42, 666)␤»

[14:36] <lizmat> m: dd (-> { $++ ?? 42 !! |() } xx *)[^5]   # also not quite what I was expecting, am I missing something ?

[14:36] <camelia> rakudo-moar 0633f0: OUTPUT: «(->  { #`(Block|56626312) ... }, ->  { #`(Block|56626384) ... }, ->  { #`(Block|56626456) ... }, ->  { #`(Block|56626528) ... }, ->  { #`(Block|56626600) ... })␤»

[14:37] <lizmat> m: dd (-> { Empty } xx *).iterator.pull-one  # shorter

[14:37] <camelia> rakudo-moar 0633f0: OUTPUT: «->  { #`(Block|78067808) ... }␤»

[14:38] <IOninja> makes sense to me...

[14:38] <IOninja> m: dd &say xx 3

[14:38] <camelia> rakudo-moar 0633f0: OUTPUT: «(sub say (| is raw) { #`(Sub|65079208) ... }, sub say (| is raw) { #`(Sub|65079208) ... }, sub say (| is raw) { #`(Sub|65079208) ... })␤»

[14:38] <IOninja> Same as that.

[14:38] <IOninja> m: dd (-> { $++ ?? 42 !! rand.substr: 0, 5 }() xx *)[^5]

[14:38] <camelia> rakudo-moar 0633f0: OUTPUT: «("0.432", "0.094", "0.275", "0.750", "0.465")␤»

[14:40] <lizmat> could it be it codegens a  block into a block?

[14:40] <IOninja> m: my &b =-> { $++ ?? 42 !! rand.substr: 0, 5 }; dd (b() xx *)[^5]

[14:40] <camelia> rakudo-moar 0633f0: OUTPUT: «("0.021", 42, 42, 42, 42)␤»

[14:40] <lizmat> m: dd (-> { rand.substr: 0,5  } xx *)[^5]

[14:40] <camelia> rakudo-moar 0633f0: OUTPUT: «(->  { #`(Block|69520088) ... }, ->  { #`(Block|69520160) ... }, ->  { #`(Block|69520232) ... }, ->  { #`(Block|69520304) ... }, ->  { #`(Block|69520376) ... })␤»

[14:40] <lizmat> m: dd ( rand.substr: 0,5 xx *)[^5]

[14:40] <camelia> rakudo-moar 0633f0: OUTPUT: «Earlier failure:␤ Cannot .elems a lazy list␤  in block <unit> at <tmp> line 1␤␤Final error:␤ Type check failed in assignment to $chars; expected Int but got Failure (Failure.new(exception...)␤  in block <unit> at <tmp> line 1␤␤»

[14:40] <lizmat> m: dd ( rand.substr(0,5) xx *)[^5]

[14:40] <camelia> rakudo-moar 0633f0: OUTPUT: «("0.133", "0.900", "0.078", "0.567", "0.007")␤»

[14:42] <IOninja> It thunks it and each thunk produces a new block that is seen in the output unexecuted. If you execute the block, you get the results, but because each thunk makes a new block the state var doesn't get kept. And if you store the block in a var and executed in `xx`, it thunks and executes the same block so state var is kept. That's my interpretation of it.

[15:00] <lizmat> m: dd (($++ ?? |() !! 42) xx *)[^3]   # this feels wrong

[15:00] <camelia> rakudo-moar 0633f0: OUTPUT: «(42, Nil, Nil)␤»

[15:01] <lizmat> m: dd (($++ ?? 42 !! |()) xx *)[^3]   # this feels wrong

[15:01] <camelia> rakudo-moar 0633f0: OUTPUT: «(Nil, Nil, Nil)␤»

[15:01] <lizmat> an empty slip should not indicate the end

[15:04] <lizmat> or should it ?

[15:07] <IOninja> I may have added that... to prevent @!slipped.shift crashing, but I did not consider the case you show above

[15:07] <IOninja> star: m: dd (($++ ?? 42 !! |()) xx *)[^3]

[15:07] <camelia> star-m 2016.10: OUTPUT: «(Failure.new(exception => X::Cannot::Empty.new(action => "shift", what => "Array"), backtrace => Backtrace.new), 42, 42)␤»

[15:07] <IOninja> Yeah, I did.

[15:08] <IOninja> or did i...

[15:08] <IOninja> bisect: old=2016.10 new=HEAD m: dd (($++ ?? 42 !! |()) xx *)[^3]

[15:08] <bisectable6> IOninja, Bisecting by output (old=2016.10 new=0633f03) because on both starting points the exit code is 0

[15:08] <bisectable6> IOninja, bisect log: https://gist.github.com/137094bde350259bcb8f11cc691679e0

[15:08] <bisectable6> IOninja, (2017-01-22) https://github.com/rakudo/rakudo/commit/4e49ec135dda93676ceb95f4ade7496139c2bef7

[15:08] <lizmat> anyways, supporting this would make things significantly more complicated, so I'm inclined to make it rest as a DIHWIDT

[15:09] <IOninja> m: dd (($++ ?? 42 !! Nil) xx *)[^3]

[15:09] <camelia> rakudo-moar 0633f0: OUTPUT: «(Nil, 42, 42)␤»

[15:09] <IOninja> DIHWIDT to me too...

[15:10] <lizmat> afk&

[15:11] <IOninja> The behaviour is way different in non Whatever version tho:

[15:11] <IOninja> m: dd (($++ ?? 42 !! |()) xx 4)[^4]

[15:11] <camelia> rakudo-moar 0633f0: OUTPUT: «(42, 42, 42, Nil)␤»

[15:12] * IOninja tries something

[15:13] <timotimo> does it change when you iterate the thing differently?

[15:18] <naxieAlDle> m: say ‘ẍ̃’ ~~ m:ignoremark/ x /

[15:18] <camelia> rakudo-moar 0633f0: OUTPUT: «False␤»

[15:18] <naxieAlDle> why not?

[15:21] <naxieAlDle> if I get rid of the combiner, then it's True

[15:21] <naxieAlDle> m: say ‘ẍ’ ~~ m:ignoremark/ x /

[15:21] <camelia> rakudo-moar 0633f0: OUTPUT: «｢ẍ｣␤»

[15:24] <naxieAlDle> m: say ‘=̃’ ~~ m:ignoremark/ x /

[15:24] <camelia> rakudo-moar 0633f0: OUTPUT: «False␤»

[15:26] <naxieAlDle> m: say ‘R̃’ ~~ m:ignoremark/ x /

[15:26] <camelia> rakudo-moar 0633f0: OUTPUT: «False␤»

[15:26] <naxieAlDle> so if it is synthetic, then it's not ignored

[15:32] <IOninja> Well, my trying something didn't work

[15:33] <IOninja> In the concrete case it looks to be eager, so we can process all the empty slips and flatten them, but in the xx * case we try to make a value in a pull-one... so if we try to continue pulling to find somethign that isn't a slip, we'd hang. And we could return a `Nil` or a slip, but that won't match the `xx 4` variant :/

[15:36] <IOninja> like (|() xx *) would hang

[15:53] <IOninja> m: dd (($++ ?? 42 !! |()) xx 9999999999999999999)[^4]

[15:53] <camelia> rakudo-moar 0633f0: OUTPUT: «(Nil, Nil, Nil, Nil)␤»

[15:53] <IOninja> m: dd (($++ ?? 42 !! |()) xx 999)[^4]

[15:53] <camelia> rakudo-moar 0633f0: OUTPUT: «(42, 42, 42, 42)␤»

[15:53] <IOninja> something's busted up somewhere....

[15:53] <timotimo> ugh

[15:53] <timotimo> a problem with big/small ints?

[15:53] <IOninja> likely

[15:53] <lizmat> yeah, I was looking into that because xx needs to return a Seq always

[15:53] <lizmat> please rakudobug, and I'll look at that as well

[15:54] <moritz> bisectable6: say "ﬆ T" ~~ m:i/T/

[15:54] <bisectable6> moritz, Bisecting by output (old=2015.12 new=0633f03) because on both starting points the exit code is 0

[15:54] <bisectable6> moritz, bisect log: https://gist.github.com/7fb433eb30a8a8f6d9f0dd7be9f98f61

[15:54] <bisectable6> moritz, (2017-02-28) https://github.com/rakudo/rakudo/commit/26e6993bd82a23fb701b91aeb3ee832c543a7d95

[15:54] <IOninja> moritz: it's this commit: https://github.com/MoarVM/MoarVM/commit/ab426c147702000cb857cf553c0c062ab7623d9e

[15:57] <IOninja> lizmat: ticketed: https://rt.perl.org/Ticket/Display.html?id=130956#txn-1453059

[16:01] <lizmat> IOninja: thanks

[16:25] <Geth> ¦ rakudo/nom: 9a5401ee17 | (Zoffix Znet)++ | t/05-messages/01-errors.t

[16:25] <Geth> ¦ rakudo/nom: Test chr with huge codepoints throws useful error

[16:25] <Geth> ¦ rakudo/nom:

[16:25] <Geth> ¦ rakudo/nom: RT#130913: https://rt.perl.org/Ticket/Display.html?id=130913

[16:25] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9a5401ee17

[16:25] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130913

[16:25] <Geth> ¦ roast: fbdb818077 | (Zoffix Znet)++ | S29-conversions/ord_and_chr.t

[16:25] <Geth> ¦ roast: Test chr with huge codepoints throws useful error

[16:25] <Geth> ¦ roast:

[16:25] <Geth> ¦ roast: RT#130913: https://rt.perl.org/Ticket/Display.html?id=130913

[16:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/fbdb818077

[16:25] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130913

[17:26] <Geth> ¦ roast: 2af473f7e7 | (Zoffix Znet)++ | S29-conversions/ord_and_chr.t

[17:26] <Geth> ¦ roast: Fix typo; MasterDuke++

[17:26] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2af473f7e7

[17:26] <Geth> ¦ rakudo/nom: 3046d57eef | (Zoffix Znet)++ | t/05-messages/01-errors.t

[17:26] <Geth> ¦ rakudo/nom: Fix typo; MasterDuke++

[17:26] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3046d57eef

[17:39] <jnthn> Hm, the fix for RT

[17:39] <jnthn> Hm, the fix for RT #130919 is a little trickier than I thought...

[17:39] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130919

[17:40] * jnthn will take a break and maybe give it another look later

[17:40] <jnthn> (I've got a fix for it, but it busts something else.)

[20:41] <nine> .tell llfourn Tried to find out where the QAST::WVal(Cat( is coming from, without success :/

[20:41] <yoleaux2> nine: I'll pass your message to llfourn.

[21:01] <Geth> ¦ nqp: 4495083d01 | (Samantha McVey)++ | 2 files

[21:01] <Geth> ¦ nqp: Add eqatic op for MoarVM to allow us to do testing

[21:01] <Geth> ¦ nqp:

[21:01] <Geth> ¦ nqp: Is like eqat except it is case-insensitive.

[21:01] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/4495083d01

[21:02] <lizmat> samcv: is that part of the work wrt to the ligature bug ?

[21:02] <samcv> yeah. the op already existed on the MVM side

[21:02] <lizmat> ah, cool

[21:02] <samcv> so without adding it in nqp can't write tests for it

[21:12] <samcv> just gotta run spectest now then will commit a mostly fixed version. as far as i've tested at least

[21:24] <Geth> ¦ rakudo/nom: 14928630d1 | (Samantha McVey)++ | src/vm/moar/ops/container.c

[21:24] <Geth> ¦ rakudo/nom: [moar] Add braces to avoid dangling else and fix compiler warning

[21:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/14928630d1

[21:32] <lizmat> IOninja:

[21:32] <lizmat> [22:32:16] 	dct (~dct@unaffiliated/dct) left62ffab662b6865a814741913   #

[21:32] <lizmat> https://github.com/rakudo/rakudo/commit/62ffab662b6865a814741913

[21:33] <lizmat> IOninja: Rangeint ^^^

[21:35] <IOninja> Heh :)

[21:35] <IOninja> m: (1..*).is-int.say

[21:35] <camelia> rakudo-moar 149286: OUTPUT: «False␤»

[21:35] <IOninja> lizmat: how come it didn't stick?

[21:36] <lizmat> Not sure anymore  :-)

[21:36] <lizmat> mists of time and GLR happening after that

[21:36] <IOninja> Also ZofBot++ # love this bot!

[22:08] <Geth> ¦ rakudo/nom: 07c5d339d1 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[22:08] <Geth> ¦ rakudo/nom: Make sure OneValueTimes handles pulling after exhausted correctly

[22:08] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/07c5d339d1

[22:08] <Geth> ¦ rakudo/nom: 1eb7b1f796 | (Elizabeth Mattijsen)++ | src/core/List.pm

[22:08] <Geth> ¦ rakudo/nom: Make sure infix:<xx> always returns a Seq

[22:08] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1eb7b1f796

[22:49] <samcv> bisectable6, say so 'ﬆ' ~~ m:i/st/

[22:49] <bisectable6> samcv, Bisecting by output (old=2015.12 new=1eb7b1f) because on both starting points the exit code is 0

[22:49] <bisectable6> samcv, bisect log: https://gist.github.com/cb3a945e048479919871e5c2e1a72efb

[22:49] <bisectable6> samcv, (2017-02-28) https://github.com/rakudo/rakudo/commit/26e6993bd82a23fb701b91aeb3ee832c543a7d95

[22:58] <Geth> ¦ rakudo/nom: 995869857c | (Elizabeth Mattijsen)++ | src/core/List.pm

[22:58] <Geth> ¦ rakudo/nom: Remove the XX-Whatever role

[22:58] <Geth> ¦ rakudo/nom:

[22:58] <Geth> ¦ rakudo/nom: It was only used once anymore, so no need to put it into a role

[22:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/995869857c

[23:02] <Geth> ¦ roast: bafc4b3b3f | (Samantha McVey)++ | S05-substitution/match.t

[23:02] <Geth> ¦ roast: Fix fudging of :i regex

[23:02] <Geth> ¦ roast:

[23:02] <Geth> ¦ roast: Fudging didn't work when it was declared as a subtest with its own plan.

[23:02] <Geth> ¦ roast: It now fudges correctly and no longer gives a false positive when the test is

[23:02] <Geth> ¦ roast: actually not succeeding.

[23:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bafc4b3b3f

[23:03] <samcv> IOninja, for some reason that test you wrote the fudging wasn't working and it said it succeeded even when it did not. i changed it to not be a subtest anymore with the last roast commit

[23:16] <IOninja> samcv, the fudges were working fine. You just need to run prove in verbose to enable full out and there you'd see which tests are todo-ed and which aren'r

[23:16] <IOninja> or with t/fudgeandrun

[23:16] <samcv> oh

[23:17] <samcv> well with my patch all but one of them pass so isn't it better to make it more visible?

[23:17] <samcv> or should i always run with verbose or what?

[23:21] <IOninja> samcv: ¯\_(ツ)_/¯  Neither is visible during normal spectest and were TODOs passing, it'd tell you at teh end (or I hope it does). I use subtests so I don't have to write mile-long test descriptions for each test. For example, with your patch, descriptions of each test are kinda meaningless without the contet the subtest's description added. So the reader would need to go to the ticket and then wade

[23:21] <IOninja> through a handful of replies to figure out what that test is actually testing.

[23:22] <samcv> what options do you run prove with?

[23:22] <samcv> err i mean are we talking about `make spectest` how do i set prove options when running that?

[23:22] <IOninja> I wasn't and my options are `prove -e './perl6' -vlr `; though I just use t/fudgeandrun if I need to run a single test file in verbose mode.

[23:24] <samcv> hmm well it wasn't showing me the test was fudged period when i ran make t/spec/whatever

[23:24] <samcv> so i had no way of knowing that things changed

[23:24] <IOninja> You can run `make -n spectest` to see the command it's running; then stick it into an alias and I think just add --verbose=3 or whatever

[23:24] <samcv> alright

[23:25] <IOninja> Right `make t/spec/whatever` doesn't use verbose mode; t/fudgeandrun t/spec/whatever uses verbose mode

[23:25] * IOninja &

[23:32] <samcv> ack this fix i made to moarvm only works if the letters preceeding the ﬆ are lowercase. this is gonna be annoying to fix this fully

[23:32] <samcv> u: { .fc.chars > 1 }

[23:33] <unicodable6> samcv, U+000A <control-000A> [Cc] (control character)

[23:33] <unicodable6> samcv, U+000B <control-000B> [Cc] (control character)

[23:33] <samcv> thank for unicodable6 :)

[23:33] <samcv> looks like i did that wrong wat

[23:33] <samcv> ah

[23:33] <samcv> unicodable6, { .chr.fc.chars > 1 }

[23:34] <samcv> u: { .chr.fc.chars > 1 }

[23:35] <Geth> ¦ rakudo/nom: b86e6b05e7 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[23:35] <Geth> ¦ rakudo/nom: Introducing R:It.Callable-xx-Whatever

[23:35] <Geth> ¦ rakudo/nom:

[23:35] <Geth> ¦ rakudo/nom: Basically the functionality of 'rand xx *' abstracted, for easier

[23:35] <Geth> ¦ rakudo/nom: usage.

[23:35] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b86e6b05e7

[23:35] <Geth> ¦ rakudo/nom: cb41476247 | (Elizabeth Mattijsen)++ | src/core/List.pm

[23:35] <Geth> ¦ rakudo/nom: Make infix:<xx>(&x, Whatever) use R:It.Callable-xx-Whatever

[23:35] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cb41476247

[23:47] <japhb> Any active regressions since the last release right now?  I'm thinking of upgrading all my machines because of jnthn++'s MoarVM fixes that might clear up some of my flakey failures.

[23:49] <lizmat> japhb: only with regards to matching ligatures in :i mode, I believe

[23:50] <samcv> i'm probably gonna actually write a new mvm function that can do case folding with an offset

[23:50] <samcv> and only case fold x characters down or something

[23:51] <samcv> since atm it casefolds the whole string and then the offset is off because there's more graphemes than before (if the change was before the needle)

[23:51] <japhb> lizmat: OK, thanks.  Pretty sure nothing I'm working with is counting on that, so I'm good.  :-)

[23:51] <samcv> if i do a specific number of characters and with an offset, won't have to have any offset problems,

[23:54] <IOninja> m: class Test::Foo { };  Test::Bar {}; { require Test::Foo; require Test::Bar; }

[23:54] <camelia> rakudo-moar cb4147: OUTPUT: «===SORRY!===␤Lexical 'Test' already declared␤»

[23:54] <IOninja> japhb: ^ that is also broken ATM. And with regexes it's not just ligatures... Any char whose .fc is not 1-char long looks like.

[23:54] <IOninja> I don't recommend upgrading right now...

[23:55] <IOninja> m: ^0x110000 .grep({.chr.fc.chars > 1}).elems.say

[23:55] <camelia> rakudo-moar cb4147: OUTPUT: «80␤»

[23:56] <IOninja> m: ^0x110000 .grep({.chr.fc.chars > 1}).say

[23:56] <camelia> rakudo-moar cb4147: OUTPUT: «(223 329 1415 7834 7838 8064 8065 8066 8067 8068 8069 8070 8071 8072 8073 8074 8075 8076 8077 8078 8079 8080 8081 8082 8083 8084 8085 8086 8087 8088 8089 8090 8091 8092 8093 8094 8095 8096 8097 8098 8099 8100 8101 8102 8103 8104 8105 8106 8107 8108 8109 …»

[23:56] <IOninja> So 80 chars in input has the potential to break your case-insensitive regex match.
