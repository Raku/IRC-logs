[07:18] <yoleaux> AlexDaniel`: RT/GH weekly

[07:19] <AlexDaniel> yoleaux: No!

[07:19] <AlexDaniel> reportable6: list

[07:19] <reportable6> AlexDaniel, https://gist.github.com/877cbb494b57bfaa670d6bbc70bedf1f

[11:56] <lizmat> .

[11:56] <yoleaux> 8 Dec 2017 13:32Z <Zoffix> lizmat: Yeah, my patch changed .count-only to be "how many can you produce". The original semantic of total is kinda pointless isn't it? Unless, I keep track and know for sure the iterator has never been iterated yet, I can't use that method. That's exactly was the reason for the bug in .tail(5).tail; if .count-only doesn't actually indicate the number of elements the iterator will produce, we can't

[11:56] <yoleaux> 8 Dec 2017 13:33Z <Zoffix> lizmat: use it to perform the optimization

[18:56] <lizmat> .ask Zoffix why is the original count-only / bool-only semantic pointless?  e.g. in a case like "if ^10 .Seq { say "foo" }", it wouldn't need to produce anything

[18:56] <yoleaux> lizmat: I'll pass your message to Zoffix.

[19:25] <[TuxCM]> Rakudo version 2017.11-78-g1dbf5f589 - MoarVM version 2017.11-28-gba1fb9542

[19:25] <[TuxCM]> csv-test-xs-20      0.476 -  0.489

[19:25] <[TuxCM]> csv-ip5xs           1.060 -  1.070

[19:25] <[TuxCM]> test-t --race       1.145 -  1.259

[19:25] <[TuxCM]> test-t              2.899 -  2.910

[19:25] <[TuxCM]> test               11.334 - 11.342

[19:25] <[TuxCM]> csv-parser         12.113 - 12.261

[19:25] <[TuxCM]> csv-ip5xs-20       12.594 - 12.664

[19:25] <[TuxCM]> test-t-20 --race   17.775 - 19.738

[19:25] <[TuxCM]> test-t-20          52.040 - 52.097

[19:26] <Zoffix> .

[19:26] <yoleaux> 18:02Z <patrickz> Zoffix: Big thumbs up for the containers advent post. It finally got containers into my head. I really liked that it started *without* containers and thus gave context to containers.

[19:26] <yoleaux> 18:56Z <lizmat> Zoffix: why is the original count-only / bool-only semantic pointless?  e.g. in a case like "if ^10 .Seq { say "foo" }", it wouldn't need to produce anything

[19:26] <Zoffix> lizmat: how will that `if` optimization know that the iterator it's calling .bool-only has never been iterated?

[19:27] <Zoffix> Never been .pull-one'd from or .skip-one, or .skip-at-least, or .push-all. It's mandatory that none of those were ever called for .count-only/.bool-only values to be usable.

[19:28] <Zoffix> Yet, if they were, there's no built-in way to check if they were, so you would get the same .count-only value but there's no guarantee it's accurate.

[19:28] <Zoffix> Whereas with my new semantic, you don't need to care about that detail. You can always call .count-only/.bool-only. Including in your example.

[19:29] <Zoffix> A question for the old semantic is: why is it useful that .count-only stays static? Why is it useful that `if $some-iterable { say "foo" }` would continue to be true, even if it can't pull any more elements?

[19:30] <Zoffix> I mean, other that the obvious: you don't need to keep adjusting it. But why is it useful from the user's end.

[19:46] <Zoffix> c: 2017.11,HEAD if (1, 2, 3, 4, 5, 6).skip(6) { say "w00t" }

[19:46] <committable6> Zoffix, ¦2017.11: «w00t␤» ¦HEAD(1dbf5f5): «»

[19:47] <Zoffix> .tell lizmat here's the example with `if` you showed. It's actually busted due to .count-only not being updated: `c: 2017.11 if (1, 2, 3, 4, 5, 6).skip(6) { say "w00t" }`  There are no elements in the iterable, yet it goes through as True

[19:47] <yoleaux> Zoffix: I'll pass your message to lizmat.

[19:48] <Zoffix> Got a bug on HEAD too though. Eventually .count-only becomes -1

[19:49] <lizmat> .

[19:49] <yoleaux> 19:47Z <Zoffix> lizmat: here's the example with `if` you showed. It's actually busted due to .count-only not being updated: `c: 2017.11 if (1, 2, 3, 4, 5, 6).skip(6) { say "w00t" }`  There are no elements in the iterable, yet it goes through as True

[19:49] <lizmat> not convinced it is the correct solution... investigating now

[19:51] <Zoffix> ¯\_(ツ)_/¯ to me the new semantics seem a clear winner. And we even have 2 separate core bugs to back up the fragility of the old semantics.

[19:53] <Zoffix> and I guess 1 bug to show fragility of new semantics

[19:53] * Zoffix writes test to weed out all the got broken

[19:59] <Zoffix> looks like 4

[20:06] <lizmat> Zoffix: grokking the issue finally... looks like your approach is indeed the best, the alternative would be to have things like .skip return a new Seq with an alternate iterator, which would be wasteful

[20:06] <Zoffix> yeah

[20:29] <jnthn> m: my $a = (^10).iterator; my $b = $a.skip(3); my $c = $a.skip(4); say @(rand > 0.5 ?? $b !! $c)

[20:29] <camelia> rakudo-moar 1dbf5f589: OUTPUT: «No such method 'skip' for invocant of type '<anon|145269328>'. Did you mean any of these?␤    Slip␤    skip␤␤  in block <unit> at <tmp> line 1␤␤»

[20:30] <jnthn> m: my $a = (^10).Seq; my $b = $a.skip(3); my $c = $a.skip(4); say @(rand > 0.5 ?? $b !! $c)

[20:30] <camelia> rakudo-moar 1dbf5f589: OUTPUT: «(7 8 9)␤»

[20:30] <jnthn> ^ bug, while we're at this

[20:31] <jnthn> Surely that should be evaluating to 3..9 or 4..9

[20:31] <jnthn> (expanded of course, just lazy :))

[20:31] <Zoffix> m: my $a = (^10).Seq; my $b = $a.skip(3); my $c = $a.skip(4); say @$a

[20:31] <camelia> rakudo-moar 1dbf5f589: OUTPUT: «(7 8 9)␤»

[20:32] <jnthn> That's even wronger :)

[20:32] <lizmat> ok, so you're saying that .skip should create a new Seq ?

[20:32] <jnthn> Absolutely.

[20:32] <jnthn> All potentially lazy operations should.

[20:32] <jnthn> Otherwise we'll get issues like the above.

[20:32] <Zoffix> This is weird:

[20:32] <Zoffix> m: my $a = (^10).Seq; my $b = $a.skip: 9; say @$a

[20:32] <camelia> rakudo-moar 1dbf5f589: OUTPUT: «(9)␤»

[20:33] <Zoffix> m: (my $a = (^10).Seq).skip: 9; say @$a

[20:33] <camelia> rakudo-moar 1dbf5f589: OUTPUT: «This Seq has already been iterated, and its values consumed␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[20:33] <Zoffix> Ah, .sink-all nevermind

[20:33] <jnthn> Yeah

[20:36] <lizmat> jnthn: but if .skip should create a new Seq, with an iterator that skips N values, you would only be able to do that by cloning the iterator, which would mean you would have to have inside knowledge, or a .clone method on each iterator ?

[20:37] <Zoffix> I would've thought it'd steal the iterator from original Seq

[20:37] <lizmat> yeah, but then you would still have the same issue

[20:37] <Zoffix> So the second .skip would say "Seq already comsued"

[20:38] <lizmat> m:  my $a = (^10).Seq; my $b = $a.skip(3); my $c = $a.skip(4); say @$a   # would not prevent this

[20:38] <camelia> rakudo-moar 1dbf5f589: OUTPUT: «(7 8 9)␤»

[20:38] <Zoffix> No, they'd be no way to have 3 different Seqs all using the same iterator.

[20:38] <Zoffix> ^ that would throw Seq consumed on second .skip call, as well as on @$a

[20:40] <lizmat> then the term "consumed" is incorrect, as it may not have done anything on it

[20:40] <lizmat> "iterator already in use by another Seq" may be more appropriate then

[20:41] <jnthn> method skip($n) { gather { my $i = self.iterator; my $end; for ^$n { if $i.pull-one =:= IterationEnd { $end = True; last; } }; unless $end { until (my \v = $i.pull-one) =:= IterationEnd { take v } } } }

[20:41] <jnthn> skip needn't be implemented like that, but the semantics should be as if it were

[20:42] <Zoffix> m:  my $a = (^10).Seq; my $b = Seq.new($a.iterator).skip(3); say @$a

[20:42] <camelia> rakudo-moar 1dbf5f589: OUTPUT: «This Seq has already been iterated, and its values consumed␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[20:42] <lizmat> well, apart from the fact that we don't create a new Seq, the semantics *are* already that way afaik,

[20:42] <jnthn> That is, by an iterator that, upon the first time it is pull-one'd, does pull-one $n times and then does it passing on values until iteration end

[20:42] <jnthn> So .skip adds an iterator onto the chain

[20:42] <jnthn> And wraps that new iterator in a new Seq

[20:42] <jnthn> Neither can be in place

[20:43] <lizmat> Zoffix: want me to do that, or will you ?

[20:44] <Zoffix> lizmat: you :) I'm still fishing the bugs in .count-only stuff

[20:47] <lizmat> ok, will take care of that then :-)

[20:47] <jnthn> lizmat++ Zoffix++

[20:47] <lizmat> fwiw, I don't think they were bugs, just different semantics ?

[20:49] <Zoffix> m: if (1, 2, 3, 4, 5, 6).skip(6) { say "w00t" }

[20:49] <camelia> rakudo-moar 1dbf5f589: ( no output )

[20:49] <Zoffix> m: if (1, 2, 3, 4, 5, 6).skip(76) { say "w00t" }

[20:49] <camelia> rakudo-moar 1dbf5f589: OUTPUT: «w00t␤»

[20:50] <Zoffix> ^ there ain't no elements but it still skips, 'cause I messed up and the .pull-one that gives IterationEnd puts the counters to -1, which is true

[20:50] <Zoffix> s/still skips/still gives true/;

[20:56] <lizmat> ack

[20:56] <lizmat> brb&

[21:59] <Geth> ¦ rakudo: 0e228fab8a | (Zoffix Znet)++ | 2 files

[21:59] <Geth> ¦ rakudo: Second pass on fixing .count-only/.bool-only issues

[21:59] <Geth> ¦ rakudo:

[21:59] <Geth> ¦ rakudo: - Fixes .count-only not updating in Hash.kv iterator

[21:59] <Geth> ¦ rakudo: - Fixes .count-only/.bool-only returning wrong values when

[21:59] <Geth> ¦ rakudo:     the last .pull-one (the one that gives IterationEnd) is called

[21:59] <Geth> ¦ rakudo:

[22:00] <Geth> ¦ rakudo: First pass was done in:

[22:00] <Geth> ¦ rakudo: https://github.com/rakudo/rakudo/commit/af9812fa73292723871

[22:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0e228fab8a

[22:02] <Geth> ¦ roast: 81fdf3f237 | (Zoffix Znet)++ | MISC/bug-coverage.t

[22:02] <Geth> ¦ roast: Improve .count-only/.bool-only tests

[22:02] <Geth> ¦ roast:

[22:02] <Geth> ¦ roast: - Reduce code by dynamically generating iterators to test

[22:02] <Geth> ¦ roast: - Add extra tests for .count-only, for value given after

[22:02] <Geth> ¦ roast:     IterationEnd-producing .pull-one is called

[22:02] <Geth> ¦ roast: - Separate .bool-only tests into a separate run and test the values

[22:02] <Geth> ¦ roast:     produced during iteration as well as after IterationEnd was

[22:02] <Geth> ¦ roast:     produced.

[22:02] <Geth> ¦ roast:

[22:02] <Geth> ¦ roast: Rakudo fix covered by new tests:

[22:02] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/0e228fab8a

[22:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/81fdf3f237

[22:48] <Geth> ¦ rakudo: 854c10c27e | (Elizabeth Mattijsen)++ | src/core/Seq.pm

[22:48] <Geth> ¦ rakudo: Make sure each Seq.skip gets a new Seq

[22:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/854c10c27e
