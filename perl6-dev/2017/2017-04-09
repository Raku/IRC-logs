[00:56] <Zoffix> hm... got an email from Adobe, saying my account has been removed from my $work's subscription.

[00:56] * Zoffix wonders if he's getting fired Tuesday...

[01:06] <Zoffix> I guess not, since 8 hours after that email, my boss emailed me asking to do stuff :)

[01:07] <Zoffix> ZofBot: damn Adobe!

[01:07] <ZofBot> Zoffix, grammar A feature of Perl 6 that uses "regex"es to implement a grammar for parsing text

[01:18] <BenGoldberg> ZofBot, how do you respond so much more quickly than GumbyBrain?

[01:18] <ZofBot> BenGoldberg, However, the syntax of this part of the table is still somewhat privileged, insofar as the "~~" operator is one of the few operators in Perl that does not use multiple dispatch

[01:20] <BenGoldberg> Hmm, I suppose it's not stringing tokens together semi-randomly, but using whole lines of text from somewhere.

[01:24] <Zoffix> No, it uses Text::Markov stuff

[01:24] <Zoffix> Gumby's just dumb.

[01:33] <BenGoldberg> Well, Zoffix++ for making Zoffix so fast :)

[01:33] <BenGoldberg> Oops, stupid tab completion.

[01:33] <BenGoldberg> Well, Zoffix++ for making ZofBot so fast :)

[03:21] <samcv> ZofBot, are you trapped inside the computer and cannot escape?

[03:21] <ZofBot> samcv, You still must declare your subroutines, but a bareword with an unrecognized name is provisionally compiled as a subroutine call, on the assumption that such a declaration will occur by the end of the current compilation unit: foo; # provisional call if neither &foo

[03:47] <samcv> NeuralAnomaly, status

[03:47] <NeuralAnomaly> samcv, [✘] Next release will be in 1 hour and 6 days. Since last release, there are 21 new still-open tickets (11 unreviewed and 0 blockers) and 199 unreviewed commits. See http://perl6.fail/release/stats for details

[03:48] <samcv> k 6 days. that's fine

[05:23] <Geth> ¦ nqp: dd172650ad | (Samantha McVey)++ | t/nqp/107-index.t

[05:23] <Geth> ¦ nqp: stash

[05:23] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/dd172650ad

[05:23] <Geth> ¦ nqp: a1a73721cf | (Samantha McVey)++ | t/nqp/107-index.t

[05:23] <Geth> ¦ nqp: Many more index tests, also test Unicode strings as well

[05:23] <Geth> ¦ nqp:

[05:23] <Geth> ¦ nqp: Tests many more cases, as well as testing for failures as well.

[05:23] <Geth> ¦ nqp: Has Unicode strings so will be able to make sure they cannot be stored

[05:23] <Geth> ¦ nqp: in 8bits, to get better test coverage.

[05:23] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a1a73721cf

[08:18] <Geth> ¦ nqp: 34b7c6981e | (Samantha McVey)++ | t/nqp/107-index.t

[08:18] <Geth> ¦ nqp: Add more index tests, to test no false positives across 32 bit numbers

[08:18] <Geth> ¦ nqp:

[08:18] <Geth> ¦ nqp: It is possible that codepoints can exist inside other 32 bit codepoints, across

[08:18] <Geth> ¦ nqp: their boundaries. These tests are intended to make sure that nqp::index

[08:18] <Geth> ¦ nqp: does not improperly find codepoints, in this case a null codepoint, that exist

[08:18] <Geth> ¦ nqp: across boundaries.

[08:18] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/34b7c6981e

[08:33] <Geth> ¦ nqp: cfd1b9a480 | (Samantha McVey)++ | tools/build/MOAR_REVISION

[08:33] <Geth> ¦ nqp: Bump Moar nqp::index Knuth-Morris-Pratt/Crochemore-Perrin two-way 2x speed

[08:33] <Geth> ¦ nqp:

[08:33] <Geth> ¦ nqp: Uses Knuth-Morris-Pratt string search algorithm on Linux. On Windows and

[08:33] <Geth> ¦ nqp: MacOS, uses Crochemore-Perrin two-way string matching. About 2x improvement in

[08:33] <Geth> ¦ nqp: speed of literal regex.

[08:33] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cfd1b9a480

[08:33] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.03-98-g9653dc6...2017.03-115-ge8231a30

[08:53] <Geth> ¦ rakudo/nom: f1fc87950b | (Samantha McVey)++ | tools/build/NQP_REVISION

[08:53] <Geth> ¦ rakudo/nom: Bump Moar nqp::index Knuth-Morris-Pratt/Crochemore-Perrin two-way 2x speed

[08:53] <Geth> ¦ rakudo/nom:

[08:53] <Geth> ¦ rakudo/nom: Uses Knuth-Morris-Pratt string search algorithm on Linux. On Windows and

[08:53] <Geth> ¦ rakudo/nom: MacOS, uses Crochemore-Perrin two-way string matching. About 2x improvement in

[08:53] <Geth> ¦ rakudo/nom: speed of literal regex. This is a change to only the nqp::index string op

[08:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f1fc87950b

[08:53] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.03-54-gfa72a73...2017.03-59-gcfd1b9a4

[09:31] <[Tux]> This is Rakudo version 2017.03-197-gf1fc87950 built on MoarVM version 2017.03-115-ge8231a30

[09:31] <[Tux]> csv-ip5xs        3.596

[09:31] <[Tux]> test            13.364

[09:31] <[Tux]> test-t           5.110 - 5.376

[09:31] <[Tux]> csv-parser      13.585

[09:57] <samcv> i think i really need sleep

[10:08] <llfourn> samcv: I think you've earned it :)

[10:08] <lizmat> Files=1186, Tests=56521, 199 wallclock secs (11.97 usr  4.53 sys + 1182.79 cusr 117.22 csys = 1316.51 CPU)

[10:08] <lizmat> fetching now

[10:09] <lizmat> afk&

[11:46] <Geth> ¦ rakudo/nom: 1471527cac | (Elizabeth Mattijsen)++ | 4 files

[11:46] <Geth> ¦ rakudo/nom: Make Setty use a use IterationSet instead of Hash

[11:46] <Geth> ¦ rakudo/nom:

[11:46] <Geth> ¦ rakudo/nom: Instead of having a Hash internally, with an IterationSet at its core,

[11:46] <Geth> ¦ rakudo/nom: now we use the IterationSet directly.  This should save one object creation

[11:46] <Geth> ¦ rakudo/nom: per Setty.  For those cases where we (still) need a Hash, e.g. for easy

[11:46] <Geth> ¦ rakudo/nom: iteration, an internal .hll_hash method is provided for now.

[11:46] <Geth> ¦ rakudo/nom:

[11:46] <Geth> ¦ rakudo/nom: Makes creation of a Set about 3% faster (based on a 50 element Set).

[11:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1471527cac

[11:46] <lizmat> afk again&

[12:41] <Zoffix> m: IO::Path::Win32.new("//x/y/").basename.say

[12:41] <camelia> rakudo-moar 147152: OUTPUT: «\␤»

[12:41] <Zoffix> m: IO::Path::Win32.new("//x/y/z/").basename.say

[12:41] <camelia> rakudo-moar 147152: OUTPUT: «z␤»

[12:41] <Zoffix> Is that normal? :/

[12:42] <Zoffix> There's explicit test testing that

[12:42] <Zoffix> testing the first one I mean

[12:54] * Zoffix looks at AST

[12:54] <Zoffix> So ternaries compile to nqp::if()? Cool.

[13:30] <Zoffix> ZOFVM: Files=1235, Tests=133496, 111 wallclock secs (21.37 usr  3.28 sys + 2325.00 cusr 140.19 csys = 2489.84 CPU)

[13:30] <Zoffix> shaved off like 4s since last night

[13:37] <Zoffix> ZOF6VM: Files=1235, Tests=133496,  224 wallclock secs

[13:54] <Geth> ¦ rakudo/nom: a0b82edec6 | (Zoffix Znet)++ | src/core/IO/Path.pm

[13:54] <Geth> ¦ rakudo/nom: [io grant] Make IO::Path::* actually instantiate a subclass

[13:54] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a0b82edec6

[13:55] <Geth> ¦ roast: bd8d167182 | (Zoffix Znet)++ | S32-io/io-path-subclasses.t

[13:55] <Geth> ¦ roast: [io grant] Test IO::Path::* instantiate a subclass

[13:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bd8d167182

[13:55] <Geth> ¦ rakudo/nom: cc209fe744 | (Zoffix Znet)++ | t/spectest.data

[13:55] <Geth> ¦ rakudo/nom: Add S32-io/io-path-subclasses.t to list of test files to run

[13:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cc209fe744

[14:02] <Zoffix> <Zoffix> Is that normal? :/

[14:02] <Zoffix> Yeah, I think it is... It's the root path of a share...

[14:19] <Geth> ¦ roast: d8707e7811 | (Zoffix Znet)++ | S32-io/io-spec-unix.t

[14:19] <Geth> ¦ roast: [io grant] Cover IO::Spec::Unix.basename

[14:19] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d8707e7811

[14:31] <Geth> ¦ roast: c7a2717be9 | (Zoffix Znet)++ | S32-io/io-spec-win.t

[14:31] <Geth> ¦ roast: Remove trailing whitespace

[14:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c7a2717be9

[14:31] <Geth> ¦ roast: cd62ff2a1f | (Zoffix Znet)++ | S32-io/io-spec-win.t

[14:31] <Geth> ¦ roast: Fix broken skippage

[14:31] <Geth> ¦ roast:

[14:31] <Geth> ¦ roast: skip-rest skips any extra tests added to the file; use skip() instead

[14:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cd62ff2a1f

[14:32] <Geth> ¦ roast: c3c51ede03 | (Zoffix Znet)++ | S32-io/io-spec-win.t

[14:32] <Geth> ¦ roast: [io grant] Cover IO::Spec::Win32.basename

[14:32] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c3c51ede03

[15:56] <Zoffix> Is there something special about cygwin that IO::Spec::Cygwin.canonpath does not implement or test the `:parent` param that's implemented in all the other .canonpaths?

[16:00] <Zoffix> m: IO::Spec::Cygwin.canonpath(｢C:\foo\\..\bar\..\ber｣).say

[16:00] <camelia> rakudo-moar cc209f: OUTPUT: «C:/foo/../bar/../ber␤»

[16:00] * Zoffix wonders if that's right...

[16:00] <Zoffix> Well, just one way to find out!

[16:02] <Zoffix> heh, its installer is so... nerdy

[16:04] <Zoffix> And the answer is yes: it's right

[16:04] <Zoffix> And I'm adding :$parent

[16:05] <Zoffix> Or am I...

[16:05] <Zoffix> $ cd //../

[16:05] <Zoffix> -bash: $'\302\203\302\203cd': command not found

[16:06] <timotimo> fantastic %)

[16:06] <timotimo> hw did you enter that?

[16:07] <Zoffix> Just typed it in cygwin

[16:08] <timotimo> hm, time to hit the irclog

[16:08] <timotimo> nope, can't see what that is there either

[16:09] <geekosaur> I see two [00/83] glyphs

[16:09] <Geth> ¦ rakudo/nom: 0c8bef5a1e | (Zoffix Znet)++ | src/core/IO/Spec/Cygwin.pm

[16:09] <Geth> ¦ rakudo/nom: [io grant] Implement :parent in IO::Spec::Cygwin.canonpath

[16:09] <Geth> ¦ rakudo/nom:

[16:09] <Geth> ¦ rakudo/nom: The arg is taken by all the other *Spec*s; I suspect its omission in

[16:09] <Geth> ¦ rakudo/nom: Cygwin was unintentional.

[16:09] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0c8bef5a1e

[16:10] <Zoffix> I just see slashes and numbers: http://i.imgur.com/mV6xCEf.png

[16:10] <Geth> ¦ nqp/master: 4 commits pushed by (Pawel Murias)++

[16:10] <Geth> ¦ nqp/master: 50818fd9d9 | Remove is definition from test

[16:10] <Geth> ¦ nqp/master: 7eda701243 | [js] Refactor redo/last/next handling

[16:10] <Geth> ¦ nqp/master: 1bcb8a545f | Test using next with labels from inside closures.

[16:10] <Geth> ¦ nqp/master: 829346745e | Test next and last inside for

[16:10] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/cfd1b9a480...829346745e

[16:10] <timotimo> no, i mean before the cd

[16:10] <timotimo> in your command

[16:10] <timotimo> there's what looks like spaces in my irc client, and boxes in the irclog

[16:11] <Zoffix> No idea. ANSI colours or something: http://i.imgur.com/uJDxeQF.png

[16:12] <Zoffix> u: 

[16:12] <unicodable6> Zoffix, U+0083 <control-0083> [Cc] (control character)

[16:12] <unicodable6> Zoffix, U+0083 <control-0083> [Cc] (control character)

[16:13] <AlexDaniel> .u 

[16:13] <yoleaux> U+0083 NO BREAK HERE [Cc] (<control>)

[16:16] <Zoffix> Ohhh

[16:16] <Zoffix> cd //../ works fine. I just had some crap before it

[16:16] <Zoffix> No idea how it got there.

[16:16] <timotimo> you had crap before your "cd"

[16:16] <timotimo> not before //../

[16:16] <timotimo> oh, i think you wrote that

[16:16] <geekosaur> ^

[16:16] <Zoffix> Yeah, I just realized that

[16:17] <geekosaur> also what bash told you, albeit with the utf8 of the crap

[16:21] <Geth> ¦ roast: 896033afe3 | (Zoffix Znet)++ | S32-io/io-spec-qnx.t

[16:21] <Geth> ¦ roast: [io grant] Cover IO::Spec::QNX.canonpath

[16:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/896033afe3

[16:21] <Geth> ¦ rakudo/nom: f6be7132b3 | (Zoffix Znet)++ | t/spectest.data

[16:21] <Geth> ¦ rakudo/nom: Add S32-io/io-spec-qnx.t to list of files to run

[16:21] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f6be7132b3

[16:22] <Geth> ¦ roast: 7b96553370 | (Zoffix Znet)++ | S32-io/io-spec-cygwin.t

[16:22] <Geth> ¦ roast: Remove trailing whitespace

[16:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7b96553370

[16:22] <Geth> ¦ roast: 7c7fbb4a83 | (Zoffix Znet)++ | S32-io/io-spec-cygwin.t

[16:22] <Geth> ¦ roast: [io grant] Cover :parent arg in IO::Spec::Cygwin.canonpath

[16:22] <Geth> ¦ roast:

[16:22] <Geth> ¦ roast: Rakudo impl: https://github.com/rakudo/rakudo/commit/0c8bef5a1e

[16:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7c7fbb4a83

[16:32] <Geth> ¦ rakudo/nom: 0a442ce4b1 | (Zoffix Znet)++ | src/core/IO/Spec/Cygwin.pm

[16:32] <Geth> ¦ rakudo/nom: [io grant] Remove type constraint in IO::Spec::Cygwin.canonpath

[16:32] <Geth> ¦ rakudo/nom:

[16:32] <Geth> ¦ rakudo/nom: To align its interface with all the other ::Spe::*.canonpaths

[16:32] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0a442ce4b1

[16:48] <Zoffix> t/spec/S11-modules/nested.t flopped

[16:49] <Geth> ¦ rakudo/nom: b4358af00b | (Zoffix Znet)++ | src/core/IO/Spec/Win32.pm

[16:49] <Geth> ¦ rakudo/nom: [io grant] Delete code for IO::Spec::Win32.catfile

[16:49] <Geth> ¦ rakudo/nom:

[16:49] <Geth> ¦ rakudo/nom: The same implementation is already inherited from IO::Spec::Unix

[16:49] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b4358af00b

[16:49] <Zoffix> It's kinda amusing that our IO::Spec::Win32 is IO::Spec::Unix :)

[17:03] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1058: Fix Bags to allow values larger than a native int

[17:03] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1058

[17:05] <Geth> ¦ rakudo/nom: 13ff0dfd4e | (Daniel Green)++ | src/core/Baggy.pm

[17:05] <Geth> ¦ rakudo/nom: Fix Bags to allow values larger than a native int

[17:05] <Geth> ¦ rakudo/nom:

[17:05] <Geth> ¦ rakudo/nom: I believe this broke in e7e97c7b.

[17:05] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/13ff0dfd4e

[17:05] <Geth> ¦ rakudo/nom: 2ddfa26c2d | (Zoffix Znet)++ | src/core/Baggy.pm

[17:05] <Geth> ¦ rakudo/nom: Merge pull request #1058 from MasterDuke17/fix_creating_a_Bag_with_value_greater_than_an_int

[17:05] <Geth> ¦ rakudo/nom:

[17:05] <Geth> ¦ rakudo/nom: Fix Bags to allow values larger than a native int

[17:05] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2ddfa26c2d

[17:25] <Zoffix> My Calc file tells me I'm throgh 30% through finishing all the changes to IO routines...

[17:25] * Zoffix calls it a day for today

[17:36] <Zoffix> You know how many companies rebrand their products and use the new brand to target another group? Like, if you hate how careless Rogers is with their customers, you can always go to Fido, which is hip and cool... and is still totally owned by Rogers?

[17:37] <Zoffix> I'm thinking of instead of going with Perl 6 VIP, to rebrand it. Downlplay the Perl brand entirely.

[17:37] <Zoffix> So it reaches the audience that knee-jerks on word "Perl"

[17:40] <Zoffix> Well, I guess I already regged Perl6.VIP domain heh

[17:40] * Zoffix puts rebranding on a back burner

[17:41] <Zoffix> Just releasing the same thing under different name isn't going far enough

[17:42] <Zoffix> "Six" as a language name :P

[17:43] <robertle> you could just cripple rakudo slightly, so that people have less choice to express themselves. that plus rebranding should do the trick

[17:43] <Zoffix> heh

[17:58] <timotimo> force them to indent exactly like you would in python

[18:06] <samcv> don't give anybody any ideas :(((((

[18:22] <ugexe> i recently heard it looks too much like perl 5 as a reason to not jump on the perl 6 bandwagon. so looking different would capture that audience

[18:24] <Geth> ¦ roast: 4c360a3d5a | usev6++ | S11-modules/require.t

[18:24] <Geth> ¦ roast: [JVM] Skip test that seems to bork eval-server

[18:24] <Geth> ¦ roast:

[18:24] <Geth> ¦ roast: Running this tests leads to failures 'Parse errors: No plan found in TAP output'

[18:24] <Geth> ¦ roast: in all following test files during spectest. Skip test for now.

[18:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4c360a3d5a

[19:18] <masak> I'll be boring and say that "capturing an audience" isn't (and shouldn't be) a big priority at this point ;)

[19:19] <masak> I'd settle for Perl 6 and Rakudo being solid works of engineering with compelling reasons to use them

[19:20] <ugexe> i was happy to hear we had reached bandwagon status

[19:20] <lizmat> masak: by that reasoning, we shouldn't have had a release and would have no books being written at the moment

[19:21] <samcv> we could... crazy idea. give away perl 6 for free! then everybody will use it! /s

[19:21] <lizmat> remember VHS vs Betamax vs Video2000

[19:22] <timotimo> .o( laser disc )

[19:22] <lizmat> I guess everybody knows that Betamax was superior to VHS

[19:22] <samcv> laserdisc tho

[19:22] <lizmat> hardly anybody knows that Video2000 was superior to Betamax still

[19:22] <timotimo> i haven't heard of video2000 yet, is it like jpeg2000?

[19:22] <samcv> i guess it was in europe

[19:22] <samcv> south africa and argentina says the wiki. i'd never heard of it before

[19:23] <samcv> since i'm from US

[19:23] <lizmat> https://en.wikipedia.org/wiki/Video_2000

[19:23] <lizmat> "Video 2000 was an entirely new (and incompatible) format that incorporated many technical innovations"

[19:23] <lizmat> I don't want Perl 6 to be the Video2000 of the programming languages

[19:35] <Geth> ¦ roast: 239f25dfb7 | (David Warring)++ | S12-attributes/native.t

[19:35] <Geth> ¦ roast: add tests for #131122

[19:35] <Geth> ¦ roast:

[19:35] <Geth> ¦ roast: handling of large values in unsigned integer attributes

[19:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/239f25dfb7

[19:35] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131122

[19:38] <samcv> lizmat, well people are still working on it after all this time. so that much is good.

[19:39] <lizmat> indeed!   and new people keep coming in as well  :-)

[19:39] <timotimo> they are all delusional!

[19:42] <lizmat> timotimo: don't be so positive  :-)

[19:43] <Zoffix_> masak, it doesn't have to be a priority to still get done.

[19:43] <Zoffix_> masak, if marketing was so useless, corporation wouldn't spend trillion on it.

[19:44] <Zoffix_> ns

[19:44] <samcv> if we had a trillion dollars to spend on marketing

[19:45] <samcv> also i still want my camelia sticker ;_;

[19:45] <samcv> i still don't have one

[19:45] <Zoffix_> And there's a juicy segment of (a) people who just think Perl died out; and (b) people who hated Perl 5 and don't want anything to do with another-language-that's-got-Perl-in-the-name

[19:45] <samcv> Zoffix_, prove them wrong somehow?

[19:49] <masak> lizmat, Zoffix_: you're both right, of course

[19:50] <Zoffix_> samcv, nothing needs proving. People want to use a great language. We have it. If there's a segment of people for whom the name alone is a barrier, the solution is fairly simple. Just like Fido has a bunch of customers who are ex-Rogers customers who left due to shitty customer service. People who like Rogers use Rogers. People who hate Rogers and want nothing to do with it, use Fido. Which is still Rogers.

[19:50] <samcv> if they don't like perl... they can just use rakudo instead :)

[19:50] <masak> maybe I should have phrased that differently -- marketing/PR has its place, but I don't believe at this point that changing names around will cause wondrous results

[19:50] <Zoffix_> Same here: people who like Perl 6 use it. People who are ex-Perl users (or who heard about it through the haters) can use SixLang :)

[19:51] <masak> I *do* believe that excelling technically might make a difference

[19:51] <Zoffix_> masak, I didn't say anything about changing names.

[19:51] <Zoffix_> I specifically said release a new product without Perl in its branding.

[19:51] <masak> ah; I misinterpreted that as being about names

[19:51] <Zoffix_> Anyway. It was mostly thinking aloud :)

[19:52] <samcv> also. Zoffix_ how do you feel about appimages

[19:52] <samcv> binaries people can dl and run with no install

[19:53] <samcv> i think that would be nice for people to try it out easier. reduce barrier to entry. if they like it they may keep going but gets them in the door maybe?

[19:53] <Geth> ¦ rakudo/nom: 8bf67298c7 | (Elizabeth Mattijsen)++ | 8 files

[19:53] <Geth> ¦ rakudo/nom: Move sorting logic from R:I to Rakudo::Sorting

[19:53] <Geth> ¦ rakudo/nom:

[19:53] <Geth> ¦ rakudo/nom: This is just about moving code to a separate file, for two reasons:

[19:53] <Geth> ¦ rakudo/nom: - to reduce size of Rakudo::Internals source file

[19:53] <Geth> ¦ rakudo/nom: - to not make Rakudo::Internals any larger still with the coming commits

[19:53] <Geth> ¦ rakudo/nom:

[19:53] <Geth> ¦ rakudo/nom: This needs a re-configure of your build since a file was added.

[19:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8bf67298c7

[19:54] <Zoffix_> And robertle's mention about making stuff more restrictive... It's not necessarily a crazy idea. Could be a neat experiment to make Slang::Restricted that restricts code to work only in One True Way.

[19:55] <Zoffix_> Fewer docs. Fewer things users need to know. Perl 6 Lite, if you will. Except branded without Perl in the name :)

[19:55] <Zoffix_> Call it... Python 6

[19:55] <Zoffix_> ^_^

[19:55] <samcv> hehehe

[19:56] <samcv> pythonistas indent when they breathe

[19:56] <samcv> ok that's an exagaration

[19:56] <samcv> or not.

[19:56] <timotimo> * i move away from the mic when i indent

[19:57] <samcv> yes

[19:57] <samcv> hehe

[19:57] <samcv> stop reading my thoughts!

[19:58] <samcv> i think i'm going to compile rakudo star since i have done it exactly 0 times in my life

[19:58] <samcv> since that's what we'd want to put in an AppImage/Flatpak/whatever

[19:58] <timotimo> Tay Zonday was a cool dude, i wonder what he's up to now

[19:58] <samcv> problem being that you can't move perl 6. which is the main issue

[20:00] <moritz> Zoffix_: I've had ideas for a Perl 6 lite before. Things I would remove: automatic flattening, default *% in methods, having soooo many methods in Mu/Any

[20:00] <Zoffix_> moritz, automatic flattening where?

[20:01] <moritz> Zoffix_: I keep forgetting where it still happens; maybe in slurpies?

[20:02] <Zoffix_> moritz, you can use + slurpy to avoid the flattening

[20:02] <Zoffix_> m: sub flat-cat (+cat) { dd cat }(['my', ['cat', 'is', ['flat',])

[20:02] <camelia> rakudo-moar 2ddfa2: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in array composer; couldn't find final ']' ␤at <tmp>:1␤------> 3 dd cat }(['my', ['cat', 'is', ['flat',]7⏏5)␤    expecting any of:␤        statement end␤        s…»

[20:02] <Zoffix_> m: sub flat-cat (+cat) { dd cat }(['my', ['cat', 'is', ['flat',]])

[20:02] <camelia> rakudo-moar 2ddfa2: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in array composer; couldn't find final ']' ␤at <tmp>:1␤------> 3dd cat }(['my', ['cat', 'is', ['flat',]]7⏏5)␤    expecting any of:␤        statement end␤        s…»

[20:02] <Zoffix_> m: sub flat-cat (+cat) { dd cat }(['my', ['cat', 'is', ['flat',]]])

[20:02] <camelia> rakudo-moar 2ddfa2: OUTPUT: «("my", $["cat", "is", ["flat"]])␤»

[20:03] <Zoffix_> m: sub flat-cat (*cat) { dd cat }(['my', ['cat', 'is', ['flat',]]])

[20:03] <camelia> rakudo-moar 2ddfa2: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing block␤at <tmp>:1␤------> 3sub flat-cat (*7⏏5cat) { dd cat }(['my', ['cat', 'is', ['f␤»

[20:03] <Zoffix_> m: sub flat-cat (*@cat) { dd @cat }(['my', ['cat', 'is', ['flat',]]])

[20:03] <camelia> rakudo-moar 2ddfa2: OUTPUT: «["my", ["cat", "is", ["flat"]]]␤»

[20:03] <Zoffix_> m: sub flat-cat (*@cat) { dd @cat }(('my', ('cat', 'is', ('flat',))))

[20:03] <camelia> rakudo-moar 2ddfa2: OUTPUT: «["my", "cat", "is", "flat"]␤»

[20:03] <Zoffix_> m: sub flat-cat (+@cat) { dd @cat }(('my', ('cat', 'is', ('flat',))))

[20:03] <camelia> rakudo-moar 2ddfa2: OUTPUT: «["my", ("cat", "is", ("flat",))]␤»

[20:03] <samcv> please no flatten the cat

[20:03] <timotimo> also don't take the fourier transform of your cat

[20:03] <moritz> m: my @a = 1, 2, (3, 4); say @a.perl

[20:03] <camelia> rakudo-moar 2ddfa2: OUTPUT: «[1, 2, (3, 4)]␤»

[20:04] <geekosaur> martian flat cats?

[20:05] <timotimo> moritz: the GLR removed so much auto-flattening

[20:06] <timotimo> maybe you didn't spend as much time writing perl6 code since then? :S

[20:06] <moritz> timotimo: I know. I guess I just do too little p6 code... exactly

[20:50] <Geth> ¦ rakudo/nom: 5cc5050139 | (Elizabeth Mattijsen)++ | 3 files

[20:50] <Geth> ¦ rakudo/nom: Abstract native array .sort into R:Sorting

[20:50] <Geth> ¦ rakudo/nom:

[20:50] <Geth> ¦ rakudo/nom: - so we can use this capability inside the setting

[20:50] <Geth> ¦ rakudo/nom: - also have it use the given list as a work buffer

[20:50] <Geth> ¦ rakudo/nom: - so we don't need to clone if the list is discardable anyway

[20:50] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5cc5050139

[20:53] <Geth> ¦ rakudo/nom: 0abf144476 | (Elizabeth Mattijsen)++ | src/core/QuantHash.pm

[20:53] <Geth> ¦ rakudo/nom: Add QuantHash.raw_keys

[20:53] <Geth> ¦ rakudo/nom:

[20:53] <Geth> ¦ rakudo/nom: Returns a list_s of the keys of a QuantHash.  Handy for things like

[20:53] <Geth> ¦ rakudo/nom: .WHICH creation (for Set), or things like .pick/.roll.

[20:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0abf144476

[20:55] <Geth> ¦ rakudo/nom: 167a0edf62 | (Elizabeth Mattijsen)++ | src/core/Set.pm

[20:55] <Geth> ¦ rakudo/nom: Make Set.WHICH about 8x faster for 50 elem Sets

[20:55] <Geth> ¦ rakudo/nom:

[20:55] <Geth> ¦ rakudo/nom: - use new .raw_keys and R:S.MERGESORT-str to create sorted list of keys

[20:55] <Geth> ¦ rakudo/nom: - use nqp::join/nqp::sha1 to create a fingerprint

[20:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/167a0edf62

[20:58] <Geth> ¦ roast: 13a31f6639 | (Elizabeth Mattijsen)++ | integration/advent2013-day07.t

[20:58] <Geth> ¦ roast: Make bogus .WHICH test less bogus

[20:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/13a31f6639

[21:00] <Geth> ¦ roast: 03e5a51204 | (Elizabeth Mattijsen)++ | S02-types/set.t

[21:00] <Geth> ¦ roast: Unfudge now passing test

[21:00] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/03e5a51204

[21:40] <Geth> ¦ rakudo/nom: 6c9f31bb0d | (Elizabeth Mattijsen)++ | src/core/Setty.pm

[21:40] <Geth> ¦ rakudo/nom: Make Setty.pick/SetHash.(grab|grabpairs) 4x faster

[21:40] <Geth> ¦ rakudo/nom:

[21:40] <Geth> ¦ rakudo/nom: - for a 100 element Setty

[21:40] <Geth> ¦ rakudo/nom: - uses new raw_keys functionality

[21:40] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6c9f31bb0d

[21:43] <lizmat> and that concludes my hacking for today

[21:44] <lizmat> good night, #perl6-dev!

[21:44] <timotimo> good night!

[22:13] <Geth> ¦ roast: 39cff7b676 | MasterDuke17++ | S02-types/bag.t

[22:13] <Geth> ¦ roast: Test Bags can have value larger than a native int

[22:13] <Geth> ¦ roast:

[22:13] <Geth> ¦ roast: This was accidentally broken in rakudo commit e7e97c7 and then fixed in

[22:13] <Geth> ¦ roast: rakudo commit 13ff0df.

[22:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/39cff7b676

[22:29] <AlexDaniel> m: say ‘äa’ ~~ /:ignoremark [ .<same>. ]/

[22:29] <camelia> rakudo-moar 6c9f31: OUTPUT: «Nil␤»

[22:31] * AlexDaniel shrugs
