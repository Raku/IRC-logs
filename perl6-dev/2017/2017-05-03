[00:33] * Zoffix chuckles at latest email on Toronto Perl Mongers mailing list

[00:33] <Zoffix> It starts with "I've got an old, bad program running under Perl 5.6.1..."

[00:33] <Zoffix> ZofBot: I didn't even know they made Perl that old!

[00:33] <ZofBot> Zoffix, subname; method is-hidden () {

[00:35] <timotimo> Zoffix: that explains why you didn't know about perl that old.

[00:35] <timotimo> because is hidden.

[00:39] <geekosaur> they would like to bury perl 5.6, yes >.>

[00:43] <timotimo> i wonder when the first perl6 compiler release to drop 6.c should be

[00:45] * Zoffix thinks 6.c+6.d, 6.d+6.e, 6.d+6.e+6.f and so on in 3-version bunches

[00:47] <timotimo> i was thinking more along the lines of "30 years"

[00:48] <BenGoldberg> What's the c stand for, anyway?

[00:49] <timotimo> "christmas", or "after beta"

[00:50] <timotimo> a was advent, b was birthday

[00:50] <AlexDaniel> c stands for “a bit unready but still good enough”

[00:53] <AlexDaniel> m: my @a= <a b c>; @a.pop, @a[3] = ‘hi’; say @a

[00:53] <camelia> rakudo-moar 701dab: OUTPUT: «[a b c hi]␤»

[00:53] <AlexDaniel> can anybody explain this?

[00:54] <AlexDaniel> there's a comma after pop

[00:54] <AlexDaniel> but pop does not seem to pop?

[00:56] <timotimo> m: my @a = <a b c>; @a.pop; say @a; @a[3] = 'hi'; say @a

[00:56] <camelia> rakudo-moar 701dab: OUTPUT: «[a b]␤[a b c hi]␤»

[00:56] <timotimo> right, the value should really be discarded

[00:56] <geekosaur> m: my @b = <d e f>; my @a= <a b c>; @a.pop, @b[3] = ‘hi’; say @a

[00:56] <camelia> rakudo-moar 701dab: OUTPUT: «[a b]␤»

[00:56] <geekosaur> buuuuuug

[00:56] <Zoffix> AlexDaniel: I'll raise you

[00:56] <Zoffix> m: my @a= <a b c>; @a.pop; @a.pop; @a.pop; @a.pop, @a[5] = 42; say @a

[00:56] <camelia> rakudo-moar 701dab: OUTPUT: «Cannot pop from an empty Array␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[00:57] <Zoffix> m: my @a= <a b c>; @a.pop; @a.pop; @a.pop, @a[5] = 42; say @a

[00:57] <camelia> rakudo-moar 701dab: OUTPUT: «[a b c (Any) (Any) 42]␤»

[00:57] <Zoffix> :)

[00:57] <Zoffix> m: my @a= <a b c>; @a.pop; @a.pop; @a[5] = 42; say @a

[00:57] <camelia> rakudo-moar 701dab: OUTPUT: «[a b c (Any) (Any) 42]␤»

[00:57] <Zoffix> mc: my @a= <a b c>; @a.pop; @a.pop; @a[5] = 42; say @a

[00:57] <committable6> Zoffix, ¦2015.12: «[a b c (Any) (Any) 42]»

[00:57] <Zoffix> that long wow

[00:57] <AlexDaniel> yup

[00:58] <AlexDaniel> well, let's see…

[00:58] <AlexDaniel> c: all my @a= <a b c>; @a.pop; @a.pop; @a[5] = 42; say @a

[00:58] <Zoffix> m: my @a = <a b c>; @a.elems; @a.pop; @a.pop; @a[*-1] = 42; say @a

[00:58] <camelia> rakudo-moar 701dab: OUTPUT: «[42]␤»

[00:58] <committable6> AlexDaniel, https://gist.github.com/fd1b58f8608cc9501dbc1599371f96da

[00:58] <timotimo> internally we push, pop, unshift and shift by moving begin and end pointers around

[00:58] <AlexDaniel> now THAT is long :)

[00:59] <Zoffix> m: my @a = <a b c>; @a.elems; @a.pop; @a.pop; @a.push: 42; @a[5] = 42; say @a

[00:59] <camelia> rakudo-moar 701dab: OUTPUT: «[a 42 c (Any) (Any) 42]␤»

[00:59] <AlexDaniel> fwiw that's #131245

[00:59] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131245

[00:59] <AlexDaniel> amazing bug

[01:01] <Zoffix> m: my @a = <a b c>; @a.elems; @a.pop; @a.pop; @a; @a[3] = 42; say @a

[01:01] <camelia> rakudo-moar 701dab: OUTPUT: «WARNINGS for <tmp>:␤Useless use of @a in sink context (line 1)␤[a b c 42]␤»

[01:01] <Zoffix> m: my @a = <a b c>; @a.elems; @a.pop; @a.pop; @a; @a = @a; @a[3] = 42; say @a

[01:01] <camelia> rakudo-moar 701dab: OUTPUT: «WARNINGS for <tmp>:␤Useless use of @a in sink context (line 1)␤[a (Any) (Any) 42]␤»

[01:01] <timotimo> huh, i wonder if this is fine for GC ...

[01:01] <AlexDaniel> yea depends on what you do with it

[01:01] <AlexDaniel> m: my @a=(1,2,3,4,5); @a.pop; @a.pop; @a.pop; @a.pop; @a[8]="hi"; say @a

[01:01] <camelia> rakudo-moar 701dab: OUTPUT: «[1 (Any) (Any) (Any) (Any) (Any) (Any) (Any) hi]␤»

[01:01] <AlexDaniel> m: my @a=(1,2,3,4,5); @a.pop; @a.pop; @a.pop; @a.pop; @a[7]="hi"; say @a

[01:01] <camelia> rakudo-moar 701dab: OUTPUT: «[1 2 3 4 5 (Any) (Any) hi]␤»

[01:01] <timotimo> m: my @a = <a b c d e f g h i j k l>; @a.pop for ^10; for ^100_000 { ~(1 + 32) }; @a[11] = "lol";  say @a

[01:01] <camelia> rakudo-moar 701dab: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "~" in expression "~(1 + 32)" in sink context (line 1)␤MoarVM panic: Internal error: invalid thread ID 23687456 in GC work pass␤»

[01:02] <timotimo> it's totally not.

[01:02] <Zoffix> thread?

[01:02] <Zoffix> Oh, you're being sarcastic?

[01:02] <Zoffix> m: my @a = <a b c>; @a.elems; @a.pop; @a.pop; @a[3] = 42; say @a

[01:02] <camelia> rakudo-moar 701dab: OUTPUT: «[a b c 42]␤»

[01:02] <Zoffix> j: my @a = <a b c>; @a.elems; @a.pop; @a.pop; @a[3] = 42; say @a

[01:02] <camelia> rakudo-jvm fb4f16: OUTPUT: «[a b c 42]␤»

[01:02] <Zoffix> heh

[01:02] <AlexDaniel> amazing

[01:03] <Zoffix> s: [], 'pop', \()

[01:03] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/701dab3/src/core/Array.pm#L685

[01:03] <timotimo> you'll want to look at moarvm here

[01:04] <Zoffix> timotimo: why? the bug is present on JVM too

[01:04] <timotimo> https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/VMArray.c#L372  -  try to figure out if/why/how this set_size_internal doesn't reach zero_slots, or if the zero_slots call is wrong and does The Wrong

[01:04] <timotimo> okay, then fix it on the jvm, too

[01:05] <Zoffix> :/

[01:06] <timotimo> jvm also implements vmarray, its code might look a lot like the moarvm code

[01:07] <timotimo> going to bed, have a good one!

[01:09] <AlexDaniel> m: my @a = (); say @a.rotate(1); say @a

[01:09] <camelia> rakudo-moar 701dab: OUTPUT: «Modulation by zero␤  in block <unit> at <tmp> line 1␤␤»

[01:09] <AlexDaniel> :|

[03:52] <Geth> ¦ rakudo/nom: c7aef59a5b | (Nick Logan)++ (committed using GitHub Web editor) | src/core/CompUnit/Repository/Installation.pm

[03:52] <Geth> ¦ rakudo/nom: Fix premature deletion of bin wrappers

[03:52] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c7aef59a5b

[04:01] <Geth> ¦ nqp: MasterDuke17++ created pull request #357: Zero slot when popping an array

[04:01] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/357

[04:07] <MasterDuke_> .ask nine are these two `sleep 2`s still needed? https://github.com/perl6/roast/blob/master/S10-packages/precompilation.t#L292-L294

[04:07] <yoleaux> MasterDuke_: I'll pass your message to nine.

[06:15] <[Tux]> This is Rakudo version 2017.04.3-163-gc7aef59a5 built on MoarVM version 2017.04-44-gf0db8822

[06:15] <[Tux]> csv-ip5xs        3.323

[06:15] <[Tux]> test            13.013

[06:15] <[Tux]> test-t           4.340 - 4.395

[06:15] <[Tux]> csv-parser      12.999

[07:55] <Geth> ¦ rakudo/nom: 91fb3076d2 | (Elizabeth Mattijsen)++ | 3 files

[07:55] <Geth> ¦ rakudo/nom: Make R:Q.(BAG|MIX)-ROLL return the iterator object

[07:55] <Geth> ¦ rakudo/nom:

[07:55] <Geth> ¦ rakudo/nom: This makes it more versatile, so it can e.g. be used for BagHash.grab.

[07:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/91fb3076d2

[08:02] <lizmat> decommute&

[09:57] <stmuk> Zoffix: did you have Strawberry Perl installed on your Windows test system?

[09:57] <Zoffix> Yes

[09:59] <stmuk> I think its a dependency still for prove (although zef has made progress on that) as well as a DDL

[10:00] <nine> ~

[10:00] <yoleaux> 04:07Z <MasterDuke_> nine: are these two `sleep 2`s still needed? https://github.com/perl6/roast/blob/master/S10-packages/precompilation.t#L292-L294

[10:00] <nine> MasterDuke_: oh, actually not! I just forgot to remove them as planned.

[10:00] <stmuk> odd we didn't see the DDL reports before .. I doubt that's changed

[10:01] <stmuk> err DLL even

[10:05] <Zoffix> uhhh

[10:07] <jnthn> Which DLL is it missing?

[10:08] <Zoffix> stmuk: well, I'm now at home and on Windows10 instead of 7, and I removed old Star and Strawberry and tried to install new star and it just blocks me: http://i.imgur.com/cHVCHRb.png

[10:08] <Zoffix> Says "it protected me" and there's no option to run it :/

[10:08] <Zoffix> jnthn:  libgcc_s_sjlj-1.dll

[10:08] <Zoffix> Per Tweet, at least: https://twitter.com/mike_sanderson/status/859610668453961728

[10:08] <jnthn> huh...wow

[10:09] <stmuk> I probably should use mingw rather than the gcc with Strawberry Perl

[10:09] <jnthn> Or do MSVC builds

[10:09] <jnthn> ;)

[10:09] <Zoffix> Ah, there's a Run anyway button if you click more info

[10:09] <stmuk> I prefer pretending I'm on UNIX :)

[10:09] <Zoffix> stmuk: yeah, I'm getting the same error as that person

[10:09] <Zoffix> From moar.exe

[10:09] * Zoffix tries install Strawberry again

[10:10] <stmuk> I think the short term fix is to explicity list Strawberry Perl as a dependency under downloads errata

[10:11] <stmuk> I probably need to install another clean Windows VM  for testing

[10:12] <stmuk> people need Strawberry Perl for prove and gcc anyway

[10:12] <Zoffix> Confirming installing strawberry fixed it

[10:12] <stmuk> grr $work meeting

[10:15] <jnthn> stmuk: Fair enough. I suspect both work out fine enough; I'm just more comfortable with the MSVC build 'cus it's the one I'm regularly using/shipping into production :)

[10:15] <jnthn> Not to mention MSVC was the first compiler Moar built under...

[10:35] <timotimo> and then i came along and tried to use an x86 intrinsic and made everything explode

[10:35] <Geth> ¦ nqp: 7f71ec87e8 | MasterDuke17++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/VMArrayInstance.java

[10:35] <Geth> ¦ nqp: Zero slot when popping an array

[10:35] <Geth> ¦ nqp:

[10:35] <Geth> ¦ nqp: Otherwise ghost elements are left.

[10:35] <Geth> ¦ nqp:

[10:35] <Geth> ¦ nqp: Fixes https://rt.perl.org/Ticket/Display.html?id=131245 for the JVM.

[10:35] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/7f71ec87e8

[10:35] <Geth> ¦ nqp: 7c4bd48f59 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/VMArrayInstance.java

[10:35] <Geth> ¦ nqp: Merge pull request #357 from MasterDuke17/zero_slot_when_popping_an_array

[10:35] <Geth> ¦ nqp:

[10:35] <Geth> ¦ nqp: Zero slot when popping an array

[10:35] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/7c4bd48f59

[10:36] <Zoffix> Looks like the new nqp QAST tests are failing on JVM: https://travis-ci.org/perl6/nqp/jobs/228200034

[11:10] <Geth> ¦ roast: c02ad87e7f | (Stefan Seifert)++ | S10-packages/precompilation.t

[11:10] <Geth> ¦ roast: Remove workaround - precompilation no longer checks timestamps

[11:10] <Geth> ¦ roast:

[11:10] <Geth> ¦ roast: Now that we rely solely on checksums to detect outdated precomp files,

[11:10] <Geth> ¦ roast: we no longer need to ensure that time stamps are different.

[11:10] <Geth> ¦ roast: Thanks to MasterDuke++ for the reminder.

[11:10] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c02ad87e7f

[11:17] <Zoffix> Here's a controvercial idea: remove .comb and .split from IO::Handle

[11:18] <timotimo> because of the "not closing file handles" thing?

[11:18] <Zoffix> Nope. /me types why

[11:18] <timotimo> ok

[11:22] <Zoffix> Basically, for them to work correctly, they need to read a chunk, do its thing on it, pull one, *pull another one* reading more chunks to ensure the first one is a complete thing and not just a thing due to not all data being available and basically generate all output that way. Now in addition to that being not very awesome for perf, the chunks it reads means all the other methods will read from some

[11:22] <Zoffix> weird place instead of the next thing after .comb/.split were used. So basically we have to reimplement lessthanawesome versions of Str.com/Str.split, ensuring they provide all of the featurea, and then we still end up with nearly guaranteed data loss if user uses more than just .comb or .split for reading from handle

[11:23] <timotimo> ah

[11:24] <Zoffix> And .words is currently in the same category, but it can be reworded in terms of .lines, which maybe not that dramatic?

[11:24] <timotimo> ah, because whatever splits lines will also split words

[11:24] <Zoffix> yeah

[11:28] <Zoffix> Or maybe s/remove/make them slurp/

[11:30] <timotimo> there's no syntactic relief for "when i leave this loop, close the handle"

[11:31] <Zoffix> so IO::Handle.com/.split/.words would be just self.slurp.comb/.split/.words and if anyone wants laziness they can do Cat.new: gather { while $fh.read(999) -> $_ { .take } }

[11:31] <timotimo> hm. we do sink-all on a "regular" for-loop, right?

[11:32] <Zoffix> timotimo: yeah, there is  LEAVE $fh.close; or my $fh will leave {.close} = .IO.open; or use Trait::IO;  my $fh does auto-close = .IO.open...

[11:33] <Zoffix> Unless you mean for $fh.lines {…} ..

[11:33] <Zoffix> yeah

[11:33] <timotimo> i meant for $fh.lines and friends

[11:35] <Zoffix> there's :close arg and :limit but that doesn't account for bailing from the loop before exhausiting it. Though the handle will get closed on GC, so this is really a problem for doing that sort of thing ~1000+ times (aside from some special circumstances)

[11:38] <timotimo> yeah, the worst is when we lazily decide to break off

[11:38] <timotimo> and the handle just never knows

[12:23] <Zoffix> .oO( along with Cat make FatCat: a Cat that keeps around the part of the string it already generated :o )

[12:24] <Zoffix> There are no specs for Cat, is there? Other than "it's a lazily generated string". I found none on design.perl6.org

[12:28] <timotimo> that's right :(

[12:28] <Zoffix> Just checking. Didn't want to reinvent the wheel

[12:28] <timotimo> a few things will be ... interesting

[12:29] <Zoffix> Like what?

[12:29] <timotimo> like, i imagine most things will as a first step nqp::chars a string

[12:29] <jnthn> The regex engine will likely need major and deep alternations to match a Cat would be the one that scares me most :)

[12:29] <timotimo> if the string's a cat, that'd have to fully generate it

[12:30] <Zoffix> Oh

[12:30] <Zoffix> I guess I'm not making a real Cat then

[12:30] <timotimo> a plush cat, then?

[12:30] * Zoffix renames it to Kitten :)

[12:32] <timotimo> i'm not sure how deep we'll install cat into the vm itself

[12:33] <jnthn> Not very, I'd think

[12:34] <timotimo> OK, so no special repr or anything

[12:34] <jnthn> Since the fetching of the next bunch of things will be done in HLL code

[12:44] <Zoffix> hehehe, I love this error: "Type 'Cat' is not declared. Did you mean 'Rat'?"

[12:44] <Zoffix> ZofBot: Did you mean 'Rat'? Or another small mammal?

[12:44] <ZofBot> Zoffix, i don't like it either, i think i created an RT about it a while ago but it was rejected

[12:45] <Zoffix> Aww

[12:45] <timotimo> did you mean squirrel?

[13:06] <nine> Actually since for $fh.lines(:close) {...} is pretty much $fh.lines(:close).map: {} the iterator returned by lines could ensure that the file handle is closed however the loop is exited.

[13:06] <jnthn> How?

[13:07] <nine> Overriding method map or maybe sink.

[13:07] <jnthn> And then when they do for $fh.lines(:close).grep(/foo/) { ... } ?

[13:09] <timotimo> then you're ... in trouble

[13:09] <jnthn> The point here being that losing interest in an iteration is done implicitly, not explicitly.

[13:10] <nine> It'd have to override all Any-iterable-methods

[13:10] <jnthn> So trying to "solve" this boils down to fighting a property of the iterator pattern itself, which lacks an explicit "unsubscribe"

[13:10] <jnthn> (The supply world having one, becasue all the references point in the opposite direction)

[13:11] <nine> Yeah, maybe it's just not a good idea :)

[13:13] <jnthn> That's my feeling, yeah

[13:13] <jnthn> I think IO::Path.lines is, sadly, probably a bad API in the first place

[13:13] <jnthn> Sometimes there's necesary complexity

[13:23] <Zoffix> Jesus christ... is there ANY browser that works

[13:24] <Zoffix> Palemoon: "switch to tab" feature annoyed me. Installed firefox. Refuses to go to https://github.com/rakudo/rakudo/blob/91fb307/src/core/Any-iterable-methods.pm#L1852

[13:25] <MasterDuke_> workes in FF 52.02 on arch linux for me

[13:26] <Zoffix> Not in 53 for me. It's like pressing Enter on the address bar doesn't press it.

[13:27] <Zoffix> k, works after restarting it...

[13:28] <Zoffix> Anyway, I'm hitting some sort of a bug, unless I don't get how Seqs work:

[13:28] <Zoffix> m: my $s = (1, 2, 3).Seq; $s.cache; .say for |$s; .say for |$s

[13:28] <camelia> rakudo-moar 91fb30: OUTPUT: «This Seq has already been iterated, and its values consumed␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[13:29] <Zoffix> Why does it tell me it's been iterated? I .cached it?

[13:29] <MasterDuke_> hm, good thing i just made coffee, i'm on kubuntu zesty on the laptop, not arch

[13:29] <Zoffix> m: my $s = (1, 2, 3).Seq; $s.cache; .say for |$s;

[13:29] <camelia> rakudo-moar 91fb30: OUTPUT: «This Seq has already been iterated, and its values consumed␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[13:29] <timotimo> .cache is not a mutator, is it?

[13:29] <Zoffix> Oh

[13:30] <timotimo> m:  my $s = (1, 2, 3).Seq; $s.=cache; .say for |$s;

[13:30] <camelia> rakudo-moar 91fb30: OUTPUT: «1␤2␤3␤»

[13:30] <Zoffix> s: (1, 2, 3).Seq, 'Slip', \()

[13:30] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/91fb307/src/core/Seq.pm#L83

[13:30] <Zoffix> timotimo: it is

[13:30] <timotimo> i didn't know that

[13:30] <Zoffix> .cache returns List $!list

[13:31] <Zoffix> which gets set to List from iterator of Seq's tieratyor

[13:31] <Zoffix> Aha. So I see why my error happens

[13:32] <Zoffix> The Seq.iterator don't do any checking for $!list: https://github.com/rakudo/rakudo/blob/91fb307/src/core/Seq.pm#L52-L59

[13:36] <Zoffix> m: with '/tmp/foo42'.IO { .spurt: join "\n", <A B C D E>; with .open { my $lines = .lines.cache; my $lines2 = .lines.cache; $lines2.head.say; $lines.head.say;  } }

[13:36] <camelia> rakudo-moar 91fb30: OUTPUT: «A␤B␤»

[13:36] <Zoffix> But this is where I was going with it :)

[13:36] <Zoffix> On the topic of .lines being bad API

[13:37] <Zoffix> But wait! There's more!

[13:37] <Zoffix> m: with '/tmp/foo42'.IO { .spurt: join "\n", <A B C D E>; with .open { .words; my $lines = .lines.cache; my $lines2 = .lines.cache; $lines2.head.say; $lines.head.say;  } }

[13:37] <camelia> rakudo-moar 91fb30: OUTPUT: «Nil␤Nil␤»

[13:37] <Zoffix> hehe :D

[13:37] <Zoffix> m: with '/tmp/foo42'.IO { .spurt: join "\n", <A B C D E>; with .open { .words.head.say; my $lines = .lines.cache; my $lines2 = .lines.cache; $lines2.head.say; $lines.head.say;  } }

[13:37] <camelia> rakudo-moar 91fb30: OUTPUT: «A␤Nil␤Nil␤»

[13:37] <Zoffix> A more fair example :)

[13:42] <Zoffix> What's Seq.is-ready for? Seems isn't used in the sauce anywere.      method is-ready(Seq:D:) { $!iter.DEFINITE }

[13:44] <Zoffix> And it's neither in docs nor in roast

[13:44] <Zoffix> Ah: https://github.com/rakudo/rakudo/commit/ab408b1084653fa14f101911569dee8ba8494ff7

[13:45] * Zoffix is going to remove it

[13:45] <Zoffix> ZofBot: got a one-liner to recursively remove .precomp dirs I could steal?

[13:45] <ZofBot> Zoffix, However, the labeled forms can use method call syntax: "LABEL

[13:46] <timotimo> rm -rf **/.precomp :)

[13:47] <Zoffix> That really works?

[13:48] <Zoffix> ZOFFLOP: t/spec/S17-promise/nonblocking-await.t

[13:48] <timotimo> at least in fish it does

[13:49] <Zoffix> Looks like t/spec/S17-promise/nonblocking-await.t just needs larger sleeps maybe

[13:49] <ilmari> timotimo: and in bash with extglob enabled

[13:49] <timotimo> i believe i first learned about it in zsh

[13:50] <Zoffix> ilmari: how do I tell if I have extglob enabled?

[13:50] <ilmari> Zoffix: 'shopt extglob'

[13:50] <Zoffix> off

[13:52] <timotimo> it's important that you have shopt it

[13:54] <Zoffix> Doesn't seem tow ork rm -fr **/.precomp

[13:54] <Zoffix> tree -fad | grep -i precomp  still gives me a bunch of S22-package-format/local-file-src/.precomp/ finds after running that rm

[13:55] <timotimo> hm

[13:55] <ilmari> hm, no, it's globstar

[13:55] <ilmari> shopt -s globstar

[13:55] <timotimo> we can try "find -type f -name '.precomp' -delete" maybe?

[13:55] <timotimo> first without -delete probably :D

[13:56] <Zoffix> yey \o/

[13:56] <Zoffix> ilmari++ that worked :)

[13:56] * Zoffix creates alias declutter='rm -fr **/.precomp'

[13:56] <Zoffix> and timotimo++ for ** :)

[13:58] <timotimo> cool

[14:04] <Zoffix> ZOFVM: Files=1242, Tests=133857, 116 wallclock secs (22.44 usr  3.01 sys + 2422.33 cusr 139.45 csys = 2587.23 CPU)

[14:09] <nine> find . -name .precomp | xargs rm -rf

[14:09] <nine> is what I use anyway

[14:11] <Zoffix> holy crap, this Seq bug is rather extensive. I wonder how many of the issues people have been having due to our changing some stuff from List to Seq were all really just to this bug

[14:13] <MasterDuke_> nine: like to live dangerously, eh?

[14:13] <nine> MasterDuke_: yeah!

[14:13] <nine> timotimo: -type d is probably more useful

[14:14] <timotimo> oh, f stands for file, not folder

[14:14] <timotimo> m)

[14:15] <nine> MasterDuke_: most of the time I actually do use -print0 | xargs -0 but not when I'm sure there are no spaces in the involved paths. Then I'm just lazy

[14:16] <MasterDuke_> i've tried to get myself in the habit of using -delete

[14:17] <nine> probably wise :)

[14:23] <Geth> ¦ rakudo/nom: 400f4ec883 | (Zoffix Znet)++ | src/core/Seq.pm

[14:23] <Geth> ¦ rakudo/nom: Fix a whole ton of methods on cached Seqs

[14:23] <Geth> ¦ rakudo/nom:

[14:23] <Geth> ¦ rakudo/nom: When Seq is cached, its $!list gets .DEFINITE and we can get

[14:23] <Geth> ¦ rakudo/nom: cached stuff from it. However, several methods do not check

[14:23] <Geth> ¦ rakudo/nom: for presence of $!list cache and assume the absence of $!iter means

[14:23] <Geth> ¦ rakudo/nom: the Seq has been consumed and there is no cache.

[14:23] <Geth> ¦ rakudo/nom:

[14:23] <Geth> ¦ rakudo/nom: <…commit message has 5 more lines…>

[14:23] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/400f4ec883

[14:24] <Zoffix> Fixes infix:<eqv>, .iterator, .Slip, .join, .List, .list, .eager, .Array, .is-lazy, and .sink

[14:25] <Zoffix> And any time you AT-POS a Seq, it gets cached, so this might've been affecting a bunch of stuff

[14:35] <Zoffix> And looks like List.sink is bogus too; it ain't doing no sinking

[14:36] <Zoffix> m: Seq.new(class :: Iterator { method pull-one { say "sunk"; IterationEnd } }.new).sink

[14:36] <camelia> rakudo-moar 400f4e: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse class definition␤at <tmp>:1␤------> 3Seq.new(class ::7⏏5 Iterator { method pull-one { say "sunk"␤    expecting any of:␤        generic role␤»

[14:36] <Zoffix> m: Seq.new(class :: does Iterator { method pull-one { say "sunk"; IterationEnd } }.new).sink

[14:36] <camelia> rakudo-moar 400f4e: OUTPUT: «sunk␤»

[14:36] <Zoffix> m: Seq.new(class :: does Iterator { method pull-one { say "sunk"; IterationEnd } }.new).cache.sink

[14:36] <camelia> rakudo-moar 400f4e: ( no output )

[14:39] <Zoffix> .ask lizmat should List.sink actually do things? I would've figured it'd do self.iterator.sink-all, since a List could be made from a Seq, for example. And we do sink-all in Seqs, but not lists: https://irclog.perlgeek.de/perl6-dev/2017-05-03#i_14525429

[14:39] <yoleaux> Zoffix: I'll pass your message to lizmat.

[14:40] <jnthn> Zoffix: I think List doesn't do so because it's a positional thing

[14:41] <jnthn> And keeps hold of the things it evaluates

[14:42] <Zoffix> jnthn: does that mean a cached Seq shouldn't do it either?

[14:42] <Zoffix> I guess yes either way. I made a booboo there; need to change .sink's $!list.iterator.sink-all to just $!list.sink

[14:43] <jnthn> Caching the Seq takes the iterator and uses it for the cache

[14:43] <Zoffix> jnthn: what's the .sink for? I guess that's my question

[14:44] <jnthn> On Seq?

[14:44] <Zoffix> At all

[14:44] <jnthn> Oh

[14:44] <jnthn> It's a method that is called when something is in a void context

[14:44] <jnthn> Which we call sink context

[14:44] <Zoffix> If I do $fh.lines(:close).List.sink the handle won't get closed.

[14:45] <Zoffix> jnthn: but that isn't always true:

[14:45] <Zoffix> m: my $x = class Foo { method sink { say "sunk" } }; $x

[14:45] <camelia> rakudo-moar 400f4e: OUTPUT: «WARNINGS for <tmp>:␤Useless use of $x in sink context (line 1)␤»

[14:45] <Zoffix> That didn't call .sink

[14:45] <jnthn> Correct

[14:45] <Zoffix> How come it's not called when it's in a variable?

[14:46] <Zoffix> Feels somewhat like our .DESTROY. You can do some sort of cleanup in it, but it's not guaranteed to be run, so you can't rely on cleanup happening.

[14:46] <jnthn> Because a variable is just accessing something

[14:46] <jnthn> Consider

[14:46] <jnthn> my @a = lazy blah();

[14:47] <Zoffix> But it's in sink context. Even the warning tells me so.

[14:47] <Zoffix> Oh, use of $x, not use of Foo; ok

[14:47] <jnthn> If we were to sink that we'd end up trying to evalute the whole thing.

[14:47] <Zoffix> Ah

[14:47] <Zoffix> OK. Thank makes sense. Thanks.

[14:48] <jnthn> So the presumption is that data structures that store thinks, like List, Array, etc. don't go doing evaluation in sink context

[14:48] <jnthn> *store things

[14:48] <Zoffix> Alright.

[14:48] <jnthn> Because by creating them you've created a way to refer to the data in the future

[14:49] <Zoffix> .tell lizmat Never mind. jnthn++ answered

[14:49] <yoleaux> Zoffix: I'll pass your message to lizmat.

[14:49] <jnthn> Unlike a Seq, which (caching aside) is one-shot.

[14:53] <Geth> ¦ rakudo/nom: 59f6f48505 | (Zoffix Znet)++ | src/core/Seq.pm

[14:53] <Geth> ¦ rakudo/nom: Remove Seq.is-ready method

[14:53] <Geth> ¦ rakudo/nom:

[14:53] <Geth> ¦ rakudo/nom: The method was added for debug reasons in mid-2015. It's not used

[14:53] <Geth> ¦ rakudo/nom: anywhere in core, roast, or docs.

[14:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/59f6f48505

[15:00] <Geth> ¦ rakudo/nom: c13d89b3e6 | (Zoffix Znet)++ | src/core/Seq.pm

[15:00] <Geth> ¦ rakudo/nom: Don't sink-all iterator of cached Seq

[15:00] <Geth> ¦ rakudo/nom:

[15:00] <Geth> ¦ rakudo/nom: Was added in previous commit, but after discussion[^1] it

[15:00] <Geth> ¦ rakudo/nom: was decided it wasn't need to be sunk. I'm still leaving

[15:00] <Geth> ¦ rakudo/nom: $!list.sink in, as a defensive thing in case we make List.sink

[15:00] <Geth> ¦ rakudo/nom: do thinks any time in the future.

[15:00] <Geth> ¦ rakudo/nom:

[15:00] <Geth> ¦ rakudo/nom: [1] https://irclog.perlgeek.de/perl6-dev/2017-05-03#i_14525466

[15:00] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c13d89b3e6

[15:01] <Geth> ¦ roast: 78515bfcb4 | (Zoffix Znet)++ | S32-list/seq.t

[15:01] <Geth> ¦ roast: Test a bunch of methods on cached Seqs

[15:01] <Geth> ¦ roast:

[15:01] <Geth> ¦ roast: Rakudo fixes:

[15:01] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/400f4ec883

[15:01] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/c13d89b3e6

[15:01] <Geth> ¦ roast:

[15:01] <Geth> ¦ roast: Bug find: https://irclog.perlgeek.de/perl6-dev/2017-05-03#i_14524925

[15:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/78515bfcb4

[15:04] <Zoffix> s/do thinks/do things/;

[15:05] <Zoffix> ZofBot: what kind of thinks do you do?

[15:05] <ZofBot> Zoffix, =trans( 'A

[15:22] <Zoffix> So... anyone feeling up to breaking more modules? Or rather specifically their tests? :)

[15:23] <Zoffix> Hm...

[15:23] <Zoffix> Looks like a whole bunch of failures even in our own roast :(

[15:23] <Zoffix> The Seq eqv List thing. We fixed the `eqv` to False that case, but `is-deeply` was still converting Seqs to Lists

[15:24] <Zoffix> And now I fixed that, but getting a bunch of roast failures

[15:24] <Zoffix> m: use Test; is-deeply (1,).Seq, (1,)

[15:24] <camelia> rakudo-moar c13d89: OUTPUT: «ok 1 - ␤»

[15:24] <Zoffix> So that should be false really

[15:25] <Zoffix> wow a gazillion roast failures :| https://gist.github.com/zoffixznet/db3f72db41932824425f1037f3843e3d

[15:25] <Zoffix> Basically, unless I messed something up, all those tests are wrong

[15:26] * Zoffix tries 6.c-errata

[15:30] <Zoffix> Fewer, but still a bunch: https://gist.github.com/zoffixznet/ea208e2a5b3139ec7a7fb130e5b5a918

[15:30] <Zoffix> And looking at this numbers, it's basically guaranteed there'd be a bunch of fall out in ecosystem too

[15:31] <Zoffix> huggable: all modules

[15:31] <huggable> Zoffix, https://github.com/moritz/perl6-all-modules

[15:31] <Zoffix> 1725 occurances of `is-deeply` in ecosystem

[15:33] <Zoffix> Well, I'm glad of one thing: my ignorance about Seq.cache being a mutator that made a bug in is-deeply let us at least fix List/Seq infix:<eqv>. 'cause if is-deeply were working right, this fallout would've been back when we fixed infix:<eqv>

[15:35] <MasterDuke_> oh, bunch of todo passing in that last gist

[15:39] <Zoffix> .ask TimToady what do we do: due to a sequence of 2 bugs, `is-deeply` currently converts a Seq arg into a List and so falsely makes `is-deeply (1,).Seq, (1,)` pass, which causes 69 roast tests to fail (67 of which are 6.c-errata) and likely many module test suite failures as well. So, do we bite the bullet and fix is-deeply and tests or do we document the flaw and call it by-design?

[15:39] <yoleaux> Zoffix: I'll pass your message to TimToady.

[15:39] <Zoffix> MasterDuke_: yeah, it's errata

[15:39] <Zoffix> $ grep 'Non-zero exit status' gistfile1.txt | perl6 -e '$*IN.slurp.comb(/\d+/).sum.say'

[15:39] <Zoffix> 69

[15:39] <Zoffix> I'm ending up using perl6 for 1 liners more and more

[15:40] * Zoffix does version bumps

[15:40] <Zoffix> BTW, t/spec/integration/advent2011-day07.t on 6.c-errata currently crashes: `No such method 'name' for invocant of type 'Mu'` That doesn't sound like being due to my is-deeply fix

[15:43] <Geth> ¦ rakudo/fixed-Seq-is-deeply: cf0285a108 | (Zoffix Znet)++ | lib/Test.pm6

[15:43] <Geth> ¦ rakudo/fixed-Seq-is-deeply: Fix is-deeply to keep Seq args as Seqs

[15:43] <Geth> ¦ rakudo/fixed-Seq-is-deeply:

[15:43] <Geth> ¦ rakudo/fixed-Seq-is-deeply: Currently, the multies incorrectly pass *result* of .cache call

[15:43] <Geth> ¦ rakudo/fixed-Seq-is-deeply: to be tested, which is a List. However, all we need to do

[15:43] <Geth> ¦ rakudo/fixed-Seq-is-deeply: is call .cache to mutate the Seq into a cached one, but still pass

[15:43] <Geth> ¦ rakudo/fixed-Seq-is-deeply: the the Seq down to be tested.

[15:43] <Geth> ¦ rakudo/fixed-Seq-is-deeply:

[15:43] <Geth> ¦ rakudo/fixed-Seq-is-deeply: Currently has huge roast fallout. Waiting for discussion. Do not

[15:43] <Geth> ¦ rakudo/fixed-Seq-is-deeply: merge yet: https://irclog.perlgeek.de/perl6-dev/2017-05-03#i_14525888

[15:43] <Geth> ¦ rakudo/fixed-Seq-is-deeply: review: https://github.com/rakudo/rakudo/commit/cf0285a108

[16:04] <Zoffix> Current 6.c-errata failures: https://gist.github.com/zoffixznet/6e56a0ae8f7856712e63ba0a8b1876c9

[16:04] <Zoffix> (that's without my is-deeply work)

[16:06] <Zoffix> no stresstest failures on master

[16:07] <Zoffix> ZofBot: ping

[16:07] <ZofBot> Zoffix, It is the default for the ":test" parameter to "/dir()" and "IO::Path"'s "

[16:07] * Zoffix kicks Geth

[16:07] <MasterDuke_> i believe t/spec/S32-exceptions/misc.rakudo.moar is because of my recent rakudo change (i.e., adding X::Parameter::InvalidConcreteness). i'm looking at it now

[16:07] <Zoffix> wake up and do some work, you lazy bot

[16:09] <Zoffix> Interesting. Web Hook github page tells me it tried to deliver, but got "Internal Server Error!"

[16:09] <Zoffix> Oh

[16:09] <Zoffix> "[ERROR] [14905] [6] No such method 'new' for invocant of type 'IO::Socket::SSL'   in method get-connection"

[16:10] <jnthn> Ah, phew, if there was an extra Async:: in that error I'd be on the hook :P

[16:10] <Zoffix> :}

[16:11] <Zoffix> Reproed the error when trying to re-deliver the hook.

[16:12] <Zoffix> But the commit was a version bump: https://github.com/perl6/nqp/commit/c60df1eb075bd5ecb0eea59892318dbb881c865c

[16:13] <Zoffix> And a bump in Rakudo: https://github.com/rakudo/rakudo/commit/c776c0879ee1c56086df13b740b728b3fab831df

[16:14] <Zoffix> Looks like something in NQP's message (that I included in Rakudo's commit too) made HTTP::UserAgent unhappy

[16:14] <Zoffix> Oh... User::Agent... It's the version-bump-fetcher that's broken

[16:14] <Zoffix> Geth: ver https://github.com/rakudo/rakudo/commit/c776c0879ee1c56086df13b740b728b3fab831df

[16:15] <Zoffix> Geth: ver https://github.com/rakudo/rakudo/commit/17921bf282798bf77dc6994d9591a2ae76438a04#diff-b782d9d013ace2e25a5985d00ef80ccf

[16:15] <Zoffix> Geth: ver https://github.com/rakudo/rakudo/commit/17921bf282798bf77dc6994d9591a2ae76438a04

[16:22] <Zoffix> Geth: ver https://github.com/rakudo/rakudo/commit/17921bf282798bf77dc6994d9591a2ae76438a04

[16:22] <Geth> Zoffix, version bump brought in these changes: https://github.com/perl6/nqp/compare/2017.04-24-g87501f7b...2017.04-48-g745c61d

[16:23] <Zoffix> Well, this sucks.

[16:23] <Zoffix> The bug disappeared after I simply restarted the bot :/

[16:27] <Geth> ¦ nqp: c60df1eb07 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[16:27] <Geth> ¦ nqp: Bump MoarVM version

[16:27] <Geth> ¦ nqp:

[16:27] <Geth> ¦ nqp: MoarVM Bump brought these changes:

[16:27] <Geth> ¦ nqp: https://github.com/MoarVM/MoarVM/compare/2017.04-44-gf0db8822...2017.04-56-g8ad18b8

[16:27] <Geth> ¦ nqp:

[16:27] <Geth> ¦ nqp: 8ad18b8 Merge pull request #589 from MasterDuke17/zero_slot_when_popping_an_array

[16:27] <Geth> ¦ nqp: b53b05f Pull body->start + body->elems out into a variable

[16:27] <Geth> ¦ nqp: <…commit message has 10 more lines…>

[16:27] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c60df1eb07

[16:27] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.04-44-gf0db8822...2017.04-56-g8ad18b8

[16:27] <Zoffix> Yup and re-delivery works too now -_-

[16:31] <Zoffix> Well, filed it in case it ever re-appears: https://github.com/sergot/http-useragent/issues/174

[16:32] <Zoffix> r: my @a = <a b c>; @a.pop; @a[3] = 42; say @a

[16:32] <camelia> rakudo-jvm fb4f16: OUTPUT: «[a b c 42]␤»

[16:32] <camelia> ..rakudo-moar c776c0: OUTPUT: «[a b (Any) 42]␤»

[16:32] <Zoffix> Cool

[16:32] <Zoffix> (JVM is older commit; but should be fixed on it too)

[16:35] <Geth> ¦ roast: MasterDuke17++ created pull request #265: Adapt tests to use new typed exception

[16:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/265

[16:38] <Geth> ¦ roast/6.c-errata: be6306c948 | MasterDuke17++ (committed by Zoffix Znet) | S32-exceptions/misc.t

[16:38] <Geth> ¦ roast/6.c-errata: Adapt tests to use new typed exception (#265)

[16:38] <Geth> ¦ roast/6.c-errata:

[16:38] <Geth> ¦ roast/6.c-errata: Aligns the tests with https://github.com/rakudo/rakudo/pull/1073

[16:38] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/be6306c948

[17:18] <Geth> ¦ roast: 2973f845c8 | (Zoffix Znet)++ | S32-array/pop.t

[17:18] <Geth> ¦ roast: Test no ghost elements in arrays left over

[17:18] <Geth> ¦ roast:

[17:18] <Geth> ¦ roast: RT#131245: https://rt.perl.org/Public/Bug/Display.html?id=131245

[17:18] <Geth> ¦ roast: Fix commits:

[17:18] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131245

[17:18] <Geth> ¦ roast: https://github.com/perl6/nqp/commit/7f71ec87e8d2a08953462fd

[17:18] <Geth> ¦ roast: https://github.com/MoarVM/MoarVM/commit/8ad18b8460

[17:18] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/c776c0879ee1c56086d

[17:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2973f845c8

[18:00] <timotimo> what's actually keeping us from throwing a strawberry perl dependency out? we do have our own prove-like that we already ship with rakudo, don't we?

[18:01] <Zoffix> s/ship with rakudo/have available as a module/;

[18:01] <Zoffix> But nothing really.

[18:03] <timotimo> i believe if anything ever wants to compile stuff it'll try to re-use what moarvm was compiled with, could that be?

[18:03] <timotimo> so if you have an msvc-compiled moarvm from a rakudo star or something you won't be able to compile custom modules unless you install msvc

[18:03] <Zoffix> huh? That's really weird

[18:03] <timotimo> well, it's in the backendconfig?

[18:03] <timotimo> and isn't that what stuff liek LibraryMake uses?

[18:04] <Zoffix> No idea

[18:04] <Zoffix> buggable: eco LibraryMake

[18:04] <buggable> Zoffix, LibraryMake 'An attempt to simplify native compilation': https://github.com/retupmoca/P6-LibraryMake

[18:04] <timotimo> https://github.com/retupmoca/P6-LibraryMake/blob/master/lib/LibraryMake.pm6#L122

[18:05] <Zoffix> YUeah

[18:05] <Zoffix> m: dd $*VM.config<cc>

[18:05] <camelia> rakudo-moar c776c0: OUTPUT: «"gcc"␤»

[18:05] <Zoffix> Though that feels more like LibraryMake needing an improvement rather than a reason why we can't drop strawberry as a prereq :)

[18:06] <Zoffix> .oO( ship a compiler with Star, just like Strawberry perl does )

[18:14] <Zoffix> Oh no. That's it. Latest firefox cries about insecure website when you try to use a login form on a website that doesn't use HTTP

[18:16] <Zoffix> -- Lazy web developers world-wide :)

[18:16] <Zoffix> doesn't use HTTPS I mean

[18:52] <Geth> ¦ roast: d7de586029 | MasterDuke17++ | S12-attributes/native.t

[18:52] <Geth> ¦ roast: Unfudge a passing test for JVM

[18:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d7de586029

[19:02] <MasterDuke_> m: my @a = (); @a.rotate(1) #bug?

[19:02] <camelia> rakudo-moar c776c0: OUTPUT: «Modulation by zero␤  in block <unit> at <tmp> line 1␤␤»

[19:02] <geekosaur> LTA certainly

[19:03] <geekosaur> whether actual bug could be argued I guess

[19:03] <MasterDuke_> yeah, should it just do nothing?

[19:03] <MasterDuke_> because that's a 1-line fix

[19:05] <Zoffix> Doing nothing sounds sane to me.

[19:05] <timotimo> m: my @a = <1 2 3 4 5>; @a.rotate(100)

[19:05] <camelia> rakudo-moar c776c0: ( no output )

[19:05] <timotimo> m: my @a = <1 2 3 4 5>; @a.rotate(100); say @a

[19:05] <camelia> rakudo-moar c776c0: OUTPUT: «[1 2 3 4 5]␤»

[19:05] <timotimo> right, that's why it modulates

[19:05] <Zoffix> m: my @a = <1 2 3 4 5>; say @a.rotate(101);

[19:05] <camelia> rakudo-moar c776c0: OUTPUT: «[2 3 4 5 1]␤»

[19:06] <MasterDuke_> i just added `return unless $elems`

[19:06] <Zoffix> s: [], 'rotate', \(1)

[19:06] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/c776c08/src/core/List.pm#L1056

[19:06] <MasterDuke_> makes it do nothing, spectests clean

[19:07] <Zoffix> Do we still have cost on returns?

[19:07] <Zoffix> m: sub foo { return 42 }; for ^1000_000 { $ = foo }; say now - INIT now

[19:07] <camelia> rakudo-moar c776c0: OUTPUT: «0.7867392␤»

[19:07] <MasterDuke_> src/core/Rakudo/Internals.pm:24

[19:07] <Zoffix> m: sub foo { return 42 }; for ^1000_000 { $ = foo }; say now - INIT now

[19:07] <camelia> rakudo-moar c776c0: OUTPUT: «0.7906209␤»

[19:07] <Zoffix> m: sub foo { 42 }; for ^1000_000 { $ = foo }; say now - INIT now

[19:07] <camelia> rakudo-moar c776c0: OUTPUT: «0.77443887␤»

[19:07] <Zoffix> m: sub foo { 42 }; for ^1000_000 { $ = foo }; say now - INIT now

[19:07] <camelia> rakudo-moar c776c0: OUTPUT: «0.5243640␤»

[19:08] * Zoffix would've gone with nqp::if on https://github.com/rakudo/rakudo/blob/nom/src/core/Rakudo/Internals.pm#L24

[19:09] <MasterDuke_> `nqp::unless($elems, return),`

[19:09] <MasterDuke_> what i actually added

[19:09] <Zoffix> Does it need to be return () tho?

[19:09] <Zoffix> Or the value isn't used

[19:10] <Zoffix> Yeah, returns to at the end

[19:10] <Zoffix> Which gets returned from .rotate

[19:12] <MasterDuke_> easy hange

[19:12] <MasterDuke_> *change

[19:13] <Zoffix> And on my local box I consistently get sub { 42 } to be 1.7x faster than sub { return 42 }, so yeah, we still have that cost and we should try to avoid using it when we can

[19:17] <Zoffix> m: my $l = lazy gather { for ^3 { take say "taken" } }; $l.is-lazy

[19:17] <camelia> rakudo-moar c776c0: ( no output )

[19:17] <Zoffix> Doesn't look like .is-lazy reifies anything...

[19:17] <Zoffix> m: my $l = lazy gather { for ^3 { take say "taken" } }; say $l.rotate: 1

[19:17] <camelia> rakudo-moar c776c0: OUTPUT: «No such method 'rotate' for invocant of type 'Seq'␤  in block <unit> at <tmp> line 1␤␤»

[19:17] <Zoffix> oh

[19:17] <Zoffix> neve rmind

[19:18] <Zoffix> m: my $l = (gather { for ^3 { take say "taken" } }).List; say $l.is-lazy

[19:18] <camelia> rakudo-moar c776c0: OUTPUT: «taken␤taken␤taken␤False␤»

[19:18] <Zoffix> \o/

[19:21] <Zoffix> ZofBot: Taken 3: former CIA agent Bryan Mills deals with a personal tragedy of having a unreified Seq

[19:21] <ZofBot> Zoffix, They can only be passed by name, so it doesn't matter what order you pass them in: $formal = formalize($title, case=>'upper'); $formal = formalize($title, justify=>'left'); $formal = formalize($title, :justify<right>, :case<title>); See S02 for the correspondence bet

[19:29] <Zoffix> timotimo: oh, apparently the requirement might be due to telemeh

[19:29] <Zoffix> At least that's what my Twitter DM tells me...

[19:29] <Zoffix> timotimo: for the Strawberry DLL on windows for latest Rakudo Star

[19:30] <timotimo> huh?

[19:30] <timotimo> what ;_;

[19:30] <timotimo> why even ;_;

[19:31] <Zoffix> .tell stmuk FWIW tag is missing for Star: https://twitter.com/hoelzro/status/859828762908778497

[19:31] <yoleaux> Zoffix: I'll pass your message to stmuk.

[19:31] <timotimo> i'll just go ahead and make telemeh off by default.

[19:31] <timotimo> so you'll have to enable it at Configure time

[19:31] <timotimo> anyway, didn't i merge telemeh after the release?

[19:32] <Zoffix> No idea

[19:33] <Zoffix> But apparently a user did not need Strawberry for 2017.01 release and now they do and then I got a DM saying the DLL porereq might be due to telemeh

[19:34] <Zoffix> This is part of it yeah? Then yeah, it wasn't even part of the release: https://github.com/MoarVM/MoarVM/commit/134d8f2075cf37fb8b7b580379082f15bfa49430

[19:35] <timotimo> that's just a small part of it

[19:35] <timotimo> the system itself has been introduced a buncha commits earlier

[19:36] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1075: Fix rotate on empty list

[19:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1075

[19:36] <Zoffix> This one still shows "master" as the branch stuff thing, not 2017.04: https://github.com/MoarVM/MoarVM/commit/7ee90f16eca8b8f4b7e7794dd9967bcbb53472a9

[19:36] <timotimo> didn't we have to build a non-release moarvm for rakudo stra?

[19:36] <timotimo> rakudo straw %)

[19:37] <Zoffix> Ohh. OK. :)

[19:37] <Zoffix> Right.

[19:37] <timotimo> anyway, stmuk can build moar with --no-telemeh

[19:37] <timotimo> and i switched telemeh off by default just now for newer versions of moarvm

[19:38] <Geth> ¦ rakudo/nom: b5c14bd108 | (Daniel Green)++ | src/core/Rakudo/Internals.pm

[19:38] <Geth> ¦ rakudo/nom: Fix rotate on empty list

[19:38] <Geth> ¦ rakudo/nom:

[19:38] <Geth> ¦ rakudo/nom: `my @a = (); @a.rotate(1)` used to error with `Modulation by zero`

[19:38] <Geth> ¦ rakudo/nom: before, but now does nothing.

[19:38] <Geth> ¦ rakudo/nom:

[19:38] <Geth> ¦ rakudo/nom: Passes `make m-spectest`.

[19:38] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b5c14bd108

[19:38] <Geth> ¦ rakudo/nom: f4cbdb64bc | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Rakudo/Internals.pm

[19:38] <Geth> ¦ rakudo/nom: Merge pull request #1075 from MasterDuke17/fix_rotate_on_empty_list

[19:38] <Geth> ¦ rakudo/nom:

[19:38] <Geth> ¦ rakudo/nom: Fix rotate on empty list

[19:38] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f4cbdb64bc

[20:40] <stmuk> foo

[20:40] <yoleaux> 19:31Z <Zoffix> stmuk: FWIW tag is missing for Star: https://twitter.com/hoelzro/status/859828762908778497

[20:41] <stmuk> Zoffix: yes I need to tag after I add a simple .bat for windows install (with --no-telemeh!)

[20:42] <timotimo> sorry about the telemeh disaster :\

[20:44] <stmuk> no worries .. at least it shows people are using it

[20:44] <stmuk> and I like the idea of Strawberry Star

[20:44] <stmuk> :D

[20:45] <timotimo> it only shows people are using star %)

[21:25] * Zoffix gives timotimo a club membership card

[21:25] <Zoffix> We have lots of members! :)
