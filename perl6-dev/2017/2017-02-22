[01:21] <Geth> ¦ roast: 0832cfbaeb | (Ronald Schmidt)++ | fudgeandrun

[01:21] <Geth> ¦ roast: fudgeandrun - remove error report for valid non-zero exit code

[01:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0832cfbaeb

[01:21] <Geth> ¦ roast: cd19dd62f8 | (Ronald Schmidt)++ | fudgeandrun

[01:21] <Geth> ¦ roast: Merge pull request #243 from ronaldxs/fix2-fudgeandrun-exit

[01:21] <Geth> ¦ roast:

[01:21] <Geth> ¦ roast: fudgeandrun - remove error report for valid non-zero exit code

[01:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cd19dd62f8

[10:24] <Geth> ¦ rakudo/nom: dc5fb20735 | (Jonathan Worthington)++ | src/Perl6/World.nqp

[10:24] <Geth> ¦ rakudo/nom: Improve CHECK errors.

[10:24] <Geth> ¦ rakudo/nom:

[10:24] <Geth> ¦ rakudo/nom: They now state that it was a CHECK block that went wrong, and give a

[10:24] <Geth> ¦ rakudo/nom: line number, rather than just SORRY and the exception text.

[10:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dc5fb20735

[10:25] <Geth> ¦ nqp: 3dff0f3cdb | (Jonathan Worthington)++ | tools/build/MOAR_REVISION

[10:25] <Geth> ¦ nqp: Bump MOAR_REVISION for exception SEGV fix.

[10:25] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3dff0f3cdb

[10:25] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.02...2017.02-3-ga95639c

[10:26] <Geth> ¦ rakudo/nom: b2eb1155a7 | (Jonathan Worthington)++ | tools/build/NQP_REVISION

[10:26] <Geth> ¦ rakudo/nom: Get latest MoarVM.

[10:26] <Geth> ¦ rakudo/nom:

[10:26] <Geth> ¦ rakudo/nom: Fixes a SEGV in exception handler resolution in `sub { INIT return }`.

[10:26] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b2eb1155a7

[10:26] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.02-22-g2685b8c...2017.02-36-g3dff0f3

[10:27] <Geth> ¦ roast: 8bc33ae5e5 | (Jonathan Worthington)++ | S04-statements/return.t

[10:27] <Geth> ¦ roast: Tests to cover RT #130825.

[10:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8bc33ae5e5

[10:27] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130825

[11:55] <IOninja> did it now..

[11:56] <IOninja> buggable!! y u eat 2.1GB of RAM!

[11:57] <IOninja> buggable tell Geth you're sorry for chewing through all the RAMs.

[11:57] <IOninja> huggable: hug Geth

[11:57] * huggable hugs Geth

[12:00] <lizmat> jnthn: would it be an idea to mark 42 xx foo lazy when foo is a bigint, and non-lazy otherwise ?

[12:05] <dogbert11> huggable: buggable

[12:05] <huggable> dogbert11, nothing found

[12:30] <jnthn> lizmat: Not sure about that. I guess my first surprise was that it returned List, not Seq...

[12:30] <jnthn> lizmat: But even then, a List can have lazy parts

[12:31] <jnthn> https://rt.perl.org/Ticket/Display.html?id=130812 is a bit funny to hunt down

[12:31] <jnthn> I can't understand how it manages to parse...

[12:32] <IOninja> m: say WHAT (42 xx *)

[12:32] <camelia> rakudo-moar b2eb11: OUTPUT: «(Seq)␤»

[12:32] <jnthn> o.O

[12:33] <jnthn> m: say WHAT (42 xx 10)

[12:33] <camelia> rakudo-moar b2eb11: OUTPUT: «(List)␤»

[12:33] <jnthn> I...don't much like that discontinuity...

[12:33] * IOninja neigther

[12:33] <jnthn> If we can get away with it, I'd prefer Seq all the time

[12:33] <jnthn> Guess we'd have to see what spectest has to say

[12:47] <jnthn> nqp: / "[" ~? "]"/

[12:47] <camelia> nqp-moarvm: OUTPUT: «Quantifier quantifies nothing. at line 2, near " \"]\"/"␤   at gen/moar/stage2/NQPHLL.nqp:765  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:panic)␤ from gen/moar/stage2/NQPP6QRegex.nqp:87  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPP6QRege…»

[12:47] <jnthn> m: / "[" ~? "]"/

[12:47] <camelia> rakudo-moar b2eb11: OUTPUT: «===SORRY!===␤Cannot find method 'rxtype' on object of type NQPMu␤»

[12:47] <jnthn> What on earth

[12:48] <jnthn> Oh...

[13:01] <Geth> ¦ rakudo/nom: 91a4ac5a67 | (Jonathan Worthington)++ | src/Perl6/Grammar.nqp

[13:01] <Geth> ¦ rakudo/nom: Panic upon solitary quantifiers in regexes.

[13:01] <Geth> ¦ rakudo/nom:

[13:01] <Geth> ¦ rakudo/nom: The error case here is unable to construct an AST that will not blow

[13:01] <Geth> ¦ rakudo/nom: up in interesting ways later on in compilation, so we need to abort.

[13:01] <Geth> ¦ rakudo/nom: Fixes RT #130812, where the `sorry` rather than `panic` led to an

[13:01] <Geth> ¦ rakudo/nom: internal error because of follow-up operations on a malformed AST.

[13:01] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130812

[13:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/91a4ac5a67

[13:02] <Geth> ¦ roast: a62d2cfe78 | (Jonathan Worthington)++ | S05-metachars/tilde.t

[13:02] <Geth> ¦ roast: Test to cover RT #130812.

[13:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a62d2cfe78

[13:02] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130812

[13:04] <[Coke]> jnthn++

[13:44] <Geth> ¦ roast: 3085a00cbf | (Jonathan Worthington)++ | S02-types/baggy.t

[13:44] <Geth> ¦ roast: Correct test sensitive to hash ordering.

[13:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3085a00cbf

[13:45] <Geth> ¦ nqp: a0de23c86b | (Jonathan Worthington)++ | tools/build/MOAR_REVISION

[13:45] <Geth> ¦ nqp: Bump MoarVM for two SEGV fixes.

[13:45] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a0de23c86b

[13:45] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.02-3-ga95639c...2017.02-7-g3d85900

[13:46] <IOninja> huh

[13:46] <Geth> ¦ rakudo/nom: 1cafc67b1a | (Jonathan Worthington)++ | tools/build/NQP_REVISION

[13:46] <Geth> ¦ rakudo/nom: Get latest MoarVM.

[13:46] <Geth> ¦ rakudo/nom:

[13:46] <Geth> ¦ rakudo/nom: * Fix SEGV on xx with a huge value on the right side

[13:46] <Geth> ¦ rakudo/nom: * Fix SEGV when an enormous number of combiners were put on a char

[13:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1cafc67b1a

[13:46] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.02-36-g3dff0f3...2017.02-37-ga0de23c

[13:46] <IOninja> m: my class Foo does Baggy {}; my $b = Foo.new: <a a b>; say WHAT $b.invert

[13:46] <camelia> rakudo-moar 91a4ac: OUTPUT: «(Seq)␤»

[13:47] <IOninja> oh OK

[13:47] <IOninja> thought it were a baggy and was worried the infix:<eqv> got broken for them

[13:48] <Geth> ¦ roast: 00c3c04394 | (Jonathan Worthington)++ | S15-nfg/many-combiners.t

[13:48] <Geth> ¦ roast: Test to cover SEGV in RT #129227.

[13:48] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/00c3c04394

[13:48] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=129227

[14:23] <IOninja> the stresstest's been weird lately. Highly variable in how long it takes to finish up, to the point I often suspect it hanged

[14:23] <IOninja> h'sbeen sittin' on t/spec/S17-procasync/stress.t for a few minutes now :/

[14:24] <IOninja> and it's done... and t/spec/S17-channel/stress.t was super fast. Other times in reverse, I don't even notice procasync one, but it takes ages to do t/spec/S17-channel/stress.t

[14:43] <IOninja> and what's more annoying is I'm running this on a 24-core VM but end up waiting for 2 test files to complete one after the other. >:|

[14:45] <lizmat> IOninja: I guess the "slow" algorithm needs some tuning then  :-)

[14:45] <IOninja> Hm. Wonder if this new weird behaviour have to do with my marking these files as `slow`: https://github.com/rakudo/rakudo/commit/266f345718b18b2d0c2313181091ad9d441877c9

[14:45] <IOninja> Maybe.

[14:46] <lizmat> basically, the "slow" files are "spread out" evenly over the available test files

[14:46] <IOninja> ZOFVM: Files=1225, Tests=132903, 243 wallclock secs (22.75 usr  3.50 sys + 4567.17 cusr 284.20 csys = 4877.62 CPU

[14:46] <IOninja> and there probably ends up one at the very end? The one I end up waiting on.

[14:46] <lizmat> so given say 1000 test files and say 50 slow files, one slow file will be started for each set of 20 test files

[14:46] * IOninja looks at code

[14:47] <lizmat> perhaps they should be evenly spread over the first half

[14:47] <IOninja> Will look more at it later. Need to do other stuff ATM.

[14:50] <Geth> ¦ rakudo/nom: a08e953018 | (Zoffix Znet)++ | 2 files

[14:50] <Geth> ¦ rakudo/nom: Fix .comb(Int) failing to work on Cool

[14:50] <Geth> ¦ rakudo/nom:

[14:50] <Geth> ¦ rakudo/nom: - Simply forward the capture from the Cool.comb method to Str.comb

[14:50] <Geth> ¦ rakudo/nom: - Make Cool.comb an `only` method to prevent infiniloop in dispatch

[14:50] <Geth> ¦ rakudo/nom:     when .comb is given wrong args

[14:50] <Geth> ¦ rakudo/nom:

[14:50] <Geth> ¦ rakudo/nom: Bug find: https://irclog.perlgeek.de/perl6-dev/2017-02-17#i_14120030

[14:50] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a08e953018

[14:51] <Geth> ¦ roast: ec65112712 | (Zoffix Znet)++ | S32-str/comb.t

[14:51] <Geth> ¦ roast: Test .comb(Int) works with Cool invocant

[14:51] <Geth> ¦ roast:

[14:51] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/a08e953018

[14:51] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ec65112712

[14:51] <IOninja> b2gills: done.

[15:06] <Geth> ¦ rakudo/nom: 742573724c | (Zoffix Znet)++ | 2 files

[15:06] <Geth> ¦ rakudo/nom: Fix hang in dispatch of .lines/.words when given wrong args

[15:06] <Geth> ¦ rakudo/nom:

[15:06] <Geth> ¦ rakudo/nom: The Cool candidates take a capture and forward it to Str candidates.

[15:06] <Geth> ¦ rakudo/nom: When the methods are given wrong arguments, we end up stuck in an

[15:06] <Geth> ¦ rakudo/nom: infinite loop with the Cool and Str candidates passing the stuff

[15:06] <Geth> ¦ rakudo/nom: to each other.

[15:06] <Geth> ¦ rakudo/nom:

[15:06] <Geth> ¦ rakudo/nom: Fix by making Cool candidates `only` methods.

[15:07] <Geth> ¦ rakudo/nom:

[15:07] <Geth> ¦ rakudo/nom: Bug find: https://irclog.perlgeek.de/perl6/2017-02-22#i_14144282

[15:07] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/742573724c

[15:08] <Geth> ¦ roast: c4ccaa4ce0 | (Zoffix Znet)++ | 2 files

[15:08] <Geth> ¦ roast: Test .lines/.words with wrong args do not hang

[15:08] <Geth> ¦ roast:

[15:08] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/742573724c

[15:08] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c4ccaa4ce0

[15:20] <travis-ci> Rakudo build failed. Jonathan Worthington 'Panic upon solitary quantifiers in regexes.

[15:20] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/204184707 https://github.com/rakudo/rakudo/compare/b2eb1155a7ba...91a4ac5a671b

[15:20] <buggable> [travis build above] ✓ All failures are due to timeout (0), missing build log (1), or GitHub connectivity (0).

[15:47] <jnthn> buggable++

[16:00] <[Coke]> getting a sporadically failing example test on doc/Type/IO/Socket/INET.pod6 (chunk 1) when run under load. seems to be fine on its own.

[16:00] <[Coke]> ww.

[19:50] <Geth> ¦ rakudo/nom: 755e25bd57 | (Elizabeth Mattijsen)++ | src/core/Numeric.pm

[19:50] <Geth> ¦ rakudo/nom: Make %% about 14x faster for Int,Int case

[19:50] <Geth> ¦ rakudo/nom:

[19:50] <Geth> ¦ rakudo/nom: - add candidate for Int:D, Int:D

[19:50] <Geth> ¦ rakudo/nom: - use native mod_i if possible

[19:50] <Geth> ¦ rakudo/nom:

[19:50] <Geth> ¦ rakudo/nom: This makes "($_ if $_%%5 for 1..1000000).sum" about 3.3x faster

[19:50] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/755e25bd57

[19:52] <IOninja> cool

[19:52] <IOninja> m: use nqp; say nqp::mod_I(nqp::decont(42),nqp::decont(0),Int))

[19:52] <camelia> rakudo-moar 742573: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected closing bracket␤at <tmp>:1␤------> 3od_I(nqp::decont(42),nqp::decont(0),Int)7⏏5)␤»

[19:52] <IOninja> m: use nqp; say nqp::mod_I(nqp::decont(42),nqp::decont(0),Int)

[19:53] <camelia> rakudo-moar 742573: OUTPUT: «Division by zero␤  in block <unit> at <tmp> line 1␤␤»

[19:53] <IOninja> aww

[19:53] <IOninja> m: use nqp; say nqp::mod_I(nqp::decont(42),nqp::decont(0),Num)

[19:53] <camelia> rakudo-moar 742573: OUTPUT: «P6opaque: get_boxed_ref could not unbox for the representation '20' of type Num␤  in block <unit> at <tmp> line 1␤␤»

[19:53] <IOninja> m: use nqp; say nqp::mod_n(nqp::decont(42),nqp::decont(0))

[19:53] <camelia> rakudo-moar 742573: OUTPUT: «This type cannot unbox to a native number: P6opaque, Int␤  in block <unit> at <tmp> line 1␤␤»

[19:54] <IOninja> m: use nqp; say nqp::mod_n(42e0,0e0)

[19:54] <camelia> rakudo-moar 742573: OUTPUT: «42␤»

[19:54] <IOninja> interesting...

[19:59] <timotimo> fantastic, lizmat

[20:17] <IOninja> What's this char = 2 bytes is from? https://github.com/rakudo/rakudo/blob/7425737/src/core/IO/Handle.pm#L589

[20:19] <lizmat> UTF-16 ?

[20:20] <lizmat> or rather, words rather than bytes ?

[20:20] * lizmat is not sure about JVM internals

[20:20] <IOninja> m: "I♥u".bytes.say

[20:20] <camelia> rakudo-moar 755e25: OUTPUT: «No such method 'bytes' for invocant of type 'Str'␤Did you mean '.encode($encoding).bytes'?␤  in block <unit> at <tmp> line 1␤␤»

[20:21] <IOninja> m: "I♥u".encode.elems.say

[20:21] <camelia> rakudo-moar 755e25: OUTPUT: «5␤»

[20:21] <IOninja> Hm. Well, it's wrong. Wondering what the Right™ is.

[20:21] <IOninja> j: "/tmp/Foo.pm6".IO.spurt: "I♥u so very much"; "/tmp/Foo.pm6".IO.open.readchars(3).say

[20:21] <camelia> rakudo-jvm fb4f16: OUTPUT: «I♥u ␤»

[20:21] <IOninja> j: "/tmp/Foo.pm6".IO.spurt: "I love you so very much"; "/tmp/Foo.pm6".IO.open.readchars(3).say

[20:21] <camelia> rakudo-jvm fb4f16: OUTPUT: «I love␤»

[20:22] <ugexe> m: say "I♥u".ords.elems

[20:22] <camelia> rakudo-moar 755e25: OUTPUT: «3␤»

[20:22] <IOninja> m: .encode.elems.say "u", "♥", "\c[rainbow flag]"

[20:22] <camelia> rakudo-moar 755e25: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Two terms in a row␤at <tmp>:1␤------> 3.encode.elems.say7⏏5 "u", "♥", "\c[rainbow flag]"␤    expecting any of:␤        infix␤        infix stopper␤        statement end␤        statem…»

[20:22] <IOninja> m: .encode.elems.say for "u", "♥", "\c[rainbow flag]"

[20:22] <camelia> rakudo-moar 755e25: OUTPUT: «1␤3␤14␤»

[20:23] <IOninja> m: .chars.say for "u", "♥", "\c[rainbow flag]"

[20:23] <camelia> rakudo-moar 755e25: OUTPUT: «1␤1␤2␤»

[20:23] <IOninja> two?

[20:23] <IOninja> I thought it was ZWS stuff

[20:23] <moritz> m: say "\c[ranbow flag]".substr(0).uniname

[20:23] <camelia> rakudo-moar 755e25: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized character name [ranbow flag]␤at <tmp>:1␤------> 3say "\c[ranbow flag7⏏5]".substr(0).uniname␤»

[20:23] <moritz> m: say "\c[rainbow flag]".substr(0).uniname

[20:23] <camelia> rakudo-moar 755e25: OUTPUT: «WAVING WHITE FLAG␤»

[20:23] <moritz> m: say "\c[rainbow flag]".substr(1).uniname

[20:23] <camelia> rakudo-moar 755e25: OUTPUT: «RAINBOW␤»

[20:24] <IOninja> m: say "\c[eye in speech bubble]".chars

[20:24] <camelia> rakudo-moar 755e25: OUTPUT: «1␤»

[20:24] <IOninja> m: say "\c[eye in speech bubble]".substr(0).uniname

[20:24] <camelia> rakudo-moar 755e25: OUTPUT: «EYE␤»

[20:24] <IOninja> m: say "\c[eye in speech bubble]".substr(*-1).uniname

[20:24] <camelia> rakudo-moar 755e25: OUTPUT: «EYE␤»

[20:24] <IOninja> m: say "\c[eye in speech bubble]".substr(1).uniname

[20:24] <camelia> rakudo-moar 755e25: OUTPUT: «Nil␤»

[20:25] <IOninja> .ask samcv is it normal that "\c[rainbow flag]".chars == 2 ? It's listed in ZWJ sequence: http://unicode.org/emoji/charts/emoji-zwj-sequences.html

[20:25] <yoleaux2> IOninja: I'll pass your message to samcv.

[20:31] <lizmat> m: use nqp; say nqp::mod_I(-13,4,Int); say nqp::mod_i(-13,4)   # shouldn't these be the same ?

[20:31] <camelia> rakudo-moar 755e25: OUTPUT: «3␤-1␤»

[20:31] <lizmat> jnthn: ^^^ ?

[20:38] <lizmat> ah, there's already a RT #128318

[20:38] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128318

[20:40] <IOninja> it's not wrong, but just inconsistent, innit?

[20:48] <geekosaur> make sure that inconsistency isn't deliberate. soemtimes you *want* floating point to behave differently (remember the whole negative zero thing?)

[20:48] <geekosaur> ...although you might ten need to actually change _I to check the type

[20:48] <geekosaur> instead of (presumably) assuming someone wanting the integer behavior uses _i

[20:48] <IOninja> Well, I don't know yet if it's right, I'm still trying to find the formula :}

[20:49] <IOninja> m: say -13**5 mod -13

[20:49] <camelia> rakudo-moar 755e25: OUTPUT: «0␤»

[20:50] <IOninja> m: use nqp; say nqp::mod_I(-13**5, -13)

[20:50] <camelia> rakudo-moar 755e25: OUTPUT: «===SORRY!===␤Arg count 2 doesn't equal required operand count 4 for op 'mod_I'␤»

[20:50] <IOninja> m: use nqp; say nqp::mod_I(-13**5, -13, Int)

[20:50] <camelia> rakudo-moar 755e25: OUTPUT: «0␤»

[20:50] <IOninja> m: use nqp; say nqp::mod_i(-13**5, -13)

[20:50] <camelia> rakudo-moar 755e25: OUTPUT: «0␤»

[20:50] <IOninja> 0 is good

[20:51] <IOninja> I don't know what I'm doing \o/

[20:51] * IOninja relocates

[20:59] <Geth> ¦ rakudo/nom: 5ec25177b7 | (Elizabeth Mattijsen)++ | src/core/Int.pm

[20:59] <Geth> ¦ rakudo/nom: Make Int % Int about 8x faster

[20:59] <Geth> ¦ rakudo/nom:

[20:59] <Geth> ¦ rakudo/nom: - use nqp::mod_i if possible (hacked for RT #128318)

[20:59] <Geth> ¦ rakudo/nom:

[20:59] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128318

[20:59] <Geth> ¦ rakudo/nom: If RT #128318 would have been fixed, this would have made Int % Int

[20:59] <Geth> ¦ rakudo/nom: about 10x faster.

[20:59] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=128318

[20:59] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5ec25177b7

[21:16] <b2gills> my disconnect from earlier was caused by Perl 6 code that occasionally managed nearly 500% cpu on a 4 core (+4 hyperthreads) machine, according to `top`

[21:19] <moritz> .oO( know your ulimits )

[21:20] <b2gills> It was the RAM usage and swapping that forced me to boot up another computer and ssh in to kill it

[21:52] <timotimo> jvm always uses utf16, i think?

[21:53] <lizmat> yeah, I think the 2*chars was a rude approximation :-)

[22:03] <IOninja> I filed it as https://rt.perl.org/Ticket/Display.html?id=130840#ticket-history seems its in want of a proper nqp::readcharsfh impl on JVM

[22:06] <jnthn> The JVM backend is in want of a proper strings impl :)

[22:25] <MasterDuke> anyone have any thoughts on the modified-as-of-yesterday-to-take-into-account-system-bittedness-(which-i-hope-isn't-a-real-word-but-i-can't-think-of-the-right-one) https://github.com/rakudo/rakudo/pull/1021?

[22:34] <lizmat> hmmm... it appears that if I turn foo xx N into a Seq, it breaks >>xx<<  :-(

[22:35] <jnthn> Hmmm :S

[22:35] <MasterDuke> heh, thought the '>>xx<<' was another emoticon at first read

[22:35] <jnthn> Cross-eyed with big ears? :)

[22:36] <MasterDuke> sad elephant instead of sad panda?

[22:37] <jnthn> hehe

[22:40] <MasterDuke> jnthn: btw, any pointers on my Binder.java problem?

[22:40] <jnthn> MasterDuke: I'm about to go to sleep now, but ask me again tomorrow and I'll take a look :)

[22:41] <MasterDuke> thanks, will do

[22:41] <lizmat> fwiw, it breaks with consumed iterator error

[22:43] <jnthn> m: say ((1,2),(3,4)) >>Z<< (<a b>, <c d>)

[22:43] <camelia> rakudo-moar 5ec251: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Missing << or >>␤at <tmp>:1␤------> 3say ((1,2),(3,4)) >>Z<7⏏5< (<a b>, <c d>)␤    expecting any of:␤        infix␤        infix stopper␤»

[22:44] <jnthn> m: say ((1,2),(3,4)) >>[Z]<< (<a b>, <c d>)

[22:44] <camelia> rakudo-moar 5ec251: OUTPUT: «This Seq has already been iterated, and its values consumed␤(you might solve this by adding .cache on usages of the Seq, or␤by assigning the Seq into an array)␤  in block <unit> at <tmp> line 1␤␤»

[22:44] <jnthn> Seems it's a more general problem than just xx

[22:54] <IOninja> m: "/tmp/Foo.pm6".IO.spurt: "I love you so very much"; with "/tmp/Foo.pm6".IO.open { .read(2); .seek: 1, SeekFromCurrent; .tell.say }

[22:54] <camelia> rakudo-moar 5ec251: OUTPUT: «3␤»

[22:55] <IOninja> m: "/tmp/Foo.pm6".IO.spurt: "I love you so very much"; with "/tmp/Foo.pm6".IO.open { .readchars(2); .seek: 1, SeekFromCurrent; .tell.say }

[22:55] <camelia> rakudo-moar 5ec251: OUTPUT: «24␤»

[22:55] <IOninja> looks .readchars messes up the current position as far as seekage is concerned (it's fine if you try to read more, for example)

[22:55] <lizmat> jnthn: ah, good point

[22:55] <IOninja> only on moarvm

[22:55] <lizmat> that means I'll direct my attention to that tomorrow first

[22:57] <jnthn> I...didn't know we had readchars :P

[22:57] <jnthn> Oh wait, maybe I did :)

[22:58] <jnthn> IOninja: fwiw, note current position for reading chars is...involved

[22:58] <jnthn> Note sufficiently to be that far off

[22:58] <jnthn> But it's at byte level

[22:58] <jnthn> And we have to read ahead at the bye level to know the next thing isn't a combining char or other non-break thingy in order to hand back the char before it

[22:59] <jnthn> *byte

[22:59] <IOninja> m: "/tmp/Foo.pm6".IO.spurt: "I love you so very much"; with "/tmp/Foo.pm6".IO.open { .readchars(2).say; .tell.say }

[22:59] <camelia> rakudo-moar 5ec251: OUTPUT: «I ␤3␤»

[22:59] <IOninja> m: "/tmp/Foo.pm6".IO.spurt: "I love you so very much"; with "/tmp/Foo.pm6".IO.open { .readchars(2).say; .readchars(3).say; .tell.say }

[22:59] <camelia> rakudo-moar 5ec251: OUTPUT: «I ␤lov␤6␤»

[22:59] <IOninja> Seems only .seek is affected though

[22:59] <b2gills> sounds like `readchars` is buffered

[22:59] <jnthn> Yeah, something's odd with seek there

[23:00] <jnthn> Buffered - well kinda :)

[23:00] <IOninja> m: say "I love you so very much".chars

[23:00] <camelia> rakudo-moar 5ec251: OUTPUT: «23␤»

[23:00] <IOninja> aha

[23:00] <IOninja> m: "/tmp/Foo.pm6".IO.spurt: "I love you\nso very much"; with "/tmp/Foo.pm6".IO.open { .readchars(2); .seek: 1, SeekFromCurrent; .tell.say }

[23:00] <camelia> rakudo-moar 5ec251: OUTPUT: «24␤»

[23:00] <IOninja> m: "/tmp/Foo.pm6".IO.spurt: "I love you\nso very much" x 100; with "/tmp/Foo.pm6".IO.open { .readchars(2); .seek: 1, SeekFromCurrent; .tell.say }

[23:00] <camelia> rakudo-moar 5ec251: OUTPUT: «2301␤»

[23:00] <jnthn> Anyway, just sayin' that if it's off-by-one it's actually not lying :)

[23:00] <IOninja> m: "/tmp/Foo.pm6".IO.spurt: "I love you\nso very much" x 10000; with "/tmp/Foo.pm6".IO.open { .readchars(2); .seek: 1, SeekFromCurrent; .tell.say }

[23:00] <camelia> rakudo-moar 5ec251: OUTPUT: «32769␤»

[23:00] <IOninja> m: "/tmp/Foo.pm6".IO.spurt: "I love you\nso very much" x 20000; with "/tmp/Foo.pm6".IO.open { .readchars(2); .seek: 1, SeekFromCurrent; .tell.say }

[23:00] <camelia> rakudo-moar 5ec251: OUTPUT: «32769␤»

[23:01] <IOninja> b2gills++ indeed looks like something buffering or something

[23:01] <jnthn> Yeah, that looks like some kinda buffering

[23:01] * IOninja will just file this one

[23:01] <IOninja> Too hard for me, yet :)

[23:01] <jnthn> The .tell being off-by-some without .seek is the thing I was talking about, to be clear.

[23:01] <jnthn> I don't really consider that part a bug

[23:02] <jnthn> The .seek doing something way off, otoh...

[23:02] <jnthn> Sleep time; 'night

[23:02] <IOninja> night

[23:10] <IOninja> filed as https://rt.perl.org/Ticket/Display.html?id=130843

[23:18] <Geth> ¦ rakudo/nom: 90dfdf581d | (Nick Logan)++ | tools/install-dist.pl

[23:18] <Geth> ¦ rakudo/nom: Refactor install-dist.pl

[23:18] <Geth> ¦ rakudo/nom:

[23:18] <Geth> ¦ rakudo/nom: * Create just one Distribution class per routine

[23:18] <Geth> ¦ rakudo/nom: * Add more descriptive CLI option names

[23:18] <Geth> ¦ rakudo/nom: * Fix missed `Distribution::Path.new(s/:file/:meta-file/)` switch-a-roo

[23:18] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/90dfdf581d

[23:23] <ugexe> nine: https://github.com/rakudo/rakudo/blob/90dfdf581d54348fef24c0f479e604947250632f/tools/install-dist.pl#L20 deleting the version file here makes its non-functional because upgrade-repository() will be rerun on it again (it errors trying to upgrade from v0->v1, since the repo was is actually v2)

[23:24] <ugexe> so I suspect we need a way to determine if a repo without a version file is actually v0 or not

[23:33] <MasterDuke> timotimo: i was surprised by the time difference between $a+=5 and $a=$a+5, a profile is kind of interesting. += is 25% spesh, 75% jit, 6000262 frames entered (1999795 eliminated by in-lining). = + is 100% jit, 671 frames entered(5999385 eliminated by in-lining)

[23:34] <MasterDuke> for `my $a = 0; loop (my $b = 0; $b <= 10000000; $b+=5) { $a+=$b }; say $a` vs `my $a = 0; loop (my $b = 0; $b <= 10000000; $b=$b+5) { $a=$a+$b }; say $a`

[23:45] <lizmat> good night, #perl6-dev!

[23:56] <IOninja> night

[23:58] <samcv> IOninja, it should be 1 character. there are some that show up as multiple characters still
