[00:13] <Geth> ¦ rakudo: 1815c36843 | (Zoffix Znet)++ | 4 files

[00:13] <Geth> ¦ rakudo: Make `else`-less `if`/`with` blocks 3.4x faster…

[00:13] <Geth> ¦ rakudo:

[00:13] <Geth> ¦ rakudo: …when in sunk context and when condition is false.

[00:13] <Geth> ¦ rakudo:

[00:13] <Geth> ¦ rakudo: When `else` is absent, we stick an `Empty` in its place, to

[00:13] <Geth> ¦ rakudo: facilitate list comprehension stuff. When in sink context,

[00:13] <Geth> ¦ rakudo: however, it's useless and we're paying to have it sunk. Annotate

[00:13] <Geth> ¦ rakudo: <…commit message has 9 more lines…>

[00:13] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1815c36843

[00:13] <Zoffix> ^ could use an extra pair of eyes on it, as I'm not 100% certain the END blocks getting nulls is entirely benign.

[00:15] <Zoffix> Also Fixes RT#130613

[00:15] <synopsebot> RT#130613 [open]: https://rt.perl.org/Ticket/Display.html?id=130613 [OPTIMIZER][LTA] "if" without "else" much slower than "if" with empty "else"

[00:17] <ilmari> Zoffix: I have no opinion on that bit, but shouldn't the {~$visit.node} in the warning be $value?

[00:17] * ilmari - the drive-by nitpicker

[00:19] <Zoffix> ilmari++ good eye :)

[00:21] <Zoffix> Wonder what codepath would have $value.node as true, yet ~$value.node as empty string.

[00:21] <Zoffix> m: ''

[00:21] <camelia> rakudo-moar 38897d19c: OUTPUT: «WARNINGS for <tmp>:␤Useless use of constant string "" in sink context (line 1)␤»

[00:21] <Zoffix> ^ cause that doesn't even go through that path

[00:28] <TimToady> m: say set($[1,2,3],$[1,2,3])

[00:28] <camelia> rakudo-moar 38897d19c: OUTPUT: «set([1 2 3] [1 2 3])␤»

[00:28] <TimToady> m: say set([1,2,3],[1,2,3])

[00:28] <camelia> rakudo-moar 38897d19c: OUTPUT: «set(1 2 3)␤»

[00:29] <TimToady> that looks wrongish to me, insofar as [] is not ()

[00:29] <Zoffix> m: say set((1,2,3),(1,2,3))

[00:29] <camelia> rakudo-moar 38897d19c: OUTPUT: «set(1 2 3)␤»

[00:29] <Zoffix> it gets flattened in slurpage

[00:30] <Zoffix> m: dd Set.new: (1,2,3),(1,2,3)

[00:30] <camelia> rakudo-moar 38897d19c: OUTPUT: «Set.new((1, 2, 3))␤»

[00:30] <Zoffix> m: dd Set.new: [1,2,3],[1,2,3]

[00:30] <camelia> rakudo-moar 38897d19c: OUTPUT: «Set.new([1, 2, 3],[1, 2, 3])␤»

[00:31] <TimToady> well, at least there's some way to get to it

[00:32] <Zoffix> It breaks 6.c spec tho. There's a test that specifically tests that List is not a value type

[00:33] <Zoffix> Two: https://github.com/perl6/roast/commit/5670acf676d65167e892515a42b71c81984f39f2

[00:33] <TimToady> possible we should distinguish a Tuple type in 6.d

[00:35] <Geth> ¦ rakudo: 82dbada3c0 | (Zoffix Znet)++ | src/Perl6/Optimizer.nqp

[00:35] <Geth> ¦ rakudo: Use processed value instead of original in message; ilmari++

[00:35] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/82dbada3c0

[02:04] <Geth> ¦ rakudo: jstuder-gh++ created pull request #1350: Issue 1204: Don't wrap quoteword in Slip if one word

[02:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1350

[02:15] <Zoffix> ZOFFLOP: passing TODOs in t/spec/S12-construction/destruction.t

[02:16] <Zoffix> Also, I REALLY hope this stresstest run time is not a fluke: 122s vs 159s usual time :)

[02:41] <Zoffix> a fluke :)

[02:41] <Zoffix> ZOFVM: Files=1286, Tests=152982, 154 wallclock secs (21.12 usr  3.29 sys + 3318.10 cusr 172.46 csys = 3514.97 CPU)

[03:03] <Geth> ¦ roast: dcce881633 | (Zoffix Znet)++ | S32-io/out-buffering.t

[03:03] <Geth> ¦ roast: Test prompt doesn't hang on TTYs

[03:03] <Geth> ¦ roast:

[03:03] <Geth> ¦ roast: RT#131700: https://rt.perl.org/Ticket/Display.html?id=131700

[03:03] <Geth> ¦ roast: Rakudo fix: https://github.com/MoarVM/MoarVM/commit/4541cf6f6c

[03:03] <Geth> ¦ roast:             https://github.com/perl6/nqp/commit/659ced5b57

[03:03] <Geth> ¦ roast:             https://github.com/rakudo/rakudo/commit/096c4eadbe

[03:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/dcce881633

[03:03] <synopsebot> RT#131700 [new]: https://rt.perl.org/Ticket/Display.html?id=131700 [IO] prompt not working on bash-on-ubuntu on win10

[08:19] <user100500> 🦋

[10:22] <[Tux]> Rakudo version 2017.12-64-g096c4eadb - MoarVM version 2017.12-14-g4541cf6f6

[10:22] <[Tux]> csv-test-xs-20      0.427 -  0.432

[10:22] <[Tux]> csv-ip5xs           1.125 -  1.155

[10:22] <[Tux]> test-t --race       1.176 -  1.257

[10:22] <[Tux]> test-t              2.859 -  2.899

[10:22] <[Tux]> test               11.622 - 11.624

[10:22] <[Tux]> csv-parser         12.499 - 12.527

[10:22] <[Tux]> csv-ip5xs-20       13.138 - 13.311

[10:22] <[Tux]> test-t-20 --race   18.015 - 20.247

[10:22] <[Tux]> test-t-20          51.361 - 51.612

[11:08] <Geth> ¦ tap-harness6: hankache++ created pull request #23: Enhance prove6 pod and create a separate README

[11:08] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/pull/23

[13:45] <dogbert17> lizmat: tried changing https://github.com/rakudo/rakudo/blob/master/src/core/Any-iterable-methods.pm#L1925 yesterday but I probably did something wrong since it didn't work :(

[13:45] <dogbert17> m: say Any.skip(*-1)

[13:45] <camelia> rakudo-moar 096c4eadb: OUTPUT: «No such method 'Int' for invocant of type 'WhateverCode'␤  in block <unit> at <tmp> line 1␤␤»

[13:46] <lizmat> dogbert17: busy with some other stuff atm, will look at it again in a few hours (if all goes well)

[13:47] <dogbert17> good luck with other stuff :)

[13:51] <geekosaur> doesn't that need a dispatcher for a Callable for WhateverCode to work? otherwise, yeh, I'd expect that error because it tries to coerce the WhateverCode to Int

[13:51] <geekosaur> which is not automatic

[13:52] <geekosaur> er, not automatically going to run it and hope it's an Int result, because WhateverCode needs something as input as well and autocoerce doesn't know what to feed it

[13:52] <lizmat> well, I've been thinking of adding a .Int to WheteverCode, but couldn't find a way to get the parameter it needs reliably

[13:52] <geekosaur> right

[14:00] <dogbert17> geekosaur: the reason I asked about this is that the docs claims that this is supported. https://docs.perl6.org/type/Any#method_skip

[14:03] <lizmat> yeah, and it should  :-)

[14:04] <timotimo> i don't think .Int to WhateverCode can be made to work; it'd have to inspect the rest of the argument list and find what object to call a method like .elems on. how is it supposed to know?

[14:04] <lizmat> indeed, so I gave up on that idea  :-)

[14:04] <timotimo> like, do we want a coerced-to-Int WhateverCode to just take the first argument - because it's usually the invocant - and call .elems on it - because that's often what you want - for this case? %)

[14:04] <lizmat> too magic

[14:04] <geekosaur> yes, or even if it should be .elems or something else, in the most general case

[14:05] <timotimo> well, i suppose it could be .Int

[14:06] <dogbert17> m: say (1..5).tail(*-2)

[14:06] <camelia> rakudo-moar 096c4eadb: OUTPUT: «(3 4 5)␤»

[14:08] <dogbert17> m: say (1..5).skip(*-2)

[14:08] <camelia> rakudo-moar 096c4eadb: OUTPUT: «No such method 'Int' for invocant of type 'WhateverCode'␤  in block <unit> at <tmp> line 1␤␤»

[15:36] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1351: Remove some extraneous semicolons

[15:36] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1351

[15:37] <Geth> ¦ rakudo: f982d9e07b | MasterDuke17++ | 3 files

[15:37] <Geth> ¦ rakudo: Remove some extraneous semicolons

[15:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f982d9e07b

[15:37] <Geth> ¦ rakudo: 08c97d6135 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | 3 files

[15:37] <Geth> ¦ rakudo: Merge pull request #1351 from MasterDuke17/remove_extra_semicolons

[15:37] <Geth> ¦ rakudo:

[15:37] <Geth> ¦ rakudo: Remove some extraneous semicolons

[15:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/08c97d6135

[16:15] <lizmat> https://stackoverflow.com/questions/48035608/what-is-the-perl-6-equivalent-of-the-perl-5-command-binmodestdout-unixencod  # bug ?

[17:12] <Geth> ¦ roast: 22f7cf220c | usev6++ | 3 files

[17:12] <Geth> ¦ roast: [jvm] Re-fudge tests for RT #127756

[17:12] <Geth> ¦ roast:

[17:12] <Geth> ¦ roast: Tests have been unfudged with 8533ec6924, but they

[17:12] <Geth> ¦ roast: do not pass on the JVM, yet.

[17:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/22f7cf220c

[17:12] <Geth> ¦ roast: 2452b9dce1 | usev6++ | 4 files

[17:12] <Geth> ¦ roast: [jvm] Fudge some newly added tests

[17:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2452b9dce1

[17:12] <synopsebot> RT#127756 [resolved]: https://rt.perl.org/Ticket/Display.html?id=127756 setelems on native arrays doesn't clear the array

[17:55] <Geth> ¦ rakudo/js: 4 commits pushed by pmurias++

[17:55] <Geth> ¦ rakudo/js: 5c9e00d587 | [js] Use a int array where we should

[17:55] <Geth> ¦ rakudo/js: 8c693bf8ec | [js] Enable the unicode MATHEMATICAL ITALIC SMALL E constant alias

[17:55] <Geth> ¦ rakudo/js: 3b453c575d | Emit more self contained code for some things rather than depend on migration

[17:55] <Geth> ¦ rakudo/js: 0a42502360 | [js] Make nqp::p6typecheckrv do type coercions when needed

[17:55] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/compare/bbeb40d556...0a42502360

[18:25] <Geth> ¦ 6.d-prep: 7b22b72451 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[18:25] <Geth> ¦ 6.d-prep: A pox on firefox

[18:25] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/7b22b72451

[18:26] <Geth> ¦ 6.d-prep: 29d55f97fb | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[18:26] <Geth> ¦ 6.d-prep: Update Zoffix's 6.d reviewer commit mark

[18:26] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/29d55f97fb

[18:37] <Zoffix> At least the first half of this commit looks like it's masking a bug: https://github.com/perl6/roast/commit/e5b428d95621d703bd0c9c7fba5f4b1a26bab7ba

[18:37] <Zoffix> m: role Bar { method z { ::?ROLE } }; class Foo does Bar {}; use nqp; dd nqp::eqaddr(Foo.z, Bar)

[18:37] <camelia> rakudo-moar 08c97d613: OUTPUT: «0␤»

[18:38] <Zoffix> Shouldn't it be eqaddr? They're the same types, are they not?

[18:38] <Zoffix> m: role Bar { method z { ::?ROLE } }; use nqp; dd nqp::eqaddr(Bar.z, Bar)

[18:38] <camelia> rakudo-moar 08c97d613: OUTPUT: «0␤»

[18:43] <Geth> ¦ rakudo: ad684de383 | (Jeremy Studer)++ | 2 files

[18:43] <Geth> ¦ rakudo: Strip Slip wrapping quoteword if one only word

[18:43] <Geth> ¦ rakudo:

[18:43] <Geth> ¦ rakudo: When using word quoting with interpolation, interpolated words are

[18:43] <Geth> ¦ rakudo: wrapped in a Slip. This is desirable when there are multiple words, as

[18:44] <Geth> ¦ rakudo: the interpolated values in the Slip get integrated into the surrounding

[18:44] <Geth> ¦ rakudo: List, but is problematic when there is only one word total (prior to

[18:44] <Geth> ¦ rakudo: interpolation).

[18:44] <Geth> ¦ rakudo: <…commit message has 9 more lines…>

[18:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ad684de383

[18:44] <Geth> ¦ rakudo: e2c7bcaec7 | (Zoffix Znet)++ (committed using GitHub Web editor) | 2 files

[18:44] <Geth> ¦ rakudo: Merge pull request #1350 from jstuder-gh/issue_1204

[18:44] <Geth> ¦ rakudo:

[18:44] <Geth> ¦ rakudo: Issue 1204: Don't wrap quoteword in Slip if one word

[18:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/e2c7bcaec7

[18:56] <Zoffix> Listed the commit for re-review on https://github.com/perl6/6.d-prep/issues/2 and filed Issue R#1352

[18:56] <synopsebot> R#1352 [open]: https://github.com/rakudo/rakudo/issues/1352 ::?ROLE is not nqp::addr the role's type, breaking `===`

[19:09] <Geth> ¦ 6.d-prep: 8361d8ea2a | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[19:09] <Geth> ¦ 6.d-prep: Document glop aliases don't filter some old commtis for some reason

[19:09] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/8361d8ea2a

[20:45] <Geth> ¦ roast: aca8689bc4 | (Zoffix Znet)++ | S32-hash/adverbs.t

[20:45] <Geth> ¦ roast: [v6.d REVIEW] Use politer language

[20:45] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/aca8689bc4

[21:14] <Geth> ¦ roast: b3936232aa | (Zoffix Znet)++ | S32-num/rat.t

[21:14] <Geth> ¦ roast: [v6.d REVIEW] Respec fudged Inf.Int/1 test

[21:14] <Geth> ¦ roast:

[21:14] <Geth> ¦ roast: Closes RT#74648: https://rt.perl.org/Ticket/Display.html?id=74648

[21:14] <Geth> ¦ roast:

[21:14] <Geth> ¦ roast: Inf.Int Fails, because Inf is not representable in Int. This makes

[21:14] <Geth> ¦ roast: the test `Failure/1`, which rightfully explodes and shouldn't be

[21:14] <Geth> ¦ roast: making any Rats.

[21:14] <synopsebot> RT#74648 [resolved]: https://rt.perl.org/Ticket/Display.html?id=74648 Rakudo fails when creating Rat from Inf.Int / 1

[21:14] <Geth> ¦ roast:

[21:14] <Geth> ¦ roast: Unfudge and change test to `throws-like`

[21:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b3936232aa

[21:24] <Geth> ¦ roast: ede7488dcc | usev6++ | 3 files

[21:24] <Geth> ¦ roast: [jvm] Use better todo message

[21:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ede7488dcc

[21:24] <Geth> ¦ roast: b70f1883fe | usev6++ | S06-traits/misc.t

[21:24] <Geth> ¦ roast: [jvm] Skip test that selects wrong multi

[21:24] <Geth> ¦ roast:

[21:24] <Geth> ¦ roast: Currently, the code does not die when the wrong multi is called. This

[21:24] <Geth> ¦ roast: is caused by a different bug. Since fixing this second bug would make

[21:24] <Geth> ¦ roast: the test explode, it's better to skip it for now.

[21:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b70f1883fe

[21:28] <Geth> ¦ rakudo: 9d8bd49027 | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/ChangeLog

[21:28] <Geth> ¦ rakudo: Link to the wiki for the upcoming changelog section

[21:28] <Geth> ¦ rakudo:

[21:28] <Geth> ¦ rakudo: Still hoping that this will allow others to make micro-contributions.

[21:28] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9d8bd49027

[21:34] <Geth> ¦ rakudo: 4945dc40e3 | usev6++ | src/vm/jvm/runtime/org/perl6/rakudo/Binder.java

[21:34] <Geth> ¦ rakudo: [jvm] Mention modifiable constraint in bind fail

[21:34] <Geth> ¦ rakudo:

[21:34] <Geth> ¦ rakudo: The error message has been improved for MoarVM with 053729c7d4.

[21:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4945dc40e3

[21:47] <Zoffix> m: Inf.Rat.nude.say

[21:47] <camelia> rakudo-moar e2c7bcaec: OUTPUT: «(Inf 0)␤»

[21:48] <Zoffix> Gonna try to rework ^ that to be IEEE Rats instead right now.

[21:48] <Zoffix> (so 1/0 for Inf, -1/0 for -Inf, and 0/0 for NaN0

[21:48] <Zoffix> m: NaN.Rat.isNaN.say

[21:48] <camelia> rakudo-moar e2c7bcaec: OUTPUT: «False␤»

[21:49] <Zoffix> 'cause I noticed this bug ^ and I figure instead of fixing it, should try to do the IEE rats instead and see if any 6.c spec blocks that change

[21:49] <lizmat> Zoffix: I vaguely recall it originally being 1/0 and that Inf/0 was a solution to something

[21:50] <Zoffix> lizmat: I vaguely recall it was being 1/0 exploding, so Inf.Rat.Num did not round-trip. But now 1/0 converts to Inf Num

[21:51] <Zoffix> mc: (1/0).Num

[21:51] <committable6> Zoffix, ¦2015.12: «»

[21:51] <Zoffix> hm

[21:51] <Zoffix> mc: (1/0).Num.say

[21:51] <committable6> Zoffix, ¦2015.12: «Inf␤»

[21:51] <Zoffix> Well, I trust there are tests covering whatever the issue was being addressed, so the change would trigger those tests.

[21:51] <lizmat> one can hope  :-)

[21:54] <jnthn> Zoffix++ # massive test review

[21:55] <Geth> ¦ roast: a257fb79a6 | (Zoffix Znet)++ | S32-num/rat.t

[21:55] <Geth> ¦ roast: [v6.d REVIEW] Use correcter tests for Num.Rat conversions

[21:55] <Geth> ¦ roast:

[21:55] <Geth> ¦ roast: The test descriptions say `==` is being checked, but the `is` routine

[21:55] <Geth> ¦ roast: is actually testing Str views of Rats and Nums. Change to `cmp-ok` with

[21:55] <Geth> ¦ roast: `==` as comparator, since IEEE-style zero-denominator Rats are explosive

[21:55] <Geth> ¦ roast: in Str views, while non-explosive in Num views, so they will match here.

[21:55] <Geth> ¦ roast:

[21:55] <Geth> ¦ roast: Since NaN does not `==` to itself, use `.isNaN` test for it. Fudge it for now,

[21:55] <Geth> ¦ roast: since there's currently a to-be-fixed bug where NaN.Rat is not `isNaN`.

[21:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a257fb79a6

[23:04] <Geth> ¦ nqp: cccaf20352 | usev6++ | 10 files

[23:04] <Geth> ¦ nqp: [jvm] Port fix for clearing old VMArray elements

[23:04] <Geth> ¦ nqp:

[23:04] <Geth> ¦ nqp: This ports a bug fix for MoarVM and resolves RT #127756 for the JVM backend.

[23:04] <Geth> ¦ nqp:

[23:04] <Geth> ¦ nqp: See https://github.com/MoarVM/MoarVM/commit/43c926f9e0 which has a detailed

[23:04] <Geth> ¦ nqp: commit message (Zoffix++).

[23:04] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cccaf20352

[23:04] <synopsebot> RT#127756 [resolved]: https://rt.perl.org/Ticket/Display.html?id=127756 setelems on native arrays doesn't clear the array

[23:41] <Geth> ¦ rakudo: 042cb7413f | (Zoffix Znet)++ | 2 files

[23:41] <Geth> ¦ rakudo: Use IEEE-style Rationals for ±Inf/NaN Num conversions

[23:41] <Geth> ¦ rakudo:

[23:41] <Geth> ¦ rakudo: Fixes RT#130459: https://rt.perl.org/Ticket/Display.html?id=130459

[23:41] <Geth> ¦ rakudo: Fixes RT#130171: https://rt.perl.org/Ticket/Display.html?id=130171

[23:41] <Geth> ¦ rakudo: Fixes RT#128857: https://rt.perl.org/Ticket/Display.html?id=128857

[23:41] <Geth> ¦ rakudo:

[23:41] <Geth> ¦ rakudo: Fix follows TimToady++'s recommendation:

[23:41] <synopsebot> RT#130459 [new]: https://rt.perl.org/Ticket/Display.html?id=130459 Some operations with Inf.Rat blow up (Inf.Rat.perl)

[23:41] <Geth> ¦ rakudo: <…commit message has 24 more lines…>

[23:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/042cb7413f

[23:41] <synopsebot> RT#130171 [new]: https://rt.perl.org/Ticket/Display.html?id=130171 [LTA] Inf.Rat.perl produces a really bad error message (Inf.Rat.perl)

[23:42] <synopsebot> RT#128857 [new]: https://rt.perl.org/Ticket/Display.html?id=128857 [LTA] ∞.Rat ~~ Rat is False

[23:43] <Zoffix> ^ rest of commit message traces how we got Num-numerator rationals. I think overall my change addresses all the problems that had to be solved.

[23:46] <Zoffix> .oO( Rule 3: Larry can be blamed for everything :P )

[23:50] <Geth> ¦ roast: c3086244fd | (Zoffix Znet)++ | S32-num/rat.t

[23:50] <Geth> ¦ roast: Expand spec on ±Inf/NaN <-> Rational conversions

[23:50] <Geth> ¦ roast:

[23:50] <Geth> ¦ roast: - Conversions give zero-denominator Rationals with ±1/0 numerators

[23:50] <Geth> ¦ roast: - .Str views explode

[23:50] <Geth> ¦ roast: - Rational.Num.[Fat]Rat normalizes numerator to ±1/0

[23:50] <Geth> ¦ roast:

[23:50] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/042cb7413f

[23:50] <Geth> ¦ roast: Covers RT#130459: https://rt.perl.org/Ticket/Display.html?id=130459

[23:50] <Geth> ¦ roast: Covers RT#130171: https://rt.perl.org/Ticket/Display.html?id=130171

[23:50] <Geth> ¦ roast: Covers RT#128857: https://rt.perl.org/Ticket/Display.html?id=128857

[23:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c3086244fd

[23:52] <MasterDuke> Zoffix++
