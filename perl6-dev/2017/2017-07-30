[03:48] <jdv79> i tried using 6.d.preview but i still had to up the max threads to get my very async program to not bind up.  i thought that shouldnt happen.

[03:51] <jdv79> i basically kick off 30 or so start blocks that sleep and loop forever

[04:02] <ugexe> actual sleep, or a Promise.in(...) type thing

[04:02] <ugexe> ?

[04:03] <jdv79> literal sleep()

[04:40] <geekosaur> I thought 6.d's sleep was fixed to be multithread sane

[05:19] <Geth> ¦ rakudo: ugexe++ created pull request #1125: Add candidates method as CURI recommendation manager

[05:19] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1125

[08:34] <[Tux]> This is Rakudo version 2017.07-90-g51e59eeb5 built on MoarVM version 2017.07-263-gb161c851

[08:34] <[Tux]> csv-ip5xs        2.613

[08:34] <[Tux]> test            12.610

[08:34] <[Tux]> test-t           4.389 - 4.369

[08:34] <[Tux]> csv-parser      12.861

[10:12] <samcv> bumping nqp now so we get the fixed string compare so cmp has deterministic comparing of synthetic codeponits. before it compared the synthetic codepoints as negative numbers instead of the actual codepoints that it held

[10:12] <samcv> the speed should be the same except if the codepoint which is different between the two strings is a synthetic, in which case it checks the codepoint inside the synthetic and compares that

[10:13] <samcv> for two synthetics with the same starting codepoints but one is shorter than the other, the grapheme with less codepoints in it will be 'Less'

[10:13] <samcv> also improvement to make .codes 350% faster

[10:16] <Geth> ¦ rakudo/nom: 0564891e9c | (Samantha McVey)++ | tools/build/NQP_REVISION

[10:16] <Geth> ¦ rakudo/nom: Bump NQP for new nqp::codes op, string cmp fixes

[10:16] <Geth> ¦ rakudo/nom:

[10:16] <Geth> ¦ rakudo/nom: Changes brought in by MoarVM bump:

[10:16] <Geth> ¦ rakudo/nom: abc38137 Fix MVM_string_compare to support deterministic comparing of synthetics

[10:16] <Geth> ¦ rakudo/nom: b161c851 be safe about marking NULL call graph nodes

[10:16] <Geth> ¦ rakudo/nom: 1d3a139b Avoid range check on every SC object access.

[10:16] <Geth> ¦ rakudo/nom: 5c67d732 calloc a tospace instead of memset old fromspace.

[10:16] <Geth> ¦ rakudo/nom: <…commit message has 10 more lines…>

[10:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0564891e9c

[10:16] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.07-14-g39d4586...2017.07-15-g393eb0165

[10:16] <Geth> ¦ rakudo/nom: 3c6277c77e | (Samantha McVey)++ | src/core/Str.pm

[10:16] <Geth> ¦ rakudo/nom: Have .codes use nqp::codes op. 350% faster for short strings

[10:16] <Geth> ¦ rakudo/nom:

[10:16] <Geth> ¦ rakudo/nom: Makes it much less costly than calling .NFC.codes. For long strings

[10:16] <Geth> ¦ rakudo/nom: the times are not quite as different since the bulk of the time is actually

[10:16] <Geth> ¦ rakudo/nom: iterating through the string and not the unneeded calls.

[10:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3c6277c77e

[10:16] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.07-14-g39d4586...2017.07-15-g393eb0165

[10:47] <Zoffix> There's nothing to "fix" with sleep. If you want non-blocking sleep, use Promise.in(42)

[10:47] <Zoffix> jdv79: 6.d.PREVIEW made `await` nonblocking. You're still blocking your threads with sleep().

[10:52] <Zoffix> m: use v6.d.PREVIEW; await ^100 .map: {start await Promise.in: 2}

[10:52] <camelia> rakudo-moar 51e59e: ( no output )

[10:52] <Zoffix> m: use v6.d.PREVIEW; await ^100 .map: {start await Promise.in: 2}; say now - INIT now;

[10:52] <camelia> rakudo-moar 51e59e: OUTPUT: «2.022665?»

[10:52] <Zoffix> m: await ^100 .map: {start await Promise.in: 2}; say now - INIT now;

[10:52] <camelia> rakudo-moar 51e59e: OUTPUT: «(timeout)»

[10:58] <stmuk> is there anything written for the 6.d release plans next year .. or is it just in backlog?

[11:11] <dogbert2> anyone seen this?

[11:11] <dogbert2> Stage optimize   :   8.577

[11:11] <dogbert2> Stage mast       : No registered operation handler for 'codes'

[11:12] <dogbert2> while building rakudo

[11:16] <travis-ci> Rakudo build failed. Samantha McVey 'Have .codes use nqp::codes op. 350% faster for short strings

[11:16] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/259058339 https://github.com/rakudo/rakudo/compare/51e59eeb5e48...3c6277c77ed0

[11:16] <stmuk> :)

[11:16] <buggable> [travis build above] ? Did not recognize some failures. Check results manually.

[11:20] <dogbert2> sigh

[11:21] <dogbert2> same error on travis

[11:55] <samcv> hmm what did i do wrong

[11:56] <samcv> oh crap

[11:57] <Geth> ¦ nqp: 59421ffe1b | (Samantha McVey)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[11:57] <Geth> ¦ nqp: Add nqp::codes to QASTOperationsMAST.nqp

[11:57] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/59421ffe1b

[11:58] <timotimo> heh.

[11:58] <Geth> ¦ rakudo/nom: e051dd2def | (Samantha McVey)++ | tools/build/NQP_REVISION

[11:58] <Geth> ¦ rakudo/nom: Bump NQP to get nqp::codes op actually added

[11:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e051dd2def

[11:58] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.07-15-g393eb0165...2017.07-16-g59421ffe1

[11:58] <timotimo> happens when you have three separate repositories

[12:00] <Zoffix> stmuk: 6.d release is this year

[12:01] <Zoffix> stmuk: everything is here: https://github.com/perl6/6.d-prep

[12:01] <Zoffix> stmuk: aside from plans to cut a new language point release quarterly next year (basically for each R* release)

[12:03] <stmuk> ah excellent I'll keep an eye on that repo

[12:03] <stmuk> Zoffix: is that something like 6.d.1 .2 etc?

[12:05] <Zoffix> Yeah

[12:13] <stmuk> is Oct likely to be a "soft" release or (from marketing perspective) should we "big" it up a bit?

[12:21] * Zoffix has no idea what that means

[12:24] <stmuk> a soft release is a quiet release made due to the possibility of problems rather than more agressive promotion

[12:26] <Zoffix> It will be promoted once we know for certain when we'll be able to release. Wouldn't think we'd be doing anything "agressive" considering most of the new features were stuffed into 6.c compiler, so the actual list of things people will get with use 6.d is rather slim

[12:29] <Zoffix> and because overall performance is still in need of improvement. Those who weren't impressed with earlier releases would likely measure that first thing when they hear about hyped up 6.d release, which will likely end like this: https://www.reddit.com/r/perl6/comments/6hagwm/performance_concern_with_respect_to_gnu_yes/

[12:32] <stmuk> yes that's true maybe best to hold fire until speed improvements are more noticeable

[12:33] <stmuk> I did notice the perl 6 search queries peaked around Larry's Perl 6 release annoucement in Oct 2015 rather than the actual release

[12:34] <stmuk> https://trends.google.com/trends/explore?date=today%205-y&q=perl%206

[13:02] <jnthn> I think we get ourselves something we'd be willing to ship and call 6.d, and *then* announce

[13:03] <jnthn> NeuralAnomaly: status

[13:03] <NeuralAnomaly> jnthn, [?] Next release will be in 2 weeks and 6 days. Since last release, there are 23 new still-open tickets (6 unreviewed and 0 blockers) and 97 unreviewed commits. See http://perl6.fail/release/stats for details

[13:12] <travis-ci> Rakudo build passed. Samantha McVey 'Bump NQP to get nqp::codes op actually added'

[13:12] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/259073195 https://github.com/rakudo/rakudo/compare/3c6277c77ed0...e051dd2def01

[13:56] <Zoffix> Yeah, sounds good.

[15:38] <dogbert2> hmm, quite a few ZOFFLOP's all of a sudden ...

[15:40] <dogbert2> t/spec/S02-types/unicode.t, t/spec/S32-temporal/DateTime.t, t/spec/S32-str/length.t and t/spec/S32-temporal/Date.t

[15:41] * dogbert2 wonders if he's missing something obvious

[15:47] <dogbert2> m: say "\c[LATIN CAPITAL LETTER A WITH DOT ABOVE, COMBINING DOT BELOW]".codes

[15:47] <camelia> rakudo-moar e051dd: OUTPUT: «1?»

[15:48] <dogbert2> hmm

[16:10] <timotimo> m: say "\c[LATIN CAPITAL LETTER A WITH DOT ABOVE, COMBINING DOT BELOW]".NFC.perl

[16:10] <camelia> rakudo-moar e051dd: OUTPUT: «Uni.new(0x1ea0, 0x0307).NFC?»

[16:10] <timotimo> m: say uninames(|"\c[LATIN CAPITAL LETTER A WITH DOT ABOVE, COMBINING DOT BELOW]".NFC.list)

[16:10] <camelia> rakudo-moar e051dd: OUTPUT: «Cannot resolve caller uninames(Int, Int); none of these signatures match:?    (Str:D $str)?  in block <unit> at <tmp> line 1??»

[16:10] <timotimo> m: say uninames("\c[LATIN CAPITAL LETTER A WITH DOT ABOVE, COMBINING DOT BELOW]".NFC.list)

[16:10] <camelia> rakudo-moar e051dd: OUTPUT: «Cannot resolve caller uninames(Seq); none of these signatures match:?    (Str:D $str)?  in block <unit> at <tmp> line 1??»

[16:10] <timotimo> m: .&uniname.say for "\c[LATIN CAPITAL LETTER A WITH DOT ABOVE, COMBINING DOT BELOW]".NFC.list

[16:10] <camelia> rakudo-moar e051dd: OUTPUT: «LATIN CAPITAL LETTER A WITH DOT BELOW?COMBINING DOT ABOVE?»

[16:11] <timotimo> that's strange

[16:12] <timotimo> er, huh

[16:12] <timotimo> didn't sam just change the codes function

[16:14] <timotimo> at the moment the implementation is the same as chars, i.e. it just reads the size property out of the string

[16:26] <dogbert2> timotimo: perhaps she'd hacked all night and was so tired that she forgot

[16:26] <timotimo> i've certainly done that before

[16:27] <dogbert2> :)

[16:27] <dogbert2> did you see the bug which was uncovered yesterday?

[16:27] <dogbert2> https://gist.github.com/dogbert17/e23c3340c7d9930ec219f8eda3feb18f

[16:27] <timotimo> yeah, that was fascinating, but i haven't invested any time in it yet

[16:29] <dogbert2> should I report it or wait for you to fix it :)

[16:30] <timotimo> not sure if it could end up in a roast test, so maybe a RT isn't suitable?

[16:33] <dogbert2> MoarVM issue perhaps

[16:35] <dogbert2> I wonder if it possible for valgrind to tell which variable is uninitialized

[16:41] <timotimo> spread it out over multiple lines :P

[18:12] <yoleaux> Zoffix: Zoffix testing: https://brson.github.io/2017/07/10/how-rust-is-tested

[19:00] <Zoffix> Shoo, robot

[19:01] <Zoffix> mst: "??? _ :moon.freenode.net 465 ZofBot You are banned from this server- You have violated freenode's terms of service. Please contact [email@hidden.address] if you think this kline has been set in error. (2017/7/30 15.26)" ??? _ :ZofBot!zofbot-zof@perl6.party QUIT K-Lined

[19:01] <Zoffix> What sort of service did I violate :/

[19:01] <mst> Zoffix: lemme guess, linode?

[19:02] <Zoffix> mst: Yeah

[19:02] <mst> Zoffix: yeah, I accidentally half of linode again earlier

[19:02] <Zoffix> haha

[19:02] <mst> they hand out single v6 addresses rather than normal sized blocks

[19:02] <Zoffix> \o/

[19:02] <Zoffix> ZofBot: I missed you, buddy

[19:02] <ZofBot> Zoffix, new

[19:03] <mst> so what superficially appears to be a tight v6 mask that should only affect the person you're attempting to k-line

[19:03] <Zoffix> Ah :)

[19:04] <mst> I do try to remember this before dropping a v6 k-line, but I don't always succeed

[19:21] <lizmat> .

[19:28] <lizmat> hmmm... I see quite a lot of spectest breakage atm

[19:29] <lizmat> they all seem related to unicode stuff

[19:36] <samcv> checking now lizmat

[19:39] <timotimo> i wonder if including WWW in star would be a good idea?

[19:40] <Zoffix> IMO a good replacement for LWP::Simple, but not much more than that.

[19:40] <timotimo> OK

[19:40] <Zoffix> Though its design is a bit botched.

[19:40] <timotimo> i haven't realized

[19:41] <timotimo> should LWP::Simple see a bit more development? like, more methods than just get and post?

[19:41] <Zoffix> post() takes headers as a positional arg and form params as named, but if you send raw body, then it takes headers as named

[19:41] <Zoffix> IMO LWP::Simple was botched by making it UNsimple. Why the hell do I need to type the module name twice to make a request :/

[19:41] <samcv> lizmat, what tests do you see failing?

[19:42] <lizmat> samcv: https://gist.github.com/lizmat/83df10669b210286d679c8ebced975bf

[19:43] <Zoffix> Actually, scratch that. Don't pack WW into star. I may want to explode it and make a redesigned version and I rather it not get the current version too popular :)

[19:44] <Geth> ¦ rakudo/nom: 4db230641e | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[19:44] <Geth> ¦ rakudo/nom: R:I.from-indexes is only lazy if both sources are

[19:44] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4db230641e

[19:47] <samcv> lizmat, fixing

[19:47] <samcv> i feel i was asleep yesterday

[19:47] <samcv> ahh i see what happened. i made a commit when i was detached... looking at what i did

[19:47] <samcv> and so it didn't get commited to master but i pushed and thought it went

[19:50] <Geth> ¦ nqp: 6932192bbb | (Samantha McVey)++ | tools/build/MOAR_REVISION

[19:50] <Geth> ¦ nqp: Bump MoarVM to get nqp::codes working

[19:50] <Geth> ¦ nqp:

[19:50] <Geth> ¦ nqp: Changes brought in:

[19:50] <Geth> ¦ nqp: ed84a632 Have MVM_string_codes iterate the string with codepoint iterator

[19:50] <Geth> ¦ nqp: b07acdfd disable jit when we're not allowed to make memory executable

[19:50] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6932192bbb

[19:50] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.07-264-gabc38137...2017.07-266-ged84a632

[19:51] <Geth> ¦ rakudo/nom: 4eff491951 | (Samantha McVey)++ | tools/build/NQP_REVISION

[19:51] <Geth> ¦ rakudo/nom: Bump NQP to get bumped MoarVM, with nqp::codes actually working

[19:51] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4eff491951

[19:51] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.07-16-g59421ffe1...2017.07-17-g6932192bb

[19:51] <samcv> lizmat, ok  it should be fixed

[19:52] <lizmat> samcv: testing

[19:52] <samcv> the old MVM_string_codes just returned .chars. and that had been commited on a detached head

[19:53] <samcv> and not my changes which made it actually iterate the string and return the codes

[19:53] <samcv> hopefully people who need .codes will be happy now that it's much faster than calling .NFC.codes

[20:05] <lizmat> samcv: clean now  :-)

[20:49] <Geth> ¦ rakudo/nom: 0c19f54904 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[20:49] <Geth> ¦ rakudo/nom: Must use return-rw in a pull-one with is raw

[20:49] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0c19f54904

[21:17] <travis-ci> Rakudo build failed. Samantha McVey 'Bump NQP to get bumped MoarVM, with nqp::codes actually working'

[21:17] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/259159469 https://github.com/rakudo/rakudo/compare/4db230641ec1...4eff49195188

[21:17] <buggable> [travis build above] ? All failures are due to timeout (0), missing build log (0), GitHub connectivity (0), or failed make test (1). Across all jobs, only t/04-nativecall/01-argless.t test file failed.

[22:58] <jdv79> Zoffix: odd, switching to 6d await and Promise.in doesn't fix it

[23:01] <Geth> ¦ rakudo/nom: a256c26d85 | (Elizabeth Mattijsen)++ | src/core/array_slice.pm

[23:01] <Geth> ¦ rakudo/nom: Make @a[Range] about 3x faster

[23:01] <Geth> ¦ rakudo/nom:

[23:01] <Geth> ¦ rakudo/nom: - for completely refied list/arrays only

[23:01] <Geth> ¦ rakudo/nom: - without any adverbs

[23:01] <Geth> ¦ rakudo/nom: - by adding a highly specialized postcircumfix:<[ ](List:D, Range:D) candidate

[23:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a256c26d85

[23:03] <jdv79> is 6d await known to have issues?

[23:03] <timotimo> can you show your code a little bit?

[23:03] <jdv79> its a little big

[23:03] <timotimo> oh, hmm

[23:03] <jdv79> i'll try to golf it a bit

[23:05] <timotimo> that'd be nice

[23:24] <Zoffix> jdv79: you sure you got use v6.d.PREVIEW as first thing in the file? I think the mechanism that complains about it being in the wrong place isn't working yet

[23:24] <Zoffix> m: use v6.c; sub foo { use v6.d.PREVIEW; await start say 42 }()

[23:24] <camelia> rakudo-moar a256c2: OUTPUT: «42?»

[23:26] <Geth> ¦ 6.d-prep: 2d53c6fce7 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[23:26] <Geth> ¦ 6.d-prep: Add throwage on wrongly placed use pragma to TODO

[23:26] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/2d53c6fce7

[23:26] <jdv79> yeah, its first.  must be something else.

[23:45] <cog_> jnthn++  Our hero. Not only he slays dragons, but he knows how to tell his heroic battles.

[23:48] <timotimo> aye
