[00:43] <japhb> .ask lizmat re: rakudo 5db5b1db , couldn't you test for being concrete or being Any?  That would only leave the much smaller number of type objects that are Mu but not Any.  Not perfect, but an improvement I think.

[00:43] <yoleaux> japhb: I'll pass your message to lizmat.

[06:43] <Geth> ¦ rakudo: snarkyboojum++ created pull request #1136: Adding name for snarkyboojum

[06:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1136

[08:35] <lizmat> Files=1223, Tests=67668, 275 wallclock secs (13.98 usr  5.24 sys + 1861.57 cusr 194.07 csys = 2074.86 CPU)

[08:35] <lizmat> .tell japhb I'd much rather see a HLL way to test for NQPMu, as we need that in some other places as well

[08:35] <yoleaux> lizmat: I'll pass your message to japhb.

[08:41] <Geth> ¦ rakudo/nom: 8944721366 | (Adrian White)++ | CREDITS

[08:41] <Geth> ¦ rakudo/nom: Adding name for snarkyboojum

[08:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8944721366

[08:41] <Geth> ¦ rakudo/nom: 636a3c1264 | lizmat++ (committed using GitHub Web editor) | CREDITS

[08:41] <Geth> ¦ rakudo/nom: Merge pull request #1136 from snarkyboojum/nom

[08:41] <Geth> ¦ rakudo/nom:

[08:41] <Geth> ¦ rakudo/nom: Adding name for snarkyboojum

[08:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/636a3c1264

[14:41] <ugexe> https://gist.github.com/ugexe/31e22b5924319f502f62970fca34e3a0  # why does this code act different? it looks the same, but it fails spectests (and additionally fixes Grammar::HTTP which was broke from uncurse branch merge in march-ish)

[14:42] <ugexe> i replace self.to with the code inside method self to { }, and replace nqp::subst_i with an actual `-`

[14:43] <ugexe> sub_i rather

[14:44] <ugexe> t/spec/S05-transliteration/79778.t .. This type cannot unbox to a native integer: P6opaque, Num

[14:44] <ugexe> the only test failures are transliteration

[14:56] <ugexe> TimToady: might be of interest ^

[15:03] <[TuxCM]> This is Rakudo version 2017.07-149-g93a5eff7c built on MoarVM version 2017.07-382-g348b4262

[15:03] <[TuxCM]> csv-ip5xs        1.348 - 1.367

[15:03] <[TuxCM]> test            12.322

[15:03] <[TuxCM]> test-t           4.385 - 4.415

[15:03] <[TuxCM]> csv-parser      14.124

[15:08] <[Coke]> any pointers on how to do a build on windows? I have a win 10 eval VM that came with a version of VS.

[15:11] <ugexe> use `x86 Native Tools Command Prompt for VS 20xx` not cmd.exe

[15:12] <ugexe> as that will have the compiler toolchain stuff in PATH

[15:15] <ugexe> you can also use rakudobrew in windows so you dont have to remember which "make" to use!

[15:18] <timotimo> [Coke]: i think you just get strawberry perl so you can use Configure.pl

[15:18] <timotimo> and then use nmake?

[15:18] <ugexe> install chocolately and follow https://github.com/rakudo/rakudo/blob/nom/appveyor.yml#L48

[15:18] <ugexe> but nmake isn't usually PATH'd in the normal command prompt

[15:19] <lizmat> [TuxCM]: disappointing  :-(

[15:19] <timotimo> oh no :(

[15:46] <stmuk> [Coke]: https://github.com/rakudo/star/blob/master/tools/star/windows-msi.pod might help (ignoring the WiX toolset/MSI stage)

[15:48] <stmuk> BTW I tried a Reactos (open source Windows) build yesterday but gcc segfaulted (probably the fault of the OS)

[15:53] <nine> It shouldn't be that hard finding the test-t regression, should it?

[15:58] <japhb> .

[15:58] <yoleaux> 08:35Z <lizmat> japhb: I'd much rather see a HLL way to test for NQPMu, as we need that in some other places as well

[15:59] <japhb> .tell lizmat Fair enough.

[15:59] <yoleaux> japhb: I'll pass your message to lizmat.

[16:04] <Skarsnik> btw it that just a TODO that the family (ipv4 or ipv6) is never passed to NQP/Moar in https://github.com/rakudo/rakudo/blob/nom/src/core/IO/Socket/INET.pm

[16:04] <Skarsnik> Sound dumb but localhost for me resolve to ipv6 and ipv4

[16:06] <ugexe> i think it used to get passed but since it didnt do anything yet it got removed

[16:08] <Skarsnik> I am adding a source-address param to bind the socket (on connect) to the ip you want, but like I try localhost (ip to reachà from iplocal (ip to bind) it does not work since localhost is ipv6

[16:12] <Skarsnik> Not sure how to handle this aside throwing an error x)

[16:16] <timotimo> m: say 0x7ffffffff000 - 0x7ffffffde000

[16:16] <camelia> rakudo-moar 636a3c: OUTPUT: «135168?»

[16:17] <timotimo> oh, d'oh

[16:17] <ugexe> isnt that an OS level detail?

[16:18] <ugexe> (what localhost binds to)

[16:19] <Skarsnik> hm, let me check, I think it's just because a host can resolve to a ipv4 and ipv6 address

[16:19] <geekosaur> you need to filter the list for correct protocol like I mentioned yesterday (granted it was a bit offhand and perhaps not clear)

[16:19] <timotimo> it's whatever you write in /etc/host

[16:19] <geekosaur> but it's also complicated by hosts that do ipv4 emulated

[16:20] <timotimo> you mean you get connections from ipv4 endpoints via the ipv4-inside-ipv6 address range?

[16:21] <geekosaur> it works both ways, your server program sees an ipv6 socket that is also an ipv4 socket

[16:22] <geekosaur> in which case the ipv6 localhost is correct

[16:22] <geekosaur> ("thanks" linux)

[16:22] <Skarsnik> Sure. You have an A record (for IPv4) and an AAAA record (for IPv6). Typically the AAAA record gets resolved first, then the A record.

[16:22] <Skarsnik> (copy pasted from somewhere)

[16:22] <geekosaur> (not all linux dustributions do this, but enough do that you need to check for your ipv4 socket being an ipv6 socket)

[16:23] <Skarsnik> so yeah an hostname can be ipv4 or v6

[16:23] <geekosaur> but in general, if you are binding to an address, you should bind to the *address* not a hostname

[16:24] <geekosaur> you might be able to provide a symbolic constant meaning "the loopback address for this address family" but don't use a hostname

[16:24] <Skarsnik> I also feel like I kinda want to give the user the ip back x)

[16:31] * [Coke] tries out a win10 eval and puts together instructions on how to get a build using their eval version.

[16:48] <Skarsnik> what do you think of

[16:48] <Skarsnik> skarsnik@devel:~/perl6/socket/rakudo$ ./install/bin/perl6 -e 'my $conn = IO::Socket::INET.new(:host<localhost>, :port(80), :source-address("pikonyo")); $conn.print("GET index.html\r\n"); say $conn.recv()'

[16:48] <Skarsnik> The socket won't be binded. Destination and Source address family does not match. Destination is IPv6. Source is IPv4

[16:50] <geekosaur> this is system dependent, network stack dependent, network configuration dependent, and people have been fighting with it for years. perl 6 is not going to "fix" it

[16:52] <Skarsnik> Yeah that why I tried to give an 'useful' error

[16:52] <Skarsnik> *try

[16:57] <Skarsnik> also I get a Cannot unbox a type object (Str) to a str.

[16:57] <Skarsnik> when I don't provide a source-address but I defined the attribute as Str $.source-location = ""; and in the new that do the connect I put it to "" too.

[16:57] <timotimo> default values only work if there's no custom BUILD

[16:57] <timotimo> so perhaps there is one?

[16:58] <Skarsnik> The file is https://github.com/rakudo/rakudo/blob/nom/src/core/IO/Socket/INET.pm

[17:02] <Skarsnik> I added Str :$source-address is copy = "", in the new method that do connect

[17:04] <Skarsnik> forget to do make && make install in rakudo x)

[17:04] <lizmat> Skarsnik: there's also a --make-install param in the configure step

[17:04] <yoleaux> 15:59Z <japhb> lizmat: Fair enough.

[17:05] <Skarsnik> what does that do?

[17:05] <timotimo> it runs "make install" for you when the configure step is done

[17:06] <Skarsnik> I don't need that, it's just I always forget to make && make install when changing a pm file in rakudo

[17:06] <lizmat> just "make install" is shorter  :-)

[17:06] <lizmat> it will do a "make" for you

[17:07] <timotimo> but you'd have to " && make install"

[17:09] <Skarsnik> could be nice to not have to rebuild the core.setting and stuff every time ^^

[17:10] <Skarsnik> at least it give you time to do some chores

[17:14] <Skarsnik> I am not sure how to make it work : https://gist.github.com/Skarsnik/24778366a6ced90632235f1f0b3b7fcc#file-inet-pm6-L86 I tried having a default value to ""

[17:33] <Zoffix> [Coke]: the doc build is still busted. It isn't updating

[17:33] <Zoffix> Which is annoying, 'cause I keep linking people to Texas versions of atomic ops, but they ain't there -_- because the site didn't update

[17:34] <Geth> ¦ nqp/ugexe-patch-1: a5b2f39709 | (Nick Logan)++ (committed using GitHub Web editor) | src/QRegex/Cursor.nqp

[17:34] <Geth> ¦ nqp/ugexe-patch-1: Fix 'Substr length cannot be negative' from Match

[17:34] <Geth> ¦ nqp/ugexe-patch-1:

[17:34] <Geth> ¦ nqp/ugexe-patch-1: I don't understand why this should change anything, but it does.

[17:34] <Geth> ¦ nqp/ugexe-patch-1:

[17:34] <Geth> ¦ nqp/ugexe-patch-1: Fixes Grammar::HTTP - see:

[17:34] <Geth> ¦ nqp/ugexe-patch-1: https://github.com/ugexe/Perl6-Grammar--HTTP/issues/6

[17:34] <Geth> ¦ nqp/ugexe-patch-1: https://irclog.perlgeek.de/perl6-dev/2017-05-02#i_14521237

[17:34] <Geth> ¦ nqp/ugexe-patch-1: review: https://github.com/perl6/nqp/commit/a5b2f39709

[17:34] <Geth> ¦ nqp: ugexe++ created pull request #367: Fix 'Substr length cannot be negative' from Match

[17:34] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/367

[17:34] <[Coke]> Zoffix: it is only some commits that seem to cause the (&#$ trouble.

[17:34] <lizmat> afk&

[17:35] <[Coke]> Zoffix: kicked off another build using "force-update" - those seem to go through, will keep an eye on it. thanks for the heads up

[17:37] <[Coke]> (I don't understand why that works: it's still using all the same infrastructure.

[17:40] <Zoffix> Weird. Thanks.

[17:41] <Zoffix> Man, the atomic ops sure kicked up a "discussion" :) 99 comments in total so far https://www.reddit.com/r/perl6/duplicates/6v63wv/201734_going_weekly_changes_in_and_around_perl_6/

[17:42] <Zoffix> Mostly people from 1960s saying they don't got a ? button on their keyboard :P

[17:42] <Skarsnik> for something probably 2 users will really have a use for it? xD

[17:42] <tadzik> yeah, I read that too

[17:42] <tadzik> I don't think they're that wrong though

[17:42] <Skarsnik> I don't even know how to do unicode char, so I can understand ^^

[17:42] <Zoffix> hehe, yeah, and for which we have Texas versions, so the whole discussion is moot IMO

[17:42] <tadzik> I put «» on my keyboard layout, “” too, but I don't think it's a sane way to go to add everyshit possible to it too

[17:43] <Zoffix> tadzik: so use Texas?

[17:43] <Zoffix> That's the whole point of it.

[17:43] <tadzik> yeah, I can and will

[17:43] <Zoffix> I don't use the “” quoters. I use q||

[17:43] <Zoffix> qq|| even

[17:43] <[Coke]> I also install App::Uni and use "uni newline" if I need to get something I can cut and paste.

[17:43] <tadzik> thing is, «» have nice and short ascii alternatives, ? does not

[17:44] <Zoffix> tadzik: because it's not an oft-used thing.

[17:44] <[Coke]> (I use that to get the uni "NL" when updating doc OUTPUTs)

[17:44] <tadzik> Zoffix: is that why the blogpost advertises it as useful even for non-threaded code? ;)

[17:45] <tadzik> then again, I'm a hater of emojis and stupid shit in unicode, so I'm perhaps a bit biased

[17:46] <tadzik> and last I checked I'm not a 5yo but I still don't know how to make a smiley face that's not rotated like ":)"

[17:46] <tadzik> not on my pc, and not on my phone either

[17:47] <Zoffix> tadzik: well, before the update, you had to write like three strategically-placed lines of code and no one complained. Now it's just a single routine and people are saying it's too long. We also added an even shorter Unicode alternative and people are complaining they don't have a ? button on their keyboard. To me, this all sounds like people are desperate to complain about anything.

[17:47] <[Coke]> hurm. using strawberry perl and gmake, I get gcc as my compiler on windows. I assume ideally we'd want to be getting Visual Studio, yes?

[17:48] <Skarsnik> probably?

[17:48] <Zoffix> .ask lizmat Shouldn't ?+= and ?-= be called atomic-add-assign and atomic-sub-assign instead of atomic-add-fetch and atomic-sub-fetch, since ?= is atomic-assign, not atomic-fetch?

[17:48] <yoleaux> Zoffix: I'll pass your message to lizmat.

[17:49] <tadzik> Zoffix: well, I feel like people are mostly hostile to emoji-culture creeping its way into the programming world. As you said, there'd be probably no reddit drama if it was just atomic() with no operator to it

[17:49] <ugexe> atomic operations are named after the order in which they do their operation

[17:50] <ugexe> and what you get back

[17:50] <Zoffix> .ask jnthn Docs for atomicint say overflow will wrap around silently. But in C, overflow on signed integers is undefined and I recall asking whether the same were true for our native ints and you said yeah because that's what hardware does, but doesn't the same apply to atomicint too?

[17:50] <yoleaux> Zoffix: I'll pass your message to jnthn.

[17:50] <Zoffix> ugexe: then why atomic-assign and not atomic-assign-fetch?

[17:51] <Zoffix> ugexe: also atomic-inc-fetch doesn't do any assignment, while atomic-add-fetch does, yet that fact isn't indicated in the name.

[17:51] <Zoffix> Anyway

[17:51] * Zoffix re-disappears

[17:54] <Zoffix> (well, yeah, it does do assignment, I guess; so never mind that point)

[17:59] <ugexe> atomic-assign does not return anything, the -fetch stuff does

[18:01] <jnthn> The position of the fetch before the add or inc is to indicate whether you get the value before or after the operation

[18:01] <yoleaux> 17:50Z <Zoffix> jnthn: Docs for atomicint say overflow will wrap around silently. But in C, overflow on signed integers is undefined and I recall asking whether the same were true for our native ints and you said yeah because that's what hardware does, but doesn't the same apply to atomicint too?

[18:01] <jnthn> Zoffix: I suspect everywhere we run does do wrap-around semantics, but yeah, strictly we should perhaps just say undefined behavior.

[18:02] <geekosaur> yes, strictly you should. but also yes, de facto all platforms we care about wrap

[18:02] <geekosaur> and in fact so do most platforms we *might* care about; other behaviors quietly vanished into history a couple decades ago

[18:03] <Zoffix> Ah, ok. thanks.

[18:03] <Zoffix> m: my atomicint $x = 42; say atomic-assign($x, 100)

[18:03] <camelia> rakudo-moar 636a3c: OUTPUT: «100?»

[18:03] <Zoffix> m: my atomicint $x = 42; say $x ?= 100

[18:03] <camelia> rakudo-moar 636a3c: OUTPUT: «100?»

[18:03] <jnthn> Note there's no fetch in that operation at all, you just get back exactly what you put in

[18:04] <Zoffix> Damn. Just my lack. The doc build worked, but my table isn't rendering right :P

[18:05] <Zoffix> Oh, the operator symbols them selves have parts of the table lines

[18:06] <Zoffix> OK. Thanks. Now I get the Texas atomic naming :)

[18:06] <jnthn> Also, inc vs add - they're very close under the hood

[18:07] <jnthn> Both are "assignments" in that they update the content of a variable

[18:07] <Zoffix> .tell lizmat nevermind. ugexe++ explained my mistake

[18:07] <yoleaux> Zoffix: I'll pass your message to lizmat.

[18:11] <timotimo> so, uh, anybody know anything about the pre-workshop meetup?

[18:11] <timotimo> how do i indicate i'll be there and it'd be nice if a seat existed for me to sit on

[18:11] <jnthn> timotimo: Mail the organiers

[18:11] <jnthn> *organizers

[18:13] <timotimo> let's see

[18:15] <timotimo> done

[18:19] <ugexe> m: grammar Foo { token TOP { <to> }; token to { .+ }; }; say Foo.parse("xyz"); # the source of Grammar::HTTP failures finally golfed

[18:19] <camelia> rakudo-moar 636a3c: OUTPUT: «??? to => ???»

[18:22] <timotimo> ah

[18:22] <timotimo> that's from when Grammar and Cursor became the same thing

[18:22] <timotimo> YAML used to have a token "list" which clashed with the .list method on the match object

[18:23] <jnthn> 'twas Cursor and Match became the same

[18:26] <timotimo> oops

[18:54] * [Coke] manages to kick off a MS VS build...

[18:55] <[Coke]> optimize.c(666) warning == : operator has no effect, did you intend = ?

[18:56] <timotimo> 666, eh?

[19:04] <[Coke]> AHA

[19:04] <[Coke]> /* General is container check, so answer is yes. */

[19:04] <[Coke]> known_result == 1;

[19:04] <timotimo> hah, good catch

[19:04] <[Coke]> that's a buggo!

[19:04] <[Coke]> still on line 666 in master

[19:04] <[Coke]> should I resend to #moarvm?

[19:05] <[Coke]> will

[19:07] <[Coke]> OK. I have a set of build instructions that got me a working MS VC instance, 'nmake test' *mostly* passes.

[19:07] <[Coke]> (all failures are related to cpp and nativecall)

[19:10] <[Coke]> many failures in spectest.

[19:18] <Skarsnik> hm interesting

[19:18] <Skarsnik> I thought NC has msvc mangling stuff for c++

[19:20] <geekosaur> platform C++ specs are encouraged to have standard name mangling, but nothing enforces this. msvc's C++ name mangling doesn't abide by the x86/x86_64 platform spec

[19:21] <geekosaur> and I don't know anyone actually implemented it for msvc, or if the necessary stuff (this includes runtime hooks for object manipulation etc.) is even documented without an NDA

[19:21] <[Coke]> I have N cores allocated to this VM, and have test_jobs=5... but prove is just showing a single test being run at a time in 'spectest'. :(

[19:22] <[Coke]> AlexDaniel: I'll get a report out of here about the failures when it finally finishes.

[19:23] <ugexe> TEST_JOBS or test_jobs? case matters on windows (although I dunno if the script itself normalizes this)

[19:24] <AlexDaniel> cool

[19:24] <[Coke]> it's got 5 slots showing in prove. only one is being used.

[19:25] <[Coke]> 1/47 0? 0? 0? 0?

[19:35] <[Coke]> Looks like we have a hanging test on windows.

[19:36] <Skarsnik> hm. Can I easily commit stuff on a repo, then reuse this commit to put in on a fork (like putting my change on MoarVM in my MoarVM fork)

[19:37] <[Coke]> I don't understand the question; you want to update a fork with commits from the original repo that occurred post-fork?

[19:38] <perlpilot> Skarsnik: cherry-pick?

[19:39] <perlpilot> Skarsnik: I mean, the "can I?" question most likely has a "yes" answer.  But I don't quite get your question either.

[19:39] <Skarsnik> well I changed stuff in Moar but in a repo Config.pl of rakudo pulled

[19:40] <Skarsnik> now I want to put these change on my fork to make a PR

[19:40] <AlexDaniel> Skarsnik: did you “git commit” it already?

[19:40] <Skarsnik> No. I did nothing yet ^^

[19:41] <Skarsnik> I could probably do a git diff and use it thou

[19:41] <AlexDaniel> well if you did, then you'd be able to just “git pull /path/to/the/moar/repo” and it would pull the commit

[19:41] <AlexDaniel> (from your fork)

[19:42] <AlexDaniel> but yeah, git diff > stuff.patch

[19:42] <AlexDaniel> or just copy the files :)

[19:47] <[Coke]> I can't cut and paste out of the VM. :|

[19:48] <Skarsnik> What do you use?

[20:00] <ugexe> its often an option you have to enable

[20:01] <geekosaur> not to mention that if either host or guest is *nix, you get to guess whether it used PRIMARY or CLIPBOARD

[20:01] <ugexe> also if you are using the command line then cut and paste works different

[20:01] <[Coke]> ugexe: Yes, I went through the process of enabling clipboard and drag and drop, both ways, restarted the guest OS... nothing.

[20:02] <lizmat> .

[20:02] <yoleaux> 17:48Z <Zoffix> lizmat: Shouldn't ?+= and ?-= be called atomic-add-assign and atomic-sub-assign instead of atomic-add-fetch and atomic-sub-fetch, since ?= is atomic-assign, not atomic-fetch?

[20:02] <yoleaux> 18:07Z <Zoffix> lizmat: nevermind. ugexe++ explained my mistake

[20:03] <ugexe> using VMware fusion on OSX with windows guest I highlight text in the command prompt, press command+c which copies, then command+v pastes

[20:04] <ugexe> pastes inside of and outside of the guest

[20:30] <[Coke]> AlexDaniel: win64 failures: https://gist.github.com/coke/3d1f76b63d32570516a2a3684f87e6d8

[20:30] <lizmat> wow, that's quite noisy

[20:31] <AlexDaniel> hm, IO stuff I can understand

[20:31] <AlexDaniel> but S02-literals\quoting.t ? :/

[20:31] <[Coke]> one sec.

[20:34] <[Coke]> updated.

[20:34] <[Coke]> looks like q/x stuff.

[20:35] <[Coke]> I am happy to run this stuff every so often now that I have it in place. I'll post the instructions as well in docs/windows.md or something.

[20:36] <ugexe> if the spectest can run in under 50 minutes on appveyor hardware...

[20:37] <ugexe> I'm getting the same failures fwiw

[20:38] <[Coke]> it took MUCH less than 50 minutes here.

[20:38] <[Coke]> trying to run with the installed perl6, I get Could not find Test::Util for one of them...

[20:56] <Zoffix> Many of the Windows failures existed for ages. There are two open roast Issues: https://github.com/perl6/roast/issues/197 https://github.com/perl6/roast/issues/197

[20:56] <Zoffix> Second one: https://github.com/perl6/roast/issues/232

[20:56] <Zoffix> And I suspect a good portion of these aren't issues with rakudo, but just faulty tests.

[20:57] <Zoffix> AlexDaniel: qx// is shell quoting.

[20:57] * Zoffix &

[20:57] <AlexDaniel> yea, I see

[21:01] <stmuk_> I see roast failures on 2017.08 FreeBSD (when it passed on 2017.07)

[21:02] <stmuk_> failures with t/spec/S17-supply/interval.t t/spec/integration/eval-and-threads.t and the suite then hangs on t/spec/S17-procasync/basic.rakudo.moar

[21:59] * lizmat just realized we have a "summary" function on irclog.perlgeek.de ?

[22:00] <timotimo> yup!

[22:00] <timotimo> there's a mode where you can edit which lines should go into the summary and one that shows only those

[22:01] <lizmat> yeah, I just realized that

[22:01] <lizmat> does that still work?  Haven't been able to find one with a summary, though

[22:05] <lizmat> good night, #perl6-dev!

[22:05] <lizmat> long drive ahead tomorrow!

[23:07] <Zoffix> Do you think I'm toxic or causing damage to the community?

[23:08] * Zoffix is watching node community implode and is self-reflecting a bit...

[23:19] <geekosaur> you are sometimes a bit rough, tbh. but we don't really have the kind of toxic people I encounter in many other communities

[23:19] <geekosaur> (I am sometimes a bit rough too, not helped by having difficulty spotting it in myself until afterward :/ )

[23:23] * Zoffix reads https://medium.com/@audrey.tang/lessons-i-ve-learned-32f5d8107e34

[23:37] <AlexDaniel> Zoffix: I think there were some toxic moments in the past (for example I miss gfldex), but lately you're super sweet

[23:38] <Zoffix> There were someone else who left and never came back, when I tried to argue about what is and isn't a module...

[23:39] <geekosaur> there was someone who left and demanded everything they'd ever done be removed

[23:39] <geekosaur> *that* is a form of toxicity, and I'm still waiting for some "very special" person to use that to completely destroy an open source project

[23:41] <geekosaur> "I have provacy law on my side, your CLA won't stand up in court" = "I reserve the right to completely destroy anything I ever contribute to, and as such should not be permitted to contribute to any project that anyone else actually cares about"

[23:46] <geekosaur> I also fully expect them to realize that they need to use the same privacy law bullying to get the record of that removed from public IRC logs, so nobody will be able to prove that a toxic bully is about to slit their project's throat

[23:48] <AlexDaniel> eh, people go crazy sometimes, I don't think we should make such a big deal about it

[23:51] <AlexDaniel> .oO( https://communitywiki.org/wiki/ForgiveAndForget )

[23:58] <Zoffix> .

[23:58] <Zoffix> yoleaux:

[23:59] <zzzzzzzzzzz> .tell Zoffix test

[23:59] <zzzzzzzzzzz> no bot?

[23:59] <yoleaux> zzzzzzzzzzz: I'll pass your message to Zoffix.
