[01:04] <ggoebel> read the recent reddit thread... thought the following lessons learned from Audrey Tang might be worth reviewing: https://medium.com/@audrey.tang/lessons-i-ve-learned-32f5d8107e34

[01:18] <TimToady> +1

[04:36] <samcv> » doesn't use threading currently right?

[04:36] <samcv> so that shouldn't be causing any crashes?

[06:04] <[Tux]> This is Rakudo version 2017.06-136-gd5d3bd276 built on MoarVM version 2017.06-30-g389e9732

[06:04] <[Tux]> csv-ip5xs        2.671

[06:04] <[Tux]> test            12.645

[06:04] <[Tux]> test-t           4.099 - 4.145

[06:04] <[Tux]> csv-parser      12.681

[06:50] <hgusa> as a lurker outsider of the community, reading Zoffix lose an argument with chromatic is much more fun than reading a cheesy blog from a minister without portfolio of a fictive country

[06:51] <nine> ggoebel: thanks for sharing Audrey's lessions!

[07:53] <llfourn> +1 I hadn't seen that one.

[08:35] <Zoffix> hgusa, glad you enjoyed yourself!

[08:35] <Zoffix> samcv: right, not yet.

[08:36] <samcv> thanks

[08:36] <samcv> that's what i thought too

[08:36] <samcv> just wanted to double check

[08:41] <Zoffix> I don't get Audrey's lessons.

[08:47] <Zoffix> Though there's one new one I can pitch in: people love drama. Hell, that reddit convo happend like a week ago, but people still can't stfu about it. Even someone lurking in the logs.

[08:48] <Zoffix> But no one bothered to correct me on my proposal to use uint64 for rat denominators and say that'd might end up paying too much for boxing all the time, because numerator can be an Int supposedly!

[08:53] <nine> Zoffix: just to let you know, I'm pretty hurt right now for not even getting any kind of response for my apology.

[08:57] <jnthn> Zoffix: The numerator is defined as an Int, but that doesn't mean there's no saving possible, it does mean that you might have to introduce a division op that takes a Int and uint64

[08:58] <Zoffix> jnthn: OK thanks.

[08:59] <jnthn> Also I don't see any discussion of that in the backlog here?

[08:59] <Zoffix> Exactly! But you see discussion about Audrey lessons and the reddit thread!

[09:00] <jnthn> Yeah, can't people do them on

[09:00] <jnthn> #perl6 so we can work here? :P

[09:00] <Zoffix> Unless you mean my original "road map" plan: https://irclog.perlgeek.de/perl6-dev/2017-07-03#i_14820738

[09:00] <jnthn> huh, dns fails to resolve on that :S

[09:02] <jnthn> And that's probably just out of local history

[09:02] * llfourn also sometimes has DNS issues with perlgeek.de

[09:03] <Zoffix> nine: sorry for storming out yesterday when you were giving your help. I was just annoyed the low-value crap from reddit from a week ago was getting dragged in to #perl6-dev. I don't have any goal or plans with chromatic or anyone else—whether they're positive or negative. What I did on reddit is just pass time on a boring bus ride, so all the advice and lessons about how to win arguments and bring peace

[09:03] <Zoffix> to world will fall on my deaf ears.

[09:04] <nine> Fair enough.

[09:04] <Zoffix> Here's a copy-paste of that log link: https://gist.github.com/zoffixznet/c658efaf8e554f570834b73c057e7621

[09:09] <jnthn> heh, finally it loaded

[09:24] <samcv> Zoffix, did you see this regression. https://rt.perl.org/Ticket/Display.html?id=131703 your commit is linked that introduced it

[09:27] <Zoffix> samcv: just saw the mention in #perl6 ... I guess ZofBot doesn't recognize "zoffix's" as a mention of me :/

[09:28] <Zoffix> m: say "zoffix's" ~~ / «zoffix» /

[09:28] <camelia> rakudo-moar d5d3bd: OUTPUT: «｢zoffix｣␤»

[09:28] <Zoffix> weird

[09:29] <Zoffix> Oh, it's there in my Twitter log, I just only looked at the last message :}

[09:32] <Zoffix> c: f539a624043f5796fcefcca83412ee1ab66e0c4d~1 @*ARGS = 'meow'; get.say

[09:32] <committable6> Zoffix, ¦f539a624043f5796fcefcca83412ee1ab66e0c4d~1: «(HANDLED) Unable to open file 'meow'␤  in block <unit> at /tmp/pSNune1vHE line 1␤»

[09:32] <Zoffix> samcv: how do you figure out the regression commit? Seems the same issue exists prior to it?

[09:32] <Zoffix> mc: @*ARGS = 'meow'; get.say

[09:32] <committable6> Zoffix, ¦2015.12: «(HANDLED) Unable to open file 'meow'␤  in block <unit> at /tmp/HwL39czJzp line 1␤»

[09:32] <Zoffix> And in 2017.05 release

[09:34] <Zoffix> mc: @*ARGS = 'meow'; sub MAIN ($x) { get.say }

[09:34] <committable6> Zoffix, ¦2015.12: «(HANDLED) Unable to open file 'meow'␤  in sub MAIN at /tmp/NH9yzaD84J line 1␤  in block <unit> at /tmp/NH9yzaD84J line 1␤»

[09:35] <Zoffix> m: @*ARGS = 'meow'; sub MAIN ($x) { get.say }

[09:35] <camelia> rakudo-moar d5d3bd: OUTPUT: «Failed to open file /home/camelia/meow: No such file or directory␤  in sub MAIN at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[09:35] <Zoffix> Ahhhh

[09:35] <Zoffix> The failure ends up handled in pre-commit

[09:36] <Zoffix> So I'd say that script was working for the wrong reason and the CatHandle swap fixed a bug that used to silence a failure.

[09:42] <Zoffix> samcv: wrote out explanation and closed the ticket: https://rt.perl.org/Ticket/Display.html?id=131703#txn-1471842

[09:46] <Zoffix> "<samcv> but regardless shouldn't be using the arg as a file since it should be taken by MAIN"

[09:48] <Zoffix> Dunno. That get() would unambiguously mean $*IN inside MAIN then, because the only way to get inside is to "handle" all the args, so IMO that code should just use $*IN or just do $*ARGFILES = $*IN if it wants to to use argless IO routines.

[09:48] <samcv> Zoffix, so the argument doesn't get eaten by MAIN?

[09:48] <Zoffix> No

[09:48] <samcv> i thought $*IN should be stdin

[09:48] <samcv> hmm

[09:48] <Zoffix> it is.

[09:48] <samcv> that... is very confusing

[09:48] <samcv> oh

[09:48] <samcv> get doesn't use STDIN it uses argfilesL

[09:49] <Zoffix> get() lines() slurp() and words() operate on $*ARGFILES. $*ARGFILES (by default) is a CatHandle of @*ARGS, unless @*ARGS are empty, in which case it uses $*IN

[09:49] <Zoffix> Right.

[09:49] <samcv> ah ok

[09:49] <samcv> why is argfiles set when MAIN accepts a variable though?

[09:50] <samcv> that is the odd functionality i think. i could understand if there were no args to main. but since it gets set as a variable in the signature

[09:50] <samcv> hm

[09:50] <Zoffix> They're just unrelated. The "$*ARGFILES (by default) is a CatHandle of @*ARGS" behaviour exists, regardless of whether you used MAIN or not

[09:53] <Zoffix> The alternative is that $*ARGFILES would become $*IN the moment you use MAIN (or inside MAIN), so that begs the question why not just leave it as @*ARGS and write code inside as using $*IN

[09:53] <Zoffix> Maybe it should, dunno.

[09:53] <samcv> yeah

[09:53] <samcv> worth considering

[09:54] <Zoffix> 'cause it being @*ARGS isn't very useful. The second you have any named args, you no longer can use $*ARGFILES

[09:54] <samcv> as i think it would be the least suprising to people that way. since MAIN is supposed to be all nice and good

[09:54] <Zoffix> huggable: 6.d

[09:54] <huggable> Zoffix, Proposals for 6.d language: https://github.com/perl6/specs/blob/master/v6d.pod

[10:00] <Zoffix> Yeah. $*IN sounds goo. Wrote it up for 6.d: https://github.com/perl6/specs/blob/master/v6d.pod#make-argfiles--in-or-ioargfilesnewin-inside-main

[10:06] <samcv> nice :)

[11:39] <lizmat> .ask masak do you have any thoughts on deprecating (<+) in favour of baggy semantics of (<) and (<=) ?

[11:39] <yoleaux> lizmat: I'll pass your message to masak.

[11:39] <lizmat> .ask labster do you have any thoughts on deprecating (<+) in favour of baggy semantics of (<) and (<=) ?

[11:39] <yoleaux> lizmat: I'll pass your message to labster.

[11:39] <lizmat> .ask TimToady do you have any thoughts on deprecating (<+) in favour of baggy semantics of (<) and (<=) ?

[11:39] <yoleaux> lizmat: I'll pass your message to TimToady.

[11:44] <lizmat> m: dd @^10  # not what I expected, but correct nonetheless  :-)

[11:44] <camelia> rakudo-moar d5d3bd: OUTPUT: «one([], 10)␤»

[11:49] <timotimo> yup, earliest match wins

[11:49] <timotimo> well, that and @^a would be valid, but @^10 wouldn't be

[11:49] <timotimo> so it goes down the path of "is this a placeholder signature parameter?"

[11:55] <Zoffix> huggable: cpan testers api :is: CPAN testers API: https://www.reddit.com/r/perl/comments/6lb207/cpan_testers_has_an_api/

[11:55] <huggable> Zoffix, Added cpan testers api as CPAN testers API: https://www.reddit.com/r/perl/comments/6lb207/cpan_testers_has_an_api/

[11:55] <Zoffix> prolly something that can be baked into modules.perl6.org

[12:46] <Zoffix> Gonna do a few passes of straightening up &SEQUENCE, while I tease out all that it does, for my article

[12:47] <Zoffix> buggable: toast

[12:47] <buggable> Zoffix, Between 2017.06-46-g43c1767 and 2017.06: 6 (0.73%) modules got burnt; 11 (1.33%) got unsucced; 199 (24.09%) out of 826 modules appear unusable. See https://toast.perl6.party/ for details.

[12:47] * Zoffix makes another toast

[12:48] <timotimo> i'm hungry now

[12:51] <Geth> ¦ rakudo/nom: 2504798464 | (Elizabeth Mattijsen)++ | 2 files

[12:51] <Geth> ¦ rakudo/nom: Make Setty eqv Setty between 2x and 3.5x faster

[12:51] <Geth> ¦ rakudo/nom:

[12:51] <Geth> ¦ rakudo/nom: - 2x in case of different number of elements

[12:51] <Geth> ¦ rakudo/nom: - 3.5x in case of equivalence on a 26-element Set

[12:51] <Geth> ¦ rakudo/nom: - also move it from set_operators.pm to Setty.pm

[12:51] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2504798464

[13:01] <Element80> So what's happening with mix.t file?

[13:01] <Element80> t/spec/S03-operators/mix.t                                      (Wstat: 1024 Tests: 66 Failed: 4)

[13:01] <Element80> Failed tests:  27, 30, 32, 65

[13:01] <Element80> ZOFVM: Files=1259, Tests=141105, 113 wallclock secs (18.85 usr  3.26 sys + 2138.17 cusr 205.49 csys = 2365.77 CPU)

[13:02] <Geth> ¦ rakudo/nom: 001135ca2a | (Zoffix Znet)++ | src/core/operators.pm

[13:02] <Geth> ¦ rakudo/nom: Straighten up &SEQUENCE a bit

[13:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/001135ca2a

[13:10] <lizmat> Element80: it's under investigation  :-)

[13:12] <Element80> lizmat: is it the (<+) thing?

[13:13] <lizmat> yeah, related to (<+)

[13:13] <Element80> Ah

[13:14] <lizmat> I would like to hear masak labster TimToady's thoughts on deprecating (<+) before doing anything

[13:30] <Element80> buggable: draw

[13:30] <buggable> Element80, The next Accidental /win Lottery draw will happen in -1 weeks, 2 days, 10 hours, 29 minutes, and 47 seconds. Currently have 0 ballots submitted by 0 users!

[13:30] * Element80 wonders who won

[13:31] <Element80> Hehe, jnthn did :)

[13:31] <timotimo> yeah

[13:31] <timotimo> i remember celebrating

[13:36] <Element80> buggable: testers f878354a-6183-11e7-89a5-c5f577a92919

[13:36] <buggable> Element80, Proc::Q:ver(1.001003) test result PASS. See more at http://api.cpantesters.org/v3/report/f878354a-6183-11e7-89a5-c5f577a92919

[13:36] <Element80> hehe neat :)

[13:37] * Element80 hasn't figured out how to fetch info for Perl 6 dists by name yet

[13:38] <Element80> Hm. Only now do I realize the "see more" URL isn't human-friendly if you're not using Firefox :)

[13:39] <Geth> ¦ rakudo/nom: 49b1b03b02 | (Elizabeth Mattijsen)++ | src/core/Baggy.pm

[13:39] <Geth> ¦ rakudo/nom: Make Baggy eqv Baggy upto 3.5x faster

[13:39] <Geth> ¦ rakudo/nom:

[13:39] <Geth> ¦ rakudo/nom: - 3.5x in case of equivalence on a 26-element Bag

[13:39] <Geth> ¦ rakudo/nom: - no improvement on different number of elements, as that was already optimized

[13:39] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/49b1b03b02

[13:42] <dogbert17> lizmat: if I were to write tests for RT #131303, where do you want me to put them?

[13:42] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131303

[13:43] <lizmat> dogbert17: I think that's covered in S03-operators/set_difference.t

[13:44] <lizmat> check out if there are any cases missing there  :-)

[13:47] <dogbert17> lizmat: will do

[13:51] <Element80> .tell masak you have a bunch of PRs on this module: https://github.com/masak/data-pretty/pulls

[13:51] <yoleaux> Element80: I'll pass your message to masak.

[13:51] <Element80> buggable: author masak

[13:51] <buggable> Element80, Found 12 dists for masak. See https://temp.perl6.party/buggable/8490434769545881499262717.html

[13:53] <Element80> .tell masak Actually a whole ton of PRs are waiting for merge in virtually all of your dists: https://temp.perl6.party/buggable/8490434769545881499262717.html

[13:53] <yoleaux> Element80: I'll pass your message to masak.

[14:02] <Geth> ¦ rakudo/nom: 93d81d61a6 | (Elizabeth Mattijsen)++ | src/core/Setty.pm

[14:02] <Geth> ¦ rakudo/nom: Make Setty.ACCEPTS(Setty) about 3.5x faster

[14:02] <Geth> ¦ rakudo/nom:

[14:02] <Geth> ¦ rakudo/nom: - the difference between eqv and ACCEPTS is the strict type check only

[14:02] <Geth> ¦ rakudo/nom: - moved most of logic from eqv to ACCEPTS

[14:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/93d81d61a6

[14:22] <lizmat> afk&

[14:33] <Element80> ugh

[14:33] <Element80> It doesn't take 1 hour to dump data as text -_-

[14:34] <Element80> Data::Dump::Tree-- over-engineered

[14:34] <dogbert17> Element80: would it be possible for you to close RT #131561, I see that tests have been added to roast

[14:34] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131561

[14:35] * dogbert17 Element80 == Mercury ?

[14:38] <Element80> dogbert17: https://www.youtube.com/watch?v=2LTxgx3KR30

[14:38] <Element80> It's a band that uses Perl 6. That song is about Promises

[14:38] <Element80> :trollface:

[14:39] <Element80> dogbert17: how come you don't close it?

[14:40] <dogbert17> Element80: I was afraid you should ask that :) it doesn't work, can only close my own bugs

[14:40] <Element80> dogbert17: what's your rt username?

[14:41] <dogbert17> dogbert17

[14:41] <dogbert17> sry, no my email address

[14:41] <Element80> What's the email address?

[14:42] <dogbert17> jan-olof.hendig(at)bredband.net

[14:43] <Element80> dogbert17: when was the last time you tried to close tickets? You're listed as admin...

[14:44] <dogbert17> I closed one just a few minutes ago 131303

[14:45] <Element80> dogbert17: and did you try closing 131561 ?

[14:47] <dogbert17> wtf, it worked, Element80++

[14:47] <Element80> ok then :)

[14:48] <dogbert17> now I can go on a closing spree :)

[14:51] <dogbert17> Element80: suggestion for where I should put tests for RT #131529

[14:51] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131529

[14:56] <Element80> dogbert17: I'm guessing add `byte` to @int-types at the top of S02-types/int-uint.t and fix up the rest of the file to handle it, if needed.

[14:58] <dogbert17> Element80: thx

[14:59] <Element80> buggable: testers f878354a-6183-11e7-89a5-c5f577a92919

[14:59] <buggable> Element80, Proc::Q:ver(1.001003) test result PASS. See more at https://temp.perl6.party/buggable/4544139040580451499266756.txt

[14:59] <Element80> That's bettah

[15:11] <Geth> ¦ roast: dogbert17++ created pull request #275: Add test for RT #131529

[15:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/275

[15:11] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131529

[15:14] <dogbert17> Element80: should I merge or do you see anything bogus?

[15:16] <Element80> dogbert17: looks good

[15:16] <dogbert17> thx

[15:17] <Element80> Though not what I meant when I add `byte` to @int-types :) It's a tangent point though, so I guess it don't matter for the ticket

[15:17] <Geth> ¦ roast: 0331647a61 | (Jan-Olof Hendig)++ | S02-types/int-uint.t

[15:17] <Geth> ¦ roast: Add test for RT #131529

[15:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0331647a61

[15:17] <Geth> ¦ roast: 3bc8e6df53 | dogbert17++ (committed using GitHub Web editor) | S02-types/int-uint.t

[15:17] <Geth> ¦ roast: Merge pull request #275 from dogbert17/test-rt-131529

[15:17] <Geth> ¦ roast:

[15:17] <Geth> ¦ roast: Add test for RT #131529

[15:17] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131529

[15:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3bc8e6df53

[15:19] <Element80> Filed an Issue: https://github.com/perl6/roast/issues/276

[15:21] <dogbert17> do we really have more than one byte type, e.g. byte1, byte8 etc?

[15:22] <Element80> Don't think so

[15:54] <Geth> ¦ roast: dogbert17++ created pull request #277: Add tests for RT #131273

[15:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/277

[15:54] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131273

[15:57] <Geth> ¦ roast: ed74b5b449 | (Jan-Olof Hendig)++ | 2 files

[15:57] <Geth> ¦ roast: Add tests for RT #131273

[15:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ed74b5b449

[15:57] <Geth> ¦ roast: d05653ace7 | dogbert17++ (committed using GitHub Web editor) | 2 files

[15:57] <Geth> ¦ roast: Merge pull request #277 from dogbert17/test-rt-131273

[15:57] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131273

[15:57] <Geth> ¦ roast:

[15:57] <Geth> ¦ roast: Add tests for RT #131273

[15:57] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131273

[15:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d05653ace7

[16:17] <Element80> this is weird. The toast run for HEAD appearntly completed fine without my having to kill anything

[16:19] <Element80> m: $*PERL.compiler.version.say

[16:19] <camelia> rakudo-moar 93d81d: OUTPUT: «v2017.06.140.g.93.d.81.d.61.a␤»

[16:19] <Element80> Yup. All the data seems to be there: https://toaster.perl6.party/

[16:19] <Element80> Unless I stroked off... but no, pretty sure I didn't need to kill anything.

[16:20] <Element80> buggable: toast

[16:20] <buggable> Element80, Between 2017.06-140-g93d81d6 and 2017.06: 9 (1.08%) modules got burnt; 12 (1.45%) got unsucced; 201 (24.22%) out of 830 modules appear unusable. See https://toast.perl6.party/ for details.

[16:21] <Element80> or maybe I did kill it. I recall killing UNIX::Daemonize, but it says "Succ" for 2017.06 :|

[16:22] <Element80> Oh, "Dubious, test returned 1 (wstat 256, 0x100)". So it's not Succ :/

[16:23] <Element80> And it got "Ambiguous use of »; use >> instead to mean hyper" warning  up in it :/

[16:23] <Element80> "daemonize(«rm $pidlockfile», :pid-file($pidlockfile))"

[16:24] <Element80> .ask TimToady is the `Ambiguous use of »` supposed to warn in cases like `run «rm $pidlockfile»` ? That's really annoying. I got it while running normal code and I see some ecosystem usage that now has the same warning pop out from their code.

[16:24] <jnthn> .oO( Unless you...what?! )

[16:24] <yoleaux> Element80: I'll pass your message to TimToady.

[16:25] <Element80> jnthn: stroked off == had a stroke

[16:25] <jnthn> Ah...it's...worse...in my dialect. :P

[16:25] <Element80> heh

[16:25] <Element80> greppable6: »

[16:25] <greppable6> Element80, Sorry, can't do that

[16:25] <jnthn> The hyper check does seem a bit overzealous

[16:26] <jnthn> It'd be nice if it only triggered when the thing actually successfully parsed as a hyper

[16:30] <jnthn> Time for some break, dinner, etc.

[16:32] <Geth> ¦ nqp: bc1b7361e6 | (Douglas Schrag)++ | t/hll/06-sprintf.t

[16:32] <Geth> ¦ nqp: Add tests for sprintf octal with precision

[16:32] <Geth> ¦ nqp:

[16:32] <Geth> ¦ nqp: Test octal precision with and without the '#' flag.

[16:32] <Geth> ¦ nqp: Ensure conformance with POSIX sprintf.

[16:32] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/bc1b7361e6

[16:32] <Geth> ¦ nqp: cd8d6ae046 | (Douglas Schrag)++ | src/HLL/sprintf.nqp

[16:32] <Geth> ¦ nqp: Do not add condition leading '0' if already present

[16:32] <Geth> ¦ nqp:

[16:32] <Geth> ¦ nqp: If precision is sufficient to pad octal with a leading '0',

[16:32] <Geth> ¦ nqp: then no additional prefix is needed with the '#' flag.

[16:32] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/cd8d6ae046

[16:32] <Geth> ¦ nqp: 1a90373c0f | (Zoffix Znet)++ (committed using GitHub Web editor) | 2 files

[16:32] <Geth> ¦ nqp: Merge pull request #364 from dmaestro/issue/353-sprintf-octal-padding

[16:32] <Geth> ¦ nqp:

[16:32] <Geth> ¦ nqp: Issue/353 sprintf octal padding

[16:32] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/1a90373c0f

[16:43] <Geth> ¦ nqp: 17c795cf6b | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[16:43] <Geth> ¦ nqp: Bump MoarVM

[16:43] <Geth> ¦ nqp:

[16:43] <Geth> ¦ nqp: MoarVM bump brought changes:

[16:43] <Geth> ¦ nqp: https://github.com/MoarVM/MoarVM/compare/2017.06-29-ga51ba62...2017.06-37-g4e29e4c

[16:43] <Geth> ¦ nqp:

[16:43] <Geth> ¦ nqp: 4e29e4c Fix an accidental nested redeclaration in proc.

[16:43] <Geth> ¦ nqp: 33e46e2 Eliminate duplicate code in utf8 decoder.

[16:43] <Geth> ¦ nqp: <…commit message has 6 more lines…>

[16:44] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/17c795cf6b

[16:44] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.06-29-ga51ba62...2017.06-37-g4e29e4c

[16:44] <Geth> ¦ rakudo/nom: d7e1046678 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[16:44] <Geth> ¦ rakudo/nom: Bump NQP

[16:44] <Geth> ¦ rakudo/nom:

[16:44] <Geth> ¦ rakudo/nom: NQP bump brought changes:

[16:44] <Geth> ¦ rakudo/nom: https://github.com/perl6/nqp/compare/2017.06-13-gc5fc79f...2017.06-35-g17c795c

[16:44] <Geth> ¦ rakudo/nom:

[16:44] <Geth> ¦ rakudo/nom: 17c795c Bump MoarVM

[16:44] <Geth> ¦ rakudo/nom: 1a90373 Merge pull request #364 from dmaestro/issue/353-sprintf-octal-padding

[16:44] <Geth> ¦ rakudo/nom: <…commit message has 32 more lines…>

[16:44] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d7e1046678

[16:44] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.06-13-gc5fc79f...2017.06-35-g17c795c

[16:50] <Geth> ¦ rakudo/nom: 99236d4009 | (Zoffix Znet)++ | docs/release_guide.pod

[16:50] <Geth> ¦ rakudo/nom: Add more planned release dates

[16:50] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/99236d4009

[16:52] <Geth> ¦ rakudo/nom: ff4039ca93 | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/release_guide.pod

[16:52] <Geth> ¦ rakudo/nom: Move cautionary note

[16:52] <Geth> ¦ rakudo/nom:

[16:52] <Geth> ¦ rakudo/nom: to be *before* the potentially dangerous instruction

[16:52] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ff4039ca93

[16:54] <nine> huggable: 6.d

[16:54] <huggable> nine, Proposals for 6.d language: https://github.com/perl6/specs/blob/master/v6d.pod

[16:55] <Geth> ¦ rakudo/nom: b3c14c6d8f | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/release_guide.pod

[16:55] <Geth> ¦ rakudo/nom: Remove "developmental" from releases list heading

[16:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b3c14c6d8f

[17:04] <Element80> pmurias: [Coke]++ was working on updated docs website. That's all the replacement work I'm aware of.

[17:17] <TimToady> jnthn: but that's the point, it didn't successfully parse as a hyper, but gave a different error downstream

[17:17] <yoleaux> 11:39Z <lizmat> TimToady: do you have any thoughts on deprecating (<+) in favour of baggy semantics of (<) and (<=) ?

[17:17] <yoleaux> 16:24Z <Element80> TimToady: is the `Ambiguous use of »` supposed to warn in cases like `run «rm $pidlockfile»` ? That's really annoying. I got it while running normal code and I see some ecosystem usage that now has the same warning pop out from their code.

[17:20] <TimToady> jnthn: we could perhaps make an exception list of things that are unlikely to be a postfix, but it's not impossible to have a postfix that starts with almost anything

[17:21] <Geth> ¦ roast: dogbert17++ created pull request #278: Added tests for RT #131272

[17:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/278

[17:21] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131272

[17:22] <TimToady> though I suppose if people start defining things like postfix:<;)> they deserve what they get ;)

[17:22] <Geth> ¦ roast: e4302e5d7d | (Jan-Olof Hendig)++ | 2 files

[17:22] <Geth> ¦ roast: Added tests for RT #131272

[17:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e4302e5d7d

[17:22] <Geth> ¦ roast: 68d34de4b8 | dogbert17++ (committed using GitHub Web editor) | 2 files

[17:22] <Geth> ¦ roast: Merge pull request #278 from dogbert17/test-rt-131272

[17:22] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131272

[17:22] <Geth> ¦ roast:

[17:22] <Geth> ¦ roast: Added tests for RT #131272

[17:22] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131272

[17:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/68d34de4b8

[17:24] <TimToady> lizmat: on the (<+) thing, my preferences lean toward getting rid of it if we can, and making Baggy types more contagious with respect to Setty types, on the theory that sets are mostly just constrained bags

[17:25] <TimToady> however, I missed the carpage earlier that caused the reversion, due to the drains braking in my house rather badly...

[17:25] <TimToady> er, *breaking

[17:26] <TimToady> but I don't like the idea of set operations coercing bags to sets and throwing away information

[17:28] <TimToady> and of course the drains break when we have kids and grandkids visiting, so we've been dodging plumbers in hazmat suits and spending far too much time driving out to restrooms...

[17:43] <Element80> TimToady: what if we don't detect any postfixes but merely warn if there's stuff after » that's being parsed while still inside the `«»` quote constuct?

[17:43] <Element80> i.e. the `»` is not the closing delimiter

[17:45] <Element80> m: my $x = 42; my %h = :42a; say %h<<42 $x>>;

[17:45] <camelia> rakudo-moar b3c14c: OUTPUT: «Potential difficulties:␤    Ambiguous use of >>; use » instead to mean hyper, or insert whitespace before >> to mean a quote terminator (or use different delimiters?)␤    at <tmp>:1␤    ------> 3my $x = 42; my %h = :42a; say %h<<42 $x7⏏5>>;…»

[17:45] <Element80> It warns even here.

[17:45] <TimToady> the » is already being parsed as a hyper at that point

[17:46] <Element80> I see.

[17:46] <TimToady> it's relying on the benign failure of parsing a postfixes after the », and that's a problem with extensible postfix notation

[17:47] <TimToady> we can guess that ; and ) are unlikely to be the beginnings of a postfix, but we can't be sure

[17:48] <TimToady> guessing may be good enough, but then there will just be other places that people expect $foo>> to dwim

[17:48] <Element80> m: say [[<x>],]

[17:48] <camelia> rakudo-moar b3c14c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in bracketed infix; couldn't find final ']' ␤at <tmp>:1␤------> 3say [[<7⏏5x>],]␤»

[17:48] <Element80> ^ is that the same sort of issue? The solution is to put the space rather than fixing ocde?

[17:48] <Element80> *codew

[17:49] <Element80> m: say [[ <x>],]

[17:49] <camelia> rakudo-moar b3c14c: OUTPUT: «[[x]]␤»

[17:49] <TimToady> reductions are one of the two places where we explicitly backtrack

[17:50] <TimToady> and it commits to < being an infix before it ever thinks about circumfix:<[ ]>

[17:50] <TimToady> the dwim in that rule is that if there are any spaces inside, it assumed it cannot be a reduction

[17:51] <Element80> ok, then I'll just close https://rt.perl.org/Ticket/Display.html?id=131701#ticket-history

[17:52] <TimToady> m: say [[x]]

[17:52] <camelia> rakudo-moar b3c14c: OUTPUT: «No zero-arg meaning for infix:<x>␤  in block <unit> at <tmp> line 1␤␤»

[17:53] <TimToady> m: say [[x ]]

[17:53] <camelia> rakudo-moar b3c14c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    x used at line 1␤␤»

[17:54] <TimToady> and the rationale for the dwim is that most lists have multiple members, which most people separate with a comma and a space

[17:54] <TimToady> so another spot where we optimize against code golf...

[17:55] <Element80> Well, I was writing [[<foo bar ber>], [<meow moo>]]

[17:55] <TimToady> most people never even realize there's a formal ambiguity between reduction operators and array composers

[17:55] <Element80> m: with [[<foo bar ber>], [<meow moo>]] {}

[17:55] <camelia> rakudo-moar b3c14c: ( no output )

[17:55] <Element80> Oh maybe I wasn't

[17:57] <TimToady> but this is also part of the reason for forbidding whitespace in metaops in general

[17:58] <Element80> Ah, OK, I wrote the above, but then shortened <foo bar ber> to just <foo> to get 1-el array. Though this was test code, not real program :)

[17:59] <TimToady> P5 had many more dwims of that sort, which is why we have fewer :)

[17:59] <Element80> :)

[18:01] <Geth> ¦ star: tbrowder++ created pull request #90: add specific instructions for a system installation

[18:01] <Geth> ¦ star: review: https://github.com/rakudo/star/pull/90

[18:25] <Geth> ¦ roast: 94ba24dc09 | (Elizabeth Mattijsen)++ | 2 files

[18:25] <Geth> ¦ roast: Test for baggy semantics on (<) and (<=) again

[18:25] <Geth> ¦ roast:

[18:25] <Geth> ¦ roast: This reverts 3bab9ac2a397a2728 and f8d8bff1cc159db4b3fe

[18:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/94ba24dc09

[18:27] <jnthn> TimToady: In the original program I'm pretty sure $foo>>[0] was being parsed as a valid hyper

[18:27] <jnthn> (The one the RT was originally about)

[18:29] <Element80> Yeah, and in `run «foo $bar»` the `»` also gets parsed as a hyper, and when it fails to find an infix that's when it knows it's the closing delim instead. That's how understand the problem at least.

[18:31] <Element80> m: sub postfix:<♥> { $^a.say }; say <<foo bar»♥()>>

[18:31] <camelia> rakudo-moar b3c14c: OUTPUT: «(foo bar»♥())␤»

[18:31] * Element80 shrugs

[18:32] <Element80> m: sub postfix:<♥> { $^a.say }; my $x = "foo"; say <<foo $x»♥>>

[18:32] <camelia> rakudo-moar b3c14c: OUTPUT: «Potential difficulties:␤    Ambiguous use of >>; use » instead to mean hyper, or insert whitespace before >> to mean a quote terminator (or use different delimiters?)␤    at <tmp>:1␤    ------> 3$^a.say }; my $x = "foo"; say <<foo $x»♥7⏏5>…»

[18:32] <jnthn> Yes, but "parsed as a valid hyper" I meant that it could something that completed it afterwards

[18:32] <jnthn> *by

[18:32] <jnthn> *could parse

[18:33] <jnthn> I mean, if it fails to parse it as a hyper + thing after then it just falls back to being the quote terminator that was probably intended

[18:34] <jnthn> So if we only complain when we parsed a >> as a hyper and it actually was finally interpreted as one, and it could conflict, then we'd complain

[18:35] <jnthn> But if we just saw the >> part and the thing after didn't work out as a hyper and we fell back to treating it as a quote terminator anyway, we could just silently let it pass

[18:35] <jnthn> Which would unbust the new warnings we've got

[18:36] <Element80> cool

[18:41] <Geth> ¦ rakudo/nom: 75797af30d | (Elizabeth Mattijsen)++ | 3 files

[18:41] <Geth> ¦ rakudo/nom: Re-instate baggy semantics of (<) and (<=)

[18:41] <Geth> ¦ rakudo/nom:

[18:41] <Geth> ¦ rakudo/nom: - as indicated by https://irclog.perlgeek.de/perl6-dev/2017-07-05#i_14830389

[18:41] <Geth> ¦ rakudo/nom: - this reverts 724cbca71046a1858a8d398 and d4436e18ce1e49eb74733

[18:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/75797af30d

[19:04] <Element80> Seems to do the trick

[19:04] * Element80 stresstests

[19:09] <Element80> ZOFFLOP: t/spec/S17-procasync/kill.t

[19:09] <Element80> ZOFFLOP: t/spec/S17-supply/syntax.t

[19:09] <Element80> ZOFVM: Files=1259, Tests=141127, 120 wallclock secs (20.44 usr  3.23 sys + 2261.25 cusr 217.42 csys = 2502.34 CPU)

[19:10] <Element80> hm, that's a high count of secs :|

[19:10] * Element80 stresstests again just to be sure

[19:12] <Element80> ZOFVM: Files=1259, Tests=141136, 113 wallclock secs (20.14 usr  3.66 sys + 2211.79 cusr 194.50 csys = 2430.09 CPU)

[19:17] <Geth> ¦ rakudo/nom: d39f7b9aff | (Zoffix Znet)++ | 2 files

[19:17] <Geth> ¦ rakudo/nom: Make ambiguous » warning less zealous

[19:17] <Geth> ¦ rakudo/nom:

[19:17] <Geth> ¦ rakudo/nom: Only warn when we sucessfully parsed a hyper and are about to

[19:17] <Geth> ¦ rakudo/nom: make an AST for it instead of right when we spot » or >>

[19:17] <Geth> ¦ rakudo/nom:

[19:17] <Geth> ¦ rakudo/nom: Fixes unwanted warnings in stuff like `run «foo $bar»` while still

[19:17] <Geth> ¦ rakudo/nom: keeping them for cases like the problematic one in the ticket[^1]

[19:17] <Geth> ¦ rakudo/nom: the original fix[^2] fixed.

[19:17] <Geth> ¦ rakudo/nom:

[19:17] <Geth> ¦ rakudo/nom: [1] https://rt.perl.org/Ticket/Display.html?id=131695

[19:17] <Geth> ¦ rakudo/nom: [2] https://github.com/rakudo/rakudo/commit/d5d3bd27635e43516c25d6b

[19:17] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d39f7b9aff

[19:18] <Element80> That still warns for stuff like `my $x = 42; say «foo $x»[0]»` but not for `my $x = 42; say «foo $x»`

[19:43] <dogbert17> does anyone have suggestions as to in which file I should add tests for RT #131386 ?

[19:43] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131386

[19:44] <Element80> S02-types/baggy.t ?

[19:45] <Element80> If I were writing tests for that ticket, I'd pre-emptively test all Set/SetHash, Bag/BagHash, and Mix/MixHash

[19:46] <Element80> m: for <Set Bag Mix> X ('', 'Hash') { my %x := ()."$_"; %x<a> }

[19:46] <camelia> rakudo-moar d39f7b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Quoted method name requires parenthesized arguments. If you meant to concatenate two strings, use '~'.␤at <tmp>:1␤------> 3g Mix> X ('', 'Hash') { my %x := ()."$_"7⏏5; %x<a> }␤»

[19:46] <Element80> m: for <Set Bag Mix> X ('', 'Hash') { my %x := ()."$_"(); %x<a> }

[19:46] <camelia> rakudo-moar d39f7b: OUTPUT: «No such method 'Set ' for invocant of type 'List'. Did you mean any of these?␤    Seq␤    Set␤    Str␤␤  in block <unit> at <tmp> line 1␤␤»

[19:46] <dogbert17> heh

[19:48] <Element80> m: use Test; plan 1; subtest 'can access key of empty list coerced to type' => { my @tests = <Set SetHash  Bag BagHash  Mix MixHash  Map Hash>; plan +@tests { lives-ok { my %x := ()."$_"(); %x<a> }, $_ } }

[19:48] <camelia> rakudo-moar d39f7b: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unexpected block in infix position (missing statement control word before the expression?)␤at <tmp>:1␤------> 3sh  Mix MixHash  Map Hash>; plan +@tests7⏏5 { lives-ok { my %x := ()."$_"(); %x<a> …»

[19:48] <Element80> m: use Test; plan 1; subtest 'can access key of empty list coerced to type' => { my @tests = <Set SetHash  Bag BagHash  Mix MixHash  Map Hash>; plan +@tests; for @tests { lives-ok { my %x := ()."$_"(); %x<a> }, $_ } }

[19:48] <camelia> rakudo-moar d39f7b: OUTPUT: «1..1␤    1..8␤    ok 1 - Set␤    ok 2 - SetHash␤    ok 3 - Bag␤    ok 4 - BagHash␤    ok 5 - Mix␤    ok 6 - MixHash␤    ok 7 - Map␤    ok 8 - Hash␤ok 1 - can access key of empty list coerced to type␤»

[19:48] <Element80> c: 87d0e0a39e~1 use Test; plan 1; subtest 'can access key of empty list coerced to type' => { my @tests = <Set SetHash  Bag BagHash  Mix MixHash  Map Hash>; plan +@tests; for @tests { lives-ok { my %x := ()."$_"(); %x<a> }, $_ } }

[19:48] <committable6> Element80, https://gist.github.com/3cb40dd42e91b00c3d8f65bb421ea358

[19:49] <Element80> Cool. It was also broken on Mix :)

[19:49] <dogbert17> perhaps you should add this now that you've done all the work :)

[19:49] <Element80> Nope

[19:49] * Element80 decommutes

[19:50] <dogbert17> can I steal your code ?

[19:50] <Element80> Sure

[19:50] <dogbert17> then it will sonn be fixed :)

[19:50] <dogbert17> *soon

[20:03] <Geth> ¦ roast: dogbert17++ created pull request #279: Added tests for RT #131386. Zoffix++

[20:03] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131386

[20:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/279

[20:04] <Geth> ¦ roast: d2d60f5a1c | (Jan-Olof Hendig)++ | S02-types/baggy.t

[20:04] <Geth> ¦ roast: Added tests for RT #131386. Zoffix++

[20:04] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d2d60f5a1c

[20:04] <Geth> ¦ roast: e156d2a03d | dogbert17++ (committed using GitHub Web editor) | S02-types/baggy.t

[20:04] <Geth> ¦ roast: Merge pull request #279 from dogbert17/test-rt-131386

[20:04] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131386

[20:04] <Geth> ¦ roast:

[20:04] <Geth> ¦ roast: Added tests for RT #131386. Zoffix++

[20:04] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131386

[20:04] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e156d2a03d

[20:37] <Geth> ¦ star: 7ed02c57e2 | (Tom Browder)++ (committed by Zoffix Znet) | README

[20:37] <Geth> ¦ star: add specific instructions for a system installation (#90)

[20:37] <Geth> ¦ star:

[20:37] <Geth> ¦ star: * add specific instructions for a system installation

[20:37] <Geth> ¦ star:

[20:37] <Geth> ¦ star: * tweak wording per Zoffix's comment

[20:37] <Geth> ¦ star: review: https://github.com/rakudo/star/commit/7ed02c57e2

[21:29] <Element80> "Should probably have <!after '='> to agree w/spec, but after NYI."

[21:30] <Element80> Looks like this comment (code?) is outdated: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Grammar.nqp#L4471

[21:57] <ugexe> `my $proc = Proc::Async.new("ls"); $proc.stdout; await $proc.start;` # should this await indefinitely?

[21:59] <geekosaur> yes? you told it to capture stdout but nothing is reading it, so it could well lead to a deadlock

[22:00] <ugexe> something nice with Proc vs Proc::Async is Proc can do silent processes easier ala run("test-command", :out, :err).exitcode == 0 vs my $proc = Proc::Async.new("test-command") andthen {.stdout.tap; .stderr.tap;}; $proc.exitcode == 0

[22:01] <geekosaur> and no, I don't think perl 6 or anything else can possibly make IPC behave the way people always think it should magically behave. if something is not consuming data on a pipe, the other end WILL block. you can't fix that on your (the perl 6) end except by reading the pipe

[22:08] <Element80> .exitcode == 0 can also be written as simply .so

[22:20] <ugexe> ah yeah. im in the habit of using .exitcode because I do a lot of probing-for-existence where you get stuff like run("prove",  "--help").exitcode == 1

[22:26] <jnthn> ugexe: If you don't .tap it then it won't start reading; that's 'cus you can also do $proc2.bind-stdin($proc1.stdout) which will plumb the fds together, in which case you'd really not like a read to happen

[22:30] <jnthn> Also, uh, does the thing you wrote with Proc really work?

[22:31] <[Coke]> FYI, segfault for me in doc test: https://github.com/perl6/doc/issues/1411

[22:31] <ugexe> the Proc one yeah. the Proc::Async needs a $proc.start in there

[22:32] <jnthn> `run("test-command", :out, :err).exitcode == 0` will at the very least leak handles

[22:32] <jnthn> I'm a tad surprised it doesn't deadlock if the commands produce sufficient output

[22:34] <jnthn> What'd be nicer is if we could provide some simple methods on Proc::Async that handle the common use cases

[22:40] <ugexe> i thought silent procs via :out/:err worked without leaking handles because of https://github.com/rakudo/rakudo/commit/e4468c610c1565be267dc6688d050c985e056afc#diff-7e0467c62428b3696cb555c69c52a4a0

[22:43] <ugexe> if it *does* leak handles then I have some code to change heh

[22:45] <Element80> That just waits for the proc to be done.

[22:46] <Element80> to set status

[22:47] <Element80> run("test-command", :!out, :!err).so should work, I think,

[22:47] <Element80> yeah, it just taps to silence it without doing anything with data

[22:48] <ugexe> ah, I like that better visually too

[22:48] <jnthn> Yeah was just looking at the code

[22:48] <jnthn> Those two will do the right thing.

[22:49] <jnthn> (:!out and :!err that is)

[22:50] <ugexe> i wonder if thats what is causing some people issues on travis-ci with big dependency chains

[22:50] <jnthn> Quite possibly, if the issue is they run out of handles

[22:50] <ugexe> no one has gotten a good error. it dies abruptly or segfaults

[22:51] <jnthn> Also today I fixed an issue where error reporting when a process was launched could end up occasionally SEGVing due to a GC rooting accident

[22:52] <jnthn> https://github.com/MoarVM/MoarVM/commit/4e29e4c717 fwiw

[22:53] <ugexe> in the cases i've seen there should not be any errors to report, unless the error reporting you're talking about is at a lower level

[22:57] <jnthn> No, this was in a case where for example launching a process failed

[22:58] <ugexe> ah, i guess it could be trying to report the process failed but dies abruptly because of that

[23:18] <[Coke]> trying to use samcv's perl6-lldb-m on mac; run the command, type "run" I get the 1..309 of the test plan, and then it just hangs. :|

[23:19] <samcv> hmm hangs?

[23:19] <samcv> can you show output?

[23:19] <samcv> like hangs how?

[23:20] <[Coke]> "stops emitting any output"

[23:20] <samcv> hm

[23:20] <samcv> odd

[23:21] <samcv> did you edit the library folders?

[23:21] <samcv> in the script?

[23:21] <[Coke]> so perl6-lldb-m xt/space-after-comma.t ; type "run" inside lldb; get 1..309, then nothing.

[23:21] <[Coke]> samcv: yes.

[23:21] <[Coke]> it emits the text from the first chunk as expected.

[23:22] <samcv> i get the same thing

[23:22] <samcv> it works with everything else i've run though

[23:22] <samcv> Process 9007 stopped and restarted: thread 2 received signal: SIGCHLD

[23:22] <samcv> no it's still running but hm

[23:22] <samcv> odd

[23:23] <samcv> i see what you're seeing though

[23:23] <samcv> i get the same thing in gdb though

[23:25] <[Coke]> ... guess I woin't bother installing gdb, then. :)

[23:26] <samcv> heh

[23:26] <samcv> i was gonna add lldb script to rakudo

[23:26] <samcv> i should do that

[23:47] <samcv> working on adding that [Coke] should be almost done as lng as no hitches in the makefile

[23:48] <samcv> [Coke], i've found the apple site has pretty good info on using lldb https://developer.apple.com/library/content/documentation/General/Conceptual/lldb-guide/chapters/C2-Understanding-LLDB-Command-Syntax.html#//apple_ref/doc/uid/TP40016717-CH7-SW1

[23:48] <samcv> well organized

[23:55] <[Coke]> does 'use strict' or 'no strict' actually do anything in rakudo other than set $*STRICT ?

[23:57] <[Coke]> ah, no strict allows you to auto declare vars.
