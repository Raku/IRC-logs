[01:28] * Zoffix chalks another -1 for "Perl 6" name

[01:28] <Zoffix> Doesn't justify sanely: https://i.imgur.com/hkPI2XP.png

[01:29] <timotimo> Zoffix: what happens if you use a non-breaking sace or something fancy like that?

[01:29] <yoleaux> 3 Nov 2017 23:57Z <MasterDuke> timotimo: followed jnthn's advice and got a general protection fault in valgrind with azawawi's test code: https://gist.github.com/MasterDuke17/ee516fde9916dc4dfc6ab74ca4e72e82

[01:29] <Zoffix> timotimo: yeah, I did use nbsp

[01:39] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1231: Convert the rest of the `{ * }` to `{*}`

[01:39] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1231

[01:39] <synopsebot> RAKUDO#1231 [open]: https://github.com/rakudo/rakudo/pull/1231 Convert the rest of the `{ * }` to `{*}`

[01:42] <Geth> ¦ rakudo: 102fbd5179 | (Daniel Green)++ | 47 files

[01:42] <Geth> ¦ rakudo: Convert the rest of the `{ * }` to `{*}`

[01:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/102fbd5179

[01:42] <Geth> ¦ rakudo: 33d476d1be | (Zoffix Znet)++ (committed using GitHub Web editor) | 47 files

[01:42] <Geth> ¦ rakudo: Merge pull request #1231 from MasterDuke17/more_normalizing_proto_bodies

[01:42] <Geth> ¦ rakudo:

[01:42] <Geth> ¦ rakudo: Convert the rest of the `{ * }` to `{*}`

[01:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/33d476d1be

[01:51] <Zoffix> m: use NativeCall; sub strnlen (Str is encoded('ascii') --> size_t) is native {}; say strnlen 'I NativeCall Perl 6';

[01:51] <camelia> rakudo-moar 33d476d1b: OUTPUT: «19␤»

[01:51] <Zoffix> m: use NativeCall; sub strnlen (Str is encoded('ascii') --> size_t) is native {}; say strnlen 'I NativeCall Perl 6';  say chars 'I NativeCall Perl 6'

[01:51] <camelia> rakudo-moar 33d476d1b: OUTPUT: «2␤19␤»

[01:51] <Zoffix> Why'd it change to "2" after added more unrelated code afterwards?

[01:54] <Zoffix> Oh, I'm calling the wrong function; meant `strlen`

[02:02] <Zoffix> m: use NativeCall; sub strlen (Str --> size_t) is native {}; say strlen 'I love Perl 6!';

[02:03] <camelia> rakudo-moar 33d476d1b: OUTPUT: «14␤»

[02:03] <Zoffix> Would love a more interesting NativeCall example that takes about the same amount of code.

[04:32] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1232: Add some INTERPOLATE variations

[04:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1232

[04:32] <synopsebot> RAKUDO#1232 [open]: https://github.com/rakudo/rakudo/pull/1232 Add some INTERPOLATE variations

[04:32] <samcv> MasterDuke++

[04:33] <samcv> this makes me happy :}

[04:35] <MasterDuke> heh, glad to hear it. now i'm off to get some sleep

[10:27] <AlexDaniel> m: say Order.^mro

[10:27] <camelia> rakudo-moar 33d476d1b: OUTPUT: «((Order) (Int) (Cool) (Any) (Mu))␤»

[10:27] <AlexDaniel> isn't it weird that there's no Enum?

[12:52] <[Tux]> Rakudo version 2017.10-116-g33d476d1b - MoarVM version 2017.10-47-gf88ab169d

[12:52] <[Tux]> csv-test-xs-20      0.453 -  0.459

[12:52] <[Tux]> csv-ip5xs           1.120 -  1.130

[12:52] <[Tux]> test-t              3.265 -  3.325

[12:52] <[Tux]> test               12.011 - 12.092

[12:52] <[Tux]> csv-ip5xs-20       13.024 - 13.077

[12:52] <[Tux]> csv-parser         12.696 - 13.205

[12:52] <[Tux]> test-t-20 --race   20.325 - 20.711

[12:52] <[Tux]> test-t-20          60.137 - 60.155

[12:54] <MasterDuke> hm, looks like all the test-t's got a little slower

[12:54] <jnthn> AlexDaniel: No, enum types are done as subtypes of the enum's base type, which is Int. They compose a few roles into that, such as the Enumeration role

[13:11] <AlexDaniel> ok

[13:11] <MasterDuke> m: my $s = 1_000_000; my $b = ^$s; my $p = (^$s).map({$b[$_]}); say $p[*-1]; say now - INIT now

[13:11] <camelia> rakudo-moar 33d476d1b: OUTPUT: «999999␤3.4725444␤»

[13:11] <MasterDuke> m: my $s = 1_000_000; my $b = ^$s; my $p = $b[^$s]; say $p[*-1]; say now - INIT now

[13:11] <camelia> rakudo-moar 33d476d1b: OUTPUT: «999999␤4.0715540␤»

[13:12] <MasterDuke> on my machine i consistently see that second form ~0.7s slower

[13:13] <MasterDuke> oh, List vs Seq

[13:14] <MasterDuke> i still would have expected the slice to be faster

[13:28] <Geth> ¦ roast: 284ff78be6 | usev6++ | S05-mass/properties-general.t

[13:28] <Geth> ¦ roast: [jvm] Re-fudge unicode tests, fixed on Moar only

[13:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/284ff78be6

[13:40] <Geth> ¦ roast: 8e5f7252d2 | usev6++ | S11-modules/export.t

[13:40] <Geth> ¦ roast: [jvm] Fudge tests for RT #129215

[13:40] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/8e5f7252d2

[13:40] <synopsebot> RT#129215 [open]: https://rt.perl.org/Ticket/Display.html?id=129215 Passing a Hash[...] as a parameter to an imported sub

[14:28] <Zoffix> m: say Order.^roles

[14:28] <camelia> rakudo-moar 33d476d1b: OUTPUT: «No such method 'roles' for invocant of type 'Perl6::Metamodel::EnumHOW'. Did you mean any of these?␤    does␤    roll␤␤  in block <unit> at <tmp> line 1␤␤»

[14:41] <Zoffix> $ echo "" | perl6 -e '$*IN.encoding: Nil; say $*IN.read: 10000000; say $*IN.eof;'

[14:41] <Zoffix> Buf[uint8]:0x<0a>

[14:41] <Zoffix> False

[14:46] <Zoffix> Doesn't seem to happen with normal handles. Perl gives True

[14:47] * Zoffix investigamates

[14:57] <Zoffix> The answers on this one demonstrate just how awful the strategy to program using SO answers is. 3 experts answered. All wrong in some way or another: https://stackoverflow.com/questions/47046761/does-perl-6s-eof-give-up-too-quickly/47106348

[15:03] <Zoffix> ehehe see it... I see the bug!

[15:03] * Zoffix readies the sandwich bread

[15:14] <pmurias> Zoffix: SO is sometimes usefull a source of ideas if you assume the answers are likely wrong ;)

[15:14] <Zoffix> Yeah :D

[15:26] <Geth> ¦ rakudo/js: 6 commits pushed by pmurias++

[15:26] <Geth> ¦ rakudo/js: f434e34065 | Update tools/build/makeNATIVE_SHAPED_ARRAY.pl6

[15:26] <Geth> ¦ rakudo/js: 44ef8fc0c9 | Parameterize using type objects instead of native ints

[15:26] <Geth> ¦ rakudo/js: 994940a824 | [js] Also type check when resetting a Scalar to a default with Nil

[15:26] <Geth> ¦ rakudo/js: 40348ae491 | Remove some leftover multidim disablement

[15:26] <Geth> ¦ rakudo/js: 8909cff195 | [js] Avoid pushing labels as a second child of a p6sink

[15:26] <Geth> ¦ rakudo/js: 34f1b310b2 | [js] Avoid passing a :cps named argument that's not accepted anymore

[15:26] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/compare/580a232e2f...34f1b310b2

[15:29] <Zoffix> ZOFFLOP: t/spec/S17-procasync/basic.t

[15:37] <Geth> ¦ nqp: a25acd1e82 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[15:37] <Geth> ¦ nqp: Bump MoarVM

[15:37] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a25acd1e82

[15:37] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.10-47-gf88ab16...2017.10-56-g2f0672f

[15:37] <Geth> ¦ rakudo: a8c789ecac | (Zoffix Znet)++ | tools/build/NQP_REVISION

[15:37] <Geth> ¦ rakudo: Bump NQP

[15:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a8c789ecac

[15:38] <Zoffix> ZOFVM: Files=1283, Tests=152838, 157 wallclock secs (21.96 usr  3.53 sys + 3394.35 cusr 178.67 csys = 3598.51 CPU)

[15:39] <Geth> ¦ roast: c08ef07a3b | (Zoffix Znet)++ | S16-io/eof.t

[15:39] <Geth> ¦ roast: Test EOF on TTY isn't too lately-set

[15:39] <Geth> ¦ roast:

[15:39] <Geth> ¦ roast: Fix: https://github.com/MoarVM/MoarVM/commit/2f0672f74523c6ddfe8a216

[15:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c08ef07a3b

[15:51] <travis-ci> NQP build failed. Zoffix Znet 'Bump MoarVM'

[15:51] <travis-ci> https://travis-ci.org/perl6/nqp/builds/297242592 https://github.com/perl6/nqp/compare/20536d98a51e...a25acd1e82e0

[16:21] <b2gills> That eof "fix" makes `.eof` return True at the end of a line of input if you use it interactively. Which breaks briandfoy's code on Stack Overflow in new and interesting ways.

[16:22] <b2gills> So is `.eof` supposed to be the end of the input, or the end of currently available data?

[16:26] <Zoffix> input

[16:30] <Geth> ¦ roast: 9c900e56f7 | (Zoffix Znet)++ | S16-io/eof.t

[16:30] <Geth> ¦ roast: Revert "Test EOF on TTY isn't too lately-set"

[16:30] <Geth> ¦ roast:

[16:30] <Geth> ¦ roast: This reverts commit c08ef07a3b05c7d59637c5f53c0611d835d6fc8b.

[16:30] <Geth> ¦ roast:

[16:30] <Geth> ¦ roast: https://irclog.perlgeek.de/perl6-dev/2017-11-04#i_15401308

[16:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9c900e56f7

[16:31] <Zoffix> gotta $work; just reverting everything now. Will take a look later if there's some trick can be done

[16:33] <Zoffix> But the "If I do the same thing in Perl 6 (Rakudo 2017.07) the program stops right away:" part of bdfoy's question is very likely the older TTY EOF bug on MacOS. And for "I'm really after a Supply that can give me one line of input as it arrives" part. That'd just be .lines.Supply innit?

[16:38] <Geth> ¦ nqp: f263b9c8a6 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[16:38] <Geth> ¦ nqp: Bump MoarVM

[16:38] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f263b9c8a6

[16:38] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.10-56-g2f0672f...2017.10-57-gd257df2

[16:38] <b2gills> Here is a quick test that I created that shows the issue with that code https://gist.github.com/b2gills/354aed9849d8a0f5fc537882f28f896c

[16:38] <Geth> ¦ rakudo: 629e8684e1 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[16:38] <Geth> ¦ rakudo: Bump NQP

[16:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/629e8684e1

[16:38] <Zoffix> ZOFFLOP: t/spec/S11-modules/require.t

[16:42] <Zoffix> Yeah. It'd just mark as EOF any time we read off TTY anything smaller than 0x100000 bytes :o

[16:43] <b2gills> Unless we want to make `.eof` blocking on interactive input, I think it is working correctly.

[16:43] <Zoffix> Our TTY handle tests need some beefing up.

[16:44] <b2gills> Well I'd run the test in the gist I just posted, except git isn't pulling down any data.

[16:55] <travis-ci> NQP build failed. Zoffix Znet 'Bump MoarVM'

[16:55] <travis-ci> https://travis-ci.org/perl6/nqp/builds/297261642 https://github.com/perl6/nqp/compare/a25acd1e82e0...f263b9c8a60f

[17:00] <Geth> ¦ nqp: b21e0e25f6 | pmurias++ | t/nqp/023-named-args.t

[17:00] <Geth> ¦ nqp: [jvm] Skip not yet fixed test

[17:00] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/b21e0e25f6

[17:06] <Zoffix> "<Zoffix> [...] Will take a look later if there's some trick can be done"   Won't. Can't think of anything that wouldn't make .eof block at some point and current behaviour isn't that terrible.

[17:06] * Zoffix &

[17:17] <Zoffix> /o\

[17:17] <travis-ci> NQP build passed. pmurias '[jvm] Skip not yet fixed test'

[17:17] <travis-ci> https://travis-ci.org/perl6/nqp/builds/297268451 https://github.com/perl6/nqp/compare/f263b9c8a60f...b21e0e25f6de

[17:19] <Zoffix> IO::CatHandle.read's design is crap. It switches to next handle if it didn't read enough stuff, but that doesn't quite work right, since .read on, say, TTY STDIN could return only some bytes and still not be at EOF

[17:50] <lizmat> Zoffix: good point

[17:50] <lizmat> hmmm... though, is it?

[17:51] <lizmat> isn't read supposed to block until it has enough bytes ?

[17:51] <dogbert17> wrt the latest ZOFFLOP: not ok 31 - got correct STDOUT

[17:51] <dogbert17> # Failed test 'got correct STDOUT'

[17:52] <dogbert17> # at t/spec/S17-procasync/basic.t line 85

[17:52] <dogbert17> # expected: 'Perl 6'

[17:52] <dogbert17> #      got: 'Perl'

[17:52] <dogbert17> seems to happen under load

[18:01] <lizmat> .oO( is that a sign ?  )

[18:06] <Zoffix> lizmat: no idea. it does block until at least one byte was received. Were it to block until 0x100000 bytes (the .read size our .lines stuff uses) were read from STDIN then it'd expect the user to bang out quite a few lines before .lines would give up the first line, wouldn't it?

[18:08] <Zoffix> dogbert17: good spot. Looks like second write promise is never awaited: https://github.com/perl6/roast/blob/master/S17-procasync/basic.t#L75

[18:08] <Zoffix> dogbert17: need to await it before this line: https://github.com/perl6/roast/blob/master/S17-procasync/basic.t#L80

[18:29] <Geth> ¦ rakudo: 6bca84fa1a | MasterDuke17++ | 2 files

[18:29] <Geth> ¦ rakudo: Add some INTERPOLATE variations

[18:29] <Geth> ¦ rakudo:

[18:29] <Geth> ¦ rakudo: Create INTERPOLATE_ASSERTION and some multis to pull functionality out

[18:29] <Geth> ¦ rakudo: of the regular INTERPOLATE multis.

[18:29] <Geth> ¦ rakudo:

[18:29] <Geth> ¦ rakudo: Makes `/ $rx /` and `/ <$rx> /` a bit faster.

[18:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6bca84fa1a

[18:29] <Geth> ¦ rakudo: ea3ffa2ee3 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | 2 files

[18:29] <Geth> ¦ rakudo: Merge pull request #1232 from MasterDuke17/add_some_INTERPOLATE_variations

[18:29] <synopsebot> RAKUDO#1232 [closed]: https://github.com/rakudo/rakudo/pull/1232 Add some INTERPOLATE variations

[18:29] <Geth> ¦ rakudo:

[18:29] <Geth> ¦ rakudo: Add some INTERPOLATE variations

[18:29] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ea3ffa2ee3

[18:30] <AlexDaniel> huggable: cla

[18:30] <huggable> AlexDaniel, nothing found

[18:30] <AlexDaniel> huggable: CLA

[18:30] <huggable> AlexDaniel, http://www.perlfoundation.org/contributor_license_agreement  print it out, sign it, scan it in (resize your scan to 250KB or less). Email to trademark -at- perlfoundation.org

[18:36] <MasterDuke> i've just never gotten around to it. guess i will eventually

[18:40] <Geth> ¦ rakudo: 2f12bea114 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[18:40] <Geth> ¦ rakudo: Telemetry tweaks

[18:40] <Geth> ¦ rakudo:

[18:40] <Geth> ¦ rakudo: - make sure order of @format *is* actually alphabetical

[18:40] <Geth> ¦ rakudo: - add blurb about supervisor thread in report header

[18:40] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2f12bea114

[18:50] <AlexDaniel> MasterDuke: please do

[18:52] <MasterDuke> lizmat: did i see you're registered for the london perl workshop?

[18:52] <lizmat> yes, that's correct :-)

[18:53] <MasterDuke> cool, i just registered yesterday. passing through london for work, decided to fly a day early and catch the conference

[18:54] <Geth> ¦ roast: 6e68b2c884 | (Zoffix Znet)++ (committed using GitHub Web editor) | S17-procasync/basic.t

[18:54] <Geth> ¦ roast: Add missing await

[18:54] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6e68b2c884

[18:54] <Zoffix> dogbert17: ^ that should fix it

[18:54] <lizmat> MasterDuke: looking forward to meeting you!

[18:54] <MasterDuke> likewise

[19:08] <Zoffix> Well, that was a waste of a day. Made a throttler/scheduler in Perl with Minion for a thing at $work... and it doesn't actually run on a target server because it's Windows and windows don't support fork. In Perl 6 it'd just be Supply.throttle -_-

[19:17] <Geth> ¦ rakudo: 4ed91ed644 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[19:17] <Geth> ¦ rakudo: More Telemetry tweaks

[19:17] <Geth> ¦ rakudo:

[19:17] <Geth> ¦ rakudo: - default for :header-repeat is now %*ENV<RAKUDO_REPORT_HEADER_REPEAT> // 32

[19:17] <Geth> ¦ rakudo: - default for :legend is now %*ENV<RAKUDO_REPORT_LEGEND> // 1

[19:17] <Geth> ¦ rakudo: - corrected report header for cpu/wallclock: we want seconds, not microseconds

[19:17] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4ed91ed644

[19:24] <dogbert17> Zoffix++, so it was the test itself which was broken

[19:24] <dogbert17> one ZOFFLOP hopefully gone :)

[19:26] <Zoffix> :)_

[20:43] <Geth> ¦ rakudo: c4d373c514 | (Elizabeth Mattijsen)++ | src/core/Kernel.pm

[20:43] <Geth> ¦ rakudo: Expose basic CPU usage information: Kernel.cpu-usage

[20:43] <Geth> ¦ rakudo:

[20:43] <Geth> ¦ rakudo: For situations like the Benchmark module, we don't want to have to load

[20:43] <Geth> ¦ rakudo: a lot of stuff.  This gives the bare-bones of the stuff we need there.

[20:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c4d373c514

[21:11] <Geth> ¦ rakudo: fea5612cb8 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[21:11] <Geth> ¦ rakudo: Allow for "use Telemetry <cpu wallclock>"

[21:11] <Geth> ¦ rakudo:

[21:11] <Geth> ¦ rakudo: Allow selective import of all subs that are available with :COLUMNS.

[21:11] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fea5612cb8

[21:20] <Geth> ¦ rakudo: 360eb2289f | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[21:20] <Geth> ¦ rakudo: Oops, we want the default exports available as well

[21:20] <Geth> ¦ rakudo:

[21:20] <Geth> ¦ rakudo: - so not only slice through EXPORT::COLUMNS, but also EXPORT::DEFAULT

[21:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/360eb2289f
