[00:01] <Zoffix> Filed as https://rt.perl.org/Ticket/Display.html?id=132186

[00:12] <BenGoldberg> m: my $a = :foo<bar>; my $b = :foo<bar>; .say for $a.WHERE, $b.WHERE;

[00:12] <camelia> rakudo-moar b9c985: OUTPUT: ¬´140432301836296‚ê§140432301836440‚ê§¬ª

[00:15] <BenGoldberg> m: :foo<bar>.WHERE.say for 1..2

[00:15] <camelia> rakudo-moar b9c985: OUTPUT: ¬´140243756639768‚ê§140243756649696‚ê§¬ª

[00:15] <BenGoldberg> m: 42.WHERE.say for 1..2

[00:15] <camelia> rakudo-moar b9c985: OUTPUT: ¬´140332874332240‚ê§140332874332240‚ê§¬ª

[00:16] <BenGoldberg> m: "perl".WHERE.say for 1..2

[00:16] <camelia> rakudo-moar b9c985: OUTPUT: ¬´140147600526720‚ê§140147600526720‚ê§¬ª

[00:16] <BenGoldberg> m: pi.WHERE.say for 1..2

[00:16] <camelia> rakudo-moar b9c985: OUTPUT: ¬´47915808‚ê§47915808‚ê§¬ª

[00:16] * BenGoldberg blinks.

[00:17] <BenGoldberg> Those don't looks like addresses.

[00:19] <Zoffix> Man, I miss Geth

[00:22] * BenGoldberg was looking through the irc log, read lizmat's two commits, one changing QAST::SVal.new( :value<new> ) expressions with $new variables initialized outside the loop (to reduce memory consumption), then a second where $new variables were replaced with :name<new> expressions, and wondered whether such things as :name<new> were interned somehow, thus saving memory.

[00:25] * BenGoldberg wonders how hard it would be for literal pairs to be memoized/interned.

[00:27] <Zoffix> What does "interned" mean?

[00:28] <geekosaur> cached for quick lookup and memory reuse, basically. comes from lisp

[00:29] <Zoffix> Ah

[00:30] <geekosaur> in this case it would imply that the variable is being passed by name and instead of making a new container for each time it's passed, the existing one is pointed to instead

[00:32] <Zoffix> P6Bot: hello

[00:33] <Zoffix> P6Bot: hello

[00:33] <Zoffix> something's broken with IRC::Client :\ don't wanna subscribe my plugins :\

[00:36] <Zoffix> and even examples no longer work :/

[00:42] <MasterDuke> hm, AlexDaniel had some trouble with committable6 earlier

[00:42] <AlexDaniel> that's probably not related

[00:43] <AlexDaniel> what I'm seeing is that the bots refuse to be started by systemd for some reason

[00:43] <AlexDaniel> but if I start them from ssh normally, then immediatelly they go up from systemd just fine

[00:44] <AlexDaniel> it's some sort of permission issue and precomp, maybe

[00:44] <AlexDaniel> or something. You see, now $HOME is no longer writable, only .precomp folder is

[00:44] <AlexDaniel> so anything attempting to write a file anywhere is going to fail

[00:44] * AlexDaniel actually has no idea what exactly precomp does

[00:45] <AlexDaniel> bisectable6: uptime

[00:45] <bisectable6> AlexDaniel, 16 hours, 51 minutes, and 29 seconds, 313.628KB maxrss. This is Rakudo version 2017.09-27-gda5c36c13 built on MoarVM version 2017.09.1-7-geeb664ea6 implementing Perl 6.c.

[00:46] <AlexDaniel> ‚Üë this is also a little bit outdated

[00:50] <Zoffix> AlexDaniel: are *ables run on latest rakudo/IRC::Client?

[00:50] <Zoffix> Having trouble even making this basic bot respond :S https://github.com/zoffixznet/perl6-IRC-Client/blob/master/examples/01-uppercase-bot.p6

[00:50] <AlexDaniel> Identity: IRC::Client:ver<3.007003>

[00:51] <Zoffix> yeah, that's latest :\

[00:51] <Zoffix> wtf

[00:51] <Zoffix> I'm not even seeing PRIVMSG show up :\

[00:52] <Zoffix> This is Rakudo version 2017.09-169-gb9c9853

[00:52] <AlexDaniel> .oO( immediately*‚Ä¶ one day I'll learn to spell that right )

[01:01] <Zoffix> P6Bot: hello

[01:01] <P6Bot> Zoffix, Hello to you too!

[01:02] <Zoffix> well shit, it's possible it's latest rakudos that bustified IRC::Client

[01:08] <Zoffix> nope.

[01:08] <Zoffix> Something with my local box. Still broken on the same rakudo version that I got on perl6.party

[01:09] <Zoffix> m: use nqp; nqp::getcomp('perl6').version

[01:09] <camelia> rakudo-moar b9c985: OUTPUT: ¬´This is Rakudo version 2017.09-169-gb9c98531c built on MoarVM version 2017.09.1-49-gb3dd812aa‚ê§implementing Perl 6.c.‚ê§¬ª

[01:09] <Zoffix> oh, my downgrade didn't downgrade MoarVM

[01:09] <MasterDuke> oh, btw, that io::socket::async IPv6 test fails on my machine also

[01:10] <Zoffix> It no longer fails on my VM, though I didn't even attempt at fixing it

[01:11] <MasterDuke> it's fine on my laptop (mostly unmodified kubuntu 17.04), but fails on my desktop (arch linux with IPv6 disabled)

[01:18] <MasterDuke> .tell eater some comments about the IPv6 io::socket::async test https://irclog.perlgeek.de/perl6-dev/2017-09-30#i_15237813

[01:18] <yoleaux> MasterDuke: I'll pass your message to eater.

[01:22] <Zoffix> Yup. Rakudo

[01:23] <Zoffix> works fine on 2017.09-23-g476741e, broken on 2017.09-169-gb9c98531c

[01:24] <Zoffix> .tell AlexDaniel FWIW basic IRC::Client bot works fine on 2017.09-23-g476741e, but is broken on 2017.09-169-gb9c98531c. Events don't even show up in debug output. No errors and I'm suspecting they get lost in one of the async constructs that don't catch anything: https://github.com/zoffixznet/perl6-IRC-Client/blob/master/examples/01-uppercase-bot.p6

[01:24] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[01:24] <AlexDaniel> .

[01:24] <yoleaux> 01:24Z <Zoffix> AlexDaniel: FWIW basic IRC::Client bot works fine on 2017.09-23-g476741e, but is broken on 2017.09-169-gb9c98531c. Events don't even show up in debug output. No errors and I'm suspecting they get lost in one of the async constructs that don't catch anything: https://github.com/zoffixznet/perl6-IRC-Client/blob/master/examples/01-uppercase-bot.p6

[01:25] <AlexDaniel> let's bisect it?

[01:25] * Zoffix has no idea how

[01:25] <AlexDaniel> Zoffix: what happens on broken revisions?

[01:26] <AlexDaniel> irc-to-me does not fire?

[01:27] <Zoffix> AlexDaniel: PRIVMSG events don't show up in debug log (and no, they don't fire): broken https://gist.github.com/zoffixznet/38d4fb24ca43a561a0fae115a13f5bbc  working (notice the PRIVMSG event shows up at the bottom): https://gist.github.com/zoffixznet/694aa5a318422f4f85afc96030b6ed42

[01:29] <AlexDaniel> something like this should work https://gist.github.com/AlexDaniel/4c1dbf4de7ceade927d6856c2cfaa693

[01:29] <AlexDaniel> I'll move to #zofbot to try it

[01:29] <AlexDaniel> (yes, you'll have to talk to the bot when he comes up, about 10 times)

[01:29] <AlexDaniel> but that's ok

[01:55] <Geth_> ¬¶ synopsebot: 39f0c93f46 | (Zoffix Znet)++ | bin/synopsebot.p6

[01:55] <Geth_> ¬¶ synopsebot: Add #zofbot to channels

[01:55] <Geth_> ¬¶ synopsebot: review: https://github.com/perl6/synopsebot/commit/39f0c93f46

[01:56] <Zoffix> blah blah blah RT#132186 #131417

[01:56] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132186

[01:56] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131417

[01:56] <synopsebot> RT#132186 02[new]: https://rt.perl.org/Ticket/Display.html?id=132186 last updated Fri,¬†29¬†Sep¬†2017¬†17:01:41¬†-0700: 02[REGEX][PRECOMP] "getlex: outer index out of range" with precomped `constant` Regex

[01:56] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132186

[01:56] <synopsebot> RT#131417 04[rejected]: https://rt.perl.org/Ticket/Display.html?id=131417 last updated Fri,¬†14¬†Jul¬†2017¬†07:29:49¬†-0700: 02[BUG] Incorrect useless use warning in `so try await`

[01:56] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131417

[01:56] <Zoffix> synopsebot6: shush

[01:57] <AlexDaniel> Zoffix: fwiw these colors don't look very nice

[01:57] <Zoffix> ZofBot: phhhh! Humans

[01:57] <ZofBot> Zoffix, So cur_frame->args might actually be the better place to look, as ncinvoke won't set up a new call frame and thus not initialize cur_frame->params.args

[01:57] <Zoffix> They look awesome on my terminal

[01:58] <Zoffix> https://i.imgur.com/UPrruty.png

[02:01] <AlexDaniel> https://user-images.githubusercontent.com/5507503/31041347-5c20590e-a59c-11e7-93d0-9a27bd8a5951.png

[02:02] <AlexDaniel> m: error

[02:02] <camelia> rakudo-moar b9c985: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Undeclared routine:‚ê§    error used at line 1‚ê§‚ê§¬ª

[02:02] <AlexDaniel> e: error

[02:02] <evalable6> AlexDaniel, rakudo-moar b9c98531c: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/qliXfAbLz_‚ê§Undeclared routine:‚ê§    error used at line 1‚ê§¬ª

[02:02] <Zoffix> AlexDaniel: wtf

[02:02] <Zoffix> u: ¬†29

[02:02] <unicodable6> Zoffix, U+00A0 NO-BREAK SPACE [Zs] (¬†)

[02:02] <unicodable6> Zoffix, U+0032 DIGIT TWO [Nd] (2)

[02:02] <unicodable6> Zoffix, 4 characters in total (¬†29¬†): https://gist.github.com/126036329ffd0ca24b5f99a499935a5c

[02:02] <Zoffix> Ahhh

[02:02] <AlexDaniel> Zoffix: camelia is using nicer colors too

[02:03] <AlexDaniel> that's OK, nevermind nbsp

[02:04] <Geth_> ¬¶ synopsebot: f0d9373c2f | (Zoffix Znet)++ | lib/SB/Plugin/RT.pm6

[02:04] <Geth_> ¬¶ synopsebot: Tweakerize

[02:04] <Geth_> ¬¶ synopsebot: review: https://github.com/perl6/synopsebot/commit/f0d9373c2f

[02:04] <Zoffix> blah blah blah RT#132186 #131417

[02:04] <synopsebot> RT#132186 [new]: https://rt.perl.org/Ticket/Display.html?id=132186 last updated Fri, 29 Sep 2017 17:01:41 -0700: [REGEX][PRECOMP] "getlex: outer index out of range" with precomped `constant` Regex

[02:04] <synopsebot> RT#131417 [rejected]: https://rt.perl.org/Ticket/Display.html?id=131417 last updated Fri, 14 Jul 2017 07:29:49 -0700: [BUG] Incorrect useless use warning in `so try await`

[02:04] <Zoffix> blah blah blah RT#132186 #131417

[02:05] <Zoffix> blah blah blah RT#132186 #131417

[02:05] <Zoffix> <3

[02:05] <MasterDuke> nice

[02:07] <AlexDaniel> for some reason blue color looks horrible everywhere. That's a screenshot from Riot: https://user-images.githubusercontent.com/5507503/31041387-31a37926-a59d-11e7-95de-37bc7e5be19b.png

[02:09] <AlexDaniel> unicodable, what the crap was that? I appreciate your new ability to reconnect automatically, but can't you just stay online?

[02:09] <unicodable6> AlexDaniel, U+0077 LATIN SMALL LETTER W [Ll] (w)

[02:09] <unicodable6> AlexDaniel, U+0068 LATIN SMALL LETTER H [Ll] (h)

[02:09] <unicodable6> AlexDaniel, 113 characters in total: https://gist.github.com/31142d721cbad7e688b8fc01f2a68f01

[02:09] <AlexDaniel> ‚Ä¶

[02:10] <AlexDaniel> MasterDuke: I know what's the problem with it!!

[02:10] <AlexDaniel> MasterDuke: there's a .precomp file in lib/ folder

[02:10] <AlexDaniel> so ReadWritePaths=/home/bisectable/git/whateverable/lib/.precomp

[02:10] <AlexDaniel> that's it

[02:11] <MasterDuke> good catch

[03:02] <Geth_> ¬¶ synopsebot: b56a5ae89e | (Zoffix Znet)++ | 6 files

[03:02] <Geth_> ¬¶ synopsebot: Complete old synbot feature transfer

[03:02] <Geth_> ¬¶ synopsebot:

[03:02] <Geth_> ¬¶ synopsebot: - Fix Doclinks

[03:02] <Geth_> ¬¶ synopsebot: - Impl synopses linker

[03:02] <Geth_> ¬¶ synopsebot: - Add uptime/help/bostnack plugin

[03:02] <Geth_> ¬¶ synopsebot: review: https://github.com/perl6/synopsebot/commit/b56a5ae89e

[03:06] <Geth_> ¬¶ synopsebot: f09b220aa6 | (Zoffix Znet)++ | 3 files

[03:06] <Geth_> ¬¶ synopsebot: Make file layout closer to old bot

[03:06] <Geth_> ¬¶ synopsebot:

[03:06] <Geth_> ¬¶ synopsebot: So hopefully I won't have to change the service file

[03:06] <Geth_> ¬¶ synopsebot: review: https://github.com/perl6/synopsebot/commit/f09b220aa6

[03:09] <Zoffix> rakudobrew@hack:~$ rakudobrew build-zef

[03:09] <Zoffix> Your branch is up-to-date with 'origin/master'.

[03:09] <Zoffix> ===> Testing: zef:ver<0.1.29>:auth<github:ugexe>

[03:09] <Zoffix> MoarVM panic: use of invalid eventloop work item index -1

[03:09] <Zoffix> Failed running /home/rakudobrew/rakudobrew/bin/../moar-nom/install/bin/perl6 -Ilib bin/zef test . at /home/rakudobrew/rakudobrew/bin/rakudobrew line 58.

[03:09] <Zoffix> main::run("/home/rakudobrew/rakudobrew/bin/../moar-nom/install/bin/perl6"...) called at /home/rakudobrew/rakudobrew/bin/rakudobrew line 548

[03:09] <Zoffix> main::build_zef() called at /home/rakudobrew/rakudobrew/bin/rakudobrew line 126

[03:09] <Zoffix> >_<

[03:09] <Zoffix> holy crap... it's stil on 2017.01-206-gaac9efc

[03:10] * Zoffix updates

[03:48] <geth> ¬¶ doc: 8f9443c3ac | (Meow)++ (committed using GitHub Web editor) | doc/Language/5to6-perlfunc.pod6

[03:48] <synopsebot> Link: https://doc.perl6.org/language/5to6-perlfunc

[03:49] <Zoffix> S22:30

[03:49] <synopsebot> Link: https://design.perl6.org/S22.html#line_30

[03:49] <Zoffix> RT#132186 #131417 RT132148

[03:49] <synopsebot> RT#132186 [new]: https://rt.perl.org/Ticket/Display.html?id=132186 [REGEX][PRECOMP] "getlex: outer index out of range" with precomped `constant` Regex last updated Fri, 29 Sep 2017 17:01:41 -0700

[03:49] <synopsebot> RT#131417 [rejected]: https://rt.perl.org/Ticket/Display.html?id=131417 [BUG] Incorrect useless use warning in `so try await` last updated Fri, 14 Jul 2017 07:29:49 -0700

[03:50] <synopsebot> RT#132148 [open]: https://rt.perl.org/Ticket/Display.html?id=132148 [RFC] native 'str' type unspecced, undocumented, and ill-defined last updated Thu, 28 Sep 2017 10:56:47 -0700

[03:50] <Zoffix> RT#132186 #131417 RT132148

[03:50] * Zoffix meow RT#132015

[03:50] <synopsebot> RT#132015 [new]: https://rt.perl.org/Ticket/Display.html?id=132015 [LTA] Backtraces for errors in EVAL print nonexistent paths (‚Äòfoo‚Äô.EVAL) last updated Fri, 01 Sep 2017 15:00:44 -0700

[03:50] <Zoffix> Perfect.

[03:50] <Zoffix> Transformation complete.

[03:50] <Zoffix> ZofBot: nice working with you

[03:50] <ZofBot> Zoffix, "is assoc" Specifies the associativity of an operator explicitly

[03:52] <Geth_> ¬¶ synopsebot: 244db08dbb | (Zoffix Znet)++ | lib/SB/Plugin/RT.pm6

[03:52] <Geth_> ¬¶ synopsebot: Remove "last updated" info from RT tickets

[03:52] <Geth_> ¬¶ synopsebot:

[03:52] <Geth_> ¬¶ synopsebot: Too much info and too little use for last updated

[03:52] <Geth_> ¬¶ synopsebot: review: https://github.com/perl6/synopsebot/commit/244db08dbb

[03:53] * Zoffix meow RT#132015

[03:53] <synopsebot> RT#132015 [new]: https://rt.perl.org/Ticket/Display.html?id=132015 [LTA] Backtraces for errors in EVAL print nonexistent paths (‚Äòfoo‚Äô.EVAL)

[03:53] <AlexDaniel> blah #130442

[03:53] <synopsebot> RT#130442 [new]: https://rt.perl.org/Ticket/Display.html?id=130442 [REGRESSION] [LTA] redo without a loop no longer prints the line number, also claims it is a compile-time error (redo)

[03:54] <AlexDaniel> oh noes, I no longer have a favorite open ticket

[04:18] <nine> .tell Zoffix added your user to the camelia VM where geth is running

[04:18] <yoleaux> 29 Sep 2017 21:40Z <AlexDaniel> nine: Geth is down

[04:18] <yoleaux> nine: I'll pass your message to Zoffix.

[04:18] <yoleaux> 29 Sep 2017 22:48Z <Zoffix> nine: would I have the option to getting keys to geth so I could restart it, or pull new changes to it, if needed?

[07:53] <Geth> ¬¶ rakudo/nom: 415e9adb96 | (Tom Browder)++ | 9 files

[07:53] <Geth> ¬¶ rakudo/nom: changes for Texas => ASCII

[07:53] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/415e9adb96

[07:53] <Geth> ¬¶ rakudo/nom: 9bbfed162b | lizmat++ (committed using GitHub Web editor) | 9 files

[07:53] <Geth> ¬¶ rakudo/nom: Merge pull request #1176 from tbrowder/texas

[07:53] <Geth> ¬¶ rakudo/nom:

[07:53] <Geth> ¬¶ rakudo/nom: changes for Texas => ASCII

[07:53] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9bbfed162b

[09:10] <[Tux]> This is Rakudo version 2017.09-171-g9bbfed162 built on MoarVM version 2017.09.1-50-g3059ba28

[09:10] <[Tux]> csv-ip5xs        1.318 -  1.329

[09:10] <[Tux]> test             9.816 -  9.902

[09:10] <[Tux]> test-t           3.198 -  3.251

[09:10] <[Tux]> csv-parser      12.367 - 12.640

[09:53] <lizmat> afk for rest of the day&

[09:54] <timotimo> buggable: speed 10

[09:54] <buggable> timotimo, ‚ñÖ‚Üë‚ñà‚ñÜ‚ñÉ‚ñÇ‚ñÅ‚ñÅ‚ñÇ‚ñÅ dates: 2017-09-28‚Äì2017-09-30; range: 3.183s‚Äì4.010s; speed: 12% faster

[11:16] <Geth_> ¬¶ synopsebot: 895a6adf03 | (Zoffix Znet)++ | 2 files

[11:16] <Geth_> ¬¶ synopsebot: Reword %seen business

[11:16] <Geth_> ¬¶ synopsebot: review: https://github.com/perl6/synopsebot/commit/895a6adf03

[11:17] <Geth> ¬¶ synopsebot: 895a6adf03 | (Zoffix Znet)++ | 2 files

[11:17] <Geth> ¬¶ synopsebot: Reword %seen business

[11:17] <Geth> ¬¶ synopsebot: review: https://github.com/perl6/synopsebot/commit/895a6adf03

[11:27] <AlexDaniel> squashable6: status

[11:28] <squashable6> AlexDaniel, Next SQUASHathon in 5 days and ‚âà22 hours (2017-10-07 UTC-12‚åÅUTC+14)

[11:31] <timotimo> releasable6: status

[11:31] <releasable6> timotimo, Next release in 21 days and ‚âà7 hours. No blockers. Changelog for this release was not started yet

[11:31] <releasable6> timotimo, Details: https://gist.github.com/46a441880f2737503a886fa4ed11633f

[11:38] <Geth> ¬¶ roast: tbrowder++ created pull request #338: changes for Texas => ASCII

[11:38] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/pull/338

[11:38] <Geth> ¬¶ roast: 19a273a224 | (Tom Browder)++ (committed using GitHub Web editor) | 15 files

[11:38] <Geth> ¬¶ roast: changes for Texas => ASCII (#338)

[11:38] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/19a273a224

[11:58] <Zoffix> This is weird:

[11:58] <Zoffix> m: with (Seq.new: class :: does Iterator { method pull-one { say "pull"; $++ < 3 ?? $++ !! IterationEnd } }.new,).map(|*).skip { .sink; .say }

[11:58] <camelia> rakudo-moar 9bbfed: OUTPUT: ¬´pull‚ê§This Seq has already been iterated, and its values consumed‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§pull‚ê§pull‚ê§pull‚ê§¬ª

[11:58] <Zoffix> How come the remaining 3 pulls are after the error?

[12:03] <Zoffix> m: with (Seq.new: class :: does Iterator { method pull-one { say "pull"; $++ < 3 ?? $++ !! IterationEnd } }.new,).map(|*) { .iterator.sink-all; .perl.say  }

[12:03] <camelia> rakudo-moar 9bbfed: OUTPUT: ¬´pull‚ê§pull‚ê§pull‚ê§pull‚ê§Seq.new-consumed()‚ê§¬ª

[12:03] <Zoffix> c: 2017.07 with (Seq.new: class :: does Iterator { method pull-one { say "pull"; $++ < 3 ?? $++ !! IterationEnd } }.new,).map(|*).skip { .sink; .say }

[12:03] <committable6> Zoffix, ¬¶2017.07: ¬´pull‚ê§pull‚ê§pull‚ê§pull‚ê§This Seq has already been iterated, and its values consumed‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in block <unit> at /tmp/SEq04fO07k line 1‚ê§ ¬´exit code = 1¬ª¬ª

[12:03] <Zoffix> I guess something with buffering and STDERR/STDOUT

[12:05] <Zoffix> .tell AlexDaniel (for release review): don't know if it's a problem or not, but noticed on HEAD this code consistently outputs 3 "pull"s after the error, while in the past all 4 "pulls" came before it: https://irclog.perlgeek.de/perl6-dev/2017-09-30#i_15239023

[12:05] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[12:08] <Zoffix> .tell AlexDaniel nevermind. I need more coffee >_< one version does .skip and the other doesn't

[12:08] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[12:13] <Zoffix> Would be cool to have a bool version of `andthen` that aliases to $_

[12:13] <Zoffix> Second time today finding myself wanting to do `$foo and return $foo`

[12:13] <Zoffix> .oO( $foo andso .return )

[12:14] <jnthn> .return if .so given $foo

[12:14] <Zoffix> Thanks

[12:14] <Zoffix> Tried making a module, but no idea how to make thunks in userland https://github.com/zoffixznet/perl6-AndSo

[12:14] <jnthn> Not quite as cute, but gets to one mention of $foo

[12:15] <AlexDaniel> c: 2017.07 with (Seq.new: class :: does Iterator { method pull-one { note "pull"; $++ < 3 ?? $++ !! IterationEnd } }.new,).map(|*).skip { .sink; .say }

[12:15] <yoleaux> 12:05Z <Zoffix> AlexDaniel: (for release review): don't know if it's a problem or not, but noticed on HEAD this code consistently outputs 3 "pull"s after the error, while in the past all 4 "pulls" came before it: https://irclog.perlgeek.de/perl6-dev/2017-09-30#i_15239023

[12:15] <committable6> AlexDaniel, ¬¶2017.07: ¬´pull‚ê§pull‚ê§pull‚ê§pull‚ê§This Seq has already been iterated, and its values consumed‚ê§(you might solve this by adding .cache on usages of the Seq, or‚ê§by assigning the Seq into an array)‚ê§  in block <unit> at /tmp/LG_6wuI5A1 line 1‚ê§ ¬´exit code = 1¬ª¬ª

[12:15] <yoleaux> 12:08Z <Zoffix> AlexDaniel: nevermind. I need more coffee >_< one version does .skip and the other doesn't

[12:15] <AlexDaniel> c: 2017.07,HEAD with (Seq.new: class :: does Iterator { method pull-one { note "pull"; $++ < 3 ?? $++ !! IterationEnd } }.new,).map(|*).skip { .sink; .say }

[12:15] <committable6> AlexDaniel, https://gist.github.com/c3c03a20aaab432b06fa1534e7d1f787

[12:17] <AlexDaniel> Zoffix: Isn't it just that the stdout/stderr merging happens a little bit differently (which is ok)? https://gist.github.com/Whateverable/d0651456b85a8179d0aa4d1c2b7f87a8

[12:17] <AlexDaniel> either way coffee that is

[12:18] <Zoffix> No, the output is the same with same code. I just mistakenly used different code

[12:18] <AlexDaniel> ah right, you said it. Should backlog till the end before writing any of my stupid answers :D

[12:18] <Zoffix> :)

[12:19] <AlexDaniel> and yea, I did already bisect it to 4b02b8aadcb47‚Ä¶ :)

[12:20] <AlexDaniel> ah, that's in the gist even‚Ä¶ OK, more coffee for me please /o\

[12:44] <AlexDaniel> thinking about it, bisectable does not pretend to be a TTY so it will give a different result than what most people will see in their terminal :S

[12:45] * Zoffix calls dibs on RT132109

[12:45] <synopsebot> RT#132109 [open]: https://rt.perl.org/Ticket/Display.html?id=132109 [BUG] `.skip` on a sequence starting with a `Slip`, returns a corrupted `Seq`

[12:45] <Zoffix> Already fixed it, but the bug exists in half a dozen other cases and I need to hunt them down and write tests, but gotta $do-other-things first

[12:46] <Zoffix> will push in 5hr

[12:46] * Zoffix &

[12:46] <AlexDaniel> (v6.d prep?)

[12:46] <AlexDaniel> .oO*

[12:46] <Zoffix> ?

[12:46] <AlexDaniel> Zoffix: just kidding, but I thought you were in v6.d-prep mode

[12:47] <Zoffix> Well, it stalled since I found out there's currently no way to find caller's version and I don't think I know enough to fix that

[12:47] <Zoffix> https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md#need-a-way-to-know-callers-language

[13:19] <Zoffix> I guess not quite stalled. There's still 1000+ roast commits to review :D

[14:03] <Zoffix> m: (<a b c>, <d e>).map(-> $a, $b {|$_}).iterator.^name.say

[14:03] <camelia> rakudo-moar 9bbfed: OUTPUT: ¬´Any::IterateTwoWithoutPhasers‚ê§¬ª

[14:03] <Zoffix> m: (<a b c>, <d e>).map(-> $a, $b {NEXT $++; |$_}).iterator.^name.say

[14:03] <camelia> rakudo-moar 9bbfed: OUTPUT: ¬´Any::IterateMoreWithPhasers‚ê§¬ª

[14:04] <Zoffix> oh, disregard. I thought there was a TwoWithPhasers

[14:06] <yoleaux> Zoffix: make separate t/spectest.data for each language version, bruh

[14:06] <Zoffix> yoleaux: already done, bruh

[15:23] <Geth> ¬¶ rakudo/nom: 41896b7bbf | (Zoffix Znet)++ | src/core/Any-iterable-methods.pm

[15:23] <Geth> ¬¶ rakudo/nom: Fix .push-all/.skip-all on SlippyIterators

[15:23] <Geth> ¬¶ rakudo/nom:

[15:23] <Geth> ¬¶ rakudo/nom: Fixes RT#132109: https://rt.perl.org/Ticket/Display.html?id=132109

[15:23] <Geth> ¬¶ rakudo/nom:

[15:23] <Geth> ¬¶ rakudo/nom: The implemented methods forget to check whether we're currently

[15:23] <Geth> ¬¶ rakudo/nom: $!slipping, which causes loss of all the remaining elements in the

[15:23] <Geth> ¬¶ rakudo/nom: currently slipping Slip.

[15:23] <Geth> ¬¶ rakudo/nom:

[15:23] <Geth> ¬¶ rakudo/nom: Fix by add ing a check for $!slipping and doing self.skip-one and

[15:23] <Geth> ¬¶ rakudo/nom: pushing (or skipping) those values before we go into the main

[15:23] <Geth> ¬¶ rakudo/nom: loop of pulling more from the source iterator.

[15:23] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/41896b7bbf

[15:24] <timotimo> good catch

[15:24] <Zoffix> <synopsebot> RT#132109 [open]: https://rt.perl.org/Ticket/Display.html?id=132109 [BUG] `.skip` on a sequence starting with a `Slip`, returns a corrupted `Seq`

[15:24] <timotimo> why didn't synopsebot write that?

[15:24] <Zoffix> 'cause I tested whether the semicolon works in #zofbot first and the %seen check is currently broken in that it doesn't consider the channel where the RT was seen :P

[15:25] <timotimo> ah

[15:25] <Geth> ¬¶ roast: 2e23965fa1 | (Zoffix Znet)++ | S32-list/skip.t

[15:25] <Geth> ¬¶ roast: Test SlippyIterators correctly .push-all/.skip-all

[15:25] <Geth> ¬¶ roast:

[15:25] <Geth> ¬¶ roast: RT#132109: https://rt.perl.org/Ticket/Display.html?id=132109

[15:25] <Geth> ¬¶ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/41896b7bbf

[15:25] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/2e23965fa1

[15:26] <timotimo> i wonder if synopsebot should even still be called synopsebot. when did we last use it to link to the design docs?

[15:26] <timotimo> quotable6: synopsebot.*design.perl6.org

[15:26] <timotimo> that's not how that bot works?

[15:27] <Zoffix> quotable6: help

[15:27] <quotable6> Zoffix, Like this: quotable6: /^ ‚Äòbisect: ‚Äô / # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Quotable

[15:27] <quotable6> timotimo, https://gist.github.com/83b13b98f160c958826c8837a3a428d9

[15:27] <Zoffix> quotable6: /synopsebot.*design.perl6.org/

[15:28] <Zoffix> Oh, it did respond

[15:29] <quotable6> Zoffix, https://gist.github.com/a69cb8c2e97b475c22715a9f3bce5fb1

[15:29] <timotimo> hah

[15:29] <timotimo> S99:foo

[15:29] <synopsebot> Link: https://design.perl6.org/S99.html#foo

[15:30] <timotimo> it does give links to design.perl6.org now, but it doesn't seem like it did that in a long time

[15:30] <timotimo> wait ... it never did that?

[15:30] <timotimo> quotable6: synopsebot.*perlcabal

[15:30] <Geth> ¬¶ synopsebot: 03acd9f59a | (Zoffix Znet)++ | lib/SB/Plugin/RT.pm6

[15:30] <Geth> ¬¶ synopsebot: Make RT seen-er see per-channel

[15:30] <Geth> ¬¶ synopsebot: review: https://github.com/perl6/synopsebot/commit/03acd9f59a

[15:31] <Zoffix> timotimo: pretty sure I copied the text it gives from the old guts

[15:31] <quotable6> timotimo, https://gist.github.com/79e59ab3826865e8ea625e9794d6017d

[15:32] <timotimo> that's not the problem :)

[15:32] <Zoffix> RT#132109

[15:32] <synopsebot> RT#132109 [resolved]: https://rt.perl.org/Ticket/Display.html?id=132109 [BUG] `.skip` on a sequence starting with a `Slip`, returns a corrupted `Seq`

[15:32] <timotimo> i'm just wondering, with the synopses not being as interesting any more ...

[15:32] <Zoffix> RT#132109

[15:32] <Zoffix> k, works correctly now

[15:39] <timotimo> i think we should remove the debug output for when a class fails to get a generated BUILDALL

[15:40] <Geth> ¬¶ rakudo/nom: 4d0ead240a | (Timo Paulssen)++ | src/Perl6/Metamodel/ClassHOW.nqp

[15:40] <Geth> ¬¶ rakudo/nom: don't output when add_method for BUILDALL fails.

[15:40] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4d0ead240a

[15:40] <timotimo> i triggered it with zef, but that's probably because my zef still has its own BUILDALL

[15:40] <timotimo> m: class test { submethod BUILDALL { } }

[15:40] <camelia> rakudo-moar 41896b: ( no output )

[15:40] <timotimo> m: class test { method BUILDALL { } }

[15:40] <camelia> rakudo-moar 41896b: ( no output )

[15:40] <timotimo> m: class test { method BUILDALL(|) { } }

[15:40] <camelia> rakudo-moar 41896b: ( no output )

[15:40] <timotimo> m: class test { submethod BUILDALL(|) { } }

[15:40] <camelia> rakudo-moar 41896b: ( no output )

[15:40] <timotimo> hmm

[15:41] <timotimo> m: class test { has $.foo; submethod BUILDALL(|) { } }

[15:41] <camelia> rakudo-moar 41896b: OUTPUT: ¬´test failed to add a BUILDALL‚ê§¬ª

[15:41] <timotimo> there it is

[15:49] <timotimo> something bad is happening in Data::Dump::Tree where rakudo gets confused parsing the pod in the beginning of the file

[15:50] <timotimo> in all files actually

[15:51] <timotimo> well, multiple files anyway

[16:02] <nine> Odd. I now got it to compile optimized function bodies for native calls at CHECK time but when I load a precompiled Inline::Perl5, they are not there ($!optimized-body of the Routine) anymore and it compiles again.

[16:03] <nine> Ah, I probably need to do something with the deserialize_ast

[16:13] <AlexDaniel> err yeah quotable doesn't really include the nickname of the sender

[16:13] <AlexDaniel> also no timestamp and no channel :(

[16:19] <ugexe> should i be able to use $*USAGE outside of a MAIN block? e.g. to modify the usage output shown when a bad command is entered

[16:20] <ugexe> `perl6 -e '$*USAGE.subst(/Usage/, "Foosage"); sub MAIN(Int $a) { }' 1` doesn't work for instance

[16:33] <ugexe> `multi sub MAIN(Int $a) { }; multi sub MAIN(|) { say $*USAGE.subst(/Usage/, "Foosage"); };` works I guess

[16:43] <Zoffix> ugexe: no, it's dynamically scoped to sub MAIN and sub USAGE.

[16:49] <Zoffix> (more accurately: to MAIN_HELPER that then invokes MAIN or USAGE)

[17:08] <AlexDaniel> evalable6 is on the strike :S

[17:10] <timotimo> who's on first?

[17:15] <timotimo> uh oh

[17:15] <timotimo> nativecall arrays.t crashed in one of the travis jobs

[17:16] <timotimo> quotable6: ZOFFLOP

[17:17] <quotable6> timotimo, https://gist.github.com/9ba33f043ccc6fcf525905015a48d5f2

[17:21] <nine> Odd again is that finish_code_object doesn't need to do anything in the deserialize_ast

[17:22] <nine> timotimo: any error message?

[17:22] <timotimo> looks like it crashes, but there was no output because prove wasn't told to output anything

[17:22] <timotimo> hm. perhaps we should do something like "make test or make test VERBOSE=1" so that if the test fails it'll run again but with output?

[17:24] <Zoffix> why not run it verbose from the start?

[17:24] <timotimo> hm, let's see how much output it is

[17:24] <Zoffix> Oh, you weren't talking about travis. Neveermind...

[17:25] <timotimo> well, VERBOSE=1 isn't the right one

[17:28] <timotimo> it's a bunch of output, but not gigantic

[17:28] <timotimo> and --verbosity=1 is not compatible with any --jobs but 1

[17:28] <timotimo> oh no, the timezone on this shellhost is ... not what i was expecting

[17:29] <Zoffix> There'll be a bunch more output soon. There's a swath of tests that isn't running ATM. I meant it would be nice to enable verbose output by default on travis so that it'd showed what the failure was

[17:30] <timo> praise be the /upgrade command in weechat

[17:31] <Zoffix> "Upgrade done (0.58 seconds)" that was too fast :/

[17:32] <Zoffix> "WeeChat 1.0.1" ... is that the latest version?

[17:32] <Zoffix> guess not, since timotimo is on 1.9 :P

[17:33] <timotimo> oh, /upgrade is just so it execs itself but keeps buffers and stuff around

[17:34] <Zoffix> AH

[17:34] <timotimo> i used it after setting the TZ env var from inside weechat with "/set env ..."

[17:36] <AlexDaniel> timotimo: fwiw I don't think it's the latest version (so it does not show the most recent flops)

[17:36] <AlexDaniel> I'll work on it now

[17:37] <timotimo> latest version of the irc logs?

[17:38] <AlexDaniel> yea

[17:46] <timotimo> i didn't know we version our logs :)

[17:48] <AlexDaniel> ‚Ä¶ I do :) When talking about quotable there are two versions: ‚Äúoutdated‚Äù and ‚Äúup-to-date‚Äù

[17:50] <AlexDaniel> .oO( we will get quotable with up-to-date logs on Christmas, I just don't know which one )

[17:51] <timotimo> oh no ... you didn't put question marks before and after those words, right?

[17:51] <timotimo> is something in my weechat-to-terminal chain broken again? >_>

[17:52] <AlexDaniel> timotimo: no, these are curly quotes

[17:53] <timotimo> oh, did i have to set LC_ALL ...

[17:53] <AlexDaniel> lol, it probably renders ¬ø the wrong way too :D

[18:40] <yoleaux> Zoffix: so, what's happening with $?USAGE?

[18:40] <Zoffix> yoleaux: it's completed. Now known as $*USAGE

[18:43] <nine> Ha! The else block in src/NQP/World.nqp:353 is dead code. There hasn't been a replacecoderef op since parrot went away.

[19:06] <BenGoldberg> m: dd $*USAGE

[19:06] <camelia> rakudo-moar 4d0ead: OUTPUT: ¬´Failure.new(exception => X::Dynamic::NotFound.new(name => "\$*USAGE"), backtrace => Backtrace.new)‚ê§¬ª

[19:07] <Zoffix> It's dynamically scoped to sub MAIN and sub USAGE.

[19:08] <Zoffix> m: sub MAIN($x, $y, $z) {}; sub USAGE { $*USAGE.flip.say }

[19:08] <camelia> rakudo-moar 4d0ead: OUTPUT: ¬´ >z< >y< >x< odFq23jB6O-elif-toblave/pmt/  ‚ê§:egasU‚ê§¬ª

[19:45] <Geth> ¬¶ synopsebot: 18e6b39407 | (Zoffix Znet)++ | META6.json

[19:45] <Geth> ¬¶ synopsebot: Add missing modules to META

[19:45] <Geth> ¬¶ synopsebot: review: https://github.com/perl6/synopsebot/commit/18e6b39407

[19:52] <Geth> ¬¶ synopsebot: 8b893d6153 | (Zoffix Znet)++ | 5 files

[19:52] <Geth> ¬¶ synopsebot: Seen-protect doclinks and synlinks too

[19:52] <Geth> ¬¶ synopsebot: review: https://github.com/perl6/synopsebot/commit/8b893d6153

[19:55] <Geth> ¬¶ synopsebot: 21379e6d42 | (Zoffix Znet)++ | lib/SB/Plugin/RT.pm6

[19:55] <Geth> ¬¶ synopsebot: Remove dead code

[19:55] <Geth> ¬¶ synopsebot: review: https://github.com/perl6/synopsebot/commit/21379e6d42

[20:05] <Geth> ¬¶ synopsebot: 5531a83267 | (Zoffix Znet)++ | META6.json

[20:05] <Geth> ¬¶ synopsebot: Fix meta module path

[20:05] <Geth> ¬¶ synopsebot: review: https://github.com/perl6/synopsebot/commit/5531a83267

[20:46] <sjn> is there a way to make MAIN accept a string as the first argument (e.g. "multi MAIN ("save", Str :$filename) { ...¬†}" )?

[20:48] <sjn> ...in such a way that one can run that script in a similar way that git works? (e.g. "myprogram save --filename=foo")

[20:50] <Zoffix> AFAIK named params have to come before positioonals. There's a stale PR implementing the git-way

[21:02] * sjn tries to find that PR

[21:03] <sjn> https://github.com/rakudo/rakudo/pull/688

[21:06] <Zoffix> Wonder what sort of exception to make for runtime errors with `**` quantier, like this one:

[21:06] <Zoffix> m: say "foo" ~~ /. ** { "a" .. "c" }/

[21:06] <camelia> rakudo-moar 4d0ead: OUTPUT: ¬´Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3‚èè5a' (indicated by ‚èè)‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[21:06] <Zoffix> All the `Regex` errors are subclasses of X::Syntax, but this doesn't seem to be about syntax, but rather about runtime value

[21:07] <Zoffix> m: try "3".parse-base: 42; $!.^name.say

[21:07] <camelia> rakudo-moar 4d0ead: OUTPUT: ¬´X::Syntax::Number::RadixOutOfRange‚ê§¬ª

[21:08] <Zoffix> This one is syntax too .... though maybe that's just also a poor exception type

[21:09] <timotimo> we do have a variable that lets you configure the argument parser and you can tell it to allow named arguments anywhere, i.e. also after positionals

[21:10] <Zoffix> oh right

[21:11] <Zoffix> m: @*ARGS = <foo --meow=42>; (my %*SUB-MAIN-OPTS)<named-anywhere> := 1; sub MAIN("foo", :$meow) { dd $meow }

[21:11] <camelia> rakudo-moar 4d0ead: OUTPUT: ¬´IntStr $meow = IntStr.new(42, "42")‚ê§¬ª

[21:11] <Zoffix> sjn: ^

[21:21] <sjn> Zoffix: thanks. I'd prefer that the literal string would be allowed by default, though.

[21:21] * sjn thinks that PR is still worth fixing and accepting

[21:22] * AlexDaniel hears ‚Äúcore rakudo regression‚Äù and is ready to bisect

[21:23] <Zoffix> sjn: would be worth find it out why it wasn't allowed originally

[21:24] <Zoffix> s/find it/finding/;

[21:24] * sjn would guess it's because of "this was the way to do things when the spec was written"

[21:26] * Zoffix would guess the <named-anywhere> has ambiguities the current way doesn't

[21:27] <sjn> ETOOMUCHBENDINGOVERBACKWARDS

[21:36] <geekosaur> that can go both ways; sometimes things get punted to the ecosystem because supporting them in core is too much bending over backwards

[21:37] <Zoffix> well, it *is* currently supported in core :D

[21:37] <AlexDaniel> Zoffix: fwiw https://gist.github.com/Whateverable/b38da9bff3eb67d6494dc223de648cca

[21:37] <Zoffix> m: say q|(my %*SUB-MAIN-OPTS)<named-anywhere> = 1|.chars

[21:37] <camelia> rakudo-moar 4d0ead: OUTPUT: ¬´40‚ê§¬ª

[21:37] <Zoffix> half a line of code to enable it

[21:37] <geekosaur> or, otherwise put: do you want your perl script to take over a minute to start because there's a half-sentient arg parser in play instead of a simple/works for most uses one?

[21:38] * sjn doesn't mind a smart arg parser (and consequently, a smart usage text generator)

[21:39] <sjn> if it ever should gain sentienence, we have other problems. :)

[21:39] <Zoffix> AlexDaniel: so it does fail on 2017.09?

[21:40] <AlexDaniel> Zoffix: fails everywhere. The string that it is attempting to test is ‚ÄúIO::Path::ChildSecure is a builtin type, not an external module\n in block <unit> at -e line 13\n\n‚Äù

[21:40] <AlexDaniel> what does it mean?

[21:40] <Zoffix> sjn: but the problem geekosaur pointed out is performance, not sentience :P

[21:40] <Zoffix> AlexDaniel: ohh

[21:41] <Zoffix> AlexDaniel: this https://rt.perl.org/Ticket/Display.html?id=130200#ticket-history

[21:41] <Zoffix> Oh wait

[21:42] <Zoffix> well, I was gonna say the bot's restricted

[21:42] <Zoffix> But don't see anything obvious in module that'd block it

[21:43] <Zoffix> m: with '/tmp/ZZZ777'.IO.mkdir { .add("Foo.pm6").spurt: "unit class IO::Path::Foo;" }

[21:43] <camelia> rakudo-moar 4d0ead: ( no output )

[21:43] <AlexDaniel> it's not restricted anyway

[21:44] <AlexDaniel> buuut some paths are not writable, yeah

[21:44] <Zoffix> m: with '/tmp/ZZZ777/IO/Path/'.IO.mkdir { .add("Foo.pm6").spurt: "unit class IO::Path::Foo;" }

[21:44] <camelia> rakudo-moar 4d0ead: ( no output )

[21:44] <Zoffix> m: use lib </tmp/ZZZ777/>; use IO::Path::Foo

[21:44] <camelia> rakudo-moar 4d0ead: ( no output )

[21:44] <Zoffix> m: use lib </tmp/ZZZ777/>; use IO::Path::Foo; IO::Path::Foo.new

[21:44] <camelia> rakudo-moar 4d0ead: ( no output )

[21:45] <Zoffix> No idea

[21:45] * Zoffix &

[21:58] <AlexDaniel> .oO( bisectable for python can be called pysectable )

[22:00] <AlexDaniel> .oO( ‚Äú?.oO( ‚Ä¶ )‚Äù ? )

[22:01] <AlexDaniel> huggable: clog

[22:01] <huggable> AlexDaniel, nothing found

[22:01] <AlexDaniel> huggable: irclog

[22:01] <huggable> AlexDaniel, nothing found

[22:01] <AlexDaniel> huggable: log

[22:01] <huggable> AlexDaniel, Comes out 2.41x faster than core .log10 and can handle Ints larger than 1.8e308: https://gist.github.com/zoffixznet/2539e8bebe9c5e19ab38ca43e173fe8f

[22:01] <AlexDaniel> huggable: irc log

[22:01] <huggable> AlexDaniel, nothing found
