[00:25] <japhb> lizmat: That is a very cool gate indeed.  :-)

[00:26] <timotimo> it is!

[00:41] <AlexDaniel> Zoffix: fwiw “?++    | atomic-fetch-dec” https://www.reddit.com/r/perl/comments/6v8eop/201734_going/dlywvwh/

[00:44] <Zoffix> AlexDaniel: fixed thanks

[00:48] <AlexDaniel> heh, people are weird

[00:48] <AlexDaniel> “I don't want to learn how to type non-ascii characters, so please don't use them”

[00:49] <AlexDaniel> well, maybe that's not exactly what they say, but I always see it this way…

[00:58] <TimToady> there should be an emoticon for "fossil" :)

[00:59] <AlexDaniel> “Good job on supporting the proper Unicode minus sign, but why stop there? Please add ? and ? as alternatives to >=and !=, and “”„?«»‘’‚? as alternative string delimiters.”

[00:59] <AlexDaniel> alright, this comment made my day :D

[01:01] <Geth> ¦ nqp: andreoss++ created pull request #369: Do not start interactive REPL on non tty input

[01:01] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/369

[01:08] <AlexDaniel> Meh. –“No, no, no, no, no, no, no.” –“All of the atomic operators have texas equivalents” –“That's a lot more to write and is considerably less expressive”… surprise-surprise :-/

[01:12] <AlexDaniel> Zoffix++ # patiently explaining things instead of just reading these threads for laughs like me

[02:59] <AlexDaniel> Does anybody know why appveyor is now consistently red?

[03:00] <AlexDaniel> Geth: ver 593fa5f87fcc97cf3cbafd62f34b3119c9b1fbe3

[03:00] <AlexDaniel> Geth: ver https://github.com/rakudo/rakudo/commit/593fa5f87fcc97cf3cbafd62f34b3119c9b1fbe3

[03:01] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/perl6/nqp/compare/2017.08...2017.08-1-g99f01d2cd

[03:01] <AlexDaniel> Geth: ver https://github.com/perl6/nqp/commit/99f01d2cd81ea93c615975e3e800242fba23f5f6

[03:01] <Geth> AlexDaniel, version bump brought in these changes: https://github.com/MoarVM/MoarVM/compare/2017.08.1...2017.08.1-19-g151a2563

[04:07] <Geth> ¦ rakudo: Gnouc++ created pull request #1141: Checking uname as executable instead of file size

[04:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1141

[06:34] <[Tux]> This is Rakudo version 2017.08-25-g7d1ece805 built on MoarVM version 2017.08.1-32-gcd41322e

[06:34] <[Tux]> csv-ip5xs        1.335 - 1.505

[06:34] <[Tux]> test            10.480

[06:34] <[Tux]> test-t           3.623 - 3.791

[06:34] <[Tux]> csv-parser      11.813

[06:38] <Geth> ¦ rakudo/nom: 29cd9fb55e | (Cuong Manh Le)++ | src/core/Kernel.pm

[06:38] <Geth> ¦ rakudo/nom: Checking uname as executable instead of file size

[06:38] <Geth> ¦ rakudo/nom:

[06:38] <Geth> ¦ rakudo/nom: Finding executable file should be done with .x instead of .s method,

[06:38] <Geth> ¦ rakudo/nom: otherwise, we should run in case where the file is existed but can not

[06:38] <Geth> ¦ rakudo/nom: executable.

[06:38] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/29cd9fb55e

[06:38] <Geth> ¦ rakudo/nom: d8958fc37e | niner++ (committed using GitHub Web editor) | src/core/Kernel.pm

[06:38] <Geth> ¦ rakudo/nom: Merge pull request #1141 from Gnouc/nom

[06:38] <Geth> ¦ rakudo/nom:

[06:38] <Geth> ¦ rakudo/nom: Checking uname as executable instead of file size

[06:38] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d8958fc37e

[09:43] <AlexDaniel> ? Community Bug SQUASHathon http://blogs.perl.org/users/zoffix_znet/2017/08/youre-invited-community-bug-squashathon.html

[10:37] <Zoffix> I recall a discussion that `make test` should not create any new files (I think?) does that apply to precomp files. I was thinking of adding a utility module for testing; would it need `no precompilation` in it to avoid creating .precomp dir?

[10:39] <Geth> ¦ nqp: e9e09e4821 | andreoss++ | src/HLL/Compiler.nqp

[10:39] <Geth> ¦ nqp: Do not start interactive REPL on non tty input

[10:39] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e9e09e4821

[10:39] <Geth> ¦ nqp: 5bec212105 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/HLL/Compiler.nqp

[10:39] <Geth> ¦ nqp: Merge pull request #369 from andreoss/non-tty

[10:39] <Geth> ¦ nqp:

[10:39] <Geth> ¦ nqp: Do not start interactive REPL on non tty input

[10:39] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5bec212105

[10:48] <Zoffix> ZOFFLOP: t/spec/S17-lowlevel/atomic-ops.t

[10:48] <Zoffix> ZOFFLOP: t/spec/S17-lowlevel/atomic.t

[10:49] <Geth> ¦ nqp: dfe46ab3ba | (Zoffix Znet)++ | src/HLL/Compiler.nqp

[10:49] <Geth> ¦ nqp: Reformat conditional; lizmat++

[10:49] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/dfe46ab3ba

[10:49] <Geth> ¦ rakudo/nom: b6a6023635 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[10:49] <Geth> ¦ rakudo/nom: Bump NQP

[10:49] <Geth> ¦ rakudo/nom:

[10:49] <Geth> ¦ rakudo/nom: Bump brought changes:

[10:49] <Geth> ¦ rakudo/nom: https://github.com/perl6/nqp/compare/2017.08-1-g99f01d2cd...2017.08-6-gdfe46ab

[10:49] <Geth> ¦ rakudo/nom:

[10:49] <Geth> ¦ rakudo/nom: dfe46ab Reformat conditional; lizmat++

[10:49] <Geth> ¦ rakudo/nom: 5bec212 Merge pull request #369 from andreoss/non-tty

[10:49] <Geth> ¦ rakudo/nom: e9e09e4 Do not start interactive REPL on non tty input

[10:49] <Geth> ¦ rakudo/nom: e5e5a3f Fix a bug in the last commit, that could cause configure errors

[10:49] <Geth> ¦ rakudo/nom: c368470 Add new --ignore-errors flag to ./Configure.pl

[10:49] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b6a6023635

[10:49] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.08-1-g99f01d2cd... No newline at end of file

[10:55] <Geth> ¦ rakudo/nom: 94fe65dbe5 | (Zoffix Znet)++ | src/core/REPL.pm

[10:55] <Geth> ¦ rakudo/nom: Revert "Implement "bare" REPL and use it on non-TTY uses"

[10:55] <Geth> ¦ rakudo/nom:

[10:55] <Geth> ¦ rakudo/nom: This reverts commit 2c0cd0a3a96d8fe0b1bb821c33fe51912e95ddfc.

[10:55] <Geth> ¦ rakudo/nom:

[10:55] <Geth> ¦ rakudo/nom: The feature was implemented in a superior way in

[10:55] <Geth> ¦ rakudo/nom: https://github.com/perl6/nqp/commit/5bec212105

[10:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/94fe65dbe5

[11:20] <Geth> ¦ nqp/master: 14 commits pushed by pmurias++

[11:20] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/dfe46ab3ba...002754a3f9

[12:34] <Geth> ¦ nqp: 5aa3089584 | pmurias++ | src/vm/js/nqp-runtime/ctx.js

[12:34] <Geth> ¦ nqp: [js] Attach stack trace info when doing a nqp::throw

[12:34] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5aa3089584

[14:01] <lizmat> is this an artefact or not?

[14:02] <lizmat> perl6 --profile-compile -e 'use cro'  # after a fresh setting "make install"

[14:02] <lizmat> gives a profile that shows 4 calls to Lock.wait to take 98.44% of total time

[14:03] <timotimo> looks multithreaded to me; the profiler then either crashes or it only gives you data for a single thread

[14:03] <timotimo> the latter in this case it seems like

[14:04] <lizmat> aaaahhh   ok

[14:04] <lizmat> :-)

[17:00] <ugexe> m: say Str.chars; # should this warn?

[17:00] <camelia> rakudo-moar 94fe65: OUTPUT: «Use of uninitialized value of type Str in string context.?Methods .^name, .perl, .gist, or .say can be used to stringify it to something meaningful.?  in block <unit> at <tmp> line 1?0?»

[17:05] <Zoffix> ugexe: as opposed to just giving 0?

[17:14] <Zoffix> This area is very inconsitent in the language. In some places we throw, (Rat + 0 dies with "attributes in typeobject", Int+0 dies with "want a :D"), in others we warn (and after warning give inconsitent types: +Int, +Rat, and +Num all give an Int 0 in return)

[17:14] <Zoffix> I say we nix it entirely: Numeric and Stringy typeobjects can't be used as to mean 0 or ""

[17:16] <Zoffix> Str.chars warns and uses ""; Str.starts-with dies with no-candidate; Int.abs dies with wanting a :D

[17:18] <Zoffix> Oh, there's a whole bunch of methods that on-purpose treat Str:U as "" with a warning: https://github.com/rakudo/rakudo/blob/94fe65dbe/src/core/Str.pm#L2731-L2781

[17:18] <ugexe> i would just expect it to just give 0 and not warn, or to not give 0

[17:18] * Zoffix nods

[17:54] <ugexe> Zoffix: didn't you try making Test.pm more thread safe at one time? I dont see anything in the git history, so maybe it was a branch you abandoned (or dementia)

[17:56] <Zoffix> ugexe: yeah, I did add atomic ops to test counter but that failed to solve the "test out of order" issue because say()s get executed outta order. You'd need to send TAP to print into Channel and print from the Channel, or something like that; I gave up at that point, due to fears of making Test.pm much slower

[17:57] <Zoffix> Though I plan to make Testo thread-safe (and even auto-threaded), when I ever find time to hack on it

[17:57] <Zoffix> buggable: eco Testo

[17:57] <buggable> Zoffix, Testo 'Perl 6 Testing Done Right': https://github.com/zoffixznet/perl6-Testo

[17:57] <Zoffix> ^ that Testo I mean

[17:58] <Zoffix> buggable: eco Green

[17:58] <buggable> Zoffix, Green 'Parallel testing utility, it's really great': https://github.com/tony-o/perl6-green

[17:58] <Zoffix> ^ never used that, but perhaps that's thread-safe

[18:01] <ugexe> if the tests are out of order does it still get the final `1..$max` line correct?

[18:02] <Zoffix> Yeah, but each test is numbered and if harness spots them out of order it complains

[18:02] <Zoffix> m: use Test; ok "a" for ^10; done-testing;

[18:02] <camelia> rakudo-moar 94fe65: OUTPUT: «ok 1 - ?ok 2 - ?ok 3 - ?ok 4 - ?ok 5 - ?ok 6 - ?ok 7 - ?ok 8 - ?ok 9 - ?ok 10 - ?1..10?»

[18:03] <Zoffix> m: use Test; await ^10 .map: { start ok "a" }; done-testing;

[18:03] <camelia> rakudo-moar 94fe65: OUTPUT: «ok 2 - ?ok 2 - ?ok 3 - ?ok 4 - ?ok 5 - ?ok 6 - ?ok 7 - ?ok 8 - ?ok 9 - ?ok 10 - ?1..10?»

[18:03] <Zoffix> m: use Test; await ^10 .map: { start ok "a" }; done-testing;

[18:03] <camelia> rakudo-moar 94fe65: OUTPUT: «ok 2 - ?ok 2 - ?ok 3 - ?ok 4 - ?ok 5 - ?ok 6 - ?ok 7 - ?ok 8 - ?ok 9 - ?ok 10 - ?1..10?»

[18:03] <Zoffix> ^ "ok 2 ok 2" would 'cause it to complain about missing #1 test. On more counts it's possible to get them out of order too and it'll complain about them too

[18:04] <Zoffix> 95% sure the out-of-order tests are reported as failures

[18:04] <ugexe> i see. i was just looking at failures from the final test count changing although the total tests were still right (e.g. ok 5 -, ok 5 -, ok 6 - ...)

[18:06] <Zoffix> ugexe: oh, yeah, I guess it can be incorrect too

[18:07] <Zoffix> It does $num_of_tests_run = $num_of_tests_run + 1; which isn't thread-safe: https://github.com/rakudo/rakudo/blob/nom/lib/Test.pm6#L674

[18:08] <Zoffix> And here's the logic that handles complaining about wrong number of tests: https://github.com/rakudo/rakudo/blob/nom/lib/Test.pm6#L733-L743

[18:09] <ugexe> i worked around it in the test code itself by changing the equiv of for loop { start { ok 1; ok 1; } } to loop { start { ok 1 && 2 } }

[18:10] <Zoffix> (to clarify: I never commited the atomic op changes, because they didn't solve the problem I was trying to solve)

[18:11] <timotimo> Zoffix: you remember if there's an RT for the "parsing floats can give you bullshit" thing?

[18:12] <Zoffix> ugexe: BTW, MasterDuke pointed out it would be cool for you to write a blog post showcasing uses of atomic ops ^_^ https://irclog.perlgeek.de/perl6/2017-08-29#i_15084800

[18:13] <Zoffix> timotimo: nope; not aware of tickets. I have it logged in my private stash of bugs though, referencing https://gist.github.com/zoffixznet/46ae8dd7d85096d58dc557f60f82a179 and https://irclog.perlgeek.de/perl6/2017-07-13#i_14864050

[18:14] <Zoffix> (but you're welcome to fix it; I got a ton of stuff on my plate anyway)

[18:14] <Zoffix> And two code examples also logged:

[18:14] <Zoffix> m: say  .1e0  +  .2e0  ==  .3e0;

[18:14] <camelia> rakudo-moar 94fe65: OUTPUT: «False?»

[18:14] <Zoffix> say 1.0e-1 + 2.0e-1 == 3.0e-1;

[18:14] <evalable6> Zoffix, rakudo-moar 94fe65dbe: OUTPUT: «True»

[18:15] <Zoffix> m: say  .1e0  +  .2e0  ==  .3e0; say 1.0e-1 + 2.0e-1 == 3.0e-1;

[18:15] <camelia> rakudo-moar 94fe65: OUTPUT: «False?False?»

[18:15] <Zoffix> (note how the example that used to be True got changed to False by merely adding new code before it)

[18:15] <timotimo> Zoffix: if it's all right i'll send that to the mailing list where someone just asked

[18:15] <Zoffix> Sure :)

[18:21] <ugexe> use Test; plan 200; await ^10 .map: { start { for ^10 { ok "a"; ok "b" } } }; done-testing; # this occasionally gives the failure fwiw (although i couldnt get camelia to reproduce)

[18:23] <Zoffix> Yeah, 'cause different threads write to the same variables unsafely

[18:24] * Zoffix &

[19:32] <Geth> ¦ rakudo/jit_nativecall: 47c38fa65c | (Stefan Seifert)++ | lib/NativeCall.pm6

[19:32] <Geth> ¦ rakudo/jit_nativecall: Decont arguments before running JITed native calls

[19:32] <Geth> ¦ rakudo/jit_nativecall: review: https://github.com/rakudo/rakudo/commit/47c38fa65c

[19:44] <Geth> ¦ rakudo: skids++ created pull request #1142: Throw an X::Syntax on nameless postfix .::  (Fix for RT#130181)

[19:44] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1142

[19:44] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130181

[20:16] <Geth> ¦ rakudo/nom: d2f31bb7c1 | (Elizabeth Mattijsen)++ | src/core/Junction.pm

[20:16] <Geth> ¦ rakudo/nom: Add Junction.INFIX-TWO internal helper method

[20:16] <Geth> ¦ rakudo/nom:

[20:16] <Geth> ¦ rakudo/nom: - swaps two Junctions in place if they should for infix usage

[20:16] <Geth> ¦ rakudo/nom: - returns a truthy value if the Junction types are the same

[20:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d2f31bb7c1

[20:26] <Geth> ¦ rakudo/nom: 5969f21eaa | skids++ | src/Perl6/Grammar.nqp

[20:26] <Geth> ¦ rakudo/nom: Throw an X::Syntax on nameless postfix .::  (Fix for RT#130181)

[20:26] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5969f21eaa

[20:26] <Geth> ¦ rakudo/nom: 74ca5ce951 | lizmat++ (committed using GitHub Web editor) | src/Perl6/Grammar.nqp

[20:26] <Geth> ¦ rakudo/nom: Merge pull request #1142 from skids/rt130181

[20:26] <Geth> ¦ rakudo/nom:

[20:26] <Geth> ¦ rakudo/nom: Throw an X::Syntax on nameless postfix .::  (Fix for RT#130181)

[20:26] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130181

[20:26] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/74ca5ce951

[20:27] <Geth> ¦ roast: skids++ created pull request #298: Test for RT#130181.  Also coverage for qualified method colons.

[20:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/298

[20:27] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130181

[20:27] <Geth> ¦ roast: 5d970e1445 | skids++ | S12-methods/qualified.t

[20:27] <Geth> ¦ roast: Test for RT#130181.  Also coverage for qualified method colons.

[20:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5d970e1445

[20:27] <Geth> ¦ roast: 4ff4def2e4 | skids++ (committed using GitHub Web editor) | S12-methods/qualified.t

[20:27] <Geth> ¦ roast: Merge pull request #298 from skids/rt130181

[20:27] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130181

[20:27] <Geth> ¦ roast:

[20:27] <Geth> ¦ roast: Test for RT#130181.  Also coverage for qualified method colons.

[20:27] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130181

[20:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4ff4def2e4

[20:49] <Geth> ¦ rakudo/nom: e18291e20b | (Elizabeth Mattijsen)++ | src/core/Junction.pm

[20:49] <Geth> ¦ rakudo/nom: Use Junction.INFIX-TWO

[20:49] <Geth> ¦ rakudo/nom:

[20:49] <Geth> ¦ rakudo/nom: Preparation for handling Junction ~ Junction for different types

[20:49] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e18291e20b

[20:49] <lizmat> good night, #perl6-dev!

[21:23] <japhb> buggable: speed

[21:23] <buggable> japhb, ?????????????????????????????????????????????????? data for 2017-07-28–2017-08-29; range: 3.587s–4.960s; 26% faster

[21:23] <japhb> Time to rebuild ... :-)

[22:18] <Geth> ¦ rakudo/thread-safer-testpm: 4 commits pushed by (Nick Logan)++

[22:18] <Geth> ¦ rakudo/thread-safer-testpm: 43abdb1dd2 | Correct a typo

[22:18] <Geth> ¦ rakudo/thread-safer-testpm: db68552f26 | Avoid curley brace string interpolation

[22:18] <Geth> ¦ rakudo/thread-safer-testpm: eb99bbc436 | Create entire string before saying it

[22:18] <Geth> ¦ rakudo/thread-safer-testpm: c19e810e38 | Fix duplicate test count id

[22:18] <Geth> ¦ rakudo/thread-safer-testpm: review: https://github.com/rakudo/rakudo/compare/0000000000...c19e810e38

[22:20] <Geth> ¦ rakudo: ugexe++ created pull request #1143: Make Test.pm6 more thread safe

[22:20] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1143

[22:23] <ugexe> my atomicint $foo = 1; for ^50000 { start { say cas( $foo, -> $i { $i + 1 } ); }; }; say $foo; # this deadlocks at a random iteration unless the `say` is not called on cas(...)

[22:25] <ugexe> also deadlocks if you do `my $x = cas(...); say $x`

[22:33] <ugexe> note that this was also the case before the real cas was added

[22:33] <ugexe> just s/atomicint//

[22:41] <Geth> ¦ rakudo/nom: 5 commits pushed by (Nick Logan)++, lizmat++

[22:41] <Geth> ¦ rakudo/nom: 43abdb1dd2 | Correct a typo

[22:41] <Geth> ¦ rakudo/nom: db68552f26 | Avoid curley brace string interpolation

[22:41] <Geth> ¦ rakudo/nom: eb99bbc436 | Create entire string before saying it

[22:41] <Geth> ¦ rakudo/nom: c19e810e38 | Fix duplicate test count id

[22:41] <Geth> ¦ rakudo/nom: 9b43c8def2 | Merge pull request #1143 from rakudo/thread-safer-testpm

[22:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/compare/e18291e20b...9b43c8def2

[23:06] <[Coke]> ]/win 2

[23:47] <Geth> ¦ rakudo: skids++ created pull request #1144: Fix ::("GLOBAL") for RT#126523

[23:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1144

[23:47] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126523
