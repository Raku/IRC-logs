[01:08] <ugexe> `perl6 -e 'use nqp; chdir "/"; say nqp::mkdir("./", 0o777);'` mkdir("/") works on osx if its not just / apparently

[01:11] <geekosaur> probably everywhere. iirc mkdir is trying to be too smart and make intermediate dirs when needed, but that means it can succeed when everything already exists.

[01:12] <geekosaur> (imo those should be separate operations, or if the magical one must be regarded as default then the primitive one should be exposed somewhere for those that actually need correct behavior)

[01:12] <ugexe> well it seems to act different for / than for any other existing directory

[01:14] <ugexe> like its giving EEXISTS for existing directories, but for / it gives EISDIR

[01:15] <ugexe> https://github.com/MoarVM/MoarVM/blob/a2f6e5dc66cea621057ae41a6e01bb2a8d46c3fc/src/io/dirops.c#L105

[01:15] <ugexe> errno is 21, which should be EISDIR anyway

[01:18] <geekosaur> not that surprising and probably related to / being a special case (normally one strips trailing /s but that is a mistake here...)

[01:19] * geekosaur has been through that code before and it's an utter mess

[01:31] <ugexe> well, one way would be to use `nqp::stat("/",nqp::const::STAT_EXISTS)` before calling mkdir

[01:31] <ugexe> i dunno if thats a good way though

[05:08] <ugexe> MasterDuke: https://github.com/rakudo/rakudo/commit/1a4d949 stopped showing exception messages in --ll-exception output. maybe add a check if -ll-exception is enabled to do the old nqp::setmessage?

[07:45] <[Tux]> This is Rakudo version 2017.06-251-g23ad2c388 built on MoarVM version 2017.06-95-gbccdb423

[07:45] <[Tux]> csv-ip5xs        2.537

[07:45] <[Tux]> test            12.245

[07:45] <[Tux]> test-t           4.079 - 4.200

[07:45] <[Tux]> csv-parser      11.886

[09:01] <lizmat> Files=1211, Tests=65531, 215 wallclock secs (13.32 usr  4.89 sys + 1289.72 cusr 136.84 csys = 1444.77 CPU)

[09:02] <lizmat> only 4 more tests needed to break the 16 bit barrier  :-)

[09:19] <lizmat> m: dd Nil.IO

[09:19] <camelia> rakudo-moar 23ad2c: OUTPUT: «IO::Path␤»

[11:42] <dogbert17> ok, so RT #127951 seems to have been fixed some time ago, would t/spec/S03-operators/identity.t be a good place to add a test for that?

[11:42] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=127951

[11:53] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1116: Fix no message printing when using ll-exception

[11:53] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1116

[11:56] <MasterDuke> could someone check that ^^^ please? the install step seemed to be acting up, but i don't know why the change would cause that, so i'm not sure if it's just a local problem

[12:05] <Geth> ¦ roast: dogbert17++ created pull request #283: Added test for RT #127951

[12:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/283

[12:05] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=127951

[12:09] <Geth> ¦ roast: 5e12710c90 | (Jan-Olof Hendig)++ | S03-operators/identity.t

[12:09] <Geth> ¦ roast: Added test for RT #127951

[12:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5e12710c90

[12:09] <Geth> ¦ roast: 39802b5b2b | dogbert17++ (committed using GitHub Web editor) | S03-operators/identity.t

[12:09] <Geth> ¦ roast: Merge pull request #283 from dogbert17/test-rt-127951

[12:09] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=127951

[12:09] <Geth> ¦ roast:

[12:09] <Geth> ¦ roast: Added test for RT #127951

[12:09] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=127951

[12:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/39802b5b2b

[12:16] <dogbert17> bisect: my int $x = 4; say $x || 2

[12:16] <bisectable6> dogbert17, Bisecting by output (old=2015.12 new=23ad2c3) because on both starting points the exit code is 0

[12:16] <bisectable6> dogbert17, bisect log: https://gist.github.com/257033bdaa722deabee0ba6a1e164080

[12:16] <bisectable6> dogbert17, (2017-07-10) https://github.com/rakudo/rakudo/commit/83e157012da83e32b10d3739800cdc09e2287db1

[12:17] <dogbert17> .seen TrollerCopter

[12:17] <yoleaux> I haven't seen TrollerCopter around.

[12:17] <dogbert17> .seen LollerCopter

[12:17] <yoleaux> I saw lollercopter 25 Jun 2017 12:21Z in #perl6: <lollercopter> samcv: not IMO. No other IO routines take their paths in arbitrary chunks like that, so adding this would be inconsistent. You can always use '/' as the separator, so it'd be $*CWD.child('foo/bar') or $*CWD.child: @parts.join: '/' and will just work and will be faster than adding a slurpy multi candidate.

[12:24] <dogbert17> .ask Zoffix any idea where to put tests for RT #130404 which you fixed a few days ago?

[12:24] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130404

[12:24] <yoleaux> dogbert17: I'll pass your message to Zoffix.

[13:49] <Geth_> ¦ perl6-lwp-simple: cpin++ created pull request #15: Get method sends headers if provided

[13:49] <Geth_> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/pull/15

[13:53] <dogbert17> bisect: Buf.new((my int $i = 10) +& 0xFF)

[13:53] <bisectable6> dogbert17, On both starting points (old=2015.12 new=23ad2c3) the exit code is 0 and the output is identical as well

[13:53] <bisectable6> dogbert17, Output on both points: «»

[13:53] <dogbert17> bisect: say Buf.new((my int $i = 10) +& 0xFF)

[13:53] <bisectable6> dogbert17, On both starting points (old=2015.12 new=23ad2c3) the exit code is 0 and the output is identical as well

[13:53] <bisectable6> dogbert17, Output on both points: «Buf:0x<0a>»

[13:56] <dogbert17> bisect: my int $i = 2482111348; $i = $i div 2; say $i

[13:56] <bisectable6> dogbert17, Bisecting by output (old=2015.12 new=23ad2c3) because on both starting points the exit code is 0

[13:56] <bisectable6> dogbert17, bisect log: https://gist.github.com/c1d74cb30b5e1e4687177ac9677d1ef1

[13:56] <bisectable6> dogbert17, (2017-02-03) https://github.com/rakudo/rakudo/commit/c98b3a581f481756234758e474c255414a340c97

[13:59] <dogbert17> commit: 2016.09 say Buf.new((my int $i = 10) +& 0xFF)

[13:59] <committable6> dogbert17, ¦2016.09: «Buf:0x<0a>»

[13:59] <dogbert17> commit: 2016.06 say Buf.new((my int $i = 10) +& 0xFF)

[13:59] <committable6> dogbert17, ¦2016.06: «Buf:0x<0a>»

[13:59] <dogbert17> commit: 2016.07 say Buf.new((my int $i = 10) +& 0xFF)

[13:59] <committable6> dogbert17, https://gist.github.com/6813cf760c415eca5eb1e376da4020c5

[14:00] <dogbert17> commit: 2016.08 say Buf.new((my int $i = 10) +& 0xFF)

[14:00] <committable6> dogbert17, ¦2016.08: «Buf:0x<0a>»

[14:00] <dogbert17> bisect: HEAD 2016.07 say Buf.new((my int $i = 10) +& 0xFF)

[14:00] <bisectable6> dogbert17, On both starting points (old=2015.12 new=23ad2c3) the exit code is 1 and the output is identical as well

[14:00] <bisectable6> dogbert17, https://gist.github.com/206717b2640ec43e8d5d7b757580ea20

[14:01] <MasterDuke> dogbert17: you need `new=xxx old=yyy`

[14:02] <MasterDuke> bisect: new=HEAD old=2016.07 say Buf.new((my int $i = 10) +& 0xFF)

[14:02] <bisectable6> MasterDuke, Bisecting by exit code (old=2016.07 new=23ad2c3). Old exit code: 1

[14:03] <bisectable6> MasterDuke, bisect log: https://gist.github.com/3faf5573a6db6f4723c9e5892c1cb3a2

[14:03] <bisectable6> MasterDuke, (2016-07-17) https://github.com/rakudo/rakudo/commit/242baf256a210f1cb643cb6324916dbc76184c9f

[14:04] <dogbert17> MasterDuke++, was on my way to call the bot morinic :)

[14:04] <dogbert17> *moronic

[14:06] <dogbert17> so it seems as if that commit should have fixed RT #128624 and to a certain extent RT #128655

[14:06] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=128624

[14:06] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=128655

[14:08] <dogbert17> bisect: new=HEAD old=2016.07 my int $i = 5; Buf.new($i +& 0xFF)

[14:08] <bisectable6> dogbert17, Bisecting by exit code (old=2016.07 new=23ad2c3). Old exit code: 1

[14:08] <bisectable6> dogbert17, bisect log: https://gist.github.com/2c6c8fb35b2801a57258b5df65b29df0

[14:08] <bisectable6> dogbert17, (2016-07-17) https://github.com/rakudo/rakudo/commit/242baf256a210f1cb643cb6324916dbc76184c9f

[14:08] * dogbert17 yeah, it's the same :)

[14:12] * dogbert17 hmm, temporary fix ...

[14:35] <Geth> ¦ nqp: MasterDuke17++ created pull request #366: Fix no message printing when using ll-exception

[14:35] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/366

[14:37] <Geth> ¦ nqp: 859b4441dd | MasterDuke17++ | src/HLL/Compiler.nqp

[14:37] <Geth> ¦ nqp: Fix no message printing when using ll-exception

[14:37] <Geth> ¦ nqp:

[14:37] <Geth> ¦ nqp: The recent change to only generate an Exception's message when it's

[14:37] <Geth> ¦ nqp: gisted broke using `--ll-exception`.

[14:37] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/859b4441dd

[14:37] <Geth> ¦ nqp: c234cf4efb | niner++ (committed using GitHub Web editor) | src/HLL/Compiler.nqp

[14:37] <Geth> ¦ nqp: Merge pull request #366 from MasterDuke17/fix_no_message_when_using_ll-exception

[14:37] <Geth> ¦ nqp:

[14:37] <Geth> ¦ nqp: Fix no message printing when using ll-exception

[14:37] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c234cf4efb

[16:16] <ugexe> is there a way to get at dynamic variables inside of Perl6/Optimizer.nqp ?

[16:19] <moritz> ugexe: the optimizer runs after grammar + actions, so the dynamic variables from Actions.pm and Grammar.pm aren't available

[16:20] <ugexe> hmmm. well here https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Optimizer.nqp#L394 it can use the wrong stderr

[16:21] <ugexe> RT #131670

[16:21] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131670

[16:22] <ugexe> m: my $*ERR = class :: { method say(|) {}; method print(|) {}; }; warn(1)

[16:22] <camelia> rakudo-moar 23ad2c: ( no output )

[16:22] <ugexe> m: my $*ERR = class :: { method say(|) {}; method print(|) {}; }; my $a; $a;

[16:22] <camelia> rakudo-moar 23ad2c: OUTPUT: «WARNINGS for <tmp>:␤Useless use of $a in sink context (line 1)␤»

[16:23] <geekosaur> I don't think that difference is fixable

[16:23] <geekosaur> unless you...

[16:24] <geekosaur> hm, doesn't work with BEGIN either. *that* could be fixable

[16:25] <geekosaur> but neither the grammar nor the optimizer can reach forward to a *runtime* set of $*ERR

[16:28] <ugexe> could that warning logic go somewhere else possibly?

[16:32] <geekosaur> it's a compile time warning, do you want it to be a runtime warning instead?

[16:32] <moritz> the nice thing about compile time warnings is that they are independent of program inputs

[16:33] <geekosaur> to be clear: this lets the $*ERR setting be visible at compile time

[16:33] <geekosaur> m: BEGIN my $*ERR = class :: { method say(|) {}; method print(|) {}; }; my $a; $a;

[16:33] <camelia> rakudo-moar 23ad2c: OUTPUT: «WARNINGS for <tmp>:␤Useless use of $a in sink context (line 1)␤»

[16:34] <geekosaur> but it still doesn't work, probably because of the dynamic variable issue moritz already mentioned (i.e. that information is not around when the optimizer is run)

[16:36] <geekosaur> fixing that likely requires that the $*ERR in effect at compile time be associated with the block being handed to the optimizer, which will probably introduce other issues

[16:52] <ugexe> actually it seems like the naive solution, `s/my $err := stderr()/my $err := $*ERR/` works, and catches the compile time error as  you said if you use BEGIN my $*ERR = ...

[17:00] <ugexe> ah but then compile time errors dont work right unless you explicitly set BEGIN my $err := ...

[17:00] <ugexe> compile time warnings rather

[17:06] <ugexe> same if s/stderr()/getstderr()/

[17:23] <dogbert17> anyone knows what this comment means, 'Don't know how to mark statement for perl6!'? It shows up when running a spectest

[17:27] <Zoffix> dogbert17: someone wrote a fudge for #?perl6 instead of #?rakudo

[17:27] <yoleaux> 12:24Z <dogbert17> Zoffix: any idea where to put tests for RT #130404 which you fixed a few days ago?

[17:27] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130404

[17:28] <Zoffix> or it just assumes "#perl6" in some of the comments are fudges

[17:29] <Zoffix> dogbert17: there were already tests in. I forgot there was a ticket too. Closed. https://github.com/perl6/roast/commit/b1f116fdd5181274cda1a520194488da82c10a7e

[17:30] <dogbert17> Zoffix++

[17:30] <Zoffix> Oh

[17:30] <Zoffix> It's a differrent ticket

[17:30] <dogbert17> The comment shows up just before it starts running any tests

[17:31] <Zoffix> yeah, that's when the fudger runs

[17:31] <Zoffix> bisect: my int $x = 4; say $x || 2

[17:31] <bisectable6> Zoffix, Bisecting by output (old=2015.12 new=23ad2c3) because on both starting points the exit code is 0

[17:31] <bisectable6> Zoffix, bisect log: https://gist.github.com/3c694174f2b255d500377ffacc134df0

[17:31] <bisectable6> Zoffix, (2017-07-10) https://github.com/rakudo/rakudo/commit/83e157012da83e32b10d3739800cdc09e2287db1

[17:31] <dogbert17> so it is probably from something which was added very recently then

[17:31] <Zoffix> Well, it's not the exact test for that ticket, but it's for this problem, so it counts. I guess.

[17:32] <dogbert17> so, can we close it or will it end with AlexDaniel reopening it :)

[17:34] <Zoffix> can close

[17:34] <Zoffix> already is rather

[17:35] <Geth_> ¦ perl6-lwp-simple: c71bb0e364 | cpin++ | 3 files

[17:35] <Geth_> ¦ perl6-lwp-simple: Get method sends headers if provided

[17:35] <Geth_> ¦ perl6-lwp-simple:

[17:35] <Geth_> ¦ perl6-lwp-simple: Fixes #14

[17:35] <Geth_> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/c71bb0e364

[17:35] <Geth_> ¦ perl6-lwp-simple: 164f470bc1 | (Zoffix Znet)++ (committed using GitHub Web editor) | 3 files

[17:35] <Geth_> ¦ perl6-lwp-simple: Merge pull request #15 from cpin/get-headers

[17:35] <Geth_> ¦ perl6-lwp-simple:

[17:35] <Geth_> ¦ perl6-lwp-simple: Get method sends headers if provided

[17:35] <Geth_> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/164f470bc1

[17:35] <MasterDuke> dogbert17: it's from S15-nfg/concat-stable.t, the shebang causes it

[17:36] <Geth> ¦ perl6-lwp-simple: 5e06386e1c | (Zoffix Znet)++ (committed using GitHub Web editor) | META6.json

[17:36] <Geth> ¦ perl6-lwp-simple: Bump version

[17:36] <Geth> ¦ perl6-lwp-simple: review: https://github.com/perl6/perl6-lwp-simple/commit/5e06386e1c

[17:41] <dogbert17> MasterDuke++, that was quick

[17:43] <dogbert17> running a spectest with sundry debug flags and small nursery, so far two fails

[17:44] <dogbert17> the first is t/spec/S15-nfg/concat-stable.rakudo.moar, no big surprise there I guess :)

[17:44] <dogbert17> the second is t/spec/S29-os/system.rakudo.moar

[17:57] <Geth> ¦ roast: cabdf07369 | (Zoffix Znet)++ | packages/Test/Util.pm

[17:57] <Geth> ¦ roast: Remove 2 pointless regexes from is_run

[17:57] <Geth> ¦ roast:

[17:57] <Geth> ¦ roast: - neitzca is no longer in use

[17:57] <Geth> ¦ roast: - $*EXECUTABLE for ./perl6 would already have ./ in it

[17:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cabdf07369

[17:59] <Geth> ¦ roast: dogbert17++ created pull request #284: Remove shebang line from script

[17:59] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/284

[17:59] <timotimo> is --target=parse broken?

[18:00] <Zoffix> I hope not

[18:00] <timotimo> well, this here looks like an infinite recursion to me

[18:01] <Geth> ¦ roast: 1e793c1db3 | (Jan-Olof Hendig)++ | S15-nfg/concat-stable.t

[18:01] <Geth> ¦ roast: Remove shebang line from script

[18:01] <Geth> ¦ roast:

[18:01] <Geth> ¦ roast: It confused the fudger

[18:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1e793c1db3

[18:01] <Geth> ¦ roast: bf5034bb73 | dogbert17++ (committed using GitHub Web editor) | S15-nfg/concat-stable.t

[18:01] <Geth> ¦ roast: Merge pull request #284 from dogbert17/fix-concat-stable

[18:01] <Geth> ¦ roast:

[18:01] <Geth> ¦ roast: Remove shebang line from script

[18:01] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bf5034bb73

[18:02] <Zoffix> timotimo: ah, that yeah. I experienced that in the past. You're trying to parse some sub def, right?

[18:02] <timotimo> no, it's "my ($a, $b, $c)"

[18:02] <Zoffix> or sig, yeah

[18:02] <timotimo> i wonder if we need a $matchdumpseen

[18:03] <nine> That does indeed hang

[18:03] <ugexe> m: role Fooable[::T $type] { method bar { say 111 } }; class Bar does Fooable["x"] { method foo { self.Fooable::bar } }; Bar.new.foo; # is there a way to call the full name of a method from a parameterized role?

[18:03] <camelia> rakudo-moar 23ad2c: OUTPUT: «No concretization found for Fooable␤  in method foo at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:04] <timotimo> worst case you can find_method

[18:05] <dogbert17> Zoffix: of the four files you found three are .p6 files and the fourth was the one I fixed

[18:05] <Zoffix> Ah

[18:06] <Zoffix> Isn't the method gets added to the class?

[18:06] <Zoffix> m: role Fooable[::T $type] { method bar { say 111 } }; class Bar does Fooable["x"] { method foo { self.bar } }; Bar.new.foo;

[18:06] <camelia> rakudo-moar 23ad2c: OUTPUT: «111␤»

[18:06] <MasterDuke> timotimo: fyi, a perf record of parsing that snippet you showed gives:   48.62%  moar     libmoar.so        [.] MVM_gc_root_add_frame_registers_to_worklist   17.16%  moar     libmoar.so        [.] MVM_gc_root_add_frame_roots_to_worklist

[18:06] <Zoffix> m: role Fooable[::T $type] { method bar { say 111 } }; class Bar does Fooable["x"] { method foo { self.Bar::bar } }; Bar.new.foo;

[18:06] <camelia> rakudo-moar 23ad2c: OUTPUT: «111␤»

[18:08] <Zoffix> "<ugexe> seems like Buf.Stringy should be calling something like { self."{::T}"::Stringy }"

[18:08] * Zoffix doesn't follow that one

[18:08] <timotimo> MasterDuke: what snippet was that?

[18:09] <ugexe> m: say "a".encode.WHAT; say "a".encode.Stringy;

[18:09] <camelia> rakudo-moar 23ad2c: OUTPUT: «(utf8)␤a␤»

[18:09] <ugexe> if utf8 knows how to .Stringy, should Buf[utf8] also?

[18:10] <dogbert17> Zoffix: what about RT #130454, can that be closed/rejected?

[18:10] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=130454

[18:10] <Zoffix> ugexe: do we *have* Buf[utf8]?

[18:10] <Zoffix> m: Buf[utf8].new

[18:10] <camelia> rakudo-moar 23ad2c: OUTPUT: «concatenate requires a concrete string, but got null␤  in any protect at gen/moar/stage2/NQPCORE.setting line 1033␤  in any protect at gen/moar/stage2/NQPCORE.setting line 1033␤  in block <unit> at <tmp> line 1␤␤»

[18:11] <ugexe> m: say Buf.new("a".encode).WHAT

[18:11] <camelia> rakudo-moar 23ad2c: OUTPUT: «(Buf)␤»

[18:11] <MasterDuke> timotimo: target=parse of "my ($a, $b, $c)"

[18:11] <ugexe> m: say Buf.new("a".encode).perl

[18:11] <camelia> rakudo-moar 23ad2c: OUTPUT: «Buf.new(97)␤»

[18:11] <Zoffix> `m: say Buf.new("x".encode).Stringy` <-- there you go through .new(Buf) candidate that just takes all the ints

[18:12] <Zoffix> dogbert17: closed. Thanks.

[18:12] <Zoffix> m: dd utf8.new

[18:13] <camelia> rakudo-moar 23ad2c: OUTPUT: «utf8.new()␤»

[18:13] <Zoffix> s: utf8, 'new', \()

[18:13] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/23ad2c3/src/core/Buf.pm#L36

[18:13] <Zoffix> `my class utf8 does Blob[uint8] is repr('VMArray') {`

[18:15] * timotimo has a dumpseen for matches

[18:17] * Zoffix has the golfiest yet open.t bug: https://gist.github.com/zoffixznet/b27263cb79ee4c83917db166d6f7e4b1

[18:17] <Zoffix> run with echo "x" | ./perl6 open.t

[18:19] <Zoffix> oh, finally got it out of is_run/shell: https://gist.github.com/zoffixznet/b2e0be37457273562edc25d9121bf487

[18:19] <Zoffix> Run with echo "x" | ./perl6 --ll-exception open.t

[18:20] <Zoffix> strangely, --ll-exception is what causes it to explode :o

[18:20] * Zoffix verbumps and builds the latest and greatest

[18:22] <Zoffix> Shouldn't this check with nqp::ifnull so that exceptions with empty messages get differentiated from those without any? https://github.com/perl6/nqp/commit/859b4441dd3f6fd8816759b3b1f12b2d45a0bfd2

[18:23] <Zoffix> isnull I mean

[18:23] <Geth> ¦ nqp/dump_nqpmatch_seen_hash: 95c62e0caa | (Timo Paulssen)++ | src/QRegex/Cursor.nqp

[18:23] <Geth> ¦ nqp/dump_nqpmatch_seen_hash: prevent infinite recursion when dumping match objects

[18:23] <Geth> ¦ nqp/dump_nqpmatch_seen_hash: review: https://github.com/perl6/nqp/commit/95c62e0caa

[18:24] <timotimo> https://gist.github.com/timo/4c1c109080dad637e6a3bf5a03d804d3  -^

[18:24] <ugexe> Zoffix: looks like it. here is the old code https://github.com/rakudo/rakudo/commit/1a4d94930c581e915a2351049e8ee12246c4c26c

[18:25] <Zoffix> k, gonna change

[18:25] <timotimo> it's problematic that it won't put the objectid next to the thing's first occurence

[18:25] <timotimo> though with the chunks array the way it is, it would be possible to implement that with a splice ...

[18:30] <timotimo> but now it's grocery sohpping time

[18:31] <ugexe> m: sub foo {...}; role R[$s] { method s{$s} }; constant C = R[:()]; dd C.s;

[18:31] <camelia> rakudo-moar 23ad2c: OUTPUT: «===SORRY!===␤QAST::Block with cuid 7 has not appeared␤»

[18:32] <timotimo> also, 0xfoo the numbers rather than decimal

[18:34] <Zoffix> ZOFFLOP: t/spec/S10-packages/precompilation.t

[18:37] <Zoffix> looks like open.t stopped flooping after the --ll-exception fix :|

[18:37] <Zoffix> Files=1245, Tests=161083, 129 wallclock secs (22.17 usr  3.15 sys + 2658.47 cusr 158.34 csys = 2842.13 CPU)

[18:37] <ugexe> your fix, or the prior one?

[18:39] <Zoffix> I'd guess prior one

[18:39] <Zoffix> Though I don't get why. The original test doesn't use --ll-exception

[18:40] <ugexe> that was my though... unless it has something to do with catching an exception somewhere and using its message to make some decision

[18:40] <Zoffix> And considering merely adding comments to code that used to produce the crash, I'd guess there might be something else that crashes that just got shoved under the rug now ¯\_(ツ)_/¯

[18:40] <Zoffix> ZOFVM: Files=1245, Tests=161083, 130 wallclock secs (21.54 usr  3.16 sys + 2653.97 cusr 161.34 csys = 2840.01 CPU)

[18:41] <Zoffix> k, a few runs and no failures. Time for release.

[18:41] <Geth> ¦ nqp: 8cd835ffad | (Zoffix Znet)++ | src/HLL/Compiler.nqp

[18:41] <Geth> ¦ nqp: Exclude empty messages from check

[18:41] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/8cd835ffad

[18:41] <Geth> ¦ rakudo/nom: 83502cca8c | (Zoffix Znet)++ | tools/build/NQP_REVISION

[18:41] <Geth> ¦ rakudo/nom: Bump NQP

[18:41] <Geth> ¦ rakudo/nom:

[18:41] <Geth> ¦ rakudo/nom: Changes:

[18:41] <Geth> ¦ rakudo/nom: https://github.com/perl6/nqp/compare/2017.06-59-g61307bb...2017.06-62-g8cd835f

[18:41] <Geth> ¦ rakudo/nom:

[18:41] <Geth> ¦ rakudo/nom: 8cd835f Exclude empty messages from check

[18:41] <Geth> ¦ rakudo/nom: c234cf4 Merge pull request #366 from MasterDuke17/fix_no_message_when_using_ll-exception

[18:41] <Geth> ¦ rakudo/nom: 859b444 Fix no message printing when using ll-exception

[18:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/83502cca8c

[18:42] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.06-59-g61307bb...2017.06-62-g8cd835f

[18:43] <Zoffix> ahhh crap

[18:44] <Zoffix> Yeah, it doesn't flop anymore because the open.t file is striped off everything. I never reset it after messing with it during debug

[18:44] <ugexe> what is the expected output of the gist you posted?

[18:45] <Zoffix> anything that doesn't have "Reading from filehandle" error

[18:47] <ugexe> and can I run that gist as its own script? echo "x" | perl6 p6.p6? you mentioned `echo "x" | ./perl6 --ll-exception open.t` but that doesn't mention the code in the gist

[18:48] <Zoffix> yep. open.t still crashes

[18:48] <Zoffix> ugexe: the code from the gist goes to open.t file

[19:00] <Zoffix> k, I'm calling it a day on the open.t test.

[19:01] <Zoffix> It's probably something in MoarVM, as removing the comment avoids a failure. The failing test is also not part of 6.c-errata and is testing a very arcane functionality (re-opening $*OUT/$*IN)

[19:07] <Zoffix> filed as https://rt.perl.org/Ticket/Display.html?id=131755

[19:07] <Zoffix> .tell jnthn perhaps you'd be interested in this bug: https://rt.perl.org/Ticket/Display.html?id=131755

[19:07] <yoleaux> Zoffix: I'll pass your message to jnthn.

[19:13] <Geth> ¦ roast: 4748a283e1 | (Zoffix Znet)++ | S32-io/open.t

[19:13] <Geth> ¦ roast: Fudge failing test for release

[19:13] <Geth> ¦ roast:

[19:13] <Geth> ¦ roast: - Test is not part of 6.c-errata

[19:13] <Geth> ¦ roast: - Test tests edgecase functionality (re-opening $*OUT/$*IN)

[19:13] <Geth> ¦ roast: - Issue detected by the test occurs under unpredictable circumstances

[19:13] <Geth> ¦ roast:     (e.g. even adding a comment affects whether it appears)

[19:13] <Geth> ¦ roast: - Ticket for issue: https://rt.perl.org/Ticket/Display.html?id=131755

[19:13] <Geth> ¦ roast:

[19:13] <Geth> ¦ roast: fudger doesn't like the test, so I just commented it out

[19:13] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4748a283e1

[19:14] <geekosaur> the thing I would wonder about is at what level that error happens. involvement of --ll-exception or change in source code makes me think it's the compiler that is unexpectedly emitting that

[19:14] <Zoffix> Original issue doesn't have --ll-exception

[19:14] <Zoffix> I'd guess it's reading memory it ain't supposed to be reading or something like that

[19:19] <nine> Zoffix: then maybe it'll show up on valgrind or asan?

[19:19] <timotimo> dang i can't do the magic chunk thing because it turns out the chunks get flattened into a string somewhat often

[19:29] <Zoffix> Maybe. I don't know about those tools.

[19:29] <Zoffix> Also MoarVM has already been released.

[19:32] <timotimo> i can't nqp::sprintf("%x", 1) inside nqp?

[19:32] <timotimo> m: use nqp; nqp::sprintf("%x", 1)

[19:33] <camelia> rakudo-moar 83502c: OUTPUT: «Directive x not applicable for type VMNull␤␤»

[19:33] <timotimo> same problem inside rakudo. huh.

[19:33] <timotimo> oh

[19:33] <timotimo> it has to take a list, duh

[19:42] <samcv> good *

[19:42] <Zoffix> \o

[19:43] <ugexe> m: $*OUT.close; $*OUT.open; say 1

[19:43] <camelia> rakudo-moar 83502c: OUTPUT: «Failed to write bytes to filehandle: Bad file descriptor␤  in block <unit> at <tmp> line 1␤␤»

[19:45] <Zoffix> hah

[19:46] <Zoffix> c: 2017.06 $*OUT.close; $*OUT.open; say 1

[19:46] <committable6> Zoffix, ¦2017.06: «Failed to write bytes to filehandle: Bad file descriptor␤  in block <unit> at /tmp/zc4ctEqWWv line 1␤ «exit code = 1»»

[19:48] <Zoffix> my commit busted it, dinnit

[19:48] <Zoffix> bisect: $*OUT.close; $*OUT.open; say 1

[19:48] <bisectable6> Zoffix, Bisecting by exit code (old=2015.12 new=83502cc). Old exit code: 0

[19:48] <bisectable6> Zoffix, bisect log: https://gist.github.com/85aba0f780e5671f4fed5af913481cf2

[19:48] <bisectable6> Zoffix, (2017-06-07) https://github.com/rakudo/rakudo/commit/1ac7996a42d50fc64c758b6dc2c4eec64d2a6094

[19:49] <Zoffix> huh. ok then

[19:49] <Zoffix> c: 1ac7996a42d50f,1ac7996a42d50f~1 $*OUT.close; $*OUT.open; say 1

[19:49] <committable6> Zoffix, ¦1ac7996: «Failed to write bytes to filehandle: Bad file descriptor␤  in block <unit> at /tmp/0Q7XBbzFiU line 1␤ «exit code = 1»» ¦1ac7996a42d50f~1: «1»

[19:57] <ugexe> m: note $*OUT.native-descriptor; $*OUT.close; note $*OUT.native-descriptor;

[19:57] <camelia> rakudo-moar 83502c: OUTPUT: «1␤get native descriptor requires an object with REPR MVMOSHandle (got VMNull with REPR Null)␤  in block <unit> at <tmp> line 1␤␤»

[19:58] <Zoffix> Windows spectest seems to hang on t\spec\S32-io\IO-Socket-INET.t :/

[19:59] <Zoffix> Too late to dig into Windows failures now, I guess.

[20:01] <Zoffix> huge amount of failures in spectest actually :/

[20:08] <ugexe> that hanging test might just be slow as fuck

[20:08] <ugexe> it does 2000 iterations and they are taking about a second each on my vm

[20:10] <Zoffix> 0.o0.o

[20:10] <ugexe> the tests pass otherwise... and after 400ish iterations it was still on track to pass that one

[20:13] <ugexe> https://github.com/perl6/roast/commit/db09cd9fe2279be0e1c2d9205a5aa128906f28d4

[20:13] <ugexe> dogbert17: ^

[20:21] <Geth> ¦ rakudo/nom: c5d74d8672 | (Zoffix Znet)++ | docs/ChangeLog

[20:21] <Geth> ¦ rakudo/nom: Add all changes to changelog

[20:21] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c5d74d8672

[20:29] <ugexe> m: for ^10 -> $i { my $sock = IO::Socket::INET.new(:host<127.0.0.1>, :port($i)); CATCH {say $i; next}; }

[20:29] <camelia> rakudo-moar 83502c: OUTPUT: «0␤1␤2␤3␤4␤5␤6␤7␤8␤9␤»

[20:29] <ugexe> thats taking 10 seconds on windows

[20:30] <ugexe> it goes twice as fast if the host/port is legit

[20:35] <Zoffix> NeuralAnomaly: status

[20:35] <NeuralAnomaly> Zoffix, [✔] Next release is today. Since last release, there are 25 new still-open tickets (0 unreviewed and 0 blockers) and 0 unreviewed commits. See http://perl6.fail/release/stats for details

[20:36] <Zoffix> NeuralAnomaly: cut the release

[20:37] <Zoffix> yo! robot!

[20:37] <Zoffix> Do things!

[20:37] <geekosaur> bottled...

[20:38] <Zoffix> NeuralAnomaly: cut the release

[20:38] <NeuralAnomaly> Zoffix, Will do! If you're feeling particularly naughty, you can watch me at http://perl6.fail/release/progress or go look at some cats http://icanhas.cheezburger.com/lolcats

[20:38] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Prep done

[20:38] <dogbert17> heh, why on earth should that test be dog slow?

[20:38] <Geth> ¦ nqp: af3a53fe51 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[20:38] <Geth> ¦ nqp: bump MoarVM version to 2017.07

[20:38] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/af3a53fe51

[20:38] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.06-91-g146c8fc...2017.07

[20:38] <Geth> ¦ nqp: b2b8c93b78 | (Zoffix Znet)++ | VERSION

[20:38] <Geth> ¦ nqp: bump VERSION to 2017.07

[20:38] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/b2b8c93b78

[20:38] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.06-91-g146c8fc...2017.07

[20:48] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ nqp tests OK

[20:57] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ nqp release tarball tests OK

[20:57] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ nqp release DONE

[20:58] <Geth> ¦ rakudo/nom: bb4f7a17b6 | (Zoffix Znet)++ | docs/announce/2017.07.md

[20:58] <Geth> ¦ rakudo/nom: Generate release announcement for 2017.07

[20:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bb4f7a17b6

[20:58] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.06-62-g8cd835f...2017.07

[20:58] <Geth> ¦ rakudo/nom: 03d93b77bd | (Zoffix Znet)++ | tools/build/NQP_REVISION

[20:58] <Geth> ¦ rakudo/nom: [release] bump NQP revision

[20:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/03d93b77bd

[20:58] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.06-62-g8cd835f...2017.07

[20:58] <Geth> ¦ rakudo/nom: ee915857f5 | (Zoffix Znet)++ | VERSION

[20:58] <Geth> ¦ rakudo/nom: [release] bump VERSION to 2017.07

[20:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ee915857f5

[20:58] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.06-62-g8cd835f...2017.07

[21:00] <Zoffix> damn, forgot to put back the 6.c-errata test files that were removed

[21:01] <Zoffix> Oh well. It's not like I didn't say they shouldn't be removed more than once :/

[21:07] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠ Rakudo: make stresstest (master)

[21:07] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠☠☠☠☠ ABNORMAL EXIT!

[21:07] <Zoffix> great

[21:13] <Geth> ¦ rakudo/nom: 58d93b4630 | (Zoffix Znet)++ | t/spectest.data

[21:13] <Geth> ¦ rakudo/nom: Restore deleted test files

[21:13] <Geth> ¦ rakudo/nom:

[21:13] <Geth> ¦ rakudo/nom: The files are still used by 6.c-errata and can't currently be removed,

[21:13] <Geth> ¦ rakudo/nom: even if they were relocated on master.

[21:13] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/58d93b4630

[21:16] <Zoffix> What's the story behind S04-phasers/eval-in-begin.t being removed?

[21:18] <Geth> ¦ roast: 1826cee917 | (Zoffix Znet)++ | 4 files

[21:18] <Geth> ¦ roast: Add dummy test files

[21:18] <Geth> ¦ roast:

[21:18] <Geth> ¦ roast: For test files that were removed/relocated in master but still exist

[21:18] <Geth> ¦ roast: in 6.c-errata.

[21:18] <Geth> ¦ roast:

[21:18] <Geth> ¦ roast: Eventually these will be tossed from master, when we have per-language-version

[21:18] <Geth> ¦ roast: t/spectest.data files.

[21:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1826cee917

[21:18] <Zoffix> NeuralAnomaly: run r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[21:21] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠ Rakudo: make stresstest (master)

[21:21] <NeuralAnomaly> Zoffix, ☠☠☠☠☠☠☠☠☠☠ ABNORMAL EXIT!

[21:26] <Zoffix> NeuralAnomaly: run r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[21:26] <Zoffix> oh, for fuck's sake... all the floppers

[21:27] <Zoffix> NeuralAnomaly: run r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[21:28] <Zoffix> Really need to spend some time with them and find what makes them flop

[21:28] <Zoffix> NeuralAnomaly: run r-stress r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[21:30] <Zoffix> NeuralAnomaly: run r-stress-v6c r-tar r-tar-build r-tar-p5 r-tar-stress r-tag r-tar-sign r-tar-copy post-scp

[21:32] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Rakudo stresstest (6.c-errata) OK

[21:32] <Zoffix> "The Joel Test: 12 Steps to Better Code: #5 Do you fix bugs before writing new code?"  I think we should be doing more of that. https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/

[21:32] <Zoffix> There's now like 4-6 flopping test files.

[21:33] <Zoffix> There's about 10+ failing Windows test files

[21:33] <Zoffix> buggable: tags

[21:33] <buggable> Zoffix, Total: 1621; BUG: 1073; UNTAGGED: 371; LTA: 171; NYI: 95; JVM: 60; RFC: 57; REGEX: 56; CONC: 51; TESTNEEDED: 31; UNI: 28; PERF: 26; SEGV: 26; IO: 22; NATIVECALL: 22; POD: 21; REGRESSION: 21; @LARRY: 20; TODO: 18; PRECOMP: 14; BUILD: 11; OO: 11; TESTCOMMITTED: 11; OPTIMIZER: 10; STAR: 7; BOOTSTRAP: 5; REPL: 5; GLR: 4; MATH: 4; OSX: 4; WEIRD: 4; SPESH: 3; WINDOWS: 3; RT: 2; BELL

[21:33] <Zoffix> And 1621 bug tickets.

[21:37] <Zoffix> And 30 mentions of RT tickets in source, which I'm guessing are all the temporary fixes

[21:39] <Zoffix> TDD is also good. Adding new feature? Write good tests for it first. 'cause otherwise there's all this extra wasted time with tickets created and people having to go into code and familiriaze themselves with it before being able to fix bugs that could've been caught right when the feature was added, when all the code is still fresh in the mind.

[21:40] <Zoffix> </rant>

[21:40] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Rakudo release DONE

[21:40] <NeuralAnomaly> Zoffix, ♥♥♥♥♥♥ Post: upload tarballs to rakudo.org and rakudo.perl6.org

[21:40] <NeuralAnomaly> Zoffix, ????????????????????????????????????????????????????????????

[21:40] <NeuralAnomaly> Zoffix, The release of **Rakudo #113 2017.07** has now been completed

[21:40] <NeuralAnomaly> Zoffix, ????????????????????????????????????????????????????????????

[21:40] * NeuralAnomaly celebrates with an appropriate amount of fun

[21:40] <Zoffix> yey

[21:41] <dogbert17> which files are flapping?

[21:41] <Zoffix> dogbert17: https://irclog.perlgeek.de/perl6-dev/search/?nick=&q=ZOFFLOP

[21:43] <dogbert17> I guess we need to figure out why the are behaving so badly :)

[21:43] <Zoffix> lizmat: Mission accomplished: "The following people contributed to this release: Elizabeth Mattijsen, Zoffix Znet, ..."

[21:44] <lizmat> :-)

[21:46] <Geth> ¦ rakudo/nom: d37be24961 | (Zoffix Znet)++ (committed using GitHub Web editor) | docs/release_guide.pod

[21:46] <Geth> ¦ rakudo/nom: 2017.07 is now in the past

[21:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d37be24961

[21:47] <Zoffix> I'm done.

[21:48] <dogbert17> t/spec/S17-promise/nonblocking-await.t is known to be broken

[21:48] * Zoffix passes the torch to AlexDaniel

[21:48] <dogbert17> Zoffix++

[21:48] <Zoffix> .tell AlexDaniel For release stuff, there are these docs and posts https://github.com/rakudo/rakudo/blob/nom/docs/release_guide_automated.md https://rakudo.party/post/Perl6-Fail-Release-Robots-And-Other-Goodies

[21:48] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[21:51] <Zoffix> .tell AlexDaniel if you wanted to run the bot on your own system, would be good to practice with test repos. I recall it being a PITA to get it going due to stuff that needs to be installed (the rakudo.party post should detail it). Bot's repo is https://github.com/zoffixznet/na and perl6.fail repo is in https://github.com/zoffixznet/r6 On perl6.fail you can go to https://perl6.fail/release/stats and it'll

[21:51] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[21:51] <Zoffix> tell you which commits aren't in chagnelog yet. After you write them down, click on the question mark button to mark them as logged. Same for tickets.

[21:51] <Zoffix> .tell AlexDaniel tell you which commits aren't in chagnelog yet. After you write them down, click on the question mark button to mark them as logged. Same for tickets.

[21:51] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[21:51] * Zoffix goes on a needed de-burnout from Perl 6

[21:51] <Zoffix> Gonna be (finishing) learning C

[21:51] <dogbert17> relax and play some cool new 3d games

[21:52] <lizmat> Zoffix++   # hanging in there!

[22:07] <ugexe> m: say $*ERR.native-descriptor; $*ERR.close; $*ERR.open; say $*ERR.native-descriptor

[22:07] <camelia> rakudo-moar d37be2: OUTPUT: «2␤-1␤»

[22:07] <ugexe> m: say $*OUT.native-descriptor; $*OUT.close; $*OUT.open; say $*OUT.native-descriptor

[22:07] <camelia> rakudo-moar d37be2: OUTPUT: «1␤Failed to write bytes to filehandle: Bad file descriptor␤  in block <unit> at <tmp> line 1␤␤»

[22:07] <ugexe> that difference probably hints at something

[22:13] <geekosaur> urgh. never close descriptors 0, 1, 2; you can't get them back

[22:14] <jnthn> Zoffix++ # release

[22:15] <jnthn> Fully agree on writing tests when adding new stuff, fwiw. Of course, somebody will probably think of a case you didn't consider and thus think to test...
