[00:36] <ugexe> from what i remember it was a good reason

[00:36] <yoleaux> 30 May 2017 14:31Z <Zoffix> ugexe: TAP.pm6 is gone from core now: https://github.com/rakudo/rakudo/commit/ae891f9367

[00:40] * Zoffix doubts that reason considered programmers typing that name

[00:45] <ugexe> my general perl6 experience is typing out CompUnit::Repository::DependencySpecification.new(:short-name<...>, :auth-matcher<..>, :ver-matcher<...>) a lot, i have no sympathy

[00:46] <Zoffix> "<bioexpress> Hello, why was the module Term::ANSIColor renamed in Terminal::ANSIColor?" "<TimToady> because someone thought it might collide with the idea of "term" in parsing, but it's an unfounded fear"

[00:46] <Zoffix> Exactly what I thought.

[00:47] <Zoffix> ugexe: that stuff has the same problem. Design of the names thought too much about meaning and too little about typing. CU::Repo::DepSpec is what I would've gone with

[00:47] * Zoffix retires to bed

[00:47] <Zoffix> \o

[00:47] <Zoffix> ZofBot: good night, sweet prince!

[00:47] <ZofBot> Zoffix, Oops?

[00:50] <ugexe> its not bad, DependencySpecification( ... ) is brutal though

[01:33] <samcv> good * everyone

[01:39] <BenGoldberg> samcv, Is that a good Whatever star?

[01:39] <samcv> it is a * i dunno

[01:40] <samcv> good ???? everyone

[01:41] <BenGoldberg> That's a bit much, I'll settle for a ★.

[01:46] <BenGoldberg> Or, considering my timezone, a good ????.  (wow that looks horrible in the font I'm using!).  For samcv and others in the same timezone, good ???? or ????.

[01:46] <samcv> it's actually 6:46pm here. but. might as well be morning idk. maybe afternoon in my workday

[06:22] <[Tux]> This is Rakudo version 2017.05-303-g5e3393454 built on MoarVM version 2017.05-25-g62bc54e9

[06:22] <[Tux]> csv-ip5xs        2.733

[06:22] <[Tux]> test            12.828

[06:22] <[Tux]> test-t           4.364 - 4.368

[06:22] <[Tux]> csv-parser      13.036

[06:22] <[Tux]> good * perl6 folk!

[08:33] <nine> I wonder how we lost the 0.3 seconds in csv-ip5xs

[08:45] <nine> Zoffix: code is read much more often than written. "CompUnit::DependencySpecification" (there's no "Repository" in that name) is fairly self documenting and unambiguous.

[09:35] <Geth> ¦ rakudo/nom: 1ed284e295 | (Elizabeth Mattijsen)++ | src/Perl6/Metamodel/Naming.nqp

[09:35] <Geth> ¦ rakudo/nom: Hacky fix for RT #131406

[09:35] <Geth> ¦ rakudo/nom:

[09:35] <Geth> ¦ rakudo/nom: Assuming we will never get something more complicated than foo[bar]

[09:35] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1ed284e295

[09:43] <Geth> ¦ rakudo/nom: cb82760625 | (Elizabeth Mattijsen)++ | lib/Test.pm6

[09:43] <Geth> ¦ rakudo/nom: Fix for RT #131408

[09:43] <Geth> ¦ rakudo/nom:

[09:43] <Geth> ¦ rakudo/nom: Make sure $output is initialized so that we don't take the Any.put

[09:43] <Geth> ¦ rakudo/nom: candidate.

[09:43] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cb82760625

[09:57] <Geth> ¦ nqp/nqp-io: 42a77898ac | (Jonathan Worthington)++ | t/nqp/019-file-ops.t

[09:57] <Geth> ¦ nqp/nqp-io: Toss tests that depend on no CRLF conversion.

[09:57] <Geth> ¦ nqp/nqp-io:

[09:57] <Geth> ¦ nqp/nqp-io: They were only run on JVM, and now they don't run there either.

[09:57] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/42a77898ac

[10:04] <Zoffix> nine: long names negatively affect readability too. At 4-12char indent you'd typically have in some method, you're adding another 65 chars just to instantiate a single object (CompUnit::DependencySpecification.new(:short-name<Inline::Perl5>)) so you're forced to write your code in many lines, reducing its readability.

[10:04] <yoleaux> 03:56Z <MasterDuke> Zoffix: https://github.com/rakudo/rakudo/pull/1091 has been updated

[10:05] <Zoffix> CompUnit::DepSpec is equally self-documenting and unambiguous

[10:08] <Zoffix> Think about it: everyone was calling it it "CUR" when it was being developed and people got around.

[10:09] <Zoffix> We call pod stuff Pod::Block and Pod::Heading. No one seems to have issues without it being named Pod::Documentation::heading  or Plain::Old::Documentation::Heading

[10:10] <jnthn> Most people use them rarely enough in their day-to-day Perl 6 work I don't think it matters all that much.

[10:10] <jnthn> It's just the huffman coding principle at work

[10:10] <lizmat> also: everybody knows what Pod is, with the way we do precomp in Rakudo we are in undiscovered country

[10:12] <Geth> ¦ nqp/nqp-io: 0d1aa3c1c9 | (Jonathan Worthington)++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/DecoderInstance.java

[10:12] <Geth> ¦ nqp/nqp-io: Fix buffer handling thinko in JVM decoder.

[10:12] <Geth> ¦ nqp/nqp-io:

[10:12] <Geth> ¦ nqp/nqp-io: Caught by the NQP tests, after switching to the new NQP file handle.

[10:12] <Geth> ¦ nqp/nqp-io: review: https://github.com/perl6/nqp/commit/0d1aa3c1c9

[10:15] <Geth> ¦ roast: fc90118495 | (Elizabeth Mattijsen)++ | S17-supply/watch-path.t

[10:15] <Geth> ¦ roast: Fix test if we're being fed an absolute path

[10:15] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/fc90118495

[10:16] <Zoffix> Everyone knows what a dependency is too :P

[10:21] <jnthn> Yay, seems my branches don't bust up JVM :)

[10:22] <jnthn> That means...le merge

[10:22] <Zoffix> \o/

[10:24] <lizmat> whhe!

[10:25] <lizmat> whee!  rather  :-)

[10:25] <jnthn> And then finally I've shaved all the yaks to let me re-work file handles in MoarVM to not use libuv...

[10:27] <jnthn> Of course, the one test file that would change in NQP while I have my branch would have to be the one I totally rewrote :)

[10:29] <jnthn> So, to summarize here what's happened

[10:29] <jnthn> Because it's a relatively large change

[10:29] <jnthn> The various char-level IO nqp:: ops are gone

[10:29] <jnthn> nqp::print and nqp::say live on because they're useful for debugging

[10:30] <jnthn> open in NQP now returns an NQPFileHandle object

[10:30] <jnthn> close works on it

[10:30] <jnthn> NQP ops do *not* work on it, instead you call methods

[10:30] <jnthn> The API matches the Perl 6 one pretty closely

[10:31] <jnthn> nqp::printfh(nqp::getdstderr(), ...) was pretty common

[10:31] <jnthn> There's a note in NQP if the thing as a newline at the end

[10:31] <jnthn> Otherwise, stderr() gets the handle, so it's stderr().print(...)

[10:33] <jnthn> *has a newline

[10:34] <Geth> ¦ nqp/master: 37 commits pushed by (Jonathan Worthington)++

[10:34] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/fda389d156...05e5d75c72

[10:34] <jnthn> That's the NQP merge

[10:37] <Geth> ¦ rakudo/nom: 8 commits pushed by (Jonathan Worthington)++

[10:37] <Geth> ¦ rakudo/nom: 31c433edc4 | Update gen-cat to use NQP high level I/O handles.

[10:37] <Geth> ¦ rakudo/nom: c9347d483d | Eliminate sayfh/printfh use in the compiler.

[10:37] <Geth> ¦ rakudo/nom: c0b2b020d5 | Eliminate nqp::readallfh in Proc.pm.

[10:37] <Geth> ¦ rakudo/nom: 81e3f641d3 | Use slurp rather than re-implementing it.

[10:37] <Geth> ¦ rakudo/nom: a6cd73af77 | Update Perl6::Compiler for NQP I/O changes.

[10:37] <Geth> ¦ rakudo/nom: 837c73752b | Eliminate final nqp::printfh use in Rakudo.

[10:37] <Geth> ¦ rakudo/nom: 6a93540aa1 | Merge branch 'io-adaptation' into nom

[10:37] <Geth> ¦ rakudo/nom: b343059672 | Bump NQP_REVISION for I/O changes.

[10:37] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/compare/cb82760625...b343059672

[10:37] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.05-44-g147dbde...2017.05-98-g05e5d75

[10:37] <jnthn> And, now spectest is done, the Rakudo one. :)

[10:38] <lizmat> jnthn: would this change affect https://github.com/edumentab/rakudo-and-nqp-internals-course ?

[10:38] <jnthn> Very possibly

[10:38] <jnthn> I suspect it does I/O somewhere :)

[10:38] <lizmat> yeah... ok

[10:38] <jnthn> Though probably not all that heavily

[10:39] <lizmat> once this dust has settled, I'll look at creating some PR's  :-)

[10:39] <jnthn> In that most I/O in compilers you'd write is done for you in HLL::Compiler

[10:39] <jnthn> So it'd only be if you have I/O bits in your language

[10:39] <jnthn> And for toying around, nqp::say and nqp::print are still there

[10:39] <lizmat> ah, yes...  :-)

[11:15] <travis-ci> NQP build failed. Jonathan Worthington 'Merge branch 'nqp-io''

[11:15] <travis-ci> https://travis-ci.org/perl6/nqp/builds/237874583 https://github.com/perl6/nqp/compare/fda389d1568e...05e5d75c728d

[11:17] <nine> t/nqp/019-file-ops.t                 (Wstat: 0 Tests: 105 Failed: 0)

[11:18] <nine> Parse errors: Bad plan.  You planned 106 tests but ran 105.

[11:19] <Geth> ¦ nqp: 6007ead8f6 | (Stefan Seifert)++ | t/nqp/019-file-ops.t

[11:19] <Geth> ¦ nqp: Fix skip counter in nqp/019-file-ops.t

[11:19] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6007ead8f6

[11:53] <travis-ci> NQP build passed. Stefan Seifert 'Fix skip counter in nqp/019-file-ops.t'

[11:53] <travis-ci> https://travis-ci.org/perl6/nqp/builds/237887892 https://github.com/perl6/nqp/compare/05e5d75c728d...6007ead8f699

[11:58] <dogbert17> .seen Zoffix

[11:58] <yoleaux> I saw Zoffix 11:00Z in #moarvm: <Zoffix> Well, the \o/ was about the general thing :D

[11:59] <dogbert17> .tell Zoffix the code example for method lock looks a bit broken in the browser. https://docs.perl6.org/type/IO::Handle#method_lock

[11:59] <yoleaux> dogbert17: I'll pass your message to Zoffix.

[12:04] <Zoffix> dogbert17: Fixed. Thanks.

[12:04] <yoleaux> 11:59Z <dogbert17> Zoffix: the code example for method lock looks a bit broken in the browser. https://docs.perl6.org/type/IO::Handle#method_lock

[12:11] <Geth> ¦ rakudo/nom: 7f84df1db3 | (Elizabeth Mattijsen)++ | src/core/Rakudo/QuantHash.pm

[12:11] <Geth> ¦ rakudo/nom: Add R:Q.ADD-(MAP|OBJECTHASH)-TO-SET helper methods

[12:11] <Geth> ¦ rakudo/nom:

[12:11] <Geth> ¦ rakudo/nom: To be used in set operators and coercions to Set.

[12:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7f84df1db3

[12:11] <Geth> ¦ rakudo/nom: 160de7e6f0 | (Elizabeth Mattijsen)++ | 3 files

[12:11] <Geth> ¦ rakudo/nom: Use new R:Q methods to generalize Map -> Set coercions

[12:11] <Geth> ¦ rakudo/nom:

[12:11] <Geth> ¦ rakudo/nom: This actually also fixes a hereto unseen bug in objecthash.Set coercion.

[12:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/160de7e6f0

[12:11] <Geth> ¦ roast: 80f77dc88a | (Elizabeth Mattijsen)++ | S02-types/set.t

[12:11] <Geth> ¦ roast: Add some Map/object Hash -> Set coercion tests

[12:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/80f77dc88a

[12:14] <Geth> ¦ roast: 009a59bf39 | (Elizabeth Mattijsen)++ | S02-types/sethash.t

[12:14] <Geth> ¦ roast: Add some Map/object Hash -> SetHash coercion tests

[12:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/009a59bf39

[12:38] <Geth> ¦ roast: 3e5c2bd01a | (Elizabeth Mattijsen)++ | S03-operators/set.t

[12:38] <Geth> ¦ roast: Remove subset/superset tests

[12:38] <Geth> ¦ roast:

[12:38] <Geth> ¦ roast: They're more thoroughly tested in (proper-)subset.t

[12:38] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3e5c2bd01a

[12:38] <Geth> ¦ roast: ac434e7a6c | (Elizabeth Mattijsen)++ | 2 files

[12:38] <Geth> ¦ roast: Also test R versions of subset/superset operators

[12:38] <Geth> ¦ roast:

[12:38] <Geth> ¦ roast: As these were previously tested in set.t, so we should at least keep

[12:38] <Geth> ¦ roast: that coverage.

[12:38] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ac434e7a6c

[13:06] <lizmat> m: my ::foo $x   # pretty strange code and error ?

[13:06] <camelia> rakudo-moar 160de7: OUTPUT: «No such method 'sink' for invocant of type 'foo'␤  in block <unit> at <tmp> line 1␤␤»

[13:06] <lizmat> MasterDuke: ^^^

[13:06] <lizmat> hangs with PR #1091 applied  :-(

[13:07] <jnthn> m: $ = my ::foo $x

[13:07] <camelia> rakudo-moar 160de7: ( no output )

[13:07] <jnthn> m: $ = my ::foo $x; say $x.^name

[13:07] <camelia> rakudo-moar 160de7: OUTPUT: «foo␤»

[13:07] <jnthn> m: $ = my ::foo $x; say $x.HOW.archetypes

[13:07] <camelia> rakudo-moar 160de7: OUTPUT: «No such method 'gist' for invocant of type 'Perl6::Metamodel::Archetypes'␤  in block <unit> at <tmp> line 1␤␤»

[13:07] <jnthn> m: $ = my ::foo $x; say $x.HOW.archetypes.generic

[13:07] <camelia> rakudo-moar 160de7: OUTPUT: «1␤»

[13:07] <jnthn> Ah, it compiles it with a type-var there

[13:11] <lizmat> afk for a bit&

[13:18] <Geth> ¦ roast: e88e087289 | (Elizabeth Mattijsen)++ | S03-operators/elem.t

[13:18] <Geth> ¦ roast: Also test R(elem) family of set operators

[13:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e88e087289

[13:18] <lizmat> jnthn: fwiw, all green for me after the last NQP bump

[13:22] <jnthn> \o/

[13:24] <Zoffix> What a nice coincidence. A song I really liked before I started with Perl 6 is called "Six" :) https://www.youtube.com/watch?v=M0pYWGjECLE

[13:24] * Zoffix reads the lyrics...

[13:24] <Zoffix> Well, glad I didn't say it was a song /about/ Perl 6 :D

[13:26] <jnthn> Alright, lesson time :)

[13:26] <jnthn> bbi1h

[14:07] <b2gills> m: ''.length

[14:07] <b2gills> m: ''.graphs

[14:07] <camelia> rakudo-moar 160de7: OUTPUT: «No such method 'length' for invocant of type 'Str'␤Did you mean 'elems', 'chars', 'graphs' or 'codes'?␤  in block <unit> at <tmp> line 1␤␤»

[14:07] <camelia> rakudo-moar 160de7: OUTPUT: «No such method 'graphs' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»

[14:12] <Zoffix> hehe

[14:12] <nine> Looks like graphs has never been implemented

[14:13] <Zoffix> What were it meant to be?

[14:13] <Zoffix> Graphemes? Isn't it what .chars does now?

[14:14] <nine> Could be. Could also be that .chars actually counts grapheme clusters

[14:14] <Zoffix> m: length ''

[14:14] <camelia> rakudo-moar 160de7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    length used at line 1. Did you mean 'elems', 'chars', 'graphs', 'codes'?␤␤»

[14:15] <Zoffix> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/World.nqp#L4050 and https://github.com/rakudo/rakudo/blob/nom/src/core/Exception.pm#L160

[14:36] <jnthn> I think the idea was that at some time in the distant future there may somehow be a way for users to define what character means at some higher level that graphemes

[14:36] <jnthn> At which point .graphs would unambiguously means graphemes

[14:37] <jnthn> It's not quite accurate to say that .chars counts graphemes; it doesn't have to count, because strings are stored as NFG :)

[15:24] <pmurias> jnthn: the character oriented ops should be removed from the JVM backend too?

[15:24] * pmurias is taking care of update the js backend to the new ops now

[15:26] <jnthn> pmurias: Yeah, it will need a rebootstrap first, however

[15:26] <jnthn> For js backend, I tried to update a few places that obviously needed updating from grepping, but didn't try it out. Hopefully it was more helpful than doing nothing.:)

[15:27] <jnthn> pmurias: If you're motivated to the JVM rebootstrap and clearup, please feel free :)

[15:42] <mr_ron> .tell Zoffix wondering about p6 equivalent of $. as part of work on IO.   perl6/doc issue https://github.com/perl6/doc/issues/401

[15:42] <yoleaux> mr_ron: I'll pass your message to Zoffix.

[15:43] <timotimo> mr_ron: did you see the LN (or something?) module zoffix made for $.?

[15:43] <yoleaux> 03:57Z <MasterDuke> timotimo: https://github.com/rakudo/rakudo/pull/1091 has been updated

[15:44] <Zoffix> I've not made it yet

[15:44] <yoleaux> 15:42Z <mr_ron> Zoffix: wondering about p6 equivalent of $. as part of work on IO.   perl6/doc issue https://github.com/perl6/doc/issues/401

[15:45] <timotimo> oh, i didn't know

[15:45] <Zoffix> .in 3d Future-Zoffix: https://github.com/perl6/doc/issues/401

[15:45] <yoleaux> Zoffix: I'll remind you on 3 Jun 2017 15:45Z

[15:46] <Zoffix> Well, the module is just sugar for 'my $ln; $*ARGFILES.on-switch = { $ln = 1; };' uuuhhhh

[15:46] * Zoffix tries to remember what the plan was for incrementing $*NL ..

[15:47] <Zoffix> Maybe there wasn't :)

[15:47] <jnthn> Mix in to the handle and override .get :)

[15:47] <Zoffix> mr_ron: thanks. I'll update the docs and resolve that issue when I publish NL module; should be some time this weekend

[15:48] <Zoffix> Yeah, that should probably be it.

[15:49] <Zoffix> s:g/NL/LN/;

[15:49] <jnthn> We even made it so .lines only does its fast path trick if you ain't in a subclass, but calls .get otherwise, so you only have to override method get and not method lines :)

[15:50] <jnthn> In many cases, the for $handle.lines.kv -> $line-no, $line { } is also sufficient (though $line-no will start from 0)

[15:51] <Zoffix> Yeah, for a single file.

[15:51] <Geth> ¦ nqp: eaa6ee5710 | pmurias++ | 2 files

[15:51] <Geth> ¦ nqp: [js] Support for the rakudo nqp::p6finddispatcher op

[15:51] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/eaa6ee5710

[15:51] <Geth> ¦ nqp: 90c4a6f243 | pmurias++ | 4 files

[15:51] <Geth> ¦ nqp: [js] Partially unbreak after IO changes

[15:51] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/90c4a6f243

[15:52] <Zoffix> And for multi-files you can do these things: https://twitter.com/zoffix/status/868761719639871488

[15:52] <Zoffix> And LN module will be sugar to do it for $*ARGFILES

[15:58] <mr_ron> thanks

[16:09] <pmurias> jnthn: amusing fact, we use wtf8 in a test as an encoding that doesn't exist, while it in fact exists

[16:10] <jnthn> lol

[16:11] <Zoffix> hah

[16:26] * Zoffix reads http://ugexe.com/perl-toolchain-summit-2017-cpan-and-perl6/

[16:26] <Zoffix> Cool!

[16:28] <Zoffix> Wonder how Perl 6 reports looks like, given that most people seem to be using Perl 6 rakudobrewed off a random commit

[16:30] <Zoffix> lizmat: so, yeah, 9 days ago you asked if my ecosystem smoker will report to CPAN testers; I said no, but I didn't realize reporting involved just installing amodule. So yeah, it'll report then.

[16:53] <Zoffix> hm, doesn't behave for me like in that blog tho; just says "Reporting with plugin: Zef::CPANReporter+{<anon|80622192>}" without giving the URL of the report

[16:54] * Zoffix looks at source of Zef::CPANReporter ... then uninstall it off work boxes

[16:57] <Zoffix> On second thought...

[16:58] * Zoffix uninstalls it entirely

[16:58] <Zoffix> Reports way too much info.

[17:32] <dogbert17> IOninja: perhaps I'm stupid, but if I run the snippet 'mkdir "newdir"' twice, shouldn't I get an error the second time?

[17:33] <Zoffix> dogbert17: https://rt.perl.org/Ticket/Display.html?id=127772#ticket-history

[17:35] <dogbert17> https://docs.perl6.org/type/IO::Path#routine_mkdir : Creates a new directory. See mode for explanation and valid values for $mode. Returns the IO::Path object pointing to the newly created directory on success; fails with X::IO::Mkdir if directory cannot be created.

[17:36] <dogbert17> FWIW, trying the same in bash results in "mkdir: cannot create directory ‘newdir’: File exists"

[17:37] <Zoffix> dogbert17: well, yeah, see ticket. My understanding of it is mkdir erroneously always returns True on MoarVM<

[17:38] <Zoffix> j: with '/tmp/blah4343243'.IO { .mkdir.chmod: 000; .mkdir

[17:38] <Zoffix> j: with '/tmp/blah4343243'.IO { .mkdir.chmod: 000; .mkdir }

[17:38] <camelia> rakudo-jvm 160de7: OUTPUT: «5===SORRY!5===␤Missing block␤at <tmp>:1␤------> 3h4343243'.IO { .mkdir.chmod: 000; .mkdir7⏏5<EOL>␤    expecting any of:␤        statement end␤        statement modifier␤        statement modifier loop␤Other potential difficulties…»

[17:38] <camelia> rakudo-jvm 160de7: OUTPUT: «Potential difficulties:␤    Leading 0 has no meaning. If you meant to create an octal number, use '0o' prefix; like, '0o00'. If you meant to create a string, please add quotation marks.␤    at <tmp>:1␤    ------> 3/tmp/blah4343243'.IO { .mkdir.chmo…»

[17:39] <Zoffix> gah

[17:39] <Zoffix> r: with '/tmp/blah4343243'.IO { .mkdir.chmod: 0o000; .mkdir }

[17:39] <camelia> rakudo-{moar,jvm} 160de7: ( no output )

[17:39] <Zoffix> s: '.'.IO, 'mkdir', \()

[17:39] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/160de7e/src/core/IO/Path.pm#L525

[17:40] <Zoffix> Yeah. It's just an op call. I suppose we could do the checks in question in Rakudo land, but perhaps the op should be fixed instead

[17:40] <dogbert17> Zoffix: so the docs are correct but reality is different :)

[18:01] <Zoffix> ZOFVM: Files=1239, Tests=137928, 118 wallclock secs (21.92 usr  3.00 sys + 2371.78 cusr 140.06 csys = 2536.76 CPU)

[18:03] <Geth> ¦ rakudo/nom: fb7dd8a430 | (Zoffix Znet)++ | 3 files

[18:03] <Geth> ¦ rakudo/nom: Improve errors for length routine

[18:03] <Geth> ¦ rakudo/nom:

[18:03] <Geth> ¦ rakudo/nom: - Do not suggest non-existent 'graphs'

[18:03] <Geth> ¦ rakudo/nom:

[18:03] <Geth> ¦ rakudo/nom: For method form:

[18:03] <Geth> ¦ rakudo/nom:     - Do not suggest 'chars' or 'codes' for List types

[18:03] <Geth> ¦ rakudo/nom:     - Do not suggest 'elems' for non-List Cool types

[18:03] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fb7dd8a430

[18:03] <Zoffix> b2gills: that fixes the issue

[18:11] <Geth> ¦ roast: 83e984a190 | (Zoffix Znet)++ | S24-testing/7-bail_out.t

[18:11] <Geth> ¦ roast: Test immediate bail-out does not crash

[18:11] <Geth> ¦ roast:

[18:11] <Geth> ¦ roast: RT#131408: https://rt.perl.org/Ticket/Display.html?id=131408

[18:11] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/cb82760625f6b8fec64a75

[18:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/83e984a190

[18:16] <Zoffix> .ask MasterDuke do you think it's possible to improve the "Too many positionals" error to include the subname/invocant+method; similar to how the methodcalls on :D/:U were improved recently? Part of https://rt.perl.org/Ticket/Display.html?id=131408#txn-1461759

[18:16] <yoleaux> Zoffix: I'll pass your message to MasterDuke.

[18:19] <Zoffix> dogbert17: FWIW, I'll likely nuke doc/Language/io.pod6 when doc/Language/io-guide.pod6

[18:19] <Zoffix> dogbert17: when The Definitive IO Guide is completed.

[18:20] <Zoffix> /io.pod6 is a bit too heavy on the basics and too light on the heavier stuff. I also see it suggest dumb things, like parsing CSV without a module

[18:21] <Zoffix> my $fh = open "testfile", :w;

[18:21] <Zoffix> $fh.say("data and stuff");

[18:21] <Zoffix> $fh.close;

[18:22] <Zoffix> You'd just write that as 'testfile'.IO.spurt: "data and stuff"; The example over-use `open`

[18:22] <Zoffix> + "\n"

[18:34] <Zoffix> zm: sub (Int:D()) {}( Str )

[18:34] <dogbert17> Zoffix: cool

[18:34] <Zoffix> m: sub (Int:D()) {}( Str )

[18:34] <camelia> rakudo-moar fb7dd8: OUTPUT: «Type check failed in binding to parameter '<anon>'; expected Int but got Str (Str)␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:34] <Zoffix> m: sub (Int()) {}( Str )

[18:34] <camelia> rakudo-moar fb7dd8: OUTPUT: «Invocant of method 'Int' must be an object instance of type 'Str', not a type object of type 'Str'.  Did you forget a '.new'?␤  in sub  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[18:37] <Zoffix> Filed as https://rt.perl.org/Ticket/Display.html?id=131413

[18:42] <Geth> ¦ roast: b25a0b9045 | usev6++ | S15-string-types/Str.t

[18:42] <Geth> ¦ roast: [JVM] Unfudge passing test

[18:42] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b25a0b9045

[18:43] <Zoffix> m: class { has Int:D() $.x = '42'}.new.x

[18:43] <camelia> rakudo-moar fb7dd8: OUTPUT: «Type check failed in assignment to $!x; expected Int:D but got Str ("42")␤  in block <unit> at <tmp> line 1␤␤»

[18:43] <Zoffix> m: class { has Int() $.x = '42'}.new.x

[18:43] <camelia> rakudo-moar fb7dd8: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Coercion Int(Any) is insufficiently type-like to qualify a variable␤at <tmp>:1␤------> 3class { has Int() $.x7⏏5 = '42'}.new.x␤    expecting any of:␤        constraint␤»

[18:45] <Zoffix> m: class { has Int:D() $.x = 42}.new.x

[18:45] <camelia> rakudo-moar fb7dd8: ( no output )

[18:45] <Zoffix> m: class { has Int:D() $.x = 42}.new(:x('42'))

[18:45] <camelia> rakudo-moar fb7dd8: OUTPUT: «Type check failed in assignment to $!x; expected Int:D but got Str ("42")␤  in block <unit> at <tmp> line 1␤␤»

[18:47] <Zoffix> Filed as https://rt.perl.org/Ticket/Display.html?id=131414

[18:47] <Zoffix> ZofBot: it's almost PI ticket time!

[18:47] <ZofBot> Zoffix, No num shenanigans in there

[18:47] <Zoffix> hehe

[18:48] <Zoffix> Well, tried having a go at https://rt.perl.org/Ticket/Display.html?id=127016#ticket-history

[18:49] <Zoffix> But it's a can-o-warms. We have quite a lot of methods that'll happily accept a non-D type and fail in some weird ways

[18:49] <Zoffix> m: say Date.new-from-daycount: Int

[18:49] <camelia> rakudo-moar fb7dd8: OUTPUT: «Invocant of method 'Bridge' must be an object instance of type 'Int', not a type object of type 'Int'.  Did you forget a '.new'?␤  in block <unit> at <tmp> line 1␤␤»

[18:50] <Zoffix> .oO( hyphens in only half the method name. New low for naming inconsincies )

[19:09] <Geth> ¦ nqp: 84e460fb82 | raiph++ (committed using GitHub Web editor) | README.pod

[19:09] <Geth> ¦ nqp: (c) 2017 and JVM backend is currently experimental

[19:09] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/84e460fb82

[19:12] <Zoffix> *sigh* the Internet is a terrible place to find medical info. Apparently more people like to play Internet doctors than Internet laywers.

[19:12] <Zoffix> I might have acute liver failure and be dead soon... so, if I stop committing... Flip the cushion :P

[19:53] <travis-ci> Rakudo build passed. Zoffix Znet 'Improve errors for length routine

[19:53] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/238027089 https://github.com/rakudo/rakudo/compare/160de7e6f02e...fb7dd8a4305c

[21:39] <Zoffix> omg.. Can't figure out if I'm really that stupid or if google's hiding the way to authorize with their API really well.

[21:40] <Zoffix> "use a service account"... fine I got the key. Now what :| what URL do I send stuff to or what? And stop telling me to use a python library

[21:43] <Zoffix> I think I finally found it.

[21:44] <Zoffix> I think by far the most time I'll spend in this auto-ecosystem-smoker is figuring out how to make it power on a google VM instance -_-

[21:52] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1093: Add routine name to 'Too many positionals error'

[21:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1093

[21:54] <yoleaux> Zoffix: Future-Zoffix: Address the .sink-all stuff: https://github.com/rakudo/rakudo/commit/0c6281518e5c78113121968df0cf7404aa949dd3#commitcomment-22320387

[22:02] <Zoffix> yoleaux: yeah, I'm a bit busy and don't know how to test that change, so I'm just gonna ignore it for now.

[22:03] <Zoffix> Gonna write the smoker first, then figure out how to make it auto-start VM. With all the encoding/ArgFiles/IO changes this month, we need to start smoking ASAP

[22:03] <Zoffix> NeuralAnomaly: status

[22:03] <NeuralAnomaly> Zoffix, [✘] Next release will be in 2 weeks and 2 days. Since last release, there are 28 new still-open tickets (25 unreviewed and 0 blockers) and 301 unreviewed commits. See http://perl6.fail/release/stats for details

[22:05] <Geth> ¦ rakudo/nom: 7783fcab24 | (Daniel Green)++ | 2 files

[22:05] <Geth> ¦ rakudo/nom: Add routine name to 'Too many positionals error'

[22:05] <Geth> ¦ rakudo/nom:

[22:05] <Geth> ¦ rakudo/nom: Also add some tests.

[22:05] <Geth> ¦ rakudo/nom:

[22:05] <Geth> ¦ rakudo/nom: Fixes https://rt.perl.org/Ticket/Display.html?id=131408

[22:05] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7783fcab24

[22:05] <Geth> ¦ rakudo/nom: c30afd445f | (Zoffix Znet)++ (committed using GitHub Web editor) | 2 files

[22:05] <Geth> ¦ rakudo/nom: Merge pull request #1093 from MasterDuke17/make_too_many_positionals_error_better_RT131408

[22:05] <Geth> ¦ rakudo/nom:

[22:05] <Geth> ¦ rakudo/nom: Add routine name to 'Too many positionals error'

[22:05] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c30afd445f

[22:05] <Zoffix> MasterDuke++

[22:07] <MasterDuke> heh, i couldn't for the life of me remember how i'd added the routine name to that other error, or even which error it was. had to go on github and look at my merged PRs to figure it out

[22:08] <MasterDuke> any reason not to resolve the ticket now?

[22:10] <Zoffix> Don't think so.

[22:11] <ugexe> bah, "Testo:ver(v1.*)" works but not anything with a +

[22:29] <Zoffix> Hah

[22:40] <japhb> Zoffix: Perhaps Inline::Perl5 and some of the Perl 5 Google API modules as a bandage until you can write your own?  The supported API list from https://metacpan.org/pod/Moo::Google looks promising ....

[22:46] <Zoffix> japhb: don't want to use Perl 5

[22:47] <Zoffix> Don't see compute engine in the list of APIs anyway

[22:47] <Zoffix> ah, it's just listed as "compute"

[22:48] <Zoffix> This is why our ecosystem is stunted. Everyone's just using Inline::Perl5

[22:48] <Zoffix> I don't want to contribute to the problem :)

[22:49] <Zoffix> Though I wasn't gonna write a full google API anyway... so maybe, yeah

[22:49] <Zoffix> japhb++ :)

[23:09] <samcv> still haven't figured out why the rakudo appimages stopped building properly a week ago for nom

[23:11] <samcv> "Unhandled exception: Can't convert 'yes' to num: expecting a number"

[23:11] <samcv> O.o https://travis-ci.org/samcv/rakudo-appimage-module-test-automation/jobs/237827836#L1234

[23:18] <Geth> ¦ rakudo/nom: 9bf3ea3a4a | (Samantha McVey)++ | src/core/REPL.pm

[23:18] <Geth> ¦ rakudo/nom: REPL: Don't show message to install line editor if using rlwrap

[23:18] <Geth> ¦ rakudo/nom:

[23:18] <Geth> ¦ rakudo/nom: Detect if the user is using rlwrap, and if so, don't tell them

[23:18] <Geth> ¦ rakudo/nom: to install it, because they are already using it.

[23:18] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9bf3ea3a4a

[23:19] <samcv> yay. that will make me and hopefully others happy

[23:30] <Zoffix> \o/

[23:32] <samcv> Zoffix, do you use rlwrap or the modules or none of the above?

[23:34] <samcv> also maybe we should have that message by to stderr?

[23:34] <samcv> will make testing a lot easier

[23:35] <samcv> or maybe there's a good reason to not use stderr and keep it all on stdout idk

[23:38] <samcv> o i see why this repl test in rakudo source tree. (test is disableld btw) but relied on the message saying to use panda not zef

[23:48] <Geth> ¦ rakudo/nom: 8ec1810198 | (Samantha McVey)++ | t/02-rakudo/repl.t

[23:48] <Geth> ¦ rakudo/nom: test: fix a few REPL tests

[23:48] <Geth> ¦ rakudo/nom:

[23:48] <Geth> ¦ rakudo/nom: * REPL message now says to use zef, so filter out that message properly

[23:48] <Geth> ¦ rakudo/nom: * Fix an incorrectly written test

[23:48] <Geth> ¦ rakudo/nom:

[23:48] <Geth> ¦ rakudo/nom: - FYI test is currently not enabled when doing `make test`

[23:48] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8ec1810198

[23:50] <Zoffix> samcv: don't even know what rlwrap is

[23:51] <Zoffix> I don't use REPL though... It's just so... uncivilized

[23:51] <samcv> oh. it's like installing Readline

[23:51] <samcv> you just `alias perl6='rlwrap perl6'`

[23:51] <samcv> sometimes for very simple things i'll use repl

[23:51] <samcv> anything more i make a file and execute from atom

[23:51] <samcv> or save etc

[23:52] <samcv> and rlwrap similar to Readline module saves your previously entered lines

[23:53] <samcv> allows you to delete things easily etc. and i don't have to worry about a module not being installed or waiting for it to precomp the Readline module again

[23:53] <samcv> after rebuilding rakudo

[23:59] <buggable> ???????????? It's time for the monthly Accidental /win Lottery ???????????? We have 14 ballots submitted by 10 users! DRUM ROLL PLEASE!...
