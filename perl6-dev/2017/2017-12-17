[02:55] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1317: Add two special cases for infix:<,>

[02:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1317

[02:55] <synopsebot> RAKUDO#1317 [open]: https://github.com/rakudo/rakudo/pull/1317 Add two special cases for infix:<,>

[06:03] <AlexDaniel> huggable: blockers

[06:03] <huggable> AlexDaniel, https://github.com/rakudo/rakudo/labels/%E2%9A%A0%20blocker%20%E2%9A%A0

[06:03] <yoleaux> 16 Dec 2017 20:59Z <Zoffix> AlexDaniel: last release blocker is now resolved: https://github.com/rakudo/rakudo/issues/1308

[06:03] <AlexDaniel> Awesome.

[06:03] <AlexDaniel> everyone++

[06:12] <AlexDaniel> so, I will be away for a few hours, then will get back to the release

[06:17] <AlexDaniel> by the way there's a changelog draft here, which everyone can edit: https://github.com/rakudo/rakudo/wiki/ChangeLog-Draft

[06:20] <AlexDaniel> .tell samcv no release blockers right now, so let me know when you're ready (I'll be back ≈14:00 UTC)

[06:20] <yoleaux> AlexDaniel: I'll pass your message to samcv.

[07:18] <yoleaux> AlexDaniel`: RT/GH weekly

[07:37] <AlexDaniel`> yoleaux: no! Do it yourself!

[08:00] <Hotkeys> I was looking through the changelog and noticed the .toggle thing

[08:00] <Hotkeys> It seems pretty neat but I'm curious what kind of uses it would have?

[09:49] <AlexDaniel> goddamn spam on freenode :S

[10:16] <AlexDaniel> ahhhh

[10:16] <AlexDaniel> so I've seen this issue yesterday…

[10:17] <AlexDaniel> but I shrugged it off thinking it's a glitch or whatever

[10:17] <AlexDaniel> but now releasable failed trying to do the dry run: https://gist.githubusercontent.com/AlexDaniel/ac782005c7cadef0d7fbffed7adaad8b/raw/9bbfa00b0057c19027ad1db0a551304d5e82e78d/gistfile1.txt

[10:18] <AlexDaniel> that's when installing Inline::Perl5

[10:31] <nine> AlexDaniel: I see it here, too

[10:31] <AlexDaniel> nine: … thanks god :D

[10:32] <nine> Also it looks very reproducible, so it should be bisectable

[10:32] <AlexDaniel> c: HEAD https://gist.githubusercontent.com/AlexDaniel/486a2a44eba8cdcfdf0cc804b6cc24ec/raw/54719d08464e5b3711a9b29183d2188b5393a0b2/gistfile1.txt

[10:32] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[10:32] <committable6> AlexDaniel, ¦HEAD(53a94fe): «ok 1 - ␤1..1␤»

[10:32] <AlexDaniel> not with bisectable though…

[10:32] <AlexDaniel> c: HEAD https://gist.githubusercontent.com/AlexDaniel/486a2a44eba8cdcfdf0cc804b6cc24ec/raw/54719d08464e5b3711a9b29183d2188b5393a0b2/gistfile1.txt

[10:32] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[10:33] <committable6> AlexDaniel, ¦HEAD(53a94fe): «ok 1 - ␤1..1␤»

[10:33] <AlexDaniel> c: HEAD https://gist.githubusercontent.com/AlexDaniel/486a2a44eba8cdcfdf0cc804b6cc24ec/raw/54719d08464e5b3711a9b29183d2188b5393a0b2/gistfile1.txt

[10:33] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[10:33] <committable6> AlexDaniel, ¦HEAD(53a94fe): «ok 1 - ␤1..1␤»

[10:33] <nine> odd

[10:33] <[Tux]> Rakudo version 2017.11-130-g53a94fe51 - MoarVM version 2017.11-48-g0b9f8090a

[10:33] <[Tux]> csv-test-xs-20      0.476 -  0.482

[10:33] <[Tux]> csv-ip5xs           1.136 -  1.289

[10:33] <[Tux]> test-t --race       1.267 -  1.363

[10:33] <[Tux]> test-t              2.975 -  3.110

[10:33] <[Tux]> test               12.315 - 12.394

[10:33] <[Tux]> csv-parser         12.363 - 13.682

[10:33] <[Tux]> csv-ip5xs-20       13.818 - 14.226

[10:33] <[Tux]> test-t-20 --race   19.204 - 21.405

[10:33] <[Tux]> test-t-20          56.098 - 56.212

[10:39] <lizmat> Files=1233, Tests=75960, 329 wallclock secs (14.94 usr  5.30 sys + 2272.39 cusr 229.84 csys = 2522.47 CPU)

[10:39] <lizmat> seems we lost quite a bit of performance with the revert of  jit MVM_OP_throwpayloadlexcaller :-(

[10:40] <lizmat> but I guess it's for the better: more performance improvements in the future  :-)

[10:40] <lizmat> and at least I haven't seen any strange flappers anymore

[10:41] <AlexDaniel> there's a ticket for putting it back: https://github.com/MoarVM/MoarVM/issues/765

[10:41] <AlexDaniel> anyway:

[10:41] <AlexDaniel> huggable: blockers

[10:41] <huggable> AlexDaniel, https://github.com/rakudo/rakudo/labels/%E2%9A%A0%20blocker%20%E2%9A%A0

[10:42] <AlexDaniel> I'm still not back home so o/

[11:14] <nine> The Inline::Perl5 eval issue is caused by MoarVM commit ba1fb954222810a87f0f5501290877fdcba6aa05 "jit a few exception related ops"

[11:39] <AlexDaniel> timotimo: ↑ ping ? :)

[11:48] <Hotkeys> ...

[12:57] <timotimo> AlexDaniel, nine, zoffix had already bisected that very commit in the original bug report. that's why we reverted that partially, right?

[12:58] <AlexDaniel`> ..... Right

[12:58] <AlexDaniel`> Damn I think that was with the older moarvm

[12:59] <AlexDaniel`> False alarm probably

[13:03] <timotimo> "that"?

[13:04] <timotimo> lizmat: we could mark throwpayloadlexcaller :noinline in the ops file; that would prevent frames that now inline it and can't get jitted to at least have the rest of themselves jitted at the expense of calling whatever had throwpayloadlexcaller in them?

[13:10] <lizmat> timotimo: at his point before the release I would go for rather safe than sorry, so no more changes there until after the release

[13:15] <AlexDaniel`> +1

[13:16] <timotimo> wish we had found this before jnthn went AFK for travels

[13:55] <lizmat> timotimo: hopefully he'll find it quickly when he gets back  :-)

[13:59] <AlexDaniel> c: HEAD^,HEAD https://gist.githubusercontent.com/AlexDaniel/486a2a44eba8cdcfdf0cc804b6cc24ec/raw/54719d08464e5b3711a9b29183d2188b5393a0b2/gistfile1.txt

[13:59] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[13:59] <committable6> AlexDaniel, ¦HEAD^: «not ok 1 - ␤# Failed test at /tmp/x_xmzmT9fk line 9␤# expected: '2'␤#      got: (Any)␤1..1␤# Looks like you failed 1 test of 1␤ «exit code = 1»» ¦HEAD(53a94fe): «ok 1 - ␤1..1␤»

[13:59] <AlexDaniel> yeah, false alarm

[14:36] <samcv> .

[14:36] <yoleaux> 06:20Z <AlexDaniel> samcv: no release blockers right now, so let me know when you're ready (I'll be back ≈14:00 UTC)

[14:36] <AlexDaniel> o/

[14:36] <samcv> o/

[14:36] <samcv> so we're ready for a release?

[14:37] <AlexDaniel> I think so

[15:03] <AlexDaniel> stuff seems to be ok on jvm, it'd also be great if someone made sure there's no extraordinary breakage on windows

[15:04] <AlexDaniel> ( compared to this for example: https://github.com/perl6/roast/issues/320 )

[16:38] <MasterDuke> timotimo: any thoughts or suggestions on https://github.com/rakudo/rakudo/pull/1317 ?

[16:39] <timotimo> interesting, so that's what that was for

[16:40] <timotimo> does it have an impact on run time for my ($a, $b) as well?

[16:40] <timotimo> oh, it's only about the RHS of the assignment maybe?

[16:40] <MasterDuke> eh, i think both

[16:41] <MasterDuke> i think i did some runs with my ($a, $b) inside the loop as well

[16:42] <MasterDuke> and the infix:<,> calls got split, half to the original candidate (i assume for the my ($a, $b)), half to my new candidate

[16:44] <MasterDuke> but my more rigorous tests didn't have it in the loop (just to simplify things)

[16:44] <timotimo> i think the infix:<,>($, $) candidate may spesh well, but i'm not sure how nextsame works there, tbh

[16:44] <MasterDuke> i'm trying that now

[16:44] <timotimo> oh, actually

[16:44] <timotimo> no, it wouldn't, because the istype is on the result of atpos, we don't get that yet

[16:44] <MasterDuke> oh, it would *not* spesh well?

[16:46] <timotimo> no, it'd be completely oblivious for the two type checks

[16:47] <timotimo> p6vmargarray is a little gnarly in the code it produces

[16:47] <MasterDuke> well, i just tried it and a profile shows it jitted

[16:48] <timotimo> right, it wouldn't prevent jitting, it's just opaque to spesh with regards to "facts" about things

[16:48] <MasterDuke> though i wonder if it'd be better to change it to (\a, \b) and then `istype(a, Slip) || istype(b, Slip)`?

[16:48] <timotimo> i'd assume so

[16:49] <timotimo> p6argvmarray compiles into a param_sp op, i.e. create an array from parameters that got slurped, and then it loops over the array and calls hllize on every entry

[16:49] <timotimo> not only do we currently not understand what param_sp contains, even though we can get info from the callsite, but the loop makes it completely unknowable

[16:50] <MasterDuke> so `nqp::p6bindattrinvres(nqp::create(List),List,'$!reified',nqp::list(a, b))` would be faster than `nqp::p6bindattrinvres(nqp::create(List),List,'$!reified',nqp::p6argvmarray())` ?

[16:51] <timotimo> that'd be my intuition

[16:51] <timotimo> of course the real interesting part comes from hopefully being able to eliminate the typechecks against Slip

[16:52] <MasterDuke> trying that now

[16:52] <MasterDuke> `multi sub infix:<,>(\a, \b) { (nqp::istype(a,Slip) || nqp::istype(b,Slip)) ?? nextsame() !! nqp::p6bindattrinvres(nqp::create(List),List,'$!reified',nqp::list(a,b))`

[16:54] <timotimo> i don't get a timing difference at all though?

[16:55] <MasterDuke> hm, seems about the same speed

[16:55] <timotimo> i was comparing against "no infix sub declared at all"

[16:56] <timotimo> it does choose the , candidate in my code

[16:56] <MasterDuke> oh, you're testing also?

[16:56] <timotimo> once per loop

[16:58] <timotimo> a profile shows that infix:<,> is only responsible for 7% of total run time

[16:59] <MasterDuke> i think i show it as a little more than than before any changes and a little less than that after

[17:00] <MasterDuke> but the top for me is `STORE SETTING::src/core/List.pm:736`

[17:00] <timotimo> yeah, by far

[17:00] <timotimo> STORE calls iterator calls ReifiedList

[17:00] <MasterDuke> yep

[17:02] <timotimo> the semantics of list STORE are complex

[17:02] <timotimo> if we were able to do a cheap check and go into a fast path, that'd be helpful

[17:02] <timotimo> though perhaps the right answer here is for the optimizer to compile custom code for such list assignment

[17:02] <MasterDuke> i looked at those, but yeah, didn't see any quick and obvious wins

[17:03] <timotimo> i.e. bypass STORE entirely

[17:03] <MasterDuke> :1446

[17:03] <timotimo> unless of course our users are hoping to be able to .wrap the STORE method and have their version be run for ($a, $b) = 1, 2

[17:05] <MasterDuke> well, wasn't TimToady saying something about how some operators we can assume wouldn't/shouldn't be messed with by users? would infix:<,> fall into that category?

[17:06] <timotimo> this is the = operator that would be messed with though :D

[17:06] <MasterDuke> oh, ha, right

[17:12] <AlexDaniel> pfffffffffffft :D

[17:12] <AlexDaniel> I was kinda struggling here for an hour trying to make sense of releasable failing half way through

[17:13] <AlexDaniel> sooo… ｢make test｣ for some reason mkdirs t/spec/packages

[17:13] <AlexDaniel> and once that thing is there, make spectest fails because it refuses to clone into t/spec

[17:13] <AlexDaniel> because the path exists

[17:14] <timotimo> whoops

[17:15] <AlexDaniel> it is this file I think https://github.com/rakudo/rakudo/blob/master/t/07-pod-to-text/01-whitespace.t

[17:17] <AlexDaniel> changing it to use lib <t/packages>; resolves the problem

[17:17] <AlexDaniel> but why does it even need to use that

[17:18] <nine> camelia: say "alive"

[17:19] <nine> m: say "alive"

[17:19] <camelia> rakudo-moar 53a94fe51: OUTPUT: «alive␤»

[17:19] <nine> Note to self: re-install grub after every OS upgrade before rebooting

[17:22] <Geth> ¦ rakudo: 3f90f663ba | (Aleks-Daniel Jakimenko-Aleksejev)++ | t/07-pod-to-text/01-whitespace.t

[17:22] <Geth> ¦ rakudo: Remove unused and evil “use lib” line

[17:22] <Geth> ¦ rakudo:

[17:22] <Geth> ¦ rakudo: If you run ｢make test｣, this file will effectively do

[17:22] <Geth> ¦ rakudo: ｢mkdir -p t/spec/packages｣. If you then attempt to run ｢make spectest｣,

[17:22] <Geth> ¦ rakudo: it will fail because it has to clone roast first, but the directory

[17:22] <Geth> ¦ rakudo: exists already so it will not manage to do that succesfully.

[17:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3f90f663ba

[19:16] <Geth> ¦ roast/6.c-errata: 44f355ae59 | (Aleks-Daniel Jakimenko-Aleksejev)++ | S02-types/range.t

[19:16] <Geth> ¦ roast/6.c-errata: Fix overly specific test

[19:16] <Geth> ¦ roast/6.c-errata:

[19:16] <Geth> ¦ roast/6.c-errata: As noted in this comment:

[19:16] <Geth> ¦ roast/6.c-errata: https://rt.perl.org/Ticket/Display.html?id=125964#txn-1512874

[19:16] <Geth> ¦ roast/6.c-errata:

[19:16] <Geth> ¦ roast/6.c-errata: On master the test was changed in 172b50b5b8b8846cb8fbd00395ab4bee376c5a9c

[19:16] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/44f355ae59

[19:16] <Geth> ¦ roast/6.c-errata: ac8f7e9ac3 | (Tim Smith)++ (committed by Aleks-Daniel Jakimenko-Aleksejev) | S26-documentation/08-formattingcodes.t

[19:16] <Geth> ¦ roast/6.c-errata: Formatting Codes don't produce spurious ""

[19:16] <Geth> ¦ roast/6.c-errata:

[19:16] <Geth> ¦ roast/6.c-errata: This adjusts for rakudo/rakudo#1300.

[19:16] <synopsebot> RAKUDO#1300 [closed]: https://github.com/rakudo/rakudo/pull/1300 Untwine Pod

[19:16] <Geth> ¦ roast/6.c-errata:

[19:16] <Geth> ¦ roast/6.c-errata: - rejigs the array indexes so that the tests work without "" being

[19:16] <Geth> ¦ roast/6.c-errata:    everywhere

[19:16] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/ac8f7e9ac3

[20:14] <AlexDaniel> samcv: so everything looks clean from my side and I'm ready

[22:19] <MasterDuke> huh, nextsame is not at all cheap

[22:20] <MasterDuke> any cheaper way to get the same behavior?

[22:22] <lizmat> MasterDuke: looking at the code, I don't think it can get much cheaper except at the VM level

[22:23] <lizmat> didn't timotimo just undo the throwpayloadlexcaller optimization in MoarVM because it caused spurious crashes ?

[22:26] <MasterDuke> i'm looking at a profile of the more generic version of my PR on this code: 'my @a; my @b; @b = "a",|@a for ^1000000'

[22:26] <MasterDuke> it calls find_best_dispatchee on every iteration

[22:26] <dr_jon326> 04,11▄04,06▄03,08▄07,06▄04,08▄03,03▄10,07▄07,06▄04,04▄09,08▄12,09▄10 DID YOU GUYS KNOW TODAY WAS NIGGERS DAY?? SAY HI TO YOUR FAVORITY NIGGER IN #FREENODE!! quicktalkeh676te.onionnebdwuopcr: squashable6 Geth quotable6 ilbot3 mst reportable6 bisectable6 literal [Tux] unicodable6 scovit dalek SmokeMachine nine committable6 evalable6 tbrowder Hotkeys camelia perlpilot synopsebot coverable

[22:26] <dr_jon326> 13,04▄09,06▄10,08▄06,12▄07,04▄10,05▄07,04▄11,13▄04,07▄10,10▄10,04▄10,05▄05 DID YOU GUYS KNOW TODAY WAS NIGGERS DAY?? SAY HI TO YOUR FAVORITY NIGGER IN #FREENODE!! quicktalkeh676te.onionanxop: go|dfish krunen dalek zostay [Tux] Geth masak committable6 perlpilot jnthn btyler nine dogbert17 unicodable6 ZzZombo MasterDuke scovit evalable6 SmokeMachine timotimo statisfiable6 BooK cameli

[22:26] <lizmat> *sigh*

[22:26] <Hotkeys> Why am I always pinged in these

[22:27] <lizmat> .tell moritz we need some irclog cleaning again (just now)

[22:27] <yoleaux> lizmat: I'll pass your message to moritz.

[22:28] <lizmat> Hotkeys: it just mentions everybody on the channel

[22:28] <Hotkeys> oh it didn't look like it mentioned that many

[22:28] <lizmat> well, maybe the script is broken

[22:29] <lizmat> MasterDuke: I was thinking of abstracting the List with Slip creation logic into Rakudo::Internals

[22:29] <lizmat> and call that from a 1,2 and 3 parameter version

[22:29] <lizmat> should a Slip be found

[22:30] <lizmat> this would make the fast path versions much smaller, and easier inlineable

[22:30] <MasterDuke> i'm sure you can do something better than what i have

[22:30] <lizmat> well, I'm not sure, I always find things I didn't expect  :-)

[22:31] <lizmat> I recently also found that not HLLizing yourself, makes code faster

[22:32] <lizmat> m: use nqp; sub a(|) { nqp::hllize(nqp::p6argvmarray) }; a() for ^1000000; say now - INIT now

[22:32] <camelia> rakudo-moar 3f90f663b: OUTPUT: «0.341148347␤»

[22:32] <lizmat> m: use nqp; sub a(|) { nqp::p6argvmarray }; a() for ^1000000; say now - INIT now

[22:32] <camelia> rakudo-moar 3f90f663b: OUTPUT: «0.1925476␤»

[22:32] <lizmat> not sure what that is about

[22:33] <MasterDuke> hmm

[22:33] <lizmat> m: use nqp; sub a(|) { nqp::p6bindattrinvres(nqp::create(List),List,q/$!reified/,nqp::p6argvmarray) }; a() for ^1000000; say now - INIT now

[22:33] <camelia> rakudo-moar 3f90f663b: OUTPUT: «0.221951␤»

[22:35] * lizmat vague recalls the HLLization is needed because the JVM dies in many cases if it is not HLLized
