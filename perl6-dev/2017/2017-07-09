[00:22] <samcv> just gotta run a full spectest just in case. but i ran the tests for the only tests that should actually be affected

[00:25] <samcv> u: { .uniprop('Emoji') }

[00:25] <unicodable6> samcv, U+0023 NUMBER SIGN [Po] (#)

[00:25] <unicodable6> samcv, U+002A ASTERISK [Po] (*)

[00:25] <unicodable6> samcv, 1126 characters in total: https://gist.github.com/3bec4c1b92ce52d1401d23764ee01ef7

[00:27] <samcv> ok cool. commit pushed :) exciting

[01:08] <[Coke]> my run SEGV is down to this: https://gist.github.com/coke/a612a2f1d70c020c50d5d7ee92b190c8

[01:08] <yoleaux> 8 Jul 2017 18:04Z <AlexDaniel> [Coke]: https://irclog.perlgeek.de/perl6-dev/2017-07-08#i_14844908

[01:08] <yoleaux> 8 Jul 2017 18:04Z <AlexDaniel> [Coke]: this may help your Proc::Async issue

[01:09] <AlexDaniel> [Coke]: TL;DR it was fixed, try the most recent rakudo

[01:12] * [Coke] re-ups.

[01:18] <[Coke]> yup, that's better!

[01:19] <AlexDaniel> \o/

[01:53] <samcv> :)

[01:58] <ugexe> looks like rakudo started failing on jvm 7 but not 8 in the last 4 days

[01:58] <ugexe> complains about a method codePoints()

[01:58] <ugexe> https://travis-ci.org/ugexe/zef/jobs/251612338#L239

[01:59] <ugexe> on the rakudo travis it gets past that point, but its using java 8

[03:45] <samcv> does anyone know where in nqp the code for "\x[ ]" is?

[03:47] <samcv> ok i think it might be here src/HLL/Actions.nqp gotta find where though. i know \c is there

[03:53] <samcv> found it i think

[03:57] <samcv> there's an overflow problem and i'm not sure where the integer goes after https://github.com/perl6/nqp/blob/master/src/HLL/Actions.nqp#L118

[03:57] <samcv> so that self.string_to_int($/, 16) it isn't the part that is losing precision

[03:57] <samcv> well overflowing i mean. i put a print in there and that is fine. so i need to figure out where it is

[08:30] <lizmat> Files=1209, Tests=64167, 215 wallclock secs (13.09 usr  4.95 sys + 1299.16 cusr 138.17 csys = 1455.37 CPU)

[09:31] <[Tux]> This is Rakudo version 2017.06-180-g05c255c14 built on MoarVM version 2017.06-49-g6011f876

[09:31] <[Tux]> csv-ip5xs        2.563

[09:31] <[Tux]> test            12.805

[09:31] <[Tux]> test-t           4.178 - 4.271

[09:31] <[Tux]> csv-parser      12.647

[09:31] <[Tux]> samcv, you could still confirm your accepted talks please if you have a moment

[09:32] <samcv> confirm how [Tux]

[09:32] <[Tux]> on the website, go to your talk and press confirm :)

[09:32] <samcv> oh :p

[09:33] <[Tux]> I think you might have recieved two mails

[09:34] <samcv> can i change the length of one of my talks

[09:34] <samcv> i think i submitted a changed length

[09:35] <samcv> or maybe i should leave at 20 minutes idk. 30 minutes would be better

[09:35] <samcv> 20 minutes is probably fine

[09:36] <samcv> [Tux], let me know if i did what i was supposed to do

[09:36] <[Tux]> 30 is not available. Thanks. If I need more I know where to find you

[09:37] <[Tux]> 20, 45, 70

[09:49] <Geth> ¦ rakudo/nom: 4894a75d00 | (Elizabeth Mattijsen)++ | src/core/Map.pm

[09:49] <Geth> ¦ rakudo/nom: At least temporary fix for RT #131722

[09:49] <Geth> ¦ rakudo/nom:

[09:49] <Geth> ¦ rakudo/nom: But one wonders how <a b c> provides containers to begin with.  So

[09:49] <Geth> ¦ rakudo/nom: for the moment, this is at least a temporary fix.

[09:49] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131722

[09:49] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4894a75d00

[09:49] <lizmat> afk again&

[11:28] <timotimo> unexpected containers can definitely be trouble

[12:29] <[Tux]> samcv, do you like your two talks adjacent?

[13:11] <Zoffix> NeuralAnomaly: status

[13:11] <NeuralAnomaly> Zoffix, [✘] Next release will be in 5 days and 15 hours. Since last release, there are 21 new still-open tickets (0 unreviewed and 0 blockers) and 184 unreviewed commits. See http://perl6.fail/release/stats for details

[13:11] <Zoffix> buggable: 6.d

[13:11] <buggable> Zoffix, I think 6.d Diwali will be released in about 14 weeks, 2 days, 10 hours, 48 minutes, and 14 seconds

[13:22] <Zoffix> How to test what language is in use?

[13:22] <Zoffix> Both in Perl6/Grammar and in normler language, like src/core/Main.pm

[13:22] <Zoffix> What version I mean. 6.c or 6.d

[13:26] <nine> nqp::getcomp('perl6').language_version()

[13:28] <Zoffix> m: use nqp; nqp::getcomp('perl6').language_version().say

[13:28] <camelia> rakudo-moar 4894a7: OUTPUT: «6.c␤»

[13:29] <Zoffix> m: use v6.d.PREVIEW; use nqp; nqp::getcomp('perl6').language_version().say

[13:29] <camelia> rakudo-moar 4894a7: OUTPUT: «6.d␤»

[13:29] <Zoffix> Thanks

[13:37] <jnthn> m: say $*PERL.version # without nqp::op :)

[13:37] <camelia> rakudo-moar 4894a7: OUTPUT: «v6.c␤»

[13:47] <Zoffix> Hm. One of the 6.d items is "Remove Str.lines :$count parameter" But we can't really change methods, right?

[13:48] <Zoffix> And another one is "Remove dummy precision parameters from Rational/Int .Rat and .FatRat coercers"

[13:58] <jnthn> Yeah, the best we can really do is mark `is DEPRECATED` with a version to remove them in the future

[13:58] <yoleaux> 13:45Z <Zoffix> jnthn: you mentioned there were still work to be done for non-blocking await. Would you include approximate time required to complete it it? https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md#time-required-to-implement

[13:59] <Zoffix> OK

[14:06] <jnthn> On 6.d, I've decided that for the time being, I withdraw my comment from a few days back that I think we can start working towards 6.d with a loose target of ~3 months.

[14:07] <jnthn> After the exhuastion/burnout of the last time around, I figured we were in a place where it could happen with minimal stress/drama, so we could fully focus on shipping a high quality language release and conforming implementation. That the whole naming discussion being raised again has put paid to that, and frankly that this topic will be rehashed yet again has kinda trashed my motivation.

[14:08] <jnthn> I still think we can manage a 6.d by the end of the year, and non-blocking await is still something I want to complete in the coming months anyway.

[14:10] <nine> How about shipping a 6.c.1 just to reduce the pressure of people not being able to depend on minor (or not so minor) fixes like lexical module loading?

[14:10] <jnthn> nine: I'm fine with that happening.

[14:10] <Zoffix> 6.c.1 would still require reviewing the same 2000 roast commits 6.d would

[14:10] <jnthn> Though I still think we should review the test suite.

[14:11] <Zoffix> I think all that moving the deadline further back does is make us sit on our hands for that much longer before doing it all in ~3 months before the new date.

[14:14] <Zoffix> The branding discussion would involve a lot less stress and drama if people who are calling the shots would accept that rebranding is required. And if they think it isn't, then explain why so many people being subjected to ridicule of using "Perl" is justified by whatever secret plan for growth exist.

[14:15] <Zoffix> Many people made private comments to me. One that particular stood out was from a teacher who said they were made fun of studying Perl 6 and they're in a position to teach their students Perl 6, but won't because they don't want them to be subjected to the same.

[14:15] <Zoffix> 6.d is the perfect place to make a course correction.

[14:16] <Zoffix> Instead of having 50th same-old discussion, we can have the last one.

[14:18] <nine> Zoffix: those examples are worthless without comparing them to the instances of people who wouldn't consider Perl 6 if it weren't for the name Perl.

[14:22] <Zoffix> nine: how many teachers are teaching Perl 6? How many jobs hire Perl 6 programmers? I'm yet to hear anyone being ridiculed for using Go because it was not called Perl, so I'll say the equvalent numbers for the opposite point are 0

[14:24] <nine> Zoffix: I wouldn't be here for one.

[14:25] <mst> I think retaining the idea of it being *a* perl is well worth it

[14:25] <mst> but "camelia, the sixth perl larry designed" is potentially more useful than "perl 6"

[14:26] <mst> I mean, my ideal future would be for perl5 to be "pumpkin perl" and rakudo to be the compiler for "camelia perl" but whatever

[14:26] <Zoffix> nine: so you're nullified by the teacher. Who's got to stand in for the 30-100 students that could be using the language but won't?

[14:27] <mst> Zoffix: this is availability bias. on both sides.

[14:27] <Zoffix> nine: put a different way, since the current name *is* Perl 6, what you're arguing is the current state of affairs is great and we do not need to correct the course.

[14:27] <mst> no

[14:27] <mst> he's arguing "maybe your alternative course wouldn't actually turn out to be as big an improvement as you hope"

[14:27] <mst> not the same thing

[14:28] <mst> dude, if you're going to win this debate, and you're aware I'd kinda like that, you need to actually debate rather than strawmanning the other side and being a dick about it

[14:30] <nine> mst's interpretation of my argument is spot on. And that argument complements nicely with the KDE example for the difficulty of changing a name.

[14:30] <nine> The cost/benefit ratio is highly debatable, highly debated and very much unclear. That's a sucky basis for any decision.

[14:31] <nine> It's also a very emotional topic which unfortunately means that whatever the outcome, the cost will be even larger :/

[14:31] <mst> this is why my plan for perl5 was for it to end up as "Pumpkin Perl5"  (notice perl5 being one word) and then let humans' choice of language use decide it, rather than trying to force anything

[14:32] <mst> also, personally, I think "camelia" is an excellent name for the spec/language, but am totally understanding of other people not agreeing

[14:56] <Zoffix> After lizmat, I'd claim I was the most prolific Perl 6 blogger for the past two years. The non-Perl locations I posted my articles in always ended up mocking Perl. It wasn't a critique of techniques or features showed in the actual article, but comments about no one using Perl anymore and Perl being linenoise. The issue was so severe, I stopped posting to those locations for about half year. My proposal

[14:56] <Zoffix> involves prepending an extra name to "Perl 6", so I would presume people who would use it because it's "Perl" would still be reached. While the extra name would allow a baggage-free discussion with the audiences who are likely to not be receptive to a "Perl"

[15:09] <Zoffix> I wouldn't be here either if it weren't called Perl 6, but that's only because I was already using Perl 5. I saw it stagnating and people jumping ship. Modules being abandoned left right and center and depressing conversation on IRC about how Perl was dying.

[15:10] <Zoffix> Now, at Perl 6, the "dying" stigma follows. Except now it's not because of the technical issues but only because of branding issues.

[15:17] <Zoffix> You can't change people's perception by explaining Perl 6 is not at all like Perl. It doesn't sound authentic. You can't expect to placate people suffering abuse whenever they talk about the language that we're still winning because of elusive group of people who use Perl 6 because it's called Perl.

[15:17] <Zoffix> They'd just leave.

[15:22] <Zoffix> I currently plan to leave simply because Perl 6 doesn't give me any marketable skills. Even combining with Perl 5, there are exactly zero Perl jobs in my country ( https://jobs.perl.org/search?q=&location=Canada ). The world doesn't want Perl. Stop trying to convince it it wants Perl that's not really Perl.

[15:25] <llfourn> Zoffix: you have to do city, country

[15:25] <llfourn> https://jobs.perl.org/search?q=&location=Toronto%2C+Canada&offsite=

[15:27] <nine> Zoffix: we've stopped even mentioning Perl in our job postings, as we won't find Perl programmers anyway. The best way to find Perl programmers seems to be to teach Perl to programmers.

[15:29] <nine> Zoffix: what I absolutely agree with is that we have a marketing problem. I'm just not sure if the name is to blame. It would be nice to have Google's billions in our back like Go has. Those tend to make a difference. Having a product with a 100 million users like Mozilla certainly helps spread the word about Rust. And Swift is done by _the_ marketing company of this century.

[15:30] <Zoffix> llfourn: correction, there's exactly 1 job in my country https://jobs.perl.org/country/Canada and it's for Perl 5

[15:30] <nine> Incidentally I don't recall any other hot new languages of the past couple of years, though there certainly are very interesting ones.

[15:30] <nine> But those probably have not much more marketing resources than we do.

[15:32] <FROGGS> o/

[15:34] <Zoffix> Elixir and Julia

[15:35] <llfourn> Zoffix: glad we sorted that important point out!

[15:37] <llfourn> there's one in mine too on jobs.perl.org. But if you look on acutal job sites there are plenty mentioning perl experience as desirable.

[15:41] <jdv79> Zoffix: where are you leaving from/going to?

[15:43] <jdv79> in my latest job searching in nyc i'd concur Perl anything is a no-go

[15:43] <Zoffix> jdv79: anywhere where I can say "look at this awesome feature!" and the trolls go "that feature sucks" and not "perl 6 - welcome to the party! 20 years too late but hey." and proceed to show a piece of code from a different language ( https://www.reddit.com/r/programming/comments/6jzpyd/perl_6_seqs_drugs_and_rocknroll_part_2/dji747p/ )

[15:46] <jdv79> i wasn't aware python 3 won.  interesting.

[16:24] <moritz> python 2 has an EOL date (2020)

[16:24] <yoleaux> 13:46Z <Zoffix> moritz: You're listed as stakeholder for :D on sigils. When can you start working on that? Would you include approximate time required to complete it it?  https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md#time-required-to-implement-1

[16:24] <moritz> good question, need to look into it a bit more...

[16:24] <[Coke]> "this discussion would be easier if people would just accept that I'm right"

[16:24] <yoleaux> 13:10Z <Zoffix> [Coke]: what process did you use to review roast for inclusion to 6.c?

[16:24] <yoleaux> 13:17Z <Zoffix> [Coke]: what's the status of bootstrapped docs website? I don't see a branch in repo.

[16:26] <[Coke]> Zoffix: there was no time for process. it was "whatever test file was being run"

[16:27] <[Coke]> (and had at least one test being run)

[16:27] <[Coke]> this is one of the things that I think absolutely needs to be done for 6.d

[16:35] <Zoffix> [Coke]: OK, then what I'll be doing is going over each commit from start to finish. Looking for anythign suspicious that don't belong in the language. And if any more reviewers want to start reviewing then they could do the same.

[16:35] <Zoffix> Just need to figure out a system to make this easier.... GitHub's /compare/ doesn't seem to want to cooperate

[17:00] <b2gills> 6.c.1 could be based mostly on the errata branch

[17:01] <Zoffix> Then it'd be equivalent to 6.c, 6.c-errata *is* 6.c language

[17:03] <b2gills> 6.c.1 is a revision of 6.c, so it should be more similar to 6.c than to 6.d

[17:05] <[Coke]> which means a bunch of review about the diffs between 6.c & master to determine what to cherry pick. neh?

[17:06] <Zoffix> I don't wanna do any 6.c.1

[17:08] <Zoffix> I'm kinda surprised to be faces by naysayers now, considering last year people were trumpeting 6.d and I always said later. Now I'm told it's too soon, we can't do it because of branding issue popping up, and that we should do 6.c.1 :)

[17:08] <Zoffix> s/faces/faced/;

[17:08] <[Coke]> seems reasonable. regarding earlier discussion about delivery date of 6.d - I would recommend that we do at least the test review before scheduling a date for the language release and associated compiler work.

[17:09] <[Coke]> it's too soon because there's a lot of work to do.

[17:09] <Zoffix> I'm not seeing a lot of work.

[17:09] <Zoffix> What's missing in https://github.com/perl6/6.d-prep/tree/master/TODO ?

[17:09] <[Coke]> I think we could probably all agree "yes, getting 6.d out the door at some point is a great idea, now how can we do that." Starting with the date in a completely volunteer org is very often problematic.

[17:10] <b2gills> If we force it too much as we could lose another ShimmerFairy

[17:11] <[Coke]> Determine the "right" way to manage the roast spec. is it to only do the bare minimum we did as part of 6.c?

[17:11] <Zoffix> Starting with a date gives people who are expected to deliver a timeframe to work with. And if they feel they can't deliver on time, to speak up now

[17:11] <Zoffix> [Coke]: what do you mean by manage?

[17:13] <[Coke]> Zoffix: going to step away for a bit. finding myself getting very frustrated, would rather not have that impact the conversation. Will get back to you.

[17:15] <b2gills> I think if 6.c.1 was just errata plus a little, it would get us experience releasing specs. 6.c.2 could have more changes; plus some more experience. Then we might be better at releasing specs when we finally do 6.d

[17:17] <Zoffix> I think that's just extra work and feature dilution. By the time we get to finally releasing 6.d it won't have anything shiny in it.

[17:17] <b2gills> That is part of why I want 6.c.1 to be fairly minor

[17:57] <AlexDaniel> I don't get it… received an email but the comment is still not on RT

[17:57] <AlexDaniel> (9 hours ago)

[18:46] <[Coke]> samcv: https://github.com/perl6/doc/issues/1414 may be of interest to you. I'm trying to golf it down with little success at the moment.

[18:51] <Zoffix> [Coke]: what perl6 version do you have? I can't repro that on 2017.06-75-g8230112

[18:51] <Zoffix> m: say $*PERL.compiler.version

[18:51] <camelia> rakudo-moar 4894a7: OUTPUT: «v2017.06.181.g.4894.a.75.d.0␤»

[18:51] <[Coke]> 2017.06-180-g05c255c14

[18:53] <[Coke]> Mine is more recent, I think, and includes the proc async segv avoidance - on the gripping hand, this just exposes a previous bug that was hidden by the segv, I think.

[18:53] <[Coke]> (yes, I skipped the other hand.)

[18:58] <Zoffix> No issue on 2017.06-181-g4894a75 either

[19:44] <pmurias> Zoffix: how much of the people poking fun at Perl 6 at reddit/etc. have actually used Perl or are just repeating old lame jokes?

[19:45] <Zoffix> pmurias: I'd imagine vast majority haven't used it. "Perl" is just that to them. An old, dead language people make fun of. Same as people still peddle jokes about PHP despite latest version not sucking any more.

[19:46] <Zoffix> I wouldn't use Perl if I started programming today.

[19:47] <Zoffix> I started with Perl because I googled how to make a website and I got a Perl example.

[19:47] <Zoffix> Few people will give a thorough evaluation of all of Rakudo's features before deciding whether they should use it. It's a battle of perceptions, not products.

[19:48] <Zoffix> If the initial perception is "unreadable", "unused", and "unpopular", there's no point reading a 5,000 word article, trying to figure out if a described feature is useful to you.

[19:50] <Zoffix> I've not seen a single line of Elixir code, but in my mind it's perceived as an awesome language, because I've seen a bunch of excited people talk about it instead of a bunch of people trying to explain that a language that has the same name is not really the same language.

[19:51] <Zoffix> If it's not the same language, it wouldn't have the same name.

[19:52] <Zoffix> Hell, many people are not *capable* of evaluating an entire language on how good it is. They rely solely on opinions of others and if those opinions are "line noise from 20th century" that's what the people will use.

[19:53] <Zoffix> as an option. Despite, perhaps, never seeing a single line of code, just as my opinion of Elixir was formed

[19:53] <pmurias> the whole Erlang craze that Elixir orginated from seem extremely weird to me (Erlang being the most uncool language you can imagine)

[20:03] <Zoffix> Actually, google probably didn't exist back then. I probably yandex.ru'ed instead of googled.

[20:06] <nine> Sounds to me like what we're missing is some shiny, positive lighthouse use cases that create excitement. PHP had a couple of really nice, open web applications which pulled people in. Code was horrible, but they were user friendly.

[20:08] <Zoffix> The shiny, positive usecases are blocked by pre-existing perception of Perl

[20:08] <pmurias> what selling points for people who are not Perl 5ers do we have?

[20:09] <[Coke]> Zoffix: so, have you spoken to larry about the renaming yet?

[20:10] <[Coke]> er, sorry, Larry.

[20:10] <nine> hint: if you can't answer this question in seconds, you know what our major marketing problem is.

[20:10] <nine> pmurias' question that is

[20:12] <Zoffix> pmurias: Still working on that. First would be speed of writing code. Concise programming where you can produce readable code without boilerplate. Next would be Unicode support. Technologically it's a nobrainer because we are the leader, but I think it has a problem of convincing prospects they have a problem. It can be easily dismissed as "I only work for US company and don't care about Unicode", so I

[20:12] <Zoffix> think the #2 would be ease of concurency. Specifically, pushing parallelism up from. Go has "concurrency". We can have "parallelism". And lastly would be grammars and our special regex syntax. There's a ton of websites that attempt to make hacks to make regex redable. We made them readable right away

[20:12] <Zoffix> in core

[20:13] <Zoffix> [Coke]: so far I have 100% support from non-Perl 6 community. 50% support from Perl 6 community. And 0% support from core developers. I'm not sure this is a point where I'd speak to Larry yet.

[20:16] <pmurias> Zoffix: re "parallelism", our paralleism is sort of currently wasted by our slow execution speed, computing something on N threads sort of sucks if you can do it on 1 in say Rust

[20:17] <MasterDuke> somewhat idle curiosity here, but aside from timotimo, how many of the core devs didn't come from a Perl 5 background?

[20:22] <Zoffix> pmurias: doesn't matter. The goal is to lead in category. As I've said, marketing is a battle of perceptions, not products.

[20:26] <pmurias> Zoffix: It depends if we want to change the perception of Perl 6 or get people to start using it

[20:27] <Zoffix> We're a leader in parallel programming. Look, I can use all of my 24 cores with two words of code. Can you do it just as easily? Don't you feel silly you're sitting there hacking on just one core. The world moved on long time ago. It's time for you too.

[20:28] <Zoffix> pmurias: the two correlate. If people perceive Rakudo as modern leader in things instead of outdated linenoise from last century that's trying to catch up to modern languages, users would use it.

[20:30] <Zoffix> If Apple comes out with a laptop that's a 3rd of the price of their current offerings it would be a disaster. Owning an Apple product is perceived as prestigious. If I see your MacFlopWhatever, I can assume you paid way more than that product is worth. But if they make cheap laptops, that perception would vanish.

[20:33] <pmurias> food&

[20:34] <Zoffix> ... despite a possible naive assumption that making them cheaper would get more people buying them.

[20:34] * Zoffix & too

[20:41] <samcv> Zoffix, i have the matching brackets basically implemented in a branch of nqp

[20:41] <samcv> but i can update the page

[20:41] <samcv> thanks :)

[20:48] <pmurias> Zoffix: people need to have a use for something to use it rather than only a perception of coolness

[20:50] <Zoffix> Or a real life example of going the other way: Honda went up the market with Accura, not Honda, and was successful. GM tried to do the same with Cadillac, but didn't change brand and it bombed.

[20:50] <Zoffix> pmurias: they're programmers. They do have a use.

[20:50] <Zoffix> pmurias: it's not perception of coolness. It's perception that you're using the leader.

[20:50] <Zoffix> You're using the best you can get.

[20:51] <Zoffix> Or more specifically in our case. It's a perseption of using outmoded and outdated product that I want to get rid of.

[20:51] <Zoffix> Try asking people to use a flip phone.

[20:52] <Zoffix> How many actually need a smartphone and could get along with a flip phone? Tons. I know I would. But I wouldn't be caught dead with one. It's what tech unsavvy old people use.

[20:52] <Zoffix> ZofBot: Perl is the flip phone of programming languages.

[20:52] <ZofBot> Zoffix, com/rakudo/rakudo/blob/e1c086b7a75115864238536415834efdaf064828/src/core/IO/Spec/Win32

[20:53] <Zoffix> I'm gonna reset your brain!

[20:53] <pmurias> is that the perception you get when talking with real life people?

[20:56] <Zoffix> Are there fake life people?

[20:57] <pmurias> I don't feel like for example reddit is a good source for getting the general perception of stuff

[20:57] <geekosaur> any message board / irc / whatever. echo chamber effect, you get not what most people think but the loudest opinionated mouths

[20:58] <pmurias> (as it reddit seems to have a huge amount of bottom of the barrel idiots commenting)

[20:59] <Zoffix> Ah. It's not just reddit. Hackernews. Twitter. Perl Mongers meetings where they just nod and you see they'll never use it.

[20:59] <Zoffix> I can also quote several of the private messages I received after posting the article

[20:59] <Zoffix> "I told the story before -- but at a cross-language meetup I did a talk 2 years ago on this new cool language "Rakudo". I even modified the binary name, but didn't go so far as to modify all of the errors :) . It was a great discussion about language features and capabilities without any distraction by the history."

[20:59] <pmurias> Zoffix: marketing Perl 6 as Rakudo is not something I'm opposed to and it may as well be a good idea

[21:00] <Zoffix> "i'm in a possition to teach intro to programming for multimedia artists and i want to use perl6. for my students sake, i'd rather not say the word perl, at least until later."

[21:00] <Zoffix> "of course, part of me loves that the new language derives from the old and has a similar spirit and creators. it just sucks that we have this 'perl is dead' hate out there. Rakudo Perl 6 is good. good luck!"

[21:02] <geekosaur> yes, yes, you're right, 100% of what is wrong is the name Perl is 1000% toxic and must DIE DIE DIE just like all the naysayers desperately want it to.

[21:02] <vendethiel> geekosaur: :|

[21:02] <vendethiel> not sure why you react like that

[21:02] <geekosaur> you need help killing it even more?

[21:02] <pmurias> I'm just not convinced that if the branding is changed from a feeling of vague oldness and deadness people will start using Perl 6 more

[21:02] <vendethiel> gave a very small lightning talk today, and the look on people's face when i said perl was "ugh"

[21:02] <geekosaur> want to lead the Anti-Perl Army?

[21:03] <geekosaur> yes, offix, I *get* your message. and I think it's doubly defective

[21:03] <geekosaur> it will not work and it will cause harm

[21:04] <geekosaur> so yes, lets absolutely rush ahead and di it, because in 2017 that's "what everyone does", and as you have based your argument on "what everyone does"...

[21:04] <Zoffix> pmurias: no, that alone won't change it. It's not a magic elixir. Right now trying to market Rakudo has a leadweight attached to it with people getting triggered by "Perl". Rebranding will merely detach that weight. We'd still need to do all the normal work, except we won't be held down by all that baggage that applies to a different language, not us.

[21:04] <vendethiel> pmurias: wrt Elixir, if I may... you might underestimate the "ruby syntax" factor+being done by a rails core member

[21:05] <vendethiel> and offered as a solution to everheard "rails no scale"

[21:05] <Zoffix> geekosaur: why it would cause harm?

[21:06] <geekosaur> because supporting "PERL IS (and must be) DEAD" is not a good thing to do

[21:06] <samcv> ^

[21:06] <geekosaur> but it is what you are doing, regardless of whether you believe it or not

[21:06] <Zoffix> I want to lead Rakudo army. Or whatever non-impl name TimToady comes up with. I don't care about Perl. It has little to do with product I'm developing.

[21:07] <pmurias> the Perl 5 coders are IMHO a very important audience for Perl 6

[21:07] <Zoffix> In fact, with "Perl 6" out of the picture, that leads Perl 5 folks to release Perl 7. The renassance of Perl. The REAL Perl.

[21:08] <samcv> though most people i talk to have no clue perl 6 and perl 5 are not the same language and are not based on the same codebase

[21:09] <robertle> there are, to me at least, massive cultural similarities...

[21:09] <geekosaur> which has been adding stuff from perl6 for the past how many releases? yes, completely unrelated, cut the cord and let the onld one die out

[21:09] <robertle> which may be more important than anything technical

[21:09] <geekosaur> they should not be adding features from our baby obviously

[21:09] <geekosaur> *your baby

[21:09] <Zoffix> What the fuck are you even talking about?

[21:10] <geekosaur> nothing you would accept since you consider the two languages completely unrelated when in fact both have been evolving together and taking things from each other

[21:10] <Zoffix> "The change is beneficial to both languages. Here's how Perl 5 can play their cards"  "they should not be adding features from your baby"

[21:10] <geekosaur> forget i said it since it doesn;t fit your narrative and therefore didn't happen

[21:11] <Zoffix> The taking or what am I supposed to forget?

[21:11] <geekosaur> sigh

[21:11] <geekosaur> are you mirroring the alt-right for a reason?

[21:11] <Zoffix> We tried "sister language" thing for 2 years. Would you say it's working?

[21:13] <geekosaur> communicating with you certainly isn't working

[21:13] <geekosaur> I'm done

[21:13] <Zoffix> ¯\_(ツ)_/¯

[21:14] <geekosaur> you know the truth, you will push the truth, you don't accept counterarguments because they do not match the truth

[21:14] <geekosaur> therefore, yes, the truth the truth all the truth

[21:14] <geekosaur> onward to your glory

[21:15] <Zoffix> geekosaur: I asked you a question to modify my understanding of truth, if it's inaccurate. Just a few lines above you a person is saying there's confusion that perl 5 and perl 6 aren't the same language among people. That corroborates my idea of the truth that sister language thing isn't working. I invited you to present facts for the opposing point of view.

[21:16] <geekosaur> I presented one, you promptly became confused as to what it had to do with anything

[21:16] <pmurias> Zoffix: the sister language things is working well for stopping Perl 5/6 conflict

[21:16] <geekosaur> this proves to me that you know the truth and anything contradicting is obviously not the truth(tm)

[21:17] <Zoffix> pmurias: if that's the goal, tweaking the name would do even more.

[21:17] <geekosaur> it also proves to me there is no point in talking to you because you know the truth(tm)

[21:17] <Zoffix> geekosaur: it was hard to follow the "must DIE DIE DIE" arguments.

[21:18] <nine> If you want to improve our marketing by 200 %, start posting release announements to lwn.net.

[21:18] <geekosaur> as hard as it is to follow your "must RENAME RENAME RENAME" arguments?

[21:18] <geekosaur> again I am done

[21:18] <geekosaur> do what you and your truth(tm) ordain, it is written.

[21:18] <Zoffix> geekosaur: both languages are influenced by each other, sure. That doesn't make them quite the same. Nor do they have the same strengths.

[21:18] <geekosaur> because cunter arguments are not the truth(tm)

[21:18] <geekosaur> *counter

[21:19] <nine> Ifyou want to reach a real technical audience that will listen and that has an actual say in what companies do, write technical articles and submit them as guest articles to lwn.net

[21:19] <nine> E.g. about concurrency in a dynamic language without a GIL.

[21:20] <pmurias> Zoffix: the counter argument is that if we drop the Perl from the name it can be interpreted by people as claiming that Perl is something that we need to distanance ourself from or that is dead

[21:20] <nine> Right now every single fart let in the Python community gets broad coverage with in a highly valuable audience numbering > 10K people.

[21:21] <nine> We get nothing despite having actual solutions of the problems, they are just discussing. Why? Because we are on no ones radar? Why? Because _we_ don't put us there.

[21:22] <Zoffix> pmurias: that's not a counter argument to the original proposal that wants to tweak the name that still has "Perl 6" in it, but also has another word in it that can be used

[21:22] <nine> And why? Because for a decade we have trained to downplay ourselves. Underpromise and overdeliver is excellent advise when looking like vapour ware. But not anymore when you have actually delivered.

[21:23] <nine> But we still don't dare to be loud and proud. Maybe because we still have a lot of catching up to do in performance. Maybe for other reasons.

[21:23] <pmurias> Zoffix: does anyone even need any official decision to start calling Perl 6 "Rakudo Perl 6"?

[21:23] <Zoffix> I was loud and proud and people told me I'm late to the party.

[21:24] <nine> Zoffix: to which audience? I haven't read anything on lwn.net

[21:25] <Zoffix> nine: all my current articles are "how to" articles that lwn.net says they don't want.

[21:25] <nine> And yes, for anyone getting the suspicion: I do consider lwn.net pretty much the only game left in town for quality journalism on free software. And quality journalism attracts a quality audience.

[21:27] <nine> Zoffix: well they are a news site. We haven't given them any news. Releasing language versions would be a no brainer to publish. Even rakudo versions would be fine and would be a nice opportunity to add some scalability benchmark values.

[21:27] <nine> Rakudo 2017.08 released - scales almost linearily up to 16 threads on XYZ benchmark

[21:28] <nine> Actually and ironically it should read "Rakudo Perl 6 2017.08 released - scales almost linearily up to 16 threads on XYZ benchmark"

[21:29] <nine> That would draw attention for sure.

[21:29] <nine> 2017.9 released - beats Perl 5 in reading a million lines despite perfect Unicode support

[21:29] <Zoffix> pmurias: I think that's pretty much the *only* name that can be "hijacked" if the people who are calling the shots ignore this discussion. That was my original assumption of how things would unfold. It's not an ideal name because: (a) it uses a name of impl. (b) it still got "Perl" in it. So there are two steps of improvements: choose a non-"Rakudo" name to prepend and "remove Perl" entirely. I think the

[21:29] <Zoffix> first point can be easily accomplished by TimToady picking an extra name to prepend and saing It Is So. The second one, I don't think there's enough public support for even TimToady to make that call.

[21:30] <Zoffix> I would be pretty happy with the first option: "SomethingOrOther Perl 6"

[21:31] <Zoffix> nine: OK. I'll try to think up a good news article.

[21:31] <nine> Right now if I were lwn.net and wanted to report about things in the Perl 6 community, I'd cover...a heated discussion about a name change and if Perl is dead. Now that will attract a lot of... well no one :(

[21:32] <pmurias> Zoffix: we could invent name to describe our "official"/"default" flavor of Perl 6

[21:32] <pmurias> s/name/a name/

[21:33] <nine> Zoffix: being the first to support Unicode 9 would be news. I'm sure samcv++ knows more about how we're ahead of the crowd there.

[21:33] <Zoffix> pmurias: yeah, but without TimToady's support it's unlikely to take. "Rakudo" might, because people already use it.

[21:34] * Zoffix re-focuses to just want to preprend another name to "Perl 6"

[21:35] <samcv> "Another-Name Perl 6"

[21:35] <Zoffix> nine: yeah, but I no nothing about Unicode. It's the wrong area for me to write about.

[21:36] <Zoffix> *know

[21:36] <Zoffix> samcv should do it :)

[21:36] <samcv> :O uh

[21:36] <samcv> where should i write it

[21:36] <Zoffix> samcv: https://lwn.net/op/AuthorGuide.lwn

[21:36] <Zoffix> Damn, they're using .lwn extensions :o

[21:36] <Zoffix> so l337. Why didn't I think of that

[21:38] <samcv> hmm ok so write about unicode

[21:38] <Zoffix> :)

[21:38] <samcv> i can do that. will need to think what to write

[21:38] <Zoffix> cool. samcv++

[21:51] <samcv> ok so i'm going to speed up string regex more now

[21:51] <samcv> before i bump moarvm. but i need to decide on when i want to turn the needle into a 32 bit string when searching a 32 bit haystack

[21:51] <samcv> the speed boost can be huge especially when you have to do indexing many times

[21:53] <samcv> maybe if the haystack is like at least 30x bigger than the needle?

[21:53] <samcv> or maybe i want to go by the number of graphemes of the needle.

[21:59] <MasterDuke> samcv: how much/when is it slower to convert always?

[22:03] <samcv> i thought it was 50% faster to do it with both as 32bit strings

[22:04] <samcv> so basically $nt time to traverse needle $Ht time to traverse Haystack. when you convert you have to traverse the needle

[22:04] <samcv> and time to search through the haystack is basically based on Haystack length

[22:05] <pmurias> isn't this something it would be easier to benchmark then reason about?

[22:05] <samcv> $H * 0.7 + $n <=> $H

[22:06] <samcv> so i think we only care about haystack length being long enough for the call to not take too much time

[22:07] <samcv> err

[22:07] <samcv> no wait. ok so basically as you see above that's an approximation

[22:08] <samcv> i think i'm going to use that to decide. based on the haystack length and needle length

[22:08] <jnthn> Maybe worth noting that there's plenty of cases where we're looking for a bale in the haystack rather than a needle

[22:08] <samcv> yeah

[22:08] <jnthn> Heh, that sounds like where you're going

[22:08] <samcv> in that case it won't convert

[22:08] <samcv> yep

[22:08] <jnthn> One immediate one is things like <[$@%&]>

[22:08] <b2gills> There is nothing wrong with marketing Rakudo separately from Perl 6, the same way clang is from C

[22:08] <jnthn> Which just says "is this grapheme anywhere in there"

[22:09] <samcv> so it basically assums that if it converts then it's as if the Haystack is shorter. and then factors in whether we save time

[22:10] <samcv> based on the needle length since it has to traverse the needle in addition to the search

[22:10] <jnthn> *nod*

[22:10] <jnthn> Yeah, an adaptive approach is reasonable

[22:10] <samcv> so that sounds good and is close to my experimental cases where i found the difference in speed between the two

[22:10] <samcv> and works pretty well in the numbers i've plugged in. better than just throwing in some boundary

[22:11] <jnthn> If the different approaches are callable individually, we can even play tricks like picking the right one at JIT time when we know the lengths up front :)

[22:13] <samcv> heh

[22:13] <samcv> that would be neat

[22:13] <jnthn> Specialize all the things! :)

[22:13] <Geth> ¦ rakudo/nom: 4c91b5220d | (Elizabeth Mattijsen)++ | src/core/set_symmetric_difference.pm

[22:13] <Geth> ¦ rakudo/nom: Remove faulty Iterable (^) Iterable candidate

[22:13] <Geth> ¦ rakudo/nom:

[22:13] <Geth> ¦ rakudo/nom: - the right hand side did not correctly check for Pairs

[22:13] <Geth> ¦ rakudo/nom: - since the left side was basically just converted to a Set

[22:13] <Geth> ¦ rakudo/nom: - the quick fix to have this handled by the Any (^) Any candidate

[22:13] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4c91b5220d

[22:14] <jnthn> btw, mentioned it on #moarvm on Friday, but to note here: I'm off on a short vacation tomorrow morning, so probably won't be on IRC again until Wednesday or so.

[22:14] <jnthn> Just in case anyone wonders where I am. :P

[22:16] <nine> jnthn: enjoy!

[22:17] <MasterDuke> nine, jnthn, samcv: since you're all here (and i think it'll be a quick review), how does https://github.com/MoarVM/MoarVM/pull/590 look?

[22:18] <b2gills> Anything that keeps jnthn from burning out is good with me. Just don't be like me last week where I came home with a sunburn.

[22:18] <MasterDuke> but it's no high priority, so feel free to ignore if busy

[22:18] <Geth> ¦ rakudo/nom: 0cdd6c2535 | (Elizabeth Mattijsen)++ | src/core/set_symmetric_difference.pm

[22:18] <Geth> ¦ rakudo/nom: Make [(^)] Set, Set, Set about 35x times faster

[22:18] <Geth> ¦ rakudo/nom:

[22:18] <Geth> ¦ rakudo/nom: - based on 1000 elem Set with itself

[22:18] <Geth> ¦ rakudo/nom: - also fixes generic handling of [(^)] Any, Any, Any

[22:18] <Geth> ¦ rakudo/nom: - allows for any mix of QuantHash, Iterable, Mappy or Any types

[22:18] <Geth> ¦ rakudo/nom: - Mixy/Baggy are considered contagious and cause an upgrade

[22:18] <Geth> ¦ rakudo/nom: - note that [(^)] $q, $q, $q is *NOT* the same as $q (^) $q (^) $q

[22:18] <Geth> ¦ rakudo/nom: - the latter diffs with previous results, causing flapping behaviour

[22:18] <Geth> ¦ rakudo/nom: - this causes failure on 2 spectests that assume they *are* the same

[22:18] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0cdd6c2535

[22:19] <lizmat> .tell ab5tract my solution to [(^)] : https://github.com/rakudo/rakudo/commit/0cdd6c2535

[22:19] <yoleaux> lizmat: I'll pass your message to ab5tract.

[22:20] <jnthn> b2gills: The latest forecast I saw is thunderstorms and rain, so at least I should be safe on that front.

[22:20] <jnthn> Alas, when you plan a trip 2 months ahead you get what you're given with the weather :)

[22:21] <samcv> MasterDuke, looks good to me :)

[22:21] <jnthn> MasterDuke: Hmm, I wonder if MAX_GRAPHEMES constant needs to be marked explicitly as a long

[22:21] <samcv> it's c preprocessor though

[22:23] <jnthn> Yeah, I mean like we do at https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6bigint.h#L5

[22:23] <jnthn> Pretty sure the LL is there because things went bad when it wasn't

[22:23] <MasterDuke> easy change

[22:24] <jnthn> It's tiny tweaks, but I'd also suggest that the first error message in there is capitalized like the second one is

[22:25] <jnthn> (And nearly all others are)

[22:25] <jnthn> Other than that, +1

[22:27] <MasterDuke> just pushed another commit

[22:29] <samcv> oh no. got an oops

[22:29] <samcv> why did it request a synthetic when i decided to convert my string to 32bit...

[22:29] <MasterDuke> ugh, wait, think format string types are off

[22:29] <jnthn> samcv: Maybe a signed/unsigned fail

[22:29] <MasterDuke> why didn't i get those warnings before?

[22:30] <samcv> maybe

[22:30] <jnthn> That's what the ASCII thing was fwiw :)

[22:31] <samcv> and why does it oops except when i run it in lldb

[22:31] <samcv> where it doesn't oops

[22:32] <samcv> and ends with a different error

[22:32] <samcv> ahhhh

[22:34] <jnthn> Smells like corruption :)

[22:36] <samcv> ok. if i remove the MVM_free at the bottom of turn_8bit_to_32bit()

[22:37] <samcv> then i get the same error as if i run in gdb

[22:39] <jnthn> Wait, are you trying to mutate a string in-place?

[22:40] <jnthn> If so...no can do :)

[22:40] <jnthn> They're immutable and that's heavily relied upon

[22:40] <samcv> heh. ok what should i do

[22:40] <MasterDuke> ok, format strings fixed

[22:40] <jnthn> Is this just for a single operation?

[22:40] <samcv> that's what it does for 32bit to 8

[22:41] <samcv> it mallocs a new blob

[22:41] <jnthn> And then mutates the MVMString?

[22:41] <samcv> https://github.com/MoarVM/MoarVM/blob/master/src/strings/ops.c#L49-L60

[22:41] <samcv> this is what 32bit-to-8bit does

[22:42] <jnthn> omg

[22:42] <jnthn> That is SEGV land

[22:42] <jnthn> We used to have an op that did in-place flattening of ropes

[22:42] <samcv> so is the current function bad too?

[22:42] <jnthn> Yes.

[22:42] <samcv> :)

[22:42] <jnthn> The right way is to allocate a new MVMString :)

[22:43] <jnthn> Though if you're just in C land already then you don't need to wrap it up in one I guess

[22:43] <jnthn> But it's widely assumed in numerous places that strings are immutable

[22:43] <samcv> so can i allocate a new string and set the old one to that?

[22:43] <samcv> like in collapse_strands

[22:44] <dogbert17> jnthn: the bug described in RT #129882, wasn't it exactly this you fixed recently?

[22:44] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=129882

[22:44] <jnthn> collapse_strands is working on a string that was never shared with the world or producing a new one, iirc

[22:44] <jnthn> dogbert17: yes :)

[22:45] <jnthn> What's the context in which this is called?

[22:46] <jnthn> The rule is that a string, once created and shared with userland code, can never be safely mutated.

[22:46] <samcv> for indexing

[22:46] <samcv> so i guess i could just not mutate it and just only change the data for that one operation

[22:46] <samcv> that works i guess

[22:46] <jnthn> Yeah

[22:47] <dogbert17> then I'll close it :)

[22:47] <jnthn> Just change it for that operation, keep it as a C buffer most probably, and free it after. If you know that it's small, you could allocate the memory using the fixed size allocator also

[22:52] <jnthn> Sleep time; 'night o/

[23:03] <dogbert17> Zoffix: still awake?

[23:03] <Zoffix> Yeah

[23:03] <samcv> jnthn, the thing with not permanently changing the string is that then you have to reconvert it every index operation

[23:03] <Zoffix> Playing No Man's Sky

[23:04] <samcv> every. time.

[23:04] <dogbert17> wasn't that one of the most overhyped games ever?

[23:06] <dogbert17> wondering if we can close RT #128718 considering that redo isn't allowed in that construct

[23:06] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=128718

[23:08] <Zoffix> m: react { whenever supply { emit 42; redo } { .say } }

[23:08] <camelia> rakudo-moar 0cdd6c: OUTPUT: «42␤===SORRY!===␤redo without loop construct␤»

[23:08] <Zoffix> dogbert17: yeah, I guess. I don't know why we can't redo, considering you can do 'next'

[23:09] <dogbert17> trying to clean up the RT queue a bit

[23:10] <Zoffix> dogbert17: it was hyped yeah and a lot of people were disappointed.

[23:11] <dogbert17> perhaps patches have improved things

[23:11] <Zoffix> I clocked 45 hours at its release, so I say I got my money back. Now they made a new update that supposed to make it even better. Playing on my first planet now and it looks awesome; wonder if that's the update or they just deliberately made first planet you play on awesome.

[23:12] <Zoffix> I think they can get great improvement by voicing all the alients. It's just a weird feel to play a game where no one talks. You have to read everything, even when aliens talking to you.

[23:13] <dogbert17> interesting, did they ever fix multiplayer?

[23:17] <dogbert17> rejected the issue

[23:18] <Zoffix> no idea

[23:19] <Zoffix> It's also overpriced. $60 is a joke. $30, $35 max

[23:51] <BenGoldberg> m: role R {}; constant c = R[ :() ];

[23:51] <camelia> rakudo-moar 0cdd6c: OUTPUT: «===SORRY!===␤QAST::Block with cuid 3 has not appeared␤»

[23:53] <samcv> well ok this is not working. going to try another way to make index operations faster when the two types don't match
