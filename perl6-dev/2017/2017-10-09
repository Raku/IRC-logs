[04:09] <Geth> ¦ roast: 919a2ddde6 | (Daniel Green)++ | S02-types/native.t

[04:09] <Geth> ¦ roast: Add test for RT #127973

[04:09] <Geth> ¦ roast:

[04:09] <Geth> ¦ roast: Native strings can be as large as regular strings.

[04:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/919a2ddde6

[04:09] <synopsebot> RT#127973 [open]: https://rt.perl.org/Ticket/Display.html?id=127973 [BUG] native strings not allowed to be as big as regular strings

[04:32] <buggable> New CPAN upload: v0.1.30.tar.gz by UGEXE https://cpan.metacpan.org/authors/id/U/UG/UGEXE/Perl6/v0.1.30.tar.gz

[05:04] <Zoffix> "Stage parse      : 101.480"

[05:04] * Zoffix weeps

[05:52] <Zoffix> "Stage parse      :  74.669"

[05:52] * Zoffix unweeps :)

[06:03] <bartolin> .

[06:03] <yoleaux> 8 Oct 2017 17:47Z <jnthn> bartolin: https://github.com/perl6/nqp/blob/master/src/vm/moar/QAST/QASTOperationsMAST.nqp#L2895 is how it's defined on Moar, so 1 means evaluate to argument 1 (zero-based)

[06:06] <bartolin> jnthn: thanks! so (if i don't misunderstand) it would be ok to change the op to return $RT_INT (since we call nqp::killprocasync with an Int as the second argument). i'll take another look later today.

[06:13] <Zoffix> m: use Test; my ($a, $b); $b = 'b'; :(:$a) := $b; is $a, 'b', 'can bind to single pair';

[06:13] <camelia> rakudo-moar 12fcec: OUTPUT: «not ok 1 - can bind to single pair␤# Failed test 'can bind to single pair'␤# at <tmp> line 1␤# expected: 'b'␤#      got: (Mu)␤»

[06:14] <Zoffix> This throws X::Cannot::Capture with my patch... It's a TODOed test.

[06:16] <Zoffix> m: use Test; my ($a, $b); $b = 'b'; :(:$a) := \(:a($b)); is $a, 'b', 'can bind to single pair';

[06:16] <camelia> rakudo-moar 12fcec: OUTPUT: «ok 1 - can bind to single pair␤»

[06:17] <Zoffix> I'm calling bullshit on it. Even if Capture would not throw and return the self, it'd throw "too many positionals" error. And it's a TODO 'cause Str.Capture returns an empty Capture, so $a ends up as Mu

[06:22] <Geth> ¦ roast: 4bf399347c | (Zoffix Znet)++ | S06-other/pairs-as-lvalues.t

[06:22] <Geth> ¦ roast: Fix and unfudge incorrect Pair binding test

[06:22] <Geth> ¦ roast:

[06:22] <Geth> ¦ roast: The current version attempts to bind a Str variable to a Signature

[06:22] <Geth> ¦ roast: with one named arg in it. The test is fudged, as :$a gets a Mu

[06:22] <Geth> ¦ roast: value instead of $b's value, and it doesn't outright die only

[06:22] <Geth> ¦ roast: because Str.Capture returns an empty capture.

[06:22] <Geth> ¦ roast:

[06:22] <Geth> ¦ roast: Fix by binding a proper Capture, with $b passed as a named :a arg.

[06:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4bf399347c

[06:23] <Geth> ¦ roast: 3cbeaea94d | (Zoffix Znet)++ | S06-other/pairs-as-lvalues.t

[06:23] <Geth> ¦ roast: Actually remove the fudge

[06:23] <Geth> ¦ roast:

[06:23] <Geth> ¦ roast: Part of https://github.com/perl6/roast/commit/4bf399347c

[06:23] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3cbeaea94d

[06:25] <Zoffix> oh damn, it fails now >_< I thought I did run it

[06:26] <Zoffix> I suck

[06:27] <Geth> ¦ roast: 0a6daaac25 | (Zoffix Znet)++ | S06-other/pairs-as-lvalues.t

[06:27] <Geth> ¦ roast: Fix the bind test

[06:27] <Geth> ¦ roast:

[06:27] <Geth> ¦ roast: Part of fix described in https://github.com/perl6/roast/commit/4bf399347c

[06:27] <Geth> ¦ roast:

[06:27] <Geth> ¦ roast: If actual binding is expected, the $a needs to be is raw.

[06:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0a6daaac25

[06:30] <Geth> ¦ roast/6.c-errata: 6c6385a162 | (Zoffix Znet)++ | S06-other/pairs-as-lvalues.t

[06:30] <Geth> ¦ roast/6.c-errata: Fix and unfudge incorrect Pair binding test

[06:30] <Geth> ¦ roast/6.c-errata:

[06:30] <Geth> ¦ roast/6.c-errata: The current version attempts to bind a Str variable to a Signature

[06:30] <Geth> ¦ roast/6.c-errata: with one named arg in it. The test is fudged, as :$a gets a Mu

[06:30] <Geth> ¦ roast/6.c-errata: value instead of $b's value, and it doesn't outright die only

[06:30] <Geth> ¦ roast/6.c-errata: because Str.Capture returns an empty capture. In addition, if

[06:30] <Geth> ¦ roast/6.c-errata: actual bind is wanted, the :$a needs to be received raw.

[06:30] <Geth> ¦ roast/6.c-errata:

[06:30] <Geth> ¦ roast/6.c-errata: Fix by binding a proper Capture, with $b passed as a named :a arg.

[06:30] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/6c6385a162

[06:50] <[Tux]> This is Rakudo version 2017.09-350-g12fcece49 built on MoarVM version 2017.09.1-576-g64b5dc03

[06:50] <[Tux]> csv-ip5xs        1.247 -  1.352

[06:50] <[Tux]> test            10.373 - 10.969

[06:50] <[Tux]> test-t           3.199 -  3.292

[06:50] <[Tux]> csv-parser       0.944 -  1.006

[06:50] <Zoffix> Gonna add Signature.ACCEPTS: Mu $topic that does self.ACCEPTS: $topic.Capture

[06:51] <Zoffix> Gonna add Signature.ACCEPTS: Mu $topic that does (try self.ACCEPTS: $topic.Capture) || False

[06:52] <Geth> ¦ rakudo/nom: 4ba12ff17c | (Zoffix Znet)++ | src/core/Exception.pm

[06:52] <Geth> ¦ rakudo/nom: Implement X::Cannot::Capture

[06:52] <Geth> ¦ rakudo/nom:

[06:52] <Geth> ¦ rakudo/nom: To be thrown from .Capture methods of certain types

[06:52] <Geth> ¦ rakudo/nom: per https://irclog.perlgeek.de/perl6/2017-03-07#i_14221839

[06:52] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4ba12ff17c

[06:52] <[Tux]> This is Rakudo version 2017.09-350-g12fcece49 built on MoarVM version 2017.09.1-576-g64b5dc03

[06:52] <[Tux]> csv-ip5xs        1.244 -  1.256

[06:52] <[Tux]> test             9.988 - 10.312

[06:52] <[Tux]> test-t           3.161 -  3.173

[06:52] <[Tux]> csv-parser       0.861 -  0.878

[06:52] <[Tux]> (second double run)

[06:53] <[Tux]> looking good

[06:53] <Geth> ¦ rakudo/nom: bad9fefdd7 | (Zoffix Znet)++ | 8 files

[06:53] <Geth> ¦ rakudo/nom: Make .Capture of certain core types throw

[06:53] <Geth> ¦ rakudo/nom:

[06:53] <Geth> ¦ rakudo/nom: To avoid supersticious, performance-reducing parens;

[06:53] <Geth> ¦ rakudo/nom: e.g. -> ($x) {} where -> $x {} was meant.

[06:53] <Geth> ¦ rakudo/nom:

[06:53] <Geth> ¦ rakudo/nom: Discussion: https://irclog.perlgeek.de/perl6/2017-03-07#i_14221839

[06:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bad9fefdd7

[06:53] <Zoffix> buggable: speed 100

[06:53] <buggable> Zoffix, ▄▄▅▃▄▄↑▅▅▅▅↑▇↑▆▄▅▅▅▆▄▅▄▄▅▇▆▅↑↑▅▅▅▅▄▄▄▅▄▄▄▄▅▄▄▆▄▄▃▄▄▄▄▄▅▅▄▅▄▃▆↑█▆▃▂▁▂▂▁▂▂▂▂▃▅▂▃▂▃▆▂▁▁▁▂▂▂▂▂▃▂▂▂▃▃▁▃▁▁ dates: 2017-09-05–2017-10-09; range: 3.154s–4.237s; speed: 10% faster

[06:53] <Zoffix> \o/

[07:03] <Zoffix> ZOFFLOP: t/spec/integration/precompiled.t

[07:04] <Geth> ¦ rakudo/nom: 1ea3297b21 | (Zoffix Znet)++ | src/core/Range.pm

[07:04] <Geth> ¦ rakudo/nom: Block out Mu.new from Range

[07:04] <Geth> ¦ rakudo/nom:

[07:04] <Geth> ¦ rakudo/nom: To avoid throwing incorrect error that Range.new takes only

[07:04] <Geth> ¦ rakudo/nom: named args

[07:04] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1ea3297b21

[07:07] <Geth> ¦ roast: 6ac1f272f4 | (Zoffix Znet)++ | S02-types/range.t

[07:07] <Geth> ¦ roast: Test Range.new with wrong args

[07:07] <Geth> ¦ roast:

[07:07] <Geth> ¦ roast: Does not claim it takes only named args

[07:07] <Geth> ¦ roast:

[07:07] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/1ea3297b21

[07:07] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6ac1f272f4

[07:41] <lizmat> Files=1227, Tests=75620, 343 wallclock secs (14.66 usr  5.17 sys + 2413.72 cusr 208.00 csys = 2641.55 CPU)

[07:41] <yoleaux> 8 Oct 2017 17:43Z <jnthn> lizmat: iirc NQP uses some codes that aren't used in Rakudo, and Rakudo supported them for that reason. I think you asked me about them a while back 'cus you were considering removing them from Mu.BUILDALL.

[07:41] <yoleaux> 8 Oct 2017 17:44Z <jnthn> lizmat: If you changed the meanings of the integers and didn't align NQP too then it's possible something coulda broken.

[07:41] <yoleaux> 8 Oct 2017 17:48Z <jnthn> lizmat: auto-generating BUILD_LEAST_DERIVED would make mixins cheaper; note it's only worth doing for mixin types, but I think you have that information available to you in method compose, or via some .is_mixin method or some such. Can't remember off the top of my head, but I'm sure it's available. So I'd only generate them in that case, not for all classes where it'd be useless

[08:14] <jnthn> bartolin: Yes, fine to change that. Thanks for working on it. :-)

[08:25] <Zoffix> m: say 'x'.match(/./).^mro

[08:25] <camelia> rakudo-moar 1ea329: OUTPUT: «((Match) (Capture) (Cool) (Any) (Mu))␤»

[08:25] <Zoffix> TIL a Match is a Capture :o

[08:37] <Zoffix> Weird...

[08:37] <Zoffix> m: -> (Str() $a, Str() :$b) { say [$a, $b] }('abc'.match(/(.) $<b>=. ./))

[08:37] <camelia> rakudo-moar 1ea329: OUTPUT: «Cannot find method 'gist': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»

[08:37] <Zoffix> m: -> ($a, :$b) { say [$a.Str, $b.Str] }('abc'.match(/(.) $<b>=. ./))

[08:37] <camelia> rakudo-moar 1ea329: OUTPUT: «[a b]␤»

[08:37] <Zoffix> m: -> ($a, :$b) { say [$a.^name, $b.^name] }('abc'.match(/(.) $<b>=. ./))

[08:37] <camelia> rakudo-moar 1ea329: OUTPUT: «[Match Match]␤»

[08:38] <Zoffix> Looks like signature's Str() coercer results in a different value

[08:54] <Zoffix> m: use Test; is-deeply set(42, <70>).Capture, \("42" => True, "70" => True)

[08:54] <camelia> rakudo-moar 1ea329: OUTPUT: «not ok 1 - ␤# Failed test at <tmp> line 1␤# expected: \("42" => Bool::True, "70" => Bool::True)␤#      got: \("42" => Bool::True, "70" => Bool::True)␤»

[08:54] <Zoffix> Expected and Got are the same... wtf

[08:57] <Zoffix> m: dd (\("42" => True, "70" => True)).Capture::hash

[08:57] <camelia> rakudo-moar 1ea329: OUTPUT: «Map.new(())␤»

[08:57] <Zoffix> Hm, these end up as positionals :\

[09:00] <Zoffix> Ah, OK, it's meant to.

[09:11] <Zoffix> ZOFLOP: t/spec/S17-procasync/kill.t

[09:11] <Zoffix> ZOFVM: Files=1277, Tests=152640, 150 wallclock secs (20.83 usr  3.28 sys + 3264.45 cusr 169.26 csys = 3457.82 CPU)

[09:18] <Geth> ¦ roast: ca273503b6 | (Zoffix Znet)++ | S02-types/capture.t

[09:18] <Geth> ¦ roast: Spec .Capture on core types

[09:18] <Geth> ¦ roast:

[09:18] <Geth> ¦ roast: Discussions:

[09:18] <Geth> ¦ roast: https://irclog.perlgeek.de/perl6/2017-03-07#i_14221839

[09:18] <Geth> ¦ roast: https://irclog.perlgeek.de/perl6-dev/2017-10-08#i_15275349

[09:18] <Geth> ¦ roast: https://irclog.perlgeek.de/perl6-dev/2017-10-08#i_15274676

[09:18] <Geth> ¦ roast: https://irclog.perlgeek.de/perl6-dev/2017-05-24#i_14629113

[09:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ca273503b6

[09:19] <Geth> ¦ rakudo/nom: cd5864cfc1 | (Zoffix Znet)++ | 5 files

[09:19] <Geth> ¦ rakudo/nom: Implement .Capture on types per spec

[09:19] <Geth> ¦ rakudo/nom:

[09:19] <Geth> ¦ rakudo/nom: Spec: https://github.com/perl6/roast/commit/ca273503b6

[09:19] <Geth> ¦ rakudo/nom:

[09:19] <Geth> ¦ rakudo/nom: Discussions:

[09:19] <Geth> ¦ rakudo/nom: https://irclog.perlgeek.de/perl6/2017-03-07#i_14221839

[09:19] <Geth> ¦ rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2017-10-08#i_15275349

[09:19] <Geth> ¦ rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2017-10-08#i_15274676

[09:19] <Geth> ¦ rakudo/nom: https://irclog.perlgeek.de/perl6-dev/2017-05-24#i_14629113

[09:19] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cd5864cfc1

[09:40] <Zoffix> So... caller's language version. A var like $/ to store it in sounds good for it?   This stuff's a bit over my head, but I'd like to get 6.d moving

[09:44] <Zoffix> Actually, I'm not 100% sure why $*PERL.version has to be wrong.

[09:54] <Zoffix> ZOFFLOP: t/spec/S17-promise/stress.t

[10:17] <stmuk> m: use v6.d.PREVIEW; say $*PERL.version;

[10:17] <camelia> rakudo-moar cd5864: OUTPUT: «v6.d␤»

[10:19] <Zoffix> Looks like t/spec/S17-channel/stress.t hung altogether now.

[10:19] <Zoffix> Oh maybe it finished... Pressing CTRL+C didn't react right away, but when it was done it said all tests pass, with ridiculous runtime Files=1277, Tests=152645, 741 wallclock secs (21.19 usr  3.45 sys + 4085.28 cusr 179.47 csys = 4289.39 CPU)

[10:20] <stmuk> m: use v6.c; { use v6.d.PREVIEW }; say $*PERL.version;

[10:20] <camelia> rakudo-moar cd5864: OUTPUT: «v6.d␤»

[10:22] <Zoffix> That will throw. You can only specify one language version per comp unit

[10:22] <Zoffix> But $*PERL.version still ain't working right when modules and precompilation is involved. https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md#need-a-way-to-know-callers-language

[10:24] <Geth> ¦ rakudo/nom: 27131ed8d1 | (Zoffix Znet)++ | src/core/Signature.pm

[10:24] <Geth> ¦ rakudo/nom: Make Signature.ACCEPTS coerce args to Capture

[10:24] <Geth> ¦ rakudo/nom:

[10:24] <Geth> ¦ rakudo/nom: - Instead of relying to Any.ACCEPTS to always give False

[10:24] <Geth> ¦ rakudo/nom: - We already did do this for Positional and Associative arguments

[10:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/27131ed8d1

[10:25] <Geth> ¦ roast: 48d5d39e2b | (Zoffix Znet)++ | S03-smartmatch/capture-signature.t

[10:25] <Geth> ¦ roast: Spec Signature.ACCEPTS with non-Signature/Capture args

[10:25] <Geth> ¦ roast:

[10:25] <Geth> ¦ roast: Rakudo impl: https://github.com/rakudo/rakudo/commit/27131ed8d1

[10:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/48d5d39e2b

[11:46] <Geth> ¦ roast: 064707a320 | (Zoffix Znet)++ | S32-num/expmod.t

[11:46] <Geth> ¦ roast: Add .expmod with negative power tests

[11:46] <Geth> ¦ roast:

[11:46] <Geth> ¦ roast: RT#130713: https://rt.perl.org/Ticket/Display.html?id=130713

[11:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/064707a320

[11:46] <synopsebot> RT#130713 [open]: https://rt.perl.org/Ticket/Display.html?id=130713 42.expmod(-1,1) hangs

[11:53] * Zoffix observes that writing a test while fixing a bug takes a lot less time than writing one for a fix that happened awhile back. While fixing you know what the cause it, so you can cover that cause right away.

[11:53] <Zoffix> buggable: tag testneeded

[11:53] <buggable> Zoffix, There are 55 tickets tagged with TESTNEEDED; See http://fail.rakudo.party/t/TESTNEEDED for details

[11:53] <Zoffix> I'm surprised so many tickets are left over... I was sure they'd go like hot cakes during squashathon

[12:00] <Geth> ¦ rakudo/nom: 56eef6967b | (Elizabeth Mattijsen)++ | 2 files

[12:00] <Geth> ¦ rakudo/nom: Fix for RT #132249

[12:00] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/56eef6967b

[12:01] <synopsebot> RT#132249 [new]: https://rt.perl.org/Ticket/Display.html?id=132249 [LTA] use lib ‘’ spills guts (use lib ‘’)

[12:15] <ggoebel> zoffix: have you added https://fail.rakudo.party/t/TESTNEEDED to hacktoberfest?

[13:51] <jnthn> Just build HEAD and t/02-rakudo-repl.t is very faily

[13:54] <jnthn> *built

[14:48] <MasterDuke_> anyone mind merging https://github.com/rakudo/rakudo/pull/1184 ?

[14:49] <Geth> ¦ rakudo/nom: 16c2a15767 | (Daniel Green)++ | src/Perl6/Grammar.nqp

[14:49] <Geth> ¦ rakudo/nom: Use cached line numbers for token label

[14:49] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/16c2a15767

[14:49] <Geth> ¦ rakudo/nom: f28875f109 | (Jonathan Worthington)++ (committed using GitHub Web editor) | src/Perl6/Grammar.nqp

[14:49] <Geth> ¦ rakudo/nom: Merge pull request #1184 from MasterDuke17/use_cached_line_numbers_for_token_label

[14:49] <Geth> ¦ rakudo/nom:

[14:49] <Geth> ¦ rakudo/nom: Use cached line numbers for token label

[14:49] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f28875f109

[14:49] <jnthn> Looks sensible enough to me :)

[14:49] <MasterDuke_> jnthn: thanks

[14:58] <ugexe> that test is failing regularly on windows now as well

[14:59] <ugexe> all windows failures started on the full-make-test merge, so maybe that is the cause of it elsewhere too

[15:00] <ugexe> oh those tests probably werent run before at all

[15:15] <Geth> ¦ nqp/master: 4 commits pushed by pmurias++

[15:15] <Geth> ¦ nqp/master: 16fff80593 | [js] Throw when unboxing an bigint that doesn't fit in 64bits

[15:15] <Geth> ¦ nqp/master: b94eb1e15a | Test that converting huge bignums to ints throws exceptions

[15:15] <Geth> ¦ nqp/master: 69261edf2d | [js] Fix nqp::setdimensions return value

[15:15] <Geth> ¦ nqp/master: 6b4207bd4f | Test nqp::setdimensions return value

[15:15] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/943f7f757c...6b4207bd4f

[15:31] <travis-ci> NQP build failed. pmurias 'Test nqp::setdimensions return value'

[15:31] <travis-ci> https://travis-ci.org/perl6/nqp/builds/285636737 https://github.com/perl6/nqp/compare/943f7f757c9b...6b4207bd4fc4

[15:39] <Zoffix> jnthn: "faily" means what? You always see it fail or does it flop?

[15:40] <jnthn> Zoffix: Fails some of its tests, reliably.

[15:40] <jnthn> Seems like the same ones

[15:41] <Zoffix> jnthn: can you pastebin the output?

[15:42] <jnthn> Zoffix: https://gist.github.com/jnthn/f0bab3cce7efa467a9de8eb7ee4fdeed

[15:42] <Zoffix> Thanks.

[15:42] <jnthn> I guess if you're asking, you ain't seeing them?

[15:43] <Zoffix> jnthn: nope. And on my box, the stuff REPL is fed with isn't part of the tested output, while on your box it is.

[15:44] <jnthn> Odd

[15:44] <Zoffix> jnthn: what OS is that?

[15:44] <jnthn> Linux. Ubuntu 16.04

[15:44] <jnthn> So, about as boring as possible. :)

[15:45] <Zoffix> I'm Bodhi Linux, based off Ubuntu 14.04

[15:45] <jnthn> fwiw, the repl seems to function correctly if I enter it

[15:45] <Zoffix> jnthn: do you Readline/Lineoise installed?

[15:45] <jnthn> Hmm

[15:46] <jnthn> `use Readline` works

[15:46] <jnthn> So seems I have that one

[15:46] <jnthn> `use Linenoise` doesn't

[15:46] * Zoffix tries installing it

[15:46] <jnthn> Though I should check if that's what the module is called

[15:47] <jnthn> Yeah, it is. So, just Readline

[15:47] <jnthn> And I don't get the text suggesting that I install Readline

[15:47] <jnthn> Which I guess suggests it's being used

[15:55] <gfldex> zoffix++ # for closing my tickets

[15:56] <ugexe> multi sub is-run-repl isn't closing handles fwiw... maybe thats why windows is failing that test

[15:56] <ugexe> can't test atm

[16:01] <Geth> ¦ rakudo/nom: 1ce3a36df4 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[16:01] <Geth> ¦ rakudo/nom: Implement :$line-editor option

[16:01] <Geth> ¦ rakudo/nom:

[16:01] <Geth> ¦ rakudo/nom: - Sets REPL_LINE_EDITOR for duration of the test

[16:01] <Geth> ¦ rakudo/nom: - Default to `none`, which prevents spurious failures for

[16:01] <Geth> ¦ rakudo/nom: users who have one of the recommended line editors installed.

[16:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1ce3a36df4

[16:01] <Geth> ¦ rakudo/nom: 973f88dc65 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[16:01] <Geth> ¦ rakudo/nom: Document is-run-repl sets ERROR_COLOR option

[16:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/973f88dc65

[16:04] <Geth> ¦ rakudo/nom: 484f987259 | (Zoffix Znet)++ | t/packages/Test/Helpers.pm6

[16:04] <Geth> ¦ rakudo/nom: Close pipes in is-run-repl; ugexe++

[16:04] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/484f987259

[16:08] * Zoffix backlogs #perl6 a bit

[16:08] <jnthn> Zoffix: That looks to have helped, nice :)

[16:08] <Zoffix> lizmat: dam. looks like all the Cool method that take and pass a Capture are uber slower

[16:08] <Zoffix> m: .contains: 'meow' for ^10000_00; say now - INIT now

[16:08] <camelia> rakudo-moar f28875: OUTPUT: «11.0881977␤»

[16:08] <Zoffix> m: .Str.contains: 'meow' for ^10000_00; say now - INIT now

[16:08] <camelia> rakudo-moar f28875: OUTPUT: «0.6811970␤»

[16:09] <Zoffix> And there's lots of them

[16:09] <lizmat> yeah, if you look at the profile

[16:09] <Zoffix> m: say 11/.68

[16:09] <camelia> rakudo-moar f28875: OUTPUT: «16.176471␤»

[16:09] <lizmat> you'll see that it cannot cache the method lookup

[16:09] <Zoffix> :(

[16:11] <lizmat> Routine.find_best_dispatchee being called all the time

[16:11] <lizmat> taking 30% of time

[16:12] <lizmat> which also implies that the proto for Str.contains gets hammered, which takes another 30%

[16:13] <lizmat> which then selects Cool.contains, taking another 15% of time

[16:13] <lizmat> to the actual workhorse, which takes 7% of time (and which somehow isn't jitted)

[16:14] <jnthn> Yeah, flattening things is not yet well optimized.

[16:14] <jnthn> I've been pondering how we might handle those a bit better down in the VM, so the benefit of both multi cache and spesh

[16:14] <jnthn> *for the benefit

[16:15] <lizmat> jnthn: can it be that a multi-candidate doesn't get jitted because its proto doesn't get jitted ?

[16:16] <jdv79> yup.  600M isnt enough mem to build.  OOMed

[16:16] <jnthn> lizmat: No, they'd be independent, and often protos never get jitted

[16:16] <lizmat> ah ok

[16:16] <jnthn> 'cus they get bypassed entirely by a cache lookup

[16:16] <Zoffix> jdv79: you need ~1.2GB

[16:16] <jdv79> hopefully 1.5G will be enough

[16:16] <jnthn> So the call is directly into the candidate

[16:17] <jdv79> ok.  itll just take all day since 1G of that is on a SD card

[16:17] <jnthn> But the cache doesn't handle flattening

[16:18] <lizmat> another weird thing: in that example I also see "add_to_cache" being called 1M times

[16:18] <lizmat> you would think that once is enough ?

[16:19] <jnthn> It'd be better named try_add_to_cache :)

[16:19] <jnthn> If there's flattening then it won't actually add it

[16:21] <jnthn> fwiw, I'm doing a bit of work on hyper/race this week. Locally for now, will hopefully land something in the repo by the end of the week

[16:22] <MasterDuke_> very cool

[16:25] <gfldex> jnthn: that is very welcome because I already got a blog post title and the title tends to be the hard part.

[16:25] <jnthn> :P

[16:26] <jnthn> Trick will be not getting distracted debugging something else

[16:26] <jnthn> :)

[16:26] <jnthn> Anyways, home/dinner time now, I think :)

[16:34] <Zoffix> At least some of the failures of t/02-rakudo/repl.t on windows is 'cause $*OUT.tell always returns 0

[17:02] <buggable> New CPAN upload: App-Mi6-0.0.6.tar.gz by SKAJI https://cpan.metacpan.org/authors/id/S/SK/SKAJI/Perl6/App-Mi6-0.0.6.tar.gz

[17:23] <jdv79> Stage parse      : 3731.644 :)

[17:26] <Zoffix> :)

[17:29] <MasterDuke_> that handily beats my ~2400 with a debugging, unoptimized moarvm in valgrind

[17:30] <timotimo> i have received a rather confusing comment on the weekly blog today o_O

[17:31] <timotimo> in the moderation queue

[17:32] <MasterDuke> oh?

[17:33] <Zoffix> What was it?

[17:34] <timotimo> about keys for hashes

[17:34] <timotimo> i'll let it go up on the site, though i can't help but feel it's the wrong place for the question?

[17:34] <timotimo> i think it went onto the weekly blog's comment section because it linked to the thread "Tip: assign a value to a hash using a variable as a key" on the users list

[17:34] <timotimo> (because the comment explicitly references it)

[17:34] <MasterDuke> forward to the mailing list?

[17:35] <Zoffix> Well... I was wondering how long it'd take: "No more Texas operators? Political correctness infected Perl 6, too? Sad!"

[17:35] <timotimo> i can't take any person seriously who ends their comments in "Sad!"

[17:38] <gfldex> i'm tempted to feed the troll :->

[17:39] * Zoffix wouldn't

[17:40] <timotimo> i'd prefer no troll feeding on the weekly blog comments section

[17:40] <Zoffix> Let them feel sad that no one read their comment :)

[17:42] <buggable> New CPAN upload: App-Mi6-0.0.7.tar.gz by SKAJI https://cpan.metacpan.org/authors/id/S/SK/SKAJI/Perl6/App-Mi6-0.0.7.tar.gz

[17:43] <gfldex> timotimo: you are feeding that troll by proving him with a platform. Esp. as he got nothing else to say.

[17:44] <timotimo> well, it was let through and now it'd seem rather petty to delete it after-the-fact

[17:44] <Zoffix> toss it :)

[17:45] <[Coke]> it's your site, you can be a little petty

[17:45] <gfldex> being able to change your mind when presented with more arguments is no sign of weekness

[17:46] <gfldex> m: sub strong(**@arguments){ say ‚I'm Strong!‘ }; strong(|(1..∞));

[17:47] <gfldex> ok, I was wrong :D

[17:47] <camelia> rakudo-moar 484f98: OUTPUT: «(timeout)»

[17:48] <Zoffix> m: sub strong(**@arguments){ say ‚I'm Strong!‘ }; strong(1..∞);

[17:48] <camelia> rakudo-moar 484f98: OUTPUT: «I'm Strong!␤»

[17:48] <gfldex> that's just one argument, even though it is quite a big one

[17:51] <gfldex> m: sub strong(*@arguments){ say ‚I'm Strong!‘ }; strong(|(1..∞));

[17:51] <gfldex> that leaves the question if a slurpy should explode a Slip

[17:51] <camelia> rakudo-moar 484f98: OUTPUT: «(timeout)»

[17:52] <timotimo> [Coke]: fwiw, i'd say it's liz' site by now :)

[17:52] <Zoffix> It likely hangs before it gets to any slurpies

[17:52] <Zoffix> m: (1..∞).FLATTENABLE_LIST

[17:52] <camelia> rakudo-moar 484f98: OUTPUT: «(timeout)»

[18:51] <Geth> ¦ nqp: 0b6fa59726 | pmurias++ | src/vm/js/nqp-runtime/reprs.js

[18:51] <Geth> ¦ nqp: [js] Treat a non primitive type to multidim arrays as an object

[18:51] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/0b6fa59726

[18:51] <Geth> ¦ nqp: 01429c3c15 | pmurias++ | src/vm/js/nqp-runtime/reprs.js

[18:51] <Geth> ¦ nqp: [js] Make nqp::atposnd return null when there is a missing element

[18:51] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/01429c3c15

[18:52] <Geth> ¦ nqp: ce60c2bf38 | pmurias++ | t/nqp/102-multidim.t

[18:52] <Geth> ¦ nqp: Fix test count

[18:52] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/ce60c2bf38

[18:52] <Geth> ¦ nqp: faa67169a3 | pmurias++ | t/nqp/094-clone.t

[18:52] <Geth> ¦ nqp: More multidim tests

[18:52] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/faa67169a3

[18:55] <AlexDaniel_> .tell jnthn you told me to ping you later, so here it is. Plz give Zoffix or me more privileges for Rakudo and MoarVM repos so that we can manage webhooks. Alternatively, go and remove webhooks to 94.23.219.181

[18:55] <yoleaux> AlexDaniel_: I'll pass your message to jnthn.

[18:56] <jnthn> Ah, something my tired brane might actually usefull be able to do tonight...

[18:56] <yoleaux> 18:55Z <AlexDaniel_> jnthn: you told me to ping you later, so here it is. Plz give Zoffix or me more privileges for Rakudo and MoarVM repos so that we can manage webhooks. Alternatively, go and remove webhooks to 94.23.219.181

[19:05] <travis-ci> NQP build failed. pmurias '[js] Make nqp::atposnd return null when there is a missing element'

[19:05] <travis-ci> https://travis-ci.org/perl6/nqp/builds/285733487 https://github.com/perl6/nqp/compare/6b4207bd4fc4...01429c3c1566

[19:06] <jnthn> AlexDaniel_: I've tried it for the MoarVM repo (so you and zoffix should have invites for that); let me know if you can get to the webhooks page

[19:06] <jnthn> (Also, I removed the one you meneionted since I was there anyway)

[19:06] <jnthn> Provided I got it right I'll do the same for the Rakudo one :)

[19:06] <Zoffix> Joined in, but no webhook access

[19:07] <AlexDaniel_> same

[19:07] <jnthn> d'oh

[19:07] <jnthn> try again now?

[19:08] <AlexDaniel_> that works

[19:08] <jnthn> \o/

[19:09] <jnthn> And should have it for Rakudo too :)

[19:09] <Zoffix> jnthn++

[19:09] <Zoffix> jnthn: that also gave me commit bit to MoarVM. What's the policy for merging/committing stuff?

[19:10] <jnthn> Yeah, you'll both have quite a few extra perms as a result of this...

[19:10] <jnthn> For MoarVM - typo fixes and other stuff nobody could argue with, just push/merge

[19:11] <AlexDaniel_> mhm github allows more refined control of privileges for access tokens, but that's per user

[19:13] <jnthn> For more serious changes, I'd start out with PR-ing things. It's C, with a GC running around, and a missed MVMROOT for MVM_ASSIGN_REF can means hours of frustrating bug hunt later...

[19:13] <jnthn> s/for/or/

[19:13] <Zoffix> OK. I'll then merge https://github.com/MoarVM/MoarVM/pull/723 once Travis/Appveyor clear it

[19:14] <92AAB6NK0> NQP build failed. pmurias 'More multidim tests'

[19:14] <92AAB6NK0> https://travis-ci.org/perl6/nqp/builds/285733646 https://github.com/perl6/nqp/compare/01429c3c1566...faa67169a349

[19:14] <AlexDaniel_> uh… that was a very interesting nickname

[19:17] <jnthn> Zoffix: Yeah, that looks fine

[19:20] * jnthn bbiab

[19:25] <Geth> ¦ roast: 63950b4b52 | (Zoffix Znet)++ | S32-io/tell.t

[19:25] <Geth> ¦ roast: Test .tell on TTY handles gives faked out values

[19:25] <Geth> ¦ roast:

[19:25] <Geth> ¦ roast: RT#132254: https://rt.perl.org/Ticket/Display.html?id=132254

[19:25] <Geth> ¦ roast: MoarVM fix: https://github.com/MoarVM/MoarVM/pull/723

[19:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/63950b4b52

[19:25] <synopsebot> RT#132254 [new]: https://rt.perl.org/Ticket/Display.html?id=132254 [WIN32] $*OUT.tell always gives 0

[20:46] <AlexDaniel_> unicodable6: hug

[20:46] <unicodable6> AlexDaniel_, U+0F19 TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS [Mn] ( ༙)

[20:46] <unicodable6> AlexDaniel_, U+D6C5 Hangul Syllable HUG [Lo] (훅)

[20:46] <unicodable6> AlexDaniel_, 5 characters in total: https://gist.github.com/e3393fdfded96991d9b330b9e697d4b4

[20:48] <lizmat> and another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/10/09/2017-41-the-case-for-empathy/

[20:49] <Zoffix> woooo

[20:52] <AlexDaniel_> lizmat: have you seen https://irclog.perlgeek.de/perl6/2017-10-08#i_15275712 ?

[20:54] <Zoffix> lizmat++ good weekly

[20:55] <bartolin> yes, very much lizmat++

[20:57] <AlexDaniel_> cool weekly. lizmat++

[20:58] <AlexDaniel_> lizmat: “More than 250 commits” did you mean 150?

[20:59] <AlexDaniel_> also, maybe it's worth not mentioning it given that Zoffix++ doubled that number unintentionally

[20:59] <teatime> haha

[21:00] <Zoffix> (if you're going in to mend the weekly, there's an unclosed paren after `(such as @a[3..*]`  )

[21:01] <lizmat> AlexDaniel_ : oops, my math skills need some tuning  :-)

[21:02] <lizmat> AlexDaniel_ Zoffix fixed and fixed  :-)

[21:03] <AlexDaniel_> lizmat: the actual number is 110

[21:04] <AlexDaniel_> so over 100 is fair to say I guess :)

[21:04] <lizmat> well, I just did a git describe on the last commit of last Monday, and the one now

[21:04] <AlexDaniel_> lizmat: (it's because of commits like this: https://github.com/rakudo/rakudo/commit/1e747e01f880ed9626b417d166361bf763759972 )

[21:04] <lizmat> and the difference is more than 150

[21:05] <AlexDaniel_> yeah but 40 commits show up twice… once normal and once rebased :S

[21:05] <lizmat> AlexDaniel_: lalala I can't hear you  :)

[21:05] <AlexDaniel_> :D

[21:06] <lizmat> (fixed  :-)

[21:06] * lizmat steps away from the keyboard for a bit

[21:06] <bartolin> hmm, we have SIGHUP as the default for method kill: https://github.com/rakudo/rakudo/blob/484f987259bd8b1bbb356780f1a0315ae9d327e3/src/core/Proc/Async.pm#L409

[21:07] <bartolin> wouldn't it make more sense to use SIGTERM there?

[21:08] <AlexDaniel_> bartolin: have you tried sending SIGTERM to a process group?

[21:09] <bartolin> AlexDaniel_: no, i didn't. i didn't think about a process group until now :-)

[21:09] <AlexDaniel_> bartolin: what happens sometimes is that the PID you're sending it too exits, but everything else stays alive

[21:10] <AlexDaniel_> so in theory we'd want to have something like, errr, -SIGTERM

[21:10] <AlexDaniel_> or better some named argument to do the same

[21:11] <AlexDaniel_> bartolin: but so far I don't even think that we have a ticket for that :S

[21:11] * bartolin is trying to implement nqp::killprocasync for the jvm backend and the provided way to kill a started process there is destroy (what calls SIGTERM under the hood). https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html#destroy--

[21:23] <bartolin> i googled a bit (no experiments, yet), but didn't see specific advices against sending SIGTERM to a process group. however, SIGHUP looks a bit surprising to me

[21:24] <AlexDaniel_> it's not that it's bad or anything, it's just that in some cases it won't kill much

[21:27] <bartolin> yes, and also both the command and the shell 'kill' builtin default to SIGTERM afaik

[21:28] <bartolin> at least there are not tests in roast wrt SIGHUP

[22:13] <ugexe> i wonder if its related to windows not generating sigterm

[22:15] <teatime> does windows do signals at all

[22:15] <ugexe> http://docs.libuv.org/en/v1.x/signal.html

[22:16] <ugexe> the first part is "here is how windows is handled"

[22:25] <jnthn> lizmat++ # weekly :)

[22:59] <Geth> ¦ nqp: a65dbe0c77 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[22:59] <Geth> ¦ nqp: Bump MoarVM

[22:59] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a65dbe0c77

[22:59] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.09.1-575-gd4e230a...2017.09.1-580-g631b3bf

[22:59] <Geth> ¦ rakudo/nom: e11f4ea266 | (Zoffix Znet)++ | tools/build/NQP_REVISION

[22:59] <Geth> ¦ rakudo/nom: Bump NQP

[22:59] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e11f4ea266

[22:59] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.09-66-g943f7f7...2017.09-75-ga65dbe0

[23:11] <Zoffix> ZOFVM: Files=1277, Tests=152647, 150 wallclock secs (21.11 usr  3.34 sys + 3248.13 cusr 169.64 csys = 3442.22 CPU)

[23:14] <travis-ci> NQP build failed. Zoffix Znet 'Bump MoarVM'

[23:14] <travis-ci> https://travis-ci.org/perl6/nqp/builds/285823905 https://github.com/perl6/nqp/compare/faa67169a349...a65dbe0c7775

[23:52] <timotimo> jnthn: i think cro-http would be a good candidate to get a HTTP tag in its meta info
