[07:10] <[Tux]> This is Rakudo version 2017.01-56-g0ad05ce31 built on MoarVM version 2017.01-14-g357438a9

[07:10] <[Tux]> csv-ip5xs        2.904

[07:11] <[Tux]> test            12.219

[07:11] <[Tux]> test-t           5.124

[07:11] <[Tux]> csv-parser      14.096

[07:32] <lizmat> Files=1167, Tests=56234, 184 wallclock secs (11.02 usr  4.47 sys + 1098.61 cusr 109.93 csys = 1224.03 CPU)

[08:52] <lizmat> m: dd (1,2,3).invert  # testing++

[08:52] <camelia> rakudo-moar 0ad05c: OUTPUT«Type check failed in binding to listelem; expected Pair but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[10:18] <btyler> re https://github.com/rakudo/rakudo/pull/1004 -- wooo! awesome, time to play :)

[11:56] <brokenchicken> So rakudo reached 1000th PR (Issues are closed, so these were all PRs). Though the 1000th PR is kinda trivial: https://github.com/rakudo/rakudo/pull/1000 :)

[11:57] <brokenchicken> Happy KiloPR Everybody!

[11:58] <moritz> brokenchicken: on the other hand, 1004 (iirc) is quite impressive

[12:04] <timotimo> aye, 1004

[12:11] <DrForr> Time to rebuild :)

[12:26] <Geth> roast: d13b966d41 | (Elizabeth Mattijsen)++ | S32-list/iterator.t

[12:26] <Geth> roast: Add some basic List iterator tests

[12:26] <Geth> roast: review: https://github.com/perl6/roast/commit/d13b966d41

[12:33] <Geth> rakudo/nom: ef2dd6319e | (Elizabeth Mattijsen)++ | src/core/Map.pm

[12:33] <Geth> rakudo/nom: Let Map.keys make use of R:It.Mappy-keys

[12:33] <Geth> rakudo/nom:

[12:33] <Geth> rakudo/nom: No performance effects expected, just concentrating similar code in

[12:33] <Geth> rakudo/nom: the same place.

[12:33] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ef2dd6319e

[12:33] <Geth> rakudo/nom: d06d7c16b3 | (Elizabeth Mattijsen)++ | t/spectest.data

[12:33] <Geth> rakudo/nom: Run the List.iterator tests

[12:33] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d06d7c16b3

[12:34] <lizmat> afk&

[12:51] <timotimo> recent consolidation work with iterators and such might cause the size of our core setting to go down. we can check that out as soon as the whateverable server has built the newest commits

[12:58] <pmurias> Do I assume correctly that rakudo only from the continuation ops rakudo only uses nqp::continuationcontrol and nqp::continuationreset?

[13:00] <jnthn> pmurias: PR 1004 adds a use of continuationinvoke

[13:01] <jnthn> pmurias: continuationclone has been removed not so long ago

[13:01] <jnthn> So that leaves just 3

[16:12] <jdv79> what is the signifi

[16:12] <jdv79> cance of continuations in moar?

[16:18] <jnthn> jdv79: Used to implement gather/take, and soon also to make await non-blocking.

[16:18] <TimToady> they let you suspend and resume, basically; we don't (any longer) support multiple resumes of the same continuation, aiui

[16:23] <jdv79> i thought maybe there was a reduction or some other important effort regarding them from the way pmurias was asking.  ok.

[17:17] <Geth> nqp: 15fa0abfea | (Pawel Murias)++ | 5 files

[17:17] <Geth> nqp: [js] Implement coroutines on node.js using the node-fibers module.

[17:17] <Geth> nqp: review: https://github.com/perl6/nqp/commit/15fa0abfea

[17:17] <Geth> nqp: 64f1482f16 | (Pawel Murias)++ | src/vm/js/nqp-runtime/reprs.js

[17:17] <Geth> nqp: [js] Make nqp::join unbox the arguments in the array.

[17:17] <Geth> nqp:

[17:17] <Geth> nqp: This makes it work with the Perl 6 Str.

[17:17] <Geth> nqp: review: https://github.com/perl6/nqp/commit/64f1482f16

[17:39] <gfldex> m: say v6 cmp v6.c

[17:39] <camelia> rakudo-moar d06d7c: OUTPUT«More␤»

[17:46] <b2gills> bisect: 1 <= *.chars <= 4

[17:46] <bisectable6> b2gills, Bisecting by output (old=2015.12 new=d06d7c1) because on both starting points the exit code is 1

[17:46] <bisectable6> b2gills, bisect log: https://gist.github.com/a4d84ca6221912941d62c3d9abbc772a

[17:46] <bisectable6> b2gills, (2015-12-25) https://github.com/rakudo/rakudo/commit/07fecb52eb1fd07397659f19a5cf36dc61f84053

[17:47] <b2gills> m: 1 <= *.chars <= 4 # I guess this hasn't worked since sometime before v6.c ( if it ever worked )

[17:47] <camelia> rakudo-moar d06d7c: OUTPUT«===SORRY!===␤QAST::Block with cuid 1 has not appeared␤»

[17:49] <brokenchicken> Is it meant ot make a closure of comparing stuff?

[17:50] <brokenchicken> m: (1 <= *.chars <= 4)("mew").say

[17:50] <camelia> rakudo-moar d06d7c: OUTPUT«===SORRY!===␤QAST::Block with cuid 1 has not appeared␤»

[17:50] <brokenchicken> m: ({1 <= .chars <= 4})("mew").say

[17:50] <camelia> rakudo-moar d06d7c: OUTPUT«True␤»

[17:50] <brokenchicken> c: 2015.04 (1 <= *.chars <= 4)("mew").say

[17:50] <committable6> brokenchicken, ¦«2015.04»: ===SORRY!===␤QAST::Block with cuid cuid_1_1485453056.71074 has not appeared «exit code = 1»

[17:50] <brokenchicken> c: 2015.01 (1 <= *.chars <= 4)("mew").say

[17:50] <committable6> brokenchicken, ¦«2015.01»: Cannot call 'Real'; none of these signatures match:␤:(Mu:U \v: *%_)␤  in method Real at src/gen/m-CORE.setting:4236␤  in sub infix:<<=> at src/gen/m-CORE.setting:4750␤  in block <unit> at /tmp/LEzzTjQLMS:1␤ «exit code = 1»

[17:50] <brokenchicken> heh

[17:51] <brokenchicken> c: 2014.12 (1 <= *.chars <= 4)("mew").say

[17:51] <committable6> brokenchicken, ¦«2014.12»: Cannot call 'Real'; none of these signatures match:␤:(Mu:U \v: *%_)␤  in method Real at src/gen/m-CORE.setting:4098␤  in sub infix:<<=> at src/gen/m-CORE.setting:4612␤  in block <unit> at /tmp/WBXWAg3uR6:1␤ «exit code = 1»

[17:52] <brokenchicken> wow, the bot goes waaaay back

[17:52] <brokenchicken> c: 2014.07 (1 <= *.chars <= 4)("mew").say

[17:52] <committable6> brokenchicken, ¦«2014.07»: Cannot call 'Real'; none of these signatures match:␤:(Mu:U \v: *%_)␤  in method Real at src/gen/m-CORE.setting:3721␤  in sub infix:<<=> at src/gen/m-CORE.setting:4244␤  in block  at /tmp/RBHGvRyn0O:1␤ «exit code = 1»

[17:52] <brokenchicken> c: 2014.02 (1 <= *.chars <= 4)("mew").say

[17:52] <committable6> brokenchicken, https://gist.github.com/d3f75c8f3bedb7ac06b93c079e757850

[17:54] <brokenchicken> looks like 2014.01 is the earliest

[18:38] <pmurias> nqp-m: say(nqp::isnull(nqp::atkey(nqp::null(), 0)))

[18:38] <camelia> nqp-moarvm: OUTPUT«1␤»

[18:39] <pmurias> ^^ is that intentional semantics?

[18:39] <pmurias> nqp-j: say(nqp::isnull(nqp::atkey(nqp::null(), 0)))

[18:39] <brokenchicken> The -j doesn't work

[18:39] <brokenchicken> j: use nqp; say(nqp::isnull(nqp::atkey(nqp::null(), 0)))

[18:39] <camelia> rakudo-jvm fb4f16: OUTPUT«This type cannot unbox to a native string␤  in block <unit> at <tmp> line 1␤␤»

[18:41] <pmurias> j: use nqp; nqp::say(nqp::isnull(nqp::atkey(nqp::null(), 0)))

[18:41] <camelia> rakudo-jvm fb4f16: OUTPUT«This type cannot unbox to a native string␤  in block <unit> at <tmp> line 1␤␤»

[18:43] <TimToady> brokenchicken: the 1 <= *.chars <= 4 thing is hard to fix because EXPR currently treats them as binary operators, not chaining, so you don't have all the information you need all at once

[18:44] <brokenchicken> b2gills: ^

[18:44] <TimToady> (iirc)

[18:45] <pmurias> nqp-m: say(nqp::isnull(nqp::atpos(nqp::null(), 0)))

[18:45] <camelia> nqp-moarvm: OUTPUT«1␤»

[18:45] <pmurias> ^^ meant to ask about that

[20:15] <nine> jnthn: in your original proposal for our module handling, you specified CompUnit::Handle's globalish-package() as returning a Stash. But a package is not exactly a stash, isn't it? Right now it actually returns a package and every caller calls .WHO on that. I'd like to fix that but I'm not sure if I should.

[20:21] <jnthn> It could be either way, to be honest

[20:21] <jnthn> A package in so far as what we refer to is a type object, and the Stash hangs off .WHO

[20:21] <jnthn> I don't feel strongly either way.

[20:24] <nine> My reason for wanting it to just return a Stash is to make it easier to create a handle representing a completely artificial CompUnit like Inline::Perl5 ought to do.

[21:06] <jnthn> Ah, so it'd save on creating a "throwaway" type object, STable, etc?

[21:42] <nine> Yes. Easier to create and less wasteful as each and every caller (including tests) calls .WHO on the return value immediately anyway.
