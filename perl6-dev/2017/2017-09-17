[00:04] <timotimo> interesting. all the $!next accesses go through a wval for the type to find the attribute on, and they aren't being translated to a highly performant pointer-offset-read as i think they could

[00:05] <timotimo> and of course it's being guardconc'd over and over again :D

[00:10] <jnthn> gfldex: "imposes a maximum of 16 threads on the methods .hyper and .race" - actually on everything scheduled on the pool

[00:11] <jnthn> gfldex: The new scheduler will be merged next week, and it's default maximum is 64

[00:11] <jnthn> (Though it's much less likely to start threads)

[00:12] <[Coke]> AlexDaniel: not really, though in general we should probably be doing both vs & gcc builds (I think someone was working on automated vs testing)

[00:12] <jnthn> *its

[00:12] <jnthn> 'night, #perl6-dev

[00:12] <[Coke]> ~~

[00:23] <timotimo> well, that made it faster

[00:24] <timotimo> m: say 28.6 / 34.8

[00:24] <camelia> rakudo-moar 488ca6: OUTPUT: «0.821839␤»

[00:26] <MasterDuke> cool

[00:34] <timotimo> m: say 27.15 / 34.8

[00:35] <camelia> rakudo-moar 488ca6: OUTPUT: «0.780172␤»

[00:42] <timotimo> m: say 26.8 / 34.8

[00:42] <camelia> rakudo-moar 488ca6: OUTPUT: «0.770115␤»

[00:42] <AlexDaniel> [Coke]: go for it then? Would be great to have a ticket in roast so that we can compare the failures next time

[00:44] <Geth> ¦ rakudo/faster-permutations: 697010085b | (Timo Paulssen)++ | src/core/Rakudo/Iterator.pm

[00:44] <Geth> ¦ rakudo/faster-permutations: 25% faster permutations with lexicals instead of attribute

[00:44] <Geth> ¦ rakudo/faster-permutations:

[00:44] <Geth> ¦ rakudo/faster-permutations: looking at spesh, all accesses to $!next were going through a

[00:44] <Geth> ¦ rakudo/faster-permutations: fully virtual getattr, rather than being optimized to a simple

[00:44] <Geth> ¦ rakudo/faster-permutations: pointer offset read. Not sure why that is, but only doing that

[00:44] <Geth> ¦ rakudo/faster-permutations: once and then using a lexical variable is a lot faster right now.

[00:44] <Geth> ¦ rakudo/faster-permutations: review: https://github.com/rakudo/rakudo/commit/697010085b

[00:47] <timotimo> AlexDaniel: your choice if this makes it into the release. running a spec test now

[00:52] <timotimo> spec tests clean on my machine

[00:58] <AlexDaniel> greppable6: permutations

[00:58] <greppable6> AlexDaniel, https://gist.github.com/cf79cb97a64ffd0bb72751a5c0923b1e

[01:00] <AlexDaniel> timotimo: IMO it can wait. Yes, I don't think anything horrible can happen if we merge it now, but at the same time can't see any reason why it cannot wait till tomorrow :)

[01:03] <travis-ci> Rakudo build passed. Samantha McVey 'Fix spectest.data path for Collation tests'

[01:03] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/276265831 https://github.com/rakudo/rakudo/compare/c3a71acb33c4...e6a695b272ac

[01:12] <travis-ci> Rakudo build errored. Aleks-Daniel Jakimenko-Aleksejev 'Log remaining changes

[01:12] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/276276482 https://github.com/rakudo/rakudo/compare/e6a695b272ac...bdbb7e4aca2a

[01:12] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[01:32] <AlexDaniel> what's wrong with travis :/

[01:34] <geekosaur> connection conniptions

[01:35] <AlexDaniel> if I remove “endwin” here then it passes: https://github.com/azawawi/perl6-ncurses/blob/master/t/02-basic.t#L13

[01:35] <AlexDaniel> with endwin it passes too, but not with ｢prove｣

[01:38] <geekosaur> prove may not like the extra output (generally it resets cursor to bottom left and outputs deinit sequences; but initscr() is lazy about emitting them, so endwin() outputs both init and deinit!)

[01:40] <AlexDaniel> geekosaur: okay, but why would this commit affect the behavior there? https://github.com/rakudo/rakudo/commit/4b02b8aadcb47072bc87fb8be8069177b74cd59d

[01:40] <geekosaur> instead of initscr(), you may want to use (assuming you have bound it) newterm

[01:41] <geekosaur> becuase the output is a pipe, which was (a) default buffered (b) not being autoflushed after that change (that was fixed in a still later commit)]

[01:52] <AlexDaniel> geekosaur: are you saying that it should work on HEAD?

[01:55] <geekosaur> you can also just redirect fd 1/stdout somewhere else; if you need it back, though, you will want to save the old one somewhere (via fcntl(F_DUPFD) operations in C)

[02:02] <AlexDaniel> “But on a real terminal, it's possible it would be left in an odd state” yes, that is so

[02:02] <AlexDaniel> well… it runs fine with prove, but breaks the terminal when I execute the file alone

[02:04] <geekosaur> another reason to get it off of the pipe to prove, then

[02:44] <travis-ci> Rakudo build errored. Samantha McVey 'Add collation tests to spectest.data'

[02:44] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/276195219 https://github.com/rakudo/rakudo/compare/ce95e1628c4a...c3a71acb33c4

[02:44] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[03:27] <AlexDaniel> ok, right, I see

[03:27] <AlexDaniel> when running prove -j … the output is now buffered, so you'll see no progress

[03:37] <AlexDaniel> can somebody recommend something smarter than this? https://gist.github.com/AlexDaniel/486717d5d2643f103641b3533d3ee312

[03:37] <AlexDaniel> it does work, but I find it ugly

[03:42] <samcv> guys i fixed nqp compiling properly on Alpine Linux/musl

[03:42] <AlexDaniel> :O \o/

[03:42] <samcv> just pushed the fixed to MoarVM

[03:43] <samcv> https://github.com/MoarVM/MoarVM/commit/5528083df7

[03:43] <AlexDaniel> samcv++ # rakudo everywhere! ♥

[03:43] <samcv> :-)

[03:43] <samcv> that function ideally should be re-written to be not so deeply recursive. though maybe it's okay now that it's very minimal

[03:44] <samcv> i know when i did a stacktrace of the crash. i got 212 recursive calls to the same function

[03:44] <samcv> and maybe more below that, that it didn't dump the stacktrace for

[03:44] <samcv> so i can see why on some platforms it would not be very happy...

[03:46] <samcv> actually slightly curious how much it recurses

[03:46] <MasterDuke> samcv: some old chat about it: https://irclog.perlgeek.de/moarvm/2017-08-07#i_14979161

[03:48] <samcv> yeah. needs to eventually not recurse

[03:48] <samcv> but for now nqp compiles :)

[03:48] <samcv> will try out rakudo in a sec though

[03:48] <samcv> gonna increase the cpu's given to my vm

[03:49] <AlexDaniel> [Coke]: thanks

[03:50] <AlexDaniel> releasable6: status

[03:50] <releasable6> AlexDaniel, Next release will happen when it's ready. 2 blockers. 154 out of 160 commits logged (⚠ 3 warnings)

[03:50] <releasable6> AlexDaniel, Details: https://gist.github.com/114fe2a1c5b20575ab169fbdeed8ba7d

[03:50] <AlexDaniel> releasable6: status

[03:50] <releasable6> AlexDaniel, Next release will happen when it's ready. 1 blocker. 154 out of 160 commits logged (⚠ 3 warnings)

[03:50] <releasable6> AlexDaniel, Details: https://gist.github.com/4b0a993370d9e0a74ae2d2106498f701

[03:53] <Geth> ¦ rakudo/nom: b76f7ccbfe | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/ChangeLog

[03:53] <Geth> ¦ rakudo/nom: Resolve Releasable warnings

[03:53] <Geth> ¦ rakudo/nom:

[03:53] <Geth> ¦ rakudo/nom: Nothing wrong with longer shas, but it's 8 for consistency.

[03:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b76f7ccbfe

[03:53] <samcv> so it makes 99 recursive calls

[03:53] <samcv> total 100 if you include the outermost call to optimize_bb (this in when compiling nqp)

[03:54] <samcv> actually i think i can remove all recursion that happens when there's only one subnode

[03:54] <samcv> i just thought of something

[03:55] <samcv> so it will only have to do a recursive call if there's at least 2 subnodes, not just 1

[03:56] <Geth> ¦ rakudo/unbuffered-for-prove: d3f542d65b | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Test.pm6

[03:56] <Geth> ¦ rakudo/unbuffered-for-prove: Fix needless buffering when running prove with -j

[03:56] <Geth> ¦ rakudo/unbuffered-for-prove:

[03:56] <Geth> ¦ rakudo/unbuffered-for-prove: See RT #132108

[03:56] <Geth> ¦ rakudo/unbuffered-for-prove: review: https://github.com/rakudo/rakudo/commit/d3f542d65b

[03:56] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132108

[03:56] <MasterDuke> good deal

[03:57] <samcv> that reduced recursion to 29

[03:57] <Geth> ¦ rakudo: AlexDaniel++ created pull request #1160: Fix needless buffering when running prove with -j

[03:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1160

[03:57] <MasterDuke> and i'm outa here. later...

[03:57] <AlexDaniel> me too

[03:57] <samcv> bye!

[04:06] <AlexDaniel> .tell jnthn ? green light from me. SNAFU with Windows and JVM spectests, but it builds fine. No more blockers besides minor RT #132108 (it's a rakudo issue so doesn't prevent you from cutting a moar release). Besides that, everything looks fine from here. Good luck with moar release! ♥

[04:06] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132108

[04:06] <yoleaux> AlexDaniel: I'll pass your message to jnthn.

[04:08] <AlexDaniel> If somebody knows about some potentially serious issue, please .tell me or create a ticket. Don't expect me to magically read your mind :)

[04:08] <AlexDaniel> see you in ≈9 hours o/

[04:09] <AlexDaniel> .oO( if not more )

[04:15] <samcv> even without my fix which reduces recursion at least in nqp compile by 1/3, i can still pass roast as well :)

[04:15] <samcv> yay for fixes

[07:35] <Geth> ¦ roast: skids++ created pull request #321: Add fudged tests for RT#129215

[07:35] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=129215

[07:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/321

[07:36] <Geth> ¦ roast: 741df515b3 | skids++ | 2 files

[07:36] <Geth> ¦ roast: Add fudged tests for RT#129215

[07:36] <Geth> ¦ roast:

[07:36] <Geth> ¦ roast: Perplexingly not be replicable by CompUnit::, needs a real "use"

[07:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/741df515b3

[07:36] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=129215

[07:36] <Geth> ¦ roast: 272ce38005 | skids++ (committed using GitHub Web editor) | 2 files

[07:36] <Geth> ¦ roast: Merge pull request #321 from skids/rt129215

[07:36] <Geth> ¦ roast:

[07:36] <Geth> ¦ roast: Add fudged tests for RT#129215

[07:36] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=129215

[07:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/272ce38005

[07:41] <gfldex> i keeped the golfed httpd under siege over night and rsize went from ~500MB to 1.5GB. So there must be a small memory leak somewhere.

[07:42] <gfldex> code: https://gist.github.com/c11e196c2d1c37118432e3291a98703e

[09:08] <moritz> does anybody happen to know where <( and )> handling in regexes is implemented?

[09:08] <moritz> <( and )> are not so great to grep for

[09:09] <moritz> or a greppable name would also help

[09:14] <moritz> found it: token metachar:sym<from> { '<(' <.SIGOK> }

[09:39] <lizmat> Files=1227, Tests=74774, 295 wallclock secs (11.68 usr  4.77 sys + 1997.32 cusr 207.97 csys = 2221.74 CPU)

[09:43] <lizmat> .tell timo good catch with 1ca81432af51b842ca0f0    That was really a typo

[09:43] <yoleaux> lizmat: I'll pass your message to timo.

[09:46] <moritz> m: say "abc" ~~ m/b/;

[09:46] <camelia> rakudo-moar b76f7c: OUTPUT: «｢b｣␤»

[10:00] <moritz> m: say "fooABCdef" ~~ /\w+ & ABC.+/

[10:00] <camelia> rakudo-moar b76f7c: OUTPUT: «Nil␤»

[10:00] <moritz> m: say "fooABCdef" ~~ /\w+ & [ABC.+]/

[10:00] <camelia> rakudo-moar b76f7c: OUTPUT: «｢ABCdef｣␤»

[10:01] <moritz> I thought & was supposed to be pretty close to | in precedence

[10:01] <moritz> was I wrong? or is that a bug in rakudo?

[10:02] <moritz> the parse tree with --target=parse also looks very different for these two cases

[10:22] <timotimo> A.

[10:22] <timotimo> oops, i was timo before, now yoleaux has a message for me on that nick

[10:26] <lizmat> ah well, you go the message :-)

[10:30] <timotimo> aye

[10:30] <timotimo> did you see i found the opportunity for a 25% speedup in permutations? :)

[10:31] <lizmat> is that committed already ?

[10:32] <timotimo> nope, on a branch for after the release

[10:32] <timotimo> i saw in the spesh log that $!next was being compiled to a rather wasteful version for some reason

[10:32] <lizmat> ah, ok, no, didn't see

[10:32] <timotimo> so i took it out into a lexical

[10:32] <lizmat> ah, that

[10:33] <lizmat> yeah, that's a general issue with attributes

[10:33] <lizmat> and one that according to jnthn, can not be fixed easily

[10:33] <lizmat> generally

[10:33] <lizmat> many push-all candidates use lexicals instead of attributes for that very reason

[10:34] <timotimo> hmm

[10:35] <timotimo> anyway, that gets us to a little more than 10x slower than python

[10:35] <lizmat> somtimes I think we should use "is cached" on that  :-)

[10:38] <timotimo> it'd be cool if we had a really fast skip method

[10:38] <timotimo> i was looking at the fannkuch benchmark which runs computations over all permutations of the list of numbers from 1 through n

[10:39] <timotimo> in the energy-benchmark thingie you linked to recently the implementation was using multiple threads

[10:39] <timotimo> and those programs have implementations of permutations that can skip ahead to any point with only fractional computation i guess

[10:39] <timotimo> so splitting the whole work up is much faster

[10:40] <timotimo> i mean, we can copy the pull-one code and just not create the clone of the values and that'll already be a bit faster

[10:46] <Skarsnik> Hello

[10:51] <timotimo> hi

[10:54] <Skarsnik> releasable6, status

[10:54] <releasable6> Skarsnik, Next release will happen when it's ready. 1 blocker. 154 out of 161 commits logged

[10:54] <releasable6> Skarsnik, Details: https://gist.github.com/a7579cf6fc177e24ad42cb65f2fe2dbd

[10:55] <Skarsnik> :)

[11:01] <timotimo> hm. why is it "skip-at-least"? why not "skip-at-most"?

[11:01] <timotimo> "at least" looks like it'd skip more if it wants to

[11:01] <timotimo> so you can't use that to skip to an exact position

[11:05] <pmurias> if I'm emulating uint8, uint16, int8, int16 etc on the js backend should I emulate the wrapping?

[11:05] <pmurias> that is when storing a bigger than 2**8 value in a uint8 simulate an overflow with a modulo?

[11:06] <Skarsnik> m: my uint8 $a = 255; say ++$a;

[11:06] <camelia> rakudo-moar b76f7c: OUTPUT: «0␤»

[11:06] <Skarsnik> m: my uint8 $a = 255; say $a;

[11:06] <camelia> rakudo-moar b76f7c: OUTPUT: «255␤»

[11:10] <Skarsnik> m: my uint16 $a = 2**16; say $a; say ++$a

[11:10] <camelia> rakudo-moar b76f7c: OUTPUT: «0␤1␤»

[11:10] <Skarsnik> m: my uint16 $a = 2**16 - 1; say $a; say ++$a

[11:10] <camelia> rakudo-moar b76f7c: OUTPUT: «65535␤0␤»

[11:10] <Skarsnik> dang this get fixed recently?

[11:19] <timotimo> huh

[11:19] <timotimo> i don't remember a fix for that going in

[11:20] <Skarsnik> I remember the uint8 warping to -1 x)

[11:21] <lizmat> timotimo: re skip-at-least: skip-at-most could indicate it could skip less if it wanted to

[11:21] <timotimo> implementing skip-at-least in the permutations iterator by just not cloning the $permutated array every step and putting the loop inside the method makes it crazy fast

[11:21] <timotimo> lizmat: okay, then why not skip-exactly?

[11:22] <lizmat> because you cannot guarantee that you *can* skip that many ?

[11:22] <timotimo> why is it okay if i permutations(9).skip(1000) to get, for example, element 5000 instead?

[11:22] <lizmat> it's not: it's supposed to skip that many if it can

[11:23] <lizmat> # Skip the given number of values.  Return true if succesful in

[11:23] <lizmat> # skipping that many values.

[11:23] <timotimo> in that case i still find the name strange :)

[11:23] <timotimo> it's far too late now to change anything, but i'd've perhaps gone with "try-skip-exactly"

[11:23] <lizmat> well, I guess I was inspired by "push-at-least"

[11:24] <timotimo> why not inspired by push-exactly?

[11:24] <timotimo> push-exactly can also push fewer than requested

[11:24] <lizmat> ah... the mists of time

[11:25] <lizmat> I guess the answer is: why didn't anybody point that out to me 2 years ago  :-)

[11:25] <timotimo> yes!

[11:25] <timotimo> past-timo has been slacking off recently

[11:26] <lizmat> hmm.. actually, about a year ago

[11:26] <lizmat> :q

[11:26] <lizmat> oops

[11:37] <nine> So...where do those args get boxed again? :(

[11:38] <lizmat> nine?

[11:41] <nine> Looks like my native sub gets an Int again, after all the trouble to write a real native i64 to a local register. But I don't see where it could get boxed. The arg_i op just assigns an i64 to the arg register. And the source is the result of a decont_i.

[11:43] <lizmat> there's a lot of places where native ints get boxed :-)

[11:44] <lizmat> automagically

[11:44] <nine> But that should be visible in the bytecode at least, and I don't see it: https://gist.github.com/niner/a0f2dd8d4efee3f2a61b92eda2d1c636

[11:45] <nine> The code before the prepargs is the same as in the working version, so I assume it's correct. And then there's just arg_i which simply does not box.

[11:46] <nine> Even more, between the prepargs and ncinvoke we are guaranteed not to allocate anything, which rules out boxing.

[11:47] <timotimo> how and where do you notice it's boxed?

[11:47] <nine> Here's the corresponding MAST: https://gist.github.com/niner/b32b5f9df57b384e21bf3348f600f264

[11:48] <nine> timotimo: fprintf(stderr, "first arg: %d\n", tc->cur_frame->args[0].i64); gives me "Got: -275024512"

[11:49] <timotimo> i'm entirely unused to reading MAST with its "arguments on separate lines" shtick

[11:49] <nine> timotimo: which looks like a pointer to me and true: fprintf(stderr, "first param: %s\n", tc->cur_frame->params.args[0].o->st->debug_name); gives me "first param: Int"

[11:50] <timotimo> right, i see it clearly setting the 0 value into the local that it's later using in the call node

[11:50] <nine> timotimo: the 0 is only the case when we pass an undefined Int. line 21/24 is the normal case

[11:50] <timotimo> have you tried reverse debugging with rr?

[11:52] <nine> Not yet. The undefined int32 case seems to actually work

[11:52] <nine> But that of course might just be accidentally

[11:53] <[Tux]> This is Rakudo version 2017.08-161-gb76f7ccbf built on MoarVM version 2017.08.1-171-gcf95892e

[11:53] <[Tux]> csv-ip5xs        1.316 -  1.337

[11:53] <[Tux]> test             9.647 -  9.895

[11:53] <[Tux]> test-t           3.476 -  3.503

[11:53] <[Tux]> csv-parser      10.825 - 11.037

[12:00] <nine> Ok, it may be an Int, but it's not the actual arg (value is 0, should be 42). So I'm looking in the wrong place for that parameter.

[12:01] <timotimo> it's the right call, though, right?

[12:01] <nine> So where would my arg be if not in tc->cur_frame->args[0]?

[12:01] <timotimo> you're not accidentally looking at what your frame is being called with?

[12:02] <timotimo> well, that's where the arg_* ops write

[12:03] <nine> Oh, I actually meant tc->cur_frame->params.args[0].i64

[12:04] <nine> Though both seem to give the same value

[12:04] <timotimo> cur_frame->args is where the values from arg_* are written

[12:04] <timotimo> so i assume cur_frame->params.args is what got passed to the current frame when it was invoked

[12:11] <nine> So cur_frame->args might actually be the better place to look, as ncinvoke won't set up a new call frame and thus not initialize cur_frame->params.args

[12:15] <nine> Ooooh...the value I'm looking for is actually in tc->cur_frame->args[1].i64. I wonder how it ends up in 1 instead of 0

[12:16] <Skarsnik> 0 is return value or something weird like that?

[12:16] <jnthn> Nope, returns aren't done via the args buffer

[12:17] <jnthn> Perhaps an off-by-one in code-gen?

[12:18] <nine> Well I do pass the return type object as first child of the nativecallinvokejit op. QASTOperationsMAST's $call_gen shifts it out of @args, just like it does with the callee.

[12:19] <nine> But of course, I then pass it on as part of @arg_regs.

[12:20] <nine> Ah, I think, I see it. I correctly initialize arg_pos in the MAST compiler, to skip this in args processing, but args_pos is also written to the bytestream for indexing the args array.

[12:20] <nine> I'll have to subtract it there, too.

[12:46] <samcv> did yapc eu videos ever get published?

[12:47] <timotimo> are you refering to TPCiA?

[12:47] <samcv> uh the one in amsterdam

[12:47] <timotimo> yeah, there's a few videos on line from that

[12:47] <samcv> i mean there were preliminary videos but what about the nicer ones with mics

[12:48] <samcv> i heard were gonna come out a month after the conf

[12:48] <timotimo> huh, no mention in the weekly, eh

[12:48] <timotimo> it must be like you say, then

[12:49] <nine> All tests successful. :)

[12:49] <timotimo> cool!

[12:50] <timotimo> a bit too late for the release, but still exciting

[12:50] <timotimo> i need an example xhtml file for the web server test thinige

[12:51] <Skarsnik> https://github.com/Skarsnik/perl6-gumbo/blob/master/t/data/fancy.html ?

[13:04] <timotimo> gfldex: i ctrl-c'd siege while running against your web server and moar crashed with a broken pipe signal :o

[13:09] <Geth> ¦ nqp/jit_nativecall: 38a26adceb | (Stefan Seifert)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[13:09] <Geth> ¦ nqp/jit_nativecall: Turn nativecallinvokejit into a proper invocation op

[13:09] <Geth> ¦ nqp/jit_nativecall:

[13:09] <Geth> ¦ nqp/jit_nativecall: The return type object for boxing is passed as the first child of the

[13:09] <Geth> ¦ nqp/jit_nativecall: MAST::Call node.

[13:09] <Geth> ¦ nqp/jit_nativecall: review: https://github.com/perl6/nqp/commit/38a26adceb

[13:10] <Geth> ¦ nqp/jit_nativecall: ac6e45ae46 | (Stefan Seifert)++ | 12 files

[13:10] <Geth> ¦ nqp/jit_nativecall: Turn nativecallinvokejit into a proper invocation op

[13:10] <Geth> ¦ nqp/jit_nativecall:

[13:10] <Geth> ¦ nqp/jit_nativecall: The return type object for boxing is passed as the first child of the

[13:10] <Geth> ¦ nqp/jit_nativecall: MAST::Call node.

[13:10] <Geth> ¦ nqp/jit_nativecall: Includes a rebootstrap for the extension of MAST::Call

[13:10] <Geth> ¦ nqp/jit_nativecall: review: https://github.com/perl6/nqp/commit/ac6e45ae46

[13:11] <Geth> ¦ rakudo/jit_nativecall: fc4d784617 | (Stefan Seifert)++ | lib/NativeCall.pm6

[13:11] <Geth> ¦ rakudo/jit_nativecall: Explicitly pass the params to nativecallinvokejit

[13:11] <Geth> ¦ rakudo/jit_nativecall: review: https://github.com/rakudo/rakudo/commit/fc4d784617

[14:22] <Geth> ¦ rakudo/unbuffered-for-prove: aca6f9bfa8 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Test.pm6

[14:22] <Geth> ¦ rakudo/unbuffered-for-prove: Oops. Un-buffer stderr, not stdin

[14:22] <Geth> ¦ rakudo/unbuffered-for-prove: review: https://github.com/rakudo/rakudo/commit/aca6f9bfa8

[14:28] <AlexDaniel> o/

[14:30] <lizmat> AlexDaniel: feels to me that should go in before the release ?

[14:31] <Skarsnik> should I toast this?

[14:31] <Skarsnik> Not sure I have time left on the vm instance thou before having to rebuild it

[14:32] <AlexDaniel> lizmat: yeah, I think so

[14:33] <AlexDaniel> Skarsnik: as for toasting this, I really can't see how it can possibly affect anything negatively… but we've been proven wrong so many times :)

[14:33] <AlexDaniel> .oO( prove…n )

[14:34] <AlexDaniel> so IMO toasting not necessary, but if you have willingness to do it I wouldn't object :)

[14:39] <lizmat> hmmm... did we just gain 8K tests in roast ?

[14:40] <lizmat> I guess we did in the past 36 hours or so

[14:41] <AlexDaniel> collation?

[14:41] <lizmat> I guess

[14:41] <AlexDaniel> https://github.com/perl6/roast/commit/5568a0d63f9c3300f1bced126cd876145eaae55d

[14:41] <AlexDaniel> anything wrong with that?

[14:41] <lizmat> yup, that'd be the one

[14:42] <lizmat> no, I was just wondering where they came from

[14:50] <AlexDaniel> /o\ when was the last bump

[14:51] <Skarsnik_> bumpable6, when

[14:51] <timotimo> did something go wrong in the mean time?

[14:52] <AlexDaniel> timotimo: not sure, what's the meaning of this? https://ci.appveyor.com/project/rakudo/rakudo/build/1.0.116/job/8fkjewql54fxyn1j

[14:53] <timotimo> somehow it's trying to use make instead of nmake

[14:54] <timotimo> oh

[14:54] <timotimo> that's only after the explosion

[14:54] <timotimo> are we running into some nmake limitation again? =o

[14:59] <samcv> AlexDaniel, i'm investigating that zef issue now

[14:59] <AlexDaniel> samcv: OK. Let me know if you find something

[15:00] <timotimo> AlexDaniel: can you get appveyor to output the makefile?

[15:02] <AlexDaniel> timotimo: Dunno. Looking at the dates of these failures, maybe it's this commit? https://github.com/MoarVM/MoarVM/commit/238896a50a595879a1e1d66b5bd39943678d73ac

[15:02] <AlexDaniel> :S

[15:03] <timotimo> perhaps nmake doesn't understand this ifneq thing?

[15:03] <timotimo> !IF "a" == "b"     (also !=)        ifeq (a, b)

[15:03] <timotimo> (also ifneq)

[15:03] <timotimo> nmake on the left, gnu make on the right

[15:03] <timotimo> and it wants an !ENDIF at the end

[15:10] <Geth> ¦ rakudo/unbuffered-for-prove: bc6b1160ba | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/release_guide.pod

[15:10] <Geth> ¦ rakudo/unbuffered-for-prove: Frequent bumps are good before the release

[15:10] <Geth> ¦ rakudo/unbuffered-for-prove: review: https://github.com/rakudo/rakudo/commit/bc6b1160ba

[15:10] <AlexDaniel> dammit /o\ wrong branch

[15:10] <timotimo> heh

[15:11] <Geth> ¦ rakudo/nom: 85514723da | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/release_guide.pod

[15:11] <Geth> ¦ rakudo/nom: Frequent bumps are good before the release

[15:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/85514723da

[15:11] <Zoffix> parse_git_branch() {

[15:11] <Zoffix> git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ (\1)/'

[15:11] <Zoffix> }

[15:11] <Zoffix> export PS1="\u@\h\[\033[32m\]\w\[\033[34m\]\$(parse_git_branch)\[\033[00m\]$ "

[15:12] <Zoffix> put in your bash files to show current branch in bash prompt

[15:13] <AlexDaniel> that's a good idea, yea

[15:16] <AlexDaniel> timotimo: remind me, why is there no appveyor for moarvm repo?

[15:16] <timotimo> um, i think the moarvm repo owner has to set it up?

[15:18] <AlexDaniel> https://github.com/MoarVM/MoarVM/issues/693

[15:20] <AlexDaniel> timotimo: I think you had it working in your fork? Maybe you can give some hints on how to do that in a comment?

[15:21] <timotimo> i don't remember >_<

[15:21] <AlexDaniel> ok that was quick

[15:21] <timotimo> also it'd be nice if the appveyor would be under the moarvm org

[15:21] <timotimo> what was?

[15:22] <AlexDaniel> https://github.com/MoarVM/MoarVM/commits/master

[15:22] <AlexDaniel> look

[15:22] <timotimo> oh, huh

[15:23] <gfldex> m: my &note = BEGIN &note;

[15:23] <camelia> rakudo-moar b76f7c: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Cannot use variable &note in declaration to initialize itself␤at <tmp>:1␤------> 3my &note = BEGIN &7⏏5note;␤    expecting any of:␤        term␤»

[15:24] <samcv> .ask lizmat any clue when the official YAPC-EU-2017 videos will be coming out? Thanks!

[15:24] <yoleaux> samcv: I'll pass your message to lizmat.

[15:24] <lizmat> .

[15:24] <yoleaux> 15:24Z <samcv> lizmat: any clue when the official YAPC-EU-2017 videos will be coming out? Thanks!

[15:24] <lizmat> I asked Sawyer about 2 weeks ago, no answer

[15:25] <lizmat> so I'm afraid they'll be there when they're there :-(

[15:25] <samcv> :-(

[15:54] <Geth> ¦ rakudo/nom: d3f542d65b | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Test.pm6

[15:54] <Geth> ¦ rakudo/nom: Fix needless buffering when running prove with -j

[15:54] <Geth> ¦ rakudo/nom:

[15:54] <Geth> ¦ rakudo/nom: See RT #132108

[15:54] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d3f542d65b

[15:54] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132108

[15:54] <Geth> ¦ rakudo/nom: aca6f9bfa8 | (Aleks-Daniel Jakimenko-Aleksejev)++ | lib/Test.pm6

[15:54] <Geth> ¦ rakudo/nom: Oops. Un-buffer stderr, not stdin

[15:54] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/aca6f9bfa8

[15:54] <Geth> ¦ rakudo/nom: 9073a4dc7f | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | lib/Test.pm6

[15:54] <Geth> ¦ rakudo/nom: Merge pull request #1160 from rakudo/unbuffered-for-prove

[15:54] <Geth> ¦ rakudo/nom:

[15:54] <Geth> ¦ rakudo/nom: Fix needless buffering when running prove with -j

[15:54] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9073a4dc7f

[16:33] <Zoffix> New blog post: "The Rakudo Book Project": https://rakudo.party/post/The-Rakudo-Book-Project

[16:36] <Skarsnik> good luc on this big project :)

[16:36] <Zoffix> Thanks :)

[16:37] * Zoffix gets cracking

[16:50] <travis-ci> Rakudo build errored. Aleks-Daniel Jakimenko-Aleksejev 'Merge pull request #1160 from rakudo/unbuffered-for-prove

[16:50] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/276542491 https://github.com/rakudo/rakudo/compare/85514723da3c...9073a4dc7f69

[16:50] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[17:01] <Geth> ¦ rakudo: Gnouc++ created pull request #1161: remove bad comment of srand

[17:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1161

[17:36] <Geth> ¦ rakudo/nom: 9eeb357111 | (Cuong Manh Le)++ | src/core/Num.pm

[17:36] <Geth> ¦ rakudo/nom: remove bad comment of srand

[17:36] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9eeb357111

[17:36] <Geth> ¦ rakudo/nom: 7b9e103736 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Num.pm

[17:36] <Geth> ¦ rakudo/nom: Merge pull request #1161 from Gnouc/nom

[17:36] <Geth> ¦ rakudo/nom:

[17:36] <Geth> ¦ rakudo/nom: remove bad comment of srand

[17:36] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7b9e103736

[17:55] <Geth> ¦ nqp: 71c775feee | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[17:55] <Geth> ¦ nqp: Pre-release MOAR_REVISION bump

[17:55] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/71c775feee

[17:55] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.08.1-171-gcf95892...2017.09-1-gf76ae338

[17:57] <Geth> ¦ rakudo/nom: 3f47eba373 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[17:57] <Geth> ¦ rakudo/nom: Pre-release NQP_REVISION bump

[17:57] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3f47eba373

[17:57] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.08-71-gf3b0f0c...2017.08-75-g71c775fee

[18:23] <travis-ci> Rakudo build passed. Zoffix Znet 'Merge pull request #1161 from Gnouc/nom

[18:23] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/276565331 https://github.com/rakudo/rakudo/compare/9073a4dc7f69...7b9e103736be

[18:30] <AlexDaniel> didn't quite bump to the last moar version, heh :)

[18:52] <travis-ci> Rakudo build passed. Aleks-Daniel Jakimenko-Aleksejev 'Pre-release NQP_REVISION bump'

[18:52] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/276569831 https://github.com/rakudo/rakudo/compare/7b9e103736be...3f47eba3734c

[19:15] <lizmat> AlexDaniel: fwiw, tests clean on my machine

[19:15] <lizmat> (on Moar, I don't do JVM anymore)

[19:15] <timotimo> dangit

[19:16] <timotimo> the appveyor build failed, and there's no explanation in the log

[19:16] <timotimo> perhaps it timed out from too much work

[19:21] <AlexDaniel> timotimo: which one?

[19:21] <AlexDaniel> ah, in MoarVM repo?

[19:25] <timotimo> nah, under timo/

[19:25] <timotimo> https://ci.appveyor.com/project/timo/moarvm

[20:39] <Geth> ¦ roast: skids++ created pull request #322: Add tests for RT#111474

[20:39] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=111474

[20:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/322

[20:39] <Geth> ¦ roast: 24de54a28d | skids++ | S05-metasyntax/interpolating-closure.t

[20:39] <Geth> ¦ roast: Add tests for RT#111474

[20:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/24de54a28d

[20:39] <Geth> ¦ roast: 1bbe3c9d35 | skids++ (committed using GitHub Web editor) | S05-metasyntax/interpolating-closure.t

[20:39] <Geth> ¦ roast: Merge pull request #322 from skids/rt111474

[20:39] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=111474

[20:39] <Geth> ¦ roast:

[20:39] <Geth> ¦ roast: Add tests for RT#111474

[20:39] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=111474

[20:39] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1bbe3c9d35

[20:41] <Geth> ¦ roast: 951079df0d | (Elizabeth Mattijsen)++ | S32-encoding/registry.t

[20:41] <Geth> ¦ roast: Encoding.alternative-names should return a List

[20:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/951079df0d

[20:49] <Geth> ¦ nqp: 1fd30a8963 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[20:49] <Geth> ¦ nqp: Pre-release MOAR_REVISION bump

[20:49] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/1fd30a8963

[20:49] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.09-1-gf76ae338...2017.09-2-g0f59f0cf

[20:49] <Geth> ¦ rakudo/nom: 68e54f98f0 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[20:49] <Geth> ¦ rakudo/nom: Pre-release NQP_REVISION bump

[20:49] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/68e54f98f0

[20:49] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.08-75-g71c775fee...2017.08-76-g1fd30a896

[20:49] * AlexDaniel wants this badly: https://github.com/perl6/whateverable/issues/232

[20:51] * lizmat pulls, builds and runs a spectest

[20:53] <AlexDaniel> lizmat: well, this only contains the nmake fix (revert) for MoarVM

[20:53] <lizmat> well, can't hurt to run them anyway, right?

[20:53] <AlexDaniel> of course :)

[20:53] <AlexDaniel> lizmat++

[20:57] <AlexDaniel> ehh… t\04-nativecall\21-callback-other-thread.t on windows. Is it a flapper or…

[21:01] <timotimo> i think i've heard it flap in recent days

[21:03] <AlexDaniel> yea

[21:04] <AlexDaniel> created a ticket for it: RT #132114

[21:04] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=132114

[21:04] <AlexDaniel> but it looks good

[21:04] <lizmat> looks ok to me

[21:07] <samcv> AlexDaniel, i wasn't able to reproduce that zef issue. it could be rakudobrew based, not sure

[21:07] <samcv> at least should prolly not be an issue since i was able to install it manually

[21:07] <AlexDaniel> ok

[21:18] <AlexDaniel> timotimo: what would be the short description for your [1ca81432][488ca6f0] commits?

[21:19] <timotimo> oh where were those?

[21:19] <AlexDaniel> https://github.com/rakudo/rakudo/commit/1ca81432 https://github.com/rakudo/rakudo/commit/488ca6f0

[21:20] <timotimo> oh

[21:20] <AlexDaniel> “Fixed permutations/combinations iterator” sounds too big :)

[21:20] <timotimo> sorry, can't browser right now

[21:20] <AlexDaniel> and anything more specific wraps on multiple lines…

[21:20] <timotimo> hm, it probably only has a performance impact, if at all

[21:20] <timotimo> i don't think it needs to be mentioned in the changelog

[21:21] <AlexDaniel> but wasn't it about some actual bug that needed fixing?

[21:25] <timotimo> only if you manually grab the Rakudo::Iterator.permutations i think

[21:26] <AlexDaniel> OK

[21:37] <lizmat> perhaps a new JVM backend target: https://www.eclipse.org/openj9/oj9_faq.html

[21:48] * lizmat calls it a day

[21:50] <Geth> ¦ rakudo/nom: 1c985681c0 | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/ChangeLog

[21:50] <Geth> ¦ rakudo/nom: Final tweaks for the ChangeLog

[21:50] <Geth> ¦ rakudo/nom:

[21:50] <Geth> ¦ rakudo/nom: Enforcing short line length to be more email-friendly.

[21:50] <Geth> ¦ rakudo/nom: Novel MoarVM subsubsection is interesting, but if we do it we should

[21:50] <Geth> ¦ rakudo/nom: be doing it consistently, therefore I will leave out it for now.

[21:50] <Geth> ¦ rakudo/nom:

[21:50] <Geth> ¦ rakudo/nom: One change is without a sha reference but that's OK.

[21:50] <Geth> ¦ rakudo/nom: <…commit message has 5 more lines…>

[21:50] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1c985681c0

[22:06] <Geth> ¦ rakudo/nom: 9d2dabf5d2 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 3 files

[22:06] <Geth> ¦ rakudo/nom: Make it clear that this is a Perl 6 script

[22:06] <Geth> ¦ rakudo/nom:

[22:06] <Geth> ¦ rakudo/nom: Also add a shebang. “pl6” because other files in that folder use “pl6”.

[22:06] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9d2dabf5d2

[22:06] <Geth> ¦ rakudo/nom: 213c3e3e6f | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/announce/2017.09.md

[22:06] <Geth> ¦ rakudo/nom: Generate release announcement for 2017.09

[22:06] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/213c3e3e6f

[22:10] <AlexDaniel> huggable: ^delete no relase

[22:10] <huggable> AlexDaniel, Didn't find no relase in the database

[22:10] <AlexDaniel> huggable: ^delete no release

[22:10] <huggable> AlexDaniel, Didn't find no release in the database

[22:10] <AlexDaniel> huggable: ^delete no release?

[22:10] <huggable> AlexDaniel, Marked factoid `no release?` as deleted

[22:34] <AlexDaniel> OK, Moar release is there, so indeed we're a few moments away from Rakudo release now :)

[23:14] <Geth> ¦ rakudo/nom: 8b05c34ac7 | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/release_guide.pod

[23:14] <Geth> ¦ rakudo/nom: Reflect actual date, claim next release

[23:14] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8b05c34ac7
