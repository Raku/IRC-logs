[00:54] <ugexe> use local CURIs as a faux metacpan microservice: https://gist.github.com/ugexe/10a1bf67f8849323bc855408e3577b2a

[00:57] <ugexe> idea is to eventually act as both a web front-end to zef/cur as well as easily exposing it as a microservice to act as a darkpan

[02:18] <AlexDaniel-> “35768 snippets tested, 10524 are known to be unstable”

[02:18] <AlexDaniel-> wait what

[02:18] <AlexDaniel-> no way I'm going through 10524 snippets

[02:20] <AlexDaniel-> :S

[02:36] <AlexDaniel-> so can we finally open rakudo/issues? I don't think I can take it anymore

[02:40] <AlexDaniel-> .tell Zoffix Have you seen RT #132280 ? It looks like something you might enjoy working on (judging by the recent-ish optimizer ticket you resolved)

[02:40] <yoleaux> AlexDaniel-: I'll pass your message to Zoffix.

[02:40] <synopsebot> RT#132280 [new]: https://rt.perl.org/Ticket/Display.html?id=132280 [REGRESSION][PERF] Cool methods that take and pass a Capture are uber slower (.contains: 'meow' for ^10000_00)

[02:44] <AlexDaniel-> .tell lizmat fwiw please feel freer to reject my latest regression tickets

[02:44] <yoleaux> AlexDaniel-: I'll pass your message to lizmat.

[02:53] <AlexDaniel-> this is probably one of the funniest snippets I've seen

[02:53] <AlexDaniel-> e: %*ENV<RAKUDO_NO_DEPRECATIONS>:delete; DEPRECATED("the garbage bin")

[02:53] <evalable6> AlexDaniel-, rakudo-moar 012c80f33: OUTPUT: «Saw 1 occurrence of deprecated code.␤=====================================================…»

[02:53] <evalable6> AlexDaniel-, Full output: https://gist.github.com/98bf0ca4675e32ef9883bf239a1f4544

[02:53] <AlexDaniel-> “Please use the garbage bin instead.”

[03:14] <AlexDaniel-> .tell MasterDuke FWIW RT #132291

[03:14] <yoleaux> AlexDaniel-: I'll pass your message to MasterDuke.

[03:14] <synopsebot> RT#132291 [new]: https://rt.perl.org/Ticket/Display.html?id=132291 [LTA] Too few positionals passed to '' (for [:a] X [:b] -> ($i, $j) { })

[03:26] <AlexDaniel-> “No regressions in stresstest from this, which is a promising sign.” https://github.com/rakudo/rakudo/commit/4a8038c2956e863bc661a2a00e8371eb98002608

[03:27] <AlexDaniel-> how is it called when bisectable points at some commit? “unpromising sign”? :)

[03:44] <AlexDaniel-> .tell fwiw RT #132292. IMO it's blocker-worthy, but not marking it as such just yet. What do you think?

[03:44] <yoleaux> AlexDaniel-: I'll pass your message to fwiw.

[03:44] <synopsebot> RT#132292 [new]: https://rt.perl.org/Ticket/Display.html?id=132292 [REGRESSION] Recursively .emit-ing from the tap of the same supply bails out

[03:44] <AlexDaniel-> /o\

[03:44] <AlexDaniel-> .tell jnthn fwiw RT #132292. IMO it's blocker-worthy, but not marking it as such just yet. What do you think?

[03:44] <yoleaux> AlexDaniel-: I'll pass your message to jnthn.

[04:36] <AlexDaniel-> .tell lizmat does this look alright? Let me know. c: 21b9a720c7^,21b9a720c7 dd Set.Mix

[04:36] <yoleaux> AlexDaniel-: I'll pass your message to lizmat.

[04:45] <AlexDaniel-> ouch

[04:46] <AlexDaniel-> ah, nvm

[06:08] <AlexDaniel-> .tell Zoffix fwiw RT #132293

[06:08] <yoleaux> AlexDaniel-: I'll pass your message to Zoffix.

[06:08] <synopsebot> RT#132293 [new]: https://rt.perl.org/Ticket/Display.html?id=132293 [REGRESSION] It is no longer possible to create native ints with .new (int32.new(42))

[06:15] <AlexDaniel-> m: 0xD4DB.uniname.say

[06:15] <camelia> rakudo-moar 012c80f33: OUTPUT: «Hangul Syllable PWILH␤»

[06:16] <AlexDaniel-> .tell samcv hey, is it correct that uninames of Hangul syllables have no <…> around them? c: 2017.08,HEAD 0xD4DB.uniname.say

[06:16] <yoleaux> AlexDaniel-: I'll pass your message to samcv.

[06:16] <samcv> AlexDaniel-, yes

[06:16] <yoleaux> 06:16Z <AlexDaniel-> samcv: hey, is it correct that uninames of Hangul syllables have no <…> around them? c: 2017.08,HEAD 0xD4DB.uniname.say

[06:16] <AlexDaniel-> OK, thanks

[06:16] <samcv> the previous name was a placeholder name, and they're generated at database generation time

[06:17] <samcv> since it's algorithmic the name data

[06:18] <samcv> technically we could do that, but there aren't THAT many hangul characters. so i just added it easily. though if we wanted to save a tiny bit of space we could do the algorithmic aproach. but then i was concerned about then having to add extra logic to distinguish that codepoint range and would have been much more work

[06:19] <AlexDaniel-> samcv: but I was thiking, don't we use <> for all autogenerated stuff that's in a way unofficial?

[06:20] <samcv> no it's official

[06:20] <AlexDaniel-> ah, okay

[06:20] <samcv> the < > are for ones that have shared names

[06:20] <AlexDaniel-> hmmmmm

[06:20] <samcv> as in more than one cp with the same designation

[06:20] <AlexDaniel-> m: say 0x10FFFF.uniname

[06:20] <camelia> rakudo-moar 012c80f33: OUTPUT: «<noncharacter-10FFFF>␤»

[06:20] <AlexDaniel-> but that's unique now, isn't it?

[06:20] <samcv> well yes

[06:21] <samcv> that's how unicode designates it with those numbers

[06:21] <samcv> but i meant before the hex digits-

[06:21] <samcv> the < > designates it doesn't have an assigned name

[06:21] <samcv> or at least we are still using the placeholder names in UnicodeData.txt. so like for hangul, even though it shows <Hangul Syllabl> there. they have always had names. just not listed in that file

[06:22] <AlexDaniel-> hmm

[06:22] <samcv> but the names are determined by essentially the same algorithm that's used to decompose hangul's

[06:22] <samcv> so we follow that spec for hangul

[06:23] <samcv> does that make some sense?

[06:23] <AlexDaniel-> yes, thank you very much

[06:23] <samcv> ok :)

[06:23] <AlexDaniel-> samcv: any plans for other grant applications? :)

[06:24] <AlexDaniel-> I'm just so happy with your work :)

[06:24] <samcv> i need to decide what it will be though!

[06:24] <samcv> i am very happy with my work too :)

[06:24] <AlexDaniel-> like, I'm going through tons of snippets that have different output, and not all of them regressions of course, most are actually bug fixes

[06:24] <AlexDaniel-> and unicode related stuff comes up *very* often

[06:25] <AlexDaniel-> something about looking at what we had previously and what we have now makes me think that another grant is a very good idea :)

[06:31] <AlexDaniel-> uhhh

[06:31] <AlexDaniel-> c: 79b8ab9d3f^,79b8ab9d3f say $*KERNEL.signal: SIGUSR1

[06:31] <committable6> AlexDaniel-, ¦79b8ab9d3f^: «10» ¦79b8ab9: «30»

[06:31] <AlexDaniel-> c: 79b8ab9d3f^,79b8ab9d3f say +$*KERNEL.signal(SIGUSR1)

[06:31] <committable6> AlexDaniel-, ¦79b8ab9d3f^: «10» ¦79b8ab9: «30»

[06:35] <AlexDaniel-> .tell Zoffix maybe you can also take a look at https://rt.perl.org/Ticket/Display.html?id=132012#txn-1499238

[06:35] <yoleaux> AlexDaniel-: I'll pass your message to Zoffix.

[06:38] <AlexDaniel-> w… what

[06:39] <AlexDaniel-> c: 2015.12 my int @x[-2**63]; say @x.shape

[06:39] <committable6> AlexDaniel-, ¦2015.12: «(-9223372036854775808)»

[06:39] <AlexDaniel-> c: 2016.06 my int @x[-2**63]; say @x.shape

[06:39] <committable6> AlexDaniel-, ¦2016.06: «Illegal dimension in shape: -9223372036854775808. All dimensions must be integers bigger than 0␤  in block <unit> at /tmp/I1tG8GtUgl line 1␤ «exit code = 1»»

[06:39] <AlexDaniel-> so it was fixed? but

[06:39] <AlexDaniel-> c: HEAD my int @x[-2**63]; say @x.shape

[06:39] <committable6> AlexDaniel-, ¦HEAD(012c80f): «(-9223372036854775808)»

[06:39] <AlexDaniel-> (屮ಠ益ಠ)屮

[06:41] <AlexDaniel-> arrrrrrrrggggh

[06:43] <AlexDaniel-> .tell lizmat fwiw RT #131966

[06:43] <yoleaux> AlexDaniel-: I'll pass your message to lizmat.

[06:43] <synopsebot> RT#131966 [new]: https://rt.perl.org/Ticket/Display.html?id=131966 [REGRESSION][9999] Shaped native arrays with negative sizes (my int @a[-9999999999999999])

[06:52] <AlexDaniel-> c: c3b044df169^,c3b044df169 my $a = rx/aaaaaab/; 'a' x 999999 ~ 'b' ~~ /$a/; say now - INIT now

[06:52] <AlexDaniel-> errr, what do I do with this

[06:52] <committable6> AlexDaniel-, ¦c3b044df169^: «3.29355215» ¦c3b044d: «4.84434404»

[06:53] <AlexDaniel-> MasterDuke is maybe interested in INTERPOLATE stuff

[06:53] <AlexDaniel-> hmm

[06:56] <AlexDaniel-> .tell MasterDuke hey, maybe you can take a look at RT #132294

[06:56] <yoleaux> AlexDaniel-: I'll pass your message to MasterDuke.

[06:56] <synopsebot> RT#132294 [new]: https://rt.perl.org/Ticket/Display.html?id=132294 [REGRESSION][PERF] INTERPOLATE-related change made matching of large strings slower

[06:59] <AlexDaniel-> mch: say (await (^10000).map({ start { $*THREAD.id } })).unique

[06:59] <committable6> AlexDaniel-, ¦2015.12: «(3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)» ¦HEAD(012c80f): «(4)»

[07:01] <AlexDaniel-> is it supposed to be this way?

[07:02] <AlexDaniel-> it is!

[07:02] <AlexDaniel-> mch: say (await (^10).map({ start { sleep 0.3; $*THREAD.id } })).unique

[07:02] <committable6> AlexDaniel-, ¦2015.12: «(3 4 5 6 7 8 9 10 11 12)» ¦HEAD(012c80f): «(4 6 7 8 9 10 11 12 13 14)»

[07:02] <AlexDaniel-> ok nvm

[07:54] <AlexDaniel-> .tell Zoffix maybe also RT #132295 although it is low priority stuff

[07:54] <yoleaux> AlexDaniel-: I'll pass your message to Zoffix.

[07:54] <synopsebot> RT#132295 [new]: https://rt.perl.org/Ticket/Display.html?id=132295 [REGRESSION][LTA] :2(…) radix syntax no longer suggests using .base (:2(42))

[08:07] <AlexDaniel-> c: 2017.06,HEAD my $v = "\c[ZWJ]" x 100; say $v.chars

[08:07] <committable6> AlexDaniel-, ¦2017.06: «100» ¦HEAD(012c80f): «1»

[08:07] <AlexDaniel-> samcv: what about this? ↑

[08:07] <AlexDaniel-> is it correct that you can chain ZWJ with itself?

[09:03] <Geth_> ¦ rakudo/nom: 7 commits pushed by (Daniel Green)++, lizmat++

[09:03] <Geth_> ¦ rakudo/nom: 1761540e96 | Break apart INTERPOLATE into obvious multis

[09:03] <Geth_> ¦ rakudo/nom: 0a68a18f16 | Break out an Iterable multi for INTERPOLATE

[09:03] <Geth_> ¦ rakudo/nom: d73d500bf4 | Consolidate $i and $m flags to INTERPOLATE

[09:03] <Geth_> ¦ rakudo/nom: 1775259a32 | Break out Associatve and Regex into their own...

[09:03] <Geth_> ¦ rakudo/nom: e8003c873e | Remove unused conditional and variable in some...

[09:03] <Geth_> ¦ rakudo/nom: 4d3ccd8349 | Comment about how the #?if !moar branch in the...

[09:03] <Geth_> ¦ rakudo/nom: d56151743c | Merge pull request #1192 from MasterDuke17/convert_INTERPOLATE_into_a_multi

[09:03] <Geth_> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/compare/012c80f336...d56151743c

[09:31] <timotimo> ugexe: that microservice looks cool!

[10:00] <Zoffix> .

[10:00] <yoleaux> 02:40Z <AlexDaniel-> Zoffix: Have you seen RT #132280 ? It looks like something you might enjoy working on (judging by the recent-ish optimizer ticket you resolved)

[10:00] <yoleaux> 06:08Z <AlexDaniel-> Zoffix: fwiw RT #132293

[10:00] <yoleaux> 06:35Z <AlexDaniel-> Zoffix: maybe you can also take a look at https://rt.perl.org/Ticket/Display.html?id=132012#txn-1499238

[10:00] <yoleaux> 07:54Z <AlexDaniel-> Zoffix: maybe also RT #132295 although it is low priority stuff

[10:00] <synopsebot> RT#132280 [new]: https://rt.perl.org/Ticket/Display.html?id=132280 [REGRESSION][PERF] Cool methods that take and pass a Capture are uber slower (.contains: 'meow' for ^10000_00)

[10:00] <synopsebot> RT#132293 [new]: https://rt.perl.org/Ticket/Display.html?id=132293 [REGRESSION] It is no longer possible to create native ints with .new (int32.new(42))

[10:00] <synopsebot> RT#132295 [new]: https://rt.perl.org/Ticket/Display.html?id=132295 [REGRESSION][LTA] :2(…) radix syntax no longer suggests using .base (:2(42))

[10:04] <Zoffix> c: 2017.06 multi x (int) { say "native" }; multi x (Int) { say "here" }; x  int32.new(42)

[10:04] <committable6> Zoffix, ¦2017.06: «here»

[10:04] <Zoffix> AlexDaniel: looks like it wasn't possible before either

[10:04] <Zoffix> c: 2017.04 multi x (int) { say "native" }; multi x (Int) { say "here" }; x  int32.new(42)

[10:04] <committable6> Zoffix, ¦2017.04: «here»

[10:14] <jnthn> m: say int32.new(42).WHAT

[10:14] <yoleaux> 03:44Z <AlexDaniel-> jnthn: fwiw RT #132292. IMO it's blocker-worthy, but not marking it as such just yet. What do you think?

[10:14] <camelia> rakudo-moar d56151743: OUTPUT: «No such method 'BUILDALLPLAN' for invocant of type 'Perl6::Metamodel::NativeHOW'␤  in block <unit> at <tmp> line 1␤␤»

[10:14] <synopsebot> RT#132292 [new]: https://rt.perl.org/Ticket/Display.html?id=132292 [REGRESSION] Recursively .emit-ing from the tap of the same supply bails out

[10:15] <jnthn> AlexDaniel: Actually I'd count that as a fix.

[10:16] <jnthn> You're not meant to be allowed to be in the closure passed to tap more than once at a time

[10:17] <jnthn> This could accidentally happen

[10:17] <jnthn> Due to the implmentation detail of us using a recursive mutex

[10:20] <Zoffix> m: use nqp; say nqp::box_i(42, int32.WHAT)

[10:20] <camelia> rakudo-moar d56151743: OUTPUT: «This representation (P6int) cannot unbox to other types (for type int32)␤  in block <unit> at <tmp> line 1␤␤»

[10:21] <jnthn> int32 is not meant to be something you can box

[10:21] <jnthn> It's a native type

[10:21] <Zoffix> Yeah. Was just trying to figure out where the error's coming from

[10:21] <jnthn> Calling .new on it is very dubious also

[10:21] <jnthn> Though since type objects are objects, you can do it

[10:22] <Zoffix> jnthn: so should int32.new(42) return a native int32 42?

[10:23] <jnthn> No

[10:23] <jnthn> IMO it should blow up

[10:23] <jnthn> Though likely with a better error than today

[10:23] <jnthn> "Cannot make an instance of a native type" would do it

[10:23] <Zoffix> ok

[10:25] <jnthn> As to how the error happens: the type objects of native types claim to be subtypes of, say, Int

[10:25] <jnthn> This is only true in a type checking sense, not in a representation sense

[10:25] <jnthn> It's why int32 comes out narrower than Int when doing the multi sort though

[10:25] <[TuxCM]> This is Rakudo version 2017.09-404-gd56151743 built on MoarVM version 2017.09.1-594-gb9d3f6da

[10:25] <[TuxCM]> csv-ip5xs        1.175 -  1.184

[10:25] <[TuxCM]> test            13.997 - 14.336

[10:25] <[TuxCM]> test-t           3.071 -  3.071

[10:25] <[TuxCM]> csv-parser       0.854 -  0.863

[10:26] <Zoffix> :o so close to sub-3

[10:26] <[TuxCM]> how's that for a small range :)

[10:26] <timotimo> might want to deprecate method new in native ints

[10:26] <timotimo> so that existing code will just take a performance hit at first

[10:26] <timotimo> rather than straight-up dying

[10:26] <timotimo> then kill it with fire in a later release

[10:27] <Zoffix> timotimo: but it never worked

[10:27] <timotimo> it gave you an Int

[10:27] <Zoffix> ok

[10:27] <timotimo> it probably didn't truncate to the right size though?

[10:28] <Zoffix> timotimo: it was the same as Int.new

[10:28] <timotimo> right

[10:28] <Zoffix> m: use MONKEY; augment class Int { proto method new2(|) {*}; multi method new2(int \SELF: $) { say "here" }; multi method new2(Int \SELF: $) { say "there" } }; int32.new2(42)

[10:28] <camelia> rakudo-moar d56151743: OUTPUT: «there␤»

[10:28] <Zoffix> Don't even know how to make the error better anyway :}

[10:30] <Zoffix> m: use MONKEY; augment class Int { proto method new2(|) {*}; multi method new2(int32 \SELF: $) { say "here" }; multi method new2(Int \SELF: $) { SELF.^name.say; say "there" } }; int32.new2(42)

[10:30] <camelia> rakudo-moar d56151743: OUTPUT: «int32␤there␤»

[10:30] <Zoffix> k, tht works

[10:33] <Zoffix> "works".... trying to figure out if it's a native by name will make it so slow, it'd be no point in using Int.new: native int (if people are even using it)

[10:34] <Zoffix> releasable6: status

[10:34] <releasable6> Zoffix, Next release in 7 days and ≈8 hours. 1 blocker. Changelog for this release was not started yet

[10:34] <releasable6> Zoffix, Details: https://gist.github.com/8a5dc4a8820d6d5b16d3c57c56ce871f

[10:34] <Zoffix> Gonna work on this later.

[10:34] <timotimo> you can figure out if self.HOW is NativeHOW

[10:35] <Zoffix> Ah, thanks.

[10:39] <jdv79> Zoffix: do you sleep?

[10:40] <Zoffix> What do I need to look up to learn how to make stuff like we have for dalek, where it shows up as a service, like `sudo service dalek restart` ?

[10:40] <Zoffix> jdv79: robots don't sleep

[10:40] <Zoffix> I wanna make a geth service

[10:40] <Zoffix> on hack

[10:42] <timotimo> yeah, that's "system file" stuff from systemd

[10:43] <jnthn> Zoffix: fwiw, probably the best way to do it is to make NativeHOW do MethodContainer and accounting for that in its find_method/publish_method_cache. Then we can just write "cannot make an instance of this" methods in the type object

[10:44] <Zoffix> ok

[10:45] <jnthn> A moderately easy way to earn the MOP Hacker badge :-)

[10:46] <Zoffix> \o/

[10:46] <jnthn> (If you didn't already :))

[11:18] <Geth_> ¦ geth: 5bb36864d3 | (Zoffix Znet)++ | lib/Geth/Plugin/GitHub.pm6

[11:18] <Geth_> ¦ geth: Handle missing chans gracefuler

[11:18] <Geth_> ¦ geth:

[11:18] <Geth_> ¦ geth: Any.split still got a proto for split to the "safe" call fails

[11:18] <Geth_> ¦ geth: there and still tries to call Any.split triggering no-multi

[11:18] <Geth_> ¦ geth: review: https://github.com/perl6/geth/commit/5bb36864d3

[11:19] <Geth_> ¦ geth: c362e66b4b | (Zoffix Znet)++ | lib/Geth/GitHub/Hooks.pm6

[11:19] <Geth_> ¦ geth: Update to handle latest HTTP::Server::Tiny

[11:19] <Geth_> ¦ geth: review: https://github.com/perl6/geth/commit/c362e66b4b

[11:19] <Geth_> ¦ geth: 5536d31b03 | (Zoffix Znet)++ | util-dev/emulate-github-event.p6

[11:19] <Geth_> ¦ geth: Add a dev util

[11:19] <Geth_> ¦ geth:

[11:19] <Geth_> ¦ geth: For simulating a GitHub push event hook arriving to our server

[11:19] <Geth_> ¦ geth: review: https://github.com/perl6/geth/commit/5536d31b03

[11:21] <Geth_> ¦ geth: bb70c2cde0 | (Zoffix Znet)++ | META6.json

[11:21] <Geth_> ¦ geth: Remove bogus `test-depends`

[11:21] <Geth_> ¦ geth: review: https://github.com/perl6/geth/commit/bb70c2cde0

[11:25] <Geth_> ¦ geth: 5615eae1f1 | (Zoffix Znet)++ | META6.json

[11:25] <Geth_> ¦ geth: Ensure prereqs match our use

[11:25] <Geth_> ¦ geth: review: https://github.com/perl6/geth/commit/5615eae1f1

[11:25] <Geth_> ¦ geth: 8ca11367aa | (Zoffix Znet)++ | META6.json

[11:25] <Geth_> ¦ geth: Use semver

[11:25] <Geth_> ¦ geth: review: https://github.com/perl6/geth/commit/8ca11367aa

[11:49] <Geth__> ¦ geth: 8ca11367aa | (Zoffix Znet)++ | META6.json

[11:49] <Geth__> ¦ geth: Use semver

[11:49] <Geth__> ¦ geth: review: https://github.com/perl6/geth/commit/8ca11367aa

[11:55] <Geth__> ¦ specs: tbrowder++ created pull request #123: changes for Texas => ASCII

[11:55] <Geth__> ¦ specs: review: https://github.com/perl6/specs/pull/123

[11:55] <Geth__> ¦ specs: 1c979ab5a5 | (Tom Browder)++ | 2 files

[11:55] <Geth__> ¦ specs: changes for Texas => ASCII

[11:55] <Geth__> ¦ specs: review: https://github.com/perl6/specs/commit/1c979ab5a5

[11:55] <Geth__> ¦ specs: f52230c29b | (Zoffix Znet)++ (committed using GitHub Web editor) | 2 files

[11:55] <Geth__> ¦ specs: Merge pull request #123 from tbrowder/texas

[11:55] <Geth__> ¦ specs:

[11:55] <Geth__> ¦ specs: changes for Texas => ASCII

[11:55] <Geth__> ¦ specs: review: https://github.com/perl6/specs/commit/f52230c29b

[11:56] <Geth__> ¦ roast: 0bdfb1b157 | usev6++ | packages/Test/Util.pm

[11:56] <Geth__> ¦ roast: Use longer timeout for doesn't-hang on JVM

[11:56] <Geth__> ¦ roast: review: https://github.com/perl6/roast/commit/0bdfb1b157

[11:58] <Geth__> ¦ geth: 13becdb8c0 | (Zoffix Znet)++ | config.json

[11:58] <Geth__> ¦ geth: Hang in #perl6-toolchain too

[11:58] <Geth__> ¦ geth: review: https://github.com/perl6/geth/commit/13becdb8c0

[12:02] <MasterDuke> c: c3b044df169^,c3b044df169,HEAD my $a = rx/aaaaaab/; 'a' x 999999 ~ 'b' ~~ /$a/; say now - INIT now

[12:02] <yoleaux> 03:14Z <AlexDaniel-> MasterDuke: FWIW RT #132291

[12:02] <yoleaux> 06:56Z <AlexDaniel-> MasterDuke: hey, maybe you can take a look at RT #132294

[12:02] <synopsebot> RT#132291 [new]: https://rt.perl.org/Ticket/Display.html?id=132291 [LTA] Too few positionals passed to '' (for [:a] X [:b] -> ($i, $j) { })

[12:02] <synopsebot> RT#132294 [new]: https://rt.perl.org/Ticket/Display.html?id=132294 [REGRESSION][PERF] INTERPOLATE-related change made matching of large strings slower

[12:03] <committable6> MasterDuke, ¦c3b044df169^: «3.42546156» ¦c3b044d: «5.072197» ¦HEAD(d561517): ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[12:04] <MasterDuke> hm, that's unfortunate, not what my PR was supposed to do

[12:06] <Geth> ¦ geth: 13becdb8c0 | (Zoffix Znet)++ | config.json

[12:06] <Geth> ¦ geth: Hang in #perl6-toolchain too

[12:06] <Geth> ¦ geth: review: https://github.com/perl6/geth/commit/13becdb8c0

[12:09] <Zoffix> .tell nine I moved geth to hack. Something was wrong with the geth box. GitHub couldn't connect and I couldn't telnet to geth port's either (said connection refused). I tried restarting geth several times and connecting using localhost to geth's listener worked, but not from outside network. So I stopped the geth service on geth box (but did not remove it entirely) and set up a geth service on hack and

[12:09] <yoleaux> Zoffix: I'll pass your message to nine.

[12:09] <Zoffix> moved webhooks of all of our repo's to hack's geth.

[12:09] <Zoffix> .tell nine moved webhooks of all of our repo's to hack's geth.

[12:09] <yoleaux> Zoffix: I'll pass your message to nine.

[12:10] <Zoffix> Can someone with keys to rakudo/star change the geth web hook to geth.niner change the URL to http://hack.p6c.org:8888/?chan=#perl6-dev  (or give me access and I'll set it up myself)

[12:12] <Zoffix> PSA: Geth now lives on hack, in /home/geth/geth  There's a service setup, so if a restart of it is needed, you'd just do `sudo service geth restart`

[12:13] <jnthn> Zoffix: Given you access

[12:14] <Zoffix> \o/

[12:33] <MasterDuke> c: c3b044df169^,c3b044df169,HEAD my $a = "aaaaaab"; 'a' x 999999 ~ 'b' ~~ /$a/; say now - INIT now

[12:34] <committable6> MasterDuke, ¦c3b044df169^: «5.4635297» ¦c3b044d: «7.4579997» ¦HEAD(d561517): «4.9643206»

[12:34] <MasterDuke> right, that's the case my recent PR made faster

[12:41] <MasterDuke> goodness, the slow rx version spends 3s in the proto for Match's Bool and then another 1.5s in the multi it chose

[12:42] <MasterDuke> 2999980 calls to both

[12:44] <Zoffix> I'm having a hard time understanding where Perl6::Metamodel::MethodContainer fits into the picture of disabling int32.new... If I make NativeHOW do it, seems all the methods need to overridden. The method_table and submethod_table already exist in NetiveHOW without that role (they return an empty nqp::hash).

[12:46] <timotimo> Zoffix: then those can probably be thrown out

[12:47] <Zoffix> They fix a bug, I think: https://github.com/rakudo/rakudo/commit/9a2f7fcac723a43655a7aa89df1a40bc8dbe31e0

[12:48] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1193: Whitespace fix, convert tabs to spaces

[12:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1193

[12:49] <Geth> ¦ rakudo/nom: a0279e561a | MasterDuke17++ (committed using GitHub Web editor) | src/core/Match.pm

[12:49] <Geth> ¦ rakudo/nom: Whitespace fix, convert tabs to spaces

[12:49] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a0279e561a

[12:49] <Geth> ¦ rakudo/nom: 5092d6e60e | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Match.pm

[12:49] <Geth> ¦ rakudo/nom: Merge pull request #1193 from MasterDuke17/patch-1

[12:49] <Geth> ¦ rakudo/nom:

[12:49] <Geth> ¦ rakudo/nom: Whitespace fix, convert tabs to spaces

[12:49] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5092d6e60e

[12:54] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1194: Rest of tabs -> spaces in Match.pm

[12:54] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1194

[12:55] <Geth> ¦ rakudo/nom: 0262a997aa | MasterDuke17++ (committed using GitHub Web editor) | src/core/Match.pm

[12:55] <Geth> ¦ rakudo/nom: Rest of tabs -> spaces in Match.pm

[12:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0262a997aa

[12:55] <Geth> ¦ rakudo/nom: 0d217357aa | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Match.pm

[12:55] <Geth> ¦ rakudo/nom: Merge pull request #1194 from MasterDuke17/patch-1

[12:55] <Geth> ¦ rakudo/nom:

[12:55] <Geth> ¦ rakudo/nom: Rest of tabs -> spaces in Match.pm

[12:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0d217357aa

[13:01] <Zoffix> greppable6, \b(int32|int|int64|int16|int8)\.new

[13:01] <greppable6> Zoffix, Found nothing!

[13:01] <Zoffix> timotimo: do we really need a deprecation for it?

[13:01] <Zoffix> It's be a deprecation for a feature so rarely used that it's not used in the ecosystem and one that never worked right

[13:02] <Zoffix> c: 2017.06 say int8.new: 999999999999999999999999999999999999999999999999999999999999999999999999999999999999

[13:02] <committable6> Zoffix, ¦2017.06: «999999999999999999999999999999999999999999999999999999999999999999999999999999999999»

[13:03] <Zoffix> Oh damn: https://github.com/nkh/P6-Data-Dump-Tree/blob/a0374d5355253419a633151faa7e277172b570fc/t/48_type_NativeCall.t#L45

[13:05] <Zoffix> nqp: nqp::getstaticcode(sub ( | ) { nqp::die('Cannot instantiate native type') })

[13:05] <camelia> nqp-moarvm: OUTPUT: «Unable to parse expression in routine_def; couldn't find final ')'  at line 2, near "| ) { nqp:"␤   at gen/moar/stage2/NQPHLL.nqp:707  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:panic)␤ from gen/moar/stage2/NQPHLL.nqp:714  (/home/camelia/raku…»

[13:05] <Zoffix> any way to spec "take any args" in nqp?

[13:06] <Zoffix> More of them: https://github.com/wentam/P6-Graffiks/blob/ec8912519ad52e7083c021c79297466b9a37d428/lib/Graffiks/Camera.pm6#L86

[13:06] <Zoffix> So no use of ints but nums quite a few :(

[13:07] <moritz> nqp: sub f(*@a) { nqp::say(@a) }; f(1, 2)

[13:07] <camelia> nqp-moarvm: OUTPUT: «cannot stringify this␤   at <tmp>:1  (<ephemeral file>:f)␤ from <tmp>:1  (<ephemeral file>:<mainline>)␤ from gen/moar/stage2/NQPHLL.nqp:1542  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:eval)␤ from gen/moar/stage2/NQPHLL.nqp:1779  (/home/c…»

[13:07] <moritz> nqp: sub f(*@a) { nqp::say(nqp::join(', ', @a)) }; f(1, 2)

[13:07] <camelia> nqp-moarvm: OUTPUT: «This representation (P6int) cannot unbox to a native string (for type BOOTInt)␤   at <tmp>:1  (<ephemeral file>:f)␤ from <tmp>:1  (<ephemeral file>:<mainline>)␤ from gen/moar/stage2/NQPHLL.nqp:1542  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarv…»

[13:07] <moritz> nqp: sub f(*@a) { nqp::say(nqp::join(', ', @a)) }; f("a", "b")

[13:07] <camelia> nqp-moarvm: OUTPUT: «a, b␤»

[13:08] <Zoffix> nqp: sub f(*@a) { nqp::say(nqp::join(', ', @a)) }; f("a", "b", :foo(42))

[13:08] <camelia> nqp-moarvm: OUTPUT: «Unexpected named argument 'foo' passed␤   at <tmp>:1  (<ephemeral file>:f)␤ from <tmp>:1  (<ephemeral file>:<mainline>)␤ from gen/moar/stage2/NQPHLL.nqp:1542  (/home/camelia/rakudo-m-inst-1/share/nqp/lib/NQPHLL.moarvm:eval)␤ from gen/moar/stage2/NQPHLL.n…»

[13:08] <Zoffix> nqp: sub f(*@a, *%_) { nqp::say(nqp::join(', ', @a)) }; f("a", "b", :foo(42))

[13:08] <camelia> nqp-moarvm: OUTPUT: «a, b␤»

[13:08] <Zoffix> ok thanks

[13:13] <Zoffix> Well, I done this and it works: https://gist.github.com/zoffixznet/19825d7c42479982d27eeab33f0c3b01

[13:14] <Zoffix> make method_table return an nqp::hash that got a blowy method new in it (in the past it was just an empty nqp::hash)

[13:19] <Zoffix> .in 1d https://irclog.perlgeek.de/perl6-dev/2017-10-14#i_15301581

[13:19] <yoleaux> Zoffix: I'll remind you on 15 Oct 2017 13:19Z

[13:21] <Zoffix> I've no idea how to do deprecation from there

[13:21] <Zoffix> from NativeHow

[13:22] <Zoffix> What does getstaticcode do? Like what's a "static code"?

[13:24] <moritz> when you have a closure, you have a pointer to a thing that holds the captured lexpad and the "actual" code

[13:24] <moritz> that's what "static code" - code reference that's not a closure

[13:25] <Zoffix> Ah

[13:31] <Zoffix> m: use nqp; say nqp::getlexdyn('&DEPRECATED')

[13:31] <camelia> rakudo-moar 0d217357a: OUTPUT: «(signal SEGV)»

[13:31] <Zoffix> :)

[13:33] <Zoffix> Filed as https://rt.perl.org/Ticket/Display.html?id=132300

[13:39] <MasterDuke> what causes lots of time spent in a proto? in my experiments with INTERPOLATE, it was because the find_best_dispatchee wasn't able to cache the right method. but in the profile i'm looking at now, find_best_dispatchee doesn't even appear

[13:44] <MasterDuke> https://github.com/rakudo/rakudo/blob/nom/src/core/Match.pm#L772-L774 the proto on line 772, and it always calls the multi on line 774

[13:50] <buggable> New CPAN upload: Config-Parser-toml-1.0.1.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/Config-Parser-toml-1.0.1.tar.gz

[13:50] <buggable> New CPAN upload: Config-Parser-yaml-1.0.1.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/Config-Parser-yaml-1.0.1.tar.gz

[14:14] <Zoffix> Weird. `DEPRECATED "foo"; DEPRECATED "bar"` just shows 1 deprecation :/

[14:29] <Zoffix> Is it possible to add some sort of annotations to a method? Roughly thinking about how Cool methods that pass captures could be fixed up to be faster and I thought maybe we could stick some annotation to the relevant methods in Cool and then the optimizer could just rewrite the calls to Cool.meow(<some args>) to Cool.Stringy.meow(<some args>)

[14:43] <Geth> ¦ rakudo/nom: 9d9c7f9c3b | (Zoffix Znet)++ | src/Perl6/Metamodel/NativeHOW.nqp

[14:43] <Geth> ¦ rakudo/nom: Deprecate .new on native types

[14:43] <Geth> ¦ rakudo/nom:

[14:43] <Geth> ¦ rakudo/nom: - For now, just maintain old behaviour of returning a boxed version

[14:43] <Geth> ¦ rakudo/nom: - After 2017.12, toss the deprecation and make the methods die

[14:43] <Geth> ¦ rakudo/nom: - Fixes RT#132293: https://rt.perl.org/Ticket/Display.html?id=132293

[14:43] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9d9c7f9c3b

[14:43] <synopsebot> RT#132293 [open]: https://rt.perl.org/Ticket/Display.html?id=132293 [REGRESSION] It is no longer possible to create native ints with .new (int32.new(42))

[14:44] <Geth> ¦ rakudo/nom: cc6c05586b | (Zoffix Znet)++ | t/05-messages/01-errors.t

[14:44] <Geth> ¦ rakudo/nom: Test behaviour of .new on native types

[14:44] <Geth> ¦ rakudo/nom:

[14:44] <Geth> ¦ rakudo/nom: RT#132293: https://rt.perl.org/Ticket/Display.html?id=132293

[14:44] <Geth> ¦ rakudo/nom: Rakudo fix: https://github.com/rakudo/rakudo/commit/9d9c7f9c3b

[14:44] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cc6c05586b

[14:49] <Zoffix> .in 70d take care of tossing deprecation in https://github.com/rakudo/rakudo/commit/9d9c7f9c3b and https://github.com/rakudo/rakudo/commit/cc6c05586b , bruh

[14:49] <yoleaux> Zoffix: I'll remind you on 23 Dec 2017 14:49Z

[15:18] <Geth> ¦ roast: 4043a63b60 | (Zoffix Znet)++ | packages/Test/Util.pm

[15:18] <Geth> ¦ roast: Revert "Use longer timeout for doesn't-hang on JVM"

[15:18] <Geth> ¦ roast:

[15:18] <Geth> ¦ roast: This reverts commit 0bdfb1b157b5286480d8355cf62ce1a76fd445ea.

[15:18] <Geth> ¦ roast:

[15:18] <Geth> ¦ roast: Will rewrite a better version in next commit

[15:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/4043a63b60

[15:18] <Geth> ¦ roast: bdf8904da6 | (Zoffix Znet)++ | 2 files

[15:18] <Geth> ¦ roast: Rescale ROAST_TIMING_SCALE for JVM

[15:18] <Geth> ¦ roast:

[15:18] <Geth> ¦ roast: 'cause it takes longer to fire up procs

[15:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bdf8904da6

[15:19] <Zoffix> (this version will scale doesn't-hangs with custom wait times too; not just the default times)

[15:22] <Zoffix> I think the most annoying thing about "ANNOYING" ticket tags is the tag, not the bug the ticket describes

[15:23] <Zoffix> Like wtf is RT#132012 an "annoying" ticket?

[15:23] <synopsebot> RT#132012 [new]: https://rt.perl.org/Ticket/Display.html?id=132012 [ANNOYING] Numeric values of signals are wrong (say +SIGUSR1)

[15:23] <Zoffix> .tell AlexDaniel [ANNOYING] ticket tag is annoying

[15:23] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[15:49] <Zoffix> "Show message only if value has method .base"    "if $.num.perl.^can('base')"  why yes, .perl it first :P

[15:49] <Zoffix> ZofBot: good job!

[15:49] <ZofBot> Zoffix, weigh my friend's affection with mine own

[16:07] <dogbert17> ZOFFLOP t/spec/S02-types/baghash.t

[16:08] <dogbert17> 'Cannot unbox 64 bit wide bigint into native integer'

[16:12] <Zoffix> dogbert17: is it actually a flop?

[16:12] <Zoffix> As in, are you sure it fails only some times and not all the time?

[16:13] <Zoffix> Also, do you have latest and greatest rakudo?

[16:13] <Zoffix> And if yes, what's the full output

[16:14] <Geth> ¦ rakudo/nom: 441fc9b32b | (Zoffix Znet)++ | t/05-messages/01-errors.t

[16:14] <Geth> ¦ rakudo/nom: Do not add more stuff into 01-errors.t

[16:14] <Geth> ¦ rakudo/nom:

[16:14] <Geth> ¦ rakudo/nom: It takes forever to run and there's no reason we can't split it

[16:14] <Geth> ¦ rakudo/nom: up into multiple files.

[16:14] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/441fc9b32b

[16:28] <Geth> ¦ rakudo/nom: de2b9ff720 | (Zoffix Znet)++ | 2 files

[16:28] <Geth> ¦ rakudo/nom: Remove unwanted .perl call

[16:28] <Geth> ¦ rakudo/nom:

[16:28] <Geth> ¦ rakudo/nom: Fixes RT#132295: https://rt.perl.org/Ticket/Display.html?id=132295

[16:28] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/de2b9ff720

[16:28] <synopsebot> RT#132295 [new]: https://rt.perl.org/Ticket/Display.html?id=132295 [REGRESSION][LTA] :2(…) radix syntax no longer suggests using .base (:2(42))

[16:38] <ugexe> m: package Foo { our &foo := -> $a { say $a }; }; Foo::foo(1); # should this work? if not, does it differ from (the working) `our sub ...`?

[16:38] <camelia> rakudo-moar 441fc9b32: OUTPUT: «Cannot invoke this object (REPR: Uninstantiable; Callable)␤  in block <unit> at <tmp> line 1␤␤»

[16:40] <Zoffix> Seems to work if you don't use binding:

[16:40] <Zoffix> m: package Foo { our &foo = -> $a { say $a }; }; Foo::foo(1);

[16:40] <camelia> rakudo-moar 441fc9b32: OUTPUT: «1␤»

[16:40] <Zoffix> No idea if it should work with it as well

[16:41] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1195: Optimize Regex multi for INTERPOLATE

[16:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1195

[16:41] <ugexe> cool

[16:47] <timotimo> i thought "zofflop" is just "flops on zoffix' system", did dogbert root zoffix' box? :)

[16:48] <Zoffix> no, zofflop is "flop" with a prefix that makes it easier to search for in the log

[16:48] <Zoffix> This looks bogus: https://github.com/rakudo/rakudo/commit/ec79843830588c0ef941e79ea4bab5bce05122f9

[16:51] <Zoffix> m:  my $x = "abc"; $x ~~ tr|abc|{$/.uc}|; say $x

[16:51] <camelia> rakudo-moar 441fc9b32: OUTPUT: «{$/␤»

[16:51] <Zoffix> Just gonna toss all the $/ fumbling in Str.trans and see if any tests explode

[16:51] <Zoffix> (it's also not done for Cool.trans, which is how I noticed it)

[17:01] <travis-ci> Rakudo build failed. Zoffix Znet 'Do not add more stuff into 01-errors.t

[17:01] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/287962876 https://github.com/rakudo/rakudo/compare/cc6c05586b62...441fc9b32b70

[17:01] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[17:03] <Zoffix> why do travis reports now have these slanted lines across them :?

[17:03] <Zoffix> One Linux job segfaulted during make Segmentation fault (core dumped)

[17:06] <Zoffix> Tossing everything makes this test fail:

[17:06] <Zoffix> m: say '"foo  &   bar"'.trans(/(' '+)/ => {' ' ~ ('&nbsp;' x ($0.chars - 1))}, /(\W)/ => {"&#{ord($0)};"})

[17:06] <camelia> rakudo-moar de2b9ff72: OUTPUT: «&#34;foo &nbsp;&#38; &nbsp;&nbsp;bar&#34;␤»

[17:07] <Zoffix> m: say '"foo  &   bar"'.trans(/(' '+)/ => {' ' ~ ('&nbsp;' x ($0.chars - 1))}, /(\W)/ => {"&#{ord($0)};"}); say $/

[17:07] <camelia> rakudo-moar de2b9ff72: OUTPUT: «&#34;foo &nbsp;&#38; &nbsp;&nbsp;bar&#34;␤Nil␤»

[17:07] <Zoffix> But then, I still don't get why it's grabbing caller's $/

[17:07] <Zoffix> Gonna just file it for now

[17:15] <Zoffix> Filed as https://rt.perl.org/Ticket/Display.html?id=132302

[17:20] <Geth> ¦ roast: c4f9ac0bbd | usev6++ | 8 files

[17:20] <Geth> ¦ roast: [jvm] Skip hanging tests

[17:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c4f9ac0bbd

[17:22] <Geth> ¦ rakudo/nom: c1e5cfcfa5 | usev6++ | t/spectest.data

[17:22] <Geth> ¦ rakudo/nom: [jvm] Don't run files when all tests are hanging

[17:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c1e5cfcfa5

[17:37] <Zoffix> I don't get how this works at all. It's missing a decont: https://github.com/rakudo/rakudo/blob/nom/src/core/Str.pm#L150

[17:37] <Zoffix> m: use nqp; class Foo { method x ($suffix) { say nqp::getattr($suffix,Str,'$!value') } }.x: "x"

[17:37] <camelia> rakudo-moar c1e5cfcfa: OUTPUT: «P6opaque: no such attribute '$!value' in type Str when trying to get a value␤  in method x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:37] <Zoffix> m: my $x = "x"; say "x".ends-with: $x

[17:37] <camelia> rakudo-moar c1e5cfcfa: OUTPUT: «True␤»

[17:37] <Zoffix> yet it doesn't explode. Huh?

[17:39] <MasterDuke> and nothing changes if you add the decont?

[17:39] <Zoffix> Changes how?

[17:40] <Zoffix> It's now behaving as if the decont was already there

[17:40] <MasterDuke> .ends-with still produces the same results?

[17:41] <Zoffix> Haven't tried. I'd expect it to. Don't really wanna pay the compilation price

[17:41] <dogbert17> Zoffix: it's not a flapper, it fails every time, I suspect it's 32 bit related, it's the very last test which causes the problem

[17:41] <dogbert17> t/spec/S02-types/baghash.rakudo.moar (Wstat: 65280 Tests: 292 Failed: 0)

[17:41] <dogbert17> Non-zero exit status: 255

[17:41] <dogbert17> Parse errors: Bad plan.  You planned 293 tests but ran 292.

[17:41] <Zoffix> m: use nqp; class Foo { method x (Str:D $suffix) { say nqp::p6bool(nqp::getattr($suffix,Str,'$!value')) } }.x: "x"

[17:41] <camelia> rakudo-moar c1e5cfcfa: OUTPUT: «True␤»

[17:41] <Zoffix> m: use nqp; class Foo { method x (Str $suffix) { say nqp::p6bool(nqp::getattr($suffix,Str,'$!value')) } }.x: "x"

[17:41] <camelia> rakudo-moar c1e5cfcfa: OUTPUT: «True␤»

[17:41] <Zoffix> m: use nqp; class Foo { method x (Str:D $suffix) { say nqp::p6bool(nqp::getattr($suffix,Str,'$!value')) } }.x: "x"

[17:41] <camelia> rakudo-moar c1e5cfcfa: OUTPUT: «True␤»

[17:42] <Zoffix> k, looks like Str type constraint does some sort of decont voodoo

[17:42] <dogbert17> m: use Test; is-deeply ("foo" => 10000000000000000000).BagHash.grab(1), ("foo",),"can .grab() a BagHash key with weight larger than 64 bits"

[17:42] <camelia> rakudo-moar c1e5cfcfa: OUTPUT: «ok 1 - can .grab() a BagHash key with weight larger than 64 bits␤»

[17:42] <Zoffix> oh wait

[17:42] <Zoffix> Yeah

[17:42] <Zoffix> m: use nqp; class Foo { method x ($suffix) { say nqp::p6bool(nqp::getattr($suffix,Str,'$!value')) } }.x: "x"

[17:42] <camelia> rakudo-moar c1e5cfcfa: OUTPUT: «P6opaque: no such attribute '$!value' in type Str when trying to get a value␤  in method x at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[17:42] <dogbert17> this fails for me with

[17:42] <dogbert17> Cannot unbox 64 bit wide bigint into native integer

[17:42] <dogbert17> in sub _is_deeply at /home/dogbert/repos/rakudo/install/share/perl6/sources/C712FE6969F786C9380D643DF17E85D06868219E (Test) line 652

[17:42] <dogbert17> in sub is-deeply at /home/dogbert/repos/rakudo/install/share/perl6/sources/C712FE6969F786C9380D643DF17E85D06868219E (Test) line 598

[17:42] <Zoffix> dogbert17: well, is your rakudo a HEAD? It was fixed recently

[17:43] <dogbert17> 2017.09-410-gcc6c05586

[17:43] <Zoffix> m: say $PERL.compiler.version

[17:43] <camelia> rakudo-moar c1e5cfcfa: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Variable '$PERL' is not declared. Did you mean 'Perl'?␤at <tmp>:1␤------> 3say 7⏏5$PERL.compiler.version␤»

[17:43] <Zoffix> m: say $*PERL.compiler.version

[17:43] <camelia> rakudo-moar c1e5cfcfa: OUTPUT: «v2017.09.413.gc.1.e.5.cfcfa␤»

[17:43] <Zoffix> dogbert17: and that's on 32-bit box?

[17:43] <dogbert17> yes

[17:43] * dogbert17 pull latest Rakudo

[17:43] <Zoffix> 410 would have had the fix already

[17:44] <Zoffix> dogbert17: you could reopen the ticket and say it still fails on 32-bit: https://rt.perl.org/Ticket/Display.html?id=132279

[17:44] * dogbert17 parsing ...

[17:45] <Zoffix> and include --ll-exception of perl6 -e '("foo" => 10000000000000000000).BagHash.grab(1)'

[17:49] <dogbert17> false alarm, it works with Rakudo head. Sorry for the noise

[17:50] <Zoffix> oh, *phew*

[17:54] <Zoffix> What do the cool kids use to measure something too close to noise? Like which one's faster:   method x($x) { $x.uc } or method x(\x) { x.uc }

[17:54] <MasterDuke> callgrind will give you the actual instruction count

[17:54] <Zoffix> I get from 4.6x faster to 2x slower with Benchy -_-

[17:55] <Zoffix> sudo aptitude search callgrind... nothing found

[17:55] <MasterDuke> it's part of valgrind

[17:55] <MasterDuke> valgrind --tool=callgrind <...>

[17:55] <Zoffix> ok

[17:56] <MasterDuke> and then kcachgrind is a nice viewer for the results if you want more than just the instruction count

[17:56] <Zoffix> doesn't seem to print anything for me. Creates an empty file :/

[17:57] <dogbert17> how did you run it?

[17:58] <Zoffix> dogbert17: valgrind --tool=callgrind ./perl6 foo.p6

[17:58] <MasterDuke> oh, you might need to call the moar executable directly, not the perl6 shell script

[17:58] <Zoffix> Oh

[17:58] <Zoffix> sounds hard

[17:58] * Zoffix puts it on the back burner for now

[17:59] <MasterDuke> eh, i just cat perl6 and copy it onto the command line

[17:59] <dogbert17> make a copy of perl6-valgrind-m and stick in the '--tool=callgrind' there

[17:59] <MasterDuke> and i also have some bash aliases that do that for me

[17:59] <Zoffix> ok

[18:00] <yoleaux> Zoffix: see if nqp::eqaddr deconting stuff needs to be done anywhere in core

[18:00] <Zoffix> MVM_VALGRIND_OPTS=--tool=callgrind ./perl6-valgrind-m foo.p6  works too

[18:00] <Zoffix> yoleaux: meh

[18:00] <MasterDuke> heh, good timing past Zoffix

[18:04] <dogbert17> Zoffix: I guess you know that the generated files are, in essence, unreadable. KCachegrind, like MasterDuke wrote or callgrind_annotate if you want to stay in the shell

[18:05] <Zoffix> I opened cachegrind, but I don't know what to look for. The numbers fluctuate on each run of the script

[18:07] <Zoffix> There are 19 fewer `optimize_decont` calls and that's all I can interpret. I guess you need to know what to look for

[18:07] <dogbert17> I belive that the recommended cmdline should be something like 'MVM_SPESH_BLOCKING=1 valgrind --tool=callgrind ./perl6 foo.p6' the fluctuations might go down

[18:07] <yoleaux> Zoffix: fix (my @a is default(42) = <a b c>)[1]:delete; @a.Slip.List.say, bruh

[18:08] <Zoffix> yoleaux: dude, leave me be :(

[18:08] <dogbert17> correction 'MVM_SPESH_BLOCKING=1 MVM_VALGRIND_OPTS=--tool=callgrind ./perl6-valgrind-m foo.p6'

[18:09] <Zoffix> I need a better reminder bot

[18:11] <Zoffix> I was gonna write all the tests today... Still haven't started :/

[18:11] <Geth> ¦ rakudo/nom: 04b171bd12 | (Daniel Green)++ | src/core/Match.pm

[18:11] <Geth> ¦ rakudo/nom: Optimize Regex multi for INTERPOLATE

[18:11] <Geth> ¦ rakudo/nom:

[18:11] <Geth> ¦ rakudo/nom: Move some code into a conditional and don't allocate some variables if

[18:11] <Geth> ¦ rakudo/nom: not needed.

[18:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/04b171bd12

[18:11] <Geth> ¦ rakudo/nom: 0bd2b27df5 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | src/core/Match.pm

[18:11] <Geth> ¦ rakudo/nom: Merge pull request #1195 from MasterDuke17/optimize_Regex_multi_for_INTERPOLATE

[18:11] <Geth> ¦ rakudo/nom:

[18:11] <Geth> ¦ rakudo/nom: Optimize Regex multi for INTERPOLATE

[18:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0bd2b27df5

[18:13] <Zoffix> dogbert17: still fluctuating enough to wash the difference

[18:13] <dogbert17> :(

[18:13] <Zoffix> Maybe there ain't any. Just gonna leave it./

[18:20] <AlexDaniel-> .

[18:20] <AlexDaniel> .

[18:20] <yoleaux> 15:23Z <Zoffix> AlexDaniel: [ANNOYING] ticket tag is annoying

[18:21] <AlexDaniel-> Zoffix: RT #132012 is annoying for the same reason described in https://rt.perl.org/Ticket/Display.html?id=131003#txn-1496218

[18:21] <synopsebot> RT#132012 [open]: https://rt.perl.org/Ticket/Display.html?id=132012 [ANNOYING] Numeric values of signals are wrong (say +SIGUSR1)

[18:21] <AlexDaniel-> some signals have correct values and you don't notice it right away, and there's practically no workaround

[18:21] <AlexDaniel-> ok you can hardcode the values for a particular system, but uhhh…

[18:22] <AlexDaniel-> that's an annoying workaround :)

[18:22] <Zoffix> Seems a pointless tag and it certainly makes me want to fix those less.

[18:23] <Zoffix> "

[18:23] <Zoffix> "» is no longer shuffled (<a b c d>».say)" why is this annoying?

[18:23] <Zoffix> This tag is nonsense

[18:24] <AlexDaniel-> because we keep explaining to people “hey actually it doesn't work and it just happens that these are returned in the same order right now”

[18:25] <timotimo> Zoffix: if you want less noisy results from callgrind, set the spesh blocking env var

[18:25] <AlexDaniel-> the tag differentiates painful issues with other bugs that are mostly unnoticeable (or, when noticed, are easily workaroundable)

[18:26] <MasterDuke> i think you could replace annoying with lta

[18:26] <AlexDaniel-> it's other way round

[18:26] <AlexDaniel-> LTA = it's ok but could be better

[18:27] <Zoffix> timotimo: I did. Still too noisy

[18:27] <AlexDaniel-> ANNOYING = something that keeps getting in your way and makes rakudo look like garbage

[18:27] <timotimo> damn

[18:28] <Zoffix> AlexDaniel-: the tag differentiates issues I'll personally gonna be avoiding. It's like a bug reporter who's shouting at how pissed off they are about a bug. You just phase them out and go fix something nicer.

[18:28] <AlexDaniel-> Zoffix: I'm sorry that it makes you feel that way

[18:29] <AlexDaniel-> Zoffix: maybe if you suggest some other name for that purpose, I can retag those

[18:32] <Zoffix> AlexDaniel-: anything that doesn't require you to explain why we're using such a tag. So far you had to explain "ANNOYING" to at least two people.

[18:32] <AlexDaniel-> it's ok for a new tag

[18:32] <AlexDaniel-> I had to explain what a REGRESSION is a couple of times also…

[18:33] <AlexDaniel-> and it's ok for people to ask why some particular issue is annoying (maybe they don't see the actual issue, it's ok to ask for clarification)

[18:36] <MasterDuke> m: class A { method x($x) { $x.uc } }; my $a; $a = A.x("aBc") for ^10_000_000; say $a; say now - INIT now

[18:36] <camelia> rakudo-moar 0bd2b27df: OUTPUT: «ABC␤5.4048479␤»

[18:36] <MasterDuke> m: class A { method x(\x) { x.uc } }; my $a; $a = A.x("aBc") for ^10_000_000; say $a; say now - INIT now

[18:36] <camelia> rakudo-moar 0bd2b27df: OUTPUT: «ABC␤3.85693285␤»

[18:37] <MasterDuke> Zoffix: ^^^ doesn't look like noise? or was that not what you were actually testing?

[18:39] <Zoffix> MasterDuke: you just ran it twice though.

[18:39] <MasterDuke> timotimo: do you know anything about protos?

[18:39] <Zoffix> m: class A { method x(\x) { x.uc } }; my $a; $a = A.x("aBc") for ^10_000_000; say $a; say now - INIT now

[18:39] <camelia> rakudo-moar 0bd2b27df: OUTPUT: «ABC␤3.40128488␤»

[18:39] <Zoffix> m: class A { method x(\x) { x.uc } }; my $a; $a = A.x("aBc") for ^10_000_000; say $a; say now - INIT now

[18:39] <camelia> rakudo-moar 0bd2b27df: OUTPUT: «ABC␤3.7919970␤»

[18:39] <Zoffix> m: class A { method x($x) { $x.uc } }; my $a; $a = A.x("aBc") for ^10_000_000; say $a; say now - INIT now

[18:39] <MasterDuke> i ran it a bunch of times locally

[18:39] <Zoffix> m: class A { method x($x) { $x.uc } }; my $a; $a = A.x("aBc") for ^10_000_000; say $a; say now - INIT now

[18:39] <camelia> rakudo-moar 0bd2b27df: OUTPUT: «ABC␤5.3459838␤»

[18:39] <camelia> rakudo-moar 0bd2b27df: OUTPUT: «ABC␤5.359951␤»

[18:39] <Zoffix> MasterDuke: ah. I ran them both in one program, so I guess that's what wiped the difference in Benchy

[18:40] <Zoffix> ok

[18:40] <MasterDuke> huh, wouldn't have expected that to matter

[18:41] <Zoffix> well, GC is involved no?

[18:42] <MasterDuke> right, that could effect things

[18:42] <Zoffix> Weird, this script consistently shows 2017.09-173-g4d0ead2 to be 1-15ms seconds faster than HEAD https://gist.github.com/zoffixznet/988071e6fb158536a35a75ef0bc88db7

[18:43] <Zoffix> Running as   ./perl6 bar.p6 -e '42.starts-with: "x" for ^100_00; say now - INIT now'

[18:43] <Zoffix> bar.p6 being the script and ./perl6 being head

[18:44] <MasterDuke> benchable6: 4d0ead2,HEAD 42.starts-with: "x" for ^100_000

[18:44] <benchable6> MasterDuke, starting to benchmark the 2 given commits

[18:45] <benchable6> MasterDuke, benchmarked the given commits, now zooming in on performance differences

[18:45] <benchable6> MasterDuke, ¦4d0ead2: «1.0593» ¦HEAD: «1.1259»

[18:46] <MasterDuke> benchable6: 4d0ead2,HEAD 42.starts-with: "x" for ^500_000

[18:46] <benchable6> MasterDuke, starting to benchmark the 2 given commits

[18:47] <benchable6> MasterDuke, benchmarked the given commits, now zooming in on performance differences

[18:47] <benchable6> MasterDuke, ¦4d0ead2: «4.7527» ¦HEAD: «4.8870»

[18:58] <Zoffix> ZOFFLOP: t/spec/S17-procasync/kill.t

[18:59] <Geth> ¦ rakudo/nom: 1275fd4ab7 | (Zoffix Znet)++ | 2 files

[18:59] <Geth> ¦ rakudo/nom: Make Cool.[starts|ends]-with 12x faster

[18:59] <Geth> ¦ rakudo/nom:

[18:59] <Geth> ¦ rakudo/nom: Part of fixing RT#132280:

[18:59] <Geth> ¦ rakudo/nom: https://rt.perl.org/Ticket/Display.html?id=132280

[18:59] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1275fd4ab7

[18:59] <synopsebot> RT#132280 [new]: https://rt.perl.org/Ticket/Display.html?id=132280 [REGRESSION][PERF] Cool methods that take and pass a Capture are uber slower (.contains: 'meow' for ^10000_00)

[18:59] <Zoffix> Gonna do rest of 'em later today.

[19:00] <MasterDuke> nice

[19:01] <Zoffix> Not really, 'cause many of these is just gaining back speed lost earlier in 2017. But we might break the 3s test-t barrier, 'cause I think I recall it getting slower when these methods were fixed to be captures, but I didn't know why it'd get slow

[19:14] <travis-ci> Rakudo build passed. usev6 '[jvm] Don't run files when all tests are hanging'

[19:14] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/287979127 https://github.com/rakudo/rakudo/compare/de2b9ff7209e...c1e5cfcfa595

[19:41] <travis-ci> Rakudo build errored. Zoffix Znet 'Merge pull request #1194 from MasterDuke17/patch-1

[19:41] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/287916515 https://github.com/rakudo/rakudo/compare/5092d6e60e45...0d217357aa80

[19:41] <buggable> [travis build above] ✓ All failures are due to: missing build log (1 failure).

[19:43] <timotimo> MasterDuke: not much; what's up?

[19:54] <timotimo> haha. "not much" is also the common answer to "what's up?"

[19:55] <timotimo> i was going to ask how to best turn "while $data-which-is-a-Channel.receive -> $blop { }" into something that uses await to free up the thread in question ... then i remembered we have "react whenever", which ought to be better

[20:02] <timotimo> oh wow, that's quite the performance hit

[20:05] <timotimo> 1_500_000 messages with a while try receive gives me 8.95s user, 6.15s elapsed; using react whenever gives me 10s user, 5.88s user, but for only 50_000 messages

[20:05] <timotimo> 30x difference ;(

[20:06] <Zoffix> :o

[20:09] <Zoffix> AlexDaniel-: whatdyumean reject RT#131515? If that's the right commit, then it should be optimized. The assumtion in the commit is we can be expensive because it won't impact anything, but if it is the right commit, then the assumption is wrong

[20:09] <synopsebot> RT#131515 [open]: https://rt.perl.org/Ticket/Display.html?id=131515 [BISECTME][PERF] Performance loss in some commits

[20:11] <AlexDaniel-> Zoffix: I was thinking that it only impacts the spectest and normal users will never notice it otherwise… now that you said it, I realize it may impact module tests and anything else that tests exceptions

[20:11] <AlexDaniel-> Zoffix: so you're right

[20:11] <timotimo> *sigh*, i'm glad someone is going to make profiler work with multithreade programs ...

[20:12] <Zoffix> AlexDaniel-: ah, never mind, it's in .message which has since been optimized away to being called only when actually needed, so I'll close the ticket

[20:12] <Zoffix> AlexDaniel-: well, bisect it and if it is the commit, then reject it

[20:12] <AlexDaniel-> Zoffix: oh! OK

[20:13] <AlexDaniel-> I'll do it right now if it's that simple

[20:13] <timotimo> adding --profile to this program gives me "inconsistent bind result" m(

[20:14] <Zoffix> c: 2500e50,2500e50^,HEAD for ^1000 { try "foo".meow }

[20:14] <committable6> Zoffix, ¦2500e50: ««timed out after 10 seconds» «exit signal = SIGHUP (1)»» ¦2500e50^,HEAD(1275fd4): «»

[20:14] <AlexDaniel-> right

[20:14] <Zoffix> c: 2500e50,2500e50^,HEAD for ^100 { try "foo".meow }; say "done"

[20:14] <committable6> Zoffix, ¦2500e50: ««timed out after 10 seconds» «exit signal = SIGHUP (1)»» ¦2500e50^,HEAD(1275fd4): «done»

[20:15] <Zoffix> c: 2500e50,2500e50^,HEAD for ^10 { try "foo".meow }; say "done"

[20:15] <committable6> Zoffix, ¦2500e50,2500e50^,HEAD(1275fd4): «done»

[20:15] <Zoffix> c: 2500e50,2500e50^,HEAD for ^10 { try "foo".meow }; say now - INIT now

[20:15] <committable6> Zoffix, ¦2500e50: «3.46179999» ¦2500e50^: «0.00295601» ¦HEAD(1275fd4): «0.0024989»

[20:15] * Zoffix rejects

[20:15] <AlexDaniel-> OK

[20:15] <AlexDaniel-> or maybe resolve instead?

[20:16] <AlexDaniel-> it *is* resolved after all

[20:16] <Zoffix> right

[20:16] <Zoffix> Done.

[20:16] <AlexDaniel-> yay

[20:29] <Geth> ¦ rakudo/nom: a7b0449375 | usev6++ | src/vm/jvm/runtime/org/perl6/rakudo/RakudoContainerSpec.java

[20:29] <Geth> ¦ rakudo/nom: [jvm] Move handling of Nil back to 'store'

[20:29] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a7b0449375

[20:34] <Zoffix> ZOFVM: Files=1278, Tests=152667, 151 wallclock secs (21.59 usr  3.47 sys + 3259.22 cusr 180.73 csys = 3465.01 CPU)

[20:36] <Geth> ¦ rakudo/nom: 530e129461 | (Zoffix Znet)++ | 2 files

[20:36] <Geth> ¦ rakudo/nom: Make Cool.contains 11.5x faster

[20:36] <Geth> ¦ rakudo/nom:

[20:36] <Geth> ¦ rakudo/nom: Part of fixing RT#132280:

[20:36] <Geth> ¦ rakudo/nom: https://rt.perl.org/Ticket/Display.html?id=132280

[20:36] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/530e129461

[20:36] <synopsebot> RT#132280 [new]: https://rt.perl.org/Ticket/Display.html?id=132280 [REGRESSION][PERF] Cool methods that take and pass a Capture are uber slower (.contains: 'meow' for ^10000_00)

[20:44] <Geth> ¦ roast: 611988f01f | usev6++ | S02-types/mix.t

[20:44] <Geth> ¦ roast: [jvm] Skip test that blows up whole test file

[20:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/611988f01f

[20:54] <Zoffix> weird.. Patched Cool.split and `42.split: "x" for ^1000_00` now got 2.7x faster, but `42.split: /\d/ for ^1000_0` saw no change whatsoever :S

[20:55] <Zoffix> Oh, prolly 'cause it's so damn slow, the dispatch is drowned

[20:56] <timotimo> i'd assume so

[20:56] <Geth> ¦ rakudo/nom: 785d2f251d | (Zoffix Znet)++ | 2 files

[20:56] <Geth> ¦ rakudo/nom: Make Cool.split 0x-2.7x faster

[20:56] <Geth> ¦ rakudo/nom:

[20:56] <Geth> ¦ rakudo/nom: Split with Str matcher is 2.7x faster, but looks like Regex

[20:56] <Geth> ¦ rakudo/nom: matcher is just so slow that dispatch improvement is drowned so there's

[20:56] <Geth> ¦ rakudo/nom: no noticalbe improvement there.

[20:56] <Geth> ¦ rakudo/nom:

[20:56] <Geth> ¦ rakudo/nom: Part of fixing RT#132280:

[20:56] <Geth> ¦ rakudo/nom: https://rt.perl.org/Ticket/Display.html?id=132280

[20:56] <synopsebot> RT#132280 [new]: https://rt.perl.org/Ticket/Display.html?id=132280 [REGRESSION][PERF] Cool methods that take and pass a Capture are uber slower (.contains: 'meow' for ^10000_00)

[20:56] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/785d2f251d

[21:14] <Geth> ¦ rakudo/nom: 43e7b893b1 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Iterator.pm

[21:14] <Geth> ¦ rakudo/nom: Fix for RT #132288

[21:14] <Geth> ¦ rakudo/nom:

[21:14] <Geth> ¦ rakudo/nom: Make sure we check in HLL before committing to the natives.

[21:14] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/43e7b893b1

[21:14] <synopsebot> RT#132288 [new]: https://rt.perl.org/Ticket/Display.html?id=132288 [REGRESSION][9999] .tail with large negative arguments (say (4,5,6).tail(-9999999999999999999))

[21:14] <Geth> ¦ rakudo/nom: d79ac9704d | (Zoffix Znet)++ | 2 files

[21:14] <Geth> ¦ rakudo/nom: Revert fixes to Cool methods with captures

[21:14] <Geth> ¦ rakudo/nom:

[21:14] <Geth> ¦ rakudo/nom: Do not sweet the problem under the rug and instead fix

[21:14] <Geth> ¦ rakudo/nom: slippy method caching

[21:14] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d79ac9704d

[21:18] <Zoffix> *sweep

[22:04] <Geth> ¦ rakudo/nom: b6982e6892 | (Elizabeth Mattijsen)++ | src/core/traits.pm

[22:04] <Geth> ¦ rakudo/nom: Streamline Routine traits

[22:04] <Geth> ¦ rakudo/nom:

[22:04] <Geth> ¦ rakudo/nom: - give name to role for better gisting

[22:04] <Geth> ¦ rakudo/nom: - make sure we only mixin if a trueish value was specified

[22:04] <Geth> ¦ rakudo/nom: - traits affected:

[22:04] <Geth> ¦ rakudo/nom:   - is hidden-from -backtrace

[22:04] <Geth> ¦ rakudo/nom:   - is hidden-from-USAGE

[22:04] <Geth> ¦ rakudo/nom: <…commit message has 7 more lines…>

[22:04] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b6982e6892

[22:11] <AlexDaniel-> samcv: hello? :)

[22:12] <AlexDaniel-> samcv: nevermind!

[22:12] <samcv> hi!

[22:15] <AlexDaniel-> samcv: actually I have two questions

[22:15] <samcv> go ahead

[22:15] <AlexDaniel-> I feel like I'm bothering you too much though

[22:15] <AlexDaniel-> anyway

[22:15] <samcv> i am at your disposal

[22:15] <samcv> not at all

[22:15] <samcv> i enjoy sharing my knowledge

[22:15] <AlexDaniel-> c: releases "a".uniprop('Numeric').say

[22:15] <AlexDaniel-> what is “Numeric” property? What does it stand for?

[22:15] <committable6> AlexDaniel-, ¦2015.12,2016.01.1,2016.02,2016.03,2016.04,2016.05,2016.06,2016.07.1,2016.08.1,2016.09,2017.09,HEAD(b6982e6): «Lower» ¦2016.10,2016.11,2016.12,2017.02,2017.03,2017.04.3,2017.05,2017.06,2017.07,2017.08: «ALetter» ¦2017.01: «None»

[22:16] <AlexDaniel-> it's not the same as Numeric_Type

[22:16] <AlexDaniel-> I guess?

[22:17] <samcv> ah

[22:17] <AlexDaniel-> and second question: is there some indexed documentation for unicode properties so that I can add a link to every row here: https://gist.github.com/Whateverable/4f40fa483aeed22d355a948cd62d663d

[22:18] <AlexDaniel-> (and also so that I don't have to ask the first question ever again :) )

[22:18] <samcv> numeric just means it has a numeric type

[22:19] <samcv> so numeric_type != "None"

[22:19] <AlexDaniel-> ok, but what is “Lower”?

[22:19] <Geth> ¦ rakudo/nom: bb1df2cb0c | (Elizabeth Mattijsen)++ | 3 files

[22:19] <Geth> ¦ rakudo/nom: Streamline "is pure" trait handling

[22:19] <Geth> ¦ rakudo/nom:

[22:19] <Geth> ¦ rakudo/nom: - rename role's method to "is-pure", to be consistent with other traits

[22:19] <Geth> ¦ rakudo/nom: - don't bother calling the method: the existence is the flag

[22:19] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bb1df2cb0c

[22:20] <samcv> well Numeric is not really an official property. and i don't know when that happened but it should be Numeric_Type != None

[22:20] <AlexDaniel-> want me to submit it as a ticket?

[22:20] <samcv> hold on let me check something

[22:21] <samcv> well it seems to be doing MVM_UNICODE_PROPERTY_SENTENCE_BREAK when you ask for Numeric

[22:21] <samcv> so yeah make a ticket i guess

[22:23] <samcv> if numeric should be a property that is up to perl 6 i guess

[22:23] <samcv> ah i know what's going on

[22:23] <samcv> Sentence Break has a Numeric property value

[22:23] <samcv> i'm guessing

[22:24] <samcv> so anyway it's just an artifect of us looking up property values and not just property names

[22:26] <AlexDaniel-> buggable: tags

[22:26] <buggable> AlexDaniel-, Total: 1631; 6.D: 2; 9999: 11; @LARRY: 27; ANNOYING: 8; BOOTSTRAP: 4; BUG: 592; BUILD: 12; CONC: 45; DOCS: 1; EXOTICTEST: 3; FLAP: 1; GLR: 3; IO: 20; JVM: 48; LHF: 7; LTA: 176; MATH: 5; META: 2; MOAR: 1; MOLD: 233; NATIVECALL: 21; NYI: 57; OO: 13; OPTIMIZER: 8; OSX: 2; PARSER: 5; PERF: 26; POD: 19; PRECOMP: 15; REGEX: 46; REGRESSION:

[22:26] <buggable> AlexDaniel-, 39; REPL: 6; RFC: 61; RT: 2; SECURITY: 2; SEGV: 28; SINK: 1; SITE: 1; SPESH: 1; STAR: 7; TESTCOMMITTED: 12; TESTNEEDED: 38; TODO: 13; UNI: 26; UNTAGGED: 282; WEIRD: 2; WINDOWS: 4; See http://fail.rakudo.party/ for details

[22:29] <AlexDaniel-> samcv: RT #132305

[22:30] <synopsebot> RT#132305 [new]: https://rt.perl.org/Ticket/Display.html?id=132305 [UNI] In some cases ‘Numeric’ uniprop returns “Lower” but it should be “None” instead (say ‘a’.uniprop(‘Numeric’))

[22:53] <AlexDaniel-> c: 2016.06,HEAD my @a = ^50; my $a = now; for ^100_000 { my $b = Junction.new("all",@a) }; say now - $a; $a  = now; for ^100_000 { Junction.new("all",@a) }; say now - $a

[22:53] <committable6> AlexDaniel-, ¦2016.06: «0.18258788␤0.160125» ¦HEAD(bb1df2c): «0.0761381␤0.4081705»

[22:54] <AlexDaniel-> c: 2016.06,HEAD my @a = ^50; my $a = now; for ^100_000 { Junction.new("all",@a) }; say now - $a

[22:54] <committable6> AlexDaniel-, ¦2016.06: «0.2100153» ¦HEAD(bb1df2c): «0.37509849»

[22:54] <AlexDaniel-> c: 2016.06,HEAD my @a = ^50; my $a = now; for ^1000_000 { Junction.new("all",@a) }; say now - $a

[22:54] <committable6> AlexDaniel-, ¦2016.06: «1.53712789» ¦HEAD(bb1df2c): «3.37815925»

[22:55] <AlexDaniel-> bisect: old=2016.06 my @a = ^50; my $a = now; for ^1000_000 { Junction.new("all",@a) }; say (now - $a) > 2

[22:55] <bisectable6> AlexDaniel-, Bisecting by output (old=2016.06 new=bb1df2c) because on both starting points the exit code is 0

[22:56] <bisectable6> AlexDaniel-, bisect log: https://gist.github.com/eb832cc5450405ae9634b0094a0535cb

[22:56] <bisectable6> AlexDaniel-, (2016-08-11) https://github.com/rakudo/rakudo/commit/977797fa401856e5310155f13469b7e6ff5f620a

[22:57] <AlexDaniel-> c: 977797fa40^,977797fa40 my @a = ^50; my $a = now; for ^1000_000 { Junction.new("all",@a) }; say now - $a

[22:57] <committable6> AlexDaniel-, ¦977797fa40^: «1.67519507» ¦977797f: ««timed out after 10 seconds» «exit signal = SIGHUP (1)»»

[22:57] * AlexDaniel- moves to #whateverable

[23:08] <AlexDaniel-> I'm really not sure what to make out of it

[23:09] <AlexDaniel-> c: 2016.06,HEAD my @a = ^50; my $a = now; for ^1000_000 { @a.all }; say now - $a

[23:09] <committable6> AlexDaniel-, ¦2016.06: «1.7508351» ¦HEAD(bb1df2c): «4.41190691»

[23:09] <AlexDaniel-> c: 2016.06,HEAD my @a = ^50; my $a = now; for ^1000_000 { $ = @a.all }; say now - $a

[23:09] <committable6> AlexDaniel-, ¦2016.06: «1.7970691» ¦HEAD(bb1df2c): «0.8887317»

[23:09] <AlexDaniel-> so sinking a junction is now slower, but not sinking it is faster

[23:09] <AlexDaniel-> why would somebody sink a junction, right?

[23:10] * AlexDaniel- shrugs

[23:11] <timotimo> use the coverage functionality on all regressable snippets :3

[23:20] <buggable> New CPAN upload: App-Bob-0.2.2.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/App-Bob-0.2.2.tar.gz

[23:20] <buggable> New CPAN upload: Hash-Merge-0.1.1.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/Hash-Merge-0.1.1.tar.gz

[23:20] <buggable> New CPAN upload: IRC-Client-Plugin-Github-0.1.4.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/IRC-Client-Plugin-Github-0.1.4.tar.gz

[23:20] <buggable> New CPAN upload: MPD-Client-0.1.3.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/MPD-Client-0.1.3.tar.gz

[23:26] <MasterDuke> timotimo: was just hoping you know something about why this `my $a = rx/aaaaaab/; 'a' x 999999 ~ 'b' ~~ /$a/` spends a couple seconds in Match.pm's Bool proto

[23:28] <MasterDuke> after my recent commit that created a Regex multi for INTERPOLATE
