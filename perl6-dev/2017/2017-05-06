[00:02] <Geth> ¦ perl6-pod-to-bigpage: c99f51cd96 | (Zoffix Znet)++ (committed using GitHub Web editor) | META6.json

[00:02] <Geth> ¦ perl6-pod-to-bigpage: Add `perl` key to meta file

[00:02] <Geth> ¦ perl6-pod-to-bigpage:

[00:02] <Geth> ¦ perl6-pod-to-bigpage: Closes #3

[00:02] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/c99f51cd96

[00:07] <Geth> ¦ perl6-pod-to-bigpage: 2c8ec5f9cf | (Zoffix Znet)++ | 3 files

[00:07] <Geth> ¦ perl6-pod-to-bigpage: Don't run network tests by default

[00:07] <Geth> ¦ perl6-pod-to-bigpage:

[00:07] <Geth> ¦ perl6-pod-to-bigpage: Fixes #4

[00:07] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/2c8ec5f9cf

[00:19] <Geth> ¦ perl6-pod-to-bigpage: e721ef3556 | (Zoffix Znet)++ | lib/Pod/To/BigPage.pm6

[00:19] <Geth> ¦ perl6-pod-to-bigpage: Remove trailing whitespace

[00:19] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/e721ef3556

[00:20] <Geth> ¦ perl6-pod-to-bigpage: b4dd4433e6 | (Zoffix Znet)++ | lib/Pod/To/BigPage.pm6

[00:20] <Geth> ¦ perl6-pod-to-bigpage: Reword chain of .substs with .trans

[00:20] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/b4dd4433e6

[00:20] <Zoffix> ZofBot: good grief

[00:20] <ZofBot> Zoffix, html>

[00:20] <Zoffix> ZofBot: exactly!

[00:20] <ZofBot> Zoffix, One other difference between the "s///" and "

[00:26] * Zoffix sets Pod::To::BigPage on fire

[00:27] <Zoffix> The same bullshit as the $COLON stuff in htmlify.p6

[00:28] <Zoffix> One of the billion places it .substr()-escapes markup—as opposed to doing something sane—it escapes `>`, but seems to double-escape `<`

[00:41] <samcv> oh no

[00:41] <Zoffix> found it

[00:41] <samcv> what's it doing? this is diff from the URL problem right? we're talking about Pod::To::BigPage

[00:42] <Zoffix> Yeah, different. I'm fixing perl -pi -e 's/(\s*(?:multi\s+)?(method|sub|submethod)\s*([^\s({]+)[^{]+\{)/$1 nqp::say("$2 $3");/g'

[00:42] <Zoffix> I mean fixing https://github.com/perl6/doc/issues/1285

[00:43] <samcv> eek

[00:46] <timotimo> the horizontal scrolling in that document is the worst thing i've ever seen in a html site

[00:46] <Zoffix> oh. never noticed it before

[00:53] <Geth> ¦ perl6-pod-to-bigpage: 181945faa5 | (Zoffix Znet)++ | lib/Pod/To/BigPage.pm6

[00:53] <Geth> ¦ perl6-pod-to-bigpage: Consolidate markup escape code

[00:53] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/181945faa5

[00:53] <Geth> ¦ perl6-pod-to-bigpage: c24177f6ee | (Zoffix Znet)++ | 2 files

[00:53] <Geth> ¦ perl6-pod-to-bigpage: Fix double-escape of `<` in code

[00:53] <Geth> ¦ perl6-pod-to-bigpage:

[00:53] <Geth> ¦ perl6-pod-to-bigpage: Fixes https://github.com/perl6/doc/issues/1285

[00:53] <Geth> ¦ perl6-pod-to-bigpage:

[00:53] <Geth> ¦ perl6-pod-to-bigpage: P.S.: There are likely more double-escape bugs in this codebase.

[00:53] <Geth> ¦ perl6-pod-to-bigpage: Needs a saner review/rewrite

[00:53] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/c24177f6ee

[00:54] <Zoffix> gah, doesn't fix it entirely. There's still markup chunks all over the place in code blocks

[00:55] * Zoffix gives up with it

[02:42] <Geth> ¦ perl6-pod-to-bigpage: 2628454c34 | (Zoffix Znet)++ | .travis.yml

[02:42] <Geth> ¦ perl6-pod-to-bigpage: Fix travis choking with panda

[02:42] <Geth> ¦ perl6-pod-to-bigpage:

[02:42] <Geth> ¦ perl6-pod-to-bigpage: By using zef

[02:42] <Geth> ¦ perl6-pod-to-bigpage: review: https://github.com/perl6/perl6-pod-to-bigpage/commit/2628454c34

[02:47] <MasterDuke_> Zoffix: hope you don't mind, made a couple editing suggestions on your recent doc commits (i think the reifying and Proc.kill ones)

[02:54] <Zoffix> MasterDuke_++ thanks

[03:51] <Geth> ¦ nqp: MasterDuke17++ created pull request #358: Align JVM x operator with MoarVM x operator

[03:51] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/358

[04:39] <Geth> ¦ nqp: bccace7fe8 | MasterDuke17++ | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java

[04:39] <Geth> ¦ nqp: Align JVM x operator with MoarVM x operator

[04:39] <Geth> ¦ nqp:

[04:39] <Geth> ¦ nqp: Do the same error checks (except with different max values depending on

[04:39] <Geth> ¦ nqp: the limitations of the specific VM).

[04:39] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/bccace7fe8

[04:39] <Geth> ¦ nqp: 90995169a4 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java

[04:39] <Geth> ¦ nqp: Merge pull request #358 from MasterDuke17/repeat_operator_enhancement_for_jvm

[04:39] <Geth> ¦ nqp:

[04:39] <Geth> ¦ nqp: Align JVM x operator with MoarVM x operator

[04:39] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/90995169a4

[04:57] <Geth> ¦ rakudo/bugfix/osx-unstuck-precomp: a9f252c0f9 | (Nick Logan)++ | src/core/CompUnit/PrecompilationRepository.pm

[04:57] <Geth> ¦ rakudo/bugfix/osx-unstuck-precomp: Fix stuck precomp on osx

[04:57] <Geth> ¦ rakudo/bugfix/osx-unstuck-precomp: review: https://github.com/rakudo/rakudo/commit/a9f252c0f9

[05:01] <Geth> ¦ rakudo/bugfix/osx-unstuck-precomp: 182b17061c | (Nick Logan)++ | src/core/CompUnit/PrecompilationRepository.pm

[05:01] <Geth> ¦ rakudo/bugfix/osx-unstuck-precomp: Fix stuck precomp on osx

[05:01] <Geth> ¦ rakudo/bugfix/osx-unstuck-precomp: review: https://github.com/rakudo/rakudo/commit/182b17061c

[05:04] <Geth> ¦ rakudo: ugexe++ created pull request #1076: Fix stuck precomp on osx

[05:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1076

[05:10] <Geth> ¦ roast: ad567d7577 | (Zoffix Znet)++ | S02-types/pair.t

[05:10] <Geth> ¦ roast: Test Pair.ACCEPTS

[05:10] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ad567d7577

[05:35] <Zoffix> Well, I'm tossing fixed-Seq-is-deeply and I guess we'll live with brokenish is-deeply for the foreseeable future

[05:36] <Zoffix> And tossing better-test-pm6; the pain of wasting time on it is dull and forgotten by now :)

[05:37] <Zoffix> .ask TimToady can `uncurse` branch be deleted from Rakudo's repo now?

[05:37] <yoleaux> Zoffix: I'll pass your message to TimToady.

[05:41] <Geth> ¦ rakudo/nom: 096bc17cd5 | (Zoffix Znet)++ (committed using GitHub Web editor) | lib/Test.pm6

[05:41] <Geth> ¦ rakudo/nom: Add note explaining why is-deeply is buggish

[05:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/096bc17cd5

[05:54] <[Tux]> This is Rakudo version 2017.04.3-173-g5e6b38789 built on MoarVM version 2017.04-57-g8d8a09b9

[05:54] <[Tux]> csv-ip5xs        3.227

[05:54] <[Tux]> test            12.861

[05:54] <[Tux]> test-t           4.319 - 4.361

[05:54] <[Tux]> csv-parser      13.275

[06:16] <Geth> ¦ roast: 15d52ffb46 | (Zoffix Znet)++ | S32-list/combinations.t

[06:16] <Geth> ¦ roast: Remove trailing whitespace

[06:16] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/15d52ffb46

[06:22] <Geth> ¦ roast: 1424793070 | (Zoffix Znet)++ | S32-list/combinations.t

[06:22] <Geth> ¦ roast: Add more .combinations tests; skids++

[06:22] <Geth> ¦ roast:

[06:22] <Geth> ¦ roast: Closes #110

[06:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1424793070

[06:22] <Geth> ¦ roast: 9fad95d9ec | (Zoffix Znet)++ | S32-list/combinations.t

[06:22] <Geth> ¦ roast: Use `is-deeply` instead of `is` and `.perl`

[06:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9fad95d9ec

[06:25] <Zoffix> :/ wonder why zef's install fails like this. IIRC it's the second time I see travis do that: https://travis-ci.org/perl6/doc/jobs/229373754

[06:26] <Zoffix> buggable: speed 10

[06:26] <buggable> Zoffix, ▆▅▂▃▂▁▃▂▂▂ data for 2017-05-02–2017-05-06; range: 4.276s–4.571s; 5% faster

[06:26] <Zoffix> sweet

[08:30] <samcv> Zoffix, ok pages with % work now too

[08:31] <samcv> and so do pages that end with URI percent encoding, cause that was messed up too if it percent encoded and that was the very last thing in url

[08:31] <samcv> not sure what the server setup is to access .html files without .html

[12:07] <dogbert17> m: my $a = Numeric.new; say $a + 0 # another oldie

[12:07] <camelia> rakudo-moar 096bc1: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 131072 bytes␤»

[12:09] <timotimo> that infini-recurses?

[12:10] <dogbert17> yup

[12:11] <dogbert17> will fix a gist

[12:12] <dogbert17> can't see why it should recurse though

[12:15] <dogbert17> heh, my 'p MVM_dump_backtrace' recurses as well with a gazillion 'from SETTING::src/core/Numeric.pm:191  (./CORE.setting.moarvm:infix:<+>)'

[12:16] <dogbert17> the original report points out that instantiating an abstract class is a bad idea. RT #126112

[12:16] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=126112

[12:30] * dogbert17 wonders what the proper way to fix this might be

[13:21] <dogbert17> timotimo: are you still around?

[13:23] <dogbert17> where can I find the src for 'nqp::unbox_n'? Using grep hasn't been particulary successful.

[13:27] <dogbert17> to be more specific, I'm looking for the code which makes this rounding

[13:27] <dogbert17> m: pi.say

[13:27] <camelia> rakudo-moar 096bc1: OUTPUT: «3.14159265358979␤»

[13:28] <dogbert17> i.e. RT #127184

[13:28] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=127184

[13:37] <MasterDuke_> dogbert17: try MoarVM/src/6model/reprs/P6num.c:56:

[13:42] <lizmat> .

[13:42] <yoleaux> 5 May 2017 13:50Z <Zoffix> lizmat: would you check this commit https://github.com/rakudo/rakudo/commit/5e6b38789a ? It fixes the bug, but I fixed it more by attrition that knowing what I'm doing.

[13:45] <dogbert17> hi MasterDuke_ & lizmat

[13:45] <lizmat> dig o/

[13:45] <lizmat> dogbert17 :-)

[13:45] <dogbert17> do you think that RT #127184 should be fixed?

[13:45] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=127184

[13:47] <lizmat> dogbert17: I would say yes

[13:47] <lizmat> m: 3.14159265358979 == pi

[13:47] <camelia> rakudo-moar 096bc1: OUTPUT: «WARNINGS for <tmp>:␤Useless use of "==" in expression "3.14159265358979 == pi" in sink context (line 1)␤»

[13:47] <lizmat> m: say 3.14159265358979 == pi

[13:47] <camelia> rakudo-moar 096bc1: OUTPUT: «False␤»

[13:48] <lizmat> dogbert17: ^^^ feels troublesome, so yes,  :-)

[13:49] <dogbert17> hoping it's some kind of LHF but I'm often horribly wrong about things like that :)

[13:49] <lizmat> perhaps it's as easy as changing a printf somewhere  :-)

[13:49] <dogbert17> that's what I was hoping :)

[13:53] <lizmat> .tell Zoffix it feels to me that you fixed the problem by making things unnecessarily eager

[13:53] <yoleaux> lizmat: I'll pass your message to Zoffix.

[14:06] <Zoffix> .

[14:06] <yoleaux> 13:53Z <lizmat> Zoffix: it feels to me that you fixed the problem by making things unnecessarily eager

[14:07] <Zoffix> m: sub (*@){}(gather { say "hi here" }); @ = gather { say "hi there" }

[14:07] <camelia> rakudo-moar 096bc1: OUTPUT: «hi here␤hi there␤»

[14:08] <Zoffix> lizmat: yeah, it's basically the slurpy is like the @-sigiled var now. So, the fix should be reverted?

[14:08] <lizmat> not sure yet, pretty distracted at the moment  :-)

[14:09] <Zoffix> samcv: thanks, though I see `..^` op is still unreacheable from the search box; it leads to https://docs.perl6.org/routine/..%5E

[14:09] <Zoffix> lizmat: OK, I'll leave it in your hands then :) If it's bad, please revert it (and refudge the test for it)

[14:10] <lizmat> Zoffix: okidoki  :-)

[14:11] <dogbert17> lizmat: any idea where to look for this 'printf'?

[14:11] <lizmat> dogbert17: sadly, no

[14:12] <samcv> Zoffix, that should be fixed. by the latest commit.

[14:12] * dogbert17 finds it difficult to navigate the sources

[14:12] <samcv> so not sure why it's not working

[14:12] <MasterDuke_> dogbert17: you might have better luck following the p6box_s

[14:13] <dogbert17> MasterDuke_: thx, I'll give it a shot

[14:13] <MasterDuke_> i think the unbox_n is just giving you the num, and the p6box_s is stringifying it

[14:14] <dogbert17> cool, let's see if that makes finding things easier

[14:15] <Zoffix> samcv: does it need the same `.html` fix like the plain `..`? The page gives me stuff if I append .html to it

[14:15] <samcv> yes it has code to do that right now. i'm going to try altering it slightly

[14:16] <dogbert17> hmm, no trace of it in nqp/src nor in MoarVM/src

[14:16] <MasterDuke_> dogbert17: the p6* ops are in rakudo

[14:17] <Zoffix> dogbert17: you looking for sprintf impl?

[14:18] <Zoffix> dogbert17: basically this: https://github.com/perl6/nqp/blob/master/src/HLL/sprintf.nqp

[14:18] <dogbert17> Zoffix: looking at RT #127184

[14:18] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=127184

[14:19] <Zoffix> "Dan the Bit-Picking Rakudo Monger" :/

[14:19] * Zoffix would've hoped the "Monger" thing would've stayed with Perl 5 :P

[14:21] <dogbert17> MasterDuke_: perhaps src/vm/moar/ops/perl6_ops.c might be the place then

[14:22] <MasterDuke_> yep, turns out it just calls MVM_repr_box_str though

[14:24] <Zoffix> m: (pi*10000000000000000).say

[14:24] <camelia> rakudo-moar 096bc1: OUTPUT: «3.14159265358979e+16␤»

[14:24] <Zoffix> m: (1.234567890123456789012345e0).say

[14:24] <camelia> rakudo-moar 096bc1: OUTPUT: «1.23456789012346␤»

[14:24] <dogbert17> might that be found in src/6model/reprconv.c

[14:25] <Zoffix> dogbert17: well yeah and eventually in https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprconv.c#L561 but that takes MVM_String looks like

[14:25] <Zoffix> So it's already in Str format by then?

[14:26] <dogbert17> the plot thickens

[14:26] <Zoffix> And there it takes `cur_op` but it's not used anywhere in the body? huh? https://github.com/rakudo/rakudo/blob/nom/src/vm/moar/ops/perl6_ops.c#L213

[14:27] <Zoffix> I guess GET_REG(tc, 2).s) is what does the thing, eh? So the .s is what converts it?

[14:28] <MasterDuke_> `#define GET_REG(tc, idx)    (*tc->interp_reg_base)[*((MVMuint16 *)(cur_op + idx))]`, so it's using the cur_op

[14:30] <Zoffix> dogbert17: seems the bug is in unbox_n op. Maybe here somewhere? https://github.com/MoarVM/MoarVM/blob/master/src/6model/reprs/P6opaque.c#L482-L493

[14:30] * Zoffix gives up the guessing

[14:31] <dogbert17> m: say sprintf("%.13f", pi)

[14:31] <camelia> rakudo-moar 096bc1: OUTPUT: «3.1415926535898␤»

[14:31] <dogbert17> m: say sprintf("%.14f", pi)

[14:31] <camelia> rakudo-moar 096bc1: OUTPUT: «3.14159265358979␤»

[14:31] <dogbert17> m: say sprintf("%.15f", pi) # ?

[14:31] <camelia> rakudo-moar 096bc1: OUTPUT: «3.141592653589790␤»

[14:32] <dogbert17> Zoffix: perhaps this is not a LHF as I was hoping

[14:36] <Zoffix> Dunno. What's the attribute_offsets? Feels like adding another position in P6opaque.c for num is all that's needed

[14:37] * Zoffix chuckles at repr_data->ass_del_slot

[14:37] <dogbert17> :)

[14:37] <dogbert17> m: say sprintf("%.15f", 3.141592653589793) # fishy

[14:37] <camelia> rakudo-moar 096bc1: OUTPUT: «3.141592653589790␤»

[14:37] <Zoffix> It ends up just a num at the end, right?

[14:38] <Zoffix> s: 1.1, 'Str', \()

[14:38] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/096bc17/src/core/Rational.pm#L79

[14:39] <Zoffix> Oh wait

[14:39] <dogbert17> ?

[14:39] <Zoffix> s: 1.1, 'Num', \()

[14:39] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/096bc17/src/core/Rational.pm#L48

[14:39] <Zoffix> Yeah, just nqp::div_In

[14:39] <Zoffix> So the extra digit at the end just gets lost

[14:40] <Zoffix> Maybe. It's just a guess that nqp::sprintf doesn't know how to handle rats so it just numifies them

[14:40] * Zoffix &

[14:41] * dogbert17 fixes a pot of coffee

[15:36] <MasterDuke_> jnthn: i refactored made_feed to do the .ast in the loop and call .panic on the un-ast'ed part, but it's still putting the caret at the EOL. i don't think i've ever played around with this error mark positioning before, so not sure what i did wrong

[15:38] <MasterDuke_> when you've got a minute, here's a diff of my changes https://gist.github.com/MasterDuke17/c1316c5a56ddb1b95e87e9a405b00eb3

[15:49] <ugexe> nine: i dunno why https://github.com/rakudo/rakudo/pull/1076 works, but I'm pretty sure i've been working around that bug when launching procs in zef for 2 years now

[15:51] <ugexe> my workaround has always been to reorder the logic for reading/closing :out/:err until it works

[15:59] <ugexe> oh i can reproduce

[15:59] <ugexe> perl6 -e 'my $proc = shell q|perl6 -e "die q!oo! xx 1000000;"|, :out, :err; my @out = $proc.out.lines.unique;'

[15:59] <ugexe> s/:err// and it no longer freezes

[16:01] <ugexe> note that the size of the error must matter as well

[16:02] <geekosaur> um, yes?

[16:03] <geekosaur> that's a deadlock

[16:04] <geekosaur> if the unread output on the pipe connected to its stderr is larger than the OS pipe buffer then the child process will block waiting for the pipe to become writable; the parent is probably doing a waitpid() on all children, which will never finish because of the blocked child. only way around it is read the pipe or forcibly terminate the child with a signal

[16:05] <geekosaur> this is the open3 problem documented for perl 5 and python, among others

[16:05] <ugexe> that sure sounds like the case to me

[16:06] <ugexe> the original problem i only faced on osx, but the repro above (which exaggerates the error message size) also affects non-osx

[16:06] <geekosaur> or maybe prevent perl 6 from waiting for all outstanding children; I don't know if that happens at perl 6 level or libuv though

[16:07] <ugexe> it this specific to stderr, or can the reverse also be true (stdout)?

[16:07] <geekosaur> both, tes

[16:07] <geekosaur> *yes

[16:08] <ugexe> ouch

[16:08] <geekosaur> (also I think you'll see it more easily on OS X because the pipe buffer is 64K, but on Linux it's something like 256K)

[16:11] <ugexe> i

[16:12] <ugexe> and i dont think there is a way to know which pipe to read first is there?

[16:16] <jnthn> MasterDuke_: Hm, that patch looks to do the change I suggested, so a little curious it doesn't end up pointing at the correct stage.

[16:17] <MasterDuke_> yea

[16:17] <MasterDuke_> oops

[16:17] <jnthn> I don't see any obvious mistake in there

[16:17] <MasterDuke_> yeah, i thought it would

[16:18] <MasterDuke_> fwiw, updated the gist  with the error output

[16:21] <jnthn> Could also try $_.PRECURSOR.panic($error)

[16:21] <jnthn> Though I don't know exactly what that does :)

[16:22] <jnthn> ugexe: fwiw, Proc::Async avoids the problem by delivering the input as it's received on each handle

[16:26] <geekosaur> correct

[16:26] <geekosaur> also it could well be both that need to be read. best is to read in threads and forward the important part to the main thread (or use a Supply to feed it)

[16:27] <geekosaur> which only defers the problem in some sense but you now control the buffering *and* you can reliably kill the main thread without it blocking on the others

[16:28] <MasterDuke_> jnthn++ that did it

[16:44] <ugexe> jnthn: but introduces the problem of not existing for jvm yet :(

[17:45] <TimToady> PRECURSOR puts the eject symbol at the .from rather than the .pos

[17:46] <yoleaux> 05:37Z <Zoffix> TimToady: can `uncurse` branch be deleted from Rakudo's repo now?

[17:47] <TimToady> Zoffix: yes

[18:10] <MasterDuke_> Zoffix: Geth seems to have died

[18:11] <MasterDuke_> i just created https://github.com/rakudo/rakudo/pull/1077 a couple minutes ago, but there hasn't been an announcement here

[18:25] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1077: Make feed compile errors better

[18:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1077

[18:27] <Zoffix> Geth: uptime

[18:27] <Geth> Zoffix, 3 days, 2 hours, 4 minutes, and 45 seconds

[18:28] <Zoffix> might've been hook delay.

[18:28] <Zoffix> Restarted it anyway

[19:49] <nine> ugexe: what geekosaur said also matches my experience and understanding of this issue. I do wonder however if it's really necessary to capture STDERR. I've had to remove that capturing whenever I've worked on precomp stuff as it caused the hang issue and changed the order of debug output which is really confusing.

[19:49] <Geth> ¦ rakudo/nom: 182b17061c | (Nick Logan)++ | src/core/CompUnit/PrecompilationRepository.pm

[19:49] <Geth> ¦ rakudo/nom: Fix stuck precomp on osx

[19:49] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/182b17061c

[19:49] <Geth> ¦ rakudo/nom: 824cfa3517 | niner++ (committed using GitHub Web editor) | src/core/CompUnit/PrecompilationRepository.pm

[19:49] <Geth> ¦ rakudo/nom: Merge pull request #1076 from rakudo/bugfix/osx-unstuck-precomp

[19:49] <Geth> ¦ rakudo/nom:

[19:49] <Geth> ¦ rakudo/nom: Fix stuck precomp on osx

[19:49] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/824cfa3517

[21:34] <dogbert17> m: use nqp; nqp::say(nqp::unbox_n(3.141592653589793e0))

[21:34] <camelia> rakudo-moar 824cfa: OUTPUT: «3.14159265358979␤»

[21:35] * dogbert17 still trying to find where the stringification of 'doubles' occurs

[21:36] <timotimo> dogbert17: have you seen "smart_stringify"?

[21:36] <dogbert17> timotimo: no what's that?

[21:37] <pmurias> dogbert17: a MoarVM op that does stringification of stuff in nqp

[21:37] <dogbert17> timotimo: as you can see above, one digit is unnecessarily lost and I'm trying to figure out where

[21:40] <dogbert17> pmurias: but where's the implementation, the code in src/vm/jvm/NQP/Ops.nqp isn't quite what I'm looking for

[21:40] <dogbert17> is it in MoarVM?

[21:41] <pmurias> dogbert17: what backend do you want to fix it in?

[21:41] <pmurias> src/vm/jvm is for the JVM backend

[21:42] <dogbert17> pmurias: MoarVM, see the example a few lines above

[21:42] <pmurias> dogbert17: I would look into the coerce_ns op in the MoarVM

[21:42] <dogbert17> pmurias, thx will look

[21:43] <dogbert17> pmurias: btw it's RT #127184

[21:43] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=127184

[21:45] <pmurias> dogbert17: if you look into the MVM_coerce_n_s you will find a hardcoded 15 digits in the snprintf

[21:45] <dogbert17> pmurias++

[21:45] <dogbert17> otoh, 15 digits whould be enough if we're talking decimals only

[21:46] <dogbert17> still, the 'problem' must be there

[21:47] <dogbert17> now I now where to point gdb :), thx for all the help

[22:04] <timotimo> dogbert17: of course you can just always stringify as much precision is there. but then you'll get 0.30000000000000001943 instead of 0.3

[22:10] <dogbert17> a double should be able to handle 3.141592653589793

[22:11] <dogbert17> I believe that I see a problem though

[22:12] <dogbert17> if I 'snprintf(buf, 64, "%.5g", n)' i get 3.1416\0 which is one decimal less that what I'm asking for

[22:12] <dogbert17> s/that/than/

[22:13] <dogbert17> seems to me as if the terminating nul 'steals' one of my five decimals

[22:15] <timotimo> shouldn't, though

[22:17] <dogbert17> how do you explain the result when using "%.5g"? Am I misunderstanding something?

[22:18] <timotimo> i'm not good at printf, but could it be about leading minus?

[22:18] <samcv> i usually experiment until it does the right thing :P

[22:18] <dogbert17> I can try

[22:21] <dogbert17> if I try with 'double pi = -3.141592653589793e0' and the format string "%.5g" I get -3.1416\0

[22:22] <dogbert17> only four decimals ...

[22:26] <dogbert17> printf("%.5", 3.141592653589) gives 3.1415     hmm

[22:29] <dogbert17> aha, when using 'g' or G in the format string the number after the decimal point means "the

[22:29] <dogbert17> maximum number of significant digits for g and G conversions

[22:35] <dogbert17> changing the 'g' to an 'f' should fix it I think

[23:04] <dogbert17> m: say 2.718_281_828_459_045_23e0

[23:04] <camelia> rakudo-moar 824cfa: OUTPUT: «2.71828182845905␤»

[23:04] <dogbert17> m: say 2.718_281_828_459_045_231e0

[23:04] <camelia> rakudo-moar 824cfa: OUTPUT: «2.71828182845905␤»
