[00:12] <Geth> ¦ roast: 5a3f3c68c5 | (Zoffix Znet)++ | S16-filehandles/filetest.t

[00:12] <Geth> ¦ roast: Reword .IO.z test for directories

[00:12] <Geth> ¦ roast:

[00:12] <Geth> ¦ roast: To have it pass on systems that return zero for directory sizes.

[00:12] <Geth> ¦ roast:

[00:12] <Geth> ¦ roast: Part of addressing #320

[00:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5a3f3c68c5

[00:12] <synopsebot> SPEC#320 [open]: https://github.com/perl6/roast/issues/320 Windows roast failures just before 2017.09 release

[00:14] <Zoffix> Some test is taking a hella long time on Windows... t\spec\S32-io\IO-Socket-Async.t, at a guess...

[00:16] <Zoffix> Ah, no that's the last passed one

[02:12] <travis-ci> Rakudo build passed. Zoffix Znet 'Test overflow in .roll()

[02:12] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/314934244 https://github.com/rakudo/rakudo/compare/a56354466908...1b0be0f631cf

[02:24] <Geth> ¦ roast: 37ff3ab58d | (Zoffix Znet)++ | S12-enums/basic.t

[02:24] <Geth> ¦ roast: Test enums can be created via Seq of Pairs

[02:24] <Geth> ¦ roast:

[02:24] <Geth> ¦ roast: RT#128017: https://rt.perl.org/Public/Bug/Display.html?id=128017

[02:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/37ff3ab58d

[02:24] <synopsebot> RT#128017 [new]: https://rt.perl.org/Ticket/Display.html?id=128017 enum treats a Seq of Pairs as a List of Str

[02:30] <Geth> ¦ roast: 6e6eae6059 | (Zoffix Znet)++ | S12-enums/basic.t

[02:30] <Geth> ¦ roast: Test can provide enum values via Pairs

[02:30] <Geth> ¦ roast:

[02:30] <Geth> ¦ roast: RT#130041: https://rt.perl.org/Ticket/Display.html?id=130041

[02:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6e6eae6059

[02:30] <synopsebot> RT#130041 [open]: https://rt.perl.org/Ticket/Display.html?id=130041 [BUG] Pair in enum declaration should either DWIM or parsefail

[02:38] <Geth> ¦ roast: 2d35dd4949 | (Zoffix Znet)++ | S02-types/whatever.t

[02:38] <Geth> ¦ roast: No issues with //= and WhateverCode

[02:38] <Geth> ¦ roast:

[02:38] <Geth> ¦ roast: RT#126415: https://rt.perl.org/Ticket/Display.html?id=126415

[02:38] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2d35dd4949

[02:38] <synopsebot> RT#126415 [open]: https://rt.perl.org/Ticket/Display.html?id=126415 [BUG] WhateverCode loses its mind inside //=

[03:00] <Geth> ¦ roast: 0fb5a0116b | (Zoffix Znet)++ | S02-names/strict.t

[03:00] <Geth> ¦ roast: `no strict` does not cause autovivification container issues

[03:00] <Geth> ¦ roast:

[03:00] <Geth> ¦ roast: RT#125398: https://rt.perl.org/Ticket/Display.html?id=125398

[03:00] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0fb5a0116b

[03:01] <synopsebot> RT#125398 [open]: https://rt.perl.org/Ticket/Display.html?id=125398 with no strict temp does not autcreate hashes and hash elements

[03:06] <Geth> ¦ roast: 5cd8dff229 | (Zoffix Znet)++ | S03-binding/arrays.t

[03:06] <Geth> ¦ roast: Binding Failure to Array throws useful error

[03:06] <Geth> ¦ roast:

[03:06] <Geth> ¦ roast: RT#118397: https://rt.perl.org/Ticket/Display.html?id=118397

[03:06] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5cd8dff229

[03:06] <synopsebot> RT#118397 [open]: https://rt.perl.org/Ticket/Display.html?id=118397 [BUG] array binding causes failures to be thrown

[04:19] <Zoffix> Segfault in t/spec/S07-hyperrace/hyper.t (after test 28, looks like) also consistent failure in t/spec/MISC/bug-coverage-stress.t (test 5) and t/spec/S12-construction/destruction.t looks to flop 4-5 tests as TODOs

[04:19] <travis-ci> Rakudo build passed. Zoffix Znet 'Test overflow behaviour in .indent()

[04:19] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/314937049 https://github.com/rakudo/rakudo/compare/1b0be0f631cf...062c27f343a2

[04:22] <Geth> ¦ rakudo: c0f99a393b | (Zoffix Znet)++ | src/Perl6/Grammar.nqp

[04:22] <Geth> ¦ rakudo: Allow parse of Callable's signatures constraints without `:`

[04:22] <Geth> ¦ rakudo:

[04:22] <Geth> ¦ rakudo: This now:      `sub foo(&block (Dog --> Bool)) {...}`

[04:22] <Geth> ¦ rakudo: Means same as: `sub foo(&block:(Dog --> Bool)) {...}`

[04:22] <Geth> ¦ rakudo: Old behaviour was to complain about calling .Capture on a Callable

[04:22] <Geth> ¦ rakudo:

[04:22] <Geth> ¦ rakudo: - Per TimToady's nod in https://rt.perl.org/Ticket/Display.html?id=123116#txn-1321791

[04:22] <Geth> ¦ rakudo: - Unifies syntax with Positional unpacking that allows both `:` and whitespace

[04:22] <Geth> ¦ rakudo:     to indicate unpacking.

[04:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/c0f99a393b

[04:29] <Geth> ¦ roast: a31e4655e8 | (Zoffix Znet)++ | S06-signature/closure-parameters.t

[04:29] <Geth> ¦ roast: Test unpacking Callable signatures

[04:29] <Geth> ¦ roast:

[04:29] <Geth> ¦ roast: RT#123116: https://rt.perl.org/Ticket/Display.html?id=123116

[04:29] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a31e4655e8

[04:29] <synopsebot> RT#123116 [open]: https://rt.perl.org/Ticket/Display.html?id=123116 [BUG] Weird error for code parameters with subsignatures in Rakudo

[04:36] <Geth> ¦ roast: 05cecddc21 | (Zoffix Znet)++ | S06-signature/closure-parameters.t

[04:36] <Geth> ¦ roast: Test whitespace can be used to unpack Callable sig

[04:36] <Geth> ¦ roast:

[04:36] <Geth> ¦ roast: Rakudo impl: https://github.com/rakudo/rakudo/commit/c0f99a393b

[04:36] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/05cecddc21

[04:42] <Geth> ¦ rakudo: 6061f0bcc5 | (Zoffix Znet)++ | src/core/Sequence.pm

[04:42] <Geth> ¦ rakudo: Implement Sequence.Numeric

[04:42] <Geth> ¦ rakudo:

[04:42] <Geth> ¦ rakudo: - Gives proper .Numeric to RaceSeq and HyperSeq

[04:42] <Geth> ¦ rakudo: - Seq.Numeric overrides this with a variant that can handle .count-only

[04:42] <Geth> ¦ rakudo:     optimization

[04:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6061f0bcc5

[04:43] <Geth> ¦ roast: d86c305731 | (Zoffix Znet)++ | 2 files

[04:43] <Geth> ¦ roast: Test Hyper/Race Seqs have .Numeric implemented

[04:43] <Geth> ¦ roast:

[04:43] <Geth> ¦ roast: Rakudo impl: https://github.com/rakudo/rakudo/commit/6061f0bcc5

[04:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d86c305731

[04:45] <Geth> ¦ rakudo: 2f955d55e3 | (Zoffix Znet)++ | src/Perl6/Grammar.nqp

[04:45] <Geth> ¦ rakudo: Revert "Allow parse of Callable's signatures constraints without `:`"

[04:45] <Geth> ¦ rakudo:

[04:45] <Geth> ¦ rakudo: This reverts commit c0f99a393b9f42ce9ff996ce82e0099ccba668f7.

[04:45] <Geth> ¦ rakudo:

[04:45] <Geth> ¦ rakudo: Just noticed the original syntax with `:` is actually a Signature literal

[04:45] <Geth> ¦ rakudo: appended to the parameter, so it makes a lot of sense, while adding `<.ws> ()`

[04:45] <Geth> ¦ rakudo: unpacking version makes less sense and there's not much reason to have more

[04:45] <Geth> ¦ rakudo: than one syntaxes for this feature.

[04:45] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2f955d55e3

[04:50] <Geth> ¦ roast: db549b09e5 | (Zoffix Znet)++ | S06-signature/closure-parameters.t

[04:50] <Geth> ¦ roast: Revert tests for <.ws> Callable sig unpacking

[04:50] <Geth> ¦ roast:

[04:50] <Geth> ¦ roast: Test were added today and not part of 6.c-errata.

[04:50] <Geth> ¦ roast:

[04:50] <Geth> ¦ roast: Feature got canceled: https://github.com/rakudo/rakudo/commit/2f955d55e3

[04:50] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/db549b09e5

[04:50] <Zoffix> (writing docs)++ # makes you realize your idea is crap

[04:51] <Zoffix> ZofBot: SLEEP!

[04:51] <ZofBot> Zoffix, oO( yeah, should've applied that bashrc thingy… ) hehe hmmm ok now I see an issue greppable6: rakudobrew AlexDaniel, https://gist

[05:00] <Geth> ¦ rakudo: 9fd5042b84 | (Zoffix Znet)++ | src/core/Exception.pm

[05:00] <Geth> ¦ rakudo: Make X::Cannot::Capture PDGier

[05:00] <Geth> ¦ rakudo:

[05:00] <Geth> ¦ rakudo: Mention user may have meant to use `&callable:(Sig)` form

[05:00] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9fd5042b84

[05:02] <Geth> ¦ roast: cd4dba6faf | (Zoffix Znet)++ | S32-list/seq.t

[05:02] <Geth> ¦ roast: Test Seq.Numeric makes use of .count-only

[05:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/cd4dba6faf

[05:04] <Geth> ¦ roast: ae7f3bf610 | (Zoffix Znet)++ | S32-list/seq.t

[05:04] <Geth> ¦ roast: Fix infiniloop in test when in failure path

[05:04] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ae7f3bf610

[05:34] <travis-ci> Rakudo build passed. Zoffix Znet 'Rename Test::Helper's is-run `$status` to `$exitcode`

[05:34] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/314995168 https://github.com/rakudo/rakudo/compare/062c27f343a2...e57c771cd765

[06:43] <travis-ci> Rakudo build passed. Zoffix Znet 'Test Failure.new(Exception.new) does not segfault

[06:43] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/314995477 https://github.com/rakudo/rakudo/compare/e57c771cd765...1101fea1832c

[07:36] <travis-ci> Rakudo build passed. Zoffix Znet 'Test List.ASSIGN-POS gives PDG error

[07:36] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/315001295 https://github.com/rakudo/rakudo/compare/1101fea1832c...fed56be258b5

[08:10] <[Tux]> Rakudo version 2017.11-96-g9fd5042b8 - MoarVM version 2017.11-28-gba1fb9542

[08:10] <[Tux]> csv-test-xs-20      0.448 -  0.457

[08:10] <[Tux]> csv-ip5xs           1.091 -  1.096

[08:10] <[Tux]> test-t --race       1.222 -  1.236

[08:10] <[Tux]> test-t              2.894 -  2.905

[08:10] <[Tux]> test               11.688 - 11.826

[08:10] <[Tux]> csv-parser         12.405 - 12.459

[08:10] <[Tux]> csv-ip5xs-20       13.082 - 13.109

[08:10] <[Tux]> test-t-20 --race   18.118 - 18.151

[08:10] <[Tux]> test-t-20          51.647 - 52.968

[08:53] <lizmat> Files=1231, Tests=75913, 315 wallclock secs (14.62 usr  5.23 sys + 2177.16 cusr 213.00 csys = 2410.01 CPU)

[09:22] <Geth> ¦ nqp: 499d3f0560 | (Elizabeth Mattijsen)++ | tools/build/MOAR_REVISION

[09:22] <Geth> ¦ nqp: Bump Moar for the latest fixes

[09:22] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/499d3f0560

[09:22] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.11-27-gfac2999...2017.11-43-g93a77dc

[09:38] <Geth> ¦ rakudo: 83eac0e423 | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION

[09:38] <Geth> ¦ rakudo: Bump NQP for the latest goodies

[09:38] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/83eac0e423

[09:38] <Geth> ¦ rakudo: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.11-37-gf1b2692...2017.11-59-g499d3f0

[09:38] <lizmat> m: my @matrix[2;2] = [1,2],[3,4]; @matrix[<0>;0] for ^1000000

[09:38] <camelia> rakudo-moar 9fd5042b8: ( no output )

[09:38] <lizmat> m: my @matrix[2;2] = [1,2],[3,4]; @matrix[<0>;0] for ^1000000

[09:38] <camelia> rakudo-moar 9fd5042b8: ( no output )

[09:38] <lizmat> m: my @matrix[2;2] = [1,2],[3,4]; @matrix[<0>;0] for ^1000000

[09:38] <camelia> rakudo-moar 9fd5042b8: ( no output )

[09:38] <lizmat> m: my @matrix[2;2] = [1,2],[3,4]; @matrix[<0>;0] for ^1000000

[09:38] <camelia> rakudo-moar 9fd5042b8: ( no output )

[10:47] <Geth> ¦ roast: c9d4633758 | pmurias++ | S05-metasyntax/unicode-property-pair.t

[10:47] <Geth> ¦ roast: Add a test for <:!NumericValue>

[10:47] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c9d4633758

[10:48] <Geth> ¦ nqp: 87f0e9f176 | pmurias++ | src/vm/js/nqp-runtime/unicode-props.js

[10:48] <Geth> ¦ nqp: [js] Fix wrong identifier

[10:48] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/87f0e9f176

[10:48] <Geth> ¦ nqp: 9e418e899e | pmurias++ | src/vm/js/nqp-runtime/unicode-props.js

[10:48] <Geth> ¦ nqp: [js] Refactor unicode properties that take an arg

[10:48] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/9e418e899e

[10:48] <Geth> ¦ nqp: 7460b33e29 | pmurias++ | src/vm/js/nqp-runtime/unicode-props.js

[10:48] <Geth> ¦ nqp: [js] Implement :Name unicode property

[10:48] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/7460b33e29

[11:12] <tbrowder> AlexDaniel: request review of PR #1300 which should help with work on table and other pod formatting code

[11:12] <AlexDaniel> R#1300

[11:12] <synopsebot> R#1300 [open]: https://github.com/rakudo/rakudo/pull/1300 Untwine Pod

[11:13] <AlexDaniel> tbrowder: it says “The changes to roast (see below) are still required.”, what does that mean exactly?

[11:14] <tbrowder> hm, not sure, will check...

[11:15] <AlexDaniel> tbrowder: I'm just skimming over the text, but it says “This commit increases the amount of memory used during compilation from 700Mb => 1200Mb”

[11:15] <AlexDaniel> not sure what *exactly* this implies, but that's probably unacceptable

[11:16] <AlexDaniel> (given that we have a bunch of people trying to use perl 6 on rpi and other small linux boards)

[11:17] <tbrowder> yes, but that was with a very old rakudo. can you add thou’s PR as a branch so others can play with it?

[11:21] <AlexDaniel> ah, it's for the synthetic test

[11:21] <tbrowder> also, the changes to roast referenced in PR have been merged already.

[11:23] <tbrowder> “others” => “moi”

[11:24] <AlexDaniel> yeah I've left a comment

[11:50] <AlexDaniel> .tell lizmat https://github.com/rakudo/rakudo/wiki/Ticket-updates

[11:50] <yoleaux> AlexDaniel: I'll pass your message to lizmat.

[11:50] <AlexDaniel> (please feel free to beautify the page any way you like)

[11:54] <lizmat> .

[11:54] <yoleaux> 11:50Z <AlexDaniel> lizmat: https://github.com/rakudo/rakudo/wiki/Ticket-updates

[11:54] <lizmat> looks ok to me so far  :-)

[11:56] <AlexDaniel> reportable6: 2017-11-19T14:04:30Z 2017-11-26T22:21:12Z

[11:56] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[11:56] <AlexDaniel> one link is wrong :)

[11:57] <reportable6> AlexDaniel, https://gist.github.com/a1f860270afb3df84cc9e76daf395082

[12:02] <AlexDaniel> reportable6: 2017-11-05T12:53:21Z 2017-11-13T22:37:40Z

[12:02] <reportable6> AlexDaniel, OK, working on it! This may take up to 40 seconds

[12:02] <AlexDaniel> … and one has a SPAM ticket in it…

[12:03] <reportable6> AlexDaniel, https://gist.github.com/44d5028345ec26cd43a747fb1d297670

[12:15] <tbrowder> AlexDaniel: when working the pod config quote issue, i think the only legal quoting and other entries ought to be compatible with the table in synopsis S26 (config, delimited blocks). that makes the solution much easier since only a small set of config value entry forms are defined there. then we can warn or fail if anything else is input.

[12:17] <travis-ci> Rakudo build failed. Zoffix Znet 'Allow parse of Callable's signatures constraints without `:`

[12:17] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/315170716 https://github.com/rakudo/rakudo/compare/4755228249e6...c0f99a393b9f

[12:17] <buggable> [travis build above] ☠ All failures are due to: missing build log (3 failures), failed make test (3 failures). Across all jobs, 2 unique test files failed.

[12:19] <AlexDaniel> tbrowder: so what exactly do you want to forbid?

[12:20] <tbrowder> things like :caption(Q|blah|)

[12:25] <tbrowder> and other quote types. it’s clear that pod doesn’t allow unicode except inside a formatting code block so the double-chevron quotes shouldn’t be allowed either. if the user doesn’t use one of the prescribed formats in the table then either warn or ignore is my vote (not fail unless the parser fails).

[12:26] <AlexDaniel> m: my $x is default(Q|abc|); say $x

[12:26] <camelia> rakudo-moar 83eac0e42: OUTPUT: «abc␤»

[12:27] <jnthn> .

[12:27] <yoleaux> 11 Dec 2017 23:56Z <Zoffix> jnthn: I moved those inside the locks. If that's incorrect let me know: https://github.com/rakudo/rakudo/commit/8df8ce09ce

[12:27] <yoleaux> 11 Dec 2017 23:56Z <Zoffix> jnthn: that was RE this (that bot didn't pass): `jnthn how come `$!signals-by-Str-setup` and `$!signals-setup` are set to `True` *outside* the lock? Isn't there a race that as one thread just enters the lock another one just exited it but hasn't yet set those to True, so the other thread would check it and find it false and duplicate the work?

[12:27] <yoleaux> 11 Dec 2017 23:57Z <Zoffix> jnthn: https://github.com/rakudo/rakudo/commit/1f411693bd60b81b018e0c8457d003bebea8374d

[12:27] <jnthn> .tell Zoffix seems reasonable

[12:27] <yoleaux> jnthn: I'll pass your message to Zoffix.

[12:27] <tbrowder> i added the the table of config formats to the docs

[12:29] <AlexDaniel> tbrowder: I see. Well, maybe, I'm not entirely sure

[12:30] <ilmari> would it make sense to have a thread-safe version of 'once'?

[12:30] <lizmat> that i

[12:30] <lizmat> *is* the long term goal, afaik

[12:31] <lizmat> and/or making state variables thread-safe

[12:31] <lizmat> because that's really the root of the problem

[12:31] <tbrowder> the config quote issue is that the original enclosing quote pair is not getting stripped. that should probably be taken care of in the grammar, but it can be done in nqp land.

[12:33] <ilmari> lizmat: that sound a lot harder than wrapping up 'unless $foo-done { $foo-lock.protect { unless $foo-done { ...; $foo-done = True } } }' in some nicer syntax

[12:33] <lizmat> but how to prevent the race condition on creating the lock?  or would you do that at init time ?

[12:34] <tbrowder> i can extend the acceptable quotes if you want, but i would like to see a list. note that allowing Q|| also means allowing Q[] and other bracketing forms....

[12:34] <AlexDaniel> tbrowder: playing a bit more with it right now, it seems like it thinks that everything is a string…

[12:35] <tbrowder> also q, qq, qqw, ...

[12:35] <lizmat> ilmari: also, you don't really need a protect block there: just a flag that it's running/has run

[12:35] <tbrowder> yee

[12:37] <tbrowder> yes, all is stringified, but only stuff in <> shows without the quotes, all else shows the quotes as well as the contents.

[12:38] <tbrowder> so the set of chars to be stripped can be large if all are allowed. but that can be handled.

[12:41] <tbrowder> bottom line imho is: the first cut solution may not find all things a user might try, so the problem remains open-ended unless the set allowed is clearly defined.

[12:42] <ilmari> lizmat: I guess an unless cas($done, False, True) { ... } would be enough?

[12:42] * AlexDaniel just tried :foo[5, 8] and is a bit disappointed

[12:42] <tbrowder> i don’t think that is unreasonable, and it appears Damian thought so, too.

[12:43] <AlexDaniel> tbrowder: well, try it, we'll see how it goes

[12:43] <AlexDaniel> tbrowder: but generally I dislike the idea of stripping the quotes afterwards

[12:43] <lizmat> ilmari: to wrap the setting of the state variable?  that could work, I guess ?

[12:43] <AlexDaniel> it should know the insides without stripping anything…

[12:43] <ilmari> lizmat: instead of the unless/protect/unless dance

[12:43] <jnthn> Trying to make state variable "threadsafe" won't go anywhere good

[12:44] <lizmat> :-(

[12:44] <jnthn> The clue's in the name

[12:44] <jnthn> "state"

[12:44] <jnthn> What happens if we mutate state from two threads at once?

[12:44] <jnthn> Boom.

[12:45] <timotimo> hm. should we implement once in terms of atomic ops perhaps somehow?

[12:45] <jnthn> Well, once is menat to be "once per closure clone", not "once ever"

[12:45] <jnthn> I think what a lot of those problems want *is* once ever

[12:45] <timotimo> hm, true

[12:46] <jnthn> It's kinda like a Promise that triggers its work on the first time you await it

[12:46] <AlexDaniel> ( related trap: https://docs.perl6.org/language/traps#Using_a_once_block )

[12:46] <jnthn> Promise::Deferred or some such

[12:47] <jnthn> Or just Deferred or something

[12:50] <tbrowder> i do too, but that’s all i can see in nqp land—grammar is another ball game which can maybe be handled by someone interested. i can’t do that now, but can start in that direction. i can do the nqp thing and note that it is an incremental solution. actually, World.nqp may have the answer, too.  my goal is to cure the RT asap, but not neccesarily have it be a final solution. where do you want my effort put?

[12:51] <AlexDaniel> tbrowder: well, you decide. But to me it feels like all pod-related code had enough incremental solutions, and it's time to do stuff properly

[12:52] <tbrowder> well, i’m a bit more pragmatic than you i guess :)

[12:53] <AlexDaniel> tbrowder: we will have to take it anyway as long as it makes things better :)

[12:55] <tbrowder> ok, holiday stuff is taking lots of time, but i’ll look into doing it right higher up the chain if i can.

[12:55] <AlexDaniel> tbrowder++

[12:57] <DrForr> Speaking of pod-related code...

[13:00] <DrForr> https://github.com/drforr/perl6-Pod-To-BlogspotHTML - The walker should be rewritten to an iterator (probably), the test suite is being rewritten using roast, and as it stands it's probably not properly subclassable, but those are all issues I'll work out before Xmas break.

[13:01] <DrForr> I'll also likely include an internal Pod::To::HTMLFragment that does the heavy lifting, so BlogspotHTML can override just a few methods and get something that looks nicer probably with style sheets.

[13:18] <Geth> ¦ roast: a894326bfe | (Zoffix Znet)++ | S12-construction/named-params-in-BUILD.t

[13:18] <Geth> ¦ roast: Can bind to native type attributes in build methods

[13:18] <Geth> ¦ roast:

[13:18] <Geth> ¦ roast: RT#127845: https://rt.perl.org/Ticket/Display.html?id=127845

[13:18] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/77a2ff13d2828eb36da

[13:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a894326bfe

[13:18] <synopsebot> RT#127845 [open]: https://rt.perl.org/Ticket/Display.html?id=127845 [BUG] Making a parameter of a BUILD submethod a uint8 triggers a bytecode validation error in Rakudo

[13:25] <Geth> ¦ roast: 77a081fb22 | (Zoffix Znet)++ | S02-names/is_default.t

[13:25] <Geth> ¦ roast: Reformat tests for better readability

[13:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/77a081fb22

[13:31] <Geth> ¦ roast: 785446408e | (Zoffix Znet)++ | S02-names/is_default.t

[13:31] <Geth> ¦ roast: Test is default() respects type constraint

[13:31] <Geth> ¦ roast:

[13:31] <Geth> ¦ roast: RT#126107: https://rt.perl.org/Ticket/Display.html?id=126107

[13:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/785446408e

[13:31] <synopsebot> RT#126107 [open]: https://rt.perl.org/Ticket/Display.html?id=126107 [BUG] "of" type constraint inconsistently applied

[13:33] <lizmat> commute&

[13:35] <Geth> ¦ roast: 0d79eda3dc | (Zoffix Znet)++ | S02-names/is_default.t

[13:35] <Geth> ¦ roast: Test default `is default()` gets adjusted to type constraint

[13:35] <Geth> ¦ roast:

[13:35] <Geth> ¦ roast: RT#126107: https://rt.perl.org/Ticket/Display.html?id=126107

[13:35] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0d79eda3dc

[13:38] <dogbert2> m: my Int @a[2; 2] is default(0)

[13:38] <camelia> rakudo-moar 83eac0e42: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤is default on shaped Array[Int] not yet implemented. Sorry.␤at <tmp>:1␤------> 3my Int @a[2; 2] is default(0)7⏏5<EOL>␤    expecting any of:␤        constraint␤»

[13:43] <Geth> ¦ roast: 0431615286 | (Zoffix Znet)++ | S02-types/baggy.t

[13:43] <Geth> ¦ roast: Test creating setty/baggy types with lazy iterables throws

[13:43] <Geth> ¦ roast:

[13:43] <Geth> ¦ roast: RT#125580: https://rt.perl.org/Ticket/Display.html?id=125580

[13:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0431615286

[13:44] <synopsebot> RT#125580 [open]: https://rt.perl.org/Ticket/Display.html?id=125580 [BUG] bag/set related issues

[13:44] <dogbert2> Zoffix++, you're on a roll

[13:47] <AlexDaniel> Zoffix++ indeed

[13:47] <AlexDaniel> it's like if there's a Zoffathon that nobody told us about :)

[13:52] <Geth> ¦ rakudo: ced4af662f | (Zoffix Znet)++ | t/05-messages/02-errors.t

[13:52] <Geth> ¦ rakudo: Test use of wrong sigil suggests right var

[13:52] <Geth> ¦ rakudo:

[13:52] <Geth> ¦ rakudo: RT#125277: https://rt.perl.org/Ticket/Display.html?id=125277

[13:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ced4af662f

[13:52] <synopsebot> RT#125277 [open]: https://rt.perl.org/Ticket/Display.html?id=125277 [LTA] error message when using the wrong sigil with an @array or %hash

[13:55] <Geth> ¦ rakudo: 21555412b1 | (Zoffix Znet)++ | t/05-messages/02-errors.t

[13:55] <Geth> ¦ rakudo: Remove extraneous comma in test description

[13:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/21555412b1

[14:11] <dogbert2> zofbot hello

[14:11] <dogbert2> zofbot: hello

[14:13] <dogbert2> ZofBot: are you alive?

[14:13] <ZofBot> dogbert2, If I chewed master's shoe, for instance, he used to kick me; but if I chewed Fred's, Fred would tickle me under the ear

[14:18] <AlexDaniel> good bot

[14:18] <AlexDaniel> ZofBot: say something racist

[14:18] <ZofBot> AlexDaniel, So, maybe we need to add a correcsponding special case somewhere

[14:20] <Geth> ¦ roast: 70f09dd721 | (Zoffix Znet)++ | S02-names/pseudo.t

[14:20] <Geth> ¦ roast: Small formatting adjustment

[14:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/70f09dd721

[14:24] <Geth> ¦ rakudo: a82e0e7da5 | (Zoffix Znet)++ | src/core/PseudoStash.pm

[14:24] <Geth> ¦ rakudo: Fix gut spillage in pseudopackages

[14:24] <Geth> ¦ rakudo:

[14:24] <Geth> ¦ rakudo: When going too high up with CALLER::, CALLERS::, or SETTING::

[14:24] <Geth> ¦ rakudo:

[14:24] <Geth> ¦ rakudo: Fixes RT #119521: https://rt.perl.org/Ticket/Display.html?id=119521

[14:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/a82e0e7da5

[14:24] <synopsebot> RT#119521 [open]: https://rt.perl.org/Ticket/Display.html?id=119521 [BUG] “ctxlexpad needs an MVMContext” when reaching too far out to get to the truth in Rakudo

[14:25] <Geth> ¦ roast: 7f55679952 | (Zoffix Znet)++ | S02-names/pseudo.t

[14:25] <Geth> ¦ roast: no guts spillage when going too high up scope in pseudopackages

[14:25] <Geth> ¦ roast:

[14:25] <Geth> ¦ roast: RT #119521: https://rt.perl.org/Ticket/Display.html?id=119521

[14:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7f55679952

[15:37] <Geth> ¦ rakudo: d4ad6fa953 | (Zoffix Znet)++ | t/05-messages/02-errors.t

[15:37] <Geth> ¦ rakudo: Test RO assignment indicates value of the thing

[15:37] <Geth> ¦ rakudo:

[15:37] <Geth> ¦ rakudo: RT#131362: https://rt.perl.org/Ticket/Display.html?id=131362

[15:37] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d4ad6fa953

[15:37] <synopsebot> RT#131362 [new]: https://rt.perl.org/Ticket/Display.html?id=131362 [LTA] Can “Cannot modify an immutable X” error message also include the value? (42 = $x)

[15:48] <Geth> ¦ rakudo: 653017561f | (Zoffix Znet)++ | t/05-messages/02-errors.t

[15:48] <Geth> ¦ rakudo: Test declaring enum with uninitialized hash warns

[15:48] <Geth> ¦ rakudo:

[15:48] <Geth> ¦ rakudo: RT#130446: https://rt.perl.org/Ticket/Display.html?id=130446

[15:48] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/653017561f

[15:48] <synopsebot> RT#130446 [new]: https://rt.perl.org/Ticket/Display.html?id=130446 [REGRESSION] [LTA] Creating an enum from a Hash does not work but no longer warns (enum Bits (%thing))

[16:21] <Geth> ¦ rakudo: fc52143bee | (Zoffix Znet)++ | 2 files

[16:21] <Geth> ¦ rakudo: Fix crash when using allomorphs as enum values

[16:21] <Geth> ¦ rakudo:

[16:21] <Geth> ¦ rakudo: Mixing both NumericEnumeration and StringyEnumeration causes a

[16:21] <Geth> ¦ rakudo: conflict with Str method resolution.

[16:21] <Geth> ¦ rakudo:

[16:21] <Geth> ¦ rakudo: Fix by adding NumericStringyEnumeration role and using it for

[16:21] <Geth> ¦ rakudo: allomorphs.

[16:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fc52143bee

[16:22] <Geth> ¦ roast: a2cec00d1c | (Zoffix Znet)++ | S12-enums/basic.t

[16:22] <Geth> ¦ roast: Test can create enum with a Hash

[16:22] <Geth> ¦ roast:

[16:22] <Geth> ¦ roast: RT#130446: https://rt.perl.org/Ticket/Display.html?id=130446

[16:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a2cec00d1c

[16:22] <synopsebot> RT#130446 [new]: https://rt.perl.org/Ticket/Display.html?id=130446 [REGRESSION] [LTA] Creating an enum from a Hash does not work but no longer warns (enum Bits (%thing))

[16:24] <Geth> ¦ roast: ba6740c170 | (Zoffix Znet)++ | S12-enums/basic.t

[16:24] <Geth> ¦ roast: Test "NumericStringyEnumeration" uses key as .Str value

[16:24] <Geth> ¦ roast:

[16:24] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/fc52143bee

[16:24] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ba6740c170

[16:58] <Geth> ¦ rakudo: 1c7d15d73d | (Zoffix Znet)++ | src/core/PseudoStash.pm

[16:58] <Geth> ¦ rakudo: Fix gut spillage in pseudo packages (2)

[16:58] <Geth> ¦ rakudo:

[16:58] <Geth> ¦ rakudo: Fixes cases missed by first pass in

[16:58] <Geth> ¦ rakudo: https://github.com/rakudo/rakudo/commit/a82e0e7da5

[16:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1c7d15d73d

[16:59] <Geth> ¦ roast: 9fbde14b7a | (Zoffix Znet)++ | S02-names/pseudo.t

[16:59] <Geth> ¦ roast: Test more gut-throwing pseudopackage combinations

[16:59] <Geth> ¦ roast:

[16:59] <Geth> ¦ roast: - Also, indicate what mixed combination failed when test fails

[16:59] <Geth> ¦ roast: - Rakudo fix: https://github.com/rakudo/rakudo/commit/1c7d15d73d

[16:59] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9fbde14b7a

[17:31] <dogbert17> m: my Set $s = <spam eggs bacon>.Set; say $s.elems; say "There are $s.elems in the set" # is this intended, i.e. that all elements are written out ?

[17:31] <camelia> rakudo-moar 1c7d15d73: OUTPUT: «3␤There are eggs bacon spam.elems in the set␤»

[17:32] <lizmat> dogbert17: that feels wrong

[17:32] <geekosaur> dogbert17, if you say $s,.elems() instead it will dtrt

[17:32] <geekosaur> er $s.elems()

[17:32] <geekosaur> otherwise it assumes the .elems is meant literally

[17:32] <dogbert17> geekosaur++

[17:33] <lizmat> ah, yes  :-)

[17:33] <geekosaur> interpolation of expressions without explicit {} is always going to be a tricky heuristic thing "every DWIM has a WAT"

[17:33] <timotimo> aye, we only interpolate method call chains and non-$-sigiled things if there's some kind of postcircumfix at the end

[17:33] <Geth> ¦ roast: 69d9d04601 | (Zoffix Znet)++ | S04-declarations/my.t

[17:33] <Geth> ¦ roast: Test binding/assignment to grouped sigilless vars

[17:33] <Geth> ¦ roast:

[17:33] <Geth> ¦ roast: RT#124210: https://rt.perl.org/Ticket/Display.html?id=124210

[17:33] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/69d9d04601

[17:33] <synopsebot> RT#124210 [open]: https://rt.perl.org/Ticket/Display.html?id=124210 [BUG] Assignment to several declared SSA-style \x variables fails in Rakudo

[17:33] <timotimo> that's also the rule that has you write @foo[] or similar to get an array interpolated

[17:34] <dogbert17> the array one I knew, guess I should have figured out the () case as well

[17:35] <timotimo> m: sub postcircumfix:<^ ^>(|) { }; my @test; say "this is test: @test^^"

[17:35] <camelia> rakudo-moar 1c7d15d73: OUTPUT: «this is test: @test^^␤»

[17:35] <timotimo> hm, i wonder why that would be

[17:36] <geekosaur> think it's related to the way/possibly time that the perl6 parser gets braided with the string parser?

[17:37] <geekosaur> there's at least one bug on file about oddities in how braiding works iirc

[17:38] <timotimo> m: sub bleh(&infix:<+>) { say 1 + 2 }; test(* * *)

[17:38] <camelia> rakudo-moar 1c7d15d73: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    test used at line 1␤␤»

[17:38] <geekosaur> alternately the ^^ is just being misparsed because it conflicts with some other rule, but I can't think of one it'd conflict with offhand (of course that proves ~nothing)

[17:38] <timotimo> m: sub test(&infix:<+>) { say 9 + 9 }; test(* * *)

[17:38] <camelia> rakudo-moar 1c7d15d73: OUTPUT: «81␤»

[17:38] <timotimo> ^- this is fun

[18:14] <Geth> ¦ roast: softmoth++ created pull request #367: Formatting Codes don't produce spurious ""

[18:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/367

[18:14] <synopsebot> SPEC#367 [open]: https://github.com/perl6/roast/pull/367 Formatting Codes don't produce spurious ""

[18:53] <Geth> ¦ roast: 84e2f22389 | (Brad Gilbert)++ (committed using GitHub Web editor) | S02-types/native.t

[18:53] <Geth> ¦ roast: fix assigning typo from 0d871001ff

[18:53] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/84e2f22389

[20:16] <lizmat> so I was looking at https://stackoverflow.com/questions/47780404/how-to-make-a-perl-6-script-exit-on-ctrld-input

[20:16] <lizmat> and thought simplistically that this should work: while with prompt("> ") { $^a.say }

[20:16] <lizmat> m: while with prompt("> ") { $^a.say }   # alas, it doesn't

[20:16] <camelia> rakudo-moar 1c7d15d73: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    with used at line 1␤␤»

[20:17] <lizmat> so I added a "with" sub: sub with(\a) { defined(a) ?? a !! Nil }

[20:17] <lizmat> m: sub with(\a) { defined(a) ?? a !! Nil }; while with prompt("> ") { $^a.say }

[20:17] <camelia> rakudo-moar 1c7d15d73: OUTPUT: «> »Wann treffen wir drei wieder zusamm?«␤>    »Um die siebente Stund‘, am Brückendamm.«␤>      »Am Mittelpfeiler.«␤>          »Ich lösche die Flamm.«␤>  »Ich mit«␤> »

[20:17] <lizmat> which does work

[20:18] <lizmat> so I was wondering: why don't we add this "with" sub to the core ?

[20:56] <Zoffix> -1 on the name: causing confusion with the statement modifier + posing the question of why there isn't a &without. -1 on adding a sub, since you can just write while prompt('> ') // Nil { } to get the same effect, no?

[20:56] <yoleaux> 12:27Z <jnthn> Zoffix: seems reasonable

[20:56] <Zoffix> :)

[21:03] <Zoffix> Doesn't prompt return Nil in the first place?

[21:03] <geekosaur> I would hope it returns the Str it read

[21:05] <lizmat> Zoffix: it shouldn't return on an empty string

[21:05] <Zoffix> Ah right. Then // Nil is what I'd use

[21:06] <lizmat> alas, "" is also false and exits the while

[21:07] <Zoffix> On the topic of adding things: there's an old ticket to add TR/// that I plan to do soon, if anyone wanted to object

[21:07] <lizmat> not me  :-)

[21:11] <Zoffix> loop { say prompt('> ') // last }

[21:13] <Zoffix> m: @ = $*IN.lines; dd prompt

[21:13] <camelia> rakudo-moar 1c7d15d73: OUTPUT: «Nil␤»

[21:14] <Zoffix> geekosaur: ^ I meant when it reached EOF

[21:15] * Zoffix goes back to lurking

[21:17] <lizmat> decommute&

[22:03] <Geth> ¦ roast: ba86027f3e | usev6++ | 5 files

[22:03] <Geth> ¦ roast: [jvm] Unskip now passing tests

[22:03] <Geth> ¦ roast:

[22:03] <Geth> ¦ roast: Fixed with nqp commit 7eaebf5abd

[22:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ba86027f3e

[22:07] <travis-ci> Rakudo build passed. Zoffix Znet 'Test use of wrong sigil suggests right var

[22:07] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/315368886 https://github.com/rakudo/rakudo/compare/83eac0e42352...ced4af662fa9

[22:46] <Geth> ¦ roast: ronaldxs++ created pull request #368: `no strict` autovivification 2 level hash

[22:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/368

[22:46] <synopsebot> SPEC#368 [open]: https://github.com/perl6/roast/pull/368 `no strict` autovivification 2 level hash

[22:56] <Geth> ¦ roast: aa5691d102 | (Ronald Schmidt)++ | S02-names/strict.t

[22:56] <Geth> ¦ roast: `no strict` autovivification 2 level hash

[22:56] <Geth> ¦ roast:

[22:56] <Geth> ¦ roast: RT#125183: https://rt.perl.org/Ticket/Display.html?id=125183

[22:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/aa5691d102

[22:56] <Geth> ¦ roast: 9abb9ae6e7 | (Zoffix Znet)++ (committed using GitHub Web editor) | S02-names/strict.t

[22:56] <Geth> ¦ roast: Merge pull request #368 from ronaldxs/no-strict-autovivify-2-level-hash

[22:56] <Geth> ¦ roast:

[22:56] <synopsebot> RT#125183 [new]: https://rt.perl.org/Ticket/Display.html?id=125183 [BUG] Crash on no strict and multi-dimensional hash

[22:56] <Geth> ¦ roast: `no strict` autovivification 2 level hash

[22:56] <synopsebot> SPEC#368 [closed]: https://github.com/perl6/roast/pull/368 `no strict` autovivification 2 level hash

[22:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9abb9ae6e7

[23:41] <Geth> ¦ rakudo: softmoth++ created pull request #1307: Drop extraneous spaces in code and table blocks

[23:41] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1307

[23:41] <synopsebot> RAKUDO#1307 [open]: https://github.com/rakudo/rakudo/pull/1307 Drop extraneous spaces in code and table blocks
