[00:05] <jnthn> sleep time; 'night

[00:18] <timotimo> inlining is currently prevented when natives are involved

[01:44] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Manually inline swapping logic

[01:44] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/193059515 https://github.com/rakudo/rakudo/compare/4ae08e0b245c...c64aeb32ddb2

[01:45] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[02:12] <MasterDuke> .tell jnthn sorry, i guess i wasn't clear. to me, what you said may be useful sounded very like what you said the ops i added actually did. i don't mind ditching the PR (it was mostly done as a learning experience), but i just don't quite understand your comments

[02:12] <yoleaux2> MasterDuke: I'll pass your message to jnthn.

[03:31] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Remove destruction tests of doubtful value

[03:31] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/193060808 https://github.com/rakudo/rakudo/compare/c64aeb32ddb2...dca05c260329

[04:48] <travis-ci> Rakudo build errored. Elizabeth Mattijsen 'Make R:It.Batch handle Inf * large ints better

[04:48] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/193071395 https://github.com/rakudo/rakudo/compare/dca05c260329...69a66b7fa7fd

[05:50] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Fix RT #130436

[05:50] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/193084913 https://github.com/rakudo/rakudo/compare/69a66b7fa7fd...7ddc5f7cea73

[05:50] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130436

[06:33] <travis-ci> Rakudo build failed. Zoffix Znet 'Log all commits to date

[06:33] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/193108134 https://github.com/rakudo/rakudo/compare/7ddc5f7cea73...fa36f8f753b1

[07:15] <travis-ci> Rakudo build failed. Zoffix Znet 'Fix typo MasterDuke++'

[07:15] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/193118048 https://github.com/rakudo/rakudo/compare/fa36f8f753b1...35a3c08fd12e

[07:16] <[Tux]> This is Rakudo version 2016.12-388-g1aeea1062 built on MoarVM version 2016.12-115-ged2df9ac

[07:16] <[Tux]> csv-ip5xs        2.870

[07:16] <[Tux]> test            11.955

[07:16] <[Tux]> test-t           4.873

[07:16] <[Tux]> csv-parser      13.120

[08:58] <lizmat> Files=1162, Tests=56138, 186 wallclock secs (10.94 usr  4.58 sys + 1101.42 cusr 117.27 csys = 1234.21 CPU)

[09:19] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Fix for RT #130439

[09:19] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/193194773 https://github.com/rakudo/rakudo/compare/93b0ffae5292...76f14a5c1f55

[09:19] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130439

[09:40] <lizmat> hmmm... is Geth down ?

[09:40] <lizmat> brokenchicken: ^^^  ?

[09:40] <timotimo> looks kind of like

[09:41] <lizmat> afk for a few hours&

[09:41] <timotimo> it doesn't run on p6c, so i can't just jump in and restart it or anything

[09:41] <lizmat> https://github.com/rakudo/rakudo/commit/c9a9bc855660812a   # just committed

[09:41] <lizmat> afk&

[09:43] <timotimo> ooooooh

[11:33] <brokenchicken> hm. I see it reporting that one in the terminal log... some weird netsplit?

[11:34] <brokenchicken> also, buggable is at 2.5GB of RAM and my box is swapping :'(

[11:35] <AlexDaniel> brokenchicken: run it on whateverable server then?

[11:36] <brokenchicken> AlexDaniel: so it'd eat all the RAM there?

[11:36] <AlexDaniel> yea

[11:37] <brokenchicken> Geth: ver 432

[11:37] <brokenchicken> Geth: ver https://github.com/rakudo/rakudo/commit/c99fbc67938479b518919d1651fd05db9f9f42ed

[11:37] <Geth> brokenchicken, version bump brought in these changes: https://github.com/perl6/nqp/compare/2016.12-90-g0c249e72...2016.12-97-g7b6fff9

[11:37] <AlexDaniel> there are 10GB free atm, so it will handle one more bot easily

[11:38] <brokenchicken> It'd just use all the 10GB

[11:38] * brokenchicken doesn't see the point

[11:38] <timotimo> did you already get jnthn's latest fixes?

[11:38] <AlexDaniel> it will take some time to get to this mark :)

[11:38] <brokenchicken> Yes.

[11:38] <brokenchicken> AlexDaniel: it depends on how often travis reports stuff

[11:39] <brokenchicken> Took it 12 hours to get from 300MB to 2.5GB

[11:44] <jnthn> I doubt you've got the latest round of fixes, which are still in PRs

[11:44] <yoleaux2> 02:12Z <MasterDuke> jnthn: sorry, i guess i wasn't clear. to me, what you said may be useful sounded very like what you said the ops i added actually did. i don't mind ditching the PR (it was mostly done as a learning experience), but i just don't quite understand your comments

[11:44] <jnthn> I will merge one of them pre-relesae

[11:44] <jnthn> The other will wait until after

[11:44] <jnthn> Because it introduces a few new sanity checks that will VM-panic

[11:44] <brokenchicken> Ah, no, then no

[11:44] <brokenchicken> Actually it's 36 hours. not 12

[11:45] <jnthn> And I'm pretty comfortable they won't be tripped over by code out there, but I don't want to find out the day after the release about this ;)

[11:48] <timotimo> oh, of course

[11:50] <timotimo> maybe i should take the chance to finally merge in line_based_coverage after the release

[11:50] <brokenchicken> \o/

[11:50] <timotimo> that'll prevent all the conflicts all the damn time just because the oplist changes

[11:51] <jnthn> timotimo: Can you PR it, and I'll give it a quick review before we merge it?

[11:51] <timotimo> sure

[11:51] <timotimo> i'm not 100% happy with the branch, because it still has a noticable false-negative rate for covered lines, and that's super annoying

[12:37] * lizmat wonders what masak would have to say about http://stackoverflow.com/questions/41730641/can-i-insert-named-captures-in-the-match-tree-without-actually-matching-anything

[12:43] <arnsholt> It's not entirely clear to me what he wants

[12:44] <timotimo> i know what he wants

[12:45] <timotimo> create a new Match object that gets put into the tree that has its own .orig and completely made up .from and .to and such

[12:45] <arnsholt> "Doctor, it hurts when I do this."

[12:48] <Geth> rakudo/nom: 017c6cf523 | (Elizabeth Mattijsen)++ | src/core/List.pm

[12:48] <Geth> rakudo/nom: Make List/Array.sum about 30% faster

[12:48] <Geth> rakudo/nom:

[12:48] <Geth> rakudo/nom: Especially for smaller lists/arrays

[12:48] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/017c6cf523

[12:50] * arnsholt added a comment

[12:51] <jnthn> I think the answer is "don't do that, use make/.made to hang extra data off the match object"

[12:52] <arnsholt> Yeah, that's more or less what I tried to say

[12:53] <jnthn> I'm also very curious about the scope of %Market_Shortcode in that code

[12:53] <jnthn> If it's constant or so it's fine

[12:54] <jnthn> Yeah, agree wiht your answer, arnsholt++

[12:54] <jnthn> *with

[13:11] <Geth> rakudo/nom: 22e589acce | (Elizabeth Mattijsen)++ | src/core/List.pm

[13:11] <Geth> rakudo/nom: Make List/Array.fmt() about 60x faster

[13:11] <Geth> rakudo/nom:

[13:11] <Geth> rakudo/nom: Because we don't actually have to do a sprintf internally for the

[13:11] <Geth> rakudo/nom: default format '%s', but we can do just a .Str.  Apparently sprintf

[13:11] <Geth> rakudo/nom: uses a regular expression somewhere under the hood, and that makes

[13:11] <Geth> rakudo/nom: things a *lot* slower in this case.

[13:11] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/22e589acce

[13:13] <timotimo> i wonder how often you actually .fmt()?

[13:14] <lizmat> timotimo: I don't know either

[13:14] <timotimo> how expensive is a check for "it's just '%s'" for when you want a different separator?

[13:16] <lizmat> timotimo: ah, good point

[13:17] <timotimo> we could perhaps also make a cheap check to see if it's just a single %s inside the string and do a regex-less thing?

[13:17] <timotimo> like "(%s)" could be super fast that way

[13:20] <timotimo> does simplematch still exist? or did all the optimizations from that get put into match itself?

[13:24] <lizmat> yeah, it did

[13:24] <lizmat> afaik

[13:46] <brokenchicken> sprintf got a whole grammar for it: https://github.com/perl6/nqp/blob/master/src/HLL/sprintf.nqp

[13:57] <lizmat> arnsholt: I think brian needs more guidance  :-)

[13:58] <jnthn> lizmat: I think it boils down to, "if you want to do this, you should probably think about your problem differently" :)

[13:58] <jnthn> lizmat: And the different thinking is action methods, which two people already pointed out.

[13:59] <jnthn> Or not even action methods, you can `make` in an inline block inside the token too

[13:59] <lizmat> feels to me he's not grokking action methods, or the power of 'make'

[13:59] <lizmat> yet

[14:01] <jnthn> Aye, that can take a bit of time :)

[14:01] <jnthn> Once he does, though, I suspect he'll be able to write a nice explanation of them :)

[14:02] <lizmat> see it as an investment  :-)

[14:02] <lizmat> fwiw, I'm not fully grokking this either  :-)

[14:03] <lizmat> like I understand how an internal combustion engine works, but don't let me fix your car  :-)

[14:05] <brokenchicken> hehe

[14:05] <travis-ci> Rakudo build passed. Zoffix Znet 'Fix typo timotimo++ ; add missing commit MasterDuke++'

[14:05] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/193226966 https://github.com/rakudo/rakudo/compare/bd46cb72802f...1aeea1062f80

[14:06] <brokenchicken> wow, it just finished doing it.

[14:08] <Geth> rakudo/nom: 7ef3682cf0 | (Elizabeth Mattijsen)++ | src/core/List.pm

[14:08] <Geth> rakudo/nom: Make List/Array.fmt("...") also about 60x faster

[14:08] <Geth> rakudo/nom:

[14:08] <Geth> rakudo/nom: Provided the format string only has a single '%s' in it.

[14:08] <Geth> rakudo/nom: timotimo++ for inspiration

[14:08] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7ef3682cf0

[14:09] <brokenchicken> :o

[14:11] <timotimo> <3

[14:12] <brokenchicken> ♥

[14:16] <perlpilot> re bdf's SO question ... I dunno, I think he's just experimenting and looking for a way to manipulate the Match objects no matter what actually matched as a way to test the boundary of what's possible (rather than using this as an actual technique for anything)

[14:17] <DrForr> You can probably do that from within nqp, but really from the user perspective just building a proper AST would be the way to go.

[14:19] <perlpilot> aye

[14:20] <perlpilot> Perhaps I'm being to naive, but I look at it like he's exploring a territory by going beyond the bounds of that territory so that he knows exactly where the boundary is

[14:20] <perlpilot> s/to/too/

[14:21] <awwaiid> One of my favorite learning techniques

[14:24] <lizmat> commute to Niederrhein.pm meeting&

[14:30] <brokenchicken> .seen FROGGS

[14:30] <yoleaux2> I saw FROGGS 30 Dec 2016 12:44Z in #moarvm: <FROGGS> samcv++

[14:30] <timotimo> :(

[14:30] <brokenchicken> .ask FROGGS how come no test for https://rt.perl.org/Ticket/Display.html?id=127671#ticket-history ?

[14:30] <yoleaux2> brokenchicken: I'll pass your message to FROGGS.

[14:49] <arnsholt> There. Tripled size of answer

[15:06] <lizmat> arnsholt++

[15:07] <arnsholt> (As an aside, one of the reasons I backed his new book was specifically to see how he treated grammars while it was happening)

[15:11] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Make reified List.Array about 3x faster

[15:11] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/193323658 https://github.com/rakudo/rakudo/compare/1aeea1062f80...c9a9bc855660

[15:19] <Geth> rakudo/nom: ed482ec9b1 | (Elizabeth Mattijsen)++ | src/core/List.pm

[15:19] <Geth> rakudo/nom: Make List/Array.join about 20% faster

[15:19] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ed482ec9b1

[15:40] <brokenchicken> seems jvm nqp doesn't even build anymore? `make` is failing with https://gist.github.com/zoffixznet/ce21b1e94b3ac08850b4cf8288976480

[15:41] <brokenchicken> re-run of make fuller error: https://gist.github.com/zoffixznet/f58648963ec8e44eb3a1b3b79f5eac85

[15:56] <Geth> roast: 890ca310e7 | (Zoffix Znet)++ | S32-array/create.t

[15:56] <Geth> roast: Test array elements get writable containers

[15:56] <Geth> roast:

[15:56] <Geth> roast: RT#130583: https://rt.perl.org/Ticket/Display.html?id=130583

[15:56] <Geth> roast: review: https://github.com/perl6/roast/commit/890ca310e7

[15:56] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130583

[16:01] <Geth> roast: 1c61263ca4 | (Zoffix Znet)++ | S02-types/array-shapes.t

[16:01] <Geth> roast: Test .List on uninited shaped arrays does not die

[16:01] <Geth> roast:

[16:01] <Geth> roast: RT#130513: https://rt.perl.org/Ticket/Display.html?id=130513

[16:01] <Geth> roast: review: https://github.com/perl6/roast/commit/1c61263ca4

[16:01] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130513

[16:07] <brokenchicken> :/

[16:07] <Geth> roast: 1f05be281e | (Zoffix Znet)++ | S02-types/array-shapes.t

[16:07] <Geth> roast: Test @c[some shape] accepts a .new: :shape(same shape)...

[16:07] <Geth> roast:

[16:07] <Geth> roast: RT#130510: https://rt.perl.org/Ticket/Display.html?id=130510

[16:07] <Geth> roast: review: https://github.com/perl6/roast/commit/1f05be281e

[16:07] <synopsebot6> Link:  https://rt.perl.org/rt3//Public/Bug/Display.html?id=130510

[16:07] <brokenchicken> \o/

[17:41] * lizmat waves from Cologne

[17:42] <brokenchicken> \o

[17:46] <bartolin> brokenchicken: wrt nqp-j not compiling: it seems to be 994d2159fc. with that commit revertet nqp-j builds

[17:47] <bartolin> *reverted

[17:47] <brokenchicken> .ask TimToady any idea for fixing this commit's breakage of JVM build? https://github.com/perl6/nqp/commit/994d2159fc `make` (in nqp) now fails with https://gist.github.com/zoffixznet/f58648963ec8e44eb3a1b3b79f5eac85

[17:47] <yoleaux2> brokenchicken: I'll pass your message to TimToady.

[17:52] <TimToady> oh, gee, I'm always forgetting that end of things

[17:52] <yoleaux2> 17:47Z <brokenchicken> TimToady: any idea for fixing this commit's breakage of JVM build? https://github.com/perl6/nqp/commit/994d2159fc `make` (in nqp) now fails with https://gist.github.com/zoffixznet/f58648963ec8e44eb3a1b3b79f5eac85

[17:53] <TimToady> should just be the same thing as the MoarVM patch, decode fates[0] into fbeg and fend (32 bits each) and then offset the fate numbers returned from the actual NFA runner

[17:54] <TimToady> I have to commute to norcal today, but will do it tonight if no one else gets to it

[17:54] <TimToady> jnthn: and yes, separate compilation is an issue there, once we start trying to make use of the uniqueness

[17:57] <bartolin> ah, this moarvm commit: https://github.com/MoarVM/MoarVM/commit/e167934e83

[18:01] <TimToady> yes, that one

[18:02] <TimToady> afk &

[18:46] <brokenchicken> m: (1...*).perl

[18:46] <camelia> rakudo-moar ed482e: OUTPUT«Cannot .elems a lazy list␤  in block <unit> at <tmp> line 1␤␤Actually thrown at:␤  in block <unit> at <tmp> line 1␤␤»

[18:46] <brokenchicken> I guess that's normal...

[18:47] <brokenchicken> m: (1, {*+*} ...*).perl # 'cause it could be weird stuff like this too

[18:47] <camelia> rakudo-moar ed482e: OUTPUT«5===SORRY!5=== Error while compiling <tmp>␤Malformed double closure; WhateverCode is already a closure without curlies, so either remove the curlies or use valid parameter syntax instead of *␤at <tmp>:1␤------> 3(1, {*+*}7⏏5 ...*).perl # 'ca…»

[19:00] <lizmat> brokenchicken: one could argue that the error is LTA, and that it should say "cannot .perl a lazy list" ?

[19:01] <brokenchicken> Maybe

[19:05] <[Coke]> I think it's always LTA when the error refers to something the user didn't type

[19:43] <jnthn> It's OK if they can see the stack trace showing how they ended up there, but yeah, better to put it straight on .perl

[19:56] <lizmat> decommute&

[22:38] <Geth> rakudo/nom: a423edaf30 | (Elizabeth Mattijsen)++ | src/core/Any-iterable-methods.pm

[22:38] <Geth> rakudo/nom: Replace a die with an applicable Exception

[22:38] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a423edaf30

[22:40] <Geth> rakudo/nom: dd911efeb9 | (Elizabeth Mattijsen)++ | src/core/List.pm

[22:40] <Geth> rakudo/nom: Remove unnecessary initialization

[22:40] <Geth> rakudo/nom:

[22:40] <Geth> rakudo/nom: Probably a copy-pasto

[22:40] <Geth> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dd911efeb9

[22:48] <lizmat> good night, #perl6-dev!

[22:48] <brokenchicken> night
