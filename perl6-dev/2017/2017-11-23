[00:22] <samcv> .tell pmuritas that is a little bit complex. simply see this table https://unicode.org/reports/tr10/#Comparison_Variable_Table

[00:22] <yoleaux> samcv: I'll pass your message to pmuritas.

[00:23] <samcv> .tell pmuritas the full definition is complex, but non-ignorable just means nothing is ignored except the baseline levels of the UCD spec

[00:23] <yoleaux> samcv: I'll pass your message to pmuritas.

[00:25] <MasterDuke> samcv: think you mean pmurias

[00:26] <samcv> oh yes. that

[00:26] <samcv> .tell pmurias that is a little bit complex. simply see this table https://unicode.org/reports/tr10/#Comparison_Variable_Table the full definition is complex, but non-ignorable just means nothing is ignored except the baseline levels of the UCD spec

[00:26] <yoleaux> samcv: I'll pass your message to pmurias.

[06:42] <Geth> ¦ roast: ada9671c4a | usev6++ | 2 files

[06:42] <Geth> ¦ roast: [jvm] Unfudge now passing tests

[06:42] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/ada9671c4a

[07:50] <[Tux]> Rakudo version 2017.11-7-gc9Rakudo version 2017.11-7-gc967cb6cc - MoarVM version 2017.11-2-g26ad7cc55

[07:50] <[Tux]> csv-test-xs-20      0.441 -  0.468

[07:51] <[Tux]> csv-ip5xs           1.108 -  1.109

[07:51] <[Tux]> test-t --race       1.336 -  1.460

[07:51] <[Tux]> test-t              3.203 -  3.208

[07:51] <[Tux]> test               12.070 - 12.208

[07:51] <[Tux]> csv-parser         12.282 - 12.306

[07:51] <[Tux]> csv-ip5xs-20       12.762 - 12.865

[07:51] <[Tux]> test-t-20 --race   20.050 - 20.712

[07:51] <[Tux]> test-t-20          58.590 - 59.463

[07:51] <[Tux]> 67cb6cc - MoarVM version 2017.11-2-g26ad7cc55

[07:51] <[Tux]> csv-test-xs-20      0.441 -  0.468

[07:51] <[Tux]> csv-ip5xs           1.108 -  1.109

[07:51] <[Tux]> test-t --race       1.336 -  1.460

[07:51] <[Tux]> test-t              3.203 -  3.208

[07:51] <[Tux]> test               12.070 - 12.208

[07:51] <[Tux]> csv-parser         12.282 - 12.306

[07:51] <[Tux]> csv-ip5xs-20       12.762 - 12.865

[07:51] <[Tux]> test-t-20 --race   20.050 - 20.712

[07:51] <[Tux]> test-t-20          58.590 - 59.463

[07:52] <[Tux]> sorry for the bounce

[09:01] <Geth> ¦ rakudo: 79390147ac | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Rakudo/Iterator.pm

[09:01] <Geth> ¦ rakudo: Fix typo in comment; MasterDuke17++

[09:01] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/79390147ac

[12:55] <Geth> ¦ nqp: 51ed31c20c | (Tom Browder)++ (committed using GitHub Web editor) | docs/ops.markdown

[12:55] <Geth> ¦ nqp: correct def and typo

[12:55] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/51ed31c20c

[13:13] <tbrowder> mornin, looking at the nqp/docs/ops.markdown: any thoughts on turning toc into a multicolumn table to save vertical whitespace?

[15:14] <lizmat> so, thinking a bit more about While/Until iterators

[15:14] <lizmat> I propose we have an "omit" as the opposite of grep

[15:15] <lizmat> and add grep-while / grep-until / omit-while / omit-until

[15:15] <moritz> I don't see the need to introduce 5 new methods

[15:16] <moritz> grep and omit are just a negation away from each other

[15:16] <moritz> and until is a negation away from while

[15:16] <lizmat> no, if that's what you think, we need to rethink the name

[15:17] <MasterDuke> we do already have if and unless...

[15:17] <moritz> so just adding while and omit-while would give us the same power

[15:17] <lizmat> .while you mean?   jnthn already decided against that

[15:18] <moritz> oh, I didn't know that

[15:18] <lizmat> because we won't be able to have a sub version of that

[15:18] <jnthn> moritz: It'll parse-conflict with the while keyword, and the sub forms are useful in conjunction with the ==> operator

[15:18] <lizmat> ^10 .grep-while( * < 5 )    (0,1,2,3,4).Seq

[15:18] <moritz> jnthn: fairy nuff

[15:19] <moritz> lizmat: then I'm fine with grep-while, but still don't see the need for grep-until

[15:19] <lizmat> the difference with ordinary "grep" would be that the first False would stop the iterator and further checks

[15:19] <jnthn> It feels a tad odd calling it grep

[15:19] <lizmat> ^10 .grep-until( * > 5 )    (6,7,8,9).Seq

[15:20] <lizmat> will ignore all values of the source iterator until True is returned, and then pass on all values of the source iterator without further checks

[15:20] <lizmat> so, maybe "omit-until" would be a better name

[15:20] <jnthn> Maybe this is overpowered, but I'm wondering if we could find something that lets you turn taking elements on/off, as a generalization and possibly allowing some further use-cases

[15:21] <moritz> take-while

[15:21] <MasterDuke> just gonna say, i think take-while is another clojure method

[15:22] <jnthn> .some-nice-name-here(* < 5) # takes elements while they're < 5

[15:23] <jnthn> .some-nice-name-here(False, * < 5) # Doesn't take anything, then switches taking things on once * < 5 matches

[15:24] <jnthn> $mouse-move-evnets.some-nice-name-here(False, |($mouse-down-events, $mouse-up events) xx *) # Supply example: all the mouse move events while the mouse button is held down

[15:25] <jnthn> None of that is quite right, but it might be worth considering if the various cases can fit into a (understandable) more general operation

[15:26] <MasterDuke> both clojure and racket have a bunch of those types of functions/routines/methods, might be good to see what they've done

[15:28] <jnthn> Indeed

[16:10] <lizmat> afk again&

[18:00] <AlexDaniel> releasable6: next

[18:00] <releasable6> AlexDaniel, Next release in 23 days and ≈0 hours. No blockers. 0 out of 8 commits logged

[18:00] <releasable6> AlexDaniel, Details: https://gist.github.com/7e37699243993ef88486d0a9ea2c892b

[18:00] <AlexDaniel> BUT WHAT'S THE DATE

[18:00] * AlexDaniel slaps releasable6

[18:00] <AlexDaniel> ok, 18th

[18:01] <AlexDaniel> no, wrong…

[18:01] <AlexDaniel> 16th

[18:01] * AlexDaniel has to purge all “nom” links from his browser history

[18:16] <teatime> m: say DateTime.now.later(:23days).utc

[18:16] <camelia> rakudo-moar 79390147a: OUTPUT: «2017-12-16T18:16:57.522294Z␤»

[20:20] <Zoffix> tbrowder: it the format is changed, it'd be nice if it there were automatically generated, so we'd not have to painstakenly keep track all the changes get made in two places. The current one is made by https://github.com/zoffixznet/github-toc-maker

[20:20] <Zoffix> s/it/if/;

[20:22] <Zoffix> m: dd (^10).&[…^]: * !< 5

[20:22] <camelia> rakudo-moar 79390147a: OUTPUT: «(0, 1, 2, 3, 4).Seq␤»

[20:22] * Zoffix shrugs

[20:23] <tbrowder> zoffix: concur, thnx

[20:24] <tbrowder> Zoffix: concur

[21:20] <lizmat> to get back to https://irclog.perlgeek.de/perl6-dev/2017-11-23#i_15486864

[21:21] <lizmat> I was wondering whether this could not also be handled by more named params to grep

[21:21] <lizmat> :skip-until

[21:21] <lizmat> :keep-while

[21:21] <lizmat> ?

[21:22] <lizmat> otoh, it also feels like overloading too much on the poor little grep

[21:22] <jnthn> Yeah, I'd say so

[21:25] <lizmat> my initial worry would be that any unknown nameds would be silently ignored in earlier versions

[21:25] <lizmat> but they won't be:

[21:25] <lizmat> m: ^10 .grep( * > 5, :skip-until )

[21:25] <camelia> rakudo-moar 79390147a: OUTPUT: «Unexpected adverb 'skip-until' passed to grep on Range␤  in block <unit> at <tmp> line 1␤␤»

[21:26] <lizmat> so that aspect would be covered

[21:42] <mudman> Yet-another-2c-from-a-random-warning: Once you do anything that involves the test/code *not* applying to each member, I wouldn’t call it grep

[21:45] <jnthn> I think skip-while and skip-until, and something like take-while or take-until, are the best I've seen so far.

[21:46] <jnthn> Though maybe drop-while for the first is nice in that it is a bit more "opposite" to take

[21:46] <jnthn> Well, maybe :)

[21:46] <jnthn> I thought also about @foo.upto(&test) but it doesn't quite work

[21:49] <jnthn> I've found it hard to find a single word that feels like it communicates the semantics as well as a two-word name

[21:50] <jnthn> And given we've gone this long without them...I mean, I can see the point of them or I'd be arguing against adding them...but it's not like we're in need of a really short name.

[21:56] <mudman> If two words is ok, the the best I can think of are trigger-on, trigger-off and toggle-when.  A bit long tho…

[21:57] <jnthn> I pondered .toggle as a genralization of this

[21:58] <jnthn> (1..15).toggle(* < 5, * > 10, * < 15) would give 1,2,3,4,11,12,13,14

[21:58] <jnthn> Though it's not clear whether it starts on or off :)

[22:02] <lizmat> perhaps a named to indicate that ?

[22:02] <lizmat> :on to indicate starting with on?

[22:05] <lizmat> or perhaps .on-toggle / .off-toggle

[22:05] <AlexDaniel> sorry, what is this talk about?

[22:05] <AlexDaniel> m: <2 4 6 4 2>.grep({$_ > 5 ff False}).say

[22:05] <camelia> rakudo-moar 79390147a: OUTPUT: «(6 4 2)␤»

[22:05] <lizmat> fwiw, I like the generalization

[22:05] <lizmat> AlexDaniel: how many times is the block called ?

[22:06] <AlexDaniel> can be optimized to 3 times?

[22:06] <lizmat> if it's 5 times, that's 2 too many

[22:06] <lizmat> AlexDaniel: how ?

[22:06] <lizmat> I'm not seeing it ?

[22:07] <AlexDaniel> ff with False on the rhs can start giving True without any checks

[22:07] <AlexDaniel> or maybe not?

[22:08] * jnthn bbiab

[22:09] <lizmat> yeah, but the point is really that it shouldn't have to

[22:09] <lizmat> aka, the block shouldn't be called at all anymore

[22:16] <AlexDaniel> m: <2 4 6 4 2>.grep({{say ‘tick’; $_ > 5} fff False}).say

[22:16] <camelia> rakudo-moar 79390147a: OUTPUT: «tick␤tick␤tick␤(6 4 2)␤»

[22:17] <AlexDaniel> m: <2 4 6 4 2 1 0>.grep({{say ‘tick’; $_ > 5} fff False}).say

[22:17] <camelia> rakudo-moar 79390147a: OUTPUT: «tick␤tick␤tick␤(6 4 2 1 0)␤»

[22:17] <AlexDaniel> so the block is really not called anymore, with fff at least

[22:18] <AlexDaniel> given that, is there really a good reason to have a separate feature that does the same?

[22:19] <AlexDaniel> if the concern is that the *outer* block is still running (with fff) operator, then IMO fff operators has to be optimized

[22:19] <AlexDaniel> fwiw, I am a real ff/fff noob and never actually used it in my code, but last time I said that there were others who told me that it is very useful and relatively common. ¯\_(ツ)_/¯

[22:36] * AlexDaniel attempts other variants

[22:41] <lizmat> m: m: <2 4 6 4 2 1 0>.grep({say ‘tick’; $_ > 5 fff False}).say

[22:41] <camelia> rakudo-moar 79390147a: OUTPUT: «tick␤tick␤tick␤tick␤tick␤tick␤tick␤(6 4 2 1 0)␤»

[22:42] <lizmat> m: m: <2 4 6 4 2 1 0>.grep({say ‘tick’; ($_ > 5) fff False}).say

[22:42] <camelia> rakudo-moar 79390147a: OUTPUT: «tick␤tick␤tick␤tick␤tick␤tick␤tick␤(6 4 2 1 0)␤»

[23:03] <AlexDaniel> https://gist.github.com/AlexDaniel/98bef6eeb64d093991ca8de2c0441fd9

[23:03] <AlexDaniel> well, the proposal is indeed slightly more readable

[23:06] <AlexDaniel> “I propose we have an "omit" as the opposite of grep”

[23:06] <AlexDaniel> IIRC last time this was discussed we realized that there's none

[23:07] <AlexDaniel> and “grep none …” isn't any less readable, and as it turned out isn't any slower

[23:08] <AlexDaniel> in fact, we even documented it back then: https://docs.perl6.org/routine/grep#(List)_routine_grep

[23:15] <AlexDaniel> when grep-while was first mentioned I thought “cool, that'd make it easy to iterate half a Seq”. But then, it'd still have to pull that last value for a Falsy check? Meh

[23:15] <AlexDaniel> now I'm just rambling. Do we have an RFC ticket for the proposal?

[23:21] <jnthn> AlexDaniel: Not that I'm aware of

[23:22] <Geth> ¦ rakudo: eacf9b2776 | (Elizabeth Mattijsen)++ | src/core/set_difference.pm

[23:22] <Geth> ¦ rakudo: Need to first make it a Set before making it a Mix

[23:22] <Geth> ¦ rakudo:

[23:22] <Geth> ¦ rakudo: E.g. turning a Hash to a Mix assumes numeric values for the keys in the

[23:22] <Geth> ¦ rakudo: hash.  We shouldn't do this.  Spotted by Norman Gaywood++ on perl6-users.

[23:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eacf9b2776

[23:27] <Geth> ¦ roast: bb35ffca35 | (Elizabeth Mattijsen)++ | S03-operators/set_difference.t

[23:27] <Geth> ¦ roast: Make sure we're testing for hashes without numerical values

[23:27] <Geth> ¦ roast:

[23:27] <Geth> ¦ roast: To make sure we don't regress eacf9b27762fcd52eca35

[23:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bb35ffca35

[23:27] * lizmat goes off for some shuteye

[23:28] <jnthn> 'night, lizmat o/

[23:37] <timotimo> we shouldn't be calling it anything with "take" unless it directly interacts with gather/take, though

[23:37] <timotimo> oops, i'm a bit late
