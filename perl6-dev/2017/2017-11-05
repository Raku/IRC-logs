[00:57] <japhb> .ask [Tux] Where is the historical file for your newly-expanded suite of CSV perf tests?  I'm thinking of expanding the buggable speed grapher to graph any of them.

[00:57] <yoleaux> japhb: I'll pass your message to [Tux].

[00:59] <Zoffix> Tux said "not yet"

[01:00] <Zoffix> https://irclog.perlgeek.de/perl6-dev/2017-10-29#i_15371662

[01:01] <japhb> Zoffix: Hmmm, that was almost a week ago.  Seems ripe for a re-ask.

[01:36] <timotimo> greetings japhb

[01:36] <timotimo> how are you today?

[07:17] <yoleaux> AlexDaniel`: RT/GH weekly

[09:34] <[Tux]> Rakudo version 2017.10-125-g360eb2289 - MoarVM version 2017.10-58-gad8618468

[09:34] <[Tux]> csv-test-xs-20      0.454 -  0.455

[09:34] <[Tux]> csv-ip5xs           1.110 -  1.122

[09:34] <[Tux]> test-t              3.302 -  3.315

[09:34] <[Tux]> test               12.052 - 12.061

[09:34] <[Tux]> csv-parser         12.201 - 12.736

[09:34] <yoleaux> 00:57Z <japhb> [Tux]: Where is the historical file for your newly-expanded suite of CSV perf tests?  I'm thinking of expanding the buggable speed grapher to graph any of them.

[09:35] <[Tux]> csv-ip5xs-20       13.069 - 13.245

[09:35] <[Tux]> test-t-20 --race   21.415 - 22.174

[09:35] <[Tux]> test-t-20          60.028 - 60.618

[09:35] <[Tux]> https://tux.nl/Talks/CSV6/speed-all.log

[09:41] <Geth> ¦ roast: fc36d3dde2 | (Stefan Seifert)++ | 2 files

[09:41] <Geth> ¦ roast: Make spurious timeouts in test runs less likely

[09:41] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/fc36d3dde2

[10:27] <gfldex> lizmat: is there a way to stop snapper from snapping?

[10:35] <lizmat> gfldex: I have been thinking about that

[10:35] <lizmat> snapper(0) would perhaps be logical in a way ?

[10:35] <lizmat> or snapper(Inf) probably better

[10:36] <gfldex> snapper(:stop);

[10:36] <lizmat> that too  :-)

[10:37] <gfldex> m: sleep ∞;

[10:37] <camelia> rakudo-moar 360eb2289: OUTPUT: «(timeout)»

[10:39] <lizmat> gfldex: should the period between a stop / start also be considered a period or not ?

[10:40] <gfldex> lizmat: I don't think so. If I want to stop something, I likely don't want the result of the operation anyway.

[10:41] <lizmat> so you would run a report after stopping and before starting again ?

[10:42] <lizmat> or just discard ?

[10:42] <lizmat> hmmm

[10:42] <gfldex> no report

[10:42] <gfldex> one can ask for the report by hand

[10:44] <lizmat> yeah, I wasn't going to auto-generate that for stopping the snapper

[10:49] <El_Che> who telemeters the telemetry?

[10:51] <Geth> ¦ rakudo: 9344d35de8 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[10:51] <Geth> ¦ rakudo: Add :stop / :reset parameters to snapper()

[10:51] <Geth> ¦ rakudo:

[10:51] <Geth> ¦ rakudo: - :reset allows you to forget about the snaps made so far

[10:51] <Geth> ¦ rakudo: - :stop allows you to stop the snapper

[10:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/9344d35de8

[10:51] <lizmat> El_Che: the snapper of snappers

[10:52] <lizmat> gfldex: mind you, it won't check if it's stopped until after the sleep comes out

[10:52] <lizmat> I don't really want to use Promises in there because of the overhead involved

[10:53] <gfldex> lizmat: I agree. The last snapping wont hurt.

[10:54] <El_Che> snap is a popular term it seems. Yesterday I had a look at Ubuntu's snap to see if it was feasable to provide rakudo snaps. And I reorganized my backups moving to ZFS snapshots and the sync'er (remote of other drive) for the snapshots is calles simplesnap and the autosnapshortter zfSnap.

[10:54] <El_Che> this must be what facebook must feel like

[10:55] <El_Che> or amazon. "Hey you bough a vacuum cleaner. Here have a look at a zillion other vacuuum cleaners"

[10:55] <El_Che> :)

[11:02] <Geth> ¦ rakudo: d5fc6cbb9e | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[11:02] <Geth> ¦ rakudo: Don't start a snapper if not running and :stop

[11:02] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d5fc6cbb9e

[11:23] <gfldex> lizmat: https://github.com/gfldex/perl6-telemetry-httpd

[11:24] <lizmat> gfldex: cool!!

[11:26] <lizmat> gfldex: I was also thinking about adding a :csv option

[11:26] <gfldex> that would be handy

[11:27] <gfldex> would make it easy to output proper html

[11:28] <gfldex> lizmat: the module is so tiny, I wonder if it could be shipped with Rakudo.

[11:29] <lizmat> something to consider, afaiac

[11:30] <lizmat> so, :csv would just output the values, whitespace separated ?

[11:30] <lizmat> no header, footer, legend

[11:30] <lizmat> ?

[11:30] <gfldex> :csv should have a header

[11:31] <lizmat> the names of the columns ?

[11:31] <gfldex> yes

[11:31] <lizmat> I mean more the stuff about "Telemetry Report of Process #44910 (2017-11-05T11:23:04Z)",

[11:31] <lizmat> etc.

[11:31] <lizmat> the pre-amble if you like

[11:31] <gfldex> I would not add the pre-amble in csv

[11:33] <lizmat> ack

[11:35] <El_Che> gfldex++

[11:35] <El_Che> and lizmat++

[11:36] <lizmat> gfldex: also no total, right ?

[11:55] <Geth> ¦ rakudo: 3e4ef2e0fc | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[11:55] <Geth> ¦ rakudo: Add :csv option to report

[11:55] <Geth> ¦ rakudo:

[11:55] <Geth> ¦ rakudo: - which defaults to RAKUDO_REPORT_CSV setting

[11:55] <Geth> ¦ rakudo: - also made report() itself hopefully a bit less racy

[11:55] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/3e4ef2e0fc

[11:56] <lizmat> gfldex: I chose to use whitespace as a delimiter, because it works better with .words

[11:58] <lizmat> (which is about 2.5x as fast as .split(',')

[11:58] <lizmat> )

[12:33] <lizmat> gfldex: feels to me that https://github.com/gfldex/perl6-telemetry-httpd/blob/master/lib/Telemetry/httpd.pm6 could be a "server" sub in Telemetry

[12:34] <lizmat> and then have a helper module "snapserver" (name to be bikedhedded) that would just do: 'snapper(1); httpd' in its mainline

[13:16] <gfldex> lizmat: I would be careful with exporting generic names in a telemetry module.

[13:19] <lizmat> So always force something like "use Telemetry <snap>" ?

[13:20] <lizmat> note that imports are lexical in Perl 6

[13:20] <lizmat> m: { use Telemetry; snap }; snap

[13:20] <camelia> rakudo-moar 3e4ef2e0f: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    snap used at line 1␤␤»

[13:20] <lizmat> m: { use Telemetry; snap }

[13:20] <camelia> rakudo-moar 3e4ef2e0f: OUTPUT: «wallclock util% max-rss gw gtc tw ttc aw atc␤202 25.247525 0 0 0 0 0 0 0␤»

[13:21] <Geth> ¦ rakudo: 4d21ad67da | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[13:21] <Geth> ¦ rakudo: Oops, the default for :csv should be off!

[13:21] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/4d21ad67da

[13:24] <Geth> ¦ rakudo: 0f2f0cd3ab | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[13:24] <Geth> ¦ rakudo: Introduce Telemetry 'safe-ctrl-c'

[13:24] <Geth> ¦ rakudo:

[13:24] <Geth> ¦ rakudo: - when called, installs a signal handler for CTRL-c that just exits

[13:24] <Geth> ¦ rakudo: - makes sure that if we're snapping, we're going to see a report even

[13:24] <Geth> ¦ rakudo:   if we're control-c'ing out of the program, e.g. in case of a hang

[13:24] <Geth> ¦ rakudo:   or an infini-loop.

[13:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0f2f0cd3ab

[13:27] <Geth> ¦ rakudo: 824a5dc298 | (Elizabeth Mattijsen)++ | lib/snapper.pm6

[13:27] <Geth> ¦ rakudo: Make -Msnapper set the safe-ctrl-c feature

[13:27] <Geth> ¦ rakudo:

[13:27] <Geth> ¦ rakudo: - so even perl6 -Msnapper -e 'loop {}' will give you a report

[13:27] <Geth> ¦ rakudo:   - after you ctrl-c it of course

[13:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/824a5dc298

[13:28] <Geth> ¦ roast: 2437d1f795 | (Zoffix Znet)++ (committed using GitHub Web editor) | packages/Test/Util.pm

[13:28] <Geth> ¦ roast: Fix inconsistent doesn't-hang defaults

[13:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/2437d1f795

[13:30] <Geth> ¦ roast: 6aa1ce3b5c | (Zoffix Znet)++ (committed using GitHub Web editor) | S28-named-variables/init-instant.t

[13:30] <Geth> ¦ roast: Respect ROAST_TIMING_SCALE in time-sensitive test

[13:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6aa1ce3b5c

[13:30] <Geth> ¦ roast: 694b2e7abf | (Zoffix Znet)++ (committed using GitHub Web editor) | S28-named-variables/init-instant.t

[13:30] <Geth> ¦ roast: Fix inaccurate test description

[13:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/694b2e7abf

[13:31] <Geth> ¦ roast: 008843bc96 | (Zoffix Znet)++ (committed using GitHub Web editor) | S28-named-variables/init-instant.t

[13:31] <Geth> ¦ roast: Fix typo

[13:31] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/008843bc96

[13:37] <Zoffix> buggable: speed :4

[13:37] <buggable> Zoffix,    ▆     ▅     ▆  ▂█   dates: 2017-10-26–2017-11-04

[13:37] <buggable> Zoffix,   ▁█ ▄   █   ▂▃█  ██ ▂ range: 19.341s–21.820s

[13:37] <buggable> Zoffix,   ██▆█ ▁ █▇▇▇███ ▁██▅█ speed: 3% slower (widths: 10/3)

[13:37] <buggable> Zoffix, ▁▃████▅█████████▇█████

[13:37] <Zoffix> (uses test-t-20 --race now)

[13:51] <Geth> ¦ roast: 3ad163d3a1 | usev6++ | 2 files

[13:51] <Geth> ¦ roast: [jvm] Skip two tests that hang during spectest

[13:51] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3ad163d3a1

[14:45] <ugexe> I have to admit that having a http server in the core, lib/ or not, seems out of place

[14:47] <Zoffix> client, sure, but server? :/

[14:49] * Zoffix came up with another marketing blurb: "It's not magic. It's Perl 6."    Both shows the language as awesome and powerful, while distancing from bad rep of "too magical" Perl sometimes gets

[14:51] <AlexDaniel> Zoffix++

[15:14] <Geth> ¦ nqp: 17ce8f83d7 | usev6++ | 3 files

[15:14] <Geth> ¦ nqp: [jvm] Implement 'getport' for ServerSocketHandle

[15:14] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/17ce8f83d7

[15:16] <AlexDaniel> buggable: tag MOLD

[15:16] <buggable> AlexDaniel, There are 233 tickets tagged with MOLD; See http://fail.rakudo.party/t/MOLD for details

[15:18] <jnthn> What's MOLD?

[15:21] <Zoffix> jnthn: tickets that haven't seen any updates in last 2 years

[15:22] <AlexDaniel> (the tag is added automatically)

[15:36] <Zoffix> Fixing breakage due to readonly $/ being touched by .subst... And really feels like a bad direction. This is one set of changes that needs to be done to a method the second a .subst or .match call is added: https://gist.github.com/zoffixznet/c68579b7cad03b286d735dbe91e529f1

[15:36] <Zoffix> IMO we should not set $/ with method matching forms

[15:38] <Zoffix> Reverting https://github.com/rakudo/rakudo/commit/738908be4d79f1472821cd363ec82a1ef0bc3f32

[15:39] <Zoffix> I think we need to go into the opposite direction from that. Eliminate all the caller's-$/ fondling. Prolly make stuff faster too

[15:44] <Geth> ¦ roast: b0b3844c7d | (Zoffix Znet)++ | S32-str/substr.t

[15:44] <Geth> ¦ roast: Revert "Test .subst complains when it can't use $/"

[15:44] <Geth> ¦ roast:

[15:44] <Geth> ¦ roast: This reverts commit 80a49c4324bc4a166c311e3eb01b7bae8814893c.

[15:44] <Geth> ¦ roast:

[15:44] <Geth> ¦ roast: Such behaviour has too much unwanted impact in grammar actions

[15:44] <Geth> ¦ roast: where $/ is the common name for the parameter. Having to change

[15:44] <Geth> ¦ roast: $/ to something else the second you introduce a .subst call

[15:44] <Geth> ¦ roast: (or other methods that set $/) is a bit too much.

[15:44] <Geth> ¦ roast:

[15:44] <Geth> ¦ roast: https://irclog.perlgeek.de/perl6-dev/2017-11-05#i_15404670

[15:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b0b3844c7d

[15:47] <AlexDaniel> “You can only reassign tickets that you own or that are unowned”… Really?

[15:51] <Geth> ¦ roast: 76e1f94768 | (Zoffix Znet)++ | S05-grammar/action-stubs.t

[15:51] <Geth> ¦ roast: Remove new unwanted test

[15:51] <Geth> ¦ roast:

[15:51] <Geth> ¦ roast: Part of revert for https://github.com/perl6/roast/commit/b0b3844c7d

[15:51] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/76e1f94768

[15:51] <Geth> ¦ rakudo: 1c387153ea | (Zoffix Znet)++ | src/core/Str.pm

[15:51] <Geth> ¦ rakudo: Revert ""Do. Or do not. There is no try.""

[15:51] <Geth> ¦ rakudo:

[15:51] <Geth> ¦ rakudo: This reverts commit 738908be4d79f1472821cd363ec82a1ef0bc3f32.

[15:51] <Geth> ¦ rakudo:

[15:51] <Geth> ¦ rakudo: Such behaviour has too much unwanted impact in grammar actions

[15:51] <Geth> ¦ rakudo: where $/ is the common name for the parameter. Having to change

[15:51] <Geth> ¦ rakudo: $/ to something else the second you introduce a .subst call

[15:51] <Geth> ¦ rakudo: (or other methods that set $/) is a bit too much.

[15:51] <Geth> ¦ rakudo:

[15:52] <Geth> ¦ rakudo: https://irclog.perlgeek.de/perl6-dev/2017-11-05#i_15404670

[15:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1c387153ea

[15:56] <AlexDaniel> buggable: NYI

[15:56] <AlexDaniel> buggable: tag NYI

[15:56] <buggable> AlexDaniel, There are 58 tickets tagged with NYI; See http://fail.rakudo.party/t/NYI for details

[16:00] <AlexDaniel> I'm not happy with merging tickets on RT because it creates a mess, but closing duplicates and simply linking them back and forth kinda sucks too

[16:01] <AlexDaniel> (because creates an impression that the issue was fixed in one of the tickets and therefore all others should be closed)

[16:11] <nine> AlexDaniel: what's so bad about merging?

[16:11] <Geth> ¦ roast: 5360b920d0 | (Zoffix Znet)++ | packages/Test/Util.pm

[16:11] <Geth> ¦ roast: Improve doesn't-hang() failure mode

[16:11] <Geth> ¦ roast:

[16:11] <Geth> ¦ roast: Add diagnostic message telling the user to try increasing timing

[16:11] <Geth> ¦ roast: scale when test detects a hang.

[16:11] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5360b920d0

[16:13] <Zoffix> nine: IME: because RT interleaves one ticket into another instead of appending it so it quickly becomes a mess of incoherent replies.

[16:22] <AlexDaniel> yeah

[16:30] <Geth> ¦ 6.d-prep: 9d645a8025 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[16:30] <Geth> ¦ 6.d-prep: Add R#1235 to [potential] TODO list

[16:30] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/9d645a8025

[16:30] <synopsebot> R#1235 [open]: https://github.com/rakudo/rakudo/issues/1235 [6.d][RFC] Caller-$/-setting is too invasive

[16:31] <Zoffix> AlexDaniel: you should've made your last issue about testing :P

[16:31] <Zoffix> And then say. " What about testing? R#1234 " and people would not know whether that's an actual Issue number :P

[16:31] <synopsebot> R#1234 [open]: https://github.com/rakudo/rakudo/issues/1234 [RFC] Whitespacey things in «» (say «a\nb».perl)

[16:33] <AlexDaniel> we can do it in R#12345 :)

[16:35] <AlexDaniel> that should take just a few years I think

[16:39] <Zoffix> m: say (12345-1234)/50/12

[16:39] <camelia> rakudo-moar 1c387153e: OUTPUT: «18.518333␤»

[16:39] <Zoffix> like 18 years :)

[16:54] <[Tux]> japhb, is https://tux.nl/Talks/CSV6/speed-all.log filling your needs?

[16:55] <Zoffix> buggable: speed

[16:55] <buggable> Zoffix, ▁▁▅█▄▅▂▃▃▇▄▄▄▅▅█▃▃▆█▄▅ dates: 2017-10-26–2017-11-04; range: 19.341s–21.820s; speed: 3% slower (widths: 10/3)

[16:55] <lizmat> .

[16:55] <yoleaux> 14:42Z <AlexDaniel> lizmat: weekly report https://gist.github.com/AlexDaniel/5abca8af46308661c3d30cdad53d17bf

[16:55] <Zoffix> ^ buggable already uses it. [Tux]++

[16:55] <AlexDaniel> Zoffix: does not look right. It feels like you forgot to count pull requests

[16:56] <AlexDaniel> (and that we are still fixing RT bugs, but that will be happening less and less I think)

[16:56] <Zoffix> AlexDaniel: IIRC we get like 30 tickets a month + I figure about 20 PRs

[16:57] <Zoffix> releasable6: status

[16:57] <releasable6> Zoffix, Next release in 13 days and ≈2 hours. No blockers. 0 out of 132 commits logged

[16:57] <releasable6> Zoffix, Details: https://gist.github.com/52dacd51054c6a8c3f8faf53df5bb688

[16:57] <Zoffix> NeuralAnomaly: status

[16:57] <NeuralAnomaly> Zoffix, Use releasable6 bot instead. e.g. try: releasable6: status

[17:00] <AlexDaniel> Zoffix: according to the gist above we resolved 17 tickets in the last week (some of them were created and resolved immediately), while the total number of tickets is around the same (1720→1718)

[17:00] <AlexDaniel> assuming the same pace that's around 68 tickets per month not including pull requests

[17:02] <AlexDaniel> hm, maybe “New tickets (7)” section should include resolved tickets

[17:18] <AlexDaniel> done. Same link: https://gist.github.com/AlexDaniel/5abca8af46308661c3d30cdad53d17bf

[17:22] <Geth> ¦ rakudo: 22939bc819 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[17:22] <Geth> ¦ rakudo: Telemetry report now removes columns without any data

[17:22] <Geth> ¦ rakudo:

[17:22] <Geth> ¦ rakudo: - only for the human readable case, though: :csv output unchanged

[17:22] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/22939bc819

[17:44] <jnthn> (from backlog) fwiw, I agree with ugexe and Zoffix - the point Telemetry involves a HTTP server and stuff, that feels a bit beyond the scope of things I'd like in the Rakudo repo. In that case, it's better it lives on the ecosystem and can depend on one of the many options for building a HTTP server in there.

[17:45] <jnthn> Or the HTTP aspects of it could live there, at least.

[17:46] <Geth> ¦ rakudo: 77142fdb29 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[17:46] <Geth> ¦ rakudo: Fix some Telemetry / snapper race condition

[17:46] <Geth> ¦ rakudo:

[17:46] <Geth> ¦ rakudo: Sometimes, if you would use snapper and say your own report at the

[17:46] <Geth> ¦ rakudo: end, another (almost) empty report would be shown as well.

[17:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/77142fdb29

[17:47] * lizmat notes jnthn ugexe Zoffix' comments

[17:48] <jnthn> I guess sine there's bits of Telemetry that depend on nqp::getrusage and maybe poke into scheduler internals, we'd rather keep those in the Rakudo repo

[17:48] <jnthn> As we do with NativeCall

[17:50] <lizmat> jnthn: yes, that was my intent

[17:51] <lizmat> but also open it up for more general usage / mixes

[17:54] <jnthn> *nod*

[18:38] <lizmat> hmmm.. I'm considering dropping support for "use Telemetry :COLUMNS"

[18:38] <lizmat> if we're going to generalize Telemetry::Instruments, then exporting stuff becomes very confusing

[19:57] * Zoffix bumps brochure on size up, from 16 to 20 pages

[19:58] <Zoffix> This section is all that's left to do: https://i.imgur.com/HSyod2Y.png and it could be done on 1 page, but I rather add more @marketing-things and code examples.

[20:01] <Zoffix> That's without book excerpts btw

[20:03] <lizmat> Zoffix++

[20:04] <lizmat> the only thing that slightly bothers me is the lack of periods at the end of a sentence.

[20:08] <Zoffix> lizmat: hah. I always remove periods at the end of bullets in bulleted lists, since bullets already signify breaks, but I'll add them back into this brochure :)

[20:08] <lizmat> well, that's why I said slighly

[20:08] <lizmat> *tly

[20:47] <AlexDaniel> Zoffix: there's a guy on #perl6 struggling with WWW module. I'm suspecting RT#131553 RT#123282 but I really don't know

[20:47] <synopsebot> RT#131553 [new]: https://rt.perl.org/Ticket/Display.html?id=131553 IO::Socket::INET mishandles IPv6

[20:47] <AlexDaniel> maybe you have some thoughts

[20:47] <synopsebot> RT#123282 [new]: https://rt.perl.org/Ticket/Display.html?id=123282 [IO] IO::Socket::INET fails to connect if a resource is available over IPv6 and the client is misconfigured to use IPv6

[20:50] <El_Che_> Zoffix: it's a sentence, not an enumeration of words. So thx for the periods :)

[20:51] <El_Che_> Zoffix: I don't think that bullet point is a good match with that much text? Maybe paragraphs and bold keywords?

[20:51] <El_Che_> maybe not, just thinking out loud

[20:53] <El_Che> Zoffix: the community pic you posted on twitter, are you using that? It looks like mostly p5 people

[21:45] <Zoffix> Yes. I'm using that.

[22:13] <japhb> Zoffix: Is your change to buggable to use the -20 race version pushed to GH?

[22:14] <Zoffix> Yes

[22:15] <japhb> Dammit, I was looking at my fork when I thought I was looking at your copy

[22:43] <japhb> Zoffix: In https://github.com/japhb/perl6-buggable/blob/master/lib/Buggable/Plugin/Speed.pm6#L75-L79 Why are you averaging the 3 or 10 entries, rather than taking the minimum within those zones?  The average can be messed up by a fluke, but min should be more stable.

[22:44] <japhb> Zoffix, in fact I might go with default comparison of minimum of first 10 values versus single most current value (== minimum of most recent 1).

[22:46] <Zoffix> japhb: why minimum? The "fluke" you mention would mess it up even more

[22:47] <Zoffix> That'd just undo why the averaging was done in the first place.

[22:48] <Zoffix> If you take a minimum of 10 values and one of them is 20% faster due to a bug, you now have all 10 of those values poisoned until the bug clears out.

[22:51] <japhb> Zoffix: I would think it far more common that background processing on [Tux]'s machine would a significant effect on the mean than that we had a bug that resulted in super-fast timings.

[22:52] <japhb> Because timing is a left-truncated distribution, where outliers can *only* exist because of bugs, the far more likely outliers are towards higher values.

[22:52] <japhb> Nevertheless, we could always just change it to "minimum of first 3" or so.

[22:54] <japhb> (Oh, and FWIW, s/stable/robust/.  Sigh, tired brane.)

[22:58] <Zoffix> Makes no sense to me. Why is the minimum value preferred? If we make nine 10s measurements and one 5s measurement, you say there be background processes, so you take the 5s value, but the measurements on the other end of the spectrum are overwhelmingly more likely to have the same background processes that gave us 10s 9 times out of 10 before, so you'll show a 200% speed loss in that scenario, whereas the

[22:58] <Zoffix> pertubation will show up as merely 1% change were the averages taken.

[22:59] <Zoffix> From what I understand you say the lower the number the more pure the measurement is, but that purity does not exist on both ends of the spectrum.

[23:02] <Zoffix> at the same time

[23:11] <japhb> OK, let's look at some more "realistic" data.  If you run a test several times in a row, and the results are 10.3, 10.1, 10.5, 10.2, 10.0, 10.4, 10.3, 10.2 -- how fast do you consider the code to be?  10.0 (min)?  10.25 (mean)?  10.2 or 10.3 (median/mode)?  10.5 (max)?

[23:13] <japhb> (FWIW, I fully understand your point about poisoning, but my argument on that angle is that a half-sized measurement would poison the mean as well, though not the median).

[23:14] <japhb> Actually, I think it's a strict improvement to change from mean to median, and that's still safe from single-value poisoning (and in fact up to 50% poisoning).  Would that be an acceptable change for you?

[23:19] <Zoffix> ZofBot: MATH IS HARD! LET'S GO SHOPPING!

[23:19] <ZofBot> Zoffix, well, on moar we have a native array as expected. my earlier message was a false alarm (I mixed things up)

[23:20] <Zoffix> japhb: yeah, median is OK

[23:20] <japhb> Zoffix: Cool, thank you.

[23:57] <japhb> [Tux]: It looks like the ' --race' is being dropped from the last couple 2x-second test-t-20 results in speed-all.log

[23:57] <japhb> Zoffix: And ... there's your bug, which I considered highly unlikely, but is in fact happening *right now*.

[23:57] <japhb> *sigh*

[23:58] * japhb cries quietly into his Triscuits and cheddar
