[00:00] <buggable> And the winning number is 7! Congratulations to alphah! You win a can of WD40!

[00:00] <Zoffix> hahaha

[00:00] <Zoffix> buggable++

[00:05] <Zoffix> Wonder if WD40 is even a thing outside of North America :)

[00:06] <ugexe> WD40 doesnt work on metric

[00:16] * geekosaur *eyeroll*

[00:17] <Zoffix> ZofBot: You've rolled a six!

[00:17] <ZofBot> Zoffix, ) You also can't make assignment metaoperators from diffy operators

[00:32] <Zoffix> Since I object to smoking, I'm to name my ecosystem smoker "toaster" and will coin the term "toasting the ecosystem" :)

[00:34] * ugexe vapes the ecosystem

[00:58] <BenGoldberg> If you forget to clean out the crumbs, your toaster may smoke.

[01:00] <geekosaur> surely it should be 'roaster'

[01:02] <Zoffix> I have a speech impediment. "roaster" is hard to say :P

[01:04] <BenGoldberg> How does roasting differ from baking?

[01:05] * BenGoldberg suddenly thinks of simulated annealing, which is yet another erm, "hot" idea.

[01:32] <Zoffix> hm, somehow I thought Proc has .pid :S

[01:32] <Zoffix> guess it's not really designed for async use with promises

[01:55] <Zoffix> Unhandled exception in code scheduled on thread 7

[01:55] <Zoffix> no such file or directory

[01:55] <Zoffix> greeaaaat

[01:56] <Zoffix> No line number or anything

[01:57] <Zoffix> Also notice run takes *@args ($, *@) but Proc.new takes $path, *@args, so if you change your run <zef --serial --debug install> to Proc::Async.new: <zef --serial --debug install> like I just did, it'll stop working -_-

[01:58] <Zoffix> ZofBot: complain all the things

[01:58] <ZofBot> Zoffix, Getting information back from the external process's "STDOUT" or "STDERR", is done by a "Supply" that either gets characters or bytes

[01:59] <Zoffix> This is Karma. After years of Perl folks making fun of PHP didn't go unpunished.

[02:00] <Zoffix> https://tnx.nl/php.html#names

[02:08] <Zoffix> "not enough memory" hm. I was starting 2 promises + 1 proc async for all the modules in the ecossystem on 24GB box

[02:08] <Zoffix> buggable: eco

[02:08] <buggable> Zoffix, Out of 834 Ecosystem dists, 0 have warnings, 1 have errors, and 0 have no tags in META file. See https://modules.perl6.org/update.log for details

[02:08] <Zoffix> m: say 834*3

[02:08] <camelia> rakudo-moar 8ec181: OUTPUT: ¬´2502‚ê§¬ª

[02:08] * Zoffix tries throwing moar RAM at it

[02:10] <Zoffix> 455GB... It better run now

[02:11] <MasterDuke> how much does that cost per hour?

[02:12] <ugexe> if you are installing to the same location for each module you might still be spending a bunch of time stuck waiting for locks

[02:14] <Zoffix> boooo "Starting VM instance "toaster" failed. Error: The zone 'projects/perl6-build/zones/us-central1-b' does not have enough resources available to fulfill the request. Try a different zone, or try again later."

[02:14] <ugexe> its possible it could be faster if you installed each one to a unique --install-to, and then programatically update PERL6LIB

[02:14] <Zoffix> MasterDuke: $1.109

[02:14] <Zoffix> Well, speed isn't my issue ATM. Running it at all is :/

[02:14] <Zoffix> MasterDuke: with 24CPUs

[02:15] <MasterDuke> that could start to add up if they ever let you run it

[02:16] <Zoffix> Yeah. I don't plan on keeping that :D Just wanted to see how much RAM this program would take

[02:17] <Zoffix> (famous last words before "we forgot to turn off our VM for a month" stories)

[02:20] <Zoffix> Got it to boot with a 156GB RAM VM. Program is 70GB and climbing.

[02:20] <Zoffix> m: say 834*3*142

[02:20] <camelia> rakudo-moar 8ec181: OUTPUT: ¬´355284‚ê§¬ª

[02:20] <Zoffix> Guess it needs 355GB. There's like a billion of moar processes each using ~142MB

[02:20] <ugexe> https://github.com/ugexe/zef/blob/55fb01b1c1d38ddde6319647faa9ac6cff263878/README.pod (grep $ zef -v --jobs=2 install CSV::Parser) zef used to do concurrency too, in 2015

[02:21] <ugexe> ===> Module count: 364

[02:21] <Zoffix> :)

[02:22] <Zoffix> Well, it created all the procs and all the promises and started testing stuff, but RAM usage is still climbing 120GB now

[02:23] <Zoffix> aha, leved out at 124GB \o/

[02:24] <Zoffix> ah, damn... that's cause the 5-minute job timeout I set kicked in and killed all the things :(

[02:32] <Zoffix> m: so try await start 42

[02:32] <camelia> rakudo-moar 8ec181: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of "so " in expression "so try await start 42" in sink context (line 1)‚ê§¬ª

[02:32] <Zoffix> that's not useless yo

[02:35] <Zoffix> 32CPU/210GB box. Much springier. With several-hour proc timeout. Hoping it'll complete :)O

[02:36] <Zoffix> geekosaur: toaster also starts with "t", just like "testing" BTW :)

[02:38] <Zoffix> yeah, seems to platau at ~124GB and 1240 "threads" (whatever htop calls threads)

[02:45] <Zoffix> 144GB/1071 threads

[02:45] <Zoffix> didn't really move in the output of tested modules. Still finished with only 9

[02:49] <Zoffix> grr, I think it's actually my buggy terminal that "froze"

[02:49] <Zoffix> oh it's asking for github pass... really :\

[02:50] <Zoffix> Well, this was a good 20 minutes of fun.

[02:50] * Zoffix deems the experiment a failure and goes to bed

[02:52] <Zoffix> Wonder how to go around the gitub pass thing. Is it asking for it just to pull from git://?  I don't wanna give (or cache) any passwords on this box, which running 820+ pieces of software from complete strangers.

[03:39] <Geth> ¬¶ roast: danielcliffordmiller++ created pull request #273: Added test for RT 131381

[03:39] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/pull/273

[05:05] <AlexDaniel> \o/

[05:06] <AlexDaniel> bisectable can now bisect from 2014.01

[05:21] <BenGoldberg> bisectable6, printf "%.30f", pi

[05:21] <bisectable6> BenGoldberg, On both starting points (old=2015.12 new=8ec1810) the exit code is 0 and the output is identical as well

[05:21] <bisectable6> BenGoldberg, Output on both points: ¬´3.141592653589790000000000000000¬ª

[05:41] <travis-ci> Rakudo build errored. Samantha McVey 'REPL: Don't show message to install line editor if using rlwrap

[05:41] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/238141912 https://github.com/rakudo/rakudo/compare/c30afd445f8c...9bf3ea3a4a80

[05:41] <buggable> [travis build above] ‚úì All failures are due to timeout (0), missing build log (1), GitHub connectivity (0), or failed make test (0).

[06:11] <[Tux]> This is Rakudo version 2017.05-320-g8ec181019 built on MoarVM version 2017.05-25-g62bc54e9

[06:11] <[Tux]> csv-ip5xs        2.914

[06:11] <[Tux]> test            13.457

[06:11] <[Tux]> test-t           4.534 - 4.560

[06:11] <[Tux]> csv-parser      13.670

[06:12] <[Tux]> as there is a perl5 installation running in the background (update to 5.26.0), that /might/ have small influence on timing

[06:45] <nine> [Tux]: I do hope so. csv-ip5xs is moving into the wrong direction :/

[07:35] <AlexDaniel> bisectable6, old=2014.01 printf "%.30f", pi

[07:35] <bisectable6> AlexDaniel, Bisecting by output (old=2014.01 new=8ec1810) because on both starting points the exit code is 0

[07:35] <bisectable6> AlexDaniel, bisect log: https://gist.github.com/2c001dd45d6331cdd7421d32c83dfd3c

[07:35] <bisectable6> AlexDaniel, There are 2 candidates for the first ‚Äúnew‚Äù revision. See the log for more details

[07:36] <AlexDaniel> .tell BenGoldberg oh yeah, but it doesn't mean that it will default to 2014.01, because in most cases this is not what people are looking for. https://irclog.perlgeek.de/perl6-dev/2017-06-01#i_14669729

[07:36] <yoleaux> AlexDaniel: I'll pass your message to BenGoldberg.

[08:12] <Geth> ¬¶ roast: eb8a73eea2 | (Elizabeth Mattijsen)++ | S03-operators/union.t

[08:12] <Geth> ¬¶ roast: Initial set of thorough testing of (|) and friends

[08:12] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/eb8a73eea2

[08:18] <Geth> ¬¶ rakudo/nom: a2add65e2e | (Elizabeth Mattijsen)++ | t/spectest.data

[08:18] <Geth> ¬¶ rakudo/nom: Make sure we run the new (|) tests

[08:18] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a2add65e2e

[08:21] <Geth> ¬¶ roast: 9c6b1536db | (Elizabeth Mattijsen)++ | S03-operators/set.t

[08:21] <Geth> ¬¶ roast: Remove union tests that are tested now in union.t

[08:21] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/9c6b1536db

[09:42] <pmurias> what is translate_newlines when configuring the decoder supposed to do?

[09:42] <travis-ci> Rakudo build canceled. Samantha McVey 'REPL: Don't show message to install line editor if using rlwrap

[09:42] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/238141912 https://github.com/rakudo/rakudo/compare/c30afd445f8c...9bf3ea3a4a80

[09:42] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[09:43] <Geth> ¬¶ nqp: 42fa5d7c9c | pmurias++ | 2 files

[09:43] <Geth> ¬¶ nqp: [js] Remove no longer used ops

[09:43] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/42fa5d7c9c

[09:43] <Geth> ¬¶ nqp: ec0e003589 | pmurias++ | 3 files

[09:43] <Geth> ¬¶ nqp: [js] Implement decode ops (NFG for them needs work)

[09:43] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/ec0e003589

[09:45] <pmurias> the \r\n translation seems to be happening with it turned off :/

[09:55] <pmurias> sorry about the translate_newlines, I had a typo in the test

[10:03] <Geth> ¬¶ nqp: 9ea137392e | pmurias++ | 2 files

[10:03] <Geth> ¬¶ nqp: [js] Support the translate_newlines option when configuring decoders

[10:03] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/9ea137392e

[10:03] <Geth> ¬¶ nqp: 05e7227ada | pmurias++ | t/moar/05-decoder.t

[10:03] <Geth> ¬¶ nqp: Test decoders with the translate_newlines option

[10:03] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/05e7227ada

[10:03] <Geth> ¬¶ nqp: 4ab0db95dc | pmurias++ | src/vm/js/bin/run_tests.pl

[10:04] <Geth> ¬¶ nqp: [js] Reenable test 19

[10:04] <Geth> ¬¶ nqp: review: https://github.com/perl6/nqp/commit/4ab0db95dc

[10:08] <Zoffix> Ah. Now I see why perl6.fail stopped updating. I upgraded perl5 but didn't install any of the modules

[10:09] <Zoffix> and damn cpanm is lightning fast compared to zef :(

[10:10] <timotimo> we'll get there eventually ...

[10:13] <Geth> ¬¶ roast: d4aea7748a | danielcliffordmiller++ (committed using GitHub Web editor) | S12-subset/subtypes.t

[10:13] <Geth> ¬¶ roast: Added test for RT 131381

[10:13] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/d4aea7748a

[10:13] <Geth> ¬¶ roast: 5f5a9888b0 | danielcliffordmiller++ (committed using GitHub Web editor) | S12-subset/subtypes.t

[10:13] <Geth> ¬¶ roast: Updated PR with requested changes

[10:13] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/5f5a9888b0

[10:13] <Geth> ¬¶ roast: a19c632aa6 | (Zoffix Znet)++ (committed using GitHub Web editor) | S12-subset/subtypes.t

[10:13] <Geth> ¬¶ roast: Merge pull request #273 from danielcliffordmiller/master

[10:13] <Geth> ¬¶ roast:

[10:13] <Geth> ¬¶ roast: Added test for RT 131381

[10:13] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/a19c632aa6

[10:15] <Geth> ¬¶ roast: dcfb2db6ac | (Zoffix Znet)++ (committed using GitHub Web editor) | S12-subset/subtypes.t

[10:15] <Geth> ¬¶ roast: Remove space in fudge #273

[10:15] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/dcfb2db6ac

[10:18] <Zoffix> NeuralAnomaly: status

[10:18] <NeuralAnomaly> Zoffix, [‚úò] Next release will be in 2 weeks and 2 days. Since last release, there are 35 new still-open tickets (32 unreviewed and 0 blockers) and 319 unreviewed commits. See http://perl6.fail/release/stats for details

[10:18] <Zoffix> perl6.fail back in business

[10:20] <Geth> ¬¶ rakudo/nom: 11fa6d944b | (Elizabeth Mattijsen)++ | src/core/set_operators.pm

[10:20] <Geth> ¬¶ rakudo/nom: Fix problem doing hash (|) object hash

[10:20] <Geth> ¬¶ rakudo/nom:

[10:20] <Geth> ¬¶ rakudo/nom: Spotted while writing tests.

[10:20] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/11fa6d944b

[10:26] <Geth> ¬¶ roast: b5f9973e48 | (Elizabeth Mattijsen)++ | S03-operators/union.t

[10:26] <Geth> ¬¶ roast: Add some more (|) test + some regrouping for clarity

[10:26] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/b5f9973e48

[10:36] <Geth> ¬¶ roast: c85b8f30de | (Elizabeth Mattijsen)++ | S03-operators/union.t

[10:36] <Geth> ¬¶ roast: Add tests for list of pairs (|) mixed list

[10:36] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/c85b8f30de

[10:36] <lizmat> afk again&

[10:46] <Zoffix> m: say 50/0  cmp -100/0

[10:46] <camelia> rakudo-moar 11fa6d: OUTPUT: ¬´Same‚ê§¬ª

[10:47] <Zoffix> m: say sort 50/0, 100/0, -50/0

[10:47] <camelia> rakudo-moar 11fa6d: OUTPUT: ¬´Attempt to divide 50 by zero using div‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§Actually thrown at:‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[10:47] <Zoffix> I thought this was fixed :|

[10:48] <Zoffix> c: all say sort 50/0, 100/0, -50/0

[10:48] <committable6> Zoffix, https://gist.github.com/ecb542ea294ed5ae74fac9c34e1cd819

[10:48] <Zoffix> ah, duh

[10:49] <Zoffix> m: say map *.Num, sort 50/0, 100/0, -50/0

[10:49] <camelia> rakudo-moar 11fa6d: OUTPUT: ¬´(Inf Inf -Inf)‚ê§¬ª

[10:50] <Zoffix> .oO( isn't that backwards? )

[10:50] <Zoffix> m: say map *.Num, sort 50, 100, -50

[10:50] <camelia> rakudo-moar 11fa6d: OUTPUT: ¬´(-50 50 100)‚ê§¬ª

[10:50] <Zoffix> ah, prolly due to cmp issue

[10:57] <Zoffix> Ah hah. I see the problem :)

[10:57] <Zoffix> Will fix in a few hours.

[11:36] <Zoffix> actually, fix it some time next week. I wanna finish the toaster before the weekend, which I'll be taking off

[12:42] <|Tux|> perl6 -e 'sub MAIN (List :$dirs=[]) { .say for @$dirs¬ª.split: /","/}' --dirs=d1 --dirs=d2 --dirs=d3,d4,d5

[12:42] <|Tux|> I expected that to give a single list, not (d1) (d2) (d3 d4 d5)

[12:47] <jnthn> No, that won't flatten automatically (relatively little does)

[12:47] <jnthn> .say for flat ...

[12:52] <Zoffix> .say for flat $dirs.List¬ª.split: /","/

[12:52] <Zoffix> .say for $dirs.join(",").split: /","/

[12:56] <Zoffix> m: (1, $((2, 3).Seq)).flat.perl.say; (1, $(2, 3)).flat.perl.say;

[12:56] <camelia> rakudo-moar 11fa6d: OUTPUT: ¬´(1, (2, 3).Seq).Seq‚ê§(1, $(2, 3)).Seq‚ê§¬ª

[12:56] <Zoffix> Looks like .perl of a Seq is forgetting to specially mark containerized seqs

[12:56] <Zoffix> s: (), 'perl', \()

[12:56] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/11fa6d9/src/core/List.pm#L810

[12:56] <Zoffix> s: ().Seq, 'perl', \()

[12:56] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/11fa6d9/src/core/Seq.pm#L157

[12:58] <|Tux|> I played with flat too, but could not find something that "worked"

[13:00] <|Tux|> so it needs both .List *and* flat

[13:00] <Zoffix> |Tux|: that's cause the items come from an Array and are containerized, so flat won't flatten them. The two examples I mentioned should work

[13:00] <|Tux|> perl6 -e 'sub MAIN (List :$dirs=[]) { .say for flat @$dirs.List¬ª.split: /","/}' --dirs=d1 --dirs=d2 --dirs=d3,d4,d5

[13:00] <Zoffix> Yeah

[13:01] <Zoffix> Or map a slip: .say for $dirs.map: |*.split: /","/

[13:07] <Zoffix> Is there a point in (*@args ($, *@)) sig, rather than just (*@args) ?

[13:07] <Zoffix> like, literally that; unpacked to anons

[13:09] <Zoffix> Ah, yes: spec you want at least one item

[13:09] <Zoffix> m: sub foo (*@args ($, *@)) { @args }; sub bar(*@args) { @args }; dd [ foo($_), bar($_) ] with ()

[13:09] <camelia> rakudo-moar 11fa6d: OUTPUT: ¬´Too few positionals passed to 'foo'; expected at least 1 argument but got only 0 in sub-signature of parameter @args‚ê§  in sub foo at <tmp> line 1‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[13:14] <Zoffix> tho where .so is fastar

[13:16] <Zoffix> 4.61x faster

[13:18] <Zoffix> ZOFFLOP: t/spec/S10-packages/precompilation.tr

[13:27] <masak> computer, any messages?

[13:27] <yoleaux> 28 May 2017 22:26Z <MasterDuke> masak: re https://rt.perl.org/rt3/Public/Bug/Display.html?id=123572, what is the expected behavior of the :3[4, 22, 1] radix form? should digits greater than the base be allowed (e.g., the 4 in my example)? should values in the list greater than the base be allowed?

[13:28] <masak> MasterDuke: the way I read the bug report is that exactly that should be disallowed: numbers greater than (or equal to) the base

[13:33] <Zoffix> ZOFFLOP: t/spec/S11-modules/nested.t

[13:39] <Geth> ¬¶ rakudo/nom: b22383fe62 | (Zoffix Znet)++ | src/core/Seq.pm

[13:39] <Geth> ¬¶ rakudo/nom: Fix Seq.Perl for containerized Seqs

[13:39] <Geth> ¬¶ rakudo/nom:

[13:39] <Geth> ¬¶ rakudo/nom: If a Seq is containerized, it won't `flat`ten, so we need to

[13:39] <Geth> ¬¶ rakudo/nom: preserve this property when roundtripping through .perl.

[13:39] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b22383fe62

[13:40] <Geth> ¬¶ roast: 3e60b77d8e | (Zoffix Znet)++ | S32-list/seq.t

[13:40] <Geth> ¬¶ roast: Test Seq.perl.EVAL roundtrips containerized seqs

[13:40] <Geth> ¬¶ roast:

[13:40] <Geth> ¬¶ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/b22383fe62

[13:40] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/3e60b77d8e

[13:42] <Geth> ¬¶ rakudo/nom: 93524fb953 | (Zoffix Znet)++ | src/core/Proc.pm

[13:42] <Geth> ¬¶ rakudo/nom: Make invocation of Proc.spawn and &run 4.6x faster

[13:42] <Geth> ¬¶ rakudo/nom:

[13:42] <Geth> ¬¶ rakudo/nom: The speedup is just for the routine calls themselves, achieved by

[13:42] <Geth> ¬¶ rakudo/nom: changing the way to specify "at least one arg in @args" from unpacked

[13:42] <Geth> ¬¶ rakudo/nom: double-slurpy to a `where` clause

[13:42] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/93524fb953

[13:58] <Geth> ¬¶ rakudo/nom: 92c187d2dc | (Zoffix Znet)++ | src/core/Proc/Async.pm

[13:58] <Geth> ¬¶ rakudo/nom: Fix Proc::Async.new not slurping first positional

[13:58] <Geth> ¬¶ rakudo/nom:

[13:58] <Geth> ¬¶ rakudo/nom: - Slurp all the args, including the first command

[13:58] <Geth> ¬¶ rakudo/nom: - Makes it easy to pass stuff like `Proc::Async.new: <git log --oneline>`

[13:58] <Geth> ¬¶ rakudo/nom:     without having to extract `git` out of the rest of the list

[13:58] <Geth> ¬¶ rakudo/nom: - Aligns interface with what we already do for &run and Proc.spawn

[13:58] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/92c187d2dc

[13:58] <Geth> ¬¶ roast: 4937efbc02 | (Zoffix Znet)++ | S17-procasync/basic.t

[13:58] <Geth> ¬¶ roast: Test Proc::Async.new slurps all positionals

[13:58] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/4937efbc02

[14:00] <Zoffix> ZofBot: it's crutical! Both crucial and critical!

[14:00] <ZofBot> Zoffix, You can't put a combiner onto a control char

[14:00] * Zoffix leaves it in just for fun

[14:01] <Geth> ¬¶ roast: 9c793637c5 | (Zoffix Znet)++ | S17-procasync/basic.t

[14:01] <Geth> ¬¶ roast: Fix typo

[14:01] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/9c793637c5

[14:05] <pmurias> Zoffix: what's the bottle neck with zef?

[14:06] <Zoffix> pmurias: no idea

[14:07] <Zoffix> It's just a million times slower. I couldn't even spot which modules were being installed by cpanm, it was installing them so fast

[14:11] <timotimo> i wonder what a "perf record -g" would give us

[14:13] <timotimo> like, is there an obvious hot spot for the whole process?

[14:13] <timotimo> probably just a complete across-the-board slowness of rakudo + moarvm :\

[14:19] <ugexe> well for installation you have to wait for precompile

[14:19] <timotimo> p5 doesn't do that at all, right?

[14:19] <ugexe> most everything else spawns a process to do work (wget, curl, whatever)

[14:19] <ugexe> and probably the json/hash searching method

[14:19] <timotimo> do you get faster zef execution when something like our UserAgent module is installed?

[14:20] <ugexe> right p5 doesn't precompile things

[14:20] <ugexe> I'm not sure. Net::HTTP used to be built into zef and I don't recall it being significantly faster

[14:21] <timotimo> dang.

[14:29] <ugexe> i think the fastest win would be not using json for the ecosystem listing

[14:30] <ugexe> like something with some alphabetical ordering or something that could be stream parsed and short-circuit early

[14:30] <timotimo> interesting, i was wondering if i should give JSON::Fast something "path filter" like

[14:30] <ugexe> still, it has to search `provides` sections as well

[14:31] <timotimo> the ecosystem api could transform the complete list to split it apart

[14:31] <ugexe> well i dont use a json module in zef, and this is because it ensures the json read/generated matches what compunit::repository sees/can handle

[14:31] <timotimo> i mean the web service

[14:32] <timotimo> oh

[14:33] <ugexe> yeah. i'm not sure what the best format would be, but thats probably what needs to be done. zef's local cache and compunit repository use \0 delimited lines to split an identity into parts for instance (but this doesn't allow nested data that would probably want to be searched)

[14:33] <ugexe> er, \0 delmited fields, each dist on its own line^

[14:36] <timotimo> so .split("\n")>>.split("\0")?

[14:36] <ugexe> yeah, something like that

[14:37] <timotimo> that's what you already have, right?

[14:37] <ugexe> https://github.com/ugexe/zef/blob/master/lib/Zef/Repository/LocalCache.pm6#L124

[14:37] <timotimo> i wonder how much worth it'd be to have a lookup-table in front

[14:37] <timotimo> or even in back

[14:38] <timotimo> ah, that store re-writes the whole thing "from scratch" for reasons

[14:39] <timotimo> but it's not actually sorted? so it could just be appending perhaps?

[14:39] <ugexe> yeah it doesn't sort. and don't pay too much attention to the details as they are probably wrong

[14:39] <timotimo> it's probably not a hot piece of code, but it would grow with number of installed dists

[14:40] <ugexe> https://github.com/ugexe/zef/blob/master/lib/Zef/Repository/LocalCache.pm6#L95

[14:40] <ugexe> this is likely the slowest part

[14:40] <ugexe> also Zef::Repository::* has that method

[14:40] <ugexe> ha i see a comment on short-circuiting that used to exist too

[14:41] <timotimo> how much more often do you search compared to storing?

[14:50] <ugexe> oh yeah thats dumb

[14:50] <ugexe> https://github.com/ugexe/zef/blob/master/lib/Zef/Repository/LocalCache.pm6#L23 # *reads* what .store writes

[14:51] <ugexe> but the localcache though thats probably not bad. let me point exactly at the more likely culprit

[14:56] <ugexe> well i guess i don't know where exactly, but probably https://github.com/ugexe/zef/blob/master/lib/Zef/Repository/Ecosystems.pm6 (which has a possible benchmarkable code snippet here https://github.com/ugexe/zef/blob/master/xt/repository.t#L45)

[15:27] <AlexDaniel> m: BEGIN { @*ARGS=‚Äò--dirs=d1,d2‚Äô, ‚Äò--dirs=d3,d4‚Äô }; sub MAIN (List :$dirs=[]) { .say for flat @$dirs.List¬ª.split: /","/ }

[15:27] <camelia> rakudo-moar 92c187: OUTPUT: ¬´d1‚ê§d2‚ê§d3‚ê§d4‚ê§¬ª

[15:27] <AlexDaniel> mc: BEGIN { @*ARGS=‚Äò--dirs=d1,d2‚Äô, ‚Äò--dirs=d3,d4‚Äô }; sub MAIN (List :$dirs=[]) { .say for flat @$dirs.List¬ª.split: /","/ }

[15:27] <committable6> AlexDaniel, ¬¶2015.12: ¬´d1‚ê§d2‚ê§d3‚ê§d4¬ª

[15:27] <AlexDaniel> m: BEGIN { @*ARGS=‚Äò--dirs=d1,d2‚Äô }; sub MAIN (List :$dirs=[]) { .say for flat @$dirs.List¬ª.split: /","/ }

[15:27] <camelia> rakudo-moar 92c187: OUTPUT: ¬´Usage:‚ê§  <tmp> [--dirs=<List>] ‚ê§¬ª

[15:27] <AlexDaniel> mc: BEGIN { @*ARGS=‚Äò--dirs=d1,d2‚Äô }; sub MAIN (List :$dirs=[]) { .say for flat @$dirs.List¬ª.split: /","/ }

[15:27] <AlexDaniel> ffffffffffffffffffffffffffffffffuuuuuuuuuuuuuuuuuuuuuuuuu

[15:28] <AlexDaniel> this is really annoying‚Ä¶

[15:28] <AlexDaniel> mc: BEGIN { @*ARGS=‚Äò--dirs=d1,d2‚Äô }; sub MAIN (List :$dirs=[]) { .say for flat @$dirs.List¬ª.split: /","/ }

[15:29] <committable6> AlexDaniel, ¬¶2015.12: ¬´Usage:‚ê§  /tmp/qAkip8Jc9Z [--dirs=<List>]  ¬´exit code = 2¬ª¬ª

[15:30] <AlexDaniel> okay

[15:39] <Zoffix> dam., I can't spell for shit

[15:41] <[Coke]> we have a bot for that.

[15:42] <[Coke]> also: "damn"

[15:42] <[Coke]> ;)

[15:42] <Zoffix> :)

[15:43] <Zoffix> We have a bot for spelling? What?

[15:44] <[Coke]> well, it's me running the spelling tests.

[15:44] <Zoffix> Ah :)

[16:25] <AlexDaniel> cmomittble6: say 42

[16:25] <committable6> AlexDaniel, Seems like you forgot to specify a revision (will use ‚Äúv6.c‚Äù instead of ‚Äúsay‚Äù)

[16:25] <AlexDaniel> Zoffix: ‚ô•

[16:25] <committable6> AlexDaniel, ¬¶v6.c (19 commits): ¬´42¬ª

[16:25] <Zoffix> AlexDaniel: ?

[16:26] <AlexDaniel> Zoffix: these bots are for those who can't spell and can't learn the command syntax :)

[16:26] <Zoffix> Ah :D

[16:26] <Zoffix> Coll

[16:26] <Zoffix> I mean Cool

[16:26] <AlexDaniel> yre wellcoume

[16:50] <Zoffix> Hahaha. https://twitter.com/kraih/status/870313476518010880

[16:51] <Zoffix> For all the Perl 6 hate, he sure loves our features :P

[17:00] * nine is just happy to see features still flowing

[17:01] * Zoffix is amused Perl 5 allows whitespace as heredoc delimiters

[17:06] <nine> A feature dearly missed in Perl 6 ...

[17:07] <Zoffix> Really? Feels to be of a "you think it's cute now..." type of ideas.

[17:09] <Zoffix> say q:to/   /;‚ê§    Warning! This command is bad and you should feel bad!‚ê§    qx/rm -fr ~/‚ê§Don't run it, bruh‚ê§

[17:09] <evalable6> Zoffix, rakudo-moar 92c187d2d: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/XBO12Dblt4‚ê§Ending delimiter     not found‚ê§at /tmp/XBO12Dblt4:5‚ê§------> 03    08‚èè04<EOL>‚ê§    expecting any of:‚ê§        whitespace¬ª

[17:09] <Zoffix> .oO( hm, maybe I should put spacing around the command to meke it more visible )

[17:09] <Zoffix> say q:to/   /;‚ê§    Warning! This command is bad and you should feel bad!‚ê§    ‚ê§    qx/rm -fr ~/‚ê§‚ê§Don't run it, bruh‚ê§

[17:09] <evalable6> Zoffix, rakudo-moar 92c187d2d: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/qQUilf8Of_‚ê§Ending delimiter     not found‚ê§at /tmp/qQUilf8Of_:7‚ê§------> 03    08‚èè04<EOL>‚ê§    expecting any of:‚ê§        whitespace¬ª

[17:09] <Zoffix> Oh mah gawd! My system!

[17:09] <Zoffix> evalable6: you're dumb

[17:09] <evalable6> Zoffix, rakudo-moar 92c187d2d: OUTPUT: ¬´(exit code 1) 04===SORRY!04=== Error while compiling /tmp/rTGy48MUrj‚ê§Undeclared routines:‚ê§    dumb used at line 1. Did you mean 'DUMP'?‚ê§    you're used at line 1‚ê§¬ª

[17:28] <nine> Zoffix: I was being quite sarcastic :)

[17:29] <Zoffix> Ah :)

[17:57] <Zoffix> Looks like there's some confusion among users using rakudobrew thinking they're using R*: http://perl6maven.com/getting-started-with-bailador#comment-3327453415

[17:57] <Zoffix> Also, `2017.04.2-2-ge1c086b`; it's one of the lemons. People don't realize they use crap commits.

[18:04] <AlexDaniel> Zoffix: wait, why is evalable6 dumb?

[18:05] <Zoffix> AlexDaniel: 'cause I didn't want to eval any code

[18:06] <AlexDaniel> well, um, maybe evalable knows better?

[18:07] <Zoffix> In fact, its replies interrupted my acting out a fatal programming error and if I don't get an oscar, I might just sue

[18:07] * AlexDaniel is happy it didn't actually run

[18:07] <Zoffix> m: say qx/cal/

[18:07] <camelia> rakudo-moar 92c187: OUTPUT: ¬´qx, qqx is disallowed in restricted setting‚ê§  in sub restricted at src/RESTRICTED.setting line 1‚ê§  in sub QX at src/RESTRICTED.setting line 11‚ê§  in block <unit> at <tmp> line 1‚ê§‚ê§¬ª

[18:07] <Zoffix> it's restricted anywa'

[18:08] <AlexDaniel> ye right‚Ä¶ last time I was doing regressionable stuff, I found a bunch of shitfiles scattered everywhere

[18:08] <Zoffix> XD

[18:08] <Zoffix> I tend to put all my files under /tmp

[18:08] <AlexDaniel> restricted setting does not help, especially if you're using 2 year old commits to test stuff‚Ä¶

[18:09] <Zoffix> m: use NativeCall; sub system(Str) is native {}; say system 'cal'

[18:09] <camelia> rakudo-moar 92c187: OUTPUT: ¬´      June 2017     ‚ê§Su Mo Tu We Th Fr Sa‚ê§             1  2  3 ‚ê§ 4  5  6  7  8  9 10 ‚ê§11 12 13 14 15 16 17 ‚ê§18 19 20 21 22 23 24 ‚ê§25 26 27 28 29 30    ‚ê§                     ‚ê§(Mu)‚ê§¬ª

[18:09] <Zoffix> hehe

[18:11] <AlexDaniel> luckily we don't have many retarded vandals here, so I can get away with not implementing secure eval for a little bit more‚Ä¶ even when you give them clear instructions on how to trick the restricted setting

[18:11] <Zoffix> Oh noes! You've used the prohibited word!

[18:12] <AlexDaniel> which one? ‚Äúeval‚Äù?

[18:12] <AlexDaniel> use MONKEY-SEE-NO-EVAL;

[18:13] <Zoffix> AlexDaniel: the one that was arbitrarily chosen to be offending to mentally disabled, despite no one actually using that word to describe the actual mentally disabled, just like no one uses "idiot" to describe the actual mentally disabled

[18:14] <Zoffix> I got shit for using it last time, and I'll be damned if I let you get away with using it!

[18:14] <Zoffix> Apologize!

[18:15] <AlexDaniel> Zoffix: why talk at all if not to offend those who always want to be offended?

[18:16] <AlexDaniel> but still, yes, I'll pick a different word next time

[18:16] <Zoffix> The argument's natural conclusion is all insults must be removed from use.

[18:17] <Zoffix> AlexDaniel: out of curiosity, which word will you plan on using as a substitute?

[18:18] <AlexDaniel> Any suggestions? I was thinking, like, ‚Äúfaggots‚Äù, but then realized‚Ä¶

[18:19] <AlexDaniel> to be honest, I've never really thought about the origin of insults

[18:20] <AlexDaniel> especially those that are not in my native language‚Ä¶

[18:20] <AlexDaniel> like, insults are just insults, no? I guess not‚Ä¶

[18:20] <Zoffix> AlexDaniel: no, never found a good replacement for retarded. All the related words don't quite have the same strength to them, and well, they all equate the insulted person or object to those of lower mental abilities, so if you're not going to use retarded for that reason, you can't use things like "idiot" either, and from then it all spirals down to all insults being bad.

[18:21] <AlexDaniel> Zoffix: ‚Äúbrainless‚Äù?

[18:22] <Zoffix> AlexDaniel: I think insults are a lot about context. There's nothing negative about being a baby, a child, or a girl; it's the context alone that give those word insult-like qualities when they're used as insults.

[18:23] <Zoffix> AlexDaniel: strength isn't there :) Even before the cultural shift to avoid "retarded" it was a bit too vulgar to use in, say, an office meeting, but "brainless" is much milder.

[18:24] <Zoffix> I guess modifiers could bring up to equal strength, something like "god damn brainless" or "fucking brainless", though the latter overshoots a bit

[18:26] <AlexDaniel> .oO( brai≈Ñƒºe≈üsÕû ?)

[18:27] <Zoffix> hah

[18:27] <AlexDaniel> oh wait, modifiers, not combiners!

[18:27] <AlexDaniel> u: MODIFIER

[18:27] <unicodable6> AlexDaniel, U+02B0 MODIFIER LETTER SMALL H [Lm] ( ∞)

[18:27] <unicodable6> AlexDaniel, U+02B1 MODIFIER LETTER SMALL H WITH HOOK [Lm] ( ±)

[18:27] <unicodable6> AlexDaniel, 249 characters in total: https://gist.github.com/5e8636fe3f8543165bae980544ee00fe

[18:28] <AlexDaniel> ·¥Æ·¥ø·¥¨·¥µ·¥∫·¥∏·¥±·∂≥·∂≥ ?

[18:29] <AlexDaniel> yes, no S

[18:29] <[Coke]> If you can't find a better insult, perhaps you have an issue yourself.

[18:30] <Zoffix> Is that a bad thing? :P

[18:30] <AlexDaniel> [Coke]: that's a good insult

[18:30] <Zoffix> haha

[18:30] <[Coke]> I'm not going to call you names about it, if that's what you're asking. :)

[18:34] <AlexDaniel> Zoffix: I like the idea of replacing all possibly offending words with a random sequence of unicode characters

[18:34] <Zoffix> :D

[18:34] <AlexDaniel> then anybody can make anything he wants out of it

[18:34] <AlexDaniel> they want, I mean

[18:34] <Zoffix> :)

[18:35] <AlexDaniel> ok I'll just shut up not to make a bigger fool out of myself :X

[18:37] <Zoffix> Don't you mean a bigger  ∑ÀûÀêÀçÀ≥À≥Àß?

[18:38] <masak> that looks like Principia Mathematica

[18:43] <[Coke]> fÃ°ÕôÃàÃÅÃíÃè≈ëÃ¥ÃßÃπÕ¢oÕáÃçÕ®ÕóÕùlÃ∏Ã®ÃªÃ≥Ãñ

[18:50] <[Coke]> m: "fÃ°ÕôÃàÃÅÃíÃè≈ëÃ¥ÃßÃπÕ¢oÕáÃçÕ®ÕóÕùlÃ∏Ã®ÃªÃ≥Ãñ".comb>>.NFD.map(*[0].chr).join.say

[18:50] <camelia> rakudo-moar 92c187: OUTPUT: ¬´fool‚ê§¬ª

[18:51] <AlexDaniel> too complicated

[18:51] <[Coke]> wow, that looks horrible on the irc logs: https://irclog.perlgeek.de/perl6-dev/2017-06-01#i_14672419

[18:51] <AlexDaniel> m: say "fÃ°ÕôÃàÃÅÃíÃè≈ëÃ¥ÃßÃπÕ¢oÕáÃçÕ®ÕóÕùlÃ∏Ã®ÃªÃ≥Ãñ".samemark(‚Äúdogs‚Äù)

[18:51] <camelia> rakudo-moar 92c187: OUTPUT: ¬´fool‚ê§¬ª

[18:52] <[Coke]> even shorter: samemark('a')

[18:53] <AlexDaniel> m: say "fÃ°ÕôÃàÃÅÃíÃè≈ëÃ¥ÃßÃπÕ¢oÕáÃçÕ®ÕóÕùlÃ∏Ã®ÃªÃ≥Ãñ".samemark(‚Äò‚Äô)

[18:53] <camelia> rakudo-moar 92c187: OUTPUT: ¬´fÃ°ÕôÃàÃÅÃíÃè≈ëÃ¥ÃßÃπÕ¢oÕáÃçÕ®ÕóÕùlÃ∏Ã®ÃªÃ≥Ãñ‚ê§¬ª

[18:53] <AlexDaniel> didn't work‚Ä¶

[18:56] <[Coke]> m: say "fÃ°ÕôÃàÃÅ≈ëÃ¥ÃßÃπoÕáÃçÕ®ÕólÃ∏Ã®ÃªÃ≥".samemark(‚Äòa‚Äô)

[18:56] <camelia> rakudo-moar 92c187: OUTPUT: ¬´fool‚ê§¬ª

[18:57] <Zoffix> m: say "fÃ°ÕôÃàÃÅ≈ëÃ¥ÃßÃπÕ¢oÕáÃçÕ®ÕólÃ∏Ã®ÃªÃ≥".samemark(‚Äò‚Å£‚Äô)

[18:57] <camelia> rakudo-moar 92c187: OUTPUT: ¬´fool‚ê§¬ª

[18:57] <Zoffix> :}

[19:17] <Geth> ¬¶ rakudo: jsimonet++ created pull request #1094: Fix for RT #131201 (error message when proto has no implementation)

[19:17] <Geth> ¬¶ rakudo: review: https://github.com/rakudo/rakudo/pull/1094

[19:44] <Zoffix> ZOFVM: Files=1240, Tests=138233, 125 wallclock secs (23.90 usr  3.20 sys + 2561.17 cusr 151.78 csys = 2740.05 CPU)

[19:46] <Geth> ¬¶ rakudo/nom: 252dbf3a91 | (Zoffix Znet)++ | src/core/Rakudo/Internals.pm

[19:46] <Geth> ¬¶ rakudo/nom: Fix hang in deepmap with Iterable type objects

[19:46] <Geth> ¬¶ rakudo/nom:

[19:46] <Geth> ¬¶ rakudo/nom: If an Iterable type object is given to deepmap, .list gets called

[19:46] <Geth> ¬¶ rakudo/nom: on it and the resultant 1-el iterable with the type object inside

[19:46] <Geth> ¬¶ rakudo/nom: of it gets used to map over. However, the logic that descends into

[19:46] <Geth> ¬¶ rakudo/nom: iterables forgets to check if they're type objects, so we end up

[19:46] <Geth> ¬¶ rakudo/nom: infinitely recursing by descending into the type object iterable,

[19:46] <Geth> ¬¶ rakudo/nom: <‚Ä¶commit message has 5 more lines‚Ä¶>

[19:46] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/252dbf3a91

[19:47] <Geth> ¬¶ roast: 6b95eaacc2 | (Zoffix Znet)++ | S32-list/deepmap.t

[19:47] <Geth> ¬¶ roast: Test deepmap and hypering does not hang on type objects

[19:47] <Geth> ¬¶ roast:

[19:47] <Geth> ¬¶ roast: Bug find: https://irclog.perlgeek.de/perl6/2017-06-01#i_14672468

[19:47] <Geth> ¬¶ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/252dbf3a91

[19:47] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/6b95eaacc2

[21:12] <Geth> ¬¶ roast: d8261eaa79 | (Zoffix Znet)++ (committed using GitHub Web editor) | S32-list/deepmap.t

[21:12] <Geth> ¬¶ roast: Add ticket ref to test

[21:12] <Geth> ¬¶ roast: review: https://github.com/perl6/roast/commit/d8261eaa79

[21:21] <dogbert17> m: sub grab(+@a) { "grab $_".say for @a }; grab(flat $(1, 2))

[21:21] <camelia> rakudo-moar 252dbf: OUTPUT: ¬´grab 1‚ê§grab 2‚ê§¬ª

[21:22] <dogbert17> commit: 2016.01 sub grab(+@a) { "grab $_".say for @a }; grab(flat $(1, 2))

[21:22] <committable6> dogbert17, ¬¶2016.01: ¬´grab 1 2¬ª

[21:22] <dogbert17> commit: 2016.07 sub grab(+@a) { "grab $_".say for @a }; grab(flat $(1, 2))

[21:22] <dogbert17> wake up bot

[21:23] <dogbert17> commit: 2016.08 sub grab(+@a) { "grab $_".say for @a }; grab(flat $(1, 2))

[21:31] <dogbert17> bisect: sub grab(+@a) { "grab $_".say for @a }; grab(flat $(1, 2))

[21:31] <bisectable6> dogbert17, Bisecting by output (old=2015.12 new=252dbf3) because on both starting points the exit code is 0

[21:31] <bisectable6> dogbert17, bisect log: https://gist.github.com/6e030f4b457143ddd9cf5aa9a6334eda

[21:31] <bisectable6> dogbert17, (2017-02-18) https://github.com/rakudo/rakudo/commit/ca102c51ae2a6a30df50f1fb039f398c5da329c6

[21:33] <dogbert17> .ask Zoffix should 'sub grab(+@a) { "grab $_".say for @a }; grab(flat $(1, 2))' return ¬´grab 1 2¬ª or ¬´grab 1‚ê§grab 2‚ê§¬ª

[21:33] <yoleaux> dogbert17: I'll pass your message to Zoffix.

[21:50] * AlexDaniel slaps committable6

[21:53] <AlexDaniel> by the way

[21:53] <AlexDaniel> c: 348886d9b^,348886d9b my Array[Int] $x; say $x>>.Str;

[21:53] <AlexDaniel> https://github.com/rakudo/rakudo/commit/348886d9bbe9eb908b2b83264556073254e4d709

[21:53] <committable6> AlexDaniel, ¬¶348886d9b^: ¬´¬ª ¬¶348886d: ¬´¬´timed out after 10 seconds¬ª ¬´exit signal = SIGHUP (1)¬ª¬ª

[21:53] <AlexDaniel> not that it makes any difference, but still

[22:16] <Zoffix> dogbert17: 1, 2. The flat or containerization is irrelevant; the (1, 2) list becomes the [1, 2] array

[22:16] <yoleaux> 21:33Z <dogbert17> Zoffix: should 'sub grab(+@a) { "grab $_".say for @a }; grab(flat $(1, 2))' return ¬´grab 1 2¬ª or ¬´grab 1‚ê§grab 2‚ê§¬ª

[22:35] <Zoffix> Good grief. The social media is unusable this week. Everyone thinks they're witty and clever, parroting the same tired lines about American politics.

[22:35] <Zoffix> Pretty amusing.

[22:36] <Zoffix> ZofBot: "Mein Covfefe"! Please dispense your approval by mashing the "Like" button. Thank you.

[22:36] <ZofBot> Zoffix, 365 test-t 5

[22:37] <geekosaur> makes about as much sense as anything else being said on the subject...

[22:39] <Geth> ¬¶ rakudo/nom: d09bf7fbb2 | (Julien Simonet)++ | src/core/Exception.pm

[22:39] <Geth> ¬¶ rakudo/nom: Fix for RT #131201 (error message when proto has no implementation)

[22:39] <Geth> ¬¶ rakudo/nom:

[22:39] <Geth> ¬¶ rakudo/nom: Check if the array is empty or not.

[22:39] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d09bf7fbb2

[22:39] <Geth> ¬¶ rakudo/nom: b4f1f43221 | (Julien Simonet)++ (committed using GitHub Web editor) | src/core/Exception.pm

[22:39] <Geth> ¬¶ rakudo/nom: Update Exception.pm

[22:39] <Geth> ¬¶ rakudo/nom:

[22:39] <Geth> ¬¶ rakudo/nom: Change message to the one proposed by @zoffixznet.

[22:39] <Geth> ¬¶ rakudo/nom:

[22:39] <Geth> ¬¶ rakudo/nom: "Routine does not have any candidates. Is only the proto defined?"

[22:39] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b4f1f43221

[22:39] <Geth> ¬¶ rakudo/nom: 02614f6477 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Exception.pm

[22:39] <Geth> ¬¶ rakudo/nom: Merge pull request #1094 from jsimonet/nom

[22:39] <Geth> ¬¶ rakudo/nom:

[22:39] <Geth> ¬¶ rakudo/nom: Fix for RT #131201 (error message when proto has no implementation)

[22:39] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/02614f6477

[22:47] <Geth> ¬¶ rakudo/nom: 3524c2b79d | (Zoffix Znet)++ | t/05-messages/01-errors.t

[22:47] <Geth> ¬¶ rakudo/nom: Fix broken test

[22:47] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3524c2b79d

[22:47] <Geth> ¬¶ rakudo/nom: 8e0d000fbb | (Zoffix Znet)++ | t/05-messages/01-errors.t

[22:47] <Geth> ¬¶ rakudo/nom: Test only-proto error is sane

[22:47] <Geth> ¬¶ rakudo/nom:

[22:47] <Geth> ¬¶ rakudo/nom: RT#131201: https://rt.perl.org/Ticket/Display.html?id=131201

[22:47] <Geth> ¬¶ rakudo/nom: Rakudo fix: https://github.com/rakudo/rakudo/commit/02614f6477

[22:47] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8e0d000fbb

[22:48] <Zoffix> cpan@perlbuild4~/CPANPRC/rakudo (nom)$ ./perl6 -e 'Blob.split'

[22:48] <Zoffix> Cannot resolve caller split(Blob); Routine does not have any candidates. Is only the proto defined?

[22:48] <Zoffix> in block <unit> at -e line 1

[22:48] <Zoffix> I guess that fix fixes https://rt.perl.org/Ticket/Display.html?id=131367#ticket-history too

[22:52] <Geth> ¬¶ rakudo/nom: b667e818c5 | (Zoffix Znet)++ | t/05-messages/01-errors.t

[22:52] <Geth> ¬¶ rakudo/nom: Fix Blob.split/Blob.splice errors are sane

[22:52] <Geth> ¬¶ rakudo/nom:

[22:52] <Geth> ¬¶ rakudo/nom: RT#131367: https://rt.perl.org/Ticket/Display.html?id=131367

[22:52] <Geth> ¬¶ rakudo/nom: Rakudo fix: https://github.com/rakudo/rakudo/commit/02614f6477

[22:52] <Geth> ¬¶ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b667e818c5

[22:54] <Zoffix> (cause IIRC the proto being being placed into Mu was for something to do with shaped array candidates)

[22:55] <AlexDaniel> Zoffix: your favorite type of errors: https://irclog.perlgeek.de/perl6/2017-06-01#i_14673283

[22:56] <Zoffix> haha

[22:57] <Zoffix> I guess that error should now be extended to mention IO::CatHandle's &.on-switch

[23:04] <AlexDaniel> honestly, when I came to perl¬†6 with some perl¬†5 knowledge, these errors were extremely helpful

[23:04] <AlexDaniel> now that I think perl¬†6, I hate them with passion

[23:05] <AlexDaniel> I guess you can't get both

[23:06] <timotimo> :D

[23:06] <Zoffix> Sure you can. You pack them into "TeachingAid::Errors" module and remove them from core.

[23:07] <timotimo> hm. then people coming from perl5 would need to "use TeachingAid::Errors" or something in all their scripts

[23:07] <timotimo> that'll be the new "use strict"? :P

[23:08] <Zoffix> Considering these errors interfere with normal Perl 6 programs and you'll be a "Perl 6 programmer writing Perl 6" infinitely longer than "Perl 5 programmer writing Perl 6", they don't pay for themselves.

[23:08] <timotimo> that's true

[23:09] <Zoffix> Why would that need be new strict? If you feel these suggestions would help you, you'd alias `perl6` to `perl6 -MTrainingAir::Errors` and be done with it. I can't recall these errors ever being helpful to me in my switch from perl 5 to perl6. I may have mistyped .elems with .length, but "no such method" would get me straight equally well

[23:10] <timotimo> hm, if you alias it, that wouldn't be picked up by hashbangs, but you could no longer run "perl6 somescript.p6" without it sometimes breaking

[23:11] * Zoffix hates those errors enough not to care about that :D

[23:11] <timotimo> :)

[23:12] <AlexDaniel> Zoffix: why not just fix all cases where they interfere

[23:12] <timotimo> they were put in as a feature

[23:13] <Zoffix> AlexDaniel: from my POV? Because it's a useless feature and spending human hours fixing it is a waste.

[23:14] <AlexDaniel> Zoffix: but if you were an ‚úì√ó‚ãÖ¬≤‚âà trying to shove perl¬†5 code into rakudo, would these errors actually be ‚Äúuseless‚Äù?

[23:15] <AlexDaniel> I don't think so

[23:15] <AlexDaniel> I loved these error messages so much

[23:15] <Zoffix> AlexDaniel: how much worse would've been generic errors?

[23:15] <Zoffix> "no such method .length on Array"

[23:15] <Zoffix> m: -> \new { say new if $++ }(42)

[23:15] <camelia> rakudo-moar b667e8: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Unsupported use of C++ constructor syntax; in Perl 6 please use method call syntax‚ê§at <tmp>:1‚ê§------> 3-> \new { say new if 7‚èè5$++ }(42)‚ê§¬ª

[23:16] <Zoffix> Ah, yes, I remember my days as a C++ like it were NEVER

[23:16] <Zoffix> as a C++ programmer

[23:16] * Zoffix leaves to hack on toaster

[23:16] <AlexDaniel> well, I've never thought about it this way :)

[23:17] <AlexDaniel> what I know for sure is that generic messages don't have any love in them

[23:18] * AlexDaniel shrugs

[23:18] <AlexDaniel> maybe you are right

[23:38] <travis-ci> Rakudo build failed. Zoffix Znet 'Merge pull request #1094 from jsimonet/nom

[23:38] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/238539028 https://github.com/rakudo/rakudo/compare/252dbf3a91c5...02614f64772e

[23:38] <buggable> [travis build above] ‚ò† Did not recognize some failures. Check results manually.

[23:44] <Zoffix> buggable: recognize harder!
