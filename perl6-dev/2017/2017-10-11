[01:00] <MasterDuke> isn't there some reason that usually happens? fwiw, it used to just be a single method, signature of `(var, int $i, int $m, int $monkey, int $s, int $a, $context)`

[01:02] <MasterDuke> and it's now `proto (|), (Iterable:D \var, ...), (Mu:D \var, ...), (Mu:U \var, ...)`

[01:41] <ugexe> fwiw Net::HTTP broke sometime recently, complaining of using a `last` outside of a loop construct. as a workaround i redid the loop to not use `last`, but I also couldn't golf it

[01:59] <ugexe> https://raw.githubusercontent.com/ugexe/Perl6-Net--HTTP/master/xt/500-transport.t was one of the failing tests

[02:00] <AlexDaniel-> c: HEAD https://gist.githubusercontent.com/AlexDaniel/8d9110472c53c45c327811598295a9d7/raw/927e5ec5540fff38031c3546406bb3608a193cb8/test.p6

[02:00] <committable6> AlexDaniel-, Successfully fetched the code from the provided URL.

[02:00] <committable6> AlexDaniel-, ¦HEAD(a72214c): «1..4␤===SORRY!===␤last without loop construct «exit code = 1»»

[02:00] <AlexDaniel-> here

[02:00] <AlexDaniel-> c: 2017.07 https://gist.githubusercontent.com/AlexDaniel/8d9110472c53c45c327811598295a9d7/raw/927e5ec5540fff38031c3546406bb3608a193cb8/test.p6

[02:00] <committable6> AlexDaniel-, Successfully fetched the code from the provided URL.

[02:01] <committable6> AlexDaniel-, https://gist.github.com/73e11623eb911ed07594a7c7afed24db

[02:01] <AlexDaniel-> bisect: old=2017.07 https://gist.githubusercontent.com/AlexDaniel/8d9110472c53c45c327811598295a9d7/raw/927e5ec5540fff38031c3546406bb3608a193cb8/test.p6

[02:01] <bisectable6> AlexDaniel-, Successfully fetched the code from the provided URL.

[02:01] <bisectable6> AlexDaniel-, Bisecting by exit code (old=2017.07 new=a72214c). Old exit code: 0

[02:01] <AlexDaniel-> *heavy breathing*

[02:01] <bisectable6> AlexDaniel-, bisect log: https://gist.github.com/5e61264647a48c145c8bf0d93178087d

[02:01] <bisectable6> AlexDaniel-, (2017-10-07) https://github.com/rakudo/rakudo/commit/b59804bc51b6a7f9941009fffd52957c3d408371

[02:02] <AlexDaniel-> Geth: ver https://github.com/rakudo/rakudo/commit/b59804bc51b6a7f9941009fffd52957c3d408371

[02:02] <Geth> AlexDaniel-, version bump brought in these changes: https://github.com/perl6/nqp/compare/2017.09-38-ga0618a6...2017.09-40-ga6a1aa0

[02:02] <AlexDaniel-> Geth: ver https://github.com/perl6/nqp/commit/a6a1aa0b48691978237d94b0d4deb2eee98b028a

[02:02] <Geth> AlexDaniel-, version bump brought in these changes: https://github.com/MoarVM/MoarVM/compare/2017.09.1-62-g89ca8eb...2017.09.1-553-ga4fef0b

[02:02] <AlexDaniel-> ugexe: pretty sure it's a JIT issue looking at this bump

[02:02] <AlexDaniel-> but could be anything, I can't bisect into moar with a bot yet

[02:03] <AlexDaniel-> let's double-check though

[02:03] <AlexDaniel-> c: b59804bc^,b59804bc https://gist.githubusercontent.com/AlexDaniel/8d9110472c53c45c327811598295a9d7/raw/927e5ec5540fff38031c3546406bb3608a193cb8/test.p6

[02:03] <committable6> AlexDaniel-, Successfully fetched the code from the provided URL.

[02:03] <committable6> AlexDaniel-, https://gist.github.com/d58263ac81c276d0a3c54d266220ed2e

[02:03] <AlexDaniel-> yeah, that is it

[02:03] <AlexDaniel-> ugexe: rakudobug plz

[02:04] * AlexDaniel- &

[02:09] <MasterDuke> .ask jnthn i've got a question about multis and find_best_dispatchee here https://irclog.perlgeek.de/perl6-dev/2017-10-10#i_15286003, with some relevant info here https://irclog.perlgeek.de/perl6-dev/2017-10-11#i_15286163

[02:09] <yoleaux> MasterDuke: I'll pass your message to jnthn.

[02:09] <MasterDuke> .ask timotimo i've got a question about multis and find_best_dispatchee here https://irclog.perlgeek.de/perl6-dev/2017-10-10#i_15286003, with some relevant info here https://irclog.perlgeek.de/perl6-dev/2017-10-11#i_15286163

[02:09] <yoleaux> MasterDuke: I'll pass your message to timotimo.

[02:10] <MasterDuke> .ask lizmat i've got a question about multis and find_best_dispatchee here https://irclog.perlgeek.de/perl6-dev/2017-10-10#i_15286003, with some relevant info here https://irclog.perlgeek.de/perl6-dev/2017-10-11#i_15286163

[02:10] <yoleaux> MasterDuke: I'll pass your message to lizmat.

[04:38] <travis-ci> Rakudo build failed. Zoffix Znet 'Bump NQP'

[04:38] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/286282249 https://github.com/rakudo/rakudo/compare/e19b3409e857...a72214c4f160

[04:38] <buggable> [travis build above] ✓ All failures are due to: GitHub connectivity (1 failure).

[06:04] <[Tux]> This is Rakudo version 2017.09-372-ga72214c4f built on MoarVM version 2017.09.1-591-gf2deedfc

[06:04] <[Tux]> csv-ip5xs        1.214 -  1.377

[06:04] <[Tux]> test             9.800 - 10.478

[06:04] <[Tux]> test-t           3.215 -  3.428

[06:04] <[Tux]> csv-parser       0.887 -  0.964

[09:22] <Geth> ¦ nqp: 45cb3ee248 | pmurias++ | src/core/testing.nqp

[09:22] <Geth> ¦ nqp: [jvm] Workaround a try/CATCH bug in dies-ok

[09:22] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/45cb3ee248

[09:22] <Geth> ¦ nqp: 0ccdf2e535 | pmurias++ | src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/P6bigintInstance.java

[09:22] <Geth> ¦ nqp: [jvm] Throw an exception when unboxing a too big bignum to an int

[09:22] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/0ccdf2e535

[09:35] <travis-ci> NQP build failed. pmurias '[jvm] Throw an exception when unboxing a too big bignum to an int'

[09:35] <travis-ci> https://travis-ci.org/perl6/nqp/builds/286427600 https://github.com/perl6/nqp/compare/26abb152bbf3...0ccdf2e535e7

[10:06] <buggable> New CPAN upload: Config-1.2.2.tar.gz by TYIL https://cpan.metacpan.org/authors/id/T/TY/TYIL/Perl6/Config-1.2.2.tar.gz

[11:20] <timotimo> ===> Testing: cro:ver<0.7>

[11:20] <timotimo> WARNING: unhandled Failure detected in DESTROY. If you meant to ignore it, you can mark it as handled by calling .Bool, .so, .not, or .defined methods. The Failure was:

[11:20] <timotimo> No such symbol 'Cro::Tools::LinkTemplate::HTTPS'

[11:20] <timotimo> interesting

[11:59] <Zoffix> awhile back some user had similar issue in #perl6. It was a `require` setup (I think with a `try`) from which the unhandled Failure was popping up and I couldn't see where it'd be coming from (IIRC the module was loading properly or the failure from require was being handled)

[12:00] <jnthn> Yeah, it's RT'd

[12:00] <jnthn> I'm sure we're disarming any Failure return gives us back

[12:00] <jnthn> So I think it's some Rakudo bug. Not to mention that I'm sure that symbol does exist.

[12:01] <timotimo> it could very well be we're accidentally cloning (or something?) the failure inside the module loader?

[12:01] <jnthn> Dunno

[12:31] <Geth> ¦ nqp/master: 4 commits pushed by pmurias++

[12:31] <Geth> ¦ nqp/master: 1b836b1d60 | [js] Have separate methods for different bindpos variants

[12:31] <Geth> ¦ nqp/master: efa763bbb8 | [js] Fix cloning of a type object

[12:31] <Geth> ¦ nqp/master: e9e338b1a0 | [js] Make nqp::getuniname spit out <noncharacter-XXXX> and <control-XXXX>

[12:31] <Geth> ¦ nqp/master: ebd18b86e5 | Add extra multidim tests

[12:31] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/0ccdf2e535...ebd18b86e5

[12:37] <Zoffix> ZOFVM: Files=1277, Tests=152650, 178 wallclock secs (21.69 usr  3.68 sys + 3415.87 cusr 217.02 csys = 3658.26 CPU)

[12:38] <Geth> ¦ rakudo/nom: fbae69e2be | (Zoffix Znet)++ | src/core/traits.pm

[12:38] <Geth> ¦ rakudo/nom: Make `is default` on routines work earlier in setting

[12:38] <Geth> ¦ rakudo/nom:

[12:38] <Geth> ¦ rakudo/nom: Sometimes it's needed but the `does` op it's using is defined

[12:38] <Geth> ¦ rakudo/nom: late in the setting.

[12:38] <Geth> ¦ rakudo/nom:

[12:38] <Geth> ¦ rakudo/nom: Mix in the marker role directly using .^mixin instead.

[12:38] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fbae69e2be

[12:38] <Zoffix> timotimo: ^ that should make it work for you, if you still need it.

[12:39] <timotimo> that's simple enough. thanks!

[12:40] * Zoffix is failing to find any tests for this feature :(

[12:41] <Zoffix> ah, S12-methods/default-trait.t

[12:45] <travis-ci> NQP build failed. pmurias 'Add extra multidim tests'

[12:45] <travis-ci> https://travis-ci.org/perl6/nqp/builds/286493611 https://github.com/perl6/nqp/compare/0ccdf2e535e7...ebd18b86e58a

[13:03] <samcv> Zoffix, how would you feel about IO::Path.parent(2) or some number for how many parent directories to go up?

[13:04] <samcv> do you like that idea?

[13:06] <Geth> ¦ rakudo/nom: 714c188d4a | (Timo Paulssen)++ | src/core/native_array.pm

[13:06] <Geth> ¦ rakudo/nom: generalize constraint for append

[13:06] <Geth> ¦ rakudo/nom:

[13:06] <Geth> ¦ rakudo/nom: otherwise it'll only be called when an int64 array is

[13:06] <Geth> ¦ rakudo/nom: passed. This makes it splice 32bit, 16bit and 8bit

[13:06] <Geth> ¦ rakudo/nom: for basically free.

[13:06] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/714c188d4a

[13:06] <timotimo> spec tests were clean

[13:08] <Zoffix> samcv: is it different from IO::Path.add('../../') ?

[13:09] <samcv> well. that's really a unixism

[13:09] <Zoffix> Why?

[13:09] <samcv> well it's not as clean

[13:09] <samcv> you want the parent to 2 levels not just 1. what if you want the 5th parent

[13:09] <samcv> or want to do it programatically?

[13:09] <samcv> based on depth?

[13:10] <Zoffix> IO::Path.add('../' x $depth)

[13:11] <samcv> just because there's one way to possibly do it doesn't mean there shouldn't be another

[13:11] <samcv> i don't like the idea of having to manipulate the path myself

[13:11] <samcv> by multiplying strings

[13:12] <samcv> and if we want people to use .child, it seems to follow that having .parent and being able to do a certain number of parents would make sense

[13:12] <samcv> why even have parent at all if you can just do .add('../') ?

[13:13] <Zoffix> samcv: don't really care about it one way or another, but feels like a YAGNI: adding a million of options just because you thought of them. Perl's App::ZofCMS has this problem with its plugins and their docs are a mile long just because they have to document all of these options that ultimately make no difference

[13:13] <samcv> curious what other peoples thoughts on this are?

[13:15] <Zoffix> <Zoffix>  samcv: is it different from IO::Path.add('../../')

[13:15] <Zoffix> Yeah, it is.

[13:15] <Zoffix> m: .parent.parent.resolve.say with "foo".IO

[13:15] <camelia> rakudo-moar 714c18: OUTPUT: «"/home".IO␤»

[13:15] <Zoffix> m: .add('../../').resolve.say with "foo".IO

[13:15] <camelia> rakudo-moar 714c18: OUTPUT: «"/home/camelia/foo/../..".IO␤»

[13:15] <Zoffix> needs to be .parent.add('../' x $depth-1) to be the same

[13:16] <samcv> m: say $*CWD.parent.add('../')

[13:16] <camelia> rakudo-moar 714c18: OUTPUT: «"/home/../".IO␤»

[13:16] <Zoffix> Ah, not even then. Looks like .parent is not symlink safe, while .add is

[13:17] <Zoffix> m: my $p = "foo/bar/ber/meows".IO; my $depth = 3; $p .= parent xx $depth; say 4p

[13:17] <camelia> rakudo-moar 714c18: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Confused␤at <tmp>:1␤------> 3depth = 3; $p .= parent xx $depth; say 47⏏5p␤»

[13:17] <Zoffix> m: my $p = "foo/bar/ber/meows".IO; my $depth = 3; $p .= parent xx $depth; say $p

[13:17] <camelia> rakudo-moar 714c18: OUTPUT: «"foo".IO␤»

[13:18] <Zoffix> m: my $p = "foo/bar/ber/meows".IO; my $depth = 3; $p .= add('../') xx $depth; say $p

[13:18] <camelia> rakudo-moar 714c18: OUTPUT: «"foo/bar/ber/meows/../../../".IO␤»

[13:18] <Zoffix> samcv: well, you got the commit bit :) I have no opinion on this

[13:18] * Zoffix &

[13:18] <samcv> ok :)

[13:19] <samcv> was also asking if adding just an int argument was fine with you, since you had done work on the IO operations arguments as well

[13:19] <samcv> though i think .parent a number by itself not a named argument makes most sense

[13:20] <samcv> also this:

[13:20] <samcv> m: $*CWD.parent.add('../').absolute.say

[13:20] <camelia> rakudo-moar 714c18: OUTPUT: «/home/..␤»

[13:21] <samcv> so it seems to be different in general and i didn't know for sure about the symlink thing, but i had an inkling there was some difference

[13:33] <[Coke]> ff

[13:40] * [Coke] is using rakudo for some devops stuff at work and is happy.

[13:50] <pmurias> jnthn: is there anything besides BUILDALL on the jvm backend that might be affected by a change to BUILDALLPLAN?

[13:57] <timotimo> lizmat: would be interested to hear startup timings with my last few moarvm commits

[14:14] * Zoffix bumps

[14:15] <Zoffix> samcv: yeah, int argument sounds fine

[14:15] <AlexDaniel> :o even better startup times? :o :o

[14:15] <Zoffix> m: $*CWD.parent.add('../').resolve.absolute.say

[14:15] <camelia> rakudo-moar 714c18: OUTPUT: «/␤»

[14:15] <Zoffix> m: 'foo'.IO.parent.parent.say

[14:15] <camelia> rakudo-moar 714c18: OUTPUT: «"..".IO␤»

[14:16] <Zoffix> m: 'foo'.IO.parent.parent.resolve.say

[14:16] <camelia> rakudo-moar 714c18: OUTPUT: «"/home".IO␤»

[14:16] <Zoffix> m: 'foo'.IO.add('../..').resolve.say

[14:16] <camelia> rakudo-moar 714c18: OUTPUT: «"/home/camelia/foo/../..".IO␤»

[14:17] <Zoffix> Basically .parent just chops off the path to get its value, while the .add() version adds the ../ things, which will stay if they can't be resolved. Were `foo` a symlink to some other dir, the result .parent could be said to be "wrong", as the '../' things would lead up the original dir. But I think doing `cd ..` in the shell would have the behaviour like what `.parent` does, so it makes sense to have two

[14:17] <Zoffix> versions to do this

[14:22] <Zoffix> ZOFVM: Files=1277, Tests=152650, 153 wallclock secs (22.21 usr  3.38 sys + 3336.72 cusr 180.39 csys = 3542.70 CPU)

[14:22] <Zoffix> Felt like tests were flying through a lot faster (need to take care of the few tests that sit there and hog everything eventually...)

[14:22] <Zoffix> ZOFFLOP: t/spec/S17-procasync/kill.t

[14:23] <Geth> ¦ nqp: e9bca388a7 | (Zoffix Znet)++ | tools/build/MOAR_REVISION

[14:23] <Geth> ¦ nqp: Bump MoarVM

[14:23] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/e9bca388a7

[14:23] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.09.1-591-gf2deedf...2017.09.1-594-gb9d3f6d

[14:23] <Geth> ¦ rakudo/nom: a0f29e0dfa | (Zoffix Znet)++ | tools/build/NQP_REVISION

[14:23] <Geth> ¦ rakudo/nom: Bump NQP

[14:23] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a0f29e0dfa

[14:23] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.09-77-g26abb15...2017.09-84-ge9bca38

[14:25] <Zoffix> $ time ./perl6 -e '' real0m0.122s            $ time perl6 -e '' real0m0.146s   with ./perl6 being HEAD and perl6 being 2017.09-87-g6bdb2dd

[14:25] <Zoffix> m: say 146/122

[14:25] <camelia> rakudo-moar 714c18: OUTPUT: «1.196721␤»

[14:25] <Zoffix> sweet

[14:26] <buggable> New CPAN upload: TimeUnit-0.1.0.tar.gz by ATROXAPER https://cpan.metacpan.org/authors/id/A/AT/ATROXAPER/Perl6/TimeUnit-0.1.0.tar.gz

[14:31] <Zoffix> m: say 0.024*1277

[14:31] <camelia> rakudo-moar 714c18: OUTPUT: «30.648␤»

[14:31] <Zoffix> So that shaved off 30s off the spectest (were it run on 1 core)

[14:31] <Zoffix> off *stresstest

[14:38] <AlexDaniel> :o

[14:38] <timotimo> what did?

[14:38] <AlexDaniel> timo*++

[14:38] <timotimo> who, me?

[14:39] <Zoffix> Yeah :)

[14:39] <timotimo> whoa

[14:39] <Zoffix> 20% off startup

[14:39] <AlexDaniel> Plz more? :)

[14:39] <timotimo> it didn't make it much faster on my machine :(

[14:40] <timotimo> still 0.10s for every empty program

[14:40] <Zoffix> perl -e '' is 0.003 :o

[14:40] <timotimo> no way

[14:40] <Zoffix> On my box, yeah

[14:40] <timotimo> okay it goes down to 0.09 more than half the time now

[14:41] <Zoffix> on same box perl6 -e '' is 0.177s  this is 2017.09-223-gd565ded tho

[14:41] <AlexDaniel> It is, yeah

[14:41] <Zoffix> m: say .177/.003

[14:41] <camelia> rakudo-moar a0f29e: OUTPUT: «59␤»

[14:42] <timotimo> oh, sorry, i thought perl6 -e '' was 0.003 on your box

[14:42] <travis-ci> NQP build failed. Zoffix Znet 'Bump MoarVM'

[14:42] <travis-ci> https://travis-ci.org/perl6/nqp/builds/286545373 https://github.com/perl6/nqp/compare/ebd18b86e58a...e9bca388a765

[14:43] <timotimo> but it was perl5

[14:43] <AlexDaniel> At this point we should be comparing it with python maybe

[14:43] <Zoffix> time (for i in {1..85}; do perl -e ''; done) runs the same time as perl6 -e ''

[14:43] <Zoffix> :)

[14:44] <Zoffix> python takes .022s

[14:44] <timotimo> how much time is one-core-stresstest on that same box, Zoffix?

[14:45] <timotimo> 1277 seconds, is that what?

[14:45] <Zoffix> `time (for i in {1..9}; do python -c ''; done)` takes same time a `perl6 e ''`... So we're within an order of magnitude. Pretty good!

[14:45] <AlexDaniel-> yeah it's getting closer

[14:46] <AlexDaniel-> a few years ago it was unbearable

[14:46] <Zoffix> timotimo: dunno, I never ran one-core stresstest. 1277 is the number of files in the stresstest, multiplied by the number of miliseconds the HEAD shaves off compared to older perl6

[14:46] <Zoffix> off start time

[14:48] <timotimo> oh, ok

[14:48] <Zoffix> That was for Python 2.7.3 btw

[14:52] <travis-ci> Rakudo build passed. Zoffix Znet 'Make `is default` on routines work earlier in setting

[14:52] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/286496865 https://github.com/rakudo/rakudo/compare/a72214c4f160...fbae69e2be32

[14:52] <AlexDaniel-> hmmm. Here it went down from 0.161s to 0.156s

[14:53] <AlexDaniel-> just 3% or so but it adds up

[15:00] <DrForr> fg

[15:01] <Zoffix> bash: fg: current: no such job

[15:39] <AlexDaniel-> hmm, it's 0.140s now… nevermind

[15:39] <AlexDaniel-> I think I had some background crap running

[15:57] <timotimo> hum. my static js doesn't reach the browser for some reason

[15:57] <timotimo> oh, haha

[15:57] <timotimo> probably "cro trace"'s fault for trying to hexdump 1.2 megs of javasrcipt

[16:06] <buggable> New CPAN upload: TimeUnit-0.1.1.tar.gz by ATROXAPER https://cpan.metacpan.org/authors/id/A/AT/ATROXAPER/Perl6/TimeUnit-0.1.1.tar.gz

[16:09] <timotimo> huh. i start{} some stuff from the mainline of the main file but they only get run after i hit ctrl-c?

[16:51] <AlexDaniel-> timotimo: are you sure it's not output buffering?

[16:55] <travis-ci> Rakudo build passed. Timo Paulssen 'generalize constraint for append

[16:55] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/286508647 https://github.com/rakudo/rakudo/compare/fbae69e2be32...714c188d4aa0

[16:57] <AlexDaniel-> Zoffix: so what if I move al ｢testneeded｣ tickets to roast issues and we make a roast squashathon next month?

[16:57] <AlexDaniel-> does it make sense?

[16:59] <timotimo> https://imgur.com/CziybHs

[16:59] <timotimo> AlexDaniel-: it was in fact output buffering :)

[17:01] <Zoffix> AlexDaniel-: I'm a bad person to ask this, because I don't like most of the PRs for tests :}

[17:01] <Zoffix> buggable: zen TESTING IS AN ART!

[17:01] <buggable> Zoffix, "When an ordinary man attains knowledge, he is a sage; when a sage attains understanding, he is an ordinary man."

[17:02] <Zoffix> ZofBot: what about an ordinary woman?

[17:02] <ZofBot> Zoffix, d, and who wants to do them

[17:03] <Zoffix> ouch. Bad robot!

[17:03] <AlexDaniel-> hah

[17:03] <AlexDaniel-> so I couldn't sleep last night and was thinking about it

[17:03] <AlexDaniel-> so let's say we start moving RT testneeded tickets to roast github issues

[17:04] <AlexDaniel-> because, you know, squashathon and hacktoberfest and stuff, it's just so much easier this way

[17:05] <AlexDaniel-> problem is, some of these tickets should be resolved by tests in rakudo/t

[17:05] <AlexDaniel-> … so… at what point do we stop banging our heads against the wall and open up rakudo/issues on github?

[17:05] <Zoffix> another problem is some of them ain't even fixed.

[17:06] <Zoffix> Like the Duration.new(Inf) thing. The claimed fix just binds a Failure to a Rat attribute. Seems new behaviour is even worse.

[17:06] <AlexDaniel-> well, great, then I'll move it back to RT :'(

[17:07] <AlexDaniel-> I mean, look, I see no problem having to refer to tickets as RT #666 and GH #666

[17:07] <AlexDaniel-> so old tickets can stay there, I'm fine with that

[17:07] <Zoffix> and a third problem is you often need to read back like miles of text just to understand what exactly was wrong and how to properly cover it

[17:07] <AlexDaniel-> but it'd be so much easier…

[17:08] <Zoffix> Feels like we need some TESTNEEDED task force and people who like writing tests close those tickets in higher priority, rather than leaving them off as LHF for newcomers to hack on

[17:08] <AlexDaniel-> hmmm

[17:08] <Zoffix> I mean as a general thing, not as an argument against putting them for squashton

[17:09] <Zoffix> buggable: tag testneeded

[17:09] <buggable> Zoffix, There are 55 tickets tagged with TESTNEEDED; See http://fail.rakudo.party/t/TESTNEEDED for details

[17:09] * Zoffix puts money where the mouth is and goes to close a couple

[17:10] <AlexDaniel-> my problem right now is that RT makes it a nightmare for me

[17:10] <AlexDaniel-> I have to jump through all of these hoops just because it is RT

[17:11] <Zoffix> lizmat doesn't like RT either... Seems to me it's 2 against RT and no one actively objecting :)

[17:12] <Zoffix> objecting migration I mean

[17:12] <AlexDaniel-> and my proposed solution is really that simple – just *open* rakudo/issues and see how it goes. We already use “RT” prefix for tickets consistently, I see no problem whatsoever

[17:12] <AlexDaniel-> so I'm not proposing the massive migration just yet

[17:13] <pmurias> Zoffix: what do you want to migrate RT to?

[17:14] <Zoffix> pmurias: I have no opinion on this matter. I'm a silent-ish observer :)

[17:14] <Zoffix> AlexDaniel-: you got the keys to enable it tho, don't you?

[17:14] <AlexDaniel-> the keys were not given for that purpose

[17:14] <Zoffix> :)

[17:14] * Zoffix &

[17:18] <AlexDaniel-> lizmat: what do you think about it? ↑

[17:19] <AlexDaniel-> do we even have anybody who is against using some other issue tracker in parallel to RT?

[17:20] <AlexDaniel-> and by “anybody” I'm thinking someone who is relatively active. I touch RT every day and I'm so sick of it. If someone never has to interact with it and they're against the change, I couldn't care less.

[17:30] <Geth> ¦ roast: 6e6045b783 | (Zoffix Znet)++ | S12-meta/exporthow.t

[17:30] <Geth> ¦ roast: Test SUPERSEDE::class can be exported

[17:30] <Geth> ¦ roast:

[17:30] <Geth> ¦ roast: RT#132236: https://rt.perl.org/Ticket/Display.html?id=132236

[17:30] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/dd943eded83edb3753

[17:30] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/6e6045b783

[17:30] <synopsebot> RT#132236 [open]: https://rt.perl.org/Ticket/Display.html?id=132236 [REGRESSION] Meta object construction

[17:32] <Zoffix> Hm. RT#132083 is marked as resolved but R6 still shows it

[17:32] <synopsebot> RT#132083 [resolved]: https://rt.perl.org/Ticket/Display.html?id=132083 [REGRESSION] Broken math (-2147483648 != -2147483648)

[17:33] * Zoffix clicks the "Delete" button

[17:33] <[Coke]> I'm against a full scale migration. I'm fine with opening a second one and letting RT eventually run out of live tickets.

[17:34] <[Coke]> github issues ain't great, but it's not horrible.

[17:34] <gfldex> I strongly dislike RT but I do like to get e-mails when tickets I created are closed. So I'm leaning towards slow transition.

[17:35] <Zoffix> This is one of the examples I meant by how it's hard to know what to test for: https://rt.perl.org/Ticket/Display.html?id=131924#ticket-history

[17:35] <gfldex> however, I'm all for making work smoother for those who do close those tickes

[17:36] <Zoffix> Especially since precomp is involved and to verify my test covers the bug I have to do gymnastics with committable6 or build the buggy commit.

[17:47] <Geth> ¦ roast: 807ed8137f | (Zoffix Znet)++ | S32-io/dir.t

[17:47] <Geth> ¦ roast: Test concurrentyl using dir() works

[17:47] <Geth> ¦ roast:

[17:47] <Geth> ¦ roast: RT#129845: https://rt.perl.org/Ticket/Display.html?id=129845

[17:47] <Geth> ¦ roast: Rakudo fix: https://github.com/rakudo/rakudo/commit/231cb3f

[17:47] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/807ed8137f

[17:47] <synopsebot> RT#129845 [open]: https://rt.perl.org/Ticket/Display.html?id=129845 [TESTNEEDED] [CONC] `.dir` returns corrupted `IO::Path`s under concurrent load

[17:48] <Zoffix> umm

[17:48] <Zoffix> it's only ~.3s but I guess since it's just covering a non-dir-related bug...

[17:48] <Zoffix> .in 4hr move this to stresstest https://github.com/perl6/roast/commit/807ed8137f

[17:48] <yoleaux> Zoffix: I'll remind you at 21:48Z

[17:53] <timotimo> Zoffix: i've tried the "say 'a' a million times" thing with "say 1" instead - in order to not do the braid switching - and it seems to make barely any difference at all in performance

[17:54] <Zoffix> timotimo: ah, too bad then.

[17:54] <timotimo> ;(

[17:55] <timotimo> 5.37% time spent in or under find_symbol

[17:56] <timotimo> MATCH is responsible for 9.28% time but it also has 560k entries compared to 60k find_symbol

[17:56] <timotimo> visit_children from the optimizer also spends about 8.9% of the whole program time

[17:57] <timotimo> and 4.84% is under !alt

[17:57] <timotimo> !cursor_pass (which i believe is also responsible for calling action methods) has an inclusive time of 28%

[17:58] <timotimo> but funnily enough the first entry from Actions.nqp is at 8.17% inclusive (1.3% exclusive) time - it's term:sym<name>

[18:02] <Zoffix> With `echo -n` echoing 10000x of these lines and measuring with `time perl6 -c` I get: `1.say;` = 6.9s; `1;` = 3.5s; `;` = 0m0.730s

[18:02] <timotimo> i wonder if we have a "shortcut" for ; separated by whitespace

[18:03] <Zoffix> Ah prolly

[18:06] <AlexDaniel-> Zoffix: awwww I remember that ticket

[18:07] <AlexDaniel-> maybe I can find the one liner that reproduces the issue… let's see…

[18:07] <timotimo> only say(); over and over gets me to 4.37s (with say 1; it was 6.5s)

[18:08] <Zoffix> AlexDaniel-: what issue?

[18:08] <AlexDaniel-> Zoffix: RT #131924. Ah also, I don't think you have to care about precomp when using committable

[18:08] <synopsebot> RT#131924 [new]: https://rt.perl.org/Ticket/Display.html?id=131924 [REGRESSION] \n\r and string concatenation improvements

[18:08] <Zoffix> Ah

[18:08] <AlexDaniel-> Zoffix: I never did and it always works, I still don't know why

[18:08] <AlexDaniel-> I guess precomp files are different depending on what version you use? No idea actually…

[18:09] <Zoffix> AlexDaniel-: I meant the bug manifests itself only in precomp

[18:09] <timotimo> i get 4.06s with code like "sub boop { say 'a' };" and then only "boop;" lines

[18:09] <AlexDaniel-> hmmmmmm oh.

[18:09] <timotimo> also: it's somewhat hilarious to run a file that consists only of "boop;" lines without the declaration

[18:10] <timotimo> https://imgur.com/ebkdPZQ

[18:11] <AlexDaniel-> pwahahahah :D

[18:11] <masak> next up: compiler error art

[18:11] <Zoffix> timotimo: what did you use to get your timings?

[18:11] <timotimo> "time"

[18:11] <timotimo> the time that fish gives me

[18:12] <Zoffix> I meant for "MATCH is responsible for 9.28% time"

[18:12] <timotimo> oh, that was --profile-compile

[18:12] <Zoffix> Ah. I get 0.26%

[18:12] <Zoffix> oh nm, there's more than one entry

[18:12] <Zoffix> (I'm painfully navigating the callgraph :P)

[18:13] <timotimo> yeah, you should use the routines tab instead and sort by "exclusive" time :)

[18:14] <Zoffix> ok :)

[18:14] <AlexDaniel-> c: 5363a0742d9e^,5363a0742d9e my $a = "a" ~ "\n\r"; my $b = "\n\r"; say ($a ~ $b).chars

[18:14] <committable6> AlexDaniel-, ¦5363a0742d9e^: «Cannot find this revision (did you mean “e73ff23”?)» ¦5363a07: «Cannot find this revision (did you mean “e192924”?)»

[18:14] <AlexDaniel-> :|

[18:14] <AlexDaniel-> that's a moar sha

[18:15] <AlexDaniel-> c: 2017.08~100,HEAD my $a = "a" ~ "\n\r"; my $b = "\n\r"; say ($a ~ $b).chars

[18:15] <committable6> AlexDaniel-, ¦2017.08~100,HEAD(a0f29e0): «4»

[18:15] <AlexDaniel-> c: 2017.08~50,HEAD my $a = "a" ~ "\n\r"; my $b = "\n\r"; say ($a ~ $b).chars

[18:15] <committable6> AlexDaniel-, ¦2017.08~50,HEAD(a0f29e0): «4»

[18:15] <AlexDaniel-> c: 2017.08~200,HEAD my $a = "a" ~ "\n\r"; my $b = "\n\r"; say ($a ~ $b).chars

[18:15] <committable6> AlexDaniel-, ¦2017.08~200,HEAD(a0f29e0): «4»

[18:15] * AlexDaniel- cries

[18:15] <Zoffix> c: releases my $a = "a" ~ "\n\r"; my $b = "\n\r"; say ($a ~ $b).chars

[18:15] <committable6> Zoffix, ¦releases (23 commits): «4»

[18:15] <AlexDaniel-> c: b81597bd,HEAD my $a = "a" ~ "\n\r"; my $b = "\n\r"; say ($a ~ $b).chars

[18:15] <committable6> AlexDaniel-, ¦b81597b,HEAD(a0f29e0): «4»

[18:15] <jnthn> huh, surely that should be 3...

[18:16] <timotimo> is that what you mean when you say \r gets turned into \n?

[18:16] <timotimo> jnthn: did you see it's \n\r rather than \r\n?

[18:16] <jnthn> Yes, but

[18:16] <Zoffix> But when you concat you get \r\n in the middle

[18:16] <timotimo> yeah

[18:16] <AlexDaniel-> a \n \r\n \r

[18:17] <jnthn> Oh!

[18:17] <jnthn> I didn't see the a at the start

[18:17] <Zoffix> ?

[18:17] <Zoffix> Ah :)

[18:17] <jnthn> So yeah, 4 is right

[18:17] <AlexDaniel-> ok that's not the right snippet I think

[18:17] <Zoffix> AlexDaniel-: doesn't the fix say "this only was problematic with precompilation"?

[18:18] * jnthn blames post-dinner carb crash :)

[18:18] * timotimo is pre-dinner-grocery-shopping even :|

[18:18] <AlexDaniel-> Zoffix: of course it does, but I'm blind

[18:18] <Zoffix> What does empty string do in grammar? https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Grammar.nqp#L1237

[18:19] <Zoffix> What does <!!{}> do in gammar?

[18:19] <tyil> confuse people

[18:19] <jnthn> timotimo: Ah, got delivery :)

[18:19] <jnthn> Lazy Wednesday :)

[18:19] <timotimo> not a bad idea in itself

[18:20] <jnthn> Zoffix: Note that it's a rule

[18:20] <Zoffix> Ah. OK. What about <!!{}?

[18:20] <jnthn> Zoffix: Everything before that point is code decls and adverbs, so don't trigger sigspace. The '' is to force it

[18:20] <timotimo> "4 years ago" :D

[18:21] <Zoffix> `<!!{ $*LANG := $*LEAF := $/.clone_braid_from(self); 1 }>`

[18:21] <timotimo> indeed, the commit that introduced that line was all about turning tokens into rules

[18:21] <timotimo> https://github.com/rakudo/rakudo/commit/37acfa1d76ab7bf00716b8597aa81ea783c61499

[18:21] <jnthn> Oh, wich something in it

[18:21] <jnthn> So a negative lookahed is not an LTM terminator

[18:22] <jnthn> While a positive lookahead or other code block is

[18:22] <timotimo> what a nasty trick :)

[18:22] <jnthn> So that's a sneaky way to run some code without it having any implication for LTM

[18:22] <Zoffix> Oh lol :)

[18:22] <jnthn> Yeah, :my $ = ...the code...; is the other trick :P

[18:22] <AlexDaniel-> what about just {} ?

[18:23] <timotimo> i wonder how completely that's going to break a future refactoring that passes LTM results down into recursive rules etc

[18:23] <timotimo> well, { } immediately terminates LTM

[18:23] <jnthn> AlexDaniel-: {} is an LTM terminator

[18:29] <AlexDaniel-> e: run ‘wget’, ‘https://gist.githubusercontent.com/AlexDaniel/b18897504955df0e64343904b0dcba59/raw/df8ca79ceed5b6d745d383b970139e74b477ac6c/Header.pm6’, ‘-O’, ‘sandbox/Header.pm6’

[18:29] <evalable6> AlexDaniel-, rakudo-moar a0f29e0df: OUTPUT: «--2017-10-11 20:29:15--  https://gist.githubusercontent.com/AlexDaniel/b18897504955df0e643…»

[18:29] <evalable6> AlexDaniel-, Full output: https://gist.github.com/9a7c07b87ff102c5f65fb528fd1460d4

[18:29] <AlexDaniel-> e: run ‘wget’, ‘https://gist.githubusercontent.com/AlexDaniel/b18897504955df0e64343904b0dcba59/raw/df8ca79ceed5b6d745d383b970139e74b477ac6c/Simple.pm6’, ‘-O’, ‘sandbox/Simple.pm6’

[18:29] <evalable6> AlexDaniel-, rakudo-moar a0f29e0df: OUTPUT: «--2017-10-11 20:29:40--  https://gist.githubusercontent.com/AlexDaniel/b18897504955df0e643…»

[18:29] <evalable6> AlexDaniel-, Full output: https://gist.github.com/3aa1874910e113456c986ca97fa738d8

[18:30] <AlexDaniel-> c: HEAD https://gist.githubusercontent.com/AlexDaniel/b18897504955df0e64343904b0dcba59/raw/9b2404da03d0f822cf7ba4996a56b3b1d1a826de/basic.p6

[18:30] <committable6> AlexDaniel-, Successfully fetched the code from the provided URL.

[18:30] <committable6> AlexDaniel-, ¦HEAD(a0f29e0): «Default constructor for 'Simple' only takes named arguments␤  in block <unit> at /tmp/fdlvKoHhpc line 7␤ «exit code = 1»»

[18:30] <AlexDaniel-> :|

[18:31] <AlexDaniel-> oh the test file is wrong

[18:31] <AlexDaniel-> actually, I really don't know what this whole thing is about anymore… nevermind I guess

[18:32] <AlexDaniel-> c: HEAD use lib ‘sandbox’; use Simple; say buggy-str

[18:32] <committable6> AlexDaniel-, ¦HEAD(a0f29e0): «: ␤␤»

[18:33] <AlexDaniel-> c: HEAD use lib ‘sandbox’; use Simple; say buggy-str eq “: \n\r\n\r”

[18:33] <committable6> AlexDaniel-, ¦HEAD(a0f29e0): «04===SORRY!04=== Error while compiling /tmp/59bVh9RBUf␤Undeclared routine:␤    eq used at line 1␤ «exit code = 1»»

[18:33] <AlexDaniel-> c: HEAD use lib ‘sandbox’; use Simple; say buggy-str() eq “: \n\r\n\r”

[18:33] <committable6> AlexDaniel-, ¦HEAD(a0f29e0): «True»

[18:33] <AlexDaniel-> c: b81597bd867a use lib ‘sandbox’; use Simple; say buggy-str() eq “: \n\r\n\r”

[18:33] <committable6> AlexDaniel-, ¦b81597b: «False»

[18:33] <AlexDaniel-> \o/ \o/ \o/ \o/

[18:33] <AlexDaniel-> Zoffix: yaayayay!!

[18:34] <AlexDaniel-> c: b81597bd867a use lib ‘sandbox’; use Simple; my $x = buggy-str(); say $x; say $x eq “: \n\r\n\r”

[18:34] <committable6> AlexDaniel-, ¦b81597b: «: ␤␤␤False»

[18:34] <AlexDaniel-> ok that doesn't help

[18:34] <AlexDaniel-> but yeah, that *is* the test case

[18:35] <Zoffix> AlexDaniel-: what's "Simple"?

[18:35] <AlexDaniel-> Zoffix: unit class Simple; sub buggy-str is export { “: {‘’}\n\r” ~ “\n\r” }

[18:36] <Zoffix> .oO( fetch all the files from multi-file gist )

[18:36] <AlexDaniel-> you don't need one of the files!

[18:37] <Zoffix> But you got Simple.pm6 on the bot box, dinnitu?

[18:37] <AlexDaniel-> Zoffix: I used ｢run ‘wget’, …｣ above to get it, yeah

[18:37] <Zoffix> AlexDaniel-: is roast/t/spec/packages/Test/Util.pm somewhere on the box?

[18:37] <AlexDaniel-> Zoffix: I've left a comment here: https://rt.perl.org/Ticket/Display.html?id=131924#txn-1498385

[18:39] <AlexDaniel-> e: run ‘git’, ‘clone’, ‘https://github.com/perl6/roast.git’, ‘sandbox/roast’

[18:39] <Zoffix> e: run «wget https://raw.githubusercontent.com/perl6/roast/master/packages/Test/Util.pm -O sandbox/Test/Util.pm»

[18:39] <evalable6> AlexDaniel-, rakudo-moar a0f29e0df: OUTPUT: «Cloning into 'sandbox/roast'...»

[18:39] <evalable6> Zoffix, rakudo-moar a0f29e0df: OUTPUT: «(exit code 1) sandbox/Test/Util.pm: No such file or directory␤The spawned command 'wget' exited unsuccessfully (exit code: 1)␤  in block <unit> at /tmp/Rl5DqFmior line 1␤»

[18:39] <AlexDaniel-> will probably not make it in 10 seconds though

[18:39] <Zoffix> e: use lib <sandbox/roast/packages/>; use Test::Util; say make-temp-dir

[18:39] <evalable6> Zoffix, rakudo-moar a0f29e0df: OUTPUT: «"/tmp/perl6_roast_4uf4VGBnNR_line1_0_5513874120385511507747188".IO»

[18:39] <Zoffix> \o/

[18:39] <Zoffix> neat

[18:40] <AlexDaniel-> but you have ssh access to it, you can do whatever you want

[18:42] <AlexDaniel-> Zoffix: fwiw I think your last wget failed because sandbox/Test directory does not exist

[18:42] <Zoffix> mhm

[18:42] <AlexDaniel-> e: mkdir ‘sandbox/Test’; run «wget https://raw.githubusercontent.com/perl6/roast/master/packages/Test/Util.pm -O sandbox/Test/Util.pm»

[18:42] <evalable6> AlexDaniel-, rakudo-moar a0f29e0df: OUTPUT: «--2017-10-11 20:42:55--  https://raw.githubusercontent.com/perl6/roast/master/packages/Tes…»

[18:42] <evalable6> AlexDaniel-, Full output: https://gist.github.com/bb2582feeb6b93d9bec37c94200968fc

[18:43] <AlexDaniel-> yep

[18:56] <Geth> ¦ roast: 28481cea18 | (Zoffix Znet)++ | S10-packages/precompilation.t

[18:56] <Geth> ¦ roast: No funny business in precomped string strands

[18:56] <Geth> ¦ roast:

[18:56] <Geth> ¦ roast: RT#131924: https://rt.perl.org/Ticket/Display.html?id=131924

[18:56] <Geth> ¦ roast: MoarVM fix: https://github.com/MoarVM/MoarVM/commit/5363a0742

[18:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/28481cea18

[18:56] <synopsebot> RT#131924 [new]: https://rt.perl.org/Ticket/Display.html?id=131924 [REGRESSION] \n\r and string concatenation improvements

[18:58] <AlexDaniel-> Zoffix++

[18:59] <AlexDaniel-> Zoffix: any other TESTNEEDED tickets you have problems with?

[19:02] <Zoffix> not yet

[19:07] <AlexDaniel-> ugexe++

[19:08] <Zoffix> ?

[19:08] <Zoffix> What happened?

[19:08] * Zoffix is news-deprived

[19:08] <Zoffix> Just learned that DDG has !p6mod bang

[19:08] <AlexDaniel-> releasable6: status

[19:08] <releasable6> AlexDaniel-, Next release in 9 days and ≈23 hours. 1 blocker. Changelog for this release was not started yet

[19:08] <releasable6> AlexDaniel-, Details: https://gist.github.com/4ddde42705e2c6114d9bc62d5b3f7a37

[19:09] <AlexDaniel-> Zoffix: he submitted that ticket ↑

[19:10] <Zoffix> ah

[19:11] <Zoffix> So Failure.self blows up the Failures and I thought it was awesome at the time, but I find myself needing to comment why the hell I'm adding .self into places :)

[19:12] <Zoffix> Well, I guess it's still better than not having that option, but the method doesn't make the code self-describing

[19:13] <Zoffix> ZofBot: .if-this-is-a-Failure-then-blow-it-up-otherwise-gimme-self

[19:13] <ZofBot> Zoffix, anyway, this is not something we can close atm

[19:14] <AlexDaniel-> “method self”

[19:14] <AlexDaniel-> “Defined as:”

[19:14] <AlexDaniel-> “method exception(Failure:D: --> Failure:D)”

[19:14] <AlexDaniel-> huh?

[19:14] <AlexDaniel-> https://docs.perl6.org/type/Failure#method_self

[19:15] <Zoffix> hm... t/spec/S32-io/dir.t flopped.. The new test that tests dir() does not produce crap results under load

[19:15] <Zoffix> AlexDaniel-: fixed

[19:15] <AlexDaniel-> was just about to push… :)

[19:15] <Zoffix> too slow

[19:16] <Geth> ¦ rakudo/nom: 25c87d0d1c | (Zoffix Znet)++ | src/core/Duration.pm

[19:16] <Geth> ¦ rakudo/nom: Blow up Failures in Duration.new

[19:16] <Geth> ¦ rakudo/nom:

[19:16] <Geth> ¦ rakudo/nom: Otherwise we end up binding it to Rat attribute and it explodes

[19:16] <Geth> ¦ rakudo/nom: only later, producing really confusing errors

[19:16] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/25c87d0d1c

[19:18] <travis-ci> Rakudo build passed. Zoffix Znet 'Bump NQP'

[19:18] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/286545369 https://github.com/rakudo/rakudo/compare/714c188d4aa0...a0f29e0dfad7

[19:19] <Zoffix> hm hm hm

[19:21] * Zoffix ponders Duration.new with zero-denominator Rats

[19:22] <Zoffix> I guess it's fine to leave it in. We'll just need to improve the div-by-zero error to be more useful so when a zero-denomator Rat explodes somewhere, the error doesn't talk about "using `div`"

[19:23] <Zoffix> m: say [ $_ ≤ $_ or $_ ≥ $_ ] with Duration.new(0/0)

[19:23] <camelia> rakudo-moar a0f29e: OUTPUT: «[False]␤»

[19:23] <Zoffix> :)

[19:23] <Zoffix> m: say Duration.new(0/0)

[19:23] <camelia> rakudo-moar a0f29e: OUTPUT: «Attempt to divide by zero using div␤  in block <unit> at <tmp> line 1␤␤»

[19:23] <Zoffix> Yeah, more like attempt to give an unhelpful error

[19:24] <Zoffix> m: my $d = Duration.new(0/0); ␤␤␤␤␤ say "Computing";␤␤my $d2 = $d + 42; say "Done computing";␤␤␤␤␤ say $d2

[19:24] <camelia> rakudo-moar a0f29e: OUTPUT: «Computing␤Attempt to divide by zero using div␤  in block <unit> at <tmp> line 13␤␤Done computing␤»

[19:25] <Zoffix> m: for $*OUT, $*ERR -> { .open: .path, :w, :0buffer };  my $d = Duration.new(0/0); ␤␤␤␤␤ say "Computing";␤␤my $d2 = $d + 42; say "Done computing";␤␤␤␤␤ say $d2

[19:25] <camelia> rakudo-moar a0f29e: OUTPUT: «Too many positionals passed; expected 0 arguments but got 1␤  in block <unit> at <tmp> line 1␤␤»

[19:26] <Zoffix> m: for $*OUT, $*ERR { .open: .path, :w, :0buffer };  my $d = Duration.new(0/0); ␤␤␤␤␤ say "Computing";␤␤my $d2 = $d + 42; say "Done computing";␤␤␤␤␤ say $d2

[19:26] <camelia> rakudo-moar a0f29e: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»

[19:26] <Zoffix> Fine, be that way!

[19:26] <Zoffix> m: my $d = Duration.new(0/0); ␤␤␤␤␤ note "Computing";␤␤my $d2 = $d + 42; note "Done computing";␤␤␤␤␤ note $d2

[19:26] <camelia> rakudo-moar a0f29e: OUTPUT: «Computing␤Done computing␤Attempt to divide by zero using div␤  in block <unit> at <tmp> line 13␤␤»

[19:27] <Zoffix> oh right, .open doesn't take a path, duh

[19:29] <pmurias> If I want to add a test to roast for a yet unfixed bug I should fudge it?

[19:29] <Zoffix> Yes

[19:34] <Geth> ¦ roast: a821b71c7b | (Zoffix Znet)++ | S32-temporal/DateTime-Instant-Duration.t

[19:34] <Geth> ¦ roast: Test Duration.new with iffy values

[19:34] <Geth> ¦ roast:

[19:34] <Geth> ¦ roast: RT#127341: https://rt.perl.org/Ticket/Display.html?id=127341

[19:34] <Geth> ¦ roast:

[19:34] <Geth> ¦ roast: - Nums representable as zero-denominator Rat work

[19:34] <Geth> ¦ roast: - Wrong type of arg throws

[19:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a821b71c7b

[19:34] <synopsebot> RT#127341 [open]: https://rt.perl.org/Ticket/Display.html?id=127341 [LTA] error message mentions $!tai ( Duration.new(∞) )

[19:37] <Geth> ¦ rakudo/nom: 5d3ebc09ba | (Zoffix Znet)++ | t/05-messages/01-errors.t

[19:37] <Geth> ¦ rakudo/nom: Test Duration.new with bad args does not mention guts

[19:37] <Geth> ¦ rakudo/nom:

[19:37] <Geth> ¦ rakudo/nom: RT#127341: https://rt.perl.org/Ticket/Display.html?id=127341

[19:37] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5d3ebc09ba

[19:44] <Geth> ¦ nqp: usev6++ created pull request #373: [jvm] Don't wait for child when program ends

[19:44] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/373

[20:19] <AlexDaniel-> .tell jnthn Can we open rakudo/issues on github? See https://irclog.perlgeek.de/perl6-dev/2017-10-11#i_15289848 and the start of the discussion on https://irclog.perlgeek.de/perl6-dev/2017-10-11#i_15289680

[20:19] <yoleaux> AlexDaniel-: I'll pass your message to jnthn.

[20:21] <Geth> ¦ nqp/jvm_killprocasync: c5f4c14055 | usev6++ | 2 files

[20:21] <Geth> ¦ nqp/jvm_killprocasync: [jvm] Support signals 1, 9, 15 for killprocasync

[20:21] <Geth> ¦ nqp/jvm_killprocasync:

[20:21] <Geth> ¦ nqp/jvm_killprocasync: Since SIGHUP (1) is the default signal used in Rakudo when calling

[20:21] <Geth> ¦ nqp/jvm_killprocasync: nqp::killprocasync we have to cheat and pretend we got a SIGTERM.

[20:21] <Geth> ¦ nqp/jvm_killprocasync:

[20:21] <Geth> ¦ nqp/jvm_killprocasync: The only other signal supported on the JVM is SIGKILL (used under

[20:21] <Geth> ¦ nqp/jvm_killprocasync: the hood by destroyForcibly). For all remaining signals we throw an

[20:21] <Geth> ¦ nqp/jvm_killprocasync: Exception.

[20:21] <Geth> ¦ nqp/jvm_killprocasync: review: https://github.com/perl6/nqp/commit/c5f4c14055

[20:35] <bartolin> AlexDaniel-: one thought that crossed my mind was that it's somewhat difficult for non-insiders to choose the right place to open an issue: roast, rakudo, nqp, doc, moarvm ... IMHO it would be nice to have one place where different types of new issues are accepted (like RT was before).

[20:36] <bartolin> AlexDaniel-: maybe something like https://github.com/google/github-issue-mover can be used to move issues to the appropriate repo (if needed). (I haven't tested that issue mover, but maybe we can find a good tool for something like that.)

[20:38] <bartolin> AlexDaniel-: all in all I'd be fine with using github issues for new bug reports

[20:38] <AlexDaniel-> bartolin: is it really that big of a problem for non-insiders? There are only two choices: rakudo and doc

[20:39] <AlexDaniel-> moar and nqp problems are still rakudo issues and we want to have a ticket for that anyway, I think

[20:43] <bartolin> well, it wasn't meant as an objection. I just thought about it when you talked about making rt tickets to roast issues.

[20:43] <AlexDaniel-> right

[20:46] <pmurias> bartolin: the BUILDPLAN changes are causing a test failure on the JVM backend, but I can't figure out why

[20:49] <bartolin> pmurias: the failure in t/nqp/060-bigint.t ?

[20:49] * bartolin builds a fresh nqp

[20:55] <pmurias> bartolin: yep

[21:18] <Geth> ¦ roast: 906d96ede1 | (Zoffix Znet)++ | S32-str/Collation.t

[21:18] <Geth> ¦ roast: Add "v" to "v6.d" to avoid potential grep missage

[21:18] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/906d96ede1

[21:18] <Zoffix> # TODO add test with "\c[woman facepalming]", "\c[man facepalming]"

[21:18] <Zoffix> Test for what? Any idea?

[21:18] <Zoffix> bottom of S32-str/Collation.t

[21:21] <Geth> ¦ roast: 5091bdd995 | (Zoffix Znet)++ | S32-str/Collation.t

[21:21] <Geth> ¦ roast: Test collation with 'A' vs 'a'

[21:21] <Geth> ¦ roast:

[21:21] <Geth> ¦ roast: RT#132216: https://rt.perl.org/Ticket/Display.html?id=132216

[21:21] <Geth> ¦ roast: MoarVM fix: https://github.com/MoarVM/MoarVM/commit/e9d331d4

[21:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/5091bdd995

[21:21] <synopsebot> RT#132216 [new]: https://rt.perl.org/Ticket/Display.html?id=132216 [UNI] [TESTNEEDED] 'a' coll 'A" not Same but More with disabled tertiary and primary levels

[21:21] <Geth> ¦ roast: 47a21ea017 | (Zoffix Znet)++ | S32-str/Collation.t

[21:21] <Geth> ¦ roast: Remove debug output from TAP

[21:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/47a21ea017

[21:22] <AlexDaniel-> “Now, GitHub will help potential first-time contributors discover issues labeled with ｢help wanted｣ or ｢good first issue｣”

[21:23] <AlexDaniel-> three word tag… awesome

[21:24] <AlexDaniel-> now what, mark issues with three tags at the same time? /o\ ｢LHF｣ ｢Hacktoberfest｣ ｢good first issue｣

[21:25] <teatime> please tell me there is literally one called [THREE WORD TAG]

[21:25] <teatime> if there is, Zoffix made it.  I am sure.

[21:25] * AlexDaniel- doesn't get the joke

[21:28] <Geth> ¦ roast: 061b040e2b | (Zoffix Znet)++ | 2 files

[21:28] <Geth> ¦ roast: Move dir() stress test into stresstest

[21:28] <Geth> ¦ roast:

[21:28] <Geth> ¦ roast: Also bump number of iterations

[21:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/061b040e2b

[21:28] <Geth> ¦ rakudo/nom: de564a51b8 | (Zoffix Znet)++ | t/spectest.data

[21:28] <Geth> ¦ rakudo/nom: Add S32-io/dir-stress.t to list of test files to run

[21:28] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/de564a51b8

[21:31] <teatime> AlexDaniel-: Three Word Tag is a Three Word Tag, like TLA

[21:31] <teatime> (Three Letter Acronyum)

[21:31] <AlexDaniel-> ah

[21:31] <Zoffix> Some of the fudges in S32-io/dir.t look bogus.... "dirname is not yet absolute RT #124786" It's not meant to be. "dir() returns IO::Local RT #124785" we ain't got an IO::Local

[21:31] <synopsebot> RT#124786 [new]: https://rt.perl.org/Ticket/Display.html?id=124786 [IO] S32-io/dir.t line:18 reason: 'dirname is not yet absolute'

[21:31] <synopsebot> RT#124785 [new]: https://rt.perl.org/Ticket/Display.html?id=124785 [IO] S32-io/dir.t line:16 reason: 'entries are still IO::Path'

[21:32] <AlexDaniel-> like YABA…

[21:34] <Geth> ¦ roast: 73cb9e7ace | (Zoffix Znet)++ | S32-io/dir.t

[21:34] <Geth> ¦ roast: Remove/Unfudge test for IO::Local

[21:34] <Geth> ¦ roast:

[21:34] <Geth> ¦ roast: We don't have this type no more.

[21:34] <Geth> ¦ roast: Closes Rt#124785: https://rt.perl.org/Ticket/Display.html?id=124785

[21:34] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/73cb9e7ace

[21:35] <Zoffix> m: dir.head.say

[21:35] <camelia> rakudo-moar 5d3ebc: OUTPUT: «".cpanm".IO␤»

[21:35] <Zoffix> ... the test looks for $*CWD :S

[21:36] <Zoffix> Ah, .dirname ok

[21:47] <Geth> ¦ roast: 66fb7a1a3b | (Zoffix Znet)++ | S32-io/dir.t

[21:47] <Geth> ¦ roast: Rewrite bogus-ish dir.head.dirname test

[21:47] <Geth> ¦ roast:

[21:47] <Geth> ¦ roast: The routine returns IO::Path objects which are composed of $!CWD

[21:47] <Geth> ¦ roast: and $!path. These objects can be made cheaper by setting $!CWD to

[21:47] <Geth> ¦ roast: the dir being dir()ed and $!path to the found stuff--without having

[21:47] <Geth> ¦ roast: to resolve anything. For this reason, it doesn't make much sense

[21:47] <Geth> ¦ roast: to require .dirname to be set to absolute paths.

[21:47] <Geth> ¦ roast:

[21:47] <Geth> ¦ roast: Change the test to instead test that the generated IO::Paths actually

[21:47] <Geth> ¦ roast: point to proper filesystem entities.

[21:47] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/66fb7a1a3b

[21:48] <bartolin> pmurias: hmm, I don't think the nqp failure was caused by the BUILDPLAN changes. I reverted the commit from lizmat++ and still got that error. but if I change this line with the next one, all tests are clean: https://github.com/perl6/nqp/blob/e9bca388a7655b9cee0b4477eaccc241y4131b743/src/vm/jvm/runtime/org/perl6/nqp/sixmodel/reprs/P6bigintInstance.java#L10

[21:48] <yoleaux> Zoffix: move this to stresstest https://github.com/perl6/roast/commit/807ed8137f

[21:49] <Zoffix> yoleaux: just did it bruh

[21:50] <Zoffix> oh haha

[21:50] <Zoffix> m: IO::Local.new

[21:50] <camelia> rakudo-moar 5d3ebc: OUTPUT: «IO::Local is disallowed in restricted setting␤  in sub restricted at src/RESTRICTED.setting line 1␤  in method new at src/RESTRICTED.setting line 32␤  in block <unit> at <tmp> line 1␤␤»

[21:58] <bartolin> pmurias: I don't understand why that makes a difference, but when I printed 'field' around here I got 'private static final BigInteger org.perl6.nqp.sixmodel.reprs.P6bigintInstance.SMALLEST_UNBOXABLE': https://github.com/perl6/nqp/blob/e9bca388a7655b9cee0b4477eaccc2414131b743/src/vm/jvm/runtime/org/perl6/nqp/runtime/Ops.java#L2778

[22:07] <Zoffix> ZOFLOP: t/spec/S17-supply/supplier-preserving.t

[22:07] <Zoffix> Seems only one test in the file " No races in Supplier::Preserving".. and the flop suggests there might be

[22:07] <Zoffix> Oh

[22:07] <Zoffix> Non-zero wait status: 11

[22:07] <Zoffix> Parse errors: Bad plan.  You planned 1 tests but ran 0.

[22:07] <Zoffix> So it was a SEGV. No idea why

[22:08] <jnthn> :S

[22:08] <yoleaux> 20:19Z <AlexDaniel-> jnthn: Can we open rakudo/issues on github? See https://irclog.perlgeek.de/perl6-dev/2017-10-11#i_15289848 and the start of the discussion on https://irclog.perlgeek.de/perl6-dev/2017-10-11#i_15289680

[22:08] <Geth> ¦ rakudo/nom: 50a674346b | (Zoffix Znet)++ | src/RESTRICTED.setting

[22:08] <Geth> ¦ rakudo/nom: Remove trailing whitespace

[22:08] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/50a674346b

[22:08] <Geth> ¦ rakudo/nom: 4b8a0ef651 | (Zoffix Znet)++ | src/RESTRICTED.setting

[22:08] <Geth> ¦ rakudo/nom: Remove classes we no longer have in core

[22:08] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4b8a0ef651

[22:09] <jnthn> Zoffix: I fixed a couple of SEGV sources yesterday; dunno if the revision files were bumped since

[22:09] <Zoffix> Yeah, they were.

[22:10] <jnthn> Well, guess we know 2 bugs it isn't, at least...

[22:10] <Zoffix> :)

[22:11] <Zoffix> FWIW, reproed with `while t/fudgeandrun t/spec/S17-supply/supplier-preserving.t; do true; done` on about 10th run

[22:11] <Zoffix> No idea how to debug SEGVs; maybe dogbert2 will be able to offer his expertise

[22:11] <MasterDuke> jnthn: any idea what could cause multis to always go through find_best_dispatchee?

[22:11] <jnthn> MasterDuke: The result not being cacheable

[22:12] <MasterDuke> and why might that be the case? too many arguments to the method?

[22:12] <jnthn> That can be because of a where clause, signature unpack, or because it was called with flattenned args

[22:13] <jnthn> May be other reasons but I can't think of them off hand

[22:13] <jnthn> Pretty sure the "too many arguments" thing can't happen any more

[22:13] <Zoffix> Filed SEGV as https://rt.perl.org/Ticket/Display.html?id=132273

[22:13] <jnthn> (The old multi cache had a fixed limit, I think I elimianted it)

[22:14] <timotimo> i wonder if reverting my recent commits helps that bug any?

[22:14] <Zoffix> I'm on HEAD

[22:14] <MasterDuke> hm, this is INTERPOLATE after i broke it out into `proto (|), (Iterable:D \var, ...), (Callable:D \var, ...), (Mu:D \var, ...), (Mu:U \var, ...)`

[22:14] <Zoffix> Oh reverting..

[22:14] <Zoffix> No idea

[22:14] <MasterDuke> and i don't believe it's ever called with flattened args

[22:16] <jnthn> MasterDuke: Hmm, then not immediately sure, but I'd start by looking at if add_to_cache is being called for that multi, and if so, would look in MVMMultiCache.c or whatever it's called

[22:17] <MasterDuke> will do, thanks

[22:17] <MasterDuke> timotimo: i've seen that test flop before

[22:18] <MasterDuke> add_to_cache is being called the exact same number of times as find_best_dispatchee

[22:19] <MasterDuke> now off to see if there's anything interesting in MVMMultiCache.c...

[22:27] <Geth> ¦ roast: 30e9d1624e | (Zoffix Znet)++ | fudgeandrun

[22:27] <Geth> ¦ roast: Propagate exit code

[22:27] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/30e9d1624e

[22:30] <Zoffix> :| github changed again

[22:30] <Zoffix> ZofBot: I don't like things that are different!

[22:30] <ZofBot> Zoffix, com/rakudo/rakudo/blob/4de858a555fe0f6abfa813f0ff29e32edc159c2f/src/Perl6/ModuleLoader

[22:30] <Zoffix> Though this reminds how much the black bar annoyed me when it changed, but now I don't even pay attention to it

[22:30] <Zoffix> buggable: zen

[22:30] <buggable> Zoffix, "A follower of the way has neither form nor shape, neither root nor trunk; nor dwelling place; like a fish leaping in the water."

[22:31] <MasterDuke> hm, not sure how to interpret the output of turning MVM_MULTICACHE_DEBUG on

[22:32] <jnthn> MasterDuke: That's likely not very interesting (it shows what's in the cache iirc, while I think what you're after is the resasons things don't get inserted)

[22:33] <MasterDuke> ah, so likely have to stick some fprintfs in MVM_multi_cache_add?

[22:38] <jnthn> Probably, yeah

[22:42] <MasterDuke> lots of `if (!cs->is_interned) return cache_obj;` happened. not the exact number of add_to_cache/find_best_dispatchee call though

[22:44] <timotimo> then check the callsite_try_intern code

[22:44] <timotimo> it's got the logic for what is allowed to get inlined

[22:44] <timotimo> er, interned

[22:48] <MasterDuke> a bunch of has_flattening and some num_flags >= MVM_INTERN_ARITY_LIMIT

[22:50] <MasterDuke> not yet sure how to match them up to the INTERPOLATE calls

[22:50] <MasterDuke> afk for a bit, but thanks, making progress

[22:53] <jnthn> Sleep time for me; 'night o/

[22:54] <Zoffix> \o

[22:54] <timotimo> gnite jnthn :)

[22:54] <timotimo> i'll also go rest soon

[23:12] <MasterDuke> ah, think it's arity

[23:17] <timotimo> hmpf, both JSON::Tiny and JSON::Fast generate invalid json when enum values are involved

[23:17] <timotimo> c: use JSON::Fast; enum Blop <Moo Meep Squee>; say to-json([Moo, Meep, Squee]).perl;

[23:17] <committable6> timotimo, ¦use: «Cannot find this revision (did you mean “all”?)»

[23:18] <timotimo> c: HEAD use JSON::Fast; enum Blop <Moo Meep Squee>; say to-json([Moo, Meep, Squee]).perl;

[23:18] <committable6> timotimo, https://gist.github.com/2d51be550475556f1f4f61a12b20cf7e

[23:18] <timotimo> oh, not available, eh?

[23:18] <timotimo> anyway, the output is just [ Moo, Meep, Squee ]  i.e. missing quotation marks

[23:19] <MasterDuke> i can reproduce it manually. `multi method f(Mu:D \v, int $i, int $m, int $monkey, int $s, int $a)` is ok, but add one more parameter and no caching

[23:19] <timotimo> oh? that's a somewhat low limit, isn't it?

[23:19] <MasterDuke> src/core/callsite.h:106:#define MVM_INTERN_ARITY_LIMIT 8

[23:20] <timotimo> yeah, and with it being a method it counts the $self, too

[23:20] <MasterDuke> hm, comment right above it: /* Maximum arity + 1 that we'll intern callsites by. */

[23:22] <AlexDaniel-> c: HEAD use lib ‘data/all-modules/cpan/TIMOTIMO/JSON-Fast’; use JSON::Fast; enum Blop <Moo Meep Squee>; say to-json([Moo, Meep, Squee]).perl;

[23:22] <committable6> AlexDaniel-, ¦HEAD(4b8a0ef): «"[\n  0,\n  1,\n  2\n]"»

[23:22] <AlexDaniel-> timotimo: ↑

[23:26] <MasterDuke> ugh, can't just increase MVM_INTERN_ARITY_LIMIT, that causes segfaults

[23:31] <timotimo> oh?

[23:34] <timotimo> i can't get it to output them as integer values

[23:34] <timotimo> something to figure out tomorrow. gnite!

[23:49] <Zoffix> .

[23:49] <yoleaux> 23:07Z <HoboWithAShotgun> Zoffix: i saw your video ( https://www.youtube.com/watch?v=paa3niF72Nw ), that was very enjoyable. why not make a few more?

[23:52] <Zoffix> haha: https://twitter.com/bcrypt/status/918222753500508160

[23:52] <Zoffix> rakudo (nom)$ git log --all --pretty='%H %ae' | sort -k1,1 | head -1

[23:53] <Zoffix> 00006b16dd961d20bc20e1ac1d32df6d44320e05 [email@hidden.address]
[23:53] <Zoffix> :)

[23:53] <Zoffix> cosimo for roast and smsl for docs :)
