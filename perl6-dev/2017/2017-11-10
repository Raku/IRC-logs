[01:28] <Geth> ¦ roast/6.c-errata: 5f15d048cd | (Samantha McVey)++ | S32-str/comb.t

[01:28] <Geth> ¦ roast/6.c-errata: Fix and un-skip one of the comb tests

[01:28] <Geth> ¦ roast/6.c-errata:

[01:28] <Geth> ¦ roast/6.c-errata: You cannot supply m// since it works on $_, so change it to rx//

[01:28] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/5f15d048cd

[01:28] <Geth> ¦ roast: 659fcf44b0 | (Samantha McVey)++ | S32-str/comb.t

[01:28] <Geth> ¦ roast: Fix and un-skip one of the comb tests

[01:28] <Geth> ¦ roast:

[01:28] <Geth> ¦ roast: You cannot supply m// since it works on $_, so change it to rx//

[01:28] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/659fcf44b0

[05:33] <AlexDaniel> m: say <a b c d e>[|(0..*),1]

[05:33] <camelia> rakudo-moar d6cd0d2f5: OUTPUT: «(a b c d e)␤»

[05:33] <AlexDaniel> m: say <a b c d e>[1,|(0..*)]

[05:33] <camelia> rakudo-moar d6cd0d2f5: OUTPUT: «(b a b c d e)␤»

[05:33] <AlexDaniel> is it a bug?

[06:11] <gfldex> AlexDaniel`: no

[06:12] <gfldex> m: say <a b c d e>[(|(0..*)),1]

[06:12] <camelia> rakudo-moar d6cd0d2f5: OUTPUT: «(a b c d e)␤»

[06:12] <gfldex> this might

[06:16] <gfldex> m: say <a b c d e>[|(0..*);1]

[06:16] <camelia> rakudo-moar d6cd0d2f5: OUTPUT: «(timeout)»

[09:45] <Geth> ¦ roast/master: 4 commits pushed by pmurias++

[09:45] <Geth> ¦ roast/master: ad6cea878d | [js] Fudge something that's fudged on other backends

[09:45] <Geth> ¦ roast/master: f0dbe1c97a | Skip 64bit only test

[09:45] <Geth> ¦ roast/master: eb53ce2f12 | [js] Fudge unicody stuff

[09:45] <Geth> ¦ roast/master: 47694a549f | Skip 64bit on 32bit platforms

[09:45] <Geth> ¦ roast/master: review: https://github.com/perl6/roast/compare/659fcf44b0...47694a549f

[10:10] <stmuk> Zoffix: as a marketing skeptic I have to admit that your "In the FUTURE" infographic is rather good!

[10:13] <lizmat> Files=1229, Tests=75833, 317 wallclock secs (14.89 usr  5.20 sys + 2187.78 cusr 206.92 csys = 2414.79 CPU)

[10:13] <lizmat> .

[10:20] <pmurias> a problem I encounter is that stringifing nums looses precision

[11:14] <Zoffix> .tell pmurias yes, there's a bug in moarvm with num stringification. It loses at least 1 digit of precision

[11:14] <yoleaux> Zoffix: I'll pass your message to pmurias.

[11:20] <ufobat___> Zoffix, thanks for the great review. i think i understood what i need to do to make better PR :-)

[11:21] <Zoffix> Run make spectest :)

[11:23] <Zoffix> There's also `make stresstest` that runs more tests, but takes longer

[11:39] <ufobat___> but i am still struggling with my windows virtualbox :-(

[11:41] <ufobat___> what should I do if i have a question about one of the spec tests ( or don't agree with what one is testing ). there are surly documents about that?

[11:42] <pmurias> Zoffix: re losses 1 digit of precision, how do we want them to stringify?

[11:45] <pmurias> hmm, how can I stringify a floating point number in NQP with more digits of precision than 15?

[11:45] <pmurias> sprintf?

[11:54] <|Tux|> Rakudo version 2017.10-147-gd6cd0d2f5 - MoarVM version 2017.10-58-gad8618468

[11:54] <|Tux|> csv-test-xs-20      0.436 -  0.455

[11:54] <|Tux|> csv-ip5xs           1.074 -  1.081

[11:54] <|Tux|> test-t --race       1.245 -  1.351

[11:54] <|Tux|> test-t              3.190 -  3.248

[11:54] <|Tux|> test               11.774 - 11.820

[11:54] <|Tux|> csv-parser         11.849 - 12.173

[11:54] <|Tux|> csv-ip5xs-20       12.792 - 12.861

[11:54] <|Tux|> test-t-20 --race   19.518 - 21.867

[11:54] <|Tux|> test-t-20          58.073 - 58.148

[12:01] <Zoffix> pmurias: I presume we'd want to stringify with all available precision. Like you'd get with C... There's some C routine that gives you the next representable float and using that I found we lose some precision

[12:41] <Zoffix> m: my \x = 1e0; say x == x + 1e-15

[12:41] <camelia> rakudo-moar d6cd0d2f5: OUTPUT: «False␤»

[12:41] <Zoffix> m: my \x = 1e0; say x eq x + 1e-15

[12:41] <camelia> rakudo-moar d6cd0d2f5: OUTPUT: «True␤»

[12:41] <Zoffix> This is another symptom

[12:42] <Zoffix> And this also affects Num.WHICH, which in turn breaks Sets

[14:22] <Zoffix> There sure lots of Perl 5 crap on Perl 6's Wiki

[14:23] <Zoffix> Oh, there's just a large "Major Changes from Perl 5" section.

[14:32] <timotimo> the perlfoundation perl6 wiki?

[14:33] <Zoffix> No, https://en.wikipedia.org/wiki/Perl_6

[14:33] <timotimo> oh, wikipedia article, right

[15:07] <Geth> ¦ rakudo: 17db03eb38 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[15:07] <Geth> ¦ rakudo: Some more Telemetry goodies

[15:07] <Geth> ¦ rakudo:

[15:07] <Geth> ¦ rakudo: - introducing Telemetry::Instrument::AdHoc

[15:07] <Geth> ¦ rakudo:   - track given variables like: "Value of foo in bar" => $foobar

[15:07] <Geth> ¦ rakudo:     - resulting in 5 char wide "foobar" column

[15:07] <Geth> ¦ rakudo:     - and a line "foobar  Value of foo in bar" in the legend

[15:07] <Geth> ¦ rakudo: - introducing Telemetry::Sampler.set-instruments

[15:07] <Geth> ¦ rakudo: <…commit message has 5 more lines…>

[15:07] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/17db03eb38

[15:33] <Zoffix> ZofBot: I imagine you playing this on full volume when you'll start killing all humans: https://www.youtube.com/watch?v=4_uUPKdDiHU

[15:33] <ZofBot> Zoffix, And when I thought of that

[16:22] <stmuk> or Kill the Humans Lillakiss battle song

[16:25] <[Coke]> ]/win 2

[16:47] <gfldex> https://github.com/rakudo/rakudo/issues/1245 need a RFC label

[17:18] <Geth> ¦ rakudo: 14e2016c44 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[17:18] <Geth> ¦ rakudo: Generalize the preamble

[17:18] <Geth> ¦ rakudo:

[17:18] <Geth> ¦ rakudo: - move the logic for its part of the preamble to the instrument

[17:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/14e2016c44

[17:34] <Geth> ¦ rakudo: 2dcefa1c3e | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[17:34] <Geth> ¦ rakudo: Give T:I:AdHoc a sensible preamble

[17:34] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/2dcefa1c3e

[18:19] * Zoffix glances at #perl6 log.

[18:19] <Zoffix> Way busy to follow... The one LTA thing with //= on parameters is they'd be silencing Failures.

[18:19] <Zoffix> m: sub foo ($x is copy) { $x // $x = 42; say $x }; foo +"x"

[18:19] <camelia> rakudo-moar 2dcefa1c3: OUTPUT: «42␤»

[18:20] <Zoffix> Where's in my personal most common use of parameters would mean "use this default unless we were given a value"; with the "given a value" becoming problematic when you forward things from one sub to another...

[18:21] <Zoffix> So it could mean "is defined", but Failure kinda falls outside the scope of that and I'd want it to either be propagated or at least thrown

[18:22] <Zoffix> It's kinda the same issue as we have with Failures being listified

[18:22] <Zoffix> m: say Failure.new.elems

[18:22] <camelia> rakudo-moar 2dcefa1c3: OUTPUT: «1␤»

[18:26] <timotimo> i didn't see you suggested it before gfldex pointed it out over there

[18:37] <Zoffix> From my biased perspective of not being a regular of #perl6, I'd say all the dev discussions should be in #perl6-dev and #perl6 should be the help/social channel. There's just too much content in #perl6 to read it all on an off chance a design discussion breaks out.

[18:37] <japhb> Agreed

[18:37] <timotimo> it's true

[18:38] <timotimo> i guess i mostly brought it up there because TT just wrote something

[18:38] <japhb> Also, for a while it worked (possibly accidentally) to explicitly set a param default to Empty, so that chaining calls between routines with defaults would DTRT.  Sadly I think that was merely taking advantage of a bug.

[18:39] <japhb> Ah, is that where TT is hanging out these days?  I'd assumed he was doing an extended offline period again.

[18:40] <timotimo> he's in here, too, though

[18:40] <japhb> Right, and I can't remember the last time I saw him comment in this channel.

[18:41] * timotimo BBL

[18:43] * TimToady has been doing some of the stuff around the house that he put off for 15 years...

[18:45] <japhb> TimToady: Hardly seems sporting, you didn't even wait a full two decades.  :-)

[18:46] <TimToady> well, I'd been putting off stuff before the nine years before 2000 as well... :)

[18:46] <TimToady> s:1st/before/in/

[18:46] <japhb> As long as you're consistent about it ...

[18:48] <TimToady> my neighbor decided to rebuild the fence, for instance, so I had to dismantle the shed that was rotting in the sideyard, that was there when we bought the place in 1991 and was already in bad shape then...

[18:48] <TimToady> anyone want some sheetmetal?

[18:49] <TimToady> or a really old-school push-mower?

[18:49] <japhb> Is it still metal at this point, or is it somewhat-recognizable rust?

[18:50] <TimToady> I'd say there's still more metal than rust

[18:50] <japhb> The push mower style that's really just hazing for teenagers?

[18:50] <TimToady> yep, that kind

[18:50] <japhb> Heh, those things are awesome and I never ever want one.  :-)

[18:51] <TimToady> it's a good excuse to save water on the lawn though

[18:51] * japhb has just gone through the process of clearing a ton of assorted crap from the backyard and replacing it with something pleasing to look at

[18:51] <japhb> True

[18:51] <TimToady> but yeah, I haven't used one since, oh, about 1980

[18:51] <japhb> Then again, if weather in November is any indication, it won't be a dry year.

[18:52] <TimToady> so I guess, just for today, the social is in here and the design is in #perl6  :P

[18:53] <japhb> Heh

[18:53] <japhb> We're allowed to socialize, just at a much slower pace here.  :-)

[18:55] <TimToady> so we're not the fascist socialists in the world?

[18:58] <TimToady> .oO(we're not russian, 'cuz we're already finnish)

[18:58] * japhb has no idea what his particular mix of social beliefs would be called by a poli sci major.

[19:02] <TimToady> Poli Sci is such a hard science because it's such a soft science.

[19:07] <japhb> Actually, a D&D GM would probably have an easier time categorizing me. :-)

[19:19] <timotimo> the features overview has a +/- for Supplies on the jvm; does anybody know what's missing there?

[19:46] <dogbert17> ZOFFLOP: t/spec/S10-packages/basic.t (test #83)

[21:42] <Geth> ¦ roast: 642bbca26a | usev6++ | 2 files

[21:42] <Geth> ¦ roast: Unfudge passing tests (RT #126823)

[21:42] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/642bbca26a

[21:42] <synopsebot> RT#126823 [open]: https://rt.perl.org/Ticket/Display.html?id=126823 [BUG] Failing test in S32-array/adverbs.t and S32-hash/adverbs.t: Code does not die as expected with 'use <MODULE>'

[22:04] <lizmat> m: class A { }; multi sub infix:<->(A:D \a,A:D \b) { 42 }; sub B(--> A:D) { A.new }; say A.new - A.new  # so this is fine

[22:04] <camelia> rakudo-moar 2dcefa1c3: OUTPUT: «42␤»

[22:04] <lizmat> why isn't this?

[22:04] <lizmat> m: class A { }; multi sub infix:<->(A:D \a,A:D \b) { 42 }; sub B(--> A:D) { A.new }; say B - B

[22:04] <camelia> rakudo-moar 2dcefa1c3: OUTPUT: «Cannot resolve caller Numeric(A: ); none of these signatures match:␤    (Mu:U \v: *%_)␤  in block <unit> at <tmp> line 1␤␤»

[22:04] <lizmat> ah, I guess it's just an LTA error

[22:05] <lizmat> m: class A { }; multi sub infix:<->(A:D \a,A:D \b) { 42 }; sub B(--> A:D) { A.new }; say B() - B  # need parens before infox

[22:05] <camelia> rakudo-moar 2dcefa1c3: OUTPUT: «42␤»

[22:19] <MasterDuke> heh, "infox", is that the opposite of outfox?

[22:25] <Geth> ¦ rakudo: d6f1077d62 | (Elizabeth Mattijsen)++ | t/07-telemetry/01-basic.t

[22:25] <Geth> ¦ rakudo: Initial set of basic Telemetry tests

[22:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/d6f1077d62

[22:26] <lizmat> MasterDuke: no, it's the nephew of onfix

[22:26] <lizmat> afk&

[22:49] <Geth> ¦ roast: bc3a287ec1 | usev6++ | S06-traits/misc.t

[22:49] <Geth> ¦ roast: [JVM] Fudge test for RT #129812 (todo)

[22:49] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/bc3a287ec1

[22:49] <synopsebot> RT#129812 [open]: https://rt.perl.org/Ticket/Display.html?id=129812 [JVM][OPTIMIZER] `is rw` candidates get called even if a non-rw argument is passed
