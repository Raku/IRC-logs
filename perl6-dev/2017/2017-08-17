[00:00] <samcv> hmm. i gotta do some more stuff before i get paid. merge the collation stuff. write some documentation. and fix the unicode property name clashes in the database. and Generate Hangul codepoint names algorithmically off the top of my head

[00:01] <samcv> and get the knuth-morris-pratt string search thing merged, tho that wasn't part of the grant, not a bad thing to do

[00:01] <samcv> so fairly close

[00:06] <AlexDaniel> samcv++ ? your work

[01:24] <BenGoldberg> Zoffix, is that a pink guitar, or a shiny red one lit with an unfortunately placed camera flash?

[01:26] <Zoffix> Don't know I'm colorblind. The salesman mentioned it being red while picking out the stap tho, so I guess it's red :)

[01:29] <BenGoldberg> Hmm... in that case, is it a dark color, or a light color?  Pink just another word for pale red.

[01:32] <Zoffix> dark

[01:35] <AlexDaniel> pink? That's clearly red

[01:36] <AlexDaniel> nice red, by the way

[01:37] <Zoffix> Here's a shot with different light: http://i.imgur.com/S8TV4c9.jpg

[01:38] <Zoffix> it gets lighter and has a bit of wood pattern visible, closer to the neck

[01:38] <AlexDaniel> Hm, that's more like… maroon?

[01:39] * Zoffix shrugs :)

[04:25] <ugexe> windows failing to build asyncsocket.c

[04:26] <ugexe> https://github.com/MoarVM/MoarVM/commit/5e94da03ada4678680c8426a63db87d01da8b953

[05:55] <Geth> ¦ rakudo/curfs-candidates-refactor: b378a157eb | (Nick Logan)++ (committed using GitHub Web editor) | src/core/CompUnit/Repository/FileSystem.pm

[05:55] <Geth> ¦ rakudo/curfs-candidates-refactor: Add candidates method as CURFS recommendation manager 

[05:55] <Geth> ¦ rakudo/curfs-candidates-refactor:

[05:55] <Geth> ¦ rakudo/curfs-candidates-refactor: See #1125 for .candidates details

[05:55] <Geth> ¦ rakudo/curfs-candidates-refactor:

[05:55] <Geth> ¦ rakudo/curfs-candidates-refactor: Creates full Distribution for both -I. and -Ilib, where the later will use the directory recursion it was already doing (to determine id) to automatically populate meta data for provides and files (bin/, resources/).

[05:55] <Geth> ¦ rakudo/curfs-candidates-refactor:

[05:55] <Geth> ¦ rakudo/curfs-candidates-refactor: Makes it possible to do `sub MAIN("version") { $*REPO.need("My::Module").distribution.meta<ver> }` to allow scripts to give the right version regardless of CURI or CURFS being used to load it.

[05:55] <Geth> ¦ rakudo/curfs-candidates-refactor: review: https://github.com/rakudo/rakudo/commit/b378a157eb

[06:15] <Geth> ¦ rakudo/curfs-candidates-refactor: d0a3fec997 | (Nick Logan)++ (committed using GitHub Web editor) | src/core/CompUnit/Repository/FileSystem.pm

[06:15] <Geth> ¦ rakudo/curfs-candidates-refactor: Reimplement files using .candidates

[06:15] <Geth> ¦ rakudo/curfs-candidates-refactor: review: https://github.com/rakudo/rakudo/commit/d0a3fec997

[07:26] <Geth> ¦ nqp: 152094b76b | (Stefan Seifert)++ | 2 files

[07:26] <Geth> ¦ nqp: Add support for %*ENV<NQP_LIB> to MoarVM and JS ModuleLoaders

[07:26] <Geth> ¦ nqp:

[07:26] <Geth> ¦ nqp: On the JVM we already support this and this is needed for replacing the

[07:26] <Geth> ¦ nqp: hard coded '.' and 'blib' search paths during the build.

[07:26] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/152094b76b

[08:09] <pmurias> nine: you are working on fixing up rakudos build? (I have noticed the nqp commit and I don't want to duplicate work)

[08:09] <pmurias> * are you

[08:30] <nine> pmurias: I am

[08:31] <nine> pmurias: already got a fix, but trying to implement a better one

[08:42] <Geth> ¦ rakudo/nom: 7e40372456 | (Stefan Seifert)++ | 4 files

[08:42] <Geth> ¦ rakudo/nom: Unbreak the build now that nqp no longer searches . and blib by default

[08:42] <Geth> ¦ rakudo/nom:

[08:42] <Geth> ¦ rakudo/nom: nqp commit dd25a924638958a6cdca4c81a0f8798182e52104 removed '.' and 'blib'

[08:42] <Geth> ¦ rakudo/nom: from nqp's default module search paths. Those were needed only during rakudo's

[08:42] <Geth> ¦ rakudo/nom: build as after a make install we will find nqp modules in nqp's libpath.

[08:42] <Geth> ¦ rakudo/nom: This mirrors similar changes to Perl6::ModuleLoader.

[08:42] <Geth> ¦ rakudo/nom:

[08:42] <Geth> ¦ rakudo/nom: Would love to just pass on --nqp-lib to NQP's ModuleLoader, but our command

[08:42] <Geth> ¦ rakudo/nom: line processing in main.nqp happens only after loading modules alredy.

[08:42] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7e40372456

[08:43] <nine> Second paragraph explains why my attempts at a better fix just didn't work out :/

[09:17] <pmurias> nine: the installed perl6-m passes the argument with --libpath directly to the moar executable

[09:21] <stmuk_> ping

[09:22] <stmuk> something odd on freenode .. seem to be banned on many channels

[09:22] <yoleaux> 16 Aug 2017 21:57Z <AlexDaniel> stmuk: you may be interested in this discussion: https://irclog.perlgeek.de/perl6-dev/2017-08-16#i_15027543

[09:24] <jnthn> stmuk: Yeah, I was klined from the lot overnight

[09:24] <jnthn> I'm guessing some accident

[09:26] <stmuk> seems like it

[09:27] <stmuk> hmm there problem should be a R* security fix release of some sort .. is the nqp execute fix a simple patch or more complex?

[09:29] <stmuk> s/problem/probably

[09:40] <stmuk> it's just nqp  dd25a92 I guess?

[09:43] <stmuk> ah no :)

[09:47] <travis-ci> Rakudo build passed. Stefan Seifert 'Unbreak the build now that nqp no longer searches . and blib by default

[09:47] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/265487131 https://github.com/rakudo/rakudo/compare/3e70d44d47d1...7e4037245655

[09:57] <Geth> ¦ rakudo/atomics: 22e25da2c6 | (Jonathan Worthington)++ | src/core/Atomic.pm

[09:57] <Geth> ¦ rakudo/atomics: Eliminate Atomic.foo methods for atomic-foo subs.

[09:57] <Geth> ¦ rakudo/atomics:

[09:57] <Geth> ¦ rakudo/atomics: These will be the "Texas form" of the atomic operations; will also add

[09:57] <Geth> ¦ rakudo/atomics: Unicode operator forms.

[09:57] <Geth> ¦ rakudo/atomics: review: https://github.com/rakudo/rakudo/commit/22e25da2c6

[09:57] <Geth> ¦ roast: e3d700548b | (Jonathan Worthington)++ | S17-lowlevel/atomic.t

[09:57] <Geth> ¦ roast: Follow atomics API changes in Rakudo.

[09:57] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/e3d700548b

[10:05] <Geth> ¦ roast: 1ca17ba664 | (Jonathan Worthington)++ | S17-lowlevel/atomic.t

[10:05] <Geth> ¦ roast: Test return values of atomic integer subs.

[10:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1ca17ba664

[10:06] <Geth> ¦ roast: a921dbb029 | (Jonathan Worthington)++ | S17-lowlevel/atomic-ops.t

[10:06] <Geth> ¦ roast: Add tests for operator forms of atomic ops.

[10:06] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/a921dbb029

[10:06] <Geth> ¦ rakudo/atomics: e7e33173a7 | (Jonathan Worthington)++ | 2 files

[10:06] <Geth> ¦ rakudo/atomics: Add operator forms of atomic operations.

[10:06] <Geth> ¦ rakudo/atomics: review: https://github.com/rakudo/rakudo/commit/e7e33173a7

[10:06] <Geth> ¦ rakudo/atomics: cdbb085852 | (Jonathan Worthington)++ | t/spectest.data

[10:06] <Geth> ¦ rakudo/atomics: Run S17-lowlevel/atomic-ops.t.

[10:06] <Geth> ¦ rakudo/atomics: review: https://github.com/rakudo/rakudo/commit/cdbb085852

[10:13] <Geth> ¦ rakudo/atomics: 027e25fb59 | (Jonathan Worthington)++ | 4 files

[10:13] <Geth> ¦ rakudo/atomics: Rename to reflect no Atomic class any more.

[10:13] <Geth> ¦ rakudo/atomics: review: https://github.com/rakudo/rakudo/commit/027e25fb59

[10:20] <Geth> ¦ nqp/master: 4 commits pushed by (Jonathan Worthington)++

[10:20] <Geth> ¦ nqp/master: 8fddad9170 | Map new atomic ops on MoarVM backend.

[10:20] <Geth> ¦ nqp/master: 59fd391f29 | Add constant mapping atomic integer type.

[10:20] <Geth> ¦ nqp/master: 573a0ad874 | Merge branch 'atomics'

[10:20] <Geth> ¦ nqp/master: b084530f9f | Bump MOAR_REVISION for atomic op support.

[10:20] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/152094b76b...b084530f9f

[10:20] <Geth> ¦ nqp/master: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.07-418-g1f8417ec...2017.07-444-g88c6851

[10:33] <Geth> ¦ rakudo/nom: 18 commits pushed by (Jonathan Worthington)++

[10:33] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/compare/7e40372456...92707fac6c

[10:33] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.07-44-g152094b76...2017.07-48-gb084530

[11:00] <Geth> ¦ nqp: 47c4bc4d14 | pmurias++ | 2 files

[11:00] <Geth> ¦ nqp: [js] Throw and exception if we have too many or too few positional args

[11:00] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/47c4bc4d14

[11:00] <Geth> ¦ nqp: 6c4770c736 | pmurias++ | t/qast/01-qast.t

[11:00] <Geth> ¦ nqp: Test that QAST::Block.custom_args is respected

[11:00] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/6c4770c736

[11:41] <stmuk> nine: NativeHelpers::Blob doesn't install any more

[11:46] <nine> stmuk: upgrade to rakudo/nom

[11:46] <nine> Or downgrade to the last release :)

[11:49] <stmuk> this is with 2017.07-161-gf1464e2

[11:50] <nine> That's 29 commits behind rakudo/nom

[11:51] <stmuk> I'll try blead

[12:01] <stmuk> odd Exception failure with URI2017.07-190-g92707fa

[12:02] <stmuk> test failure I mean

[13:11] <Geth> ¦ rakudo/nom: a45ede9caa | (Jonathan Worthington)++ | src/core/atomicops.pm

[13:11] <Geth> ¦ rakudo/nom: Don't return out-of-atomicint-bounds results.

[13:11] <Geth> ¦ rakudo/nom:

[13:11] <Geth> ¦ rakudo/nom: Ensures that any wrap-around will be reflected.

[13:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a45ede9caa

[13:15] <ilmari> wouldn't it be more logical to have the atomic pre-inc/dec operators be ++?/--?

[13:15] <jnthn> How so?

[13:16] <brrt> these are 'atom' emoji, not sure if you can see

[13:17] <jnthn> (It didn't even occur to me that we might move the location of the atomic sign, tbh...)

[13:17] <timotimo> öyou mean the atom symbol should be between -- and $foo?

[13:17] <brrt> $foo??++ we cold also do

[13:17] <ilmari> $foo?++ , ++?$foo

[13:17] <ilmari> reads better to me than ?++$foo

[13:18] <ilmari> timotimo: yes

[13:18] <timotimo> i tend to agree, it's a little closer to our hyperops for prefix and postfix ops

[13:18] <ilmari> the atom should point at the thing that's being atomically modified

[13:19] <brrt> oh, you're already using the atomic emoji :-o

[13:19] <brrt> had not seen

[13:19] <brrt> wonder what the texas version of that is

[13:19] <ilmari> functions

[13:19] <jnthn> atomic-inc :)

[13:19] <timotimo> i'm glad it shows up in my irc, though it's a little hard to make out

[13:19] <brrt> atomic-inc($foo)

[13:19] <brrt> like so?

[13:19] <ilmari> https://github.com/perl6/doc/blob/master/doc/Type/atomicint.pod6

[13:20] <brrt> oh man, that's going to make for one cool 'neat tricks in perl6' talk in some future perl conference

[13:20] <ilmari> (not on docs.perl.org yet)

[13:20] <ilmari> s/perl/perl6/

[13:20] <jnthn> Yeah, I can buy the hyper op similarity argument

[13:20] <timotimo> i'll sell it to you for very cheap

[13:21] <timotimo> i'm very proud of this product and i'd like it to get some … exposure

[13:21] <ilmari> atomic exposure sounds dangerous

[13:30] <dogbert17> turns out that https://github.com/MoarVM/MoarVM/issues/554 still causes trouble, updated the issue

[13:33] <Zoffix> haha, we actually used the ?-- as an op? That's so awesome :D

[13:33] <Zoffix> m: my int $x = 42; say $x?--

[13:33] <camelia> rakudo-moar a45ede: OUTPUT: «42?»

[13:33] <Zoffix> m: my int $x = 42; say $x?--; say $x

[13:33] <camelia> rakudo-moar a45ede: OUTPUT: «42?41?»

[13:34] <Zoffix> I guess it's Twitter trolling day today :D

[13:34] <Zoffix> damn, when will Unicode in logs get fixed?

[13:35] <Zoffix> +1 on having prefixes as --?$foo ++?$foo

[13:37] <Zoffix> $x ?+= 42;... so basically the rule is "atom symbol is closest to the variable the op works on"

[13:38] <Zoffix> m: my int $x = 42; say ++?$x; say $x

[13:38] <camelia> rakudo-moar a45ede: OUTPUT: «Cannot resolve caller prefix:<++>(Int); the following candidates?match the type but require mutable arguments:?    (Mu:D $a is rw)?    (Int:D $a is rw)??The following do not match for other reasons:?    (Bool $a is rw)?    (Mu:U $a is rw)…»

[13:38] <Zoffix> hehe

[13:39] <jnthn> Yeah, I'll tweak that in a moment

[13:39] <jnthn> Just finishing the docs for the scalar case

[13:39] <Zoffix> jnthn++

[13:42] <lizmat> looking at https://gfldex.wordpress.com/2017/08/17/parsing-nothing/ , perhaps we should lift

[13:42] <lizmat> 9501edae4f73a970e3270e3 until after the release and possibly to 6.d ?

[13:42] <lizmat> commute&

[13:51] <Zoffix> m: say grammar { token TOP { \d+ } }.parse: '4'

[13:51] <camelia> rakudo-moar a45ede: OUTPUT: «?4??»

[13:51] <Zoffix> m: say grammar { token TOP { \d+ } }.parse: ''

[13:51] <camelia> rakudo-moar a45ede: OUTPUT: «5===SORRY!5=== Error while compiling <anon>?Confused?at <anon>:1?------> 3<BOL>7?5<EOL>?Actually thrown at:?  in block <unit> at <tmp> line 1??»

[13:51] <Zoffix> Confused? What is it confused about?

[13:51] <Zoffix> m: my $x = grammar { token TOP { \d+ } }.parse: 'zzz'; say $x.exception.^name

[13:51] <camelia> rakudo-moar a45ede: OUTPUT: «X::Syntax::Confused?»

[13:52] <jnthn> huh, it's using the X::Syntax::Confused exception?

[13:52] <Zoffix> That's an LTA exception IMO :\

[13:52] <jnthn> Yeah, using an exception intended for the compiler isn't going to work out so well...

[13:52] <Zoffix> lizmat, yeah postponing for 6.d makes sense, as I recall a 6.c roast test had to be changed to accomodate the behaviour.

[14:00] <timotimo> i'd expect many surprised faces when they get a SORRY! at run time

[14:02] <Zoffix> m: EVAL "x"

[14:02] <camelia> rakudo-moar a45ede: OUTPUT: «5===SORRY!5=== Error while compiling /home/camelia/EVAL_0?Undeclared routine:?    x used at line 1??»

[14:02] <Zoffix> :)

[14:02] <jnthn> "We're only sorry about compiler errors" :)

[14:02] <Zoffix> :)

[14:02] <Geth> ¦ rakudo/nom: c67d7dd5dc | (Jonathan Worthington)++ | 2 files

[14:02] <Geth> ¦ rakudo/nom: Place atomic symbol next to target always.

[14:02] <Geth> ¦ rakudo/nom:

[14:02] <Geth> ¦ rakudo/nom: Based on feedback from ilmari++ and timotimo++.

[14:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c67d7dd5dc

[14:03] <Geth> ¦ roast: 266d9e6d57 | (Jonathan Worthington)++ | S17-lowlevel/atomic-ops.t

[14:03] <Geth> ¦ roast: Chase changes to prefix atomic operators.

[14:03] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/266d9e6d57

[14:07] <ilmari> jnthn++ # atomic power!

[14:08] <Zoffix> I guess now we just need to make a call to The Church of Atom :)

[14:08] <Zoffix> oh, Church of the Children of Atom :)

[14:09] <timotimo> don't worry, a sheet of paper will protect you from alpha radiation

[14:10] <Zoffix> HeHeHeHe :)

[14:13] <jnthn> Tomorrow and/or Monday I'll see about teaching the JIT about these ops some

[14:22] <Geth> ¦ roast: c5587b95ee | (Jonathan Worthington)++ | S06-signature/named-parameters.t

[14:22] <Geth> ¦ roast: Test to cover RT #131857.

[14:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/c5587b95ee

[14:22] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131857

[14:22] <jnthn> There goes the blocker. :)

[14:26] <Zoffix> \o/

[14:27] <jnthn> I wonder why I see lower memory use numbers locally than others are reporting

[14:27] <jnthn> ./perl6-m -e 'sub mem { "/proc/$*PID/statm".IO.lines[0].split(/\s/)[5] * 4096 / 1024 }; say mem(); run "echo"; say mem()'

[14:27] <jnthn> 80624

[14:27] <jnthn> 107844

[14:27] <jnthn> That a waaay smaller increase

[14:28] <jnthn> (Than the tickets suggest)

[14:28] <Zoffix> On 2017.07-22-g02667bd I get 59168 / 216484

[14:29] <Zoffix> And on 2017.07-22-g02667bd 32-bit box I get 40796 / 68908

[14:29] <jnthn> 2017.07-191-ga45ede9 here

[14:43] <ggoebel> backlogging... I'm surprised no one suggested using ? for atomic :-)

[14:43] <ilmari> ggoebel: uh, that's what is used

[14:43] <ilmari> ggoebel: see https://github.com/perl6/doc/blob/master/doc/Type/atomicint.pod6

[14:44] <Zoffix> m: my int $x = 42; say $x?++; say $x

[14:44] <camelia> rakudo-moar c67d7d: OUTPUT: «42?43?»

[14:45] <ilmari> m: my atomicint $total = 0; start { for ^2000 { $total?++ } } xx 4; say $total

[14:45] <camelia> rakudo-moar c67d7d: OUTPUT: «570?»

[14:45] <ilmari> uh?

[14:45] <ilmari> m: my atomicint $total = 0; await start { for ^2000 { $total?++ } } xx 4; say $total

[14:45] <camelia> rakudo-moar c67d7d: OUTPUT: «8000?»

[14:46] <ilmari> jnthn: ^^ looks like the docs need some 'await' sprinkling

[14:46] <ilmari> m: my atomicint $total = 0; await start { for ^2000 { $total++ } } xx 4; say $total

[14:46] <camelia> rakudo-moar c67d7d: OUTPUT: «7200?»

[14:46] <ilmari> m: my atomicint $total = 0; await start { for ^2000 { $total++ } } xx 4; say $total

[14:46] <camelia> rakudo-moar c67d7d: OUTPUT: «7128?»

[14:46] <Zoffix> huh, we got a new type too?

[14:47] <jnthn> huh, thought I put the await

[14:47] <ilmari> yes, it's a native int that's of the right size to do cpu-atomic ops on

[14:47] <jnthn> Oh, precednece maybe?

[14:47] <ilmari> jnthn: only the cas example has await

[14:47] <jnthn> m: my atomicint $total = 0; await (start { for ^2000 { $total++ } } xx 4); say $total

[14:47] <camelia> rakudo-moar c67d7d: OUTPUT: «7195?»

[14:47] <ilmari> not the increment loop

[14:47] <ilmari> jnthn: that last one is without the atom

[14:47] <jnthn> oh

[14:48] <ilmari> is your IRC client not rendering it?

[14:48] <ilmari> install the latest symbola font

[14:48] <jnthn> No, my eyes just imagined it :P

[14:48] <ilmari> ah

[14:52] <ggoebel> pmurias /o

[15:20] <JimmyZ> jnthn: how about calling it 'atomic' instead of 'atomicint', or will it have something atomicnum ?

[15:21] <AlexDaniel> re revert of 9501edae4f73, see this: https://irclog.perlgeek.de/perl6-dev/2017-08-16#i_15021994

[15:21] <ugexe> consistency probably... we dont have a unum do we?

[15:21] <AlexDaniel> 3 days is definitely not enough for this change, so yeah, not in 2017.08 at least…

[15:22] <timotimo> atomint for radiantly fresh breath

[15:22] <jnthn> JimmyZ: atomic underspecifies what it is; it matters that it's an int

[15:22] <jnthn> Also I'd rather not steal the type name `atomic` :)

[15:25] <jnthn> And huffman arguments don't really make aint worth it :)

[15:25] <JimmyZ> oh, java has many atomic type: https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/package-summary.html , haha

[15:25] <jnthn> Well, of course they would :P

[15:26] <jnthn> huh, they have AtomicIntegerArray

[15:26] <jnthn> my int @a; atomic-inc(@a[0]) works fine enough for us :)

[15:27] <TimToady> huh, so how the heck did I get K-lined 9 or so hours ago?

[15:27] <yoleaux> 13:38Z <gfldex> TimToady: canned worms alert up until https://irclog.perlgeek.de/perl6/2017-08-17#i_15032122

[15:27] <JimmyZ> yeah ,and AtomicLongArray :P

[15:27] <jnthn> The Java design for it is consistent with itself and with Java though :)

[15:27] <nine> AlexDaniel++ # being strict as release manager

[15:27] <AlexDaniel> TimToady: almost everyone did

[15:28] <nine> TimToady: Some network issue triggered freenode's spam protection which caused a lot of users to be banned. They are working on the issue

[15:29] * brrt read 'aint worth it' in the american sense

[15:29] <JimmyZ> to me, atomicint makes me thinking it should have atomicnum too, haha

[15:30] <TimToady> .tell gfldex $/ is in fact set by .parse

[15:30] <yoleaux> TimToady: I'll pass your message to gfldex.

[15:30] <brrt> but i don't think atomicnum is a thing

[15:31] <jnthn> brrt: I...uh...guess cas doesn't care, but yeah :)

[15:31] <jnthn> atomic inc/dec/add sure ain't gonna work out on it :)

[15:31] <AlexDaniel> releasable6: status

[15:31] <releasable6> AlexDaniel, Next release in 2 days and ?3 hours. No blockers. 164 out of 192 commits logged

[15:31] <releasable6> AlexDaniel, Details: https://gist.github.com/61c9c2df1a58bd2e0eee7e0e6dd2515d

[15:31] <jnthn> Also, what would you do with it... :-)

[15:31] <AlexDaniel> jnthn: thank you for fixing aliased params

[15:32] <jnthn> Sorry for busting 'em :P

[15:32] <jnthn> Though to be fair, they were already busted, I guess

[15:32] <jnthn> I just made optimization more aggressive and then it tripped over the issue

[15:32] <jnthn> We can actually specialize code like that better at some point in the future

[15:33] <jnthn> But ain't got time for that right now

[15:34] * jnthn wonders why he gets sporadic DNS failure lookups of the ir clogs

[15:35] <jnthn> Anyway, some time back we got CSV's test-t under 4s thanks to spesh work

[15:35] <jnthn> Then I made the million lines benchmark faster. And we were so busy celebrating that we didn't notice test-t went back over 4s again

[15:36] <jnthn> Anyway, just pushed a commit to MoarVM HEAD that means we can have our cake and eat it. :)

[15:37] <Zoffix> buggable: speed 20

[15:37] <buggable> Zoffix, ???????????????????? data for 2017-08-04–2017-08-12; range: 3.587s–4.925s; 18% slower

[15:37] <Zoffix> hehe

[15:39] <jnthn> What are the numbers, btw? :)

[15:39] <jnthn> (like the 20 in speed 20)

[15:39] <Zoffix> "use last 20 entries only"

[15:40] <jnthn> Oh

[15:40] <jnthn> And speed runs?

[15:40] <jnthn> Measurement of test-t? :)

[15:40] <raschipi> m: '???????????????????'.chars.say # Why 19, then?

[15:40] <camelia> rakudo-moar c67d7d: OUTPUT: «19?»

[15:40] <jnthn> Oh, maybe it just collects it from the channel :)

[15:40] <Zoffix> jnthn: yeah, Tux produces them on some site; each day gets two or so

[15:41] <jnthn> Alright

[15:41] <jnthn> Well, guess next MoarVM HEAD bump brings it :)

[15:41] <Zoffix> raschipi: you missed the outlier. The arrow at the end

[15:41] <raschipi> Right, I explicitly deleted it, thinking it wasn't part of the data. The arrow means it's an outlier, I remember now.

[15:54] <AlexDaniel> jnthn: re “I can't reproduce such an sizable increase at HEAD or MoarVM/NQP/Rakduo”, so what's your previous number?

[15:54] <AlexDaniel> jnthn: or do you want me to test again at HEAD?

[15:56] <jnthn> AlexDaniel: Grap MoarVM HEAD also if you do; just added a tweak there that may help some cases

[15:57] <AlexDaniel> mmm that's gonna be more difficult

[15:58] * AlexDaniel reboot

[15:58] <jnthn> *Grab

[15:59] <jnthn> Either way, I don't think I'll have time to dig much more into it soon

[15:59] <AlexDaniel> There's now RT #131919 to discuss the .parse change

[15:59] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131919

[15:59] <jnthn> And the longer term fix for things like Proc::Async memory use will be to have it spawn less threads

[15:59] <jnthn> Which needs an overhaul of ThreadPoolScheduler

[16:01] <AlexDaniel> .tell Skarsnik by the way, does RT #131914 affect you in any way, or did you notice it by chance?

[16:01] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131914

[16:01] <yoleaux> AlexDaniel: I'll pass your message to Skarsnik.

[16:02] <AlexDaniel> jnthn: alright, thanks!

[16:03] <TimToady> sure would be nice if there were a way to test the whole ecosystem for a given change...

[16:03] <ugexe> we kinda can

[16:03] <ugexe> well, Zoffix kinda can :)

[16:03] <AlexDaniel> TimToady: we had toaster, but it doesn't seem to work right

[16:04] <AlexDaniel> right now*

[16:04] <AlexDaniel> :)

[16:04] <Zoffix> Well, it can work if you run the toaster itself on an older (say 2017.07) Rakudo

[16:05] <Zoffix> I'll try doing that

[16:05] <Zoffix> TimToady: but yeah, there IS a way :) https://rakudo.party/post/Perl-6-Release-Quality-Assurance-Full-Ecosystem-Toaster

[16:07] <TimToady> 'cuz it really makes a difference whether a change affects 1 module or 3 modules or 30 modules or 300 modules

[16:08] <TimToady> if it's 1 module, a revert is overkill

[16:08] <TimToady> if it's 300 modules, then it's 6d

[16:08] <TimToady> most of the middle numbers mean wait a month

[16:08] <Zoffix> But we made a promise to users we won't make any changes that break 6.c-errata.

[16:08] <Zoffix> in 6.c

[16:09] <AlexDaniel> “wait a month” is not a bad strategy in cases when we don't know

[16:11] <TimToady> Zoffix: sure, but it's a bit of a judgement call whether 6.c-errata is testing something that wasn't intended to be tested

[16:11] <b2gills> my personal take on that code is it was slightly wrong anyway, it was looping once over Any but assumed it was an empty list

[16:12] <TimToady> one could argue that the change alread caught a bug, yes

[16:14] <b2gills> sort of like all the bugs that 5.18 dredged up because of the randomized sort order

[16:15] <b2gills> sort order of hashes

[16:15] <TimToady> so as usual, we have to pick somewhere on the slippery going from "Damn the torpedoes, full speed ahead" through "No harm, no foul" all the way down to "If it ain't broke, don't fix it."

[16:15] <TimToady> we've done a lot things in 6.c that fall somewhere on that slope, because otherwise 6.d would have lots more bugs when it comes out :)

[16:16] <b2gills> I still think we need to publish 6c-errata as v6.c.1 at some point

[16:16] <Zoffix> It would be nice to fight against the perception that we rip the floor from under our users all the time. Maybe start aiming to confine these changes to some particular releases, where we can say: look we changed untested stuff that might break your code.

[16:16] <Zoffix> Releases like, the one right after R* release.

[16:17] <TimToady> didn't we just do an R* release?  :P

[16:17] <Zoffix> Yup :)

[16:17] <TimToady> I love someone who can argue both sides of a problem :)

[16:18] <Zoffix> heh

[16:20] <lucasb> https://github.com/rakudo/rakudo/blob/nom/src/core/Cool.pm#L202-L252

[16:21] <lucasb> ^^ Why there isn't a .Complex coercion method in Cool?

[16:21] <lucasb> (sorry to bother here, #perl6 is busy in a linenoise discussino :)

[16:21] <Skarsnik> jnthn, for #131914 did you check your pagesize? (getpagesize()) maybe the 4096 in the calcul need to be changed if it's not 4096

[16:21] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131914

[16:22] <Zoffix> m: "1+i".Numeric

[16:22] <camelia> rakudo-moar c67d7d: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '031+?5i' (indicated by ?)?  in block <unit> at <tmp> line 1??»

[16:22] <Zoffix> m: "1+1i".Numeric

[16:22] <camelia> rakudo-moar c67d7d: ( no output )

[16:22] <Zoffix> lucasb: seems just an omission

[16:22] <Zoffix> lucasb: PR it :) With tests :)

[16:23] <lucasb> Zoffix: nice, I'll try

[16:24] <Zoffix> lucasb: "sorry to bother here"... IMO here *is* the right place for stuff like that.

[16:25] * Zoffix doesn't usually follow #perl6; too much traffic to take in

[16:25] <Skarsnik> it's a good thing :)

[16:25] <Zoffix> Yeah :)

[16:39] <Skarsnik> hm

[16:44] <Skarsnik> running a run 'echo', '-n' 20 times growns to 350Mbyte. if I do more it kinda stay the same

[16:46] <[Coke]> There's a ticket.

[16:47] <Zoffix> Ohhhh. mystery solved on why Toaster crashes on bleedier rakudos. Messages in screen log: "not enough memory"

[16:47] <Skarsnik> yeah but it was for one run. I was curious if the memory usage grows or it was just one overhead of having Proc being Proc::async now

[16:48] <Skarsnik> I ran against a 2017.06 version

[16:49] <Skarsnik> I should look more at what is exactly the value given by statm

[16:54] <[Coke]> https://rt.perl.org/Ticket/Display.html?id=131915

[16:54] <AlexDaniel> (it's his ticket)

[16:56] <[Coke]> OK.

[17:00] <Skarsnik> hm so the data field (the field used in this) is for memory allocated by the process. but it not the memory used. if I understand correctly

[17:01] <Skarsnik> Dunno why it's called data + stack

[17:12] <AlexDaniel> Skarsnik: should we test it again with resident (.[1]) ?

[17:13] <AlexDaniel> uh, I wanted to reboot

[17:16] <Skarsnik> not sure

[17:21] <jnthn> Skarsnik: No, but the numbers that I saw correlated with the numbers from /usr/bin/time's maxrss

[17:22] <AlexDaniel> ¦92bd7e4f54a9^: «72632» ¦92bd7e4: «72536» ¦9658dd98c9dd8ec^^: «78084» ¦9658dd9: «78068»

[17:23] <AlexDaniel> that's with say "/proc/$*PID/statm".IO.lines[0].split(/\s/)[1] * 4096 / 1024

[17:23] <AlexDaniel> so what is “data + stack” exactly?

[17:24] <Skarsnik> resident is supposed to be data + code

[17:24] <Skarsnik> but it's weird

[17:24] <jnthn> Stack is presumably the C stack where function's invocation records live

[17:25] <jnthn> It'll typically be around a meg per thread

[17:25] <Skarsnik> well if it's stack that get that big it's still not fun ^^

[17:26] <jnthn> Well, the thread pool will allow up to 16 threads, then there's the initial thread, and one created for running the specializer, so that's 18MB at most

[17:27] <jnthn> Each thread then has a thread-local nursery

[17:27] <jnthn> Which is 4MB semispaces, so 8MB total

[17:27] <jnthn> m: say 9 * 18

[17:27] <camelia> rakudo-moar c67d7d: OUTPUT: «162?»

[17:28] <jnthn> The thread pool scheduler is fairly un-smart, though

[17:28] <jnthn> It just spawns threads up to the limit each time there's work

[17:28] <jnthn> It thus can end up with more than it really needs

[17:33] <Skarsnik> I wonder if there is a good api/lib somewhere to get clear information

[17:38] <Zoffix> hmmm, a 2017.07 toaster running a toast of 2017.07 release died due to not enough memory :( looks like it needs some sort of memory protection against rogue modules

[17:39] * Zoffix changes from 24GB to 100GB RAM and tries again

[17:40] <Skarsnik> lol

[17:41] <jnthn> I'd imagine the toaster itself was using Proc::Async before, though, so I don't know it woulda ended up with extra use? But yeah, a rogue module could get hungry :)

[17:41] <jnthn> Guess can run it with ulimit or some such

[17:42] <ugexe> zef uses proc

[17:43] <Zoffix> Yeah, it always used Proc::Async and last release I toasted on near-2017.07 and everything worked. I'd guess it's some module

[17:44] <Skarsnik> Writing a binding to libxml2 with gptrixie to use it in gptrixie is interesting x)

[17:47] <Geth> ¦ rakudo: lucasbuchala++ created pull request #1131: Add .Complex coercion method to Cool

[17:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1131

[17:50] <Geth> ¦ rakudo/nom: c9de2184dc | (Lucas Buchala)++ | src/core/Cool.pm

[17:50] <Geth> ¦ rakudo/nom: Add .Complex coercion method to Cool

[17:50] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c9de2184dc

[17:50] <Geth> ¦ rakudo/nom: a30ce6bca8 | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Cool.pm

[17:50] <Geth> ¦ rakudo/nom: Merge pull request #1131 from lucasbuchala/coomplex

[17:50] <Geth> ¦ rakudo/nom:

[17:50] <Geth> ¦ rakudo/nom: Add .Complex coercion method to Cool

[17:50] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a30ce6bca8

[17:51] <lucasb> Zoffix: thank you

[17:52] <Zoffix> lucasb++ thank you!

[17:58] <TimToady> apparently :dba('foo') has been broken in user-level grammars since forever...it parses it but never does calls reduce on quote_EXPR for some reason

[18:09] <Zoffix> hehe, URI.pm fails its tests do to .parse changes

[18:09] <Zoffix> (it's used by Toaster and failed install :)

[18:10] <Zoffix> s/do/due/;

[18:16] <Zoffix> bah. Toaster itself doesn't seem to want to start. Says "Confused"; guessing the X::Syntax::Confused from .parse somewhere :/

[18:18] <Skarsnik> hm I am curious what should be expected with that

[18:18] <Skarsnik> m: my $hash = {a => "b"}; class FHash { method AT-KEY($key) {"b"}}; say $hash<a>:exists; my FHash $fh .= new; say $fh<a>:exists;

[18:18] <camelia> rakudo-moar a30ce6: OUTPUT: «True?False?»

[18:20] <Zoffix> AlexDaniel: I give up again.

[18:20] <Zoffix> But I'd argue the fact that I can't even start toasting when running it on HEAD commit due is an indication the .parse() change has large impact.

[18:20] <timotimo> Skarsnik: if you don't implement EXISTS-KEY, you'll get that :)

[18:20] <Zoffix> Toaster doesn't even do much networking.

[18:20] <Skarsnik> Haaa

[18:21] <Skarsnik> is there the same for defined-keys?

[18:21] <timotimo> defined-keys?

[18:21] <Skarsnik> m: my $hash = {a => "b"}; class FHash { method AT-KEY($key) {"b"}}; say $hash<a>:defined; my FHash $fh .= new; say $fh<a>:defined;

[18:21] <camelia> rakudo-moar a30ce6: OUTPUT: «Unexpected named argument 'defined' passed?  in block <unit> at <tmp> line 1??»

[18:21] <timotimo> i don't think that's a thing

[18:21] <Skarsnik> m: my $hash = {a => "b"}; class FHash { method AT-KEY($key) {"b"}}; say $hash<a>:defined;;

[18:21] <camelia> rakudo-moar a30ce6: OUTPUT: «Unexpected named argument 'defined' passed?  in block <unit> at <tmp> line 1??»

[18:21] <Zoffix> It's .defined

[18:22] <jnthn> TimToady: I had :dba in Rakudo as an NYI, fwiw

[18:24] <timotimo> you had me at "NYI"

[18:27] <Zoffix> But if anyone wants to run Toaster, just grab a brand new debian ISO, run it in some VM, and just copy-paste these instructions: https://github.com/zoffixznet/perl6-Toaster#blank-debian-gce-vm-setup

[18:27] <Zoffix> You don't need a 64-core box :) You'd just have to wait longer. And I don't have the patience to do these builds that seem to crash in the middle of it :/

[18:28] <Zoffix> And on HEAD Toaster doesn't start. Says confused pointing to "Connection: closed", which I'm guessing some Grammar.parse failure in URI or some networking module

[18:35] <TimToady> jnthn: but it just calls down into nqp's regex engine to parse, so it should at least call reduce on quote_EXPR, unless it's misparsing somehow...hmm....

[18:36] <jnthn> Hm, true

[18:36] <AlexDaniel> Zoffix: it's ok, thank you for your effort. I simply didn't have enough time to get my hands on it, but will do after release

[18:37] <TimToady> it IS misparsing!

[18:37] <TimToady> m: say "abc" ~~ /:dba("foo") abc/

[18:37] <camelia> rakudo-moar a30ce6: OUTPUT: «Nil?»

[18:37] <TimToady> m: say "abc" ~~ /:dba("") abc/

[18:37] <camelia> rakudo-moar a30ce6: OUTPUT: «?abc?? 0 => ???»

[18:38] <TimToady> m: say "abc" ~~ /:dba("abc")/

[18:38] <camelia> rakudo-moar a30ce6: OUTPUT: «?abc?? 0 => ?abc??»

[18:39] <TimToady> that would definitely explain why it's not reducing the argument :)

[18:39] <jnthn> lol

[18:43] <Geth> ¦ nqp: f48e972ad3 | (Robert Lemmen)++ | 3 files

[18:43] <Geth> ¦ nqp: support hardware_concurrency op from moar and implement for jvm

[18:43] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/f48e972ad3

[18:43] <Geth> ¦ nqp: 5ab70b5834 | (Robert Lemmen)++ | 3 files

[18:43] <Geth> ¦ nqp: match renamed opcode "cpucores" in moar

[18:43] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5ab70b5834

[18:43] <Geth> ¦ nqp: fd1fefaff5 | niner++ (committed using GitHub Web editor) | 3 files

[18:43] <Geth> ¦ nqp: Merge pull request #362 from robertlemmen/master

[18:43] <Geth> ¦ nqp:

[18:43] <Geth> ¦ nqp: support hardware_concurrency op from moar and implement for jvm

[18:43] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/fd1fefaff5

[18:48] <Geth> ¦ rakudo/curfs-candidates-refactor: d533d450da | (Nick Logan)++ (committed using GitHub Web editor) | src/core/CompUnit/Repository/FileSystem.pm

[18:48] <Geth> ¦ rakudo/curfs-candidates-refactor: Fix CURFS.id when files are added after first load

[18:48] <Geth> ¦ rakudo/curfs-candidates-refactor:

[18:48] <Geth> ¦ rakudo/curfs-candidates-refactor: Fixes spectest failures from caching too aggressively.

[18:48] <Geth> ¦ rakudo/curfs-candidates-refactor:

[18:48] <Geth> ¦ rakudo/curfs-candidates-refactor: This also returns to using a cached `$!id`

[18:48] <Geth> ¦ rakudo/curfs-candidates-refactor: review: https://github.com/rakudo/rakudo/commit/d533d450da

[19:14] <Geth> ¦ rakudo: ugexe++ created pull request #1132: Add candidates method as CURFS recommendation manager

[19:14] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1132

[19:44] <Zoffix> .in 1hr check on Toast

[19:44] <yoleaux> Zoffix: I'll remind you at 20:44Z

[19:44] * Zoffix relocates

[19:45] <Skarsnik> interesting feature ^^

[20:07] <nine> 5.898s for 100000 rows!

[20:13] <nine> Less than a year ago it was ~9 seconds for just 10000 rows, i.e. 1/10 of the iterations :)

[20:13] <brrt> badass

[20:14] <Skarsnik> and I think xml parsing take half the time than last year or something like that

[20:43] <TimToady> jnthn: I think I figgered it out: rakudo's regex grammar mixes in STD, which defines starter/stopper as <!> rather than using dynvars, so quote_EXPR will never match

[20:44] <yoleaux> Zoffix: check on Toast

[20:55] <Skarsnik> yeah burned toast is not good

[21:17] <samcv> releasable6, status

[21:17] <releasable6> samcv, Next release in 1 day and ?21 hours. 1 blocker. 164 out of 194 commits logged

[21:17] <releasable6> samcv, Details: https://gist.github.com/7b517b4462b475f813c9a8e801fa20ef

[21:23] <jnthn> TimToady: Yeah, quote_EXPR is kinda the NQP way of parsing quotes; Rakudo started out that way but took on STD's Q language approach

[21:28] <TimToady> changing nqp's starter/stopper rules to dynstarter/dynstopper makes :dba work in rakudo

[21:28] <Zoffix> greppable6: 030_default-log-level.t

[21:28] <greppable6> Zoffix, Found nothing!

[21:29] <Zoffix> AlexDaniel: feature request: ability to find to which distro a filename belongs too; aka tree -f | grep XXX :)

[21:30] <Zoffix> also 020_ff.t

[21:30] <jnthn> TimToady: Ah, cool :)

[21:31] <Zoffix> phew killed them in a nick of time. The 030_default-log-level was using 50GB of RAM and 020_ff.t had two instances using 20GB each.

[21:31] <jnthn> o.O

[21:31] <Zoffix> (nick being the VM having only 100GB of RAM and it was about to kill the Toast run :))

[21:32] <Zoffix> Note: this is on 2017.07, so I assume the problem is in module(s)

[21:32] <TimToady> jnthn: though nqp's idea of :dba is a bit too dynamic, insofar as it only lists the alternatives you actually tried after filtering through LTM, not all the possible alternatives at that spt

[21:32] <Zoffix> ./moznion/p6-Log-Minimal/t/030_default-log-level.t

[21:32] <Zoffix> ./moznion/p6-Log-Minimal/t/020_ff.t

[21:33] <Zoffix> buggable: eco Minimal

[21:33] <buggable> Zoffix, Found 11 results: JSON::Tiny, App::Mi6, Frinfon, Log::Minimal, PDF::Lite. See https://modules.perl6.org/s/Minimal

[21:33] <Zoffix> Hm, nope. No changes in the module's code since ages ago...

[21:34] <jnthn> TimToady: Oh, interesting... :)

[21:34] <jnthn> TimToady: So maybe fixing that gets us better errors, or more spurious suggestions? :)

[21:39] <Zoffix> Opened an Issue on author's module: https://github.com/moznion/p6-Log-Minimal/issues/8

[21:41] <TimToady> also, doing it dynamically probably recalculates the same list over and over, so maybe we could find a good peg to hang it on and calculate expectations once per set

[21:41] <Zoffix> stmuk: re banned on Freenode: just got a user notice saying they're battling some massive spam so they kline was temporary

[21:41] <TimToady> as for spurious, I'd rather list them all and then allow people to specify :dba('') to suppress the noisy ones

[21:43] <jnthn> True

[21:44] <geekosaur> the new blog says they had a bot go slightly haywire and try to kline all active users

[21:44] <geekosaur> *news blog

[21:45] <Skarsnik> wtf are these VM with 100Gb?

[21:45] <Zoffix> So the robot uprising begins?

[21:46] <Zoffix> Skarsnik: Google Compute Engine. 100GB is nothing. Here's my current maximum: http://i.imgur.com/ceRzOZm.png

[21:46] <Zoffix> bah

[21:47] <Zoffix> .tell Skarsnik RE wtf are these VM with 100GB.... It's Google Compute Engine. 100GB is nothing. Here's my current maximum: http://i.imgur.com/ceRzOZm.png  And I've seen news they plan to expand it to 128-core VMs (presumably with even more RAM) some time soonish

[21:47] <yoleaux> Zoffix: I'll pass your message to Skarsnik.

[21:50] <Geth> ¦ rakudo/curfs-candidates-refactor: 877e7dc0ca | (Nick Logan)++ (committed using GitHub Web editor) | src/core/CompUnit/Repository/FileSystem.pm

[21:50] <Geth> ¦ rakudo/curfs-candidates-refactor: Use version * for -Ilib; populate resources field

[21:50] <Geth> ¦ rakudo/curfs-candidates-refactor: review: https://github.com/rakudo/rakudo/commit/877e7dc0ca

[21:53] <AlexDaniel> Zoffix: https://github.com/perl6/whateverable/issues/210

[21:57] <Zoffix> cool

[21:57] <stmuk> wibble

[22:05] <Zoffix> oh crap. This was actually a HEAD run, not 2017.07 (and 2017.07 finished without issues apparently)

[22:08] <Zoffix> holy shit

[22:08] <Zoffix> buggable: toast

[22:08] <buggable> Zoffix, Between 2017.07-194-ga30ce6b and 2017.07: 48 (5.60%) modules got burnt; 55 (6.42%) got unsucced; 367 (42.82%) out of 857 modules appear unusable. See https://toast.perl6.party/ for details.

[22:08] <Zoffix> AlexDaniel: ^ lots of burnage

[22:09] <Zoffix> I'm hoping those results aren't bogus due to some issues in Toaster itself

[22:09] <Zoffix> Half the ecosystem is unusable :/

[22:09] <AlexDaniel> “Aborting due to fetch failure” ?

[22:10] <Zoffix> Which one is it?

[22:11] <Zoffix> Ah

[22:11] <Zoffix> It's the version thing, innit?

[22:11] <Zoffix> nope

[22:11] <jnthn> I've looked at 5 so far and they are all that

[22:11] <Zoffix> No idea why. The fetch failure is likely an error from zef

[22:12] * Zoffix upgrades rakudo locally and tries to install Test::META

[22:12] <jnthn> Also Can't extract non-existent path: /home/cpan/.zef/tmp/File-Find.git

[22:23] <ugexe> sounds like rate limiting to me

[22:32] <ugexe> it could also be that the toaster is using multiple zef processes, all of which are using the same tmp/

[22:34] <Zoffix> ugexe: then that is it. The toaster is using like 30 zef processes and if it's reporting ~/.zef/tmp then they're all saving there; I guess only --install-to is different

[22:35] <Zoffix> Yeah, no issues installing Test::META locally. :(

[22:38] <ugexe> https://github.com/ugexe/zef/blob/33c18c90000df37df15e7612100bdbf0ebfd6799/lib/Zef/Client.pm6#L277 (if you comment this out, I think it'll work again)

[22:52] <ugexe> it looks like tacking on a random directory in tmp/ works, which should fix it. testing that right now

[22:58] <Zoffix> huggable: hymn of the butterfly :is: https://www.youtube.com/watch?v=aPy0hAmHu90

[22:58] <huggable> Zoffix, Added hymn of the butterfly as https://www.youtube.com/watch?v=aPy0hAmHu90

[22:58] <Zoffix> \m/

[22:58] * Zoffix calls it a night

[22:59] <Zoffix> Gonna try to re-run Toast on HEAD some time tomorrow.

[22:59] <ugexe> i'll have a workaround in zef by then

[22:59] <Zoffix> ugexe++ thanks

[23:00] <ugexe> I think I fixed the localcache to be multi zef friendly too... so might be worth trying without disabling it

[23:25] <ugexe> suspected fix in 0.1.27
