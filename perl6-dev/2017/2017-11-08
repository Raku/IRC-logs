[00:00] <timotimo> what i had would make formatting codes that span multiple rows work, though

[00:01] <tbrowder> not sure it’s better ref formatting codes, at least verbatim ones, but otherwise i think they are preserved ok.

[00:02] <tbrowder> i did get Z comments deleted ok i think.

[00:03] <tbrowder> i do need to add some tests for formatting codes...

[00:03] <timotimo> always a good idea

[00:04] <tbrowder> but i don’t think there weren’t any before my changes, just to be fair.

[00:05] <timotimo> there were a few, i believe

[00:05] <samcv> this doesn't seem like a bug https://rt.perl.org/Ticket/Display.html?id=132217

[00:06] <tbrowder> timotimo: can you point them out?

[00:07] <tbrowder> anyway, all current pod tests pass.

[00:07] <tbrowder> plus the tests i did add, of course.

[00:11] <timotimo> er, no clue

[00:12] <timotimo> agree, samcv

[00:12] <tbrowder> there is a roast test for formatting code, but not in tab

[00:12] <tbrowder> es

[00:12] <tbrowder> *tables

[00:18] <samcv> going to fix this LTA where using a glyph with a combiner just gives a normal error and change it to

[00:19] <samcv> Starter [̈ is immediately followed by a combining codepoint. Please use [ without a combining glyph ([̈ was at line 1)

[00:19] <samcv> i think that's much clearer

[00:20] <samcv> there's some other "Couldn't find terminator" $/.panic's in Grammar.nqp for rakudo but i'm not sure if i should add those to do the same thing

[00:20] <samcv> since i'm not really sure what triggers them

[00:21] <samcv> in `tribble` and `sibble`

[00:21] <samcv> i changed the one in quibble

[00:21] <samcv> can anybody tell me what tribble and sibble are :P

[00:22] <timotimo> yup

[00:22] <timotimo> they are nibblers for tr/// and s///

[00:22] <samcv> ah

[00:23] <samcv> should i add that as a comment?

[00:46] <Geth> ¦ rakudo: ad7c97dfb4 | (Samantha McVey)++ | src/Perl6/Grammar.nqp

[00:46] <Geth> ¦ rakudo: Fix LTA error when starter is followed by a combining codeponit

[00:46] <Geth> ¦ rakudo:

[00:46] <Geth> ¦ rakudo: Affects q quoting, s/// and possibly tr///. Notifies the user that they

[00:46] <Geth> ¦ rakudo: are using a combining codepoint after the starter and to remove it for

[00:46] <Geth> ¦ rakudo: it to properly parse.

[00:46] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/ad7c97dfb4

[01:00] <Geth> ¦ roast: f99444b18f | (Samantha McVey)++ | 2 files

[01:00] <Geth> ¦ roast: Add test for .uc/.lc with prepend codeponints. RT132020

[01:00] <Geth> ¦ roast:

[01:00] <Geth> ¦ roast: Add a test to close RT132020. This test makes sure .uc works properly

[01:00] <Geth> ¦ roast: even when a GCB=Prepend codepoint comes in front of it.

[01:00] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f99444b18f

[01:00] <synopsebot> RT#132020 [new]: https://rt.perl.org/Ticket/Display.html?id=132020 [UNI] Prepend character breaks case changing functions on MoarVM

[01:11] <timotimo> why can't i quote with brackets that have combiners on them ...

[01:31] <samcv> heh. well you *might* be able to. not sure. regardless this doesn't impose any extra restrictions

[01:32] <samcv> it just makes the error better

[01:32] <samcv> timotimo, you can

[01:32] <samcv> m: "q[\x[308]foo[\x[308]".EVAL.perl.say

[01:32] <camelia> rakudo-moar ad7c97dfb: OUTPUT: «"foo"␤»

[01:32] <samcv> but it doesn't identify them as brackets

[01:33] <samcv> but as the *any* symbol type thing

[01:34] <timotimo> ah

[01:35] <samcv> i mean we could probably fix that so it could work

[01:35] <samcv> though really it's kind of "a bad idea"

[01:37] <samcv> i mean it would be nice if it could include the combiner as part of the string. but that just seems to be asking for problems for an edge case. and it only affects things typed into the .p6 document. so in fear of violating unicode principles it's prolly best to not let you do that

[01:39] <timotimo> yeah, users will probably ahve to resort to \x or \c to get a dangling combiner as the first character

[03:28] <Geth> ¦ tap-harness6: 0e2172394d | (Zoffix Znet)++ (committed using GitHub Web editor) | META6.json

[03:28] <Geth> ¦ tap-harness6: Bump vesion

[03:28] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/commit/0e2172394d

[06:18] * samcv is working on some bugs right now and going through and tagging untagged stuff-

[06:18] <samcv> in RT that is

[06:21] <samcv> is it just me or is compiling rakudo taking a lot longer than it used to?

[06:22] <samcv> i haven't measured it so no clue if that's actually true or not

[06:27] <travis-ci> Rakudo build passed. Samantha McVey 'Fix LTA error when starter is followed by a combining codeponit

[06:27] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/298858613 https://github.com/rakudo/rakudo/compare/0e50993f4142...ad7c97dfb4b1

[06:58] <Geth> ¦ roast: 9bb245211c | usev6++ | S17-supply/syntax.t

[06:58] <Geth> ¦ roast: [jvm] Skip new test that uses atomicint

[06:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/9bb245211c

[08:01] <Geth> ¦ nqp: 2b13b1f781 | (Samantha McVey)++ | src/HLL/sprintf.nqp

[08:01] <Geth> ¦ nqp: Add support for '+' flag for %b in sprintf

[08:01] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/2b13b1f781

[08:01] <Geth> ¦ nqp: a02ff393db | (Samantha McVey)++ | t/hll/06-sprintf.t

[08:01] <Geth> ¦ nqp: Correct incorrect tests with %b and + option in sprintf

[08:01] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a02ff393db

[08:18] <Geth> ¦ rakudo: b0cda59091 | (Samantha McVey)++ | tools/build/NQP_REVISION

[08:18] <Geth> ¦ rakudo: Bump nqp for sprintf fix

[08:18] <Geth> ¦ rakudo:

[08:18] <Geth> ¦ rakudo: Changes: 2017.10-46-gf263b9c..2017.10-54-ga02ff393d

[08:18] <Geth> ¦ rakudo: a02ff393d Correct incorrect tests with %b and + option in sprintf

[08:18] <Geth> ¦ rakudo: 2b13b1f78 Add support for '+' flag for %b in sprintf

[08:18] <Geth> ¦ rakudo: 4e0dfc54d [jvm] Implement close for ServerSocketHandle

[08:18] <Geth> ¦ rakudo: 9d28fccb2 [js] Add missing file

[08:18] <Geth> ¦ rakudo: 00e8bd16c Test accepts_type

[08:18] <Geth> ¦ rakudo: a05185458 [js] Take a named argument that might be passed

[08:18] <Geth> ¦ rakudo: 17ce8f83d [jvm] Implement 'getport' for ServerSocketHandle

[08:18] <Geth> ¦ rakudo: b21e0e25f [jvm] Skip not yet fixed test

[08:18] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/b0cda59091

[08:20] <Geth> ¦ roast: 77270a1df8 | (Samantha McVey)++ | S32-str/sprintf-b.t

[08:20] <Geth> ¦ roast: Untodo many sprintf %b tests should close RT124696

[08:20] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/77270a1df8

[08:20] <synopsebot> RT#124696 [new]: https://rt.perl.org/Ticket/Display.html?id=124696 Roast rakudo skip/todo test:./S32-str/sprintf-b.t line:23 reason: '%b with flag plus not correct'

[09:31] <samcv> m: use nqp;  say(nqp::sprintf('%010d',   [-9]))

[09:31] <camelia> rakudo-moar b0cda5909: OUTPUT: «Directive d not applicable for type VMNull␤␤»

[09:31] <samcv> m: use nqp;  say(sprintf('%010d',   -9))

[09:31] <camelia> rakudo-moar b0cda5909: OUTPUT: «-000000009␤»

[09:31] <samcv> m: use nqp;  say(sprintf('%010b',   -9))

[09:31] <camelia> rakudo-moar b0cda5909: OUTPUT: «00000-1001␤»

[09:32] <samcv> well i figured how %b and %d differ in sprintf and how it adds the extra 0's in a different place for %b. which seems very odd… and will need to fix that for more things than ust %b possibly. not sure if any other directives have that issue aside from %b

[09:33] <samcv> i think it has something to do with %g directive though. based on how sprintf works in nqp. and the different order of things is what causes it

[09:34] <Geth> ¦ rakudo/js: 95991afd3d | pmurias++ | src/core/Lock/Async.pm

[09:34] <Geth> ¦ rakudo/js: [js] Disable locking code that serves no purpose

[09:34] <Geth> ¦ rakudo/js:

[09:34] <Geth> ¦ rakudo/js: It needs to be fixed on the js backend as it's causing exceptions

[09:34] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/95991afd3d

[09:34] <samcv> i would like the %b directive to return from the method *with* the prepended 0's and - sign instead of adding it later but will have to work on that

[09:34] <samcv> so it doesn't affect any other directives and break %g and maybe others

[09:39] <samcv> anybody know if i can differentiate between token directive:sym<b>($/) and token method directive:sym<foo>($/) by using what's in $/?

[09:40] <samcv> $<directive> is availible but is there a way to see if $<directive> in $/ is from sym<b> or sym<foo>

[09:56] <[Tux]> Rakudo version 2017.10-145-gb0cda5909 - MoarVM version 2017.10-58-gad8618468

[09:56] <[Tux]> csv-test-xs-20      0.444 -  0.451

[09:56] <[Tux]> csv-ip5xs           1.121 -  1.203

[09:56] <[Tux]> test-t --race       1.280 -  1.360

[09:56] <[Tux]> test-t              3.248 -  3.249

[09:56] <[Tux]> csv-parser         12.165 - 12.232

[09:56] <[Tux]> test               12.186 - 12.264

[09:56] <[Tux]> csv-ip5xs-20       12.981 - 13.450

[09:56] <[Tux]> test-t-20 --race   20.542 - 21.141

[09:56] <[Tux]> test-t-20          59.165 - 59.543

[09:56] <[Tux]> (on lizmat' request "test-t --race" added

[10:45] <Geth> ¦ nqp: 63093556e0 | usev6++ | src/HLL/sprintf.nqp

[10:45] <Geth> ¦ nqp: Improve handling of flags for '%b' directive

[10:45] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/63093556e0

[10:45] <Geth> ¦ nqp: aa86255e75 | usev6++ | t/hll/06-sprintf.t

[10:45] <Geth> ¦ nqp: Adjust tests for '%b'

[10:45] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/aa86255e75

[10:45] <Geth> ¦ nqp: a09c78780f | (Samantha McVey)++ | 2 files

[10:45] <Geth> ¦ nqp: Merge branch 'sprintf' into master

[10:45] <Geth> ¦ nqp:

[10:45] <Geth> ¦ nqp: Merge the sprintf branch from 2 years ago into master for better

[10:45] <Geth> ¦ nqp: handling of %b spacing.

[10:46] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/a09c78780f

[10:46] <samcv> bartolin: got the sprintf merged after doing some conflict resolution

[10:46] <samcv> \ol

[10:46] <samcv> \o/

[10:55] <lizmat> Files=1229, Tests=75812, 318 wallclock secs (14.80 usr  5.37 sys + 2191.30 cusr 216.48 csys = 2427.95 CPU)

[11:26] * Zoffix is considering taking out the "community" spread (or at least the photo): https://twitter.com/ribasushi/status/928182573725085696

[11:27] <Zoffix> Usually, we get the people in pics to sign the photo model release document, to avoid people suing and saying you made $x benefit from my pic, you owe me.

[11:29] <pmurias> Zoffix: we don't have a more Perl 6 focused picture?

[11:31] <Zoffix> pmurias: the only ones I know are just 4-9 people (e.g. https://www.facebook.com/photo.php?fbid=907719199295931&set=gm.1609981415934878&type=3&theater ). It doesn't sell "community" well. And still have the issue of someone going rogue and spoiling the broth for everyone.

[11:31] <Zoffix> And on unrelated note... didn't riba say if his fundraiser failed he'd leave Perl community forever or did I miss the "I'll stay and troll everyone" clause?

[11:48] <lizmat> Zoffix: FWIW, I like the spread

[11:49] <lizmat> but I guess we will have to ask every individual in that photo to actually give permission

[11:50] <lizmat> before we can actually use it

[11:50] <lizmat> shall I take that task ?

[11:51] <lizmat> wrt riba: he just likes to stoke up things, I think he's done enough for Perl that he can't be labelled "troll" just like that

[11:52] <lizmat> for that, other people come to mind (regardless of how much they've done)

[11:53] <lizmat> but in both cases, it's the scorned lover and hell has no fury kind of thing, I guess  :-(

[11:58] <Zoffix> lizmat: that sounds like a hell of a task, so I'll leave it up to you. I like the photo too.

[11:59] <Zoffix> lizmat: and if anyone says no, ask them if they're OK with just their face covered with a camelia logo.

[12:00] <lizmat> no, if anyone says no, it's a no go for the picture I think: blocking out people in that picture will just give the wrong signal, I think

[12:01] <Zoffix> OK.

[12:03] <jnthn> Also, should perhaps try to take a photo explicilty for these purposes the next time we can get sufficiently many Perl 6 developing/using folks in the same place :)

[12:04] <lizmat> I guess LPW would be the next opportunity

[12:42] <Geth> ¦ rakudo: f8e1a5faab | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[12:42] <Geth> ¦ rakudo: Separate the Instrument from the Snap

[12:42] <Geth> ¦ rakudo:

[12:42] <Geth> ¦ rakudo: - before, the Instrument object would contain the snap

[12:42] <Geth> ¦ rakudo:   - this seemed like a good idea at the time

[12:42] <Geth> ¦ rakudo:   - but isn't, because we cannot instantiate an Instrument

[12:42] <Geth> ¦ rakudo: - introduces the Telemetry::Instrument::Snap role

[12:42] <Geth> ¦ rakudo:   - which is mostly what Telemetry::Instrument was

[12:42] <Geth> ¦ rakudo:   - minus "formats" and "columns"

[12:42] <Geth> ¦ rakudo: - should make it easy to make a Telemetry::Instrument::AdHoc

[12:42] <Geth> ¦ rakudo:   - which could e.g. just take a number of variables to snap

[12:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f8e1a5faab

[13:06] <lizmat> do we have a (un)official way to attach a WHY to a scalar container ?

[13:06] <lizmat> #| Because(nl)my $a = 42; dd $a.VAR.WHY

[13:07] <lizmat> doesn't work :(

[13:31] <lizmat> would there be anything against adding a "has str $!why" to Perl6/Metamodel/ContainerDescriptor.nqp

[13:31] <lizmat> and trying to make at least #| work on variable declarations ?

[13:32] <jnthn> Aren't variables more implementation detail than documentable API?

[13:32] <lizmat> well, I guess that's true,

[13:32] <lizmat> hmmm...

[13:32] <timotimo> the rakudo ops (the C code) have a struct that mirrors the structure of ContainerDescriptor, so if you change one, you should also change the other, or explosions

[13:33] <lizmat> timotimo: odd, I just added it without any explosions during build *or* spectest

[13:33] <jnthn> But if we did do it then yeah, ContainerDescriptor would be the cheapest place. Also what timotimo said is true, though adding it as the last attribute wouldn't trip that up.

[13:33] <timotimo> yeah, put it last and nothing explodes

[13:33] <timotimo> try putting it in the middle for some *fun*

[13:33] <jnthn> Putting it on Scalar would add 8 bytes to every array/hash element since they are also Scalars :)

[13:33] <lizmat> ah, it *was* the last attribute

[13:33] <lizmat> yeah, so maybe not such a good idea :-)

[13:34] <lizmat> my reasoning was to have a Telemetry::Instrument::Adhoc

[13:34] <jnthn> Well, ContainerDescriptor is shared among Scalar, so it's not quite so bad, though still makes every static var cost a bit more

[13:35] <lizmat> that would allow you to : $*SAMPLES = T::I::Adhoc( $var1, $var2, $var3) and have the legend auto-generate from the WHY of the containers

[13:35] <jnthn> ah

[13:35] <timotimo> we can totally have a pass in the optimizer that replaces all lexical variables in internal functions with the same set of names :P

[13:35] <jnthn> Alternative API would be LegendLabel => $var

[13:36] <jnthn> And if you just want the name of the var as the legend label use :$var1

[13:36] <lizmat> well, the named approach is not an option, as I want to snap the container (and changes in it)

[13:37] <lizmat> I lose the container with the :$name syntax

[13:37] <jnthn> *%maybe-slurp-them-with is raw ? :)

[13:37] <lizmat> jnthn: no, doesn't work either :-)

[13:37] <jnthn> Really?

[13:37] <lizmat> pretty sure, lemme double check

[13:38] <jnthn> m: my $a = 42; sub f(*%h is raw) { say %h<a>.VAR.name }; foo(:$a)

[13:38] <camelia> rakudo-moar f8e1a5faa: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    foo used at line 1␤␤»

[13:38] <jnthn> m: my $a = 42; sub f(*%h is raw) { say %h<a>.VAR.name }; f(:$a)

[13:38] <camelia> rakudo-moar f8e1a5faa: OUTPUT: «$a␤»

[13:38] <lizmat> hmmm... cool

[13:38] <jnthn> Works on somebody's machine :-)

[13:39] <lizmat> ok, so that solves that part

[13:54] <alexk6_> m: package A { package B { package C::B {}}}; say A::B::C::B.WHAT;

[13:54] <camelia> rakudo-moar f8e1a5faa: OUTPUT: «(B)␤»

[13:54] <alexk6_> m: package A { package B { package A::B {}}}; say A::B::A::B.WHAT;

[13:54] <camelia> rakudo-moar f8e1a5faa: OUTPUT: «Could not find symbol '&B'␤  in block <unit> at <tmp> line 1␤␤»

[13:54] <alexk6_> is that a bug?

[13:56] <lizmat> alexk6_: not 100% sure, but definitely an issue that needs clarification :-)

[13:56] <lizmat> afk for a few hours&

[13:57] <alexk6_> m: package A::B::A::B {}; say A::B::A::B.WHAT

[13:57] <camelia> rakudo-moar f8e1a5faa: OUTPUT: «(B)␤»

[14:00] <Zoffix> lizmat: is David Golden one of the people in the pic?

[14:05] <lizmat> Zoffix: no

[14:06] <lizmat> David Golden was not at the PTC 2017

[14:06] <lizmat> why ?

[14:08] <Zoffix> lizmat: he commented on riba's tweet about not wanting to be included next year. If he were on this pic, that would've saved the trouble of asking everyone else :)

[14:13] <AlexDaniel> releasable6: status

[14:13] <releasable6> AlexDaniel, Next release in 10 days and ≈4 hours. No blockers. 0 out of 146 commits logged

[14:13] <releasable6> AlexDaniel, Details: https://gist.github.com/40cc059e0f703e9bd6176ccfb1b4dfcf

[14:31] <ggoebel> ./perl6-js -e 'say(123)'

[14:31] <ggoebel> ThreadPoolScheduler is not implemented on the JS backend

[14:34] <ggoebel> make js-spectest

[14:34] <ggoebel> cd t/spec && git pull --ff-only

[14:34] <ggoebel> Already up-to-date.

[14:34] <ggoebel> Use of bare << to mean <<"" is deprecated at t/harness5 line 43.

[14:34] <ggoebel> syntax error at t/harness5 line 52, near "HEAD

[14:34] <ggoebel> my "

[14:34] <ggoebel> (Might be a runaway multi-line '< string starting on line 49)

[14:35] <ilmari> looks like you've got a merge conflict in t/harness5

[15:15] <pmurias> ggoebel: hi

[15:17] <pmurias> ggoebel: do you have the latest commit in the js branch, this looks like something I have fixed

[15:32] <Geth> ¦ rakudo: ggoebel++ created pull request #1241: fix merge conflict

[15:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1241

[15:32] <synopsebot> RAKUDO#1241 [open]: https://github.com/rakudo/rakudo/pull/1241 fix merge conflict

[15:35] <ggoebel> pmurias: https://github.com/rakudo/rakudo/blob/js/t/harness5#L43

[15:38] <ilmari> ggoebel: with perl 5.26 you would have got a more awesome error message: Version control conflict marker at t/harness5 line 43, near "<<<<<<<"

[15:40] <pmurias> ggoebel: thanks for fixing

[15:40] <ggoebel> ilmari: Nice. I'm only running 5.22.1 perhaps if I were still using gentoo... switched to ubuntu LTS a while ago... And I've mostly stopped installing/tracking personal current perl5 distributions.

[15:41] <ggoebel> pmurias: thanks for your continued efforts on perl6-js :-)

[15:41] <pmurias> ggoebel: does the ThreadPoolScheduler bug occur in the latest commit

[15:41] <ggoebel> yes

[15:41] <Geth> ¦ rakudo/js: a628e1c608 | (Garrett Goebel)++ | t/harness5

[15:41] <Geth> ¦ rakudo/js: fix merge conflict

[15:41] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/a628e1c608

[15:41] <Geth> ¦ rakudo/js: e34f66e3a2 | (Paweł Murias)++ (committed using GitHub Web editor) | t/harness5

[15:41] <Geth> ¦ rakudo/js: Merge pull request #1241 from ggoebel/js

[15:41] <Geth> ¦ rakudo/js:

[15:41] <Geth> ¦ rakudo/js: fix merge conflict

[15:41] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/e34f66e3a2

[15:45] <pmurias> ggoebel: I'll build a fresh rakudo.js and see why the problem persists

[15:46] <ggoebel> pmurias: excellent. I'll run some errands and give it a go when I get back

[16:20] <Geth> ¦ rakudo/js: b998bfe576 | pmurias++ | tools/build/NQP_REVISION

[16:20] <Geth> ¦ rakudo/js: [js] Bump NQP

[16:20] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/b998bfe576

[16:20] <Geth> ¦ rakudo/js: 640491d60c | pmurias++ | t/harness5

[16:20] <Geth> ¦ rakudo/js: Merge branch 'js' of https://github.com/rakudo/rakudo into js

[16:20] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/640491d60c

[16:21] <Geth> ¦ nqp: af7f72c137 | pmurias++ | src/vm/js/Operations.nqp

[16:21] <Geth> ¦ nqp: [js] Fix if bug

[16:21] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/af7f72c137

[16:21] <Geth> ¦ nqp: 58083fe626 | pmurias++ | 2 files

[16:21] <Geth> ¦ nqp: [js] Implement nqp::cpucores

[16:21] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/58083fe626

[16:21] <Geth> ¦ nqp: 5dba8525b3 | pmurias++ | src/vm/js/nqp-runtime/reprs.js

[16:21] <Geth> ¦ nqp: [js] Move method into correct repr

[16:21] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/5dba8525b3

[16:22] <Geth> ¦ rakudo/js: 9463906b98 | pmurias++ | tools/build/NQP_REVISION

[16:22] <Geth> ¦ rakudo/js: [js] Bump NQP more correctly

[16:22] <Geth> ¦ rakudo/js: review: https://github.com/rakudo/rakudo/commit/9463906b98

[16:59] <pmurias> ggoebel: an un-updated nqp version was causing the problem

[17:39] <Zoffix__> lizmat, FYI: I'm cutting the pic. The Twitter thread is getting out of hand and Aristotle (who is in the picture) said they're weirded out.

[17:44] <Zoffix__> Cutting the whole community spread actually. People suck.

[17:45] * Zoffix__ de-tethers and returns to the land of network outage :(

[18:08] <lizmat> Zoffix: noted

[18:08] <yoleaux> 17:21Z <wander> lizmat: "tbrowder" is working on Pod::To::Table parsing at rakudo PR#1240.

[18:23] <ggoebel> pmurias: thanks! js-spectest is much happier :-)

[18:27] <ggoebel> All tests successful.

[18:27] <ggoebel> Files=36, Tests=1180, 199 wallclock secs ( 0.51 usr  0.09 sys + 1058.57 cusr 31.98 csys = 1091.15 CPU)

[20:12] <lizmat> .ask samcv do we have a way to assemble a unicode name at runtime and look that up ?

[20:12] <yoleaux> lizmat: I'll pass your message to samcv.

[20:13] <samcv> assemble?

[20:13] <yoleaux> 20:12Z <lizmat> samcv: do we have a way to assemble a unicode name at runtime and look that up ?

[20:13] <lizmat> m: my $a = "LATIN CAPITAL LETTER A"; say "\c[$a]"

[20:13] <camelia> rakudo-moar f8e1a5faa: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized \c character␤at <tmp>:1␤------> 3 $a = "LATIN CAPITAL LETTER A"; say "\c[7⏏5$a]"␤    expecting any of:␤        argument list␤        double quotes␤        term␤»

[20:16] <samcv> m: my $a = "LATIN CAPITAL LETTER A"; say $a.parse-names

[20:16] <camelia> rakudo-moar f8e1a5faa: OUTPUT: «A␤»

[20:16] <samcv> or you could use the nqp thing

[20:16] <samcv> nqp::getstrfromname()

[20:17] <lizmat> samcv++  :-)  thanks!

[20:51] <Geth> ¦ rakudo: ufobat++ created pull request #1242: RFC: Use IO::Spec in the method resolve of IO::Path

[20:51] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1242

[20:51] <synopsebot> RAKUDO#1242 [open]: https://github.com/rakudo/rakudo/pull/1242 RFC: Use IO::Spec in the method resolve of IO::Path

[21:18] <samcv> lizmat: np :-)

[21:33] <Geth> ¦ roast: 3560c6bf43 | usev6++ | S06-traits/misc.t

[21:33] <Geth> ¦ roast: Fix typo in comment

[21:33] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/3560c6bf43

[21:56] <pmurias> ggoebel: rakudo.js passes a loads more spec tests but I haven't but them in the spec test list

[23:26] <Geth> ¦ nqp: ugexe++ created pull request #381: Add getppid op for moarvm

[23:26] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/pull/381

[23:26] <synopsebot> NQP#381 [open]: https://github.com/perl6/nqp/pull/381 Add getppid op for moarvm
