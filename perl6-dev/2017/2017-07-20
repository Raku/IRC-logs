[00:02] <samcv> u: { .uniprop('GCB') eq 'Prepend' }

[00:02] <ugexe> so `run :merge` puts output into $proc.out, but Proc::Async.Supply creates a handle called `merge` which doesn't appear to be part of proc::async api

[00:02] <unicodable6> samcv, U+0600 ARABIC NUMBER SIGN [Cf] (؀ )

[00:02] <unicodable6> samcv, U+0601 ARABIC SIGN SANAH [Cf] (؁ )

[00:02] <unicodable6> samcv, 13 characters in total: https://gist.github.com/bdde5ea3ed429a4d61cb7e8bdfbf63ba

[00:03] <ugexe> `my $proc = Proc::Async.new: "echo", "test"; $proc.Supply.tap: {.say}; $proc.start; $proc.Supply.close`

[00:03] <ugexe> 'To avoid data races, you must tap merge before running the process'

[00:04] <samcv> m: use nqp; nqp::ordbaseat("\c[ARABIC NUMBER SIGN]3").say

[00:04] <camelia> rakudo-moar 5b6cd4: OUTPUT: «===SORRY!===␤Arg count 1 doesn't equal required operand count 3 for op 'ordbaseat'␤»

[00:05] <samcv> m: use nqp; nqp::ordbaseat("\c[ARABIC NUMBER SIGN]3", 0).say

[00:05] <camelia> rakudo-moar 5b6cd4: OUTPUT: «1536␤»

[00:05] <samcv> oh nice. it works

[00:05] <samcv> m: use nqp; nqp::ordbaseat("\c[ARABIC NUMBER SIGN]3", 1).say

[00:05] <camelia> rakudo-moar 5b6cd4: OUTPUT: «-1␤»

[00:05] <samcv> yay glad it works for prepend.

[00:05] * samcv &

[00:12] <AlexDaniel> ugexe: wait, tap what merge?

[00:13] <AlexDaniel> ah, it says that in the error message

[00:13] * AlexDaniel shrugs

[00:13] <ugexe> right, but there is no .merge tap

[00:17] <ugexe> for instance, one way to work around your recent issue would be to use `whenever $proc.stdout.merge($proc.stderr) { }` instead of `whenever $proc.Supply { }`

[00:18] <AlexDaniel> well, right now I just use .stdout and .stderr separately

[00:18] <AlexDaniel> and do the same kind of stuff with both of them

[00:18] <AlexDaniel> all that being in react block, so no issues whatsoever

[00:51] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Various Setty stringification improvements

[00:51] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/255425262 https://github.com/rakudo/rakudo/compare/d9055e80fe49...5b6cd4062c43

[01:25] <samcv> would anybody want this for 6.d. being able to enter hex codes as 0x<0D00 235 8FE>

[01:25] <samcv> which is the format that NFD.gist shows

[01:25] <samcv> or NFC.gist etc

[01:26] <samcv> m: 'á'.NFD.gist.say

[01:26] <camelia> rakudo-moar 5b6cd4: OUTPUT: «NFD:0x<0061 0301>␤»

[01:26] <samcv> currently that's not a way you can write out numbers in perl 6

[01:26] <samcv> could be useful though

[01:26] <samcv> u: U+0301

[01:26] <unicodable6> samcv, U+0301 COMBINING ACUTE ACCENT [Mn] ( ́)

[01:29] <samcv> AlexDaniel, it might look better if for combining marks we added more than just nonbreaking space

[01:29] <samcv> since that renders the accent on the parens for me

[01:29] <samcv> m: "( ́)".subst( ')' , "\c[NBSP,NBSP])").say

[01:29] <camelia> rakudo-moar 5b6cd4: OUTPUT: «( ́  )␤»

[01:30] <samcv> this for me looks like it is in the center. if i have "\c[NBSP]Mark\c[NBSP,NBSP]"

[01:30] <samcv> how do other people see that rendered?

[01:31] <samcv> or actually could render it as a normal space i guess

[01:31] <samcv> hm

[01:31] <samcv> m: "( ́)".subst( ')' , "\c[NBSP,NBSP])").uninames.say

[01:31] <camelia> rakudo-moar 5b6cd4: OUTPUT: «(LEFT PARENTHESIS NO-BREAK SPACE COMBINING ACUTE ACCENT NO-BREAK SPACE NO-BREAK SPACE RIGHT PARENTHESIS)␤»

[01:31] <samcv> though nonbreaking space would make it look much better if things wrapped

[01:37] <samcv> hexchat and konsole show it centered when you add two extra NBSP on the right side. but UXTerm shows it as the spaces would expect you to see it hm

[01:47] <samcv> m: "\c[LEFT PARENTHESIS,NO-BREAK SPACE,NO-BREAK SPACE,COMBINING ACUTE ACCENT,NO-BREAK SPACE,RIGHT PARENTHESIS]".say

[01:47] <camelia> rakudo-moar 5b6cd4: OUTPUT: «(  ́ )␤»

[01:59] <BenGoldberg> Sadly, http://irclog.perlgeek.de/perl6-dev/today shows the unicode in a way that's seriously messed up.

[02:05] <ugexe> AlexDaniel: looks like .Supply causes a deadlock `futex(0x45551d4, FUTEX_WAIT_PRIVATE, 1, NULL` <- what it locks up at every time

[02:06] <samcv> ugexe, i'm getting a failure for json for zef

[02:06] <samcv> ===> Updated cpan mirror: https://raw.githubusercontent.com/ugexe/Perl6-ecosystems/master/cpan.json

[02:06] <samcv> Invalid JSON: iner",

[02:07] <samcv> hmm but json::fast doesn't say the json is invalid

[02:07] <samcv> ugrading zef though

[02:08] <ugexe> for some reason it only tried to parse part of the json... probably only downloaded a partial file?

[03:00] <Geth> ¦ nqp: fdead1d448 | (David Warring)++ | examples/rubyish/t/interpolation.t

[03:00] <Geth> ¦ nqp: [examples/rubyish] fix interpolation test

[03:00] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/fdead1d448

[03:01] <samcv> hm

[06:43] <AlexDaniel> samcv: so should I use a regular space then?

[07:10] <[Tux]> This is Rakudo version 2017.07-20-g5b6cd4062 built on MoarVM version 2017.07

[07:10] <[Tux]> csv-ip5xs        2.601

[07:10] <[Tux]> test            12.998

[07:10] <[Tux]> test-t           4.263 - 4.294

[07:10] <[Tux]> csv-parser      12.383

[07:10] <[Tux]> Error encoding UTF-8 string: could not encode codepoint 1861622 (0x1C67F6), codepoint out of bounds. Cannot encode higher than 1114111 (0x10FFFF)

[07:10] <[Tux]> in block <unit> at 88.t line 21

[07:33] <nine> Zoffix: how can one reproduce the --ll-exception issue?

[07:41] <lizmat> $ perl6 --ll-exception -e 'die'   # nine

[08:58] <Geth> ¦ roast: 800317bc93 | (Elizabeth Mattijsen)++ | 2 files

[08:58] <Geth> ¦ roast: Exact output of .gist should not matter in coercion test

[08:58] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/800317bc93

[09:01] <Geth> ¦ rakudo/nom: 21b9a720c7 | (Elizabeth Mattijsen)++ | src/core/Baggy.pm

[09:01] <Geth> ¦ rakudo/nom: Various Baggy/Mixy stringification improvements

[09:01] <Geth> ¦ rakudo/nom:

[09:01] <Geth> ¦ rakudo/nom: - based on a ^100 .Bag

[09:01] <Geth> ¦ rakudo/nom: - .Str about 30% faster

[09:01] <Geth> ¦ rakudo/nom: - .gist about same speed *but* sorted: a long wish of TimToady

[09:01] <Geth> ¦ rakudo/nom: - .perl about 2x faster

[09:01] <Geth> ¦ rakudo/nom: - remove private method !LISTIFY, it is no longer needed

[09:01] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/21b9a720c7

[10:04] <Zoffix> nine: cause any exception while --ll-exception is used. I think one possible fix is instead of doing what the breaking commit did, shove a closure into the payload that calls self.message and then execute that closure in places the message is needed https://github.com/rakudo/rakudo/commit/1a4d94930c581e915a2351049e8ee12246c4c26c

[10:05] <Geth> ¦ rakudo/nom: 02667bd890 | (Timo Paulssen)++ | tools/build/Makefile-Moar.in

[10:05] <Geth> ¦ rakudo/nom: rm -f any already existing .moarvm files during install

[10:05] <Geth> ¦ rakudo/nom:

[10:05] <Geth> ¦ rakudo/nom: since .moarvm files are mmapped and bytecode lazily deserialized,

[10:05] <Geth> ¦ rakudo/nom: you can run into big trouble when rakudo gets updated while a

[10:05] <Geth> ¦ rakudo/nom: script is already running.

[10:05] <Geth> ¦ rakudo/nom:

[10:05] <Geth> ¦ rakudo/nom: by unlinking the files before overwriting them, this should never happen.

[10:05] <Geth> ¦ rakudo/nom:

[10:05] <Geth> ¦ rakudo/nom: uses a custom perl6 script because who knows if cp --remove-destination

[10:05] <Geth> ¦ rakudo/nom: is portable at all.

[10:06] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/02667bd890

[10:06] <nine> timotimo: this should also remove the need for a make clean after updating nqp I guess :)

[10:07] <timotimo> i don't think so

[10:15] <nine> Ah, because you run it after compilation

[10:20] <Zoffix> timotimo: that broke my bot

[10:20] <Zoffix> s: 3.3, 'gist', \()

[10:20] <SourceBaby> Zoffix, Something's wrong: ␤ERR: Unhandled exception: While looking for '/home/zoffix/services/sourceable/building-perl6/perl6.moarvm': no such file or directory␤

[10:21] <Zoffix> m: &say.line.say

[10:21] <camelia> rakudo-moar 02667b: OUTPUT: «16␤»

[10:21] <Zoffix> m: &say.file.say

[10:21] <camelia> rakudo-moar 02667b: OUTPUT: «SETTING::src/core/io_operators.pm␤»

[10:22] <timotimo> Zoffix: how did it do that?

[10:22] <Zoffix> No idea why the bot's looking for that file

[10:22] <timotimo> oh, that's how?

[10:23] <Zoffix> dunno. This is the script that upgates its rakudo: https://gist.github.com/zoffixznet/8be684da12ce5e951f40875c8f2e5d12

[10:23] <Zoffix> SourceBaby: help

[10:23] <SourceBaby> Zoffix, Use s: trigger with args to give to sourcery sub. e.g. s: Int, 'base'. See http://modules.perl6.org/dist/CoreHackers::Sourcery

[10:23] <Zoffix> SourceBaby: source

[10:23] <SourceBaby> Zoffix, See: https://github.com/zoffixznet/perl6-sourceable

[10:23] <Zoffix> And this is the code that finds the linenumber/file: https://github.com/zoffixznet/perl6-sourceable/blob/master/lib/Sourceable/Plugin/Sourcery.pm6#L27-L45

[10:24] <Zoffix> I'm unsure what makes it wanna look for perl6.moarvm or what is in that file

[10:25] <timotimo> well, crap.

[10:27] <timotimo> i'm getting some explosions here as well

[10:32] <timotimo> okay, a perl6 repl open while rakudo installs will segfault no matter if my patch is applied or not

[11:43] <timotimo> Zoffix: should i revert the commit?

[11:49] <timotimo> actually, feel free to revert it yourself if you think it's no good, Zoffix

[11:49] <timotimo> i'll be AFK for a bit

[15:50] <Zoffix> timotimo: I've no idea what it does. I was just reporting that my bot stopped working :)

[15:50] <Zoffix> s: &say

[15:50] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/02667bd/src/core/io_operators.pm#L16

[15:51] <Zoffix> timotimo: looks like it works now vOv

[16:22] <nine> Zoffix: I failed to reproduce the issue with the "perl6 --ll-exception -e 'die'" lizmat suggested

[16:23] <Zoffix> nine: what do you get when you run it? The first line reads "Unhandled exception: concatenate requires a concrete string, but got null" instead of the actual exception message

[16:23] <nine> nine@sphinx:~> perl6 --ll-exception -e 'die'

[16:23] <nine> Died

[16:23] <nine> at SETTING::src/core/Exception.pm:63  (/usr/share/perl6/runtime/CORE.setting.moarvm:throw)

[16:23] <nine> Zoffix: oh wait...I've got rakudo rpm installed

[16:23] <Zoffix> You're on the wrong perl then

[16:24] <nine> sorry for the confusion :/

[16:27] <Zoffix> nine: this commit made it so the Exception's $!ex message is no longer set: https://github.com/rakudo/rakudo/commit/1a4d94930c581e915a2351049e8ee12246c4c26c then this commit attempted to fix the issue, but the $error never has .message method because it's not Perl 6 Exception, but BOOTException. https://github.com/perl6/nqp/commit/859b4441dd3f6fd8816759b3b1f12b2d45a0bfd2  and since BOOTException's payload

[16:27] <Zoffix> can be any object apparently, I think this can be fixed by maing Exception.throw stuff a closure that calls self.message as payload and in the place where nqp code trying to call .message instead execute that closure to get the message. This way we still get to retain the original benefits of not having to generate Exception.message when we don't care for it

[16:28] * Zoffix &

[16:28] <Zoffix> s/maing/making/;

[16:43] <ugexe> TimToady: can you comment on Version smart-match returning true for both `v6 ~~ v6c` and `v6c ~~ v6` instead of returning false/true? I expand on my confusion here: https://github.com/rakudo/rakudo/pull/1118#issuecomment-316760105

[16:50] <[Coke]> Zoffix: (why tickets for todo'd tests) the goal is to have a single place to report issues.

[17:27] <Zoffix> [Coke]: but it ended up just a bunch of outdated information on todos in roast that at least once interfered with a user trying to find a specific ticket. Seems pointless effort considering you can always get an up-to-date information by running grep -ER '\#\?rakudo\s+(\d+\s+)?(todo|skip)' in a roast checkout

[17:59] <[Coke]> Zoffix: if you have a better way to manage it, by all means.

[18:00] <[Coke]> but this is one of the things that is tricky about the tickets: there's a ton of todo's and skips in roast. are those part of the 6.c release? do we want to strip them for the 6.d release?

[18:49] <Zoffix> There's 1231 of todo/skips. Yeah, stripping them would be useful, as the "TODO PASSED" messages make it really hard to spot failures where there are failures. I guess stripping can be done just via the fudger. Make it insert `skip "placeholder test"` instead of any todos/skips

[18:54] <Geth> ¦ nqp: c0abee7953 | (Stefan Seifert)++ | src/HLL/Compiler.nqp

[18:54] <Geth> ¦ nqp: Fix --ll-exception trying to print a NULL

[18:54] <Geth> ¦ nqp:

[18:54] <Geth> ¦ nqp: Need to use isnull_s for strings and look for the .message method on the

[18:54] <Geth> ¦ nqp: exception payload instead of the BOOTException.

[18:54] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c0abee7953

[19:04] <Geth> ¦ rakudo/nom: 559c925563 | (Elizabeth Mattijsen)++ | tools/build/NQP_REVISION

[19:04] <Geth> ¦ rakudo/nom: Bump NQP to get the --ll-exception fix, nine++

[19:04] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/559c925563

[19:04] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.07...2017.07-9-gc0abee7

[19:18] <Geth> ¦ nqp: 69a150d21b | (Jonathan Worthington)++ | tools/build/MOAR_REVISION

[19:18] <Geth> ¦ nqp: Bump MOAR_REVISION.

[19:18] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/69a150d21b

[19:18] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.07...2017.07-7-g499059d

[19:20] <Geth> ¦ rakudo/nom: b81597bd86 | (Jonathan Worthington)++ | tools/build/NQP_REVISION

[19:20] <Geth> ¦ rakudo/nom: Bump to get latest MoarVM.

[19:20] <Geth> ¦ rakudo/nom:

[19:20] <Geth> ¦ rakudo/nom: * Fix to native callbacks called on threads other than the one that

[19:20] <Geth> ¦ rakudo/nom:   provided them in the first place (jnthn++)

[19:20] <Geth> ¦ rakudo/nom: * String concatenation improvements (samcv++)

[19:20] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b81597bd86

[19:20] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.07-9-gc0abee7...2017.07-10-g69a150d

[19:21] <Geth> ¦ rakudo/nom: 1d94164389 | (Jonathan Worthington)++ | 2 files

[19:21] <Geth> ¦ rakudo/nom: Test native callbacks on different threads.

[19:21] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1d94164389

[19:21] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.07-9-gc0abee7...2017.07-10-g69a150d

[19:44] <[Coke]> I wonder if it would be nice to try to have a "meeting" every week or month or so as we are thinking of getting 6.d out the door.

[19:44] <[Coke]> we used to try to do them way too often at the beginning, but we haven't really done that at all for 8+ years.

[19:45] <Zoffix> Will we get free coffee and donuts? :)

[19:47] <[Coke]> I will absolutely do that.

[19:48] <[Coke]> ... as long as you have a dunkin donuts near you. :)

[19:48] <[Coke]> I am, btw, super busy with work, so am able to spend a lot less time thinking about perl 6.

[19:49] <[Coke]> (been the case for a few months now)

[20:00] <lizmat> decommute&

[20:09] <Zoffix> Same heh. Starting this week, I'll be able to spend a lot less time on Perl 6

[20:10] <Zoffix> well "a lot less" == about half the time as before

[20:56] <robertle> I know  the only real answer is "when it's ready", but is there any indication on roughly when 6.d might happen?

[21:06] <Zoffix> robertle: October 19th.

[21:07] <perlpilot> robertle: why do you want to know?

[21:09] <Zoffix> robertle: note that not much would occur from user's perspective between last 6.c release and first 6.d release. There's a ton of features that are "technically" not part of the language that people are already using. 6.d release will just make those features "official"

[21:11] <robertle> right, October sounds great. I am asking because I am using v6.d.PREVIEW more and more in semi-serious code, and having that a bit more official would be nice

[21:13] <Zoffix> robertle: it's a rough date tho. Depending on availability of humans might be delayed. I think October 19th is the most optimistic mark and December 31 is the most pessimistic one, at least in my view.

[21:13] <robertle> "Depending on availability of humans might be delayed", heh, I'll remember that for reuse at work :)

[21:20] <perlpilot> robertle: what features of v6.d.PREVIEW are you taking advantage of?

[21:21] <Zoffix> non-blocking await is the only one that's there, IIRC

[21:22] <robertle> the waiting without exhausting the thread pool is the main thing for me. there is something about .child on directories as well, but looking at the description of the change I wonder whether that actually has anything to do with my previous problems, or whether I just worked out how to use it around the same time i started to use 6.d...

[21:23] <Zoffix> robertle: the .child thing isn't yet implemented.

[21:24] <Zoffix> It's not about .child on directories. in 6.d .child will be much slower and ensure that the path is indeed the child of the invocant.

[21:24] <robertle> makes sense, the description says something about security, which wasn't really my problem

[21:24] <Zoffix> And what current .child does has been replaced with .add  (which is already implemented without 6.d.PREVIEW)

[21:25] <robertle> I was trying to write a method that checks if a file is contained (perhaps deeply) within a given directory, basically to avoid unwanted traversals as the filename is based on input over the net

[21:25] <robertle> think .htaccess or so

[21:26] <robertle> and I had great rouble getting that to work, even in the absence of links and similar complicatiosn

[21:26] <Zoffix> buggable: eco secure

[21:26] <buggable> Zoffix, IO::Path::ChildSecure 'Secure version of IO::Path.child': https://github.com/zoffixznet/perl6-IO-Path-ChildSecure

[21:26] <Zoffix> You could use that ^

[21:26] <robertle> i did look at that

[21:26] <Zoffix> Which will be 6.d's IO::Path.child

[21:27] <Zoffix> .in 60d go through ecosystem and convert .child -> .add

[21:27] <yoleaux> Zoffix: I'll remind you on 18 Sep 2017 21:27Z

[21:27] <Zoffix> .in 30d go through ecosystem and convert .child -> .add

[21:27] <yoleaux> Zoffix: I'll remind you on 19 Aug 2017 21:27Z

[21:28] <robertle> not sure anymore why we diodn't end using it. but looking at it now, what we do is similar in principle, basically resolve + absolute and string compare. I need to look at it again, not sure it can really be trusted

[21:29] <robertle> I mean not sure *our* version can be trusted

[21:29] <Zoffix> I wouldn't mind extra eyes on my version either :)

[21:31] <ugexe> technically would trying to open each path with an exclusive lock work?

[21:31] <robertle> why the nqp? is it for performance or for functionality?

[21:32] <robertle> does every filesystem do locks properly?

[21:32] <Zoffix> performance

[21:42] <Zoffix> we have tests for .lock/.unlock so they work on Windows, Mac, and Linux.

[21:44] <geekosaur> locking tends not to be a per-os issue so much as a per-filesystem issue. notably, remote filesystems are problematic in various ways

[21:44] <Zoffix> ah

[21:45] <geekosaur> or foreign filesystems, e.g. various fuse filesystems on linux to access ntfs, etc.

[21:47] <Zoffix> damn. The naive fix for the subtest issue makes it report a passing TODO, because it thinks the subtest passed..

[21:47] * Zoffix thinks harder

[21:47] <Zoffix> Gonna leave it for now.

[21:48] * jdv79 never liked subtest.

[21:48] <jdv79> the additional complexity seemed unworthy

[21:49] <Geth> ¦ rakudo/fix-RT131767-subtest-todo: ca1f0cdae6 | (Zoffix Znet)++ | lib/Test.pm6

[21:49] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131767

[21:49] <Geth> ¦ rakudo/fix-RT131767-subtest-todo: Stash todo'ed subtest improvement fix

[21:49] <Geth> ¦ rakudo/fix-RT131767-subtest-todo:

[21:49] <Geth> ¦ rakudo/fix-RT131767-subtest-todo: Currently fixes the original issue in RT#131767, but makes the

[21:49] <Geth> ¦ rakudo/fix-RT131767-subtest-todo: subtest itself be reported as a unexpectedly-passing TODO

[21:49] <Geth> ¦ rakudo/fix-RT131767-subtest-todo:

[21:49] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131767

[21:49] <Geth> ¦ rakudo/fix-RT131767-subtest-todo: Needs more thinking.

[21:49] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131767

[21:49] <Geth> ¦ rakudo/fix-RT131767-subtest-todo: review: https://github.com/rakudo/rakudo/commit/ca1f0cdae6

[21:49] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131767

[21:50] <Zoffix> I love subtest. Very easy to just bump plan by 1 and make a self-contained test for a feature, that uses many tests

[21:50] <Zoffix> In Testo (where it's named `group`) I plan to auto-thread it too :)

[21:50] <jnthn> Chill out, synopsebot6 :-)

[21:50] <Zoffix> heh

[21:50] <Zoffix> Poor branch name, I guess :P

[21:51] <jnthn> I thought it needed to be rt #12345

[21:51] <jnthn> Or similar

[21:55] <Geth> ¦ roast/fix-subtest-todo: cd838452e3 | (Zoffix Znet)++ | S24-testing/12-subtest-todo.t

[21:55] <Geth> ¦ roast/fix-subtest-todo: Stash subtest todo fix tests

[21:55] <Geth> ¦ roast/fix-subtest-todo:

[21:55] <Geth> ¦ roast/fix-subtest-todo: For https://rt.perl.org/Ticket/Display.html?id=131767

[21:55] <Geth> ¦ roast/fix-subtest-todo: review: https://github.com/perl6/roast/commit/cd838452e3

[22:28] <Zoffix> booo :'( Linkin Park's lead killed himself

[22:29] * Zoffix was raised on that band :(

[22:31] <jnthn> Yeah :(

[22:33] <jnthn> Didn't listen to their songs for years, but did plenty in my teens.

[22:42] <Zoffix> damn... went to look whether one of my other favourites was still alive. Died in March. Though at least at the ripe age of 101, so not entirely unexpected. https://en.wikipedia.org/wiki/Jacque_Fresco

[23:21] <timotimo> one of my favourite albums of last year was "Psybrid Theory" by "Gangnam Park"; a re-mix of the entirety of Hybrid Theory with all lyrics replaced by the lyrics from psy's songs "Gangnam Style" and "Gentleman"

[23:21] <timotimo> also, lots of linkin park in my teens

[23:22] <jnthn> Oh wow, I have to listen to that :P

[23:23] <timotimo> it's quite amazing

[23:23] <timotimo> i find it worked terrifyingly well

[23:29] <timotimo> oh no

[23:29] <timotimo> triple-q came out with an album of 453 gangnam-style mashups by 40 different people apparently

[23:31] <timotimo> clearly very dedicated to the memes
