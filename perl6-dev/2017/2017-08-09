[01:54] <AlexDaniel> argh, so many things halfway done, and the body wants to sleep instead of finishing something ????

[06:44] <pmurias> jnthn: we parse heredocs after the statement they are in has parsed, the only solution I have is to register a callback (with annotate) on the heredoc placeholder to check once it's parsed

[08:51] <jnthn> .tell pmurias If we see it's a heredoc, though, we can always peek the heredocs queue and I think in there we can find info about the here language to tell if it's an interpolating one or not.

[08:51] <yoleaux> jnthn: I'll pass your message to pmurias.

[09:54] <nine> TheDamian showed https://metacpan.org/pod/PPR in his keynote - a regular expression which parses Perl 5. This could become useful for implementing { use v5; ... } blocks as it could solve the problem of finding the end of the block.

[09:57] <jnthn> Wow :)

[10:01] <jnthn> Wonder if I'll get to see that talk at the Swiss Perl Workshop... :)

[12:15] <Geth> Â¦ nqp: 817625d7b5 | (Jonathan Worthington)++ | 2 files

[12:15] <Geth> Â¦ nqp: Correct setup of $sharedclass in regex compiler.

[12:15] <Geth> Â¦ nqp:

[12:15] <Geth> Â¦ nqp: Means that we get spesh of lookups in ParseShared, which we missed out

[12:15] <Geth> Â¦ nqp: on before due to this buggy code-gen.

[12:15] <Geth> Â¦ nqp: review: https://github.com/perl6/nqp/commit/817625d7b5

[12:41] <Zoffix> Tons of "Unkn" failures in toast run :/ wonder what's that about

[12:41] <Zoffix> Annnd... it crashed

[12:46] <Zoffix> .tell AlexDaniel I'm giving up on trying to make a toast run; bloody annoyed. It crashed twice in the middle of the run in the past 3 hours and there were a ton of "Unknown" failures in modules (procs crashing?). Just grab a Debian iso and run all these commands to toast on your box: https://github.com/zoffixznet/perl6-Toaster#blank-debian-gce-vm-setup Also, Google Compute Engine gives you $300 credit when

[12:46] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[12:46] <Zoffix> you sign up; you could run a free VM if you wanted

[12:46] <Zoffix> .tell AlexDaniel you sign up; you could run a free VM if you wanted

[12:46] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[12:47] <Zoffix> .tell AlexDaniel I was using HEAD to run toaster itself, but you could pick more stable commit (like 2017.07)

[12:47] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[14:15] <AlexDani`> .

[14:15] <AlexDaniel> .

[14:15] <yoleaux> 12:46Z <Zoffix> AlexDaniel: I'm giving up on trying to make a toast run; bloody annoyed. It crashed twice in the middle of the run in the past 3 hours and there were a ton of "Unknown" failures in modules (procs crashing?). Just grab a Debian iso and run all these commands to toast on your box: https://github.com/zoffixznet/perl6-Toaster#blank-debian-gce-vm-setup Also, Google Compute Engine gives you $300 credit when

[14:15] <yoleaux> 12:46Z <Zoffix> AlexDaniel: you sign up; you could run a free VM if you wanted

[14:15] <yoleaux> 12:47Z <Zoffix> AlexDaniel: I was using HEAD to run toaster itself, but you could pick more stable commit (like 2017.07)

[14:15] <AlexDaniel> Zoffix: OK, thanks

[14:20] <AlexDaniel> right now doing some release bot tweakery, so maybe not this week. But I'm planning to run regressionable soon too, so maybe I'll figure something out for both toaster and regressionableâ€¦

[15:44] <nine> 12.5 seconds! (down from 13.6)

[15:47] <Geth> Â¦ 6.d-prep: 3a58b8b953 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[15:47] <Geth> Â¦ 6.d-prep: Add nailing down of META6 `auth` to TODO

[15:47] <Geth> Â¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/3a58b8b953

[17:17] <Geth> Â¦ rakudo/nom: 1761f953db | (Elizabeth Mattijsen)++ | src/core/Junction.pm

[17:17] <Geth> Â¦ rakudo/nom: Make Junction.Str do the right thing

[17:17] <Geth> Â¦ rakudo/nom:

[17:17] <Geth> Â¦ rakudo/nom: Part one of more work to come

[17:17] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1761f953db

[17:17] <timotimo> nine: that's for inline::perl5 of csv?

[17:18] <Geth> Â¦ nqp: 28e0650f1c | (Stefan Seifert)++ | src/vm/moar/QAST/QASTOperationsMAST.nqp

[17:18] <Geth> Â¦ nqp: Map the low level nativecallinvoke op

[17:18] <Geth> Â¦ nqp:

[17:18] <Geth> Â¦ nqp: The existing mapping of nativecall to nativecallinvoke gets overwritten

[17:18] <Geth> Â¦ nqp: by the following add_core_op, so we may as well use that line to map the

[17:18] <Geth> Â¦ nqp: nativecallinvoke op for use in non-generic code.

[17:18] <Geth> Â¦ nqp: review: https://github.com/perl6/nqp/commit/28e0650f1c

[17:21] <timotimo> is this about the mulitple candidates for nativecallinvoke depending on the number of arguments?

[17:25] <nine> timotimo: yes. What I now do is compile a specialized subroutine body, so we can avoid e.g. the decont loop of the nativecall op and use nativecallinvoke instead.

[17:26] <Geth> Â¦ rakudo/nativecall_specialized_sub_bodies: d3b54363de | (Stefan Seifert)++ | 2 files

[17:26] <Geth> Â¦ rakudo/nativecall_specialized_sub_bodies: Speed up NativeCall subs by compiling specialized subroutine body

[17:26] <Geth> Â¦ rakudo/nativecall_specialized_sub_bodies:

[17:26] <Geth> Â¦ rakudo/nativecall_specialized_sub_bodies: Currently tied to MoarVM backend. Needs to be made general before

[17:26] <Geth> Â¦ rakudo/nativecall_specialized_sub_bodies: merging.

[17:26] <Geth> Â¦ rakudo/nativecall_specialized_sub_bodies: review: https://github.com/rakudo/rakudo/commit/d3b54363de

[17:26] <nine> timotimo: there ^^^. Almost ready for merge

[17:26] <nine> Certainly ready for some review :)

[17:27] <timotimo> i see!

[17:29] <timotimo> mhm mhm

[17:39] <timotimo> hm, local + var doesn't exist?

[17:41] <timotimo> i don't see anything obvious wrong with it at first glance

[17:42] <timotimo> hm, this probably also means that every native call shows up in the profiler individually

[17:42] <timotimo> that's probably cool, too

[18:10] <jnthn> Hmmm...not too keen on the Junction.Str patch

[18:11] <jnthn> Anything that (quite reasonably) does nqp::unbox_s($foo.Str) is now going to (quite rightly) explode

[18:16] <timotimo> clearly we have to build UNBOXABLE_STR :)

[18:17] <jnthn> No, it can just explode, and then I'll point people at this commit. :P

[18:18] <timotimo> m: use nqp; nqp::unbox_s("foo" | "bar")

[18:18] <camelia> rakudo-moar 1761f9: OUTPUT: Â«This type cannot unbox to a native string: P6opaque, Junction?  in block <unit> at <tmp> line 1??Â»

[18:18] <timotimo> that error message is helpful, at least to core devs

[18:20] <jnthn> Should probably just be "Junction cannot unbox to a native string"

[18:20] <jnthn> Don't really need the REPR there

[18:21] <jnthn> Maybe it won't come up too terribly often though, as subs dispatch to methods, and methods on junctions auto-thread

[18:21] <jnthn> But not generally keen on things that are by-convention coercions not returning something of the desired type

[18:22] <Zoffix> It's not fully subs->methods; some methods direct to subs

[18:22] <Zoffix> s: &substr

[18:22] <Zoffix> right

[18:23] <Zoffix> s: &substr

[18:23] <SourceBaby> Zoffix, Sauce is at https://github.com/rakudo/rakudo/blob/1761f95/src/core/Str.pm#L3034

[18:23] <Zoffix> That one just does ` nqp::p6box_s(nqp::substr($str,$from));`

[18:24] <Zoffix> m: say substr 'foo'|'bar', 1, 3

[18:24] <camelia> rakudo-moar 1761f9: OUTPUT: Â«any(oo, ar)?Â»

[18:24] * timotimo hears the crowd go "oo" and "ar"

[18:24] <Zoffix> :)

[18:25] <Zoffix> s: &substr, \( 'foo'|'bar', 1, 3 )

[18:25] <SourceBaby> Zoffix, Something's wrong: ?ERR: Could not find candidate that can do \(any("foo", "bar"), 1, 3)?  in sub sourcery at /home/zoffix/services/lib/CoreHackers-Sourcery/lib/CoreHackers/Sourcery.pm6 (CoreHackers::Sourcery) line 37?  in block <unit> at -e line 6??

[18:26] <Zoffix> Ah, it wouldn't thread only when there's no explict type

[18:27] <Zoffix> m: -> Str { rand.say }(<a b>.any)

[18:27] <camelia> rakudo-moar 1761f9: OUTPUT: Â«0.633454493676399?0.120272730243189?Â»

[18:27] <Zoffix> m: -> $ { rand.say }(<a b>.any)

[18:27] <camelia> rakudo-moar 1761f9: OUTPUT: Â«0.317041663394542?Â»

[18:30] <jnthn> m: (any(1, 2), 'b').join.say

[18:30] <camelia> rakudo-moar 1761f9: OUTPUT: Â«This type cannot unbox to a native string: P6opaque, Junction?  in block <unit> at <tmp> line 1??Â»

[18:30] <jnthn> m: say any(1, 2) ~ 'b'

[18:30] <camelia> rakudo-moar 1761f9: OUTPUT: Â«This type cannot unbox to a native string: P6opaque, Junction?  in block <unit> at <tmp> line 1??Â»

[18:30] <Zoffix> hah

[18:31] <Zoffix> m: say ((my int $) | (my int $)) + (my int $)

[18:31] <camelia> rakudo-moar 1761f9: OUTPUT: Â«any(0, 0)?Â»

[18:35] <AlexDaniel> huggable: cla

[18:35] <huggable> AlexDaniel, nothing found

[18:35] <AlexDaniel> huggable: CLA

[18:35] <huggable> AlexDaniel, http://www.perlfoundation.org/contributor_license_agreement  print it out, sign it, scan it in. Email to trademark -at- perlfoundation.org

[18:43] <AlexDaniel> sent

[18:44] <AlexDaniel> ezmlm-reject: fatal: Sorry, I don't accept messages larger than 400000 bytes (#5.2.3)

[18:44] <AlexDaniel> damn thing can't accept a 1MB scanned fileâ€¦ OK, one secondâ€¦

[18:45] <Zoffix> imagemagik it :)

[19:01] <AlexDaniel> huggable: CLA :is: http://www.perlfoundation.org/contributor_license_agreement  print it out, sign it, scan it in (resize your scan to about 250KB). Email to trademark -at- perlfoundation.org

[19:01] <huggable> AlexDaniel, Added CLA as http://www.perlfoundation.org/contributor_license_agreement  print it out, sign it, scan it in (resize your scan to about 250KB). Email to trademark -at- perlfoundation.org

[19:02] <Zoffix> huggable: CLA :is: http://www.perlfoundation.org/contributor_license_agreement  print it out, sign it, scan it in (resize your scan to 250KB or less) Email to trademark -at- perlfoundation.org

[19:02] <huggable> Zoffix, Added CLA as http://www.perlfoundation.org/contributor_license_agreement  print it out, sign it, scan it in (resize your scan to 250KB or less) Email to trademark -at- perlfoundation.org

[19:04] <AlexDaniel> note that it says 400000 bytes but even a little bit under 300KB did not work

[19:05] <geekosaur> well, yes, it's seeing it in encoded form, probably base64

[20:14] <Zoffix> moritz: "Having worked with neither Haskell nor compilers before proofed "   proofed -> proved

[20:15] <Zoffix> how come audreyt is highlighted special in chat logs?

[20:16] <moritz> from the times that we didn't have color auto assignment

[20:16] <Zoffix> ah

[20:17] <Zoffix> "contributing to Perl 6 more accssible"   accessible got a typo

[20:19] <moritz> Zoffix: thanks, fixed

[20:21] <Zoffix> moritz++ very nice article; especially for us, newblood in here to read :)

[20:22] <moritz> Zoffix: thanks :-)

[20:47] <AlexDaniel> moritz++

[21:15] <[Coke]> I am not sure that "trademark" is the right address; please cc me just in case.

[21:21] <timotimo> â„¢@perl.org?
