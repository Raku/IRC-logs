[00:35] <samcv> \o/

[00:35] <samcv> pushing in now

[00:36] <Geth> ¦ nqp/master: 4 commits pushed by (Samantha McVey)++

[00:36] <Geth> ¦ nqp/master: a1c5a07fa8 | Add .editorconfig file for indentation type definitions

[00:36] <Geth> ¦ nqp/master: 4c7f683f87 | [unicode-grant] Bump MoarVM and add new indexicim and eqaticim ops

[00:36] <Geth> ¦ nqp/master: 18e40936a6 | [unicode-grant] Update QASTRegexCompilerMAST to use new indexicim and eqaticim ops

[00:36] <Geth> ¦ nqp/master: b96a0afe7f | Add tests for RT #128875, ignorecase+ignoremark false positives

[00:36] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/0ac9b4f06f...b96a0afe7f

[00:41] <Geth> ¦ rakudo/nom: 1ac7996a42 | (Samantha McVey)++ | tools/build/NQP_REVISION

[00:41] <Geth> ¦ rakudo/nom: [unicode-grant]↑Moar: new indexicim and eqaticim ops + RT128875 fix

[00:41] <Geth> ¦ rakudo/nom:

[00:41] <Geth> ¦ rakudo/nom: RT #128875 which was a bug where ignorecase+ignoremark regex would give

[00:41] <Geth> ¦ rakudo/nom: false positive matches if the first grapheme of the needle matched

[00:41] <Geth> ¦ rakudo/nom: any of the graphemes in the haystack.

[00:41] <Geth> ¦ rakudo/nom:

[00:41] <Geth> ¦ rakudo/nom: It also exposes the new nqp::indexicim and nqp::eqaticim ops on MoarVM

[00:41] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1ac7996a42

[00:41] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.05-145-g0ac9b4f...2017.05-149-gb96a0afe7

[00:46] <Geth> ¦ roast: 249eaf9238 | (Samantha McVey)++ | S15-nfg/GraphemeBreakTest.t

[00:46] <Geth> ¦ roast: [unicode-grant] Minor non-functional change to GraphemeBreakTest.t

[00:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/249eaf9238

[00:46] <Geth> ¦ roast: 0a80d0d2e8 | (Samantha McVey)++ | S05-modifier/ignorecase-and-ignoremark.t

[00:46] <Geth> ¦ roast: [unicode-grant] add tests to cover RT #128875

[00:46] <Geth> ¦ roast:

[00:46] <Geth> ¦ roast: RT #128875 is fixed on rakudo.moar as of

[00:46] <Geth> ¦ roast: https://github.com/rakudo/rakudo/commit/1ac7996a42

[00:46] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0a80d0d2e8

[00:58] <eveo> \o/

[01:08] <travis-ci> NQP build failed. Samantha McVey 'Add tests for RT #128875, ignorecase+ignoremark false positives'

[01:08] <travis-ci> https://travis-ci.org/perl6/nqp/builds/240605802 https://github.com/perl6/nqp/compare/0ac9b4f06fd6...b96a0afe7f5f

[01:13] <samcv> looks like i need to fudge some tests for jvm

[02:53] <Geth> ¦ nqp: c684890f7a | (Samantha McVey)++ | t/qregex/rx_modifiers

[02:53] <Geth> ¦ nqp: [unicode-grant] todo 2 ignorecase+ignoremark tests on JVM

[02:53] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c684890f7a

[03:34] <travis-ci> NQP build passed. Samantha McVey '[unicode-grant] todo 2 ignorecase+ignoremark tests on JVM'

[03:34] <travis-ci> https://travis-ci.org/perl6/nqp/builds/240631933 https://github.com/perl6/nqp/compare/b96a0afe7f5f...c684890f7acc

[07:30] <lizmat> Files=1204, Tests=61799, 218 wallclock secs (12.87 usr  4.93 sys + 1321.03 cusr 120.37 csys = 1459.20 CPU)

[07:52] <Geth> ¦ roast: 670e3152c1 | (Elizabeth Mattijsen)++ | S16-io/handles-between-threads.t

[07:52] <Geth> ¦ roast: Unfudge now passing file handle passing test

[07:52] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/670e3152c1

[08:25] <Geth> ¦ nqp: 26adef6be4 | (Samantha McVey)++ | t/moar/08-indexic.t

[08:25] <Geth> ¦ nqp: [unicode-grant] run indexicim through all of the indexic tests

[08:25] <Geth> ¦ nqp:

[08:25] <Geth> ¦ nqp: At least for all the tests written in this file, indexic and indexicim

[08:25] <Geth> ¦ nqp: should both return the same result. Run all the tests through indexicim

[08:25] <Geth> ¦ nqp: so that it can get more thorough testing.

[08:25] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/26adef6be4

[08:26] <|Tux|> This is Rakudo version 2017.05-381-g1ac7996a4 built on MoarVM version 2017.05-71-gad6ab26f

[08:26] <|Tux|> csv-ip5xs        2.860

[08:26] <|Tux|> test            12.686

[08:26] <|Tux|> test-t           4.296 - 4.309

[08:26] <|Tux|> csv-parser      12.938

[09:43] <Geth> ¦ nqp: 76098315da | (Jonathan Worthington)++ | src/vm/jvm/QAST/Compiler.nqp

[09:43] <Geth> ¦ nqp: Map async proc nqp:: ops.

[09:43] <Geth> ¦ nqp:

[09:43] <Geth> ¦ nqp: Not yet implemented in any way.

[09:43] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/76098315da

[09:45] <Geth> ¦ rakudo/proc-using-proc-async: a2543a9c81 | (Jonathan Worthington)++ | 2 files

[09:45] <Geth> ¦ rakudo/proc-using-proc-async: Include Proc::Async into JVM core setting.

[09:45] <Geth> ¦ rakudo/proc-using-proc-async: review: https://github.com/rakudo/rakudo/commit/a2543a9c81

[10:00] <Geth> ¦ nqp: 53836564db | (Jonathan Worthington)++ | 3 files

[10:00] <Geth> ¦ nqp: Remove now-unused async char read/write ops on JVM

[10:00] <Geth> ¦ nqp:

[10:00] <Geth> ¦ nqp: These code paths have long been handled in Rakudo by doing binary I/O

[10:00] <Geth> ¦ nqp: and using the DecodeStream.

[10:00] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/53836564db

[10:22] <Geth> ¦ nqp: 8849e9a531 | (Jonathan Worthington)++ | 2 files

[10:22] <Geth> ¦ nqp: Start to stub in async process handle.

[10:22] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/8849e9a531

[10:28] <eveo> I wish TimToady would rule on RT#126732

[10:41] <eveo> 'cause "I've never programmed Perl 6 and don't understand how this works, so it should be banned" don't sound like well-thought language design to me and I haven't heard a more cogent argument from the other side as of yet.

[10:42] <ilmari> print join("|",$socket_file2,SOCK_DGRAM,"unix"), "\n

[10:42] <ilmari> bah

[10:42] <eveo> ZofBot: do your sock landry, yo!

[10:42] <ZofBot> eveo, set_name("Sam"); # same as the above An invocant is the topic of the corresponding method if that formal parameter is declared with the name $_

[10:53] <nine> eveo: FWIW I think you already argued the case completely and competently. No Timtoady necessary. If anything I'd have an issue with the tone of your comments. It's crystal clear that you are annoyed with "the bone headedness of beginners who have not thought a bit about the implications of their proposal", but that does not help convince the reporters and can only cause them to get defensive instead.

[10:54] <nine> I even say you have every right to be annoyed :) It's just that it's not helping you.

[10:57] <Geth> ¦ nqp: c9ca5de8dc | (Jonathan Worthington)++ | src/vm/jvm/runtime/org/perl6/nqp/io/AsyncProcessHandle.java

[10:57] <Geth> ¦ nqp: Start async process, conveying any errors.

[10:57] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c9ca5de8dc

[10:59] <eveo> OK

[11:05] <Ulti> eveo: I am near the top of that thread, one thing I would do to talk down my own argument in support of Zoffix is that I originally thought the exponent characters were all digits but its actually only up to 3 so the chance of it being some epic problem is really minimal

[11:05] <Ulti> like I thought someone might want to do bigger exponents and get confused

[11:06] <Ulti> but that isnt the case

[11:07] <Ulti> whether its really worth the possible hassle just to have squared and cubed with a pretty syntax is debatable and if the argument is about maintenance etc. I would have thought not using them as operators is a better shout than fixing whats used as a numeric literal... or just leave it as is because its going to affect like one person ever in the history of Perl 6

[11:09] <Ulti> the only real weirdness is that you can compose up to bigger exponents so long as they are only made of 1 2 or 3 :S which I think is weird behaviour

[11:09] <Ulti> m: say 2²² eqv 2**22

[11:09] <camelia> rakudo-moar 1ac799: OUTPUT: «True␤»

[11:10] <Ulti> 2²² being 22**2 feels a little less surprising, but as Zoffix points out just no one is going to notice this behaviour at this point

[11:11] <eveo> Ulti: all digits are available as exponents, they just aren't a contiguous Unicode range

[11:11] <Ulti> or even 2**(2+2) would be the least surprising

[11:11] <eveo> u: superscript

[11:11] <unicodable6> eveo, U+00B2 SUPERSCRIPT TWO [No] (²)

[11:11] <unicodable6> eveo, U+00B3 SUPERSCRIPT THREE [No] (³)

[11:11] <unicodable6> eveo, 25 characters in total: https://gist.github.com/6c2fa1520ae59be9ae8cac922e1474c0

[11:11] <Ulti> eveo: really?

[11:11] <Ulti> I could only find 2 and 3

[11:12] <Ulti> and looked hard

[11:12] <eveo> yeah, 2074+ range has other ones (see gist from bot above)

[11:12] <Ulti> are they all the same character class and work the same way?

[11:12] <eveo> Yeah

[11:12] <Ulti> aha

[11:12] <Ulti> ok that is a bit weirder then

[11:13] <Ulti> lets face it though simply no one is going to even do something other than squared or cubed

[11:13] <Ulti> anything else is madness

[11:13] <Geth> ¦ nqp: 1bd2aa9043 | (Jonathan Worthington)++ | src/vm/jvm/runtime/org/perl6/nqp/io/AsyncProcessHandle.java

[11:13] <Geth> ¦ nqp: Fire exit event with exit code on async proc exit.

[11:13] <Geth> ¦ nqp:

[11:13] <Geth> ¦ nqp: This gets the most basic case of Proc::Async working on JVM, where no

[11:13] <Geth> ¦ nqp: input/output handles are used.

[11:13] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/1bd2aa9043

[11:14] <nine> Ok, I have to admit, that I don't understand why say 2²² == 2**22

[11:15] <pmurias> nine: you mean design or implementation wise?

[11:15] <Ulti> it looks like 2 to the 22 though

[11:15] <nine> well both :)

[11:15] <pmurias> nine: design wise it's special code (I remember fixing a bug in that)

[11:15] <nine> If ² is a number and not a digit, ²² should simply not be 22 :)

[11:15] <Ulti> I guess the way to think about it is the whole thing is a single number literal

[11:15] <pmurias> well implementation wise

[11:15] <jnthn> lunch &

[11:16] <ilmari> nine: ² as a term is a number, any string of superscripts as an operator is exponentiation

[11:16] <Ulti> but this is defo deep in the bike shed

[11:16] <eveo> nine: in that context it's an operator. The No rule applies to terna

[11:16] <eveo> *terma

[11:16] <Ulti> ilmari yeah the issue being addressed is:

[11:16] <Ulti> m: say ???

[11:16] <camelia> rakudo-moar 1ac799: OUTPUT: «Stub code executed␤  in block <unit> at <tmp> line 1␤0␤»

[11:16] <nine> eveo: ah, so we basically have an unlimited number of exponentiation operators

[11:16] <eveo> yeah

[11:17] <Ulti> oh

[11:17] <ilmari> m: say ²²²

[11:17] <camelia> rakudo-moar 1ac799: OUTPUT: «4194304␤»

[11:17] <ilmari> yes, I'm aware

[11:17] <ilmari> I'v read the ticket

[11:17] <Ulti> k

[11:17] <ilmari> and I agree with eveo

[11:17] <eveo> :)

[11:17] <ilmari> FW(L)IW

[11:17] <pmurias> using ² as term like ²² seems just silly (might not be worth doing anything about if it's just a silly consequence of other rules)

[11:17] <Ulti> no one is going to write that though

[11:17] <Ulti> as in they wont rely on the first superscript as a digit

[11:18] <ilmari> it's not a digit. it's a number

[11:18] <ilmari> Nd vs No

[11:18] <pmurias> do we have any real use for digits outside of 0-9?

[11:18] <ilmari> do we have any real use for identifiers outside of [a-z_]?

[11:19] <Ulti> we should stick to just using 0 and 1 for everything

[11:19] * Ulti is voting in the UK today this feels like a similar situation

[11:19] * ilmari is in the UK, but not voting (filthy furriner)

[11:19] <Ulti> go home

[11:20] <Ulti> you'll genuinely be better off, I wish my home wasnt here

[11:20] <ilmari> I will, after the pub (home being London)

[11:20] <Ulti> :3

[11:20] <pmurias> ilmari: there are words that contain characters outside of [a-z]

[11:20] <Ulti> like Apple

[11:20] <ilmari> pmurias: only in weird languages

[11:21] <pmurias> is English considered a weird language? ;)

[11:21] <ilmari> and some of them have numbers with digits outside of [0-9]

[11:21] <Ulti> also I like the unicode exponent syntax so I want to bow out of that ticket

[11:22] <Ulti> being able to copy paste maths as written in PDF into Perl 6 is a major victory for the common people

[11:22] <ilmari> I thought part of the very raison d'être of perl6 was pervasive, world-class unicode support

[11:23] <thundergnat_> Ulti: Re "noone sane is going to use large exponents in practice"... points sheepishly towards  http://rosettacode.org/wiki/Prime_decomposition#Perl_6  :/

[11:23] <Ulti> the whole look at all these other weird No's is a strawman though its a very specific case that it is confusing the first superscript is not included in exponent generation

[11:23] <Ulti> but no one is going to do it

[11:24] <pmurias> ilmari: I'm fine with banning all the weird digits using a Perl::Critic style slang ;)

[11:24] <Ulti> thundergnat_: sure but lets face it Rosetta code Perl 6 right now is a load of language designers show boating their stuff

[11:24] <Ulti> joe bloggs i.e. me is never going to do it because I can barely find # on my Mac keyboard let alone unicode

[11:25] <eveo> Ulti: my understanding is the argument for banning them is that users will accidentall type two superscripts in a row, not that people will actually use it and others will find it confusing

[11:25] <ilmari> on X11 it's Compose ^ <digit> for the superscripts

[11:25] <Ulti> ± though we need that ;3

[11:25] <ilmari> and Compose <digit> <digit> for fractions

[11:25] <ilmari> m: say ⅗ + ⅝⁵

[11:25] <camelia> rakudo-moar 1ac799: OUTPUT: «0.6953674␤»

[11:25] <Ulti> eveo: I would hope someone would notice the numerical result between ^2 and ^22 is perhaps a /little/ off

[11:27] <Ulti> I for one welcome the first finance software to make this mistake

[11:28] <eveo> Though now that you mention it. I think I'm gonna rewrite all my modules to use only superscripts for numerals and then just claim we can't change it because it'd cause a lot of ecosystem breakage :)

[11:28] <Ulti> hah

[11:28] <Ulti> I think we should perhaps count number of authors not lines of code :P

[11:28] <Ulti> though I guess thats unfair on the people with like 100 modules to my 2

[11:31] <Ulti> sooo is now a good time to bring up ?

[11:31] <Ulti> >:D

[11:32] <Ulti> actually that would be a fun module if its not already there add in all the other unicode operators

[11:35] <Ulti> https://github.com/raydiak/Math-Symbolic looks like the best place to do it since you could end up with a symbolic maths slang

[11:35] <Ulti> this is why I love Perl 6

[11:39] <pmurias> test seems incorrect: https://github.com/perl6/roast/blob/master/S06-multi/type-based.t#L215

[11:41] <pmurias> not sure what to do with that as it's a broken regression test

[11:50] <Geth> ¦ rakudo/nom: ccfa5e51a2 | pmurias++ | 2 files

[11:50] <Geth> ¦ rakudo/nom: Stop the optimizer from using what I assume are old semantics for multi dispatch

[11:50] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ccfa5e51a2

[11:50] <pmurias> eveo: the optimizer bug should be fixed now

[11:51] <eveo> pmurias++ awesome!

[12:01] <|Tux|> This is Rakudo version 2017.05-382-gccfa5e51a built on MoarVM version 2017.05-71-gad6ab26f

[12:01] <|Tux|> csv-ip5xs        2.861

[12:01] <|Tux|> test            13.018

[12:01] <|Tux|> test-t           4.367 - 4.376

[12:01] <|Tux|> csv-parser      13.001

[12:02] <|Tux|> that version info does not show the git commit sha for nom. So I cannot verify it is the same commit I checked on

[12:03] <eveo> |Tux|: commit is ccfa5e51a innit?

[12:03] <|Tux|> or is ccfa5e51a2 the same as -gccfa5e51a

[12:04] <eveo> Yes.

[12:04] <eveo> or should be

[12:04] <|Tux|> why does Geth show one more digit than the version does?

[12:04] <eveo> (github seems to refuse to show it)

[12:04] <|Tux|> ah :)

[12:05] <eveo> |Tux|: because the short sha only works if there isn't another commit with the same sha and the version short sha has the git describe bit in it, so it's less important to have it long

[12:05] <eveo> So geth uses more chars of it

[12:07] <eveo> Ah, it doesn't refuse to show it, it's just it's the HEAD already. This works tho: https://github.com/rakudo/rakudo/compare/2017.05-382-gccfa5e51a~1...2017.05-382-gccfa5e51a

[12:07] <eveo> buggable: speed 4

[12:07] <buggable> eveo, ▁▁▂▂ data for 2017-06-08–2017-06-08; range: 4.296s–4.376s; 1% slower

[12:07] <eveo> buggable: speed 10

[12:07] <buggable> eveo, ▃▅↑▂▃▄▁▁▂▂ data for 2017-06-05–2017-06-08; range: 4.296s–5.038s; 1% faster

[12:07] <eveo> buggable: speed 60

[12:07] <buggable> eveo, ▁▁▂▁▁▂▁▁▃▃▃▃▃▃▂▂▁▂▆▇▂▂▂▂▃▃▃▄▂▆█▅▆▅▃▄▄▄▅▇▄▃▆▆↑▅▄▄██▄▆↑▄▅▅▃▂▄▄ data for 2017-05-13–2017-06-08; range: 4.194s–5.038s; 3% slower

[12:20] * jnthn back

[12:27] <eveo> jnthn++ (blog) ugexe++ funding

[12:27] <timotimo> ugexe++ \o/

[12:27] <perlpilot> indeed.  jnthn++ ugexe++

[12:29] <timotimo> and jnthn++ is always correct :)

[12:38] <jnthn> Uh...not quite always :P

[12:38] <nine> jnthn: incorrect!

[12:39] <pmurias> I'm not sure how to add a regression test for the optimizer inlining things incorrectly multi bug without using nqp ops, as the optimizer doesn't seem to inline things that use high level stuff

[12:40] <jnthn> nine: :P

[12:43] <eveo> c: ccfa5e51a2~1,ccfa5e51a2 multi f(int) {'i'}; multi f(Int) {'I'}; f(1) eq 'I' or die

[12:43] <committable6> eveo, ¦ccfa5e51a2~1: «Died␤  in block <unit> at /tmp/Chx3ccf6tp line 1␤ «exit code = 1»» ¦ccfa5e5: «»

[12:43] <eveo> pmurias: ^

[12:43] <eveo> pmurias: use lib <t/spec/packages>; use Test::Util; is_run ｢multi f(int) {'i'}; multi f(Int) {'I'}; f(1) eq 'I' or die｣, {:out(''), :err(''), :0status}, 'optimizer does not get confused with native types';

[12:43] <eveo> (is_run is to isolate it from the rest of the code which may or may not cause the bug to disappear)

[12:47] <dogbert17> are there known failures in t/spec/S06-multi/type-based.rakudo.t atm?

[12:48] <dogbert17> ok 55 - generics in multis (-)

[12:48] <dogbert17> Cannot resolve caller rt107638(1); none of these signatures match:

[12:48] <dogbert17> (int $a)

[12:48] <dogbert17> (Str $a where { ... })

[12:48] <dogbert17> in block <unit> at t/spec/S06-multi/type-based.rakudo.moar line 219

[12:50] <jnthn> Oh, Java. getErrorStream() gets the stream connected to the process stderr. Fine. Guess what getOutputStream() gets? :P

[12:50] <eveo> m: multi sub infix:<+>(Str $ where 1, Str $) { }; quietly 'a' + 'a'

[12:50] <camelia> rakudo-moar ccfa5e: OUTPUT: «Cannot convert string to number: base-10 number must begin with valid digits or '.' in '3⏏5a' (indicated by ⏏)␤  in block <unit> at <tmp> line 1␤␤»

[12:50] <timotimo> jnthn: it gives you the stream you can output stuff into the process with?

[12:51] <nine> jnthn: NULL :P

[12:51] <eveo> dogbert17: that looks like related to pmurias++'s last commit

[12:52] <nine> Oh boy, timotimo++ is right

[12:52] <eveo> c: ccfa5e51a2~1,ccfa5e51a2 multi rt107638(int $a) { 'ok' }; multi rt107638(Str $a where 1) { }; rt107638(1)

[12:52] <committable6> eveo, ¦ccfa5e51a2~1: «» ¦ccfa5e5: «Cannot resolve caller rt107638(1); none of these signatures match:␤    (int $a)␤    (Str $a where { ... })␤  in block <unit> at /tmp/kZMErGurAc line 1␤ «exit code = 1»»

[12:52] <timotimo> what seriously

[12:52] <eveo> dogbert17: yeah

[12:53] <nine> "This method returns the output stream connected to the normal input of the subprocess."

[12:53] <timotimo> well, er ... you get an OutputStream back from the process. an output stream is something you cat put data into ... i guess that makes sense?!

[12:53] <dogbert17> eveo: cool, maybe we should tell Zoffix about this :-)

[12:53] <jnthn> Correct. getOutputStream() actually gets you the thing bound to stdin :P

[12:53] <eveo> pmurias: ^ looks like the commit fixing that bug introed another bug where natives don't get called at all now

[12:53] <eveo> dogbert17: what does Zoffix have to do with this?

[12:54] <timotimo> to be fair, it'd also be weird if getInputStream gave you an OutputStream object

[12:54] <timotimo> you pretty much can't win here

[12:55] <dogbert17> eveo: he's ususally interested in stuff like this but he seems to have gone up in smoke :)

[12:55] <nine> timotimo: why not just getStdIn and getStdOut?

[12:56] <nine> Or since it's Java: getStreamForSendingDataIntoTheSubProcess()

[13:01] <timotimo> :D

[13:01] <timotimo> .getStreamFactory.getNamedStream(System.nameForStdinStream())

[13:21] <pmurias> eveo: I removed that test because it seems to be broken

[13:22] <Geth> ¦ roast: 1ba85e8222 | pmurias++ | S06-multi/type-based.t

[13:22] <Geth> ¦ roast: Remove test that's not correct

[13:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/1ba85e8222

[13:22] <pmurias> ahh, forgot to push

[13:22] <pmurias> eveo: int won't match either int or Str

[13:23] <eveo> pmurias: ah, so native type multies never auto-unbox. You have to use a native to get to them

[13:24] <pmurias> eveo: you linked me an explanation why that happens not that long ago

[13:24] <eveo> Yeah. Now I rememeber

[14:26] <Geth> ¦ nqp: 320a8b9c47 | (Jonathan Worthington)++ | 2 files

[14:26] <Geth> ¦ nqp: Implement stdout/stderr collection for async procs

[14:26] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/320a8b9c47

[14:40] <Geth> ¦ rakudo/nom: 6805f5c3c7 | (Elizabeth Mattijsen)++ | 3 files

[14:40] <Geth> ¦ rakudo/nom: Bring interface of R:Q.ADD-xx-TO-SET in line with others

[14:40] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6805f5c3c7

[14:50] <Geth> ¦ nqp: 3f0b63c9b4 | (Jonathan Worthington)++ | 2 files

[14:50] <Geth> ¦ nqp: Implement writing/closing STDIN for aysnc proc.

[14:50] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/3f0b63c9b4

[14:50] <jnthn> With that, passing all but one test in S17-procasync/basic.t on JVM

[15:18] <Geth> ¦ rakudo/nom: 58c01c501d | (Elizabeth Mattijsen)++ | 3 files

[15:18] <Geth> ¦ rakudo/nom: Unify interface of R:Q.ADD-xx-TO-BAG

[15:18] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/58c01c501d

[15:35] <Geth> ¦ rakudo/nom: f0c3bf7e9f | (Elizabeth Mattijsen)++ | 2 files

[15:35] <Geth> ¦ rakudo/nom: Some more unification in R:Q methods

[15:35] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f0c3bf7e9f

[15:40] <dogbert17> eveo: is this text up to date, i.e. the arguments part? https://docs.perl6.org/language/5to6-perlfunc#link

[15:44] <eveo> Fixed thanks.

[15:44] <dogbert17> np

[16:06] <dogbert17> m: my $x = prompt("Enter a number")

[16:06] <camelia> rakudo-moar f0c3bf: OUTPUT: «Enter a number»

[16:16] <dogbert17> eveo: have your 32 bit machine handy?

[16:21] <dogbert17> something has changed (quite recently) which makes the 'prompt' example above fail on my 32 bit Linix vm

[16:22] <dogbert17> doing an doing an strace of the snippet, i.e.   strace -f ./perl6 -e 'my $x = prompt("Enter a number")'     gives the following

[16:22] <dogbert17> ...

[16:22] <dogbert17> write(1, "Enter a number", 14Enter a number)          = 14

[16:22] <dogbert17> fsync(1)                                = -1 EINVAL (Invalid argument)

[16:23] <jnthn> How does it fail?

[16:25] <dogbert17> jnthn: Enter a numberCannot flush handle: Failed to flush filehandle: Invalid argument

[16:25] <dogbert17> in block <unit> at -e line 1

[16:25] <eveo> dogbert17: works fine on 2017.05-363-gf974dcc

[16:26] <dogbert17> eveo: must be very recent. Am on 2017.05-385-gf0c3bf7e9

[16:28] <dogbert17> just to clarify, I don't get a chance to type anything on the console, I get the 'Enter a number' prompt and the error in one fell swoop

[16:29] <jnthn> Are you at MoarVM HEAD?

[16:29] <jnthn> Also, ooc, does the REPL work?

[16:29] <dogbert17> 2017.05-71-gad6ab26f

[16:30] <eveo> Don't look like there are any IO commits between my working versions and yours: https://github.com/rakudo/rakudo/compare/2017.05-363-gf974dcc...2017.05-385-gf0c3bf7e9

[16:30] <dogbert17> the REPL seems to work

[16:30] <jnthn> How about the NQP REPL?

[16:30] <dogbert17> strange, there was an nqp bump though if that makes a difference

[16:31] <jnthn> Yeah, I'm suspecting a MoarVM change

[16:31] <dogbert17> jnthn: nqp REPL seems to work, only did a nqp::say("Hi")

[16:32] <jnthn> Even more odd

[16:32] * dogbert17 might I have messed something up

[16:37] <jnthn> dogbert17: Could you try this diff: https://gist.github.com/jnthn/4dec46cd34c6d7cc0c7e025bff124684

[16:37] <dogbert17> jnthn: will do

[16:40] <dogbert17> jnthn++, fixed it

[16:40] <jnthn> OK. I'm...not quite sure whether that's the best fix

[16:40] <jnthn> In that I worry it won't cover all the cases

[16:41] <jnthn> But time to make dal now :)

[16:41] <dogbert17> indian food again?

[16:42] * dogbert17 google say yes :)

[16:52] <eveo> moritz: "and als for download" s/als/also/;

[16:52] <eveo> moritz: "as a as a" in the same sentence

[16:53] <eveo> moritz: also unclosed parens :)

[16:53] <eveo> Andrew Shitov is on the roll with Perl 6 books it seems. Neat

[16:57] <timotimo> two books, right?

[16:58] <eveo> Looks like more, if I understand moritz's blog post right

[16:59] <timotimo> impressive

[17:00] <timotimo> i wonder if there's room on the market for a book i could write. it'd have lots of memes and lolcatspeak in it

[17:05] <eveo> ZofBot: we should also write a book. Just for robots!

[17:05] <ZofBot> eveo, A candidate is considered narrower than another candidate if at least one of its parameters is narrower and all the rest of its parameters are either narrower or tied

[17:34] <dogbert17> eveo: nice work on the perl6.org front page

[17:34] <eveo> Async example could be better, but nothing decent comes to mind

[17:35] <dogbert17> one nitpick though, does the output from the async example really contain a 'T' ?

[17:35] <eveo> It's already fixed. Just not refreshed on the site

[17:36] <dogbert17> eveo++

[17:42] <moritz> eveo: thanks, fix'd

[18:24] <samcv> good * #perl6-dev

[18:25] <eveo> \o

[18:29] <samcv> oh nice the perl6.org page changed a bit i guess

[18:29] <samcv> more information on the front page now? i don't fully remember it previously

[18:31] <eveo> samcv: better code examples https://github.com/perl6/perl6.org/commit/7dabcfe04a79aa114bb3d45bf0640f9660e3d546

[18:31] <timotimo> there's one more example, at the very least

[18:43] * masak .oO( no-one cares about custom ops? )

[18:43] <masak> who is this no-one, and how do I talk sense into them? :P

[18:45] <samcv> custom operators at the perl 6 level? or custom moarvm ops

[18:46] <masak> it was in the message of the commit linked above. so perl6.

[18:46] <eveo> It's not the most salient feature

[18:46] <timotimo> yeah, the example that was tossed was postfix:<!>

[18:47] <masak> fair enough

[18:47] <masak> though custom operators *are* nice, in some programs more than others

[18:48] <timotimo> true

[18:48] <masak> I've made extensive and joyous use of them in some kinds of exploratory programming

[18:51] <eveo> I came across them twice in someone else's program and they were awful. Trying to link essentially arbitrary symbol (in this case) to some functionality while reading someone's code is much harder than I expected, compared to some method's name for example

[18:52] <eveo> Stuff like this: https://github.com/zoffixznet/perl6-Color#-5

[18:53] <timotimo> those are cool

[18:53] <eveo> "say $c ???? 20;" looks neat and probably makes sense if you came up with it, but just looking at it, there's no connection between some circle and saturation.

[18:53] <eveo> Makes me think of a donut

[18:53] <timotimo> yeah, the other ones before are somewhat universal pictographical language for the idea of lightening or darkening

[18:58] <samcv> i can't see that symbol

[19:01] <masak> eveo: I think most "good" uses of custom operators are mathematical or algebraic in nature

[19:01] <eveo> Yeah

[19:02] <masak> the exploratory programming I was doing very naturally needed some new infix symbols, because it was basically an algebra

[19:16] <TimToady> it's just as easy to pick bad words as it is to pick bad symbols :)

[19:27] <eveo> $ perl6 -e 'say $*PERL.compiler.version; say $*PERL.compiler.version before v2017.05.380.g.0.a.100825.d'

[19:27] <eveo> v2017.05.380.g.0.a.10082

[19:27] <eveo> True

[19:27] <eveo> ohhh

[19:28] <eveo> That's weird. IIRC the version literal came from camelia. It's weird they have different versions :/

[19:28] <eveo> I guess I should just be using the `v2017.05.380.g` part

[19:29] <eveo> 1844     Zoffix │ m: say $*PERL.compiler.version

[19:29] <eveo> 1844    camelia │ rakudo-moar 0a1008: OUTPUT: «v2017.05.380.g.0.a.100825.d␤»

[19:30] <eveo> why does it produce different length string? It's possible for $*PERL.compiler.version of one build to be "before" the version of the same commit on another build

[19:33] <eveo> m: say v2017.05.380.g.0.a.10082 before v2017.05.380.g

[19:33] <camelia> rakudo-moar f0c3bf: OUTPUT: «True␤»

[19:33] <eveo> orly

[19:34] * eveo goes with v2017.05.380.*

[19:37] <eveo> Maybe it's due to rakudobrew

[19:47] <eveo> This just bizzare:

[19:47] <eveo> c: 0a10082 say $*PERL.compiler.version

[19:47] <committable6> eveo, ¦0a10082: «v2017.05.380.g.0.a.100825.d»

[19:47] <eveo> ^ debian jesse

[19:48] <eveo> ./perl6 -e 'say $*PERL.compiler.version'

[19:48] <eveo> v2017.05.380.g.0.a.10082

[19:48] <eveo> Debian jesse... Now compiled by hand to eliminate rakudobrew influence :S Why are they different?

[19:50] <eveo> Filed as https://rt.perl.org/Ticket/Display.html?id=131539

[19:50] <eveo> Just need to look at the code that makes it and it'll make sense, I guess

[19:50] * eveo relocates

[20:08] <eveo> hah... remember that groubdhog I said came up to me at the bus stop. I think I see it again now. It's a lot thinner and less cuter thia time. Tanning in the middle of the tarmac :)

[20:51] <AlexDaniel> “lets face it though simply no one is going to even do something other than squared or cubed”

[20:52] <AlexDaniel> Ulti: ↑ WTF?

[20:52] <AlexDaniel> I've been doing stuff like 2³² a lot

[20:52] <AlexDaniel> or 2⁶⁴ even

[20:53] <AlexDaniel> let's face that just because you can't type these characters you are so sure that nobody else is going to use it…

[21:24] <Geth> ¦ rakudo: AlexDaniel++ created pull request #1095: A worry for RT #126732

[21:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1095

[21:35] <MasterDuke> what's up with synopsesbot (sp)?

[21:37] <eveo> back

[21:37] <perlpilot> S04

[21:38] <eveo> S04:19

[21:38] <synopsebot6> Link: http://design.perl6.org/S04.html#line_19

[21:38] <perlpilot> ah

[21:38] <perlpilot> S12:Interface Consistency

[21:38] <synopsebot6> Link: http://design.perl6.org/S12.html#Interface_Consistency

[21:39] <perlpilot> I haven't used that bot in sooooo long

[22:00] <pmurias> how is this  is Blob.new(+^(my int $i = 10)).perl,'Blob.new(245)',

[22:00] <pmurias> 'check prefix +^ int';

[22:00] <pmurias> supposed to work?

[22:00] <pmurias> m: say(+^(my int $i = 10))

[22:00] <camelia> rakudo-moar f0c3bf: OUTPUT: «-11␤»

[22:01] <eveo> m: say [+] ^10

[22:01] <camelia> rakudo-moar f0c3bf: OUTPUT: «45␤»

[22:02] <eveo> no idea

[22:02] <eveo> Ah, it overflows backwards

[22:03] <eveo> Um

[22:04] <eveo> s: &prefix:<+>, \(^10)

[22:04] <SourceBaby> eveo, Sauce is at https://github.com/rakudo/rakudo/blob/f0c3bf7/src/core/Numeric.pm#L46

[22:04] <eveo> so where is the minus coming from

[22:04] <eveo> Oh wait

[22:05] <eveo> Ah. +^ is bitwise negation. I thought there was a range involved

[22:06] <pmurias> is that a intentional feature?

[22:07] <pmurias> ahh, it's the content not the length

[22:07] <pmurias> too much js

[22:09] <pmurias> m: use nqp;my int $i = -11; say Blob.new(nqp::add_i($i,0)).perl

[22:09] <camelia> rakudo-moar f0c3bf: OUTPUT: «Type check failed in initializing element #0 to Blob; expected uint8 but got Int (-11)␤  in block <unit> at <tmp> line 1␤␤»

[22:14] <pmurias> eveo: it turns out if the multi method optimization bug is fixed, uncommenting all the subs  from 128655 cause that test failure

[22:14] <pmurias> eveo: Blob.new doesn't like taking a negative int

[22:16] <eveo> m: dd Blob.new: -11

[22:16] <camelia> rakudo-moar f0c3bf: OUTPUT: «Blob.new(245)␤»

[22:16] <eveo> weird

[22:26] <pmurias> m: use nqp;my int $i = 11; say Blob.new(nqp::add_i($i,0)).perl

[22:26] <camelia> rakudo-moar f0c3bf: OUTPUT: «Type check failed in initializing element #0 to Blob; expected uint8 but got Int (11)␤  in block <unit> at <tmp> line 1␤␤»

[22:27] <pmurias> eveo: it happens with positive ints too

[22:27] <pmurias> eveo: my guess is they avoid being hllized somehow and the type check fails

[22:28] <pmurias> I think I'll leave the exact bug for someone else to eradicate as I have tons of js bugs to hunt down

[22:33] <eveo> Sure.
