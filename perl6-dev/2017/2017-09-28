[00:00] <samcv> and then add NFG_CHECK(tc, result, "MVM_string_join") to the end

[00:00] <MasterDuke> k

[00:00] <samcv> you shouldn't need the strand check really. NFG_CHECK performs further tests. without MVM_DEBUG_NFG_STRICT it only counts that the resul under normalization is the same number of graphemes. with strict it renormalizes it and compares each grapheme

[00:01] <samcv> well it doesn't affect the string you run NFG_CHECK on, it just checks it

[00:01] <samcv> also make sure NFG_CHECK is within MVMROOT

[00:01] <samcv> for result

[00:01] <samcv> MVMROOT result that is

[00:02] <samcv> MasterDuke, it's S15-normalization/test-gen.p6 that generates my concat tests for normalization

[00:04] <samcv> see line 73-74 in that file. you basically need to just test what's in @list, and test it's the same under various joins.

[00:05] <samcv> and i *think* result is the proper result.. i'd look in the generated concat files and it should be pretty obvious what it's generating

[00:05] <samcv> but adding a fprintf to the section of code which triggers your optimization is important to make sure you're actually testing what you think you are

[00:10] <Zoffix> \o/ 6lang poster :D https://raw.githubusercontent.com/perl6/marketing/master/TablePosters/6lang-Concise/v1--6lang-Concise--square.png

[00:12] <MasterDuke> i like it

[00:12] <Zoffix> AlexDaniel: cool. Thanks for going through it

[00:14] <samcv> i like it too

[00:14] <samcv> needs more color though :)

[00:15] <Zoffix> :)

[00:16] * Zoffix drifts towards minimalistic, often monochrome designs

[00:19] <Zoffix> https://i.imgur.com/lPHJfcC.jpg :)

[00:22] <Zoffix> \o/ it resolves for me already https://6lang.party/

[00:23] * Zoffix notices the benefit of "6lang" getting prime spot when sorted alphabetically with other names

[00:24] * Zoffix now needs to redesign book covers :P

[00:29] <MasterDuke> ugh, it can be annoying testing changes when roast also changes underneath ones-self

[00:30] <travis-ci> Rakudo build passed. Zoffix Znet 'Remove Perlism'

[00:30] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/280486168 https://github.com/rakudo/rakudo/compare/2a512f0c2346...f1334512483f

[00:31] <Zoffix> MasterDuke: note there are currently a couple of present failures

[00:31] <Zoffix> These ones https://gist.github.com/zoffixznet/d2ce77e8764830f34218a47fb398009a

[00:31] <Zoffix> lizmat++ is working on fixing the tests ATM

[00:31] <Zoffix> s/M/time period/;

[00:32] <MasterDuke> cool, thanks

[00:35] <AlexDaniel> Zoffix: speaking of posters, will we have a SQUASHathon poster this time? :)

[00:36] <AlexDaniel> maybe just s/September/October/ will do

[00:43] <cognominal> samcv, with added camelia, no need to add more color

[00:46] <cognominal> with such a short name, one can prepend an optional buzzword : reactive 6lang

[00:47] <Zoffix> I'll try to make it

[00:48] <Zoffix> .in 15h squashathon poster

[00:48] <yoleaux> Zoffix: I'll remind you at 15:48Z

[00:58] <Geth> ¦ rakudo/nom: 3341384bfe | (Zoffix Znet)++ | 2 files

[00:58] <Geth> ¦ rakudo/nom: [6.d] Deprecate IO::Handle.slurp-rest

[00:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3341384bfe

[01:01] <Geth> ¦ 6.d-prep: 37ed0b5228 | (Zoffix Znet)++ | TODO/completed-FEATURES.md

[01:01] <Geth> ¦ 6.d-prep: Mark IO::Handle.slurp-rest as completed

[01:01] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/37ed0b5228

[01:10] <Geth> ¦ rakudo/nom: 39a4b75b59 | (Zoffix Znet)++ | t/02-rakudo/v6.d-tests/01-deprecations.t

[01:10] <Geth> ¦ rakudo/nom: Restructure test routines

[01:10] <Geth> ¦ rakudo/nom:

[01:10] <Geth> ¦ rakudo/nom: So they're used as 1 routine = 1 added to plan. Easier to count.

[01:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/39a4b75b59

[02:36] <travis-ci> Rakudo build passed. Jonathan Worthington 'Do not resume after emit by closed `supply` block'

[02:36] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/280521317 https://github.com/rakudo/rakudo/compare/56193b591691...80f883bc7b18

[03:15] * TimToady notes that 6lang isn't gonna work anywhere an identifier needs a leading alpha

[03:15] <TimToady> it's also not a terribly sexy name

[03:16] <TimToady> I could go for something more like psix, "where the p is silent if you want it to be" :)

[03:18] * TimToady is currently packing up to go home from .jp, so will likely be offline for a day or so

[03:32] <geekosaur> the world has survived go and c#, it will manage :p

[03:36] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Stage 1 of auto-generated BUILDALL methods

[03:36] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/280532659 https://github.com/rakudo/rakudo/compare/80f883bc7b18...9837687d93c9

[04:14] <AlexDaniel> If we see “6lang” as a more marketable alternative, then the fact that some things may not parse it as an identifier practically does not matter. However, this little bit is quite useful:

[04:14] <AlexDaniel> m: <perl5 golang c# 6lang ruby>.sort.say

[04:14] <camelia> rakudo-moar 39a4b7: OUTPUT: «(6lang c# golang perl5 ruby)␤»

[04:14] <AlexDaniel> :)

[04:15] <AlexDaniel> .oO( AAAlang – batteries included )

[04:27] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Minimally invasive streamline Proc::Async.new'

[04:27] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/280537659 https://github.com/rakudo/rakudo/compare/9837687d93c9...bb0ebabc39ec

[05:08] <travis-ci> Rakudo build passed. Zoffix Znet 'Implement language version testing in &DEPRECATED

[05:08] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/280543575 https://github.com/rakudo/rakudo/compare/bb0ebabc39ec...36bc8e2d95b2

[05:28] <nine> ~~

[05:28] <yoleaux> 27 Sep 2017 17:08Z <Zoffix> nine: you package some stuff so maybe you know: I want to add a helper test module to Rakudo's test suite. I heard that `make test` must not create any new test files or something, so I'm wondering, would that module need `no precompilation` so that it doesn't create any precompilation files when `make test` is run?

[05:30] <nine> .tell Zoffix make test already creates precomp files as tests use the Test module, so I wouldn't worry about that. An easy way to not write into the source tree woud be running with -I/tmp/some-temp-dir

[05:30] <yoleaux> nine: I'll pass your message to Zoffix.

[05:30] <nine> .tell Zoffix technically you can change to 6.d any time. You cannot downgrade. Practically the compiler's behavior is very, very confusing when you switch to 6.d in the middle of a file. That's why we want to prohibit that. We can always relax such a restriction later on.

[05:30] <yoleaux> nine: I'll pass your message to Zoffix.

[05:55] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Revert "Minimally invasive streamline Proc::Async.new"

[05:55] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/280556339 https://github.com/rakudo/rakudo/compare/36bc8e2d95b2...167f0f83c9bf

[06:28] <[Tux]> I ran it twice, just to be sure :(

[06:29] <[Tux]> This is Rakudo version 2017.09-132-g39a4b75b5 built on MoarVM version 2017.09.1-50-g3059ba28

[06:29] <[Tux]> csv-ip5xs        1.339 -  1.578

[06:29] <[Tux]> test             9.930 - 10.076

[06:29] <[Tux]> test-t           3.569 -  4.010

[06:29] <[Tux]> csv-parser      12.803 - 13.827

[06:37] <travis-ci> Rakudo build passed. Zoffix Znet 'Deprecate dummy arg on .Rat/.FatRat…

[06:37] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/280573630 https://github.com/rakudo/rakudo/compare/167f0f83c9bf...4c337e8ef9fa

[07:25] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Stage 2 of auto-generated BUILDALL methods

[07:25] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/280633116 https://github.com/rakudo/rakudo/compare/4c337e8ef9fa...63cf246fd4ca

[07:54] * lizmat wonders if this is the correct way of handling auto-generated BUILDALL in tests: https://github.com/perl6/roast/commit/031b9cecdd

[08:01] <lizmat> [Tux]: it's doing the extra work of generated BUILDALL, but not reaping the benefits of it yet

[08:15] <Zoffix> .

[08:15] <yoleaux> 05:30Z <nine> Zoffix: make test already creates precomp files as tests use the Test module, so I wouldn't worry about that. An easy way to not write into the source tree woud be running with -I/tmp/some-temp-dir

[08:15] <yoleaux> 05:30Z <nine> Zoffix: technically you can change to 6.d any time. You cannot downgrade. Practically the compiler's behavior is very, very confusing when you switch to 6.d in the middle of a file. That's why we want to prohibit that. We can always relax such a restriction later on.

[08:15] <Zoffix> Thanks!

[08:20] <Zoffix> The identifier thing occured to me yesterday, when I thought about our .perl method, but you can always do "slang" and if it's an alt-name only and not a full rename, then people can do "p6" instead.

[08:20] <Zoffix> 6lang is pretty sexy. "psix" IMO isn't... it got pee in it :}

[08:30] <Zoffix> Someone saying "slang" would have bad reputation: https://twitter.com/lumbininep/status/913238835462496256

[08:30] * Zoffix doesn't get why

[08:40] <lizmat> http://www.urbandictionary.com/define.php?term=slang perhaps ?

[08:40] <stmuk> what about another gemstone?

[08:40] <stmuk> "Beryl often crystallizes in perfect, six-sided hexagons"

[08:41] <lizmat> .oO( it's a Beryl of fun )

[08:42] <Zoffix> I don't see anything iffy on that UD page

[08:43] <lizmat> hence my "perhaps"  :-)

[08:43] <Zoffix> ah

[08:45] <teatime> there's already an open-source project called Beryl

[08:46] <teatime> (naming things)--

[08:47] <lizmat> hmmm.. it appears Geth is not alive, or github is slow

[08:47] <Zoffix> Yeah, not in the channel

[08:48] * lizmat just pushed https://github.com/rakudo/rakudo/commit/5ad2fffed9ac01272d4a

[08:48] <Zoffix> (Geth_ is my old copy that isn't hooked up to rakudo/roast)

[08:48] <lizmat> Stage 3 of auto-generated BUILDALL

[08:48] <lizmat> 

[08:48] <lizmat> - Mu.BUILDALL has become an only again, taking a useless array as first para

[08:48] <lizmat> - Mu.new/bless have been adapted to this

[08:48] <lizmat> - auto-generated BUILDALL now also an only, taking the array also

[08:48] <lizmat> - however is not installed yet, as that breaks building the setting

[08:48] <lizmat> 

[08:48] <lizmat> This should make test-t faster again and spectest clean.

[08:48] <lizmat> afk for a few hours&

[08:48] <Zoffix> nine: ping Geth seems to have disconnected (and I haven't had a chance to fix that bug in IRC::Client yet :()

[09:09] <stmuk> beril is more restrospective acronym fitting friendly!

[09:19] <stmuk> butterfly enhanced rubbish interpreting language

[09:23] <gfldex> .tell lizmat did you see https://www.nntp.perl.org/group/perl.perl6.users/2017/09/msg4318.html ?

[09:23] <yoleaux> 27 Sep 2017 12:42Z <tbrowder> gfldex: Zoffix says you have a fast travis yml, can you let me see it? thanks

[09:23] <yoleaux> gfldex: I'll pass your message to lizmat.

[09:42] <Zoffix> commit 43c348a8e7006978057fad2e360a700d263fcbd8

[09:42] <Zoffix> Author: Zoffix Znet [email@hidden.address]
[09:42] <Zoffix> Date:   Thu Sep 28 05:41:48 2017 -0400

[09:42] <Zoffix> Undo unintended aliasing of ≤, ≥, ≠ ops

[09:42] <Zoffix> 

[09:42] <Zoffix> With userland-defined Texas versions.

[09:42] * Zoffix just pushed

[09:53] <travis-ci> Rakudo build failed. Zoffix Znet 'Restructure test routines

[09:53] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/280681782 https://github.com/rakudo/rakudo/compare/3341384bfe13...39a4b75b59bf

[09:53] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[10:01] <Zoffix> github error

[10:01] <nine> Zoffix: fixed, thanks for pointing that out!

[10:02] <Zoffix> Thanks!

[10:17] <lizmat> .

[10:17] <yoleaux> 09:23Z <gfldex> lizmat: did you see https://www.nntp.perl.org/group/perl.perl6.users/2017/09/msg4318.html ?

[10:17] <lizmat> gfldex: yes, I even mentioned it in the P6W  :-)

[10:20] <Zoffix> New blog post: "6lang: The Naming Discussion Update": https://6lang.party/post/6lang-The-Naming-Discussion-Update

[10:26] <gfldex> lizmat: I tried it to parse DateTime heavy JSON and it makes a big difference

[10:27] <lizmat> gfldex: if you could devise some piece of code that I could --profile to find out where the bottleneck is, that would be brill!

[10:28] <gfldex> lizmat: I also wonder if it would make sense to keep the original Str around and parse it lazily for cases where JSON is just turned back into JSON after holding the DateTime briefly

[10:30] <gfldex> lizmat: example that uses RL-data https://gist.github.com/gfldex/000b2c3e8da1c3f77837ef5f643a1ecd

[10:31] <Geth> ¦ 6.d-prep: d8cb95181f | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/README.md

[10:31] <Geth> ¦ 6.d-prep: List 6lang update in the naming section

[10:31] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/d8cb95181f

[10:51] <Geth> ¦ rakudo/nom: 31a03a41f0 | (Elizabeth Mattijsen)++ | src/core/Lock/Async.pm

[10:51] <Geth> ¦ rakudo/nom: Fix chicken/egg problem with Lock::Async::Holder

[10:51] <Geth> ¦ rakudo/nom:

[10:51] <Geth> ¦ rakudo/nom: Trying to call .new at compile time on a class that refers to an outer

[10:51] <Geth> ¦ rakudo/nom: class that has not been composed yet, explodes at least during setting

[10:51] <Geth> ¦ rakudo/nom: compilation (without much useful feedback).

[10:51] <Geth> ¦ rakudo/nom:

[10:51] <Geth> ¦ rakudo/nom: Since the .new was without parameters, a simple nqp::create is enough.

[10:51] <Geth> ¦ rakudo/nom:

[10:51] <Geth> ¦ rakudo/nom: This allows setting compilation to complete with auto-generated BUILDALL

[10:51] <Geth> ¦ rakudo/nom: installed.  But "make install" still fails  :-(

[10:51] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/31a03a41f0

[11:16] <dogbert2> .seen Zoffix

[11:16] <yoleaux> I saw Zoffix 11:01Z in #perl6: <Zoffix> squashable6: status

[11:18] <dogbert2> Zoffix: when changing the t/spec/VERSION file to 6.c should it complain about missing test files when starting the spectest?

[11:18] <dogbert2> Testing Roast version 6.c using test file list from t/spectest.data.6.c

[11:18] <dogbert2> Missing test file: t/spec/S03-operators/bag.t

[11:18] <dogbert2> ...

[11:29] <Zoffix> dogbert2: you don't change the version, you checkout 6.c-errata. Yes it should complain, since that file is not in master branch

[11:32] <Zoffix> Prolly should add extra make targets to stresstest/spectest multiple language versions

[11:33] <Zoffix> And prolly should rip out the 'use v6.c' (if we got it) from master test files but stick it into released roast versions

[11:34] * Zoffix &

[11:39] <dogbert2> oh, my mistake, was a bit annoyed wrt to the increased spectest time and stupidly thought that I could get back to the 'old' spectest.data by way of a VERSION change

[11:40] <Zoffix> m: constant s'lang = 'works as ifentifier'; say s'lang

[11:40] <camelia> rakudo-moar 31a03a: OUTPUT: «works as ifentifier␤»

[11:42] <Zoffix> dogbert2: how much is the increase? the new multi-roast should be a few milliseconds faster, if anything, since it no longer runs the 4-6 dummy test files

[11:42] <Zoffix> (on master)

[11:45] <Zoffix> m: for ^10000 { DEPRECATED 'meow', '6.d', '6.e', :lang-vers }; say now - INIT now

[11:45] <camelia> rakudo-moar 31a03a: OUTPUT: «2.8320810␤»

[11:45] <Zoffix> ouch

[11:46] <Zoffix> That's prolly why slower

[11:46] <Zoffix> Gonna take a look into it after $work

[11:46] * Zoffix &

[12:16] <Zoffix> m: $*PERL.^lookup('version').file.say

[12:16] <camelia> rakudo-moar 31a03a: OUTPUT: «/home/camelia/rakudo-m-inst-1/share/perl6/runtime/CORE.setting.moarvm␤»

[12:36] <jdv79_> Zoffix: why did you say "in 5? in your poster?  i'd have used 6 or at least not 5 - reminds me of p5 but could be me.

[12:37] <Zoffix> "9 to 5"

[12:38] <Zoffix> 9/2 => 5

[12:38] <jdv79> oh, i guess

[12:39] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Fix chicken/egg problem with Lock::Async::Holder

[12:39] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/280815689 https://github.com/rakudo/rakudo/compare/43c348a8e700...31a03a41f0e3

[12:50] <Zoffix> jdv79: changed. Thanks: https://github.com/perl6/marketing/blob/master/TablePosters/6lang-Concise/v1--6lang-Concise.png

[12:50] <lizmat> timotimo jnthn: still puzzeled about how to attach type object name to generate BUILDALL method  :-(

[12:51] <Zoffix> oh damn, overwrote over the wrong file

[12:54] <jnthn> "type object name"?

[12:57] <jdv79> every single thing you ever wanted to do could be done in 6 hours if only you used 6lang!

[12:58] <jdv79> good stuff;)

[13:04] <timotimo> lizmat: attach where?

[13:04] <lizmat> well, somewhere that would show up in stack traces

[13:04] <timotimo> ooooh

[13:04] <timotimo> yeah, that's tricky

[13:05] <lizmat> now, if something blows in the generated BUILDALL, there's no way to tell which BUILDALL

[13:05] <timotimo> not worse than before :P

[13:05] <lizmat> well, so far I got it to build the setting

[13:06] <lizmat> but loading any module with "use" dies

[13:06] <lizmat> somewhere

[13:06] <timotimo> right :(

[13:06] <lizmat> most likely in CompUnit::DependencySpecification

[13:06] <timotimo> stack trace should tell you which .new was called though?

[13:06] <lizmat> but that's probably just the first

[13:06] <lizmat> that's usually Mu.new if BUILDALL is in play anyway

[13:08] <Geth> ¦ rakudo: gerd++ created pull request #1174: add documentation to use the script

[13:08] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1174

[13:11] <jnthn> If we had the $/ of the class decl, we could just put the file/line number there

[13:11] <jnthn> Then it'd at least point straight at the class it was generated for

[13:11] <Geth> ¦ rakudo/nom: b7f8daf001 | gerd++ | tools/install-dist.pl

[13:11] <Geth> ¦ rakudo/nom: add documentation to use the script

[13:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b7f8daf001

[13:11] <Geth> ¦ rakudo/nom: fe75e31b43 | lizmat++ (committed using GitHub Web editor) | tools/install-dist.pl

[13:11] <Geth> ¦ rakudo/nom: Merge pull request #1174 from gerd/nom

[13:11] <Geth> ¦ rakudo/nom:

[13:11] <Geth> ¦ rakudo/nom: add documentation to use the script

[13:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fe75e31b43

[13:12] <lizmat> jnthn: do we have $/ around at compose time ?

[13:15] <jnthn> m: class A { has $.a }; A.a

[13:15] <camelia> rakudo-moar 31a03a: OUTPUT: «Cannot look up attributes in a A type object␤  in block <unit> at <tmp> line 1␤␤»

[13:15] <jnthn> m: class A { has $.a }; A.a; CATCH { Backtrace.new.full.note }

[13:15] <camelia> rakudo-moar 31a03a: OUTPUT: «  in code  at SETTING::src/core/Backtrace.pm line 85␤  in method new at SETTING::src/core/Backtrace.pm line 85␤  in block  at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤Cannot look up attributes in a A type object␤  in block <unit> at <t…»

[13:16] <lizmat> m: class A { has $.a }; dd A.can("a")[0].signature  # yet the signature appears to be ok ??

[13:16] <camelia> rakudo-moar 31a03a: OUTPUT: «:(A:D $: *%_)␤»

[13:17] <lizmat> m: class A { has $!a; method a(A:D:) { $!a } }; dd A.can("a")[0].signature  # yet the signature appears to be ok ??

[13:17] <camelia> rakudo-moar 31a03a: OUTPUT: «:(A:D $: *%_)␤»

[13:17] <jnthn> heh, I had no idea it has that signature :P

[13:17] <lizmat> m: class A { has $!a; method a(A:D:) { $!a } }; dd A.a

[13:17] <camelia> rakudo-moar 31a03a: OUTPUT: «Invocant of method 'a' must be an object instance of type 'A', not a type object of type 'A'.  Did you forget a '.new'?␤  in method a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[13:17] <jnthn> I expected the error it gave :)

[13:18] <jnthn> I was looking at whether the accessor method's line/file pointed to the declaring mocation

[13:18] <lizmat> so somehow, the method is not generated the same was as if done by hand

[13:18] <jnthn> Well, more like a :D is sneaked into the signature but the code that's compiled doesn't reflect it

[13:18] <jnthn> The easy fix is to make the signature more truthful

[13:19] <jdv79> lizmat: what exactly has you on this quest to lazify construction?

[13:19] <jnthn> Anyway, that's not relevant

[13:19] <jnthn> For the current topic at hand

[13:19] <lizmat> jdv79: it's not about lazifying

[13:20] <lizmat> jnthn: sorry I misunderstood the topic  :-)

[13:20] <lizmat> jdv79: this is about making all object creation using Mu.new about 1.5x faster (preliminary benchmarks)

[13:20] <jnthn> I was checking if the line/file are set on the generated method, 'cus I didn't fancy looking at the code :P

[13:20] <jdv79> ok

[13:20] <jnthn> Now I'm looking at the code and they aren't in that case either

[13:22] <jnthn> jdv79: At the moment, we interpret the setup of objects using a loop in Mu.BUILDALL. That means all the attribute lookups, attribute default thunks, and BUILD method calls are late-bound and megamorphic. lizmat is looking at compiling that setup work instead of interpreting it.

[13:23] <Zoffix> \o/

[13:23] <jnthn> lizmat: Ah, there's not an easy way to pass the $/ down at the moment

[13:24] <lizmat> ok, I had come to that conclusion also  :-(

[13:24] <jnthn> But there's perhaps an easy solution

[13:25] <lizmat> I hope so :-)

[13:25] <jnthn> Add a $!current-match or some such to CompilerServices

[13:25] <jnthn> And then pass $/ to get_compiler_services

[13:25] <jnthn> And have it bind the $/ (which we have at that point) into the attribute

[13:25] <lizmat> ah, ok

[13:25] <jnthn> Doing it every time, not in the unless nqp::isconcrete(...)

[13:26] <jnthn> It's cached on a World and a World isn't shared between concurrent compiles, so it'll be safe :)

[13:26] <jnthn> (The "it" in this case being the CompilerServices instance)

[13:26] <jdv79> i was just curious what the motivating source was

[13:26] <lizmat> yeah, gotcha

[13:27] <lizmat> jdv79: a question I asked jnthn at the SPW: what would be a good place for me to work on optimization  :-)

[13:28] <jnthn> Object setup is a bottleneck at the moment

[13:28] <jnthn> And the interpreter approach missed out on a lot of nice things spesh can do

[13:28] <jdv79> ah.  very nice.

[13:29] <lizmat> jnthn: what about auto-generating .new instead of BUILDALL ?

[13:29] <jnthn> Like inlining a small BUILD submethod or attribute default thunk into the generated BUILDALL

[13:30] <jnthn> lizmat: That means folks writing a custom new having other constructors wouldn't be able to take advantage of this

[13:30] <jnthn> *or having

[13:30] <Zoffix> "This representation (P6int) cannot unbox to other types (for type int)"

[13:30] <Zoffix> what's that mean?

[13:30] <jnthn> Did you get it from NQP code of Perl 6 code?

[13:31] <jnthn> *or

[13:31] <Zoffix> Perl 6

[13:31] <Zoffix> m: use nqp; my \a := v1.2; my \b = v1.3; $ = nqp::getattr(nqp::decont(a),Version,'$!plus') cmp nqp::getattr(nqp::decont(b),Version,'$!plus')

[13:31] <camelia> rakudo-moar fe75e3: OUTPUT: «This representation (P6int) cannot unbox to other types (for type int)␤  in block <unit> at <tmp> line 1␤␤»

[13:31] <jnthn> Odd, I dunno how you ended up with a boxed form of a native type

[13:32] <jnthn> That isn't Perl 6, it's Perl 6 with nqp:: ops, so all bets are off :P

[13:32] <Zoffix> $!plus is `has int $!plus`

[13:32] <jnthn> ohh

[13:32] <Zoffix> Ah, ok :)

[13:32] <jnthn> then that's the problem

[13:32] <jnthn> Should use nqp::getattr_i :)

[13:32] <Zoffix> Ohhhh. Right. Thanks!

[13:43] <lizmat> jnthn: yeah but  no but

[13:44] <lizmat> so the R:I:CompilerServices now has the $!current-match attribute

[13:44] <lizmat> ahh. sorry

[13:44] <lizmat> figured it out

[13:46] * jnthn puts away the stuffed bear costume :)

[13:47] <Zoffix> :o

[13:48] <jnthn> heh, I thought everyone knew the "Before you tell your problem to IT support, first explain it to this stuffed bear" story :-)

[13:48] <jnthn> (A good number of problems are solved by a realization that comes when trying to explain it to somebody else. :))

[13:49] <Zoffix> I know that as explaining to a rubber duck

[13:49] <lizmat> jnthn: the accessor / buildall generator methods now take $/ as the first param

[13:50] <lizmat> and I've added a ":node($/)" to the QAST::Block

[13:50] <lizmat> don't see a difference just yet  :-(

[13:51] <jnthn> I think it needs to go on the QAST::Stmts

[13:51] <lizmat> ack

[13:52] <Zoffix> ZOFFLOP: t/spec/S11-modules/nested.t

[13:52] <Zoffix> ZOFVM: Files=1275, Tests=152190, 139 wallclock secs (20.62 usr  3.28 sys + 2925.76 cusr 198.47 csys = 3148.13 CPU)

[13:54] <Geth> ¦ rakudo/nom: 1d9553f01f | (Zoffix Znet)++ | src/core/Version.pm

[13:54] <Geth> ¦ rakudo/nom: Make &inifx:<cmp> with Version:Ds 7.2x faster

[13:54] <Geth> ¦ rakudo/nom:

[13:54] <Geth> ¦ rakudo/nom: Now that we use DEPRECATED sub in more places due to 6.d changes,

[13:54] <Geth> ¦ rakudo/nom: this op becomes more used, so we needed a perf boost.

[13:54] <Geth> ¦ rakudo/nom:

[13:54] <Geth> ¦ rakudo/nom: Makes `v6.c cmp v6.d` 8.8x faster

[13:54] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1d9553f01f

[14:19] <gfldex> m: my @l = <a b c>; @l = @l xx 2; dd @l;

[14:19] <camelia> rakudo-moar 1d9553: OUTPUT: «Array @l = ((my @Array_59828440) = [@Array_59828440, @Array_59828440])␤»

[14:19] <gfldex> should xx procude a circual list in this case?

[14:20] <jnthn> No

[14:20] <lizmat> m: 'my @l = ^10; my @m = @l xx 2; dd @m  # no

[14:20] <camelia> rakudo-moar 1d9553: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unable to parse expression in single quotes; couldn't find final "'"␤at <tmp>:1␤------> 3y @l = ^10; my @m = @l xx 2; dd @m  # no7⏏5<EOL>␤    expecting any of:␤        single quotes␤       …»

[14:20] <jnthn> xx doesn't automatically flatten its LHS

[14:20] <lizmat> m: my @l = ^10; my @m = @l xx 2; dd @m  # no

[14:20] <camelia> rakudo-moar 1d9553: OUTPUT: «Array @m = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]␤»

[14:21] <jnthn> m: my @l = <a b c>; @l = |@l xx 2; dd @l

[14:21] <camelia> rakudo-moar 1d9553: OUTPUT: «Array @l = ["a", "b", "c", "a", "b", "c"]␤»

[14:21] * Zoffix was going with "yes"

[14:21] <jnthn> And when we do slip it, then we've extracted the values

[14:22] <jnthn> m: my @l = <a b c>; @l = |@l xx *; dd @l[^20]

[14:22] <Zoffix> @l = @l xx 2 is like @l = @l, @l to me, so yes, you get circular values

[14:22] <camelia> rakudo-moar 1d9553: OUTPUT: «MoarVM panic: Memory allocation failed; could not allocate 25904 bytes␤»

[14:22] <jnthn> Oh, that kind of circular

[14:22] <jnthn> I thought it was meant as "repeating eternally"

[14:22] <Zoffix> Oh

[14:22] <jnthn> hah

[14:22] <jnthn> In that case yes, it should produce a self-referencing thing :)

[14:23] <jnthn> Dunno why I didn't read it that way in the first place

[14:25] <gfldex> jnthn: I found a nice new bug for you. For $repetitions < 64 this works: https://gist.github.com/c0af5f2033e2cfa5b8570e17712d0d27

[14:25] <gfldex> (and is fast :)

[14:26] <Geth> ¦ rakudo/nom: eb9c3d4dd7 | (Elizabeth Mattijsen)++ | 2 files

[14:26] <Geth> ¦ rakudo/nom: Add $/ to CompilerServices

[14:26] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eb9c3d4dd7

[14:26] <lizmat> jnthn: still no luck on where to add :node($/) exactly

[14:28] <Geth> ¦ rakudo/nom: 145e3156ca | (Zoffix Znet)++ | src/core/Deprecations.pm

[14:28] <Geth> ¦ rakudo/nom: Make &DEPRECATED 27% faster when vfrom is too large

[14:28] <Geth> ¦ rakudo/nom:

[14:28] <Geth> ¦ rakudo/nom: - This is the case for 6.d deprecations used in 6.c language

[14:28] <Geth> ¦ rakudo/nom: - The speedup measure does not include Version cmp boost[^1]

[14:28] <Geth> ¦ rakudo/nom:

[14:28] <Geth> ¦ rakudo/nom: [1] https://github.com/rakudo/rakudo/commit/1d9553f01f

[14:28] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/145e3156ca

[14:38] <Zoffix> m: for ^10000 { DEPRECATED 'meow', '6.d', '6.e', :lang-vers }; say now - INIT now

[14:38] <camelia> rakudo-moar eb9c3d: OUTPUT: «2.2482009␤»

[14:40] <gfldex> jnthn: it does work for some values > 64 and seams to depend on the nr. of physical cores

[14:41] <jnthn> There's concurrency in there?

[14:42] <jnthn> oh heck, .hyper

[14:42] <jnthn> There's still a load of RTs about that. It needs a lot of attention. :(

[14:44] <Zoffix> Yeah, the docs list it as experimental: https://docs.perl6.org/routine/hyper

[14:46] <jnthn> It's on my "stuff to try and take care of for 6.d" list

[14:46] <jnthn> Probably it's the next big thing I'll work on, now that the scheduler and supply changes are in

[14:46] <Geth> ¦ rakudo/nom: 346dfeff3e | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[14:46] <Geth> ¦ rakudo/nom: Make auto-generated accessors know what they are

[14:46] <Geth> ¦ rakudo/nom:

[14:46] <Geth> ¦ rakudo/nom: Turns out :node($/) does need to be added to the first QAST:Stmts.

[14:46] <Geth> ¦ rakudo/nom: This became clear after git stashing all of the other stuff I was

[14:46] <Geth> ¦ rakudo/nom: working on.

[14:46] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/346dfeff3e

[14:47] <gfldex> jnthn: also it's a heisenbug

[14:48] <lizmat> m: class A { has $!a; method a() { $!a }  }; dd A.a   # looks like auto-generated accessors are equivalent to this

[14:48] <camelia> rakudo-moar eb9c3d: OUTPUT: «Cannot look up attributes in a A type object␤  in method a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:49] <lizmat> m: class A { has $!a; method a(A:D:) { $!a }  }; dd A.a   # as opposed to this

[14:49] <camelia> rakudo-moar eb9c3d: OUTPUT: «Invocant of method 'a' must be an object instance of type 'A', not a type object of type 'A'.  Did you forget a '.new'?␤  in method a at <tmp> line 1␤  in block <unit> at <tmp> line 1␤␤»

[14:56] <ugexe> heads up: i guess the BUILDALL changes break zef, and while its use of BUILDALL can be changed to TWEAK (which is what I would have used if it existed at the time anyway) it won't help existing zef installations for a rakudo that gets upgraded

[14:58] <lizmat> ugexe: how does it break zef ?  could you be more specific ?

[14:58] <ugexe> https://github.com/ugexe/zef/pull/208

[14:58] <ugexe> i havent looked into it anymore than reading that PR just now

[14:59] <lizmat> ugexe: BUILDALL is an only again now

[14:59] <lizmat> could you pull?

[15:00] <lizmat> ugexe: having said that, TWEAK looks like the better option anyway

[15:02] <lizmat> oddly enough, BUILDALL has been a multi for over a year

[15:07] <ugexe> i see no problem on HEAD

[15:07] <lizmat> *phew*

[15:07] <lizmat> still, TWEAK would be better

[15:07] <Zoffix> FWIW all the broken tests are passing again

[15:07] <Zoffix> all stresstest passes

[15:10] <lizmat> guys, sorry for the noise, but putting this in a branch would just have meant these issues would prop up much later

[15:12] <Zoffix> :)

[15:15] <Zoffix> Looks like Mexico is a bad name for Unicode ops

[15:16] <lizmat> fwiw, I think Unicode ops is a better description

[15:17] <lizmat> I guess we could also go for s/Texas/ASCII/

[15:17] <Geth> ¦ rakudo/nom: a89add0bf8 | (Zoffix Znet)++ | src/Perl6/Optimizer.nqp

[15:17] <Geth> ¦ rakudo/nom: Remove term "mexico ops" from source

[15:17] <Geth> ¦ rakudo/nom:

[15:17] <Geth> ¦ rakudo/nom: It's not a good name for Unicode alternatives to Texas ops for reasons.

[15:17] <Geth> ¦ rakudo/nom:

[15:17] <Geth> ¦ rakudo/nom: Fixes RT#132179: https://rt.perl.org/Ticket/Display.html?id=132179

[15:17] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a89add0bf8

[15:21] <Zoffix> ASCII is good as it lets people unfamiliar with our jargon easily figure out what it means.

[15:27] <lizmat> FWIW, I'm pretty confident that the auto-generated BUILDALL will take about .1 from test-t

[15:27] <Zoffix> \o/

[15:29] <lizmat> perhaps more now that the optimizer can optimize better on it

[15:34] <lizmat> jnthn timotimo nine: does this ring any bell?  Cannot perform this operation on an uninstantiated definite type

[15:35] <lizmat> afaict, this happens when trying to run a pre-compiled BUILDALL

[15:36] <timotimo> if it were me i'd grep moarvm source for that string, break on it in gdb and call MVM_dump_backtrace(tc)

[15:37] <jnthn> No, but it sounds like something about :D

[15:37] <lizmat> yeah, that much I know as well

[15:38] <lizmat> for a while I thought this could be because the invocant_type was not in the SC

[15:38] <timotimo> not helpful that it says "this operation" :)

[15:39] <lizmat> but $*W.create_definite_type appears to put it in the SC

[15:39] <lizmat> at gen/moar/Metamodel.nqp:3834  (blib/Perl6/Metamodel.moarvm:check_instantiated)

[15:39] <lizmat> from gen/moar/Metamodel.nqp:3839  (blib/Perl6/Metamodel.moarvm:base_type)

[15:39] <lizmat> from gen/moar/Metamodel.nqp:3885  (blib/Perl6/Metamodel.moarvm:type_check)

[15:39] <jnthn> What do you do with the result of that

[15:39] <lizmat> nothing

[15:40] <lizmat> I *think* it's because the invocant is marked :D

[15:40] <lizmat> (on the generated BUILDALL)

[15:40] <jnthn> nothing?

[15:40] <jnthn> Like, not even use it somewhere?

[15:40] <lizmat> afaics, it happens when Mu.new does a self.BUILDALL

[15:41] <lizmat> going to try without the :D on the BUILDALL invocant

[15:42] <timotimo> oh, doesn't BUILDALL do nqp::create first of all?

[15:42] <timotimo> i.e. should almost always be called on a type object?

[15:43] <jnthn> It's always called on an instance

[15:43] <lizmat> ahh.. could it be the return value is weird ?

[15:48] <yoleaux> Zoffix: squashathon poster

[15:48] <lizmat> jnthn timotimo: should one need more than this as the final op?  $stmts.push(QAST::Var.new(:name('self'), :scope('local')));

[15:48] <lizmat> ??

[15:49] <jnthn> No, that should return self

[15:49] <jnthn> Is latest code pushed?

[15:49] <jnthn> I can see if I can spot the problem...

[15:52] <lizmat> lemme make sure the debug stuff isn't in there

[16:02] <Geth> ¦ rakudo/nom: 70ca505ad0 | (Elizabeth Mattijsen)++ | 2 files

[16:02] <Geth> ¦ rakudo/nom: Stage 5 of auto-generated BUILDALL

[16:02] <Geth> ¦ rakudo/nom:

[16:02] <Geth> ¦ rakudo/nom: - fallback to Mu.BUILDALL if the BUILDPLAN is empty

[16:02] <Geth> ¦ rakudo/nom:   although the methods were shared, there was no point as Mu.BUILDALL

[16:02] <Geth> ¦ rakudo/nom:   needs to exist anyway to handle object creation before Rakudo::Internals

[16:02] <Geth> ¦ rakudo/nom:   is parsed during setting compilation.

[16:02] <Geth> ¦ rakudo/nom: - do not try to make/install a BUILDPLAN if there is one already

[16:02] <Geth> ¦ rakudo/nom: - add :note($/) for better error reporting

[16:02] <Geth> ¦ rakudo/nom: - seems to still have an issue when being precompiled

[16:02] <Geth> ¦ rakudo/nom:   therefore the BUILDALL is installed as BUILDALL_UNDER_CONSTRUCTION

[16:02] <Geth> ¦ rakudo/nom:   as to not interfere with anything out there just yet.

[16:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/70ca505ad0

[16:03] <lizmat> jnthn: ^^^  in ClassHow, remove _UNDER_CONSTRUCTION to get full functionality

[16:05] <Zoffix> .tell AlexDaniel 2017.10 SQUASHathon poster: https://github.com/perl6/marketing/tree/master/TablePosters/SQUASHathon/2017.10

[16:05] <yoleaux> Zoffix: I'll pass your message to AlexDaniel.

[16:06] <jnthn> lizmat: $!w.create_definite_type( returns the type

[16:06] <jnthn> So using it in sink context makes no sense

[16:07] * lizmat looks

[16:07] <lizmat> argh

[16:07] <lizmat> sorry, that slipped through

[16:08] <lizmat> was an attempt to double check whether the coercion type was the problem

[16:10] <Geth> ¦ rakudo/nom: af2ab751b8 | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[16:10] <Geth> ¦ rakudo/nom: We want the definite type, jnthn++

[16:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/af2ab751b8

[16:11] <lizmat> jnthn: other than that, any other pointers ?

[16:11] <jnthn> Does https://github.com/rakudo/rakudo/blob/70ca505ad0df472c5d37146fb4646cd0c57a2f03/src/Perl6/World.nqp#L3024 not need an SVal case?

[16:12] <lizmat> no, because the native str case uses nqp::isnull_s

[16:12] <jnthn> ah, ok

[16:12] <jnthn> That change you just did doesn't change the error?

[16:12] <lizmat> no

[16:13] <jnthn> hmmmm

[16:13] <lizmat> but I have a bit more info now

[16:13] <lizmat> I've just added a "... done" at the end of the generated BUILDALL

[16:14] <lizmat> that is *not* run

[16:15] <lizmat> ok, going to get very verbose by adding per action output

[16:16] <jnthn> OK, if you're super stuck lemme know and I can run it locally

[16:21] <lizmat> it seems to die here:

[16:21] <lizmat> # nqp::if(

[16:21] <lizmat> #   nqp::existskey($init,'a'),

[16:21] <lizmat> #   nqp::getattr(self,Foo,'$!a') = %init.AT-KEY('a')

[16:21] <lizmat> # ),

[16:21] <lizmat> where Foo and 'a' are placeholders

[16:34] <Zoffix> 6.c-errata fails t/spec/S12-introspection/methods.t t/spec/S17-supply/basic.t t/spec/integration/advent2009-day11.t.  full output: https://gist.github.com/zoffixznet/fb53ecac504e05d476211551948e85c7

[16:35] <lizmat> yeah, that's again after my last commit

[16:35] <lizmat> the tests need fixing

[16:35] <lizmat> but am not sure what the best way would be

[16:36] <Geth> ¦ roast/6.c-lang-use-v6c: e59acd6cff | (Zoffix Znet)++ | 26 files

[16:36] <Geth> ¦ roast/6.c-lang-use-v6c: Use `v6.c` instead of `v6` so we get right language version

[16:36] <Geth> ¦ roast/6.c-lang-use-v6c: review: https://github.com/perl6/roast/commit/e59acd6cff

[16:37] <Geth> ¦ roast: zoffixznet++ created pull request #336: Use `v6.c` instead of `v6` so we get right language version when 6.d comes out

[16:37] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/336

[16:41] <AlexDaniel> .oO( you really want an identifier? Here: )

[16:41] <yoleaux> 16:05Z <Zoffix> AlexDaniel: 2017.10 SQUASHathon poster: https://github.com/perl6/marketing/tree/master/TablePosters/SQUASHathon/2017.10

[16:41] <AlexDaniel> m: my \六lang = ‘六’.unival; say 六lang

[16:41] <camelia> rakudo-moar af2ab7: OUTPUT: «6␤»

[16:43] <Geth> ¦ 6.d-prep: 05bbbbe16b | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[16:43] <Geth> ¦ 6.d-prep: Remove .[READ|WRITE|EOF]-SOURCE

[16:43] <Geth> ¦ 6.d-prep:

[16:43] <Geth> ¦ 6.d-prep: I proposed them and no longer like 'em

[16:43] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/05bbbbe16b

[16:43] <Zoffix> Some name bikeshedding welcome: https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md#spec-iohandles-write-internal-read-internal-eof-internal

[16:44] <Zoffix> Don't wanna spec "*-internal" because everywhere else "internal" means Rakudo-only guts that users must not be using.

[16:45] <jnthn> maybe just uppercase (READ, WRITE, EOF) as we call other "called for you" methods

[16:46] <Zoffix> +1

[16:46] <jnthn> (AT-POS, CALL-ME, etc.)

[16:52] <lizmat> jnthn: I think the problem occurs in the lines following https://github.com/rakudo/rakudo/blob/70ca505ad0df472c5d37146fb4646cd0c57a2f03/src/Perl6/World.nqp#L3388

[16:53] <jnthn> In that area, should try and get a way to change the output buffer size on an existing handle into 6.d also

[16:55] <Geth> ¦ 6.d-prep: 559215bc74 | (Zoffix Znet)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[16:55] <Geth> ¦ 6.d-prep: Add TODO: buffer size on existing IO::Handle

[16:55] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/559215bc74

[16:58] <Geth> ¦ 6.d-prep: 386cdc682c | (Jonathan Worthington)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[16:58] <Geth> ¦ 6.d-prep: Update status of non-blocking await

[16:58] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/386cdc682c

[16:59] <lizmat> jnthn: ok, so, if I change the Str:D and Int:D in CompUnit::DependencySpecification to natives, all is fine

[17:01] <jnthn> Oh, so it's a type check on those attrs...

[17:02] <jnthn> But...why'd that be happening any differently here

[17:02] <jnthn> The assign should be coming out the same

[17:03] <jnthn> Does it work if you use p6store for everything instead of assign? That's the only difference I can immediately thing of, but it really shouldn't be the issue...

[17:05] * jnthn builds locally to tinker also

[17:05] <lizmat> already tried that

[17:05] <lizmat> also, adding a decont

[17:05] <lizmat> like I do in the native case

[17:08] <jnthn> What's supposed to go wrong?

[17:09] <jnthn> I was expecting the build to explode

[17:09] <jnthn> oh, make test fails

[17:09] <jnthn> OK, I see the error

[17:10] <lizmat> anytime you try to use a module

[17:11] <lizmat> BTW, removing the :D from the sig in CU:DependencySpecification gives a different error message

[17:13] <jnthn> Trying to reproduce it outside of CORE.setting

[17:13] <jnthn> But things with a :D type there seem to work out

[17:13] <lizmat> ./perl6 --ll-exception -I. -e 'use Foo'

[17:14] <lizmat> does it for me, where Foo.pm is a file containing class A { has $.a }

[17:16] <jnthn> Oh, for sure, I meant that I can't write something like -e 'class C { has Str:D $.foo is required }.new' and have it blow up

[17:16] <lizmat> somehow it has to do with precomp

[17:16] <jnthn> Urgh

[17:16] <jnthn> But yeah, I'm sorta suspecting that

[17:17] <jnthn> what about -e 'class A { has A:D $.x is required }' ?

[17:17] <jnthn> uh, with .new

[17:17] * jnthn rebuilding locally

[17:18] <lizmat> jnthn: is required is a separate action: it doesn't get there

[17:18] <lizmat> if blows on trying to read from the %init hash

[17:18] <lizmat> afaics

[17:18] <jnthn> I was figuring it blows on the assign?

[17:18] <jnthn> 'cus that's what'd trigger the type check

[17:19] <lizmat> I guess

[17:19] <jnthn> oh, if I remove all the :D in CompUnit dependency class, then it loads a module and passes the test

[17:19] <jnthn> For 53-transpose.t anyway

[17:20] <lizmat> make install doesn't work for me with :D removed

[17:21] <lizmat> the error seems to point to the attribute not being properly inited

[17:21] <lizmat> Cannot find method 'item': no method cache and no .^find_method

[17:22] <timotimo> something in $ context?

[17:22] <jnthn> Does make test work for you with it removed?

[17:22] <jnthn> Dinner time here, anyways

[17:22] <jnthn> bbl

[17:23] <lizmat> make test is clean

[17:24] <timotimo> i put lots of debug says in there and it is indeed what you pointed out. for the short-name hash key

[17:24] <timotimo> it's "is required" and has a :D on it

[17:25] <timotimo> could the "is required" be problematic?

[17:25] <lizmat> no, because that is a different action

[17:25] <lizmat> it doesn't get there

[17:26] <timotimo> ah, ok

[17:26] <timotimo> we have two entries to make "is required" work?

[17:27] <timotimo> right, the check has to go at the very end, doesn't it

[17:27] <lizmat> yup

[17:36] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Add $/ to CompilerServices'

[17:36] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/280892841 https://github.com/rakudo/rakudo/compare/1d9553f01f5c...eb9c3d4dd779

[17:36] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[17:38] <lizmat> afk for a bite or two&

[17:41] <Zoffix> travis: Stage parse      : Segmentation fault (core dumped)

[17:48] <timotimo> i don't understand why it'd think that Str:D is not parameterized

[17:49] <timotimo> BBL

[17:50] <timotimo> (actually, not bbl. change of plans.)

[17:57] <Zoffix> I'm not following this commit... why is .find_lexical() needed? https://github.com/rakudo/rakudo/commit/43c348a8e7006978057fad2e360a700d263fcbd8

[17:58] <Zoffix> I compiled without it now and it's no longer texifying the op.... but I don't get why. WOuldn't find_lexical not find anything (without user's use of the op) and throw and should-texify would return 0 and not texify anything?

[18:04] <timotimo> find_lexical also goes into the core setting

[18:04] <timotimo> or do you mean these don't exist any more at all?

[18:07] <Zoffix> No, they should exist. I don't get get why find_lexical is needed in that code at all. Looks like .is_from_core rakes through blocks

[18:07] <Zoffix> Or maybe it don't exist. Like this line looks for it: https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Optimizer.nqp#L1410

[18:08] <Zoffix> ZofBot: whatishaaapenning?

[18:08] <ZofBot> Zoffix, i like this change

[18:11] <Zoffix> hm, well this change does result in a texified unicode op but if I remove .find_lexical, then it doesn't (I think; gonna try again now): https://gist.github.com/zoffixznet/7ac7991e2aa9a197f6ddfc06543639d9

[18:13] <timotimo> it could be is_from_core expects you to check for existence first, but i don't know

[18:16] <Zoffix> Ah, OK, is_from_core looks for <value> and find_lexical converts <lazy_value_from> to <value>

[18:23] <timotimo> oh

[18:46] <Geth> ¦ 6.d-prep: af6896ca6e | (Jonathan Worthington)++ (committed using GitHub Web editor) | TODO/FEATURES.md

[18:46] <Geth> ¦ 6.d-prep: Add a couple more 6.d things I'm planning

[18:46] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/af6896ca6e

[18:46] <Zoffix> m: ' foo bar baz' ~~ /[\s+(\S+)]+/; my ($foo, @bar) = $/.list.head; say $foo, '###', @bar;

[18:46] <camelia> rakudo-moar af2ab7: OUTPUT: «｢foo｣###[｢bar｣ ｢baz｣]␤»

[18:47] <Zoffix> jdv79: ^ it's not so much about itemization but that .list's first element contains an entire Array with all the captures. You basically have list of list, so you need to go one level deeper if you wanted what you wanted

[18:49] <AlexDaniel> fwiw there's now 6lang.org that redirects to perl6.org (including subdomains). Better safe than sorry. I'm not interested in keeping the control over the domain so please get ready for the transfer at some point (60 is days is probably what we'll have to wait? ping moritz?). I'll prepay it for a few years ahead before the transfer.

[18:49] <Zoffix> \o/

[18:50] <Zoffix> "60 is days is probably what we'll have to wait?" hm? wait for what?

[18:50] <AlexDaniel> there's some limit for freshly registered domains, I think

[18:50] <Zoffix> Ah

[18:51] <AlexDaniel> “You must wait 60 days after the initial registration or any previous transfers to initiate a transfer.”

[18:51] <Zoffix> m: ' foo bar baz' ~~ /[\s+(\S+)]+/; my (@ ($foo, *@bar)) := $/; say $foo, '###', @bar;

[18:51] <camelia> rakudo-moar af2ab7: OUTPUT: «｢foo｣###[｢bar｣ ｢baz｣]␤»

[18:52] <Zoffix> ehehe <3 signature-based `my`

[18:53] <Zoffix> m: my (@ ($foo, *@bar)) := ' foo bar baz' ~~ /[\s+(\S+)]+/; say $foo, '###', @bar;

[18:53] <camelia> rakudo-moar af2ab7: OUTPUT: «｢foo｣###[｢bar｣ ｢baz｣]␤»

[18:53] <Zoffix> lovely

[18:53] <Zoffix> AlexDaniel++ # domain

[18:56] <Geth> ¦ rakudo/nom: 9ff2f98f79 | (Zoffix Znet)++ | src/Perl6/Optimizer.nqp

[18:56] <Geth> ¦ rakudo/nom: Polish unicode -> ascii op converter

[18:56] <Geth> ¦ rakudo/nom:

[18:56] <Geth> ¦ rakudo/nom: - Explain why .find_lexical is needed

[18:56] <Geth> ¦ rakudo/nom: - Move the call to converter after .find_lexical is called for

[18:56] <Geth> ¦ rakudo/nom:     target op

[18:56] <Geth> ¦ rakudo/nom: - Remove args that weren't used in the helper sub

[18:56] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9ff2f98f79

[19:00] <AlexDaniel> also, if somebody can add 6lang.org alias to existing websites then I'll change the dns entry right away (so that http://modules.6lang.org opens up without a redirect)

[19:36] * AlexDaniel finds this comment interesting https://www.reddit.com/r/perl/comments/72s6ad/my_concerns_about_the_future_of_perl/dnlnrde/

[19:36] <AlexDaniel> some people really flip the table even if you're changing something for a good reason

[19:37] <Zoffix> Yeah

[19:38] <Zoffix> I flipped out at HTTP::Server::Tiny changing stuff under me twice ina  week

[19:38] <Zoffix> It's really annoying.

[19:39] <jdv79> Zoffix: thanks

[19:40] <Zoffix> I don't know if we're going to be similarly affected as that comment suggest, once we get the language versioning going full speed. Since if you got `use v6.c` or whatever in your code, you're basically not getting any new changes, even if you upgrade your compiler

[19:41] <Zoffix> FWIW, p5porters filed a ticket (and PR I think?) on my crappy and unloved ZofCMS just to fix the regex { bugs and then followed up on whether the fix was applied, so they did a very thorough job of reducing fallout

[20:19] <Geth> ¦ rakudo/nom: d60ba6339a | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[20:19] <Geth> ¦ rakudo/nom: HLLize shortname parameter to CU::DependencySpecification

[20:19] <Geth> ¦ rakudo/nom:

[20:19] <Geth> ¦ rakudo/nom: This change makes all of the auto-generated BUILDALL stuff work.

[20:19] <Geth> ¦ rakudo/nom:

[20:19] <Geth> ¦ rakudo/nom: Theory is that having a native str as a named parameter doesn't

[20:19] <Geth> ¦ rakudo/nom: jive well with doing Str:D checking.  But this can apparently only

[20:19] <Geth> ¦ rakudo/nom: happen when being called from NQP, as in Perl 6 a native str will

[20:19] <Geth> ¦ rakudo/nom: be hllized automatically.

[20:19] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d60ba6339a

[20:28] <timotimo> wow

[20:28] <timotimo> that's a good find, damn

[20:30] <lizmat> well, turns out it isn't the fix  :-(

[20:30] <lizmat> I thought it was :-(

[20:31] <timotimo> hold on

[20:31] <timotimo> you're hllizing it to nqp aren't you?

[20:31] <timotimo> wouldn't you have to nqp::hllizefor($stuff, "perl6")?

[20:31] <lizmat> not sure what I was thinking there

[20:31] <lizmat> ahhhh

[20:32] <lizmat> lowercase 'perl6' ?

[20:32] <lizmat> not 'Perl6' ?

[20:32] <lizmat> looks like lowercase

[20:33] <timotimo> not sure

[20:33] <lizmat> ack tells me yes

[20:35] <lizmat> ok, now I get: Something went wrong in (Assignment)

[20:35] <timotimo> huh

[20:36] <AlexDaniel> .oO( is that… a butterfly?? https://www.amazon.com/gp/product/1680500880 )

[20:36] <timotimo> where does that come from ..

[20:36] <lizmat> no idea, but I'm getting *really* fed up :-(

[20:37] <timotimo> an exception has that in its message method

[20:37] <timotimo> oh, huh.

[20:38] <timotimo> that's the class of exception

[20:38] <timotimo> probably X::TypeCheck::Exception?

[20:39] <timotimo> its message method potentially also threw an exception

[20:39] <lizmat> I'm going to nativy all of the :D attributes in CU::DependencySpecification

[20:39] <lizmat> that solves the issue

[20:43] <Geth> ¦ rakudo/nom: 04ea446dd3 | (Elizabeth Mattijsen)++ | src/Perl6/World.nqp

[20:43] <Geth> ¦ rakudo/nom: Revert "HLLize shortname parameter to CU::DependencySpecification"

[20:43] <Geth> ¦ rakudo/nom:

[20:43] <Geth> ¦ rakudo/nom: This reverts commit d60ba6339a75863cd8720fb5db7c0d5b535f0cd3.

[20:43] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/04ea446dd3

[20:47] <Geth> ¦ rakudo/nom: 5cd9197fe3 | (Elizabeth Mattijsen)++ | src/core/CompUnit/DependencySpecification.pm

[20:47] <Geth> ¦ rakudo/nom: Nativy :D attributes on CU::DependencySpecification

[20:47] <Geth> ¦ rakudo/nom:

[20:47] <Geth> ¦ rakudo/nom: Seems to be the only way to get auto-generated BUILDALL to work.

[20:47] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5cd9197fe3

[20:57] <Geth> ¦ rakudo/nom: 6824e19282 | (Elizabeth Mattijsen)++ | 2 files

[20:57] <Geth> ¦ rakudo/nom: Stage 6 of auto-generated BUILDALL

[20:57] <Geth> ¦ rakudo/nom:

[20:57] <Geth> ¦ rakudo/nom: - auto-generated BUILDALL now installed as BUILDALL

[20:57] <Geth> ¦ rakudo/nom: - so all classes have their own BUILDALL

[20:57] <Geth> ¦ rakudo/nom:   unless there was nothing to do, in which case they fall back to Mu.BUILDALL

[20:57] <Geth> ¦ rakudo/nom: - removed/commented out debugging ops

[20:57] <Geth> ¦ rakudo/nom:

[20:57] <Geth> ¦ rakudo/nom: Benchmarks show that .new on a class that uses Mu.new and named parameters,

[20:57] <Geth> ¦ rakudo/nom: is now about 1.5x as fast.  This means .2 seconds faster for test-t on my

[20:57] <Geth> ¦ rakudo/nom: machine (about 9% faster).

[20:57] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6824e19282

[20:57] <lizmat> now starting on cleanup of broken tests

[20:58] <timotimo> sounds good

[20:59] <timotimo> i wonder what opportunities await for speshing

[21:01] <lizmat> who knows  :-)

[21:01] <lizmat> I think we also need to teach Optimizer.nqp to ignore autogenerated BUILDALL methods

[21:01] <lizmat> no need to look in there

[21:02] <Geth> ¦ roast: d89dc5b4b4 | (Elizabeth Mattijsen)++ | S11-compunit/compunit-dependencyspecification.t

[21:02] <Geth> ¦ roast: Make failure tests less specific

[21:02] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/d89dc5b4b4

[21:03] <Geth> ¦ roast/6.c-errata: 89f05034ae | (Elizabeth Mattijsen)++ | S11-compunit/compunit-dependencyspecification.t

[21:03] <Geth> ¦ roast/6.c-errata: Make failure tests less specific

[21:03] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/89f05034ae

[21:06] <Geth> ¦ roast: 0b90da2ece | (Elizabeth Mattijsen)++ | S12-introspection/methods.t

[21:06] <Geth> ¦ roast: Make sure we only look at first 3 methods

[21:06] <Geth> ¦ roast:

[21:06] <Geth> ¦ roast: Thereby ignoring any auto-generated methods like BUILDALL

[21:06] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/0b90da2ece

[21:07] <Geth> ¦ roast/6.c-errata: 4388150623 | (Elizabeth Mattijsen)++ | S12-introspection/methods.t

[21:07] <Geth> ¦ roast/6.c-errata: Make sure we only look at first 3 methods

[21:07] <Geth> ¦ roast/6.c-errata:

[21:07] <Geth> ¦ roast/6.c-errata: Thereby ignoring any auto-generated methods like BUILDALL

[21:07] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/4388150623

[21:09] <lizmat> argh, it looks like t/spec/S32-str/sprintf.t is a real casualty  :-(

[21:12] <Geth> ¦ roast: b29c9ce977 | (Elizabeth Mattijsen)++ | integration/advent2009-day11.t

[21:12] <Geth> ¦ roast: Make sure we only look at first 2 methods

[21:12] <Geth> ¦ roast:

[21:12] <Geth> ¦ roast: Thereby ignoring any auto-generated methods like BUILDALL

[21:12] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b29c9ce977

[21:13] <timotimo> don't think it'll make a big difference whether we look in there or not

[21:13] <Geth> ¦ roast/6.c-errata: 370efd2cbb | (Elizabeth Mattijsen)++ | integration/advent2009-day11.t

[21:13] <Geth> ¦ roast/6.c-errata: Make sure we only look at first 2 methods

[21:13] <Geth> ¦ roast/6.c-errata:

[21:13] <Geth> ¦ roast/6.c-errata: Thereby ignoring any auto-generated methods like BUILDALL

[21:13] <Geth> ¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/370efd2cbb

[21:13] <timotimo> it's nice and flat as far as the optimizer is concerne

[21:13] <timotimo> bigger wins are probably in other places in the optimizer

[21:15] <lizmat> ok

[21:16] <lizmat> judging by t/spec/S32-str/sprintf.t , we still may have some ecosystem fallout of these changes :-(

[21:19] <dogbert2> htmlify.p6 breaks with the latest rakudo

[21:19] <dogbert2> ===SORRY!===

[21:19] <dogbert2> Missing serialize REPR function for REPR MVMContext (BOOTContext)

[21:21] <lizmat> dogbert2: is it really 6824e19282 that breaks stuff ?

[21:21] <dogbert2> that's the one I'm running

[21:22] <lizmat> :-(

[21:22] <dogbert2> perhaps this gist can tell us something https://gist.github.com/dogbert17/c637734a67d4c7753ba513ddcd4e783a

[21:24] <lizmat> dogbert2: and 5cd9197fe3707d5136 was ok ?

[21:26] <dogbert2> I can check .....

[21:27] <lizmat> please...  :-)

[21:30] <dogbert2> will take a few minutes

[21:30] <lizmat> tell me about it...

[21:31] <lizmat> I think I've run about 100 core setting builds today

[21:31] <lizmat> waiting for that to complete was almost 2.5 hours worth

[21:31] <lizmat> :-(

[21:32] <timotimo> :( :(

[21:32] <dogbert2> yeah, it takes a while

[21:34] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Make auto-generated accessors know what they are

[21:34] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/280902222 https://github.com/rakudo/rakudo/compare/145e3156ca43...346dfeff3e2f

[21:34] <buggable> [travis build above] ✓ All failures are due to: GitHub connectivity (1 failure).

[21:38] <dogbert2> hmm, tried to build that commit with rakudobrew, which worked, but then I had no modules installed for that version ...

[21:38] <lizmat> ah?

[21:39] <dogbert2> anyway when doing 'zef install OO::Monitors' I get

[21:39] <dogbert2> ===SORRY!===

[21:39] <dogbert2> Missing serialize REPR function for REPR MVMContext (BOOTContext)

[21:39] <lizmat> ok, that would be the same error

[21:39] <lizmat> timotimo: does that ring any bell with you ?

[21:40] <timotimo> no :(

[21:40] <dogbert2> it happens during testing

[21:41] <samcv> The Grants Committee would appreciate comments regarding this grant and its state of completion before it votes on whether to approve the work and proceed to payment

[21:41] <samcv> if anyone wants to comment http://news.perlfoundation.org/2017/09/final-report-grant-robust-perl.html

[21:43] <dogbert2> lizmat: what I can say is that it worked earlier today with 31a03a41f0e3a60

[21:44] <dogbert2> haven't run it since, well until now that is

[21:45] <dogbert2> no, strike my last comment, I think it was another version

[21:45] * dogbert2 is also having trouble with github atm

[21:47] <dogbert2> could there be something here https://github.com/jnthn/oo-monitors/blob/master/t/BUILD.t

[21:52] <Zoffix__> so much for a peaceful night of hacking... my Spyware10 updated itself and VirtualBox VM with all my tools no longer starts >:(

[21:52] <Geth> ¦ rakudo/nom: 7363f898f6 | (Elizabeth Mattijsen)++ | src/core/Rakudo/Internals.pm

[21:52] <Geth> ¦ rakudo/nom: Move up Rakudo::Internals::CompilerServices

[21:52] <Geth> ¦ rakudo/nom:

[21:52] <Geth> ¦ rakudo/nom: So that other classes inside Rakudo::Internals get a proper autogenerated

[21:52] <Geth> ¦ rakudo/nom: BUILDALL.  Which should allow us to make Mu.BUILDALL a noop basically.

[21:52] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7363f898f6

[21:54] <Zoffix__> I can't believe I paid good money for this POS

[21:54] <dogbert2> the --verbose option of zef says:

[21:54] <dogbert2> t/new.t ........ ok

[21:54] <dogbert2> ===SORRY!===

[21:54] <dogbert2> Missing serialize REPR function for REPR MVMContext (BOOTContext)

[21:54] <dogbert2> t/precomp.t ....

[21:57] <lizmat> dogbert2: could you check if a revert of 6824e19282e19a0953 fixes it ?

[22:01] <dogbert2> I can try but if you want to reproduce the error all it takes is 'zef install OO::Monitors'

[22:01] <jnthn> samcv: left a comment :)

[22:04] * Zoffix is re-tooled

[22:05] <Zoffix> ZofBot: nothing can stop the ZOFFER!

[22:05] <ZofBot> Zoffix, I moved a one that tested a limit with infix:x out of roast already

[22:05] <Zoffix> Well, OK. I trust you.

[22:11] * timotimo also left a comment on the grant

[22:13] <timotimo> unsurprisingly i'm +1 on proceeding to payment

[22:13] <dogbert2> unless I'm messing things up, not impossiblem the 04ea446dd3034b9 doesn't work either

[22:15] * dogbert2 is definitely messing up his spelling

[22:19] * lizmat is getting close to going to bed

[22:19] <lizmat> dogbert2: so a revert of 6824e19282e19a0953fc64 didn't fix it ?

[22:23] <dogbert2> I've tried earlier versions and that fails as well, could be doing something wrong ofc

[22:23] <Geth> ¦ 6.d-prep: 60a4d8254f | (Zoffix Znet)++ | 2 files

[22:23] <Geth> ¦ 6.d-prep: Move implemented features to completed file

[22:23] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/60a4d8254f

[22:24] <Zoffix> .tell moritz reminder that you're listed as steakholder for https://github.com/perl6/6.d-prep/blob/master/TODO/FEATURES.md#sigils-imply-d

[22:24] <yoleaux> Zoffix: I'll pass your message to moritz.

[22:24] <dogbert2> e.g. 346dfeff3e2f4b built with rakudobrew didn't work

[22:24] <lizmat> dogbert2: 346dfeff3e2f4b7e54 would also be a candidate to try reverting

[22:25] <dogbert2> building 31a03a41f0e3a6 atm

[22:28] <Zoffix> Lacking better ideas, I"m adding 'die if v6.d' to is_approx()

[22:28] <Zoffix> No idea how else to remove it :)

[22:29] <Zoffix> Well, other than to actually removing it and then rewriting 6.c-errata's is_approx use.

[22:29] <dogbert2> lizmat: 31a03a41f0e3a6 works

[22:29] * Zoffix is a bit fuzzy on how all these deprecation+removal are meant to work with roast tests....

[22:30] <lizmat> dogbert2: could you test eb9c3d4dd7791ad1b483 ?

[22:31] <dogbert2> sure

[22:32] * lizmat is going to bed

[22:32] <lizmat> will look again in the morning

[22:33] <lizmat> but I've had my 11+ hours of settings hacking today

[22:33] <lizmat> good night!

[22:33] <dogbert2> night

[22:33] <Zoffix> night

[22:39] <dogbert2> .tell lizmat eb9c3d4dd7791ad1 fails

[22:39] <yoleaux> dogbert2: I'll pass your message to lizmat.

[22:42] <Geth> ¦ rakudo: skids++ created pull request #1175: Move security RT#131079 fix from Grammar to Actions

[22:42] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1175

[22:42] <Zoffix> huggable: hacktoberfest

[22:42] <huggable> Zoffix, Hacktoberfest Issues: https://github.com/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+user%3Aperl6+label%3AHacktoberfest

[22:43] <Zoffix> Yes! @Zoffix[2016] was right about leaving those labels around :D

[22:44] <Zoffix> Oh crap

[22:45] <Zoffix> AlexDaniel: thinking maybe hacking on rakudo repo in October is a bit LTA, since it's gonna be Hacktober and we could have proper Hacktober labeled issues users even outside 6lang community could find and join in

[22:46] <AlexDaniel> Zoffix: awwwww…

[22:47] <Zoffix> AlexDaniel: but you mentioned RT sucks. There is a possibility of unlocking rakudo/rakudo Issues. I mean, I have no keys to that part, but... :)

[22:48] <AlexDaniel> that's what I'm thinking too, but even if we have rakudo/rakudo/issues, then what? We can't just move a bunch of LHF tickets in a single click

[22:49] <AlexDaniel> … but maybe we don't have any LHF tickets

[22:49] <AlexDaniel> Zoffix: OK, it's a bit LTA, I agree. We can change something. Any ideas on what can be done?

[22:49] <Zoffix> I know of one. I think teatime called dibs on it. Actually, there are more than one open tickets, but they're all about Range quantifiers in regexes

[22:50] <Zoffix> AlexDaniel: what can be done about what? A different repo? Lots of LHF for roast

[22:50] <Zoffix> huggable: tag testneeded

[22:50] <huggable> Zoffix, nothing found

[22:50] <Zoffix> huggable: tag TESTNEEDED

[22:50] <huggable> Zoffix, nothing found

[22:50] <Zoffix> buggable: tag TESTNEEDED

[22:50] <buggable> Zoffix, There are 45 tickets tagged with TESTNEEDED; See http://fail.rakudo.party/t/TESTNEEDED for details

[22:51] <AlexDaniel> what if we open rakudo/rakudo/issues, and then move these 45 tickets?

[22:51] <AlexDaniel> ah wait, that's still wrong

[22:51] <AlexDaniel> because it's basically roast issues, hmm…

[22:51] <Zoffix> Yeah

[22:52] <AlexDaniel> I totally forgot that hacktoberfest is a thing so I did not think this through :S

[22:53] <timotimo> it also surprised me, tbh

[22:54] <Zoffix> I just got reminded about it too :)

[22:54] * Zoffix gonna score 4th shirt

[23:01] <AlexDaniel> well, technically, if someone is working on RT tickets then he will be submitting pull requests for rakudo. That counts for Hacktoberfest, right? So the only issue is that we are less inclined to add Hacktoberfest labels?

[23:02] <Zoffix> Yeah, PRs will still count to Rakudo

[23:03] <Zoffix> But Hacktoberfest labels will reach a larger audience (there's twitter hashtag and the event itself recommends adding such labels to participants could find them)

[23:03] <AlexDaniel> yeah, I see

[23:04] <AlexDaniel> and yet again RT hurts us, even if a little bit

[23:07] <Geth> ¦ rakudo/nom: cd043f2ae4 | (Zoffix Znet)++ | 2 files

[23:07] <Geth> ¦ rakudo/nom: "Remove" is_approx in 6.d

[23:07] <Geth> ¦ rakudo/nom:

[23:07] <Geth> ¦ rakudo/nom: It long lived out its deprecation period, but is still used by

[23:07] <Geth> ¦ rakudo/nom: 6.c roast. I'm not sure how such removals are meant to be handled,

[23:07] <Geth> ¦ rakudo/nom: since a routine removed in 6.n is still in used in previous langs.

[23:07] <Geth> ¦ rakudo/nom:

[23:07] <Geth> ¦ rakudo/nom: So I made it just die in 6.d. Close enough?

[23:07] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cd043f2ae4

[23:08] <Geth> ¦ 6.d-prep: 45156bf730 | (Zoffix Znet)++ | 2 files

[23:08] <Geth> ¦ 6.d-prep: Mark is_approx removal as complete

[23:08] <Geth> ¦ 6.d-prep:

[23:08] <Geth> ¦ 6.d-prep: Removed in in 6.d in https://github.com/rakudo/rakudo/commit/cd043f2ae4

[23:08] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/45156bf730

[23:20] <Geth> ¦ rakudo/nom: 01d4939c38 | (Zoffix Znet)++ | 2 files

[23:20] <Geth> ¦ rakudo/nom: Deprecate Str.lines: :$count in 6.d

[23:20] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/01d4939c38

[23:21] <Geth> ¦ 6.d-prep: d1ef01dc13 | (Zoffix Znet)++ | 2 files

[23:21] <Geth> ¦ 6.d-prep: Mark Str.lines: :$count as completed

[23:21] <Geth> ¦ 6.d-prep:

[23:21] <Geth> ¦ 6.d-prep: Done in https://github.com/rakudo/rakudo/commit/01d4939c38

[23:21] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/d1ef01dc13

[23:22] <timotimo> hm. in my test program here range creation is rather wasteful with scalar allocations - not that it'd cost a lot

[23:23] <timotimo> 127613 calls to &infix:<..>, 392952 scalars in Range.new, 261968 in SET-SELF, 255226 in &infix:<..>

[23:24] <timotimo> m: say 255226 / 127613; say 261968 / 127613; say 392952 / 127613

[23:24] <camelia> rakudo-moar cd043f: OUTPUT: «2␤2.0528316␤3.0792474␤»

[23:48] <Geth> ¦ rakudo/nom: 9cb4b167f5 | (Zoffix Znet)++ | src/core/Main.pm

[23:48] <Geth> ¦ rakudo/nom: Remove $*MAIN-ALLOW-NAMED-ANYWHERE

[23:48] <Geth> ¦ rakudo/nom:

[23:48] <Geth> ¦ rakudo/nom: It was unspecced and temporarily added to transition users of old panda.

[23:48] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9cb4b167f5

[23:49] <Geth> ¦ 6.d-prep: f86587e995 | (Zoffix Znet)++ | 2 files

[23:49] <Geth> ¦ 6.d-prep: Mark $*MAIN-ALLOW-NAMED-ANYWHERE removal as completed

[23:49] <Geth> ¦ 6.d-prep:

[23:49] <Geth> ¦ 6.d-prep: Done in https://github.com/rakudo/rakudo/commit/9cb4b167f5

[23:49] <Geth> ¦ 6.d-prep: review: https://github.com/perl6/6.d-prep/commit/f86587e995
