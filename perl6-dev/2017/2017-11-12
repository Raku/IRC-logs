[07:17] <yoleaux> AlexDaniel`: RT/GH weekly

[07:43] <ugexe> https://jenkins.p6.nu/job/rakudo/label=linux/1/console

[07:43] <ugexe> https://jenkins.p6.nu/job/rakudo/label=windows/1/console

[07:48] <ugexe> normally tests (spectests in this case) would be in their own thing, but throwing this together it just runs make spectest during build (so  you have to view the tests through the console)

[08:01] <ugexe> slaves are dynamically provisioned and torn down on azure cloud, so still need to figure out how to hook up to an osx cloud provider the same way

[08:47] <Geth> ¦ rakudo: 100198a3c0 | usev6++ | src/core/ThreadPoolScheduler.pm

[08:47] <Geth> ¦ rakudo: Bandaid to unbust JVM build

[08:47] <Geth> ¦ rakudo:

[08:47] <Geth> ¦ rakudo: For some reasons using a native results in a NullPointerException during

[08:47] <Geth> ¦ rakudo: stage parse.

[08:47] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/100198a3c0

[09:12] <travis-ci> Rakudo build failed. usev6 'Bandaid to unbust JVM build

[09:12] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/300871581 https://github.com/rakudo/rakudo/compare/86e9f44aec0c...100198a3c074

[09:12] <buggable> [travis build above] ☠ Did not recognize some failures. Check results manually.

[09:43] <bartolin> oh f* I messed that one up. Could someone revert my last commit, please. I have no access to my GH account atm

[11:27] <Geth> ¦ rakudo: eebbcca1ca | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm

[11:27] <Geth> ¦ rakudo: Revert "Bandaid to unbust JVM build"

[11:27] <Geth> ¦ rakudo:

[11:27] <Geth> ¦ rakudo: This reverts commit 100198a3c074bb99babde2c3ee152bd279e398da.

[11:27] <Geth> ¦ rakudo:

[11:27] <Geth> ¦ rakudo: As requested by author on:

[11:27] <Geth> ¦ rakudo:   https://irclog.perlgeek.de/perl6-dev/2017-11-12#i_15437142

[11:27] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/eebbcca1ca

[11:39] <lizmat> Files=1229, Tests=75833, 319 wallclock secs (14.86 usr  5.42 sys + 2192.27 cusr 218.85 csys = 2431.40 CPU)

[11:48] <Geth> ¦ star: virtualsue++ created pull request #107: Minor README.md rewording

[11:48] <Geth> ¦ star: review: https://github.com/rakudo/star/pull/107

[11:50] <Geth> ¦ star: 85a9abd81a | (sue spence)++ | README.md

[11:50] <Geth> ¦ star: Reworded to help people like me who stumble onto this repo by accident

[11:50] <Geth> ¦ star:

[11:50] <Geth> ¦ star: when searching for rakudo star related info.

[11:50] <Geth> ¦ star: review: https://github.com/rakudo/star/commit/85a9abd81a

[11:50] <Geth> ¦ star: 7f3a9964bb | lizmat++ (committed using GitHub Web editor) | README.md

[11:50] <Geth> ¦ star: Merge pull request #107 from virtualsue/master

[11:50] <Geth> ¦ star:

[11:50] <Geth> ¦ star: Minor README.md rewording

[11:50] <Geth> ¦ star: review: https://github.com/rakudo/star/commit/7f3a9964bb

[12:10] <travis-ci> Rakudo build passed. Elizabeth Mattijsen 'Revert "Bandaid to unbust JVM build"

[12:10] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/300908700 https://github.com/rakudo/rakudo/compare/100198a3c074...eebbcca1cad4

[14:16] <Geth> ¦ rakudo: f87d8ef8e8 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[14:16] <Geth> ¦ rakudo: Resolve confusion about short/long names in T:I:Usage

[14:16] <Geth> ¦ rakudo:

[14:16] <Geth> ¦ rakudo: Spotted while writing tests

[14:16] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/f87d8ef8e8

[14:16] <lizmat> afk&

[15:44] <[Tux]> Rakudo version 2017.10-164-gf87d8ef8e - MoarVM version 2017.10-58-gad8618468

[15:44] <[Tux]> csv-test-xs-20      0.439 -  0.456

[15:44] <[Tux]> csv-ip5xs           1.103 -  1.125

[15:44] <[Tux]> test-t --race       1.416 -  1.448

[15:44] <[Tux]> test-t              3.282 -  3.381

[15:44] <[Tux]> test               12.300 - 12.606

[15:44] <[Tux]> csv-parser         12.017 - 12.851

[15:44] <[Tux]> csv-ip5xs-20       13.019 - 13.179

[15:44] <[Tux]> test-t-20 --race   20.764 - 22.167

[15:44] <[Tux]> test-t-20          60.681 - 61.515

[15:56] <Geth> ¦ rakudo: 38f51db9ff | usev6++ | src/core/ThreadPoolScheduler.pm

[15:56] <Geth> ¦ rakudo: Bandaid to unbust JVM build

[15:56] <Geth> ¦ rakudo:

[15:56] <Geth> ¦ rakudo: For some reasons using a native results in a NullPointerException during

[15:57] <Geth> ¦ rakudo: stage parse.

[15:57] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/38f51db9ff

[15:57] <bartolin> lizmat: thanks a lot for helping out with the revert earlier today!

[17:56] <lizmat> bartolin: yw

[18:15] <Geth> ¦ rakudo: 6d8ed28743 | (Elizabeth Mattijsen)++ | src/core/ThreadPoolScheduler.pm

[18:15] <Geth> ¦ rakudo: Remove $!exhausted attribute altogether

[18:15] <Geth> ¦ rakudo:

[18:15] <Geth> ¦ rakudo: - it is not needed, because we only need it in the supervisor loop

[18:15] <Geth> ¦ rakudo: - the idea of making it an attribute was to allow Telemetry to access it

[18:15] <Geth> ¦ rakudo:   - but that is probably better served by putting that in Thread itself

[18:15] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/6d8ed28743

[18:57] <AlexDaniel> oh wow…

[18:58] <AlexDaniel> found a segfault in a program that has just one comment

[18:58] <lizmat> ?  cool  :-)

[18:58] <Geth> ¦ rakudo: 8c5bc57ea7 | (Elizabeth Mattijsen)++ | src/core/Thread.pm

[18:58] <Geth> ¦ rakudo: The app_lifetime of the initial thread is True

[18:58] <Geth> ¦ rakudo:

[18:58] <Geth> ¦ rakudo: FWIW, this is only a correction for purely informational purposes

[18:58] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/8c5bc57ea7

[18:59] <AlexDaniel> two characters in total :)

[18:59] <AlexDaniel> u: 񭺪

[18:59] <unicodable6> AlexDaniel, U+6DEAA <reserved-6DEAA> [] (񭺪)

[18:59] <AlexDaniel> hmm

[19:00] <AlexDaniel> let's see if we're lucky enough

[19:00] <AlexDaniel> m: #񭺪

[19:00] <camelia> rakudo-moar 6d8ed2874: ( no output )

[19:00] <AlexDaniel> m: #񭺪

[19:00] <camelia> rakudo-moar 6d8ed2874: ( no output )

[19:00] <AlexDaniel> m: #񭺪

[19:00] <camelia> rakudo-moar 6d8ed2874: ( no output )

[19:00] <AlexDaniel> m: #񭺪

[19:00] <camelia> rakudo-moar 6d8ed2874: ( no output )

[19:00] <AlexDaniel> m: #񭺪

[19:00] <camelia> rakudo-moar 6d8ed2874: ( no output )

[19:00] <AlexDaniel> m: #񭺪

[19:00] <camelia> rakudo-moar 6d8ed2874: ( no output )

[19:00] <AlexDaniel> e: #񭺪

[19:00] <evalable6> AlexDaniel, rakudo-moar 6d8ed2874: OUTPUT: «»

[19:00] <AlexDaniel> e: #񭺪

[19:00] <evalable6> AlexDaniel, rakudo-moar 6d8ed2874: OUTPUT: «»

[19:00] <AlexDaniel> nope.

[19:04] <samcv> where is the segfault AlexDaniel

[19:04] <samcv> or how do i trigger it myself

[19:05] <samcv> m: "#\x[6DEAA]".EVAL

[19:05] <camelia> rakudo-moar 6d8ed2874: ( no output )

[19:09] <Geth> ¦ roast: 7a6630a9ca | usev6++ | 6 files

[19:09] <Geth> ¦ roast: [jvm] Fudge some failing tests

[19:09] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7a6630a9ca

[19:10] <AlexDaniel> samcv: GH#1247

[19:10] <synopsebot> GH#1247 [open]: https://github.com/rakudo/rakudo/issues/1247 [SEGV] Reserved characters in the source code cause segfaults (#򫳞)

[19:10] <AlexDaniel> samcv: let me know if you can't reproduce it

[19:10] <Geth> ¦ rakudo: 928e24306b | (Elizabeth Mattijsen)++ | src/core/Kernel.pm

[19:10] <Geth> ¦ rakudo: Expose getrusage<max-rss> as Kernel.memory

[19:10] <Geth> ¦ rakudo:

[19:10] <Geth> ¦ rakudo: This is the 3rd part of exposing nqp::cpucores and nqp::getrusage to

[19:10] <Geth> ¦ rakudo: the world.  We should probably decide if we want to keep these or not

[19:10] <Geth> ¦ rakudo: this way before the next release.  This applies to:

[19:10] <Geth> ¦ rakudo: - Kernel.cpu-cores  # number of cores in system

[19:10] <Geth> ¦ rakudo: - Kernel.cpu-usage  # number of microseconds of CPU used by process

[19:10] <Geth> ¦ rakudo: - Kernel.memory     # max resident set size in Kbytes

[19:10] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/928e24306b

[19:10] <samcv> AlexDaniel: i cannot

[19:11] <AlexDaniel> in a loop like this? Does not segfault?

[19:11] <AlexDaniel> :'(

[19:11] <AlexDaniel> samcv: can you leave it running for a few minutes?

[19:13] <AlexDaniel> it takes about 5 iterations here

[19:16] <lizmat> afk&

[19:21] <dogbert17> samcv: run the example in valgrind

[19:23] <AlexDaniel> what is so special about my machine? Similarly to R#1202, people find it hard to reproduce stuff that I get in a few seconds

[19:23] <synopsebot> R#1202 [open]: https://github.com/rakudo/rakudo/issues/1202 [severe] Async qqx sometimes hangs or dies ( await (^5).map({start { say qqx{… …} } }) )

[19:24] <AlexDaniel> debian unstable 64-bit, no CPU load

[19:24] <dogbert17> AlexDaniel: your example did trigger valgrind on the first run, that's enough for me :)

[19:24] <dogbert17> ==15104== Use of uninitialised value of size 4

[19:24] <dogbert17> ==15104==    at 0x41BD4F8: MVM_unicode_get_property_str (unicode.c:71883)

[19:24] <dogbert17> ==15104==    by 0x41BD4F8: MVM_unicode_codepoint_get_property_cstr (unicode.c:82197)

[19:24] <AlexDaniel> dogbert17: ah, ok. Good. Good.

[19:25] <Geth> ¦ rakudo: dbce04e6a2 | (Elizabeth Mattijsen)++ | src/core/Thread.pm

[19:25] <Geth> ¦ rakudo: Revert "The app_lifetime of the initial thread is True"

[19:25] <Geth> ¦ rakudo:

[19:25] <Geth> ¦ rakudo: This reverts commit 8c5bc57ea70193d57698fa42545d8e625b03829f.

[19:25] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/dbce04e6a2

[19:25] <AlexDaniel> dogbert17: what about R#1202 ?

[19:26] <dogbert17> that always hangs after a while for me. Would have preferred a SEGV though :)

[19:26] <AlexDaniel> dogbert17: ah-ha, ok.

[19:27] <jnthn> As another data pointer, no crash or valgrind triggering in my Linux VM on my not-so-fast home machine; This is Rakudo version 2017.09-479-g7cf5ce7 built on MoarVM version 2017.09.1-614-g1952356

[19:29] <jnthn> Which is some way back from HEAD, I notice :)

[19:30] <samcv> AlexDaniel: it doesn't trigger valgrind for me. are you using the latest moarvm?

[19:30] <samcv> i fixed an issue in MVM_unicode_get_property_str a few days ago

[19:30] <AlexDaniel> This is Rakudo version 2017.10-165-g38f51db9f built on MoarVM version 2017.10-57-gd257df23

[19:30] <samcv> commit 11b12a268

[19:31] <samcv> AlexDaniel: yeah that's too old

[19:31] <samcv> moarvm may or may not be bumped though

[19:31] <AlexDaniel> it's not, as far as I can see

[19:32] <samcv> that explains why i can't reproduce :)

[19:33] <ugexe> is there a way to run the `make test` and `make spectest` using prove?

[19:33] <samcv> not really i mean it won't fudge the results

[19:33] <ugexe> thats what i was afraid of

[19:33] <samcv> i mean maybe you could

[19:34] <Geth> ¦ nqp/master: 14 commits pushed by pmurias++

[19:34] <Geth> ¦ nqp/master: review: https://github.com/perl6/nqp/compare/5dba8525b3...854baa6795

[19:34] <samcv> first start up make spectest. then get a listing of files in t/spec if there's a TESTNAME.rakudo.moar file, run that, if not run TESTNAME.t

[19:34] <samcv> then you'll get the fudged tests if there are fudges

[19:34] <samcv> and still run the tests that don't todo/skip anything

[19:36] <ugexe> running make spectest would be problematic as its automation

[19:38] <pmurias> bartolin: https://github.com/rakudo/rakudo/issues/1248 - new js/jvm shared bug

[19:41] <Geth> ¦ nqp: 693656ba32 | pmurias++ | src/vm/js/RegexCompiler.nqp

[19:41] <Geth> ¦ nqp: [js] Stop eol anchor from matching between \r\n

[19:41] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/693656ba32

[19:42] <pmurias_> ugexe: you can run fudged tests with prove

[19:43] <ugexe> im trying to find how to fudge the tests... notably those for `make test` without first cloning the spectest

[19:43] <pmurias> ugexe: perl t/spec/fudgeall rakudo.js t/spec/S01-perl-5-integration/*.t returns a list of fudged filenames

[19:44] <ugexe> any suggestion for make test? if a build agent fails make test I could avoid cloning the spectest

[19:45] <pmurias> ugexe: do you need anything special for 'make test'

[19:45] <pmurias> ?

[19:46] <pmurias> ugexe: it seems that those are just normal test files

[19:46] <ugexe> t/03-jvm

[19:48] <pmurias> ugexe: the test seems to compile the .java file itself

[19:49] <pmurias_> ugexe: and I wouldn't run this on backends that aren't jvm

[19:56] <travis-ci> NQP build failed. pmurias '[js] Fix bug in frugal quant'

[19:56] <travis-ci> https://travis-ci.org/perl6/nqp/builds/301051659 https://github.com/perl6/nqp/compare/5dba8525b362...854baa679541

[20:04] <Geth> ¦ nqp: c8519551ec | pmurias++ | t/nqp/109-coercions.t

[20:04] <Geth> ¦ nqp: [jvm] Skip failing test on the JVM

[20:04] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/c8519551ec

[20:27] <travis-ci> NQP build passed. pmurias '[jvm] Skip failing test on the JVM'

[20:27] <travis-ci> https://travis-ci.org/perl6/nqp/builds/301061397 https://github.com/perl6/nqp/compare/693656ba32b3...c8519551ecec

[20:35] <dogbert17> AlexDaniel: wrt #1202, I managed to get a tiny bit of information from gdb after the program hung, whether it's useful I'll leave to jnthn. I could see a bit of what *one* thread was up to

[20:35] <dogbert17> (gdb) bt

[20:35] <dogbert17> #0  0xb7783cb0 in ?? ()

[20:35] <dogbert17> #1  0xb73b3859 in MVM_reentrantmutex_lock_checked (tc=0xb34a58f8, lock=0xb3f51d10) at src/6model/reprs/ReentrantMutex.c:121

[20:35] <dogbert17> #2  0xb73367ad in MVM_interp_run (tc=0xb34a58f8, initial_invoke=0xb73516aa <thread_initial_invoke>, invoke_data=0xb35c6630) at src/core/interp.c:4071

[20:35] <dogbert17> #3  0xb73517e4 in start_thread (data=0xb35c6630) at src/core/threads.c:85

[21:26] <AlexDaniel> releasable6: status

[21:26] <releasable6> AlexDaniel, Next release in 5 days and ≈21 hours. No blockers. 0 out of 169 commits logged

[21:26] <releasable6> AlexDaniel, Details: https://gist.github.com/66686c5231ccb7f3e7f290a1a3831a5d

[21:35] <japhb> buggable: speed :4

[21:35] <buggable> japhb,    ▃     ▂     ▃   ▅  █   ▃↑▃  ▃    ▅ █  dates: 2017-10-26–2017-11-12

[21:35] <buggable> japhb,    █ ▂   █    ▁█  ▆█  █▇ ▆███  █▅ ▇ █ █▁ range: 19.341s–22.639s

[21:35] <buggable> japhb,   ▆█▄█   █▆▆▅▇██  ██▄████████▇ ██▆█▇█ ██ speed: 4% slower (widths: 9/3)

[21:35] <buggable> japhb, ▁▂████▅▇▇███████▆▇████████████▄██████▃██

[21:36] <japhb> Hmmm, highly variable

[21:36] <japhb> buggable: speed :4 test-t-20

[21:36] <buggable> japhb,    ▄              ▂▇     ↑  ▅      ▂  ▅  dates: 2017-10-26–2017-11-12

[21:36] <buggable> japhb,   ▂█   ▂ ▃   ▆▅▆  ██▅▅▄▇ █▄ ██   ▂ █  ██ range: 56.192s–62.623s

[21:36] <buggable> japhb,   ██   █▃█▆▇▃███▃▅█████████▆██▇ ▇█▆█▂▂██ speed: 6% slower (widths: 9/3)

[21:36] <buggable> japhb, ↓▄██▁▄▄████████████████████████▇████████

[21:36] <japhb> Not much better.  :-(

[22:04] <BenGoldberg> One of those has a face in it!
