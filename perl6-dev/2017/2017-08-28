[00:59] <Zoffix> ZOFFLOP: t/spec/S11-modules/require.t

[01:05] <Zoffix> Is REPL (other than its sanity) something we define in roast?

[01:05] <Zoffix> That's the only piece in 6.c-errata. The rest of the tests were added to master. I'm thinking of moving them to rakudo's test suite.

[01:06] <Zoffix> Hm. It was me who added all those news tests to roast.

[01:12] <Zoffix> So what I'm gonna do is move them to rakudo/t repl tests and comment out them out, because they currently need Test::Utils from roast (the repl test file itself needs more love and was waiting for Proc bug fixes which were done already)

[01:12] <Zoffix> And then sometime this week will fix them, along with other repl tests and whatever other files we currently aren't running.

[01:14] <Zoffix> And the repl won't be tested by roast, but by `make test`. Only "sanity" test will exist.

[01:14] <Zoffix> .in 6d fix up `make test` along with other tests

[01:14] <yoleaux> Zoffix: I'll remind you on 3 Sep 2017 01:14Z

[01:16] <Geth> Â¦ rakudo/nom: ffd87fe5f8 | (Zoffix Znet)++ | t/02-rakudo/repl.t

[01:16] <Geth> Â¦ rakudo/nom: Add REPL tests from roast

[01:16] <Geth> Â¦ rakudo/nom:

[01:16] <Geth> Â¦ rakudo/nom: Currently commented out due to requiring Test::Util package from roast;

[01:16] <Geth> Â¦ rakudo/nom: will be rewritten to avoid that dependency and uncommented soon.

[01:16] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ffd87fe5f8

[01:25] <Geth> Â¦ roast: 4170c5db16 | (Zoffix Znet)++ | S19-command-line/repl.t

[01:25] <Geth> Â¦ roast: Remove non-sanity REPL tests

[01:25] <Geth> Â¦ roast:

[01:25] <Geth> Â¦ roast: These are NOT part of 6.c-errata and were moved to Rakudo's test suite:

[01:25] <Geth> Â¦ roast: https://github.com/rakudo/rakudo/commit/ffd87fe5f8

[01:25] <Geth> Â¦ roast:

[01:25] <Geth> Â¦ roast: The reason is the output contains some auxiliary messages

[01:25] <Geth> Â¦ roast: (e.g. "Install Readline.. etc") and we shouldn't spec those, yet

[01:25] <Geth> Â¦ roast: they're hard to tease out from the rest of the output.

[01:25] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/4170c5db16

[01:26] <Zoffix> So bottom line is: we still test REPL, but we don't spec it for anything other than basic sanity test

[01:29] <Geth> Â¦ rakudo/nom: 2c0cd0a3a9 | (Zoffix Znet)++ | src/core/REPL.pm

[01:29] <Geth> Â¦ rakudo/nom: Implement "bare" REPL and use it on non-TTY uses

[01:29] <Geth> Â¦ rakudo/nom:

[01:29] <Geth> Â¦ rakudo/nom: This is basically a fake REPL that just evals all the code given

[01:29] <Geth> Â¦ rakudo/nom: on STDIN and then exits. This lets us support piped usagesâ€¦

[01:29] <Geth> Â¦ rakudo/nom:

[01:29] <Geth> Â¦ rakudo/nom:     $ echo -e 'my $x = 42;\nsay $x' | ./perl6

[01:29] <Geth> Â¦ rakudo/nom:     42

[01:30] <Geth> Â¦ rakudo/nom: <â€¦commit message has 5 more linesâ€¦>

[01:30] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2c0cd0a3a9

[01:30] <Zoffix> This feels good. I think I healed my burn out :)

[02:03] <MasterDuke> m: my $s = "b"; my @l = <a b c>; my @m = @l.grep(/ $s /); say @m.elems

[02:03] <camelia> rakudo-moar 2c0cd0: OUTPUT: Â«1?Â»

[02:03] <MasterDuke> odd, ^^^ calls INTERPOLATE 5 times

[02:04] <MasterDuke> twice with $tgt = "a", once with $tgt = "b", and then twice with $tgt = "c"

[02:05] <travis-ci> Rakudo build passed. Zoffix Znet 'Add REPL tests from roast

[02:05] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/269033769 https://github.com/rakudo/rakudo/compare/815faa35e092...ffd87fe5f8d0

[02:06] <Zoffix> Maybe that's why samcv++ was seeing dramatic slowdowns with variables interpolated into regexes vs. plain text? It's interpolating too many times?

[02:06] <MasterDuke> i think there are several factors to the slowdown (INTERPOLATE isn't JITted for one), but yeah, that can't help

[02:08] <MasterDuke> in my larger test case where @l is 50k lines, INTERPOLATE is called 3,045,151 times

[02:09] <Zoffix> Aha!

[02:09] <Zoffix> ooops wrong chan

[02:11] <MasterDuke> too bad, i would have been happy about an INTERPOLATE related "Aha!"

[02:11] <Zoffix> :D

[02:15] <MasterDuke> m: my $s = "b"; my @l = "aaa".."zzz"; my @m = @l.grep(/ $s /); say @m.elems; say now - INIT now

[02:15] <camelia> rakudo-moar 2c0cd0: OUTPUT: Â«1951?0.7518875?Â»

[02:15] <MasterDuke> m: my str $s = "b"; my @l = "aaa".."zzz"; my @m = @l.grep(/ $s /); say @m.elems; say now - INIT now

[02:15] <camelia> rakudo-moar 2c0cd0: OUTPUT: Â«1951?0.34076564?Â»

[02:16] <MasterDuke> much faster when it knows that the interpolated variable is a Str

[02:41] <travis-ci> Rakudo build passed. Zoffix Znet 'Implement "bare" REPL and use it on non-TTY uses

[02:41] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/269035669 https://github.com/rakudo/rakudo/compare/ffd87fe5f8d0...2c0cd0a3a96d

[02:57] <MasterDuke> .tell samcv https://irclog.perlgeek.de/perl6-dev/2017-08-28#i_15078474 has some info about INTERPOLATE you might find interesting

[02:57] <yoleaux> MasterDuke: I'll pass your message to samcv.

[04:37] <samcv> m: my str $s = "b"; my @l = "aaa".."zzz"; my @m = @l.grep(/ $s /); say @m.elems; say now - INIT now

[04:37] <yoleaux> 02:57Z <MasterDuke> samcv: https://irclog.perlgeek.de/perl6-dev/2017-08-28#i_15078474 has some info about INTERPOLATE you might find interesting

[04:37] <camelia> rakudo-moar 2c0cd0: OUTPUT: Â«1951?0.3396149?Â»

[04:37] <samcv> m: my Str $s = "b"; my @l = "aaa".."zzz"; my @m = @l.grep(/ $s /); say @m.elems; say now - INIT now

[04:37] <camelia> rakudo-moar 2c0cd0: OUTPUT: Â«1951?0.318695?Â»

[04:37] <samcv> m: my $s = "b"; my @l = "aaa".."zzz"; my @m = @l.grep(/ $s /); say @m.elems; say now - INIT now

[04:37] <camelia> rakudo-moar 2c0cd0: OUTPUT: Â«1951?0.74654021?Â»

[04:37] <samcv> .tell MasterDuke thanks for the INTERPOLATE info

[04:37] <yoleaux> samcv: I'll pass your message to MasterDuke.

[06:09] <Geth> Â¦ rakudo/nom: 98f9fffea2 | (Andrew Ruder)++ | src/core/Supply.pm

[06:09] <Geth> Â¦ rakudo/nom: Supply.batch: handle no args and $elems == 1

[06:09] <Geth> Â¦ rakudo/nom:

[06:09] <Geth> Â¦ rakudo/nom: In most cases, the returned supply from the batch method emits arrays of

[06:09] <Geth> Â¦ rakudo/nom: batched elements.  There's no reason why the following should happen:

[06:09] <Geth> Â¦ rakudo/nom:

[06:09] <Geth> Â¦ rakudo/nom: $s.batch(elems => 1, seconds => 1000)

[06:09] <Geth> Â¦ rakudo/nom:   tap sees arrays

[06:09] <Geth> Â¦ rakudo/nom: <â€¦commit message has 10 more linesâ€¦>

[06:09] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/98f9fffea2

[06:09] <Geth> Â¦ rakudo/nom: 3cfc3285c0 | lizmat++ (committed using GitHub Web editor) | src/core/Supply.pm

[06:09] <Geth> Â¦ rakudo/nom: Merge pull request #1140 from aeruder/nom

[06:09] <Geth> Â¦ rakudo/nom:

[06:09] <Geth> Â¦ rakudo/nom: Supply.batch: handle no args and $elems == 1

[06:09] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3cfc3285c0

[06:39] <Geth> Â¦ rakudo/nom: 7d1ece8058 | (Elizabeth Mattijsen)++ | src/core/Supply.pm

[06:39] <Geth> Â¦ rakudo/nom: Further fixes to Supply.batch

[06:39] <Geth> Â¦ rakudo/nom:

[06:39] <Geth> Â¦ rakudo/nom: - it should return Lists, not arrays

[06:39] <Geth> Â¦ rakudo/nom: - create lists using nqp ops, prevents needing to copy batches

[06:39] <Geth> Â¦ rakudo/nom: - should be faster and less memory hungry as a result

[06:39] <Geth> Â¦ rakudo/nom: - fix some indentation issues

[06:39] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7d1ece8058

[06:40] <timotimo> mornin' liz

[06:41] <Geth> Â¦ roast: aa21688be0 | (Elizabeth Mattijsen)++ | S17-supply/batch.t

[06:41] <Geth> Â¦ roast: Fix Supply.batch tests

[06:41] <Geth> Â¦ roast:

[06:41] <Geth> Â¦ roast: We're not returning arrays anymore.  Please note that Test::Tap *is*

[06:41] <Geth> Â¦ roast: using a top-level array, but this is because of several flattening

[06:41] <Geth> Â¦ roast: issues and should not be considered part of the Supply.batch API.

[06:41] <Geth> Â¦ roast: review: https://github.com/perl6/roast/commit/aa21688be0

[06:43] <Geth> Â¦ roast/6.c-errata: cdf39ad86b | (Elizabeth Mattijsen)++ | S17-supply/batch.t

[06:43] <Geth> Â¦ roast/6.c-errata: Fix Supply.batch tests

[06:43] <Geth> Â¦ roast/6.c-errata:

[06:43] <Geth> Â¦ roast/6.c-errata: We're not returning arrays anymore.  Please note that Test::Tap *is*

[06:43] <Geth> Â¦ roast/6.c-errata: using a top-level array, but this is because of several flattening

[06:43] <Geth> Â¦ roast/6.c-errata: issues and should not be considered part of the Supply.batch API.

[06:43] <Geth> Â¦ roast/6.c-errata: review: https://github.com/perl6/roast/commit/cdf39ad86b

[07:21] <[Tux]> This is Rakudo version 2017.08-25-g7d1ece805 built on MoarVM version 2017.08.1-32-gcd41322e

[07:21] <[Tux]> csv-ip5xs        1.346 - 1.380

[07:21] <[Tux]> test            11.040

[07:21] <[Tux]> test-t           3.809 - 3.999

[07:21] <[Tux]> csv-parser      12.741

[08:21] <lizmat> part 1 of decommute&

[10:20] <nine> So a natively typed parameter doesn't mean that one must pass a natively typed argument but only that one must pass something that can unbox to the native type.

[10:20] <dogbert17> oh, it's RabidGravy, welcome back :)

[10:20] <yoleaux> 27 Aug 2017 08:42Z <samcv> dogbert17: check out how the address sanitizer for clang works: https://github.com/google/sanitizers/wiki/AddressSanitizerAlgorithm very interesting how it works. even though this is how it works, it runs way faster than valgrind probably since doesn't have to run inside and have that overhead

[10:21] <nine> And to make things worse, it's apparently the callee's responsibility to unbox. I rally don't like this at all :/

[11:32] <RabidGravy> dogbert17, I'd heard people were missing me, Don't know why, must be like stockholm syndrome or something ;-)

[11:33] <Skarsnik> huhu

[12:09] <dogbert17> RabidGravy: perhaps we wan't the the latest Brexit news :-)

[12:10] <dogbert17> *want

[12:10] <Zoffix> :)

[12:11] <dogbert17> but then again, I do live in the syndrome town :)

[12:15] <RabidGravy> weellllllll  I'm increasingly thinking it ain't going to happen, our politicians have lost their minds

[12:17] <dogbert17> can't they just drag out the negotiations forever

[12:19] <[Coke]> (echo "hi"; echo "hi" ; echo "there" ; echo "hi" ) | uniq # unique already doesn't need sorting.

[12:20] <RabidGravy> well theoretically 3/2019 is a drop dead date, but  a number of things could happen

[12:21] <RabidGravy> [Coke] I think the "original" uniq did require sorting but the gnu one doesn't - or something like that

[12:21] <aeruder> ... they both do, that would be a massive change in functionality otherwise

[12:22] <aeruder> assuming you want the output to be "hi" "there"

[12:22] <aeruder> just verified on gnu uniq 8.26 and a bsd uniq...

[12:23] <RabidGravy> actually yes

[12:23] <[Coke]> aeruder: no, I want the output to be "hi", "there", "hi" -that was the ask in backscroll.

[12:24] <[Coke]> (or at least, that's how I read it.)

[12:24] <aeruder> oh, sorry, didn't scroll back far enough :)

[12:24] <RabidGravy> but yes

[12:25] <RabidGravy> and I confused myself with the '-u' option to sort

[12:31] <timotimo> nine, that is why the Param ops are so hard to jot

[12:31] <timotimo> bbl

[14:01] <stmuk_> can anyone remember if Damian's SPW LISPish p6 was quicksort?

[14:09] <Skarsnik> https://gist.github.com/Whateverable/201476e328d8a40fd34fd7b93240c7ff I should maybe compare to other language

[14:16] <stmuk> ah its at www.bit.do/Perl6SOG

[15:03] <jnthn> .

[15:04] <Ven``> .: not enough arguments

[15:04] <jnthn> .tell lizmat http://jnthn.net/papers/2017-spw-deopt.pdf http://jnthn.net/papers/2017-spw-sockets-services.pdf

[15:04] <yoleaux> jnthn: I'll pass your message to lizmat.

[15:04] <Ven``> jnthn++

[15:08] <skids> o/ devs :-)

[15:08] <Zoffix> \o\

[15:10] <skids> I freshened up my role work and if anyone has time to comment on getting it up to PR snuff I'd be greatful: https://gist.github.com/skids/18fa6fb1de776400abd43b6e82e9fcc2

[15:11] <Zoffix> jnthn: slides look very interesting. I'm hoping there's a video to go along with them?

[15:13] <jnthn> Zoffix: There was a video camera there and I said it was OK to record :)

[15:13] <Zoffix> :D great

[15:29] <stmuk> I'm hoping to finish a blog about SPW2017 tomorrow

[16:32] <smls> Hi

[16:33] <smls> Can someone tell me why the travis check failed for my nqp PR? https://github.com/perl6/nqp/pull/368

[16:34] <smls> When I click "details" and then any of the red links, it doesn't seem to show anything.

[16:34] <timotimo> i'm restarting the build now

[16:34] <timotimo> it looks like ti didn't even try

[16:37] * timotimo bbl

[17:08] <Geth> Â¦ rakudo/nom: ab69dc3af0 | (Nick Logan)++ (committed using GitHub Web editor) | appveyor.yml

[17:08] <Geth> Â¦ rakudo/nom: Don't skip testing nqp/moar master

[17:08] <Geth> Â¦ rakudo/nom:

[17:08] <Geth> Â¦ rakudo/nom: ...otherwise we cannot tell which rakudo build failures can be resolved with a version bump.

[17:08] <Geth> Â¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ab69dc3af0

[17:26] <MasterDuke> timotimo, lizmat, TimToady, jnthn: any idea why `my $s = "b"; my @l = <a b c>; my @m = @l.grep(/ $s /); say @m.elems` calls INTERPOLATE five times (twice with $tgt = "a", once with $tgt = "b", and then twice with $tgt = "c") instead of three?

[17:32] <TimToady> no idea, offhand

[17:32] <smls> timotimo: Thanks, travis checks passed now.

[17:37] <TimToady> I have a branch that does run-time tracing of regex; maybe that will indicate why it might dup those calls

[17:39] <smls> Is `use Test;` on Rakudo JVM broken for anyone else?

[17:40] <smls> It just prints "Died." for me, on perl6-j build with:  perl Configure.pl --gen-nqp --gen-moar --backends=moar,jvm --make-install && make install

[17:40] <smls> This also means I can't run spectests there.

[17:40] <smls> On perl6-m everything works fine.

[17:42] <ugexe> why --make-install *and* && make install?

[17:47] <smls> hm dunno :)

[17:51] <MasterDuke> if anyone is curious, here ( https://gist.github.com/MasterDuke17/b6af45553900ffb4975f06aa7196de95 ) is a stacktrace after adding a die (and some debugging lines) here: https://github.com/rakudo/rakudo/blob/nom/src/core/Match.pm#L328

[17:52] <Zoffix> smls: I recall lizmat++ mentioning having issues with JVM backend. I think it's quite bit-rotten

[17:55] <smls> I don't really have an interest in Rakudo JVM, I'm just asking because my PR modifies both backends (in the same way).

[17:56] <smls> So I thought I should run `make spectest` on both, but so far I could only do that on Rakudo Moar.

[17:57] <smls> I ran the individual test-cases from the RT description on JVM too, of course (without `Test` / `is`), and they worked fine...

[17:57] <MasterDuke> smls: does --ll-exception show anything more useful?

[17:58] <smls> MasterDuke: I already started a new build, will have to wait until it is done before I can test... :)

[18:00] <smls> Btw, why *does* starting the Rakudo build process break the previously installed perl6 executable?

[18:01] <smls> Even crashes running Perl 6 processes, I think.

[18:03] <japhb> .ask jnthn Are you about, and do you have time to look at something with your Perl 6 concurrency hat on?  https://github.com/ab5tract/Terminal-Print/blob/master/lib/Terminal/Print/DecodedInput.pm6 (and RawInput.pm6 in the same directory) both start a new thread.  Can one or both of those go away?  If so, how?

[18:03] <yoleaux> japhb: I'll pass your message to jnthn.

[18:06] <japhb> smls: Possible clue: It does not do that for me, but I have a script that creates a new lean checkout for every new rakudo version, and when it builds successfully (moar, nqp, rakudo, zef, modules), moves the perl6 symlink in my path to point at the latest successfully built tree.

[18:06] <japhb> So ... maybe the rebuild you're doing is changing out moving parts in the currently-used directory?

[18:19] <smls_> MasterDuke: Output with --ll-exception: https://pastebin.com/raw/CQhjfc8L

[18:20] <Zoffix> smls_: what about using some other module?

[18:21] <Zoffix> like a dummy one or NativeCall

[18:24] <smls_> `use NativeCall` dies the same way;  so does using a non-existent module.

[18:24] <smls_> `use`ing a module I wrote myself and placed in a PERL6LIB path, works.

[18:25] <Zoffix> interesting

[18:25] * Zoffix has no ideas for a fix

[18:25] <smls_> Ohh, I just realized that outside of the rakudo build dir, perl6-j does not work at all (java.nio.file.NoSuchFileException: blib/Perl6/BOOTSTRAP.jar)

[18:26] <smls_> Whereas perl6-m works regardless of what the working dir is

[18:26] <MasterDuke> weren't there some recent commits about library paths?

[18:44] <smls_> perl6-j -Ilib --ll-exception -e 'use Test;'  # works inside the build dir...

[18:45] <smls_> (Note the -Ilib. So it's really a matter of it not finding its own files.)

[18:56] <Zoffix> Yeah, there were some recent commits making changes in that area; perhaps they were made for MoarVM only

[18:57] <Zoffix> One of the commits (I think): https://github.com/rakudo/rakudo/commit/a331c804a9442eb6de535a04592504d992865649

[19:24] <lizmat> .

[19:24] <yoleaux> 15:04Z <jnthn> lizmat: http://jnthn.net/papers/2017-spw-deopt.pdf http://jnthn.net/papers/2017-spw-sockets-services.pdf

[19:24] * lizmat continues decommuting&

[19:29] <MasterDuke> after some more testing, INTERPOLATE is called twice for non-matching elements in the array, once for matching

[19:32] <MasterDuke> but the backtrace is identical for every call

[21:24] <MasterDuke> why would the backtrace have an entry for here: https://github.com/rakudo/rakudo/blob/nom/src/core/Match.pm#L381 , which is just `else {`, and not the single-line body of the else?

[21:24] <perlpilot> off by one error?

[21:25] <MasterDuke> maybe. not sure i've seen other off-by-one errors in backtraces before though

[21:25] <MasterDuke> has anyone else?

[21:30] <MasterDuke> hm, i moved the else up to be cuddled with the end of the if block, it then reported that line: `} else {`

[22:00] * lizmat has decommuted and continues to work on the P6W

[22:00] <timotimo> lizmat: glad to hear you got home :)

[22:01] <lizmat> :-)   we had a little detour near Mannheim for dinner, other than that it was rather uneventful  :-)

[22:01] <timotimo> sounds good

[22:05] <lizmat> we actually passed through this gate: https://s-media-cache-ak0.pinimg.com/736x/bc/f4/9b/bcf49b1b088434a9058fe34870eef2e6--worms-germany-deutschland-germany.jpg

[22:09] <MasterDuke> timotimo: i haven't looked at MAST output much, nothing jumped out at me

[22:10] <timotimo> yeah, it's not easy to spot; it's the backtracking logic that does ... something

[23:27] <AlexDaniel> ? Community Bug SQUASHathon http://blogs.perl.org/users/zoffix_znet/2017/08/youre-invited-community-bug-squashathon.html

[23:37] <lizmat> And another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/08/28/2017-35-serving-cro/

[23:41] <Zoffix> lizmat++ good weekly

[23:41] <Zoffix> jnthn++ cro :)

[23:45] * lizmat gets some sleep&
