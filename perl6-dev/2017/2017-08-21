[07:25] <nine> Regarding Windows: how am I supposed to fix issues when I cannot even test them? Why am I supposed to care if not even the people who chose that platform care enough to involve themselves? If there are so many as stmuk++ points out, why is there not even one of them available for questions or testing?

[07:26] <nine> I personally do not care a bit about Windows. Windows is a thing that makes my life worse, not better, whenever I have contact with it. I refuse to waste my precious spare time on it.

[07:27] <nine> Of course I would never deliberatly break it. I usually keep it in mind whenever I touch something that may be platform dependent. I also try to duckduckgo those things before committing (to) something. But at some point all I can do is try and see if it breaks.

[07:28] <nine> And the only way for me to see it break is some CI system that fails to build half the time anyway. Or people notifying me on the channel. And the latter happened only a week later as it was.

[08:27] <stmuk> I'm no particular fan of Windows but we do need to continue to support it.  I think the root problems are with the release and development processes (not just minority platforms such as windows).  The monthly releases are getting harder and harder (eg. 2017.04 as well as 2017.08)

[08:27] <lizmat> does docs.perl6.org get refreshed automatically, or is some manual intervention needed?

[08:28] * lizmat would like to see her updates to atomicint.pod live before the P6W publishes

[08:28] <stmuk> lizmat: it should be automatic but was broken (and is now hopefully fixed as of a day or two ago)

[08:29] <lizmat> well, the last update was 2017-08-20T01:52:51Z afaics

[08:29] <lizmat> and that's more than 24 hours ago  :-(

[08:34] <lizmat> breakfast&

[10:10] <Zoffix> TIL there's Introducing Perl 6 book

[10:10] <Zoffix> https://www.flickr.com/photos/wendyga/sets/72157685410027133

[10:11] <Zoffix> Don't see it on https://perl6book.com/

[10:11] <lizmat> Zoffix: it's not a book, it's a brochure/leaflet

[10:13] <Zoffix> Ah

[10:13] <Zoffix> 60 pages. That's pretty big

[10:14] <Zoffix> lizmat: currently forcing a doc build.

[10:14] <Zoffix> The last build log had your commit in it; not sure why that didn't propagate to the site

[10:16] <lizmat> Zoffix++

[10:20] <AlexDaniel> fwiw https://irclog.perlgeek.de/moarvm/2017-08-21#i_15048783

[10:28] <Zoffix> it's curious they're not failing on master.

[10:34] <lizmat> Zoffix: doc has arrived  :-)

[10:36] <Zoffix> Good. Though I'm none the wiser why it didn't update of its own volition :/

[10:38] <Zoffix> .tell [Coke] looks like cronned doc still is busted. Didn't build existing new commits for 12 hours (even tho ~/update.log had them in), but when I manually $HOME/force-update'ed it, then it just worked.

[10:38] <yoleaux> Zoffix: I'll pass your message to [Coke].

[10:43] <lizmat> timotimo: do we have an archive of Perl 6 weeklies somewhere from before 7 Feb 2014 ?

[10:45] <timotimo> lizmat: did wordpress throw out any entries older than that?

[10:46] <lizmat> https://p6weekly.wordpress.com/2014/02/07/off-we-go/  # oldest I could find

[10:48] <timotimo> something's wrong with my browser and/or 'net conneection

[10:48] <timotimo> oh, yeah

[10:48] <timotimo> the ones before that were on glitchmr's blog somewhere

[10:49] <AlexDaniel> timotimo: I'm assuming you won't be able to take a look at the spesh issue also, right?

[10:49] <timotimo> is that only on windows?

[10:50] <AlexDaniel> timotimo: no, linux+errata

[10:50] <timotimo> i can look at it

[10:50] <Zoffix> AlexDaniel: this reminds me of the bus factor discussion :)

[10:51] <AlexDaniel> c: HEAD https://raw.githubusercontent.com/perl6/roast/6.c-errata/S32-num/complex.t

[10:51] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[10:51] <committable6> AlexDaniel, https://gist.github.com/a2147ac2748bedca7da8a3900b23125d

[10:51] <AlexDaniel> timotimo: ?

[10:52] <timotimo> you can set env vars for committable, right?

[10:52] <AlexDaniel> commit: MVM_SPESH_DISABLE=1 HEAD https://raw.githubusercontent.com/perl6/roast/6.c-errata/S32-num/complex.t

[10:52] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[10:52] <committable6> AlexDaniel, https://gist.github.com/bd2f3c76c444e15a9feb6c3e7815e862

[10:53] <timotimo> c: HEAD MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1 https://raw.githubusercontent.com/perl6/roast/6.c-errata/S32-num/complex.t

[10:53] <committable6> timotimo, https://gist.github.com/c015388120639ac0b8cc9a5fe1fea7a0

[10:53] <lizmat> timotimo: did you mean this: http://blogs.perl.org/users/perl_6_reports/archives.html

[10:53] <timotimo> that's not how

[10:53] <timotimo> lizmat: no, they had their own blog hosted on maybe their own server

[10:53] <AlexDaniel> timotimo: ah shit… I don't think it supports more than one

[10:54] <timotimo> i remember it was mostly white

[10:54] <AlexDaniel> according to the code it does

[10:55] <AlexDaniel> MVM_SPESH_BLOCKING is simply not in the list

[10:55] <timotimo> ah

[10:56] <timotimo> GlitchMr's twitter looks kind of dead, last tweet 2014

[10:57] <AlexDaniel> c: HEAD MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1 https://raw.githubusercontent.com/perl6/roast/6.c-errata/S32-num/complex.t

[10:57] <committable6> AlexDaniel, https://gist.github.com/afa92bb0a72a22f400042e8ea710bac0

[10:57] <AlexDaniel> ah right

[10:57] <AlexDaniel> c: MVM_SPESH_BLOCKING=1 MVM_SPESH_NODELAY=1 HEAD https://raw.githubusercontent.com/perl6/roast/6.c-errata/S32-num/complex.t

[10:57] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[10:57] <committable6> AlexDaniel, https://gist.github.com/4d4d899043ce01a1f3d71508f4270a00

[10:58] <AlexDaniel> timotimo: ? :)

[11:02] <Geth> ¦ rakudo/nom: 0de25a8f4c | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/announce/2017.08.md

[11:02] <Geth> ¦ rakudo/nom: Release announcement draft for 2017.08

[11:02] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0de25a8f4c

[11:02] <AlexDaniel> mmmm… I c

[11:07] <timotimo> if the spesh log weren't typically gigantic, i'd ask for it to be includable d)

[11:08] <timotimo> :)

[11:09] <AlexDaniel> well, you can run this file with your own perl6

[11:10] <timotimo> of course

[11:12] <lizmat> AlexDaniel: I realise it's copy/paste from previous announcements

[11:12] <lizmat> but looking at it now, I think "It includes bugfixes and optimizations on top of

[11:12] <lizmat> the 2015.12 release of Rakudo, but no new features."

[11:12] <AlexDaniel> hahahaha no new features

[11:12] <lizmat> is a bit untrue on the "no new features" part  :-)

[11:12] <AlexDaniel> I'll fix that. I have to fix markdown formatting anyway

[11:14] <nine> lizmat: I don't think augmenting Grammar in the 6.d setting is gonna work. That setting will be loaded when any part of the program at all uses v6.d.PREVIEW. The augmentation will then affect all code.

[11:14] <timotimo> "but doesn't change the language"?

[11:15] <lizmat> nine: isn't that also the case with the new await behaviour then?

[11:16] <nine> Also I remember jnthn arguing that augmenting a class in the 6.d setting is a bad idea. I tried that in my original language_versions branch.

[11:16] <nine> lizmat: await is a sub. It's not a method that's added to an existing class via augmentation

[11:17] <lizmat> but it masks the original sub await?

[11:17] <nine> Yes. And that's fine. Same with the masked DateTime class. But augment changes the _existing_ class and thus the change is visible globally.

[11:18] <lizmat> hmmm...

[11:18] <nine> I really wish we would just revert the whole business and actually take the time to do this right.

[11:19] <AlexDaniel> but we still can

[11:19] <lizmat> revert Gramnmar.parse returning a Failure at all you mean

[11:19] <lizmat> at least for 2017.08 ?

[11:19] <nine> yes

[11:19] <lizmat> AlexDaniel: what are your feelings about that ?

[11:19] <nine> We have lived with parse returning Nil for years. One more month won't make all that much difference.

[11:20] <lizmat> nine: I would agree with that

[11:20] <AlexDaniel> lizmat: if it doesn't work, then what's the point of keeping it?

[11:20] <nine> Us breaking existing code for no good reason however will cost us in the long term.

[11:20] <AlexDaniel> again, there's no rush :)

[11:20] <lizmat> I guess it's now up to AlexDaniel to ok a revert

[11:20] <AlexDaniel> I think reverting it is the right thing to do

[11:20] <AlexDaniel> better safe than sorry

[11:21] <lizmat> ok, I'll revert

[11:21] <nine> I would love for us to take the opportunity at the Swiss Perl Workshop to figure out how to do this language version thing for real.

[11:22] <AlexDaniel> my position was that we definitely should *not* include it in 2017.08. When it was moved to v6.d, I thought that there is no problem anymore

[11:22] <lizmat> feels like a plan to me

[11:22] <AlexDaniel> if there are any suspicions, then surely it has to be reverted, especially given that we have time for it :)

[11:23] <nine> Maybe what we need is a mechanism that is like augment, but will actually create a copy of the original class with the same name + the augmentation.

[11:23] <jnthn> And then they all won't type match 'cus they're not the same class. :P

[11:24] <nine> But that won't actually help all that much in Grammar's case. Because what's important is not the lexical scope where the grammar is defined, but the scope of the _caller_ of the .parse method.

[11:24] <lizmat> basically use the existing class as a Role ?

[11:24] <jnthn> This is a case of "solution worse than problem"

[11:24] <nine> jnthn: I'm just thinking out loud here :) The type matching could be solved by not copying the contents of the original class but making the new class a subclass.

[11:25] <nine> jnthn: right now, I'm just curious if this could be made to work (and I think it actually could - and would expose some weird bugs), not if it's a good thing to do :)

[11:26] <nine> But again, it won't solve anything here anyway.

[11:26] <nine> What would solve parse's problem is if there was a way to get the caller's language version.

[11:26] <nine> Or a very low tech solution: just provide a different method with the new semantics.

[11:27] <timotimo> class Grammar:ver<v6.d> is Grammar:ver<v6.c> { method parse { ... } }

[11:28] * lizmat spectests removal

[11:29] * lizmat also removes a paragraph from the Perl 6 Weekly

[11:30] <nine> I also wonder how we could prevent more people from falling into the augment trap

[11:31] <Ven``> nine: what you propose reminds me of ruby's refinements

[11:31] <Ven``> they're lexically-scoped augments/monkey-patching

[11:33] <AlexDaniel> lizmat: I'll remove it from the changelog

[11:34] <Geth> ¦ rakudo/nom: 465d91abdf | (Elizabeth Mattijsen)++ | 4 files

[11:34] <Geth> ¦ rakudo/nom: Remove Grammar.parse returning a Failure on fail

[11:34] <Geth> ¦ rakudo/nom:

[11:34] <Geth> ¦ rakudo/nom: We cannot really have a versioned solution to the problem yet.  So

[11:34] <Geth> ¦ rakudo/nom: either this will have to wait for a real 6.d, or we need to find a

[11:34] <Geth> ¦ rakudo/nom: better solution to versioning.

[11:34] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/465d91abdf

[11:35] <lizmat> nine: I think it could be solvable by having $*PERL be actually scoped

[11:35] <Geth> ¦ rakudo/nom: fd82e3be1d | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[11:35] <Geth> ¦ rakudo/nom: Add Markdown code blocks where needed

[11:35] <Geth> ¦ rakudo/nom:

[11:35] <Geth> ¦ rakudo/nom: There are other places where this can be done, but I don't think we

[11:35] <Geth> ¦ rakudo/nom: want every other word to be highlighted.

[11:35] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fd82e3be1d

[11:35] <Geth> ¦ rakudo/nom: 44542c5666 | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/announce/2017.08.md

[11:35] <Geth> ¦ rakudo/nom: Remove untrue statement

[11:35] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/44542c5666

[11:35] <Geth> ¦ rakudo/nom: d5aec61f54 | (Aleks-Daniel Jakimenko-Aleksejev)++ | 2 files

[11:35] <Geth> ¦ rakudo/nom: Remove reverted change from the changelog

[11:35] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d5aec61f54

[11:36] <AlexDaniel> lizmat++

[11:37] <nine> lizmat: yes, that'd be really nice

[11:37] <lizmat> m: say $*PERL; { use v6.d.PREVIEW; say $*PERL }; say $*PERL   # expected 6.c / 6.d / 6.c

[11:37] <camelia> rakudo-moar 0de25a: OUTPUT: «Perl 6 (6.d)?Perl 6 (6.d)?Perl 6 (6.d)?»

[11:37] <AlexDaniel> timotimo: so. What about the spesh issue? If you can look at it only a few hours later, just tell me, and I'll take a break too :)

[11:39] <lizmat> m: say &await; { use v6.d.PREVIEW; say &await }; say &await   # same issue

[11:39] <camelia> rakudo-moar 0de25a: OUTPUT: «sub await (| is raw) { #`(Sub|52187256) ... }?sub await (| is raw) { #`(Sub|52187256) ... }?sub await (| is raw) { #`(Sub|52187256) ... }?»

[11:39] <lizmat> I mean, why can't we treat "use v6.d" just like any other lexically scoped module loading ?

[11:40] <nine> lizmat: not exactly the same. The 6.d setting is loaded for the whole computation unit, which is what your await test shows. But $*PERL.version is changed for all code that runs while compiling the current computation unit. Even loaded modules

[11:40] <lizmat> nine: well, that's my point: should it be for the whole compilation unit?

[11:40] <lizmat> any other use of "use" *is* lexical

[11:41] <lizmat> so maybe we should have at least have another word for it?

[11:41] <timotimo> i'll have a look

[11:42] <timotimo> just building a fresh rakudo now

[11:42] <lizmat> also: it gets worse with precomp, no

[11:42] <lizmat> ?

[11:42] <lizmat> if a  module is precomped with 6.c, and 6.d is done, the precomp would still use 6.c semantics

[11:42] <timotimo> "6.d is done"?

[11:43] <nine> The $*PERL.version thing? Yes. I bet no one could really answer without trying, what $*PERL.version will print in all possible cases. It's acting really weird.

[11:43] <lizmat> whereas if the module would need to be recompiled for whatever reason, it suddenly would have 6.d semantics

[11:43] <lizmat> timotimo: is released

[11:43] <timotimo> well, when your rakudo changes all your modules will be precomped again

[11:44] <lizmat> but thinking about it further now, I realise by that time we would still have the same issue

[11:44] <timotimo> so you won't have a few 6.c and a few 6.d

[11:47] <timotimo> waitwhat

[11:47] <timotimo> it dies under DEPRECATED

[11:48] <lizmat> que?

[11:50] <timotimo> https://gist.github.com/timo/d3ef42d54e5c60ea46918935e01e484b

[11:51] * lizmat checks

[11:51] <timotimo> it grabs a backtrace and goes through its "interesting index"es

[11:51] <timotimo> i believe when it goes to grab $bt[$index] it does the Any thing

[11:52] <lizmat> aha, next-interesting-index can retiurn Nil

[11:52] <timotimo> this can explain the reliance on spesh

[11:52] <timotimo> because spesh is able to inline stuff

[11:53] <timotimo> it should probably reconstruct the original backtrace when one is created though?

[11:54] <timotimo> though throwing exceptions probably shouldn't always deoptimize inlines?

[11:55] <lizmat> timotimo: I'm going to change the code so that it will keep the last valid index seen

[11:55] <timotimo> c: MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 HEAD use Test; is_approx 1, 2; is_approx 2, 3; is_approx 3, 4; is_approx 4, 5;

[11:55] <committable6> timotimo, https://gist.github.com/14521c1b27f8d122b2392308735bc57a

[11:55] <timotimo> looks like that's not quite enough

[11:56] <timotimo> c: MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 HEAD use Test; for ^100 { is_approx $_, $_ + 1 }

[11:56] <committable6> timotimo, https://gist.github.com/d83a2c092ff7f2db3ae336650c5c5085

[12:01] <timotimo> took me a bit to be able to open the gist, but here's my golf

[12:02] * lizmat waits

[12:02] <dogbert17> there seems to be something wrong with the rakudo build

[12:02] <timotimo> oh? what is?

[12:02] <AlexDaniel> dogbert17: okay, more info?

[12:03] <dogbert17> well, I wanted the new changes that lizmat made, so I did 'git pull' in my rakudo dir followed by 'perl Configure.pl --gen-moar --gen-nqp --backends=moar'

[12:04] <timotimo> lizmat: i'd say put your fix for DEPRECATED in

[12:04] <lizmat> timotimo: spectesting now

[12:04] <dogbert17> I'm then told to run 'make' which I did and it worked well

[12:04] <timotimo> good

[12:04] <dogbert17> but 'make test' fails unless I do 'make install' first and that's not right

[12:05] <lizmat> hmmm...  isn't that a known issue ?

[12:05] <dogbert17> if it is then it's relatively new I'd say

[12:06] <timotimo> yeah

[12:06] <timotimo> that's because we changed the PERL6LIB stuff

[12:07] <timotimo> isn't it?

[12:07] <timotimo> perl6 used to always look under the current path for its things

[12:07] <timotimo> which is a security risk

[12:08] <dogbert17> so the generated makefile is incorrect then ...

[12:09] <dogbert17> do we want it to work?

[12:09] <timotimo> isn't our problem that we can't pass env vars cross-platform from makefiles?

[12:11] <timotimo> i think this was discussed recently

[12:11] <timotimo> making test depend on install seems like a bad idea

[12:13] <dogbert17> if someone follows the given instructions and it doesn't work that's a bit suboptimal

[12:13] <timotimo> of course

[12:14] <dogbert17> I guess the spesh problem is a bigger issue :-)

[12:15] <lizmat> dogbert17: I've just done a fresh clone of rakudo, and a fresh build without install, but "make test" runs fine for me?

[12:16] <dogbert17> hmm, interesting

[12:16] <lizmat> macOS fwiw

[12:17] <dogbert17> might try to nuke my install a little later

[12:17] <dogbert17> timotimo: spesh problem alternative 'MVM_SPESH_NODELAY=1 MVM_SPESH_BLOCKING=1 ./perl6 t/spec/S03-operators/set_precedes.t'

[12:17] <nine> make test is supposed to work even without a make install

[12:18] <nine> That's why the generated ./perl6-m will still look in '.' for modules and nqp libs. Only the installed one (we generate a new one in the install target) gets rid of those

[12:18] <Geth> ¦ rakudo/nom: 1d69ebb9c2 | (Elizabeth Mattijsen)++ | src/core/Deprecations.pm

[12:18] <Geth> ¦ rakudo/nom: Be a more careful about interesting indexes

[12:18] <Geth> ¦ rakudo/nom:

[12:18] <Geth> ¦ rakudo/nom: Backtrace.next-interesting-index *can* return Nil, so we should guard

[12:18] <Geth> ¦ rakudo/nom: against that by remembering the last valid index.

[12:18] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1d69ebb9c2

[12:18] <nine> I consider the make test thing a definite release blocker as it will break packaging scripts.

[12:18] <lizmat> timotimo: ^^^

[12:20] * dogbert17 tries 'make test' again with lizmat's latest commit ...

[12:20] <lizmat> lunch&

[12:20] <AlexDaniel> c: 1d69ebb9c2 HEAD https://raw.githubusercontent.com/perl6/roast/6.c-errata/S32-num/complex.t

[12:20] <committable6> AlexDaniel, ¦1d69ebb: «Cannot find this revision (did you mean “1247986”?)»

[12:21] <dogbert17> /usr/bin/perl t/harness5 t/01-sanity t/04-nativecall

[12:21] <dogbert17> t/01-sanity/01-literals.t ................... Dubious, test returned 1 (wstat 256, 0x100)

[12:21] <dogbert17> No subtests run

[12:21] <dogbert17> etc

[12:21] <Zoffix> c: 1d69ebb9c2,HEAD https://raw.githubusercontent.com/perl6/roast/6.c-errata/S32-num/complex.t

[12:21] <committable6> Zoffix, Successfully fetched the code from the provided URL.

[12:21] <committable6> Zoffix, https://gist.github.com/714501a090cea8b2d402a01f5b8d9750

[12:22] <AlexDaniel> it's just not ready yet

[12:23] <timotimo> dogbert17: i get the same error as for the other file

[12:23] <dogbert17> yup, but now lizmat seems to have fixed it

[12:24] <AlexDaniel> c: 1d69ebb9c2 HEAD https://raw.githubusercontent.com/perl6/roast/6.c-errata/S32-num/complex.t

[12:24] <committable6> AlexDaniel, ¦1d69ebb: «04===SORRY!04=== Error while compiling /tmp/kCfwe4gXRp?Confused?at /tmp/kCfwe4gXRp:1?------> 03HEAD https:08?04//raw.githubusercontent.com/perl6/roast/?    expecting any of:?        colon pair «exit code = 1»»

[12:24] <AlexDaniel> c: 1d69ebb9c2 https://raw.githubusercontent.com/perl6/roast/6.c-errata/S32-num/complex.t

[12:24] <committable6> AlexDaniel, Successfully fetched the code from the provided URL.

[12:24] <committable6> AlexDaniel, https://gist.github.com/fc21c9c47eab5dfd0cfece883dce1369

[12:24] <AlexDaniel> “Block <unit> (from unknown) seen at:” :/

[12:25] <AlexDaniel> but that's good enough

[12:25] <pmurias> shouldn't we get rid of NQP_LIB on moarvm altogether

[12:25] <pmurias> ?

[12:28] <pmurias> timotimo: the security fix wasn't rakudo loading Perl 6 modules PERL6LIB but even installed rakudo prefering to load it's subparts from the current working directory

[12:29] <nine> FWIW make test runs just fine here without a make install

[12:30] <nine> m-test6, too

[12:31] <dogbert17> hmm, If I'm the only one having this problem then perhaps by rakudo is busted, let me start over

[12:32] <dogbert17> s/by/my/

[12:37] <timotimo> lizmat: is there a good reason we still test these deprecated operators?

[12:38] <timotimo> well, i suppose they're still part of the language?

[12:38] <AlexDaniel> yup

[12:39] <AlexDaniel> dogbert17: ping me when it's done

[12:42] <dogbert17> it's done, my bad, sorry for the noise, my build env was obviously busted :(

[12:42] <Zoffix> The deprecated message is from the is_approx itself, which is now is-approx

[12:43] <Zoffix> We converted master to is-approx, but left 6.c-errata as is, 'cause the argument was that 6.c-errata should be more-or-less runnable by earlier rakudos

[12:43] <timotimo> right

[12:49] <Zoffix> AlexDaniel: are you gonna be using the release bot?

[12:49] <Zoffix> I've no idea what its opinion on already-existing release announcements.

[12:50] <Zoffix> AlexDaniel: also dogbert17 pinged you above when done :)

[12:50] <dogbert17> only forgot the ping part :)

[12:50] <Zoffix> NeuralAnomaly: steps

[12:50] <NeuralAnomaly> Zoffix, Use releasable6 bot instead. e.g. try: releasable6: status

[12:50] <Zoffix> screw you

[12:50] <Zoffix> releasable6: steps

[12:50] <releasable6> Zoffix, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Releasable

[12:52] <Zoffix> well, it's a separate step that can be skipped https://github.com/zoffixznet/na/blob/master/lib/NA/ReleaseScript/Rakudo.pm6#L43-L69

[13:03] <AlexDaniel> Zoffix: no, not going to use a bot

[13:04] <AlexDaniel> I have a sakefile here that cuts releases locally

[13:04] <AlexDaniel> and then I can decide to push if it looks right

[13:04] <Zoffix> cool

[13:05] <timotimo> .o( sake is japanese make? )

[13:06] <Zoffix> "Curious if anyone knows of any good training for Perl?"   https://www.reddit.com/r/perl/comments/6uywyh/online_courses/

[13:06] <Zoffix> We have a bunch on https://perl6.org/resources/

[13:07] <stmuk> maybe they mean actual physical training?

[13:09] <timotimo> what, you mean like lifting? or track&field?

[13:10] <Zoffix> .oO( Pushups for Perl )

[13:11] <Zoffix> AlexDaniel: so I wanna leave for a week. You're good with the release, right? No questions? I can just go?

[13:12] <AlexDaniel> Zoffix: sure

[13:12] <Zoffix> Sweet

[13:12] <Zoffix> See y'all in a week

[13:12] <AlexDaniel> Zoffix++ take care

[13:12] <lizmat> Zoffix++  have a good R&R !

[13:13] <timotimo> seeya Zoffix :)

[13:13] <Geth> ¦ rakudo/nom: b686f41312 | (Aleks-Daniel Jakimenko-Aleksejev)++ | docs/release_guide.pod

[13:13] <Geth> ¦ rakudo/nom: Reflect actual date, claim next release

[13:13] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b686f41312

[13:14] <jnthn> Zoffix: Good relax :)

[13:15] <[Coke]> Thanks everyone (esp. AlexDaniel) for making sure the release is awesome

[13:15] <yoleaux> 10:38Z <Zoffix> [Coke]: looks like cronned doc still is busted. Didn't build existing new commits for 12 hours (even tho ~/update.log had them in), but when I manually $HOME/force-update'ed it, then it just worked.

[13:15] <AlexDaniel> So I'm going to kick off the script in a few minutes, if anybody has any critical issues please feel free to ping me

[13:16] <lizmat> all clear from me

[13:17] <[Coke]> lizmat: is your doc issue temporarily resolved?

[13:17] <lizmat> [Coke]: yes

[13:17] <AlexDaniel> ok I see something in #moarvm…

[13:18] <AlexDaniel> ah “we *won't* need another release”

[13:18] <[Coke]> Looks like the build is hanging on the sync.

[13:20] <AlexDaniel> by the way, maybe to do it 200% right I should have bumped NQP/Moar *before* the release

[13:20] <AlexDaniel> so that people who really want to test it on Windows have easier time doing this

[13:21] <[Coke]> yes. waiting until the last second to bump versions is part of the problem.

[13:21] <[Coke]> This isn't you, it's a long running issue.

[13:24] <AlexDaniel> Maybe we should be publishing beta releases or something? Right now I have the whole process automated locally, it doesn't push tags, bump commits and tarballs, but other than that it is identical to the normal release process

[13:24] <AlexDaniel> so I get tested tarballs on the output

[13:25] <dogbert17> got a flop in t/spec/S29-os/system.t

[13:25] <dogbert17> can someone else run that?

[13:26] <[Coke]> (doc build) - there was a hung copy of htmlify waiting for a lock. killed that, we'll see if that fixes the issue. :|

[13:26] <AlexDaniel> “Some issues can be quickly found by users, even if uncaught by tests” is one of the things Zoffix++ mentioned in his blog post about 2017.04 releases

[13:26] <timotimo> aye

[13:27] <dogbert17> it's test 35: not ok 35 - :cwd(...) changes the directory processes are spawned in

[13:28] <AlexDaniel> c: https://raw.githubusercontent.com/perl6/roast/master/S29-os/system.t

[13:28] <committable6> AlexDaniel, I cannot recognize this command. See wiki for some examples: https://github.com/perl6/whateverable/wiki/Committable

[13:29] <AlexDaniel> c: HEAD https://raw.githubusercontent.com/perl6/roast/master/S29-os/system.t

[13:29] <committable6> AlexDaniel, It looks like a URL, but for some reason I cannot download it (HTTP status line is 503 Service Unavailable).

[13:29] <AlexDaniel> ?

[13:29] <AlexDaniel> c: HEAD https://raw.githubusercontent.com/perl6/roast/master/S29-os/system.t

[13:29] <committable6> AlexDaniel, It looks like a URL, but for some reason I cannot download it (HTTP status line is 503 Service Unavailable).

[13:30] <AlexDaniel> “We are investigating reports of elevated error rates”

[13:31] <AlexDaniel> hey, I need a little bit of github for the release process :)

[13:31] <AlexDaniel> yup, MoarVM clone just failed due to timeout

[13:33] <dogbert17> AlexDaniel: got the test working, had a PATH issue

[13:33] <AlexDaniel> dogbert17: great

[13:34] <[Coke]> here's a thing: doc build kicked off. did a git fetch; the fetch failed (github issues); the lock file was NOT removed.

[13:35] <[Coke]> (this effectively disables any future updates)

[13:38] <timotimo> aaah, dang

[13:38] <timotimo> that's a bad thing :)

[13:38] <timotimo> that's why lock files have the pid of the process in them so they can be removed when the pid in question is found to be dead?

[13:39] <[Coke]> this lock file is empty.

[13:39] <[Coke]> ... (urk. ok, with the job running every five minutes, I am now longer sure which instance of cron this one is from.: )

[13:39] <[Coke]> s/cron/the job/

[13:39] <timotimo> heh.

[13:40] <timotimo> there's a few things i find strange about the introducing perl6 booklet

[13:40] <timotimo> isn't "people claiming moore's law is ending" a meme %)

[13:40] <lizmat> timotimo: please direct your queries about that booklet to mdk  :-)

[13:41] <timotimo> oops, this page calls perl6 a "moden" language %)

[13:43] <timotimo> oh crap, the PDF has an example "sin( /2)" which "will return the sine of  /2" "which, as you know, is 1."

[13:44] <moritz> uhm, which PDF?

[13:47] <timotimo> "introducing perl6", https://drive.google.com/file/d/0B7Iymye3xMqjOEdnb0dwS2QtaTQ/view?usp=sharing

[13:47] <AlexDaniel> fwiw I'm going to wait out github outage instead of trying to make it through connection errors and timeouts

[13:48] <[Coke]> ok. the last logged run had nothing to do - one update I made to the script is that now when it has nothing to do, it explicitly calls "exit"; could this have changed the behavior of flock, which calls the script?

[13:48] <[Coke]> (and that run didn't remove the lock file)

[13:49] <timotimo> how do i best reach mdk?

[13:49] <[Coke]> oh. I misunderstood how flock works. the presence of the lock file means nothing. :|

[13:50] <[Coke]> I... think the doc build is probably fine at the moment, then. :)

[13:50] <timotimo> oh, it actually acquires a lock on the lock file

[13:52] <[Coke]> yup, seems fine ish. Wonder what hung earlier that was giving lizmat/zoffix issues. :|

[13:56] <AlexDaniel> heh, this release is tough. First someone removing their modules from the ecosystem and getting in the way, now github outage :)

[14:44] <dogbert17> timotimo: did you forget a 'break,' here? https://github.com/MoarVM/MoarVM/blob/master/src/spesh/optimize.c#L2139

[14:46] <timotimo> looks like i did. fortunately it's no problem there

[14:46] <timotimo> should be put in, though

[14:47] <dogbert17> do you want to do it or should I do a PR?

[14:48] <timotimo> i can do it real quick

[14:49] <dogbert17> cool, I'll continue looking at your latest Coverity Scan instead then :)

[14:55] <AlexDaniel> alright, “Everything operating normally.”

[15:33] <AlexDaniel> .oO( https://www.youtube.com/watch?v=Cimh1LY1NKs )

[15:35] <Skarsnik> AlexDaniel, do you think I should use Whateverable as a base to do a bot that NativeCallise C code?

[15:37] <AlexDaniel> Skarsnik: it depends. If it's in whateverable project, I'll be maintaining, fixing, refactoring, and writing tests for it for an extended period of time. If that's what you want, then go for it.

[15:38] <AlexDaniel> that's basically the only difference

[15:38] <Skarsnik> I was more thinking from a pratical pov, since it's already have stuff to read from gist and produce gist x)

[15:39] <AlexDaniel> Skarsnik: then yeah

[15:40] <Skarsnik> I just need to rewrite the run-stuff method since I need to ignore stderr x)

[15:40] <AlexDaniel> maybe you want to use “run” directly?

[15:41] <Skarsnik> probably. I just need stdout (from GPTrixie)

[15:41] <Skarsnik> or I could add a silent mode to gptrixie

[15:42] <AlexDaniel> try run, it should work

[15:43] <AlexDaniel> (unless you want it to time out if it's stuck and stuff like that)

[15:44] <AlexDaniel> Skarsnik: by the way, are there any security implications when throwing untrusted inputs into gptrixie?

[15:44] <Skarsnik> gccxml (gcc4.9) will probably complain

[15:45] <AlexDaniel> (because if so, maybe it should go through run-snippet as it will do it in a more or less secure way once I finally implement it)

[15:46] <Skarsnik> basicly the bot will run gptrixie --all generatedheader.h and generatedheader.h is the user feed. gptrixie will do a run 'gccxml', options.. 'generatedheader.h'

[15:46] <Skarsnik> so I don't think you can inject stuff

[15:52] <AlexDaniel> cool

[15:58] * AlexDaniel feels like he is not doing TEST_JOBS=8 or -j 8 somewhere, because this took a bit longer than I wanted

[15:59] <Skarsnik> damn nice error message

[15:59] <Skarsnik> Function 'Type' needs parens to avoid gobbling block (or perhaps it's a class that's not declared or available in this scope?)

[15:59] <Skarsnik> it's exactly that ^^

[16:00] <Skarsnik> This is really obonxious/annoying when working with huge header : Times -- gccxml: 0.5213915 sec; xml parsing: 18.6218791 sec; magic: 1.63685878

[16:17] * AlexDaniel had to reboot :D

[16:18] <Skarsnik> x)

[16:23] <Geth> ¦ nqp/refs/tags/2017.08: 01001f19e1 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[16:23] <Geth> ¦ nqp/refs/tags/2017.08: [release] Bump MoarVM revision to 2017.08.1

[16:23] <Geth> ¦ nqp/refs/tags/2017.08: review: https://github.com/perl6/nqp/commit/01001f19e1

[16:23] <Geth> ¦ nqp/refs/tags/2017.08: d143da5d20 | (Aleks-Daniel Jakimenko-Aleksejev)++ | VERSION

[16:23] <Geth> ¦ nqp/refs/tags/2017.08: [release] Bump VERSION to 2017.08

[16:23] <Geth> ¦ nqp/refs/tags/2017.08: review: https://github.com/perl6/nqp/commit/d143da5d20

[16:23] <Geth> ¦ rakudo/refs/tags/2017.08: 0127c4238f | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[16:23] <Geth> ¦ rakudo/refs/tags/2017.08: [release] Bump NQP revision to 2017.08

[16:23] <Geth> ¦ rakudo/refs/tags/2017.08: review: https://github.com/rakudo/rakudo/commit/0127c4238f

[16:23] <Geth> ¦ rakudo/refs/tags/2017.08: 69a91d62a4 | (Aleks-Daniel Jakimenko-Aleksejev)++ | VERSION

[16:23] <Geth> ¦ rakudo/refs/tags/2017.08: [release] Bump VERSION to 2017.08

[16:23] <Geth> ¦ rakudo/refs/tags/2017.08: review: https://github.com/rakudo/rakudo/commit/69a91d62a4

[16:23] <AlexDaniel> this didn't push the commit itself :/

[16:24] <Geth> ¦ rakudo/nom: 0127c4238f | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/NQP_REVISION

[16:24] <Geth> ¦ rakudo/nom: [release] Bump NQP revision to 2017.08

[16:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0127c4238f

[16:24] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.07-58-gd4d77b66c...2017.08

[16:24] <Geth> ¦ rakudo/nom: 69a91d62a4 | (Aleks-Daniel Jakimenko-Aleksejev)++ | VERSION

[16:24] <Geth> ¦ rakudo/nom: [release] Bump VERSION to 2017.08

[16:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/69a91d62a4

[16:24] <Geth> ¦ rakudo/nom: version bump brought these changes: https://github.com/perl6/nqp/compare/2017.07-58-gd4d77b66c...2017.08

[16:24] <Geth> ¦ nqp: 01001f19e1 | (Aleks-Daniel Jakimenko-Aleksejev)++ | tools/build/MOAR_REVISION

[16:24] <Geth> ¦ nqp: [release] Bump MoarVM revision to 2017.08.1

[16:24] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/01001f19e1

[16:24] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.07-467-gf22f8d7c...2017.08.1

[16:24] <Geth> ¦ nqp: d143da5d20 | (Aleks-Daniel Jakimenko-Aleksejev)++ | VERSION

[16:24] <Geth> ¦ nqp: [release] Bump VERSION to 2017.08

[16:24] <Geth> ¦ nqp: review: https://github.com/perl6/nqp/commit/d143da5d20

[16:24] <Geth> ¦ nqp: version bump brought these changes: https://github.com/MoarVM/MoarVM/compare/2017.07-467-gf22f8d7c...2017.08.1

[16:28] <AlexDaniel> that's it

[16:28] <AlexDaniel> (almost)

[16:29] <Skarsnik> AlexDaniel, I can't find your rt with the missing possibility to pass the source ip for a socket

[16:30] <AlexDaniel> Skarsnik: RT #131766

[16:30] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131766

[16:31] <Skarsnik> damn need to patch 2 things them xà

[16:31] <Skarsnik> async and inet x)

[17:14] * AlexDaniel celebrates with an inappropriate amount of fun

[17:15] <AlexDaniel> honestly, this was hard. I'll what I can do to make it easier for everyone

[17:17] <AlexDaniel> special thanks to samcv++, jnthn++, lizmat++, Zoffix++, nine++, pmurias++, timotimo++ and everybody else who did the awesome work for the release

[17:18] <AlexDaniel> I'll see*

[17:20] <Skarsnik> Hoo the release is done? Contratulation!

[17:27] <timotimo> <3

[17:31] <jnthn> AlexDaniel++ # release

[17:31] <AlexDaniel> releasable6: status

[17:31] <releasable6> AlexDaniel, Next release in 26 days and ?1 hour. No blockers. Changelog for this release was not started yet

[17:37] <timotimo> AlexDaniel: will there be a tweet i can retweet?

[17:38] <AlexDaniel> timotimo: I don't have twitter :/ should I have one?

[17:38] <timotimo> not important

[17:38] <timotimo> moritz has the perl6 news account

[17:43] <Skarsnik> Do I need to make && make install when I change something in rakudo?

[17:43] <timotimo> yup

[17:44] <AlexDaniel> Skarsnik: are you working on the ticket mentioned above?

[17:44] <AlexDaniel> MasterDuke: fwiw ?

[17:48] <[Coke]> Skarsnik: you might even need to reconfigure, depending on what you changed.

[17:49] <timotimo> yeah, but mostly just if you add new files to the core setting

[17:57] <nine> Or work on the build system :)

[18:02] <Skarsnik> AlexDaniel, yes x)

[18:09] <Skarsnik> I am just working on s::inet for now

[18:13] <Skarsnik> hm I added an arg to connect (in MoarVM and Socket.pm) but I get a Stage mast       : Arg count 4 doesn't equal required operand count 3 for op 'connect_sk' and not sure where this is defined

[18:16] <moritz> Skarsnik: src/core/oplist

[18:17] <Skarsnik> Oh it's in Moar so I have to remake in Moar?

[18:19] <timotimo> yeah, if you change the oplist you need to run the generator tool

[18:19] <timotimo> the instructions are at the top of oplist

[18:20] <moritz> timotimo: https://twitter.com/perl6org/status/899697722781040640

[18:26] <raschipi> Any position on implementing 'use v6.d.PREVIEW' as a command line flag to make it easier for people to run modules tests with it to detect upcoming problems?

[18:28] <Skarsnik> hm I ran the update_ops script (with another rakudo perl 6) redid make && make install in Moar and make && make install rakudo and it's still fail

[18:29] <moritz> raschipi: do you mean like -E in perl5?

[18:30] <Skarsnik> Do I have to update a file in nqp?

[18:30] <raschipi> Now that the Failure returns for failed matches were reversed, the toaster isn't detecting it anymore. People got a list of modules with problems and they're fixing it, but if it's introduced anew in another package, we won't know.

[18:31] <raschipi> I don't mean it for normal usage, just for testing the upcoming changes to the language.

[18:33] <raschipi> Like a RAKUDO_MONKEY_TESTING environment variable or something.

[18:33] <timotimo> Skarsnik: you then also need to rebuild nqp

[18:34] <timotimo> because nqp grabs the definitions of the moar ops from the installed files

[18:34] <Skarsnik> this is so confusing xD

[18:34] <timotimo> sorry

[18:34] <ugexe> so make clean?

[18:35] <Skarsnik> make remakeuniverse

[18:36] <Skarsnik> Unhandled exception: Missing or wrong version of dependency '/home/skarsnik/perl6/socket/rakudo/install/bin/../share/nqp/lib/MAST/Nodes.nqp' (from 'src/Perl6/Pod.nqp')

[18:36] <Skarsnik> duh

[18:41] <Skarsnik> make clean worked

[18:43] <Skarsnik> victory. skarsnik@devel:~/perl6/socket/rakudo$ ./install/bin/perl6 --ll-exception -e 'my $conn = IO::Socket::INET.new(:host<localhost>, :port(3333), :source-address<locahost>);'

[18:43] <Skarsnik> Source address : locahost

[18:48] <AlexDaniel> \o/

[18:50] <Skarsnik> I just display the extra arg in moar for now x)

[18:51] <Skarsnik> hm

[18:51] <Skarsnik> can you use a hostname for a source-address

[18:52] <geekosaur> it will have to resolve it to a single address; if it has multiple, it'd take the first applicable (i.e. ignoring ipv6 for an ipv4 socket)

[18:54] <lizmat> AlexDaniel++  :-)

[18:56] <AlexDaniel> \o/ thanks

[19:00] <Skarsnik> Do I get NULL string if an argument is not given?

[19:02] <nine> raschipi: why would you need to test modules?

[19:03] <AlexDaniel> hm, I see that the lines are wrapped a bit in the release announcement that I've sent

[19:09] <AlexDaniel> yup. Next time will make sure not to exceed 72 characters

[19:10] <Skarsnik> is that 1980? xD

[19:17] <Geth> ¦ rakudo/nom: 5db5b1dbfa | (Elizabeth Mattijsen)++ | src/core/Match.pm

[19:17] <Geth> ¦ rakudo/nom: Fix for RT #131936

[19:17] <Geth> ¦ rakudo/nom:

[19:17] <Geth> ¦ rakudo/nom: Provide a HLL version of Match.(made|ast) that returns a Nil instead

[19:17] <Geth> ¦ rakudo/nom: of a lowlevel NQPMu.  Wish there was a better way to test for NQPMu

[19:17] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131936

[19:17] <Geth> ¦ rakudo/nom: though, as this will prevent type objects being properly propagated

[19:17] <Geth> ¦ rakudo/nom: by "make".

[19:17] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5db5b1dbfa

[19:21] <Skarsnik> m: use NativeCall; sub foo(num $a) is native;

[19:21] <camelia> rakudo-moar 69a91d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>?A unit-scoped sub definition is not allowed except on a MAIN sub;?Please use the block form.?at <tmp>:1?------> 3e NativeCall; sub foo(num $a) is native;7?5<EOL>?»

[19:21] <Skarsnik> m: use NativeCall; sub foo(num $a) is native {};

[19:21] <camelia> rakudo-moar 69a91d: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>?Cannot resolve caller infix:<==>(NQPMu, Int); none of these signatures match:?    ($?)?    (\a, \b)?    (Real \a, Real \b)?    (Int:D \a, Int:D \b)?    (int $a, int $b)?    (Num:D \a, Num:D \b …»

[19:26] <Geth> ¦ rakudo/nom: 8a0f6ac110 | (Elizabeth Mattijsen)++ | src/core/Junction.pm

[19:26] <Geth> ¦ rakudo/nom: Simplify setting up auto-threading.

[19:26] <Geth> ¦ rakudo/nom:

[19:26] <Geth> ¦ rakudo/nom: We don't need to pollute the setting with two subs, if we can set them

[19:26] <Geth> ¦ rakudo/nom: up using a pointy block.  This is spectest clean.  I'm assuming the

[19:26] <Geth> ¦ rakudo/nom: named subs were needed at some point in the past.

[19:26] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8a0f6ac110

[19:27] <Skarsnik> hm interesting Rakudo does not close connection on exit

[19:28] <moritz> the OS does

[19:29] <Skarsnik> How I can test if this code work now x)

[19:31] <lizmat> am I the only one not seeing the 2017.08 announcement here? https://www.nntp.perl.org/group/perl.perl6.compiler/2017/08/msg16371.html

[19:32] <Skarsnik> it's empty

[19:32] <lizmat> ok, so you see the same thing as me

[19:32] <lizmat> :-(

[19:33] <lizmat> do we have another place I could link to for the compiler release announcement ?

[19:34] <lizmat> I guess https://github.com/rakudo/rakudo/blob/nom/docs/announce/2017.08.md will have to do

[19:35] <moritz> that's what I used on da twitters

[19:35] <lizmat> moritz++  # that's where I copied it from  :-)

[19:57] <Skarsnik> I wonder if I should just add a socket_listen and expose socket_bind in nqp (and remove listen in bind)

[20:26] <Skarsnik> hm interesting

[20:29] <Skarsnik> I am not sure how to handle/fix that ./install/bin/perl6 -e 'my $conn = IO::Socket::INET.new(:host<127.0.0.1>, :port(80), :source-address<localhost>); $conn.print("GET index.html\r\n"); say $conn.recv()'

[20:29] <Skarsnik> this does not work because it bind localhost to ipv6

[20:29] <ugexe> moritz: can you change the appveyor setup to rakudo org so rakudo org members can restart builds?

[20:29] <Skarsnik> but if I put 127.0.0.1 this work

[20:31] <Skarsnik> AlexDaniel, This is apache log entry : (left is ip source) 127.0.0.1 - - [21/Aug/2017:22:28:28 +0200] "GET index.html" 400 301 "-" "-"

[20:31] <Skarsnik> 10.0.2.15 - - [21/Aug/2017:22:30:37 +0200] "GET index.html" 400 301 "-" "-"

[20:32] <moritz> ugexe: how would I do that?

[20:35] <ugexe> https://www.appveyor.com/docs/team-setup/#setting-up-appveyor-account-for-github-organization moritz: looks like creating an "organizational" account

[20:43] <moritz> ugexe: I'm trying it. Current problem: confirmation emails aren't delivered, so I can't confirm the organization account

[20:45] <moritz> just asked them via twitter

[20:45] <moritz> will try sleep next :-)

[20:47] <ugexe> cool, thanks for trying

[20:48] <Skarsnik> good night people :)

[21:04] <AlexDaniel> “is that 1980?” no, but somebody had this wonderful idea to make it silently change the content of your message when you click “send” (thunderbird)

[21:04] <AlexDaniel> this only happens with plaintext messages I think

[21:06] <lizmat> and yet another Perl 6 Weekly hits the Net: https://p6weekly.wordpress.com/2017/08/21/2017-34-going-atomic/

[21:06] <AlexDaniel> ( or maybe it only matters with plaintext messages… :% )

[21:29] <travis-ci> Rakudo build failed. Elizabeth Mattijsen 'Fix for RT #131936

[21:29] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131936

[21:29] <travis-ci> https://travis-ci.org/rakudo/rakudo/builds/266918795 https://github.com/rakudo/rakudo/compare/69a91d62a477...5db5b1dbfa0b

[21:29] <buggable> [travis build above] ? All failures are due to timeout (0), missing build log (0), GitHub connectivity (1), or failed make test (0).

[22:46] <MasterDuke> AlexDaniel, Skarsnik: cool. i'd gotten as far as creating a MoarVM branch and checking that adding a uv_tcp_bind did in fact do something useful, but then got distracted by adding info to the `failed to resolve hostname` exception and haven't done anything else, so i'll leave it to Skarsnik

[23:02] <AlexDaniel> cool. I'm actually surprised that people have any interest in this ticket

[23:03] <AlexDaniel> I was thinking that I'm the only person who needs this practically
