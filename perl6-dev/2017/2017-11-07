[01:14] <japhb> Interesting article from ~1.5 months ago that I came across today, pertinent to inclusion in technical communities: https://thebias.com/2017/09/26/how-good-intent-undermines-diversity-and-inclusion/

[01:15] <japhb> It puts words to an odd feeling I've had in the past that "assume good intent" could be used as a weapon as well as a positive force.

[01:16] <japhb> But there's an in between there that I think the author didn't address: You can assume non-malicious intent *without* also auto-forgiving bad behavior.

[01:17] <japhb> Still, I see the underlying point I think.

[01:24] <timotimo> even if it's not put in as a "rule" i suppose it conveys an atmosphere of "we'll bend over backwards to find the good intents of your bully when you come to us to complain"

[01:27] * timotimo has only read like a fifth of the article before writing that response

[01:32] <japhb> Yeah, I think that's the takeaway (the rest of the article is worth reading though)

[01:33] <Zoffix> Looks like SJW hogwash to me.

[01:34] <Zoffix> Everyone's under attack and if you disagree, you're part of the problem.

[02:40] <japhb> I fail to understand how SJW is an insult.  Like liberal, scientist, or gay, it's an adjective that has no intrinsic negative connotation for me.  ("So you're saying this person fights ... for justice.  And that's bad ... how exactly?")

[02:54] <japhb> Also, we've already decided to be inclusive with every hug we've got, so studying how to be better at that, even if some of the lessons run counter to our existing preconceptions, seems worthwhile.

[02:57] <Zoffix> japhb: SJW is an insult because SJWs' "fight for justice" has the opposite of the intended effect and the SJWs fail to realize that. They "fight" using the same tools that create injustice and their apparent goal is to eradicate *the people* who espouse unwanted ideas rather than eradicating the ideas themselves.

[03:15] <japhb> I think I see the theory of what you're saying, but I'd need strong evidence that's the reality, given the known prevalence of techniques such as gaslighting.  As a first test, who uses SJW as an insult loudly and publicly?  If they are in a group directly in conflict with the claimed SJWs, they have an incentive to misinterpret/misdirect.

[03:31] <Zoffix> You work at google, right? I think the "Google Memo" fiasco is a good example. Granted, the onslaught of the mindless masses who never even read it probably affected the outcome, but you just gotta chuckle at the irony of firing a guy for pointing out Google's policies are creating a hostile environments for those who don't lean left politically. The fact that right-wingers and their families suffer

[03:31] <Zoffix> material damage due the ideas they hold is I think exactly the proof you're asking for. This is thought police.

[03:36] <japhb> He wasn't fired for pointing out hostility towards right-leaning people.  As I am not a lawyer, I need to be careful not to speculate, but I can say I thought "The Case for Empathy" (https://www.youtube.com/watch?v=T2olLcujHl8) had an interesting view on it.

[03:45] <MasterDuke> m: use nqp; my int \i = nqp::unbox_i(1) # kind of surprising you can have sigil-less natives as routine parameters, but not as `my` variables

[03:45] <camelia> rakudo-moar fc9e7241b: OUTPUT: «Type check failed in binding; expected int but got Int (1)␤  in block <unit> at <tmp> line 1␤␤»

[03:46] <japhb> MasterDuke: That does seem a little odd, though sounds like a simple omission or NYI.

[03:49] <Zoffix> japhb: he's just one of the examples. A quick search shows other cases; even a tubler blog called "racistsgettingfired". And my premise is this: getting a racist fired does nothing for "social justice". It doesn't address the cause why that person thought the idea of racism was a good one. It merely is an agression against a person perceived to hold an idea. It's like an Atheist being against religion and

[03:49] <Zoffix> deciding to fire every priest they could find. It'd do naught to discourage believe in that religion and will only strengthen in (the virtual martyrdom).

[03:51] <MasterDuke> it's one of those things where it's late and i'm tired, so i could very well be forgetting some simple rule about containerization or something like that. or maybe what i'm doing should work. who knows...

[03:52] <Zoffix> japhb: I think it can be viewed as an ultimate final goal: when the social justice "war" is complete. What's the final outcome? Are we meant to be paranoid about some hair style that's predominantly used by $culture and we can't use it because we'd be "racist"? Do I need to find out a person's sex and skin color before I complement their intelligence because of "microagressions" that enforce stereotypes I

[03:52] <Zoffix> intellectually know to be false? Or is it a world where we share our culture and care for another?

[03:52] <Zoffix> Anyway. I guess I started this OT topic :)

[03:52] * Zoffix shuts up and goes to be

[03:52] <Zoffix> d

[04:04] <japhb> Zoffix: I would submit that your premise is incorrect.  If someone in a position of power creates a hostile work environment, that's a bad thing in and of itself (and also illegal).  It doesn't matter *why* they are hostile and in power, *that* they are is a problem in and of itself that should be solved.

[04:05] <japhb> As for the topic being OT, well -- it certainly did go a bit afield, but this comes back to the environment we as a community want to build.

[04:06] <japhb> We need to decide how to handle cases where people are being hostile to newcomers, or beginners, or people from different backgrounds, or fans of other languages, or what have you.

[04:07] <japhb> Hostility and intolerance are easy to simplistically debate when someone goes Godwin, but it's a real problem that we can't be flippant about.  We need to work hard to create a good environment.

[04:08] <Zoffix> japhb: exactly, it's illegal. Why is a twitter mob used where the legal instruments are available?

[04:08] <japhb> Empathy, inclusiveness, and psychological safety are *hard work*, but oh so very worth it in the end.

[04:09] <japhb> Zoffix: Because the legal system is not unbiased, it is not equitable, and it is certainly not perfect.

[04:11] <Zoffix> And a mob is?

[04:13] <japhb> Zoffix: What tools do the disempowered have?  (Also, I will call you on the term 'mob'.  Not every social movement is a 'mob' -- that's a term often used to discredit people organizing for a cause.)

[04:14] <Zoffix> japhb: depends on the country. Here (Canada) everyone's legally equal. Everyone has the same tools.

[04:17] <Zoffix> japhb: http://laws-lois.justice.gc.ca/eng/acts/e-5.401/FullText.html

[04:17] <japhb> And FWIW, I'm not trying to debate all the politics and drama surrounding us right now.  I'm just saying that listening and trying to find the useful bits of various thoughts on community building is a good thing.  We shouldn't discredit someone's ideas just because they are activists on some subject.

[04:17] <Zoffix> Fair enough.

[04:23] * Zoffix plays against self and points out Employment Equity Act does not protect based on sexual orientation

[04:24] <Zoffix> There's some protection by the Human Rights Act tho: http://laws-lois.justice.gc.ca/eng/acts/H-6/page-1.html#h-5

[04:25] <Zoffix> oh man almost midnight /o\

[04:25] * Zoffix drops to bed

[04:25] <japhb> Also, it doesn't protect private sector employees in Yukon, the Northwest Territories, or Nunavut, nor employees of entities under 100 employees

[04:25] <japhb> Good night, Zoffix.  Sleep well.

[04:26] <Zoffix> P.S.: ^ this would be social justice to me. Plugging in these holes in legal documents. Not debating whether "white list/black list" are sexist terms :)

[04:28] <Zoffix> *racist

[08:23] <lizmat> Files=1229, Tests=75827, 318 wallclock secs (14.75 usr  5.35 sys + 2197.03 cusr 214.91 csys = 2432.04 CPU)

[08:43] <lizmat> so, do we have a solution for modules wanting to use atomic ints that should also work on the JVM backend?

[08:43] <lizmat> or are those operators stubbed on the JVM ?

[09:02] <[Tux]> Rakudo version 2017.10-138-gfc9e7241b - MoarVM version 2017.10-58-gad8618468

[09:02] <[Tux]> csv-test-xs-20      0.431 -  0.465

[09:02] <[Tux]> csv-ip5xs           1.115 -  1.116

[09:02] <[Tux]> test-t              3.245 -  3.503

[09:02] <[Tux]> csv-parser         12.352 - 12.920

[09:02] <yoleaux> 6 Nov 2017 17:47Z <japhb> [Tux]: Could you remember the lines in speed-all.log that contain "I'll try to remember to run the timings later today. System is rather busy"?

[09:02] <[Tux]> test               11.920 - 12.994

[09:02] <yoleaux> 6 Nov 2017 17:47Z <japhb> [Tux]: s:1st/remember/remove/

[09:02] <[Tux]> csv-ip5xs-20       12.814 - 13.047

[09:02] <[Tux]> test-t-20 --race   21.706 - 22.639

[09:02] <[Tux]> test-t-20          58.960 - 59.998

[09:05] <[Tux]> japhb, removed

[09:09] <lizmat> [Tux]: I can't help but think something has changed with the new benchmarks: the increase we see with test-t I don't see that in tests I run on my machine

[09:10] <lizmat> could it be the machine is getting a bit hotter and thermal controls throttle the CPU ?

[09:11] <[Tux]> I don't think so: it always builds perl6 just before the timing, so if that is heating it up, it will be the same heat-up as allways

[09:11] <[Tux]> the load is now 0.2, lots of free mem, no swapping

[09:12] <[Tux]> is there a command to tell the CPU to use max?

[09:12] * lizmat is the wrong person to ask that for a Linux machine  :-)

[09:13] <[Tux]> hehm mac is just BSD, also linux :P

[09:13] <lizmat> yeah, but these types of things are generally hardware / motherboard specific, no ?

[09:14] <nine> japhb: I guess the gist is "assume good intent" is excellent _advise_ in communication (especially non-face-to-face), while it's bad as a _rule_ for a community.

[09:16] <gfldex> Zoffix: could you send this guy one of your brochures please? :-> https://blog.abevoelker.com/sick-of-ruby-dynamic-typing-side-effects-object-oriented-programming/

[09:17] <nine> [Tux]: I usually set the frequency govenor to performance when benchmarking: cpupower frequency-set -g performance

[09:18] <[Tux]> Bummer. I recognize that and even have that as a comment: time.pl:# cpupower frequency-set -g performance

[09:19] <nine> One can also set a specific frequency with -f instead of -g

[09:19] <[Tux]> re-running time-twice

[09:26] <[Tux]> Rakudo version 2017.10-138-gfc9e7241b - MoarVM version 2017.10-58-gad8618468

[09:26] <[Tux]> csv-test-xs-20      0.421 -  0.513

[09:26] <[Tux]> csv-ip5xs           1.117 -  1.224

[09:26] <[Tux]> test-t              3.280 -  3.524

[09:26] <[Tux]> test               12.441 - 12.731

[09:26] <[Tux]> csv-ip5xs-20       12.985 - 14.379

[09:26] <[Tux]> csv-parser         12.779 - 15.101

[09:26] <[Tux]> test-t-20 --race   20.621 - 21.645

[09:26] <[Tux]> test-t-20          60.739 - 61.593

[09:31] <lizmat> well, for an identical system, we see quite a lot of variance :-(

[09:47] <lizmat> afk&

[09:58] <gfldex> jnthn: do you got a test for IO::Socket::Async that checks if the Supply is closed when a socket is closed at the remote end before any data was send from the remote end?

[09:58] <gfldex> I think I might need such a test. :-/

[10:03] <jnthn> m: start react whenever IO::Socket::Async.listen('localhost', 33333) { .close }; sleep 0.5; given IO::Socket::Async.connect('localhost', 33333) -> $conn { react whenever $conn { } }; say 'ok'

[10:03] <camelia> rakudo-moar fc9e7241b: OUTPUT: «ok␤»

[10:17] <gfldex> m: start react whenever IO::Socket::Async.listen('localhost', 33333) { .on-close: { say 'on-close' }; .close }; sleep 0.5; given IO::Socket::Async.connect('localhost', 33333) -> $conn { react whenever $conn { } }; say 'ok'

[10:17] <camelia> rakudo-moar fc9e7241b: OUTPUT: «ok␤»

[10:18] <gfldex> should .on-close work in this case?

[10:19] <jnthn> What are you calling .on-close on?

[10:19] <jnthn> Looks like the socket, which isn't going to work

[10:19] <jnthn> It'll probably be dying with a no such method exception

[10:20] <gfldex> m: start react whenever IO::Socket::Async.listen('localhost', 33333) { .Supply.on-close: { say 'on-close' }; .close }; sleep 0.5; given IO::Socket::Async.connect('localhost', 33333) -> $conn { react whenever $conn { } }; say 'ok'

[10:20] <camelia> rakudo-moar fc9e7241b: OUTPUT: «ok␤»

[10:21] <jnthn> That's better but the Supply is never tapped

[10:22] <jnthn> whenever .Supply.on-close({ say 'on-close' }) { } should do it

[10:23] <gfldex> with my golfed httpd, if I hit ctrl-r in the browser it will hang after a few GETs. I'm trying to find out where it hangs.

[10:23] <gfldex> Or better when I hold ctrl-r for a few seconds.

[10:23] <gfldex> anyway, I need to run to work now. Debugging is for later.

[10:23] * gfldex runs

[10:23] <jnthn> o/

[12:58] <pmurias> how do we stop github for marking commits as failed because appveyor is broken?

[13:10] <AlexDaniel> you're talking about nqp repo, right?

[13:10] <AlexDaniel> there is this ticket: https://github.com/perl6/nqp/issues/372

[13:11] <AlexDaniel> I think what we have now was added in an attempt to resolve it

[13:26] <pmurias> AlexDaniel: it needs to either work or get removed

[13:27] <AlexDaniel> pmurias: yea, that's right. I'd say the first option is more preferable :) Perhaps samcv knows more about it

[13:33] <pmurias> AlexDaniel: we can turn it on when it works

[14:32] <Geth> ¦ rakudo: 948a3fa479 | (Elizabeth Mattijsen)++ | lib/Telemetry.pm6

[14:32] <Geth> ¦ rakudo: Fix typo

[14:32] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/948a3fa479

[14:32] <lizmat> commute to amsterdam&

[15:04] <Geth> ¦ rakudo: 1bc9936ad7 | (Elizabeth Mattijsen)++ | src/core/signals.pm

[15:04] <Geth> ¦ rakudo: Make sure that safe signals are more likely handled

[15:04] <Geth> ¦ rakudo:

[15:04] <Geth> ¦ rakudo: If general workers workers are very busy, any handling of signals

[15:04] <Geth> ¦ rakudo: would be queued with the other jobs waiting.  By moving signal handling

[15:04] <Geth> ¦ rakudo: to the timer-queue, which is intended for fast delivery of small jobs,

[15:04] <Geth> ¦ rakudo: we have a large chance of signals getting delivered.

[15:04] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/1bc9936ad7

[15:28] <Zoffix> Someone's warning against using getrusage: https://www.reddit.com/r/perl6/comments/7b921x/201745_uplink_established/

[15:28] <yoleaux> 14:51Z <perlpilot> Zoffix: you might want to include a couple of sad-path examples in WWW

[15:29] <Zoffix> No, thanks. `orelse` isn't rocket surgery.

[15:35] <lizmat> Zoffix: also, the supervisor calls it from a single thread, and the snapper also from a single thread, typically only 10 times / second

[15:35] <Zoffix> ah right

[15:36] <lizmat> so, less chance of lock contention

[15:36] <lizmat> afk for a bit again&

[16:23] <jnthn> Hm, think I have a fix for #1230

[16:30] <jnthn> Darn, nope. Fixes the bug, regresses something lese.

[16:30] <jnthn> *else

[16:33] <jnthn> Ah, I forgot something

[16:43] <Geth> ¦ rakudo: 965575710c | (Jonathan Worthington)++ | 3 files

[16:43] <Geth> ¦ rakudo: Ensure CLOSE phasers have correct outer chain

[16:43] <Geth> ¦ rakudo:

[16:43] <Geth> ¦ rakudo: Fixes #1230.

[16:43] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/965575710c

[16:43] <synopsebot> RAKUDO#1230 [closed]: https://github.com/rakudo/rakudo/issues/1230 [concurrency] CLOSE phaser can have busted outer scope

[16:44] <Geth> ¦ roast: f910bc98d8 | (Jonathan Worthington)++ | S17-supply/syntax.t

[16:44] <Geth> ¦ roast: Test for rakudo/1230

[16:44] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f910bc98d8

[16:44] <jnthn> There we go

[16:46] * AlexDaniel dislikes the ISSUE_TEMPLATE we have now

[16:46] <AlexDaniel> anybody else feeling this way?

[16:50] <jnthn> AlexDaniel: What do you dislike about it, in particular?

[16:51] <jnthn> I think maybe "The Problem" could do away

[16:51] <jnthn> Expected/Actual behavior are really useful to guide people to submit.

[16:52] * Zoffix likes ISSUE_TEMPLATE

[16:52] <AlexDaniel> as a person reporting a bug, I don't want to fill in half of the questions. I end up deleting the whole thing anyway

[16:52] <AlexDaniel> (taking my latest regression ticket as an example, all required info is in there already)

[16:53] <Zoffix> So delete it. That's what the instructions tell you to do. The people who don't know what to report, on the other hand, have the questions to guide them.

[16:53] <AlexDaniel> It feels like we can guide people with subsequent questions when needed

[16:54] <Zoffix> "subsequent" to what? The person might not file the report at all.

[16:54] <Zoffix> "subsequent" to what? The person might never respond again.

[16:55] <Zoffix> "subsequent" to what? The person might no longer have the problematic machine/program in their possession.

[16:55] <AlexDaniel> you think this template will make them feel more welcome? It could be so, but I see it as annoying paperwork

[16:56] <Zoffix> Yes. The template tells them they came to the right place.

[16:56] <Zoffix> And it specifically says the template is optional.

[16:56] <jnthn> AlexDaniel: I suspect you're not the target audience for the template.

[16:57] <jnthn> Suggesting to people who may not report compiler bugs week in, week out, what information is useful, is a good idea IMO

[16:59] <AlexDaniel> we'll see how it goes

[17:00] <jnthn> Indeed, with GitHub issues in general. So far I think it's going OK.

[17:03] <[Coke]> Having done support in various cases for a while, we need to think of our own sanity to some degree. if the report has no expected/actual information, we can't easily fix it anyway.

[17:03] <[Coke]> so if someone has a doubt about how to report, the template is overall helpful.

[17:05] * jnthn bbl

[18:25] <lizmat> csv-test-xs-20      0.425 -  0.476

[18:25] <lizmat> csv-ip5xs           1.101 -  1.102

[18:25] <lizmat> test-t --race       1.258 -  1.430

[18:25] <lizmat> test-t              3.201 -  3.206

[18:25] <lizmat> test               11.771 - 11.860

[18:25] <lizmat> csv-parser         12.160 - 12.448

[18:25] <lizmat> csv-ip5xs-20       12.567 - 12.718

[18:25] <lizmat> test-t-20 --race   19.686 - 21.689

[18:25] <lizmat> test-t-20          57.704 - 59.213

[18:25] <lizmat> new: test-t --race  :-)

[18:48] <timotimo> oh, would you look at that

[21:10] <lizmat> thought experiment because of a gettext presentation I'm looking at:

[21:11] <lizmat> could this be made to work?  If so, how?

[21:11] <lizmat> m: role Deutsch { }; my $a = "one two three" but Deutsch; say $a # how to get "eins zwei drei" ??'

[21:11] <camelia> rakudo-moar 965575710: OUTPUT: «one two three␤»

[21:13] <lizmat> I guess some MOP magic ??

[21:13] <gfldex> m: role Deutsch { method Str { <1 2 3>.Str }  }; my $a = "one two three" but Deutsch; say $a

[21:13] <camelia> rakudo-moar 965575710: OUTPUT: «one two three␤»

[21:14] <gfldex> m: role Deutsch { method gist { <1 2 3>.Str }  }; my $a = "one two three" but Deutsch; say $a

[21:14] <camelia> rakudo-moar 965575710: OUTPUT: «one two three␤»

[21:14] <AlexDaniel> m: role Deutsch { method Str { <1 2 3>.Str }  }; my $a = "one two three" but Deutsch; put $a

[21:14] <camelia> rakudo-moar 965575710: OUTPUT: «one two three␤»

[21:14] <AlexDaniel> m: role Deutsch { method Str { <1 2 3>.Str }  }; my $a = "one two three" but Deutsch; put $a.Str

[21:14] <camelia> rakudo-moar 965575710: OUTPUT: «1 2 3␤»

[21:15] <lizmat> I guess our text in say/put should be more like type =:= Str rather than isa Str

[21:15] <lizmat> but we can'd do that in MMD

[21:16] <lizmat> afaik

[21:24] <Geth> ¦ rakudo: MasterDuke17++ created pull request #1239: Simplify INTERPOLATE_ASSERTION

[21:24] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1239

[21:24] <synopsebot> RAKUDO#1239 [open]: https://github.com/rakudo/rakudo/pull/1239 Simplify INTERPOLATE_ASSERTION

[21:36] <Zoffix> m: role Deutsch { method Str { "eins zwei drei" } }; multi say(Deutsch $_) is default { say .Str }; my $a = "one two three" but Deutsch; say $a

[21:36] <camelia> rakudo-moar 965575710: OUTPUT: «eins zwei drei␤»

[21:38] <Zoffix> m: role Deutsch { has str $!value is box_target = "eins zwei drei" }; my $a = "one two three" but Deutsch; say $a

[21:38] <camelia> rakudo-moar 965575710: OUTPUT: «While composing Str+{Deutsch}: Duplicate box_target for native str: attributes 0 and 0␤  in block <unit> at <tmp> line 1␤␤»

[21:44] <Geth> ¦ tap-harness6: CurtTilmes++ created pull request #20: Fix Issue #19: write-only $/

[21:44] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/pull/20

[22:09] <Geth> ¦ rakudo: tbrowder++ created pull request #1240: Fix rt #128221

[22:09] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1240

[22:09] <synopsebot> RT#128221 [open]: https://rt.perl.org/Ticket/Display.html?id=128221 [BUG] Weird internal error when parsing some very simple Pod with '-' in the first column of a table in Rakudo

[22:09] <synopsebot> RAKUDO#1240 [open]: https://github.com/rakudo/rakudo/pull/1240 Fix rt #128221

[22:17] <Geth> ¦ roast: tbrowder++ created pull request #353: Fix rt 128221

[22:17] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/353

[22:17] <synopsebot> SPEC#353 [open]: https://github.com/perl6/roast/pull/353 Fix rt 128221

[22:50] <Geth> ¦ rakudo: fa8bc54981 | (Daniel Green)++ | src/core/Match.pm

[22:50] <Geth> ¦ rakudo: Simplify INTERPOLATE_ASSERTION

[22:50] <Geth> ¦ rakudo:

[22:50] <Geth> ¦ rakudo: by removing some unused variables and conditionals.

[22:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/fa8bc54981

[22:50] <Geth> ¦ rakudo: 0e50993f41 | (Aleks-Daniel Jakimenko-Aleksejev)++ (committed using GitHub Web editor) | src/core/Match.pm

[22:50] <Geth> ¦ rakudo: Merge pull request #1239 from MasterDuke17/simplify_INTERPOLATE_ASSERTION_even_more

[22:50] <synopsebot> RAKUDO#1239 [closed]: https://github.com/rakudo/rakudo/pull/1239 Simplify INTERPOLATE_ASSERTION

[22:50] <Geth> ¦ rakudo:

[22:50] <Geth> ¦ rakudo: Simplify INTERPOLATE_ASSERTION

[22:50] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/commit/0e50993f41

[23:08] <Geth> ¦ tap-harness6: 738cf16d4c | (Curt Tilmes)++ | lib/TAP.pm

[23:08] <Geth> ¦ tap-harness6: Fix Issue #19: write-only $/

[23:08] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/commit/738cf16d4c

[23:08] <Geth> ¦ tap-harness6: f1a9d84ed9 | (Zoffix Znet)++ (committed using GitHub Web editor) | lib/TAP.pm

[23:08] <Geth> ¦ tap-harness6: Merge pull request #20 from CurtTilmes/master

[23:08] <Geth> ¦ tap-harness6:

[23:08] <Geth> ¦ tap-harness6: Fix Issue #19: write-only $/

[23:08] <Geth> ¦ tap-harness6: review: https://github.com/perl6/tap-harness6/commit/f1a9d84ed9

[23:54] <tbrowder> hi, lizmat!

[23:54] <lizmat> hi tbrowder

[23:54] <lizmat> just back from Amsterdam.pm meeting (another ~2 hour drive through dense fog half of the way)

[23:54] <lizmat> so don't expect much from me at this time  :-)

[23:55] <tbrowder> i finally submitted my rakudo PR for pod tables, including tests in a roast PR. i hope you can check it out when you get a chance.

[23:56] <tbrowder> fog, yuck! glad you arrived safely.

[23:58] <lizmat> yeah, me too  :-)

[23:58] <lizmat> will look at it tomorrow, unless someone beats me to it :-)

[23:58] <lizmat> good night,

[23:58] <lizmat> &

[23:58] <timotimo> pod tables!

[23:58] <timotimo> i'm glad about that

[23:58] <tbrowder> thnx, nite!

[23:59] <timotimo> i once tried to make them work better. unfortunately it was a two-pass-parsing thing, so TT wasn't very happy
