[00:05] <MasterDuke> RT #123572

[00:05] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123572

[00:43] <Zoffix> m: with '/tmp/foo88'.IO { .spurt: "a\r\nb\r\nc"; with .open(:nl-in("\n")) { dd .lines } }

[00:43] <camelia> rakudo-moar 0c5fe5: OUTPUT: «("a", "b", "c").Seq␤»

[00:44] <Zoffix> (never mind; had an idea but it won't work)

[00:58] <Geth> ¦ rakudo/newer-cat-handle: e657ed140b | (Zoffix Znet)++ | src/core/IO/CatHandle.pm

[00:58] <Geth> ¦ rakudo/newer-cat-handle: [io grant] Implement IO::CatHandle.chomp/.nl-in

[00:58] <Geth> ¦ rakudo/newer-cat-handle: review: https://github.com/rakudo/rakudo/commit/e657ed140b

[00:59] <Geth> ¦ roast/newer-cat-handle: f48c26e304 | (Zoffix Znet)++ | S32-io/io-cathandle.t

[00:59] <Geth> ¦ roast/newer-cat-handle: [io grant] Test IO::CatHandle.chomp/.nl-in

[00:59] <Geth> ¦ roast/newer-cat-handle: review: https://github.com/perl6/roast/commit/f48c26e304

[01:04] <samcv> ok i figured out the problem. well what's causing it at least.

[01:05] <samcv> idk i still don't understand why but.

[01:05] <samcv> i've tracked down the exact commit

[01:05] <Geth> ¦ rakudo/newer-cat-handle: dafb060360 | (Zoffix Znet)++ | src/core/IO/CatHandle.pm

[01:05] <Geth> ¦ rakudo/newer-cat-handle: Change IO::CatHandle.close semantics

[01:05] <Geth> ¦ rakudo/newer-cat-handle:

[01:05] <Geth> ¦ rakudo/newer-cat-handle: .close now exhausts the CatHandle, closing any open handles and then

[01:05] <Geth> ¦ rakudo/newer-cat-handle: nixing the handle que and Nil'ing the active handle

[01:05] <Geth> ¦ rakudo/newer-cat-handle: review: https://github.com/rakudo/rakudo/commit/dafb060360

[01:05] <Geth> ¦ roast/newer-cat-handle: 9ebee4d4ee | (Zoffix Znet)++ | S32-io/io-cathandle.t

[01:05] <Geth> ¦ roast/newer-cat-handle: Test new cat handle .close semantics

[01:05] <Geth> ¦ roast/newer-cat-handle: review: https://github.com/perl6/roast/commit/9ebee4d4ee

[01:07] <samcv> u: help

[01:07] <unicodable6> samcv, Just type any unicode character or part of a character name. Alternatively, you can also provide a code snippet. # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Unicodable

[01:08] <samcv> unidump:  ♥

[01:08] <unicodable6> samcv, https://gist.github.com/cb23bca12098f476966e45f22220d49b

[01:08] <Geth> ¦ roast/newer-cat-handle: 8afd75831f | (Zoffix Znet)++ | S32-io/io-cathandle.t

[01:08] <Geth> ¦ roast/newer-cat-handle: [io grant] Test IO::CatHandle.DESTROY

[01:08] <Geth> ¦ roast/newer-cat-handle: review: https://github.com/perl6/roast/commit/8afd75831f

[01:09] <samcv> ok was wondering if it had Emoji_Base. looks like only hase Emoji=True

[01:10] <Geth> ¦ roast/newer-cat-handle: ea1d99a4dc | (Zoffix Znet)++ | S32-io/io-cathandle.t

[01:10] <Geth> ¦ roast/newer-cat-handle: Clean up placeholder test blocks

[01:10] <Geth> ¦ roast/newer-cat-handle:

[01:10] <Geth> ¦ roast/newer-cat-handle: .nl-in is already tested and .flush is NYI; tested in Rakudo's suite

[01:10] <Geth> ¦ roast/newer-cat-handle: review: https://github.com/perl6/roast/commit/ea1d99a4dc

[01:11] <Zoffix> no more placeholder tests; no more stubs \o/ cathandle merge tonight \o/

[01:12] <samcv> jnthn, yes i think it's related to the buffer... NFG_QC=False characters are what mess it up

[01:12] <samcv> so it wasn't that commit that caused it. i think the bug has been there before. the commit just set Emoji codepoints to have NFG_QC=False

[01:13] <samcv> m:my $f1 = "/tmp/foo121212".IO; $f1.spurt: "fo♥22"; $f1.open.readchars(2).say

[01:13] <evalable6> samcv, rakudo-moar 0c5fe56cc: OUTPUT: «fo♥22»

[01:13] <ugexe> Supply.migrate/merge and CatHandle seem to be pretty similar

[01:13] <samcv> m: my $f1 = "/tmp/foo121212".IO; $f1.spurt: "fo♥22a"; $f1.open.readchars(2).say

[01:13] <camelia> rakudo-moar 0c5fe5: OUTPUT: «fo␤»

[01:13] <ugexe> might make sense to make them use a similar api

[01:13] <samcv> but if i add something with NFG_QC=True to the end of it. then it seems to work

[01:13] <samcv> m: my $f1 = "/tmp/foo121212".IO; $f1.spurt: "fo2♥22a"; $f1.open.readchars(2).say

[01:13] <camelia> rakudo-moar 0c5fe5: OUTPUT: «fo␤»

[01:15] * Zoffix doesn't see any similarities

[01:15] <Zoffix> "Creates a supply that acts like the last supply emitted to the given supply of supplies (usually created with start."

[01:15] <Zoffix> .oO( wat? )

[01:18] <samcv> argh

[01:24] <ugexe> Zoffix: so in CatHandle it would mean you could do something like expose $!handle (if it were a supply anyway) despite the fact it changes what is supplying $.supply

[01:27] * Zoffix is still not following

[01:27] <Zoffix> cathandle is meant to be mostly-substitutable for any place that takes an IO::Handle. Its API is already locked up

[01:28] <AlexDaniel> shouldn't it say “usually created with Supply.start” to make it clearer?

[01:30] <ugexe> e.g. `my $ch = CatHandle.new; my $handle = $ch.handle; #`do cathandle stuff` is $.handle === $handle anymore? who knows

[01:31] <ugexe> Supply.migrate gives you an aggregator where that works

[01:34] <samcv> what email am i supposed to send RT replies to?

[01:34] <samcv> er wait nvm i think my outgoing mailbox is not working atm

[02:30] <Zoffix> m: -> \new { say new if $++ }(42)

[02:30] <camelia> rakudo-moar 0c5fe5: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of C++ constructor syntax; in Perl 6 please use method call syntax␤at <tmp>:1␤------> 3-> \new { say new if 7⏏5$++ }(42)␤»

[02:30] <Zoffix> I really want a "I'm coding Perl 6, not whatever other language you think I'm trying to code, so stfu"

[02:30] <Zoffix> option

[02:32] <Zoffix> Hell, I don't think I wrote a single line of C++ code in my life.

[02:32] <samcv> haha

[02:32] <samcv> did not know we had that..

[02:34] <Zoffix> m: my $z is default(Nil); dd $z;    class Foo { has $!z is default(Nil); method x { dd $!z } }.new.x

[02:34] <camelia> rakudo-moar 0c5fe5: OUTPUT: «Nil $z = Nil␤Any $!z = Any␤»

[02:36] <Zoffix> Filed as: https://rt.perl.org/Ticket/Display.html?id=131387

[02:36] <Zoffix> Cat handle bug discovery count: 4 \o/

[02:41] <Geth> ¦ rakudo/newer-cat-handle: a452e42de4 | (Zoffix Znet)++ | src/core/IO/CatHandle.pm

[02:41] <Geth> ¦ rakudo/newer-cat-handle: [io grant] Implement IO::CatHandle.on-switch

[02:41] <Geth> ¦ rakudo/newer-cat-handle: review: https://github.com/rakudo/rakudo/commit/a452e42de4

[02:42] <Geth> ¦ roast/newer-cat-handle: c7eff2b444 | (Zoffix Znet)++ | S32-io/io-cathandle.t

[02:42] <Geth> ¦ roast/newer-cat-handle: [io grant] Test IO::CatHandle.on-switch

[02:42] <Geth> ¦ roast/newer-cat-handle: review: https://github.com/perl6/roast/commit/c7eff2b444

[02:50] <Geth> ¦ roast/newer-cat-handle: e87e20d8d9 | (Zoffix Znet)++ | S32-io/io-cathandle.t

[02:50] <Geth> ¦ roast/newer-cat-handle: [io grant] Test IO::CatHandle.next-handle

[02:50] <Geth> ¦ roast/newer-cat-handle: review: https://github.com/perl6/roast/commit/e87e20d8d9

[02:52] <Zoffix> Well, here goes nothing...

[02:52] * Zoffix swaps IO::ArgFiles to be IO::CatHandle

[02:53] <Zoffix> ZofBot: place your bets. How many roast failures will we get? I'm betting $100 on zero

[02:53] <ZofBot> Zoffix, How that is subsequently treated depends on its eventual binding

[02:57] <Zoffix> aw, crap. Lost a $100!

[02:58] <Zoffix> Oh, right. I forgot to amend the instantiation logic of $*ARGFILES. Maybe I haven't lost it yet :P

[03:06] <Zoffix> oh man; yeah, lost the $100

[03:07] * Zoffix switches to 6.c-errata

[03:08] <Zoffix> well, there's at least 1 failure :\

[03:10] <Zoffix> w00t, just 1 failure

[03:10] <Zoffix> "Can change $*IN.nl-in and it has effect"

[03:12] <Zoffix> I'm gonna change it. It should be setting $*ARGFILES.nl-in, not $*IN.nl-in

[03:17] <Zoffix> Ah, actually maybe I won't need to. `my $cat = IO::CatHandle.new($*IN); $*IN.nl-in = "x"; say $cat.lines` this works, so wtf

[03:18] <Zoffix> Ah, I know why. $*ARGFILES isn't actually setup until you try to access the variable

[03:19] <Zoffix> k, I'm gonna go with changing 6.c-errata test and making an argument why the test is wrong

[03:21] <Zoffix> Actually no; I'm gonna use $*IN's attributes to set $*ARGFILES's attrs and the test will pass as is.

[03:22] <Zoffix> It's still a wrong way to change line separator when reading from $*ARGFILES, but I then won't need to change any 6.c-errata test

[03:34] <Zoffix> yey clean 6.c stresstest (there are 4 failures in t/spec/S03-operators/mix. but it don't look like my doing)

[03:38] <Geth> ¦ roast/newer-cat-handle: 06146ae54d | (Zoffix Znet)++ | S16-filehandles/argfiles.t

[03:38] <Geth> ¦ roast/newer-cat-handle: Throw out incorrect IO::ArgFiles.slurp tests

[03:38] <Geth> ¦ roast/newer-cat-handle:

[03:38] <Geth> ¦ roast/newer-cat-handle: The tests were added[^1] 6 months ago and are not part of 6.c-errata.

[03:38] <Geth> ¦ roast/newer-cat-handle:

[03:38] <Geth> ¦ roast/newer-cat-handle: The :bin/:enc .slurp slurps in is controlled via the handle's attributes,

[03:38] <Geth> ¦ roast/newer-cat-handle: not arguments to .slurp method.

[03:38] <Geth> ¦ roast/newer-cat-handle:

[03:38] <Geth> ¦ roast/newer-cat-handle: [1] https://github.com/rakudo/rakudo/commit/15f51a52bd

[03:38] <Geth> ¦ roast/newer-cat-handle: review: https://github.com/perl6/roast/commit/06146ae54d

[03:39] <Zoffix> oh; forgot to add ^ and that's already tested in S32-io/io-cathandle.t so I threw out the tests instead of fixing them, since that'd be redundant

[03:43] <Geth> ¦ roast/newer-cat-handle: 914845afe4 | (Zoffix Znet)++ | S16-io/words.t

[03:43] <Geth> ¦ roast/newer-cat-handle: Fix words() with no args test

[03:43] <Geth> ¦ roast/newer-cat-handle:

[03:43] <Geth> ¦ roast/newer-cat-handle: The test was added[^1] 1 month ago and is not part of 6.c-errata.

[03:43] <Geth> ¦ roast/newer-cat-handle:

[03:43] <Geth> ¦ roast/newer-cat-handle: CatHandle'd argfiles are instantiated with positionals and

[03:43] <Geth> ¦ roast/newer-cat-handle: not :args[] attr

[03:43] <Geth> ¦ roast/newer-cat-handle:

[03:43] <Geth> ¦ roast/newer-cat-handle: [1] https://github.com/perl6/roast/commit/8f78ca604c3edbd7b4eb9c9b3f5

[03:43] <Geth> ¦ roast/newer-cat-handle: review: https://github.com/perl6/roast/commit/914845afe4

[03:45] <Zoffix> Well, that was unexpectedly unpainful

[03:45] <Zoffix> ZOFVM: Files=1247, Tests=136915, 115 wallclock secs (22.76 usr  3.17 sys + 2372.40 cusr 129.73 csys = 2528.06 CPU)

[03:47] <Geth> ¦ rakudo/newer-cat-handle: f539a62404 | (Zoffix Znet)++ | 2 files

[03:47] <Geth> ¦ rakudo/newer-cat-handle: [io grant] Swap IO::ArgFiles to IO::CatHandle impl

[03:47] <Geth> ¦ rakudo/newer-cat-handle: review: https://github.com/rakudo/rakudo/commit/f539a62404

[03:47] <Zoffix> " Can’t automatically merge. Don’t worry, you can still create the pull request." gawd dammit

[03:49] <Zoffix> Ah. it's the argfiles

[03:50] <Geth> ¦ rakudo/newer-cat-handle: 85710a71c0 | (Zoffix Znet)++ | src/core/CompUnit/PrecompilationRepository.pm

[03:50] <Geth> ¦ rakudo/newer-cat-handle: Close unit's file handle after reading in the bytecode

[03:50] <Geth> ¦ rakudo/newer-cat-handle:

[03:50] <Geth> ¦ rakudo/newer-cat-handle: A file is left open on Windows, so it prevents it from being worked on.

[03:50] <Geth> ¦ rakudo/newer-cat-handle:

[03:50] <Geth> ¦ rakudo/newer-cat-handle: Fixes RT#131378: https://rt.perl.org/Ticket/Display.html?id=131378

[03:50] <Geth> ¦ rakudo/newer-cat-handle: review: https://github.com/rakudo/rakudo/commit/85710a71c0

[03:50] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131378

[03:51] <Zoffix> still conflict wtf

[03:52] <Geth> ¦ rakudo: zoffixznet++ created pull request #1089: IO::CatHandle impl

[03:52] <Geth> ¦ rakudo: review: https://github.com/rakudo/rakudo/pull/1089

[03:55] <Zoffix> looks like Geth/github doesn't like 150+ commit merges

[03:56] <Geth> ¦ roast: zoffixznet++ created pull request #272: IO::CatHandle tests

[03:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/pull/272

[03:56] <Geth> ¦ roast/master: 82 commits pushed by (Zoffix Znet)++, (Elizabeth Mattijsen)++, usev6++, (Jonathan Worthington)++, dogbert17++

[03:56] <Geth> ¦ roast/master: review: https://github.com/perl6/roast/compare/f3ef06fbd4...2e0f3d8c1f

[04:02] <Zoffix> ZofBot: happy midnight!

[04:02] <ZofBot> Zoffix, perl6/rakudo-history') rakudo-moar d22303: ( no output ) m: dd Nil

[04:29] <Zoffix> ZOFVM: Files=1247, Tests=136915, 119 wallclock secs (22.47 usr  2.96 sys + 2397.25 cusr 135.55 csys = 2558.23 CPU)

[05:18] <BenGoldberg> m: my $a = :a('b'); say $a.key;

[05:18] <camelia> rakudo-moar 522782: OUTPUT: «a␤»

[05:18] <BenGoldberg> m: my $a = :a('b'); say $a.:key;

[05:18] <camelia> rakudo-moar 522782: OUTPUT: «Cannot resolve caller new(Pair: Pair, Str, Bool); none of these signatures match:␤    (Pair $: Cool:D \key, Mu \value, *%_)␤    (Pair $: Mu \key, Mu \value, *%_)␤    (Pair $: Mu :$key!, Mu :$value!, *%_)␤  in block <unit> at <tmp> line 1␤␤»

[05:20] * BenGoldberg wonders how useful it would be if $object.:methodname was syntactic sugar for methodname => $object.methodname

[05:25] <Geth> ¦ rakudo/nom: a0b6f6b839 | (Zoffix Znet)++ | src/core/IO/CatHandle.pm

[05:25] <Geth> ¦ rakudo/nom: Remove useless .eof call

[05:25] <Geth> ¦ rakudo/nom:

[05:25] <Geth> ¦ rakudo/nom: We already know what it'll return due to previous loop filtering

[05:25] <Geth> ¦ rakudo/nom: out all the True values from it.

[05:25] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a0b6f6b839

[05:30] <Zoffix> m: (my $f1 = '/tmp/x42foo'.IO).spurt: 'I ♥ Perl'; (my $f2 = '/tmp/x42bar'.IO).spurt: 'meow'; my $cat = IO::CatHandle.new: $f1, $f2; .say while $_ = $cat.getc;

[05:30] <camelia> rakudo-moar 522782: OUTPUT: «I␤ ␤♥␤ ␤P␤e␤rl␤m␤e␤o␤w␤»

[05:30] * Zoffix points at `rl` part

[05:30] <Zoffix> Seems same bug as .readchars I reported a few hours back

[05:34] <Zoffix> m: IO::CatHandle.new.perl.say

[05:34] <camelia> rakudo-moar a0b6f6: OUTPUT: «IO::CatHandle.new(chomp => Bool::True, nl-in => $["\n", "\r\n"], encoding => "utf8", on-switch => Callable, path => Any, chomp => Bool::True, nl-in => $["\n", "\r\n"], nl-out => "\n", encoding => "utf8")␤»

[05:34] <Zoffix> looks like Mu.perl grabs all the attributes, even the ones the subclass overrides

[05:34] <Zoffix> or "shadows"

[05:36] <Zoffix> m: use nqp; dd @(nqp::list).perl

[05:36] <camelia> rakudo-moar a0b6f6: OUTPUT: «Cannot find method 'cache': no method cache and no .^find_method␤  in block <unit> at <tmp> line 1␤␤»

[05:36] <Zoffix> What's the trick to turn nqp::list into List or Array?

[05:40] <Zoffix> m: use nqp; my $l := nqp::list; nqp::push($l, 42); dd nqp::p6bindattrinvres([], List, '$!reified', $l).perl

[05:40] <camelia> rakudo-moar a0b6f6: OUTPUT: «"[42]"␤»

[05:40] <Zoffix> guess that does the trick

[05:57] <llfourn> Zoffix: is there any plan to make .dirname and .absolute on IO::Path return an IO::Path?

[05:58] <llfourn> (rather than a Str)

[05:58] <Zoffix> llfourn: no

[05:58] <Zoffix> .absolute is one of the two ways to stringify an IO::Path (the second being .relative)

[05:58] <Zoffix> And .dirname is part of .parts; all Str objects as well

[05:59] <llfourn> Zoffix: rgr that. Thanks.

[06:22] <Geth> ¦ rakudo/nom: fa7aa1c369 | (Zoffix Znet)++ | src/core/IO/CatHandle.pm

[06:22] <Geth> ¦ rakudo/nom: [io grant] Implement IO::CatHandle.perl method

[06:22] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fa7aa1c369

[06:22] <Geth> ¦ roast: 28717f097e | (Zoffix Znet)++ | S32-io/io-cathandle.t

[06:22] <Geth> ¦ roast: [io grant] Test IO::CatHandle.perl method

[06:22] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/28717f097e

[06:55] <Geth> ¦ roast: 55c35fb760 | (Zoffix Znet)++ | S32-io/io-cathandle.t

[06:55] <Geth> ¦ roast: Spec IO::Handle.on-switch args past queue exhaustion

[06:55] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/55c35fb760

[07:16] <nine> Good morning!

[07:16] <yoleaux> 26 May 2017 16:39Z <brrt> nine: that it is supposed to be one of those 'viral replacement' deals

[07:16] <yoleaux> 27 May 2017 12:14Z <Zoffix> nine: would you double check this commit? It fixes my Windows gmake install bug, but I'm not 100% sure if the close is in the right place: https://github.com/rakudo/rakudo/commit/0c5fe56cc9

[07:17] <Zoffix> \o

[07:17] <Zoffix> .oO( it's morning already? )

[07:17] <Zoffix> ZofBot: time for a cupacoffee

[07:17] <ZofBot> Zoffix, chdir method chdir(:$CWD = $*CWD --> Bool) Like "chdir()", but with "

[07:18] <nine> Zoffix: unfortunately I don't think your fix is correct. CompUnit::Loader::load-precompilation-file calls nqp::loadbytecodefh which on MoarVM will mmap the file for lazy reading. The file will be closed by the resulting CompUnit's destructor as up until then, we could lazily read from the precomp file.

[07:18] <Zoffix> OK. I'll revert it and re-open the ticket.

[07:19] <Geth> ¦ rakudo/nom: a8b67641b0 | (Zoffix Znet)++ | src/core/IO/CatHandle.pm

[07:19] <Geth> ¦ rakudo/nom: Add return type constraint to CatHandle.opened

[07:19] <Geth> ¦ rakudo/nom:

[07:19] <Geth> ¦ rakudo/nom: For consistency

[07:19] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a8b67641b0

[07:24] <Zoffix> ZOFFLOP: t/spec/S11-modules/nested.t

[07:24] <Geth> ¦ rakudo/nom: f027779177 | (Zoffix Znet)++ | src/core/CompUnit/PrecompilationRepository.pm

[07:24] <Geth> ¦ rakudo/nom: Revert "Close unit's file handle after reading in the bytecode"

[07:24] <Geth> ¦ rakudo/nom:

[07:24] <Geth> ¦ rakudo/nom: This reverts commit 0c5fe56cc97696527912fa2077451227e910ea0b.

[07:24] <Geth> ¦ rakudo/nom:

[07:24] <Geth> ¦ rakudo/nom: Per: https://irclog.perlgeek.de/perl6-dev/2017-05-28#i_14648278

[07:24] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f027779177

[07:25] <nine> I wonder why this issue hasn't appeared earlier.

[07:29] <Zoffix> I think ugexe said they experienced it intermintently in the past.

[07:33] <nine> Oh, wait a minute!

[07:34] <nine> Your fix might have been correct after all. From mmap (3p): "The mmap() function shall add an extra reference to the file associated with the file descriptor fildes which is not removed by a subsequent close() on that file descriptor. This reference shall be removed when there are no more mappings to the file."

[07:35] <nine> Looks like we are allowed to close the fd from which we mmapped.

[07:38] <Zoffix> man, the handle .read/.readchars/.Supply arg-taking inconsistency is uncomfortably obvious when methods are documented in alphabetical order :(

[07:39] <Zoffix> worse, the defaults use $*DEFAULT-READ-ELEMS, which isn't specced :/

[07:44] <Geth> ¦ rakudo/nom: 8ec4dc5bbf | (Stefan Seifert)++ | src/core/CompUnit/PrecompilationRepository.pm

[07:44] <Geth> ¦ rakudo/nom: Revert "Revert "Close unit's file handle after reading in the bytecode""

[07:44] <Geth> ¦ rakudo/nom:

[07:44] <Geth> ¦ rakudo/nom: This reverts commit f027779177593ea5bf07d3ac7ee06591af0d7946.

[07:44] <Geth> ¦ rakudo/nom:

[07:44] <Geth> ¦ rakudo/nom: Zoffix++'s fix may actually have been correct after all.

[07:44] <Geth> ¦ rakudo/nom: From mmap (3p): "The mmap() function shall add an extra reference to the file

[07:44] <Geth> ¦ rakudo/nom: associated with the file descriptor fildes which is not removed by a subsequent

[07:44] <Geth> ¦ rakudo/nom: close() on that file descriptor. This reference shall be removed when there

[07:44] <Geth> ¦ rakudo/nom: are no more mappings to the file."

[07:44] <Geth> ¦ rakudo/nom:

[07:44] <Geth> ¦ rakudo/nom: As I don't see any alternative fix anyway, let's give this an honest try.

[07:44] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8ec4dc5bbf

[07:44] <nine> Sorry for the noise

[07:46] <Zoffix> cool

[08:27] <Zoffix> How disappointing. Stayed up to finish IO::CatHandle docs and my internet goes down right when I'm done with them, so I can't commit :(

[08:27] <Zoffix> ZofBot: I want a refund

[08:27] <ZofBot> Zoffix, --execute, -e *line* Execute a single-line program in lax mode

[08:27] <Zoffix> huh

[08:28] <Zoffix> Now someone is trolling me... It went back up as soon as I typed ^ that

[08:28] <Zoffix> \o/

[08:42] <Geth> ¦ rakudo/nom: 87d0e0a39e | (Elizabeth Mattijsen)++ | src/core/Baggy.pm

[08:42] <Geth> ¦ rakudo/nom: Fix for #131386, spotted by zostay++

[08:42] <Geth> ¦ rakudo/nom:

[08:42] <Geth> ¦ rakudo/nom: An empty Baggy doesn't have the underlying hash allocated: we need

[08:42] <Geth> ¦ rakudo/nom: to keep thinking about that.  Please note that the binding to $raw

[08:42] <Geth> ¦ rakudo/nom: can go once we've made %!elems a low level hash itself.

[08:42] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/87d0e0a39e

[08:42] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131386

[08:50] <[Tux]> This is Rakudo version 2017.05-276-g87d0e0a39 built on MoarVM version 2017.05-25-g62bc54e9

[08:50] <[Tux]> csv-ip5xs        2.745

[08:50] <[Tux]> test            12.861

[08:50] <[Tux]> test-t           4.463 - 4.514

[08:50] <[Tux]> csv-parser      13.319

[08:50] <[Tux]> I will do a reboot soonish and retest after that

[08:53] <Zoffix> buggable: eco speed 4

[08:53] <buggable> Zoffix, Nothing found

[08:53] <Zoffix> buggable: speed 4

[08:53] <buggable> Zoffix, ▄▁▂▁ data for 2017-05-27–2017-05-28; range: 4.439s–4.640s; 4% faster

[08:54] <Zoffix> buggable: speed 6

[08:54] <buggable> Zoffix, ▁▆▇▃▅▄ data for 2017-05-26–2017-05-28; range: 4.286s–4.640s; 4% slower

[08:54] <Zoffix> buggable: speed 20

[08:54] <buggable> Zoffix, ▂▂▁▁▇▇▂▂▁▁▃▂▃▄▂▇█▅▆▅ data for 2017-05-19–2017-05-28; range: 4.225s–4.640s; 5% slower

[09:07] <Zoffix> m: my \term:<????> = -42; say ????; say ????.abs; say "{????}"; my $foo = ''; say "{????.abs}:$foo" for ????.abs

[09:07] <camelia> rakudo-moar 87d0e0: OUTPUT: «-42␤42␤-42␤42:␤»

[09:07] <Zoffix> m:    '/tmp/file1'.IO.spurt: "a\nb\nc"; '/tmp/file2'.IO.spurt: "d\ne\n"; '/tmp/file3'.IO.spurt: "f\ng\nh\ni"; my $line; my \term:<????> = IO::CatHandle.new('/tmp/file1', '/tmp/file2'.IO, '/tmp/file3'.IO.open,        :on-switch{ $line = 1 }); say "{????.path}:$line $_" for ????.lines

[09:07] <camelia> rakudo-moar 87d0e0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Bogus statement␤at <tmp>:1␤------> 3        :on-switch{ $line = 1 }); say "{7⏏5????.path}:$line $_" for ????.lines␤    expecting any of:␤        prefix␤        term␤»

[09:07] <Zoffix> m:    '/tmp/file1'.IO.spurt: "a\nb\nc"; '/tmp/file2'.IO.spurt: "d\ne\n"; '/tmp/file3'.IO.spurt: "f\ng\nh\ni"; my $line; my \x = IO::CatHandle.new('/tmp/file1', '/tmp/file2'.IO, '/tmp/file3'.IO.open,        :on-switch{ $line = 1 }); say "{x.path}:$line $_" for x.lines

[09:07] <camelia> rakudo-moar 87d0e0: OUTPUT: «/tmp/file1:1 a␤/tmp/file1:1 b␤/tmp/file1:1 c␤/tmp/file2:1 d␤/tmp/file2:1 e␤/tmp/file3:1 f␤/tmp/file3:1 g␤/tmp/file3:1 h␤/tmp/file3:1 i␤»

[09:08] <Zoffix> Wonder what exactly is making it unhappy in the middle version :|

[09:12] <Zoffix> m:    '/tmp/file1'.IO.spurt: "a\nb\nc"; '/tmp/file2'.IO.spurt: "d\ne\n"; '/tmp/file3'.IO.spurt: "f\ng\nh\ni"; my $line; my \term:<x> = IO::CatHandle.new('/tmp/file1', '/tmp/file2'.IO, '/tmp/file3'.IO.open,        :on-switch{ $line = 1 }); say "{x.path}:$line $_" for x.lines

[09:12] <camelia> rakudo-moar 87d0e0: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Undeclared routine:␤    x used at line 1␤␤»

[09:12] <Zoffix> m: my \term:<x> = 42; say x.path

[09:12] <camelia> rakudo-moar 87d0e0: OUTPUT: «"42".IO␤»

[09:14] <Zoffix> Filed as https://rt.perl.org/Ticket/Display.html?id=131389

[09:33] <Zoffix> .tell PerlJam IIRC it was you who lamented impossibility of Perl 5's `$.` for $*ARGFILES var in Perl 6. It's no longer impossible ($*ARGFILES is IO::CatHandle now): https://twitter.com/zoffix/status/868761719639871488

[09:33] <yoleaux> Zoffix: I'll pass your message to PerlJam.

[09:33] * Zoffix drops to bed

[10:08] <[Tux]> Error encoding UTF-8 string: could not encode codepoint 1480095 (0x16959F), codepoint out of bounds. Cannot encode higher than 1114111 (0x10FFFF)

[10:08] <[Tux]> bi-directional utf8-c8

[11:06] <samcv> [Tux], that's with your test yo ushowed me earlier? or was that somebody else i'm forgetting

[11:09] <jnthn> utf8-c8 probably shouldn't care and just encode it anyway

[11:09] <jnthn> Or it should spot it's a surrogate on the way in and emit synthetics for the bytes

[11:21] <timotimo> yeah, it should

[11:26] <[Tux]> samv: https://github.com/Tux/CSV/blob/master/88.t

[11:56] <lizmat> https://nxadm.wordpress.com/2017/05/28/so-what-about-perl-6-dependencies/

[12:17] <[Tux]> This is Rakudo version 2017.05-276-g87d0e0a39 built on MoarVM version 2017.05-25-g62bc54e9

[12:17] <[Tux]> csv-ip5xs        2.695

[12:17] <[Tux]> test            12.869

[12:17] <[Tux]> test-t           4.344 - 4.368

[12:17] <[Tux]> csv-parser      13.193

[13:26] <dogbert17> m: (my $baz) = 11, 13; say $baz.perl;

[13:26] <camelia> rakudo-moar 87d0e0: OUTPUT: «$(11, 13)␤»

[13:27] <dogbert17> commit: 2016.06 (my $baz) = 11, 13; say $baz.perl;

[13:27] <committable6> dogbert17, ¦2016.06: «$(11, 13)»

[13:27] <dogbert17> commit: 2016.01 (my $baz) = 11, 13; say $baz.perl;

[13:27] <committable6> dogbert17, ¦2016.01: «$(11, 13)»

[13:28] <dogbert17> commit: 2015.11 (my $baz) = 11, 13; say $baz.perl;

[13:28] <committable6> dogbert17, ¦2015.11: «$(11, 13)»

[13:30] * [Tux] changes .travis.yml

[13:31] <[Tux]> what is the zef invocation for <<panda installdeps .>>?

[13:35] <dogbert17> FLAGS

[13:35] <dogbert17> --depsonly              Install only the dependency chains of the requested distributions

[13:36] * dogbert17 guesses 'zef install --depsonly <module>'

[13:36] <dogbert17> commit: 2016.06 my ( @foo, $bar ); @foo = ($bar) = 42, "str"; say @foo.perl

[13:36] <committable6> dogbert17, ¦2016.06: «[(42, "str"),]»

[13:36] <dogbert17> commit: 2016.01 my ( @foo, $bar ); @foo = ($bar) = 42, "str"; say @foo.perl

[13:36] <committable6> dogbert17, ¦2016.01: «[(42, "str"),]»

[13:40] <dogbert17> commit: 2016.01 my ( @array, $num ); @array = $num = 42, "str"; say $num.perl

[13:40] <committable6> dogbert17, ¦2016.01: «42»

[13:42] <dogbert17> commit: 2015.11 my ( @array, $num ); @array = $num = 42, "str"; say $num.perl

[13:42] <committable6> dogbert17, ¦2015.11: «42»

[13:42] <dogbert17> commit: 2015.06 my ( @array, $num ); @array = $num = 42, "str"; say $num.perl

[13:42] <committable6> dogbert17, ¦2015.06: «$(42, "str")»

[13:43] * dogbert17 wonders if this could have been a GLR change

[13:49] <moritz> assignment of a scalar to a list never produced a flat list, iirc

[14:01] <[Tux]> https://travis-ci.org/Tux/CSV/jobs/236888669 => https://travis-ci.org/Tux/CSV/jobs/236888669#L455 Out of memory

[14:01] <[Tux]> anything I need to set for travis to pass jvm?

[14:11] <dogbert17> moritz: thx, I'm going through the examples in https://docs.perl6.org/language/variables atm. What do you think of the following text from that same pod:

[14:11] <dogbert17> https://github.com/perl6/doc/blob/master/doc/Language/variables.pod6#L116

[14:11] <dogbert17> it must have worked as described at some point I guess

[14:18] <moritz> huh, it actually works

[14:18] <moritz> I'm wrong

[14:18] <moritz> but $num contains 42, not the whole array

[14:18] <moritz> it's parsed as @array = (($num = 42), "str")

[14:20] <dogbert17> moritz: I wonder if that paragraph should be removed, what do you think?

[14:21] <moritz> dogbert17: I'm rewriting it right now

[14:24] <dogbert17> moritz++

[14:29] <dogbert17> m: for <ab:c d$e fgh ij*> { .say if m/<!alpha>/; } # from the same pod

[14:29] <camelia> rakudo-moar 87d0e0: OUTPUT: «ab:c␤d$e␤fgh␤ij*␤»

[14:29] <dogbert17> commit: 2015.06 for <ab:c d$e fgh ij*> { .say if m/<!alpha>/; } # from the same pod

[14:29] <committable6> dogbert17, ¦2015.06: «ab:c␤d$e␤fgh␤ij*»

[15:03] <Zoffix> buggable: speed 6

[15:03] <buggable> Zoffix, ▆▃▄▃▁▁ data for 2017-05-27–2017-05-28; range: 4.344s–4.640s; 6% faster

[15:03] <Zoffix> *phew*

[15:03] * Zoffix is glad the speed did not worsen with the cat handle merge

[15:06] <dogbert17> [Tux] rebooted his computer for an instant speed boost :)

[15:07] <Zoffix> :)

[15:50] * Zoffix regrets a bit not taking time to dig deeper into the whole IO::Notification business

[15:50] <Zoffix> Creating new file seems to send FileChanged + FileRenamed but sometimes sends two FileChanged events :S

[15:52] <Zoffix> My tests will be flopping

[15:53] <Zoffix> Though I notice .watch-path already got some tests under S17-supply..

[15:53] <Zoffix> Future-Zoffix: if you ever need the IO::Notification tests you started writing again: https://gist.github.com/zoffixznet/7c80faf1c35d389b614b9cb11cdca9b6

[15:55] <Zoffix> oh damn there are only macosx tests

[16:43] <ugexe> does that $unit.close code only work because load-precompilation-file() uses different file ops than regular perl6 IO stuff?

[16:53] <Zoffix> ZOFVM: Files=1247, Tests=136915, 116 wallclock secs (22.07 usr  3.22 sys + 2337.54 cusr 139.44 csys = 2502.27 CPU)

[16:58] <Geth> ¦ rakudo/nom: 8027cc9b2c | (Zoffix Znet)++ | 3 files

[16:58] <Geth> ¦ rakudo/nom: Make IO::Spec::*.split an `only` method

[16:58] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8027cc9b2c

[17:10] <Zoffix> ZOFFLOP: t/spec/S17-supply/batch.t

[17:10] <Geth> ¦ rakudo/nom: cd6ae22626 | (Zoffix Znet)++ | src/core/IO/Spec/Cygwin.pm

[17:10] <Geth> ¦ rakudo/nom: Make IO::Spec::Cygwin.split's return type consistent

[17:10] <Geth> ¦ rakudo/nom:

[17:10] <Geth> ¦ rakudo/nom: With other Specs

[17:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cd6ae22626

[17:35] <Geth> ¦ rakudo/nom: 6ca702fa3d | (Zoffix Znet)++ | src/core/IO/Spec/Unix.pm

[17:35] <Geth> ¦ rakudo/nom: [io grant] Make IO::Spec::Unix.splitdir 7.7x faster

[17:35] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6ca702fa3d

[17:42] <Zoffix> NeuralAnomaly, status

[17:42] <yoleaux> 17:42Z <ufobat> Zoffix: thanks!

[17:42] <NeuralAnomaly> Zoffix, [✘] Next release will be in 2 weeks and 5 days. Since last release, there are 25 new still-open tickets (22 unreviewed and 0 blockers) and 277 unreviewed commits. See http://perl6.fail/release/stats for details

[17:43] <Zoffix> 277 commits already? methinks all that branch merging duplicated some commits (as far as perl6.fail is concerned anyway)

[17:44] <Zoffix> Yup.

[17:44] <Zoffix> Need better code for it

[17:53] <Geth> ¦ rakudo/nom: 2816ef7166 | (Zoffix Znet)++ | src/core/IO/Spec/Win32.pm

[17:53] <Geth> ¦ rakudo/nom: [io grant] Make IO::Spec::Win32.splitdir 25x faster

[17:53] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2816ef7166

[17:55] <Geth> ¦ rakudo/nom: f8b63f257a | (Zoffix Znet)++ (committed using GitHub Web editor) | src/core/Rakudo/Iterator.pm

[17:55] <Geth> ¦ rakudo/nom: Fix typo in comment

[17:55] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f8b63f257a

[18:05] <Zoffix> "91.16%

[18:05] <Zoffix> Oh yeah :) the final stretch of IO grant \o/

[18:56] <Zoffix> why have .split and .splitpath :/

[18:57] <Zoffix> IO::Spec* stuff is ridiculous

[18:58] <Zoffix> I thik the speculations mention it's modeled after File::Spec... That module always felt odd

[19:03] <lizmat> bisectable: my $h = %(); say $h.^name

[19:04] <bisectable6> lizmat, On both starting points (old=2015.12 new=f8b63f2) the exit code is 0 and the output is identical as well

[19:04] <bisectable6> lizmat, Output on both points: «Hash»

[19:04] <lizmat> bisectable: help

[19:04] <bisectable6> lizmat, Like this: bisectable6: old=2015.12 new=HEAD exit 1 if (^∞).grep({ last })[5] // 0 == 4 # See wiki for more examples: https://github.com/perl6/whateverable/wiki/Bisectable

[19:04] <lizmat> bisectable: old=2017.04.3 my $h = %(); say $h.^name

[19:04] <bisectable6> lizmat, On both starting points (old=2017.04.3 new=f8b63f2) the exit code is 0 and the output is identical as well

[19:04] <bisectable6> lizmat, Output on both points: «Hash»

[19:04] <Zoffix> c: all my $h = %(); say $h.^name

[19:05] <committable6> Zoffix, ¦all (41 commits): «Hash»

[19:05] <lizmat> ok, then I don't know what brian was on  :-)

[19:06] <Zoffix> m: my $h = %( ); say $h.^name

[19:06] <camelia> rakudo-moar f8b63f: OUTPUT: «Hash␤»

[19:06] <Zoffix> m: my $h = %(); say $h.^name

[19:06] <camelia> rakudo-moar f8b63f: OUTPUT: «Hash␤»

[19:06] <ugexe> probably also worked better for the old spec of IO::File(:uri<>) or whatever, since it'd probably need to split different parts of the url

[19:06] <lizmat> bisectable: old=2015.12 my $h = %(); say $h.^name

[19:07] <bisectable6> lizmat, On both starting points (old=2015.12 new=f8b63f2) the exit code is 0 and the output is identical as well

[19:07] <bisectable6> lizmat, Output on both points: «Hash»

[19:08] <Zoffix> I get Hash for both in REPL and perl6 -e "" on Win10 on bdfoy's version

[19:44] <Geth> ¦ rakudo/nom: b3cd299e1c | (Zoffix Znet)++ | src/core/IO/Handle.pm

[19:44] <Geth> ¦ rakudo/nom: Throw on IO::Handle.comb/.split when in bin mode

[19:44] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b3cd299e1c

[20:01] <BenGoldberg> Why does IO::Handle have both behavior for both binary files and text files in it?

[20:02] <Zoffix> BenGoldberg: as opposed to... ?

[20:03] <BenGoldberg> Wouldn't it make more sense to have classes IO::Handle::Binary and IO::Handle::Text, which would be subclasses of IO::Handle?

[20:03] <BenGoldberg> You could eliminate all of the tests for if($!decoder)

[20:04] <Zoffix> BenGoldberg: but you can switch from binary to non-binary and back while reading a stream

[20:05] <BenGoldberg> Use Metamodel::Primitives.rebless? :)

[20:05] <Zoffix> :)

[20:10] <Geth> ¦ rakudo/nom: f0eb245028 | usev6++ | t/spectest.data

[20:10] <Geth> ¦ rakudo/nom: Don't run S19-command-line/repl.t on JVM

[20:10] <Geth> ¦ rakudo/nom:

[20:10] <Geth> ¦ rakudo/nom: All tests from that file do currently hang with rakudo-j.

[20:10] <Geth> ¦ rakudo/nom:

[20:10] <Geth> ¦ rakudo/nom: Should be reverted once RT #131393 is resolved.

[20:10] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f0eb245028

[20:10] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=131393

[20:11] <Geth> ¦ rakudo/nom: 21fd2c4ade | (Zoffix Znet)++ | src/core/IO/Path.pm

[20:11] <Geth> ¦ rakudo/nom: [io grant] Remove IO::Path.watch

[20:11] <Geth> ¦ rakudo/nom:

[20:11] <Geth> ¦ rakudo/nom: There are zero tests for it and the whole notifications business

[20:11] <Geth> ¦ rakudo/nom: is quite rough on the edges and probably needs more work. Remove

[20:11] <Geth> ¦ rakudo/nom: the method so we don't lock ourselves into supporting some API

[20:11] <Geth> ¦ rakudo/nom: that might not be suitable once notifications are sorted out.

[20:11] <Geth> ¦ rakudo/nom:

[20:11] <Geth> ¦ rakudo/nom: The functionality is still available via

[20:11] <Geth> ¦ rakudo/nom: IO::Notification.watch-path: $path

[20:11] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/21fd2c4ade

[20:13] <lizmat> Zoffix: there *rae* tests for IO::Path.watch, afaik

[20:13] <lizmat> *are rather

[20:13] <Zoffix> All tests successful.

[20:14] <Zoffix> Files=1247, Tests=136915, 116 wallclock secs (22.21 usr  3.16 sys + 2357.40 cusr 128.34 csys = 2511.11 CPU)

[20:14] <Zoffix> Result: PASS

[20:14] <Geth> ¦ roast: f5e26792a3 | usev6++ | 3 files

[20:14] <Geth> ¦ roast: [JVM] Add ticket number to fudge messages

[20:14] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/f5e26792a3

[20:15] <Zoffix> zoffix@VirtualBox~/CPANPRC/rakudo/t/spec (master)$ grep -FR '.watch'

[20:15] <Zoffix> S17-supply/watch-path.t:    my $s = IO::Notification.watch-path('.').grep({.path eq $filename}).unique;

[20:15] <Zoffix> zoffix@VirtualBox~/CPANPRC/rakudo/t/spec (master)$

[20:15] <Zoffix> lizmat: ther are OSX tests for .watch-path but I'm not seeing any others. And stresstest passed on the removal

[20:16] <lizmat> yeah, a. that's because nobody took the trouble of writing any tests for their OS

[20:16] <lizmat> and b. I forgot to actually test for the IO::Path.watch sugar for IO::Notification.watch-path

[20:17] <Geth> ¦ rakudo/nom: 65941b29d8 | (Zoffix Znet)++ | src/core/IO/Path.pm

[20:17] <Geth> ¦ rakudo/nom: Revert "[io grant] Remove IO::Path.watch"

[20:17] <Geth> ¦ rakudo/nom:

[20:17] <Geth> ¦ rakudo/nom: This reverts commit 21fd2c4adeb4b63dad182a81ddce9797130b33e0.

[20:17] <Geth> ¦ rakudo/nom:

[20:17] <Geth> ¦ rakudo/nom: Per: https://irclog.perlgeek.de/perl6/2017-05-28#i_14650194

[20:17] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/65941b29d8

[20:21] <Geth> ¦ roast: b60cef93e3 | usev6++ | 3 files

[20:21] <Geth> ¦ roast: [JVM] Unfudge passing tests (IO related)

[20:21] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/b60cef93e3

[20:25] <Geth> ¦ roast: 432bf94b95 | (Zoffix Znet)++ | S17-supply/watch-path.t

[20:25] <Geth> ¦ roast: [io grant] Test IO::Path.watch

[20:25] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/432bf94b95

[20:30] <lizmat> Zoffix++   # will tune tests further if needed

[20:43] <Geth> ¦ roast: 23916098d4 | usev6++ | S16-io/lines.t

[20:43] <Geth> ¦ roast: Cleanup test file S16-io/lines.t

[20:43] <Geth> ¦ roast:

[20:43] <Geth> ¦ roast: All tests pass on JVM now. The code duplication that was introduced

[20:43] <Geth> ¦ roast: in order to fudge tests for JVM is no langer neccessary.

[20:43] <Geth> ¦ roast:

[20:43] <Geth> ¦ roast: This basically reverts 7e1ef3ee0875908f9632cc8a9002c61e889b7348.

[20:43] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/23916098d4

[20:45] <Geth> ¦ rakudo/nom: a47a78f859 | (Zoffix Znet)++ | src/core/io_operators.pm

[20:45] <Geth> ¦ rakudo/nom: [io grant] Remove useless :SPEC/:CWD on some IO subs

[20:45] <Geth> ¦ rakudo/nom:

[20:45] <Geth> ¦ rakudo/nom: The .IO coercer does not currently take :SPEC or :CWD args and

[20:45] <Geth> ¦ rakudo/nom: based on commitable's results[^1], it never did.

[20:45] <Geth> ¦ rakudo/nom:

[20:45] <Geth> ¦ rakudo/nom: Remove the args altogether, making the calls themselves 26x faster

[20:45] <Geth> ¦ rakudo/nom: (if not counting for actual unlinking/rmdiring/chmodding) by not

[20:45] <Geth> ¦ rakudo/nom: <…commit message has 5 more lines…>

[20:45] <Geth> ¦ rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a47a78f859

[20:56] <Geth> ¦ roast: edd4e1928d | usev6++ | S02-types/sethash.t

[20:56] <Geth> ¦ roast: Fix variable declaration

[20:56] <Geth> ¦ roast:

[20:56] <Geth> ¦ roast: Commit d35cdc2e added some blocks, leading to breakage due to

[20:56] <Geth> ¦ roast: undeclared variables on JVM

[20:56] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/edd4e1928d

[20:57] <lizmat> m: use nqp; dd nqp::atkey(nqp::null,"a")   # that's unexpected

[20:57] <camelia> rakudo-moar a47a78: OUTPUT: «Mu␤»

[20:58] <lizmat> sorta expected that to blow up

[21:03] <BenGoldberg> chmod, unlink, and rmdir all look as if they should be written as eager grep ...

[21:04] <BenGoldberg> return eager @filenames.grep: *.chmod($mode);

[21:05] <BenGoldberg> # etc.

[21:05] <Geth> ¦ roast: 7d2e331367 | usev6++ | S32-io/seek.t

[21:05] <Geth> ¦ roast: Indent closing curly and make fudger happy

[21:05] <Geth> ¦ roast:

[21:05] <Geth> ¦ roast: For some reasons the fudger does not like to closing curlies on

[21:05] <Geth> ¦ roast: the same level. (Test file dies with 'Unexpected closing bracket'

[21:05] <Geth> ¦ roast: on JVM.)

[21:05] <Geth> ¦ roast: review: https://github.com/perl6/roast/commit/7d2e331367

[21:07] <bartolin_> s/to/two/  :-(

[21:07] * bartolin_ should go to bed

[21:08] <Zoffix> BenGoldberg: slower

[21:09] <Zoffix> core code is weird in places cause speed is the name of the game

[21:09] <BenGoldberg> Huh, weird.

[21:12] <jnthn> BenGoldberg: In char mode, you are allowed to .read and .write also (with the caveat that you should really only .read after doing char-level stuff after a control char, otherwise all bets are off)

[21:12] <jnthn> Should only switch encoding in that case too, fwiw. We should probably document this.

[21:13] <MasterDuke> m: say :10[88,9,4]

[21:13] <camelia> rakudo-moar a47a78: OUTPUT: «8894␤»

[21:13] <MasterDuke> should values in the list >= the base be allowed?

[21:13] <MasterDuke> RT #123572

[21:13] <synopsebot6> Link:  https://rt.perl.org/rt3/Public/Bug/Display.html?id=123572

[21:15] <jnthn> MasterDuke: Probably not

[21:15] <jnthn> m: say :11[88,9,4]

[21:15] <camelia> rakudo-moar a47a78: OUTPUT: «10751␤»

[21:15] <MasterDuke> die or throw?

[21:16] <jnthn> Though I dunno if the result is sensible here?

[21:16] <jnthn> Hm, I'm confused what it even means now :)

[21:17] <MasterDuke> 88*11**2 + 9*11**1 + 4*11**0, right?

[21:18] <MasterDuke> oh, i gave a bad example

[21:18] <MasterDuke> m: say :3[4,22,2]

[21:18] <camelia> rakudo-moar a47a78: OUTPUT: «104␤»

[21:21] <Zoffix> jnthn: control char being which unicode property? Also, how come?

[21:21] <Zoffix> (also which bets? :) that you don't lose any bytes between the non-control char and the .read?)

[21:23] <Zoffix> m: with '/tmp/43434foo'.IO { .spurt: 'I♥Perl 6'; with .open { .readchars(2).say; .read(6).decode.say } }

[21:23] <camelia> rakudo-moar a47a78: OUTPUT: «I♥␤erl 6␤»

[21:23] <Zoffix> Is that it? Or is it the bug with hearts I filed yesterday?

[21:24] <Zoffix> m: with '/tmp/43434foo'.IO { .spurt: 'IlPerl 6'; with .open { .readchars(2).say; .read(6).decode.say } }

[21:24] <camelia> rakudo-moar a47a78: OUTPUT: «Il␤erl 6␤»

[21:24] <Zoffix> I guess tis the bets off

[21:25] <dogbert17> jnthn: the calculation made in https://github.com/MoarVM/MoarVM/commit/b41c4e397a8c0ee3466357062f18bc0d9e432f15 doesn't play entirely well with my system (32 bit). This code 'my int @a = 1..18_000_000' will fail with an allocation error even though I have 2.5 gigs available in my system. Could there be some kind of thinko on line 330?

[21:25] <jnthn> Zoffix: https://github.com/MoarVM/MoarVM/blob/master/src/strings/normalize.h#L73

[21:26] <jnthn> Zoffix: As for why - because there may be things hanging around in the normalization buffer.

[21:26] <Zoffix> Thanks. I'll document it.

[21:27] <jnthn> Technically we could try to pull them out and re-encode them but it's a lot of hassle for something that I can't think of a single real-world use for.

[21:27] <Zoffix> m: with '/tmp/43434foo'.IO { .spurt: 'I♥Perl 6'; with .open { .readchars(2).say; .encoding: Nil; .read(6).decode.say } }

[21:27] <camelia> rakudo-moar a47a78: OUTPUT: «I♥␤erl 6␤»

[21:27] <Zoffix> OK

[21:28] <jnthn> The real-world uses are things like parsing HTTP headers as latin-1 and then switching to whatever the body is or just grabbing the body as bytes

[21:28] <jnthn> And those are fine 'cus \n is a control

[21:36] * jnthn goes to relax and rest...seems the weekend is almost over already...

[21:47] <BenGoldberg> Monday is still part of the weekend ;)

[21:50] <geekosaur> only in the US

[22:02] * Zoffix has a long weekend too, thanks to booked vacation day :)

[22:02] <Zoffix> .seen labster

[22:02] <yoleaux> I saw labster 12 May 2017 00:21Z in #perl6: <labster> m: rx/<$y=$x>/

[22:03] <Zoffix> .tell labster sent you a PR fixing a handle leak in File::Directory::Tree (it's the module recommended by docs.perl6.org): https://github.com/labster/p6-file-directory-tree/pull/9

[22:03] <yoleaux> Zoffix: I'll pass your message to labster.

[22:04] <Zoffix> 97.67% of IO grant done...

[22:04] * Zoffix is tired -_-

[22:05] <MasterDuke> maybe IONinja needs to take over? i've never heard of a ninja getting tired

[22:05] <Zoffix> ;0

[22:06] <Zoffix> I mean :)

[22:25] <ugexe> in the u.s. you can get a prescription to fix that

[22:26] <MasterDuke> .ask TimToady re https://rt.perl.org/rt3/Public/Bug/Display.html?id=123572, what is the expected behavior of the :3[4, 22, 1] radix form? should digits greater than the base be allowed (e.g., the 4 in my example)? should values in the list greater than the base be allowed?

[22:26] <yoleaux> MasterDuke: I'll pass your message to TimToady.

[22:26] <MasterDuke> .ask moritz re https://rt.perl.org/rt3/Public/Bug/Display.html?id=123572, what is the expected behavior of the :3[4, 22, 1] radix form? should digits greater than the base be allowed (e.g., the 4 in my example)? should values in the list greater than the base be allowed?

[22:26] <yoleaux> MasterDuke: I'll pass your message to moritz.

[22:26] <MasterDuke> .ask masak re https://rt.perl.org/rt3/Public/Bug/Display.html?id=123572, what is the expected behavior of the :3[4, 22, 1] radix form? should digits greater than the base be allowed (e.g., the 4 in my example)? should values in the list greater than the base be allowed?

[22:26] <yoleaux> MasterDuke: I'll pass your message to masak.

[22:27] <ugexe> you can always /msg commands too...

[22:28] <MasterDuke> ah, thanks, i'd forgotten about that
